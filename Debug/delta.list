
delta.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001221c  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001e18  080124c0  080124c0  000224c0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080142d8  080142d8  00030284  2**0
                  CONTENTS
  4 .ARM          00000008  080142d8  080142d8  000242d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080142e0  080142e0  00030284  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080142e0  080142e0  000242e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080142e4  080142e4  000242e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000284  24000000  080142e8  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000b0c  24000288  0801456c  00030288  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  24000d94  0801456c  00030d94  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00030284  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001c283  00000000  00000000  000302b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000035a1  00000000  00000000  0004c535  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001328  00000000  00000000  0004fad8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000011b0  00000000  00000000  00050e00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003953f  00000000  00000000  00051fb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001d1f5  00000000  00000000  0008b4ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00165337  00000000  00000000  000a86e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0020da1b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006268  00000000  00000000  0020da6c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000288 	.word	0x24000288
 80002bc:	00000000 	.word	0x00000000
 80002c0:	080124a4 	.word	0x080124a4

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	2400028c 	.word	0x2400028c
 80002dc:	080124a4 	.word	0x080124a4

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_drsub>:
 8000390:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000394:	e002      	b.n	800039c <__adddf3>
 8000396:	bf00      	nop

08000398 <__aeabi_dsub>:
 8000398:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800039c <__adddf3>:
 800039c:	b530      	push	{r4, r5, lr}
 800039e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003a6:	ea94 0f05 	teq	r4, r5
 80003aa:	bf08      	it	eq
 80003ac:	ea90 0f02 	teqeq	r0, r2
 80003b0:	bf1f      	itttt	ne
 80003b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003c2:	f000 80e2 	beq.w	800058a <__adddf3+0x1ee>
 80003c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003ce:	bfb8      	it	lt
 80003d0:	426d      	neglt	r5, r5
 80003d2:	dd0c      	ble.n	80003ee <__adddf3+0x52>
 80003d4:	442c      	add	r4, r5
 80003d6:	ea80 0202 	eor.w	r2, r0, r2
 80003da:	ea81 0303 	eor.w	r3, r1, r3
 80003de:	ea82 0000 	eor.w	r0, r2, r0
 80003e2:	ea83 0101 	eor.w	r1, r3, r1
 80003e6:	ea80 0202 	eor.w	r2, r0, r2
 80003ea:	ea81 0303 	eor.w	r3, r1, r3
 80003ee:	2d36      	cmp	r5, #54	; 0x36
 80003f0:	bf88      	it	hi
 80003f2:	bd30      	pophi	{r4, r5, pc}
 80003f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80003f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80003fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000400:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000404:	d002      	beq.n	800040c <__adddf3+0x70>
 8000406:	4240      	negs	r0, r0
 8000408:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800040c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000410:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000414:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000418:	d002      	beq.n	8000420 <__adddf3+0x84>
 800041a:	4252      	negs	r2, r2
 800041c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000420:	ea94 0f05 	teq	r4, r5
 8000424:	f000 80a7 	beq.w	8000576 <__adddf3+0x1da>
 8000428:	f1a4 0401 	sub.w	r4, r4, #1
 800042c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000430:	db0d      	blt.n	800044e <__adddf3+0xb2>
 8000432:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000436:	fa22 f205 	lsr.w	r2, r2, r5
 800043a:	1880      	adds	r0, r0, r2
 800043c:	f141 0100 	adc.w	r1, r1, #0
 8000440:	fa03 f20e 	lsl.w	r2, r3, lr
 8000444:	1880      	adds	r0, r0, r2
 8000446:	fa43 f305 	asr.w	r3, r3, r5
 800044a:	4159      	adcs	r1, r3
 800044c:	e00e      	b.n	800046c <__adddf3+0xd0>
 800044e:	f1a5 0520 	sub.w	r5, r5, #32
 8000452:	f10e 0e20 	add.w	lr, lr, #32
 8000456:	2a01      	cmp	r2, #1
 8000458:	fa03 fc0e 	lsl.w	ip, r3, lr
 800045c:	bf28      	it	cs
 800045e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000462:	fa43 f305 	asr.w	r3, r3, r5
 8000466:	18c0      	adds	r0, r0, r3
 8000468:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800046c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000470:	d507      	bpl.n	8000482 <__adddf3+0xe6>
 8000472:	f04f 0e00 	mov.w	lr, #0
 8000476:	f1dc 0c00 	rsbs	ip, ip, #0
 800047a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800047e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000482:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000486:	d31b      	bcc.n	80004c0 <__adddf3+0x124>
 8000488:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800048c:	d30c      	bcc.n	80004a8 <__adddf3+0x10c>
 800048e:	0849      	lsrs	r1, r1, #1
 8000490:	ea5f 0030 	movs.w	r0, r0, rrx
 8000494:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000498:	f104 0401 	add.w	r4, r4, #1
 800049c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80004a4:	f080 809a 	bcs.w	80005dc <__adddf3+0x240>
 80004a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80004ac:	bf08      	it	eq
 80004ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004b2:	f150 0000 	adcs.w	r0, r0, #0
 80004b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004ba:	ea41 0105 	orr.w	r1, r1, r5
 80004be:	bd30      	pop	{r4, r5, pc}
 80004c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004c4:	4140      	adcs	r0, r0
 80004c6:	eb41 0101 	adc.w	r1, r1, r1
 80004ca:	3c01      	subs	r4, #1
 80004cc:	bf28      	it	cs
 80004ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80004d2:	d2e9      	bcs.n	80004a8 <__adddf3+0x10c>
 80004d4:	f091 0f00 	teq	r1, #0
 80004d8:	bf04      	itt	eq
 80004da:	4601      	moveq	r1, r0
 80004dc:	2000      	moveq	r0, #0
 80004de:	fab1 f381 	clz	r3, r1
 80004e2:	bf08      	it	eq
 80004e4:	3320      	addeq	r3, #32
 80004e6:	f1a3 030b 	sub.w	r3, r3, #11
 80004ea:	f1b3 0220 	subs.w	r2, r3, #32
 80004ee:	da0c      	bge.n	800050a <__adddf3+0x16e>
 80004f0:	320c      	adds	r2, #12
 80004f2:	dd08      	ble.n	8000506 <__adddf3+0x16a>
 80004f4:	f102 0c14 	add.w	ip, r2, #20
 80004f8:	f1c2 020c 	rsb	r2, r2, #12
 80004fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000500:	fa21 f102 	lsr.w	r1, r1, r2
 8000504:	e00c      	b.n	8000520 <__adddf3+0x184>
 8000506:	f102 0214 	add.w	r2, r2, #20
 800050a:	bfd8      	it	le
 800050c:	f1c2 0c20 	rsble	ip, r2, #32
 8000510:	fa01 f102 	lsl.w	r1, r1, r2
 8000514:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000518:	bfdc      	itt	le
 800051a:	ea41 010c 	orrle.w	r1, r1, ip
 800051e:	4090      	lslle	r0, r2
 8000520:	1ae4      	subs	r4, r4, r3
 8000522:	bfa2      	ittt	ge
 8000524:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000528:	4329      	orrge	r1, r5
 800052a:	bd30      	popge	{r4, r5, pc}
 800052c:	ea6f 0404 	mvn.w	r4, r4
 8000530:	3c1f      	subs	r4, #31
 8000532:	da1c      	bge.n	800056e <__adddf3+0x1d2>
 8000534:	340c      	adds	r4, #12
 8000536:	dc0e      	bgt.n	8000556 <__adddf3+0x1ba>
 8000538:	f104 0414 	add.w	r4, r4, #20
 800053c:	f1c4 0220 	rsb	r2, r4, #32
 8000540:	fa20 f004 	lsr.w	r0, r0, r4
 8000544:	fa01 f302 	lsl.w	r3, r1, r2
 8000548:	ea40 0003 	orr.w	r0, r0, r3
 800054c:	fa21 f304 	lsr.w	r3, r1, r4
 8000550:	ea45 0103 	orr.w	r1, r5, r3
 8000554:	bd30      	pop	{r4, r5, pc}
 8000556:	f1c4 040c 	rsb	r4, r4, #12
 800055a:	f1c4 0220 	rsb	r2, r4, #32
 800055e:	fa20 f002 	lsr.w	r0, r0, r2
 8000562:	fa01 f304 	lsl.w	r3, r1, r4
 8000566:	ea40 0003 	orr.w	r0, r0, r3
 800056a:	4629      	mov	r1, r5
 800056c:	bd30      	pop	{r4, r5, pc}
 800056e:	fa21 f004 	lsr.w	r0, r1, r4
 8000572:	4629      	mov	r1, r5
 8000574:	bd30      	pop	{r4, r5, pc}
 8000576:	f094 0f00 	teq	r4, #0
 800057a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800057e:	bf06      	itte	eq
 8000580:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000584:	3401      	addeq	r4, #1
 8000586:	3d01      	subne	r5, #1
 8000588:	e74e      	b.n	8000428 <__adddf3+0x8c>
 800058a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800058e:	bf18      	it	ne
 8000590:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000594:	d029      	beq.n	80005ea <__adddf3+0x24e>
 8000596:	ea94 0f05 	teq	r4, r5
 800059a:	bf08      	it	eq
 800059c:	ea90 0f02 	teqeq	r0, r2
 80005a0:	d005      	beq.n	80005ae <__adddf3+0x212>
 80005a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80005a6:	bf04      	itt	eq
 80005a8:	4619      	moveq	r1, r3
 80005aa:	4610      	moveq	r0, r2
 80005ac:	bd30      	pop	{r4, r5, pc}
 80005ae:	ea91 0f03 	teq	r1, r3
 80005b2:	bf1e      	ittt	ne
 80005b4:	2100      	movne	r1, #0
 80005b6:	2000      	movne	r0, #0
 80005b8:	bd30      	popne	{r4, r5, pc}
 80005ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005be:	d105      	bne.n	80005cc <__adddf3+0x230>
 80005c0:	0040      	lsls	r0, r0, #1
 80005c2:	4149      	adcs	r1, r1
 80005c4:	bf28      	it	cs
 80005c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80005ca:	bd30      	pop	{r4, r5, pc}
 80005cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80005d0:	bf3c      	itt	cc
 80005d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80005d6:	bd30      	popcc	{r4, r5, pc}
 80005d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80005e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80005e4:	f04f 0000 	mov.w	r0, #0
 80005e8:	bd30      	pop	{r4, r5, pc}
 80005ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005ee:	bf1a      	itte	ne
 80005f0:	4619      	movne	r1, r3
 80005f2:	4610      	movne	r0, r2
 80005f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80005f8:	bf1c      	itt	ne
 80005fa:	460b      	movne	r3, r1
 80005fc:	4602      	movne	r2, r0
 80005fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000602:	bf06      	itte	eq
 8000604:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000608:	ea91 0f03 	teqeq	r1, r3
 800060c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000610:	bd30      	pop	{r4, r5, pc}
 8000612:	bf00      	nop

08000614 <__aeabi_ui2d>:
 8000614:	f090 0f00 	teq	r0, #0
 8000618:	bf04      	itt	eq
 800061a:	2100      	moveq	r1, #0
 800061c:	4770      	bxeq	lr
 800061e:	b530      	push	{r4, r5, lr}
 8000620:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000624:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000628:	f04f 0500 	mov.w	r5, #0
 800062c:	f04f 0100 	mov.w	r1, #0
 8000630:	e750      	b.n	80004d4 <__adddf3+0x138>
 8000632:	bf00      	nop

08000634 <__aeabi_i2d>:
 8000634:	f090 0f00 	teq	r0, #0
 8000638:	bf04      	itt	eq
 800063a:	2100      	moveq	r1, #0
 800063c:	4770      	bxeq	lr
 800063e:	b530      	push	{r4, r5, lr}
 8000640:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000644:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000648:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800064c:	bf48      	it	mi
 800064e:	4240      	negmi	r0, r0
 8000650:	f04f 0100 	mov.w	r1, #0
 8000654:	e73e      	b.n	80004d4 <__adddf3+0x138>
 8000656:	bf00      	nop

08000658 <__aeabi_f2d>:
 8000658:	0042      	lsls	r2, r0, #1
 800065a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800065e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000662:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000666:	bf1f      	itttt	ne
 8000668:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800066c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000670:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000674:	4770      	bxne	lr
 8000676:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800067a:	bf08      	it	eq
 800067c:	4770      	bxeq	lr
 800067e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000682:	bf04      	itt	eq
 8000684:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000688:	4770      	bxeq	lr
 800068a:	b530      	push	{r4, r5, lr}
 800068c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000690:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000694:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000698:	e71c      	b.n	80004d4 <__adddf3+0x138>
 800069a:	bf00      	nop

0800069c <__aeabi_ul2d>:
 800069c:	ea50 0201 	orrs.w	r2, r0, r1
 80006a0:	bf08      	it	eq
 80006a2:	4770      	bxeq	lr
 80006a4:	b530      	push	{r4, r5, lr}
 80006a6:	f04f 0500 	mov.w	r5, #0
 80006aa:	e00a      	b.n	80006c2 <__aeabi_l2d+0x16>

080006ac <__aeabi_l2d>:
 80006ac:	ea50 0201 	orrs.w	r2, r0, r1
 80006b0:	bf08      	it	eq
 80006b2:	4770      	bxeq	lr
 80006b4:	b530      	push	{r4, r5, lr}
 80006b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80006ba:	d502      	bpl.n	80006c2 <__aeabi_l2d+0x16>
 80006bc:	4240      	negs	r0, r0
 80006be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006ce:	f43f aed8 	beq.w	8000482 <__adddf3+0xe6>
 80006d2:	f04f 0203 	mov.w	r2, #3
 80006d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006da:	bf18      	it	ne
 80006dc:	3203      	addne	r2, #3
 80006de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006e2:	bf18      	it	ne
 80006e4:	3203      	addne	r2, #3
 80006e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80006ea:	f1c2 0320 	rsb	r3, r2, #32
 80006ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80006f2:	fa20 f002 	lsr.w	r0, r0, r2
 80006f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80006fa:	ea40 000e 	orr.w	r0, r0, lr
 80006fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000702:	4414      	add	r4, r2
 8000704:	e6bd      	b.n	8000482 <__adddf3+0xe6>
 8000706:	bf00      	nop

08000708 <__aeabi_uldivmod>:
 8000708:	b953      	cbnz	r3, 8000720 <__aeabi_uldivmod+0x18>
 800070a:	b94a      	cbnz	r2, 8000720 <__aeabi_uldivmod+0x18>
 800070c:	2900      	cmp	r1, #0
 800070e:	bf08      	it	eq
 8000710:	2800      	cmpeq	r0, #0
 8000712:	bf1c      	itt	ne
 8000714:	f04f 31ff 	movne.w	r1, #4294967295
 8000718:	f04f 30ff 	movne.w	r0, #4294967295
 800071c:	f000 b9ac 	b.w	8000a78 <__aeabi_idiv0>
 8000720:	f1ad 0c08 	sub.w	ip, sp, #8
 8000724:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000728:	f000 f83e 	bl	80007a8 <__udivmoddi4>
 800072c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000730:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000734:	b004      	add	sp, #16
 8000736:	4770      	bx	lr

08000738 <__aeabi_d2lz>:
 8000738:	b508      	push	{r3, lr}
 800073a:	4602      	mov	r2, r0
 800073c:	460b      	mov	r3, r1
 800073e:	ec43 2b17 	vmov	d7, r2, r3
 8000742:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8000746:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800074a:	d403      	bmi.n	8000754 <__aeabi_d2lz+0x1c>
 800074c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8000750:	f000 b80a 	b.w	8000768 <__aeabi_d2ulz>
 8000754:	eeb1 7b47 	vneg.f64	d7, d7
 8000758:	ec51 0b17 	vmov	r0, r1, d7
 800075c:	f000 f804 	bl	8000768 <__aeabi_d2ulz>
 8000760:	4240      	negs	r0, r0
 8000762:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000766:	bd08      	pop	{r3, pc}

08000768 <__aeabi_d2ulz>:
 8000768:	ed9f 6b0b 	vldr	d6, [pc, #44]	; 8000798 <__aeabi_d2ulz+0x30>
 800076c:	ec41 0b17 	vmov	d7, r0, r1
 8000770:	ed9f 5b0b 	vldr	d5, [pc, #44]	; 80007a0 <__aeabi_d2ulz+0x38>
 8000774:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000778:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 800077c:	eeb8 4b46 	vcvt.f64.u32	d4, s12
 8000780:	eea4 7b45 	vfms.f64	d7, d4, d5
 8000784:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000788:	ee16 1a10 	vmov	r1, s12
 800078c:	ee17 0a90 	vmov	r0, s15
 8000790:	4770      	bx	lr
 8000792:	bf00      	nop
 8000794:	f3af 8000 	nop.w
 8000798:	00000000 	.word	0x00000000
 800079c:	3df00000 	.word	0x3df00000
 80007a0:	00000000 	.word	0x00000000
 80007a4:	41f00000 	.word	0x41f00000

080007a8 <__udivmoddi4>:
 80007a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80007ac:	9d08      	ldr	r5, [sp, #32]
 80007ae:	4604      	mov	r4, r0
 80007b0:	468e      	mov	lr, r1
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	d14d      	bne.n	8000852 <__udivmoddi4+0xaa>
 80007b6:	428a      	cmp	r2, r1
 80007b8:	4694      	mov	ip, r2
 80007ba:	d969      	bls.n	8000890 <__udivmoddi4+0xe8>
 80007bc:	fab2 f282 	clz	r2, r2
 80007c0:	b152      	cbz	r2, 80007d8 <__udivmoddi4+0x30>
 80007c2:	fa01 f302 	lsl.w	r3, r1, r2
 80007c6:	f1c2 0120 	rsb	r1, r2, #32
 80007ca:	fa20 f101 	lsr.w	r1, r0, r1
 80007ce:	fa0c fc02 	lsl.w	ip, ip, r2
 80007d2:	ea41 0e03 	orr.w	lr, r1, r3
 80007d6:	4094      	lsls	r4, r2
 80007d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80007dc:	0c21      	lsrs	r1, r4, #16
 80007de:	fbbe f6f8 	udiv	r6, lr, r8
 80007e2:	fa1f f78c 	uxth.w	r7, ip
 80007e6:	fb08 e316 	mls	r3, r8, r6, lr
 80007ea:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80007ee:	fb06 f107 	mul.w	r1, r6, r7
 80007f2:	4299      	cmp	r1, r3
 80007f4:	d90a      	bls.n	800080c <__udivmoddi4+0x64>
 80007f6:	eb1c 0303 	adds.w	r3, ip, r3
 80007fa:	f106 30ff 	add.w	r0, r6, #4294967295
 80007fe:	f080 811f 	bcs.w	8000a40 <__udivmoddi4+0x298>
 8000802:	4299      	cmp	r1, r3
 8000804:	f240 811c 	bls.w	8000a40 <__udivmoddi4+0x298>
 8000808:	3e02      	subs	r6, #2
 800080a:	4463      	add	r3, ip
 800080c:	1a5b      	subs	r3, r3, r1
 800080e:	b2a4      	uxth	r4, r4
 8000810:	fbb3 f0f8 	udiv	r0, r3, r8
 8000814:	fb08 3310 	mls	r3, r8, r0, r3
 8000818:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800081c:	fb00 f707 	mul.w	r7, r0, r7
 8000820:	42a7      	cmp	r7, r4
 8000822:	d90a      	bls.n	800083a <__udivmoddi4+0x92>
 8000824:	eb1c 0404 	adds.w	r4, ip, r4
 8000828:	f100 33ff 	add.w	r3, r0, #4294967295
 800082c:	f080 810a 	bcs.w	8000a44 <__udivmoddi4+0x29c>
 8000830:	42a7      	cmp	r7, r4
 8000832:	f240 8107 	bls.w	8000a44 <__udivmoddi4+0x29c>
 8000836:	4464      	add	r4, ip
 8000838:	3802      	subs	r0, #2
 800083a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800083e:	1be4      	subs	r4, r4, r7
 8000840:	2600      	movs	r6, #0
 8000842:	b11d      	cbz	r5, 800084c <__udivmoddi4+0xa4>
 8000844:	40d4      	lsrs	r4, r2
 8000846:	2300      	movs	r3, #0
 8000848:	e9c5 4300 	strd	r4, r3, [r5]
 800084c:	4631      	mov	r1, r6
 800084e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000852:	428b      	cmp	r3, r1
 8000854:	d909      	bls.n	800086a <__udivmoddi4+0xc2>
 8000856:	2d00      	cmp	r5, #0
 8000858:	f000 80ef 	beq.w	8000a3a <__udivmoddi4+0x292>
 800085c:	2600      	movs	r6, #0
 800085e:	e9c5 0100 	strd	r0, r1, [r5]
 8000862:	4630      	mov	r0, r6
 8000864:	4631      	mov	r1, r6
 8000866:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800086a:	fab3 f683 	clz	r6, r3
 800086e:	2e00      	cmp	r6, #0
 8000870:	d14a      	bne.n	8000908 <__udivmoddi4+0x160>
 8000872:	428b      	cmp	r3, r1
 8000874:	d302      	bcc.n	800087c <__udivmoddi4+0xd4>
 8000876:	4282      	cmp	r2, r0
 8000878:	f200 80f9 	bhi.w	8000a6e <__udivmoddi4+0x2c6>
 800087c:	1a84      	subs	r4, r0, r2
 800087e:	eb61 0303 	sbc.w	r3, r1, r3
 8000882:	2001      	movs	r0, #1
 8000884:	469e      	mov	lr, r3
 8000886:	2d00      	cmp	r5, #0
 8000888:	d0e0      	beq.n	800084c <__udivmoddi4+0xa4>
 800088a:	e9c5 4e00 	strd	r4, lr, [r5]
 800088e:	e7dd      	b.n	800084c <__udivmoddi4+0xa4>
 8000890:	b902      	cbnz	r2, 8000894 <__udivmoddi4+0xec>
 8000892:	deff      	udf	#255	; 0xff
 8000894:	fab2 f282 	clz	r2, r2
 8000898:	2a00      	cmp	r2, #0
 800089a:	f040 8092 	bne.w	80009c2 <__udivmoddi4+0x21a>
 800089e:	eba1 010c 	sub.w	r1, r1, ip
 80008a2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80008a6:	fa1f fe8c 	uxth.w	lr, ip
 80008aa:	2601      	movs	r6, #1
 80008ac:	0c20      	lsrs	r0, r4, #16
 80008ae:	fbb1 f3f7 	udiv	r3, r1, r7
 80008b2:	fb07 1113 	mls	r1, r7, r3, r1
 80008b6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80008ba:	fb0e f003 	mul.w	r0, lr, r3
 80008be:	4288      	cmp	r0, r1
 80008c0:	d908      	bls.n	80008d4 <__udivmoddi4+0x12c>
 80008c2:	eb1c 0101 	adds.w	r1, ip, r1
 80008c6:	f103 38ff 	add.w	r8, r3, #4294967295
 80008ca:	d202      	bcs.n	80008d2 <__udivmoddi4+0x12a>
 80008cc:	4288      	cmp	r0, r1
 80008ce:	f200 80cb 	bhi.w	8000a68 <__udivmoddi4+0x2c0>
 80008d2:	4643      	mov	r3, r8
 80008d4:	1a09      	subs	r1, r1, r0
 80008d6:	b2a4      	uxth	r4, r4
 80008d8:	fbb1 f0f7 	udiv	r0, r1, r7
 80008dc:	fb07 1110 	mls	r1, r7, r0, r1
 80008e0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80008e4:	fb0e fe00 	mul.w	lr, lr, r0
 80008e8:	45a6      	cmp	lr, r4
 80008ea:	d908      	bls.n	80008fe <__udivmoddi4+0x156>
 80008ec:	eb1c 0404 	adds.w	r4, ip, r4
 80008f0:	f100 31ff 	add.w	r1, r0, #4294967295
 80008f4:	d202      	bcs.n	80008fc <__udivmoddi4+0x154>
 80008f6:	45a6      	cmp	lr, r4
 80008f8:	f200 80bb 	bhi.w	8000a72 <__udivmoddi4+0x2ca>
 80008fc:	4608      	mov	r0, r1
 80008fe:	eba4 040e 	sub.w	r4, r4, lr
 8000902:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000906:	e79c      	b.n	8000842 <__udivmoddi4+0x9a>
 8000908:	f1c6 0720 	rsb	r7, r6, #32
 800090c:	40b3      	lsls	r3, r6
 800090e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000912:	ea4c 0c03 	orr.w	ip, ip, r3
 8000916:	fa20 f407 	lsr.w	r4, r0, r7
 800091a:	fa01 f306 	lsl.w	r3, r1, r6
 800091e:	431c      	orrs	r4, r3
 8000920:	40f9      	lsrs	r1, r7
 8000922:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000926:	fa00 f306 	lsl.w	r3, r0, r6
 800092a:	fbb1 f8f9 	udiv	r8, r1, r9
 800092e:	0c20      	lsrs	r0, r4, #16
 8000930:	fa1f fe8c 	uxth.w	lr, ip
 8000934:	fb09 1118 	mls	r1, r9, r8, r1
 8000938:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800093c:	fb08 f00e 	mul.w	r0, r8, lr
 8000940:	4288      	cmp	r0, r1
 8000942:	fa02 f206 	lsl.w	r2, r2, r6
 8000946:	d90b      	bls.n	8000960 <__udivmoddi4+0x1b8>
 8000948:	eb1c 0101 	adds.w	r1, ip, r1
 800094c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000950:	f080 8088 	bcs.w	8000a64 <__udivmoddi4+0x2bc>
 8000954:	4288      	cmp	r0, r1
 8000956:	f240 8085 	bls.w	8000a64 <__udivmoddi4+0x2bc>
 800095a:	f1a8 0802 	sub.w	r8, r8, #2
 800095e:	4461      	add	r1, ip
 8000960:	1a09      	subs	r1, r1, r0
 8000962:	b2a4      	uxth	r4, r4
 8000964:	fbb1 f0f9 	udiv	r0, r1, r9
 8000968:	fb09 1110 	mls	r1, r9, r0, r1
 800096c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000970:	fb00 fe0e 	mul.w	lr, r0, lr
 8000974:	458e      	cmp	lr, r1
 8000976:	d908      	bls.n	800098a <__udivmoddi4+0x1e2>
 8000978:	eb1c 0101 	adds.w	r1, ip, r1
 800097c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000980:	d26c      	bcs.n	8000a5c <__udivmoddi4+0x2b4>
 8000982:	458e      	cmp	lr, r1
 8000984:	d96a      	bls.n	8000a5c <__udivmoddi4+0x2b4>
 8000986:	3802      	subs	r0, #2
 8000988:	4461      	add	r1, ip
 800098a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800098e:	fba0 9402 	umull	r9, r4, r0, r2
 8000992:	eba1 010e 	sub.w	r1, r1, lr
 8000996:	42a1      	cmp	r1, r4
 8000998:	46c8      	mov	r8, r9
 800099a:	46a6      	mov	lr, r4
 800099c:	d356      	bcc.n	8000a4c <__udivmoddi4+0x2a4>
 800099e:	d053      	beq.n	8000a48 <__udivmoddi4+0x2a0>
 80009a0:	b15d      	cbz	r5, 80009ba <__udivmoddi4+0x212>
 80009a2:	ebb3 0208 	subs.w	r2, r3, r8
 80009a6:	eb61 010e 	sbc.w	r1, r1, lr
 80009aa:	fa01 f707 	lsl.w	r7, r1, r7
 80009ae:	fa22 f306 	lsr.w	r3, r2, r6
 80009b2:	40f1      	lsrs	r1, r6
 80009b4:	431f      	orrs	r7, r3
 80009b6:	e9c5 7100 	strd	r7, r1, [r5]
 80009ba:	2600      	movs	r6, #0
 80009bc:	4631      	mov	r1, r6
 80009be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80009c2:	f1c2 0320 	rsb	r3, r2, #32
 80009c6:	40d8      	lsrs	r0, r3
 80009c8:	fa0c fc02 	lsl.w	ip, ip, r2
 80009cc:	fa21 f303 	lsr.w	r3, r1, r3
 80009d0:	4091      	lsls	r1, r2
 80009d2:	4301      	orrs	r1, r0
 80009d4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80009d8:	fa1f fe8c 	uxth.w	lr, ip
 80009dc:	fbb3 f0f7 	udiv	r0, r3, r7
 80009e0:	fb07 3610 	mls	r6, r7, r0, r3
 80009e4:	0c0b      	lsrs	r3, r1, #16
 80009e6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80009ea:	fb00 f60e 	mul.w	r6, r0, lr
 80009ee:	429e      	cmp	r6, r3
 80009f0:	fa04 f402 	lsl.w	r4, r4, r2
 80009f4:	d908      	bls.n	8000a08 <__udivmoddi4+0x260>
 80009f6:	eb1c 0303 	adds.w	r3, ip, r3
 80009fa:	f100 38ff 	add.w	r8, r0, #4294967295
 80009fe:	d22f      	bcs.n	8000a60 <__udivmoddi4+0x2b8>
 8000a00:	429e      	cmp	r6, r3
 8000a02:	d92d      	bls.n	8000a60 <__udivmoddi4+0x2b8>
 8000a04:	3802      	subs	r0, #2
 8000a06:	4463      	add	r3, ip
 8000a08:	1b9b      	subs	r3, r3, r6
 8000a0a:	b289      	uxth	r1, r1
 8000a0c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000a10:	fb07 3316 	mls	r3, r7, r6, r3
 8000a14:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000a18:	fb06 f30e 	mul.w	r3, r6, lr
 8000a1c:	428b      	cmp	r3, r1
 8000a1e:	d908      	bls.n	8000a32 <__udivmoddi4+0x28a>
 8000a20:	eb1c 0101 	adds.w	r1, ip, r1
 8000a24:	f106 38ff 	add.w	r8, r6, #4294967295
 8000a28:	d216      	bcs.n	8000a58 <__udivmoddi4+0x2b0>
 8000a2a:	428b      	cmp	r3, r1
 8000a2c:	d914      	bls.n	8000a58 <__udivmoddi4+0x2b0>
 8000a2e:	3e02      	subs	r6, #2
 8000a30:	4461      	add	r1, ip
 8000a32:	1ac9      	subs	r1, r1, r3
 8000a34:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000a38:	e738      	b.n	80008ac <__udivmoddi4+0x104>
 8000a3a:	462e      	mov	r6, r5
 8000a3c:	4628      	mov	r0, r5
 8000a3e:	e705      	b.n	800084c <__udivmoddi4+0xa4>
 8000a40:	4606      	mov	r6, r0
 8000a42:	e6e3      	b.n	800080c <__udivmoddi4+0x64>
 8000a44:	4618      	mov	r0, r3
 8000a46:	e6f8      	b.n	800083a <__udivmoddi4+0x92>
 8000a48:	454b      	cmp	r3, r9
 8000a4a:	d2a9      	bcs.n	80009a0 <__udivmoddi4+0x1f8>
 8000a4c:	ebb9 0802 	subs.w	r8, r9, r2
 8000a50:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000a54:	3801      	subs	r0, #1
 8000a56:	e7a3      	b.n	80009a0 <__udivmoddi4+0x1f8>
 8000a58:	4646      	mov	r6, r8
 8000a5a:	e7ea      	b.n	8000a32 <__udivmoddi4+0x28a>
 8000a5c:	4620      	mov	r0, r4
 8000a5e:	e794      	b.n	800098a <__udivmoddi4+0x1e2>
 8000a60:	4640      	mov	r0, r8
 8000a62:	e7d1      	b.n	8000a08 <__udivmoddi4+0x260>
 8000a64:	46d0      	mov	r8, sl
 8000a66:	e77b      	b.n	8000960 <__udivmoddi4+0x1b8>
 8000a68:	3b02      	subs	r3, #2
 8000a6a:	4461      	add	r1, ip
 8000a6c:	e732      	b.n	80008d4 <__udivmoddi4+0x12c>
 8000a6e:	4630      	mov	r0, r6
 8000a70:	e709      	b.n	8000886 <__udivmoddi4+0xde>
 8000a72:	4464      	add	r4, ip
 8000a74:	3802      	subs	r0, #2
 8000a76:	e742      	b.n	80008fe <__udivmoddi4+0x156>

08000a78 <__aeabi_idiv0>:
 8000a78:	4770      	bx	lr
 8000a7a:	bf00      	nop
 8000a7c:	0000      	movs	r0, r0
	...

08000a80 <cinematicaInversa>:
double A1, B1, C1, XJ1_1, XJ1_2, YJ1_1, YJ1_2, ZJ1_1, ZJ1_2, A11, A12, A13, A14, A15;
double A2, B2, C2, XJ2_1, XJ2_2, YJ2_1, YJ2_2, ZJ2_1, ZJ2_2;
double A3, B3, C3, XJ3_1, XJ3_2, YJ3_1, YJ3_2, ZJ3_1, ZJ3_2;


void cinematicaInversa(Vec3D _Pfin) {
 8000a80:	b580      	push	{r7, lr}
 8000a82:	ed2d 8b04 	vpush	{d8-d9}
 8000a86:	b086      	sub	sp, #24
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	eeb0 5b40 	vmov.f64	d5, d0
 8000a8e:	eeb0 6b41 	vmov.f64	d6, d1
 8000a92:	eeb0 7b42 	vmov.f64	d7, d2
 8000a96:	ed87 5b00 	vstr	d5, [r7]
 8000a9a:	ed87 6b02 	vstr	d6, [r7, #8]
 8000a9e:	ed87 7b04 	vstr	d7, [r7, #16]

	A1 = 1.0 + pow(((-2.0  * (R + (_Pfin.y - r))) / (2 * _Pfin.z)), 2);
 8000aa2:	ed97 7b02 	vldr	d7, [r7, #8]
 8000aa6:	ed9f 6bee 	vldr	d6, [pc, #952]	; 8000e60 <cinematicaInversa+0x3e0>
 8000aaa:	ee37 7b46 	vsub.f64	d7, d7, d6
 8000aae:	ed9f 6bee 	vldr	d6, [pc, #952]	; 8000e68 <cinematicaInversa+0x3e8>
 8000ab2:	ee37 7b06 	vadd.f64	d7, d7, d6
 8000ab6:	eeb8 6b00 	vmov.f64	d6, #128	; 0xc0000000 -2.0
 8000aba:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000abe:	ed97 7b04 	vldr	d7, [r7, #16]
 8000ac2:	ee37 7b07 	vadd.f64	d7, d7, d7
 8000ac6:	ee86 5b07 	vdiv.f64	d5, d6, d7
 8000aca:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8000ace:	eeb0 0b45 	vmov.f64	d0, d5
 8000ad2:	f011 f8b9 	bl	8011c48 <pow>
 8000ad6:	eeb0 7b40 	vmov.f64	d7, d0
 8000ada:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8000ade:	ee37 7b06 	vadd.f64	d7, d7, d6
 8000ae2:	4bf9      	ldr	r3, [pc, #996]	; (8000ec8 <cinematicaInversa+0x448>)
 8000ae4:	ed83 7b00 	vstr	d7, [r3]
	A2 = 4.0 + pow(((2.0 * sqrt(3.0) * R * C30 + 2.0 * R * S30 - 2.0 * sqrt(3) * (_Pfin.x + r * C30) - 2.0 * (_Pfin.y + r * S30)) / (2.0 * _Pfin.z)), 2.0);
 8000ae8:	ed97 7b00 	vldr	d7, [r7]
 8000aec:	ed9f 6be0 	vldr	d6, [pc, #896]	; 8000e70 <cinematicaInversa+0x3f0>
 8000af0:	ee37 7b06 	vadd.f64	d7, d7, d6
 8000af4:	ed9f 6be0 	vldr	d6, [pc, #896]	; 8000e78 <cinematicaInversa+0x3f8>
 8000af8:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000afc:	ed9f 6be0 	vldr	d6, [pc, #896]	; 8000e80 <cinematicaInversa+0x400>
 8000b00:	ee36 6b47 	vsub.f64	d6, d6, d7
 8000b04:	ed97 7b02 	vldr	d7, [r7, #8]
 8000b08:	ed9f 5bdf 	vldr	d5, [pc, #892]	; 8000e88 <cinematicaInversa+0x408>
 8000b0c:	ee37 7b05 	vadd.f64	d7, d7, d5
 8000b10:	ee37 7b07 	vadd.f64	d7, d7, d7
 8000b14:	ee36 6b47 	vsub.f64	d6, d6, d7
 8000b18:	ed97 7b04 	vldr	d7, [r7, #16]
 8000b1c:	ee37 7b07 	vadd.f64	d7, d7, d7
 8000b20:	ee86 5b07 	vdiv.f64	d5, d6, d7
 8000b24:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8000b28:	eeb0 0b45 	vmov.f64	d0, d5
 8000b2c:	f011 f88c 	bl	8011c48 <pow>
 8000b30:	eeb0 7b40 	vmov.f64	d7, d0
 8000b34:	eeb1 6b00 	vmov.f64	d6, #16	; 0x40800000  4.0
 8000b38:	ee37 7b06 	vadd.f64	d7, d7, d6
 8000b3c:	4be3      	ldr	r3, [pc, #908]	; (8000ecc <cinematicaInversa+0x44c>)
 8000b3e:	ed83 7b00 	vstr	d7, [r3]
	A3 = 4.0 + pow(((2.0 * sqrt(3.0) * (_Pfin.x + r * C150) - 2.0 * (_Pfin.y + r * S150) - 2.0 * sqrt(3) * R * C150 + 2.0 * R * S150) / (2.0 * _Pfin.z)), 2.0);
 8000b42:	ed97 7b00 	vldr	d7, [r7]
 8000b46:	ed9f 6bca 	vldr	d6, [pc, #808]	; 8000e70 <cinematicaInversa+0x3f0>
 8000b4a:	ee37 7b46 	vsub.f64	d7, d7, d6
 8000b4e:	ed9f 6bca 	vldr	d6, [pc, #808]	; 8000e78 <cinematicaInversa+0x3f8>
 8000b52:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000b56:	ed97 7b02 	vldr	d7, [r7, #8]
 8000b5a:	ed9f 5bcb 	vldr	d5, [pc, #812]	; 8000e88 <cinematicaInversa+0x408>
 8000b5e:	ee37 7b05 	vadd.f64	d7, d7, d5
 8000b62:	ee37 7b07 	vadd.f64	d7, d7, d7
 8000b66:	ee36 7b47 	vsub.f64	d7, d6, d7
 8000b6a:	ed9f 6bc9 	vldr	d6, [pc, #804]	; 8000e90 <cinematicaInversa+0x410>
 8000b6e:	ee37 7b06 	vadd.f64	d7, d7, d6
 8000b72:	ed9f 6bbd 	vldr	d6, [pc, #756]	; 8000e68 <cinematicaInversa+0x3e8>
 8000b76:	ee37 6b06 	vadd.f64	d6, d7, d6
 8000b7a:	ed97 7b04 	vldr	d7, [r7, #16]
 8000b7e:	ee37 7b07 	vadd.f64	d7, d7, d7
 8000b82:	ee86 5b07 	vdiv.f64	d5, d6, d7
 8000b86:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8000b8a:	eeb0 0b45 	vmov.f64	d0, d5
 8000b8e:	f011 f85b 	bl	8011c48 <pow>
 8000b92:	eeb0 7b40 	vmov.f64	d7, d0
 8000b96:	eeb1 6b00 	vmov.f64	d6, #16	; 0x40800000  4.0
 8000b9a:	ee37 7b06 	vadd.f64	d7, d7, d6
 8000b9e:	4bcc      	ldr	r3, [pc, #816]	; (8000ed0 <cinematicaInversa+0x450>)
 8000ba0:	ed83 7b00 	vstr	d7, [r3]

	B1 = (2.0 * R) + (2.0 * ((-2.0  * (R + (_Pfin.y - r))) / (2.0 * _Pfin.z)) * ((-pow(R, 2.0) + pow(L1, 2.0) + pow((_Pfin.y - r), 2.0) + pow(_Pfin.z, 2.0) - pow(L2, 2.0) + pow(_Pfin.x, 2)) / (2 * _Pfin.z)));
 8000ba4:	ed97 7b02 	vldr	d7, [r7, #8]
 8000ba8:	ed9f 6bad 	vldr	d6, [pc, #692]	; 8000e60 <cinematicaInversa+0x3e0>
 8000bac:	ee37 7b46 	vsub.f64	d7, d7, d6
 8000bb0:	ed9f 6bad 	vldr	d6, [pc, #692]	; 8000e68 <cinematicaInversa+0x3e8>
 8000bb4:	ee37 7b06 	vadd.f64	d7, d7, d6
 8000bb8:	eeb8 6b00 	vmov.f64	d6, #128	; 0xc0000000 -2.0
 8000bbc:	ee27 5b06 	vmul.f64	d5, d7, d6
 8000bc0:	ed97 7b04 	vldr	d7, [r7, #16]
 8000bc4:	ee37 6b07 	vadd.f64	d6, d7, d7
 8000bc8:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8000bcc:	ee37 8b07 	vadd.f64	d8, d7, d7
 8000bd0:	ed97 7b02 	vldr	d7, [r7, #8]
 8000bd4:	ed9f 6ba2 	vldr	d6, [pc, #648]	; 8000e60 <cinematicaInversa+0x3e0>
 8000bd8:	ee37 7b46 	vsub.f64	d7, d7, d6
 8000bdc:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8000be0:	eeb0 0b47 	vmov.f64	d0, d7
 8000be4:	f011 f830 	bl	8011c48 <pow>
 8000be8:	eeb0 7b40 	vmov.f64	d7, d0
 8000bec:	ed9f 6baa 	vldr	d6, [pc, #680]	; 8000e98 <cinematicaInversa+0x418>
 8000bf0:	ee37 9b06 	vadd.f64	d9, d7, d6
 8000bf4:	ed97 7b04 	vldr	d7, [r7, #16]
 8000bf8:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8000bfc:	eeb0 0b47 	vmov.f64	d0, d7
 8000c00:	f011 f822 	bl	8011c48 <pow>
 8000c04:	eeb0 7b40 	vmov.f64	d7, d0
 8000c08:	ee39 7b07 	vadd.f64	d7, d9, d7
 8000c0c:	ed9f 6ba4 	vldr	d6, [pc, #656]	; 8000ea0 <cinematicaInversa+0x420>
 8000c10:	ee37 9b46 	vsub.f64	d9, d7, d6
 8000c14:	ed97 7b00 	vldr	d7, [r7]
 8000c18:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8000c1c:	eeb0 0b47 	vmov.f64	d0, d7
 8000c20:	f011 f812 	bl	8011c48 <pow>
 8000c24:	eeb0 7b40 	vmov.f64	d7, d0
 8000c28:	ee39 5b07 	vadd.f64	d5, d9, d7
 8000c2c:	ed97 7b04 	vldr	d7, [r7, #16]
 8000c30:	ee37 6b07 	vadd.f64	d6, d7, d7
 8000c34:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8000c38:	ee28 7b07 	vmul.f64	d7, d8, d7
 8000c3c:	ed9f 6b9a 	vldr	d6, [pc, #616]	; 8000ea8 <cinematicaInversa+0x428>
 8000c40:	ee37 7b06 	vadd.f64	d7, d7, d6
 8000c44:	4ba3      	ldr	r3, [pc, #652]	; (8000ed4 <cinematicaInversa+0x454>)
 8000c46:	ed83 7b00 	vstr	d7, [r3]
	B2 = -2.0 * sqrt(3) * R * C30 - 2.0 * R * S30 + 2.0 * (((2.0 * sqrt(3) * R * C30 + 2.0 * R * S30)	+ (-2 * sqrt(3) * (_Pfin.x + r * C30)	- 2.0 * (_Pfin.y + r * S30))) / (2 * _Pfin.z)) * ((-pow(R, 2) + pow(L1, 2) + pow((_Pfin.x + r * C30), 2) + pow((_Pfin.y + r * S30), 2) + pow(_Pfin.z, 2) - pow(L2, 2)) / (2 * _Pfin.z));
 8000c4a:	ed97 7b00 	vldr	d7, [r7]
 8000c4e:	ed9f 6b88 	vldr	d6, [pc, #544]	; 8000e70 <cinematicaInversa+0x3f0>
 8000c52:	ee37 7b06 	vadd.f64	d7, d7, d6
 8000c56:	ed9f 6b96 	vldr	d6, [pc, #600]	; 8000eb0 <cinematicaInversa+0x430>
 8000c5a:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000c5e:	ed97 7b02 	vldr	d7, [r7, #8]
 8000c62:	ed9f 5b89 	vldr	d5, [pc, #548]	; 8000e88 <cinematicaInversa+0x408>
 8000c66:	ee37 7b05 	vadd.f64	d7, d7, d5
 8000c6a:	ee37 7b07 	vadd.f64	d7, d7, d7
 8000c6e:	ee36 7b47 	vsub.f64	d7, d6, d7
 8000c72:	ed9f 6b83 	vldr	d6, [pc, #524]	; 8000e80 <cinematicaInversa+0x400>
 8000c76:	ee37 5b06 	vadd.f64	d5, d7, d6
 8000c7a:	ed97 7b04 	vldr	d7, [r7, #16]
 8000c7e:	ee37 6b07 	vadd.f64	d6, d7, d7
 8000c82:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8000c86:	ee37 8b07 	vadd.f64	d8, d7, d7
 8000c8a:	ed97 7b00 	vldr	d7, [r7]
 8000c8e:	ed9f 6b78 	vldr	d6, [pc, #480]	; 8000e70 <cinematicaInversa+0x3f0>
 8000c92:	ee37 7b06 	vadd.f64	d7, d7, d6
 8000c96:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8000c9a:	eeb0 0b47 	vmov.f64	d0, d7
 8000c9e:	f010 ffd3 	bl	8011c48 <pow>
 8000ca2:	eeb0 7b40 	vmov.f64	d7, d0
 8000ca6:	ed9f 6b7c 	vldr	d6, [pc, #496]	; 8000e98 <cinematicaInversa+0x418>
 8000caa:	ee37 9b06 	vadd.f64	d9, d7, d6
 8000cae:	ed97 7b02 	vldr	d7, [r7, #8]
 8000cb2:	ed9f 6b75 	vldr	d6, [pc, #468]	; 8000e88 <cinematicaInversa+0x408>
 8000cb6:	ee37 7b06 	vadd.f64	d7, d7, d6
 8000cba:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8000cbe:	eeb0 0b47 	vmov.f64	d0, d7
 8000cc2:	f010 ffc1 	bl	8011c48 <pow>
 8000cc6:	eeb0 7b40 	vmov.f64	d7, d0
 8000cca:	ee39 9b07 	vadd.f64	d9, d9, d7
 8000cce:	ed97 7b04 	vldr	d7, [r7, #16]
 8000cd2:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8000cd6:	eeb0 0b47 	vmov.f64	d0, d7
 8000cda:	f010 ffb5 	bl	8011c48 <pow>
 8000cde:	eeb0 7b40 	vmov.f64	d7, d0
 8000ce2:	ee39 7b07 	vadd.f64	d7, d9, d7
 8000ce6:	ed9f 6b6e 	vldr	d6, [pc, #440]	; 8000ea0 <cinematicaInversa+0x420>
 8000cea:	ee37 5b46 	vsub.f64	d5, d7, d6
 8000cee:	ed97 7b04 	vldr	d7, [r7, #16]
 8000cf2:	ee37 6b07 	vadd.f64	d6, d7, d7
 8000cf6:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8000cfa:	ee28 7b07 	vmul.f64	d7, d8, d7
 8000cfe:	ed9f 6b60 	vldr	d6, [pc, #384]	; 8000e80 <cinematicaInversa+0x400>
 8000d02:	ee37 7b46 	vsub.f64	d7, d7, d6
 8000d06:	4b74      	ldr	r3, [pc, #464]	; (8000ed8 <cinematicaInversa+0x458>)
 8000d08:	ed83 7b00 	vstr	d7, [r3]
	B3 = 2.0 * sqrt(3) * R * C150 - 2.0 * R * S150 + 2.0 * ((2.0 * sqrt(3) * (_Pfin.x + r * C150) - 2.0 * (_Pfin.y + r * S150) - 2.0 * sqrt(3) * R * C150 + 2.0 * R * S150) / (2 * _Pfin.z)) * ((pow((_Pfin.x + r * C150), 2) + pow((_Pfin.y + r * S150), 2) + pow(_Pfin.z, 2) - pow(L2, 2) - pow(R, 2) + pow(L1, 2)) / (2 * _Pfin.z));
 8000d0c:	ed97 7b00 	vldr	d7, [r7]
 8000d10:	ed9f 6b57 	vldr	d6, [pc, #348]	; 8000e70 <cinematicaInversa+0x3f0>
 8000d14:	ee37 7b46 	vsub.f64	d7, d7, d6
 8000d18:	ed9f 6b57 	vldr	d6, [pc, #348]	; 8000e78 <cinematicaInversa+0x3f8>
 8000d1c:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000d20:	ed97 7b02 	vldr	d7, [r7, #8]
 8000d24:	ed9f 5b58 	vldr	d5, [pc, #352]	; 8000e88 <cinematicaInversa+0x408>
 8000d28:	ee37 7b05 	vadd.f64	d7, d7, d5
 8000d2c:	ee37 7b07 	vadd.f64	d7, d7, d7
 8000d30:	ee36 7b47 	vsub.f64	d7, d6, d7
 8000d34:	ed9f 6b56 	vldr	d6, [pc, #344]	; 8000e90 <cinematicaInversa+0x410>
 8000d38:	ee37 7b06 	vadd.f64	d7, d7, d6
 8000d3c:	ed9f 6b4a 	vldr	d6, [pc, #296]	; 8000e68 <cinematicaInversa+0x3e8>
 8000d40:	ee37 5b06 	vadd.f64	d5, d7, d6
 8000d44:	ed97 7b04 	vldr	d7, [r7, #16]
 8000d48:	ee37 6b07 	vadd.f64	d6, d7, d7
 8000d4c:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8000d50:	ee37 8b07 	vadd.f64	d8, d7, d7
 8000d54:	ed97 7b00 	vldr	d7, [r7]
 8000d58:	ed9f 6b45 	vldr	d6, [pc, #276]	; 8000e70 <cinematicaInversa+0x3f0>
 8000d5c:	ee37 7b46 	vsub.f64	d7, d7, d6
 8000d60:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8000d64:	eeb0 0b47 	vmov.f64	d0, d7
 8000d68:	f010 ff6e 	bl	8011c48 <pow>
 8000d6c:	eeb0 9b40 	vmov.f64	d9, d0
 8000d70:	ed97 7b02 	vldr	d7, [r7, #8]
 8000d74:	ed9f 6b44 	vldr	d6, [pc, #272]	; 8000e88 <cinematicaInversa+0x408>
 8000d78:	ee37 7b06 	vadd.f64	d7, d7, d6
 8000d7c:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8000d80:	eeb0 0b47 	vmov.f64	d0, d7
 8000d84:	f010 ff60 	bl	8011c48 <pow>
 8000d88:	eeb0 7b40 	vmov.f64	d7, d0
 8000d8c:	ee39 9b07 	vadd.f64	d9, d9, d7
 8000d90:	ed97 7b04 	vldr	d7, [r7, #16]
 8000d94:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8000d98:	eeb0 0b47 	vmov.f64	d0, d7
 8000d9c:	f010 ff54 	bl	8011c48 <pow>
 8000da0:	eeb0 7b40 	vmov.f64	d7, d0
 8000da4:	ee39 7b07 	vadd.f64	d7, d9, d7
 8000da8:	ed9f 6b3d 	vldr	d6, [pc, #244]	; 8000ea0 <cinematicaInversa+0x420>
 8000dac:	ee37 7b46 	vsub.f64	d7, d7, d6
 8000db0:	ed9f 6b41 	vldr	d6, [pc, #260]	; 8000eb8 <cinematicaInversa+0x438>
 8000db4:	ee37 7b46 	vsub.f64	d7, d7, d6
 8000db8:	ed9f 6b41 	vldr	d6, [pc, #260]	; 8000ec0 <cinematicaInversa+0x440>
 8000dbc:	ee37 5b06 	vadd.f64	d5, d7, d6
 8000dc0:	ed97 7b04 	vldr	d7, [r7, #16]
 8000dc4:	ee37 6b07 	vadd.f64	d6, d7, d7
 8000dc8:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8000dcc:	ee28 7b07 	vmul.f64	d7, d8, d7
 8000dd0:	ed9f 6b2b 	vldr	d6, [pc, #172]	; 8000e80 <cinematicaInversa+0x400>
 8000dd4:	ee37 7b46 	vsub.f64	d7, d7, d6
 8000dd8:	4b40      	ldr	r3, [pc, #256]	; (8000edc <cinematicaInversa+0x45c>)
 8000dda:	ed83 7b00 	vstr	d7, [r3]

	C1 = (pow(((pow((_Pfin.y - r), 2) + pow(_Pfin.z, 2) - pow(L2, 2) + pow(_Pfin.x, 2) - pow(R, 2) + pow(L1, 2)) / (2 * _Pfin.z)), 2) - pow(L1, 2) + pow(R, 2));
 8000dde:	ed97 7b02 	vldr	d7, [r7, #8]
 8000de2:	ed9f 6b1f 	vldr	d6, [pc, #124]	; 8000e60 <cinematicaInversa+0x3e0>
 8000de6:	ee37 7b46 	vsub.f64	d7, d7, d6
 8000dea:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8000dee:	eeb0 0b47 	vmov.f64	d0, d7
 8000df2:	f010 ff29 	bl	8011c48 <pow>
 8000df6:	eeb0 8b40 	vmov.f64	d8, d0
 8000dfa:	ed97 7b04 	vldr	d7, [r7, #16]
 8000dfe:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8000e02:	eeb0 0b47 	vmov.f64	d0, d7
 8000e06:	f010 ff1f 	bl	8011c48 <pow>
 8000e0a:	eeb0 7b40 	vmov.f64	d7, d0
 8000e0e:	ee38 7b07 	vadd.f64	d7, d8, d7
 8000e12:	ed9f 6b23 	vldr	d6, [pc, #140]	; 8000ea0 <cinematicaInversa+0x420>
 8000e16:	ee37 8b46 	vsub.f64	d8, d7, d6
 8000e1a:	ed97 7b00 	vldr	d7, [r7]
 8000e1e:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8000e22:	eeb0 0b47 	vmov.f64	d0, d7
 8000e26:	f010 ff0f 	bl	8011c48 <pow>
 8000e2a:	eeb0 7b40 	vmov.f64	d7, d0
 8000e2e:	ee38 7b07 	vadd.f64	d7, d8, d7
 8000e32:	ed9f 6b21 	vldr	d6, [pc, #132]	; 8000eb8 <cinematicaInversa+0x438>
 8000e36:	ee37 7b46 	vsub.f64	d7, d7, d6
 8000e3a:	ed9f 6b21 	vldr	d6, [pc, #132]	; 8000ec0 <cinematicaInversa+0x440>
 8000e3e:	ee37 6b06 	vadd.f64	d6, d7, d6
 8000e42:	ed97 7b04 	vldr	d7, [r7, #16]
 8000e46:	ee37 7b07 	vadd.f64	d7, d7, d7
 8000e4a:	ee86 5b07 	vdiv.f64	d5, d6, d7
 8000e4e:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8000e52:	eeb0 0b45 	vmov.f64	d0, d5
 8000e56:	f010 fef7 	bl	8011c48 <pow>
 8000e5a:	eeb0 7b40 	vmov.f64	d7, d0
 8000e5e:	e03f      	b.n	8000ee0 <cinematicaInversa+0x460>
 8000e60:	1eb851ec 	.word	0x1eb851ec
 8000e64:	3fb1eb85 	.word	0x3fb1eb85
 8000e68:	24dd2f1b 	.word	0x24dd2f1b
 8000e6c:	3fc58106 	.word	0x3fc58106
 8000e70:	5625749b 	.word	0x5625749b
 8000e74:	3faf09d1 	.word	0x3faf09d1
 8000e78:	e8584caa 	.word	0xe8584caa
 8000e7c:	400bb67a 	.word	0x400bb67a
 8000e80:	24dd2f1d 	.word	0x24dd2f1d
 8000e84:	3fe58106 	.word	0x3fe58106
 8000e88:	1eb851ec 	.word	0x1eb851ec
 8000e8c:	3fa1eb85 	.word	0x3fa1eb85
 8000e90:	9ba5e356 	.word	0x9ba5e356
 8000e94:	3fe020c4 	.word	0x3fe020c4
 8000e98:	3532e7b5 	.word	0x3532e7b5
 8000e9c:	3fc0de09 	.word	0x3fc0de09
 8000ea0:	70a3d70a 	.word	0x70a3d70a
 8000ea4:	3fd70a3d 	.word	0x3fd70a3d
 8000ea8:	24dd2f1b 	.word	0x24dd2f1b
 8000eac:	3fd58106 	.word	0x3fd58106
 8000eb0:	e8584caa 	.word	0xe8584caa
 8000eb4:	c00bb67a 	.word	0xc00bb67a
 8000eb8:	93d96639 	.word	0x93d96639
 8000ebc:	3f9ce6c0 	.word	0x3f9ce6c0
 8000ec0:	47ae147c 	.word	0x47ae147c
 8000ec4:	3fc47ae1 	.word	0x3fc47ae1
 8000ec8:	240002a8 	.word	0x240002a8
 8000ecc:	240002f0 	.word	0x240002f0
 8000ed0:	24000338 	.word	0x24000338
 8000ed4:	240002b0 	.word	0x240002b0
 8000ed8:	240002f8 	.word	0x240002f8
 8000edc:	24000340 	.word	0x24000340
 8000ee0:	ed9f 6bdf 	vldr	d6, [pc, #892]	; 8001260 <cinematicaInversa+0x7e0>
 8000ee4:	ee37 7b46 	vsub.f64	d7, d7, d6
 8000ee8:	ed9f 6bdf 	vldr	d6, [pc, #892]	; 8001268 <cinematicaInversa+0x7e8>
 8000eec:	ee37 7b06 	vadd.f64	d7, d7, d6
 8000ef0:	4be7      	ldr	r3, [pc, #924]	; (8001290 <cinematicaInversa+0x810>)
 8000ef2:	ed83 7b00 	vstr	d7, [r3]
	C2 = pow(R, 2) - pow(L1, 2) + pow(((-pow(R, 2) + pow(L1, 2) + pow((_Pfin.x + r * C30), 2) + pow((_Pfin.y + r * S30), 2) + pow(_Pfin.z, 2) - pow(L2, 2)) / (2.0 * _Pfin.z)), 2.0);
 8000ef6:	ed97 7b00 	vldr	d7, [r7]
 8000efa:	ed9f 6bdd 	vldr	d6, [pc, #884]	; 8001270 <cinematicaInversa+0x7f0>
 8000efe:	ee37 7b06 	vadd.f64	d7, d7, d6
 8000f02:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8000f06:	eeb0 0b47 	vmov.f64	d0, d7
 8000f0a:	f010 fe9d 	bl	8011c48 <pow>
 8000f0e:	eeb0 7b40 	vmov.f64	d7, d0
 8000f12:	ed9f 6bd9 	vldr	d6, [pc, #868]	; 8001278 <cinematicaInversa+0x7f8>
 8000f16:	ee37 8b06 	vadd.f64	d8, d7, d6
 8000f1a:	ed97 7b02 	vldr	d7, [r7, #8]
 8000f1e:	ed9f 6bd8 	vldr	d6, [pc, #864]	; 8001280 <cinematicaInversa+0x800>
 8000f22:	ee37 7b06 	vadd.f64	d7, d7, d6
 8000f26:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8000f2a:	eeb0 0b47 	vmov.f64	d0, d7
 8000f2e:	f010 fe8b 	bl	8011c48 <pow>
 8000f32:	eeb0 7b40 	vmov.f64	d7, d0
 8000f36:	ee38 8b07 	vadd.f64	d8, d8, d7
 8000f3a:	ed97 7b04 	vldr	d7, [r7, #16]
 8000f3e:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8000f42:	eeb0 0b47 	vmov.f64	d0, d7
 8000f46:	f010 fe7f 	bl	8011c48 <pow>
 8000f4a:	eeb0 7b40 	vmov.f64	d7, d0
 8000f4e:	ee38 7b07 	vadd.f64	d7, d8, d7
 8000f52:	ed9f 6bcd 	vldr	d6, [pc, #820]	; 8001288 <cinematicaInversa+0x808>
 8000f56:	ee37 6b46 	vsub.f64	d6, d7, d6
 8000f5a:	ed97 7b04 	vldr	d7, [r7, #16]
 8000f5e:	ee37 7b07 	vadd.f64	d7, d7, d7
 8000f62:	ee86 5b07 	vdiv.f64	d5, d6, d7
 8000f66:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8000f6a:	eeb0 0b45 	vmov.f64	d0, d5
 8000f6e:	f010 fe6b 	bl	8011c48 <pow>
 8000f72:	eeb0 7b40 	vmov.f64	d7, d0
 8000f76:	ed9f 6bc0 	vldr	d6, [pc, #768]	; 8001278 <cinematicaInversa+0x7f8>
 8000f7a:	ee37 7b46 	vsub.f64	d7, d7, d6
 8000f7e:	4bc5      	ldr	r3, [pc, #788]	; (8001294 <cinematicaInversa+0x814>)
 8000f80:	ed83 7b00 	vstr	d7, [r3]
	C3 = pow(R, 2) - pow(L1, 2) + pow(((pow((_Pfin.x + r * C150), 2) + pow((_Pfin.y + r * S150), 2) + pow(_Pfin.z, 2) - pow(L2, 2) - pow(R, 2) + pow(L1, 2)) / (2.0 * _Pfin.z)), 2.0);
 8000f84:	ed97 7b00 	vldr	d7, [r7]
 8000f88:	ed9f 6bb9 	vldr	d6, [pc, #740]	; 8001270 <cinematicaInversa+0x7f0>
 8000f8c:	ee37 7b46 	vsub.f64	d7, d7, d6
 8000f90:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8000f94:	eeb0 0b47 	vmov.f64	d0, d7
 8000f98:	f010 fe56 	bl	8011c48 <pow>
 8000f9c:	eeb0 8b40 	vmov.f64	d8, d0
 8000fa0:	ed97 7b02 	vldr	d7, [r7, #8]
 8000fa4:	ed9f 6bb6 	vldr	d6, [pc, #728]	; 8001280 <cinematicaInversa+0x800>
 8000fa8:	ee37 7b06 	vadd.f64	d7, d7, d6
 8000fac:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8000fb0:	eeb0 0b47 	vmov.f64	d0, d7
 8000fb4:	f010 fe48 	bl	8011c48 <pow>
 8000fb8:	eeb0 7b40 	vmov.f64	d7, d0
 8000fbc:	ee38 8b07 	vadd.f64	d8, d8, d7
 8000fc0:	ed97 7b04 	vldr	d7, [r7, #16]
 8000fc4:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8000fc8:	eeb0 0b47 	vmov.f64	d0, d7
 8000fcc:	f010 fe3c 	bl	8011c48 <pow>
 8000fd0:	eeb0 7b40 	vmov.f64	d7, d0
 8000fd4:	ee38 7b07 	vadd.f64	d7, d8, d7
 8000fd8:	ed9f 6bab 	vldr	d6, [pc, #684]	; 8001288 <cinematicaInversa+0x808>
 8000fdc:	ee37 7b46 	vsub.f64	d7, d7, d6
 8000fe0:	ed9f 6ba1 	vldr	d6, [pc, #644]	; 8001268 <cinematicaInversa+0x7e8>
 8000fe4:	ee37 7b46 	vsub.f64	d7, d7, d6
 8000fe8:	ed9f 6b9d 	vldr	d6, [pc, #628]	; 8001260 <cinematicaInversa+0x7e0>
 8000fec:	ee37 6b06 	vadd.f64	d6, d7, d6
 8000ff0:	ed97 7b04 	vldr	d7, [r7, #16]
 8000ff4:	ee37 7b07 	vadd.f64	d7, d7, d7
 8000ff8:	ee86 5b07 	vdiv.f64	d5, d6, d7
 8000ffc:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8001000:	eeb0 0b45 	vmov.f64	d0, d5
 8001004:	f010 fe20 	bl	8011c48 <pow>
 8001008:	eeb0 7b40 	vmov.f64	d7, d0
 800100c:	ed9f 6b9a 	vldr	d6, [pc, #616]	; 8001278 <cinematicaInversa+0x7f8>
 8001010:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001014:	4ba0      	ldr	r3, [pc, #640]	; (8001298 <cinematicaInversa+0x818>)
 8001016:	ed83 7b00 	vstr	d7, [r3]

	YJ1_1 = (-B1 - sqrt(pow(B1, 2) - 4 * A1 * C1)) / (2 * A1);
 800101a:	4ba0      	ldr	r3, [pc, #640]	; (800129c <cinematicaInversa+0x81c>)
 800101c:	ed93 7b00 	vldr	d7, [r3]
 8001020:	eeb1 8b47 	vneg.f64	d8, d7
 8001024:	4b9d      	ldr	r3, [pc, #628]	; (800129c <cinematicaInversa+0x81c>)
 8001026:	ed93 7b00 	vldr	d7, [r3]
 800102a:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 800102e:	eeb0 0b47 	vmov.f64	d0, d7
 8001032:	f010 fe09 	bl	8011c48 <pow>
 8001036:	eeb0 5b40 	vmov.f64	d5, d0
 800103a:	4b99      	ldr	r3, [pc, #612]	; (80012a0 <cinematicaInversa+0x820>)
 800103c:	ed93 7b00 	vldr	d7, [r3]
 8001040:	eeb1 6b00 	vmov.f64	d6, #16	; 0x40800000  4.0
 8001044:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001048:	4b91      	ldr	r3, [pc, #580]	; (8001290 <cinematicaInversa+0x810>)
 800104a:	ed93 7b00 	vldr	d7, [r3]
 800104e:	ee26 7b07 	vmul.f64	d7, d6, d7
 8001052:	ee35 7b47 	vsub.f64	d7, d5, d7
 8001056:	eeb0 0b47 	vmov.f64	d0, d7
 800105a:	f011 f875 	bl	8012148 <sqrt>
 800105e:	eeb0 7b40 	vmov.f64	d7, d0
 8001062:	ee38 5b47 	vsub.f64	d5, d8, d7
 8001066:	4b8e      	ldr	r3, [pc, #568]	; (80012a0 <cinematicaInversa+0x820>)
 8001068:	ed93 7b00 	vldr	d7, [r3]
 800106c:	ee37 6b07 	vadd.f64	d6, d7, d7
 8001070:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8001074:	4b8b      	ldr	r3, [pc, #556]	; (80012a4 <cinematicaInversa+0x824>)
 8001076:	ed83 7b00 	vstr	d7, [r3]
	YJ1_2 = (-B1 + sqrt(pow(B1, 2) - 4 * A1 * C1)) / (2 * A1);
 800107a:	4b88      	ldr	r3, [pc, #544]	; (800129c <cinematicaInversa+0x81c>)
 800107c:	ed93 7b00 	vldr	d7, [r3]
 8001080:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8001084:	eeb0 0b47 	vmov.f64	d0, d7
 8001088:	f010 fdde 	bl	8011c48 <pow>
 800108c:	eeb0 5b40 	vmov.f64	d5, d0
 8001090:	4b83      	ldr	r3, [pc, #524]	; (80012a0 <cinematicaInversa+0x820>)
 8001092:	ed93 7b00 	vldr	d7, [r3]
 8001096:	eeb1 6b00 	vmov.f64	d6, #16	; 0x40800000  4.0
 800109a:	ee27 6b06 	vmul.f64	d6, d7, d6
 800109e:	4b7c      	ldr	r3, [pc, #496]	; (8001290 <cinematicaInversa+0x810>)
 80010a0:	ed93 7b00 	vldr	d7, [r3]
 80010a4:	ee26 7b07 	vmul.f64	d7, d6, d7
 80010a8:	ee35 7b47 	vsub.f64	d7, d5, d7
 80010ac:	eeb0 0b47 	vmov.f64	d0, d7
 80010b0:	f011 f84a 	bl	8012148 <sqrt>
 80010b4:	eeb0 6b40 	vmov.f64	d6, d0
 80010b8:	4b78      	ldr	r3, [pc, #480]	; (800129c <cinematicaInversa+0x81c>)
 80010ba:	ed93 7b00 	vldr	d7, [r3]
 80010be:	ee36 5b47 	vsub.f64	d5, d6, d7
 80010c2:	4b77      	ldr	r3, [pc, #476]	; (80012a0 <cinematicaInversa+0x820>)
 80010c4:	ed93 7b00 	vldr	d7, [r3]
 80010c8:	ee37 6b07 	vadd.f64	d6, d7, d7
 80010cc:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80010d0:	4b75      	ldr	r3, [pc, #468]	; (80012a8 <cinematicaInversa+0x828>)
 80010d2:	ed83 7b00 	vstr	d7, [r3]
	YJ2_1 = (-B2 + sqrt(pow(B2, 2) - 4 * A2 * C2)) / (2 * A2);
 80010d6:	4b75      	ldr	r3, [pc, #468]	; (80012ac <cinematicaInversa+0x82c>)
 80010d8:	ed93 7b00 	vldr	d7, [r3]
 80010dc:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 80010e0:	eeb0 0b47 	vmov.f64	d0, d7
 80010e4:	f010 fdb0 	bl	8011c48 <pow>
 80010e8:	eeb0 5b40 	vmov.f64	d5, d0
 80010ec:	4b70      	ldr	r3, [pc, #448]	; (80012b0 <cinematicaInversa+0x830>)
 80010ee:	ed93 7b00 	vldr	d7, [r3]
 80010f2:	eeb1 6b00 	vmov.f64	d6, #16	; 0x40800000  4.0
 80010f6:	ee27 6b06 	vmul.f64	d6, d7, d6
 80010fa:	4b66      	ldr	r3, [pc, #408]	; (8001294 <cinematicaInversa+0x814>)
 80010fc:	ed93 7b00 	vldr	d7, [r3]
 8001100:	ee26 7b07 	vmul.f64	d7, d6, d7
 8001104:	ee35 7b47 	vsub.f64	d7, d5, d7
 8001108:	eeb0 0b47 	vmov.f64	d0, d7
 800110c:	f011 f81c 	bl	8012148 <sqrt>
 8001110:	eeb0 6b40 	vmov.f64	d6, d0
 8001114:	4b65      	ldr	r3, [pc, #404]	; (80012ac <cinematicaInversa+0x82c>)
 8001116:	ed93 7b00 	vldr	d7, [r3]
 800111a:	ee36 5b47 	vsub.f64	d5, d6, d7
 800111e:	4b64      	ldr	r3, [pc, #400]	; (80012b0 <cinematicaInversa+0x830>)
 8001120:	ed93 7b00 	vldr	d7, [r3]
 8001124:	ee37 6b07 	vadd.f64	d6, d7, d7
 8001128:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800112c:	4b61      	ldr	r3, [pc, #388]	; (80012b4 <cinematicaInversa+0x834>)
 800112e:	ed83 7b00 	vstr	d7, [r3]
	YJ2_2 = (-B2 - sqrt(pow(B2, 2) - 4 * A2 * C2)) / (2 * A2);
 8001132:	4b5e      	ldr	r3, [pc, #376]	; (80012ac <cinematicaInversa+0x82c>)
 8001134:	ed93 7b00 	vldr	d7, [r3]
 8001138:	eeb1 8b47 	vneg.f64	d8, d7
 800113c:	4b5b      	ldr	r3, [pc, #364]	; (80012ac <cinematicaInversa+0x82c>)
 800113e:	ed93 7b00 	vldr	d7, [r3]
 8001142:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8001146:	eeb0 0b47 	vmov.f64	d0, d7
 800114a:	f010 fd7d 	bl	8011c48 <pow>
 800114e:	eeb0 5b40 	vmov.f64	d5, d0
 8001152:	4b57      	ldr	r3, [pc, #348]	; (80012b0 <cinematicaInversa+0x830>)
 8001154:	ed93 7b00 	vldr	d7, [r3]
 8001158:	eeb1 6b00 	vmov.f64	d6, #16	; 0x40800000  4.0
 800115c:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001160:	4b4c      	ldr	r3, [pc, #304]	; (8001294 <cinematicaInversa+0x814>)
 8001162:	ed93 7b00 	vldr	d7, [r3]
 8001166:	ee26 7b07 	vmul.f64	d7, d6, d7
 800116a:	ee35 7b47 	vsub.f64	d7, d5, d7
 800116e:	eeb0 0b47 	vmov.f64	d0, d7
 8001172:	f010 ffe9 	bl	8012148 <sqrt>
 8001176:	eeb0 7b40 	vmov.f64	d7, d0
 800117a:	ee38 5b47 	vsub.f64	d5, d8, d7
 800117e:	4b4c      	ldr	r3, [pc, #304]	; (80012b0 <cinematicaInversa+0x830>)
 8001180:	ed93 7b00 	vldr	d7, [r3]
 8001184:	ee37 6b07 	vadd.f64	d6, d7, d7
 8001188:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800118c:	4b4a      	ldr	r3, [pc, #296]	; (80012b8 <cinematicaInversa+0x838>)
 800118e:	ed83 7b00 	vstr	d7, [r3]
	YJ3_1 = (-B3 + sqrt(pow(B3, 2) - 4 * A3 * C3)) / (2 * A3);
 8001192:	4b4a      	ldr	r3, [pc, #296]	; (80012bc <cinematicaInversa+0x83c>)
 8001194:	ed93 7b00 	vldr	d7, [r3]
 8001198:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 800119c:	eeb0 0b47 	vmov.f64	d0, d7
 80011a0:	f010 fd52 	bl	8011c48 <pow>
 80011a4:	eeb0 5b40 	vmov.f64	d5, d0
 80011a8:	4b45      	ldr	r3, [pc, #276]	; (80012c0 <cinematicaInversa+0x840>)
 80011aa:	ed93 7b00 	vldr	d7, [r3]
 80011ae:	eeb1 6b00 	vmov.f64	d6, #16	; 0x40800000  4.0
 80011b2:	ee27 6b06 	vmul.f64	d6, d7, d6
 80011b6:	4b38      	ldr	r3, [pc, #224]	; (8001298 <cinematicaInversa+0x818>)
 80011b8:	ed93 7b00 	vldr	d7, [r3]
 80011bc:	ee26 7b07 	vmul.f64	d7, d6, d7
 80011c0:	ee35 7b47 	vsub.f64	d7, d5, d7
 80011c4:	eeb0 0b47 	vmov.f64	d0, d7
 80011c8:	f010 ffbe 	bl	8012148 <sqrt>
 80011cc:	eeb0 6b40 	vmov.f64	d6, d0
 80011d0:	4b3a      	ldr	r3, [pc, #232]	; (80012bc <cinematicaInversa+0x83c>)
 80011d2:	ed93 7b00 	vldr	d7, [r3]
 80011d6:	ee36 5b47 	vsub.f64	d5, d6, d7
 80011da:	4b39      	ldr	r3, [pc, #228]	; (80012c0 <cinematicaInversa+0x840>)
 80011dc:	ed93 7b00 	vldr	d7, [r3]
 80011e0:	ee37 6b07 	vadd.f64	d6, d7, d7
 80011e4:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80011e8:	4b36      	ldr	r3, [pc, #216]	; (80012c4 <cinematicaInversa+0x844>)
 80011ea:	ed83 7b00 	vstr	d7, [r3]
	YJ3_2 = (-B3 - sqrt(pow(B3, 2) - 4 * A3 * C3)) / (2 * A3);
 80011ee:	4b33      	ldr	r3, [pc, #204]	; (80012bc <cinematicaInversa+0x83c>)
 80011f0:	ed93 7b00 	vldr	d7, [r3]
 80011f4:	eeb1 8b47 	vneg.f64	d8, d7
 80011f8:	4b30      	ldr	r3, [pc, #192]	; (80012bc <cinematicaInversa+0x83c>)
 80011fa:	ed93 7b00 	vldr	d7, [r3]
 80011fe:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8001202:	eeb0 0b47 	vmov.f64	d0, d7
 8001206:	f010 fd1f 	bl	8011c48 <pow>
 800120a:	eeb0 5b40 	vmov.f64	d5, d0
 800120e:	4b2c      	ldr	r3, [pc, #176]	; (80012c0 <cinematicaInversa+0x840>)
 8001210:	ed93 7b00 	vldr	d7, [r3]
 8001214:	eeb1 6b00 	vmov.f64	d6, #16	; 0x40800000  4.0
 8001218:	ee27 6b06 	vmul.f64	d6, d7, d6
 800121c:	4b1e      	ldr	r3, [pc, #120]	; (8001298 <cinematicaInversa+0x818>)
 800121e:	ed93 7b00 	vldr	d7, [r3]
 8001222:	ee26 7b07 	vmul.f64	d7, d6, d7
 8001226:	ee35 7b47 	vsub.f64	d7, d5, d7
 800122a:	eeb0 0b47 	vmov.f64	d0, d7
 800122e:	f010 ff8b 	bl	8012148 <sqrt>
 8001232:	eeb0 7b40 	vmov.f64	d7, d0
 8001236:	ee38 5b47 	vsub.f64	d5, d8, d7
 800123a:	4b21      	ldr	r3, [pc, #132]	; (80012c0 <cinematicaInversa+0x840>)
 800123c:	ed93 7b00 	vldr	d7, [r3]
 8001240:	ee37 6b07 	vadd.f64	d6, d7, d7
 8001244:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8001248:	4b1f      	ldr	r3, [pc, #124]	; (80012c8 <cinematicaInversa+0x848>)
 800124a:	ed83 7b00 	vstr	d7, [r3]

	XJ1_1 = 0;
 800124e:	491f      	ldr	r1, [pc, #124]	; (80012cc <cinematicaInversa+0x84c>)
 8001250:	f04f 0200 	mov.w	r2, #0
 8001254:	f04f 0300 	mov.w	r3, #0
 8001258:	e9c1 2300 	strd	r2, r3, [r1]
 800125c:	e038      	b.n	80012d0 <cinematicaInversa+0x850>
 800125e:	bf00      	nop
 8001260:	47ae147c 	.word	0x47ae147c
 8001264:	3fc47ae1 	.word	0x3fc47ae1
 8001268:	93d96639 	.word	0x93d96639
 800126c:	3f9ce6c0 	.word	0x3f9ce6c0
 8001270:	5625749b 	.word	0x5625749b
 8001274:	3faf09d1 	.word	0x3faf09d1
 8001278:	3532e7b5 	.word	0x3532e7b5
 800127c:	3fc0de09 	.word	0x3fc0de09
 8001280:	1eb851ec 	.word	0x1eb851ec
 8001284:	3fa1eb85 	.word	0x3fa1eb85
 8001288:	70a3d70a 	.word	0x70a3d70a
 800128c:	3fd70a3d 	.word	0x3fd70a3d
 8001290:	240002b8 	.word	0x240002b8
 8001294:	24000300 	.word	0x24000300
 8001298:	24000348 	.word	0x24000348
 800129c:	240002b0 	.word	0x240002b0
 80012a0:	240002a8 	.word	0x240002a8
 80012a4:	240002d0 	.word	0x240002d0
 80012a8:	240002d8 	.word	0x240002d8
 80012ac:	240002f8 	.word	0x240002f8
 80012b0:	240002f0 	.word	0x240002f0
 80012b4:	24000318 	.word	0x24000318
 80012b8:	24000320 	.word	0x24000320
 80012bc:	24000340 	.word	0x24000340
 80012c0:	24000338 	.word	0x24000338
 80012c4:	24000360 	.word	0x24000360
 80012c8:	24000368 	.word	0x24000368
 80012cc:	240002c0 	.word	0x240002c0
	XJ1_2 = 0;
 80012d0:	49f1      	ldr	r1, [pc, #964]	; (8001698 <cinematicaInversa+0xc18>)
 80012d2:	f04f 0200 	mov.w	r2, #0
 80012d6:	f04f 0300 	mov.w	r3, #0
 80012da:	e9c1 2300 	strd	r2, r3, [r1]
	XJ2_1 = sqrt(3) * YJ2_1;
 80012de:	4bef      	ldr	r3, [pc, #956]	; (800169c <cinematicaInversa+0xc1c>)
 80012e0:	ed93 7b00 	vldr	d7, [r3]
 80012e4:	ed9f 6bd2 	vldr	d6, [pc, #840]	; 8001630 <cinematicaInversa+0xbb0>
 80012e8:	ee27 7b06 	vmul.f64	d7, d7, d6
 80012ec:	4bec      	ldr	r3, [pc, #944]	; (80016a0 <cinematicaInversa+0xc20>)
 80012ee:	ed83 7b00 	vstr	d7, [r3]
	XJ2_2 = sqrt(3) * YJ2_2;
 80012f2:	4bec      	ldr	r3, [pc, #944]	; (80016a4 <cinematicaInversa+0xc24>)
 80012f4:	ed93 7b00 	vldr	d7, [r3]
 80012f8:	ed9f 6bcd 	vldr	d6, [pc, #820]	; 8001630 <cinematicaInversa+0xbb0>
 80012fc:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001300:	4be9      	ldr	r3, [pc, #932]	; (80016a8 <cinematicaInversa+0xc28>)
 8001302:	ed83 7b00 	vstr	d7, [r3]
	XJ3_1 = -sqrt(3) * YJ3_1;
 8001306:	4be9      	ldr	r3, [pc, #932]	; (80016ac <cinematicaInversa+0xc2c>)
 8001308:	ed93 7b00 	vldr	d7, [r3]
 800130c:	ed9f 6bca 	vldr	d6, [pc, #808]	; 8001638 <cinematicaInversa+0xbb8>
 8001310:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001314:	4be6      	ldr	r3, [pc, #920]	; (80016b0 <cinematicaInversa+0xc30>)
 8001316:	ed83 7b00 	vstr	d7, [r3]
	XJ3_2 = -sqrt(3) * YJ3_2;
 800131a:	4be6      	ldr	r3, [pc, #920]	; (80016b4 <cinematicaInversa+0xc34>)
 800131c:	ed93 7b00 	vldr	d7, [r3]
 8001320:	ed9f 6bc5 	vldr	d6, [pc, #788]	; 8001638 <cinematicaInversa+0xbb8>
 8001324:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001328:	4be3      	ldr	r3, [pc, #908]	; (80016b8 <cinematicaInversa+0xc38>)
 800132a:	ed83 7b00 	vstr	d7, [r3]

	ZJ1_1 = ((YJ1_1 * ((-2 * (R + (_Pfin.y - r))) / (2 * _Pfin.z))) + ((pow((_Pfin.y - r), 2) + pow(_Pfin.z, 2) - pow(L2, 2) + pow(_Pfin.x, 2) - pow(R, 2) + pow(L1, 2)) / (2 * _Pfin.z)));
 800132e:	ed97 7b02 	vldr	d7, [r7, #8]
 8001332:	ed9f 6bc3 	vldr	d6, [pc, #780]	; 8001640 <cinematicaInversa+0xbc0>
 8001336:	ee37 7b46 	vsub.f64	d7, d7, d6
 800133a:	ed9f 6bc3 	vldr	d6, [pc, #780]	; 8001648 <cinematicaInversa+0xbc8>
 800133e:	ee37 7b06 	vadd.f64	d7, d7, d6
 8001342:	eeb8 6b00 	vmov.f64	d6, #128	; 0xc0000000 -2.0
 8001346:	ee27 5b06 	vmul.f64	d5, d7, d6
 800134a:	ed97 7b04 	vldr	d7, [r7, #16]
 800134e:	ee37 7b07 	vadd.f64	d7, d7, d7
 8001352:	ee85 6b07 	vdiv.f64	d6, d5, d7
 8001356:	4bd9      	ldr	r3, [pc, #868]	; (80016bc <cinematicaInversa+0xc3c>)
 8001358:	ed93 7b00 	vldr	d7, [r3]
 800135c:	ee26 8b07 	vmul.f64	d8, d6, d7
 8001360:	ed97 7b02 	vldr	d7, [r7, #8]
 8001364:	ed9f 6bb6 	vldr	d6, [pc, #728]	; 8001640 <cinematicaInversa+0xbc0>
 8001368:	ee37 7b46 	vsub.f64	d7, d7, d6
 800136c:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8001370:	eeb0 0b47 	vmov.f64	d0, d7
 8001374:	f010 fc68 	bl	8011c48 <pow>
 8001378:	eeb0 9b40 	vmov.f64	d9, d0
 800137c:	ed97 7b04 	vldr	d7, [r7, #16]
 8001380:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8001384:	eeb0 0b47 	vmov.f64	d0, d7
 8001388:	f010 fc5e 	bl	8011c48 <pow>
 800138c:	eeb0 7b40 	vmov.f64	d7, d0
 8001390:	ee39 7b07 	vadd.f64	d7, d9, d7
 8001394:	ed9f 6bae 	vldr	d6, [pc, #696]	; 8001650 <cinematicaInversa+0xbd0>
 8001398:	ee37 9b46 	vsub.f64	d9, d7, d6
 800139c:	ed97 7b00 	vldr	d7, [r7]
 80013a0:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 80013a4:	eeb0 0b47 	vmov.f64	d0, d7
 80013a8:	f010 fc4e 	bl	8011c48 <pow>
 80013ac:	eeb0 7b40 	vmov.f64	d7, d0
 80013b0:	ee39 7b07 	vadd.f64	d7, d9, d7
 80013b4:	ed9f 6ba8 	vldr	d6, [pc, #672]	; 8001658 <cinematicaInversa+0xbd8>
 80013b8:	ee37 7b46 	vsub.f64	d7, d7, d6
 80013bc:	ed9f 6ba8 	vldr	d6, [pc, #672]	; 8001660 <cinematicaInversa+0xbe0>
 80013c0:	ee37 5b06 	vadd.f64	d5, d7, d6
 80013c4:	ed97 7b04 	vldr	d7, [r7, #16]
 80013c8:	ee37 6b07 	vadd.f64	d6, d7, d7
 80013cc:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80013d0:	ee38 7b07 	vadd.f64	d7, d8, d7
 80013d4:	4bba      	ldr	r3, [pc, #744]	; (80016c0 <cinematicaInversa+0xc40>)
 80013d6:	ed83 7b00 	vstr	d7, [r3]
	ZJ1_2 = ((YJ1_2 * ((-2 * (R + (_Pfin.y - r))) / (2 * _Pfin.z))) + ((pow((_Pfin.y - r), 2) + pow(_Pfin.z, 2) - pow(L2, 2) + pow(_Pfin.x, 2) - pow(R, 2) + pow(L1, 2)) / (2 * _Pfin.z)));
 80013da:	ed97 7b02 	vldr	d7, [r7, #8]
 80013de:	ed9f 6b98 	vldr	d6, [pc, #608]	; 8001640 <cinematicaInversa+0xbc0>
 80013e2:	ee37 7b46 	vsub.f64	d7, d7, d6
 80013e6:	ed9f 6b98 	vldr	d6, [pc, #608]	; 8001648 <cinematicaInversa+0xbc8>
 80013ea:	ee37 7b06 	vadd.f64	d7, d7, d6
 80013ee:	eeb8 6b00 	vmov.f64	d6, #128	; 0xc0000000 -2.0
 80013f2:	ee27 5b06 	vmul.f64	d5, d7, d6
 80013f6:	ed97 7b04 	vldr	d7, [r7, #16]
 80013fa:	ee37 7b07 	vadd.f64	d7, d7, d7
 80013fe:	ee85 6b07 	vdiv.f64	d6, d5, d7
 8001402:	4bb0      	ldr	r3, [pc, #704]	; (80016c4 <cinematicaInversa+0xc44>)
 8001404:	ed93 7b00 	vldr	d7, [r3]
 8001408:	ee26 8b07 	vmul.f64	d8, d6, d7
 800140c:	ed97 7b02 	vldr	d7, [r7, #8]
 8001410:	ed9f 6b8b 	vldr	d6, [pc, #556]	; 8001640 <cinematicaInversa+0xbc0>
 8001414:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001418:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 800141c:	eeb0 0b47 	vmov.f64	d0, d7
 8001420:	f010 fc12 	bl	8011c48 <pow>
 8001424:	eeb0 9b40 	vmov.f64	d9, d0
 8001428:	ed97 7b04 	vldr	d7, [r7, #16]
 800142c:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8001430:	eeb0 0b47 	vmov.f64	d0, d7
 8001434:	f010 fc08 	bl	8011c48 <pow>
 8001438:	eeb0 7b40 	vmov.f64	d7, d0
 800143c:	ee39 7b07 	vadd.f64	d7, d9, d7
 8001440:	ed9f 6b83 	vldr	d6, [pc, #524]	; 8001650 <cinematicaInversa+0xbd0>
 8001444:	ee37 9b46 	vsub.f64	d9, d7, d6
 8001448:	ed97 7b00 	vldr	d7, [r7]
 800144c:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8001450:	eeb0 0b47 	vmov.f64	d0, d7
 8001454:	f010 fbf8 	bl	8011c48 <pow>
 8001458:	eeb0 7b40 	vmov.f64	d7, d0
 800145c:	ee39 7b07 	vadd.f64	d7, d9, d7
 8001460:	ed9f 6b7d 	vldr	d6, [pc, #500]	; 8001658 <cinematicaInversa+0xbd8>
 8001464:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001468:	ed9f 6b7d 	vldr	d6, [pc, #500]	; 8001660 <cinematicaInversa+0xbe0>
 800146c:	ee37 5b06 	vadd.f64	d5, d7, d6
 8001470:	ed97 7b04 	vldr	d7, [r7, #16]
 8001474:	ee37 6b07 	vadd.f64	d6, d7, d7
 8001478:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800147c:	ee38 7b07 	vadd.f64	d7, d8, d7
 8001480:	4b91      	ldr	r3, [pc, #580]	; (80016c8 <cinematicaInversa+0xc48>)
 8001482:	ed83 7b00 	vstr	d7, [r3]
	ZJ2_1 = YJ2_1 * (((2 * sqrt(3.0) * R * C30 + 2.0 * R * S30) + (-2 * sqrt(3) * (_Pfin.x + r * C30) - 2.0 * (_Pfin.y + r * S30))) / (2 * _Pfin.z)) + ((-pow(R, 2) + pow(L1, 2) + pow((_Pfin.x + r * C30), 2) + pow((_Pfin.y + r * S30), 2) + pow(_Pfin.z, 2) - pow(L2, 2)) / (2 * _Pfin.z));
 8001486:	ed97 7b00 	vldr	d7, [r7]
 800148a:	ed9f 6b77 	vldr	d6, [pc, #476]	; 8001668 <cinematicaInversa+0xbe8>
 800148e:	ee37 7b06 	vadd.f64	d7, d7, d6
 8001492:	ed9f 6b77 	vldr	d6, [pc, #476]	; 8001670 <cinematicaInversa+0xbf0>
 8001496:	ee27 6b06 	vmul.f64	d6, d7, d6
 800149a:	ed97 7b02 	vldr	d7, [r7, #8]
 800149e:	ed9f 5b76 	vldr	d5, [pc, #472]	; 8001678 <cinematicaInversa+0xbf8>
 80014a2:	ee37 7b05 	vadd.f64	d7, d7, d5
 80014a6:	ee37 7b07 	vadd.f64	d7, d7, d7
 80014aa:	ee36 7b47 	vsub.f64	d7, d6, d7
 80014ae:	ed9f 6b74 	vldr	d6, [pc, #464]	; 8001680 <cinematicaInversa+0xc00>
 80014b2:	ee37 5b06 	vadd.f64	d5, d7, d6
 80014b6:	ed97 7b04 	vldr	d7, [r7, #16]
 80014ba:	ee37 7b07 	vadd.f64	d7, d7, d7
 80014be:	ee85 6b07 	vdiv.f64	d6, d5, d7
 80014c2:	4b76      	ldr	r3, [pc, #472]	; (800169c <cinematicaInversa+0xc1c>)
 80014c4:	ed93 7b00 	vldr	d7, [r3]
 80014c8:	ee26 8b07 	vmul.f64	d8, d6, d7
 80014cc:	ed97 7b00 	vldr	d7, [r7]
 80014d0:	ed9f 6b65 	vldr	d6, [pc, #404]	; 8001668 <cinematicaInversa+0xbe8>
 80014d4:	ee37 7b06 	vadd.f64	d7, d7, d6
 80014d8:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 80014dc:	eeb0 0b47 	vmov.f64	d0, d7
 80014e0:	f010 fbb2 	bl	8011c48 <pow>
 80014e4:	eeb0 7b40 	vmov.f64	d7, d0
 80014e8:	ed9f 6b67 	vldr	d6, [pc, #412]	; 8001688 <cinematicaInversa+0xc08>
 80014ec:	ee37 9b06 	vadd.f64	d9, d7, d6
 80014f0:	ed97 7b02 	vldr	d7, [r7, #8]
 80014f4:	ed9f 6b60 	vldr	d6, [pc, #384]	; 8001678 <cinematicaInversa+0xbf8>
 80014f8:	ee37 7b06 	vadd.f64	d7, d7, d6
 80014fc:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8001500:	eeb0 0b47 	vmov.f64	d0, d7
 8001504:	f010 fba0 	bl	8011c48 <pow>
 8001508:	eeb0 7b40 	vmov.f64	d7, d0
 800150c:	ee39 9b07 	vadd.f64	d9, d9, d7
 8001510:	ed97 7b04 	vldr	d7, [r7, #16]
 8001514:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8001518:	eeb0 0b47 	vmov.f64	d0, d7
 800151c:	f010 fb94 	bl	8011c48 <pow>
 8001520:	eeb0 7b40 	vmov.f64	d7, d0
 8001524:	ee39 7b07 	vadd.f64	d7, d9, d7
 8001528:	ed9f 6b49 	vldr	d6, [pc, #292]	; 8001650 <cinematicaInversa+0xbd0>
 800152c:	ee37 5b46 	vsub.f64	d5, d7, d6
 8001530:	ed97 7b04 	vldr	d7, [r7, #16]
 8001534:	ee37 6b07 	vadd.f64	d6, d7, d7
 8001538:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800153c:	ee38 7b07 	vadd.f64	d7, d8, d7
 8001540:	4b62      	ldr	r3, [pc, #392]	; (80016cc <cinematicaInversa+0xc4c>)
 8001542:	ed83 7b00 	vstr	d7, [r3]
	ZJ2_2 = YJ2_2 * (((2 * sqrt(3.0) * R * C30 + 2.0 * R * S30) + (-2 * sqrt(3) * (_Pfin.x + r * C30) - 2.0 * (_Pfin.y + r * S30))) / (2 * _Pfin.z)) + ((-pow(R, 2) + pow(L1, 2) + pow((_Pfin.x + r * C30), 2) + pow((_Pfin.y + r * S30), 2) + pow(_Pfin.z, 2) - pow(L2, 2)) / (2 * _Pfin.z));
 8001546:	ed97 7b00 	vldr	d7, [r7]
 800154a:	ed9f 6b47 	vldr	d6, [pc, #284]	; 8001668 <cinematicaInversa+0xbe8>
 800154e:	ee37 7b06 	vadd.f64	d7, d7, d6
 8001552:	ed9f 6b47 	vldr	d6, [pc, #284]	; 8001670 <cinematicaInversa+0xbf0>
 8001556:	ee27 6b06 	vmul.f64	d6, d7, d6
 800155a:	ed97 7b02 	vldr	d7, [r7, #8]
 800155e:	ed9f 5b46 	vldr	d5, [pc, #280]	; 8001678 <cinematicaInversa+0xbf8>
 8001562:	ee37 7b05 	vadd.f64	d7, d7, d5
 8001566:	ee37 7b07 	vadd.f64	d7, d7, d7
 800156a:	ee36 7b47 	vsub.f64	d7, d6, d7
 800156e:	ed9f 6b44 	vldr	d6, [pc, #272]	; 8001680 <cinematicaInversa+0xc00>
 8001572:	ee37 5b06 	vadd.f64	d5, d7, d6
 8001576:	ed97 7b04 	vldr	d7, [r7, #16]
 800157a:	ee37 7b07 	vadd.f64	d7, d7, d7
 800157e:	ee85 6b07 	vdiv.f64	d6, d5, d7
 8001582:	4b48      	ldr	r3, [pc, #288]	; (80016a4 <cinematicaInversa+0xc24>)
 8001584:	ed93 7b00 	vldr	d7, [r3]
 8001588:	ee26 8b07 	vmul.f64	d8, d6, d7
 800158c:	ed97 7b00 	vldr	d7, [r7]
 8001590:	ed9f 6b35 	vldr	d6, [pc, #212]	; 8001668 <cinematicaInversa+0xbe8>
 8001594:	ee37 7b06 	vadd.f64	d7, d7, d6
 8001598:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 800159c:	eeb0 0b47 	vmov.f64	d0, d7
 80015a0:	f010 fb52 	bl	8011c48 <pow>
 80015a4:	eeb0 7b40 	vmov.f64	d7, d0
 80015a8:	ed9f 6b37 	vldr	d6, [pc, #220]	; 8001688 <cinematicaInversa+0xc08>
 80015ac:	ee37 9b06 	vadd.f64	d9, d7, d6
 80015b0:	ed97 7b02 	vldr	d7, [r7, #8]
 80015b4:	ed9f 6b30 	vldr	d6, [pc, #192]	; 8001678 <cinematicaInversa+0xbf8>
 80015b8:	ee37 7b06 	vadd.f64	d7, d7, d6
 80015bc:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 80015c0:	eeb0 0b47 	vmov.f64	d0, d7
 80015c4:	f010 fb40 	bl	8011c48 <pow>
 80015c8:	eeb0 7b40 	vmov.f64	d7, d0
 80015cc:	ee39 9b07 	vadd.f64	d9, d9, d7
 80015d0:	ed97 7b04 	vldr	d7, [r7, #16]
 80015d4:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 80015d8:	eeb0 0b47 	vmov.f64	d0, d7
 80015dc:	f010 fb34 	bl	8011c48 <pow>
 80015e0:	eeb0 7b40 	vmov.f64	d7, d0
 80015e4:	ee39 7b07 	vadd.f64	d7, d9, d7
 80015e8:	ed9f 6b19 	vldr	d6, [pc, #100]	; 8001650 <cinematicaInversa+0xbd0>
 80015ec:	ee37 5b46 	vsub.f64	d5, d7, d6
 80015f0:	ed97 7b04 	vldr	d7, [r7, #16]
 80015f4:	ee37 6b07 	vadd.f64	d6, d7, d7
 80015f8:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80015fc:	ee38 7b07 	vadd.f64	d7, d8, d7
 8001600:	4b33      	ldr	r3, [pc, #204]	; (80016d0 <cinematicaInversa+0xc50>)
 8001602:	ed83 7b00 	vstr	d7, [r3]
	ZJ3_1 = YJ3_1 * ((2 * sqrt(3.0) * (_Pfin.x + r * C150) - 2.0 * (_Pfin.y + r * S150) - 2.0 * sqrt(3) * R * C150 + 2.0 * R * S150) / (2.0 * _Pfin.z)) + ((pow((_Pfin.x + r * C150), 2.0) + pow((_Pfin.y + r * S150), 2) + pow(_Pfin.z, 2.0) - pow(L2, 2) - pow(R, 2) + pow(L1, 2)) / (2 * _Pfin.z));
 8001606:	ed97 7b00 	vldr	d7, [r7]
 800160a:	ed9f 6b17 	vldr	d6, [pc, #92]	; 8001668 <cinematicaInversa+0xbe8>
 800160e:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001612:	ed9f 6b1f 	vldr	d6, [pc, #124]	; 8001690 <cinematicaInversa+0xc10>
 8001616:	ee27 6b06 	vmul.f64	d6, d7, d6
 800161a:	ed97 7b02 	vldr	d7, [r7, #8]
 800161e:	ed9f 5b16 	vldr	d5, [pc, #88]	; 8001678 <cinematicaInversa+0xbf8>
 8001622:	ee37 7b05 	vadd.f64	d7, d7, d5
 8001626:	ee37 7b07 	vadd.f64	d7, d7, d7
 800162a:	ee36 7b47 	vsub.f64	d7, d6, d7
 800162e:	e051      	b.n	80016d4 <cinematicaInversa+0xc54>
 8001630:	e8584caa 	.word	0xe8584caa
 8001634:	3ffbb67a 	.word	0x3ffbb67a
 8001638:	e8584caa 	.word	0xe8584caa
 800163c:	bffbb67a 	.word	0xbffbb67a
 8001640:	1eb851ec 	.word	0x1eb851ec
 8001644:	3fb1eb85 	.word	0x3fb1eb85
 8001648:	24dd2f1b 	.word	0x24dd2f1b
 800164c:	3fc58106 	.word	0x3fc58106
 8001650:	70a3d70a 	.word	0x70a3d70a
 8001654:	3fd70a3d 	.word	0x3fd70a3d
 8001658:	93d96639 	.word	0x93d96639
 800165c:	3f9ce6c0 	.word	0x3f9ce6c0
 8001660:	47ae147c 	.word	0x47ae147c
 8001664:	3fc47ae1 	.word	0x3fc47ae1
 8001668:	5625749b 	.word	0x5625749b
 800166c:	3faf09d1 	.word	0x3faf09d1
 8001670:	e8584caa 	.word	0xe8584caa
 8001674:	c00bb67a 	.word	0xc00bb67a
 8001678:	1eb851ec 	.word	0x1eb851ec
 800167c:	3fa1eb85 	.word	0x3fa1eb85
 8001680:	24dd2f1d 	.word	0x24dd2f1d
 8001684:	3fe58106 	.word	0x3fe58106
 8001688:	3532e7b5 	.word	0x3532e7b5
 800168c:	3fc0de09 	.word	0x3fc0de09
 8001690:	e8584caa 	.word	0xe8584caa
 8001694:	400bb67a 	.word	0x400bb67a
 8001698:	240002c8 	.word	0x240002c8
 800169c:	24000318 	.word	0x24000318
 80016a0:	24000308 	.word	0x24000308
 80016a4:	24000320 	.word	0x24000320
 80016a8:	24000310 	.word	0x24000310
 80016ac:	24000360 	.word	0x24000360
 80016b0:	24000350 	.word	0x24000350
 80016b4:	24000368 	.word	0x24000368
 80016b8:	24000358 	.word	0x24000358
 80016bc:	240002d0 	.word	0x240002d0
 80016c0:	240002e0 	.word	0x240002e0
 80016c4:	240002d8 	.word	0x240002d8
 80016c8:	240002e8 	.word	0x240002e8
 80016cc:	24000328 	.word	0x24000328
 80016d0:	24000330 	.word	0x24000330
 80016d4:	ed9f 6b90 	vldr	d6, [pc, #576]	; 8001918 <cinematicaInversa+0xe98>
 80016d8:	ee37 7b06 	vadd.f64	d7, d7, d6
 80016dc:	ed9f 6b90 	vldr	d6, [pc, #576]	; 8001920 <cinematicaInversa+0xea0>
 80016e0:	ee37 5b06 	vadd.f64	d5, d7, d6
 80016e4:	ed97 7b04 	vldr	d7, [r7, #16]
 80016e8:	ee37 7b07 	vadd.f64	d7, d7, d7
 80016ec:	ee85 6b07 	vdiv.f64	d6, d5, d7
 80016f0:	4b9f      	ldr	r3, [pc, #636]	; (8001970 <cinematicaInversa+0xef0>)
 80016f2:	ed93 7b00 	vldr	d7, [r3]
 80016f6:	ee26 8b07 	vmul.f64	d8, d6, d7
 80016fa:	ed97 7b00 	vldr	d7, [r7]
 80016fe:	ed9f 6b8a 	vldr	d6, [pc, #552]	; 8001928 <cinematicaInversa+0xea8>
 8001702:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001706:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 800170a:	eeb0 0b47 	vmov.f64	d0, d7
 800170e:	f010 fa9b 	bl	8011c48 <pow>
 8001712:	eeb0 9b40 	vmov.f64	d9, d0
 8001716:	ed97 7b02 	vldr	d7, [r7, #8]
 800171a:	ed9f 6b85 	vldr	d6, [pc, #532]	; 8001930 <cinematicaInversa+0xeb0>
 800171e:	ee37 7b06 	vadd.f64	d7, d7, d6
 8001722:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8001726:	eeb0 0b47 	vmov.f64	d0, d7
 800172a:	f010 fa8d 	bl	8011c48 <pow>
 800172e:	eeb0 7b40 	vmov.f64	d7, d0
 8001732:	ee39 9b07 	vadd.f64	d9, d9, d7
 8001736:	ed97 7b04 	vldr	d7, [r7, #16]
 800173a:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 800173e:	eeb0 0b47 	vmov.f64	d0, d7
 8001742:	f010 fa81 	bl	8011c48 <pow>
 8001746:	eeb0 7b40 	vmov.f64	d7, d0
 800174a:	ee39 7b07 	vadd.f64	d7, d9, d7
 800174e:	ed9f 6b7a 	vldr	d6, [pc, #488]	; 8001938 <cinematicaInversa+0xeb8>
 8001752:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001756:	ed9f 6b7a 	vldr	d6, [pc, #488]	; 8001940 <cinematicaInversa+0xec0>
 800175a:	ee37 7b46 	vsub.f64	d7, d7, d6
 800175e:	ed9f 6b7a 	vldr	d6, [pc, #488]	; 8001948 <cinematicaInversa+0xec8>
 8001762:	ee37 5b06 	vadd.f64	d5, d7, d6
 8001766:	ed97 7b04 	vldr	d7, [r7, #16]
 800176a:	ee37 6b07 	vadd.f64	d6, d7, d7
 800176e:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8001772:	ee38 7b07 	vadd.f64	d7, d8, d7
 8001776:	4b7f      	ldr	r3, [pc, #508]	; (8001974 <cinematicaInversa+0xef4>)
 8001778:	ed83 7b00 	vstr	d7, [r3]
	ZJ3_2 = YJ3_2 * ((2 * sqrt(3.0) * (_Pfin.x + r * C150) - 2.0 * (_Pfin.y + r * S150) - 2.0 * sqrt(3) * R * C150 + 2.0 * R * S150) / (2.0 * _Pfin.z)) + ((pow((_Pfin.x + r * C150), 2.0) + pow((_Pfin.y + r * S150), 2) + pow(_Pfin.z, 2) - pow(L2, 2) - pow(R, 2) + pow(L1, 2)) / (2 * _Pfin.z));
 800177c:	ed97 7b00 	vldr	d7, [r7]
 8001780:	ed9f 6b69 	vldr	d6, [pc, #420]	; 8001928 <cinematicaInversa+0xea8>
 8001784:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001788:	ed9f 6b71 	vldr	d6, [pc, #452]	; 8001950 <cinematicaInversa+0xed0>
 800178c:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001790:	ed97 7b02 	vldr	d7, [r7, #8]
 8001794:	ed9f 5b66 	vldr	d5, [pc, #408]	; 8001930 <cinematicaInversa+0xeb0>
 8001798:	ee37 7b05 	vadd.f64	d7, d7, d5
 800179c:	ee37 7b07 	vadd.f64	d7, d7, d7
 80017a0:	ee36 7b47 	vsub.f64	d7, d6, d7
 80017a4:	ed9f 6b5c 	vldr	d6, [pc, #368]	; 8001918 <cinematicaInversa+0xe98>
 80017a8:	ee37 7b06 	vadd.f64	d7, d7, d6
 80017ac:	ed9f 6b5c 	vldr	d6, [pc, #368]	; 8001920 <cinematicaInversa+0xea0>
 80017b0:	ee37 5b06 	vadd.f64	d5, d7, d6
 80017b4:	ed97 7b04 	vldr	d7, [r7, #16]
 80017b8:	ee37 7b07 	vadd.f64	d7, d7, d7
 80017bc:	ee85 6b07 	vdiv.f64	d6, d5, d7
 80017c0:	4b6d      	ldr	r3, [pc, #436]	; (8001978 <cinematicaInversa+0xef8>)
 80017c2:	ed93 7b00 	vldr	d7, [r3]
 80017c6:	ee26 8b07 	vmul.f64	d8, d6, d7
 80017ca:	ed97 7b00 	vldr	d7, [r7]
 80017ce:	ed9f 6b56 	vldr	d6, [pc, #344]	; 8001928 <cinematicaInversa+0xea8>
 80017d2:	ee37 7b46 	vsub.f64	d7, d7, d6
 80017d6:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 80017da:	eeb0 0b47 	vmov.f64	d0, d7
 80017de:	f010 fa33 	bl	8011c48 <pow>
 80017e2:	eeb0 9b40 	vmov.f64	d9, d0
 80017e6:	ed97 7b02 	vldr	d7, [r7, #8]
 80017ea:	ed9f 6b51 	vldr	d6, [pc, #324]	; 8001930 <cinematicaInversa+0xeb0>
 80017ee:	ee37 7b06 	vadd.f64	d7, d7, d6
 80017f2:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 80017f6:	eeb0 0b47 	vmov.f64	d0, d7
 80017fa:	f010 fa25 	bl	8011c48 <pow>
 80017fe:	eeb0 7b40 	vmov.f64	d7, d0
 8001802:	ee39 9b07 	vadd.f64	d9, d9, d7
 8001806:	ed97 7b04 	vldr	d7, [r7, #16]
 800180a:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 800180e:	eeb0 0b47 	vmov.f64	d0, d7
 8001812:	f010 fa19 	bl	8011c48 <pow>
 8001816:	eeb0 7b40 	vmov.f64	d7, d0
 800181a:	ee39 7b07 	vadd.f64	d7, d9, d7
 800181e:	ed9f 6b46 	vldr	d6, [pc, #280]	; 8001938 <cinematicaInversa+0xeb8>
 8001822:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001826:	ed9f 6b46 	vldr	d6, [pc, #280]	; 8001940 <cinematicaInversa+0xec0>
 800182a:	ee37 7b46 	vsub.f64	d7, d7, d6
 800182e:	ed9f 6b46 	vldr	d6, [pc, #280]	; 8001948 <cinematicaInversa+0xec8>
 8001832:	ee37 5b06 	vadd.f64	d5, d7, d6
 8001836:	ed97 7b04 	vldr	d7, [r7, #16]
 800183a:	ee37 6b07 	vadd.f64	d6, d7, d7
 800183e:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8001842:	ee38 7b07 	vadd.f64	d7, d8, d7
 8001846:	4b4d      	ldr	r3, [pc, #308]	; (800197c <cinematicaInversa+0xefc>)
 8001848:	ed83 7b00 	vstr	d7, [r3]

	titha1 = -1.0 * asin(ZJ1_1 / L1);
 800184c:	4b4c      	ldr	r3, [pc, #304]	; (8001980 <cinematicaInversa+0xf00>)
 800184e:	ed93 7b00 	vldr	d7, [r3]
 8001852:	ed9f 5b41 	vldr	d5, [pc, #260]	; 8001958 <cinematicaInversa+0xed8>
 8001856:	ee87 6b05 	vdiv.f64	d6, d7, d5
 800185a:	eeb0 0b46 	vmov.f64	d0, d6
 800185e:	f010 fc45 	bl	80120ec <asin>
 8001862:	eeb0 7b40 	vmov.f64	d7, d0
 8001866:	eeb1 7b47 	vneg.f64	d7, d7
 800186a:	4b46      	ldr	r3, [pc, #280]	; (8001984 <cinematicaInversa+0xf04>)
 800186c:	ed83 7b00 	vstr	d7, [r3]
	titha1 = titha1 * RAD_TO_DEG;
 8001870:	4b44      	ldr	r3, [pc, #272]	; (8001984 <cinematicaInversa+0xf04>)
 8001872:	ed93 7b00 	vldr	d7, [r3]
 8001876:	ed9f 6b3a 	vldr	d6, [pc, #232]	; 8001960 <cinematicaInversa+0xee0>
 800187a:	ee27 6b06 	vmul.f64	d6, d7, d6
 800187e:	ed9f 5b3a 	vldr	d5, [pc, #232]	; 8001968 <cinematicaInversa+0xee8>
 8001882:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001886:	4b3f      	ldr	r3, [pc, #252]	; (8001984 <cinematicaInversa+0xf04>)
 8001888:	ed83 7b00 	vstr	d7, [r3]
	titha2 = -1.0 * asin(ZJ2_1 / L1);
 800188c:	4b3e      	ldr	r3, [pc, #248]	; (8001988 <cinematicaInversa+0xf08>)
 800188e:	ed93 7b00 	vldr	d7, [r3]
 8001892:	ed9f 5b31 	vldr	d5, [pc, #196]	; 8001958 <cinematicaInversa+0xed8>
 8001896:	ee87 6b05 	vdiv.f64	d6, d7, d5
 800189a:	eeb0 0b46 	vmov.f64	d0, d6
 800189e:	f010 fc25 	bl	80120ec <asin>
 80018a2:	eeb0 7b40 	vmov.f64	d7, d0
 80018a6:	eeb1 7b47 	vneg.f64	d7, d7
 80018aa:	4b38      	ldr	r3, [pc, #224]	; (800198c <cinematicaInversa+0xf0c>)
 80018ac:	ed83 7b00 	vstr	d7, [r3]
	titha2 = titha2 * RAD_TO_DEG;
 80018b0:	4b36      	ldr	r3, [pc, #216]	; (800198c <cinematicaInversa+0xf0c>)
 80018b2:	ed93 7b00 	vldr	d7, [r3]
 80018b6:	ed9f 6b2a 	vldr	d6, [pc, #168]	; 8001960 <cinematicaInversa+0xee0>
 80018ba:	ee27 6b06 	vmul.f64	d6, d7, d6
 80018be:	ed9f 5b2a 	vldr	d5, [pc, #168]	; 8001968 <cinematicaInversa+0xee8>
 80018c2:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80018c6:	4b31      	ldr	r3, [pc, #196]	; (800198c <cinematicaInversa+0xf0c>)
 80018c8:	ed83 7b00 	vstr	d7, [r3]
	titha3 = -1.0 * asin(ZJ3_1 / L1);
 80018cc:	4b29      	ldr	r3, [pc, #164]	; (8001974 <cinematicaInversa+0xef4>)
 80018ce:	ed93 7b00 	vldr	d7, [r3]
 80018d2:	ed9f 5b21 	vldr	d5, [pc, #132]	; 8001958 <cinematicaInversa+0xed8>
 80018d6:	ee87 6b05 	vdiv.f64	d6, d7, d5
 80018da:	eeb0 0b46 	vmov.f64	d0, d6
 80018de:	f010 fc05 	bl	80120ec <asin>
 80018e2:	eeb0 7b40 	vmov.f64	d7, d0
 80018e6:	eeb1 7b47 	vneg.f64	d7, d7
 80018ea:	4b29      	ldr	r3, [pc, #164]	; (8001990 <cinematicaInversa+0xf10>)
 80018ec:	ed83 7b00 	vstr	d7, [r3]
	titha3 = titha3 * RAD_TO_DEG;
 80018f0:	4b27      	ldr	r3, [pc, #156]	; (8001990 <cinematicaInversa+0xf10>)
 80018f2:	ed93 7b00 	vldr	d7, [r3]
 80018f6:	ed9f 6b1a 	vldr	d6, [pc, #104]	; 8001960 <cinematicaInversa+0xee0>
 80018fa:	ee27 6b06 	vmul.f64	d6, d7, d6
 80018fe:	ed9f 5b1a 	vldr	d5, [pc, #104]	; 8001968 <cinematicaInversa+0xee8>
 8001902:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001906:	4b22      	ldr	r3, [pc, #136]	; (8001990 <cinematicaInversa+0xf10>)
 8001908:	ed83 7b00 	vstr	d7, [r3]
}
 800190c:	bf00      	nop
 800190e:	3718      	adds	r7, #24
 8001910:	46bd      	mov	sp, r7
 8001912:	ecbd 8b04 	vpop	{d8-d9}
 8001916:	bd80      	pop	{r7, pc}
 8001918:	9ba5e356 	.word	0x9ba5e356
 800191c:	3fe020c4 	.word	0x3fe020c4
 8001920:	24dd2f1b 	.word	0x24dd2f1b
 8001924:	3fc58106 	.word	0x3fc58106
 8001928:	5625749b 	.word	0x5625749b
 800192c:	3faf09d1 	.word	0x3faf09d1
 8001930:	1eb851ec 	.word	0x1eb851ec
 8001934:	3fa1eb85 	.word	0x3fa1eb85
 8001938:	70a3d70a 	.word	0x70a3d70a
 800193c:	3fd70a3d 	.word	0x3fd70a3d
 8001940:	93d96639 	.word	0x93d96639
 8001944:	3f9ce6c0 	.word	0x3f9ce6c0
 8001948:	47ae147c 	.word	0x47ae147c
 800194c:	3fc47ae1 	.word	0x3fc47ae1
 8001950:	e8584caa 	.word	0xe8584caa
 8001954:	400bb67a 	.word	0x400bb67a
 8001958:	9999999a 	.word	0x9999999a
 800195c:	3fd99999 	.word	0x3fd99999
 8001960:	00000000 	.word	0x00000000
 8001964:	40668000 	.word	0x40668000
 8001968:	54442eea 	.word	0x54442eea
 800196c:	400921fb 	.word	0x400921fb
 8001970:	24000360 	.word	0x24000360
 8001974:	24000370 	.word	0x24000370
 8001978:	24000368 	.word	0x24000368
 800197c:	24000378 	.word	0x24000378
 8001980:	240002e0 	.word	0x240002e0
 8001984:	240003c0 	.word	0x240003c0
 8001988:	24000328 	.word	0x24000328
 800198c:	240003c8 	.word	0x240003c8
 8001990:	240003d0 	.word	0x240003d0

08001994 <MX_GPIO_Init>:
     PH1-OSC_OUT (PH1)   ------> RCC_OSC_OUT
     PA13 (JTMS/SWDIO)   ------> DEBUG_JTMS-SWDIO
     PA14 (JTCK/SWCLK)   ------> DEBUG_JTCK-SWCLK
*/
void MX_GPIO_Init(void)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	b08c      	sub	sp, #48	; 0x30
 8001998:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800199a:	f107 031c 	add.w	r3, r7, #28
 800199e:	2200      	movs	r2, #0
 80019a0:	601a      	str	r2, [r3, #0]
 80019a2:	605a      	str	r2, [r3, #4]
 80019a4:	609a      	str	r2, [r3, #8]
 80019a6:	60da      	str	r2, [r3, #12]
 80019a8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80019aa:	4b74      	ldr	r3, [pc, #464]	; (8001b7c <MX_GPIO_Init+0x1e8>)
 80019ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80019b0:	4a72      	ldr	r2, [pc, #456]	; (8001b7c <MX_GPIO_Init+0x1e8>)
 80019b2:	f043 0310 	orr.w	r3, r3, #16
 80019b6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80019ba:	4b70      	ldr	r3, [pc, #448]	; (8001b7c <MX_GPIO_Init+0x1e8>)
 80019bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80019c0:	f003 0310 	and.w	r3, r3, #16
 80019c4:	61bb      	str	r3, [r7, #24]
 80019c6:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80019c8:	4b6c      	ldr	r3, [pc, #432]	; (8001b7c <MX_GPIO_Init+0x1e8>)
 80019ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80019ce:	4a6b      	ldr	r2, [pc, #428]	; (8001b7c <MX_GPIO_Init+0x1e8>)
 80019d0:	f043 0304 	orr.w	r3, r3, #4
 80019d4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80019d8:	4b68      	ldr	r3, [pc, #416]	; (8001b7c <MX_GPIO_Init+0x1e8>)
 80019da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80019de:	f003 0304 	and.w	r3, r3, #4
 80019e2:	617b      	str	r3, [r7, #20]
 80019e4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80019e6:	4b65      	ldr	r3, [pc, #404]	; (8001b7c <MX_GPIO_Init+0x1e8>)
 80019e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80019ec:	4a63      	ldr	r2, [pc, #396]	; (8001b7c <MX_GPIO_Init+0x1e8>)
 80019ee:	f043 0320 	orr.w	r3, r3, #32
 80019f2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80019f6:	4b61      	ldr	r3, [pc, #388]	; (8001b7c <MX_GPIO_Init+0x1e8>)
 80019f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80019fc:	f003 0320 	and.w	r3, r3, #32
 8001a00:	613b      	str	r3, [r7, #16]
 8001a02:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001a04:	4b5d      	ldr	r3, [pc, #372]	; (8001b7c <MX_GPIO_Init+0x1e8>)
 8001a06:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a0a:	4a5c      	ldr	r2, [pc, #368]	; (8001b7c <MX_GPIO_Init+0x1e8>)
 8001a0c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001a10:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001a14:	4b59      	ldr	r3, [pc, #356]	; (8001b7c <MX_GPIO_Init+0x1e8>)
 8001a16:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a1e:	60fb      	str	r3, [r7, #12]
 8001a20:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a22:	4b56      	ldr	r3, [pc, #344]	; (8001b7c <MX_GPIO_Init+0x1e8>)
 8001a24:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a28:	4a54      	ldr	r2, [pc, #336]	; (8001b7c <MX_GPIO_Init+0x1e8>)
 8001a2a:	f043 0301 	orr.w	r3, r3, #1
 8001a2e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001a32:	4b52      	ldr	r3, [pc, #328]	; (8001b7c <MX_GPIO_Init+0x1e8>)
 8001a34:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a38:	f003 0301 	and.w	r3, r3, #1
 8001a3c:	60bb      	str	r3, [r7, #8]
 8001a3e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a40:	4b4e      	ldr	r3, [pc, #312]	; (8001b7c <MX_GPIO_Init+0x1e8>)
 8001a42:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a46:	4a4d      	ldr	r2, [pc, #308]	; (8001b7c <MX_GPIO_Init+0x1e8>)
 8001a48:	f043 0302 	orr.w	r3, r3, #2
 8001a4c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001a50:	4b4a      	ldr	r3, [pc, #296]	; (8001b7c <MX_GPIO_Init+0x1e8>)
 8001a52:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a56:	f003 0302 	and.w	r3, r3, #2
 8001a5a:	607b      	str	r3, [r7, #4]
 8001a5c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001a5e:	4b47      	ldr	r3, [pc, #284]	; (8001b7c <MX_GPIO_Init+0x1e8>)
 8001a60:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a64:	4a45      	ldr	r2, [pc, #276]	; (8001b7c <MX_GPIO_Init+0x1e8>)
 8001a66:	f043 0308 	orr.w	r3, r3, #8
 8001a6a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001a6e:	4b43      	ldr	r3, [pc, #268]	; (8001b7c <MX_GPIO_Init+0x1e8>)
 8001a70:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a74:	f003 0308 	and.w	r3, r3, #8
 8001a78:	603b      	str	r3, [r7, #0]
 8001a7a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, S_DirPaP1_Pin|S_DirPaP2_Pin|S_DirPaP3_Pin, GPIO_PIN_RESET);
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8001a82:	483f      	ldr	r0, [pc, #252]	; (8001b80 <MX_GPIO_Init+0x1ec>)
 8001a84:	f006 fb2a 	bl	80080dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, S_Enable_1_Pin|S_Enable_2_Pin|S_Enable_3_Pin, GPIO_PIN_SET);
 8001a88:	2201      	movs	r2, #1
 8001a8a:	2170      	movs	r1, #112	; 0x70
 8001a8c:	483d      	ldr	r0, [pc, #244]	; (8001b84 <MX_GPIO_Init+0x1f0>)
 8001a8e:	f006 fb25 	bl	80080dc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin
                           PEPin PEPin */
  GPIO_InitStruct.Pin = E_EndStop2_Sup_Pin|E_EndStop2_Inf_Pin|E_EndStop3_Sup_Pin|E_EndStop3_Inf_Pin
 8001a92:	233f      	movs	r3, #63	; 0x3f
 8001a94:	61fb      	str	r3, [r7, #28]
                          |E_EndStop1_Sup_Pin|E_EndStop1_Inf_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001a96:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001a9a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001a9c:	2301      	movs	r3, #1
 8001a9e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001aa0:	f107 031c 	add.w	r3, r7, #28
 8001aa4:	4619      	mov	r1, r3
 8001aa6:	4838      	ldr	r0, [pc, #224]	; (8001b88 <MX_GPIO_Init+0x1f4>)
 8001aa8:	f006 f950 	bl	8007d4c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BUTTON_Pin;
 8001aac:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001ab0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001ab2:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001ab6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001ab8:	2302      	movs	r3, #2
 8001aba:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BUTTON_GPIO_Port, &GPIO_InitStruct);
 8001abc:	f107 031c 	add.w	r3, r7, #28
 8001ac0:	4619      	mov	r1, r3
 8001ac2:	482f      	ldr	r0, [pc, #188]	; (8001b80 <MX_GPIO_Init+0x1ec>)
 8001ac4:	f006 f942 	bl	8007d4c <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = S_DirPaP1_Pin|S_DirPaP2_Pin|S_DirPaP3_Pin;
 8001ac8:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8001acc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ace:	2301      	movs	r3, #1
 8001ad0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001ad2:	2301      	movs	r3, #1
 8001ad4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ada:	f107 031c 	add.w	r3, r7, #28
 8001ade:	4619      	mov	r1, r3
 8001ae0:	4827      	ldr	r0, [pc, #156]	; (8001b80 <MX_GPIO_Init+0x1ec>)
 8001ae2:	f006 f933 	bl	8007d4c <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = S_Enable_1_Pin|S_Enable_2_Pin|S_Enable_3_Pin;
 8001ae6:	2370      	movs	r3, #112	; 0x70
 8001ae8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001aea:	2301      	movs	r3, #1
 8001aec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001aee:	2301      	movs	r3, #1
 8001af0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001af2:	2300      	movs	r3, #0
 8001af4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001af6:	f107 031c 	add.w	r3, r7, #28
 8001afa:	4619      	mov	r1, r3
 8001afc:	4821      	ldr	r0, [pc, #132]	; (8001b84 <MX_GPIO_Init+0x1f0>)
 8001afe:	f006 f925 	bl	8007d4c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 1, 0);
 8001b02:	2200      	movs	r2, #0
 8001b04:	2101      	movs	r1, #1
 8001b06:	2006      	movs	r0, #6
 8001b08:	f005 fb79 	bl	80071fe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001b0c:	2006      	movs	r0, #6
 8001b0e:	f005 fb90 	bl	8007232 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 1, 0);
 8001b12:	2200      	movs	r2, #0
 8001b14:	2101      	movs	r1, #1
 8001b16:	2007      	movs	r0, #7
 8001b18:	f005 fb71 	bl	80071fe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8001b1c:	2007      	movs	r0, #7
 8001b1e:	f005 fb88 	bl	8007232 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 1, 0);
 8001b22:	2200      	movs	r2, #0
 8001b24:	2101      	movs	r1, #1
 8001b26:	2008      	movs	r0, #8
 8001b28:	f005 fb69 	bl	80071fe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8001b2c:	2008      	movs	r0, #8
 8001b2e:	f005 fb80 	bl	8007232 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 1, 0);
 8001b32:	2200      	movs	r2, #0
 8001b34:	2101      	movs	r1, #1
 8001b36:	2009      	movs	r0, #9
 8001b38:	f005 fb61 	bl	80071fe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8001b3c:	2009      	movs	r0, #9
 8001b3e:	f005 fb78 	bl	8007232 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 1, 0);
 8001b42:	2200      	movs	r2, #0
 8001b44:	2101      	movs	r1, #1
 8001b46:	200a      	movs	r0, #10
 8001b48:	f005 fb59 	bl	80071fe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8001b4c:	200a      	movs	r0, #10
 8001b4e:	f005 fb70 	bl	8007232 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 1, 0);
 8001b52:	2200      	movs	r2, #0
 8001b54:	2101      	movs	r1, #1
 8001b56:	2017      	movs	r0, #23
 8001b58:	f005 fb51 	bl	80071fe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001b5c:	2017      	movs	r0, #23
 8001b5e:	f005 fb68 	bl	8007232 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 2, 0);
 8001b62:	2200      	movs	r2, #0
 8001b64:	2102      	movs	r1, #2
 8001b66:	2028      	movs	r0, #40	; 0x28
 8001b68:	f005 fb49 	bl	80071fe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001b6c:	2028      	movs	r0, #40	; 0x28
 8001b6e:	f005 fb60 	bl	8007232 <HAL_NVIC_EnableIRQ>

}
 8001b72:	bf00      	nop
 8001b74:	3730      	adds	r7, #48	; 0x30
 8001b76:	46bd      	mov	sp, r7
 8001b78:	bd80      	pop	{r7, pc}
 8001b7a:	bf00      	nop
 8001b7c:	58024400 	.word	0x58024400
 8001b80:	58020800 	.word	0x58020800
 8001b84:	58020c00 	.word	0x58020c00
 8001b88:	58021000 	.word	0x58021000
 8001b8c:	00000000 	.word	0x00000000

08001b90 <homingAprox>:
//#define ES1s_PRESSED !(HAL_GPIO_ReadPin(E_EndStop1_Sup_GPIO_Port, E_EndStop1_Sup_Pin))
//#define ES2s_PRESSED !(HAL_GPIO_ReadPin(E_EndStop2_Sup_GPIO_Port, E_EndStop3_Sup_Pin))
//#define ES3s_PRESSED !(HAL_GPIO_ReadPin(E_EndStop3_Sup_GPIO_Port, E_EndStop2_Sup_Pin))


void homingAprox(void) {
 8001b90:	b580      	push	{r7, lr}
 8001b92:	b082      	sub	sp, #8
 8001b94:	af00      	add	r7, sp, #0
	homeOk = 0;
 8001b96:	4b22      	ldr	r3, [pc, #136]	; (8001c20 <homingAprox+0x90>)
 8001b98:	2200      	movs	r2, #0
 8001b9a:	701a      	strb	r2, [r3, #0]
	HAL_TIM_IC_Stop_IT(&htim2, TIM_CHANNEL_1);//Apago interrupcion input capture motor 1
 8001b9c:	2100      	movs	r1, #0
 8001b9e:	4821      	ldr	r0, [pc, #132]	; (8001c24 <homingAprox+0x94>)
 8001ba0:	f009 fb7a 	bl	800b298 <HAL_TIM_IC_Stop_IT>
	HAL_TIM_IC_Stop_IT(&htim3, TIM_CHANNEL_1);//Apago interrupcion input capture motor 2
 8001ba4:	2100      	movs	r1, #0
 8001ba6:	4820      	ldr	r0, [pc, #128]	; (8001c28 <homingAprox+0x98>)
 8001ba8:	f009 fb76 	bl	800b298 <HAL_TIM_IC_Stop_IT>
	HAL_TIM_IC_Stop_IT(&htim4, TIM_CHANNEL_1);//Apago interrupcion input capture motor 3
 8001bac:	2100      	movs	r1, #0
 8001bae:	481f      	ldr	r0, [pc, #124]	; (8001c2c <homingAprox+0x9c>)
 8001bb0:	f009 fb72 	bl	800b298 <HAL_TIM_IC_Stop_IT>
	HAL_NVIC_DisableIRQ(EXTI0_IRQn);	//Apago interrupcion EndStop 1 Superior
 8001bb4:	2006      	movs	r0, #6
 8001bb6:	f005 fb4a 	bl	800724e <HAL_NVIC_DisableIRQ>
	HAL_NVIC_DisableIRQ(EXTI1_IRQn);	//Apago interrupcion EndStop 1 Inferior
 8001bba:	2007      	movs	r0, #7
 8001bbc:	f005 fb47 	bl	800724e <HAL_NVIC_DisableIRQ>
	HAL_NVIC_DisableIRQ(EXTI2_IRQn);	//Apago interrupcion EndStop 2 Superior
 8001bc0:	2008      	movs	r0, #8
 8001bc2:	f005 fb44 	bl	800724e <HAL_NVIC_DisableIRQ>
	HAL_NVIC_DisableIRQ(EXTI3_IRQn);	//Apago interrupcion EndStop 2 Inferior
 8001bc6:	2009      	movs	r0, #9
 8001bc8:	f005 fb41 	bl	800724e <HAL_NVIC_DisableIRQ>
	HAL_NVIC_DisableIRQ(EXTI4_IRQn);	//Apago interrupcion EndStop 3 Superior
 8001bcc:	200a      	movs	r0, #10
 8001bce:	f005 fb3e 	bl	800724e <HAL_NVIC_DisableIRQ>
	HAL_NVIC_DisableIRQ(EXTI9_5_IRQn);	//Apago interrupcion EndStop 3 Inferior
 8001bd2:	2017      	movs	r0, #23
 8001bd4:	f005 fb3b 	bl	800724e <HAL_NVIC_DisableIRQ>

	//Las tres piernas se mueven hacia arriba
	HAL_GPIO_WritePin(S_DirPaP1_GPIO_Port, S_DirPaP1_Pin, GPIO_PIN_RESET);//Set direccion con la misma convencion que motor.c
 8001bd8:	2200      	movs	r2, #0
 8001bda:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001bde:	4814      	ldr	r0, [pc, #80]	; (8001c30 <homingAprox+0xa0>)
 8001be0:	f006 fa7c 	bl	80080dc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S_DirPaP2_GPIO_Port, S_DirPaP2_Pin, GPIO_PIN_RESET);
 8001be4:	2200      	movs	r2, #0
 8001be6:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001bea:	4811      	ldr	r0, [pc, #68]	; (8001c30 <homingAprox+0xa0>)
 8001bec:	f006 fa76 	bl	80080dc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S_DirPaP3_GPIO_Port, S_DirPaP3_Pin, GPIO_PIN_RESET);
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001bf6:	480e      	ldr	r0, [pc, #56]	; (8001c30 <homingAprox+0xa0>)
 8001bf8:	f006 fa70 	bl	80080dc <HAL_GPIO_WritePin>
	HAL_Delay(20);
 8001bfc:	2014      	movs	r0, #20
 8001bfe:	f005 f9cf 	bl	8006fa0 <HAL_Delay>
	rpm = 0.1;
 8001c02:	490c      	ldr	r1, [pc, #48]	; (8001c34 <homingAprox+0xa4>)
 8001c04:	a304      	add	r3, pc, #16	; (adr r3, 8001c18 <homingAprox+0x88>)
 8001c06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c0a:	e9c1 2300 	strd	r2, r3, [r1]
	uint32_t hom = 0;
 8001c0e:	2300      	movs	r3, #0
 8001c10:	607b      	str	r3, [r7, #4]


	while (homeOk == 0) {
 8001c12:	e177      	b.n	8001f04 <homingAprox+0x374>
 8001c14:	f3af 8000 	nop.w
 8001c18:	9999999a 	.word	0x9999999a
 8001c1c:	3fb99999 	.word	0x3fb99999
 8001c20:	24000380 	.word	0x24000380
 8001c24:	240005d4 	.word	0x240005d4
 8001c28:	24000620 	.word	0x24000620
 8001c2c:	2400066c 	.word	0x2400066c
 8001c30:	58020800 	.word	0x58020800
 8001c34:	24000388 	.word	0x24000388
		if(rpm<=4){
 8001c38:	4bc1      	ldr	r3, [pc, #772]	; (8001f40 <homingAprox+0x3b0>)
 8001c3a:	ed93 7b00 	vldr	d7, [r3]
 8001c3e:	eeb1 6b00 	vmov.f64	d6, #16	; 0x40800000  4.0
 8001c42:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8001c46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c4a:	d809      	bhi.n	8001c60 <homingAprox+0xd0>
			rpm = rpm + 0.001;
 8001c4c:	4bbc      	ldr	r3, [pc, #752]	; (8001f40 <homingAprox+0x3b0>)
 8001c4e:	ed93 7b00 	vldr	d7, [r3]
 8001c52:	ed9f 6bb5 	vldr	d6, [pc, #724]	; 8001f28 <homingAprox+0x398>
 8001c56:	ee37 7b06 	vadd.f64	d7, d7, d6
 8001c5a:	4bb9      	ldr	r3, [pc, #740]	; (8001f40 <homingAprox+0x3b0>)
 8001c5c:	ed83 7b00 	vstr	d7, [r3]



		//TIM12->CNT=0;

		periodoM[0]=(uint32_t)(((FCL * 60.0) / (rpm * ((double)(TIM12->PSC) + 1.0) * 9600.0)) - 1.0);
 8001c60:	4bb8      	ldr	r3, [pc, #736]	; (8001f44 <homingAprox+0x3b4>)
 8001c62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c64:	ee07 3a90 	vmov	s15, r3
 8001c68:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8001c6c:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8001c70:	ee37 6b06 	vadd.f64	d6, d7, d6
 8001c74:	4bb2      	ldr	r3, [pc, #712]	; (8001f40 <homingAprox+0x3b0>)
 8001c76:	ed93 7b00 	vldr	d7, [r3]
 8001c7a:	ee26 7b07 	vmul.f64	d7, d6, d7
 8001c7e:	ed9f 6bac 	vldr	d6, [pc, #688]	; 8001f30 <homingAprox+0x3a0>
 8001c82:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001c86:	ed9f 5bac 	vldr	d5, [pc, #688]	; 8001f38 <homingAprox+0x3a8>
 8001c8a:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8001c8e:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8001c92:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001c96:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001c9a:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8001c9e:	4baa      	ldr	r3, [pc, #680]	; (8001f48 <homingAprox+0x3b8>)
 8001ca0:	ed83 7b00 	vstr	d7, [r3]
		periodoM[1]=(uint32_t)(((FCL * 60.0) / (rpm * ((double)(TIM13->PSC) + 1.0) * 9600.0)) - 1.0);
 8001ca4:	4ba9      	ldr	r3, [pc, #676]	; (8001f4c <homingAprox+0x3bc>)
 8001ca6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ca8:	ee07 3a90 	vmov	s15, r3
 8001cac:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8001cb0:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8001cb4:	ee37 6b06 	vadd.f64	d6, d7, d6
 8001cb8:	4ba1      	ldr	r3, [pc, #644]	; (8001f40 <homingAprox+0x3b0>)
 8001cba:	ed93 7b00 	vldr	d7, [r3]
 8001cbe:	ee26 7b07 	vmul.f64	d7, d6, d7
 8001cc2:	ed9f 6b9b 	vldr	d6, [pc, #620]	; 8001f30 <homingAprox+0x3a0>
 8001cc6:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001cca:	ed9f 5b9b 	vldr	d5, [pc, #620]	; 8001f38 <homingAprox+0x3a8>
 8001cce:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8001cd2:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8001cd6:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001cda:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001cde:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8001ce2:	4b99      	ldr	r3, [pc, #612]	; (8001f48 <homingAprox+0x3b8>)
 8001ce4:	ed83 7b02 	vstr	d7, [r3, #8]
		periodoM[2]=(uint32_t)(((FCL * 60.0) / (rpm * ((double)(TIM14->PSC) + 1.0) * 9600.0)) - 1.0);
 8001ce8:	4b99      	ldr	r3, [pc, #612]	; (8001f50 <homingAprox+0x3c0>)
 8001cea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cec:	ee07 3a90 	vmov	s15, r3
 8001cf0:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8001cf4:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8001cf8:	ee37 6b06 	vadd.f64	d6, d7, d6
 8001cfc:	4b90      	ldr	r3, [pc, #576]	; (8001f40 <homingAprox+0x3b0>)
 8001cfe:	ed93 7b00 	vldr	d7, [r3]
 8001d02:	ee26 7b07 	vmul.f64	d7, d6, d7
 8001d06:	ed9f 6b8a 	vldr	d6, [pc, #552]	; 8001f30 <homingAprox+0x3a0>
 8001d0a:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001d0e:	ed9f 5b8a 	vldr	d5, [pc, #552]	; 8001f38 <homingAprox+0x3a8>
 8001d12:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8001d16:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8001d1a:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001d1e:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001d22:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8001d26:	4b88      	ldr	r3, [pc, #544]	; (8001f48 <homingAprox+0x3b8>)
 8001d28:	ed83 7b04 	vstr	d7, [r3, #16]

		//PREGUNTAR
		if (TIM12->CNT > periodoM[0]) {
 8001d2c:	4b85      	ldr	r3, [pc, #532]	; (8001f44 <homingAprox+0x3b4>)
 8001d2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d30:	ee07 3a90 	vmov	s15, r3
 8001d34:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 8001d38:	4b83      	ldr	r3, [pc, #524]	; (8001f48 <homingAprox+0x3b8>)
 8001d3a:	ed93 7b00 	vldr	d7, [r3]
 8001d3e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8001d42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d46:	dd0c      	ble.n	8001d62 <homingAprox+0x1d2>
					TIM12->CNT = periodoM[0] - 1;// Reinicio clock solo si hace falta y a un valor cercano a la interrupcion, para que no haga ese paso de nuevo
 8001d48:	4b7f      	ldr	r3, [pc, #508]	; (8001f48 <homingAprox+0x3b8>)
 8001d4a:	ed93 7b00 	vldr	d7, [r3]
 8001d4e:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8001d52:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001d56:	4b7b      	ldr	r3, [pc, #492]	; (8001f44 <homingAprox+0x3b4>)
 8001d58:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001d5c:	ee17 2a90 	vmov	r2, s15
 8001d60:	625a      	str	r2, [r3, #36]	; 0x24
		}
		if (TIM13->CNT > periodoM[1]) {
 8001d62:	4b7a      	ldr	r3, [pc, #488]	; (8001f4c <homingAprox+0x3bc>)
 8001d64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d66:	ee07 3a90 	vmov	s15, r3
 8001d6a:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 8001d6e:	4b76      	ldr	r3, [pc, #472]	; (8001f48 <homingAprox+0x3b8>)
 8001d70:	ed93 7b02 	vldr	d7, [r3, #8]
 8001d74:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8001d78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d7c:	dd0c      	ble.n	8001d98 <homingAprox+0x208>
					TIM13->CNT = periodoM[1] - 1;// Reinicio clock solo si hace falta y a un valor cercano a la interrupcion, para que no haga ese paso de nuevo
 8001d7e:	4b72      	ldr	r3, [pc, #456]	; (8001f48 <homingAprox+0x3b8>)
 8001d80:	ed93 7b02 	vldr	d7, [r3, #8]
 8001d84:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8001d88:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001d8c:	4b6f      	ldr	r3, [pc, #444]	; (8001f4c <homingAprox+0x3bc>)
 8001d8e:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001d92:	ee17 2a90 	vmov	r2, s15
 8001d96:	625a      	str	r2, [r3, #36]	; 0x24
		}
		if (TIM14->CNT > periodoM[2]) {
 8001d98:	4b6d      	ldr	r3, [pc, #436]	; (8001f50 <homingAprox+0x3c0>)
 8001d9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d9c:	ee07 3a90 	vmov	s15, r3
 8001da0:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 8001da4:	4b68      	ldr	r3, [pc, #416]	; (8001f48 <homingAprox+0x3b8>)
 8001da6:	ed93 7b04 	vldr	d7, [r3, #16]
 8001daa:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8001dae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001db2:	dd0c      	ble.n	8001dce <homingAprox+0x23e>
					TIM14->CNT = periodoM[2] - 1;// Reinicio clock solo si hace falta y a un valor cercano a la interrupcion, para que no haga ese paso de nuevo
 8001db4:	4b64      	ldr	r3, [pc, #400]	; (8001f48 <homingAprox+0x3b8>)
 8001db6:	ed93 7b04 	vldr	d7, [r3, #16]
 8001dba:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8001dbe:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001dc2:	4b63      	ldr	r3, [pc, #396]	; (8001f50 <homingAprox+0x3c0>)
 8001dc4:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001dc8:	ee17 2a90 	vmov	r2, s15
 8001dcc:	625a      	str	r2, [r3, #36]	; 0x24
		}

		TIM12->ARR =periodoM[0];
 8001dce:	4b5e      	ldr	r3, [pc, #376]	; (8001f48 <homingAprox+0x3b8>)
 8001dd0:	ed93 7b00 	vldr	d7, [r3]
 8001dd4:	4b5b      	ldr	r3, [pc, #364]	; (8001f44 <homingAprox+0x3b4>)
 8001dd6:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001dda:	ee17 2a90 	vmov	r2, s15
 8001dde:	62da      	str	r2, [r3, #44]	; 0x2c
		TIM12->CCR1 = (uint32_t)((double)(TIM12->ARR) / 2.0);
 8001de0:	4b58      	ldr	r3, [pc, #352]	; (8001f44 <homingAprox+0x3b4>)
 8001de2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001de4:	ee07 3a90 	vmov	s15, r3
 8001de8:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 8001dec:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8001df0:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001df4:	4b53      	ldr	r3, [pc, #332]	; (8001f44 <homingAprox+0x3b4>)
 8001df6:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001dfa:	ee17 2a90 	vmov	r2, s15
 8001dfe:	635a      	str	r2, [r3, #52]	; 0x34
		TIM13->ARR =periodoM[1];
 8001e00:	4b51      	ldr	r3, [pc, #324]	; (8001f48 <homingAprox+0x3b8>)
 8001e02:	ed93 7b02 	vldr	d7, [r3, #8]
 8001e06:	4b51      	ldr	r3, [pc, #324]	; (8001f4c <homingAprox+0x3bc>)
 8001e08:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001e0c:	ee17 2a90 	vmov	r2, s15
 8001e10:	62da      	str	r2, [r3, #44]	; 0x2c
		TIM13->CCR1 = (uint32_t)((double)(TIM13->ARR) / 2.0);
 8001e12:	4b4e      	ldr	r3, [pc, #312]	; (8001f4c <homingAprox+0x3bc>)
 8001e14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e16:	ee07 3a90 	vmov	s15, r3
 8001e1a:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 8001e1e:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8001e22:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001e26:	4b49      	ldr	r3, [pc, #292]	; (8001f4c <homingAprox+0x3bc>)
 8001e28:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001e2c:	ee17 2a90 	vmov	r2, s15
 8001e30:	635a      	str	r2, [r3, #52]	; 0x34
		TIM14->ARR =periodoM[2];
 8001e32:	4b45      	ldr	r3, [pc, #276]	; (8001f48 <homingAprox+0x3b8>)
 8001e34:	ed93 7b04 	vldr	d7, [r3, #16]
 8001e38:	4b45      	ldr	r3, [pc, #276]	; (8001f50 <homingAprox+0x3c0>)
 8001e3a:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001e3e:	ee17 2a90 	vmov	r2, s15
 8001e42:	62da      	str	r2, [r3, #44]	; 0x2c
		TIM14->CCR1 = (uint32_t)((double)(TIM14->ARR) / 2.0);
 8001e44:	4b42      	ldr	r3, [pc, #264]	; (8001f50 <homingAprox+0x3c0>)
 8001e46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e48:	ee07 3a90 	vmov	s15, r3
 8001e4c:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 8001e50:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8001e54:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001e58:	4b3d      	ldr	r3, [pc, #244]	; (8001f50 <homingAprox+0x3c0>)
 8001e5a:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001e5e:	ee17 2a90 	vmov	r2, s15
 8001e62:	635a      	str	r2, [r3, #52]	; 0x34


		if (!(HAL_GPIO_ReadPin(E_EndStop1_Sup_GPIO_Port, E_EndStop1_Sup_Pin)) || !(HAL_GPIO_ReadPin(E_EndStop2_Sup_GPIO_Port, E_EndStop2_Sup_Pin)) || !(HAL_GPIO_ReadPin(E_EndStop3_Sup_GPIO_Port, E_EndStop3_Sup_Pin))) {
 8001e64:	2101      	movs	r1, #1
 8001e66:	483b      	ldr	r0, [pc, #236]	; (8001f54 <homingAprox+0x3c4>)
 8001e68:	f006 f920 	bl	80080ac <HAL_GPIO_ReadPin>
 8001e6c:	4603      	mov	r3, r0
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d00d      	beq.n	8001e8e <homingAprox+0x2fe>
 8001e72:	2104      	movs	r1, #4
 8001e74:	4837      	ldr	r0, [pc, #220]	; (8001f54 <homingAprox+0x3c4>)
 8001e76:	f006 f919 	bl	80080ac <HAL_GPIO_ReadPin>
 8001e7a:	4603      	mov	r3, r0
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d006      	beq.n	8001e8e <homingAprox+0x2fe>
 8001e80:	2110      	movs	r1, #16
 8001e82:	4834      	ldr	r0, [pc, #208]	; (8001f54 <homingAprox+0x3c4>)
 8001e84:	f006 f912 	bl	80080ac <HAL_GPIO_ReadPin>
 8001e88:	4603      	mov	r3, r0
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d126      	bne.n	8001edc <homingAprox+0x34c>
			HAL_Delay(30);
 8001e8e:	201e      	movs	r0, #30
 8001e90:	f005 f886 	bl	8006fa0 <HAL_Delay>
			if (!(HAL_GPIO_ReadPin(E_EndStop1_Sup_GPIO_Port, E_EndStop1_Sup_Pin)) || !(HAL_GPIO_ReadPin(E_EndStop2_Sup_GPIO_Port, E_EndStop2_Sup_Pin)) || !(HAL_GPIO_ReadPin(E_EndStop3_Sup_GPIO_Port, E_EndStop3_Sup_Pin))) {
 8001e94:	2101      	movs	r1, #1
 8001e96:	482f      	ldr	r0, [pc, #188]	; (8001f54 <homingAprox+0x3c4>)
 8001e98:	f006 f908 	bl	80080ac <HAL_GPIO_ReadPin>
 8001e9c:	4603      	mov	r3, r0
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d00d      	beq.n	8001ebe <homingAprox+0x32e>
 8001ea2:	2104      	movs	r1, #4
 8001ea4:	482b      	ldr	r0, [pc, #172]	; (8001f54 <homingAprox+0x3c4>)
 8001ea6:	f006 f901 	bl	80080ac <HAL_GPIO_ReadPin>
 8001eaa:	4603      	mov	r3, r0
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d006      	beq.n	8001ebe <homingAprox+0x32e>
 8001eb0:	2110      	movs	r1, #16
 8001eb2:	4828      	ldr	r0, [pc, #160]	; (8001f54 <homingAprox+0x3c4>)
 8001eb4:	f006 f8fa 	bl	80080ac <HAL_GPIO_ReadPin>
 8001eb8:	4603      	mov	r3, r0
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d10e      	bne.n	8001edc <homingAprox+0x34c>
				HAL_TIM_PWM_Stop(&htim12, TIM_CHANNEL_1);
 8001ebe:	2100      	movs	r1, #0
 8001ec0:	4825      	ldr	r0, [pc, #148]	; (8001f58 <homingAprox+0x3c8>)
 8001ec2:	f008 ffa1 	bl	800ae08 <HAL_TIM_PWM_Stop>
				HAL_TIM_PWM_Stop(&htim13, TIM_CHANNEL_1);
 8001ec6:	2100      	movs	r1, #0
 8001ec8:	4824      	ldr	r0, [pc, #144]	; (8001f5c <homingAprox+0x3cc>)
 8001eca:	f008 ff9d 	bl	800ae08 <HAL_TIM_PWM_Stop>
				HAL_TIM_PWM_Stop(&htim14, TIM_CHANNEL_1);
 8001ece:	2100      	movs	r1, #0
 8001ed0:	4823      	ldr	r0, [pc, #140]	; (8001f60 <homingAprox+0x3d0>)
 8001ed2:	f008 ff99 	bl	800ae08 <HAL_TIM_PWM_Stop>
				//HAL_UART_Transmit(&huart3,homeOk, sizeof(homeOk), 100);
				homeOk = 1;
 8001ed6:	4b23      	ldr	r3, [pc, #140]	; (8001f64 <homingAprox+0x3d4>)
 8001ed8:	2201      	movs	r2, #1
 8001eda:	701a      	strb	r2, [r3, #0]
				//HAL_UART_Transmit(&huart3,homeOk, sizeof(homeOk), 100);
			}
		}
		if(hom==0){
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d10d      	bne.n	8001efe <homingAprox+0x36e>
			hom=1;
 8001ee2:	2301      	movs	r3, #1
 8001ee4:	607b      	str	r3, [r7, #4]
			//HAL_UART_Transmit(&huart3,(uint8_t *)"hola k ace\n\r", 12, 100);
			HAL_TIM_PWM_Start(&htim12, TIM_CHANNEL_1);
 8001ee6:	2100      	movs	r1, #0
 8001ee8:	481b      	ldr	r0, [pc, #108]	; (8001f58 <homingAprox+0x3c8>)
 8001eea:	f008 fe7f 	bl	800abec <HAL_TIM_PWM_Start>
			HAL_TIM_PWM_Start(&htim13, TIM_CHANNEL_1);
 8001eee:	2100      	movs	r1, #0
 8001ef0:	481a      	ldr	r0, [pc, #104]	; (8001f5c <homingAprox+0x3cc>)
 8001ef2:	f008 fe7b 	bl	800abec <HAL_TIM_PWM_Start>
			HAL_TIM_PWM_Start(&htim14, TIM_CHANNEL_1);
 8001ef6:	2100      	movs	r1, #0
 8001ef8:	4819      	ldr	r0, [pc, #100]	; (8001f60 <homingAprox+0x3d0>)
 8001efa:	f008 fe77 	bl	800abec <HAL_TIM_PWM_Start>
		}
		HAL_Delay(1);
 8001efe:	2001      	movs	r0, #1
 8001f00:	f005 f84e 	bl	8006fa0 <HAL_Delay>
	while (homeOk == 0) {
 8001f04:	4b17      	ldr	r3, [pc, #92]	; (8001f64 <homingAprox+0x3d4>)
 8001f06:	781b      	ldrb	r3, [r3, #0]
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	f43f ae95 	beq.w	8001c38 <homingAprox+0xa8>
	}
	HAL_UART_Transmit(&huart3,(uint8_t *)"F\n", 3, 100);
 8001f0e:	2364      	movs	r3, #100	; 0x64
 8001f10:	2203      	movs	r2, #3
 8001f12:	4915      	ldr	r1, [pc, #84]	; (8001f68 <homingAprox+0x3d8>)
 8001f14:	4815      	ldr	r0, [pc, #84]	; (8001f6c <homingAprox+0x3dc>)
 8001f16:	f00a fcbd 	bl	800c894 <HAL_UART_Transmit>
}
 8001f1a:	bf00      	nop
 8001f1c:	3708      	adds	r7, #8
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	bd80      	pop	{r7, pc}
 8001f22:	bf00      	nop
 8001f24:	f3af 8000 	nop.w
 8001f28:	d2f1a9fc 	.word	0xd2f1a9fc
 8001f2c:	3f50624d 	.word	0x3f50624d
 8001f30:	00000000 	.word	0x00000000
 8001f34:	40c2c000 	.word	0x40c2c000
 8001f38:	00000000 	.word	0x00000000
 8001f3c:	41ec9c38 	.word	0x41ec9c38
 8001f40:	24000388 	.word	0x24000388
 8001f44:	40001800 	.word	0x40001800
 8001f48:	24000500 	.word	0x24000500
 8001f4c:	40001c00 	.word	0x40001c00
 8001f50:	40002000 	.word	0x40002000
 8001f54:	58021000 	.word	0x58021000
 8001f58:	24000704 	.word	0x24000704
 8001f5c:	24000750 	.word	0x24000750
 8001f60:	2400079c 	.word	0x2400079c
 8001f64:	24000380 	.word	0x24000380
 8001f68:	080124c0 	.word	0x080124c0
 8001f6c:	24000cf0 	.word	0x24000cf0

08001f70 <homingArm1>:

void homingArm1(void) {
 8001f70:	b580      	push	{r7, lr}
 8001f72:	b082      	sub	sp, #8
 8001f74:	af00      	add	r7, sp, #0

	double flagEndStop=0;
 8001f76:	f04f 0200 	mov.w	r2, #0
 8001f7a:	f04f 0300 	mov.w	r3, #0
 8001f7e:	e9c7 2300 	strd	r2, r3, [r7]

	HAL_TIM_PWM_Stop(&htim12, TIM_CHANNEL_1);  //puede ser redundante
 8001f82:	2100      	movs	r1, #0
 8001f84:	4860      	ldr	r0, [pc, #384]	; (8002108 <homingArm1+0x198>)
 8001f86:	f008 ff3f 	bl	800ae08 <HAL_TIM_PWM_Stop>

	rpm = 0.5;
 8001f8a:	4960      	ldr	r1, [pc, #384]	; (800210c <homingArm1+0x19c>)
 8001f8c:	f04f 0200 	mov.w	r2, #0
 8001f90:	4b5f      	ldr	r3, [pc, #380]	; (8002110 <homingArm1+0x1a0>)
 8001f92:	e9c1 2300 	strd	r2, r3, [r1]
	TIM12->ARR = (uint32_t)(((FCL * 60.0) / (rpm * ((double)(TIM12->PSC) + 1.0) * 9600.0)) - 1.0);
 8001f96:	4b5f      	ldr	r3, [pc, #380]	; (8002114 <homingArm1+0x1a4>)
 8001f98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f9a:	ee07 3a90 	vmov	s15, r3
 8001f9e:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8001fa2:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8001fa6:	ee37 6b06 	vadd.f64	d6, d7, d6
 8001faa:	4b58      	ldr	r3, [pc, #352]	; (800210c <homingArm1+0x19c>)
 8001fac:	ed93 7b00 	vldr	d7, [r3]
 8001fb0:	ee26 7b07 	vmul.f64	d7, d6, d7
 8001fb4:	ed9f 6b50 	vldr	d6, [pc, #320]	; 80020f8 <homingArm1+0x188>
 8001fb8:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001fbc:	ed9f 5b50 	vldr	d5, [pc, #320]	; 8002100 <homingArm1+0x190>
 8001fc0:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8001fc4:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8001fc8:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001fcc:	4b51      	ldr	r3, [pc, #324]	; (8002114 <homingArm1+0x1a4>)
 8001fce:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001fd2:	ee17 2a90 	vmov	r2, s15
 8001fd6:	62da      	str	r2, [r3, #44]	; 0x2c
	TIM12->CCR1 = (TIM12->ARR) / 2;
 8001fd8:	4b4e      	ldr	r3, [pc, #312]	; (8002114 <homingArm1+0x1a4>)
 8001fda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fdc:	4a4d      	ldr	r2, [pc, #308]	; (8002114 <homingArm1+0x1a4>)
 8001fde:	085b      	lsrs	r3, r3, #1
 8001fe0:	6353      	str	r3, [r2, #52]	; 0x34

	if (!(HAL_GPIO_ReadPin(E_EndStop1_Sup_GPIO_Port, E_EndStop1_Sup_Pin))) {  //puede ser redundante
 8001fe2:	2101      	movs	r1, #1
 8001fe4:	484c      	ldr	r0, [pc, #304]	; (8002118 <homingArm1+0x1a8>)
 8001fe6:	f006 f861 	bl	80080ac <HAL_GPIO_ReadPin>
 8001fea:	4603      	mov	r3, r0
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d114      	bne.n	800201a <homingArm1+0xaa>
		while(!(HAL_GPIO_ReadPin(E_EndStop1_Sup_GPIO_Port, E_EndStop1_Sup_Pin))){
 8001ff0:	e00c      	b.n	800200c <homingArm1+0x9c>
			HAL_GPIO_WritePin(S_DirPaP1_GPIO_Port, S_DirPaP1_Pin, GPIO_PIN_SET);
 8001ff2:	2201      	movs	r2, #1
 8001ff4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001ff8:	4848      	ldr	r0, [pc, #288]	; (800211c <homingArm1+0x1ac>)
 8001ffa:	f006 f86f 	bl	80080dc <HAL_GPIO_WritePin>
			HAL_TIM_PWM_Start(&htim12, TIM_CHANNEL_1);
 8001ffe:	2100      	movs	r1, #0
 8002000:	4841      	ldr	r0, [pc, #260]	; (8002108 <homingArm1+0x198>)
 8002002:	f008 fdf3 	bl	800abec <HAL_TIM_PWM_Start>
			HAL_Delay(30);
 8002006:	201e      	movs	r0, #30
 8002008:	f004 ffca 	bl	8006fa0 <HAL_Delay>
		while(!(HAL_GPIO_ReadPin(E_EndStop1_Sup_GPIO_Port, E_EndStop1_Sup_Pin))){
 800200c:	2101      	movs	r1, #1
 800200e:	4842      	ldr	r0, [pc, #264]	; (8002118 <homingArm1+0x1a8>)
 8002010:	f006 f84c 	bl	80080ac <HAL_GPIO_ReadPin>
 8002014:	4603      	mov	r3, r0
 8002016:	2b00      	cmp	r3, #0
 8002018:	d0eb      	beq.n	8001ff2 <homingArm1+0x82>
		}
	}
	HAL_GPIO_WritePin(S_DirPaP1_GPIO_Port, S_DirPaP1_Pin, GPIO_PIN_RESET);
 800201a:	2200      	movs	r2, #0
 800201c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002020:	483e      	ldr	r0, [pc, #248]	; (800211c <homingArm1+0x1ac>)
 8002022:	f006 f85b 	bl	80080dc <HAL_GPIO_WritePin>
	HAL_TIM_PWM_Start(&htim12, TIM_CHANNEL_1);
 8002026:	2100      	movs	r1, #0
 8002028:	4837      	ldr	r0, [pc, #220]	; (8002108 <homingArm1+0x198>)
 800202a:	f008 fddf 	bl	800abec <HAL_TIM_PWM_Start>
	homeOk = 0;
 800202e:	4b3c      	ldr	r3, [pc, #240]	; (8002120 <homingArm1+0x1b0>)
 8002030:	2200      	movs	r2, #0
 8002032:	701a      	strb	r2, [r3, #0]

	while (homeOk == 0) {
 8002034:	e056      	b.n	80020e4 <homingArm1+0x174>
		if (flagEndStop==0 && !(HAL_GPIO_ReadPin(E_EndStop1_Sup_GPIO_Port, E_EndStop1_Sup_Pin))) {
 8002036:	ed97 7b00 	vldr	d7, [r7]
 800203a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800203e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002042:	d121      	bne.n	8002088 <homingArm1+0x118>
 8002044:	2101      	movs	r1, #1
 8002046:	4834      	ldr	r0, [pc, #208]	; (8002118 <homingArm1+0x1a8>)
 8002048:	f006 f830 	bl	80080ac <HAL_GPIO_ReadPin>
 800204c:	4603      	mov	r3, r0
 800204e:	2b00      	cmp	r3, #0
 8002050:	d11a      	bne.n	8002088 <homingArm1+0x118>
			HAL_Delay(30);		//Para filtrar transitorio
 8002052:	201e      	movs	r0, #30
 8002054:	f004 ffa4 	bl	8006fa0 <HAL_Delay>
			if (!(HAL_GPIO_ReadPin(E_EndStop1_Sup_GPIO_Port,E_EndStop1_Sup_Pin))) {
 8002058:	2101      	movs	r1, #1
 800205a:	482f      	ldr	r0, [pc, #188]	; (8002118 <homingArm1+0x1a8>)
 800205c:	f006 f826 	bl	80080ac <HAL_GPIO_ReadPin>
 8002060:	4603      	mov	r3, r0
 8002062:	2b00      	cmp	r3, #0
 8002064:	d110      	bne.n	8002088 <homingArm1+0x118>
				HAL_UART_Transmit(&huart3,(uint8_t *)"ES1_Pressed\n", 13, 100);
 8002066:	2364      	movs	r3, #100	; 0x64
 8002068:	220d      	movs	r2, #13
 800206a:	492e      	ldr	r1, [pc, #184]	; (8002124 <homingArm1+0x1b4>)
 800206c:	482e      	ldr	r0, [pc, #184]	; (8002128 <homingArm1+0x1b8>)
 800206e:	f00a fc11 	bl	800c894 <HAL_UART_Transmit>
				HAL_GPIO_WritePin(S_DirPaP1_GPIO_Port, S_DirPaP1_Pin, GPIO_PIN_SET);
 8002072:	2201      	movs	r2, #1
 8002074:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002078:	4828      	ldr	r0, [pc, #160]	; (800211c <homingArm1+0x1ac>)
 800207a:	f006 f82f 	bl	80080dc <HAL_GPIO_WritePin>
				flagEndStop = 1;
 800207e:	f04f 0200 	mov.w	r2, #0
 8002082:	4b2a      	ldr	r3, [pc, #168]	; (800212c <homingArm1+0x1bc>)
 8002084:	e9c7 2300 	strd	r2, r3, [r7]
			}
		}
		if (flagEndStop==1 && HAL_GPIO_ReadPin(E_EndStop1_Sup_GPIO_Port,E_EndStop1_Sup_Pin)) {
 8002088:	ed97 7b00 	vldr	d7, [r7]
 800208c:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8002090:	eeb4 7b46 	vcmp.f64	d7, d6
 8002094:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002098:	d124      	bne.n	80020e4 <homingArm1+0x174>
 800209a:	2101      	movs	r1, #1
 800209c:	481e      	ldr	r0, [pc, #120]	; (8002118 <homingArm1+0x1a8>)
 800209e:	f006 f805 	bl	80080ac <HAL_GPIO_ReadPin>
 80020a2:	4603      	mov	r3, r0
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d01d      	beq.n	80020e4 <homingArm1+0x174>
			HAL_Delay(30);		//Para filtrar transitorio
 80020a8:	201e      	movs	r0, #30
 80020aa:	f004 ff79 	bl	8006fa0 <HAL_Delay>
			if (HAL_GPIO_ReadPin(E_EndStop1_Sup_GPIO_Port,E_EndStop1_Sup_Pin)) {
 80020ae:	2101      	movs	r1, #1
 80020b0:	4819      	ldr	r0, [pc, #100]	; (8002118 <homingArm1+0x1a8>)
 80020b2:	f005 fffb 	bl	80080ac <HAL_GPIO_ReadPin>
 80020b6:	4603      	mov	r3, r0
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d013      	beq.n	80020e4 <homingArm1+0x174>
				HAL_TIM_PWM_Stop(&htim12, TIM_CHANNEL_1);
 80020bc:	2100      	movs	r1, #0
 80020be:	4812      	ldr	r0, [pc, #72]	; (8002108 <homingArm1+0x198>)
 80020c0:	f008 fea2 	bl	800ae08 <HAL_TIM_PWM_Stop>
				HAL_UART_Transmit(&huart3,(uint8_t *)"endArm1\n", 9, 100);
 80020c4:	2364      	movs	r3, #100	; 0x64
 80020c6:	2209      	movs	r2, #9
 80020c8:	4919      	ldr	r1, [pc, #100]	; (8002130 <homingArm1+0x1c0>)
 80020ca:	4817      	ldr	r0, [pc, #92]	; (8002128 <homingArm1+0x1b8>)
 80020cc:	f00a fbe2 	bl	800c894 <HAL_UART_Transmit>
				titha1 = 0;
 80020d0:	4918      	ldr	r1, [pc, #96]	; (8002134 <homingArm1+0x1c4>)
 80020d2:	f04f 0200 	mov.w	r2, #0
 80020d6:	f04f 0300 	mov.w	r3, #0
 80020da:	e9c1 2300 	strd	r2, r3, [r1]
				homeOk = 1;
 80020de:	4b10      	ldr	r3, [pc, #64]	; (8002120 <homingArm1+0x1b0>)
 80020e0:	2201      	movs	r2, #1
 80020e2:	701a      	strb	r2, [r3, #0]
	while (homeOk == 0) {
 80020e4:	4b0e      	ldr	r3, [pc, #56]	; (8002120 <homingArm1+0x1b0>)
 80020e6:	781b      	ldrb	r3, [r3, #0]
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d0a4      	beq.n	8002036 <homingArm1+0xc6>
			}
		}
	}
}
 80020ec:	bf00      	nop
 80020ee:	bf00      	nop
 80020f0:	3708      	adds	r7, #8
 80020f2:	46bd      	mov	sp, r7
 80020f4:	bd80      	pop	{r7, pc}
 80020f6:	bf00      	nop
 80020f8:	00000000 	.word	0x00000000
 80020fc:	40c2c000 	.word	0x40c2c000
 8002100:	00000000 	.word	0x00000000
 8002104:	41ec9c38 	.word	0x41ec9c38
 8002108:	24000704 	.word	0x24000704
 800210c:	24000388 	.word	0x24000388
 8002110:	3fe00000 	.word	0x3fe00000
 8002114:	40001800 	.word	0x40001800
 8002118:	58021000 	.word	0x58021000
 800211c:	58020800 	.word	0x58020800
 8002120:	24000380 	.word	0x24000380
 8002124:	080124c4 	.word	0x080124c4
 8002128:	24000cf0 	.word	0x24000cf0
 800212c:	3ff00000 	.word	0x3ff00000
 8002130:	080124d4 	.word	0x080124d4
 8002134:	240003c0 	.word	0x240003c0

08002138 <homingArm2>:

void homingArm2(void) {
 8002138:	b580      	push	{r7, lr}
 800213a:	b082      	sub	sp, #8
 800213c:	af00      	add	r7, sp, #0
	double flagEndStop = 0;
 800213e:	f04f 0200 	mov.w	r2, #0
 8002142:	f04f 0300 	mov.w	r3, #0
 8002146:	e9c7 2300 	strd	r2, r3, [r7]
	HAL_TIM_PWM_Stop(&htim13, TIM_CHANNEL_1);
 800214a:	2100      	movs	r1, #0
 800214c:	4872      	ldr	r0, [pc, #456]	; (8002318 <homingArm2+0x1e0>)
 800214e:	f008 fe5b 	bl	800ae08 <HAL_TIM_PWM_Stop>
	rpm = 0.5;
 8002152:	4972      	ldr	r1, [pc, #456]	; (800231c <homingArm2+0x1e4>)
 8002154:	f04f 0200 	mov.w	r2, #0
 8002158:	4b71      	ldr	r3, [pc, #452]	; (8002320 <homingArm2+0x1e8>)
 800215a:	e9c1 2300 	strd	r2, r3, [r1]
	TIM13->ARR = (uint32_t)(((FCL * 60.0) / (rpm * ((double)(TIM13->PSC) + 1.0) * 9600.0)) - 1.0);
 800215e:	4b71      	ldr	r3, [pc, #452]	; (8002324 <homingArm2+0x1ec>)
 8002160:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002162:	ee07 3a90 	vmov	s15, r3
 8002166:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800216a:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800216e:	ee37 6b06 	vadd.f64	d6, d7, d6
 8002172:	4b6a      	ldr	r3, [pc, #424]	; (800231c <homingArm2+0x1e4>)
 8002174:	ed93 7b00 	vldr	d7, [r3]
 8002178:	ee26 7b07 	vmul.f64	d7, d6, d7
 800217c:	ed9f 6b62 	vldr	d6, [pc, #392]	; 8002308 <homingArm2+0x1d0>
 8002180:	ee27 6b06 	vmul.f64	d6, d7, d6
 8002184:	ed9f 5b62 	vldr	d5, [pc, #392]	; 8002310 <homingArm2+0x1d8>
 8002188:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800218c:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8002190:	ee37 7b46 	vsub.f64	d7, d7, d6
 8002194:	4b63      	ldr	r3, [pc, #396]	; (8002324 <homingArm2+0x1ec>)
 8002196:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800219a:	ee17 2a90 	vmov	r2, s15
 800219e:	62da      	str	r2, [r3, #44]	; 0x2c
	TIM13->CCR1 = (TIM13->ARR) / 2;
 80021a0:	4b60      	ldr	r3, [pc, #384]	; (8002324 <homingArm2+0x1ec>)
 80021a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021a4:	4a5f      	ldr	r2, [pc, #380]	; (8002324 <homingArm2+0x1ec>)
 80021a6:	085b      	lsrs	r3, r3, #1
 80021a8:	6353      	str	r3, [r2, #52]	; 0x34

	if (!(HAL_GPIO_ReadPin(E_EndStop2_Sup_GPIO_Port, E_EndStop2_Sup_Pin))) {
 80021aa:	2104      	movs	r1, #4
 80021ac:	485e      	ldr	r0, [pc, #376]	; (8002328 <homingArm2+0x1f0>)
 80021ae:	f005 ff7d 	bl	80080ac <HAL_GPIO_ReadPin>
 80021b2:	4603      	mov	r3, r0
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d114      	bne.n	80021e2 <homingArm2+0xaa>
		while(!(HAL_GPIO_ReadPin(E_EndStop2_Sup_GPIO_Port, E_EndStop2_Sup_Pin))){
 80021b8:	e00c      	b.n	80021d4 <homingArm2+0x9c>
			HAL_GPIO_WritePin(S_DirPaP2_GPIO_Port, S_DirPaP2_Pin, GPIO_PIN_SET);
 80021ba:	2201      	movs	r2, #1
 80021bc:	f44f 7100 	mov.w	r1, #512	; 0x200
 80021c0:	485a      	ldr	r0, [pc, #360]	; (800232c <homingArm2+0x1f4>)
 80021c2:	f005 ff8b 	bl	80080dc <HAL_GPIO_WritePin>
			HAL_TIM_PWM_Start(&htim13, TIM_CHANNEL_1);
 80021c6:	2100      	movs	r1, #0
 80021c8:	4853      	ldr	r0, [pc, #332]	; (8002318 <homingArm2+0x1e0>)
 80021ca:	f008 fd0f 	bl	800abec <HAL_TIM_PWM_Start>
			HAL_Delay(30);
 80021ce:	201e      	movs	r0, #30
 80021d0:	f004 fee6 	bl	8006fa0 <HAL_Delay>
		while(!(HAL_GPIO_ReadPin(E_EndStop2_Sup_GPIO_Port, E_EndStop2_Sup_Pin))){
 80021d4:	2104      	movs	r1, #4
 80021d6:	4854      	ldr	r0, [pc, #336]	; (8002328 <homingArm2+0x1f0>)
 80021d8:	f005 ff68 	bl	80080ac <HAL_GPIO_ReadPin>
 80021dc:	4603      	mov	r3, r0
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d0eb      	beq.n	80021ba <homingArm2+0x82>
		}

	}

	HAL_TIM_PWM_Stop(&htim13, TIM_CHANNEL_1);
 80021e2:	2100      	movs	r1, #0
 80021e4:	484c      	ldr	r0, [pc, #304]	; (8002318 <homingArm2+0x1e0>)
 80021e6:	f008 fe0f 	bl	800ae08 <HAL_TIM_PWM_Stop>
	rpm = 0.5;
 80021ea:	494c      	ldr	r1, [pc, #304]	; (800231c <homingArm2+0x1e4>)
 80021ec:	f04f 0200 	mov.w	r2, #0
 80021f0:	4b4b      	ldr	r3, [pc, #300]	; (8002320 <homingArm2+0x1e8>)
 80021f2:	e9c1 2300 	strd	r2, r3, [r1]
	TIM13->ARR = (uint32_t)(((FCL * 60.0) / (rpm * ((double)(TIM13->PSC) + 1.0) * 9600.0)) - 1.0);
 80021f6:	4b4b      	ldr	r3, [pc, #300]	; (8002324 <homingArm2+0x1ec>)
 80021f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021fa:	ee07 3a90 	vmov	s15, r3
 80021fe:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8002202:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8002206:	ee37 6b06 	vadd.f64	d6, d7, d6
 800220a:	4b44      	ldr	r3, [pc, #272]	; (800231c <homingArm2+0x1e4>)
 800220c:	ed93 7b00 	vldr	d7, [r3]
 8002210:	ee26 7b07 	vmul.f64	d7, d6, d7
 8002214:	ed9f 6b3c 	vldr	d6, [pc, #240]	; 8002308 <homingArm2+0x1d0>
 8002218:	ee27 6b06 	vmul.f64	d6, d7, d6
 800221c:	ed9f 5b3c 	vldr	d5, [pc, #240]	; 8002310 <homingArm2+0x1d8>
 8002220:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8002224:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8002228:	ee37 7b46 	vsub.f64	d7, d7, d6
 800222c:	4b3d      	ldr	r3, [pc, #244]	; (8002324 <homingArm2+0x1ec>)
 800222e:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8002232:	ee17 2a90 	vmov	r2, s15
 8002236:	62da      	str	r2, [r3, #44]	; 0x2c
	TIM13->CCR1 = (TIM13->ARR) / 2;
 8002238:	4b3a      	ldr	r3, [pc, #232]	; (8002324 <homingArm2+0x1ec>)
 800223a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800223c:	4a39      	ldr	r2, [pc, #228]	; (8002324 <homingArm2+0x1ec>)
 800223e:	085b      	lsrs	r3, r3, #1
 8002240:	6353      	str	r3, [r2, #52]	; 0x34
	HAL_GPIO_WritePin(S_DirPaP2_GPIO_Port, S_DirPaP2_Pin, GPIO_PIN_RESET);
 8002242:	2200      	movs	r2, #0
 8002244:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002248:	4838      	ldr	r0, [pc, #224]	; (800232c <homingArm2+0x1f4>)
 800224a:	f005 ff47 	bl	80080dc <HAL_GPIO_WritePin>
	HAL_TIM_PWM_Start(&htim13, TIM_CHANNEL_1);
 800224e:	2100      	movs	r1, #0
 8002250:	4831      	ldr	r0, [pc, #196]	; (8002318 <homingArm2+0x1e0>)
 8002252:	f008 fccb 	bl	800abec <HAL_TIM_PWM_Start>
	homeOk = 0;
 8002256:	4b36      	ldr	r3, [pc, #216]	; (8002330 <homingArm2+0x1f8>)
 8002258:	2200      	movs	r2, #0
 800225a:	701a      	strb	r2, [r3, #0]
	while (homeOk == 0) {
 800225c:	e049      	b.n	80022f2 <homingArm2+0x1ba>
		if (!(HAL_GPIO_ReadPin(E_EndStop2_Sup_GPIO_Port, E_EndStop2_Sup_Pin))) {
 800225e:	2104      	movs	r1, #4
 8002260:	4831      	ldr	r0, [pc, #196]	; (8002328 <homingArm2+0x1f0>)
 8002262:	f005 ff23 	bl	80080ac <HAL_GPIO_ReadPin>
 8002266:	4603      	mov	r3, r0
 8002268:	2b00      	cmp	r3, #0
 800226a:	d114      	bne.n	8002296 <homingArm2+0x15e>
			HAL_Delay(30);		//Para filtrar transitorio
 800226c:	201e      	movs	r0, #30
 800226e:	f004 fe97 	bl	8006fa0 <HAL_Delay>
			if (!(HAL_GPIO_ReadPin(E_EndStop2_Sup_GPIO_Port,E_EndStop2_Sup_Pin))) {
 8002272:	2104      	movs	r1, #4
 8002274:	482c      	ldr	r0, [pc, #176]	; (8002328 <homingArm2+0x1f0>)
 8002276:	f005 ff19 	bl	80080ac <HAL_GPIO_ReadPin>
 800227a:	4603      	mov	r3, r0
 800227c:	2b00      	cmp	r3, #0
 800227e:	d10a      	bne.n	8002296 <homingArm2+0x15e>
				HAL_GPIO_WritePin(S_DirPaP2_GPIO_Port, S_DirPaP2_Pin, GPIO_PIN_SET);
 8002280:	2201      	movs	r2, #1
 8002282:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002286:	4829      	ldr	r0, [pc, #164]	; (800232c <homingArm2+0x1f4>)
 8002288:	f005 ff28 	bl	80080dc <HAL_GPIO_WritePin>
				flagEndStop = 1;
 800228c:	f04f 0200 	mov.w	r2, #0
 8002290:	4b28      	ldr	r3, [pc, #160]	; (8002334 <homingArm2+0x1fc>)
 8002292:	e9c7 2300 	strd	r2, r3, [r7]
			}
		}
		if (flagEndStop == 1 && HAL_GPIO_ReadPin(E_EndStop2_Sup_GPIO_Port,E_EndStop2_Sup_Pin)) {
 8002296:	ed97 7b00 	vldr	d7, [r7]
 800229a:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800229e:	eeb4 7b46 	vcmp.f64	d7, d6
 80022a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80022a6:	d124      	bne.n	80022f2 <homingArm2+0x1ba>
 80022a8:	2104      	movs	r1, #4
 80022aa:	481f      	ldr	r0, [pc, #124]	; (8002328 <homingArm2+0x1f0>)
 80022ac:	f005 fefe 	bl	80080ac <HAL_GPIO_ReadPin>
 80022b0:	4603      	mov	r3, r0
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d01d      	beq.n	80022f2 <homingArm2+0x1ba>
			HAL_Delay(30);		//Para filtrar transitorio
 80022b6:	201e      	movs	r0, #30
 80022b8:	f004 fe72 	bl	8006fa0 <HAL_Delay>
			if (HAL_GPIO_ReadPin(E_EndStop2_Sup_GPIO_Port,E_EndStop2_Sup_Pin)) {
 80022bc:	2104      	movs	r1, #4
 80022be:	481a      	ldr	r0, [pc, #104]	; (8002328 <homingArm2+0x1f0>)
 80022c0:	f005 fef4 	bl	80080ac <HAL_GPIO_ReadPin>
 80022c4:	4603      	mov	r3, r0
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d013      	beq.n	80022f2 <homingArm2+0x1ba>
				HAL_TIM_PWM_Stop(&htim13, TIM_CHANNEL_1);
 80022ca:	2100      	movs	r1, #0
 80022cc:	4812      	ldr	r0, [pc, #72]	; (8002318 <homingArm2+0x1e0>)
 80022ce:	f008 fd9b 	bl	800ae08 <HAL_TIM_PWM_Stop>
				HAL_UART_Transmit(&huart3,(uint8_t *)"FinArm2\n\r", 9, 100);
 80022d2:	2364      	movs	r3, #100	; 0x64
 80022d4:	2209      	movs	r2, #9
 80022d6:	4918      	ldr	r1, [pc, #96]	; (8002338 <homingArm2+0x200>)
 80022d8:	4818      	ldr	r0, [pc, #96]	; (800233c <homingArm2+0x204>)
 80022da:	f00a fadb 	bl	800c894 <HAL_UART_Transmit>
				titha2 = 0;
 80022de:	4918      	ldr	r1, [pc, #96]	; (8002340 <homingArm2+0x208>)
 80022e0:	f04f 0200 	mov.w	r2, #0
 80022e4:	f04f 0300 	mov.w	r3, #0
 80022e8:	e9c1 2300 	strd	r2, r3, [r1]
				homeOk = 1;
 80022ec:	4b10      	ldr	r3, [pc, #64]	; (8002330 <homingArm2+0x1f8>)
 80022ee:	2201      	movs	r2, #1
 80022f0:	701a      	strb	r2, [r3, #0]
	while (homeOk == 0) {
 80022f2:	4b0f      	ldr	r3, [pc, #60]	; (8002330 <homingArm2+0x1f8>)
 80022f4:	781b      	ldrb	r3, [r3, #0]
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d0b1      	beq.n	800225e <homingArm2+0x126>
			}
		}
	}
}
 80022fa:	bf00      	nop
 80022fc:	bf00      	nop
 80022fe:	3708      	adds	r7, #8
 8002300:	46bd      	mov	sp, r7
 8002302:	bd80      	pop	{r7, pc}
 8002304:	f3af 8000 	nop.w
 8002308:	00000000 	.word	0x00000000
 800230c:	40c2c000 	.word	0x40c2c000
 8002310:	00000000 	.word	0x00000000
 8002314:	41ec9c38 	.word	0x41ec9c38
 8002318:	24000750 	.word	0x24000750
 800231c:	24000388 	.word	0x24000388
 8002320:	3fe00000 	.word	0x3fe00000
 8002324:	40001c00 	.word	0x40001c00
 8002328:	58021000 	.word	0x58021000
 800232c:	58020800 	.word	0x58020800
 8002330:	24000380 	.word	0x24000380
 8002334:	3ff00000 	.word	0x3ff00000
 8002338:	080124e0 	.word	0x080124e0
 800233c:	24000cf0 	.word	0x24000cf0
 8002340:	240003c8 	.word	0x240003c8
 8002344:	00000000 	.word	0x00000000

08002348 <homingArm3>:

void homingArm3(void) {
 8002348:	b580      	push	{r7, lr}
 800234a:	b082      	sub	sp, #8
 800234c:	af00      	add	r7, sp, #0
	double flagEndStop = 0;
 800234e:	f04f 0200 	mov.w	r2, #0
 8002352:	f04f 0300 	mov.w	r3, #0
 8002356:	e9c7 2300 	strd	r2, r3, [r7]
	HAL_TIM_PWM_Stop(&htim14, TIM_CHANNEL_1);
 800235a:	2100      	movs	r1, #0
 800235c:	4860      	ldr	r0, [pc, #384]	; (80024e0 <homingArm3+0x198>)
 800235e:	f008 fd53 	bl	800ae08 <HAL_TIM_PWM_Stop>
	rpm = 0.5;
 8002362:	4960      	ldr	r1, [pc, #384]	; (80024e4 <homingArm3+0x19c>)
 8002364:	f04f 0200 	mov.w	r2, #0
 8002368:	4b5f      	ldr	r3, [pc, #380]	; (80024e8 <homingArm3+0x1a0>)
 800236a:	e9c1 2300 	strd	r2, r3, [r1]
	TIM14->ARR = (uint32_t)(((FCL * 60.0) / (rpm * ((double)(TIM1->PSC) + 1.0) * 9600.0)) - 1.0);
 800236e:	4b5f      	ldr	r3, [pc, #380]	; (80024ec <homingArm3+0x1a4>)
 8002370:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002372:	ee07 3a90 	vmov	s15, r3
 8002376:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800237a:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800237e:	ee37 6b06 	vadd.f64	d6, d7, d6
 8002382:	4b58      	ldr	r3, [pc, #352]	; (80024e4 <homingArm3+0x19c>)
 8002384:	ed93 7b00 	vldr	d7, [r3]
 8002388:	ee26 7b07 	vmul.f64	d7, d6, d7
 800238c:	ed9f 6b50 	vldr	d6, [pc, #320]	; 80024d0 <homingArm3+0x188>
 8002390:	ee27 6b06 	vmul.f64	d6, d7, d6
 8002394:	ed9f 5b50 	vldr	d5, [pc, #320]	; 80024d8 <homingArm3+0x190>
 8002398:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800239c:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 80023a0:	ee37 7b46 	vsub.f64	d7, d7, d6
 80023a4:	4b52      	ldr	r3, [pc, #328]	; (80024f0 <homingArm3+0x1a8>)
 80023a6:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80023aa:	ee17 2a90 	vmov	r2, s15
 80023ae:	62da      	str	r2, [r3, #44]	; 0x2c
	TIM14->CCR1 = (TIM14->ARR) / 2;
 80023b0:	4b4f      	ldr	r3, [pc, #316]	; (80024f0 <homingArm3+0x1a8>)
 80023b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023b4:	4a4e      	ldr	r2, [pc, #312]	; (80024f0 <homingArm3+0x1a8>)
 80023b6:	085b      	lsrs	r3, r3, #1
 80023b8:	6353      	str	r3, [r2, #52]	; 0x34
	if (!(HAL_GPIO_ReadPin(E_EndStop3_Sup_GPIO_Port, E_EndStop3_Sup_Pin))) {
 80023ba:	2110      	movs	r1, #16
 80023bc:	484d      	ldr	r0, [pc, #308]	; (80024f4 <homingArm3+0x1ac>)
 80023be:	f005 fe75 	bl	80080ac <HAL_GPIO_ReadPin>
 80023c2:	4603      	mov	r3, r0
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d114      	bne.n	80023f2 <homingArm3+0xaa>
		while(!(HAL_GPIO_ReadPin(E_EndStop3_Sup_GPIO_Port, E_EndStop3_Sup_Pin))){
 80023c8:	e00c      	b.n	80023e4 <homingArm3+0x9c>
			HAL_GPIO_WritePin(S_DirPaP3_GPIO_Port, S_DirPaP3_Pin, GPIO_PIN_SET);
 80023ca:	2201      	movs	r2, #1
 80023cc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80023d0:	4849      	ldr	r0, [pc, #292]	; (80024f8 <homingArm3+0x1b0>)
 80023d2:	f005 fe83 	bl	80080dc <HAL_GPIO_WritePin>
			HAL_TIM_PWM_Start(&htim14, TIM_CHANNEL_1);
 80023d6:	2100      	movs	r1, #0
 80023d8:	4841      	ldr	r0, [pc, #260]	; (80024e0 <homingArm3+0x198>)
 80023da:	f008 fc07 	bl	800abec <HAL_TIM_PWM_Start>
			HAL_Delay(30);
 80023de:	201e      	movs	r0, #30
 80023e0:	f004 fdde 	bl	8006fa0 <HAL_Delay>
		while(!(HAL_GPIO_ReadPin(E_EndStop3_Sup_GPIO_Port, E_EndStop3_Sup_Pin))){
 80023e4:	2110      	movs	r1, #16
 80023e6:	4843      	ldr	r0, [pc, #268]	; (80024f4 <homingArm3+0x1ac>)
 80023e8:	f005 fe60 	bl	80080ac <HAL_GPIO_ReadPin>
 80023ec:	4603      	mov	r3, r0
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d0eb      	beq.n	80023ca <homingArm3+0x82>
		}
	}
	HAL_GPIO_WritePin(S_DirPaP3_GPIO_Port, S_DirPaP3_Pin, GPIO_PIN_RESET);
 80023f2:	2200      	movs	r2, #0
 80023f4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80023f8:	483f      	ldr	r0, [pc, #252]	; (80024f8 <homingArm3+0x1b0>)
 80023fa:	f005 fe6f 	bl	80080dc <HAL_GPIO_WritePin>
	HAL_TIM_PWM_Start(&htim14, TIM_CHANNEL_1);
 80023fe:	2100      	movs	r1, #0
 8002400:	4837      	ldr	r0, [pc, #220]	; (80024e0 <homingArm3+0x198>)
 8002402:	f008 fbf3 	bl	800abec <HAL_TIM_PWM_Start>
	homeOk = 0;
 8002406:	4b3d      	ldr	r3, [pc, #244]	; (80024fc <homingArm3+0x1b4>)
 8002408:	2200      	movs	r2, #0
 800240a:	701a      	strb	r2, [r3, #0]
	while (homeOk == 0) {
 800240c:	e049      	b.n	80024a2 <homingArm3+0x15a>
		if (!(HAL_GPIO_ReadPin(E_EndStop3_Sup_GPIO_Port, E_EndStop3_Sup_Pin))) {
 800240e:	2110      	movs	r1, #16
 8002410:	4838      	ldr	r0, [pc, #224]	; (80024f4 <homingArm3+0x1ac>)
 8002412:	f005 fe4b 	bl	80080ac <HAL_GPIO_ReadPin>
 8002416:	4603      	mov	r3, r0
 8002418:	2b00      	cmp	r3, #0
 800241a:	d114      	bne.n	8002446 <homingArm3+0xfe>
			HAL_Delay(30);		//Para filtrar transitorio
 800241c:	201e      	movs	r0, #30
 800241e:	f004 fdbf 	bl	8006fa0 <HAL_Delay>
			if (!(HAL_GPIO_ReadPin(E_EndStop3_Sup_GPIO_Port, E_EndStop3_Sup_Pin))) {
 8002422:	2110      	movs	r1, #16
 8002424:	4833      	ldr	r0, [pc, #204]	; (80024f4 <homingArm3+0x1ac>)
 8002426:	f005 fe41 	bl	80080ac <HAL_GPIO_ReadPin>
 800242a:	4603      	mov	r3, r0
 800242c:	2b00      	cmp	r3, #0
 800242e:	d10a      	bne.n	8002446 <homingArm3+0xfe>
				HAL_GPIO_WritePin(S_DirPaP3_GPIO_Port, S_DirPaP3_Pin, GPIO_PIN_SET);
 8002430:	2201      	movs	r2, #1
 8002432:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002436:	4830      	ldr	r0, [pc, #192]	; (80024f8 <homingArm3+0x1b0>)
 8002438:	f005 fe50 	bl	80080dc <HAL_GPIO_WritePin>
				flagEndStop = 1;
 800243c:	f04f 0200 	mov.w	r2, #0
 8002440:	4b2f      	ldr	r3, [pc, #188]	; (8002500 <homingArm3+0x1b8>)
 8002442:	e9c7 2300 	strd	r2, r3, [r7]
			}
		}
		if (flagEndStop == 1 && HAL_GPIO_ReadPin(E_EndStop3_Sup_GPIO_Port, E_EndStop3_Sup_Pin)) {
 8002446:	ed97 7b00 	vldr	d7, [r7]
 800244a:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800244e:	eeb4 7b46 	vcmp.f64	d7, d6
 8002452:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002456:	d124      	bne.n	80024a2 <homingArm3+0x15a>
 8002458:	2110      	movs	r1, #16
 800245a:	4826      	ldr	r0, [pc, #152]	; (80024f4 <homingArm3+0x1ac>)
 800245c:	f005 fe26 	bl	80080ac <HAL_GPIO_ReadPin>
 8002460:	4603      	mov	r3, r0
 8002462:	2b00      	cmp	r3, #0
 8002464:	d01d      	beq.n	80024a2 <homingArm3+0x15a>
			HAL_Delay(30);		//Para filtrar transitorio
 8002466:	201e      	movs	r0, #30
 8002468:	f004 fd9a 	bl	8006fa0 <HAL_Delay>
			if (HAL_GPIO_ReadPin(E_EndStop3_Sup_GPIO_Port, E_EndStop3_Sup_Pin)) {
 800246c:	2110      	movs	r1, #16
 800246e:	4821      	ldr	r0, [pc, #132]	; (80024f4 <homingArm3+0x1ac>)
 8002470:	f005 fe1c 	bl	80080ac <HAL_GPIO_ReadPin>
 8002474:	4603      	mov	r3, r0
 8002476:	2b00      	cmp	r3, #0
 8002478:	d013      	beq.n	80024a2 <homingArm3+0x15a>
				HAL_TIM_PWM_Stop(&htim14, TIM_CHANNEL_1);
 800247a:	2100      	movs	r1, #0
 800247c:	4818      	ldr	r0, [pc, #96]	; (80024e0 <homingArm3+0x198>)
 800247e:	f008 fcc3 	bl	800ae08 <HAL_TIM_PWM_Stop>
				HAL_UART_Transmit(&huart3,(uint8_t *)"FinArm3\n\r", 9, 100);
 8002482:	2364      	movs	r3, #100	; 0x64
 8002484:	2209      	movs	r2, #9
 8002486:	491f      	ldr	r1, [pc, #124]	; (8002504 <homingArm3+0x1bc>)
 8002488:	481f      	ldr	r0, [pc, #124]	; (8002508 <homingArm3+0x1c0>)
 800248a:	f00a fa03 	bl	800c894 <HAL_UART_Transmit>
				titha3 = 0;
 800248e:	491f      	ldr	r1, [pc, #124]	; (800250c <homingArm3+0x1c4>)
 8002490:	f04f 0200 	mov.w	r2, #0
 8002494:	f04f 0300 	mov.w	r3, #0
 8002498:	e9c1 2300 	strd	r2, r3, [r1]
				homeOk = 1;
 800249c:	4b17      	ldr	r3, [pc, #92]	; (80024fc <homingArm3+0x1b4>)
 800249e:	2201      	movs	r2, #1
 80024a0:	701a      	strb	r2, [r3, #0]
	while (homeOk == 0) {
 80024a2:	4b16      	ldr	r3, [pc, #88]	; (80024fc <homingArm3+0x1b4>)
 80024a4:	781b      	ldrb	r3, [r3, #0]
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d0b1      	beq.n	800240e <homingArm3+0xc6>
			}
		}
	}


	HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1);	//Enciendo interrupcion input capture motor 1
 80024aa:	2100      	movs	r1, #0
 80024ac:	4818      	ldr	r0, [pc, #96]	; (8002510 <homingArm3+0x1c8>)
 80024ae:	f008 fda3 	bl	800aff8 <HAL_TIM_IC_Start_IT>
	HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_1);	//Enciendo interrupcion input capture motor 2
 80024b2:	2100      	movs	r1, #0
 80024b4:	4817      	ldr	r0, [pc, #92]	; (8002514 <homingArm3+0x1cc>)
 80024b6:	f008 fd9f 	bl	800aff8 <HAL_TIM_IC_Start_IT>
	HAL_TIM_IC_Start_IT(&htim4, TIM_CHANNEL_1);	//Enciendo interrupcion input capture motor 3
 80024ba:	2100      	movs	r1, #0
 80024bc:	4816      	ldr	r0, [pc, #88]	; (8002518 <homingArm3+0x1d0>)
 80024be:	f008 fd9b 	bl	800aff8 <HAL_TIM_IC_Start_IT>
	HAL_NVIC_EnableIRQ(EXTI3_IRQn);
	HAL_NVIC_EnableIRQ(EXTI4_IRQn);
	HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);

	 */
}
 80024c2:	bf00      	nop
 80024c4:	3708      	adds	r7, #8
 80024c6:	46bd      	mov	sp, r7
 80024c8:	bd80      	pop	{r7, pc}
 80024ca:	bf00      	nop
 80024cc:	f3af 8000 	nop.w
 80024d0:	00000000 	.word	0x00000000
 80024d4:	40c2c000 	.word	0x40c2c000
 80024d8:	00000000 	.word	0x00000000
 80024dc:	41ec9c38 	.word	0x41ec9c38
 80024e0:	2400079c 	.word	0x2400079c
 80024e4:	24000388 	.word	0x24000388
 80024e8:	3fe00000 	.word	0x3fe00000
 80024ec:	40010000 	.word	0x40010000
 80024f0:	40002000 	.word	0x40002000
 80024f4:	58021000 	.word	0x58021000
 80024f8:	58020800 	.word	0x58020800
 80024fc:	24000380 	.word	0x24000380
 8002500:	3ff00000 	.word	0x3ff00000
 8002504:	080124ec 	.word	0x080124ec
 8002508:	24000cf0 	.word	0x24000cf0
 800250c:	240003d0 	.word	0x240003d0
 8002510:	240005d4 	.word	0x240005d4
 8002514:	24000620 	.word	0x24000620
 8002518:	2400066c 	.word	0x2400066c
 800251c:	00000000 	.word	0x00000000

08002520 <interpretaComando>:


volatile double aux;
uint8_t auxString[10];

void interpretaComando(void){
 8002520:	b580      	push	{r7, lr}
 8002522:	b08a      	sub	sp, #40	; 0x28
 8002524:	af00      	add	r7, sp, #0

	switch(rx_buffer[0]){
 8002526:	4bbf      	ldr	r3, [pc, #764]	; (8002824 <interpretaComando+0x304>)
 8002528:	781b      	ldrb	r3, [r3, #0]
 800252a:	3b48      	subs	r3, #72	; 0x48
 800252c:	2b2e      	cmp	r3, #46	; 0x2e
 800252e:	f200 83e3 	bhi.w	8002cf8 <interpretaComando+0x7d8>
 8002532:	a201      	add	r2, pc, #4	; (adr r2, 8002538 <interpretaComando+0x18>)
 8002534:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002538:	08002c89 	.word	0x08002c89
 800253c:	08002cf9 	.word	0x08002cf9
 8002540:	08002cf9 	.word	0x08002cf9
 8002544:	08002cf9 	.word	0x08002cf9
 8002548:	08002cf9 	.word	0x08002cf9
 800254c:	08002925 	.word	0x08002925
 8002550:	08002cf9 	.word	0x08002cf9
 8002554:	08002cf9 	.word	0x08002cf9
 8002558:	08002a41 	.word	0x08002a41
 800255c:	08002cf9 	.word	0x08002cf9
 8002560:	08002cf9 	.word	0x08002cf9
 8002564:	08002cf9 	.word	0x08002cf9
 8002568:	08002cf9 	.word	0x08002cf9
 800256c:	08002cf9 	.word	0x08002cf9
 8002570:	08002cf9 	.word	0x08002cf9
 8002574:	08002cf9 	.word	0x08002cf9
 8002578:	08002cf9 	.word	0x08002cf9
 800257c:	08002cf9 	.word	0x08002cf9
 8002580:	08002cf9 	.word	0x08002cf9
 8002584:	08002cf9 	.word	0x08002cf9
 8002588:	08002cf9 	.word	0x08002cf9
 800258c:	08002cf9 	.word	0x08002cf9
 8002590:	08002cf9 	.word	0x08002cf9
 8002594:	08002cf9 	.word	0x08002cf9
 8002598:	08002cf9 	.word	0x08002cf9
 800259c:	08002cf9 	.word	0x08002cf9
 80025a0:	08002cf9 	.word	0x08002cf9
 80025a4:	08002cf9 	.word	0x08002cf9
 80025a8:	08002cf9 	.word	0x08002cf9
 80025ac:	08002cf9 	.word	0x08002cf9
 80025b0:	08002cf9 	.word	0x08002cf9
 80025b4:	08002cf9 	.word	0x08002cf9
 80025b8:	08002c89 	.word	0x08002c89
 80025bc:	08002cf9 	.word	0x08002cf9
 80025c0:	08002cf9 	.word	0x08002cf9
 80025c4:	08002cf9 	.word	0x08002cf9
 80025c8:	08002cf9 	.word	0x08002cf9
 80025cc:	08002925 	.word	0x08002925
 80025d0:	08002cf9 	.word	0x08002cf9
 80025d4:	08002cf9 	.word	0x08002cf9
 80025d8:	08002a41 	.word	0x08002a41
 80025dc:	08002cf9 	.word	0x08002cf9
 80025e0:	08002cf9 	.word	0x08002cf9
 80025e4:	08002cf9 	.word	0x08002cf9
 80025e8:	08002cf9 	.word	0x08002cf9
 80025ec:	08002cf9 	.word	0x08002cf9
 80025f0:	080025f5 	.word	0x080025f5

	case 'v':
		HAL_UART_Transmit(&huart3, (uint8_t *)"params\n",8, 100);
 80025f4:	2364      	movs	r3, #100	; 0x64
 80025f6:	2208      	movs	r2, #8
 80025f8:	498b      	ldr	r1, [pc, #556]	; (8002828 <interpretaComando+0x308>)
 80025fa:	488c      	ldr	r0, [pc, #560]	; (800282c <interpretaComando+0x30c>)
 80025fc:	f00a f94a 	bl	800c894 <HAL_UART_Transmit>
		uint8_t i = 1;
 8002600:	2301      	movs	r3, #1
 8002602:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		uint8_t j = 0;
 8002606:	2300      	movs	r3, #0
 8002608:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		while(rx_buffer[i] != 0){
 800260c:	e182      	b.n	8002914 <interpretaComando+0x3f4>
			if(rx_buffer[i] == 'm'){
 800260e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002612:	4a84      	ldr	r2, [pc, #528]	; (8002824 <interpretaComando+0x304>)
 8002614:	5cd3      	ldrb	r3, [r2, r3]
 8002616:	2b6d      	cmp	r3, #109	; 0x6d
 8002618:	d13b      	bne.n	8002692 <interpretaComando+0x172>
				while(rx_buffer[i+1] != ' '){			//Almacenar dato en buffer hasta que se encuentre un espacio
 800261a:	e012      	b.n	8002642 <interpretaComando+0x122>
					auxString[j] = rx_buffer[i+1];
 800261c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002620:	1c5a      	adds	r2, r3, #1
 8002622:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8002626:	497f      	ldr	r1, [pc, #508]	; (8002824 <interpretaComando+0x304>)
 8002628:	5c89      	ldrb	r1, [r1, r2]
 800262a:	4a81      	ldr	r2, [pc, #516]	; (8002830 <interpretaComando+0x310>)
 800262c:	54d1      	strb	r1, [r2, r3]
					j++;
 800262e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8002632:	3301      	adds	r3, #1
 8002634:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
					i++;
 8002638:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800263c:	3301      	adds	r3, #1
 800263e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				while(rx_buffer[i+1] != ' '){			//Almacenar dato en buffer hasta que se encuentre un espacio
 8002642:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002646:	3301      	adds	r3, #1
 8002648:	4a76      	ldr	r2, [pc, #472]	; (8002824 <interpretaComando+0x304>)
 800264a:	5cd3      	ldrb	r3, [r2, r3]
 800264c:	2b20      	cmp	r3, #32
 800264e:	d1e5      	bne.n	800261c <interpretaComando+0xfc>
				}
				vmax = strtod(&auxString[0], NULL);
 8002650:	2100      	movs	r1, #0
 8002652:	4877      	ldr	r0, [pc, #476]	; (8002830 <interpretaComando+0x310>)
 8002654:	f00d fa3e 	bl	800fad4 <strtod>
 8002658:	eeb0 7b40 	vmov.f64	d7, d0
 800265c:	4b75      	ldr	r3, [pc, #468]	; (8002834 <interpretaComando+0x314>)
 800265e:	ed83 7b00 	vstr	d7, [r3]

				for (int k = 0; k <= 10; k++) {
 8002662:	2300      	movs	r3, #0
 8002664:	623b      	str	r3, [r7, #32]
 8002666:	e007      	b.n	8002678 <interpretaComando+0x158>
					auxString[k] = 0;
 8002668:	4a71      	ldr	r2, [pc, #452]	; (8002830 <interpretaComando+0x310>)
 800266a:	6a3b      	ldr	r3, [r7, #32]
 800266c:	4413      	add	r3, r2
 800266e:	2200      	movs	r2, #0
 8002670:	701a      	strb	r2, [r3, #0]
				for (int k = 0; k <= 10; k++) {
 8002672:	6a3b      	ldr	r3, [r7, #32]
 8002674:	3301      	adds	r3, #1
 8002676:	623b      	str	r3, [r7, #32]
 8002678:	6a3b      	ldr	r3, [r7, #32]
 800267a:	2b0a      	cmp	r3, #10
 800267c:	ddf4      	ble.n	8002668 <interpretaComando+0x148>
				}

				j=0;
 800267e:	2300      	movs	r3, #0
 8002680:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
				HAL_UART_Transmit(&huart3, (uint8_t *)"vm\n",4, 100);
 8002684:	2364      	movs	r3, #100	; 0x64
 8002686:	2204      	movs	r2, #4
 8002688:	496b      	ldr	r1, [pc, #428]	; (8002838 <interpretaComando+0x318>)
 800268a:	4868      	ldr	r0, [pc, #416]	; (800282c <interpretaComando+0x30c>)
 800268c:	f00a f902 	bl	800c894 <HAL_UART_Transmit>
 8002690:	e13b      	b.n	800290a <interpretaComando+0x3ea>
			}
			else if(rx_buffer[i] == 'v'){
 8002692:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002696:	4a63      	ldr	r2, [pc, #396]	; (8002824 <interpretaComando+0x304>)
 8002698:	5cd3      	ldrb	r3, [r2, r3]
 800269a:	2b76      	cmp	r3, #118	; 0x76
 800269c:	d143      	bne.n	8002726 <interpretaComando+0x206>
				 if(rx_buffer[i+1] == 'f'){
 800269e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80026a2:	3301      	adds	r3, #1
 80026a4:	4a5f      	ldr	r2, [pc, #380]	; (8002824 <interpretaComando+0x304>)
 80026a6:	5cd3      	ldrb	r3, [r2, r3]
 80026a8:	2b66      	cmp	r3, #102	; 0x66
 80026aa:	f040 812e 	bne.w	800290a <interpretaComando+0x3ea>
					while(rx_buffer[i+2] != ' '){			//Almacenar dato en buffer hasta que se encuentre un espacio
 80026ae:	e012      	b.n	80026d6 <interpretaComando+0x1b6>
						auxString[j] = rx_buffer[i+2];
 80026b0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80026b4:	1c9a      	adds	r2, r3, #2
 80026b6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80026ba:	495a      	ldr	r1, [pc, #360]	; (8002824 <interpretaComando+0x304>)
 80026bc:	5c89      	ldrb	r1, [r1, r2]
 80026be:	4a5c      	ldr	r2, [pc, #368]	; (8002830 <interpretaComando+0x310>)
 80026c0:	54d1      	strb	r1, [r2, r3]
						j++;
 80026c2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80026c6:	3301      	adds	r3, #1
 80026c8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
						i++;
 80026cc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80026d0:	3301      	adds	r3, #1
 80026d2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					while(rx_buffer[i+2] != ' '){			//Almacenar dato en buffer hasta que se encuentre un espacio
 80026d6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80026da:	3302      	adds	r3, #2
 80026dc:	4a51      	ldr	r2, [pc, #324]	; (8002824 <interpretaComando+0x304>)
 80026de:	5cd3      	ldrb	r3, [r2, r3]
 80026e0:	2b20      	cmp	r3, #32
 80026e2:	d1e5      	bne.n	80026b0 <interpretaComando+0x190>
					}
					vf = strtod(&auxString[0], NULL);
 80026e4:	2100      	movs	r1, #0
 80026e6:	4852      	ldr	r0, [pc, #328]	; (8002830 <interpretaComando+0x310>)
 80026e8:	f00d f9f4 	bl	800fad4 <strtod>
 80026ec:	eeb0 7b40 	vmov.f64	d7, d0
 80026f0:	4b52      	ldr	r3, [pc, #328]	; (800283c <interpretaComando+0x31c>)
 80026f2:	ed83 7b00 	vstr	d7, [r3]

					for (int k = 0; k <= 10; k++) {
 80026f6:	2300      	movs	r3, #0
 80026f8:	61fb      	str	r3, [r7, #28]
 80026fa:	e007      	b.n	800270c <interpretaComando+0x1ec>
						auxString[k] = 0;
 80026fc:	4a4c      	ldr	r2, [pc, #304]	; (8002830 <interpretaComando+0x310>)
 80026fe:	69fb      	ldr	r3, [r7, #28]
 8002700:	4413      	add	r3, r2
 8002702:	2200      	movs	r2, #0
 8002704:	701a      	strb	r2, [r3, #0]
					for (int k = 0; k <= 10; k++) {
 8002706:	69fb      	ldr	r3, [r7, #28]
 8002708:	3301      	adds	r3, #1
 800270a:	61fb      	str	r3, [r7, #28]
 800270c:	69fb      	ldr	r3, [r7, #28]
 800270e:	2b0a      	cmp	r3, #10
 8002710:	ddf4      	ble.n	80026fc <interpretaComando+0x1dc>
					}

					j=0;
 8002712:	2300      	movs	r3, #0
 8002714:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
					HAL_UART_Transmit(&huart3,(uint8_t *)"vf\n", 4, 100);
 8002718:	2364      	movs	r3, #100	; 0x64
 800271a:	2204      	movs	r2, #4
 800271c:	4948      	ldr	r1, [pc, #288]	; (8002840 <interpretaComando+0x320>)
 800271e:	4843      	ldr	r0, [pc, #268]	; (800282c <interpretaComando+0x30c>)
 8002720:	f00a f8b8 	bl	800c894 <HAL_UART_Transmit>
 8002724:	e0f1      	b.n	800290a <interpretaComando+0x3ea>
				}
			}

			else if(rx_buffer[i] == 'v'){
 8002726:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800272a:	4a3e      	ldr	r2, [pc, #248]	; (8002824 <interpretaComando+0x304>)
 800272c:	5cd3      	ldrb	r3, [r2, r3]
 800272e:	2b76      	cmp	r3, #118	; 0x76
 8002730:	d143      	bne.n	80027ba <interpretaComando+0x29a>
				 if(rx_buffer[i+1] == 'i'){
 8002732:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002736:	3301      	adds	r3, #1
 8002738:	4a3a      	ldr	r2, [pc, #232]	; (8002824 <interpretaComando+0x304>)
 800273a:	5cd3      	ldrb	r3, [r2, r3]
 800273c:	2b69      	cmp	r3, #105	; 0x69
 800273e:	f040 80e4 	bne.w	800290a <interpretaComando+0x3ea>
					while(rx_buffer[i+2] != ' '){			//Almacenar dato en buffer hasta que se encuentre un espacio
 8002742:	e012      	b.n	800276a <interpretaComando+0x24a>
						auxString[j] = rx_buffer[i+2];
 8002744:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002748:	1c9a      	adds	r2, r3, #2
 800274a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800274e:	4935      	ldr	r1, [pc, #212]	; (8002824 <interpretaComando+0x304>)
 8002750:	5c89      	ldrb	r1, [r1, r2]
 8002752:	4a37      	ldr	r2, [pc, #220]	; (8002830 <interpretaComando+0x310>)
 8002754:	54d1      	strb	r1, [r2, r3]
						j++;
 8002756:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800275a:	3301      	adds	r3, #1
 800275c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
						i++;
 8002760:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002764:	3301      	adds	r3, #1
 8002766:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					while(rx_buffer[i+2] != ' '){			//Almacenar dato en buffer hasta que se encuentre un espacio
 800276a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800276e:	3302      	adds	r3, #2
 8002770:	4a2c      	ldr	r2, [pc, #176]	; (8002824 <interpretaComando+0x304>)
 8002772:	5cd3      	ldrb	r3, [r2, r3]
 8002774:	2b20      	cmp	r3, #32
 8002776:	d1e5      	bne.n	8002744 <interpretaComando+0x224>
					}
					vi = strtod(&auxString[0], NULL);
 8002778:	2100      	movs	r1, #0
 800277a:	482d      	ldr	r0, [pc, #180]	; (8002830 <interpretaComando+0x310>)
 800277c:	f00d f9aa 	bl	800fad4 <strtod>
 8002780:	eeb0 7b40 	vmov.f64	d7, d0
 8002784:	4b2f      	ldr	r3, [pc, #188]	; (8002844 <interpretaComando+0x324>)
 8002786:	ed83 7b00 	vstr	d7, [r3]

					for (int k = 0; k <= 10; k++) {
 800278a:	2300      	movs	r3, #0
 800278c:	61bb      	str	r3, [r7, #24]
 800278e:	e007      	b.n	80027a0 <interpretaComando+0x280>
						auxString[k] = 0;
 8002790:	4a27      	ldr	r2, [pc, #156]	; (8002830 <interpretaComando+0x310>)
 8002792:	69bb      	ldr	r3, [r7, #24]
 8002794:	4413      	add	r3, r2
 8002796:	2200      	movs	r2, #0
 8002798:	701a      	strb	r2, [r3, #0]
					for (int k = 0; k <= 10; k++) {
 800279a:	69bb      	ldr	r3, [r7, #24]
 800279c:	3301      	adds	r3, #1
 800279e:	61bb      	str	r3, [r7, #24]
 80027a0:	69bb      	ldr	r3, [r7, #24]
 80027a2:	2b0a      	cmp	r3, #10
 80027a4:	ddf4      	ble.n	8002790 <interpretaComando+0x270>
					}

					j=0;
 80027a6:	2300      	movs	r3, #0
 80027a8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
					HAL_UART_Transmit(&huart3,(uint8_t *)"vi\n", 4, 100);
 80027ac:	2364      	movs	r3, #100	; 0x64
 80027ae:	2204      	movs	r2, #4
 80027b0:	4925      	ldr	r1, [pc, #148]	; (8002848 <interpretaComando+0x328>)
 80027b2:	481e      	ldr	r0, [pc, #120]	; (800282c <interpretaComando+0x30c>)
 80027b4:	f00a f86e 	bl	800c894 <HAL_UART_Transmit>
 80027b8:	e0a7      	b.n	800290a <interpretaComando+0x3ea>
				}
			}


			else if(rx_buffer[i] == 'a'){
 80027ba:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80027be:	4a19      	ldr	r2, [pc, #100]	; (8002824 <interpretaComando+0x304>)
 80027c0:	5cd3      	ldrb	r3, [r2, r3]
 80027c2:	2b61      	cmp	r3, #97	; 0x61
 80027c4:	d159      	bne.n	800287a <interpretaComando+0x35a>
				 if(rx_buffer[i+1] == 'm'){
 80027c6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80027ca:	3301      	adds	r3, #1
 80027cc:	4a15      	ldr	r2, [pc, #84]	; (8002824 <interpretaComando+0x304>)
 80027ce:	5cd3      	ldrb	r3, [r2, r3]
 80027d0:	2b6d      	cmp	r3, #109	; 0x6d
 80027d2:	f040 809a 	bne.w	800290a <interpretaComando+0x3ea>
					while(rx_buffer[i+2] != ' '){			//Almacenar dato en buffer hasta que se encuentre un espacio
 80027d6:	e012      	b.n	80027fe <interpretaComando+0x2de>
						auxString[j] = rx_buffer[i+2];
 80027d8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80027dc:	1c9a      	adds	r2, r3, #2
 80027de:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80027e2:	4910      	ldr	r1, [pc, #64]	; (8002824 <interpretaComando+0x304>)
 80027e4:	5c89      	ldrb	r1, [r1, r2]
 80027e6:	4a12      	ldr	r2, [pc, #72]	; (8002830 <interpretaComando+0x310>)
 80027e8:	54d1      	strb	r1, [r2, r3]
						j++;
 80027ea:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80027ee:	3301      	adds	r3, #1
 80027f0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
						i++;
 80027f4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80027f8:	3301      	adds	r3, #1
 80027fa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					while(rx_buffer[i+2] != ' '){			//Almacenar dato en buffer hasta que se encuentre un espacio
 80027fe:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002802:	3302      	adds	r3, #2
 8002804:	4a07      	ldr	r2, [pc, #28]	; (8002824 <interpretaComando+0x304>)
 8002806:	5cd3      	ldrb	r3, [r2, r3]
 8002808:	2b20      	cmp	r3, #32
 800280a:	d1e5      	bne.n	80027d8 <interpretaComando+0x2b8>
					}
					amax = strtod(&auxString[0], NULL);
 800280c:	2100      	movs	r1, #0
 800280e:	4808      	ldr	r0, [pc, #32]	; (8002830 <interpretaComando+0x310>)
 8002810:	f00d f960 	bl	800fad4 <strtod>
 8002814:	eeb0 7b40 	vmov.f64	d7, d0
 8002818:	4b0c      	ldr	r3, [pc, #48]	; (800284c <interpretaComando+0x32c>)
 800281a:	ed83 7b00 	vstr	d7, [r3]

					for (int k = 0; k <= 10; k++) {
 800281e:	2300      	movs	r3, #0
 8002820:	617b      	str	r3, [r7, #20]
 8002822:	e01d      	b.n	8002860 <interpretaComando+0x340>
 8002824:	24000494 	.word	0x24000494
 8002828:	080124f8 	.word	0x080124f8
 800282c:	24000cf0 	.word	0x24000cf0
 8002830:	24000398 	.word	0x24000398
 8002834:	240003d8 	.word	0x240003d8
 8002838:	08012500 	.word	0x08012500
 800283c:	240003f8 	.word	0x240003f8
 8002840:	08012504 	.word	0x08012504
 8002844:	240003f0 	.word	0x240003f0
 8002848:	08012508 	.word	0x08012508
 800284c:	240003e0 	.word	0x240003e0
						auxString[k] = 0;
 8002850:	4aad      	ldr	r2, [pc, #692]	; (8002b08 <interpretaComando+0x5e8>)
 8002852:	697b      	ldr	r3, [r7, #20]
 8002854:	4413      	add	r3, r2
 8002856:	2200      	movs	r2, #0
 8002858:	701a      	strb	r2, [r3, #0]
					for (int k = 0; k <= 10; k++) {
 800285a:	697b      	ldr	r3, [r7, #20]
 800285c:	3301      	adds	r3, #1
 800285e:	617b      	str	r3, [r7, #20]
 8002860:	697b      	ldr	r3, [r7, #20]
 8002862:	2b0a      	cmp	r3, #10
 8002864:	ddf4      	ble.n	8002850 <interpretaComando+0x330>
					}

					j=0;
 8002866:	2300      	movs	r3, #0
 8002868:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
					HAL_UART_Transmit(&huart3,(uint8_t *)"am\n", 4, 100);
 800286c:	2364      	movs	r3, #100	; 0x64
 800286e:	2204      	movs	r2, #4
 8002870:	49a6      	ldr	r1, [pc, #664]	; (8002b0c <interpretaComando+0x5ec>)
 8002872:	48a7      	ldr	r0, [pc, #668]	; (8002b10 <interpretaComando+0x5f0>)
 8002874:	f00a f80e 	bl	800c894 <HAL_UART_Transmit>
 8002878:	e047      	b.n	800290a <interpretaComando+0x3ea>
				}
			}
			else if(rx_buffer[i] == 'j'){
 800287a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800287e:	4aa5      	ldr	r2, [pc, #660]	; (8002b14 <interpretaComando+0x5f4>)
 8002880:	5cd3      	ldrb	r3, [r2, r3]
 8002882:	2b6a      	cmp	r3, #106	; 0x6a
 8002884:	d141      	bne.n	800290a <interpretaComando+0x3ea>
				 if(rx_buffer[i+1] == 'm'){
 8002886:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800288a:	3301      	adds	r3, #1
 800288c:	4aa1      	ldr	r2, [pc, #644]	; (8002b14 <interpretaComando+0x5f4>)
 800288e:	5cd3      	ldrb	r3, [r2, r3]
 8002890:	2b6d      	cmp	r3, #109	; 0x6d
 8002892:	d13a      	bne.n	800290a <interpretaComando+0x3ea>
					while(rx_buffer[i+2] != ' '){			//Almacenar dato en buffer hasta que se encuentre un espacio
 8002894:	e012      	b.n	80028bc <interpretaComando+0x39c>
						auxString[j] = rx_buffer[i+2];
 8002896:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800289a:	1c9a      	adds	r2, r3, #2
 800289c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80028a0:	499c      	ldr	r1, [pc, #624]	; (8002b14 <interpretaComando+0x5f4>)
 80028a2:	5c89      	ldrb	r1, [r1, r2]
 80028a4:	4a98      	ldr	r2, [pc, #608]	; (8002b08 <interpretaComando+0x5e8>)
 80028a6:	54d1      	strb	r1, [r2, r3]
						j++;
 80028a8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80028ac:	3301      	adds	r3, #1
 80028ae:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
						i++;
 80028b2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80028b6:	3301      	adds	r3, #1
 80028b8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					while(rx_buffer[i+2] != ' '){			//Almacenar dato en buffer hasta que se encuentre un espacio
 80028bc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80028c0:	3302      	adds	r3, #2
 80028c2:	4a94      	ldr	r2, [pc, #592]	; (8002b14 <interpretaComando+0x5f4>)
 80028c4:	5cd3      	ldrb	r3, [r2, r3]
 80028c6:	2b20      	cmp	r3, #32
 80028c8:	d1e5      	bne.n	8002896 <interpretaComando+0x376>
					}
					jmax = strtod(&auxString[0], NULL);
 80028ca:	2100      	movs	r1, #0
 80028cc:	488e      	ldr	r0, [pc, #568]	; (8002b08 <interpretaComando+0x5e8>)
 80028ce:	f00d f901 	bl	800fad4 <strtod>
 80028d2:	eeb0 7b40 	vmov.f64	d7, d0
 80028d6:	4b90      	ldr	r3, [pc, #576]	; (8002b18 <interpretaComando+0x5f8>)
 80028d8:	ed83 7b00 	vstr	d7, [r3]

					for (int k = 0; k <= 10; k++) {
 80028dc:	2300      	movs	r3, #0
 80028de:	613b      	str	r3, [r7, #16]
 80028e0:	e007      	b.n	80028f2 <interpretaComando+0x3d2>
						auxString[k] = 0;
 80028e2:	4a89      	ldr	r2, [pc, #548]	; (8002b08 <interpretaComando+0x5e8>)
 80028e4:	693b      	ldr	r3, [r7, #16]
 80028e6:	4413      	add	r3, r2
 80028e8:	2200      	movs	r2, #0
 80028ea:	701a      	strb	r2, [r3, #0]
					for (int k = 0; k <= 10; k++) {
 80028ec:	693b      	ldr	r3, [r7, #16]
 80028ee:	3301      	adds	r3, #1
 80028f0:	613b      	str	r3, [r7, #16]
 80028f2:	693b      	ldr	r3, [r7, #16]
 80028f4:	2b0a      	cmp	r3, #10
 80028f6:	ddf4      	ble.n	80028e2 <interpretaComando+0x3c2>
					}
					j=0;
 80028f8:	2300      	movs	r3, #0
 80028fa:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
					HAL_UART_Transmit(&huart3,(uint8_t *)"jm\n", 4, 100);
 80028fe:	2364      	movs	r3, #100	; 0x64
 8002900:	2204      	movs	r2, #4
 8002902:	4986      	ldr	r1, [pc, #536]	; (8002b1c <interpretaComando+0x5fc>)
 8002904:	4882      	ldr	r0, [pc, #520]	; (8002b10 <interpretaComando+0x5f0>)
 8002906:	f009 ffc5 	bl	800c894 <HAL_UART_Transmit>
				}
			}
			i++;
 800290a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800290e:	3301      	adds	r3, #1
 8002910:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		while(rx_buffer[i] != 0){
 8002914:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002918:	4a7e      	ldr	r2, [pc, #504]	; (8002b14 <interpretaComando+0x5f4>)
 800291a:	5cd3      	ldrb	r3, [r2, r3]
 800291c:	2b00      	cmp	r3, #0
 800291e:	f47f ae76 	bne.w	800260e <interpretaComando+0xee>
		}


		break;
 8002922:	e1e9      	b.n	8002cf8 <interpretaComando+0x7d8>



	case 'M':						//:M(motor) + numero de motor (1. 2. 3) + Angulo de 0 a 90
	case 'm':
		switch(rx_buffer[1]){
 8002924:	4b7b      	ldr	r3, [pc, #492]	; (8002b14 <interpretaComando+0x5f4>)
 8002926:	785b      	ldrb	r3, [r3, #1]
 8002928:	2b33      	cmp	r3, #51	; 0x33
 800292a:	d05b      	beq.n	80029e4 <interpretaComando+0x4c4>
 800292c:	2b33      	cmp	r3, #51	; 0x33
 800292e:	dc7f      	bgt.n	8002a30 <interpretaComando+0x510>
 8002930:	2b31      	cmp	r3, #49	; 0x31
 8002932:	d002      	beq.n	800293a <interpretaComando+0x41a>
 8002934:	2b32      	cmp	r3, #50	; 0x32
 8002936:	d02f      	beq.n	8002998 <interpretaComando+0x478>
 8002938:	e07a      	b.n	8002a30 <interpretaComando+0x510>
		case '1':
			HAL_UART_Transmit(&huart3,(uint8_t *)"Motor1\n\r", 8, 100);
 800293a:	2364      	movs	r3, #100	; 0x64
 800293c:	2208      	movs	r2, #8
 800293e:	4978      	ldr	r1, [pc, #480]	; (8002b20 <interpretaComando+0x600>)
 8002940:	4873      	ldr	r0, [pc, #460]	; (8002b10 <interpretaComando+0x5f0>)
 8002942:	f009 ffa7 	bl	800c894 <HAL_UART_Transmit>
			aux =  strtod(&rx_buffer[2], NULL);
 8002946:	2100      	movs	r1, #0
 8002948:	4876      	ldr	r0, [pc, #472]	; (8002b24 <interpretaComando+0x604>)
 800294a:	f00d f8c3 	bl	800fad4 <strtod>
 800294e:	eeb0 7b40 	vmov.f64	d7, d0
 8002952:	4b75      	ldr	r3, [pc, #468]	; (8002b28 <interpretaComando+0x608>)
 8002954:	ed83 7b00 	vstr	d7, [r3]
			if(aux>=0 && aux<=90){  // verificacion de limites articulares
 8002958:	4b73      	ldr	r3, [pc, #460]	; (8002b28 <interpretaComando+0x608>)
 800295a:	ed93 7b00 	vldr	d7, [r3]
 800295e:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8002962:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002966:	db10      	blt.n	800298a <interpretaComando+0x46a>
 8002968:	4b6f      	ldr	r3, [pc, #444]	; (8002b28 <interpretaComando+0x608>)
 800296a:	ed93 7b00 	vldr	d7, [r3]
 800296e:	ed9f 6b64 	vldr	d6, [pc, #400]	; 8002b00 <interpretaComando+0x5e0>
 8002972:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8002976:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800297a:	d806      	bhi.n	800298a <interpretaComando+0x46a>
				titha1 = aux;
 800297c:	4b6a      	ldr	r3, [pc, #424]	; (8002b28 <interpretaComando+0x608>)
 800297e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002982:	496a      	ldr	r1, [pc, #424]	; (8002b2c <interpretaComando+0x60c>)
 8002984:	e9c1 2300 	strd	r2, r3, [r1]
			}
			else{
				HAL_UART_Transmit(&huart3,(uint8_t *)"ErrorPos\n\r", 10, 100);
			}
			break;
 8002988:	e059      	b.n	8002a3e <interpretaComando+0x51e>
				HAL_UART_Transmit(&huart3,(uint8_t *)"ErrorPos\n\r", 10, 100);
 800298a:	2364      	movs	r3, #100	; 0x64
 800298c:	220a      	movs	r2, #10
 800298e:	4968      	ldr	r1, [pc, #416]	; (8002b30 <interpretaComando+0x610>)
 8002990:	485f      	ldr	r0, [pc, #380]	; (8002b10 <interpretaComando+0x5f0>)
 8002992:	f009 ff7f 	bl	800c894 <HAL_UART_Transmit>
			break;
 8002996:	e052      	b.n	8002a3e <interpretaComando+0x51e>
		case '2':
			HAL_UART_Transmit(&huart3,(uint8_t *)"Motor2\n\r", 8, 100);
 8002998:	2364      	movs	r3, #100	; 0x64
 800299a:	2208      	movs	r2, #8
 800299c:	4965      	ldr	r1, [pc, #404]	; (8002b34 <interpretaComando+0x614>)
 800299e:	485c      	ldr	r0, [pc, #368]	; (8002b10 <interpretaComando+0x5f0>)
 80029a0:	f009 ff78 	bl	800c894 <HAL_UART_Transmit>
			if(aux>=0 && aux<=90){  // verificacion de limites articulares
 80029a4:	4b60      	ldr	r3, [pc, #384]	; (8002b28 <interpretaComando+0x608>)
 80029a6:	ed93 7b00 	vldr	d7, [r3]
 80029aa:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80029ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80029b2:	db10      	blt.n	80029d6 <interpretaComando+0x4b6>
 80029b4:	4b5c      	ldr	r3, [pc, #368]	; (8002b28 <interpretaComando+0x608>)
 80029b6:	ed93 7b00 	vldr	d7, [r3]
 80029ba:	ed9f 6b51 	vldr	d6, [pc, #324]	; 8002b00 <interpretaComando+0x5e0>
 80029be:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80029c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80029c6:	d806      	bhi.n	80029d6 <interpretaComando+0x4b6>
				titha2 = aux;
 80029c8:	4b57      	ldr	r3, [pc, #348]	; (8002b28 <interpretaComando+0x608>)
 80029ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029ce:	495a      	ldr	r1, [pc, #360]	; (8002b38 <interpretaComando+0x618>)
 80029d0:	e9c1 2300 	strd	r2, r3, [r1]
			}
			else{
				HAL_UART_Transmit(&huart3,(uint8_t *)"ErrorPos\n\r", 10, 100);
			}
			break;
 80029d4:	e033      	b.n	8002a3e <interpretaComando+0x51e>
				HAL_UART_Transmit(&huart3,(uint8_t *)"ErrorPos\n\r", 10, 100);
 80029d6:	2364      	movs	r3, #100	; 0x64
 80029d8:	220a      	movs	r2, #10
 80029da:	4955      	ldr	r1, [pc, #340]	; (8002b30 <interpretaComando+0x610>)
 80029dc:	484c      	ldr	r0, [pc, #304]	; (8002b10 <interpretaComando+0x5f0>)
 80029de:	f009 ff59 	bl	800c894 <HAL_UART_Transmit>
			break;
 80029e2:	e02c      	b.n	8002a3e <interpretaComando+0x51e>
		case '3':
			HAL_UART_Transmit(&huart3,(uint8_t *)"Motor3\n\r", 8, 100);
 80029e4:	2364      	movs	r3, #100	; 0x64
 80029e6:	2208      	movs	r2, #8
 80029e8:	4954      	ldr	r1, [pc, #336]	; (8002b3c <interpretaComando+0x61c>)
 80029ea:	4849      	ldr	r0, [pc, #292]	; (8002b10 <interpretaComando+0x5f0>)
 80029ec:	f009 ff52 	bl	800c894 <HAL_UART_Transmit>
			if(aux>=0 && aux<=90){   // verificacion de limites articulares
 80029f0:	4b4d      	ldr	r3, [pc, #308]	; (8002b28 <interpretaComando+0x608>)
 80029f2:	ed93 7b00 	vldr	d7, [r3]
 80029f6:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80029fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80029fe:	db10      	blt.n	8002a22 <interpretaComando+0x502>
 8002a00:	4b49      	ldr	r3, [pc, #292]	; (8002b28 <interpretaComando+0x608>)
 8002a02:	ed93 7b00 	vldr	d7, [r3]
 8002a06:	ed9f 6b3e 	vldr	d6, [pc, #248]	; 8002b00 <interpretaComando+0x5e0>
 8002a0a:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8002a0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a12:	d806      	bhi.n	8002a22 <interpretaComando+0x502>
				titha3 = aux;
 8002a14:	4b44      	ldr	r3, [pc, #272]	; (8002b28 <interpretaComando+0x608>)
 8002a16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a1a:	4949      	ldr	r1, [pc, #292]	; (8002b40 <interpretaComando+0x620>)
 8002a1c:	e9c1 2300 	strd	r2, r3, [r1]
			}
			else{
				HAL_UART_Transmit(&huart3,(uint8_t *)"ErrorPos\n\r", 10, 100);
			}
			break;
 8002a20:	e00d      	b.n	8002a3e <interpretaComando+0x51e>
				HAL_UART_Transmit(&huart3,(uint8_t *)"ErrorPos\n\r", 10, 100);
 8002a22:	2364      	movs	r3, #100	; 0x64
 8002a24:	220a      	movs	r2, #10
 8002a26:	4942      	ldr	r1, [pc, #264]	; (8002b30 <interpretaComando+0x610>)
 8002a28:	4839      	ldr	r0, [pc, #228]	; (8002b10 <interpretaComando+0x5f0>)
 8002a2a:	f009 ff33 	bl	800c894 <HAL_UART_Transmit>
			break;
 8002a2e:	e006      	b.n	8002a3e <interpretaComando+0x51e>

		default:
			HAL_UART_Transmit(&huart3,(uint8_t *)"ErrorMotor\n\r", 12, 100);
 8002a30:	2364      	movs	r3, #100	; 0x64
 8002a32:	220c      	movs	r2, #12
 8002a34:	4943      	ldr	r1, [pc, #268]	; (8002b44 <interpretaComando+0x624>)
 8002a36:	4836      	ldr	r0, [pc, #216]	; (8002b10 <interpretaComando+0x5f0>)
 8002a38:	f009 ff2c 	bl	800c894 <HAL_UART_Transmit>
			break;
 8002a3c:	bf00      	nop
		}
		break;
 8002a3e:	e15b      	b.n	8002cf8 <interpretaComando+0x7d8>



	case 'P':												//:Px0.1 y0.1 z-0.5 \0 (Eje, valor, espacio, Eje, valor, espacio, Eje, valor, espacio)
	case 'p':
		HAL_UART_Transmit(&huart3,(uint8_t *)"Punto\n\r", 7, 100);
 8002a40:	2364      	movs	r3, #100	; 0x64
 8002a42:	2207      	movs	r2, #7
 8002a44:	4940      	ldr	r1, [pc, #256]	; (8002b48 <interpretaComando+0x628>)
 8002a46:	4832      	ldr	r0, [pc, #200]	; (8002b10 <interpretaComando+0x5f0>)
 8002a48:	f009 ff24 	bl	800c894 <HAL_UART_Transmit>
		flagErrorEndStop = 0;
 8002a4c:	493f      	ldr	r1, [pc, #252]	; (8002b4c <interpretaComando+0x62c>)
 8002a4e:	f04f 0200 	mov.w	r2, #0
 8002a52:	f04f 0300 	mov.w	r3, #0
 8002a56:	e9c1 2300 	strd	r2, r3, [r1]
		i = 1;
 8002a5a:	2301      	movs	r3, #1
 8002a5c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		j = 0;
 8002a60:	2300      	movs	r3, #0
 8002a62:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		while(rx_buffer[i] != 0){
 8002a66:	e0f8      	b.n	8002c5a <interpretaComando+0x73a>
			if(rx_buffer[i] == 'x'){
 8002a68:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002a6c:	4a29      	ldr	r2, [pc, #164]	; (8002b14 <interpretaComando+0x5f4>)
 8002a6e:	5cd3      	ldrb	r3, [r2, r3]
 8002a70:	2b78      	cmp	r3, #120	; 0x78
 8002a72:	d13b      	bne.n	8002aec <interpretaComando+0x5cc>
				while(rx_buffer[i+1] != ' '){			//Almacenar dato en buffer hasta que se encuentre un espacio
 8002a74:	e012      	b.n	8002a9c <interpretaComando+0x57c>
					auxString[j] = rx_buffer[i+1];
 8002a76:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002a7a:	1c5a      	adds	r2, r3, #1
 8002a7c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8002a80:	4924      	ldr	r1, [pc, #144]	; (8002b14 <interpretaComando+0x5f4>)
 8002a82:	5c89      	ldrb	r1, [r1, r2]
 8002a84:	4a20      	ldr	r2, [pc, #128]	; (8002b08 <interpretaComando+0x5e8>)
 8002a86:	54d1      	strb	r1, [r2, r3]
					j++;
 8002a88:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8002a8c:	3301      	adds	r3, #1
 8002a8e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
					i++;
 8002a92:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002a96:	3301      	adds	r3, #1
 8002a98:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				while(rx_buffer[i+1] != ' '){			//Almacenar dato en buffer hasta que se encuentre un espacio
 8002a9c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002aa0:	3301      	adds	r3, #1
 8002aa2:	4a1c      	ldr	r2, [pc, #112]	; (8002b14 <interpretaComando+0x5f4>)
 8002aa4:	5cd3      	ldrb	r3, [r2, r3]
 8002aa6:	2b20      	cmp	r3, #32
 8002aa8:	d1e5      	bne.n	8002a76 <interpretaComando+0x556>
				}
				Pfin.x = strtod(&auxString[0], NULL);
 8002aaa:	2100      	movs	r1, #0
 8002aac:	4816      	ldr	r0, [pc, #88]	; (8002b08 <interpretaComando+0x5e8>)
 8002aae:	f00d f811 	bl	800fad4 <strtod>
 8002ab2:	eeb0 7b40 	vmov.f64	d7, d0
 8002ab6:	4b26      	ldr	r3, [pc, #152]	; (8002b50 <interpretaComando+0x630>)
 8002ab8:	ed83 7b00 	vstr	d7, [r3]
				for (int k = 0; k <= 10; k++) {
 8002abc:	2300      	movs	r3, #0
 8002abe:	60fb      	str	r3, [r7, #12]
 8002ac0:	e007      	b.n	8002ad2 <interpretaComando+0x5b2>
					auxString[k] = 0;
 8002ac2:	4a11      	ldr	r2, [pc, #68]	; (8002b08 <interpretaComando+0x5e8>)
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	4413      	add	r3, r2
 8002ac8:	2200      	movs	r2, #0
 8002aca:	701a      	strb	r2, [r3, #0]
				for (int k = 0; k <= 10; k++) {
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	3301      	adds	r3, #1
 8002ad0:	60fb      	str	r3, [r7, #12]
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	2b0a      	cmp	r3, #10
 8002ad6:	ddf4      	ble.n	8002ac2 <interpretaComando+0x5a2>
				}
				j=0;
 8002ad8:	2300      	movs	r3, #0
 8002ada:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
				HAL_UART_Transmit(&huart3, (uint8_t *)"PuntoX_ok\n\r", 11, 100);
 8002ade:	2364      	movs	r3, #100	; 0x64
 8002ae0:	220b      	movs	r2, #11
 8002ae2:	491c      	ldr	r1, [pc, #112]	; (8002b54 <interpretaComando+0x634>)
 8002ae4:	480a      	ldr	r0, [pc, #40]	; (8002b10 <interpretaComando+0x5f0>)
 8002ae6:	f009 fed5 	bl	800c894 <HAL_UART_Transmit>
 8002aea:	e0b1      	b.n	8002c50 <interpretaComando+0x730>
			}
			else if(rx_buffer[i] == 'y'){
 8002aec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002af0:	4a08      	ldr	r2, [pc, #32]	; (8002b14 <interpretaComando+0x5f4>)
 8002af2:	5cd3      	ldrb	r3, [r2, r3]
 8002af4:	2b79      	cmp	r3, #121	; 0x79
 8002af6:	d16a      	bne.n	8002bce <interpretaComando+0x6ae>
				while(rx_buffer[i+1] != ' '){			//Almacenar dato en buffer hasta que se encuentre un espacio
 8002af8:	e041      	b.n	8002b7e <interpretaComando+0x65e>
 8002afa:	bf00      	nop
 8002afc:	f3af 8000 	nop.w
 8002b00:	00000000 	.word	0x00000000
 8002b04:	40568000 	.word	0x40568000
 8002b08:	24000398 	.word	0x24000398
 8002b0c:	0801250c 	.word	0x0801250c
 8002b10:	24000cf0 	.word	0x24000cf0
 8002b14:	24000494 	.word	0x24000494
 8002b18:	240003e8 	.word	0x240003e8
 8002b1c:	08012510 	.word	0x08012510
 8002b20:	08012514 	.word	0x08012514
 8002b24:	24000496 	.word	0x24000496
 8002b28:	24000390 	.word	0x24000390
 8002b2c:	240003c0 	.word	0x240003c0
 8002b30:	08012520 	.word	0x08012520
 8002b34:	0801252c 	.word	0x0801252c
 8002b38:	240003c8 	.word	0x240003c8
 8002b3c:	08012538 	.word	0x08012538
 8002b40:	240003d0 	.word	0x240003d0
 8002b44:	08012544 	.word	0x08012544
 8002b48:	08012554 	.word	0x08012554
 8002b4c:	24000520 	.word	0x24000520
 8002b50:	24000418 	.word	0x24000418
 8002b54:	0801255c 	.word	0x0801255c
					auxString[j] = rx_buffer[i+1];
 8002b58:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002b5c:	1c5a      	adds	r2, r3, #1
 8002b5e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8002b62:	4969      	ldr	r1, [pc, #420]	; (8002d08 <interpretaComando+0x7e8>)
 8002b64:	5c89      	ldrb	r1, [r1, r2]
 8002b66:	4a69      	ldr	r2, [pc, #420]	; (8002d0c <interpretaComando+0x7ec>)
 8002b68:	54d1      	strb	r1, [r2, r3]
					j++;
 8002b6a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8002b6e:	3301      	adds	r3, #1
 8002b70:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
					i++;
 8002b74:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002b78:	3301      	adds	r3, #1
 8002b7a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				while(rx_buffer[i+1] != ' '){			//Almacenar dato en buffer hasta que se encuentre un espacio
 8002b7e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002b82:	3301      	adds	r3, #1
 8002b84:	4a60      	ldr	r2, [pc, #384]	; (8002d08 <interpretaComando+0x7e8>)
 8002b86:	5cd3      	ldrb	r3, [r2, r3]
 8002b88:	2b20      	cmp	r3, #32
 8002b8a:	d1e5      	bne.n	8002b58 <interpretaComando+0x638>
				}
				Pfin.y = strtod(&auxString[0], NULL);
 8002b8c:	2100      	movs	r1, #0
 8002b8e:	485f      	ldr	r0, [pc, #380]	; (8002d0c <interpretaComando+0x7ec>)
 8002b90:	f00c ffa0 	bl	800fad4 <strtod>
 8002b94:	eeb0 7b40 	vmov.f64	d7, d0
 8002b98:	4b5d      	ldr	r3, [pc, #372]	; (8002d10 <interpretaComando+0x7f0>)
 8002b9a:	ed83 7b02 	vstr	d7, [r3, #8]
				for (int k = 0; k <= 10; k++) {
 8002b9e:	2300      	movs	r3, #0
 8002ba0:	60bb      	str	r3, [r7, #8]
 8002ba2:	e007      	b.n	8002bb4 <interpretaComando+0x694>
					auxString[k] = 0;
 8002ba4:	4a59      	ldr	r2, [pc, #356]	; (8002d0c <interpretaComando+0x7ec>)
 8002ba6:	68bb      	ldr	r3, [r7, #8]
 8002ba8:	4413      	add	r3, r2
 8002baa:	2200      	movs	r2, #0
 8002bac:	701a      	strb	r2, [r3, #0]
				for (int k = 0; k <= 10; k++) {
 8002bae:	68bb      	ldr	r3, [r7, #8]
 8002bb0:	3301      	adds	r3, #1
 8002bb2:	60bb      	str	r3, [r7, #8]
 8002bb4:	68bb      	ldr	r3, [r7, #8]
 8002bb6:	2b0a      	cmp	r3, #10
 8002bb8:	ddf4      	ble.n	8002ba4 <interpretaComando+0x684>
				}
				j=0;
 8002bba:	2300      	movs	r3, #0
 8002bbc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
				HAL_UART_Transmit(&huart3,(uint8_t *)"PuntoY_ok\n\r", 11, 100);
 8002bc0:	2364      	movs	r3, #100	; 0x64
 8002bc2:	220b      	movs	r2, #11
 8002bc4:	4953      	ldr	r1, [pc, #332]	; (8002d14 <interpretaComando+0x7f4>)
 8002bc6:	4854      	ldr	r0, [pc, #336]	; (8002d18 <interpretaComando+0x7f8>)
 8002bc8:	f009 fe64 	bl	800c894 <HAL_UART_Transmit>
 8002bcc:	e040      	b.n	8002c50 <interpretaComando+0x730>
			}
			else if(rx_buffer[i] == 'z'){
 8002bce:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002bd2:	4a4d      	ldr	r2, [pc, #308]	; (8002d08 <interpretaComando+0x7e8>)
 8002bd4:	5cd3      	ldrb	r3, [r2, r3]
 8002bd6:	2b7a      	cmp	r3, #122	; 0x7a
 8002bd8:	d13a      	bne.n	8002c50 <interpretaComando+0x730>
				while(rx_buffer[i+1] != ' '){			//Almacenar dato en buffer hasta que se encuentre un espacio
 8002bda:	e012      	b.n	8002c02 <interpretaComando+0x6e2>
					auxString[j] = rx_buffer[i+1];
 8002bdc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002be0:	1c5a      	adds	r2, r3, #1
 8002be2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8002be6:	4948      	ldr	r1, [pc, #288]	; (8002d08 <interpretaComando+0x7e8>)
 8002be8:	5c89      	ldrb	r1, [r1, r2]
 8002bea:	4a48      	ldr	r2, [pc, #288]	; (8002d0c <interpretaComando+0x7ec>)
 8002bec:	54d1      	strb	r1, [r2, r3]
					j++;
 8002bee:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8002bf2:	3301      	adds	r3, #1
 8002bf4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
					i++;
 8002bf8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002bfc:	3301      	adds	r3, #1
 8002bfe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				while(rx_buffer[i+1] != ' '){			//Almacenar dato en buffer hasta que se encuentre un espacio
 8002c02:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002c06:	3301      	adds	r3, #1
 8002c08:	4a3f      	ldr	r2, [pc, #252]	; (8002d08 <interpretaComando+0x7e8>)
 8002c0a:	5cd3      	ldrb	r3, [r2, r3]
 8002c0c:	2b20      	cmp	r3, #32
 8002c0e:	d1e5      	bne.n	8002bdc <interpretaComando+0x6bc>
				}
				Pfin.z = strtod(&auxString[0], NULL);
 8002c10:	2100      	movs	r1, #0
 8002c12:	483e      	ldr	r0, [pc, #248]	; (8002d0c <interpretaComando+0x7ec>)
 8002c14:	f00c ff5e 	bl	800fad4 <strtod>
 8002c18:	eeb0 7b40 	vmov.f64	d7, d0
 8002c1c:	4b3c      	ldr	r3, [pc, #240]	; (8002d10 <interpretaComando+0x7f0>)
 8002c1e:	ed83 7b04 	vstr	d7, [r3, #16]
				for (int k = 0; k <= 10; k++) {
 8002c22:	2300      	movs	r3, #0
 8002c24:	607b      	str	r3, [r7, #4]
 8002c26:	e007      	b.n	8002c38 <interpretaComando+0x718>
					auxString[k] = 0;
 8002c28:	4a38      	ldr	r2, [pc, #224]	; (8002d0c <interpretaComando+0x7ec>)
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	4413      	add	r3, r2
 8002c2e:	2200      	movs	r2, #0
 8002c30:	701a      	strb	r2, [r3, #0]
				for (int k = 0; k <= 10; k++) {
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	3301      	adds	r3, #1
 8002c36:	607b      	str	r3, [r7, #4]
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	2b0a      	cmp	r3, #10
 8002c3c:	ddf4      	ble.n	8002c28 <interpretaComando+0x708>
				}
				j=0;
 8002c3e:	2300      	movs	r3, #0
 8002c40:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
				HAL_UART_Transmit(&huart3,(uint8_t *)"PuntoZ_ok\n\r", 11, 100);
 8002c44:	2364      	movs	r3, #100	; 0x64
 8002c46:	220b      	movs	r2, #11
 8002c48:	4934      	ldr	r1, [pc, #208]	; (8002d1c <interpretaComando+0x7fc>)
 8002c4a:	4833      	ldr	r0, [pc, #204]	; (8002d18 <interpretaComando+0x7f8>)
 8002c4c:	f009 fe22 	bl	800c894 <HAL_UART_Transmit>
			}
			i++;
 8002c50:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002c54:	3301      	adds	r3, #1
 8002c56:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		while(rx_buffer[i] != 0){
 8002c5a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002c5e:	4a2a      	ldr	r2, [pc, #168]	; (8002d08 <interpretaComando+0x7e8>)
 8002c60:	5cd3      	ldrb	r3, [r2, r3]
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	f47f af00 	bne.w	8002a68 <interpretaComando+0x548>
		}
		cinematicaInversa(Pfin);
 8002c68:	4b29      	ldr	r3, [pc, #164]	; (8002d10 <interpretaComando+0x7f0>)
 8002c6a:	ed93 5b00 	vldr	d5, [r3]
 8002c6e:	ed93 6b02 	vldr	d6, [r3, #8]
 8002c72:	ed93 7b04 	vldr	d7, [r3, #16]
 8002c76:	eeb0 0b45 	vmov.f64	d0, d5
 8002c7a:	eeb0 1b46 	vmov.f64	d1, d6
 8002c7e:	eeb0 2b47 	vmov.f64	d2, d7
 8002c82:	f7fd fefd 	bl	8000a80 <cinematicaInversa>
		break;
 8002c86:	e037      	b.n	8002cf8 <interpretaComando+0x7d8>
	case 'H':
	case 'h':
		HAL_UART_Transmit(&huart3,(uint8_t *)"Homing\n\r", 8, 100);
 8002c88:	2364      	movs	r3, #100	; 0x64
 8002c8a:	2208      	movs	r2, #8
 8002c8c:	4924      	ldr	r1, [pc, #144]	; (8002d20 <interpretaComando+0x800>)
 8002c8e:	4822      	ldr	r0, [pc, #136]	; (8002d18 <interpretaComando+0x7f8>)
 8002c90:	f009 fe00 	bl	800c894 <HAL_UART_Transmit>
		//PREGUNTA : se activan los enables en el homming para asegurarse de que el robot empiece a operar en una posicion segura  ?
		HAL_GPIO_WritePin(S_Enable_1_GPIO_Port, S_Enable_1_Pin, GPIO_PIN_RESET);  //activo Enable
 8002c94:	2200      	movs	r2, #0
 8002c96:	2110      	movs	r1, #16
 8002c98:	4822      	ldr	r0, [pc, #136]	; (8002d24 <interpretaComando+0x804>)
 8002c9a:	f005 fa1f 	bl	80080dc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(S_Enable_2_GPIO_Port, S_Enable_2_Pin, GPIO_PIN_RESET);
 8002c9e:	2200      	movs	r2, #0
 8002ca0:	2120      	movs	r1, #32
 8002ca2:	4820      	ldr	r0, [pc, #128]	; (8002d24 <interpretaComando+0x804>)
 8002ca4:	f005 fa1a 	bl	80080dc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(S_Enable_3_GPIO_Port, S_Enable_3_Pin, GPIO_PIN_RESET);
 8002ca8:	2200      	movs	r2, #0
 8002caa:	2140      	movs	r1, #64	; 0x40
 8002cac:	481d      	ldr	r0, [pc, #116]	; (8002d24 <interpretaComando+0x804>)
 8002cae:	f005 fa15 	bl	80080dc <HAL_GPIO_WritePin>
		homingAprox();
 8002cb2:	f7fe ff6d 	bl	8001b90 <homingAprox>
		homingArm1();
 8002cb6:	f7ff f95b 	bl	8001f70 <homingArm1>
		homingArm2();
 8002cba:	f7ff fa3d 	bl	8002138 <homingArm2>
		homingArm3();
 8002cbe:	f7ff fb43 	bl	8002348 <homingArm3>
		Pini.x=0;
 8002cc2:	4919      	ldr	r1, [pc, #100]	; (8002d28 <interpretaComando+0x808>)
 8002cc4:	f04f 0200 	mov.w	r2, #0
 8002cc8:	f04f 0300 	mov.w	r3, #0
 8002ccc:	e9c1 2300 	strd	r2, r3, [r1]
		Pini.y=0;
 8002cd0:	4915      	ldr	r1, [pc, #84]	; (8002d28 <interpretaComando+0x808>)
 8002cd2:	f04f 0200 	mov.w	r2, #0
 8002cd6:	f04f 0300 	mov.w	r3, #0
 8002cda:	e9c1 2302 	strd	r2, r3, [r1, #8]
		Pini.z = -0.334658034417224;
 8002cde:	4912      	ldr	r1, [pc, #72]	; (8002d28 <interpretaComando+0x808>)
 8002ce0:	a307      	add	r3, pc, #28	; (adr r3, 8002d00 <interpretaComando+0x7e0>)
 8002ce2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ce6:	e9c1 2304 	strd	r2, r3, [r1, #16]
		HAL_UART_Transmit(&huart3,(uint8_t *)"Fin_Homing\n\r", 12, 100);
 8002cea:	2364      	movs	r3, #100	; 0x64
 8002cec:	220c      	movs	r2, #12
 8002cee:	490f      	ldr	r1, [pc, #60]	; (8002d2c <interpretaComando+0x80c>)
 8002cf0:	4809      	ldr	r0, [pc, #36]	; (8002d18 <interpretaComando+0x7f8>)
 8002cf2:	f009 fdcf 	bl	800c894 <HAL_UART_Transmit>

	break;
 8002cf6:	bf00      	nop

	}

}
 8002cf8:	bf00      	nop
 8002cfa:	3728      	adds	r7, #40	; 0x28
 8002cfc:	46bd      	mov	sp, r7
 8002cfe:	bd80      	pop	{r7, pc}
 8002d00:	884a9983 	.word	0x884a9983
 8002d04:	bfd56b09 	.word	0xbfd56b09
 8002d08:	24000494 	.word	0x24000494
 8002d0c:	24000398 	.word	0x24000398
 8002d10:	24000418 	.word	0x24000418
 8002d14:	08012568 	.word	0x08012568
 8002d18:	24000cf0 	.word	0x24000cf0
 8002d1c:	08012574 	.word	0x08012574
 8002d20:	08012580 	.word	0x08012580
 8002d24:	58020c00 	.word	0x58020c00
 8002d28:	24000400 	.word	0x24000400
 8002d2c:	0801258c 	.word	0x0801258c

08002d30 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002d30:	b580      	push	{r7, lr}
 8002d32:	ed2d 8b02 	vpush	{d8}
 8002d36:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002d38:	f004 f8a0 	bl	8006e7c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002d3c:	f000 f96c 	bl	8003018 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002d40:	f7fe fe28 	bl	8001994 <MX_GPIO_Init>
  MX_TIM2_Init();
 8002d44:	f001 faa0 	bl	8004288 <MX_TIM2_Init>
  MX_TIM3_Init();
 8002d48:	f001 fb0e 	bl	8004368 <MX_TIM3_Init>
  MX_TIM4_Init();
 8002d4c:	f001 fb7e 	bl	800444c <MX_TIM4_Init>
  MX_USART3_UART_Init();
 8002d50:	f003 fef2 	bl	8006b38 <MX_USART3_UART_Init>
  MX_TIM12_Init();
 8002d54:	f001 fc3c 	bl	80045d0 <MX_TIM12_Init>
  MX_TIM13_Init();
 8002d58:	f001 fc9e 	bl	8004698 <MX_TIM13_Init>
  MX_TIM14_Init();
 8002d5c:	f001 fcec 	bl	8004738 <MX_TIM14_Init>
  MX_TIM5_Init();
 8002d60:	f001 fbe6 	bl	8004530 <MX_TIM5_Init>
  MX_TIM15_Init();
 8002d64:	f001 fd38 	bl	80047d8 <MX_TIM15_Init>
  MX_USART1_UART_Init();
 8002d68:	f003 fe4e 	bl	8006a08 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8002d6c:	f003 fe98 	bl	8006aa0 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
	HAL_UART_Transmit(&huart3, data, sizeof(data), 100); //Enviamos el mensaje: Start
 8002d70:	2364      	movs	r3, #100	; 0x64
 8002d72:	2207      	movs	r2, #7
 8002d74:	498a      	ldr	r1, [pc, #552]	; (8002fa0 <main+0x270>)
 8002d76:	488b      	ldr	r0, [pc, #556]	; (8002fa4 <main+0x274>)
 8002d78:	f009 fd8c 	bl	800c894 <HAL_UART_Transmit>
	HAL_UART_Receive_IT(&huart3, &rx_data, 1);
 8002d7c:	2201      	movs	r2, #1
 8002d7e:	498a      	ldr	r1, [pc, #552]	; (8002fa8 <main+0x278>)
 8002d80:	4888      	ldr	r0, [pc, #544]	; (8002fa4 <main+0x274>)
 8002d82:	f009 fe1d 	bl	800c9c0 <HAL_UART_Receive_IT>


	HAL_TIM_Base_Start(&htim12);
 8002d86:	4889      	ldr	r0, [pc, #548]	; (8002fac <main+0x27c>)
 8002d88:	f007 fd90 	bl	800a8ac <HAL_TIM_Base_Start>
	HAL_TIM_Base_Start(&htim13);
 8002d8c:	4888      	ldr	r0, [pc, #544]	; (8002fb0 <main+0x280>)
 8002d8e:	f007 fd8d 	bl	800a8ac <HAL_TIM_Base_Start>
	HAL_TIM_Base_Start(&htim14);
 8002d92:	4888      	ldr	r0, [pc, #544]	; (8002fb4 <main+0x284>)
 8002d94:	f007 fd8a 	bl	800a8ac <HAL_TIM_Base_Start>

	HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1);	//Enciendo interrupcion input capture motor 1
 8002d98:	2100      	movs	r1, #0
 8002d9a:	4887      	ldr	r0, [pc, #540]	; (8002fb8 <main+0x288>)
 8002d9c:	f008 f92c 	bl	800aff8 <HAL_TIM_IC_Start_IT>
	HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_1);	//Enciendo interrupcion input capture motor 2
 8002da0:	2100      	movs	r1, #0
 8002da2:	4886      	ldr	r0, [pc, #536]	; (8002fbc <main+0x28c>)
 8002da4:	f008 f928 	bl	800aff8 <HAL_TIM_IC_Start_IT>
	HAL_TIM_IC_Start_IT(&htim4, TIM_CHANNEL_1);	//Enciendo interrupcion input capture motor 3
 8002da8:	2100      	movs	r1, #0
 8002daa:	4885      	ldr	r0, [pc, #532]	; (8002fc0 <main+0x290>)
 8002dac:	f008 f924 	bl	800aff8 <HAL_TIM_IC_Start_IT>
	HAL_UART_Transmit(&huart3, (uint8_t *)"Ejemplo :px0 y0 z-0.8 \nr", 24, 100);
 8002db0:	2364      	movs	r3, #100	; 0x64
 8002db2:	2218      	movs	r2, #24
 8002db4:	4983      	ldr	r1, [pc, #524]	; (8002fc4 <main+0x294>)
 8002db6:	487b      	ldr	r0, [pc, #492]	; (8002fa4 <main+0x274>)
 8002db8:	f009 fd6c 	bl	800c894 <HAL_UART_Transmit>
  /* USER CODE BEGIN WHILE */
	while (1) {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		if (FlagButton == 1) {
 8002dbc:	4b82      	ldr	r3, [pc, #520]	; (8002fc8 <main+0x298>)
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	2b01      	cmp	r3, #1
 8002dc2:	d1fb      	bne.n	8002dbc <main+0x8c>
			FlagButton = 0;
 8002dc4:	4b80      	ldr	r3, [pc, #512]	; (8002fc8 <main+0x298>)
 8002dc6:	2200      	movs	r2, #0
 8002dc8:	601a      	str	r2, [r3, #0]
			distancia = sqrt(pow(Pfin.x - Pini.x, 2) + pow(Pfin.y - Pini.y, 2) + pow(Pfin.z - Pini.z, 2));
 8002dca:	4b80      	ldr	r3, [pc, #512]	; (8002fcc <main+0x29c>)
 8002dcc:	ed93 6b00 	vldr	d6, [r3]
 8002dd0:	4b7f      	ldr	r3, [pc, #508]	; (8002fd0 <main+0x2a0>)
 8002dd2:	ed93 7b00 	vldr	d7, [r3]
 8002dd6:	ee36 7b47 	vsub.f64	d7, d6, d7
 8002dda:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8002dde:	eeb0 0b47 	vmov.f64	d0, d7
 8002de2:	f00e ff31 	bl	8011c48 <pow>
 8002de6:	eeb0 8b40 	vmov.f64	d8, d0
 8002dea:	4b78      	ldr	r3, [pc, #480]	; (8002fcc <main+0x29c>)
 8002dec:	ed93 6b02 	vldr	d6, [r3, #8]
 8002df0:	4b77      	ldr	r3, [pc, #476]	; (8002fd0 <main+0x2a0>)
 8002df2:	ed93 7b02 	vldr	d7, [r3, #8]
 8002df6:	ee36 7b47 	vsub.f64	d7, d6, d7
 8002dfa:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8002dfe:	eeb0 0b47 	vmov.f64	d0, d7
 8002e02:	f00e ff21 	bl	8011c48 <pow>
 8002e06:	eeb0 7b40 	vmov.f64	d7, d0
 8002e0a:	ee38 8b07 	vadd.f64	d8, d8, d7
 8002e0e:	4b6f      	ldr	r3, [pc, #444]	; (8002fcc <main+0x29c>)
 8002e10:	ed93 6b04 	vldr	d6, [r3, #16]
 8002e14:	4b6e      	ldr	r3, [pc, #440]	; (8002fd0 <main+0x2a0>)
 8002e16:	ed93 7b04 	vldr	d7, [r3, #16]
 8002e1a:	ee36 7b47 	vsub.f64	d7, d6, d7
 8002e1e:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8002e22:	eeb0 0b47 	vmov.f64	d0, d7
 8002e26:	f00e ff0f 	bl	8011c48 <pow>
 8002e2a:	eeb0 7b40 	vmov.f64	d7, d0
 8002e2e:	ee38 7b07 	vadd.f64	d7, d8, d7
 8002e32:	eeb0 0b47 	vmov.f64	d0, d7
 8002e36:	f00f f987 	bl	8012148 <sqrt>
 8002e3a:	eeb0 7b40 	vmov.f64	d7, d0
 8002e3e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002e42:	4b64      	ldr	r3, [pc, #400]	; (8002fd4 <main+0x2a4>)
 8002e44:	edc3 7a00 	vstr	s15, [r3]
			vDirector[0] = (Pfin.x - Pini.x) / distancia;	//Vector director en X
 8002e48:	4b60      	ldr	r3, [pc, #384]	; (8002fcc <main+0x29c>)
 8002e4a:	ed93 6b00 	vldr	d6, [r3]
 8002e4e:	4b60      	ldr	r3, [pc, #384]	; (8002fd0 <main+0x2a0>)
 8002e50:	ed93 7b00 	vldr	d7, [r3]
 8002e54:	ee36 5b47 	vsub.f64	d5, d6, d7
 8002e58:	4b5e      	ldr	r3, [pc, #376]	; (8002fd4 <main+0x2a4>)
 8002e5a:	edd3 7a00 	vldr	s15, [r3]
 8002e5e:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8002e62:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8002e66:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002e6a:	4b5b      	ldr	r3, [pc, #364]	; (8002fd8 <main+0x2a8>)
 8002e6c:	edc3 7a00 	vstr	s15, [r3]
			vDirector[1] = (Pfin.y - Pini.y) / distancia;	//Vector director en Y
 8002e70:	4b56      	ldr	r3, [pc, #344]	; (8002fcc <main+0x29c>)
 8002e72:	ed93 6b02 	vldr	d6, [r3, #8]
 8002e76:	4b56      	ldr	r3, [pc, #344]	; (8002fd0 <main+0x2a0>)
 8002e78:	ed93 7b02 	vldr	d7, [r3, #8]
 8002e7c:	ee36 5b47 	vsub.f64	d5, d6, d7
 8002e80:	4b54      	ldr	r3, [pc, #336]	; (8002fd4 <main+0x2a4>)
 8002e82:	edd3 7a00 	vldr	s15, [r3]
 8002e86:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8002e8a:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8002e8e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002e92:	4b51      	ldr	r3, [pc, #324]	; (8002fd8 <main+0x2a8>)
 8002e94:	edc3 7a01 	vstr	s15, [r3, #4]
			vDirector[2] = (Pfin.z - Pini.z) / distancia;	//Vector director en Z
 8002e98:	4b4c      	ldr	r3, [pc, #304]	; (8002fcc <main+0x29c>)
 8002e9a:	ed93 6b04 	vldr	d6, [r3, #16]
 8002e9e:	4b4c      	ldr	r3, [pc, #304]	; (8002fd0 <main+0x2a0>)
 8002ea0:	ed93 7b04 	vldr	d7, [r3, #16]
 8002ea4:	ee36 5b47 	vsub.f64	d5, d6, d7
 8002ea8:	4b4a      	ldr	r3, [pc, #296]	; (8002fd4 <main+0x2a4>)
 8002eaa:	edd3 7a00 	vldr	s15, [r3]
 8002eae:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8002eb2:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8002eb6:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002eba:	4b47      	ldr	r3, [pc, #284]	; (8002fd8 <main+0x2a8>)
 8002ebc:	edc3 7a02 	vstr	s15, [r3, #8]
			configStepMotor1(titha1);
 8002ec0:	4b46      	ldr	r3, [pc, #280]	; (8002fdc <main+0x2ac>)
 8002ec2:	ed93 7b00 	vldr	d7, [r3]
 8002ec6:	eeb0 0b47 	vmov.f64	d0, d7
 8002eca:	f000 fb91 	bl	80035f0 <configStepMotor1>
			configStepMotor2(titha2);
 8002ece:	4b44      	ldr	r3, [pc, #272]	; (8002fe0 <main+0x2b0>)
 8002ed0:	ed93 7b00 	vldr	d7, [r3]
 8002ed4:	eeb0 0b47 	vmov.f64	d0, d7
 8002ed8:	f000 fc46 	bl	8003768 <configStepMotor2>
			configStepMotor3(titha3);
 8002edc:	4b41      	ldr	r3, [pc, #260]	; (8002fe4 <main+0x2b4>)
 8002ede:	ed93 7b00 	vldr	d7, [r3]
 8002ee2:	eeb0 0b47 	vmov.f64	d0, d7
 8002ee6:	f000 fcfb 	bl	80038e0 <configStepMotor3>
			inicializarTrayectoria(0, distancia, 0, 0, 0.4, 4, 1); //(Posinicio , Posfin , Vinicio , Vfin , Vmaxima, Amaxima, jerk)
 8002eea:	4b3a      	ldr	r3, [pc, #232]	; (8002fd4 <main+0x2a4>)
 8002eec:	edd3 7a00 	vldr	s15, [r3]
 8002ef0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002ef4:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8002ef8:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 8002efc:	ed9f 4b24 	vldr	d4, [pc, #144]	; 8002f90 <main+0x260>
 8002f00:	ed9f 3b25 	vldr	d3, [pc, #148]	; 8002f98 <main+0x268>
 8002f04:	ed9f 2b24 	vldr	d2, [pc, #144]	; 8002f98 <main+0x268>
 8002f08:	eeb0 1b47 	vmov.f64	d1, d7
 8002f0c:	ed9f 0b22 	vldr	d0, [pc, #136]	; 8002f98 <main+0x268>
 8002f10:	f001 fe8e 	bl	8004c30 <inicializarTrayectoria>
			FlagTiempo = 0;
 8002f14:	4b34      	ldr	r3, [pc, #208]	; (8002fe8 <main+0x2b8>)
 8002f16:	2200      	movs	r2, #0
 8002f18:	701a      	strb	r2, [r3, #0]
			FlagTrayectoM1 = 0;
 8002f1a:	4934      	ldr	r1, [pc, #208]	; (8002fec <main+0x2bc>)
 8002f1c:	f04f 0200 	mov.w	r2, #0
 8002f20:	f04f 0300 	mov.w	r3, #0
 8002f24:	e9c1 2300 	strd	r2, r3, [r1]
			FlagTrayectoM2 = 0;
 8002f28:	4931      	ldr	r1, [pc, #196]	; (8002ff0 <main+0x2c0>)
 8002f2a:	f04f 0200 	mov.w	r2, #0
 8002f2e:	f04f 0300 	mov.w	r3, #0
 8002f32:	e9c1 2300 	strd	r2, r3, [r1]
			FlagTrayectoM3 = 0;
 8002f36:	492f      	ldr	r1, [pc, #188]	; (8002ff4 <main+0x2c4>)
 8002f38:	f04f 0200 	mov.w	r2, #0
 8002f3c:	f04f 0300 	mov.w	r3, #0
 8002f40:	e9c1 2300 	strd	r2, r3, [r1]
			Start=1;
 8002f44:	4b2c      	ldr	r3, [pc, #176]	; (8002ff8 <main+0x2c8>)
 8002f46:	2201      	movs	r2, #1
 8002f48:	701a      	strb	r2, [r3, #0]
			rpm1 = 0;
 8002f4a:	492c      	ldr	r1, [pc, #176]	; (8002ffc <main+0x2cc>)
 8002f4c:	f04f 0200 	mov.w	r2, #0
 8002f50:	f04f 0300 	mov.w	r3, #0
 8002f54:	e9c1 2300 	strd	r2, r3, [r1]
			rpm2 = 0;
 8002f58:	4929      	ldr	r1, [pc, #164]	; (8003000 <main+0x2d0>)
 8002f5a:	f04f 0200 	mov.w	r2, #0
 8002f5e:	f04f 0300 	mov.w	r3, #0
 8002f62:	e9c1 2300 	strd	r2, r3, [r1]
			rpm3 = 0;
 8002f66:	4927      	ldr	r1, [pc, #156]	; (8003004 <main+0x2d4>)
 8002f68:	f04f 0200 	mov.w	r2, #0
 8002f6c:	f04f 0300 	mov.w	r3, #0
 8002f70:	e9c1 2300 	strd	r2, r3, [r1]
			mandalemecha = 1;
 8002f74:	4924      	ldr	r1, [pc, #144]	; (8003008 <main+0x2d8>)
 8002f76:	f04f 0200 	mov.w	r2, #0
 8002f7a:	4b24      	ldr	r3, [pc, #144]	; (800300c <main+0x2dc>)
 8002f7c:	e9c1 2300 	strd	r2, r3, [r1]
			HAL_TIM_Base_Start(&htim5);
 8002f80:	4823      	ldr	r0, [pc, #140]	; (8003010 <main+0x2e0>)
 8002f82:	f007 fc93 	bl	800a8ac <HAL_TIM_Base_Start>
			HAL_TIM_Base_Start_IT(&htim15);
 8002f86:	4823      	ldr	r0, [pc, #140]	; (8003014 <main+0x2e4>)
 8002f88:	f007 fd28 	bl	800a9dc <HAL_TIM_Base_Start_IT>
		if (FlagButton == 1) {
 8002f8c:	e716      	b.n	8002dbc <main+0x8c>
 8002f8e:	bf00      	nop
 8002f90:	9999999a 	.word	0x9999999a
 8002f94:	3fd99999 	.word	0x3fd99999
	...
 8002fa0:	24000000 	.word	0x24000000
 8002fa4:	24000cf0 	.word	0x24000cf0
 8002fa8:	240004b2 	.word	0x240004b2
 8002fac:	24000704 	.word	0x24000704
 8002fb0:	24000750 	.word	0x24000750
 8002fb4:	2400079c 	.word	0x2400079c
 8002fb8:	240005d4 	.word	0x240005d4
 8002fbc:	24000620 	.word	0x24000620
 8002fc0:	2400066c 	.word	0x2400066c
 8002fc4:	0801259c 	.word	0x0801259c
 8002fc8:	24000518 	.word	0x24000518
 8002fcc:	24000418 	.word	0x24000418
 8002fd0:	24000400 	.word	0x24000400
 8002fd4:	24000430 	.word	0x24000430
 8002fd8:	24000434 	.word	0x24000434
 8002fdc:	240003c0 	.word	0x240003c0
 8002fe0:	240003c8 	.word	0x240003c8
 8002fe4:	240003d0 	.word	0x240003d0
 8002fe8:	240004b4 	.word	0x240004b4
 8002fec:	240004d8 	.word	0x240004d8
 8002ff0:	240004e0 	.word	0x240004e0
 8002ff4:	24000008 	.word	0x24000008
 8002ff8:	24000570 	.word	0x24000570
 8002ffc:	24000528 	.word	0x24000528
 8003000:	24000530 	.word	0x24000530
 8003004:	24000538 	.word	0x24000538
 8003008:	24000578 	.word	0x24000578
 800300c:	3ff00000 	.word	0x3ff00000
 8003010:	240006b8 	.word	0x240006b8
 8003014:	240007e8 	.word	0x240007e8

08003018 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003018:	b580      	push	{r7, lr}
 800301a:	b09c      	sub	sp, #112	; 0x70
 800301c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800301e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003022:	224c      	movs	r2, #76	; 0x4c
 8003024:	2100      	movs	r1, #0
 8003026:	4618      	mov	r0, r3
 8003028:	f00b ff7a 	bl	800ef20 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800302c:	1d3b      	adds	r3, r7, #4
 800302e:	2220      	movs	r2, #32
 8003030:	2100      	movs	r1, #0
 8003032:	4618      	mov	r0, r3
 8003034:	f00b ff74 	bl	800ef20 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8003038:	2002      	movs	r0, #2
 800303a:	f005 f883 	bl	8008144 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800303e:	2300      	movs	r3, #0
 8003040:	603b      	str	r3, [r7, #0]
 8003042:	4b32      	ldr	r3, [pc, #200]	; (800310c <SystemClock_Config+0xf4>)
 8003044:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003046:	4a31      	ldr	r2, [pc, #196]	; (800310c <SystemClock_Config+0xf4>)
 8003048:	f023 0301 	bic.w	r3, r3, #1
 800304c:	62d3      	str	r3, [r2, #44]	; 0x2c
 800304e:	4b2f      	ldr	r3, [pc, #188]	; (800310c <SystemClock_Config+0xf4>)
 8003050:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003052:	f003 0301 	and.w	r3, r3, #1
 8003056:	603b      	str	r3, [r7, #0]
 8003058:	4b2d      	ldr	r3, [pc, #180]	; (8003110 <SystemClock_Config+0xf8>)
 800305a:	699b      	ldr	r3, [r3, #24]
 800305c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8003060:	4a2b      	ldr	r2, [pc, #172]	; (8003110 <SystemClock_Config+0xf8>)
 8003062:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003066:	6193      	str	r3, [r2, #24]
 8003068:	4b29      	ldr	r3, [pc, #164]	; (8003110 <SystemClock_Config+0xf8>)
 800306a:	699b      	ldr	r3, [r3, #24]
 800306c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003070:	603b      	str	r3, [r7, #0]
 8003072:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8003074:	bf00      	nop
 8003076:	4b26      	ldr	r3, [pc, #152]	; (8003110 <SystemClock_Config+0xf8>)
 8003078:	699b      	ldr	r3, [r3, #24]
 800307a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800307e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003082:	d1f8      	bne.n	8003076 <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8003084:	2302      	movs	r3, #2
 8003086:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8003088:	2301      	movs	r3, #1
 800308a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800308c:	2340      	movs	r3, #64	; 0x40
 800308e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003090:	2302      	movs	r3, #2
 8003092:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8003094:	2300      	movs	r3, #0
 8003096:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8003098:	2304      	movs	r3, #4
 800309a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 16;
 800309c:	2310      	movs	r3, #16
 800309e:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80030a0:	2302      	movs	r3, #2
 80030a2:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80030a4:	2302      	movs	r3, #2
 80030a6:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80030a8:	2302      	movs	r3, #2
 80030aa:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80030ac:	230c      	movs	r3, #12
 80030ae:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80030b0:	2300      	movs	r3, #0
 80030b2:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80030b4:	2300      	movs	r3, #0
 80030b6:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80030b8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80030bc:	4618      	mov	r0, r3
 80030be:	f005 f87b 	bl	80081b8 <HAL_RCC_OscConfig>
 80030c2:	4603      	mov	r3, r0
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d001      	beq.n	80030cc <SystemClock_Config+0xb4>
  {
    Error_Handler();
 80030c8:	f000 fa8a 	bl	80035e0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80030cc:	233f      	movs	r3, #63	; 0x3f
 80030ce:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80030d0:	2303      	movs	r3, #3
 80030d2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80030d4:	2300      	movs	r3, #0
 80030d6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80030d8:	2308      	movs	r3, #8
 80030da:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 80030dc:	2300      	movs	r3, #0
 80030de:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80030e0:	2340      	movs	r3, #64	; 0x40
 80030e2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80030e4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80030e8:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 80030ea:	2300      	movs	r3, #0
 80030ec:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80030ee:	1d3b      	adds	r3, r7, #4
 80030f0:	2101      	movs	r1, #1
 80030f2:	4618      	mov	r0, r3
 80030f4:	f005 fc8e 	bl	8008a14 <HAL_RCC_ClockConfig>
 80030f8:	4603      	mov	r3, r0
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d001      	beq.n	8003102 <SystemClock_Config+0xea>
  {
    Error_Handler();
 80030fe:	f000 fa6f 	bl	80035e0 <Error_Handler>
  }
}
 8003102:	bf00      	nop
 8003104:	3770      	adds	r7, #112	; 0x70
 8003106:	46bd      	mov	sp, r7
 8003108:	bd80      	pop	{r7, pc}
 800310a:	bf00      	nop
 800310c:	58000400 	.word	0x58000400
 8003110:	58024800 	.word	0x58024800

08003114 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8003114:	b480      	push	{r7}
 8003116:	b083      	sub	sp, #12
 8003118:	af00      	add	r7, sp, #0
 800311a:	4603      	mov	r3, r0
 800311c:	80fb      	strh	r3, [r7, #6]
	switch (GPIO_Pin) {
 800311e:	88fb      	ldrh	r3, [r7, #6]
 8003120:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003124:	d103      	bne.n	800312e <HAL_GPIO_EXTI_Callback+0x1a>

	case BUTTON_Pin:
		FlagButton = 1;
 8003126:	4b05      	ldr	r3, [pc, #20]	; (800313c <HAL_GPIO_EXTI_Callback+0x28>)
 8003128:	2201      	movs	r2, #1
 800312a:	601a      	str	r2, [r3, #0]
		break;
 800312c:	e000      	b.n	8003130 <HAL_GPIO_EXTI_Callback+0x1c>
		 HAL_UART_Transmit(&huart3, "EndStop3Sup\n\r", 13, 100);
		 break;*/

	default:

		break;
 800312e:	bf00      	nop
	}

}
 8003130:	bf00      	nop
 8003132:	370c      	adds	r7, #12
 8003134:	46bd      	mov	sp, r7
 8003136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800313a:	4770      	bx	lr
 800313c:	24000518 	.word	0x24000518

08003140 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8003140:	b580      	push	{r7, lr}
 8003142:	b084      	sub	sp, #16
 8003144:	af00      	add	r7, sp, #0
 8003146:	6078      	str	r0, [r7, #4]

	if (huart->Instance == USART3) {
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	4a30      	ldr	r2, [pc, #192]	; (8003210 <HAL_UART_RxCpltCallback+0xd0>)
 800314e:	4293      	cmp	r3, r2
 8003150:	d14d      	bne.n	80031ee <HAL_UART_RxCpltCallback+0xae>
		char dato;
		dato = rx_data;
 8003152:	4b30      	ldr	r3, [pc, #192]	; (8003214 <HAL_UART_RxCpltCallback+0xd4>)
 8003154:	781b      	ldrb	r3, [r3, #0]
 8003156:	73fb      	strb	r3, [r7, #15]
		switch (dato) {
 8003158:	7bfb      	ldrb	r3, [r7, #15]
 800315a:	2b3a      	cmp	r3, #58	; 0x3a
 800315c:	d006      	beq.n	800316c <HAL_UART_RxCpltCallback+0x2c>
 800315e:	2b3a      	cmp	r3, #58	; 0x3a
 8003160:	dc36      	bgt.n	80031d0 <HAL_UART_RxCpltCallback+0x90>
 8003162:	2b08      	cmp	r3, #8
 8003164:	d009      	beq.n	800317a <HAL_UART_RxCpltCallback+0x3a>
 8003166:	2b0d      	cmp	r3, #13
 8003168:	d01e      	beq.n	80031a8 <HAL_UART_RxCpltCallback+0x68>
 800316a:	e031      	b.n	80031d0 <HAL_UART_RxCpltCallback+0x90>
		case ':':
			rx_index = 0;
 800316c:	4b2a      	ldr	r3, [pc, #168]	; (8003218 <HAL_UART_RxCpltCallback+0xd8>)
 800316e:	2200      	movs	r2, #0
 8003170:	701a      	strb	r2, [r3, #0]
			cm0 = 1;
 8003172:	4b2a      	ldr	r3, [pc, #168]	; (800321c <HAL_UART_RxCpltCallback+0xdc>)
 8003174:	2201      	movs	r2, #1
 8003176:	701a      	strb	r2, [r3, #0]
			break;
 8003178:	e040      	b.n	80031fc <HAL_UART_RxCpltCallback+0xbc>
		case 8:
			if (rx_index > 0) {
 800317a:	4b27      	ldr	r3, [pc, #156]	; (8003218 <HAL_UART_RxCpltCallback+0xd8>)
 800317c:	781b      	ldrb	r3, [r3, #0]
 800317e:	2b00      	cmp	r3, #0
 8003180:	d037      	beq.n	80031f2 <HAL_UART_RxCpltCallback+0xb2>
				rx_index--;
 8003182:	4b25      	ldr	r3, [pc, #148]	; (8003218 <HAL_UART_RxCpltCallback+0xd8>)
 8003184:	781b      	ldrb	r3, [r3, #0]
 8003186:	3b01      	subs	r3, #1
 8003188:	b2da      	uxtb	r2, r3
 800318a:	4b23      	ldr	r3, [pc, #140]	; (8003218 <HAL_UART_RxCpltCallback+0xd8>)
 800318c:	701a      	strb	r2, [r3, #0]
			}
			break;
 800318e:	e030      	b.n	80031f2 <HAL_UART_RxCpltCallback+0xb2>
		case '\r':

			while (!(rx_index==30)){
				rx_buffer[rx_index]= (uint8_t) 0;
 8003190:	4b21      	ldr	r3, [pc, #132]	; (8003218 <HAL_UART_RxCpltCallback+0xd8>)
 8003192:	781b      	ldrb	r3, [r3, #0]
 8003194:	461a      	mov	r2, r3
 8003196:	4b22      	ldr	r3, [pc, #136]	; (8003220 <HAL_UART_RxCpltCallback+0xe0>)
 8003198:	2100      	movs	r1, #0
 800319a:	5499      	strb	r1, [r3, r2]
				rx_index++;
 800319c:	4b1e      	ldr	r3, [pc, #120]	; (8003218 <HAL_UART_RxCpltCallback+0xd8>)
 800319e:	781b      	ldrb	r3, [r3, #0]
 80031a0:	3301      	adds	r3, #1
 80031a2:	b2da      	uxtb	r2, r3
 80031a4:	4b1c      	ldr	r3, [pc, #112]	; (8003218 <HAL_UART_RxCpltCallback+0xd8>)
 80031a6:	701a      	strb	r2, [r3, #0]
			while (!(rx_index==30)){
 80031a8:	4b1b      	ldr	r3, [pc, #108]	; (8003218 <HAL_UART_RxCpltCallback+0xd8>)
 80031aa:	781b      	ldrb	r3, [r3, #0]
 80031ac:	2b1e      	cmp	r3, #30
 80031ae:	d1ef      	bne.n	8003190 <HAL_UART_RxCpltCallback+0x50>
			}

			if (cm0 == 1) {
 80031b0:	4b1a      	ldr	r3, [pc, #104]	; (800321c <HAL_UART_RxCpltCallback+0xdc>)
 80031b2:	781b      	ldrb	r3, [r3, #0]
 80031b4:	2b01      	cmp	r3, #1
 80031b6:	d11e      	bne.n	80031f6 <HAL_UART_RxCpltCallback+0xb6>
				rx_buffer[rx_index] = 0;
 80031b8:	4b17      	ldr	r3, [pc, #92]	; (8003218 <HAL_UART_RxCpltCallback+0xd8>)
 80031ba:	781b      	ldrb	r3, [r3, #0]
 80031bc:	461a      	mov	r2, r3
 80031be:	4b18      	ldr	r3, [pc, #96]	; (8003220 <HAL_UART_RxCpltCallback+0xe0>)
 80031c0:	2100      	movs	r1, #0
 80031c2:	5499      	strb	r1, [r3, r2]
				interpretaComando();
 80031c4:	f7ff f9ac 	bl	8002520 <interpretaComando>
				cm0 = 0;
 80031c8:	4b14      	ldr	r3, [pc, #80]	; (800321c <HAL_UART_RxCpltCallback+0xdc>)
 80031ca:	2200      	movs	r2, #0
 80031cc:	701a      	strb	r2, [r3, #0]
			}
			break;
 80031ce:	e012      	b.n	80031f6 <HAL_UART_RxCpltCallback+0xb6>
		default:
			if (rx_index < 30) {
 80031d0:	4b11      	ldr	r3, [pc, #68]	; (8003218 <HAL_UART_RxCpltCallback+0xd8>)
 80031d2:	781b      	ldrb	r3, [r3, #0]
 80031d4:	2b1d      	cmp	r3, #29
 80031d6:	d810      	bhi.n	80031fa <HAL_UART_RxCpltCallback+0xba>
				rx_buffer[rx_index++] = dato;
 80031d8:	4b0f      	ldr	r3, [pc, #60]	; (8003218 <HAL_UART_RxCpltCallback+0xd8>)
 80031da:	781b      	ldrb	r3, [r3, #0]
 80031dc:	1c5a      	adds	r2, r3, #1
 80031de:	b2d1      	uxtb	r1, r2
 80031e0:	4a0d      	ldr	r2, [pc, #52]	; (8003218 <HAL_UART_RxCpltCallback+0xd8>)
 80031e2:	7011      	strb	r1, [r2, #0]
 80031e4:	4619      	mov	r1, r3
 80031e6:	4a0e      	ldr	r2, [pc, #56]	; (8003220 <HAL_UART_RxCpltCallback+0xe0>)
 80031e8:	7bfb      	ldrb	r3, [r7, #15]
 80031ea:	5453      	strb	r3, [r2, r1]
			}
			break;
 80031ec:	e005      	b.n	80031fa <HAL_UART_RxCpltCallback+0xba>
		}
	}
 80031ee:	bf00      	nop
 80031f0:	e004      	b.n	80031fc <HAL_UART_RxCpltCallback+0xbc>
			break;
 80031f2:	bf00      	nop
 80031f4:	e002      	b.n	80031fc <HAL_UART_RxCpltCallback+0xbc>
			break;
 80031f6:	bf00      	nop
 80031f8:	e000      	b.n	80031fc <HAL_UART_RxCpltCallback+0xbc>
			break;
 80031fa:	bf00      	nop
	HAL_UART_Receive_IT(&huart3, &rx_data, 1); //Receive data (one character only)
 80031fc:	2201      	movs	r2, #1
 80031fe:	4905      	ldr	r1, [pc, #20]	; (8003214 <HAL_UART_RxCpltCallback+0xd4>)
 8003200:	4808      	ldr	r0, [pc, #32]	; (8003224 <HAL_UART_RxCpltCallback+0xe4>)
 8003202:	f009 fbdd 	bl	800c9c0 <HAL_UART_Receive_IT>
}
 8003206:	bf00      	nop
 8003208:	3710      	adds	r7, #16
 800320a:	46bd      	mov	sp, r7
 800320c:	bd80      	pop	{r7, pc}
 800320e:	bf00      	nop
 8003210:	40004800 	.word	0x40004800
 8003214:	240004b2 	.word	0x240004b2
 8003218:	24000490 	.word	0x24000490
 800321c:	240004b3 	.word	0x240004b3
 8003220:	24000494 	.word	0x24000494
 8003224:	24000cf0 	.word	0x24000cf0

08003228 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 8003228:	b480      	push	{r7}
 800322a:	b083      	sub	sp, #12
 800322c:	af00      	add	r7, sp, #0
 800322e:	6078      	str	r0, [r7, #4]
	__NOP();
 8003230:	bf00      	nop
}
 8003232:	bf00      	nop
 8003234:	370c      	adds	r7, #12
 8003236:	46bd      	mov	sp, r7
 8003238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800323c:	4770      	bx	lr
	...

08003240 <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) {
 8003240:	b580      	push	{r7, lr}
 8003242:	b082      	sub	sp, #8
 8003244:	af00      	add	r7, sp, #0
 8003246:	6078      	str	r0, [r7, #4]

	if (htim->Instance == TIM2) {
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003250:	d116      	bne.n	8003280 <HAL_TIM_IC_CaptureCallback+0x40>
		if (pMotor1 == numStep1) {
 8003252:	4b29      	ldr	r3, [pc, #164]	; (80032f8 <HAL_TIM_IC_CaptureCallback+0xb8>)
 8003254:	681a      	ldr	r2, [r3, #0]
 8003256:	4b29      	ldr	r3, [pc, #164]	; (80032fc <HAL_TIM_IC_CaptureCallback+0xbc>)
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	429a      	cmp	r2, r3
 800325c:	d10a      	bne.n	8003274 <HAL_TIM_IC_CaptureCallback+0x34>
			HAL_TIM_PWM_Stop(&htim12, TIM_CHANNEL_1); //Apago el PWM del motor 1
 800325e:	2100      	movs	r1, #0
 8003260:	4827      	ldr	r0, [pc, #156]	; (8003300 <HAL_TIM_IC_CaptureCallback+0xc0>)
 8003262:	f007 fdd1 	bl	800ae08 <HAL_TIM_PWM_Stop>
			FlagTrayectoM1 = 1;
 8003266:	4927      	ldr	r1, [pc, #156]	; (8003304 <HAL_TIM_IC_CaptureCallback+0xc4>)
 8003268:	f04f 0200 	mov.w	r2, #0
 800326c:	4b26      	ldr	r3, [pc, #152]	; (8003308 <HAL_TIM_IC_CaptureCallback+0xc8>)
 800326e:	e9c1 2300 	strd	r2, r3, [r1]
		} else {
			pMotor3++;
		}

	}
}
 8003272:	e03c      	b.n	80032ee <HAL_TIM_IC_CaptureCallback+0xae>
			pMotor1++;
 8003274:	4b20      	ldr	r3, [pc, #128]	; (80032f8 <HAL_TIM_IC_CaptureCallback+0xb8>)
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	3301      	adds	r3, #1
 800327a:	4a1f      	ldr	r2, [pc, #124]	; (80032f8 <HAL_TIM_IC_CaptureCallback+0xb8>)
 800327c:	6013      	str	r3, [r2, #0]
}
 800327e:	e036      	b.n	80032ee <HAL_TIM_IC_CaptureCallback+0xae>
	} else if (htim->Instance == TIM3) {
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	4a21      	ldr	r2, [pc, #132]	; (800330c <HAL_TIM_IC_CaptureCallback+0xcc>)
 8003286:	4293      	cmp	r3, r2
 8003288:	d116      	bne.n	80032b8 <HAL_TIM_IC_CaptureCallback+0x78>
		if (pMotor2 == numStep2) {
 800328a:	4b21      	ldr	r3, [pc, #132]	; (8003310 <HAL_TIM_IC_CaptureCallback+0xd0>)
 800328c:	681a      	ldr	r2, [r3, #0]
 800328e:	4b21      	ldr	r3, [pc, #132]	; (8003314 <HAL_TIM_IC_CaptureCallback+0xd4>)
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	429a      	cmp	r2, r3
 8003294:	d10a      	bne.n	80032ac <HAL_TIM_IC_CaptureCallback+0x6c>
			HAL_TIM_PWM_Stop(&htim13, TIM_CHANNEL_1);//Apago el PWM del motor 1
 8003296:	2100      	movs	r1, #0
 8003298:	481f      	ldr	r0, [pc, #124]	; (8003318 <HAL_TIM_IC_CaptureCallback+0xd8>)
 800329a:	f007 fdb5 	bl	800ae08 <HAL_TIM_PWM_Stop>
			FlagTrayectoM2 = 1;
 800329e:	491f      	ldr	r1, [pc, #124]	; (800331c <HAL_TIM_IC_CaptureCallback+0xdc>)
 80032a0:	f04f 0200 	mov.w	r2, #0
 80032a4:	4b18      	ldr	r3, [pc, #96]	; (8003308 <HAL_TIM_IC_CaptureCallback+0xc8>)
 80032a6:	e9c1 2300 	strd	r2, r3, [r1]
}
 80032aa:	e020      	b.n	80032ee <HAL_TIM_IC_CaptureCallback+0xae>
			pMotor2++;
 80032ac:	4b18      	ldr	r3, [pc, #96]	; (8003310 <HAL_TIM_IC_CaptureCallback+0xd0>)
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	3301      	adds	r3, #1
 80032b2:	4a17      	ldr	r2, [pc, #92]	; (8003310 <HAL_TIM_IC_CaptureCallback+0xd0>)
 80032b4:	6013      	str	r3, [r2, #0]
}
 80032b6:	e01a      	b.n	80032ee <HAL_TIM_IC_CaptureCallback+0xae>
	} else if (htim->Instance == TIM4) {
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	4a18      	ldr	r2, [pc, #96]	; (8003320 <HAL_TIM_IC_CaptureCallback+0xe0>)
 80032be:	4293      	cmp	r3, r2
 80032c0:	d115      	bne.n	80032ee <HAL_TIM_IC_CaptureCallback+0xae>
		if (pMotor3 == numStep3) {
 80032c2:	4b18      	ldr	r3, [pc, #96]	; (8003324 <HAL_TIM_IC_CaptureCallback+0xe4>)
 80032c4:	681a      	ldr	r2, [r3, #0]
 80032c6:	4b18      	ldr	r3, [pc, #96]	; (8003328 <HAL_TIM_IC_CaptureCallback+0xe8>)
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	429a      	cmp	r2, r3
 80032cc:	d10a      	bne.n	80032e4 <HAL_TIM_IC_CaptureCallback+0xa4>
			HAL_TIM_PWM_Stop(&htim14, TIM_CHANNEL_1);//Apago el PWM del motor 1
 80032ce:	2100      	movs	r1, #0
 80032d0:	4816      	ldr	r0, [pc, #88]	; (800332c <HAL_TIM_IC_CaptureCallback+0xec>)
 80032d2:	f007 fd99 	bl	800ae08 <HAL_TIM_PWM_Stop>
			FlagTrayectoM3 = 1;
 80032d6:	4916      	ldr	r1, [pc, #88]	; (8003330 <HAL_TIM_IC_CaptureCallback+0xf0>)
 80032d8:	f04f 0200 	mov.w	r2, #0
 80032dc:	4b0a      	ldr	r3, [pc, #40]	; (8003308 <HAL_TIM_IC_CaptureCallback+0xc8>)
 80032de:	e9c1 2300 	strd	r2, r3, [r1]
}
 80032e2:	e004      	b.n	80032ee <HAL_TIM_IC_CaptureCallback+0xae>
			pMotor3++;
 80032e4:	4b0f      	ldr	r3, [pc, #60]	; (8003324 <HAL_TIM_IC_CaptureCallback+0xe4>)
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	3301      	adds	r3, #1
 80032ea:	4a0e      	ldr	r2, [pc, #56]	; (8003324 <HAL_TIM_IC_CaptureCallback+0xe4>)
 80032ec:	6013      	str	r3, [r2, #0]
}
 80032ee:	bf00      	nop
 80032f0:	3708      	adds	r7, #8
 80032f2:	46bd      	mov	sp, r7
 80032f4:	bd80      	pop	{r7, pc}
 80032f6:	bf00      	nop
 80032f8:	240003a4 	.word	0x240003a4
 80032fc:	240003b0 	.word	0x240003b0
 8003300:	24000704 	.word	0x24000704
 8003304:	240004d8 	.word	0x240004d8
 8003308:	3ff00000 	.word	0x3ff00000
 800330c:	40000400 	.word	0x40000400
 8003310:	240003a8 	.word	0x240003a8
 8003314:	240003b4 	.word	0x240003b4
 8003318:	24000750 	.word	0x24000750
 800331c:	240004e0 	.word	0x240004e0
 8003320:	40000800 	.word	0x40000800
 8003324:	240003ac 	.word	0x240003ac
 8003328:	240003b8 	.word	0x240003b8
 800332c:	2400079c 	.word	0x2400079c
 8003330:	24000008 	.word	0x24000008
 8003334:	00000000 	.word	0x00000000

08003338 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8003338:	b580      	push	{r7, lr}
 800333a:	b082      	sub	sp, #8
 800333c:	af00      	add	r7, sp, #0
 800333e:	6078      	str	r0, [r7, #4]
	if (htim == &htim15) {  //Timer que actualiza curva de velocidad
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	4a91      	ldr	r2, [pc, #580]	; (8003588 <HAL_TIM_PeriodElapsedCallback+0x250>)
 8003344:	4293      	cmp	r3, r2
 8003346:	f040 8110 	bne.w	800356a <HAL_TIM_PeriodElapsedCallback+0x232>
		if (FlagTrayectoM1 == 1 && FlagTrayectoM2 == 1 && FlagTrayectoM3 == 1) {
 800334a:	4b90      	ldr	r3, [pc, #576]	; (800358c <HAL_TIM_PeriodElapsedCallback+0x254>)
 800334c:	ed93 7b00 	vldr	d7, [r3]
 8003350:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8003354:	eeb4 7b46 	vcmp.f64	d7, d6
 8003358:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800335c:	d133      	bne.n	80033c6 <HAL_TIM_PeriodElapsedCallback+0x8e>
 800335e:	4b8c      	ldr	r3, [pc, #560]	; (8003590 <HAL_TIM_PeriodElapsedCallback+0x258>)
 8003360:	ed93 7b00 	vldr	d7, [r3]
 8003364:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8003368:	eeb4 7b46 	vcmp.f64	d7, d6
 800336c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003370:	d129      	bne.n	80033c6 <HAL_TIM_PeriodElapsedCallback+0x8e>
 8003372:	4b88      	ldr	r3, [pc, #544]	; (8003594 <HAL_TIM_PeriodElapsedCallback+0x25c>)
 8003374:	ed93 7b00 	vldr	d7, [r3]
 8003378:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800337c:	eeb4 7b46 	vcmp.f64	d7, d6
 8003380:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003384:	d11f      	bne.n	80033c6 <HAL_TIM_PeriodElapsedCallback+0x8e>
			HAL_TIM_Base_Stop_IT(&htim15);
 8003386:	4880      	ldr	r0, [pc, #512]	; (8003588 <HAL_TIM_PeriodElapsedCallback+0x250>)
 8003388:	f007 fba0 	bl	800aacc <HAL_TIM_Base_Stop_IT>
			HAL_TIM_Base_Stop(&htim5);
 800338c:	4882      	ldr	r0, [pc, #520]	; (8003598 <HAL_TIM_PeriodElapsedCallback+0x260>)
 800338e:	f007 fafd 	bl	800a98c <HAL_TIM_Base_Stop>
			Pini.x = Pfin.x;
 8003392:	4b82      	ldr	r3, [pc, #520]	; (800359c <HAL_TIM_PeriodElapsedCallback+0x264>)
 8003394:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003398:	4981      	ldr	r1, [pc, #516]	; (80035a0 <HAL_TIM_PeriodElapsedCallback+0x268>)
 800339a:	e9c1 2300 	strd	r2, r3, [r1]
			Pini.y = Pfin.y;
 800339e:	4b7f      	ldr	r3, [pc, #508]	; (800359c <HAL_TIM_PeriodElapsedCallback+0x264>)
 80033a0:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80033a4:	497e      	ldr	r1, [pc, #504]	; (80035a0 <HAL_TIM_PeriodElapsedCallback+0x268>)
 80033a6:	e9c1 2302 	strd	r2, r3, [r1, #8]
			Pini.z = Pfin.z;
 80033aa:	4b7c      	ldr	r3, [pc, #496]	; (800359c <HAL_TIM_PeriodElapsedCallback+0x264>)
 80033ac:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80033b0:	497b      	ldr	r1, [pc, #492]	; (80035a0 <HAL_TIM_PeriodElapsedCallback+0x268>)
 80033b2:	e9c1 2304 	strd	r2, r3, [r1, #16]
			mandalemecha = 0;
 80033b6:	497b      	ldr	r1, [pc, #492]	; (80035a4 <HAL_TIM_PeriodElapsedCallback+0x26c>)
 80033b8:	f04f 0200 	mov.w	r2, #0
 80033bc:	f04f 0300 	mov.w	r3, #0
 80033c0:	e9c1 2300 	strd	r2, r3, [r1]
				HAL_TIM_PWM_Start(&htim13, TIM_CHANNEL_1);	// Activar generacion de pwm
				HAL_TIM_PWM_Start(&htim14, TIM_CHANNEL_1);	// Activar generacion de pwm
			}
		}
	}
}
 80033c4:	e0d1      	b.n	800356a <HAL_TIM_PeriodElapsedCallback+0x232>
			if (!FlagTiempo) {
 80033c6:	4b78      	ldr	r3, [pc, #480]	; (80035a8 <HAL_TIM_PeriodElapsedCallback+0x270>)
 80033c8:	781b      	ldrb	r3, [r3, #0]
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d105      	bne.n	80033da <HAL_TIM_PeriodElapsedCallback+0xa2>
				FlagTiempo = 1;
 80033ce:	4b76      	ldr	r3, [pc, #472]	; (80035a8 <HAL_TIM_PeriodElapsedCallback+0x270>)
 80033d0:	2201      	movs	r2, #1
 80033d2:	701a      	strb	r2, [r3, #0]
				TIM5->CNT = 0;	// comienzo a contabilizar el tiempo recien acá
 80033d4:	4b75      	ldr	r3, [pc, #468]	; (80035ac <HAL_TIM_PeriodElapsedCallback+0x274>)
 80033d6:	2200      	movs	r2, #0
 80033d8:	625a      	str	r2, [r3, #36]	; 0x24
			Tiempo = (((double) (TIM5->CNT)) * ((double)(TIM5->PSC + 1) / 64000000.0));
 80033da:	4b74      	ldr	r3, [pc, #464]	; (80035ac <HAL_TIM_PeriodElapsedCallback+0x274>)
 80033dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033de:	ee07 3a90 	vmov	s15, r3
 80033e2:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 80033e6:	4b71      	ldr	r3, [pc, #452]	; (80035ac <HAL_TIM_PeriodElapsedCallback+0x274>)
 80033e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033ea:	3301      	adds	r3, #1
 80033ec:	ee07 3a90 	vmov	s15, r3
 80033f0:	eeb8 5b67 	vcvt.f64.u32	d5, s15
 80033f4:	ed9f 4b60 	vldr	d4, [pc, #384]	; 8003578 <HAL_TIM_PeriodElapsedCallback+0x240>
 80033f8:	ee85 7b04 	vdiv.f64	d7, d5, d4
 80033fc:	ee26 7b07 	vmul.f64	d7, d6, d7
 8003400:	4b6b      	ldr	r3, [pc, #428]	; (80035b0 <HAL_TIM_PeriodElapsedCallback+0x278>)
 8003402:	ed83 7b00 	vstr	d7, [r3]
			obtenerVelCurva(Tiempo);
 8003406:	4b6a      	ldr	r3, [pc, #424]	; (80035b0 <HAL_TIM_PeriodElapsedCallback+0x278>)
 8003408:	ed93 7b00 	vldr	d7, [r3]
 800340c:	eeb0 0b47 	vmov.f64	d0, d7
 8003410:	f002 f9b4 	bl	800577c <obtenerVelCurva>
			Recta3D[0] = Pini.x + X * vDirector[0];
 8003414:	4b62      	ldr	r3, [pc, #392]	; (80035a0 <HAL_TIM_PeriodElapsedCallback+0x268>)
 8003416:	ed93 6b00 	vldr	d6, [r3]
 800341a:	4b66      	ldr	r3, [pc, #408]	; (80035b4 <HAL_TIM_PeriodElapsedCallback+0x27c>)
 800341c:	edd3 7a00 	vldr	s15, [r3]
 8003420:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 8003424:	4b64      	ldr	r3, [pc, #400]	; (80035b8 <HAL_TIM_PeriodElapsedCallback+0x280>)
 8003426:	ed93 7b00 	vldr	d7, [r3]
 800342a:	ee25 7b07 	vmul.f64	d7, d5, d7
 800342e:	ee36 7b07 	vadd.f64	d7, d6, d7
 8003432:	4b62      	ldr	r3, [pc, #392]	; (80035bc <HAL_TIM_PeriodElapsedCallback+0x284>)
 8003434:	ed83 7b00 	vstr	d7, [r3]
			Recta3D[1] = Pini.y + X * vDirector[1];
 8003438:	4b59      	ldr	r3, [pc, #356]	; (80035a0 <HAL_TIM_PeriodElapsedCallback+0x268>)
 800343a:	ed93 6b02 	vldr	d6, [r3, #8]
 800343e:	4b5d      	ldr	r3, [pc, #372]	; (80035b4 <HAL_TIM_PeriodElapsedCallback+0x27c>)
 8003440:	edd3 7a01 	vldr	s15, [r3, #4]
 8003444:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 8003448:	4b5b      	ldr	r3, [pc, #364]	; (80035b8 <HAL_TIM_PeriodElapsedCallback+0x280>)
 800344a:	ed93 7b00 	vldr	d7, [r3]
 800344e:	ee25 7b07 	vmul.f64	d7, d5, d7
 8003452:	ee36 7b07 	vadd.f64	d7, d6, d7
 8003456:	4b59      	ldr	r3, [pc, #356]	; (80035bc <HAL_TIM_PeriodElapsedCallback+0x284>)
 8003458:	ed83 7b02 	vstr	d7, [r3, #8]
			Recta3D[2] = Pini.z + X * vDirector[2];
 800345c:	4b50      	ldr	r3, [pc, #320]	; (80035a0 <HAL_TIM_PeriodElapsedCallback+0x268>)
 800345e:	ed93 6b04 	vldr	d6, [r3, #16]
 8003462:	4b54      	ldr	r3, [pc, #336]	; (80035b4 <HAL_TIM_PeriodElapsedCallback+0x27c>)
 8003464:	edd3 7a02 	vldr	s15, [r3, #8]
 8003468:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 800346c:	4b52      	ldr	r3, [pc, #328]	; (80035b8 <HAL_TIM_PeriodElapsedCallback+0x280>)
 800346e:	ed93 7b00 	vldr	d7, [r3]
 8003472:	ee25 7b07 	vmul.f64	d7, d5, d7
 8003476:	ee36 7b07 	vadd.f64	d7, d6, d7
 800347a:	4b50      	ldr	r3, [pc, #320]	; (80035bc <HAL_TIM_PeriodElapsedCallback+0x284>)
 800347c:	ed83 7b04 	vstr	d7, [r3, #16]
			dRecta3D[0] = 0 + DX * vDirector[0];
 8003480:	4b4c      	ldr	r3, [pc, #304]	; (80035b4 <HAL_TIM_PeriodElapsedCallback+0x27c>)
 8003482:	edd3 7a00 	vldr	s15, [r3]
 8003486:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 800348a:	4b4d      	ldr	r3, [pc, #308]	; (80035c0 <HAL_TIM_PeriodElapsedCallback+0x288>)
 800348c:	ed93 7b00 	vldr	d7, [r3]
 8003490:	ee26 7b07 	vmul.f64	d7, d6, d7
 8003494:	ed9f 6b3a 	vldr	d6, [pc, #232]	; 8003580 <HAL_TIM_PeriodElapsedCallback+0x248>
 8003498:	ee37 7b06 	vadd.f64	d7, d7, d6
 800349c:	4b49      	ldr	r3, [pc, #292]	; (80035c4 <HAL_TIM_PeriodElapsedCallback+0x28c>)
 800349e:	ed83 7b00 	vstr	d7, [r3]
			dRecta3D[1] = 0 + DX * vDirector[1];
 80034a2:	4b44      	ldr	r3, [pc, #272]	; (80035b4 <HAL_TIM_PeriodElapsedCallback+0x27c>)
 80034a4:	edd3 7a01 	vldr	s15, [r3, #4]
 80034a8:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 80034ac:	4b44      	ldr	r3, [pc, #272]	; (80035c0 <HAL_TIM_PeriodElapsedCallback+0x288>)
 80034ae:	ed93 7b00 	vldr	d7, [r3]
 80034b2:	ee26 7b07 	vmul.f64	d7, d6, d7
 80034b6:	ed9f 6b32 	vldr	d6, [pc, #200]	; 8003580 <HAL_TIM_PeriodElapsedCallback+0x248>
 80034ba:	ee37 7b06 	vadd.f64	d7, d7, d6
 80034be:	4b41      	ldr	r3, [pc, #260]	; (80035c4 <HAL_TIM_PeriodElapsedCallback+0x28c>)
 80034c0:	ed83 7b02 	vstr	d7, [r3, #8]
			dRecta3D[2] = 0 + DX * vDirector[2];
 80034c4:	4b3b      	ldr	r3, [pc, #236]	; (80035b4 <HAL_TIM_PeriodElapsedCallback+0x27c>)
 80034c6:	edd3 7a02 	vldr	s15, [r3, #8]
 80034ca:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 80034ce:	4b3c      	ldr	r3, [pc, #240]	; (80035c0 <HAL_TIM_PeriodElapsedCallback+0x288>)
 80034d0:	ed93 7b00 	vldr	d7, [r3]
 80034d4:	ee26 7b07 	vmul.f64	d7, d6, d7
 80034d8:	ed9f 6b29 	vldr	d6, [pc, #164]	; 8003580 <HAL_TIM_PeriodElapsedCallback+0x248>
 80034dc:	ee37 7b06 	vadd.f64	d7, d7, d6
 80034e0:	4b38      	ldr	r3, [pc, #224]	; (80035c4 <HAL_TIM_PeriodElapsedCallback+0x28c>)
 80034e2:	ed83 7b04 	vstr	d7, [r3, #16]
			dRecta3DZ=dRecta3D[2]; // NO HACE NADA ?
 80034e6:	4b37      	ldr	r3, [pc, #220]	; (80035c4 <HAL_TIM_PeriodElapsedCallback+0x28c>)
 80034e8:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80034ec:	4936      	ldr	r1, [pc, #216]	; (80035c8 <HAL_TIM_PeriodElapsedCallback+0x290>)
 80034ee:	e9c1 2300 	strd	r2, r3, [r1]
			jacobianoInverso(dRecta3D[0], dRecta3D[1], dRecta3D[2], Recta3D[0], Recta3D[1], Recta3D[2]);
 80034f2:	4b34      	ldr	r3, [pc, #208]	; (80035c4 <HAL_TIM_PeriodElapsedCallback+0x28c>)
 80034f4:	ed93 7b00 	vldr	d7, [r3]
 80034f8:	4b32      	ldr	r3, [pc, #200]	; (80035c4 <HAL_TIM_PeriodElapsedCallback+0x28c>)
 80034fa:	ed93 6b02 	vldr	d6, [r3, #8]
 80034fe:	4b31      	ldr	r3, [pc, #196]	; (80035c4 <HAL_TIM_PeriodElapsedCallback+0x28c>)
 8003500:	ed93 2b04 	vldr	d2, [r3, #16]
 8003504:	4b2d      	ldr	r3, [pc, #180]	; (80035bc <HAL_TIM_PeriodElapsedCallback+0x284>)
 8003506:	ed93 3b00 	vldr	d3, [r3]
 800350a:	4b2c      	ldr	r3, [pc, #176]	; (80035bc <HAL_TIM_PeriodElapsedCallback+0x284>)
 800350c:	ed93 4b02 	vldr	d4, [r3, #8]
 8003510:	4b2a      	ldr	r3, [pc, #168]	; (80035bc <HAL_TIM_PeriodElapsedCallback+0x284>)
 8003512:	ed93 5b04 	vldr	d5, [r3, #16]
 8003516:	eeb0 1b46 	vmov.f64	d1, d6
 800351a:	eeb0 0b47 	vmov.f64	d0, d7
 800351e:	f002 fcc3 	bl	8005ea8 <jacobianoInverso>
			SetPerfilTimers(omega[0], omega[1], omega[2]);
 8003522:	4b2a      	ldr	r3, [pc, #168]	; (80035cc <HAL_TIM_PeriodElapsedCallback+0x294>)
 8003524:	ed93 7b00 	vldr	d7, [r3]
 8003528:	4b28      	ldr	r3, [pc, #160]	; (80035cc <HAL_TIM_PeriodElapsedCallback+0x294>)
 800352a:	ed93 6b02 	vldr	d6, [r3, #8]
 800352e:	4b27      	ldr	r3, [pc, #156]	; (80035cc <HAL_TIM_PeriodElapsedCallback+0x294>)
 8003530:	ed93 5b04 	vldr	d5, [r3, #16]
 8003534:	eeb0 2b45 	vmov.f64	d2, d5
 8003538:	eeb0 1b46 	vmov.f64	d1, d6
 800353c:	eeb0 0b47 	vmov.f64	d0, d7
 8003540:	f002 ffda 	bl	80064f8 <SetPerfilTimers>
			if(Start==1){
 8003544:	4b22      	ldr	r3, [pc, #136]	; (80035d0 <HAL_TIM_PeriodElapsedCallback+0x298>)
 8003546:	781b      	ldrb	r3, [r3, #0]
 8003548:	2b01      	cmp	r3, #1
 800354a:	d10e      	bne.n	800356a <HAL_TIM_PeriodElapsedCallback+0x232>
				Start=0;
 800354c:	4b20      	ldr	r3, [pc, #128]	; (80035d0 <HAL_TIM_PeriodElapsedCallback+0x298>)
 800354e:	2200      	movs	r2, #0
 8003550:	701a      	strb	r2, [r3, #0]
				HAL_TIM_PWM_Start(&htim12, TIM_CHANNEL_1);	// Activar generacion de pwm
 8003552:	2100      	movs	r1, #0
 8003554:	481f      	ldr	r0, [pc, #124]	; (80035d4 <HAL_TIM_PeriodElapsedCallback+0x29c>)
 8003556:	f007 fb49 	bl	800abec <HAL_TIM_PWM_Start>
				HAL_TIM_PWM_Start(&htim13, TIM_CHANNEL_1);	// Activar generacion de pwm
 800355a:	2100      	movs	r1, #0
 800355c:	481e      	ldr	r0, [pc, #120]	; (80035d8 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 800355e:	f007 fb45 	bl	800abec <HAL_TIM_PWM_Start>
				HAL_TIM_PWM_Start(&htim14, TIM_CHANNEL_1);	// Activar generacion de pwm
 8003562:	2100      	movs	r1, #0
 8003564:	481d      	ldr	r0, [pc, #116]	; (80035dc <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 8003566:	f007 fb41 	bl	800abec <HAL_TIM_PWM_Start>
}
 800356a:	bf00      	nop
 800356c:	3708      	adds	r7, #8
 800356e:	46bd      	mov	sp, r7
 8003570:	bd80      	pop	{r7, pc}
 8003572:	bf00      	nop
 8003574:	f3af 8000 	nop.w
 8003578:	00000000 	.word	0x00000000
 800357c:	418e8480 	.word	0x418e8480
	...
 8003588:	240007e8 	.word	0x240007e8
 800358c:	240004d8 	.word	0x240004d8
 8003590:	240004e0 	.word	0x240004e0
 8003594:	24000008 	.word	0x24000008
 8003598:	240006b8 	.word	0x240006b8
 800359c:	24000418 	.word	0x24000418
 80035a0:	24000400 	.word	0x24000400
 80035a4:	24000578 	.word	0x24000578
 80035a8:	240004b4 	.word	0x240004b4
 80035ac:	40000c00 	.word	0x40000c00
 80035b0:	240004b8 	.word	0x240004b8
 80035b4:	24000434 	.word	0x24000434
 80035b8:	240004c0 	.word	0x240004c0
 80035bc:	24000440 	.word	0x24000440
 80035c0:	240004c8 	.word	0x240004c8
 80035c4:	24000458 	.word	0x24000458
 80035c8:	24000580 	.word	0x24000580
 80035cc:	24000470 	.word	0x24000470
 80035d0:	24000570 	.word	0x24000570
 80035d4:	24000704 	.word	0x24000704
 80035d8:	24000750 	.word	0x24000750
 80035dc:	2400079c 	.word	0x2400079c

080035e0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80035e0:	b480      	push	{r7}
 80035e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80035e4:	bf00      	nop
 80035e6:	46bd      	mov	sp, r7
 80035e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ec:	4770      	bx	lr
	...

080035f0 <configStepMotor1>:
double remanente3;
double Periodo;		//periodo de timer PWM
//double ErrorPeriodo;
//double ErrorAcumuladoPeriodo[3];

void configStepMotor1(double angulo) {
 80035f0:	b580      	push	{r7, lr}
 80035f2:	b084      	sub	sp, #16
 80035f4:	af00      	add	r7, sp, #0
 80035f6:	ed87 0b00 	vstr	d0, [r7]
	double anguloDif;
	pMotor1 = 0;
 80035fa:	4b51      	ldr	r3, [pc, #324]	; (8003740 <configStepMotor1+0x150>)
 80035fc:	2200      	movs	r2, #0
 80035fe:	601a      	str	r2, [r3, #0]
	if (angulo >= anguloActual1) {
 8003600:	4b50      	ldr	r3, [pc, #320]	; (8003744 <configStepMotor1+0x154>)
 8003602:	ed93 7b00 	vldr	d7, [r3]
 8003606:	ed97 6b00 	vldr	d6, [r7]
 800360a:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800360e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003612:	db22      	blt.n	800365a <configStepMotor1+0x6a>
		if(!(HAL_GPIO_ReadPin(E_EndStop1_Inf_GPIO_Port, E_EndStop1_Inf_Pin))){
 8003614:	2102      	movs	r1, #2
 8003616:	484c      	ldr	r0, [pc, #304]	; (8003748 <configStepMotor1+0x158>)
 8003618:	f004 fd48 	bl	80080ac <HAL_GPIO_ReadPin>
 800361c:	4603      	mov	r3, r0
 800361e:	2b00      	cmp	r3, #0
 8003620:	d106      	bne.n	8003630 <configStepMotor1+0x40>
			flagErrorEndStop = 1;
 8003622:	494a      	ldr	r1, [pc, #296]	; (800374c <configStepMotor1+0x15c>)
 8003624:	f04f 0200 	mov.w	r2, #0
 8003628:	4b49      	ldr	r3, [pc, #292]	; (8003750 <configStepMotor1+0x160>)
 800362a:	e9c1 2300 	strd	r2, r3, [r1]
 800362e:	e036      	b.n	800369e <configStepMotor1+0xae>
		} else {
			anguloDif = angulo - anguloActual1;	//Calculo cuantos grados se tiene que mover.
 8003630:	4b44      	ldr	r3, [pc, #272]	; (8003744 <configStepMotor1+0x154>)
 8003632:	ed93 7b00 	vldr	d7, [r3]
 8003636:	ed97 6b00 	vldr	d6, [r7]
 800363a:	ee36 7b47 	vsub.f64	d7, d6, d7
 800363e:	ed87 7b02 	vstr	d7, [r7, #8]
			anguloActual1 = angulo;
 8003642:	4940      	ldr	r1, [pc, #256]	; (8003744 <configStepMotor1+0x154>)
 8003644:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003648:	e9c1 2300 	strd	r2, r3, [r1]
			HAL_GPIO_WritePin(S_DirPaP1_GPIO_Port, S_DirPaP1_Pin, GPIO_PIN_SET); //Antihorario visto de frente
 800364c:	2201      	movs	r2, #1
 800364e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003652:	4840      	ldr	r0, [pc, #256]	; (8003754 <configStepMotor1+0x164>)
 8003654:	f004 fd42 	bl	80080dc <HAL_GPIO_WritePin>
 8003658:	e021      	b.n	800369e <configStepMotor1+0xae>
		}
	} else {
		if(!(HAL_GPIO_ReadPin(E_EndStop1_Sup_GPIO_Port, E_EndStop1_Sup_Pin))){
 800365a:	2101      	movs	r1, #1
 800365c:	483a      	ldr	r0, [pc, #232]	; (8003748 <configStepMotor1+0x158>)
 800365e:	f004 fd25 	bl	80080ac <HAL_GPIO_ReadPin>
 8003662:	4603      	mov	r3, r0
 8003664:	2b00      	cmp	r3, #0
 8003666:	d106      	bne.n	8003676 <configStepMotor1+0x86>
			flagErrorEndStop = 1;
 8003668:	4938      	ldr	r1, [pc, #224]	; (800374c <configStepMotor1+0x15c>)
 800366a:	f04f 0200 	mov.w	r2, #0
 800366e:	4b38      	ldr	r3, [pc, #224]	; (8003750 <configStepMotor1+0x160>)
 8003670:	e9c1 2300 	strd	r2, r3, [r1]
 8003674:	e013      	b.n	800369e <configStepMotor1+0xae>
		} else {
			anguloDif = anguloActual1 - angulo;	//Calculo cuantos grados se tiene que mover.
 8003676:	4b33      	ldr	r3, [pc, #204]	; (8003744 <configStepMotor1+0x154>)
 8003678:	ed93 6b00 	vldr	d6, [r3]
 800367c:	ed97 7b00 	vldr	d7, [r7]
 8003680:	ee36 7b47 	vsub.f64	d7, d6, d7
 8003684:	ed87 7b02 	vstr	d7, [r7, #8]
			anguloActual1 = angulo;
 8003688:	492e      	ldr	r1, [pc, #184]	; (8003744 <configStepMotor1+0x154>)
 800368a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800368e:	e9c1 2300 	strd	r2, r3, [r1]
			HAL_GPIO_WritePin(S_DirPaP1_GPIO_Port, S_DirPaP1_Pin, GPIO_PIN_RESET); // Horario visto de frente
 8003692:	2200      	movs	r2, #0
 8003694:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003698:	482e      	ldr	r0, [pc, #184]	; (8003754 <configStepMotor1+0x164>)
 800369a:	f004 fd1f 	bl	80080dc <HAL_GPIO_WritePin>
		}

	}
	// Calculo el error de posicion por casteo a int, y cuando supera la unidad lo compenzo------
	calculoStep1 = (anguloDif * STEPREV) / 360; // Almaceno el remante de los numeros de pasos y
 800369e:	ed97 7b02 	vldr	d7, [r7, #8]
 80036a2:	ed9f 6b23 	vldr	d6, [pc, #140]	; 8003730 <configStepMotor1+0x140>
 80036a6:	ee27 6b06 	vmul.f64	d6, d7, d6
 80036aa:	ed9f 5b23 	vldr	d5, [pc, #140]	; 8003738 <configStepMotor1+0x148>
 80036ae:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80036b2:	4b29      	ldr	r3, [pc, #164]	; (8003758 <configStepMotor1+0x168>)
 80036b4:	ed83 7b00 	vstr	d7, [r3]
	numStep1 = (uint32_t) calculoStep1;	// cuando pasa la unidad lo sumo al numero de pasos para
 80036b8:	4b27      	ldr	r3, [pc, #156]	; (8003758 <configStepMotor1+0x168>)
 80036ba:	ed93 7b00 	vldr	d7, [r3]
 80036be:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80036c2:	ee17 2a90 	vmov	r2, s15
 80036c6:	4b25      	ldr	r3, [pc, #148]	; (800375c <configStepMotor1+0x16c>)
 80036c8:	601a      	str	r2, [r3, #0]
	remanente1 = remanente1 + (calculoStep1 - numStep1);// que el error no se amplifique.
 80036ca:	4b23      	ldr	r3, [pc, #140]	; (8003758 <configStepMotor1+0x168>)
 80036cc:	ed93 6b00 	vldr	d6, [r3]
 80036d0:	4b22      	ldr	r3, [pc, #136]	; (800375c <configStepMotor1+0x16c>)
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	ee07 3a90 	vmov	s15, r3
 80036d8:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80036dc:	ee36 6b47 	vsub.f64	d6, d6, d7
 80036e0:	4b1f      	ldr	r3, [pc, #124]	; (8003760 <configStepMotor1+0x170>)
 80036e2:	ed93 7b00 	vldr	d7, [r3]
 80036e6:	ee36 7b07 	vadd.f64	d7, d6, d7
 80036ea:	4b1d      	ldr	r3, [pc, #116]	; (8003760 <configStepMotor1+0x170>)
 80036ec:	ed83 7b00 	vstr	d7, [r3]
	if (remanente1 >= 1) {
 80036f0:	4b1b      	ldr	r3, [pc, #108]	; (8003760 <configStepMotor1+0x170>)
 80036f2:	ed93 7b00 	vldr	d7, [r3]
 80036f6:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 80036fa:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80036fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003702:	da00      	bge.n	8003706 <configStepMotor1+0x116>
		remanente1 = remanente1 - 1;
		numStep1 = numStep1 + 1;
	}
}
 8003704:	e00e      	b.n	8003724 <configStepMotor1+0x134>
		remanente1 = remanente1 - 1;
 8003706:	4b16      	ldr	r3, [pc, #88]	; (8003760 <configStepMotor1+0x170>)
 8003708:	ed93 7b00 	vldr	d7, [r3]
 800370c:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8003710:	ee37 7b46 	vsub.f64	d7, d7, d6
 8003714:	4b12      	ldr	r3, [pc, #72]	; (8003760 <configStepMotor1+0x170>)
 8003716:	ed83 7b00 	vstr	d7, [r3]
		numStep1 = numStep1 + 1;
 800371a:	4b10      	ldr	r3, [pc, #64]	; (800375c <configStepMotor1+0x16c>)
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	3301      	adds	r3, #1
 8003720:	4a0e      	ldr	r2, [pc, #56]	; (800375c <configStepMotor1+0x16c>)
 8003722:	6013      	str	r3, [r2, #0]
}
 8003724:	bf00      	nop
 8003726:	3710      	adds	r7, #16
 8003728:	46bd      	mov	sp, r7
 800372a:	bd80      	pop	{r7, pc}
 800372c:	f3af 8000 	nop.w
 8003730:	00000000 	.word	0x00000000
 8003734:	40990000 	.word	0x40990000
 8003738:	00000000 	.word	0x00000000
 800373c:	40768000 	.word	0x40768000
 8003740:	240003a4 	.word	0x240003a4
 8003744:	24000588 	.word	0x24000588
 8003748:	58021000 	.word	0x58021000
 800374c:	24000520 	.word	0x24000520
 8003750:	3ff00000 	.word	0x3ff00000
 8003754:	58020800 	.word	0x58020800
 8003758:	240005a0 	.word	0x240005a0
 800375c:	240003b0 	.word	0x240003b0
 8003760:	240005b8 	.word	0x240005b8
 8003764:	00000000 	.word	0x00000000

08003768 <configStepMotor2>:

void configStepMotor2(double angulo) {
 8003768:	b580      	push	{r7, lr}
 800376a:	b084      	sub	sp, #16
 800376c:	af00      	add	r7, sp, #0
 800376e:	ed87 0b00 	vstr	d0, [r7]
	double anguloDif;
	pMotor2 = 0;
 8003772:	4b51      	ldr	r3, [pc, #324]	; (80038b8 <configStepMotor2+0x150>)
 8003774:	2200      	movs	r2, #0
 8003776:	601a      	str	r2, [r3, #0]
	if (angulo >= anguloActual2) {
 8003778:	4b50      	ldr	r3, [pc, #320]	; (80038bc <configStepMotor2+0x154>)
 800377a:	ed93 7b00 	vldr	d7, [r3]
 800377e:	ed97 6b00 	vldr	d6, [r7]
 8003782:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8003786:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800378a:	db22      	blt.n	80037d2 <configStepMotor2+0x6a>
		if(!(HAL_GPIO_ReadPin(E_EndStop2_Inf_GPIO_Port, E_EndStop2_Inf_Pin))){
 800378c:	2108      	movs	r1, #8
 800378e:	484c      	ldr	r0, [pc, #304]	; (80038c0 <configStepMotor2+0x158>)
 8003790:	f004 fc8c 	bl	80080ac <HAL_GPIO_ReadPin>
 8003794:	4603      	mov	r3, r0
 8003796:	2b00      	cmp	r3, #0
 8003798:	d106      	bne.n	80037a8 <configStepMotor2+0x40>
			flagErrorEndStop = 1;
 800379a:	494a      	ldr	r1, [pc, #296]	; (80038c4 <configStepMotor2+0x15c>)
 800379c:	f04f 0200 	mov.w	r2, #0
 80037a0:	4b49      	ldr	r3, [pc, #292]	; (80038c8 <configStepMotor2+0x160>)
 80037a2:	e9c1 2300 	strd	r2, r3, [r1]
 80037a6:	e036      	b.n	8003816 <configStepMotor2+0xae>
		} else {
			anguloDif = angulo - anguloActual2;	//Calculo cuantos grados se tiene que mover.
 80037a8:	4b44      	ldr	r3, [pc, #272]	; (80038bc <configStepMotor2+0x154>)
 80037aa:	ed93 7b00 	vldr	d7, [r3]
 80037ae:	ed97 6b00 	vldr	d6, [r7]
 80037b2:	ee36 7b47 	vsub.f64	d7, d6, d7
 80037b6:	ed87 7b02 	vstr	d7, [r7, #8]
			anguloActual2 = angulo;
 80037ba:	4940      	ldr	r1, [pc, #256]	; (80038bc <configStepMotor2+0x154>)
 80037bc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80037c0:	e9c1 2300 	strd	r2, r3, [r1]
			HAL_GPIO_WritePin(S_DirPaP2_GPIO_Port, S_DirPaP2_Pin, GPIO_PIN_SET); // VERIFICAR SENTIDO DE GIRO
 80037c4:	2201      	movs	r2, #1
 80037c6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80037ca:	4840      	ldr	r0, [pc, #256]	; (80038cc <configStepMotor2+0x164>)
 80037cc:	f004 fc86 	bl	80080dc <HAL_GPIO_WritePin>
 80037d0:	e021      	b.n	8003816 <configStepMotor2+0xae>
		}
	} else {
		if(!(HAL_GPIO_ReadPin(E_EndStop2_Sup_GPIO_Port, E_EndStop2_Sup_Pin))){
 80037d2:	2104      	movs	r1, #4
 80037d4:	483a      	ldr	r0, [pc, #232]	; (80038c0 <configStepMotor2+0x158>)
 80037d6:	f004 fc69 	bl	80080ac <HAL_GPIO_ReadPin>
 80037da:	4603      	mov	r3, r0
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d106      	bne.n	80037ee <configStepMotor2+0x86>
			flagErrorEndStop = 1;
 80037e0:	4938      	ldr	r1, [pc, #224]	; (80038c4 <configStepMotor2+0x15c>)
 80037e2:	f04f 0200 	mov.w	r2, #0
 80037e6:	4b38      	ldr	r3, [pc, #224]	; (80038c8 <configStepMotor2+0x160>)
 80037e8:	e9c1 2300 	strd	r2, r3, [r1]
 80037ec:	e013      	b.n	8003816 <configStepMotor2+0xae>
		} else {
			anguloDif = anguloActual2 - angulo;	//Calculo cuantos grados se tiene que mover.
 80037ee:	4b33      	ldr	r3, [pc, #204]	; (80038bc <configStepMotor2+0x154>)
 80037f0:	ed93 6b00 	vldr	d6, [r3]
 80037f4:	ed97 7b00 	vldr	d7, [r7]
 80037f8:	ee36 7b47 	vsub.f64	d7, d6, d7
 80037fc:	ed87 7b02 	vstr	d7, [r7, #8]
			anguloActual2 = angulo;
 8003800:	492e      	ldr	r1, [pc, #184]	; (80038bc <configStepMotor2+0x154>)
 8003802:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003806:	e9c1 2300 	strd	r2, r3, [r1]
			HAL_GPIO_WritePin(S_DirPaP2_GPIO_Port, S_DirPaP2_Pin, GPIO_PIN_RESET); // VERIFICAR SENTIDO DE GIRO
 800380a:	2200      	movs	r2, #0
 800380c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003810:	482e      	ldr	r0, [pc, #184]	; (80038cc <configStepMotor2+0x164>)
 8003812:	f004 fc63 	bl	80080dc <HAL_GPIO_WritePin>
		}

	}
	// Calculo el error de posicion por casteo a int, y cuando supera la unidad lo compenzo------
	calculoStep2 = (anguloDif * STEPREV) / 360; // Almaceno el remante de los numeros de pasos y
 8003816:	ed97 7b02 	vldr	d7, [r7, #8]
 800381a:	ed9f 6b23 	vldr	d6, [pc, #140]	; 80038a8 <configStepMotor2+0x140>
 800381e:	ee27 6b06 	vmul.f64	d6, d7, d6
 8003822:	ed9f 5b23 	vldr	d5, [pc, #140]	; 80038b0 <configStepMotor2+0x148>
 8003826:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800382a:	4b29      	ldr	r3, [pc, #164]	; (80038d0 <configStepMotor2+0x168>)
 800382c:	ed83 7b00 	vstr	d7, [r3]
	numStep2 = (uint32_t) calculoStep2;	// cuando pasa la unidad lo sumo al numero de pasos para
 8003830:	4b27      	ldr	r3, [pc, #156]	; (80038d0 <configStepMotor2+0x168>)
 8003832:	ed93 7b00 	vldr	d7, [r3]
 8003836:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800383a:	ee17 2a90 	vmov	r2, s15
 800383e:	4b25      	ldr	r3, [pc, #148]	; (80038d4 <configStepMotor2+0x16c>)
 8003840:	601a      	str	r2, [r3, #0]
	remanente2 = remanente2 + (calculoStep2 - numStep2);// que el error no se amplifique.
 8003842:	4b23      	ldr	r3, [pc, #140]	; (80038d0 <configStepMotor2+0x168>)
 8003844:	ed93 6b00 	vldr	d6, [r3]
 8003848:	4b22      	ldr	r3, [pc, #136]	; (80038d4 <configStepMotor2+0x16c>)
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	ee07 3a90 	vmov	s15, r3
 8003850:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8003854:	ee36 6b47 	vsub.f64	d6, d6, d7
 8003858:	4b1f      	ldr	r3, [pc, #124]	; (80038d8 <configStepMotor2+0x170>)
 800385a:	ed93 7b00 	vldr	d7, [r3]
 800385e:	ee36 7b07 	vadd.f64	d7, d6, d7
 8003862:	4b1d      	ldr	r3, [pc, #116]	; (80038d8 <configStepMotor2+0x170>)
 8003864:	ed83 7b00 	vstr	d7, [r3]
	if (remanente2 >= 1) {
 8003868:	4b1b      	ldr	r3, [pc, #108]	; (80038d8 <configStepMotor2+0x170>)
 800386a:	ed93 7b00 	vldr	d7, [r3]
 800386e:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8003872:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8003876:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800387a:	da00      	bge.n	800387e <configStepMotor2+0x116>
		remanente2 = remanente2 - 1;
		numStep2 = numStep2 + 1;
	}
}
 800387c:	e00e      	b.n	800389c <configStepMotor2+0x134>
		remanente2 = remanente2 - 1;
 800387e:	4b16      	ldr	r3, [pc, #88]	; (80038d8 <configStepMotor2+0x170>)
 8003880:	ed93 7b00 	vldr	d7, [r3]
 8003884:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8003888:	ee37 7b46 	vsub.f64	d7, d7, d6
 800388c:	4b12      	ldr	r3, [pc, #72]	; (80038d8 <configStepMotor2+0x170>)
 800388e:	ed83 7b00 	vstr	d7, [r3]
		numStep2 = numStep2 + 1;
 8003892:	4b10      	ldr	r3, [pc, #64]	; (80038d4 <configStepMotor2+0x16c>)
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	3301      	adds	r3, #1
 8003898:	4a0e      	ldr	r2, [pc, #56]	; (80038d4 <configStepMotor2+0x16c>)
 800389a:	6013      	str	r3, [r2, #0]
}
 800389c:	bf00      	nop
 800389e:	3710      	adds	r7, #16
 80038a0:	46bd      	mov	sp, r7
 80038a2:	bd80      	pop	{r7, pc}
 80038a4:	f3af 8000 	nop.w
 80038a8:	00000000 	.word	0x00000000
 80038ac:	40990000 	.word	0x40990000
 80038b0:	00000000 	.word	0x00000000
 80038b4:	40768000 	.word	0x40768000
 80038b8:	240003a8 	.word	0x240003a8
 80038bc:	24000590 	.word	0x24000590
 80038c0:	58021000 	.word	0x58021000
 80038c4:	24000520 	.word	0x24000520
 80038c8:	3ff00000 	.word	0x3ff00000
 80038cc:	58020800 	.word	0x58020800
 80038d0:	240005a8 	.word	0x240005a8
 80038d4:	240003b4 	.word	0x240003b4
 80038d8:	240005c0 	.word	0x240005c0
 80038dc:	00000000 	.word	0x00000000

080038e0 <configStepMotor3>:

void configStepMotor3(double angulo) {
 80038e0:	b580      	push	{r7, lr}
 80038e2:	b084      	sub	sp, #16
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	ed87 0b00 	vstr	d0, [r7]
	double anguloDif;
	pMotor3 = 0;
 80038ea:	4b51      	ldr	r3, [pc, #324]	; (8003a30 <configStepMotor3+0x150>)
 80038ec:	2200      	movs	r2, #0
 80038ee:	601a      	str	r2, [r3, #0]
	if (angulo >= anguloActual3) {
 80038f0:	4b50      	ldr	r3, [pc, #320]	; (8003a34 <configStepMotor3+0x154>)
 80038f2:	ed93 7b00 	vldr	d7, [r3]
 80038f6:	ed97 6b00 	vldr	d6, [r7]
 80038fa:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80038fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003902:	db22      	blt.n	800394a <configStepMotor3+0x6a>
		if(!(HAL_GPIO_ReadPin(E_EndStop3_Inf_GPIO_Port, E_EndStop3_Inf_Pin))){
 8003904:	2120      	movs	r1, #32
 8003906:	484c      	ldr	r0, [pc, #304]	; (8003a38 <configStepMotor3+0x158>)
 8003908:	f004 fbd0 	bl	80080ac <HAL_GPIO_ReadPin>
 800390c:	4603      	mov	r3, r0
 800390e:	2b00      	cmp	r3, #0
 8003910:	d106      	bne.n	8003920 <configStepMotor3+0x40>
			flagErrorEndStop = 1;
 8003912:	494a      	ldr	r1, [pc, #296]	; (8003a3c <configStepMotor3+0x15c>)
 8003914:	f04f 0200 	mov.w	r2, #0
 8003918:	4b49      	ldr	r3, [pc, #292]	; (8003a40 <configStepMotor3+0x160>)
 800391a:	e9c1 2300 	strd	r2, r3, [r1]
 800391e:	e036      	b.n	800398e <configStepMotor3+0xae>
		} else {
			anguloDif = angulo - anguloActual3;	//Calculo cuantos grados se tiene que mover.
 8003920:	4b44      	ldr	r3, [pc, #272]	; (8003a34 <configStepMotor3+0x154>)
 8003922:	ed93 7b00 	vldr	d7, [r3]
 8003926:	ed97 6b00 	vldr	d6, [r7]
 800392a:	ee36 7b47 	vsub.f64	d7, d6, d7
 800392e:	ed87 7b02 	vstr	d7, [r7, #8]
			anguloActual3 = angulo;
 8003932:	4940      	ldr	r1, [pc, #256]	; (8003a34 <configStepMotor3+0x154>)
 8003934:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003938:	e9c1 2300 	strd	r2, r3, [r1]
			HAL_GPIO_WritePin(S_DirPaP3_GPIO_Port, S_DirPaP3_Pin, GPIO_PIN_SET); // Brazo Baja (Antihorario)
 800393c:	2201      	movs	r2, #1
 800393e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003942:	4840      	ldr	r0, [pc, #256]	; (8003a44 <configStepMotor3+0x164>)
 8003944:	f004 fbca 	bl	80080dc <HAL_GPIO_WritePin>
 8003948:	e021      	b.n	800398e <configStepMotor3+0xae>
		}
	} else {
		if(!(HAL_GPIO_ReadPin(E_EndStop3_Inf_GPIO_Port, E_EndStop3_Inf_Pin))){
 800394a:	2120      	movs	r1, #32
 800394c:	483a      	ldr	r0, [pc, #232]	; (8003a38 <configStepMotor3+0x158>)
 800394e:	f004 fbad 	bl	80080ac <HAL_GPIO_ReadPin>
 8003952:	4603      	mov	r3, r0
 8003954:	2b00      	cmp	r3, #0
 8003956:	d106      	bne.n	8003966 <configStepMotor3+0x86>
					flagErrorEndStop = 1;
 8003958:	4938      	ldr	r1, [pc, #224]	; (8003a3c <configStepMotor3+0x15c>)
 800395a:	f04f 0200 	mov.w	r2, #0
 800395e:	4b38      	ldr	r3, [pc, #224]	; (8003a40 <configStepMotor3+0x160>)
 8003960:	e9c1 2300 	strd	r2, r3, [r1]
 8003964:	e013      	b.n	800398e <configStepMotor3+0xae>
		} else {
			anguloDif = anguloActual3 - angulo;	//Calculo cuantos grados se tiene que mover.
 8003966:	4b33      	ldr	r3, [pc, #204]	; (8003a34 <configStepMotor3+0x154>)
 8003968:	ed93 6b00 	vldr	d6, [r3]
 800396c:	ed97 7b00 	vldr	d7, [r7]
 8003970:	ee36 7b47 	vsub.f64	d7, d6, d7
 8003974:	ed87 7b02 	vstr	d7, [r7, #8]
			anguloActual3 = angulo;
 8003978:	492e      	ldr	r1, [pc, #184]	; (8003a34 <configStepMotor3+0x154>)
 800397a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800397e:	e9c1 2300 	strd	r2, r3, [r1]
			HAL_GPIO_WritePin(S_DirPaP3_GPIO_Port, S_DirPaP3_Pin, GPIO_PIN_RESET); // Brazo Sube (Horario)
 8003982:	2200      	movs	r2, #0
 8003984:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003988:	482e      	ldr	r0, [pc, #184]	; (8003a44 <configStepMotor3+0x164>)
 800398a:	f004 fba7 	bl	80080dc <HAL_GPIO_WritePin>
		}
	}
	// Calculo el error de posicion por casteo a int, y cuando supera la unidad lo compenzo------
	calculoStep3 = (anguloDif * STEPREV) / 360; // Almaceno el remante de los numeros de pasos y
 800398e:	ed97 7b02 	vldr	d7, [r7, #8]
 8003992:	ed9f 6b23 	vldr	d6, [pc, #140]	; 8003a20 <configStepMotor3+0x140>
 8003996:	ee27 6b06 	vmul.f64	d6, d7, d6
 800399a:	ed9f 5b23 	vldr	d5, [pc, #140]	; 8003a28 <configStepMotor3+0x148>
 800399e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80039a2:	4b29      	ldr	r3, [pc, #164]	; (8003a48 <configStepMotor3+0x168>)
 80039a4:	ed83 7b00 	vstr	d7, [r3]
	numStep3 = (uint32_t) calculoStep3;	// cuando pasa la unidad lo sumo al numero de pasos para
 80039a8:	4b27      	ldr	r3, [pc, #156]	; (8003a48 <configStepMotor3+0x168>)
 80039aa:	ed93 7b00 	vldr	d7, [r3]
 80039ae:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80039b2:	ee17 2a90 	vmov	r2, s15
 80039b6:	4b25      	ldr	r3, [pc, #148]	; (8003a4c <configStepMotor3+0x16c>)
 80039b8:	601a      	str	r2, [r3, #0]
	remanente3 = remanente3 + (calculoStep3 - numStep3);// que el error no se amplifique.
 80039ba:	4b23      	ldr	r3, [pc, #140]	; (8003a48 <configStepMotor3+0x168>)
 80039bc:	ed93 6b00 	vldr	d6, [r3]
 80039c0:	4b22      	ldr	r3, [pc, #136]	; (8003a4c <configStepMotor3+0x16c>)
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	ee07 3a90 	vmov	s15, r3
 80039c8:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80039cc:	ee36 6b47 	vsub.f64	d6, d6, d7
 80039d0:	4b1f      	ldr	r3, [pc, #124]	; (8003a50 <configStepMotor3+0x170>)
 80039d2:	ed93 7b00 	vldr	d7, [r3]
 80039d6:	ee36 7b07 	vadd.f64	d7, d6, d7
 80039da:	4b1d      	ldr	r3, [pc, #116]	; (8003a50 <configStepMotor3+0x170>)
 80039dc:	ed83 7b00 	vstr	d7, [r3]
	if (remanente3 >= 1) {
 80039e0:	4b1b      	ldr	r3, [pc, #108]	; (8003a50 <configStepMotor3+0x170>)
 80039e2:	ed93 7b00 	vldr	d7, [r3]
 80039e6:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 80039ea:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80039ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80039f2:	da00      	bge.n	80039f6 <configStepMotor3+0x116>
		remanente3 = remanente3 - 1;
		numStep3 = numStep3 + 1;
	}
}
 80039f4:	e00e      	b.n	8003a14 <configStepMotor3+0x134>
		remanente3 = remanente3 - 1;
 80039f6:	4b16      	ldr	r3, [pc, #88]	; (8003a50 <configStepMotor3+0x170>)
 80039f8:	ed93 7b00 	vldr	d7, [r3]
 80039fc:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8003a00:	ee37 7b46 	vsub.f64	d7, d7, d6
 8003a04:	4b12      	ldr	r3, [pc, #72]	; (8003a50 <configStepMotor3+0x170>)
 8003a06:	ed83 7b00 	vstr	d7, [r3]
		numStep3 = numStep3 + 1;
 8003a0a:	4b10      	ldr	r3, [pc, #64]	; (8003a4c <configStepMotor3+0x16c>)
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	3301      	adds	r3, #1
 8003a10:	4a0e      	ldr	r2, [pc, #56]	; (8003a4c <configStepMotor3+0x16c>)
 8003a12:	6013      	str	r3, [r2, #0]
}
 8003a14:	bf00      	nop
 8003a16:	3710      	adds	r7, #16
 8003a18:	46bd      	mov	sp, r7
 8003a1a:	bd80      	pop	{r7, pc}
 8003a1c:	f3af 8000 	nop.w
 8003a20:	00000000 	.word	0x00000000
 8003a24:	40990000 	.word	0x40990000
 8003a28:	00000000 	.word	0x00000000
 8003a2c:	40768000 	.word	0x40768000
 8003a30:	240003ac 	.word	0x240003ac
 8003a34:	24000598 	.word	0x24000598
 8003a38:	58021000 	.word	0x58021000
 8003a3c:	24000520 	.word	0x24000520
 8003a40:	3ff00000 	.word	0x3ff00000
 8003a44:	58020800 	.word	0x58020800
 8003a48:	240005b0 	.word	0x240005b0
 8003a4c:	240003b8 	.word	0x240003b8
 8003a50:	240005c8 	.word	0x240005c8

08003a54 <transpuesta>:
 *      Author: EliasC
 */

#include <operaciones.h>

array2D transpuesta(double Maux[3][3]) {
 8003a54:	b580      	push	{r7, lr}
 8003a56:	b096      	sub	sp, #88	; 0x58
 8003a58:	af00      	add	r7, sp, #0
 8003a5a:	6078      	str	r0, [r7, #4]
 8003a5c:	6039      	str	r1, [r7, #0]
	array2D MTaux;
	for (int i = 0; i < 3; ++i) {
 8003a5e:	2300      	movs	r3, #0
 8003a60:	657b      	str	r3, [r7, #84]	; 0x54
 8003a62:	e024      	b.n	8003aae <transpuesta+0x5a>
		for (int j = 0; j < 3; ++j) {
 8003a64:	2300      	movs	r3, #0
 8003a66:	653b      	str	r3, [r7, #80]	; 0x50
 8003a68:	e01b      	b.n	8003aa2 <transpuesta+0x4e>
			MTaux.m[j][i] = Maux[i][j];	//transpuesta de la matriz l2 JP=[l21';l22';l23'];
 8003a6a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003a6c:	4613      	mov	r3, r2
 8003a6e:	005b      	lsls	r3, r3, #1
 8003a70:	4413      	add	r3, r2
 8003a72:	00db      	lsls	r3, r3, #3
 8003a74:	461a      	mov	r2, r3
 8003a76:	683b      	ldr	r3, [r7, #0]
 8003a78:	441a      	add	r2, r3
 8003a7a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003a7c:	00db      	lsls	r3, r3, #3
 8003a7e:	4413      	add	r3, r2
 8003a80:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003a84:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8003a86:	4613      	mov	r3, r2
 8003a88:	005b      	lsls	r3, r3, #1
 8003a8a:	4413      	add	r3, r2
 8003a8c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003a8e:	4413      	add	r3, r2
 8003a90:	00db      	lsls	r3, r3, #3
 8003a92:	3358      	adds	r3, #88	; 0x58
 8003a94:	443b      	add	r3, r7
 8003a96:	3b50      	subs	r3, #80	; 0x50
 8003a98:	e9c3 0100 	strd	r0, r1, [r3]
		for (int j = 0; j < 3; ++j) {
 8003a9c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003a9e:	3301      	adds	r3, #1
 8003aa0:	653b      	str	r3, [r7, #80]	; 0x50
 8003aa2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003aa4:	2b02      	cmp	r3, #2
 8003aa6:	dde0      	ble.n	8003a6a <transpuesta+0x16>
	for (int i = 0; i < 3; ++i) {
 8003aa8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003aaa:	3301      	adds	r3, #1
 8003aac:	657b      	str	r3, [r7, #84]	; 0x54
 8003aae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003ab0:	2b02      	cmp	r3, #2
 8003ab2:	ddd7      	ble.n	8003a64 <transpuesta+0x10>
		}
	}
	return MTaux;
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	4618      	mov	r0, r3
 8003ab8:	f107 0308 	add.w	r3, r7, #8
 8003abc:	2248      	movs	r2, #72	; 0x48
 8003abe:	4619      	mov	r1, r3
 8003ac0:	f00b fa20 	bl	800ef04 <memcpy>
}
 8003ac4:	6878      	ldr	r0, [r7, #4]
 8003ac6:	3758      	adds	r7, #88	; 0x58
 8003ac8:	46bd      	mov	sp, r7
 8003aca:	bd80      	pop	{r7, pc}

08003acc <productDot>:

double productDot(double VectA[], double VectB[]) {
 8003acc:	b480      	push	{r7}
 8003ace:	b087      	sub	sp, #28
 8003ad0:	af00      	add	r7, sp, #0
 8003ad2:	6078      	str	r0, [r7, #4]
 8003ad4:	6039      	str	r1, [r7, #0]
	double dotaux = 0;
 8003ad6:	f04f 0200 	mov.w	r2, #0
 8003ada:	f04f 0300 	mov.w	r3, #0
 8003ade:	e9c7 2304 	strd	r2, r3, [r7, #16]
	for (int i = 0; i < 3; ++i) {				//Producto punto entre vectores
 8003ae2:	2300      	movs	r3, #0
 8003ae4:	60fb      	str	r3, [r7, #12]
 8003ae6:	e016      	b.n	8003b16 <productDot+0x4a>
		dotaux = dotaux + VectA[i] * VectB[i];
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	00db      	lsls	r3, r3, #3
 8003aec:	687a      	ldr	r2, [r7, #4]
 8003aee:	4413      	add	r3, r2
 8003af0:	ed93 6b00 	vldr	d6, [r3]
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	00db      	lsls	r3, r3, #3
 8003af8:	683a      	ldr	r2, [r7, #0]
 8003afa:	4413      	add	r3, r2
 8003afc:	ed93 7b00 	vldr	d7, [r3]
 8003b00:	ee26 7b07 	vmul.f64	d7, d6, d7
 8003b04:	ed97 6b04 	vldr	d6, [r7, #16]
 8003b08:	ee36 7b07 	vadd.f64	d7, d6, d7
 8003b0c:	ed87 7b04 	vstr	d7, [r7, #16]
	for (int i = 0; i < 3; ++i) {				//Producto punto entre vectores
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	3301      	adds	r3, #1
 8003b14:	60fb      	str	r3, [r7, #12]
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	2b02      	cmp	r3, #2
 8003b1a:	dde5      	ble.n	8003ae8 <productDot+0x1c>
	}
	return dotaux;
 8003b1c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8003b20:	ec43 2b17 	vmov	d7, r2, r3
}
 8003b24:	eeb0 0b47 	vmov.f64	d0, d7
 8003b28:	371c      	adds	r7, #28
 8003b2a:	46bd      	mov	sp, r7
 8003b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b30:	4770      	bx	lr

08003b32 <determinante>:

double determinante(double Maux[3][3]) {
 8003b32:	b480      	push	{r7}
 8003b34:	b085      	sub	sp, #20
 8003b36:	af00      	add	r7, sp, #0
 8003b38:	6078      	str	r0, [r7, #4]
	double det;
	det = Maux[0][0] * Maux[1][1] * Maux[2][2]; // + Maux[0][1] * Maux[1][2] * Maux[2][0] + Maux[1][0] * Maux[2][1] * Maux[0][2] - Maux[2][0] * Maux[1][1] * Maux[0][2] - Maux[1][0] * Maux[0][1] * Maux[2][2] - Maux[2][1] * Maux[1][2] * Maux[0][0];
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	ed93 6b00 	vldr	d6, [r3]
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	3318      	adds	r3, #24
 8003b44:	ed93 7b02 	vldr	d7, [r3, #8]
 8003b48:	ee26 6b07 	vmul.f64	d6, d6, d7
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	3330      	adds	r3, #48	; 0x30
 8003b50:	ed93 7b04 	vldr	d7, [r3, #16]
 8003b54:	ee26 7b07 	vmul.f64	d7, d6, d7
 8003b58:	ed87 7b02 	vstr	d7, [r7, #8]
	return det;
 8003b5c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003b60:	ec43 2b17 	vmov	d7, r2, r3
}
 8003b64:	eeb0 0b47 	vmov.f64	d0, d7
 8003b68:	3714      	adds	r7, #20
 8003b6a:	46bd      	mov	sp, r7
 8003b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b70:	4770      	bx	lr

08003b72 <adjunta>:

array2D adjunta(double Maux[3][3]) {
 8003b72:	b580      	push	{r7, lr}
 8003b74:	b094      	sub	sp, #80	; 0x50
 8003b76:	af00      	add	r7, sp, #0
 8003b78:	6078      	str	r0, [r7, #4]
 8003b7a:	6039      	str	r1, [r7, #0]
	array2D adj;
	adj.m[0][0] = Maux[1][1] * Maux[2][2] - Maux[2][1] * Maux[1][2];
 8003b7c:	683b      	ldr	r3, [r7, #0]
 8003b7e:	3318      	adds	r3, #24
 8003b80:	ed93 6b02 	vldr	d6, [r3, #8]
 8003b84:	683b      	ldr	r3, [r7, #0]
 8003b86:	3330      	adds	r3, #48	; 0x30
 8003b88:	ed93 7b04 	vldr	d7, [r3, #16]
 8003b8c:	ee26 6b07 	vmul.f64	d6, d6, d7
 8003b90:	683b      	ldr	r3, [r7, #0]
 8003b92:	3330      	adds	r3, #48	; 0x30
 8003b94:	ed93 5b02 	vldr	d5, [r3, #8]
 8003b98:	683b      	ldr	r3, [r7, #0]
 8003b9a:	3318      	adds	r3, #24
 8003b9c:	ed93 7b04 	vldr	d7, [r3, #16]
 8003ba0:	ee25 7b07 	vmul.f64	d7, d5, d7
 8003ba4:	ee36 7b47 	vsub.f64	d7, d6, d7
 8003ba8:	ed87 7b02 	vstr	d7, [r7, #8]
	adj.m[0][1] = Maux[1][0] * Maux[2][2] - Maux[2][0] * Maux[1][2];
 8003bac:	683b      	ldr	r3, [r7, #0]
 8003bae:	3318      	adds	r3, #24
 8003bb0:	ed93 6b00 	vldr	d6, [r3]
 8003bb4:	683b      	ldr	r3, [r7, #0]
 8003bb6:	3330      	adds	r3, #48	; 0x30
 8003bb8:	ed93 7b04 	vldr	d7, [r3, #16]
 8003bbc:	ee26 6b07 	vmul.f64	d6, d6, d7
 8003bc0:	683b      	ldr	r3, [r7, #0]
 8003bc2:	3330      	adds	r3, #48	; 0x30
 8003bc4:	ed93 5b00 	vldr	d5, [r3]
 8003bc8:	683b      	ldr	r3, [r7, #0]
 8003bca:	3318      	adds	r3, #24
 8003bcc:	ed93 7b04 	vldr	d7, [r3, #16]
 8003bd0:	ee25 7b07 	vmul.f64	d7, d5, d7
 8003bd4:	ee36 7b47 	vsub.f64	d7, d6, d7
 8003bd8:	ed87 7b04 	vstr	d7, [r7, #16]
	adj.m[0][2] = Maux[1][0] * Maux[2][1] - Maux[2][0] * Maux[1][1];
 8003bdc:	683b      	ldr	r3, [r7, #0]
 8003bde:	3318      	adds	r3, #24
 8003be0:	ed93 6b00 	vldr	d6, [r3]
 8003be4:	683b      	ldr	r3, [r7, #0]
 8003be6:	3330      	adds	r3, #48	; 0x30
 8003be8:	ed93 7b02 	vldr	d7, [r3, #8]
 8003bec:	ee26 6b07 	vmul.f64	d6, d6, d7
 8003bf0:	683b      	ldr	r3, [r7, #0]
 8003bf2:	3330      	adds	r3, #48	; 0x30
 8003bf4:	ed93 5b00 	vldr	d5, [r3]
 8003bf8:	683b      	ldr	r3, [r7, #0]
 8003bfa:	3318      	adds	r3, #24
 8003bfc:	ed93 7b02 	vldr	d7, [r3, #8]
 8003c00:	ee25 7b07 	vmul.f64	d7, d5, d7
 8003c04:	ee36 7b47 	vsub.f64	d7, d6, d7
 8003c08:	ed87 7b06 	vstr	d7, [r7, #24]
	adj.m[1][0] = Maux[0][1] * Maux[2][2] - Maux[2][1] * Maux[0][2];
 8003c0c:	683b      	ldr	r3, [r7, #0]
 8003c0e:	ed93 6b02 	vldr	d6, [r3, #8]
 8003c12:	683b      	ldr	r3, [r7, #0]
 8003c14:	3330      	adds	r3, #48	; 0x30
 8003c16:	ed93 7b04 	vldr	d7, [r3, #16]
 8003c1a:	ee26 6b07 	vmul.f64	d6, d6, d7
 8003c1e:	683b      	ldr	r3, [r7, #0]
 8003c20:	3330      	adds	r3, #48	; 0x30
 8003c22:	ed93 5b02 	vldr	d5, [r3, #8]
 8003c26:	683b      	ldr	r3, [r7, #0]
 8003c28:	ed93 7b04 	vldr	d7, [r3, #16]
 8003c2c:	ee25 7b07 	vmul.f64	d7, d5, d7
 8003c30:	ee36 7b47 	vsub.f64	d7, d6, d7
 8003c34:	ed87 7b08 	vstr	d7, [r7, #32]
	adj.m[1][1] = Maux[0][0] * Maux[2][2] - Maux[2][0] * Maux[0][2];
 8003c38:	683b      	ldr	r3, [r7, #0]
 8003c3a:	ed93 6b00 	vldr	d6, [r3]
 8003c3e:	683b      	ldr	r3, [r7, #0]
 8003c40:	3330      	adds	r3, #48	; 0x30
 8003c42:	ed93 7b04 	vldr	d7, [r3, #16]
 8003c46:	ee26 6b07 	vmul.f64	d6, d6, d7
 8003c4a:	683b      	ldr	r3, [r7, #0]
 8003c4c:	3330      	adds	r3, #48	; 0x30
 8003c4e:	ed93 5b00 	vldr	d5, [r3]
 8003c52:	683b      	ldr	r3, [r7, #0]
 8003c54:	ed93 7b04 	vldr	d7, [r3, #16]
 8003c58:	ee25 7b07 	vmul.f64	d7, d5, d7
 8003c5c:	ee36 7b47 	vsub.f64	d7, d6, d7
 8003c60:	ed87 7b0a 	vstr	d7, [r7, #40]	; 0x28
	adj.m[1][2] = Maux[0][0] * Maux[2][1] - Maux[2][0] * Maux[0][1];
 8003c64:	683b      	ldr	r3, [r7, #0]
 8003c66:	ed93 6b00 	vldr	d6, [r3]
 8003c6a:	683b      	ldr	r3, [r7, #0]
 8003c6c:	3330      	adds	r3, #48	; 0x30
 8003c6e:	ed93 7b02 	vldr	d7, [r3, #8]
 8003c72:	ee26 6b07 	vmul.f64	d6, d6, d7
 8003c76:	683b      	ldr	r3, [r7, #0]
 8003c78:	3330      	adds	r3, #48	; 0x30
 8003c7a:	ed93 5b00 	vldr	d5, [r3]
 8003c7e:	683b      	ldr	r3, [r7, #0]
 8003c80:	ed93 7b02 	vldr	d7, [r3, #8]
 8003c84:	ee25 7b07 	vmul.f64	d7, d5, d7
 8003c88:	ee36 7b47 	vsub.f64	d7, d6, d7
 8003c8c:	ed87 7b0c 	vstr	d7, [r7, #48]	; 0x30
	adj.m[2][0] = Maux[0][1] * Maux[1][2] - Maux[1][1] * Maux[0][2];
 8003c90:	683b      	ldr	r3, [r7, #0]
 8003c92:	ed93 6b02 	vldr	d6, [r3, #8]
 8003c96:	683b      	ldr	r3, [r7, #0]
 8003c98:	3318      	adds	r3, #24
 8003c9a:	ed93 7b04 	vldr	d7, [r3, #16]
 8003c9e:	ee26 6b07 	vmul.f64	d6, d6, d7
 8003ca2:	683b      	ldr	r3, [r7, #0]
 8003ca4:	3318      	adds	r3, #24
 8003ca6:	ed93 5b02 	vldr	d5, [r3, #8]
 8003caa:	683b      	ldr	r3, [r7, #0]
 8003cac:	ed93 7b04 	vldr	d7, [r3, #16]
 8003cb0:	ee25 7b07 	vmul.f64	d7, d5, d7
 8003cb4:	ee36 7b47 	vsub.f64	d7, d6, d7
 8003cb8:	ed87 7b0e 	vstr	d7, [r7, #56]	; 0x38
	adj.m[2][1] = Maux[0][0] * Maux[1][2] - Maux[1][0] * Maux[0][2];
 8003cbc:	683b      	ldr	r3, [r7, #0]
 8003cbe:	ed93 6b00 	vldr	d6, [r3]
 8003cc2:	683b      	ldr	r3, [r7, #0]
 8003cc4:	3318      	adds	r3, #24
 8003cc6:	ed93 7b04 	vldr	d7, [r3, #16]
 8003cca:	ee26 6b07 	vmul.f64	d6, d6, d7
 8003cce:	683b      	ldr	r3, [r7, #0]
 8003cd0:	3318      	adds	r3, #24
 8003cd2:	ed93 5b00 	vldr	d5, [r3]
 8003cd6:	683b      	ldr	r3, [r7, #0]
 8003cd8:	ed93 7b04 	vldr	d7, [r3, #16]
 8003cdc:	ee25 7b07 	vmul.f64	d7, d5, d7
 8003ce0:	ee36 7b47 	vsub.f64	d7, d6, d7
 8003ce4:	ed87 7b10 	vstr	d7, [r7, #64]	; 0x40
	adj.m[2][2] = Maux[0][0] * Maux[1][1] - Maux[1][0] * Maux[0][1];
 8003ce8:	683b      	ldr	r3, [r7, #0]
 8003cea:	ed93 6b00 	vldr	d6, [r3]
 8003cee:	683b      	ldr	r3, [r7, #0]
 8003cf0:	3318      	adds	r3, #24
 8003cf2:	ed93 7b02 	vldr	d7, [r3, #8]
 8003cf6:	ee26 6b07 	vmul.f64	d6, d6, d7
 8003cfa:	683b      	ldr	r3, [r7, #0]
 8003cfc:	3318      	adds	r3, #24
 8003cfe:	ed93 5b00 	vldr	d5, [r3]
 8003d02:	683b      	ldr	r3, [r7, #0]
 8003d04:	ed93 7b02 	vldr	d7, [r3, #8]
 8003d08:	ee25 7b07 	vmul.f64	d7, d5, d7
 8003d0c:	ee36 7b47 	vsub.f64	d7, d6, d7
 8003d10:	ed87 7b12 	vstr	d7, [r7, #72]	; 0x48
	return adj;
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	4618      	mov	r0, r3
 8003d18:	f107 0308 	add.w	r3, r7, #8
 8003d1c:	2248      	movs	r2, #72	; 0x48
 8003d1e:	4619      	mov	r1, r3
 8003d20:	f00b f8f0 	bl	800ef04 <memcpy>
}
 8003d24:	6878      	ldr	r0, [r7, #4]
 8003d26:	3750      	adds	r7, #80	; 0x50
 8003d28:	46bd      	mov	sp, r7
 8003d2a:	bd80      	pop	{r7, pc}

08003d2c <inversa>:

array2D inversa(double A[3][3]) {
 8003d2c:	b580      	push	{r7, lr}
 8003d2e:	b0bc      	sub	sp, #240	; 0xf0
 8003d30:	af00      	add	r7, sp, #0
 8003d32:	64f8      	str	r0, [r7, #76]	; 0x4c
 8003d34:	64b9      	str	r1, [r7, #72]	; 0x48
	array2D Minv;
	array2D Maux;
	double det;
	Maux = adjunta(A);
 8003d36:	463b      	mov	r3, r7
 8003d38:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8003d3a:	4618      	mov	r0, r3
 8003d3c:	f7ff ff19 	bl	8003b72 <adjunta>
 8003d40:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8003d44:	4639      	mov	r1, r7
 8003d46:	2248      	movs	r2, #72	; 0x48
 8003d48:	4618      	mov	r0, r3
 8003d4a:	f00b f8db 	bl	800ef04 <memcpy>
	Maux = transpuesta(Maux.m);
 8003d4e:	463b      	mov	r3, r7
 8003d50:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8003d54:	4611      	mov	r1, r2
 8003d56:	4618      	mov	r0, r3
 8003d58:	f7ff fe7c 	bl	8003a54 <transpuesta>
 8003d5c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8003d60:	4639      	mov	r1, r7
 8003d62:	2248      	movs	r2, #72	; 0x48
 8003d64:	4618      	mov	r0, r3
 8003d66:	f00b f8cd 	bl	800ef04 <memcpy>
	det = determinante(A);
 8003d6a:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8003d6c:	f7ff fee1 	bl	8003b32 <determinante>
 8003d70:	ed87 0b38 	vstr	d0, [r7, #224]	; 0xe0
	for (int i = 0; i < 3; ++i) {
 8003d74:	2300      	movs	r3, #0
 8003d76:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8003d7a:	e035      	b.n	8003de8 <inversa+0xbc>
		for (int j = 0; j < 3; ++j) {
 8003d7c:	2300      	movs	r3, #0
 8003d7e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003d82:	e028      	b.n	8003dd6 <inversa+0xaa>
			Minv.m[i][j] = (1 / det) * Maux.m[i][j];
 8003d84:	eeb7 5b00 	vmov.f64	d5, #112	; 0x3f800000  1.0
 8003d88:	ed97 7b38 	vldr	d7, [r7, #224]	; 0xe0
 8003d8c:	ee85 6b07 	vdiv.f64	d6, d5, d7
 8003d90:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8003d94:	4613      	mov	r3, r2
 8003d96:	005b      	lsls	r3, r3, #1
 8003d98:	4413      	add	r3, r2
 8003d9a:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 8003d9e:	4413      	add	r3, r2
 8003da0:	00db      	lsls	r3, r3, #3
 8003da2:	33f0      	adds	r3, #240	; 0xf0
 8003da4:	443b      	add	r3, r7
 8003da6:	3ba0      	subs	r3, #160	; 0xa0
 8003da8:	ed93 7b00 	vldr	d7, [r3]
 8003dac:	ee26 7b07 	vmul.f64	d7, d6, d7
 8003db0:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8003db4:	4613      	mov	r3, r2
 8003db6:	005b      	lsls	r3, r3, #1
 8003db8:	4413      	add	r3, r2
 8003dba:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 8003dbe:	4413      	add	r3, r2
 8003dc0:	00db      	lsls	r3, r3, #3
 8003dc2:	33f0      	adds	r3, #240	; 0xf0
 8003dc4:	443b      	add	r3, r7
 8003dc6:	3b58      	subs	r3, #88	; 0x58
 8003dc8:	ed83 7b00 	vstr	d7, [r3]
		for (int j = 0; j < 3; ++j) {
 8003dcc:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8003dd0:	3301      	adds	r3, #1
 8003dd2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003dd6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8003dda:	2b02      	cmp	r3, #2
 8003ddc:	ddd2      	ble.n	8003d84 <inversa+0x58>
	for (int i = 0; i < 3; ++i) {
 8003dde:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8003de2:	3301      	adds	r3, #1
 8003de4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8003de8:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8003dec:	2b02      	cmp	r3, #2
 8003dee:	ddc5      	ble.n	8003d7c <inversa+0x50>
		}
	}
	return Minv;
 8003df0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003df2:	4618      	mov	r0, r3
 8003df4:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8003df8:	2248      	movs	r2, #72	; 0x48
 8003dfa:	4619      	mov	r1, r3
 8003dfc:	f00b f882 	bl	800ef04 <memcpy>
}
 8003e00:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8003e02:	37f0      	adds	r7, #240	; 0xf0
 8003e04:	46bd      	mov	sp, r7
 8003e06:	bd80      	pop	{r7, pc}

08003e08 <productMatriz>:

array2D productMatriz(double MatrizA[3][3], double MatrizB[3][3]) {
 8003e08:	b580      	push	{r7, lr}
 8003e0a:	b09c      	sub	sp, #112	; 0x70
 8003e0c:	af00      	add	r7, sp, #0
 8003e0e:	60f8      	str	r0, [r7, #12]
 8003e10:	60b9      	str	r1, [r7, #8]
 8003e12:	607a      	str	r2, [r7, #4]
	array2D producto;

	for (int k = 0; k < 3; ++k) {
 8003e14:	2300      	movs	r3, #0
 8003e16:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003e18:	e04b      	b.n	8003eb2 <productMatriz+0xaa>
		for (int i = 0; i < 3; ++i) {
 8003e1a:	2300      	movs	r3, #0
 8003e1c:	66bb      	str	r3, [r7, #104]	; 0x68
 8003e1e:	e042      	b.n	8003ea6 <productMatriz+0x9e>
			double suma = 0;
 8003e20:	f04f 0200 	mov.w	r2, #0
 8003e24:	f04f 0300 	mov.w	r3, #0
 8003e28:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
			for (int j = 0; j < 3; ++j) {
 8003e2c:	2300      	movs	r3, #0
 8003e2e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003e30:	e024      	b.n	8003e7c <productMatriz+0x74>
				suma += MatrizA[i][j] * MatrizB[j][k];
 8003e32:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003e34:	4613      	mov	r3, r2
 8003e36:	005b      	lsls	r3, r3, #1
 8003e38:	4413      	add	r3, r2
 8003e3a:	00db      	lsls	r3, r3, #3
 8003e3c:	461a      	mov	r2, r3
 8003e3e:	68bb      	ldr	r3, [r7, #8]
 8003e40:	441a      	add	r2, r3
 8003e42:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003e44:	00db      	lsls	r3, r3, #3
 8003e46:	4413      	add	r3, r2
 8003e48:	ed93 6b00 	vldr	d6, [r3]
 8003e4c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003e4e:	4613      	mov	r3, r2
 8003e50:	005b      	lsls	r3, r3, #1
 8003e52:	4413      	add	r3, r2
 8003e54:	00db      	lsls	r3, r3, #3
 8003e56:	461a      	mov	r2, r3
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	441a      	add	r2, r3
 8003e5c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e5e:	00db      	lsls	r3, r3, #3
 8003e60:	4413      	add	r3, r2
 8003e62:	ed93 7b00 	vldr	d7, [r3]
 8003e66:	ee26 7b07 	vmul.f64	d7, d6, d7
 8003e6a:	ed97 6b18 	vldr	d6, [r7, #96]	; 0x60
 8003e6e:	ee36 7b07 	vadd.f64	d7, d6, d7
 8003e72:	ed87 7b18 	vstr	d7, [r7, #96]	; 0x60
			for (int j = 0; j < 3; ++j) {
 8003e76:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003e78:	3301      	adds	r3, #1
 8003e7a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003e7c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003e7e:	2b02      	cmp	r3, #2
 8003e80:	ddd7      	ble.n	8003e32 <productMatriz+0x2a>
			}
			producto.m[i][k] = suma;
 8003e82:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003e84:	4613      	mov	r3, r2
 8003e86:	005b      	lsls	r3, r3, #1
 8003e88:	4413      	add	r3, r2
 8003e8a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003e8c:	4413      	add	r3, r2
 8003e8e:	00db      	lsls	r3, r3, #3
 8003e90:	3370      	adds	r3, #112	; 0x70
 8003e92:	443b      	add	r3, r7
 8003e94:	f1a3 0160 	sub.w	r1, r3, #96	; 0x60
 8003e98:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8003e9c:	e9c1 2300 	strd	r2, r3, [r1]
		for (int i = 0; i < 3; ++i) {
 8003ea0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003ea2:	3301      	adds	r3, #1
 8003ea4:	66bb      	str	r3, [r7, #104]	; 0x68
 8003ea6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003ea8:	2b02      	cmp	r3, #2
 8003eaa:	ddb9      	ble.n	8003e20 <productMatriz+0x18>
	for (int k = 0; k < 3; ++k) {
 8003eac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003eae:	3301      	adds	r3, #1
 8003eb0:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003eb2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003eb4:	2b02      	cmp	r3, #2
 8003eb6:	ddb0      	ble.n	8003e1a <productMatriz+0x12>
		}
	}
	return producto;
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	4618      	mov	r0, r3
 8003ebc:	f107 0310 	add.w	r3, r7, #16
 8003ec0:	2248      	movs	r2, #72	; 0x48
 8003ec2:	4619      	mov	r1, r3
 8003ec4:	f00b f81e 	bl	800ef04 <memcpy>
}
 8003ec8:	68f8      	ldr	r0, [r7, #12]
 8003eca:	3770      	adds	r7, #112	; 0x70
 8003ecc:	46bd      	mov	sp, r7
 8003ece:	bd80      	pop	{r7, pc}

08003ed0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003ed0:	b580      	push	{r7, lr}
 8003ed2:	b082      	sub	sp, #8
 8003ed4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003ed6:	4b0f      	ldr	r3, [pc, #60]	; (8003f14 <HAL_MspInit+0x44>)
 8003ed8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003edc:	4a0d      	ldr	r2, [pc, #52]	; (8003f14 <HAL_MspInit+0x44>)
 8003ede:	f043 0302 	orr.w	r3, r3, #2
 8003ee2:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8003ee6:	4b0b      	ldr	r3, [pc, #44]	; (8003f14 <HAL_MspInit+0x44>)
 8003ee8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003eec:	f003 0302 	and.w	r3, r3, #2
 8003ef0:	607b      	str	r3, [r7, #4]
 8003ef2:	687b      	ldr	r3, [r7, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_2);
 8003ef4:	2005      	movs	r0, #5
 8003ef6:	f003 f977 	bl	80071e8 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* FPU_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(FPU_IRQn, 1, 0);
 8003efa:	2200      	movs	r2, #0
 8003efc:	2101      	movs	r1, #1
 8003efe:	2051      	movs	r0, #81	; 0x51
 8003f00:	f003 f97d 	bl	80071fe <HAL_NVIC_SetPriority>
  /* FPU_IRQn interrupt configuration */
  HAL_NVIC_EnableIRQ(FPU_IRQn);
 8003f04:	2051      	movs	r0, #81	; 0x51
 8003f06:	f003 f994 	bl	8007232 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003f0a:	bf00      	nop
 8003f0c:	3708      	adds	r7, #8
 8003f0e:	46bd      	mov	sp, r7
 8003f10:	bd80      	pop	{r7, pc}
 8003f12:	bf00      	nop
 8003f14:	58024400 	.word	0x58024400

08003f18 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003f18:	b480      	push	{r7}
 8003f1a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8003f1c:	bf00      	nop
 8003f1e:	46bd      	mov	sp, r7
 8003f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f24:	4770      	bx	lr

08003f26 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003f26:	b480      	push	{r7}
 8003f28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003f2a:	e7fe      	b.n	8003f2a <HardFault_Handler+0x4>

08003f2c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003f2c:	b480      	push	{r7}
 8003f2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003f30:	e7fe      	b.n	8003f30 <MemManage_Handler+0x4>

08003f32 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003f32:	b480      	push	{r7}
 8003f34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003f36:	e7fe      	b.n	8003f36 <BusFault_Handler+0x4>

08003f38 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003f38:	b480      	push	{r7}
 8003f3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003f3c:	e7fe      	b.n	8003f3c <UsageFault_Handler+0x4>

08003f3e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003f3e:	b480      	push	{r7}
 8003f40:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003f42:	bf00      	nop
 8003f44:	46bd      	mov	sp, r7
 8003f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f4a:	4770      	bx	lr

08003f4c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003f4c:	b480      	push	{r7}
 8003f4e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003f50:	bf00      	nop
 8003f52:	46bd      	mov	sp, r7
 8003f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f58:	4770      	bx	lr

08003f5a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003f5a:	b480      	push	{r7}
 8003f5c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003f5e:	bf00      	nop
 8003f60:	46bd      	mov	sp, r7
 8003f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f66:	4770      	bx	lr

08003f68 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003f68:	b580      	push	{r7, lr}
 8003f6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003f6c:	f002 fff8 	bl	8006f60 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003f70:	bf00      	nop
 8003f72:	bd80      	pop	{r7, pc}

08003f74 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8003f74:	b580      	push	{r7, lr}
 8003f76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(E_EndStop1_Sup_Pin);
 8003f78:	2001      	movs	r0, #1
 8003f7a:	f004 f8c8 	bl	800810e <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8003f7e:	bf00      	nop
 8003f80:	bd80      	pop	{r7, pc}

08003f82 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8003f82:	b580      	push	{r7, lr}
 8003f84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(E_EndStop1_Inf_Pin);
 8003f86:	2002      	movs	r0, #2
 8003f88:	f004 f8c1 	bl	800810e <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8003f8c:	bf00      	nop
 8003f8e:	bd80      	pop	{r7, pc}

08003f90 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8003f90:	b580      	push	{r7, lr}
 8003f92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(E_EndStop2_Sup_Pin);
 8003f94:	2004      	movs	r0, #4
 8003f96:	f004 f8ba 	bl	800810e <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8003f9a:	bf00      	nop
 8003f9c:	bd80      	pop	{r7, pc}

08003f9e <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8003f9e:	b580      	push	{r7, lr}
 8003fa0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(E_EndStop2_Inf_Pin);
 8003fa2:	2008      	movs	r0, #8
 8003fa4:	f004 f8b3 	bl	800810e <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8003fa8:	bf00      	nop
 8003faa:	bd80      	pop	{r7, pc}

08003fac <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8003fac:	b580      	push	{r7, lr}
 8003fae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(E_EndStop3_Sup_Pin);
 8003fb0:	2010      	movs	r0, #16
 8003fb2:	f004 f8ac 	bl	800810e <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8003fb6:	bf00      	nop
 8003fb8:	bd80      	pop	{r7, pc}

08003fba <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8003fba:	b580      	push	{r7, lr}
 8003fbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(E_EndStop3_Inf_Pin);
 8003fbe:	2020      	movs	r0, #32
 8003fc0:	f004 f8a5 	bl	800810e <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8003fc4:	bf00      	nop
 8003fc6:	bd80      	pop	{r7, pc}

08003fc8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8003fc8:	b580      	push	{r7, lr}
 8003fca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8003fcc:	4802      	ldr	r0, [pc, #8]	; (8003fd8 <TIM2_IRQHandler+0x10>)
 8003fce:	f007 fa21 	bl	800b414 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8003fd2:	bf00      	nop
 8003fd4:	bd80      	pop	{r7, pc}
 8003fd6:	bf00      	nop
 8003fd8:	240005d4 	.word	0x240005d4

08003fdc <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8003fdc:	b580      	push	{r7, lr}
 8003fde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8003fe0:	4802      	ldr	r0, [pc, #8]	; (8003fec <TIM3_IRQHandler+0x10>)
 8003fe2:	f007 fa17 	bl	800b414 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8003fe6:	bf00      	nop
 8003fe8:	bd80      	pop	{r7, pc}
 8003fea:	bf00      	nop
 8003fec:	24000620 	.word	0x24000620

08003ff0 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8003ff0:	b580      	push	{r7, lr}
 8003ff2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8003ff4:	4802      	ldr	r0, [pc, #8]	; (8004000 <TIM4_IRQHandler+0x10>)
 8003ff6:	f007 fa0d 	bl	800b414 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8003ffa:	bf00      	nop
 8003ffc:	bd80      	pop	{r7, pc}
 8003ffe:	bf00      	nop
 8004000:	2400066c 	.word	0x2400066c

08004004 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8004004:	b580      	push	{r7, lr}
 8004006:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8004008:	4802      	ldr	r0, [pc, #8]	; (8004014 <USART3_IRQHandler+0x10>)
 800400a:	f008 fd2f 	bl	800ca6c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800400e:	bf00      	nop
 8004010:	bd80      	pop	{r7, pc}
 8004012:	bf00      	nop
 8004014:	24000cf0 	.word	0x24000cf0

08004018 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8004018:	b580      	push	{r7, lr}
 800401a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUTTON_Pin);
 800401c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8004020:	f004 f875 	bl	800810e <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8004024:	bf00      	nop
 8004026:	bd80      	pop	{r7, pc}

08004028 <FPU_IRQHandler>:

/**
  * @brief This function handles FPU global interrupt.
  */
void FPU_IRQHandler(void)
{
 8004028:	b480      	push	{r7}
 800402a:	af00      	add	r7, sp, #0

  /* USER CODE END FPU_IRQn 0 */
  /* USER CODE BEGIN FPU_IRQn 1 */

  /* USER CODE END FPU_IRQn 1 */
}
 800402c:	bf00      	nop
 800402e:	46bd      	mov	sp, r7
 8004030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004034:	4770      	bx	lr
	...

08004038 <TIM15_IRQHandler>:

/**
  * @brief This function handles TIM15 global interrupt.
  */
void TIM15_IRQHandler(void)
{
 8004038:	b580      	push	{r7, lr}
 800403a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM15_IRQn 0 */

  /* USER CODE END TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim15);
 800403c:	4802      	ldr	r0, [pc, #8]	; (8004048 <TIM15_IRQHandler+0x10>)
 800403e:	f007 f9e9 	bl	800b414 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM15_IRQn 1 */

  /* USER CODE END TIM15_IRQn 1 */
}
 8004042:	bf00      	nop
 8004044:	bd80      	pop	{r7, pc}
 8004046:	bf00      	nop
 8004048:	240007e8 	.word	0x240007e8

0800404c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800404c:	b480      	push	{r7}
 800404e:	af00      	add	r7, sp, #0
	return 1;
 8004050:	2301      	movs	r3, #1
}
 8004052:	4618      	mov	r0, r3
 8004054:	46bd      	mov	sp, r7
 8004056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800405a:	4770      	bx	lr

0800405c <_kill>:

int _kill(int pid, int sig)
{
 800405c:	b580      	push	{r7, lr}
 800405e:	b082      	sub	sp, #8
 8004060:	af00      	add	r7, sp, #0
 8004062:	6078      	str	r0, [r7, #4]
 8004064:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8004066:	f00a ff23 	bl	800eeb0 <__errno>
 800406a:	4603      	mov	r3, r0
 800406c:	2216      	movs	r2, #22
 800406e:	601a      	str	r2, [r3, #0]
	return -1;
 8004070:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004074:	4618      	mov	r0, r3
 8004076:	3708      	adds	r7, #8
 8004078:	46bd      	mov	sp, r7
 800407a:	bd80      	pop	{r7, pc}

0800407c <_exit>:

void _exit (int status)
{
 800407c:	b580      	push	{r7, lr}
 800407e:	b082      	sub	sp, #8
 8004080:	af00      	add	r7, sp, #0
 8004082:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8004084:	f04f 31ff 	mov.w	r1, #4294967295
 8004088:	6878      	ldr	r0, [r7, #4]
 800408a:	f7ff ffe7 	bl	800405c <_kill>
	while (1) {}		/* Make sure we hang here */
 800408e:	e7fe      	b.n	800408e <_exit+0x12>

08004090 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004090:	b580      	push	{r7, lr}
 8004092:	b086      	sub	sp, #24
 8004094:	af00      	add	r7, sp, #0
 8004096:	60f8      	str	r0, [r7, #12]
 8004098:	60b9      	str	r1, [r7, #8]
 800409a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800409c:	2300      	movs	r3, #0
 800409e:	617b      	str	r3, [r7, #20]
 80040a0:	e00a      	b.n	80040b8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80040a2:	f3af 8000 	nop.w
 80040a6:	4601      	mov	r1, r0
 80040a8:	68bb      	ldr	r3, [r7, #8]
 80040aa:	1c5a      	adds	r2, r3, #1
 80040ac:	60ba      	str	r2, [r7, #8]
 80040ae:	b2ca      	uxtb	r2, r1
 80040b0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80040b2:	697b      	ldr	r3, [r7, #20]
 80040b4:	3301      	adds	r3, #1
 80040b6:	617b      	str	r3, [r7, #20]
 80040b8:	697a      	ldr	r2, [r7, #20]
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	429a      	cmp	r2, r3
 80040be:	dbf0      	blt.n	80040a2 <_read+0x12>
	}

return len;
 80040c0:	687b      	ldr	r3, [r7, #4]
}
 80040c2:	4618      	mov	r0, r3
 80040c4:	3718      	adds	r7, #24
 80040c6:	46bd      	mov	sp, r7
 80040c8:	bd80      	pop	{r7, pc}

080040ca <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80040ca:	b580      	push	{r7, lr}
 80040cc:	b086      	sub	sp, #24
 80040ce:	af00      	add	r7, sp, #0
 80040d0:	60f8      	str	r0, [r7, #12]
 80040d2:	60b9      	str	r1, [r7, #8]
 80040d4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80040d6:	2300      	movs	r3, #0
 80040d8:	617b      	str	r3, [r7, #20]
 80040da:	e009      	b.n	80040f0 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80040dc:	68bb      	ldr	r3, [r7, #8]
 80040de:	1c5a      	adds	r2, r3, #1
 80040e0:	60ba      	str	r2, [r7, #8]
 80040e2:	781b      	ldrb	r3, [r3, #0]
 80040e4:	4618      	mov	r0, r3
 80040e6:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80040ea:	697b      	ldr	r3, [r7, #20]
 80040ec:	3301      	adds	r3, #1
 80040ee:	617b      	str	r3, [r7, #20]
 80040f0:	697a      	ldr	r2, [r7, #20]
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	429a      	cmp	r2, r3
 80040f6:	dbf1      	blt.n	80040dc <_write+0x12>
	}
	return len;
 80040f8:	687b      	ldr	r3, [r7, #4]
}
 80040fa:	4618      	mov	r0, r3
 80040fc:	3718      	adds	r7, #24
 80040fe:	46bd      	mov	sp, r7
 8004100:	bd80      	pop	{r7, pc}

08004102 <_close>:

int _close(int file)
{
 8004102:	b480      	push	{r7}
 8004104:	b083      	sub	sp, #12
 8004106:	af00      	add	r7, sp, #0
 8004108:	6078      	str	r0, [r7, #4]
	return -1;
 800410a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800410e:	4618      	mov	r0, r3
 8004110:	370c      	adds	r7, #12
 8004112:	46bd      	mov	sp, r7
 8004114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004118:	4770      	bx	lr

0800411a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800411a:	b480      	push	{r7}
 800411c:	b083      	sub	sp, #12
 800411e:	af00      	add	r7, sp, #0
 8004120:	6078      	str	r0, [r7, #4]
 8004122:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8004124:	683b      	ldr	r3, [r7, #0]
 8004126:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800412a:	605a      	str	r2, [r3, #4]
	return 0;
 800412c:	2300      	movs	r3, #0
}
 800412e:	4618      	mov	r0, r3
 8004130:	370c      	adds	r7, #12
 8004132:	46bd      	mov	sp, r7
 8004134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004138:	4770      	bx	lr

0800413a <_isatty>:

int _isatty(int file)
{
 800413a:	b480      	push	{r7}
 800413c:	b083      	sub	sp, #12
 800413e:	af00      	add	r7, sp, #0
 8004140:	6078      	str	r0, [r7, #4]
	return 1;
 8004142:	2301      	movs	r3, #1
}
 8004144:	4618      	mov	r0, r3
 8004146:	370c      	adds	r7, #12
 8004148:	46bd      	mov	sp, r7
 800414a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800414e:	4770      	bx	lr

08004150 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004150:	b480      	push	{r7}
 8004152:	b085      	sub	sp, #20
 8004154:	af00      	add	r7, sp, #0
 8004156:	60f8      	str	r0, [r7, #12]
 8004158:	60b9      	str	r1, [r7, #8]
 800415a:	607a      	str	r2, [r7, #4]
	return 0;
 800415c:	2300      	movs	r3, #0
}
 800415e:	4618      	mov	r0, r3
 8004160:	3714      	adds	r7, #20
 8004162:	46bd      	mov	sp, r7
 8004164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004168:	4770      	bx	lr
	...

0800416c <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 800416c:	b580      	push	{r7, lr}
 800416e:	b084      	sub	sp, #16
 8004170:	af00      	add	r7, sp, #0
 8004172:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8004174:	4b11      	ldr	r3, [pc, #68]	; (80041bc <_sbrk+0x50>)
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	2b00      	cmp	r3, #0
 800417a:	d102      	bne.n	8004182 <_sbrk+0x16>
		heap_end = &end;
 800417c:	4b0f      	ldr	r3, [pc, #60]	; (80041bc <_sbrk+0x50>)
 800417e:	4a10      	ldr	r2, [pc, #64]	; (80041c0 <_sbrk+0x54>)
 8004180:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8004182:	4b0e      	ldr	r3, [pc, #56]	; (80041bc <_sbrk+0x50>)
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8004188:	4b0c      	ldr	r3, [pc, #48]	; (80041bc <_sbrk+0x50>)
 800418a:	681a      	ldr	r2, [r3, #0]
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	4413      	add	r3, r2
 8004190:	466a      	mov	r2, sp
 8004192:	4293      	cmp	r3, r2
 8004194:	d907      	bls.n	80041a6 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8004196:	f00a fe8b 	bl	800eeb0 <__errno>
 800419a:	4603      	mov	r3, r0
 800419c:	220c      	movs	r2, #12
 800419e:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 80041a0:	f04f 33ff 	mov.w	r3, #4294967295
 80041a4:	e006      	b.n	80041b4 <_sbrk+0x48>
	}

	heap_end += incr;
 80041a6:	4b05      	ldr	r3, [pc, #20]	; (80041bc <_sbrk+0x50>)
 80041a8:	681a      	ldr	r2, [r3, #0]
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	4413      	add	r3, r2
 80041ae:	4a03      	ldr	r2, [pc, #12]	; (80041bc <_sbrk+0x50>)
 80041b0:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80041b2:	68fb      	ldr	r3, [r7, #12]
}
 80041b4:	4618      	mov	r0, r3
 80041b6:	3710      	adds	r7, #16
 80041b8:	46bd      	mov	sp, r7
 80041ba:	bd80      	pop	{r7, pc}
 80041bc:	240005d0 	.word	0x240005d0
 80041c0:	24000d98 	.word	0x24000d98

080041c4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80041c4:	b480      	push	{r7}
 80041c6:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80041c8:	4b29      	ldr	r3, [pc, #164]	; (8004270 <SystemInit+0xac>)
 80041ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041ce:	4a28      	ldr	r2, [pc, #160]	; (8004270 <SystemInit+0xac>)
 80041d0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80041d4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80041d8:	4b26      	ldr	r3, [pc, #152]	; (8004274 <SystemInit+0xb0>)
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	4a25      	ldr	r2, [pc, #148]	; (8004274 <SystemInit+0xb0>)
 80041de:	f043 0301 	orr.w	r3, r3, #1
 80041e2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80041e4:	4b23      	ldr	r3, [pc, #140]	; (8004274 <SystemInit+0xb0>)
 80041e6:	2200      	movs	r2, #0
 80041e8:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, CSSON , CSION,RC48ON, CSIKERON PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80041ea:	4b22      	ldr	r3, [pc, #136]	; (8004274 <SystemInit+0xb0>)
 80041ec:	681a      	ldr	r2, [r3, #0]
 80041ee:	4921      	ldr	r1, [pc, #132]	; (8004274 <SystemInit+0xb0>)
 80041f0:	4b21      	ldr	r3, [pc, #132]	; (8004278 <SystemInit+0xb4>)
 80041f2:	4013      	ands	r3, r2
 80041f4:	600b      	str	r3, [r1, #0]

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80041f6:	4b1f      	ldr	r3, [pc, #124]	; (8004274 <SystemInit+0xb0>)
 80041f8:	2200      	movs	r2, #0
 80041fa:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80041fc:	4b1d      	ldr	r3, [pc, #116]	; (8004274 <SystemInit+0xb0>)
 80041fe:	2200      	movs	r2, #0
 8004200:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8004202:	4b1c      	ldr	r3, [pc, #112]	; (8004274 <SystemInit+0xb0>)
 8004204:	2200      	movs	r2, #0
 8004206:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x00000000;
 8004208:	4b1a      	ldr	r3, [pc, #104]	; (8004274 <SystemInit+0xb0>)
 800420a:	2200      	movs	r2, #0
 800420c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00000000;
 800420e:	4b19      	ldr	r3, [pc, #100]	; (8004274 <SystemInit+0xb0>)
 8004210:	2200      	movs	r2, #0
 8004212:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x00000000;
 8004214:	4b17      	ldr	r3, [pc, #92]	; (8004274 <SystemInit+0xb0>)
 8004216:	2200      	movs	r2, #0
 8004218:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800421a:	4b16      	ldr	r3, [pc, #88]	; (8004274 <SystemInit+0xb0>)
 800421c:	2200      	movs	r2, #0
 800421e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x00000000;
 8004220:	4b14      	ldr	r3, [pc, #80]	; (8004274 <SystemInit+0xb0>)
 8004222:	2200      	movs	r2, #0
 8004224:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8004226:	4b13      	ldr	r3, [pc, #76]	; (8004274 <SystemInit+0xb0>)
 8004228:	2200      	movs	r2, #0
 800422a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x00000000;
 800422c:	4b11      	ldr	r3, [pc, #68]	; (8004274 <SystemInit+0xb0>)
 800422e:	2200      	movs	r2, #0
 8004230:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8004232:	4b10      	ldr	r3, [pc, #64]	; (8004274 <SystemInit+0xb0>)
 8004234:	2200      	movs	r2, #0
 8004236:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8004238:	4b0e      	ldr	r3, [pc, #56]	; (8004274 <SystemInit+0xb0>)
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	4a0d      	ldr	r2, [pc, #52]	; (8004274 <SystemInit+0xb0>)
 800423e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004242:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8004244:	4b0b      	ldr	r3, [pc, #44]	; (8004274 <SystemInit+0xb0>)
 8004246:	2200      	movs	r2, #0
 8004248:	661a      	str	r2, [r3, #96]	; 0x60
  SCB->VTOR = FLASH_BANK2_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
#endif /* VECT_TAB_SRAM */

#else
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800424a:	4b0c      	ldr	r3, [pc, #48]	; (800427c <SystemInit+0xb8>)
 800424c:	681a      	ldr	r2, [r3, #0]
 800424e:	4b0c      	ldr	r3, [pc, #48]	; (8004280 <SystemInit+0xbc>)
 8004250:	4013      	ands	r3, r2
 8004252:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004256:	d202      	bcs.n	800425e <SystemInit+0x9a>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8004258:	4b0a      	ldr	r3, [pc, #40]	; (8004284 <SystemInit+0xc0>)
 800425a:	2201      	movs	r2, #1
 800425c:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800425e:	4b04      	ldr	r3, [pc, #16]	; (8004270 <SystemInit+0xac>)
 8004260:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004264:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 8004266:	bf00      	nop
 8004268:	46bd      	mov	sp, r7
 800426a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800426e:	4770      	bx	lr
 8004270:	e000ed00 	.word	0xe000ed00
 8004274:	58024400 	.word	0x58024400
 8004278:	eaf6ed7f 	.word	0xeaf6ed7f
 800427c:	5c001000 	.word	0x5c001000
 8004280:	ffff0000 	.word	0xffff0000
 8004284:	51008108 	.word	0x51008108

08004288 <MX_TIM2_Init>:
TIM_HandleTypeDef htim14;
TIM_HandleTypeDef htim15;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8004288:	b580      	push	{r7, lr}
 800428a:	b08c      	sub	sp, #48	; 0x30
 800428c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800428e:	f107 0320 	add.w	r3, r7, #32
 8004292:	2200      	movs	r2, #0
 8004294:	601a      	str	r2, [r3, #0]
 8004296:	605a      	str	r2, [r3, #4]
 8004298:	609a      	str	r2, [r3, #8]
 800429a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800429c:	f107 0314 	add.w	r3, r7, #20
 80042a0:	2200      	movs	r2, #0
 80042a2:	601a      	str	r2, [r3, #0]
 80042a4:	605a      	str	r2, [r3, #4]
 80042a6:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80042a8:	1d3b      	adds	r3, r7, #4
 80042aa:	2200      	movs	r2, #0
 80042ac:	601a      	str	r2, [r3, #0]
 80042ae:	605a      	str	r2, [r3, #4]
 80042b0:	609a      	str	r2, [r3, #8]
 80042b2:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80042b4:	4b2b      	ldr	r3, [pc, #172]	; (8004364 <MX_TIM2_Init+0xdc>)
 80042b6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80042ba:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80042bc:	4b29      	ldr	r3, [pc, #164]	; (8004364 <MX_TIM2_Init+0xdc>)
 80042be:	2200      	movs	r2, #0
 80042c0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80042c2:	4b28      	ldr	r3, [pc, #160]	; (8004364 <MX_TIM2_Init+0xdc>)
 80042c4:	2200      	movs	r2, #0
 80042c6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 80042c8:	4b26      	ldr	r3, [pc, #152]	; (8004364 <MX_TIM2_Init+0xdc>)
 80042ca:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80042ce:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80042d0:	4b24      	ldr	r3, [pc, #144]	; (8004364 <MX_TIM2_Init+0xdc>)
 80042d2:	2200      	movs	r2, #0
 80042d4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80042d6:	4b23      	ldr	r3, [pc, #140]	; (8004364 <MX_TIM2_Init+0xdc>)
 80042d8:	2200      	movs	r2, #0
 80042da:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80042dc:	4821      	ldr	r0, [pc, #132]	; (8004364 <MX_TIM2_Init+0xdc>)
 80042de:	f006 fa8d 	bl	800a7fc <HAL_TIM_Base_Init>
 80042e2:	4603      	mov	r3, r0
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d001      	beq.n	80042ec <MX_TIM2_Init+0x64>
  {
    Error_Handler();
 80042e8:	f7ff f97a 	bl	80035e0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80042ec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80042f0:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80042f2:	f107 0320 	add.w	r3, r7, #32
 80042f6:	4619      	mov	r1, r3
 80042f8:	481a      	ldr	r0, [pc, #104]	; (8004364 <MX_TIM2_Init+0xdc>)
 80042fa:	f007 fb5b 	bl	800b9b4 <HAL_TIM_ConfigClockSource>
 80042fe:	4603      	mov	r3, r0
 8004300:	2b00      	cmp	r3, #0
 8004302:	d001      	beq.n	8004308 <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 8004304:	f7ff f96c 	bl	80035e0 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8004308:	4816      	ldr	r0, [pc, #88]	; (8004364 <MX_TIM2_Init+0xdc>)
 800430a:	f006 fe13 	bl	800af34 <HAL_TIM_IC_Init>
 800430e:	4603      	mov	r3, r0
 8004310:	2b00      	cmp	r3, #0
 8004312:	d001      	beq.n	8004318 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8004314:	f7ff f964 	bl	80035e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004318:	2300      	movs	r3, #0
 800431a:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800431c:	2300      	movs	r3, #0
 800431e:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8004320:	f107 0314 	add.w	r3, r7, #20
 8004324:	4619      	mov	r1, r3
 8004326:	480f      	ldr	r0, [pc, #60]	; (8004364 <MX_TIM2_Init+0xdc>)
 8004328:	f008 f9b8 	bl	800c69c <HAL_TIMEx_MasterConfigSynchronization>
 800432c:	4603      	mov	r3, r0
 800432e:	2b00      	cmp	r3, #0
 8004330:	d001      	beq.n	8004336 <MX_TIM2_Init+0xae>
  {
    Error_Handler();
 8004332:	f7ff f955 	bl	80035e0 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8004336:	2300      	movs	r3, #0
 8004338:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800433a:	2301      	movs	r3, #1
 800433c:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800433e:	2300      	movs	r3, #0
 8004340:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8004342:	2300      	movs	r3, #0
 8004344:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8004346:	1d3b      	adds	r3, r7, #4
 8004348:	2200      	movs	r2, #0
 800434a:	4619      	mov	r1, r3
 800434c:	4805      	ldr	r0, [pc, #20]	; (8004364 <MX_TIM2_Init+0xdc>)
 800434e:	f007 f980 	bl	800b652 <HAL_TIM_IC_ConfigChannel>
 8004352:	4603      	mov	r3, r0
 8004354:	2b00      	cmp	r3, #0
 8004356:	d001      	beq.n	800435c <MX_TIM2_Init+0xd4>
  {
    Error_Handler();
 8004358:	f7ff f942 	bl	80035e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800435c:	bf00      	nop
 800435e:	3730      	adds	r7, #48	; 0x30
 8004360:	46bd      	mov	sp, r7
 8004362:	bd80      	pop	{r7, pc}
 8004364:	240005d4 	.word	0x240005d4

08004368 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8004368:	b580      	push	{r7, lr}
 800436a:	b08c      	sub	sp, #48	; 0x30
 800436c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800436e:	f107 0320 	add.w	r3, r7, #32
 8004372:	2200      	movs	r2, #0
 8004374:	601a      	str	r2, [r3, #0]
 8004376:	605a      	str	r2, [r3, #4]
 8004378:	609a      	str	r2, [r3, #8]
 800437a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800437c:	f107 0314 	add.w	r3, r7, #20
 8004380:	2200      	movs	r2, #0
 8004382:	601a      	str	r2, [r3, #0]
 8004384:	605a      	str	r2, [r3, #4]
 8004386:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8004388:	1d3b      	adds	r3, r7, #4
 800438a:	2200      	movs	r2, #0
 800438c:	601a      	str	r2, [r3, #0]
 800438e:	605a      	str	r2, [r3, #4]
 8004390:	609a      	str	r2, [r3, #8]
 8004392:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8004394:	4b2b      	ldr	r3, [pc, #172]	; (8004444 <MX_TIM3_Init+0xdc>)
 8004396:	4a2c      	ldr	r2, [pc, #176]	; (8004448 <MX_TIM3_Init+0xe0>)
 8004398:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800439a:	4b2a      	ldr	r3, [pc, #168]	; (8004444 <MX_TIM3_Init+0xdc>)
 800439c:	2200      	movs	r2, #0
 800439e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80043a0:	4b28      	ldr	r3, [pc, #160]	; (8004444 <MX_TIM3_Init+0xdc>)
 80043a2:	2200      	movs	r2, #0
 80043a4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80043a6:	4b27      	ldr	r3, [pc, #156]	; (8004444 <MX_TIM3_Init+0xdc>)
 80043a8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80043ac:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80043ae:	4b25      	ldr	r3, [pc, #148]	; (8004444 <MX_TIM3_Init+0xdc>)
 80043b0:	2200      	movs	r2, #0
 80043b2:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80043b4:	4b23      	ldr	r3, [pc, #140]	; (8004444 <MX_TIM3_Init+0xdc>)
 80043b6:	2200      	movs	r2, #0
 80043b8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80043ba:	4822      	ldr	r0, [pc, #136]	; (8004444 <MX_TIM3_Init+0xdc>)
 80043bc:	f006 fa1e 	bl	800a7fc <HAL_TIM_Base_Init>
 80043c0:	4603      	mov	r3, r0
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d001      	beq.n	80043ca <MX_TIM3_Init+0x62>
  {
    Error_Handler();
 80043c6:	f7ff f90b 	bl	80035e0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80043ca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80043ce:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80043d0:	f107 0320 	add.w	r3, r7, #32
 80043d4:	4619      	mov	r1, r3
 80043d6:	481b      	ldr	r0, [pc, #108]	; (8004444 <MX_TIM3_Init+0xdc>)
 80043d8:	f007 faec 	bl	800b9b4 <HAL_TIM_ConfigClockSource>
 80043dc:	4603      	mov	r3, r0
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d001      	beq.n	80043e6 <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 80043e2:	f7ff f8fd 	bl	80035e0 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 80043e6:	4817      	ldr	r0, [pc, #92]	; (8004444 <MX_TIM3_Init+0xdc>)
 80043e8:	f006 fda4 	bl	800af34 <HAL_TIM_IC_Init>
 80043ec:	4603      	mov	r3, r0
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d001      	beq.n	80043f6 <MX_TIM3_Init+0x8e>
  {
    Error_Handler();
 80043f2:	f7ff f8f5 	bl	80035e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80043f6:	2300      	movs	r3, #0
 80043f8:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80043fa:	2300      	movs	r3, #0
 80043fc:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80043fe:	f107 0314 	add.w	r3, r7, #20
 8004402:	4619      	mov	r1, r3
 8004404:	480f      	ldr	r0, [pc, #60]	; (8004444 <MX_TIM3_Init+0xdc>)
 8004406:	f008 f949 	bl	800c69c <HAL_TIMEx_MasterConfigSynchronization>
 800440a:	4603      	mov	r3, r0
 800440c:	2b00      	cmp	r3, #0
 800440e:	d001      	beq.n	8004414 <MX_TIM3_Init+0xac>
  {
    Error_Handler();
 8004410:	f7ff f8e6 	bl	80035e0 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8004414:	2300      	movs	r3, #0
 8004416:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8004418:	2301      	movs	r3, #1
 800441a:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800441c:	2300      	movs	r3, #0
 800441e:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8004420:	2300      	movs	r3, #0
 8004422:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8004424:	1d3b      	adds	r3, r7, #4
 8004426:	2200      	movs	r2, #0
 8004428:	4619      	mov	r1, r3
 800442a:	4806      	ldr	r0, [pc, #24]	; (8004444 <MX_TIM3_Init+0xdc>)
 800442c:	f007 f911 	bl	800b652 <HAL_TIM_IC_ConfigChannel>
 8004430:	4603      	mov	r3, r0
 8004432:	2b00      	cmp	r3, #0
 8004434:	d001      	beq.n	800443a <MX_TIM3_Init+0xd2>
  {
    Error_Handler();
 8004436:	f7ff f8d3 	bl	80035e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800443a:	bf00      	nop
 800443c:	3730      	adds	r7, #48	; 0x30
 800443e:	46bd      	mov	sp, r7
 8004440:	bd80      	pop	{r7, pc}
 8004442:	bf00      	nop
 8004444:	24000620 	.word	0x24000620
 8004448:	40000400 	.word	0x40000400

0800444c <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 800444c:	b580      	push	{r7, lr}
 800444e:	b08c      	sub	sp, #48	; 0x30
 8004450:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004452:	f107 0320 	add.w	r3, r7, #32
 8004456:	2200      	movs	r2, #0
 8004458:	601a      	str	r2, [r3, #0]
 800445a:	605a      	str	r2, [r3, #4]
 800445c:	609a      	str	r2, [r3, #8]
 800445e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004460:	f107 0314 	add.w	r3, r7, #20
 8004464:	2200      	movs	r2, #0
 8004466:	601a      	str	r2, [r3, #0]
 8004468:	605a      	str	r2, [r3, #4]
 800446a:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 800446c:	1d3b      	adds	r3, r7, #4
 800446e:	2200      	movs	r2, #0
 8004470:	601a      	str	r2, [r3, #0]
 8004472:	605a      	str	r2, [r3, #4]
 8004474:	609a      	str	r2, [r3, #8]
 8004476:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8004478:	4b2b      	ldr	r3, [pc, #172]	; (8004528 <MX_TIM4_Init+0xdc>)
 800447a:	4a2c      	ldr	r2, [pc, #176]	; (800452c <MX_TIM4_Init+0xe0>)
 800447c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 800447e:	4b2a      	ldr	r3, [pc, #168]	; (8004528 <MX_TIM4_Init+0xdc>)
 8004480:	2200      	movs	r2, #0
 8004482:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004484:	4b28      	ldr	r3, [pc, #160]	; (8004528 <MX_TIM4_Init+0xdc>)
 8004486:	2200      	movs	r2, #0
 8004488:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 800448a:	4b27      	ldr	r3, [pc, #156]	; (8004528 <MX_TIM4_Init+0xdc>)
 800448c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004490:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004492:	4b25      	ldr	r3, [pc, #148]	; (8004528 <MX_TIM4_Init+0xdc>)
 8004494:	2200      	movs	r2, #0
 8004496:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004498:	4b23      	ldr	r3, [pc, #140]	; (8004528 <MX_TIM4_Init+0xdc>)
 800449a:	2200      	movs	r2, #0
 800449c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800449e:	4822      	ldr	r0, [pc, #136]	; (8004528 <MX_TIM4_Init+0xdc>)
 80044a0:	f006 f9ac 	bl	800a7fc <HAL_TIM_Base_Init>
 80044a4:	4603      	mov	r3, r0
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d001      	beq.n	80044ae <MX_TIM4_Init+0x62>
  {
    Error_Handler();
 80044aa:	f7ff f899 	bl	80035e0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80044ae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80044b2:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80044b4:	f107 0320 	add.w	r3, r7, #32
 80044b8:	4619      	mov	r1, r3
 80044ba:	481b      	ldr	r0, [pc, #108]	; (8004528 <MX_TIM4_Init+0xdc>)
 80044bc:	f007 fa7a 	bl	800b9b4 <HAL_TIM_ConfigClockSource>
 80044c0:	4603      	mov	r3, r0
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d001      	beq.n	80044ca <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 80044c6:	f7ff f88b 	bl	80035e0 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim4) != HAL_OK)
 80044ca:	4817      	ldr	r0, [pc, #92]	; (8004528 <MX_TIM4_Init+0xdc>)
 80044cc:	f006 fd32 	bl	800af34 <HAL_TIM_IC_Init>
 80044d0:	4603      	mov	r3, r0
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d001      	beq.n	80044da <MX_TIM4_Init+0x8e>
  {
    Error_Handler();
 80044d6:	f7ff f883 	bl	80035e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80044da:	2300      	movs	r3, #0
 80044dc:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80044de:	2300      	movs	r3, #0
 80044e0:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80044e2:	f107 0314 	add.w	r3, r7, #20
 80044e6:	4619      	mov	r1, r3
 80044e8:	480f      	ldr	r0, [pc, #60]	; (8004528 <MX_TIM4_Init+0xdc>)
 80044ea:	f008 f8d7 	bl	800c69c <HAL_TIMEx_MasterConfigSynchronization>
 80044ee:	4603      	mov	r3, r0
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d001      	beq.n	80044f8 <MX_TIM4_Init+0xac>
  {
    Error_Handler();
 80044f4:	f7ff f874 	bl	80035e0 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80044f8:	2300      	movs	r3, #0
 80044fa:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80044fc:	2301      	movs	r3, #1
 80044fe:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8004500:	2300      	movs	r3, #0
 8004502:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8004504:	2300      	movs	r3, #0
 8004506:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8004508:	1d3b      	adds	r3, r7, #4
 800450a:	2200      	movs	r2, #0
 800450c:	4619      	mov	r1, r3
 800450e:	4806      	ldr	r0, [pc, #24]	; (8004528 <MX_TIM4_Init+0xdc>)
 8004510:	f007 f89f 	bl	800b652 <HAL_TIM_IC_ConfigChannel>
 8004514:	4603      	mov	r3, r0
 8004516:	2b00      	cmp	r3, #0
 8004518:	d001      	beq.n	800451e <MX_TIM4_Init+0xd2>
  {
    Error_Handler();
 800451a:	f7ff f861 	bl	80035e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800451e:	bf00      	nop
 8004520:	3730      	adds	r7, #48	; 0x30
 8004522:	46bd      	mov	sp, r7
 8004524:	bd80      	pop	{r7, pc}
 8004526:	bf00      	nop
 8004528:	2400066c 	.word	0x2400066c
 800452c:	40000800 	.word	0x40000800

08004530 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8004530:	b580      	push	{r7, lr}
 8004532:	b088      	sub	sp, #32
 8004534:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004536:	f107 0310 	add.w	r3, r7, #16
 800453a:	2200      	movs	r2, #0
 800453c:	601a      	str	r2, [r3, #0]
 800453e:	605a      	str	r2, [r3, #4]
 8004540:	609a      	str	r2, [r3, #8]
 8004542:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004544:	1d3b      	adds	r3, r7, #4
 8004546:	2200      	movs	r2, #0
 8004548:	601a      	str	r2, [r3, #0]
 800454a:	605a      	str	r2, [r3, #4]
 800454c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 800454e:	4b1e      	ldr	r3, [pc, #120]	; (80045c8 <MX_TIM5_Init+0x98>)
 8004550:	4a1e      	ldr	r2, [pc, #120]	; (80045cc <MX_TIM5_Init+0x9c>)
 8004552:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 64000-1;
 8004554:	4b1c      	ldr	r3, [pc, #112]	; (80045c8 <MX_TIM5_Init+0x98>)
 8004556:	f64f 12ff 	movw	r2, #63999	; 0xf9ff
 800455a:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800455c:	4b1a      	ldr	r3, [pc, #104]	; (80045c8 <MX_TIM5_Init+0x98>)
 800455e:	2200      	movs	r2, #0
 8004560:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8004562:	4b19      	ldr	r3, [pc, #100]	; (80045c8 <MX_TIM5_Init+0x98>)
 8004564:	f04f 32ff 	mov.w	r2, #4294967295
 8004568:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800456a:	4b17      	ldr	r3, [pc, #92]	; (80045c8 <MX_TIM5_Init+0x98>)
 800456c:	2200      	movs	r2, #0
 800456e:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004570:	4b15      	ldr	r3, [pc, #84]	; (80045c8 <MX_TIM5_Init+0x98>)
 8004572:	2200      	movs	r2, #0
 8004574:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8004576:	4814      	ldr	r0, [pc, #80]	; (80045c8 <MX_TIM5_Init+0x98>)
 8004578:	f006 f940 	bl	800a7fc <HAL_TIM_Base_Init>
 800457c:	4603      	mov	r3, r0
 800457e:	2b00      	cmp	r3, #0
 8004580:	d001      	beq.n	8004586 <MX_TIM5_Init+0x56>
  {
    Error_Handler();
 8004582:	f7ff f82d 	bl	80035e0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004586:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800458a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 800458c:	f107 0310 	add.w	r3, r7, #16
 8004590:	4619      	mov	r1, r3
 8004592:	480d      	ldr	r0, [pc, #52]	; (80045c8 <MX_TIM5_Init+0x98>)
 8004594:	f007 fa0e 	bl	800b9b4 <HAL_TIM_ConfigClockSource>
 8004598:	4603      	mov	r3, r0
 800459a:	2b00      	cmp	r3, #0
 800459c:	d001      	beq.n	80045a2 <MX_TIM5_Init+0x72>
  {
    Error_Handler();
 800459e:	f7ff f81f 	bl	80035e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80045a2:	2300      	movs	r3, #0
 80045a4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80045a6:	2300      	movs	r3, #0
 80045a8:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80045aa:	1d3b      	adds	r3, r7, #4
 80045ac:	4619      	mov	r1, r3
 80045ae:	4806      	ldr	r0, [pc, #24]	; (80045c8 <MX_TIM5_Init+0x98>)
 80045b0:	f008 f874 	bl	800c69c <HAL_TIMEx_MasterConfigSynchronization>
 80045b4:	4603      	mov	r3, r0
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d001      	beq.n	80045be <MX_TIM5_Init+0x8e>
  {
    Error_Handler();
 80045ba:	f7ff f811 	bl	80035e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 80045be:	bf00      	nop
 80045c0:	3720      	adds	r7, #32
 80045c2:	46bd      	mov	sp, r7
 80045c4:	bd80      	pop	{r7, pc}
 80045c6:	bf00      	nop
 80045c8:	240006b8 	.word	0x240006b8
 80045cc:	40000c00 	.word	0x40000c00

080045d0 <MX_TIM12_Init>:
/* TIM12 init function */
void MX_TIM12_Init(void)
{
 80045d0:	b580      	push	{r7, lr}
 80045d2:	b08c      	sub	sp, #48	; 0x30
 80045d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80045d6:	f107 0320 	add.w	r3, r7, #32
 80045da:	2200      	movs	r2, #0
 80045dc:	601a      	str	r2, [r3, #0]
 80045de:	605a      	str	r2, [r3, #4]
 80045e0:	609a      	str	r2, [r3, #8]
 80045e2:	60da      	str	r2, [r3, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80045e4:	1d3b      	adds	r3, r7, #4
 80045e6:	2200      	movs	r2, #0
 80045e8:	601a      	str	r2, [r3, #0]
 80045ea:	605a      	str	r2, [r3, #4]
 80045ec:	609a      	str	r2, [r3, #8]
 80045ee:	60da      	str	r2, [r3, #12]
 80045f0:	611a      	str	r2, [r3, #16]
 80045f2:	615a      	str	r2, [r3, #20]
 80045f4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 80045f6:	4b26      	ldr	r3, [pc, #152]	; (8004690 <MX_TIM12_Init+0xc0>)
 80045f8:	4a26      	ldr	r2, [pc, #152]	; (8004694 <MX_TIM12_Init+0xc4>)
 80045fa:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 500-1;
 80045fc:	4b24      	ldr	r3, [pc, #144]	; (8004690 <MX_TIM12_Init+0xc0>)
 80045fe:	f240 12f3 	movw	r2, #499	; 0x1f3
 8004602:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004604:	4b22      	ldr	r3, [pc, #136]	; (8004690 <MX_TIM12_Init+0xc0>)
 8004606:	2200      	movs	r2, #0
 8004608:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 40000;
 800460a:	4b21      	ldr	r3, [pc, #132]	; (8004690 <MX_TIM12_Init+0xc0>)
 800460c:	f649 4240 	movw	r2, #40000	; 0x9c40
 8004610:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004612:	4b1f      	ldr	r3, [pc, #124]	; (8004690 <MX_TIM12_Init+0xc0>)
 8004614:	2200      	movs	r2, #0
 8004616:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004618:	4b1d      	ldr	r3, [pc, #116]	; (8004690 <MX_TIM12_Init+0xc0>)
 800461a:	2200      	movs	r2, #0
 800461c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim12) != HAL_OK)
 800461e:	481c      	ldr	r0, [pc, #112]	; (8004690 <MX_TIM12_Init+0xc0>)
 8004620:	f006 f8ec 	bl	800a7fc <HAL_TIM_Base_Init>
 8004624:	4603      	mov	r3, r0
 8004626:	2b00      	cmp	r3, #0
 8004628:	d001      	beq.n	800462e <MX_TIM12_Init+0x5e>
  {
    Error_Handler();
 800462a:	f7fe ffd9 	bl	80035e0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800462e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004632:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim12, &sClockSourceConfig) != HAL_OK)
 8004634:	f107 0320 	add.w	r3, r7, #32
 8004638:	4619      	mov	r1, r3
 800463a:	4815      	ldr	r0, [pc, #84]	; (8004690 <MX_TIM12_Init+0xc0>)
 800463c:	f007 f9ba 	bl	800b9b4 <HAL_TIM_ConfigClockSource>
 8004640:	4603      	mov	r3, r0
 8004642:	2b00      	cmp	r3, #0
 8004644:	d001      	beq.n	800464a <MX_TIM12_Init+0x7a>
  {
    Error_Handler();
 8004646:	f7fe ffcb 	bl	80035e0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 800464a:	4811      	ldr	r0, [pc, #68]	; (8004690 <MX_TIM12_Init+0xc0>)
 800464c:	f006 fa6d 	bl	800ab2a <HAL_TIM_PWM_Init>
 8004650:	4603      	mov	r3, r0
 8004652:	2b00      	cmp	r3, #0
 8004654:	d001      	beq.n	800465a <MX_TIM12_Init+0x8a>
  {
    Error_Handler();
 8004656:	f7fe ffc3 	bl	80035e0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800465a:	2360      	movs	r3, #96	; 0x60
 800465c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 20000;
 800465e:	f644 6320 	movw	r3, #20000	; 0x4e20
 8004662:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004664:	2300      	movs	r3, #0
 8004666:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004668:	2300      	movs	r3, #0
 800466a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800466c:	1d3b      	adds	r3, r7, #4
 800466e:	2200      	movs	r2, #0
 8004670:	4619      	mov	r1, r3
 8004672:	4807      	ldr	r0, [pc, #28]	; (8004690 <MX_TIM12_Init+0xc0>)
 8004674:	f007 f88a 	bl	800b78c <HAL_TIM_PWM_ConfigChannel>
 8004678:	4603      	mov	r3, r0
 800467a:	2b00      	cmp	r3, #0
 800467c:	d001      	beq.n	8004682 <MX_TIM12_Init+0xb2>
  {
    Error_Handler();
 800467e:	f7fe ffaf 	bl	80035e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 8004682:	4803      	ldr	r0, [pc, #12]	; (8004690 <MX_TIM12_Init+0xc0>)
 8004684:	f000 fa44 	bl	8004b10 <HAL_TIM_MspPostInit>

}
 8004688:	bf00      	nop
 800468a:	3730      	adds	r7, #48	; 0x30
 800468c:	46bd      	mov	sp, r7
 800468e:	bd80      	pop	{r7, pc}
 8004690:	24000704 	.word	0x24000704
 8004694:	40001800 	.word	0x40001800

08004698 <MX_TIM13_Init>:
/* TIM13 init function */
void MX_TIM13_Init(void)
{
 8004698:	b580      	push	{r7, lr}
 800469a:	b088      	sub	sp, #32
 800469c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM13_Init 0 */

  /* USER CODE END TIM13_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800469e:	1d3b      	adds	r3, r7, #4
 80046a0:	2200      	movs	r2, #0
 80046a2:	601a      	str	r2, [r3, #0]
 80046a4:	605a      	str	r2, [r3, #4]
 80046a6:	609a      	str	r2, [r3, #8]
 80046a8:	60da      	str	r2, [r3, #12]
 80046aa:	611a      	str	r2, [r3, #16]
 80046ac:	615a      	str	r2, [r3, #20]
 80046ae:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 80046b0:	4b1f      	ldr	r3, [pc, #124]	; (8004730 <MX_TIM13_Init+0x98>)
 80046b2:	4a20      	ldr	r2, [pc, #128]	; (8004734 <MX_TIM13_Init+0x9c>)
 80046b4:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 500-1;
 80046b6:	4b1e      	ldr	r3, [pc, #120]	; (8004730 <MX_TIM13_Init+0x98>)
 80046b8:	f240 12f3 	movw	r2, #499	; 0x1f3
 80046bc:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 80046be:	4b1c      	ldr	r3, [pc, #112]	; (8004730 <MX_TIM13_Init+0x98>)
 80046c0:	2200      	movs	r2, #0
 80046c2:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 40000;
 80046c4:	4b1a      	ldr	r3, [pc, #104]	; (8004730 <MX_TIM13_Init+0x98>)
 80046c6:	f649 4240 	movw	r2, #40000	; 0x9c40
 80046ca:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80046cc:	4b18      	ldr	r3, [pc, #96]	; (8004730 <MX_TIM13_Init+0x98>)
 80046ce:	2200      	movs	r2, #0
 80046d0:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80046d2:	4b17      	ldr	r3, [pc, #92]	; (8004730 <MX_TIM13_Init+0x98>)
 80046d4:	2200      	movs	r2, #0
 80046d6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 80046d8:	4815      	ldr	r0, [pc, #84]	; (8004730 <MX_TIM13_Init+0x98>)
 80046da:	f006 f88f 	bl	800a7fc <HAL_TIM_Base_Init>
 80046de:	4603      	mov	r3, r0
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d001      	beq.n	80046e8 <MX_TIM13_Init+0x50>
  {
    Error_Handler();
 80046e4:	f7fe ff7c 	bl	80035e0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim13) != HAL_OK)
 80046e8:	4811      	ldr	r0, [pc, #68]	; (8004730 <MX_TIM13_Init+0x98>)
 80046ea:	f006 fa1e 	bl	800ab2a <HAL_TIM_PWM_Init>
 80046ee:	4603      	mov	r3, r0
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d001      	beq.n	80046f8 <MX_TIM13_Init+0x60>
  {
    Error_Handler();
 80046f4:	f7fe ff74 	bl	80035e0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80046f8:	2360      	movs	r3, #96	; 0x60
 80046fa:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 20000;
 80046fc:	f644 6320 	movw	r3, #20000	; 0x4e20
 8004700:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004702:	2300      	movs	r3, #0
 8004704:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004706:	2300      	movs	r3, #0
 8004708:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim13, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800470a:	1d3b      	adds	r3, r7, #4
 800470c:	2200      	movs	r2, #0
 800470e:	4619      	mov	r1, r3
 8004710:	4807      	ldr	r0, [pc, #28]	; (8004730 <MX_TIM13_Init+0x98>)
 8004712:	f007 f83b 	bl	800b78c <HAL_TIM_PWM_ConfigChannel>
 8004716:	4603      	mov	r3, r0
 8004718:	2b00      	cmp	r3, #0
 800471a:	d001      	beq.n	8004720 <MX_TIM13_Init+0x88>
  {
    Error_Handler();
 800471c:	f7fe ff60 	bl	80035e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */
  HAL_TIM_MspPostInit(&htim13);
 8004720:	4803      	ldr	r0, [pc, #12]	; (8004730 <MX_TIM13_Init+0x98>)
 8004722:	f000 f9f5 	bl	8004b10 <HAL_TIM_MspPostInit>

}
 8004726:	bf00      	nop
 8004728:	3720      	adds	r7, #32
 800472a:	46bd      	mov	sp, r7
 800472c:	bd80      	pop	{r7, pc}
 800472e:	bf00      	nop
 8004730:	24000750 	.word	0x24000750
 8004734:	40001c00 	.word	0x40001c00

08004738 <MX_TIM14_Init>:
/* TIM14 init function */
void MX_TIM14_Init(void)
{
 8004738:	b580      	push	{r7, lr}
 800473a:	b088      	sub	sp, #32
 800473c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM14_Init 0 */

  /* USER CODE END TIM14_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800473e:	1d3b      	adds	r3, r7, #4
 8004740:	2200      	movs	r2, #0
 8004742:	601a      	str	r2, [r3, #0]
 8004744:	605a      	str	r2, [r3, #4]
 8004746:	609a      	str	r2, [r3, #8]
 8004748:	60da      	str	r2, [r3, #12]
 800474a:	611a      	str	r2, [r3, #16]
 800474c:	615a      	str	r2, [r3, #20]
 800474e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8004750:	4b1f      	ldr	r3, [pc, #124]	; (80047d0 <MX_TIM14_Init+0x98>)
 8004752:	4a20      	ldr	r2, [pc, #128]	; (80047d4 <MX_TIM14_Init+0x9c>)
 8004754:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 500-1;
 8004756:	4b1e      	ldr	r3, [pc, #120]	; (80047d0 <MX_TIM14_Init+0x98>)
 8004758:	f240 12f3 	movw	r2, #499	; 0x1f3
 800475c:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 800475e:	4b1c      	ldr	r3, [pc, #112]	; (80047d0 <MX_TIM14_Init+0x98>)
 8004760:	2200      	movs	r2, #0
 8004762:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 40000;
 8004764:	4b1a      	ldr	r3, [pc, #104]	; (80047d0 <MX_TIM14_Init+0x98>)
 8004766:	f649 4240 	movw	r2, #40000	; 0x9c40
 800476a:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800476c:	4b18      	ldr	r3, [pc, #96]	; (80047d0 <MX_TIM14_Init+0x98>)
 800476e:	2200      	movs	r2, #0
 8004770:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004772:	4b17      	ldr	r3, [pc, #92]	; (80047d0 <MX_TIM14_Init+0x98>)
 8004774:	2200      	movs	r2, #0
 8004776:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8004778:	4815      	ldr	r0, [pc, #84]	; (80047d0 <MX_TIM14_Init+0x98>)
 800477a:	f006 f83f 	bl	800a7fc <HAL_TIM_Base_Init>
 800477e:	4603      	mov	r3, r0
 8004780:	2b00      	cmp	r3, #0
 8004782:	d001      	beq.n	8004788 <MX_TIM14_Init+0x50>
  {
    Error_Handler();
 8004784:	f7fe ff2c 	bl	80035e0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim14) != HAL_OK)
 8004788:	4811      	ldr	r0, [pc, #68]	; (80047d0 <MX_TIM14_Init+0x98>)
 800478a:	f006 f9ce 	bl	800ab2a <HAL_TIM_PWM_Init>
 800478e:	4603      	mov	r3, r0
 8004790:	2b00      	cmp	r3, #0
 8004792:	d001      	beq.n	8004798 <MX_TIM14_Init+0x60>
  {
    Error_Handler();
 8004794:	f7fe ff24 	bl	80035e0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004798:	2360      	movs	r3, #96	; 0x60
 800479a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 20000;
 800479c:	f644 6320 	movw	r3, #20000	; 0x4e20
 80047a0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80047a2:	2300      	movs	r3, #0
 80047a4:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80047a6:	2300      	movs	r3, #0
 80047a8:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim14, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80047aa:	1d3b      	adds	r3, r7, #4
 80047ac:	2200      	movs	r2, #0
 80047ae:	4619      	mov	r1, r3
 80047b0:	4807      	ldr	r0, [pc, #28]	; (80047d0 <MX_TIM14_Init+0x98>)
 80047b2:	f006 ffeb 	bl	800b78c <HAL_TIM_PWM_ConfigChannel>
 80047b6:	4603      	mov	r3, r0
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d001      	beq.n	80047c0 <MX_TIM14_Init+0x88>
  {
    Error_Handler();
 80047bc:	f7fe ff10 	bl	80035e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */
  HAL_TIM_MspPostInit(&htim14);
 80047c0:	4803      	ldr	r0, [pc, #12]	; (80047d0 <MX_TIM14_Init+0x98>)
 80047c2:	f000 f9a5 	bl	8004b10 <HAL_TIM_MspPostInit>

}
 80047c6:	bf00      	nop
 80047c8:	3720      	adds	r7, #32
 80047ca:	46bd      	mov	sp, r7
 80047cc:	bd80      	pop	{r7, pc}
 80047ce:	bf00      	nop
 80047d0:	2400079c 	.word	0x2400079c
 80047d4:	40002000 	.word	0x40002000

080047d8 <MX_TIM15_Init>:
/* TIM15 init function */
void MX_TIM15_Init(void)
{
 80047d8:	b580      	push	{r7, lr}
 80047da:	b088      	sub	sp, #32
 80047dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80047de:	f107 0310 	add.w	r3, r7, #16
 80047e2:	2200      	movs	r2, #0
 80047e4:	601a      	str	r2, [r3, #0]
 80047e6:	605a      	str	r2, [r3, #4]
 80047e8:	609a      	str	r2, [r3, #8]
 80047ea:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80047ec:	1d3b      	adds	r3, r7, #4
 80047ee:	2200      	movs	r2, #0
 80047f0:	601a      	str	r2, [r3, #0]
 80047f2:	605a      	str	r2, [r3, #4]
 80047f4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 80047f6:	4b1f      	ldr	r3, [pc, #124]	; (8004874 <MX_TIM15_Init+0x9c>)
 80047f8:	4a1f      	ldr	r2, [pc, #124]	; (8004878 <MX_TIM15_Init+0xa0>)
 80047fa:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 1;
 80047fc:	4b1d      	ldr	r3, [pc, #116]	; (8004874 <MX_TIM15_Init+0x9c>)
 80047fe:	2201      	movs	r2, #1
 8004800:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004802:	4b1c      	ldr	r3, [pc, #112]	; (8004874 <MX_TIM15_Init+0x9c>)
 8004804:	2200      	movs	r2, #0
 8004806:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 64000;
 8004808:	4b1a      	ldr	r3, [pc, #104]	; (8004874 <MX_TIM15_Init+0x9c>)
 800480a:	f44f 427a 	mov.w	r2, #64000	; 0xfa00
 800480e:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004810:	4b18      	ldr	r3, [pc, #96]	; (8004874 <MX_TIM15_Init+0x9c>)
 8004812:	2200      	movs	r2, #0
 8004814:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8004816:	4b17      	ldr	r3, [pc, #92]	; (8004874 <MX_TIM15_Init+0x9c>)
 8004818:	2200      	movs	r2, #0
 800481a:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800481c:	4b15      	ldr	r3, [pc, #84]	; (8004874 <MX_TIM15_Init+0x9c>)
 800481e:	2200      	movs	r2, #0
 8004820:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 8004822:	4814      	ldr	r0, [pc, #80]	; (8004874 <MX_TIM15_Init+0x9c>)
 8004824:	f005 ffea 	bl	800a7fc <HAL_TIM_Base_Init>
 8004828:	4603      	mov	r3, r0
 800482a:	2b00      	cmp	r3, #0
 800482c:	d001      	beq.n	8004832 <MX_TIM15_Init+0x5a>
  {
    Error_Handler();
 800482e:	f7fe fed7 	bl	80035e0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004832:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004836:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 8004838:	f107 0310 	add.w	r3, r7, #16
 800483c:	4619      	mov	r1, r3
 800483e:	480d      	ldr	r0, [pc, #52]	; (8004874 <MX_TIM15_Init+0x9c>)
 8004840:	f007 f8b8 	bl	800b9b4 <HAL_TIM_ConfigClockSource>
 8004844:	4603      	mov	r3, r0
 8004846:	2b00      	cmp	r3, #0
 8004848:	d001      	beq.n	800484e <MX_TIM15_Init+0x76>
  {
    Error_Handler();
 800484a:	f7fe fec9 	bl	80035e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800484e:	2300      	movs	r3, #0
 8004850:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004852:	2300      	movs	r3, #0
 8004854:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8004856:	1d3b      	adds	r3, r7, #4
 8004858:	4619      	mov	r1, r3
 800485a:	4806      	ldr	r0, [pc, #24]	; (8004874 <MX_TIM15_Init+0x9c>)
 800485c:	f007 ff1e 	bl	800c69c <HAL_TIMEx_MasterConfigSynchronization>
 8004860:	4603      	mov	r3, r0
 8004862:	2b00      	cmp	r3, #0
 8004864:	d001      	beq.n	800486a <MX_TIM15_Init+0x92>
  {
    Error_Handler();
 8004866:	f7fe febb 	bl	80035e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */

}
 800486a:	bf00      	nop
 800486c:	3720      	adds	r7, #32
 800486e:	46bd      	mov	sp, r7
 8004870:	bd80      	pop	{r7, pc}
 8004872:	bf00      	nop
 8004874:	240007e8 	.word	0x240007e8
 8004878:	40014000 	.word	0x40014000

0800487c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800487c:	b580      	push	{r7, lr}
 800487e:	b092      	sub	sp, #72	; 0x48
 8004880:	af00      	add	r7, sp, #0
 8004882:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004884:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8004888:	2200      	movs	r2, #0
 800488a:	601a      	str	r2, [r3, #0]
 800488c:	605a      	str	r2, [r3, #4]
 800488e:	609a      	str	r2, [r3, #8]
 8004890:	60da      	str	r2, [r3, #12]
 8004892:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM2)
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800489c:	d136      	bne.n	800490c <HAL_TIM_Base_MspInit+0x90>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800489e:	4b92      	ldr	r3, [pc, #584]	; (8004ae8 <HAL_TIM_Base_MspInit+0x26c>)
 80048a0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80048a4:	4a90      	ldr	r2, [pc, #576]	; (8004ae8 <HAL_TIM_Base_MspInit+0x26c>)
 80048a6:	f043 0301 	orr.w	r3, r3, #1
 80048aa:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80048ae:	4b8e      	ldr	r3, [pc, #568]	; (8004ae8 <HAL_TIM_Base_MspInit+0x26c>)
 80048b0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80048b4:	f003 0301 	and.w	r3, r3, #1
 80048b8:	633b      	str	r3, [r7, #48]	; 0x30
 80048ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80048bc:	4b8a      	ldr	r3, [pc, #552]	; (8004ae8 <HAL_TIM_Base_MspInit+0x26c>)
 80048be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80048c2:	4a89      	ldr	r2, [pc, #548]	; (8004ae8 <HAL_TIM_Base_MspInit+0x26c>)
 80048c4:	f043 0301 	orr.w	r3, r3, #1
 80048c8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80048cc:	4b86      	ldr	r3, [pc, #536]	; (8004ae8 <HAL_TIM_Base_MspInit+0x26c>)
 80048ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80048d2:	f003 0301 	and.w	r3, r3, #1
 80048d6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80048d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = E_CountPap1_Pin;
 80048da:	2320      	movs	r3, #32
 80048dc:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80048de:	2302      	movs	r3, #2
 80048e0:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80048e2:	2302      	movs	r3, #2
 80048e4:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80048e6:	2300      	movs	r3, #0
 80048e8:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80048ea:	2301      	movs	r3, #1
 80048ec:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(E_CountPap1_GPIO_Port, &GPIO_InitStruct);
 80048ee:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80048f2:	4619      	mov	r1, r3
 80048f4:	487d      	ldr	r0, [pc, #500]	; (8004aec <HAL_TIM_Base_MspInit+0x270>)
 80048f6:	f003 fa29 	bl	8007d4c <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 1, 0);
 80048fa:	2200      	movs	r2, #0
 80048fc:	2101      	movs	r1, #1
 80048fe:	201c      	movs	r0, #28
 8004900:	f002 fc7d 	bl	80071fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8004904:	201c      	movs	r0, #28
 8004906:	f002 fc94 	bl	8007232 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM15_IRQn);
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }
}
 800490a:	e0e8      	b.n	8004ade <HAL_TIM_Base_MspInit+0x262>
  else if(tim_baseHandle->Instance==TIM3)
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	4a77      	ldr	r2, [pc, #476]	; (8004af0 <HAL_TIM_Base_MspInit+0x274>)
 8004912:	4293      	cmp	r3, r2
 8004914:	d136      	bne.n	8004984 <HAL_TIM_Base_MspInit+0x108>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8004916:	4b74      	ldr	r3, [pc, #464]	; (8004ae8 <HAL_TIM_Base_MspInit+0x26c>)
 8004918:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800491c:	4a72      	ldr	r2, [pc, #456]	; (8004ae8 <HAL_TIM_Base_MspInit+0x26c>)
 800491e:	f043 0302 	orr.w	r3, r3, #2
 8004922:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8004926:	4b70      	ldr	r3, [pc, #448]	; (8004ae8 <HAL_TIM_Base_MspInit+0x26c>)
 8004928:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800492c:	f003 0302 	and.w	r3, r3, #2
 8004930:	62bb      	str	r3, [r7, #40]	; 0x28
 8004932:	6abb      	ldr	r3, [r7, #40]	; 0x28
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004934:	4b6c      	ldr	r3, [pc, #432]	; (8004ae8 <HAL_TIM_Base_MspInit+0x26c>)
 8004936:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800493a:	4a6b      	ldr	r2, [pc, #428]	; (8004ae8 <HAL_TIM_Base_MspInit+0x26c>)
 800493c:	f043 0301 	orr.w	r3, r3, #1
 8004940:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004944:	4b68      	ldr	r3, [pc, #416]	; (8004ae8 <HAL_TIM_Base_MspInit+0x26c>)
 8004946:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800494a:	f003 0301 	and.w	r3, r3, #1
 800494e:	627b      	str	r3, [r7, #36]	; 0x24
 8004950:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pin = E_CountPaP2_Pin;
 8004952:	2340      	movs	r3, #64	; 0x40
 8004954:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004956:	2302      	movs	r3, #2
 8004958:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800495a:	2302      	movs	r3, #2
 800495c:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800495e:	2300      	movs	r3, #0
 8004960:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8004962:	2302      	movs	r3, #2
 8004964:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(E_CountPaP2_GPIO_Port, &GPIO_InitStruct);
 8004966:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800496a:	4619      	mov	r1, r3
 800496c:	485f      	ldr	r0, [pc, #380]	; (8004aec <HAL_TIM_Base_MspInit+0x270>)
 800496e:	f003 f9ed 	bl	8007d4c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM3_IRQn, 1, 0);
 8004972:	2200      	movs	r2, #0
 8004974:	2101      	movs	r1, #1
 8004976:	201d      	movs	r0, #29
 8004978:	f002 fc41 	bl	80071fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800497c:	201d      	movs	r0, #29
 800497e:	f002 fc58 	bl	8007232 <HAL_NVIC_EnableIRQ>
}
 8004982:	e0ac      	b.n	8004ade <HAL_TIM_Base_MspInit+0x262>
  else if(tim_baseHandle->Instance==TIM4)
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	4a5a      	ldr	r2, [pc, #360]	; (8004af4 <HAL_TIM_Base_MspInit+0x278>)
 800498a:	4293      	cmp	r3, r2
 800498c:	d137      	bne.n	80049fe <HAL_TIM_Base_MspInit+0x182>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800498e:	4b56      	ldr	r3, [pc, #344]	; (8004ae8 <HAL_TIM_Base_MspInit+0x26c>)
 8004990:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004994:	4a54      	ldr	r2, [pc, #336]	; (8004ae8 <HAL_TIM_Base_MspInit+0x26c>)
 8004996:	f043 0304 	orr.w	r3, r3, #4
 800499a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800499e:	4b52      	ldr	r3, [pc, #328]	; (8004ae8 <HAL_TIM_Base_MspInit+0x26c>)
 80049a0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80049a4:	f003 0304 	and.w	r3, r3, #4
 80049a8:	623b      	str	r3, [r7, #32]
 80049aa:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80049ac:	4b4e      	ldr	r3, [pc, #312]	; (8004ae8 <HAL_TIM_Base_MspInit+0x26c>)
 80049ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80049b2:	4a4d      	ldr	r2, [pc, #308]	; (8004ae8 <HAL_TIM_Base_MspInit+0x26c>)
 80049b4:	f043 0308 	orr.w	r3, r3, #8
 80049b8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80049bc:	4b4a      	ldr	r3, [pc, #296]	; (8004ae8 <HAL_TIM_Base_MspInit+0x26c>)
 80049be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80049c2:	f003 0308 	and.w	r3, r3, #8
 80049c6:	61fb      	str	r3, [r7, #28]
 80049c8:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = E_CountPaP3_Pin;
 80049ca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80049ce:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80049d0:	2302      	movs	r3, #2
 80049d2:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80049d4:	2302      	movs	r3, #2
 80049d6:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80049d8:	2300      	movs	r3, #0
 80049da:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80049dc:	2302      	movs	r3, #2
 80049de:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(E_CountPaP3_GPIO_Port, &GPIO_InitStruct);
 80049e0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80049e4:	4619      	mov	r1, r3
 80049e6:	4844      	ldr	r0, [pc, #272]	; (8004af8 <HAL_TIM_Base_MspInit+0x27c>)
 80049e8:	f003 f9b0 	bl	8007d4c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 1, 0);
 80049ec:	2200      	movs	r2, #0
 80049ee:	2101      	movs	r1, #1
 80049f0:	201e      	movs	r0, #30
 80049f2:	f002 fc04 	bl	80071fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80049f6:	201e      	movs	r0, #30
 80049f8:	f002 fc1b 	bl	8007232 <HAL_NVIC_EnableIRQ>
}
 80049fc:	e06f      	b.n	8004ade <HAL_TIM_Base_MspInit+0x262>
  else if(tim_baseHandle->Instance==TIM5)
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	4a3e      	ldr	r2, [pc, #248]	; (8004afc <HAL_TIM_Base_MspInit+0x280>)
 8004a04:	4293      	cmp	r3, r2
 8004a06:	d10f      	bne.n	8004a28 <HAL_TIM_Base_MspInit+0x1ac>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8004a08:	4b37      	ldr	r3, [pc, #220]	; (8004ae8 <HAL_TIM_Base_MspInit+0x26c>)
 8004a0a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004a0e:	4a36      	ldr	r2, [pc, #216]	; (8004ae8 <HAL_TIM_Base_MspInit+0x26c>)
 8004a10:	f043 0308 	orr.w	r3, r3, #8
 8004a14:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8004a18:	4b33      	ldr	r3, [pc, #204]	; (8004ae8 <HAL_TIM_Base_MspInit+0x26c>)
 8004a1a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004a1e:	f003 0308 	and.w	r3, r3, #8
 8004a22:	61bb      	str	r3, [r7, #24]
 8004a24:	69bb      	ldr	r3, [r7, #24]
}
 8004a26:	e05a      	b.n	8004ade <HAL_TIM_Base_MspInit+0x262>
  else if(tim_baseHandle->Instance==TIM12)
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	4a34      	ldr	r2, [pc, #208]	; (8004b00 <HAL_TIM_Base_MspInit+0x284>)
 8004a2e:	4293      	cmp	r3, r2
 8004a30:	d10f      	bne.n	8004a52 <HAL_TIM_Base_MspInit+0x1d6>
    __HAL_RCC_TIM12_CLK_ENABLE();
 8004a32:	4b2d      	ldr	r3, [pc, #180]	; (8004ae8 <HAL_TIM_Base_MspInit+0x26c>)
 8004a34:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004a38:	4a2b      	ldr	r2, [pc, #172]	; (8004ae8 <HAL_TIM_Base_MspInit+0x26c>)
 8004a3a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004a3e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8004a42:	4b29      	ldr	r3, [pc, #164]	; (8004ae8 <HAL_TIM_Base_MspInit+0x26c>)
 8004a44:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004a48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a4c:	617b      	str	r3, [r7, #20]
 8004a4e:	697b      	ldr	r3, [r7, #20]
}
 8004a50:	e045      	b.n	8004ade <HAL_TIM_Base_MspInit+0x262>
  else if(tim_baseHandle->Instance==TIM13)
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	4a2b      	ldr	r2, [pc, #172]	; (8004b04 <HAL_TIM_Base_MspInit+0x288>)
 8004a58:	4293      	cmp	r3, r2
 8004a5a:	d10f      	bne.n	8004a7c <HAL_TIM_Base_MspInit+0x200>
    __HAL_RCC_TIM13_CLK_ENABLE();
 8004a5c:	4b22      	ldr	r3, [pc, #136]	; (8004ae8 <HAL_TIM_Base_MspInit+0x26c>)
 8004a5e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004a62:	4a21      	ldr	r2, [pc, #132]	; (8004ae8 <HAL_TIM_Base_MspInit+0x26c>)
 8004a64:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004a68:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8004a6c:	4b1e      	ldr	r3, [pc, #120]	; (8004ae8 <HAL_TIM_Base_MspInit+0x26c>)
 8004a6e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004a72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a76:	613b      	str	r3, [r7, #16]
 8004a78:	693b      	ldr	r3, [r7, #16]
}
 8004a7a:	e030      	b.n	8004ade <HAL_TIM_Base_MspInit+0x262>
  else if(tim_baseHandle->Instance==TIM14)
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	4a21      	ldr	r2, [pc, #132]	; (8004b08 <HAL_TIM_Base_MspInit+0x28c>)
 8004a82:	4293      	cmp	r3, r2
 8004a84:	d10f      	bne.n	8004aa6 <HAL_TIM_Base_MspInit+0x22a>
    __HAL_RCC_TIM14_CLK_ENABLE();
 8004a86:	4b18      	ldr	r3, [pc, #96]	; (8004ae8 <HAL_TIM_Base_MspInit+0x26c>)
 8004a88:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004a8c:	4a16      	ldr	r2, [pc, #88]	; (8004ae8 <HAL_TIM_Base_MspInit+0x26c>)
 8004a8e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004a92:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8004a96:	4b14      	ldr	r3, [pc, #80]	; (8004ae8 <HAL_TIM_Base_MspInit+0x26c>)
 8004a98:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004a9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004aa0:	60fb      	str	r3, [r7, #12]
 8004aa2:	68fb      	ldr	r3, [r7, #12]
}
 8004aa4:	e01b      	b.n	8004ade <HAL_TIM_Base_MspInit+0x262>
  else if(tim_baseHandle->Instance==TIM15)
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	4a18      	ldr	r2, [pc, #96]	; (8004b0c <HAL_TIM_Base_MspInit+0x290>)
 8004aac:	4293      	cmp	r3, r2
 8004aae:	d116      	bne.n	8004ade <HAL_TIM_Base_MspInit+0x262>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8004ab0:	4b0d      	ldr	r3, [pc, #52]	; (8004ae8 <HAL_TIM_Base_MspInit+0x26c>)
 8004ab2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004ab6:	4a0c      	ldr	r2, [pc, #48]	; (8004ae8 <HAL_TIM_Base_MspInit+0x26c>)
 8004ab8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004abc:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8004ac0:	4b09      	ldr	r3, [pc, #36]	; (8004ae8 <HAL_TIM_Base_MspInit+0x26c>)
 8004ac2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004ac6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004aca:	60bb      	str	r3, [r7, #8]
 8004acc:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM15_IRQn, 1, 0);
 8004ace:	2200      	movs	r2, #0
 8004ad0:	2101      	movs	r1, #1
 8004ad2:	2074      	movs	r0, #116	; 0x74
 8004ad4:	f002 fb93 	bl	80071fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM15_IRQn);
 8004ad8:	2074      	movs	r0, #116	; 0x74
 8004ada:	f002 fbaa 	bl	8007232 <HAL_NVIC_EnableIRQ>
}
 8004ade:	bf00      	nop
 8004ae0:	3748      	adds	r7, #72	; 0x48
 8004ae2:	46bd      	mov	sp, r7
 8004ae4:	bd80      	pop	{r7, pc}
 8004ae6:	bf00      	nop
 8004ae8:	58024400 	.word	0x58024400
 8004aec:	58020000 	.word	0x58020000
 8004af0:	40000400 	.word	0x40000400
 8004af4:	40000800 	.word	0x40000800
 8004af8:	58020c00 	.word	0x58020c00
 8004afc:	40000c00 	.word	0x40000c00
 8004b00:	40001800 	.word	0x40001800
 8004b04:	40001c00 	.word	0x40001c00
 8004b08:	40002000 	.word	0x40002000
 8004b0c:	40014000 	.word	0x40014000

08004b10 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8004b10:	b580      	push	{r7, lr}
 8004b12:	b08a      	sub	sp, #40	; 0x28
 8004b14:	af00      	add	r7, sp, #0
 8004b16:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004b18:	f107 0314 	add.w	r3, r7, #20
 8004b1c:	2200      	movs	r2, #0
 8004b1e:	601a      	str	r2, [r3, #0]
 8004b20:	605a      	str	r2, [r3, #4]
 8004b22:	609a      	str	r2, [r3, #8]
 8004b24:	60da      	str	r2, [r3, #12]
 8004b26:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM12)
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	4a39      	ldr	r2, [pc, #228]	; (8004c14 <HAL_TIM_MspPostInit+0x104>)
 8004b2e:	4293      	cmp	r3, r2
 8004b30:	d120      	bne.n	8004b74 <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM12_MspPostInit 0 */

  /* USER CODE END TIM12_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004b32:	4b39      	ldr	r3, [pc, #228]	; (8004c18 <HAL_TIM_MspPostInit+0x108>)
 8004b34:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004b38:	4a37      	ldr	r2, [pc, #220]	; (8004c18 <HAL_TIM_MspPostInit+0x108>)
 8004b3a:	f043 0302 	orr.w	r3, r3, #2
 8004b3e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004b42:	4b35      	ldr	r3, [pc, #212]	; (8004c18 <HAL_TIM_MspPostInit+0x108>)
 8004b44:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004b48:	f003 0302 	and.w	r3, r3, #2
 8004b4c:	613b      	str	r3, [r7, #16]
 8004b4e:	693b      	ldr	r3, [r7, #16]
    /**TIM12 GPIO Configuration
    PB14     ------> TIM12_CH1
    */
    GPIO_InitStruct.Pin = S_PulsoPaP1_Pin;
 8004b50:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004b54:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004b56:	2302      	movs	r3, #2
 8004b58:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8004b5a:	2302      	movs	r3, #2
 8004b5c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004b5e:	2300      	movs	r3, #0
 8004b60:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM12;
 8004b62:	2302      	movs	r3, #2
 8004b64:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(S_PulsoPaP1_GPIO_Port, &GPIO_InitStruct);
 8004b66:	f107 0314 	add.w	r3, r7, #20
 8004b6a:	4619      	mov	r1, r3
 8004b6c:	482b      	ldr	r0, [pc, #172]	; (8004c1c <HAL_TIM_MspPostInit+0x10c>)
 8004b6e:	f003 f8ed 	bl	8007d4c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM14_MspPostInit 1 */

  /* USER CODE END TIM14_MspPostInit 1 */
  }

}
 8004b72:	e04a      	b.n	8004c0a <HAL_TIM_MspPostInit+0xfa>
  else if(timHandle->Instance==TIM13)
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	4a29      	ldr	r2, [pc, #164]	; (8004c20 <HAL_TIM_MspPostInit+0x110>)
 8004b7a:	4293      	cmp	r3, r2
 8004b7c:	d120      	bne.n	8004bc0 <HAL_TIM_MspPostInit+0xb0>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8004b7e:	4b26      	ldr	r3, [pc, #152]	; (8004c18 <HAL_TIM_MspPostInit+0x108>)
 8004b80:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004b84:	4a24      	ldr	r2, [pc, #144]	; (8004c18 <HAL_TIM_MspPostInit+0x108>)
 8004b86:	f043 0320 	orr.w	r3, r3, #32
 8004b8a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004b8e:	4b22      	ldr	r3, [pc, #136]	; (8004c18 <HAL_TIM_MspPostInit+0x108>)
 8004b90:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004b94:	f003 0320 	and.w	r3, r3, #32
 8004b98:	60fb      	str	r3, [r7, #12]
 8004b9a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = S_PulsoPaP2_Pin;
 8004b9c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004ba0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004ba2:	2302      	movs	r3, #2
 8004ba4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8004ba6:	2302      	movs	r3, #2
 8004ba8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004baa:	2300      	movs	r3, #0
 8004bac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM13;
 8004bae:	2309      	movs	r3, #9
 8004bb0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(S_PulsoPaP2_GPIO_Port, &GPIO_InitStruct);
 8004bb2:	f107 0314 	add.w	r3, r7, #20
 8004bb6:	4619      	mov	r1, r3
 8004bb8:	481a      	ldr	r0, [pc, #104]	; (8004c24 <HAL_TIM_MspPostInit+0x114>)
 8004bba:	f003 f8c7 	bl	8007d4c <HAL_GPIO_Init>
}
 8004bbe:	e024      	b.n	8004c0a <HAL_TIM_MspPostInit+0xfa>
  else if(timHandle->Instance==TIM14)
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	4a18      	ldr	r2, [pc, #96]	; (8004c28 <HAL_TIM_MspPostInit+0x118>)
 8004bc6:	4293      	cmp	r3, r2
 8004bc8:	d11f      	bne.n	8004c0a <HAL_TIM_MspPostInit+0xfa>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8004bca:	4b13      	ldr	r3, [pc, #76]	; (8004c18 <HAL_TIM_MspPostInit+0x108>)
 8004bcc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004bd0:	4a11      	ldr	r2, [pc, #68]	; (8004c18 <HAL_TIM_MspPostInit+0x108>)
 8004bd2:	f043 0320 	orr.w	r3, r3, #32
 8004bd6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004bda:	4b0f      	ldr	r3, [pc, #60]	; (8004c18 <HAL_TIM_MspPostInit+0x108>)
 8004bdc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004be0:	f003 0320 	and.w	r3, r3, #32
 8004be4:	60bb      	str	r3, [r7, #8]
 8004be6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = S_PulsoPaP3_Pin;
 8004be8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004bec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004bee:	2302      	movs	r3, #2
 8004bf0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8004bf2:	2302      	movs	r3, #2
 8004bf4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004bf6:	2300      	movs	r3, #0
 8004bf8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM14;
 8004bfa:	2309      	movs	r3, #9
 8004bfc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(S_PulsoPaP3_GPIO_Port, &GPIO_InitStruct);
 8004bfe:	f107 0314 	add.w	r3, r7, #20
 8004c02:	4619      	mov	r1, r3
 8004c04:	4807      	ldr	r0, [pc, #28]	; (8004c24 <HAL_TIM_MspPostInit+0x114>)
 8004c06:	f003 f8a1 	bl	8007d4c <HAL_GPIO_Init>
}
 8004c0a:	bf00      	nop
 8004c0c:	3728      	adds	r7, #40	; 0x28
 8004c0e:	46bd      	mov	sp, r7
 8004c10:	bd80      	pop	{r7, pc}
 8004c12:	bf00      	nop
 8004c14:	40001800 	.word	0x40001800
 8004c18:	58024400 	.word	0x58024400
 8004c1c:	58020400 	.word	0x58020400
 8004c20:	40001c00 	.word	0x40001c00
 8004c24:	58021400 	.word	0x58021400
 8004c28:	40002000 	.word	0x40002000
 8004c2c:	00000000 	.word	0x00000000

08004c30 <inicializarTrayectoria>:

double DVHip, Aaux1, ViHip2, XiHip2, Aaux, XiHip3, ViHip4, XiHip4;

//(Posinicio , Posfin , Vinicio , Vfin , Vmaxima, Amaxima, jerk)

void inicializarTrayectoria(double XiHip1, double XfHip4, double V0Hip, double Vf, double Vmax, double Amax, double Jerk) {
 8004c30:	b580      	push	{r7, lr}
 8004c32:	ed2d 8b04 	vpush	{d8-d9}
 8004c36:	b090      	sub	sp, #64	; 0x40
 8004c38:	af00      	add	r7, sp, #0
 8004c3a:	ed87 0b0c 	vstr	d0, [r7, #48]	; 0x30
 8004c3e:	ed87 1b0a 	vstr	d1, [r7, #40]	; 0x28
 8004c42:	ed87 2b08 	vstr	d2, [r7, #32]
 8004c46:	ed87 3b06 	vstr	d3, [r7, #24]
 8004c4a:	ed87 4b04 	vstr	d4, [r7, #16]
 8004c4e:	ed87 5b02 	vstr	d5, [r7, #8]
 8004c52:	ed87 6b00 	vstr	d6, [r7]

	if (XfHip4 < XiHip1) {
 8004c56:	ed97 6b0a 	vldr	d6, [r7, #40]	; 0x28
 8004c5a:	ed97 7b0c 	vldr	d7, [r7, #48]	; 0x30
 8004c5e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8004c62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c66:	d519      	bpl.n	8004c9c <inicializarTrayectoria+0x6c>
		Ai = -Amax;
 8004c68:	ed97 7b02 	vldr	d7, [r7, #8]
 8004c6c:	eeb1 7b47 	vneg.f64	d7, d7
 8004c70:	4b7e      	ldr	r3, [pc, #504]	; (8004e6c <inicializarTrayectoria+0x23c>)
 8004c72:	ed83 7b00 	vstr	d7, [r3]
		Af = +Amax;
 8004c76:	497e      	ldr	r1, [pc, #504]	; (8004e70 <inicializarTrayectoria+0x240>)
 8004c78:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004c7c:	e9c1 2300 	strd	r2, r3, [r1]
		Vm = -Vmax;
 8004c80:	ed97 7b04 	vldr	d7, [r7, #16]
 8004c84:	eeb1 7b47 	vneg.f64	d7, d7
 8004c88:	4b7a      	ldr	r3, [pc, #488]	; (8004e74 <inicializarTrayectoria+0x244>)
 8004c8a:	ed83 7b00 	vstr	d7, [r3]
		Jerk = -Jerk;
 8004c8e:	ed97 7b00 	vldr	d7, [r7]
 8004c92:	eeb1 7b47 	vneg.f64	d7, d7
 8004c96:	ed87 7b00 	vstr	d7, [r7]
 8004c9a:	e019      	b.n	8004cd0 <inicializarTrayectoria+0xa0>
	} else if (XfHip4 > XiHip1) {
 8004c9c:	ed97 6b0a 	vldr	d6, [r7, #40]	; 0x28
 8004ca0:	ed97 7b0c 	vldr	d7, [r7, #48]	; 0x30
 8004ca4:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8004ca8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004cac:	dd10      	ble.n	8004cd0 <inicializarTrayectoria+0xa0>
		Ai = Amax;
 8004cae:	496f      	ldr	r1, [pc, #444]	; (8004e6c <inicializarTrayectoria+0x23c>)
 8004cb0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004cb4:	e9c1 2300 	strd	r2, r3, [r1]
		Af = -Amax;
 8004cb8:	ed97 7b02 	vldr	d7, [r7, #8]
 8004cbc:	eeb1 7b47 	vneg.f64	d7, d7
 8004cc0:	4b6b      	ldr	r3, [pc, #428]	; (8004e70 <inicializarTrayectoria+0x240>)
 8004cc2:	ed83 7b00 	vstr	d7, [r3]
		Vm = Vmax;
 8004cc6:	496b      	ldr	r1, [pc, #428]	; (8004e74 <inicializarTrayectoria+0x244>)
 8004cc8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8004ccc:	e9c1 2300 	strd	r2, r3, [r1]
	}

	if (V0Hip > Vmax) {
 8004cd0:	ed97 6b08 	vldr	d6, [r7, #32]
 8004cd4:	ed97 7b04 	vldr	d7, [r7, #16]
 8004cd8:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8004cdc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004ce0:	dd0b      	ble.n	8004cfa <inicializarTrayectoria+0xca>
		Ai = -Amax;
 8004ce2:	ed97 7b02 	vldr	d7, [r7, #8]
 8004ce6:	eeb1 7b47 	vneg.f64	d7, d7
 8004cea:	4b60      	ldr	r3, [pc, #384]	; (8004e6c <inicializarTrayectoria+0x23c>)
 8004cec:	ed83 7b00 	vstr	d7, [r3]
		Af = Amax;
 8004cf0:	495f      	ldr	r1, [pc, #380]	; (8004e70 <inicializarTrayectoria+0x240>)
 8004cf2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004cf6:	e9c1 2300 	strd	r2, r3, [r1]
	}
	if (Vf > Vmax) {
 8004cfa:	ed97 6b06 	vldr	d6, [r7, #24]
 8004cfe:	ed97 7b04 	vldr	d7, [r7, #16]
 8004d02:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8004d06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004d0a:	dd0b      	ble.n	8004d24 <inicializarTrayectoria+0xf4>
		Ai = Amax;
 8004d0c:	4957      	ldr	r1, [pc, #348]	; (8004e6c <inicializarTrayectoria+0x23c>)
 8004d0e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004d12:	e9c1 2300 	strd	r2, r3, [r1]
		Af = -Amax;
 8004d16:	ed97 7b02 	vldr	d7, [r7, #8]
 8004d1a:	eeb1 7b47 	vneg.f64	d7, d7
 8004d1e:	4b54      	ldr	r3, [pc, #336]	; (8004e70 <inicializarTrayectoria+0x240>)
 8004d20:	ed83 7b00 	vstr	d7, [r3]
	}

	for (uint8_t Iteracion = 0; Iteracion < 100; Iteracion++) { // Itero 40 veces, solo en caso de que no se alcance la vel maxima, sino salgo
 8004d24:	2300      	movs	r3, #0
 8004d26:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8004d2a:	f000 bd05 	b.w	8005738 <inicializarTrayectoria+0xb08>
		DVHip = (Ai * Ai) / (2 * Jerk) * 2;
 8004d2e:	4b4f      	ldr	r3, [pc, #316]	; (8004e6c <inicializarTrayectoria+0x23c>)
 8004d30:	ed93 6b00 	vldr	d6, [r3]
 8004d34:	4b4d      	ldr	r3, [pc, #308]	; (8004e6c <inicializarTrayectoria+0x23c>)
 8004d36:	ed93 7b00 	vldr	d7, [r3]
 8004d3a:	ee26 5b07 	vmul.f64	d5, d6, d7
 8004d3e:	ed97 7b00 	vldr	d7, [r7]
 8004d42:	ee37 6b07 	vadd.f64	d6, d7, d7
 8004d46:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8004d4a:	ee37 7b07 	vadd.f64	d7, d7, d7
 8004d4e:	4b4a      	ldr	r3, [pc, #296]	; (8004e78 <inicializarTrayectoria+0x248>)
 8004d50:	ed83 7b00 	vstr	d7, [r3]

		if (fabs(DVHip) > fabs(Vm - V0Hip)) { // Para cuando la velocidad inicial es muy cercana a la maxima
 8004d54:	4b48      	ldr	r3, [pc, #288]	; (8004e78 <inicializarTrayectoria+0x248>)
 8004d56:	ed93 7b00 	vldr	d7, [r3]
 8004d5a:	eeb0 6bc7 	vabs.f64	d6, d7
 8004d5e:	4b45      	ldr	r3, [pc, #276]	; (8004e74 <inicializarTrayectoria+0x244>)
 8004d60:	ed93 5b00 	vldr	d5, [r3]
 8004d64:	ed97 7b08 	vldr	d7, [r7, #32]
 8004d68:	ee35 7b47 	vsub.f64	d7, d5, d7
 8004d6c:	eeb0 7bc7 	vabs.f64	d7, d7
 8004d70:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8004d74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004d78:	dd35      	ble.n	8004de6 <inicializarTrayectoria+0x1b6>
			if (fabs(Vm - V0Hip) != 0) {
 8004d7a:	4b3e      	ldr	r3, [pc, #248]	; (8004e74 <inicializarTrayectoria+0x244>)
 8004d7c:	ed93 6b00 	vldr	d6, [r3]
 8004d80:	ed97 7b08 	vldr	d7, [r7, #32]
 8004d84:	ee36 7b47 	vsub.f64	d7, d6, d7
 8004d88:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8004d8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004d90:	d029      	beq.n	8004de6 <inicializarTrayectoria+0x1b6>
				Aaux1 = ((Ai) / fabs(Ai)) * sqrt(fabs(Vm - V0Hip) * fabs(Jerk));
 8004d92:	4b36      	ldr	r3, [pc, #216]	; (8004e6c <inicializarTrayectoria+0x23c>)
 8004d94:	ed93 6b00 	vldr	d6, [r3]
 8004d98:	4b34      	ldr	r3, [pc, #208]	; (8004e6c <inicializarTrayectoria+0x23c>)
 8004d9a:	ed93 7b00 	vldr	d7, [r3]
 8004d9e:	eeb0 7bc7 	vabs.f64	d7, d7
 8004da2:	ee86 8b07 	vdiv.f64	d8, d6, d7
 8004da6:	4b33      	ldr	r3, [pc, #204]	; (8004e74 <inicializarTrayectoria+0x244>)
 8004da8:	ed93 6b00 	vldr	d6, [r3]
 8004dac:	ed97 7b08 	vldr	d7, [r7, #32]
 8004db0:	ee36 7b47 	vsub.f64	d7, d6, d7
 8004db4:	eeb0 6bc7 	vabs.f64	d6, d7
 8004db8:	ed97 7b00 	vldr	d7, [r7]
 8004dbc:	eeb0 7bc7 	vabs.f64	d7, d7
 8004dc0:	ee26 7b07 	vmul.f64	d7, d6, d7
 8004dc4:	eeb0 0b47 	vmov.f64	d0, d7
 8004dc8:	f00d f9be 	bl	8012148 <sqrt>
 8004dcc:	eeb0 7b40 	vmov.f64	d7, d0
 8004dd0:	ee28 7b07 	vmul.f64	d7, d8, d7
 8004dd4:	4b29      	ldr	r3, [pc, #164]	; (8004e7c <inicializarTrayectoria+0x24c>)
 8004dd6:	ed83 7b00 	vstr	d7, [r3]
				Ai = Aaux1;
 8004dda:	4b28      	ldr	r3, [pc, #160]	; (8004e7c <inicializarTrayectoria+0x24c>)
 8004ddc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004de0:	4922      	ldr	r1, [pc, #136]	; (8004e6c <inicializarTrayectoria+0x23c>)
 8004de2:	e9c1 2300 	strd	r2, r3, [r1]
			}
		}

		if (fabs(Vm - V0Hip) == 0) { // Para cuando la velocidad inicial es igual a la maxima
 8004de6:	4b23      	ldr	r3, [pc, #140]	; (8004e74 <inicializarTrayectoria+0x244>)
 8004de8:	ed93 6b00 	vldr	d6, [r3]
 8004dec:	ed97 7b08 	vldr	d7, [r7, #32]
 8004df0:	ee36 7b47 	vsub.f64	d7, d6, d7
 8004df4:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8004df8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004dfc:	d150      	bne.n	8004ea0 <inicializarTrayectoria+0x270>
			a3Hip1 = 0;
 8004dfe:	4920      	ldr	r1, [pc, #128]	; (8004e80 <inicializarTrayectoria+0x250>)
 8004e00:	f04f 0200 	mov.w	r2, #0
 8004e04:	f04f 0300 	mov.w	r3, #0
 8004e08:	e9c1 2300 	strd	r2, r3, [r1]
			a2Hip1 = 0;
 8004e0c:	491d      	ldr	r1, [pc, #116]	; (8004e84 <inicializarTrayectoria+0x254>)
 8004e0e:	f04f 0200 	mov.w	r2, #0
 8004e12:	f04f 0300 	mov.w	r3, #0
 8004e16:	e9c1 2300 	strd	r2, r3, [r1]
			a1Hip1 = 0;
 8004e1a:	491b      	ldr	r1, [pc, #108]	; (8004e88 <inicializarTrayectoria+0x258>)
 8004e1c:	f04f 0200 	mov.w	r2, #0
 8004e20:	f04f 0300 	mov.w	r3, #0
 8004e24:	e9c1 2300 	strd	r2, r3, [r1]
			a0Hip1 = 0;
 8004e28:	4918      	ldr	r1, [pc, #96]	; (8004e8c <inicializarTrayectoria+0x25c>)
 8004e2a:	f04f 0200 	mov.w	r2, #0
 8004e2e:	f04f 0300 	mov.w	r3, #0
 8004e32:	e9c1 2300 	strd	r2, r3, [r1]
			tfHip1 = 0;
 8004e36:	4916      	ldr	r1, [pc, #88]	; (8004e90 <inicializarTrayectoria+0x260>)
 8004e38:	f04f 0200 	mov.w	r2, #0
 8004e3c:	f04f 0300 	mov.w	r3, #0
 8004e40:	e9c1 2300 	strd	r2, r3, [r1]
			tiHip2 = 0;
 8004e44:	4913      	ldr	r1, [pc, #76]	; (8004e94 <inicializarTrayectoria+0x264>)
 8004e46:	f04f 0200 	mov.w	r2, #0
 8004e4a:	f04f 0300 	mov.w	r3, #0
 8004e4e:	e9c1 2300 	strd	r2, r3, [r1]
			tfHip2 = 0;
 8004e52:	4911      	ldr	r1, [pc, #68]	; (8004e98 <inicializarTrayectoria+0x268>)
 8004e54:	f04f 0200 	mov.w	r2, #0
 8004e58:	f04f 0300 	mov.w	r3, #0
 8004e5c:	e9c1 2300 	strd	r2, r3, [r1]
			XfHip2 = XiHip1;
 8004e60:	490e      	ldr	r1, [pc, #56]	; (8004e9c <inicializarTrayectoria+0x26c>)
 8004e62:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8004e66:	e9c1 2300 	strd	r2, r3, [r1]
 8004e6a:	e195      	b.n	8005198 <inicializarTrayectoria+0x568>
 8004e6c:	24000a90 	.word	0x24000a90
 8004e70:	24000a98 	.word	0x24000a98
 8004e74:	24000b40 	.word	0x24000b40
 8004e78:	24000b98 	.word	0x24000b98
 8004e7c:	24000ba0 	.word	0x24000ba0
 8004e80:	24000ab8 	.word	0x24000ab8
 8004e84:	24000ab0 	.word	0x24000ab0
 8004e88:	24000aa8 	.word	0x24000aa8
 8004e8c:	24000aa0 	.word	0x24000aa0
 8004e90:	24000b58 	.word	0x24000b58
 8004e94:	24000b60 	.word	0x24000b60
 8004e98:	24000b68 	.word	0x24000b68
 8004e9c:	24000b28 	.word	0x24000b28
		} else {
			//  Polinomio de 3° orden (Jerk cte, parabola en V, hiperbola en X)         HIPERBOLA 1
			a3Hip1 = (Jerk / 6);
 8004ea0:	ed97 6b00 	vldr	d6, [r7]
 8004ea4:	eeb1 5b08 	vmov.f64	d5, #24	; 0x40c00000  6.0
 8004ea8:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8004eac:	4bcf      	ldr	r3, [pc, #828]	; (80051ec <inicializarTrayectoria+0x5bc>)
 8004eae:	ed83 7b00 	vstr	d7, [r3]
			a2Hip1 = 0;
 8004eb2:	49cf      	ldr	r1, [pc, #828]	; (80051f0 <inicializarTrayectoria+0x5c0>)
 8004eb4:	f04f 0200 	mov.w	r2, #0
 8004eb8:	f04f 0300 	mov.w	r3, #0
 8004ebc:	e9c1 2300 	strd	r2, r3, [r1]
			tfHip1 = ((Ai / (6 * a3Hip1)));
 8004ec0:	4bcc      	ldr	r3, [pc, #816]	; (80051f4 <inicializarTrayectoria+0x5c4>)
 8004ec2:	ed93 5b00 	vldr	d5, [r3]
 8004ec6:	4bc9      	ldr	r3, [pc, #804]	; (80051ec <inicializarTrayectoria+0x5bc>)
 8004ec8:	ed93 7b00 	vldr	d7, [r3]
 8004ecc:	eeb1 6b08 	vmov.f64	d6, #24	; 0x40c00000  6.0
 8004ed0:	ee27 6b06 	vmul.f64	d6, d7, d6
 8004ed4:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8004ed8:	4bc7      	ldr	r3, [pc, #796]	; (80051f8 <inicializarTrayectoria+0x5c8>)
 8004eda:	ed83 7b00 	vstr	d7, [r3]
			a1Hip1 = V0Hip;
 8004ede:	49c7      	ldr	r1, [pc, #796]	; (80051fc <inicializarTrayectoria+0x5cc>)
 8004ee0:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004ee4:	e9c1 2300 	strd	r2, r3, [r1]
			VfHip1 = a1Hip1 + (2 * a2Hip1 * tfHip1)
 8004ee8:	4bc1      	ldr	r3, [pc, #772]	; (80051f0 <inicializarTrayectoria+0x5c0>)
 8004eea:	ed93 7b00 	vldr	d7, [r3]
 8004eee:	ee37 6b07 	vadd.f64	d6, d7, d7
 8004ef2:	4bc1      	ldr	r3, [pc, #772]	; (80051f8 <inicializarTrayectoria+0x5c8>)
 8004ef4:	ed93 7b00 	vldr	d7, [r3]
 8004ef8:	ee26 6b07 	vmul.f64	d6, d6, d7
 8004efc:	4bbf      	ldr	r3, [pc, #764]	; (80051fc <inicializarTrayectoria+0x5cc>)
 8004efe:	ed93 7b00 	vldr	d7, [r3]
 8004f02:	ee36 8b07 	vadd.f64	d8, d6, d7
					+ 3 * a3Hip1 * pow(tfHip1, 2);
 8004f06:	4bb9      	ldr	r3, [pc, #740]	; (80051ec <inicializarTrayectoria+0x5bc>)
 8004f08:	ed93 7b00 	vldr	d7, [r3]
 8004f0c:	eeb0 6b08 	vmov.f64	d6, #8	; 0x40400000  3.0
 8004f10:	ee27 9b06 	vmul.f64	d9, d7, d6
 8004f14:	4bb8      	ldr	r3, [pc, #736]	; (80051f8 <inicializarTrayectoria+0x5c8>)
 8004f16:	ed93 7b00 	vldr	d7, [r3]
 8004f1a:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8004f1e:	eeb0 0b47 	vmov.f64	d0, d7
 8004f22:	f00c fe91 	bl	8011c48 <pow>
 8004f26:	eeb0 7b40 	vmov.f64	d7, d0
 8004f2a:	ee29 7b07 	vmul.f64	d7, d9, d7
 8004f2e:	ee38 7b07 	vadd.f64	d7, d8, d7
			VfHip1 = a1Hip1 + (2 * a2Hip1 * tfHip1)
 8004f32:	4bb3      	ldr	r3, [pc, #716]	; (8005200 <inicializarTrayectoria+0x5d0>)
 8004f34:	ed83 7b00 	vstr	d7, [r3]
			a0Hip1 = XiHip1;
 8004f38:	49b2      	ldr	r1, [pc, #712]	; (8005204 <inicializarTrayectoria+0x5d4>)
 8004f3a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8004f3e:	e9c1 2300 	strd	r2, r3, [r1]
			XfHip1 = a0Hip1 + (a1Hip1 * tfHip1) + a2Hip1 * pow(tfHip1, 2)
 8004f42:	4bae      	ldr	r3, [pc, #696]	; (80051fc <inicializarTrayectoria+0x5cc>)
 8004f44:	ed93 6b00 	vldr	d6, [r3]
 8004f48:	4bab      	ldr	r3, [pc, #684]	; (80051f8 <inicializarTrayectoria+0x5c8>)
 8004f4a:	ed93 7b00 	vldr	d7, [r3]
 8004f4e:	ee26 6b07 	vmul.f64	d6, d6, d7
 8004f52:	4bac      	ldr	r3, [pc, #688]	; (8005204 <inicializarTrayectoria+0x5d4>)
 8004f54:	ed93 7b00 	vldr	d7, [r3]
 8004f58:	ee36 8b07 	vadd.f64	d8, d6, d7
 8004f5c:	4ba6      	ldr	r3, [pc, #664]	; (80051f8 <inicializarTrayectoria+0x5c8>)
 8004f5e:	ed93 7b00 	vldr	d7, [r3]
 8004f62:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8004f66:	eeb0 0b47 	vmov.f64	d0, d7
 8004f6a:	f00c fe6d 	bl	8011c48 <pow>
 8004f6e:	eeb0 6b40 	vmov.f64	d6, d0
 8004f72:	4b9f      	ldr	r3, [pc, #636]	; (80051f0 <inicializarTrayectoria+0x5c0>)
 8004f74:	ed93 7b00 	vldr	d7, [r3]
 8004f78:	ee26 7b07 	vmul.f64	d7, d6, d7
 8004f7c:	ee38 8b07 	vadd.f64	d8, d8, d7
					+ a3Hip1 * pow(tfHip1, 3);
 8004f80:	4b9d      	ldr	r3, [pc, #628]	; (80051f8 <inicializarTrayectoria+0x5c8>)
 8004f82:	ed93 7b00 	vldr	d7, [r3]
 8004f86:	eeb0 1b08 	vmov.f64	d1, #8	; 0x40400000  3.0
 8004f8a:	eeb0 0b47 	vmov.f64	d0, d7
 8004f8e:	f00c fe5b 	bl	8011c48 <pow>
 8004f92:	eeb0 6b40 	vmov.f64	d6, d0
 8004f96:	4b95      	ldr	r3, [pc, #596]	; (80051ec <inicializarTrayectoria+0x5bc>)
 8004f98:	ed93 7b00 	vldr	d7, [r3]
 8004f9c:	ee26 7b07 	vmul.f64	d7, d6, d7
 8004fa0:	ee38 7b07 	vadd.f64	d7, d8, d7
			XfHip1 = a0Hip1 + (a1Hip1 * tfHip1) + a2Hip1 * pow(tfHip1, 2)
 8004fa4:	4b98      	ldr	r3, [pc, #608]	; (8005208 <inicializarTrayectoria+0x5d8>)
 8004fa6:	ed83 7b00 	vstr	d7, [r3]
			// Polinomio de 2° orden (Acel cte, trapecio en V, parabola en X)           PARABOLA 1
			a3Hip2 = (-Jerk / 6);
 8004faa:	ed97 7b00 	vldr	d7, [r7]
 8004fae:	eeb1 6b47 	vneg.f64	d6, d7
 8004fb2:	eeb1 5b08 	vmov.f64	d5, #24	; 0x40c00000  6.0
 8004fb6:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8004fba:	4b94      	ldr	r3, [pc, #592]	; (800520c <inicializarTrayectoria+0x5dc>)
 8004fbc:	ed83 7b00 	vstr	d7, [r3]
			a2Hip2 = Ai / 2;
 8004fc0:	4b8c      	ldr	r3, [pc, #560]	; (80051f4 <inicializarTrayectoria+0x5c4>)
 8004fc2:	ed93 6b00 	vldr	d6, [r3]
 8004fc6:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8004fca:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8004fce:	4b90      	ldr	r3, [pc, #576]	; (8005210 <inicializarTrayectoria+0x5e0>)
 8004fd0:	ed83 7b00 	vstr	d7, [r3]
			ViHip2 = Vm - 2.0 * a2Hip2 * (Ai / Jerk)
 8004fd4:	4b8f      	ldr	r3, [pc, #572]	; (8005214 <inicializarTrayectoria+0x5e4>)
 8004fd6:	ed93 6b00 	vldr	d6, [r3]
 8004fda:	4b8d      	ldr	r3, [pc, #564]	; (8005210 <inicializarTrayectoria+0x5e0>)
 8004fdc:	ed93 7b00 	vldr	d7, [r3]
 8004fe0:	ee37 5b07 	vadd.f64	d5, d7, d7
 8004fe4:	4b83      	ldr	r3, [pc, #524]	; (80051f4 <inicializarTrayectoria+0x5c4>)
 8004fe6:	ed93 3b00 	vldr	d3, [r3]
 8004fea:	ed97 4b00 	vldr	d4, [r7]
 8004fee:	ee83 7b04 	vdiv.f64	d7, d3, d4
 8004ff2:	ee25 7b07 	vmul.f64	d7, d5, d7
 8004ff6:	ee36 6b47 	vsub.f64	d6, d6, d7
					- 3 * a3Hip2 * (Ai / Jerk) * (Ai / Jerk);
 8004ffa:	4b84      	ldr	r3, [pc, #528]	; (800520c <inicializarTrayectoria+0x5dc>)
 8004ffc:	ed93 7b00 	vldr	d7, [r3]
 8005000:	eeb0 5b08 	vmov.f64	d5, #8	; 0x40400000  3.0
 8005004:	ee27 5b05 	vmul.f64	d5, d7, d5
 8005008:	4b7a      	ldr	r3, [pc, #488]	; (80051f4 <inicializarTrayectoria+0x5c4>)
 800500a:	ed93 3b00 	vldr	d3, [r3]
 800500e:	ed97 4b00 	vldr	d4, [r7]
 8005012:	ee83 7b04 	vdiv.f64	d7, d3, d4
 8005016:	ee25 5b07 	vmul.f64	d5, d5, d7
 800501a:	4b76      	ldr	r3, [pc, #472]	; (80051f4 <inicializarTrayectoria+0x5c4>)
 800501c:	ed93 3b00 	vldr	d3, [r3]
 8005020:	ed97 4b00 	vldr	d4, [r7]
 8005024:	ee83 7b04 	vdiv.f64	d7, d3, d4
 8005028:	ee25 7b07 	vmul.f64	d7, d5, d7
 800502c:	ee36 7b47 	vsub.f64	d7, d6, d7
			ViHip2 = Vm - 2.0 * a2Hip2 * (Ai / Jerk)
 8005030:	4b79      	ldr	r3, [pc, #484]	; (8005218 <inicializarTrayectoria+0x5e8>)
 8005032:	ed83 7b00 	vstr	d7, [r3]
			tiHip2 = ((ViHip2 - VfHip1) / Ai) + tfHip1;
 8005036:	4b78      	ldr	r3, [pc, #480]	; (8005218 <inicializarTrayectoria+0x5e8>)
 8005038:	ed93 6b00 	vldr	d6, [r3]
 800503c:	4b70      	ldr	r3, [pc, #448]	; (8005200 <inicializarTrayectoria+0x5d0>)
 800503e:	ed93 7b00 	vldr	d7, [r3]
 8005042:	ee36 5b47 	vsub.f64	d5, d6, d7
 8005046:	4b6b      	ldr	r3, [pc, #428]	; (80051f4 <inicializarTrayectoria+0x5c4>)
 8005048:	ed93 7b00 	vldr	d7, [r3]
 800504c:	ee85 6b07 	vdiv.f64	d6, d5, d7
 8005050:	4b69      	ldr	r3, [pc, #420]	; (80051f8 <inicializarTrayectoria+0x5c8>)
 8005052:	ed93 7b00 	vldr	d7, [r3]
 8005056:	ee36 7b07 	vadd.f64	d7, d6, d7
 800505a:	4b70      	ldr	r3, [pc, #448]	; (800521c <inicializarTrayectoria+0x5ec>)
 800505c:	ed83 7b00 	vstr	d7, [r3]
			XiHip2 = XfHip1 + (Ai / 2) * pow(((ViHip2 - VfHip1) / Ai), 2)
 8005060:	4b64      	ldr	r3, [pc, #400]	; (80051f4 <inicializarTrayectoria+0x5c4>)
 8005062:	ed93 7b00 	vldr	d7, [r3]
 8005066:	eeb0 6b00 	vmov.f64	d6, #0	; 0x40000000  2.0
 800506a:	ee87 8b06 	vdiv.f64	d8, d7, d6
 800506e:	4b6a      	ldr	r3, [pc, #424]	; (8005218 <inicializarTrayectoria+0x5e8>)
 8005070:	ed93 6b00 	vldr	d6, [r3]
 8005074:	4b62      	ldr	r3, [pc, #392]	; (8005200 <inicializarTrayectoria+0x5d0>)
 8005076:	ed93 7b00 	vldr	d7, [r3]
 800507a:	ee36 6b47 	vsub.f64	d6, d6, d7
 800507e:	4b5d      	ldr	r3, [pc, #372]	; (80051f4 <inicializarTrayectoria+0x5c4>)
 8005080:	ed93 7b00 	vldr	d7, [r3]
 8005084:	ee86 5b07 	vdiv.f64	d5, d6, d7
 8005088:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 800508c:	eeb0 0b45 	vmov.f64	d0, d5
 8005090:	f00c fdda 	bl	8011c48 <pow>
 8005094:	eeb0 7b40 	vmov.f64	d7, d0
 8005098:	ee28 6b07 	vmul.f64	d6, d8, d7
 800509c:	4b5a      	ldr	r3, [pc, #360]	; (8005208 <inicializarTrayectoria+0x5d8>)
 800509e:	ed93 7b00 	vldr	d7, [r3]
 80050a2:	ee36 6b07 	vadd.f64	d6, d6, d7
					+ VfHip1 * ((ViHip2 - VfHip1) / Ai);    //x=(Cte/2)*t^2+Vi*t
 80050a6:	4b5c      	ldr	r3, [pc, #368]	; (8005218 <inicializarTrayectoria+0x5e8>)
 80050a8:	ed93 5b00 	vldr	d5, [r3]
 80050ac:	4b54      	ldr	r3, [pc, #336]	; (8005200 <inicializarTrayectoria+0x5d0>)
 80050ae:	ed93 7b00 	vldr	d7, [r3]
 80050b2:	ee35 4b47 	vsub.f64	d4, d5, d7
 80050b6:	4b4f      	ldr	r3, [pc, #316]	; (80051f4 <inicializarTrayectoria+0x5c4>)
 80050b8:	ed93 7b00 	vldr	d7, [r3]
 80050bc:	ee84 5b07 	vdiv.f64	d5, d4, d7
 80050c0:	4b4f      	ldr	r3, [pc, #316]	; (8005200 <inicializarTrayectoria+0x5d0>)
 80050c2:	ed93 7b00 	vldr	d7, [r3]
 80050c6:	ee25 7b07 	vmul.f64	d7, d5, d7
 80050ca:	ee36 7b07 	vadd.f64	d7, d6, d7
			XiHip2 = XfHip1 + (Ai / 2) * pow(((ViHip2 - VfHip1) / Ai), 2)
 80050ce:	4b54      	ldr	r3, [pc, #336]	; (8005220 <inicializarTrayectoria+0x5f0>)
 80050d0:	ed83 7b00 	vstr	d7, [r3]
					//  Polinomio de 3° orden (Jerk cte, parabola en V, hiperbola en X)         HIPERBOLA 2
			tfHip2 = fabs(Ai / (-Jerk)) + tiHip2;
 80050d4:	4b47      	ldr	r3, [pc, #284]	; (80051f4 <inicializarTrayectoria+0x5c4>)
 80050d6:	ed93 7b00 	vldr	d7, [r3]
 80050da:	eeb1 5b47 	vneg.f64	d5, d7
 80050de:	ed97 6b00 	vldr	d6, [r7]
 80050e2:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80050e6:	eeb0 6bc7 	vabs.f64	d6, d7
 80050ea:	4b4c      	ldr	r3, [pc, #304]	; (800521c <inicializarTrayectoria+0x5ec>)
 80050ec:	ed93 7b00 	vldr	d7, [r3]
 80050f0:	ee36 7b07 	vadd.f64	d7, d6, d7
 80050f4:	4b4b      	ldr	r3, [pc, #300]	; (8005224 <inicializarTrayectoria+0x5f4>)
 80050f6:	ed83 7b00 	vstr	d7, [r3]
			a1Hip2 = ViHip2;
 80050fa:	4b47      	ldr	r3, [pc, #284]	; (8005218 <inicializarTrayectoria+0x5e8>)
 80050fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005100:	4949      	ldr	r1, [pc, #292]	; (8005228 <inicializarTrayectoria+0x5f8>)
 8005102:	e9c1 2300 	strd	r2, r3, [r1]
			a0Hip2 = XiHip2;
 8005106:	4b46      	ldr	r3, [pc, #280]	; (8005220 <inicializarTrayectoria+0x5f0>)
 8005108:	e9d3 2300 	ldrd	r2, r3, [r3]
 800510c:	4947      	ldr	r1, [pc, #284]	; (800522c <inicializarTrayectoria+0x5fc>)
 800510e:	e9c1 2300 	strd	r2, r3, [r1]
			XfHip2 = a0Hip2 + (a1Hip2 * (tfHip2 - tiHip2))
 8005112:	4b44      	ldr	r3, [pc, #272]	; (8005224 <inicializarTrayectoria+0x5f4>)
 8005114:	ed93 6b00 	vldr	d6, [r3]
 8005118:	4b40      	ldr	r3, [pc, #256]	; (800521c <inicializarTrayectoria+0x5ec>)
 800511a:	ed93 7b00 	vldr	d7, [r3]
 800511e:	ee36 6b47 	vsub.f64	d6, d6, d7
 8005122:	4b41      	ldr	r3, [pc, #260]	; (8005228 <inicializarTrayectoria+0x5f8>)
 8005124:	ed93 7b00 	vldr	d7, [r3]
 8005128:	ee26 6b07 	vmul.f64	d6, d6, d7
 800512c:	4b3f      	ldr	r3, [pc, #252]	; (800522c <inicializarTrayectoria+0x5fc>)
 800512e:	ed93 7b00 	vldr	d7, [r3]
 8005132:	ee36 8b07 	vadd.f64	d8, d6, d7
					+ a2Hip2 * pow((tfHip2 - tiHip2), 2.0)
 8005136:	4b3b      	ldr	r3, [pc, #236]	; (8005224 <inicializarTrayectoria+0x5f4>)
 8005138:	ed93 6b00 	vldr	d6, [r3]
 800513c:	4b37      	ldr	r3, [pc, #220]	; (800521c <inicializarTrayectoria+0x5ec>)
 800513e:	ed93 7b00 	vldr	d7, [r3]
 8005142:	ee36 7b47 	vsub.f64	d7, d6, d7
 8005146:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 800514a:	eeb0 0b47 	vmov.f64	d0, d7
 800514e:	f00c fd7b 	bl	8011c48 <pow>
 8005152:	eeb0 6b40 	vmov.f64	d6, d0
 8005156:	4b2e      	ldr	r3, [pc, #184]	; (8005210 <inicializarTrayectoria+0x5e0>)
 8005158:	ed93 7b00 	vldr	d7, [r3]
 800515c:	ee26 7b07 	vmul.f64	d7, d6, d7
 8005160:	ee38 8b07 	vadd.f64	d8, d8, d7
					+ a3Hip2 * pow((tfHip2 - tiHip2), 3.0);
 8005164:	4b2f      	ldr	r3, [pc, #188]	; (8005224 <inicializarTrayectoria+0x5f4>)
 8005166:	ed93 6b00 	vldr	d6, [r3]
 800516a:	4b2c      	ldr	r3, [pc, #176]	; (800521c <inicializarTrayectoria+0x5ec>)
 800516c:	ed93 7b00 	vldr	d7, [r3]
 8005170:	ee36 7b47 	vsub.f64	d7, d6, d7
 8005174:	eeb0 1b08 	vmov.f64	d1, #8	; 0x40400000  3.0
 8005178:	eeb0 0b47 	vmov.f64	d0, d7
 800517c:	f00c fd64 	bl	8011c48 <pow>
 8005180:	eeb0 6b40 	vmov.f64	d6, d0
 8005184:	4b21      	ldr	r3, [pc, #132]	; (800520c <inicializarTrayectoria+0x5dc>)
 8005186:	ed93 7b00 	vldr	d7, [r3]
 800518a:	ee26 7b07 	vmul.f64	d7, d6, d7
 800518e:	ee38 7b07 	vadd.f64	d7, d8, d7
			XfHip2 = a0Hip2 + (a1Hip2 * (tfHip2 - tiHip2))
 8005192:	4b27      	ldr	r3, [pc, #156]	; (8005230 <inicializarTrayectoria+0x600>)
 8005194:	ed83 7b00 	vstr	d7, [r3]
		}

		// Condiciones borde:    Se calcula de adelante hacia atras
		DVHip = pow(Af, 2) / (2 * Jerk) * 2;
 8005198:	4b26      	ldr	r3, [pc, #152]	; (8005234 <inicializarTrayectoria+0x604>)
 800519a:	ed93 7b00 	vldr	d7, [r3]
 800519e:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 80051a2:	eeb0 0b47 	vmov.f64	d0, d7
 80051a6:	f00c fd4f 	bl	8011c48 <pow>
 80051aa:	eeb0 5b40 	vmov.f64	d5, d0
 80051ae:	ed97 7b00 	vldr	d7, [r7]
 80051b2:	ee37 6b07 	vadd.f64	d6, d7, d7
 80051b6:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80051ba:	ee37 7b07 	vadd.f64	d7, d7, d7
 80051be:	4b1e      	ldr	r3, [pc, #120]	; (8005238 <inicializarTrayectoria+0x608>)
 80051c0:	ed83 7b00 	vstr	d7, [r3]
		if (fabs(DVHip) > fabs(Vm - Vf)) { // Para cuando la velocidad final es muy cercana a la maxima
 80051c4:	4b1c      	ldr	r3, [pc, #112]	; (8005238 <inicializarTrayectoria+0x608>)
 80051c6:	ed93 7b00 	vldr	d7, [r3]
 80051ca:	eeb0 6bc7 	vabs.f64	d6, d7
 80051ce:	4b11      	ldr	r3, [pc, #68]	; (8005214 <inicializarTrayectoria+0x5e4>)
 80051d0:	ed93 5b00 	vldr	d5, [r3]
 80051d4:	ed97 7b06 	vldr	d7, [r7, #24]
 80051d8:	ee35 7b47 	vsub.f64	d7, d5, d7
 80051dc:	eeb0 7bc7 	vabs.f64	d7, d7
 80051e0:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80051e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80051e8:	dd5e      	ble.n	80052a8 <inicializarTrayectoria+0x678>
 80051ea:	e027      	b.n	800523c <inicializarTrayectoria+0x60c>
 80051ec:	24000ab8 	.word	0x24000ab8
 80051f0:	24000ab0 	.word	0x24000ab0
 80051f4:	24000a90 	.word	0x24000a90
 80051f8:	24000b58 	.word	0x24000b58
 80051fc:	24000aa8 	.word	0x24000aa8
 8005200:	24000b48 	.word	0x24000b48
 8005204:	24000aa0 	.word	0x24000aa0
 8005208:	24000b20 	.word	0x24000b20
 800520c:	24000ad8 	.word	0x24000ad8
 8005210:	24000ad0 	.word	0x24000ad0
 8005214:	24000b40 	.word	0x24000b40
 8005218:	24000ba8 	.word	0x24000ba8
 800521c:	24000b60 	.word	0x24000b60
 8005220:	24000bb0 	.word	0x24000bb0
 8005224:	24000b68 	.word	0x24000b68
 8005228:	24000ac8 	.word	0x24000ac8
 800522c:	24000ac0 	.word	0x24000ac0
 8005230:	24000b28 	.word	0x24000b28
 8005234:	24000a98 	.word	0x24000a98
 8005238:	24000b98 	.word	0x24000b98
			if (fabs(Vm - Vf) != 0) {
 800523c:	4b34      	ldr	r3, [pc, #208]	; (8005310 <inicializarTrayectoria+0x6e0>)
 800523e:	ed93 6b00 	vldr	d6, [r3]
 8005242:	ed97 7b06 	vldr	d7, [r7, #24]
 8005246:	ee36 7b47 	vsub.f64	d7, d6, d7
 800524a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800524e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005252:	d029      	beq.n	80052a8 <inicializarTrayectoria+0x678>
				Aaux = ((Af) / fabs(Af)) * sqrt(fabs(Vm - Vf) * fabs(Jerk));
 8005254:	4b2f      	ldr	r3, [pc, #188]	; (8005314 <inicializarTrayectoria+0x6e4>)
 8005256:	ed93 6b00 	vldr	d6, [r3]
 800525a:	4b2e      	ldr	r3, [pc, #184]	; (8005314 <inicializarTrayectoria+0x6e4>)
 800525c:	ed93 7b00 	vldr	d7, [r3]
 8005260:	eeb0 7bc7 	vabs.f64	d7, d7
 8005264:	ee86 8b07 	vdiv.f64	d8, d6, d7
 8005268:	4b29      	ldr	r3, [pc, #164]	; (8005310 <inicializarTrayectoria+0x6e0>)
 800526a:	ed93 6b00 	vldr	d6, [r3]
 800526e:	ed97 7b06 	vldr	d7, [r7, #24]
 8005272:	ee36 7b47 	vsub.f64	d7, d6, d7
 8005276:	eeb0 6bc7 	vabs.f64	d6, d7
 800527a:	ed97 7b00 	vldr	d7, [r7]
 800527e:	eeb0 7bc7 	vabs.f64	d7, d7
 8005282:	ee26 7b07 	vmul.f64	d7, d6, d7
 8005286:	eeb0 0b47 	vmov.f64	d0, d7
 800528a:	f00c ff5d 	bl	8012148 <sqrt>
 800528e:	eeb0 7b40 	vmov.f64	d7, d0
 8005292:	ee28 7b07 	vmul.f64	d7, d8, d7
 8005296:	4b20      	ldr	r3, [pc, #128]	; (8005318 <inicializarTrayectoria+0x6e8>)
 8005298:	ed83 7b00 	vstr	d7, [r3]
				Af = Aaux;
 800529c:	4b1e      	ldr	r3, [pc, #120]	; (8005318 <inicializarTrayectoria+0x6e8>)
 800529e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052a2:	491c      	ldr	r1, [pc, #112]	; (8005314 <inicializarTrayectoria+0x6e4>)
 80052a4:	e9c1 2300 	strd	r2, r3, [r1]
			}
		}
		if (fabs(Vm - Vf) == 0) { // Para cuando la velocidad final es igual a la maxima
 80052a8:	4b19      	ldr	r3, [pc, #100]	; (8005310 <inicializarTrayectoria+0x6e0>)
 80052aa:	ed93 6b00 	vldr	d6, [r3]
 80052ae:	ed97 7b06 	vldr	d7, [r7, #24]
 80052b2:	ee36 7b47 	vsub.f64	d7, d6, d7
 80052b6:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80052ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80052be:	d139      	bne.n	8005334 <inicializarTrayectoria+0x704>
			VfHip3 = Vf;
 80052c0:	4916      	ldr	r1, [pc, #88]	; (800531c <inicializarTrayectoria+0x6ec>)
 80052c2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80052c6:	e9c1 2300 	strd	r2, r3, [r1]
			XiHip3 = XfHip4;
 80052ca:	4915      	ldr	r1, [pc, #84]	; (8005320 <inicializarTrayectoria+0x6f0>)
 80052cc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80052d0:	e9c1 2300 	strd	r2, r3, [r1]
			tiHip3 = fabs((XiHip3 - XfHip2) / Vm) + tfHip2;
 80052d4:	4b12      	ldr	r3, [pc, #72]	; (8005320 <inicializarTrayectoria+0x6f0>)
 80052d6:	ed93 6b00 	vldr	d6, [r3]
 80052da:	4b12      	ldr	r3, [pc, #72]	; (8005324 <inicializarTrayectoria+0x6f4>)
 80052dc:	ed93 7b00 	vldr	d7, [r3]
 80052e0:	ee36 5b47 	vsub.f64	d5, d6, d7
 80052e4:	4b0a      	ldr	r3, [pc, #40]	; (8005310 <inicializarTrayectoria+0x6e0>)
 80052e6:	ed93 6b00 	vldr	d6, [r3]
 80052ea:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80052ee:	eeb0 6bc7 	vabs.f64	d6, d7
 80052f2:	4b0d      	ldr	r3, [pc, #52]	; (8005328 <inicializarTrayectoria+0x6f8>)
 80052f4:	ed93 7b00 	vldr	d7, [r3]
 80052f8:	ee36 7b07 	vadd.f64	d7, d6, d7
 80052fc:	4b0b      	ldr	r3, [pc, #44]	; (800532c <inicializarTrayectoria+0x6fc>)
 80052fe:	ed83 7b00 	vstr	d7, [r3]
			TiempoTotX = tiHip3;
 8005302:	4b0a      	ldr	r3, [pc, #40]	; (800532c <inicializarTrayectoria+0x6fc>)
 8005304:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005308:	4909      	ldr	r1, [pc, #36]	; (8005330 <inicializarTrayectoria+0x700>)
 800530a:	e9c1 2300 	strd	r2, r3, [r1]
 800530e:	e18b      	b.n	8005628 <inicializarTrayectoria+0x9f8>
 8005310:	24000b40 	.word	0x24000b40
 8005314:	24000a98 	.word	0x24000a98
 8005318:	24000bb8 	.word	0x24000bb8
 800531c:	24000b50 	.word	0x24000b50
 8005320:	24000b38 	.word	0x24000b38
 8005324:	24000b28 	.word	0x24000b28
 8005328:	24000b68 	.word	0x24000b68
 800532c:	24000b70 	.word	0x24000b70
 8005330:	24000b88 	.word	0x24000b88
		} else {
			ViHip4 = pow(Af, 2) / (2 * Jerk) + Vf;
 8005334:	4bc7      	ldr	r3, [pc, #796]	; (8005654 <inicializarTrayectoria+0xa24>)
 8005336:	ed93 7b00 	vldr	d7, [r3]
 800533a:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 800533e:	eeb0 0b47 	vmov.f64	d0, d7
 8005342:	f00c fc81 	bl	8011c48 <pow>
 8005346:	eeb0 5b40 	vmov.f64	d5, d0
 800534a:	ed97 7b00 	vldr	d7, [r7]
 800534e:	ee37 7b07 	vadd.f64	d7, d7, d7
 8005352:	ee85 6b07 	vdiv.f64	d6, d5, d7
 8005356:	ed97 7b06 	vldr	d7, [r7, #24]
 800535a:	ee36 7b07 	vadd.f64	d7, d6, d7
 800535e:	4bbe      	ldr	r3, [pc, #760]	; (8005658 <inicializarTrayectoria+0xa28>)
 8005360:	ed83 7b00 	vstr	d7, [r3]
			XiHip4 =
					XfHip4
							- (fabs(pow(Af, 3) / (6 * pow(Jerk, 2)))
 8005364:	4bbb      	ldr	r3, [pc, #748]	; (8005654 <inicializarTrayectoria+0xa24>)
 8005366:	ed93 7b00 	vldr	d7, [r3]
 800536a:	eeb0 1b08 	vmov.f64	d1, #8	; 0x40400000  3.0
 800536e:	eeb0 0b47 	vmov.f64	d0, d7
 8005372:	f00c fc69 	bl	8011c48 <pow>
 8005376:	eeb0 8b40 	vmov.f64	d8, d0
 800537a:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 800537e:	ed97 0b00 	vldr	d0, [r7]
 8005382:	f00c fc61 	bl	8011c48 <pow>
 8005386:	eeb0 7b40 	vmov.f64	d7, d0
 800538a:	eeb1 6b08 	vmov.f64	d6, #24	; 0x40c00000  6.0
 800538e:	ee27 6b06 	vmul.f64	d6, d7, d6
 8005392:	ee88 7b06 	vdiv.f64	d7, d8, d6
 8005396:	eeb0 6bc7 	vabs.f64	d6, d7
									* ((ViHip4) / fabs(ViHip4))
 800539a:	4baf      	ldr	r3, [pc, #700]	; (8005658 <inicializarTrayectoria+0xa28>)
 800539c:	ed93 4b00 	vldr	d4, [r3]
 80053a0:	4bad      	ldr	r3, [pc, #692]	; (8005658 <inicializarTrayectoria+0xa28>)
 80053a2:	ed93 7b00 	vldr	d7, [r3]
 80053a6:	eeb0 5bc7 	vabs.f64	d5, d7
 80053aa:	ee84 7b05 	vdiv.f64	d7, d4, d5
 80053ae:	ee26 6b07 	vmul.f64	d6, d6, d7
									+ Vf * (fabs(Af / Jerk)));
 80053b2:	4ba8      	ldr	r3, [pc, #672]	; (8005654 <inicializarTrayectoria+0xa24>)
 80053b4:	ed93 4b00 	vldr	d4, [r3]
 80053b8:	ed97 5b00 	vldr	d5, [r7]
 80053bc:	ee84 7b05 	vdiv.f64	d7, d4, d5
 80053c0:	eeb0 5bc7 	vabs.f64	d5, d7
 80053c4:	ed97 7b06 	vldr	d7, [r7, #24]
 80053c8:	ee25 7b07 	vmul.f64	d7, d5, d7
 80053cc:	ee36 7b07 	vadd.f64	d7, d6, d7
							- (fabs(pow(Af, 3) / (6 * pow(Jerk, 2)))
 80053d0:	ed97 6b0a 	vldr	d6, [r7, #40]	; 0x28
 80053d4:	ee36 7b47 	vsub.f64	d7, d6, d7
			XiHip4 =
 80053d8:	4ba0      	ldr	r3, [pc, #640]	; (800565c <inicializarTrayectoria+0xa2c>)
 80053da:	ed83 7b00 	vstr	d7, [r3]
			VfHip3 = Vm - pow(Af, 2) / (2 * (Jerk));
 80053de:	4ba0      	ldr	r3, [pc, #640]	; (8005660 <inicializarTrayectoria+0xa30>)
 80053e0:	ed93 8b00 	vldr	d8, [r3]
 80053e4:	4b9b      	ldr	r3, [pc, #620]	; (8005654 <inicializarTrayectoria+0xa24>)
 80053e6:	ed93 7b00 	vldr	d7, [r3]
 80053ea:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 80053ee:	eeb0 0b47 	vmov.f64	d0, d7
 80053f2:	f00c fc29 	bl	8011c48 <pow>
 80053f6:	eeb0 5b40 	vmov.f64	d5, d0
 80053fa:	ed97 7b00 	vldr	d7, [r7]
 80053fe:	ee37 6b07 	vadd.f64	d6, d7, d7
 8005402:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8005406:	ee38 7b47 	vsub.f64	d7, d8, d7
 800540a:	4b96      	ldr	r3, [pc, #600]	; (8005664 <inicializarTrayectoria+0xa34>)
 800540c:	ed83 7b00 	vstr	d7, [r3]
			XfHip3 = XiHip4
					- (((ViHip4) / fabs(ViHip4)) * (fabs(Af) / 2)
 8005410:	4b92      	ldr	r3, [pc, #584]	; (800565c <inicializarTrayectoria+0xa2c>)
 8005412:	ed93 8b00 	vldr	d8, [r3]
 8005416:	4b90      	ldr	r3, [pc, #576]	; (8005658 <inicializarTrayectoria+0xa28>)
 8005418:	ed93 5b00 	vldr	d5, [r3]
 800541c:	4b8e      	ldr	r3, [pc, #568]	; (8005658 <inicializarTrayectoria+0xa28>)
 800541e:	ed93 7b00 	vldr	d7, [r3]
 8005422:	eeb0 7bc7 	vabs.f64	d7, d7
 8005426:	ee85 6b07 	vdiv.f64	d6, d5, d7
 800542a:	4b8a      	ldr	r3, [pc, #552]	; (8005654 <inicializarTrayectoria+0xa24>)
 800542c:	ed93 7b00 	vldr	d7, [r3]
 8005430:	eeb0 5bc7 	vabs.f64	d5, d7
 8005434:	eeb0 4b00 	vmov.f64	d4, #0	; 0x40000000  2.0
 8005438:	ee85 7b04 	vdiv.f64	d7, d5, d4
 800543c:	ee26 9b07 	vmul.f64	d9, d6, d7
							* pow(((ViHip4 - VfHip3) / Af), 2)
 8005440:	4b85      	ldr	r3, [pc, #532]	; (8005658 <inicializarTrayectoria+0xa28>)
 8005442:	ed93 6b00 	vldr	d6, [r3]
 8005446:	4b87      	ldr	r3, [pc, #540]	; (8005664 <inicializarTrayectoria+0xa34>)
 8005448:	ed93 7b00 	vldr	d7, [r3]
 800544c:	ee36 6b47 	vsub.f64	d6, d6, d7
 8005450:	4b80      	ldr	r3, [pc, #512]	; (8005654 <inicializarTrayectoria+0xa24>)
 8005452:	ed93 7b00 	vldr	d7, [r3]
 8005456:	ee86 5b07 	vdiv.f64	d5, d6, d7
 800545a:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 800545e:	eeb0 0b45 	vmov.f64	d0, d5
 8005462:	f00c fbf1 	bl	8011c48 <pow>
 8005466:	eeb0 7b40 	vmov.f64	d7, d0
 800546a:	ee29 6b07 	vmul.f64	d6, d9, d7
							+ ViHip4 * ((ViHip4 - VfHip3) / Af));
 800546e:	4b7a      	ldr	r3, [pc, #488]	; (8005658 <inicializarTrayectoria+0xa28>)
 8005470:	ed93 5b00 	vldr	d5, [r3]
 8005474:	4b7b      	ldr	r3, [pc, #492]	; (8005664 <inicializarTrayectoria+0xa34>)
 8005476:	ed93 7b00 	vldr	d7, [r3]
 800547a:	ee35 4b47 	vsub.f64	d4, d5, d7
 800547e:	4b75      	ldr	r3, [pc, #468]	; (8005654 <inicializarTrayectoria+0xa24>)
 8005480:	ed93 7b00 	vldr	d7, [r3]
 8005484:	ee84 5b07 	vdiv.f64	d5, d4, d7
 8005488:	4b73      	ldr	r3, [pc, #460]	; (8005658 <inicializarTrayectoria+0xa28>)
 800548a:	ed93 7b00 	vldr	d7, [r3]
 800548e:	ee25 7b07 	vmul.f64	d7, d5, d7
 8005492:	ee36 7b07 	vadd.f64	d7, d6, d7
					- (((ViHip4) / fabs(ViHip4)) * (fabs(Af) / 2)
 8005496:	ee38 7b47 	vsub.f64	d7, d8, d7
			XfHip3 = XiHip4
 800549a:	4b73      	ldr	r3, [pc, #460]	; (8005668 <inicializarTrayectoria+0xa38>)
 800549c:	ed83 7b00 	vstr	d7, [r3]
			XiHip3 = XfHip3 - Vm * (Af / (-Jerk))
 80054a0:	4b6c      	ldr	r3, [pc, #432]	; (8005654 <inicializarTrayectoria+0xa24>)
 80054a2:	ed93 5b00 	vldr	d5, [r3]
 80054a6:	ed97 7b00 	vldr	d7, [r7]
 80054aa:	ee85 6b07 	vdiv.f64	d6, d5, d7
 80054ae:	4b6c      	ldr	r3, [pc, #432]	; (8005660 <inicializarTrayectoria+0xa30>)
 80054b0:	ed93 7b00 	vldr	d7, [r3]
 80054b4:	ee26 6b07 	vmul.f64	d6, d6, d7
 80054b8:	4b6b      	ldr	r3, [pc, #428]	; (8005668 <inicializarTrayectoria+0xa38>)
 80054ba:	ed93 7b00 	vldr	d7, [r3]
 80054be:	ee36 8b07 	vadd.f64	d8, d6, d7
					- (pow(Af, 3) / (6 * (pow(-Jerk, 2))));
 80054c2:	4b64      	ldr	r3, [pc, #400]	; (8005654 <inicializarTrayectoria+0xa24>)
 80054c4:	ed93 7b00 	vldr	d7, [r3]
 80054c8:	eeb0 1b08 	vmov.f64	d1, #8	; 0x40400000  3.0
 80054cc:	eeb0 0b47 	vmov.f64	d0, d7
 80054d0:	f00c fbba 	bl	8011c48 <pow>
 80054d4:	eeb0 9b40 	vmov.f64	d9, d0
 80054d8:	ed97 7b00 	vldr	d7, [r7]
 80054dc:	eeb1 7b47 	vneg.f64	d7, d7
 80054e0:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 80054e4:	eeb0 0b47 	vmov.f64	d0, d7
 80054e8:	f00c fbae 	bl	8011c48 <pow>
 80054ec:	eeb0 7b40 	vmov.f64	d7, d0
 80054f0:	eeb1 6b08 	vmov.f64	d6, #24	; 0x40c00000  6.0
 80054f4:	ee27 6b06 	vmul.f64	d6, d7, d6
 80054f8:	ee89 7b06 	vdiv.f64	d7, d9, d6
 80054fc:	ee38 7b47 	vsub.f64	d7, d8, d7
			XiHip3 = XfHip3 - Vm * (Af / (-Jerk))
 8005500:	4b5a      	ldr	r3, [pc, #360]	; (800566c <inicializarTrayectoria+0xa3c>)
 8005502:	ed83 7b00 	vstr	d7, [r3]
			tiHip3 = fabs((XiHip3 - XfHip2) / Vm) + tfHip2;
 8005506:	4b59      	ldr	r3, [pc, #356]	; (800566c <inicializarTrayectoria+0xa3c>)
 8005508:	ed93 6b00 	vldr	d6, [r3]
 800550c:	4b58      	ldr	r3, [pc, #352]	; (8005670 <inicializarTrayectoria+0xa40>)
 800550e:	ed93 7b00 	vldr	d7, [r3]
 8005512:	ee36 5b47 	vsub.f64	d5, d6, d7
 8005516:	4b52      	ldr	r3, [pc, #328]	; (8005660 <inicializarTrayectoria+0xa30>)
 8005518:	ed93 6b00 	vldr	d6, [r3]
 800551c:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8005520:	eeb0 6bc7 	vabs.f64	d6, d7
 8005524:	4b53      	ldr	r3, [pc, #332]	; (8005674 <inicializarTrayectoria+0xa44>)
 8005526:	ed93 7b00 	vldr	d7, [r3]
 800552a:	ee36 7b07 	vadd.f64	d7, d6, d7
 800552e:	4b52      	ldr	r3, [pc, #328]	; (8005678 <inicializarTrayectoria+0xa48>)
 8005530:	ed83 7b00 	vstr	d7, [r3]
			//  Polinomio de 3° orden (Jerk cte, parabola en V, hiperbola en X)         HIPERBOLA 3
			a3Hip3 = (-Jerk / 6);
 8005534:	ed97 7b00 	vldr	d7, [r7]
 8005538:	eeb1 6b47 	vneg.f64	d6, d7
 800553c:	eeb1 5b08 	vmov.f64	d5, #24	; 0x40c00000  6.0
 8005540:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8005544:	4b4d      	ldr	r3, [pc, #308]	; (800567c <inicializarTrayectoria+0xa4c>)
 8005546:	ed83 7b00 	vstr	d7, [r3]
			a2Hip3 = 0;
 800554a:	494d      	ldr	r1, [pc, #308]	; (8005680 <inicializarTrayectoria+0xa50>)
 800554c:	f04f 0200 	mov.w	r2, #0
 8005550:	f04f 0300 	mov.w	r3, #0
 8005554:	e9c1 2300 	strd	r2, r3, [r1]
			tfHip3 = (Af / (-Jerk)) + tiHip3;
 8005558:	4b3e      	ldr	r3, [pc, #248]	; (8005654 <inicializarTrayectoria+0xa24>)
 800555a:	ed93 7b00 	vldr	d7, [r3]
 800555e:	eeb1 5b47 	vneg.f64	d5, d7
 8005562:	ed97 7b00 	vldr	d7, [r7]
 8005566:	ee85 6b07 	vdiv.f64	d6, d5, d7
 800556a:	4b43      	ldr	r3, [pc, #268]	; (8005678 <inicializarTrayectoria+0xa48>)
 800556c:	ed93 7b00 	vldr	d7, [r3]
 8005570:	ee36 7b07 	vadd.f64	d7, d6, d7
 8005574:	4b43      	ldr	r3, [pc, #268]	; (8005684 <inicializarTrayectoria+0xa54>)
 8005576:	ed83 7b00 	vstr	d7, [r3]
			a1Hip3 = Vm;
 800557a:	4b39      	ldr	r3, [pc, #228]	; (8005660 <inicializarTrayectoria+0xa30>)
 800557c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005580:	4941      	ldr	r1, [pc, #260]	; (8005688 <inicializarTrayectoria+0xa58>)
 8005582:	e9c1 2300 	strd	r2, r3, [r1]
			a0Hip3 = XiHip3;
 8005586:	4b39      	ldr	r3, [pc, #228]	; (800566c <inicializarTrayectoria+0xa3c>)
 8005588:	e9d3 2300 	ldrd	r2, r3, [r3]
 800558c:	493f      	ldr	r1, [pc, #252]	; (800568c <inicializarTrayectoria+0xa5c>)
 800558e:	e9c1 2300 	strd	r2, r3, [r1]
			// Polinomio de 2° orden (Acel cte, trapecio en V, parabola en X)           PARABOLA 2
			tiHip4 = ((ViHip4 - VfHip3) / Af) + tfHip3;
 8005592:	4b31      	ldr	r3, [pc, #196]	; (8005658 <inicializarTrayectoria+0xa28>)
 8005594:	ed93 6b00 	vldr	d6, [r3]
 8005598:	4b32      	ldr	r3, [pc, #200]	; (8005664 <inicializarTrayectoria+0xa34>)
 800559a:	ed93 7b00 	vldr	d7, [r3]
 800559e:	ee36 5b47 	vsub.f64	d5, d6, d7
 80055a2:	4b2c      	ldr	r3, [pc, #176]	; (8005654 <inicializarTrayectoria+0xa24>)
 80055a4:	ed93 7b00 	vldr	d7, [r3]
 80055a8:	ee85 6b07 	vdiv.f64	d6, d5, d7
 80055ac:	4b35      	ldr	r3, [pc, #212]	; (8005684 <inicializarTrayectoria+0xa54>)
 80055ae:	ed93 7b00 	vldr	d7, [r3]
 80055b2:	ee36 7b07 	vadd.f64	d7, d6, d7
 80055b6:	4b36      	ldr	r3, [pc, #216]	; (8005690 <inicializarTrayectoria+0xa60>)
 80055b8:	ed83 7b00 	vstr	d7, [r3]
			//  Polinomio de 3° orden (Jerk cte, parabola en V, hiperbola en X)         HIPERBOLA 4
			a3Hip4 = Jerk / 6;
 80055bc:	ed97 6b00 	vldr	d6, [r7]
 80055c0:	eeb1 5b08 	vmov.f64	d5, #24	; 0x40c00000  6.0
 80055c4:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80055c8:	4b32      	ldr	r3, [pc, #200]	; (8005694 <inicializarTrayectoria+0xa64>)
 80055ca:	ed83 7b00 	vstr	d7, [r3]
			a2Hip4 = Af / 2;
 80055ce:	4b21      	ldr	r3, [pc, #132]	; (8005654 <inicializarTrayectoria+0xa24>)
 80055d0:	ed93 6b00 	vldr	d6, [r3]
 80055d4:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 80055d8:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80055dc:	4b2e      	ldr	r3, [pc, #184]	; (8005698 <inicializarTrayectoria+0xa68>)
 80055de:	ed83 7b00 	vstr	d7, [r3]
			tfHip4 = fabs(Af / Jerk) + tiHip4;
 80055e2:	4b1c      	ldr	r3, [pc, #112]	; (8005654 <inicializarTrayectoria+0xa24>)
 80055e4:	ed93 5b00 	vldr	d5, [r3]
 80055e8:	ed97 6b00 	vldr	d6, [r7]
 80055ec:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80055f0:	eeb0 6bc7 	vabs.f64	d6, d7
 80055f4:	4b26      	ldr	r3, [pc, #152]	; (8005690 <inicializarTrayectoria+0xa60>)
 80055f6:	ed93 7b00 	vldr	d7, [r3]
 80055fa:	ee36 7b07 	vadd.f64	d7, d6, d7
 80055fe:	4b27      	ldr	r3, [pc, #156]	; (800569c <inicializarTrayectoria+0xa6c>)
 8005600:	ed83 7b00 	vstr	d7, [r3]
			a1Hip4 = ViHip4;
 8005604:	4b14      	ldr	r3, [pc, #80]	; (8005658 <inicializarTrayectoria+0xa28>)
 8005606:	e9d3 2300 	ldrd	r2, r3, [r3]
 800560a:	4925      	ldr	r1, [pc, #148]	; (80056a0 <inicializarTrayectoria+0xa70>)
 800560c:	e9c1 2300 	strd	r2, r3, [r1]
			a0Hip4 = XiHip4;
 8005610:	4b12      	ldr	r3, [pc, #72]	; (800565c <inicializarTrayectoria+0xa2c>)
 8005612:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005616:	4923      	ldr	r1, [pc, #140]	; (80056a4 <inicializarTrayectoria+0xa74>)
 8005618:	e9c1 2300 	strd	r2, r3, [r1]
			TiempoTotX = tfHip4;
 800561c:	4b1f      	ldr	r3, [pc, #124]	; (800569c <inicializarTrayectoria+0xa6c>)
 800561e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005622:	4921      	ldr	r1, [pc, #132]	; (80056a8 <inicializarTrayectoria+0xa78>)
 8005624:	e9c1 2300 	strd	r2, r3, [r1]
		}
		if (XiHip1 < XfHip4) {      // Por si va en un sentido o en el otro
 8005628:	ed97 6b0c 	vldr	d6, [r7, #48]	; 0x30
 800562c:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 8005630:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8005634:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005638:	d553      	bpl.n	80056e2 <inicializarTrayectoria+0xab2>
			if (XiHip3 < XfHip2) { // la superposicion de la hip 3 con la 2, acusa de que no se alcanzó la vel maxima
 800563a:	4b0c      	ldr	r3, [pc, #48]	; (800566c <inicializarTrayectoria+0xa3c>)
 800563c:	ed93 6b00 	vldr	d6, [r3]
 8005640:	4b0b      	ldr	r3, [pc, #44]	; (8005670 <inicializarTrayectoria+0xa40>)
 8005642:	ed93 7b00 	vldr	d7, [r3]
 8005646:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800564a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800564e:	d42d      	bmi.n	80056ac <inicializarTrayectoria+0xa7c>
				Vm = Vm - (Vmax * 0.01) * (Vm / fabs(Vm));
			} else {
				break;
 8005650:	e077      	b.n	8005742 <inicializarTrayectoria+0xb12>
 8005652:	bf00      	nop
 8005654:	24000a98 	.word	0x24000a98
 8005658:	24000bc0 	.word	0x24000bc0
 800565c:	24000bc8 	.word	0x24000bc8
 8005660:	24000b40 	.word	0x24000b40
 8005664:	24000b50 	.word	0x24000b50
 8005668:	24000b30 	.word	0x24000b30
 800566c:	24000b38 	.word	0x24000b38
 8005670:	24000b28 	.word	0x24000b28
 8005674:	24000b68 	.word	0x24000b68
 8005678:	24000b70 	.word	0x24000b70
 800567c:	24000af8 	.word	0x24000af8
 8005680:	24000af0 	.word	0x24000af0
 8005684:	24000b78 	.word	0x24000b78
 8005688:	24000ae8 	.word	0x24000ae8
 800568c:	24000ae0 	.word	0x24000ae0
 8005690:	24000b80 	.word	0x24000b80
 8005694:	24000b18 	.word	0x24000b18
 8005698:	24000b10 	.word	0x24000b10
 800569c:	24000b90 	.word	0x24000b90
 80056a0:	24000b08 	.word	0x24000b08
 80056a4:	24000b00 	.word	0x24000b00
 80056a8:	24000b88 	.word	0x24000b88
				Vm = Vm - (Vmax * 0.01) * (Vm / fabs(Vm));
 80056ac:	4b2e      	ldr	r3, [pc, #184]	; (8005768 <inicializarTrayectoria+0xb38>)
 80056ae:	ed93 6b00 	vldr	d6, [r3]
 80056b2:	ed97 7b04 	vldr	d7, [r7, #16]
 80056b6:	ed9f 5b2a 	vldr	d5, [pc, #168]	; 8005760 <inicializarTrayectoria+0xb30>
 80056ba:	ee27 5b05 	vmul.f64	d5, d7, d5
 80056be:	4b2a      	ldr	r3, [pc, #168]	; (8005768 <inicializarTrayectoria+0xb38>)
 80056c0:	ed93 3b00 	vldr	d3, [r3]
 80056c4:	4b28      	ldr	r3, [pc, #160]	; (8005768 <inicializarTrayectoria+0xb38>)
 80056c6:	ed93 7b00 	vldr	d7, [r3]
 80056ca:	eeb0 4bc7 	vabs.f64	d4, d7
 80056ce:	ee83 7b04 	vdiv.f64	d7, d3, d4
 80056d2:	ee25 7b07 	vmul.f64	d7, d5, d7
 80056d6:	ee36 7b47 	vsub.f64	d7, d6, d7
 80056da:	4b23      	ldr	r3, [pc, #140]	; (8005768 <inicializarTrayectoria+0xb38>)
 80056dc:	ed83 7b00 	vstr	d7, [r3]
 80056e0:	e025      	b.n	800572e <inicializarTrayectoria+0xafe>
			}
		} else {
			if (XiHip3 > XfHip2) { // la superposicion de la hip 3 con la 2, acusa de que no se alcanzó la vel maxima
 80056e2:	4b22      	ldr	r3, [pc, #136]	; (800576c <inicializarTrayectoria+0xb3c>)
 80056e4:	ed93 6b00 	vldr	d6, [r3]
 80056e8:	4b21      	ldr	r3, [pc, #132]	; (8005770 <inicializarTrayectoria+0xb40>)
 80056ea:	ed93 7b00 	vldr	d7, [r3]
 80056ee:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80056f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80056f6:	dc00      	bgt.n	80056fa <inicializarTrayectoria+0xaca>
				Vm = Vm - (Vmax * 0.01) * (Vm / fabs(Vm));
			} else {
				break;
 80056f8:	e023      	b.n	8005742 <inicializarTrayectoria+0xb12>
				Vm = Vm - (Vmax * 0.01) * (Vm / fabs(Vm));
 80056fa:	4b1b      	ldr	r3, [pc, #108]	; (8005768 <inicializarTrayectoria+0xb38>)
 80056fc:	ed93 6b00 	vldr	d6, [r3]
 8005700:	ed97 7b04 	vldr	d7, [r7, #16]
 8005704:	ed9f 5b16 	vldr	d5, [pc, #88]	; 8005760 <inicializarTrayectoria+0xb30>
 8005708:	ee27 5b05 	vmul.f64	d5, d7, d5
 800570c:	4b16      	ldr	r3, [pc, #88]	; (8005768 <inicializarTrayectoria+0xb38>)
 800570e:	ed93 3b00 	vldr	d3, [r3]
 8005712:	4b15      	ldr	r3, [pc, #84]	; (8005768 <inicializarTrayectoria+0xb38>)
 8005714:	ed93 7b00 	vldr	d7, [r3]
 8005718:	eeb0 4bc7 	vabs.f64	d4, d7
 800571c:	ee83 7b04 	vdiv.f64	d7, d3, d4
 8005720:	ee25 7b07 	vmul.f64	d7, d5, d7
 8005724:	ee36 7b47 	vsub.f64	d7, d6, d7
 8005728:	4b0f      	ldr	r3, [pc, #60]	; (8005768 <inicializarTrayectoria+0xb38>)
 800572a:	ed83 7b00 	vstr	d7, [r3]
	for (uint8_t Iteracion = 0; Iteracion < 100; Iteracion++) { // Itero 40 veces, solo en caso de que no se alcance la vel maxima, sino salgo
 800572e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8005732:	3301      	adds	r3, #1
 8005734:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8005738:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800573c:	2b63      	cmp	r3, #99	; 0x63
 800573e:	f67f aaf6 	bls.w	8004d2e <inicializarTrayectoria+0xfe>
			}
		}
	}
	TiempoTotal = tfHip4;
 8005742:	4b0c      	ldr	r3, [pc, #48]	; (8005774 <inicializarTrayectoria+0xb44>)
 8005744:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005748:	490b      	ldr	r1, [pc, #44]	; (8005778 <inicializarTrayectoria+0xb48>)
 800574a:	e9c1 2300 	strd	r2, r3, [r1]
}
 800574e:	bf00      	nop
 8005750:	3740      	adds	r7, #64	; 0x40
 8005752:	46bd      	mov	sp, r7
 8005754:	ecbd 8b04 	vpop	{d8-d9}
 8005758:	bd80      	pop	{r7, pc}
 800575a:	bf00      	nop
 800575c:	f3af 8000 	nop.w
 8005760:	47ae147b 	.word	0x47ae147b
 8005764:	3f847ae1 	.word	0x3f847ae1
 8005768:	24000b40 	.word	0x24000b40
 800576c:	24000b38 	.word	0x24000b38
 8005770:	24000b28 	.word	0x24000b28
 8005774:	24000b90 	.word	0x24000b90
 8005778:	24000488 	.word	0x24000488

0800577c <obtenerVelCurva>:

void obtenerVelCurva(double t) {
 800577c:	b580      	push	{r7, lr}
 800577e:	ed2d 8b04 	vpush	{d8-d9}
 8005782:	b082      	sub	sp, #8
 8005784:	af00      	add	r7, sp, #0
 8005786:	ed87 0b00 	vstr	d0, [r7]
	/*   -----------------------------------------------------------------------
	 * 	 Funcion que devuelve la velocidad de la trayectoria en un instante dado
	 *	 Entrada: tiempo actual,
	 *	 Salida:  velocidad lineal en m/s en el instante de tiempo t
	 -----------------------------------------------------------------------*/
	if (t <= tfHip1) {                                      // Hiperbola 1
 800578a:	4bc3      	ldr	r3, [pc, #780]	; (8005a98 <obtenerVelCurva+0x31c>)
 800578c:	ed93 7b00 	vldr	d7, [r3]
 8005790:	ed97 6b00 	vldr	d6, [r7]
 8005794:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8005798:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800579c:	d866      	bhi.n	800586c <obtenerVelCurva+0xf0>
		X = a0Hip1 + a1Hip1 * t + a2Hip1 * pow(t, 2) + a3Hip1 * pow(t, 3);
 800579e:	4bbf      	ldr	r3, [pc, #764]	; (8005a9c <obtenerVelCurva+0x320>)
 80057a0:	ed93 6b00 	vldr	d6, [r3]
 80057a4:	ed97 7b00 	vldr	d7, [r7]
 80057a8:	ee26 6b07 	vmul.f64	d6, d6, d7
 80057ac:	4bbc      	ldr	r3, [pc, #752]	; (8005aa0 <obtenerVelCurva+0x324>)
 80057ae:	ed93 7b00 	vldr	d7, [r3]
 80057b2:	ee36 8b07 	vadd.f64	d8, d6, d7
 80057b6:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 80057ba:	ed97 0b00 	vldr	d0, [r7]
 80057be:	f00c fa43 	bl	8011c48 <pow>
 80057c2:	eeb0 6b40 	vmov.f64	d6, d0
 80057c6:	4bb7      	ldr	r3, [pc, #732]	; (8005aa4 <obtenerVelCurva+0x328>)
 80057c8:	ed93 7b00 	vldr	d7, [r3]
 80057cc:	ee26 7b07 	vmul.f64	d7, d6, d7
 80057d0:	ee38 8b07 	vadd.f64	d8, d8, d7
 80057d4:	eeb0 1b08 	vmov.f64	d1, #8	; 0x40400000  3.0
 80057d8:	ed97 0b00 	vldr	d0, [r7]
 80057dc:	f00c fa34 	bl	8011c48 <pow>
 80057e0:	eeb0 6b40 	vmov.f64	d6, d0
 80057e4:	4bb0      	ldr	r3, [pc, #704]	; (8005aa8 <obtenerVelCurva+0x32c>)
 80057e6:	ed93 7b00 	vldr	d7, [r3]
 80057ea:	ee26 7b07 	vmul.f64	d7, d6, d7
 80057ee:	ee38 7b07 	vadd.f64	d7, d8, d7
 80057f2:	4bae      	ldr	r3, [pc, #696]	; (8005aac <obtenerVelCurva+0x330>)
 80057f4:	ed83 7b00 	vstr	d7, [r3]
		DX = a1Hip1 + 2.0 * a2Hip1 * t + 3 * a3Hip1 * pow(t, 2);
 80057f8:	4baa      	ldr	r3, [pc, #680]	; (8005aa4 <obtenerVelCurva+0x328>)
 80057fa:	ed93 7b00 	vldr	d7, [r3]
 80057fe:	ee37 6b07 	vadd.f64	d6, d7, d7
 8005802:	ed97 7b00 	vldr	d7, [r7]
 8005806:	ee26 6b07 	vmul.f64	d6, d6, d7
 800580a:	4ba4      	ldr	r3, [pc, #656]	; (8005a9c <obtenerVelCurva+0x320>)
 800580c:	ed93 7b00 	vldr	d7, [r3]
 8005810:	ee36 8b07 	vadd.f64	d8, d6, d7
 8005814:	4ba4      	ldr	r3, [pc, #656]	; (8005aa8 <obtenerVelCurva+0x32c>)
 8005816:	ed93 7b00 	vldr	d7, [r3]
 800581a:	eeb0 6b08 	vmov.f64	d6, #8	; 0x40400000  3.0
 800581e:	ee27 9b06 	vmul.f64	d9, d7, d6
 8005822:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8005826:	ed97 0b00 	vldr	d0, [r7]
 800582a:	f00c fa0d 	bl	8011c48 <pow>
 800582e:	eeb0 7b40 	vmov.f64	d7, d0
 8005832:	ee29 7b07 	vmul.f64	d7, d9, d7
 8005836:	ee38 7b07 	vadd.f64	d7, d8, d7
 800583a:	4b9d      	ldr	r3, [pc, #628]	; (8005ab0 <obtenerVelCurva+0x334>)
 800583c:	ed83 7b00 	vstr	d7, [r3]
		DDX = 2.0 * a2Hip1 + 6 * a3Hip1 * t;
 8005840:	4b98      	ldr	r3, [pc, #608]	; (8005aa4 <obtenerVelCurva+0x328>)
 8005842:	ed93 7b00 	vldr	d7, [r3]
 8005846:	ee37 6b07 	vadd.f64	d6, d7, d7
 800584a:	4b97      	ldr	r3, [pc, #604]	; (8005aa8 <obtenerVelCurva+0x32c>)
 800584c:	ed93 7b00 	vldr	d7, [r3]
 8005850:	eeb1 5b08 	vmov.f64	d5, #24	; 0x40c00000  6.0
 8005854:	ee27 5b05 	vmul.f64	d5, d7, d5
 8005858:	ed97 7b00 	vldr	d7, [r7]
 800585c:	ee25 7b07 	vmul.f64	d7, d5, d7
 8005860:	ee36 7b07 	vadd.f64	d7, d6, d7
 8005864:	4b93      	ldr	r3, [pc, #588]	; (8005ab4 <obtenerVelCurva+0x338>)
 8005866:	ed83 7b00 	vstr	d7, [r3]
		X = 0;
		DX = 0;
		DDX = 0;
	}

}
 800586a:	e30e      	b.n	8005e8a <obtenerVelCurva+0x70e>
	} else if (t <= (tiHip2)) {                              // Parabola 1
 800586c:	4b92      	ldr	r3, [pc, #584]	; (8005ab8 <obtenerVelCurva+0x33c>)
 800586e:	ed93 7b00 	vldr	d7, [r3]
 8005872:	ed97 6b00 	vldr	d6, [r7]
 8005876:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800587a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800587e:	d848      	bhi.n	8005912 <obtenerVelCurva+0x196>
		X = (Ai / 2) * pow((t - tfHip1), 2) + VfHip1 * (t - tfHip1) + XfHip1;
 8005880:	4b8e      	ldr	r3, [pc, #568]	; (8005abc <obtenerVelCurva+0x340>)
 8005882:	ed93 7b00 	vldr	d7, [r3]
 8005886:	eeb0 6b00 	vmov.f64	d6, #0	; 0x40000000  2.0
 800588a:	ee87 8b06 	vdiv.f64	d8, d7, d6
 800588e:	4b82      	ldr	r3, [pc, #520]	; (8005a98 <obtenerVelCurva+0x31c>)
 8005890:	ed93 7b00 	vldr	d7, [r3]
 8005894:	ed97 6b00 	vldr	d6, [r7]
 8005898:	ee36 7b47 	vsub.f64	d7, d6, d7
 800589c:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 80058a0:	eeb0 0b47 	vmov.f64	d0, d7
 80058a4:	f00c f9d0 	bl	8011c48 <pow>
 80058a8:	eeb0 7b40 	vmov.f64	d7, d0
 80058ac:	ee28 6b07 	vmul.f64	d6, d8, d7
 80058b0:	4b79      	ldr	r3, [pc, #484]	; (8005a98 <obtenerVelCurva+0x31c>)
 80058b2:	ed93 7b00 	vldr	d7, [r3]
 80058b6:	ed97 5b00 	vldr	d5, [r7]
 80058ba:	ee35 5b47 	vsub.f64	d5, d5, d7
 80058be:	4b80      	ldr	r3, [pc, #512]	; (8005ac0 <obtenerVelCurva+0x344>)
 80058c0:	ed93 7b00 	vldr	d7, [r3]
 80058c4:	ee25 7b07 	vmul.f64	d7, d5, d7
 80058c8:	ee36 6b07 	vadd.f64	d6, d6, d7
 80058cc:	4b7d      	ldr	r3, [pc, #500]	; (8005ac4 <obtenerVelCurva+0x348>)
 80058ce:	ed93 7b00 	vldr	d7, [r3]
 80058d2:	ee36 7b07 	vadd.f64	d7, d6, d7
 80058d6:	4b75      	ldr	r3, [pc, #468]	; (8005aac <obtenerVelCurva+0x330>)
 80058d8:	ed83 7b00 	vstr	d7, [r3]
		DX = Ai * (t - tfHip1) + VfHip1;
 80058dc:	4b6e      	ldr	r3, [pc, #440]	; (8005a98 <obtenerVelCurva+0x31c>)
 80058de:	ed93 7b00 	vldr	d7, [r3]
 80058e2:	ed97 6b00 	vldr	d6, [r7]
 80058e6:	ee36 6b47 	vsub.f64	d6, d6, d7
 80058ea:	4b74      	ldr	r3, [pc, #464]	; (8005abc <obtenerVelCurva+0x340>)
 80058ec:	ed93 7b00 	vldr	d7, [r3]
 80058f0:	ee26 6b07 	vmul.f64	d6, d6, d7
 80058f4:	4b72      	ldr	r3, [pc, #456]	; (8005ac0 <obtenerVelCurva+0x344>)
 80058f6:	ed93 7b00 	vldr	d7, [r3]
 80058fa:	ee36 7b07 	vadd.f64	d7, d6, d7
 80058fe:	4b6c      	ldr	r3, [pc, #432]	; (8005ab0 <obtenerVelCurva+0x334>)
 8005900:	ed83 7b00 	vstr	d7, [r3]
		DDX = Ai;
 8005904:	4b6d      	ldr	r3, [pc, #436]	; (8005abc <obtenerVelCurva+0x340>)
 8005906:	e9d3 2300 	ldrd	r2, r3, [r3]
 800590a:	496a      	ldr	r1, [pc, #424]	; (8005ab4 <obtenerVelCurva+0x338>)
 800590c:	e9c1 2300 	strd	r2, r3, [r1]
}
 8005910:	e2bb      	b.n	8005e8a <obtenerVelCurva+0x70e>
	} else if (t <= (tfHip2)) {                            // Hiperbola 2
 8005912:	4b6d      	ldr	r3, [pc, #436]	; (8005ac8 <obtenerVelCurva+0x34c>)
 8005914:	ed93 7b00 	vldr	d7, [r3]
 8005918:	ed97 6b00 	vldr	d6, [r7]
 800591c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8005920:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005924:	f200 808b 	bhi.w	8005a3e <obtenerVelCurva+0x2c2>
		X = a0Hip2 + a1Hip2 * (t - tiHip2) + a2Hip2 * pow((t - tiHip2), 2)
 8005928:	4b63      	ldr	r3, [pc, #396]	; (8005ab8 <obtenerVelCurva+0x33c>)
 800592a:	ed93 7b00 	vldr	d7, [r3]
 800592e:	ed97 6b00 	vldr	d6, [r7]
 8005932:	ee36 6b47 	vsub.f64	d6, d6, d7
 8005936:	4b65      	ldr	r3, [pc, #404]	; (8005acc <obtenerVelCurva+0x350>)
 8005938:	ed93 7b00 	vldr	d7, [r3]
 800593c:	ee26 6b07 	vmul.f64	d6, d6, d7
 8005940:	4b63      	ldr	r3, [pc, #396]	; (8005ad0 <obtenerVelCurva+0x354>)
 8005942:	ed93 7b00 	vldr	d7, [r3]
 8005946:	ee36 8b07 	vadd.f64	d8, d6, d7
 800594a:	4b5b      	ldr	r3, [pc, #364]	; (8005ab8 <obtenerVelCurva+0x33c>)
 800594c:	ed93 7b00 	vldr	d7, [r3]
 8005950:	ed97 6b00 	vldr	d6, [r7]
 8005954:	ee36 7b47 	vsub.f64	d7, d6, d7
 8005958:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 800595c:	eeb0 0b47 	vmov.f64	d0, d7
 8005960:	f00c f972 	bl	8011c48 <pow>
 8005964:	eeb0 6b40 	vmov.f64	d6, d0
 8005968:	4b5a      	ldr	r3, [pc, #360]	; (8005ad4 <obtenerVelCurva+0x358>)
 800596a:	ed93 7b00 	vldr	d7, [r3]
 800596e:	ee26 7b07 	vmul.f64	d7, d6, d7
 8005972:	ee38 8b07 	vadd.f64	d8, d8, d7
				+ a3Hip2 * pow((t - tiHip2), 3);
 8005976:	4b50      	ldr	r3, [pc, #320]	; (8005ab8 <obtenerVelCurva+0x33c>)
 8005978:	ed93 7b00 	vldr	d7, [r3]
 800597c:	ed97 6b00 	vldr	d6, [r7]
 8005980:	ee36 7b47 	vsub.f64	d7, d6, d7
 8005984:	eeb0 1b08 	vmov.f64	d1, #8	; 0x40400000  3.0
 8005988:	eeb0 0b47 	vmov.f64	d0, d7
 800598c:	f00c f95c 	bl	8011c48 <pow>
 8005990:	eeb0 6b40 	vmov.f64	d6, d0
 8005994:	4b50      	ldr	r3, [pc, #320]	; (8005ad8 <obtenerVelCurva+0x35c>)
 8005996:	ed93 7b00 	vldr	d7, [r3]
 800599a:	ee26 7b07 	vmul.f64	d7, d6, d7
 800599e:	ee38 7b07 	vadd.f64	d7, d8, d7
		X = a0Hip2 + a1Hip2 * (t - tiHip2) + a2Hip2 * pow((t - tiHip2), 2)
 80059a2:	4b42      	ldr	r3, [pc, #264]	; (8005aac <obtenerVelCurva+0x330>)
 80059a4:	ed83 7b00 	vstr	d7, [r3]
		DX = a1Hip2 + 2.0 * a2Hip2 * (t - tiHip2)
 80059a8:	4b4a      	ldr	r3, [pc, #296]	; (8005ad4 <obtenerVelCurva+0x358>)
 80059aa:	ed93 7b00 	vldr	d7, [r3]
 80059ae:	ee37 6b07 	vadd.f64	d6, d7, d7
 80059b2:	4b41      	ldr	r3, [pc, #260]	; (8005ab8 <obtenerVelCurva+0x33c>)
 80059b4:	ed93 7b00 	vldr	d7, [r3]
 80059b8:	ed97 5b00 	vldr	d5, [r7]
 80059bc:	ee35 7b47 	vsub.f64	d7, d5, d7
 80059c0:	ee26 6b07 	vmul.f64	d6, d6, d7
 80059c4:	4b41      	ldr	r3, [pc, #260]	; (8005acc <obtenerVelCurva+0x350>)
 80059c6:	ed93 7b00 	vldr	d7, [r3]
 80059ca:	ee36 8b07 	vadd.f64	d8, d6, d7
				+ 3 * a3Hip2 * pow((t - tiHip2), 2);
 80059ce:	4b42      	ldr	r3, [pc, #264]	; (8005ad8 <obtenerVelCurva+0x35c>)
 80059d0:	ed93 7b00 	vldr	d7, [r3]
 80059d4:	eeb0 6b08 	vmov.f64	d6, #8	; 0x40400000  3.0
 80059d8:	ee27 9b06 	vmul.f64	d9, d7, d6
 80059dc:	4b36      	ldr	r3, [pc, #216]	; (8005ab8 <obtenerVelCurva+0x33c>)
 80059de:	ed93 7b00 	vldr	d7, [r3]
 80059e2:	ed97 6b00 	vldr	d6, [r7]
 80059e6:	ee36 7b47 	vsub.f64	d7, d6, d7
 80059ea:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 80059ee:	eeb0 0b47 	vmov.f64	d0, d7
 80059f2:	f00c f929 	bl	8011c48 <pow>
 80059f6:	eeb0 7b40 	vmov.f64	d7, d0
 80059fa:	ee29 7b07 	vmul.f64	d7, d9, d7
 80059fe:	ee38 7b07 	vadd.f64	d7, d8, d7
		DX = a1Hip2 + 2.0 * a2Hip2 * (t - tiHip2)
 8005a02:	4b2b      	ldr	r3, [pc, #172]	; (8005ab0 <obtenerVelCurva+0x334>)
 8005a04:	ed83 7b00 	vstr	d7, [r3]
		DDX = 2.0 * a2Hip2 + 6 * a3Hip2 * (t - tiHip2);
 8005a08:	4b32      	ldr	r3, [pc, #200]	; (8005ad4 <obtenerVelCurva+0x358>)
 8005a0a:	ed93 7b00 	vldr	d7, [r3]
 8005a0e:	ee37 6b07 	vadd.f64	d6, d7, d7
 8005a12:	4b31      	ldr	r3, [pc, #196]	; (8005ad8 <obtenerVelCurva+0x35c>)
 8005a14:	ed93 7b00 	vldr	d7, [r3]
 8005a18:	eeb1 5b08 	vmov.f64	d5, #24	; 0x40c00000  6.0
 8005a1c:	ee27 5b05 	vmul.f64	d5, d7, d5
 8005a20:	4b25      	ldr	r3, [pc, #148]	; (8005ab8 <obtenerVelCurva+0x33c>)
 8005a22:	ed93 7b00 	vldr	d7, [r3]
 8005a26:	ed97 4b00 	vldr	d4, [r7]
 8005a2a:	ee34 7b47 	vsub.f64	d7, d4, d7
 8005a2e:	ee25 7b07 	vmul.f64	d7, d5, d7
 8005a32:	ee36 7b07 	vadd.f64	d7, d6, d7
 8005a36:	4b1f      	ldr	r3, [pc, #124]	; (8005ab4 <obtenerVelCurva+0x338>)
 8005a38:	ed83 7b00 	vstr	d7, [r3]
}
 8005a3c:	e225      	b.n	8005e8a <obtenerVelCurva+0x70e>
	} else if (t <= (tiHip3)) {                              // Recta
 8005a3e:	4b27      	ldr	r3, [pc, #156]	; (8005adc <obtenerVelCurva+0x360>)
 8005a40:	ed93 7b00 	vldr	d7, [r3]
 8005a44:	ed97 6b00 	vldr	d6, [r7]
 8005a48:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8005a4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005a50:	d84a      	bhi.n	8005ae8 <obtenerVelCurva+0x36c>
		X = Vm * (t - tfHip2) + XfHip2;
 8005a52:	4b1d      	ldr	r3, [pc, #116]	; (8005ac8 <obtenerVelCurva+0x34c>)
 8005a54:	ed93 7b00 	vldr	d7, [r3]
 8005a58:	ed97 6b00 	vldr	d6, [r7]
 8005a5c:	ee36 6b47 	vsub.f64	d6, d6, d7
 8005a60:	4b1f      	ldr	r3, [pc, #124]	; (8005ae0 <obtenerVelCurva+0x364>)
 8005a62:	ed93 7b00 	vldr	d7, [r3]
 8005a66:	ee26 6b07 	vmul.f64	d6, d6, d7
 8005a6a:	4b1e      	ldr	r3, [pc, #120]	; (8005ae4 <obtenerVelCurva+0x368>)
 8005a6c:	ed93 7b00 	vldr	d7, [r3]
 8005a70:	ee36 7b07 	vadd.f64	d7, d6, d7
 8005a74:	4b0d      	ldr	r3, [pc, #52]	; (8005aac <obtenerVelCurva+0x330>)
 8005a76:	ed83 7b00 	vstr	d7, [r3]
		DX = Vm;
 8005a7a:	4b19      	ldr	r3, [pc, #100]	; (8005ae0 <obtenerVelCurva+0x364>)
 8005a7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a80:	490b      	ldr	r1, [pc, #44]	; (8005ab0 <obtenerVelCurva+0x334>)
 8005a82:	e9c1 2300 	strd	r2, r3, [r1]
		DDX = 0;
 8005a86:	490b      	ldr	r1, [pc, #44]	; (8005ab4 <obtenerVelCurva+0x338>)
 8005a88:	f04f 0200 	mov.w	r2, #0
 8005a8c:	f04f 0300 	mov.w	r3, #0
 8005a90:	e9c1 2300 	strd	r2, r3, [r1]
}
 8005a94:	e1f9      	b.n	8005e8a <obtenerVelCurva+0x70e>
 8005a96:	bf00      	nop
 8005a98:	24000b58 	.word	0x24000b58
 8005a9c:	24000aa8 	.word	0x24000aa8
 8005aa0:	24000aa0 	.word	0x24000aa0
 8005aa4:	24000ab0 	.word	0x24000ab0
 8005aa8:	24000ab8 	.word	0x24000ab8
 8005aac:	240004c0 	.word	0x240004c0
 8005ab0:	240004c8 	.word	0x240004c8
 8005ab4:	240004d0 	.word	0x240004d0
 8005ab8:	24000b60 	.word	0x24000b60
 8005abc:	24000a90 	.word	0x24000a90
 8005ac0:	24000b48 	.word	0x24000b48
 8005ac4:	24000b20 	.word	0x24000b20
 8005ac8:	24000b68 	.word	0x24000b68
 8005acc:	24000ac8 	.word	0x24000ac8
 8005ad0:	24000ac0 	.word	0x24000ac0
 8005ad4:	24000ad0 	.word	0x24000ad0
 8005ad8:	24000ad8 	.word	0x24000ad8
 8005adc:	24000b70 	.word	0x24000b70
 8005ae0:	24000b40 	.word	0x24000b40
 8005ae4:	24000b28 	.word	0x24000b28
	} else if (t <= (tfHip3)) {                            // Hiperbola 3
 8005ae8:	4bcb      	ldr	r3, [pc, #812]	; (8005e18 <obtenerVelCurva+0x69c>)
 8005aea:	ed93 7b00 	vldr	d7, [r3]
 8005aee:	ed97 6b00 	vldr	d6, [r7]
 8005af2:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8005af6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005afa:	f200 808b 	bhi.w	8005c14 <obtenerVelCurva+0x498>
		X = a0Hip3 + a1Hip3 * (t - tiHip3) + a2Hip3 * pow((t - tiHip3), 2)
 8005afe:	4bc7      	ldr	r3, [pc, #796]	; (8005e1c <obtenerVelCurva+0x6a0>)
 8005b00:	ed93 7b00 	vldr	d7, [r3]
 8005b04:	ed97 6b00 	vldr	d6, [r7]
 8005b08:	ee36 6b47 	vsub.f64	d6, d6, d7
 8005b0c:	4bc4      	ldr	r3, [pc, #784]	; (8005e20 <obtenerVelCurva+0x6a4>)
 8005b0e:	ed93 7b00 	vldr	d7, [r3]
 8005b12:	ee26 6b07 	vmul.f64	d6, d6, d7
 8005b16:	4bc3      	ldr	r3, [pc, #780]	; (8005e24 <obtenerVelCurva+0x6a8>)
 8005b18:	ed93 7b00 	vldr	d7, [r3]
 8005b1c:	ee36 8b07 	vadd.f64	d8, d6, d7
 8005b20:	4bbe      	ldr	r3, [pc, #760]	; (8005e1c <obtenerVelCurva+0x6a0>)
 8005b22:	ed93 7b00 	vldr	d7, [r3]
 8005b26:	ed97 6b00 	vldr	d6, [r7]
 8005b2a:	ee36 7b47 	vsub.f64	d7, d6, d7
 8005b2e:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8005b32:	eeb0 0b47 	vmov.f64	d0, d7
 8005b36:	f00c f887 	bl	8011c48 <pow>
 8005b3a:	eeb0 6b40 	vmov.f64	d6, d0
 8005b3e:	4bba      	ldr	r3, [pc, #744]	; (8005e28 <obtenerVelCurva+0x6ac>)
 8005b40:	ed93 7b00 	vldr	d7, [r3]
 8005b44:	ee26 7b07 	vmul.f64	d7, d6, d7
 8005b48:	ee38 8b07 	vadd.f64	d8, d8, d7
				+ a3Hip3 * pow((t - tiHip3), 3);
 8005b4c:	4bb3      	ldr	r3, [pc, #716]	; (8005e1c <obtenerVelCurva+0x6a0>)
 8005b4e:	ed93 7b00 	vldr	d7, [r3]
 8005b52:	ed97 6b00 	vldr	d6, [r7]
 8005b56:	ee36 7b47 	vsub.f64	d7, d6, d7
 8005b5a:	eeb0 1b08 	vmov.f64	d1, #8	; 0x40400000  3.0
 8005b5e:	eeb0 0b47 	vmov.f64	d0, d7
 8005b62:	f00c f871 	bl	8011c48 <pow>
 8005b66:	eeb0 6b40 	vmov.f64	d6, d0
 8005b6a:	4bb0      	ldr	r3, [pc, #704]	; (8005e2c <obtenerVelCurva+0x6b0>)
 8005b6c:	ed93 7b00 	vldr	d7, [r3]
 8005b70:	ee26 7b07 	vmul.f64	d7, d6, d7
 8005b74:	ee38 7b07 	vadd.f64	d7, d8, d7
		X = a0Hip3 + a1Hip3 * (t - tiHip3) + a2Hip3 * pow((t - tiHip3), 2)
 8005b78:	4bad      	ldr	r3, [pc, #692]	; (8005e30 <obtenerVelCurva+0x6b4>)
 8005b7a:	ed83 7b00 	vstr	d7, [r3]
		DX = a1Hip3 + 2.0 * a2Hip3 * (t - tiHip3)
 8005b7e:	4baa      	ldr	r3, [pc, #680]	; (8005e28 <obtenerVelCurva+0x6ac>)
 8005b80:	ed93 7b00 	vldr	d7, [r3]
 8005b84:	ee37 6b07 	vadd.f64	d6, d7, d7
 8005b88:	4ba4      	ldr	r3, [pc, #656]	; (8005e1c <obtenerVelCurva+0x6a0>)
 8005b8a:	ed93 7b00 	vldr	d7, [r3]
 8005b8e:	ed97 5b00 	vldr	d5, [r7]
 8005b92:	ee35 7b47 	vsub.f64	d7, d5, d7
 8005b96:	ee26 6b07 	vmul.f64	d6, d6, d7
 8005b9a:	4ba1      	ldr	r3, [pc, #644]	; (8005e20 <obtenerVelCurva+0x6a4>)
 8005b9c:	ed93 7b00 	vldr	d7, [r3]
 8005ba0:	ee36 8b07 	vadd.f64	d8, d6, d7
				+ 3 * a3Hip3 * pow((t - tiHip3), 2);
 8005ba4:	4ba1      	ldr	r3, [pc, #644]	; (8005e2c <obtenerVelCurva+0x6b0>)
 8005ba6:	ed93 7b00 	vldr	d7, [r3]
 8005baa:	eeb0 6b08 	vmov.f64	d6, #8	; 0x40400000  3.0
 8005bae:	ee27 9b06 	vmul.f64	d9, d7, d6
 8005bb2:	4b9a      	ldr	r3, [pc, #616]	; (8005e1c <obtenerVelCurva+0x6a0>)
 8005bb4:	ed93 7b00 	vldr	d7, [r3]
 8005bb8:	ed97 6b00 	vldr	d6, [r7]
 8005bbc:	ee36 7b47 	vsub.f64	d7, d6, d7
 8005bc0:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8005bc4:	eeb0 0b47 	vmov.f64	d0, d7
 8005bc8:	f00c f83e 	bl	8011c48 <pow>
 8005bcc:	eeb0 7b40 	vmov.f64	d7, d0
 8005bd0:	ee29 7b07 	vmul.f64	d7, d9, d7
 8005bd4:	ee38 7b07 	vadd.f64	d7, d8, d7
		DX = a1Hip3 + 2.0 * a2Hip3 * (t - tiHip3)
 8005bd8:	4b96      	ldr	r3, [pc, #600]	; (8005e34 <obtenerVelCurva+0x6b8>)
 8005bda:	ed83 7b00 	vstr	d7, [r3]
		DDX = 2.0 * a2Hip3 + 6 * a3Hip3 * (t - tiHip3);
 8005bde:	4b92      	ldr	r3, [pc, #584]	; (8005e28 <obtenerVelCurva+0x6ac>)
 8005be0:	ed93 7b00 	vldr	d7, [r3]
 8005be4:	ee37 6b07 	vadd.f64	d6, d7, d7
 8005be8:	4b90      	ldr	r3, [pc, #576]	; (8005e2c <obtenerVelCurva+0x6b0>)
 8005bea:	ed93 7b00 	vldr	d7, [r3]
 8005bee:	eeb1 5b08 	vmov.f64	d5, #24	; 0x40c00000  6.0
 8005bf2:	ee27 5b05 	vmul.f64	d5, d7, d5
 8005bf6:	4b89      	ldr	r3, [pc, #548]	; (8005e1c <obtenerVelCurva+0x6a0>)
 8005bf8:	ed93 7b00 	vldr	d7, [r3]
 8005bfc:	ed97 4b00 	vldr	d4, [r7]
 8005c00:	ee34 7b47 	vsub.f64	d7, d4, d7
 8005c04:	ee25 7b07 	vmul.f64	d7, d5, d7
 8005c08:	ee36 7b07 	vadd.f64	d7, d6, d7
 8005c0c:	4b8a      	ldr	r3, [pc, #552]	; (8005e38 <obtenerVelCurva+0x6bc>)
 8005c0e:	ed83 7b00 	vstr	d7, [r3]
}
 8005c12:	e13a      	b.n	8005e8a <obtenerVelCurva+0x70e>
	} else if (t <= (tiHip4)) {                            // Parabola 2
 8005c14:	4b89      	ldr	r3, [pc, #548]	; (8005e3c <obtenerVelCurva+0x6c0>)
 8005c16:	ed93 7b00 	vldr	d7, [r3]
 8005c1a:	ed97 6b00 	vldr	d6, [r7]
 8005c1e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8005c22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005c26:	d848      	bhi.n	8005cba <obtenerVelCurva+0x53e>
		X = (Af / 2) * pow((t - tfHip3), 2) + VfHip3 * (t - tfHip3) + XfHip3;
 8005c28:	4b85      	ldr	r3, [pc, #532]	; (8005e40 <obtenerVelCurva+0x6c4>)
 8005c2a:	ed93 7b00 	vldr	d7, [r3]
 8005c2e:	eeb0 6b00 	vmov.f64	d6, #0	; 0x40000000  2.0
 8005c32:	ee87 8b06 	vdiv.f64	d8, d7, d6
 8005c36:	4b78      	ldr	r3, [pc, #480]	; (8005e18 <obtenerVelCurva+0x69c>)
 8005c38:	ed93 7b00 	vldr	d7, [r3]
 8005c3c:	ed97 6b00 	vldr	d6, [r7]
 8005c40:	ee36 7b47 	vsub.f64	d7, d6, d7
 8005c44:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8005c48:	eeb0 0b47 	vmov.f64	d0, d7
 8005c4c:	f00b fffc 	bl	8011c48 <pow>
 8005c50:	eeb0 7b40 	vmov.f64	d7, d0
 8005c54:	ee28 6b07 	vmul.f64	d6, d8, d7
 8005c58:	4b6f      	ldr	r3, [pc, #444]	; (8005e18 <obtenerVelCurva+0x69c>)
 8005c5a:	ed93 7b00 	vldr	d7, [r3]
 8005c5e:	ed97 5b00 	vldr	d5, [r7]
 8005c62:	ee35 5b47 	vsub.f64	d5, d5, d7
 8005c66:	4b77      	ldr	r3, [pc, #476]	; (8005e44 <obtenerVelCurva+0x6c8>)
 8005c68:	ed93 7b00 	vldr	d7, [r3]
 8005c6c:	ee25 7b07 	vmul.f64	d7, d5, d7
 8005c70:	ee36 6b07 	vadd.f64	d6, d6, d7
 8005c74:	4b74      	ldr	r3, [pc, #464]	; (8005e48 <obtenerVelCurva+0x6cc>)
 8005c76:	ed93 7b00 	vldr	d7, [r3]
 8005c7a:	ee36 7b07 	vadd.f64	d7, d6, d7
 8005c7e:	4b6c      	ldr	r3, [pc, #432]	; (8005e30 <obtenerVelCurva+0x6b4>)
 8005c80:	ed83 7b00 	vstr	d7, [r3]
		DX = Af * (t - tfHip3) + VfHip3;
 8005c84:	4b64      	ldr	r3, [pc, #400]	; (8005e18 <obtenerVelCurva+0x69c>)
 8005c86:	ed93 7b00 	vldr	d7, [r3]
 8005c8a:	ed97 6b00 	vldr	d6, [r7]
 8005c8e:	ee36 6b47 	vsub.f64	d6, d6, d7
 8005c92:	4b6b      	ldr	r3, [pc, #428]	; (8005e40 <obtenerVelCurva+0x6c4>)
 8005c94:	ed93 7b00 	vldr	d7, [r3]
 8005c98:	ee26 6b07 	vmul.f64	d6, d6, d7
 8005c9c:	4b69      	ldr	r3, [pc, #420]	; (8005e44 <obtenerVelCurva+0x6c8>)
 8005c9e:	ed93 7b00 	vldr	d7, [r3]
 8005ca2:	ee36 7b07 	vadd.f64	d7, d6, d7
 8005ca6:	4b63      	ldr	r3, [pc, #396]	; (8005e34 <obtenerVelCurva+0x6b8>)
 8005ca8:	ed83 7b00 	vstr	d7, [r3]
		DDX = Af;
 8005cac:	4b64      	ldr	r3, [pc, #400]	; (8005e40 <obtenerVelCurva+0x6c4>)
 8005cae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cb2:	4961      	ldr	r1, [pc, #388]	; (8005e38 <obtenerVelCurva+0x6bc>)
 8005cb4:	e9c1 2300 	strd	r2, r3, [r1]
}
 8005cb8:	e0e7      	b.n	8005e8a <obtenerVelCurva+0x70e>
	} else if (t <= TiempoTotX) {                               // Hiperbola 4
 8005cba:	4b64      	ldr	r3, [pc, #400]	; (8005e4c <obtenerVelCurva+0x6d0>)
 8005cbc:	ed93 7b00 	vldr	d7, [r3]
 8005cc0:	ed97 6b00 	vldr	d6, [r7]
 8005cc4:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8005cc8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005ccc:	f200 808b 	bhi.w	8005de6 <obtenerVelCurva+0x66a>
		X = a0Hip4 + a1Hip4 * (t - tiHip4) + a2Hip4 * pow((t - tiHip4), 2)
 8005cd0:	4b5a      	ldr	r3, [pc, #360]	; (8005e3c <obtenerVelCurva+0x6c0>)
 8005cd2:	ed93 7b00 	vldr	d7, [r3]
 8005cd6:	ed97 6b00 	vldr	d6, [r7]
 8005cda:	ee36 6b47 	vsub.f64	d6, d6, d7
 8005cde:	4b5c      	ldr	r3, [pc, #368]	; (8005e50 <obtenerVelCurva+0x6d4>)
 8005ce0:	ed93 7b00 	vldr	d7, [r3]
 8005ce4:	ee26 6b07 	vmul.f64	d6, d6, d7
 8005ce8:	4b5a      	ldr	r3, [pc, #360]	; (8005e54 <obtenerVelCurva+0x6d8>)
 8005cea:	ed93 7b00 	vldr	d7, [r3]
 8005cee:	ee36 8b07 	vadd.f64	d8, d6, d7
 8005cf2:	4b52      	ldr	r3, [pc, #328]	; (8005e3c <obtenerVelCurva+0x6c0>)
 8005cf4:	ed93 7b00 	vldr	d7, [r3]
 8005cf8:	ed97 6b00 	vldr	d6, [r7]
 8005cfc:	ee36 7b47 	vsub.f64	d7, d6, d7
 8005d00:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8005d04:	eeb0 0b47 	vmov.f64	d0, d7
 8005d08:	f00b ff9e 	bl	8011c48 <pow>
 8005d0c:	eeb0 6b40 	vmov.f64	d6, d0
 8005d10:	4b51      	ldr	r3, [pc, #324]	; (8005e58 <obtenerVelCurva+0x6dc>)
 8005d12:	ed93 7b00 	vldr	d7, [r3]
 8005d16:	ee26 7b07 	vmul.f64	d7, d6, d7
 8005d1a:	ee38 8b07 	vadd.f64	d8, d8, d7
				+ a3Hip4 * pow((t - tiHip4), 3);
 8005d1e:	4b47      	ldr	r3, [pc, #284]	; (8005e3c <obtenerVelCurva+0x6c0>)
 8005d20:	ed93 7b00 	vldr	d7, [r3]
 8005d24:	ed97 6b00 	vldr	d6, [r7]
 8005d28:	ee36 7b47 	vsub.f64	d7, d6, d7
 8005d2c:	eeb0 1b08 	vmov.f64	d1, #8	; 0x40400000  3.0
 8005d30:	eeb0 0b47 	vmov.f64	d0, d7
 8005d34:	f00b ff88 	bl	8011c48 <pow>
 8005d38:	eeb0 6b40 	vmov.f64	d6, d0
 8005d3c:	4b47      	ldr	r3, [pc, #284]	; (8005e5c <obtenerVelCurva+0x6e0>)
 8005d3e:	ed93 7b00 	vldr	d7, [r3]
 8005d42:	ee26 7b07 	vmul.f64	d7, d6, d7
 8005d46:	ee38 7b07 	vadd.f64	d7, d8, d7
		X = a0Hip4 + a1Hip4 * (t - tiHip4) + a2Hip4 * pow((t - tiHip4), 2)
 8005d4a:	4b39      	ldr	r3, [pc, #228]	; (8005e30 <obtenerVelCurva+0x6b4>)
 8005d4c:	ed83 7b00 	vstr	d7, [r3]
		DX = a1Hip4 + 2.0 * a2Hip4 * (t - tiHip4)
 8005d50:	4b41      	ldr	r3, [pc, #260]	; (8005e58 <obtenerVelCurva+0x6dc>)
 8005d52:	ed93 7b00 	vldr	d7, [r3]
 8005d56:	ee37 6b07 	vadd.f64	d6, d7, d7
 8005d5a:	4b38      	ldr	r3, [pc, #224]	; (8005e3c <obtenerVelCurva+0x6c0>)
 8005d5c:	ed93 7b00 	vldr	d7, [r3]
 8005d60:	ed97 5b00 	vldr	d5, [r7]
 8005d64:	ee35 7b47 	vsub.f64	d7, d5, d7
 8005d68:	ee26 6b07 	vmul.f64	d6, d6, d7
 8005d6c:	4b38      	ldr	r3, [pc, #224]	; (8005e50 <obtenerVelCurva+0x6d4>)
 8005d6e:	ed93 7b00 	vldr	d7, [r3]
 8005d72:	ee36 8b07 	vadd.f64	d8, d6, d7
				+ 3 * a3Hip4 * pow((t - tiHip4), 2);
 8005d76:	4b39      	ldr	r3, [pc, #228]	; (8005e5c <obtenerVelCurva+0x6e0>)
 8005d78:	ed93 7b00 	vldr	d7, [r3]
 8005d7c:	eeb0 6b08 	vmov.f64	d6, #8	; 0x40400000  3.0
 8005d80:	ee27 9b06 	vmul.f64	d9, d7, d6
 8005d84:	4b2d      	ldr	r3, [pc, #180]	; (8005e3c <obtenerVelCurva+0x6c0>)
 8005d86:	ed93 7b00 	vldr	d7, [r3]
 8005d8a:	ed97 6b00 	vldr	d6, [r7]
 8005d8e:	ee36 7b47 	vsub.f64	d7, d6, d7
 8005d92:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8005d96:	eeb0 0b47 	vmov.f64	d0, d7
 8005d9a:	f00b ff55 	bl	8011c48 <pow>
 8005d9e:	eeb0 7b40 	vmov.f64	d7, d0
 8005da2:	ee29 7b07 	vmul.f64	d7, d9, d7
 8005da6:	ee38 7b07 	vadd.f64	d7, d8, d7
		DX = a1Hip4 + 2.0 * a2Hip4 * (t - tiHip4)
 8005daa:	4b22      	ldr	r3, [pc, #136]	; (8005e34 <obtenerVelCurva+0x6b8>)
 8005dac:	ed83 7b00 	vstr	d7, [r3]
		DDX = 2.0 * a2Hip4 + 6.0 * a3Hip4 * (t - tiHip4);
 8005db0:	4b29      	ldr	r3, [pc, #164]	; (8005e58 <obtenerVelCurva+0x6dc>)
 8005db2:	ed93 7b00 	vldr	d7, [r3]
 8005db6:	ee37 6b07 	vadd.f64	d6, d7, d7
 8005dba:	4b28      	ldr	r3, [pc, #160]	; (8005e5c <obtenerVelCurva+0x6e0>)
 8005dbc:	ed93 7b00 	vldr	d7, [r3]
 8005dc0:	eeb1 5b08 	vmov.f64	d5, #24	; 0x40c00000  6.0
 8005dc4:	ee27 5b05 	vmul.f64	d5, d7, d5
 8005dc8:	4b1c      	ldr	r3, [pc, #112]	; (8005e3c <obtenerVelCurva+0x6c0>)
 8005dca:	ed93 7b00 	vldr	d7, [r3]
 8005dce:	ed97 4b00 	vldr	d4, [r7]
 8005dd2:	ee34 7b47 	vsub.f64	d7, d4, d7
 8005dd6:	ee25 7b07 	vmul.f64	d7, d5, d7
 8005dda:	ee36 7b07 	vadd.f64	d7, d6, d7
 8005dde:	4b16      	ldr	r3, [pc, #88]	; (8005e38 <obtenerVelCurva+0x6bc>)
 8005de0:	ed83 7b00 	vstr	d7, [r3]
}
 8005de4:	e051      	b.n	8005e8a <obtenerVelCurva+0x70e>
	} else if (t > TiempoTotX) {                               // Tiempo extra
 8005de6:	4b19      	ldr	r3, [pc, #100]	; (8005e4c <obtenerVelCurva+0x6d0>)
 8005de8:	ed93 7b00 	vldr	d7, [r3]
 8005dec:	ed97 6b00 	vldr	d6, [r7]
 8005df0:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8005df4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005df8:	dd32      	ble.n	8005e60 <obtenerVelCurva+0x6e4>
		DX = 0;
 8005dfa:	490e      	ldr	r1, [pc, #56]	; (8005e34 <obtenerVelCurva+0x6b8>)
 8005dfc:	f04f 0200 	mov.w	r2, #0
 8005e00:	f04f 0300 	mov.w	r3, #0
 8005e04:	e9c1 2300 	strd	r2, r3, [r1]
		DDX = 0;
 8005e08:	490b      	ldr	r1, [pc, #44]	; (8005e38 <obtenerVelCurva+0x6bc>)
 8005e0a:	f04f 0200 	mov.w	r2, #0
 8005e0e:	f04f 0300 	mov.w	r3, #0
 8005e12:	e9c1 2300 	strd	r2, r3, [r1]
}
 8005e16:	e038      	b.n	8005e8a <obtenerVelCurva+0x70e>
 8005e18:	24000b78 	.word	0x24000b78
 8005e1c:	24000b70 	.word	0x24000b70
 8005e20:	24000ae8 	.word	0x24000ae8
 8005e24:	24000ae0 	.word	0x24000ae0
 8005e28:	24000af0 	.word	0x24000af0
 8005e2c:	24000af8 	.word	0x24000af8
 8005e30:	240004c0 	.word	0x240004c0
 8005e34:	240004c8 	.word	0x240004c8
 8005e38:	240004d0 	.word	0x240004d0
 8005e3c:	24000b80 	.word	0x24000b80
 8005e40:	24000a98 	.word	0x24000a98
 8005e44:	24000b50 	.word	0x24000b50
 8005e48:	24000b30 	.word	0x24000b30
 8005e4c:	24000b88 	.word	0x24000b88
 8005e50:	24000b08 	.word	0x24000b08
 8005e54:	24000b00 	.word	0x24000b00
 8005e58:	24000b10 	.word	0x24000b10
 8005e5c:	24000b18 	.word	0x24000b18
		X = 0;
 8005e60:	490d      	ldr	r1, [pc, #52]	; (8005e98 <obtenerVelCurva+0x71c>)
 8005e62:	f04f 0200 	mov.w	r2, #0
 8005e66:	f04f 0300 	mov.w	r3, #0
 8005e6a:	e9c1 2300 	strd	r2, r3, [r1]
		DX = 0;
 8005e6e:	490b      	ldr	r1, [pc, #44]	; (8005e9c <obtenerVelCurva+0x720>)
 8005e70:	f04f 0200 	mov.w	r2, #0
 8005e74:	f04f 0300 	mov.w	r3, #0
 8005e78:	e9c1 2300 	strd	r2, r3, [r1]
		DDX = 0;
 8005e7c:	4908      	ldr	r1, [pc, #32]	; (8005ea0 <obtenerVelCurva+0x724>)
 8005e7e:	f04f 0200 	mov.w	r2, #0
 8005e82:	f04f 0300 	mov.w	r3, #0
 8005e86:	e9c1 2300 	strd	r2, r3, [r1]
}
 8005e8a:	bf00      	nop
 8005e8c:	3708      	adds	r7, #8
 8005e8e:	46bd      	mov	sp, r7
 8005e90:	ecbd 8b04 	vpop	{d8-d9}
 8005e94:	bd80      	pop	{r7, pc}
 8005e96:	bf00      	nop
 8005e98:	240004c0 	.word	0x240004c0
 8005e9c:	240004c8 	.word	0x240004c8
 8005ea0:	240004d0 	.word	0x240004d0
 8005ea4:	00000000 	.word	0x00000000

08005ea8 <jacobianoInverso>:



void jacobianoInverso(double Vxaux, double Vyaux, double Vzaux, double Pxaux, double Pyaux, double Pzaux) {
 8005ea8:	b590      	push	{r4, r7, lr}
 8005eaa:	b0ad      	sub	sp, #180	; 0xb4
 8005eac:	af00      	add	r7, sp, #0
 8005eae:	ed87 0b1c 	vstr	d0, [r7, #112]	; 0x70
 8005eb2:	ed87 1b1a 	vstr	d1, [r7, #104]	; 0x68
 8005eb6:	ed87 2b18 	vstr	d2, [r7, #96]	; 0x60
 8005eba:	ed87 3b16 	vstr	d3, [r7, #88]	; 0x58
 8005ebe:	ed87 4b14 	vstr	d4, [r7, #80]	; 0x50
 8005ec2:	ed87 5b12 	vstr	d5, [r7, #72]	; 0x48
	 * 	 Funcion que devuelve la velocidad angular de cada motor
	 *	 Entrada: Velocidad en (x,y,z) y Posicion en (x,y,z)
	 *	 Salida:  Velocidad angular en rad/s
	 	 -----------------------------------------------------------------------*/

	double Vaux[3] = { Vxaux, Vyaux, Vzaux };
 8005ec6:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8005eca:	e9c7 231e 	strd	r2, r3, [r7, #120]	; 0x78
 8005ece:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8005ed2:	e9c7 2320 	strd	r2, r3, [r7, #128]	; 0x80
 8005ed6:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8005eda:	e9c7 2322 	strd	r2, r3, [r7, #136]	; 0x88

	E1[0] = Pxaux + 0;
 8005ede:	ed97 7b16 	vldr	d7, [r7, #88]	; 0x58
 8005ee2:	ed9f 6bc3 	vldr	d6, [pc, #780]	; 80061f0 <jacobianoInverso+0x348>
 8005ee6:	ee37 7b06 	vadd.f64	d7, d7, d6
 8005eea:	4bc9      	ldr	r3, [pc, #804]	; (8006210 <jacobianoInverso+0x368>)
 8005eec:	ed83 7b00 	vstr	d7, [r3]
	E1[1] = Pyaux - 0.07;
 8005ef0:	ed97 7b14 	vldr	d7, [r7, #80]	; 0x50
 8005ef4:	ed9f 6bc0 	vldr	d6, [pc, #768]	; 80061f8 <jacobianoInverso+0x350>
 8005ef8:	ee37 7b46 	vsub.f64	d7, d7, d6
 8005efc:	4bc4      	ldr	r3, [pc, #784]	; (8006210 <jacobianoInverso+0x368>)
 8005efe:	ed83 7b02 	vstr	d7, [r3, #8]
	E1[2] = Pzaux;
 8005f02:	49c3      	ldr	r1, [pc, #780]	; (8006210 <jacobianoInverso+0x368>)
 8005f04:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005f08:	e9c1 2304 	strd	r2, r3, [r1, #16]
	E2[0] = Pxaux + 0.060621778264911;
 8005f0c:	ed97 7b16 	vldr	d7, [r7, #88]	; 0x58
 8005f10:	ed9f 6bbb 	vldr	d6, [pc, #748]	; 8006200 <jacobianoInverso+0x358>
 8005f14:	ee37 7b06 	vadd.f64	d7, d7, d6
 8005f18:	4bbe      	ldr	r3, [pc, #760]	; (8006214 <jacobianoInverso+0x36c>)
 8005f1a:	ed83 7b00 	vstr	d7, [r3]
	E2[1] = Pyaux + 0.035;
 8005f1e:	ed97 7b14 	vldr	d7, [r7, #80]	; 0x50
 8005f22:	ed9f 6bb9 	vldr	d6, [pc, #740]	; 8006208 <jacobianoInverso+0x360>
 8005f26:	ee37 7b06 	vadd.f64	d7, d7, d6
 8005f2a:	4bba      	ldr	r3, [pc, #744]	; (8006214 <jacobianoInverso+0x36c>)
 8005f2c:	ed83 7b02 	vstr	d7, [r3, #8]
	E2[2] = Pzaux;
 8005f30:	49b8      	ldr	r1, [pc, #736]	; (8006214 <jacobianoInverso+0x36c>)
 8005f32:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005f36:	e9c1 2304 	strd	r2, r3, [r1, #16]
	E3[0] = Pxaux - 0.060621778264911;
 8005f3a:	ed97 7b16 	vldr	d7, [r7, #88]	; 0x58
 8005f3e:	ed9f 6bb0 	vldr	d6, [pc, #704]	; 8006200 <jacobianoInverso+0x358>
 8005f42:	ee37 7b46 	vsub.f64	d7, d7, d6
 8005f46:	4bb4      	ldr	r3, [pc, #720]	; (8006218 <jacobianoInverso+0x370>)
 8005f48:	ed83 7b00 	vstr	d7, [r3]
	E3[1] = Pyaux + 0.035;
 8005f4c:	ed97 7b14 	vldr	d7, [r7, #80]	; 0x50
 8005f50:	ed9f 6bad 	vldr	d6, [pc, #692]	; 8006208 <jacobianoInverso+0x360>
 8005f54:	ee37 7b06 	vadd.f64	d7, d7, d6
 8005f58:	4baf      	ldr	r3, [pc, #700]	; (8006218 <jacobianoInverso+0x370>)
 8005f5a:	ed83 7b02 	vstr	d7, [r3, #8]
	E3[2] = Pzaux;
 8005f5e:	49ae      	ldr	r1, [pc, #696]	; (8006218 <jacobianoInverso+0x370>)
 8005f60:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005f64:	e9c1 2304 	strd	r2, r3, [r1, #16]

	l1[0][0] = XJ1_1 - F1[0];//l11=[(XJ1(1)-F1(1,1));(YJ1(1)-F1(1,2));(ZJ1(1)-F1(1,3))];
 8005f68:	4bac      	ldr	r3, [pc, #688]	; (800621c <jacobianoInverso+0x374>)
 8005f6a:	ed93 6b00 	vldr	d6, [r3]
 8005f6e:	4bac      	ldr	r3, [pc, #688]	; (8006220 <jacobianoInverso+0x378>)
 8005f70:	ed93 7b00 	vldr	d7, [r3]
 8005f74:	ee36 7b47 	vsub.f64	d7, d6, d7
 8005f78:	4baa      	ldr	r3, [pc, #680]	; (8006224 <jacobianoInverso+0x37c>)
 8005f7a:	ed83 7b00 	vstr	d7, [r3]
	l1[0][1] = YJ1_1 - F1[1];
 8005f7e:	4baa      	ldr	r3, [pc, #680]	; (8006228 <jacobianoInverso+0x380>)
 8005f80:	ed93 6b00 	vldr	d6, [r3]
 8005f84:	4ba6      	ldr	r3, [pc, #664]	; (8006220 <jacobianoInverso+0x378>)
 8005f86:	ed93 7b02 	vldr	d7, [r3, #8]
 8005f8a:	ee36 7b47 	vsub.f64	d7, d6, d7
 8005f8e:	4ba5      	ldr	r3, [pc, #660]	; (8006224 <jacobianoInverso+0x37c>)
 8005f90:	ed83 7b02 	vstr	d7, [r3, #8]
	l1[0][2] = ZJ1_1 - F1[2];
 8005f94:	4ba5      	ldr	r3, [pc, #660]	; (800622c <jacobianoInverso+0x384>)
 8005f96:	ed93 6b00 	vldr	d6, [r3]
 8005f9a:	4ba1      	ldr	r3, [pc, #644]	; (8006220 <jacobianoInverso+0x378>)
 8005f9c:	ed93 7b04 	vldr	d7, [r3, #16]
 8005fa0:	ee36 7b47 	vsub.f64	d7, d6, d7
 8005fa4:	4b9f      	ldr	r3, [pc, #636]	; (8006224 <jacobianoInverso+0x37c>)
 8005fa6:	ed83 7b04 	vstr	d7, [r3, #16]
	l1[1][0] = XJ2_1 - F2[0];//l12=[(XJ2(1)-F2(1,1));(YJ2(1)-F2(1,2));(ZJ2(1)-F2(1,3))];
 8005faa:	4ba1      	ldr	r3, [pc, #644]	; (8006230 <jacobianoInverso+0x388>)
 8005fac:	ed93 6b00 	vldr	d6, [r3]
 8005fb0:	4ba0      	ldr	r3, [pc, #640]	; (8006234 <jacobianoInverso+0x38c>)
 8005fb2:	ed93 7b00 	vldr	d7, [r3]
 8005fb6:	ee36 7b47 	vsub.f64	d7, d6, d7
 8005fba:	4b9a      	ldr	r3, [pc, #616]	; (8006224 <jacobianoInverso+0x37c>)
 8005fbc:	ed83 7b06 	vstr	d7, [r3, #24]
	l1[1][1] = YJ2_1 - F2[1];
 8005fc0:	4b9d      	ldr	r3, [pc, #628]	; (8006238 <jacobianoInverso+0x390>)
 8005fc2:	ed93 6b00 	vldr	d6, [r3]
 8005fc6:	4b9b      	ldr	r3, [pc, #620]	; (8006234 <jacobianoInverso+0x38c>)
 8005fc8:	ed93 7b02 	vldr	d7, [r3, #8]
 8005fcc:	ee36 7b47 	vsub.f64	d7, d6, d7
 8005fd0:	4b94      	ldr	r3, [pc, #592]	; (8006224 <jacobianoInverso+0x37c>)
 8005fd2:	ed83 7b08 	vstr	d7, [r3, #32]
	l1[1][2] = ZJ2_1 - F2[2];
 8005fd6:	4b99      	ldr	r3, [pc, #612]	; (800623c <jacobianoInverso+0x394>)
 8005fd8:	ed93 6b00 	vldr	d6, [r3]
 8005fdc:	4b95      	ldr	r3, [pc, #596]	; (8006234 <jacobianoInverso+0x38c>)
 8005fde:	ed93 7b04 	vldr	d7, [r3, #16]
 8005fe2:	ee36 7b47 	vsub.f64	d7, d6, d7
 8005fe6:	4b8f      	ldr	r3, [pc, #572]	; (8006224 <jacobianoInverso+0x37c>)
 8005fe8:	ed83 7b0a 	vstr	d7, [r3, #40]	; 0x28
	l1[2][0] = XJ3_1 - F3[0];//l13=[(XJ3(1)-F3(1,1));(YJ3(1)-F3(1,2));(ZJ3(1)-F3(1,3))];
 8005fec:	4b94      	ldr	r3, [pc, #592]	; (8006240 <jacobianoInverso+0x398>)
 8005fee:	ed93 6b00 	vldr	d6, [r3]
 8005ff2:	4b94      	ldr	r3, [pc, #592]	; (8006244 <jacobianoInverso+0x39c>)
 8005ff4:	ed93 7b00 	vldr	d7, [r3]
 8005ff8:	ee36 7b47 	vsub.f64	d7, d6, d7
 8005ffc:	4b89      	ldr	r3, [pc, #548]	; (8006224 <jacobianoInverso+0x37c>)
 8005ffe:	ed83 7b0c 	vstr	d7, [r3, #48]	; 0x30
	l1[2][1] = YJ3_1 - F3[1];
 8006002:	4b91      	ldr	r3, [pc, #580]	; (8006248 <jacobianoInverso+0x3a0>)
 8006004:	ed93 6b00 	vldr	d6, [r3]
 8006008:	4b8e      	ldr	r3, [pc, #568]	; (8006244 <jacobianoInverso+0x39c>)
 800600a:	ed93 7b02 	vldr	d7, [r3, #8]
 800600e:	ee36 7b47 	vsub.f64	d7, d6, d7
 8006012:	4b84      	ldr	r3, [pc, #528]	; (8006224 <jacobianoInverso+0x37c>)
 8006014:	ed83 7b0e 	vstr	d7, [r3, #56]	; 0x38
	l1[2][2] = ZJ3_1 - F3[2];
 8006018:	4b8c      	ldr	r3, [pc, #560]	; (800624c <jacobianoInverso+0x3a4>)
 800601a:	ed93 6b00 	vldr	d6, [r3]
 800601e:	4b89      	ldr	r3, [pc, #548]	; (8006244 <jacobianoInverso+0x39c>)
 8006020:	ed93 7b04 	vldr	d7, [r3, #16]
 8006024:	ee36 7b47 	vsub.f64	d7, d6, d7
 8006028:	4b7e      	ldr	r3, [pc, #504]	; (8006224 <jacobianoInverso+0x37c>)
 800602a:	ed83 7b10 	vstr	d7, [r3, #64]	; 0x40

	l2[0][0] = E1[0] - XJ1_1;//l21=[(E1(1,1)-XJ1(1));(E1(1,2)-YJ1(1));(E1(1,3)-ZJ1(1))];
 800602e:	4b78      	ldr	r3, [pc, #480]	; (8006210 <jacobianoInverso+0x368>)
 8006030:	ed93 6b00 	vldr	d6, [r3]
 8006034:	4b79      	ldr	r3, [pc, #484]	; (800621c <jacobianoInverso+0x374>)
 8006036:	ed93 7b00 	vldr	d7, [r3]
 800603a:	ee36 7b47 	vsub.f64	d7, d6, d7
 800603e:	4b84      	ldr	r3, [pc, #528]	; (8006250 <jacobianoInverso+0x3a8>)
 8006040:	ed83 7b00 	vstr	d7, [r3]
	l2[1][0] = E1[1] - YJ1_1;
 8006044:	4b72      	ldr	r3, [pc, #456]	; (8006210 <jacobianoInverso+0x368>)
 8006046:	ed93 6b02 	vldr	d6, [r3, #8]
 800604a:	4b77      	ldr	r3, [pc, #476]	; (8006228 <jacobianoInverso+0x380>)
 800604c:	ed93 7b00 	vldr	d7, [r3]
 8006050:	ee36 7b47 	vsub.f64	d7, d6, d7
 8006054:	4b7e      	ldr	r3, [pc, #504]	; (8006250 <jacobianoInverso+0x3a8>)
 8006056:	ed83 7b06 	vstr	d7, [r3, #24]
	l2[2][0] = E1[2] - ZJ1_1;
 800605a:	4b6d      	ldr	r3, [pc, #436]	; (8006210 <jacobianoInverso+0x368>)
 800605c:	ed93 6b04 	vldr	d6, [r3, #16]
 8006060:	4b72      	ldr	r3, [pc, #456]	; (800622c <jacobianoInverso+0x384>)
 8006062:	ed93 7b00 	vldr	d7, [r3]
 8006066:	ee36 7b47 	vsub.f64	d7, d6, d7
 800606a:	4b79      	ldr	r3, [pc, #484]	; (8006250 <jacobianoInverso+0x3a8>)
 800606c:	ed83 7b0c 	vstr	d7, [r3, #48]	; 0x30
	l2[0][1] = E2[0] - XJ2_1;//l22=[(E2(1,1)-XJ2(1));(E2(1,2)-YJ2(1));(E2(1,3)-ZJ2(1))];
 8006070:	4b68      	ldr	r3, [pc, #416]	; (8006214 <jacobianoInverso+0x36c>)
 8006072:	ed93 6b00 	vldr	d6, [r3]
 8006076:	4b6e      	ldr	r3, [pc, #440]	; (8006230 <jacobianoInverso+0x388>)
 8006078:	ed93 7b00 	vldr	d7, [r3]
 800607c:	ee36 7b47 	vsub.f64	d7, d6, d7
 8006080:	4b73      	ldr	r3, [pc, #460]	; (8006250 <jacobianoInverso+0x3a8>)
 8006082:	ed83 7b02 	vstr	d7, [r3, #8]
	l2[1][1] = E2[1] - YJ2_1;
 8006086:	4b63      	ldr	r3, [pc, #396]	; (8006214 <jacobianoInverso+0x36c>)
 8006088:	ed93 6b02 	vldr	d6, [r3, #8]
 800608c:	4b6a      	ldr	r3, [pc, #424]	; (8006238 <jacobianoInverso+0x390>)
 800608e:	ed93 7b00 	vldr	d7, [r3]
 8006092:	ee36 7b47 	vsub.f64	d7, d6, d7
 8006096:	4b6e      	ldr	r3, [pc, #440]	; (8006250 <jacobianoInverso+0x3a8>)
 8006098:	ed83 7b08 	vstr	d7, [r3, #32]
	l2[2][1] = E2[2] - ZJ2_1;
 800609c:	4b5d      	ldr	r3, [pc, #372]	; (8006214 <jacobianoInverso+0x36c>)
 800609e:	ed93 6b04 	vldr	d6, [r3, #16]
 80060a2:	4b66      	ldr	r3, [pc, #408]	; (800623c <jacobianoInverso+0x394>)
 80060a4:	ed93 7b00 	vldr	d7, [r3]
 80060a8:	ee36 7b47 	vsub.f64	d7, d6, d7
 80060ac:	4b68      	ldr	r3, [pc, #416]	; (8006250 <jacobianoInverso+0x3a8>)
 80060ae:	ed83 7b0e 	vstr	d7, [r3, #56]	; 0x38
	l2[0][2] = E3[0] - XJ3_1;//l23=[(E3(1,1)-XJ3(1));(E3(1,2)-YJ3(1));(E3(1,3)-ZJ3(1))];
 80060b2:	4b59      	ldr	r3, [pc, #356]	; (8006218 <jacobianoInverso+0x370>)
 80060b4:	ed93 6b00 	vldr	d6, [r3]
 80060b8:	4b61      	ldr	r3, [pc, #388]	; (8006240 <jacobianoInverso+0x398>)
 80060ba:	ed93 7b00 	vldr	d7, [r3]
 80060be:	ee36 7b47 	vsub.f64	d7, d6, d7
 80060c2:	4b63      	ldr	r3, [pc, #396]	; (8006250 <jacobianoInverso+0x3a8>)
 80060c4:	ed83 7b04 	vstr	d7, [r3, #16]
	l2[1][2] = E3[1] - YJ3_1;
 80060c8:	4b53      	ldr	r3, [pc, #332]	; (8006218 <jacobianoInverso+0x370>)
 80060ca:	ed93 6b02 	vldr	d6, [r3, #8]
 80060ce:	4b5e      	ldr	r3, [pc, #376]	; (8006248 <jacobianoInverso+0x3a0>)
 80060d0:	ed93 7b00 	vldr	d7, [r3]
 80060d4:	ee36 7b47 	vsub.f64	d7, d6, d7
 80060d8:	4b5d      	ldr	r3, [pc, #372]	; (8006250 <jacobianoInverso+0x3a8>)
 80060da:	ed83 7b0a 	vstr	d7, [r3, #40]	; 0x28
	l2[2][2] = E3[2] - ZJ3_1;
 80060de:	4b4e      	ldr	r3, [pc, #312]	; (8006218 <jacobianoInverso+0x370>)
 80060e0:	ed93 6b04 	vldr	d6, [r3, #16]
 80060e4:	4b59      	ldr	r3, [pc, #356]	; (800624c <jacobianoInverso+0x3a4>)
 80060e6:	ed93 7b00 	vldr	d7, [r3]
 80060ea:	ee36 7b47 	vsub.f64	d7, d6, d7
 80060ee:	4b58      	ldr	r3, [pc, #352]	; (8006250 <jacobianoInverso+0x3a8>)
 80060f0:	ed83 7b10 	vstr	d7, [r3, #64]	; 0x40

	Jcd = transpuesta(l2);				//Jacobiano de la cinematica directa
 80060f4:	4c57      	ldr	r4, [pc, #348]	; (8006254 <jacobianoInverso+0x3ac>)
 80060f6:	463b      	mov	r3, r7
 80060f8:	4955      	ldr	r1, [pc, #340]	; (8006250 <jacobianoInverso+0x3a8>)
 80060fa:	4618      	mov	r0, r3
 80060fc:	f7fd fcaa 	bl	8003a54 <transpuesta>
 8006100:	4620      	mov	r0, r4
 8006102:	463b      	mov	r3, r7
 8006104:	2248      	movs	r2, #72	; 0x48
 8006106:	4619      	mov	r1, r3
 8006108:	f008 fefc 	bl	800ef04 <memcpy>

	cross_P1[0] = SA1[1] * l1[0][2] - SA1[2] * l1[0][1];//Producto Cruz entre vectores
 800610c:	4b52      	ldr	r3, [pc, #328]	; (8006258 <jacobianoInverso+0x3b0>)
 800610e:	ed93 6b02 	vldr	d6, [r3, #8]
 8006112:	4b44      	ldr	r3, [pc, #272]	; (8006224 <jacobianoInverso+0x37c>)
 8006114:	ed93 7b04 	vldr	d7, [r3, #16]
 8006118:	ee26 6b07 	vmul.f64	d6, d6, d7
 800611c:	4b4e      	ldr	r3, [pc, #312]	; (8006258 <jacobianoInverso+0x3b0>)
 800611e:	ed93 5b04 	vldr	d5, [r3, #16]
 8006122:	4b40      	ldr	r3, [pc, #256]	; (8006224 <jacobianoInverso+0x37c>)
 8006124:	ed93 7b02 	vldr	d7, [r3, #8]
 8006128:	ee25 7b07 	vmul.f64	d7, d5, d7
 800612c:	ee36 7b47 	vsub.f64	d7, d6, d7
 8006130:	4b4a      	ldr	r3, [pc, #296]	; (800625c <jacobianoInverso+0x3b4>)
 8006132:	ed83 7b00 	vstr	d7, [r3]
	cross_P1[1] = SA1[2] * l1[0][0] - SA1[0] * l1[0][2];
 8006136:	4b48      	ldr	r3, [pc, #288]	; (8006258 <jacobianoInverso+0x3b0>)
 8006138:	ed93 6b04 	vldr	d6, [r3, #16]
 800613c:	4b39      	ldr	r3, [pc, #228]	; (8006224 <jacobianoInverso+0x37c>)
 800613e:	ed93 7b00 	vldr	d7, [r3]
 8006142:	ee26 6b07 	vmul.f64	d6, d6, d7
 8006146:	4b44      	ldr	r3, [pc, #272]	; (8006258 <jacobianoInverso+0x3b0>)
 8006148:	ed93 5b00 	vldr	d5, [r3]
 800614c:	4b35      	ldr	r3, [pc, #212]	; (8006224 <jacobianoInverso+0x37c>)
 800614e:	ed93 7b04 	vldr	d7, [r3, #16]
 8006152:	ee25 7b07 	vmul.f64	d7, d5, d7
 8006156:	ee36 7b47 	vsub.f64	d7, d6, d7
 800615a:	4b40      	ldr	r3, [pc, #256]	; (800625c <jacobianoInverso+0x3b4>)
 800615c:	ed83 7b02 	vstr	d7, [r3, #8]
	cross_P1[2] = SA1[0] * l1[0][1] - SA1[1] * l1[0][0];
 8006160:	4b3d      	ldr	r3, [pc, #244]	; (8006258 <jacobianoInverso+0x3b0>)
 8006162:	ed93 6b00 	vldr	d6, [r3]
 8006166:	4b2f      	ldr	r3, [pc, #188]	; (8006224 <jacobianoInverso+0x37c>)
 8006168:	ed93 7b02 	vldr	d7, [r3, #8]
 800616c:	ee26 6b07 	vmul.f64	d6, d6, d7
 8006170:	4b39      	ldr	r3, [pc, #228]	; (8006258 <jacobianoInverso+0x3b0>)
 8006172:	ed93 5b02 	vldr	d5, [r3, #8]
 8006176:	4b2b      	ldr	r3, [pc, #172]	; (8006224 <jacobianoInverso+0x37c>)
 8006178:	ed93 7b00 	vldr	d7, [r3]
 800617c:	ee25 7b07 	vmul.f64	d7, d5, d7
 8006180:	ee36 7b47 	vsub.f64	d7, d6, d7
 8006184:	4b35      	ldr	r3, [pc, #212]	; (800625c <jacobianoInverso+0x3b4>)
 8006186:	ed83 7b04 	vstr	d7, [r3, #16]

	cross_P2[0] = SA2[1] * l1[1][2] - SA2[2] * l1[1][1];//vect_A[1] * vect_B[2] - vect_A[2] * vect_B[1]
 800618a:	4b35      	ldr	r3, [pc, #212]	; (8006260 <jacobianoInverso+0x3b8>)
 800618c:	ed93 6b02 	vldr	d6, [r3, #8]
 8006190:	4b24      	ldr	r3, [pc, #144]	; (8006224 <jacobianoInverso+0x37c>)
 8006192:	ed93 7b0a 	vldr	d7, [r3, #40]	; 0x28
 8006196:	ee26 6b07 	vmul.f64	d6, d6, d7
 800619a:	4b31      	ldr	r3, [pc, #196]	; (8006260 <jacobianoInverso+0x3b8>)
 800619c:	ed93 5b04 	vldr	d5, [r3, #16]
 80061a0:	4b20      	ldr	r3, [pc, #128]	; (8006224 <jacobianoInverso+0x37c>)
 80061a2:	ed93 7b08 	vldr	d7, [r3, #32]
 80061a6:	ee25 7b07 	vmul.f64	d7, d5, d7
 80061aa:	ee36 7b47 	vsub.f64	d7, d6, d7
 80061ae:	4b2d      	ldr	r3, [pc, #180]	; (8006264 <jacobianoInverso+0x3bc>)
 80061b0:	ed83 7b00 	vstr	d7, [r3]
	cross_P2[1] = SA2[2] * l1[1][0] - SA2[0] * l1[1][2];//vect_A[2] * vect_B[0] - vect_A[0] * vect_B[2]
 80061b4:	4b2a      	ldr	r3, [pc, #168]	; (8006260 <jacobianoInverso+0x3b8>)
 80061b6:	ed93 6b04 	vldr	d6, [r3, #16]
 80061ba:	4b1a      	ldr	r3, [pc, #104]	; (8006224 <jacobianoInverso+0x37c>)
 80061bc:	ed93 7b06 	vldr	d7, [r3, #24]
 80061c0:	ee26 6b07 	vmul.f64	d6, d6, d7
 80061c4:	4b26      	ldr	r3, [pc, #152]	; (8006260 <jacobianoInverso+0x3b8>)
 80061c6:	ed93 5b00 	vldr	d5, [r3]
 80061ca:	4b16      	ldr	r3, [pc, #88]	; (8006224 <jacobianoInverso+0x37c>)
 80061cc:	ed93 7b0a 	vldr	d7, [r3, #40]	; 0x28
 80061d0:	ee25 7b07 	vmul.f64	d7, d5, d7
 80061d4:	ee36 7b47 	vsub.f64	d7, d6, d7
 80061d8:	4b22      	ldr	r3, [pc, #136]	; (8006264 <jacobianoInverso+0x3bc>)
 80061da:	ed83 7b02 	vstr	d7, [r3, #8]
	cross_P2[2] = SA2[0] * l1[1][1] - SA2[1] * l1[1][0];//vect_A[0] * vect_B[1] - vect_A[1] * vect_B[0]
 80061de:	4b20      	ldr	r3, [pc, #128]	; (8006260 <jacobianoInverso+0x3b8>)
 80061e0:	ed93 6b00 	vldr	d6, [r3]
 80061e4:	4b0f      	ldr	r3, [pc, #60]	; (8006224 <jacobianoInverso+0x37c>)
 80061e6:	ed93 7b08 	vldr	d7, [r3, #32]
 80061ea:	ee26 6b07 	vmul.f64	d6, d6, d7
 80061ee:	e03b      	b.n	8006268 <jacobianoInverso+0x3c0>
	...
 80061f8:	1eb851ec 	.word	0x1eb851ec
 80061fc:	3fb1eb85 	.word	0x3fb1eb85
 8006200:	562574c0 	.word	0x562574c0
 8006204:	3faf09d1 	.word	0x3faf09d1
 8006208:	1eb851ec 	.word	0x1eb851ec
 800620c:	3fa1eb85 	.word	0x3fa1eb85
 8006210:	24000838 	.word	0x24000838
 8006214:	24000850 	.word	0x24000850
 8006218:	24000868 	.word	0x24000868
 800621c:	240002c0 	.word	0x240002c0
 8006220:	24000018 	.word	0x24000018
 8006224:	24000880 	.word	0x24000880
 8006228:	240002d0 	.word	0x240002d0
 800622c:	240002e0 	.word	0x240002e0
 8006230:	24000308 	.word	0x24000308
 8006234:	24000030 	.word	0x24000030
 8006238:	24000318 	.word	0x24000318
 800623c:	24000328 	.word	0x24000328
 8006240:	24000350 	.word	0x24000350
 8006244:	24000048 	.word	0x24000048
 8006248:	24000360 	.word	0x24000360
 800624c:	24000370 	.word	0x24000370
 8006250:	240008c8 	.word	0x240008c8
 8006254:	24000910 	.word	0x24000910
 8006258:	24000060 	.word	0x24000060
 800625c:	24000a30 	.word	0x24000a30
 8006260:	24000078 	.word	0x24000078
 8006264:	24000a48 	.word	0x24000a48
 8006268:	4b92      	ldr	r3, [pc, #584]	; (80064b4 <jacobianoInverso+0x60c>)
 800626a:	ed93 5b02 	vldr	d5, [r3, #8]
 800626e:	4b92      	ldr	r3, [pc, #584]	; (80064b8 <jacobianoInverso+0x610>)
 8006270:	ed93 7b06 	vldr	d7, [r3, #24]
 8006274:	ee25 7b07 	vmul.f64	d7, d5, d7
 8006278:	ee36 7b47 	vsub.f64	d7, d6, d7
 800627c:	4b8f      	ldr	r3, [pc, #572]	; (80064bc <jacobianoInverso+0x614>)
 800627e:	ed83 7b04 	vstr	d7, [r3, #16]

	cross_P3[0] = SA3[1] * l1[2][2] - SA3[2] * l1[2][1];
 8006282:	4b8f      	ldr	r3, [pc, #572]	; (80064c0 <jacobianoInverso+0x618>)
 8006284:	ed93 6b02 	vldr	d6, [r3, #8]
 8006288:	4b8b      	ldr	r3, [pc, #556]	; (80064b8 <jacobianoInverso+0x610>)
 800628a:	ed93 7b10 	vldr	d7, [r3, #64]	; 0x40
 800628e:	ee26 6b07 	vmul.f64	d6, d6, d7
 8006292:	4b8b      	ldr	r3, [pc, #556]	; (80064c0 <jacobianoInverso+0x618>)
 8006294:	ed93 5b04 	vldr	d5, [r3, #16]
 8006298:	4b87      	ldr	r3, [pc, #540]	; (80064b8 <jacobianoInverso+0x610>)
 800629a:	ed93 7b0e 	vldr	d7, [r3, #56]	; 0x38
 800629e:	ee25 7b07 	vmul.f64	d7, d5, d7
 80062a2:	ee36 7b47 	vsub.f64	d7, d6, d7
 80062a6:	4b87      	ldr	r3, [pc, #540]	; (80064c4 <jacobianoInverso+0x61c>)
 80062a8:	ed83 7b00 	vstr	d7, [r3]
	cross_P3[1] = SA3[2] * l1[2][0] - SA3[0] * l1[2][2];
 80062ac:	4b84      	ldr	r3, [pc, #528]	; (80064c0 <jacobianoInverso+0x618>)
 80062ae:	ed93 6b04 	vldr	d6, [r3, #16]
 80062b2:	4b81      	ldr	r3, [pc, #516]	; (80064b8 <jacobianoInverso+0x610>)
 80062b4:	ed93 7b0c 	vldr	d7, [r3, #48]	; 0x30
 80062b8:	ee26 6b07 	vmul.f64	d6, d6, d7
 80062bc:	4b80      	ldr	r3, [pc, #512]	; (80064c0 <jacobianoInverso+0x618>)
 80062be:	ed93 5b00 	vldr	d5, [r3]
 80062c2:	4b7d      	ldr	r3, [pc, #500]	; (80064b8 <jacobianoInverso+0x610>)
 80062c4:	ed93 7b10 	vldr	d7, [r3, #64]	; 0x40
 80062c8:	ee25 7b07 	vmul.f64	d7, d5, d7
 80062cc:	ee36 7b47 	vsub.f64	d7, d6, d7
 80062d0:	4b7c      	ldr	r3, [pc, #496]	; (80064c4 <jacobianoInverso+0x61c>)
 80062d2:	ed83 7b02 	vstr	d7, [r3, #8]
	cross_P3[2] = SA3[0] * l1[2][1] - SA3[1] * l1[2][0];
 80062d6:	4b7a      	ldr	r3, [pc, #488]	; (80064c0 <jacobianoInverso+0x618>)
 80062d8:	ed93 6b00 	vldr	d6, [r3]
 80062dc:	4b76      	ldr	r3, [pc, #472]	; (80064b8 <jacobianoInverso+0x610>)
 80062de:	ed93 7b0e 	vldr	d7, [r3, #56]	; 0x38
 80062e2:	ee26 6b07 	vmul.f64	d6, d6, d7
 80062e6:	4b76      	ldr	r3, [pc, #472]	; (80064c0 <jacobianoInverso+0x618>)
 80062e8:	ed93 5b02 	vldr	d5, [r3, #8]
 80062ec:	4b72      	ldr	r3, [pc, #456]	; (80064b8 <jacobianoInverso+0x610>)
 80062ee:	ed93 7b0c 	vldr	d7, [r3, #48]	; 0x30
 80062f2:	ee25 7b07 	vmul.f64	d7, d5, d7
 80062f6:	ee36 7b47 	vsub.f64	d7, d6, d7
 80062fa:	4b72      	ldr	r3, [pc, #456]	; (80064c4 <jacobianoInverso+0x61c>)
 80062fc:	ed83 7b04 	vstr	d7, [r3, #16]

	dot[0] = productDot(cross_P1, Jcd.m[0]);			//Producto Punto
 8006300:	4971      	ldr	r1, [pc, #452]	; (80064c8 <jacobianoInverso+0x620>)
 8006302:	4872      	ldr	r0, [pc, #456]	; (80064cc <jacobianoInverso+0x624>)
 8006304:	f7fd fbe2 	bl	8003acc <productDot>
 8006308:	eeb0 7b40 	vmov.f64	d7, d0
 800630c:	4b70      	ldr	r3, [pc, #448]	; (80064d0 <jacobianoInverso+0x628>)
 800630e:	ed83 7b00 	vstr	d7, [r3]
	dot[1] = productDot(cross_P2, Jcd.m[1]);
 8006312:	4970      	ldr	r1, [pc, #448]	; (80064d4 <jacobianoInverso+0x62c>)
 8006314:	4869      	ldr	r0, [pc, #420]	; (80064bc <jacobianoInverso+0x614>)
 8006316:	f7fd fbd9 	bl	8003acc <productDot>
 800631a:	eeb0 7b40 	vmov.f64	d7, d0
 800631e:	4b6c      	ldr	r3, [pc, #432]	; (80064d0 <jacobianoInverso+0x628>)
 8006320:	ed83 7b02 	vstr	d7, [r3, #8]
	dot[2] = productDot(cross_P3, Jcd.m[2]);
 8006324:	496c      	ldr	r1, [pc, #432]	; (80064d8 <jacobianoInverso+0x630>)
 8006326:	4867      	ldr	r0, [pc, #412]	; (80064c4 <jacobianoInverso+0x61c>)
 8006328:	f7fd fbd0 	bl	8003acc <productDot>
 800632c:	eeb0 7b40 	vmov.f64	d7, d0
 8006330:	4b67      	ldr	r3, [pc, #412]	; (80064d0 <jacobianoInverso+0x628>)
 8006332:	ed83 7b04 	vstr	d7, [r3, #16]

	for (int i = 0; i < 3; ++i) {			//Jacobiano de la cinematica inversa
 8006336:	2300      	movs	r3, #0
 8006338:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800633c:	e03d      	b.n	80063ba <jacobianoInverso+0x512>
		for (int j = 0; j < 3; ++j) {
 800633e:	2300      	movs	r3, #0
 8006340:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006344:	e030      	b.n	80063a8 <jacobianoInverso+0x500>
			if (i == j) {
 8006346:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800634a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800634e:	429a      	cmp	r2, r3
 8006350:	d114      	bne.n	800637c <jacobianoInverso+0x4d4>
				Jci[i][j] = dot[i];
 8006352:	4a5f      	ldr	r2, [pc, #380]	; (80064d0 <jacobianoInverso+0x628>)
 8006354:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006358:	00db      	lsls	r3, r3, #3
 800635a:	4413      	add	r3, r2
 800635c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006360:	4c5e      	ldr	r4, [pc, #376]	; (80064dc <jacobianoInverso+0x634>)
 8006362:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8006366:	4613      	mov	r3, r2
 8006368:	005b      	lsls	r3, r3, #1
 800636a:	4413      	add	r3, r2
 800636c:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006370:	4413      	add	r3, r2
 8006372:	00db      	lsls	r3, r3, #3
 8006374:	4423      	add	r3, r4
 8006376:	e9c3 0100 	strd	r0, r1, [r3]
 800637a:	e010      	b.n	800639e <jacobianoInverso+0x4f6>
			} else {
				Jci[i][j] = 0;
 800637c:	4957      	ldr	r1, [pc, #348]	; (80064dc <jacobianoInverso+0x634>)
 800637e:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8006382:	4613      	mov	r3, r2
 8006384:	005b      	lsls	r3, r3, #1
 8006386:	4413      	add	r3, r2
 8006388:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800638c:	4413      	add	r3, r2
 800638e:	00db      	lsls	r3, r3, #3
 8006390:	4419      	add	r1, r3
 8006392:	f04f 0200 	mov.w	r2, #0
 8006396:	f04f 0300 	mov.w	r3, #0
 800639a:	e9c1 2300 	strd	r2, r3, [r1]
		for (int j = 0; j < 3; ++j) {
 800639e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80063a2:	3301      	adds	r3, #1
 80063a4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80063a8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80063ac:	2b02      	cmp	r3, #2
 80063ae:	ddca      	ble.n	8006346 <jacobianoInverso+0x49e>
	for (int i = 0; i < 3; ++i) {			//Jacobiano de la cinematica inversa
 80063b0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80063b4:	3301      	adds	r3, #1
 80063b6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80063ba:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80063be:	2b02      	cmp	r3, #2
 80063c0:	ddbd      	ble.n	800633e <jacobianoInverso+0x496>
			}
		}
	}

	Jci_inv = inversa(Jci);
 80063c2:	4c47      	ldr	r4, [pc, #284]	; (80064e0 <jacobianoInverso+0x638>)
 80063c4:	463b      	mov	r3, r7
 80063c6:	4945      	ldr	r1, [pc, #276]	; (80064dc <jacobianoInverso+0x634>)
 80063c8:	4618      	mov	r0, r3
 80063ca:	f7fd fcaf 	bl	8003d2c <inversa>
 80063ce:	4620      	mov	r0, r4
 80063d0:	463b      	mov	r3, r7
 80063d2:	2248      	movs	r2, #72	; 0x48
 80063d4:	4619      	mov	r1, r3
 80063d6:	f008 fd95 	bl	800ef04 <memcpy>
	Jinv = productMatriz(Jcd.m,Jci_inv.m);	//Jacobiano Inverso
 80063da:	4c42      	ldr	r4, [pc, #264]	; (80064e4 <jacobianoInverso+0x63c>)
 80063dc:	463b      	mov	r3, r7
 80063de:	4a40      	ldr	r2, [pc, #256]	; (80064e0 <jacobianoInverso+0x638>)
 80063e0:	4939      	ldr	r1, [pc, #228]	; (80064c8 <jacobianoInverso+0x620>)
 80063e2:	4618      	mov	r0, r3
 80063e4:	f7fd fd10 	bl	8003e08 <productMatriz>
 80063e8:	4620      	mov	r0, r4
 80063ea:	463b      	mov	r3, r7
 80063ec:	2248      	movs	r2, #72	; 0x48
 80063ee:	4619      	mov	r1, r3
 80063f0:	f008 fd88 	bl	800ef04 <memcpy>

	for (int i = 0; i < 3; ++i) {
 80063f4:	2300      	movs	r3, #0
 80063f6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80063fa:	e041      	b.n	8006480 <jacobianoInverso+0x5d8>
		double sum = 0;
 80063fc:	f04f 0200 	mov.w	r2, #0
 8006400:	f04f 0300 	mov.w	r3, #0
 8006404:	e9c7 2326 	strd	r2, r3, [r7, #152]	; 0x98
		for (int j = 0; j < 3; ++j) {
 8006408:	2300      	movs	r3, #0
 800640a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800640e:	e025      	b.n	800645c <jacobianoInverso+0x5b4>
			sum += sum + Jinv.m[i][j] * Vaux[j];
 8006410:	4934      	ldr	r1, [pc, #208]	; (80064e4 <jacobianoInverso+0x63c>)
 8006412:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8006416:	4613      	mov	r3, r2
 8006418:	005b      	lsls	r3, r3, #1
 800641a:	4413      	add	r3, r2
 800641c:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006420:	4413      	add	r3, r2
 8006422:	00db      	lsls	r3, r3, #3
 8006424:	440b      	add	r3, r1
 8006426:	ed93 6b00 	vldr	d6, [r3]
 800642a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800642e:	00db      	lsls	r3, r3, #3
 8006430:	33b0      	adds	r3, #176	; 0xb0
 8006432:	443b      	add	r3, r7
 8006434:	3b38      	subs	r3, #56	; 0x38
 8006436:	ed93 7b00 	vldr	d7, [r3]
 800643a:	ee26 6b07 	vmul.f64	d6, d6, d7
 800643e:	ed97 7b26 	vldr	d7, [r7, #152]	; 0x98
 8006442:	ee36 7b07 	vadd.f64	d7, d6, d7
 8006446:	ed97 6b26 	vldr	d6, [r7, #152]	; 0x98
 800644a:	ee36 7b07 	vadd.f64	d7, d6, d7
 800644e:	ed87 7b26 	vstr	d7, [r7, #152]	; 0x98
		for (int j = 0; j < 3; ++j) {
 8006452:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8006456:	3301      	adds	r3, #1
 8006458:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800645c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8006460:	2b02      	cmp	r3, #2
 8006462:	ddd5      	ble.n	8006410 <jacobianoInverso+0x568>
		}
		omega[i] = sum;
 8006464:	4a20      	ldr	r2, [pc, #128]	; (80064e8 <jacobianoInverso+0x640>)
 8006466:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800646a:	00db      	lsls	r3, r3, #3
 800646c:	18d1      	adds	r1, r2, r3
 800646e:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	; 0x98
 8006472:	e9c1 2300 	strd	r2, r3, [r1]
	for (int i = 0; i < 3; ++i) {
 8006476:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800647a:	3301      	adds	r3, #1
 800647c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8006480:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8006484:	2b02      	cmp	r3, #2
 8006486:	ddb9      	ble.n	80063fc <jacobianoInverso+0x554>
	}
	omega1 = omega[0];
 8006488:	4b17      	ldr	r3, [pc, #92]	; (80064e8 <jacobianoInverso+0x640>)
 800648a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800648e:	4917      	ldr	r1, [pc, #92]	; (80064ec <jacobianoInverso+0x644>)
 8006490:	e9c1 2300 	strd	r2, r3, [r1]
	omega2 = omega[1];
 8006494:	4b14      	ldr	r3, [pc, #80]	; (80064e8 <jacobianoInverso+0x640>)
 8006496:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800649a:	4915      	ldr	r1, [pc, #84]	; (80064f0 <jacobianoInverso+0x648>)
 800649c:	e9c1 2300 	strd	r2, r3, [r1]
	omega3 = omega[2];
 80064a0:	4b11      	ldr	r3, [pc, #68]	; (80064e8 <jacobianoInverso+0x640>)
 80064a2:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80064a6:	4913      	ldr	r1, [pc, #76]	; (80064f4 <jacobianoInverso+0x64c>)
 80064a8:	e9c1 2300 	strd	r2, r3, [r1]

}
 80064ac:	bf00      	nop
 80064ae:	37b4      	adds	r7, #180	; 0xb4
 80064b0:	46bd      	mov	sp, r7
 80064b2:	bd90      	pop	{r4, r7, pc}
 80064b4:	24000078 	.word	0x24000078
 80064b8:	24000880 	.word	0x24000880
 80064bc:	24000a48 	.word	0x24000a48
 80064c0:	24000090 	.word	0x24000090
 80064c4:	24000a60 	.word	0x24000a60
 80064c8:	24000910 	.word	0x24000910
 80064cc:	24000a30 	.word	0x24000a30
 80064d0:	24000a78 	.word	0x24000a78
 80064d4:	24000928 	.word	0x24000928
 80064d8:	24000940 	.word	0x24000940
 80064dc:	24000958 	.word	0x24000958
 80064e0:	240009a0 	.word	0x240009a0
 80064e4:	240009e8 	.word	0x240009e8
 80064e8:	24000470 	.word	0x24000470
 80064ec:	240004e8 	.word	0x240004e8
 80064f0:	240004f0 	.word	0x240004f0
 80064f4:	240004f8 	.word	0x240004f8

080064f8 <SetPerfilTimers>:

void SetPerfilTimers(double omeg1, double omeg2, double omeg3) {	// velAng en rpm
 80064f8:	b480      	push	{r7}
 80064fa:	b089      	sub	sp, #36	; 0x24
 80064fc:	af00      	add	r7, sp, #0
 80064fe:	ed87 0b04 	vstr	d0, [r7, #16]
 8006502:	ed87 1b02 	vstr	d1, [r7, #8]
 8006506:	ed87 2b00 	vstr	d2, [r7]
	 *   Funcion que configura el PWM del timer 12,13 14, para que el motor vaya a la
	 *   velocidad deseada.
	 *   Entrada: velocidad Angular de cada eslabon, en rad/s.
	 ----------------------------------------------------------------------- */

		rpm1 = (omeg1*((60.00)/(2.00*pi)));
 800650a:	ed97 7b04 	vldr	d7, [r7, #16]
 800650e:	ed9f 6b8c 	vldr	d6, [pc, #560]	; 8006740 <SetPerfilTimers+0x248>
 8006512:	ee27 7b06 	vmul.f64	d7, d7, d6
 8006516:	4b92      	ldr	r3, [pc, #584]	; (8006760 <SetPerfilTimers+0x268>)
 8006518:	ed83 7b00 	vstr	d7, [r3]
		rpm2 = (omeg2*((60.00)/(2.00*pi)));
 800651c:	ed97 7b02 	vldr	d7, [r7, #8]
 8006520:	ed9f 6b87 	vldr	d6, [pc, #540]	; 8006740 <SetPerfilTimers+0x248>
 8006524:	ee27 7b06 	vmul.f64	d7, d7, d6
 8006528:	4b8e      	ldr	r3, [pc, #568]	; (8006764 <SetPerfilTimers+0x26c>)
 800652a:	ed83 7b00 	vstr	d7, [r3]
		rpm3 = (omeg3*((60.00)/(2.00*pi)));
 800652e:	ed97 7b00 	vldr	d7, [r7]
 8006532:	ed9f 6b83 	vldr	d6, [pc, #524]	; 8006740 <SetPerfilTimers+0x248>
 8006536:	ee27 7b06 	vmul.f64	d7, d7, d6
 800653a:	4b8b      	ldr	r3, [pc, #556]	; (8006768 <SetPerfilTimers+0x270>)
 800653c:	ed83 7b00 	vstr	d7, [r3]
		if(rpm1<=0.1){
 8006540:	4b87      	ldr	r3, [pc, #540]	; (8006760 <SetPerfilTimers+0x268>)
 8006542:	ed93 7b00 	vldr	d7, [r3]
 8006546:	ed9f 6b80 	vldr	d6, [pc, #512]	; 8006748 <SetPerfilTimers+0x250>
 800654a:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800654e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006552:	d805      	bhi.n	8006560 <SetPerfilTimers+0x68>
			rpm1=0.1;
 8006554:	4982      	ldr	r1, [pc, #520]	; (8006760 <SetPerfilTimers+0x268>)
 8006556:	a37c      	add	r3, pc, #496	; (adr r3, 8006748 <SetPerfilTimers+0x250>)
 8006558:	e9d3 2300 	ldrd	r2, r3, [r3]
 800655c:	e9c1 2300 	strd	r2, r3, [r1]
		}
		if(rpm2<=0.1){
 8006560:	4b80      	ldr	r3, [pc, #512]	; (8006764 <SetPerfilTimers+0x26c>)
 8006562:	ed93 7b00 	vldr	d7, [r3]
 8006566:	ed9f 6b78 	vldr	d6, [pc, #480]	; 8006748 <SetPerfilTimers+0x250>
 800656a:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800656e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006572:	d805      	bhi.n	8006580 <SetPerfilTimers+0x88>
			rpm2=0.1;
 8006574:	497b      	ldr	r1, [pc, #492]	; (8006764 <SetPerfilTimers+0x26c>)
 8006576:	a374      	add	r3, pc, #464	; (adr r3, 8006748 <SetPerfilTimers+0x250>)
 8006578:	e9d3 2300 	ldrd	r2, r3, [r3]
 800657c:	e9c1 2300 	strd	r2, r3, [r1]
		}
		if(rpm3<=0.1){
 8006580:	4b79      	ldr	r3, [pc, #484]	; (8006768 <SetPerfilTimers+0x270>)
 8006582:	ed93 7b00 	vldr	d7, [r3]
 8006586:	ed9f 6b70 	vldr	d6, [pc, #448]	; 8006748 <SetPerfilTimers+0x250>
 800658a:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800658e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006592:	d805      	bhi.n	80065a0 <SetPerfilTimers+0xa8>
			rpm3=0.1;
 8006594:	4974      	ldr	r1, [pc, #464]	; (8006768 <SetPerfilTimers+0x270>)
 8006596:	a36c      	add	r3, pc, #432	; (adr r3, 8006748 <SetPerfilTimers+0x250>)
 8006598:	e9d3 2300 	ldrd	r2, r3, [r3]
 800659c:	e9c1 2300 	strd	r2, r3, [r1]
		}


		periodoM[0] = (((FCL * 60.00) / ((double)rpm1 * ((double)(TIM12->PSC) + 1.00) * 9600.00)) - 1.00);	//Fpwm = 64M / ((ARR+1)*(PSC+1)
 80065a0:	4b72      	ldr	r3, [pc, #456]	; (800676c <SetPerfilTimers+0x274>)
 80065a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065a4:	ee07 3a90 	vmov	s15, r3
 80065a8:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80065ac:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 80065b0:	ee37 6b06 	vadd.f64	d6, d7, d6
 80065b4:	4b6a      	ldr	r3, [pc, #424]	; (8006760 <SetPerfilTimers+0x268>)
 80065b6:	ed93 7b00 	vldr	d7, [r3]
 80065ba:	ee26 7b07 	vmul.f64	d7, d6, d7
 80065be:	ed9f 6b64 	vldr	d6, [pc, #400]	; 8006750 <SetPerfilTimers+0x258>
 80065c2:	ee27 6b06 	vmul.f64	d6, d7, d6
 80065c6:	ed9f 5b64 	vldr	d5, [pc, #400]	; 8006758 <SetPerfilTimers+0x260>
 80065ca:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80065ce:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 80065d2:	ee37 7b46 	vsub.f64	d7, d7, d6
 80065d6:	4b66      	ldr	r3, [pc, #408]	; (8006770 <SetPerfilTimers+0x278>)
 80065d8:	ed83 7b00 	vstr	d7, [r3]
		periodoM[1] = (((FCL * 60.00) / ((double)rpm2 * ((double)(TIM13->PSC) + 1.00) * 9600.00)) - 1.00);
 80065dc:	4b65      	ldr	r3, [pc, #404]	; (8006774 <SetPerfilTimers+0x27c>)
 80065de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065e0:	ee07 3a90 	vmov	s15, r3
 80065e4:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80065e8:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 80065ec:	ee37 6b06 	vadd.f64	d6, d7, d6
 80065f0:	4b5c      	ldr	r3, [pc, #368]	; (8006764 <SetPerfilTimers+0x26c>)
 80065f2:	ed93 7b00 	vldr	d7, [r3]
 80065f6:	ee26 7b07 	vmul.f64	d7, d6, d7
 80065fa:	ed9f 6b55 	vldr	d6, [pc, #340]	; 8006750 <SetPerfilTimers+0x258>
 80065fe:	ee27 6b06 	vmul.f64	d6, d7, d6
 8006602:	ed9f 5b55 	vldr	d5, [pc, #340]	; 8006758 <SetPerfilTimers+0x260>
 8006606:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800660a:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800660e:	ee37 7b46 	vsub.f64	d7, d7, d6
 8006612:	4b57      	ldr	r3, [pc, #348]	; (8006770 <SetPerfilTimers+0x278>)
 8006614:	ed83 7b02 	vstr	d7, [r3, #8]
		periodoM[2] = (((FCL * 60.00) / ((double)rpm3 * ((double)(TIM14->PSC) + 1.00) * 9600.00)) - 1.00);
 8006618:	4b57      	ldr	r3, [pc, #348]	; (8006778 <SetPerfilTimers+0x280>)
 800661a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800661c:	ee07 3a90 	vmov	s15, r3
 8006620:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8006624:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8006628:	ee37 6b06 	vadd.f64	d6, d7, d6
 800662c:	4b4e      	ldr	r3, [pc, #312]	; (8006768 <SetPerfilTimers+0x270>)
 800662e:	ed93 7b00 	vldr	d7, [r3]
 8006632:	ee26 7b07 	vmul.f64	d7, d6, d7
 8006636:	ed9f 6b46 	vldr	d6, [pc, #280]	; 8006750 <SetPerfilTimers+0x258>
 800663a:	ee27 6b06 	vmul.f64	d6, d7, d6
 800663e:	ed9f 5b46 	vldr	d5, [pc, #280]	; 8006758 <SetPerfilTimers+0x260>
 8006642:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8006646:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800664a:	ee37 7b46 	vsub.f64	d7, d7, d6
 800664e:	4b48      	ldr	r3, [pc, #288]	; (8006770 <SetPerfilTimers+0x278>)
 8006650:	ed83 7b04 	vstr	d7, [r3, #16]


		// Calculo el error por casteo a int, y cuando supero la unidad, lo compenzo --------------
		for (int i = 0; i < 3; ++i) {
 8006654:	2300      	movs	r3, #0
 8006656:	61fb      	str	r3, [r7, #28]
 8006658:	e0ad      	b.n	80067b6 <SetPerfilTimers+0x2be>
			ErrorPeriodo[i] = periodoM[i] - (double) ((int32_t) periodoM[i]);
 800665a:	4a45      	ldr	r2, [pc, #276]	; (8006770 <SetPerfilTimers+0x278>)
 800665c:	69fb      	ldr	r3, [r7, #28]
 800665e:	00db      	lsls	r3, r3, #3
 8006660:	4413      	add	r3, r2
 8006662:	ed93 6b00 	vldr	d6, [r3]
 8006666:	4a42      	ldr	r2, [pc, #264]	; (8006770 <SetPerfilTimers+0x278>)
 8006668:	69fb      	ldr	r3, [r7, #28]
 800666a:	00db      	lsls	r3, r3, #3
 800666c:	4413      	add	r3, r2
 800666e:	ed93 7b00 	vldr	d7, [r3]
 8006672:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8006676:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800667a:	ee36 7b47 	vsub.f64	d7, d6, d7
 800667e:	4a3f      	ldr	r2, [pc, #252]	; (800677c <SetPerfilTimers+0x284>)
 8006680:	69fb      	ldr	r3, [r7, #28]
 8006682:	00db      	lsls	r3, r3, #3
 8006684:	4413      	add	r3, r2
 8006686:	ed83 7b00 	vstr	d7, [r3]
			ErrorAcumuladoPeriodo[i] = ErrorAcumuladoPeriodo[i] + ErrorPeriodo[i];
 800668a:	4a3d      	ldr	r2, [pc, #244]	; (8006780 <SetPerfilTimers+0x288>)
 800668c:	69fb      	ldr	r3, [r7, #28]
 800668e:	00db      	lsls	r3, r3, #3
 8006690:	4413      	add	r3, r2
 8006692:	ed93 6b00 	vldr	d6, [r3]
 8006696:	4a39      	ldr	r2, [pc, #228]	; (800677c <SetPerfilTimers+0x284>)
 8006698:	69fb      	ldr	r3, [r7, #28]
 800669a:	00db      	lsls	r3, r3, #3
 800669c:	4413      	add	r3, r2
 800669e:	ed93 7b00 	vldr	d7, [r3]
 80066a2:	ee36 7b07 	vadd.f64	d7, d6, d7
 80066a6:	4a36      	ldr	r2, [pc, #216]	; (8006780 <SetPerfilTimers+0x288>)
 80066a8:	69fb      	ldr	r3, [r7, #28]
 80066aa:	00db      	lsls	r3, r3, #3
 80066ac:	4413      	add	r3, r2
 80066ae:	ed83 7b00 	vstr	d7, [r3]
			if (ErrorAcumuladoPeriodo[i] > 1) {
 80066b2:	4a33      	ldr	r2, [pc, #204]	; (8006780 <SetPerfilTimers+0x288>)
 80066b4:	69fb      	ldr	r3, [r7, #28]
 80066b6:	00db      	lsls	r3, r3, #3
 80066b8:	4413      	add	r3, r2
 80066ba:	ed93 7b00 	vldr	d7, [r3]
 80066be:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 80066c2:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80066c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80066ca:	dd1f      	ble.n	800670c <SetPerfilTimers+0x214>
				periodoM[i] = periodoM[i] + 1;
 80066cc:	4a28      	ldr	r2, [pc, #160]	; (8006770 <SetPerfilTimers+0x278>)
 80066ce:	69fb      	ldr	r3, [r7, #28]
 80066d0:	00db      	lsls	r3, r3, #3
 80066d2:	4413      	add	r3, r2
 80066d4:	ed93 7b00 	vldr	d7, [r3]
 80066d8:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 80066dc:	ee37 7b06 	vadd.f64	d7, d7, d6
 80066e0:	4a23      	ldr	r2, [pc, #140]	; (8006770 <SetPerfilTimers+0x278>)
 80066e2:	69fb      	ldr	r3, [r7, #28]
 80066e4:	00db      	lsls	r3, r3, #3
 80066e6:	4413      	add	r3, r2
 80066e8:	ed83 7b00 	vstr	d7, [r3]
				ErrorAcumuladoPeriodo[i] = ErrorAcumuladoPeriodo[i] - 1;
 80066ec:	4a24      	ldr	r2, [pc, #144]	; (8006780 <SetPerfilTimers+0x288>)
 80066ee:	69fb      	ldr	r3, [r7, #28]
 80066f0:	00db      	lsls	r3, r3, #3
 80066f2:	4413      	add	r3, r2
 80066f4:	ed93 7b00 	vldr	d7, [r3]
 80066f8:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 80066fc:	ee37 7b46 	vsub.f64	d7, d7, d6
 8006700:	4a1f      	ldr	r2, [pc, #124]	; (8006780 <SetPerfilTimers+0x288>)
 8006702:	69fb      	ldr	r3, [r7, #28]
 8006704:	00db      	lsls	r3, r3, #3
 8006706:	4413      	add	r3, r2
 8006708:	ed83 7b00 	vstr	d7, [r3]
			}
			if (periodoM[i] < 2) {
 800670c:	4a18      	ldr	r2, [pc, #96]	; (8006770 <SetPerfilTimers+0x278>)
 800670e:	69fb      	ldr	r3, [r7, #28]
 8006710:	00db      	lsls	r3, r3, #3
 8006712:	4413      	add	r3, r2
 8006714:	ed93 7b00 	vldr	d7, [r3]
 8006718:	eeb0 6b00 	vmov.f64	d6, #0	; 0x40000000  2.0
 800671c:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8006720:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006724:	d52e      	bpl.n	8006784 <SetPerfilTimers+0x28c>
				periodoM[i] = 0; // velocidad lineal de 10.000mm/s !!!
 8006726:	4a12      	ldr	r2, [pc, #72]	; (8006770 <SetPerfilTimers+0x278>)
 8006728:	69fb      	ldr	r3, [r7, #28]
 800672a:	00db      	lsls	r3, r3, #3
 800672c:	18d1      	adds	r1, r2, r3
 800672e:	f04f 0200 	mov.w	r2, #0
 8006732:	f04f 0300 	mov.w	r3, #0
 8006736:	e9c1 2300 	strd	r2, r3, [r1]
 800673a:	e039      	b.n	80067b0 <SetPerfilTimers+0x2b8>
 800673c:	f3af 8000 	nop.w
 8006740:	66ed2a99 	.word	0x66ed2a99
 8006744:	4023193d 	.word	0x4023193d
 8006748:	9999999a 	.word	0x9999999a
 800674c:	3fb99999 	.word	0x3fb99999
 8006750:	00000000 	.word	0x00000000
 8006754:	40c2c000 	.word	0x40c2c000
 8006758:	00000000 	.word	0x00000000
 800675c:	41ec9c38 	.word	0x41ec9c38
 8006760:	24000528 	.word	0x24000528
 8006764:	24000530 	.word	0x24000530
 8006768:	24000538 	.word	0x24000538
 800676c:	40001800 	.word	0x40001800
 8006770:	24000500 	.word	0x24000500
 8006774:	40001c00 	.word	0x40001c00
 8006778:	40002000 	.word	0x40002000
 800677c:	24000540 	.word	0x24000540
 8006780:	24000558 	.word	0x24000558
			}

			else if (periodoM[i] > pow(2, 16)) { 		// desborde de timer 32 bits
 8006784:	4a98      	ldr	r2, [pc, #608]	; (80069e8 <SetPerfilTimers+0x4f0>)
 8006786:	69fb      	ldr	r3, [r7, #28]
 8006788:	00db      	lsls	r3, r3, #3
 800678a:	4413      	add	r3, r2
 800678c:	ed93 7b00 	vldr	d7, [r3]
 8006790:	ed9f 6b8f 	vldr	d6, [pc, #572]	; 80069d0 <SetPerfilTimers+0x4d8>
 8006794:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8006798:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800679c:	dd08      	ble.n	80067b0 <SetPerfilTimers+0x2b8>
				periodoM[i] = pow(2, 16);
 800679e:	4a92      	ldr	r2, [pc, #584]	; (80069e8 <SetPerfilTimers+0x4f0>)
 80067a0:	69fb      	ldr	r3, [r7, #28]
 80067a2:	00db      	lsls	r3, r3, #3
 80067a4:	18d1      	adds	r1, r2, r3
 80067a6:	f04f 0200 	mov.w	r2, #0
 80067aa:	4b90      	ldr	r3, [pc, #576]	; (80069ec <SetPerfilTimers+0x4f4>)
 80067ac:	e9c1 2300 	strd	r2, r3, [r1]
		for (int i = 0; i < 3; ++i) {
 80067b0:	69fb      	ldr	r3, [r7, #28]
 80067b2:	3301      	adds	r3, #1
 80067b4:	61fb      	str	r3, [r7, #28]
 80067b6:	69fb      	ldr	r3, [r7, #28]
 80067b8:	2b02      	cmp	r3, #2
 80067ba:	f77f af4e 	ble.w	800665a <SetPerfilTimers+0x162>
			}
		}

			periodoM[0]=(uint32_t)(((FCL * 60.0) / (rpm1 * ((double)(TIM12->PSC) + 1.0) * 9600.0)) - 1.0);
 80067be:	4b8c      	ldr	r3, [pc, #560]	; (80069f0 <SetPerfilTimers+0x4f8>)
 80067c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067c2:	ee07 3a90 	vmov	s15, r3
 80067c6:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80067ca:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 80067ce:	ee37 6b06 	vadd.f64	d6, d7, d6
 80067d2:	4b88      	ldr	r3, [pc, #544]	; (80069f4 <SetPerfilTimers+0x4fc>)
 80067d4:	ed93 7b00 	vldr	d7, [r3]
 80067d8:	ee26 7b07 	vmul.f64	d7, d6, d7
 80067dc:	ed9f 6b7e 	vldr	d6, [pc, #504]	; 80069d8 <SetPerfilTimers+0x4e0>
 80067e0:	ee27 6b06 	vmul.f64	d6, d7, d6
 80067e4:	ed9f 5b7e 	vldr	d5, [pc, #504]	; 80069e0 <SetPerfilTimers+0x4e8>
 80067e8:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80067ec:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 80067f0:	ee37 7b46 	vsub.f64	d7, d7, d6
 80067f4:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80067f8:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80067fc:	4b7a      	ldr	r3, [pc, #488]	; (80069e8 <SetPerfilTimers+0x4f0>)
 80067fe:	ed83 7b00 	vstr	d7, [r3]
			periodoM[1]=(uint32_t)(((FCL * 60.0) / (rpm2 * ((double)(TIM13->PSC) + 1.0) * 9600.0)) - 1.0);
 8006802:	4b7d      	ldr	r3, [pc, #500]	; (80069f8 <SetPerfilTimers+0x500>)
 8006804:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006806:	ee07 3a90 	vmov	s15, r3
 800680a:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800680e:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8006812:	ee37 6b06 	vadd.f64	d6, d7, d6
 8006816:	4b79      	ldr	r3, [pc, #484]	; (80069fc <SetPerfilTimers+0x504>)
 8006818:	ed93 7b00 	vldr	d7, [r3]
 800681c:	ee26 7b07 	vmul.f64	d7, d6, d7
 8006820:	ed9f 6b6d 	vldr	d6, [pc, #436]	; 80069d8 <SetPerfilTimers+0x4e0>
 8006824:	ee27 6b06 	vmul.f64	d6, d7, d6
 8006828:	ed9f 5b6d 	vldr	d5, [pc, #436]	; 80069e0 <SetPerfilTimers+0x4e8>
 800682c:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8006830:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8006834:	ee37 7b46 	vsub.f64	d7, d7, d6
 8006838:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800683c:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8006840:	4b69      	ldr	r3, [pc, #420]	; (80069e8 <SetPerfilTimers+0x4f0>)
 8006842:	ed83 7b02 	vstr	d7, [r3, #8]
			periodoM[2]=(uint32_t)(((FCL * 60.0) / (rpm3 * ((double)(TIM14->PSC) + 1.0) * 9600.0)) - 1.0);
 8006846:	4b6e      	ldr	r3, [pc, #440]	; (8006a00 <SetPerfilTimers+0x508>)
 8006848:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800684a:	ee07 3a90 	vmov	s15, r3
 800684e:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8006852:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8006856:	ee37 6b06 	vadd.f64	d6, d7, d6
 800685a:	4b6a      	ldr	r3, [pc, #424]	; (8006a04 <SetPerfilTimers+0x50c>)
 800685c:	ed93 7b00 	vldr	d7, [r3]
 8006860:	ee26 7b07 	vmul.f64	d7, d6, d7
 8006864:	ed9f 6b5c 	vldr	d6, [pc, #368]	; 80069d8 <SetPerfilTimers+0x4e0>
 8006868:	ee27 6b06 	vmul.f64	d6, d7, d6
 800686c:	ed9f 5b5c 	vldr	d5, [pc, #368]	; 80069e0 <SetPerfilTimers+0x4e8>
 8006870:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8006874:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8006878:	ee37 7b46 	vsub.f64	d7, d7, d6
 800687c:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8006880:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8006884:	4b58      	ldr	r3, [pc, #352]	; (80069e8 <SetPerfilTimers+0x4f0>)
 8006886:	ed83 7b04 	vstr	d7, [r3, #16]


			if (TIM12->CNT > periodoM[0]) {
 800688a:	4b59      	ldr	r3, [pc, #356]	; (80069f0 <SetPerfilTimers+0x4f8>)
 800688c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800688e:	ee07 3a90 	vmov	s15, r3
 8006892:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 8006896:	4b54      	ldr	r3, [pc, #336]	; (80069e8 <SetPerfilTimers+0x4f0>)
 8006898:	ed93 7b00 	vldr	d7, [r3]
 800689c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80068a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80068a4:	dd0c      	ble.n	80068c0 <SetPerfilTimers+0x3c8>
						TIM12->CNT = periodoM[0] - 1;// Reinicio clock solo si hace falta y a un valor cercano a la interrupcion, para que no haga ese paso de nuevo
 80068a6:	4b50      	ldr	r3, [pc, #320]	; (80069e8 <SetPerfilTimers+0x4f0>)
 80068a8:	ed93 7b00 	vldr	d7, [r3]
 80068ac:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 80068b0:	ee37 7b46 	vsub.f64	d7, d7, d6
 80068b4:	4b4e      	ldr	r3, [pc, #312]	; (80069f0 <SetPerfilTimers+0x4f8>)
 80068b6:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80068ba:	ee17 2a90 	vmov	r2, s15
 80068be:	625a      	str	r2, [r3, #36]	; 0x24
			}
			if (TIM13->CNT > periodoM[1]) {
 80068c0:	4b4d      	ldr	r3, [pc, #308]	; (80069f8 <SetPerfilTimers+0x500>)
 80068c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068c4:	ee07 3a90 	vmov	s15, r3
 80068c8:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 80068cc:	4b46      	ldr	r3, [pc, #280]	; (80069e8 <SetPerfilTimers+0x4f0>)
 80068ce:	ed93 7b02 	vldr	d7, [r3, #8]
 80068d2:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80068d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80068da:	dd0c      	ble.n	80068f6 <SetPerfilTimers+0x3fe>
						TIM13->CNT = periodoM[1] - 1;// Reinicio clock solo si hace falta y a un valor cercano a la interrupcion, para que no haga ese paso de nuevo
 80068dc:	4b42      	ldr	r3, [pc, #264]	; (80069e8 <SetPerfilTimers+0x4f0>)
 80068de:	ed93 7b02 	vldr	d7, [r3, #8]
 80068e2:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 80068e6:	ee37 7b46 	vsub.f64	d7, d7, d6
 80068ea:	4b43      	ldr	r3, [pc, #268]	; (80069f8 <SetPerfilTimers+0x500>)
 80068ec:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80068f0:	ee17 2a90 	vmov	r2, s15
 80068f4:	625a      	str	r2, [r3, #36]	; 0x24
			}
			if (TIM14->CNT > periodoM[2]) {
 80068f6:	4b42      	ldr	r3, [pc, #264]	; (8006a00 <SetPerfilTimers+0x508>)
 80068f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068fa:	ee07 3a90 	vmov	s15, r3
 80068fe:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 8006902:	4b39      	ldr	r3, [pc, #228]	; (80069e8 <SetPerfilTimers+0x4f0>)
 8006904:	ed93 7b04 	vldr	d7, [r3, #16]
 8006908:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800690c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006910:	dd0c      	ble.n	800692c <SetPerfilTimers+0x434>
						TIM14->CNT = periodoM[2] - 1;// Reinicio clock solo si hace falta y a un valor cercano a la interrupcion, para que no haga ese paso de nuevo
 8006912:	4b35      	ldr	r3, [pc, #212]	; (80069e8 <SetPerfilTimers+0x4f0>)
 8006914:	ed93 7b04 	vldr	d7, [r3, #16]
 8006918:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800691c:	ee37 7b46 	vsub.f64	d7, d7, d6
 8006920:	4b37      	ldr	r3, [pc, #220]	; (8006a00 <SetPerfilTimers+0x508>)
 8006922:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8006926:	ee17 2a90 	vmov	r2, s15
 800692a:	625a      	str	r2, [r3, #36]	; 0x24
			}

			TIM12->ARR =periodoM[0];
 800692c:	4b2e      	ldr	r3, [pc, #184]	; (80069e8 <SetPerfilTimers+0x4f0>)
 800692e:	ed93 7b00 	vldr	d7, [r3]
 8006932:	4b2f      	ldr	r3, [pc, #188]	; (80069f0 <SetPerfilTimers+0x4f8>)
 8006934:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8006938:	ee17 2a90 	vmov	r2, s15
 800693c:	62da      	str	r2, [r3, #44]	; 0x2c
			TIM12->CCR1 = (uint32_t)((double)(TIM12->ARR) / 2.0);
 800693e:	4b2c      	ldr	r3, [pc, #176]	; (80069f0 <SetPerfilTimers+0x4f8>)
 8006940:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006942:	ee07 3a90 	vmov	s15, r3
 8006946:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 800694a:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800694e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8006952:	4b27      	ldr	r3, [pc, #156]	; (80069f0 <SetPerfilTimers+0x4f8>)
 8006954:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8006958:	ee17 2a90 	vmov	r2, s15
 800695c:	635a      	str	r2, [r3, #52]	; 0x34
			TIM13->ARR =periodoM[1];
 800695e:	4b22      	ldr	r3, [pc, #136]	; (80069e8 <SetPerfilTimers+0x4f0>)
 8006960:	ed93 7b02 	vldr	d7, [r3, #8]
 8006964:	4b24      	ldr	r3, [pc, #144]	; (80069f8 <SetPerfilTimers+0x500>)
 8006966:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800696a:	ee17 2a90 	vmov	r2, s15
 800696e:	62da      	str	r2, [r3, #44]	; 0x2c
			TIM13->CCR1 = (uint32_t)((double)(TIM13->ARR) / 2.0);
 8006970:	4b21      	ldr	r3, [pc, #132]	; (80069f8 <SetPerfilTimers+0x500>)
 8006972:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006974:	ee07 3a90 	vmov	s15, r3
 8006978:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 800697c:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8006980:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8006984:	4b1c      	ldr	r3, [pc, #112]	; (80069f8 <SetPerfilTimers+0x500>)
 8006986:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800698a:	ee17 2a90 	vmov	r2, s15
 800698e:	635a      	str	r2, [r3, #52]	; 0x34
			TIM14->ARR =periodoM[2];
 8006990:	4b15      	ldr	r3, [pc, #84]	; (80069e8 <SetPerfilTimers+0x4f0>)
 8006992:	ed93 7b04 	vldr	d7, [r3, #16]
 8006996:	4b1a      	ldr	r3, [pc, #104]	; (8006a00 <SetPerfilTimers+0x508>)
 8006998:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800699c:	ee17 2a90 	vmov	r2, s15
 80069a0:	62da      	str	r2, [r3, #44]	; 0x2c
			TIM14->CCR1 = (uint32_t)((double)(TIM14->ARR) / 2.0);
 80069a2:	4b17      	ldr	r3, [pc, #92]	; (8006a00 <SetPerfilTimers+0x508>)
 80069a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069a6:	ee07 3a90 	vmov	s15, r3
 80069aa:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 80069ae:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 80069b2:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80069b6:	4b12      	ldr	r3, [pc, #72]	; (8006a00 <SetPerfilTimers+0x508>)
 80069b8:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80069bc:	ee17 2a90 	vmov	r2, s15
 80069c0:	635a      	str	r2, [r3, #52]	; 0x34
			TIM13->CNT = Periodo[1] - 1;// Reinicio clock solo si hace falta y a un valor cercano a la interrupcion, para que no haga ese paso de nuevo
		}
		if (TIM14->CNT > Periodo[2]) {
			TIM14->CNT = Periodo[2] - 1;// Reinicio clock solo si hace falta y a un valor cercano a la interrupcion, para que no haga ese paso de nuevo
		}*/
}
 80069c2:	bf00      	nop
 80069c4:	3724      	adds	r7, #36	; 0x24
 80069c6:	46bd      	mov	sp, r7
 80069c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069cc:	4770      	bx	lr
 80069ce:	bf00      	nop
 80069d0:	00000000 	.word	0x00000000
 80069d4:	40f00000 	.word	0x40f00000
 80069d8:	00000000 	.word	0x00000000
 80069dc:	40c2c000 	.word	0x40c2c000
 80069e0:	00000000 	.word	0x00000000
 80069e4:	41ec9c38 	.word	0x41ec9c38
 80069e8:	24000500 	.word	0x24000500
 80069ec:	40f00000 	.word	0x40f00000
 80069f0:	40001800 	.word	0x40001800
 80069f4:	24000528 	.word	0x24000528
 80069f8:	40001c00 	.word	0x40001c00
 80069fc:	24000530 	.word	0x24000530
 8006a00:	40002000 	.word	0x40002000
 8006a04:	24000538 	.word	0x24000538

08006a08 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart3;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8006a08:	b580      	push	{r7, lr}
 8006a0a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8006a0c:	4b22      	ldr	r3, [pc, #136]	; (8006a98 <MX_USART1_UART_Init+0x90>)
 8006a0e:	4a23      	ldr	r2, [pc, #140]	; (8006a9c <MX_USART1_UART_Init+0x94>)
 8006a10:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8006a12:	4b21      	ldr	r3, [pc, #132]	; (8006a98 <MX_USART1_UART_Init+0x90>)
 8006a14:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8006a18:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8006a1a:	4b1f      	ldr	r3, [pc, #124]	; (8006a98 <MX_USART1_UART_Init+0x90>)
 8006a1c:	2200      	movs	r2, #0
 8006a1e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8006a20:	4b1d      	ldr	r3, [pc, #116]	; (8006a98 <MX_USART1_UART_Init+0x90>)
 8006a22:	2200      	movs	r2, #0
 8006a24:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8006a26:	4b1c      	ldr	r3, [pc, #112]	; (8006a98 <MX_USART1_UART_Init+0x90>)
 8006a28:	2200      	movs	r2, #0
 8006a2a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8006a2c:	4b1a      	ldr	r3, [pc, #104]	; (8006a98 <MX_USART1_UART_Init+0x90>)
 8006a2e:	220c      	movs	r2, #12
 8006a30:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8006a32:	4b19      	ldr	r3, [pc, #100]	; (8006a98 <MX_USART1_UART_Init+0x90>)
 8006a34:	2200      	movs	r2, #0
 8006a36:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8006a38:	4b17      	ldr	r3, [pc, #92]	; (8006a98 <MX_USART1_UART_Init+0x90>)
 8006a3a:	2200      	movs	r2, #0
 8006a3c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8006a3e:	4b16      	ldr	r3, [pc, #88]	; (8006a98 <MX_USART1_UART_Init+0x90>)
 8006a40:	2200      	movs	r2, #0
 8006a42:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8006a44:	4b14      	ldr	r3, [pc, #80]	; (8006a98 <MX_USART1_UART_Init+0x90>)
 8006a46:	2200      	movs	r2, #0
 8006a48:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8006a4a:	4b13      	ldr	r3, [pc, #76]	; (8006a98 <MX_USART1_UART_Init+0x90>)
 8006a4c:	2200      	movs	r2, #0
 8006a4e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8006a50:	4811      	ldr	r0, [pc, #68]	; (8006a98 <MX_USART1_UART_Init+0x90>)
 8006a52:	f005 fecf 	bl	800c7f4 <HAL_UART_Init>
 8006a56:	4603      	mov	r3, r0
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d001      	beq.n	8006a60 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8006a5c:	f7fc fdc0 	bl	80035e0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8006a60:	2100      	movs	r1, #0
 8006a62:	480d      	ldr	r0, [pc, #52]	; (8006a98 <MX_USART1_UART_Init+0x90>)
 8006a64:	f008 f959 	bl	800ed1a <HAL_UARTEx_SetTxFifoThreshold>
 8006a68:	4603      	mov	r3, r0
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d001      	beq.n	8006a72 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8006a6e:	f7fc fdb7 	bl	80035e0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8006a72:	2100      	movs	r1, #0
 8006a74:	4808      	ldr	r0, [pc, #32]	; (8006a98 <MX_USART1_UART_Init+0x90>)
 8006a76:	f008 f98e 	bl	800ed96 <HAL_UARTEx_SetRxFifoThreshold>
 8006a7a:	4603      	mov	r3, r0
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d001      	beq.n	8006a84 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8006a80:	f7fc fdae 	bl	80035e0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8006a84:	4804      	ldr	r0, [pc, #16]	; (8006a98 <MX_USART1_UART_Init+0x90>)
 8006a86:	f008 f90f 	bl	800eca8 <HAL_UARTEx_DisableFifoMode>
 8006a8a:	4603      	mov	r3, r0
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	d001      	beq.n	8006a94 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8006a90:	f7fc fda6 	bl	80035e0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8006a94:	bf00      	nop
 8006a96:	bd80      	pop	{r7, pc}
 8006a98:	24000bd0 	.word	0x24000bd0
 8006a9c:	40011000 	.word	0x40011000

08006aa0 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8006aa0:	b580      	push	{r7, lr}
 8006aa2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8006aa4:	4b22      	ldr	r3, [pc, #136]	; (8006b30 <MX_USART2_UART_Init+0x90>)
 8006aa6:	4a23      	ldr	r2, [pc, #140]	; (8006b34 <MX_USART2_UART_Init+0x94>)
 8006aa8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8006aaa:	4b21      	ldr	r3, [pc, #132]	; (8006b30 <MX_USART2_UART_Init+0x90>)
 8006aac:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8006ab0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8006ab2:	4b1f      	ldr	r3, [pc, #124]	; (8006b30 <MX_USART2_UART_Init+0x90>)
 8006ab4:	2200      	movs	r2, #0
 8006ab6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8006ab8:	4b1d      	ldr	r3, [pc, #116]	; (8006b30 <MX_USART2_UART_Init+0x90>)
 8006aba:	2200      	movs	r2, #0
 8006abc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8006abe:	4b1c      	ldr	r3, [pc, #112]	; (8006b30 <MX_USART2_UART_Init+0x90>)
 8006ac0:	2200      	movs	r2, #0
 8006ac2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8006ac4:	4b1a      	ldr	r3, [pc, #104]	; (8006b30 <MX_USART2_UART_Init+0x90>)
 8006ac6:	220c      	movs	r2, #12
 8006ac8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8006aca:	4b19      	ldr	r3, [pc, #100]	; (8006b30 <MX_USART2_UART_Init+0x90>)
 8006acc:	2200      	movs	r2, #0
 8006ace:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8006ad0:	4b17      	ldr	r3, [pc, #92]	; (8006b30 <MX_USART2_UART_Init+0x90>)
 8006ad2:	2200      	movs	r2, #0
 8006ad4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8006ad6:	4b16      	ldr	r3, [pc, #88]	; (8006b30 <MX_USART2_UART_Init+0x90>)
 8006ad8:	2200      	movs	r2, #0
 8006ada:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8006adc:	4b14      	ldr	r3, [pc, #80]	; (8006b30 <MX_USART2_UART_Init+0x90>)
 8006ade:	2200      	movs	r2, #0
 8006ae0:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8006ae2:	4b13      	ldr	r3, [pc, #76]	; (8006b30 <MX_USART2_UART_Init+0x90>)
 8006ae4:	2200      	movs	r2, #0
 8006ae6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8006ae8:	4811      	ldr	r0, [pc, #68]	; (8006b30 <MX_USART2_UART_Init+0x90>)
 8006aea:	f005 fe83 	bl	800c7f4 <HAL_UART_Init>
 8006aee:	4603      	mov	r3, r0
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	d001      	beq.n	8006af8 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8006af4:	f7fc fd74 	bl	80035e0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8006af8:	2100      	movs	r1, #0
 8006afa:	480d      	ldr	r0, [pc, #52]	; (8006b30 <MX_USART2_UART_Init+0x90>)
 8006afc:	f008 f90d 	bl	800ed1a <HAL_UARTEx_SetTxFifoThreshold>
 8006b00:	4603      	mov	r3, r0
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d001      	beq.n	8006b0a <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8006b06:	f7fc fd6b 	bl	80035e0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8006b0a:	2100      	movs	r1, #0
 8006b0c:	4808      	ldr	r0, [pc, #32]	; (8006b30 <MX_USART2_UART_Init+0x90>)
 8006b0e:	f008 f942 	bl	800ed96 <HAL_UARTEx_SetRxFifoThreshold>
 8006b12:	4603      	mov	r3, r0
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d001      	beq.n	8006b1c <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8006b18:	f7fc fd62 	bl	80035e0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8006b1c:	4804      	ldr	r0, [pc, #16]	; (8006b30 <MX_USART2_UART_Init+0x90>)
 8006b1e:	f008 f8c3 	bl	800eca8 <HAL_UARTEx_DisableFifoMode>
 8006b22:	4603      	mov	r3, r0
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d001      	beq.n	8006b2c <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8006b28:	f7fc fd5a 	bl	80035e0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8006b2c:	bf00      	nop
 8006b2e:	bd80      	pop	{r7, pc}
 8006b30:	24000c60 	.word	0x24000c60
 8006b34:	40004400 	.word	0x40004400

08006b38 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8006b38:	b580      	push	{r7, lr}
 8006b3a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8006b3c:	4b22      	ldr	r3, [pc, #136]	; (8006bc8 <MX_USART3_UART_Init+0x90>)
 8006b3e:	4a23      	ldr	r2, [pc, #140]	; (8006bcc <MX_USART3_UART_Init+0x94>)
 8006b40:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8006b42:	4b21      	ldr	r3, [pc, #132]	; (8006bc8 <MX_USART3_UART_Init+0x90>)
 8006b44:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8006b48:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8006b4a:	4b1f      	ldr	r3, [pc, #124]	; (8006bc8 <MX_USART3_UART_Init+0x90>)
 8006b4c:	2200      	movs	r2, #0
 8006b4e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8006b50:	4b1d      	ldr	r3, [pc, #116]	; (8006bc8 <MX_USART3_UART_Init+0x90>)
 8006b52:	2200      	movs	r2, #0
 8006b54:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8006b56:	4b1c      	ldr	r3, [pc, #112]	; (8006bc8 <MX_USART3_UART_Init+0x90>)
 8006b58:	2200      	movs	r2, #0
 8006b5a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8006b5c:	4b1a      	ldr	r3, [pc, #104]	; (8006bc8 <MX_USART3_UART_Init+0x90>)
 8006b5e:	220c      	movs	r2, #12
 8006b60:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8006b62:	4b19      	ldr	r3, [pc, #100]	; (8006bc8 <MX_USART3_UART_Init+0x90>)
 8006b64:	2200      	movs	r2, #0
 8006b66:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8006b68:	4b17      	ldr	r3, [pc, #92]	; (8006bc8 <MX_USART3_UART_Init+0x90>)
 8006b6a:	2200      	movs	r2, #0
 8006b6c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8006b6e:	4b16      	ldr	r3, [pc, #88]	; (8006bc8 <MX_USART3_UART_Init+0x90>)
 8006b70:	2200      	movs	r2, #0
 8006b72:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8006b74:	4b14      	ldr	r3, [pc, #80]	; (8006bc8 <MX_USART3_UART_Init+0x90>)
 8006b76:	2200      	movs	r2, #0
 8006b78:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8006b7a:	4b13      	ldr	r3, [pc, #76]	; (8006bc8 <MX_USART3_UART_Init+0x90>)
 8006b7c:	2200      	movs	r2, #0
 8006b7e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8006b80:	4811      	ldr	r0, [pc, #68]	; (8006bc8 <MX_USART3_UART_Init+0x90>)
 8006b82:	f005 fe37 	bl	800c7f4 <HAL_UART_Init>
 8006b86:	4603      	mov	r3, r0
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d001      	beq.n	8006b90 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8006b8c:	f7fc fd28 	bl	80035e0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8006b90:	2100      	movs	r1, #0
 8006b92:	480d      	ldr	r0, [pc, #52]	; (8006bc8 <MX_USART3_UART_Init+0x90>)
 8006b94:	f008 f8c1 	bl	800ed1a <HAL_UARTEx_SetTxFifoThreshold>
 8006b98:	4603      	mov	r3, r0
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d001      	beq.n	8006ba2 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8006b9e:	f7fc fd1f 	bl	80035e0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8006ba2:	2100      	movs	r1, #0
 8006ba4:	4808      	ldr	r0, [pc, #32]	; (8006bc8 <MX_USART3_UART_Init+0x90>)
 8006ba6:	f008 f8f6 	bl	800ed96 <HAL_UARTEx_SetRxFifoThreshold>
 8006baa:	4603      	mov	r3, r0
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d001      	beq.n	8006bb4 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8006bb0:	f7fc fd16 	bl	80035e0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8006bb4:	4804      	ldr	r0, [pc, #16]	; (8006bc8 <MX_USART3_UART_Init+0x90>)
 8006bb6:	f008 f877 	bl	800eca8 <HAL_UARTEx_DisableFifoMode>
 8006bba:	4603      	mov	r3, r0
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d001      	beq.n	8006bc4 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8006bc0:	f7fc fd0e 	bl	80035e0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8006bc4:	bf00      	nop
 8006bc6:	bd80      	pop	{r7, pc}
 8006bc8:	24000cf0 	.word	0x24000cf0
 8006bcc:	40004800 	.word	0x40004800

08006bd0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8006bd0:	b580      	push	{r7, lr}
 8006bd2:	b0be      	sub	sp, #248	; 0xf8
 8006bd4:	af00      	add	r7, sp, #0
 8006bd6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006bd8:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8006bdc:	2200      	movs	r2, #0
 8006bde:	601a      	str	r2, [r3, #0]
 8006be0:	605a      	str	r2, [r3, #4]
 8006be2:	609a      	str	r2, [r3, #8]
 8006be4:	60da      	str	r2, [r3, #12]
 8006be6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8006be8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006bec:	22bc      	movs	r2, #188	; 0xbc
 8006bee:	2100      	movs	r1, #0
 8006bf0:	4618      	mov	r0, r3
 8006bf2:	f008 f995 	bl	800ef20 <memset>
  if(uartHandle->Instance==USART1)
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	4a84      	ldr	r2, [pc, #528]	; (8006e0c <HAL_UART_MspInit+0x23c>)
 8006bfc:	4293      	cmp	r3, r2
 8006bfe:	d168      	bne.n	8006cd2 <HAL_UART_MspInit+0x102>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8006c00:	2301      	movs	r3, #1
 8006c02:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 8006c04:	2300      	movs	r3, #0
 8006c06:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8006c0a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006c0e:	4618      	mov	r0, r3
 8006c10:	f002 fa8c 	bl	800912c <HAL_RCCEx_PeriphCLKConfig>
 8006c14:	4603      	mov	r3, r0
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d001      	beq.n	8006c1e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8006c1a:	f7fc fce1 	bl	80035e0 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8006c1e:	4b7c      	ldr	r3, [pc, #496]	; (8006e10 <HAL_UART_MspInit+0x240>)
 8006c20:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006c24:	4a7a      	ldr	r2, [pc, #488]	; (8006e10 <HAL_UART_MspInit+0x240>)
 8006c26:	f043 0310 	orr.w	r3, r3, #16
 8006c2a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8006c2e:	4b78      	ldr	r3, [pc, #480]	; (8006e10 <HAL_UART_MspInit+0x240>)
 8006c30:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006c34:	f003 0310 	and.w	r3, r3, #16
 8006c38:	627b      	str	r3, [r7, #36]	; 0x24
 8006c3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006c3c:	4b74      	ldr	r3, [pc, #464]	; (8006e10 <HAL_UART_MspInit+0x240>)
 8006c3e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006c42:	4a73      	ldr	r2, [pc, #460]	; (8006e10 <HAL_UART_MspInit+0x240>)
 8006c44:	f043 0302 	orr.w	r3, r3, #2
 8006c48:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8006c4c:	4b70      	ldr	r3, [pc, #448]	; (8006e10 <HAL_UART_MspInit+0x240>)
 8006c4e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006c52:	f003 0302 	and.w	r3, r3, #2
 8006c56:	623b      	str	r3, [r7, #32]
 8006c58:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006c5a:	4b6d      	ldr	r3, [pc, #436]	; (8006e10 <HAL_UART_MspInit+0x240>)
 8006c5c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006c60:	4a6b      	ldr	r2, [pc, #428]	; (8006e10 <HAL_UART_MspInit+0x240>)
 8006c62:	f043 0301 	orr.w	r3, r3, #1
 8006c66:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8006c6a:	4b69      	ldr	r3, [pc, #420]	; (8006e10 <HAL_UART_MspInit+0x240>)
 8006c6c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006c70:	f003 0301 	and.w	r3, r3, #1
 8006c74:	61fb      	str	r3, [r7, #28]
 8006c76:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration
    PB15     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = Jetson_RX_Pin;
 8006c78:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006c7c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006c80:	2302      	movs	r3, #2
 8006c82:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006c86:	2300      	movs	r3, #0
 8006c88:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006c8c:	2300      	movs	r3, #0
 8006c8e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8006c92:	2304      	movs	r3, #4
 8006c94:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(Jetson_RX_GPIO_Port, &GPIO_InitStruct);
 8006c98:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8006c9c:	4619      	mov	r1, r3
 8006c9e:	485d      	ldr	r0, [pc, #372]	; (8006e14 <HAL_UART_MspInit+0x244>)
 8006ca0:	f001 f854 	bl	8007d4c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = Jetson_TX_Pin;
 8006ca4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006ca8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006cac:	2302      	movs	r3, #2
 8006cae:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006cb2:	2300      	movs	r3, #0
 8006cb4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006cb8:	2300      	movs	r3, #0
 8006cba:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8006cbe:	2307      	movs	r3, #7
 8006cc0:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(Jetson_TX_GPIO_Port, &GPIO_InitStruct);
 8006cc4:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8006cc8:	4619      	mov	r1, r3
 8006cca:	4853      	ldr	r0, [pc, #332]	; (8006e18 <HAL_UART_MspInit+0x248>)
 8006ccc:	f001 f83e 	bl	8007d4c <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8006cd0:	e097      	b.n	8006e02 <HAL_UART_MspInit+0x232>
  else if(uartHandle->Instance==USART2)
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	4a51      	ldr	r2, [pc, #324]	; (8006e1c <HAL_UART_MspInit+0x24c>)
 8006cd8:	4293      	cmp	r3, r2
 8006cda:	d142      	bne.n	8006d62 <HAL_UART_MspInit+0x192>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8006cdc:	2302      	movs	r3, #2
 8006cde:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8006ce0:	2300      	movs	r3, #0
 8006ce2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8006ce6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006cea:	4618      	mov	r0, r3
 8006cec:	f002 fa1e 	bl	800912c <HAL_RCCEx_PeriphCLKConfig>
 8006cf0:	4603      	mov	r3, r0
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d001      	beq.n	8006cfa <HAL_UART_MspInit+0x12a>
      Error_Handler();
 8006cf6:	f7fc fc73 	bl	80035e0 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8006cfa:	4b45      	ldr	r3, [pc, #276]	; (8006e10 <HAL_UART_MspInit+0x240>)
 8006cfc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006d00:	4a43      	ldr	r2, [pc, #268]	; (8006e10 <HAL_UART_MspInit+0x240>)
 8006d02:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006d06:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8006d0a:	4b41      	ldr	r3, [pc, #260]	; (8006e10 <HAL_UART_MspInit+0x240>)
 8006d0c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006d10:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006d14:	61bb      	str	r3, [r7, #24]
 8006d16:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006d18:	4b3d      	ldr	r3, [pc, #244]	; (8006e10 <HAL_UART_MspInit+0x240>)
 8006d1a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006d1e:	4a3c      	ldr	r2, [pc, #240]	; (8006e10 <HAL_UART_MspInit+0x240>)
 8006d20:	f043 0301 	orr.w	r3, r3, #1
 8006d24:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8006d28:	4b39      	ldr	r3, [pc, #228]	; (8006e10 <HAL_UART_MspInit+0x240>)
 8006d2a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006d2e:	f003 0301 	and.w	r3, r3, #1
 8006d32:	617b      	str	r3, [r7, #20]
 8006d34:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = NucleoF4_RX_Pin|NucleoF4_TX_Pin;
 8006d36:	230c      	movs	r3, #12
 8006d38:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006d3c:	2302      	movs	r3, #2
 8006d3e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006d42:	2300      	movs	r3, #0
 8006d44:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006d48:	2300      	movs	r3, #0
 8006d4a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8006d4e:	2307      	movs	r3, #7
 8006d50:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006d54:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8006d58:	4619      	mov	r1, r3
 8006d5a:	482f      	ldr	r0, [pc, #188]	; (8006e18 <HAL_UART_MspInit+0x248>)
 8006d5c:	f000 fff6 	bl	8007d4c <HAL_GPIO_Init>
}
 8006d60:	e04f      	b.n	8006e02 <HAL_UART_MspInit+0x232>
  else if(uartHandle->Instance==USART3)
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	4a2e      	ldr	r2, [pc, #184]	; (8006e20 <HAL_UART_MspInit+0x250>)
 8006d68:	4293      	cmp	r3, r2
 8006d6a:	d14a      	bne.n	8006e02 <HAL_UART_MspInit+0x232>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8006d6c:	2302      	movs	r3, #2
 8006d6e:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8006d70:	2300      	movs	r3, #0
 8006d72:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8006d76:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006d7a:	4618      	mov	r0, r3
 8006d7c:	f002 f9d6 	bl	800912c <HAL_RCCEx_PeriphCLKConfig>
 8006d80:	4603      	mov	r3, r0
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d001      	beq.n	8006d8a <HAL_UART_MspInit+0x1ba>
      Error_Handler();
 8006d86:	f7fc fc2b 	bl	80035e0 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8006d8a:	4b21      	ldr	r3, [pc, #132]	; (8006e10 <HAL_UART_MspInit+0x240>)
 8006d8c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006d90:	4a1f      	ldr	r2, [pc, #124]	; (8006e10 <HAL_UART_MspInit+0x240>)
 8006d92:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006d96:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8006d9a:	4b1d      	ldr	r3, [pc, #116]	; (8006e10 <HAL_UART_MspInit+0x240>)
 8006d9c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006da0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006da4:	613b      	str	r3, [r7, #16]
 8006da6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8006da8:	4b19      	ldr	r3, [pc, #100]	; (8006e10 <HAL_UART_MspInit+0x240>)
 8006daa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006dae:	4a18      	ldr	r2, [pc, #96]	; (8006e10 <HAL_UART_MspInit+0x240>)
 8006db0:	f043 0308 	orr.w	r3, r3, #8
 8006db4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8006db8:	4b15      	ldr	r3, [pc, #84]	; (8006e10 <HAL_UART_MspInit+0x240>)
 8006dba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006dbe:	f003 0308 	and.w	r3, r3, #8
 8006dc2:	60fb      	str	r3, [r7, #12]
 8006dc4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = STLINK_TX_Pin|STLINK_RX_Pin;
 8006dc6:	f44f 7340 	mov.w	r3, #768	; 0x300
 8006dca:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006dce:	2302      	movs	r3, #2
 8006dd0:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006dd4:	2300      	movs	r3, #0
 8006dd6:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006dda:	2300      	movs	r3, #0
 8006ddc:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8006de0:	2307      	movs	r3, #7
 8006de2:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006de6:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8006dea:	4619      	mov	r1, r3
 8006dec:	480d      	ldr	r0, [pc, #52]	; (8006e24 <HAL_UART_MspInit+0x254>)
 8006dee:	f000 ffad 	bl	8007d4c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 1, 1);
 8006df2:	2201      	movs	r2, #1
 8006df4:	2101      	movs	r1, #1
 8006df6:	2027      	movs	r0, #39	; 0x27
 8006df8:	f000 fa01 	bl	80071fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8006dfc:	2027      	movs	r0, #39	; 0x27
 8006dfe:	f000 fa18 	bl	8007232 <HAL_NVIC_EnableIRQ>
}
 8006e02:	bf00      	nop
 8006e04:	37f8      	adds	r7, #248	; 0xf8
 8006e06:	46bd      	mov	sp, r7
 8006e08:	bd80      	pop	{r7, pc}
 8006e0a:	bf00      	nop
 8006e0c:	40011000 	.word	0x40011000
 8006e10:	58024400 	.word	0x58024400
 8006e14:	58020400 	.word	0x58020400
 8006e18:	58020000 	.word	0x58020000
 8006e1c:	40004400 	.word	0x40004400
 8006e20:	40004800 	.word	0x40004800
 8006e24:	58020c00 	.word	0x58020c00

08006e28 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8006e28:	f8df d034 	ldr.w	sp, [pc, #52]	; 8006e60 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8006e2c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8006e2e:	e003      	b.n	8006e38 <LoopCopyDataInit>

08006e30 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8006e30:	4b0c      	ldr	r3, [pc, #48]	; (8006e64 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8006e32:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8006e34:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8006e36:	3104      	adds	r1, #4

08006e38 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8006e38:	480b      	ldr	r0, [pc, #44]	; (8006e68 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8006e3a:	4b0c      	ldr	r3, [pc, #48]	; (8006e6c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8006e3c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8006e3e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8006e40:	d3f6      	bcc.n	8006e30 <CopyDataInit>
  ldr  r2, =_sbss
 8006e42:	4a0b      	ldr	r2, [pc, #44]	; (8006e70 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8006e44:	e002      	b.n	8006e4c <LoopFillZerobss>

08006e46 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8006e46:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8006e48:	f842 3b04 	str.w	r3, [r2], #4

08006e4c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8006e4c:	4b09      	ldr	r3, [pc, #36]	; (8006e74 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8006e4e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8006e50:	d3f9      	bcc.n	8006e46 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8006e52:	f7fd f9b7 	bl	80041c4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8006e56:	f008 f831 	bl	800eebc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8006e5a:	f7fb ff69 	bl	8002d30 <main>
  bx  lr    
 8006e5e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8006e60:	24080000 	.word	0x24080000
  ldr  r3, =_sidata
 8006e64:	080142e8 	.word	0x080142e8
  ldr  r0, =_sdata
 8006e68:	24000000 	.word	0x24000000
  ldr  r3, =_edata
 8006e6c:	24000284 	.word	0x24000284
  ldr  r2, =_sbss
 8006e70:	24000288 	.word	0x24000288
  ldr  r3, = _ebss
 8006e74:	24000d94 	.word	0x24000d94

08006e78 <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8006e78:	e7fe      	b.n	8006e78 <ADC3_IRQHandler>
	...

08006e7c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8006e7c:	b580      	push	{r7, lr}
 8006e7e:	b082      	sub	sp, #8
 8006e80:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8006e82:	2003      	movs	r0, #3
 8006e84:	f000 f9b0 	bl	80071e8 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8006e88:	f001 ff7a 	bl	8008d80 <HAL_RCC_GetSysClockFreq>
 8006e8c:	4602      	mov	r2, r0
 8006e8e:	4b15      	ldr	r3, [pc, #84]	; (8006ee4 <HAL_Init+0x68>)
 8006e90:	699b      	ldr	r3, [r3, #24]
 8006e92:	0a1b      	lsrs	r3, r3, #8
 8006e94:	f003 030f 	and.w	r3, r3, #15
 8006e98:	4913      	ldr	r1, [pc, #76]	; (8006ee8 <HAL_Init+0x6c>)
 8006e9a:	5ccb      	ldrb	r3, [r1, r3]
 8006e9c:	f003 031f 	and.w	r3, r3, #31
 8006ea0:	fa22 f303 	lsr.w	r3, r2, r3
 8006ea4:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006ea6:	4b0f      	ldr	r3, [pc, #60]	; (8006ee4 <HAL_Init+0x68>)
 8006ea8:	699b      	ldr	r3, [r3, #24]
 8006eaa:	f003 030f 	and.w	r3, r3, #15
 8006eae:	4a0e      	ldr	r2, [pc, #56]	; (8006ee8 <HAL_Init+0x6c>)
 8006eb0:	5cd3      	ldrb	r3, [r2, r3]
 8006eb2:	f003 031f 	and.w	r3, r3, #31
 8006eb6:	687a      	ldr	r2, [r7, #4]
 8006eb8:	fa22 f303 	lsr.w	r3, r2, r3
 8006ebc:	4a0b      	ldr	r2, [pc, #44]	; (8006eec <HAL_Init+0x70>)
 8006ebe:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006ec0:	4a0b      	ldr	r2, [pc, #44]	; (8006ef0 <HAL_Init+0x74>)
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8006ec6:	2000      	movs	r0, #0
 8006ec8:	f000 f814 	bl	8006ef4 <HAL_InitTick>
 8006ecc:	4603      	mov	r3, r0
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d001      	beq.n	8006ed6 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8006ed2:	2301      	movs	r3, #1
 8006ed4:	e002      	b.n	8006edc <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8006ed6:	f7fc fffb 	bl	8003ed0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8006eda:	2300      	movs	r3, #0
}
 8006edc:	4618      	mov	r0, r3
 8006ede:	3708      	adds	r7, #8
 8006ee0:	46bd      	mov	sp, r7
 8006ee2:	bd80      	pop	{r7, pc}
 8006ee4:	58024400 	.word	0x58024400
 8006ee8:	080125b8 	.word	0x080125b8
 8006eec:	24000014 	.word	0x24000014
 8006ef0:	24000010 	.word	0x24000010

08006ef4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8006ef4:	b580      	push	{r7, lr}
 8006ef6:	b082      	sub	sp, #8
 8006ef8:	af00      	add	r7, sp, #0
 8006efa:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8006efc:	4b15      	ldr	r3, [pc, #84]	; (8006f54 <HAL_InitTick+0x60>)
 8006efe:	781b      	ldrb	r3, [r3, #0]
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d101      	bne.n	8006f08 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8006f04:	2301      	movs	r3, #1
 8006f06:	e021      	b.n	8006f4c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8006f08:	4b13      	ldr	r3, [pc, #76]	; (8006f58 <HAL_InitTick+0x64>)
 8006f0a:	681a      	ldr	r2, [r3, #0]
 8006f0c:	4b11      	ldr	r3, [pc, #68]	; (8006f54 <HAL_InitTick+0x60>)
 8006f0e:	781b      	ldrb	r3, [r3, #0]
 8006f10:	4619      	mov	r1, r3
 8006f12:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006f16:	fbb3 f3f1 	udiv	r3, r3, r1
 8006f1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f1e:	4618      	mov	r0, r3
 8006f20:	f000 f9a3 	bl	800726a <HAL_SYSTICK_Config>
 8006f24:	4603      	mov	r3, r0
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d001      	beq.n	8006f2e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8006f2a:	2301      	movs	r3, #1
 8006f2c:	e00e      	b.n	8006f4c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	2b0f      	cmp	r3, #15
 8006f32:	d80a      	bhi.n	8006f4a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8006f34:	2200      	movs	r2, #0
 8006f36:	6879      	ldr	r1, [r7, #4]
 8006f38:	f04f 30ff 	mov.w	r0, #4294967295
 8006f3c:	f000 f95f 	bl	80071fe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8006f40:	4a06      	ldr	r2, [pc, #24]	; (8006f5c <HAL_InitTick+0x68>)
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8006f46:	2300      	movs	r3, #0
 8006f48:	e000      	b.n	8006f4c <HAL_InitTick+0x58>
    return HAL_ERROR;
 8006f4a:	2301      	movs	r3, #1
}
 8006f4c:	4618      	mov	r0, r3
 8006f4e:	3708      	adds	r7, #8
 8006f50:	46bd      	mov	sp, r7
 8006f52:	bd80      	pop	{r7, pc}
 8006f54:	240000ac 	.word	0x240000ac
 8006f58:	24000010 	.word	0x24000010
 8006f5c:	240000a8 	.word	0x240000a8

08006f60 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8006f60:	b480      	push	{r7}
 8006f62:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8006f64:	4b06      	ldr	r3, [pc, #24]	; (8006f80 <HAL_IncTick+0x20>)
 8006f66:	781b      	ldrb	r3, [r3, #0]
 8006f68:	461a      	mov	r2, r3
 8006f6a:	4b06      	ldr	r3, [pc, #24]	; (8006f84 <HAL_IncTick+0x24>)
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	4413      	add	r3, r2
 8006f70:	4a04      	ldr	r2, [pc, #16]	; (8006f84 <HAL_IncTick+0x24>)
 8006f72:	6013      	str	r3, [r2, #0]
}
 8006f74:	bf00      	nop
 8006f76:	46bd      	mov	sp, r7
 8006f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f7c:	4770      	bx	lr
 8006f7e:	bf00      	nop
 8006f80:	240000ac 	.word	0x240000ac
 8006f84:	24000d80 	.word	0x24000d80

08006f88 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8006f88:	b480      	push	{r7}
 8006f8a:	af00      	add	r7, sp, #0
  return uwTick;
 8006f8c:	4b03      	ldr	r3, [pc, #12]	; (8006f9c <HAL_GetTick+0x14>)
 8006f8e:	681b      	ldr	r3, [r3, #0]
}
 8006f90:	4618      	mov	r0, r3
 8006f92:	46bd      	mov	sp, r7
 8006f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f98:	4770      	bx	lr
 8006f9a:	bf00      	nop
 8006f9c:	24000d80 	.word	0x24000d80

08006fa0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8006fa0:	b580      	push	{r7, lr}
 8006fa2:	b084      	sub	sp, #16
 8006fa4:	af00      	add	r7, sp, #0
 8006fa6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8006fa8:	f7ff ffee 	bl	8006f88 <HAL_GetTick>
 8006fac:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006fb8:	d005      	beq.n	8006fc6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8006fba:	4b0a      	ldr	r3, [pc, #40]	; (8006fe4 <HAL_Delay+0x44>)
 8006fbc:	781b      	ldrb	r3, [r3, #0]
 8006fbe:	461a      	mov	r2, r3
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	4413      	add	r3, r2
 8006fc4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8006fc6:	bf00      	nop
 8006fc8:	f7ff ffde 	bl	8006f88 <HAL_GetTick>
 8006fcc:	4602      	mov	r2, r0
 8006fce:	68bb      	ldr	r3, [r7, #8]
 8006fd0:	1ad3      	subs	r3, r2, r3
 8006fd2:	68fa      	ldr	r2, [r7, #12]
 8006fd4:	429a      	cmp	r2, r3
 8006fd6:	d8f7      	bhi.n	8006fc8 <HAL_Delay+0x28>
  {
  }
}
 8006fd8:	bf00      	nop
 8006fda:	bf00      	nop
 8006fdc:	3710      	adds	r7, #16
 8006fde:	46bd      	mov	sp, r7
 8006fe0:	bd80      	pop	{r7, pc}
 8006fe2:	bf00      	nop
 8006fe4:	240000ac 	.word	0x240000ac

08006fe8 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8006fe8:	b480      	push	{r7}
 8006fea:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8006fec:	4b03      	ldr	r3, [pc, #12]	; (8006ffc <HAL_GetREVID+0x14>)
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	0c1b      	lsrs	r3, r3, #16
}
 8006ff2:	4618      	mov	r0, r3
 8006ff4:	46bd      	mov	sp, r7
 8006ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ffa:	4770      	bx	lr
 8006ffc:	5c001000 	.word	0x5c001000

08007000 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007000:	b480      	push	{r7}
 8007002:	b085      	sub	sp, #20
 8007004:	af00      	add	r7, sp, #0
 8007006:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	f003 0307 	and.w	r3, r3, #7
 800700e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8007010:	4b0b      	ldr	r3, [pc, #44]	; (8007040 <__NVIC_SetPriorityGrouping+0x40>)
 8007012:	68db      	ldr	r3, [r3, #12]
 8007014:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8007016:	68ba      	ldr	r2, [r7, #8]
 8007018:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800701c:	4013      	ands	r3, r2
 800701e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8007024:	68bb      	ldr	r3, [r7, #8]
 8007026:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8007028:	4b06      	ldr	r3, [pc, #24]	; (8007044 <__NVIC_SetPriorityGrouping+0x44>)
 800702a:	4313      	orrs	r3, r2
 800702c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800702e:	4a04      	ldr	r2, [pc, #16]	; (8007040 <__NVIC_SetPriorityGrouping+0x40>)
 8007030:	68bb      	ldr	r3, [r7, #8]
 8007032:	60d3      	str	r3, [r2, #12]
}
 8007034:	bf00      	nop
 8007036:	3714      	adds	r7, #20
 8007038:	46bd      	mov	sp, r7
 800703a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800703e:	4770      	bx	lr
 8007040:	e000ed00 	.word	0xe000ed00
 8007044:	05fa0000 	.word	0x05fa0000

08007048 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8007048:	b480      	push	{r7}
 800704a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800704c:	4b04      	ldr	r3, [pc, #16]	; (8007060 <__NVIC_GetPriorityGrouping+0x18>)
 800704e:	68db      	ldr	r3, [r3, #12]
 8007050:	0a1b      	lsrs	r3, r3, #8
 8007052:	f003 0307 	and.w	r3, r3, #7
}
 8007056:	4618      	mov	r0, r3
 8007058:	46bd      	mov	sp, r7
 800705a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800705e:	4770      	bx	lr
 8007060:	e000ed00 	.word	0xe000ed00

08007064 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007064:	b480      	push	{r7}
 8007066:	b083      	sub	sp, #12
 8007068:	af00      	add	r7, sp, #0
 800706a:	4603      	mov	r3, r0
 800706c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800706e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007072:	2b00      	cmp	r3, #0
 8007074:	db0b      	blt.n	800708e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007076:	88fb      	ldrh	r3, [r7, #6]
 8007078:	f003 021f 	and.w	r2, r3, #31
 800707c:	4907      	ldr	r1, [pc, #28]	; (800709c <__NVIC_EnableIRQ+0x38>)
 800707e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007082:	095b      	lsrs	r3, r3, #5
 8007084:	2001      	movs	r0, #1
 8007086:	fa00 f202 	lsl.w	r2, r0, r2
 800708a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800708e:	bf00      	nop
 8007090:	370c      	adds	r7, #12
 8007092:	46bd      	mov	sp, r7
 8007094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007098:	4770      	bx	lr
 800709a:	bf00      	nop
 800709c:	e000e100 	.word	0xe000e100

080070a0 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80070a0:	b480      	push	{r7}
 80070a2:	b083      	sub	sp, #12
 80070a4:	af00      	add	r7, sp, #0
 80070a6:	4603      	mov	r3, r0
 80070a8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80070aa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	db12      	blt.n	80070d8 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80070b2:	88fb      	ldrh	r3, [r7, #6]
 80070b4:	f003 021f 	and.w	r2, r3, #31
 80070b8:	490a      	ldr	r1, [pc, #40]	; (80070e4 <__NVIC_DisableIRQ+0x44>)
 80070ba:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80070be:	095b      	lsrs	r3, r3, #5
 80070c0:	2001      	movs	r0, #1
 80070c2:	fa00 f202 	lsl.w	r2, r0, r2
 80070c6:	3320      	adds	r3, #32
 80070c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80070cc:	f3bf 8f4f 	dsb	sy
}
 80070d0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80070d2:	f3bf 8f6f 	isb	sy
}
 80070d6:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 80070d8:	bf00      	nop
 80070da:	370c      	adds	r7, #12
 80070dc:	46bd      	mov	sp, r7
 80070de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070e2:	4770      	bx	lr
 80070e4:	e000e100 	.word	0xe000e100

080070e8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80070e8:	b480      	push	{r7}
 80070ea:	b083      	sub	sp, #12
 80070ec:	af00      	add	r7, sp, #0
 80070ee:	4603      	mov	r3, r0
 80070f0:	6039      	str	r1, [r7, #0]
 80070f2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80070f4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	db0a      	blt.n	8007112 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80070fc:	683b      	ldr	r3, [r7, #0]
 80070fe:	b2da      	uxtb	r2, r3
 8007100:	490c      	ldr	r1, [pc, #48]	; (8007134 <__NVIC_SetPriority+0x4c>)
 8007102:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007106:	0112      	lsls	r2, r2, #4
 8007108:	b2d2      	uxtb	r2, r2
 800710a:	440b      	add	r3, r1
 800710c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8007110:	e00a      	b.n	8007128 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007112:	683b      	ldr	r3, [r7, #0]
 8007114:	b2da      	uxtb	r2, r3
 8007116:	4908      	ldr	r1, [pc, #32]	; (8007138 <__NVIC_SetPriority+0x50>)
 8007118:	88fb      	ldrh	r3, [r7, #6]
 800711a:	f003 030f 	and.w	r3, r3, #15
 800711e:	3b04      	subs	r3, #4
 8007120:	0112      	lsls	r2, r2, #4
 8007122:	b2d2      	uxtb	r2, r2
 8007124:	440b      	add	r3, r1
 8007126:	761a      	strb	r2, [r3, #24]
}
 8007128:	bf00      	nop
 800712a:	370c      	adds	r7, #12
 800712c:	46bd      	mov	sp, r7
 800712e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007132:	4770      	bx	lr
 8007134:	e000e100 	.word	0xe000e100
 8007138:	e000ed00 	.word	0xe000ed00

0800713c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800713c:	b480      	push	{r7}
 800713e:	b089      	sub	sp, #36	; 0x24
 8007140:	af00      	add	r7, sp, #0
 8007142:	60f8      	str	r0, [r7, #12]
 8007144:	60b9      	str	r1, [r7, #8]
 8007146:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	f003 0307 	and.w	r3, r3, #7
 800714e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8007150:	69fb      	ldr	r3, [r7, #28]
 8007152:	f1c3 0307 	rsb	r3, r3, #7
 8007156:	2b04      	cmp	r3, #4
 8007158:	bf28      	it	cs
 800715a:	2304      	movcs	r3, #4
 800715c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800715e:	69fb      	ldr	r3, [r7, #28]
 8007160:	3304      	adds	r3, #4
 8007162:	2b06      	cmp	r3, #6
 8007164:	d902      	bls.n	800716c <NVIC_EncodePriority+0x30>
 8007166:	69fb      	ldr	r3, [r7, #28]
 8007168:	3b03      	subs	r3, #3
 800716a:	e000      	b.n	800716e <NVIC_EncodePriority+0x32>
 800716c:	2300      	movs	r3, #0
 800716e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007170:	f04f 32ff 	mov.w	r2, #4294967295
 8007174:	69bb      	ldr	r3, [r7, #24]
 8007176:	fa02 f303 	lsl.w	r3, r2, r3
 800717a:	43da      	mvns	r2, r3
 800717c:	68bb      	ldr	r3, [r7, #8]
 800717e:	401a      	ands	r2, r3
 8007180:	697b      	ldr	r3, [r7, #20]
 8007182:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8007184:	f04f 31ff 	mov.w	r1, #4294967295
 8007188:	697b      	ldr	r3, [r7, #20]
 800718a:	fa01 f303 	lsl.w	r3, r1, r3
 800718e:	43d9      	mvns	r1, r3
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007194:	4313      	orrs	r3, r2
         );
}
 8007196:	4618      	mov	r0, r3
 8007198:	3724      	adds	r7, #36	; 0x24
 800719a:	46bd      	mov	sp, r7
 800719c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071a0:	4770      	bx	lr
	...

080071a4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80071a4:	b580      	push	{r7, lr}
 80071a6:	b082      	sub	sp, #8
 80071a8:	af00      	add	r7, sp, #0
 80071aa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	3b01      	subs	r3, #1
 80071b0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80071b4:	d301      	bcc.n	80071ba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80071b6:	2301      	movs	r3, #1
 80071b8:	e00f      	b.n	80071da <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80071ba:	4a0a      	ldr	r2, [pc, #40]	; (80071e4 <SysTick_Config+0x40>)
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	3b01      	subs	r3, #1
 80071c0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80071c2:	210f      	movs	r1, #15
 80071c4:	f04f 30ff 	mov.w	r0, #4294967295
 80071c8:	f7ff ff8e 	bl	80070e8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80071cc:	4b05      	ldr	r3, [pc, #20]	; (80071e4 <SysTick_Config+0x40>)
 80071ce:	2200      	movs	r2, #0
 80071d0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80071d2:	4b04      	ldr	r3, [pc, #16]	; (80071e4 <SysTick_Config+0x40>)
 80071d4:	2207      	movs	r2, #7
 80071d6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80071d8:	2300      	movs	r3, #0
}
 80071da:	4618      	mov	r0, r3
 80071dc:	3708      	adds	r7, #8
 80071de:	46bd      	mov	sp, r7
 80071e0:	bd80      	pop	{r7, pc}
 80071e2:	bf00      	nop
 80071e4:	e000e010 	.word	0xe000e010

080071e8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80071e8:	b580      	push	{r7, lr}
 80071ea:	b082      	sub	sp, #8
 80071ec:	af00      	add	r7, sp, #0
 80071ee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80071f0:	6878      	ldr	r0, [r7, #4]
 80071f2:	f7ff ff05 	bl	8007000 <__NVIC_SetPriorityGrouping>
}
 80071f6:	bf00      	nop
 80071f8:	3708      	adds	r7, #8
 80071fa:	46bd      	mov	sp, r7
 80071fc:	bd80      	pop	{r7, pc}

080071fe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80071fe:	b580      	push	{r7, lr}
 8007200:	b086      	sub	sp, #24
 8007202:	af00      	add	r7, sp, #0
 8007204:	4603      	mov	r3, r0
 8007206:	60b9      	str	r1, [r7, #8]
 8007208:	607a      	str	r2, [r7, #4]
 800720a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800720c:	f7ff ff1c 	bl	8007048 <__NVIC_GetPriorityGrouping>
 8007210:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8007212:	687a      	ldr	r2, [r7, #4]
 8007214:	68b9      	ldr	r1, [r7, #8]
 8007216:	6978      	ldr	r0, [r7, #20]
 8007218:	f7ff ff90 	bl	800713c <NVIC_EncodePriority>
 800721c:	4602      	mov	r2, r0
 800721e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8007222:	4611      	mov	r1, r2
 8007224:	4618      	mov	r0, r3
 8007226:	f7ff ff5f 	bl	80070e8 <__NVIC_SetPriority>
}
 800722a:	bf00      	nop
 800722c:	3718      	adds	r7, #24
 800722e:	46bd      	mov	sp, r7
 8007230:	bd80      	pop	{r7, pc}

08007232 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007232:	b580      	push	{r7, lr}
 8007234:	b082      	sub	sp, #8
 8007236:	af00      	add	r7, sp, #0
 8007238:	4603      	mov	r3, r0
 800723a:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800723c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007240:	4618      	mov	r0, r3
 8007242:	f7ff ff0f 	bl	8007064 <__NVIC_EnableIRQ>
}
 8007246:	bf00      	nop
 8007248:	3708      	adds	r7, #8
 800724a:	46bd      	mov	sp, r7
 800724c:	bd80      	pop	{r7, pc}

0800724e <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800724e:	b580      	push	{r7, lr}
 8007250:	b082      	sub	sp, #8
 8007252:	af00      	add	r7, sp, #0
 8007254:	4603      	mov	r3, r0
 8007256:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8007258:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800725c:	4618      	mov	r0, r3
 800725e:	f7ff ff1f 	bl	80070a0 <__NVIC_DisableIRQ>
}
 8007262:	bf00      	nop
 8007264:	3708      	adds	r7, #8
 8007266:	46bd      	mov	sp, r7
 8007268:	bd80      	pop	{r7, pc}

0800726a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800726a:	b580      	push	{r7, lr}
 800726c:	b082      	sub	sp, #8
 800726e:	af00      	add	r7, sp, #0
 8007270:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8007272:	6878      	ldr	r0, [r7, #4]
 8007274:	f7ff ff96 	bl	80071a4 <SysTick_Config>
 8007278:	4603      	mov	r3, r0
}
 800727a:	4618      	mov	r0, r3
 800727c:	3708      	adds	r7, #8
 800727e:	46bd      	mov	sp, r7
 8007280:	bd80      	pop	{r7, pc}
	...

08007284 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8007284:	b580      	push	{r7, lr}
 8007286:	b086      	sub	sp, #24
 8007288:	af00      	add	r7, sp, #0
 800728a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 800728c:	f7ff fe7c 	bl	8006f88 <HAL_GetTick>
 8007290:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	2b00      	cmp	r3, #0
 8007296:	d101      	bne.n	800729c <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8007298:	2301      	movs	r3, #1
 800729a:	e2dc      	b.n	8007856 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80072a2:	b2db      	uxtb	r3, r3
 80072a4:	2b02      	cmp	r3, #2
 80072a6:	d008      	beq.n	80072ba <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	2280      	movs	r2, #128	; 0x80
 80072ac:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	2200      	movs	r2, #0
 80072b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 80072b6:	2301      	movs	r3, #1
 80072b8:	e2cd      	b.n	8007856 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	4a76      	ldr	r2, [pc, #472]	; (8007498 <HAL_DMA_Abort+0x214>)
 80072c0:	4293      	cmp	r3, r2
 80072c2:	d04a      	beq.n	800735a <HAL_DMA_Abort+0xd6>
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	4a74      	ldr	r2, [pc, #464]	; (800749c <HAL_DMA_Abort+0x218>)
 80072ca:	4293      	cmp	r3, r2
 80072cc:	d045      	beq.n	800735a <HAL_DMA_Abort+0xd6>
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	4a73      	ldr	r2, [pc, #460]	; (80074a0 <HAL_DMA_Abort+0x21c>)
 80072d4:	4293      	cmp	r3, r2
 80072d6:	d040      	beq.n	800735a <HAL_DMA_Abort+0xd6>
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	4a71      	ldr	r2, [pc, #452]	; (80074a4 <HAL_DMA_Abort+0x220>)
 80072de:	4293      	cmp	r3, r2
 80072e0:	d03b      	beq.n	800735a <HAL_DMA_Abort+0xd6>
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	4a70      	ldr	r2, [pc, #448]	; (80074a8 <HAL_DMA_Abort+0x224>)
 80072e8:	4293      	cmp	r3, r2
 80072ea:	d036      	beq.n	800735a <HAL_DMA_Abort+0xd6>
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	4a6e      	ldr	r2, [pc, #440]	; (80074ac <HAL_DMA_Abort+0x228>)
 80072f2:	4293      	cmp	r3, r2
 80072f4:	d031      	beq.n	800735a <HAL_DMA_Abort+0xd6>
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	4a6d      	ldr	r2, [pc, #436]	; (80074b0 <HAL_DMA_Abort+0x22c>)
 80072fc:	4293      	cmp	r3, r2
 80072fe:	d02c      	beq.n	800735a <HAL_DMA_Abort+0xd6>
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	4a6b      	ldr	r2, [pc, #428]	; (80074b4 <HAL_DMA_Abort+0x230>)
 8007306:	4293      	cmp	r3, r2
 8007308:	d027      	beq.n	800735a <HAL_DMA_Abort+0xd6>
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	4a6a      	ldr	r2, [pc, #424]	; (80074b8 <HAL_DMA_Abort+0x234>)
 8007310:	4293      	cmp	r3, r2
 8007312:	d022      	beq.n	800735a <HAL_DMA_Abort+0xd6>
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	4a68      	ldr	r2, [pc, #416]	; (80074bc <HAL_DMA_Abort+0x238>)
 800731a:	4293      	cmp	r3, r2
 800731c:	d01d      	beq.n	800735a <HAL_DMA_Abort+0xd6>
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	4a67      	ldr	r2, [pc, #412]	; (80074c0 <HAL_DMA_Abort+0x23c>)
 8007324:	4293      	cmp	r3, r2
 8007326:	d018      	beq.n	800735a <HAL_DMA_Abort+0xd6>
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	4a65      	ldr	r2, [pc, #404]	; (80074c4 <HAL_DMA_Abort+0x240>)
 800732e:	4293      	cmp	r3, r2
 8007330:	d013      	beq.n	800735a <HAL_DMA_Abort+0xd6>
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	4a64      	ldr	r2, [pc, #400]	; (80074c8 <HAL_DMA_Abort+0x244>)
 8007338:	4293      	cmp	r3, r2
 800733a:	d00e      	beq.n	800735a <HAL_DMA_Abort+0xd6>
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	4a62      	ldr	r2, [pc, #392]	; (80074cc <HAL_DMA_Abort+0x248>)
 8007342:	4293      	cmp	r3, r2
 8007344:	d009      	beq.n	800735a <HAL_DMA_Abort+0xd6>
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	4a61      	ldr	r2, [pc, #388]	; (80074d0 <HAL_DMA_Abort+0x24c>)
 800734c:	4293      	cmp	r3, r2
 800734e:	d004      	beq.n	800735a <HAL_DMA_Abort+0xd6>
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	4a5f      	ldr	r2, [pc, #380]	; (80074d4 <HAL_DMA_Abort+0x250>)
 8007356:	4293      	cmp	r3, r2
 8007358:	d101      	bne.n	800735e <HAL_DMA_Abort+0xda>
 800735a:	2301      	movs	r3, #1
 800735c:	e000      	b.n	8007360 <HAL_DMA_Abort+0xdc>
 800735e:	2300      	movs	r3, #0
 8007360:	2b00      	cmp	r3, #0
 8007362:	d013      	beq.n	800738c <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	681a      	ldr	r2, [r3, #0]
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	f022 021e 	bic.w	r2, r2, #30
 8007372:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	695a      	ldr	r2, [r3, #20]
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007382:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	617b      	str	r3, [r7, #20]
 800738a:	e00a      	b.n	80073a2 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	681a      	ldr	r2, [r3, #0]
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	f022 020e 	bic.w	r2, r2, #14
 800739a:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	4a3c      	ldr	r2, [pc, #240]	; (8007498 <HAL_DMA_Abort+0x214>)
 80073a8:	4293      	cmp	r3, r2
 80073aa:	d072      	beq.n	8007492 <HAL_DMA_Abort+0x20e>
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	4a3a      	ldr	r2, [pc, #232]	; (800749c <HAL_DMA_Abort+0x218>)
 80073b2:	4293      	cmp	r3, r2
 80073b4:	d06d      	beq.n	8007492 <HAL_DMA_Abort+0x20e>
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	4a39      	ldr	r2, [pc, #228]	; (80074a0 <HAL_DMA_Abort+0x21c>)
 80073bc:	4293      	cmp	r3, r2
 80073be:	d068      	beq.n	8007492 <HAL_DMA_Abort+0x20e>
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	4a37      	ldr	r2, [pc, #220]	; (80074a4 <HAL_DMA_Abort+0x220>)
 80073c6:	4293      	cmp	r3, r2
 80073c8:	d063      	beq.n	8007492 <HAL_DMA_Abort+0x20e>
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	4a36      	ldr	r2, [pc, #216]	; (80074a8 <HAL_DMA_Abort+0x224>)
 80073d0:	4293      	cmp	r3, r2
 80073d2:	d05e      	beq.n	8007492 <HAL_DMA_Abort+0x20e>
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	4a34      	ldr	r2, [pc, #208]	; (80074ac <HAL_DMA_Abort+0x228>)
 80073da:	4293      	cmp	r3, r2
 80073dc:	d059      	beq.n	8007492 <HAL_DMA_Abort+0x20e>
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	4a33      	ldr	r2, [pc, #204]	; (80074b0 <HAL_DMA_Abort+0x22c>)
 80073e4:	4293      	cmp	r3, r2
 80073e6:	d054      	beq.n	8007492 <HAL_DMA_Abort+0x20e>
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	4a31      	ldr	r2, [pc, #196]	; (80074b4 <HAL_DMA_Abort+0x230>)
 80073ee:	4293      	cmp	r3, r2
 80073f0:	d04f      	beq.n	8007492 <HAL_DMA_Abort+0x20e>
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	4a30      	ldr	r2, [pc, #192]	; (80074b8 <HAL_DMA_Abort+0x234>)
 80073f8:	4293      	cmp	r3, r2
 80073fa:	d04a      	beq.n	8007492 <HAL_DMA_Abort+0x20e>
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	4a2e      	ldr	r2, [pc, #184]	; (80074bc <HAL_DMA_Abort+0x238>)
 8007402:	4293      	cmp	r3, r2
 8007404:	d045      	beq.n	8007492 <HAL_DMA_Abort+0x20e>
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	4a2d      	ldr	r2, [pc, #180]	; (80074c0 <HAL_DMA_Abort+0x23c>)
 800740c:	4293      	cmp	r3, r2
 800740e:	d040      	beq.n	8007492 <HAL_DMA_Abort+0x20e>
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	4a2b      	ldr	r2, [pc, #172]	; (80074c4 <HAL_DMA_Abort+0x240>)
 8007416:	4293      	cmp	r3, r2
 8007418:	d03b      	beq.n	8007492 <HAL_DMA_Abort+0x20e>
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	4a2a      	ldr	r2, [pc, #168]	; (80074c8 <HAL_DMA_Abort+0x244>)
 8007420:	4293      	cmp	r3, r2
 8007422:	d036      	beq.n	8007492 <HAL_DMA_Abort+0x20e>
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	4a28      	ldr	r2, [pc, #160]	; (80074cc <HAL_DMA_Abort+0x248>)
 800742a:	4293      	cmp	r3, r2
 800742c:	d031      	beq.n	8007492 <HAL_DMA_Abort+0x20e>
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	4a27      	ldr	r2, [pc, #156]	; (80074d0 <HAL_DMA_Abort+0x24c>)
 8007434:	4293      	cmp	r3, r2
 8007436:	d02c      	beq.n	8007492 <HAL_DMA_Abort+0x20e>
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	4a25      	ldr	r2, [pc, #148]	; (80074d4 <HAL_DMA_Abort+0x250>)
 800743e:	4293      	cmp	r3, r2
 8007440:	d027      	beq.n	8007492 <HAL_DMA_Abort+0x20e>
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	4a24      	ldr	r2, [pc, #144]	; (80074d8 <HAL_DMA_Abort+0x254>)
 8007448:	4293      	cmp	r3, r2
 800744a:	d022      	beq.n	8007492 <HAL_DMA_Abort+0x20e>
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	4a22      	ldr	r2, [pc, #136]	; (80074dc <HAL_DMA_Abort+0x258>)
 8007452:	4293      	cmp	r3, r2
 8007454:	d01d      	beq.n	8007492 <HAL_DMA_Abort+0x20e>
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	4a21      	ldr	r2, [pc, #132]	; (80074e0 <HAL_DMA_Abort+0x25c>)
 800745c:	4293      	cmp	r3, r2
 800745e:	d018      	beq.n	8007492 <HAL_DMA_Abort+0x20e>
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	4a1f      	ldr	r2, [pc, #124]	; (80074e4 <HAL_DMA_Abort+0x260>)
 8007466:	4293      	cmp	r3, r2
 8007468:	d013      	beq.n	8007492 <HAL_DMA_Abort+0x20e>
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	4a1e      	ldr	r2, [pc, #120]	; (80074e8 <HAL_DMA_Abort+0x264>)
 8007470:	4293      	cmp	r3, r2
 8007472:	d00e      	beq.n	8007492 <HAL_DMA_Abort+0x20e>
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	4a1c      	ldr	r2, [pc, #112]	; (80074ec <HAL_DMA_Abort+0x268>)
 800747a:	4293      	cmp	r3, r2
 800747c:	d009      	beq.n	8007492 <HAL_DMA_Abort+0x20e>
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	4a1b      	ldr	r2, [pc, #108]	; (80074f0 <HAL_DMA_Abort+0x26c>)
 8007484:	4293      	cmp	r3, r2
 8007486:	d004      	beq.n	8007492 <HAL_DMA_Abort+0x20e>
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	4a19      	ldr	r2, [pc, #100]	; (80074f4 <HAL_DMA_Abort+0x270>)
 800748e:	4293      	cmp	r3, r2
 8007490:	d132      	bne.n	80074f8 <HAL_DMA_Abort+0x274>
 8007492:	2301      	movs	r3, #1
 8007494:	e031      	b.n	80074fa <HAL_DMA_Abort+0x276>
 8007496:	bf00      	nop
 8007498:	40020010 	.word	0x40020010
 800749c:	40020028 	.word	0x40020028
 80074a0:	40020040 	.word	0x40020040
 80074a4:	40020058 	.word	0x40020058
 80074a8:	40020070 	.word	0x40020070
 80074ac:	40020088 	.word	0x40020088
 80074b0:	400200a0 	.word	0x400200a0
 80074b4:	400200b8 	.word	0x400200b8
 80074b8:	40020410 	.word	0x40020410
 80074bc:	40020428 	.word	0x40020428
 80074c0:	40020440 	.word	0x40020440
 80074c4:	40020458 	.word	0x40020458
 80074c8:	40020470 	.word	0x40020470
 80074cc:	40020488 	.word	0x40020488
 80074d0:	400204a0 	.word	0x400204a0
 80074d4:	400204b8 	.word	0x400204b8
 80074d8:	58025408 	.word	0x58025408
 80074dc:	5802541c 	.word	0x5802541c
 80074e0:	58025430 	.word	0x58025430
 80074e4:	58025444 	.word	0x58025444
 80074e8:	58025458 	.word	0x58025458
 80074ec:	5802546c 	.word	0x5802546c
 80074f0:	58025480 	.word	0x58025480
 80074f4:	58025494 	.word	0x58025494
 80074f8:	2300      	movs	r3, #0
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d007      	beq.n	800750e <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007502:	681a      	ldr	r2, [r3, #0]
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007508:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800750c:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	4a6d      	ldr	r2, [pc, #436]	; (80076c8 <HAL_DMA_Abort+0x444>)
 8007514:	4293      	cmp	r3, r2
 8007516:	d04a      	beq.n	80075ae <HAL_DMA_Abort+0x32a>
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	4a6b      	ldr	r2, [pc, #428]	; (80076cc <HAL_DMA_Abort+0x448>)
 800751e:	4293      	cmp	r3, r2
 8007520:	d045      	beq.n	80075ae <HAL_DMA_Abort+0x32a>
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	4a6a      	ldr	r2, [pc, #424]	; (80076d0 <HAL_DMA_Abort+0x44c>)
 8007528:	4293      	cmp	r3, r2
 800752a:	d040      	beq.n	80075ae <HAL_DMA_Abort+0x32a>
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	4a68      	ldr	r2, [pc, #416]	; (80076d4 <HAL_DMA_Abort+0x450>)
 8007532:	4293      	cmp	r3, r2
 8007534:	d03b      	beq.n	80075ae <HAL_DMA_Abort+0x32a>
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	4a67      	ldr	r2, [pc, #412]	; (80076d8 <HAL_DMA_Abort+0x454>)
 800753c:	4293      	cmp	r3, r2
 800753e:	d036      	beq.n	80075ae <HAL_DMA_Abort+0x32a>
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	4a65      	ldr	r2, [pc, #404]	; (80076dc <HAL_DMA_Abort+0x458>)
 8007546:	4293      	cmp	r3, r2
 8007548:	d031      	beq.n	80075ae <HAL_DMA_Abort+0x32a>
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	4a64      	ldr	r2, [pc, #400]	; (80076e0 <HAL_DMA_Abort+0x45c>)
 8007550:	4293      	cmp	r3, r2
 8007552:	d02c      	beq.n	80075ae <HAL_DMA_Abort+0x32a>
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	4a62      	ldr	r2, [pc, #392]	; (80076e4 <HAL_DMA_Abort+0x460>)
 800755a:	4293      	cmp	r3, r2
 800755c:	d027      	beq.n	80075ae <HAL_DMA_Abort+0x32a>
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	4a61      	ldr	r2, [pc, #388]	; (80076e8 <HAL_DMA_Abort+0x464>)
 8007564:	4293      	cmp	r3, r2
 8007566:	d022      	beq.n	80075ae <HAL_DMA_Abort+0x32a>
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	4a5f      	ldr	r2, [pc, #380]	; (80076ec <HAL_DMA_Abort+0x468>)
 800756e:	4293      	cmp	r3, r2
 8007570:	d01d      	beq.n	80075ae <HAL_DMA_Abort+0x32a>
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	4a5e      	ldr	r2, [pc, #376]	; (80076f0 <HAL_DMA_Abort+0x46c>)
 8007578:	4293      	cmp	r3, r2
 800757a:	d018      	beq.n	80075ae <HAL_DMA_Abort+0x32a>
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	4a5c      	ldr	r2, [pc, #368]	; (80076f4 <HAL_DMA_Abort+0x470>)
 8007582:	4293      	cmp	r3, r2
 8007584:	d013      	beq.n	80075ae <HAL_DMA_Abort+0x32a>
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	4a5b      	ldr	r2, [pc, #364]	; (80076f8 <HAL_DMA_Abort+0x474>)
 800758c:	4293      	cmp	r3, r2
 800758e:	d00e      	beq.n	80075ae <HAL_DMA_Abort+0x32a>
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	4a59      	ldr	r2, [pc, #356]	; (80076fc <HAL_DMA_Abort+0x478>)
 8007596:	4293      	cmp	r3, r2
 8007598:	d009      	beq.n	80075ae <HAL_DMA_Abort+0x32a>
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	4a58      	ldr	r2, [pc, #352]	; (8007700 <HAL_DMA_Abort+0x47c>)
 80075a0:	4293      	cmp	r3, r2
 80075a2:	d004      	beq.n	80075ae <HAL_DMA_Abort+0x32a>
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	4a56      	ldr	r2, [pc, #344]	; (8007704 <HAL_DMA_Abort+0x480>)
 80075aa:	4293      	cmp	r3, r2
 80075ac:	d108      	bne.n	80075c0 <HAL_DMA_Abort+0x33c>
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	681a      	ldr	r2, [r3, #0]
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	f022 0201 	bic.w	r2, r2, #1
 80075bc:	601a      	str	r2, [r3, #0]
 80075be:	e007      	b.n	80075d0 <HAL_DMA_Abort+0x34c>
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	681a      	ldr	r2, [r3, #0]
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	f022 0201 	bic.w	r2, r2, #1
 80075ce:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80075d0:	e013      	b.n	80075fa <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80075d2:	f7ff fcd9 	bl	8006f88 <HAL_GetTick>
 80075d6:	4602      	mov	r2, r0
 80075d8:	693b      	ldr	r3, [r7, #16]
 80075da:	1ad3      	subs	r3, r2, r3
 80075dc:	2b05      	cmp	r3, #5
 80075de:	d90c      	bls.n	80075fa <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	2220      	movs	r2, #32
 80075e4:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	2203      	movs	r2, #3
 80075ea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	2200      	movs	r2, #0
 80075f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 80075f6:	2301      	movs	r3, #1
 80075f8:	e12d      	b.n	8007856 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80075fa:	697b      	ldr	r3, [r7, #20]
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	f003 0301 	and.w	r3, r3, #1
 8007602:	2b00      	cmp	r3, #0
 8007604:	d1e5      	bne.n	80075d2 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	4a2f      	ldr	r2, [pc, #188]	; (80076c8 <HAL_DMA_Abort+0x444>)
 800760c:	4293      	cmp	r3, r2
 800760e:	d04a      	beq.n	80076a6 <HAL_DMA_Abort+0x422>
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	4a2d      	ldr	r2, [pc, #180]	; (80076cc <HAL_DMA_Abort+0x448>)
 8007616:	4293      	cmp	r3, r2
 8007618:	d045      	beq.n	80076a6 <HAL_DMA_Abort+0x422>
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	4a2c      	ldr	r2, [pc, #176]	; (80076d0 <HAL_DMA_Abort+0x44c>)
 8007620:	4293      	cmp	r3, r2
 8007622:	d040      	beq.n	80076a6 <HAL_DMA_Abort+0x422>
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	4a2a      	ldr	r2, [pc, #168]	; (80076d4 <HAL_DMA_Abort+0x450>)
 800762a:	4293      	cmp	r3, r2
 800762c:	d03b      	beq.n	80076a6 <HAL_DMA_Abort+0x422>
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	4a29      	ldr	r2, [pc, #164]	; (80076d8 <HAL_DMA_Abort+0x454>)
 8007634:	4293      	cmp	r3, r2
 8007636:	d036      	beq.n	80076a6 <HAL_DMA_Abort+0x422>
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	4a27      	ldr	r2, [pc, #156]	; (80076dc <HAL_DMA_Abort+0x458>)
 800763e:	4293      	cmp	r3, r2
 8007640:	d031      	beq.n	80076a6 <HAL_DMA_Abort+0x422>
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	4a26      	ldr	r2, [pc, #152]	; (80076e0 <HAL_DMA_Abort+0x45c>)
 8007648:	4293      	cmp	r3, r2
 800764a:	d02c      	beq.n	80076a6 <HAL_DMA_Abort+0x422>
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	4a24      	ldr	r2, [pc, #144]	; (80076e4 <HAL_DMA_Abort+0x460>)
 8007652:	4293      	cmp	r3, r2
 8007654:	d027      	beq.n	80076a6 <HAL_DMA_Abort+0x422>
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	4a23      	ldr	r2, [pc, #140]	; (80076e8 <HAL_DMA_Abort+0x464>)
 800765c:	4293      	cmp	r3, r2
 800765e:	d022      	beq.n	80076a6 <HAL_DMA_Abort+0x422>
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	4a21      	ldr	r2, [pc, #132]	; (80076ec <HAL_DMA_Abort+0x468>)
 8007666:	4293      	cmp	r3, r2
 8007668:	d01d      	beq.n	80076a6 <HAL_DMA_Abort+0x422>
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	4a20      	ldr	r2, [pc, #128]	; (80076f0 <HAL_DMA_Abort+0x46c>)
 8007670:	4293      	cmp	r3, r2
 8007672:	d018      	beq.n	80076a6 <HAL_DMA_Abort+0x422>
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	4a1e      	ldr	r2, [pc, #120]	; (80076f4 <HAL_DMA_Abort+0x470>)
 800767a:	4293      	cmp	r3, r2
 800767c:	d013      	beq.n	80076a6 <HAL_DMA_Abort+0x422>
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	4a1d      	ldr	r2, [pc, #116]	; (80076f8 <HAL_DMA_Abort+0x474>)
 8007684:	4293      	cmp	r3, r2
 8007686:	d00e      	beq.n	80076a6 <HAL_DMA_Abort+0x422>
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	4a1b      	ldr	r2, [pc, #108]	; (80076fc <HAL_DMA_Abort+0x478>)
 800768e:	4293      	cmp	r3, r2
 8007690:	d009      	beq.n	80076a6 <HAL_DMA_Abort+0x422>
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	4a1a      	ldr	r2, [pc, #104]	; (8007700 <HAL_DMA_Abort+0x47c>)
 8007698:	4293      	cmp	r3, r2
 800769a:	d004      	beq.n	80076a6 <HAL_DMA_Abort+0x422>
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	4a18      	ldr	r2, [pc, #96]	; (8007704 <HAL_DMA_Abort+0x480>)
 80076a2:	4293      	cmp	r3, r2
 80076a4:	d101      	bne.n	80076aa <HAL_DMA_Abort+0x426>
 80076a6:	2301      	movs	r3, #1
 80076a8:	e000      	b.n	80076ac <HAL_DMA_Abort+0x428>
 80076aa:	2300      	movs	r3, #0
 80076ac:	2b00      	cmp	r3, #0
 80076ae:	d02b      	beq.n	8007708 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80076b4:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80076ba:	f003 031f 	and.w	r3, r3, #31
 80076be:	223f      	movs	r2, #63	; 0x3f
 80076c0:	409a      	lsls	r2, r3
 80076c2:	68bb      	ldr	r3, [r7, #8]
 80076c4:	609a      	str	r2, [r3, #8]
 80076c6:	e02a      	b.n	800771e <HAL_DMA_Abort+0x49a>
 80076c8:	40020010 	.word	0x40020010
 80076cc:	40020028 	.word	0x40020028
 80076d0:	40020040 	.word	0x40020040
 80076d4:	40020058 	.word	0x40020058
 80076d8:	40020070 	.word	0x40020070
 80076dc:	40020088 	.word	0x40020088
 80076e0:	400200a0 	.word	0x400200a0
 80076e4:	400200b8 	.word	0x400200b8
 80076e8:	40020410 	.word	0x40020410
 80076ec:	40020428 	.word	0x40020428
 80076f0:	40020440 	.word	0x40020440
 80076f4:	40020458 	.word	0x40020458
 80076f8:	40020470 	.word	0x40020470
 80076fc:	40020488 	.word	0x40020488
 8007700:	400204a0 	.word	0x400204a0
 8007704:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800770c:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007712:	f003 031f 	and.w	r3, r3, #31
 8007716:	2201      	movs	r2, #1
 8007718:	409a      	lsls	r2, r3
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	4a4f      	ldr	r2, [pc, #316]	; (8007860 <HAL_DMA_Abort+0x5dc>)
 8007724:	4293      	cmp	r3, r2
 8007726:	d072      	beq.n	800780e <HAL_DMA_Abort+0x58a>
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	4a4d      	ldr	r2, [pc, #308]	; (8007864 <HAL_DMA_Abort+0x5e0>)
 800772e:	4293      	cmp	r3, r2
 8007730:	d06d      	beq.n	800780e <HAL_DMA_Abort+0x58a>
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	4a4c      	ldr	r2, [pc, #304]	; (8007868 <HAL_DMA_Abort+0x5e4>)
 8007738:	4293      	cmp	r3, r2
 800773a:	d068      	beq.n	800780e <HAL_DMA_Abort+0x58a>
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	4a4a      	ldr	r2, [pc, #296]	; (800786c <HAL_DMA_Abort+0x5e8>)
 8007742:	4293      	cmp	r3, r2
 8007744:	d063      	beq.n	800780e <HAL_DMA_Abort+0x58a>
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	4a49      	ldr	r2, [pc, #292]	; (8007870 <HAL_DMA_Abort+0x5ec>)
 800774c:	4293      	cmp	r3, r2
 800774e:	d05e      	beq.n	800780e <HAL_DMA_Abort+0x58a>
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	4a47      	ldr	r2, [pc, #284]	; (8007874 <HAL_DMA_Abort+0x5f0>)
 8007756:	4293      	cmp	r3, r2
 8007758:	d059      	beq.n	800780e <HAL_DMA_Abort+0x58a>
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	4a46      	ldr	r2, [pc, #280]	; (8007878 <HAL_DMA_Abort+0x5f4>)
 8007760:	4293      	cmp	r3, r2
 8007762:	d054      	beq.n	800780e <HAL_DMA_Abort+0x58a>
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	4a44      	ldr	r2, [pc, #272]	; (800787c <HAL_DMA_Abort+0x5f8>)
 800776a:	4293      	cmp	r3, r2
 800776c:	d04f      	beq.n	800780e <HAL_DMA_Abort+0x58a>
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	4a43      	ldr	r2, [pc, #268]	; (8007880 <HAL_DMA_Abort+0x5fc>)
 8007774:	4293      	cmp	r3, r2
 8007776:	d04a      	beq.n	800780e <HAL_DMA_Abort+0x58a>
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	4a41      	ldr	r2, [pc, #260]	; (8007884 <HAL_DMA_Abort+0x600>)
 800777e:	4293      	cmp	r3, r2
 8007780:	d045      	beq.n	800780e <HAL_DMA_Abort+0x58a>
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	4a40      	ldr	r2, [pc, #256]	; (8007888 <HAL_DMA_Abort+0x604>)
 8007788:	4293      	cmp	r3, r2
 800778a:	d040      	beq.n	800780e <HAL_DMA_Abort+0x58a>
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	4a3e      	ldr	r2, [pc, #248]	; (800788c <HAL_DMA_Abort+0x608>)
 8007792:	4293      	cmp	r3, r2
 8007794:	d03b      	beq.n	800780e <HAL_DMA_Abort+0x58a>
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	4a3d      	ldr	r2, [pc, #244]	; (8007890 <HAL_DMA_Abort+0x60c>)
 800779c:	4293      	cmp	r3, r2
 800779e:	d036      	beq.n	800780e <HAL_DMA_Abort+0x58a>
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	4a3b      	ldr	r2, [pc, #236]	; (8007894 <HAL_DMA_Abort+0x610>)
 80077a6:	4293      	cmp	r3, r2
 80077a8:	d031      	beq.n	800780e <HAL_DMA_Abort+0x58a>
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	4a3a      	ldr	r2, [pc, #232]	; (8007898 <HAL_DMA_Abort+0x614>)
 80077b0:	4293      	cmp	r3, r2
 80077b2:	d02c      	beq.n	800780e <HAL_DMA_Abort+0x58a>
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	4a38      	ldr	r2, [pc, #224]	; (800789c <HAL_DMA_Abort+0x618>)
 80077ba:	4293      	cmp	r3, r2
 80077bc:	d027      	beq.n	800780e <HAL_DMA_Abort+0x58a>
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	4a37      	ldr	r2, [pc, #220]	; (80078a0 <HAL_DMA_Abort+0x61c>)
 80077c4:	4293      	cmp	r3, r2
 80077c6:	d022      	beq.n	800780e <HAL_DMA_Abort+0x58a>
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	4a35      	ldr	r2, [pc, #212]	; (80078a4 <HAL_DMA_Abort+0x620>)
 80077ce:	4293      	cmp	r3, r2
 80077d0:	d01d      	beq.n	800780e <HAL_DMA_Abort+0x58a>
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	4a34      	ldr	r2, [pc, #208]	; (80078a8 <HAL_DMA_Abort+0x624>)
 80077d8:	4293      	cmp	r3, r2
 80077da:	d018      	beq.n	800780e <HAL_DMA_Abort+0x58a>
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	4a32      	ldr	r2, [pc, #200]	; (80078ac <HAL_DMA_Abort+0x628>)
 80077e2:	4293      	cmp	r3, r2
 80077e4:	d013      	beq.n	800780e <HAL_DMA_Abort+0x58a>
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	4a31      	ldr	r2, [pc, #196]	; (80078b0 <HAL_DMA_Abort+0x62c>)
 80077ec:	4293      	cmp	r3, r2
 80077ee:	d00e      	beq.n	800780e <HAL_DMA_Abort+0x58a>
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	4a2f      	ldr	r2, [pc, #188]	; (80078b4 <HAL_DMA_Abort+0x630>)
 80077f6:	4293      	cmp	r3, r2
 80077f8:	d009      	beq.n	800780e <HAL_DMA_Abort+0x58a>
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	4a2e      	ldr	r2, [pc, #184]	; (80078b8 <HAL_DMA_Abort+0x634>)
 8007800:	4293      	cmp	r3, r2
 8007802:	d004      	beq.n	800780e <HAL_DMA_Abort+0x58a>
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	4a2c      	ldr	r2, [pc, #176]	; (80078bc <HAL_DMA_Abort+0x638>)
 800780a:	4293      	cmp	r3, r2
 800780c:	d101      	bne.n	8007812 <HAL_DMA_Abort+0x58e>
 800780e:	2301      	movs	r3, #1
 8007810:	e000      	b.n	8007814 <HAL_DMA_Abort+0x590>
 8007812:	2300      	movs	r3, #0
 8007814:	2b00      	cmp	r3, #0
 8007816:	d015      	beq.n	8007844 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800781c:	687a      	ldr	r2, [r7, #4]
 800781e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8007820:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007826:	2b00      	cmp	r3, #0
 8007828:	d00c      	beq.n	8007844 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800782e:	681a      	ldr	r2, [r3, #0]
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007834:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007838:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800783e:	687a      	ldr	r2, [r7, #4]
 8007840:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8007842:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	2201      	movs	r2, #1
 8007848:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	2200      	movs	r2, #0
 8007850:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 8007854:	2300      	movs	r3, #0
}
 8007856:	4618      	mov	r0, r3
 8007858:	3718      	adds	r7, #24
 800785a:	46bd      	mov	sp, r7
 800785c:	bd80      	pop	{r7, pc}
 800785e:	bf00      	nop
 8007860:	40020010 	.word	0x40020010
 8007864:	40020028 	.word	0x40020028
 8007868:	40020040 	.word	0x40020040
 800786c:	40020058 	.word	0x40020058
 8007870:	40020070 	.word	0x40020070
 8007874:	40020088 	.word	0x40020088
 8007878:	400200a0 	.word	0x400200a0
 800787c:	400200b8 	.word	0x400200b8
 8007880:	40020410 	.word	0x40020410
 8007884:	40020428 	.word	0x40020428
 8007888:	40020440 	.word	0x40020440
 800788c:	40020458 	.word	0x40020458
 8007890:	40020470 	.word	0x40020470
 8007894:	40020488 	.word	0x40020488
 8007898:	400204a0 	.word	0x400204a0
 800789c:	400204b8 	.word	0x400204b8
 80078a0:	58025408 	.word	0x58025408
 80078a4:	5802541c 	.word	0x5802541c
 80078a8:	58025430 	.word	0x58025430
 80078ac:	58025444 	.word	0x58025444
 80078b0:	58025458 	.word	0x58025458
 80078b4:	5802546c 	.word	0x5802546c
 80078b8:	58025480 	.word	0x58025480
 80078bc:	58025494 	.word	0x58025494

080078c0 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80078c0:	b580      	push	{r7, lr}
 80078c2:	b084      	sub	sp, #16
 80078c4:	af00      	add	r7, sp, #0
 80078c6:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	d101      	bne.n	80078d2 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 80078ce:	2301      	movs	r3, #1
 80078d0:	e237      	b.n	8007d42 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80078d8:	b2db      	uxtb	r3, r3
 80078da:	2b02      	cmp	r3, #2
 80078dc:	d004      	beq.n	80078e8 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	2280      	movs	r2, #128	; 0x80
 80078e2:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80078e4:	2301      	movs	r3, #1
 80078e6:	e22c      	b.n	8007d42 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	4a5c      	ldr	r2, [pc, #368]	; (8007a60 <HAL_DMA_Abort_IT+0x1a0>)
 80078ee:	4293      	cmp	r3, r2
 80078f0:	d04a      	beq.n	8007988 <HAL_DMA_Abort_IT+0xc8>
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	4a5b      	ldr	r2, [pc, #364]	; (8007a64 <HAL_DMA_Abort_IT+0x1a4>)
 80078f8:	4293      	cmp	r3, r2
 80078fa:	d045      	beq.n	8007988 <HAL_DMA_Abort_IT+0xc8>
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	4a59      	ldr	r2, [pc, #356]	; (8007a68 <HAL_DMA_Abort_IT+0x1a8>)
 8007902:	4293      	cmp	r3, r2
 8007904:	d040      	beq.n	8007988 <HAL_DMA_Abort_IT+0xc8>
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	4a58      	ldr	r2, [pc, #352]	; (8007a6c <HAL_DMA_Abort_IT+0x1ac>)
 800790c:	4293      	cmp	r3, r2
 800790e:	d03b      	beq.n	8007988 <HAL_DMA_Abort_IT+0xc8>
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	4a56      	ldr	r2, [pc, #344]	; (8007a70 <HAL_DMA_Abort_IT+0x1b0>)
 8007916:	4293      	cmp	r3, r2
 8007918:	d036      	beq.n	8007988 <HAL_DMA_Abort_IT+0xc8>
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	4a55      	ldr	r2, [pc, #340]	; (8007a74 <HAL_DMA_Abort_IT+0x1b4>)
 8007920:	4293      	cmp	r3, r2
 8007922:	d031      	beq.n	8007988 <HAL_DMA_Abort_IT+0xc8>
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	4a53      	ldr	r2, [pc, #332]	; (8007a78 <HAL_DMA_Abort_IT+0x1b8>)
 800792a:	4293      	cmp	r3, r2
 800792c:	d02c      	beq.n	8007988 <HAL_DMA_Abort_IT+0xc8>
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	4a52      	ldr	r2, [pc, #328]	; (8007a7c <HAL_DMA_Abort_IT+0x1bc>)
 8007934:	4293      	cmp	r3, r2
 8007936:	d027      	beq.n	8007988 <HAL_DMA_Abort_IT+0xc8>
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	4a50      	ldr	r2, [pc, #320]	; (8007a80 <HAL_DMA_Abort_IT+0x1c0>)
 800793e:	4293      	cmp	r3, r2
 8007940:	d022      	beq.n	8007988 <HAL_DMA_Abort_IT+0xc8>
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	4a4f      	ldr	r2, [pc, #316]	; (8007a84 <HAL_DMA_Abort_IT+0x1c4>)
 8007948:	4293      	cmp	r3, r2
 800794a:	d01d      	beq.n	8007988 <HAL_DMA_Abort_IT+0xc8>
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	4a4d      	ldr	r2, [pc, #308]	; (8007a88 <HAL_DMA_Abort_IT+0x1c8>)
 8007952:	4293      	cmp	r3, r2
 8007954:	d018      	beq.n	8007988 <HAL_DMA_Abort_IT+0xc8>
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	4a4c      	ldr	r2, [pc, #304]	; (8007a8c <HAL_DMA_Abort_IT+0x1cc>)
 800795c:	4293      	cmp	r3, r2
 800795e:	d013      	beq.n	8007988 <HAL_DMA_Abort_IT+0xc8>
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	4a4a      	ldr	r2, [pc, #296]	; (8007a90 <HAL_DMA_Abort_IT+0x1d0>)
 8007966:	4293      	cmp	r3, r2
 8007968:	d00e      	beq.n	8007988 <HAL_DMA_Abort_IT+0xc8>
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	4a49      	ldr	r2, [pc, #292]	; (8007a94 <HAL_DMA_Abort_IT+0x1d4>)
 8007970:	4293      	cmp	r3, r2
 8007972:	d009      	beq.n	8007988 <HAL_DMA_Abort_IT+0xc8>
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	4a47      	ldr	r2, [pc, #284]	; (8007a98 <HAL_DMA_Abort_IT+0x1d8>)
 800797a:	4293      	cmp	r3, r2
 800797c:	d004      	beq.n	8007988 <HAL_DMA_Abort_IT+0xc8>
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	4a46      	ldr	r2, [pc, #280]	; (8007a9c <HAL_DMA_Abort_IT+0x1dc>)
 8007984:	4293      	cmp	r3, r2
 8007986:	d101      	bne.n	800798c <HAL_DMA_Abort_IT+0xcc>
 8007988:	2301      	movs	r3, #1
 800798a:	e000      	b.n	800798e <HAL_DMA_Abort_IT+0xce>
 800798c:	2300      	movs	r3, #0
 800798e:	2b00      	cmp	r3, #0
 8007990:	f000 8086 	beq.w	8007aa0 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	2204      	movs	r2, #4
 8007998:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	4a2f      	ldr	r2, [pc, #188]	; (8007a60 <HAL_DMA_Abort_IT+0x1a0>)
 80079a2:	4293      	cmp	r3, r2
 80079a4:	d04a      	beq.n	8007a3c <HAL_DMA_Abort_IT+0x17c>
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	4a2e      	ldr	r2, [pc, #184]	; (8007a64 <HAL_DMA_Abort_IT+0x1a4>)
 80079ac:	4293      	cmp	r3, r2
 80079ae:	d045      	beq.n	8007a3c <HAL_DMA_Abort_IT+0x17c>
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	4a2c      	ldr	r2, [pc, #176]	; (8007a68 <HAL_DMA_Abort_IT+0x1a8>)
 80079b6:	4293      	cmp	r3, r2
 80079b8:	d040      	beq.n	8007a3c <HAL_DMA_Abort_IT+0x17c>
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	4a2b      	ldr	r2, [pc, #172]	; (8007a6c <HAL_DMA_Abort_IT+0x1ac>)
 80079c0:	4293      	cmp	r3, r2
 80079c2:	d03b      	beq.n	8007a3c <HAL_DMA_Abort_IT+0x17c>
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	4a29      	ldr	r2, [pc, #164]	; (8007a70 <HAL_DMA_Abort_IT+0x1b0>)
 80079ca:	4293      	cmp	r3, r2
 80079cc:	d036      	beq.n	8007a3c <HAL_DMA_Abort_IT+0x17c>
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	4a28      	ldr	r2, [pc, #160]	; (8007a74 <HAL_DMA_Abort_IT+0x1b4>)
 80079d4:	4293      	cmp	r3, r2
 80079d6:	d031      	beq.n	8007a3c <HAL_DMA_Abort_IT+0x17c>
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	4a26      	ldr	r2, [pc, #152]	; (8007a78 <HAL_DMA_Abort_IT+0x1b8>)
 80079de:	4293      	cmp	r3, r2
 80079e0:	d02c      	beq.n	8007a3c <HAL_DMA_Abort_IT+0x17c>
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	4a25      	ldr	r2, [pc, #148]	; (8007a7c <HAL_DMA_Abort_IT+0x1bc>)
 80079e8:	4293      	cmp	r3, r2
 80079ea:	d027      	beq.n	8007a3c <HAL_DMA_Abort_IT+0x17c>
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	4a23      	ldr	r2, [pc, #140]	; (8007a80 <HAL_DMA_Abort_IT+0x1c0>)
 80079f2:	4293      	cmp	r3, r2
 80079f4:	d022      	beq.n	8007a3c <HAL_DMA_Abort_IT+0x17c>
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	4a22      	ldr	r2, [pc, #136]	; (8007a84 <HAL_DMA_Abort_IT+0x1c4>)
 80079fc:	4293      	cmp	r3, r2
 80079fe:	d01d      	beq.n	8007a3c <HAL_DMA_Abort_IT+0x17c>
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	4a20      	ldr	r2, [pc, #128]	; (8007a88 <HAL_DMA_Abort_IT+0x1c8>)
 8007a06:	4293      	cmp	r3, r2
 8007a08:	d018      	beq.n	8007a3c <HAL_DMA_Abort_IT+0x17c>
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	4a1f      	ldr	r2, [pc, #124]	; (8007a8c <HAL_DMA_Abort_IT+0x1cc>)
 8007a10:	4293      	cmp	r3, r2
 8007a12:	d013      	beq.n	8007a3c <HAL_DMA_Abort_IT+0x17c>
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	4a1d      	ldr	r2, [pc, #116]	; (8007a90 <HAL_DMA_Abort_IT+0x1d0>)
 8007a1a:	4293      	cmp	r3, r2
 8007a1c:	d00e      	beq.n	8007a3c <HAL_DMA_Abort_IT+0x17c>
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	4a1c      	ldr	r2, [pc, #112]	; (8007a94 <HAL_DMA_Abort_IT+0x1d4>)
 8007a24:	4293      	cmp	r3, r2
 8007a26:	d009      	beq.n	8007a3c <HAL_DMA_Abort_IT+0x17c>
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	4a1a      	ldr	r2, [pc, #104]	; (8007a98 <HAL_DMA_Abort_IT+0x1d8>)
 8007a2e:	4293      	cmp	r3, r2
 8007a30:	d004      	beq.n	8007a3c <HAL_DMA_Abort_IT+0x17c>
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	4a19      	ldr	r2, [pc, #100]	; (8007a9c <HAL_DMA_Abort_IT+0x1dc>)
 8007a38:	4293      	cmp	r3, r2
 8007a3a:	d108      	bne.n	8007a4e <HAL_DMA_Abort_IT+0x18e>
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	681a      	ldr	r2, [r3, #0]
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	f022 0201 	bic.w	r2, r2, #1
 8007a4a:	601a      	str	r2, [r3, #0]
 8007a4c:	e178      	b.n	8007d40 <HAL_DMA_Abort_IT+0x480>
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	681a      	ldr	r2, [r3, #0]
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	f022 0201 	bic.w	r2, r2, #1
 8007a5c:	601a      	str	r2, [r3, #0]
 8007a5e:	e16f      	b.n	8007d40 <HAL_DMA_Abort_IT+0x480>
 8007a60:	40020010 	.word	0x40020010
 8007a64:	40020028 	.word	0x40020028
 8007a68:	40020040 	.word	0x40020040
 8007a6c:	40020058 	.word	0x40020058
 8007a70:	40020070 	.word	0x40020070
 8007a74:	40020088 	.word	0x40020088
 8007a78:	400200a0 	.word	0x400200a0
 8007a7c:	400200b8 	.word	0x400200b8
 8007a80:	40020410 	.word	0x40020410
 8007a84:	40020428 	.word	0x40020428
 8007a88:	40020440 	.word	0x40020440
 8007a8c:	40020458 	.word	0x40020458
 8007a90:	40020470 	.word	0x40020470
 8007a94:	40020488 	.word	0x40020488
 8007a98:	400204a0 	.word	0x400204a0
 8007a9c:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	681a      	ldr	r2, [r3, #0]
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	f022 020e 	bic.w	r2, r2, #14
 8007aae:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	4a6c      	ldr	r2, [pc, #432]	; (8007c68 <HAL_DMA_Abort_IT+0x3a8>)
 8007ab6:	4293      	cmp	r3, r2
 8007ab8:	d04a      	beq.n	8007b50 <HAL_DMA_Abort_IT+0x290>
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	4a6b      	ldr	r2, [pc, #428]	; (8007c6c <HAL_DMA_Abort_IT+0x3ac>)
 8007ac0:	4293      	cmp	r3, r2
 8007ac2:	d045      	beq.n	8007b50 <HAL_DMA_Abort_IT+0x290>
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	4a69      	ldr	r2, [pc, #420]	; (8007c70 <HAL_DMA_Abort_IT+0x3b0>)
 8007aca:	4293      	cmp	r3, r2
 8007acc:	d040      	beq.n	8007b50 <HAL_DMA_Abort_IT+0x290>
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	4a68      	ldr	r2, [pc, #416]	; (8007c74 <HAL_DMA_Abort_IT+0x3b4>)
 8007ad4:	4293      	cmp	r3, r2
 8007ad6:	d03b      	beq.n	8007b50 <HAL_DMA_Abort_IT+0x290>
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	4a66      	ldr	r2, [pc, #408]	; (8007c78 <HAL_DMA_Abort_IT+0x3b8>)
 8007ade:	4293      	cmp	r3, r2
 8007ae0:	d036      	beq.n	8007b50 <HAL_DMA_Abort_IT+0x290>
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	4a65      	ldr	r2, [pc, #404]	; (8007c7c <HAL_DMA_Abort_IT+0x3bc>)
 8007ae8:	4293      	cmp	r3, r2
 8007aea:	d031      	beq.n	8007b50 <HAL_DMA_Abort_IT+0x290>
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	4a63      	ldr	r2, [pc, #396]	; (8007c80 <HAL_DMA_Abort_IT+0x3c0>)
 8007af2:	4293      	cmp	r3, r2
 8007af4:	d02c      	beq.n	8007b50 <HAL_DMA_Abort_IT+0x290>
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	4a62      	ldr	r2, [pc, #392]	; (8007c84 <HAL_DMA_Abort_IT+0x3c4>)
 8007afc:	4293      	cmp	r3, r2
 8007afe:	d027      	beq.n	8007b50 <HAL_DMA_Abort_IT+0x290>
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	4a60      	ldr	r2, [pc, #384]	; (8007c88 <HAL_DMA_Abort_IT+0x3c8>)
 8007b06:	4293      	cmp	r3, r2
 8007b08:	d022      	beq.n	8007b50 <HAL_DMA_Abort_IT+0x290>
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	4a5f      	ldr	r2, [pc, #380]	; (8007c8c <HAL_DMA_Abort_IT+0x3cc>)
 8007b10:	4293      	cmp	r3, r2
 8007b12:	d01d      	beq.n	8007b50 <HAL_DMA_Abort_IT+0x290>
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	4a5d      	ldr	r2, [pc, #372]	; (8007c90 <HAL_DMA_Abort_IT+0x3d0>)
 8007b1a:	4293      	cmp	r3, r2
 8007b1c:	d018      	beq.n	8007b50 <HAL_DMA_Abort_IT+0x290>
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	4a5c      	ldr	r2, [pc, #368]	; (8007c94 <HAL_DMA_Abort_IT+0x3d4>)
 8007b24:	4293      	cmp	r3, r2
 8007b26:	d013      	beq.n	8007b50 <HAL_DMA_Abort_IT+0x290>
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	4a5a      	ldr	r2, [pc, #360]	; (8007c98 <HAL_DMA_Abort_IT+0x3d8>)
 8007b2e:	4293      	cmp	r3, r2
 8007b30:	d00e      	beq.n	8007b50 <HAL_DMA_Abort_IT+0x290>
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	4a59      	ldr	r2, [pc, #356]	; (8007c9c <HAL_DMA_Abort_IT+0x3dc>)
 8007b38:	4293      	cmp	r3, r2
 8007b3a:	d009      	beq.n	8007b50 <HAL_DMA_Abort_IT+0x290>
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	4a57      	ldr	r2, [pc, #348]	; (8007ca0 <HAL_DMA_Abort_IT+0x3e0>)
 8007b42:	4293      	cmp	r3, r2
 8007b44:	d004      	beq.n	8007b50 <HAL_DMA_Abort_IT+0x290>
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	4a56      	ldr	r2, [pc, #344]	; (8007ca4 <HAL_DMA_Abort_IT+0x3e4>)
 8007b4c:	4293      	cmp	r3, r2
 8007b4e:	d108      	bne.n	8007b62 <HAL_DMA_Abort_IT+0x2a2>
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	681a      	ldr	r2, [r3, #0]
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	f022 0201 	bic.w	r2, r2, #1
 8007b5e:	601a      	str	r2, [r3, #0]
 8007b60:	e007      	b.n	8007b72 <HAL_DMA_Abort_IT+0x2b2>
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	681a      	ldr	r2, [r3, #0]
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	f022 0201 	bic.w	r2, r2, #1
 8007b70:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	4a3c      	ldr	r2, [pc, #240]	; (8007c68 <HAL_DMA_Abort_IT+0x3a8>)
 8007b78:	4293      	cmp	r3, r2
 8007b7a:	d072      	beq.n	8007c62 <HAL_DMA_Abort_IT+0x3a2>
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	4a3a      	ldr	r2, [pc, #232]	; (8007c6c <HAL_DMA_Abort_IT+0x3ac>)
 8007b82:	4293      	cmp	r3, r2
 8007b84:	d06d      	beq.n	8007c62 <HAL_DMA_Abort_IT+0x3a2>
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	4a39      	ldr	r2, [pc, #228]	; (8007c70 <HAL_DMA_Abort_IT+0x3b0>)
 8007b8c:	4293      	cmp	r3, r2
 8007b8e:	d068      	beq.n	8007c62 <HAL_DMA_Abort_IT+0x3a2>
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	4a37      	ldr	r2, [pc, #220]	; (8007c74 <HAL_DMA_Abort_IT+0x3b4>)
 8007b96:	4293      	cmp	r3, r2
 8007b98:	d063      	beq.n	8007c62 <HAL_DMA_Abort_IT+0x3a2>
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	4a36      	ldr	r2, [pc, #216]	; (8007c78 <HAL_DMA_Abort_IT+0x3b8>)
 8007ba0:	4293      	cmp	r3, r2
 8007ba2:	d05e      	beq.n	8007c62 <HAL_DMA_Abort_IT+0x3a2>
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	4a34      	ldr	r2, [pc, #208]	; (8007c7c <HAL_DMA_Abort_IT+0x3bc>)
 8007baa:	4293      	cmp	r3, r2
 8007bac:	d059      	beq.n	8007c62 <HAL_DMA_Abort_IT+0x3a2>
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	4a33      	ldr	r2, [pc, #204]	; (8007c80 <HAL_DMA_Abort_IT+0x3c0>)
 8007bb4:	4293      	cmp	r3, r2
 8007bb6:	d054      	beq.n	8007c62 <HAL_DMA_Abort_IT+0x3a2>
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	4a31      	ldr	r2, [pc, #196]	; (8007c84 <HAL_DMA_Abort_IT+0x3c4>)
 8007bbe:	4293      	cmp	r3, r2
 8007bc0:	d04f      	beq.n	8007c62 <HAL_DMA_Abort_IT+0x3a2>
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	4a30      	ldr	r2, [pc, #192]	; (8007c88 <HAL_DMA_Abort_IT+0x3c8>)
 8007bc8:	4293      	cmp	r3, r2
 8007bca:	d04a      	beq.n	8007c62 <HAL_DMA_Abort_IT+0x3a2>
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	4a2e      	ldr	r2, [pc, #184]	; (8007c8c <HAL_DMA_Abort_IT+0x3cc>)
 8007bd2:	4293      	cmp	r3, r2
 8007bd4:	d045      	beq.n	8007c62 <HAL_DMA_Abort_IT+0x3a2>
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	4a2d      	ldr	r2, [pc, #180]	; (8007c90 <HAL_DMA_Abort_IT+0x3d0>)
 8007bdc:	4293      	cmp	r3, r2
 8007bde:	d040      	beq.n	8007c62 <HAL_DMA_Abort_IT+0x3a2>
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	4a2b      	ldr	r2, [pc, #172]	; (8007c94 <HAL_DMA_Abort_IT+0x3d4>)
 8007be6:	4293      	cmp	r3, r2
 8007be8:	d03b      	beq.n	8007c62 <HAL_DMA_Abort_IT+0x3a2>
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	4a2a      	ldr	r2, [pc, #168]	; (8007c98 <HAL_DMA_Abort_IT+0x3d8>)
 8007bf0:	4293      	cmp	r3, r2
 8007bf2:	d036      	beq.n	8007c62 <HAL_DMA_Abort_IT+0x3a2>
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	4a28      	ldr	r2, [pc, #160]	; (8007c9c <HAL_DMA_Abort_IT+0x3dc>)
 8007bfa:	4293      	cmp	r3, r2
 8007bfc:	d031      	beq.n	8007c62 <HAL_DMA_Abort_IT+0x3a2>
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	4a27      	ldr	r2, [pc, #156]	; (8007ca0 <HAL_DMA_Abort_IT+0x3e0>)
 8007c04:	4293      	cmp	r3, r2
 8007c06:	d02c      	beq.n	8007c62 <HAL_DMA_Abort_IT+0x3a2>
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	4a25      	ldr	r2, [pc, #148]	; (8007ca4 <HAL_DMA_Abort_IT+0x3e4>)
 8007c0e:	4293      	cmp	r3, r2
 8007c10:	d027      	beq.n	8007c62 <HAL_DMA_Abort_IT+0x3a2>
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	4a24      	ldr	r2, [pc, #144]	; (8007ca8 <HAL_DMA_Abort_IT+0x3e8>)
 8007c18:	4293      	cmp	r3, r2
 8007c1a:	d022      	beq.n	8007c62 <HAL_DMA_Abort_IT+0x3a2>
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	4a22      	ldr	r2, [pc, #136]	; (8007cac <HAL_DMA_Abort_IT+0x3ec>)
 8007c22:	4293      	cmp	r3, r2
 8007c24:	d01d      	beq.n	8007c62 <HAL_DMA_Abort_IT+0x3a2>
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	4a21      	ldr	r2, [pc, #132]	; (8007cb0 <HAL_DMA_Abort_IT+0x3f0>)
 8007c2c:	4293      	cmp	r3, r2
 8007c2e:	d018      	beq.n	8007c62 <HAL_DMA_Abort_IT+0x3a2>
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	4a1f      	ldr	r2, [pc, #124]	; (8007cb4 <HAL_DMA_Abort_IT+0x3f4>)
 8007c36:	4293      	cmp	r3, r2
 8007c38:	d013      	beq.n	8007c62 <HAL_DMA_Abort_IT+0x3a2>
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	4a1e      	ldr	r2, [pc, #120]	; (8007cb8 <HAL_DMA_Abort_IT+0x3f8>)
 8007c40:	4293      	cmp	r3, r2
 8007c42:	d00e      	beq.n	8007c62 <HAL_DMA_Abort_IT+0x3a2>
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	4a1c      	ldr	r2, [pc, #112]	; (8007cbc <HAL_DMA_Abort_IT+0x3fc>)
 8007c4a:	4293      	cmp	r3, r2
 8007c4c:	d009      	beq.n	8007c62 <HAL_DMA_Abort_IT+0x3a2>
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	4a1b      	ldr	r2, [pc, #108]	; (8007cc0 <HAL_DMA_Abort_IT+0x400>)
 8007c54:	4293      	cmp	r3, r2
 8007c56:	d004      	beq.n	8007c62 <HAL_DMA_Abort_IT+0x3a2>
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	4a19      	ldr	r2, [pc, #100]	; (8007cc4 <HAL_DMA_Abort_IT+0x404>)
 8007c5e:	4293      	cmp	r3, r2
 8007c60:	d132      	bne.n	8007cc8 <HAL_DMA_Abort_IT+0x408>
 8007c62:	2301      	movs	r3, #1
 8007c64:	e031      	b.n	8007cca <HAL_DMA_Abort_IT+0x40a>
 8007c66:	bf00      	nop
 8007c68:	40020010 	.word	0x40020010
 8007c6c:	40020028 	.word	0x40020028
 8007c70:	40020040 	.word	0x40020040
 8007c74:	40020058 	.word	0x40020058
 8007c78:	40020070 	.word	0x40020070
 8007c7c:	40020088 	.word	0x40020088
 8007c80:	400200a0 	.word	0x400200a0
 8007c84:	400200b8 	.word	0x400200b8
 8007c88:	40020410 	.word	0x40020410
 8007c8c:	40020428 	.word	0x40020428
 8007c90:	40020440 	.word	0x40020440
 8007c94:	40020458 	.word	0x40020458
 8007c98:	40020470 	.word	0x40020470
 8007c9c:	40020488 	.word	0x40020488
 8007ca0:	400204a0 	.word	0x400204a0
 8007ca4:	400204b8 	.word	0x400204b8
 8007ca8:	58025408 	.word	0x58025408
 8007cac:	5802541c 	.word	0x5802541c
 8007cb0:	58025430 	.word	0x58025430
 8007cb4:	58025444 	.word	0x58025444
 8007cb8:	58025458 	.word	0x58025458
 8007cbc:	5802546c 	.word	0x5802546c
 8007cc0:	58025480 	.word	0x58025480
 8007cc4:	58025494 	.word	0x58025494
 8007cc8:	2300      	movs	r3, #0
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	d028      	beq.n	8007d20 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007cd2:	681a      	ldr	r2, [r3, #0]
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007cd8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007cdc:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007ce2:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007ce8:	f003 031f 	and.w	r3, r3, #31
 8007cec:	2201      	movs	r2, #1
 8007cee:	409a      	lsls	r2, r3
 8007cf0:	68fb      	ldr	r3, [r7, #12]
 8007cf2:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007cf8:	687a      	ldr	r2, [r7, #4]
 8007cfa:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8007cfc:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	d00c      	beq.n	8007d20 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007d0a:	681a      	ldr	r2, [r3, #0]
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007d10:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007d14:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007d1a:	687a      	ldr	r2, [r7, #4]
 8007d1c:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8007d1e:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	2201      	movs	r2, #1
 8007d24:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	2200      	movs	r2, #0
 8007d2c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007d34:	2b00      	cmp	r3, #0
 8007d36:	d003      	beq.n	8007d40 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007d3c:	6878      	ldr	r0, [r7, #4]
 8007d3e:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8007d40:	2300      	movs	r3, #0
}
 8007d42:	4618      	mov	r0, r3
 8007d44:	3710      	adds	r7, #16
 8007d46:	46bd      	mov	sp, r7
 8007d48:	bd80      	pop	{r7, pc}
 8007d4a:	bf00      	nop

08007d4c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007d4c:	b480      	push	{r7}
 8007d4e:	b089      	sub	sp, #36	; 0x24
 8007d50:	af00      	add	r7, sp, #0
 8007d52:	6078      	str	r0, [r7, #4]
 8007d54:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8007d56:	2300      	movs	r3, #0
 8007d58:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8007d5a:	4b89      	ldr	r3, [pc, #548]	; (8007f80 <HAL_GPIO_Init+0x234>)
 8007d5c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8007d5e:	e194      	b.n	800808a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8007d60:	683b      	ldr	r3, [r7, #0]
 8007d62:	681a      	ldr	r2, [r3, #0]
 8007d64:	2101      	movs	r1, #1
 8007d66:	69fb      	ldr	r3, [r7, #28]
 8007d68:	fa01 f303 	lsl.w	r3, r1, r3
 8007d6c:	4013      	ands	r3, r2
 8007d6e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8007d70:	693b      	ldr	r3, [r7, #16]
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	f000 8186 	beq.w	8008084 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8007d78:	683b      	ldr	r3, [r7, #0]
 8007d7a:	685b      	ldr	r3, [r3, #4]
 8007d7c:	f003 0303 	and.w	r3, r3, #3
 8007d80:	2b01      	cmp	r3, #1
 8007d82:	d005      	beq.n	8007d90 <HAL_GPIO_Init+0x44>
 8007d84:	683b      	ldr	r3, [r7, #0]
 8007d86:	685b      	ldr	r3, [r3, #4]
 8007d88:	f003 0303 	and.w	r3, r3, #3
 8007d8c:	2b02      	cmp	r3, #2
 8007d8e:	d130      	bne.n	8007df2 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	689b      	ldr	r3, [r3, #8]
 8007d94:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8007d96:	69fb      	ldr	r3, [r7, #28]
 8007d98:	005b      	lsls	r3, r3, #1
 8007d9a:	2203      	movs	r2, #3
 8007d9c:	fa02 f303 	lsl.w	r3, r2, r3
 8007da0:	43db      	mvns	r3, r3
 8007da2:	69ba      	ldr	r2, [r7, #24]
 8007da4:	4013      	ands	r3, r2
 8007da6:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8007da8:	683b      	ldr	r3, [r7, #0]
 8007daa:	68da      	ldr	r2, [r3, #12]
 8007dac:	69fb      	ldr	r3, [r7, #28]
 8007dae:	005b      	lsls	r3, r3, #1
 8007db0:	fa02 f303 	lsl.w	r3, r2, r3
 8007db4:	69ba      	ldr	r2, [r7, #24]
 8007db6:	4313      	orrs	r3, r2
 8007db8:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	69ba      	ldr	r2, [r7, #24]
 8007dbe:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	685b      	ldr	r3, [r3, #4]
 8007dc4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8007dc6:	2201      	movs	r2, #1
 8007dc8:	69fb      	ldr	r3, [r7, #28]
 8007dca:	fa02 f303 	lsl.w	r3, r2, r3
 8007dce:	43db      	mvns	r3, r3
 8007dd0:	69ba      	ldr	r2, [r7, #24]
 8007dd2:	4013      	ands	r3, r2
 8007dd4:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8007dd6:	683b      	ldr	r3, [r7, #0]
 8007dd8:	685b      	ldr	r3, [r3, #4]
 8007dda:	091b      	lsrs	r3, r3, #4
 8007ddc:	f003 0201 	and.w	r2, r3, #1
 8007de0:	69fb      	ldr	r3, [r7, #28]
 8007de2:	fa02 f303 	lsl.w	r3, r2, r3
 8007de6:	69ba      	ldr	r2, [r7, #24]
 8007de8:	4313      	orrs	r3, r2
 8007dea:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	69ba      	ldr	r2, [r7, #24]
 8007df0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8007df2:	683b      	ldr	r3, [r7, #0]
 8007df4:	685b      	ldr	r3, [r3, #4]
 8007df6:	f003 0303 	and.w	r3, r3, #3
 8007dfa:	2b03      	cmp	r3, #3
 8007dfc:	d017      	beq.n	8007e2e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	68db      	ldr	r3, [r3, #12]
 8007e02:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8007e04:	69fb      	ldr	r3, [r7, #28]
 8007e06:	005b      	lsls	r3, r3, #1
 8007e08:	2203      	movs	r2, #3
 8007e0a:	fa02 f303 	lsl.w	r3, r2, r3
 8007e0e:	43db      	mvns	r3, r3
 8007e10:	69ba      	ldr	r2, [r7, #24]
 8007e12:	4013      	ands	r3, r2
 8007e14:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007e16:	683b      	ldr	r3, [r7, #0]
 8007e18:	689a      	ldr	r2, [r3, #8]
 8007e1a:	69fb      	ldr	r3, [r7, #28]
 8007e1c:	005b      	lsls	r3, r3, #1
 8007e1e:	fa02 f303 	lsl.w	r3, r2, r3
 8007e22:	69ba      	ldr	r2, [r7, #24]
 8007e24:	4313      	orrs	r3, r2
 8007e26:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	69ba      	ldr	r2, [r7, #24]
 8007e2c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007e2e:	683b      	ldr	r3, [r7, #0]
 8007e30:	685b      	ldr	r3, [r3, #4]
 8007e32:	f003 0303 	and.w	r3, r3, #3
 8007e36:	2b02      	cmp	r3, #2
 8007e38:	d123      	bne.n	8007e82 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8007e3a:	69fb      	ldr	r3, [r7, #28]
 8007e3c:	08da      	lsrs	r2, r3, #3
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	3208      	adds	r2, #8
 8007e42:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e46:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8007e48:	69fb      	ldr	r3, [r7, #28]
 8007e4a:	f003 0307 	and.w	r3, r3, #7
 8007e4e:	009b      	lsls	r3, r3, #2
 8007e50:	220f      	movs	r2, #15
 8007e52:	fa02 f303 	lsl.w	r3, r2, r3
 8007e56:	43db      	mvns	r3, r3
 8007e58:	69ba      	ldr	r2, [r7, #24]
 8007e5a:	4013      	ands	r3, r2
 8007e5c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8007e5e:	683b      	ldr	r3, [r7, #0]
 8007e60:	691a      	ldr	r2, [r3, #16]
 8007e62:	69fb      	ldr	r3, [r7, #28]
 8007e64:	f003 0307 	and.w	r3, r3, #7
 8007e68:	009b      	lsls	r3, r3, #2
 8007e6a:	fa02 f303 	lsl.w	r3, r2, r3
 8007e6e:	69ba      	ldr	r2, [r7, #24]
 8007e70:	4313      	orrs	r3, r2
 8007e72:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8007e74:	69fb      	ldr	r3, [r7, #28]
 8007e76:	08da      	lsrs	r2, r3, #3
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	3208      	adds	r2, #8
 8007e7c:	69b9      	ldr	r1, [r7, #24]
 8007e7e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8007e88:	69fb      	ldr	r3, [r7, #28]
 8007e8a:	005b      	lsls	r3, r3, #1
 8007e8c:	2203      	movs	r2, #3
 8007e8e:	fa02 f303 	lsl.w	r3, r2, r3
 8007e92:	43db      	mvns	r3, r3
 8007e94:	69ba      	ldr	r2, [r7, #24]
 8007e96:	4013      	ands	r3, r2
 8007e98:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8007e9a:	683b      	ldr	r3, [r7, #0]
 8007e9c:	685b      	ldr	r3, [r3, #4]
 8007e9e:	f003 0203 	and.w	r2, r3, #3
 8007ea2:	69fb      	ldr	r3, [r7, #28]
 8007ea4:	005b      	lsls	r3, r3, #1
 8007ea6:	fa02 f303 	lsl.w	r3, r2, r3
 8007eaa:	69ba      	ldr	r2, [r7, #24]
 8007eac:	4313      	orrs	r3, r2
 8007eae:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	69ba      	ldr	r2, [r7, #24]
 8007eb4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8007eb6:	683b      	ldr	r3, [r7, #0]
 8007eb8:	685b      	ldr	r3, [r3, #4]
 8007eba:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8007ebe:	2b00      	cmp	r3, #0
 8007ec0:	f000 80e0 	beq.w	8008084 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007ec4:	4b2f      	ldr	r3, [pc, #188]	; (8007f84 <HAL_GPIO_Init+0x238>)
 8007ec6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007eca:	4a2e      	ldr	r2, [pc, #184]	; (8007f84 <HAL_GPIO_Init+0x238>)
 8007ecc:	f043 0302 	orr.w	r3, r3, #2
 8007ed0:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8007ed4:	4b2b      	ldr	r3, [pc, #172]	; (8007f84 <HAL_GPIO_Init+0x238>)
 8007ed6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007eda:	f003 0302 	and.w	r3, r3, #2
 8007ede:	60fb      	str	r3, [r7, #12]
 8007ee0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8007ee2:	4a29      	ldr	r2, [pc, #164]	; (8007f88 <HAL_GPIO_Init+0x23c>)
 8007ee4:	69fb      	ldr	r3, [r7, #28]
 8007ee6:	089b      	lsrs	r3, r3, #2
 8007ee8:	3302      	adds	r3, #2
 8007eea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007eee:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8007ef0:	69fb      	ldr	r3, [r7, #28]
 8007ef2:	f003 0303 	and.w	r3, r3, #3
 8007ef6:	009b      	lsls	r3, r3, #2
 8007ef8:	220f      	movs	r2, #15
 8007efa:	fa02 f303 	lsl.w	r3, r2, r3
 8007efe:	43db      	mvns	r3, r3
 8007f00:	69ba      	ldr	r2, [r7, #24]
 8007f02:	4013      	ands	r3, r2
 8007f04:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	4a20      	ldr	r2, [pc, #128]	; (8007f8c <HAL_GPIO_Init+0x240>)
 8007f0a:	4293      	cmp	r3, r2
 8007f0c:	d052      	beq.n	8007fb4 <HAL_GPIO_Init+0x268>
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	4a1f      	ldr	r2, [pc, #124]	; (8007f90 <HAL_GPIO_Init+0x244>)
 8007f12:	4293      	cmp	r3, r2
 8007f14:	d031      	beq.n	8007f7a <HAL_GPIO_Init+0x22e>
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	4a1e      	ldr	r2, [pc, #120]	; (8007f94 <HAL_GPIO_Init+0x248>)
 8007f1a:	4293      	cmp	r3, r2
 8007f1c:	d02b      	beq.n	8007f76 <HAL_GPIO_Init+0x22a>
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	4a1d      	ldr	r2, [pc, #116]	; (8007f98 <HAL_GPIO_Init+0x24c>)
 8007f22:	4293      	cmp	r3, r2
 8007f24:	d025      	beq.n	8007f72 <HAL_GPIO_Init+0x226>
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	4a1c      	ldr	r2, [pc, #112]	; (8007f9c <HAL_GPIO_Init+0x250>)
 8007f2a:	4293      	cmp	r3, r2
 8007f2c:	d01f      	beq.n	8007f6e <HAL_GPIO_Init+0x222>
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	4a1b      	ldr	r2, [pc, #108]	; (8007fa0 <HAL_GPIO_Init+0x254>)
 8007f32:	4293      	cmp	r3, r2
 8007f34:	d019      	beq.n	8007f6a <HAL_GPIO_Init+0x21e>
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	4a1a      	ldr	r2, [pc, #104]	; (8007fa4 <HAL_GPIO_Init+0x258>)
 8007f3a:	4293      	cmp	r3, r2
 8007f3c:	d013      	beq.n	8007f66 <HAL_GPIO_Init+0x21a>
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	4a19      	ldr	r2, [pc, #100]	; (8007fa8 <HAL_GPIO_Init+0x25c>)
 8007f42:	4293      	cmp	r3, r2
 8007f44:	d00d      	beq.n	8007f62 <HAL_GPIO_Init+0x216>
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	4a18      	ldr	r2, [pc, #96]	; (8007fac <HAL_GPIO_Init+0x260>)
 8007f4a:	4293      	cmp	r3, r2
 8007f4c:	d007      	beq.n	8007f5e <HAL_GPIO_Init+0x212>
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	4a17      	ldr	r2, [pc, #92]	; (8007fb0 <HAL_GPIO_Init+0x264>)
 8007f52:	4293      	cmp	r3, r2
 8007f54:	d101      	bne.n	8007f5a <HAL_GPIO_Init+0x20e>
 8007f56:	2309      	movs	r3, #9
 8007f58:	e02d      	b.n	8007fb6 <HAL_GPIO_Init+0x26a>
 8007f5a:	230a      	movs	r3, #10
 8007f5c:	e02b      	b.n	8007fb6 <HAL_GPIO_Init+0x26a>
 8007f5e:	2308      	movs	r3, #8
 8007f60:	e029      	b.n	8007fb6 <HAL_GPIO_Init+0x26a>
 8007f62:	2307      	movs	r3, #7
 8007f64:	e027      	b.n	8007fb6 <HAL_GPIO_Init+0x26a>
 8007f66:	2306      	movs	r3, #6
 8007f68:	e025      	b.n	8007fb6 <HAL_GPIO_Init+0x26a>
 8007f6a:	2305      	movs	r3, #5
 8007f6c:	e023      	b.n	8007fb6 <HAL_GPIO_Init+0x26a>
 8007f6e:	2304      	movs	r3, #4
 8007f70:	e021      	b.n	8007fb6 <HAL_GPIO_Init+0x26a>
 8007f72:	2303      	movs	r3, #3
 8007f74:	e01f      	b.n	8007fb6 <HAL_GPIO_Init+0x26a>
 8007f76:	2302      	movs	r3, #2
 8007f78:	e01d      	b.n	8007fb6 <HAL_GPIO_Init+0x26a>
 8007f7a:	2301      	movs	r3, #1
 8007f7c:	e01b      	b.n	8007fb6 <HAL_GPIO_Init+0x26a>
 8007f7e:	bf00      	nop
 8007f80:	58000080 	.word	0x58000080
 8007f84:	58024400 	.word	0x58024400
 8007f88:	58000400 	.word	0x58000400
 8007f8c:	58020000 	.word	0x58020000
 8007f90:	58020400 	.word	0x58020400
 8007f94:	58020800 	.word	0x58020800
 8007f98:	58020c00 	.word	0x58020c00
 8007f9c:	58021000 	.word	0x58021000
 8007fa0:	58021400 	.word	0x58021400
 8007fa4:	58021800 	.word	0x58021800
 8007fa8:	58021c00 	.word	0x58021c00
 8007fac:	58022000 	.word	0x58022000
 8007fb0:	58022400 	.word	0x58022400
 8007fb4:	2300      	movs	r3, #0
 8007fb6:	69fa      	ldr	r2, [r7, #28]
 8007fb8:	f002 0203 	and.w	r2, r2, #3
 8007fbc:	0092      	lsls	r2, r2, #2
 8007fbe:	4093      	lsls	r3, r2
 8007fc0:	69ba      	ldr	r2, [r7, #24]
 8007fc2:	4313      	orrs	r3, r2
 8007fc4:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8007fc6:	4938      	ldr	r1, [pc, #224]	; (80080a8 <HAL_GPIO_Init+0x35c>)
 8007fc8:	69fb      	ldr	r3, [r7, #28]
 8007fca:	089b      	lsrs	r3, r3, #2
 8007fcc:	3302      	adds	r3, #2
 8007fce:	69ba      	ldr	r2, [r7, #24]
 8007fd0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8007fd4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007fdc:	693b      	ldr	r3, [r7, #16]
 8007fde:	43db      	mvns	r3, r3
 8007fe0:	69ba      	ldr	r2, [r7, #24]
 8007fe2:	4013      	ands	r3, r2
 8007fe4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8007fe6:	683b      	ldr	r3, [r7, #0]
 8007fe8:	685b      	ldr	r3, [r3, #4]
 8007fea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	d003      	beq.n	8007ffa <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8007ff2:	69ba      	ldr	r2, [r7, #24]
 8007ff4:	693b      	ldr	r3, [r7, #16]
 8007ff6:	4313      	orrs	r3, r2
 8007ff8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8007ffa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007ffe:	69bb      	ldr	r3, [r7, #24]
 8008000:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8008002:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008006:	685b      	ldr	r3, [r3, #4]
 8008008:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800800a:	693b      	ldr	r3, [r7, #16]
 800800c:	43db      	mvns	r3, r3
 800800e:	69ba      	ldr	r2, [r7, #24]
 8008010:	4013      	ands	r3, r2
 8008012:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8008014:	683b      	ldr	r3, [r7, #0]
 8008016:	685b      	ldr	r3, [r3, #4]
 8008018:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800801c:	2b00      	cmp	r3, #0
 800801e:	d003      	beq.n	8008028 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8008020:	69ba      	ldr	r2, [r7, #24]
 8008022:	693b      	ldr	r3, [r7, #16]
 8008024:	4313      	orrs	r3, r2
 8008026:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8008028:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800802c:	69bb      	ldr	r3, [r7, #24]
 800802e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8008030:	697b      	ldr	r3, [r7, #20]
 8008032:	685b      	ldr	r3, [r3, #4]
 8008034:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008036:	693b      	ldr	r3, [r7, #16]
 8008038:	43db      	mvns	r3, r3
 800803a:	69ba      	ldr	r2, [r7, #24]
 800803c:	4013      	ands	r3, r2
 800803e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8008040:	683b      	ldr	r3, [r7, #0]
 8008042:	685b      	ldr	r3, [r3, #4]
 8008044:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008048:	2b00      	cmp	r3, #0
 800804a:	d003      	beq.n	8008054 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 800804c:	69ba      	ldr	r2, [r7, #24]
 800804e:	693b      	ldr	r3, [r7, #16]
 8008050:	4313      	orrs	r3, r2
 8008052:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8008054:	697b      	ldr	r3, [r7, #20]
 8008056:	69ba      	ldr	r2, [r7, #24]
 8008058:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800805a:	697b      	ldr	r3, [r7, #20]
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008060:	693b      	ldr	r3, [r7, #16]
 8008062:	43db      	mvns	r3, r3
 8008064:	69ba      	ldr	r2, [r7, #24]
 8008066:	4013      	ands	r3, r2
 8008068:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800806a:	683b      	ldr	r3, [r7, #0]
 800806c:	685b      	ldr	r3, [r3, #4]
 800806e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008072:	2b00      	cmp	r3, #0
 8008074:	d003      	beq.n	800807e <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8008076:	69ba      	ldr	r2, [r7, #24]
 8008078:	693b      	ldr	r3, [r7, #16]
 800807a:	4313      	orrs	r3, r2
 800807c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800807e:	697b      	ldr	r3, [r7, #20]
 8008080:	69ba      	ldr	r2, [r7, #24]
 8008082:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8008084:	69fb      	ldr	r3, [r7, #28]
 8008086:	3301      	adds	r3, #1
 8008088:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800808a:	683b      	ldr	r3, [r7, #0]
 800808c:	681a      	ldr	r2, [r3, #0]
 800808e:	69fb      	ldr	r3, [r7, #28]
 8008090:	fa22 f303 	lsr.w	r3, r2, r3
 8008094:	2b00      	cmp	r3, #0
 8008096:	f47f ae63 	bne.w	8007d60 <HAL_GPIO_Init+0x14>
  }
}
 800809a:	bf00      	nop
 800809c:	bf00      	nop
 800809e:	3724      	adds	r7, #36	; 0x24
 80080a0:	46bd      	mov	sp, r7
 80080a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080a6:	4770      	bx	lr
 80080a8:	58000400 	.word	0x58000400

080080ac <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80080ac:	b480      	push	{r7}
 80080ae:	b085      	sub	sp, #20
 80080b0:	af00      	add	r7, sp, #0
 80080b2:	6078      	str	r0, [r7, #4]
 80080b4:	460b      	mov	r3, r1
 80080b6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	691a      	ldr	r2, [r3, #16]
 80080bc:	887b      	ldrh	r3, [r7, #2]
 80080be:	4013      	ands	r3, r2
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	d002      	beq.n	80080ca <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80080c4:	2301      	movs	r3, #1
 80080c6:	73fb      	strb	r3, [r7, #15]
 80080c8:	e001      	b.n	80080ce <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80080ca:	2300      	movs	r3, #0
 80080cc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80080ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80080d0:	4618      	mov	r0, r3
 80080d2:	3714      	adds	r7, #20
 80080d4:	46bd      	mov	sp, r7
 80080d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080da:	4770      	bx	lr

080080dc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80080dc:	b480      	push	{r7}
 80080de:	b083      	sub	sp, #12
 80080e0:	af00      	add	r7, sp, #0
 80080e2:	6078      	str	r0, [r7, #4]
 80080e4:	460b      	mov	r3, r1
 80080e6:	807b      	strh	r3, [r7, #2]
 80080e8:	4613      	mov	r3, r2
 80080ea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80080ec:	787b      	ldrb	r3, [r7, #1]
 80080ee:	2b00      	cmp	r3, #0
 80080f0:	d003      	beq.n	80080fa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80080f2:	887a      	ldrh	r2, [r7, #2]
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80080f8:	e003      	b.n	8008102 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80080fa:	887b      	ldrh	r3, [r7, #2]
 80080fc:	041a      	lsls	r2, r3, #16
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	619a      	str	r2, [r3, #24]
}
 8008102:	bf00      	nop
 8008104:	370c      	adds	r7, #12
 8008106:	46bd      	mov	sp, r7
 8008108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800810c:	4770      	bx	lr

0800810e <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800810e:	b580      	push	{r7, lr}
 8008110:	b082      	sub	sp, #8
 8008112:	af00      	add	r7, sp, #0
 8008114:	4603      	mov	r3, r0
 8008116:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 8008118:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800811c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8008120:	88fb      	ldrh	r3, [r7, #6]
 8008122:	4013      	ands	r3, r2
 8008124:	2b00      	cmp	r3, #0
 8008126:	d008      	beq.n	800813a <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8008128:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800812c:	88fb      	ldrh	r3, [r7, #6]
 800812e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8008132:	88fb      	ldrh	r3, [r7, #6]
 8008134:	4618      	mov	r0, r3
 8008136:	f7fa ffed 	bl	8003114 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 800813a:	bf00      	nop
 800813c:	3708      	adds	r7, #8
 800813e:	46bd      	mov	sp, r7
 8008140:	bd80      	pop	{r7, pc}
	...

08008144 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8008144:	b580      	push	{r7, lr}
 8008146:	b084      	sub	sp, #16
 8008148:	af00      	add	r7, sp, #0
 800814a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 800814c:	4b19      	ldr	r3, [pc, #100]	; (80081b4 <HAL_PWREx_ConfigSupply+0x70>)
 800814e:	68db      	ldr	r3, [r3, #12]
 8008150:	f003 0304 	and.w	r3, r3, #4
 8008154:	2b04      	cmp	r3, #4
 8008156:	d00a      	beq.n	800816e <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8008158:	4b16      	ldr	r3, [pc, #88]	; (80081b4 <HAL_PWREx_ConfigSupply+0x70>)
 800815a:	68db      	ldr	r3, [r3, #12]
 800815c:	f003 0307 	and.w	r3, r3, #7
 8008160:	687a      	ldr	r2, [r7, #4]
 8008162:	429a      	cmp	r2, r3
 8008164:	d001      	beq.n	800816a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8008166:	2301      	movs	r3, #1
 8008168:	e01f      	b.n	80081aa <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800816a:	2300      	movs	r3, #0
 800816c:	e01d      	b.n	80081aa <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800816e:	4b11      	ldr	r3, [pc, #68]	; (80081b4 <HAL_PWREx_ConfigSupply+0x70>)
 8008170:	68db      	ldr	r3, [r3, #12]
 8008172:	f023 0207 	bic.w	r2, r3, #7
 8008176:	490f      	ldr	r1, [pc, #60]	; (80081b4 <HAL_PWREx_ConfigSupply+0x70>)
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	4313      	orrs	r3, r2
 800817c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800817e:	f7fe ff03 	bl	8006f88 <HAL_GetTick>
 8008182:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8008184:	e009      	b.n	800819a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8008186:	f7fe feff 	bl	8006f88 <HAL_GetTick>
 800818a:	4602      	mov	r2, r0
 800818c:	68fb      	ldr	r3, [r7, #12]
 800818e:	1ad3      	subs	r3, r2, r3
 8008190:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008194:	d901      	bls.n	800819a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8008196:	2301      	movs	r3, #1
 8008198:	e007      	b.n	80081aa <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800819a:	4b06      	ldr	r3, [pc, #24]	; (80081b4 <HAL_PWREx_ConfigSupply+0x70>)
 800819c:	685b      	ldr	r3, [r3, #4]
 800819e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80081a2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80081a6:	d1ee      	bne.n	8008186 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80081a8:	2300      	movs	r3, #0
}
 80081aa:	4618      	mov	r0, r3
 80081ac:	3710      	adds	r7, #16
 80081ae:	46bd      	mov	sp, r7
 80081b0:	bd80      	pop	{r7, pc}
 80081b2:	bf00      	nop
 80081b4:	58024800 	.word	0x58024800

080081b8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80081b8:	b580      	push	{r7, lr}
 80081ba:	b08c      	sub	sp, #48	; 0x30
 80081bc:	af00      	add	r7, sp, #0
 80081be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	2b00      	cmp	r3, #0
 80081c4:	d102      	bne.n	80081cc <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80081c6:	2301      	movs	r3, #1
 80081c8:	f000 bc1d 	b.w	8008a06 <HAL_RCC_OscConfig+0x84e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	f003 0301 	and.w	r3, r3, #1
 80081d4:	2b00      	cmp	r3, #0
 80081d6:	f000 8087 	beq.w	80082e8 <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80081da:	4b99      	ldr	r3, [pc, #612]	; (8008440 <HAL_RCC_OscConfig+0x288>)
 80081dc:	691b      	ldr	r3, [r3, #16]
 80081de:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80081e2:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80081e4:	4b96      	ldr	r3, [pc, #600]	; (8008440 <HAL_RCC_OscConfig+0x288>)
 80081e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80081e8:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80081ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80081ec:	2b10      	cmp	r3, #16
 80081ee:	d007      	beq.n	8008200 <HAL_RCC_OscConfig+0x48>
 80081f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80081f2:	2b18      	cmp	r3, #24
 80081f4:	d110      	bne.n	8008218 <HAL_RCC_OscConfig+0x60>
 80081f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081f8:	f003 0303 	and.w	r3, r3, #3
 80081fc:	2b02      	cmp	r3, #2
 80081fe:	d10b      	bne.n	8008218 <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008200:	4b8f      	ldr	r3, [pc, #572]	; (8008440 <HAL_RCC_OscConfig+0x288>)
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008208:	2b00      	cmp	r3, #0
 800820a:	d06c      	beq.n	80082e6 <HAL_RCC_OscConfig+0x12e>
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	685b      	ldr	r3, [r3, #4]
 8008210:	2b00      	cmp	r3, #0
 8008212:	d168      	bne.n	80082e6 <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 8008214:	2301      	movs	r3, #1
 8008216:	e3f6      	b.n	8008a06 <HAL_RCC_OscConfig+0x84e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	685b      	ldr	r3, [r3, #4]
 800821c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008220:	d106      	bne.n	8008230 <HAL_RCC_OscConfig+0x78>
 8008222:	4b87      	ldr	r3, [pc, #540]	; (8008440 <HAL_RCC_OscConfig+0x288>)
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	4a86      	ldr	r2, [pc, #536]	; (8008440 <HAL_RCC_OscConfig+0x288>)
 8008228:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800822c:	6013      	str	r3, [r2, #0]
 800822e:	e02e      	b.n	800828e <HAL_RCC_OscConfig+0xd6>
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	685b      	ldr	r3, [r3, #4]
 8008234:	2b00      	cmp	r3, #0
 8008236:	d10c      	bne.n	8008252 <HAL_RCC_OscConfig+0x9a>
 8008238:	4b81      	ldr	r3, [pc, #516]	; (8008440 <HAL_RCC_OscConfig+0x288>)
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	4a80      	ldr	r2, [pc, #512]	; (8008440 <HAL_RCC_OscConfig+0x288>)
 800823e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008242:	6013      	str	r3, [r2, #0]
 8008244:	4b7e      	ldr	r3, [pc, #504]	; (8008440 <HAL_RCC_OscConfig+0x288>)
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	4a7d      	ldr	r2, [pc, #500]	; (8008440 <HAL_RCC_OscConfig+0x288>)
 800824a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800824e:	6013      	str	r3, [r2, #0]
 8008250:	e01d      	b.n	800828e <HAL_RCC_OscConfig+0xd6>
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	685b      	ldr	r3, [r3, #4]
 8008256:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800825a:	d10c      	bne.n	8008276 <HAL_RCC_OscConfig+0xbe>
 800825c:	4b78      	ldr	r3, [pc, #480]	; (8008440 <HAL_RCC_OscConfig+0x288>)
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	4a77      	ldr	r2, [pc, #476]	; (8008440 <HAL_RCC_OscConfig+0x288>)
 8008262:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008266:	6013      	str	r3, [r2, #0]
 8008268:	4b75      	ldr	r3, [pc, #468]	; (8008440 <HAL_RCC_OscConfig+0x288>)
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	4a74      	ldr	r2, [pc, #464]	; (8008440 <HAL_RCC_OscConfig+0x288>)
 800826e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008272:	6013      	str	r3, [r2, #0]
 8008274:	e00b      	b.n	800828e <HAL_RCC_OscConfig+0xd6>
 8008276:	4b72      	ldr	r3, [pc, #456]	; (8008440 <HAL_RCC_OscConfig+0x288>)
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	4a71      	ldr	r2, [pc, #452]	; (8008440 <HAL_RCC_OscConfig+0x288>)
 800827c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008280:	6013      	str	r3, [r2, #0]
 8008282:	4b6f      	ldr	r3, [pc, #444]	; (8008440 <HAL_RCC_OscConfig+0x288>)
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	4a6e      	ldr	r2, [pc, #440]	; (8008440 <HAL_RCC_OscConfig+0x288>)
 8008288:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800828c:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	685b      	ldr	r3, [r3, #4]
 8008292:	2b00      	cmp	r3, #0
 8008294:	d013      	beq.n	80082be <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008296:	f7fe fe77 	bl	8006f88 <HAL_GetTick>
 800829a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800829c:	e008      	b.n	80082b0 <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800829e:	f7fe fe73 	bl	8006f88 <HAL_GetTick>
 80082a2:	4602      	mov	r2, r0
 80082a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082a6:	1ad3      	subs	r3, r2, r3
 80082a8:	2b64      	cmp	r3, #100	; 0x64
 80082aa:	d901      	bls.n	80082b0 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 80082ac:	2303      	movs	r3, #3
 80082ae:	e3aa      	b.n	8008a06 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80082b0:	4b63      	ldr	r3, [pc, #396]	; (8008440 <HAL_RCC_OscConfig+0x288>)
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80082b8:	2b00      	cmp	r3, #0
 80082ba:	d0f0      	beq.n	800829e <HAL_RCC_OscConfig+0xe6>
 80082bc:	e014      	b.n	80082e8 <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80082be:	f7fe fe63 	bl	8006f88 <HAL_GetTick>
 80082c2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80082c4:	e008      	b.n	80082d8 <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80082c6:	f7fe fe5f 	bl	8006f88 <HAL_GetTick>
 80082ca:	4602      	mov	r2, r0
 80082cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082ce:	1ad3      	subs	r3, r2, r3
 80082d0:	2b64      	cmp	r3, #100	; 0x64
 80082d2:	d901      	bls.n	80082d8 <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 80082d4:	2303      	movs	r3, #3
 80082d6:	e396      	b.n	8008a06 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80082d8:	4b59      	ldr	r3, [pc, #356]	; (8008440 <HAL_RCC_OscConfig+0x288>)
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80082e0:	2b00      	cmp	r3, #0
 80082e2:	d1f0      	bne.n	80082c6 <HAL_RCC_OscConfig+0x10e>
 80082e4:	e000      	b.n	80082e8 <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80082e6:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	f003 0302 	and.w	r3, r3, #2
 80082f0:	2b00      	cmp	r3, #0
 80082f2:	f000 80cb 	beq.w	800848c <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80082f6:	4b52      	ldr	r3, [pc, #328]	; (8008440 <HAL_RCC_OscConfig+0x288>)
 80082f8:	691b      	ldr	r3, [r3, #16]
 80082fa:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80082fe:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8008300:	4b4f      	ldr	r3, [pc, #316]	; (8008440 <HAL_RCC_OscConfig+0x288>)
 8008302:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008304:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8008306:	6a3b      	ldr	r3, [r7, #32]
 8008308:	2b00      	cmp	r3, #0
 800830a:	d007      	beq.n	800831c <HAL_RCC_OscConfig+0x164>
 800830c:	6a3b      	ldr	r3, [r7, #32]
 800830e:	2b18      	cmp	r3, #24
 8008310:	d156      	bne.n	80083c0 <HAL_RCC_OscConfig+0x208>
 8008312:	69fb      	ldr	r3, [r7, #28]
 8008314:	f003 0303 	and.w	r3, r3, #3
 8008318:	2b00      	cmp	r3, #0
 800831a:	d151      	bne.n	80083c0 <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800831c:	4b48      	ldr	r3, [pc, #288]	; (8008440 <HAL_RCC_OscConfig+0x288>)
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	f003 0304 	and.w	r3, r3, #4
 8008324:	2b00      	cmp	r3, #0
 8008326:	d005      	beq.n	8008334 <HAL_RCC_OscConfig+0x17c>
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	68db      	ldr	r3, [r3, #12]
 800832c:	2b00      	cmp	r3, #0
 800832e:	d101      	bne.n	8008334 <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 8008330:	2301      	movs	r3, #1
 8008332:	e368      	b.n	8008a06 <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8008334:	4b42      	ldr	r3, [pc, #264]	; (8008440 <HAL_RCC_OscConfig+0x288>)
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	f023 0219 	bic.w	r2, r3, #25
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	68db      	ldr	r3, [r3, #12]
 8008340:	493f      	ldr	r1, [pc, #252]	; (8008440 <HAL_RCC_OscConfig+0x288>)
 8008342:	4313      	orrs	r3, r2
 8008344:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8008346:	f7fe fe1f 	bl	8006f88 <HAL_GetTick>
 800834a:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800834c:	e008      	b.n	8008360 <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800834e:	f7fe fe1b 	bl	8006f88 <HAL_GetTick>
 8008352:	4602      	mov	r2, r0
 8008354:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008356:	1ad3      	subs	r3, r2, r3
 8008358:	2b02      	cmp	r3, #2
 800835a:	d901      	bls.n	8008360 <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 800835c:	2303      	movs	r3, #3
 800835e:	e352      	b.n	8008a06 <HAL_RCC_OscConfig+0x84e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008360:	4b37      	ldr	r3, [pc, #220]	; (8008440 <HAL_RCC_OscConfig+0x288>)
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	f003 0304 	and.w	r3, r3, #4
 8008368:	2b00      	cmp	r3, #0
 800836a:	d0f0      	beq.n	800834e <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800836c:	f7fe fe3c 	bl	8006fe8 <HAL_GetREVID>
 8008370:	4603      	mov	r3, r0
 8008372:	f241 0203 	movw	r2, #4099	; 0x1003
 8008376:	4293      	cmp	r3, r2
 8008378:	d817      	bhi.n	80083aa <HAL_RCC_OscConfig+0x1f2>
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	691b      	ldr	r3, [r3, #16]
 800837e:	2b40      	cmp	r3, #64	; 0x40
 8008380:	d108      	bne.n	8008394 <HAL_RCC_OscConfig+0x1dc>
 8008382:	4b2f      	ldr	r3, [pc, #188]	; (8008440 <HAL_RCC_OscConfig+0x288>)
 8008384:	685b      	ldr	r3, [r3, #4]
 8008386:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800838a:	4a2d      	ldr	r2, [pc, #180]	; (8008440 <HAL_RCC_OscConfig+0x288>)
 800838c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008390:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008392:	e07b      	b.n	800848c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008394:	4b2a      	ldr	r3, [pc, #168]	; (8008440 <HAL_RCC_OscConfig+0x288>)
 8008396:	685b      	ldr	r3, [r3, #4]
 8008398:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	691b      	ldr	r3, [r3, #16]
 80083a0:	031b      	lsls	r3, r3, #12
 80083a2:	4927      	ldr	r1, [pc, #156]	; (8008440 <HAL_RCC_OscConfig+0x288>)
 80083a4:	4313      	orrs	r3, r2
 80083a6:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80083a8:	e070      	b.n	800848c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80083aa:	4b25      	ldr	r3, [pc, #148]	; (8008440 <HAL_RCC_OscConfig+0x288>)
 80083ac:	685b      	ldr	r3, [r3, #4]
 80083ae:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	691b      	ldr	r3, [r3, #16]
 80083b6:	061b      	lsls	r3, r3, #24
 80083b8:	4921      	ldr	r1, [pc, #132]	; (8008440 <HAL_RCC_OscConfig+0x288>)
 80083ba:	4313      	orrs	r3, r2
 80083bc:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80083be:	e065      	b.n	800848c <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	68db      	ldr	r3, [r3, #12]
 80083c4:	2b00      	cmp	r3, #0
 80083c6:	d048      	beq.n	800845a <HAL_RCC_OscConfig+0x2a2>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80083c8:	4b1d      	ldr	r3, [pc, #116]	; (8008440 <HAL_RCC_OscConfig+0x288>)
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	f023 0219 	bic.w	r2, r3, #25
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	68db      	ldr	r3, [r3, #12]
 80083d4:	491a      	ldr	r1, [pc, #104]	; (8008440 <HAL_RCC_OscConfig+0x288>)
 80083d6:	4313      	orrs	r3, r2
 80083d8:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80083da:	f7fe fdd5 	bl	8006f88 <HAL_GetTick>
 80083de:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80083e0:	e008      	b.n	80083f4 <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80083e2:	f7fe fdd1 	bl	8006f88 <HAL_GetTick>
 80083e6:	4602      	mov	r2, r0
 80083e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083ea:	1ad3      	subs	r3, r2, r3
 80083ec:	2b02      	cmp	r3, #2
 80083ee:	d901      	bls.n	80083f4 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 80083f0:	2303      	movs	r3, #3
 80083f2:	e308      	b.n	8008a06 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80083f4:	4b12      	ldr	r3, [pc, #72]	; (8008440 <HAL_RCC_OscConfig+0x288>)
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	f003 0304 	and.w	r3, r3, #4
 80083fc:	2b00      	cmp	r3, #0
 80083fe:	d0f0      	beq.n	80083e2 <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008400:	f7fe fdf2 	bl	8006fe8 <HAL_GetREVID>
 8008404:	4603      	mov	r3, r0
 8008406:	f241 0203 	movw	r2, #4099	; 0x1003
 800840a:	4293      	cmp	r3, r2
 800840c:	d81a      	bhi.n	8008444 <HAL_RCC_OscConfig+0x28c>
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	691b      	ldr	r3, [r3, #16]
 8008412:	2b40      	cmp	r3, #64	; 0x40
 8008414:	d108      	bne.n	8008428 <HAL_RCC_OscConfig+0x270>
 8008416:	4b0a      	ldr	r3, [pc, #40]	; (8008440 <HAL_RCC_OscConfig+0x288>)
 8008418:	685b      	ldr	r3, [r3, #4]
 800841a:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800841e:	4a08      	ldr	r2, [pc, #32]	; (8008440 <HAL_RCC_OscConfig+0x288>)
 8008420:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008424:	6053      	str	r3, [r2, #4]
 8008426:	e031      	b.n	800848c <HAL_RCC_OscConfig+0x2d4>
 8008428:	4b05      	ldr	r3, [pc, #20]	; (8008440 <HAL_RCC_OscConfig+0x288>)
 800842a:	685b      	ldr	r3, [r3, #4]
 800842c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	691b      	ldr	r3, [r3, #16]
 8008434:	031b      	lsls	r3, r3, #12
 8008436:	4902      	ldr	r1, [pc, #8]	; (8008440 <HAL_RCC_OscConfig+0x288>)
 8008438:	4313      	orrs	r3, r2
 800843a:	604b      	str	r3, [r1, #4]
 800843c:	e026      	b.n	800848c <HAL_RCC_OscConfig+0x2d4>
 800843e:	bf00      	nop
 8008440:	58024400 	.word	0x58024400
 8008444:	4b9a      	ldr	r3, [pc, #616]	; (80086b0 <HAL_RCC_OscConfig+0x4f8>)
 8008446:	685b      	ldr	r3, [r3, #4]
 8008448:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	691b      	ldr	r3, [r3, #16]
 8008450:	061b      	lsls	r3, r3, #24
 8008452:	4997      	ldr	r1, [pc, #604]	; (80086b0 <HAL_RCC_OscConfig+0x4f8>)
 8008454:	4313      	orrs	r3, r2
 8008456:	604b      	str	r3, [r1, #4]
 8008458:	e018      	b.n	800848c <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800845a:	4b95      	ldr	r3, [pc, #596]	; (80086b0 <HAL_RCC_OscConfig+0x4f8>)
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	4a94      	ldr	r2, [pc, #592]	; (80086b0 <HAL_RCC_OscConfig+0x4f8>)
 8008460:	f023 0301 	bic.w	r3, r3, #1
 8008464:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008466:	f7fe fd8f 	bl	8006f88 <HAL_GetTick>
 800846a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800846c:	e008      	b.n	8008480 <HAL_RCC_OscConfig+0x2c8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800846e:	f7fe fd8b 	bl	8006f88 <HAL_GetTick>
 8008472:	4602      	mov	r2, r0
 8008474:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008476:	1ad3      	subs	r3, r2, r3
 8008478:	2b02      	cmp	r3, #2
 800847a:	d901      	bls.n	8008480 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 800847c:	2303      	movs	r3, #3
 800847e:	e2c2      	b.n	8008a06 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8008480:	4b8b      	ldr	r3, [pc, #556]	; (80086b0 <HAL_RCC_OscConfig+0x4f8>)
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	f003 0304 	and.w	r3, r3, #4
 8008488:	2b00      	cmp	r3, #0
 800848a:	d1f0      	bne.n	800846e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	f003 0310 	and.w	r3, r3, #16
 8008494:	2b00      	cmp	r3, #0
 8008496:	f000 80a9 	beq.w	80085ec <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800849a:	4b85      	ldr	r3, [pc, #532]	; (80086b0 <HAL_RCC_OscConfig+0x4f8>)
 800849c:	691b      	ldr	r3, [r3, #16]
 800849e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80084a2:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80084a4:	4b82      	ldr	r3, [pc, #520]	; (80086b0 <HAL_RCC_OscConfig+0x4f8>)
 80084a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80084a8:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80084aa:	69bb      	ldr	r3, [r7, #24]
 80084ac:	2b08      	cmp	r3, #8
 80084ae:	d007      	beq.n	80084c0 <HAL_RCC_OscConfig+0x308>
 80084b0:	69bb      	ldr	r3, [r7, #24]
 80084b2:	2b18      	cmp	r3, #24
 80084b4:	d13a      	bne.n	800852c <HAL_RCC_OscConfig+0x374>
 80084b6:	697b      	ldr	r3, [r7, #20]
 80084b8:	f003 0303 	and.w	r3, r3, #3
 80084bc:	2b01      	cmp	r3, #1
 80084be:	d135      	bne.n	800852c <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80084c0:	4b7b      	ldr	r3, [pc, #492]	; (80086b0 <HAL_RCC_OscConfig+0x4f8>)
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80084c8:	2b00      	cmp	r3, #0
 80084ca:	d005      	beq.n	80084d8 <HAL_RCC_OscConfig+0x320>
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	69db      	ldr	r3, [r3, #28]
 80084d0:	2b80      	cmp	r3, #128	; 0x80
 80084d2:	d001      	beq.n	80084d8 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 80084d4:	2301      	movs	r3, #1
 80084d6:	e296      	b.n	8008a06 <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80084d8:	f7fe fd86 	bl	8006fe8 <HAL_GetREVID>
 80084dc:	4603      	mov	r3, r0
 80084de:	f241 0203 	movw	r2, #4099	; 0x1003
 80084e2:	4293      	cmp	r3, r2
 80084e4:	d817      	bhi.n	8008516 <HAL_RCC_OscConfig+0x35e>
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	6a1b      	ldr	r3, [r3, #32]
 80084ea:	2b20      	cmp	r3, #32
 80084ec:	d108      	bne.n	8008500 <HAL_RCC_OscConfig+0x348>
 80084ee:	4b70      	ldr	r3, [pc, #448]	; (80086b0 <HAL_RCC_OscConfig+0x4f8>)
 80084f0:	685b      	ldr	r3, [r3, #4]
 80084f2:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80084f6:	4a6e      	ldr	r2, [pc, #440]	; (80086b0 <HAL_RCC_OscConfig+0x4f8>)
 80084f8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80084fc:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80084fe:	e075      	b.n	80085ec <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008500:	4b6b      	ldr	r3, [pc, #428]	; (80086b0 <HAL_RCC_OscConfig+0x4f8>)
 8008502:	685b      	ldr	r3, [r3, #4]
 8008504:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	6a1b      	ldr	r3, [r3, #32]
 800850c:	069b      	lsls	r3, r3, #26
 800850e:	4968      	ldr	r1, [pc, #416]	; (80086b0 <HAL_RCC_OscConfig+0x4f8>)
 8008510:	4313      	orrs	r3, r2
 8008512:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8008514:	e06a      	b.n	80085ec <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008516:	4b66      	ldr	r3, [pc, #408]	; (80086b0 <HAL_RCC_OscConfig+0x4f8>)
 8008518:	68db      	ldr	r3, [r3, #12]
 800851a:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	6a1b      	ldr	r3, [r3, #32]
 8008522:	061b      	lsls	r3, r3, #24
 8008524:	4962      	ldr	r1, [pc, #392]	; (80086b0 <HAL_RCC_OscConfig+0x4f8>)
 8008526:	4313      	orrs	r3, r2
 8008528:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800852a:	e05f      	b.n	80085ec <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	69db      	ldr	r3, [r3, #28]
 8008530:	2b00      	cmp	r3, #0
 8008532:	d042      	beq.n	80085ba <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8008534:	4b5e      	ldr	r3, [pc, #376]	; (80086b0 <HAL_RCC_OscConfig+0x4f8>)
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	4a5d      	ldr	r2, [pc, #372]	; (80086b0 <HAL_RCC_OscConfig+0x4f8>)
 800853a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800853e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008540:	f7fe fd22 	bl	8006f88 <HAL_GetTick>
 8008544:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008546:	e008      	b.n	800855a <HAL_RCC_OscConfig+0x3a2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8008548:	f7fe fd1e 	bl	8006f88 <HAL_GetTick>
 800854c:	4602      	mov	r2, r0
 800854e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008550:	1ad3      	subs	r3, r2, r3
 8008552:	2b02      	cmp	r3, #2
 8008554:	d901      	bls.n	800855a <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8008556:	2303      	movs	r3, #3
 8008558:	e255      	b.n	8008a06 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800855a:	4b55      	ldr	r3, [pc, #340]	; (80086b0 <HAL_RCC_OscConfig+0x4f8>)
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008562:	2b00      	cmp	r3, #0
 8008564:	d0f0      	beq.n	8008548 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008566:	f7fe fd3f 	bl	8006fe8 <HAL_GetREVID>
 800856a:	4603      	mov	r3, r0
 800856c:	f241 0203 	movw	r2, #4099	; 0x1003
 8008570:	4293      	cmp	r3, r2
 8008572:	d817      	bhi.n	80085a4 <HAL_RCC_OscConfig+0x3ec>
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	6a1b      	ldr	r3, [r3, #32]
 8008578:	2b20      	cmp	r3, #32
 800857a:	d108      	bne.n	800858e <HAL_RCC_OscConfig+0x3d6>
 800857c:	4b4c      	ldr	r3, [pc, #304]	; (80086b0 <HAL_RCC_OscConfig+0x4f8>)
 800857e:	685b      	ldr	r3, [r3, #4]
 8008580:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8008584:	4a4a      	ldr	r2, [pc, #296]	; (80086b0 <HAL_RCC_OscConfig+0x4f8>)
 8008586:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800858a:	6053      	str	r3, [r2, #4]
 800858c:	e02e      	b.n	80085ec <HAL_RCC_OscConfig+0x434>
 800858e:	4b48      	ldr	r3, [pc, #288]	; (80086b0 <HAL_RCC_OscConfig+0x4f8>)
 8008590:	685b      	ldr	r3, [r3, #4]
 8008592:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	6a1b      	ldr	r3, [r3, #32]
 800859a:	069b      	lsls	r3, r3, #26
 800859c:	4944      	ldr	r1, [pc, #272]	; (80086b0 <HAL_RCC_OscConfig+0x4f8>)
 800859e:	4313      	orrs	r3, r2
 80085a0:	604b      	str	r3, [r1, #4]
 80085a2:	e023      	b.n	80085ec <HAL_RCC_OscConfig+0x434>
 80085a4:	4b42      	ldr	r3, [pc, #264]	; (80086b0 <HAL_RCC_OscConfig+0x4f8>)
 80085a6:	68db      	ldr	r3, [r3, #12]
 80085a8:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	6a1b      	ldr	r3, [r3, #32]
 80085b0:	061b      	lsls	r3, r3, #24
 80085b2:	493f      	ldr	r1, [pc, #252]	; (80086b0 <HAL_RCC_OscConfig+0x4f8>)
 80085b4:	4313      	orrs	r3, r2
 80085b6:	60cb      	str	r3, [r1, #12]
 80085b8:	e018      	b.n	80085ec <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80085ba:	4b3d      	ldr	r3, [pc, #244]	; (80086b0 <HAL_RCC_OscConfig+0x4f8>)
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	4a3c      	ldr	r2, [pc, #240]	; (80086b0 <HAL_RCC_OscConfig+0x4f8>)
 80085c0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80085c4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80085c6:	f7fe fcdf 	bl	8006f88 <HAL_GetTick>
 80085ca:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80085cc:	e008      	b.n	80085e0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80085ce:	f7fe fcdb 	bl	8006f88 <HAL_GetTick>
 80085d2:	4602      	mov	r2, r0
 80085d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085d6:	1ad3      	subs	r3, r2, r3
 80085d8:	2b02      	cmp	r3, #2
 80085da:	d901      	bls.n	80085e0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80085dc:	2303      	movs	r3, #3
 80085de:	e212      	b.n	8008a06 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80085e0:	4b33      	ldr	r3, [pc, #204]	; (80086b0 <HAL_RCC_OscConfig+0x4f8>)
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80085e8:	2b00      	cmp	r3, #0
 80085ea:	d1f0      	bne.n	80085ce <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	f003 0308 	and.w	r3, r3, #8
 80085f4:	2b00      	cmp	r3, #0
 80085f6:	d036      	beq.n	8008666 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	695b      	ldr	r3, [r3, #20]
 80085fc:	2b00      	cmp	r3, #0
 80085fe:	d019      	beq.n	8008634 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008600:	4b2b      	ldr	r3, [pc, #172]	; (80086b0 <HAL_RCC_OscConfig+0x4f8>)
 8008602:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008604:	4a2a      	ldr	r2, [pc, #168]	; (80086b0 <HAL_RCC_OscConfig+0x4f8>)
 8008606:	f043 0301 	orr.w	r3, r3, #1
 800860a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800860c:	f7fe fcbc 	bl	8006f88 <HAL_GetTick>
 8008610:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8008612:	e008      	b.n	8008626 <HAL_RCC_OscConfig+0x46e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008614:	f7fe fcb8 	bl	8006f88 <HAL_GetTick>
 8008618:	4602      	mov	r2, r0
 800861a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800861c:	1ad3      	subs	r3, r2, r3
 800861e:	2b02      	cmp	r3, #2
 8008620:	d901      	bls.n	8008626 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8008622:	2303      	movs	r3, #3
 8008624:	e1ef      	b.n	8008a06 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8008626:	4b22      	ldr	r3, [pc, #136]	; (80086b0 <HAL_RCC_OscConfig+0x4f8>)
 8008628:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800862a:	f003 0302 	and.w	r3, r3, #2
 800862e:	2b00      	cmp	r3, #0
 8008630:	d0f0      	beq.n	8008614 <HAL_RCC_OscConfig+0x45c>
 8008632:	e018      	b.n	8008666 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008634:	4b1e      	ldr	r3, [pc, #120]	; (80086b0 <HAL_RCC_OscConfig+0x4f8>)
 8008636:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008638:	4a1d      	ldr	r2, [pc, #116]	; (80086b0 <HAL_RCC_OscConfig+0x4f8>)
 800863a:	f023 0301 	bic.w	r3, r3, #1
 800863e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008640:	f7fe fca2 	bl	8006f88 <HAL_GetTick>
 8008644:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8008646:	e008      	b.n	800865a <HAL_RCC_OscConfig+0x4a2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008648:	f7fe fc9e 	bl	8006f88 <HAL_GetTick>
 800864c:	4602      	mov	r2, r0
 800864e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008650:	1ad3      	subs	r3, r2, r3
 8008652:	2b02      	cmp	r3, #2
 8008654:	d901      	bls.n	800865a <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8008656:	2303      	movs	r3, #3
 8008658:	e1d5      	b.n	8008a06 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800865a:	4b15      	ldr	r3, [pc, #84]	; (80086b0 <HAL_RCC_OscConfig+0x4f8>)
 800865c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800865e:	f003 0302 	and.w	r3, r3, #2
 8008662:	2b00      	cmp	r3, #0
 8008664:	d1f0      	bne.n	8008648 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	681b      	ldr	r3, [r3, #0]
 800866a:	f003 0320 	and.w	r3, r3, #32
 800866e:	2b00      	cmp	r3, #0
 8008670:	d039      	beq.n	80086e6 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	699b      	ldr	r3, [r3, #24]
 8008676:	2b00      	cmp	r3, #0
 8008678:	d01c      	beq.n	80086b4 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800867a:	4b0d      	ldr	r3, [pc, #52]	; (80086b0 <HAL_RCC_OscConfig+0x4f8>)
 800867c:	681b      	ldr	r3, [r3, #0]
 800867e:	4a0c      	ldr	r2, [pc, #48]	; (80086b0 <HAL_RCC_OscConfig+0x4f8>)
 8008680:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8008684:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8008686:	f7fe fc7f 	bl	8006f88 <HAL_GetTick>
 800868a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800868c:	e008      	b.n	80086a0 <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800868e:	f7fe fc7b 	bl	8006f88 <HAL_GetTick>
 8008692:	4602      	mov	r2, r0
 8008694:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008696:	1ad3      	subs	r3, r2, r3
 8008698:	2b02      	cmp	r3, #2
 800869a:	d901      	bls.n	80086a0 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 800869c:	2303      	movs	r3, #3
 800869e:	e1b2      	b.n	8008a06 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80086a0:	4b03      	ldr	r3, [pc, #12]	; (80086b0 <HAL_RCC_OscConfig+0x4f8>)
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80086a8:	2b00      	cmp	r3, #0
 80086aa:	d0f0      	beq.n	800868e <HAL_RCC_OscConfig+0x4d6>
 80086ac:	e01b      	b.n	80086e6 <HAL_RCC_OscConfig+0x52e>
 80086ae:	bf00      	nop
 80086b0:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80086b4:	4b9b      	ldr	r3, [pc, #620]	; (8008924 <HAL_RCC_OscConfig+0x76c>)
 80086b6:	681b      	ldr	r3, [r3, #0]
 80086b8:	4a9a      	ldr	r2, [pc, #616]	; (8008924 <HAL_RCC_OscConfig+0x76c>)
 80086ba:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80086be:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80086c0:	f7fe fc62 	bl	8006f88 <HAL_GetTick>
 80086c4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80086c6:	e008      	b.n	80086da <HAL_RCC_OscConfig+0x522>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80086c8:	f7fe fc5e 	bl	8006f88 <HAL_GetTick>
 80086cc:	4602      	mov	r2, r0
 80086ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086d0:	1ad3      	subs	r3, r2, r3
 80086d2:	2b02      	cmp	r3, #2
 80086d4:	d901      	bls.n	80086da <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 80086d6:	2303      	movs	r3, #3
 80086d8:	e195      	b.n	8008a06 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80086da:	4b92      	ldr	r3, [pc, #584]	; (8008924 <HAL_RCC_OscConfig+0x76c>)
 80086dc:	681b      	ldr	r3, [r3, #0]
 80086de:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80086e2:	2b00      	cmp	r3, #0
 80086e4:	d1f0      	bne.n	80086c8 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	681b      	ldr	r3, [r3, #0]
 80086ea:	f003 0304 	and.w	r3, r3, #4
 80086ee:	2b00      	cmp	r3, #0
 80086f0:	f000 8081 	beq.w	80087f6 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80086f4:	4b8c      	ldr	r3, [pc, #560]	; (8008928 <HAL_RCC_OscConfig+0x770>)
 80086f6:	681b      	ldr	r3, [r3, #0]
 80086f8:	4a8b      	ldr	r2, [pc, #556]	; (8008928 <HAL_RCC_OscConfig+0x770>)
 80086fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80086fe:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8008700:	f7fe fc42 	bl	8006f88 <HAL_GetTick>
 8008704:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008706:	e008      	b.n	800871a <HAL_RCC_OscConfig+0x562>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8008708:	f7fe fc3e 	bl	8006f88 <HAL_GetTick>
 800870c:	4602      	mov	r2, r0
 800870e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008710:	1ad3      	subs	r3, r2, r3
 8008712:	2b64      	cmp	r3, #100	; 0x64
 8008714:	d901      	bls.n	800871a <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8008716:	2303      	movs	r3, #3
 8008718:	e175      	b.n	8008a06 <HAL_RCC_OscConfig+0x84e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800871a:	4b83      	ldr	r3, [pc, #524]	; (8008928 <HAL_RCC_OscConfig+0x770>)
 800871c:	681b      	ldr	r3, [r3, #0]
 800871e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008722:	2b00      	cmp	r3, #0
 8008724:	d0f0      	beq.n	8008708 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	689b      	ldr	r3, [r3, #8]
 800872a:	2b01      	cmp	r3, #1
 800872c:	d106      	bne.n	800873c <HAL_RCC_OscConfig+0x584>
 800872e:	4b7d      	ldr	r3, [pc, #500]	; (8008924 <HAL_RCC_OscConfig+0x76c>)
 8008730:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008732:	4a7c      	ldr	r2, [pc, #496]	; (8008924 <HAL_RCC_OscConfig+0x76c>)
 8008734:	f043 0301 	orr.w	r3, r3, #1
 8008738:	6713      	str	r3, [r2, #112]	; 0x70
 800873a:	e02d      	b.n	8008798 <HAL_RCC_OscConfig+0x5e0>
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	689b      	ldr	r3, [r3, #8]
 8008740:	2b00      	cmp	r3, #0
 8008742:	d10c      	bne.n	800875e <HAL_RCC_OscConfig+0x5a6>
 8008744:	4b77      	ldr	r3, [pc, #476]	; (8008924 <HAL_RCC_OscConfig+0x76c>)
 8008746:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008748:	4a76      	ldr	r2, [pc, #472]	; (8008924 <HAL_RCC_OscConfig+0x76c>)
 800874a:	f023 0301 	bic.w	r3, r3, #1
 800874e:	6713      	str	r3, [r2, #112]	; 0x70
 8008750:	4b74      	ldr	r3, [pc, #464]	; (8008924 <HAL_RCC_OscConfig+0x76c>)
 8008752:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008754:	4a73      	ldr	r2, [pc, #460]	; (8008924 <HAL_RCC_OscConfig+0x76c>)
 8008756:	f023 0304 	bic.w	r3, r3, #4
 800875a:	6713      	str	r3, [r2, #112]	; 0x70
 800875c:	e01c      	b.n	8008798 <HAL_RCC_OscConfig+0x5e0>
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	689b      	ldr	r3, [r3, #8]
 8008762:	2b05      	cmp	r3, #5
 8008764:	d10c      	bne.n	8008780 <HAL_RCC_OscConfig+0x5c8>
 8008766:	4b6f      	ldr	r3, [pc, #444]	; (8008924 <HAL_RCC_OscConfig+0x76c>)
 8008768:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800876a:	4a6e      	ldr	r2, [pc, #440]	; (8008924 <HAL_RCC_OscConfig+0x76c>)
 800876c:	f043 0304 	orr.w	r3, r3, #4
 8008770:	6713      	str	r3, [r2, #112]	; 0x70
 8008772:	4b6c      	ldr	r3, [pc, #432]	; (8008924 <HAL_RCC_OscConfig+0x76c>)
 8008774:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008776:	4a6b      	ldr	r2, [pc, #428]	; (8008924 <HAL_RCC_OscConfig+0x76c>)
 8008778:	f043 0301 	orr.w	r3, r3, #1
 800877c:	6713      	str	r3, [r2, #112]	; 0x70
 800877e:	e00b      	b.n	8008798 <HAL_RCC_OscConfig+0x5e0>
 8008780:	4b68      	ldr	r3, [pc, #416]	; (8008924 <HAL_RCC_OscConfig+0x76c>)
 8008782:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008784:	4a67      	ldr	r2, [pc, #412]	; (8008924 <HAL_RCC_OscConfig+0x76c>)
 8008786:	f023 0301 	bic.w	r3, r3, #1
 800878a:	6713      	str	r3, [r2, #112]	; 0x70
 800878c:	4b65      	ldr	r3, [pc, #404]	; (8008924 <HAL_RCC_OscConfig+0x76c>)
 800878e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008790:	4a64      	ldr	r2, [pc, #400]	; (8008924 <HAL_RCC_OscConfig+0x76c>)
 8008792:	f023 0304 	bic.w	r3, r3, #4
 8008796:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	689b      	ldr	r3, [r3, #8]
 800879c:	2b00      	cmp	r3, #0
 800879e:	d015      	beq.n	80087cc <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80087a0:	f7fe fbf2 	bl	8006f88 <HAL_GetTick>
 80087a4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80087a6:	e00a      	b.n	80087be <HAL_RCC_OscConfig+0x606>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80087a8:	f7fe fbee 	bl	8006f88 <HAL_GetTick>
 80087ac:	4602      	mov	r2, r0
 80087ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087b0:	1ad3      	subs	r3, r2, r3
 80087b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80087b6:	4293      	cmp	r3, r2
 80087b8:	d901      	bls.n	80087be <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 80087ba:	2303      	movs	r3, #3
 80087bc:	e123      	b.n	8008a06 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80087be:	4b59      	ldr	r3, [pc, #356]	; (8008924 <HAL_RCC_OscConfig+0x76c>)
 80087c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80087c2:	f003 0302 	and.w	r3, r3, #2
 80087c6:	2b00      	cmp	r3, #0
 80087c8:	d0ee      	beq.n	80087a8 <HAL_RCC_OscConfig+0x5f0>
 80087ca:	e014      	b.n	80087f6 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80087cc:	f7fe fbdc 	bl	8006f88 <HAL_GetTick>
 80087d0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80087d2:	e00a      	b.n	80087ea <HAL_RCC_OscConfig+0x632>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80087d4:	f7fe fbd8 	bl	8006f88 <HAL_GetTick>
 80087d8:	4602      	mov	r2, r0
 80087da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087dc:	1ad3      	subs	r3, r2, r3
 80087de:	f241 3288 	movw	r2, #5000	; 0x1388
 80087e2:	4293      	cmp	r3, r2
 80087e4:	d901      	bls.n	80087ea <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 80087e6:	2303      	movs	r3, #3
 80087e8:	e10d      	b.n	8008a06 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80087ea:	4b4e      	ldr	r3, [pc, #312]	; (8008924 <HAL_RCC_OscConfig+0x76c>)
 80087ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80087ee:	f003 0302 	and.w	r3, r3, #2
 80087f2:	2b00      	cmp	r3, #0
 80087f4:	d1ee      	bne.n	80087d4 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087fa:	2b00      	cmp	r3, #0
 80087fc:	f000 8102 	beq.w	8008a04 <HAL_RCC_OscConfig+0x84c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8008800:	4b48      	ldr	r3, [pc, #288]	; (8008924 <HAL_RCC_OscConfig+0x76c>)
 8008802:	691b      	ldr	r3, [r3, #16]
 8008804:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008808:	2b18      	cmp	r3, #24
 800880a:	f000 80bd 	beq.w	8008988 <HAL_RCC_OscConfig+0x7d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008812:	2b02      	cmp	r3, #2
 8008814:	f040 809e 	bne.w	8008954 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008818:	4b42      	ldr	r3, [pc, #264]	; (8008924 <HAL_RCC_OscConfig+0x76c>)
 800881a:	681b      	ldr	r3, [r3, #0]
 800881c:	4a41      	ldr	r2, [pc, #260]	; (8008924 <HAL_RCC_OscConfig+0x76c>)
 800881e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008822:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008824:	f7fe fbb0 	bl	8006f88 <HAL_GetTick>
 8008828:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800882a:	e008      	b.n	800883e <HAL_RCC_OscConfig+0x686>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800882c:	f7fe fbac 	bl	8006f88 <HAL_GetTick>
 8008830:	4602      	mov	r2, r0
 8008832:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008834:	1ad3      	subs	r3, r2, r3
 8008836:	2b02      	cmp	r3, #2
 8008838:	d901      	bls.n	800883e <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 800883a:	2303      	movs	r3, #3
 800883c:	e0e3      	b.n	8008a06 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800883e:	4b39      	ldr	r3, [pc, #228]	; (8008924 <HAL_RCC_OscConfig+0x76c>)
 8008840:	681b      	ldr	r3, [r3, #0]
 8008842:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008846:	2b00      	cmp	r3, #0
 8008848:	d1f0      	bne.n	800882c <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800884a:	4b36      	ldr	r3, [pc, #216]	; (8008924 <HAL_RCC_OscConfig+0x76c>)
 800884c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800884e:	4b37      	ldr	r3, [pc, #220]	; (800892c <HAL_RCC_OscConfig+0x774>)
 8008850:	4013      	ands	r3, r2
 8008852:	687a      	ldr	r2, [r7, #4]
 8008854:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8008856:	687a      	ldr	r2, [r7, #4]
 8008858:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800885a:	0112      	lsls	r2, r2, #4
 800885c:	430a      	orrs	r2, r1
 800885e:	4931      	ldr	r1, [pc, #196]	; (8008924 <HAL_RCC_OscConfig+0x76c>)
 8008860:	4313      	orrs	r3, r2
 8008862:	628b      	str	r3, [r1, #40]	; 0x28
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008868:	3b01      	subs	r3, #1
 800886a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008872:	3b01      	subs	r3, #1
 8008874:	025b      	lsls	r3, r3, #9
 8008876:	b29b      	uxth	r3, r3
 8008878:	431a      	orrs	r2, r3
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800887e:	3b01      	subs	r3, #1
 8008880:	041b      	lsls	r3, r3, #16
 8008882:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8008886:	431a      	orrs	r2, r3
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800888c:	3b01      	subs	r3, #1
 800888e:	061b      	lsls	r3, r3, #24
 8008890:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8008894:	4923      	ldr	r1, [pc, #140]	; (8008924 <HAL_RCC_OscConfig+0x76c>)
 8008896:	4313      	orrs	r3, r2
 8008898:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 800889a:	4b22      	ldr	r3, [pc, #136]	; (8008924 <HAL_RCC_OscConfig+0x76c>)
 800889c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800889e:	4a21      	ldr	r2, [pc, #132]	; (8008924 <HAL_RCC_OscConfig+0x76c>)
 80088a0:	f023 0301 	bic.w	r3, r3, #1
 80088a4:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80088a6:	4b1f      	ldr	r3, [pc, #124]	; (8008924 <HAL_RCC_OscConfig+0x76c>)
 80088a8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80088aa:	4b21      	ldr	r3, [pc, #132]	; (8008930 <HAL_RCC_OscConfig+0x778>)
 80088ac:	4013      	ands	r3, r2
 80088ae:	687a      	ldr	r2, [r7, #4]
 80088b0:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80088b2:	00d2      	lsls	r2, r2, #3
 80088b4:	491b      	ldr	r1, [pc, #108]	; (8008924 <HAL_RCC_OscConfig+0x76c>)
 80088b6:	4313      	orrs	r3, r2
 80088b8:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80088ba:	4b1a      	ldr	r3, [pc, #104]	; (8008924 <HAL_RCC_OscConfig+0x76c>)
 80088bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088be:	f023 020c 	bic.w	r2, r3, #12
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80088c6:	4917      	ldr	r1, [pc, #92]	; (8008924 <HAL_RCC_OscConfig+0x76c>)
 80088c8:	4313      	orrs	r3, r2
 80088ca:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80088cc:	4b15      	ldr	r3, [pc, #84]	; (8008924 <HAL_RCC_OscConfig+0x76c>)
 80088ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088d0:	f023 0202 	bic.w	r2, r3, #2
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80088d8:	4912      	ldr	r1, [pc, #72]	; (8008924 <HAL_RCC_OscConfig+0x76c>)
 80088da:	4313      	orrs	r3, r2
 80088dc:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80088de:	4b11      	ldr	r3, [pc, #68]	; (8008924 <HAL_RCC_OscConfig+0x76c>)
 80088e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088e2:	4a10      	ldr	r2, [pc, #64]	; (8008924 <HAL_RCC_OscConfig+0x76c>)
 80088e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80088e8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80088ea:	4b0e      	ldr	r3, [pc, #56]	; (8008924 <HAL_RCC_OscConfig+0x76c>)
 80088ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088ee:	4a0d      	ldr	r2, [pc, #52]	; (8008924 <HAL_RCC_OscConfig+0x76c>)
 80088f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80088f4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80088f6:	4b0b      	ldr	r3, [pc, #44]	; (8008924 <HAL_RCC_OscConfig+0x76c>)
 80088f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088fa:	4a0a      	ldr	r2, [pc, #40]	; (8008924 <HAL_RCC_OscConfig+0x76c>)
 80088fc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008900:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8008902:	4b08      	ldr	r3, [pc, #32]	; (8008924 <HAL_RCC_OscConfig+0x76c>)
 8008904:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008906:	4a07      	ldr	r2, [pc, #28]	; (8008924 <HAL_RCC_OscConfig+0x76c>)
 8008908:	f043 0301 	orr.w	r3, r3, #1
 800890c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800890e:	4b05      	ldr	r3, [pc, #20]	; (8008924 <HAL_RCC_OscConfig+0x76c>)
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	4a04      	ldr	r2, [pc, #16]	; (8008924 <HAL_RCC_OscConfig+0x76c>)
 8008914:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008918:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800891a:	f7fe fb35 	bl	8006f88 <HAL_GetTick>
 800891e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008920:	e011      	b.n	8008946 <HAL_RCC_OscConfig+0x78e>
 8008922:	bf00      	nop
 8008924:	58024400 	.word	0x58024400
 8008928:	58024800 	.word	0x58024800
 800892c:	fffffc0c 	.word	0xfffffc0c
 8008930:	ffff0007 	.word	0xffff0007
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008934:	f7fe fb28 	bl	8006f88 <HAL_GetTick>
 8008938:	4602      	mov	r2, r0
 800893a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800893c:	1ad3      	subs	r3, r2, r3
 800893e:	2b02      	cmp	r3, #2
 8008940:	d901      	bls.n	8008946 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8008942:	2303      	movs	r3, #3
 8008944:	e05f      	b.n	8008a06 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008946:	4b32      	ldr	r3, [pc, #200]	; (8008a10 <HAL_RCC_OscConfig+0x858>)
 8008948:	681b      	ldr	r3, [r3, #0]
 800894a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800894e:	2b00      	cmp	r3, #0
 8008950:	d0f0      	beq.n	8008934 <HAL_RCC_OscConfig+0x77c>
 8008952:	e057      	b.n	8008a04 <HAL_RCC_OscConfig+0x84c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008954:	4b2e      	ldr	r3, [pc, #184]	; (8008a10 <HAL_RCC_OscConfig+0x858>)
 8008956:	681b      	ldr	r3, [r3, #0]
 8008958:	4a2d      	ldr	r2, [pc, #180]	; (8008a10 <HAL_RCC_OscConfig+0x858>)
 800895a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800895e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008960:	f7fe fb12 	bl	8006f88 <HAL_GetTick>
 8008964:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008966:	e008      	b.n	800897a <HAL_RCC_OscConfig+0x7c2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008968:	f7fe fb0e 	bl	8006f88 <HAL_GetTick>
 800896c:	4602      	mov	r2, r0
 800896e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008970:	1ad3      	subs	r3, r2, r3
 8008972:	2b02      	cmp	r3, #2
 8008974:	d901      	bls.n	800897a <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8008976:	2303      	movs	r3, #3
 8008978:	e045      	b.n	8008a06 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800897a:	4b25      	ldr	r3, [pc, #148]	; (8008a10 <HAL_RCC_OscConfig+0x858>)
 800897c:	681b      	ldr	r3, [r3, #0]
 800897e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008982:	2b00      	cmp	r3, #0
 8008984:	d1f0      	bne.n	8008968 <HAL_RCC_OscConfig+0x7b0>
 8008986:	e03d      	b.n	8008a04 <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8008988:	4b21      	ldr	r3, [pc, #132]	; (8008a10 <HAL_RCC_OscConfig+0x858>)
 800898a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800898c:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800898e:	4b20      	ldr	r3, [pc, #128]	; (8008a10 <HAL_RCC_OscConfig+0x858>)
 8008990:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008992:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008998:	2b01      	cmp	r3, #1
 800899a:	d031      	beq.n	8008a00 <HAL_RCC_OscConfig+0x848>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800899c:	693b      	ldr	r3, [r7, #16]
 800899e:	f003 0203 	and.w	r2, r3, #3
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80089a6:	429a      	cmp	r2, r3
 80089a8:	d12a      	bne.n	8008a00 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80089aa:	693b      	ldr	r3, [r7, #16]
 80089ac:	091b      	lsrs	r3, r3, #4
 80089ae:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80089b6:	429a      	cmp	r2, r3
 80089b8:	d122      	bne.n	8008a00 <HAL_RCC_OscConfig+0x848>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80089ba:	68fb      	ldr	r3, [r7, #12]
 80089bc:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80089c4:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80089c6:	429a      	cmp	r2, r3
 80089c8:	d11a      	bne.n	8008a00 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80089ca:	68fb      	ldr	r3, [r7, #12]
 80089cc:	0a5b      	lsrs	r3, r3, #9
 80089ce:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80089d6:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80089d8:	429a      	cmp	r2, r3
 80089da:	d111      	bne.n	8008a00 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80089dc:	68fb      	ldr	r3, [r7, #12]
 80089de:	0c1b      	lsrs	r3, r3, #16
 80089e0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80089e8:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80089ea:	429a      	cmp	r2, r3
 80089ec:	d108      	bne.n	8008a00 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80089ee:	68fb      	ldr	r3, [r7, #12]
 80089f0:	0e1b      	lsrs	r3, r3, #24
 80089f2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80089fa:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80089fc:	429a      	cmp	r2, r3
 80089fe:	d001      	beq.n	8008a04 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8008a00:	2301      	movs	r3, #1
 8008a02:	e000      	b.n	8008a06 <HAL_RCC_OscConfig+0x84e>
      }
    }
  }
  return HAL_OK;
 8008a04:	2300      	movs	r3, #0
}
 8008a06:	4618      	mov	r0, r3
 8008a08:	3730      	adds	r7, #48	; 0x30
 8008a0a:	46bd      	mov	sp, r7
 8008a0c:	bd80      	pop	{r7, pc}
 8008a0e:	bf00      	nop
 8008a10:	58024400 	.word	0x58024400

08008a14 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008a14:	b580      	push	{r7, lr}
 8008a16:	b086      	sub	sp, #24
 8008a18:	af00      	add	r7, sp, #0
 8008a1a:	6078      	str	r0, [r7, #4]
 8008a1c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	2b00      	cmp	r3, #0
 8008a22:	d101      	bne.n	8008a28 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008a24:	2301      	movs	r3, #1
 8008a26:	e19c      	b.n	8008d62 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8008a28:	4b8a      	ldr	r3, [pc, #552]	; (8008c54 <HAL_RCC_ClockConfig+0x240>)
 8008a2a:	681b      	ldr	r3, [r3, #0]
 8008a2c:	f003 030f 	and.w	r3, r3, #15
 8008a30:	683a      	ldr	r2, [r7, #0]
 8008a32:	429a      	cmp	r2, r3
 8008a34:	d910      	bls.n	8008a58 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008a36:	4b87      	ldr	r3, [pc, #540]	; (8008c54 <HAL_RCC_ClockConfig+0x240>)
 8008a38:	681b      	ldr	r3, [r3, #0]
 8008a3a:	f023 020f 	bic.w	r2, r3, #15
 8008a3e:	4985      	ldr	r1, [pc, #532]	; (8008c54 <HAL_RCC_ClockConfig+0x240>)
 8008a40:	683b      	ldr	r3, [r7, #0]
 8008a42:	4313      	orrs	r3, r2
 8008a44:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008a46:	4b83      	ldr	r3, [pc, #524]	; (8008c54 <HAL_RCC_ClockConfig+0x240>)
 8008a48:	681b      	ldr	r3, [r3, #0]
 8008a4a:	f003 030f 	and.w	r3, r3, #15
 8008a4e:	683a      	ldr	r2, [r7, #0]
 8008a50:	429a      	cmp	r2, r3
 8008a52:	d001      	beq.n	8008a58 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8008a54:	2301      	movs	r3, #1
 8008a56:	e184      	b.n	8008d62 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	681b      	ldr	r3, [r3, #0]
 8008a5c:	f003 0304 	and.w	r3, r3, #4
 8008a60:	2b00      	cmp	r3, #0
 8008a62:	d010      	beq.n	8008a86 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	691a      	ldr	r2, [r3, #16]
 8008a68:	4b7b      	ldr	r3, [pc, #492]	; (8008c58 <HAL_RCC_ClockConfig+0x244>)
 8008a6a:	699b      	ldr	r3, [r3, #24]
 8008a6c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008a70:	429a      	cmp	r2, r3
 8008a72:	d908      	bls.n	8008a86 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8008a74:	4b78      	ldr	r3, [pc, #480]	; (8008c58 <HAL_RCC_ClockConfig+0x244>)
 8008a76:	699b      	ldr	r3, [r3, #24]
 8008a78:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	691b      	ldr	r3, [r3, #16]
 8008a80:	4975      	ldr	r1, [pc, #468]	; (8008c58 <HAL_RCC_ClockConfig+0x244>)
 8008a82:	4313      	orrs	r3, r2
 8008a84:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	f003 0308 	and.w	r3, r3, #8
 8008a8e:	2b00      	cmp	r3, #0
 8008a90:	d010      	beq.n	8008ab4 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	695a      	ldr	r2, [r3, #20]
 8008a96:	4b70      	ldr	r3, [pc, #448]	; (8008c58 <HAL_RCC_ClockConfig+0x244>)
 8008a98:	69db      	ldr	r3, [r3, #28]
 8008a9a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008a9e:	429a      	cmp	r2, r3
 8008aa0:	d908      	bls.n	8008ab4 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8008aa2:	4b6d      	ldr	r3, [pc, #436]	; (8008c58 <HAL_RCC_ClockConfig+0x244>)
 8008aa4:	69db      	ldr	r3, [r3, #28]
 8008aa6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	695b      	ldr	r3, [r3, #20]
 8008aae:	496a      	ldr	r1, [pc, #424]	; (8008c58 <HAL_RCC_ClockConfig+0x244>)
 8008ab0:	4313      	orrs	r3, r2
 8008ab2:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	f003 0310 	and.w	r3, r3, #16
 8008abc:	2b00      	cmp	r3, #0
 8008abe:	d010      	beq.n	8008ae2 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	699a      	ldr	r2, [r3, #24]
 8008ac4:	4b64      	ldr	r3, [pc, #400]	; (8008c58 <HAL_RCC_ClockConfig+0x244>)
 8008ac6:	69db      	ldr	r3, [r3, #28]
 8008ac8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008acc:	429a      	cmp	r2, r3
 8008ace:	d908      	bls.n	8008ae2 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8008ad0:	4b61      	ldr	r3, [pc, #388]	; (8008c58 <HAL_RCC_ClockConfig+0x244>)
 8008ad2:	69db      	ldr	r3, [r3, #28]
 8008ad4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	699b      	ldr	r3, [r3, #24]
 8008adc:	495e      	ldr	r1, [pc, #376]	; (8008c58 <HAL_RCC_ClockConfig+0x244>)
 8008ade:	4313      	orrs	r3, r2
 8008ae0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	681b      	ldr	r3, [r3, #0]
 8008ae6:	f003 0320 	and.w	r3, r3, #32
 8008aea:	2b00      	cmp	r3, #0
 8008aec:	d010      	beq.n	8008b10 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	69da      	ldr	r2, [r3, #28]
 8008af2:	4b59      	ldr	r3, [pc, #356]	; (8008c58 <HAL_RCC_ClockConfig+0x244>)
 8008af4:	6a1b      	ldr	r3, [r3, #32]
 8008af6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008afa:	429a      	cmp	r2, r3
 8008afc:	d908      	bls.n	8008b10 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8008afe:	4b56      	ldr	r3, [pc, #344]	; (8008c58 <HAL_RCC_ClockConfig+0x244>)
 8008b00:	6a1b      	ldr	r3, [r3, #32]
 8008b02:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	69db      	ldr	r3, [r3, #28]
 8008b0a:	4953      	ldr	r1, [pc, #332]	; (8008c58 <HAL_RCC_ClockConfig+0x244>)
 8008b0c:	4313      	orrs	r3, r2
 8008b0e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	681b      	ldr	r3, [r3, #0]
 8008b14:	f003 0302 	and.w	r3, r3, #2
 8008b18:	2b00      	cmp	r3, #0
 8008b1a:	d010      	beq.n	8008b3e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	68da      	ldr	r2, [r3, #12]
 8008b20:	4b4d      	ldr	r3, [pc, #308]	; (8008c58 <HAL_RCC_ClockConfig+0x244>)
 8008b22:	699b      	ldr	r3, [r3, #24]
 8008b24:	f003 030f 	and.w	r3, r3, #15
 8008b28:	429a      	cmp	r2, r3
 8008b2a:	d908      	bls.n	8008b3e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008b2c:	4b4a      	ldr	r3, [pc, #296]	; (8008c58 <HAL_RCC_ClockConfig+0x244>)
 8008b2e:	699b      	ldr	r3, [r3, #24]
 8008b30:	f023 020f 	bic.w	r2, r3, #15
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	68db      	ldr	r3, [r3, #12]
 8008b38:	4947      	ldr	r1, [pc, #284]	; (8008c58 <HAL_RCC_ClockConfig+0x244>)
 8008b3a:	4313      	orrs	r3, r2
 8008b3c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	681b      	ldr	r3, [r3, #0]
 8008b42:	f003 0301 	and.w	r3, r3, #1
 8008b46:	2b00      	cmp	r3, #0
 8008b48:	d055      	beq.n	8008bf6 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8008b4a:	4b43      	ldr	r3, [pc, #268]	; (8008c58 <HAL_RCC_ClockConfig+0x244>)
 8008b4c:	699b      	ldr	r3, [r3, #24]
 8008b4e:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	689b      	ldr	r3, [r3, #8]
 8008b56:	4940      	ldr	r1, [pc, #256]	; (8008c58 <HAL_RCC_ClockConfig+0x244>)
 8008b58:	4313      	orrs	r3, r2
 8008b5a:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	685b      	ldr	r3, [r3, #4]
 8008b60:	2b02      	cmp	r3, #2
 8008b62:	d107      	bne.n	8008b74 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008b64:	4b3c      	ldr	r3, [pc, #240]	; (8008c58 <HAL_RCC_ClockConfig+0x244>)
 8008b66:	681b      	ldr	r3, [r3, #0]
 8008b68:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008b6c:	2b00      	cmp	r3, #0
 8008b6e:	d121      	bne.n	8008bb4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8008b70:	2301      	movs	r3, #1
 8008b72:	e0f6      	b.n	8008d62 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	685b      	ldr	r3, [r3, #4]
 8008b78:	2b03      	cmp	r3, #3
 8008b7a:	d107      	bne.n	8008b8c <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008b7c:	4b36      	ldr	r3, [pc, #216]	; (8008c58 <HAL_RCC_ClockConfig+0x244>)
 8008b7e:	681b      	ldr	r3, [r3, #0]
 8008b80:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008b84:	2b00      	cmp	r3, #0
 8008b86:	d115      	bne.n	8008bb4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8008b88:	2301      	movs	r3, #1
 8008b8a:	e0ea      	b.n	8008d62 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	685b      	ldr	r3, [r3, #4]
 8008b90:	2b01      	cmp	r3, #1
 8008b92:	d107      	bne.n	8008ba4 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008b94:	4b30      	ldr	r3, [pc, #192]	; (8008c58 <HAL_RCC_ClockConfig+0x244>)
 8008b96:	681b      	ldr	r3, [r3, #0]
 8008b98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008b9c:	2b00      	cmp	r3, #0
 8008b9e:	d109      	bne.n	8008bb4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8008ba0:	2301      	movs	r3, #1
 8008ba2:	e0de      	b.n	8008d62 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008ba4:	4b2c      	ldr	r3, [pc, #176]	; (8008c58 <HAL_RCC_ClockConfig+0x244>)
 8008ba6:	681b      	ldr	r3, [r3, #0]
 8008ba8:	f003 0304 	and.w	r3, r3, #4
 8008bac:	2b00      	cmp	r3, #0
 8008bae:	d101      	bne.n	8008bb4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8008bb0:	2301      	movs	r3, #1
 8008bb2:	e0d6      	b.n	8008d62 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8008bb4:	4b28      	ldr	r3, [pc, #160]	; (8008c58 <HAL_RCC_ClockConfig+0x244>)
 8008bb6:	691b      	ldr	r3, [r3, #16]
 8008bb8:	f023 0207 	bic.w	r2, r3, #7
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	685b      	ldr	r3, [r3, #4]
 8008bc0:	4925      	ldr	r1, [pc, #148]	; (8008c58 <HAL_RCC_ClockConfig+0x244>)
 8008bc2:	4313      	orrs	r3, r2
 8008bc4:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008bc6:	f7fe f9df 	bl	8006f88 <HAL_GetTick>
 8008bca:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008bcc:	e00a      	b.n	8008be4 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008bce:	f7fe f9db 	bl	8006f88 <HAL_GetTick>
 8008bd2:	4602      	mov	r2, r0
 8008bd4:	697b      	ldr	r3, [r7, #20]
 8008bd6:	1ad3      	subs	r3, r2, r3
 8008bd8:	f241 3288 	movw	r2, #5000	; 0x1388
 8008bdc:	4293      	cmp	r3, r2
 8008bde:	d901      	bls.n	8008be4 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8008be0:	2303      	movs	r3, #3
 8008be2:	e0be      	b.n	8008d62 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008be4:	4b1c      	ldr	r3, [pc, #112]	; (8008c58 <HAL_RCC_ClockConfig+0x244>)
 8008be6:	691b      	ldr	r3, [r3, #16]
 8008be8:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	685b      	ldr	r3, [r3, #4]
 8008bf0:	00db      	lsls	r3, r3, #3
 8008bf2:	429a      	cmp	r2, r3
 8008bf4:	d1eb      	bne.n	8008bce <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	681b      	ldr	r3, [r3, #0]
 8008bfa:	f003 0302 	and.w	r3, r3, #2
 8008bfe:	2b00      	cmp	r3, #0
 8008c00:	d010      	beq.n	8008c24 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	68da      	ldr	r2, [r3, #12]
 8008c06:	4b14      	ldr	r3, [pc, #80]	; (8008c58 <HAL_RCC_ClockConfig+0x244>)
 8008c08:	699b      	ldr	r3, [r3, #24]
 8008c0a:	f003 030f 	and.w	r3, r3, #15
 8008c0e:	429a      	cmp	r2, r3
 8008c10:	d208      	bcs.n	8008c24 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008c12:	4b11      	ldr	r3, [pc, #68]	; (8008c58 <HAL_RCC_ClockConfig+0x244>)
 8008c14:	699b      	ldr	r3, [r3, #24]
 8008c16:	f023 020f 	bic.w	r2, r3, #15
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	68db      	ldr	r3, [r3, #12]
 8008c1e:	490e      	ldr	r1, [pc, #56]	; (8008c58 <HAL_RCC_ClockConfig+0x244>)
 8008c20:	4313      	orrs	r3, r2
 8008c22:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8008c24:	4b0b      	ldr	r3, [pc, #44]	; (8008c54 <HAL_RCC_ClockConfig+0x240>)
 8008c26:	681b      	ldr	r3, [r3, #0]
 8008c28:	f003 030f 	and.w	r3, r3, #15
 8008c2c:	683a      	ldr	r2, [r7, #0]
 8008c2e:	429a      	cmp	r2, r3
 8008c30:	d214      	bcs.n	8008c5c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008c32:	4b08      	ldr	r3, [pc, #32]	; (8008c54 <HAL_RCC_ClockConfig+0x240>)
 8008c34:	681b      	ldr	r3, [r3, #0]
 8008c36:	f023 020f 	bic.w	r2, r3, #15
 8008c3a:	4906      	ldr	r1, [pc, #24]	; (8008c54 <HAL_RCC_ClockConfig+0x240>)
 8008c3c:	683b      	ldr	r3, [r7, #0]
 8008c3e:	4313      	orrs	r3, r2
 8008c40:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008c42:	4b04      	ldr	r3, [pc, #16]	; (8008c54 <HAL_RCC_ClockConfig+0x240>)
 8008c44:	681b      	ldr	r3, [r3, #0]
 8008c46:	f003 030f 	and.w	r3, r3, #15
 8008c4a:	683a      	ldr	r2, [r7, #0]
 8008c4c:	429a      	cmp	r2, r3
 8008c4e:	d005      	beq.n	8008c5c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8008c50:	2301      	movs	r3, #1
 8008c52:	e086      	b.n	8008d62 <HAL_RCC_ClockConfig+0x34e>
 8008c54:	52002000 	.word	0x52002000
 8008c58:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	681b      	ldr	r3, [r3, #0]
 8008c60:	f003 0304 	and.w	r3, r3, #4
 8008c64:	2b00      	cmp	r3, #0
 8008c66:	d010      	beq.n	8008c8a <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	691a      	ldr	r2, [r3, #16]
 8008c6c:	4b3f      	ldr	r3, [pc, #252]	; (8008d6c <HAL_RCC_ClockConfig+0x358>)
 8008c6e:	699b      	ldr	r3, [r3, #24]
 8008c70:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008c74:	429a      	cmp	r2, r3
 8008c76:	d208      	bcs.n	8008c8a <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8008c78:	4b3c      	ldr	r3, [pc, #240]	; (8008d6c <HAL_RCC_ClockConfig+0x358>)
 8008c7a:	699b      	ldr	r3, [r3, #24]
 8008c7c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	691b      	ldr	r3, [r3, #16]
 8008c84:	4939      	ldr	r1, [pc, #228]	; (8008d6c <HAL_RCC_ClockConfig+0x358>)
 8008c86:	4313      	orrs	r3, r2
 8008c88:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	681b      	ldr	r3, [r3, #0]
 8008c8e:	f003 0308 	and.w	r3, r3, #8
 8008c92:	2b00      	cmp	r3, #0
 8008c94:	d010      	beq.n	8008cb8 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	695a      	ldr	r2, [r3, #20]
 8008c9a:	4b34      	ldr	r3, [pc, #208]	; (8008d6c <HAL_RCC_ClockConfig+0x358>)
 8008c9c:	69db      	ldr	r3, [r3, #28]
 8008c9e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008ca2:	429a      	cmp	r2, r3
 8008ca4:	d208      	bcs.n	8008cb8 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8008ca6:	4b31      	ldr	r3, [pc, #196]	; (8008d6c <HAL_RCC_ClockConfig+0x358>)
 8008ca8:	69db      	ldr	r3, [r3, #28]
 8008caa:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	695b      	ldr	r3, [r3, #20]
 8008cb2:	492e      	ldr	r1, [pc, #184]	; (8008d6c <HAL_RCC_ClockConfig+0x358>)
 8008cb4:	4313      	orrs	r3, r2
 8008cb6:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	681b      	ldr	r3, [r3, #0]
 8008cbc:	f003 0310 	and.w	r3, r3, #16
 8008cc0:	2b00      	cmp	r3, #0
 8008cc2:	d010      	beq.n	8008ce6 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	699a      	ldr	r2, [r3, #24]
 8008cc8:	4b28      	ldr	r3, [pc, #160]	; (8008d6c <HAL_RCC_ClockConfig+0x358>)
 8008cca:	69db      	ldr	r3, [r3, #28]
 8008ccc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008cd0:	429a      	cmp	r2, r3
 8008cd2:	d208      	bcs.n	8008ce6 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8008cd4:	4b25      	ldr	r3, [pc, #148]	; (8008d6c <HAL_RCC_ClockConfig+0x358>)
 8008cd6:	69db      	ldr	r3, [r3, #28]
 8008cd8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	699b      	ldr	r3, [r3, #24]
 8008ce0:	4922      	ldr	r1, [pc, #136]	; (8008d6c <HAL_RCC_ClockConfig+0x358>)
 8008ce2:	4313      	orrs	r3, r2
 8008ce4:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	681b      	ldr	r3, [r3, #0]
 8008cea:	f003 0320 	and.w	r3, r3, #32
 8008cee:	2b00      	cmp	r3, #0
 8008cf0:	d010      	beq.n	8008d14 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	69da      	ldr	r2, [r3, #28]
 8008cf6:	4b1d      	ldr	r3, [pc, #116]	; (8008d6c <HAL_RCC_ClockConfig+0x358>)
 8008cf8:	6a1b      	ldr	r3, [r3, #32]
 8008cfa:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008cfe:	429a      	cmp	r2, r3
 8008d00:	d208      	bcs.n	8008d14 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8008d02:	4b1a      	ldr	r3, [pc, #104]	; (8008d6c <HAL_RCC_ClockConfig+0x358>)
 8008d04:	6a1b      	ldr	r3, [r3, #32]
 8008d06:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	69db      	ldr	r3, [r3, #28]
 8008d0e:	4917      	ldr	r1, [pc, #92]	; (8008d6c <HAL_RCC_ClockConfig+0x358>)
 8008d10:	4313      	orrs	r3, r2
 8008d12:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8008d14:	f000 f834 	bl	8008d80 <HAL_RCC_GetSysClockFreq>
 8008d18:	4602      	mov	r2, r0
 8008d1a:	4b14      	ldr	r3, [pc, #80]	; (8008d6c <HAL_RCC_ClockConfig+0x358>)
 8008d1c:	699b      	ldr	r3, [r3, #24]
 8008d1e:	0a1b      	lsrs	r3, r3, #8
 8008d20:	f003 030f 	and.w	r3, r3, #15
 8008d24:	4912      	ldr	r1, [pc, #72]	; (8008d70 <HAL_RCC_ClockConfig+0x35c>)
 8008d26:	5ccb      	ldrb	r3, [r1, r3]
 8008d28:	f003 031f 	and.w	r3, r3, #31
 8008d2c:	fa22 f303 	lsr.w	r3, r2, r3
 8008d30:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8008d32:	4b0e      	ldr	r3, [pc, #56]	; (8008d6c <HAL_RCC_ClockConfig+0x358>)
 8008d34:	699b      	ldr	r3, [r3, #24]
 8008d36:	f003 030f 	and.w	r3, r3, #15
 8008d3a:	4a0d      	ldr	r2, [pc, #52]	; (8008d70 <HAL_RCC_ClockConfig+0x35c>)
 8008d3c:	5cd3      	ldrb	r3, [r2, r3]
 8008d3e:	f003 031f 	and.w	r3, r3, #31
 8008d42:	693a      	ldr	r2, [r7, #16]
 8008d44:	fa22 f303 	lsr.w	r3, r2, r3
 8008d48:	4a0a      	ldr	r2, [pc, #40]	; (8008d74 <HAL_RCC_ClockConfig+0x360>)
 8008d4a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8008d4c:	4a0a      	ldr	r2, [pc, #40]	; (8008d78 <HAL_RCC_ClockConfig+0x364>)
 8008d4e:	693b      	ldr	r3, [r7, #16]
 8008d50:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8008d52:	4b0a      	ldr	r3, [pc, #40]	; (8008d7c <HAL_RCC_ClockConfig+0x368>)
 8008d54:	681b      	ldr	r3, [r3, #0]
 8008d56:	4618      	mov	r0, r3
 8008d58:	f7fe f8cc 	bl	8006ef4 <HAL_InitTick>
 8008d5c:	4603      	mov	r3, r0
 8008d5e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8008d60:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d62:	4618      	mov	r0, r3
 8008d64:	3718      	adds	r7, #24
 8008d66:	46bd      	mov	sp, r7
 8008d68:	bd80      	pop	{r7, pc}
 8008d6a:	bf00      	nop
 8008d6c:	58024400 	.word	0x58024400
 8008d70:	080125b8 	.word	0x080125b8
 8008d74:	24000014 	.word	0x24000014
 8008d78:	24000010 	.word	0x24000010
 8008d7c:	240000a8 	.word	0x240000a8

08008d80 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008d80:	b480      	push	{r7}
 8008d82:	b089      	sub	sp, #36	; 0x24
 8008d84:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008d86:	4bb3      	ldr	r3, [pc, #716]	; (8009054 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008d88:	691b      	ldr	r3, [r3, #16]
 8008d8a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008d8e:	2b18      	cmp	r3, #24
 8008d90:	f200 8155 	bhi.w	800903e <HAL_RCC_GetSysClockFreq+0x2be>
 8008d94:	a201      	add	r2, pc, #4	; (adr r2, 8008d9c <HAL_RCC_GetSysClockFreq+0x1c>)
 8008d96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d9a:	bf00      	nop
 8008d9c:	08008e01 	.word	0x08008e01
 8008da0:	0800903f 	.word	0x0800903f
 8008da4:	0800903f 	.word	0x0800903f
 8008da8:	0800903f 	.word	0x0800903f
 8008dac:	0800903f 	.word	0x0800903f
 8008db0:	0800903f 	.word	0x0800903f
 8008db4:	0800903f 	.word	0x0800903f
 8008db8:	0800903f 	.word	0x0800903f
 8008dbc:	08008e27 	.word	0x08008e27
 8008dc0:	0800903f 	.word	0x0800903f
 8008dc4:	0800903f 	.word	0x0800903f
 8008dc8:	0800903f 	.word	0x0800903f
 8008dcc:	0800903f 	.word	0x0800903f
 8008dd0:	0800903f 	.word	0x0800903f
 8008dd4:	0800903f 	.word	0x0800903f
 8008dd8:	0800903f 	.word	0x0800903f
 8008ddc:	08008e2d 	.word	0x08008e2d
 8008de0:	0800903f 	.word	0x0800903f
 8008de4:	0800903f 	.word	0x0800903f
 8008de8:	0800903f 	.word	0x0800903f
 8008dec:	0800903f 	.word	0x0800903f
 8008df0:	0800903f 	.word	0x0800903f
 8008df4:	0800903f 	.word	0x0800903f
 8008df8:	0800903f 	.word	0x0800903f
 8008dfc:	08008e33 	.word	0x08008e33
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008e00:	4b94      	ldr	r3, [pc, #592]	; (8009054 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008e02:	681b      	ldr	r3, [r3, #0]
 8008e04:	f003 0320 	and.w	r3, r3, #32
 8008e08:	2b00      	cmp	r3, #0
 8008e0a:	d009      	beq.n	8008e20 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008e0c:	4b91      	ldr	r3, [pc, #580]	; (8009054 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008e0e:	681b      	ldr	r3, [r3, #0]
 8008e10:	08db      	lsrs	r3, r3, #3
 8008e12:	f003 0303 	and.w	r3, r3, #3
 8008e16:	4a90      	ldr	r2, [pc, #576]	; (8009058 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8008e18:	fa22 f303 	lsr.w	r3, r2, r3
 8008e1c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8008e1e:	e111      	b.n	8009044 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8008e20:	4b8d      	ldr	r3, [pc, #564]	; (8009058 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8008e22:	61bb      	str	r3, [r7, #24]
    break;
 8008e24:	e10e      	b.n	8009044 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8008e26:	4b8d      	ldr	r3, [pc, #564]	; (800905c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8008e28:	61bb      	str	r3, [r7, #24]
    break;
 8008e2a:	e10b      	b.n	8009044 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8008e2c:	4b8c      	ldr	r3, [pc, #560]	; (8009060 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8008e2e:	61bb      	str	r3, [r7, #24]
    break;
 8008e30:	e108      	b.n	8009044 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008e32:	4b88      	ldr	r3, [pc, #544]	; (8009054 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008e34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e36:	f003 0303 	and.w	r3, r3, #3
 8008e3a:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8008e3c:	4b85      	ldr	r3, [pc, #532]	; (8009054 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008e3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e40:	091b      	lsrs	r3, r3, #4
 8008e42:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008e46:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8008e48:	4b82      	ldr	r3, [pc, #520]	; (8009054 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008e4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e4c:	f003 0301 	and.w	r3, r3, #1
 8008e50:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8008e52:	4b80      	ldr	r3, [pc, #512]	; (8009054 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008e54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008e56:	08db      	lsrs	r3, r3, #3
 8008e58:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008e5c:	68fa      	ldr	r2, [r7, #12]
 8008e5e:	fb02 f303 	mul.w	r3, r2, r3
 8008e62:	ee07 3a90 	vmov	s15, r3
 8008e66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008e6a:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8008e6e:	693b      	ldr	r3, [r7, #16]
 8008e70:	2b00      	cmp	r3, #0
 8008e72:	f000 80e1 	beq.w	8009038 <HAL_RCC_GetSysClockFreq+0x2b8>
 8008e76:	697b      	ldr	r3, [r7, #20]
 8008e78:	2b02      	cmp	r3, #2
 8008e7a:	f000 8083 	beq.w	8008f84 <HAL_RCC_GetSysClockFreq+0x204>
 8008e7e:	697b      	ldr	r3, [r7, #20]
 8008e80:	2b02      	cmp	r3, #2
 8008e82:	f200 80a1 	bhi.w	8008fc8 <HAL_RCC_GetSysClockFreq+0x248>
 8008e86:	697b      	ldr	r3, [r7, #20]
 8008e88:	2b00      	cmp	r3, #0
 8008e8a:	d003      	beq.n	8008e94 <HAL_RCC_GetSysClockFreq+0x114>
 8008e8c:	697b      	ldr	r3, [r7, #20]
 8008e8e:	2b01      	cmp	r3, #1
 8008e90:	d056      	beq.n	8008f40 <HAL_RCC_GetSysClockFreq+0x1c0>
 8008e92:	e099      	b.n	8008fc8 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008e94:	4b6f      	ldr	r3, [pc, #444]	; (8009054 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008e96:	681b      	ldr	r3, [r3, #0]
 8008e98:	f003 0320 	and.w	r3, r3, #32
 8008e9c:	2b00      	cmp	r3, #0
 8008e9e:	d02d      	beq.n	8008efc <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008ea0:	4b6c      	ldr	r3, [pc, #432]	; (8009054 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008ea2:	681b      	ldr	r3, [r3, #0]
 8008ea4:	08db      	lsrs	r3, r3, #3
 8008ea6:	f003 0303 	and.w	r3, r3, #3
 8008eaa:	4a6b      	ldr	r2, [pc, #428]	; (8009058 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8008eac:	fa22 f303 	lsr.w	r3, r2, r3
 8008eb0:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	ee07 3a90 	vmov	s15, r3
 8008eb8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008ebc:	693b      	ldr	r3, [r7, #16]
 8008ebe:	ee07 3a90 	vmov	s15, r3
 8008ec2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008ec6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008eca:	4b62      	ldr	r3, [pc, #392]	; (8009054 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008ecc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ece:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008ed2:	ee07 3a90 	vmov	s15, r3
 8008ed6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008eda:	ed97 6a02 	vldr	s12, [r7, #8]
 8008ede:	eddf 5a61 	vldr	s11, [pc, #388]	; 8009064 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008ee2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008ee6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008eea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008eee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008ef2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008ef6:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8008efa:	e087      	b.n	800900c <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008efc:	693b      	ldr	r3, [r7, #16]
 8008efe:	ee07 3a90 	vmov	s15, r3
 8008f02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008f06:	eddf 6a58 	vldr	s13, [pc, #352]	; 8009068 <HAL_RCC_GetSysClockFreq+0x2e8>
 8008f0a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008f0e:	4b51      	ldr	r3, [pc, #324]	; (8009054 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008f10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f12:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008f16:	ee07 3a90 	vmov	s15, r3
 8008f1a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008f1e:	ed97 6a02 	vldr	s12, [r7, #8]
 8008f22:	eddf 5a50 	vldr	s11, [pc, #320]	; 8009064 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008f26:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008f2a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008f2e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008f32:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008f36:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008f3a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008f3e:	e065      	b.n	800900c <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008f40:	693b      	ldr	r3, [r7, #16]
 8008f42:	ee07 3a90 	vmov	s15, r3
 8008f46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008f4a:	eddf 6a48 	vldr	s13, [pc, #288]	; 800906c <HAL_RCC_GetSysClockFreq+0x2ec>
 8008f4e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008f52:	4b40      	ldr	r3, [pc, #256]	; (8009054 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008f54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f56:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008f5a:	ee07 3a90 	vmov	s15, r3
 8008f5e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008f62:	ed97 6a02 	vldr	s12, [r7, #8]
 8008f66:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8009064 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008f6a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008f6e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008f72:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008f76:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008f7a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008f7e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008f82:	e043      	b.n	800900c <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008f84:	693b      	ldr	r3, [r7, #16]
 8008f86:	ee07 3a90 	vmov	s15, r3
 8008f8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008f8e:	eddf 6a38 	vldr	s13, [pc, #224]	; 8009070 <HAL_RCC_GetSysClockFreq+0x2f0>
 8008f92:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008f96:	4b2f      	ldr	r3, [pc, #188]	; (8009054 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008f98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f9a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008f9e:	ee07 3a90 	vmov	s15, r3
 8008fa2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008fa6:	ed97 6a02 	vldr	s12, [r7, #8]
 8008faa:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8009064 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008fae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008fb2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008fb6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008fba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008fbe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008fc2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008fc6:	e021      	b.n	800900c <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008fc8:	693b      	ldr	r3, [r7, #16]
 8008fca:	ee07 3a90 	vmov	s15, r3
 8008fce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008fd2:	eddf 6a26 	vldr	s13, [pc, #152]	; 800906c <HAL_RCC_GetSysClockFreq+0x2ec>
 8008fd6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008fda:	4b1e      	ldr	r3, [pc, #120]	; (8009054 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008fdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008fde:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008fe2:	ee07 3a90 	vmov	s15, r3
 8008fe6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008fea:	ed97 6a02 	vldr	s12, [r7, #8]
 8008fee:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8009064 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008ff2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008ff6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008ffa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008ffe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009002:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009006:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800900a:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 800900c:	4b11      	ldr	r3, [pc, #68]	; (8009054 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800900e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009010:	0a5b      	lsrs	r3, r3, #9
 8009012:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009016:	3301      	adds	r3, #1
 8009018:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 800901a:	683b      	ldr	r3, [r7, #0]
 800901c:	ee07 3a90 	vmov	s15, r3
 8009020:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8009024:	edd7 6a07 	vldr	s13, [r7, #28]
 8009028:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800902c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009030:	ee17 3a90 	vmov	r3, s15
 8009034:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8009036:	e005      	b.n	8009044 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8009038:	2300      	movs	r3, #0
 800903a:	61bb      	str	r3, [r7, #24]
    break;
 800903c:	e002      	b.n	8009044 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 800903e:	4b07      	ldr	r3, [pc, #28]	; (800905c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8009040:	61bb      	str	r3, [r7, #24]
    break;
 8009042:	bf00      	nop
  }

  return sysclockfreq;
 8009044:	69bb      	ldr	r3, [r7, #24]
}
 8009046:	4618      	mov	r0, r3
 8009048:	3724      	adds	r7, #36	; 0x24
 800904a:	46bd      	mov	sp, r7
 800904c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009050:	4770      	bx	lr
 8009052:	bf00      	nop
 8009054:	58024400 	.word	0x58024400
 8009058:	03d09000 	.word	0x03d09000
 800905c:	003d0900 	.word	0x003d0900
 8009060:	017d7840 	.word	0x017d7840
 8009064:	46000000 	.word	0x46000000
 8009068:	4c742400 	.word	0x4c742400
 800906c:	4a742400 	.word	0x4a742400
 8009070:	4bbebc20 	.word	0x4bbebc20

08009074 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009074:	b580      	push	{r7, lr}
 8009076:	b082      	sub	sp, #8
 8009078:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800907a:	f7ff fe81 	bl	8008d80 <HAL_RCC_GetSysClockFreq>
 800907e:	4602      	mov	r2, r0
 8009080:	4b10      	ldr	r3, [pc, #64]	; (80090c4 <HAL_RCC_GetHCLKFreq+0x50>)
 8009082:	699b      	ldr	r3, [r3, #24]
 8009084:	0a1b      	lsrs	r3, r3, #8
 8009086:	f003 030f 	and.w	r3, r3, #15
 800908a:	490f      	ldr	r1, [pc, #60]	; (80090c8 <HAL_RCC_GetHCLKFreq+0x54>)
 800908c:	5ccb      	ldrb	r3, [r1, r3]
 800908e:	f003 031f 	and.w	r3, r3, #31
 8009092:	fa22 f303 	lsr.w	r3, r2, r3
 8009096:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8009098:	4b0a      	ldr	r3, [pc, #40]	; (80090c4 <HAL_RCC_GetHCLKFreq+0x50>)
 800909a:	699b      	ldr	r3, [r3, #24]
 800909c:	f003 030f 	and.w	r3, r3, #15
 80090a0:	4a09      	ldr	r2, [pc, #36]	; (80090c8 <HAL_RCC_GetHCLKFreq+0x54>)
 80090a2:	5cd3      	ldrb	r3, [r2, r3]
 80090a4:	f003 031f 	and.w	r3, r3, #31
 80090a8:	687a      	ldr	r2, [r7, #4]
 80090aa:	fa22 f303 	lsr.w	r3, r2, r3
 80090ae:	4a07      	ldr	r2, [pc, #28]	; (80090cc <HAL_RCC_GetHCLKFreq+0x58>)
 80090b0:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80090b2:	4a07      	ldr	r2, [pc, #28]	; (80090d0 <HAL_RCC_GetHCLKFreq+0x5c>)
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80090b8:	4b04      	ldr	r3, [pc, #16]	; (80090cc <HAL_RCC_GetHCLKFreq+0x58>)
 80090ba:	681b      	ldr	r3, [r3, #0]
}
 80090bc:	4618      	mov	r0, r3
 80090be:	3708      	adds	r7, #8
 80090c0:	46bd      	mov	sp, r7
 80090c2:	bd80      	pop	{r7, pc}
 80090c4:	58024400 	.word	0x58024400
 80090c8:	080125b8 	.word	0x080125b8
 80090cc:	24000014 	.word	0x24000014
 80090d0:	24000010 	.word	0x24000010

080090d4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80090d4:	b580      	push	{r7, lr}
 80090d6:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80090d8:	f7ff ffcc 	bl	8009074 <HAL_RCC_GetHCLKFreq>
 80090dc:	4602      	mov	r2, r0
 80090de:	4b06      	ldr	r3, [pc, #24]	; (80090f8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80090e0:	69db      	ldr	r3, [r3, #28]
 80090e2:	091b      	lsrs	r3, r3, #4
 80090e4:	f003 0307 	and.w	r3, r3, #7
 80090e8:	4904      	ldr	r1, [pc, #16]	; (80090fc <HAL_RCC_GetPCLK1Freq+0x28>)
 80090ea:	5ccb      	ldrb	r3, [r1, r3]
 80090ec:	f003 031f 	and.w	r3, r3, #31
 80090f0:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80090f4:	4618      	mov	r0, r3
 80090f6:	bd80      	pop	{r7, pc}
 80090f8:	58024400 	.word	0x58024400
 80090fc:	080125b8 	.word	0x080125b8

08009100 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8009100:	b580      	push	{r7, lr}
 8009102:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8009104:	f7ff ffb6 	bl	8009074 <HAL_RCC_GetHCLKFreq>
 8009108:	4602      	mov	r2, r0
 800910a:	4b06      	ldr	r3, [pc, #24]	; (8009124 <HAL_RCC_GetPCLK2Freq+0x24>)
 800910c:	69db      	ldr	r3, [r3, #28]
 800910e:	0a1b      	lsrs	r3, r3, #8
 8009110:	f003 0307 	and.w	r3, r3, #7
 8009114:	4904      	ldr	r1, [pc, #16]	; (8009128 <HAL_RCC_GetPCLK2Freq+0x28>)
 8009116:	5ccb      	ldrb	r3, [r1, r3]
 8009118:	f003 031f 	and.w	r3, r3, #31
 800911c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8009120:	4618      	mov	r0, r3
 8009122:	bd80      	pop	{r7, pc}
 8009124:	58024400 	.word	0x58024400
 8009128:	080125b8 	.word	0x080125b8

0800912c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800912c:	b580      	push	{r7, lr}
 800912e:	b086      	sub	sp, #24
 8009130:	af00      	add	r7, sp, #0
 8009132:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8009134:	2300      	movs	r3, #0
 8009136:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8009138:	2300      	movs	r3, #0
 800913a:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	681b      	ldr	r3, [r3, #0]
 8009140:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009144:	2b00      	cmp	r3, #0
 8009146:	d03f      	beq.n	80091c8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800914c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009150:	d02a      	beq.n	80091a8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8009152:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009156:	d824      	bhi.n	80091a2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8009158:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800915c:	d018      	beq.n	8009190 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800915e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009162:	d81e      	bhi.n	80091a2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8009164:	2b00      	cmp	r3, #0
 8009166:	d003      	beq.n	8009170 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8009168:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800916c:	d007      	beq.n	800917e <HAL_RCCEx_PeriphCLKConfig+0x52>
 800916e:	e018      	b.n	80091a2 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009170:	4ba3      	ldr	r3, [pc, #652]	; (8009400 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8009172:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009174:	4aa2      	ldr	r2, [pc, #648]	; (8009400 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8009176:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800917a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800917c:	e015      	b.n	80091aa <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	3304      	adds	r3, #4
 8009182:	2102      	movs	r1, #2
 8009184:	4618      	mov	r0, r3
 8009186:	f001 f9d5 	bl	800a534 <RCCEx_PLL2_Config>
 800918a:	4603      	mov	r3, r0
 800918c:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800918e:	e00c      	b.n	80091aa <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	3324      	adds	r3, #36	; 0x24
 8009194:	2102      	movs	r1, #2
 8009196:	4618      	mov	r0, r3
 8009198:	f001 fa7e 	bl	800a698 <RCCEx_PLL3_Config>
 800919c:	4603      	mov	r3, r0
 800919e:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80091a0:	e003      	b.n	80091aa <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80091a2:	2301      	movs	r3, #1
 80091a4:	75fb      	strb	r3, [r7, #23]
      break;
 80091a6:	e000      	b.n	80091aa <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80091a8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80091aa:	7dfb      	ldrb	r3, [r7, #23]
 80091ac:	2b00      	cmp	r3, #0
 80091ae:	d109      	bne.n	80091c4 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80091b0:	4b93      	ldr	r3, [pc, #588]	; (8009400 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80091b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80091b4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80091bc:	4990      	ldr	r1, [pc, #576]	; (8009400 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80091be:	4313      	orrs	r3, r2
 80091c0:	650b      	str	r3, [r1, #80]	; 0x50
 80091c2:	e001      	b.n	80091c8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80091c4:	7dfb      	ldrb	r3, [r7, #23]
 80091c6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	681b      	ldr	r3, [r3, #0]
 80091cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80091d0:	2b00      	cmp	r3, #0
 80091d2:	d03d      	beq.n	8009250 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80091d8:	2b04      	cmp	r3, #4
 80091da:	d826      	bhi.n	800922a <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80091dc:	a201      	add	r2, pc, #4	; (adr r2, 80091e4 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 80091de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80091e2:	bf00      	nop
 80091e4:	080091f9 	.word	0x080091f9
 80091e8:	08009207 	.word	0x08009207
 80091ec:	08009219 	.word	0x08009219
 80091f0:	08009231 	.word	0x08009231
 80091f4:	08009231 	.word	0x08009231
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80091f8:	4b81      	ldr	r3, [pc, #516]	; (8009400 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80091fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80091fc:	4a80      	ldr	r2, [pc, #512]	; (8009400 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80091fe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009202:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8009204:	e015      	b.n	8009232 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	3304      	adds	r3, #4
 800920a:	2100      	movs	r1, #0
 800920c:	4618      	mov	r0, r3
 800920e:	f001 f991 	bl	800a534 <RCCEx_PLL2_Config>
 8009212:	4603      	mov	r3, r0
 8009214:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8009216:	e00c      	b.n	8009232 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	3324      	adds	r3, #36	; 0x24
 800921c:	2100      	movs	r1, #0
 800921e:	4618      	mov	r0, r3
 8009220:	f001 fa3a 	bl	800a698 <RCCEx_PLL3_Config>
 8009224:	4603      	mov	r3, r0
 8009226:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8009228:	e003      	b.n	8009232 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800922a:	2301      	movs	r3, #1
 800922c:	75fb      	strb	r3, [r7, #23]
      break;
 800922e:	e000      	b.n	8009232 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8009230:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009232:	7dfb      	ldrb	r3, [r7, #23]
 8009234:	2b00      	cmp	r3, #0
 8009236:	d109      	bne.n	800924c <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8009238:	4b71      	ldr	r3, [pc, #452]	; (8009400 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800923a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800923c:	f023 0207 	bic.w	r2, r3, #7
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009244:	496e      	ldr	r1, [pc, #440]	; (8009400 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8009246:	4313      	orrs	r3, r2
 8009248:	650b      	str	r3, [r1, #80]	; 0x50
 800924a:	e001      	b.n	8009250 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800924c:	7dfb      	ldrb	r3, [r7, #23]
 800924e:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	681b      	ldr	r3, [r3, #0]
 8009254:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009258:	2b00      	cmp	r3, #0
 800925a:	d042      	beq.n	80092e2 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009260:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009264:	d02b      	beq.n	80092be <HAL_RCCEx_PeriphCLKConfig+0x192>
 8009266:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800926a:	d825      	bhi.n	80092b8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 800926c:	2bc0      	cmp	r3, #192	; 0xc0
 800926e:	d028      	beq.n	80092c2 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8009270:	2bc0      	cmp	r3, #192	; 0xc0
 8009272:	d821      	bhi.n	80092b8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8009274:	2b80      	cmp	r3, #128	; 0x80
 8009276:	d016      	beq.n	80092a6 <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8009278:	2b80      	cmp	r3, #128	; 0x80
 800927a:	d81d      	bhi.n	80092b8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 800927c:	2b00      	cmp	r3, #0
 800927e:	d002      	beq.n	8009286 <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8009280:	2b40      	cmp	r3, #64	; 0x40
 8009282:	d007      	beq.n	8009294 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8009284:	e018      	b.n	80092b8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009286:	4b5e      	ldr	r3, [pc, #376]	; (8009400 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8009288:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800928a:	4a5d      	ldr	r2, [pc, #372]	; (8009400 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800928c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009290:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8009292:	e017      	b.n	80092c4 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	3304      	adds	r3, #4
 8009298:	2100      	movs	r1, #0
 800929a:	4618      	mov	r0, r3
 800929c:	f001 f94a 	bl	800a534 <RCCEx_PLL2_Config>
 80092a0:	4603      	mov	r3, r0
 80092a2:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80092a4:	e00e      	b.n	80092c4 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	3324      	adds	r3, #36	; 0x24
 80092aa:	2100      	movs	r1, #0
 80092ac:	4618      	mov	r0, r3
 80092ae:	f001 f9f3 	bl	800a698 <RCCEx_PLL3_Config>
 80092b2:	4603      	mov	r3, r0
 80092b4:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80092b6:	e005      	b.n	80092c4 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80092b8:	2301      	movs	r3, #1
 80092ba:	75fb      	strb	r3, [r7, #23]
      break;
 80092bc:	e002      	b.n	80092c4 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 80092be:	bf00      	nop
 80092c0:	e000      	b.n	80092c4 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 80092c2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80092c4:	7dfb      	ldrb	r3, [r7, #23]
 80092c6:	2b00      	cmp	r3, #0
 80092c8:	d109      	bne.n	80092de <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80092ca:	4b4d      	ldr	r3, [pc, #308]	; (8009400 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80092cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80092ce:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80092d6:	494a      	ldr	r1, [pc, #296]	; (8009400 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80092d8:	4313      	orrs	r3, r2
 80092da:	650b      	str	r3, [r1, #80]	; 0x50
 80092dc:	e001      	b.n	80092e2 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80092de:	7dfb      	ldrb	r3, [r7, #23]
 80092e0:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	681b      	ldr	r3, [r3, #0]
 80092e6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80092ea:	2b00      	cmp	r3, #0
 80092ec:	d049      	beq.n	8009382 <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80092f4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80092f8:	d030      	beq.n	800935c <HAL_RCCEx_PeriphCLKConfig+0x230>
 80092fa:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80092fe:	d82a      	bhi.n	8009356 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8009300:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8009304:	d02c      	beq.n	8009360 <HAL_RCCEx_PeriphCLKConfig+0x234>
 8009306:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800930a:	d824      	bhi.n	8009356 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800930c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009310:	d018      	beq.n	8009344 <HAL_RCCEx_PeriphCLKConfig+0x218>
 8009312:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009316:	d81e      	bhi.n	8009356 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8009318:	2b00      	cmp	r3, #0
 800931a:	d003      	beq.n	8009324 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 800931c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009320:	d007      	beq.n	8009332 <HAL_RCCEx_PeriphCLKConfig+0x206>
 8009322:	e018      	b.n	8009356 <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009324:	4b36      	ldr	r3, [pc, #216]	; (8009400 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8009326:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009328:	4a35      	ldr	r2, [pc, #212]	; (8009400 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800932a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800932e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8009330:	e017      	b.n	8009362 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	3304      	adds	r3, #4
 8009336:	2100      	movs	r1, #0
 8009338:	4618      	mov	r0, r3
 800933a:	f001 f8fb 	bl	800a534 <RCCEx_PLL2_Config>
 800933e:	4603      	mov	r3, r0
 8009340:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8009342:	e00e      	b.n	8009362 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	3324      	adds	r3, #36	; 0x24
 8009348:	2100      	movs	r1, #0
 800934a:	4618      	mov	r0, r3
 800934c:	f001 f9a4 	bl	800a698 <RCCEx_PLL3_Config>
 8009350:	4603      	mov	r3, r0
 8009352:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8009354:	e005      	b.n	8009362 <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8009356:	2301      	movs	r3, #1
 8009358:	75fb      	strb	r3, [r7, #23]
      break;
 800935a:	e002      	b.n	8009362 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 800935c:	bf00      	nop
 800935e:	e000      	b.n	8009362 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8009360:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009362:	7dfb      	ldrb	r3, [r7, #23]
 8009364:	2b00      	cmp	r3, #0
 8009366:	d10a      	bne.n	800937e <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8009368:	4b25      	ldr	r3, [pc, #148]	; (8009400 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800936a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800936c:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8009376:	4922      	ldr	r1, [pc, #136]	; (8009400 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8009378:	4313      	orrs	r3, r2
 800937a:	658b      	str	r3, [r1, #88]	; 0x58
 800937c:	e001      	b.n	8009382 <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800937e:	7dfb      	ldrb	r3, [r7, #23]
 8009380:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	681b      	ldr	r3, [r3, #0]
 8009386:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800938a:	2b00      	cmp	r3, #0
 800938c:	d04b      	beq.n	8009426 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8009394:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009398:	d030      	beq.n	80093fc <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 800939a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800939e:	d82a      	bhi.n	80093f6 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80093a0:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80093a4:	d02e      	beq.n	8009404 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 80093a6:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80093aa:	d824      	bhi.n	80093f6 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80093ac:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80093b0:	d018      	beq.n	80093e4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 80093b2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80093b6:	d81e      	bhi.n	80093f6 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80093b8:	2b00      	cmp	r3, #0
 80093ba:	d003      	beq.n	80093c4 <HAL_RCCEx_PeriphCLKConfig+0x298>
 80093bc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80093c0:	d007      	beq.n	80093d2 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 80093c2:	e018      	b.n	80093f6 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80093c4:	4b0e      	ldr	r3, [pc, #56]	; (8009400 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80093c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80093c8:	4a0d      	ldr	r2, [pc, #52]	; (8009400 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80093ca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80093ce:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80093d0:	e019      	b.n	8009406 <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	3304      	adds	r3, #4
 80093d6:	2100      	movs	r1, #0
 80093d8:	4618      	mov	r0, r3
 80093da:	f001 f8ab 	bl	800a534 <RCCEx_PLL2_Config>
 80093de:	4603      	mov	r3, r0
 80093e0:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80093e2:	e010      	b.n	8009406 <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	3324      	adds	r3, #36	; 0x24
 80093e8:	2100      	movs	r1, #0
 80093ea:	4618      	mov	r0, r3
 80093ec:	f001 f954 	bl	800a698 <RCCEx_PLL3_Config>
 80093f0:	4603      	mov	r3, r0
 80093f2:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80093f4:	e007      	b.n	8009406 <HAL_RCCEx_PeriphCLKConfig+0x2da>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80093f6:	2301      	movs	r3, #1
 80093f8:	75fb      	strb	r3, [r7, #23]
      break;
 80093fa:	e004      	b.n	8009406 <HAL_RCCEx_PeriphCLKConfig+0x2da>
      break;
 80093fc:	bf00      	nop
 80093fe:	e002      	b.n	8009406 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8009400:	58024400 	.word	0x58024400
      break;
 8009404:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009406:	7dfb      	ldrb	r3, [r7, #23]
 8009408:	2b00      	cmp	r3, #0
 800940a:	d10a      	bne.n	8009422 <HAL_RCCEx_PeriphCLKConfig+0x2f6>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800940c:	4b99      	ldr	r3, [pc, #612]	; (8009674 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800940e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009410:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800941a:	4996      	ldr	r1, [pc, #600]	; (8009674 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800941c:	4313      	orrs	r3, r2
 800941e:	658b      	str	r3, [r1, #88]	; 0x58
 8009420:	e001      	b.n	8009426 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009422:	7dfb      	ldrb	r3, [r7, #23]
 8009424:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	681b      	ldr	r3, [r3, #0]
 800942a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800942e:	2b00      	cmp	r3, #0
 8009430:	d032      	beq.n	8009498 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009436:	2b30      	cmp	r3, #48	; 0x30
 8009438:	d01c      	beq.n	8009474 <HAL_RCCEx_PeriphCLKConfig+0x348>
 800943a:	2b30      	cmp	r3, #48	; 0x30
 800943c:	d817      	bhi.n	800946e <HAL_RCCEx_PeriphCLKConfig+0x342>
 800943e:	2b20      	cmp	r3, #32
 8009440:	d00c      	beq.n	800945c <HAL_RCCEx_PeriphCLKConfig+0x330>
 8009442:	2b20      	cmp	r3, #32
 8009444:	d813      	bhi.n	800946e <HAL_RCCEx_PeriphCLKConfig+0x342>
 8009446:	2b00      	cmp	r3, #0
 8009448:	d016      	beq.n	8009478 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 800944a:	2b10      	cmp	r3, #16
 800944c:	d10f      	bne.n	800946e <HAL_RCCEx_PeriphCLKConfig+0x342>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800944e:	4b89      	ldr	r3, [pc, #548]	; (8009674 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8009450:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009452:	4a88      	ldr	r2, [pc, #544]	; (8009674 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8009454:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009458:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 800945a:	e00e      	b.n	800947a <HAL_RCCEx_PeriphCLKConfig+0x34e>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	3304      	adds	r3, #4
 8009460:	2102      	movs	r1, #2
 8009462:	4618      	mov	r0, r3
 8009464:	f001 f866 	bl	800a534 <RCCEx_PLL2_Config>
 8009468:	4603      	mov	r3, r0
 800946a:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 800946c:	e005      	b.n	800947a <HAL_RCCEx_PeriphCLKConfig+0x34e>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800946e:	2301      	movs	r3, #1
 8009470:	75fb      	strb	r3, [r7, #23]
      break;
 8009472:	e002      	b.n	800947a <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8009474:	bf00      	nop
 8009476:	e000      	b.n	800947a <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8009478:	bf00      	nop
    }

    if(ret == HAL_OK)
 800947a:	7dfb      	ldrb	r3, [r7, #23]
 800947c:	2b00      	cmp	r3, #0
 800947e:	d109      	bne.n	8009494 <HAL_RCCEx_PeriphCLKConfig+0x368>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8009480:	4b7c      	ldr	r3, [pc, #496]	; (8009674 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8009482:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009484:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800948c:	4979      	ldr	r1, [pc, #484]	; (8009674 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800948e:	4313      	orrs	r3, r2
 8009490:	64cb      	str	r3, [r1, #76]	; 0x4c
 8009492:	e001      	b.n	8009498 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009494:	7dfb      	ldrb	r3, [r7, #23]
 8009496:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	681b      	ldr	r3, [r3, #0]
 800949c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80094a0:	2b00      	cmp	r3, #0
 80094a2:	d047      	beq.n	8009534 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80094a8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80094ac:	d030      	beq.n	8009510 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 80094ae:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80094b2:	d82a      	bhi.n	800950a <HAL_RCCEx_PeriphCLKConfig+0x3de>
 80094b4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80094b8:	d02c      	beq.n	8009514 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 80094ba:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80094be:	d824      	bhi.n	800950a <HAL_RCCEx_PeriphCLKConfig+0x3de>
 80094c0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80094c4:	d018      	beq.n	80094f8 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 80094c6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80094ca:	d81e      	bhi.n	800950a <HAL_RCCEx_PeriphCLKConfig+0x3de>
 80094cc:	2b00      	cmp	r3, #0
 80094ce:	d003      	beq.n	80094d8 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 80094d0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80094d4:	d007      	beq.n	80094e6 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 80094d6:	e018      	b.n	800950a <HAL_RCCEx_PeriphCLKConfig+0x3de>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80094d8:	4b66      	ldr	r3, [pc, #408]	; (8009674 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80094da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80094dc:	4a65      	ldr	r2, [pc, #404]	; (8009674 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80094de:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80094e2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80094e4:	e017      	b.n	8009516 <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	3304      	adds	r3, #4
 80094ea:	2100      	movs	r1, #0
 80094ec:	4618      	mov	r0, r3
 80094ee:	f001 f821 	bl	800a534 <RCCEx_PLL2_Config>
 80094f2:	4603      	mov	r3, r0
 80094f4:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80094f6:	e00e      	b.n	8009516 <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	3324      	adds	r3, #36	; 0x24
 80094fc:	2100      	movs	r1, #0
 80094fe:	4618      	mov	r0, r3
 8009500:	f001 f8ca 	bl	800a698 <RCCEx_PLL3_Config>
 8009504:	4603      	mov	r3, r0
 8009506:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8009508:	e005      	b.n	8009516 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800950a:	2301      	movs	r3, #1
 800950c:	75fb      	strb	r3, [r7, #23]
      break;
 800950e:	e002      	b.n	8009516 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8009510:	bf00      	nop
 8009512:	e000      	b.n	8009516 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8009514:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009516:	7dfb      	ldrb	r3, [r7, #23]
 8009518:	2b00      	cmp	r3, #0
 800951a:	d109      	bne.n	8009530 <HAL_RCCEx_PeriphCLKConfig+0x404>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800951c:	4b55      	ldr	r3, [pc, #340]	; (8009674 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800951e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009520:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009528:	4952      	ldr	r1, [pc, #328]	; (8009674 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800952a:	4313      	orrs	r3, r2
 800952c:	650b      	str	r3, [r1, #80]	; 0x50
 800952e:	e001      	b.n	8009534 <HAL_RCCEx_PeriphCLKConfig+0x408>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009530:	7dfb      	ldrb	r3, [r7, #23]
 8009532:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	681b      	ldr	r3, [r3, #0]
 8009538:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800953c:	2b00      	cmp	r3, #0
 800953e:	d049      	beq.n	80095d4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009544:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009548:	d02e      	beq.n	80095a8 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 800954a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800954e:	d828      	bhi.n	80095a2 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8009550:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8009554:	d02a      	beq.n	80095ac <HAL_RCCEx_PeriphCLKConfig+0x480>
 8009556:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800955a:	d822      	bhi.n	80095a2 <HAL_RCCEx_PeriphCLKConfig+0x476>
 800955c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8009560:	d026      	beq.n	80095b0 <HAL_RCCEx_PeriphCLKConfig+0x484>
 8009562:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8009566:	d81c      	bhi.n	80095a2 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8009568:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800956c:	d010      	beq.n	8009590 <HAL_RCCEx_PeriphCLKConfig+0x464>
 800956e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009572:	d816      	bhi.n	80095a2 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8009574:	2b00      	cmp	r3, #0
 8009576:	d01d      	beq.n	80095b4 <HAL_RCCEx_PeriphCLKConfig+0x488>
 8009578:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800957c:	d111      	bne.n	80095a2 <HAL_RCCEx_PeriphCLKConfig+0x476>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	3304      	adds	r3, #4
 8009582:	2101      	movs	r1, #1
 8009584:	4618      	mov	r0, r3
 8009586:	f000 ffd5 	bl	800a534 <RCCEx_PLL2_Config>
 800958a:	4603      	mov	r3, r0
 800958c:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800958e:	e012      	b.n	80095b6 <HAL_RCCEx_PeriphCLKConfig+0x48a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	3324      	adds	r3, #36	; 0x24
 8009594:	2101      	movs	r1, #1
 8009596:	4618      	mov	r0, r3
 8009598:	f001 f87e 	bl	800a698 <RCCEx_PLL3_Config>
 800959c:	4603      	mov	r3, r0
 800959e:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80095a0:	e009      	b.n	80095b6 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80095a2:	2301      	movs	r3, #1
 80095a4:	75fb      	strb	r3, [r7, #23]
      break;
 80095a6:	e006      	b.n	80095b6 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 80095a8:	bf00      	nop
 80095aa:	e004      	b.n	80095b6 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 80095ac:	bf00      	nop
 80095ae:	e002      	b.n	80095b6 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 80095b0:	bf00      	nop
 80095b2:	e000      	b.n	80095b6 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 80095b4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80095b6:	7dfb      	ldrb	r3, [r7, #23]
 80095b8:	2b00      	cmp	r3, #0
 80095ba:	d109      	bne.n	80095d0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80095bc:	4b2d      	ldr	r3, [pc, #180]	; (8009674 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80095be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80095c0:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80095c8:	492a      	ldr	r1, [pc, #168]	; (8009674 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80095ca:	4313      	orrs	r3, r2
 80095cc:	650b      	str	r3, [r1, #80]	; 0x50
 80095ce:	e001      	b.n	80095d4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80095d0:	7dfb      	ldrb	r3, [r7, #23]
 80095d2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	681b      	ldr	r3, [r3, #0]
 80095d8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80095dc:	2b00      	cmp	r3, #0
 80095de:	d04d      	beq.n	800967c <HAL_RCCEx_PeriphCLKConfig+0x550>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80095e6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80095ea:	d02e      	beq.n	800964a <HAL_RCCEx_PeriphCLKConfig+0x51e>
 80095ec:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80095f0:	d828      	bhi.n	8009644 <HAL_RCCEx_PeriphCLKConfig+0x518>
 80095f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80095f6:	d02a      	beq.n	800964e <HAL_RCCEx_PeriphCLKConfig+0x522>
 80095f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80095fc:	d822      	bhi.n	8009644 <HAL_RCCEx_PeriphCLKConfig+0x518>
 80095fe:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009602:	d026      	beq.n	8009652 <HAL_RCCEx_PeriphCLKConfig+0x526>
 8009604:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009608:	d81c      	bhi.n	8009644 <HAL_RCCEx_PeriphCLKConfig+0x518>
 800960a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800960e:	d010      	beq.n	8009632 <HAL_RCCEx_PeriphCLKConfig+0x506>
 8009610:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009614:	d816      	bhi.n	8009644 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8009616:	2b00      	cmp	r3, #0
 8009618:	d01d      	beq.n	8009656 <HAL_RCCEx_PeriphCLKConfig+0x52a>
 800961a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800961e:	d111      	bne.n	8009644 <HAL_RCCEx_PeriphCLKConfig+0x518>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	3304      	adds	r3, #4
 8009624:	2101      	movs	r1, #1
 8009626:	4618      	mov	r0, r3
 8009628:	f000 ff84 	bl	800a534 <RCCEx_PLL2_Config>
 800962c:	4603      	mov	r3, r0
 800962e:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8009630:	e012      	b.n	8009658 <HAL_RCCEx_PeriphCLKConfig+0x52c>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	3324      	adds	r3, #36	; 0x24
 8009636:	2101      	movs	r1, #1
 8009638:	4618      	mov	r0, r3
 800963a:	f001 f82d 	bl	800a698 <RCCEx_PLL3_Config>
 800963e:	4603      	mov	r3, r0
 8009640:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8009642:	e009      	b.n	8009658 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8009644:	2301      	movs	r3, #1
 8009646:	75fb      	strb	r3, [r7, #23]
      break;
 8009648:	e006      	b.n	8009658 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 800964a:	bf00      	nop
 800964c:	e004      	b.n	8009658 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 800964e:	bf00      	nop
 8009650:	e002      	b.n	8009658 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8009652:	bf00      	nop
 8009654:	e000      	b.n	8009658 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8009656:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009658:	7dfb      	ldrb	r3, [r7, #23]
 800965a:	2b00      	cmp	r3, #0
 800965c:	d10c      	bne.n	8009678 <HAL_RCCEx_PeriphCLKConfig+0x54c>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800965e:	4b05      	ldr	r3, [pc, #20]	; (8009674 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8009660:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009662:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800966c:	4901      	ldr	r1, [pc, #4]	; (8009674 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800966e:	4313      	orrs	r3, r2
 8009670:	658b      	str	r3, [r1, #88]	; 0x58
 8009672:	e003      	b.n	800967c <HAL_RCCEx_PeriphCLKConfig+0x550>
 8009674:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009678:	7dfb      	ldrb	r3, [r7, #23]
 800967a:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	681b      	ldr	r3, [r3, #0]
 8009680:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009684:	2b00      	cmp	r3, #0
 8009686:	d02f      	beq.n	80096e8 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800968c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009690:	d00e      	beq.n	80096b0 <HAL_RCCEx_PeriphCLKConfig+0x584>
 8009692:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009696:	d814      	bhi.n	80096c2 <HAL_RCCEx_PeriphCLKConfig+0x596>
 8009698:	2b00      	cmp	r3, #0
 800969a:	d015      	beq.n	80096c8 <HAL_RCCEx_PeriphCLKConfig+0x59c>
 800969c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80096a0:	d10f      	bne.n	80096c2 <HAL_RCCEx_PeriphCLKConfig+0x596>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80096a2:	4baf      	ldr	r3, [pc, #700]	; (8009960 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80096a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80096a6:	4aae      	ldr	r2, [pc, #696]	; (8009960 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80096a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80096ac:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80096ae:	e00c      	b.n	80096ca <HAL_RCCEx_PeriphCLKConfig+0x59e>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	3304      	adds	r3, #4
 80096b4:	2101      	movs	r1, #1
 80096b6:	4618      	mov	r0, r3
 80096b8:	f000 ff3c 	bl	800a534 <RCCEx_PLL2_Config>
 80096bc:	4603      	mov	r3, r0
 80096be:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80096c0:	e003      	b.n	80096ca <HAL_RCCEx_PeriphCLKConfig+0x59e>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80096c2:	2301      	movs	r3, #1
 80096c4:	75fb      	strb	r3, [r7, #23]
      break;
 80096c6:	e000      	b.n	80096ca <HAL_RCCEx_PeriphCLKConfig+0x59e>
      break;
 80096c8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80096ca:	7dfb      	ldrb	r3, [r7, #23]
 80096cc:	2b00      	cmp	r3, #0
 80096ce:	d109      	bne.n	80096e4 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80096d0:	4ba3      	ldr	r3, [pc, #652]	; (8009960 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80096d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80096d4:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80096dc:	49a0      	ldr	r1, [pc, #640]	; (8009960 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80096de:	4313      	orrs	r3, r2
 80096e0:	650b      	str	r3, [r1, #80]	; 0x50
 80096e2:	e001      	b.n	80096e8 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80096e4:	7dfb      	ldrb	r3, [r7, #23]
 80096e6:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	681b      	ldr	r3, [r3, #0]
 80096ec:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80096f0:	2b00      	cmp	r3, #0
 80096f2:	d032      	beq.n	800975a <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80096f8:	2b03      	cmp	r3, #3
 80096fa:	d81b      	bhi.n	8009734 <HAL_RCCEx_PeriphCLKConfig+0x608>
 80096fc:	a201      	add	r2, pc, #4	; (adr r2, 8009704 <HAL_RCCEx_PeriphCLKConfig+0x5d8>)
 80096fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009702:	bf00      	nop
 8009704:	0800973b 	.word	0x0800973b
 8009708:	08009715 	.word	0x08009715
 800970c:	08009723 	.word	0x08009723
 8009710:	0800973b 	.word	0x0800973b
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009714:	4b92      	ldr	r3, [pc, #584]	; (8009960 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8009716:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009718:	4a91      	ldr	r2, [pc, #580]	; (8009960 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800971a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800971e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8009720:	e00c      	b.n	800973c <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	3304      	adds	r3, #4
 8009726:	2102      	movs	r1, #2
 8009728:	4618      	mov	r0, r3
 800972a:	f000 ff03 	bl	800a534 <RCCEx_PLL2_Config>
 800972e:	4603      	mov	r3, r0
 8009730:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8009732:	e003      	b.n	800973c <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8009734:	2301      	movs	r3, #1
 8009736:	75fb      	strb	r3, [r7, #23]
      break;
 8009738:	e000      	b.n	800973c <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 800973a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800973c:	7dfb      	ldrb	r3, [r7, #23]
 800973e:	2b00      	cmp	r3, #0
 8009740:	d109      	bne.n	8009756 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8009742:	4b87      	ldr	r3, [pc, #540]	; (8009960 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8009744:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009746:	f023 0203 	bic.w	r2, r3, #3
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800974e:	4984      	ldr	r1, [pc, #528]	; (8009960 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8009750:	4313      	orrs	r3, r2
 8009752:	64cb      	str	r3, [r1, #76]	; 0x4c
 8009754:	e001      	b.n	800975a <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009756:	7dfb      	ldrb	r3, [r7, #23]
 8009758:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	681b      	ldr	r3, [r3, #0]
 800975e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009762:	2b00      	cmp	r3, #0
 8009764:	f000 8086 	beq.w	8009874 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8009768:	4b7e      	ldr	r3, [pc, #504]	; (8009964 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 800976a:	681b      	ldr	r3, [r3, #0]
 800976c:	4a7d      	ldr	r2, [pc, #500]	; (8009964 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 800976e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009772:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8009774:	f7fd fc08 	bl	8006f88 <HAL_GetTick>
 8009778:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800977a:	e009      	b.n	8009790 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800977c:	f7fd fc04 	bl	8006f88 <HAL_GetTick>
 8009780:	4602      	mov	r2, r0
 8009782:	693b      	ldr	r3, [r7, #16]
 8009784:	1ad3      	subs	r3, r2, r3
 8009786:	2b64      	cmp	r3, #100	; 0x64
 8009788:	d902      	bls.n	8009790 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 800978a:	2303      	movs	r3, #3
 800978c:	75fb      	strb	r3, [r7, #23]
        break;
 800978e:	e005      	b.n	800979c <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009790:	4b74      	ldr	r3, [pc, #464]	; (8009964 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8009792:	681b      	ldr	r3, [r3, #0]
 8009794:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009798:	2b00      	cmp	r3, #0
 800979a:	d0ef      	beq.n	800977c <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 800979c:	7dfb      	ldrb	r3, [r7, #23]
 800979e:	2b00      	cmp	r3, #0
 80097a0:	d166      	bne.n	8009870 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80097a2:	4b6f      	ldr	r3, [pc, #444]	; (8009960 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80097a4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80097ac:	4053      	eors	r3, r2
 80097ae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80097b2:	2b00      	cmp	r3, #0
 80097b4:	d013      	beq.n	80097de <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80097b6:	4b6a      	ldr	r3, [pc, #424]	; (8009960 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80097b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80097ba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80097be:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80097c0:	4b67      	ldr	r3, [pc, #412]	; (8009960 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80097c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80097c4:	4a66      	ldr	r2, [pc, #408]	; (8009960 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80097c6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80097ca:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80097cc:	4b64      	ldr	r3, [pc, #400]	; (8009960 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80097ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80097d0:	4a63      	ldr	r2, [pc, #396]	; (8009960 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80097d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80097d6:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80097d8:	4a61      	ldr	r2, [pc, #388]	; (8009960 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80097da:	68fb      	ldr	r3, [r7, #12]
 80097dc:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80097e4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80097e8:	d115      	bne.n	8009816 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80097ea:	f7fd fbcd 	bl	8006f88 <HAL_GetTick>
 80097ee:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80097f0:	e00b      	b.n	800980a <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80097f2:	f7fd fbc9 	bl	8006f88 <HAL_GetTick>
 80097f6:	4602      	mov	r2, r0
 80097f8:	693b      	ldr	r3, [r7, #16]
 80097fa:	1ad3      	subs	r3, r2, r3
 80097fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8009800:	4293      	cmp	r3, r2
 8009802:	d902      	bls.n	800980a <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8009804:	2303      	movs	r3, #3
 8009806:	75fb      	strb	r3, [r7, #23]
            break;
 8009808:	e005      	b.n	8009816 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800980a:	4b55      	ldr	r3, [pc, #340]	; (8009960 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800980c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800980e:	f003 0302 	and.w	r3, r3, #2
 8009812:	2b00      	cmp	r3, #0
 8009814:	d0ed      	beq.n	80097f2 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 8009816:	7dfb      	ldrb	r3, [r7, #23]
 8009818:	2b00      	cmp	r3, #0
 800981a:	d126      	bne.n	800986a <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8009822:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009826:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800982a:	d10d      	bne.n	8009848 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 800982c:	4b4c      	ldr	r3, [pc, #304]	; (8009960 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800982e:	691b      	ldr	r3, [r3, #16]
 8009830:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800983a:	0919      	lsrs	r1, r3, #4
 800983c:	4b4a      	ldr	r3, [pc, #296]	; (8009968 <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 800983e:	400b      	ands	r3, r1
 8009840:	4947      	ldr	r1, [pc, #284]	; (8009960 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8009842:	4313      	orrs	r3, r2
 8009844:	610b      	str	r3, [r1, #16]
 8009846:	e005      	b.n	8009854 <HAL_RCCEx_PeriphCLKConfig+0x728>
 8009848:	4b45      	ldr	r3, [pc, #276]	; (8009960 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800984a:	691b      	ldr	r3, [r3, #16]
 800984c:	4a44      	ldr	r2, [pc, #272]	; (8009960 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800984e:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8009852:	6113      	str	r3, [r2, #16]
 8009854:	4b42      	ldr	r3, [pc, #264]	; (8009960 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8009856:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800985e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009862:	493f      	ldr	r1, [pc, #252]	; (8009960 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8009864:	4313      	orrs	r3, r2
 8009866:	670b      	str	r3, [r1, #112]	; 0x70
 8009868:	e004      	b.n	8009874 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800986a:	7dfb      	ldrb	r3, [r7, #23]
 800986c:	75bb      	strb	r3, [r7, #22]
 800986e:	e001      	b.n	8009874 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009870:	7dfb      	ldrb	r3, [r7, #23]
 8009872:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	681b      	ldr	r3, [r3, #0]
 8009878:	f003 0301 	and.w	r3, r3, #1
 800987c:	2b00      	cmp	r3, #0
 800987e:	f000 8085 	beq.w	800998c <HAL_RCCEx_PeriphCLKConfig+0x860>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009886:	2b28      	cmp	r3, #40	; 0x28
 8009888:	d866      	bhi.n	8009958 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 800988a:	a201      	add	r2, pc, #4	; (adr r2, 8009890 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 800988c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009890:	0800996d 	.word	0x0800996d
 8009894:	08009959 	.word	0x08009959
 8009898:	08009959 	.word	0x08009959
 800989c:	08009959 	.word	0x08009959
 80098a0:	08009959 	.word	0x08009959
 80098a4:	08009959 	.word	0x08009959
 80098a8:	08009959 	.word	0x08009959
 80098ac:	08009959 	.word	0x08009959
 80098b0:	08009935 	.word	0x08009935
 80098b4:	08009959 	.word	0x08009959
 80098b8:	08009959 	.word	0x08009959
 80098bc:	08009959 	.word	0x08009959
 80098c0:	08009959 	.word	0x08009959
 80098c4:	08009959 	.word	0x08009959
 80098c8:	08009959 	.word	0x08009959
 80098cc:	08009959 	.word	0x08009959
 80098d0:	08009947 	.word	0x08009947
 80098d4:	08009959 	.word	0x08009959
 80098d8:	08009959 	.word	0x08009959
 80098dc:	08009959 	.word	0x08009959
 80098e0:	08009959 	.word	0x08009959
 80098e4:	08009959 	.word	0x08009959
 80098e8:	08009959 	.word	0x08009959
 80098ec:	08009959 	.word	0x08009959
 80098f0:	0800996d 	.word	0x0800996d
 80098f4:	08009959 	.word	0x08009959
 80098f8:	08009959 	.word	0x08009959
 80098fc:	08009959 	.word	0x08009959
 8009900:	08009959 	.word	0x08009959
 8009904:	08009959 	.word	0x08009959
 8009908:	08009959 	.word	0x08009959
 800990c:	08009959 	.word	0x08009959
 8009910:	0800996d 	.word	0x0800996d
 8009914:	08009959 	.word	0x08009959
 8009918:	08009959 	.word	0x08009959
 800991c:	08009959 	.word	0x08009959
 8009920:	08009959 	.word	0x08009959
 8009924:	08009959 	.word	0x08009959
 8009928:	08009959 	.word	0x08009959
 800992c:	08009959 	.word	0x08009959
 8009930:	0800996d 	.word	0x0800996d
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	3304      	adds	r3, #4
 8009938:	2101      	movs	r1, #1
 800993a:	4618      	mov	r0, r3
 800993c:	f000 fdfa 	bl	800a534 <RCCEx_PLL2_Config>
 8009940:	4603      	mov	r3, r0
 8009942:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8009944:	e013      	b.n	800996e <HAL_RCCEx_PeriphCLKConfig+0x842>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	3324      	adds	r3, #36	; 0x24
 800994a:	2101      	movs	r1, #1
 800994c:	4618      	mov	r0, r3
 800994e:	f000 fea3 	bl	800a698 <RCCEx_PLL3_Config>
 8009952:	4603      	mov	r3, r0
 8009954:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8009956:	e00a      	b.n	800996e <HAL_RCCEx_PeriphCLKConfig+0x842>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009958:	2301      	movs	r3, #1
 800995a:	75fb      	strb	r3, [r7, #23]
      break;
 800995c:	e007      	b.n	800996e <HAL_RCCEx_PeriphCLKConfig+0x842>
 800995e:	bf00      	nop
 8009960:	58024400 	.word	0x58024400
 8009964:	58024800 	.word	0x58024800
 8009968:	00ffffcf 	.word	0x00ffffcf
      break;
 800996c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800996e:	7dfb      	ldrb	r3, [r7, #23]
 8009970:	2b00      	cmp	r3, #0
 8009972:	d109      	bne.n	8009988 <HAL_RCCEx_PeriphCLKConfig+0x85c>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8009974:	4b96      	ldr	r3, [pc, #600]	; (8009bd0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8009976:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009978:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009980:	4993      	ldr	r1, [pc, #588]	; (8009bd0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8009982:	4313      	orrs	r3, r2
 8009984:	654b      	str	r3, [r1, #84]	; 0x54
 8009986:	e001      	b.n	800998c <HAL_RCCEx_PeriphCLKConfig+0x860>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009988:	7dfb      	ldrb	r3, [r7, #23]
 800998a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	681b      	ldr	r3, [r3, #0]
 8009990:	f003 0302 	and.w	r3, r3, #2
 8009994:	2b00      	cmp	r3, #0
 8009996:	d038      	beq.n	8009a0a <HAL_RCCEx_PeriphCLKConfig+0x8de>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800999c:	2b05      	cmp	r3, #5
 800999e:	d821      	bhi.n	80099e4 <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 80099a0:	a201      	add	r2, pc, #4	; (adr r2, 80099a8 <HAL_RCCEx_PeriphCLKConfig+0x87c>)
 80099a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80099a6:	bf00      	nop
 80099a8:	080099eb 	.word	0x080099eb
 80099ac:	080099c1 	.word	0x080099c1
 80099b0:	080099d3 	.word	0x080099d3
 80099b4:	080099eb 	.word	0x080099eb
 80099b8:	080099eb 	.word	0x080099eb
 80099bc:	080099eb 	.word	0x080099eb
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	3304      	adds	r3, #4
 80099c4:	2101      	movs	r1, #1
 80099c6:	4618      	mov	r0, r3
 80099c8:	f000 fdb4 	bl	800a534 <RCCEx_PLL2_Config>
 80099cc:	4603      	mov	r3, r0
 80099ce:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80099d0:	e00c      	b.n	80099ec <HAL_RCCEx_PeriphCLKConfig+0x8c0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	3324      	adds	r3, #36	; 0x24
 80099d6:	2101      	movs	r1, #1
 80099d8:	4618      	mov	r0, r3
 80099da:	f000 fe5d 	bl	800a698 <RCCEx_PLL3_Config>
 80099de:	4603      	mov	r3, r0
 80099e0:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80099e2:	e003      	b.n	80099ec <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80099e4:	2301      	movs	r3, #1
 80099e6:	75fb      	strb	r3, [r7, #23]
      break;
 80099e8:	e000      	b.n	80099ec <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      break;
 80099ea:	bf00      	nop
    }

    if(ret == HAL_OK)
 80099ec:	7dfb      	ldrb	r3, [r7, #23]
 80099ee:	2b00      	cmp	r3, #0
 80099f0:	d109      	bne.n	8009a06 <HAL_RCCEx_PeriphCLKConfig+0x8da>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80099f2:	4b77      	ldr	r3, [pc, #476]	; (8009bd0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80099f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80099f6:	f023 0207 	bic.w	r2, r3, #7
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80099fe:	4974      	ldr	r1, [pc, #464]	; (8009bd0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8009a00:	4313      	orrs	r3, r2
 8009a02:	654b      	str	r3, [r1, #84]	; 0x54
 8009a04:	e001      	b.n	8009a0a <HAL_RCCEx_PeriphCLKConfig+0x8de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009a06:	7dfb      	ldrb	r3, [r7, #23]
 8009a08:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	681b      	ldr	r3, [r3, #0]
 8009a0e:	f003 0304 	and.w	r3, r3, #4
 8009a12:	2b00      	cmp	r3, #0
 8009a14:	d03a      	beq.n	8009a8c <HAL_RCCEx_PeriphCLKConfig+0x960>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009a1c:	2b05      	cmp	r3, #5
 8009a1e:	d821      	bhi.n	8009a64 <HAL_RCCEx_PeriphCLKConfig+0x938>
 8009a20:	a201      	add	r2, pc, #4	; (adr r2, 8009a28 <HAL_RCCEx_PeriphCLKConfig+0x8fc>)
 8009a22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a26:	bf00      	nop
 8009a28:	08009a6b 	.word	0x08009a6b
 8009a2c:	08009a41 	.word	0x08009a41
 8009a30:	08009a53 	.word	0x08009a53
 8009a34:	08009a6b 	.word	0x08009a6b
 8009a38:	08009a6b 	.word	0x08009a6b
 8009a3c:	08009a6b 	.word	0x08009a6b
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	3304      	adds	r3, #4
 8009a44:	2101      	movs	r1, #1
 8009a46:	4618      	mov	r0, r3
 8009a48:	f000 fd74 	bl	800a534 <RCCEx_PLL2_Config>
 8009a4c:	4603      	mov	r3, r0
 8009a4e:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8009a50:	e00c      	b.n	8009a6c <HAL_RCCEx_PeriphCLKConfig+0x940>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	3324      	adds	r3, #36	; 0x24
 8009a56:	2101      	movs	r1, #1
 8009a58:	4618      	mov	r0, r3
 8009a5a:	f000 fe1d 	bl	800a698 <RCCEx_PLL3_Config>
 8009a5e:	4603      	mov	r3, r0
 8009a60:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8009a62:	e003      	b.n	8009a6c <HAL_RCCEx_PeriphCLKConfig+0x940>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009a64:	2301      	movs	r3, #1
 8009a66:	75fb      	strb	r3, [r7, #23]
      break;
 8009a68:	e000      	b.n	8009a6c <HAL_RCCEx_PeriphCLKConfig+0x940>
      break;
 8009a6a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009a6c:	7dfb      	ldrb	r3, [r7, #23]
 8009a6e:	2b00      	cmp	r3, #0
 8009a70:	d10a      	bne.n	8009a88 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8009a72:	4b57      	ldr	r3, [pc, #348]	; (8009bd0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8009a74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009a76:	f023 0207 	bic.w	r2, r3, #7
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009a80:	4953      	ldr	r1, [pc, #332]	; (8009bd0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8009a82:	4313      	orrs	r3, r2
 8009a84:	658b      	str	r3, [r1, #88]	; 0x58
 8009a86:	e001      	b.n	8009a8c <HAL_RCCEx_PeriphCLKConfig+0x960>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009a88:	7dfb      	ldrb	r3, [r7, #23]
 8009a8a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	681b      	ldr	r3, [r3, #0]
 8009a90:	f003 0320 	and.w	r3, r3, #32
 8009a94:	2b00      	cmp	r3, #0
 8009a96:	d04b      	beq.n	8009b30 <HAL_RCCEx_PeriphCLKConfig+0xa04>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009a9e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009aa2:	d02e      	beq.n	8009b02 <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8009aa4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009aa8:	d828      	bhi.n	8009afc <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8009aaa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009aae:	d02a      	beq.n	8009b06 <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8009ab0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009ab4:	d822      	bhi.n	8009afc <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8009ab6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009aba:	d026      	beq.n	8009b0a <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8009abc:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009ac0:	d81c      	bhi.n	8009afc <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8009ac2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009ac6:	d010      	beq.n	8009aea <HAL_RCCEx_PeriphCLKConfig+0x9be>
 8009ac8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009acc:	d816      	bhi.n	8009afc <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8009ace:	2b00      	cmp	r3, #0
 8009ad0:	d01d      	beq.n	8009b0e <HAL_RCCEx_PeriphCLKConfig+0x9e2>
 8009ad2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009ad6:	d111      	bne.n	8009afc <HAL_RCCEx_PeriphCLKConfig+0x9d0>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	3304      	adds	r3, #4
 8009adc:	2100      	movs	r1, #0
 8009ade:	4618      	mov	r0, r3
 8009ae0:	f000 fd28 	bl	800a534 <RCCEx_PLL2_Config>
 8009ae4:	4603      	mov	r3, r0
 8009ae6:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8009ae8:	e012      	b.n	8009b10 <HAL_RCCEx_PeriphCLKConfig+0x9e4>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	3324      	adds	r3, #36	; 0x24
 8009aee:	2102      	movs	r1, #2
 8009af0:	4618      	mov	r0, r3
 8009af2:	f000 fdd1 	bl	800a698 <RCCEx_PLL3_Config>
 8009af6:	4603      	mov	r3, r0
 8009af8:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8009afa:	e009      	b.n	8009b10 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009afc:	2301      	movs	r3, #1
 8009afe:	75fb      	strb	r3, [r7, #23]
      break;
 8009b00:	e006      	b.n	8009b10 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8009b02:	bf00      	nop
 8009b04:	e004      	b.n	8009b10 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8009b06:	bf00      	nop
 8009b08:	e002      	b.n	8009b10 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8009b0a:	bf00      	nop
 8009b0c:	e000      	b.n	8009b10 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8009b0e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009b10:	7dfb      	ldrb	r3, [r7, #23]
 8009b12:	2b00      	cmp	r3, #0
 8009b14:	d10a      	bne.n	8009b2c <HAL_RCCEx_PeriphCLKConfig+0xa00>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8009b16:	4b2e      	ldr	r3, [pc, #184]	; (8009bd0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8009b18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009b1a:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009b24:	492a      	ldr	r1, [pc, #168]	; (8009bd0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8009b26:	4313      	orrs	r3, r2
 8009b28:	654b      	str	r3, [r1, #84]	; 0x54
 8009b2a:	e001      	b.n	8009b30 <HAL_RCCEx_PeriphCLKConfig+0xa04>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009b2c:	7dfb      	ldrb	r3, [r7, #23]
 8009b2e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	681b      	ldr	r3, [r3, #0]
 8009b34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009b38:	2b00      	cmp	r3, #0
 8009b3a:	d04d      	beq.n	8009bd8 <HAL_RCCEx_PeriphCLKConfig+0xaac>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8009b42:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8009b46:	d02e      	beq.n	8009ba6 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8009b48:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8009b4c:	d828      	bhi.n	8009ba0 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8009b4e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009b52:	d02a      	beq.n	8009baa <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8009b54:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009b58:	d822      	bhi.n	8009ba0 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8009b5a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009b5e:	d026      	beq.n	8009bae <HAL_RCCEx_PeriphCLKConfig+0xa82>
 8009b60:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009b64:	d81c      	bhi.n	8009ba0 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8009b66:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009b6a:	d010      	beq.n	8009b8e <HAL_RCCEx_PeriphCLKConfig+0xa62>
 8009b6c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009b70:	d816      	bhi.n	8009ba0 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8009b72:	2b00      	cmp	r3, #0
 8009b74:	d01d      	beq.n	8009bb2 <HAL_RCCEx_PeriphCLKConfig+0xa86>
 8009b76:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009b7a:	d111      	bne.n	8009ba0 <HAL_RCCEx_PeriphCLKConfig+0xa74>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	3304      	adds	r3, #4
 8009b80:	2100      	movs	r1, #0
 8009b82:	4618      	mov	r0, r3
 8009b84:	f000 fcd6 	bl	800a534 <RCCEx_PLL2_Config>
 8009b88:	4603      	mov	r3, r0
 8009b8a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8009b8c:	e012      	b.n	8009bb4 <HAL_RCCEx_PeriphCLKConfig+0xa88>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	3324      	adds	r3, #36	; 0x24
 8009b92:	2102      	movs	r1, #2
 8009b94:	4618      	mov	r0, r3
 8009b96:	f000 fd7f 	bl	800a698 <RCCEx_PLL3_Config>
 8009b9a:	4603      	mov	r3, r0
 8009b9c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8009b9e:	e009      	b.n	8009bb4 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009ba0:	2301      	movs	r3, #1
 8009ba2:	75fb      	strb	r3, [r7, #23]
      break;
 8009ba4:	e006      	b.n	8009bb4 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8009ba6:	bf00      	nop
 8009ba8:	e004      	b.n	8009bb4 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8009baa:	bf00      	nop
 8009bac:	e002      	b.n	8009bb4 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8009bae:	bf00      	nop
 8009bb0:	e000      	b.n	8009bb4 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8009bb2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009bb4:	7dfb      	ldrb	r3, [r7, #23]
 8009bb6:	2b00      	cmp	r3, #0
 8009bb8:	d10c      	bne.n	8009bd4 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8009bba:	4b05      	ldr	r3, [pc, #20]	; (8009bd0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8009bbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009bbe:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8009bc8:	4901      	ldr	r1, [pc, #4]	; (8009bd0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8009bca:	4313      	orrs	r3, r2
 8009bcc:	658b      	str	r3, [r1, #88]	; 0x58
 8009bce:	e003      	b.n	8009bd8 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 8009bd0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009bd4:	7dfb      	ldrb	r3, [r7, #23]
 8009bd6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	681b      	ldr	r3, [r3, #0]
 8009bdc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009be0:	2b00      	cmp	r3, #0
 8009be2:	d04b      	beq.n	8009c7c <HAL_RCCEx_PeriphCLKConfig+0xb50>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009bea:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8009bee:	d02e      	beq.n	8009c4e <HAL_RCCEx_PeriphCLKConfig+0xb22>
 8009bf0:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8009bf4:	d828      	bhi.n	8009c48 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8009bf6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009bfa:	d02a      	beq.n	8009c52 <HAL_RCCEx_PeriphCLKConfig+0xb26>
 8009bfc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009c00:	d822      	bhi.n	8009c48 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8009c02:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8009c06:	d026      	beq.n	8009c56 <HAL_RCCEx_PeriphCLKConfig+0xb2a>
 8009c08:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8009c0c:	d81c      	bhi.n	8009c48 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8009c0e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009c12:	d010      	beq.n	8009c36 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 8009c14:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009c18:	d816      	bhi.n	8009c48 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8009c1a:	2b00      	cmp	r3, #0
 8009c1c:	d01d      	beq.n	8009c5a <HAL_RCCEx_PeriphCLKConfig+0xb2e>
 8009c1e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009c22:	d111      	bne.n	8009c48 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	3304      	adds	r3, #4
 8009c28:	2100      	movs	r1, #0
 8009c2a:	4618      	mov	r0, r3
 8009c2c:	f000 fc82 	bl	800a534 <RCCEx_PLL2_Config>
 8009c30:	4603      	mov	r3, r0
 8009c32:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8009c34:	e012      	b.n	8009c5c <HAL_RCCEx_PeriphCLKConfig+0xb30>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	3324      	adds	r3, #36	; 0x24
 8009c3a:	2102      	movs	r1, #2
 8009c3c:	4618      	mov	r0, r3
 8009c3e:	f000 fd2b 	bl	800a698 <RCCEx_PLL3_Config>
 8009c42:	4603      	mov	r3, r0
 8009c44:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8009c46:	e009      	b.n	8009c5c <HAL_RCCEx_PeriphCLKConfig+0xb30>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009c48:	2301      	movs	r3, #1
 8009c4a:	75fb      	strb	r3, [r7, #23]
      break;
 8009c4c:	e006      	b.n	8009c5c <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8009c4e:	bf00      	nop
 8009c50:	e004      	b.n	8009c5c <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8009c52:	bf00      	nop
 8009c54:	e002      	b.n	8009c5c <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8009c56:	bf00      	nop
 8009c58:	e000      	b.n	8009c5c <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8009c5a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009c5c:	7dfb      	ldrb	r3, [r7, #23]
 8009c5e:	2b00      	cmp	r3, #0
 8009c60:	d10a      	bne.n	8009c78 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8009c62:	4b9d      	ldr	r3, [pc, #628]	; (8009ed8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009c64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009c66:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009c70:	4999      	ldr	r1, [pc, #612]	; (8009ed8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009c72:	4313      	orrs	r3, r2
 8009c74:	658b      	str	r3, [r1, #88]	; 0x58
 8009c76:	e001      	b.n	8009c7c <HAL_RCCEx_PeriphCLKConfig+0xb50>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009c78:	7dfb      	ldrb	r3, [r7, #23]
 8009c7a:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	681b      	ldr	r3, [r3, #0]
 8009c80:	f003 0308 	and.w	r3, r3, #8
 8009c84:	2b00      	cmp	r3, #0
 8009c86:	d01a      	beq.n	8009cbe <HAL_RCCEx_PeriphCLKConfig+0xb92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009c8e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009c92:	d10a      	bne.n	8009caa <HAL_RCCEx_PeriphCLKConfig+0xb7e>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	3324      	adds	r3, #36	; 0x24
 8009c98:	2102      	movs	r1, #2
 8009c9a:	4618      	mov	r0, r3
 8009c9c:	f000 fcfc 	bl	800a698 <RCCEx_PLL3_Config>
 8009ca0:	4603      	mov	r3, r0
 8009ca2:	2b00      	cmp	r3, #0
 8009ca4:	d001      	beq.n	8009caa <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        {
          status = HAL_ERROR;
 8009ca6:	2301      	movs	r3, #1
 8009ca8:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8009caa:	4b8b      	ldr	r3, [pc, #556]	; (8009ed8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009cac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009cae:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009cb8:	4987      	ldr	r1, [pc, #540]	; (8009ed8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009cba:	4313      	orrs	r3, r2
 8009cbc:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	681b      	ldr	r3, [r3, #0]
 8009cc2:	f003 0310 	and.w	r3, r3, #16
 8009cc6:	2b00      	cmp	r3, #0
 8009cc8:	d01a      	beq.n	8009d00 <HAL_RCCEx_PeriphCLKConfig+0xbd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009cd0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009cd4:	d10a      	bne.n	8009cec <HAL_RCCEx_PeriphCLKConfig+0xbc0>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	3324      	adds	r3, #36	; 0x24
 8009cda:	2102      	movs	r1, #2
 8009cdc:	4618      	mov	r0, r3
 8009cde:	f000 fcdb 	bl	800a698 <RCCEx_PLL3_Config>
 8009ce2:	4603      	mov	r3, r0
 8009ce4:	2b00      	cmp	r3, #0
 8009ce6:	d001      	beq.n	8009cec <HAL_RCCEx_PeriphCLKConfig+0xbc0>
      {
        status = HAL_ERROR;
 8009ce8:	2301      	movs	r3, #1
 8009cea:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8009cec:	4b7a      	ldr	r3, [pc, #488]	; (8009ed8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009cee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009cf0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009cfa:	4977      	ldr	r1, [pc, #476]	; (8009ed8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009cfc:	4313      	orrs	r3, r2
 8009cfe:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	681b      	ldr	r3, [r3, #0]
 8009d04:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8009d08:	2b00      	cmp	r3, #0
 8009d0a:	d034      	beq.n	8009d76 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8009d12:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009d16:	d01d      	beq.n	8009d54 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 8009d18:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009d1c:	d817      	bhi.n	8009d4e <HAL_RCCEx_PeriphCLKConfig+0xc22>
 8009d1e:	2b00      	cmp	r3, #0
 8009d20:	d003      	beq.n	8009d2a <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 8009d22:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009d26:	d009      	beq.n	8009d3c <HAL_RCCEx_PeriphCLKConfig+0xc10>
 8009d28:	e011      	b.n	8009d4e <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	3304      	adds	r3, #4
 8009d2e:	2100      	movs	r1, #0
 8009d30:	4618      	mov	r0, r3
 8009d32:	f000 fbff 	bl	800a534 <RCCEx_PLL2_Config>
 8009d36:	4603      	mov	r3, r0
 8009d38:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8009d3a:	e00c      	b.n	8009d56 <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	3324      	adds	r3, #36	; 0x24
 8009d40:	2102      	movs	r1, #2
 8009d42:	4618      	mov	r0, r3
 8009d44:	f000 fca8 	bl	800a698 <RCCEx_PLL3_Config>
 8009d48:	4603      	mov	r3, r0
 8009d4a:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8009d4c:	e003      	b.n	8009d56 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009d4e:	2301      	movs	r3, #1
 8009d50:	75fb      	strb	r3, [r7, #23]
      break;
 8009d52:	e000      	b.n	8009d56 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 8009d54:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009d56:	7dfb      	ldrb	r3, [r7, #23]
 8009d58:	2b00      	cmp	r3, #0
 8009d5a:	d10a      	bne.n	8009d72 <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8009d5c:	4b5e      	ldr	r3, [pc, #376]	; (8009ed8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009d5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009d60:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8009d6a:	495b      	ldr	r1, [pc, #364]	; (8009ed8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009d6c:	4313      	orrs	r3, r2
 8009d6e:	658b      	str	r3, [r1, #88]	; 0x58
 8009d70:	e001      	b.n	8009d76 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009d72:	7dfb      	ldrb	r3, [r7, #23]
 8009d74:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	681b      	ldr	r3, [r3, #0]
 8009d7a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009d7e:	2b00      	cmp	r3, #0
 8009d80:	d033      	beq.n	8009dea <HAL_RCCEx_PeriphCLKConfig+0xcbe>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009d88:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009d8c:	d01c      	beq.n	8009dc8 <HAL_RCCEx_PeriphCLKConfig+0xc9c>
 8009d8e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009d92:	d816      	bhi.n	8009dc2 <HAL_RCCEx_PeriphCLKConfig+0xc96>
 8009d94:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009d98:	d003      	beq.n	8009da2 <HAL_RCCEx_PeriphCLKConfig+0xc76>
 8009d9a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009d9e:	d007      	beq.n	8009db0 <HAL_RCCEx_PeriphCLKConfig+0xc84>
 8009da0:	e00f      	b.n	8009dc2 <HAL_RCCEx_PeriphCLKConfig+0xc96>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009da2:	4b4d      	ldr	r3, [pc, #308]	; (8009ed8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009da4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009da6:	4a4c      	ldr	r2, [pc, #304]	; (8009ed8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009da8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009dac:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8009dae:	e00c      	b.n	8009dca <HAL_RCCEx_PeriphCLKConfig+0xc9e>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	3324      	adds	r3, #36	; 0x24
 8009db4:	2101      	movs	r1, #1
 8009db6:	4618      	mov	r0, r3
 8009db8:	f000 fc6e 	bl	800a698 <RCCEx_PLL3_Config>
 8009dbc:	4603      	mov	r3, r0
 8009dbe:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8009dc0:	e003      	b.n	8009dca <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009dc2:	2301      	movs	r3, #1
 8009dc4:	75fb      	strb	r3, [r7, #23]
      break;
 8009dc6:	e000      	b.n	8009dca <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      break;
 8009dc8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009dca:	7dfb      	ldrb	r3, [r7, #23]
 8009dcc:	2b00      	cmp	r3, #0
 8009dce:	d10a      	bne.n	8009de6 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8009dd0:	4b41      	ldr	r3, [pc, #260]	; (8009ed8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009dd2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009dd4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009dde:	493e      	ldr	r1, [pc, #248]	; (8009ed8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009de0:	4313      	orrs	r3, r2
 8009de2:	654b      	str	r3, [r1, #84]	; 0x54
 8009de4:	e001      	b.n	8009dea <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009de6:	7dfb      	ldrb	r3, [r7, #23]
 8009de8:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	681b      	ldr	r3, [r3, #0]
 8009dee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009df2:	2b00      	cmp	r3, #0
 8009df4:	d029      	beq.n	8009e4a <HAL_RCCEx_PeriphCLKConfig+0xd1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009dfa:	2b00      	cmp	r3, #0
 8009dfc:	d003      	beq.n	8009e06 <HAL_RCCEx_PeriphCLKConfig+0xcda>
 8009dfe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009e02:	d007      	beq.n	8009e14 <HAL_RCCEx_PeriphCLKConfig+0xce8>
 8009e04:	e00f      	b.n	8009e26 <HAL_RCCEx_PeriphCLKConfig+0xcfa>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009e06:	4b34      	ldr	r3, [pc, #208]	; (8009ed8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009e08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e0a:	4a33      	ldr	r2, [pc, #204]	; (8009ed8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009e0c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009e10:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8009e12:	e00b      	b.n	8009e2c <HAL_RCCEx_PeriphCLKConfig+0xd00>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	3304      	adds	r3, #4
 8009e18:	2102      	movs	r1, #2
 8009e1a:	4618      	mov	r0, r3
 8009e1c:	f000 fb8a 	bl	800a534 <RCCEx_PLL2_Config>
 8009e20:	4603      	mov	r3, r0
 8009e22:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8009e24:	e002      	b.n	8009e2c <HAL_RCCEx_PeriphCLKConfig+0xd00>

    default:
      ret = HAL_ERROR;
 8009e26:	2301      	movs	r3, #1
 8009e28:	75fb      	strb	r3, [r7, #23]
      break;
 8009e2a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009e2c:	7dfb      	ldrb	r3, [r7, #23]
 8009e2e:	2b00      	cmp	r3, #0
 8009e30:	d109      	bne.n	8009e46 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8009e32:	4b29      	ldr	r3, [pc, #164]	; (8009ed8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009e34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009e36:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009e3e:	4926      	ldr	r1, [pc, #152]	; (8009ed8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009e40:	4313      	orrs	r3, r2
 8009e42:	64cb      	str	r3, [r1, #76]	; 0x4c
 8009e44:	e001      	b.n	8009e4a <HAL_RCCEx_PeriphCLKConfig+0xd1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009e46:	7dfb      	ldrb	r3, [r7, #23]
 8009e48:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	681b      	ldr	r3, [r3, #0]
 8009e4e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009e52:	2b00      	cmp	r3, #0
 8009e54:	d00a      	beq.n	8009e6c <HAL_RCCEx_PeriphCLKConfig+0xd40>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	3324      	adds	r3, #36	; 0x24
 8009e5a:	2102      	movs	r1, #2
 8009e5c:	4618      	mov	r0, r3
 8009e5e:	f000 fc1b 	bl	800a698 <RCCEx_PLL3_Config>
 8009e62:	4603      	mov	r3, r0
 8009e64:	2b00      	cmp	r3, #0
 8009e66:	d001      	beq.n	8009e6c <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      status=HAL_ERROR;
 8009e68:	2301      	movs	r3, #1
 8009e6a:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	681b      	ldr	r3, [r3, #0]
 8009e70:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009e74:	2b00      	cmp	r3, #0
 8009e76:	d033      	beq.n	8009ee0 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
  {

    switch(PeriphClkInit->RngClockSelection)
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009e7c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009e80:	d017      	beq.n	8009eb2 <HAL_RCCEx_PeriphCLKConfig+0xd86>
 8009e82:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009e86:	d811      	bhi.n	8009eac <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8009e88:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009e8c:	d013      	beq.n	8009eb6 <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 8009e8e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009e92:	d80b      	bhi.n	8009eac <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8009e94:	2b00      	cmp	r3, #0
 8009e96:	d010      	beq.n	8009eba <HAL_RCCEx_PeriphCLKConfig+0xd8e>
 8009e98:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009e9c:	d106      	bne.n	8009eac <HAL_RCCEx_PeriphCLKConfig+0xd80>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009e9e:	4b0e      	ldr	r3, [pc, #56]	; (8009ed8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009ea0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ea2:	4a0d      	ldr	r2, [pc, #52]	; (8009ed8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009ea4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009ea8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8009eaa:	e007      	b.n	8009ebc <HAL_RCCEx_PeriphCLKConfig+0xd90>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009eac:	2301      	movs	r3, #1
 8009eae:	75fb      	strb	r3, [r7, #23]
      break;
 8009eb0:	e004      	b.n	8009ebc <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8009eb2:	bf00      	nop
 8009eb4:	e002      	b.n	8009ebc <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8009eb6:	bf00      	nop
 8009eb8:	e000      	b.n	8009ebc <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8009eba:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009ebc:	7dfb      	ldrb	r3, [r7, #23]
 8009ebe:	2b00      	cmp	r3, #0
 8009ec0:	d10c      	bne.n	8009edc <HAL_RCCEx_PeriphCLKConfig+0xdb0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8009ec2:	4b05      	ldr	r3, [pc, #20]	; (8009ed8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009ec4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009ec6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009ece:	4902      	ldr	r1, [pc, #8]	; (8009ed8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009ed0:	4313      	orrs	r3, r2
 8009ed2:	654b      	str	r3, [r1, #84]	; 0x54
 8009ed4:	e004      	b.n	8009ee0 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
 8009ed6:	bf00      	nop
 8009ed8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009edc:	7dfb      	ldrb	r3, [r7, #23]
 8009ede:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	681b      	ldr	r3, [r3, #0]
 8009ee4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009ee8:	2b00      	cmp	r3, #0
 8009eea:	d008      	beq.n	8009efe <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8009eec:	4b31      	ldr	r3, [pc, #196]	; (8009fb4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8009eee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009ef0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009ef8:	492e      	ldr	r1, [pc, #184]	; (8009fb4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8009efa:	4313      	orrs	r3, r2
 8009efc:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	681b      	ldr	r3, [r3, #0]
 8009f02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009f06:	2b00      	cmp	r3, #0
 8009f08:	d009      	beq.n	8009f1e <HAL_RCCEx_PeriphCLKConfig+0xdf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8009f0a:	4b2a      	ldr	r3, [pc, #168]	; (8009fb4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8009f0c:	691b      	ldr	r3, [r3, #16]
 8009f0e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8009f18:	4926      	ldr	r1, [pc, #152]	; (8009fb4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8009f1a:	4313      	orrs	r3, r2
 8009f1c:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	681b      	ldr	r3, [r3, #0]
 8009f22:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009f26:	2b00      	cmp	r3, #0
 8009f28:	d008      	beq.n	8009f3c <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8009f2a:	4b22      	ldr	r3, [pc, #136]	; (8009fb4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8009f2c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009f2e:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009f36:	491f      	ldr	r1, [pc, #124]	; (8009fb4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8009f38:	4313      	orrs	r3, r2
 8009f3a:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	681b      	ldr	r3, [r3, #0]
 8009f40:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8009f44:	2b00      	cmp	r3, #0
 8009f46:	d00d      	beq.n	8009f64 <HAL_RCCEx_PeriphCLKConfig+0xe38>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8009f48:	4b1a      	ldr	r3, [pc, #104]	; (8009fb4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8009f4a:	691b      	ldr	r3, [r3, #16]
 8009f4c:	4a19      	ldr	r2, [pc, #100]	; (8009fb4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8009f4e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8009f52:	6113      	str	r3, [r2, #16]
 8009f54:	4b17      	ldr	r3, [pc, #92]	; (8009fb4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8009f56:	691a      	ldr	r2, [r3, #16]
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8009f5e:	4915      	ldr	r1, [pc, #84]	; (8009fb4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8009f60:	4313      	orrs	r3, r2
 8009f62:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	681b      	ldr	r3, [r3, #0]
 8009f68:	2b00      	cmp	r3, #0
 8009f6a:	da08      	bge.n	8009f7e <HAL_RCCEx_PeriphCLKConfig+0xe52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8009f6c:	4b11      	ldr	r3, [pc, #68]	; (8009fb4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8009f6e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009f70:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009f78:	490e      	ldr	r1, [pc, #56]	; (8009fb4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8009f7a:	4313      	orrs	r3, r2
 8009f7c:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	681b      	ldr	r3, [r3, #0]
 8009f82:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009f86:	2b00      	cmp	r3, #0
 8009f88:	d009      	beq.n	8009f9e <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8009f8a:	4b0a      	ldr	r3, [pc, #40]	; (8009fb4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8009f8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009f8e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009f98:	4906      	ldr	r1, [pc, #24]	; (8009fb4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8009f9a:	4313      	orrs	r3, r2
 8009f9c:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8009f9e:	7dbb      	ldrb	r3, [r7, #22]
 8009fa0:	2b00      	cmp	r3, #0
 8009fa2:	d101      	bne.n	8009fa8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>
  {
    return HAL_OK;
 8009fa4:	2300      	movs	r3, #0
 8009fa6:	e000      	b.n	8009faa <HAL_RCCEx_PeriphCLKConfig+0xe7e>
  }
  return HAL_ERROR;
 8009fa8:	2301      	movs	r3, #1
}
 8009faa:	4618      	mov	r0, r3
 8009fac:	3718      	adds	r7, #24
 8009fae:	46bd      	mov	sp, r7
 8009fb0:	bd80      	pop	{r7, pc}
 8009fb2:	bf00      	nop
 8009fb4:	58024400 	.word	0x58024400

08009fb8 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8009fb8:	b580      	push	{r7, lr}
 8009fba:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8009fbc:	f7ff f85a 	bl	8009074 <HAL_RCC_GetHCLKFreq>
 8009fc0:	4602      	mov	r2, r0
 8009fc2:	4b06      	ldr	r3, [pc, #24]	; (8009fdc <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8009fc4:	6a1b      	ldr	r3, [r3, #32]
 8009fc6:	091b      	lsrs	r3, r3, #4
 8009fc8:	f003 0307 	and.w	r3, r3, #7
 8009fcc:	4904      	ldr	r1, [pc, #16]	; (8009fe0 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8009fce:	5ccb      	ldrb	r3, [r1, r3]
 8009fd0:	f003 031f 	and.w	r3, r3, #31
 8009fd4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8009fd8:	4618      	mov	r0, r3
 8009fda:	bd80      	pop	{r7, pc}
 8009fdc:	58024400 	.word	0x58024400
 8009fe0:	080125b8 	.word	0x080125b8

08009fe4 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8009fe4:	b480      	push	{r7}
 8009fe6:	b089      	sub	sp, #36	; 0x24
 8009fe8:	af00      	add	r7, sp, #0
 8009fea:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009fec:	4ba1      	ldr	r3, [pc, #644]	; (800a274 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009fee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009ff0:	f003 0303 	and.w	r3, r3, #3
 8009ff4:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8009ff6:	4b9f      	ldr	r3, [pc, #636]	; (800a274 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009ff8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009ffa:	0b1b      	lsrs	r3, r3, #12
 8009ffc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a000:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800a002:	4b9c      	ldr	r3, [pc, #624]	; (800a274 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a004:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a006:	091b      	lsrs	r3, r3, #4
 800a008:	f003 0301 	and.w	r3, r3, #1
 800a00c:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800a00e:	4b99      	ldr	r3, [pc, #612]	; (800a274 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a010:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a012:	08db      	lsrs	r3, r3, #3
 800a014:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a018:	693a      	ldr	r2, [r7, #16]
 800a01a:	fb02 f303 	mul.w	r3, r2, r3
 800a01e:	ee07 3a90 	vmov	s15, r3
 800a022:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a026:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800a02a:	697b      	ldr	r3, [r7, #20]
 800a02c:	2b00      	cmp	r3, #0
 800a02e:	f000 8111 	beq.w	800a254 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800a032:	69bb      	ldr	r3, [r7, #24]
 800a034:	2b02      	cmp	r3, #2
 800a036:	f000 8083 	beq.w	800a140 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800a03a:	69bb      	ldr	r3, [r7, #24]
 800a03c:	2b02      	cmp	r3, #2
 800a03e:	f200 80a1 	bhi.w	800a184 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800a042:	69bb      	ldr	r3, [r7, #24]
 800a044:	2b00      	cmp	r3, #0
 800a046:	d003      	beq.n	800a050 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800a048:	69bb      	ldr	r3, [r7, #24]
 800a04a:	2b01      	cmp	r3, #1
 800a04c:	d056      	beq.n	800a0fc <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800a04e:	e099      	b.n	800a184 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a050:	4b88      	ldr	r3, [pc, #544]	; (800a274 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a052:	681b      	ldr	r3, [r3, #0]
 800a054:	f003 0320 	and.w	r3, r3, #32
 800a058:	2b00      	cmp	r3, #0
 800a05a:	d02d      	beq.n	800a0b8 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800a05c:	4b85      	ldr	r3, [pc, #532]	; (800a274 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a05e:	681b      	ldr	r3, [r3, #0]
 800a060:	08db      	lsrs	r3, r3, #3
 800a062:	f003 0303 	and.w	r3, r3, #3
 800a066:	4a84      	ldr	r2, [pc, #528]	; (800a278 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800a068:	fa22 f303 	lsr.w	r3, r2, r3
 800a06c:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800a06e:	68bb      	ldr	r3, [r7, #8]
 800a070:	ee07 3a90 	vmov	s15, r3
 800a074:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a078:	697b      	ldr	r3, [r7, #20]
 800a07a:	ee07 3a90 	vmov	s15, r3
 800a07e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a082:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a086:	4b7b      	ldr	r3, [pc, #492]	; (800a274 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a088:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a08a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a08e:	ee07 3a90 	vmov	s15, r3
 800a092:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a096:	ed97 6a03 	vldr	s12, [r7, #12]
 800a09a:	eddf 5a78 	vldr	s11, [pc, #480]	; 800a27c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a09e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a0a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a0a6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a0aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a0ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a0b2:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800a0b6:	e087      	b.n	800a1c8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800a0b8:	697b      	ldr	r3, [r7, #20]
 800a0ba:	ee07 3a90 	vmov	s15, r3
 800a0be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a0c2:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800a280 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800a0c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a0ca:	4b6a      	ldr	r3, [pc, #424]	; (800a274 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a0cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a0ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a0d2:	ee07 3a90 	vmov	s15, r3
 800a0d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a0da:	ed97 6a03 	vldr	s12, [r7, #12]
 800a0de:	eddf 5a67 	vldr	s11, [pc, #412]	; 800a27c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a0e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a0e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a0ea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a0ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a0f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a0f6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a0fa:	e065      	b.n	800a1c8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800a0fc:	697b      	ldr	r3, [r7, #20]
 800a0fe:	ee07 3a90 	vmov	s15, r3
 800a102:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a106:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800a284 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800a10a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a10e:	4b59      	ldr	r3, [pc, #356]	; (800a274 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a110:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a112:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a116:	ee07 3a90 	vmov	s15, r3
 800a11a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a11e:	ed97 6a03 	vldr	s12, [r7, #12]
 800a122:	eddf 5a56 	vldr	s11, [pc, #344]	; 800a27c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a126:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a12a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a12e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a132:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a136:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a13a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a13e:	e043      	b.n	800a1c8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800a140:	697b      	ldr	r3, [r7, #20]
 800a142:	ee07 3a90 	vmov	s15, r3
 800a146:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a14a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800a288 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800a14e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a152:	4b48      	ldr	r3, [pc, #288]	; (800a274 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a154:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a156:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a15a:	ee07 3a90 	vmov	s15, r3
 800a15e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a162:	ed97 6a03 	vldr	s12, [r7, #12]
 800a166:	eddf 5a45 	vldr	s11, [pc, #276]	; 800a27c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a16a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a16e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a172:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a176:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a17a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a17e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a182:	e021      	b.n	800a1c8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800a184:	697b      	ldr	r3, [r7, #20]
 800a186:	ee07 3a90 	vmov	s15, r3
 800a18a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a18e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800a284 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800a192:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a196:	4b37      	ldr	r3, [pc, #220]	; (800a274 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a198:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a19a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a19e:	ee07 3a90 	vmov	s15, r3
 800a1a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a1a6:	ed97 6a03 	vldr	s12, [r7, #12]
 800a1aa:	eddf 5a34 	vldr	s11, [pc, #208]	; 800a27c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a1ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a1b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a1b6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a1ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a1be:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a1c2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a1c6:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 800a1c8:	4b2a      	ldr	r3, [pc, #168]	; (800a274 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a1ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a1cc:	0a5b      	lsrs	r3, r3, #9
 800a1ce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a1d2:	ee07 3a90 	vmov	s15, r3
 800a1d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a1da:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a1de:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a1e2:	edd7 6a07 	vldr	s13, [r7, #28]
 800a1e6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a1ea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a1ee:	ee17 2a90 	vmov	r2, s15
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 800a1f6:	4b1f      	ldr	r3, [pc, #124]	; (800a274 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a1f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a1fa:	0c1b      	lsrs	r3, r3, #16
 800a1fc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a200:	ee07 3a90 	vmov	s15, r3
 800a204:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a208:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a20c:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a210:	edd7 6a07 	vldr	s13, [r7, #28]
 800a214:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a218:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a21c:	ee17 2a90 	vmov	r2, s15
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 800a224:	4b13      	ldr	r3, [pc, #76]	; (800a274 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a226:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a228:	0e1b      	lsrs	r3, r3, #24
 800a22a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a22e:	ee07 3a90 	vmov	s15, r3
 800a232:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a236:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a23a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a23e:	edd7 6a07 	vldr	s13, [r7, #28]
 800a242:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a246:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a24a:	ee17 2a90 	vmov	r2, s15
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800a252:	e008      	b.n	800a266 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	2200      	movs	r2, #0
 800a258:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	2200      	movs	r2, #0
 800a25e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	2200      	movs	r2, #0
 800a264:	609a      	str	r2, [r3, #8]
}
 800a266:	bf00      	nop
 800a268:	3724      	adds	r7, #36	; 0x24
 800a26a:	46bd      	mov	sp, r7
 800a26c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a270:	4770      	bx	lr
 800a272:	bf00      	nop
 800a274:	58024400 	.word	0x58024400
 800a278:	03d09000 	.word	0x03d09000
 800a27c:	46000000 	.word	0x46000000
 800a280:	4c742400 	.word	0x4c742400
 800a284:	4a742400 	.word	0x4a742400
 800a288:	4bbebc20 	.word	0x4bbebc20

0800a28c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 800a28c:	b480      	push	{r7}
 800a28e:	b089      	sub	sp, #36	; 0x24
 800a290:	af00      	add	r7, sp, #0
 800a292:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a294:	4ba1      	ldr	r3, [pc, #644]	; (800a51c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a296:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a298:	f003 0303 	and.w	r3, r3, #3
 800a29c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800a29e:	4b9f      	ldr	r3, [pc, #636]	; (800a51c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a2a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a2a2:	0d1b      	lsrs	r3, r3, #20
 800a2a4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a2a8:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800a2aa:	4b9c      	ldr	r3, [pc, #624]	; (800a51c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a2ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a2ae:	0a1b      	lsrs	r3, r3, #8
 800a2b0:	f003 0301 	and.w	r3, r3, #1
 800a2b4:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 800a2b6:	4b99      	ldr	r3, [pc, #612]	; (800a51c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a2b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a2ba:	08db      	lsrs	r3, r3, #3
 800a2bc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a2c0:	693a      	ldr	r2, [r7, #16]
 800a2c2:	fb02 f303 	mul.w	r3, r2, r3
 800a2c6:	ee07 3a90 	vmov	s15, r3
 800a2ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a2ce:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800a2d2:	697b      	ldr	r3, [r7, #20]
 800a2d4:	2b00      	cmp	r3, #0
 800a2d6:	f000 8111 	beq.w	800a4fc <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800a2da:	69bb      	ldr	r3, [r7, #24]
 800a2dc:	2b02      	cmp	r3, #2
 800a2de:	f000 8083 	beq.w	800a3e8 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800a2e2:	69bb      	ldr	r3, [r7, #24]
 800a2e4:	2b02      	cmp	r3, #2
 800a2e6:	f200 80a1 	bhi.w	800a42c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800a2ea:	69bb      	ldr	r3, [r7, #24]
 800a2ec:	2b00      	cmp	r3, #0
 800a2ee:	d003      	beq.n	800a2f8 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800a2f0:	69bb      	ldr	r3, [r7, #24]
 800a2f2:	2b01      	cmp	r3, #1
 800a2f4:	d056      	beq.n	800a3a4 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800a2f6:	e099      	b.n	800a42c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a2f8:	4b88      	ldr	r3, [pc, #544]	; (800a51c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a2fa:	681b      	ldr	r3, [r3, #0]
 800a2fc:	f003 0320 	and.w	r3, r3, #32
 800a300:	2b00      	cmp	r3, #0
 800a302:	d02d      	beq.n	800a360 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800a304:	4b85      	ldr	r3, [pc, #532]	; (800a51c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a306:	681b      	ldr	r3, [r3, #0]
 800a308:	08db      	lsrs	r3, r3, #3
 800a30a:	f003 0303 	and.w	r3, r3, #3
 800a30e:	4a84      	ldr	r2, [pc, #528]	; (800a520 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800a310:	fa22 f303 	lsr.w	r3, r2, r3
 800a314:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800a316:	68bb      	ldr	r3, [r7, #8]
 800a318:	ee07 3a90 	vmov	s15, r3
 800a31c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a320:	697b      	ldr	r3, [r7, #20]
 800a322:	ee07 3a90 	vmov	s15, r3
 800a326:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a32a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a32e:	4b7b      	ldr	r3, [pc, #492]	; (800a51c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a330:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a332:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a336:	ee07 3a90 	vmov	s15, r3
 800a33a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a33e:	ed97 6a03 	vldr	s12, [r7, #12]
 800a342:	eddf 5a78 	vldr	s11, [pc, #480]	; 800a524 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a346:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a34a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a34e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a352:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a356:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a35a:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800a35e:	e087      	b.n	800a470 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800a360:	697b      	ldr	r3, [r7, #20]
 800a362:	ee07 3a90 	vmov	s15, r3
 800a366:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a36a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800a528 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800a36e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a372:	4b6a      	ldr	r3, [pc, #424]	; (800a51c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a374:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a376:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a37a:	ee07 3a90 	vmov	s15, r3
 800a37e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a382:	ed97 6a03 	vldr	s12, [r7, #12]
 800a386:	eddf 5a67 	vldr	s11, [pc, #412]	; 800a524 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a38a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a38e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a392:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a396:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a39a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a39e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a3a2:	e065      	b.n	800a470 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800a3a4:	697b      	ldr	r3, [r7, #20]
 800a3a6:	ee07 3a90 	vmov	s15, r3
 800a3aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a3ae:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800a52c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800a3b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a3b6:	4b59      	ldr	r3, [pc, #356]	; (800a51c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a3b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a3ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a3be:	ee07 3a90 	vmov	s15, r3
 800a3c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a3c6:	ed97 6a03 	vldr	s12, [r7, #12]
 800a3ca:	eddf 5a56 	vldr	s11, [pc, #344]	; 800a524 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a3ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a3d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a3d6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a3da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a3de:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a3e2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a3e6:	e043      	b.n	800a470 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800a3e8:	697b      	ldr	r3, [r7, #20]
 800a3ea:	ee07 3a90 	vmov	s15, r3
 800a3ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a3f2:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800a530 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800a3f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a3fa:	4b48      	ldr	r3, [pc, #288]	; (800a51c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a3fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a3fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a402:	ee07 3a90 	vmov	s15, r3
 800a406:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a40a:	ed97 6a03 	vldr	s12, [r7, #12]
 800a40e:	eddf 5a45 	vldr	s11, [pc, #276]	; 800a524 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a412:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a416:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a41a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a41e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a422:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a426:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a42a:	e021      	b.n	800a470 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800a42c:	697b      	ldr	r3, [r7, #20]
 800a42e:	ee07 3a90 	vmov	s15, r3
 800a432:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a436:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800a52c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800a43a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a43e:	4b37      	ldr	r3, [pc, #220]	; (800a51c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a440:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a442:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a446:	ee07 3a90 	vmov	s15, r3
 800a44a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a44e:	ed97 6a03 	vldr	s12, [r7, #12]
 800a452:	eddf 5a34 	vldr	s11, [pc, #208]	; 800a524 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a456:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a45a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a45e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a462:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a466:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a46a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a46e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 800a470:	4b2a      	ldr	r3, [pc, #168]	; (800a51c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a472:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a474:	0a5b      	lsrs	r3, r3, #9
 800a476:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a47a:	ee07 3a90 	vmov	s15, r3
 800a47e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a482:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a486:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a48a:	edd7 6a07 	vldr	s13, [r7, #28]
 800a48e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a492:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a496:	ee17 2a90 	vmov	r2, s15
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 800a49e:	4b1f      	ldr	r3, [pc, #124]	; (800a51c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a4a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a4a2:	0c1b      	lsrs	r3, r3, #16
 800a4a4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a4a8:	ee07 3a90 	vmov	s15, r3
 800a4ac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a4b0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a4b4:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a4b8:	edd7 6a07 	vldr	s13, [r7, #28]
 800a4bc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a4c0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a4c4:	ee17 2a90 	vmov	r2, s15
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 800a4cc:	4b13      	ldr	r3, [pc, #76]	; (800a51c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a4ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a4d0:	0e1b      	lsrs	r3, r3, #24
 800a4d2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a4d6:	ee07 3a90 	vmov	s15, r3
 800a4da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a4de:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a4e2:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a4e6:	edd7 6a07 	vldr	s13, [r7, #28]
 800a4ea:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a4ee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a4f2:	ee17 2a90 	vmov	r2, s15
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800a4fa:	e008      	b.n	800a50e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	2200      	movs	r2, #0
 800a500:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	2200      	movs	r2, #0
 800a506:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	2200      	movs	r2, #0
 800a50c:	609a      	str	r2, [r3, #8]
}
 800a50e:	bf00      	nop
 800a510:	3724      	adds	r7, #36	; 0x24
 800a512:	46bd      	mov	sp, r7
 800a514:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a518:	4770      	bx	lr
 800a51a:	bf00      	nop
 800a51c:	58024400 	.word	0x58024400
 800a520:	03d09000 	.word	0x03d09000
 800a524:	46000000 	.word	0x46000000
 800a528:	4c742400 	.word	0x4c742400
 800a52c:	4a742400 	.word	0x4a742400
 800a530:	4bbebc20 	.word	0x4bbebc20

0800a534 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800a534:	b580      	push	{r7, lr}
 800a536:	b084      	sub	sp, #16
 800a538:	af00      	add	r7, sp, #0
 800a53a:	6078      	str	r0, [r7, #4]
 800a53c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800a53e:	2300      	movs	r3, #0
 800a540:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800a542:	4b53      	ldr	r3, [pc, #332]	; (800a690 <RCCEx_PLL2_Config+0x15c>)
 800a544:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a546:	f003 0303 	and.w	r3, r3, #3
 800a54a:	2b03      	cmp	r3, #3
 800a54c:	d101      	bne.n	800a552 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800a54e:	2301      	movs	r3, #1
 800a550:	e099      	b.n	800a686 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800a552:	4b4f      	ldr	r3, [pc, #316]	; (800a690 <RCCEx_PLL2_Config+0x15c>)
 800a554:	681b      	ldr	r3, [r3, #0]
 800a556:	4a4e      	ldr	r2, [pc, #312]	; (800a690 <RCCEx_PLL2_Config+0x15c>)
 800a558:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800a55c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a55e:	f7fc fd13 	bl	8006f88 <HAL_GetTick>
 800a562:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800a564:	e008      	b.n	800a578 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800a566:	f7fc fd0f 	bl	8006f88 <HAL_GetTick>
 800a56a:	4602      	mov	r2, r0
 800a56c:	68bb      	ldr	r3, [r7, #8]
 800a56e:	1ad3      	subs	r3, r2, r3
 800a570:	2b02      	cmp	r3, #2
 800a572:	d901      	bls.n	800a578 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800a574:	2303      	movs	r3, #3
 800a576:	e086      	b.n	800a686 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800a578:	4b45      	ldr	r3, [pc, #276]	; (800a690 <RCCEx_PLL2_Config+0x15c>)
 800a57a:	681b      	ldr	r3, [r3, #0]
 800a57c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a580:	2b00      	cmp	r3, #0
 800a582:	d1f0      	bne.n	800a566 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800a584:	4b42      	ldr	r3, [pc, #264]	; (800a690 <RCCEx_PLL2_Config+0x15c>)
 800a586:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a588:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	681b      	ldr	r3, [r3, #0]
 800a590:	031b      	lsls	r3, r3, #12
 800a592:	493f      	ldr	r1, [pc, #252]	; (800a690 <RCCEx_PLL2_Config+0x15c>)
 800a594:	4313      	orrs	r3, r2
 800a596:	628b      	str	r3, [r1, #40]	; 0x28
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	685b      	ldr	r3, [r3, #4]
 800a59c:	3b01      	subs	r3, #1
 800a59e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	689b      	ldr	r3, [r3, #8]
 800a5a6:	3b01      	subs	r3, #1
 800a5a8:	025b      	lsls	r3, r3, #9
 800a5aa:	b29b      	uxth	r3, r3
 800a5ac:	431a      	orrs	r2, r3
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	68db      	ldr	r3, [r3, #12]
 800a5b2:	3b01      	subs	r3, #1
 800a5b4:	041b      	lsls	r3, r3, #16
 800a5b6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800a5ba:	431a      	orrs	r2, r3
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	691b      	ldr	r3, [r3, #16]
 800a5c0:	3b01      	subs	r3, #1
 800a5c2:	061b      	lsls	r3, r3, #24
 800a5c4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800a5c8:	4931      	ldr	r1, [pc, #196]	; (800a690 <RCCEx_PLL2_Config+0x15c>)
 800a5ca:	4313      	orrs	r3, r2
 800a5cc:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800a5ce:	4b30      	ldr	r3, [pc, #192]	; (800a690 <RCCEx_PLL2_Config+0x15c>)
 800a5d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a5d2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	695b      	ldr	r3, [r3, #20]
 800a5da:	492d      	ldr	r1, [pc, #180]	; (800a690 <RCCEx_PLL2_Config+0x15c>)
 800a5dc:	4313      	orrs	r3, r2
 800a5de:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800a5e0:	4b2b      	ldr	r3, [pc, #172]	; (800a690 <RCCEx_PLL2_Config+0x15c>)
 800a5e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a5e4:	f023 0220 	bic.w	r2, r3, #32
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	699b      	ldr	r3, [r3, #24]
 800a5ec:	4928      	ldr	r1, [pc, #160]	; (800a690 <RCCEx_PLL2_Config+0x15c>)
 800a5ee:	4313      	orrs	r3, r2
 800a5f0:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800a5f2:	4b27      	ldr	r3, [pc, #156]	; (800a690 <RCCEx_PLL2_Config+0x15c>)
 800a5f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a5f6:	4a26      	ldr	r2, [pc, #152]	; (800a690 <RCCEx_PLL2_Config+0x15c>)
 800a5f8:	f023 0310 	bic.w	r3, r3, #16
 800a5fc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800a5fe:	4b24      	ldr	r3, [pc, #144]	; (800a690 <RCCEx_PLL2_Config+0x15c>)
 800a600:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a602:	4b24      	ldr	r3, [pc, #144]	; (800a694 <RCCEx_PLL2_Config+0x160>)
 800a604:	4013      	ands	r3, r2
 800a606:	687a      	ldr	r2, [r7, #4]
 800a608:	69d2      	ldr	r2, [r2, #28]
 800a60a:	00d2      	lsls	r2, r2, #3
 800a60c:	4920      	ldr	r1, [pc, #128]	; (800a690 <RCCEx_PLL2_Config+0x15c>)
 800a60e:	4313      	orrs	r3, r2
 800a610:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800a612:	4b1f      	ldr	r3, [pc, #124]	; (800a690 <RCCEx_PLL2_Config+0x15c>)
 800a614:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a616:	4a1e      	ldr	r2, [pc, #120]	; (800a690 <RCCEx_PLL2_Config+0x15c>)
 800a618:	f043 0310 	orr.w	r3, r3, #16
 800a61c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800a61e:	683b      	ldr	r3, [r7, #0]
 800a620:	2b00      	cmp	r3, #0
 800a622:	d106      	bne.n	800a632 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800a624:	4b1a      	ldr	r3, [pc, #104]	; (800a690 <RCCEx_PLL2_Config+0x15c>)
 800a626:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a628:	4a19      	ldr	r2, [pc, #100]	; (800a690 <RCCEx_PLL2_Config+0x15c>)
 800a62a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a62e:	62d3      	str	r3, [r2, #44]	; 0x2c
 800a630:	e00f      	b.n	800a652 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800a632:	683b      	ldr	r3, [r7, #0]
 800a634:	2b01      	cmp	r3, #1
 800a636:	d106      	bne.n	800a646 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800a638:	4b15      	ldr	r3, [pc, #84]	; (800a690 <RCCEx_PLL2_Config+0x15c>)
 800a63a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a63c:	4a14      	ldr	r2, [pc, #80]	; (800a690 <RCCEx_PLL2_Config+0x15c>)
 800a63e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a642:	62d3      	str	r3, [r2, #44]	; 0x2c
 800a644:	e005      	b.n	800a652 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800a646:	4b12      	ldr	r3, [pc, #72]	; (800a690 <RCCEx_PLL2_Config+0x15c>)
 800a648:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a64a:	4a11      	ldr	r2, [pc, #68]	; (800a690 <RCCEx_PLL2_Config+0x15c>)
 800a64c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800a650:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800a652:	4b0f      	ldr	r3, [pc, #60]	; (800a690 <RCCEx_PLL2_Config+0x15c>)
 800a654:	681b      	ldr	r3, [r3, #0]
 800a656:	4a0e      	ldr	r2, [pc, #56]	; (800a690 <RCCEx_PLL2_Config+0x15c>)
 800a658:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800a65c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a65e:	f7fc fc93 	bl	8006f88 <HAL_GetTick>
 800a662:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800a664:	e008      	b.n	800a678 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800a666:	f7fc fc8f 	bl	8006f88 <HAL_GetTick>
 800a66a:	4602      	mov	r2, r0
 800a66c:	68bb      	ldr	r3, [r7, #8]
 800a66e:	1ad3      	subs	r3, r2, r3
 800a670:	2b02      	cmp	r3, #2
 800a672:	d901      	bls.n	800a678 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800a674:	2303      	movs	r3, #3
 800a676:	e006      	b.n	800a686 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800a678:	4b05      	ldr	r3, [pc, #20]	; (800a690 <RCCEx_PLL2_Config+0x15c>)
 800a67a:	681b      	ldr	r3, [r3, #0]
 800a67c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a680:	2b00      	cmp	r3, #0
 800a682:	d0f0      	beq.n	800a666 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800a684:	7bfb      	ldrb	r3, [r7, #15]
}
 800a686:	4618      	mov	r0, r3
 800a688:	3710      	adds	r7, #16
 800a68a:	46bd      	mov	sp, r7
 800a68c:	bd80      	pop	{r7, pc}
 800a68e:	bf00      	nop
 800a690:	58024400 	.word	0x58024400
 800a694:	ffff0007 	.word	0xffff0007

0800a698 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800a698:	b580      	push	{r7, lr}
 800a69a:	b084      	sub	sp, #16
 800a69c:	af00      	add	r7, sp, #0
 800a69e:	6078      	str	r0, [r7, #4]
 800a6a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800a6a2:	2300      	movs	r3, #0
 800a6a4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800a6a6:	4b53      	ldr	r3, [pc, #332]	; (800a7f4 <RCCEx_PLL3_Config+0x15c>)
 800a6a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a6aa:	f003 0303 	and.w	r3, r3, #3
 800a6ae:	2b03      	cmp	r3, #3
 800a6b0:	d101      	bne.n	800a6b6 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800a6b2:	2301      	movs	r3, #1
 800a6b4:	e099      	b.n	800a7ea <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800a6b6:	4b4f      	ldr	r3, [pc, #316]	; (800a7f4 <RCCEx_PLL3_Config+0x15c>)
 800a6b8:	681b      	ldr	r3, [r3, #0]
 800a6ba:	4a4e      	ldr	r2, [pc, #312]	; (800a7f4 <RCCEx_PLL3_Config+0x15c>)
 800a6bc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a6c0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a6c2:	f7fc fc61 	bl	8006f88 <HAL_GetTick>
 800a6c6:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800a6c8:	e008      	b.n	800a6dc <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800a6ca:	f7fc fc5d 	bl	8006f88 <HAL_GetTick>
 800a6ce:	4602      	mov	r2, r0
 800a6d0:	68bb      	ldr	r3, [r7, #8]
 800a6d2:	1ad3      	subs	r3, r2, r3
 800a6d4:	2b02      	cmp	r3, #2
 800a6d6:	d901      	bls.n	800a6dc <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800a6d8:	2303      	movs	r3, #3
 800a6da:	e086      	b.n	800a7ea <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800a6dc:	4b45      	ldr	r3, [pc, #276]	; (800a7f4 <RCCEx_PLL3_Config+0x15c>)
 800a6de:	681b      	ldr	r3, [r3, #0]
 800a6e0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a6e4:	2b00      	cmp	r3, #0
 800a6e6:	d1f0      	bne.n	800a6ca <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800a6e8:	4b42      	ldr	r3, [pc, #264]	; (800a7f4 <RCCEx_PLL3_Config+0x15c>)
 800a6ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a6ec:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	681b      	ldr	r3, [r3, #0]
 800a6f4:	051b      	lsls	r3, r3, #20
 800a6f6:	493f      	ldr	r1, [pc, #252]	; (800a7f4 <RCCEx_PLL3_Config+0x15c>)
 800a6f8:	4313      	orrs	r3, r2
 800a6fa:	628b      	str	r3, [r1, #40]	; 0x28
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	685b      	ldr	r3, [r3, #4]
 800a700:	3b01      	subs	r3, #1
 800a702:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	689b      	ldr	r3, [r3, #8]
 800a70a:	3b01      	subs	r3, #1
 800a70c:	025b      	lsls	r3, r3, #9
 800a70e:	b29b      	uxth	r3, r3
 800a710:	431a      	orrs	r2, r3
 800a712:	687b      	ldr	r3, [r7, #4]
 800a714:	68db      	ldr	r3, [r3, #12]
 800a716:	3b01      	subs	r3, #1
 800a718:	041b      	lsls	r3, r3, #16
 800a71a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800a71e:	431a      	orrs	r2, r3
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	691b      	ldr	r3, [r3, #16]
 800a724:	3b01      	subs	r3, #1
 800a726:	061b      	lsls	r3, r3, #24
 800a728:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800a72c:	4931      	ldr	r1, [pc, #196]	; (800a7f4 <RCCEx_PLL3_Config+0x15c>)
 800a72e:	4313      	orrs	r3, r2
 800a730:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800a732:	4b30      	ldr	r3, [pc, #192]	; (800a7f4 <RCCEx_PLL3_Config+0x15c>)
 800a734:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a736:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800a73a:	687b      	ldr	r3, [r7, #4]
 800a73c:	695b      	ldr	r3, [r3, #20]
 800a73e:	492d      	ldr	r1, [pc, #180]	; (800a7f4 <RCCEx_PLL3_Config+0x15c>)
 800a740:	4313      	orrs	r3, r2
 800a742:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800a744:	4b2b      	ldr	r3, [pc, #172]	; (800a7f4 <RCCEx_PLL3_Config+0x15c>)
 800a746:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a748:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	699b      	ldr	r3, [r3, #24]
 800a750:	4928      	ldr	r1, [pc, #160]	; (800a7f4 <RCCEx_PLL3_Config+0x15c>)
 800a752:	4313      	orrs	r3, r2
 800a754:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800a756:	4b27      	ldr	r3, [pc, #156]	; (800a7f4 <RCCEx_PLL3_Config+0x15c>)
 800a758:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a75a:	4a26      	ldr	r2, [pc, #152]	; (800a7f4 <RCCEx_PLL3_Config+0x15c>)
 800a75c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a760:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800a762:	4b24      	ldr	r3, [pc, #144]	; (800a7f4 <RCCEx_PLL3_Config+0x15c>)
 800a764:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a766:	4b24      	ldr	r3, [pc, #144]	; (800a7f8 <RCCEx_PLL3_Config+0x160>)
 800a768:	4013      	ands	r3, r2
 800a76a:	687a      	ldr	r2, [r7, #4]
 800a76c:	69d2      	ldr	r2, [r2, #28]
 800a76e:	00d2      	lsls	r2, r2, #3
 800a770:	4920      	ldr	r1, [pc, #128]	; (800a7f4 <RCCEx_PLL3_Config+0x15c>)
 800a772:	4313      	orrs	r3, r2
 800a774:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800a776:	4b1f      	ldr	r3, [pc, #124]	; (800a7f4 <RCCEx_PLL3_Config+0x15c>)
 800a778:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a77a:	4a1e      	ldr	r2, [pc, #120]	; (800a7f4 <RCCEx_PLL3_Config+0x15c>)
 800a77c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a780:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800a782:	683b      	ldr	r3, [r7, #0]
 800a784:	2b00      	cmp	r3, #0
 800a786:	d106      	bne.n	800a796 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800a788:	4b1a      	ldr	r3, [pc, #104]	; (800a7f4 <RCCEx_PLL3_Config+0x15c>)
 800a78a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a78c:	4a19      	ldr	r2, [pc, #100]	; (800a7f4 <RCCEx_PLL3_Config+0x15c>)
 800a78e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800a792:	62d3      	str	r3, [r2, #44]	; 0x2c
 800a794:	e00f      	b.n	800a7b6 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800a796:	683b      	ldr	r3, [r7, #0]
 800a798:	2b01      	cmp	r3, #1
 800a79a:	d106      	bne.n	800a7aa <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800a79c:	4b15      	ldr	r3, [pc, #84]	; (800a7f4 <RCCEx_PLL3_Config+0x15c>)
 800a79e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a7a0:	4a14      	ldr	r2, [pc, #80]	; (800a7f4 <RCCEx_PLL3_Config+0x15c>)
 800a7a2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800a7a6:	62d3      	str	r3, [r2, #44]	; 0x2c
 800a7a8:	e005      	b.n	800a7b6 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800a7aa:	4b12      	ldr	r3, [pc, #72]	; (800a7f4 <RCCEx_PLL3_Config+0x15c>)
 800a7ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a7ae:	4a11      	ldr	r2, [pc, #68]	; (800a7f4 <RCCEx_PLL3_Config+0x15c>)
 800a7b0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800a7b4:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800a7b6:	4b0f      	ldr	r3, [pc, #60]	; (800a7f4 <RCCEx_PLL3_Config+0x15c>)
 800a7b8:	681b      	ldr	r3, [r3, #0]
 800a7ba:	4a0e      	ldr	r2, [pc, #56]	; (800a7f4 <RCCEx_PLL3_Config+0x15c>)
 800a7bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a7c0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a7c2:	f7fc fbe1 	bl	8006f88 <HAL_GetTick>
 800a7c6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800a7c8:	e008      	b.n	800a7dc <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800a7ca:	f7fc fbdd 	bl	8006f88 <HAL_GetTick>
 800a7ce:	4602      	mov	r2, r0
 800a7d0:	68bb      	ldr	r3, [r7, #8]
 800a7d2:	1ad3      	subs	r3, r2, r3
 800a7d4:	2b02      	cmp	r3, #2
 800a7d6:	d901      	bls.n	800a7dc <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800a7d8:	2303      	movs	r3, #3
 800a7da:	e006      	b.n	800a7ea <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800a7dc:	4b05      	ldr	r3, [pc, #20]	; (800a7f4 <RCCEx_PLL3_Config+0x15c>)
 800a7de:	681b      	ldr	r3, [r3, #0]
 800a7e0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a7e4:	2b00      	cmp	r3, #0
 800a7e6:	d0f0      	beq.n	800a7ca <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800a7e8:	7bfb      	ldrb	r3, [r7, #15]
}
 800a7ea:	4618      	mov	r0, r3
 800a7ec:	3710      	adds	r7, #16
 800a7ee:	46bd      	mov	sp, r7
 800a7f0:	bd80      	pop	{r7, pc}
 800a7f2:	bf00      	nop
 800a7f4:	58024400 	.word	0x58024400
 800a7f8:	ffff0007 	.word	0xffff0007

0800a7fc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a7fc:	b580      	push	{r7, lr}
 800a7fe:	b082      	sub	sp, #8
 800a800:	af00      	add	r7, sp, #0
 800a802:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	2b00      	cmp	r3, #0
 800a808:	d101      	bne.n	800a80e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a80a:	2301      	movs	r3, #1
 800a80c:	e049      	b.n	800a8a2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a814:	b2db      	uxtb	r3, r3
 800a816:	2b00      	cmp	r3, #0
 800a818:	d106      	bne.n	800a828 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	2200      	movs	r2, #0
 800a81e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a822:	6878      	ldr	r0, [r7, #4]
 800a824:	f7fa f82a 	bl	800487c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	2202      	movs	r2, #2
 800a82c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	681a      	ldr	r2, [r3, #0]
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	3304      	adds	r3, #4
 800a838:	4619      	mov	r1, r3
 800a83a:	4610      	mov	r0, r2
 800a83c:	f001 f9d0 	bl	800bbe0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	2201      	movs	r2, #1
 800a844:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	2201      	movs	r2, #1
 800a84c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	2201      	movs	r2, #1
 800a854:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	2201      	movs	r2, #1
 800a85c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	2201      	movs	r2, #1
 800a864:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	2201      	movs	r2, #1
 800a86c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a870:	687b      	ldr	r3, [r7, #4]
 800a872:	2201      	movs	r2, #1
 800a874:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	2201      	movs	r2, #1
 800a87c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	2201      	movs	r2, #1
 800a884:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	2201      	movs	r2, #1
 800a88c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	2201      	movs	r2, #1
 800a894:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	2201      	movs	r2, #1
 800a89c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a8a0:	2300      	movs	r3, #0
}
 800a8a2:	4618      	mov	r0, r3
 800a8a4:	3708      	adds	r7, #8
 800a8a6:	46bd      	mov	sp, r7
 800a8a8:	bd80      	pop	{r7, pc}
	...

0800a8ac <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800a8ac:	b480      	push	{r7}
 800a8ae:	b085      	sub	sp, #20
 800a8b0:	af00      	add	r7, sp, #0
 800a8b2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a8ba:	b2db      	uxtb	r3, r3
 800a8bc:	2b01      	cmp	r3, #1
 800a8be:	d001      	beq.n	800a8c4 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800a8c0:	2301      	movs	r3, #1
 800a8c2:	e04c      	b.n	800a95e <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	2202      	movs	r2, #2
 800a8c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	681b      	ldr	r3, [r3, #0]
 800a8d0:	4a26      	ldr	r2, [pc, #152]	; (800a96c <HAL_TIM_Base_Start+0xc0>)
 800a8d2:	4293      	cmp	r3, r2
 800a8d4:	d022      	beq.n	800a91c <HAL_TIM_Base_Start+0x70>
 800a8d6:	687b      	ldr	r3, [r7, #4]
 800a8d8:	681b      	ldr	r3, [r3, #0]
 800a8da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a8de:	d01d      	beq.n	800a91c <HAL_TIM_Base_Start+0x70>
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	681b      	ldr	r3, [r3, #0]
 800a8e4:	4a22      	ldr	r2, [pc, #136]	; (800a970 <HAL_TIM_Base_Start+0xc4>)
 800a8e6:	4293      	cmp	r3, r2
 800a8e8:	d018      	beq.n	800a91c <HAL_TIM_Base_Start+0x70>
 800a8ea:	687b      	ldr	r3, [r7, #4]
 800a8ec:	681b      	ldr	r3, [r3, #0]
 800a8ee:	4a21      	ldr	r2, [pc, #132]	; (800a974 <HAL_TIM_Base_Start+0xc8>)
 800a8f0:	4293      	cmp	r3, r2
 800a8f2:	d013      	beq.n	800a91c <HAL_TIM_Base_Start+0x70>
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	681b      	ldr	r3, [r3, #0]
 800a8f8:	4a1f      	ldr	r2, [pc, #124]	; (800a978 <HAL_TIM_Base_Start+0xcc>)
 800a8fa:	4293      	cmp	r3, r2
 800a8fc:	d00e      	beq.n	800a91c <HAL_TIM_Base_Start+0x70>
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	681b      	ldr	r3, [r3, #0]
 800a902:	4a1e      	ldr	r2, [pc, #120]	; (800a97c <HAL_TIM_Base_Start+0xd0>)
 800a904:	4293      	cmp	r3, r2
 800a906:	d009      	beq.n	800a91c <HAL_TIM_Base_Start+0x70>
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	681b      	ldr	r3, [r3, #0]
 800a90c:	4a1c      	ldr	r2, [pc, #112]	; (800a980 <HAL_TIM_Base_Start+0xd4>)
 800a90e:	4293      	cmp	r3, r2
 800a910:	d004      	beq.n	800a91c <HAL_TIM_Base_Start+0x70>
 800a912:	687b      	ldr	r3, [r7, #4]
 800a914:	681b      	ldr	r3, [r3, #0]
 800a916:	4a1b      	ldr	r2, [pc, #108]	; (800a984 <HAL_TIM_Base_Start+0xd8>)
 800a918:	4293      	cmp	r3, r2
 800a91a:	d115      	bne.n	800a948 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	681b      	ldr	r3, [r3, #0]
 800a920:	689a      	ldr	r2, [r3, #8]
 800a922:	4b19      	ldr	r3, [pc, #100]	; (800a988 <HAL_TIM_Base_Start+0xdc>)
 800a924:	4013      	ands	r3, r2
 800a926:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a928:	68fb      	ldr	r3, [r7, #12]
 800a92a:	2b06      	cmp	r3, #6
 800a92c:	d015      	beq.n	800a95a <HAL_TIM_Base_Start+0xae>
 800a92e:	68fb      	ldr	r3, [r7, #12]
 800a930:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a934:	d011      	beq.n	800a95a <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	681b      	ldr	r3, [r3, #0]
 800a93a:	681a      	ldr	r2, [r3, #0]
 800a93c:	687b      	ldr	r3, [r7, #4]
 800a93e:	681b      	ldr	r3, [r3, #0]
 800a940:	f042 0201 	orr.w	r2, r2, #1
 800a944:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a946:	e008      	b.n	800a95a <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	681b      	ldr	r3, [r3, #0]
 800a94c:	681a      	ldr	r2, [r3, #0]
 800a94e:	687b      	ldr	r3, [r7, #4]
 800a950:	681b      	ldr	r3, [r3, #0]
 800a952:	f042 0201 	orr.w	r2, r2, #1
 800a956:	601a      	str	r2, [r3, #0]
 800a958:	e000      	b.n	800a95c <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a95a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800a95c:	2300      	movs	r3, #0
}
 800a95e:	4618      	mov	r0, r3
 800a960:	3714      	adds	r7, #20
 800a962:	46bd      	mov	sp, r7
 800a964:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a968:	4770      	bx	lr
 800a96a:	bf00      	nop
 800a96c:	40010000 	.word	0x40010000
 800a970:	40000400 	.word	0x40000400
 800a974:	40000800 	.word	0x40000800
 800a978:	40000c00 	.word	0x40000c00
 800a97c:	40010400 	.word	0x40010400
 800a980:	40001800 	.word	0x40001800
 800a984:	40014000 	.word	0x40014000
 800a988:	00010007 	.word	0x00010007

0800a98c <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 800a98c:	b480      	push	{r7}
 800a98e:	b083      	sub	sp, #12
 800a990:	af00      	add	r7, sp, #0
 800a992:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800a994:	687b      	ldr	r3, [r7, #4]
 800a996:	681b      	ldr	r3, [r3, #0]
 800a998:	6a1a      	ldr	r2, [r3, #32]
 800a99a:	f241 1311 	movw	r3, #4369	; 0x1111
 800a99e:	4013      	ands	r3, r2
 800a9a0:	2b00      	cmp	r3, #0
 800a9a2:	d10f      	bne.n	800a9c4 <HAL_TIM_Base_Stop+0x38>
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	681b      	ldr	r3, [r3, #0]
 800a9a8:	6a1a      	ldr	r2, [r3, #32]
 800a9aa:	f240 4344 	movw	r3, #1092	; 0x444
 800a9ae:	4013      	ands	r3, r2
 800a9b0:	2b00      	cmp	r3, #0
 800a9b2:	d107      	bne.n	800a9c4 <HAL_TIM_Base_Stop+0x38>
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	681b      	ldr	r3, [r3, #0]
 800a9b8:	681a      	ldr	r2, [r3, #0]
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	681b      	ldr	r3, [r3, #0]
 800a9be:	f022 0201 	bic.w	r2, r2, #1
 800a9c2:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	2201      	movs	r2, #1
 800a9c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800a9cc:	2300      	movs	r3, #0
}
 800a9ce:	4618      	mov	r0, r3
 800a9d0:	370c      	adds	r7, #12
 800a9d2:	46bd      	mov	sp, r7
 800a9d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9d8:	4770      	bx	lr
	...

0800a9dc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800a9dc:	b480      	push	{r7}
 800a9de:	b085      	sub	sp, #20
 800a9e0:	af00      	add	r7, sp, #0
 800a9e2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a9ea:	b2db      	uxtb	r3, r3
 800a9ec:	2b01      	cmp	r3, #1
 800a9ee:	d001      	beq.n	800a9f4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800a9f0:	2301      	movs	r3, #1
 800a9f2:	e054      	b.n	800aa9e <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	2202      	movs	r2, #2
 800a9f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	681b      	ldr	r3, [r3, #0]
 800aa00:	68da      	ldr	r2, [r3, #12]
 800aa02:	687b      	ldr	r3, [r7, #4]
 800aa04:	681b      	ldr	r3, [r3, #0]
 800aa06:	f042 0201 	orr.w	r2, r2, #1
 800aa0a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	681b      	ldr	r3, [r3, #0]
 800aa10:	4a26      	ldr	r2, [pc, #152]	; (800aaac <HAL_TIM_Base_Start_IT+0xd0>)
 800aa12:	4293      	cmp	r3, r2
 800aa14:	d022      	beq.n	800aa5c <HAL_TIM_Base_Start_IT+0x80>
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	681b      	ldr	r3, [r3, #0]
 800aa1a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800aa1e:	d01d      	beq.n	800aa5c <HAL_TIM_Base_Start_IT+0x80>
 800aa20:	687b      	ldr	r3, [r7, #4]
 800aa22:	681b      	ldr	r3, [r3, #0]
 800aa24:	4a22      	ldr	r2, [pc, #136]	; (800aab0 <HAL_TIM_Base_Start_IT+0xd4>)
 800aa26:	4293      	cmp	r3, r2
 800aa28:	d018      	beq.n	800aa5c <HAL_TIM_Base_Start_IT+0x80>
 800aa2a:	687b      	ldr	r3, [r7, #4]
 800aa2c:	681b      	ldr	r3, [r3, #0]
 800aa2e:	4a21      	ldr	r2, [pc, #132]	; (800aab4 <HAL_TIM_Base_Start_IT+0xd8>)
 800aa30:	4293      	cmp	r3, r2
 800aa32:	d013      	beq.n	800aa5c <HAL_TIM_Base_Start_IT+0x80>
 800aa34:	687b      	ldr	r3, [r7, #4]
 800aa36:	681b      	ldr	r3, [r3, #0]
 800aa38:	4a1f      	ldr	r2, [pc, #124]	; (800aab8 <HAL_TIM_Base_Start_IT+0xdc>)
 800aa3a:	4293      	cmp	r3, r2
 800aa3c:	d00e      	beq.n	800aa5c <HAL_TIM_Base_Start_IT+0x80>
 800aa3e:	687b      	ldr	r3, [r7, #4]
 800aa40:	681b      	ldr	r3, [r3, #0]
 800aa42:	4a1e      	ldr	r2, [pc, #120]	; (800aabc <HAL_TIM_Base_Start_IT+0xe0>)
 800aa44:	4293      	cmp	r3, r2
 800aa46:	d009      	beq.n	800aa5c <HAL_TIM_Base_Start_IT+0x80>
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	681b      	ldr	r3, [r3, #0]
 800aa4c:	4a1c      	ldr	r2, [pc, #112]	; (800aac0 <HAL_TIM_Base_Start_IT+0xe4>)
 800aa4e:	4293      	cmp	r3, r2
 800aa50:	d004      	beq.n	800aa5c <HAL_TIM_Base_Start_IT+0x80>
 800aa52:	687b      	ldr	r3, [r7, #4]
 800aa54:	681b      	ldr	r3, [r3, #0]
 800aa56:	4a1b      	ldr	r2, [pc, #108]	; (800aac4 <HAL_TIM_Base_Start_IT+0xe8>)
 800aa58:	4293      	cmp	r3, r2
 800aa5a:	d115      	bne.n	800aa88 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800aa5c:	687b      	ldr	r3, [r7, #4]
 800aa5e:	681b      	ldr	r3, [r3, #0]
 800aa60:	689a      	ldr	r2, [r3, #8]
 800aa62:	4b19      	ldr	r3, [pc, #100]	; (800aac8 <HAL_TIM_Base_Start_IT+0xec>)
 800aa64:	4013      	ands	r3, r2
 800aa66:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800aa68:	68fb      	ldr	r3, [r7, #12]
 800aa6a:	2b06      	cmp	r3, #6
 800aa6c:	d015      	beq.n	800aa9a <HAL_TIM_Base_Start_IT+0xbe>
 800aa6e:	68fb      	ldr	r3, [r7, #12]
 800aa70:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800aa74:	d011      	beq.n	800aa9a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800aa76:	687b      	ldr	r3, [r7, #4]
 800aa78:	681b      	ldr	r3, [r3, #0]
 800aa7a:	681a      	ldr	r2, [r3, #0]
 800aa7c:	687b      	ldr	r3, [r7, #4]
 800aa7e:	681b      	ldr	r3, [r3, #0]
 800aa80:	f042 0201 	orr.w	r2, r2, #1
 800aa84:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800aa86:	e008      	b.n	800aa9a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	681b      	ldr	r3, [r3, #0]
 800aa8c:	681a      	ldr	r2, [r3, #0]
 800aa8e:	687b      	ldr	r3, [r7, #4]
 800aa90:	681b      	ldr	r3, [r3, #0]
 800aa92:	f042 0201 	orr.w	r2, r2, #1
 800aa96:	601a      	str	r2, [r3, #0]
 800aa98:	e000      	b.n	800aa9c <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800aa9a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800aa9c:	2300      	movs	r3, #0
}
 800aa9e:	4618      	mov	r0, r3
 800aaa0:	3714      	adds	r7, #20
 800aaa2:	46bd      	mov	sp, r7
 800aaa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaa8:	4770      	bx	lr
 800aaaa:	bf00      	nop
 800aaac:	40010000 	.word	0x40010000
 800aab0:	40000400 	.word	0x40000400
 800aab4:	40000800 	.word	0x40000800
 800aab8:	40000c00 	.word	0x40000c00
 800aabc:	40010400 	.word	0x40010400
 800aac0:	40001800 	.word	0x40001800
 800aac4:	40014000 	.word	0x40014000
 800aac8:	00010007 	.word	0x00010007

0800aacc <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800aacc:	b480      	push	{r7}
 800aace:	b083      	sub	sp, #12
 800aad0:	af00      	add	r7, sp, #0
 800aad2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	681b      	ldr	r3, [r3, #0]
 800aad8:	68da      	ldr	r2, [r3, #12]
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	681b      	ldr	r3, [r3, #0]
 800aade:	f022 0201 	bic.w	r2, r2, #1
 800aae2:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	681b      	ldr	r3, [r3, #0]
 800aae8:	6a1a      	ldr	r2, [r3, #32]
 800aaea:	f241 1311 	movw	r3, #4369	; 0x1111
 800aaee:	4013      	ands	r3, r2
 800aaf0:	2b00      	cmp	r3, #0
 800aaf2:	d10f      	bne.n	800ab14 <HAL_TIM_Base_Stop_IT+0x48>
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	681b      	ldr	r3, [r3, #0]
 800aaf8:	6a1a      	ldr	r2, [r3, #32]
 800aafa:	f240 4344 	movw	r3, #1092	; 0x444
 800aafe:	4013      	ands	r3, r2
 800ab00:	2b00      	cmp	r3, #0
 800ab02:	d107      	bne.n	800ab14 <HAL_TIM_Base_Stop_IT+0x48>
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	681b      	ldr	r3, [r3, #0]
 800ab08:	681a      	ldr	r2, [r3, #0]
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	681b      	ldr	r3, [r3, #0]
 800ab0e:	f022 0201 	bic.w	r2, r2, #1
 800ab12:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	2201      	movs	r2, #1
 800ab18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800ab1c:	2300      	movs	r3, #0
}
 800ab1e:	4618      	mov	r0, r3
 800ab20:	370c      	adds	r7, #12
 800ab22:	46bd      	mov	sp, r7
 800ab24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab28:	4770      	bx	lr

0800ab2a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800ab2a:	b580      	push	{r7, lr}
 800ab2c:	b082      	sub	sp, #8
 800ab2e:	af00      	add	r7, sp, #0
 800ab30:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800ab32:	687b      	ldr	r3, [r7, #4]
 800ab34:	2b00      	cmp	r3, #0
 800ab36:	d101      	bne.n	800ab3c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800ab38:	2301      	movs	r3, #1
 800ab3a:	e049      	b.n	800abd0 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800ab3c:	687b      	ldr	r3, [r7, #4]
 800ab3e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ab42:	b2db      	uxtb	r3, r3
 800ab44:	2b00      	cmp	r3, #0
 800ab46:	d106      	bne.n	800ab56 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	2200      	movs	r2, #0
 800ab4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800ab50:	6878      	ldr	r0, [r7, #4]
 800ab52:	f000 f841 	bl	800abd8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ab56:	687b      	ldr	r3, [r7, #4]
 800ab58:	2202      	movs	r2, #2
 800ab5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800ab5e:	687b      	ldr	r3, [r7, #4]
 800ab60:	681a      	ldr	r2, [r3, #0]
 800ab62:	687b      	ldr	r3, [r7, #4]
 800ab64:	3304      	adds	r3, #4
 800ab66:	4619      	mov	r1, r3
 800ab68:	4610      	mov	r0, r2
 800ab6a:	f001 f839 	bl	800bbe0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800ab6e:	687b      	ldr	r3, [r7, #4]
 800ab70:	2201      	movs	r2, #1
 800ab72:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ab76:	687b      	ldr	r3, [r7, #4]
 800ab78:	2201      	movs	r2, #1
 800ab7a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800ab7e:	687b      	ldr	r3, [r7, #4]
 800ab80:	2201      	movs	r2, #1
 800ab82:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800ab86:	687b      	ldr	r3, [r7, #4]
 800ab88:	2201      	movs	r2, #1
 800ab8a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800ab8e:	687b      	ldr	r3, [r7, #4]
 800ab90:	2201      	movs	r2, #1
 800ab92:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800ab96:	687b      	ldr	r3, [r7, #4]
 800ab98:	2201      	movs	r2, #1
 800ab9a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800ab9e:	687b      	ldr	r3, [r7, #4]
 800aba0:	2201      	movs	r2, #1
 800aba2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800aba6:	687b      	ldr	r3, [r7, #4]
 800aba8:	2201      	movs	r2, #1
 800abaa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800abae:	687b      	ldr	r3, [r7, #4]
 800abb0:	2201      	movs	r2, #1
 800abb2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800abb6:	687b      	ldr	r3, [r7, #4]
 800abb8:	2201      	movs	r2, #1
 800abba:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800abbe:	687b      	ldr	r3, [r7, #4]
 800abc0:	2201      	movs	r2, #1
 800abc2:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800abc6:	687b      	ldr	r3, [r7, #4]
 800abc8:	2201      	movs	r2, #1
 800abca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800abce:	2300      	movs	r3, #0
}
 800abd0:	4618      	mov	r0, r3
 800abd2:	3708      	adds	r7, #8
 800abd4:	46bd      	mov	sp, r7
 800abd6:	bd80      	pop	{r7, pc}

0800abd8 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800abd8:	b480      	push	{r7}
 800abda:	b083      	sub	sp, #12
 800abdc:	af00      	add	r7, sp, #0
 800abde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800abe0:	bf00      	nop
 800abe2:	370c      	adds	r7, #12
 800abe4:	46bd      	mov	sp, r7
 800abe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abea:	4770      	bx	lr

0800abec <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800abec:	b580      	push	{r7, lr}
 800abee:	b084      	sub	sp, #16
 800abf0:	af00      	add	r7, sp, #0
 800abf2:	6078      	str	r0, [r7, #4]
 800abf4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800abf6:	683b      	ldr	r3, [r7, #0]
 800abf8:	2b00      	cmp	r3, #0
 800abfa:	d109      	bne.n	800ac10 <HAL_TIM_PWM_Start+0x24>
 800abfc:	687b      	ldr	r3, [r7, #4]
 800abfe:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800ac02:	b2db      	uxtb	r3, r3
 800ac04:	2b01      	cmp	r3, #1
 800ac06:	bf14      	ite	ne
 800ac08:	2301      	movne	r3, #1
 800ac0a:	2300      	moveq	r3, #0
 800ac0c:	b2db      	uxtb	r3, r3
 800ac0e:	e03c      	b.n	800ac8a <HAL_TIM_PWM_Start+0x9e>
 800ac10:	683b      	ldr	r3, [r7, #0]
 800ac12:	2b04      	cmp	r3, #4
 800ac14:	d109      	bne.n	800ac2a <HAL_TIM_PWM_Start+0x3e>
 800ac16:	687b      	ldr	r3, [r7, #4]
 800ac18:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800ac1c:	b2db      	uxtb	r3, r3
 800ac1e:	2b01      	cmp	r3, #1
 800ac20:	bf14      	ite	ne
 800ac22:	2301      	movne	r3, #1
 800ac24:	2300      	moveq	r3, #0
 800ac26:	b2db      	uxtb	r3, r3
 800ac28:	e02f      	b.n	800ac8a <HAL_TIM_PWM_Start+0x9e>
 800ac2a:	683b      	ldr	r3, [r7, #0]
 800ac2c:	2b08      	cmp	r3, #8
 800ac2e:	d109      	bne.n	800ac44 <HAL_TIM_PWM_Start+0x58>
 800ac30:	687b      	ldr	r3, [r7, #4]
 800ac32:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800ac36:	b2db      	uxtb	r3, r3
 800ac38:	2b01      	cmp	r3, #1
 800ac3a:	bf14      	ite	ne
 800ac3c:	2301      	movne	r3, #1
 800ac3e:	2300      	moveq	r3, #0
 800ac40:	b2db      	uxtb	r3, r3
 800ac42:	e022      	b.n	800ac8a <HAL_TIM_PWM_Start+0x9e>
 800ac44:	683b      	ldr	r3, [r7, #0]
 800ac46:	2b0c      	cmp	r3, #12
 800ac48:	d109      	bne.n	800ac5e <HAL_TIM_PWM_Start+0x72>
 800ac4a:	687b      	ldr	r3, [r7, #4]
 800ac4c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ac50:	b2db      	uxtb	r3, r3
 800ac52:	2b01      	cmp	r3, #1
 800ac54:	bf14      	ite	ne
 800ac56:	2301      	movne	r3, #1
 800ac58:	2300      	moveq	r3, #0
 800ac5a:	b2db      	uxtb	r3, r3
 800ac5c:	e015      	b.n	800ac8a <HAL_TIM_PWM_Start+0x9e>
 800ac5e:	683b      	ldr	r3, [r7, #0]
 800ac60:	2b10      	cmp	r3, #16
 800ac62:	d109      	bne.n	800ac78 <HAL_TIM_PWM_Start+0x8c>
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800ac6a:	b2db      	uxtb	r3, r3
 800ac6c:	2b01      	cmp	r3, #1
 800ac6e:	bf14      	ite	ne
 800ac70:	2301      	movne	r3, #1
 800ac72:	2300      	moveq	r3, #0
 800ac74:	b2db      	uxtb	r3, r3
 800ac76:	e008      	b.n	800ac8a <HAL_TIM_PWM_Start+0x9e>
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800ac7e:	b2db      	uxtb	r3, r3
 800ac80:	2b01      	cmp	r3, #1
 800ac82:	bf14      	ite	ne
 800ac84:	2301      	movne	r3, #1
 800ac86:	2300      	moveq	r3, #0
 800ac88:	b2db      	uxtb	r3, r3
 800ac8a:	2b00      	cmp	r3, #0
 800ac8c:	d001      	beq.n	800ac92 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800ac8e:	2301      	movs	r3, #1
 800ac90:	e0a1      	b.n	800add6 <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800ac92:	683b      	ldr	r3, [r7, #0]
 800ac94:	2b00      	cmp	r3, #0
 800ac96:	d104      	bne.n	800aca2 <HAL_TIM_PWM_Start+0xb6>
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	2202      	movs	r2, #2
 800ac9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800aca0:	e023      	b.n	800acea <HAL_TIM_PWM_Start+0xfe>
 800aca2:	683b      	ldr	r3, [r7, #0]
 800aca4:	2b04      	cmp	r3, #4
 800aca6:	d104      	bne.n	800acb2 <HAL_TIM_PWM_Start+0xc6>
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	2202      	movs	r2, #2
 800acac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800acb0:	e01b      	b.n	800acea <HAL_TIM_PWM_Start+0xfe>
 800acb2:	683b      	ldr	r3, [r7, #0]
 800acb4:	2b08      	cmp	r3, #8
 800acb6:	d104      	bne.n	800acc2 <HAL_TIM_PWM_Start+0xd6>
 800acb8:	687b      	ldr	r3, [r7, #4]
 800acba:	2202      	movs	r2, #2
 800acbc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800acc0:	e013      	b.n	800acea <HAL_TIM_PWM_Start+0xfe>
 800acc2:	683b      	ldr	r3, [r7, #0]
 800acc4:	2b0c      	cmp	r3, #12
 800acc6:	d104      	bne.n	800acd2 <HAL_TIM_PWM_Start+0xe6>
 800acc8:	687b      	ldr	r3, [r7, #4]
 800acca:	2202      	movs	r2, #2
 800accc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800acd0:	e00b      	b.n	800acea <HAL_TIM_PWM_Start+0xfe>
 800acd2:	683b      	ldr	r3, [r7, #0]
 800acd4:	2b10      	cmp	r3, #16
 800acd6:	d104      	bne.n	800ace2 <HAL_TIM_PWM_Start+0xf6>
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	2202      	movs	r2, #2
 800acdc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800ace0:	e003      	b.n	800acea <HAL_TIM_PWM_Start+0xfe>
 800ace2:	687b      	ldr	r3, [r7, #4]
 800ace4:	2202      	movs	r2, #2
 800ace6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800acea:	687b      	ldr	r3, [r7, #4]
 800acec:	681b      	ldr	r3, [r3, #0]
 800acee:	2201      	movs	r2, #1
 800acf0:	6839      	ldr	r1, [r7, #0]
 800acf2:	4618      	mov	r0, r3
 800acf4:	f001 fcac 	bl	800c650 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	681b      	ldr	r3, [r3, #0]
 800acfc:	4a38      	ldr	r2, [pc, #224]	; (800ade0 <HAL_TIM_PWM_Start+0x1f4>)
 800acfe:	4293      	cmp	r3, r2
 800ad00:	d013      	beq.n	800ad2a <HAL_TIM_PWM_Start+0x13e>
 800ad02:	687b      	ldr	r3, [r7, #4]
 800ad04:	681b      	ldr	r3, [r3, #0]
 800ad06:	4a37      	ldr	r2, [pc, #220]	; (800ade4 <HAL_TIM_PWM_Start+0x1f8>)
 800ad08:	4293      	cmp	r3, r2
 800ad0a:	d00e      	beq.n	800ad2a <HAL_TIM_PWM_Start+0x13e>
 800ad0c:	687b      	ldr	r3, [r7, #4]
 800ad0e:	681b      	ldr	r3, [r3, #0]
 800ad10:	4a35      	ldr	r2, [pc, #212]	; (800ade8 <HAL_TIM_PWM_Start+0x1fc>)
 800ad12:	4293      	cmp	r3, r2
 800ad14:	d009      	beq.n	800ad2a <HAL_TIM_PWM_Start+0x13e>
 800ad16:	687b      	ldr	r3, [r7, #4]
 800ad18:	681b      	ldr	r3, [r3, #0]
 800ad1a:	4a34      	ldr	r2, [pc, #208]	; (800adec <HAL_TIM_PWM_Start+0x200>)
 800ad1c:	4293      	cmp	r3, r2
 800ad1e:	d004      	beq.n	800ad2a <HAL_TIM_PWM_Start+0x13e>
 800ad20:	687b      	ldr	r3, [r7, #4]
 800ad22:	681b      	ldr	r3, [r3, #0]
 800ad24:	4a32      	ldr	r2, [pc, #200]	; (800adf0 <HAL_TIM_PWM_Start+0x204>)
 800ad26:	4293      	cmp	r3, r2
 800ad28:	d101      	bne.n	800ad2e <HAL_TIM_PWM_Start+0x142>
 800ad2a:	2301      	movs	r3, #1
 800ad2c:	e000      	b.n	800ad30 <HAL_TIM_PWM_Start+0x144>
 800ad2e:	2300      	movs	r3, #0
 800ad30:	2b00      	cmp	r3, #0
 800ad32:	d007      	beq.n	800ad44 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	681b      	ldr	r3, [r3, #0]
 800ad38:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ad3a:	687b      	ldr	r3, [r7, #4]
 800ad3c:	681b      	ldr	r3, [r3, #0]
 800ad3e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800ad42:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ad44:	687b      	ldr	r3, [r7, #4]
 800ad46:	681b      	ldr	r3, [r3, #0]
 800ad48:	4a25      	ldr	r2, [pc, #148]	; (800ade0 <HAL_TIM_PWM_Start+0x1f4>)
 800ad4a:	4293      	cmp	r3, r2
 800ad4c:	d022      	beq.n	800ad94 <HAL_TIM_PWM_Start+0x1a8>
 800ad4e:	687b      	ldr	r3, [r7, #4]
 800ad50:	681b      	ldr	r3, [r3, #0]
 800ad52:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ad56:	d01d      	beq.n	800ad94 <HAL_TIM_PWM_Start+0x1a8>
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	681b      	ldr	r3, [r3, #0]
 800ad5c:	4a25      	ldr	r2, [pc, #148]	; (800adf4 <HAL_TIM_PWM_Start+0x208>)
 800ad5e:	4293      	cmp	r3, r2
 800ad60:	d018      	beq.n	800ad94 <HAL_TIM_PWM_Start+0x1a8>
 800ad62:	687b      	ldr	r3, [r7, #4]
 800ad64:	681b      	ldr	r3, [r3, #0]
 800ad66:	4a24      	ldr	r2, [pc, #144]	; (800adf8 <HAL_TIM_PWM_Start+0x20c>)
 800ad68:	4293      	cmp	r3, r2
 800ad6a:	d013      	beq.n	800ad94 <HAL_TIM_PWM_Start+0x1a8>
 800ad6c:	687b      	ldr	r3, [r7, #4]
 800ad6e:	681b      	ldr	r3, [r3, #0]
 800ad70:	4a22      	ldr	r2, [pc, #136]	; (800adfc <HAL_TIM_PWM_Start+0x210>)
 800ad72:	4293      	cmp	r3, r2
 800ad74:	d00e      	beq.n	800ad94 <HAL_TIM_PWM_Start+0x1a8>
 800ad76:	687b      	ldr	r3, [r7, #4]
 800ad78:	681b      	ldr	r3, [r3, #0]
 800ad7a:	4a1a      	ldr	r2, [pc, #104]	; (800ade4 <HAL_TIM_PWM_Start+0x1f8>)
 800ad7c:	4293      	cmp	r3, r2
 800ad7e:	d009      	beq.n	800ad94 <HAL_TIM_PWM_Start+0x1a8>
 800ad80:	687b      	ldr	r3, [r7, #4]
 800ad82:	681b      	ldr	r3, [r3, #0]
 800ad84:	4a1e      	ldr	r2, [pc, #120]	; (800ae00 <HAL_TIM_PWM_Start+0x214>)
 800ad86:	4293      	cmp	r3, r2
 800ad88:	d004      	beq.n	800ad94 <HAL_TIM_PWM_Start+0x1a8>
 800ad8a:	687b      	ldr	r3, [r7, #4]
 800ad8c:	681b      	ldr	r3, [r3, #0]
 800ad8e:	4a16      	ldr	r2, [pc, #88]	; (800ade8 <HAL_TIM_PWM_Start+0x1fc>)
 800ad90:	4293      	cmp	r3, r2
 800ad92:	d115      	bne.n	800adc0 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800ad94:	687b      	ldr	r3, [r7, #4]
 800ad96:	681b      	ldr	r3, [r3, #0]
 800ad98:	689a      	ldr	r2, [r3, #8]
 800ad9a:	4b1a      	ldr	r3, [pc, #104]	; (800ae04 <HAL_TIM_PWM_Start+0x218>)
 800ad9c:	4013      	ands	r3, r2
 800ad9e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ada0:	68fb      	ldr	r3, [r7, #12]
 800ada2:	2b06      	cmp	r3, #6
 800ada4:	d015      	beq.n	800add2 <HAL_TIM_PWM_Start+0x1e6>
 800ada6:	68fb      	ldr	r3, [r7, #12]
 800ada8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800adac:	d011      	beq.n	800add2 <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 800adae:	687b      	ldr	r3, [r7, #4]
 800adb0:	681b      	ldr	r3, [r3, #0]
 800adb2:	681a      	ldr	r2, [r3, #0]
 800adb4:	687b      	ldr	r3, [r7, #4]
 800adb6:	681b      	ldr	r3, [r3, #0]
 800adb8:	f042 0201 	orr.w	r2, r2, #1
 800adbc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800adbe:	e008      	b.n	800add2 <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800adc0:	687b      	ldr	r3, [r7, #4]
 800adc2:	681b      	ldr	r3, [r3, #0]
 800adc4:	681a      	ldr	r2, [r3, #0]
 800adc6:	687b      	ldr	r3, [r7, #4]
 800adc8:	681b      	ldr	r3, [r3, #0]
 800adca:	f042 0201 	orr.w	r2, r2, #1
 800adce:	601a      	str	r2, [r3, #0]
 800add0:	e000      	b.n	800add4 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800add2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800add4:	2300      	movs	r3, #0
}
 800add6:	4618      	mov	r0, r3
 800add8:	3710      	adds	r7, #16
 800adda:	46bd      	mov	sp, r7
 800addc:	bd80      	pop	{r7, pc}
 800adde:	bf00      	nop
 800ade0:	40010000 	.word	0x40010000
 800ade4:	40010400 	.word	0x40010400
 800ade8:	40014000 	.word	0x40014000
 800adec:	40014400 	.word	0x40014400
 800adf0:	40014800 	.word	0x40014800
 800adf4:	40000400 	.word	0x40000400
 800adf8:	40000800 	.word	0x40000800
 800adfc:	40000c00 	.word	0x40000c00
 800ae00:	40001800 	.word	0x40001800
 800ae04:	00010007 	.word	0x00010007

0800ae08 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800ae08:	b580      	push	{r7, lr}
 800ae0a:	b082      	sub	sp, #8
 800ae0c:	af00      	add	r7, sp, #0
 800ae0e:	6078      	str	r0, [r7, #4]
 800ae10:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800ae12:	687b      	ldr	r3, [r7, #4]
 800ae14:	681b      	ldr	r3, [r3, #0]
 800ae16:	2200      	movs	r2, #0
 800ae18:	6839      	ldr	r1, [r7, #0]
 800ae1a:	4618      	mov	r0, r3
 800ae1c:	f001 fc18 	bl	800c650 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	681b      	ldr	r3, [r3, #0]
 800ae24:	4a3e      	ldr	r2, [pc, #248]	; (800af20 <HAL_TIM_PWM_Stop+0x118>)
 800ae26:	4293      	cmp	r3, r2
 800ae28:	d013      	beq.n	800ae52 <HAL_TIM_PWM_Stop+0x4a>
 800ae2a:	687b      	ldr	r3, [r7, #4]
 800ae2c:	681b      	ldr	r3, [r3, #0]
 800ae2e:	4a3d      	ldr	r2, [pc, #244]	; (800af24 <HAL_TIM_PWM_Stop+0x11c>)
 800ae30:	4293      	cmp	r3, r2
 800ae32:	d00e      	beq.n	800ae52 <HAL_TIM_PWM_Stop+0x4a>
 800ae34:	687b      	ldr	r3, [r7, #4]
 800ae36:	681b      	ldr	r3, [r3, #0]
 800ae38:	4a3b      	ldr	r2, [pc, #236]	; (800af28 <HAL_TIM_PWM_Stop+0x120>)
 800ae3a:	4293      	cmp	r3, r2
 800ae3c:	d009      	beq.n	800ae52 <HAL_TIM_PWM_Stop+0x4a>
 800ae3e:	687b      	ldr	r3, [r7, #4]
 800ae40:	681b      	ldr	r3, [r3, #0]
 800ae42:	4a3a      	ldr	r2, [pc, #232]	; (800af2c <HAL_TIM_PWM_Stop+0x124>)
 800ae44:	4293      	cmp	r3, r2
 800ae46:	d004      	beq.n	800ae52 <HAL_TIM_PWM_Stop+0x4a>
 800ae48:	687b      	ldr	r3, [r7, #4]
 800ae4a:	681b      	ldr	r3, [r3, #0]
 800ae4c:	4a38      	ldr	r2, [pc, #224]	; (800af30 <HAL_TIM_PWM_Stop+0x128>)
 800ae4e:	4293      	cmp	r3, r2
 800ae50:	d101      	bne.n	800ae56 <HAL_TIM_PWM_Stop+0x4e>
 800ae52:	2301      	movs	r3, #1
 800ae54:	e000      	b.n	800ae58 <HAL_TIM_PWM_Stop+0x50>
 800ae56:	2300      	movs	r3, #0
 800ae58:	2b00      	cmp	r3, #0
 800ae5a:	d017      	beq.n	800ae8c <HAL_TIM_PWM_Stop+0x84>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800ae5c:	687b      	ldr	r3, [r7, #4]
 800ae5e:	681b      	ldr	r3, [r3, #0]
 800ae60:	6a1a      	ldr	r2, [r3, #32]
 800ae62:	f241 1311 	movw	r3, #4369	; 0x1111
 800ae66:	4013      	ands	r3, r2
 800ae68:	2b00      	cmp	r3, #0
 800ae6a:	d10f      	bne.n	800ae8c <HAL_TIM_PWM_Stop+0x84>
 800ae6c:	687b      	ldr	r3, [r7, #4]
 800ae6e:	681b      	ldr	r3, [r3, #0]
 800ae70:	6a1a      	ldr	r2, [r3, #32]
 800ae72:	f240 4344 	movw	r3, #1092	; 0x444
 800ae76:	4013      	ands	r3, r2
 800ae78:	2b00      	cmp	r3, #0
 800ae7a:	d107      	bne.n	800ae8c <HAL_TIM_PWM_Stop+0x84>
 800ae7c:	687b      	ldr	r3, [r7, #4]
 800ae7e:	681b      	ldr	r3, [r3, #0]
 800ae80:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ae82:	687b      	ldr	r3, [r7, #4]
 800ae84:	681b      	ldr	r3, [r3, #0]
 800ae86:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800ae8a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800ae8c:	687b      	ldr	r3, [r7, #4]
 800ae8e:	681b      	ldr	r3, [r3, #0]
 800ae90:	6a1a      	ldr	r2, [r3, #32]
 800ae92:	f241 1311 	movw	r3, #4369	; 0x1111
 800ae96:	4013      	ands	r3, r2
 800ae98:	2b00      	cmp	r3, #0
 800ae9a:	d10f      	bne.n	800aebc <HAL_TIM_PWM_Stop+0xb4>
 800ae9c:	687b      	ldr	r3, [r7, #4]
 800ae9e:	681b      	ldr	r3, [r3, #0]
 800aea0:	6a1a      	ldr	r2, [r3, #32]
 800aea2:	f240 4344 	movw	r3, #1092	; 0x444
 800aea6:	4013      	ands	r3, r2
 800aea8:	2b00      	cmp	r3, #0
 800aeaa:	d107      	bne.n	800aebc <HAL_TIM_PWM_Stop+0xb4>
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	681b      	ldr	r3, [r3, #0]
 800aeb0:	681a      	ldr	r2, [r3, #0]
 800aeb2:	687b      	ldr	r3, [r7, #4]
 800aeb4:	681b      	ldr	r3, [r3, #0]
 800aeb6:	f022 0201 	bic.w	r2, r2, #1
 800aeba:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800aebc:	683b      	ldr	r3, [r7, #0]
 800aebe:	2b00      	cmp	r3, #0
 800aec0:	d104      	bne.n	800aecc <HAL_TIM_PWM_Stop+0xc4>
 800aec2:	687b      	ldr	r3, [r7, #4]
 800aec4:	2201      	movs	r2, #1
 800aec6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800aeca:	e023      	b.n	800af14 <HAL_TIM_PWM_Stop+0x10c>
 800aecc:	683b      	ldr	r3, [r7, #0]
 800aece:	2b04      	cmp	r3, #4
 800aed0:	d104      	bne.n	800aedc <HAL_TIM_PWM_Stop+0xd4>
 800aed2:	687b      	ldr	r3, [r7, #4]
 800aed4:	2201      	movs	r2, #1
 800aed6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800aeda:	e01b      	b.n	800af14 <HAL_TIM_PWM_Stop+0x10c>
 800aedc:	683b      	ldr	r3, [r7, #0]
 800aede:	2b08      	cmp	r3, #8
 800aee0:	d104      	bne.n	800aeec <HAL_TIM_PWM_Stop+0xe4>
 800aee2:	687b      	ldr	r3, [r7, #4]
 800aee4:	2201      	movs	r2, #1
 800aee6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800aeea:	e013      	b.n	800af14 <HAL_TIM_PWM_Stop+0x10c>
 800aeec:	683b      	ldr	r3, [r7, #0]
 800aeee:	2b0c      	cmp	r3, #12
 800aef0:	d104      	bne.n	800aefc <HAL_TIM_PWM_Stop+0xf4>
 800aef2:	687b      	ldr	r3, [r7, #4]
 800aef4:	2201      	movs	r2, #1
 800aef6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800aefa:	e00b      	b.n	800af14 <HAL_TIM_PWM_Stop+0x10c>
 800aefc:	683b      	ldr	r3, [r7, #0]
 800aefe:	2b10      	cmp	r3, #16
 800af00:	d104      	bne.n	800af0c <HAL_TIM_PWM_Stop+0x104>
 800af02:	687b      	ldr	r3, [r7, #4]
 800af04:	2201      	movs	r2, #1
 800af06:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800af0a:	e003      	b.n	800af14 <HAL_TIM_PWM_Stop+0x10c>
 800af0c:	687b      	ldr	r3, [r7, #4]
 800af0e:	2201      	movs	r2, #1
 800af10:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Return function status */
  return HAL_OK;
 800af14:	2300      	movs	r3, #0
}
 800af16:	4618      	mov	r0, r3
 800af18:	3708      	adds	r7, #8
 800af1a:	46bd      	mov	sp, r7
 800af1c:	bd80      	pop	{r7, pc}
 800af1e:	bf00      	nop
 800af20:	40010000 	.word	0x40010000
 800af24:	40010400 	.word	0x40010400
 800af28:	40014000 	.word	0x40014000
 800af2c:	40014400 	.word	0x40014400
 800af30:	40014800 	.word	0x40014800

0800af34 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 800af34:	b580      	push	{r7, lr}
 800af36:	b082      	sub	sp, #8
 800af38:	af00      	add	r7, sp, #0
 800af3a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800af3c:	687b      	ldr	r3, [r7, #4]
 800af3e:	2b00      	cmp	r3, #0
 800af40:	d101      	bne.n	800af46 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800af42:	2301      	movs	r3, #1
 800af44:	e049      	b.n	800afda <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800af46:	687b      	ldr	r3, [r7, #4]
 800af48:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800af4c:	b2db      	uxtb	r3, r3
 800af4e:	2b00      	cmp	r3, #0
 800af50:	d106      	bne.n	800af60 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800af52:	687b      	ldr	r3, [r7, #4]
 800af54:	2200      	movs	r2, #0
 800af56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800af5a:	6878      	ldr	r0, [r7, #4]
 800af5c:	f000 f841 	bl	800afe2 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800af60:	687b      	ldr	r3, [r7, #4]
 800af62:	2202      	movs	r2, #2
 800af64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800af68:	687b      	ldr	r3, [r7, #4]
 800af6a:	681a      	ldr	r2, [r3, #0]
 800af6c:	687b      	ldr	r3, [r7, #4]
 800af6e:	3304      	adds	r3, #4
 800af70:	4619      	mov	r1, r3
 800af72:	4610      	mov	r0, r2
 800af74:	f000 fe34 	bl	800bbe0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800af78:	687b      	ldr	r3, [r7, #4]
 800af7a:	2201      	movs	r2, #1
 800af7c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800af80:	687b      	ldr	r3, [r7, #4]
 800af82:	2201      	movs	r2, #1
 800af84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800af88:	687b      	ldr	r3, [r7, #4]
 800af8a:	2201      	movs	r2, #1
 800af8c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800af90:	687b      	ldr	r3, [r7, #4]
 800af92:	2201      	movs	r2, #1
 800af94:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800af98:	687b      	ldr	r3, [r7, #4]
 800af9a:	2201      	movs	r2, #1
 800af9c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800afa0:	687b      	ldr	r3, [r7, #4]
 800afa2:	2201      	movs	r2, #1
 800afa4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800afa8:	687b      	ldr	r3, [r7, #4]
 800afaa:	2201      	movs	r2, #1
 800afac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800afb0:	687b      	ldr	r3, [r7, #4]
 800afb2:	2201      	movs	r2, #1
 800afb4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800afb8:	687b      	ldr	r3, [r7, #4]
 800afba:	2201      	movs	r2, #1
 800afbc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800afc0:	687b      	ldr	r3, [r7, #4]
 800afc2:	2201      	movs	r2, #1
 800afc4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800afc8:	687b      	ldr	r3, [r7, #4]
 800afca:	2201      	movs	r2, #1
 800afcc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800afd0:	687b      	ldr	r3, [r7, #4]
 800afd2:	2201      	movs	r2, #1
 800afd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800afd8:	2300      	movs	r3, #0
}
 800afda:	4618      	mov	r0, r3
 800afdc:	3708      	adds	r7, #8
 800afde:	46bd      	mov	sp, r7
 800afe0:	bd80      	pop	{r7, pc}

0800afe2 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 800afe2:	b480      	push	{r7}
 800afe4:	b083      	sub	sp, #12
 800afe6:	af00      	add	r7, sp, #0
 800afe8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 800afea:	bf00      	nop
 800afec:	370c      	adds	r7, #12
 800afee:	46bd      	mov	sp, r7
 800aff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aff4:	4770      	bx	lr
	...

0800aff8 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800aff8:	b580      	push	{r7, lr}
 800affa:	b084      	sub	sp, #16
 800affc:	af00      	add	r7, sp, #0
 800affe:	6078      	str	r0, [r7, #4]
 800b000:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800b002:	2300      	movs	r3, #0
 800b004:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800b006:	683b      	ldr	r3, [r7, #0]
 800b008:	2b00      	cmp	r3, #0
 800b00a:	d104      	bne.n	800b016 <HAL_TIM_IC_Start_IT+0x1e>
 800b00c:	687b      	ldr	r3, [r7, #4]
 800b00e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800b012:	b2db      	uxtb	r3, r3
 800b014:	e023      	b.n	800b05e <HAL_TIM_IC_Start_IT+0x66>
 800b016:	683b      	ldr	r3, [r7, #0]
 800b018:	2b04      	cmp	r3, #4
 800b01a:	d104      	bne.n	800b026 <HAL_TIM_IC_Start_IT+0x2e>
 800b01c:	687b      	ldr	r3, [r7, #4]
 800b01e:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800b022:	b2db      	uxtb	r3, r3
 800b024:	e01b      	b.n	800b05e <HAL_TIM_IC_Start_IT+0x66>
 800b026:	683b      	ldr	r3, [r7, #0]
 800b028:	2b08      	cmp	r3, #8
 800b02a:	d104      	bne.n	800b036 <HAL_TIM_IC_Start_IT+0x3e>
 800b02c:	687b      	ldr	r3, [r7, #4]
 800b02e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800b032:	b2db      	uxtb	r3, r3
 800b034:	e013      	b.n	800b05e <HAL_TIM_IC_Start_IT+0x66>
 800b036:	683b      	ldr	r3, [r7, #0]
 800b038:	2b0c      	cmp	r3, #12
 800b03a:	d104      	bne.n	800b046 <HAL_TIM_IC_Start_IT+0x4e>
 800b03c:	687b      	ldr	r3, [r7, #4]
 800b03e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b042:	b2db      	uxtb	r3, r3
 800b044:	e00b      	b.n	800b05e <HAL_TIM_IC_Start_IT+0x66>
 800b046:	683b      	ldr	r3, [r7, #0]
 800b048:	2b10      	cmp	r3, #16
 800b04a:	d104      	bne.n	800b056 <HAL_TIM_IC_Start_IT+0x5e>
 800b04c:	687b      	ldr	r3, [r7, #4]
 800b04e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800b052:	b2db      	uxtb	r3, r3
 800b054:	e003      	b.n	800b05e <HAL_TIM_IC_Start_IT+0x66>
 800b056:	687b      	ldr	r3, [r7, #4]
 800b058:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800b05c:	b2db      	uxtb	r3, r3
 800b05e:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 800b060:	683b      	ldr	r3, [r7, #0]
 800b062:	2b00      	cmp	r3, #0
 800b064:	d104      	bne.n	800b070 <HAL_TIM_IC_Start_IT+0x78>
 800b066:	687b      	ldr	r3, [r7, #4]
 800b068:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b06c:	b2db      	uxtb	r3, r3
 800b06e:	e013      	b.n	800b098 <HAL_TIM_IC_Start_IT+0xa0>
 800b070:	683b      	ldr	r3, [r7, #0]
 800b072:	2b04      	cmp	r3, #4
 800b074:	d104      	bne.n	800b080 <HAL_TIM_IC_Start_IT+0x88>
 800b076:	687b      	ldr	r3, [r7, #4]
 800b078:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b07c:	b2db      	uxtb	r3, r3
 800b07e:	e00b      	b.n	800b098 <HAL_TIM_IC_Start_IT+0xa0>
 800b080:	683b      	ldr	r3, [r7, #0]
 800b082:	2b08      	cmp	r3, #8
 800b084:	d104      	bne.n	800b090 <HAL_TIM_IC_Start_IT+0x98>
 800b086:	687b      	ldr	r3, [r7, #4]
 800b088:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800b08c:	b2db      	uxtb	r3, r3
 800b08e:	e003      	b.n	800b098 <HAL_TIM_IC_Start_IT+0xa0>
 800b090:	687b      	ldr	r3, [r7, #4]
 800b092:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 800b096:	b2db      	uxtb	r3, r3
 800b098:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 800b09a:	7bbb      	ldrb	r3, [r7, #14]
 800b09c:	2b01      	cmp	r3, #1
 800b09e:	d102      	bne.n	800b0a6 <HAL_TIM_IC_Start_IT+0xae>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 800b0a0:	7b7b      	ldrb	r3, [r7, #13]
 800b0a2:	2b01      	cmp	r3, #1
 800b0a4:	d001      	beq.n	800b0aa <HAL_TIM_IC_Start_IT+0xb2>
  {
    return HAL_ERROR;
 800b0a6:	2301      	movs	r3, #1
 800b0a8:	e0e2      	b.n	800b270 <HAL_TIM_IC_Start_IT+0x278>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800b0aa:	683b      	ldr	r3, [r7, #0]
 800b0ac:	2b00      	cmp	r3, #0
 800b0ae:	d104      	bne.n	800b0ba <HAL_TIM_IC_Start_IT+0xc2>
 800b0b0:	687b      	ldr	r3, [r7, #4]
 800b0b2:	2202      	movs	r2, #2
 800b0b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b0b8:	e023      	b.n	800b102 <HAL_TIM_IC_Start_IT+0x10a>
 800b0ba:	683b      	ldr	r3, [r7, #0]
 800b0bc:	2b04      	cmp	r3, #4
 800b0be:	d104      	bne.n	800b0ca <HAL_TIM_IC_Start_IT+0xd2>
 800b0c0:	687b      	ldr	r3, [r7, #4]
 800b0c2:	2202      	movs	r2, #2
 800b0c4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800b0c8:	e01b      	b.n	800b102 <HAL_TIM_IC_Start_IT+0x10a>
 800b0ca:	683b      	ldr	r3, [r7, #0]
 800b0cc:	2b08      	cmp	r3, #8
 800b0ce:	d104      	bne.n	800b0da <HAL_TIM_IC_Start_IT+0xe2>
 800b0d0:	687b      	ldr	r3, [r7, #4]
 800b0d2:	2202      	movs	r2, #2
 800b0d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b0d8:	e013      	b.n	800b102 <HAL_TIM_IC_Start_IT+0x10a>
 800b0da:	683b      	ldr	r3, [r7, #0]
 800b0dc:	2b0c      	cmp	r3, #12
 800b0de:	d104      	bne.n	800b0ea <HAL_TIM_IC_Start_IT+0xf2>
 800b0e0:	687b      	ldr	r3, [r7, #4]
 800b0e2:	2202      	movs	r2, #2
 800b0e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800b0e8:	e00b      	b.n	800b102 <HAL_TIM_IC_Start_IT+0x10a>
 800b0ea:	683b      	ldr	r3, [r7, #0]
 800b0ec:	2b10      	cmp	r3, #16
 800b0ee:	d104      	bne.n	800b0fa <HAL_TIM_IC_Start_IT+0x102>
 800b0f0:	687b      	ldr	r3, [r7, #4]
 800b0f2:	2202      	movs	r2, #2
 800b0f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800b0f8:	e003      	b.n	800b102 <HAL_TIM_IC_Start_IT+0x10a>
 800b0fa:	687b      	ldr	r3, [r7, #4]
 800b0fc:	2202      	movs	r2, #2
 800b0fe:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800b102:	683b      	ldr	r3, [r7, #0]
 800b104:	2b00      	cmp	r3, #0
 800b106:	d104      	bne.n	800b112 <HAL_TIM_IC_Start_IT+0x11a>
 800b108:	687b      	ldr	r3, [r7, #4]
 800b10a:	2202      	movs	r2, #2
 800b10c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b110:	e013      	b.n	800b13a <HAL_TIM_IC_Start_IT+0x142>
 800b112:	683b      	ldr	r3, [r7, #0]
 800b114:	2b04      	cmp	r3, #4
 800b116:	d104      	bne.n	800b122 <HAL_TIM_IC_Start_IT+0x12a>
 800b118:	687b      	ldr	r3, [r7, #4]
 800b11a:	2202      	movs	r2, #2
 800b11c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b120:	e00b      	b.n	800b13a <HAL_TIM_IC_Start_IT+0x142>
 800b122:	683b      	ldr	r3, [r7, #0]
 800b124:	2b08      	cmp	r3, #8
 800b126:	d104      	bne.n	800b132 <HAL_TIM_IC_Start_IT+0x13a>
 800b128:	687b      	ldr	r3, [r7, #4]
 800b12a:	2202      	movs	r2, #2
 800b12c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800b130:	e003      	b.n	800b13a <HAL_TIM_IC_Start_IT+0x142>
 800b132:	687b      	ldr	r3, [r7, #4]
 800b134:	2202      	movs	r2, #2
 800b136:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  switch (Channel)
 800b13a:	683b      	ldr	r3, [r7, #0]
 800b13c:	2b0c      	cmp	r3, #12
 800b13e:	d841      	bhi.n	800b1c4 <HAL_TIM_IC_Start_IT+0x1cc>
 800b140:	a201      	add	r2, pc, #4	; (adr r2, 800b148 <HAL_TIM_IC_Start_IT+0x150>)
 800b142:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b146:	bf00      	nop
 800b148:	0800b17d 	.word	0x0800b17d
 800b14c:	0800b1c5 	.word	0x0800b1c5
 800b150:	0800b1c5 	.word	0x0800b1c5
 800b154:	0800b1c5 	.word	0x0800b1c5
 800b158:	0800b18f 	.word	0x0800b18f
 800b15c:	0800b1c5 	.word	0x0800b1c5
 800b160:	0800b1c5 	.word	0x0800b1c5
 800b164:	0800b1c5 	.word	0x0800b1c5
 800b168:	0800b1a1 	.word	0x0800b1a1
 800b16c:	0800b1c5 	.word	0x0800b1c5
 800b170:	0800b1c5 	.word	0x0800b1c5
 800b174:	0800b1c5 	.word	0x0800b1c5
 800b178:	0800b1b3 	.word	0x0800b1b3
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800b17c:	687b      	ldr	r3, [r7, #4]
 800b17e:	681b      	ldr	r3, [r3, #0]
 800b180:	68da      	ldr	r2, [r3, #12]
 800b182:	687b      	ldr	r3, [r7, #4]
 800b184:	681b      	ldr	r3, [r3, #0]
 800b186:	f042 0202 	orr.w	r2, r2, #2
 800b18a:	60da      	str	r2, [r3, #12]
      break;
 800b18c:	e01d      	b.n	800b1ca <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800b18e:	687b      	ldr	r3, [r7, #4]
 800b190:	681b      	ldr	r3, [r3, #0]
 800b192:	68da      	ldr	r2, [r3, #12]
 800b194:	687b      	ldr	r3, [r7, #4]
 800b196:	681b      	ldr	r3, [r3, #0]
 800b198:	f042 0204 	orr.w	r2, r2, #4
 800b19c:	60da      	str	r2, [r3, #12]
      break;
 800b19e:	e014      	b.n	800b1ca <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800b1a0:	687b      	ldr	r3, [r7, #4]
 800b1a2:	681b      	ldr	r3, [r3, #0]
 800b1a4:	68da      	ldr	r2, [r3, #12]
 800b1a6:	687b      	ldr	r3, [r7, #4]
 800b1a8:	681b      	ldr	r3, [r3, #0]
 800b1aa:	f042 0208 	orr.w	r2, r2, #8
 800b1ae:	60da      	str	r2, [r3, #12]
      break;
 800b1b0:	e00b      	b.n	800b1ca <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800b1b2:	687b      	ldr	r3, [r7, #4]
 800b1b4:	681b      	ldr	r3, [r3, #0]
 800b1b6:	68da      	ldr	r2, [r3, #12]
 800b1b8:	687b      	ldr	r3, [r7, #4]
 800b1ba:	681b      	ldr	r3, [r3, #0]
 800b1bc:	f042 0210 	orr.w	r2, r2, #16
 800b1c0:	60da      	str	r2, [r3, #12]
      break;
 800b1c2:	e002      	b.n	800b1ca <HAL_TIM_IC_Start_IT+0x1d2>
    }

    default:
      status = HAL_ERROR;
 800b1c4:	2301      	movs	r3, #1
 800b1c6:	73fb      	strb	r3, [r7, #15]
      break;
 800b1c8:	bf00      	nop
  }

  if (status == HAL_OK)
 800b1ca:	7bfb      	ldrb	r3, [r7, #15]
 800b1cc:	2b00      	cmp	r3, #0
 800b1ce:	d14e      	bne.n	800b26e <HAL_TIM_IC_Start_IT+0x276>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800b1d0:	687b      	ldr	r3, [r7, #4]
 800b1d2:	681b      	ldr	r3, [r3, #0]
 800b1d4:	2201      	movs	r2, #1
 800b1d6:	6839      	ldr	r1, [r7, #0]
 800b1d8:	4618      	mov	r0, r3
 800b1da:	f001 fa39 	bl	800c650 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b1de:	687b      	ldr	r3, [r7, #4]
 800b1e0:	681b      	ldr	r3, [r3, #0]
 800b1e2:	4a25      	ldr	r2, [pc, #148]	; (800b278 <HAL_TIM_IC_Start_IT+0x280>)
 800b1e4:	4293      	cmp	r3, r2
 800b1e6:	d022      	beq.n	800b22e <HAL_TIM_IC_Start_IT+0x236>
 800b1e8:	687b      	ldr	r3, [r7, #4]
 800b1ea:	681b      	ldr	r3, [r3, #0]
 800b1ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b1f0:	d01d      	beq.n	800b22e <HAL_TIM_IC_Start_IT+0x236>
 800b1f2:	687b      	ldr	r3, [r7, #4]
 800b1f4:	681b      	ldr	r3, [r3, #0]
 800b1f6:	4a21      	ldr	r2, [pc, #132]	; (800b27c <HAL_TIM_IC_Start_IT+0x284>)
 800b1f8:	4293      	cmp	r3, r2
 800b1fa:	d018      	beq.n	800b22e <HAL_TIM_IC_Start_IT+0x236>
 800b1fc:	687b      	ldr	r3, [r7, #4]
 800b1fe:	681b      	ldr	r3, [r3, #0]
 800b200:	4a1f      	ldr	r2, [pc, #124]	; (800b280 <HAL_TIM_IC_Start_IT+0x288>)
 800b202:	4293      	cmp	r3, r2
 800b204:	d013      	beq.n	800b22e <HAL_TIM_IC_Start_IT+0x236>
 800b206:	687b      	ldr	r3, [r7, #4]
 800b208:	681b      	ldr	r3, [r3, #0]
 800b20a:	4a1e      	ldr	r2, [pc, #120]	; (800b284 <HAL_TIM_IC_Start_IT+0x28c>)
 800b20c:	4293      	cmp	r3, r2
 800b20e:	d00e      	beq.n	800b22e <HAL_TIM_IC_Start_IT+0x236>
 800b210:	687b      	ldr	r3, [r7, #4]
 800b212:	681b      	ldr	r3, [r3, #0]
 800b214:	4a1c      	ldr	r2, [pc, #112]	; (800b288 <HAL_TIM_IC_Start_IT+0x290>)
 800b216:	4293      	cmp	r3, r2
 800b218:	d009      	beq.n	800b22e <HAL_TIM_IC_Start_IT+0x236>
 800b21a:	687b      	ldr	r3, [r7, #4]
 800b21c:	681b      	ldr	r3, [r3, #0]
 800b21e:	4a1b      	ldr	r2, [pc, #108]	; (800b28c <HAL_TIM_IC_Start_IT+0x294>)
 800b220:	4293      	cmp	r3, r2
 800b222:	d004      	beq.n	800b22e <HAL_TIM_IC_Start_IT+0x236>
 800b224:	687b      	ldr	r3, [r7, #4]
 800b226:	681b      	ldr	r3, [r3, #0]
 800b228:	4a19      	ldr	r2, [pc, #100]	; (800b290 <HAL_TIM_IC_Start_IT+0x298>)
 800b22a:	4293      	cmp	r3, r2
 800b22c:	d115      	bne.n	800b25a <HAL_TIM_IC_Start_IT+0x262>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b22e:	687b      	ldr	r3, [r7, #4]
 800b230:	681b      	ldr	r3, [r3, #0]
 800b232:	689a      	ldr	r2, [r3, #8]
 800b234:	4b17      	ldr	r3, [pc, #92]	; (800b294 <HAL_TIM_IC_Start_IT+0x29c>)
 800b236:	4013      	ands	r3, r2
 800b238:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b23a:	68bb      	ldr	r3, [r7, #8]
 800b23c:	2b06      	cmp	r3, #6
 800b23e:	d015      	beq.n	800b26c <HAL_TIM_IC_Start_IT+0x274>
 800b240:	68bb      	ldr	r3, [r7, #8]
 800b242:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b246:	d011      	beq.n	800b26c <HAL_TIM_IC_Start_IT+0x274>
      {
        __HAL_TIM_ENABLE(htim);
 800b248:	687b      	ldr	r3, [r7, #4]
 800b24a:	681b      	ldr	r3, [r3, #0]
 800b24c:	681a      	ldr	r2, [r3, #0]
 800b24e:	687b      	ldr	r3, [r7, #4]
 800b250:	681b      	ldr	r3, [r3, #0]
 800b252:	f042 0201 	orr.w	r2, r2, #1
 800b256:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b258:	e008      	b.n	800b26c <HAL_TIM_IC_Start_IT+0x274>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800b25a:	687b      	ldr	r3, [r7, #4]
 800b25c:	681b      	ldr	r3, [r3, #0]
 800b25e:	681a      	ldr	r2, [r3, #0]
 800b260:	687b      	ldr	r3, [r7, #4]
 800b262:	681b      	ldr	r3, [r3, #0]
 800b264:	f042 0201 	orr.w	r2, r2, #1
 800b268:	601a      	str	r2, [r3, #0]
 800b26a:	e000      	b.n	800b26e <HAL_TIM_IC_Start_IT+0x276>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b26c:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 800b26e:	7bfb      	ldrb	r3, [r7, #15]
}
 800b270:	4618      	mov	r0, r3
 800b272:	3710      	adds	r7, #16
 800b274:	46bd      	mov	sp, r7
 800b276:	bd80      	pop	{r7, pc}
 800b278:	40010000 	.word	0x40010000
 800b27c:	40000400 	.word	0x40000400
 800b280:	40000800 	.word	0x40000800
 800b284:	40000c00 	.word	0x40000c00
 800b288:	40010400 	.word	0x40010400
 800b28c:	40001800 	.word	0x40001800
 800b290:	40014000 	.word	0x40014000
 800b294:	00010007 	.word	0x00010007

0800b298 <HAL_TIM_IC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800b298:	b580      	push	{r7, lr}
 800b29a:	b084      	sub	sp, #16
 800b29c:	af00      	add	r7, sp, #0
 800b29e:	6078      	str	r0, [r7, #4]
 800b2a0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800b2a2:	2300      	movs	r3, #0
 800b2a4:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 800b2a6:	683b      	ldr	r3, [r7, #0]
 800b2a8:	2b0c      	cmp	r3, #12
 800b2aa:	d841      	bhi.n	800b330 <HAL_TIM_IC_Stop_IT+0x98>
 800b2ac:	a201      	add	r2, pc, #4	; (adr r2, 800b2b4 <HAL_TIM_IC_Stop_IT+0x1c>)
 800b2ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b2b2:	bf00      	nop
 800b2b4:	0800b2e9 	.word	0x0800b2e9
 800b2b8:	0800b331 	.word	0x0800b331
 800b2bc:	0800b331 	.word	0x0800b331
 800b2c0:	0800b331 	.word	0x0800b331
 800b2c4:	0800b2fb 	.word	0x0800b2fb
 800b2c8:	0800b331 	.word	0x0800b331
 800b2cc:	0800b331 	.word	0x0800b331
 800b2d0:	0800b331 	.word	0x0800b331
 800b2d4:	0800b30d 	.word	0x0800b30d
 800b2d8:	0800b331 	.word	0x0800b331
 800b2dc:	0800b331 	.word	0x0800b331
 800b2e0:	0800b331 	.word	0x0800b331
 800b2e4:	0800b31f 	.word	0x0800b31f
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 800b2e8:	687b      	ldr	r3, [r7, #4]
 800b2ea:	681b      	ldr	r3, [r3, #0]
 800b2ec:	68da      	ldr	r2, [r3, #12]
 800b2ee:	687b      	ldr	r3, [r7, #4]
 800b2f0:	681b      	ldr	r3, [r3, #0]
 800b2f2:	f022 0202 	bic.w	r2, r2, #2
 800b2f6:	60da      	str	r2, [r3, #12]
      break;
 800b2f8:	e01d      	b.n	800b336 <HAL_TIM_IC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 800b2fa:	687b      	ldr	r3, [r7, #4]
 800b2fc:	681b      	ldr	r3, [r3, #0]
 800b2fe:	68da      	ldr	r2, [r3, #12]
 800b300:	687b      	ldr	r3, [r7, #4]
 800b302:	681b      	ldr	r3, [r3, #0]
 800b304:	f022 0204 	bic.w	r2, r2, #4
 800b308:	60da      	str	r2, [r3, #12]
      break;
 800b30a:	e014      	b.n	800b336 <HAL_TIM_IC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 800b30c:	687b      	ldr	r3, [r7, #4]
 800b30e:	681b      	ldr	r3, [r3, #0]
 800b310:	68da      	ldr	r2, [r3, #12]
 800b312:	687b      	ldr	r3, [r7, #4]
 800b314:	681b      	ldr	r3, [r3, #0]
 800b316:	f022 0208 	bic.w	r2, r2, #8
 800b31a:	60da      	str	r2, [r3, #12]
      break;
 800b31c:	e00b      	b.n	800b336 <HAL_TIM_IC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 800b31e:	687b      	ldr	r3, [r7, #4]
 800b320:	681b      	ldr	r3, [r3, #0]
 800b322:	68da      	ldr	r2, [r3, #12]
 800b324:	687b      	ldr	r3, [r7, #4]
 800b326:	681b      	ldr	r3, [r3, #0]
 800b328:	f022 0210 	bic.w	r2, r2, #16
 800b32c:	60da      	str	r2, [r3, #12]
      break;
 800b32e:	e002      	b.n	800b336 <HAL_TIM_IC_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 800b330:	2301      	movs	r3, #1
 800b332:	73fb      	strb	r3, [r7, #15]
      break;
 800b334:	bf00      	nop
  }

  if (status == HAL_OK)
 800b336:	7bfb      	ldrb	r3, [r7, #15]
 800b338:	2b00      	cmp	r3, #0
 800b33a:	d166      	bne.n	800b40a <HAL_TIM_IC_Stop_IT+0x172>
  {
    /* Disable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800b33c:	687b      	ldr	r3, [r7, #4]
 800b33e:	681b      	ldr	r3, [r3, #0]
 800b340:	2200      	movs	r2, #0
 800b342:	6839      	ldr	r1, [r7, #0]
 800b344:	4618      	mov	r0, r3
 800b346:	f001 f983 	bl	800c650 <TIM_CCxChannelCmd>

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 800b34a:	687b      	ldr	r3, [r7, #4]
 800b34c:	681b      	ldr	r3, [r3, #0]
 800b34e:	6a1a      	ldr	r2, [r3, #32]
 800b350:	f241 1311 	movw	r3, #4369	; 0x1111
 800b354:	4013      	ands	r3, r2
 800b356:	2b00      	cmp	r3, #0
 800b358:	d10f      	bne.n	800b37a <HAL_TIM_IC_Stop_IT+0xe2>
 800b35a:	687b      	ldr	r3, [r7, #4]
 800b35c:	681b      	ldr	r3, [r3, #0]
 800b35e:	6a1a      	ldr	r2, [r3, #32]
 800b360:	f240 4344 	movw	r3, #1092	; 0x444
 800b364:	4013      	ands	r3, r2
 800b366:	2b00      	cmp	r3, #0
 800b368:	d107      	bne.n	800b37a <HAL_TIM_IC_Stop_IT+0xe2>
 800b36a:	687b      	ldr	r3, [r7, #4]
 800b36c:	681b      	ldr	r3, [r3, #0]
 800b36e:	681a      	ldr	r2, [r3, #0]
 800b370:	687b      	ldr	r3, [r7, #4]
 800b372:	681b      	ldr	r3, [r3, #0]
 800b374:	f022 0201 	bic.w	r2, r2, #1
 800b378:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800b37a:	683b      	ldr	r3, [r7, #0]
 800b37c:	2b00      	cmp	r3, #0
 800b37e:	d104      	bne.n	800b38a <HAL_TIM_IC_Stop_IT+0xf2>
 800b380:	687b      	ldr	r3, [r7, #4]
 800b382:	2201      	movs	r2, #1
 800b384:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b388:	e023      	b.n	800b3d2 <HAL_TIM_IC_Stop_IT+0x13a>
 800b38a:	683b      	ldr	r3, [r7, #0]
 800b38c:	2b04      	cmp	r3, #4
 800b38e:	d104      	bne.n	800b39a <HAL_TIM_IC_Stop_IT+0x102>
 800b390:	687b      	ldr	r3, [r7, #4]
 800b392:	2201      	movs	r2, #1
 800b394:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800b398:	e01b      	b.n	800b3d2 <HAL_TIM_IC_Stop_IT+0x13a>
 800b39a:	683b      	ldr	r3, [r7, #0]
 800b39c:	2b08      	cmp	r3, #8
 800b39e:	d104      	bne.n	800b3aa <HAL_TIM_IC_Stop_IT+0x112>
 800b3a0:	687b      	ldr	r3, [r7, #4]
 800b3a2:	2201      	movs	r2, #1
 800b3a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b3a8:	e013      	b.n	800b3d2 <HAL_TIM_IC_Stop_IT+0x13a>
 800b3aa:	683b      	ldr	r3, [r7, #0]
 800b3ac:	2b0c      	cmp	r3, #12
 800b3ae:	d104      	bne.n	800b3ba <HAL_TIM_IC_Stop_IT+0x122>
 800b3b0:	687b      	ldr	r3, [r7, #4]
 800b3b2:	2201      	movs	r2, #1
 800b3b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800b3b8:	e00b      	b.n	800b3d2 <HAL_TIM_IC_Stop_IT+0x13a>
 800b3ba:	683b      	ldr	r3, [r7, #0]
 800b3bc:	2b10      	cmp	r3, #16
 800b3be:	d104      	bne.n	800b3ca <HAL_TIM_IC_Stop_IT+0x132>
 800b3c0:	687b      	ldr	r3, [r7, #4]
 800b3c2:	2201      	movs	r2, #1
 800b3c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800b3c8:	e003      	b.n	800b3d2 <HAL_TIM_IC_Stop_IT+0x13a>
 800b3ca:	687b      	ldr	r3, [r7, #4]
 800b3cc:	2201      	movs	r2, #1
 800b3ce:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800b3d2:	683b      	ldr	r3, [r7, #0]
 800b3d4:	2b00      	cmp	r3, #0
 800b3d6:	d104      	bne.n	800b3e2 <HAL_TIM_IC_Stop_IT+0x14a>
 800b3d8:	687b      	ldr	r3, [r7, #4]
 800b3da:	2201      	movs	r2, #1
 800b3dc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b3e0:	e013      	b.n	800b40a <HAL_TIM_IC_Stop_IT+0x172>
 800b3e2:	683b      	ldr	r3, [r7, #0]
 800b3e4:	2b04      	cmp	r3, #4
 800b3e6:	d104      	bne.n	800b3f2 <HAL_TIM_IC_Stop_IT+0x15a>
 800b3e8:	687b      	ldr	r3, [r7, #4]
 800b3ea:	2201      	movs	r2, #1
 800b3ec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b3f0:	e00b      	b.n	800b40a <HAL_TIM_IC_Stop_IT+0x172>
 800b3f2:	683b      	ldr	r3, [r7, #0]
 800b3f4:	2b08      	cmp	r3, #8
 800b3f6:	d104      	bne.n	800b402 <HAL_TIM_IC_Stop_IT+0x16a>
 800b3f8:	687b      	ldr	r3, [r7, #4]
 800b3fa:	2201      	movs	r2, #1
 800b3fc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800b400:	e003      	b.n	800b40a <HAL_TIM_IC_Stop_IT+0x172>
 800b402:	687b      	ldr	r3, [r7, #4]
 800b404:	2201      	movs	r2, #1
 800b406:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
  }

  /* Return function status */
  return status;
 800b40a:	7bfb      	ldrb	r3, [r7, #15]
}
 800b40c:	4618      	mov	r0, r3
 800b40e:	3710      	adds	r7, #16
 800b410:	46bd      	mov	sp, r7
 800b412:	bd80      	pop	{r7, pc}

0800b414 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800b414:	b580      	push	{r7, lr}
 800b416:	b082      	sub	sp, #8
 800b418:	af00      	add	r7, sp, #0
 800b41a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800b41c:	687b      	ldr	r3, [r7, #4]
 800b41e:	681b      	ldr	r3, [r3, #0]
 800b420:	691b      	ldr	r3, [r3, #16]
 800b422:	f003 0302 	and.w	r3, r3, #2
 800b426:	2b02      	cmp	r3, #2
 800b428:	d122      	bne.n	800b470 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800b42a:	687b      	ldr	r3, [r7, #4]
 800b42c:	681b      	ldr	r3, [r3, #0]
 800b42e:	68db      	ldr	r3, [r3, #12]
 800b430:	f003 0302 	and.w	r3, r3, #2
 800b434:	2b02      	cmp	r3, #2
 800b436:	d11b      	bne.n	800b470 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800b438:	687b      	ldr	r3, [r7, #4]
 800b43a:	681b      	ldr	r3, [r3, #0]
 800b43c:	f06f 0202 	mvn.w	r2, #2
 800b440:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800b442:	687b      	ldr	r3, [r7, #4]
 800b444:	2201      	movs	r2, #1
 800b446:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800b448:	687b      	ldr	r3, [r7, #4]
 800b44a:	681b      	ldr	r3, [r3, #0]
 800b44c:	699b      	ldr	r3, [r3, #24]
 800b44e:	f003 0303 	and.w	r3, r3, #3
 800b452:	2b00      	cmp	r3, #0
 800b454:	d003      	beq.n	800b45e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800b456:	6878      	ldr	r0, [r7, #4]
 800b458:	f7f7 fef2 	bl	8003240 <HAL_TIM_IC_CaptureCallback>
 800b45c:	e005      	b.n	800b46a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800b45e:	6878      	ldr	r0, [r7, #4]
 800b460:	f000 fba0 	bl	800bba4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b464:	6878      	ldr	r0, [r7, #4]
 800b466:	f000 fba7 	bl	800bbb8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b46a:	687b      	ldr	r3, [r7, #4]
 800b46c:	2200      	movs	r2, #0
 800b46e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800b470:	687b      	ldr	r3, [r7, #4]
 800b472:	681b      	ldr	r3, [r3, #0]
 800b474:	691b      	ldr	r3, [r3, #16]
 800b476:	f003 0304 	and.w	r3, r3, #4
 800b47a:	2b04      	cmp	r3, #4
 800b47c:	d122      	bne.n	800b4c4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800b47e:	687b      	ldr	r3, [r7, #4]
 800b480:	681b      	ldr	r3, [r3, #0]
 800b482:	68db      	ldr	r3, [r3, #12]
 800b484:	f003 0304 	and.w	r3, r3, #4
 800b488:	2b04      	cmp	r3, #4
 800b48a:	d11b      	bne.n	800b4c4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800b48c:	687b      	ldr	r3, [r7, #4]
 800b48e:	681b      	ldr	r3, [r3, #0]
 800b490:	f06f 0204 	mvn.w	r2, #4
 800b494:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800b496:	687b      	ldr	r3, [r7, #4]
 800b498:	2202      	movs	r2, #2
 800b49a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800b49c:	687b      	ldr	r3, [r7, #4]
 800b49e:	681b      	ldr	r3, [r3, #0]
 800b4a0:	699b      	ldr	r3, [r3, #24]
 800b4a2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b4a6:	2b00      	cmp	r3, #0
 800b4a8:	d003      	beq.n	800b4b2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b4aa:	6878      	ldr	r0, [r7, #4]
 800b4ac:	f7f7 fec8 	bl	8003240 <HAL_TIM_IC_CaptureCallback>
 800b4b0:	e005      	b.n	800b4be <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b4b2:	6878      	ldr	r0, [r7, #4]
 800b4b4:	f000 fb76 	bl	800bba4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b4b8:	6878      	ldr	r0, [r7, #4]
 800b4ba:	f000 fb7d 	bl	800bbb8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b4be:	687b      	ldr	r3, [r7, #4]
 800b4c0:	2200      	movs	r2, #0
 800b4c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800b4c4:	687b      	ldr	r3, [r7, #4]
 800b4c6:	681b      	ldr	r3, [r3, #0]
 800b4c8:	691b      	ldr	r3, [r3, #16]
 800b4ca:	f003 0308 	and.w	r3, r3, #8
 800b4ce:	2b08      	cmp	r3, #8
 800b4d0:	d122      	bne.n	800b518 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800b4d2:	687b      	ldr	r3, [r7, #4]
 800b4d4:	681b      	ldr	r3, [r3, #0]
 800b4d6:	68db      	ldr	r3, [r3, #12]
 800b4d8:	f003 0308 	and.w	r3, r3, #8
 800b4dc:	2b08      	cmp	r3, #8
 800b4de:	d11b      	bne.n	800b518 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800b4e0:	687b      	ldr	r3, [r7, #4]
 800b4e2:	681b      	ldr	r3, [r3, #0]
 800b4e4:	f06f 0208 	mvn.w	r2, #8
 800b4e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800b4ea:	687b      	ldr	r3, [r7, #4]
 800b4ec:	2204      	movs	r2, #4
 800b4ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800b4f0:	687b      	ldr	r3, [r7, #4]
 800b4f2:	681b      	ldr	r3, [r3, #0]
 800b4f4:	69db      	ldr	r3, [r3, #28]
 800b4f6:	f003 0303 	and.w	r3, r3, #3
 800b4fa:	2b00      	cmp	r3, #0
 800b4fc:	d003      	beq.n	800b506 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b4fe:	6878      	ldr	r0, [r7, #4]
 800b500:	f7f7 fe9e 	bl	8003240 <HAL_TIM_IC_CaptureCallback>
 800b504:	e005      	b.n	800b512 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b506:	6878      	ldr	r0, [r7, #4]
 800b508:	f000 fb4c 	bl	800bba4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b50c:	6878      	ldr	r0, [r7, #4]
 800b50e:	f000 fb53 	bl	800bbb8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b512:	687b      	ldr	r3, [r7, #4]
 800b514:	2200      	movs	r2, #0
 800b516:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800b518:	687b      	ldr	r3, [r7, #4]
 800b51a:	681b      	ldr	r3, [r3, #0]
 800b51c:	691b      	ldr	r3, [r3, #16]
 800b51e:	f003 0310 	and.w	r3, r3, #16
 800b522:	2b10      	cmp	r3, #16
 800b524:	d122      	bne.n	800b56c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800b526:	687b      	ldr	r3, [r7, #4]
 800b528:	681b      	ldr	r3, [r3, #0]
 800b52a:	68db      	ldr	r3, [r3, #12]
 800b52c:	f003 0310 	and.w	r3, r3, #16
 800b530:	2b10      	cmp	r3, #16
 800b532:	d11b      	bne.n	800b56c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800b534:	687b      	ldr	r3, [r7, #4]
 800b536:	681b      	ldr	r3, [r3, #0]
 800b538:	f06f 0210 	mvn.w	r2, #16
 800b53c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800b53e:	687b      	ldr	r3, [r7, #4]
 800b540:	2208      	movs	r2, #8
 800b542:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800b544:	687b      	ldr	r3, [r7, #4]
 800b546:	681b      	ldr	r3, [r3, #0]
 800b548:	69db      	ldr	r3, [r3, #28]
 800b54a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b54e:	2b00      	cmp	r3, #0
 800b550:	d003      	beq.n	800b55a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b552:	6878      	ldr	r0, [r7, #4]
 800b554:	f7f7 fe74 	bl	8003240 <HAL_TIM_IC_CaptureCallback>
 800b558:	e005      	b.n	800b566 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b55a:	6878      	ldr	r0, [r7, #4]
 800b55c:	f000 fb22 	bl	800bba4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b560:	6878      	ldr	r0, [r7, #4]
 800b562:	f000 fb29 	bl	800bbb8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b566:	687b      	ldr	r3, [r7, #4]
 800b568:	2200      	movs	r2, #0
 800b56a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800b56c:	687b      	ldr	r3, [r7, #4]
 800b56e:	681b      	ldr	r3, [r3, #0]
 800b570:	691b      	ldr	r3, [r3, #16]
 800b572:	f003 0301 	and.w	r3, r3, #1
 800b576:	2b01      	cmp	r3, #1
 800b578:	d10e      	bne.n	800b598 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800b57a:	687b      	ldr	r3, [r7, #4]
 800b57c:	681b      	ldr	r3, [r3, #0]
 800b57e:	68db      	ldr	r3, [r3, #12]
 800b580:	f003 0301 	and.w	r3, r3, #1
 800b584:	2b01      	cmp	r3, #1
 800b586:	d107      	bne.n	800b598 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800b588:	687b      	ldr	r3, [r7, #4]
 800b58a:	681b      	ldr	r3, [r3, #0]
 800b58c:	f06f 0201 	mvn.w	r2, #1
 800b590:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800b592:	6878      	ldr	r0, [r7, #4]
 800b594:	f7f7 fed0 	bl	8003338 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800b598:	687b      	ldr	r3, [r7, #4]
 800b59a:	681b      	ldr	r3, [r3, #0]
 800b59c:	691b      	ldr	r3, [r3, #16]
 800b59e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b5a2:	2b80      	cmp	r3, #128	; 0x80
 800b5a4:	d10e      	bne.n	800b5c4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800b5a6:	687b      	ldr	r3, [r7, #4]
 800b5a8:	681b      	ldr	r3, [r3, #0]
 800b5aa:	68db      	ldr	r3, [r3, #12]
 800b5ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b5b0:	2b80      	cmp	r3, #128	; 0x80
 800b5b2:	d107      	bne.n	800b5c4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800b5b4:	687b      	ldr	r3, [r7, #4]
 800b5b6:	681b      	ldr	r3, [r3, #0]
 800b5b8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800b5bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800b5be:	6878      	ldr	r0, [r7, #4]
 800b5c0:	f001 f904 	bl	800c7cc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800b5c4:	687b      	ldr	r3, [r7, #4]
 800b5c6:	681b      	ldr	r3, [r3, #0]
 800b5c8:	691b      	ldr	r3, [r3, #16]
 800b5ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b5ce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b5d2:	d10e      	bne.n	800b5f2 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800b5d4:	687b      	ldr	r3, [r7, #4]
 800b5d6:	681b      	ldr	r3, [r3, #0]
 800b5d8:	68db      	ldr	r3, [r3, #12]
 800b5da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b5de:	2b80      	cmp	r3, #128	; 0x80
 800b5e0:	d107      	bne.n	800b5f2 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800b5e2:	687b      	ldr	r3, [r7, #4]
 800b5e4:	681b      	ldr	r3, [r3, #0]
 800b5e6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800b5ea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800b5ec:	6878      	ldr	r0, [r7, #4]
 800b5ee:	f001 f8f7 	bl	800c7e0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800b5f2:	687b      	ldr	r3, [r7, #4]
 800b5f4:	681b      	ldr	r3, [r3, #0]
 800b5f6:	691b      	ldr	r3, [r3, #16]
 800b5f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b5fc:	2b40      	cmp	r3, #64	; 0x40
 800b5fe:	d10e      	bne.n	800b61e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800b600:	687b      	ldr	r3, [r7, #4]
 800b602:	681b      	ldr	r3, [r3, #0]
 800b604:	68db      	ldr	r3, [r3, #12]
 800b606:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b60a:	2b40      	cmp	r3, #64	; 0x40
 800b60c:	d107      	bne.n	800b61e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800b60e:	687b      	ldr	r3, [r7, #4]
 800b610:	681b      	ldr	r3, [r3, #0]
 800b612:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800b616:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800b618:	6878      	ldr	r0, [r7, #4]
 800b61a:	f000 fad7 	bl	800bbcc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800b61e:	687b      	ldr	r3, [r7, #4]
 800b620:	681b      	ldr	r3, [r3, #0]
 800b622:	691b      	ldr	r3, [r3, #16]
 800b624:	f003 0320 	and.w	r3, r3, #32
 800b628:	2b20      	cmp	r3, #32
 800b62a:	d10e      	bne.n	800b64a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800b62c:	687b      	ldr	r3, [r7, #4]
 800b62e:	681b      	ldr	r3, [r3, #0]
 800b630:	68db      	ldr	r3, [r3, #12]
 800b632:	f003 0320 	and.w	r3, r3, #32
 800b636:	2b20      	cmp	r3, #32
 800b638:	d107      	bne.n	800b64a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800b63a:	687b      	ldr	r3, [r7, #4]
 800b63c:	681b      	ldr	r3, [r3, #0]
 800b63e:	f06f 0220 	mvn.w	r2, #32
 800b642:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800b644:	6878      	ldr	r0, [r7, #4]
 800b646:	f001 f8b7 	bl	800c7b8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800b64a:	bf00      	nop
 800b64c:	3708      	adds	r7, #8
 800b64e:	46bd      	mov	sp, r7
 800b650:	bd80      	pop	{r7, pc}

0800b652 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 800b652:	b580      	push	{r7, lr}
 800b654:	b086      	sub	sp, #24
 800b656:	af00      	add	r7, sp, #0
 800b658:	60f8      	str	r0, [r7, #12]
 800b65a:	60b9      	str	r1, [r7, #8]
 800b65c:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800b65e:	2300      	movs	r3, #0
 800b660:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 800b662:	68fb      	ldr	r3, [r7, #12]
 800b664:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b668:	2b01      	cmp	r3, #1
 800b66a:	d101      	bne.n	800b670 <HAL_TIM_IC_ConfigChannel+0x1e>
 800b66c:	2302      	movs	r3, #2
 800b66e:	e088      	b.n	800b782 <HAL_TIM_IC_ConfigChannel+0x130>
 800b670:	68fb      	ldr	r3, [r7, #12]
 800b672:	2201      	movs	r2, #1
 800b674:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 800b678:	687b      	ldr	r3, [r7, #4]
 800b67a:	2b00      	cmp	r3, #0
 800b67c:	d11b      	bne.n	800b6b6 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 800b67e:	68fb      	ldr	r3, [r7, #12]
 800b680:	6818      	ldr	r0, [r3, #0]
 800b682:	68bb      	ldr	r3, [r7, #8]
 800b684:	6819      	ldr	r1, [r3, #0]
 800b686:	68bb      	ldr	r3, [r7, #8]
 800b688:	685a      	ldr	r2, [r3, #4]
 800b68a:	68bb      	ldr	r3, [r7, #8]
 800b68c:	68db      	ldr	r3, [r3, #12]
 800b68e:	f000 fe17 	bl	800c2c0 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800b692:	68fb      	ldr	r3, [r7, #12]
 800b694:	681b      	ldr	r3, [r3, #0]
 800b696:	699a      	ldr	r2, [r3, #24]
 800b698:	68fb      	ldr	r3, [r7, #12]
 800b69a:	681b      	ldr	r3, [r3, #0]
 800b69c:	f022 020c 	bic.w	r2, r2, #12
 800b6a0:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800b6a2:	68fb      	ldr	r3, [r7, #12]
 800b6a4:	681b      	ldr	r3, [r3, #0]
 800b6a6:	6999      	ldr	r1, [r3, #24]
 800b6a8:	68bb      	ldr	r3, [r7, #8]
 800b6aa:	689a      	ldr	r2, [r3, #8]
 800b6ac:	68fb      	ldr	r3, [r7, #12]
 800b6ae:	681b      	ldr	r3, [r3, #0]
 800b6b0:	430a      	orrs	r2, r1
 800b6b2:	619a      	str	r2, [r3, #24]
 800b6b4:	e060      	b.n	800b778 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 800b6b6:	687b      	ldr	r3, [r7, #4]
 800b6b8:	2b04      	cmp	r3, #4
 800b6ba:	d11c      	bne.n	800b6f6 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800b6bc:	68fb      	ldr	r3, [r7, #12]
 800b6be:	6818      	ldr	r0, [r3, #0]
 800b6c0:	68bb      	ldr	r3, [r7, #8]
 800b6c2:	6819      	ldr	r1, [r3, #0]
 800b6c4:	68bb      	ldr	r3, [r7, #8]
 800b6c6:	685a      	ldr	r2, [r3, #4]
 800b6c8:	68bb      	ldr	r3, [r7, #8]
 800b6ca:	68db      	ldr	r3, [r3, #12]
 800b6cc:	f000 fe9b 	bl	800c406 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800b6d0:	68fb      	ldr	r3, [r7, #12]
 800b6d2:	681b      	ldr	r3, [r3, #0]
 800b6d4:	699a      	ldr	r2, [r3, #24]
 800b6d6:	68fb      	ldr	r3, [r7, #12]
 800b6d8:	681b      	ldr	r3, [r3, #0]
 800b6da:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800b6de:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800b6e0:	68fb      	ldr	r3, [r7, #12]
 800b6e2:	681b      	ldr	r3, [r3, #0]
 800b6e4:	6999      	ldr	r1, [r3, #24]
 800b6e6:	68bb      	ldr	r3, [r7, #8]
 800b6e8:	689b      	ldr	r3, [r3, #8]
 800b6ea:	021a      	lsls	r2, r3, #8
 800b6ec:	68fb      	ldr	r3, [r7, #12]
 800b6ee:	681b      	ldr	r3, [r3, #0]
 800b6f0:	430a      	orrs	r2, r1
 800b6f2:	619a      	str	r2, [r3, #24]
 800b6f4:	e040      	b.n	800b778 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 800b6f6:	687b      	ldr	r3, [r7, #4]
 800b6f8:	2b08      	cmp	r3, #8
 800b6fa:	d11b      	bne.n	800b734 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800b6fc:	68fb      	ldr	r3, [r7, #12]
 800b6fe:	6818      	ldr	r0, [r3, #0]
 800b700:	68bb      	ldr	r3, [r7, #8]
 800b702:	6819      	ldr	r1, [r3, #0]
 800b704:	68bb      	ldr	r3, [r7, #8]
 800b706:	685a      	ldr	r2, [r3, #4]
 800b708:	68bb      	ldr	r3, [r7, #8]
 800b70a:	68db      	ldr	r3, [r3, #12]
 800b70c:	f000 fee8 	bl	800c4e0 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800b710:	68fb      	ldr	r3, [r7, #12]
 800b712:	681b      	ldr	r3, [r3, #0]
 800b714:	69da      	ldr	r2, [r3, #28]
 800b716:	68fb      	ldr	r3, [r7, #12]
 800b718:	681b      	ldr	r3, [r3, #0]
 800b71a:	f022 020c 	bic.w	r2, r2, #12
 800b71e:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800b720:	68fb      	ldr	r3, [r7, #12]
 800b722:	681b      	ldr	r3, [r3, #0]
 800b724:	69d9      	ldr	r1, [r3, #28]
 800b726:	68bb      	ldr	r3, [r7, #8]
 800b728:	689a      	ldr	r2, [r3, #8]
 800b72a:	68fb      	ldr	r3, [r7, #12]
 800b72c:	681b      	ldr	r3, [r3, #0]
 800b72e:	430a      	orrs	r2, r1
 800b730:	61da      	str	r2, [r3, #28]
 800b732:	e021      	b.n	800b778 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 800b734:	687b      	ldr	r3, [r7, #4]
 800b736:	2b0c      	cmp	r3, #12
 800b738:	d11c      	bne.n	800b774 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 800b73a:	68fb      	ldr	r3, [r7, #12]
 800b73c:	6818      	ldr	r0, [r3, #0]
 800b73e:	68bb      	ldr	r3, [r7, #8]
 800b740:	6819      	ldr	r1, [r3, #0]
 800b742:	68bb      	ldr	r3, [r7, #8]
 800b744:	685a      	ldr	r2, [r3, #4]
 800b746:	68bb      	ldr	r3, [r7, #8]
 800b748:	68db      	ldr	r3, [r3, #12]
 800b74a:	f000 ff05 	bl	800c558 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800b74e:	68fb      	ldr	r3, [r7, #12]
 800b750:	681b      	ldr	r3, [r3, #0]
 800b752:	69da      	ldr	r2, [r3, #28]
 800b754:	68fb      	ldr	r3, [r7, #12]
 800b756:	681b      	ldr	r3, [r3, #0]
 800b758:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800b75c:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800b75e:	68fb      	ldr	r3, [r7, #12]
 800b760:	681b      	ldr	r3, [r3, #0]
 800b762:	69d9      	ldr	r1, [r3, #28]
 800b764:	68bb      	ldr	r3, [r7, #8]
 800b766:	689b      	ldr	r3, [r3, #8]
 800b768:	021a      	lsls	r2, r3, #8
 800b76a:	68fb      	ldr	r3, [r7, #12]
 800b76c:	681b      	ldr	r3, [r3, #0]
 800b76e:	430a      	orrs	r2, r1
 800b770:	61da      	str	r2, [r3, #28]
 800b772:	e001      	b.n	800b778 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 800b774:	2301      	movs	r3, #1
 800b776:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 800b778:	68fb      	ldr	r3, [r7, #12]
 800b77a:	2200      	movs	r2, #0
 800b77c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800b780:	7dfb      	ldrb	r3, [r7, #23]
}
 800b782:	4618      	mov	r0, r3
 800b784:	3718      	adds	r7, #24
 800b786:	46bd      	mov	sp, r7
 800b788:	bd80      	pop	{r7, pc}
	...

0800b78c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800b78c:	b580      	push	{r7, lr}
 800b78e:	b086      	sub	sp, #24
 800b790:	af00      	add	r7, sp, #0
 800b792:	60f8      	str	r0, [r7, #12]
 800b794:	60b9      	str	r1, [r7, #8]
 800b796:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800b798:	2300      	movs	r3, #0
 800b79a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800b79c:	68fb      	ldr	r3, [r7, #12]
 800b79e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b7a2:	2b01      	cmp	r3, #1
 800b7a4:	d101      	bne.n	800b7aa <HAL_TIM_PWM_ConfigChannel+0x1e>
 800b7a6:	2302      	movs	r3, #2
 800b7a8:	e0ff      	b.n	800b9aa <HAL_TIM_PWM_ConfigChannel+0x21e>
 800b7aa:	68fb      	ldr	r3, [r7, #12]
 800b7ac:	2201      	movs	r2, #1
 800b7ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800b7b2:	687b      	ldr	r3, [r7, #4]
 800b7b4:	2b14      	cmp	r3, #20
 800b7b6:	f200 80f0 	bhi.w	800b99a <HAL_TIM_PWM_ConfigChannel+0x20e>
 800b7ba:	a201      	add	r2, pc, #4	; (adr r2, 800b7c0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800b7bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b7c0:	0800b815 	.word	0x0800b815
 800b7c4:	0800b99b 	.word	0x0800b99b
 800b7c8:	0800b99b 	.word	0x0800b99b
 800b7cc:	0800b99b 	.word	0x0800b99b
 800b7d0:	0800b855 	.word	0x0800b855
 800b7d4:	0800b99b 	.word	0x0800b99b
 800b7d8:	0800b99b 	.word	0x0800b99b
 800b7dc:	0800b99b 	.word	0x0800b99b
 800b7e0:	0800b897 	.word	0x0800b897
 800b7e4:	0800b99b 	.word	0x0800b99b
 800b7e8:	0800b99b 	.word	0x0800b99b
 800b7ec:	0800b99b 	.word	0x0800b99b
 800b7f0:	0800b8d7 	.word	0x0800b8d7
 800b7f4:	0800b99b 	.word	0x0800b99b
 800b7f8:	0800b99b 	.word	0x0800b99b
 800b7fc:	0800b99b 	.word	0x0800b99b
 800b800:	0800b919 	.word	0x0800b919
 800b804:	0800b99b 	.word	0x0800b99b
 800b808:	0800b99b 	.word	0x0800b99b
 800b80c:	0800b99b 	.word	0x0800b99b
 800b810:	0800b959 	.word	0x0800b959
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800b814:	68fb      	ldr	r3, [r7, #12]
 800b816:	681b      	ldr	r3, [r3, #0]
 800b818:	68b9      	ldr	r1, [r7, #8]
 800b81a:	4618      	mov	r0, r3
 800b81c:	f000 fa7a 	bl	800bd14 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800b820:	68fb      	ldr	r3, [r7, #12]
 800b822:	681b      	ldr	r3, [r3, #0]
 800b824:	699a      	ldr	r2, [r3, #24]
 800b826:	68fb      	ldr	r3, [r7, #12]
 800b828:	681b      	ldr	r3, [r3, #0]
 800b82a:	f042 0208 	orr.w	r2, r2, #8
 800b82e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800b830:	68fb      	ldr	r3, [r7, #12]
 800b832:	681b      	ldr	r3, [r3, #0]
 800b834:	699a      	ldr	r2, [r3, #24]
 800b836:	68fb      	ldr	r3, [r7, #12]
 800b838:	681b      	ldr	r3, [r3, #0]
 800b83a:	f022 0204 	bic.w	r2, r2, #4
 800b83e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800b840:	68fb      	ldr	r3, [r7, #12]
 800b842:	681b      	ldr	r3, [r3, #0]
 800b844:	6999      	ldr	r1, [r3, #24]
 800b846:	68bb      	ldr	r3, [r7, #8]
 800b848:	691a      	ldr	r2, [r3, #16]
 800b84a:	68fb      	ldr	r3, [r7, #12]
 800b84c:	681b      	ldr	r3, [r3, #0]
 800b84e:	430a      	orrs	r2, r1
 800b850:	619a      	str	r2, [r3, #24]
      break;
 800b852:	e0a5      	b.n	800b9a0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800b854:	68fb      	ldr	r3, [r7, #12]
 800b856:	681b      	ldr	r3, [r3, #0]
 800b858:	68b9      	ldr	r1, [r7, #8]
 800b85a:	4618      	mov	r0, r3
 800b85c:	f000 faea 	bl	800be34 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800b860:	68fb      	ldr	r3, [r7, #12]
 800b862:	681b      	ldr	r3, [r3, #0]
 800b864:	699a      	ldr	r2, [r3, #24]
 800b866:	68fb      	ldr	r3, [r7, #12]
 800b868:	681b      	ldr	r3, [r3, #0]
 800b86a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b86e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800b870:	68fb      	ldr	r3, [r7, #12]
 800b872:	681b      	ldr	r3, [r3, #0]
 800b874:	699a      	ldr	r2, [r3, #24]
 800b876:	68fb      	ldr	r3, [r7, #12]
 800b878:	681b      	ldr	r3, [r3, #0]
 800b87a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b87e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800b880:	68fb      	ldr	r3, [r7, #12]
 800b882:	681b      	ldr	r3, [r3, #0]
 800b884:	6999      	ldr	r1, [r3, #24]
 800b886:	68bb      	ldr	r3, [r7, #8]
 800b888:	691b      	ldr	r3, [r3, #16]
 800b88a:	021a      	lsls	r2, r3, #8
 800b88c:	68fb      	ldr	r3, [r7, #12]
 800b88e:	681b      	ldr	r3, [r3, #0]
 800b890:	430a      	orrs	r2, r1
 800b892:	619a      	str	r2, [r3, #24]
      break;
 800b894:	e084      	b.n	800b9a0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800b896:	68fb      	ldr	r3, [r7, #12]
 800b898:	681b      	ldr	r3, [r3, #0]
 800b89a:	68b9      	ldr	r1, [r7, #8]
 800b89c:	4618      	mov	r0, r3
 800b89e:	f000 fb53 	bl	800bf48 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800b8a2:	68fb      	ldr	r3, [r7, #12]
 800b8a4:	681b      	ldr	r3, [r3, #0]
 800b8a6:	69da      	ldr	r2, [r3, #28]
 800b8a8:	68fb      	ldr	r3, [r7, #12]
 800b8aa:	681b      	ldr	r3, [r3, #0]
 800b8ac:	f042 0208 	orr.w	r2, r2, #8
 800b8b0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800b8b2:	68fb      	ldr	r3, [r7, #12]
 800b8b4:	681b      	ldr	r3, [r3, #0]
 800b8b6:	69da      	ldr	r2, [r3, #28]
 800b8b8:	68fb      	ldr	r3, [r7, #12]
 800b8ba:	681b      	ldr	r3, [r3, #0]
 800b8bc:	f022 0204 	bic.w	r2, r2, #4
 800b8c0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800b8c2:	68fb      	ldr	r3, [r7, #12]
 800b8c4:	681b      	ldr	r3, [r3, #0]
 800b8c6:	69d9      	ldr	r1, [r3, #28]
 800b8c8:	68bb      	ldr	r3, [r7, #8]
 800b8ca:	691a      	ldr	r2, [r3, #16]
 800b8cc:	68fb      	ldr	r3, [r7, #12]
 800b8ce:	681b      	ldr	r3, [r3, #0]
 800b8d0:	430a      	orrs	r2, r1
 800b8d2:	61da      	str	r2, [r3, #28]
      break;
 800b8d4:	e064      	b.n	800b9a0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800b8d6:	68fb      	ldr	r3, [r7, #12]
 800b8d8:	681b      	ldr	r3, [r3, #0]
 800b8da:	68b9      	ldr	r1, [r7, #8]
 800b8dc:	4618      	mov	r0, r3
 800b8de:	f000 fbbb 	bl	800c058 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800b8e2:	68fb      	ldr	r3, [r7, #12]
 800b8e4:	681b      	ldr	r3, [r3, #0]
 800b8e6:	69da      	ldr	r2, [r3, #28]
 800b8e8:	68fb      	ldr	r3, [r7, #12]
 800b8ea:	681b      	ldr	r3, [r3, #0]
 800b8ec:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b8f0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800b8f2:	68fb      	ldr	r3, [r7, #12]
 800b8f4:	681b      	ldr	r3, [r3, #0]
 800b8f6:	69da      	ldr	r2, [r3, #28]
 800b8f8:	68fb      	ldr	r3, [r7, #12]
 800b8fa:	681b      	ldr	r3, [r3, #0]
 800b8fc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b900:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800b902:	68fb      	ldr	r3, [r7, #12]
 800b904:	681b      	ldr	r3, [r3, #0]
 800b906:	69d9      	ldr	r1, [r3, #28]
 800b908:	68bb      	ldr	r3, [r7, #8]
 800b90a:	691b      	ldr	r3, [r3, #16]
 800b90c:	021a      	lsls	r2, r3, #8
 800b90e:	68fb      	ldr	r3, [r7, #12]
 800b910:	681b      	ldr	r3, [r3, #0]
 800b912:	430a      	orrs	r2, r1
 800b914:	61da      	str	r2, [r3, #28]
      break;
 800b916:	e043      	b.n	800b9a0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800b918:	68fb      	ldr	r3, [r7, #12]
 800b91a:	681b      	ldr	r3, [r3, #0]
 800b91c:	68b9      	ldr	r1, [r7, #8]
 800b91e:	4618      	mov	r0, r3
 800b920:	f000 fc04 	bl	800c12c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800b924:	68fb      	ldr	r3, [r7, #12]
 800b926:	681b      	ldr	r3, [r3, #0]
 800b928:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b92a:	68fb      	ldr	r3, [r7, #12]
 800b92c:	681b      	ldr	r3, [r3, #0]
 800b92e:	f042 0208 	orr.w	r2, r2, #8
 800b932:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800b934:	68fb      	ldr	r3, [r7, #12]
 800b936:	681b      	ldr	r3, [r3, #0]
 800b938:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b93a:	68fb      	ldr	r3, [r7, #12]
 800b93c:	681b      	ldr	r3, [r3, #0]
 800b93e:	f022 0204 	bic.w	r2, r2, #4
 800b942:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800b944:	68fb      	ldr	r3, [r7, #12]
 800b946:	681b      	ldr	r3, [r3, #0]
 800b948:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800b94a:	68bb      	ldr	r3, [r7, #8]
 800b94c:	691a      	ldr	r2, [r3, #16]
 800b94e:	68fb      	ldr	r3, [r7, #12]
 800b950:	681b      	ldr	r3, [r3, #0]
 800b952:	430a      	orrs	r2, r1
 800b954:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800b956:	e023      	b.n	800b9a0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800b958:	68fb      	ldr	r3, [r7, #12]
 800b95a:	681b      	ldr	r3, [r3, #0]
 800b95c:	68b9      	ldr	r1, [r7, #8]
 800b95e:	4618      	mov	r0, r3
 800b960:	f000 fc48 	bl	800c1f4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800b964:	68fb      	ldr	r3, [r7, #12]
 800b966:	681b      	ldr	r3, [r3, #0]
 800b968:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b96a:	68fb      	ldr	r3, [r7, #12]
 800b96c:	681b      	ldr	r3, [r3, #0]
 800b96e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b972:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800b974:	68fb      	ldr	r3, [r7, #12]
 800b976:	681b      	ldr	r3, [r3, #0]
 800b978:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b97a:	68fb      	ldr	r3, [r7, #12]
 800b97c:	681b      	ldr	r3, [r3, #0]
 800b97e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b982:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800b984:	68fb      	ldr	r3, [r7, #12]
 800b986:	681b      	ldr	r3, [r3, #0]
 800b988:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800b98a:	68bb      	ldr	r3, [r7, #8]
 800b98c:	691b      	ldr	r3, [r3, #16]
 800b98e:	021a      	lsls	r2, r3, #8
 800b990:	68fb      	ldr	r3, [r7, #12]
 800b992:	681b      	ldr	r3, [r3, #0]
 800b994:	430a      	orrs	r2, r1
 800b996:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800b998:	e002      	b.n	800b9a0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800b99a:	2301      	movs	r3, #1
 800b99c:	75fb      	strb	r3, [r7, #23]
      break;
 800b99e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800b9a0:	68fb      	ldr	r3, [r7, #12]
 800b9a2:	2200      	movs	r2, #0
 800b9a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800b9a8:	7dfb      	ldrb	r3, [r7, #23]
}
 800b9aa:	4618      	mov	r0, r3
 800b9ac:	3718      	adds	r7, #24
 800b9ae:	46bd      	mov	sp, r7
 800b9b0:	bd80      	pop	{r7, pc}
 800b9b2:	bf00      	nop

0800b9b4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800b9b4:	b580      	push	{r7, lr}
 800b9b6:	b084      	sub	sp, #16
 800b9b8:	af00      	add	r7, sp, #0
 800b9ba:	6078      	str	r0, [r7, #4]
 800b9bc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800b9be:	2300      	movs	r3, #0
 800b9c0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800b9c2:	687b      	ldr	r3, [r7, #4]
 800b9c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b9c8:	2b01      	cmp	r3, #1
 800b9ca:	d101      	bne.n	800b9d0 <HAL_TIM_ConfigClockSource+0x1c>
 800b9cc:	2302      	movs	r3, #2
 800b9ce:	e0dc      	b.n	800bb8a <HAL_TIM_ConfigClockSource+0x1d6>
 800b9d0:	687b      	ldr	r3, [r7, #4]
 800b9d2:	2201      	movs	r2, #1
 800b9d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800b9d8:	687b      	ldr	r3, [r7, #4]
 800b9da:	2202      	movs	r2, #2
 800b9dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800b9e0:	687b      	ldr	r3, [r7, #4]
 800b9e2:	681b      	ldr	r3, [r3, #0]
 800b9e4:	689b      	ldr	r3, [r3, #8]
 800b9e6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800b9e8:	68ba      	ldr	r2, [r7, #8]
 800b9ea:	4b6a      	ldr	r3, [pc, #424]	; (800bb94 <HAL_TIM_ConfigClockSource+0x1e0>)
 800b9ec:	4013      	ands	r3, r2
 800b9ee:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b9f0:	68bb      	ldr	r3, [r7, #8]
 800b9f2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800b9f6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800b9f8:	687b      	ldr	r3, [r7, #4]
 800b9fa:	681b      	ldr	r3, [r3, #0]
 800b9fc:	68ba      	ldr	r2, [r7, #8]
 800b9fe:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800ba00:	683b      	ldr	r3, [r7, #0]
 800ba02:	681b      	ldr	r3, [r3, #0]
 800ba04:	4a64      	ldr	r2, [pc, #400]	; (800bb98 <HAL_TIM_ConfigClockSource+0x1e4>)
 800ba06:	4293      	cmp	r3, r2
 800ba08:	f000 80a9 	beq.w	800bb5e <HAL_TIM_ConfigClockSource+0x1aa>
 800ba0c:	4a62      	ldr	r2, [pc, #392]	; (800bb98 <HAL_TIM_ConfigClockSource+0x1e4>)
 800ba0e:	4293      	cmp	r3, r2
 800ba10:	f200 80ae 	bhi.w	800bb70 <HAL_TIM_ConfigClockSource+0x1bc>
 800ba14:	4a61      	ldr	r2, [pc, #388]	; (800bb9c <HAL_TIM_ConfigClockSource+0x1e8>)
 800ba16:	4293      	cmp	r3, r2
 800ba18:	f000 80a1 	beq.w	800bb5e <HAL_TIM_ConfigClockSource+0x1aa>
 800ba1c:	4a5f      	ldr	r2, [pc, #380]	; (800bb9c <HAL_TIM_ConfigClockSource+0x1e8>)
 800ba1e:	4293      	cmp	r3, r2
 800ba20:	f200 80a6 	bhi.w	800bb70 <HAL_TIM_ConfigClockSource+0x1bc>
 800ba24:	4a5e      	ldr	r2, [pc, #376]	; (800bba0 <HAL_TIM_ConfigClockSource+0x1ec>)
 800ba26:	4293      	cmp	r3, r2
 800ba28:	f000 8099 	beq.w	800bb5e <HAL_TIM_ConfigClockSource+0x1aa>
 800ba2c:	4a5c      	ldr	r2, [pc, #368]	; (800bba0 <HAL_TIM_ConfigClockSource+0x1ec>)
 800ba2e:	4293      	cmp	r3, r2
 800ba30:	f200 809e 	bhi.w	800bb70 <HAL_TIM_ConfigClockSource+0x1bc>
 800ba34:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800ba38:	f000 8091 	beq.w	800bb5e <HAL_TIM_ConfigClockSource+0x1aa>
 800ba3c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800ba40:	f200 8096 	bhi.w	800bb70 <HAL_TIM_ConfigClockSource+0x1bc>
 800ba44:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ba48:	f000 8089 	beq.w	800bb5e <HAL_TIM_ConfigClockSource+0x1aa>
 800ba4c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ba50:	f200 808e 	bhi.w	800bb70 <HAL_TIM_ConfigClockSource+0x1bc>
 800ba54:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ba58:	d03e      	beq.n	800bad8 <HAL_TIM_ConfigClockSource+0x124>
 800ba5a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ba5e:	f200 8087 	bhi.w	800bb70 <HAL_TIM_ConfigClockSource+0x1bc>
 800ba62:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ba66:	f000 8086 	beq.w	800bb76 <HAL_TIM_ConfigClockSource+0x1c2>
 800ba6a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ba6e:	d87f      	bhi.n	800bb70 <HAL_TIM_ConfigClockSource+0x1bc>
 800ba70:	2b70      	cmp	r3, #112	; 0x70
 800ba72:	d01a      	beq.n	800baaa <HAL_TIM_ConfigClockSource+0xf6>
 800ba74:	2b70      	cmp	r3, #112	; 0x70
 800ba76:	d87b      	bhi.n	800bb70 <HAL_TIM_ConfigClockSource+0x1bc>
 800ba78:	2b60      	cmp	r3, #96	; 0x60
 800ba7a:	d050      	beq.n	800bb1e <HAL_TIM_ConfigClockSource+0x16a>
 800ba7c:	2b60      	cmp	r3, #96	; 0x60
 800ba7e:	d877      	bhi.n	800bb70 <HAL_TIM_ConfigClockSource+0x1bc>
 800ba80:	2b50      	cmp	r3, #80	; 0x50
 800ba82:	d03c      	beq.n	800bafe <HAL_TIM_ConfigClockSource+0x14a>
 800ba84:	2b50      	cmp	r3, #80	; 0x50
 800ba86:	d873      	bhi.n	800bb70 <HAL_TIM_ConfigClockSource+0x1bc>
 800ba88:	2b40      	cmp	r3, #64	; 0x40
 800ba8a:	d058      	beq.n	800bb3e <HAL_TIM_ConfigClockSource+0x18a>
 800ba8c:	2b40      	cmp	r3, #64	; 0x40
 800ba8e:	d86f      	bhi.n	800bb70 <HAL_TIM_ConfigClockSource+0x1bc>
 800ba90:	2b30      	cmp	r3, #48	; 0x30
 800ba92:	d064      	beq.n	800bb5e <HAL_TIM_ConfigClockSource+0x1aa>
 800ba94:	2b30      	cmp	r3, #48	; 0x30
 800ba96:	d86b      	bhi.n	800bb70 <HAL_TIM_ConfigClockSource+0x1bc>
 800ba98:	2b20      	cmp	r3, #32
 800ba9a:	d060      	beq.n	800bb5e <HAL_TIM_ConfigClockSource+0x1aa>
 800ba9c:	2b20      	cmp	r3, #32
 800ba9e:	d867      	bhi.n	800bb70 <HAL_TIM_ConfigClockSource+0x1bc>
 800baa0:	2b00      	cmp	r3, #0
 800baa2:	d05c      	beq.n	800bb5e <HAL_TIM_ConfigClockSource+0x1aa>
 800baa4:	2b10      	cmp	r3, #16
 800baa6:	d05a      	beq.n	800bb5e <HAL_TIM_ConfigClockSource+0x1aa>
 800baa8:	e062      	b.n	800bb70 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800baaa:	687b      	ldr	r3, [r7, #4]
 800baac:	6818      	ldr	r0, [r3, #0]
 800baae:	683b      	ldr	r3, [r7, #0]
 800bab0:	6899      	ldr	r1, [r3, #8]
 800bab2:	683b      	ldr	r3, [r7, #0]
 800bab4:	685a      	ldr	r2, [r3, #4]
 800bab6:	683b      	ldr	r3, [r7, #0]
 800bab8:	68db      	ldr	r3, [r3, #12]
 800baba:	f000 fda9 	bl	800c610 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800babe:	687b      	ldr	r3, [r7, #4]
 800bac0:	681b      	ldr	r3, [r3, #0]
 800bac2:	689b      	ldr	r3, [r3, #8]
 800bac4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800bac6:	68bb      	ldr	r3, [r7, #8]
 800bac8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800bacc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800bace:	687b      	ldr	r3, [r7, #4]
 800bad0:	681b      	ldr	r3, [r3, #0]
 800bad2:	68ba      	ldr	r2, [r7, #8]
 800bad4:	609a      	str	r2, [r3, #8]
      break;
 800bad6:	e04f      	b.n	800bb78 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800bad8:	687b      	ldr	r3, [r7, #4]
 800bada:	6818      	ldr	r0, [r3, #0]
 800badc:	683b      	ldr	r3, [r7, #0]
 800bade:	6899      	ldr	r1, [r3, #8]
 800bae0:	683b      	ldr	r3, [r7, #0]
 800bae2:	685a      	ldr	r2, [r3, #4]
 800bae4:	683b      	ldr	r3, [r7, #0]
 800bae6:	68db      	ldr	r3, [r3, #12]
 800bae8:	f000 fd92 	bl	800c610 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800baec:	687b      	ldr	r3, [r7, #4]
 800baee:	681b      	ldr	r3, [r3, #0]
 800baf0:	689a      	ldr	r2, [r3, #8]
 800baf2:	687b      	ldr	r3, [r7, #4]
 800baf4:	681b      	ldr	r3, [r3, #0]
 800baf6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800bafa:	609a      	str	r2, [r3, #8]
      break;
 800bafc:	e03c      	b.n	800bb78 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800bafe:	687b      	ldr	r3, [r7, #4]
 800bb00:	6818      	ldr	r0, [r3, #0]
 800bb02:	683b      	ldr	r3, [r7, #0]
 800bb04:	6859      	ldr	r1, [r3, #4]
 800bb06:	683b      	ldr	r3, [r7, #0]
 800bb08:	68db      	ldr	r3, [r3, #12]
 800bb0a:	461a      	mov	r2, r3
 800bb0c:	f000 fc4c 	bl	800c3a8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800bb10:	687b      	ldr	r3, [r7, #4]
 800bb12:	681b      	ldr	r3, [r3, #0]
 800bb14:	2150      	movs	r1, #80	; 0x50
 800bb16:	4618      	mov	r0, r3
 800bb18:	f000 fd5c 	bl	800c5d4 <TIM_ITRx_SetConfig>
      break;
 800bb1c:	e02c      	b.n	800bb78 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800bb1e:	687b      	ldr	r3, [r7, #4]
 800bb20:	6818      	ldr	r0, [r3, #0]
 800bb22:	683b      	ldr	r3, [r7, #0]
 800bb24:	6859      	ldr	r1, [r3, #4]
 800bb26:	683b      	ldr	r3, [r7, #0]
 800bb28:	68db      	ldr	r3, [r3, #12]
 800bb2a:	461a      	mov	r2, r3
 800bb2c:	f000 fca8 	bl	800c480 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800bb30:	687b      	ldr	r3, [r7, #4]
 800bb32:	681b      	ldr	r3, [r3, #0]
 800bb34:	2160      	movs	r1, #96	; 0x60
 800bb36:	4618      	mov	r0, r3
 800bb38:	f000 fd4c 	bl	800c5d4 <TIM_ITRx_SetConfig>
      break;
 800bb3c:	e01c      	b.n	800bb78 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800bb3e:	687b      	ldr	r3, [r7, #4]
 800bb40:	6818      	ldr	r0, [r3, #0]
 800bb42:	683b      	ldr	r3, [r7, #0]
 800bb44:	6859      	ldr	r1, [r3, #4]
 800bb46:	683b      	ldr	r3, [r7, #0]
 800bb48:	68db      	ldr	r3, [r3, #12]
 800bb4a:	461a      	mov	r2, r3
 800bb4c:	f000 fc2c 	bl	800c3a8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800bb50:	687b      	ldr	r3, [r7, #4]
 800bb52:	681b      	ldr	r3, [r3, #0]
 800bb54:	2140      	movs	r1, #64	; 0x40
 800bb56:	4618      	mov	r0, r3
 800bb58:	f000 fd3c 	bl	800c5d4 <TIM_ITRx_SetConfig>
      break;
 800bb5c:	e00c      	b.n	800bb78 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800bb5e:	687b      	ldr	r3, [r7, #4]
 800bb60:	681a      	ldr	r2, [r3, #0]
 800bb62:	683b      	ldr	r3, [r7, #0]
 800bb64:	681b      	ldr	r3, [r3, #0]
 800bb66:	4619      	mov	r1, r3
 800bb68:	4610      	mov	r0, r2
 800bb6a:	f000 fd33 	bl	800c5d4 <TIM_ITRx_SetConfig>
      break;
 800bb6e:	e003      	b.n	800bb78 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800bb70:	2301      	movs	r3, #1
 800bb72:	73fb      	strb	r3, [r7, #15]
      break;
 800bb74:	e000      	b.n	800bb78 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800bb76:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800bb78:	687b      	ldr	r3, [r7, #4]
 800bb7a:	2201      	movs	r2, #1
 800bb7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800bb80:	687b      	ldr	r3, [r7, #4]
 800bb82:	2200      	movs	r2, #0
 800bb84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800bb88:	7bfb      	ldrb	r3, [r7, #15]
}
 800bb8a:	4618      	mov	r0, r3
 800bb8c:	3710      	adds	r7, #16
 800bb8e:	46bd      	mov	sp, r7
 800bb90:	bd80      	pop	{r7, pc}
 800bb92:	bf00      	nop
 800bb94:	ffceff88 	.word	0xffceff88
 800bb98:	00100040 	.word	0x00100040
 800bb9c:	00100030 	.word	0x00100030
 800bba0:	00100020 	.word	0x00100020

0800bba4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800bba4:	b480      	push	{r7}
 800bba6:	b083      	sub	sp, #12
 800bba8:	af00      	add	r7, sp, #0
 800bbaa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800bbac:	bf00      	nop
 800bbae:	370c      	adds	r7, #12
 800bbb0:	46bd      	mov	sp, r7
 800bbb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbb6:	4770      	bx	lr

0800bbb8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800bbb8:	b480      	push	{r7}
 800bbba:	b083      	sub	sp, #12
 800bbbc:	af00      	add	r7, sp, #0
 800bbbe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800bbc0:	bf00      	nop
 800bbc2:	370c      	adds	r7, #12
 800bbc4:	46bd      	mov	sp, r7
 800bbc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbca:	4770      	bx	lr

0800bbcc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800bbcc:	b480      	push	{r7}
 800bbce:	b083      	sub	sp, #12
 800bbd0:	af00      	add	r7, sp, #0
 800bbd2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800bbd4:	bf00      	nop
 800bbd6:	370c      	adds	r7, #12
 800bbd8:	46bd      	mov	sp, r7
 800bbda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbde:	4770      	bx	lr

0800bbe0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800bbe0:	b480      	push	{r7}
 800bbe2:	b085      	sub	sp, #20
 800bbe4:	af00      	add	r7, sp, #0
 800bbe6:	6078      	str	r0, [r7, #4]
 800bbe8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800bbea:	687b      	ldr	r3, [r7, #4]
 800bbec:	681b      	ldr	r3, [r3, #0]
 800bbee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800bbf0:	687b      	ldr	r3, [r7, #4]
 800bbf2:	4a40      	ldr	r2, [pc, #256]	; (800bcf4 <TIM_Base_SetConfig+0x114>)
 800bbf4:	4293      	cmp	r3, r2
 800bbf6:	d013      	beq.n	800bc20 <TIM_Base_SetConfig+0x40>
 800bbf8:	687b      	ldr	r3, [r7, #4]
 800bbfa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bbfe:	d00f      	beq.n	800bc20 <TIM_Base_SetConfig+0x40>
 800bc00:	687b      	ldr	r3, [r7, #4]
 800bc02:	4a3d      	ldr	r2, [pc, #244]	; (800bcf8 <TIM_Base_SetConfig+0x118>)
 800bc04:	4293      	cmp	r3, r2
 800bc06:	d00b      	beq.n	800bc20 <TIM_Base_SetConfig+0x40>
 800bc08:	687b      	ldr	r3, [r7, #4]
 800bc0a:	4a3c      	ldr	r2, [pc, #240]	; (800bcfc <TIM_Base_SetConfig+0x11c>)
 800bc0c:	4293      	cmp	r3, r2
 800bc0e:	d007      	beq.n	800bc20 <TIM_Base_SetConfig+0x40>
 800bc10:	687b      	ldr	r3, [r7, #4]
 800bc12:	4a3b      	ldr	r2, [pc, #236]	; (800bd00 <TIM_Base_SetConfig+0x120>)
 800bc14:	4293      	cmp	r3, r2
 800bc16:	d003      	beq.n	800bc20 <TIM_Base_SetConfig+0x40>
 800bc18:	687b      	ldr	r3, [r7, #4]
 800bc1a:	4a3a      	ldr	r2, [pc, #232]	; (800bd04 <TIM_Base_SetConfig+0x124>)
 800bc1c:	4293      	cmp	r3, r2
 800bc1e:	d108      	bne.n	800bc32 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800bc20:	68fb      	ldr	r3, [r7, #12]
 800bc22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bc26:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800bc28:	683b      	ldr	r3, [r7, #0]
 800bc2a:	685b      	ldr	r3, [r3, #4]
 800bc2c:	68fa      	ldr	r2, [r7, #12]
 800bc2e:	4313      	orrs	r3, r2
 800bc30:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800bc32:	687b      	ldr	r3, [r7, #4]
 800bc34:	4a2f      	ldr	r2, [pc, #188]	; (800bcf4 <TIM_Base_SetConfig+0x114>)
 800bc36:	4293      	cmp	r3, r2
 800bc38:	d01f      	beq.n	800bc7a <TIM_Base_SetConfig+0x9a>
 800bc3a:	687b      	ldr	r3, [r7, #4]
 800bc3c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bc40:	d01b      	beq.n	800bc7a <TIM_Base_SetConfig+0x9a>
 800bc42:	687b      	ldr	r3, [r7, #4]
 800bc44:	4a2c      	ldr	r2, [pc, #176]	; (800bcf8 <TIM_Base_SetConfig+0x118>)
 800bc46:	4293      	cmp	r3, r2
 800bc48:	d017      	beq.n	800bc7a <TIM_Base_SetConfig+0x9a>
 800bc4a:	687b      	ldr	r3, [r7, #4]
 800bc4c:	4a2b      	ldr	r2, [pc, #172]	; (800bcfc <TIM_Base_SetConfig+0x11c>)
 800bc4e:	4293      	cmp	r3, r2
 800bc50:	d013      	beq.n	800bc7a <TIM_Base_SetConfig+0x9a>
 800bc52:	687b      	ldr	r3, [r7, #4]
 800bc54:	4a2a      	ldr	r2, [pc, #168]	; (800bd00 <TIM_Base_SetConfig+0x120>)
 800bc56:	4293      	cmp	r3, r2
 800bc58:	d00f      	beq.n	800bc7a <TIM_Base_SetConfig+0x9a>
 800bc5a:	687b      	ldr	r3, [r7, #4]
 800bc5c:	4a29      	ldr	r2, [pc, #164]	; (800bd04 <TIM_Base_SetConfig+0x124>)
 800bc5e:	4293      	cmp	r3, r2
 800bc60:	d00b      	beq.n	800bc7a <TIM_Base_SetConfig+0x9a>
 800bc62:	687b      	ldr	r3, [r7, #4]
 800bc64:	4a28      	ldr	r2, [pc, #160]	; (800bd08 <TIM_Base_SetConfig+0x128>)
 800bc66:	4293      	cmp	r3, r2
 800bc68:	d007      	beq.n	800bc7a <TIM_Base_SetConfig+0x9a>
 800bc6a:	687b      	ldr	r3, [r7, #4]
 800bc6c:	4a27      	ldr	r2, [pc, #156]	; (800bd0c <TIM_Base_SetConfig+0x12c>)
 800bc6e:	4293      	cmp	r3, r2
 800bc70:	d003      	beq.n	800bc7a <TIM_Base_SetConfig+0x9a>
 800bc72:	687b      	ldr	r3, [r7, #4]
 800bc74:	4a26      	ldr	r2, [pc, #152]	; (800bd10 <TIM_Base_SetConfig+0x130>)
 800bc76:	4293      	cmp	r3, r2
 800bc78:	d108      	bne.n	800bc8c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800bc7a:	68fb      	ldr	r3, [r7, #12]
 800bc7c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800bc80:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800bc82:	683b      	ldr	r3, [r7, #0]
 800bc84:	68db      	ldr	r3, [r3, #12]
 800bc86:	68fa      	ldr	r2, [r7, #12]
 800bc88:	4313      	orrs	r3, r2
 800bc8a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800bc8c:	68fb      	ldr	r3, [r7, #12]
 800bc8e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800bc92:	683b      	ldr	r3, [r7, #0]
 800bc94:	695b      	ldr	r3, [r3, #20]
 800bc96:	4313      	orrs	r3, r2
 800bc98:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800bc9a:	687b      	ldr	r3, [r7, #4]
 800bc9c:	68fa      	ldr	r2, [r7, #12]
 800bc9e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800bca0:	683b      	ldr	r3, [r7, #0]
 800bca2:	689a      	ldr	r2, [r3, #8]
 800bca4:	687b      	ldr	r3, [r7, #4]
 800bca6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800bca8:	683b      	ldr	r3, [r7, #0]
 800bcaa:	681a      	ldr	r2, [r3, #0]
 800bcac:	687b      	ldr	r3, [r7, #4]
 800bcae:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800bcb0:	687b      	ldr	r3, [r7, #4]
 800bcb2:	4a10      	ldr	r2, [pc, #64]	; (800bcf4 <TIM_Base_SetConfig+0x114>)
 800bcb4:	4293      	cmp	r3, r2
 800bcb6:	d00f      	beq.n	800bcd8 <TIM_Base_SetConfig+0xf8>
 800bcb8:	687b      	ldr	r3, [r7, #4]
 800bcba:	4a12      	ldr	r2, [pc, #72]	; (800bd04 <TIM_Base_SetConfig+0x124>)
 800bcbc:	4293      	cmp	r3, r2
 800bcbe:	d00b      	beq.n	800bcd8 <TIM_Base_SetConfig+0xf8>
 800bcc0:	687b      	ldr	r3, [r7, #4]
 800bcc2:	4a11      	ldr	r2, [pc, #68]	; (800bd08 <TIM_Base_SetConfig+0x128>)
 800bcc4:	4293      	cmp	r3, r2
 800bcc6:	d007      	beq.n	800bcd8 <TIM_Base_SetConfig+0xf8>
 800bcc8:	687b      	ldr	r3, [r7, #4]
 800bcca:	4a10      	ldr	r2, [pc, #64]	; (800bd0c <TIM_Base_SetConfig+0x12c>)
 800bccc:	4293      	cmp	r3, r2
 800bcce:	d003      	beq.n	800bcd8 <TIM_Base_SetConfig+0xf8>
 800bcd0:	687b      	ldr	r3, [r7, #4]
 800bcd2:	4a0f      	ldr	r2, [pc, #60]	; (800bd10 <TIM_Base_SetConfig+0x130>)
 800bcd4:	4293      	cmp	r3, r2
 800bcd6:	d103      	bne.n	800bce0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800bcd8:	683b      	ldr	r3, [r7, #0]
 800bcda:	691a      	ldr	r2, [r3, #16]
 800bcdc:	687b      	ldr	r3, [r7, #4]
 800bcde:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800bce0:	687b      	ldr	r3, [r7, #4]
 800bce2:	2201      	movs	r2, #1
 800bce4:	615a      	str	r2, [r3, #20]
}
 800bce6:	bf00      	nop
 800bce8:	3714      	adds	r7, #20
 800bcea:	46bd      	mov	sp, r7
 800bcec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcf0:	4770      	bx	lr
 800bcf2:	bf00      	nop
 800bcf4:	40010000 	.word	0x40010000
 800bcf8:	40000400 	.word	0x40000400
 800bcfc:	40000800 	.word	0x40000800
 800bd00:	40000c00 	.word	0x40000c00
 800bd04:	40010400 	.word	0x40010400
 800bd08:	40014000 	.word	0x40014000
 800bd0c:	40014400 	.word	0x40014400
 800bd10:	40014800 	.word	0x40014800

0800bd14 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800bd14:	b480      	push	{r7}
 800bd16:	b087      	sub	sp, #28
 800bd18:	af00      	add	r7, sp, #0
 800bd1a:	6078      	str	r0, [r7, #4]
 800bd1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800bd1e:	687b      	ldr	r3, [r7, #4]
 800bd20:	6a1b      	ldr	r3, [r3, #32]
 800bd22:	f023 0201 	bic.w	r2, r3, #1
 800bd26:	687b      	ldr	r3, [r7, #4]
 800bd28:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bd2a:	687b      	ldr	r3, [r7, #4]
 800bd2c:	6a1b      	ldr	r3, [r3, #32]
 800bd2e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bd30:	687b      	ldr	r3, [r7, #4]
 800bd32:	685b      	ldr	r3, [r3, #4]
 800bd34:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800bd36:	687b      	ldr	r3, [r7, #4]
 800bd38:	699b      	ldr	r3, [r3, #24]
 800bd3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800bd3c:	68fa      	ldr	r2, [r7, #12]
 800bd3e:	4b37      	ldr	r3, [pc, #220]	; (800be1c <TIM_OC1_SetConfig+0x108>)
 800bd40:	4013      	ands	r3, r2
 800bd42:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800bd44:	68fb      	ldr	r3, [r7, #12]
 800bd46:	f023 0303 	bic.w	r3, r3, #3
 800bd4a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800bd4c:	683b      	ldr	r3, [r7, #0]
 800bd4e:	681b      	ldr	r3, [r3, #0]
 800bd50:	68fa      	ldr	r2, [r7, #12]
 800bd52:	4313      	orrs	r3, r2
 800bd54:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800bd56:	697b      	ldr	r3, [r7, #20]
 800bd58:	f023 0302 	bic.w	r3, r3, #2
 800bd5c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800bd5e:	683b      	ldr	r3, [r7, #0]
 800bd60:	689b      	ldr	r3, [r3, #8]
 800bd62:	697a      	ldr	r2, [r7, #20]
 800bd64:	4313      	orrs	r3, r2
 800bd66:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800bd68:	687b      	ldr	r3, [r7, #4]
 800bd6a:	4a2d      	ldr	r2, [pc, #180]	; (800be20 <TIM_OC1_SetConfig+0x10c>)
 800bd6c:	4293      	cmp	r3, r2
 800bd6e:	d00f      	beq.n	800bd90 <TIM_OC1_SetConfig+0x7c>
 800bd70:	687b      	ldr	r3, [r7, #4]
 800bd72:	4a2c      	ldr	r2, [pc, #176]	; (800be24 <TIM_OC1_SetConfig+0x110>)
 800bd74:	4293      	cmp	r3, r2
 800bd76:	d00b      	beq.n	800bd90 <TIM_OC1_SetConfig+0x7c>
 800bd78:	687b      	ldr	r3, [r7, #4]
 800bd7a:	4a2b      	ldr	r2, [pc, #172]	; (800be28 <TIM_OC1_SetConfig+0x114>)
 800bd7c:	4293      	cmp	r3, r2
 800bd7e:	d007      	beq.n	800bd90 <TIM_OC1_SetConfig+0x7c>
 800bd80:	687b      	ldr	r3, [r7, #4]
 800bd82:	4a2a      	ldr	r2, [pc, #168]	; (800be2c <TIM_OC1_SetConfig+0x118>)
 800bd84:	4293      	cmp	r3, r2
 800bd86:	d003      	beq.n	800bd90 <TIM_OC1_SetConfig+0x7c>
 800bd88:	687b      	ldr	r3, [r7, #4]
 800bd8a:	4a29      	ldr	r2, [pc, #164]	; (800be30 <TIM_OC1_SetConfig+0x11c>)
 800bd8c:	4293      	cmp	r3, r2
 800bd8e:	d10c      	bne.n	800bdaa <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800bd90:	697b      	ldr	r3, [r7, #20]
 800bd92:	f023 0308 	bic.w	r3, r3, #8
 800bd96:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800bd98:	683b      	ldr	r3, [r7, #0]
 800bd9a:	68db      	ldr	r3, [r3, #12]
 800bd9c:	697a      	ldr	r2, [r7, #20]
 800bd9e:	4313      	orrs	r3, r2
 800bda0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800bda2:	697b      	ldr	r3, [r7, #20]
 800bda4:	f023 0304 	bic.w	r3, r3, #4
 800bda8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bdaa:	687b      	ldr	r3, [r7, #4]
 800bdac:	4a1c      	ldr	r2, [pc, #112]	; (800be20 <TIM_OC1_SetConfig+0x10c>)
 800bdae:	4293      	cmp	r3, r2
 800bdb0:	d00f      	beq.n	800bdd2 <TIM_OC1_SetConfig+0xbe>
 800bdb2:	687b      	ldr	r3, [r7, #4]
 800bdb4:	4a1b      	ldr	r2, [pc, #108]	; (800be24 <TIM_OC1_SetConfig+0x110>)
 800bdb6:	4293      	cmp	r3, r2
 800bdb8:	d00b      	beq.n	800bdd2 <TIM_OC1_SetConfig+0xbe>
 800bdba:	687b      	ldr	r3, [r7, #4]
 800bdbc:	4a1a      	ldr	r2, [pc, #104]	; (800be28 <TIM_OC1_SetConfig+0x114>)
 800bdbe:	4293      	cmp	r3, r2
 800bdc0:	d007      	beq.n	800bdd2 <TIM_OC1_SetConfig+0xbe>
 800bdc2:	687b      	ldr	r3, [r7, #4]
 800bdc4:	4a19      	ldr	r2, [pc, #100]	; (800be2c <TIM_OC1_SetConfig+0x118>)
 800bdc6:	4293      	cmp	r3, r2
 800bdc8:	d003      	beq.n	800bdd2 <TIM_OC1_SetConfig+0xbe>
 800bdca:	687b      	ldr	r3, [r7, #4]
 800bdcc:	4a18      	ldr	r2, [pc, #96]	; (800be30 <TIM_OC1_SetConfig+0x11c>)
 800bdce:	4293      	cmp	r3, r2
 800bdd0:	d111      	bne.n	800bdf6 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800bdd2:	693b      	ldr	r3, [r7, #16]
 800bdd4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800bdd8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800bdda:	693b      	ldr	r3, [r7, #16]
 800bddc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800bde0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800bde2:	683b      	ldr	r3, [r7, #0]
 800bde4:	695b      	ldr	r3, [r3, #20]
 800bde6:	693a      	ldr	r2, [r7, #16]
 800bde8:	4313      	orrs	r3, r2
 800bdea:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800bdec:	683b      	ldr	r3, [r7, #0]
 800bdee:	699b      	ldr	r3, [r3, #24]
 800bdf0:	693a      	ldr	r2, [r7, #16]
 800bdf2:	4313      	orrs	r3, r2
 800bdf4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bdf6:	687b      	ldr	r3, [r7, #4]
 800bdf8:	693a      	ldr	r2, [r7, #16]
 800bdfa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800bdfc:	687b      	ldr	r3, [r7, #4]
 800bdfe:	68fa      	ldr	r2, [r7, #12]
 800be00:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800be02:	683b      	ldr	r3, [r7, #0]
 800be04:	685a      	ldr	r2, [r3, #4]
 800be06:	687b      	ldr	r3, [r7, #4]
 800be08:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800be0a:	687b      	ldr	r3, [r7, #4]
 800be0c:	697a      	ldr	r2, [r7, #20]
 800be0e:	621a      	str	r2, [r3, #32]
}
 800be10:	bf00      	nop
 800be12:	371c      	adds	r7, #28
 800be14:	46bd      	mov	sp, r7
 800be16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be1a:	4770      	bx	lr
 800be1c:	fffeff8f 	.word	0xfffeff8f
 800be20:	40010000 	.word	0x40010000
 800be24:	40010400 	.word	0x40010400
 800be28:	40014000 	.word	0x40014000
 800be2c:	40014400 	.word	0x40014400
 800be30:	40014800 	.word	0x40014800

0800be34 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800be34:	b480      	push	{r7}
 800be36:	b087      	sub	sp, #28
 800be38:	af00      	add	r7, sp, #0
 800be3a:	6078      	str	r0, [r7, #4]
 800be3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800be3e:	687b      	ldr	r3, [r7, #4]
 800be40:	6a1b      	ldr	r3, [r3, #32]
 800be42:	f023 0210 	bic.w	r2, r3, #16
 800be46:	687b      	ldr	r3, [r7, #4]
 800be48:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800be4a:	687b      	ldr	r3, [r7, #4]
 800be4c:	6a1b      	ldr	r3, [r3, #32]
 800be4e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800be50:	687b      	ldr	r3, [r7, #4]
 800be52:	685b      	ldr	r3, [r3, #4]
 800be54:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800be56:	687b      	ldr	r3, [r7, #4]
 800be58:	699b      	ldr	r3, [r3, #24]
 800be5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800be5c:	68fa      	ldr	r2, [r7, #12]
 800be5e:	4b34      	ldr	r3, [pc, #208]	; (800bf30 <TIM_OC2_SetConfig+0xfc>)
 800be60:	4013      	ands	r3, r2
 800be62:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800be64:	68fb      	ldr	r3, [r7, #12]
 800be66:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800be6a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800be6c:	683b      	ldr	r3, [r7, #0]
 800be6e:	681b      	ldr	r3, [r3, #0]
 800be70:	021b      	lsls	r3, r3, #8
 800be72:	68fa      	ldr	r2, [r7, #12]
 800be74:	4313      	orrs	r3, r2
 800be76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800be78:	697b      	ldr	r3, [r7, #20]
 800be7a:	f023 0320 	bic.w	r3, r3, #32
 800be7e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800be80:	683b      	ldr	r3, [r7, #0]
 800be82:	689b      	ldr	r3, [r3, #8]
 800be84:	011b      	lsls	r3, r3, #4
 800be86:	697a      	ldr	r2, [r7, #20]
 800be88:	4313      	orrs	r3, r2
 800be8a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800be8c:	687b      	ldr	r3, [r7, #4]
 800be8e:	4a29      	ldr	r2, [pc, #164]	; (800bf34 <TIM_OC2_SetConfig+0x100>)
 800be90:	4293      	cmp	r3, r2
 800be92:	d003      	beq.n	800be9c <TIM_OC2_SetConfig+0x68>
 800be94:	687b      	ldr	r3, [r7, #4]
 800be96:	4a28      	ldr	r2, [pc, #160]	; (800bf38 <TIM_OC2_SetConfig+0x104>)
 800be98:	4293      	cmp	r3, r2
 800be9a:	d10d      	bne.n	800beb8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800be9c:	697b      	ldr	r3, [r7, #20]
 800be9e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800bea2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800bea4:	683b      	ldr	r3, [r7, #0]
 800bea6:	68db      	ldr	r3, [r3, #12]
 800bea8:	011b      	lsls	r3, r3, #4
 800beaa:	697a      	ldr	r2, [r7, #20]
 800beac:	4313      	orrs	r3, r2
 800beae:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800beb0:	697b      	ldr	r3, [r7, #20]
 800beb2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800beb6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800beb8:	687b      	ldr	r3, [r7, #4]
 800beba:	4a1e      	ldr	r2, [pc, #120]	; (800bf34 <TIM_OC2_SetConfig+0x100>)
 800bebc:	4293      	cmp	r3, r2
 800bebe:	d00f      	beq.n	800bee0 <TIM_OC2_SetConfig+0xac>
 800bec0:	687b      	ldr	r3, [r7, #4]
 800bec2:	4a1d      	ldr	r2, [pc, #116]	; (800bf38 <TIM_OC2_SetConfig+0x104>)
 800bec4:	4293      	cmp	r3, r2
 800bec6:	d00b      	beq.n	800bee0 <TIM_OC2_SetConfig+0xac>
 800bec8:	687b      	ldr	r3, [r7, #4]
 800beca:	4a1c      	ldr	r2, [pc, #112]	; (800bf3c <TIM_OC2_SetConfig+0x108>)
 800becc:	4293      	cmp	r3, r2
 800bece:	d007      	beq.n	800bee0 <TIM_OC2_SetConfig+0xac>
 800bed0:	687b      	ldr	r3, [r7, #4]
 800bed2:	4a1b      	ldr	r2, [pc, #108]	; (800bf40 <TIM_OC2_SetConfig+0x10c>)
 800bed4:	4293      	cmp	r3, r2
 800bed6:	d003      	beq.n	800bee0 <TIM_OC2_SetConfig+0xac>
 800bed8:	687b      	ldr	r3, [r7, #4]
 800beda:	4a1a      	ldr	r2, [pc, #104]	; (800bf44 <TIM_OC2_SetConfig+0x110>)
 800bedc:	4293      	cmp	r3, r2
 800bede:	d113      	bne.n	800bf08 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800bee0:	693b      	ldr	r3, [r7, #16]
 800bee2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800bee6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800bee8:	693b      	ldr	r3, [r7, #16]
 800beea:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800beee:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800bef0:	683b      	ldr	r3, [r7, #0]
 800bef2:	695b      	ldr	r3, [r3, #20]
 800bef4:	009b      	lsls	r3, r3, #2
 800bef6:	693a      	ldr	r2, [r7, #16]
 800bef8:	4313      	orrs	r3, r2
 800befa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800befc:	683b      	ldr	r3, [r7, #0]
 800befe:	699b      	ldr	r3, [r3, #24]
 800bf00:	009b      	lsls	r3, r3, #2
 800bf02:	693a      	ldr	r2, [r7, #16]
 800bf04:	4313      	orrs	r3, r2
 800bf06:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bf08:	687b      	ldr	r3, [r7, #4]
 800bf0a:	693a      	ldr	r2, [r7, #16]
 800bf0c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800bf0e:	687b      	ldr	r3, [r7, #4]
 800bf10:	68fa      	ldr	r2, [r7, #12]
 800bf12:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800bf14:	683b      	ldr	r3, [r7, #0]
 800bf16:	685a      	ldr	r2, [r3, #4]
 800bf18:	687b      	ldr	r3, [r7, #4]
 800bf1a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bf1c:	687b      	ldr	r3, [r7, #4]
 800bf1e:	697a      	ldr	r2, [r7, #20]
 800bf20:	621a      	str	r2, [r3, #32]
}
 800bf22:	bf00      	nop
 800bf24:	371c      	adds	r7, #28
 800bf26:	46bd      	mov	sp, r7
 800bf28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf2c:	4770      	bx	lr
 800bf2e:	bf00      	nop
 800bf30:	feff8fff 	.word	0xfeff8fff
 800bf34:	40010000 	.word	0x40010000
 800bf38:	40010400 	.word	0x40010400
 800bf3c:	40014000 	.word	0x40014000
 800bf40:	40014400 	.word	0x40014400
 800bf44:	40014800 	.word	0x40014800

0800bf48 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800bf48:	b480      	push	{r7}
 800bf4a:	b087      	sub	sp, #28
 800bf4c:	af00      	add	r7, sp, #0
 800bf4e:	6078      	str	r0, [r7, #4]
 800bf50:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800bf52:	687b      	ldr	r3, [r7, #4]
 800bf54:	6a1b      	ldr	r3, [r3, #32]
 800bf56:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800bf5a:	687b      	ldr	r3, [r7, #4]
 800bf5c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bf5e:	687b      	ldr	r3, [r7, #4]
 800bf60:	6a1b      	ldr	r3, [r3, #32]
 800bf62:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bf64:	687b      	ldr	r3, [r7, #4]
 800bf66:	685b      	ldr	r3, [r3, #4]
 800bf68:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800bf6a:	687b      	ldr	r3, [r7, #4]
 800bf6c:	69db      	ldr	r3, [r3, #28]
 800bf6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800bf70:	68fa      	ldr	r2, [r7, #12]
 800bf72:	4b33      	ldr	r3, [pc, #204]	; (800c040 <TIM_OC3_SetConfig+0xf8>)
 800bf74:	4013      	ands	r3, r2
 800bf76:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800bf78:	68fb      	ldr	r3, [r7, #12]
 800bf7a:	f023 0303 	bic.w	r3, r3, #3
 800bf7e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800bf80:	683b      	ldr	r3, [r7, #0]
 800bf82:	681b      	ldr	r3, [r3, #0]
 800bf84:	68fa      	ldr	r2, [r7, #12]
 800bf86:	4313      	orrs	r3, r2
 800bf88:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800bf8a:	697b      	ldr	r3, [r7, #20]
 800bf8c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800bf90:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800bf92:	683b      	ldr	r3, [r7, #0]
 800bf94:	689b      	ldr	r3, [r3, #8]
 800bf96:	021b      	lsls	r3, r3, #8
 800bf98:	697a      	ldr	r2, [r7, #20]
 800bf9a:	4313      	orrs	r3, r2
 800bf9c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800bf9e:	687b      	ldr	r3, [r7, #4]
 800bfa0:	4a28      	ldr	r2, [pc, #160]	; (800c044 <TIM_OC3_SetConfig+0xfc>)
 800bfa2:	4293      	cmp	r3, r2
 800bfa4:	d003      	beq.n	800bfae <TIM_OC3_SetConfig+0x66>
 800bfa6:	687b      	ldr	r3, [r7, #4]
 800bfa8:	4a27      	ldr	r2, [pc, #156]	; (800c048 <TIM_OC3_SetConfig+0x100>)
 800bfaa:	4293      	cmp	r3, r2
 800bfac:	d10d      	bne.n	800bfca <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800bfae:	697b      	ldr	r3, [r7, #20]
 800bfb0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800bfb4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800bfb6:	683b      	ldr	r3, [r7, #0]
 800bfb8:	68db      	ldr	r3, [r3, #12]
 800bfba:	021b      	lsls	r3, r3, #8
 800bfbc:	697a      	ldr	r2, [r7, #20]
 800bfbe:	4313      	orrs	r3, r2
 800bfc0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800bfc2:	697b      	ldr	r3, [r7, #20]
 800bfc4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800bfc8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bfca:	687b      	ldr	r3, [r7, #4]
 800bfcc:	4a1d      	ldr	r2, [pc, #116]	; (800c044 <TIM_OC3_SetConfig+0xfc>)
 800bfce:	4293      	cmp	r3, r2
 800bfd0:	d00f      	beq.n	800bff2 <TIM_OC3_SetConfig+0xaa>
 800bfd2:	687b      	ldr	r3, [r7, #4]
 800bfd4:	4a1c      	ldr	r2, [pc, #112]	; (800c048 <TIM_OC3_SetConfig+0x100>)
 800bfd6:	4293      	cmp	r3, r2
 800bfd8:	d00b      	beq.n	800bff2 <TIM_OC3_SetConfig+0xaa>
 800bfda:	687b      	ldr	r3, [r7, #4]
 800bfdc:	4a1b      	ldr	r2, [pc, #108]	; (800c04c <TIM_OC3_SetConfig+0x104>)
 800bfde:	4293      	cmp	r3, r2
 800bfe0:	d007      	beq.n	800bff2 <TIM_OC3_SetConfig+0xaa>
 800bfe2:	687b      	ldr	r3, [r7, #4]
 800bfe4:	4a1a      	ldr	r2, [pc, #104]	; (800c050 <TIM_OC3_SetConfig+0x108>)
 800bfe6:	4293      	cmp	r3, r2
 800bfe8:	d003      	beq.n	800bff2 <TIM_OC3_SetConfig+0xaa>
 800bfea:	687b      	ldr	r3, [r7, #4]
 800bfec:	4a19      	ldr	r2, [pc, #100]	; (800c054 <TIM_OC3_SetConfig+0x10c>)
 800bfee:	4293      	cmp	r3, r2
 800bff0:	d113      	bne.n	800c01a <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800bff2:	693b      	ldr	r3, [r7, #16]
 800bff4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800bff8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800bffa:	693b      	ldr	r3, [r7, #16]
 800bffc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800c000:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800c002:	683b      	ldr	r3, [r7, #0]
 800c004:	695b      	ldr	r3, [r3, #20]
 800c006:	011b      	lsls	r3, r3, #4
 800c008:	693a      	ldr	r2, [r7, #16]
 800c00a:	4313      	orrs	r3, r2
 800c00c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800c00e:	683b      	ldr	r3, [r7, #0]
 800c010:	699b      	ldr	r3, [r3, #24]
 800c012:	011b      	lsls	r3, r3, #4
 800c014:	693a      	ldr	r2, [r7, #16]
 800c016:	4313      	orrs	r3, r2
 800c018:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c01a:	687b      	ldr	r3, [r7, #4]
 800c01c:	693a      	ldr	r2, [r7, #16]
 800c01e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800c020:	687b      	ldr	r3, [r7, #4]
 800c022:	68fa      	ldr	r2, [r7, #12]
 800c024:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800c026:	683b      	ldr	r3, [r7, #0]
 800c028:	685a      	ldr	r2, [r3, #4]
 800c02a:	687b      	ldr	r3, [r7, #4]
 800c02c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c02e:	687b      	ldr	r3, [r7, #4]
 800c030:	697a      	ldr	r2, [r7, #20]
 800c032:	621a      	str	r2, [r3, #32]
}
 800c034:	bf00      	nop
 800c036:	371c      	adds	r7, #28
 800c038:	46bd      	mov	sp, r7
 800c03a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c03e:	4770      	bx	lr
 800c040:	fffeff8f 	.word	0xfffeff8f
 800c044:	40010000 	.word	0x40010000
 800c048:	40010400 	.word	0x40010400
 800c04c:	40014000 	.word	0x40014000
 800c050:	40014400 	.word	0x40014400
 800c054:	40014800 	.word	0x40014800

0800c058 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800c058:	b480      	push	{r7}
 800c05a:	b087      	sub	sp, #28
 800c05c:	af00      	add	r7, sp, #0
 800c05e:	6078      	str	r0, [r7, #4]
 800c060:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800c062:	687b      	ldr	r3, [r7, #4]
 800c064:	6a1b      	ldr	r3, [r3, #32]
 800c066:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800c06a:	687b      	ldr	r3, [r7, #4]
 800c06c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c06e:	687b      	ldr	r3, [r7, #4]
 800c070:	6a1b      	ldr	r3, [r3, #32]
 800c072:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c074:	687b      	ldr	r3, [r7, #4]
 800c076:	685b      	ldr	r3, [r3, #4]
 800c078:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800c07a:	687b      	ldr	r3, [r7, #4]
 800c07c:	69db      	ldr	r3, [r3, #28]
 800c07e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800c080:	68fa      	ldr	r2, [r7, #12]
 800c082:	4b24      	ldr	r3, [pc, #144]	; (800c114 <TIM_OC4_SetConfig+0xbc>)
 800c084:	4013      	ands	r3, r2
 800c086:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800c088:	68fb      	ldr	r3, [r7, #12]
 800c08a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c08e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c090:	683b      	ldr	r3, [r7, #0]
 800c092:	681b      	ldr	r3, [r3, #0]
 800c094:	021b      	lsls	r3, r3, #8
 800c096:	68fa      	ldr	r2, [r7, #12]
 800c098:	4313      	orrs	r3, r2
 800c09a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800c09c:	693b      	ldr	r3, [r7, #16]
 800c09e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800c0a2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800c0a4:	683b      	ldr	r3, [r7, #0]
 800c0a6:	689b      	ldr	r3, [r3, #8]
 800c0a8:	031b      	lsls	r3, r3, #12
 800c0aa:	693a      	ldr	r2, [r7, #16]
 800c0ac:	4313      	orrs	r3, r2
 800c0ae:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c0b0:	687b      	ldr	r3, [r7, #4]
 800c0b2:	4a19      	ldr	r2, [pc, #100]	; (800c118 <TIM_OC4_SetConfig+0xc0>)
 800c0b4:	4293      	cmp	r3, r2
 800c0b6:	d00f      	beq.n	800c0d8 <TIM_OC4_SetConfig+0x80>
 800c0b8:	687b      	ldr	r3, [r7, #4]
 800c0ba:	4a18      	ldr	r2, [pc, #96]	; (800c11c <TIM_OC4_SetConfig+0xc4>)
 800c0bc:	4293      	cmp	r3, r2
 800c0be:	d00b      	beq.n	800c0d8 <TIM_OC4_SetConfig+0x80>
 800c0c0:	687b      	ldr	r3, [r7, #4]
 800c0c2:	4a17      	ldr	r2, [pc, #92]	; (800c120 <TIM_OC4_SetConfig+0xc8>)
 800c0c4:	4293      	cmp	r3, r2
 800c0c6:	d007      	beq.n	800c0d8 <TIM_OC4_SetConfig+0x80>
 800c0c8:	687b      	ldr	r3, [r7, #4]
 800c0ca:	4a16      	ldr	r2, [pc, #88]	; (800c124 <TIM_OC4_SetConfig+0xcc>)
 800c0cc:	4293      	cmp	r3, r2
 800c0ce:	d003      	beq.n	800c0d8 <TIM_OC4_SetConfig+0x80>
 800c0d0:	687b      	ldr	r3, [r7, #4]
 800c0d2:	4a15      	ldr	r2, [pc, #84]	; (800c128 <TIM_OC4_SetConfig+0xd0>)
 800c0d4:	4293      	cmp	r3, r2
 800c0d6:	d109      	bne.n	800c0ec <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800c0d8:	697b      	ldr	r3, [r7, #20]
 800c0da:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800c0de:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800c0e0:	683b      	ldr	r3, [r7, #0]
 800c0e2:	695b      	ldr	r3, [r3, #20]
 800c0e4:	019b      	lsls	r3, r3, #6
 800c0e6:	697a      	ldr	r2, [r7, #20]
 800c0e8:	4313      	orrs	r3, r2
 800c0ea:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c0ec:	687b      	ldr	r3, [r7, #4]
 800c0ee:	697a      	ldr	r2, [r7, #20]
 800c0f0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800c0f2:	687b      	ldr	r3, [r7, #4]
 800c0f4:	68fa      	ldr	r2, [r7, #12]
 800c0f6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800c0f8:	683b      	ldr	r3, [r7, #0]
 800c0fa:	685a      	ldr	r2, [r3, #4]
 800c0fc:	687b      	ldr	r3, [r7, #4]
 800c0fe:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c100:	687b      	ldr	r3, [r7, #4]
 800c102:	693a      	ldr	r2, [r7, #16]
 800c104:	621a      	str	r2, [r3, #32]
}
 800c106:	bf00      	nop
 800c108:	371c      	adds	r7, #28
 800c10a:	46bd      	mov	sp, r7
 800c10c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c110:	4770      	bx	lr
 800c112:	bf00      	nop
 800c114:	feff8fff 	.word	0xfeff8fff
 800c118:	40010000 	.word	0x40010000
 800c11c:	40010400 	.word	0x40010400
 800c120:	40014000 	.word	0x40014000
 800c124:	40014400 	.word	0x40014400
 800c128:	40014800 	.word	0x40014800

0800c12c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800c12c:	b480      	push	{r7}
 800c12e:	b087      	sub	sp, #28
 800c130:	af00      	add	r7, sp, #0
 800c132:	6078      	str	r0, [r7, #4]
 800c134:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800c136:	687b      	ldr	r3, [r7, #4]
 800c138:	6a1b      	ldr	r3, [r3, #32]
 800c13a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800c13e:	687b      	ldr	r3, [r7, #4]
 800c140:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c142:	687b      	ldr	r3, [r7, #4]
 800c144:	6a1b      	ldr	r3, [r3, #32]
 800c146:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c148:	687b      	ldr	r3, [r7, #4]
 800c14a:	685b      	ldr	r3, [r3, #4]
 800c14c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800c14e:	687b      	ldr	r3, [r7, #4]
 800c150:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c152:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800c154:	68fa      	ldr	r2, [r7, #12]
 800c156:	4b21      	ldr	r3, [pc, #132]	; (800c1dc <TIM_OC5_SetConfig+0xb0>)
 800c158:	4013      	ands	r3, r2
 800c15a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c15c:	683b      	ldr	r3, [r7, #0]
 800c15e:	681b      	ldr	r3, [r3, #0]
 800c160:	68fa      	ldr	r2, [r7, #12]
 800c162:	4313      	orrs	r3, r2
 800c164:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800c166:	693b      	ldr	r3, [r7, #16]
 800c168:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800c16c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800c16e:	683b      	ldr	r3, [r7, #0]
 800c170:	689b      	ldr	r3, [r3, #8]
 800c172:	041b      	lsls	r3, r3, #16
 800c174:	693a      	ldr	r2, [r7, #16]
 800c176:	4313      	orrs	r3, r2
 800c178:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c17a:	687b      	ldr	r3, [r7, #4]
 800c17c:	4a18      	ldr	r2, [pc, #96]	; (800c1e0 <TIM_OC5_SetConfig+0xb4>)
 800c17e:	4293      	cmp	r3, r2
 800c180:	d00f      	beq.n	800c1a2 <TIM_OC5_SetConfig+0x76>
 800c182:	687b      	ldr	r3, [r7, #4]
 800c184:	4a17      	ldr	r2, [pc, #92]	; (800c1e4 <TIM_OC5_SetConfig+0xb8>)
 800c186:	4293      	cmp	r3, r2
 800c188:	d00b      	beq.n	800c1a2 <TIM_OC5_SetConfig+0x76>
 800c18a:	687b      	ldr	r3, [r7, #4]
 800c18c:	4a16      	ldr	r2, [pc, #88]	; (800c1e8 <TIM_OC5_SetConfig+0xbc>)
 800c18e:	4293      	cmp	r3, r2
 800c190:	d007      	beq.n	800c1a2 <TIM_OC5_SetConfig+0x76>
 800c192:	687b      	ldr	r3, [r7, #4]
 800c194:	4a15      	ldr	r2, [pc, #84]	; (800c1ec <TIM_OC5_SetConfig+0xc0>)
 800c196:	4293      	cmp	r3, r2
 800c198:	d003      	beq.n	800c1a2 <TIM_OC5_SetConfig+0x76>
 800c19a:	687b      	ldr	r3, [r7, #4]
 800c19c:	4a14      	ldr	r2, [pc, #80]	; (800c1f0 <TIM_OC5_SetConfig+0xc4>)
 800c19e:	4293      	cmp	r3, r2
 800c1a0:	d109      	bne.n	800c1b6 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800c1a2:	697b      	ldr	r3, [r7, #20]
 800c1a4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800c1a8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800c1aa:	683b      	ldr	r3, [r7, #0]
 800c1ac:	695b      	ldr	r3, [r3, #20]
 800c1ae:	021b      	lsls	r3, r3, #8
 800c1b0:	697a      	ldr	r2, [r7, #20]
 800c1b2:	4313      	orrs	r3, r2
 800c1b4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c1b6:	687b      	ldr	r3, [r7, #4]
 800c1b8:	697a      	ldr	r2, [r7, #20]
 800c1ba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800c1bc:	687b      	ldr	r3, [r7, #4]
 800c1be:	68fa      	ldr	r2, [r7, #12]
 800c1c0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800c1c2:	683b      	ldr	r3, [r7, #0]
 800c1c4:	685a      	ldr	r2, [r3, #4]
 800c1c6:	687b      	ldr	r3, [r7, #4]
 800c1c8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c1ca:	687b      	ldr	r3, [r7, #4]
 800c1cc:	693a      	ldr	r2, [r7, #16]
 800c1ce:	621a      	str	r2, [r3, #32]
}
 800c1d0:	bf00      	nop
 800c1d2:	371c      	adds	r7, #28
 800c1d4:	46bd      	mov	sp, r7
 800c1d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1da:	4770      	bx	lr
 800c1dc:	fffeff8f 	.word	0xfffeff8f
 800c1e0:	40010000 	.word	0x40010000
 800c1e4:	40010400 	.word	0x40010400
 800c1e8:	40014000 	.word	0x40014000
 800c1ec:	40014400 	.word	0x40014400
 800c1f0:	40014800 	.word	0x40014800

0800c1f4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800c1f4:	b480      	push	{r7}
 800c1f6:	b087      	sub	sp, #28
 800c1f8:	af00      	add	r7, sp, #0
 800c1fa:	6078      	str	r0, [r7, #4]
 800c1fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800c1fe:	687b      	ldr	r3, [r7, #4]
 800c200:	6a1b      	ldr	r3, [r3, #32]
 800c202:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800c206:	687b      	ldr	r3, [r7, #4]
 800c208:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c20a:	687b      	ldr	r3, [r7, #4]
 800c20c:	6a1b      	ldr	r3, [r3, #32]
 800c20e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c210:	687b      	ldr	r3, [r7, #4]
 800c212:	685b      	ldr	r3, [r3, #4]
 800c214:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800c216:	687b      	ldr	r3, [r7, #4]
 800c218:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c21a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800c21c:	68fa      	ldr	r2, [r7, #12]
 800c21e:	4b22      	ldr	r3, [pc, #136]	; (800c2a8 <TIM_OC6_SetConfig+0xb4>)
 800c220:	4013      	ands	r3, r2
 800c222:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c224:	683b      	ldr	r3, [r7, #0]
 800c226:	681b      	ldr	r3, [r3, #0]
 800c228:	021b      	lsls	r3, r3, #8
 800c22a:	68fa      	ldr	r2, [r7, #12]
 800c22c:	4313      	orrs	r3, r2
 800c22e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800c230:	693b      	ldr	r3, [r7, #16]
 800c232:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800c236:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800c238:	683b      	ldr	r3, [r7, #0]
 800c23a:	689b      	ldr	r3, [r3, #8]
 800c23c:	051b      	lsls	r3, r3, #20
 800c23e:	693a      	ldr	r2, [r7, #16]
 800c240:	4313      	orrs	r3, r2
 800c242:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c244:	687b      	ldr	r3, [r7, #4]
 800c246:	4a19      	ldr	r2, [pc, #100]	; (800c2ac <TIM_OC6_SetConfig+0xb8>)
 800c248:	4293      	cmp	r3, r2
 800c24a:	d00f      	beq.n	800c26c <TIM_OC6_SetConfig+0x78>
 800c24c:	687b      	ldr	r3, [r7, #4]
 800c24e:	4a18      	ldr	r2, [pc, #96]	; (800c2b0 <TIM_OC6_SetConfig+0xbc>)
 800c250:	4293      	cmp	r3, r2
 800c252:	d00b      	beq.n	800c26c <TIM_OC6_SetConfig+0x78>
 800c254:	687b      	ldr	r3, [r7, #4]
 800c256:	4a17      	ldr	r2, [pc, #92]	; (800c2b4 <TIM_OC6_SetConfig+0xc0>)
 800c258:	4293      	cmp	r3, r2
 800c25a:	d007      	beq.n	800c26c <TIM_OC6_SetConfig+0x78>
 800c25c:	687b      	ldr	r3, [r7, #4]
 800c25e:	4a16      	ldr	r2, [pc, #88]	; (800c2b8 <TIM_OC6_SetConfig+0xc4>)
 800c260:	4293      	cmp	r3, r2
 800c262:	d003      	beq.n	800c26c <TIM_OC6_SetConfig+0x78>
 800c264:	687b      	ldr	r3, [r7, #4]
 800c266:	4a15      	ldr	r2, [pc, #84]	; (800c2bc <TIM_OC6_SetConfig+0xc8>)
 800c268:	4293      	cmp	r3, r2
 800c26a:	d109      	bne.n	800c280 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800c26c:	697b      	ldr	r3, [r7, #20]
 800c26e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800c272:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800c274:	683b      	ldr	r3, [r7, #0]
 800c276:	695b      	ldr	r3, [r3, #20]
 800c278:	029b      	lsls	r3, r3, #10
 800c27a:	697a      	ldr	r2, [r7, #20]
 800c27c:	4313      	orrs	r3, r2
 800c27e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c280:	687b      	ldr	r3, [r7, #4]
 800c282:	697a      	ldr	r2, [r7, #20]
 800c284:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800c286:	687b      	ldr	r3, [r7, #4]
 800c288:	68fa      	ldr	r2, [r7, #12]
 800c28a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800c28c:	683b      	ldr	r3, [r7, #0]
 800c28e:	685a      	ldr	r2, [r3, #4]
 800c290:	687b      	ldr	r3, [r7, #4]
 800c292:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c294:	687b      	ldr	r3, [r7, #4]
 800c296:	693a      	ldr	r2, [r7, #16]
 800c298:	621a      	str	r2, [r3, #32]
}
 800c29a:	bf00      	nop
 800c29c:	371c      	adds	r7, #28
 800c29e:	46bd      	mov	sp, r7
 800c2a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2a4:	4770      	bx	lr
 800c2a6:	bf00      	nop
 800c2a8:	feff8fff 	.word	0xfeff8fff
 800c2ac:	40010000 	.word	0x40010000
 800c2b0:	40010400 	.word	0x40010400
 800c2b4:	40014000 	.word	0x40014000
 800c2b8:	40014400 	.word	0x40014400
 800c2bc:	40014800 	.word	0x40014800

0800c2c0 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800c2c0:	b480      	push	{r7}
 800c2c2:	b087      	sub	sp, #28
 800c2c4:	af00      	add	r7, sp, #0
 800c2c6:	60f8      	str	r0, [r7, #12]
 800c2c8:	60b9      	str	r1, [r7, #8]
 800c2ca:	607a      	str	r2, [r7, #4]
 800c2cc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c2ce:	68fb      	ldr	r3, [r7, #12]
 800c2d0:	6a1b      	ldr	r3, [r3, #32]
 800c2d2:	f023 0201 	bic.w	r2, r3, #1
 800c2d6:	68fb      	ldr	r3, [r7, #12]
 800c2d8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c2da:	68fb      	ldr	r3, [r7, #12]
 800c2dc:	699b      	ldr	r3, [r3, #24]
 800c2de:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800c2e0:	68fb      	ldr	r3, [r7, #12]
 800c2e2:	6a1b      	ldr	r3, [r3, #32]
 800c2e4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800c2e6:	68fb      	ldr	r3, [r7, #12]
 800c2e8:	4a28      	ldr	r2, [pc, #160]	; (800c38c <TIM_TI1_SetConfig+0xcc>)
 800c2ea:	4293      	cmp	r3, r2
 800c2ec:	d01b      	beq.n	800c326 <TIM_TI1_SetConfig+0x66>
 800c2ee:	68fb      	ldr	r3, [r7, #12]
 800c2f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c2f4:	d017      	beq.n	800c326 <TIM_TI1_SetConfig+0x66>
 800c2f6:	68fb      	ldr	r3, [r7, #12]
 800c2f8:	4a25      	ldr	r2, [pc, #148]	; (800c390 <TIM_TI1_SetConfig+0xd0>)
 800c2fa:	4293      	cmp	r3, r2
 800c2fc:	d013      	beq.n	800c326 <TIM_TI1_SetConfig+0x66>
 800c2fe:	68fb      	ldr	r3, [r7, #12]
 800c300:	4a24      	ldr	r2, [pc, #144]	; (800c394 <TIM_TI1_SetConfig+0xd4>)
 800c302:	4293      	cmp	r3, r2
 800c304:	d00f      	beq.n	800c326 <TIM_TI1_SetConfig+0x66>
 800c306:	68fb      	ldr	r3, [r7, #12]
 800c308:	4a23      	ldr	r2, [pc, #140]	; (800c398 <TIM_TI1_SetConfig+0xd8>)
 800c30a:	4293      	cmp	r3, r2
 800c30c:	d00b      	beq.n	800c326 <TIM_TI1_SetConfig+0x66>
 800c30e:	68fb      	ldr	r3, [r7, #12]
 800c310:	4a22      	ldr	r2, [pc, #136]	; (800c39c <TIM_TI1_SetConfig+0xdc>)
 800c312:	4293      	cmp	r3, r2
 800c314:	d007      	beq.n	800c326 <TIM_TI1_SetConfig+0x66>
 800c316:	68fb      	ldr	r3, [r7, #12]
 800c318:	4a21      	ldr	r2, [pc, #132]	; (800c3a0 <TIM_TI1_SetConfig+0xe0>)
 800c31a:	4293      	cmp	r3, r2
 800c31c:	d003      	beq.n	800c326 <TIM_TI1_SetConfig+0x66>
 800c31e:	68fb      	ldr	r3, [r7, #12]
 800c320:	4a20      	ldr	r2, [pc, #128]	; (800c3a4 <TIM_TI1_SetConfig+0xe4>)
 800c322:	4293      	cmp	r3, r2
 800c324:	d101      	bne.n	800c32a <TIM_TI1_SetConfig+0x6a>
 800c326:	2301      	movs	r3, #1
 800c328:	e000      	b.n	800c32c <TIM_TI1_SetConfig+0x6c>
 800c32a:	2300      	movs	r3, #0
 800c32c:	2b00      	cmp	r3, #0
 800c32e:	d008      	beq.n	800c342 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800c330:	697b      	ldr	r3, [r7, #20]
 800c332:	f023 0303 	bic.w	r3, r3, #3
 800c336:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800c338:	697a      	ldr	r2, [r7, #20]
 800c33a:	687b      	ldr	r3, [r7, #4]
 800c33c:	4313      	orrs	r3, r2
 800c33e:	617b      	str	r3, [r7, #20]
 800c340:	e003      	b.n	800c34a <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800c342:	697b      	ldr	r3, [r7, #20]
 800c344:	f043 0301 	orr.w	r3, r3, #1
 800c348:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800c34a:	697b      	ldr	r3, [r7, #20]
 800c34c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800c350:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800c352:	683b      	ldr	r3, [r7, #0]
 800c354:	011b      	lsls	r3, r3, #4
 800c356:	b2db      	uxtb	r3, r3
 800c358:	697a      	ldr	r2, [r7, #20]
 800c35a:	4313      	orrs	r3, r2
 800c35c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800c35e:	693b      	ldr	r3, [r7, #16]
 800c360:	f023 030a 	bic.w	r3, r3, #10
 800c364:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800c366:	68bb      	ldr	r3, [r7, #8]
 800c368:	f003 030a 	and.w	r3, r3, #10
 800c36c:	693a      	ldr	r2, [r7, #16]
 800c36e:	4313      	orrs	r3, r2
 800c370:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800c372:	68fb      	ldr	r3, [r7, #12]
 800c374:	697a      	ldr	r2, [r7, #20]
 800c376:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c378:	68fb      	ldr	r3, [r7, #12]
 800c37a:	693a      	ldr	r2, [r7, #16]
 800c37c:	621a      	str	r2, [r3, #32]
}
 800c37e:	bf00      	nop
 800c380:	371c      	adds	r7, #28
 800c382:	46bd      	mov	sp, r7
 800c384:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c388:	4770      	bx	lr
 800c38a:	bf00      	nop
 800c38c:	40010000 	.word	0x40010000
 800c390:	40000400 	.word	0x40000400
 800c394:	40000800 	.word	0x40000800
 800c398:	40000c00 	.word	0x40000c00
 800c39c:	40010400 	.word	0x40010400
 800c3a0:	40001800 	.word	0x40001800
 800c3a4:	40014000 	.word	0x40014000

0800c3a8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c3a8:	b480      	push	{r7}
 800c3aa:	b087      	sub	sp, #28
 800c3ac:	af00      	add	r7, sp, #0
 800c3ae:	60f8      	str	r0, [r7, #12]
 800c3b0:	60b9      	str	r1, [r7, #8]
 800c3b2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800c3b4:	68fb      	ldr	r3, [r7, #12]
 800c3b6:	6a1b      	ldr	r3, [r3, #32]
 800c3b8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c3ba:	68fb      	ldr	r3, [r7, #12]
 800c3bc:	6a1b      	ldr	r3, [r3, #32]
 800c3be:	f023 0201 	bic.w	r2, r3, #1
 800c3c2:	68fb      	ldr	r3, [r7, #12]
 800c3c4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c3c6:	68fb      	ldr	r3, [r7, #12]
 800c3c8:	699b      	ldr	r3, [r3, #24]
 800c3ca:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800c3cc:	693b      	ldr	r3, [r7, #16]
 800c3ce:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800c3d2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800c3d4:	687b      	ldr	r3, [r7, #4]
 800c3d6:	011b      	lsls	r3, r3, #4
 800c3d8:	693a      	ldr	r2, [r7, #16]
 800c3da:	4313      	orrs	r3, r2
 800c3dc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800c3de:	697b      	ldr	r3, [r7, #20]
 800c3e0:	f023 030a 	bic.w	r3, r3, #10
 800c3e4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800c3e6:	697a      	ldr	r2, [r7, #20]
 800c3e8:	68bb      	ldr	r3, [r7, #8]
 800c3ea:	4313      	orrs	r3, r2
 800c3ec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800c3ee:	68fb      	ldr	r3, [r7, #12]
 800c3f0:	693a      	ldr	r2, [r7, #16]
 800c3f2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c3f4:	68fb      	ldr	r3, [r7, #12]
 800c3f6:	697a      	ldr	r2, [r7, #20]
 800c3f8:	621a      	str	r2, [r3, #32]
}
 800c3fa:	bf00      	nop
 800c3fc:	371c      	adds	r7, #28
 800c3fe:	46bd      	mov	sp, r7
 800c400:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c404:	4770      	bx	lr

0800c406 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800c406:	b480      	push	{r7}
 800c408:	b087      	sub	sp, #28
 800c40a:	af00      	add	r7, sp, #0
 800c40c:	60f8      	str	r0, [r7, #12]
 800c40e:	60b9      	str	r1, [r7, #8]
 800c410:	607a      	str	r2, [r7, #4]
 800c412:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c414:	68fb      	ldr	r3, [r7, #12]
 800c416:	6a1b      	ldr	r3, [r3, #32]
 800c418:	f023 0210 	bic.w	r2, r3, #16
 800c41c:	68fb      	ldr	r3, [r7, #12]
 800c41e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c420:	68fb      	ldr	r3, [r7, #12]
 800c422:	699b      	ldr	r3, [r3, #24]
 800c424:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800c426:	68fb      	ldr	r3, [r7, #12]
 800c428:	6a1b      	ldr	r3, [r3, #32]
 800c42a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800c42c:	697b      	ldr	r3, [r7, #20]
 800c42e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c432:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800c434:	687b      	ldr	r3, [r7, #4]
 800c436:	021b      	lsls	r3, r3, #8
 800c438:	697a      	ldr	r2, [r7, #20]
 800c43a:	4313      	orrs	r3, r2
 800c43c:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800c43e:	697b      	ldr	r3, [r7, #20]
 800c440:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800c444:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800c446:	683b      	ldr	r3, [r7, #0]
 800c448:	031b      	lsls	r3, r3, #12
 800c44a:	b29b      	uxth	r3, r3
 800c44c:	697a      	ldr	r2, [r7, #20]
 800c44e:	4313      	orrs	r3, r2
 800c450:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800c452:	693b      	ldr	r3, [r7, #16]
 800c454:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800c458:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800c45a:	68bb      	ldr	r3, [r7, #8]
 800c45c:	011b      	lsls	r3, r3, #4
 800c45e:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800c462:	693a      	ldr	r2, [r7, #16]
 800c464:	4313      	orrs	r3, r2
 800c466:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800c468:	68fb      	ldr	r3, [r7, #12]
 800c46a:	697a      	ldr	r2, [r7, #20]
 800c46c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c46e:	68fb      	ldr	r3, [r7, #12]
 800c470:	693a      	ldr	r2, [r7, #16]
 800c472:	621a      	str	r2, [r3, #32]
}
 800c474:	bf00      	nop
 800c476:	371c      	adds	r7, #28
 800c478:	46bd      	mov	sp, r7
 800c47a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c47e:	4770      	bx	lr

0800c480 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c480:	b480      	push	{r7}
 800c482:	b087      	sub	sp, #28
 800c484:	af00      	add	r7, sp, #0
 800c486:	60f8      	str	r0, [r7, #12]
 800c488:	60b9      	str	r1, [r7, #8]
 800c48a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c48c:	68fb      	ldr	r3, [r7, #12]
 800c48e:	6a1b      	ldr	r3, [r3, #32]
 800c490:	f023 0210 	bic.w	r2, r3, #16
 800c494:	68fb      	ldr	r3, [r7, #12]
 800c496:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c498:	68fb      	ldr	r3, [r7, #12]
 800c49a:	699b      	ldr	r3, [r3, #24]
 800c49c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800c49e:	68fb      	ldr	r3, [r7, #12]
 800c4a0:	6a1b      	ldr	r3, [r3, #32]
 800c4a2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800c4a4:	697b      	ldr	r3, [r7, #20]
 800c4a6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800c4aa:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800c4ac:	687b      	ldr	r3, [r7, #4]
 800c4ae:	031b      	lsls	r3, r3, #12
 800c4b0:	697a      	ldr	r2, [r7, #20]
 800c4b2:	4313      	orrs	r3, r2
 800c4b4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800c4b6:	693b      	ldr	r3, [r7, #16]
 800c4b8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800c4bc:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800c4be:	68bb      	ldr	r3, [r7, #8]
 800c4c0:	011b      	lsls	r3, r3, #4
 800c4c2:	693a      	ldr	r2, [r7, #16]
 800c4c4:	4313      	orrs	r3, r2
 800c4c6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800c4c8:	68fb      	ldr	r3, [r7, #12]
 800c4ca:	697a      	ldr	r2, [r7, #20]
 800c4cc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c4ce:	68fb      	ldr	r3, [r7, #12]
 800c4d0:	693a      	ldr	r2, [r7, #16]
 800c4d2:	621a      	str	r2, [r3, #32]
}
 800c4d4:	bf00      	nop
 800c4d6:	371c      	adds	r7, #28
 800c4d8:	46bd      	mov	sp, r7
 800c4da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4de:	4770      	bx	lr

0800c4e0 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800c4e0:	b480      	push	{r7}
 800c4e2:	b087      	sub	sp, #28
 800c4e4:	af00      	add	r7, sp, #0
 800c4e6:	60f8      	str	r0, [r7, #12]
 800c4e8:	60b9      	str	r1, [r7, #8]
 800c4ea:	607a      	str	r2, [r7, #4]
 800c4ec:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800c4ee:	68fb      	ldr	r3, [r7, #12]
 800c4f0:	6a1b      	ldr	r3, [r3, #32]
 800c4f2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800c4f6:	68fb      	ldr	r3, [r7, #12]
 800c4f8:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800c4fa:	68fb      	ldr	r3, [r7, #12]
 800c4fc:	69db      	ldr	r3, [r3, #28]
 800c4fe:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800c500:	68fb      	ldr	r3, [r7, #12]
 800c502:	6a1b      	ldr	r3, [r3, #32]
 800c504:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800c506:	697b      	ldr	r3, [r7, #20]
 800c508:	f023 0303 	bic.w	r3, r3, #3
 800c50c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 800c50e:	697a      	ldr	r2, [r7, #20]
 800c510:	687b      	ldr	r3, [r7, #4]
 800c512:	4313      	orrs	r3, r2
 800c514:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800c516:	697b      	ldr	r3, [r7, #20]
 800c518:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800c51c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800c51e:	683b      	ldr	r3, [r7, #0]
 800c520:	011b      	lsls	r3, r3, #4
 800c522:	b2db      	uxtb	r3, r3
 800c524:	697a      	ldr	r2, [r7, #20]
 800c526:	4313      	orrs	r3, r2
 800c528:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800c52a:	693b      	ldr	r3, [r7, #16]
 800c52c:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 800c530:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800c532:	68bb      	ldr	r3, [r7, #8]
 800c534:	021b      	lsls	r3, r3, #8
 800c536:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 800c53a:	693a      	ldr	r2, [r7, #16]
 800c53c:	4313      	orrs	r3, r2
 800c53e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800c540:	68fb      	ldr	r3, [r7, #12]
 800c542:	697a      	ldr	r2, [r7, #20]
 800c544:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800c546:	68fb      	ldr	r3, [r7, #12]
 800c548:	693a      	ldr	r2, [r7, #16]
 800c54a:	621a      	str	r2, [r3, #32]
}
 800c54c:	bf00      	nop
 800c54e:	371c      	adds	r7, #28
 800c550:	46bd      	mov	sp, r7
 800c552:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c556:	4770      	bx	lr

0800c558 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800c558:	b480      	push	{r7}
 800c55a:	b087      	sub	sp, #28
 800c55c:	af00      	add	r7, sp, #0
 800c55e:	60f8      	str	r0, [r7, #12]
 800c560:	60b9      	str	r1, [r7, #8]
 800c562:	607a      	str	r2, [r7, #4]
 800c564:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800c566:	68fb      	ldr	r3, [r7, #12]
 800c568:	6a1b      	ldr	r3, [r3, #32]
 800c56a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800c56e:	68fb      	ldr	r3, [r7, #12]
 800c570:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800c572:	68fb      	ldr	r3, [r7, #12]
 800c574:	69db      	ldr	r3, [r3, #28]
 800c576:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800c578:	68fb      	ldr	r3, [r7, #12]
 800c57a:	6a1b      	ldr	r3, [r3, #32]
 800c57c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800c57e:	697b      	ldr	r3, [r7, #20]
 800c580:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c584:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800c586:	687b      	ldr	r3, [r7, #4]
 800c588:	021b      	lsls	r3, r3, #8
 800c58a:	697a      	ldr	r2, [r7, #20]
 800c58c:	4313      	orrs	r3, r2
 800c58e:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800c590:	697b      	ldr	r3, [r7, #20]
 800c592:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800c596:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800c598:	683b      	ldr	r3, [r7, #0]
 800c59a:	031b      	lsls	r3, r3, #12
 800c59c:	b29b      	uxth	r3, r3
 800c59e:	697a      	ldr	r2, [r7, #20]
 800c5a0:	4313      	orrs	r3, r2
 800c5a2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800c5a4:	693b      	ldr	r3, [r7, #16]
 800c5a6:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 800c5aa:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800c5ac:	68bb      	ldr	r3, [r7, #8]
 800c5ae:	031b      	lsls	r3, r3, #12
 800c5b0:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 800c5b4:	693a      	ldr	r2, [r7, #16]
 800c5b6:	4313      	orrs	r3, r2
 800c5b8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800c5ba:	68fb      	ldr	r3, [r7, #12]
 800c5bc:	697a      	ldr	r2, [r7, #20]
 800c5be:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800c5c0:	68fb      	ldr	r3, [r7, #12]
 800c5c2:	693a      	ldr	r2, [r7, #16]
 800c5c4:	621a      	str	r2, [r3, #32]
}
 800c5c6:	bf00      	nop
 800c5c8:	371c      	adds	r7, #28
 800c5ca:	46bd      	mov	sp, r7
 800c5cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5d0:	4770      	bx	lr
	...

0800c5d4 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800c5d4:	b480      	push	{r7}
 800c5d6:	b085      	sub	sp, #20
 800c5d8:	af00      	add	r7, sp, #0
 800c5da:	6078      	str	r0, [r7, #4]
 800c5dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800c5de:	687b      	ldr	r3, [r7, #4]
 800c5e0:	689b      	ldr	r3, [r3, #8]
 800c5e2:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800c5e4:	68fa      	ldr	r2, [r7, #12]
 800c5e6:	4b09      	ldr	r3, [pc, #36]	; (800c60c <TIM_ITRx_SetConfig+0x38>)
 800c5e8:	4013      	ands	r3, r2
 800c5ea:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800c5ec:	683a      	ldr	r2, [r7, #0]
 800c5ee:	68fb      	ldr	r3, [r7, #12]
 800c5f0:	4313      	orrs	r3, r2
 800c5f2:	f043 0307 	orr.w	r3, r3, #7
 800c5f6:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c5f8:	687b      	ldr	r3, [r7, #4]
 800c5fa:	68fa      	ldr	r2, [r7, #12]
 800c5fc:	609a      	str	r2, [r3, #8]
}
 800c5fe:	bf00      	nop
 800c600:	3714      	adds	r7, #20
 800c602:	46bd      	mov	sp, r7
 800c604:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c608:	4770      	bx	lr
 800c60a:	bf00      	nop
 800c60c:	ffcfff8f 	.word	0xffcfff8f

0800c610 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800c610:	b480      	push	{r7}
 800c612:	b087      	sub	sp, #28
 800c614:	af00      	add	r7, sp, #0
 800c616:	60f8      	str	r0, [r7, #12]
 800c618:	60b9      	str	r1, [r7, #8]
 800c61a:	607a      	str	r2, [r7, #4]
 800c61c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800c61e:	68fb      	ldr	r3, [r7, #12]
 800c620:	689b      	ldr	r3, [r3, #8]
 800c622:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c624:	697b      	ldr	r3, [r7, #20]
 800c626:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800c62a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800c62c:	683b      	ldr	r3, [r7, #0]
 800c62e:	021a      	lsls	r2, r3, #8
 800c630:	687b      	ldr	r3, [r7, #4]
 800c632:	431a      	orrs	r2, r3
 800c634:	68bb      	ldr	r3, [r7, #8]
 800c636:	4313      	orrs	r3, r2
 800c638:	697a      	ldr	r2, [r7, #20]
 800c63a:	4313      	orrs	r3, r2
 800c63c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c63e:	68fb      	ldr	r3, [r7, #12]
 800c640:	697a      	ldr	r2, [r7, #20]
 800c642:	609a      	str	r2, [r3, #8]
}
 800c644:	bf00      	nop
 800c646:	371c      	adds	r7, #28
 800c648:	46bd      	mov	sp, r7
 800c64a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c64e:	4770      	bx	lr

0800c650 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800c650:	b480      	push	{r7}
 800c652:	b087      	sub	sp, #28
 800c654:	af00      	add	r7, sp, #0
 800c656:	60f8      	str	r0, [r7, #12]
 800c658:	60b9      	str	r1, [r7, #8]
 800c65a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800c65c:	68bb      	ldr	r3, [r7, #8]
 800c65e:	f003 031f 	and.w	r3, r3, #31
 800c662:	2201      	movs	r2, #1
 800c664:	fa02 f303 	lsl.w	r3, r2, r3
 800c668:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800c66a:	68fb      	ldr	r3, [r7, #12]
 800c66c:	6a1a      	ldr	r2, [r3, #32]
 800c66e:	697b      	ldr	r3, [r7, #20]
 800c670:	43db      	mvns	r3, r3
 800c672:	401a      	ands	r2, r3
 800c674:	68fb      	ldr	r3, [r7, #12]
 800c676:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800c678:	68fb      	ldr	r3, [r7, #12]
 800c67a:	6a1a      	ldr	r2, [r3, #32]
 800c67c:	68bb      	ldr	r3, [r7, #8]
 800c67e:	f003 031f 	and.w	r3, r3, #31
 800c682:	6879      	ldr	r1, [r7, #4]
 800c684:	fa01 f303 	lsl.w	r3, r1, r3
 800c688:	431a      	orrs	r2, r3
 800c68a:	68fb      	ldr	r3, [r7, #12]
 800c68c:	621a      	str	r2, [r3, #32]
}
 800c68e:	bf00      	nop
 800c690:	371c      	adds	r7, #28
 800c692:	46bd      	mov	sp, r7
 800c694:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c698:	4770      	bx	lr
	...

0800c69c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800c69c:	b480      	push	{r7}
 800c69e:	b085      	sub	sp, #20
 800c6a0:	af00      	add	r7, sp, #0
 800c6a2:	6078      	str	r0, [r7, #4]
 800c6a4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800c6a6:	687b      	ldr	r3, [r7, #4]
 800c6a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c6ac:	2b01      	cmp	r3, #1
 800c6ae:	d101      	bne.n	800c6b4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800c6b0:	2302      	movs	r3, #2
 800c6b2:	e06d      	b.n	800c790 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800c6b4:	687b      	ldr	r3, [r7, #4]
 800c6b6:	2201      	movs	r2, #1
 800c6b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c6bc:	687b      	ldr	r3, [r7, #4]
 800c6be:	2202      	movs	r2, #2
 800c6c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800c6c4:	687b      	ldr	r3, [r7, #4]
 800c6c6:	681b      	ldr	r3, [r3, #0]
 800c6c8:	685b      	ldr	r3, [r3, #4]
 800c6ca:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800c6cc:	687b      	ldr	r3, [r7, #4]
 800c6ce:	681b      	ldr	r3, [r3, #0]
 800c6d0:	689b      	ldr	r3, [r3, #8]
 800c6d2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800c6d4:	687b      	ldr	r3, [r7, #4]
 800c6d6:	681b      	ldr	r3, [r3, #0]
 800c6d8:	4a30      	ldr	r2, [pc, #192]	; (800c79c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800c6da:	4293      	cmp	r3, r2
 800c6dc:	d004      	beq.n	800c6e8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800c6de:	687b      	ldr	r3, [r7, #4]
 800c6e0:	681b      	ldr	r3, [r3, #0]
 800c6e2:	4a2f      	ldr	r2, [pc, #188]	; (800c7a0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800c6e4:	4293      	cmp	r3, r2
 800c6e6:	d108      	bne.n	800c6fa <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800c6e8:	68fb      	ldr	r3, [r7, #12]
 800c6ea:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800c6ee:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800c6f0:	683b      	ldr	r3, [r7, #0]
 800c6f2:	685b      	ldr	r3, [r3, #4]
 800c6f4:	68fa      	ldr	r2, [r7, #12]
 800c6f6:	4313      	orrs	r3, r2
 800c6f8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800c6fa:	68fb      	ldr	r3, [r7, #12]
 800c6fc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c700:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800c702:	683b      	ldr	r3, [r7, #0]
 800c704:	681b      	ldr	r3, [r3, #0]
 800c706:	68fa      	ldr	r2, [r7, #12]
 800c708:	4313      	orrs	r3, r2
 800c70a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800c70c:	687b      	ldr	r3, [r7, #4]
 800c70e:	681b      	ldr	r3, [r3, #0]
 800c710:	68fa      	ldr	r2, [r7, #12]
 800c712:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c714:	687b      	ldr	r3, [r7, #4]
 800c716:	681b      	ldr	r3, [r3, #0]
 800c718:	4a20      	ldr	r2, [pc, #128]	; (800c79c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800c71a:	4293      	cmp	r3, r2
 800c71c:	d022      	beq.n	800c764 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800c71e:	687b      	ldr	r3, [r7, #4]
 800c720:	681b      	ldr	r3, [r3, #0]
 800c722:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c726:	d01d      	beq.n	800c764 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800c728:	687b      	ldr	r3, [r7, #4]
 800c72a:	681b      	ldr	r3, [r3, #0]
 800c72c:	4a1d      	ldr	r2, [pc, #116]	; (800c7a4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800c72e:	4293      	cmp	r3, r2
 800c730:	d018      	beq.n	800c764 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800c732:	687b      	ldr	r3, [r7, #4]
 800c734:	681b      	ldr	r3, [r3, #0]
 800c736:	4a1c      	ldr	r2, [pc, #112]	; (800c7a8 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800c738:	4293      	cmp	r3, r2
 800c73a:	d013      	beq.n	800c764 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800c73c:	687b      	ldr	r3, [r7, #4]
 800c73e:	681b      	ldr	r3, [r3, #0]
 800c740:	4a1a      	ldr	r2, [pc, #104]	; (800c7ac <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800c742:	4293      	cmp	r3, r2
 800c744:	d00e      	beq.n	800c764 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800c746:	687b      	ldr	r3, [r7, #4]
 800c748:	681b      	ldr	r3, [r3, #0]
 800c74a:	4a15      	ldr	r2, [pc, #84]	; (800c7a0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800c74c:	4293      	cmp	r3, r2
 800c74e:	d009      	beq.n	800c764 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800c750:	687b      	ldr	r3, [r7, #4]
 800c752:	681b      	ldr	r3, [r3, #0]
 800c754:	4a16      	ldr	r2, [pc, #88]	; (800c7b0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800c756:	4293      	cmp	r3, r2
 800c758:	d004      	beq.n	800c764 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800c75a:	687b      	ldr	r3, [r7, #4]
 800c75c:	681b      	ldr	r3, [r3, #0]
 800c75e:	4a15      	ldr	r2, [pc, #84]	; (800c7b4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800c760:	4293      	cmp	r3, r2
 800c762:	d10c      	bne.n	800c77e <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800c764:	68bb      	ldr	r3, [r7, #8]
 800c766:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c76a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800c76c:	683b      	ldr	r3, [r7, #0]
 800c76e:	689b      	ldr	r3, [r3, #8]
 800c770:	68ba      	ldr	r2, [r7, #8]
 800c772:	4313      	orrs	r3, r2
 800c774:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800c776:	687b      	ldr	r3, [r7, #4]
 800c778:	681b      	ldr	r3, [r3, #0]
 800c77a:	68ba      	ldr	r2, [r7, #8]
 800c77c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800c77e:	687b      	ldr	r3, [r7, #4]
 800c780:	2201      	movs	r2, #1
 800c782:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800c786:	687b      	ldr	r3, [r7, #4]
 800c788:	2200      	movs	r2, #0
 800c78a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800c78e:	2300      	movs	r3, #0
}
 800c790:	4618      	mov	r0, r3
 800c792:	3714      	adds	r7, #20
 800c794:	46bd      	mov	sp, r7
 800c796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c79a:	4770      	bx	lr
 800c79c:	40010000 	.word	0x40010000
 800c7a0:	40010400 	.word	0x40010400
 800c7a4:	40000400 	.word	0x40000400
 800c7a8:	40000800 	.word	0x40000800
 800c7ac:	40000c00 	.word	0x40000c00
 800c7b0:	40001800 	.word	0x40001800
 800c7b4:	40014000 	.word	0x40014000

0800c7b8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800c7b8:	b480      	push	{r7}
 800c7ba:	b083      	sub	sp, #12
 800c7bc:	af00      	add	r7, sp, #0
 800c7be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800c7c0:	bf00      	nop
 800c7c2:	370c      	adds	r7, #12
 800c7c4:	46bd      	mov	sp, r7
 800c7c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7ca:	4770      	bx	lr

0800c7cc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800c7cc:	b480      	push	{r7}
 800c7ce:	b083      	sub	sp, #12
 800c7d0:	af00      	add	r7, sp, #0
 800c7d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800c7d4:	bf00      	nop
 800c7d6:	370c      	adds	r7, #12
 800c7d8:	46bd      	mov	sp, r7
 800c7da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7de:	4770      	bx	lr

0800c7e0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800c7e0:	b480      	push	{r7}
 800c7e2:	b083      	sub	sp, #12
 800c7e4:	af00      	add	r7, sp, #0
 800c7e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800c7e8:	bf00      	nop
 800c7ea:	370c      	adds	r7, #12
 800c7ec:	46bd      	mov	sp, r7
 800c7ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7f2:	4770      	bx	lr

0800c7f4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800c7f4:	b580      	push	{r7, lr}
 800c7f6:	b082      	sub	sp, #8
 800c7f8:	af00      	add	r7, sp, #0
 800c7fa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800c7fc:	687b      	ldr	r3, [r7, #4]
 800c7fe:	2b00      	cmp	r3, #0
 800c800:	d101      	bne.n	800c806 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800c802:	2301      	movs	r3, #1
 800c804:	e042      	b.n	800c88c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800c806:	687b      	ldr	r3, [r7, #4]
 800c808:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c80c:	2b00      	cmp	r3, #0
 800c80e:	d106      	bne.n	800c81e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800c810:	687b      	ldr	r3, [r7, #4]
 800c812:	2200      	movs	r2, #0
 800c814:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800c818:	6878      	ldr	r0, [r7, #4]
 800c81a:	f7fa f9d9 	bl	8006bd0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800c81e:	687b      	ldr	r3, [r7, #4]
 800c820:	2224      	movs	r2, #36	; 0x24
 800c822:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800c826:	687b      	ldr	r3, [r7, #4]
 800c828:	681b      	ldr	r3, [r3, #0]
 800c82a:	681a      	ldr	r2, [r3, #0]
 800c82c:	687b      	ldr	r3, [r7, #4]
 800c82e:	681b      	ldr	r3, [r3, #0]
 800c830:	f022 0201 	bic.w	r2, r2, #1
 800c834:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800c836:	6878      	ldr	r0, [r7, #4]
 800c838:	f000 fccc 	bl	800d1d4 <UART_SetConfig>
 800c83c:	4603      	mov	r3, r0
 800c83e:	2b01      	cmp	r3, #1
 800c840:	d101      	bne.n	800c846 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800c842:	2301      	movs	r3, #1
 800c844:	e022      	b.n	800c88c <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800c846:	687b      	ldr	r3, [r7, #4]
 800c848:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c84a:	2b00      	cmp	r3, #0
 800c84c:	d002      	beq.n	800c854 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800c84e:	6878      	ldr	r0, [r7, #4]
 800c850:	f001 fa28 	bl	800dca4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800c854:	687b      	ldr	r3, [r7, #4]
 800c856:	681b      	ldr	r3, [r3, #0]
 800c858:	685a      	ldr	r2, [r3, #4]
 800c85a:	687b      	ldr	r3, [r7, #4]
 800c85c:	681b      	ldr	r3, [r3, #0]
 800c85e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800c862:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800c864:	687b      	ldr	r3, [r7, #4]
 800c866:	681b      	ldr	r3, [r3, #0]
 800c868:	689a      	ldr	r2, [r3, #8]
 800c86a:	687b      	ldr	r3, [r7, #4]
 800c86c:	681b      	ldr	r3, [r3, #0]
 800c86e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800c872:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800c874:	687b      	ldr	r3, [r7, #4]
 800c876:	681b      	ldr	r3, [r3, #0]
 800c878:	681a      	ldr	r2, [r3, #0]
 800c87a:	687b      	ldr	r3, [r7, #4]
 800c87c:	681b      	ldr	r3, [r3, #0]
 800c87e:	f042 0201 	orr.w	r2, r2, #1
 800c882:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800c884:	6878      	ldr	r0, [r7, #4]
 800c886:	f001 faaf 	bl	800dde8 <UART_CheckIdleState>
 800c88a:	4603      	mov	r3, r0
}
 800c88c:	4618      	mov	r0, r3
 800c88e:	3708      	adds	r7, #8
 800c890:	46bd      	mov	sp, r7
 800c892:	bd80      	pop	{r7, pc}

0800c894 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800c894:	b580      	push	{r7, lr}
 800c896:	b08a      	sub	sp, #40	; 0x28
 800c898:	af02      	add	r7, sp, #8
 800c89a:	60f8      	str	r0, [r7, #12]
 800c89c:	60b9      	str	r1, [r7, #8]
 800c89e:	603b      	str	r3, [r7, #0]
 800c8a0:	4613      	mov	r3, r2
 800c8a2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800c8a4:	68fb      	ldr	r3, [r7, #12]
 800c8a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c8aa:	2b20      	cmp	r3, #32
 800c8ac:	f040 8083 	bne.w	800c9b6 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 800c8b0:	68bb      	ldr	r3, [r7, #8]
 800c8b2:	2b00      	cmp	r3, #0
 800c8b4:	d002      	beq.n	800c8bc <HAL_UART_Transmit+0x28>
 800c8b6:	88fb      	ldrh	r3, [r7, #6]
 800c8b8:	2b00      	cmp	r3, #0
 800c8ba:	d101      	bne.n	800c8c0 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800c8bc:	2301      	movs	r3, #1
 800c8be:	e07b      	b.n	800c9b8 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 800c8c0:	68fb      	ldr	r3, [r7, #12]
 800c8c2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800c8c6:	2b01      	cmp	r3, #1
 800c8c8:	d101      	bne.n	800c8ce <HAL_UART_Transmit+0x3a>
 800c8ca:	2302      	movs	r3, #2
 800c8cc:	e074      	b.n	800c9b8 <HAL_UART_Transmit+0x124>
 800c8ce:	68fb      	ldr	r3, [r7, #12]
 800c8d0:	2201      	movs	r2, #1
 800c8d2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c8d6:	68fb      	ldr	r3, [r7, #12]
 800c8d8:	2200      	movs	r2, #0
 800c8da:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800c8de:	68fb      	ldr	r3, [r7, #12]
 800c8e0:	2221      	movs	r2, #33	; 0x21
 800c8e2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800c8e6:	f7fa fb4f 	bl	8006f88 <HAL_GetTick>
 800c8ea:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800c8ec:	68fb      	ldr	r3, [r7, #12]
 800c8ee:	88fa      	ldrh	r2, [r7, #6]
 800c8f0:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800c8f4:	68fb      	ldr	r3, [r7, #12]
 800c8f6:	88fa      	ldrh	r2, [r7, #6]
 800c8f8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c8fc:	68fb      	ldr	r3, [r7, #12]
 800c8fe:	689b      	ldr	r3, [r3, #8]
 800c900:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c904:	d108      	bne.n	800c918 <HAL_UART_Transmit+0x84>
 800c906:	68fb      	ldr	r3, [r7, #12]
 800c908:	691b      	ldr	r3, [r3, #16]
 800c90a:	2b00      	cmp	r3, #0
 800c90c:	d104      	bne.n	800c918 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 800c90e:	2300      	movs	r3, #0
 800c910:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800c912:	68bb      	ldr	r3, [r7, #8]
 800c914:	61bb      	str	r3, [r7, #24]
 800c916:	e003      	b.n	800c920 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 800c918:	68bb      	ldr	r3, [r7, #8]
 800c91a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800c91c:	2300      	movs	r3, #0
 800c91e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800c920:	68fb      	ldr	r3, [r7, #12]
 800c922:	2200      	movs	r2, #0
 800c924:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 800c928:	e02c      	b.n	800c984 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800c92a:	683b      	ldr	r3, [r7, #0]
 800c92c:	9300      	str	r3, [sp, #0]
 800c92e:	697b      	ldr	r3, [r7, #20]
 800c930:	2200      	movs	r2, #0
 800c932:	2180      	movs	r1, #128	; 0x80
 800c934:	68f8      	ldr	r0, [r7, #12]
 800c936:	f001 faa2 	bl	800de7e <UART_WaitOnFlagUntilTimeout>
 800c93a:	4603      	mov	r3, r0
 800c93c:	2b00      	cmp	r3, #0
 800c93e:	d001      	beq.n	800c944 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 800c940:	2303      	movs	r3, #3
 800c942:	e039      	b.n	800c9b8 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 800c944:	69fb      	ldr	r3, [r7, #28]
 800c946:	2b00      	cmp	r3, #0
 800c948:	d10b      	bne.n	800c962 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800c94a:	69bb      	ldr	r3, [r7, #24]
 800c94c:	881b      	ldrh	r3, [r3, #0]
 800c94e:	461a      	mov	r2, r3
 800c950:	68fb      	ldr	r3, [r7, #12]
 800c952:	681b      	ldr	r3, [r3, #0]
 800c954:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800c958:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800c95a:	69bb      	ldr	r3, [r7, #24]
 800c95c:	3302      	adds	r3, #2
 800c95e:	61bb      	str	r3, [r7, #24]
 800c960:	e007      	b.n	800c972 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800c962:	69fb      	ldr	r3, [r7, #28]
 800c964:	781a      	ldrb	r2, [r3, #0]
 800c966:	68fb      	ldr	r3, [r7, #12]
 800c968:	681b      	ldr	r3, [r3, #0]
 800c96a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800c96c:	69fb      	ldr	r3, [r7, #28]
 800c96e:	3301      	adds	r3, #1
 800c970:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800c972:	68fb      	ldr	r3, [r7, #12]
 800c974:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800c978:	b29b      	uxth	r3, r3
 800c97a:	3b01      	subs	r3, #1
 800c97c:	b29a      	uxth	r2, r3
 800c97e:	68fb      	ldr	r3, [r7, #12]
 800c980:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800c984:	68fb      	ldr	r3, [r7, #12]
 800c986:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800c98a:	b29b      	uxth	r3, r3
 800c98c:	2b00      	cmp	r3, #0
 800c98e:	d1cc      	bne.n	800c92a <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800c990:	683b      	ldr	r3, [r7, #0]
 800c992:	9300      	str	r3, [sp, #0]
 800c994:	697b      	ldr	r3, [r7, #20]
 800c996:	2200      	movs	r2, #0
 800c998:	2140      	movs	r1, #64	; 0x40
 800c99a:	68f8      	ldr	r0, [r7, #12]
 800c99c:	f001 fa6f 	bl	800de7e <UART_WaitOnFlagUntilTimeout>
 800c9a0:	4603      	mov	r3, r0
 800c9a2:	2b00      	cmp	r3, #0
 800c9a4:	d001      	beq.n	800c9aa <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 800c9a6:	2303      	movs	r3, #3
 800c9a8:	e006      	b.n	800c9b8 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800c9aa:	68fb      	ldr	r3, [r7, #12]
 800c9ac:	2220      	movs	r2, #32
 800c9ae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 800c9b2:	2300      	movs	r3, #0
 800c9b4:	e000      	b.n	800c9b8 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 800c9b6:	2302      	movs	r3, #2
  }
}
 800c9b8:	4618      	mov	r0, r3
 800c9ba:	3720      	adds	r7, #32
 800c9bc:	46bd      	mov	sp, r7
 800c9be:	bd80      	pop	{r7, pc}

0800c9c0 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800c9c0:	b580      	push	{r7, lr}
 800c9c2:	b08a      	sub	sp, #40	; 0x28
 800c9c4:	af00      	add	r7, sp, #0
 800c9c6:	60f8      	str	r0, [r7, #12]
 800c9c8:	60b9      	str	r1, [r7, #8]
 800c9ca:	4613      	mov	r3, r2
 800c9cc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800c9ce:	68fb      	ldr	r3, [r7, #12]
 800c9d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c9d4:	2b20      	cmp	r3, #32
 800c9d6:	d142      	bne.n	800ca5e <HAL_UART_Receive_IT+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 800c9d8:	68bb      	ldr	r3, [r7, #8]
 800c9da:	2b00      	cmp	r3, #0
 800c9dc:	d002      	beq.n	800c9e4 <HAL_UART_Receive_IT+0x24>
 800c9de:	88fb      	ldrh	r3, [r7, #6]
 800c9e0:	2b00      	cmp	r3, #0
 800c9e2:	d101      	bne.n	800c9e8 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800c9e4:	2301      	movs	r3, #1
 800c9e6:	e03b      	b.n	800ca60 <HAL_UART_Receive_IT+0xa0>
    }

    __HAL_LOCK(huart);
 800c9e8:	68fb      	ldr	r3, [r7, #12]
 800c9ea:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800c9ee:	2b01      	cmp	r3, #1
 800c9f0:	d101      	bne.n	800c9f6 <HAL_UART_Receive_IT+0x36>
 800c9f2:	2302      	movs	r3, #2
 800c9f4:	e034      	b.n	800ca60 <HAL_UART_Receive_IT+0xa0>
 800c9f6:	68fb      	ldr	r3, [r7, #12]
 800c9f8:	2201      	movs	r2, #1
 800c9fa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c9fe:	68fb      	ldr	r3, [r7, #12]
 800ca00:	2200      	movs	r2, #0
 800ca02:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800ca04:	68fb      	ldr	r3, [r7, #12]
 800ca06:	681b      	ldr	r3, [r3, #0]
 800ca08:	4a17      	ldr	r2, [pc, #92]	; (800ca68 <HAL_UART_Receive_IT+0xa8>)
 800ca0a:	4293      	cmp	r3, r2
 800ca0c:	d01f      	beq.n	800ca4e <HAL_UART_Receive_IT+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800ca0e:	68fb      	ldr	r3, [r7, #12]
 800ca10:	681b      	ldr	r3, [r3, #0]
 800ca12:	685b      	ldr	r3, [r3, #4]
 800ca14:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800ca18:	2b00      	cmp	r3, #0
 800ca1a:	d018      	beq.n	800ca4e <HAL_UART_Receive_IT+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800ca1c:	68fb      	ldr	r3, [r7, #12]
 800ca1e:	681b      	ldr	r3, [r3, #0]
 800ca20:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ca22:	697b      	ldr	r3, [r7, #20]
 800ca24:	e853 3f00 	ldrex	r3, [r3]
 800ca28:	613b      	str	r3, [r7, #16]
   return(result);
 800ca2a:	693b      	ldr	r3, [r7, #16]
 800ca2c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800ca30:	627b      	str	r3, [r7, #36]	; 0x24
 800ca32:	68fb      	ldr	r3, [r7, #12]
 800ca34:	681b      	ldr	r3, [r3, #0]
 800ca36:	461a      	mov	r2, r3
 800ca38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca3a:	623b      	str	r3, [r7, #32]
 800ca3c:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ca3e:	69f9      	ldr	r1, [r7, #28]
 800ca40:	6a3a      	ldr	r2, [r7, #32]
 800ca42:	e841 2300 	strex	r3, r2, [r1]
 800ca46:	61bb      	str	r3, [r7, #24]
   return(result);
 800ca48:	69bb      	ldr	r3, [r7, #24]
 800ca4a:	2b00      	cmp	r3, #0
 800ca4c:	d1e6      	bne.n	800ca1c <HAL_UART_Receive_IT+0x5c>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800ca4e:	88fb      	ldrh	r3, [r7, #6]
 800ca50:	461a      	mov	r2, r3
 800ca52:	68b9      	ldr	r1, [r7, #8]
 800ca54:	68f8      	ldr	r0, [r7, #12]
 800ca56:	f001 fadb 	bl	800e010 <UART_Start_Receive_IT>
 800ca5a:	4603      	mov	r3, r0
 800ca5c:	e000      	b.n	800ca60 <HAL_UART_Receive_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800ca5e:	2302      	movs	r3, #2
  }
}
 800ca60:	4618      	mov	r0, r3
 800ca62:	3728      	adds	r7, #40	; 0x28
 800ca64:	46bd      	mov	sp, r7
 800ca66:	bd80      	pop	{r7, pc}
 800ca68:	58000c00 	.word	0x58000c00

0800ca6c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800ca6c:	b580      	push	{r7, lr}
 800ca6e:	b0ba      	sub	sp, #232	; 0xe8
 800ca70:	af00      	add	r7, sp, #0
 800ca72:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800ca74:	687b      	ldr	r3, [r7, #4]
 800ca76:	681b      	ldr	r3, [r3, #0]
 800ca78:	69db      	ldr	r3, [r3, #28]
 800ca7a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800ca7e:	687b      	ldr	r3, [r7, #4]
 800ca80:	681b      	ldr	r3, [r3, #0]
 800ca82:	681b      	ldr	r3, [r3, #0]
 800ca84:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800ca88:	687b      	ldr	r3, [r7, #4]
 800ca8a:	681b      	ldr	r3, [r3, #0]
 800ca8c:	689b      	ldr	r3, [r3, #8]
 800ca8e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800ca92:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800ca96:	f640 030f 	movw	r3, #2063	; 0x80f
 800ca9a:	4013      	ands	r3, r2
 800ca9c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800caa0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800caa4:	2b00      	cmp	r3, #0
 800caa6:	d11b      	bne.n	800cae0 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800caa8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800caac:	f003 0320 	and.w	r3, r3, #32
 800cab0:	2b00      	cmp	r3, #0
 800cab2:	d015      	beq.n	800cae0 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800cab4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800cab8:	f003 0320 	and.w	r3, r3, #32
 800cabc:	2b00      	cmp	r3, #0
 800cabe:	d105      	bne.n	800cacc <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800cac0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800cac4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800cac8:	2b00      	cmp	r3, #0
 800caca:	d009      	beq.n	800cae0 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800cacc:	687b      	ldr	r3, [r7, #4]
 800cace:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cad0:	2b00      	cmp	r3, #0
 800cad2:	f000 835a 	beq.w	800d18a <HAL_UART_IRQHandler+0x71e>
      {
        huart->RxISR(huart);
 800cad6:	687b      	ldr	r3, [r7, #4]
 800cad8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cada:	6878      	ldr	r0, [r7, #4]
 800cadc:	4798      	blx	r3
      }
      return;
 800cade:	e354      	b.n	800d18a <HAL_UART_IRQHandler+0x71e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800cae0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800cae4:	2b00      	cmp	r3, #0
 800cae6:	f000 811f 	beq.w	800cd28 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800caea:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800caee:	4b8b      	ldr	r3, [pc, #556]	; (800cd1c <HAL_UART_IRQHandler+0x2b0>)
 800caf0:	4013      	ands	r3, r2
 800caf2:	2b00      	cmp	r3, #0
 800caf4:	d106      	bne.n	800cb04 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800caf6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800cafa:	4b89      	ldr	r3, [pc, #548]	; (800cd20 <HAL_UART_IRQHandler+0x2b4>)
 800cafc:	4013      	ands	r3, r2
 800cafe:	2b00      	cmp	r3, #0
 800cb00:	f000 8112 	beq.w	800cd28 <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800cb04:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800cb08:	f003 0301 	and.w	r3, r3, #1
 800cb0c:	2b00      	cmp	r3, #0
 800cb0e:	d011      	beq.n	800cb34 <HAL_UART_IRQHandler+0xc8>
 800cb10:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800cb14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cb18:	2b00      	cmp	r3, #0
 800cb1a:	d00b      	beq.n	800cb34 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800cb1c:	687b      	ldr	r3, [r7, #4]
 800cb1e:	681b      	ldr	r3, [r3, #0]
 800cb20:	2201      	movs	r2, #1
 800cb22:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800cb24:	687b      	ldr	r3, [r7, #4]
 800cb26:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800cb2a:	f043 0201 	orr.w	r2, r3, #1
 800cb2e:	687b      	ldr	r3, [r7, #4]
 800cb30:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800cb34:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800cb38:	f003 0302 	and.w	r3, r3, #2
 800cb3c:	2b00      	cmp	r3, #0
 800cb3e:	d011      	beq.n	800cb64 <HAL_UART_IRQHandler+0xf8>
 800cb40:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800cb44:	f003 0301 	and.w	r3, r3, #1
 800cb48:	2b00      	cmp	r3, #0
 800cb4a:	d00b      	beq.n	800cb64 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800cb4c:	687b      	ldr	r3, [r7, #4]
 800cb4e:	681b      	ldr	r3, [r3, #0]
 800cb50:	2202      	movs	r2, #2
 800cb52:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800cb54:	687b      	ldr	r3, [r7, #4]
 800cb56:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800cb5a:	f043 0204 	orr.w	r2, r3, #4
 800cb5e:	687b      	ldr	r3, [r7, #4]
 800cb60:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800cb64:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800cb68:	f003 0304 	and.w	r3, r3, #4
 800cb6c:	2b00      	cmp	r3, #0
 800cb6e:	d011      	beq.n	800cb94 <HAL_UART_IRQHandler+0x128>
 800cb70:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800cb74:	f003 0301 	and.w	r3, r3, #1
 800cb78:	2b00      	cmp	r3, #0
 800cb7a:	d00b      	beq.n	800cb94 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800cb7c:	687b      	ldr	r3, [r7, #4]
 800cb7e:	681b      	ldr	r3, [r3, #0]
 800cb80:	2204      	movs	r2, #4
 800cb82:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800cb84:	687b      	ldr	r3, [r7, #4]
 800cb86:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800cb8a:	f043 0202 	orr.w	r2, r3, #2
 800cb8e:	687b      	ldr	r3, [r7, #4]
 800cb90:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800cb94:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800cb98:	f003 0308 	and.w	r3, r3, #8
 800cb9c:	2b00      	cmp	r3, #0
 800cb9e:	d017      	beq.n	800cbd0 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800cba0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800cba4:	f003 0320 	and.w	r3, r3, #32
 800cba8:	2b00      	cmp	r3, #0
 800cbaa:	d105      	bne.n	800cbb8 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800cbac:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800cbb0:	4b5a      	ldr	r3, [pc, #360]	; (800cd1c <HAL_UART_IRQHandler+0x2b0>)
 800cbb2:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800cbb4:	2b00      	cmp	r3, #0
 800cbb6:	d00b      	beq.n	800cbd0 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800cbb8:	687b      	ldr	r3, [r7, #4]
 800cbba:	681b      	ldr	r3, [r3, #0]
 800cbbc:	2208      	movs	r2, #8
 800cbbe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800cbc0:	687b      	ldr	r3, [r7, #4]
 800cbc2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800cbc6:	f043 0208 	orr.w	r2, r3, #8
 800cbca:	687b      	ldr	r3, [r7, #4]
 800cbcc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800cbd0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800cbd4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800cbd8:	2b00      	cmp	r3, #0
 800cbda:	d012      	beq.n	800cc02 <HAL_UART_IRQHandler+0x196>
 800cbdc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800cbe0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800cbe4:	2b00      	cmp	r3, #0
 800cbe6:	d00c      	beq.n	800cc02 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800cbe8:	687b      	ldr	r3, [r7, #4]
 800cbea:	681b      	ldr	r3, [r3, #0]
 800cbec:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800cbf0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800cbf2:	687b      	ldr	r3, [r7, #4]
 800cbf4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800cbf8:	f043 0220 	orr.w	r2, r3, #32
 800cbfc:	687b      	ldr	r3, [r7, #4]
 800cbfe:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800cc02:	687b      	ldr	r3, [r7, #4]
 800cc04:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800cc08:	2b00      	cmp	r3, #0
 800cc0a:	f000 82c0 	beq.w	800d18e <HAL_UART_IRQHandler+0x722>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800cc0e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800cc12:	f003 0320 	and.w	r3, r3, #32
 800cc16:	2b00      	cmp	r3, #0
 800cc18:	d013      	beq.n	800cc42 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800cc1a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800cc1e:	f003 0320 	and.w	r3, r3, #32
 800cc22:	2b00      	cmp	r3, #0
 800cc24:	d105      	bne.n	800cc32 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800cc26:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800cc2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800cc2e:	2b00      	cmp	r3, #0
 800cc30:	d007      	beq.n	800cc42 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800cc32:	687b      	ldr	r3, [r7, #4]
 800cc34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cc36:	2b00      	cmp	r3, #0
 800cc38:	d003      	beq.n	800cc42 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800cc3a:	687b      	ldr	r3, [r7, #4]
 800cc3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cc3e:	6878      	ldr	r0, [r7, #4]
 800cc40:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800cc42:	687b      	ldr	r3, [r7, #4]
 800cc44:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800cc48:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800cc4c:	687b      	ldr	r3, [r7, #4]
 800cc4e:	681b      	ldr	r3, [r3, #0]
 800cc50:	689b      	ldr	r3, [r3, #8]
 800cc52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cc56:	2b40      	cmp	r3, #64	; 0x40
 800cc58:	d005      	beq.n	800cc66 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800cc5a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800cc5e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800cc62:	2b00      	cmp	r3, #0
 800cc64:	d04f      	beq.n	800cd06 <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800cc66:	6878      	ldr	r0, [r7, #4]
 800cc68:	f001 fafc 	bl	800e264 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800cc6c:	687b      	ldr	r3, [r7, #4]
 800cc6e:	681b      	ldr	r3, [r3, #0]
 800cc70:	689b      	ldr	r3, [r3, #8]
 800cc72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cc76:	2b40      	cmp	r3, #64	; 0x40
 800cc78:	d141      	bne.n	800ccfe <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800cc7a:	687b      	ldr	r3, [r7, #4]
 800cc7c:	681b      	ldr	r3, [r3, #0]
 800cc7e:	3308      	adds	r3, #8
 800cc80:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cc84:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800cc88:	e853 3f00 	ldrex	r3, [r3]
 800cc8c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800cc90:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800cc94:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800cc98:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800cc9c:	687b      	ldr	r3, [r7, #4]
 800cc9e:	681b      	ldr	r3, [r3, #0]
 800cca0:	3308      	adds	r3, #8
 800cca2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800cca6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800ccaa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ccae:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800ccb2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800ccb6:	e841 2300 	strex	r3, r2, [r1]
 800ccba:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800ccbe:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800ccc2:	2b00      	cmp	r3, #0
 800ccc4:	d1d9      	bne.n	800cc7a <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800ccc6:	687b      	ldr	r3, [r7, #4]
 800ccc8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ccca:	2b00      	cmp	r3, #0
 800cccc:	d013      	beq.n	800ccf6 <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800ccce:	687b      	ldr	r3, [r7, #4]
 800ccd0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ccd2:	4a14      	ldr	r2, [pc, #80]	; (800cd24 <HAL_UART_IRQHandler+0x2b8>)
 800ccd4:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800ccd6:	687b      	ldr	r3, [r7, #4]
 800ccd8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ccda:	4618      	mov	r0, r3
 800ccdc:	f7fa fdf0 	bl	80078c0 <HAL_DMA_Abort_IT>
 800cce0:	4603      	mov	r3, r0
 800cce2:	2b00      	cmp	r3, #0
 800cce4:	d017      	beq.n	800cd16 <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800cce6:	687b      	ldr	r3, [r7, #4]
 800cce8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ccea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ccec:	687a      	ldr	r2, [r7, #4]
 800ccee:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 800ccf0:	4610      	mov	r0, r2
 800ccf2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ccf4:	e00f      	b.n	800cd16 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800ccf6:	6878      	ldr	r0, [r7, #4]
 800ccf8:	f000 fa56 	bl	800d1a8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ccfc:	e00b      	b.n	800cd16 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800ccfe:	6878      	ldr	r0, [r7, #4]
 800cd00:	f000 fa52 	bl	800d1a8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800cd04:	e007      	b.n	800cd16 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800cd06:	6878      	ldr	r0, [r7, #4]
 800cd08:	f000 fa4e 	bl	800d1a8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cd0c:	687b      	ldr	r3, [r7, #4]
 800cd0e:	2200      	movs	r2, #0
 800cd10:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 800cd14:	e23b      	b.n	800d18e <HAL_UART_IRQHandler+0x722>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800cd16:	bf00      	nop
    return;
 800cd18:	e239      	b.n	800d18e <HAL_UART_IRQHandler+0x722>
 800cd1a:	bf00      	nop
 800cd1c:	10000001 	.word	0x10000001
 800cd20:	04000120 	.word	0x04000120
 800cd24:	0800e331 	.word	0x0800e331

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800cd28:	687b      	ldr	r3, [r7, #4]
 800cd2a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cd2c:	2b01      	cmp	r3, #1
 800cd2e:	f040 81ce 	bne.w	800d0ce <HAL_UART_IRQHandler+0x662>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800cd32:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800cd36:	f003 0310 	and.w	r3, r3, #16
 800cd3a:	2b00      	cmp	r3, #0
 800cd3c:	f000 81c7 	beq.w	800d0ce <HAL_UART_IRQHandler+0x662>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800cd40:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800cd44:	f003 0310 	and.w	r3, r3, #16
 800cd48:	2b00      	cmp	r3, #0
 800cd4a:	f000 81c0 	beq.w	800d0ce <HAL_UART_IRQHandler+0x662>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800cd4e:	687b      	ldr	r3, [r7, #4]
 800cd50:	681b      	ldr	r3, [r3, #0]
 800cd52:	2210      	movs	r2, #16
 800cd54:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800cd56:	687b      	ldr	r3, [r7, #4]
 800cd58:	681b      	ldr	r3, [r3, #0]
 800cd5a:	689b      	ldr	r3, [r3, #8]
 800cd5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cd60:	2b40      	cmp	r3, #64	; 0x40
 800cd62:	f040 813b 	bne.w	800cfdc <HAL_UART_IRQHandler+0x570>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800cd66:	687b      	ldr	r3, [r7, #4]
 800cd68:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cd6a:	681b      	ldr	r3, [r3, #0]
 800cd6c:	4a8b      	ldr	r2, [pc, #556]	; (800cf9c <HAL_UART_IRQHandler+0x530>)
 800cd6e:	4293      	cmp	r3, r2
 800cd70:	d059      	beq.n	800ce26 <HAL_UART_IRQHandler+0x3ba>
 800cd72:	687b      	ldr	r3, [r7, #4]
 800cd74:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cd76:	681b      	ldr	r3, [r3, #0]
 800cd78:	4a89      	ldr	r2, [pc, #548]	; (800cfa0 <HAL_UART_IRQHandler+0x534>)
 800cd7a:	4293      	cmp	r3, r2
 800cd7c:	d053      	beq.n	800ce26 <HAL_UART_IRQHandler+0x3ba>
 800cd7e:	687b      	ldr	r3, [r7, #4]
 800cd80:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cd82:	681b      	ldr	r3, [r3, #0]
 800cd84:	4a87      	ldr	r2, [pc, #540]	; (800cfa4 <HAL_UART_IRQHandler+0x538>)
 800cd86:	4293      	cmp	r3, r2
 800cd88:	d04d      	beq.n	800ce26 <HAL_UART_IRQHandler+0x3ba>
 800cd8a:	687b      	ldr	r3, [r7, #4]
 800cd8c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cd8e:	681b      	ldr	r3, [r3, #0]
 800cd90:	4a85      	ldr	r2, [pc, #532]	; (800cfa8 <HAL_UART_IRQHandler+0x53c>)
 800cd92:	4293      	cmp	r3, r2
 800cd94:	d047      	beq.n	800ce26 <HAL_UART_IRQHandler+0x3ba>
 800cd96:	687b      	ldr	r3, [r7, #4]
 800cd98:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cd9a:	681b      	ldr	r3, [r3, #0]
 800cd9c:	4a83      	ldr	r2, [pc, #524]	; (800cfac <HAL_UART_IRQHandler+0x540>)
 800cd9e:	4293      	cmp	r3, r2
 800cda0:	d041      	beq.n	800ce26 <HAL_UART_IRQHandler+0x3ba>
 800cda2:	687b      	ldr	r3, [r7, #4]
 800cda4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cda6:	681b      	ldr	r3, [r3, #0]
 800cda8:	4a81      	ldr	r2, [pc, #516]	; (800cfb0 <HAL_UART_IRQHandler+0x544>)
 800cdaa:	4293      	cmp	r3, r2
 800cdac:	d03b      	beq.n	800ce26 <HAL_UART_IRQHandler+0x3ba>
 800cdae:	687b      	ldr	r3, [r7, #4]
 800cdb0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cdb2:	681b      	ldr	r3, [r3, #0]
 800cdb4:	4a7f      	ldr	r2, [pc, #508]	; (800cfb4 <HAL_UART_IRQHandler+0x548>)
 800cdb6:	4293      	cmp	r3, r2
 800cdb8:	d035      	beq.n	800ce26 <HAL_UART_IRQHandler+0x3ba>
 800cdba:	687b      	ldr	r3, [r7, #4]
 800cdbc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cdbe:	681b      	ldr	r3, [r3, #0]
 800cdc0:	4a7d      	ldr	r2, [pc, #500]	; (800cfb8 <HAL_UART_IRQHandler+0x54c>)
 800cdc2:	4293      	cmp	r3, r2
 800cdc4:	d02f      	beq.n	800ce26 <HAL_UART_IRQHandler+0x3ba>
 800cdc6:	687b      	ldr	r3, [r7, #4]
 800cdc8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cdca:	681b      	ldr	r3, [r3, #0]
 800cdcc:	4a7b      	ldr	r2, [pc, #492]	; (800cfbc <HAL_UART_IRQHandler+0x550>)
 800cdce:	4293      	cmp	r3, r2
 800cdd0:	d029      	beq.n	800ce26 <HAL_UART_IRQHandler+0x3ba>
 800cdd2:	687b      	ldr	r3, [r7, #4]
 800cdd4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cdd6:	681b      	ldr	r3, [r3, #0]
 800cdd8:	4a79      	ldr	r2, [pc, #484]	; (800cfc0 <HAL_UART_IRQHandler+0x554>)
 800cdda:	4293      	cmp	r3, r2
 800cddc:	d023      	beq.n	800ce26 <HAL_UART_IRQHandler+0x3ba>
 800cdde:	687b      	ldr	r3, [r7, #4]
 800cde0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cde2:	681b      	ldr	r3, [r3, #0]
 800cde4:	4a77      	ldr	r2, [pc, #476]	; (800cfc4 <HAL_UART_IRQHandler+0x558>)
 800cde6:	4293      	cmp	r3, r2
 800cde8:	d01d      	beq.n	800ce26 <HAL_UART_IRQHandler+0x3ba>
 800cdea:	687b      	ldr	r3, [r7, #4]
 800cdec:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cdee:	681b      	ldr	r3, [r3, #0]
 800cdf0:	4a75      	ldr	r2, [pc, #468]	; (800cfc8 <HAL_UART_IRQHandler+0x55c>)
 800cdf2:	4293      	cmp	r3, r2
 800cdf4:	d017      	beq.n	800ce26 <HAL_UART_IRQHandler+0x3ba>
 800cdf6:	687b      	ldr	r3, [r7, #4]
 800cdf8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cdfa:	681b      	ldr	r3, [r3, #0]
 800cdfc:	4a73      	ldr	r2, [pc, #460]	; (800cfcc <HAL_UART_IRQHandler+0x560>)
 800cdfe:	4293      	cmp	r3, r2
 800ce00:	d011      	beq.n	800ce26 <HAL_UART_IRQHandler+0x3ba>
 800ce02:	687b      	ldr	r3, [r7, #4]
 800ce04:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ce06:	681b      	ldr	r3, [r3, #0]
 800ce08:	4a71      	ldr	r2, [pc, #452]	; (800cfd0 <HAL_UART_IRQHandler+0x564>)
 800ce0a:	4293      	cmp	r3, r2
 800ce0c:	d00b      	beq.n	800ce26 <HAL_UART_IRQHandler+0x3ba>
 800ce0e:	687b      	ldr	r3, [r7, #4]
 800ce10:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ce12:	681b      	ldr	r3, [r3, #0]
 800ce14:	4a6f      	ldr	r2, [pc, #444]	; (800cfd4 <HAL_UART_IRQHandler+0x568>)
 800ce16:	4293      	cmp	r3, r2
 800ce18:	d005      	beq.n	800ce26 <HAL_UART_IRQHandler+0x3ba>
 800ce1a:	687b      	ldr	r3, [r7, #4]
 800ce1c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ce1e:	681b      	ldr	r3, [r3, #0]
 800ce20:	4a6d      	ldr	r2, [pc, #436]	; (800cfd8 <HAL_UART_IRQHandler+0x56c>)
 800ce22:	4293      	cmp	r3, r2
 800ce24:	d105      	bne.n	800ce32 <HAL_UART_IRQHandler+0x3c6>
 800ce26:	687b      	ldr	r3, [r7, #4]
 800ce28:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ce2a:	681b      	ldr	r3, [r3, #0]
 800ce2c:	685b      	ldr	r3, [r3, #4]
 800ce2e:	b29b      	uxth	r3, r3
 800ce30:	e004      	b.n	800ce3c <HAL_UART_IRQHandler+0x3d0>
 800ce32:	687b      	ldr	r3, [r7, #4]
 800ce34:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ce36:	681b      	ldr	r3, [r3, #0]
 800ce38:	685b      	ldr	r3, [r3, #4]
 800ce3a:	b29b      	uxth	r3, r3
 800ce3c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800ce40:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800ce44:	2b00      	cmp	r3, #0
 800ce46:	f000 81a4 	beq.w	800d192 <HAL_UART_IRQHandler+0x726>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800ce4a:	687b      	ldr	r3, [r7, #4]
 800ce4c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800ce50:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800ce54:	429a      	cmp	r2, r3
 800ce56:	f080 819c 	bcs.w	800d192 <HAL_UART_IRQHandler+0x726>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800ce5a:	687b      	ldr	r3, [r7, #4]
 800ce5c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800ce60:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800ce64:	687b      	ldr	r3, [r7, #4]
 800ce66:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ce68:	69db      	ldr	r3, [r3, #28]
 800ce6a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ce6e:	f000 8086 	beq.w	800cf7e <HAL_UART_IRQHandler+0x512>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800ce72:	687b      	ldr	r3, [r7, #4]
 800ce74:	681b      	ldr	r3, [r3, #0]
 800ce76:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ce7a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800ce7e:	e853 3f00 	ldrex	r3, [r3]
 800ce82:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800ce86:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800ce8a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800ce8e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800ce92:	687b      	ldr	r3, [r7, #4]
 800ce94:	681b      	ldr	r3, [r3, #0]
 800ce96:	461a      	mov	r2, r3
 800ce98:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800ce9c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800cea0:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cea4:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800cea8:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800ceac:	e841 2300 	strex	r3, r2, [r1]
 800ceb0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800ceb4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800ceb8:	2b00      	cmp	r3, #0
 800ceba:	d1da      	bne.n	800ce72 <HAL_UART_IRQHandler+0x406>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800cebc:	687b      	ldr	r3, [r7, #4]
 800cebe:	681b      	ldr	r3, [r3, #0]
 800cec0:	3308      	adds	r3, #8
 800cec2:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cec4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800cec6:	e853 3f00 	ldrex	r3, [r3]
 800ceca:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800cecc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800cece:	f023 0301 	bic.w	r3, r3, #1
 800ced2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800ced6:	687b      	ldr	r3, [r7, #4]
 800ced8:	681b      	ldr	r3, [r3, #0]
 800ceda:	3308      	adds	r3, #8
 800cedc:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800cee0:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800cee4:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cee6:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800cee8:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800ceec:	e841 2300 	strex	r3, r2, [r1]
 800cef0:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800cef2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800cef4:	2b00      	cmp	r3, #0
 800cef6:	d1e1      	bne.n	800cebc <HAL_UART_IRQHandler+0x450>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800cef8:	687b      	ldr	r3, [r7, #4]
 800cefa:	681b      	ldr	r3, [r3, #0]
 800cefc:	3308      	adds	r3, #8
 800cefe:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cf00:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800cf02:	e853 3f00 	ldrex	r3, [r3]
 800cf06:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800cf08:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800cf0a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800cf0e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800cf12:	687b      	ldr	r3, [r7, #4]
 800cf14:	681b      	ldr	r3, [r3, #0]
 800cf16:	3308      	adds	r3, #8
 800cf18:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800cf1c:	66fa      	str	r2, [r7, #108]	; 0x6c
 800cf1e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cf20:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800cf22:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800cf24:	e841 2300 	strex	r3, r2, [r1]
 800cf28:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800cf2a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800cf2c:	2b00      	cmp	r3, #0
 800cf2e:	d1e3      	bne.n	800cef8 <HAL_UART_IRQHandler+0x48c>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800cf30:	687b      	ldr	r3, [r7, #4]
 800cf32:	2220      	movs	r2, #32
 800cf34:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cf38:	687b      	ldr	r3, [r7, #4]
 800cf3a:	2200      	movs	r2, #0
 800cf3c:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800cf3e:	687b      	ldr	r3, [r7, #4]
 800cf40:	681b      	ldr	r3, [r3, #0]
 800cf42:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cf44:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cf46:	e853 3f00 	ldrex	r3, [r3]
 800cf4a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800cf4c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800cf4e:	f023 0310 	bic.w	r3, r3, #16
 800cf52:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800cf56:	687b      	ldr	r3, [r7, #4]
 800cf58:	681b      	ldr	r3, [r3, #0]
 800cf5a:	461a      	mov	r2, r3
 800cf5c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800cf60:	65bb      	str	r3, [r7, #88]	; 0x58
 800cf62:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cf64:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800cf66:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800cf68:	e841 2300 	strex	r3, r2, [r1]
 800cf6c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800cf6e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cf70:	2b00      	cmp	r3, #0
 800cf72:	d1e4      	bne.n	800cf3e <HAL_UART_IRQHandler+0x4d2>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800cf74:	687b      	ldr	r3, [r7, #4]
 800cf76:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cf78:	4618      	mov	r0, r3
 800cf7a:	f7fa f983 	bl	8007284 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800cf7e:	687b      	ldr	r3, [r7, #4]
 800cf80:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800cf84:	687b      	ldr	r3, [r7, #4]
 800cf86:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800cf8a:	b29b      	uxth	r3, r3
 800cf8c:	1ad3      	subs	r3, r2, r3
 800cf8e:	b29b      	uxth	r3, r3
 800cf90:	4619      	mov	r1, r3
 800cf92:	6878      	ldr	r0, [r7, #4]
 800cf94:	f000 f912 	bl	800d1bc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800cf98:	e0fb      	b.n	800d192 <HAL_UART_IRQHandler+0x726>
 800cf9a:	bf00      	nop
 800cf9c:	40020010 	.word	0x40020010
 800cfa0:	40020028 	.word	0x40020028
 800cfa4:	40020040 	.word	0x40020040
 800cfa8:	40020058 	.word	0x40020058
 800cfac:	40020070 	.word	0x40020070
 800cfb0:	40020088 	.word	0x40020088
 800cfb4:	400200a0 	.word	0x400200a0
 800cfb8:	400200b8 	.word	0x400200b8
 800cfbc:	40020410 	.word	0x40020410
 800cfc0:	40020428 	.word	0x40020428
 800cfc4:	40020440 	.word	0x40020440
 800cfc8:	40020458 	.word	0x40020458
 800cfcc:	40020470 	.word	0x40020470
 800cfd0:	40020488 	.word	0x40020488
 800cfd4:	400204a0 	.word	0x400204a0
 800cfd8:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800cfdc:	687b      	ldr	r3, [r7, #4]
 800cfde:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800cfe2:	687b      	ldr	r3, [r7, #4]
 800cfe4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800cfe8:	b29b      	uxth	r3, r3
 800cfea:	1ad3      	subs	r3, r2, r3
 800cfec:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800cff0:	687b      	ldr	r3, [r7, #4]
 800cff2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800cff6:	b29b      	uxth	r3, r3
 800cff8:	2b00      	cmp	r3, #0
 800cffa:	f000 80cc 	beq.w	800d196 <HAL_UART_IRQHandler+0x72a>
          && (nb_rx_data > 0U))
 800cffe:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800d002:	2b00      	cmp	r3, #0
 800d004:	f000 80c7 	beq.w	800d196 <HAL_UART_IRQHandler+0x72a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800d008:	687b      	ldr	r3, [r7, #4]
 800d00a:	681b      	ldr	r3, [r3, #0]
 800d00c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d00e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d010:	e853 3f00 	ldrex	r3, [r3]
 800d014:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800d016:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d018:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800d01c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800d020:	687b      	ldr	r3, [r7, #4]
 800d022:	681b      	ldr	r3, [r3, #0]
 800d024:	461a      	mov	r2, r3
 800d026:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800d02a:	647b      	str	r3, [r7, #68]	; 0x44
 800d02c:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d02e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800d030:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d032:	e841 2300 	strex	r3, r2, [r1]
 800d036:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800d038:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d03a:	2b00      	cmp	r3, #0
 800d03c:	d1e4      	bne.n	800d008 <HAL_UART_IRQHandler+0x59c>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800d03e:	687b      	ldr	r3, [r7, #4]
 800d040:	681b      	ldr	r3, [r3, #0]
 800d042:	3308      	adds	r3, #8
 800d044:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d046:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d048:	e853 3f00 	ldrex	r3, [r3]
 800d04c:	623b      	str	r3, [r7, #32]
   return(result);
 800d04e:	6a3a      	ldr	r2, [r7, #32]
 800d050:	4b54      	ldr	r3, [pc, #336]	; (800d1a4 <HAL_UART_IRQHandler+0x738>)
 800d052:	4013      	ands	r3, r2
 800d054:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800d058:	687b      	ldr	r3, [r7, #4]
 800d05a:	681b      	ldr	r3, [r3, #0]
 800d05c:	3308      	adds	r3, #8
 800d05e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800d062:	633a      	str	r2, [r7, #48]	; 0x30
 800d064:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d066:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d068:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d06a:	e841 2300 	strex	r3, r2, [r1]
 800d06e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800d070:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d072:	2b00      	cmp	r3, #0
 800d074:	d1e3      	bne.n	800d03e <HAL_UART_IRQHandler+0x5d2>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800d076:	687b      	ldr	r3, [r7, #4]
 800d078:	2220      	movs	r2, #32
 800d07a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d07e:	687b      	ldr	r3, [r7, #4]
 800d080:	2200      	movs	r2, #0
 800d082:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800d084:	687b      	ldr	r3, [r7, #4]
 800d086:	2200      	movs	r2, #0
 800d088:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d08a:	687b      	ldr	r3, [r7, #4]
 800d08c:	681b      	ldr	r3, [r3, #0]
 800d08e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d090:	693b      	ldr	r3, [r7, #16]
 800d092:	e853 3f00 	ldrex	r3, [r3]
 800d096:	60fb      	str	r3, [r7, #12]
   return(result);
 800d098:	68fb      	ldr	r3, [r7, #12]
 800d09a:	f023 0310 	bic.w	r3, r3, #16
 800d09e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800d0a2:	687b      	ldr	r3, [r7, #4]
 800d0a4:	681b      	ldr	r3, [r3, #0]
 800d0a6:	461a      	mov	r2, r3
 800d0a8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800d0ac:	61fb      	str	r3, [r7, #28]
 800d0ae:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d0b0:	69b9      	ldr	r1, [r7, #24]
 800d0b2:	69fa      	ldr	r2, [r7, #28]
 800d0b4:	e841 2300 	strex	r3, r2, [r1]
 800d0b8:	617b      	str	r3, [r7, #20]
   return(result);
 800d0ba:	697b      	ldr	r3, [r7, #20]
 800d0bc:	2b00      	cmp	r3, #0
 800d0be:	d1e4      	bne.n	800d08a <HAL_UART_IRQHandler+0x61e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800d0c0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800d0c4:	4619      	mov	r1, r3
 800d0c6:	6878      	ldr	r0, [r7, #4]
 800d0c8:	f000 f878 	bl	800d1bc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800d0cc:	e063      	b.n	800d196 <HAL_UART_IRQHandler+0x72a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800d0ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d0d2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800d0d6:	2b00      	cmp	r3, #0
 800d0d8:	d00e      	beq.n	800d0f8 <HAL_UART_IRQHandler+0x68c>
 800d0da:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d0de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800d0e2:	2b00      	cmp	r3, #0
 800d0e4:	d008      	beq.n	800d0f8 <HAL_UART_IRQHandler+0x68c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800d0e6:	687b      	ldr	r3, [r7, #4]
 800d0e8:	681b      	ldr	r3, [r3, #0]
 800d0ea:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800d0ee:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800d0f0:	6878      	ldr	r0, [r7, #4]
 800d0f2:	f001 fdbb 	bl	800ec6c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800d0f6:	e051      	b.n	800d19c <HAL_UART_IRQHandler+0x730>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800d0f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d0fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d100:	2b00      	cmp	r3, #0
 800d102:	d014      	beq.n	800d12e <HAL_UART_IRQHandler+0x6c2>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800d104:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d108:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d10c:	2b00      	cmp	r3, #0
 800d10e:	d105      	bne.n	800d11c <HAL_UART_IRQHandler+0x6b0>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800d110:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d114:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800d118:	2b00      	cmp	r3, #0
 800d11a:	d008      	beq.n	800d12e <HAL_UART_IRQHandler+0x6c2>
  {
    if (huart->TxISR != NULL)
 800d11c:	687b      	ldr	r3, [r7, #4]
 800d11e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d120:	2b00      	cmp	r3, #0
 800d122:	d03a      	beq.n	800d19a <HAL_UART_IRQHandler+0x72e>
    {
      huart->TxISR(huart);
 800d124:	687b      	ldr	r3, [r7, #4]
 800d126:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d128:	6878      	ldr	r0, [r7, #4]
 800d12a:	4798      	blx	r3
    }
    return;
 800d12c:	e035      	b.n	800d19a <HAL_UART_IRQHandler+0x72e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800d12e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d132:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d136:	2b00      	cmp	r3, #0
 800d138:	d009      	beq.n	800d14e <HAL_UART_IRQHandler+0x6e2>
 800d13a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d13e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d142:	2b00      	cmp	r3, #0
 800d144:	d003      	beq.n	800d14e <HAL_UART_IRQHandler+0x6e2>
  {
    UART_EndTransmit_IT(huart);
 800d146:	6878      	ldr	r0, [r7, #4]
 800d148:	f001 f908 	bl	800e35c <UART_EndTransmit_IT>
    return;
 800d14c:	e026      	b.n	800d19c <HAL_UART_IRQHandler+0x730>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800d14e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d152:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800d156:	2b00      	cmp	r3, #0
 800d158:	d009      	beq.n	800d16e <HAL_UART_IRQHandler+0x702>
 800d15a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d15e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800d162:	2b00      	cmp	r3, #0
 800d164:	d003      	beq.n	800d16e <HAL_UART_IRQHandler+0x702>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800d166:	6878      	ldr	r0, [r7, #4]
 800d168:	f001 fd94 	bl	800ec94 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800d16c:	e016      	b.n	800d19c <HAL_UART_IRQHandler+0x730>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800d16e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d172:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800d176:	2b00      	cmp	r3, #0
 800d178:	d010      	beq.n	800d19c <HAL_UART_IRQHandler+0x730>
 800d17a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d17e:	2b00      	cmp	r3, #0
 800d180:	da0c      	bge.n	800d19c <HAL_UART_IRQHandler+0x730>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800d182:	6878      	ldr	r0, [r7, #4]
 800d184:	f001 fd7c 	bl	800ec80 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800d188:	e008      	b.n	800d19c <HAL_UART_IRQHandler+0x730>
      return;
 800d18a:	bf00      	nop
 800d18c:	e006      	b.n	800d19c <HAL_UART_IRQHandler+0x730>
    return;
 800d18e:	bf00      	nop
 800d190:	e004      	b.n	800d19c <HAL_UART_IRQHandler+0x730>
      return;
 800d192:	bf00      	nop
 800d194:	e002      	b.n	800d19c <HAL_UART_IRQHandler+0x730>
      return;
 800d196:	bf00      	nop
 800d198:	e000      	b.n	800d19c <HAL_UART_IRQHandler+0x730>
    return;
 800d19a:	bf00      	nop
  }
}
 800d19c:	37e8      	adds	r7, #232	; 0xe8
 800d19e:	46bd      	mov	sp, r7
 800d1a0:	bd80      	pop	{r7, pc}
 800d1a2:	bf00      	nop
 800d1a4:	effffffe 	.word	0xeffffffe

0800d1a8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800d1a8:	b480      	push	{r7}
 800d1aa:	b083      	sub	sp, #12
 800d1ac:	af00      	add	r7, sp, #0
 800d1ae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800d1b0:	bf00      	nop
 800d1b2:	370c      	adds	r7, #12
 800d1b4:	46bd      	mov	sp, r7
 800d1b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1ba:	4770      	bx	lr

0800d1bc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800d1bc:	b480      	push	{r7}
 800d1be:	b083      	sub	sp, #12
 800d1c0:	af00      	add	r7, sp, #0
 800d1c2:	6078      	str	r0, [r7, #4]
 800d1c4:	460b      	mov	r3, r1
 800d1c6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800d1c8:	bf00      	nop
 800d1ca:	370c      	adds	r7, #12
 800d1cc:	46bd      	mov	sp, r7
 800d1ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1d2:	4770      	bx	lr

0800d1d4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800d1d4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800d1d8:	b092      	sub	sp, #72	; 0x48
 800d1da:	af00      	add	r7, sp, #0
 800d1dc:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800d1de:	2300      	movs	r3, #0
 800d1e0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800d1e4:	697b      	ldr	r3, [r7, #20]
 800d1e6:	689a      	ldr	r2, [r3, #8]
 800d1e8:	697b      	ldr	r3, [r7, #20]
 800d1ea:	691b      	ldr	r3, [r3, #16]
 800d1ec:	431a      	orrs	r2, r3
 800d1ee:	697b      	ldr	r3, [r7, #20]
 800d1f0:	695b      	ldr	r3, [r3, #20]
 800d1f2:	431a      	orrs	r2, r3
 800d1f4:	697b      	ldr	r3, [r7, #20]
 800d1f6:	69db      	ldr	r3, [r3, #28]
 800d1f8:	4313      	orrs	r3, r2
 800d1fa:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800d1fc:	697b      	ldr	r3, [r7, #20]
 800d1fe:	681b      	ldr	r3, [r3, #0]
 800d200:	681a      	ldr	r2, [r3, #0]
 800d202:	4bbe      	ldr	r3, [pc, #760]	; (800d4fc <UART_SetConfig+0x328>)
 800d204:	4013      	ands	r3, r2
 800d206:	697a      	ldr	r2, [r7, #20]
 800d208:	6812      	ldr	r2, [r2, #0]
 800d20a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800d20c:	430b      	orrs	r3, r1
 800d20e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800d210:	697b      	ldr	r3, [r7, #20]
 800d212:	681b      	ldr	r3, [r3, #0]
 800d214:	685b      	ldr	r3, [r3, #4]
 800d216:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800d21a:	697b      	ldr	r3, [r7, #20]
 800d21c:	68da      	ldr	r2, [r3, #12]
 800d21e:	697b      	ldr	r3, [r7, #20]
 800d220:	681b      	ldr	r3, [r3, #0]
 800d222:	430a      	orrs	r2, r1
 800d224:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800d226:	697b      	ldr	r3, [r7, #20]
 800d228:	699b      	ldr	r3, [r3, #24]
 800d22a:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800d22c:	697b      	ldr	r3, [r7, #20]
 800d22e:	681b      	ldr	r3, [r3, #0]
 800d230:	4ab3      	ldr	r2, [pc, #716]	; (800d500 <UART_SetConfig+0x32c>)
 800d232:	4293      	cmp	r3, r2
 800d234:	d004      	beq.n	800d240 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800d236:	697b      	ldr	r3, [r7, #20]
 800d238:	6a1b      	ldr	r3, [r3, #32]
 800d23a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d23c:	4313      	orrs	r3, r2
 800d23e:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800d240:	697b      	ldr	r3, [r7, #20]
 800d242:	681b      	ldr	r3, [r3, #0]
 800d244:	689a      	ldr	r2, [r3, #8]
 800d246:	4baf      	ldr	r3, [pc, #700]	; (800d504 <UART_SetConfig+0x330>)
 800d248:	4013      	ands	r3, r2
 800d24a:	697a      	ldr	r2, [r7, #20]
 800d24c:	6812      	ldr	r2, [r2, #0]
 800d24e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800d250:	430b      	orrs	r3, r1
 800d252:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800d254:	697b      	ldr	r3, [r7, #20]
 800d256:	681b      	ldr	r3, [r3, #0]
 800d258:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d25a:	f023 010f 	bic.w	r1, r3, #15
 800d25e:	697b      	ldr	r3, [r7, #20]
 800d260:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d262:	697b      	ldr	r3, [r7, #20]
 800d264:	681b      	ldr	r3, [r3, #0]
 800d266:	430a      	orrs	r2, r1
 800d268:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800d26a:	697b      	ldr	r3, [r7, #20]
 800d26c:	681b      	ldr	r3, [r3, #0]
 800d26e:	4aa6      	ldr	r2, [pc, #664]	; (800d508 <UART_SetConfig+0x334>)
 800d270:	4293      	cmp	r3, r2
 800d272:	d177      	bne.n	800d364 <UART_SetConfig+0x190>
 800d274:	4ba5      	ldr	r3, [pc, #660]	; (800d50c <UART_SetConfig+0x338>)
 800d276:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d278:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800d27c:	2b28      	cmp	r3, #40	; 0x28
 800d27e:	d86d      	bhi.n	800d35c <UART_SetConfig+0x188>
 800d280:	a201      	add	r2, pc, #4	; (adr r2, 800d288 <UART_SetConfig+0xb4>)
 800d282:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d286:	bf00      	nop
 800d288:	0800d32d 	.word	0x0800d32d
 800d28c:	0800d35d 	.word	0x0800d35d
 800d290:	0800d35d 	.word	0x0800d35d
 800d294:	0800d35d 	.word	0x0800d35d
 800d298:	0800d35d 	.word	0x0800d35d
 800d29c:	0800d35d 	.word	0x0800d35d
 800d2a0:	0800d35d 	.word	0x0800d35d
 800d2a4:	0800d35d 	.word	0x0800d35d
 800d2a8:	0800d335 	.word	0x0800d335
 800d2ac:	0800d35d 	.word	0x0800d35d
 800d2b0:	0800d35d 	.word	0x0800d35d
 800d2b4:	0800d35d 	.word	0x0800d35d
 800d2b8:	0800d35d 	.word	0x0800d35d
 800d2bc:	0800d35d 	.word	0x0800d35d
 800d2c0:	0800d35d 	.word	0x0800d35d
 800d2c4:	0800d35d 	.word	0x0800d35d
 800d2c8:	0800d33d 	.word	0x0800d33d
 800d2cc:	0800d35d 	.word	0x0800d35d
 800d2d0:	0800d35d 	.word	0x0800d35d
 800d2d4:	0800d35d 	.word	0x0800d35d
 800d2d8:	0800d35d 	.word	0x0800d35d
 800d2dc:	0800d35d 	.word	0x0800d35d
 800d2e0:	0800d35d 	.word	0x0800d35d
 800d2e4:	0800d35d 	.word	0x0800d35d
 800d2e8:	0800d345 	.word	0x0800d345
 800d2ec:	0800d35d 	.word	0x0800d35d
 800d2f0:	0800d35d 	.word	0x0800d35d
 800d2f4:	0800d35d 	.word	0x0800d35d
 800d2f8:	0800d35d 	.word	0x0800d35d
 800d2fc:	0800d35d 	.word	0x0800d35d
 800d300:	0800d35d 	.word	0x0800d35d
 800d304:	0800d35d 	.word	0x0800d35d
 800d308:	0800d34d 	.word	0x0800d34d
 800d30c:	0800d35d 	.word	0x0800d35d
 800d310:	0800d35d 	.word	0x0800d35d
 800d314:	0800d35d 	.word	0x0800d35d
 800d318:	0800d35d 	.word	0x0800d35d
 800d31c:	0800d35d 	.word	0x0800d35d
 800d320:	0800d35d 	.word	0x0800d35d
 800d324:	0800d35d 	.word	0x0800d35d
 800d328:	0800d355 	.word	0x0800d355
 800d32c:	2301      	movs	r3, #1
 800d32e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d332:	e222      	b.n	800d77a <UART_SetConfig+0x5a6>
 800d334:	2304      	movs	r3, #4
 800d336:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d33a:	e21e      	b.n	800d77a <UART_SetConfig+0x5a6>
 800d33c:	2308      	movs	r3, #8
 800d33e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d342:	e21a      	b.n	800d77a <UART_SetConfig+0x5a6>
 800d344:	2310      	movs	r3, #16
 800d346:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d34a:	e216      	b.n	800d77a <UART_SetConfig+0x5a6>
 800d34c:	2320      	movs	r3, #32
 800d34e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d352:	e212      	b.n	800d77a <UART_SetConfig+0x5a6>
 800d354:	2340      	movs	r3, #64	; 0x40
 800d356:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d35a:	e20e      	b.n	800d77a <UART_SetConfig+0x5a6>
 800d35c:	2380      	movs	r3, #128	; 0x80
 800d35e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d362:	e20a      	b.n	800d77a <UART_SetConfig+0x5a6>
 800d364:	697b      	ldr	r3, [r7, #20]
 800d366:	681b      	ldr	r3, [r3, #0]
 800d368:	4a69      	ldr	r2, [pc, #420]	; (800d510 <UART_SetConfig+0x33c>)
 800d36a:	4293      	cmp	r3, r2
 800d36c:	d130      	bne.n	800d3d0 <UART_SetConfig+0x1fc>
 800d36e:	4b67      	ldr	r3, [pc, #412]	; (800d50c <UART_SetConfig+0x338>)
 800d370:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d372:	f003 0307 	and.w	r3, r3, #7
 800d376:	2b05      	cmp	r3, #5
 800d378:	d826      	bhi.n	800d3c8 <UART_SetConfig+0x1f4>
 800d37a:	a201      	add	r2, pc, #4	; (adr r2, 800d380 <UART_SetConfig+0x1ac>)
 800d37c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d380:	0800d399 	.word	0x0800d399
 800d384:	0800d3a1 	.word	0x0800d3a1
 800d388:	0800d3a9 	.word	0x0800d3a9
 800d38c:	0800d3b1 	.word	0x0800d3b1
 800d390:	0800d3b9 	.word	0x0800d3b9
 800d394:	0800d3c1 	.word	0x0800d3c1
 800d398:	2300      	movs	r3, #0
 800d39a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d39e:	e1ec      	b.n	800d77a <UART_SetConfig+0x5a6>
 800d3a0:	2304      	movs	r3, #4
 800d3a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d3a6:	e1e8      	b.n	800d77a <UART_SetConfig+0x5a6>
 800d3a8:	2308      	movs	r3, #8
 800d3aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d3ae:	e1e4      	b.n	800d77a <UART_SetConfig+0x5a6>
 800d3b0:	2310      	movs	r3, #16
 800d3b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d3b6:	e1e0      	b.n	800d77a <UART_SetConfig+0x5a6>
 800d3b8:	2320      	movs	r3, #32
 800d3ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d3be:	e1dc      	b.n	800d77a <UART_SetConfig+0x5a6>
 800d3c0:	2340      	movs	r3, #64	; 0x40
 800d3c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d3c6:	e1d8      	b.n	800d77a <UART_SetConfig+0x5a6>
 800d3c8:	2380      	movs	r3, #128	; 0x80
 800d3ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d3ce:	e1d4      	b.n	800d77a <UART_SetConfig+0x5a6>
 800d3d0:	697b      	ldr	r3, [r7, #20]
 800d3d2:	681b      	ldr	r3, [r3, #0]
 800d3d4:	4a4f      	ldr	r2, [pc, #316]	; (800d514 <UART_SetConfig+0x340>)
 800d3d6:	4293      	cmp	r3, r2
 800d3d8:	d130      	bne.n	800d43c <UART_SetConfig+0x268>
 800d3da:	4b4c      	ldr	r3, [pc, #304]	; (800d50c <UART_SetConfig+0x338>)
 800d3dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d3de:	f003 0307 	and.w	r3, r3, #7
 800d3e2:	2b05      	cmp	r3, #5
 800d3e4:	d826      	bhi.n	800d434 <UART_SetConfig+0x260>
 800d3e6:	a201      	add	r2, pc, #4	; (adr r2, 800d3ec <UART_SetConfig+0x218>)
 800d3e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d3ec:	0800d405 	.word	0x0800d405
 800d3f0:	0800d40d 	.word	0x0800d40d
 800d3f4:	0800d415 	.word	0x0800d415
 800d3f8:	0800d41d 	.word	0x0800d41d
 800d3fc:	0800d425 	.word	0x0800d425
 800d400:	0800d42d 	.word	0x0800d42d
 800d404:	2300      	movs	r3, #0
 800d406:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d40a:	e1b6      	b.n	800d77a <UART_SetConfig+0x5a6>
 800d40c:	2304      	movs	r3, #4
 800d40e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d412:	e1b2      	b.n	800d77a <UART_SetConfig+0x5a6>
 800d414:	2308      	movs	r3, #8
 800d416:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d41a:	e1ae      	b.n	800d77a <UART_SetConfig+0x5a6>
 800d41c:	2310      	movs	r3, #16
 800d41e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d422:	e1aa      	b.n	800d77a <UART_SetConfig+0x5a6>
 800d424:	2320      	movs	r3, #32
 800d426:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d42a:	e1a6      	b.n	800d77a <UART_SetConfig+0x5a6>
 800d42c:	2340      	movs	r3, #64	; 0x40
 800d42e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d432:	e1a2      	b.n	800d77a <UART_SetConfig+0x5a6>
 800d434:	2380      	movs	r3, #128	; 0x80
 800d436:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d43a:	e19e      	b.n	800d77a <UART_SetConfig+0x5a6>
 800d43c:	697b      	ldr	r3, [r7, #20]
 800d43e:	681b      	ldr	r3, [r3, #0]
 800d440:	4a35      	ldr	r2, [pc, #212]	; (800d518 <UART_SetConfig+0x344>)
 800d442:	4293      	cmp	r3, r2
 800d444:	d130      	bne.n	800d4a8 <UART_SetConfig+0x2d4>
 800d446:	4b31      	ldr	r3, [pc, #196]	; (800d50c <UART_SetConfig+0x338>)
 800d448:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d44a:	f003 0307 	and.w	r3, r3, #7
 800d44e:	2b05      	cmp	r3, #5
 800d450:	d826      	bhi.n	800d4a0 <UART_SetConfig+0x2cc>
 800d452:	a201      	add	r2, pc, #4	; (adr r2, 800d458 <UART_SetConfig+0x284>)
 800d454:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d458:	0800d471 	.word	0x0800d471
 800d45c:	0800d479 	.word	0x0800d479
 800d460:	0800d481 	.word	0x0800d481
 800d464:	0800d489 	.word	0x0800d489
 800d468:	0800d491 	.word	0x0800d491
 800d46c:	0800d499 	.word	0x0800d499
 800d470:	2300      	movs	r3, #0
 800d472:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d476:	e180      	b.n	800d77a <UART_SetConfig+0x5a6>
 800d478:	2304      	movs	r3, #4
 800d47a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d47e:	e17c      	b.n	800d77a <UART_SetConfig+0x5a6>
 800d480:	2308      	movs	r3, #8
 800d482:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d486:	e178      	b.n	800d77a <UART_SetConfig+0x5a6>
 800d488:	2310      	movs	r3, #16
 800d48a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d48e:	e174      	b.n	800d77a <UART_SetConfig+0x5a6>
 800d490:	2320      	movs	r3, #32
 800d492:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d496:	e170      	b.n	800d77a <UART_SetConfig+0x5a6>
 800d498:	2340      	movs	r3, #64	; 0x40
 800d49a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d49e:	e16c      	b.n	800d77a <UART_SetConfig+0x5a6>
 800d4a0:	2380      	movs	r3, #128	; 0x80
 800d4a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d4a6:	e168      	b.n	800d77a <UART_SetConfig+0x5a6>
 800d4a8:	697b      	ldr	r3, [r7, #20]
 800d4aa:	681b      	ldr	r3, [r3, #0]
 800d4ac:	4a1b      	ldr	r2, [pc, #108]	; (800d51c <UART_SetConfig+0x348>)
 800d4ae:	4293      	cmp	r3, r2
 800d4b0:	d142      	bne.n	800d538 <UART_SetConfig+0x364>
 800d4b2:	4b16      	ldr	r3, [pc, #88]	; (800d50c <UART_SetConfig+0x338>)
 800d4b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d4b6:	f003 0307 	and.w	r3, r3, #7
 800d4ba:	2b05      	cmp	r3, #5
 800d4bc:	d838      	bhi.n	800d530 <UART_SetConfig+0x35c>
 800d4be:	a201      	add	r2, pc, #4	; (adr r2, 800d4c4 <UART_SetConfig+0x2f0>)
 800d4c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d4c4:	0800d4dd 	.word	0x0800d4dd
 800d4c8:	0800d4e5 	.word	0x0800d4e5
 800d4cc:	0800d4ed 	.word	0x0800d4ed
 800d4d0:	0800d4f5 	.word	0x0800d4f5
 800d4d4:	0800d521 	.word	0x0800d521
 800d4d8:	0800d529 	.word	0x0800d529
 800d4dc:	2300      	movs	r3, #0
 800d4de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d4e2:	e14a      	b.n	800d77a <UART_SetConfig+0x5a6>
 800d4e4:	2304      	movs	r3, #4
 800d4e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d4ea:	e146      	b.n	800d77a <UART_SetConfig+0x5a6>
 800d4ec:	2308      	movs	r3, #8
 800d4ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d4f2:	e142      	b.n	800d77a <UART_SetConfig+0x5a6>
 800d4f4:	2310      	movs	r3, #16
 800d4f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d4fa:	e13e      	b.n	800d77a <UART_SetConfig+0x5a6>
 800d4fc:	cfff69f3 	.word	0xcfff69f3
 800d500:	58000c00 	.word	0x58000c00
 800d504:	11fff4ff 	.word	0x11fff4ff
 800d508:	40011000 	.word	0x40011000
 800d50c:	58024400 	.word	0x58024400
 800d510:	40004400 	.word	0x40004400
 800d514:	40004800 	.word	0x40004800
 800d518:	40004c00 	.word	0x40004c00
 800d51c:	40005000 	.word	0x40005000
 800d520:	2320      	movs	r3, #32
 800d522:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d526:	e128      	b.n	800d77a <UART_SetConfig+0x5a6>
 800d528:	2340      	movs	r3, #64	; 0x40
 800d52a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d52e:	e124      	b.n	800d77a <UART_SetConfig+0x5a6>
 800d530:	2380      	movs	r3, #128	; 0x80
 800d532:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d536:	e120      	b.n	800d77a <UART_SetConfig+0x5a6>
 800d538:	697b      	ldr	r3, [r7, #20]
 800d53a:	681b      	ldr	r3, [r3, #0]
 800d53c:	4acb      	ldr	r2, [pc, #812]	; (800d86c <UART_SetConfig+0x698>)
 800d53e:	4293      	cmp	r3, r2
 800d540:	d176      	bne.n	800d630 <UART_SetConfig+0x45c>
 800d542:	4bcb      	ldr	r3, [pc, #812]	; (800d870 <UART_SetConfig+0x69c>)
 800d544:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d546:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800d54a:	2b28      	cmp	r3, #40	; 0x28
 800d54c:	d86c      	bhi.n	800d628 <UART_SetConfig+0x454>
 800d54e:	a201      	add	r2, pc, #4	; (adr r2, 800d554 <UART_SetConfig+0x380>)
 800d550:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d554:	0800d5f9 	.word	0x0800d5f9
 800d558:	0800d629 	.word	0x0800d629
 800d55c:	0800d629 	.word	0x0800d629
 800d560:	0800d629 	.word	0x0800d629
 800d564:	0800d629 	.word	0x0800d629
 800d568:	0800d629 	.word	0x0800d629
 800d56c:	0800d629 	.word	0x0800d629
 800d570:	0800d629 	.word	0x0800d629
 800d574:	0800d601 	.word	0x0800d601
 800d578:	0800d629 	.word	0x0800d629
 800d57c:	0800d629 	.word	0x0800d629
 800d580:	0800d629 	.word	0x0800d629
 800d584:	0800d629 	.word	0x0800d629
 800d588:	0800d629 	.word	0x0800d629
 800d58c:	0800d629 	.word	0x0800d629
 800d590:	0800d629 	.word	0x0800d629
 800d594:	0800d609 	.word	0x0800d609
 800d598:	0800d629 	.word	0x0800d629
 800d59c:	0800d629 	.word	0x0800d629
 800d5a0:	0800d629 	.word	0x0800d629
 800d5a4:	0800d629 	.word	0x0800d629
 800d5a8:	0800d629 	.word	0x0800d629
 800d5ac:	0800d629 	.word	0x0800d629
 800d5b0:	0800d629 	.word	0x0800d629
 800d5b4:	0800d611 	.word	0x0800d611
 800d5b8:	0800d629 	.word	0x0800d629
 800d5bc:	0800d629 	.word	0x0800d629
 800d5c0:	0800d629 	.word	0x0800d629
 800d5c4:	0800d629 	.word	0x0800d629
 800d5c8:	0800d629 	.word	0x0800d629
 800d5cc:	0800d629 	.word	0x0800d629
 800d5d0:	0800d629 	.word	0x0800d629
 800d5d4:	0800d619 	.word	0x0800d619
 800d5d8:	0800d629 	.word	0x0800d629
 800d5dc:	0800d629 	.word	0x0800d629
 800d5e0:	0800d629 	.word	0x0800d629
 800d5e4:	0800d629 	.word	0x0800d629
 800d5e8:	0800d629 	.word	0x0800d629
 800d5ec:	0800d629 	.word	0x0800d629
 800d5f0:	0800d629 	.word	0x0800d629
 800d5f4:	0800d621 	.word	0x0800d621
 800d5f8:	2301      	movs	r3, #1
 800d5fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d5fe:	e0bc      	b.n	800d77a <UART_SetConfig+0x5a6>
 800d600:	2304      	movs	r3, #4
 800d602:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d606:	e0b8      	b.n	800d77a <UART_SetConfig+0x5a6>
 800d608:	2308      	movs	r3, #8
 800d60a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d60e:	e0b4      	b.n	800d77a <UART_SetConfig+0x5a6>
 800d610:	2310      	movs	r3, #16
 800d612:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d616:	e0b0      	b.n	800d77a <UART_SetConfig+0x5a6>
 800d618:	2320      	movs	r3, #32
 800d61a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d61e:	e0ac      	b.n	800d77a <UART_SetConfig+0x5a6>
 800d620:	2340      	movs	r3, #64	; 0x40
 800d622:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d626:	e0a8      	b.n	800d77a <UART_SetConfig+0x5a6>
 800d628:	2380      	movs	r3, #128	; 0x80
 800d62a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d62e:	e0a4      	b.n	800d77a <UART_SetConfig+0x5a6>
 800d630:	697b      	ldr	r3, [r7, #20]
 800d632:	681b      	ldr	r3, [r3, #0]
 800d634:	4a8f      	ldr	r2, [pc, #572]	; (800d874 <UART_SetConfig+0x6a0>)
 800d636:	4293      	cmp	r3, r2
 800d638:	d130      	bne.n	800d69c <UART_SetConfig+0x4c8>
 800d63a:	4b8d      	ldr	r3, [pc, #564]	; (800d870 <UART_SetConfig+0x69c>)
 800d63c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d63e:	f003 0307 	and.w	r3, r3, #7
 800d642:	2b05      	cmp	r3, #5
 800d644:	d826      	bhi.n	800d694 <UART_SetConfig+0x4c0>
 800d646:	a201      	add	r2, pc, #4	; (adr r2, 800d64c <UART_SetConfig+0x478>)
 800d648:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d64c:	0800d665 	.word	0x0800d665
 800d650:	0800d66d 	.word	0x0800d66d
 800d654:	0800d675 	.word	0x0800d675
 800d658:	0800d67d 	.word	0x0800d67d
 800d65c:	0800d685 	.word	0x0800d685
 800d660:	0800d68d 	.word	0x0800d68d
 800d664:	2300      	movs	r3, #0
 800d666:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d66a:	e086      	b.n	800d77a <UART_SetConfig+0x5a6>
 800d66c:	2304      	movs	r3, #4
 800d66e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d672:	e082      	b.n	800d77a <UART_SetConfig+0x5a6>
 800d674:	2308      	movs	r3, #8
 800d676:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d67a:	e07e      	b.n	800d77a <UART_SetConfig+0x5a6>
 800d67c:	2310      	movs	r3, #16
 800d67e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d682:	e07a      	b.n	800d77a <UART_SetConfig+0x5a6>
 800d684:	2320      	movs	r3, #32
 800d686:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d68a:	e076      	b.n	800d77a <UART_SetConfig+0x5a6>
 800d68c:	2340      	movs	r3, #64	; 0x40
 800d68e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d692:	e072      	b.n	800d77a <UART_SetConfig+0x5a6>
 800d694:	2380      	movs	r3, #128	; 0x80
 800d696:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d69a:	e06e      	b.n	800d77a <UART_SetConfig+0x5a6>
 800d69c:	697b      	ldr	r3, [r7, #20]
 800d69e:	681b      	ldr	r3, [r3, #0]
 800d6a0:	4a75      	ldr	r2, [pc, #468]	; (800d878 <UART_SetConfig+0x6a4>)
 800d6a2:	4293      	cmp	r3, r2
 800d6a4:	d130      	bne.n	800d708 <UART_SetConfig+0x534>
 800d6a6:	4b72      	ldr	r3, [pc, #456]	; (800d870 <UART_SetConfig+0x69c>)
 800d6a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d6aa:	f003 0307 	and.w	r3, r3, #7
 800d6ae:	2b05      	cmp	r3, #5
 800d6b0:	d826      	bhi.n	800d700 <UART_SetConfig+0x52c>
 800d6b2:	a201      	add	r2, pc, #4	; (adr r2, 800d6b8 <UART_SetConfig+0x4e4>)
 800d6b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d6b8:	0800d6d1 	.word	0x0800d6d1
 800d6bc:	0800d6d9 	.word	0x0800d6d9
 800d6c0:	0800d6e1 	.word	0x0800d6e1
 800d6c4:	0800d6e9 	.word	0x0800d6e9
 800d6c8:	0800d6f1 	.word	0x0800d6f1
 800d6cc:	0800d6f9 	.word	0x0800d6f9
 800d6d0:	2300      	movs	r3, #0
 800d6d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d6d6:	e050      	b.n	800d77a <UART_SetConfig+0x5a6>
 800d6d8:	2304      	movs	r3, #4
 800d6da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d6de:	e04c      	b.n	800d77a <UART_SetConfig+0x5a6>
 800d6e0:	2308      	movs	r3, #8
 800d6e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d6e6:	e048      	b.n	800d77a <UART_SetConfig+0x5a6>
 800d6e8:	2310      	movs	r3, #16
 800d6ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d6ee:	e044      	b.n	800d77a <UART_SetConfig+0x5a6>
 800d6f0:	2320      	movs	r3, #32
 800d6f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d6f6:	e040      	b.n	800d77a <UART_SetConfig+0x5a6>
 800d6f8:	2340      	movs	r3, #64	; 0x40
 800d6fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d6fe:	e03c      	b.n	800d77a <UART_SetConfig+0x5a6>
 800d700:	2380      	movs	r3, #128	; 0x80
 800d702:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d706:	e038      	b.n	800d77a <UART_SetConfig+0x5a6>
 800d708:	697b      	ldr	r3, [r7, #20]
 800d70a:	681b      	ldr	r3, [r3, #0]
 800d70c:	4a5b      	ldr	r2, [pc, #364]	; (800d87c <UART_SetConfig+0x6a8>)
 800d70e:	4293      	cmp	r3, r2
 800d710:	d130      	bne.n	800d774 <UART_SetConfig+0x5a0>
 800d712:	4b57      	ldr	r3, [pc, #348]	; (800d870 <UART_SetConfig+0x69c>)
 800d714:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d716:	f003 0307 	and.w	r3, r3, #7
 800d71a:	2b05      	cmp	r3, #5
 800d71c:	d826      	bhi.n	800d76c <UART_SetConfig+0x598>
 800d71e:	a201      	add	r2, pc, #4	; (adr r2, 800d724 <UART_SetConfig+0x550>)
 800d720:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d724:	0800d73d 	.word	0x0800d73d
 800d728:	0800d745 	.word	0x0800d745
 800d72c:	0800d74d 	.word	0x0800d74d
 800d730:	0800d755 	.word	0x0800d755
 800d734:	0800d75d 	.word	0x0800d75d
 800d738:	0800d765 	.word	0x0800d765
 800d73c:	2302      	movs	r3, #2
 800d73e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d742:	e01a      	b.n	800d77a <UART_SetConfig+0x5a6>
 800d744:	2304      	movs	r3, #4
 800d746:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d74a:	e016      	b.n	800d77a <UART_SetConfig+0x5a6>
 800d74c:	2308      	movs	r3, #8
 800d74e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d752:	e012      	b.n	800d77a <UART_SetConfig+0x5a6>
 800d754:	2310      	movs	r3, #16
 800d756:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d75a:	e00e      	b.n	800d77a <UART_SetConfig+0x5a6>
 800d75c:	2320      	movs	r3, #32
 800d75e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d762:	e00a      	b.n	800d77a <UART_SetConfig+0x5a6>
 800d764:	2340      	movs	r3, #64	; 0x40
 800d766:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d76a:	e006      	b.n	800d77a <UART_SetConfig+0x5a6>
 800d76c:	2380      	movs	r3, #128	; 0x80
 800d76e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d772:	e002      	b.n	800d77a <UART_SetConfig+0x5a6>
 800d774:	2380      	movs	r3, #128	; 0x80
 800d776:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800d77a:	697b      	ldr	r3, [r7, #20]
 800d77c:	681b      	ldr	r3, [r3, #0]
 800d77e:	4a3f      	ldr	r2, [pc, #252]	; (800d87c <UART_SetConfig+0x6a8>)
 800d780:	4293      	cmp	r3, r2
 800d782:	f040 80f8 	bne.w	800d976 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800d786:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800d78a:	2b20      	cmp	r3, #32
 800d78c:	dc46      	bgt.n	800d81c <UART_SetConfig+0x648>
 800d78e:	2b02      	cmp	r3, #2
 800d790:	f2c0 8082 	blt.w	800d898 <UART_SetConfig+0x6c4>
 800d794:	3b02      	subs	r3, #2
 800d796:	2b1e      	cmp	r3, #30
 800d798:	d87e      	bhi.n	800d898 <UART_SetConfig+0x6c4>
 800d79a:	a201      	add	r2, pc, #4	; (adr r2, 800d7a0 <UART_SetConfig+0x5cc>)
 800d79c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d7a0:	0800d823 	.word	0x0800d823
 800d7a4:	0800d899 	.word	0x0800d899
 800d7a8:	0800d82b 	.word	0x0800d82b
 800d7ac:	0800d899 	.word	0x0800d899
 800d7b0:	0800d899 	.word	0x0800d899
 800d7b4:	0800d899 	.word	0x0800d899
 800d7b8:	0800d83b 	.word	0x0800d83b
 800d7bc:	0800d899 	.word	0x0800d899
 800d7c0:	0800d899 	.word	0x0800d899
 800d7c4:	0800d899 	.word	0x0800d899
 800d7c8:	0800d899 	.word	0x0800d899
 800d7cc:	0800d899 	.word	0x0800d899
 800d7d0:	0800d899 	.word	0x0800d899
 800d7d4:	0800d899 	.word	0x0800d899
 800d7d8:	0800d84b 	.word	0x0800d84b
 800d7dc:	0800d899 	.word	0x0800d899
 800d7e0:	0800d899 	.word	0x0800d899
 800d7e4:	0800d899 	.word	0x0800d899
 800d7e8:	0800d899 	.word	0x0800d899
 800d7ec:	0800d899 	.word	0x0800d899
 800d7f0:	0800d899 	.word	0x0800d899
 800d7f4:	0800d899 	.word	0x0800d899
 800d7f8:	0800d899 	.word	0x0800d899
 800d7fc:	0800d899 	.word	0x0800d899
 800d800:	0800d899 	.word	0x0800d899
 800d804:	0800d899 	.word	0x0800d899
 800d808:	0800d899 	.word	0x0800d899
 800d80c:	0800d899 	.word	0x0800d899
 800d810:	0800d899 	.word	0x0800d899
 800d814:	0800d899 	.word	0x0800d899
 800d818:	0800d88b 	.word	0x0800d88b
 800d81c:	2b40      	cmp	r3, #64	; 0x40
 800d81e:	d037      	beq.n	800d890 <UART_SetConfig+0x6bc>
 800d820:	e03a      	b.n	800d898 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800d822:	f7fc fbc9 	bl	8009fb8 <HAL_RCCEx_GetD3PCLK1Freq>
 800d826:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800d828:	e03c      	b.n	800d8a4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d82a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800d82e:	4618      	mov	r0, r3
 800d830:	f7fc fbd8 	bl	8009fe4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800d834:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d836:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d838:	e034      	b.n	800d8a4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d83a:	f107 0318 	add.w	r3, r7, #24
 800d83e:	4618      	mov	r0, r3
 800d840:	f7fc fd24 	bl	800a28c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800d844:	69fb      	ldr	r3, [r7, #28]
 800d846:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d848:	e02c      	b.n	800d8a4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d84a:	4b09      	ldr	r3, [pc, #36]	; (800d870 <UART_SetConfig+0x69c>)
 800d84c:	681b      	ldr	r3, [r3, #0]
 800d84e:	f003 0320 	and.w	r3, r3, #32
 800d852:	2b00      	cmp	r3, #0
 800d854:	d016      	beq.n	800d884 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800d856:	4b06      	ldr	r3, [pc, #24]	; (800d870 <UART_SetConfig+0x69c>)
 800d858:	681b      	ldr	r3, [r3, #0]
 800d85a:	08db      	lsrs	r3, r3, #3
 800d85c:	f003 0303 	and.w	r3, r3, #3
 800d860:	4a07      	ldr	r2, [pc, #28]	; (800d880 <UART_SetConfig+0x6ac>)
 800d862:	fa22 f303 	lsr.w	r3, r2, r3
 800d866:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800d868:	e01c      	b.n	800d8a4 <UART_SetConfig+0x6d0>
 800d86a:	bf00      	nop
 800d86c:	40011400 	.word	0x40011400
 800d870:	58024400 	.word	0x58024400
 800d874:	40007800 	.word	0x40007800
 800d878:	40007c00 	.word	0x40007c00
 800d87c:	58000c00 	.word	0x58000c00
 800d880:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800d884:	4b9d      	ldr	r3, [pc, #628]	; (800dafc <UART_SetConfig+0x928>)
 800d886:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d888:	e00c      	b.n	800d8a4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800d88a:	4b9d      	ldr	r3, [pc, #628]	; (800db00 <UART_SetConfig+0x92c>)
 800d88c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d88e:	e009      	b.n	800d8a4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d890:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800d894:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d896:	e005      	b.n	800d8a4 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800d898:	2300      	movs	r3, #0
 800d89a:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800d89c:	2301      	movs	r3, #1
 800d89e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800d8a2:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800d8a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d8a6:	2b00      	cmp	r3, #0
 800d8a8:	f000 81de 	beq.w	800dc68 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800d8ac:	697b      	ldr	r3, [r7, #20]
 800d8ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d8b0:	4a94      	ldr	r2, [pc, #592]	; (800db04 <UART_SetConfig+0x930>)
 800d8b2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d8b6:	461a      	mov	r2, r3
 800d8b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d8ba:	fbb3 f3f2 	udiv	r3, r3, r2
 800d8be:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800d8c0:	697b      	ldr	r3, [r7, #20]
 800d8c2:	685a      	ldr	r2, [r3, #4]
 800d8c4:	4613      	mov	r3, r2
 800d8c6:	005b      	lsls	r3, r3, #1
 800d8c8:	4413      	add	r3, r2
 800d8ca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d8cc:	429a      	cmp	r2, r3
 800d8ce:	d305      	bcc.n	800d8dc <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800d8d0:	697b      	ldr	r3, [r7, #20]
 800d8d2:	685b      	ldr	r3, [r3, #4]
 800d8d4:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800d8d6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d8d8:	429a      	cmp	r2, r3
 800d8da:	d903      	bls.n	800d8e4 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800d8dc:	2301      	movs	r3, #1
 800d8de:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800d8e2:	e1c1      	b.n	800dc68 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d8e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d8e6:	2200      	movs	r2, #0
 800d8e8:	60bb      	str	r3, [r7, #8]
 800d8ea:	60fa      	str	r2, [r7, #12]
 800d8ec:	697b      	ldr	r3, [r7, #20]
 800d8ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d8f0:	4a84      	ldr	r2, [pc, #528]	; (800db04 <UART_SetConfig+0x930>)
 800d8f2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d8f6:	b29b      	uxth	r3, r3
 800d8f8:	2200      	movs	r2, #0
 800d8fa:	603b      	str	r3, [r7, #0]
 800d8fc:	607a      	str	r2, [r7, #4]
 800d8fe:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d902:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800d906:	f7f2 feff 	bl	8000708 <__aeabi_uldivmod>
 800d90a:	4602      	mov	r2, r0
 800d90c:	460b      	mov	r3, r1
 800d90e:	4610      	mov	r0, r2
 800d910:	4619      	mov	r1, r3
 800d912:	f04f 0200 	mov.w	r2, #0
 800d916:	f04f 0300 	mov.w	r3, #0
 800d91a:	020b      	lsls	r3, r1, #8
 800d91c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800d920:	0202      	lsls	r2, r0, #8
 800d922:	6979      	ldr	r1, [r7, #20]
 800d924:	6849      	ldr	r1, [r1, #4]
 800d926:	0849      	lsrs	r1, r1, #1
 800d928:	2000      	movs	r0, #0
 800d92a:	460c      	mov	r4, r1
 800d92c:	4605      	mov	r5, r0
 800d92e:	eb12 0804 	adds.w	r8, r2, r4
 800d932:	eb43 0905 	adc.w	r9, r3, r5
 800d936:	697b      	ldr	r3, [r7, #20]
 800d938:	685b      	ldr	r3, [r3, #4]
 800d93a:	2200      	movs	r2, #0
 800d93c:	469a      	mov	sl, r3
 800d93e:	4693      	mov	fp, r2
 800d940:	4652      	mov	r2, sl
 800d942:	465b      	mov	r3, fp
 800d944:	4640      	mov	r0, r8
 800d946:	4649      	mov	r1, r9
 800d948:	f7f2 fede 	bl	8000708 <__aeabi_uldivmod>
 800d94c:	4602      	mov	r2, r0
 800d94e:	460b      	mov	r3, r1
 800d950:	4613      	mov	r3, r2
 800d952:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800d954:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d956:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800d95a:	d308      	bcc.n	800d96e <UART_SetConfig+0x79a>
 800d95c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d95e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d962:	d204      	bcs.n	800d96e <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800d964:	697b      	ldr	r3, [r7, #20]
 800d966:	681b      	ldr	r3, [r3, #0]
 800d968:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d96a:	60da      	str	r2, [r3, #12]
 800d96c:	e17c      	b.n	800dc68 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800d96e:	2301      	movs	r3, #1
 800d970:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800d974:	e178      	b.n	800dc68 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800d976:	697b      	ldr	r3, [r7, #20]
 800d978:	69db      	ldr	r3, [r3, #28]
 800d97a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d97e:	f040 80c5 	bne.w	800db0c <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800d982:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800d986:	2b20      	cmp	r3, #32
 800d988:	dc48      	bgt.n	800da1c <UART_SetConfig+0x848>
 800d98a:	2b00      	cmp	r3, #0
 800d98c:	db7b      	blt.n	800da86 <UART_SetConfig+0x8b2>
 800d98e:	2b20      	cmp	r3, #32
 800d990:	d879      	bhi.n	800da86 <UART_SetConfig+0x8b2>
 800d992:	a201      	add	r2, pc, #4	; (adr r2, 800d998 <UART_SetConfig+0x7c4>)
 800d994:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d998:	0800da23 	.word	0x0800da23
 800d99c:	0800da2b 	.word	0x0800da2b
 800d9a0:	0800da87 	.word	0x0800da87
 800d9a4:	0800da87 	.word	0x0800da87
 800d9a8:	0800da33 	.word	0x0800da33
 800d9ac:	0800da87 	.word	0x0800da87
 800d9b0:	0800da87 	.word	0x0800da87
 800d9b4:	0800da87 	.word	0x0800da87
 800d9b8:	0800da43 	.word	0x0800da43
 800d9bc:	0800da87 	.word	0x0800da87
 800d9c0:	0800da87 	.word	0x0800da87
 800d9c4:	0800da87 	.word	0x0800da87
 800d9c8:	0800da87 	.word	0x0800da87
 800d9cc:	0800da87 	.word	0x0800da87
 800d9d0:	0800da87 	.word	0x0800da87
 800d9d4:	0800da87 	.word	0x0800da87
 800d9d8:	0800da53 	.word	0x0800da53
 800d9dc:	0800da87 	.word	0x0800da87
 800d9e0:	0800da87 	.word	0x0800da87
 800d9e4:	0800da87 	.word	0x0800da87
 800d9e8:	0800da87 	.word	0x0800da87
 800d9ec:	0800da87 	.word	0x0800da87
 800d9f0:	0800da87 	.word	0x0800da87
 800d9f4:	0800da87 	.word	0x0800da87
 800d9f8:	0800da87 	.word	0x0800da87
 800d9fc:	0800da87 	.word	0x0800da87
 800da00:	0800da87 	.word	0x0800da87
 800da04:	0800da87 	.word	0x0800da87
 800da08:	0800da87 	.word	0x0800da87
 800da0c:	0800da87 	.word	0x0800da87
 800da10:	0800da87 	.word	0x0800da87
 800da14:	0800da87 	.word	0x0800da87
 800da18:	0800da79 	.word	0x0800da79
 800da1c:	2b40      	cmp	r3, #64	; 0x40
 800da1e:	d02e      	beq.n	800da7e <UART_SetConfig+0x8aa>
 800da20:	e031      	b.n	800da86 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800da22:	f7fb fb57 	bl	80090d4 <HAL_RCC_GetPCLK1Freq>
 800da26:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800da28:	e033      	b.n	800da92 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800da2a:	f7fb fb69 	bl	8009100 <HAL_RCC_GetPCLK2Freq>
 800da2e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800da30:	e02f      	b.n	800da92 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800da32:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800da36:	4618      	mov	r0, r3
 800da38:	f7fc fad4 	bl	8009fe4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800da3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da3e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800da40:	e027      	b.n	800da92 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800da42:	f107 0318 	add.w	r3, r7, #24
 800da46:	4618      	mov	r0, r3
 800da48:	f7fc fc20 	bl	800a28c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800da4c:	69fb      	ldr	r3, [r7, #28]
 800da4e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800da50:	e01f      	b.n	800da92 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800da52:	4b2d      	ldr	r3, [pc, #180]	; (800db08 <UART_SetConfig+0x934>)
 800da54:	681b      	ldr	r3, [r3, #0]
 800da56:	f003 0320 	and.w	r3, r3, #32
 800da5a:	2b00      	cmp	r3, #0
 800da5c:	d009      	beq.n	800da72 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800da5e:	4b2a      	ldr	r3, [pc, #168]	; (800db08 <UART_SetConfig+0x934>)
 800da60:	681b      	ldr	r3, [r3, #0]
 800da62:	08db      	lsrs	r3, r3, #3
 800da64:	f003 0303 	and.w	r3, r3, #3
 800da68:	4a24      	ldr	r2, [pc, #144]	; (800dafc <UART_SetConfig+0x928>)
 800da6a:	fa22 f303 	lsr.w	r3, r2, r3
 800da6e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800da70:	e00f      	b.n	800da92 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800da72:	4b22      	ldr	r3, [pc, #136]	; (800dafc <UART_SetConfig+0x928>)
 800da74:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800da76:	e00c      	b.n	800da92 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800da78:	4b21      	ldr	r3, [pc, #132]	; (800db00 <UART_SetConfig+0x92c>)
 800da7a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800da7c:	e009      	b.n	800da92 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800da7e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800da82:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800da84:	e005      	b.n	800da92 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800da86:	2300      	movs	r3, #0
 800da88:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800da8a:	2301      	movs	r3, #1
 800da8c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800da90:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800da92:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800da94:	2b00      	cmp	r3, #0
 800da96:	f000 80e7 	beq.w	800dc68 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800da9a:	697b      	ldr	r3, [r7, #20]
 800da9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800da9e:	4a19      	ldr	r2, [pc, #100]	; (800db04 <UART_SetConfig+0x930>)
 800daa0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800daa4:	461a      	mov	r2, r3
 800daa6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800daa8:	fbb3 f3f2 	udiv	r3, r3, r2
 800daac:	005a      	lsls	r2, r3, #1
 800daae:	697b      	ldr	r3, [r7, #20]
 800dab0:	685b      	ldr	r3, [r3, #4]
 800dab2:	085b      	lsrs	r3, r3, #1
 800dab4:	441a      	add	r2, r3
 800dab6:	697b      	ldr	r3, [r7, #20]
 800dab8:	685b      	ldr	r3, [r3, #4]
 800daba:	fbb2 f3f3 	udiv	r3, r2, r3
 800dabe:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800dac0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dac2:	2b0f      	cmp	r3, #15
 800dac4:	d916      	bls.n	800daf4 <UART_SetConfig+0x920>
 800dac6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dac8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800dacc:	d212      	bcs.n	800daf4 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800dace:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dad0:	b29b      	uxth	r3, r3
 800dad2:	f023 030f 	bic.w	r3, r3, #15
 800dad6:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800dad8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dada:	085b      	lsrs	r3, r3, #1
 800dadc:	b29b      	uxth	r3, r3
 800dade:	f003 0307 	and.w	r3, r3, #7
 800dae2:	b29a      	uxth	r2, r3
 800dae4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800dae6:	4313      	orrs	r3, r2
 800dae8:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800daea:	697b      	ldr	r3, [r7, #20]
 800daec:	681b      	ldr	r3, [r3, #0]
 800daee:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800daf0:	60da      	str	r2, [r3, #12]
 800daf2:	e0b9      	b.n	800dc68 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800daf4:	2301      	movs	r3, #1
 800daf6:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800dafa:	e0b5      	b.n	800dc68 <UART_SetConfig+0xa94>
 800dafc:	03d09000 	.word	0x03d09000
 800db00:	003d0900 	.word	0x003d0900
 800db04:	080125c8 	.word	0x080125c8
 800db08:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800db0c:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800db10:	2b20      	cmp	r3, #32
 800db12:	dc49      	bgt.n	800dba8 <UART_SetConfig+0x9d4>
 800db14:	2b00      	cmp	r3, #0
 800db16:	db7c      	blt.n	800dc12 <UART_SetConfig+0xa3e>
 800db18:	2b20      	cmp	r3, #32
 800db1a:	d87a      	bhi.n	800dc12 <UART_SetConfig+0xa3e>
 800db1c:	a201      	add	r2, pc, #4	; (adr r2, 800db24 <UART_SetConfig+0x950>)
 800db1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800db22:	bf00      	nop
 800db24:	0800dbaf 	.word	0x0800dbaf
 800db28:	0800dbb7 	.word	0x0800dbb7
 800db2c:	0800dc13 	.word	0x0800dc13
 800db30:	0800dc13 	.word	0x0800dc13
 800db34:	0800dbbf 	.word	0x0800dbbf
 800db38:	0800dc13 	.word	0x0800dc13
 800db3c:	0800dc13 	.word	0x0800dc13
 800db40:	0800dc13 	.word	0x0800dc13
 800db44:	0800dbcf 	.word	0x0800dbcf
 800db48:	0800dc13 	.word	0x0800dc13
 800db4c:	0800dc13 	.word	0x0800dc13
 800db50:	0800dc13 	.word	0x0800dc13
 800db54:	0800dc13 	.word	0x0800dc13
 800db58:	0800dc13 	.word	0x0800dc13
 800db5c:	0800dc13 	.word	0x0800dc13
 800db60:	0800dc13 	.word	0x0800dc13
 800db64:	0800dbdf 	.word	0x0800dbdf
 800db68:	0800dc13 	.word	0x0800dc13
 800db6c:	0800dc13 	.word	0x0800dc13
 800db70:	0800dc13 	.word	0x0800dc13
 800db74:	0800dc13 	.word	0x0800dc13
 800db78:	0800dc13 	.word	0x0800dc13
 800db7c:	0800dc13 	.word	0x0800dc13
 800db80:	0800dc13 	.word	0x0800dc13
 800db84:	0800dc13 	.word	0x0800dc13
 800db88:	0800dc13 	.word	0x0800dc13
 800db8c:	0800dc13 	.word	0x0800dc13
 800db90:	0800dc13 	.word	0x0800dc13
 800db94:	0800dc13 	.word	0x0800dc13
 800db98:	0800dc13 	.word	0x0800dc13
 800db9c:	0800dc13 	.word	0x0800dc13
 800dba0:	0800dc13 	.word	0x0800dc13
 800dba4:	0800dc05 	.word	0x0800dc05
 800dba8:	2b40      	cmp	r3, #64	; 0x40
 800dbaa:	d02e      	beq.n	800dc0a <UART_SetConfig+0xa36>
 800dbac:	e031      	b.n	800dc12 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800dbae:	f7fb fa91 	bl	80090d4 <HAL_RCC_GetPCLK1Freq>
 800dbb2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800dbb4:	e033      	b.n	800dc1e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800dbb6:	f7fb faa3 	bl	8009100 <HAL_RCC_GetPCLK2Freq>
 800dbba:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800dbbc:	e02f      	b.n	800dc1e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800dbbe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800dbc2:	4618      	mov	r0, r3
 800dbc4:	f7fc fa0e 	bl	8009fe4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800dbc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dbca:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800dbcc:	e027      	b.n	800dc1e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800dbce:	f107 0318 	add.w	r3, r7, #24
 800dbd2:	4618      	mov	r0, r3
 800dbd4:	f7fc fb5a 	bl	800a28c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800dbd8:	69fb      	ldr	r3, [r7, #28]
 800dbda:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800dbdc:	e01f      	b.n	800dc1e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800dbde:	4b2d      	ldr	r3, [pc, #180]	; (800dc94 <UART_SetConfig+0xac0>)
 800dbe0:	681b      	ldr	r3, [r3, #0]
 800dbe2:	f003 0320 	and.w	r3, r3, #32
 800dbe6:	2b00      	cmp	r3, #0
 800dbe8:	d009      	beq.n	800dbfe <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800dbea:	4b2a      	ldr	r3, [pc, #168]	; (800dc94 <UART_SetConfig+0xac0>)
 800dbec:	681b      	ldr	r3, [r3, #0]
 800dbee:	08db      	lsrs	r3, r3, #3
 800dbf0:	f003 0303 	and.w	r3, r3, #3
 800dbf4:	4a28      	ldr	r2, [pc, #160]	; (800dc98 <UART_SetConfig+0xac4>)
 800dbf6:	fa22 f303 	lsr.w	r3, r2, r3
 800dbfa:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800dbfc:	e00f      	b.n	800dc1e <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800dbfe:	4b26      	ldr	r3, [pc, #152]	; (800dc98 <UART_SetConfig+0xac4>)
 800dc00:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800dc02:	e00c      	b.n	800dc1e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800dc04:	4b25      	ldr	r3, [pc, #148]	; (800dc9c <UART_SetConfig+0xac8>)
 800dc06:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800dc08:	e009      	b.n	800dc1e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800dc0a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800dc0e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800dc10:	e005      	b.n	800dc1e <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800dc12:	2300      	movs	r3, #0
 800dc14:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800dc16:	2301      	movs	r3, #1
 800dc18:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800dc1c:	bf00      	nop
    }

    if (pclk != 0U)
 800dc1e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dc20:	2b00      	cmp	r3, #0
 800dc22:	d021      	beq.n	800dc68 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800dc24:	697b      	ldr	r3, [r7, #20]
 800dc26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dc28:	4a1d      	ldr	r2, [pc, #116]	; (800dca0 <UART_SetConfig+0xacc>)
 800dc2a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800dc2e:	461a      	mov	r2, r3
 800dc30:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dc32:	fbb3 f2f2 	udiv	r2, r3, r2
 800dc36:	697b      	ldr	r3, [r7, #20]
 800dc38:	685b      	ldr	r3, [r3, #4]
 800dc3a:	085b      	lsrs	r3, r3, #1
 800dc3c:	441a      	add	r2, r3
 800dc3e:	697b      	ldr	r3, [r7, #20]
 800dc40:	685b      	ldr	r3, [r3, #4]
 800dc42:	fbb2 f3f3 	udiv	r3, r2, r3
 800dc46:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800dc48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dc4a:	2b0f      	cmp	r3, #15
 800dc4c:	d909      	bls.n	800dc62 <UART_SetConfig+0xa8e>
 800dc4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dc50:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800dc54:	d205      	bcs.n	800dc62 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800dc56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dc58:	b29a      	uxth	r2, r3
 800dc5a:	697b      	ldr	r3, [r7, #20]
 800dc5c:	681b      	ldr	r3, [r3, #0]
 800dc5e:	60da      	str	r2, [r3, #12]
 800dc60:	e002      	b.n	800dc68 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800dc62:	2301      	movs	r3, #1
 800dc64:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800dc68:	697b      	ldr	r3, [r7, #20]
 800dc6a:	2201      	movs	r2, #1
 800dc6c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800dc70:	697b      	ldr	r3, [r7, #20]
 800dc72:	2201      	movs	r2, #1
 800dc74:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800dc78:	697b      	ldr	r3, [r7, #20]
 800dc7a:	2200      	movs	r2, #0
 800dc7c:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800dc7e:	697b      	ldr	r3, [r7, #20]
 800dc80:	2200      	movs	r2, #0
 800dc82:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800dc84:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800dc88:	4618      	mov	r0, r3
 800dc8a:	3748      	adds	r7, #72	; 0x48
 800dc8c:	46bd      	mov	sp, r7
 800dc8e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800dc92:	bf00      	nop
 800dc94:	58024400 	.word	0x58024400
 800dc98:	03d09000 	.word	0x03d09000
 800dc9c:	003d0900 	.word	0x003d0900
 800dca0:	080125c8 	.word	0x080125c8

0800dca4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800dca4:	b480      	push	{r7}
 800dca6:	b083      	sub	sp, #12
 800dca8:	af00      	add	r7, sp, #0
 800dcaa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800dcac:	687b      	ldr	r3, [r7, #4]
 800dcae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dcb0:	f003 0301 	and.w	r3, r3, #1
 800dcb4:	2b00      	cmp	r3, #0
 800dcb6:	d00a      	beq.n	800dcce <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800dcb8:	687b      	ldr	r3, [r7, #4]
 800dcba:	681b      	ldr	r3, [r3, #0]
 800dcbc:	685b      	ldr	r3, [r3, #4]
 800dcbe:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800dcc2:	687b      	ldr	r3, [r7, #4]
 800dcc4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dcc6:	687b      	ldr	r3, [r7, #4]
 800dcc8:	681b      	ldr	r3, [r3, #0]
 800dcca:	430a      	orrs	r2, r1
 800dccc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800dcce:	687b      	ldr	r3, [r7, #4]
 800dcd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dcd2:	f003 0302 	and.w	r3, r3, #2
 800dcd6:	2b00      	cmp	r3, #0
 800dcd8:	d00a      	beq.n	800dcf0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800dcda:	687b      	ldr	r3, [r7, #4]
 800dcdc:	681b      	ldr	r3, [r3, #0]
 800dcde:	685b      	ldr	r3, [r3, #4]
 800dce0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800dce4:	687b      	ldr	r3, [r7, #4]
 800dce6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800dce8:	687b      	ldr	r3, [r7, #4]
 800dcea:	681b      	ldr	r3, [r3, #0]
 800dcec:	430a      	orrs	r2, r1
 800dcee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800dcf0:	687b      	ldr	r3, [r7, #4]
 800dcf2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dcf4:	f003 0304 	and.w	r3, r3, #4
 800dcf8:	2b00      	cmp	r3, #0
 800dcfa:	d00a      	beq.n	800dd12 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800dcfc:	687b      	ldr	r3, [r7, #4]
 800dcfe:	681b      	ldr	r3, [r3, #0]
 800dd00:	685b      	ldr	r3, [r3, #4]
 800dd02:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800dd06:	687b      	ldr	r3, [r7, #4]
 800dd08:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800dd0a:	687b      	ldr	r3, [r7, #4]
 800dd0c:	681b      	ldr	r3, [r3, #0]
 800dd0e:	430a      	orrs	r2, r1
 800dd10:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800dd12:	687b      	ldr	r3, [r7, #4]
 800dd14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dd16:	f003 0308 	and.w	r3, r3, #8
 800dd1a:	2b00      	cmp	r3, #0
 800dd1c:	d00a      	beq.n	800dd34 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800dd1e:	687b      	ldr	r3, [r7, #4]
 800dd20:	681b      	ldr	r3, [r3, #0]
 800dd22:	685b      	ldr	r3, [r3, #4]
 800dd24:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800dd28:	687b      	ldr	r3, [r7, #4]
 800dd2a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800dd2c:	687b      	ldr	r3, [r7, #4]
 800dd2e:	681b      	ldr	r3, [r3, #0]
 800dd30:	430a      	orrs	r2, r1
 800dd32:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800dd34:	687b      	ldr	r3, [r7, #4]
 800dd36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dd38:	f003 0310 	and.w	r3, r3, #16
 800dd3c:	2b00      	cmp	r3, #0
 800dd3e:	d00a      	beq.n	800dd56 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800dd40:	687b      	ldr	r3, [r7, #4]
 800dd42:	681b      	ldr	r3, [r3, #0]
 800dd44:	689b      	ldr	r3, [r3, #8]
 800dd46:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800dd4a:	687b      	ldr	r3, [r7, #4]
 800dd4c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800dd4e:	687b      	ldr	r3, [r7, #4]
 800dd50:	681b      	ldr	r3, [r3, #0]
 800dd52:	430a      	orrs	r2, r1
 800dd54:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800dd56:	687b      	ldr	r3, [r7, #4]
 800dd58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dd5a:	f003 0320 	and.w	r3, r3, #32
 800dd5e:	2b00      	cmp	r3, #0
 800dd60:	d00a      	beq.n	800dd78 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800dd62:	687b      	ldr	r3, [r7, #4]
 800dd64:	681b      	ldr	r3, [r3, #0]
 800dd66:	689b      	ldr	r3, [r3, #8]
 800dd68:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800dd6c:	687b      	ldr	r3, [r7, #4]
 800dd6e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800dd70:	687b      	ldr	r3, [r7, #4]
 800dd72:	681b      	ldr	r3, [r3, #0]
 800dd74:	430a      	orrs	r2, r1
 800dd76:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800dd78:	687b      	ldr	r3, [r7, #4]
 800dd7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dd7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dd80:	2b00      	cmp	r3, #0
 800dd82:	d01a      	beq.n	800ddba <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800dd84:	687b      	ldr	r3, [r7, #4]
 800dd86:	681b      	ldr	r3, [r3, #0]
 800dd88:	685b      	ldr	r3, [r3, #4]
 800dd8a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800dd8e:	687b      	ldr	r3, [r7, #4]
 800dd90:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800dd92:	687b      	ldr	r3, [r7, #4]
 800dd94:	681b      	ldr	r3, [r3, #0]
 800dd96:	430a      	orrs	r2, r1
 800dd98:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800dd9a:	687b      	ldr	r3, [r7, #4]
 800dd9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800dd9e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800dda2:	d10a      	bne.n	800ddba <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800dda4:	687b      	ldr	r3, [r7, #4]
 800dda6:	681b      	ldr	r3, [r3, #0]
 800dda8:	685b      	ldr	r3, [r3, #4]
 800ddaa:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800ddae:	687b      	ldr	r3, [r7, #4]
 800ddb0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800ddb2:	687b      	ldr	r3, [r7, #4]
 800ddb4:	681b      	ldr	r3, [r3, #0]
 800ddb6:	430a      	orrs	r2, r1
 800ddb8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800ddba:	687b      	ldr	r3, [r7, #4]
 800ddbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ddbe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ddc2:	2b00      	cmp	r3, #0
 800ddc4:	d00a      	beq.n	800dddc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800ddc6:	687b      	ldr	r3, [r7, #4]
 800ddc8:	681b      	ldr	r3, [r3, #0]
 800ddca:	685b      	ldr	r3, [r3, #4]
 800ddcc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800ddd0:	687b      	ldr	r3, [r7, #4]
 800ddd2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800ddd4:	687b      	ldr	r3, [r7, #4]
 800ddd6:	681b      	ldr	r3, [r3, #0]
 800ddd8:	430a      	orrs	r2, r1
 800ddda:	605a      	str	r2, [r3, #4]
  }
}
 800dddc:	bf00      	nop
 800ddde:	370c      	adds	r7, #12
 800dde0:	46bd      	mov	sp, r7
 800dde2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dde6:	4770      	bx	lr

0800dde8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800dde8:	b580      	push	{r7, lr}
 800ddea:	b086      	sub	sp, #24
 800ddec:	af02      	add	r7, sp, #8
 800ddee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ddf0:	687b      	ldr	r3, [r7, #4]
 800ddf2:	2200      	movs	r2, #0
 800ddf4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800ddf8:	f7f9 f8c6 	bl	8006f88 <HAL_GetTick>
 800ddfc:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800ddfe:	687b      	ldr	r3, [r7, #4]
 800de00:	681b      	ldr	r3, [r3, #0]
 800de02:	681b      	ldr	r3, [r3, #0]
 800de04:	f003 0308 	and.w	r3, r3, #8
 800de08:	2b08      	cmp	r3, #8
 800de0a:	d10e      	bne.n	800de2a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800de0c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800de10:	9300      	str	r3, [sp, #0]
 800de12:	68fb      	ldr	r3, [r7, #12]
 800de14:	2200      	movs	r2, #0
 800de16:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800de1a:	6878      	ldr	r0, [r7, #4]
 800de1c:	f000 f82f 	bl	800de7e <UART_WaitOnFlagUntilTimeout>
 800de20:	4603      	mov	r3, r0
 800de22:	2b00      	cmp	r3, #0
 800de24:	d001      	beq.n	800de2a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800de26:	2303      	movs	r3, #3
 800de28:	e025      	b.n	800de76 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800de2a:	687b      	ldr	r3, [r7, #4]
 800de2c:	681b      	ldr	r3, [r3, #0]
 800de2e:	681b      	ldr	r3, [r3, #0]
 800de30:	f003 0304 	and.w	r3, r3, #4
 800de34:	2b04      	cmp	r3, #4
 800de36:	d10e      	bne.n	800de56 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800de38:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800de3c:	9300      	str	r3, [sp, #0]
 800de3e:	68fb      	ldr	r3, [r7, #12]
 800de40:	2200      	movs	r2, #0
 800de42:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800de46:	6878      	ldr	r0, [r7, #4]
 800de48:	f000 f819 	bl	800de7e <UART_WaitOnFlagUntilTimeout>
 800de4c:	4603      	mov	r3, r0
 800de4e:	2b00      	cmp	r3, #0
 800de50:	d001      	beq.n	800de56 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800de52:	2303      	movs	r3, #3
 800de54:	e00f      	b.n	800de76 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800de56:	687b      	ldr	r3, [r7, #4]
 800de58:	2220      	movs	r2, #32
 800de5a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800de5e:	687b      	ldr	r3, [r7, #4]
 800de60:	2220      	movs	r2, #32
 800de62:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800de66:	687b      	ldr	r3, [r7, #4]
 800de68:	2200      	movs	r2, #0
 800de6a:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800de6c:	687b      	ldr	r3, [r7, #4]
 800de6e:	2200      	movs	r2, #0
 800de70:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800de74:	2300      	movs	r3, #0
}
 800de76:	4618      	mov	r0, r3
 800de78:	3710      	adds	r7, #16
 800de7a:	46bd      	mov	sp, r7
 800de7c:	bd80      	pop	{r7, pc}

0800de7e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800de7e:	b580      	push	{r7, lr}
 800de80:	b09c      	sub	sp, #112	; 0x70
 800de82:	af00      	add	r7, sp, #0
 800de84:	60f8      	str	r0, [r7, #12]
 800de86:	60b9      	str	r1, [r7, #8]
 800de88:	603b      	str	r3, [r7, #0]
 800de8a:	4613      	mov	r3, r2
 800de8c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800de8e:	e0a9      	b.n	800dfe4 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800de90:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800de92:	f1b3 3fff 	cmp.w	r3, #4294967295
 800de96:	f000 80a5 	beq.w	800dfe4 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800de9a:	f7f9 f875 	bl	8006f88 <HAL_GetTick>
 800de9e:	4602      	mov	r2, r0
 800dea0:	683b      	ldr	r3, [r7, #0]
 800dea2:	1ad3      	subs	r3, r2, r3
 800dea4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800dea6:	429a      	cmp	r2, r3
 800dea8:	d302      	bcc.n	800deb0 <UART_WaitOnFlagUntilTimeout+0x32>
 800deaa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800deac:	2b00      	cmp	r3, #0
 800deae:	d140      	bne.n	800df32 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800deb0:	68fb      	ldr	r3, [r7, #12]
 800deb2:	681b      	ldr	r3, [r3, #0]
 800deb4:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800deb6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800deb8:	e853 3f00 	ldrex	r3, [r3]
 800debc:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800debe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dec0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800dec4:	667b      	str	r3, [r7, #100]	; 0x64
 800dec6:	68fb      	ldr	r3, [r7, #12]
 800dec8:	681b      	ldr	r3, [r3, #0]
 800deca:	461a      	mov	r2, r3
 800decc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800dece:	65fb      	str	r3, [r7, #92]	; 0x5c
 800ded0:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ded2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800ded4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800ded6:	e841 2300 	strex	r3, r2, [r1]
 800deda:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800dedc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800dede:	2b00      	cmp	r3, #0
 800dee0:	d1e6      	bne.n	800deb0 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800dee2:	68fb      	ldr	r3, [r7, #12]
 800dee4:	681b      	ldr	r3, [r3, #0]
 800dee6:	3308      	adds	r3, #8
 800dee8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800deea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800deec:	e853 3f00 	ldrex	r3, [r3]
 800def0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800def2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800def4:	f023 0301 	bic.w	r3, r3, #1
 800def8:	663b      	str	r3, [r7, #96]	; 0x60
 800defa:	68fb      	ldr	r3, [r7, #12]
 800defc:	681b      	ldr	r3, [r3, #0]
 800defe:	3308      	adds	r3, #8
 800df00:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800df02:	64ba      	str	r2, [r7, #72]	; 0x48
 800df04:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800df06:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800df08:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800df0a:	e841 2300 	strex	r3, r2, [r1]
 800df0e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800df10:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800df12:	2b00      	cmp	r3, #0
 800df14:	d1e5      	bne.n	800dee2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800df16:	68fb      	ldr	r3, [r7, #12]
 800df18:	2220      	movs	r2, #32
 800df1a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800df1e:	68fb      	ldr	r3, [r7, #12]
 800df20:	2220      	movs	r2, #32
 800df22:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800df26:	68fb      	ldr	r3, [r7, #12]
 800df28:	2200      	movs	r2, #0
 800df2a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800df2e:	2303      	movs	r3, #3
 800df30:	e069      	b.n	800e006 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800df32:	68fb      	ldr	r3, [r7, #12]
 800df34:	681b      	ldr	r3, [r3, #0]
 800df36:	681b      	ldr	r3, [r3, #0]
 800df38:	f003 0304 	and.w	r3, r3, #4
 800df3c:	2b00      	cmp	r3, #0
 800df3e:	d051      	beq.n	800dfe4 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800df40:	68fb      	ldr	r3, [r7, #12]
 800df42:	681b      	ldr	r3, [r3, #0]
 800df44:	69db      	ldr	r3, [r3, #28]
 800df46:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800df4a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800df4e:	d149      	bne.n	800dfe4 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800df50:	68fb      	ldr	r3, [r7, #12]
 800df52:	681b      	ldr	r3, [r3, #0]
 800df54:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800df58:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800df5a:	68fb      	ldr	r3, [r7, #12]
 800df5c:	681b      	ldr	r3, [r3, #0]
 800df5e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800df60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df62:	e853 3f00 	ldrex	r3, [r3]
 800df66:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800df68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df6a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800df6e:	66fb      	str	r3, [r7, #108]	; 0x6c
 800df70:	68fb      	ldr	r3, [r7, #12]
 800df72:	681b      	ldr	r3, [r3, #0]
 800df74:	461a      	mov	r2, r3
 800df76:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800df78:	637b      	str	r3, [r7, #52]	; 0x34
 800df7a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800df7c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800df7e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800df80:	e841 2300 	strex	r3, r2, [r1]
 800df84:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800df86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800df88:	2b00      	cmp	r3, #0
 800df8a:	d1e6      	bne.n	800df5a <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800df8c:	68fb      	ldr	r3, [r7, #12]
 800df8e:	681b      	ldr	r3, [r3, #0]
 800df90:	3308      	adds	r3, #8
 800df92:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800df94:	697b      	ldr	r3, [r7, #20]
 800df96:	e853 3f00 	ldrex	r3, [r3]
 800df9a:	613b      	str	r3, [r7, #16]
   return(result);
 800df9c:	693b      	ldr	r3, [r7, #16]
 800df9e:	f023 0301 	bic.w	r3, r3, #1
 800dfa2:	66bb      	str	r3, [r7, #104]	; 0x68
 800dfa4:	68fb      	ldr	r3, [r7, #12]
 800dfa6:	681b      	ldr	r3, [r3, #0]
 800dfa8:	3308      	adds	r3, #8
 800dfaa:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800dfac:	623a      	str	r2, [r7, #32]
 800dfae:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dfb0:	69f9      	ldr	r1, [r7, #28]
 800dfb2:	6a3a      	ldr	r2, [r7, #32]
 800dfb4:	e841 2300 	strex	r3, r2, [r1]
 800dfb8:	61bb      	str	r3, [r7, #24]
   return(result);
 800dfba:	69bb      	ldr	r3, [r7, #24]
 800dfbc:	2b00      	cmp	r3, #0
 800dfbe:	d1e5      	bne.n	800df8c <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800dfc0:	68fb      	ldr	r3, [r7, #12]
 800dfc2:	2220      	movs	r2, #32
 800dfc4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800dfc8:	68fb      	ldr	r3, [r7, #12]
 800dfca:	2220      	movs	r2, #32
 800dfcc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800dfd0:	68fb      	ldr	r3, [r7, #12]
 800dfd2:	2220      	movs	r2, #32
 800dfd4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800dfd8:	68fb      	ldr	r3, [r7, #12]
 800dfda:	2200      	movs	r2, #0
 800dfdc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800dfe0:	2303      	movs	r3, #3
 800dfe2:	e010      	b.n	800e006 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800dfe4:	68fb      	ldr	r3, [r7, #12]
 800dfe6:	681b      	ldr	r3, [r3, #0]
 800dfe8:	69da      	ldr	r2, [r3, #28]
 800dfea:	68bb      	ldr	r3, [r7, #8]
 800dfec:	4013      	ands	r3, r2
 800dfee:	68ba      	ldr	r2, [r7, #8]
 800dff0:	429a      	cmp	r2, r3
 800dff2:	bf0c      	ite	eq
 800dff4:	2301      	moveq	r3, #1
 800dff6:	2300      	movne	r3, #0
 800dff8:	b2db      	uxtb	r3, r3
 800dffa:	461a      	mov	r2, r3
 800dffc:	79fb      	ldrb	r3, [r7, #7]
 800dffe:	429a      	cmp	r2, r3
 800e000:	f43f af46 	beq.w	800de90 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800e004:	2300      	movs	r3, #0
}
 800e006:	4618      	mov	r0, r3
 800e008:	3770      	adds	r7, #112	; 0x70
 800e00a:	46bd      	mov	sp, r7
 800e00c:	bd80      	pop	{r7, pc}
	...

0800e010 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800e010:	b480      	push	{r7}
 800e012:	b0a3      	sub	sp, #140	; 0x8c
 800e014:	af00      	add	r7, sp, #0
 800e016:	60f8      	str	r0, [r7, #12]
 800e018:	60b9      	str	r1, [r7, #8]
 800e01a:	4613      	mov	r3, r2
 800e01c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800e01e:	68fb      	ldr	r3, [r7, #12]
 800e020:	68ba      	ldr	r2, [r7, #8]
 800e022:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 800e024:	68fb      	ldr	r3, [r7, #12]
 800e026:	88fa      	ldrh	r2, [r7, #6]
 800e028:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 800e02c:	68fb      	ldr	r3, [r7, #12]
 800e02e:	88fa      	ldrh	r2, [r7, #6]
 800e030:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 800e034:	68fb      	ldr	r3, [r7, #12]
 800e036:	2200      	movs	r2, #0
 800e038:	671a      	str	r2, [r3, #112]	; 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800e03a:	68fb      	ldr	r3, [r7, #12]
 800e03c:	689b      	ldr	r3, [r3, #8]
 800e03e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e042:	d10e      	bne.n	800e062 <UART_Start_Receive_IT+0x52>
 800e044:	68fb      	ldr	r3, [r7, #12]
 800e046:	691b      	ldr	r3, [r3, #16]
 800e048:	2b00      	cmp	r3, #0
 800e04a:	d105      	bne.n	800e058 <UART_Start_Receive_IT+0x48>
 800e04c:	68fb      	ldr	r3, [r7, #12]
 800e04e:	f240 12ff 	movw	r2, #511	; 0x1ff
 800e052:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800e056:	e02d      	b.n	800e0b4 <UART_Start_Receive_IT+0xa4>
 800e058:	68fb      	ldr	r3, [r7, #12]
 800e05a:	22ff      	movs	r2, #255	; 0xff
 800e05c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800e060:	e028      	b.n	800e0b4 <UART_Start_Receive_IT+0xa4>
 800e062:	68fb      	ldr	r3, [r7, #12]
 800e064:	689b      	ldr	r3, [r3, #8]
 800e066:	2b00      	cmp	r3, #0
 800e068:	d10d      	bne.n	800e086 <UART_Start_Receive_IT+0x76>
 800e06a:	68fb      	ldr	r3, [r7, #12]
 800e06c:	691b      	ldr	r3, [r3, #16]
 800e06e:	2b00      	cmp	r3, #0
 800e070:	d104      	bne.n	800e07c <UART_Start_Receive_IT+0x6c>
 800e072:	68fb      	ldr	r3, [r7, #12]
 800e074:	22ff      	movs	r2, #255	; 0xff
 800e076:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800e07a:	e01b      	b.n	800e0b4 <UART_Start_Receive_IT+0xa4>
 800e07c:	68fb      	ldr	r3, [r7, #12]
 800e07e:	227f      	movs	r2, #127	; 0x7f
 800e080:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800e084:	e016      	b.n	800e0b4 <UART_Start_Receive_IT+0xa4>
 800e086:	68fb      	ldr	r3, [r7, #12]
 800e088:	689b      	ldr	r3, [r3, #8]
 800e08a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800e08e:	d10d      	bne.n	800e0ac <UART_Start_Receive_IT+0x9c>
 800e090:	68fb      	ldr	r3, [r7, #12]
 800e092:	691b      	ldr	r3, [r3, #16]
 800e094:	2b00      	cmp	r3, #0
 800e096:	d104      	bne.n	800e0a2 <UART_Start_Receive_IT+0x92>
 800e098:	68fb      	ldr	r3, [r7, #12]
 800e09a:	227f      	movs	r2, #127	; 0x7f
 800e09c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800e0a0:	e008      	b.n	800e0b4 <UART_Start_Receive_IT+0xa4>
 800e0a2:	68fb      	ldr	r3, [r7, #12]
 800e0a4:	223f      	movs	r2, #63	; 0x3f
 800e0a6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800e0aa:	e003      	b.n	800e0b4 <UART_Start_Receive_IT+0xa4>
 800e0ac:	68fb      	ldr	r3, [r7, #12]
 800e0ae:	2200      	movs	r2, #0
 800e0b0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e0b4:	68fb      	ldr	r3, [r7, #12]
 800e0b6:	2200      	movs	r2, #0
 800e0b8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800e0bc:	68fb      	ldr	r3, [r7, #12]
 800e0be:	2222      	movs	r2, #34	; 0x22
 800e0c0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e0c4:	68fb      	ldr	r3, [r7, #12]
 800e0c6:	681b      	ldr	r3, [r3, #0]
 800e0c8:	3308      	adds	r3, #8
 800e0ca:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e0cc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e0ce:	e853 3f00 	ldrex	r3, [r3]
 800e0d2:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 800e0d4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e0d6:	f043 0301 	orr.w	r3, r3, #1
 800e0da:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800e0de:	68fb      	ldr	r3, [r7, #12]
 800e0e0:	681b      	ldr	r3, [r3, #0]
 800e0e2:	3308      	adds	r3, #8
 800e0e4:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800e0e8:	673a      	str	r2, [r7, #112]	; 0x70
 800e0ea:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e0ec:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800e0ee:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800e0f0:	e841 2300 	strex	r3, r2, [r1]
 800e0f4:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 800e0f6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800e0f8:	2b00      	cmp	r3, #0
 800e0fa:	d1e3      	bne.n	800e0c4 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800e0fc:	68fb      	ldr	r3, [r7, #12]
 800e0fe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e100:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800e104:	d153      	bne.n	800e1ae <UART_Start_Receive_IT+0x19e>
 800e106:	68fb      	ldr	r3, [r7, #12]
 800e108:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800e10c:	88fa      	ldrh	r2, [r7, #6]
 800e10e:	429a      	cmp	r2, r3
 800e110:	d34d      	bcc.n	800e1ae <UART_Start_Receive_IT+0x19e>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800e112:	68fb      	ldr	r3, [r7, #12]
 800e114:	689b      	ldr	r3, [r3, #8]
 800e116:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e11a:	d107      	bne.n	800e12c <UART_Start_Receive_IT+0x11c>
 800e11c:	68fb      	ldr	r3, [r7, #12]
 800e11e:	691b      	ldr	r3, [r3, #16]
 800e120:	2b00      	cmp	r3, #0
 800e122:	d103      	bne.n	800e12c <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800e124:	68fb      	ldr	r3, [r7, #12]
 800e126:	4a4b      	ldr	r2, [pc, #300]	; (800e254 <UART_Start_Receive_IT+0x244>)
 800e128:	671a      	str	r2, [r3, #112]	; 0x70
 800e12a:	e002      	b.n	800e132 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800e12c:	68fb      	ldr	r3, [r7, #12]
 800e12e:	4a4a      	ldr	r2, [pc, #296]	; (800e258 <UART_Start_Receive_IT+0x248>)
 800e130:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 800e132:	68fb      	ldr	r3, [r7, #12]
 800e134:	2200      	movs	r2, #0
 800e136:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800e13a:	68fb      	ldr	r3, [r7, #12]
 800e13c:	691b      	ldr	r3, [r3, #16]
 800e13e:	2b00      	cmp	r3, #0
 800e140:	d01a      	beq.n	800e178 <UART_Start_Receive_IT+0x168>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800e142:	68fb      	ldr	r3, [r7, #12]
 800e144:	681b      	ldr	r3, [r3, #0]
 800e146:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e148:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e14a:	e853 3f00 	ldrex	r3, [r3]
 800e14e:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800e150:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e152:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800e156:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800e15a:	68fb      	ldr	r3, [r7, #12]
 800e15c:	681b      	ldr	r3, [r3, #0]
 800e15e:	461a      	mov	r2, r3
 800e160:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800e164:	65fb      	str	r3, [r7, #92]	; 0x5c
 800e166:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e168:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800e16a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800e16c:	e841 2300 	strex	r3, r2, [r1]
 800e170:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800e172:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e174:	2b00      	cmp	r3, #0
 800e176:	d1e4      	bne.n	800e142 <UART_Start_Receive_IT+0x132>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800e178:	68fb      	ldr	r3, [r7, #12]
 800e17a:	681b      	ldr	r3, [r3, #0]
 800e17c:	3308      	adds	r3, #8
 800e17e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e180:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e182:	e853 3f00 	ldrex	r3, [r3]
 800e186:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800e188:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e18a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800e18e:	67fb      	str	r3, [r7, #124]	; 0x7c
 800e190:	68fb      	ldr	r3, [r7, #12]
 800e192:	681b      	ldr	r3, [r3, #0]
 800e194:	3308      	adds	r3, #8
 800e196:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800e198:	64ba      	str	r2, [r7, #72]	; 0x48
 800e19a:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e19c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800e19e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e1a0:	e841 2300 	strex	r3, r2, [r1]
 800e1a4:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800e1a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e1a8:	2b00      	cmp	r3, #0
 800e1aa:	d1e5      	bne.n	800e178 <UART_Start_Receive_IT+0x168>
 800e1ac:	e04a      	b.n	800e244 <UART_Start_Receive_IT+0x234>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800e1ae:	68fb      	ldr	r3, [r7, #12]
 800e1b0:	689b      	ldr	r3, [r3, #8]
 800e1b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e1b6:	d107      	bne.n	800e1c8 <UART_Start_Receive_IT+0x1b8>
 800e1b8:	68fb      	ldr	r3, [r7, #12]
 800e1ba:	691b      	ldr	r3, [r3, #16]
 800e1bc:	2b00      	cmp	r3, #0
 800e1be:	d103      	bne.n	800e1c8 <UART_Start_Receive_IT+0x1b8>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800e1c0:	68fb      	ldr	r3, [r7, #12]
 800e1c2:	4a26      	ldr	r2, [pc, #152]	; (800e25c <UART_Start_Receive_IT+0x24c>)
 800e1c4:	671a      	str	r2, [r3, #112]	; 0x70
 800e1c6:	e002      	b.n	800e1ce <UART_Start_Receive_IT+0x1be>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800e1c8:	68fb      	ldr	r3, [r7, #12]
 800e1ca:	4a25      	ldr	r2, [pc, #148]	; (800e260 <UART_Start_Receive_IT+0x250>)
 800e1cc:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 800e1ce:	68fb      	ldr	r3, [r7, #12]
 800e1d0:	2200      	movs	r2, #0
 800e1d2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800e1d6:	68fb      	ldr	r3, [r7, #12]
 800e1d8:	691b      	ldr	r3, [r3, #16]
 800e1da:	2b00      	cmp	r3, #0
 800e1dc:	d019      	beq.n	800e212 <UART_Start_Receive_IT+0x202>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800e1de:	68fb      	ldr	r3, [r7, #12]
 800e1e0:	681b      	ldr	r3, [r3, #0]
 800e1e2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e1e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e1e6:	e853 3f00 	ldrex	r3, [r3]
 800e1ea:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800e1ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e1ee:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800e1f2:	677b      	str	r3, [r7, #116]	; 0x74
 800e1f4:	68fb      	ldr	r3, [r7, #12]
 800e1f6:	681b      	ldr	r3, [r3, #0]
 800e1f8:	461a      	mov	r2, r3
 800e1fa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800e1fc:	637b      	str	r3, [r7, #52]	; 0x34
 800e1fe:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e200:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800e202:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e204:	e841 2300 	strex	r3, r2, [r1]
 800e208:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800e20a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e20c:	2b00      	cmp	r3, #0
 800e20e:	d1e6      	bne.n	800e1de <UART_Start_Receive_IT+0x1ce>
 800e210:	e018      	b.n	800e244 <UART_Start_Receive_IT+0x234>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800e212:	68fb      	ldr	r3, [r7, #12]
 800e214:	681b      	ldr	r3, [r3, #0]
 800e216:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e218:	697b      	ldr	r3, [r7, #20]
 800e21a:	e853 3f00 	ldrex	r3, [r3]
 800e21e:	613b      	str	r3, [r7, #16]
   return(result);
 800e220:	693b      	ldr	r3, [r7, #16]
 800e222:	f043 0320 	orr.w	r3, r3, #32
 800e226:	67bb      	str	r3, [r7, #120]	; 0x78
 800e228:	68fb      	ldr	r3, [r7, #12]
 800e22a:	681b      	ldr	r3, [r3, #0]
 800e22c:	461a      	mov	r2, r3
 800e22e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800e230:	623b      	str	r3, [r7, #32]
 800e232:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e234:	69f9      	ldr	r1, [r7, #28]
 800e236:	6a3a      	ldr	r2, [r7, #32]
 800e238:	e841 2300 	strex	r3, r2, [r1]
 800e23c:	61bb      	str	r3, [r7, #24]
   return(result);
 800e23e:	69bb      	ldr	r3, [r7, #24]
 800e240:	2b00      	cmp	r3, #0
 800e242:	d1e6      	bne.n	800e212 <UART_Start_Receive_IT+0x202>
    }
  }
  return HAL_OK;
 800e244:	2300      	movs	r3, #0
}
 800e246:	4618      	mov	r0, r3
 800e248:	378c      	adds	r7, #140	; 0x8c
 800e24a:	46bd      	mov	sp, r7
 800e24c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e250:	4770      	bx	lr
 800e252:	bf00      	nop
 800e254:	0800e96d 	.word	0x0800e96d
 800e258:	0800e675 	.word	0x0800e675
 800e25c:	0800e513 	.word	0x0800e513
 800e260:	0800e3b3 	.word	0x0800e3b3

0800e264 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800e264:	b480      	push	{r7}
 800e266:	b095      	sub	sp, #84	; 0x54
 800e268:	af00      	add	r7, sp, #0
 800e26a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800e26c:	687b      	ldr	r3, [r7, #4]
 800e26e:	681b      	ldr	r3, [r3, #0]
 800e270:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e272:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e274:	e853 3f00 	ldrex	r3, [r3]
 800e278:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800e27a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e27c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800e280:	64fb      	str	r3, [r7, #76]	; 0x4c
 800e282:	687b      	ldr	r3, [r7, #4]
 800e284:	681b      	ldr	r3, [r3, #0]
 800e286:	461a      	mov	r2, r3
 800e288:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e28a:	643b      	str	r3, [r7, #64]	; 0x40
 800e28c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e28e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800e290:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800e292:	e841 2300 	strex	r3, r2, [r1]
 800e296:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800e298:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e29a:	2b00      	cmp	r3, #0
 800e29c:	d1e6      	bne.n	800e26c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800e29e:	687b      	ldr	r3, [r7, #4]
 800e2a0:	681b      	ldr	r3, [r3, #0]
 800e2a2:	3308      	adds	r3, #8
 800e2a4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e2a6:	6a3b      	ldr	r3, [r7, #32]
 800e2a8:	e853 3f00 	ldrex	r3, [r3]
 800e2ac:	61fb      	str	r3, [r7, #28]
   return(result);
 800e2ae:	69fa      	ldr	r2, [r7, #28]
 800e2b0:	4b1e      	ldr	r3, [pc, #120]	; (800e32c <UART_EndRxTransfer+0xc8>)
 800e2b2:	4013      	ands	r3, r2
 800e2b4:	64bb      	str	r3, [r7, #72]	; 0x48
 800e2b6:	687b      	ldr	r3, [r7, #4]
 800e2b8:	681b      	ldr	r3, [r3, #0]
 800e2ba:	3308      	adds	r3, #8
 800e2bc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e2be:	62fa      	str	r2, [r7, #44]	; 0x2c
 800e2c0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e2c2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800e2c4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e2c6:	e841 2300 	strex	r3, r2, [r1]
 800e2ca:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800e2cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e2ce:	2b00      	cmp	r3, #0
 800e2d0:	d1e5      	bne.n	800e29e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e2d2:	687b      	ldr	r3, [r7, #4]
 800e2d4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e2d6:	2b01      	cmp	r3, #1
 800e2d8:	d118      	bne.n	800e30c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e2da:	687b      	ldr	r3, [r7, #4]
 800e2dc:	681b      	ldr	r3, [r3, #0]
 800e2de:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e2e0:	68fb      	ldr	r3, [r7, #12]
 800e2e2:	e853 3f00 	ldrex	r3, [r3]
 800e2e6:	60bb      	str	r3, [r7, #8]
   return(result);
 800e2e8:	68bb      	ldr	r3, [r7, #8]
 800e2ea:	f023 0310 	bic.w	r3, r3, #16
 800e2ee:	647b      	str	r3, [r7, #68]	; 0x44
 800e2f0:	687b      	ldr	r3, [r7, #4]
 800e2f2:	681b      	ldr	r3, [r3, #0]
 800e2f4:	461a      	mov	r2, r3
 800e2f6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e2f8:	61bb      	str	r3, [r7, #24]
 800e2fa:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e2fc:	6979      	ldr	r1, [r7, #20]
 800e2fe:	69ba      	ldr	r2, [r7, #24]
 800e300:	e841 2300 	strex	r3, r2, [r1]
 800e304:	613b      	str	r3, [r7, #16]
   return(result);
 800e306:	693b      	ldr	r3, [r7, #16]
 800e308:	2b00      	cmp	r3, #0
 800e30a:	d1e6      	bne.n	800e2da <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800e30c:	687b      	ldr	r3, [r7, #4]
 800e30e:	2220      	movs	r2, #32
 800e310:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e314:	687b      	ldr	r3, [r7, #4]
 800e316:	2200      	movs	r2, #0
 800e318:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800e31a:	687b      	ldr	r3, [r7, #4]
 800e31c:	2200      	movs	r2, #0
 800e31e:	671a      	str	r2, [r3, #112]	; 0x70
}
 800e320:	bf00      	nop
 800e322:	3754      	adds	r7, #84	; 0x54
 800e324:	46bd      	mov	sp, r7
 800e326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e32a:	4770      	bx	lr
 800e32c:	effffffe 	.word	0xeffffffe

0800e330 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800e330:	b580      	push	{r7, lr}
 800e332:	b084      	sub	sp, #16
 800e334:	af00      	add	r7, sp, #0
 800e336:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800e338:	687b      	ldr	r3, [r7, #4]
 800e33a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e33c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800e33e:	68fb      	ldr	r3, [r7, #12]
 800e340:	2200      	movs	r2, #0
 800e342:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800e346:	68fb      	ldr	r3, [r7, #12]
 800e348:	2200      	movs	r2, #0
 800e34a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800e34e:	68f8      	ldr	r0, [r7, #12]
 800e350:	f7fe ff2a 	bl	800d1a8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800e354:	bf00      	nop
 800e356:	3710      	adds	r7, #16
 800e358:	46bd      	mov	sp, r7
 800e35a:	bd80      	pop	{r7, pc}

0800e35c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800e35c:	b580      	push	{r7, lr}
 800e35e:	b088      	sub	sp, #32
 800e360:	af00      	add	r7, sp, #0
 800e362:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800e364:	687b      	ldr	r3, [r7, #4]
 800e366:	681b      	ldr	r3, [r3, #0]
 800e368:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e36a:	68fb      	ldr	r3, [r7, #12]
 800e36c:	e853 3f00 	ldrex	r3, [r3]
 800e370:	60bb      	str	r3, [r7, #8]
   return(result);
 800e372:	68bb      	ldr	r3, [r7, #8]
 800e374:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e378:	61fb      	str	r3, [r7, #28]
 800e37a:	687b      	ldr	r3, [r7, #4]
 800e37c:	681b      	ldr	r3, [r3, #0]
 800e37e:	461a      	mov	r2, r3
 800e380:	69fb      	ldr	r3, [r7, #28]
 800e382:	61bb      	str	r3, [r7, #24]
 800e384:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e386:	6979      	ldr	r1, [r7, #20]
 800e388:	69ba      	ldr	r2, [r7, #24]
 800e38a:	e841 2300 	strex	r3, r2, [r1]
 800e38e:	613b      	str	r3, [r7, #16]
   return(result);
 800e390:	693b      	ldr	r3, [r7, #16]
 800e392:	2b00      	cmp	r3, #0
 800e394:	d1e6      	bne.n	800e364 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800e396:	687b      	ldr	r3, [r7, #4]
 800e398:	2220      	movs	r2, #32
 800e39a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800e39e:	687b      	ldr	r3, [r7, #4]
 800e3a0:	2200      	movs	r2, #0
 800e3a2:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800e3a4:	6878      	ldr	r0, [r7, #4]
 800e3a6:	f7f4 ff3f 	bl	8003228 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800e3aa:	bf00      	nop
 800e3ac:	3720      	adds	r7, #32
 800e3ae:	46bd      	mov	sp, r7
 800e3b0:	bd80      	pop	{r7, pc}

0800e3b2 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800e3b2:	b580      	push	{r7, lr}
 800e3b4:	b096      	sub	sp, #88	; 0x58
 800e3b6:	af00      	add	r7, sp, #0
 800e3b8:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800e3ba:	687b      	ldr	r3, [r7, #4]
 800e3bc:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800e3c0:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800e3c4:	687b      	ldr	r3, [r7, #4]
 800e3c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e3ca:	2b22      	cmp	r3, #34	; 0x22
 800e3cc:	f040 8095 	bne.w	800e4fa <UART_RxISR_8BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800e3d0:	687b      	ldr	r3, [r7, #4]
 800e3d2:	681b      	ldr	r3, [r3, #0]
 800e3d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e3d6:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800e3da:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 800e3de:	b2d9      	uxtb	r1, r3
 800e3e0:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800e3e4:	b2da      	uxtb	r2, r3
 800e3e6:	687b      	ldr	r3, [r7, #4]
 800e3e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e3ea:	400a      	ands	r2, r1
 800e3ec:	b2d2      	uxtb	r2, r2
 800e3ee:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800e3f0:	687b      	ldr	r3, [r7, #4]
 800e3f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e3f4:	1c5a      	adds	r2, r3, #1
 800e3f6:	687b      	ldr	r3, [r7, #4]
 800e3f8:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800e3fa:	687b      	ldr	r3, [r7, #4]
 800e3fc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800e400:	b29b      	uxth	r3, r3
 800e402:	3b01      	subs	r3, #1
 800e404:	b29a      	uxth	r2, r3
 800e406:	687b      	ldr	r3, [r7, #4]
 800e408:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800e40c:	687b      	ldr	r3, [r7, #4]
 800e40e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800e412:	b29b      	uxth	r3, r3
 800e414:	2b00      	cmp	r3, #0
 800e416:	d178      	bne.n	800e50a <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800e418:	687b      	ldr	r3, [r7, #4]
 800e41a:	681b      	ldr	r3, [r3, #0]
 800e41c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e41e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e420:	e853 3f00 	ldrex	r3, [r3]
 800e424:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800e426:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e428:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800e42c:	653b      	str	r3, [r7, #80]	; 0x50
 800e42e:	687b      	ldr	r3, [r7, #4]
 800e430:	681b      	ldr	r3, [r3, #0]
 800e432:	461a      	mov	r2, r3
 800e434:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e436:	647b      	str	r3, [r7, #68]	; 0x44
 800e438:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e43a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800e43c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e43e:	e841 2300 	strex	r3, r2, [r1]
 800e442:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800e444:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e446:	2b00      	cmp	r3, #0
 800e448:	d1e6      	bne.n	800e418 <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e44a:	687b      	ldr	r3, [r7, #4]
 800e44c:	681b      	ldr	r3, [r3, #0]
 800e44e:	3308      	adds	r3, #8
 800e450:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e452:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e454:	e853 3f00 	ldrex	r3, [r3]
 800e458:	623b      	str	r3, [r7, #32]
   return(result);
 800e45a:	6a3b      	ldr	r3, [r7, #32]
 800e45c:	f023 0301 	bic.w	r3, r3, #1
 800e460:	64fb      	str	r3, [r7, #76]	; 0x4c
 800e462:	687b      	ldr	r3, [r7, #4]
 800e464:	681b      	ldr	r3, [r3, #0]
 800e466:	3308      	adds	r3, #8
 800e468:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800e46a:	633a      	str	r2, [r7, #48]	; 0x30
 800e46c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e46e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800e470:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e472:	e841 2300 	strex	r3, r2, [r1]
 800e476:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800e478:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e47a:	2b00      	cmp	r3, #0
 800e47c:	d1e5      	bne.n	800e44a <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800e47e:	687b      	ldr	r3, [r7, #4]
 800e480:	2220      	movs	r2, #32
 800e482:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800e486:	687b      	ldr	r3, [r7, #4]
 800e488:	2200      	movs	r2, #0
 800e48a:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e48c:	687b      	ldr	r3, [r7, #4]
 800e48e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e490:	2b01      	cmp	r3, #1
 800e492:	d12e      	bne.n	800e4f2 <UART_RxISR_8BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e494:	687b      	ldr	r3, [r7, #4]
 800e496:	2200      	movs	r2, #0
 800e498:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e49a:	687b      	ldr	r3, [r7, #4]
 800e49c:	681b      	ldr	r3, [r3, #0]
 800e49e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e4a0:	693b      	ldr	r3, [r7, #16]
 800e4a2:	e853 3f00 	ldrex	r3, [r3]
 800e4a6:	60fb      	str	r3, [r7, #12]
   return(result);
 800e4a8:	68fb      	ldr	r3, [r7, #12]
 800e4aa:	f023 0310 	bic.w	r3, r3, #16
 800e4ae:	64bb      	str	r3, [r7, #72]	; 0x48
 800e4b0:	687b      	ldr	r3, [r7, #4]
 800e4b2:	681b      	ldr	r3, [r3, #0]
 800e4b4:	461a      	mov	r2, r3
 800e4b6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e4b8:	61fb      	str	r3, [r7, #28]
 800e4ba:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e4bc:	69b9      	ldr	r1, [r7, #24]
 800e4be:	69fa      	ldr	r2, [r7, #28]
 800e4c0:	e841 2300 	strex	r3, r2, [r1]
 800e4c4:	617b      	str	r3, [r7, #20]
   return(result);
 800e4c6:	697b      	ldr	r3, [r7, #20]
 800e4c8:	2b00      	cmp	r3, #0
 800e4ca:	d1e6      	bne.n	800e49a <UART_RxISR_8BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800e4cc:	687b      	ldr	r3, [r7, #4]
 800e4ce:	681b      	ldr	r3, [r3, #0]
 800e4d0:	69db      	ldr	r3, [r3, #28]
 800e4d2:	f003 0310 	and.w	r3, r3, #16
 800e4d6:	2b10      	cmp	r3, #16
 800e4d8:	d103      	bne.n	800e4e2 <UART_RxISR_8BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800e4da:	687b      	ldr	r3, [r7, #4]
 800e4dc:	681b      	ldr	r3, [r3, #0]
 800e4de:	2210      	movs	r2, #16
 800e4e0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800e4e2:	687b      	ldr	r3, [r7, #4]
 800e4e4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800e4e8:	4619      	mov	r1, r3
 800e4ea:	6878      	ldr	r0, [r7, #4]
 800e4ec:	f7fe fe66 	bl	800d1bc <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800e4f0:	e00b      	b.n	800e50a <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 800e4f2:	6878      	ldr	r0, [r7, #4]
 800e4f4:	f7f4 fe24 	bl	8003140 <HAL_UART_RxCpltCallback>
}
 800e4f8:	e007      	b.n	800e50a <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800e4fa:	687b      	ldr	r3, [r7, #4]
 800e4fc:	681b      	ldr	r3, [r3, #0]
 800e4fe:	699a      	ldr	r2, [r3, #24]
 800e500:	687b      	ldr	r3, [r7, #4]
 800e502:	681b      	ldr	r3, [r3, #0]
 800e504:	f042 0208 	orr.w	r2, r2, #8
 800e508:	619a      	str	r2, [r3, #24]
}
 800e50a:	bf00      	nop
 800e50c:	3758      	adds	r7, #88	; 0x58
 800e50e:	46bd      	mov	sp, r7
 800e510:	bd80      	pop	{r7, pc}

0800e512 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800e512:	b580      	push	{r7, lr}
 800e514:	b096      	sub	sp, #88	; 0x58
 800e516:	af00      	add	r7, sp, #0
 800e518:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800e51a:	687b      	ldr	r3, [r7, #4]
 800e51c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800e520:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800e524:	687b      	ldr	r3, [r7, #4]
 800e526:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e52a:	2b22      	cmp	r3, #34	; 0x22
 800e52c:	f040 8095 	bne.w	800e65a <UART_RxISR_16BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800e530:	687b      	ldr	r3, [r7, #4]
 800e532:	681b      	ldr	r3, [r3, #0]
 800e534:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e536:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800e53a:	687b      	ldr	r3, [r7, #4]
 800e53c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e53e:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 800e540:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 800e544:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800e548:	4013      	ands	r3, r2
 800e54a:	b29a      	uxth	r2, r3
 800e54c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e54e:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800e550:	687b      	ldr	r3, [r7, #4]
 800e552:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e554:	1c9a      	adds	r2, r3, #2
 800e556:	687b      	ldr	r3, [r7, #4]
 800e558:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800e55a:	687b      	ldr	r3, [r7, #4]
 800e55c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800e560:	b29b      	uxth	r3, r3
 800e562:	3b01      	subs	r3, #1
 800e564:	b29a      	uxth	r2, r3
 800e566:	687b      	ldr	r3, [r7, #4]
 800e568:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800e56c:	687b      	ldr	r3, [r7, #4]
 800e56e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800e572:	b29b      	uxth	r3, r3
 800e574:	2b00      	cmp	r3, #0
 800e576:	d178      	bne.n	800e66a <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800e578:	687b      	ldr	r3, [r7, #4]
 800e57a:	681b      	ldr	r3, [r3, #0]
 800e57c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e57e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e580:	e853 3f00 	ldrex	r3, [r3]
 800e584:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800e586:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e588:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800e58c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800e58e:	687b      	ldr	r3, [r7, #4]
 800e590:	681b      	ldr	r3, [r3, #0]
 800e592:	461a      	mov	r2, r3
 800e594:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e596:	643b      	str	r3, [r7, #64]	; 0x40
 800e598:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e59a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800e59c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800e59e:	e841 2300 	strex	r3, r2, [r1]
 800e5a2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800e5a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e5a6:	2b00      	cmp	r3, #0
 800e5a8:	d1e6      	bne.n	800e578 <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e5aa:	687b      	ldr	r3, [r7, #4]
 800e5ac:	681b      	ldr	r3, [r3, #0]
 800e5ae:	3308      	adds	r3, #8
 800e5b0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e5b2:	6a3b      	ldr	r3, [r7, #32]
 800e5b4:	e853 3f00 	ldrex	r3, [r3]
 800e5b8:	61fb      	str	r3, [r7, #28]
   return(result);
 800e5ba:	69fb      	ldr	r3, [r7, #28]
 800e5bc:	f023 0301 	bic.w	r3, r3, #1
 800e5c0:	64bb      	str	r3, [r7, #72]	; 0x48
 800e5c2:	687b      	ldr	r3, [r7, #4]
 800e5c4:	681b      	ldr	r3, [r3, #0]
 800e5c6:	3308      	adds	r3, #8
 800e5c8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e5ca:	62fa      	str	r2, [r7, #44]	; 0x2c
 800e5cc:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e5ce:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800e5d0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e5d2:	e841 2300 	strex	r3, r2, [r1]
 800e5d6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800e5d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e5da:	2b00      	cmp	r3, #0
 800e5dc:	d1e5      	bne.n	800e5aa <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800e5de:	687b      	ldr	r3, [r7, #4]
 800e5e0:	2220      	movs	r2, #32
 800e5e2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800e5e6:	687b      	ldr	r3, [r7, #4]
 800e5e8:	2200      	movs	r2, #0
 800e5ea:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e5ec:	687b      	ldr	r3, [r7, #4]
 800e5ee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e5f0:	2b01      	cmp	r3, #1
 800e5f2:	d12e      	bne.n	800e652 <UART_RxISR_16BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e5f4:	687b      	ldr	r3, [r7, #4]
 800e5f6:	2200      	movs	r2, #0
 800e5f8:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e5fa:	687b      	ldr	r3, [r7, #4]
 800e5fc:	681b      	ldr	r3, [r3, #0]
 800e5fe:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e600:	68fb      	ldr	r3, [r7, #12]
 800e602:	e853 3f00 	ldrex	r3, [r3]
 800e606:	60bb      	str	r3, [r7, #8]
   return(result);
 800e608:	68bb      	ldr	r3, [r7, #8]
 800e60a:	f023 0310 	bic.w	r3, r3, #16
 800e60e:	647b      	str	r3, [r7, #68]	; 0x44
 800e610:	687b      	ldr	r3, [r7, #4]
 800e612:	681b      	ldr	r3, [r3, #0]
 800e614:	461a      	mov	r2, r3
 800e616:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e618:	61bb      	str	r3, [r7, #24]
 800e61a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e61c:	6979      	ldr	r1, [r7, #20]
 800e61e:	69ba      	ldr	r2, [r7, #24]
 800e620:	e841 2300 	strex	r3, r2, [r1]
 800e624:	613b      	str	r3, [r7, #16]
   return(result);
 800e626:	693b      	ldr	r3, [r7, #16]
 800e628:	2b00      	cmp	r3, #0
 800e62a:	d1e6      	bne.n	800e5fa <UART_RxISR_16BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800e62c:	687b      	ldr	r3, [r7, #4]
 800e62e:	681b      	ldr	r3, [r3, #0]
 800e630:	69db      	ldr	r3, [r3, #28]
 800e632:	f003 0310 	and.w	r3, r3, #16
 800e636:	2b10      	cmp	r3, #16
 800e638:	d103      	bne.n	800e642 <UART_RxISR_16BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800e63a:	687b      	ldr	r3, [r7, #4]
 800e63c:	681b      	ldr	r3, [r3, #0]
 800e63e:	2210      	movs	r2, #16
 800e640:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800e642:	687b      	ldr	r3, [r7, #4]
 800e644:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800e648:	4619      	mov	r1, r3
 800e64a:	6878      	ldr	r0, [r7, #4]
 800e64c:	f7fe fdb6 	bl	800d1bc <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800e650:	e00b      	b.n	800e66a <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 800e652:	6878      	ldr	r0, [r7, #4]
 800e654:	f7f4 fd74 	bl	8003140 <HAL_UART_RxCpltCallback>
}
 800e658:	e007      	b.n	800e66a <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800e65a:	687b      	ldr	r3, [r7, #4]
 800e65c:	681b      	ldr	r3, [r3, #0]
 800e65e:	699a      	ldr	r2, [r3, #24]
 800e660:	687b      	ldr	r3, [r7, #4]
 800e662:	681b      	ldr	r3, [r3, #0]
 800e664:	f042 0208 	orr.w	r2, r2, #8
 800e668:	619a      	str	r2, [r3, #24]
}
 800e66a:	bf00      	nop
 800e66c:	3758      	adds	r7, #88	; 0x58
 800e66e:	46bd      	mov	sp, r7
 800e670:	bd80      	pop	{r7, pc}
	...

0800e674 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800e674:	b580      	push	{r7, lr}
 800e676:	b0a6      	sub	sp, #152	; 0x98
 800e678:	af00      	add	r7, sp, #0
 800e67a:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800e67c:	687b      	ldr	r3, [r7, #4]
 800e67e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800e682:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800e686:	687b      	ldr	r3, [r7, #4]
 800e688:	681b      	ldr	r3, [r3, #0]
 800e68a:	69db      	ldr	r3, [r3, #28]
 800e68c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800e690:	687b      	ldr	r3, [r7, #4]
 800e692:	681b      	ldr	r3, [r3, #0]
 800e694:	681b      	ldr	r3, [r3, #0]
 800e696:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800e69a:	687b      	ldr	r3, [r7, #4]
 800e69c:	681b      	ldr	r3, [r3, #0]
 800e69e:	689b      	ldr	r3, [r3, #8]
 800e6a0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800e6a4:	687b      	ldr	r3, [r7, #4]
 800e6a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e6aa:	2b22      	cmp	r3, #34	; 0x22
 800e6ac:	f040 814d 	bne.w	800e94a <UART_RxISR_8BIT_FIFOEN+0x2d6>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800e6b0:	687b      	ldr	r3, [r7, #4]
 800e6b2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800e6b6:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800e6ba:	e0f4      	b.n	800e8a6 <UART_RxISR_8BIT_FIFOEN+0x232>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800e6bc:	687b      	ldr	r3, [r7, #4]
 800e6be:	681b      	ldr	r3, [r3, #0]
 800e6c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e6c2:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800e6c6:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 800e6ca:	b2d9      	uxtb	r1, r3
 800e6cc:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 800e6d0:	b2da      	uxtb	r2, r3
 800e6d2:	687b      	ldr	r3, [r7, #4]
 800e6d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e6d6:	400a      	ands	r2, r1
 800e6d8:	b2d2      	uxtb	r2, r2
 800e6da:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800e6dc:	687b      	ldr	r3, [r7, #4]
 800e6de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e6e0:	1c5a      	adds	r2, r3, #1
 800e6e2:	687b      	ldr	r3, [r7, #4]
 800e6e4:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800e6e6:	687b      	ldr	r3, [r7, #4]
 800e6e8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800e6ec:	b29b      	uxth	r3, r3
 800e6ee:	3b01      	subs	r3, #1
 800e6f0:	b29a      	uxth	r2, r3
 800e6f2:	687b      	ldr	r3, [r7, #4]
 800e6f4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800e6f8:	687b      	ldr	r3, [r7, #4]
 800e6fa:	681b      	ldr	r3, [r3, #0]
 800e6fc:	69db      	ldr	r3, [r3, #28]
 800e6fe:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800e702:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800e706:	f003 0307 	and.w	r3, r3, #7
 800e70a:	2b00      	cmp	r3, #0
 800e70c:	d053      	beq.n	800e7b6 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800e70e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800e712:	f003 0301 	and.w	r3, r3, #1
 800e716:	2b00      	cmp	r3, #0
 800e718:	d011      	beq.n	800e73e <UART_RxISR_8BIT_FIFOEN+0xca>
 800e71a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800e71e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e722:	2b00      	cmp	r3, #0
 800e724:	d00b      	beq.n	800e73e <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800e726:	687b      	ldr	r3, [r7, #4]
 800e728:	681b      	ldr	r3, [r3, #0]
 800e72a:	2201      	movs	r2, #1
 800e72c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800e72e:	687b      	ldr	r3, [r7, #4]
 800e730:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e734:	f043 0201 	orr.w	r2, r3, #1
 800e738:	687b      	ldr	r3, [r7, #4]
 800e73a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800e73e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800e742:	f003 0302 	and.w	r3, r3, #2
 800e746:	2b00      	cmp	r3, #0
 800e748:	d011      	beq.n	800e76e <UART_RxISR_8BIT_FIFOEN+0xfa>
 800e74a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800e74e:	f003 0301 	and.w	r3, r3, #1
 800e752:	2b00      	cmp	r3, #0
 800e754:	d00b      	beq.n	800e76e <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800e756:	687b      	ldr	r3, [r7, #4]
 800e758:	681b      	ldr	r3, [r3, #0]
 800e75a:	2202      	movs	r2, #2
 800e75c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800e75e:	687b      	ldr	r3, [r7, #4]
 800e760:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e764:	f043 0204 	orr.w	r2, r3, #4
 800e768:	687b      	ldr	r3, [r7, #4]
 800e76a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800e76e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800e772:	f003 0304 	and.w	r3, r3, #4
 800e776:	2b00      	cmp	r3, #0
 800e778:	d011      	beq.n	800e79e <UART_RxISR_8BIT_FIFOEN+0x12a>
 800e77a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800e77e:	f003 0301 	and.w	r3, r3, #1
 800e782:	2b00      	cmp	r3, #0
 800e784:	d00b      	beq.n	800e79e <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800e786:	687b      	ldr	r3, [r7, #4]
 800e788:	681b      	ldr	r3, [r3, #0]
 800e78a:	2204      	movs	r2, #4
 800e78c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800e78e:	687b      	ldr	r3, [r7, #4]
 800e790:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e794:	f043 0202 	orr.w	r2, r3, #2
 800e798:	687b      	ldr	r3, [r7, #4]
 800e79a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800e79e:	687b      	ldr	r3, [r7, #4]
 800e7a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e7a4:	2b00      	cmp	r3, #0
 800e7a6:	d006      	beq.n	800e7b6 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800e7a8:	6878      	ldr	r0, [r7, #4]
 800e7aa:	f7fe fcfd 	bl	800d1a8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e7ae:	687b      	ldr	r3, [r7, #4]
 800e7b0:	2200      	movs	r2, #0
 800e7b2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 800e7b6:	687b      	ldr	r3, [r7, #4]
 800e7b8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800e7bc:	b29b      	uxth	r3, r3
 800e7be:	2b00      	cmp	r3, #0
 800e7c0:	d171      	bne.n	800e8a6 <UART_RxISR_8BIT_FIFOEN+0x232>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800e7c2:	687b      	ldr	r3, [r7, #4]
 800e7c4:	681b      	ldr	r3, [r3, #0]
 800e7c6:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e7c8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e7ca:	e853 3f00 	ldrex	r3, [r3]
 800e7ce:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 800e7d0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e7d2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800e7d6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800e7da:	687b      	ldr	r3, [r7, #4]
 800e7dc:	681b      	ldr	r3, [r3, #0]
 800e7de:	461a      	mov	r2, r3
 800e7e0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800e7e4:	66bb      	str	r3, [r7, #104]	; 0x68
 800e7e6:	667a      	str	r2, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e7e8:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800e7ea:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800e7ec:	e841 2300 	strex	r3, r2, [r1]
 800e7f0:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 800e7f2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e7f4:	2b00      	cmp	r3, #0
 800e7f6:	d1e4      	bne.n	800e7c2 <UART_RxISR_8BIT_FIFOEN+0x14e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800e7f8:	687b      	ldr	r3, [r7, #4]
 800e7fa:	681b      	ldr	r3, [r3, #0]
 800e7fc:	3308      	adds	r3, #8
 800e7fe:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e800:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e802:	e853 3f00 	ldrex	r3, [r3]
 800e806:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800e808:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e80a:	4b56      	ldr	r3, [pc, #344]	; (800e964 <UART_RxISR_8BIT_FIFOEN+0x2f0>)
 800e80c:	4013      	ands	r3, r2
 800e80e:	67fb      	str	r3, [r7, #124]	; 0x7c
 800e810:	687b      	ldr	r3, [r7, #4]
 800e812:	681b      	ldr	r3, [r3, #0]
 800e814:	3308      	adds	r3, #8
 800e816:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800e818:	657a      	str	r2, [r7, #84]	; 0x54
 800e81a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e81c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800e81e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800e820:	e841 2300 	strex	r3, r2, [r1]
 800e824:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800e826:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e828:	2b00      	cmp	r3, #0
 800e82a:	d1e5      	bne.n	800e7f8 <UART_RxISR_8BIT_FIFOEN+0x184>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800e82c:	687b      	ldr	r3, [r7, #4]
 800e82e:	2220      	movs	r2, #32
 800e830:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800e834:	687b      	ldr	r3, [r7, #4]
 800e836:	2200      	movs	r2, #0
 800e838:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e83a:	687b      	ldr	r3, [r7, #4]
 800e83c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e83e:	2b01      	cmp	r3, #1
 800e840:	d12e      	bne.n	800e8a0 <UART_RxISR_8BIT_FIFOEN+0x22c>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e842:	687b      	ldr	r3, [r7, #4]
 800e844:	2200      	movs	r2, #0
 800e846:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e848:	687b      	ldr	r3, [r7, #4]
 800e84a:	681b      	ldr	r3, [r3, #0]
 800e84c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e84e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e850:	e853 3f00 	ldrex	r3, [r3]
 800e854:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800e856:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e858:	f023 0310 	bic.w	r3, r3, #16
 800e85c:	67bb      	str	r3, [r7, #120]	; 0x78
 800e85e:	687b      	ldr	r3, [r7, #4]
 800e860:	681b      	ldr	r3, [r3, #0]
 800e862:	461a      	mov	r2, r3
 800e864:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800e866:	643b      	str	r3, [r7, #64]	; 0x40
 800e868:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e86a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800e86c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800e86e:	e841 2300 	strex	r3, r2, [r1]
 800e872:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800e874:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e876:	2b00      	cmp	r3, #0
 800e878:	d1e6      	bne.n	800e848 <UART_RxISR_8BIT_FIFOEN+0x1d4>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800e87a:	687b      	ldr	r3, [r7, #4]
 800e87c:	681b      	ldr	r3, [r3, #0]
 800e87e:	69db      	ldr	r3, [r3, #28]
 800e880:	f003 0310 	and.w	r3, r3, #16
 800e884:	2b10      	cmp	r3, #16
 800e886:	d103      	bne.n	800e890 <UART_RxISR_8BIT_FIFOEN+0x21c>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800e888:	687b      	ldr	r3, [r7, #4]
 800e88a:	681b      	ldr	r3, [r3, #0]
 800e88c:	2210      	movs	r2, #16
 800e88e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800e890:	687b      	ldr	r3, [r7, #4]
 800e892:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800e896:	4619      	mov	r1, r3
 800e898:	6878      	ldr	r0, [r7, #4]
 800e89a:	f7fe fc8f 	bl	800d1bc <HAL_UARTEx_RxEventCallback>
 800e89e:	e002      	b.n	800e8a6 <UART_RxISR_8BIT_FIFOEN+0x232>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800e8a0:	6878      	ldr	r0, [r7, #4]
 800e8a2:	f7f4 fc4d 	bl	8003140 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800e8a6:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800e8aa:	2b00      	cmp	r3, #0
 800e8ac:	d006      	beq.n	800e8bc <UART_RxISR_8BIT_FIFOEN+0x248>
 800e8ae:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800e8b2:	f003 0320 	and.w	r3, r3, #32
 800e8b6:	2b00      	cmp	r3, #0
 800e8b8:	f47f af00 	bne.w	800e6bc <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800e8bc:	687b      	ldr	r3, [r7, #4]
 800e8be:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800e8c2:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800e8c6:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 800e8ca:	2b00      	cmp	r3, #0
 800e8cc:	d045      	beq.n	800e95a <UART_RxISR_8BIT_FIFOEN+0x2e6>
 800e8ce:	687b      	ldr	r3, [r7, #4]
 800e8d0:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800e8d4:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800e8d8:	429a      	cmp	r2, r3
 800e8da:	d23e      	bcs.n	800e95a <UART_RxISR_8BIT_FIFOEN+0x2e6>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800e8dc:	687b      	ldr	r3, [r7, #4]
 800e8de:	681b      	ldr	r3, [r3, #0]
 800e8e0:	3308      	adds	r3, #8
 800e8e2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e8e4:	6a3b      	ldr	r3, [r7, #32]
 800e8e6:	e853 3f00 	ldrex	r3, [r3]
 800e8ea:	61fb      	str	r3, [r7, #28]
   return(result);
 800e8ec:	69fb      	ldr	r3, [r7, #28]
 800e8ee:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800e8f2:	673b      	str	r3, [r7, #112]	; 0x70
 800e8f4:	687b      	ldr	r3, [r7, #4]
 800e8f6:	681b      	ldr	r3, [r3, #0]
 800e8f8:	3308      	adds	r3, #8
 800e8fa:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800e8fc:	62fa      	str	r2, [r7, #44]	; 0x2c
 800e8fe:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e900:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800e902:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e904:	e841 2300 	strex	r3, r2, [r1]
 800e908:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800e90a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e90c:	2b00      	cmp	r3, #0
 800e90e:	d1e5      	bne.n	800e8dc <UART_RxISR_8BIT_FIFOEN+0x268>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800e910:	687b      	ldr	r3, [r7, #4]
 800e912:	4a15      	ldr	r2, [pc, #84]	; (800e968 <UART_RxISR_8BIT_FIFOEN+0x2f4>)
 800e914:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800e916:	687b      	ldr	r3, [r7, #4]
 800e918:	681b      	ldr	r3, [r3, #0]
 800e91a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e91c:	68fb      	ldr	r3, [r7, #12]
 800e91e:	e853 3f00 	ldrex	r3, [r3]
 800e922:	60bb      	str	r3, [r7, #8]
   return(result);
 800e924:	68bb      	ldr	r3, [r7, #8]
 800e926:	f043 0320 	orr.w	r3, r3, #32
 800e92a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800e92c:	687b      	ldr	r3, [r7, #4]
 800e92e:	681b      	ldr	r3, [r3, #0]
 800e930:	461a      	mov	r2, r3
 800e932:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e934:	61bb      	str	r3, [r7, #24]
 800e936:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e938:	6979      	ldr	r1, [r7, #20]
 800e93a:	69ba      	ldr	r2, [r7, #24]
 800e93c:	e841 2300 	strex	r3, r2, [r1]
 800e940:	613b      	str	r3, [r7, #16]
   return(result);
 800e942:	693b      	ldr	r3, [r7, #16]
 800e944:	2b00      	cmp	r3, #0
 800e946:	d1e6      	bne.n	800e916 <UART_RxISR_8BIT_FIFOEN+0x2a2>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800e948:	e007      	b.n	800e95a <UART_RxISR_8BIT_FIFOEN+0x2e6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800e94a:	687b      	ldr	r3, [r7, #4]
 800e94c:	681b      	ldr	r3, [r3, #0]
 800e94e:	699a      	ldr	r2, [r3, #24]
 800e950:	687b      	ldr	r3, [r7, #4]
 800e952:	681b      	ldr	r3, [r3, #0]
 800e954:	f042 0208 	orr.w	r2, r2, #8
 800e958:	619a      	str	r2, [r3, #24]
}
 800e95a:	bf00      	nop
 800e95c:	3798      	adds	r7, #152	; 0x98
 800e95e:	46bd      	mov	sp, r7
 800e960:	bd80      	pop	{r7, pc}
 800e962:	bf00      	nop
 800e964:	effffffe 	.word	0xeffffffe
 800e968:	0800e3b3 	.word	0x0800e3b3

0800e96c <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800e96c:	b580      	push	{r7, lr}
 800e96e:	b0a8      	sub	sp, #160	; 0xa0
 800e970:	af00      	add	r7, sp, #0
 800e972:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800e974:	687b      	ldr	r3, [r7, #4]
 800e976:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800e97a:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800e97e:	687b      	ldr	r3, [r7, #4]
 800e980:	681b      	ldr	r3, [r3, #0]
 800e982:	69db      	ldr	r3, [r3, #28]
 800e984:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800e988:	687b      	ldr	r3, [r7, #4]
 800e98a:	681b      	ldr	r3, [r3, #0]
 800e98c:	681b      	ldr	r3, [r3, #0]
 800e98e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800e992:	687b      	ldr	r3, [r7, #4]
 800e994:	681b      	ldr	r3, [r3, #0]
 800e996:	689b      	ldr	r3, [r3, #8]
 800e998:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800e99c:	687b      	ldr	r3, [r7, #4]
 800e99e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e9a2:	2b22      	cmp	r3, #34	; 0x22
 800e9a4:	f040 8151 	bne.w	800ec4a <UART_RxISR_16BIT_FIFOEN+0x2de>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800e9a8:	687b      	ldr	r3, [r7, #4]
 800e9aa:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800e9ae:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800e9b2:	e0f8      	b.n	800eba6 <UART_RxISR_16BIT_FIFOEN+0x23a>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800e9b4:	687b      	ldr	r3, [r7, #4]
 800e9b6:	681b      	ldr	r3, [r3, #0]
 800e9b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e9ba:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800e9be:	687b      	ldr	r3, [r7, #4]
 800e9c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e9c2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      *tmp = (uint16_t)(uhdata & uhMask);
 800e9c6:	f8b7 208c 	ldrh.w	r2, [r7, #140]	; 0x8c
 800e9ca:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 800e9ce:	4013      	ands	r3, r2
 800e9d0:	b29a      	uxth	r2, r3
 800e9d2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800e9d6:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800e9d8:	687b      	ldr	r3, [r7, #4]
 800e9da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e9dc:	1c9a      	adds	r2, r3, #2
 800e9de:	687b      	ldr	r3, [r7, #4]
 800e9e0:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800e9e2:	687b      	ldr	r3, [r7, #4]
 800e9e4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800e9e8:	b29b      	uxth	r3, r3
 800e9ea:	3b01      	subs	r3, #1
 800e9ec:	b29a      	uxth	r2, r3
 800e9ee:	687b      	ldr	r3, [r7, #4]
 800e9f0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800e9f4:	687b      	ldr	r3, [r7, #4]
 800e9f6:	681b      	ldr	r3, [r3, #0]
 800e9f8:	69db      	ldr	r3, [r3, #28]
 800e9fa:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800e9fe:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800ea02:	f003 0307 	and.w	r3, r3, #7
 800ea06:	2b00      	cmp	r3, #0
 800ea08:	d053      	beq.n	800eab2 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800ea0a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800ea0e:	f003 0301 	and.w	r3, r3, #1
 800ea12:	2b00      	cmp	r3, #0
 800ea14:	d011      	beq.n	800ea3a <UART_RxISR_16BIT_FIFOEN+0xce>
 800ea16:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800ea1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ea1e:	2b00      	cmp	r3, #0
 800ea20:	d00b      	beq.n	800ea3a <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800ea22:	687b      	ldr	r3, [r7, #4]
 800ea24:	681b      	ldr	r3, [r3, #0]
 800ea26:	2201      	movs	r2, #1
 800ea28:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800ea2a:	687b      	ldr	r3, [r7, #4]
 800ea2c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ea30:	f043 0201 	orr.w	r2, r3, #1
 800ea34:	687b      	ldr	r3, [r7, #4]
 800ea36:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800ea3a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800ea3e:	f003 0302 	and.w	r3, r3, #2
 800ea42:	2b00      	cmp	r3, #0
 800ea44:	d011      	beq.n	800ea6a <UART_RxISR_16BIT_FIFOEN+0xfe>
 800ea46:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800ea4a:	f003 0301 	and.w	r3, r3, #1
 800ea4e:	2b00      	cmp	r3, #0
 800ea50:	d00b      	beq.n	800ea6a <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800ea52:	687b      	ldr	r3, [r7, #4]
 800ea54:	681b      	ldr	r3, [r3, #0]
 800ea56:	2202      	movs	r2, #2
 800ea58:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800ea5a:	687b      	ldr	r3, [r7, #4]
 800ea5c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ea60:	f043 0204 	orr.w	r2, r3, #4
 800ea64:	687b      	ldr	r3, [r7, #4]
 800ea66:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800ea6a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800ea6e:	f003 0304 	and.w	r3, r3, #4
 800ea72:	2b00      	cmp	r3, #0
 800ea74:	d011      	beq.n	800ea9a <UART_RxISR_16BIT_FIFOEN+0x12e>
 800ea76:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800ea7a:	f003 0301 	and.w	r3, r3, #1
 800ea7e:	2b00      	cmp	r3, #0
 800ea80:	d00b      	beq.n	800ea9a <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800ea82:	687b      	ldr	r3, [r7, #4]
 800ea84:	681b      	ldr	r3, [r3, #0]
 800ea86:	2204      	movs	r2, #4
 800ea88:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800ea8a:	687b      	ldr	r3, [r7, #4]
 800ea8c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ea90:	f043 0202 	orr.w	r2, r3, #2
 800ea94:	687b      	ldr	r3, [r7, #4]
 800ea96:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800ea9a:	687b      	ldr	r3, [r7, #4]
 800ea9c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800eaa0:	2b00      	cmp	r3, #0
 800eaa2:	d006      	beq.n	800eab2 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800eaa4:	6878      	ldr	r0, [r7, #4]
 800eaa6:	f7fe fb7f 	bl	800d1a8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800eaaa:	687b      	ldr	r3, [r7, #4]
 800eaac:	2200      	movs	r2, #0
 800eaae:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 800eab2:	687b      	ldr	r3, [r7, #4]
 800eab4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800eab8:	b29b      	uxth	r3, r3
 800eaba:	2b00      	cmp	r3, #0
 800eabc:	d173      	bne.n	800eba6 <UART_RxISR_16BIT_FIFOEN+0x23a>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800eabe:	687b      	ldr	r3, [r7, #4]
 800eac0:	681b      	ldr	r3, [r3, #0]
 800eac2:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eac4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800eac6:	e853 3f00 	ldrex	r3, [r3]
 800eaca:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800eacc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800eace:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800ead2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800ead6:	687b      	ldr	r3, [r7, #4]
 800ead8:	681b      	ldr	r3, [r3, #0]
 800eada:	461a      	mov	r2, r3
 800eadc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800eae0:	66fb      	str	r3, [r7, #108]	; 0x6c
 800eae2:	66ba      	str	r2, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eae4:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800eae6:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800eae8:	e841 2300 	strex	r3, r2, [r1]
 800eaec:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800eaee:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800eaf0:	2b00      	cmp	r3, #0
 800eaf2:	d1e4      	bne.n	800eabe <UART_RxISR_16BIT_FIFOEN+0x152>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800eaf4:	687b      	ldr	r3, [r7, #4]
 800eaf6:	681b      	ldr	r3, [r3, #0]
 800eaf8:	3308      	adds	r3, #8
 800eafa:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eafc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800eafe:	e853 3f00 	ldrex	r3, [r3]
 800eb02:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800eb04:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800eb06:	4b57      	ldr	r3, [pc, #348]	; (800ec64 <UART_RxISR_16BIT_FIFOEN+0x2f8>)
 800eb08:	4013      	ands	r3, r2
 800eb0a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800eb0e:	687b      	ldr	r3, [r7, #4]
 800eb10:	681b      	ldr	r3, [r3, #0]
 800eb12:	3308      	adds	r3, #8
 800eb14:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800eb18:	65ba      	str	r2, [r7, #88]	; 0x58
 800eb1a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eb1c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800eb1e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800eb20:	e841 2300 	strex	r3, r2, [r1]
 800eb24:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800eb26:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800eb28:	2b00      	cmp	r3, #0
 800eb2a:	d1e3      	bne.n	800eaf4 <UART_RxISR_16BIT_FIFOEN+0x188>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800eb2c:	687b      	ldr	r3, [r7, #4]
 800eb2e:	2220      	movs	r2, #32
 800eb30:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800eb34:	687b      	ldr	r3, [r7, #4]
 800eb36:	2200      	movs	r2, #0
 800eb38:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800eb3a:	687b      	ldr	r3, [r7, #4]
 800eb3c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800eb3e:	2b01      	cmp	r3, #1
 800eb40:	d12e      	bne.n	800eba0 <UART_RxISR_16BIT_FIFOEN+0x234>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800eb42:	687b      	ldr	r3, [r7, #4]
 800eb44:	2200      	movs	r2, #0
 800eb46:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800eb48:	687b      	ldr	r3, [r7, #4]
 800eb4a:	681b      	ldr	r3, [r3, #0]
 800eb4c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eb4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eb50:	e853 3f00 	ldrex	r3, [r3]
 800eb54:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800eb56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800eb58:	f023 0310 	bic.w	r3, r3, #16
 800eb5c:	67fb      	str	r3, [r7, #124]	; 0x7c
 800eb5e:	687b      	ldr	r3, [r7, #4]
 800eb60:	681b      	ldr	r3, [r3, #0]
 800eb62:	461a      	mov	r2, r3
 800eb64:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800eb66:	647b      	str	r3, [r7, #68]	; 0x44
 800eb68:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eb6a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800eb6c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800eb6e:	e841 2300 	strex	r3, r2, [r1]
 800eb72:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800eb74:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800eb76:	2b00      	cmp	r3, #0
 800eb78:	d1e6      	bne.n	800eb48 <UART_RxISR_16BIT_FIFOEN+0x1dc>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800eb7a:	687b      	ldr	r3, [r7, #4]
 800eb7c:	681b      	ldr	r3, [r3, #0]
 800eb7e:	69db      	ldr	r3, [r3, #28]
 800eb80:	f003 0310 	and.w	r3, r3, #16
 800eb84:	2b10      	cmp	r3, #16
 800eb86:	d103      	bne.n	800eb90 <UART_RxISR_16BIT_FIFOEN+0x224>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800eb88:	687b      	ldr	r3, [r7, #4]
 800eb8a:	681b      	ldr	r3, [r3, #0]
 800eb8c:	2210      	movs	r2, #16
 800eb8e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800eb90:	687b      	ldr	r3, [r7, #4]
 800eb92:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800eb96:	4619      	mov	r1, r3
 800eb98:	6878      	ldr	r0, [r7, #4]
 800eb9a:	f7fe fb0f 	bl	800d1bc <HAL_UARTEx_RxEventCallback>
 800eb9e:	e002      	b.n	800eba6 <UART_RxISR_16BIT_FIFOEN+0x23a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800eba0:	6878      	ldr	r0, [r7, #4]
 800eba2:	f7f4 facd 	bl	8003140 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800eba6:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 800ebaa:	2b00      	cmp	r3, #0
 800ebac:	d006      	beq.n	800ebbc <UART_RxISR_16BIT_FIFOEN+0x250>
 800ebae:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800ebb2:	f003 0320 	and.w	r3, r3, #32
 800ebb6:	2b00      	cmp	r3, #0
 800ebb8:	f47f aefc 	bne.w	800e9b4 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800ebbc:	687b      	ldr	r3, [r7, #4]
 800ebbe:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800ebc2:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800ebc6:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 800ebca:	2b00      	cmp	r3, #0
 800ebcc:	d045      	beq.n	800ec5a <UART_RxISR_16BIT_FIFOEN+0x2ee>
 800ebce:	687b      	ldr	r3, [r7, #4]
 800ebd0:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800ebd4:	f8b7 207a 	ldrh.w	r2, [r7, #122]	; 0x7a
 800ebd8:	429a      	cmp	r2, r3
 800ebda:	d23e      	bcs.n	800ec5a <UART_RxISR_16BIT_FIFOEN+0x2ee>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800ebdc:	687b      	ldr	r3, [r7, #4]
 800ebde:	681b      	ldr	r3, [r3, #0]
 800ebe0:	3308      	adds	r3, #8
 800ebe2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ebe4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ebe6:	e853 3f00 	ldrex	r3, [r3]
 800ebea:	623b      	str	r3, [r7, #32]
   return(result);
 800ebec:	6a3b      	ldr	r3, [r7, #32]
 800ebee:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800ebf2:	677b      	str	r3, [r7, #116]	; 0x74
 800ebf4:	687b      	ldr	r3, [r7, #4]
 800ebf6:	681b      	ldr	r3, [r3, #0]
 800ebf8:	3308      	adds	r3, #8
 800ebfa:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800ebfc:	633a      	str	r2, [r7, #48]	; 0x30
 800ebfe:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ec00:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ec02:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ec04:	e841 2300 	strex	r3, r2, [r1]
 800ec08:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800ec0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ec0c:	2b00      	cmp	r3, #0
 800ec0e:	d1e5      	bne.n	800ebdc <UART_RxISR_16BIT_FIFOEN+0x270>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800ec10:	687b      	ldr	r3, [r7, #4]
 800ec12:	4a15      	ldr	r2, [pc, #84]	; (800ec68 <UART_RxISR_16BIT_FIFOEN+0x2fc>)
 800ec14:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800ec16:	687b      	ldr	r3, [r7, #4]
 800ec18:	681b      	ldr	r3, [r3, #0]
 800ec1a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ec1c:	693b      	ldr	r3, [r7, #16]
 800ec1e:	e853 3f00 	ldrex	r3, [r3]
 800ec22:	60fb      	str	r3, [r7, #12]
   return(result);
 800ec24:	68fb      	ldr	r3, [r7, #12]
 800ec26:	f043 0320 	orr.w	r3, r3, #32
 800ec2a:	673b      	str	r3, [r7, #112]	; 0x70
 800ec2c:	687b      	ldr	r3, [r7, #4]
 800ec2e:	681b      	ldr	r3, [r3, #0]
 800ec30:	461a      	mov	r2, r3
 800ec32:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800ec34:	61fb      	str	r3, [r7, #28]
 800ec36:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ec38:	69b9      	ldr	r1, [r7, #24]
 800ec3a:	69fa      	ldr	r2, [r7, #28]
 800ec3c:	e841 2300 	strex	r3, r2, [r1]
 800ec40:	617b      	str	r3, [r7, #20]
   return(result);
 800ec42:	697b      	ldr	r3, [r7, #20]
 800ec44:	2b00      	cmp	r3, #0
 800ec46:	d1e6      	bne.n	800ec16 <UART_RxISR_16BIT_FIFOEN+0x2aa>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800ec48:	e007      	b.n	800ec5a <UART_RxISR_16BIT_FIFOEN+0x2ee>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800ec4a:	687b      	ldr	r3, [r7, #4]
 800ec4c:	681b      	ldr	r3, [r3, #0]
 800ec4e:	699a      	ldr	r2, [r3, #24]
 800ec50:	687b      	ldr	r3, [r7, #4]
 800ec52:	681b      	ldr	r3, [r3, #0]
 800ec54:	f042 0208 	orr.w	r2, r2, #8
 800ec58:	619a      	str	r2, [r3, #24]
}
 800ec5a:	bf00      	nop
 800ec5c:	37a0      	adds	r7, #160	; 0xa0
 800ec5e:	46bd      	mov	sp, r7
 800ec60:	bd80      	pop	{r7, pc}
 800ec62:	bf00      	nop
 800ec64:	effffffe 	.word	0xeffffffe
 800ec68:	0800e513 	.word	0x0800e513

0800ec6c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800ec6c:	b480      	push	{r7}
 800ec6e:	b083      	sub	sp, #12
 800ec70:	af00      	add	r7, sp, #0
 800ec72:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800ec74:	bf00      	nop
 800ec76:	370c      	adds	r7, #12
 800ec78:	46bd      	mov	sp, r7
 800ec7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec7e:	4770      	bx	lr

0800ec80 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800ec80:	b480      	push	{r7}
 800ec82:	b083      	sub	sp, #12
 800ec84:	af00      	add	r7, sp, #0
 800ec86:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800ec88:	bf00      	nop
 800ec8a:	370c      	adds	r7, #12
 800ec8c:	46bd      	mov	sp, r7
 800ec8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec92:	4770      	bx	lr

0800ec94 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800ec94:	b480      	push	{r7}
 800ec96:	b083      	sub	sp, #12
 800ec98:	af00      	add	r7, sp, #0
 800ec9a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800ec9c:	bf00      	nop
 800ec9e:	370c      	adds	r7, #12
 800eca0:	46bd      	mov	sp, r7
 800eca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eca6:	4770      	bx	lr

0800eca8 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800eca8:	b480      	push	{r7}
 800ecaa:	b085      	sub	sp, #20
 800ecac:	af00      	add	r7, sp, #0
 800ecae:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ecb0:	687b      	ldr	r3, [r7, #4]
 800ecb2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800ecb6:	2b01      	cmp	r3, #1
 800ecb8:	d101      	bne.n	800ecbe <HAL_UARTEx_DisableFifoMode+0x16>
 800ecba:	2302      	movs	r3, #2
 800ecbc:	e027      	b.n	800ed0e <HAL_UARTEx_DisableFifoMode+0x66>
 800ecbe:	687b      	ldr	r3, [r7, #4]
 800ecc0:	2201      	movs	r2, #1
 800ecc2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800ecc6:	687b      	ldr	r3, [r7, #4]
 800ecc8:	2224      	movs	r2, #36	; 0x24
 800ecca:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ecce:	687b      	ldr	r3, [r7, #4]
 800ecd0:	681b      	ldr	r3, [r3, #0]
 800ecd2:	681b      	ldr	r3, [r3, #0]
 800ecd4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ecd6:	687b      	ldr	r3, [r7, #4]
 800ecd8:	681b      	ldr	r3, [r3, #0]
 800ecda:	681a      	ldr	r2, [r3, #0]
 800ecdc:	687b      	ldr	r3, [r7, #4]
 800ecde:	681b      	ldr	r3, [r3, #0]
 800ece0:	f022 0201 	bic.w	r2, r2, #1
 800ece4:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800ece6:	68fb      	ldr	r3, [r7, #12]
 800ece8:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800ecec:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800ecee:	687b      	ldr	r3, [r7, #4]
 800ecf0:	2200      	movs	r2, #0
 800ecf2:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ecf4:	687b      	ldr	r3, [r7, #4]
 800ecf6:	681b      	ldr	r3, [r3, #0]
 800ecf8:	68fa      	ldr	r2, [r7, #12]
 800ecfa:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ecfc:	687b      	ldr	r3, [r7, #4]
 800ecfe:	2220      	movs	r2, #32
 800ed00:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ed04:	687b      	ldr	r3, [r7, #4]
 800ed06:	2200      	movs	r2, #0
 800ed08:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800ed0c:	2300      	movs	r3, #0
}
 800ed0e:	4618      	mov	r0, r3
 800ed10:	3714      	adds	r7, #20
 800ed12:	46bd      	mov	sp, r7
 800ed14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed18:	4770      	bx	lr

0800ed1a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800ed1a:	b580      	push	{r7, lr}
 800ed1c:	b084      	sub	sp, #16
 800ed1e:	af00      	add	r7, sp, #0
 800ed20:	6078      	str	r0, [r7, #4]
 800ed22:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ed24:	687b      	ldr	r3, [r7, #4]
 800ed26:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800ed2a:	2b01      	cmp	r3, #1
 800ed2c:	d101      	bne.n	800ed32 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800ed2e:	2302      	movs	r3, #2
 800ed30:	e02d      	b.n	800ed8e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800ed32:	687b      	ldr	r3, [r7, #4]
 800ed34:	2201      	movs	r2, #1
 800ed36:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800ed3a:	687b      	ldr	r3, [r7, #4]
 800ed3c:	2224      	movs	r2, #36	; 0x24
 800ed3e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ed42:	687b      	ldr	r3, [r7, #4]
 800ed44:	681b      	ldr	r3, [r3, #0]
 800ed46:	681b      	ldr	r3, [r3, #0]
 800ed48:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ed4a:	687b      	ldr	r3, [r7, #4]
 800ed4c:	681b      	ldr	r3, [r3, #0]
 800ed4e:	681a      	ldr	r2, [r3, #0]
 800ed50:	687b      	ldr	r3, [r7, #4]
 800ed52:	681b      	ldr	r3, [r3, #0]
 800ed54:	f022 0201 	bic.w	r2, r2, #1
 800ed58:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800ed5a:	687b      	ldr	r3, [r7, #4]
 800ed5c:	681b      	ldr	r3, [r3, #0]
 800ed5e:	689b      	ldr	r3, [r3, #8]
 800ed60:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800ed64:	687b      	ldr	r3, [r7, #4]
 800ed66:	681b      	ldr	r3, [r3, #0]
 800ed68:	683a      	ldr	r2, [r7, #0]
 800ed6a:	430a      	orrs	r2, r1
 800ed6c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800ed6e:	6878      	ldr	r0, [r7, #4]
 800ed70:	f000 f850 	bl	800ee14 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ed74:	687b      	ldr	r3, [r7, #4]
 800ed76:	681b      	ldr	r3, [r3, #0]
 800ed78:	68fa      	ldr	r2, [r7, #12]
 800ed7a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ed7c:	687b      	ldr	r3, [r7, #4]
 800ed7e:	2220      	movs	r2, #32
 800ed80:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ed84:	687b      	ldr	r3, [r7, #4]
 800ed86:	2200      	movs	r2, #0
 800ed88:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800ed8c:	2300      	movs	r3, #0
}
 800ed8e:	4618      	mov	r0, r3
 800ed90:	3710      	adds	r7, #16
 800ed92:	46bd      	mov	sp, r7
 800ed94:	bd80      	pop	{r7, pc}

0800ed96 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800ed96:	b580      	push	{r7, lr}
 800ed98:	b084      	sub	sp, #16
 800ed9a:	af00      	add	r7, sp, #0
 800ed9c:	6078      	str	r0, [r7, #4]
 800ed9e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800eda0:	687b      	ldr	r3, [r7, #4]
 800eda2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800eda6:	2b01      	cmp	r3, #1
 800eda8:	d101      	bne.n	800edae <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800edaa:	2302      	movs	r3, #2
 800edac:	e02d      	b.n	800ee0a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800edae:	687b      	ldr	r3, [r7, #4]
 800edb0:	2201      	movs	r2, #1
 800edb2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800edb6:	687b      	ldr	r3, [r7, #4]
 800edb8:	2224      	movs	r2, #36	; 0x24
 800edba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800edbe:	687b      	ldr	r3, [r7, #4]
 800edc0:	681b      	ldr	r3, [r3, #0]
 800edc2:	681b      	ldr	r3, [r3, #0]
 800edc4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800edc6:	687b      	ldr	r3, [r7, #4]
 800edc8:	681b      	ldr	r3, [r3, #0]
 800edca:	681a      	ldr	r2, [r3, #0]
 800edcc:	687b      	ldr	r3, [r7, #4]
 800edce:	681b      	ldr	r3, [r3, #0]
 800edd0:	f022 0201 	bic.w	r2, r2, #1
 800edd4:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800edd6:	687b      	ldr	r3, [r7, #4]
 800edd8:	681b      	ldr	r3, [r3, #0]
 800edda:	689b      	ldr	r3, [r3, #8]
 800eddc:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800ede0:	687b      	ldr	r3, [r7, #4]
 800ede2:	681b      	ldr	r3, [r3, #0]
 800ede4:	683a      	ldr	r2, [r7, #0]
 800ede6:	430a      	orrs	r2, r1
 800ede8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800edea:	6878      	ldr	r0, [r7, #4]
 800edec:	f000 f812 	bl	800ee14 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800edf0:	687b      	ldr	r3, [r7, #4]
 800edf2:	681b      	ldr	r3, [r3, #0]
 800edf4:	68fa      	ldr	r2, [r7, #12]
 800edf6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800edf8:	687b      	ldr	r3, [r7, #4]
 800edfa:	2220      	movs	r2, #32
 800edfc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ee00:	687b      	ldr	r3, [r7, #4]
 800ee02:	2200      	movs	r2, #0
 800ee04:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800ee08:	2300      	movs	r3, #0
}
 800ee0a:	4618      	mov	r0, r3
 800ee0c:	3710      	adds	r7, #16
 800ee0e:	46bd      	mov	sp, r7
 800ee10:	bd80      	pop	{r7, pc}
	...

0800ee14 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800ee14:	b480      	push	{r7}
 800ee16:	b085      	sub	sp, #20
 800ee18:	af00      	add	r7, sp, #0
 800ee1a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800ee1c:	687b      	ldr	r3, [r7, #4]
 800ee1e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ee20:	2b00      	cmp	r3, #0
 800ee22:	d108      	bne.n	800ee36 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800ee24:	687b      	ldr	r3, [r7, #4]
 800ee26:	2201      	movs	r2, #1
 800ee28:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800ee2c:	687b      	ldr	r3, [r7, #4]
 800ee2e:	2201      	movs	r2, #1
 800ee30:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800ee34:	e031      	b.n	800ee9a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800ee36:	2310      	movs	r3, #16
 800ee38:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800ee3a:	2310      	movs	r3, #16
 800ee3c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800ee3e:	687b      	ldr	r3, [r7, #4]
 800ee40:	681b      	ldr	r3, [r3, #0]
 800ee42:	689b      	ldr	r3, [r3, #8]
 800ee44:	0e5b      	lsrs	r3, r3, #25
 800ee46:	b2db      	uxtb	r3, r3
 800ee48:	f003 0307 	and.w	r3, r3, #7
 800ee4c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800ee4e:	687b      	ldr	r3, [r7, #4]
 800ee50:	681b      	ldr	r3, [r3, #0]
 800ee52:	689b      	ldr	r3, [r3, #8]
 800ee54:	0f5b      	lsrs	r3, r3, #29
 800ee56:	b2db      	uxtb	r3, r3
 800ee58:	f003 0307 	and.w	r3, r3, #7
 800ee5c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800ee5e:	7bbb      	ldrb	r3, [r7, #14]
 800ee60:	7b3a      	ldrb	r2, [r7, #12]
 800ee62:	4911      	ldr	r1, [pc, #68]	; (800eea8 <UARTEx_SetNbDataToProcess+0x94>)
 800ee64:	5c8a      	ldrb	r2, [r1, r2]
 800ee66:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800ee6a:	7b3a      	ldrb	r2, [r7, #12]
 800ee6c:	490f      	ldr	r1, [pc, #60]	; (800eeac <UARTEx_SetNbDataToProcess+0x98>)
 800ee6e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800ee70:	fb93 f3f2 	sdiv	r3, r3, r2
 800ee74:	b29a      	uxth	r2, r3
 800ee76:	687b      	ldr	r3, [r7, #4]
 800ee78:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800ee7c:	7bfb      	ldrb	r3, [r7, #15]
 800ee7e:	7b7a      	ldrb	r2, [r7, #13]
 800ee80:	4909      	ldr	r1, [pc, #36]	; (800eea8 <UARTEx_SetNbDataToProcess+0x94>)
 800ee82:	5c8a      	ldrb	r2, [r1, r2]
 800ee84:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800ee88:	7b7a      	ldrb	r2, [r7, #13]
 800ee8a:	4908      	ldr	r1, [pc, #32]	; (800eeac <UARTEx_SetNbDataToProcess+0x98>)
 800ee8c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800ee8e:	fb93 f3f2 	sdiv	r3, r3, r2
 800ee92:	b29a      	uxth	r2, r3
 800ee94:	687b      	ldr	r3, [r7, #4]
 800ee96:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800ee9a:	bf00      	nop
 800ee9c:	3714      	adds	r7, #20
 800ee9e:	46bd      	mov	sp, r7
 800eea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eea4:	4770      	bx	lr
 800eea6:	bf00      	nop
 800eea8:	080125e0 	.word	0x080125e0
 800eeac:	080125e8 	.word	0x080125e8

0800eeb0 <__errno>:
 800eeb0:	4b01      	ldr	r3, [pc, #4]	; (800eeb8 <__errno+0x8>)
 800eeb2:	6818      	ldr	r0, [r3, #0]
 800eeb4:	4770      	bx	lr
 800eeb6:	bf00      	nop
 800eeb8:	240000b0 	.word	0x240000b0

0800eebc <__libc_init_array>:
 800eebc:	b570      	push	{r4, r5, r6, lr}
 800eebe:	4d0d      	ldr	r5, [pc, #52]	; (800eef4 <__libc_init_array+0x38>)
 800eec0:	4c0d      	ldr	r4, [pc, #52]	; (800eef8 <__libc_init_array+0x3c>)
 800eec2:	1b64      	subs	r4, r4, r5
 800eec4:	10a4      	asrs	r4, r4, #2
 800eec6:	2600      	movs	r6, #0
 800eec8:	42a6      	cmp	r6, r4
 800eeca:	d109      	bne.n	800eee0 <__libc_init_array+0x24>
 800eecc:	4d0b      	ldr	r5, [pc, #44]	; (800eefc <__libc_init_array+0x40>)
 800eece:	4c0c      	ldr	r4, [pc, #48]	; (800ef00 <__libc_init_array+0x44>)
 800eed0:	f003 fae8 	bl	80124a4 <_init>
 800eed4:	1b64      	subs	r4, r4, r5
 800eed6:	10a4      	asrs	r4, r4, #2
 800eed8:	2600      	movs	r6, #0
 800eeda:	42a6      	cmp	r6, r4
 800eedc:	d105      	bne.n	800eeea <__libc_init_array+0x2e>
 800eede:	bd70      	pop	{r4, r5, r6, pc}
 800eee0:	f855 3b04 	ldr.w	r3, [r5], #4
 800eee4:	4798      	blx	r3
 800eee6:	3601      	adds	r6, #1
 800eee8:	e7ee      	b.n	800eec8 <__libc_init_array+0xc>
 800eeea:	f855 3b04 	ldr.w	r3, [r5], #4
 800eeee:	4798      	blx	r3
 800eef0:	3601      	adds	r6, #1
 800eef2:	e7f2      	b.n	800eeda <__libc_init_array+0x1e>
 800eef4:	080142e0 	.word	0x080142e0
 800eef8:	080142e0 	.word	0x080142e0
 800eefc:	080142e0 	.word	0x080142e0
 800ef00:	080142e4 	.word	0x080142e4

0800ef04 <memcpy>:
 800ef04:	440a      	add	r2, r1
 800ef06:	4291      	cmp	r1, r2
 800ef08:	f100 33ff 	add.w	r3, r0, #4294967295
 800ef0c:	d100      	bne.n	800ef10 <memcpy+0xc>
 800ef0e:	4770      	bx	lr
 800ef10:	b510      	push	{r4, lr}
 800ef12:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ef16:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ef1a:	4291      	cmp	r1, r2
 800ef1c:	d1f9      	bne.n	800ef12 <memcpy+0xe>
 800ef1e:	bd10      	pop	{r4, pc}

0800ef20 <memset>:
 800ef20:	4402      	add	r2, r0
 800ef22:	4603      	mov	r3, r0
 800ef24:	4293      	cmp	r3, r2
 800ef26:	d100      	bne.n	800ef2a <memset+0xa>
 800ef28:	4770      	bx	lr
 800ef2a:	f803 1b01 	strb.w	r1, [r3], #1
 800ef2e:	e7f9      	b.n	800ef24 <memset+0x4>

0800ef30 <sulp>:
 800ef30:	b570      	push	{r4, r5, r6, lr}
 800ef32:	4604      	mov	r4, r0
 800ef34:	460d      	mov	r5, r1
 800ef36:	4616      	mov	r6, r2
 800ef38:	ec45 4b10 	vmov	d0, r4, r5
 800ef3c:	f001 fcca 	bl	80108d4 <__ulp>
 800ef40:	b17e      	cbz	r6, 800ef62 <sulp+0x32>
 800ef42:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800ef46:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800ef4a:	2b00      	cmp	r3, #0
 800ef4c:	dd09      	ble.n	800ef62 <sulp+0x32>
 800ef4e:	051b      	lsls	r3, r3, #20
 800ef50:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
 800ef54:	2000      	movs	r0, #0
 800ef56:	f501 1140 	add.w	r1, r1, #3145728	; 0x300000
 800ef5a:	ec41 0b17 	vmov	d7, r0, r1
 800ef5e:	ee20 0b07 	vmul.f64	d0, d0, d7
 800ef62:	bd70      	pop	{r4, r5, r6, pc}
 800ef64:	0000      	movs	r0, r0
	...

0800ef68 <_strtod_l>:
 800ef68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ef6c:	ed2d 8b0e 	vpush	{d8-d14}
 800ef70:	b097      	sub	sp, #92	; 0x5c
 800ef72:	461f      	mov	r7, r3
 800ef74:	2300      	movs	r3, #0
 800ef76:	9312      	str	r3, [sp, #72]	; 0x48
 800ef78:	4ba1      	ldr	r3, [pc, #644]	; (800f200 <_strtod_l+0x298>)
 800ef7a:	920d      	str	r2, [sp, #52]	; 0x34
 800ef7c:	681b      	ldr	r3, [r3, #0]
 800ef7e:	9307      	str	r3, [sp, #28]
 800ef80:	4604      	mov	r4, r0
 800ef82:	4618      	mov	r0, r3
 800ef84:	468b      	mov	fp, r1
 800ef86:	f7f1 f9ab 	bl	80002e0 <strlen>
 800ef8a:	f04f 0800 	mov.w	r8, #0
 800ef8e:	4605      	mov	r5, r0
 800ef90:	f04f 0900 	mov.w	r9, #0
 800ef94:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
 800ef98:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800ef9a:	7813      	ldrb	r3, [r2, #0]
 800ef9c:	2b2b      	cmp	r3, #43	; 0x2b
 800ef9e:	d04d      	beq.n	800f03c <_strtod_l+0xd4>
 800efa0:	d83a      	bhi.n	800f018 <_strtod_l+0xb0>
 800efa2:	2b0d      	cmp	r3, #13
 800efa4:	d833      	bhi.n	800f00e <_strtod_l+0xa6>
 800efa6:	2b08      	cmp	r3, #8
 800efa8:	d833      	bhi.n	800f012 <_strtod_l+0xaa>
 800efaa:	2b00      	cmp	r3, #0
 800efac:	d03d      	beq.n	800f02a <_strtod_l+0xc2>
 800efae:	2300      	movs	r3, #0
 800efb0:	9308      	str	r3, [sp, #32]
 800efb2:	9e11      	ldr	r6, [sp, #68]	; 0x44
 800efb4:	7833      	ldrb	r3, [r6, #0]
 800efb6:	2b30      	cmp	r3, #48	; 0x30
 800efb8:	f040 80b0 	bne.w	800f11c <_strtod_l+0x1b4>
 800efbc:	7873      	ldrb	r3, [r6, #1]
 800efbe:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800efc2:	2b58      	cmp	r3, #88	; 0x58
 800efc4:	d167      	bne.n	800f096 <_strtod_l+0x12e>
 800efc6:	9b08      	ldr	r3, [sp, #32]
 800efc8:	9301      	str	r3, [sp, #4]
 800efca:	ab12      	add	r3, sp, #72	; 0x48
 800efcc:	9702      	str	r7, [sp, #8]
 800efce:	9300      	str	r3, [sp, #0]
 800efd0:	4a8c      	ldr	r2, [pc, #560]	; (800f204 <_strtod_l+0x29c>)
 800efd2:	ab13      	add	r3, sp, #76	; 0x4c
 800efd4:	a911      	add	r1, sp, #68	; 0x44
 800efd6:	4620      	mov	r0, r4
 800efd8:	f000 fdf0 	bl	800fbbc <__gethex>
 800efdc:	f010 0507 	ands.w	r5, r0, #7
 800efe0:	4607      	mov	r7, r0
 800efe2:	d005      	beq.n	800eff0 <_strtod_l+0x88>
 800efe4:	2d06      	cmp	r5, #6
 800efe6:	d12b      	bne.n	800f040 <_strtod_l+0xd8>
 800efe8:	3601      	adds	r6, #1
 800efea:	2300      	movs	r3, #0
 800efec:	9611      	str	r6, [sp, #68]	; 0x44
 800efee:	9308      	str	r3, [sp, #32]
 800eff0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800eff2:	2b00      	cmp	r3, #0
 800eff4:	f040 854e 	bne.w	800fa94 <_strtod_l+0xb2c>
 800eff8:	9b08      	ldr	r3, [sp, #32]
 800effa:	b1e3      	cbz	r3, 800f036 <_strtod_l+0xce>
 800effc:	ec49 8b17 	vmov	d7, r8, r9
 800f000:	eeb1 0b47 	vneg.f64	d0, d7
 800f004:	b017      	add	sp, #92	; 0x5c
 800f006:	ecbd 8b0e 	vpop	{d8-d14}
 800f00a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f00e:	2b20      	cmp	r3, #32
 800f010:	d1cd      	bne.n	800efae <_strtod_l+0x46>
 800f012:	3201      	adds	r2, #1
 800f014:	9211      	str	r2, [sp, #68]	; 0x44
 800f016:	e7bf      	b.n	800ef98 <_strtod_l+0x30>
 800f018:	2b2d      	cmp	r3, #45	; 0x2d
 800f01a:	d1c8      	bne.n	800efae <_strtod_l+0x46>
 800f01c:	2301      	movs	r3, #1
 800f01e:	9308      	str	r3, [sp, #32]
 800f020:	1c53      	adds	r3, r2, #1
 800f022:	9311      	str	r3, [sp, #68]	; 0x44
 800f024:	7853      	ldrb	r3, [r2, #1]
 800f026:	2b00      	cmp	r3, #0
 800f028:	d1c3      	bne.n	800efb2 <_strtod_l+0x4a>
 800f02a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f02c:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
 800f030:	2b00      	cmp	r3, #0
 800f032:	f040 852d 	bne.w	800fa90 <_strtod_l+0xb28>
 800f036:	ec49 8b10 	vmov	d0, r8, r9
 800f03a:	e7e3      	b.n	800f004 <_strtod_l+0x9c>
 800f03c:	2300      	movs	r3, #0
 800f03e:	e7ee      	b.n	800f01e <_strtod_l+0xb6>
 800f040:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800f042:	b13a      	cbz	r2, 800f054 <_strtod_l+0xec>
 800f044:	2135      	movs	r1, #53	; 0x35
 800f046:	a814      	add	r0, sp, #80	; 0x50
 800f048:	f001 fd4c 	bl	8010ae4 <__copybits>
 800f04c:	9912      	ldr	r1, [sp, #72]	; 0x48
 800f04e:	4620      	mov	r0, r4
 800f050:	f001 f90e 	bl	8010270 <_Bfree>
 800f054:	3d01      	subs	r5, #1
 800f056:	2d04      	cmp	r5, #4
 800f058:	d806      	bhi.n	800f068 <_strtod_l+0x100>
 800f05a:	e8df f005 	tbb	[pc, r5]
 800f05e:	030a      	.short	0x030a
 800f060:	1714      	.short	0x1714
 800f062:	0a          	.byte	0x0a
 800f063:	00          	.byte	0x00
 800f064:	e9dd 8914 	ldrd	r8, r9, [sp, #80]	; 0x50
 800f068:	073f      	lsls	r7, r7, #28
 800f06a:	d5c1      	bpl.n	800eff0 <_strtod_l+0x88>
 800f06c:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 800f070:	e7be      	b.n	800eff0 <_strtod_l+0x88>
 800f072:	e9dd 8314 	ldrd	r8, r3, [sp, #80]	; 0x50
 800f076:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800f078:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800f07c:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800f080:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 800f084:	e7f0      	b.n	800f068 <_strtod_l+0x100>
 800f086:	f8df 9180 	ldr.w	r9, [pc, #384]	; 800f208 <_strtod_l+0x2a0>
 800f08a:	e7ed      	b.n	800f068 <_strtod_l+0x100>
 800f08c:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 800f090:	f04f 38ff 	mov.w	r8, #4294967295
 800f094:	e7e8      	b.n	800f068 <_strtod_l+0x100>
 800f096:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800f098:	1c5a      	adds	r2, r3, #1
 800f09a:	9211      	str	r2, [sp, #68]	; 0x44
 800f09c:	785b      	ldrb	r3, [r3, #1]
 800f09e:	2b30      	cmp	r3, #48	; 0x30
 800f0a0:	d0f9      	beq.n	800f096 <_strtod_l+0x12e>
 800f0a2:	2b00      	cmp	r3, #0
 800f0a4:	d0a4      	beq.n	800eff0 <_strtod_l+0x88>
 800f0a6:	2301      	movs	r3, #1
 800f0a8:	f04f 0a00 	mov.w	sl, #0
 800f0ac:	9304      	str	r3, [sp, #16]
 800f0ae:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800f0b0:	930a      	str	r3, [sp, #40]	; 0x28
 800f0b2:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 800f0b6:	f8cd a018 	str.w	sl, [sp, #24]
 800f0ba:	220a      	movs	r2, #10
 800f0bc:	9811      	ldr	r0, [sp, #68]	; 0x44
 800f0be:	7807      	ldrb	r7, [r0, #0]
 800f0c0:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 800f0c4:	b2d9      	uxtb	r1, r3
 800f0c6:	2909      	cmp	r1, #9
 800f0c8:	d92a      	bls.n	800f120 <_strtod_l+0x1b8>
 800f0ca:	9907      	ldr	r1, [sp, #28]
 800f0cc:	462a      	mov	r2, r5
 800f0ce:	f001 fe0f 	bl	8010cf0 <strncmp>
 800f0d2:	2800      	cmp	r0, #0
 800f0d4:	d033      	beq.n	800f13e <_strtod_l+0x1d6>
 800f0d6:	2000      	movs	r0, #0
 800f0d8:	9b06      	ldr	r3, [sp, #24]
 800f0da:	463a      	mov	r2, r7
 800f0dc:	4601      	mov	r1, r0
 800f0de:	4607      	mov	r7, r0
 800f0e0:	2a65      	cmp	r2, #101	; 0x65
 800f0e2:	d001      	beq.n	800f0e8 <_strtod_l+0x180>
 800f0e4:	2a45      	cmp	r2, #69	; 0x45
 800f0e6:	d117      	bne.n	800f118 <_strtod_l+0x1b0>
 800f0e8:	b91b      	cbnz	r3, 800f0f2 <_strtod_l+0x18a>
 800f0ea:	9b04      	ldr	r3, [sp, #16]
 800f0ec:	4303      	orrs	r3, r0
 800f0ee:	d09c      	beq.n	800f02a <_strtod_l+0xc2>
 800f0f0:	2300      	movs	r3, #0
 800f0f2:	f8dd b044 	ldr.w	fp, [sp, #68]	; 0x44
 800f0f6:	f10b 0201 	add.w	r2, fp, #1
 800f0fa:	9211      	str	r2, [sp, #68]	; 0x44
 800f0fc:	f89b 2001 	ldrb.w	r2, [fp, #1]
 800f100:	2a2b      	cmp	r2, #43	; 0x2b
 800f102:	d071      	beq.n	800f1e8 <_strtod_l+0x280>
 800f104:	2a2d      	cmp	r2, #45	; 0x2d
 800f106:	d077      	beq.n	800f1f8 <_strtod_l+0x290>
 800f108:	f04f 0e00 	mov.w	lr, #0
 800f10c:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 800f110:	2d09      	cmp	r5, #9
 800f112:	d97f      	bls.n	800f214 <_strtod_l+0x2ac>
 800f114:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
 800f118:	2500      	movs	r5, #0
 800f11a:	e09b      	b.n	800f254 <_strtod_l+0x2ec>
 800f11c:	2300      	movs	r3, #0
 800f11e:	e7c3      	b.n	800f0a8 <_strtod_l+0x140>
 800f120:	9906      	ldr	r1, [sp, #24]
 800f122:	2908      	cmp	r1, #8
 800f124:	bfdd      	ittte	le
 800f126:	9909      	ldrle	r1, [sp, #36]	; 0x24
 800f128:	fb02 3301 	mlale	r3, r2, r1, r3
 800f12c:	9309      	strle	r3, [sp, #36]	; 0x24
 800f12e:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 800f132:	9b06      	ldr	r3, [sp, #24]
 800f134:	3001      	adds	r0, #1
 800f136:	3301      	adds	r3, #1
 800f138:	9306      	str	r3, [sp, #24]
 800f13a:	9011      	str	r0, [sp, #68]	; 0x44
 800f13c:	e7be      	b.n	800f0bc <_strtod_l+0x154>
 800f13e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800f140:	195a      	adds	r2, r3, r5
 800f142:	9211      	str	r2, [sp, #68]	; 0x44
 800f144:	5d5a      	ldrb	r2, [r3, r5]
 800f146:	9b06      	ldr	r3, [sp, #24]
 800f148:	b3a3      	cbz	r3, 800f1b4 <_strtod_l+0x24c>
 800f14a:	4607      	mov	r7, r0
 800f14c:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800f150:	2909      	cmp	r1, #9
 800f152:	d912      	bls.n	800f17a <_strtod_l+0x212>
 800f154:	2101      	movs	r1, #1
 800f156:	e7c3      	b.n	800f0e0 <_strtod_l+0x178>
 800f158:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800f15a:	1c5a      	adds	r2, r3, #1
 800f15c:	9211      	str	r2, [sp, #68]	; 0x44
 800f15e:	785a      	ldrb	r2, [r3, #1]
 800f160:	3001      	adds	r0, #1
 800f162:	2a30      	cmp	r2, #48	; 0x30
 800f164:	d0f8      	beq.n	800f158 <_strtod_l+0x1f0>
 800f166:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800f16a:	2b08      	cmp	r3, #8
 800f16c:	f200 8497 	bhi.w	800fa9e <_strtod_l+0xb36>
 800f170:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800f172:	930a      	str	r3, [sp, #40]	; 0x28
 800f174:	4607      	mov	r7, r0
 800f176:	2000      	movs	r0, #0
 800f178:	4603      	mov	r3, r0
 800f17a:	3a30      	subs	r2, #48	; 0x30
 800f17c:	f100 0101 	add.w	r1, r0, #1
 800f180:	d012      	beq.n	800f1a8 <_strtod_l+0x240>
 800f182:	440f      	add	r7, r1
 800f184:	eb00 0c03 	add.w	ip, r0, r3
 800f188:	4619      	mov	r1, r3
 800f18a:	250a      	movs	r5, #10
 800f18c:	4561      	cmp	r1, ip
 800f18e:	d113      	bne.n	800f1b8 <_strtod_l+0x250>
 800f190:	1819      	adds	r1, r3, r0
 800f192:	2908      	cmp	r1, #8
 800f194:	f103 0301 	add.w	r3, r3, #1
 800f198:	4403      	add	r3, r0
 800f19a:	dc1c      	bgt.n	800f1d6 <_strtod_l+0x26e>
 800f19c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f19e:	210a      	movs	r1, #10
 800f1a0:	fb01 2200 	mla	r2, r1, r0, r2
 800f1a4:	9209      	str	r2, [sp, #36]	; 0x24
 800f1a6:	2100      	movs	r1, #0
 800f1a8:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800f1aa:	1c50      	adds	r0, r2, #1
 800f1ac:	9011      	str	r0, [sp, #68]	; 0x44
 800f1ae:	7852      	ldrb	r2, [r2, #1]
 800f1b0:	4608      	mov	r0, r1
 800f1b2:	e7cb      	b.n	800f14c <_strtod_l+0x1e4>
 800f1b4:	9806      	ldr	r0, [sp, #24]
 800f1b6:	e7d4      	b.n	800f162 <_strtod_l+0x1fa>
 800f1b8:	2908      	cmp	r1, #8
 800f1ba:	dc04      	bgt.n	800f1c6 <_strtod_l+0x25e>
 800f1bc:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800f1be:	436e      	muls	r6, r5
 800f1c0:	9609      	str	r6, [sp, #36]	; 0x24
 800f1c2:	3101      	adds	r1, #1
 800f1c4:	e7e2      	b.n	800f18c <_strtod_l+0x224>
 800f1c6:	f101 0e01 	add.w	lr, r1, #1
 800f1ca:	f1be 0f10 	cmp.w	lr, #16
 800f1ce:	bfd8      	it	le
 800f1d0:	fb05 fa0a 	mulle.w	sl, r5, sl
 800f1d4:	e7f5      	b.n	800f1c2 <_strtod_l+0x25a>
 800f1d6:	2b10      	cmp	r3, #16
 800f1d8:	bfdc      	itt	le
 800f1da:	210a      	movle	r1, #10
 800f1dc:	fb01 2a0a 	mlale	sl, r1, sl, r2
 800f1e0:	e7e1      	b.n	800f1a6 <_strtod_l+0x23e>
 800f1e2:	2700      	movs	r7, #0
 800f1e4:	2101      	movs	r1, #1
 800f1e6:	e780      	b.n	800f0ea <_strtod_l+0x182>
 800f1e8:	f04f 0e00 	mov.w	lr, #0
 800f1ec:	f10b 0202 	add.w	r2, fp, #2
 800f1f0:	9211      	str	r2, [sp, #68]	; 0x44
 800f1f2:	f89b 2002 	ldrb.w	r2, [fp, #2]
 800f1f6:	e789      	b.n	800f10c <_strtod_l+0x1a4>
 800f1f8:	f04f 0e01 	mov.w	lr, #1
 800f1fc:	e7f6      	b.n	800f1ec <_strtod_l+0x284>
 800f1fe:	bf00      	nop
 800f200:	080126c8 	.word	0x080126c8
 800f204:	08012600 	.word	0x08012600
 800f208:	7ff00000 	.word	0x7ff00000
 800f20c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800f20e:	1c55      	adds	r5, r2, #1
 800f210:	9511      	str	r5, [sp, #68]	; 0x44
 800f212:	7852      	ldrb	r2, [r2, #1]
 800f214:	2a30      	cmp	r2, #48	; 0x30
 800f216:	d0f9      	beq.n	800f20c <_strtod_l+0x2a4>
 800f218:	f1a2 0531 	sub.w	r5, r2, #49	; 0x31
 800f21c:	2d08      	cmp	r5, #8
 800f21e:	f63f af7b 	bhi.w	800f118 <_strtod_l+0x1b0>
 800f222:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 800f226:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800f228:	9207      	str	r2, [sp, #28]
 800f22a:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800f22c:	1c55      	adds	r5, r2, #1
 800f22e:	9511      	str	r5, [sp, #68]	; 0x44
 800f230:	7852      	ldrb	r2, [r2, #1]
 800f232:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 800f236:	2e09      	cmp	r6, #9
 800f238:	d937      	bls.n	800f2aa <_strtod_l+0x342>
 800f23a:	9e07      	ldr	r6, [sp, #28]
 800f23c:	1bad      	subs	r5, r5, r6
 800f23e:	2d08      	cmp	r5, #8
 800f240:	f644 651f 	movw	r5, #19999	; 0x4e1f
 800f244:	dc02      	bgt.n	800f24c <_strtod_l+0x2e4>
 800f246:	4565      	cmp	r5, ip
 800f248:	bfa8      	it	ge
 800f24a:	4665      	movge	r5, ip
 800f24c:	f1be 0f00 	cmp.w	lr, #0
 800f250:	d000      	beq.n	800f254 <_strtod_l+0x2ec>
 800f252:	426d      	negs	r5, r5
 800f254:	2b00      	cmp	r3, #0
 800f256:	d14d      	bne.n	800f2f4 <_strtod_l+0x38c>
 800f258:	9b04      	ldr	r3, [sp, #16]
 800f25a:	4303      	orrs	r3, r0
 800f25c:	f47f aec8 	bne.w	800eff0 <_strtod_l+0x88>
 800f260:	2900      	cmp	r1, #0
 800f262:	f47f aee2 	bne.w	800f02a <_strtod_l+0xc2>
 800f266:	2a69      	cmp	r2, #105	; 0x69
 800f268:	d027      	beq.n	800f2ba <_strtod_l+0x352>
 800f26a:	dc24      	bgt.n	800f2b6 <_strtod_l+0x34e>
 800f26c:	2a49      	cmp	r2, #73	; 0x49
 800f26e:	d024      	beq.n	800f2ba <_strtod_l+0x352>
 800f270:	2a4e      	cmp	r2, #78	; 0x4e
 800f272:	f47f aeda 	bne.w	800f02a <_strtod_l+0xc2>
 800f276:	4996      	ldr	r1, [pc, #600]	; (800f4d0 <_strtod_l+0x568>)
 800f278:	a811      	add	r0, sp, #68	; 0x44
 800f27a:	f000 fef7 	bl	801006c <__match>
 800f27e:	2800      	cmp	r0, #0
 800f280:	f43f aed3 	beq.w	800f02a <_strtod_l+0xc2>
 800f284:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800f286:	781b      	ldrb	r3, [r3, #0]
 800f288:	2b28      	cmp	r3, #40	; 0x28
 800f28a:	d12d      	bne.n	800f2e8 <_strtod_l+0x380>
 800f28c:	4991      	ldr	r1, [pc, #580]	; (800f4d4 <_strtod_l+0x56c>)
 800f28e:	aa14      	add	r2, sp, #80	; 0x50
 800f290:	a811      	add	r0, sp, #68	; 0x44
 800f292:	f000 feff 	bl	8010094 <__hexnan>
 800f296:	2805      	cmp	r0, #5
 800f298:	d126      	bne.n	800f2e8 <_strtod_l+0x380>
 800f29a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800f29c:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 800f2a0:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 800f2a4:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 800f2a8:	e6a2      	b.n	800eff0 <_strtod_l+0x88>
 800f2aa:	250a      	movs	r5, #10
 800f2ac:	fb05 250c 	mla	r5, r5, ip, r2
 800f2b0:	f1a5 0c30 	sub.w	ip, r5, #48	; 0x30
 800f2b4:	e7b9      	b.n	800f22a <_strtod_l+0x2c2>
 800f2b6:	2a6e      	cmp	r2, #110	; 0x6e
 800f2b8:	e7db      	b.n	800f272 <_strtod_l+0x30a>
 800f2ba:	4987      	ldr	r1, [pc, #540]	; (800f4d8 <_strtod_l+0x570>)
 800f2bc:	a811      	add	r0, sp, #68	; 0x44
 800f2be:	f000 fed5 	bl	801006c <__match>
 800f2c2:	2800      	cmp	r0, #0
 800f2c4:	f43f aeb1 	beq.w	800f02a <_strtod_l+0xc2>
 800f2c8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800f2ca:	4984      	ldr	r1, [pc, #528]	; (800f4dc <_strtod_l+0x574>)
 800f2cc:	3b01      	subs	r3, #1
 800f2ce:	a811      	add	r0, sp, #68	; 0x44
 800f2d0:	9311      	str	r3, [sp, #68]	; 0x44
 800f2d2:	f000 fecb 	bl	801006c <__match>
 800f2d6:	b910      	cbnz	r0, 800f2de <_strtod_l+0x376>
 800f2d8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800f2da:	3301      	adds	r3, #1
 800f2dc:	9311      	str	r3, [sp, #68]	; 0x44
 800f2de:	f8df 9210 	ldr.w	r9, [pc, #528]	; 800f4f0 <_strtod_l+0x588>
 800f2e2:	f04f 0800 	mov.w	r8, #0
 800f2e6:	e683      	b.n	800eff0 <_strtod_l+0x88>
 800f2e8:	487d      	ldr	r0, [pc, #500]	; (800f4e0 <_strtod_l+0x578>)
 800f2ea:	f001 fce9 	bl	8010cc0 <nan>
 800f2ee:	ec59 8b10 	vmov	r8, r9, d0
 800f2f2:	e67d      	b.n	800eff0 <_strtod_l+0x88>
 800f2f4:	1bea      	subs	r2, r5, r7
 800f2f6:	eddd 7a09 	vldr	s15, [sp, #36]	; 0x24
 800f2fa:	9207      	str	r2, [sp, #28]
 800f2fc:	9a06      	ldr	r2, [sp, #24]
 800f2fe:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800f302:	2a00      	cmp	r2, #0
 800f304:	bf08      	it	eq
 800f306:	461a      	moveq	r2, r3
 800f308:	2b10      	cmp	r3, #16
 800f30a:	9206      	str	r2, [sp, #24]
 800f30c:	461a      	mov	r2, r3
 800f30e:	bfa8      	it	ge
 800f310:	2210      	movge	r2, #16
 800f312:	2b09      	cmp	r3, #9
 800f314:	ec59 8b17 	vmov	r8, r9, d7
 800f318:	dd0c      	ble.n	800f334 <_strtod_l+0x3cc>
 800f31a:	4972      	ldr	r1, [pc, #456]	; (800f4e4 <_strtod_l+0x57c>)
 800f31c:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 800f320:	ed11 5b12 	vldr	d5, [r1, #-72]	; 0xffffffb8
 800f324:	ee06 aa90 	vmov	s13, sl
 800f328:	eeb8 6b66 	vcvt.f64.u32	d6, s13
 800f32c:	eea7 6b05 	vfma.f64	d6, d7, d5
 800f330:	ec59 8b16 	vmov	r8, r9, d6
 800f334:	2b0f      	cmp	r3, #15
 800f336:	dc36      	bgt.n	800f3a6 <_strtod_l+0x43e>
 800f338:	9907      	ldr	r1, [sp, #28]
 800f33a:	2900      	cmp	r1, #0
 800f33c:	f43f ae58 	beq.w	800eff0 <_strtod_l+0x88>
 800f340:	dd23      	ble.n	800f38a <_strtod_l+0x422>
 800f342:	2916      	cmp	r1, #22
 800f344:	dc0b      	bgt.n	800f35e <_strtod_l+0x3f6>
 800f346:	4b67      	ldr	r3, [pc, #412]	; (800f4e4 <_strtod_l+0x57c>)
 800f348:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 800f34c:	ed93 7b00 	vldr	d7, [r3]
 800f350:	ec49 8b16 	vmov	d6, r8, r9
 800f354:	ee27 7b06 	vmul.f64	d7, d7, d6
 800f358:	ec59 8b17 	vmov	r8, r9, d7
 800f35c:	e648      	b.n	800eff0 <_strtod_l+0x88>
 800f35e:	9807      	ldr	r0, [sp, #28]
 800f360:	f1c3 0125 	rsb	r1, r3, #37	; 0x25
 800f364:	4281      	cmp	r1, r0
 800f366:	db1e      	blt.n	800f3a6 <_strtod_l+0x43e>
 800f368:	4a5e      	ldr	r2, [pc, #376]	; (800f4e4 <_strtod_l+0x57c>)
 800f36a:	f1c3 030f 	rsb	r3, r3, #15
 800f36e:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 800f372:	ed91 7b00 	vldr	d7, [r1]
 800f376:	ec49 8b16 	vmov	d6, r8, r9
 800f37a:	1ac3      	subs	r3, r0, r3
 800f37c:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 800f380:	ee27 7b06 	vmul.f64	d7, d7, d6
 800f384:	ed92 6b00 	vldr	d6, [r2]
 800f388:	e7e4      	b.n	800f354 <_strtod_l+0x3ec>
 800f38a:	9907      	ldr	r1, [sp, #28]
 800f38c:	3116      	adds	r1, #22
 800f38e:	db0a      	blt.n	800f3a6 <_strtod_l+0x43e>
 800f390:	4b54      	ldr	r3, [pc, #336]	; (800f4e4 <_strtod_l+0x57c>)
 800f392:	1b7d      	subs	r5, r7, r5
 800f394:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800f398:	ed95 7b00 	vldr	d7, [r5]
 800f39c:	ec49 8b16 	vmov	d6, r8, r9
 800f3a0:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800f3a4:	e7d8      	b.n	800f358 <_strtod_l+0x3f0>
 800f3a6:	9907      	ldr	r1, [sp, #28]
 800f3a8:	1a9a      	subs	r2, r3, r2
 800f3aa:	440a      	add	r2, r1
 800f3ac:	2a00      	cmp	r2, #0
 800f3ae:	dd6f      	ble.n	800f490 <_strtod_l+0x528>
 800f3b0:	f012 000f 	ands.w	r0, r2, #15
 800f3b4:	d00a      	beq.n	800f3cc <_strtod_l+0x464>
 800f3b6:	494b      	ldr	r1, [pc, #300]	; (800f4e4 <_strtod_l+0x57c>)
 800f3b8:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 800f3bc:	ed91 7b00 	vldr	d7, [r1]
 800f3c0:	ec49 8b16 	vmov	d6, r8, r9
 800f3c4:	ee27 7b06 	vmul.f64	d7, d7, d6
 800f3c8:	ec59 8b17 	vmov	r8, r9, d7
 800f3cc:	f032 020f 	bics.w	r2, r2, #15
 800f3d0:	d04f      	beq.n	800f472 <_strtod_l+0x50a>
 800f3d2:	f5b2 7f9a 	cmp.w	r2, #308	; 0x134
 800f3d6:	dd22      	ble.n	800f41e <_strtod_l+0x4b6>
 800f3d8:	2500      	movs	r5, #0
 800f3da:	462e      	mov	r6, r5
 800f3dc:	9506      	str	r5, [sp, #24]
 800f3de:	462f      	mov	r7, r5
 800f3e0:	2322      	movs	r3, #34	; 0x22
 800f3e2:	f8df 910c 	ldr.w	r9, [pc, #268]	; 800f4f0 <_strtod_l+0x588>
 800f3e6:	6023      	str	r3, [r4, #0]
 800f3e8:	f04f 0800 	mov.w	r8, #0
 800f3ec:	9b06      	ldr	r3, [sp, #24]
 800f3ee:	2b00      	cmp	r3, #0
 800f3f0:	f43f adfe 	beq.w	800eff0 <_strtod_l+0x88>
 800f3f4:	9912      	ldr	r1, [sp, #72]	; 0x48
 800f3f6:	4620      	mov	r0, r4
 800f3f8:	f000 ff3a 	bl	8010270 <_Bfree>
 800f3fc:	4639      	mov	r1, r7
 800f3fe:	4620      	mov	r0, r4
 800f400:	f000 ff36 	bl	8010270 <_Bfree>
 800f404:	4631      	mov	r1, r6
 800f406:	4620      	mov	r0, r4
 800f408:	f000 ff32 	bl	8010270 <_Bfree>
 800f40c:	9906      	ldr	r1, [sp, #24]
 800f40e:	4620      	mov	r0, r4
 800f410:	f000 ff2e 	bl	8010270 <_Bfree>
 800f414:	4629      	mov	r1, r5
 800f416:	4620      	mov	r0, r4
 800f418:	f000 ff2a 	bl	8010270 <_Bfree>
 800f41c:	e5e8      	b.n	800eff0 <_strtod_l+0x88>
 800f41e:	2000      	movs	r0, #0
 800f420:	ec49 8b17 	vmov	d7, r8, r9
 800f424:	f8df c0c0 	ldr.w	ip, [pc, #192]	; 800f4e8 <_strtod_l+0x580>
 800f428:	1112      	asrs	r2, r2, #4
 800f42a:	4601      	mov	r1, r0
 800f42c:	2a01      	cmp	r2, #1
 800f42e:	dc23      	bgt.n	800f478 <_strtod_l+0x510>
 800f430:	b108      	cbz	r0, 800f436 <_strtod_l+0x4ce>
 800f432:	ec59 8b17 	vmov	r8, r9, d7
 800f436:	4a2c      	ldr	r2, [pc, #176]	; (800f4e8 <_strtod_l+0x580>)
 800f438:	482c      	ldr	r0, [pc, #176]	; (800f4ec <_strtod_l+0x584>)
 800f43a:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800f43e:	ed92 7b00 	vldr	d7, [r2]
 800f442:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 800f446:	ec49 8b16 	vmov	d6, r8, r9
 800f44a:	4a29      	ldr	r2, [pc, #164]	; (800f4f0 <_strtod_l+0x588>)
 800f44c:	ee27 7b06 	vmul.f64	d7, d7, d6
 800f450:	ee17 1a90 	vmov	r1, s15
 800f454:	400a      	ands	r2, r1
 800f456:	4282      	cmp	r2, r0
 800f458:	ec59 8b17 	vmov	r8, r9, d7
 800f45c:	d8bc      	bhi.n	800f3d8 <_strtod_l+0x470>
 800f45e:	f5a0 1080 	sub.w	r0, r0, #1048576	; 0x100000
 800f462:	4282      	cmp	r2, r0
 800f464:	bf86      	itte	hi
 800f466:	f8df 908c 	ldrhi.w	r9, [pc, #140]	; 800f4f4 <_strtod_l+0x58c>
 800f46a:	f04f 38ff 	movhi.w	r8, #4294967295
 800f46e:	f101 7954 	addls.w	r9, r1, #55574528	; 0x3500000
 800f472:	2200      	movs	r2, #0
 800f474:	9204      	str	r2, [sp, #16]
 800f476:	e078      	b.n	800f56a <_strtod_l+0x602>
 800f478:	07d6      	lsls	r6, r2, #31
 800f47a:	d504      	bpl.n	800f486 <_strtod_l+0x51e>
 800f47c:	ed9c 6b00 	vldr	d6, [ip]
 800f480:	2001      	movs	r0, #1
 800f482:	ee27 7b06 	vmul.f64	d7, d7, d6
 800f486:	3101      	adds	r1, #1
 800f488:	1052      	asrs	r2, r2, #1
 800f48a:	f10c 0c08 	add.w	ip, ip, #8
 800f48e:	e7cd      	b.n	800f42c <_strtod_l+0x4c4>
 800f490:	d0ef      	beq.n	800f472 <_strtod_l+0x50a>
 800f492:	4252      	negs	r2, r2
 800f494:	f012 000f 	ands.w	r0, r2, #15
 800f498:	d00a      	beq.n	800f4b0 <_strtod_l+0x548>
 800f49a:	4912      	ldr	r1, [pc, #72]	; (800f4e4 <_strtod_l+0x57c>)
 800f49c:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 800f4a0:	ed91 7b00 	vldr	d7, [r1]
 800f4a4:	ec49 8b16 	vmov	d6, r8, r9
 800f4a8:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800f4ac:	ec59 8b17 	vmov	r8, r9, d7
 800f4b0:	1112      	asrs	r2, r2, #4
 800f4b2:	d0de      	beq.n	800f472 <_strtod_l+0x50a>
 800f4b4:	2a1f      	cmp	r2, #31
 800f4b6:	dd1f      	ble.n	800f4f8 <_strtod_l+0x590>
 800f4b8:	2500      	movs	r5, #0
 800f4ba:	462e      	mov	r6, r5
 800f4bc:	9506      	str	r5, [sp, #24]
 800f4be:	462f      	mov	r7, r5
 800f4c0:	2322      	movs	r3, #34	; 0x22
 800f4c2:	f04f 0800 	mov.w	r8, #0
 800f4c6:	f04f 0900 	mov.w	r9, #0
 800f4ca:	6023      	str	r3, [r4, #0]
 800f4cc:	e78e      	b.n	800f3ec <_strtod_l+0x484>
 800f4ce:	bf00      	nop
 800f4d0:	080125fd 	.word	0x080125fd
 800f4d4:	08012614 	.word	0x08012614
 800f4d8:	080125f4 	.word	0x080125f4
 800f4dc:	080125f7 	.word	0x080125f7
 800f4e0:	08012887 	.word	0x08012887
 800f4e4:	08012778 	.word	0x08012778
 800f4e8:	08012750 	.word	0x08012750
 800f4ec:	7ca00000 	.word	0x7ca00000
 800f4f0:	7ff00000 	.word	0x7ff00000
 800f4f4:	7fefffff 	.word	0x7fefffff
 800f4f8:	f012 0110 	ands.w	r1, r2, #16
 800f4fc:	bf18      	it	ne
 800f4fe:	216a      	movne	r1, #106	; 0x6a
 800f500:	9104      	str	r1, [sp, #16]
 800f502:	ec49 8b17 	vmov	d7, r8, r9
 800f506:	49be      	ldr	r1, [pc, #760]	; (800f800 <_strtod_l+0x898>)
 800f508:	2000      	movs	r0, #0
 800f50a:	07d6      	lsls	r6, r2, #31
 800f50c:	d504      	bpl.n	800f518 <_strtod_l+0x5b0>
 800f50e:	ed91 6b00 	vldr	d6, [r1]
 800f512:	2001      	movs	r0, #1
 800f514:	ee27 7b06 	vmul.f64	d7, d7, d6
 800f518:	1052      	asrs	r2, r2, #1
 800f51a:	f101 0108 	add.w	r1, r1, #8
 800f51e:	d1f4      	bne.n	800f50a <_strtod_l+0x5a2>
 800f520:	b108      	cbz	r0, 800f526 <_strtod_l+0x5be>
 800f522:	ec59 8b17 	vmov	r8, r9, d7
 800f526:	9a04      	ldr	r2, [sp, #16]
 800f528:	b1c2      	cbz	r2, 800f55c <_strtod_l+0x5f4>
 800f52a:	f3c9 510a 	ubfx	r1, r9, #20, #11
 800f52e:	f1c1 026b 	rsb	r2, r1, #107	; 0x6b
 800f532:	2a00      	cmp	r2, #0
 800f534:	4648      	mov	r0, r9
 800f536:	dd11      	ble.n	800f55c <_strtod_l+0x5f4>
 800f538:	2a1f      	cmp	r2, #31
 800f53a:	f340 812e 	ble.w	800f79a <_strtod_l+0x832>
 800f53e:	2a34      	cmp	r2, #52	; 0x34
 800f540:	bfde      	ittt	le
 800f542:	f1c1 014b 	rsble	r1, r1, #75	; 0x4b
 800f546:	f04f 32ff 	movle.w	r2, #4294967295
 800f54a:	fa02 f101 	lslle.w	r1, r2, r1
 800f54e:	f04f 0800 	mov.w	r8, #0
 800f552:	bfcc      	ite	gt
 800f554:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 800f558:	ea01 0900 	andle.w	r9, r1, r0
 800f55c:	ec49 8b17 	vmov	d7, r8, r9
 800f560:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800f564:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f568:	d0a6      	beq.n	800f4b8 <_strtod_l+0x550>
 800f56a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f56c:	9200      	str	r2, [sp, #0]
 800f56e:	990a      	ldr	r1, [sp, #40]	; 0x28
 800f570:	9a06      	ldr	r2, [sp, #24]
 800f572:	4620      	mov	r0, r4
 800f574:	f000 fee4 	bl	8010340 <__s2b>
 800f578:	9006      	str	r0, [sp, #24]
 800f57a:	2800      	cmp	r0, #0
 800f57c:	f43f af2c 	beq.w	800f3d8 <_strtod_l+0x470>
 800f580:	9b07      	ldr	r3, [sp, #28]
 800f582:	1b7d      	subs	r5, r7, r5
 800f584:	2b00      	cmp	r3, #0
 800f586:	bfb4      	ite	lt
 800f588:	462b      	movlt	r3, r5
 800f58a:	2300      	movge	r3, #0
 800f58c:	9309      	str	r3, [sp, #36]	; 0x24
 800f58e:	9b07      	ldr	r3, [sp, #28]
 800f590:	ed9f 9b93 	vldr	d9, [pc, #588]	; 800f7e0 <_strtod_l+0x878>
 800f594:	ed9f ab94 	vldr	d10, [pc, #592]	; 800f7e8 <_strtod_l+0x880>
 800f598:	ed9f bb95 	vldr	d11, [pc, #596]	; 800f7f0 <_strtod_l+0x888>
 800f59c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800f5a0:	2500      	movs	r5, #0
 800f5a2:	930c      	str	r3, [sp, #48]	; 0x30
 800f5a4:	462e      	mov	r6, r5
 800f5a6:	9b06      	ldr	r3, [sp, #24]
 800f5a8:	4620      	mov	r0, r4
 800f5aa:	6859      	ldr	r1, [r3, #4]
 800f5ac:	f000 fe20 	bl	80101f0 <_Balloc>
 800f5b0:	4607      	mov	r7, r0
 800f5b2:	2800      	cmp	r0, #0
 800f5b4:	f43f af14 	beq.w	800f3e0 <_strtod_l+0x478>
 800f5b8:	9b06      	ldr	r3, [sp, #24]
 800f5ba:	691a      	ldr	r2, [r3, #16]
 800f5bc:	3202      	adds	r2, #2
 800f5be:	f103 010c 	add.w	r1, r3, #12
 800f5c2:	0092      	lsls	r2, r2, #2
 800f5c4:	300c      	adds	r0, #12
 800f5c6:	f7ff fc9d 	bl	800ef04 <memcpy>
 800f5ca:	ec49 8b10 	vmov	d0, r8, r9
 800f5ce:	aa14      	add	r2, sp, #80	; 0x50
 800f5d0:	a913      	add	r1, sp, #76	; 0x4c
 800f5d2:	4620      	mov	r0, r4
 800f5d4:	f001 f9fa 	bl	80109cc <__d2b>
 800f5d8:	ec49 8b18 	vmov	d8, r8, r9
 800f5dc:	9012      	str	r0, [sp, #72]	; 0x48
 800f5de:	2800      	cmp	r0, #0
 800f5e0:	f43f aefe 	beq.w	800f3e0 <_strtod_l+0x478>
 800f5e4:	2101      	movs	r1, #1
 800f5e6:	4620      	mov	r0, r4
 800f5e8:	f000 ff44 	bl	8010474 <__i2b>
 800f5ec:	4606      	mov	r6, r0
 800f5ee:	2800      	cmp	r0, #0
 800f5f0:	f43f aef6 	beq.w	800f3e0 <_strtod_l+0x478>
 800f5f4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800f5f6:	9914      	ldr	r1, [sp, #80]	; 0x50
 800f5f8:	2b00      	cmp	r3, #0
 800f5fa:	bfab      	itete	ge
 800f5fc:	9a09      	ldrge	r2, [sp, #36]	; 0x24
 800f5fe:	9a0c      	ldrlt	r2, [sp, #48]	; 0x30
 800f600:	f8dd a030 	ldrge.w	sl, [sp, #48]	; 0x30
 800f604:	f8dd b024 	ldrlt.w	fp, [sp, #36]	; 0x24
 800f608:	bfac      	ite	ge
 800f60a:	eb03 0b02 	addge.w	fp, r3, r2
 800f60e:	eba2 0a03 	sublt.w	sl, r2, r3
 800f612:	9a04      	ldr	r2, [sp, #16]
 800f614:	1a9b      	subs	r3, r3, r2
 800f616:	440b      	add	r3, r1
 800f618:	4a7a      	ldr	r2, [pc, #488]	; (800f804 <_strtod_l+0x89c>)
 800f61a:	3b01      	subs	r3, #1
 800f61c:	4293      	cmp	r3, r2
 800f61e:	f1c1 0136 	rsb	r1, r1, #54	; 0x36
 800f622:	f280 80cd 	bge.w	800f7c0 <_strtod_l+0x858>
 800f626:	1ad2      	subs	r2, r2, r3
 800f628:	2a1f      	cmp	r2, #31
 800f62a:	eba1 0102 	sub.w	r1, r1, r2
 800f62e:	f04f 0001 	mov.w	r0, #1
 800f632:	f300 80b9 	bgt.w	800f7a8 <_strtod_l+0x840>
 800f636:	fa00 f302 	lsl.w	r3, r0, r2
 800f63a:	930b      	str	r3, [sp, #44]	; 0x2c
 800f63c:	2300      	movs	r3, #0
 800f63e:	930a      	str	r3, [sp, #40]	; 0x28
 800f640:	eb0b 0301 	add.w	r3, fp, r1
 800f644:	9a04      	ldr	r2, [sp, #16]
 800f646:	459b      	cmp	fp, r3
 800f648:	448a      	add	sl, r1
 800f64a:	4492      	add	sl, r2
 800f64c:	465a      	mov	r2, fp
 800f64e:	bfa8      	it	ge
 800f650:	461a      	movge	r2, r3
 800f652:	4552      	cmp	r2, sl
 800f654:	bfa8      	it	ge
 800f656:	4652      	movge	r2, sl
 800f658:	2a00      	cmp	r2, #0
 800f65a:	bfc2      	ittt	gt
 800f65c:	1a9b      	subgt	r3, r3, r2
 800f65e:	ebaa 0a02 	subgt.w	sl, sl, r2
 800f662:	ebab 0b02 	subgt.w	fp, fp, r2
 800f666:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f668:	2a00      	cmp	r2, #0
 800f66a:	dd18      	ble.n	800f69e <_strtod_l+0x736>
 800f66c:	4631      	mov	r1, r6
 800f66e:	4620      	mov	r0, r4
 800f670:	930f      	str	r3, [sp, #60]	; 0x3c
 800f672:	f000 ffbf 	bl	80105f4 <__pow5mult>
 800f676:	4606      	mov	r6, r0
 800f678:	2800      	cmp	r0, #0
 800f67a:	f43f aeb1 	beq.w	800f3e0 <_strtod_l+0x478>
 800f67e:	4601      	mov	r1, r0
 800f680:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800f682:	4620      	mov	r0, r4
 800f684:	f000 ff0c 	bl	80104a0 <__multiply>
 800f688:	900e      	str	r0, [sp, #56]	; 0x38
 800f68a:	2800      	cmp	r0, #0
 800f68c:	f43f aea8 	beq.w	800f3e0 <_strtod_l+0x478>
 800f690:	9912      	ldr	r1, [sp, #72]	; 0x48
 800f692:	4620      	mov	r0, r4
 800f694:	f000 fdec 	bl	8010270 <_Bfree>
 800f698:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800f69a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800f69c:	9212      	str	r2, [sp, #72]	; 0x48
 800f69e:	2b00      	cmp	r3, #0
 800f6a0:	f300 8093 	bgt.w	800f7ca <_strtod_l+0x862>
 800f6a4:	9b07      	ldr	r3, [sp, #28]
 800f6a6:	2b00      	cmp	r3, #0
 800f6a8:	dd08      	ble.n	800f6bc <_strtod_l+0x754>
 800f6aa:	4639      	mov	r1, r7
 800f6ac:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800f6ae:	4620      	mov	r0, r4
 800f6b0:	f000 ffa0 	bl	80105f4 <__pow5mult>
 800f6b4:	4607      	mov	r7, r0
 800f6b6:	2800      	cmp	r0, #0
 800f6b8:	f43f ae92 	beq.w	800f3e0 <_strtod_l+0x478>
 800f6bc:	f1ba 0f00 	cmp.w	sl, #0
 800f6c0:	dd08      	ble.n	800f6d4 <_strtod_l+0x76c>
 800f6c2:	4639      	mov	r1, r7
 800f6c4:	4652      	mov	r2, sl
 800f6c6:	4620      	mov	r0, r4
 800f6c8:	f000 ffee 	bl	80106a8 <__lshift>
 800f6cc:	4607      	mov	r7, r0
 800f6ce:	2800      	cmp	r0, #0
 800f6d0:	f43f ae86 	beq.w	800f3e0 <_strtod_l+0x478>
 800f6d4:	f1bb 0f00 	cmp.w	fp, #0
 800f6d8:	dd08      	ble.n	800f6ec <_strtod_l+0x784>
 800f6da:	4631      	mov	r1, r6
 800f6dc:	465a      	mov	r2, fp
 800f6de:	4620      	mov	r0, r4
 800f6e0:	f000 ffe2 	bl	80106a8 <__lshift>
 800f6e4:	4606      	mov	r6, r0
 800f6e6:	2800      	cmp	r0, #0
 800f6e8:	f43f ae7a 	beq.w	800f3e0 <_strtod_l+0x478>
 800f6ec:	9912      	ldr	r1, [sp, #72]	; 0x48
 800f6ee:	463a      	mov	r2, r7
 800f6f0:	4620      	mov	r0, r4
 800f6f2:	f001 f865 	bl	80107c0 <__mdiff>
 800f6f6:	4605      	mov	r5, r0
 800f6f8:	2800      	cmp	r0, #0
 800f6fa:	f43f ae71 	beq.w	800f3e0 <_strtod_l+0x478>
 800f6fe:	2300      	movs	r3, #0
 800f700:	f8d0 a00c 	ldr.w	sl, [r0, #12]
 800f704:	60c3      	str	r3, [r0, #12]
 800f706:	4631      	mov	r1, r6
 800f708:	f001 f83e 	bl	8010788 <__mcmp>
 800f70c:	2800      	cmp	r0, #0
 800f70e:	da7d      	bge.n	800f80c <_strtod_l+0x8a4>
 800f710:	ea5a 0308 	orrs.w	r3, sl, r8
 800f714:	f040 80a3 	bne.w	800f85e <_strtod_l+0x8f6>
 800f718:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800f71c:	2b00      	cmp	r3, #0
 800f71e:	f040 809e 	bne.w	800f85e <_strtod_l+0x8f6>
 800f722:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800f726:	0d1b      	lsrs	r3, r3, #20
 800f728:	051b      	lsls	r3, r3, #20
 800f72a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800f72e:	f240 8096 	bls.w	800f85e <_strtod_l+0x8f6>
 800f732:	696b      	ldr	r3, [r5, #20]
 800f734:	b91b      	cbnz	r3, 800f73e <_strtod_l+0x7d6>
 800f736:	692b      	ldr	r3, [r5, #16]
 800f738:	2b01      	cmp	r3, #1
 800f73a:	f340 8090 	ble.w	800f85e <_strtod_l+0x8f6>
 800f73e:	4629      	mov	r1, r5
 800f740:	2201      	movs	r2, #1
 800f742:	4620      	mov	r0, r4
 800f744:	f000 ffb0 	bl	80106a8 <__lshift>
 800f748:	4631      	mov	r1, r6
 800f74a:	4605      	mov	r5, r0
 800f74c:	f001 f81c 	bl	8010788 <__mcmp>
 800f750:	2800      	cmp	r0, #0
 800f752:	f340 8084 	ble.w	800f85e <_strtod_l+0x8f6>
 800f756:	9904      	ldr	r1, [sp, #16]
 800f758:	4a2b      	ldr	r2, [pc, #172]	; (800f808 <_strtod_l+0x8a0>)
 800f75a:	464b      	mov	r3, r9
 800f75c:	2900      	cmp	r1, #0
 800f75e:	f000 809d 	beq.w	800f89c <_strtod_l+0x934>
 800f762:	ea02 0109 	and.w	r1, r2, r9
 800f766:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800f76a:	f300 8097 	bgt.w	800f89c <_strtod_l+0x934>
 800f76e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800f772:	f77f aea5 	ble.w	800f4c0 <_strtod_l+0x558>
 800f776:	ed9f 7b20 	vldr	d7, [pc, #128]	; 800f7f8 <_strtod_l+0x890>
 800f77a:	ec49 8b16 	vmov	d6, r8, r9
 800f77e:	ee26 7b07 	vmul.f64	d7, d6, d7
 800f782:	ed8d 7b04 	vstr	d7, [sp, #16]
 800f786:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
 800f78a:	4313      	orrs	r3, r2
 800f78c:	bf08      	it	eq
 800f78e:	2322      	moveq	r3, #34	; 0x22
 800f790:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800f794:	bf08      	it	eq
 800f796:	6023      	streq	r3, [r4, #0]
 800f798:	e62c      	b.n	800f3f4 <_strtod_l+0x48c>
 800f79a:	f04f 31ff 	mov.w	r1, #4294967295
 800f79e:	fa01 f202 	lsl.w	r2, r1, r2
 800f7a2:	ea02 0808 	and.w	r8, r2, r8
 800f7a6:	e6d9      	b.n	800f55c <_strtod_l+0x5f4>
 800f7a8:	f1c3 437f 	rsb	r3, r3, #4278190080	; 0xff000000
 800f7ac:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
 800f7b0:	f503 437b 	add.w	r3, r3, #64256	; 0xfb00
 800f7b4:	33e2      	adds	r3, #226	; 0xe2
 800f7b6:	fa00 f303 	lsl.w	r3, r0, r3
 800f7ba:	e9cd 300a 	strd	r3, r0, [sp, #40]	; 0x28
 800f7be:	e73f      	b.n	800f640 <_strtod_l+0x6d8>
 800f7c0:	2200      	movs	r2, #0
 800f7c2:	2301      	movs	r3, #1
 800f7c4:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800f7c8:	e73a      	b.n	800f640 <_strtod_l+0x6d8>
 800f7ca:	9912      	ldr	r1, [sp, #72]	; 0x48
 800f7cc:	461a      	mov	r2, r3
 800f7ce:	4620      	mov	r0, r4
 800f7d0:	f000 ff6a 	bl	80106a8 <__lshift>
 800f7d4:	9012      	str	r0, [sp, #72]	; 0x48
 800f7d6:	2800      	cmp	r0, #0
 800f7d8:	f47f af64 	bne.w	800f6a4 <_strtod_l+0x73c>
 800f7dc:	e600      	b.n	800f3e0 <_strtod_l+0x478>
 800f7de:	bf00      	nop
 800f7e0:	94a03595 	.word	0x94a03595
 800f7e4:	3fcfffff 	.word	0x3fcfffff
 800f7e8:	94a03595 	.word	0x94a03595
 800f7ec:	3fdfffff 	.word	0x3fdfffff
 800f7f0:	35afe535 	.word	0x35afe535
 800f7f4:	3fe00000 	.word	0x3fe00000
 800f7f8:	00000000 	.word	0x00000000
 800f7fc:	39500000 	.word	0x39500000
 800f800:	08012628 	.word	0x08012628
 800f804:	fffffc02 	.word	0xfffffc02
 800f808:	7ff00000 	.word	0x7ff00000
 800f80c:	46cb      	mov	fp, r9
 800f80e:	d15f      	bne.n	800f8d0 <_strtod_l+0x968>
 800f810:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800f814:	f1ba 0f00 	cmp.w	sl, #0
 800f818:	d02a      	beq.n	800f870 <_strtod_l+0x908>
 800f81a:	4aa7      	ldr	r2, [pc, #668]	; (800fab8 <_strtod_l+0xb50>)
 800f81c:	4293      	cmp	r3, r2
 800f81e:	d12b      	bne.n	800f878 <_strtod_l+0x910>
 800f820:	9b04      	ldr	r3, [sp, #16]
 800f822:	4642      	mov	r2, r8
 800f824:	b1fb      	cbz	r3, 800f866 <_strtod_l+0x8fe>
 800f826:	4ba5      	ldr	r3, [pc, #660]	; (800fabc <_strtod_l+0xb54>)
 800f828:	ea09 0303 	and.w	r3, r9, r3
 800f82c:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800f830:	f04f 31ff 	mov.w	r1, #4294967295
 800f834:	d81a      	bhi.n	800f86c <_strtod_l+0x904>
 800f836:	0d1b      	lsrs	r3, r3, #20
 800f838:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800f83c:	fa01 f303 	lsl.w	r3, r1, r3
 800f840:	429a      	cmp	r2, r3
 800f842:	d119      	bne.n	800f878 <_strtod_l+0x910>
 800f844:	4b9e      	ldr	r3, [pc, #632]	; (800fac0 <_strtod_l+0xb58>)
 800f846:	459b      	cmp	fp, r3
 800f848:	d102      	bne.n	800f850 <_strtod_l+0x8e8>
 800f84a:	3201      	adds	r2, #1
 800f84c:	f43f adc8 	beq.w	800f3e0 <_strtod_l+0x478>
 800f850:	4b9a      	ldr	r3, [pc, #616]	; (800fabc <_strtod_l+0xb54>)
 800f852:	ea0b 0303 	and.w	r3, fp, r3
 800f856:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 800f85a:	f04f 0800 	mov.w	r8, #0
 800f85e:	9b04      	ldr	r3, [sp, #16]
 800f860:	2b00      	cmp	r3, #0
 800f862:	d188      	bne.n	800f776 <_strtod_l+0x80e>
 800f864:	e5c6      	b.n	800f3f4 <_strtod_l+0x48c>
 800f866:	f04f 33ff 	mov.w	r3, #4294967295
 800f86a:	e7e9      	b.n	800f840 <_strtod_l+0x8d8>
 800f86c:	460b      	mov	r3, r1
 800f86e:	e7e7      	b.n	800f840 <_strtod_l+0x8d8>
 800f870:	ea53 0308 	orrs.w	r3, r3, r8
 800f874:	f43f af6f 	beq.w	800f756 <_strtod_l+0x7ee>
 800f878:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f87a:	b1cb      	cbz	r3, 800f8b0 <_strtod_l+0x948>
 800f87c:	ea13 0f0b 	tst.w	r3, fp
 800f880:	d0ed      	beq.n	800f85e <_strtod_l+0x8f6>
 800f882:	9a04      	ldr	r2, [sp, #16]
 800f884:	4640      	mov	r0, r8
 800f886:	4649      	mov	r1, r9
 800f888:	f1ba 0f00 	cmp.w	sl, #0
 800f88c:	d014      	beq.n	800f8b8 <_strtod_l+0x950>
 800f88e:	f7ff fb4f 	bl	800ef30 <sulp>
 800f892:	ee38 7b00 	vadd.f64	d7, d8, d0
 800f896:	ec59 8b17 	vmov	r8, r9, d7
 800f89a:	e7e0      	b.n	800f85e <_strtod_l+0x8f6>
 800f89c:	4013      	ands	r3, r2
 800f89e:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800f8a2:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 800f8a6:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 800f8aa:	f04f 38ff 	mov.w	r8, #4294967295
 800f8ae:	e7d6      	b.n	800f85e <_strtod_l+0x8f6>
 800f8b0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f8b2:	ea13 0f08 	tst.w	r3, r8
 800f8b6:	e7e3      	b.n	800f880 <_strtod_l+0x918>
 800f8b8:	f7ff fb3a 	bl	800ef30 <sulp>
 800f8bc:	ee38 0b40 	vsub.f64	d0, d8, d0
 800f8c0:	eeb5 0b40 	vcmp.f64	d0, #0.0
 800f8c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f8c8:	ec59 8b10 	vmov	r8, r9, d0
 800f8cc:	d1c7      	bne.n	800f85e <_strtod_l+0x8f6>
 800f8ce:	e5f7      	b.n	800f4c0 <_strtod_l+0x558>
 800f8d0:	4631      	mov	r1, r6
 800f8d2:	4628      	mov	r0, r5
 800f8d4:	f001 f8d6 	bl	8010a84 <__ratio>
 800f8d8:	eeb0 7b00 	vmov.f64	d7, #0	; 0x40000000  2.0
 800f8dc:	eeb4 0bc7 	vcmpe.f64	d0, d7
 800f8e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f8e4:	d865      	bhi.n	800f9b2 <_strtod_l+0xa4a>
 800f8e6:	f1ba 0f00 	cmp.w	sl, #0
 800f8ea:	d042      	beq.n	800f972 <_strtod_l+0xa0a>
 800f8ec:	4b75      	ldr	r3, [pc, #468]	; (800fac4 <_strtod_l+0xb5c>)
 800f8ee:	2200      	movs	r2, #0
 800f8f0:	eeb7 db00 	vmov.f64	d13, #112	; 0x3f800000  1.0
 800f8f4:	4871      	ldr	r0, [pc, #452]	; (800fabc <_strtod_l+0xb54>)
 800f8f6:	f8df c1d8 	ldr.w	ip, [pc, #472]	; 800fad0 <_strtod_l+0xb68>
 800f8fa:	ea0b 0100 	and.w	r1, fp, r0
 800f8fe:	4561      	cmp	r1, ip
 800f900:	f040 808e 	bne.w	800fa20 <_strtod_l+0xab8>
 800f904:	f1ab 7954 	sub.w	r9, fp, #55574528	; 0x3500000
 800f908:	ec49 8b10 	vmov	d0, r8, r9
 800f90c:	ec43 2b1c 	vmov	d12, r2, r3
 800f910:	910a      	str	r1, [sp, #40]	; 0x28
 800f912:	f000 ffdf 	bl	80108d4 <__ulp>
 800f916:	ec49 8b1e 	vmov	d14, r8, r9
 800f91a:	4868      	ldr	r0, [pc, #416]	; (800fabc <_strtod_l+0xb54>)
 800f91c:	eeac eb00 	vfma.f64	d14, d12, d0
 800f920:	ee1e 3a90 	vmov	r3, s29
 800f924:	4a68      	ldr	r2, [pc, #416]	; (800fac8 <_strtod_l+0xb60>)
 800f926:	990a      	ldr	r1, [sp, #40]	; 0x28
 800f928:	4018      	ands	r0, r3
 800f92a:	4290      	cmp	r0, r2
 800f92c:	ec59 8b1e 	vmov	r8, r9, d14
 800f930:	d94e      	bls.n	800f9d0 <_strtod_l+0xa68>
 800f932:	ee18 3a90 	vmov	r3, s17
 800f936:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800f93a:	4293      	cmp	r3, r2
 800f93c:	d104      	bne.n	800f948 <_strtod_l+0x9e0>
 800f93e:	ee18 3a10 	vmov	r3, s16
 800f942:	3301      	adds	r3, #1
 800f944:	f43f ad4c 	beq.w	800f3e0 <_strtod_l+0x478>
 800f948:	f8df 9174 	ldr.w	r9, [pc, #372]	; 800fac0 <_strtod_l+0xb58>
 800f94c:	f04f 38ff 	mov.w	r8, #4294967295
 800f950:	9912      	ldr	r1, [sp, #72]	; 0x48
 800f952:	4620      	mov	r0, r4
 800f954:	f000 fc8c 	bl	8010270 <_Bfree>
 800f958:	4639      	mov	r1, r7
 800f95a:	4620      	mov	r0, r4
 800f95c:	f000 fc88 	bl	8010270 <_Bfree>
 800f960:	4631      	mov	r1, r6
 800f962:	4620      	mov	r0, r4
 800f964:	f000 fc84 	bl	8010270 <_Bfree>
 800f968:	4629      	mov	r1, r5
 800f96a:	4620      	mov	r0, r4
 800f96c:	f000 fc80 	bl	8010270 <_Bfree>
 800f970:	e619      	b.n	800f5a6 <_strtod_l+0x63e>
 800f972:	f1b8 0f00 	cmp.w	r8, #0
 800f976:	d112      	bne.n	800f99e <_strtod_l+0xa36>
 800f978:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800f97c:	b9b3      	cbnz	r3, 800f9ac <_strtod_l+0xa44>
 800f97e:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 800f982:	eeb4 0bc7 	vcmpe.f64	d0, d7
 800f986:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f98a:	eeb6 db00 	vmov.f64	d13, #96	; 0x3f000000  0.5
 800f98e:	bf58      	it	pl
 800f990:	ee20 db0d 	vmulpl.f64	d13, d0, d13
 800f994:	eeb1 7b4d 	vneg.f64	d7, d13
 800f998:	ec53 2b17 	vmov	r2, r3, d7
 800f99c:	e7aa      	b.n	800f8f4 <_strtod_l+0x98c>
 800f99e:	f1b8 0f01 	cmp.w	r8, #1
 800f9a2:	d103      	bne.n	800f9ac <_strtod_l+0xa44>
 800f9a4:	f1b9 0f00 	cmp.w	r9, #0
 800f9a8:	f43f ad8a 	beq.w	800f4c0 <_strtod_l+0x558>
 800f9ac:	4b47      	ldr	r3, [pc, #284]	; (800facc <_strtod_l+0xb64>)
 800f9ae:	2200      	movs	r2, #0
 800f9b0:	e79e      	b.n	800f8f0 <_strtod_l+0x988>
 800f9b2:	eeb6 db00 	vmov.f64	d13, #96	; 0x3f000000  0.5
 800f9b6:	ee20 db0d 	vmul.f64	d13, d0, d13
 800f9ba:	f1ba 0f00 	cmp.w	sl, #0
 800f9be:	d104      	bne.n	800f9ca <_strtod_l+0xa62>
 800f9c0:	eeb1 7b4d 	vneg.f64	d7, d13
 800f9c4:	ec53 2b17 	vmov	r2, r3, d7
 800f9c8:	e794      	b.n	800f8f4 <_strtod_l+0x98c>
 800f9ca:	eeb0 7b4d 	vmov.f64	d7, d13
 800f9ce:	e7f9      	b.n	800f9c4 <_strtod_l+0xa5c>
 800f9d0:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 800f9d4:	9b04      	ldr	r3, [sp, #16]
 800f9d6:	2b00      	cmp	r3, #0
 800f9d8:	d1ba      	bne.n	800f950 <_strtod_l+0x9e8>
 800f9da:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800f9de:	0d1b      	lsrs	r3, r3, #20
 800f9e0:	051b      	lsls	r3, r3, #20
 800f9e2:	4299      	cmp	r1, r3
 800f9e4:	d1b4      	bne.n	800f950 <_strtod_l+0x9e8>
 800f9e6:	ec51 0b1d 	vmov	r0, r1, d13
 800f9ea:	f7f0 fea5 	bl	8000738 <__aeabi_d2lz>
 800f9ee:	f7f0 fe5d 	bl	80006ac <__aeabi_l2d>
 800f9f2:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800f9f6:	ec41 0b17 	vmov	d7, r0, r1
 800f9fa:	ea43 0308 	orr.w	r3, r3, r8
 800f9fe:	ea53 030a 	orrs.w	r3, r3, sl
 800fa02:	ee3d db47 	vsub.f64	d13, d13, d7
 800fa06:	d03c      	beq.n	800fa82 <_strtod_l+0xb1a>
 800fa08:	eeb4 dbca 	vcmpe.f64	d13, d10
 800fa0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fa10:	f53f acf0 	bmi.w	800f3f4 <_strtod_l+0x48c>
 800fa14:	eeb4 dbcb 	vcmpe.f64	d13, d11
 800fa18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fa1c:	dd98      	ble.n	800f950 <_strtod_l+0x9e8>
 800fa1e:	e4e9      	b.n	800f3f4 <_strtod_l+0x48c>
 800fa20:	9804      	ldr	r0, [sp, #16]
 800fa22:	b1f0      	cbz	r0, 800fa62 <_strtod_l+0xafa>
 800fa24:	f1b1 6fd4 	cmp.w	r1, #111149056	; 0x6a00000
 800fa28:	d81b      	bhi.n	800fa62 <_strtod_l+0xafa>
 800fa2a:	ed9f 7b21 	vldr	d7, [pc, #132]	; 800fab0 <_strtod_l+0xb48>
 800fa2e:	eeb4 dbc7 	vcmpe.f64	d13, d7
 800fa32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fa36:	d811      	bhi.n	800fa5c <_strtod_l+0xaf4>
 800fa38:	eebc dbcd 	vcvt.u32.f64	s26, d13
 800fa3c:	ee1d 3a10 	vmov	r3, s26
 800fa40:	2b01      	cmp	r3, #1
 800fa42:	bf38      	it	cc
 800fa44:	2301      	movcc	r3, #1
 800fa46:	ee0d 3a10 	vmov	s26, r3
 800fa4a:	eeb8 db4d 	vcvt.f64.u32	d13, s26
 800fa4e:	f1ba 0f00 	cmp.w	sl, #0
 800fa52:	d113      	bne.n	800fa7c <_strtod_l+0xb14>
 800fa54:	eeb1 7b4d 	vneg.f64	d7, d13
 800fa58:	ec53 2b17 	vmov	r2, r3, d7
 800fa5c:	f103 60d6 	add.w	r0, r3, #112197632	; 0x6b00000
 800fa60:	1a43      	subs	r3, r0, r1
 800fa62:	eeb0 0b48 	vmov.f64	d0, d8
 800fa66:	ec43 2b1c 	vmov	d12, r2, r3
 800fa6a:	910a      	str	r1, [sp, #40]	; 0x28
 800fa6c:	f000 ff32 	bl	80108d4 <__ulp>
 800fa70:	990a      	ldr	r1, [sp, #40]	; 0x28
 800fa72:	eeac 8b00 	vfma.f64	d8, d12, d0
 800fa76:	ec59 8b18 	vmov	r8, r9, d8
 800fa7a:	e7ab      	b.n	800f9d4 <_strtod_l+0xa6c>
 800fa7c:	eeb0 7b4d 	vmov.f64	d7, d13
 800fa80:	e7ea      	b.n	800fa58 <_strtod_l+0xaf0>
 800fa82:	eeb4 dbc9 	vcmpe.f64	d13, d9
 800fa86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fa8a:	f57f af61 	bpl.w	800f950 <_strtod_l+0x9e8>
 800fa8e:	e4b1      	b.n	800f3f4 <_strtod_l+0x48c>
 800fa90:	2300      	movs	r3, #0
 800fa92:	9308      	str	r3, [sp, #32]
 800fa94:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800fa96:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800fa98:	6013      	str	r3, [r2, #0]
 800fa9a:	f7ff baad 	b.w	800eff8 <_strtod_l+0x90>
 800fa9e:	2a65      	cmp	r2, #101	; 0x65
 800faa0:	f43f ab9f 	beq.w	800f1e2 <_strtod_l+0x27a>
 800faa4:	2a45      	cmp	r2, #69	; 0x45
 800faa6:	f43f ab9c 	beq.w	800f1e2 <_strtod_l+0x27a>
 800faaa:	2101      	movs	r1, #1
 800faac:	f7ff bbd4 	b.w	800f258 <_strtod_l+0x2f0>
 800fab0:	ffc00000 	.word	0xffc00000
 800fab4:	41dfffff 	.word	0x41dfffff
 800fab8:	000fffff 	.word	0x000fffff
 800fabc:	7ff00000 	.word	0x7ff00000
 800fac0:	7fefffff 	.word	0x7fefffff
 800fac4:	3ff00000 	.word	0x3ff00000
 800fac8:	7c9fffff 	.word	0x7c9fffff
 800facc:	bff00000 	.word	0xbff00000
 800fad0:	7fe00000 	.word	0x7fe00000

0800fad4 <strtod>:
 800fad4:	460a      	mov	r2, r1
 800fad6:	4601      	mov	r1, r0
 800fad8:	4802      	ldr	r0, [pc, #8]	; (800fae4 <strtod+0x10>)
 800fada:	4b03      	ldr	r3, [pc, #12]	; (800fae8 <strtod+0x14>)
 800fadc:	6800      	ldr	r0, [r0, #0]
 800fade:	f7ff ba43 	b.w	800ef68 <_strtod_l>
 800fae2:	bf00      	nop
 800fae4:	240000b0 	.word	0x240000b0
 800fae8:	24000118 	.word	0x24000118

0800faec <rshift>:
 800faec:	6903      	ldr	r3, [r0, #16]
 800faee:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800faf2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800faf6:	ea4f 1261 	mov.w	r2, r1, asr #5
 800fafa:	f100 0414 	add.w	r4, r0, #20
 800fafe:	dd45      	ble.n	800fb8c <rshift+0xa0>
 800fb00:	f011 011f 	ands.w	r1, r1, #31
 800fb04:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800fb08:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800fb0c:	d10c      	bne.n	800fb28 <rshift+0x3c>
 800fb0e:	f100 0710 	add.w	r7, r0, #16
 800fb12:	4629      	mov	r1, r5
 800fb14:	42b1      	cmp	r1, r6
 800fb16:	d334      	bcc.n	800fb82 <rshift+0x96>
 800fb18:	1a9b      	subs	r3, r3, r2
 800fb1a:	009b      	lsls	r3, r3, #2
 800fb1c:	1eea      	subs	r2, r5, #3
 800fb1e:	4296      	cmp	r6, r2
 800fb20:	bf38      	it	cc
 800fb22:	2300      	movcc	r3, #0
 800fb24:	4423      	add	r3, r4
 800fb26:	e015      	b.n	800fb54 <rshift+0x68>
 800fb28:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800fb2c:	f1c1 0820 	rsb	r8, r1, #32
 800fb30:	40cf      	lsrs	r7, r1
 800fb32:	f105 0e04 	add.w	lr, r5, #4
 800fb36:	46a1      	mov	r9, r4
 800fb38:	4576      	cmp	r6, lr
 800fb3a:	46f4      	mov	ip, lr
 800fb3c:	d815      	bhi.n	800fb6a <rshift+0x7e>
 800fb3e:	1a9a      	subs	r2, r3, r2
 800fb40:	0092      	lsls	r2, r2, #2
 800fb42:	3a04      	subs	r2, #4
 800fb44:	3501      	adds	r5, #1
 800fb46:	42ae      	cmp	r6, r5
 800fb48:	bf38      	it	cc
 800fb4a:	2200      	movcc	r2, #0
 800fb4c:	18a3      	adds	r3, r4, r2
 800fb4e:	50a7      	str	r7, [r4, r2]
 800fb50:	b107      	cbz	r7, 800fb54 <rshift+0x68>
 800fb52:	3304      	adds	r3, #4
 800fb54:	1b1a      	subs	r2, r3, r4
 800fb56:	42a3      	cmp	r3, r4
 800fb58:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800fb5c:	bf08      	it	eq
 800fb5e:	2300      	moveq	r3, #0
 800fb60:	6102      	str	r2, [r0, #16]
 800fb62:	bf08      	it	eq
 800fb64:	6143      	streq	r3, [r0, #20]
 800fb66:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800fb6a:	f8dc c000 	ldr.w	ip, [ip]
 800fb6e:	fa0c fc08 	lsl.w	ip, ip, r8
 800fb72:	ea4c 0707 	orr.w	r7, ip, r7
 800fb76:	f849 7b04 	str.w	r7, [r9], #4
 800fb7a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800fb7e:	40cf      	lsrs	r7, r1
 800fb80:	e7da      	b.n	800fb38 <rshift+0x4c>
 800fb82:	f851 cb04 	ldr.w	ip, [r1], #4
 800fb86:	f847 cf04 	str.w	ip, [r7, #4]!
 800fb8a:	e7c3      	b.n	800fb14 <rshift+0x28>
 800fb8c:	4623      	mov	r3, r4
 800fb8e:	e7e1      	b.n	800fb54 <rshift+0x68>

0800fb90 <__hexdig_fun>:
 800fb90:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800fb94:	2b09      	cmp	r3, #9
 800fb96:	d802      	bhi.n	800fb9e <__hexdig_fun+0xe>
 800fb98:	3820      	subs	r0, #32
 800fb9a:	b2c0      	uxtb	r0, r0
 800fb9c:	4770      	bx	lr
 800fb9e:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800fba2:	2b05      	cmp	r3, #5
 800fba4:	d801      	bhi.n	800fbaa <__hexdig_fun+0x1a>
 800fba6:	3847      	subs	r0, #71	; 0x47
 800fba8:	e7f7      	b.n	800fb9a <__hexdig_fun+0xa>
 800fbaa:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800fbae:	2b05      	cmp	r3, #5
 800fbb0:	d801      	bhi.n	800fbb6 <__hexdig_fun+0x26>
 800fbb2:	3827      	subs	r0, #39	; 0x27
 800fbb4:	e7f1      	b.n	800fb9a <__hexdig_fun+0xa>
 800fbb6:	2000      	movs	r0, #0
 800fbb8:	4770      	bx	lr
	...

0800fbbc <__gethex>:
 800fbbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fbc0:	ed2d 8b02 	vpush	{d8}
 800fbc4:	b089      	sub	sp, #36	; 0x24
 800fbc6:	ee08 0a10 	vmov	s16, r0
 800fbca:	9304      	str	r3, [sp, #16]
 800fbcc:	4bb4      	ldr	r3, [pc, #720]	; (800fea0 <__gethex+0x2e4>)
 800fbce:	681b      	ldr	r3, [r3, #0]
 800fbd0:	9301      	str	r3, [sp, #4]
 800fbd2:	4618      	mov	r0, r3
 800fbd4:	468b      	mov	fp, r1
 800fbd6:	4690      	mov	r8, r2
 800fbd8:	f7f0 fb82 	bl	80002e0 <strlen>
 800fbdc:	9b01      	ldr	r3, [sp, #4]
 800fbde:	f8db 2000 	ldr.w	r2, [fp]
 800fbe2:	4403      	add	r3, r0
 800fbe4:	4682      	mov	sl, r0
 800fbe6:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800fbea:	9305      	str	r3, [sp, #20]
 800fbec:	1c93      	adds	r3, r2, #2
 800fbee:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800fbf2:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800fbf6:	32fe      	adds	r2, #254	; 0xfe
 800fbf8:	18d1      	adds	r1, r2, r3
 800fbfa:	461f      	mov	r7, r3
 800fbfc:	f813 0b01 	ldrb.w	r0, [r3], #1
 800fc00:	9100      	str	r1, [sp, #0]
 800fc02:	2830      	cmp	r0, #48	; 0x30
 800fc04:	d0f8      	beq.n	800fbf8 <__gethex+0x3c>
 800fc06:	f7ff ffc3 	bl	800fb90 <__hexdig_fun>
 800fc0a:	4604      	mov	r4, r0
 800fc0c:	2800      	cmp	r0, #0
 800fc0e:	d13a      	bne.n	800fc86 <__gethex+0xca>
 800fc10:	9901      	ldr	r1, [sp, #4]
 800fc12:	4652      	mov	r2, sl
 800fc14:	4638      	mov	r0, r7
 800fc16:	f001 f86b 	bl	8010cf0 <strncmp>
 800fc1a:	4605      	mov	r5, r0
 800fc1c:	2800      	cmp	r0, #0
 800fc1e:	d168      	bne.n	800fcf2 <__gethex+0x136>
 800fc20:	f817 000a 	ldrb.w	r0, [r7, sl]
 800fc24:	eb07 060a 	add.w	r6, r7, sl
 800fc28:	f7ff ffb2 	bl	800fb90 <__hexdig_fun>
 800fc2c:	2800      	cmp	r0, #0
 800fc2e:	d062      	beq.n	800fcf6 <__gethex+0x13a>
 800fc30:	4633      	mov	r3, r6
 800fc32:	7818      	ldrb	r0, [r3, #0]
 800fc34:	2830      	cmp	r0, #48	; 0x30
 800fc36:	461f      	mov	r7, r3
 800fc38:	f103 0301 	add.w	r3, r3, #1
 800fc3c:	d0f9      	beq.n	800fc32 <__gethex+0x76>
 800fc3e:	f7ff ffa7 	bl	800fb90 <__hexdig_fun>
 800fc42:	2301      	movs	r3, #1
 800fc44:	fab0 f480 	clz	r4, r0
 800fc48:	0964      	lsrs	r4, r4, #5
 800fc4a:	4635      	mov	r5, r6
 800fc4c:	9300      	str	r3, [sp, #0]
 800fc4e:	463a      	mov	r2, r7
 800fc50:	4616      	mov	r6, r2
 800fc52:	3201      	adds	r2, #1
 800fc54:	7830      	ldrb	r0, [r6, #0]
 800fc56:	f7ff ff9b 	bl	800fb90 <__hexdig_fun>
 800fc5a:	2800      	cmp	r0, #0
 800fc5c:	d1f8      	bne.n	800fc50 <__gethex+0x94>
 800fc5e:	9901      	ldr	r1, [sp, #4]
 800fc60:	4652      	mov	r2, sl
 800fc62:	4630      	mov	r0, r6
 800fc64:	f001 f844 	bl	8010cf0 <strncmp>
 800fc68:	b980      	cbnz	r0, 800fc8c <__gethex+0xd0>
 800fc6a:	b94d      	cbnz	r5, 800fc80 <__gethex+0xc4>
 800fc6c:	eb06 050a 	add.w	r5, r6, sl
 800fc70:	462a      	mov	r2, r5
 800fc72:	4616      	mov	r6, r2
 800fc74:	3201      	adds	r2, #1
 800fc76:	7830      	ldrb	r0, [r6, #0]
 800fc78:	f7ff ff8a 	bl	800fb90 <__hexdig_fun>
 800fc7c:	2800      	cmp	r0, #0
 800fc7e:	d1f8      	bne.n	800fc72 <__gethex+0xb6>
 800fc80:	1bad      	subs	r5, r5, r6
 800fc82:	00ad      	lsls	r5, r5, #2
 800fc84:	e004      	b.n	800fc90 <__gethex+0xd4>
 800fc86:	2400      	movs	r4, #0
 800fc88:	4625      	mov	r5, r4
 800fc8a:	e7e0      	b.n	800fc4e <__gethex+0x92>
 800fc8c:	2d00      	cmp	r5, #0
 800fc8e:	d1f7      	bne.n	800fc80 <__gethex+0xc4>
 800fc90:	7833      	ldrb	r3, [r6, #0]
 800fc92:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800fc96:	2b50      	cmp	r3, #80	; 0x50
 800fc98:	d13b      	bne.n	800fd12 <__gethex+0x156>
 800fc9a:	7873      	ldrb	r3, [r6, #1]
 800fc9c:	2b2b      	cmp	r3, #43	; 0x2b
 800fc9e:	d02c      	beq.n	800fcfa <__gethex+0x13e>
 800fca0:	2b2d      	cmp	r3, #45	; 0x2d
 800fca2:	d02e      	beq.n	800fd02 <__gethex+0x146>
 800fca4:	1c71      	adds	r1, r6, #1
 800fca6:	f04f 0900 	mov.w	r9, #0
 800fcaa:	7808      	ldrb	r0, [r1, #0]
 800fcac:	f7ff ff70 	bl	800fb90 <__hexdig_fun>
 800fcb0:	1e43      	subs	r3, r0, #1
 800fcb2:	b2db      	uxtb	r3, r3
 800fcb4:	2b18      	cmp	r3, #24
 800fcb6:	d82c      	bhi.n	800fd12 <__gethex+0x156>
 800fcb8:	f1a0 0210 	sub.w	r2, r0, #16
 800fcbc:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800fcc0:	f7ff ff66 	bl	800fb90 <__hexdig_fun>
 800fcc4:	1e43      	subs	r3, r0, #1
 800fcc6:	b2db      	uxtb	r3, r3
 800fcc8:	2b18      	cmp	r3, #24
 800fcca:	d91d      	bls.n	800fd08 <__gethex+0x14c>
 800fccc:	f1b9 0f00 	cmp.w	r9, #0
 800fcd0:	d000      	beq.n	800fcd4 <__gethex+0x118>
 800fcd2:	4252      	negs	r2, r2
 800fcd4:	4415      	add	r5, r2
 800fcd6:	f8cb 1000 	str.w	r1, [fp]
 800fcda:	b1e4      	cbz	r4, 800fd16 <__gethex+0x15a>
 800fcdc:	9b00      	ldr	r3, [sp, #0]
 800fcde:	2b00      	cmp	r3, #0
 800fce0:	bf14      	ite	ne
 800fce2:	2700      	movne	r7, #0
 800fce4:	2706      	moveq	r7, #6
 800fce6:	4638      	mov	r0, r7
 800fce8:	b009      	add	sp, #36	; 0x24
 800fcea:	ecbd 8b02 	vpop	{d8}
 800fcee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fcf2:	463e      	mov	r6, r7
 800fcf4:	4625      	mov	r5, r4
 800fcf6:	2401      	movs	r4, #1
 800fcf8:	e7ca      	b.n	800fc90 <__gethex+0xd4>
 800fcfa:	f04f 0900 	mov.w	r9, #0
 800fcfe:	1cb1      	adds	r1, r6, #2
 800fd00:	e7d3      	b.n	800fcaa <__gethex+0xee>
 800fd02:	f04f 0901 	mov.w	r9, #1
 800fd06:	e7fa      	b.n	800fcfe <__gethex+0x142>
 800fd08:	230a      	movs	r3, #10
 800fd0a:	fb03 0202 	mla	r2, r3, r2, r0
 800fd0e:	3a10      	subs	r2, #16
 800fd10:	e7d4      	b.n	800fcbc <__gethex+0x100>
 800fd12:	4631      	mov	r1, r6
 800fd14:	e7df      	b.n	800fcd6 <__gethex+0x11a>
 800fd16:	1bf3      	subs	r3, r6, r7
 800fd18:	3b01      	subs	r3, #1
 800fd1a:	4621      	mov	r1, r4
 800fd1c:	2b07      	cmp	r3, #7
 800fd1e:	dc0b      	bgt.n	800fd38 <__gethex+0x17c>
 800fd20:	ee18 0a10 	vmov	r0, s16
 800fd24:	f000 fa64 	bl	80101f0 <_Balloc>
 800fd28:	4604      	mov	r4, r0
 800fd2a:	b940      	cbnz	r0, 800fd3e <__gethex+0x182>
 800fd2c:	4b5d      	ldr	r3, [pc, #372]	; (800fea4 <__gethex+0x2e8>)
 800fd2e:	4602      	mov	r2, r0
 800fd30:	21de      	movs	r1, #222	; 0xde
 800fd32:	485d      	ldr	r0, [pc, #372]	; (800fea8 <__gethex+0x2ec>)
 800fd34:	f000 fffe 	bl	8010d34 <__assert_func>
 800fd38:	3101      	adds	r1, #1
 800fd3a:	105b      	asrs	r3, r3, #1
 800fd3c:	e7ee      	b.n	800fd1c <__gethex+0x160>
 800fd3e:	f100 0914 	add.w	r9, r0, #20
 800fd42:	f04f 0b00 	mov.w	fp, #0
 800fd46:	f1ca 0301 	rsb	r3, sl, #1
 800fd4a:	f8cd 9008 	str.w	r9, [sp, #8]
 800fd4e:	f8cd b000 	str.w	fp, [sp]
 800fd52:	9306      	str	r3, [sp, #24]
 800fd54:	42b7      	cmp	r7, r6
 800fd56:	d340      	bcc.n	800fdda <__gethex+0x21e>
 800fd58:	9802      	ldr	r0, [sp, #8]
 800fd5a:	9b00      	ldr	r3, [sp, #0]
 800fd5c:	f840 3b04 	str.w	r3, [r0], #4
 800fd60:	eba0 0009 	sub.w	r0, r0, r9
 800fd64:	1080      	asrs	r0, r0, #2
 800fd66:	0146      	lsls	r6, r0, #5
 800fd68:	6120      	str	r0, [r4, #16]
 800fd6a:	4618      	mov	r0, r3
 800fd6c:	f000 fb32 	bl	80103d4 <__hi0bits>
 800fd70:	1a30      	subs	r0, r6, r0
 800fd72:	f8d8 6000 	ldr.w	r6, [r8]
 800fd76:	42b0      	cmp	r0, r6
 800fd78:	dd63      	ble.n	800fe42 <__gethex+0x286>
 800fd7a:	1b87      	subs	r7, r0, r6
 800fd7c:	4639      	mov	r1, r7
 800fd7e:	4620      	mov	r0, r4
 800fd80:	f000 fed3 	bl	8010b2a <__any_on>
 800fd84:	4682      	mov	sl, r0
 800fd86:	b1a8      	cbz	r0, 800fdb4 <__gethex+0x1f8>
 800fd88:	1e7b      	subs	r3, r7, #1
 800fd8a:	1159      	asrs	r1, r3, #5
 800fd8c:	f003 021f 	and.w	r2, r3, #31
 800fd90:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800fd94:	f04f 0a01 	mov.w	sl, #1
 800fd98:	fa0a f202 	lsl.w	r2, sl, r2
 800fd9c:	420a      	tst	r2, r1
 800fd9e:	d009      	beq.n	800fdb4 <__gethex+0x1f8>
 800fda0:	4553      	cmp	r3, sl
 800fda2:	dd05      	ble.n	800fdb0 <__gethex+0x1f4>
 800fda4:	1eb9      	subs	r1, r7, #2
 800fda6:	4620      	mov	r0, r4
 800fda8:	f000 febf 	bl	8010b2a <__any_on>
 800fdac:	2800      	cmp	r0, #0
 800fdae:	d145      	bne.n	800fe3c <__gethex+0x280>
 800fdb0:	f04f 0a02 	mov.w	sl, #2
 800fdb4:	4639      	mov	r1, r7
 800fdb6:	4620      	mov	r0, r4
 800fdb8:	f7ff fe98 	bl	800faec <rshift>
 800fdbc:	443d      	add	r5, r7
 800fdbe:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800fdc2:	42ab      	cmp	r3, r5
 800fdc4:	da4c      	bge.n	800fe60 <__gethex+0x2a4>
 800fdc6:	ee18 0a10 	vmov	r0, s16
 800fdca:	4621      	mov	r1, r4
 800fdcc:	f000 fa50 	bl	8010270 <_Bfree>
 800fdd0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800fdd2:	2300      	movs	r3, #0
 800fdd4:	6013      	str	r3, [r2, #0]
 800fdd6:	27a3      	movs	r7, #163	; 0xa3
 800fdd8:	e785      	b.n	800fce6 <__gethex+0x12a>
 800fdda:	1e73      	subs	r3, r6, #1
 800fddc:	9a05      	ldr	r2, [sp, #20]
 800fdde:	9303      	str	r3, [sp, #12]
 800fde0:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800fde4:	4293      	cmp	r3, r2
 800fde6:	d019      	beq.n	800fe1c <__gethex+0x260>
 800fde8:	f1bb 0f20 	cmp.w	fp, #32
 800fdec:	d107      	bne.n	800fdfe <__gethex+0x242>
 800fdee:	9b02      	ldr	r3, [sp, #8]
 800fdf0:	9a00      	ldr	r2, [sp, #0]
 800fdf2:	f843 2b04 	str.w	r2, [r3], #4
 800fdf6:	9302      	str	r3, [sp, #8]
 800fdf8:	2300      	movs	r3, #0
 800fdfa:	9300      	str	r3, [sp, #0]
 800fdfc:	469b      	mov	fp, r3
 800fdfe:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800fe02:	f7ff fec5 	bl	800fb90 <__hexdig_fun>
 800fe06:	9b00      	ldr	r3, [sp, #0]
 800fe08:	f000 000f 	and.w	r0, r0, #15
 800fe0c:	fa00 f00b 	lsl.w	r0, r0, fp
 800fe10:	4303      	orrs	r3, r0
 800fe12:	9300      	str	r3, [sp, #0]
 800fe14:	f10b 0b04 	add.w	fp, fp, #4
 800fe18:	9b03      	ldr	r3, [sp, #12]
 800fe1a:	e00d      	b.n	800fe38 <__gethex+0x27c>
 800fe1c:	9b03      	ldr	r3, [sp, #12]
 800fe1e:	9a06      	ldr	r2, [sp, #24]
 800fe20:	4413      	add	r3, r2
 800fe22:	42bb      	cmp	r3, r7
 800fe24:	d3e0      	bcc.n	800fde8 <__gethex+0x22c>
 800fe26:	4618      	mov	r0, r3
 800fe28:	9901      	ldr	r1, [sp, #4]
 800fe2a:	9307      	str	r3, [sp, #28]
 800fe2c:	4652      	mov	r2, sl
 800fe2e:	f000 ff5f 	bl	8010cf0 <strncmp>
 800fe32:	9b07      	ldr	r3, [sp, #28]
 800fe34:	2800      	cmp	r0, #0
 800fe36:	d1d7      	bne.n	800fde8 <__gethex+0x22c>
 800fe38:	461e      	mov	r6, r3
 800fe3a:	e78b      	b.n	800fd54 <__gethex+0x198>
 800fe3c:	f04f 0a03 	mov.w	sl, #3
 800fe40:	e7b8      	b.n	800fdb4 <__gethex+0x1f8>
 800fe42:	da0a      	bge.n	800fe5a <__gethex+0x29e>
 800fe44:	1a37      	subs	r7, r6, r0
 800fe46:	4621      	mov	r1, r4
 800fe48:	ee18 0a10 	vmov	r0, s16
 800fe4c:	463a      	mov	r2, r7
 800fe4e:	f000 fc2b 	bl	80106a8 <__lshift>
 800fe52:	1bed      	subs	r5, r5, r7
 800fe54:	4604      	mov	r4, r0
 800fe56:	f100 0914 	add.w	r9, r0, #20
 800fe5a:	f04f 0a00 	mov.w	sl, #0
 800fe5e:	e7ae      	b.n	800fdbe <__gethex+0x202>
 800fe60:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800fe64:	42a8      	cmp	r0, r5
 800fe66:	dd72      	ble.n	800ff4e <__gethex+0x392>
 800fe68:	1b45      	subs	r5, r0, r5
 800fe6a:	42ae      	cmp	r6, r5
 800fe6c:	dc36      	bgt.n	800fedc <__gethex+0x320>
 800fe6e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800fe72:	2b02      	cmp	r3, #2
 800fe74:	d02a      	beq.n	800fecc <__gethex+0x310>
 800fe76:	2b03      	cmp	r3, #3
 800fe78:	d02c      	beq.n	800fed4 <__gethex+0x318>
 800fe7a:	2b01      	cmp	r3, #1
 800fe7c:	d11c      	bne.n	800feb8 <__gethex+0x2fc>
 800fe7e:	42ae      	cmp	r6, r5
 800fe80:	d11a      	bne.n	800feb8 <__gethex+0x2fc>
 800fe82:	2e01      	cmp	r6, #1
 800fe84:	d112      	bne.n	800feac <__gethex+0x2f0>
 800fe86:	9a04      	ldr	r2, [sp, #16]
 800fe88:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800fe8c:	6013      	str	r3, [r2, #0]
 800fe8e:	2301      	movs	r3, #1
 800fe90:	6123      	str	r3, [r4, #16]
 800fe92:	f8c9 3000 	str.w	r3, [r9]
 800fe96:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800fe98:	2762      	movs	r7, #98	; 0x62
 800fe9a:	601c      	str	r4, [r3, #0]
 800fe9c:	e723      	b.n	800fce6 <__gethex+0x12a>
 800fe9e:	bf00      	nop
 800fea0:	080126c8 	.word	0x080126c8
 800fea4:	08012650 	.word	0x08012650
 800fea8:	08012661 	.word	0x08012661
 800feac:	1e71      	subs	r1, r6, #1
 800feae:	4620      	mov	r0, r4
 800feb0:	f000 fe3b 	bl	8010b2a <__any_on>
 800feb4:	2800      	cmp	r0, #0
 800feb6:	d1e6      	bne.n	800fe86 <__gethex+0x2ca>
 800feb8:	ee18 0a10 	vmov	r0, s16
 800febc:	4621      	mov	r1, r4
 800febe:	f000 f9d7 	bl	8010270 <_Bfree>
 800fec2:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800fec4:	2300      	movs	r3, #0
 800fec6:	6013      	str	r3, [r2, #0]
 800fec8:	2750      	movs	r7, #80	; 0x50
 800feca:	e70c      	b.n	800fce6 <__gethex+0x12a>
 800fecc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800fece:	2b00      	cmp	r3, #0
 800fed0:	d1f2      	bne.n	800feb8 <__gethex+0x2fc>
 800fed2:	e7d8      	b.n	800fe86 <__gethex+0x2ca>
 800fed4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800fed6:	2b00      	cmp	r3, #0
 800fed8:	d1d5      	bne.n	800fe86 <__gethex+0x2ca>
 800feda:	e7ed      	b.n	800feb8 <__gethex+0x2fc>
 800fedc:	1e6f      	subs	r7, r5, #1
 800fede:	f1ba 0f00 	cmp.w	sl, #0
 800fee2:	d131      	bne.n	800ff48 <__gethex+0x38c>
 800fee4:	b127      	cbz	r7, 800fef0 <__gethex+0x334>
 800fee6:	4639      	mov	r1, r7
 800fee8:	4620      	mov	r0, r4
 800feea:	f000 fe1e 	bl	8010b2a <__any_on>
 800feee:	4682      	mov	sl, r0
 800fef0:	117b      	asrs	r3, r7, #5
 800fef2:	2101      	movs	r1, #1
 800fef4:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800fef8:	f007 071f 	and.w	r7, r7, #31
 800fefc:	fa01 f707 	lsl.w	r7, r1, r7
 800ff00:	421f      	tst	r7, r3
 800ff02:	4629      	mov	r1, r5
 800ff04:	4620      	mov	r0, r4
 800ff06:	bf18      	it	ne
 800ff08:	f04a 0a02 	orrne.w	sl, sl, #2
 800ff0c:	1b76      	subs	r6, r6, r5
 800ff0e:	f7ff fded 	bl	800faec <rshift>
 800ff12:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800ff16:	2702      	movs	r7, #2
 800ff18:	f1ba 0f00 	cmp.w	sl, #0
 800ff1c:	d048      	beq.n	800ffb0 <__gethex+0x3f4>
 800ff1e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800ff22:	2b02      	cmp	r3, #2
 800ff24:	d015      	beq.n	800ff52 <__gethex+0x396>
 800ff26:	2b03      	cmp	r3, #3
 800ff28:	d017      	beq.n	800ff5a <__gethex+0x39e>
 800ff2a:	2b01      	cmp	r3, #1
 800ff2c:	d109      	bne.n	800ff42 <__gethex+0x386>
 800ff2e:	f01a 0f02 	tst.w	sl, #2
 800ff32:	d006      	beq.n	800ff42 <__gethex+0x386>
 800ff34:	f8d9 0000 	ldr.w	r0, [r9]
 800ff38:	ea4a 0a00 	orr.w	sl, sl, r0
 800ff3c:	f01a 0f01 	tst.w	sl, #1
 800ff40:	d10e      	bne.n	800ff60 <__gethex+0x3a4>
 800ff42:	f047 0710 	orr.w	r7, r7, #16
 800ff46:	e033      	b.n	800ffb0 <__gethex+0x3f4>
 800ff48:	f04f 0a01 	mov.w	sl, #1
 800ff4c:	e7d0      	b.n	800fef0 <__gethex+0x334>
 800ff4e:	2701      	movs	r7, #1
 800ff50:	e7e2      	b.n	800ff18 <__gethex+0x35c>
 800ff52:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ff54:	f1c3 0301 	rsb	r3, r3, #1
 800ff58:	9315      	str	r3, [sp, #84]	; 0x54
 800ff5a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ff5c:	2b00      	cmp	r3, #0
 800ff5e:	d0f0      	beq.n	800ff42 <__gethex+0x386>
 800ff60:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800ff64:	f104 0314 	add.w	r3, r4, #20
 800ff68:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800ff6c:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800ff70:	f04f 0c00 	mov.w	ip, #0
 800ff74:	4618      	mov	r0, r3
 800ff76:	f853 2b04 	ldr.w	r2, [r3], #4
 800ff7a:	f1b2 3fff 	cmp.w	r2, #4294967295
 800ff7e:	d01c      	beq.n	800ffba <__gethex+0x3fe>
 800ff80:	3201      	adds	r2, #1
 800ff82:	6002      	str	r2, [r0, #0]
 800ff84:	2f02      	cmp	r7, #2
 800ff86:	f104 0314 	add.w	r3, r4, #20
 800ff8a:	d13f      	bne.n	801000c <__gethex+0x450>
 800ff8c:	f8d8 2000 	ldr.w	r2, [r8]
 800ff90:	3a01      	subs	r2, #1
 800ff92:	42b2      	cmp	r2, r6
 800ff94:	d10a      	bne.n	800ffac <__gethex+0x3f0>
 800ff96:	1171      	asrs	r1, r6, #5
 800ff98:	2201      	movs	r2, #1
 800ff9a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800ff9e:	f006 061f 	and.w	r6, r6, #31
 800ffa2:	fa02 f606 	lsl.w	r6, r2, r6
 800ffa6:	421e      	tst	r6, r3
 800ffa8:	bf18      	it	ne
 800ffaa:	4617      	movne	r7, r2
 800ffac:	f047 0720 	orr.w	r7, r7, #32
 800ffb0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800ffb2:	601c      	str	r4, [r3, #0]
 800ffb4:	9b04      	ldr	r3, [sp, #16]
 800ffb6:	601d      	str	r5, [r3, #0]
 800ffb8:	e695      	b.n	800fce6 <__gethex+0x12a>
 800ffba:	4299      	cmp	r1, r3
 800ffbc:	f843 cc04 	str.w	ip, [r3, #-4]
 800ffc0:	d8d8      	bhi.n	800ff74 <__gethex+0x3b8>
 800ffc2:	68a3      	ldr	r3, [r4, #8]
 800ffc4:	459b      	cmp	fp, r3
 800ffc6:	db19      	blt.n	800fffc <__gethex+0x440>
 800ffc8:	6861      	ldr	r1, [r4, #4]
 800ffca:	ee18 0a10 	vmov	r0, s16
 800ffce:	3101      	adds	r1, #1
 800ffd0:	f000 f90e 	bl	80101f0 <_Balloc>
 800ffd4:	4681      	mov	r9, r0
 800ffd6:	b918      	cbnz	r0, 800ffe0 <__gethex+0x424>
 800ffd8:	4b1a      	ldr	r3, [pc, #104]	; (8010044 <__gethex+0x488>)
 800ffda:	4602      	mov	r2, r0
 800ffdc:	2184      	movs	r1, #132	; 0x84
 800ffde:	e6a8      	b.n	800fd32 <__gethex+0x176>
 800ffe0:	6922      	ldr	r2, [r4, #16]
 800ffe2:	3202      	adds	r2, #2
 800ffe4:	f104 010c 	add.w	r1, r4, #12
 800ffe8:	0092      	lsls	r2, r2, #2
 800ffea:	300c      	adds	r0, #12
 800ffec:	f7fe ff8a 	bl	800ef04 <memcpy>
 800fff0:	4621      	mov	r1, r4
 800fff2:	ee18 0a10 	vmov	r0, s16
 800fff6:	f000 f93b 	bl	8010270 <_Bfree>
 800fffa:	464c      	mov	r4, r9
 800fffc:	6923      	ldr	r3, [r4, #16]
 800fffe:	1c5a      	adds	r2, r3, #1
 8010000:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8010004:	6122      	str	r2, [r4, #16]
 8010006:	2201      	movs	r2, #1
 8010008:	615a      	str	r2, [r3, #20]
 801000a:	e7bb      	b.n	800ff84 <__gethex+0x3c8>
 801000c:	6922      	ldr	r2, [r4, #16]
 801000e:	455a      	cmp	r2, fp
 8010010:	dd0b      	ble.n	801002a <__gethex+0x46e>
 8010012:	2101      	movs	r1, #1
 8010014:	4620      	mov	r0, r4
 8010016:	f7ff fd69 	bl	800faec <rshift>
 801001a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801001e:	3501      	adds	r5, #1
 8010020:	42ab      	cmp	r3, r5
 8010022:	f6ff aed0 	blt.w	800fdc6 <__gethex+0x20a>
 8010026:	2701      	movs	r7, #1
 8010028:	e7c0      	b.n	800ffac <__gethex+0x3f0>
 801002a:	f016 061f 	ands.w	r6, r6, #31
 801002e:	d0fa      	beq.n	8010026 <__gethex+0x46a>
 8010030:	4453      	add	r3, sl
 8010032:	f1c6 0620 	rsb	r6, r6, #32
 8010036:	f853 0c04 	ldr.w	r0, [r3, #-4]
 801003a:	f000 f9cb 	bl	80103d4 <__hi0bits>
 801003e:	42b0      	cmp	r0, r6
 8010040:	dbe7      	blt.n	8010012 <__gethex+0x456>
 8010042:	e7f0      	b.n	8010026 <__gethex+0x46a>
 8010044:	08012650 	.word	0x08012650

08010048 <L_shift>:
 8010048:	f1c2 0208 	rsb	r2, r2, #8
 801004c:	0092      	lsls	r2, r2, #2
 801004e:	b570      	push	{r4, r5, r6, lr}
 8010050:	f1c2 0620 	rsb	r6, r2, #32
 8010054:	6843      	ldr	r3, [r0, #4]
 8010056:	6804      	ldr	r4, [r0, #0]
 8010058:	fa03 f506 	lsl.w	r5, r3, r6
 801005c:	432c      	orrs	r4, r5
 801005e:	40d3      	lsrs	r3, r2
 8010060:	6004      	str	r4, [r0, #0]
 8010062:	f840 3f04 	str.w	r3, [r0, #4]!
 8010066:	4288      	cmp	r0, r1
 8010068:	d3f4      	bcc.n	8010054 <L_shift+0xc>
 801006a:	bd70      	pop	{r4, r5, r6, pc}

0801006c <__match>:
 801006c:	b530      	push	{r4, r5, lr}
 801006e:	6803      	ldr	r3, [r0, #0]
 8010070:	3301      	adds	r3, #1
 8010072:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010076:	b914      	cbnz	r4, 801007e <__match+0x12>
 8010078:	6003      	str	r3, [r0, #0]
 801007a:	2001      	movs	r0, #1
 801007c:	bd30      	pop	{r4, r5, pc}
 801007e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010082:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8010086:	2d19      	cmp	r5, #25
 8010088:	bf98      	it	ls
 801008a:	3220      	addls	r2, #32
 801008c:	42a2      	cmp	r2, r4
 801008e:	d0f0      	beq.n	8010072 <__match+0x6>
 8010090:	2000      	movs	r0, #0
 8010092:	e7f3      	b.n	801007c <__match+0x10>

08010094 <__hexnan>:
 8010094:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010098:	680b      	ldr	r3, [r1, #0]
 801009a:	115e      	asrs	r6, r3, #5
 801009c:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80100a0:	f013 031f 	ands.w	r3, r3, #31
 80100a4:	b087      	sub	sp, #28
 80100a6:	bf18      	it	ne
 80100a8:	3604      	addne	r6, #4
 80100aa:	2500      	movs	r5, #0
 80100ac:	1f37      	subs	r7, r6, #4
 80100ae:	4690      	mov	r8, r2
 80100b0:	6802      	ldr	r2, [r0, #0]
 80100b2:	9301      	str	r3, [sp, #4]
 80100b4:	4682      	mov	sl, r0
 80100b6:	f846 5c04 	str.w	r5, [r6, #-4]
 80100ba:	46b9      	mov	r9, r7
 80100bc:	463c      	mov	r4, r7
 80100be:	9502      	str	r5, [sp, #8]
 80100c0:	46ab      	mov	fp, r5
 80100c2:	7851      	ldrb	r1, [r2, #1]
 80100c4:	1c53      	adds	r3, r2, #1
 80100c6:	9303      	str	r3, [sp, #12]
 80100c8:	b341      	cbz	r1, 801011c <__hexnan+0x88>
 80100ca:	4608      	mov	r0, r1
 80100cc:	9205      	str	r2, [sp, #20]
 80100ce:	9104      	str	r1, [sp, #16]
 80100d0:	f7ff fd5e 	bl	800fb90 <__hexdig_fun>
 80100d4:	2800      	cmp	r0, #0
 80100d6:	d14f      	bne.n	8010178 <__hexnan+0xe4>
 80100d8:	9904      	ldr	r1, [sp, #16]
 80100da:	9a05      	ldr	r2, [sp, #20]
 80100dc:	2920      	cmp	r1, #32
 80100de:	d818      	bhi.n	8010112 <__hexnan+0x7e>
 80100e0:	9b02      	ldr	r3, [sp, #8]
 80100e2:	459b      	cmp	fp, r3
 80100e4:	dd13      	ble.n	801010e <__hexnan+0x7a>
 80100e6:	454c      	cmp	r4, r9
 80100e8:	d206      	bcs.n	80100f8 <__hexnan+0x64>
 80100ea:	2d07      	cmp	r5, #7
 80100ec:	dc04      	bgt.n	80100f8 <__hexnan+0x64>
 80100ee:	462a      	mov	r2, r5
 80100f0:	4649      	mov	r1, r9
 80100f2:	4620      	mov	r0, r4
 80100f4:	f7ff ffa8 	bl	8010048 <L_shift>
 80100f8:	4544      	cmp	r4, r8
 80100fa:	d950      	bls.n	801019e <__hexnan+0x10a>
 80100fc:	2300      	movs	r3, #0
 80100fe:	f1a4 0904 	sub.w	r9, r4, #4
 8010102:	f844 3c04 	str.w	r3, [r4, #-4]
 8010106:	f8cd b008 	str.w	fp, [sp, #8]
 801010a:	464c      	mov	r4, r9
 801010c:	461d      	mov	r5, r3
 801010e:	9a03      	ldr	r2, [sp, #12]
 8010110:	e7d7      	b.n	80100c2 <__hexnan+0x2e>
 8010112:	2929      	cmp	r1, #41	; 0x29
 8010114:	d156      	bne.n	80101c4 <__hexnan+0x130>
 8010116:	3202      	adds	r2, #2
 8010118:	f8ca 2000 	str.w	r2, [sl]
 801011c:	f1bb 0f00 	cmp.w	fp, #0
 8010120:	d050      	beq.n	80101c4 <__hexnan+0x130>
 8010122:	454c      	cmp	r4, r9
 8010124:	d206      	bcs.n	8010134 <__hexnan+0xa0>
 8010126:	2d07      	cmp	r5, #7
 8010128:	dc04      	bgt.n	8010134 <__hexnan+0xa0>
 801012a:	462a      	mov	r2, r5
 801012c:	4649      	mov	r1, r9
 801012e:	4620      	mov	r0, r4
 8010130:	f7ff ff8a 	bl	8010048 <L_shift>
 8010134:	4544      	cmp	r4, r8
 8010136:	d934      	bls.n	80101a2 <__hexnan+0x10e>
 8010138:	f1a8 0204 	sub.w	r2, r8, #4
 801013c:	4623      	mov	r3, r4
 801013e:	f853 1b04 	ldr.w	r1, [r3], #4
 8010142:	f842 1f04 	str.w	r1, [r2, #4]!
 8010146:	429f      	cmp	r7, r3
 8010148:	d2f9      	bcs.n	801013e <__hexnan+0xaa>
 801014a:	1b3b      	subs	r3, r7, r4
 801014c:	f023 0303 	bic.w	r3, r3, #3
 8010150:	3304      	adds	r3, #4
 8010152:	3401      	adds	r4, #1
 8010154:	3e03      	subs	r6, #3
 8010156:	42b4      	cmp	r4, r6
 8010158:	bf88      	it	hi
 801015a:	2304      	movhi	r3, #4
 801015c:	4443      	add	r3, r8
 801015e:	2200      	movs	r2, #0
 8010160:	f843 2b04 	str.w	r2, [r3], #4
 8010164:	429f      	cmp	r7, r3
 8010166:	d2fb      	bcs.n	8010160 <__hexnan+0xcc>
 8010168:	683b      	ldr	r3, [r7, #0]
 801016a:	b91b      	cbnz	r3, 8010174 <__hexnan+0xe0>
 801016c:	4547      	cmp	r7, r8
 801016e:	d127      	bne.n	80101c0 <__hexnan+0x12c>
 8010170:	2301      	movs	r3, #1
 8010172:	603b      	str	r3, [r7, #0]
 8010174:	2005      	movs	r0, #5
 8010176:	e026      	b.n	80101c6 <__hexnan+0x132>
 8010178:	3501      	adds	r5, #1
 801017a:	2d08      	cmp	r5, #8
 801017c:	f10b 0b01 	add.w	fp, fp, #1
 8010180:	dd06      	ble.n	8010190 <__hexnan+0xfc>
 8010182:	4544      	cmp	r4, r8
 8010184:	d9c3      	bls.n	801010e <__hexnan+0x7a>
 8010186:	2300      	movs	r3, #0
 8010188:	f844 3c04 	str.w	r3, [r4, #-4]
 801018c:	2501      	movs	r5, #1
 801018e:	3c04      	subs	r4, #4
 8010190:	6822      	ldr	r2, [r4, #0]
 8010192:	f000 000f 	and.w	r0, r0, #15
 8010196:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 801019a:	6022      	str	r2, [r4, #0]
 801019c:	e7b7      	b.n	801010e <__hexnan+0x7a>
 801019e:	2508      	movs	r5, #8
 80101a0:	e7b5      	b.n	801010e <__hexnan+0x7a>
 80101a2:	9b01      	ldr	r3, [sp, #4]
 80101a4:	2b00      	cmp	r3, #0
 80101a6:	d0df      	beq.n	8010168 <__hexnan+0xd4>
 80101a8:	f04f 32ff 	mov.w	r2, #4294967295
 80101ac:	f1c3 0320 	rsb	r3, r3, #32
 80101b0:	fa22 f303 	lsr.w	r3, r2, r3
 80101b4:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80101b8:	401a      	ands	r2, r3
 80101ba:	f846 2c04 	str.w	r2, [r6, #-4]
 80101be:	e7d3      	b.n	8010168 <__hexnan+0xd4>
 80101c0:	3f04      	subs	r7, #4
 80101c2:	e7d1      	b.n	8010168 <__hexnan+0xd4>
 80101c4:	2004      	movs	r0, #4
 80101c6:	b007      	add	sp, #28
 80101c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080101cc <__ascii_mbtowc>:
 80101cc:	b082      	sub	sp, #8
 80101ce:	b901      	cbnz	r1, 80101d2 <__ascii_mbtowc+0x6>
 80101d0:	a901      	add	r1, sp, #4
 80101d2:	b142      	cbz	r2, 80101e6 <__ascii_mbtowc+0x1a>
 80101d4:	b14b      	cbz	r3, 80101ea <__ascii_mbtowc+0x1e>
 80101d6:	7813      	ldrb	r3, [r2, #0]
 80101d8:	600b      	str	r3, [r1, #0]
 80101da:	7812      	ldrb	r2, [r2, #0]
 80101dc:	1e10      	subs	r0, r2, #0
 80101de:	bf18      	it	ne
 80101e0:	2001      	movne	r0, #1
 80101e2:	b002      	add	sp, #8
 80101e4:	4770      	bx	lr
 80101e6:	4610      	mov	r0, r2
 80101e8:	e7fb      	b.n	80101e2 <__ascii_mbtowc+0x16>
 80101ea:	f06f 0001 	mvn.w	r0, #1
 80101ee:	e7f8      	b.n	80101e2 <__ascii_mbtowc+0x16>

080101f0 <_Balloc>:
 80101f0:	b570      	push	{r4, r5, r6, lr}
 80101f2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80101f4:	4604      	mov	r4, r0
 80101f6:	460d      	mov	r5, r1
 80101f8:	b976      	cbnz	r6, 8010218 <_Balloc+0x28>
 80101fa:	2010      	movs	r0, #16
 80101fc:	f000 fdca 	bl	8010d94 <malloc>
 8010200:	4602      	mov	r2, r0
 8010202:	6260      	str	r0, [r4, #36]	; 0x24
 8010204:	b920      	cbnz	r0, 8010210 <_Balloc+0x20>
 8010206:	4b18      	ldr	r3, [pc, #96]	; (8010268 <_Balloc+0x78>)
 8010208:	4818      	ldr	r0, [pc, #96]	; (801026c <_Balloc+0x7c>)
 801020a:	2166      	movs	r1, #102	; 0x66
 801020c:	f000 fd92 	bl	8010d34 <__assert_func>
 8010210:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8010214:	6006      	str	r6, [r0, #0]
 8010216:	60c6      	str	r6, [r0, #12]
 8010218:	6a66      	ldr	r6, [r4, #36]	; 0x24
 801021a:	68f3      	ldr	r3, [r6, #12]
 801021c:	b183      	cbz	r3, 8010240 <_Balloc+0x50>
 801021e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010220:	68db      	ldr	r3, [r3, #12]
 8010222:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8010226:	b9b8      	cbnz	r0, 8010258 <_Balloc+0x68>
 8010228:	2101      	movs	r1, #1
 801022a:	fa01 f605 	lsl.w	r6, r1, r5
 801022e:	1d72      	adds	r2, r6, #5
 8010230:	0092      	lsls	r2, r2, #2
 8010232:	4620      	mov	r0, r4
 8010234:	f000 fc9a 	bl	8010b6c <_calloc_r>
 8010238:	b160      	cbz	r0, 8010254 <_Balloc+0x64>
 801023a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801023e:	e00e      	b.n	801025e <_Balloc+0x6e>
 8010240:	2221      	movs	r2, #33	; 0x21
 8010242:	2104      	movs	r1, #4
 8010244:	4620      	mov	r0, r4
 8010246:	f000 fc91 	bl	8010b6c <_calloc_r>
 801024a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801024c:	60f0      	str	r0, [r6, #12]
 801024e:	68db      	ldr	r3, [r3, #12]
 8010250:	2b00      	cmp	r3, #0
 8010252:	d1e4      	bne.n	801021e <_Balloc+0x2e>
 8010254:	2000      	movs	r0, #0
 8010256:	bd70      	pop	{r4, r5, r6, pc}
 8010258:	6802      	ldr	r2, [r0, #0]
 801025a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801025e:	2300      	movs	r3, #0
 8010260:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8010264:	e7f7      	b.n	8010256 <_Balloc+0x66>
 8010266:	bf00      	nop
 8010268:	080126dc 	.word	0x080126dc
 801026c:	080126f3 	.word	0x080126f3

08010270 <_Bfree>:
 8010270:	b570      	push	{r4, r5, r6, lr}
 8010272:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8010274:	4605      	mov	r5, r0
 8010276:	460c      	mov	r4, r1
 8010278:	b976      	cbnz	r6, 8010298 <_Bfree+0x28>
 801027a:	2010      	movs	r0, #16
 801027c:	f000 fd8a 	bl	8010d94 <malloc>
 8010280:	4602      	mov	r2, r0
 8010282:	6268      	str	r0, [r5, #36]	; 0x24
 8010284:	b920      	cbnz	r0, 8010290 <_Bfree+0x20>
 8010286:	4b09      	ldr	r3, [pc, #36]	; (80102ac <_Bfree+0x3c>)
 8010288:	4809      	ldr	r0, [pc, #36]	; (80102b0 <_Bfree+0x40>)
 801028a:	218a      	movs	r1, #138	; 0x8a
 801028c:	f000 fd52 	bl	8010d34 <__assert_func>
 8010290:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8010294:	6006      	str	r6, [r0, #0]
 8010296:	60c6      	str	r6, [r0, #12]
 8010298:	b13c      	cbz	r4, 80102aa <_Bfree+0x3a>
 801029a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 801029c:	6862      	ldr	r2, [r4, #4]
 801029e:	68db      	ldr	r3, [r3, #12]
 80102a0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80102a4:	6021      	str	r1, [r4, #0]
 80102a6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80102aa:	bd70      	pop	{r4, r5, r6, pc}
 80102ac:	080126dc 	.word	0x080126dc
 80102b0:	080126f3 	.word	0x080126f3

080102b4 <__multadd>:
 80102b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80102b8:	690d      	ldr	r5, [r1, #16]
 80102ba:	4607      	mov	r7, r0
 80102bc:	460c      	mov	r4, r1
 80102be:	461e      	mov	r6, r3
 80102c0:	f101 0c14 	add.w	ip, r1, #20
 80102c4:	2000      	movs	r0, #0
 80102c6:	f8dc 3000 	ldr.w	r3, [ip]
 80102ca:	b299      	uxth	r1, r3
 80102cc:	fb02 6101 	mla	r1, r2, r1, r6
 80102d0:	0c1e      	lsrs	r6, r3, #16
 80102d2:	0c0b      	lsrs	r3, r1, #16
 80102d4:	fb02 3306 	mla	r3, r2, r6, r3
 80102d8:	b289      	uxth	r1, r1
 80102da:	3001      	adds	r0, #1
 80102dc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80102e0:	4285      	cmp	r5, r0
 80102e2:	f84c 1b04 	str.w	r1, [ip], #4
 80102e6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80102ea:	dcec      	bgt.n	80102c6 <__multadd+0x12>
 80102ec:	b30e      	cbz	r6, 8010332 <__multadd+0x7e>
 80102ee:	68a3      	ldr	r3, [r4, #8]
 80102f0:	42ab      	cmp	r3, r5
 80102f2:	dc19      	bgt.n	8010328 <__multadd+0x74>
 80102f4:	6861      	ldr	r1, [r4, #4]
 80102f6:	4638      	mov	r0, r7
 80102f8:	3101      	adds	r1, #1
 80102fa:	f7ff ff79 	bl	80101f0 <_Balloc>
 80102fe:	4680      	mov	r8, r0
 8010300:	b928      	cbnz	r0, 801030e <__multadd+0x5a>
 8010302:	4602      	mov	r2, r0
 8010304:	4b0c      	ldr	r3, [pc, #48]	; (8010338 <__multadd+0x84>)
 8010306:	480d      	ldr	r0, [pc, #52]	; (801033c <__multadd+0x88>)
 8010308:	21b5      	movs	r1, #181	; 0xb5
 801030a:	f000 fd13 	bl	8010d34 <__assert_func>
 801030e:	6922      	ldr	r2, [r4, #16]
 8010310:	3202      	adds	r2, #2
 8010312:	f104 010c 	add.w	r1, r4, #12
 8010316:	0092      	lsls	r2, r2, #2
 8010318:	300c      	adds	r0, #12
 801031a:	f7fe fdf3 	bl	800ef04 <memcpy>
 801031e:	4621      	mov	r1, r4
 8010320:	4638      	mov	r0, r7
 8010322:	f7ff ffa5 	bl	8010270 <_Bfree>
 8010326:	4644      	mov	r4, r8
 8010328:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 801032c:	3501      	adds	r5, #1
 801032e:	615e      	str	r6, [r3, #20]
 8010330:	6125      	str	r5, [r4, #16]
 8010332:	4620      	mov	r0, r4
 8010334:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010338:	08012650 	.word	0x08012650
 801033c:	080126f3 	.word	0x080126f3

08010340 <__s2b>:
 8010340:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010344:	460c      	mov	r4, r1
 8010346:	4615      	mov	r5, r2
 8010348:	461f      	mov	r7, r3
 801034a:	2209      	movs	r2, #9
 801034c:	3308      	adds	r3, #8
 801034e:	4606      	mov	r6, r0
 8010350:	fb93 f3f2 	sdiv	r3, r3, r2
 8010354:	2100      	movs	r1, #0
 8010356:	2201      	movs	r2, #1
 8010358:	429a      	cmp	r2, r3
 801035a:	db09      	blt.n	8010370 <__s2b+0x30>
 801035c:	4630      	mov	r0, r6
 801035e:	f7ff ff47 	bl	80101f0 <_Balloc>
 8010362:	b940      	cbnz	r0, 8010376 <__s2b+0x36>
 8010364:	4602      	mov	r2, r0
 8010366:	4b19      	ldr	r3, [pc, #100]	; (80103cc <__s2b+0x8c>)
 8010368:	4819      	ldr	r0, [pc, #100]	; (80103d0 <__s2b+0x90>)
 801036a:	21ce      	movs	r1, #206	; 0xce
 801036c:	f000 fce2 	bl	8010d34 <__assert_func>
 8010370:	0052      	lsls	r2, r2, #1
 8010372:	3101      	adds	r1, #1
 8010374:	e7f0      	b.n	8010358 <__s2b+0x18>
 8010376:	9b08      	ldr	r3, [sp, #32]
 8010378:	6143      	str	r3, [r0, #20]
 801037a:	2d09      	cmp	r5, #9
 801037c:	f04f 0301 	mov.w	r3, #1
 8010380:	6103      	str	r3, [r0, #16]
 8010382:	dd16      	ble.n	80103b2 <__s2b+0x72>
 8010384:	f104 0909 	add.w	r9, r4, #9
 8010388:	46c8      	mov	r8, r9
 801038a:	442c      	add	r4, r5
 801038c:	f818 3b01 	ldrb.w	r3, [r8], #1
 8010390:	4601      	mov	r1, r0
 8010392:	3b30      	subs	r3, #48	; 0x30
 8010394:	220a      	movs	r2, #10
 8010396:	4630      	mov	r0, r6
 8010398:	f7ff ff8c 	bl	80102b4 <__multadd>
 801039c:	45a0      	cmp	r8, r4
 801039e:	d1f5      	bne.n	801038c <__s2b+0x4c>
 80103a0:	f1a5 0408 	sub.w	r4, r5, #8
 80103a4:	444c      	add	r4, r9
 80103a6:	1b2d      	subs	r5, r5, r4
 80103a8:	1963      	adds	r3, r4, r5
 80103aa:	42bb      	cmp	r3, r7
 80103ac:	db04      	blt.n	80103b8 <__s2b+0x78>
 80103ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80103b2:	340a      	adds	r4, #10
 80103b4:	2509      	movs	r5, #9
 80103b6:	e7f6      	b.n	80103a6 <__s2b+0x66>
 80103b8:	f814 3b01 	ldrb.w	r3, [r4], #1
 80103bc:	4601      	mov	r1, r0
 80103be:	3b30      	subs	r3, #48	; 0x30
 80103c0:	220a      	movs	r2, #10
 80103c2:	4630      	mov	r0, r6
 80103c4:	f7ff ff76 	bl	80102b4 <__multadd>
 80103c8:	e7ee      	b.n	80103a8 <__s2b+0x68>
 80103ca:	bf00      	nop
 80103cc:	08012650 	.word	0x08012650
 80103d0:	080126f3 	.word	0x080126f3

080103d4 <__hi0bits>:
 80103d4:	0c03      	lsrs	r3, r0, #16
 80103d6:	041b      	lsls	r3, r3, #16
 80103d8:	b9d3      	cbnz	r3, 8010410 <__hi0bits+0x3c>
 80103da:	0400      	lsls	r0, r0, #16
 80103dc:	2310      	movs	r3, #16
 80103de:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80103e2:	bf04      	itt	eq
 80103e4:	0200      	lsleq	r0, r0, #8
 80103e6:	3308      	addeq	r3, #8
 80103e8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80103ec:	bf04      	itt	eq
 80103ee:	0100      	lsleq	r0, r0, #4
 80103f0:	3304      	addeq	r3, #4
 80103f2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80103f6:	bf04      	itt	eq
 80103f8:	0080      	lsleq	r0, r0, #2
 80103fa:	3302      	addeq	r3, #2
 80103fc:	2800      	cmp	r0, #0
 80103fe:	db05      	blt.n	801040c <__hi0bits+0x38>
 8010400:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8010404:	f103 0301 	add.w	r3, r3, #1
 8010408:	bf08      	it	eq
 801040a:	2320      	moveq	r3, #32
 801040c:	4618      	mov	r0, r3
 801040e:	4770      	bx	lr
 8010410:	2300      	movs	r3, #0
 8010412:	e7e4      	b.n	80103de <__hi0bits+0xa>

08010414 <__lo0bits>:
 8010414:	6803      	ldr	r3, [r0, #0]
 8010416:	f013 0207 	ands.w	r2, r3, #7
 801041a:	4601      	mov	r1, r0
 801041c:	d00b      	beq.n	8010436 <__lo0bits+0x22>
 801041e:	07da      	lsls	r2, r3, #31
 8010420:	d423      	bmi.n	801046a <__lo0bits+0x56>
 8010422:	0798      	lsls	r0, r3, #30
 8010424:	bf49      	itett	mi
 8010426:	085b      	lsrmi	r3, r3, #1
 8010428:	089b      	lsrpl	r3, r3, #2
 801042a:	2001      	movmi	r0, #1
 801042c:	600b      	strmi	r3, [r1, #0]
 801042e:	bf5c      	itt	pl
 8010430:	600b      	strpl	r3, [r1, #0]
 8010432:	2002      	movpl	r0, #2
 8010434:	4770      	bx	lr
 8010436:	b298      	uxth	r0, r3
 8010438:	b9a8      	cbnz	r0, 8010466 <__lo0bits+0x52>
 801043a:	0c1b      	lsrs	r3, r3, #16
 801043c:	2010      	movs	r0, #16
 801043e:	b2da      	uxtb	r2, r3
 8010440:	b90a      	cbnz	r2, 8010446 <__lo0bits+0x32>
 8010442:	3008      	adds	r0, #8
 8010444:	0a1b      	lsrs	r3, r3, #8
 8010446:	071a      	lsls	r2, r3, #28
 8010448:	bf04      	itt	eq
 801044a:	091b      	lsreq	r3, r3, #4
 801044c:	3004      	addeq	r0, #4
 801044e:	079a      	lsls	r2, r3, #30
 8010450:	bf04      	itt	eq
 8010452:	089b      	lsreq	r3, r3, #2
 8010454:	3002      	addeq	r0, #2
 8010456:	07da      	lsls	r2, r3, #31
 8010458:	d403      	bmi.n	8010462 <__lo0bits+0x4e>
 801045a:	085b      	lsrs	r3, r3, #1
 801045c:	f100 0001 	add.w	r0, r0, #1
 8010460:	d005      	beq.n	801046e <__lo0bits+0x5a>
 8010462:	600b      	str	r3, [r1, #0]
 8010464:	4770      	bx	lr
 8010466:	4610      	mov	r0, r2
 8010468:	e7e9      	b.n	801043e <__lo0bits+0x2a>
 801046a:	2000      	movs	r0, #0
 801046c:	4770      	bx	lr
 801046e:	2020      	movs	r0, #32
 8010470:	4770      	bx	lr
	...

08010474 <__i2b>:
 8010474:	b510      	push	{r4, lr}
 8010476:	460c      	mov	r4, r1
 8010478:	2101      	movs	r1, #1
 801047a:	f7ff feb9 	bl	80101f0 <_Balloc>
 801047e:	4602      	mov	r2, r0
 8010480:	b928      	cbnz	r0, 801048e <__i2b+0x1a>
 8010482:	4b05      	ldr	r3, [pc, #20]	; (8010498 <__i2b+0x24>)
 8010484:	4805      	ldr	r0, [pc, #20]	; (801049c <__i2b+0x28>)
 8010486:	f44f 71a0 	mov.w	r1, #320	; 0x140
 801048a:	f000 fc53 	bl	8010d34 <__assert_func>
 801048e:	2301      	movs	r3, #1
 8010490:	6144      	str	r4, [r0, #20]
 8010492:	6103      	str	r3, [r0, #16]
 8010494:	bd10      	pop	{r4, pc}
 8010496:	bf00      	nop
 8010498:	08012650 	.word	0x08012650
 801049c:	080126f3 	.word	0x080126f3

080104a0 <__multiply>:
 80104a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80104a4:	4691      	mov	r9, r2
 80104a6:	690a      	ldr	r2, [r1, #16]
 80104a8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80104ac:	429a      	cmp	r2, r3
 80104ae:	bfb8      	it	lt
 80104b0:	460b      	movlt	r3, r1
 80104b2:	460c      	mov	r4, r1
 80104b4:	bfbc      	itt	lt
 80104b6:	464c      	movlt	r4, r9
 80104b8:	4699      	movlt	r9, r3
 80104ba:	6927      	ldr	r7, [r4, #16]
 80104bc:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80104c0:	68a3      	ldr	r3, [r4, #8]
 80104c2:	6861      	ldr	r1, [r4, #4]
 80104c4:	eb07 060a 	add.w	r6, r7, sl
 80104c8:	42b3      	cmp	r3, r6
 80104ca:	b085      	sub	sp, #20
 80104cc:	bfb8      	it	lt
 80104ce:	3101      	addlt	r1, #1
 80104d0:	f7ff fe8e 	bl	80101f0 <_Balloc>
 80104d4:	b930      	cbnz	r0, 80104e4 <__multiply+0x44>
 80104d6:	4602      	mov	r2, r0
 80104d8:	4b44      	ldr	r3, [pc, #272]	; (80105ec <__multiply+0x14c>)
 80104da:	4845      	ldr	r0, [pc, #276]	; (80105f0 <__multiply+0x150>)
 80104dc:	f240 115d 	movw	r1, #349	; 0x15d
 80104e0:	f000 fc28 	bl	8010d34 <__assert_func>
 80104e4:	f100 0514 	add.w	r5, r0, #20
 80104e8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80104ec:	462b      	mov	r3, r5
 80104ee:	2200      	movs	r2, #0
 80104f0:	4543      	cmp	r3, r8
 80104f2:	d321      	bcc.n	8010538 <__multiply+0x98>
 80104f4:	f104 0314 	add.w	r3, r4, #20
 80104f8:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80104fc:	f109 0314 	add.w	r3, r9, #20
 8010500:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8010504:	9202      	str	r2, [sp, #8]
 8010506:	1b3a      	subs	r2, r7, r4
 8010508:	3a15      	subs	r2, #21
 801050a:	f022 0203 	bic.w	r2, r2, #3
 801050e:	3204      	adds	r2, #4
 8010510:	f104 0115 	add.w	r1, r4, #21
 8010514:	428f      	cmp	r7, r1
 8010516:	bf38      	it	cc
 8010518:	2204      	movcc	r2, #4
 801051a:	9201      	str	r2, [sp, #4]
 801051c:	9a02      	ldr	r2, [sp, #8]
 801051e:	9303      	str	r3, [sp, #12]
 8010520:	429a      	cmp	r2, r3
 8010522:	d80c      	bhi.n	801053e <__multiply+0x9e>
 8010524:	2e00      	cmp	r6, #0
 8010526:	dd03      	ble.n	8010530 <__multiply+0x90>
 8010528:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 801052c:	2b00      	cmp	r3, #0
 801052e:	d05a      	beq.n	80105e6 <__multiply+0x146>
 8010530:	6106      	str	r6, [r0, #16]
 8010532:	b005      	add	sp, #20
 8010534:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010538:	f843 2b04 	str.w	r2, [r3], #4
 801053c:	e7d8      	b.n	80104f0 <__multiply+0x50>
 801053e:	f8b3 a000 	ldrh.w	sl, [r3]
 8010542:	f1ba 0f00 	cmp.w	sl, #0
 8010546:	d024      	beq.n	8010592 <__multiply+0xf2>
 8010548:	f104 0e14 	add.w	lr, r4, #20
 801054c:	46a9      	mov	r9, r5
 801054e:	f04f 0c00 	mov.w	ip, #0
 8010552:	f85e 2b04 	ldr.w	r2, [lr], #4
 8010556:	f8d9 1000 	ldr.w	r1, [r9]
 801055a:	fa1f fb82 	uxth.w	fp, r2
 801055e:	b289      	uxth	r1, r1
 8010560:	fb0a 110b 	mla	r1, sl, fp, r1
 8010564:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8010568:	f8d9 2000 	ldr.w	r2, [r9]
 801056c:	4461      	add	r1, ip
 801056e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8010572:	fb0a c20b 	mla	r2, sl, fp, ip
 8010576:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 801057a:	b289      	uxth	r1, r1
 801057c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8010580:	4577      	cmp	r7, lr
 8010582:	f849 1b04 	str.w	r1, [r9], #4
 8010586:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801058a:	d8e2      	bhi.n	8010552 <__multiply+0xb2>
 801058c:	9a01      	ldr	r2, [sp, #4]
 801058e:	f845 c002 	str.w	ip, [r5, r2]
 8010592:	9a03      	ldr	r2, [sp, #12]
 8010594:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8010598:	3304      	adds	r3, #4
 801059a:	f1b9 0f00 	cmp.w	r9, #0
 801059e:	d020      	beq.n	80105e2 <__multiply+0x142>
 80105a0:	6829      	ldr	r1, [r5, #0]
 80105a2:	f104 0c14 	add.w	ip, r4, #20
 80105a6:	46ae      	mov	lr, r5
 80105a8:	f04f 0a00 	mov.w	sl, #0
 80105ac:	f8bc b000 	ldrh.w	fp, [ip]
 80105b0:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80105b4:	fb09 220b 	mla	r2, r9, fp, r2
 80105b8:	4492      	add	sl, r2
 80105ba:	b289      	uxth	r1, r1
 80105bc:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 80105c0:	f84e 1b04 	str.w	r1, [lr], #4
 80105c4:	f85c 2b04 	ldr.w	r2, [ip], #4
 80105c8:	f8be 1000 	ldrh.w	r1, [lr]
 80105cc:	0c12      	lsrs	r2, r2, #16
 80105ce:	fb09 1102 	mla	r1, r9, r2, r1
 80105d2:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 80105d6:	4567      	cmp	r7, ip
 80105d8:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80105dc:	d8e6      	bhi.n	80105ac <__multiply+0x10c>
 80105de:	9a01      	ldr	r2, [sp, #4]
 80105e0:	50a9      	str	r1, [r5, r2]
 80105e2:	3504      	adds	r5, #4
 80105e4:	e79a      	b.n	801051c <__multiply+0x7c>
 80105e6:	3e01      	subs	r6, #1
 80105e8:	e79c      	b.n	8010524 <__multiply+0x84>
 80105ea:	bf00      	nop
 80105ec:	08012650 	.word	0x08012650
 80105f0:	080126f3 	.word	0x080126f3

080105f4 <__pow5mult>:
 80105f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80105f8:	4615      	mov	r5, r2
 80105fa:	f012 0203 	ands.w	r2, r2, #3
 80105fe:	4606      	mov	r6, r0
 8010600:	460f      	mov	r7, r1
 8010602:	d007      	beq.n	8010614 <__pow5mult+0x20>
 8010604:	4c25      	ldr	r4, [pc, #148]	; (801069c <__pow5mult+0xa8>)
 8010606:	3a01      	subs	r2, #1
 8010608:	2300      	movs	r3, #0
 801060a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801060e:	f7ff fe51 	bl	80102b4 <__multadd>
 8010612:	4607      	mov	r7, r0
 8010614:	10ad      	asrs	r5, r5, #2
 8010616:	d03d      	beq.n	8010694 <__pow5mult+0xa0>
 8010618:	6a74      	ldr	r4, [r6, #36]	; 0x24
 801061a:	b97c      	cbnz	r4, 801063c <__pow5mult+0x48>
 801061c:	2010      	movs	r0, #16
 801061e:	f000 fbb9 	bl	8010d94 <malloc>
 8010622:	4602      	mov	r2, r0
 8010624:	6270      	str	r0, [r6, #36]	; 0x24
 8010626:	b928      	cbnz	r0, 8010634 <__pow5mult+0x40>
 8010628:	4b1d      	ldr	r3, [pc, #116]	; (80106a0 <__pow5mult+0xac>)
 801062a:	481e      	ldr	r0, [pc, #120]	; (80106a4 <__pow5mult+0xb0>)
 801062c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8010630:	f000 fb80 	bl	8010d34 <__assert_func>
 8010634:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8010638:	6004      	str	r4, [r0, #0]
 801063a:	60c4      	str	r4, [r0, #12]
 801063c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8010640:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8010644:	b94c      	cbnz	r4, 801065a <__pow5mult+0x66>
 8010646:	f240 2171 	movw	r1, #625	; 0x271
 801064a:	4630      	mov	r0, r6
 801064c:	f7ff ff12 	bl	8010474 <__i2b>
 8010650:	2300      	movs	r3, #0
 8010652:	f8c8 0008 	str.w	r0, [r8, #8]
 8010656:	4604      	mov	r4, r0
 8010658:	6003      	str	r3, [r0, #0]
 801065a:	f04f 0900 	mov.w	r9, #0
 801065e:	07eb      	lsls	r3, r5, #31
 8010660:	d50a      	bpl.n	8010678 <__pow5mult+0x84>
 8010662:	4639      	mov	r1, r7
 8010664:	4622      	mov	r2, r4
 8010666:	4630      	mov	r0, r6
 8010668:	f7ff ff1a 	bl	80104a0 <__multiply>
 801066c:	4639      	mov	r1, r7
 801066e:	4680      	mov	r8, r0
 8010670:	4630      	mov	r0, r6
 8010672:	f7ff fdfd 	bl	8010270 <_Bfree>
 8010676:	4647      	mov	r7, r8
 8010678:	106d      	asrs	r5, r5, #1
 801067a:	d00b      	beq.n	8010694 <__pow5mult+0xa0>
 801067c:	6820      	ldr	r0, [r4, #0]
 801067e:	b938      	cbnz	r0, 8010690 <__pow5mult+0x9c>
 8010680:	4622      	mov	r2, r4
 8010682:	4621      	mov	r1, r4
 8010684:	4630      	mov	r0, r6
 8010686:	f7ff ff0b 	bl	80104a0 <__multiply>
 801068a:	6020      	str	r0, [r4, #0]
 801068c:	f8c0 9000 	str.w	r9, [r0]
 8010690:	4604      	mov	r4, r0
 8010692:	e7e4      	b.n	801065e <__pow5mult+0x6a>
 8010694:	4638      	mov	r0, r7
 8010696:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801069a:	bf00      	nop
 801069c:	08012840 	.word	0x08012840
 80106a0:	080126dc 	.word	0x080126dc
 80106a4:	080126f3 	.word	0x080126f3

080106a8 <__lshift>:
 80106a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80106ac:	460c      	mov	r4, r1
 80106ae:	6849      	ldr	r1, [r1, #4]
 80106b0:	6923      	ldr	r3, [r4, #16]
 80106b2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80106b6:	68a3      	ldr	r3, [r4, #8]
 80106b8:	4607      	mov	r7, r0
 80106ba:	4691      	mov	r9, r2
 80106bc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80106c0:	f108 0601 	add.w	r6, r8, #1
 80106c4:	42b3      	cmp	r3, r6
 80106c6:	db0b      	blt.n	80106e0 <__lshift+0x38>
 80106c8:	4638      	mov	r0, r7
 80106ca:	f7ff fd91 	bl	80101f0 <_Balloc>
 80106ce:	4605      	mov	r5, r0
 80106d0:	b948      	cbnz	r0, 80106e6 <__lshift+0x3e>
 80106d2:	4602      	mov	r2, r0
 80106d4:	4b2a      	ldr	r3, [pc, #168]	; (8010780 <__lshift+0xd8>)
 80106d6:	482b      	ldr	r0, [pc, #172]	; (8010784 <__lshift+0xdc>)
 80106d8:	f240 11d9 	movw	r1, #473	; 0x1d9
 80106dc:	f000 fb2a 	bl	8010d34 <__assert_func>
 80106e0:	3101      	adds	r1, #1
 80106e2:	005b      	lsls	r3, r3, #1
 80106e4:	e7ee      	b.n	80106c4 <__lshift+0x1c>
 80106e6:	2300      	movs	r3, #0
 80106e8:	f100 0114 	add.w	r1, r0, #20
 80106ec:	f100 0210 	add.w	r2, r0, #16
 80106f0:	4618      	mov	r0, r3
 80106f2:	4553      	cmp	r3, sl
 80106f4:	db37      	blt.n	8010766 <__lshift+0xbe>
 80106f6:	6920      	ldr	r0, [r4, #16]
 80106f8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80106fc:	f104 0314 	add.w	r3, r4, #20
 8010700:	f019 091f 	ands.w	r9, r9, #31
 8010704:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8010708:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 801070c:	d02f      	beq.n	801076e <__lshift+0xc6>
 801070e:	f1c9 0e20 	rsb	lr, r9, #32
 8010712:	468a      	mov	sl, r1
 8010714:	f04f 0c00 	mov.w	ip, #0
 8010718:	681a      	ldr	r2, [r3, #0]
 801071a:	fa02 f209 	lsl.w	r2, r2, r9
 801071e:	ea42 020c 	orr.w	r2, r2, ip
 8010722:	f84a 2b04 	str.w	r2, [sl], #4
 8010726:	f853 2b04 	ldr.w	r2, [r3], #4
 801072a:	4298      	cmp	r0, r3
 801072c:	fa22 fc0e 	lsr.w	ip, r2, lr
 8010730:	d8f2      	bhi.n	8010718 <__lshift+0x70>
 8010732:	1b03      	subs	r3, r0, r4
 8010734:	3b15      	subs	r3, #21
 8010736:	f023 0303 	bic.w	r3, r3, #3
 801073a:	3304      	adds	r3, #4
 801073c:	f104 0215 	add.w	r2, r4, #21
 8010740:	4290      	cmp	r0, r2
 8010742:	bf38      	it	cc
 8010744:	2304      	movcc	r3, #4
 8010746:	f841 c003 	str.w	ip, [r1, r3]
 801074a:	f1bc 0f00 	cmp.w	ip, #0
 801074e:	d001      	beq.n	8010754 <__lshift+0xac>
 8010750:	f108 0602 	add.w	r6, r8, #2
 8010754:	3e01      	subs	r6, #1
 8010756:	4638      	mov	r0, r7
 8010758:	612e      	str	r6, [r5, #16]
 801075a:	4621      	mov	r1, r4
 801075c:	f7ff fd88 	bl	8010270 <_Bfree>
 8010760:	4628      	mov	r0, r5
 8010762:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010766:	f842 0f04 	str.w	r0, [r2, #4]!
 801076a:	3301      	adds	r3, #1
 801076c:	e7c1      	b.n	80106f2 <__lshift+0x4a>
 801076e:	3904      	subs	r1, #4
 8010770:	f853 2b04 	ldr.w	r2, [r3], #4
 8010774:	f841 2f04 	str.w	r2, [r1, #4]!
 8010778:	4298      	cmp	r0, r3
 801077a:	d8f9      	bhi.n	8010770 <__lshift+0xc8>
 801077c:	e7ea      	b.n	8010754 <__lshift+0xac>
 801077e:	bf00      	nop
 8010780:	08012650 	.word	0x08012650
 8010784:	080126f3 	.word	0x080126f3

08010788 <__mcmp>:
 8010788:	b530      	push	{r4, r5, lr}
 801078a:	6902      	ldr	r2, [r0, #16]
 801078c:	690c      	ldr	r4, [r1, #16]
 801078e:	1b12      	subs	r2, r2, r4
 8010790:	d10e      	bne.n	80107b0 <__mcmp+0x28>
 8010792:	f100 0314 	add.w	r3, r0, #20
 8010796:	3114      	adds	r1, #20
 8010798:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 801079c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80107a0:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80107a4:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80107a8:	42a5      	cmp	r5, r4
 80107aa:	d003      	beq.n	80107b4 <__mcmp+0x2c>
 80107ac:	d305      	bcc.n	80107ba <__mcmp+0x32>
 80107ae:	2201      	movs	r2, #1
 80107b0:	4610      	mov	r0, r2
 80107b2:	bd30      	pop	{r4, r5, pc}
 80107b4:	4283      	cmp	r3, r0
 80107b6:	d3f3      	bcc.n	80107a0 <__mcmp+0x18>
 80107b8:	e7fa      	b.n	80107b0 <__mcmp+0x28>
 80107ba:	f04f 32ff 	mov.w	r2, #4294967295
 80107be:	e7f7      	b.n	80107b0 <__mcmp+0x28>

080107c0 <__mdiff>:
 80107c0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80107c4:	460c      	mov	r4, r1
 80107c6:	4606      	mov	r6, r0
 80107c8:	4611      	mov	r1, r2
 80107ca:	4620      	mov	r0, r4
 80107cc:	4690      	mov	r8, r2
 80107ce:	f7ff ffdb 	bl	8010788 <__mcmp>
 80107d2:	1e05      	subs	r5, r0, #0
 80107d4:	d110      	bne.n	80107f8 <__mdiff+0x38>
 80107d6:	4629      	mov	r1, r5
 80107d8:	4630      	mov	r0, r6
 80107da:	f7ff fd09 	bl	80101f0 <_Balloc>
 80107de:	b930      	cbnz	r0, 80107ee <__mdiff+0x2e>
 80107e0:	4b3a      	ldr	r3, [pc, #232]	; (80108cc <__mdiff+0x10c>)
 80107e2:	4602      	mov	r2, r0
 80107e4:	f240 2132 	movw	r1, #562	; 0x232
 80107e8:	4839      	ldr	r0, [pc, #228]	; (80108d0 <__mdiff+0x110>)
 80107ea:	f000 faa3 	bl	8010d34 <__assert_func>
 80107ee:	2301      	movs	r3, #1
 80107f0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80107f4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80107f8:	bfa4      	itt	ge
 80107fa:	4643      	movge	r3, r8
 80107fc:	46a0      	movge	r8, r4
 80107fe:	4630      	mov	r0, r6
 8010800:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8010804:	bfa6      	itte	ge
 8010806:	461c      	movge	r4, r3
 8010808:	2500      	movge	r5, #0
 801080a:	2501      	movlt	r5, #1
 801080c:	f7ff fcf0 	bl	80101f0 <_Balloc>
 8010810:	b920      	cbnz	r0, 801081c <__mdiff+0x5c>
 8010812:	4b2e      	ldr	r3, [pc, #184]	; (80108cc <__mdiff+0x10c>)
 8010814:	4602      	mov	r2, r0
 8010816:	f44f 7110 	mov.w	r1, #576	; 0x240
 801081a:	e7e5      	b.n	80107e8 <__mdiff+0x28>
 801081c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8010820:	6926      	ldr	r6, [r4, #16]
 8010822:	60c5      	str	r5, [r0, #12]
 8010824:	f104 0914 	add.w	r9, r4, #20
 8010828:	f108 0514 	add.w	r5, r8, #20
 801082c:	f100 0e14 	add.w	lr, r0, #20
 8010830:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8010834:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8010838:	f108 0210 	add.w	r2, r8, #16
 801083c:	46f2      	mov	sl, lr
 801083e:	2100      	movs	r1, #0
 8010840:	f859 3b04 	ldr.w	r3, [r9], #4
 8010844:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8010848:	fa1f f883 	uxth.w	r8, r3
 801084c:	fa11 f18b 	uxtah	r1, r1, fp
 8010850:	0c1b      	lsrs	r3, r3, #16
 8010852:	eba1 0808 	sub.w	r8, r1, r8
 8010856:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 801085a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 801085e:	fa1f f888 	uxth.w	r8, r8
 8010862:	1419      	asrs	r1, r3, #16
 8010864:	454e      	cmp	r6, r9
 8010866:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 801086a:	f84a 3b04 	str.w	r3, [sl], #4
 801086e:	d8e7      	bhi.n	8010840 <__mdiff+0x80>
 8010870:	1b33      	subs	r3, r6, r4
 8010872:	3b15      	subs	r3, #21
 8010874:	f023 0303 	bic.w	r3, r3, #3
 8010878:	3304      	adds	r3, #4
 801087a:	3415      	adds	r4, #21
 801087c:	42a6      	cmp	r6, r4
 801087e:	bf38      	it	cc
 8010880:	2304      	movcc	r3, #4
 8010882:	441d      	add	r5, r3
 8010884:	4473      	add	r3, lr
 8010886:	469e      	mov	lr, r3
 8010888:	462e      	mov	r6, r5
 801088a:	4566      	cmp	r6, ip
 801088c:	d30e      	bcc.n	80108ac <__mdiff+0xec>
 801088e:	f10c 0203 	add.w	r2, ip, #3
 8010892:	1b52      	subs	r2, r2, r5
 8010894:	f022 0203 	bic.w	r2, r2, #3
 8010898:	3d03      	subs	r5, #3
 801089a:	45ac      	cmp	ip, r5
 801089c:	bf38      	it	cc
 801089e:	2200      	movcc	r2, #0
 80108a0:	441a      	add	r2, r3
 80108a2:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80108a6:	b17b      	cbz	r3, 80108c8 <__mdiff+0x108>
 80108a8:	6107      	str	r7, [r0, #16]
 80108aa:	e7a3      	b.n	80107f4 <__mdiff+0x34>
 80108ac:	f856 8b04 	ldr.w	r8, [r6], #4
 80108b0:	fa11 f288 	uxtah	r2, r1, r8
 80108b4:	1414      	asrs	r4, r2, #16
 80108b6:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80108ba:	b292      	uxth	r2, r2
 80108bc:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80108c0:	f84e 2b04 	str.w	r2, [lr], #4
 80108c4:	1421      	asrs	r1, r4, #16
 80108c6:	e7e0      	b.n	801088a <__mdiff+0xca>
 80108c8:	3f01      	subs	r7, #1
 80108ca:	e7ea      	b.n	80108a2 <__mdiff+0xe2>
 80108cc:	08012650 	.word	0x08012650
 80108d0:	080126f3 	.word	0x080126f3

080108d4 <__ulp>:
 80108d4:	b082      	sub	sp, #8
 80108d6:	ed8d 0b00 	vstr	d0, [sp]
 80108da:	9b01      	ldr	r3, [sp, #4]
 80108dc:	4912      	ldr	r1, [pc, #72]	; (8010928 <__ulp+0x54>)
 80108de:	4019      	ands	r1, r3
 80108e0:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 80108e4:	2900      	cmp	r1, #0
 80108e6:	dd05      	ble.n	80108f4 <__ulp+0x20>
 80108e8:	2200      	movs	r2, #0
 80108ea:	460b      	mov	r3, r1
 80108ec:	ec43 2b10 	vmov	d0, r2, r3
 80108f0:	b002      	add	sp, #8
 80108f2:	4770      	bx	lr
 80108f4:	4249      	negs	r1, r1
 80108f6:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 80108fa:	ea4f 5021 	mov.w	r0, r1, asr #20
 80108fe:	f04f 0200 	mov.w	r2, #0
 8010902:	f04f 0300 	mov.w	r3, #0
 8010906:	da04      	bge.n	8010912 <__ulp+0x3e>
 8010908:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 801090c:	fa41 f300 	asr.w	r3, r1, r0
 8010910:	e7ec      	b.n	80108ec <__ulp+0x18>
 8010912:	f1a0 0114 	sub.w	r1, r0, #20
 8010916:	291e      	cmp	r1, #30
 8010918:	bfda      	itte	le
 801091a:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 801091e:	fa20 f101 	lsrle.w	r1, r0, r1
 8010922:	2101      	movgt	r1, #1
 8010924:	460a      	mov	r2, r1
 8010926:	e7e1      	b.n	80108ec <__ulp+0x18>
 8010928:	7ff00000 	.word	0x7ff00000

0801092c <__b2d>:
 801092c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801092e:	6905      	ldr	r5, [r0, #16]
 8010930:	f100 0714 	add.w	r7, r0, #20
 8010934:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8010938:	1f2e      	subs	r6, r5, #4
 801093a:	f855 4c04 	ldr.w	r4, [r5, #-4]
 801093e:	4620      	mov	r0, r4
 8010940:	f7ff fd48 	bl	80103d4 <__hi0bits>
 8010944:	f1c0 0320 	rsb	r3, r0, #32
 8010948:	280a      	cmp	r0, #10
 801094a:	f8df c07c 	ldr.w	ip, [pc, #124]	; 80109c8 <__b2d+0x9c>
 801094e:	600b      	str	r3, [r1, #0]
 8010950:	dc14      	bgt.n	801097c <__b2d+0x50>
 8010952:	f1c0 0e0b 	rsb	lr, r0, #11
 8010956:	fa24 f10e 	lsr.w	r1, r4, lr
 801095a:	42b7      	cmp	r7, r6
 801095c:	ea41 030c 	orr.w	r3, r1, ip
 8010960:	bf34      	ite	cc
 8010962:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8010966:	2100      	movcs	r1, #0
 8010968:	3015      	adds	r0, #21
 801096a:	fa04 f000 	lsl.w	r0, r4, r0
 801096e:	fa21 f10e 	lsr.w	r1, r1, lr
 8010972:	ea40 0201 	orr.w	r2, r0, r1
 8010976:	ec43 2b10 	vmov	d0, r2, r3
 801097a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801097c:	42b7      	cmp	r7, r6
 801097e:	bf3a      	itte	cc
 8010980:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8010984:	f1a5 0608 	subcc.w	r6, r5, #8
 8010988:	2100      	movcs	r1, #0
 801098a:	380b      	subs	r0, #11
 801098c:	d017      	beq.n	80109be <__b2d+0x92>
 801098e:	f1c0 0c20 	rsb	ip, r0, #32
 8010992:	fa04 f500 	lsl.w	r5, r4, r0
 8010996:	42be      	cmp	r6, r7
 8010998:	fa21 f40c 	lsr.w	r4, r1, ip
 801099c:	ea45 0504 	orr.w	r5, r5, r4
 80109a0:	bf8c      	ite	hi
 80109a2:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 80109a6:	2400      	movls	r4, #0
 80109a8:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 80109ac:	fa01 f000 	lsl.w	r0, r1, r0
 80109b0:	fa24 f40c 	lsr.w	r4, r4, ip
 80109b4:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80109b8:	ea40 0204 	orr.w	r2, r0, r4
 80109bc:	e7db      	b.n	8010976 <__b2d+0x4a>
 80109be:	ea44 030c 	orr.w	r3, r4, ip
 80109c2:	460a      	mov	r2, r1
 80109c4:	e7d7      	b.n	8010976 <__b2d+0x4a>
 80109c6:	bf00      	nop
 80109c8:	3ff00000 	.word	0x3ff00000

080109cc <__d2b>:
 80109cc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80109d0:	4689      	mov	r9, r1
 80109d2:	2101      	movs	r1, #1
 80109d4:	ec57 6b10 	vmov	r6, r7, d0
 80109d8:	4690      	mov	r8, r2
 80109da:	f7ff fc09 	bl	80101f0 <_Balloc>
 80109de:	4604      	mov	r4, r0
 80109e0:	b930      	cbnz	r0, 80109f0 <__d2b+0x24>
 80109e2:	4602      	mov	r2, r0
 80109e4:	4b25      	ldr	r3, [pc, #148]	; (8010a7c <__d2b+0xb0>)
 80109e6:	4826      	ldr	r0, [pc, #152]	; (8010a80 <__d2b+0xb4>)
 80109e8:	f240 310a 	movw	r1, #778	; 0x30a
 80109ec:	f000 f9a2 	bl	8010d34 <__assert_func>
 80109f0:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80109f4:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80109f8:	bb35      	cbnz	r5, 8010a48 <__d2b+0x7c>
 80109fa:	2e00      	cmp	r6, #0
 80109fc:	9301      	str	r3, [sp, #4]
 80109fe:	d028      	beq.n	8010a52 <__d2b+0x86>
 8010a00:	4668      	mov	r0, sp
 8010a02:	9600      	str	r6, [sp, #0]
 8010a04:	f7ff fd06 	bl	8010414 <__lo0bits>
 8010a08:	9900      	ldr	r1, [sp, #0]
 8010a0a:	b300      	cbz	r0, 8010a4e <__d2b+0x82>
 8010a0c:	9a01      	ldr	r2, [sp, #4]
 8010a0e:	f1c0 0320 	rsb	r3, r0, #32
 8010a12:	fa02 f303 	lsl.w	r3, r2, r3
 8010a16:	430b      	orrs	r3, r1
 8010a18:	40c2      	lsrs	r2, r0
 8010a1a:	6163      	str	r3, [r4, #20]
 8010a1c:	9201      	str	r2, [sp, #4]
 8010a1e:	9b01      	ldr	r3, [sp, #4]
 8010a20:	61a3      	str	r3, [r4, #24]
 8010a22:	2b00      	cmp	r3, #0
 8010a24:	bf14      	ite	ne
 8010a26:	2202      	movne	r2, #2
 8010a28:	2201      	moveq	r2, #1
 8010a2a:	6122      	str	r2, [r4, #16]
 8010a2c:	b1d5      	cbz	r5, 8010a64 <__d2b+0x98>
 8010a2e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8010a32:	4405      	add	r5, r0
 8010a34:	f8c9 5000 	str.w	r5, [r9]
 8010a38:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8010a3c:	f8c8 0000 	str.w	r0, [r8]
 8010a40:	4620      	mov	r0, r4
 8010a42:	b003      	add	sp, #12
 8010a44:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010a48:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8010a4c:	e7d5      	b.n	80109fa <__d2b+0x2e>
 8010a4e:	6161      	str	r1, [r4, #20]
 8010a50:	e7e5      	b.n	8010a1e <__d2b+0x52>
 8010a52:	a801      	add	r0, sp, #4
 8010a54:	f7ff fcde 	bl	8010414 <__lo0bits>
 8010a58:	9b01      	ldr	r3, [sp, #4]
 8010a5a:	6163      	str	r3, [r4, #20]
 8010a5c:	2201      	movs	r2, #1
 8010a5e:	6122      	str	r2, [r4, #16]
 8010a60:	3020      	adds	r0, #32
 8010a62:	e7e3      	b.n	8010a2c <__d2b+0x60>
 8010a64:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8010a68:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8010a6c:	f8c9 0000 	str.w	r0, [r9]
 8010a70:	6918      	ldr	r0, [r3, #16]
 8010a72:	f7ff fcaf 	bl	80103d4 <__hi0bits>
 8010a76:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8010a7a:	e7df      	b.n	8010a3c <__d2b+0x70>
 8010a7c:	08012650 	.word	0x08012650
 8010a80:	080126f3 	.word	0x080126f3

08010a84 <__ratio>:
 8010a84:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010a88:	4688      	mov	r8, r1
 8010a8a:	4669      	mov	r1, sp
 8010a8c:	4681      	mov	r9, r0
 8010a8e:	f7ff ff4d 	bl	801092c <__b2d>
 8010a92:	a901      	add	r1, sp, #4
 8010a94:	4640      	mov	r0, r8
 8010a96:	ec55 4b10 	vmov	r4, r5, d0
 8010a9a:	ee10 aa10 	vmov	sl, s0
 8010a9e:	f7ff ff45 	bl	801092c <__b2d>
 8010aa2:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8010aa6:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8010aaa:	1a59      	subs	r1, r3, r1
 8010aac:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010ab0:	1ad3      	subs	r3, r2, r3
 8010ab2:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8010ab6:	ec57 6b10 	vmov	r6, r7, d0
 8010aba:	2b00      	cmp	r3, #0
 8010abc:	bfd6      	itet	le
 8010abe:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8010ac2:	462a      	movgt	r2, r5
 8010ac4:	463a      	movle	r2, r7
 8010ac6:	46ab      	mov	fp, r5
 8010ac8:	bfd6      	itet	le
 8010aca:	eb02 5303 	addle.w	r3, r2, r3, lsl #20
 8010ace:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 8010ad2:	ee00 3a90 	vmovle	s1, r3
 8010ad6:	ec4b ab17 	vmov	d7, sl, fp
 8010ada:	ee87 0b00 	vdiv.f64	d0, d7, d0
 8010ade:	b003      	add	sp, #12
 8010ae0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08010ae4 <__copybits>:
 8010ae4:	3901      	subs	r1, #1
 8010ae6:	b570      	push	{r4, r5, r6, lr}
 8010ae8:	1149      	asrs	r1, r1, #5
 8010aea:	6914      	ldr	r4, [r2, #16]
 8010aec:	3101      	adds	r1, #1
 8010aee:	f102 0314 	add.w	r3, r2, #20
 8010af2:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8010af6:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8010afa:	1f05      	subs	r5, r0, #4
 8010afc:	42a3      	cmp	r3, r4
 8010afe:	d30c      	bcc.n	8010b1a <__copybits+0x36>
 8010b00:	1aa3      	subs	r3, r4, r2
 8010b02:	3b11      	subs	r3, #17
 8010b04:	f023 0303 	bic.w	r3, r3, #3
 8010b08:	3211      	adds	r2, #17
 8010b0a:	42a2      	cmp	r2, r4
 8010b0c:	bf88      	it	hi
 8010b0e:	2300      	movhi	r3, #0
 8010b10:	4418      	add	r0, r3
 8010b12:	2300      	movs	r3, #0
 8010b14:	4288      	cmp	r0, r1
 8010b16:	d305      	bcc.n	8010b24 <__copybits+0x40>
 8010b18:	bd70      	pop	{r4, r5, r6, pc}
 8010b1a:	f853 6b04 	ldr.w	r6, [r3], #4
 8010b1e:	f845 6f04 	str.w	r6, [r5, #4]!
 8010b22:	e7eb      	b.n	8010afc <__copybits+0x18>
 8010b24:	f840 3b04 	str.w	r3, [r0], #4
 8010b28:	e7f4      	b.n	8010b14 <__copybits+0x30>

08010b2a <__any_on>:
 8010b2a:	f100 0214 	add.w	r2, r0, #20
 8010b2e:	6900      	ldr	r0, [r0, #16]
 8010b30:	114b      	asrs	r3, r1, #5
 8010b32:	4298      	cmp	r0, r3
 8010b34:	b510      	push	{r4, lr}
 8010b36:	db11      	blt.n	8010b5c <__any_on+0x32>
 8010b38:	dd0a      	ble.n	8010b50 <__any_on+0x26>
 8010b3a:	f011 011f 	ands.w	r1, r1, #31
 8010b3e:	d007      	beq.n	8010b50 <__any_on+0x26>
 8010b40:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8010b44:	fa24 f001 	lsr.w	r0, r4, r1
 8010b48:	fa00 f101 	lsl.w	r1, r0, r1
 8010b4c:	428c      	cmp	r4, r1
 8010b4e:	d10b      	bne.n	8010b68 <__any_on+0x3e>
 8010b50:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8010b54:	4293      	cmp	r3, r2
 8010b56:	d803      	bhi.n	8010b60 <__any_on+0x36>
 8010b58:	2000      	movs	r0, #0
 8010b5a:	bd10      	pop	{r4, pc}
 8010b5c:	4603      	mov	r3, r0
 8010b5e:	e7f7      	b.n	8010b50 <__any_on+0x26>
 8010b60:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8010b64:	2900      	cmp	r1, #0
 8010b66:	d0f5      	beq.n	8010b54 <__any_on+0x2a>
 8010b68:	2001      	movs	r0, #1
 8010b6a:	e7f6      	b.n	8010b5a <__any_on+0x30>

08010b6c <_calloc_r>:
 8010b6c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8010b6e:	fba1 2402 	umull	r2, r4, r1, r2
 8010b72:	b94c      	cbnz	r4, 8010b88 <_calloc_r+0x1c>
 8010b74:	4611      	mov	r1, r2
 8010b76:	9201      	str	r2, [sp, #4]
 8010b78:	f000 f82e 	bl	8010bd8 <_malloc_r>
 8010b7c:	9a01      	ldr	r2, [sp, #4]
 8010b7e:	4605      	mov	r5, r0
 8010b80:	b930      	cbnz	r0, 8010b90 <_calloc_r+0x24>
 8010b82:	4628      	mov	r0, r5
 8010b84:	b003      	add	sp, #12
 8010b86:	bd30      	pop	{r4, r5, pc}
 8010b88:	220c      	movs	r2, #12
 8010b8a:	6002      	str	r2, [r0, #0]
 8010b8c:	2500      	movs	r5, #0
 8010b8e:	e7f8      	b.n	8010b82 <_calloc_r+0x16>
 8010b90:	4621      	mov	r1, r4
 8010b92:	f7fe f9c5 	bl	800ef20 <memset>
 8010b96:	e7f4      	b.n	8010b82 <_calloc_r+0x16>

08010b98 <sbrk_aligned>:
 8010b98:	b570      	push	{r4, r5, r6, lr}
 8010b9a:	4e0e      	ldr	r6, [pc, #56]	; (8010bd4 <sbrk_aligned+0x3c>)
 8010b9c:	460c      	mov	r4, r1
 8010b9e:	6831      	ldr	r1, [r6, #0]
 8010ba0:	4605      	mov	r5, r0
 8010ba2:	b911      	cbnz	r1, 8010baa <sbrk_aligned+0x12>
 8010ba4:	f000 f894 	bl	8010cd0 <_sbrk_r>
 8010ba8:	6030      	str	r0, [r6, #0]
 8010baa:	4621      	mov	r1, r4
 8010bac:	4628      	mov	r0, r5
 8010bae:	f000 f88f 	bl	8010cd0 <_sbrk_r>
 8010bb2:	1c43      	adds	r3, r0, #1
 8010bb4:	d00a      	beq.n	8010bcc <sbrk_aligned+0x34>
 8010bb6:	1cc4      	adds	r4, r0, #3
 8010bb8:	f024 0403 	bic.w	r4, r4, #3
 8010bbc:	42a0      	cmp	r0, r4
 8010bbe:	d007      	beq.n	8010bd0 <sbrk_aligned+0x38>
 8010bc0:	1a21      	subs	r1, r4, r0
 8010bc2:	4628      	mov	r0, r5
 8010bc4:	f000 f884 	bl	8010cd0 <_sbrk_r>
 8010bc8:	3001      	adds	r0, #1
 8010bca:	d101      	bne.n	8010bd0 <sbrk_aligned+0x38>
 8010bcc:	f04f 34ff 	mov.w	r4, #4294967295
 8010bd0:	4620      	mov	r0, r4
 8010bd2:	bd70      	pop	{r4, r5, r6, pc}
 8010bd4:	24000d88 	.word	0x24000d88

08010bd8 <_malloc_r>:
 8010bd8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010bdc:	1ccd      	adds	r5, r1, #3
 8010bde:	f025 0503 	bic.w	r5, r5, #3
 8010be2:	3508      	adds	r5, #8
 8010be4:	2d0c      	cmp	r5, #12
 8010be6:	bf38      	it	cc
 8010be8:	250c      	movcc	r5, #12
 8010bea:	2d00      	cmp	r5, #0
 8010bec:	4607      	mov	r7, r0
 8010bee:	db01      	blt.n	8010bf4 <_malloc_r+0x1c>
 8010bf0:	42a9      	cmp	r1, r5
 8010bf2:	d905      	bls.n	8010c00 <_malloc_r+0x28>
 8010bf4:	230c      	movs	r3, #12
 8010bf6:	603b      	str	r3, [r7, #0]
 8010bf8:	2600      	movs	r6, #0
 8010bfa:	4630      	mov	r0, r6
 8010bfc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010c00:	4e2e      	ldr	r6, [pc, #184]	; (8010cbc <_malloc_r+0xe4>)
 8010c02:	f000 f8cf 	bl	8010da4 <__malloc_lock>
 8010c06:	6833      	ldr	r3, [r6, #0]
 8010c08:	461c      	mov	r4, r3
 8010c0a:	bb34      	cbnz	r4, 8010c5a <_malloc_r+0x82>
 8010c0c:	4629      	mov	r1, r5
 8010c0e:	4638      	mov	r0, r7
 8010c10:	f7ff ffc2 	bl	8010b98 <sbrk_aligned>
 8010c14:	1c43      	adds	r3, r0, #1
 8010c16:	4604      	mov	r4, r0
 8010c18:	d14d      	bne.n	8010cb6 <_malloc_r+0xde>
 8010c1a:	6834      	ldr	r4, [r6, #0]
 8010c1c:	4626      	mov	r6, r4
 8010c1e:	2e00      	cmp	r6, #0
 8010c20:	d140      	bne.n	8010ca4 <_malloc_r+0xcc>
 8010c22:	6823      	ldr	r3, [r4, #0]
 8010c24:	4631      	mov	r1, r6
 8010c26:	4638      	mov	r0, r7
 8010c28:	eb04 0803 	add.w	r8, r4, r3
 8010c2c:	f000 f850 	bl	8010cd0 <_sbrk_r>
 8010c30:	4580      	cmp	r8, r0
 8010c32:	d13a      	bne.n	8010caa <_malloc_r+0xd2>
 8010c34:	6821      	ldr	r1, [r4, #0]
 8010c36:	3503      	adds	r5, #3
 8010c38:	1a6d      	subs	r5, r5, r1
 8010c3a:	f025 0503 	bic.w	r5, r5, #3
 8010c3e:	3508      	adds	r5, #8
 8010c40:	2d0c      	cmp	r5, #12
 8010c42:	bf38      	it	cc
 8010c44:	250c      	movcc	r5, #12
 8010c46:	4629      	mov	r1, r5
 8010c48:	4638      	mov	r0, r7
 8010c4a:	f7ff ffa5 	bl	8010b98 <sbrk_aligned>
 8010c4e:	3001      	adds	r0, #1
 8010c50:	d02b      	beq.n	8010caa <_malloc_r+0xd2>
 8010c52:	6823      	ldr	r3, [r4, #0]
 8010c54:	442b      	add	r3, r5
 8010c56:	6023      	str	r3, [r4, #0]
 8010c58:	e00e      	b.n	8010c78 <_malloc_r+0xa0>
 8010c5a:	6822      	ldr	r2, [r4, #0]
 8010c5c:	1b52      	subs	r2, r2, r5
 8010c5e:	d41e      	bmi.n	8010c9e <_malloc_r+0xc6>
 8010c60:	2a0b      	cmp	r2, #11
 8010c62:	d916      	bls.n	8010c92 <_malloc_r+0xba>
 8010c64:	1961      	adds	r1, r4, r5
 8010c66:	42a3      	cmp	r3, r4
 8010c68:	6025      	str	r5, [r4, #0]
 8010c6a:	bf18      	it	ne
 8010c6c:	6059      	strne	r1, [r3, #4]
 8010c6e:	6863      	ldr	r3, [r4, #4]
 8010c70:	bf08      	it	eq
 8010c72:	6031      	streq	r1, [r6, #0]
 8010c74:	5162      	str	r2, [r4, r5]
 8010c76:	604b      	str	r3, [r1, #4]
 8010c78:	4638      	mov	r0, r7
 8010c7a:	f104 060b 	add.w	r6, r4, #11
 8010c7e:	f000 f897 	bl	8010db0 <__malloc_unlock>
 8010c82:	f026 0607 	bic.w	r6, r6, #7
 8010c86:	1d23      	adds	r3, r4, #4
 8010c88:	1af2      	subs	r2, r6, r3
 8010c8a:	d0b6      	beq.n	8010bfa <_malloc_r+0x22>
 8010c8c:	1b9b      	subs	r3, r3, r6
 8010c8e:	50a3      	str	r3, [r4, r2]
 8010c90:	e7b3      	b.n	8010bfa <_malloc_r+0x22>
 8010c92:	6862      	ldr	r2, [r4, #4]
 8010c94:	42a3      	cmp	r3, r4
 8010c96:	bf0c      	ite	eq
 8010c98:	6032      	streq	r2, [r6, #0]
 8010c9a:	605a      	strne	r2, [r3, #4]
 8010c9c:	e7ec      	b.n	8010c78 <_malloc_r+0xa0>
 8010c9e:	4623      	mov	r3, r4
 8010ca0:	6864      	ldr	r4, [r4, #4]
 8010ca2:	e7b2      	b.n	8010c0a <_malloc_r+0x32>
 8010ca4:	4634      	mov	r4, r6
 8010ca6:	6876      	ldr	r6, [r6, #4]
 8010ca8:	e7b9      	b.n	8010c1e <_malloc_r+0x46>
 8010caa:	230c      	movs	r3, #12
 8010cac:	603b      	str	r3, [r7, #0]
 8010cae:	4638      	mov	r0, r7
 8010cb0:	f000 f87e 	bl	8010db0 <__malloc_unlock>
 8010cb4:	e7a1      	b.n	8010bfa <_malloc_r+0x22>
 8010cb6:	6025      	str	r5, [r4, #0]
 8010cb8:	e7de      	b.n	8010c78 <_malloc_r+0xa0>
 8010cba:	bf00      	nop
 8010cbc:	24000d84 	.word	0x24000d84

08010cc0 <nan>:
 8010cc0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8010cc8 <nan+0x8>
 8010cc4:	4770      	bx	lr
 8010cc6:	bf00      	nop
 8010cc8:	00000000 	.word	0x00000000
 8010ccc:	7ff80000 	.word	0x7ff80000

08010cd0 <_sbrk_r>:
 8010cd0:	b538      	push	{r3, r4, r5, lr}
 8010cd2:	4d06      	ldr	r5, [pc, #24]	; (8010cec <_sbrk_r+0x1c>)
 8010cd4:	2300      	movs	r3, #0
 8010cd6:	4604      	mov	r4, r0
 8010cd8:	4608      	mov	r0, r1
 8010cda:	602b      	str	r3, [r5, #0]
 8010cdc:	f7f3 fa46 	bl	800416c <_sbrk>
 8010ce0:	1c43      	adds	r3, r0, #1
 8010ce2:	d102      	bne.n	8010cea <_sbrk_r+0x1a>
 8010ce4:	682b      	ldr	r3, [r5, #0]
 8010ce6:	b103      	cbz	r3, 8010cea <_sbrk_r+0x1a>
 8010ce8:	6023      	str	r3, [r4, #0]
 8010cea:	bd38      	pop	{r3, r4, r5, pc}
 8010cec:	24000d8c 	.word	0x24000d8c

08010cf0 <strncmp>:
 8010cf0:	b510      	push	{r4, lr}
 8010cf2:	b17a      	cbz	r2, 8010d14 <strncmp+0x24>
 8010cf4:	4603      	mov	r3, r0
 8010cf6:	3901      	subs	r1, #1
 8010cf8:	1884      	adds	r4, r0, r2
 8010cfa:	f813 0b01 	ldrb.w	r0, [r3], #1
 8010cfe:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8010d02:	4290      	cmp	r0, r2
 8010d04:	d101      	bne.n	8010d0a <strncmp+0x1a>
 8010d06:	42a3      	cmp	r3, r4
 8010d08:	d101      	bne.n	8010d0e <strncmp+0x1e>
 8010d0a:	1a80      	subs	r0, r0, r2
 8010d0c:	bd10      	pop	{r4, pc}
 8010d0e:	2800      	cmp	r0, #0
 8010d10:	d1f3      	bne.n	8010cfa <strncmp+0xa>
 8010d12:	e7fa      	b.n	8010d0a <strncmp+0x1a>
 8010d14:	4610      	mov	r0, r2
 8010d16:	e7f9      	b.n	8010d0c <strncmp+0x1c>

08010d18 <__ascii_wctomb>:
 8010d18:	b149      	cbz	r1, 8010d2e <__ascii_wctomb+0x16>
 8010d1a:	2aff      	cmp	r2, #255	; 0xff
 8010d1c:	bf85      	ittet	hi
 8010d1e:	238a      	movhi	r3, #138	; 0x8a
 8010d20:	6003      	strhi	r3, [r0, #0]
 8010d22:	700a      	strbls	r2, [r1, #0]
 8010d24:	f04f 30ff 	movhi.w	r0, #4294967295
 8010d28:	bf98      	it	ls
 8010d2a:	2001      	movls	r0, #1
 8010d2c:	4770      	bx	lr
 8010d2e:	4608      	mov	r0, r1
 8010d30:	4770      	bx	lr
	...

08010d34 <__assert_func>:
 8010d34:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8010d36:	4614      	mov	r4, r2
 8010d38:	461a      	mov	r2, r3
 8010d3a:	4b09      	ldr	r3, [pc, #36]	; (8010d60 <__assert_func+0x2c>)
 8010d3c:	681b      	ldr	r3, [r3, #0]
 8010d3e:	4605      	mov	r5, r0
 8010d40:	68d8      	ldr	r0, [r3, #12]
 8010d42:	b14c      	cbz	r4, 8010d58 <__assert_func+0x24>
 8010d44:	4b07      	ldr	r3, [pc, #28]	; (8010d64 <__assert_func+0x30>)
 8010d46:	9100      	str	r1, [sp, #0]
 8010d48:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8010d4c:	4906      	ldr	r1, [pc, #24]	; (8010d68 <__assert_func+0x34>)
 8010d4e:	462b      	mov	r3, r5
 8010d50:	f000 f80e 	bl	8010d70 <fiprintf>
 8010d54:	f000 fc2c 	bl	80115b0 <abort>
 8010d58:	4b04      	ldr	r3, [pc, #16]	; (8010d6c <__assert_func+0x38>)
 8010d5a:	461c      	mov	r4, r3
 8010d5c:	e7f3      	b.n	8010d46 <__assert_func+0x12>
 8010d5e:	bf00      	nop
 8010d60:	240000b0 	.word	0x240000b0
 8010d64:	0801284c 	.word	0x0801284c
 8010d68:	08012859 	.word	0x08012859
 8010d6c:	08012887 	.word	0x08012887

08010d70 <fiprintf>:
 8010d70:	b40e      	push	{r1, r2, r3}
 8010d72:	b503      	push	{r0, r1, lr}
 8010d74:	4601      	mov	r1, r0
 8010d76:	ab03      	add	r3, sp, #12
 8010d78:	4805      	ldr	r0, [pc, #20]	; (8010d90 <fiprintf+0x20>)
 8010d7a:	f853 2b04 	ldr.w	r2, [r3], #4
 8010d7e:	6800      	ldr	r0, [r0, #0]
 8010d80:	9301      	str	r3, [sp, #4]
 8010d82:	f000 f891 	bl	8010ea8 <_vfiprintf_r>
 8010d86:	b002      	add	sp, #8
 8010d88:	f85d eb04 	ldr.w	lr, [sp], #4
 8010d8c:	b003      	add	sp, #12
 8010d8e:	4770      	bx	lr
 8010d90:	240000b0 	.word	0x240000b0

08010d94 <malloc>:
 8010d94:	4b02      	ldr	r3, [pc, #8]	; (8010da0 <malloc+0xc>)
 8010d96:	4601      	mov	r1, r0
 8010d98:	6818      	ldr	r0, [r3, #0]
 8010d9a:	f7ff bf1d 	b.w	8010bd8 <_malloc_r>
 8010d9e:	bf00      	nop
 8010da0:	240000b0 	.word	0x240000b0

08010da4 <__malloc_lock>:
 8010da4:	4801      	ldr	r0, [pc, #4]	; (8010dac <__malloc_lock+0x8>)
 8010da6:	f000 bdc3 	b.w	8011930 <__retarget_lock_acquire_recursive>
 8010daa:	bf00      	nop
 8010dac:	24000d90 	.word	0x24000d90

08010db0 <__malloc_unlock>:
 8010db0:	4801      	ldr	r0, [pc, #4]	; (8010db8 <__malloc_unlock+0x8>)
 8010db2:	f000 bdbe 	b.w	8011932 <__retarget_lock_release_recursive>
 8010db6:	bf00      	nop
 8010db8:	24000d90 	.word	0x24000d90

08010dbc <_free_r>:
 8010dbc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8010dbe:	2900      	cmp	r1, #0
 8010dc0:	d044      	beq.n	8010e4c <_free_r+0x90>
 8010dc2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010dc6:	9001      	str	r0, [sp, #4]
 8010dc8:	2b00      	cmp	r3, #0
 8010dca:	f1a1 0404 	sub.w	r4, r1, #4
 8010dce:	bfb8      	it	lt
 8010dd0:	18e4      	addlt	r4, r4, r3
 8010dd2:	f7ff ffe7 	bl	8010da4 <__malloc_lock>
 8010dd6:	4a1e      	ldr	r2, [pc, #120]	; (8010e50 <_free_r+0x94>)
 8010dd8:	9801      	ldr	r0, [sp, #4]
 8010dda:	6813      	ldr	r3, [r2, #0]
 8010ddc:	b933      	cbnz	r3, 8010dec <_free_r+0x30>
 8010dde:	6063      	str	r3, [r4, #4]
 8010de0:	6014      	str	r4, [r2, #0]
 8010de2:	b003      	add	sp, #12
 8010de4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8010de8:	f7ff bfe2 	b.w	8010db0 <__malloc_unlock>
 8010dec:	42a3      	cmp	r3, r4
 8010dee:	d908      	bls.n	8010e02 <_free_r+0x46>
 8010df0:	6825      	ldr	r5, [r4, #0]
 8010df2:	1961      	adds	r1, r4, r5
 8010df4:	428b      	cmp	r3, r1
 8010df6:	bf01      	itttt	eq
 8010df8:	6819      	ldreq	r1, [r3, #0]
 8010dfa:	685b      	ldreq	r3, [r3, #4]
 8010dfc:	1949      	addeq	r1, r1, r5
 8010dfe:	6021      	streq	r1, [r4, #0]
 8010e00:	e7ed      	b.n	8010dde <_free_r+0x22>
 8010e02:	461a      	mov	r2, r3
 8010e04:	685b      	ldr	r3, [r3, #4]
 8010e06:	b10b      	cbz	r3, 8010e0c <_free_r+0x50>
 8010e08:	42a3      	cmp	r3, r4
 8010e0a:	d9fa      	bls.n	8010e02 <_free_r+0x46>
 8010e0c:	6811      	ldr	r1, [r2, #0]
 8010e0e:	1855      	adds	r5, r2, r1
 8010e10:	42a5      	cmp	r5, r4
 8010e12:	d10b      	bne.n	8010e2c <_free_r+0x70>
 8010e14:	6824      	ldr	r4, [r4, #0]
 8010e16:	4421      	add	r1, r4
 8010e18:	1854      	adds	r4, r2, r1
 8010e1a:	42a3      	cmp	r3, r4
 8010e1c:	6011      	str	r1, [r2, #0]
 8010e1e:	d1e0      	bne.n	8010de2 <_free_r+0x26>
 8010e20:	681c      	ldr	r4, [r3, #0]
 8010e22:	685b      	ldr	r3, [r3, #4]
 8010e24:	6053      	str	r3, [r2, #4]
 8010e26:	4421      	add	r1, r4
 8010e28:	6011      	str	r1, [r2, #0]
 8010e2a:	e7da      	b.n	8010de2 <_free_r+0x26>
 8010e2c:	d902      	bls.n	8010e34 <_free_r+0x78>
 8010e2e:	230c      	movs	r3, #12
 8010e30:	6003      	str	r3, [r0, #0]
 8010e32:	e7d6      	b.n	8010de2 <_free_r+0x26>
 8010e34:	6825      	ldr	r5, [r4, #0]
 8010e36:	1961      	adds	r1, r4, r5
 8010e38:	428b      	cmp	r3, r1
 8010e3a:	bf04      	itt	eq
 8010e3c:	6819      	ldreq	r1, [r3, #0]
 8010e3e:	685b      	ldreq	r3, [r3, #4]
 8010e40:	6063      	str	r3, [r4, #4]
 8010e42:	bf04      	itt	eq
 8010e44:	1949      	addeq	r1, r1, r5
 8010e46:	6021      	streq	r1, [r4, #0]
 8010e48:	6054      	str	r4, [r2, #4]
 8010e4a:	e7ca      	b.n	8010de2 <_free_r+0x26>
 8010e4c:	b003      	add	sp, #12
 8010e4e:	bd30      	pop	{r4, r5, pc}
 8010e50:	24000d84 	.word	0x24000d84

08010e54 <__sfputc_r>:
 8010e54:	6893      	ldr	r3, [r2, #8]
 8010e56:	3b01      	subs	r3, #1
 8010e58:	2b00      	cmp	r3, #0
 8010e5a:	b410      	push	{r4}
 8010e5c:	6093      	str	r3, [r2, #8]
 8010e5e:	da08      	bge.n	8010e72 <__sfputc_r+0x1e>
 8010e60:	6994      	ldr	r4, [r2, #24]
 8010e62:	42a3      	cmp	r3, r4
 8010e64:	db01      	blt.n	8010e6a <__sfputc_r+0x16>
 8010e66:	290a      	cmp	r1, #10
 8010e68:	d103      	bne.n	8010e72 <__sfputc_r+0x1e>
 8010e6a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010e6e:	f000 badf 	b.w	8011430 <__swbuf_r>
 8010e72:	6813      	ldr	r3, [r2, #0]
 8010e74:	1c58      	adds	r0, r3, #1
 8010e76:	6010      	str	r0, [r2, #0]
 8010e78:	7019      	strb	r1, [r3, #0]
 8010e7a:	4608      	mov	r0, r1
 8010e7c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010e80:	4770      	bx	lr

08010e82 <__sfputs_r>:
 8010e82:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010e84:	4606      	mov	r6, r0
 8010e86:	460f      	mov	r7, r1
 8010e88:	4614      	mov	r4, r2
 8010e8a:	18d5      	adds	r5, r2, r3
 8010e8c:	42ac      	cmp	r4, r5
 8010e8e:	d101      	bne.n	8010e94 <__sfputs_r+0x12>
 8010e90:	2000      	movs	r0, #0
 8010e92:	e007      	b.n	8010ea4 <__sfputs_r+0x22>
 8010e94:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010e98:	463a      	mov	r2, r7
 8010e9a:	4630      	mov	r0, r6
 8010e9c:	f7ff ffda 	bl	8010e54 <__sfputc_r>
 8010ea0:	1c43      	adds	r3, r0, #1
 8010ea2:	d1f3      	bne.n	8010e8c <__sfputs_r+0xa>
 8010ea4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08010ea8 <_vfiprintf_r>:
 8010ea8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010eac:	460d      	mov	r5, r1
 8010eae:	b09d      	sub	sp, #116	; 0x74
 8010eb0:	4614      	mov	r4, r2
 8010eb2:	4698      	mov	r8, r3
 8010eb4:	4606      	mov	r6, r0
 8010eb6:	b118      	cbz	r0, 8010ec0 <_vfiprintf_r+0x18>
 8010eb8:	6983      	ldr	r3, [r0, #24]
 8010eba:	b90b      	cbnz	r3, 8010ec0 <_vfiprintf_r+0x18>
 8010ebc:	f000 fc9a 	bl	80117f4 <__sinit>
 8010ec0:	4b89      	ldr	r3, [pc, #548]	; (80110e8 <_vfiprintf_r+0x240>)
 8010ec2:	429d      	cmp	r5, r3
 8010ec4:	d11b      	bne.n	8010efe <_vfiprintf_r+0x56>
 8010ec6:	6875      	ldr	r5, [r6, #4]
 8010ec8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8010eca:	07d9      	lsls	r1, r3, #31
 8010ecc:	d405      	bmi.n	8010eda <_vfiprintf_r+0x32>
 8010ece:	89ab      	ldrh	r3, [r5, #12]
 8010ed0:	059a      	lsls	r2, r3, #22
 8010ed2:	d402      	bmi.n	8010eda <_vfiprintf_r+0x32>
 8010ed4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8010ed6:	f000 fd2b 	bl	8011930 <__retarget_lock_acquire_recursive>
 8010eda:	89ab      	ldrh	r3, [r5, #12]
 8010edc:	071b      	lsls	r3, r3, #28
 8010ede:	d501      	bpl.n	8010ee4 <_vfiprintf_r+0x3c>
 8010ee0:	692b      	ldr	r3, [r5, #16]
 8010ee2:	b9eb      	cbnz	r3, 8010f20 <_vfiprintf_r+0x78>
 8010ee4:	4629      	mov	r1, r5
 8010ee6:	4630      	mov	r0, r6
 8010ee8:	f000 faf4 	bl	80114d4 <__swsetup_r>
 8010eec:	b1c0      	cbz	r0, 8010f20 <_vfiprintf_r+0x78>
 8010eee:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8010ef0:	07dc      	lsls	r4, r3, #31
 8010ef2:	d50e      	bpl.n	8010f12 <_vfiprintf_r+0x6a>
 8010ef4:	f04f 30ff 	mov.w	r0, #4294967295
 8010ef8:	b01d      	add	sp, #116	; 0x74
 8010efa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010efe:	4b7b      	ldr	r3, [pc, #492]	; (80110ec <_vfiprintf_r+0x244>)
 8010f00:	429d      	cmp	r5, r3
 8010f02:	d101      	bne.n	8010f08 <_vfiprintf_r+0x60>
 8010f04:	68b5      	ldr	r5, [r6, #8]
 8010f06:	e7df      	b.n	8010ec8 <_vfiprintf_r+0x20>
 8010f08:	4b79      	ldr	r3, [pc, #484]	; (80110f0 <_vfiprintf_r+0x248>)
 8010f0a:	429d      	cmp	r5, r3
 8010f0c:	bf08      	it	eq
 8010f0e:	68f5      	ldreq	r5, [r6, #12]
 8010f10:	e7da      	b.n	8010ec8 <_vfiprintf_r+0x20>
 8010f12:	89ab      	ldrh	r3, [r5, #12]
 8010f14:	0598      	lsls	r0, r3, #22
 8010f16:	d4ed      	bmi.n	8010ef4 <_vfiprintf_r+0x4c>
 8010f18:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8010f1a:	f000 fd0a 	bl	8011932 <__retarget_lock_release_recursive>
 8010f1e:	e7e9      	b.n	8010ef4 <_vfiprintf_r+0x4c>
 8010f20:	2300      	movs	r3, #0
 8010f22:	9309      	str	r3, [sp, #36]	; 0x24
 8010f24:	2320      	movs	r3, #32
 8010f26:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8010f2a:	f8cd 800c 	str.w	r8, [sp, #12]
 8010f2e:	2330      	movs	r3, #48	; 0x30
 8010f30:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80110f4 <_vfiprintf_r+0x24c>
 8010f34:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8010f38:	f04f 0901 	mov.w	r9, #1
 8010f3c:	4623      	mov	r3, r4
 8010f3e:	469a      	mov	sl, r3
 8010f40:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010f44:	b10a      	cbz	r2, 8010f4a <_vfiprintf_r+0xa2>
 8010f46:	2a25      	cmp	r2, #37	; 0x25
 8010f48:	d1f9      	bne.n	8010f3e <_vfiprintf_r+0x96>
 8010f4a:	ebba 0b04 	subs.w	fp, sl, r4
 8010f4e:	d00b      	beq.n	8010f68 <_vfiprintf_r+0xc0>
 8010f50:	465b      	mov	r3, fp
 8010f52:	4622      	mov	r2, r4
 8010f54:	4629      	mov	r1, r5
 8010f56:	4630      	mov	r0, r6
 8010f58:	f7ff ff93 	bl	8010e82 <__sfputs_r>
 8010f5c:	3001      	adds	r0, #1
 8010f5e:	f000 80aa 	beq.w	80110b6 <_vfiprintf_r+0x20e>
 8010f62:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010f64:	445a      	add	r2, fp
 8010f66:	9209      	str	r2, [sp, #36]	; 0x24
 8010f68:	f89a 3000 	ldrb.w	r3, [sl]
 8010f6c:	2b00      	cmp	r3, #0
 8010f6e:	f000 80a2 	beq.w	80110b6 <_vfiprintf_r+0x20e>
 8010f72:	2300      	movs	r3, #0
 8010f74:	f04f 32ff 	mov.w	r2, #4294967295
 8010f78:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010f7c:	f10a 0a01 	add.w	sl, sl, #1
 8010f80:	9304      	str	r3, [sp, #16]
 8010f82:	9307      	str	r3, [sp, #28]
 8010f84:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8010f88:	931a      	str	r3, [sp, #104]	; 0x68
 8010f8a:	4654      	mov	r4, sl
 8010f8c:	2205      	movs	r2, #5
 8010f8e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010f92:	4858      	ldr	r0, [pc, #352]	; (80110f4 <_vfiprintf_r+0x24c>)
 8010f94:	f7ef f9ac 	bl	80002f0 <memchr>
 8010f98:	9a04      	ldr	r2, [sp, #16]
 8010f9a:	b9d8      	cbnz	r0, 8010fd4 <_vfiprintf_r+0x12c>
 8010f9c:	06d1      	lsls	r1, r2, #27
 8010f9e:	bf44      	itt	mi
 8010fa0:	2320      	movmi	r3, #32
 8010fa2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010fa6:	0713      	lsls	r3, r2, #28
 8010fa8:	bf44      	itt	mi
 8010faa:	232b      	movmi	r3, #43	; 0x2b
 8010fac:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010fb0:	f89a 3000 	ldrb.w	r3, [sl]
 8010fb4:	2b2a      	cmp	r3, #42	; 0x2a
 8010fb6:	d015      	beq.n	8010fe4 <_vfiprintf_r+0x13c>
 8010fb8:	9a07      	ldr	r2, [sp, #28]
 8010fba:	4654      	mov	r4, sl
 8010fbc:	2000      	movs	r0, #0
 8010fbe:	f04f 0c0a 	mov.w	ip, #10
 8010fc2:	4621      	mov	r1, r4
 8010fc4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010fc8:	3b30      	subs	r3, #48	; 0x30
 8010fca:	2b09      	cmp	r3, #9
 8010fcc:	d94e      	bls.n	801106c <_vfiprintf_r+0x1c4>
 8010fce:	b1b0      	cbz	r0, 8010ffe <_vfiprintf_r+0x156>
 8010fd0:	9207      	str	r2, [sp, #28]
 8010fd2:	e014      	b.n	8010ffe <_vfiprintf_r+0x156>
 8010fd4:	eba0 0308 	sub.w	r3, r0, r8
 8010fd8:	fa09 f303 	lsl.w	r3, r9, r3
 8010fdc:	4313      	orrs	r3, r2
 8010fde:	9304      	str	r3, [sp, #16]
 8010fe0:	46a2      	mov	sl, r4
 8010fe2:	e7d2      	b.n	8010f8a <_vfiprintf_r+0xe2>
 8010fe4:	9b03      	ldr	r3, [sp, #12]
 8010fe6:	1d19      	adds	r1, r3, #4
 8010fe8:	681b      	ldr	r3, [r3, #0]
 8010fea:	9103      	str	r1, [sp, #12]
 8010fec:	2b00      	cmp	r3, #0
 8010fee:	bfbb      	ittet	lt
 8010ff0:	425b      	neglt	r3, r3
 8010ff2:	f042 0202 	orrlt.w	r2, r2, #2
 8010ff6:	9307      	strge	r3, [sp, #28]
 8010ff8:	9307      	strlt	r3, [sp, #28]
 8010ffa:	bfb8      	it	lt
 8010ffc:	9204      	strlt	r2, [sp, #16]
 8010ffe:	7823      	ldrb	r3, [r4, #0]
 8011000:	2b2e      	cmp	r3, #46	; 0x2e
 8011002:	d10c      	bne.n	801101e <_vfiprintf_r+0x176>
 8011004:	7863      	ldrb	r3, [r4, #1]
 8011006:	2b2a      	cmp	r3, #42	; 0x2a
 8011008:	d135      	bne.n	8011076 <_vfiprintf_r+0x1ce>
 801100a:	9b03      	ldr	r3, [sp, #12]
 801100c:	1d1a      	adds	r2, r3, #4
 801100e:	681b      	ldr	r3, [r3, #0]
 8011010:	9203      	str	r2, [sp, #12]
 8011012:	2b00      	cmp	r3, #0
 8011014:	bfb8      	it	lt
 8011016:	f04f 33ff 	movlt.w	r3, #4294967295
 801101a:	3402      	adds	r4, #2
 801101c:	9305      	str	r3, [sp, #20]
 801101e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8011104 <_vfiprintf_r+0x25c>
 8011022:	7821      	ldrb	r1, [r4, #0]
 8011024:	2203      	movs	r2, #3
 8011026:	4650      	mov	r0, sl
 8011028:	f7ef f962 	bl	80002f0 <memchr>
 801102c:	b140      	cbz	r0, 8011040 <_vfiprintf_r+0x198>
 801102e:	2340      	movs	r3, #64	; 0x40
 8011030:	eba0 000a 	sub.w	r0, r0, sl
 8011034:	fa03 f000 	lsl.w	r0, r3, r0
 8011038:	9b04      	ldr	r3, [sp, #16]
 801103a:	4303      	orrs	r3, r0
 801103c:	3401      	adds	r4, #1
 801103e:	9304      	str	r3, [sp, #16]
 8011040:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011044:	482c      	ldr	r0, [pc, #176]	; (80110f8 <_vfiprintf_r+0x250>)
 8011046:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801104a:	2206      	movs	r2, #6
 801104c:	f7ef f950 	bl	80002f0 <memchr>
 8011050:	2800      	cmp	r0, #0
 8011052:	d03f      	beq.n	80110d4 <_vfiprintf_r+0x22c>
 8011054:	4b29      	ldr	r3, [pc, #164]	; (80110fc <_vfiprintf_r+0x254>)
 8011056:	bb1b      	cbnz	r3, 80110a0 <_vfiprintf_r+0x1f8>
 8011058:	9b03      	ldr	r3, [sp, #12]
 801105a:	3307      	adds	r3, #7
 801105c:	f023 0307 	bic.w	r3, r3, #7
 8011060:	3308      	adds	r3, #8
 8011062:	9303      	str	r3, [sp, #12]
 8011064:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011066:	443b      	add	r3, r7
 8011068:	9309      	str	r3, [sp, #36]	; 0x24
 801106a:	e767      	b.n	8010f3c <_vfiprintf_r+0x94>
 801106c:	fb0c 3202 	mla	r2, ip, r2, r3
 8011070:	460c      	mov	r4, r1
 8011072:	2001      	movs	r0, #1
 8011074:	e7a5      	b.n	8010fc2 <_vfiprintf_r+0x11a>
 8011076:	2300      	movs	r3, #0
 8011078:	3401      	adds	r4, #1
 801107a:	9305      	str	r3, [sp, #20]
 801107c:	4619      	mov	r1, r3
 801107e:	f04f 0c0a 	mov.w	ip, #10
 8011082:	4620      	mov	r0, r4
 8011084:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011088:	3a30      	subs	r2, #48	; 0x30
 801108a:	2a09      	cmp	r2, #9
 801108c:	d903      	bls.n	8011096 <_vfiprintf_r+0x1ee>
 801108e:	2b00      	cmp	r3, #0
 8011090:	d0c5      	beq.n	801101e <_vfiprintf_r+0x176>
 8011092:	9105      	str	r1, [sp, #20]
 8011094:	e7c3      	b.n	801101e <_vfiprintf_r+0x176>
 8011096:	fb0c 2101 	mla	r1, ip, r1, r2
 801109a:	4604      	mov	r4, r0
 801109c:	2301      	movs	r3, #1
 801109e:	e7f0      	b.n	8011082 <_vfiprintf_r+0x1da>
 80110a0:	ab03      	add	r3, sp, #12
 80110a2:	9300      	str	r3, [sp, #0]
 80110a4:	462a      	mov	r2, r5
 80110a6:	4b16      	ldr	r3, [pc, #88]	; (8011100 <_vfiprintf_r+0x258>)
 80110a8:	a904      	add	r1, sp, #16
 80110aa:	4630      	mov	r0, r6
 80110ac:	f3af 8000 	nop.w
 80110b0:	4607      	mov	r7, r0
 80110b2:	1c78      	adds	r0, r7, #1
 80110b4:	d1d6      	bne.n	8011064 <_vfiprintf_r+0x1bc>
 80110b6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80110b8:	07d9      	lsls	r1, r3, #31
 80110ba:	d405      	bmi.n	80110c8 <_vfiprintf_r+0x220>
 80110bc:	89ab      	ldrh	r3, [r5, #12]
 80110be:	059a      	lsls	r2, r3, #22
 80110c0:	d402      	bmi.n	80110c8 <_vfiprintf_r+0x220>
 80110c2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80110c4:	f000 fc35 	bl	8011932 <__retarget_lock_release_recursive>
 80110c8:	89ab      	ldrh	r3, [r5, #12]
 80110ca:	065b      	lsls	r3, r3, #25
 80110cc:	f53f af12 	bmi.w	8010ef4 <_vfiprintf_r+0x4c>
 80110d0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80110d2:	e711      	b.n	8010ef8 <_vfiprintf_r+0x50>
 80110d4:	ab03      	add	r3, sp, #12
 80110d6:	9300      	str	r3, [sp, #0]
 80110d8:	462a      	mov	r2, r5
 80110da:	4b09      	ldr	r3, [pc, #36]	; (8011100 <_vfiprintf_r+0x258>)
 80110dc:	a904      	add	r1, sp, #16
 80110de:	4630      	mov	r0, r6
 80110e0:	f000 f880 	bl	80111e4 <_printf_i>
 80110e4:	e7e4      	b.n	80110b0 <_vfiprintf_r+0x208>
 80110e6:	bf00      	nop
 80110e8:	080129dc 	.word	0x080129dc
 80110ec:	080129fc 	.word	0x080129fc
 80110f0:	080129bc 	.word	0x080129bc
 80110f4:	08012989 	.word	0x08012989
 80110f8:	08012993 	.word	0x08012993
 80110fc:	00000000 	.word	0x00000000
 8011100:	08010e83 	.word	0x08010e83
 8011104:	0801298f 	.word	0x0801298f

08011108 <_printf_common>:
 8011108:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801110c:	4616      	mov	r6, r2
 801110e:	4699      	mov	r9, r3
 8011110:	688a      	ldr	r2, [r1, #8]
 8011112:	690b      	ldr	r3, [r1, #16]
 8011114:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8011118:	4293      	cmp	r3, r2
 801111a:	bfb8      	it	lt
 801111c:	4613      	movlt	r3, r2
 801111e:	6033      	str	r3, [r6, #0]
 8011120:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8011124:	4607      	mov	r7, r0
 8011126:	460c      	mov	r4, r1
 8011128:	b10a      	cbz	r2, 801112e <_printf_common+0x26>
 801112a:	3301      	adds	r3, #1
 801112c:	6033      	str	r3, [r6, #0]
 801112e:	6823      	ldr	r3, [r4, #0]
 8011130:	0699      	lsls	r1, r3, #26
 8011132:	bf42      	ittt	mi
 8011134:	6833      	ldrmi	r3, [r6, #0]
 8011136:	3302      	addmi	r3, #2
 8011138:	6033      	strmi	r3, [r6, #0]
 801113a:	6825      	ldr	r5, [r4, #0]
 801113c:	f015 0506 	ands.w	r5, r5, #6
 8011140:	d106      	bne.n	8011150 <_printf_common+0x48>
 8011142:	f104 0a19 	add.w	sl, r4, #25
 8011146:	68e3      	ldr	r3, [r4, #12]
 8011148:	6832      	ldr	r2, [r6, #0]
 801114a:	1a9b      	subs	r3, r3, r2
 801114c:	42ab      	cmp	r3, r5
 801114e:	dc26      	bgt.n	801119e <_printf_common+0x96>
 8011150:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8011154:	1e13      	subs	r3, r2, #0
 8011156:	6822      	ldr	r2, [r4, #0]
 8011158:	bf18      	it	ne
 801115a:	2301      	movne	r3, #1
 801115c:	0692      	lsls	r2, r2, #26
 801115e:	d42b      	bmi.n	80111b8 <_printf_common+0xb0>
 8011160:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8011164:	4649      	mov	r1, r9
 8011166:	4638      	mov	r0, r7
 8011168:	47c0      	blx	r8
 801116a:	3001      	adds	r0, #1
 801116c:	d01e      	beq.n	80111ac <_printf_common+0xa4>
 801116e:	6823      	ldr	r3, [r4, #0]
 8011170:	68e5      	ldr	r5, [r4, #12]
 8011172:	6832      	ldr	r2, [r6, #0]
 8011174:	f003 0306 	and.w	r3, r3, #6
 8011178:	2b04      	cmp	r3, #4
 801117a:	bf08      	it	eq
 801117c:	1aad      	subeq	r5, r5, r2
 801117e:	68a3      	ldr	r3, [r4, #8]
 8011180:	6922      	ldr	r2, [r4, #16]
 8011182:	bf0c      	ite	eq
 8011184:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8011188:	2500      	movne	r5, #0
 801118a:	4293      	cmp	r3, r2
 801118c:	bfc4      	itt	gt
 801118e:	1a9b      	subgt	r3, r3, r2
 8011190:	18ed      	addgt	r5, r5, r3
 8011192:	2600      	movs	r6, #0
 8011194:	341a      	adds	r4, #26
 8011196:	42b5      	cmp	r5, r6
 8011198:	d11a      	bne.n	80111d0 <_printf_common+0xc8>
 801119a:	2000      	movs	r0, #0
 801119c:	e008      	b.n	80111b0 <_printf_common+0xa8>
 801119e:	2301      	movs	r3, #1
 80111a0:	4652      	mov	r2, sl
 80111a2:	4649      	mov	r1, r9
 80111a4:	4638      	mov	r0, r7
 80111a6:	47c0      	blx	r8
 80111a8:	3001      	adds	r0, #1
 80111aa:	d103      	bne.n	80111b4 <_printf_common+0xac>
 80111ac:	f04f 30ff 	mov.w	r0, #4294967295
 80111b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80111b4:	3501      	adds	r5, #1
 80111b6:	e7c6      	b.n	8011146 <_printf_common+0x3e>
 80111b8:	18e1      	adds	r1, r4, r3
 80111ba:	1c5a      	adds	r2, r3, #1
 80111bc:	2030      	movs	r0, #48	; 0x30
 80111be:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80111c2:	4422      	add	r2, r4
 80111c4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80111c8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80111cc:	3302      	adds	r3, #2
 80111ce:	e7c7      	b.n	8011160 <_printf_common+0x58>
 80111d0:	2301      	movs	r3, #1
 80111d2:	4622      	mov	r2, r4
 80111d4:	4649      	mov	r1, r9
 80111d6:	4638      	mov	r0, r7
 80111d8:	47c0      	blx	r8
 80111da:	3001      	adds	r0, #1
 80111dc:	d0e6      	beq.n	80111ac <_printf_common+0xa4>
 80111de:	3601      	adds	r6, #1
 80111e0:	e7d9      	b.n	8011196 <_printf_common+0x8e>
	...

080111e4 <_printf_i>:
 80111e4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80111e8:	7e0f      	ldrb	r7, [r1, #24]
 80111ea:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80111ec:	2f78      	cmp	r7, #120	; 0x78
 80111ee:	4691      	mov	r9, r2
 80111f0:	4680      	mov	r8, r0
 80111f2:	460c      	mov	r4, r1
 80111f4:	469a      	mov	sl, r3
 80111f6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80111fa:	d807      	bhi.n	801120c <_printf_i+0x28>
 80111fc:	2f62      	cmp	r7, #98	; 0x62
 80111fe:	d80a      	bhi.n	8011216 <_printf_i+0x32>
 8011200:	2f00      	cmp	r7, #0
 8011202:	f000 80d8 	beq.w	80113b6 <_printf_i+0x1d2>
 8011206:	2f58      	cmp	r7, #88	; 0x58
 8011208:	f000 80a3 	beq.w	8011352 <_printf_i+0x16e>
 801120c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8011210:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8011214:	e03a      	b.n	801128c <_printf_i+0xa8>
 8011216:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801121a:	2b15      	cmp	r3, #21
 801121c:	d8f6      	bhi.n	801120c <_printf_i+0x28>
 801121e:	a101      	add	r1, pc, #4	; (adr r1, 8011224 <_printf_i+0x40>)
 8011220:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8011224:	0801127d 	.word	0x0801127d
 8011228:	08011291 	.word	0x08011291
 801122c:	0801120d 	.word	0x0801120d
 8011230:	0801120d 	.word	0x0801120d
 8011234:	0801120d 	.word	0x0801120d
 8011238:	0801120d 	.word	0x0801120d
 801123c:	08011291 	.word	0x08011291
 8011240:	0801120d 	.word	0x0801120d
 8011244:	0801120d 	.word	0x0801120d
 8011248:	0801120d 	.word	0x0801120d
 801124c:	0801120d 	.word	0x0801120d
 8011250:	0801139d 	.word	0x0801139d
 8011254:	080112c1 	.word	0x080112c1
 8011258:	0801137f 	.word	0x0801137f
 801125c:	0801120d 	.word	0x0801120d
 8011260:	0801120d 	.word	0x0801120d
 8011264:	080113bf 	.word	0x080113bf
 8011268:	0801120d 	.word	0x0801120d
 801126c:	080112c1 	.word	0x080112c1
 8011270:	0801120d 	.word	0x0801120d
 8011274:	0801120d 	.word	0x0801120d
 8011278:	08011387 	.word	0x08011387
 801127c:	682b      	ldr	r3, [r5, #0]
 801127e:	1d1a      	adds	r2, r3, #4
 8011280:	681b      	ldr	r3, [r3, #0]
 8011282:	602a      	str	r2, [r5, #0]
 8011284:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8011288:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801128c:	2301      	movs	r3, #1
 801128e:	e0a3      	b.n	80113d8 <_printf_i+0x1f4>
 8011290:	6820      	ldr	r0, [r4, #0]
 8011292:	6829      	ldr	r1, [r5, #0]
 8011294:	0606      	lsls	r6, r0, #24
 8011296:	f101 0304 	add.w	r3, r1, #4
 801129a:	d50a      	bpl.n	80112b2 <_printf_i+0xce>
 801129c:	680e      	ldr	r6, [r1, #0]
 801129e:	602b      	str	r3, [r5, #0]
 80112a0:	2e00      	cmp	r6, #0
 80112a2:	da03      	bge.n	80112ac <_printf_i+0xc8>
 80112a4:	232d      	movs	r3, #45	; 0x2d
 80112a6:	4276      	negs	r6, r6
 80112a8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80112ac:	485e      	ldr	r0, [pc, #376]	; (8011428 <_printf_i+0x244>)
 80112ae:	230a      	movs	r3, #10
 80112b0:	e019      	b.n	80112e6 <_printf_i+0x102>
 80112b2:	680e      	ldr	r6, [r1, #0]
 80112b4:	602b      	str	r3, [r5, #0]
 80112b6:	f010 0f40 	tst.w	r0, #64	; 0x40
 80112ba:	bf18      	it	ne
 80112bc:	b236      	sxthne	r6, r6
 80112be:	e7ef      	b.n	80112a0 <_printf_i+0xbc>
 80112c0:	682b      	ldr	r3, [r5, #0]
 80112c2:	6820      	ldr	r0, [r4, #0]
 80112c4:	1d19      	adds	r1, r3, #4
 80112c6:	6029      	str	r1, [r5, #0]
 80112c8:	0601      	lsls	r1, r0, #24
 80112ca:	d501      	bpl.n	80112d0 <_printf_i+0xec>
 80112cc:	681e      	ldr	r6, [r3, #0]
 80112ce:	e002      	b.n	80112d6 <_printf_i+0xf2>
 80112d0:	0646      	lsls	r6, r0, #25
 80112d2:	d5fb      	bpl.n	80112cc <_printf_i+0xe8>
 80112d4:	881e      	ldrh	r6, [r3, #0]
 80112d6:	4854      	ldr	r0, [pc, #336]	; (8011428 <_printf_i+0x244>)
 80112d8:	2f6f      	cmp	r7, #111	; 0x6f
 80112da:	bf0c      	ite	eq
 80112dc:	2308      	moveq	r3, #8
 80112de:	230a      	movne	r3, #10
 80112e0:	2100      	movs	r1, #0
 80112e2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80112e6:	6865      	ldr	r5, [r4, #4]
 80112e8:	60a5      	str	r5, [r4, #8]
 80112ea:	2d00      	cmp	r5, #0
 80112ec:	bfa2      	ittt	ge
 80112ee:	6821      	ldrge	r1, [r4, #0]
 80112f0:	f021 0104 	bicge.w	r1, r1, #4
 80112f4:	6021      	strge	r1, [r4, #0]
 80112f6:	b90e      	cbnz	r6, 80112fc <_printf_i+0x118>
 80112f8:	2d00      	cmp	r5, #0
 80112fa:	d04d      	beq.n	8011398 <_printf_i+0x1b4>
 80112fc:	4615      	mov	r5, r2
 80112fe:	fbb6 f1f3 	udiv	r1, r6, r3
 8011302:	fb03 6711 	mls	r7, r3, r1, r6
 8011306:	5dc7      	ldrb	r7, [r0, r7]
 8011308:	f805 7d01 	strb.w	r7, [r5, #-1]!
 801130c:	4637      	mov	r7, r6
 801130e:	42bb      	cmp	r3, r7
 8011310:	460e      	mov	r6, r1
 8011312:	d9f4      	bls.n	80112fe <_printf_i+0x11a>
 8011314:	2b08      	cmp	r3, #8
 8011316:	d10b      	bne.n	8011330 <_printf_i+0x14c>
 8011318:	6823      	ldr	r3, [r4, #0]
 801131a:	07de      	lsls	r6, r3, #31
 801131c:	d508      	bpl.n	8011330 <_printf_i+0x14c>
 801131e:	6923      	ldr	r3, [r4, #16]
 8011320:	6861      	ldr	r1, [r4, #4]
 8011322:	4299      	cmp	r1, r3
 8011324:	bfde      	ittt	le
 8011326:	2330      	movle	r3, #48	; 0x30
 8011328:	f805 3c01 	strble.w	r3, [r5, #-1]
 801132c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8011330:	1b52      	subs	r2, r2, r5
 8011332:	6122      	str	r2, [r4, #16]
 8011334:	f8cd a000 	str.w	sl, [sp]
 8011338:	464b      	mov	r3, r9
 801133a:	aa03      	add	r2, sp, #12
 801133c:	4621      	mov	r1, r4
 801133e:	4640      	mov	r0, r8
 8011340:	f7ff fee2 	bl	8011108 <_printf_common>
 8011344:	3001      	adds	r0, #1
 8011346:	d14c      	bne.n	80113e2 <_printf_i+0x1fe>
 8011348:	f04f 30ff 	mov.w	r0, #4294967295
 801134c:	b004      	add	sp, #16
 801134e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011352:	4835      	ldr	r0, [pc, #212]	; (8011428 <_printf_i+0x244>)
 8011354:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8011358:	6829      	ldr	r1, [r5, #0]
 801135a:	6823      	ldr	r3, [r4, #0]
 801135c:	f851 6b04 	ldr.w	r6, [r1], #4
 8011360:	6029      	str	r1, [r5, #0]
 8011362:	061d      	lsls	r5, r3, #24
 8011364:	d514      	bpl.n	8011390 <_printf_i+0x1ac>
 8011366:	07df      	lsls	r7, r3, #31
 8011368:	bf44      	itt	mi
 801136a:	f043 0320 	orrmi.w	r3, r3, #32
 801136e:	6023      	strmi	r3, [r4, #0]
 8011370:	b91e      	cbnz	r6, 801137a <_printf_i+0x196>
 8011372:	6823      	ldr	r3, [r4, #0]
 8011374:	f023 0320 	bic.w	r3, r3, #32
 8011378:	6023      	str	r3, [r4, #0]
 801137a:	2310      	movs	r3, #16
 801137c:	e7b0      	b.n	80112e0 <_printf_i+0xfc>
 801137e:	6823      	ldr	r3, [r4, #0]
 8011380:	f043 0320 	orr.w	r3, r3, #32
 8011384:	6023      	str	r3, [r4, #0]
 8011386:	2378      	movs	r3, #120	; 0x78
 8011388:	4828      	ldr	r0, [pc, #160]	; (801142c <_printf_i+0x248>)
 801138a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801138e:	e7e3      	b.n	8011358 <_printf_i+0x174>
 8011390:	0659      	lsls	r1, r3, #25
 8011392:	bf48      	it	mi
 8011394:	b2b6      	uxthmi	r6, r6
 8011396:	e7e6      	b.n	8011366 <_printf_i+0x182>
 8011398:	4615      	mov	r5, r2
 801139a:	e7bb      	b.n	8011314 <_printf_i+0x130>
 801139c:	682b      	ldr	r3, [r5, #0]
 801139e:	6826      	ldr	r6, [r4, #0]
 80113a0:	6961      	ldr	r1, [r4, #20]
 80113a2:	1d18      	adds	r0, r3, #4
 80113a4:	6028      	str	r0, [r5, #0]
 80113a6:	0635      	lsls	r5, r6, #24
 80113a8:	681b      	ldr	r3, [r3, #0]
 80113aa:	d501      	bpl.n	80113b0 <_printf_i+0x1cc>
 80113ac:	6019      	str	r1, [r3, #0]
 80113ae:	e002      	b.n	80113b6 <_printf_i+0x1d2>
 80113b0:	0670      	lsls	r0, r6, #25
 80113b2:	d5fb      	bpl.n	80113ac <_printf_i+0x1c8>
 80113b4:	8019      	strh	r1, [r3, #0]
 80113b6:	2300      	movs	r3, #0
 80113b8:	6123      	str	r3, [r4, #16]
 80113ba:	4615      	mov	r5, r2
 80113bc:	e7ba      	b.n	8011334 <_printf_i+0x150>
 80113be:	682b      	ldr	r3, [r5, #0]
 80113c0:	1d1a      	adds	r2, r3, #4
 80113c2:	602a      	str	r2, [r5, #0]
 80113c4:	681d      	ldr	r5, [r3, #0]
 80113c6:	6862      	ldr	r2, [r4, #4]
 80113c8:	2100      	movs	r1, #0
 80113ca:	4628      	mov	r0, r5
 80113cc:	f7ee ff90 	bl	80002f0 <memchr>
 80113d0:	b108      	cbz	r0, 80113d6 <_printf_i+0x1f2>
 80113d2:	1b40      	subs	r0, r0, r5
 80113d4:	6060      	str	r0, [r4, #4]
 80113d6:	6863      	ldr	r3, [r4, #4]
 80113d8:	6123      	str	r3, [r4, #16]
 80113da:	2300      	movs	r3, #0
 80113dc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80113e0:	e7a8      	b.n	8011334 <_printf_i+0x150>
 80113e2:	6923      	ldr	r3, [r4, #16]
 80113e4:	462a      	mov	r2, r5
 80113e6:	4649      	mov	r1, r9
 80113e8:	4640      	mov	r0, r8
 80113ea:	47d0      	blx	sl
 80113ec:	3001      	adds	r0, #1
 80113ee:	d0ab      	beq.n	8011348 <_printf_i+0x164>
 80113f0:	6823      	ldr	r3, [r4, #0]
 80113f2:	079b      	lsls	r3, r3, #30
 80113f4:	d413      	bmi.n	801141e <_printf_i+0x23a>
 80113f6:	68e0      	ldr	r0, [r4, #12]
 80113f8:	9b03      	ldr	r3, [sp, #12]
 80113fa:	4298      	cmp	r0, r3
 80113fc:	bfb8      	it	lt
 80113fe:	4618      	movlt	r0, r3
 8011400:	e7a4      	b.n	801134c <_printf_i+0x168>
 8011402:	2301      	movs	r3, #1
 8011404:	4632      	mov	r2, r6
 8011406:	4649      	mov	r1, r9
 8011408:	4640      	mov	r0, r8
 801140a:	47d0      	blx	sl
 801140c:	3001      	adds	r0, #1
 801140e:	d09b      	beq.n	8011348 <_printf_i+0x164>
 8011410:	3501      	adds	r5, #1
 8011412:	68e3      	ldr	r3, [r4, #12]
 8011414:	9903      	ldr	r1, [sp, #12]
 8011416:	1a5b      	subs	r3, r3, r1
 8011418:	42ab      	cmp	r3, r5
 801141a:	dcf2      	bgt.n	8011402 <_printf_i+0x21e>
 801141c:	e7eb      	b.n	80113f6 <_printf_i+0x212>
 801141e:	2500      	movs	r5, #0
 8011420:	f104 0619 	add.w	r6, r4, #25
 8011424:	e7f5      	b.n	8011412 <_printf_i+0x22e>
 8011426:	bf00      	nop
 8011428:	0801299a 	.word	0x0801299a
 801142c:	080129ab 	.word	0x080129ab

08011430 <__swbuf_r>:
 8011430:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011432:	460e      	mov	r6, r1
 8011434:	4614      	mov	r4, r2
 8011436:	4605      	mov	r5, r0
 8011438:	b118      	cbz	r0, 8011442 <__swbuf_r+0x12>
 801143a:	6983      	ldr	r3, [r0, #24]
 801143c:	b90b      	cbnz	r3, 8011442 <__swbuf_r+0x12>
 801143e:	f000 f9d9 	bl	80117f4 <__sinit>
 8011442:	4b21      	ldr	r3, [pc, #132]	; (80114c8 <__swbuf_r+0x98>)
 8011444:	429c      	cmp	r4, r3
 8011446:	d12b      	bne.n	80114a0 <__swbuf_r+0x70>
 8011448:	686c      	ldr	r4, [r5, #4]
 801144a:	69a3      	ldr	r3, [r4, #24]
 801144c:	60a3      	str	r3, [r4, #8]
 801144e:	89a3      	ldrh	r3, [r4, #12]
 8011450:	071a      	lsls	r2, r3, #28
 8011452:	d52f      	bpl.n	80114b4 <__swbuf_r+0x84>
 8011454:	6923      	ldr	r3, [r4, #16]
 8011456:	b36b      	cbz	r3, 80114b4 <__swbuf_r+0x84>
 8011458:	6923      	ldr	r3, [r4, #16]
 801145a:	6820      	ldr	r0, [r4, #0]
 801145c:	1ac0      	subs	r0, r0, r3
 801145e:	6963      	ldr	r3, [r4, #20]
 8011460:	b2f6      	uxtb	r6, r6
 8011462:	4283      	cmp	r3, r0
 8011464:	4637      	mov	r7, r6
 8011466:	dc04      	bgt.n	8011472 <__swbuf_r+0x42>
 8011468:	4621      	mov	r1, r4
 801146a:	4628      	mov	r0, r5
 801146c:	f000 f92e 	bl	80116cc <_fflush_r>
 8011470:	bb30      	cbnz	r0, 80114c0 <__swbuf_r+0x90>
 8011472:	68a3      	ldr	r3, [r4, #8]
 8011474:	3b01      	subs	r3, #1
 8011476:	60a3      	str	r3, [r4, #8]
 8011478:	6823      	ldr	r3, [r4, #0]
 801147a:	1c5a      	adds	r2, r3, #1
 801147c:	6022      	str	r2, [r4, #0]
 801147e:	701e      	strb	r6, [r3, #0]
 8011480:	6963      	ldr	r3, [r4, #20]
 8011482:	3001      	adds	r0, #1
 8011484:	4283      	cmp	r3, r0
 8011486:	d004      	beq.n	8011492 <__swbuf_r+0x62>
 8011488:	89a3      	ldrh	r3, [r4, #12]
 801148a:	07db      	lsls	r3, r3, #31
 801148c:	d506      	bpl.n	801149c <__swbuf_r+0x6c>
 801148e:	2e0a      	cmp	r6, #10
 8011490:	d104      	bne.n	801149c <__swbuf_r+0x6c>
 8011492:	4621      	mov	r1, r4
 8011494:	4628      	mov	r0, r5
 8011496:	f000 f919 	bl	80116cc <_fflush_r>
 801149a:	b988      	cbnz	r0, 80114c0 <__swbuf_r+0x90>
 801149c:	4638      	mov	r0, r7
 801149e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80114a0:	4b0a      	ldr	r3, [pc, #40]	; (80114cc <__swbuf_r+0x9c>)
 80114a2:	429c      	cmp	r4, r3
 80114a4:	d101      	bne.n	80114aa <__swbuf_r+0x7a>
 80114a6:	68ac      	ldr	r4, [r5, #8]
 80114a8:	e7cf      	b.n	801144a <__swbuf_r+0x1a>
 80114aa:	4b09      	ldr	r3, [pc, #36]	; (80114d0 <__swbuf_r+0xa0>)
 80114ac:	429c      	cmp	r4, r3
 80114ae:	bf08      	it	eq
 80114b0:	68ec      	ldreq	r4, [r5, #12]
 80114b2:	e7ca      	b.n	801144a <__swbuf_r+0x1a>
 80114b4:	4621      	mov	r1, r4
 80114b6:	4628      	mov	r0, r5
 80114b8:	f000 f80c 	bl	80114d4 <__swsetup_r>
 80114bc:	2800      	cmp	r0, #0
 80114be:	d0cb      	beq.n	8011458 <__swbuf_r+0x28>
 80114c0:	f04f 37ff 	mov.w	r7, #4294967295
 80114c4:	e7ea      	b.n	801149c <__swbuf_r+0x6c>
 80114c6:	bf00      	nop
 80114c8:	080129dc 	.word	0x080129dc
 80114cc:	080129fc 	.word	0x080129fc
 80114d0:	080129bc 	.word	0x080129bc

080114d4 <__swsetup_r>:
 80114d4:	4b32      	ldr	r3, [pc, #200]	; (80115a0 <__swsetup_r+0xcc>)
 80114d6:	b570      	push	{r4, r5, r6, lr}
 80114d8:	681d      	ldr	r5, [r3, #0]
 80114da:	4606      	mov	r6, r0
 80114dc:	460c      	mov	r4, r1
 80114de:	b125      	cbz	r5, 80114ea <__swsetup_r+0x16>
 80114e0:	69ab      	ldr	r3, [r5, #24]
 80114e2:	b913      	cbnz	r3, 80114ea <__swsetup_r+0x16>
 80114e4:	4628      	mov	r0, r5
 80114e6:	f000 f985 	bl	80117f4 <__sinit>
 80114ea:	4b2e      	ldr	r3, [pc, #184]	; (80115a4 <__swsetup_r+0xd0>)
 80114ec:	429c      	cmp	r4, r3
 80114ee:	d10f      	bne.n	8011510 <__swsetup_r+0x3c>
 80114f0:	686c      	ldr	r4, [r5, #4]
 80114f2:	89a3      	ldrh	r3, [r4, #12]
 80114f4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80114f8:	0719      	lsls	r1, r3, #28
 80114fa:	d42c      	bmi.n	8011556 <__swsetup_r+0x82>
 80114fc:	06dd      	lsls	r5, r3, #27
 80114fe:	d411      	bmi.n	8011524 <__swsetup_r+0x50>
 8011500:	2309      	movs	r3, #9
 8011502:	6033      	str	r3, [r6, #0]
 8011504:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8011508:	81a3      	strh	r3, [r4, #12]
 801150a:	f04f 30ff 	mov.w	r0, #4294967295
 801150e:	e03e      	b.n	801158e <__swsetup_r+0xba>
 8011510:	4b25      	ldr	r3, [pc, #148]	; (80115a8 <__swsetup_r+0xd4>)
 8011512:	429c      	cmp	r4, r3
 8011514:	d101      	bne.n	801151a <__swsetup_r+0x46>
 8011516:	68ac      	ldr	r4, [r5, #8]
 8011518:	e7eb      	b.n	80114f2 <__swsetup_r+0x1e>
 801151a:	4b24      	ldr	r3, [pc, #144]	; (80115ac <__swsetup_r+0xd8>)
 801151c:	429c      	cmp	r4, r3
 801151e:	bf08      	it	eq
 8011520:	68ec      	ldreq	r4, [r5, #12]
 8011522:	e7e6      	b.n	80114f2 <__swsetup_r+0x1e>
 8011524:	0758      	lsls	r0, r3, #29
 8011526:	d512      	bpl.n	801154e <__swsetup_r+0x7a>
 8011528:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801152a:	b141      	cbz	r1, 801153e <__swsetup_r+0x6a>
 801152c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8011530:	4299      	cmp	r1, r3
 8011532:	d002      	beq.n	801153a <__swsetup_r+0x66>
 8011534:	4630      	mov	r0, r6
 8011536:	f7ff fc41 	bl	8010dbc <_free_r>
 801153a:	2300      	movs	r3, #0
 801153c:	6363      	str	r3, [r4, #52]	; 0x34
 801153e:	89a3      	ldrh	r3, [r4, #12]
 8011540:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8011544:	81a3      	strh	r3, [r4, #12]
 8011546:	2300      	movs	r3, #0
 8011548:	6063      	str	r3, [r4, #4]
 801154a:	6923      	ldr	r3, [r4, #16]
 801154c:	6023      	str	r3, [r4, #0]
 801154e:	89a3      	ldrh	r3, [r4, #12]
 8011550:	f043 0308 	orr.w	r3, r3, #8
 8011554:	81a3      	strh	r3, [r4, #12]
 8011556:	6923      	ldr	r3, [r4, #16]
 8011558:	b94b      	cbnz	r3, 801156e <__swsetup_r+0x9a>
 801155a:	89a3      	ldrh	r3, [r4, #12]
 801155c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8011560:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8011564:	d003      	beq.n	801156e <__swsetup_r+0x9a>
 8011566:	4621      	mov	r1, r4
 8011568:	4630      	mov	r0, r6
 801156a:	f000 fa09 	bl	8011980 <__smakebuf_r>
 801156e:	89a0      	ldrh	r0, [r4, #12]
 8011570:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8011574:	f010 0301 	ands.w	r3, r0, #1
 8011578:	d00a      	beq.n	8011590 <__swsetup_r+0xbc>
 801157a:	2300      	movs	r3, #0
 801157c:	60a3      	str	r3, [r4, #8]
 801157e:	6963      	ldr	r3, [r4, #20]
 8011580:	425b      	negs	r3, r3
 8011582:	61a3      	str	r3, [r4, #24]
 8011584:	6923      	ldr	r3, [r4, #16]
 8011586:	b943      	cbnz	r3, 801159a <__swsetup_r+0xc6>
 8011588:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801158c:	d1ba      	bne.n	8011504 <__swsetup_r+0x30>
 801158e:	bd70      	pop	{r4, r5, r6, pc}
 8011590:	0781      	lsls	r1, r0, #30
 8011592:	bf58      	it	pl
 8011594:	6963      	ldrpl	r3, [r4, #20]
 8011596:	60a3      	str	r3, [r4, #8]
 8011598:	e7f4      	b.n	8011584 <__swsetup_r+0xb0>
 801159a:	2000      	movs	r0, #0
 801159c:	e7f7      	b.n	801158e <__swsetup_r+0xba>
 801159e:	bf00      	nop
 80115a0:	240000b0 	.word	0x240000b0
 80115a4:	080129dc 	.word	0x080129dc
 80115a8:	080129fc 	.word	0x080129fc
 80115ac:	080129bc 	.word	0x080129bc

080115b0 <abort>:
 80115b0:	b508      	push	{r3, lr}
 80115b2:	2006      	movs	r0, #6
 80115b4:	f000 fa4c 	bl	8011a50 <raise>
 80115b8:	2001      	movs	r0, #1
 80115ba:	f7f2 fd5f 	bl	800407c <_exit>
	...

080115c0 <__sflush_r>:
 80115c0:	898a      	ldrh	r2, [r1, #12]
 80115c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80115c6:	4605      	mov	r5, r0
 80115c8:	0710      	lsls	r0, r2, #28
 80115ca:	460c      	mov	r4, r1
 80115cc:	d458      	bmi.n	8011680 <__sflush_r+0xc0>
 80115ce:	684b      	ldr	r3, [r1, #4]
 80115d0:	2b00      	cmp	r3, #0
 80115d2:	dc05      	bgt.n	80115e0 <__sflush_r+0x20>
 80115d4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80115d6:	2b00      	cmp	r3, #0
 80115d8:	dc02      	bgt.n	80115e0 <__sflush_r+0x20>
 80115da:	2000      	movs	r0, #0
 80115dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80115e0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80115e2:	2e00      	cmp	r6, #0
 80115e4:	d0f9      	beq.n	80115da <__sflush_r+0x1a>
 80115e6:	2300      	movs	r3, #0
 80115e8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80115ec:	682f      	ldr	r7, [r5, #0]
 80115ee:	602b      	str	r3, [r5, #0]
 80115f0:	d032      	beq.n	8011658 <__sflush_r+0x98>
 80115f2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80115f4:	89a3      	ldrh	r3, [r4, #12]
 80115f6:	075a      	lsls	r2, r3, #29
 80115f8:	d505      	bpl.n	8011606 <__sflush_r+0x46>
 80115fa:	6863      	ldr	r3, [r4, #4]
 80115fc:	1ac0      	subs	r0, r0, r3
 80115fe:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8011600:	b10b      	cbz	r3, 8011606 <__sflush_r+0x46>
 8011602:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8011604:	1ac0      	subs	r0, r0, r3
 8011606:	2300      	movs	r3, #0
 8011608:	4602      	mov	r2, r0
 801160a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801160c:	6a21      	ldr	r1, [r4, #32]
 801160e:	4628      	mov	r0, r5
 8011610:	47b0      	blx	r6
 8011612:	1c43      	adds	r3, r0, #1
 8011614:	89a3      	ldrh	r3, [r4, #12]
 8011616:	d106      	bne.n	8011626 <__sflush_r+0x66>
 8011618:	6829      	ldr	r1, [r5, #0]
 801161a:	291d      	cmp	r1, #29
 801161c:	d82c      	bhi.n	8011678 <__sflush_r+0xb8>
 801161e:	4a2a      	ldr	r2, [pc, #168]	; (80116c8 <__sflush_r+0x108>)
 8011620:	40ca      	lsrs	r2, r1
 8011622:	07d6      	lsls	r6, r2, #31
 8011624:	d528      	bpl.n	8011678 <__sflush_r+0xb8>
 8011626:	2200      	movs	r2, #0
 8011628:	6062      	str	r2, [r4, #4]
 801162a:	04d9      	lsls	r1, r3, #19
 801162c:	6922      	ldr	r2, [r4, #16]
 801162e:	6022      	str	r2, [r4, #0]
 8011630:	d504      	bpl.n	801163c <__sflush_r+0x7c>
 8011632:	1c42      	adds	r2, r0, #1
 8011634:	d101      	bne.n	801163a <__sflush_r+0x7a>
 8011636:	682b      	ldr	r3, [r5, #0]
 8011638:	b903      	cbnz	r3, 801163c <__sflush_r+0x7c>
 801163a:	6560      	str	r0, [r4, #84]	; 0x54
 801163c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801163e:	602f      	str	r7, [r5, #0]
 8011640:	2900      	cmp	r1, #0
 8011642:	d0ca      	beq.n	80115da <__sflush_r+0x1a>
 8011644:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8011648:	4299      	cmp	r1, r3
 801164a:	d002      	beq.n	8011652 <__sflush_r+0x92>
 801164c:	4628      	mov	r0, r5
 801164e:	f7ff fbb5 	bl	8010dbc <_free_r>
 8011652:	2000      	movs	r0, #0
 8011654:	6360      	str	r0, [r4, #52]	; 0x34
 8011656:	e7c1      	b.n	80115dc <__sflush_r+0x1c>
 8011658:	6a21      	ldr	r1, [r4, #32]
 801165a:	2301      	movs	r3, #1
 801165c:	4628      	mov	r0, r5
 801165e:	47b0      	blx	r6
 8011660:	1c41      	adds	r1, r0, #1
 8011662:	d1c7      	bne.n	80115f4 <__sflush_r+0x34>
 8011664:	682b      	ldr	r3, [r5, #0]
 8011666:	2b00      	cmp	r3, #0
 8011668:	d0c4      	beq.n	80115f4 <__sflush_r+0x34>
 801166a:	2b1d      	cmp	r3, #29
 801166c:	d001      	beq.n	8011672 <__sflush_r+0xb2>
 801166e:	2b16      	cmp	r3, #22
 8011670:	d101      	bne.n	8011676 <__sflush_r+0xb6>
 8011672:	602f      	str	r7, [r5, #0]
 8011674:	e7b1      	b.n	80115da <__sflush_r+0x1a>
 8011676:	89a3      	ldrh	r3, [r4, #12]
 8011678:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801167c:	81a3      	strh	r3, [r4, #12]
 801167e:	e7ad      	b.n	80115dc <__sflush_r+0x1c>
 8011680:	690f      	ldr	r7, [r1, #16]
 8011682:	2f00      	cmp	r7, #0
 8011684:	d0a9      	beq.n	80115da <__sflush_r+0x1a>
 8011686:	0793      	lsls	r3, r2, #30
 8011688:	680e      	ldr	r6, [r1, #0]
 801168a:	bf08      	it	eq
 801168c:	694b      	ldreq	r3, [r1, #20]
 801168e:	600f      	str	r7, [r1, #0]
 8011690:	bf18      	it	ne
 8011692:	2300      	movne	r3, #0
 8011694:	eba6 0807 	sub.w	r8, r6, r7
 8011698:	608b      	str	r3, [r1, #8]
 801169a:	f1b8 0f00 	cmp.w	r8, #0
 801169e:	dd9c      	ble.n	80115da <__sflush_r+0x1a>
 80116a0:	6a21      	ldr	r1, [r4, #32]
 80116a2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80116a4:	4643      	mov	r3, r8
 80116a6:	463a      	mov	r2, r7
 80116a8:	4628      	mov	r0, r5
 80116aa:	47b0      	blx	r6
 80116ac:	2800      	cmp	r0, #0
 80116ae:	dc06      	bgt.n	80116be <__sflush_r+0xfe>
 80116b0:	89a3      	ldrh	r3, [r4, #12]
 80116b2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80116b6:	81a3      	strh	r3, [r4, #12]
 80116b8:	f04f 30ff 	mov.w	r0, #4294967295
 80116bc:	e78e      	b.n	80115dc <__sflush_r+0x1c>
 80116be:	4407      	add	r7, r0
 80116c0:	eba8 0800 	sub.w	r8, r8, r0
 80116c4:	e7e9      	b.n	801169a <__sflush_r+0xda>
 80116c6:	bf00      	nop
 80116c8:	20400001 	.word	0x20400001

080116cc <_fflush_r>:
 80116cc:	b538      	push	{r3, r4, r5, lr}
 80116ce:	690b      	ldr	r3, [r1, #16]
 80116d0:	4605      	mov	r5, r0
 80116d2:	460c      	mov	r4, r1
 80116d4:	b913      	cbnz	r3, 80116dc <_fflush_r+0x10>
 80116d6:	2500      	movs	r5, #0
 80116d8:	4628      	mov	r0, r5
 80116da:	bd38      	pop	{r3, r4, r5, pc}
 80116dc:	b118      	cbz	r0, 80116e6 <_fflush_r+0x1a>
 80116de:	6983      	ldr	r3, [r0, #24]
 80116e0:	b90b      	cbnz	r3, 80116e6 <_fflush_r+0x1a>
 80116e2:	f000 f887 	bl	80117f4 <__sinit>
 80116e6:	4b14      	ldr	r3, [pc, #80]	; (8011738 <_fflush_r+0x6c>)
 80116e8:	429c      	cmp	r4, r3
 80116ea:	d11b      	bne.n	8011724 <_fflush_r+0x58>
 80116ec:	686c      	ldr	r4, [r5, #4]
 80116ee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80116f2:	2b00      	cmp	r3, #0
 80116f4:	d0ef      	beq.n	80116d6 <_fflush_r+0xa>
 80116f6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80116f8:	07d0      	lsls	r0, r2, #31
 80116fa:	d404      	bmi.n	8011706 <_fflush_r+0x3a>
 80116fc:	0599      	lsls	r1, r3, #22
 80116fe:	d402      	bmi.n	8011706 <_fflush_r+0x3a>
 8011700:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011702:	f000 f915 	bl	8011930 <__retarget_lock_acquire_recursive>
 8011706:	4628      	mov	r0, r5
 8011708:	4621      	mov	r1, r4
 801170a:	f7ff ff59 	bl	80115c0 <__sflush_r>
 801170e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8011710:	07da      	lsls	r2, r3, #31
 8011712:	4605      	mov	r5, r0
 8011714:	d4e0      	bmi.n	80116d8 <_fflush_r+0xc>
 8011716:	89a3      	ldrh	r3, [r4, #12]
 8011718:	059b      	lsls	r3, r3, #22
 801171a:	d4dd      	bmi.n	80116d8 <_fflush_r+0xc>
 801171c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801171e:	f000 f908 	bl	8011932 <__retarget_lock_release_recursive>
 8011722:	e7d9      	b.n	80116d8 <_fflush_r+0xc>
 8011724:	4b05      	ldr	r3, [pc, #20]	; (801173c <_fflush_r+0x70>)
 8011726:	429c      	cmp	r4, r3
 8011728:	d101      	bne.n	801172e <_fflush_r+0x62>
 801172a:	68ac      	ldr	r4, [r5, #8]
 801172c:	e7df      	b.n	80116ee <_fflush_r+0x22>
 801172e:	4b04      	ldr	r3, [pc, #16]	; (8011740 <_fflush_r+0x74>)
 8011730:	429c      	cmp	r4, r3
 8011732:	bf08      	it	eq
 8011734:	68ec      	ldreq	r4, [r5, #12]
 8011736:	e7da      	b.n	80116ee <_fflush_r+0x22>
 8011738:	080129dc 	.word	0x080129dc
 801173c:	080129fc 	.word	0x080129fc
 8011740:	080129bc 	.word	0x080129bc

08011744 <std>:
 8011744:	2300      	movs	r3, #0
 8011746:	b510      	push	{r4, lr}
 8011748:	4604      	mov	r4, r0
 801174a:	e9c0 3300 	strd	r3, r3, [r0]
 801174e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8011752:	6083      	str	r3, [r0, #8]
 8011754:	8181      	strh	r1, [r0, #12]
 8011756:	6643      	str	r3, [r0, #100]	; 0x64
 8011758:	81c2      	strh	r2, [r0, #14]
 801175a:	6183      	str	r3, [r0, #24]
 801175c:	4619      	mov	r1, r3
 801175e:	2208      	movs	r2, #8
 8011760:	305c      	adds	r0, #92	; 0x5c
 8011762:	f7fd fbdd 	bl	800ef20 <memset>
 8011766:	4b05      	ldr	r3, [pc, #20]	; (801177c <std+0x38>)
 8011768:	6263      	str	r3, [r4, #36]	; 0x24
 801176a:	4b05      	ldr	r3, [pc, #20]	; (8011780 <std+0x3c>)
 801176c:	62a3      	str	r3, [r4, #40]	; 0x28
 801176e:	4b05      	ldr	r3, [pc, #20]	; (8011784 <std+0x40>)
 8011770:	62e3      	str	r3, [r4, #44]	; 0x2c
 8011772:	4b05      	ldr	r3, [pc, #20]	; (8011788 <std+0x44>)
 8011774:	6224      	str	r4, [r4, #32]
 8011776:	6323      	str	r3, [r4, #48]	; 0x30
 8011778:	bd10      	pop	{r4, pc}
 801177a:	bf00      	nop
 801177c:	08011a89 	.word	0x08011a89
 8011780:	08011aab 	.word	0x08011aab
 8011784:	08011ae3 	.word	0x08011ae3
 8011788:	08011b07 	.word	0x08011b07

0801178c <_cleanup_r>:
 801178c:	4901      	ldr	r1, [pc, #4]	; (8011794 <_cleanup_r+0x8>)
 801178e:	f000 b8af 	b.w	80118f0 <_fwalk_reent>
 8011792:	bf00      	nop
 8011794:	080116cd 	.word	0x080116cd

08011798 <__sfmoreglue>:
 8011798:	b570      	push	{r4, r5, r6, lr}
 801179a:	2268      	movs	r2, #104	; 0x68
 801179c:	1e4d      	subs	r5, r1, #1
 801179e:	4355      	muls	r5, r2
 80117a0:	460e      	mov	r6, r1
 80117a2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80117a6:	f7ff fa17 	bl	8010bd8 <_malloc_r>
 80117aa:	4604      	mov	r4, r0
 80117ac:	b140      	cbz	r0, 80117c0 <__sfmoreglue+0x28>
 80117ae:	2100      	movs	r1, #0
 80117b0:	e9c0 1600 	strd	r1, r6, [r0]
 80117b4:	300c      	adds	r0, #12
 80117b6:	60a0      	str	r0, [r4, #8]
 80117b8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80117bc:	f7fd fbb0 	bl	800ef20 <memset>
 80117c0:	4620      	mov	r0, r4
 80117c2:	bd70      	pop	{r4, r5, r6, pc}

080117c4 <__sfp_lock_acquire>:
 80117c4:	4801      	ldr	r0, [pc, #4]	; (80117cc <__sfp_lock_acquire+0x8>)
 80117c6:	f000 b8b3 	b.w	8011930 <__retarget_lock_acquire_recursive>
 80117ca:	bf00      	nop
 80117cc:	24000d91 	.word	0x24000d91

080117d0 <__sfp_lock_release>:
 80117d0:	4801      	ldr	r0, [pc, #4]	; (80117d8 <__sfp_lock_release+0x8>)
 80117d2:	f000 b8ae 	b.w	8011932 <__retarget_lock_release_recursive>
 80117d6:	bf00      	nop
 80117d8:	24000d91 	.word	0x24000d91

080117dc <__sinit_lock_acquire>:
 80117dc:	4801      	ldr	r0, [pc, #4]	; (80117e4 <__sinit_lock_acquire+0x8>)
 80117de:	f000 b8a7 	b.w	8011930 <__retarget_lock_acquire_recursive>
 80117e2:	bf00      	nop
 80117e4:	24000d92 	.word	0x24000d92

080117e8 <__sinit_lock_release>:
 80117e8:	4801      	ldr	r0, [pc, #4]	; (80117f0 <__sinit_lock_release+0x8>)
 80117ea:	f000 b8a2 	b.w	8011932 <__retarget_lock_release_recursive>
 80117ee:	bf00      	nop
 80117f0:	24000d92 	.word	0x24000d92

080117f4 <__sinit>:
 80117f4:	b510      	push	{r4, lr}
 80117f6:	4604      	mov	r4, r0
 80117f8:	f7ff fff0 	bl	80117dc <__sinit_lock_acquire>
 80117fc:	69a3      	ldr	r3, [r4, #24]
 80117fe:	b11b      	cbz	r3, 8011808 <__sinit+0x14>
 8011800:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011804:	f7ff bff0 	b.w	80117e8 <__sinit_lock_release>
 8011808:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 801180c:	6523      	str	r3, [r4, #80]	; 0x50
 801180e:	4b13      	ldr	r3, [pc, #76]	; (801185c <__sinit+0x68>)
 8011810:	4a13      	ldr	r2, [pc, #76]	; (8011860 <__sinit+0x6c>)
 8011812:	681b      	ldr	r3, [r3, #0]
 8011814:	62a2      	str	r2, [r4, #40]	; 0x28
 8011816:	42a3      	cmp	r3, r4
 8011818:	bf04      	itt	eq
 801181a:	2301      	moveq	r3, #1
 801181c:	61a3      	streq	r3, [r4, #24]
 801181e:	4620      	mov	r0, r4
 8011820:	f000 f820 	bl	8011864 <__sfp>
 8011824:	6060      	str	r0, [r4, #4]
 8011826:	4620      	mov	r0, r4
 8011828:	f000 f81c 	bl	8011864 <__sfp>
 801182c:	60a0      	str	r0, [r4, #8]
 801182e:	4620      	mov	r0, r4
 8011830:	f000 f818 	bl	8011864 <__sfp>
 8011834:	2200      	movs	r2, #0
 8011836:	60e0      	str	r0, [r4, #12]
 8011838:	2104      	movs	r1, #4
 801183a:	6860      	ldr	r0, [r4, #4]
 801183c:	f7ff ff82 	bl	8011744 <std>
 8011840:	68a0      	ldr	r0, [r4, #8]
 8011842:	2201      	movs	r2, #1
 8011844:	2109      	movs	r1, #9
 8011846:	f7ff ff7d 	bl	8011744 <std>
 801184a:	68e0      	ldr	r0, [r4, #12]
 801184c:	2202      	movs	r2, #2
 801184e:	2112      	movs	r1, #18
 8011850:	f7ff ff78 	bl	8011744 <std>
 8011854:	2301      	movs	r3, #1
 8011856:	61a3      	str	r3, [r4, #24]
 8011858:	e7d2      	b.n	8011800 <__sinit+0xc>
 801185a:	bf00      	nop
 801185c:	080125f0 	.word	0x080125f0
 8011860:	0801178d 	.word	0x0801178d

08011864 <__sfp>:
 8011864:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011866:	4607      	mov	r7, r0
 8011868:	f7ff ffac 	bl	80117c4 <__sfp_lock_acquire>
 801186c:	4b1e      	ldr	r3, [pc, #120]	; (80118e8 <__sfp+0x84>)
 801186e:	681e      	ldr	r6, [r3, #0]
 8011870:	69b3      	ldr	r3, [r6, #24]
 8011872:	b913      	cbnz	r3, 801187a <__sfp+0x16>
 8011874:	4630      	mov	r0, r6
 8011876:	f7ff ffbd 	bl	80117f4 <__sinit>
 801187a:	3648      	adds	r6, #72	; 0x48
 801187c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8011880:	3b01      	subs	r3, #1
 8011882:	d503      	bpl.n	801188c <__sfp+0x28>
 8011884:	6833      	ldr	r3, [r6, #0]
 8011886:	b30b      	cbz	r3, 80118cc <__sfp+0x68>
 8011888:	6836      	ldr	r6, [r6, #0]
 801188a:	e7f7      	b.n	801187c <__sfp+0x18>
 801188c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8011890:	b9d5      	cbnz	r5, 80118c8 <__sfp+0x64>
 8011892:	4b16      	ldr	r3, [pc, #88]	; (80118ec <__sfp+0x88>)
 8011894:	60e3      	str	r3, [r4, #12]
 8011896:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801189a:	6665      	str	r5, [r4, #100]	; 0x64
 801189c:	f000 f847 	bl	801192e <__retarget_lock_init_recursive>
 80118a0:	f7ff ff96 	bl	80117d0 <__sfp_lock_release>
 80118a4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80118a8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80118ac:	6025      	str	r5, [r4, #0]
 80118ae:	61a5      	str	r5, [r4, #24]
 80118b0:	2208      	movs	r2, #8
 80118b2:	4629      	mov	r1, r5
 80118b4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80118b8:	f7fd fb32 	bl	800ef20 <memset>
 80118bc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80118c0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80118c4:	4620      	mov	r0, r4
 80118c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80118c8:	3468      	adds	r4, #104	; 0x68
 80118ca:	e7d9      	b.n	8011880 <__sfp+0x1c>
 80118cc:	2104      	movs	r1, #4
 80118ce:	4638      	mov	r0, r7
 80118d0:	f7ff ff62 	bl	8011798 <__sfmoreglue>
 80118d4:	4604      	mov	r4, r0
 80118d6:	6030      	str	r0, [r6, #0]
 80118d8:	2800      	cmp	r0, #0
 80118da:	d1d5      	bne.n	8011888 <__sfp+0x24>
 80118dc:	f7ff ff78 	bl	80117d0 <__sfp_lock_release>
 80118e0:	230c      	movs	r3, #12
 80118e2:	603b      	str	r3, [r7, #0]
 80118e4:	e7ee      	b.n	80118c4 <__sfp+0x60>
 80118e6:	bf00      	nop
 80118e8:	080125f0 	.word	0x080125f0
 80118ec:	ffff0001 	.word	0xffff0001

080118f0 <_fwalk_reent>:
 80118f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80118f4:	4606      	mov	r6, r0
 80118f6:	4688      	mov	r8, r1
 80118f8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80118fc:	2700      	movs	r7, #0
 80118fe:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8011902:	f1b9 0901 	subs.w	r9, r9, #1
 8011906:	d505      	bpl.n	8011914 <_fwalk_reent+0x24>
 8011908:	6824      	ldr	r4, [r4, #0]
 801190a:	2c00      	cmp	r4, #0
 801190c:	d1f7      	bne.n	80118fe <_fwalk_reent+0xe>
 801190e:	4638      	mov	r0, r7
 8011910:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011914:	89ab      	ldrh	r3, [r5, #12]
 8011916:	2b01      	cmp	r3, #1
 8011918:	d907      	bls.n	801192a <_fwalk_reent+0x3a>
 801191a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801191e:	3301      	adds	r3, #1
 8011920:	d003      	beq.n	801192a <_fwalk_reent+0x3a>
 8011922:	4629      	mov	r1, r5
 8011924:	4630      	mov	r0, r6
 8011926:	47c0      	blx	r8
 8011928:	4307      	orrs	r7, r0
 801192a:	3568      	adds	r5, #104	; 0x68
 801192c:	e7e9      	b.n	8011902 <_fwalk_reent+0x12>

0801192e <__retarget_lock_init_recursive>:
 801192e:	4770      	bx	lr

08011930 <__retarget_lock_acquire_recursive>:
 8011930:	4770      	bx	lr

08011932 <__retarget_lock_release_recursive>:
 8011932:	4770      	bx	lr

08011934 <__swhatbuf_r>:
 8011934:	b570      	push	{r4, r5, r6, lr}
 8011936:	460e      	mov	r6, r1
 8011938:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801193c:	2900      	cmp	r1, #0
 801193e:	b096      	sub	sp, #88	; 0x58
 8011940:	4614      	mov	r4, r2
 8011942:	461d      	mov	r5, r3
 8011944:	da08      	bge.n	8011958 <__swhatbuf_r+0x24>
 8011946:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 801194a:	2200      	movs	r2, #0
 801194c:	602a      	str	r2, [r5, #0]
 801194e:	061a      	lsls	r2, r3, #24
 8011950:	d410      	bmi.n	8011974 <__swhatbuf_r+0x40>
 8011952:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8011956:	e00e      	b.n	8011976 <__swhatbuf_r+0x42>
 8011958:	466a      	mov	r2, sp
 801195a:	f000 f8fb 	bl	8011b54 <_fstat_r>
 801195e:	2800      	cmp	r0, #0
 8011960:	dbf1      	blt.n	8011946 <__swhatbuf_r+0x12>
 8011962:	9a01      	ldr	r2, [sp, #4]
 8011964:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8011968:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801196c:	425a      	negs	r2, r3
 801196e:	415a      	adcs	r2, r3
 8011970:	602a      	str	r2, [r5, #0]
 8011972:	e7ee      	b.n	8011952 <__swhatbuf_r+0x1e>
 8011974:	2340      	movs	r3, #64	; 0x40
 8011976:	2000      	movs	r0, #0
 8011978:	6023      	str	r3, [r4, #0]
 801197a:	b016      	add	sp, #88	; 0x58
 801197c:	bd70      	pop	{r4, r5, r6, pc}
	...

08011980 <__smakebuf_r>:
 8011980:	898b      	ldrh	r3, [r1, #12]
 8011982:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8011984:	079d      	lsls	r5, r3, #30
 8011986:	4606      	mov	r6, r0
 8011988:	460c      	mov	r4, r1
 801198a:	d507      	bpl.n	801199c <__smakebuf_r+0x1c>
 801198c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8011990:	6023      	str	r3, [r4, #0]
 8011992:	6123      	str	r3, [r4, #16]
 8011994:	2301      	movs	r3, #1
 8011996:	6163      	str	r3, [r4, #20]
 8011998:	b002      	add	sp, #8
 801199a:	bd70      	pop	{r4, r5, r6, pc}
 801199c:	ab01      	add	r3, sp, #4
 801199e:	466a      	mov	r2, sp
 80119a0:	f7ff ffc8 	bl	8011934 <__swhatbuf_r>
 80119a4:	9900      	ldr	r1, [sp, #0]
 80119a6:	4605      	mov	r5, r0
 80119a8:	4630      	mov	r0, r6
 80119aa:	f7ff f915 	bl	8010bd8 <_malloc_r>
 80119ae:	b948      	cbnz	r0, 80119c4 <__smakebuf_r+0x44>
 80119b0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80119b4:	059a      	lsls	r2, r3, #22
 80119b6:	d4ef      	bmi.n	8011998 <__smakebuf_r+0x18>
 80119b8:	f023 0303 	bic.w	r3, r3, #3
 80119bc:	f043 0302 	orr.w	r3, r3, #2
 80119c0:	81a3      	strh	r3, [r4, #12]
 80119c2:	e7e3      	b.n	801198c <__smakebuf_r+0xc>
 80119c4:	4b0d      	ldr	r3, [pc, #52]	; (80119fc <__smakebuf_r+0x7c>)
 80119c6:	62b3      	str	r3, [r6, #40]	; 0x28
 80119c8:	89a3      	ldrh	r3, [r4, #12]
 80119ca:	6020      	str	r0, [r4, #0]
 80119cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80119d0:	81a3      	strh	r3, [r4, #12]
 80119d2:	9b00      	ldr	r3, [sp, #0]
 80119d4:	6163      	str	r3, [r4, #20]
 80119d6:	9b01      	ldr	r3, [sp, #4]
 80119d8:	6120      	str	r0, [r4, #16]
 80119da:	b15b      	cbz	r3, 80119f4 <__smakebuf_r+0x74>
 80119dc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80119e0:	4630      	mov	r0, r6
 80119e2:	f000 f8c9 	bl	8011b78 <_isatty_r>
 80119e6:	b128      	cbz	r0, 80119f4 <__smakebuf_r+0x74>
 80119e8:	89a3      	ldrh	r3, [r4, #12]
 80119ea:	f023 0303 	bic.w	r3, r3, #3
 80119ee:	f043 0301 	orr.w	r3, r3, #1
 80119f2:	81a3      	strh	r3, [r4, #12]
 80119f4:	89a0      	ldrh	r0, [r4, #12]
 80119f6:	4305      	orrs	r5, r0
 80119f8:	81a5      	strh	r5, [r4, #12]
 80119fa:	e7cd      	b.n	8011998 <__smakebuf_r+0x18>
 80119fc:	0801178d 	.word	0x0801178d

08011a00 <_raise_r>:
 8011a00:	291f      	cmp	r1, #31
 8011a02:	b538      	push	{r3, r4, r5, lr}
 8011a04:	4604      	mov	r4, r0
 8011a06:	460d      	mov	r5, r1
 8011a08:	d904      	bls.n	8011a14 <_raise_r+0x14>
 8011a0a:	2316      	movs	r3, #22
 8011a0c:	6003      	str	r3, [r0, #0]
 8011a0e:	f04f 30ff 	mov.w	r0, #4294967295
 8011a12:	bd38      	pop	{r3, r4, r5, pc}
 8011a14:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8011a16:	b112      	cbz	r2, 8011a1e <_raise_r+0x1e>
 8011a18:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8011a1c:	b94b      	cbnz	r3, 8011a32 <_raise_r+0x32>
 8011a1e:	4620      	mov	r0, r4
 8011a20:	f000 f830 	bl	8011a84 <_getpid_r>
 8011a24:	462a      	mov	r2, r5
 8011a26:	4601      	mov	r1, r0
 8011a28:	4620      	mov	r0, r4
 8011a2a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011a2e:	f000 b817 	b.w	8011a60 <_kill_r>
 8011a32:	2b01      	cmp	r3, #1
 8011a34:	d00a      	beq.n	8011a4c <_raise_r+0x4c>
 8011a36:	1c59      	adds	r1, r3, #1
 8011a38:	d103      	bne.n	8011a42 <_raise_r+0x42>
 8011a3a:	2316      	movs	r3, #22
 8011a3c:	6003      	str	r3, [r0, #0]
 8011a3e:	2001      	movs	r0, #1
 8011a40:	e7e7      	b.n	8011a12 <_raise_r+0x12>
 8011a42:	2400      	movs	r4, #0
 8011a44:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8011a48:	4628      	mov	r0, r5
 8011a4a:	4798      	blx	r3
 8011a4c:	2000      	movs	r0, #0
 8011a4e:	e7e0      	b.n	8011a12 <_raise_r+0x12>

08011a50 <raise>:
 8011a50:	4b02      	ldr	r3, [pc, #8]	; (8011a5c <raise+0xc>)
 8011a52:	4601      	mov	r1, r0
 8011a54:	6818      	ldr	r0, [r3, #0]
 8011a56:	f7ff bfd3 	b.w	8011a00 <_raise_r>
 8011a5a:	bf00      	nop
 8011a5c:	240000b0 	.word	0x240000b0

08011a60 <_kill_r>:
 8011a60:	b538      	push	{r3, r4, r5, lr}
 8011a62:	4d07      	ldr	r5, [pc, #28]	; (8011a80 <_kill_r+0x20>)
 8011a64:	2300      	movs	r3, #0
 8011a66:	4604      	mov	r4, r0
 8011a68:	4608      	mov	r0, r1
 8011a6a:	4611      	mov	r1, r2
 8011a6c:	602b      	str	r3, [r5, #0]
 8011a6e:	f7f2 faf5 	bl	800405c <_kill>
 8011a72:	1c43      	adds	r3, r0, #1
 8011a74:	d102      	bne.n	8011a7c <_kill_r+0x1c>
 8011a76:	682b      	ldr	r3, [r5, #0]
 8011a78:	b103      	cbz	r3, 8011a7c <_kill_r+0x1c>
 8011a7a:	6023      	str	r3, [r4, #0]
 8011a7c:	bd38      	pop	{r3, r4, r5, pc}
 8011a7e:	bf00      	nop
 8011a80:	24000d8c 	.word	0x24000d8c

08011a84 <_getpid_r>:
 8011a84:	f7f2 bae2 	b.w	800404c <_getpid>

08011a88 <__sread>:
 8011a88:	b510      	push	{r4, lr}
 8011a8a:	460c      	mov	r4, r1
 8011a8c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011a90:	f000 f894 	bl	8011bbc <_read_r>
 8011a94:	2800      	cmp	r0, #0
 8011a96:	bfab      	itete	ge
 8011a98:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8011a9a:	89a3      	ldrhlt	r3, [r4, #12]
 8011a9c:	181b      	addge	r3, r3, r0
 8011a9e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8011aa2:	bfac      	ite	ge
 8011aa4:	6563      	strge	r3, [r4, #84]	; 0x54
 8011aa6:	81a3      	strhlt	r3, [r4, #12]
 8011aa8:	bd10      	pop	{r4, pc}

08011aaa <__swrite>:
 8011aaa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011aae:	461f      	mov	r7, r3
 8011ab0:	898b      	ldrh	r3, [r1, #12]
 8011ab2:	05db      	lsls	r3, r3, #23
 8011ab4:	4605      	mov	r5, r0
 8011ab6:	460c      	mov	r4, r1
 8011ab8:	4616      	mov	r6, r2
 8011aba:	d505      	bpl.n	8011ac8 <__swrite+0x1e>
 8011abc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011ac0:	2302      	movs	r3, #2
 8011ac2:	2200      	movs	r2, #0
 8011ac4:	f000 f868 	bl	8011b98 <_lseek_r>
 8011ac8:	89a3      	ldrh	r3, [r4, #12]
 8011aca:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011ace:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8011ad2:	81a3      	strh	r3, [r4, #12]
 8011ad4:	4632      	mov	r2, r6
 8011ad6:	463b      	mov	r3, r7
 8011ad8:	4628      	mov	r0, r5
 8011ada:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011ade:	f000 b817 	b.w	8011b10 <_write_r>

08011ae2 <__sseek>:
 8011ae2:	b510      	push	{r4, lr}
 8011ae4:	460c      	mov	r4, r1
 8011ae6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011aea:	f000 f855 	bl	8011b98 <_lseek_r>
 8011aee:	1c43      	adds	r3, r0, #1
 8011af0:	89a3      	ldrh	r3, [r4, #12]
 8011af2:	bf15      	itete	ne
 8011af4:	6560      	strne	r0, [r4, #84]	; 0x54
 8011af6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8011afa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8011afe:	81a3      	strheq	r3, [r4, #12]
 8011b00:	bf18      	it	ne
 8011b02:	81a3      	strhne	r3, [r4, #12]
 8011b04:	bd10      	pop	{r4, pc}

08011b06 <__sclose>:
 8011b06:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011b0a:	f000 b813 	b.w	8011b34 <_close_r>
	...

08011b10 <_write_r>:
 8011b10:	b538      	push	{r3, r4, r5, lr}
 8011b12:	4d07      	ldr	r5, [pc, #28]	; (8011b30 <_write_r+0x20>)
 8011b14:	4604      	mov	r4, r0
 8011b16:	4608      	mov	r0, r1
 8011b18:	4611      	mov	r1, r2
 8011b1a:	2200      	movs	r2, #0
 8011b1c:	602a      	str	r2, [r5, #0]
 8011b1e:	461a      	mov	r2, r3
 8011b20:	f7f2 fad3 	bl	80040ca <_write>
 8011b24:	1c43      	adds	r3, r0, #1
 8011b26:	d102      	bne.n	8011b2e <_write_r+0x1e>
 8011b28:	682b      	ldr	r3, [r5, #0]
 8011b2a:	b103      	cbz	r3, 8011b2e <_write_r+0x1e>
 8011b2c:	6023      	str	r3, [r4, #0]
 8011b2e:	bd38      	pop	{r3, r4, r5, pc}
 8011b30:	24000d8c 	.word	0x24000d8c

08011b34 <_close_r>:
 8011b34:	b538      	push	{r3, r4, r5, lr}
 8011b36:	4d06      	ldr	r5, [pc, #24]	; (8011b50 <_close_r+0x1c>)
 8011b38:	2300      	movs	r3, #0
 8011b3a:	4604      	mov	r4, r0
 8011b3c:	4608      	mov	r0, r1
 8011b3e:	602b      	str	r3, [r5, #0]
 8011b40:	f7f2 fadf 	bl	8004102 <_close>
 8011b44:	1c43      	adds	r3, r0, #1
 8011b46:	d102      	bne.n	8011b4e <_close_r+0x1a>
 8011b48:	682b      	ldr	r3, [r5, #0]
 8011b4a:	b103      	cbz	r3, 8011b4e <_close_r+0x1a>
 8011b4c:	6023      	str	r3, [r4, #0]
 8011b4e:	bd38      	pop	{r3, r4, r5, pc}
 8011b50:	24000d8c 	.word	0x24000d8c

08011b54 <_fstat_r>:
 8011b54:	b538      	push	{r3, r4, r5, lr}
 8011b56:	4d07      	ldr	r5, [pc, #28]	; (8011b74 <_fstat_r+0x20>)
 8011b58:	2300      	movs	r3, #0
 8011b5a:	4604      	mov	r4, r0
 8011b5c:	4608      	mov	r0, r1
 8011b5e:	4611      	mov	r1, r2
 8011b60:	602b      	str	r3, [r5, #0]
 8011b62:	f7f2 fada 	bl	800411a <_fstat>
 8011b66:	1c43      	adds	r3, r0, #1
 8011b68:	d102      	bne.n	8011b70 <_fstat_r+0x1c>
 8011b6a:	682b      	ldr	r3, [r5, #0]
 8011b6c:	b103      	cbz	r3, 8011b70 <_fstat_r+0x1c>
 8011b6e:	6023      	str	r3, [r4, #0]
 8011b70:	bd38      	pop	{r3, r4, r5, pc}
 8011b72:	bf00      	nop
 8011b74:	24000d8c 	.word	0x24000d8c

08011b78 <_isatty_r>:
 8011b78:	b538      	push	{r3, r4, r5, lr}
 8011b7a:	4d06      	ldr	r5, [pc, #24]	; (8011b94 <_isatty_r+0x1c>)
 8011b7c:	2300      	movs	r3, #0
 8011b7e:	4604      	mov	r4, r0
 8011b80:	4608      	mov	r0, r1
 8011b82:	602b      	str	r3, [r5, #0]
 8011b84:	f7f2 fad9 	bl	800413a <_isatty>
 8011b88:	1c43      	adds	r3, r0, #1
 8011b8a:	d102      	bne.n	8011b92 <_isatty_r+0x1a>
 8011b8c:	682b      	ldr	r3, [r5, #0]
 8011b8e:	b103      	cbz	r3, 8011b92 <_isatty_r+0x1a>
 8011b90:	6023      	str	r3, [r4, #0]
 8011b92:	bd38      	pop	{r3, r4, r5, pc}
 8011b94:	24000d8c 	.word	0x24000d8c

08011b98 <_lseek_r>:
 8011b98:	b538      	push	{r3, r4, r5, lr}
 8011b9a:	4d07      	ldr	r5, [pc, #28]	; (8011bb8 <_lseek_r+0x20>)
 8011b9c:	4604      	mov	r4, r0
 8011b9e:	4608      	mov	r0, r1
 8011ba0:	4611      	mov	r1, r2
 8011ba2:	2200      	movs	r2, #0
 8011ba4:	602a      	str	r2, [r5, #0]
 8011ba6:	461a      	mov	r2, r3
 8011ba8:	f7f2 fad2 	bl	8004150 <_lseek>
 8011bac:	1c43      	adds	r3, r0, #1
 8011bae:	d102      	bne.n	8011bb6 <_lseek_r+0x1e>
 8011bb0:	682b      	ldr	r3, [r5, #0]
 8011bb2:	b103      	cbz	r3, 8011bb6 <_lseek_r+0x1e>
 8011bb4:	6023      	str	r3, [r4, #0]
 8011bb6:	bd38      	pop	{r3, r4, r5, pc}
 8011bb8:	24000d8c 	.word	0x24000d8c

08011bbc <_read_r>:
 8011bbc:	b538      	push	{r3, r4, r5, lr}
 8011bbe:	4d07      	ldr	r5, [pc, #28]	; (8011bdc <_read_r+0x20>)
 8011bc0:	4604      	mov	r4, r0
 8011bc2:	4608      	mov	r0, r1
 8011bc4:	4611      	mov	r1, r2
 8011bc6:	2200      	movs	r2, #0
 8011bc8:	602a      	str	r2, [r5, #0]
 8011bca:	461a      	mov	r2, r3
 8011bcc:	f7f2 fa60 	bl	8004090 <_read>
 8011bd0:	1c43      	adds	r3, r0, #1
 8011bd2:	d102      	bne.n	8011bda <_read_r+0x1e>
 8011bd4:	682b      	ldr	r3, [r5, #0]
 8011bd6:	b103      	cbz	r3, 8011bda <_read_r+0x1e>
 8011bd8:	6023      	str	r3, [r4, #0]
 8011bda:	bd38      	pop	{r3, r4, r5, pc}
 8011bdc:	24000d8c 	.word	0x24000d8c

08011be0 <checkint>:
 8011be0:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8011be4:	f240 33fe 	movw	r3, #1022	; 0x3fe
 8011be8:	429a      	cmp	r2, r3
 8011bea:	b570      	push	{r4, r5, r6, lr}
 8011bec:	dd2a      	ble.n	8011c44 <checkint+0x64>
 8011bee:	f240 4333 	movw	r3, #1075	; 0x433
 8011bf2:	429a      	cmp	r2, r3
 8011bf4:	dc24      	bgt.n	8011c40 <checkint+0x60>
 8011bf6:	1a9b      	subs	r3, r3, r2
 8011bf8:	f1a3 0620 	sub.w	r6, r3, #32
 8011bfc:	f04f 32ff 	mov.w	r2, #4294967295
 8011c00:	fa02 f403 	lsl.w	r4, r2, r3
 8011c04:	fa02 f606 	lsl.w	r6, r2, r6
 8011c08:	f1c3 0520 	rsb	r5, r3, #32
 8011c0c:	fa22 f505 	lsr.w	r5, r2, r5
 8011c10:	4334      	orrs	r4, r6
 8011c12:	432c      	orrs	r4, r5
 8011c14:	409a      	lsls	r2, r3
 8011c16:	ea20 0202 	bic.w	r2, r0, r2
 8011c1a:	ea21 0404 	bic.w	r4, r1, r4
 8011c1e:	4322      	orrs	r2, r4
 8011c20:	f1a3 0420 	sub.w	r4, r3, #32
 8011c24:	f1c3 0220 	rsb	r2, r3, #32
 8011c28:	d10c      	bne.n	8011c44 <checkint+0x64>
 8011c2a:	40d8      	lsrs	r0, r3
 8011c2c:	fa01 f302 	lsl.w	r3, r1, r2
 8011c30:	4318      	orrs	r0, r3
 8011c32:	40e1      	lsrs	r1, r4
 8011c34:	4308      	orrs	r0, r1
 8011c36:	f000 0001 	and.w	r0, r0, #1
 8011c3a:	f1d0 0002 	rsbs	r0, r0, #2
 8011c3e:	bd70      	pop	{r4, r5, r6, pc}
 8011c40:	2002      	movs	r0, #2
 8011c42:	e7fc      	b.n	8011c3e <checkint+0x5e>
 8011c44:	2000      	movs	r0, #0
 8011c46:	e7fa      	b.n	8011c3e <checkint+0x5e>

08011c48 <pow>:
 8011c48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011c4c:	ee10 4a90 	vmov	r4, s1
 8011c50:	ed2d 8b0a 	vpush	{d8-d12}
 8011c54:	ea4f 5a14 	mov.w	sl, r4, lsr #20
 8011c58:	ee11 7a90 	vmov	r7, s3
 8011c5c:	f10a 32ff 	add.w	r2, sl, #4294967295
 8011c60:	f240 73fd 	movw	r3, #2045	; 0x7fd
 8011c64:	429a      	cmp	r2, r3
 8011c66:	ee10 6a10 	vmov	r6, s0
 8011c6a:	ee11 0a10 	vmov	r0, s2
 8011c6e:	b086      	sub	sp, #24
 8011c70:	46d4      	mov	ip, sl
 8011c72:	ea4f 5517 	mov.w	r5, r7, lsr #20
 8011c76:	d806      	bhi.n	8011c86 <pow+0x3e>
 8011c78:	f3c5 030a 	ubfx	r3, r5, #0, #11
 8011c7c:	f2a3 33be 	subw	r3, r3, #958	; 0x3be
 8011c80:	2b7f      	cmp	r3, #127	; 0x7f
 8011c82:	f240 8156 	bls.w	8011f32 <pow+0x2ea>
 8011c86:	1802      	adds	r2, r0, r0
 8011c88:	eb47 0107 	adc.w	r1, r7, r7
 8011c8c:	f06f 0e01 	mvn.w	lr, #1
 8011c90:	f112 39ff 	adds.w	r9, r2, #4294967295
 8011c94:	f141 38ff 	adc.w	r8, r1, #4294967295
 8011c98:	f46f 1300 	mvn.w	r3, #2097152	; 0x200000
 8011c9c:	45ce      	cmp	lr, r9
 8011c9e:	eb73 0808 	sbcs.w	r8, r3, r8
 8011ca2:	d23f      	bcs.n	8011d24 <pow+0xdc>
 8011ca4:	ea52 0301 	orrs.w	r3, r2, r1
 8011ca8:	f04f 0300 	mov.w	r3, #0
 8011cac:	d10c      	bne.n	8011cc8 <pow+0x80>
 8011cae:	19b6      	adds	r6, r6, r6
 8011cb0:	f484 2400 	eor.w	r4, r4, #524288	; 0x80000
 8011cb4:	4164      	adcs	r4, r4
 8011cb6:	42b3      	cmp	r3, r6
 8011cb8:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8011cbc:	41a3      	sbcs	r3, r4
 8011cbe:	f0c0 808c 	bcc.w	8011dda <pow+0x192>
 8011cc2:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 8011cc6:	e028      	b.n	8011d1a <pow+0xd2>
 8011cc8:	4da3      	ldr	r5, [pc, #652]	; (8011f58 <pow+0x310>)
 8011cca:	42ac      	cmp	r4, r5
 8011ccc:	bf08      	it	eq
 8011cce:	429e      	cmpeq	r6, r3
 8011cd0:	d107      	bne.n	8011ce2 <pow+0x9a>
 8011cd2:	1800      	adds	r0, r0, r0
 8011cd4:	f487 2700 	eor.w	r7, r7, #524288	; 0x80000
 8011cd8:	417f      	adcs	r7, r7
 8011cda:	4283      	cmp	r3, r0
 8011cdc:	4b9f      	ldr	r3, [pc, #636]	; (8011f5c <pow+0x314>)
 8011cde:	41bb      	sbcs	r3, r7
 8011ce0:	e7ed      	b.n	8011cbe <pow+0x76>
 8011ce2:	19b6      	adds	r6, r6, r6
 8011ce4:	489e      	ldr	r0, [pc, #632]	; (8011f60 <pow+0x318>)
 8011ce6:	4164      	adcs	r4, r4
 8011ce8:	42b3      	cmp	r3, r6
 8011cea:	eb70 0504 	sbcs.w	r5, r0, r4
 8011cee:	d374      	bcc.n	8011dda <pow+0x192>
 8011cf0:	4281      	cmp	r1, r0
 8011cf2:	bf08      	it	eq
 8011cf4:	429a      	cmpeq	r2, r3
 8011cf6:	d170      	bne.n	8011dda <pow+0x192>
 8011cf8:	4a9a      	ldr	r2, [pc, #616]	; (8011f64 <pow+0x31c>)
 8011cfa:	4294      	cmp	r4, r2
 8011cfc:	bf08      	it	eq
 8011cfe:	429e      	cmpeq	r6, r3
 8011d00:	d0df      	beq.n	8011cc2 <pow+0x7a>
 8011d02:	4294      	cmp	r4, r2
 8011d04:	ea6f 0707 	mvn.w	r7, r7
 8011d08:	bf34      	ite	cc
 8011d0a:	2400      	movcc	r4, #0
 8011d0c:	2401      	movcs	r4, #1
 8011d0e:	0fff      	lsrs	r7, r7, #31
 8011d10:	42bc      	cmp	r4, r7
 8011d12:	f040 81d9 	bne.w	80120c8 <pow+0x480>
 8011d16:	ee21 0b01 	vmul.f64	d0, d1, d1
 8011d1a:	b006      	add	sp, #24
 8011d1c:	ecbd 8b0a 	vpop	{d8-d12}
 8011d20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011d24:	eb16 0806 	adds.w	r8, r6, r6
 8011d28:	eb44 0904 	adc.w	r9, r4, r4
 8011d2c:	f118 31ff 	adds.w	r1, r8, #4294967295
 8011d30:	f169 0200 	sbc.w	r2, r9, #0
 8011d34:	458e      	cmp	lr, r1
 8011d36:	4193      	sbcs	r3, r2
 8011d38:	d223      	bcs.n	8011d82 <pow+0x13a>
 8011d3a:	ee20 0b00 	vmul.f64	d0, d0, d0
 8011d3e:	2c00      	cmp	r4, #0
 8011d40:	da12      	bge.n	8011d68 <pow+0x120>
 8011d42:	4639      	mov	r1, r7
 8011d44:	f7ff ff4c 	bl	8011be0 <checkint>
 8011d48:	2801      	cmp	r0, #1
 8011d4a:	d10d      	bne.n	8011d68 <pow+0x120>
 8011d4c:	eeb1 0b40 	vneg.f64	d0, d0
 8011d50:	ea58 0309 	orrs.w	r3, r8, r9
 8011d54:	d10a      	bne.n	8011d6c <pow+0x124>
 8011d56:	2f00      	cmp	r7, #0
 8011d58:	dadf      	bge.n	8011d1a <pow+0xd2>
 8011d5a:	b006      	add	sp, #24
 8011d5c:	ecbd 8b0a 	vpop	{d8-d12}
 8011d60:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011d64:	f000 bb50 	b.w	8012408 <__math_divzero>
 8011d68:	2000      	movs	r0, #0
 8011d6a:	e7f1      	b.n	8011d50 <pow+0x108>
 8011d6c:	2f00      	cmp	r7, #0
 8011d6e:	dad4      	bge.n	8011d1a <pow+0xd2>
 8011d70:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8011d74:	ee86 7b00 	vdiv.f64	d7, d6, d0
 8011d78:	ed8d 7b00 	vstr	d7, [sp]
 8011d7c:	ed9d 0b00 	vldr	d0, [sp]
 8011d80:	e7cb      	b.n	8011d1a <pow+0xd2>
 8011d82:	2c00      	cmp	r4, #0
 8011d84:	da2c      	bge.n	8011de0 <pow+0x198>
 8011d86:	4639      	mov	r1, r7
 8011d88:	f7ff ff2a 	bl	8011be0 <checkint>
 8011d8c:	b930      	cbnz	r0, 8011d9c <pow+0x154>
 8011d8e:	b006      	add	sp, #24
 8011d90:	ecbd 8b0a 	vpop	{d8-d12}
 8011d94:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011d98:	f000 bb4e 	b.w	8012438 <__math_invalid>
 8011d9c:	2801      	cmp	r0, #1
 8011d9e:	bf14      	ite	ne
 8011da0:	2000      	movne	r0, #0
 8011da2:	f44f 2080 	moveq.w	r0, #262144	; 0x40000
 8011da6:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 8011daa:	f3ca 0c0a 	ubfx	ip, sl, #0, #11
 8011dae:	f3c5 020a 	ubfx	r2, r5, #0, #11
 8011db2:	f2a2 33be 	subw	r3, r2, #958	; 0x3be
 8011db6:	2b7f      	cmp	r3, #127	; 0x7f
 8011db8:	d92d      	bls.n	8011e16 <pow+0x1ce>
 8011dba:	4b67      	ldr	r3, [pc, #412]	; (8011f58 <pow+0x310>)
 8011dbc:	2000      	movs	r0, #0
 8011dbe:	429c      	cmp	r4, r3
 8011dc0:	bf08      	it	eq
 8011dc2:	4286      	cmpeq	r6, r0
 8011dc4:	f43f af7d 	beq.w	8011cc2 <pow+0x7a>
 8011dc8:	f240 31bd 	movw	r1, #957	; 0x3bd
 8011dcc:	428a      	cmp	r2, r1
 8011dce:	d80c      	bhi.n	8011dea <pow+0x1a2>
 8011dd0:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 8011dd4:	42b0      	cmp	r0, r6
 8011dd6:	41a3      	sbcs	r3, r4
 8011dd8:	d204      	bcs.n	8011de4 <pow+0x19c>
 8011dda:	ee31 0b00 	vadd.f64	d0, d1, d0
 8011dde:	e79c      	b.n	8011d1a <pow+0xd2>
 8011de0:	2000      	movs	r0, #0
 8011de2:	e7e4      	b.n	8011dae <pow+0x166>
 8011de4:	ee30 0b41 	vsub.f64	d0, d0, d1
 8011de8:	e797      	b.n	8011d1a <pow+0xd2>
 8011dea:	2e01      	cmp	r6, #1
 8011dec:	eb74 0303 	sbcs.w	r3, r4, r3
 8011df0:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8011df4:	bf34      	ite	cc
 8011df6:	2301      	movcc	r3, #1
 8011df8:	2300      	movcs	r3, #0
 8011dfa:	4295      	cmp	r5, r2
 8011dfc:	bf8c      	ite	hi
 8011dfe:	2500      	movhi	r5, #0
 8011e00:	2501      	movls	r5, #1
 8011e02:	42ab      	cmp	r3, r5
 8011e04:	f000 809d 	beq.w	8011f42 <pow+0x2fa>
 8011e08:	b006      	add	sp, #24
 8011e0a:	ecbd 8b0a 	vpop	{d8-d12}
 8011e0e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011e12:	f000 baf1 	b.w	80123f8 <__math_oflow>
 8011e16:	f1bc 0f00 	cmp.w	ip, #0
 8011e1a:	d10b      	bne.n	8011e34 <pow+0x1ec>
 8011e1c:	ed9f 7b4c 	vldr	d7, [pc, #304]	; 8011f50 <pow+0x308>
 8011e20:	ee20 7b07 	vmul.f64	d7, d0, d7
 8011e24:	ec53 2b17 	vmov	r2, r3, d7
 8011e28:	ee17 6a10 	vmov	r6, s14
 8011e2c:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 8011e30:	f1a4 7450 	sub.w	r4, r4, #54525952	; 0x3400000
 8011e34:	4b4c      	ldr	r3, [pc, #304]	; (8011f68 <pow+0x320>)
 8011e36:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 8011e3a:	4423      	add	r3, r4
 8011e3c:	f3c3 3246 	ubfx	r2, r3, #13, #7
 8011e40:	1519      	asrs	r1, r3, #20
 8011e42:	0d1b      	lsrs	r3, r3, #20
 8011e44:	051b      	lsls	r3, r3, #20
 8011e46:	eba4 0903 	sub.w	r9, r4, r3
 8011e4a:	4b48      	ldr	r3, [pc, #288]	; (8011f6c <pow+0x324>)
 8011e4c:	ee04 1a10 	vmov	s8, r1
 8011e50:	eb03 1142 	add.w	r1, r3, r2, lsl #5
 8011e54:	f1b6 0800 	subs.w	r8, r6, #0
 8011e58:	ed91 7b12 	vldr	d7, [r1, #72]	; 0x48
 8011e5c:	ec49 8b15 	vmov	d5, r8, r9
 8011e60:	ed91 2b16 	vldr	d2, [r1, #88]	; 0x58
 8011e64:	eea5 6b07 	vfma.f64	d6, d5, d7
 8011e68:	ed93 7b00 	vldr	d7, [r3]
 8011e6c:	ed93 5b02 	vldr	d5, [r3, #8]
 8011e70:	eeb8 4bc4 	vcvt.f64.s32	d4, s8
 8011e74:	eea4 2b07 	vfma.f64	d2, d4, d7
 8011e78:	ed91 7b18 	vldr	d7, [r1, #96]	; 0x60
 8011e7c:	ee36 ab02 	vadd.f64	d10, d6, d2
 8011e80:	ee32 2b4a 	vsub.f64	d2, d2, d10
 8011e84:	eea4 7b05 	vfma.f64	d7, d4, d5
 8011e88:	ed93 5b04 	vldr	d5, [r3, #16]
 8011e8c:	ee32 2b06 	vadd.f64	d2, d2, d6
 8011e90:	ee37 7b02 	vadd.f64	d7, d7, d2
 8011e94:	ee26 5b05 	vmul.f64	d5, d6, d5
 8011e98:	ed93 4b08 	vldr	d4, [r3, #32]
 8011e9c:	ee26 0b05 	vmul.f64	d0, d6, d5
 8011ea0:	eeb0 9b40 	vmov.f64	d9, d0
 8011ea4:	ee95 9b06 	vfnms.f64	d9, d5, d6
 8011ea8:	ed93 5b06 	vldr	d5, [r3, #24]
 8011eac:	ee3a 8b00 	vadd.f64	d8, d10, d0
 8011eb0:	ee26 bb00 	vmul.f64	d11, d6, d0
 8011eb4:	ed93 3b0c 	vldr	d3, [r3, #48]	; 0x30
 8011eb8:	eea6 5b04 	vfma.f64	d5, d6, d4
 8011ebc:	ee3a ab48 	vsub.f64	d10, d10, d8
 8011ec0:	ed93 4b0a 	vldr	d4, [r3, #40]	; 0x28
 8011ec4:	ee37 9b09 	vadd.f64	d9, d7, d9
 8011ec8:	ee3a ab00 	vadd.f64	d10, d10, d0
 8011ecc:	eea6 4b03 	vfma.f64	d4, d6, d3
 8011ed0:	ed93 cb10 	vldr	d12, [r3, #64]	; 0x40
 8011ed4:	ee39 ab0a 	vadd.f64	d10, d9, d10
 8011ed8:	ed93 3b0e 	vldr	d3, [r3, #56]	; 0x38
 8011edc:	eea6 3b0c 	vfma.f64	d3, d6, d12
 8011ee0:	eea0 4b03 	vfma.f64	d4, d0, d3
 8011ee4:	eea0 5b04 	vfma.f64	d5, d0, d4
 8011ee8:	eeab ab05 	vfma.f64	d10, d11, d5
 8011eec:	ee38 6b0a 	vadd.f64	d6, d8, d10
 8011ef0:	ee21 7b06 	vmul.f64	d7, d1, d6
 8011ef4:	ee17 3a90 	vmov	r3, s15
 8011ef8:	eeb0 5b47 	vmov.f64	d5, d7
 8011efc:	f3c3 560a 	ubfx	r6, r3, #20, #11
 8011f00:	f46f 7272 	mvn.w	r2, #968	; 0x3c8
 8011f04:	18b2      	adds	r2, r6, r2
 8011f06:	2a3e      	cmp	r2, #62	; 0x3e
 8011f08:	ee91 5b06 	vfnms.f64	d5, d1, d6
 8011f0c:	ee38 8b46 	vsub.f64	d8, d8, d6
 8011f10:	ee38 ab0a 	vadd.f64	d10, d8, d10
 8011f14:	eea1 5b0a 	vfma.f64	d5, d1, d10
 8011f18:	d92b      	bls.n	8011f72 <pow+0x32a>
 8011f1a:	2a00      	cmp	r2, #0
 8011f1c:	da0b      	bge.n	8011f36 <pow+0x2ee>
 8011f1e:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 8011f22:	ee37 0b00 	vadd.f64	d0, d7, d0
 8011f26:	2800      	cmp	r0, #0
 8011f28:	f43f aef7 	beq.w	8011d1a <pow+0xd2>
 8011f2c:	eeb1 0b40 	vneg.f64	d0, d0
 8011f30:	e6f3      	b.n	8011d1a <pow+0xd2>
 8011f32:	2000      	movs	r0, #0
 8011f34:	e77e      	b.n	8011e34 <pow+0x1ec>
 8011f36:	f5b6 6f81 	cmp.w	r6, #1032	; 0x408
 8011f3a:	d919      	bls.n	8011f70 <pow+0x328>
 8011f3c:	2b00      	cmp	r3, #0
 8011f3e:	f6bf af63 	bge.w	8011e08 <pow+0x1c0>
 8011f42:	b006      	add	sp, #24
 8011f44:	ecbd 8b0a 	vpop	{d8-d12}
 8011f48:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011f4c:	f000 ba4c 	b.w	80123e8 <__math_uflow>
 8011f50:	00000000 	.word	0x00000000
 8011f54:	43300000 	.word	0x43300000
 8011f58:	3ff00000 	.word	0x3ff00000
 8011f5c:	fff00000 	.word	0xfff00000
 8011f60:	ffe00000 	.word	0xffe00000
 8011f64:	7fe00000 	.word	0x7fe00000
 8011f68:	c0196aab 	.word	0xc0196aab
 8011f6c:	08012a20 	.word	0x08012a20
 8011f70:	2600      	movs	r6, #0
 8011f72:	495d      	ldr	r1, [pc, #372]	; (80120e8 <pow+0x4a0>)
 8011f74:	ed91 4b02 	vldr	d4, [r1, #8]
 8011f78:	ed91 3b00 	vldr	d3, [r1]
 8011f7c:	eeb0 6b44 	vmov.f64	d6, d4
 8011f80:	eea7 6b03 	vfma.f64	d6, d7, d3
 8011f84:	ee16 5a10 	vmov	r5, s12
 8011f88:	ee36 6b44 	vsub.f64	d6, d6, d4
 8011f8c:	ed91 4b04 	vldr	d4, [r1, #16]
 8011f90:	f005 037f 	and.w	r3, r5, #127	; 0x7f
 8011f94:	eea6 7b04 	vfma.f64	d7, d6, d4
 8011f98:	eeb0 0b47 	vmov.f64	d0, d7
 8011f9c:	ed91 7b06 	vldr	d7, [r1, #24]
 8011fa0:	18dc      	adds	r4, r3, r3
 8011fa2:	f104 030f 	add.w	r3, r4, #15
 8011fa6:	eb01 04c4 	add.w	r4, r1, r4, lsl #3
 8011faa:	eea6 0b07 	vfma.f64	d0, d6, d7
 8011fae:	ed91 4b0a 	vldr	d4, [r1, #40]	; 0x28
 8011fb2:	ee35 0b00 	vadd.f64	d0, d5, d0
 8011fb6:	ee20 6b00 	vmul.f64	d6, d0, d0
 8011fba:	ed94 7b1c 	vldr	d7, [r4, #112]	; 0x70
 8011fbe:	ed91 5b08 	vldr	d5, [r1, #32]
 8011fc2:	ee30 7b07 	vadd.f64	d7, d0, d7
 8011fc6:	eb01 02c3 	add.w	r2, r1, r3, lsl #3
 8011fca:	eea0 5b04 	vfma.f64	d5, d0, d4
 8011fce:	ed91 4b0e 	vldr	d4, [r1, #56]	; 0x38
 8011fd2:	eea6 7b05 	vfma.f64	d7, d6, d5
 8011fd6:	ee26 6b06 	vmul.f64	d6, d6, d6
 8011fda:	ed91 5b0c 	vldr	d5, [r1, #48]	; 0x30
 8011fde:	f851 c033 	ldr.w	ip, [r1, r3, lsl #3]
 8011fe2:	f8d2 e004 	ldr.w	lr, [r2, #4]
 8011fe6:	eea0 5b04 	vfma.f64	d5, d0, d4
 8011fea:	1940      	adds	r0, r0, r5
 8011fec:	2700      	movs	r7, #0
 8011fee:	eb17 020c 	adds.w	r2, r7, ip
 8011ff2:	eb0e 3340 	add.w	r3, lr, r0, lsl #13
 8011ff6:	eea6 7b05 	vfma.f64	d7, d6, d5
 8011ffa:	2e00      	cmp	r6, #0
 8011ffc:	d15f      	bne.n	80120be <pow+0x476>
 8011ffe:	42bd      	cmp	r5, r7
 8012000:	db13      	blt.n	801202a <pow+0x3e2>
 8012002:	f103 4140 	add.w	r1, r3, #3221225472	; 0xc0000000
 8012006:	f501 0170 	add.w	r1, r1, #15728640	; 0xf00000
 801200a:	4610      	mov	r0, r2
 801200c:	ec41 0b10 	vmov	d0, r0, r1
 8012010:	eea7 0b00 	vfma.f64	d0, d7, d0
 8012014:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 80120d0 <pow+0x488>
 8012018:	ee20 0b07 	vmul.f64	d0, d0, d7
 801201c:	b006      	add	sp, #24
 801201e:	ecbd 8b0a 	vpop	{d8-d12}
 8012022:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012026:	f000 ba1f 	b.w	8012468 <__math_check_oflow>
 801202a:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
 801202e:	f501 1100 	add.w	r1, r1, #2097152	; 0x200000
 8012032:	4610      	mov	r0, r2
 8012034:	ec41 0b15 	vmov	d5, r0, r1
 8012038:	eeb7 4b00 	vmov.f64	d4, #112	; 0x3f800000  1.0
 801203c:	ee27 6b05 	vmul.f64	d6, d7, d5
 8012040:	ee35 7b06 	vadd.f64	d7, d5, d6
 8012044:	eeb0 3bc7 	vabs.f64	d3, d7
 8012048:	eeb4 3bc4 	vcmpe.f64	d3, d4
 801204c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012050:	ed9f 0b21 	vldr	d0, [pc, #132]	; 80120d8 <pow+0x490>
 8012054:	d52a      	bpl.n	80120ac <pow+0x464>
 8012056:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 801205a:	ee35 5b47 	vsub.f64	d5, d5, d7
 801205e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012062:	eebf 3b00 	vmov.f64	d3, #240	; 0xbf800000 -1.0
 8012066:	ee35 6b06 	vadd.f64	d6, d5, d6
 801206a:	bf48      	it	mi
 801206c:	eeb0 4b43 	vmovmi.f64	d4, d3
 8012070:	ee37 3b04 	vadd.f64	d3, d7, d4
 8012074:	ee34 5b43 	vsub.f64	d5, d4, d3
 8012078:	ee35 7b07 	vadd.f64	d7, d5, d7
 801207c:	ee37 7b06 	vadd.f64	d7, d7, d6
 8012080:	ee37 7b03 	vadd.f64	d7, d7, d3
 8012084:	ee37 7b44 	vsub.f64	d7, d7, d4
 8012088:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801208c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012090:	d104      	bne.n	801209c <pow+0x454>
 8012092:	4632      	mov	r2, r6
 8012094:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 8012098:	ec43 2b17 	vmov	d7, r2, r3
 801209c:	ed8d 0b02 	vstr	d0, [sp, #8]
 80120a0:	ed9d 6b02 	vldr	d6, [sp, #8]
 80120a4:	ee26 6b00 	vmul.f64	d6, d6, d0
 80120a8:	ed8d 6b04 	vstr	d6, [sp, #16]
 80120ac:	ee27 0b00 	vmul.f64	d0, d7, d0
 80120b0:	b006      	add	sp, #24
 80120b2:	ecbd 8b0a 	vpop	{d8-d12}
 80120b6:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80120ba:	f000 b9cc 	b.w	8012456 <__math_check_uflow>
 80120be:	ec43 2b10 	vmov	d0, r2, r3
 80120c2:	eea7 0b00 	vfma.f64	d0, d7, d0
 80120c6:	e628      	b.n	8011d1a <pow+0xd2>
 80120c8:	ed9f 0b05 	vldr	d0, [pc, #20]	; 80120e0 <pow+0x498>
 80120cc:	e625      	b.n	8011d1a <pow+0xd2>
 80120ce:	bf00      	nop
 80120d0:	00000000 	.word	0x00000000
 80120d4:	7f000000 	.word	0x7f000000
 80120d8:	00000000 	.word	0x00000000
 80120dc:	00100000 	.word	0x00100000
	...
 80120e8:	08013a68 	.word	0x08013a68

080120ec <asin>:
 80120ec:	b508      	push	{r3, lr}
 80120ee:	ed2d 8b04 	vpush	{d8-d9}
 80120f2:	eeb0 8b40 	vmov.f64	d8, d0
 80120f6:	f000 f847 	bl	8012188 <__ieee754_asin>
 80120fa:	eeb4 8b48 	vcmp.f64	d8, d8
 80120fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012102:	eeb0 9b40 	vmov.f64	d9, d0
 8012106:	d615      	bvs.n	8012134 <asin+0x48>
 8012108:	eeb0 0b48 	vmov.f64	d0, d8
 801210c:	f000 f9c0 	bl	8012490 <fabs>
 8012110:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 8012114:	eeb4 0bc7 	vcmpe.f64	d0, d7
 8012118:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801211c:	dd0a      	ble.n	8012134 <asin+0x48>
 801211e:	f7fc fec7 	bl	800eeb0 <__errno>
 8012122:	ecbd 8b04 	vpop	{d8-d9}
 8012126:	2321      	movs	r3, #33	; 0x21
 8012128:	6003      	str	r3, [r0, #0]
 801212a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 801212e:	4804      	ldr	r0, [pc, #16]	; (8012140 <asin+0x54>)
 8012130:	f7fe bdc6 	b.w	8010cc0 <nan>
 8012134:	eeb0 0b49 	vmov.f64	d0, d9
 8012138:	ecbd 8b04 	vpop	{d8-d9}
 801213c:	bd08      	pop	{r3, pc}
 801213e:	bf00      	nop
 8012140:	08012887 	.word	0x08012887
 8012144:	00000000 	.word	0x00000000

08012148 <sqrt>:
 8012148:	b508      	push	{r3, lr}
 801214a:	ed2d 8b04 	vpush	{d8-d9}
 801214e:	eeb0 8b40 	vmov.f64	d8, d0
 8012152:	f000 f927 	bl	80123a4 <__ieee754_sqrt>
 8012156:	eeb4 8b48 	vcmp.f64	d8, d8
 801215a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801215e:	d60c      	bvs.n	801217a <sqrt+0x32>
 8012160:	ed9f 9b07 	vldr	d9, [pc, #28]	; 8012180 <sqrt+0x38>
 8012164:	eeb4 8bc9 	vcmpe.f64	d8, d9
 8012168:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801216c:	d505      	bpl.n	801217a <sqrt+0x32>
 801216e:	f7fc fe9f 	bl	800eeb0 <__errno>
 8012172:	ee89 0b09 	vdiv.f64	d0, d9, d9
 8012176:	2321      	movs	r3, #33	; 0x21
 8012178:	6003      	str	r3, [r0, #0]
 801217a:	ecbd 8b04 	vpop	{d8-d9}
 801217e:	bd08      	pop	{r3, pc}
	...

08012188 <__ieee754_asin>:
 8012188:	b538      	push	{r3, r4, r5, lr}
 801218a:	ee10 5a90 	vmov	r5, s1
 801218e:	4b82      	ldr	r3, [pc, #520]	; (8012398 <__ieee754_asin+0x210>)
 8012190:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 8012194:	429c      	cmp	r4, r3
 8012196:	ed2d 8b06 	vpush	{d8-d10}
 801219a:	dd19      	ble.n	80121d0 <__ieee754_asin+0x48>
 801219c:	ee10 3a10 	vmov	r3, s0
 80121a0:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 80121a4:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80121a8:	4323      	orrs	r3, r4
 80121aa:	d10c      	bne.n	80121c6 <__ieee754_asin+0x3e>
 80121ac:	ed9f 7b5c 	vldr	d7, [pc, #368]	; 8012320 <__ieee754_asin+0x198>
 80121b0:	ed9f 6b5d 	vldr	d6, [pc, #372]	; 8012328 <__ieee754_asin+0x1a0>
 80121b4:	ee20 7b07 	vmul.f64	d7, d0, d7
 80121b8:	eea0 7b06 	vfma.f64	d7, d0, d6
 80121bc:	eeb0 0b47 	vmov.f64	d0, d7
 80121c0:	ecbd 8b06 	vpop	{d8-d10}
 80121c4:	bd38      	pop	{r3, r4, r5, pc}
 80121c6:	ee30 7b40 	vsub.f64	d7, d0, d0
 80121ca:	ee87 0b07 	vdiv.f64	d0, d7, d7
 80121ce:	e7f7      	b.n	80121c0 <__ieee754_asin+0x38>
 80121d0:	4b72      	ldr	r3, [pc, #456]	; (801239c <__ieee754_asin+0x214>)
 80121d2:	eeb7 9b00 	vmov.f64	d9, #112	; 0x3f800000  1.0
 80121d6:	429c      	cmp	r4, r3
 80121d8:	dc0b      	bgt.n	80121f2 <__ieee754_asin+0x6a>
 80121da:	f1b4 5f79 	cmp.w	r4, #1044381696	; 0x3e400000
 80121de:	da52      	bge.n	8012286 <__ieee754_asin+0xfe>
 80121e0:	ed9f 7b53 	vldr	d7, [pc, #332]	; 8012330 <__ieee754_asin+0x1a8>
 80121e4:	ee30 7b07 	vadd.f64	d7, d0, d7
 80121e8:	eeb4 7bc9 	vcmpe.f64	d7, d9
 80121ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80121f0:	dce6      	bgt.n	80121c0 <__ieee754_asin+0x38>
 80121f2:	eeb6 8b00 	vmov.f64	d8, #96	; 0x3f000000  0.5
 80121f6:	f000 f94b 	bl	8012490 <fabs>
 80121fa:	ed9f 7b4f 	vldr	d7, [pc, #316]	; 8012338 <__ieee754_asin+0x1b0>
 80121fe:	ee39 0b40 	vsub.f64	d0, d9, d0
 8012202:	ee20 8b08 	vmul.f64	d8, d0, d8
 8012206:	ed9f 6b4e 	vldr	d6, [pc, #312]	; 8012340 <__ieee754_asin+0x1b8>
 801220a:	eeb0 0b48 	vmov.f64	d0, d8
 801220e:	eea8 6b07 	vfma.f64	d6, d8, d7
 8012212:	ed9f 7b4d 	vldr	d7, [pc, #308]	; 8012348 <__ieee754_asin+0x1c0>
 8012216:	eea6 7b08 	vfma.f64	d7, d6, d8
 801221a:	ed9f 6b4d 	vldr	d6, [pc, #308]	; 8012350 <__ieee754_asin+0x1c8>
 801221e:	ed9f ab4e 	vldr	d10, [pc, #312]	; 8012358 <__ieee754_asin+0x1d0>
 8012222:	eea7 6b08 	vfma.f64	d6, d7, d8
 8012226:	ed9f 7b4e 	vldr	d7, [pc, #312]	; 8012360 <__ieee754_asin+0x1d8>
 801222a:	eea6 7b08 	vfma.f64	d7, d6, d8
 801222e:	ed9f 6b4e 	vldr	d6, [pc, #312]	; 8012368 <__ieee754_asin+0x1e0>
 8012232:	eea7 ab08 	vfma.f64	d10, d7, d8
 8012236:	ee2a ab08 	vmul.f64	d10, d10, d8
 801223a:	ed9f 7b4d 	vldr	d7, [pc, #308]	; 8012370 <__ieee754_asin+0x1e8>
 801223e:	eea8 7b06 	vfma.f64	d7, d8, d6
 8012242:	ed9f 6b4d 	vldr	d6, [pc, #308]	; 8012378 <__ieee754_asin+0x1f0>
 8012246:	eea7 6b08 	vfma.f64	d6, d7, d8
 801224a:	ed9f 7b4d 	vldr	d7, [pc, #308]	; 8012380 <__ieee754_asin+0x1f8>
 801224e:	eea6 7b08 	vfma.f64	d7, d6, d8
 8012252:	eea7 9b08 	vfma.f64	d9, d7, d8
 8012256:	f000 f8a5 	bl	80123a4 <__ieee754_sqrt>
 801225a:	ee8a 5b09 	vdiv.f64	d5, d10, d9
 801225e:	eeb0 4b00 	vmov.f64	d4, #0	; 0x40000000  2.0
 8012262:	4b4f      	ldr	r3, [pc, #316]	; (80123a0 <__ieee754_asin+0x218>)
 8012264:	429c      	cmp	r4, r3
 8012266:	dd3d      	ble.n	80122e4 <__ieee754_asin+0x15c>
 8012268:	eea0 0b05 	vfma.f64	d0, d0, d5
 801226c:	ed9f 7b46 	vldr	d7, [pc, #280]	; 8012388 <__ieee754_asin+0x200>
 8012270:	eea0 7b04 	vfma.f64	d7, d0, d4
 8012274:	ed9f 0b2c 	vldr	d0, [pc, #176]	; 8012328 <__ieee754_asin+0x1a0>
 8012278:	ee30 0b47 	vsub.f64	d0, d0, d7
 801227c:	2d00      	cmp	r5, #0
 801227e:	bfd8      	it	le
 8012280:	eeb1 0b40 	vnegle.f64	d0, d0
 8012284:	e79c      	b.n	80121c0 <__ieee754_asin+0x38>
 8012286:	ed9f 5b2c 	vldr	d5, [pc, #176]	; 8012338 <__ieee754_asin+0x1b0>
 801228a:	ee20 7b00 	vmul.f64	d7, d0, d0
 801228e:	ed9f 6b2c 	vldr	d6, [pc, #176]	; 8012340 <__ieee754_asin+0x1b8>
 8012292:	eea7 6b05 	vfma.f64	d6, d7, d5
 8012296:	ed9f 5b2c 	vldr	d5, [pc, #176]	; 8012348 <__ieee754_asin+0x1c0>
 801229a:	eea6 5b07 	vfma.f64	d5, d6, d7
 801229e:	ed9f 6b2c 	vldr	d6, [pc, #176]	; 8012350 <__ieee754_asin+0x1c8>
 80122a2:	eea5 6b07 	vfma.f64	d6, d5, d7
 80122a6:	ed9f 5b2e 	vldr	d5, [pc, #184]	; 8012360 <__ieee754_asin+0x1d8>
 80122aa:	eea6 5b07 	vfma.f64	d5, d6, d7
 80122ae:	ed9f 6b2a 	vldr	d6, [pc, #168]	; 8012358 <__ieee754_asin+0x1d0>
 80122b2:	ed9f 4b2d 	vldr	d4, [pc, #180]	; 8012368 <__ieee754_asin+0x1e0>
 80122b6:	eea5 6b07 	vfma.f64	d6, d5, d7
 80122ba:	ee26 6b07 	vmul.f64	d6, d6, d7
 80122be:	ed9f 5b2c 	vldr	d5, [pc, #176]	; 8012370 <__ieee754_asin+0x1e8>
 80122c2:	eea7 5b04 	vfma.f64	d5, d7, d4
 80122c6:	ed9f 4b2c 	vldr	d4, [pc, #176]	; 8012378 <__ieee754_asin+0x1f0>
 80122ca:	eea5 4b07 	vfma.f64	d4, d5, d7
 80122ce:	ed9f 5b2c 	vldr	d5, [pc, #176]	; 8012380 <__ieee754_asin+0x1f8>
 80122d2:	eea4 5b07 	vfma.f64	d5, d4, d7
 80122d6:	eea5 9b07 	vfma.f64	d9, d5, d7
 80122da:	ee86 7b09 	vdiv.f64	d7, d6, d9
 80122de:	eea0 0b07 	vfma.f64	d0, d0, d7
 80122e2:	e76d      	b.n	80121c0 <__ieee754_asin+0x38>
 80122e4:	ec53 2b10 	vmov	r2, r3, d0
 80122e8:	2200      	movs	r2, #0
 80122ea:	ec43 2b16 	vmov	d6, r2, r3
 80122ee:	ee30 7b06 	vadd.f64	d7, d0, d6
 80122f2:	eea6 8b46 	vfms.f64	d8, d6, d6
 80122f6:	ee88 3b07 	vdiv.f64	d3, d8, d7
 80122fa:	ed9f 7b09 	vldr	d7, [pc, #36]	; 8012320 <__ieee754_asin+0x198>
 80122fe:	ee30 0b00 	vadd.f64	d0, d0, d0
 8012302:	eea3 7b44 	vfms.f64	d7, d3, d4
 8012306:	ee90 7b05 	vfnms.f64	d7, d0, d5
 801230a:	ed9f 5b21 	vldr	d5, [pc, #132]	; 8012390 <__ieee754_asin+0x208>
 801230e:	eeb0 0b45 	vmov.f64	d0, d5
 8012312:	eea6 0b44 	vfms.f64	d0, d6, d4
 8012316:	ee37 0b40 	vsub.f64	d0, d7, d0
 801231a:	ee35 0b40 	vsub.f64	d0, d5, d0
 801231e:	e7ad      	b.n	801227c <__ieee754_asin+0xf4>
 8012320:	33145c07 	.word	0x33145c07
 8012324:	3c91a626 	.word	0x3c91a626
 8012328:	54442d18 	.word	0x54442d18
 801232c:	3ff921fb 	.word	0x3ff921fb
 8012330:	8800759c 	.word	0x8800759c
 8012334:	7e37e43c 	.word	0x7e37e43c
 8012338:	0dfdf709 	.word	0x0dfdf709
 801233c:	3f023de1 	.word	0x3f023de1
 8012340:	7501b288 	.word	0x7501b288
 8012344:	3f49efe0 	.word	0x3f49efe0
 8012348:	b5688f3b 	.word	0xb5688f3b
 801234c:	bfa48228 	.word	0xbfa48228
 8012350:	0e884455 	.word	0x0e884455
 8012354:	3fc9c155 	.word	0x3fc9c155
 8012358:	55555555 	.word	0x55555555
 801235c:	3fc55555 	.word	0x3fc55555
 8012360:	03eb6f7d 	.word	0x03eb6f7d
 8012364:	bfd4d612 	.word	0xbfd4d612
 8012368:	b12e9282 	.word	0xb12e9282
 801236c:	3fb3b8c5 	.word	0x3fb3b8c5
 8012370:	1b8d0159 	.word	0x1b8d0159
 8012374:	bfe6066c 	.word	0xbfe6066c
 8012378:	9c598ac8 	.word	0x9c598ac8
 801237c:	40002ae5 	.word	0x40002ae5
 8012380:	1c8a2d4b 	.word	0x1c8a2d4b
 8012384:	c0033a27 	.word	0xc0033a27
 8012388:	33145c07 	.word	0x33145c07
 801238c:	bc91a626 	.word	0xbc91a626
 8012390:	54442d18 	.word	0x54442d18
 8012394:	3fe921fb 	.word	0x3fe921fb
 8012398:	3fefffff 	.word	0x3fefffff
 801239c:	3fdfffff 	.word	0x3fdfffff
 80123a0:	3fef3332 	.word	0x3fef3332

080123a4 <__ieee754_sqrt>:
 80123a4:	eeb1 0bc0 	vsqrt.f64	d0, d0
 80123a8:	4770      	bx	lr

080123aa <with_errno>:
 80123aa:	b513      	push	{r0, r1, r4, lr}
 80123ac:	4604      	mov	r4, r0
 80123ae:	ed8d 0b00 	vstr	d0, [sp]
 80123b2:	f7fc fd7d 	bl	800eeb0 <__errno>
 80123b6:	ed9d 0b00 	vldr	d0, [sp]
 80123ba:	6004      	str	r4, [r0, #0]
 80123bc:	b002      	add	sp, #8
 80123be:	bd10      	pop	{r4, pc}

080123c0 <xflow>:
 80123c0:	b082      	sub	sp, #8
 80123c2:	b158      	cbz	r0, 80123dc <xflow+0x1c>
 80123c4:	eeb1 7b40 	vneg.f64	d7, d0
 80123c8:	ed8d 7b00 	vstr	d7, [sp]
 80123cc:	ed9d 7b00 	vldr	d7, [sp]
 80123d0:	2022      	movs	r0, #34	; 0x22
 80123d2:	ee20 0b07 	vmul.f64	d0, d0, d7
 80123d6:	b002      	add	sp, #8
 80123d8:	f7ff bfe7 	b.w	80123aa <with_errno>
 80123dc:	eeb0 7b40 	vmov.f64	d7, d0
 80123e0:	e7f2      	b.n	80123c8 <xflow+0x8>
 80123e2:	0000      	movs	r0, r0
 80123e4:	0000      	movs	r0, r0
	...

080123e8 <__math_uflow>:
 80123e8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 80123f0 <__math_uflow+0x8>
 80123ec:	f7ff bfe8 	b.w	80123c0 <xflow>
 80123f0:	00000000 	.word	0x00000000
 80123f4:	10000000 	.word	0x10000000

080123f8 <__math_oflow>:
 80123f8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8012400 <__math_oflow+0x8>
 80123fc:	f7ff bfe0 	b.w	80123c0 <xflow>
 8012400:	00000000 	.word	0x00000000
 8012404:	70000000 	.word	0x70000000

08012408 <__math_divzero>:
 8012408:	b082      	sub	sp, #8
 801240a:	2800      	cmp	r0, #0
 801240c:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8012410:	eebf 7b00 	vmov.f64	d7, #240	; 0xbf800000 -1.0
 8012414:	fe06 7b07 	vseleq.f64	d7, d6, d7
 8012418:	ed8d 7b00 	vstr	d7, [sp]
 801241c:	ed9d 0b00 	vldr	d0, [sp]
 8012420:	ed9f 7b03 	vldr	d7, [pc, #12]	; 8012430 <__math_divzero+0x28>
 8012424:	2022      	movs	r0, #34	; 0x22
 8012426:	ee80 0b07 	vdiv.f64	d0, d0, d7
 801242a:	b002      	add	sp, #8
 801242c:	f7ff bfbd 	b.w	80123aa <with_errno>
	...

08012438 <__math_invalid>:
 8012438:	eeb0 7b40 	vmov.f64	d7, d0
 801243c:	eeb4 7b47 	vcmp.f64	d7, d7
 8012440:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012444:	ee30 6b40 	vsub.f64	d6, d0, d0
 8012448:	ee86 0b06 	vdiv.f64	d0, d6, d6
 801244c:	d602      	bvs.n	8012454 <__math_invalid+0x1c>
 801244e:	2021      	movs	r0, #33	; 0x21
 8012450:	f7ff bfab 	b.w	80123aa <with_errno>
 8012454:	4770      	bx	lr

08012456 <__math_check_uflow>:
 8012456:	eeb5 0b40 	vcmp.f64	d0, #0.0
 801245a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801245e:	d102      	bne.n	8012466 <__math_check_uflow+0x10>
 8012460:	2022      	movs	r0, #34	; 0x22
 8012462:	f7ff bfa2 	b.w	80123aa <with_errno>
 8012466:	4770      	bx	lr

08012468 <__math_check_oflow>:
 8012468:	ed9f 6b07 	vldr	d6, [pc, #28]	; 8012488 <__math_check_oflow+0x20>
 801246c:	eeb0 7bc0 	vabs.f64	d7, d0
 8012470:	eeb4 7b46 	vcmp.f64	d7, d6
 8012474:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012478:	dd02      	ble.n	8012480 <__math_check_oflow+0x18>
 801247a:	2022      	movs	r0, #34	; 0x22
 801247c:	f7ff bf95 	b.w	80123aa <with_errno>
 8012480:	4770      	bx	lr
 8012482:	bf00      	nop
 8012484:	f3af 8000 	nop.w
 8012488:	ffffffff 	.word	0xffffffff
 801248c:	7fefffff 	.word	0x7fefffff

08012490 <fabs>:
 8012490:	ec51 0b10 	vmov	r0, r1, d0
 8012494:	ee10 2a10 	vmov	r2, s0
 8012498:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801249c:	ec43 2b10 	vmov	d0, r2, r3
 80124a0:	4770      	bx	lr
	...

080124a4 <_init>:
 80124a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80124a6:	bf00      	nop
 80124a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80124aa:	bc08      	pop	{r3}
 80124ac:	469e      	mov	lr, r3
 80124ae:	4770      	bx	lr

080124b0 <_fini>:
 80124b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80124b2:	bf00      	nop
 80124b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80124b6:	bc08      	pop	{r3}
 80124b8:	469e      	mov	lr, r3
 80124ba:	4770      	bx	lr
