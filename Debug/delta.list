
delta.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00011eb4  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001db0  08012158  08012158  00022158  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08013f08  08013f08  0003025c  2**0
                  CONTENTS
  4 .ARM          00000008  08013f08  08013f08  00023f08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08013f10  08013f10  0003025c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08013f10  08013f10  00023f10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08013f14  08013f14  00023f14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000025c  24000000  08013f18  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000844  24000260  08014174  00030260  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  24000aa4  08014174  00030aa4  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0003025c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001de14  00000000  00000000  0003028a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000036c6  00000000  00000000  0004e09e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000012d8  00000000  00000000  00051768  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001160  00000000  00000000  00052a40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00005a55  00000000  00000000  00053ba0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001d60b  00000000  00000000  000595f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00165ed0  00000000  00000000  00076c00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001dcad0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000062a8  00000000  00000000  001dcb20  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000260 	.word	0x24000260
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0801213c 	.word	0x0801213c

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000264 	.word	0x24000264
 80002dc:	0801213c 	.word	0x0801213c

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <strlen>:
 8000380:	4603      	mov	r3, r0
 8000382:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000386:	2a00      	cmp	r2, #0
 8000388:	d1fb      	bne.n	8000382 <strlen+0x2>
 800038a:	1a18      	subs	r0, r3, r0
 800038c:	3801      	subs	r0, #1
 800038e:	4770      	bx	lr

08000390 <__aeabi_drsub>:
 8000390:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000394:	e002      	b.n	800039c <__adddf3>
 8000396:	bf00      	nop

08000398 <__aeabi_dsub>:
 8000398:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800039c <__adddf3>:
 800039c:	b530      	push	{r4, r5, lr}
 800039e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003a6:	ea94 0f05 	teq	r4, r5
 80003aa:	bf08      	it	eq
 80003ac:	ea90 0f02 	teqeq	r0, r2
 80003b0:	bf1f      	itttt	ne
 80003b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003c2:	f000 80e2 	beq.w	800058a <__adddf3+0x1ee>
 80003c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003ce:	bfb8      	it	lt
 80003d0:	426d      	neglt	r5, r5
 80003d2:	dd0c      	ble.n	80003ee <__adddf3+0x52>
 80003d4:	442c      	add	r4, r5
 80003d6:	ea80 0202 	eor.w	r2, r0, r2
 80003da:	ea81 0303 	eor.w	r3, r1, r3
 80003de:	ea82 0000 	eor.w	r0, r2, r0
 80003e2:	ea83 0101 	eor.w	r1, r3, r1
 80003e6:	ea80 0202 	eor.w	r2, r0, r2
 80003ea:	ea81 0303 	eor.w	r3, r1, r3
 80003ee:	2d36      	cmp	r5, #54	; 0x36
 80003f0:	bf88      	it	hi
 80003f2:	bd30      	pophi	{r4, r5, pc}
 80003f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80003f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80003fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000400:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000404:	d002      	beq.n	800040c <__adddf3+0x70>
 8000406:	4240      	negs	r0, r0
 8000408:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800040c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000410:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000414:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000418:	d002      	beq.n	8000420 <__adddf3+0x84>
 800041a:	4252      	negs	r2, r2
 800041c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000420:	ea94 0f05 	teq	r4, r5
 8000424:	f000 80a7 	beq.w	8000576 <__adddf3+0x1da>
 8000428:	f1a4 0401 	sub.w	r4, r4, #1
 800042c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000430:	db0d      	blt.n	800044e <__adddf3+0xb2>
 8000432:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000436:	fa22 f205 	lsr.w	r2, r2, r5
 800043a:	1880      	adds	r0, r0, r2
 800043c:	f141 0100 	adc.w	r1, r1, #0
 8000440:	fa03 f20e 	lsl.w	r2, r3, lr
 8000444:	1880      	adds	r0, r0, r2
 8000446:	fa43 f305 	asr.w	r3, r3, r5
 800044a:	4159      	adcs	r1, r3
 800044c:	e00e      	b.n	800046c <__adddf3+0xd0>
 800044e:	f1a5 0520 	sub.w	r5, r5, #32
 8000452:	f10e 0e20 	add.w	lr, lr, #32
 8000456:	2a01      	cmp	r2, #1
 8000458:	fa03 fc0e 	lsl.w	ip, r3, lr
 800045c:	bf28      	it	cs
 800045e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000462:	fa43 f305 	asr.w	r3, r3, r5
 8000466:	18c0      	adds	r0, r0, r3
 8000468:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800046c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000470:	d507      	bpl.n	8000482 <__adddf3+0xe6>
 8000472:	f04f 0e00 	mov.w	lr, #0
 8000476:	f1dc 0c00 	rsbs	ip, ip, #0
 800047a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800047e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000482:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000486:	d31b      	bcc.n	80004c0 <__adddf3+0x124>
 8000488:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800048c:	d30c      	bcc.n	80004a8 <__adddf3+0x10c>
 800048e:	0849      	lsrs	r1, r1, #1
 8000490:	ea5f 0030 	movs.w	r0, r0, rrx
 8000494:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000498:	f104 0401 	add.w	r4, r4, #1
 800049c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80004a4:	f080 809a 	bcs.w	80005dc <__adddf3+0x240>
 80004a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80004ac:	bf08      	it	eq
 80004ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004b2:	f150 0000 	adcs.w	r0, r0, #0
 80004b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004ba:	ea41 0105 	orr.w	r1, r1, r5
 80004be:	bd30      	pop	{r4, r5, pc}
 80004c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004c4:	4140      	adcs	r0, r0
 80004c6:	eb41 0101 	adc.w	r1, r1, r1
 80004ca:	3c01      	subs	r4, #1
 80004cc:	bf28      	it	cs
 80004ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80004d2:	d2e9      	bcs.n	80004a8 <__adddf3+0x10c>
 80004d4:	f091 0f00 	teq	r1, #0
 80004d8:	bf04      	itt	eq
 80004da:	4601      	moveq	r1, r0
 80004dc:	2000      	moveq	r0, #0
 80004de:	fab1 f381 	clz	r3, r1
 80004e2:	bf08      	it	eq
 80004e4:	3320      	addeq	r3, #32
 80004e6:	f1a3 030b 	sub.w	r3, r3, #11
 80004ea:	f1b3 0220 	subs.w	r2, r3, #32
 80004ee:	da0c      	bge.n	800050a <__adddf3+0x16e>
 80004f0:	320c      	adds	r2, #12
 80004f2:	dd08      	ble.n	8000506 <__adddf3+0x16a>
 80004f4:	f102 0c14 	add.w	ip, r2, #20
 80004f8:	f1c2 020c 	rsb	r2, r2, #12
 80004fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000500:	fa21 f102 	lsr.w	r1, r1, r2
 8000504:	e00c      	b.n	8000520 <__adddf3+0x184>
 8000506:	f102 0214 	add.w	r2, r2, #20
 800050a:	bfd8      	it	le
 800050c:	f1c2 0c20 	rsble	ip, r2, #32
 8000510:	fa01 f102 	lsl.w	r1, r1, r2
 8000514:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000518:	bfdc      	itt	le
 800051a:	ea41 010c 	orrle.w	r1, r1, ip
 800051e:	4090      	lslle	r0, r2
 8000520:	1ae4      	subs	r4, r4, r3
 8000522:	bfa2      	ittt	ge
 8000524:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000528:	4329      	orrge	r1, r5
 800052a:	bd30      	popge	{r4, r5, pc}
 800052c:	ea6f 0404 	mvn.w	r4, r4
 8000530:	3c1f      	subs	r4, #31
 8000532:	da1c      	bge.n	800056e <__adddf3+0x1d2>
 8000534:	340c      	adds	r4, #12
 8000536:	dc0e      	bgt.n	8000556 <__adddf3+0x1ba>
 8000538:	f104 0414 	add.w	r4, r4, #20
 800053c:	f1c4 0220 	rsb	r2, r4, #32
 8000540:	fa20 f004 	lsr.w	r0, r0, r4
 8000544:	fa01 f302 	lsl.w	r3, r1, r2
 8000548:	ea40 0003 	orr.w	r0, r0, r3
 800054c:	fa21 f304 	lsr.w	r3, r1, r4
 8000550:	ea45 0103 	orr.w	r1, r5, r3
 8000554:	bd30      	pop	{r4, r5, pc}
 8000556:	f1c4 040c 	rsb	r4, r4, #12
 800055a:	f1c4 0220 	rsb	r2, r4, #32
 800055e:	fa20 f002 	lsr.w	r0, r0, r2
 8000562:	fa01 f304 	lsl.w	r3, r1, r4
 8000566:	ea40 0003 	orr.w	r0, r0, r3
 800056a:	4629      	mov	r1, r5
 800056c:	bd30      	pop	{r4, r5, pc}
 800056e:	fa21 f004 	lsr.w	r0, r1, r4
 8000572:	4629      	mov	r1, r5
 8000574:	bd30      	pop	{r4, r5, pc}
 8000576:	f094 0f00 	teq	r4, #0
 800057a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800057e:	bf06      	itte	eq
 8000580:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000584:	3401      	addeq	r4, #1
 8000586:	3d01      	subne	r5, #1
 8000588:	e74e      	b.n	8000428 <__adddf3+0x8c>
 800058a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800058e:	bf18      	it	ne
 8000590:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000594:	d029      	beq.n	80005ea <__adddf3+0x24e>
 8000596:	ea94 0f05 	teq	r4, r5
 800059a:	bf08      	it	eq
 800059c:	ea90 0f02 	teqeq	r0, r2
 80005a0:	d005      	beq.n	80005ae <__adddf3+0x212>
 80005a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80005a6:	bf04      	itt	eq
 80005a8:	4619      	moveq	r1, r3
 80005aa:	4610      	moveq	r0, r2
 80005ac:	bd30      	pop	{r4, r5, pc}
 80005ae:	ea91 0f03 	teq	r1, r3
 80005b2:	bf1e      	ittt	ne
 80005b4:	2100      	movne	r1, #0
 80005b6:	2000      	movne	r0, #0
 80005b8:	bd30      	popne	{r4, r5, pc}
 80005ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005be:	d105      	bne.n	80005cc <__adddf3+0x230>
 80005c0:	0040      	lsls	r0, r0, #1
 80005c2:	4149      	adcs	r1, r1
 80005c4:	bf28      	it	cs
 80005c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80005ca:	bd30      	pop	{r4, r5, pc}
 80005cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80005d0:	bf3c      	itt	cc
 80005d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80005d6:	bd30      	popcc	{r4, r5, pc}
 80005d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80005e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80005e4:	f04f 0000 	mov.w	r0, #0
 80005e8:	bd30      	pop	{r4, r5, pc}
 80005ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005ee:	bf1a      	itte	ne
 80005f0:	4619      	movne	r1, r3
 80005f2:	4610      	movne	r0, r2
 80005f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80005f8:	bf1c      	itt	ne
 80005fa:	460b      	movne	r3, r1
 80005fc:	4602      	movne	r2, r0
 80005fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000602:	bf06      	itte	eq
 8000604:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000608:	ea91 0f03 	teqeq	r1, r3
 800060c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000610:	bd30      	pop	{r4, r5, pc}
 8000612:	bf00      	nop

08000614 <__aeabi_ui2d>:
 8000614:	f090 0f00 	teq	r0, #0
 8000618:	bf04      	itt	eq
 800061a:	2100      	moveq	r1, #0
 800061c:	4770      	bxeq	lr
 800061e:	b530      	push	{r4, r5, lr}
 8000620:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000624:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000628:	f04f 0500 	mov.w	r5, #0
 800062c:	f04f 0100 	mov.w	r1, #0
 8000630:	e750      	b.n	80004d4 <__adddf3+0x138>
 8000632:	bf00      	nop

08000634 <__aeabi_i2d>:
 8000634:	f090 0f00 	teq	r0, #0
 8000638:	bf04      	itt	eq
 800063a:	2100      	moveq	r1, #0
 800063c:	4770      	bxeq	lr
 800063e:	b530      	push	{r4, r5, lr}
 8000640:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000644:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000648:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800064c:	bf48      	it	mi
 800064e:	4240      	negmi	r0, r0
 8000650:	f04f 0100 	mov.w	r1, #0
 8000654:	e73e      	b.n	80004d4 <__adddf3+0x138>
 8000656:	bf00      	nop

08000658 <__aeabi_f2d>:
 8000658:	0042      	lsls	r2, r0, #1
 800065a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800065e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000662:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000666:	bf1f      	itttt	ne
 8000668:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800066c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000670:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000674:	4770      	bxne	lr
 8000676:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800067a:	bf08      	it	eq
 800067c:	4770      	bxeq	lr
 800067e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000682:	bf04      	itt	eq
 8000684:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000688:	4770      	bxeq	lr
 800068a:	b530      	push	{r4, r5, lr}
 800068c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000690:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000694:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000698:	e71c      	b.n	80004d4 <__adddf3+0x138>
 800069a:	bf00      	nop

0800069c <__aeabi_ul2d>:
 800069c:	ea50 0201 	orrs.w	r2, r0, r1
 80006a0:	bf08      	it	eq
 80006a2:	4770      	bxeq	lr
 80006a4:	b530      	push	{r4, r5, lr}
 80006a6:	f04f 0500 	mov.w	r5, #0
 80006aa:	e00a      	b.n	80006c2 <__aeabi_l2d+0x16>

080006ac <__aeabi_l2d>:
 80006ac:	ea50 0201 	orrs.w	r2, r0, r1
 80006b0:	bf08      	it	eq
 80006b2:	4770      	bxeq	lr
 80006b4:	b530      	push	{r4, r5, lr}
 80006b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80006ba:	d502      	bpl.n	80006c2 <__aeabi_l2d+0x16>
 80006bc:	4240      	negs	r0, r0
 80006be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006ce:	f43f aed8 	beq.w	8000482 <__adddf3+0xe6>
 80006d2:	f04f 0203 	mov.w	r2, #3
 80006d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006da:	bf18      	it	ne
 80006dc:	3203      	addne	r2, #3
 80006de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006e2:	bf18      	it	ne
 80006e4:	3203      	addne	r2, #3
 80006e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80006ea:	f1c2 0320 	rsb	r3, r2, #32
 80006ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80006f2:	fa20 f002 	lsr.w	r0, r0, r2
 80006f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80006fa:	ea40 000e 	orr.w	r0, r0, lr
 80006fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000702:	4414      	add	r4, r2
 8000704:	e6bd      	b.n	8000482 <__adddf3+0xe6>
 8000706:	bf00      	nop

08000708 <__aeabi_uldivmod>:
 8000708:	b953      	cbnz	r3, 8000720 <__aeabi_uldivmod+0x18>
 800070a:	b94a      	cbnz	r2, 8000720 <__aeabi_uldivmod+0x18>
 800070c:	2900      	cmp	r1, #0
 800070e:	bf08      	it	eq
 8000710:	2800      	cmpeq	r0, #0
 8000712:	bf1c      	itt	ne
 8000714:	f04f 31ff 	movne.w	r1, #4294967295
 8000718:	f04f 30ff 	movne.w	r0, #4294967295
 800071c:	f000 b9ac 	b.w	8000a78 <__aeabi_idiv0>
 8000720:	f1ad 0c08 	sub.w	ip, sp, #8
 8000724:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000728:	f000 f83e 	bl	80007a8 <__udivmoddi4>
 800072c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000730:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000734:	b004      	add	sp, #16
 8000736:	4770      	bx	lr

08000738 <__aeabi_d2lz>:
 8000738:	b508      	push	{r3, lr}
 800073a:	4602      	mov	r2, r0
 800073c:	460b      	mov	r3, r1
 800073e:	ec43 2b17 	vmov	d7, r2, r3
 8000742:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8000746:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800074a:	d403      	bmi.n	8000754 <__aeabi_d2lz+0x1c>
 800074c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8000750:	f000 b80a 	b.w	8000768 <__aeabi_d2ulz>
 8000754:	eeb1 7b47 	vneg.f64	d7, d7
 8000758:	ec51 0b17 	vmov	r0, r1, d7
 800075c:	f000 f804 	bl	8000768 <__aeabi_d2ulz>
 8000760:	4240      	negs	r0, r0
 8000762:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000766:	bd08      	pop	{r3, pc}

08000768 <__aeabi_d2ulz>:
 8000768:	ed9f 6b0b 	vldr	d6, [pc, #44]	; 8000798 <__aeabi_d2ulz+0x30>
 800076c:	ec41 0b17 	vmov	d7, r0, r1
 8000770:	ed9f 5b0b 	vldr	d5, [pc, #44]	; 80007a0 <__aeabi_d2ulz+0x38>
 8000774:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000778:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 800077c:	eeb8 4b46 	vcvt.f64.u32	d4, s12
 8000780:	eea4 7b45 	vfms.f64	d7, d4, d5
 8000784:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000788:	ee16 1a10 	vmov	r1, s12
 800078c:	ee17 0a90 	vmov	r0, s15
 8000790:	4770      	bx	lr
 8000792:	bf00      	nop
 8000794:	f3af 8000 	nop.w
 8000798:	00000000 	.word	0x00000000
 800079c:	3df00000 	.word	0x3df00000
 80007a0:	00000000 	.word	0x00000000
 80007a4:	41f00000 	.word	0x41f00000

080007a8 <__udivmoddi4>:
 80007a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80007ac:	9d08      	ldr	r5, [sp, #32]
 80007ae:	4604      	mov	r4, r0
 80007b0:	468e      	mov	lr, r1
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	d14d      	bne.n	8000852 <__udivmoddi4+0xaa>
 80007b6:	428a      	cmp	r2, r1
 80007b8:	4694      	mov	ip, r2
 80007ba:	d969      	bls.n	8000890 <__udivmoddi4+0xe8>
 80007bc:	fab2 f282 	clz	r2, r2
 80007c0:	b152      	cbz	r2, 80007d8 <__udivmoddi4+0x30>
 80007c2:	fa01 f302 	lsl.w	r3, r1, r2
 80007c6:	f1c2 0120 	rsb	r1, r2, #32
 80007ca:	fa20 f101 	lsr.w	r1, r0, r1
 80007ce:	fa0c fc02 	lsl.w	ip, ip, r2
 80007d2:	ea41 0e03 	orr.w	lr, r1, r3
 80007d6:	4094      	lsls	r4, r2
 80007d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80007dc:	0c21      	lsrs	r1, r4, #16
 80007de:	fbbe f6f8 	udiv	r6, lr, r8
 80007e2:	fa1f f78c 	uxth.w	r7, ip
 80007e6:	fb08 e316 	mls	r3, r8, r6, lr
 80007ea:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80007ee:	fb06 f107 	mul.w	r1, r6, r7
 80007f2:	4299      	cmp	r1, r3
 80007f4:	d90a      	bls.n	800080c <__udivmoddi4+0x64>
 80007f6:	eb1c 0303 	adds.w	r3, ip, r3
 80007fa:	f106 30ff 	add.w	r0, r6, #4294967295
 80007fe:	f080 811f 	bcs.w	8000a40 <__udivmoddi4+0x298>
 8000802:	4299      	cmp	r1, r3
 8000804:	f240 811c 	bls.w	8000a40 <__udivmoddi4+0x298>
 8000808:	3e02      	subs	r6, #2
 800080a:	4463      	add	r3, ip
 800080c:	1a5b      	subs	r3, r3, r1
 800080e:	b2a4      	uxth	r4, r4
 8000810:	fbb3 f0f8 	udiv	r0, r3, r8
 8000814:	fb08 3310 	mls	r3, r8, r0, r3
 8000818:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800081c:	fb00 f707 	mul.w	r7, r0, r7
 8000820:	42a7      	cmp	r7, r4
 8000822:	d90a      	bls.n	800083a <__udivmoddi4+0x92>
 8000824:	eb1c 0404 	adds.w	r4, ip, r4
 8000828:	f100 33ff 	add.w	r3, r0, #4294967295
 800082c:	f080 810a 	bcs.w	8000a44 <__udivmoddi4+0x29c>
 8000830:	42a7      	cmp	r7, r4
 8000832:	f240 8107 	bls.w	8000a44 <__udivmoddi4+0x29c>
 8000836:	4464      	add	r4, ip
 8000838:	3802      	subs	r0, #2
 800083a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800083e:	1be4      	subs	r4, r4, r7
 8000840:	2600      	movs	r6, #0
 8000842:	b11d      	cbz	r5, 800084c <__udivmoddi4+0xa4>
 8000844:	40d4      	lsrs	r4, r2
 8000846:	2300      	movs	r3, #0
 8000848:	e9c5 4300 	strd	r4, r3, [r5]
 800084c:	4631      	mov	r1, r6
 800084e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000852:	428b      	cmp	r3, r1
 8000854:	d909      	bls.n	800086a <__udivmoddi4+0xc2>
 8000856:	2d00      	cmp	r5, #0
 8000858:	f000 80ef 	beq.w	8000a3a <__udivmoddi4+0x292>
 800085c:	2600      	movs	r6, #0
 800085e:	e9c5 0100 	strd	r0, r1, [r5]
 8000862:	4630      	mov	r0, r6
 8000864:	4631      	mov	r1, r6
 8000866:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800086a:	fab3 f683 	clz	r6, r3
 800086e:	2e00      	cmp	r6, #0
 8000870:	d14a      	bne.n	8000908 <__udivmoddi4+0x160>
 8000872:	428b      	cmp	r3, r1
 8000874:	d302      	bcc.n	800087c <__udivmoddi4+0xd4>
 8000876:	4282      	cmp	r2, r0
 8000878:	f200 80f9 	bhi.w	8000a6e <__udivmoddi4+0x2c6>
 800087c:	1a84      	subs	r4, r0, r2
 800087e:	eb61 0303 	sbc.w	r3, r1, r3
 8000882:	2001      	movs	r0, #1
 8000884:	469e      	mov	lr, r3
 8000886:	2d00      	cmp	r5, #0
 8000888:	d0e0      	beq.n	800084c <__udivmoddi4+0xa4>
 800088a:	e9c5 4e00 	strd	r4, lr, [r5]
 800088e:	e7dd      	b.n	800084c <__udivmoddi4+0xa4>
 8000890:	b902      	cbnz	r2, 8000894 <__udivmoddi4+0xec>
 8000892:	deff      	udf	#255	; 0xff
 8000894:	fab2 f282 	clz	r2, r2
 8000898:	2a00      	cmp	r2, #0
 800089a:	f040 8092 	bne.w	80009c2 <__udivmoddi4+0x21a>
 800089e:	eba1 010c 	sub.w	r1, r1, ip
 80008a2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80008a6:	fa1f fe8c 	uxth.w	lr, ip
 80008aa:	2601      	movs	r6, #1
 80008ac:	0c20      	lsrs	r0, r4, #16
 80008ae:	fbb1 f3f7 	udiv	r3, r1, r7
 80008b2:	fb07 1113 	mls	r1, r7, r3, r1
 80008b6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80008ba:	fb0e f003 	mul.w	r0, lr, r3
 80008be:	4288      	cmp	r0, r1
 80008c0:	d908      	bls.n	80008d4 <__udivmoddi4+0x12c>
 80008c2:	eb1c 0101 	adds.w	r1, ip, r1
 80008c6:	f103 38ff 	add.w	r8, r3, #4294967295
 80008ca:	d202      	bcs.n	80008d2 <__udivmoddi4+0x12a>
 80008cc:	4288      	cmp	r0, r1
 80008ce:	f200 80cb 	bhi.w	8000a68 <__udivmoddi4+0x2c0>
 80008d2:	4643      	mov	r3, r8
 80008d4:	1a09      	subs	r1, r1, r0
 80008d6:	b2a4      	uxth	r4, r4
 80008d8:	fbb1 f0f7 	udiv	r0, r1, r7
 80008dc:	fb07 1110 	mls	r1, r7, r0, r1
 80008e0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80008e4:	fb0e fe00 	mul.w	lr, lr, r0
 80008e8:	45a6      	cmp	lr, r4
 80008ea:	d908      	bls.n	80008fe <__udivmoddi4+0x156>
 80008ec:	eb1c 0404 	adds.w	r4, ip, r4
 80008f0:	f100 31ff 	add.w	r1, r0, #4294967295
 80008f4:	d202      	bcs.n	80008fc <__udivmoddi4+0x154>
 80008f6:	45a6      	cmp	lr, r4
 80008f8:	f200 80bb 	bhi.w	8000a72 <__udivmoddi4+0x2ca>
 80008fc:	4608      	mov	r0, r1
 80008fe:	eba4 040e 	sub.w	r4, r4, lr
 8000902:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000906:	e79c      	b.n	8000842 <__udivmoddi4+0x9a>
 8000908:	f1c6 0720 	rsb	r7, r6, #32
 800090c:	40b3      	lsls	r3, r6
 800090e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000912:	ea4c 0c03 	orr.w	ip, ip, r3
 8000916:	fa20 f407 	lsr.w	r4, r0, r7
 800091a:	fa01 f306 	lsl.w	r3, r1, r6
 800091e:	431c      	orrs	r4, r3
 8000920:	40f9      	lsrs	r1, r7
 8000922:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000926:	fa00 f306 	lsl.w	r3, r0, r6
 800092a:	fbb1 f8f9 	udiv	r8, r1, r9
 800092e:	0c20      	lsrs	r0, r4, #16
 8000930:	fa1f fe8c 	uxth.w	lr, ip
 8000934:	fb09 1118 	mls	r1, r9, r8, r1
 8000938:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800093c:	fb08 f00e 	mul.w	r0, r8, lr
 8000940:	4288      	cmp	r0, r1
 8000942:	fa02 f206 	lsl.w	r2, r2, r6
 8000946:	d90b      	bls.n	8000960 <__udivmoddi4+0x1b8>
 8000948:	eb1c 0101 	adds.w	r1, ip, r1
 800094c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000950:	f080 8088 	bcs.w	8000a64 <__udivmoddi4+0x2bc>
 8000954:	4288      	cmp	r0, r1
 8000956:	f240 8085 	bls.w	8000a64 <__udivmoddi4+0x2bc>
 800095a:	f1a8 0802 	sub.w	r8, r8, #2
 800095e:	4461      	add	r1, ip
 8000960:	1a09      	subs	r1, r1, r0
 8000962:	b2a4      	uxth	r4, r4
 8000964:	fbb1 f0f9 	udiv	r0, r1, r9
 8000968:	fb09 1110 	mls	r1, r9, r0, r1
 800096c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000970:	fb00 fe0e 	mul.w	lr, r0, lr
 8000974:	458e      	cmp	lr, r1
 8000976:	d908      	bls.n	800098a <__udivmoddi4+0x1e2>
 8000978:	eb1c 0101 	adds.w	r1, ip, r1
 800097c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000980:	d26c      	bcs.n	8000a5c <__udivmoddi4+0x2b4>
 8000982:	458e      	cmp	lr, r1
 8000984:	d96a      	bls.n	8000a5c <__udivmoddi4+0x2b4>
 8000986:	3802      	subs	r0, #2
 8000988:	4461      	add	r1, ip
 800098a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800098e:	fba0 9402 	umull	r9, r4, r0, r2
 8000992:	eba1 010e 	sub.w	r1, r1, lr
 8000996:	42a1      	cmp	r1, r4
 8000998:	46c8      	mov	r8, r9
 800099a:	46a6      	mov	lr, r4
 800099c:	d356      	bcc.n	8000a4c <__udivmoddi4+0x2a4>
 800099e:	d053      	beq.n	8000a48 <__udivmoddi4+0x2a0>
 80009a0:	b15d      	cbz	r5, 80009ba <__udivmoddi4+0x212>
 80009a2:	ebb3 0208 	subs.w	r2, r3, r8
 80009a6:	eb61 010e 	sbc.w	r1, r1, lr
 80009aa:	fa01 f707 	lsl.w	r7, r1, r7
 80009ae:	fa22 f306 	lsr.w	r3, r2, r6
 80009b2:	40f1      	lsrs	r1, r6
 80009b4:	431f      	orrs	r7, r3
 80009b6:	e9c5 7100 	strd	r7, r1, [r5]
 80009ba:	2600      	movs	r6, #0
 80009bc:	4631      	mov	r1, r6
 80009be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80009c2:	f1c2 0320 	rsb	r3, r2, #32
 80009c6:	40d8      	lsrs	r0, r3
 80009c8:	fa0c fc02 	lsl.w	ip, ip, r2
 80009cc:	fa21 f303 	lsr.w	r3, r1, r3
 80009d0:	4091      	lsls	r1, r2
 80009d2:	4301      	orrs	r1, r0
 80009d4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80009d8:	fa1f fe8c 	uxth.w	lr, ip
 80009dc:	fbb3 f0f7 	udiv	r0, r3, r7
 80009e0:	fb07 3610 	mls	r6, r7, r0, r3
 80009e4:	0c0b      	lsrs	r3, r1, #16
 80009e6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80009ea:	fb00 f60e 	mul.w	r6, r0, lr
 80009ee:	429e      	cmp	r6, r3
 80009f0:	fa04 f402 	lsl.w	r4, r4, r2
 80009f4:	d908      	bls.n	8000a08 <__udivmoddi4+0x260>
 80009f6:	eb1c 0303 	adds.w	r3, ip, r3
 80009fa:	f100 38ff 	add.w	r8, r0, #4294967295
 80009fe:	d22f      	bcs.n	8000a60 <__udivmoddi4+0x2b8>
 8000a00:	429e      	cmp	r6, r3
 8000a02:	d92d      	bls.n	8000a60 <__udivmoddi4+0x2b8>
 8000a04:	3802      	subs	r0, #2
 8000a06:	4463      	add	r3, ip
 8000a08:	1b9b      	subs	r3, r3, r6
 8000a0a:	b289      	uxth	r1, r1
 8000a0c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000a10:	fb07 3316 	mls	r3, r7, r6, r3
 8000a14:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000a18:	fb06 f30e 	mul.w	r3, r6, lr
 8000a1c:	428b      	cmp	r3, r1
 8000a1e:	d908      	bls.n	8000a32 <__udivmoddi4+0x28a>
 8000a20:	eb1c 0101 	adds.w	r1, ip, r1
 8000a24:	f106 38ff 	add.w	r8, r6, #4294967295
 8000a28:	d216      	bcs.n	8000a58 <__udivmoddi4+0x2b0>
 8000a2a:	428b      	cmp	r3, r1
 8000a2c:	d914      	bls.n	8000a58 <__udivmoddi4+0x2b0>
 8000a2e:	3e02      	subs	r6, #2
 8000a30:	4461      	add	r1, ip
 8000a32:	1ac9      	subs	r1, r1, r3
 8000a34:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000a38:	e738      	b.n	80008ac <__udivmoddi4+0x104>
 8000a3a:	462e      	mov	r6, r5
 8000a3c:	4628      	mov	r0, r5
 8000a3e:	e705      	b.n	800084c <__udivmoddi4+0xa4>
 8000a40:	4606      	mov	r6, r0
 8000a42:	e6e3      	b.n	800080c <__udivmoddi4+0x64>
 8000a44:	4618      	mov	r0, r3
 8000a46:	e6f8      	b.n	800083a <__udivmoddi4+0x92>
 8000a48:	454b      	cmp	r3, r9
 8000a4a:	d2a9      	bcs.n	80009a0 <__udivmoddi4+0x1f8>
 8000a4c:	ebb9 0802 	subs.w	r8, r9, r2
 8000a50:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000a54:	3801      	subs	r0, #1
 8000a56:	e7a3      	b.n	80009a0 <__udivmoddi4+0x1f8>
 8000a58:	4646      	mov	r6, r8
 8000a5a:	e7ea      	b.n	8000a32 <__udivmoddi4+0x28a>
 8000a5c:	4620      	mov	r0, r4
 8000a5e:	e794      	b.n	800098a <__udivmoddi4+0x1e2>
 8000a60:	4640      	mov	r0, r8
 8000a62:	e7d1      	b.n	8000a08 <__udivmoddi4+0x260>
 8000a64:	46d0      	mov	r8, sl
 8000a66:	e77b      	b.n	8000960 <__udivmoddi4+0x1b8>
 8000a68:	3b02      	subs	r3, #2
 8000a6a:	4461      	add	r1, ip
 8000a6c:	e732      	b.n	80008d4 <__udivmoddi4+0x12c>
 8000a6e:	4630      	mov	r0, r6
 8000a70:	e709      	b.n	8000886 <__udivmoddi4+0xde>
 8000a72:	4464      	add	r4, ip
 8000a74:	3802      	subs	r0, #2
 8000a76:	e742      	b.n	80008fe <__udivmoddi4+0x156>

08000a78 <__aeabi_idiv0>:
 8000a78:	4770      	bx	lr
 8000a7a:	bf00      	nop

08000a7c <MX_GPIO_Init>:
     PH1-OSC_OUT (PH1)   ------> RCC_OSC_OUT
     PA13 (JTMS/SWDIO)   ------> DEBUG_JTMS-SWDIO
     PA14 (JTCK/SWCLK)   ------> DEBUG_JTCK-SWCLK
*/
void MX_GPIO_Init(void)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	b08e      	sub	sp, #56	; 0x38
 8000a80:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a82:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a86:	2200      	movs	r2, #0
 8000a88:	601a      	str	r2, [r3, #0]
 8000a8a:	605a      	str	r2, [r3, #4]
 8000a8c:	609a      	str	r2, [r3, #8]
 8000a8e:	60da      	str	r2, [r3, #12]
 8000a90:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000a92:	4b96      	ldr	r3, [pc, #600]	; (8000cec <MX_GPIO_Init+0x270>)
 8000a94:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a98:	4a94      	ldr	r2, [pc, #592]	; (8000cec <MX_GPIO_Init+0x270>)
 8000a9a:	f043 0310 	orr.w	r3, r3, #16
 8000a9e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000aa2:	4b92      	ldr	r3, [pc, #584]	; (8000cec <MX_GPIO_Init+0x270>)
 8000aa4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000aa8:	f003 0310 	and.w	r3, r3, #16
 8000aac:	623b      	str	r3, [r7, #32]
 8000aae:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ab0:	4b8e      	ldr	r3, [pc, #568]	; (8000cec <MX_GPIO_Init+0x270>)
 8000ab2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ab6:	4a8d      	ldr	r2, [pc, #564]	; (8000cec <MX_GPIO_Init+0x270>)
 8000ab8:	f043 0304 	orr.w	r3, r3, #4
 8000abc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ac0:	4b8a      	ldr	r3, [pc, #552]	; (8000cec <MX_GPIO_Init+0x270>)
 8000ac2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ac6:	f003 0304 	and.w	r3, r3, #4
 8000aca:	61fb      	str	r3, [r7, #28]
 8000acc:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000ace:	4b87      	ldr	r3, [pc, #540]	; (8000cec <MX_GPIO_Init+0x270>)
 8000ad0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ad4:	4a85      	ldr	r2, [pc, #532]	; (8000cec <MX_GPIO_Init+0x270>)
 8000ad6:	f043 0320 	orr.w	r3, r3, #32
 8000ada:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ade:	4b83      	ldr	r3, [pc, #524]	; (8000cec <MX_GPIO_Init+0x270>)
 8000ae0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ae4:	f003 0320 	and.w	r3, r3, #32
 8000ae8:	61bb      	str	r3, [r7, #24]
 8000aea:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000aec:	4b7f      	ldr	r3, [pc, #508]	; (8000cec <MX_GPIO_Init+0x270>)
 8000aee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000af2:	4a7e      	ldr	r2, [pc, #504]	; (8000cec <MX_GPIO_Init+0x270>)
 8000af4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000af8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000afc:	4b7b      	ldr	r3, [pc, #492]	; (8000cec <MX_GPIO_Init+0x270>)
 8000afe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b06:	617b      	str	r3, [r7, #20]
 8000b08:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b0a:	4b78      	ldr	r3, [pc, #480]	; (8000cec <MX_GPIO_Init+0x270>)
 8000b0c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b10:	4a76      	ldr	r2, [pc, #472]	; (8000cec <MX_GPIO_Init+0x270>)
 8000b12:	f043 0301 	orr.w	r3, r3, #1
 8000b16:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b1a:	4b74      	ldr	r3, [pc, #464]	; (8000cec <MX_GPIO_Init+0x270>)
 8000b1c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b20:	f003 0301 	and.w	r3, r3, #1
 8000b24:	613b      	str	r3, [r7, #16]
 8000b26:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b28:	4b70      	ldr	r3, [pc, #448]	; (8000cec <MX_GPIO_Init+0x270>)
 8000b2a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b2e:	4a6f      	ldr	r2, [pc, #444]	; (8000cec <MX_GPIO_Init+0x270>)
 8000b30:	f043 0302 	orr.w	r3, r3, #2
 8000b34:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b38:	4b6c      	ldr	r3, [pc, #432]	; (8000cec <MX_GPIO_Init+0x270>)
 8000b3a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b3e:	f003 0302 	and.w	r3, r3, #2
 8000b42:	60fb      	str	r3, [r7, #12]
 8000b44:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b46:	4b69      	ldr	r3, [pc, #420]	; (8000cec <MX_GPIO_Init+0x270>)
 8000b48:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b4c:	4a67      	ldr	r2, [pc, #412]	; (8000cec <MX_GPIO_Init+0x270>)
 8000b4e:	f043 0308 	orr.w	r3, r3, #8
 8000b52:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b56:	4b65      	ldr	r3, [pc, #404]	; (8000cec <MX_GPIO_Init+0x270>)
 8000b58:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b5c:	f003 0308 	and.w	r3, r3, #8
 8000b60:	60bb      	str	r3, [r7, #8]
 8000b62:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000b64:	4b61      	ldr	r3, [pc, #388]	; (8000cec <MX_GPIO_Init+0x270>)
 8000b66:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b6a:	4a60      	ldr	r2, [pc, #384]	; (8000cec <MX_GPIO_Init+0x270>)
 8000b6c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000b70:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b74:	4b5d      	ldr	r3, [pc, #372]	; (8000cec <MX_GPIO_Init+0x270>)
 8000b76:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000b7e:	607b      	str	r3, [r7, #4]
 8000b80:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(relayDrivers_GPIO_Port, relayDrivers_Pin, GPIO_PIN_RESET);
 8000b82:	2200      	movs	r2, #0
 8000b84:	2108      	movs	r1, #8
 8000b86:	485a      	ldr	r0, [pc, #360]	; (8000cf0 <MX_GPIO_Init+0x274>)
 8000b88:	f006 fe2c 	bl	80077e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, S_DirPaP1_Pin|S_DirPaP2_Pin|S_DirPaP3_Pin, GPIO_PIN_RESET);
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8000b92:	4858      	ldr	r0, [pc, #352]	; (8000cf4 <MX_GPIO_Init+0x278>)
 8000b94:	f006 fe26 	bl	80077e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, S_Enable_1_Pin|S_Enable_2_Pin|S_Enable_3_Pin, GPIO_PIN_RESET);
 8000b98:	2200      	movs	r2, #0
 8000b9a:	2170      	movs	r1, #112	; 0x70
 8000b9c:	4856      	ldr	r0, [pc, #344]	; (8000cf8 <MX_GPIO_Init+0x27c>)
 8000b9e:	f006 fe21 	bl	80077e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin
                           PEPin PEPin */
  GPIO_InitStruct.Pin = E_EndStop2_Sup_Pin|E_EndStop2_Inf_Pin|E_EndStop3_Sup_Pin|E_EndStop3_Inf_Pin
 8000ba2:	23bd      	movs	r3, #189	; 0xbd
 8000ba4:	627b      	str	r3, [r7, #36]	; 0x24
                          |faultDriver1_Pin|E_EndStop1_Sup_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000ba6:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000baa:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bac:	2300      	movs	r3, #0
 8000bae:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000bb0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bb4:	4619      	mov	r1, r3
 8000bb6:	4851      	ldr	r0, [pc, #324]	; (8000cfc <MX_GPIO_Init+0x280>)
 8000bb8:	f006 fc4c 	bl	8007454 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BUTTON_Pin;
 8000bbc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000bc0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000bc2:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000bc6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000bc8:	2302      	movs	r3, #2
 8000bca:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(BUTTON_GPIO_Port, &GPIO_InitStruct);
 8000bcc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bd0:	4619      	mov	r1, r3
 8000bd2:	4848      	ldr	r0, [pc, #288]	; (8000cf4 <MX_GPIO_Init+0x278>)
 8000bd4:	f006 fc3e 	bl	8007454 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = relayDrivers_Pin;
 8000bd8:	2308      	movs	r3, #8
 8000bda:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bdc:	2301      	movs	r3, #1
 8000bde:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be0:	2300      	movs	r3, #0
 8000be2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000be4:	2300      	movs	r3, #0
 8000be6:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(relayDrivers_GPIO_Port, &GPIO_InitStruct);
 8000be8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bec:	4619      	mov	r1, r3
 8000bee:	4840      	ldr	r0, [pc, #256]	; (8000cf0 <MX_GPIO_Init+0x274>)
 8000bf0:	f006 fc30 	bl	8007454 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = faultDriver2_Pin|faultDriver3_Pin;
 8000bf4:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8000bf8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000bfa:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000bfe:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c00:	2300      	movs	r3, #0
 8000c02:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c04:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c08:	4619      	mov	r1, r3
 8000c0a:	483b      	ldr	r0, [pc, #236]	; (8000cf8 <MX_GPIO_Init+0x27c>)
 8000c0c:	f006 fc22 	bl	8007454 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = S_DirPaP1_Pin|S_DirPaP2_Pin|S_DirPaP3_Pin;
 8000c10:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8000c14:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c16:	2301      	movs	r3, #1
 8000c18:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c1e:	2300      	movs	r3, #0
 8000c20:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c22:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c26:	4619      	mov	r1, r3
 8000c28:	4832      	ldr	r0, [pc, #200]	; (8000cf4 <MX_GPIO_Init+0x278>)
 8000c2a:	f006 fc13 	bl	8007454 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = S_Enable_1_Pin;
 8000c2e:	2310      	movs	r3, #16
 8000c30:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c32:	2301      	movs	r3, #1
 8000c34:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c36:	2300      	movs	r3, #0
 8000c38:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(S_Enable_1_GPIO_Port, &GPIO_InitStruct);
 8000c3e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c42:	4619      	mov	r1, r3
 8000c44:	482c      	ldr	r0, [pc, #176]	; (8000cf8 <MX_GPIO_Init+0x27c>)
 8000c46:	f006 fc05 	bl	8007454 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = S_Enable_2_Pin|S_Enable_3_Pin;
 8000c4a:	2360      	movs	r3, #96	; 0x60
 8000c4c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000c4e:	2311      	movs	r3, #17
 8000c50:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c52:	2300      	movs	r3, #0
 8000c54:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c56:	2300      	movs	r3, #0
 8000c58:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c5a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c5e:	4619      	mov	r1, r3
 8000c60:	4825      	ldr	r0, [pc, #148]	; (8000cf8 <MX_GPIO_Init+0x27c>)
 8000c62:	f006 fbf7 	bl	8007454 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = E_EndStop1_Inf_Pin;
 8000c66:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c6a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000c6c:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000c70:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c72:	2300      	movs	r3, #0
 8000c74:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(E_EndStop1_Inf_GPIO_Port, &GPIO_InitStruct);
 8000c76:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c7a:	4619      	mov	r1, r3
 8000c7c:	4820      	ldr	r0, [pc, #128]	; (8000d00 <MX_GPIO_Init+0x284>)
 8000c7e:	f006 fbe9 	bl	8007454 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 1, 0);
 8000c82:	2200      	movs	r2, #0
 8000c84:	2101      	movs	r1, #1
 8000c86:	2006      	movs	r0, #6
 8000c88:	f005 fe3d 	bl	8006906 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000c8c:	2006      	movs	r0, #6
 8000c8e:	f005 fe54 	bl	800693a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 1, 0);
 8000c92:	2200      	movs	r2, #0
 8000c94:	2101      	movs	r1, #1
 8000c96:	2008      	movs	r0, #8
 8000c98:	f005 fe35 	bl	8006906 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8000c9c:	2008      	movs	r0, #8
 8000c9e:	f005 fe4c 	bl	800693a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 1, 0);
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	2101      	movs	r1, #1
 8000ca6:	2009      	movs	r0, #9
 8000ca8:	f005 fe2d 	bl	8006906 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8000cac:	2009      	movs	r0, #9
 8000cae:	f005 fe44 	bl	800693a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 1, 0);
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	2101      	movs	r1, #1
 8000cb6:	200a      	movs	r0, #10
 8000cb8:	f005 fe25 	bl	8006906 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8000cbc:	200a      	movs	r0, #10
 8000cbe:	f005 fe3c 	bl	800693a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 1, 0);
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	2101      	movs	r1, #1
 8000cc6:	2017      	movs	r0, #23
 8000cc8:	f005 fe1d 	bl	8006906 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000ccc:	2017      	movs	r0, #23
 8000cce:	f005 fe34 	bl	800693a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 1, 0);
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	2101      	movs	r1, #1
 8000cd6:	2028      	movs	r0, #40	; 0x28
 8000cd8:	f005 fe15 	bl	8006906 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000cdc:	2028      	movs	r0, #40	; 0x28
 8000cde:	f005 fe2c 	bl	800693a <HAL_NVIC_EnableIRQ>

}
 8000ce2:	bf00      	nop
 8000ce4:	3738      	adds	r7, #56	; 0x38
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	bd80      	pop	{r7, pc}
 8000cea:	bf00      	nop
 8000cec:	58024400 	.word	0x58024400
 8000cf0:	58021400 	.word	0x58021400
 8000cf4:	58020800 	.word	0x58020800
 8000cf8:	58020c00 	.word	0x58020c00
 8000cfc:	58021000 	.word	0x58021000
 8000d00:	58021800 	.word	0x58021800
 8000d04:	00000000 	.word	0x00000000

08000d08 <homing>:

double rpm = 1.0;  //Valor experimental. Se encontro que es una buena velocidad para la tarea de homing
bool homAprox, homStart;


void homing(void) {
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	af00      	add	r7, sp, #0

	homAprox = true;
 8000d0c:	4bb0      	ldr	r3, [pc, #704]	; (8000fd0 <homing+0x2c8>)
 8000d0e:	2201      	movs	r2, #1
 8000d10:	701a      	strb	r2, [r3, #0]
	homStart = true;
 8000d12:	4bb0      	ldr	r3, [pc, #704]	; (8000fd4 <homing+0x2cc>)
 8000d14:	2201      	movs	r2, #1
 8000d16:	701a      	strb	r2, [r3, #0]

    motor1.hom = false;
 8000d18:	4baf      	ldr	r3, [pc, #700]	; (8000fd8 <homing+0x2d0>)
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	761a      	strb	r2, [r3, #24]
    motor2.hom = false;
 8000d1e:	4baf      	ldr	r3, [pc, #700]	; (8000fdc <homing+0x2d4>)
 8000d20:	2200      	movs	r2, #0
 8000d22:	761a      	strb	r2, [r3, #24]
    motor3.hom = false;
 8000d24:	4bae      	ldr	r3, [pc, #696]	; (8000fe0 <homing+0x2d8>)
 8000d26:	2200      	movs	r2, #0
 8000d28:	761a      	strb	r2, [r3, #24]

    //Establecemos la direccion en sentido horario (VISTA FRONTAL DEL MOTOR)
    positive_Dir_MOTOR_1;
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000d30:	48ac      	ldr	r0, [pc, #688]	; (8000fe4 <homing+0x2dc>)
 8000d32:	f006 fd57 	bl	80077e4 <HAL_GPIO_WritePin>
	positive_Dir_MOTOR_2;
 8000d36:	2200      	movs	r2, #0
 8000d38:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000d3c:	48a9      	ldr	r0, [pc, #676]	; (8000fe4 <homing+0x2dc>)
 8000d3e:	f006 fd51 	bl	80077e4 <HAL_GPIO_WritePin>
	positive_Dir_MOTOR_3;
 8000d42:	2200      	movs	r2, #0
 8000d44:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000d48:	48a6      	ldr	r0, [pc, #664]	; (8000fe4 <homing+0x2dc>)
 8000d4a:	f006 fd4b 	bl	80077e4 <HAL_GPIO_WritePin>

	HAL_NVIC_DisableIRQ(EXTI0_IRQn);	//Apago interrupcion EndStop 1 Superior
 8000d4e:	2006      	movs	r0, #6
 8000d50:	f005 fe01 	bl	8006956 <HAL_NVIC_DisableIRQ>
	HAL_NVIC_DisableIRQ(EXTI1_IRQn);	//Apago interrupcion EndStop 1 Inferior
 8000d54:	2007      	movs	r0, #7
 8000d56:	f005 fdfe 	bl	8006956 <HAL_NVIC_DisableIRQ>
	HAL_NVIC_DisableIRQ(EXTI2_IRQn);	//Apago interrupcion EndStop 2 Superior
 8000d5a:	2008      	movs	r0, #8
 8000d5c:	f005 fdfb 	bl	8006956 <HAL_NVIC_DisableIRQ>
	HAL_NVIC_DisableIRQ(EXTI3_IRQn);	//Apago interrupcion EndStop 2 Inferior
 8000d60:	2009      	movs	r0, #9
 8000d62:	f005 fdf8 	bl	8006956 <HAL_NVIC_DisableIRQ>
	HAL_NVIC_DisableIRQ(EXTI4_IRQn);	//Apago interrupcion EndStop 3 Superior
 8000d66:	200a      	movs	r0, #10
 8000d68:	f005 fdf5 	bl	8006956 <HAL_NVIC_DisableIRQ>
	HAL_NVIC_DisableIRQ(EXTI9_5_IRQn);	//Apago interrupcion EndStop 3 Inferior
 8000d6c:	2017      	movs	r0, #23
 8000d6e:	f005 fdf2 	bl	8006956 <HAL_NVIC_DisableIRQ>
	HAL_NVIC_DisableIRQ(EXTI15_10_IRQn); //Apago interrupcion faultDriver
 8000d72:	2028      	movs	r0, #40	; 0x28
 8000d74:	f005 fdef 	bl	8006956 <HAL_NVIC_DisableIRQ>


    //Me aseguro que los motores esten detenidos

	Stop_PWM_MOTOR_1;
 8000d78:	2100      	movs	r1, #0
 8000d7a:	489b      	ldr	r0, [pc, #620]	; (8000fe8 <homing+0x2e0>)
 8000d7c:	f009 fbc8 	bl	800a510 <HAL_TIM_PWM_Stop>
	Stop_PWM_MOTOR_2;
 8000d80:	2100      	movs	r1, #0
 8000d82:	489a      	ldr	r0, [pc, #616]	; (8000fec <homing+0x2e4>)
 8000d84:	f009 fbc4 	bl	800a510 <HAL_TIM_PWM_Stop>
	Stop_PWM_MOTOR_3;
 8000d88:	2100      	movs	r1, #0
 8000d8a:	4899      	ldr	r0, [pc, #612]	; (8000ff0 <homing+0x2e8>)
 8000d8c:	f009 fbc0 	bl	800a510 <HAL_TIM_PWM_Stop>

	//Escritura del registro ARR
	__HAL_TIM_SET_AUTORELOAD(&htim12,COUNTERPERIOD(rpm));
 8000d90:	4b98      	ldr	r3, [pc, #608]	; (8000ff4 <homing+0x2ec>)
 8000d92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d94:	ee07 3a90 	vmov	s15, r3
 8000d98:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8000d9c:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8000da0:	ee37 7b06 	vadd.f64	d7, d7, d6
 8000da4:	ed9f 5b84 	vldr	d5, [pc, #528]	; 8000fb8 <homing+0x2b0>
 8000da8:	ee85 6b07 	vdiv.f64	d6, d5, d7
 8000dac:	4b92      	ldr	r3, [pc, #584]	; (8000ff8 <homing+0x2f0>)
 8000dae:	ed93 7b00 	vldr	d7, [r3]
 8000db2:	ed9f 5b83 	vldr	d5, [pc, #524]	; 8000fc0 <homing+0x2b8>
 8000db6:	ee27 5b05 	vmul.f64	d5, d7, d5
 8000dba:	ed9f 4b83 	vldr	d4, [pc, #524]	; 8000fc8 <homing+0x2c0>
 8000dbe:	ee84 7b05 	vdiv.f64	d7, d4, d5
 8000dc2:	ee26 7b07 	vmul.f64	d7, d6, d7
 8000dc6:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8000dca:	ee37 7b46 	vsub.f64	d7, d7, d6
 8000dce:	4b86      	ldr	r3, [pc, #536]	; (8000fe8 <homing+0x2e0>)
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000dd6:	ee17 2a90 	vmov	r2, s15
 8000dda:	62da      	str	r2, [r3, #44]	; 0x2c
 8000ddc:	4b85      	ldr	r3, [pc, #532]	; (8000ff4 <homing+0x2ec>)
 8000dde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000de0:	ee07 3a90 	vmov	s15, r3
 8000de4:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8000de8:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8000dec:	ee37 7b06 	vadd.f64	d7, d7, d6
 8000df0:	ed9f 5b71 	vldr	d5, [pc, #452]	; 8000fb8 <homing+0x2b0>
 8000df4:	ee85 6b07 	vdiv.f64	d6, d5, d7
 8000df8:	4b7f      	ldr	r3, [pc, #508]	; (8000ff8 <homing+0x2f0>)
 8000dfa:	ed93 7b00 	vldr	d7, [r3]
 8000dfe:	ed9f 5b70 	vldr	d5, [pc, #448]	; 8000fc0 <homing+0x2b8>
 8000e02:	ee27 5b05 	vmul.f64	d5, d7, d5
 8000e06:	ed9f 4b70 	vldr	d4, [pc, #448]	; 8000fc8 <homing+0x2c0>
 8000e0a:	ee84 7b05 	vdiv.f64	d7, d4, d5
 8000e0e:	ee26 7b07 	vmul.f64	d7, d6, d7
 8000e12:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8000e16:	ee37 7b46 	vsub.f64	d7, d7, d6
 8000e1a:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000e1e:	ee17 2a90 	vmov	r2, s15
 8000e22:	4b71      	ldr	r3, [pc, #452]	; (8000fe8 <homing+0x2e0>)
 8000e24:	60da      	str	r2, [r3, #12]
	__HAL_TIM_SET_AUTORELOAD(&htim13,COUNTERPERIOD(rpm));
 8000e26:	4b73      	ldr	r3, [pc, #460]	; (8000ff4 <homing+0x2ec>)
 8000e28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e2a:	ee07 3a90 	vmov	s15, r3
 8000e2e:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8000e32:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8000e36:	ee37 7b06 	vadd.f64	d7, d7, d6
 8000e3a:	ed9f 5b5f 	vldr	d5, [pc, #380]	; 8000fb8 <homing+0x2b0>
 8000e3e:	ee85 6b07 	vdiv.f64	d6, d5, d7
 8000e42:	4b6d      	ldr	r3, [pc, #436]	; (8000ff8 <homing+0x2f0>)
 8000e44:	ed93 7b00 	vldr	d7, [r3]
 8000e48:	ed9f 5b5d 	vldr	d5, [pc, #372]	; 8000fc0 <homing+0x2b8>
 8000e4c:	ee27 5b05 	vmul.f64	d5, d7, d5
 8000e50:	ed9f 4b5d 	vldr	d4, [pc, #372]	; 8000fc8 <homing+0x2c0>
 8000e54:	ee84 7b05 	vdiv.f64	d7, d4, d5
 8000e58:	ee26 7b07 	vmul.f64	d7, d6, d7
 8000e5c:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8000e60:	ee37 7b46 	vsub.f64	d7, d7, d6
 8000e64:	4b61      	ldr	r3, [pc, #388]	; (8000fec <homing+0x2e4>)
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000e6c:	ee17 2a90 	vmov	r2, s15
 8000e70:	62da      	str	r2, [r3, #44]	; 0x2c
 8000e72:	4b60      	ldr	r3, [pc, #384]	; (8000ff4 <homing+0x2ec>)
 8000e74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e76:	ee07 3a90 	vmov	s15, r3
 8000e7a:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8000e7e:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8000e82:	ee37 7b06 	vadd.f64	d7, d7, d6
 8000e86:	ed9f 5b4c 	vldr	d5, [pc, #304]	; 8000fb8 <homing+0x2b0>
 8000e8a:	ee85 6b07 	vdiv.f64	d6, d5, d7
 8000e8e:	4b5a      	ldr	r3, [pc, #360]	; (8000ff8 <homing+0x2f0>)
 8000e90:	ed93 7b00 	vldr	d7, [r3]
 8000e94:	ed9f 5b4a 	vldr	d5, [pc, #296]	; 8000fc0 <homing+0x2b8>
 8000e98:	ee27 5b05 	vmul.f64	d5, d7, d5
 8000e9c:	ed9f 4b4a 	vldr	d4, [pc, #296]	; 8000fc8 <homing+0x2c0>
 8000ea0:	ee84 7b05 	vdiv.f64	d7, d4, d5
 8000ea4:	ee26 7b07 	vmul.f64	d7, d6, d7
 8000ea8:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8000eac:	ee37 7b46 	vsub.f64	d7, d7, d6
 8000eb0:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000eb4:	ee17 2a90 	vmov	r2, s15
 8000eb8:	4b4c      	ldr	r3, [pc, #304]	; (8000fec <homing+0x2e4>)
 8000eba:	60da      	str	r2, [r3, #12]
	__HAL_TIM_SET_AUTORELOAD(&htim14,COUNTERPERIOD(rpm));
 8000ebc:	4b4d      	ldr	r3, [pc, #308]	; (8000ff4 <homing+0x2ec>)
 8000ebe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ec0:	ee07 3a90 	vmov	s15, r3
 8000ec4:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8000ec8:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8000ecc:	ee37 7b06 	vadd.f64	d7, d7, d6
 8000ed0:	ed9f 5b39 	vldr	d5, [pc, #228]	; 8000fb8 <homing+0x2b0>
 8000ed4:	ee85 6b07 	vdiv.f64	d6, d5, d7
 8000ed8:	4b47      	ldr	r3, [pc, #284]	; (8000ff8 <homing+0x2f0>)
 8000eda:	ed93 7b00 	vldr	d7, [r3]
 8000ede:	ed9f 5b38 	vldr	d5, [pc, #224]	; 8000fc0 <homing+0x2b8>
 8000ee2:	ee27 5b05 	vmul.f64	d5, d7, d5
 8000ee6:	ed9f 4b38 	vldr	d4, [pc, #224]	; 8000fc8 <homing+0x2c0>
 8000eea:	ee84 7b05 	vdiv.f64	d7, d4, d5
 8000eee:	ee26 7b07 	vmul.f64	d7, d6, d7
 8000ef2:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8000ef6:	ee37 7b46 	vsub.f64	d7, d7, d6
 8000efa:	4b3d      	ldr	r3, [pc, #244]	; (8000ff0 <homing+0x2e8>)
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000f02:	ee17 2a90 	vmov	r2, s15
 8000f06:	62da      	str	r2, [r3, #44]	; 0x2c
 8000f08:	4b3a      	ldr	r3, [pc, #232]	; (8000ff4 <homing+0x2ec>)
 8000f0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f0c:	ee07 3a90 	vmov	s15, r3
 8000f10:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8000f14:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8000f18:	ee37 7b06 	vadd.f64	d7, d7, d6
 8000f1c:	ed9f 5b26 	vldr	d5, [pc, #152]	; 8000fb8 <homing+0x2b0>
 8000f20:	ee85 6b07 	vdiv.f64	d6, d5, d7
 8000f24:	4b34      	ldr	r3, [pc, #208]	; (8000ff8 <homing+0x2f0>)
 8000f26:	ed93 7b00 	vldr	d7, [r3]
 8000f2a:	ed9f 5b25 	vldr	d5, [pc, #148]	; 8000fc0 <homing+0x2b8>
 8000f2e:	ee27 5b05 	vmul.f64	d5, d7, d5
 8000f32:	ed9f 4b25 	vldr	d4, [pc, #148]	; 8000fc8 <homing+0x2c0>
 8000f36:	ee84 7b05 	vdiv.f64	d7, d4, d5
 8000f3a:	ee26 7b07 	vmul.f64	d7, d6, d7
 8000f3e:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8000f42:	ee37 7b46 	vsub.f64	d7, d7, d6
 8000f46:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000f4a:	ee17 2a90 	vmov	r2, s15
 8000f4e:	4b28      	ldr	r3, [pc, #160]	; (8000ff0 <homing+0x2e8>)
 8000f50:	60da      	str	r2, [r3, #12]

	TIM12->CCR1 = (uint32_t)((double)(TIM12->ARR) / 2.0);
 8000f52:	4b28      	ldr	r3, [pc, #160]	; (8000ff4 <homing+0x2ec>)
 8000f54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f56:	ee07 3a90 	vmov	s15, r3
 8000f5a:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 8000f5e:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8000f62:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000f66:	4b23      	ldr	r3, [pc, #140]	; (8000ff4 <homing+0x2ec>)
 8000f68:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000f6c:	ee17 2a90 	vmov	r2, s15
 8000f70:	635a      	str	r2, [r3, #52]	; 0x34
	TIM13->CCR1 = (uint32_t)((double)(TIM13->ARR) / 2.0);
 8000f72:	4b22      	ldr	r3, [pc, #136]	; (8000ffc <homing+0x2f4>)
 8000f74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f76:	ee07 3a90 	vmov	s15, r3
 8000f7a:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 8000f7e:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8000f82:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000f86:	4b1d      	ldr	r3, [pc, #116]	; (8000ffc <homing+0x2f4>)
 8000f88:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000f8c:	ee17 2a90 	vmov	r2, s15
 8000f90:	635a      	str	r2, [r3, #52]	; 0x34
	TIM14->CCR1 = (uint32_t)((double)(TIM14->ARR) / 2.0);
 8000f92:	4b1b      	ldr	r3, [pc, #108]	; (8001000 <homing+0x2f8>)
 8000f94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f96:	ee07 3a90 	vmov	s15, r3
 8000f9a:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 8000f9e:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8000fa2:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000fa6:	4b16      	ldr	r3, [pc, #88]	; (8001000 <homing+0x2f8>)
 8000fa8:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000fac:	ee17 2a90 	vmov	r2, s15
 8000fb0:	635a      	str	r2, [r3, #52]	; 0x34


    while(homAprox){
 8000fb2:	e06f      	b.n	8001094 <homing+0x38c>
 8000fb4:	f3af 8000 	nop.w
 8000fb8:	00000000 	.word	0x00000000
 8000fbc:	418e8480 	.word	0x418e8480
 8000fc0:	00000000 	.word	0x00000000
 8000fc4:	40bf4000 	.word	0x40bf4000
 8000fc8:	00000000 	.word	0x00000000
 8000fcc:	404e0000 	.word	0x404e0000
 8000fd0:	2400027c 	.word	0x2400027c
 8000fd4:	2400027d 	.word	0x2400027d
 8000fd8:	24000368 	.word	0x24000368
 8000fdc:	240003b0 	.word	0x240003b0
 8000fe0:	240003f8 	.word	0x240003f8
 8000fe4:	58020800 	.word	0x58020800
 8000fe8:	240006f8 	.word	0x240006f8
 8000fec:	24000744 	.word	0x24000744
 8000ff0:	24000790 	.word	0x24000790
 8000ff4:	40001800 	.word	0x40001800
 8000ff8:	24000000 	.word	0x24000000
 8000ffc:	40001c00 	.word	0x40001c00
 8001000:	40002000 	.word	0x40002000

        Start_PWM_MOTOR_1;
 8001004:	2100      	movs	r1, #0
 8001006:	488c      	ldr	r0, [pc, #560]	; (8001238 <homing+0x530>)
 8001008:	f009 f974 	bl	800a2f4 <HAL_TIM_PWM_Start>
        Start_PWM_MOTOR_2;
 800100c:	2100      	movs	r1, #0
 800100e:	488b      	ldr	r0, [pc, #556]	; (800123c <homing+0x534>)
 8001010:	f009 f970 	bl	800a2f4 <HAL_TIM_PWM_Start>
        Start_PWM_MOTOR_3;
 8001014:	2100      	movs	r1, #0
 8001016:	488a      	ldr	r0, [pc, #552]	; (8001240 <homing+0x538>)
 8001018:	f009 f96c 	bl	800a2f4 <HAL_TIM_PWM_Start>

        if (ES1s_PRESSED || ES2s_PRESSED || ES3s_PRESSED){
 800101c:	2101      	movs	r1, #1
 800101e:	4889      	ldr	r0, [pc, #548]	; (8001244 <homing+0x53c>)
 8001020:	f006 fbc8 	bl	80077b4 <HAL_GPIO_ReadPin>
 8001024:	4603      	mov	r3, r0
 8001026:	2b00      	cmp	r3, #0
 8001028:	d00d      	beq.n	8001046 <homing+0x33e>
 800102a:	2104      	movs	r1, #4
 800102c:	4885      	ldr	r0, [pc, #532]	; (8001244 <homing+0x53c>)
 800102e:	f006 fbc1 	bl	80077b4 <HAL_GPIO_ReadPin>
 8001032:	4603      	mov	r3, r0
 8001034:	2b00      	cmp	r3, #0
 8001036:	d006      	beq.n	8001046 <homing+0x33e>
 8001038:	2110      	movs	r1, #16
 800103a:	4882      	ldr	r0, [pc, #520]	; (8001244 <homing+0x53c>)
 800103c:	f006 fbba 	bl	80077b4 <HAL_GPIO_ReadPin>
 8001040:	4603      	mov	r3, r0
 8001042:	2b00      	cmp	r3, #0
 8001044:	d126      	bne.n	8001094 <homing+0x38c>
            HAL_Delay(30);
 8001046:	201e      	movs	r0, #30
 8001048:	f005 fb2e 	bl	80066a8 <HAL_Delay>
            if (ES1s_PRESSED || ES2s_PRESSED || ES3s_PRESSED){
 800104c:	2101      	movs	r1, #1
 800104e:	487d      	ldr	r0, [pc, #500]	; (8001244 <homing+0x53c>)
 8001050:	f006 fbb0 	bl	80077b4 <HAL_GPIO_ReadPin>
 8001054:	4603      	mov	r3, r0
 8001056:	2b00      	cmp	r3, #0
 8001058:	d00d      	beq.n	8001076 <homing+0x36e>
 800105a:	2104      	movs	r1, #4
 800105c:	4879      	ldr	r0, [pc, #484]	; (8001244 <homing+0x53c>)
 800105e:	f006 fba9 	bl	80077b4 <HAL_GPIO_ReadPin>
 8001062:	4603      	mov	r3, r0
 8001064:	2b00      	cmp	r3, #0
 8001066:	d006      	beq.n	8001076 <homing+0x36e>
 8001068:	2110      	movs	r1, #16
 800106a:	4876      	ldr	r0, [pc, #472]	; (8001244 <homing+0x53c>)
 800106c:	f006 fba2 	bl	80077b4 <HAL_GPIO_ReadPin>
 8001070:	4603      	mov	r3, r0
 8001072:	2b00      	cmp	r3, #0
 8001074:	d10e      	bne.n	8001094 <homing+0x38c>

                Stop_PWM_MOTOR_1;
 8001076:	2100      	movs	r1, #0
 8001078:	486f      	ldr	r0, [pc, #444]	; (8001238 <homing+0x530>)
 800107a:	f009 fa49 	bl	800a510 <HAL_TIM_PWM_Stop>
                Stop_PWM_MOTOR_2;
 800107e:	2100      	movs	r1, #0
 8001080:	486e      	ldr	r0, [pc, #440]	; (800123c <homing+0x534>)
 8001082:	f009 fa45 	bl	800a510 <HAL_TIM_PWM_Stop>
                Stop_PWM_MOTOR_3;
 8001086:	2100      	movs	r1, #0
 8001088:	486d      	ldr	r0, [pc, #436]	; (8001240 <homing+0x538>)
 800108a:	f009 fa41 	bl	800a510 <HAL_TIM_PWM_Stop>

                homAprox = false;
 800108e:	4b6e      	ldr	r3, [pc, #440]	; (8001248 <homing+0x540>)
 8001090:	2200      	movs	r2, #0
 8001092:	701a      	strb	r2, [r3, #0]
    while(homAprox){
 8001094:	4b6c      	ldr	r3, [pc, #432]	; (8001248 <homing+0x540>)
 8001096:	781b      	ldrb	r3, [r3, #0]
 8001098:	2b00      	cmp	r3, #0
 800109a:	d1b3      	bne.n	8001004 <homing+0x2fc>
        }
    }

    //-----------------------------------------------------------------------------

    while (!homFin){
 800109c:	e13f      	b.n	800131e <homing+0x616>

        if (ES1s_PRESSED && !motor1.hom) {
 800109e:	2101      	movs	r1, #1
 80010a0:	4868      	ldr	r0, [pc, #416]	; (8001244 <homing+0x53c>)
 80010a2:	f006 fb87 	bl	80077b4 <HAL_GPIO_ReadPin>
 80010a6:	4603      	mov	r3, r0
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d155      	bne.n	8001158 <homing+0x450>
 80010ac:	4b67      	ldr	r3, [pc, #412]	; (800124c <homing+0x544>)
 80010ae:	7e1b      	ldrb	r3, [r3, #24]
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d151      	bne.n	8001158 <homing+0x450>

            Stop_PWM_MOTOR_2;
 80010b4:	2100      	movs	r1, #0
 80010b6:	4861      	ldr	r0, [pc, #388]	; (800123c <homing+0x534>)
 80010b8:	f009 fa2a 	bl	800a510 <HAL_TIM_PWM_Stop>
            Stop_PWM_MOTOR_3;
 80010bc:	2100      	movs	r1, #0
 80010be:	4860      	ldr	r0, [pc, #384]	; (8001240 <homing+0x538>)
 80010c0:	f009 fa26 	bl	800a510 <HAL_TIM_PWM_Stop>

            HAL_Delay(30);//Delay necesario para consultar el estado del pin vinculado al ES1s
 80010c4:	201e      	movs	r0, #30
 80010c6:	f005 faef 	bl	80066a8 <HAL_Delay>

            while(ES1s_PRESSED){
 80010ca:	e010      	b.n	80010ee <homing+0x3e6>

                negative_Dir_MOTOR_1;
 80010cc:	2201      	movs	r2, #1
 80010ce:	f44f 7180 	mov.w	r1, #256	; 0x100
 80010d2:	485f      	ldr	r0, [pc, #380]	; (8001250 <homing+0x548>)
 80010d4:	f006 fb86 	bl	80077e4 <HAL_GPIO_WritePin>
                HAL_Delay(0.5); 							//delay cambio de dir
 80010d8:	2000      	movs	r0, #0
 80010da:	f005 fae5 	bl	80066a8 <HAL_Delay>
                Start_PWM_MOTOR_1;
 80010de:	2100      	movs	r1, #0
 80010e0:	4855      	ldr	r0, [pc, #340]	; (8001238 <homing+0x530>)
 80010e2:	f009 f907 	bl	800a2f4 <HAL_TIM_PWM_Start>
                HAL_Delay(500); //Lo dejamos que se mueva medio segundo en la direccion descreciente
 80010e6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80010ea:	f005 fadd 	bl	80066a8 <HAL_Delay>
            while(ES1s_PRESSED){
 80010ee:	2101      	movs	r1, #1
 80010f0:	4854      	ldr	r0, [pc, #336]	; (8001244 <homing+0x53c>)
 80010f2:	f006 fb5f 	bl	80077b4 <HAL_GPIO_ReadPin>
 80010f6:	4603      	mov	r3, r0
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d0e7      	beq.n	80010cc <homing+0x3c4>

            }

            Stop_PWM_MOTOR_1;
 80010fc:	2100      	movs	r1, #0
 80010fe:	484e      	ldr	r0, [pc, #312]	; (8001238 <homing+0x530>)
 8001100:	f009 fa06 	bl	800a510 <HAL_TIM_PWM_Stop>
            motor1.hom=true;
 8001104:	4b51      	ldr	r3, [pc, #324]	; (800124c <homing+0x544>)
 8001106:	2201      	movs	r2, #1
 8001108:	761a      	strb	r2, [r3, #24]
            HAL_UART_Transmit(&huart3,(uint8_t *)"F1\n", 4, 100);
 800110a:	2364      	movs	r3, #100	; 0x64
 800110c:	2204      	movs	r2, #4
 800110e:	4951      	ldr	r1, [pc, #324]	; (8001254 <homing+0x54c>)
 8001110:	4851      	ldr	r0, [pc, #324]	; (8001258 <homing+0x550>)
 8001112:	f00a fef5 	bl	800bf00 <HAL_UART_Transmit>
            HAL_Delay(30);
 8001116:	201e      	movs	r0, #30
 8001118:	f005 fac6 	bl	80066a8 <HAL_Delay>

            if (ES2s_UNPRESSED && !motor2.hom)Start_PWM_MOTOR_2;
 800111c:	2104      	movs	r1, #4
 800111e:	4849      	ldr	r0, [pc, #292]	; (8001244 <homing+0x53c>)
 8001120:	f006 fb48 	bl	80077b4 <HAL_GPIO_ReadPin>
 8001124:	4603      	mov	r3, r0
 8001126:	2b00      	cmp	r3, #0
 8001128:	d007      	beq.n	800113a <homing+0x432>
 800112a:	4b4c      	ldr	r3, [pc, #304]	; (800125c <homing+0x554>)
 800112c:	7e1b      	ldrb	r3, [r3, #24]
 800112e:	2b00      	cmp	r3, #0
 8001130:	d103      	bne.n	800113a <homing+0x432>
 8001132:	2100      	movs	r1, #0
 8001134:	4841      	ldr	r0, [pc, #260]	; (800123c <homing+0x534>)
 8001136:	f009 f8dd 	bl	800a2f4 <HAL_TIM_PWM_Start>
            if (ES3s_UNPRESSED && !motor3.hom)Start_PWM_MOTOR_3;
 800113a:	2110      	movs	r1, #16
 800113c:	4841      	ldr	r0, [pc, #260]	; (8001244 <homing+0x53c>)
 800113e:	f006 fb39 	bl	80077b4 <HAL_GPIO_ReadPin>
 8001142:	4603      	mov	r3, r0
 8001144:	2b00      	cmp	r3, #0
 8001146:	d007      	beq.n	8001158 <homing+0x450>
 8001148:	4b45      	ldr	r3, [pc, #276]	; (8001260 <homing+0x558>)
 800114a:	7e1b      	ldrb	r3, [r3, #24]
 800114c:	2b00      	cmp	r3, #0
 800114e:	d103      	bne.n	8001158 <homing+0x450>
 8001150:	2100      	movs	r1, #0
 8001152:	483b      	ldr	r0, [pc, #236]	; (8001240 <homing+0x538>)
 8001154:	f009 f8ce 	bl	800a2f4 <HAL_TIM_PWM_Start>


        } // ES1s_UNPRESSED : Se dejó de presionar el FC1 sup

        if (ES2s_PRESSED && !motor2.hom){
 8001158:	2104      	movs	r1, #4
 800115a:	483a      	ldr	r0, [pc, #232]	; (8001244 <homing+0x53c>)
 800115c:	f006 fb2a 	bl	80077b4 <HAL_GPIO_ReadPin>
 8001160:	4603      	mov	r3, r0
 8001162:	2b00      	cmp	r3, #0
 8001164:	d155      	bne.n	8001212 <homing+0x50a>
 8001166:	4b3d      	ldr	r3, [pc, #244]	; (800125c <homing+0x554>)
 8001168:	7e1b      	ldrb	r3, [r3, #24]
 800116a:	2b00      	cmp	r3, #0
 800116c:	d151      	bne.n	8001212 <homing+0x50a>

            Stop_PWM_MOTOR_1;
 800116e:	2100      	movs	r1, #0
 8001170:	4831      	ldr	r0, [pc, #196]	; (8001238 <homing+0x530>)
 8001172:	f009 f9cd 	bl	800a510 <HAL_TIM_PWM_Stop>
            Stop_PWM_MOTOR_3;
 8001176:	2100      	movs	r1, #0
 8001178:	4831      	ldr	r0, [pc, #196]	; (8001240 <homing+0x538>)
 800117a:	f009 f9c9 	bl	800a510 <HAL_TIM_PWM_Stop>

            HAL_Delay(30);//Delay necesario para consultar el estado del pin vinculado al ES2s
 800117e:	201e      	movs	r0, #30
 8001180:	f005 fa92 	bl	80066a8 <HAL_Delay>

            while(ES2s_PRESSED){
 8001184:	e010      	b.n	80011a8 <homing+0x4a0>

                negative_Dir_MOTOR_2;
 8001186:	2201      	movs	r2, #1
 8001188:	f44f 7100 	mov.w	r1, #512	; 0x200
 800118c:	4830      	ldr	r0, [pc, #192]	; (8001250 <homing+0x548>)
 800118e:	f006 fb29 	bl	80077e4 <HAL_GPIO_WritePin>
                HAL_Delay(0.5);
 8001192:	2000      	movs	r0, #0
 8001194:	f005 fa88 	bl	80066a8 <HAL_Delay>
                Start_PWM_MOTOR_2;
 8001198:	2100      	movs	r1, #0
 800119a:	4828      	ldr	r0, [pc, #160]	; (800123c <homing+0x534>)
 800119c:	f009 f8aa 	bl	800a2f4 <HAL_TIM_PWM_Start>
                HAL_Delay(500);
 80011a0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80011a4:	f005 fa80 	bl	80066a8 <HAL_Delay>
            while(ES2s_PRESSED){
 80011a8:	2104      	movs	r1, #4
 80011aa:	4826      	ldr	r0, [pc, #152]	; (8001244 <homing+0x53c>)
 80011ac:	f006 fb02 	bl	80077b4 <HAL_GPIO_ReadPin>
 80011b0:	4603      	mov	r3, r0
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d0e7      	beq.n	8001186 <homing+0x47e>

            }

            Stop_PWM_MOTOR_2;
 80011b6:	2100      	movs	r1, #0
 80011b8:	4820      	ldr	r0, [pc, #128]	; (800123c <homing+0x534>)
 80011ba:	f009 f9a9 	bl	800a510 <HAL_TIM_PWM_Stop>
            motor2.hom=true;
 80011be:	4b27      	ldr	r3, [pc, #156]	; (800125c <homing+0x554>)
 80011c0:	2201      	movs	r2, #1
 80011c2:	761a      	strb	r2, [r3, #24]
            HAL_UART_Transmit(&huart3,(uint8_t *)"F2\n", 4, 100);
 80011c4:	2364      	movs	r3, #100	; 0x64
 80011c6:	2204      	movs	r2, #4
 80011c8:	4926      	ldr	r1, [pc, #152]	; (8001264 <homing+0x55c>)
 80011ca:	4823      	ldr	r0, [pc, #140]	; (8001258 <homing+0x550>)
 80011cc:	f00a fe98 	bl	800bf00 <HAL_UART_Transmit>
            HAL_Delay(30);
 80011d0:	201e      	movs	r0, #30
 80011d2:	f005 fa69 	bl	80066a8 <HAL_Delay>

            if (ES1s_UNPRESSED && !motor1.hom)Start_PWM_MOTOR_1;
 80011d6:	2101      	movs	r1, #1
 80011d8:	481a      	ldr	r0, [pc, #104]	; (8001244 <homing+0x53c>)
 80011da:	f006 faeb 	bl	80077b4 <HAL_GPIO_ReadPin>
 80011de:	4603      	mov	r3, r0
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d007      	beq.n	80011f4 <homing+0x4ec>
 80011e4:	4b19      	ldr	r3, [pc, #100]	; (800124c <homing+0x544>)
 80011e6:	7e1b      	ldrb	r3, [r3, #24]
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d103      	bne.n	80011f4 <homing+0x4ec>
 80011ec:	2100      	movs	r1, #0
 80011ee:	4812      	ldr	r0, [pc, #72]	; (8001238 <homing+0x530>)
 80011f0:	f009 f880 	bl	800a2f4 <HAL_TIM_PWM_Start>
            if (ES3s_UNPRESSED && !motor3.hom)Start_PWM_MOTOR_3;
 80011f4:	2110      	movs	r1, #16
 80011f6:	4813      	ldr	r0, [pc, #76]	; (8001244 <homing+0x53c>)
 80011f8:	f006 fadc 	bl	80077b4 <HAL_GPIO_ReadPin>
 80011fc:	4603      	mov	r3, r0
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d007      	beq.n	8001212 <homing+0x50a>
 8001202:	4b17      	ldr	r3, [pc, #92]	; (8001260 <homing+0x558>)
 8001204:	7e1b      	ldrb	r3, [r3, #24]
 8001206:	2b00      	cmp	r3, #0
 8001208:	d103      	bne.n	8001212 <homing+0x50a>
 800120a:	2100      	movs	r1, #0
 800120c:	480c      	ldr	r0, [pc, #48]	; (8001240 <homing+0x538>)
 800120e:	f009 f871 	bl	800a2f4 <HAL_TIM_PWM_Start>

        }// ES2s_UNPRESSED : Se dejó de presionar el FC2 sup


        if (ES3s_PRESSED){
 8001212:	2110      	movs	r1, #16
 8001214:	480b      	ldr	r0, [pc, #44]	; (8001244 <homing+0x53c>)
 8001216:	f006 facd 	bl	80077b4 <HAL_GPIO_ReadPin>
 800121a:	4603      	mov	r3, r0
 800121c:	2b00      	cmp	r3, #0
 800121e:	d169      	bne.n	80012f4 <homing+0x5ec>

            Stop_PWM_MOTOR_1;
 8001220:	2100      	movs	r1, #0
 8001222:	4805      	ldr	r0, [pc, #20]	; (8001238 <homing+0x530>)
 8001224:	f009 f974 	bl	800a510 <HAL_TIM_PWM_Stop>
            Stop_PWM_MOTOR_2;
 8001228:	2100      	movs	r1, #0
 800122a:	4804      	ldr	r0, [pc, #16]	; (800123c <homing+0x534>)
 800122c:	f009 f970 	bl	800a510 <HAL_TIM_PWM_Stop>

            HAL_Delay(30);//Delay necesario para consultar el estado del pin vinculado al ES3s
 8001230:	201e      	movs	r0, #30
 8001232:	f005 fa39 	bl	80066a8 <HAL_Delay>

            while(ES3s_PRESSED){
 8001236:	e028      	b.n	800128a <homing+0x582>
 8001238:	240006f8 	.word	0x240006f8
 800123c:	24000744 	.word	0x24000744
 8001240:	24000790 	.word	0x24000790
 8001244:	58021000 	.word	0x58021000
 8001248:	2400027c 	.word	0x2400027c
 800124c:	24000368 	.word	0x24000368
 8001250:	58020800 	.word	0x58020800
 8001254:	08012158 	.word	0x08012158
 8001258:	24000a00 	.word	0x24000a00
 800125c:	240003b0 	.word	0x240003b0
 8001260:	240003f8 	.word	0x240003f8
 8001264:	0801215c 	.word	0x0801215c

                negative_Dir_MOTOR_3;
 8001268:	2201      	movs	r2, #1
 800126a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800126e:	4830      	ldr	r0, [pc, #192]	; (8001330 <homing+0x628>)
 8001270:	f006 fab8 	bl	80077e4 <HAL_GPIO_WritePin>
                HAL_Delay(0.5);
 8001274:	2000      	movs	r0, #0
 8001276:	f005 fa17 	bl	80066a8 <HAL_Delay>
                Start_PWM_MOTOR_3;
 800127a:	2100      	movs	r1, #0
 800127c:	482d      	ldr	r0, [pc, #180]	; (8001334 <homing+0x62c>)
 800127e:	f009 f839 	bl	800a2f4 <HAL_TIM_PWM_Start>
                HAL_Delay(500);
 8001282:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001286:	f005 fa0f 	bl	80066a8 <HAL_Delay>
            while(ES3s_PRESSED){
 800128a:	2110      	movs	r1, #16
 800128c:	482a      	ldr	r0, [pc, #168]	; (8001338 <homing+0x630>)
 800128e:	f006 fa91 	bl	80077b4 <HAL_GPIO_ReadPin>
 8001292:	4603      	mov	r3, r0
 8001294:	2b00      	cmp	r3, #0
 8001296:	d0e7      	beq.n	8001268 <homing+0x560>
            }

            Stop_PWM_MOTOR_3;
 8001298:	2100      	movs	r1, #0
 800129a:	4826      	ldr	r0, [pc, #152]	; (8001334 <homing+0x62c>)
 800129c:	f009 f938 	bl	800a510 <HAL_TIM_PWM_Stop>
            motor3.hom = true;
 80012a0:	4b26      	ldr	r3, [pc, #152]	; (800133c <homing+0x634>)
 80012a2:	2201      	movs	r2, #1
 80012a4:	761a      	strb	r2, [r3, #24]
            HAL_UART_Transmit(&huart3,(uint8_t *)"F3\n", 4, 100);
 80012a6:	2364      	movs	r3, #100	; 0x64
 80012a8:	2204      	movs	r2, #4
 80012aa:	4925      	ldr	r1, [pc, #148]	; (8001340 <homing+0x638>)
 80012ac:	4825      	ldr	r0, [pc, #148]	; (8001344 <homing+0x63c>)
 80012ae:	f00a fe27 	bl	800bf00 <HAL_UART_Transmit>
			HAL_Delay(30);
 80012b2:	201e      	movs	r0, #30
 80012b4:	f005 f9f8 	bl	80066a8 <HAL_Delay>
            if (ES1s_UNPRESSED && !motor1.hom)Start_PWM_MOTOR_1;
 80012b8:	2101      	movs	r1, #1
 80012ba:	481f      	ldr	r0, [pc, #124]	; (8001338 <homing+0x630>)
 80012bc:	f006 fa7a 	bl	80077b4 <HAL_GPIO_ReadPin>
 80012c0:	4603      	mov	r3, r0
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d007      	beq.n	80012d6 <homing+0x5ce>
 80012c6:	4b20      	ldr	r3, [pc, #128]	; (8001348 <homing+0x640>)
 80012c8:	7e1b      	ldrb	r3, [r3, #24]
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d103      	bne.n	80012d6 <homing+0x5ce>
 80012ce:	2100      	movs	r1, #0
 80012d0:	481e      	ldr	r0, [pc, #120]	; (800134c <homing+0x644>)
 80012d2:	f009 f80f 	bl	800a2f4 <HAL_TIM_PWM_Start>
            if (ES2s_UNPRESSED && !motor2.hom)Start_PWM_MOTOR_2;
 80012d6:	2104      	movs	r1, #4
 80012d8:	4817      	ldr	r0, [pc, #92]	; (8001338 <homing+0x630>)
 80012da:	f006 fa6b 	bl	80077b4 <HAL_GPIO_ReadPin>
 80012de:	4603      	mov	r3, r0
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d007      	beq.n	80012f4 <homing+0x5ec>
 80012e4:	4b1a      	ldr	r3, [pc, #104]	; (8001350 <homing+0x648>)
 80012e6:	7e1b      	ldrb	r3, [r3, #24]
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d103      	bne.n	80012f4 <homing+0x5ec>
 80012ec:	2100      	movs	r1, #0
 80012ee:	4819      	ldr	r0, [pc, #100]	; (8001354 <homing+0x64c>)
 80012f0:	f009 f800 	bl	800a2f4 <HAL_TIM_PWM_Start>
        }// ES3s_UNPRESSED : Se dejó de presionar el FC3 sup



        if (motor1.hom && motor2.hom && motor3.hom){
 80012f4:	4b14      	ldr	r3, [pc, #80]	; (8001348 <homing+0x640>)
 80012f6:	7e1b      	ldrb	r3, [r3, #24]
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d010      	beq.n	800131e <homing+0x616>
 80012fc:	4b14      	ldr	r3, [pc, #80]	; (8001350 <homing+0x648>)
 80012fe:	7e1b      	ldrb	r3, [r3, #24]
 8001300:	2b00      	cmp	r3, #0
 8001302:	d00c      	beq.n	800131e <homing+0x616>
 8001304:	4b0d      	ldr	r3, [pc, #52]	; (800133c <homing+0x634>)
 8001306:	7e1b      	ldrb	r3, [r3, #24]
 8001308:	2b00      	cmp	r3, #0
 800130a:	d008      	beq.n	800131e <homing+0x616>
        	homFin=true;
 800130c:	4b12      	ldr	r3, [pc, #72]	; (8001358 <homing+0x650>)
 800130e:	2201      	movs	r2, #1
 8001310:	701a      	strb	r2, [r3, #0]
        	HAL_UART_Transmit(&huart3,(uint8_t *)"FH\n", 4, 100);
 8001312:	2364      	movs	r3, #100	; 0x64
 8001314:	2204      	movs	r2, #4
 8001316:	4911      	ldr	r1, [pc, #68]	; (800135c <homing+0x654>)
 8001318:	480a      	ldr	r0, [pc, #40]	; (8001344 <homing+0x63c>)
 800131a:	f00a fdf1 	bl	800bf00 <HAL_UART_Transmit>
    while (!homFin){
 800131e:	4b0e      	ldr	r3, [pc, #56]	; (8001358 <homing+0x650>)
 8001320:	781b      	ldrb	r3, [r3, #0]
 8001322:	2b00      	cmp	r3, #0
 8001324:	f43f aebb 	beq.w	800109e <homing+0x396>
        }
       }


    }
 8001328:	bf00      	nop
 800132a:	bf00      	nop
 800132c:	bd80      	pop	{r7, pc}
 800132e:	bf00      	nop
 8001330:	58020800 	.word	0x58020800
 8001334:	24000790 	.word	0x24000790
 8001338:	58021000 	.word	0x58021000
 800133c:	240003f8 	.word	0x240003f8
 8001340:	08012160 	.word	0x08012160
 8001344:	24000a00 	.word	0x24000a00
 8001348:	24000368 	.word	0x24000368
 800134c:	240006f8 	.word	0x240006f8
 8001350:	240003b0 	.word	0x240003b0
 8001354:	24000744 	.word	0x24000744
 8001358:	24000459 	.word	0x24000459
 800135c:	08012164 	.word	0x08012164

08001360 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8001360:	b480      	push	{r7}
 8001362:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001364:	f3bf 8f4f 	dsb	sy
}
 8001368:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800136a:	4b06      	ldr	r3, [pc, #24]	; (8001384 <__NVIC_SystemReset+0x24>)
 800136c:	68db      	ldr	r3, [r3, #12]
 800136e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8001372:	4904      	ldr	r1, [pc, #16]	; (8001384 <__NVIC_SystemReset+0x24>)
 8001374:	4b04      	ldr	r3, [pc, #16]	; (8001388 <__NVIC_SystemReset+0x28>)
 8001376:	4313      	orrs	r3, r2
 8001378:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800137a:	f3bf 8f4f 	dsb	sy
}
 800137e:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8001380:	bf00      	nop
 8001382:	e7fd      	b.n	8001380 <__NVIC_SystemReset+0x20>
 8001384:	e000ed00 	.word	0xe000ed00
 8001388:	05fa0004 	.word	0x05fa0004

0800138c <interpretaComando>:

bool newline_detected = false;
volatile double aux;
uint8_t auxString[10];

void interpretaComando(void){
 800138c:	b580      	push	{r7, lr}
 800138e:	b084      	sub	sp, #16
 8001390:	af00      	add	r7, sp, #0

	switch(rx_buffer[0]){
 8001392:	4baa      	ldr	r3, [pc, #680]	; (800163c <interpretaComando+0x2b0>)
 8001394:	781b      	ldrb	r3, [r3, #0]
 8001396:	3b44      	subs	r3, #68	; 0x44
 8001398:	2b2e      	cmp	r3, #46	; 0x2e
 800139a:	f200 814a 	bhi.w	8001632 <interpretaComando+0x2a6>
 800139e:	a201      	add	r2, pc, #4	; (adr r2, 80013a4 <interpretaComando+0x18>)
 80013a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013a4:	08001625 	.word	0x08001625
 80013a8:	08001633 	.word	0x08001633
 80013ac:	08001633 	.word	0x08001633
 80013b0:	08001633 	.word	0x08001633
 80013b4:	08001461 	.word	0x08001461
 80013b8:	08001633 	.word	0x08001633
 80013bc:	08001633 	.word	0x08001633
 80013c0:	08001633 	.word	0x08001633
 80013c4:	08001633 	.word	0x08001633
 80013c8:	08001633 	.word	0x08001633
 80013cc:	08001633 	.word	0x08001633
 80013d0:	08001633 	.word	0x08001633
 80013d4:	08001469 	.word	0x08001469
 80013d8:	08001633 	.word	0x08001633
 80013dc:	08001615 	.word	0x08001615
 80013e0:	08001633 	.word	0x08001633
 80013e4:	08001633 	.word	0x08001633
 80013e8:	08001633 	.word	0x08001633
 80013ec:	08001633 	.word	0x08001633
 80013f0:	08001633 	.word	0x08001633
 80013f4:	08001633 	.word	0x08001633
 80013f8:	08001633 	.word	0x08001633
 80013fc:	08001633 	.word	0x08001633
 8001400:	08001633 	.word	0x08001633
 8001404:	08001633 	.word	0x08001633
 8001408:	08001633 	.word	0x08001633
 800140c:	08001633 	.word	0x08001633
 8001410:	08001633 	.word	0x08001633
 8001414:	08001633 	.word	0x08001633
 8001418:	08001633 	.word	0x08001633
 800141c:	08001633 	.word	0x08001633
 8001420:	08001633 	.word	0x08001633
 8001424:	08001625 	.word	0x08001625
 8001428:	08001633 	.word	0x08001633
 800142c:	08001633 	.word	0x08001633
 8001430:	08001633 	.word	0x08001633
 8001434:	08001461 	.word	0x08001461
 8001438:	08001633 	.word	0x08001633
 800143c:	08001633 	.word	0x08001633
 8001440:	08001633 	.word	0x08001633
 8001444:	08001633 	.word	0x08001633
 8001448:	08001633 	.word	0x08001633
 800144c:	08001633 	.word	0x08001633
 8001450:	08001633 	.word	0x08001633
 8001454:	08001469 	.word	0x08001469
 8001458:	08001633 	.word	0x08001633
 800145c:	08001615 	.word	0x08001615


	case 'H':
	case 'h':
		state = HOME;
 8001460:	4b77      	ldr	r3, [pc, #476]	; (8001640 <interpretaComando+0x2b4>)
 8001462:	2203      	movs	r2, #3
 8001464:	701a      	strb	r2, [r3, #0]
	break;
 8001466:	e0e5      	b.n	8001634 <interpretaComando+0x2a8>

	case 'P':												//:Px0.1 y0.1 z-0.5 \0 (Eje, valor, espacio, Eje, valor, espacio, Eje, valor)
	case 'p':

		flagErrorEndStop = 0;
 8001468:	4976      	ldr	r1, [pc, #472]	; (8001644 <interpretaComando+0x2b8>)
 800146a:	f04f 0200 	mov.w	r2, #0
 800146e:	f04f 0300 	mov.w	r3, #0
 8001472:	e9c1 2300 	strd	r2, r3, [r1]
		uint8_t i = 1;
 8001476:	2301      	movs	r3, #1
 8001478:	73fb      	strb	r3, [r7, #15]
		uint8_t j = 0;
 800147a:	2300      	movs	r3, #0
 800147c:	73bb      	strb	r3, [r7, #14]
		while(rx_buffer[i] != 0 && !newline_detected){
 800147e:	e0bb      	b.n	80015f8 <interpretaComando+0x26c>
			if(rx_buffer[i] == 'x'){
 8001480:	7bfb      	ldrb	r3, [r7, #15]
 8001482:	4a6e      	ldr	r2, [pc, #440]	; (800163c <interpretaComando+0x2b0>)
 8001484:	5cd3      	ldrb	r3, [r2, r3]
 8001486:	2b78      	cmp	r3, #120	; 0x78
 8001488:	d133      	bne.n	80014f2 <interpretaComando+0x166>
				while(rx_buffer[i+1] != ' '){			//Almacenar dato en buffer hasta que se encuentre un espacio
 800148a:	e00c      	b.n	80014a6 <interpretaComando+0x11a>
					auxString[j] = rx_buffer[i+1];
 800148c:	7bfb      	ldrb	r3, [r7, #15]
 800148e:	1c5a      	adds	r2, r3, #1
 8001490:	7bbb      	ldrb	r3, [r7, #14]
 8001492:	496a      	ldr	r1, [pc, #424]	; (800163c <interpretaComando+0x2b0>)
 8001494:	5c89      	ldrb	r1, [r1, r2]
 8001496:	4a6c      	ldr	r2, [pc, #432]	; (8001648 <interpretaComando+0x2bc>)
 8001498:	54d1      	strb	r1, [r2, r3]
					j++;
 800149a:	7bbb      	ldrb	r3, [r7, #14]
 800149c:	3301      	adds	r3, #1
 800149e:	73bb      	strb	r3, [r7, #14]
					i++;
 80014a0:	7bfb      	ldrb	r3, [r7, #15]
 80014a2:	3301      	adds	r3, #1
 80014a4:	73fb      	strb	r3, [r7, #15]
				while(rx_buffer[i+1] != ' '){			//Almacenar dato en buffer hasta que se encuentre un espacio
 80014a6:	7bfb      	ldrb	r3, [r7, #15]
 80014a8:	3301      	adds	r3, #1
 80014aa:	4a64      	ldr	r2, [pc, #400]	; (800163c <interpretaComando+0x2b0>)
 80014ac:	5cd3      	ldrb	r3, [r2, r3]
 80014ae:	2b20      	cmp	r3, #32
 80014b0:	d1ec      	bne.n	800148c <interpretaComando+0x100>
				}
				Pfin.x = strtod(&auxString[0], NULL);
 80014b2:	2100      	movs	r1, #0
 80014b4:	4864      	ldr	r0, [pc, #400]	; (8001648 <interpretaComando+0x2bc>)
 80014b6:	f00e fc75 	bl	800fda4 <strtod>
 80014ba:	eeb0 7b40 	vmov.f64	d7, d0
 80014be:	4b63      	ldr	r3, [pc, #396]	; (800164c <interpretaComando+0x2c0>)
 80014c0:	ed83 7b00 	vstr	d7, [r3]
				for (int k = 0; k <= 10; k++) {
 80014c4:	2300      	movs	r3, #0
 80014c6:	60bb      	str	r3, [r7, #8]
 80014c8:	e007      	b.n	80014da <interpretaComando+0x14e>
					auxString[k] = 0;
 80014ca:	4a5f      	ldr	r2, [pc, #380]	; (8001648 <interpretaComando+0x2bc>)
 80014cc:	68bb      	ldr	r3, [r7, #8]
 80014ce:	4413      	add	r3, r2
 80014d0:	2200      	movs	r2, #0
 80014d2:	701a      	strb	r2, [r3, #0]
				for (int k = 0; k <= 10; k++) {
 80014d4:	68bb      	ldr	r3, [r7, #8]
 80014d6:	3301      	adds	r3, #1
 80014d8:	60bb      	str	r3, [r7, #8]
 80014da:	68bb      	ldr	r3, [r7, #8]
 80014dc:	2b0a      	cmp	r3, #10
 80014de:	ddf4      	ble.n	80014ca <interpretaComando+0x13e>
				}
				j=0;
 80014e0:	2300      	movs	r3, #0
 80014e2:	73bb      	strb	r3, [r7, #14]
				HAL_UART_Transmit(&huart3, (uint8_t *)"Px_ok\n", 7, 100);
 80014e4:	2364      	movs	r3, #100	; 0x64
 80014e6:	2207      	movs	r2, #7
 80014e8:	4959      	ldr	r1, [pc, #356]	; (8001650 <interpretaComando+0x2c4>)
 80014ea:	485a      	ldr	r0, [pc, #360]	; (8001654 <interpretaComando+0x2c8>)
 80014ec:	f00a fd08 	bl	800bf00 <HAL_UART_Transmit>
 80014f0:	e07f      	b.n	80015f2 <interpretaComando+0x266>
			}
			else if(rx_buffer[i] == 'y'){
 80014f2:	7bfb      	ldrb	r3, [r7, #15]
 80014f4:	4a51      	ldr	r2, [pc, #324]	; (800163c <interpretaComando+0x2b0>)
 80014f6:	5cd3      	ldrb	r3, [r2, r3]
 80014f8:	2b79      	cmp	r3, #121	; 0x79
 80014fa:	d133      	bne.n	8001564 <interpretaComando+0x1d8>
				while(rx_buffer[i+1] != ' '){			//Almacenar dato en buffer hasta que se encuentre un espacio
 80014fc:	e00c      	b.n	8001518 <interpretaComando+0x18c>
					auxString[j] = rx_buffer[i+1];
 80014fe:	7bfb      	ldrb	r3, [r7, #15]
 8001500:	1c5a      	adds	r2, r3, #1
 8001502:	7bbb      	ldrb	r3, [r7, #14]
 8001504:	494d      	ldr	r1, [pc, #308]	; (800163c <interpretaComando+0x2b0>)
 8001506:	5c89      	ldrb	r1, [r1, r2]
 8001508:	4a4f      	ldr	r2, [pc, #316]	; (8001648 <interpretaComando+0x2bc>)
 800150a:	54d1      	strb	r1, [r2, r3]
					j++;
 800150c:	7bbb      	ldrb	r3, [r7, #14]
 800150e:	3301      	adds	r3, #1
 8001510:	73bb      	strb	r3, [r7, #14]
					i++;
 8001512:	7bfb      	ldrb	r3, [r7, #15]
 8001514:	3301      	adds	r3, #1
 8001516:	73fb      	strb	r3, [r7, #15]
				while(rx_buffer[i+1] != ' '){			//Almacenar dato en buffer hasta que se encuentre un espacio
 8001518:	7bfb      	ldrb	r3, [r7, #15]
 800151a:	3301      	adds	r3, #1
 800151c:	4a47      	ldr	r2, [pc, #284]	; (800163c <interpretaComando+0x2b0>)
 800151e:	5cd3      	ldrb	r3, [r2, r3]
 8001520:	2b20      	cmp	r3, #32
 8001522:	d1ec      	bne.n	80014fe <interpretaComando+0x172>
				}
				Pfin.y = strtod(&auxString[0], NULL);
 8001524:	2100      	movs	r1, #0
 8001526:	4848      	ldr	r0, [pc, #288]	; (8001648 <interpretaComando+0x2bc>)
 8001528:	f00e fc3c 	bl	800fda4 <strtod>
 800152c:	eeb0 7b40 	vmov.f64	d7, d0
 8001530:	4b46      	ldr	r3, [pc, #280]	; (800164c <interpretaComando+0x2c0>)
 8001532:	ed83 7b02 	vstr	d7, [r3, #8]
				for (int k = 0; k <= 10; k++) {
 8001536:	2300      	movs	r3, #0
 8001538:	607b      	str	r3, [r7, #4]
 800153a:	e007      	b.n	800154c <interpretaComando+0x1c0>
					auxString[k] = 0;
 800153c:	4a42      	ldr	r2, [pc, #264]	; (8001648 <interpretaComando+0x2bc>)
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	4413      	add	r3, r2
 8001542:	2200      	movs	r2, #0
 8001544:	701a      	strb	r2, [r3, #0]
				for (int k = 0; k <= 10; k++) {
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	3301      	adds	r3, #1
 800154a:	607b      	str	r3, [r7, #4]
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	2b0a      	cmp	r3, #10
 8001550:	ddf4      	ble.n	800153c <interpretaComando+0x1b0>
				}
				j=0;
 8001552:	2300      	movs	r3, #0
 8001554:	73bb      	strb	r3, [r7, #14]
				HAL_UART_Transmit(&huart3,(uint8_t *)"Py_ok\n", 7, 100);
 8001556:	2364      	movs	r3, #100	; 0x64
 8001558:	2207      	movs	r2, #7
 800155a:	493f      	ldr	r1, [pc, #252]	; (8001658 <interpretaComando+0x2cc>)
 800155c:	483d      	ldr	r0, [pc, #244]	; (8001654 <interpretaComando+0x2c8>)
 800155e:	f00a fccf 	bl	800bf00 <HAL_UART_Transmit>
 8001562:	e046      	b.n	80015f2 <interpretaComando+0x266>
			}
			else if(rx_buffer[i] == 'z'){
 8001564:	7bfb      	ldrb	r3, [r7, #15]
 8001566:	4a35      	ldr	r2, [pc, #212]	; (800163c <interpretaComando+0x2b0>)
 8001568:	5cd3      	ldrb	r3, [r2, r3]
 800156a:	2b7a      	cmp	r3, #122	; 0x7a
 800156c:	d141      	bne.n	80015f2 <interpretaComando+0x266>
				while(rx_buffer[i+1] != '\n' && rx_buffer[i+1] != 0){			//Almacenar dato en buffer hasta que se encuentre un espacio
 800156e:	e00c      	b.n	800158a <interpretaComando+0x1fe>
					auxString[j] = rx_buffer[i+1];
 8001570:	7bfb      	ldrb	r3, [r7, #15]
 8001572:	1c5a      	adds	r2, r3, #1
 8001574:	7bbb      	ldrb	r3, [r7, #14]
 8001576:	4931      	ldr	r1, [pc, #196]	; (800163c <interpretaComando+0x2b0>)
 8001578:	5c89      	ldrb	r1, [r1, r2]
 800157a:	4a33      	ldr	r2, [pc, #204]	; (8001648 <interpretaComando+0x2bc>)
 800157c:	54d1      	strb	r1, [r2, r3]
					j++;
 800157e:	7bbb      	ldrb	r3, [r7, #14]
 8001580:	3301      	adds	r3, #1
 8001582:	73bb      	strb	r3, [r7, #14]
					i++;
 8001584:	7bfb      	ldrb	r3, [r7, #15]
 8001586:	3301      	adds	r3, #1
 8001588:	73fb      	strb	r3, [r7, #15]
				while(rx_buffer[i+1] != '\n' && rx_buffer[i+1] != 0){			//Almacenar dato en buffer hasta que se encuentre un espacio
 800158a:	7bfb      	ldrb	r3, [r7, #15]
 800158c:	3301      	adds	r3, #1
 800158e:	4a2b      	ldr	r2, [pc, #172]	; (800163c <interpretaComando+0x2b0>)
 8001590:	5cd3      	ldrb	r3, [r2, r3]
 8001592:	2b0a      	cmp	r3, #10
 8001594:	d005      	beq.n	80015a2 <interpretaComando+0x216>
 8001596:	7bfb      	ldrb	r3, [r7, #15]
 8001598:	3301      	adds	r3, #1
 800159a:	4a28      	ldr	r2, [pc, #160]	; (800163c <interpretaComando+0x2b0>)
 800159c:	5cd3      	ldrb	r3, [r2, r3]
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d1e6      	bne.n	8001570 <interpretaComando+0x1e4>
				}
				Pfin.z = strtod(&auxString[0], NULL);
 80015a2:	2100      	movs	r1, #0
 80015a4:	4828      	ldr	r0, [pc, #160]	; (8001648 <interpretaComando+0x2bc>)
 80015a6:	f00e fbfd 	bl	800fda4 <strtod>
 80015aa:	eeb0 7b40 	vmov.f64	d7, d0
 80015ae:	4b27      	ldr	r3, [pc, #156]	; (800164c <interpretaComando+0x2c0>)
 80015b0:	ed83 7b04 	vstr	d7, [r3, #16]
				for (int k = 0; k <= 10; k++) {
 80015b4:	2300      	movs	r3, #0
 80015b6:	603b      	str	r3, [r7, #0]
 80015b8:	e007      	b.n	80015ca <interpretaComando+0x23e>
					auxString[k] = 0;
 80015ba:	4a23      	ldr	r2, [pc, #140]	; (8001648 <interpretaComando+0x2bc>)
 80015bc:	683b      	ldr	r3, [r7, #0]
 80015be:	4413      	add	r3, r2
 80015c0:	2200      	movs	r2, #0
 80015c2:	701a      	strb	r2, [r3, #0]
				for (int k = 0; k <= 10; k++) {
 80015c4:	683b      	ldr	r3, [r7, #0]
 80015c6:	3301      	adds	r3, #1
 80015c8:	603b      	str	r3, [r7, #0]
 80015ca:	683b      	ldr	r3, [r7, #0]
 80015cc:	2b0a      	cmp	r3, #10
 80015ce:	ddf4      	ble.n	80015ba <interpretaComando+0x22e>
				}
				j=0;
 80015d0:	2300      	movs	r3, #0
 80015d2:	73bb      	strb	r3, [r7, #14]
				HAL_UART_Transmit(&huart3,(uint8_t *)"Pz_ok\n", 7, 100);
 80015d4:	2364      	movs	r3, #100	; 0x64
 80015d6:	2207      	movs	r2, #7
 80015d8:	4920      	ldr	r1, [pc, #128]	; (800165c <interpretaComando+0x2d0>)
 80015da:	481e      	ldr	r0, [pc, #120]	; (8001654 <interpretaComando+0x2c8>)
 80015dc:	f00a fc90 	bl	800bf00 <HAL_UART_Transmit>
				if(rx_buffer[i+1] == '\n'){	//Detectar salto de línea
 80015e0:	7bfb      	ldrb	r3, [r7, #15]
 80015e2:	3301      	adds	r3, #1
 80015e4:	4a15      	ldr	r2, [pc, #84]	; (800163c <interpretaComando+0x2b0>)
 80015e6:	5cd3      	ldrb	r3, [r2, r3]
 80015e8:	2b0a      	cmp	r3, #10
 80015ea:	d102      	bne.n	80015f2 <interpretaComando+0x266>
				    newline_detected = true;
 80015ec:	4b1c      	ldr	r3, [pc, #112]	; (8001660 <interpretaComando+0x2d4>)
 80015ee:	2201      	movs	r2, #1
 80015f0:	701a      	strb	r2, [r3, #0]
				}
			}
			i++;
 80015f2:	7bfb      	ldrb	r3, [r7, #15]
 80015f4:	3301      	adds	r3, #1
 80015f6:	73fb      	strb	r3, [r7, #15]
		while(rx_buffer[i] != 0 && !newline_detected){
 80015f8:	7bfb      	ldrb	r3, [r7, #15]
 80015fa:	4a10      	ldr	r2, [pc, #64]	; (800163c <interpretaComando+0x2b0>)
 80015fc:	5cd3      	ldrb	r3, [r2, r3]
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d004      	beq.n	800160c <interpretaComando+0x280>
 8001602:	4b17      	ldr	r3, [pc, #92]	; (8001660 <interpretaComando+0x2d4>)
 8001604:	781b      	ldrb	r3, [r3, #0]
 8001606:	2b00      	cmp	r3, #0
 8001608:	f43f af3a 	beq.w	8001480 <interpretaComando+0xf4>
		}

		receptionFlag = true;
 800160c:	4b15      	ldr	r3, [pc, #84]	; (8001664 <interpretaComando+0x2d8>)
 800160e:	2201      	movs	r2, #1
 8001610:	701a      	strb	r2, [r3, #0]
		break;
 8001612:	e00f      	b.n	8001634 <interpretaComando+0x2a8>


	case 'r':
	case 'R':
		HAL_UART_Transmit(&huart3, (uint8_t *)"Resetting...\n", 14, 100);
 8001614:	2364      	movs	r3, #100	; 0x64
 8001616:	220e      	movs	r2, #14
 8001618:	4913      	ldr	r1, [pc, #76]	; (8001668 <interpretaComando+0x2dc>)
 800161a:	480e      	ldr	r0, [pc, #56]	; (8001654 <interpretaComando+0x2c8>)
 800161c:	f00a fc70 	bl	800bf00 <HAL_UART_Transmit>
		NVIC_SystemReset();
 8001620:	f7ff fe9e 	bl	8001360 <__NVIC_SystemReset>

		break;

	case 'd':
	case 'D':
		readFile = true;
 8001624:	4b11      	ldr	r3, [pc, #68]	; (800166c <interpretaComando+0x2e0>)
 8001626:	2201      	movs	r2, #1
 8001628:	701a      	strb	r2, [r3, #0]
		state = DEMO;
 800162a:	4b05      	ldr	r3, [pc, #20]	; (8001640 <interpretaComando+0x2b4>)
 800162c:	2204      	movs	r2, #4
 800162e:	701a      	strb	r2, [r3, #0]
		break;
 8001630:	e000      	b.n	8001634 <interpretaComando+0x2a8>

	default:break;
 8001632:	bf00      	nop


	}

}
 8001634:	bf00      	nop
 8001636:	3710      	adds	r7, #16
 8001638:	46bd      	mov	sp, r7
 800163a:	bd80      	pop	{r7, pc}
 800163c:	2400057c 	.word	0x2400057c
 8001640:	24000458 	.word	0x24000458
 8001644:	24000448 	.word	0x24000448
 8001648:	24000280 	.word	0x24000280
 800164c:	240004b8 	.word	0x240004b8
 8001650:	08012168 	.word	0x08012168
 8001654:	24000a00 	.word	0x24000a00
 8001658:	08012170 	.word	0x08012170
 800165c:	08012178 	.word	0x08012178
 8001660:	2400027e 	.word	0x2400027e
 8001664:	2400059b 	.word	0x2400059b
 8001668:	08012180 	.word	0x08012180
 800166c:	2400059c 	.word	0x2400059c

08001670 <inverseKinematic>:
double A1, B1, C1, XJ1_1, XJ1_2, YJ1_1, YJ1_2, ZJ1_1, ZJ1_2, A11, A12, A13, A14, A15;
double A2, B2, C2, XJ2_1, XJ2_2, YJ2_1, YJ2_2, ZJ2_1, ZJ2_2;
double A3, B3, C3, XJ3_1, XJ3_2, YJ3_1, YJ3_2, ZJ3_1, ZJ3_2;


void inverseKinematic(Vec3D _Pfin) {
 8001670:	b580      	push	{r7, lr}
 8001672:	ed2d 8b04 	vpush	{d8-d9}
 8001676:	b086      	sub	sp, #24
 8001678:	af00      	add	r7, sp, #0
 800167a:	eeb0 5b40 	vmov.f64	d5, d0
 800167e:	eeb0 6b41 	vmov.f64	d6, d1
 8001682:	eeb0 7b42 	vmov.f64	d7, d2
 8001686:	ed87 5b00 	vstr	d5, [r7]
 800168a:	ed87 6b02 	vstr	d6, [r7, #8]
 800168e:	ed87 7b04 	vstr	d7, [r7, #16]

	A1 = 1.0 + pow(((-2.0  * (R + (_Pfin.y - r))) / (2 * _Pfin.z)), 2);
 8001692:	ed97 7b02 	vldr	d7, [r7, #8]
 8001696:	ed9f 6bee 	vldr	d6, [pc, #952]	; 8001a50 <inverseKinematic+0x3e0>
 800169a:	ee37 7b46 	vsub.f64	d7, d7, d6
 800169e:	ed9f 6bee 	vldr	d6, [pc, #952]	; 8001a58 <inverseKinematic+0x3e8>
 80016a2:	ee37 7b06 	vadd.f64	d7, d7, d6
 80016a6:	eeb8 6b00 	vmov.f64	d6, #128	; 0xc0000000 -2.0
 80016aa:	ee27 6b06 	vmul.f64	d6, d7, d6
 80016ae:	ed97 7b04 	vldr	d7, [r7, #16]
 80016b2:	ee37 7b07 	vadd.f64	d7, d7, d7
 80016b6:	ee86 5b07 	vdiv.f64	d5, d6, d7
 80016ba:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 80016be:	eeb0 0b45 	vmov.f64	d0, d5
 80016c2:	f010 f90d 	bl	80118e0 <pow>
 80016c6:	eeb0 7b40 	vmov.f64	d7, d0
 80016ca:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 80016ce:	ee37 7b06 	vadd.f64	d7, d7, d6
 80016d2:	4bf9      	ldr	r3, [pc, #996]	; (8001ab8 <inverseKinematic+0x448>)
 80016d4:	ed83 7b00 	vstr	d7, [r3]
	A2 = 4.0 + pow(((2.0 * sqrt(3.0) * R * C30 + 2.0 * R * S30 - 2.0 * sqrt(3) * (_Pfin.x + r * C30) - 2.0 * (_Pfin.y + r * S30)) / (2.0 * _Pfin.z)), 2.0);
 80016d8:	ed97 7b00 	vldr	d7, [r7]
 80016dc:	ed9f 6be0 	vldr	d6, [pc, #896]	; 8001a60 <inverseKinematic+0x3f0>
 80016e0:	ee37 7b06 	vadd.f64	d7, d7, d6
 80016e4:	ed9f 6be0 	vldr	d6, [pc, #896]	; 8001a68 <inverseKinematic+0x3f8>
 80016e8:	ee27 7b06 	vmul.f64	d7, d7, d6
 80016ec:	ed9f 6be0 	vldr	d6, [pc, #896]	; 8001a70 <inverseKinematic+0x400>
 80016f0:	ee36 6b47 	vsub.f64	d6, d6, d7
 80016f4:	ed97 7b02 	vldr	d7, [r7, #8]
 80016f8:	ed9f 5bdf 	vldr	d5, [pc, #892]	; 8001a78 <inverseKinematic+0x408>
 80016fc:	ee37 7b05 	vadd.f64	d7, d7, d5
 8001700:	ee37 7b07 	vadd.f64	d7, d7, d7
 8001704:	ee36 6b47 	vsub.f64	d6, d6, d7
 8001708:	ed97 7b04 	vldr	d7, [r7, #16]
 800170c:	ee37 7b07 	vadd.f64	d7, d7, d7
 8001710:	ee86 5b07 	vdiv.f64	d5, d6, d7
 8001714:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8001718:	eeb0 0b45 	vmov.f64	d0, d5
 800171c:	f010 f8e0 	bl	80118e0 <pow>
 8001720:	eeb0 7b40 	vmov.f64	d7, d0
 8001724:	eeb1 6b00 	vmov.f64	d6, #16	; 0x40800000  4.0
 8001728:	ee37 7b06 	vadd.f64	d7, d7, d6
 800172c:	4be3      	ldr	r3, [pc, #908]	; (8001abc <inverseKinematic+0x44c>)
 800172e:	ed83 7b00 	vstr	d7, [r3]
	A3 = 4.0 + pow(((2.0 * sqrt(3.0) * (_Pfin.x + r * C150) - 2.0 * (_Pfin.y + r * S150) - 2.0 * sqrt(3) * R * C150 + 2.0 * R * S150) / (2.0 * _Pfin.z)), 2.0);
 8001732:	ed97 7b00 	vldr	d7, [r7]
 8001736:	ed9f 6bca 	vldr	d6, [pc, #808]	; 8001a60 <inverseKinematic+0x3f0>
 800173a:	ee37 7b46 	vsub.f64	d7, d7, d6
 800173e:	ed9f 6bca 	vldr	d6, [pc, #808]	; 8001a68 <inverseKinematic+0x3f8>
 8001742:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001746:	ed97 7b02 	vldr	d7, [r7, #8]
 800174a:	ed9f 5bcb 	vldr	d5, [pc, #812]	; 8001a78 <inverseKinematic+0x408>
 800174e:	ee37 7b05 	vadd.f64	d7, d7, d5
 8001752:	ee37 7b07 	vadd.f64	d7, d7, d7
 8001756:	ee36 7b47 	vsub.f64	d7, d6, d7
 800175a:	ed9f 6bc9 	vldr	d6, [pc, #804]	; 8001a80 <inverseKinematic+0x410>
 800175e:	ee37 7b06 	vadd.f64	d7, d7, d6
 8001762:	ed9f 6bbd 	vldr	d6, [pc, #756]	; 8001a58 <inverseKinematic+0x3e8>
 8001766:	ee37 6b06 	vadd.f64	d6, d7, d6
 800176a:	ed97 7b04 	vldr	d7, [r7, #16]
 800176e:	ee37 7b07 	vadd.f64	d7, d7, d7
 8001772:	ee86 5b07 	vdiv.f64	d5, d6, d7
 8001776:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 800177a:	eeb0 0b45 	vmov.f64	d0, d5
 800177e:	f010 f8af 	bl	80118e0 <pow>
 8001782:	eeb0 7b40 	vmov.f64	d7, d0
 8001786:	eeb1 6b00 	vmov.f64	d6, #16	; 0x40800000  4.0
 800178a:	ee37 7b06 	vadd.f64	d7, d7, d6
 800178e:	4bcc      	ldr	r3, [pc, #816]	; (8001ac0 <inverseKinematic+0x450>)
 8001790:	ed83 7b00 	vstr	d7, [r3]

	B1 = (2.0 * R) + (2.0 * ((-2.0  * (R + (_Pfin.y - r))) / (2.0 * _Pfin.z)) * ((-pow(R, 2.0) + pow(L1, 2.0) + pow((_Pfin.y - r), 2.0) + pow(_Pfin.z, 2.0) - pow(L2, 2.0) + pow(_Pfin.x, 2)) / (2 * _Pfin.z)));
 8001794:	ed97 7b02 	vldr	d7, [r7, #8]
 8001798:	ed9f 6bad 	vldr	d6, [pc, #692]	; 8001a50 <inverseKinematic+0x3e0>
 800179c:	ee37 7b46 	vsub.f64	d7, d7, d6
 80017a0:	ed9f 6bad 	vldr	d6, [pc, #692]	; 8001a58 <inverseKinematic+0x3e8>
 80017a4:	ee37 7b06 	vadd.f64	d7, d7, d6
 80017a8:	eeb8 6b00 	vmov.f64	d6, #128	; 0xc0000000 -2.0
 80017ac:	ee27 5b06 	vmul.f64	d5, d7, d6
 80017b0:	ed97 7b04 	vldr	d7, [r7, #16]
 80017b4:	ee37 6b07 	vadd.f64	d6, d7, d7
 80017b8:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80017bc:	ee37 8b07 	vadd.f64	d8, d7, d7
 80017c0:	ed97 7b02 	vldr	d7, [r7, #8]
 80017c4:	ed9f 6ba2 	vldr	d6, [pc, #648]	; 8001a50 <inverseKinematic+0x3e0>
 80017c8:	ee37 7b46 	vsub.f64	d7, d7, d6
 80017cc:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 80017d0:	eeb0 0b47 	vmov.f64	d0, d7
 80017d4:	f010 f884 	bl	80118e0 <pow>
 80017d8:	eeb0 7b40 	vmov.f64	d7, d0
 80017dc:	ed9f 6baa 	vldr	d6, [pc, #680]	; 8001a88 <inverseKinematic+0x418>
 80017e0:	ee37 9b06 	vadd.f64	d9, d7, d6
 80017e4:	ed97 7b04 	vldr	d7, [r7, #16]
 80017e8:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 80017ec:	eeb0 0b47 	vmov.f64	d0, d7
 80017f0:	f010 f876 	bl	80118e0 <pow>
 80017f4:	eeb0 7b40 	vmov.f64	d7, d0
 80017f8:	ee39 7b07 	vadd.f64	d7, d9, d7
 80017fc:	ed9f 6ba4 	vldr	d6, [pc, #656]	; 8001a90 <inverseKinematic+0x420>
 8001800:	ee37 9b46 	vsub.f64	d9, d7, d6
 8001804:	ed97 7b00 	vldr	d7, [r7]
 8001808:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 800180c:	eeb0 0b47 	vmov.f64	d0, d7
 8001810:	f010 f866 	bl	80118e0 <pow>
 8001814:	eeb0 7b40 	vmov.f64	d7, d0
 8001818:	ee39 5b07 	vadd.f64	d5, d9, d7
 800181c:	ed97 7b04 	vldr	d7, [r7, #16]
 8001820:	ee37 6b07 	vadd.f64	d6, d7, d7
 8001824:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8001828:	ee28 7b07 	vmul.f64	d7, d8, d7
 800182c:	ed9f 6b9a 	vldr	d6, [pc, #616]	; 8001a98 <inverseKinematic+0x428>
 8001830:	ee37 7b06 	vadd.f64	d7, d7, d6
 8001834:	4ba3      	ldr	r3, [pc, #652]	; (8001ac4 <inverseKinematic+0x454>)
 8001836:	ed83 7b00 	vstr	d7, [r3]
	B2 = -2.0 * sqrt(3) * R * C30 - 2.0 * R * S30 + 2.0 * (((2.0 * sqrt(3) * R * C30 + 2.0 * R * S30)	+ (-2 * sqrt(3) * (_Pfin.x + r * C30)	- 2.0 * (_Pfin.y + r * S30))) / (2 * _Pfin.z)) * ((-pow(R, 2) + pow(L1, 2) + pow((_Pfin.x + r * C30), 2) + pow((_Pfin.y + r * S30), 2) + pow(_Pfin.z, 2) - pow(L2, 2)) / (2 * _Pfin.z));
 800183a:	ed97 7b00 	vldr	d7, [r7]
 800183e:	ed9f 6b88 	vldr	d6, [pc, #544]	; 8001a60 <inverseKinematic+0x3f0>
 8001842:	ee37 7b06 	vadd.f64	d7, d7, d6
 8001846:	ed9f 6b96 	vldr	d6, [pc, #600]	; 8001aa0 <inverseKinematic+0x430>
 800184a:	ee27 6b06 	vmul.f64	d6, d7, d6
 800184e:	ed97 7b02 	vldr	d7, [r7, #8]
 8001852:	ed9f 5b89 	vldr	d5, [pc, #548]	; 8001a78 <inverseKinematic+0x408>
 8001856:	ee37 7b05 	vadd.f64	d7, d7, d5
 800185a:	ee37 7b07 	vadd.f64	d7, d7, d7
 800185e:	ee36 7b47 	vsub.f64	d7, d6, d7
 8001862:	ed9f 6b83 	vldr	d6, [pc, #524]	; 8001a70 <inverseKinematic+0x400>
 8001866:	ee37 5b06 	vadd.f64	d5, d7, d6
 800186a:	ed97 7b04 	vldr	d7, [r7, #16]
 800186e:	ee37 6b07 	vadd.f64	d6, d7, d7
 8001872:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8001876:	ee37 8b07 	vadd.f64	d8, d7, d7
 800187a:	ed97 7b00 	vldr	d7, [r7]
 800187e:	ed9f 6b78 	vldr	d6, [pc, #480]	; 8001a60 <inverseKinematic+0x3f0>
 8001882:	ee37 7b06 	vadd.f64	d7, d7, d6
 8001886:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 800188a:	eeb0 0b47 	vmov.f64	d0, d7
 800188e:	f010 f827 	bl	80118e0 <pow>
 8001892:	eeb0 7b40 	vmov.f64	d7, d0
 8001896:	ed9f 6b7c 	vldr	d6, [pc, #496]	; 8001a88 <inverseKinematic+0x418>
 800189a:	ee37 9b06 	vadd.f64	d9, d7, d6
 800189e:	ed97 7b02 	vldr	d7, [r7, #8]
 80018a2:	ed9f 6b75 	vldr	d6, [pc, #468]	; 8001a78 <inverseKinematic+0x408>
 80018a6:	ee37 7b06 	vadd.f64	d7, d7, d6
 80018aa:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 80018ae:	eeb0 0b47 	vmov.f64	d0, d7
 80018b2:	f010 f815 	bl	80118e0 <pow>
 80018b6:	eeb0 7b40 	vmov.f64	d7, d0
 80018ba:	ee39 9b07 	vadd.f64	d9, d9, d7
 80018be:	ed97 7b04 	vldr	d7, [r7, #16]
 80018c2:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 80018c6:	eeb0 0b47 	vmov.f64	d0, d7
 80018ca:	f010 f809 	bl	80118e0 <pow>
 80018ce:	eeb0 7b40 	vmov.f64	d7, d0
 80018d2:	ee39 7b07 	vadd.f64	d7, d9, d7
 80018d6:	ed9f 6b6e 	vldr	d6, [pc, #440]	; 8001a90 <inverseKinematic+0x420>
 80018da:	ee37 5b46 	vsub.f64	d5, d7, d6
 80018de:	ed97 7b04 	vldr	d7, [r7, #16]
 80018e2:	ee37 6b07 	vadd.f64	d6, d7, d7
 80018e6:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80018ea:	ee28 7b07 	vmul.f64	d7, d8, d7
 80018ee:	ed9f 6b60 	vldr	d6, [pc, #384]	; 8001a70 <inverseKinematic+0x400>
 80018f2:	ee37 7b46 	vsub.f64	d7, d7, d6
 80018f6:	4b74      	ldr	r3, [pc, #464]	; (8001ac8 <inverseKinematic+0x458>)
 80018f8:	ed83 7b00 	vstr	d7, [r3]
	B3 = 2.0 * sqrt(3) * R * C150 - 2.0 * R * S150 + 2.0 * ((2.0 * sqrt(3) * (_Pfin.x + r * C150) - 2.0 * (_Pfin.y + r * S150) - 2.0 * sqrt(3) * R * C150 + 2.0 * R * S150) / (2 * _Pfin.z)) * ((pow((_Pfin.x + r * C150), 2) + pow((_Pfin.y + r * S150), 2) + pow(_Pfin.z, 2) - pow(L2, 2) - pow(R, 2) + pow(L1, 2)) / (2 * _Pfin.z));
 80018fc:	ed97 7b00 	vldr	d7, [r7]
 8001900:	ed9f 6b57 	vldr	d6, [pc, #348]	; 8001a60 <inverseKinematic+0x3f0>
 8001904:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001908:	ed9f 6b57 	vldr	d6, [pc, #348]	; 8001a68 <inverseKinematic+0x3f8>
 800190c:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001910:	ed97 7b02 	vldr	d7, [r7, #8]
 8001914:	ed9f 5b58 	vldr	d5, [pc, #352]	; 8001a78 <inverseKinematic+0x408>
 8001918:	ee37 7b05 	vadd.f64	d7, d7, d5
 800191c:	ee37 7b07 	vadd.f64	d7, d7, d7
 8001920:	ee36 7b47 	vsub.f64	d7, d6, d7
 8001924:	ed9f 6b56 	vldr	d6, [pc, #344]	; 8001a80 <inverseKinematic+0x410>
 8001928:	ee37 7b06 	vadd.f64	d7, d7, d6
 800192c:	ed9f 6b4a 	vldr	d6, [pc, #296]	; 8001a58 <inverseKinematic+0x3e8>
 8001930:	ee37 5b06 	vadd.f64	d5, d7, d6
 8001934:	ed97 7b04 	vldr	d7, [r7, #16]
 8001938:	ee37 6b07 	vadd.f64	d6, d7, d7
 800193c:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8001940:	ee37 8b07 	vadd.f64	d8, d7, d7
 8001944:	ed97 7b00 	vldr	d7, [r7]
 8001948:	ed9f 6b45 	vldr	d6, [pc, #276]	; 8001a60 <inverseKinematic+0x3f0>
 800194c:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001950:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8001954:	eeb0 0b47 	vmov.f64	d0, d7
 8001958:	f00f ffc2 	bl	80118e0 <pow>
 800195c:	eeb0 9b40 	vmov.f64	d9, d0
 8001960:	ed97 7b02 	vldr	d7, [r7, #8]
 8001964:	ed9f 6b44 	vldr	d6, [pc, #272]	; 8001a78 <inverseKinematic+0x408>
 8001968:	ee37 7b06 	vadd.f64	d7, d7, d6
 800196c:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8001970:	eeb0 0b47 	vmov.f64	d0, d7
 8001974:	f00f ffb4 	bl	80118e0 <pow>
 8001978:	eeb0 7b40 	vmov.f64	d7, d0
 800197c:	ee39 9b07 	vadd.f64	d9, d9, d7
 8001980:	ed97 7b04 	vldr	d7, [r7, #16]
 8001984:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8001988:	eeb0 0b47 	vmov.f64	d0, d7
 800198c:	f00f ffa8 	bl	80118e0 <pow>
 8001990:	eeb0 7b40 	vmov.f64	d7, d0
 8001994:	ee39 7b07 	vadd.f64	d7, d9, d7
 8001998:	ed9f 6b3d 	vldr	d6, [pc, #244]	; 8001a90 <inverseKinematic+0x420>
 800199c:	ee37 7b46 	vsub.f64	d7, d7, d6
 80019a0:	ed9f 6b41 	vldr	d6, [pc, #260]	; 8001aa8 <inverseKinematic+0x438>
 80019a4:	ee37 7b46 	vsub.f64	d7, d7, d6
 80019a8:	ed9f 6b41 	vldr	d6, [pc, #260]	; 8001ab0 <inverseKinematic+0x440>
 80019ac:	ee37 5b06 	vadd.f64	d5, d7, d6
 80019b0:	ed97 7b04 	vldr	d7, [r7, #16]
 80019b4:	ee37 6b07 	vadd.f64	d6, d7, d7
 80019b8:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80019bc:	ee28 7b07 	vmul.f64	d7, d8, d7
 80019c0:	ed9f 6b2b 	vldr	d6, [pc, #172]	; 8001a70 <inverseKinematic+0x400>
 80019c4:	ee37 7b46 	vsub.f64	d7, d7, d6
 80019c8:	4b40      	ldr	r3, [pc, #256]	; (8001acc <inverseKinematic+0x45c>)
 80019ca:	ed83 7b00 	vstr	d7, [r3]

	C1 = (pow(((pow((_Pfin.y - r), 2) + pow(_Pfin.z, 2) - pow(L2, 2) + pow(_Pfin.x, 2) - pow(R, 2) + pow(L1, 2)) / (2 * _Pfin.z)), 2) - pow(L1, 2) + pow(R, 2));
 80019ce:	ed97 7b02 	vldr	d7, [r7, #8]
 80019d2:	ed9f 6b1f 	vldr	d6, [pc, #124]	; 8001a50 <inverseKinematic+0x3e0>
 80019d6:	ee37 7b46 	vsub.f64	d7, d7, d6
 80019da:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 80019de:	eeb0 0b47 	vmov.f64	d0, d7
 80019e2:	f00f ff7d 	bl	80118e0 <pow>
 80019e6:	eeb0 8b40 	vmov.f64	d8, d0
 80019ea:	ed97 7b04 	vldr	d7, [r7, #16]
 80019ee:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 80019f2:	eeb0 0b47 	vmov.f64	d0, d7
 80019f6:	f00f ff73 	bl	80118e0 <pow>
 80019fa:	eeb0 7b40 	vmov.f64	d7, d0
 80019fe:	ee38 7b07 	vadd.f64	d7, d8, d7
 8001a02:	ed9f 6b23 	vldr	d6, [pc, #140]	; 8001a90 <inverseKinematic+0x420>
 8001a06:	ee37 8b46 	vsub.f64	d8, d7, d6
 8001a0a:	ed97 7b00 	vldr	d7, [r7]
 8001a0e:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8001a12:	eeb0 0b47 	vmov.f64	d0, d7
 8001a16:	f00f ff63 	bl	80118e0 <pow>
 8001a1a:	eeb0 7b40 	vmov.f64	d7, d0
 8001a1e:	ee38 7b07 	vadd.f64	d7, d8, d7
 8001a22:	ed9f 6b21 	vldr	d6, [pc, #132]	; 8001aa8 <inverseKinematic+0x438>
 8001a26:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001a2a:	ed9f 6b21 	vldr	d6, [pc, #132]	; 8001ab0 <inverseKinematic+0x440>
 8001a2e:	ee37 6b06 	vadd.f64	d6, d7, d6
 8001a32:	ed97 7b04 	vldr	d7, [r7, #16]
 8001a36:	ee37 7b07 	vadd.f64	d7, d7, d7
 8001a3a:	ee86 5b07 	vdiv.f64	d5, d6, d7
 8001a3e:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8001a42:	eeb0 0b45 	vmov.f64	d0, d5
 8001a46:	f00f ff4b 	bl	80118e0 <pow>
 8001a4a:	eeb0 7b40 	vmov.f64	d7, d0
 8001a4e:	e03f      	b.n	8001ad0 <inverseKinematic+0x460>
 8001a50:	1eb851ec 	.word	0x1eb851ec
 8001a54:	3fb1eb85 	.word	0x3fb1eb85
 8001a58:	24dd2f1b 	.word	0x24dd2f1b
 8001a5c:	3fc58106 	.word	0x3fc58106
 8001a60:	5625749b 	.word	0x5625749b
 8001a64:	3faf09d1 	.word	0x3faf09d1
 8001a68:	e8584caa 	.word	0xe8584caa
 8001a6c:	400bb67a 	.word	0x400bb67a
 8001a70:	24dd2f1d 	.word	0x24dd2f1d
 8001a74:	3fe58106 	.word	0x3fe58106
 8001a78:	1eb851ec 	.word	0x1eb851ec
 8001a7c:	3fa1eb85 	.word	0x3fa1eb85
 8001a80:	9ba5e356 	.word	0x9ba5e356
 8001a84:	3fe020c4 	.word	0x3fe020c4
 8001a88:	f705857e 	.word	0xf705857e
 8001a8c:	3f881e03 	.word	0x3f881e03
 8001a90:	70a3d70a 	.word	0x70a3d70a
 8001a94:	3fd70a3d 	.word	0x3fd70a3d
 8001a98:	24dd2f1b 	.word	0x24dd2f1b
 8001a9c:	3fd58106 	.word	0x3fd58106
 8001aa0:	e8584caa 	.word	0xe8584caa
 8001aa4:	c00bb67a 	.word	0xc00bb67a
 8001aa8:	93d96639 	.word	0x93d96639
 8001aac:	3f9ce6c0 	.word	0x3f9ce6c0
 8001ab0:	47ae147c 	.word	0x47ae147c
 8001ab4:	3fa47ae1 	.word	0x3fa47ae1
 8001ab8:	24000290 	.word	0x24000290
 8001abc:	240002d8 	.word	0x240002d8
 8001ac0:	24000320 	.word	0x24000320
 8001ac4:	24000298 	.word	0x24000298
 8001ac8:	240002e0 	.word	0x240002e0
 8001acc:	24000328 	.word	0x24000328
 8001ad0:	ed9f 6bdf 	vldr	d6, [pc, #892]	; 8001e50 <inverseKinematic+0x7e0>
 8001ad4:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001ad8:	ed9f 6bdf 	vldr	d6, [pc, #892]	; 8001e58 <inverseKinematic+0x7e8>
 8001adc:	ee37 7b06 	vadd.f64	d7, d7, d6
 8001ae0:	4be7      	ldr	r3, [pc, #924]	; (8001e80 <inverseKinematic+0x810>)
 8001ae2:	ed83 7b00 	vstr	d7, [r3]
	C2 = pow(R, 2) - pow(L1, 2) + pow(((-pow(R, 2) + pow(L1, 2) + pow((_Pfin.x + r * C30), 2) + pow((_Pfin.y + r * S30), 2) + pow(_Pfin.z, 2) - pow(L2, 2)) / (2.0 * _Pfin.z)), 2.0);
 8001ae6:	ed97 7b00 	vldr	d7, [r7]
 8001aea:	ed9f 6bdd 	vldr	d6, [pc, #884]	; 8001e60 <inverseKinematic+0x7f0>
 8001aee:	ee37 7b06 	vadd.f64	d7, d7, d6
 8001af2:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8001af6:	eeb0 0b47 	vmov.f64	d0, d7
 8001afa:	f00f fef1 	bl	80118e0 <pow>
 8001afe:	eeb0 7b40 	vmov.f64	d7, d0
 8001b02:	ed9f 6bd9 	vldr	d6, [pc, #868]	; 8001e68 <inverseKinematic+0x7f8>
 8001b06:	ee37 8b06 	vadd.f64	d8, d7, d6
 8001b0a:	ed97 7b02 	vldr	d7, [r7, #8]
 8001b0e:	ed9f 6bd8 	vldr	d6, [pc, #864]	; 8001e70 <inverseKinematic+0x800>
 8001b12:	ee37 7b06 	vadd.f64	d7, d7, d6
 8001b16:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8001b1a:	eeb0 0b47 	vmov.f64	d0, d7
 8001b1e:	f00f fedf 	bl	80118e0 <pow>
 8001b22:	eeb0 7b40 	vmov.f64	d7, d0
 8001b26:	ee38 8b07 	vadd.f64	d8, d8, d7
 8001b2a:	ed97 7b04 	vldr	d7, [r7, #16]
 8001b2e:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8001b32:	eeb0 0b47 	vmov.f64	d0, d7
 8001b36:	f00f fed3 	bl	80118e0 <pow>
 8001b3a:	eeb0 7b40 	vmov.f64	d7, d0
 8001b3e:	ee38 7b07 	vadd.f64	d7, d8, d7
 8001b42:	ed9f 6bcd 	vldr	d6, [pc, #820]	; 8001e78 <inverseKinematic+0x808>
 8001b46:	ee37 6b46 	vsub.f64	d6, d7, d6
 8001b4a:	ed97 7b04 	vldr	d7, [r7, #16]
 8001b4e:	ee37 7b07 	vadd.f64	d7, d7, d7
 8001b52:	ee86 5b07 	vdiv.f64	d5, d6, d7
 8001b56:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8001b5a:	eeb0 0b45 	vmov.f64	d0, d5
 8001b5e:	f00f febf 	bl	80118e0 <pow>
 8001b62:	eeb0 7b40 	vmov.f64	d7, d0
 8001b66:	ed9f 6bc0 	vldr	d6, [pc, #768]	; 8001e68 <inverseKinematic+0x7f8>
 8001b6a:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001b6e:	4bc5      	ldr	r3, [pc, #788]	; (8001e84 <inverseKinematic+0x814>)
 8001b70:	ed83 7b00 	vstr	d7, [r3]
	C3 = pow(R, 2) - pow(L1, 2) + pow(((pow((_Pfin.x + r * C150), 2) + pow((_Pfin.y + r * S150), 2) + pow(_Pfin.z, 2) - pow(L2, 2) - pow(R, 2) + pow(L1, 2)) / (2.0 * _Pfin.z)), 2.0);
 8001b74:	ed97 7b00 	vldr	d7, [r7]
 8001b78:	ed9f 6bb9 	vldr	d6, [pc, #740]	; 8001e60 <inverseKinematic+0x7f0>
 8001b7c:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001b80:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8001b84:	eeb0 0b47 	vmov.f64	d0, d7
 8001b88:	f00f feaa 	bl	80118e0 <pow>
 8001b8c:	eeb0 8b40 	vmov.f64	d8, d0
 8001b90:	ed97 7b02 	vldr	d7, [r7, #8]
 8001b94:	ed9f 6bb6 	vldr	d6, [pc, #728]	; 8001e70 <inverseKinematic+0x800>
 8001b98:	ee37 7b06 	vadd.f64	d7, d7, d6
 8001b9c:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8001ba0:	eeb0 0b47 	vmov.f64	d0, d7
 8001ba4:	f00f fe9c 	bl	80118e0 <pow>
 8001ba8:	eeb0 7b40 	vmov.f64	d7, d0
 8001bac:	ee38 8b07 	vadd.f64	d8, d8, d7
 8001bb0:	ed97 7b04 	vldr	d7, [r7, #16]
 8001bb4:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8001bb8:	eeb0 0b47 	vmov.f64	d0, d7
 8001bbc:	f00f fe90 	bl	80118e0 <pow>
 8001bc0:	eeb0 7b40 	vmov.f64	d7, d0
 8001bc4:	ee38 7b07 	vadd.f64	d7, d8, d7
 8001bc8:	ed9f 6bab 	vldr	d6, [pc, #684]	; 8001e78 <inverseKinematic+0x808>
 8001bcc:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001bd0:	ed9f 6ba1 	vldr	d6, [pc, #644]	; 8001e58 <inverseKinematic+0x7e8>
 8001bd4:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001bd8:	ed9f 6b9d 	vldr	d6, [pc, #628]	; 8001e50 <inverseKinematic+0x7e0>
 8001bdc:	ee37 6b06 	vadd.f64	d6, d7, d6
 8001be0:	ed97 7b04 	vldr	d7, [r7, #16]
 8001be4:	ee37 7b07 	vadd.f64	d7, d7, d7
 8001be8:	ee86 5b07 	vdiv.f64	d5, d6, d7
 8001bec:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8001bf0:	eeb0 0b45 	vmov.f64	d0, d5
 8001bf4:	f00f fe74 	bl	80118e0 <pow>
 8001bf8:	eeb0 7b40 	vmov.f64	d7, d0
 8001bfc:	ed9f 6b9a 	vldr	d6, [pc, #616]	; 8001e68 <inverseKinematic+0x7f8>
 8001c00:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001c04:	4ba0      	ldr	r3, [pc, #640]	; (8001e88 <inverseKinematic+0x818>)
 8001c06:	ed83 7b00 	vstr	d7, [r3]

	YJ1_1 = (-B1 - sqrt(pow(B1, 2) - 4 * A1 * C1)) / (2 * A1);
 8001c0a:	4ba0      	ldr	r3, [pc, #640]	; (8001e8c <inverseKinematic+0x81c>)
 8001c0c:	ed93 7b00 	vldr	d7, [r3]
 8001c10:	eeb1 8b47 	vneg.f64	d8, d7
 8001c14:	4b9d      	ldr	r3, [pc, #628]	; (8001e8c <inverseKinematic+0x81c>)
 8001c16:	ed93 7b00 	vldr	d7, [r3]
 8001c1a:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8001c1e:	eeb0 0b47 	vmov.f64	d0, d7
 8001c22:	f00f fe5d 	bl	80118e0 <pow>
 8001c26:	eeb0 5b40 	vmov.f64	d5, d0
 8001c2a:	4b99      	ldr	r3, [pc, #612]	; (8001e90 <inverseKinematic+0x820>)
 8001c2c:	ed93 7b00 	vldr	d7, [r3]
 8001c30:	eeb1 6b00 	vmov.f64	d6, #16	; 0x40800000  4.0
 8001c34:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001c38:	4b91      	ldr	r3, [pc, #580]	; (8001e80 <inverseKinematic+0x810>)
 8001c3a:	ed93 7b00 	vldr	d7, [r3]
 8001c3e:	ee26 7b07 	vmul.f64	d7, d6, d7
 8001c42:	ee35 7b47 	vsub.f64	d7, d5, d7
 8001c46:	eeb0 0b47 	vmov.f64	d0, d7
 8001c4a:	f010 f8c9 	bl	8011de0 <sqrt>
 8001c4e:	eeb0 7b40 	vmov.f64	d7, d0
 8001c52:	ee38 5b47 	vsub.f64	d5, d8, d7
 8001c56:	4b8e      	ldr	r3, [pc, #568]	; (8001e90 <inverseKinematic+0x820>)
 8001c58:	ed93 7b00 	vldr	d7, [r3]
 8001c5c:	ee37 6b07 	vadd.f64	d6, d7, d7
 8001c60:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8001c64:	4b8b      	ldr	r3, [pc, #556]	; (8001e94 <inverseKinematic+0x824>)
 8001c66:	ed83 7b00 	vstr	d7, [r3]
	YJ1_2 = (-B1 + sqrt(pow(B1, 2) - 4 * A1 * C1)) / (2 * A1);
 8001c6a:	4b88      	ldr	r3, [pc, #544]	; (8001e8c <inverseKinematic+0x81c>)
 8001c6c:	ed93 7b00 	vldr	d7, [r3]
 8001c70:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8001c74:	eeb0 0b47 	vmov.f64	d0, d7
 8001c78:	f00f fe32 	bl	80118e0 <pow>
 8001c7c:	eeb0 5b40 	vmov.f64	d5, d0
 8001c80:	4b83      	ldr	r3, [pc, #524]	; (8001e90 <inverseKinematic+0x820>)
 8001c82:	ed93 7b00 	vldr	d7, [r3]
 8001c86:	eeb1 6b00 	vmov.f64	d6, #16	; 0x40800000  4.0
 8001c8a:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001c8e:	4b7c      	ldr	r3, [pc, #496]	; (8001e80 <inverseKinematic+0x810>)
 8001c90:	ed93 7b00 	vldr	d7, [r3]
 8001c94:	ee26 7b07 	vmul.f64	d7, d6, d7
 8001c98:	ee35 7b47 	vsub.f64	d7, d5, d7
 8001c9c:	eeb0 0b47 	vmov.f64	d0, d7
 8001ca0:	f010 f89e 	bl	8011de0 <sqrt>
 8001ca4:	eeb0 6b40 	vmov.f64	d6, d0
 8001ca8:	4b78      	ldr	r3, [pc, #480]	; (8001e8c <inverseKinematic+0x81c>)
 8001caa:	ed93 7b00 	vldr	d7, [r3]
 8001cae:	ee36 5b47 	vsub.f64	d5, d6, d7
 8001cb2:	4b77      	ldr	r3, [pc, #476]	; (8001e90 <inverseKinematic+0x820>)
 8001cb4:	ed93 7b00 	vldr	d7, [r3]
 8001cb8:	ee37 6b07 	vadd.f64	d6, d7, d7
 8001cbc:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8001cc0:	4b75      	ldr	r3, [pc, #468]	; (8001e98 <inverseKinematic+0x828>)
 8001cc2:	ed83 7b00 	vstr	d7, [r3]
	YJ2_1 = (-B2 + sqrt(pow(B2, 2) - 4 * A2 * C2)) / (2 * A2);
 8001cc6:	4b75      	ldr	r3, [pc, #468]	; (8001e9c <inverseKinematic+0x82c>)
 8001cc8:	ed93 7b00 	vldr	d7, [r3]
 8001ccc:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8001cd0:	eeb0 0b47 	vmov.f64	d0, d7
 8001cd4:	f00f fe04 	bl	80118e0 <pow>
 8001cd8:	eeb0 5b40 	vmov.f64	d5, d0
 8001cdc:	4b70      	ldr	r3, [pc, #448]	; (8001ea0 <inverseKinematic+0x830>)
 8001cde:	ed93 7b00 	vldr	d7, [r3]
 8001ce2:	eeb1 6b00 	vmov.f64	d6, #16	; 0x40800000  4.0
 8001ce6:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001cea:	4b66      	ldr	r3, [pc, #408]	; (8001e84 <inverseKinematic+0x814>)
 8001cec:	ed93 7b00 	vldr	d7, [r3]
 8001cf0:	ee26 7b07 	vmul.f64	d7, d6, d7
 8001cf4:	ee35 7b47 	vsub.f64	d7, d5, d7
 8001cf8:	eeb0 0b47 	vmov.f64	d0, d7
 8001cfc:	f010 f870 	bl	8011de0 <sqrt>
 8001d00:	eeb0 6b40 	vmov.f64	d6, d0
 8001d04:	4b65      	ldr	r3, [pc, #404]	; (8001e9c <inverseKinematic+0x82c>)
 8001d06:	ed93 7b00 	vldr	d7, [r3]
 8001d0a:	ee36 5b47 	vsub.f64	d5, d6, d7
 8001d0e:	4b64      	ldr	r3, [pc, #400]	; (8001ea0 <inverseKinematic+0x830>)
 8001d10:	ed93 7b00 	vldr	d7, [r3]
 8001d14:	ee37 6b07 	vadd.f64	d6, d7, d7
 8001d18:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8001d1c:	4b61      	ldr	r3, [pc, #388]	; (8001ea4 <inverseKinematic+0x834>)
 8001d1e:	ed83 7b00 	vstr	d7, [r3]
	YJ2_2 = (-B2 - sqrt(pow(B2, 2) - 4 * A2 * C2)) / (2 * A2);
 8001d22:	4b5e      	ldr	r3, [pc, #376]	; (8001e9c <inverseKinematic+0x82c>)
 8001d24:	ed93 7b00 	vldr	d7, [r3]
 8001d28:	eeb1 8b47 	vneg.f64	d8, d7
 8001d2c:	4b5b      	ldr	r3, [pc, #364]	; (8001e9c <inverseKinematic+0x82c>)
 8001d2e:	ed93 7b00 	vldr	d7, [r3]
 8001d32:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8001d36:	eeb0 0b47 	vmov.f64	d0, d7
 8001d3a:	f00f fdd1 	bl	80118e0 <pow>
 8001d3e:	eeb0 5b40 	vmov.f64	d5, d0
 8001d42:	4b57      	ldr	r3, [pc, #348]	; (8001ea0 <inverseKinematic+0x830>)
 8001d44:	ed93 7b00 	vldr	d7, [r3]
 8001d48:	eeb1 6b00 	vmov.f64	d6, #16	; 0x40800000  4.0
 8001d4c:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001d50:	4b4c      	ldr	r3, [pc, #304]	; (8001e84 <inverseKinematic+0x814>)
 8001d52:	ed93 7b00 	vldr	d7, [r3]
 8001d56:	ee26 7b07 	vmul.f64	d7, d6, d7
 8001d5a:	ee35 7b47 	vsub.f64	d7, d5, d7
 8001d5e:	eeb0 0b47 	vmov.f64	d0, d7
 8001d62:	f010 f83d 	bl	8011de0 <sqrt>
 8001d66:	eeb0 7b40 	vmov.f64	d7, d0
 8001d6a:	ee38 5b47 	vsub.f64	d5, d8, d7
 8001d6e:	4b4c      	ldr	r3, [pc, #304]	; (8001ea0 <inverseKinematic+0x830>)
 8001d70:	ed93 7b00 	vldr	d7, [r3]
 8001d74:	ee37 6b07 	vadd.f64	d6, d7, d7
 8001d78:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8001d7c:	4b4a      	ldr	r3, [pc, #296]	; (8001ea8 <inverseKinematic+0x838>)
 8001d7e:	ed83 7b00 	vstr	d7, [r3]
	YJ3_1 = (-B3 + sqrt(pow(B3, 2) - 4 * A3 * C3)) / (2 * A3);
 8001d82:	4b4a      	ldr	r3, [pc, #296]	; (8001eac <inverseKinematic+0x83c>)
 8001d84:	ed93 7b00 	vldr	d7, [r3]
 8001d88:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8001d8c:	eeb0 0b47 	vmov.f64	d0, d7
 8001d90:	f00f fda6 	bl	80118e0 <pow>
 8001d94:	eeb0 5b40 	vmov.f64	d5, d0
 8001d98:	4b45      	ldr	r3, [pc, #276]	; (8001eb0 <inverseKinematic+0x840>)
 8001d9a:	ed93 7b00 	vldr	d7, [r3]
 8001d9e:	eeb1 6b00 	vmov.f64	d6, #16	; 0x40800000  4.0
 8001da2:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001da6:	4b38      	ldr	r3, [pc, #224]	; (8001e88 <inverseKinematic+0x818>)
 8001da8:	ed93 7b00 	vldr	d7, [r3]
 8001dac:	ee26 7b07 	vmul.f64	d7, d6, d7
 8001db0:	ee35 7b47 	vsub.f64	d7, d5, d7
 8001db4:	eeb0 0b47 	vmov.f64	d0, d7
 8001db8:	f010 f812 	bl	8011de0 <sqrt>
 8001dbc:	eeb0 6b40 	vmov.f64	d6, d0
 8001dc0:	4b3a      	ldr	r3, [pc, #232]	; (8001eac <inverseKinematic+0x83c>)
 8001dc2:	ed93 7b00 	vldr	d7, [r3]
 8001dc6:	ee36 5b47 	vsub.f64	d5, d6, d7
 8001dca:	4b39      	ldr	r3, [pc, #228]	; (8001eb0 <inverseKinematic+0x840>)
 8001dcc:	ed93 7b00 	vldr	d7, [r3]
 8001dd0:	ee37 6b07 	vadd.f64	d6, d7, d7
 8001dd4:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8001dd8:	4b36      	ldr	r3, [pc, #216]	; (8001eb4 <inverseKinematic+0x844>)
 8001dda:	ed83 7b00 	vstr	d7, [r3]
	YJ3_2 = (-B3 - sqrt(pow(B3, 2) - 4 * A3 * C3)) / (2 * A3);
 8001dde:	4b33      	ldr	r3, [pc, #204]	; (8001eac <inverseKinematic+0x83c>)
 8001de0:	ed93 7b00 	vldr	d7, [r3]
 8001de4:	eeb1 8b47 	vneg.f64	d8, d7
 8001de8:	4b30      	ldr	r3, [pc, #192]	; (8001eac <inverseKinematic+0x83c>)
 8001dea:	ed93 7b00 	vldr	d7, [r3]
 8001dee:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8001df2:	eeb0 0b47 	vmov.f64	d0, d7
 8001df6:	f00f fd73 	bl	80118e0 <pow>
 8001dfa:	eeb0 5b40 	vmov.f64	d5, d0
 8001dfe:	4b2c      	ldr	r3, [pc, #176]	; (8001eb0 <inverseKinematic+0x840>)
 8001e00:	ed93 7b00 	vldr	d7, [r3]
 8001e04:	eeb1 6b00 	vmov.f64	d6, #16	; 0x40800000  4.0
 8001e08:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001e0c:	4b1e      	ldr	r3, [pc, #120]	; (8001e88 <inverseKinematic+0x818>)
 8001e0e:	ed93 7b00 	vldr	d7, [r3]
 8001e12:	ee26 7b07 	vmul.f64	d7, d6, d7
 8001e16:	ee35 7b47 	vsub.f64	d7, d5, d7
 8001e1a:	eeb0 0b47 	vmov.f64	d0, d7
 8001e1e:	f00f ffdf 	bl	8011de0 <sqrt>
 8001e22:	eeb0 7b40 	vmov.f64	d7, d0
 8001e26:	ee38 5b47 	vsub.f64	d5, d8, d7
 8001e2a:	4b21      	ldr	r3, [pc, #132]	; (8001eb0 <inverseKinematic+0x840>)
 8001e2c:	ed93 7b00 	vldr	d7, [r3]
 8001e30:	ee37 6b07 	vadd.f64	d6, d7, d7
 8001e34:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8001e38:	4b1f      	ldr	r3, [pc, #124]	; (8001eb8 <inverseKinematic+0x848>)
 8001e3a:	ed83 7b00 	vstr	d7, [r3]

	XJ1_1 = 0;
 8001e3e:	491f      	ldr	r1, [pc, #124]	; (8001ebc <inverseKinematic+0x84c>)
 8001e40:	f04f 0200 	mov.w	r2, #0
 8001e44:	f04f 0300 	mov.w	r3, #0
 8001e48:	e9c1 2300 	strd	r2, r3, [r1]
 8001e4c:	e038      	b.n	8001ec0 <inverseKinematic+0x850>
 8001e4e:	bf00      	nop
 8001e50:	47ae147c 	.word	0x47ae147c
 8001e54:	3fa47ae1 	.word	0x3fa47ae1
 8001e58:	93d96639 	.word	0x93d96639
 8001e5c:	3f9ce6c0 	.word	0x3f9ce6c0
 8001e60:	5625749b 	.word	0x5625749b
 8001e64:	3faf09d1 	.word	0x3faf09d1
 8001e68:	f705857e 	.word	0xf705857e
 8001e6c:	3f881e03 	.word	0x3f881e03
 8001e70:	1eb851ec 	.word	0x1eb851ec
 8001e74:	3fa1eb85 	.word	0x3fa1eb85
 8001e78:	70a3d70a 	.word	0x70a3d70a
 8001e7c:	3fd70a3d 	.word	0x3fd70a3d
 8001e80:	240002a0 	.word	0x240002a0
 8001e84:	240002e8 	.word	0x240002e8
 8001e88:	24000330 	.word	0x24000330
 8001e8c:	24000298 	.word	0x24000298
 8001e90:	24000290 	.word	0x24000290
 8001e94:	240002b8 	.word	0x240002b8
 8001e98:	240002c0 	.word	0x240002c0
 8001e9c:	240002e0 	.word	0x240002e0
 8001ea0:	240002d8 	.word	0x240002d8
 8001ea4:	24000300 	.word	0x24000300
 8001ea8:	24000308 	.word	0x24000308
 8001eac:	24000328 	.word	0x24000328
 8001eb0:	24000320 	.word	0x24000320
 8001eb4:	24000348 	.word	0x24000348
 8001eb8:	24000350 	.word	0x24000350
 8001ebc:	240002a8 	.word	0x240002a8
	XJ1_2 = 0;
 8001ec0:	49f1      	ldr	r1, [pc, #964]	; (8002288 <inverseKinematic+0xc18>)
 8001ec2:	f04f 0200 	mov.w	r2, #0
 8001ec6:	f04f 0300 	mov.w	r3, #0
 8001eca:	e9c1 2300 	strd	r2, r3, [r1]
	XJ2_1 = sqrt(3) * YJ2_1;
 8001ece:	4bef      	ldr	r3, [pc, #956]	; (800228c <inverseKinematic+0xc1c>)
 8001ed0:	ed93 7b00 	vldr	d7, [r3]
 8001ed4:	ed9f 6bd2 	vldr	d6, [pc, #840]	; 8002220 <inverseKinematic+0xbb0>
 8001ed8:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001edc:	4bec      	ldr	r3, [pc, #944]	; (8002290 <inverseKinematic+0xc20>)
 8001ede:	ed83 7b00 	vstr	d7, [r3]
	XJ2_2 = sqrt(3) * YJ2_2;
 8001ee2:	4bec      	ldr	r3, [pc, #944]	; (8002294 <inverseKinematic+0xc24>)
 8001ee4:	ed93 7b00 	vldr	d7, [r3]
 8001ee8:	ed9f 6bcd 	vldr	d6, [pc, #820]	; 8002220 <inverseKinematic+0xbb0>
 8001eec:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001ef0:	4be9      	ldr	r3, [pc, #932]	; (8002298 <inverseKinematic+0xc28>)
 8001ef2:	ed83 7b00 	vstr	d7, [r3]
	XJ3_1 = -sqrt(3) * YJ3_1;
 8001ef6:	4be9      	ldr	r3, [pc, #932]	; (800229c <inverseKinematic+0xc2c>)
 8001ef8:	ed93 7b00 	vldr	d7, [r3]
 8001efc:	ed9f 6bca 	vldr	d6, [pc, #808]	; 8002228 <inverseKinematic+0xbb8>
 8001f00:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001f04:	4be6      	ldr	r3, [pc, #920]	; (80022a0 <inverseKinematic+0xc30>)
 8001f06:	ed83 7b00 	vstr	d7, [r3]
	XJ3_2 = -sqrt(3) * YJ3_2;
 8001f0a:	4be6      	ldr	r3, [pc, #920]	; (80022a4 <inverseKinematic+0xc34>)
 8001f0c:	ed93 7b00 	vldr	d7, [r3]
 8001f10:	ed9f 6bc5 	vldr	d6, [pc, #788]	; 8002228 <inverseKinematic+0xbb8>
 8001f14:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001f18:	4be3      	ldr	r3, [pc, #908]	; (80022a8 <inverseKinematic+0xc38>)
 8001f1a:	ed83 7b00 	vstr	d7, [r3]

	ZJ1_1 = ((YJ1_1 * ((-2 * (R + (_Pfin.y - r))) / (2 * _Pfin.z))) + ((pow((_Pfin.y - r), 2) + pow(_Pfin.z, 2) - pow(L2, 2) + pow(_Pfin.x, 2) - pow(R, 2) + pow(L1, 2)) / (2 * _Pfin.z)));
 8001f1e:	ed97 7b02 	vldr	d7, [r7, #8]
 8001f22:	ed9f 6bc3 	vldr	d6, [pc, #780]	; 8002230 <inverseKinematic+0xbc0>
 8001f26:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001f2a:	ed9f 6bc3 	vldr	d6, [pc, #780]	; 8002238 <inverseKinematic+0xbc8>
 8001f2e:	ee37 7b06 	vadd.f64	d7, d7, d6
 8001f32:	eeb8 6b00 	vmov.f64	d6, #128	; 0xc0000000 -2.0
 8001f36:	ee27 5b06 	vmul.f64	d5, d7, d6
 8001f3a:	ed97 7b04 	vldr	d7, [r7, #16]
 8001f3e:	ee37 7b07 	vadd.f64	d7, d7, d7
 8001f42:	ee85 6b07 	vdiv.f64	d6, d5, d7
 8001f46:	4bd9      	ldr	r3, [pc, #868]	; (80022ac <inverseKinematic+0xc3c>)
 8001f48:	ed93 7b00 	vldr	d7, [r3]
 8001f4c:	ee26 8b07 	vmul.f64	d8, d6, d7
 8001f50:	ed97 7b02 	vldr	d7, [r7, #8]
 8001f54:	ed9f 6bb6 	vldr	d6, [pc, #728]	; 8002230 <inverseKinematic+0xbc0>
 8001f58:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001f5c:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8001f60:	eeb0 0b47 	vmov.f64	d0, d7
 8001f64:	f00f fcbc 	bl	80118e0 <pow>
 8001f68:	eeb0 9b40 	vmov.f64	d9, d0
 8001f6c:	ed97 7b04 	vldr	d7, [r7, #16]
 8001f70:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8001f74:	eeb0 0b47 	vmov.f64	d0, d7
 8001f78:	f00f fcb2 	bl	80118e0 <pow>
 8001f7c:	eeb0 7b40 	vmov.f64	d7, d0
 8001f80:	ee39 7b07 	vadd.f64	d7, d9, d7
 8001f84:	ed9f 6bae 	vldr	d6, [pc, #696]	; 8002240 <inverseKinematic+0xbd0>
 8001f88:	ee37 9b46 	vsub.f64	d9, d7, d6
 8001f8c:	ed97 7b00 	vldr	d7, [r7]
 8001f90:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8001f94:	eeb0 0b47 	vmov.f64	d0, d7
 8001f98:	f00f fca2 	bl	80118e0 <pow>
 8001f9c:	eeb0 7b40 	vmov.f64	d7, d0
 8001fa0:	ee39 7b07 	vadd.f64	d7, d9, d7
 8001fa4:	ed9f 6ba8 	vldr	d6, [pc, #672]	; 8002248 <inverseKinematic+0xbd8>
 8001fa8:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001fac:	ed9f 6ba8 	vldr	d6, [pc, #672]	; 8002250 <inverseKinematic+0xbe0>
 8001fb0:	ee37 5b06 	vadd.f64	d5, d7, d6
 8001fb4:	ed97 7b04 	vldr	d7, [r7, #16]
 8001fb8:	ee37 6b07 	vadd.f64	d6, d7, d7
 8001fbc:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8001fc0:	ee38 7b07 	vadd.f64	d7, d8, d7
 8001fc4:	4bba      	ldr	r3, [pc, #744]	; (80022b0 <inverseKinematic+0xc40>)
 8001fc6:	ed83 7b00 	vstr	d7, [r3]
	ZJ1_2 = ((YJ1_2 * ((-2 * (R + (_Pfin.y - r))) / (2 * _Pfin.z))) + ((pow((_Pfin.y - r), 2) + pow(_Pfin.z, 2) - pow(L2, 2) + pow(_Pfin.x, 2) - pow(R, 2) + pow(L1, 2)) / (2 * _Pfin.z)));
 8001fca:	ed97 7b02 	vldr	d7, [r7, #8]
 8001fce:	ed9f 6b98 	vldr	d6, [pc, #608]	; 8002230 <inverseKinematic+0xbc0>
 8001fd2:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001fd6:	ed9f 6b98 	vldr	d6, [pc, #608]	; 8002238 <inverseKinematic+0xbc8>
 8001fda:	ee37 7b06 	vadd.f64	d7, d7, d6
 8001fde:	eeb8 6b00 	vmov.f64	d6, #128	; 0xc0000000 -2.0
 8001fe2:	ee27 5b06 	vmul.f64	d5, d7, d6
 8001fe6:	ed97 7b04 	vldr	d7, [r7, #16]
 8001fea:	ee37 7b07 	vadd.f64	d7, d7, d7
 8001fee:	ee85 6b07 	vdiv.f64	d6, d5, d7
 8001ff2:	4bb0      	ldr	r3, [pc, #704]	; (80022b4 <inverseKinematic+0xc44>)
 8001ff4:	ed93 7b00 	vldr	d7, [r3]
 8001ff8:	ee26 8b07 	vmul.f64	d8, d6, d7
 8001ffc:	ed97 7b02 	vldr	d7, [r7, #8]
 8002000:	ed9f 6b8b 	vldr	d6, [pc, #556]	; 8002230 <inverseKinematic+0xbc0>
 8002004:	ee37 7b46 	vsub.f64	d7, d7, d6
 8002008:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 800200c:	eeb0 0b47 	vmov.f64	d0, d7
 8002010:	f00f fc66 	bl	80118e0 <pow>
 8002014:	eeb0 9b40 	vmov.f64	d9, d0
 8002018:	ed97 7b04 	vldr	d7, [r7, #16]
 800201c:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8002020:	eeb0 0b47 	vmov.f64	d0, d7
 8002024:	f00f fc5c 	bl	80118e0 <pow>
 8002028:	eeb0 7b40 	vmov.f64	d7, d0
 800202c:	ee39 7b07 	vadd.f64	d7, d9, d7
 8002030:	ed9f 6b83 	vldr	d6, [pc, #524]	; 8002240 <inverseKinematic+0xbd0>
 8002034:	ee37 9b46 	vsub.f64	d9, d7, d6
 8002038:	ed97 7b00 	vldr	d7, [r7]
 800203c:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8002040:	eeb0 0b47 	vmov.f64	d0, d7
 8002044:	f00f fc4c 	bl	80118e0 <pow>
 8002048:	eeb0 7b40 	vmov.f64	d7, d0
 800204c:	ee39 7b07 	vadd.f64	d7, d9, d7
 8002050:	ed9f 6b7d 	vldr	d6, [pc, #500]	; 8002248 <inverseKinematic+0xbd8>
 8002054:	ee37 7b46 	vsub.f64	d7, d7, d6
 8002058:	ed9f 6b7d 	vldr	d6, [pc, #500]	; 8002250 <inverseKinematic+0xbe0>
 800205c:	ee37 5b06 	vadd.f64	d5, d7, d6
 8002060:	ed97 7b04 	vldr	d7, [r7, #16]
 8002064:	ee37 6b07 	vadd.f64	d6, d7, d7
 8002068:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800206c:	ee38 7b07 	vadd.f64	d7, d8, d7
 8002070:	4b91      	ldr	r3, [pc, #580]	; (80022b8 <inverseKinematic+0xc48>)
 8002072:	ed83 7b00 	vstr	d7, [r3]
	ZJ2_1 = YJ2_1 * (((2 * sqrt(3.0) * R * C30 + 2.0 * R * S30) + (-2 * sqrt(3) * (_Pfin.x + r * C30) - 2.0 * (_Pfin.y + r * S30))) / (2 * _Pfin.z)) + ((-pow(R, 2) + pow(L1, 2) + pow((_Pfin.x + r * C30), 2) + pow((_Pfin.y + r * S30), 2) + pow(_Pfin.z, 2) - pow(L2, 2)) / (2 * _Pfin.z));
 8002076:	ed97 7b00 	vldr	d7, [r7]
 800207a:	ed9f 6b77 	vldr	d6, [pc, #476]	; 8002258 <inverseKinematic+0xbe8>
 800207e:	ee37 7b06 	vadd.f64	d7, d7, d6
 8002082:	ed9f 6b77 	vldr	d6, [pc, #476]	; 8002260 <inverseKinematic+0xbf0>
 8002086:	ee27 6b06 	vmul.f64	d6, d7, d6
 800208a:	ed97 7b02 	vldr	d7, [r7, #8]
 800208e:	ed9f 5b76 	vldr	d5, [pc, #472]	; 8002268 <inverseKinematic+0xbf8>
 8002092:	ee37 7b05 	vadd.f64	d7, d7, d5
 8002096:	ee37 7b07 	vadd.f64	d7, d7, d7
 800209a:	ee36 7b47 	vsub.f64	d7, d6, d7
 800209e:	ed9f 6b74 	vldr	d6, [pc, #464]	; 8002270 <inverseKinematic+0xc00>
 80020a2:	ee37 5b06 	vadd.f64	d5, d7, d6
 80020a6:	ed97 7b04 	vldr	d7, [r7, #16]
 80020aa:	ee37 7b07 	vadd.f64	d7, d7, d7
 80020ae:	ee85 6b07 	vdiv.f64	d6, d5, d7
 80020b2:	4b76      	ldr	r3, [pc, #472]	; (800228c <inverseKinematic+0xc1c>)
 80020b4:	ed93 7b00 	vldr	d7, [r3]
 80020b8:	ee26 8b07 	vmul.f64	d8, d6, d7
 80020bc:	ed97 7b00 	vldr	d7, [r7]
 80020c0:	ed9f 6b65 	vldr	d6, [pc, #404]	; 8002258 <inverseKinematic+0xbe8>
 80020c4:	ee37 7b06 	vadd.f64	d7, d7, d6
 80020c8:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 80020cc:	eeb0 0b47 	vmov.f64	d0, d7
 80020d0:	f00f fc06 	bl	80118e0 <pow>
 80020d4:	eeb0 7b40 	vmov.f64	d7, d0
 80020d8:	ed9f 6b67 	vldr	d6, [pc, #412]	; 8002278 <inverseKinematic+0xc08>
 80020dc:	ee37 9b06 	vadd.f64	d9, d7, d6
 80020e0:	ed97 7b02 	vldr	d7, [r7, #8]
 80020e4:	ed9f 6b60 	vldr	d6, [pc, #384]	; 8002268 <inverseKinematic+0xbf8>
 80020e8:	ee37 7b06 	vadd.f64	d7, d7, d6
 80020ec:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 80020f0:	eeb0 0b47 	vmov.f64	d0, d7
 80020f4:	f00f fbf4 	bl	80118e0 <pow>
 80020f8:	eeb0 7b40 	vmov.f64	d7, d0
 80020fc:	ee39 9b07 	vadd.f64	d9, d9, d7
 8002100:	ed97 7b04 	vldr	d7, [r7, #16]
 8002104:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8002108:	eeb0 0b47 	vmov.f64	d0, d7
 800210c:	f00f fbe8 	bl	80118e0 <pow>
 8002110:	eeb0 7b40 	vmov.f64	d7, d0
 8002114:	ee39 7b07 	vadd.f64	d7, d9, d7
 8002118:	ed9f 6b49 	vldr	d6, [pc, #292]	; 8002240 <inverseKinematic+0xbd0>
 800211c:	ee37 5b46 	vsub.f64	d5, d7, d6
 8002120:	ed97 7b04 	vldr	d7, [r7, #16]
 8002124:	ee37 6b07 	vadd.f64	d6, d7, d7
 8002128:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800212c:	ee38 7b07 	vadd.f64	d7, d8, d7
 8002130:	4b62      	ldr	r3, [pc, #392]	; (80022bc <inverseKinematic+0xc4c>)
 8002132:	ed83 7b00 	vstr	d7, [r3]
	ZJ2_2 = YJ2_2 * (((2 * sqrt(3.0) * R * C30 + 2.0 * R * S30) + (-2 * sqrt(3) * (_Pfin.x + r * C30) - 2.0 * (_Pfin.y + r * S30))) / (2 * _Pfin.z)) + ((-pow(R, 2) + pow(L1, 2) + pow((_Pfin.x + r * C30), 2) + pow((_Pfin.y + r * S30), 2) + pow(_Pfin.z, 2) - pow(L2, 2)) / (2 * _Pfin.z));
 8002136:	ed97 7b00 	vldr	d7, [r7]
 800213a:	ed9f 6b47 	vldr	d6, [pc, #284]	; 8002258 <inverseKinematic+0xbe8>
 800213e:	ee37 7b06 	vadd.f64	d7, d7, d6
 8002142:	ed9f 6b47 	vldr	d6, [pc, #284]	; 8002260 <inverseKinematic+0xbf0>
 8002146:	ee27 6b06 	vmul.f64	d6, d7, d6
 800214a:	ed97 7b02 	vldr	d7, [r7, #8]
 800214e:	ed9f 5b46 	vldr	d5, [pc, #280]	; 8002268 <inverseKinematic+0xbf8>
 8002152:	ee37 7b05 	vadd.f64	d7, d7, d5
 8002156:	ee37 7b07 	vadd.f64	d7, d7, d7
 800215a:	ee36 7b47 	vsub.f64	d7, d6, d7
 800215e:	ed9f 6b44 	vldr	d6, [pc, #272]	; 8002270 <inverseKinematic+0xc00>
 8002162:	ee37 5b06 	vadd.f64	d5, d7, d6
 8002166:	ed97 7b04 	vldr	d7, [r7, #16]
 800216a:	ee37 7b07 	vadd.f64	d7, d7, d7
 800216e:	ee85 6b07 	vdiv.f64	d6, d5, d7
 8002172:	4b48      	ldr	r3, [pc, #288]	; (8002294 <inverseKinematic+0xc24>)
 8002174:	ed93 7b00 	vldr	d7, [r3]
 8002178:	ee26 8b07 	vmul.f64	d8, d6, d7
 800217c:	ed97 7b00 	vldr	d7, [r7]
 8002180:	ed9f 6b35 	vldr	d6, [pc, #212]	; 8002258 <inverseKinematic+0xbe8>
 8002184:	ee37 7b06 	vadd.f64	d7, d7, d6
 8002188:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 800218c:	eeb0 0b47 	vmov.f64	d0, d7
 8002190:	f00f fba6 	bl	80118e0 <pow>
 8002194:	eeb0 7b40 	vmov.f64	d7, d0
 8002198:	ed9f 6b37 	vldr	d6, [pc, #220]	; 8002278 <inverseKinematic+0xc08>
 800219c:	ee37 9b06 	vadd.f64	d9, d7, d6
 80021a0:	ed97 7b02 	vldr	d7, [r7, #8]
 80021a4:	ed9f 6b30 	vldr	d6, [pc, #192]	; 8002268 <inverseKinematic+0xbf8>
 80021a8:	ee37 7b06 	vadd.f64	d7, d7, d6
 80021ac:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 80021b0:	eeb0 0b47 	vmov.f64	d0, d7
 80021b4:	f00f fb94 	bl	80118e0 <pow>
 80021b8:	eeb0 7b40 	vmov.f64	d7, d0
 80021bc:	ee39 9b07 	vadd.f64	d9, d9, d7
 80021c0:	ed97 7b04 	vldr	d7, [r7, #16]
 80021c4:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 80021c8:	eeb0 0b47 	vmov.f64	d0, d7
 80021cc:	f00f fb88 	bl	80118e0 <pow>
 80021d0:	eeb0 7b40 	vmov.f64	d7, d0
 80021d4:	ee39 7b07 	vadd.f64	d7, d9, d7
 80021d8:	ed9f 6b19 	vldr	d6, [pc, #100]	; 8002240 <inverseKinematic+0xbd0>
 80021dc:	ee37 5b46 	vsub.f64	d5, d7, d6
 80021e0:	ed97 7b04 	vldr	d7, [r7, #16]
 80021e4:	ee37 6b07 	vadd.f64	d6, d7, d7
 80021e8:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80021ec:	ee38 7b07 	vadd.f64	d7, d8, d7
 80021f0:	4b33      	ldr	r3, [pc, #204]	; (80022c0 <inverseKinematic+0xc50>)
 80021f2:	ed83 7b00 	vstr	d7, [r3]
	ZJ3_1 = YJ3_1 * ((2 * sqrt(3.0) * (_Pfin.x + r * C150) - 2.0 * (_Pfin.y + r * S150) - 2.0 * sqrt(3) * R * C150 + 2.0 * R * S150) / (2.0 * _Pfin.z)) + ((pow((_Pfin.x + r * C150), 2.0) + pow((_Pfin.y + r * S150), 2) + pow(_Pfin.z, 2.0) - pow(L2, 2) - pow(R, 2) + pow(L1, 2)) / (2 * _Pfin.z));
 80021f6:	ed97 7b00 	vldr	d7, [r7]
 80021fa:	ed9f 6b17 	vldr	d6, [pc, #92]	; 8002258 <inverseKinematic+0xbe8>
 80021fe:	ee37 7b46 	vsub.f64	d7, d7, d6
 8002202:	ed9f 6b1f 	vldr	d6, [pc, #124]	; 8002280 <inverseKinematic+0xc10>
 8002206:	ee27 6b06 	vmul.f64	d6, d7, d6
 800220a:	ed97 7b02 	vldr	d7, [r7, #8]
 800220e:	ed9f 5b16 	vldr	d5, [pc, #88]	; 8002268 <inverseKinematic+0xbf8>
 8002212:	ee37 7b05 	vadd.f64	d7, d7, d5
 8002216:	ee37 7b07 	vadd.f64	d7, d7, d7
 800221a:	ee36 7b47 	vsub.f64	d7, d6, d7
 800221e:	e051      	b.n	80022c4 <inverseKinematic+0xc54>
 8002220:	e8584caa 	.word	0xe8584caa
 8002224:	3ffbb67a 	.word	0x3ffbb67a
 8002228:	e8584caa 	.word	0xe8584caa
 800222c:	bffbb67a 	.word	0xbffbb67a
 8002230:	1eb851ec 	.word	0x1eb851ec
 8002234:	3fb1eb85 	.word	0x3fb1eb85
 8002238:	24dd2f1b 	.word	0x24dd2f1b
 800223c:	3fc58106 	.word	0x3fc58106
 8002240:	70a3d70a 	.word	0x70a3d70a
 8002244:	3fd70a3d 	.word	0x3fd70a3d
 8002248:	93d96639 	.word	0x93d96639
 800224c:	3f9ce6c0 	.word	0x3f9ce6c0
 8002250:	47ae147c 	.word	0x47ae147c
 8002254:	3fa47ae1 	.word	0x3fa47ae1
 8002258:	5625749b 	.word	0x5625749b
 800225c:	3faf09d1 	.word	0x3faf09d1
 8002260:	e8584caa 	.word	0xe8584caa
 8002264:	c00bb67a 	.word	0xc00bb67a
 8002268:	1eb851ec 	.word	0x1eb851ec
 800226c:	3fa1eb85 	.word	0x3fa1eb85
 8002270:	24dd2f1d 	.word	0x24dd2f1d
 8002274:	3fe58106 	.word	0x3fe58106
 8002278:	f705857e 	.word	0xf705857e
 800227c:	3f881e03 	.word	0x3f881e03
 8002280:	e8584caa 	.word	0xe8584caa
 8002284:	400bb67a 	.word	0x400bb67a
 8002288:	240002b0 	.word	0x240002b0
 800228c:	24000300 	.word	0x24000300
 8002290:	240002f0 	.word	0x240002f0
 8002294:	24000308 	.word	0x24000308
 8002298:	240002f8 	.word	0x240002f8
 800229c:	24000348 	.word	0x24000348
 80022a0:	24000338 	.word	0x24000338
 80022a4:	24000350 	.word	0x24000350
 80022a8:	24000340 	.word	0x24000340
 80022ac:	240002b8 	.word	0x240002b8
 80022b0:	240002c8 	.word	0x240002c8
 80022b4:	240002c0 	.word	0x240002c0
 80022b8:	240002d0 	.word	0x240002d0
 80022bc:	24000310 	.word	0x24000310
 80022c0:	24000318 	.word	0x24000318
 80022c4:	ed9f 6b90 	vldr	d6, [pc, #576]	; 8002508 <inverseKinematic+0xe98>
 80022c8:	ee37 7b06 	vadd.f64	d7, d7, d6
 80022cc:	ed9f 6b90 	vldr	d6, [pc, #576]	; 8002510 <inverseKinematic+0xea0>
 80022d0:	ee37 5b06 	vadd.f64	d5, d7, d6
 80022d4:	ed97 7b04 	vldr	d7, [r7, #16]
 80022d8:	ee37 7b07 	vadd.f64	d7, d7, d7
 80022dc:	ee85 6b07 	vdiv.f64	d6, d5, d7
 80022e0:	4b9f      	ldr	r3, [pc, #636]	; (8002560 <inverseKinematic+0xef0>)
 80022e2:	ed93 7b00 	vldr	d7, [r3]
 80022e6:	ee26 8b07 	vmul.f64	d8, d6, d7
 80022ea:	ed97 7b00 	vldr	d7, [r7]
 80022ee:	ed9f 6b8a 	vldr	d6, [pc, #552]	; 8002518 <inverseKinematic+0xea8>
 80022f2:	ee37 7b46 	vsub.f64	d7, d7, d6
 80022f6:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 80022fa:	eeb0 0b47 	vmov.f64	d0, d7
 80022fe:	f00f faef 	bl	80118e0 <pow>
 8002302:	eeb0 9b40 	vmov.f64	d9, d0
 8002306:	ed97 7b02 	vldr	d7, [r7, #8]
 800230a:	ed9f 6b85 	vldr	d6, [pc, #532]	; 8002520 <inverseKinematic+0xeb0>
 800230e:	ee37 7b06 	vadd.f64	d7, d7, d6
 8002312:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8002316:	eeb0 0b47 	vmov.f64	d0, d7
 800231a:	f00f fae1 	bl	80118e0 <pow>
 800231e:	eeb0 7b40 	vmov.f64	d7, d0
 8002322:	ee39 9b07 	vadd.f64	d9, d9, d7
 8002326:	ed97 7b04 	vldr	d7, [r7, #16]
 800232a:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 800232e:	eeb0 0b47 	vmov.f64	d0, d7
 8002332:	f00f fad5 	bl	80118e0 <pow>
 8002336:	eeb0 7b40 	vmov.f64	d7, d0
 800233a:	ee39 7b07 	vadd.f64	d7, d9, d7
 800233e:	ed9f 6b7a 	vldr	d6, [pc, #488]	; 8002528 <inverseKinematic+0xeb8>
 8002342:	ee37 7b46 	vsub.f64	d7, d7, d6
 8002346:	ed9f 6b7a 	vldr	d6, [pc, #488]	; 8002530 <inverseKinematic+0xec0>
 800234a:	ee37 7b46 	vsub.f64	d7, d7, d6
 800234e:	ed9f 6b7a 	vldr	d6, [pc, #488]	; 8002538 <inverseKinematic+0xec8>
 8002352:	ee37 5b06 	vadd.f64	d5, d7, d6
 8002356:	ed97 7b04 	vldr	d7, [r7, #16]
 800235a:	ee37 6b07 	vadd.f64	d6, d7, d7
 800235e:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8002362:	ee38 7b07 	vadd.f64	d7, d8, d7
 8002366:	4b7f      	ldr	r3, [pc, #508]	; (8002564 <inverseKinematic+0xef4>)
 8002368:	ed83 7b00 	vstr	d7, [r3]
	ZJ3_2 = YJ3_2 * ((2 * sqrt(3.0) * (_Pfin.x + r * C150) - 2.0 * (_Pfin.y + r * S150) - 2.0 * sqrt(3) * R * C150 + 2.0 * R * S150) / (2.0 * _Pfin.z)) + ((pow((_Pfin.x + r * C150), 2.0) + pow((_Pfin.y + r * S150), 2) + pow(_Pfin.z, 2) - pow(L2, 2) - pow(R, 2) + pow(L1, 2)) / (2 * _Pfin.z));
 800236c:	ed97 7b00 	vldr	d7, [r7]
 8002370:	ed9f 6b69 	vldr	d6, [pc, #420]	; 8002518 <inverseKinematic+0xea8>
 8002374:	ee37 7b46 	vsub.f64	d7, d7, d6
 8002378:	ed9f 6b71 	vldr	d6, [pc, #452]	; 8002540 <inverseKinematic+0xed0>
 800237c:	ee27 6b06 	vmul.f64	d6, d7, d6
 8002380:	ed97 7b02 	vldr	d7, [r7, #8]
 8002384:	ed9f 5b66 	vldr	d5, [pc, #408]	; 8002520 <inverseKinematic+0xeb0>
 8002388:	ee37 7b05 	vadd.f64	d7, d7, d5
 800238c:	ee37 7b07 	vadd.f64	d7, d7, d7
 8002390:	ee36 7b47 	vsub.f64	d7, d6, d7
 8002394:	ed9f 6b5c 	vldr	d6, [pc, #368]	; 8002508 <inverseKinematic+0xe98>
 8002398:	ee37 7b06 	vadd.f64	d7, d7, d6
 800239c:	ed9f 6b5c 	vldr	d6, [pc, #368]	; 8002510 <inverseKinematic+0xea0>
 80023a0:	ee37 5b06 	vadd.f64	d5, d7, d6
 80023a4:	ed97 7b04 	vldr	d7, [r7, #16]
 80023a8:	ee37 7b07 	vadd.f64	d7, d7, d7
 80023ac:	ee85 6b07 	vdiv.f64	d6, d5, d7
 80023b0:	4b6d      	ldr	r3, [pc, #436]	; (8002568 <inverseKinematic+0xef8>)
 80023b2:	ed93 7b00 	vldr	d7, [r3]
 80023b6:	ee26 8b07 	vmul.f64	d8, d6, d7
 80023ba:	ed97 7b00 	vldr	d7, [r7]
 80023be:	ed9f 6b56 	vldr	d6, [pc, #344]	; 8002518 <inverseKinematic+0xea8>
 80023c2:	ee37 7b46 	vsub.f64	d7, d7, d6
 80023c6:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 80023ca:	eeb0 0b47 	vmov.f64	d0, d7
 80023ce:	f00f fa87 	bl	80118e0 <pow>
 80023d2:	eeb0 9b40 	vmov.f64	d9, d0
 80023d6:	ed97 7b02 	vldr	d7, [r7, #8]
 80023da:	ed9f 6b51 	vldr	d6, [pc, #324]	; 8002520 <inverseKinematic+0xeb0>
 80023de:	ee37 7b06 	vadd.f64	d7, d7, d6
 80023e2:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 80023e6:	eeb0 0b47 	vmov.f64	d0, d7
 80023ea:	f00f fa79 	bl	80118e0 <pow>
 80023ee:	eeb0 7b40 	vmov.f64	d7, d0
 80023f2:	ee39 9b07 	vadd.f64	d9, d9, d7
 80023f6:	ed97 7b04 	vldr	d7, [r7, #16]
 80023fa:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 80023fe:	eeb0 0b47 	vmov.f64	d0, d7
 8002402:	f00f fa6d 	bl	80118e0 <pow>
 8002406:	eeb0 7b40 	vmov.f64	d7, d0
 800240a:	ee39 7b07 	vadd.f64	d7, d9, d7
 800240e:	ed9f 6b46 	vldr	d6, [pc, #280]	; 8002528 <inverseKinematic+0xeb8>
 8002412:	ee37 7b46 	vsub.f64	d7, d7, d6
 8002416:	ed9f 6b46 	vldr	d6, [pc, #280]	; 8002530 <inverseKinematic+0xec0>
 800241a:	ee37 7b46 	vsub.f64	d7, d7, d6
 800241e:	ed9f 6b46 	vldr	d6, [pc, #280]	; 8002538 <inverseKinematic+0xec8>
 8002422:	ee37 5b06 	vadd.f64	d5, d7, d6
 8002426:	ed97 7b04 	vldr	d7, [r7, #16]
 800242a:	ee37 6b07 	vadd.f64	d6, d7, d7
 800242e:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8002432:	ee38 7b07 	vadd.f64	d7, d8, d7
 8002436:	4b4d      	ldr	r3, [pc, #308]	; (800256c <inverseKinematic+0xefc>)
 8002438:	ed83 7b00 	vstr	d7, [r3]

	motor1.theta = -1.0 * asin(ZJ1_1 / L1);
 800243c:	4b4c      	ldr	r3, [pc, #304]	; (8002570 <inverseKinematic+0xf00>)
 800243e:	ed93 7b00 	vldr	d7, [r3]
 8002442:	ed9f 5b41 	vldr	d5, [pc, #260]	; 8002548 <inverseKinematic+0xed8>
 8002446:	ee87 6b05 	vdiv.f64	d6, d7, d5
 800244a:	eeb0 0b46 	vmov.f64	d0, d6
 800244e:	f00f fc99 	bl	8011d84 <asin>
 8002452:	eeb0 7b40 	vmov.f64	d7, d0
 8002456:	eeb1 7b47 	vneg.f64	d7, d7
 800245a:	4b46      	ldr	r3, [pc, #280]	; (8002574 <inverseKinematic+0xf04>)
 800245c:	ed83 7b00 	vstr	d7, [r3]
	motor1.theta = motor1.theta * RAD_TO_DEG;
 8002460:	4b44      	ldr	r3, [pc, #272]	; (8002574 <inverseKinematic+0xf04>)
 8002462:	ed93 7b00 	vldr	d7, [r3]
 8002466:	ed9f 6b3a 	vldr	d6, [pc, #232]	; 8002550 <inverseKinematic+0xee0>
 800246a:	ee27 6b06 	vmul.f64	d6, d7, d6
 800246e:	ed9f 5b3a 	vldr	d5, [pc, #232]	; 8002558 <inverseKinematic+0xee8>
 8002472:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8002476:	4b3f      	ldr	r3, [pc, #252]	; (8002574 <inverseKinematic+0xf04>)
 8002478:	ed83 7b00 	vstr	d7, [r3]
	motor2.theta = -1.0 * asin(ZJ2_1 / L1);
 800247c:	4b3e      	ldr	r3, [pc, #248]	; (8002578 <inverseKinematic+0xf08>)
 800247e:	ed93 7b00 	vldr	d7, [r3]
 8002482:	ed9f 5b31 	vldr	d5, [pc, #196]	; 8002548 <inverseKinematic+0xed8>
 8002486:	ee87 6b05 	vdiv.f64	d6, d7, d5
 800248a:	eeb0 0b46 	vmov.f64	d0, d6
 800248e:	f00f fc79 	bl	8011d84 <asin>
 8002492:	eeb0 7b40 	vmov.f64	d7, d0
 8002496:	eeb1 7b47 	vneg.f64	d7, d7
 800249a:	4b38      	ldr	r3, [pc, #224]	; (800257c <inverseKinematic+0xf0c>)
 800249c:	ed83 7b00 	vstr	d7, [r3]
	motor2.theta = motor2.theta * RAD_TO_DEG;
 80024a0:	4b36      	ldr	r3, [pc, #216]	; (800257c <inverseKinematic+0xf0c>)
 80024a2:	ed93 7b00 	vldr	d7, [r3]
 80024a6:	ed9f 6b2a 	vldr	d6, [pc, #168]	; 8002550 <inverseKinematic+0xee0>
 80024aa:	ee27 6b06 	vmul.f64	d6, d7, d6
 80024ae:	ed9f 5b2a 	vldr	d5, [pc, #168]	; 8002558 <inverseKinematic+0xee8>
 80024b2:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80024b6:	4b31      	ldr	r3, [pc, #196]	; (800257c <inverseKinematic+0xf0c>)
 80024b8:	ed83 7b00 	vstr	d7, [r3]
	motor3.theta = -1.0 * asin(ZJ3_1 / L1);
 80024bc:	4b29      	ldr	r3, [pc, #164]	; (8002564 <inverseKinematic+0xef4>)
 80024be:	ed93 7b00 	vldr	d7, [r3]
 80024c2:	ed9f 5b21 	vldr	d5, [pc, #132]	; 8002548 <inverseKinematic+0xed8>
 80024c6:	ee87 6b05 	vdiv.f64	d6, d7, d5
 80024ca:	eeb0 0b46 	vmov.f64	d0, d6
 80024ce:	f00f fc59 	bl	8011d84 <asin>
 80024d2:	eeb0 7b40 	vmov.f64	d7, d0
 80024d6:	eeb1 7b47 	vneg.f64	d7, d7
 80024da:	4b29      	ldr	r3, [pc, #164]	; (8002580 <inverseKinematic+0xf10>)
 80024dc:	ed83 7b00 	vstr	d7, [r3]
	motor3.theta = motor3.theta * RAD_TO_DEG;
 80024e0:	4b27      	ldr	r3, [pc, #156]	; (8002580 <inverseKinematic+0xf10>)
 80024e2:	ed93 7b00 	vldr	d7, [r3]
 80024e6:	ed9f 6b1a 	vldr	d6, [pc, #104]	; 8002550 <inverseKinematic+0xee0>
 80024ea:	ee27 6b06 	vmul.f64	d6, d7, d6
 80024ee:	ed9f 5b1a 	vldr	d5, [pc, #104]	; 8002558 <inverseKinematic+0xee8>
 80024f2:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80024f6:	4b22      	ldr	r3, [pc, #136]	; (8002580 <inverseKinematic+0xf10>)
 80024f8:	ed83 7b00 	vstr	d7, [r3]
}
 80024fc:	bf00      	nop
 80024fe:	3718      	adds	r7, #24
 8002500:	46bd      	mov	sp, r7
 8002502:	ecbd 8b04 	vpop	{d8-d9}
 8002506:	bd80      	pop	{r7, pc}
 8002508:	9ba5e356 	.word	0x9ba5e356
 800250c:	3fe020c4 	.word	0x3fe020c4
 8002510:	24dd2f1b 	.word	0x24dd2f1b
 8002514:	3fc58106 	.word	0x3fc58106
 8002518:	5625749b 	.word	0x5625749b
 800251c:	3faf09d1 	.word	0x3faf09d1
 8002520:	1eb851ec 	.word	0x1eb851ec
 8002524:	3fa1eb85 	.word	0x3fa1eb85
 8002528:	70a3d70a 	.word	0x70a3d70a
 800252c:	3fd70a3d 	.word	0x3fd70a3d
 8002530:	93d96639 	.word	0x93d96639
 8002534:	3f9ce6c0 	.word	0x3f9ce6c0
 8002538:	47ae147c 	.word	0x47ae147c
 800253c:	3fa47ae1 	.word	0x3fa47ae1
 8002540:	e8584caa 	.word	0xe8584caa
 8002544:	400bb67a 	.word	0x400bb67a
 8002548:	9999999a 	.word	0x9999999a
 800254c:	3fc99999 	.word	0x3fc99999
 8002550:	00000000 	.word	0x00000000
 8002554:	40668000 	.word	0x40668000
 8002558:	54442eea 	.word	0x54442eea
 800255c:	400921fb 	.word	0x400921fb
 8002560:	24000348 	.word	0x24000348
 8002564:	24000358 	.word	0x24000358
 8002568:	24000350 	.word	0x24000350
 800256c:	24000360 	.word	0x24000360
 8002570:	240002c8 	.word	0x240002c8
 8002574:	24000368 	.word	0x24000368
 8002578:	24000310 	.word	0x24000310
 800257c:	240003b0 	.word	0x240003b0
 8002580:	240003f8 	.word	0x240003f8

08002584 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002584:	b580      	push	{r7, lr}
 8002586:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002588:	f003 fffc 	bl	8006584 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800258c:	f000 f81c 	bl	80025c8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002590:	f7fe fa74 	bl	8000a7c <MX_GPIO_Init>
  MX_TIM2_Init();
 8002594:	f001 fbc6 	bl	8003d24 <MX_TIM2_Init>
  MX_USART3_UART_Init();
 8002598:	f003 fe52 	bl	8006240 <MX_USART3_UART_Init>
  MX_TIM12_Init();
 800259c:	f001 fd64 	bl	8004068 <MX_TIM12_Init>
  MX_TIM13_Init();
 80025a0:	f001 fdc4 	bl	800412c <MX_TIM13_Init>
  MX_TIM14_Init();
 80025a4:	f001 fe0e 	bl	80041c4 <MX_TIM14_Init>
  MX_TIM5_Init();
 80025a8:	f001 fd10 	bl	8003fcc <MX_TIM5_Init>
  MX_TIM15_Init();
 80025ac:	f001 fe56 	bl	800425c <MX_TIM15_Init>
  MX_USART2_UART_Init();
 80025b0:	f003 fdfa 	bl	80061a8 <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 80025b4:	f003 fdac 	bl	8006110 <MX_USART1_UART_Init>
  MX_TIM3_Init();
 80025b8:	f001 fc24 	bl	8003e04 <MX_TIM3_Init>
  MX_TIM4_Init();
 80025bc:	f001 fc94 	bl	8003ee8 <MX_TIM4_Init>

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

		statesMachineLoop();
 80025c0:	f000 fc16 	bl	8002df0 <statesMachineLoop>
 80025c4:	e7fc      	b.n	80025c0 <main+0x3c>
	...

080025c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80025c8:	b580      	push	{r7, lr}
 80025ca:	b09c      	sub	sp, #112	; 0x70
 80025cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80025ce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80025d2:	224c      	movs	r2, #76	; 0x4c
 80025d4:	2100      	movs	r1, #0
 80025d6:	4618      	mov	r0, r3
 80025d8:	f00c fc32 	bl	800ee40 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80025dc:	1d3b      	adds	r3, r7, #4
 80025de:	2220      	movs	r2, #32
 80025e0:	2100      	movs	r1, #0
 80025e2:	4618      	mov	r0, r3
 80025e4:	f00c fc2c 	bl	800ee40 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80025e8:	2002      	movs	r0, #2
 80025ea:	f005 f92f 	bl	800784c <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80025ee:	2300      	movs	r3, #0
 80025f0:	603b      	str	r3, [r7, #0]
 80025f2:	4b32      	ldr	r3, [pc, #200]	; (80026bc <SystemClock_Config+0xf4>)
 80025f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025f6:	4a31      	ldr	r2, [pc, #196]	; (80026bc <SystemClock_Config+0xf4>)
 80025f8:	f023 0301 	bic.w	r3, r3, #1
 80025fc:	62d3      	str	r3, [r2, #44]	; 0x2c
 80025fe:	4b2f      	ldr	r3, [pc, #188]	; (80026bc <SystemClock_Config+0xf4>)
 8002600:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002602:	f003 0301 	and.w	r3, r3, #1
 8002606:	603b      	str	r3, [r7, #0]
 8002608:	4b2d      	ldr	r3, [pc, #180]	; (80026c0 <SystemClock_Config+0xf8>)
 800260a:	699b      	ldr	r3, [r3, #24]
 800260c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8002610:	4a2b      	ldr	r2, [pc, #172]	; (80026c0 <SystemClock_Config+0xf8>)
 8002612:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002616:	6193      	str	r3, [r2, #24]
 8002618:	4b29      	ldr	r3, [pc, #164]	; (80026c0 <SystemClock_Config+0xf8>)
 800261a:	699b      	ldr	r3, [r3, #24]
 800261c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002620:	603b      	str	r3, [r7, #0]
 8002622:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8002624:	bf00      	nop
 8002626:	4b26      	ldr	r3, [pc, #152]	; (80026c0 <SystemClock_Config+0xf8>)
 8002628:	699b      	ldr	r3, [r3, #24]
 800262a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800262e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002632:	d1f8      	bne.n	8002626 <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002634:	2302      	movs	r3, #2
 8002636:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8002638:	2301      	movs	r3, #1
 800263a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800263c:	2340      	movs	r3, #64	; 0x40
 800263e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002640:	2302      	movs	r3, #2
 8002642:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002644:	2300      	movs	r3, #0
 8002646:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8002648:	2304      	movs	r3, #4
 800264a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 16;
 800264c:	2310      	movs	r3, #16
 800264e:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8002650:	2302      	movs	r3, #2
 8002652:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8002654:	2302      	movs	r3, #2
 8002656:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8002658:	2302      	movs	r3, #2
 800265a:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 800265c:	230c      	movs	r3, #12
 800265e:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8002660:	2300      	movs	r3, #0
 8002662:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8002664:	2300      	movs	r3, #0
 8002666:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002668:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800266c:	4618      	mov	r0, r3
 800266e:	f005 f927 	bl	80078c0 <HAL_RCC_OscConfig>
 8002672:	4603      	mov	r3, r0
 8002674:	2b00      	cmp	r3, #0
 8002676:	d001      	beq.n	800267c <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8002678:	f000 faaa 	bl	8002bd0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800267c:	233f      	movs	r3, #63	; 0x3f
 800267e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002680:	2303      	movs	r3, #3
 8002682:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8002684:	2300      	movs	r3, #0
 8002686:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8002688:	2308      	movs	r3, #8
 800268a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 800268c:	2300      	movs	r3, #0
 800268e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8002690:	2340      	movs	r3, #64	; 0x40
 8002692:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8002694:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002698:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 800269a:	2300      	movs	r3, #0
 800269c:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800269e:	1d3b      	adds	r3, r7, #4
 80026a0:	2101      	movs	r1, #1
 80026a2:	4618      	mov	r0, r3
 80026a4:	f005 fd3a 	bl	800811c <HAL_RCC_ClockConfig>
 80026a8:	4603      	mov	r3, r0
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d001      	beq.n	80026b2 <SystemClock_Config+0xea>
  {
    Error_Handler();
 80026ae:	f000 fa8f 	bl	8002bd0 <Error_Handler>
  }
}
 80026b2:	bf00      	nop
 80026b4:	3770      	adds	r7, #112	; 0x70
 80026b6:	46bd      	mov	sp, r7
 80026b8:	bd80      	pop	{r7, pc}
 80026ba:	bf00      	nop
 80026bc:	58000400 	.word	0x58000400
 80026c0:	58024800 	.word	0x58024800

080026c4 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 80026c4:	b580      	push	{r7, lr}
 80026c6:	b082      	sub	sp, #8
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	4603      	mov	r3, r0
 80026cc:	80fb      	strh	r3, [r7, #6]

	test++;
 80026ce:	4bab      	ldr	r3, [pc, #684]	; (800297c <HAL_GPIO_EXTI_Callback+0x2b8>)
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	3301      	adds	r3, #1
 80026d4:	4aa9      	ldr	r2, [pc, #676]	; (800297c <HAL_GPIO_EXTI_Callback+0x2b8>)
 80026d6:	6013      	str	r3, [r2, #0]
	switch( GPIO_Pin){
 80026d8:	88fb      	ldrh	r3, [r7, #6]
 80026da:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80026de:	f000 8133 	beq.w	8002948 <HAL_GPIO_EXTI_Callback+0x284>
 80026e2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80026e6:	f300 8143 	bgt.w	8002970 <HAL_GPIO_EXTI_Callback+0x2ac>
 80026ea:	2b20      	cmp	r3, #32
 80026ec:	dc4a      	bgt.n	8002784 <HAL_GPIO_EXTI_Callback+0xc0>
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	f340 813e 	ble.w	8002970 <HAL_GPIO_EXTI_Callback+0x2ac>
 80026f4:	3b01      	subs	r3, #1
 80026f6:	2b1f      	cmp	r3, #31
 80026f8:	f200 813a 	bhi.w	8002970 <HAL_GPIO_EXTI_Callback+0x2ac>
 80026fc:	a201      	add	r2, pc, #4	; (adr r2, 8002704 <HAL_GPIO_EXTI_Callback+0x40>)
 80026fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002702:	bf00      	nop
 8002704:	080027d7 	.word	0x080027d7
 8002708:	08002971 	.word	0x08002971
 800270c:	08002971 	.word	0x08002971
 8002710:	0800286b 	.word	0x0800286b
 8002714:	08002971 	.word	0x08002971
 8002718:	08002971 	.word	0x08002971
 800271c:	08002971 	.word	0x08002971
 8002720:	08002821 	.word	0x08002821
 8002724:	08002971 	.word	0x08002971
 8002728:	08002971 	.word	0x08002971
 800272c:	08002971 	.word	0x08002971
 8002730:	08002971 	.word	0x08002971
 8002734:	08002971 	.word	0x08002971
 8002738:	08002971 	.word	0x08002971
 800273c:	08002971 	.word	0x08002971
 8002740:	080028ff 	.word	0x080028ff
 8002744:	08002971 	.word	0x08002971
 8002748:	08002971 	.word	0x08002971
 800274c:	08002971 	.word	0x08002971
 8002750:	08002971 	.word	0x08002971
 8002754:	08002971 	.word	0x08002971
 8002758:	08002971 	.word	0x08002971
 800275c:	08002971 	.word	0x08002971
 8002760:	08002971 	.word	0x08002971
 8002764:	08002971 	.word	0x08002971
 8002768:	08002971 	.word	0x08002971
 800276c:	08002971 	.word	0x08002971
 8002770:	08002971 	.word	0x08002971
 8002774:	08002971 	.word	0x08002971
 8002778:	08002971 	.word	0x08002971
 800277c:	08002971 	.word	0x08002971
 8002780:	080028b5 	.word	0x080028b5
 8002784:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002788:	f040 80f2 	bne.w	8002970 <HAL_GPIO_EXTI_Callback+0x2ac>

		 case E_EndStop1_Inf_Pin:

			 Stop_PWM_MOTOR_1;
 800278c:	2100      	movs	r1, #0
 800278e:	487c      	ldr	r0, [pc, #496]	; (8002980 <HAL_GPIO_EXTI_Callback+0x2bc>)
 8002790:	f007 febe 	bl	800a510 <HAL_TIM_PWM_Stop>
			 Stop_PWM_MOTOR_2;
 8002794:	2100      	movs	r1, #0
 8002796:	487b      	ldr	r0, [pc, #492]	; (8002984 <HAL_GPIO_EXTI_Callback+0x2c0>)
 8002798:	f007 feba 	bl	800a510 <HAL_TIM_PWM_Stop>
			 Stop_PWM_MOTOR_3;
 800279c:	2100      	movs	r1, #0
 800279e:	487a      	ldr	r0, [pc, #488]	; (8002988 <HAL_GPIO_EXTI_Callback+0x2c4>)
 80027a0:	f007 feb6 	bl	800a510 <HAL_TIM_PWM_Stop>

			 HAL_TIM_Base_Stop_IT(&htim15);
 80027a4:	4879      	ldr	r0, [pc, #484]	; (800298c <HAL_GPIO_EXTI_Callback+0x2c8>)
 80027a6:	f007 fd15 	bl	800a1d4 <HAL_TIM_Base_Stop_IT>
			 HAL_TIM_Base_Stop(&htim5);
 80027aa:	4879      	ldr	r0, [pc, #484]	; (8002990 <HAL_GPIO_EXTI_Callback+0x2cc>)
 80027ac:	f007 fc72 	bl	800a094 <HAL_TIM_Base_Stop>

			 HAL_TIM_IC_Stop(&htim2, TIM_CHANNEL_1);
 80027b0:	2100      	movs	r1, #0
 80027b2:	4878      	ldr	r0, [pc, #480]	; (8002994 <HAL_GPIO_EXTI_Callback+0x2d0>)
 80027b4:	f007 ffa3 	bl	800a6fe <HAL_TIM_IC_Stop>
			 HAL_TIM_IC_Stop(&htim3, TIM_CHANNEL_1);
 80027b8:	2100      	movs	r1, #0
 80027ba:	4877      	ldr	r0, [pc, #476]	; (8002998 <HAL_GPIO_EXTI_Callback+0x2d4>)
 80027bc:	f007 ff9f 	bl	800a6fe <HAL_TIM_IC_Stop>
			 HAL_TIM_IC_Stop(&htim4, TIM_CHANNEL_1);
 80027c0:	2100      	movs	r1, #0
 80027c2:	4876      	ldr	r0, [pc, #472]	; (800299c <HAL_GPIO_EXTI_Callback+0x2d8>)
 80027c4:	f007 ff9b 	bl	800a6fe <HAL_TIM_IC_Stop>

			 endStopAlarmInf = true;
 80027c8:	4b75      	ldr	r3, [pc, #468]	; (80029a0 <HAL_GPIO_EXTI_Callback+0x2dc>)
 80027ca:	2201      	movs	r2, #1
 80027cc:	701a      	strb	r2, [r3, #0]
			 state = FAULT;
 80027ce:	4b75      	ldr	r3, [pc, #468]	; (80029a4 <HAL_GPIO_EXTI_Callback+0x2e0>)
 80027d0:	2205      	movs	r2, #5
 80027d2:	701a      	strb	r2, [r3, #0]
			 break;
 80027d4:	e0cd      	b.n	8002972 <HAL_GPIO_EXTI_Callback+0x2ae>

		 case E_EndStop1_Sup_Pin:
			 Stop_PWM_MOTOR_1;
 80027d6:	2100      	movs	r1, #0
 80027d8:	4869      	ldr	r0, [pc, #420]	; (8002980 <HAL_GPIO_EXTI_Callback+0x2bc>)
 80027da:	f007 fe99 	bl	800a510 <HAL_TIM_PWM_Stop>
			 Stop_PWM_MOTOR_2;
 80027de:	2100      	movs	r1, #0
 80027e0:	4868      	ldr	r0, [pc, #416]	; (8002984 <HAL_GPIO_EXTI_Callback+0x2c0>)
 80027e2:	f007 fe95 	bl	800a510 <HAL_TIM_PWM_Stop>
			 Stop_PWM_MOTOR_3;
 80027e6:	2100      	movs	r1, #0
 80027e8:	4867      	ldr	r0, [pc, #412]	; (8002988 <HAL_GPIO_EXTI_Callback+0x2c4>)
 80027ea:	f007 fe91 	bl	800a510 <HAL_TIM_PWM_Stop>

			 HAL_TIM_Base_Stop_IT(&htim15);
 80027ee:	4867      	ldr	r0, [pc, #412]	; (800298c <HAL_GPIO_EXTI_Callback+0x2c8>)
 80027f0:	f007 fcf0 	bl	800a1d4 <HAL_TIM_Base_Stop_IT>
			 HAL_TIM_Base_Stop(&htim5);
 80027f4:	4866      	ldr	r0, [pc, #408]	; (8002990 <HAL_GPIO_EXTI_Callback+0x2cc>)
 80027f6:	f007 fc4d 	bl	800a094 <HAL_TIM_Base_Stop>

			 HAL_TIM_IC_Stop(&htim2, TIM_CHANNEL_1);
 80027fa:	2100      	movs	r1, #0
 80027fc:	4865      	ldr	r0, [pc, #404]	; (8002994 <HAL_GPIO_EXTI_Callback+0x2d0>)
 80027fe:	f007 ff7e 	bl	800a6fe <HAL_TIM_IC_Stop>
			 HAL_TIM_IC_Stop(&htim3, TIM_CHANNEL_1);
 8002802:	2100      	movs	r1, #0
 8002804:	4864      	ldr	r0, [pc, #400]	; (8002998 <HAL_GPIO_EXTI_Callback+0x2d4>)
 8002806:	f007 ff7a 	bl	800a6fe <HAL_TIM_IC_Stop>
			 HAL_TIM_IC_Stop(&htim4, TIM_CHANNEL_1);
 800280a:	2100      	movs	r1, #0
 800280c:	4863      	ldr	r0, [pc, #396]	; (800299c <HAL_GPIO_EXTI_Callback+0x2d8>)
 800280e:	f007 ff76 	bl	800a6fe <HAL_TIM_IC_Stop>

			 endStopAlarmSup = true;
 8002812:	4b65      	ldr	r3, [pc, #404]	; (80029a8 <HAL_GPIO_EXTI_Callback+0x2e4>)
 8002814:	2201      	movs	r2, #1
 8002816:	701a      	strb	r2, [r3, #0]
			 state = FAULT;
 8002818:	4b62      	ldr	r3, [pc, #392]	; (80029a4 <HAL_GPIO_EXTI_Callback+0x2e0>)
 800281a:	2205      	movs	r2, #5
 800281c:	701a      	strb	r2, [r3, #0]
			 break;
 800281e:	e0a8      	b.n	8002972 <HAL_GPIO_EXTI_Callback+0x2ae>

		 case E_EndStop2_Inf_Pin:
			 Stop_PWM_MOTOR_1;
 8002820:	2100      	movs	r1, #0
 8002822:	4857      	ldr	r0, [pc, #348]	; (8002980 <HAL_GPIO_EXTI_Callback+0x2bc>)
 8002824:	f007 fe74 	bl	800a510 <HAL_TIM_PWM_Stop>
			 Stop_PWM_MOTOR_2;
 8002828:	2100      	movs	r1, #0
 800282a:	4856      	ldr	r0, [pc, #344]	; (8002984 <HAL_GPIO_EXTI_Callback+0x2c0>)
 800282c:	f007 fe70 	bl	800a510 <HAL_TIM_PWM_Stop>
			 Stop_PWM_MOTOR_3;
 8002830:	2100      	movs	r1, #0
 8002832:	4855      	ldr	r0, [pc, #340]	; (8002988 <HAL_GPIO_EXTI_Callback+0x2c4>)
 8002834:	f007 fe6c 	bl	800a510 <HAL_TIM_PWM_Stop>

			 HAL_TIM_Base_Stop_IT(&htim15);
 8002838:	4854      	ldr	r0, [pc, #336]	; (800298c <HAL_GPIO_EXTI_Callback+0x2c8>)
 800283a:	f007 fccb 	bl	800a1d4 <HAL_TIM_Base_Stop_IT>
			 HAL_TIM_Base_Stop(&htim5);
 800283e:	4854      	ldr	r0, [pc, #336]	; (8002990 <HAL_GPIO_EXTI_Callback+0x2cc>)
 8002840:	f007 fc28 	bl	800a094 <HAL_TIM_Base_Stop>

			 HAL_TIM_IC_Stop(&htim2, TIM_CHANNEL_1);
 8002844:	2100      	movs	r1, #0
 8002846:	4853      	ldr	r0, [pc, #332]	; (8002994 <HAL_GPIO_EXTI_Callback+0x2d0>)
 8002848:	f007 ff59 	bl	800a6fe <HAL_TIM_IC_Stop>
			 HAL_TIM_IC_Stop(&htim3, TIM_CHANNEL_1);
 800284c:	2100      	movs	r1, #0
 800284e:	4852      	ldr	r0, [pc, #328]	; (8002998 <HAL_GPIO_EXTI_Callback+0x2d4>)
 8002850:	f007 ff55 	bl	800a6fe <HAL_TIM_IC_Stop>
			 HAL_TIM_IC_Stop(&htim4, TIM_CHANNEL_1);
 8002854:	2100      	movs	r1, #0
 8002856:	4851      	ldr	r0, [pc, #324]	; (800299c <HAL_GPIO_EXTI_Callback+0x2d8>)
 8002858:	f007 ff51 	bl	800a6fe <HAL_TIM_IC_Stop>

			 endStopAlarmInf = true;
 800285c:	4b50      	ldr	r3, [pc, #320]	; (80029a0 <HAL_GPIO_EXTI_Callback+0x2dc>)
 800285e:	2201      	movs	r2, #1
 8002860:	701a      	strb	r2, [r3, #0]
			 state = FAULT;
 8002862:	4b50      	ldr	r3, [pc, #320]	; (80029a4 <HAL_GPIO_EXTI_Callback+0x2e0>)
 8002864:	2205      	movs	r2, #5
 8002866:	701a      	strb	r2, [r3, #0]
			 break;
 8002868:	e083      	b.n	8002972 <HAL_GPIO_EXTI_Callback+0x2ae>


		 case E_EndStop2_Sup_Pin:
			 Stop_PWM_MOTOR_1;
 800286a:	2100      	movs	r1, #0
 800286c:	4844      	ldr	r0, [pc, #272]	; (8002980 <HAL_GPIO_EXTI_Callback+0x2bc>)
 800286e:	f007 fe4f 	bl	800a510 <HAL_TIM_PWM_Stop>
			 Stop_PWM_MOTOR_2;
 8002872:	2100      	movs	r1, #0
 8002874:	4843      	ldr	r0, [pc, #268]	; (8002984 <HAL_GPIO_EXTI_Callback+0x2c0>)
 8002876:	f007 fe4b 	bl	800a510 <HAL_TIM_PWM_Stop>
			 Stop_PWM_MOTOR_3;
 800287a:	2100      	movs	r1, #0
 800287c:	4842      	ldr	r0, [pc, #264]	; (8002988 <HAL_GPIO_EXTI_Callback+0x2c4>)
 800287e:	f007 fe47 	bl	800a510 <HAL_TIM_PWM_Stop>

			 HAL_TIM_Base_Stop_IT(&htim15);
 8002882:	4842      	ldr	r0, [pc, #264]	; (800298c <HAL_GPIO_EXTI_Callback+0x2c8>)
 8002884:	f007 fca6 	bl	800a1d4 <HAL_TIM_Base_Stop_IT>
			 HAL_TIM_Base_Stop(&htim5);
 8002888:	4841      	ldr	r0, [pc, #260]	; (8002990 <HAL_GPIO_EXTI_Callback+0x2cc>)
 800288a:	f007 fc03 	bl	800a094 <HAL_TIM_Base_Stop>

			 HAL_TIM_IC_Stop(&htim2, TIM_CHANNEL_1);
 800288e:	2100      	movs	r1, #0
 8002890:	4840      	ldr	r0, [pc, #256]	; (8002994 <HAL_GPIO_EXTI_Callback+0x2d0>)
 8002892:	f007 ff34 	bl	800a6fe <HAL_TIM_IC_Stop>
			 HAL_TIM_IC_Stop(&htim3, TIM_CHANNEL_1);
 8002896:	2100      	movs	r1, #0
 8002898:	483f      	ldr	r0, [pc, #252]	; (8002998 <HAL_GPIO_EXTI_Callback+0x2d4>)
 800289a:	f007 ff30 	bl	800a6fe <HAL_TIM_IC_Stop>
			 HAL_TIM_IC_Stop(&htim4, TIM_CHANNEL_1);
 800289e:	2100      	movs	r1, #0
 80028a0:	483e      	ldr	r0, [pc, #248]	; (800299c <HAL_GPIO_EXTI_Callback+0x2d8>)
 80028a2:	f007 ff2c 	bl	800a6fe <HAL_TIM_IC_Stop>

			 endStopAlarmSup = true;
 80028a6:	4b40      	ldr	r3, [pc, #256]	; (80029a8 <HAL_GPIO_EXTI_Callback+0x2e4>)
 80028a8:	2201      	movs	r2, #1
 80028aa:	701a      	strb	r2, [r3, #0]
			 state = FAULT;
 80028ac:	4b3d      	ldr	r3, [pc, #244]	; (80029a4 <HAL_GPIO_EXTI_Callback+0x2e0>)
 80028ae:	2205      	movs	r2, #5
 80028b0:	701a      	strb	r2, [r3, #0]
			 break;
 80028b2:	e05e      	b.n	8002972 <HAL_GPIO_EXTI_Callback+0x2ae>

		 case E_EndStop3_Inf_Pin:
			 Stop_PWM_MOTOR_1;
 80028b4:	2100      	movs	r1, #0
 80028b6:	4832      	ldr	r0, [pc, #200]	; (8002980 <HAL_GPIO_EXTI_Callback+0x2bc>)
 80028b8:	f007 fe2a 	bl	800a510 <HAL_TIM_PWM_Stop>
			 Stop_PWM_MOTOR_2;
 80028bc:	2100      	movs	r1, #0
 80028be:	4831      	ldr	r0, [pc, #196]	; (8002984 <HAL_GPIO_EXTI_Callback+0x2c0>)
 80028c0:	f007 fe26 	bl	800a510 <HAL_TIM_PWM_Stop>
			 Stop_PWM_MOTOR_3;
 80028c4:	2100      	movs	r1, #0
 80028c6:	4830      	ldr	r0, [pc, #192]	; (8002988 <HAL_GPIO_EXTI_Callback+0x2c4>)
 80028c8:	f007 fe22 	bl	800a510 <HAL_TIM_PWM_Stop>

			 HAL_TIM_Base_Stop_IT(&htim15);
 80028cc:	482f      	ldr	r0, [pc, #188]	; (800298c <HAL_GPIO_EXTI_Callback+0x2c8>)
 80028ce:	f007 fc81 	bl	800a1d4 <HAL_TIM_Base_Stop_IT>
			 HAL_TIM_Base_Stop(&htim5);
 80028d2:	482f      	ldr	r0, [pc, #188]	; (8002990 <HAL_GPIO_EXTI_Callback+0x2cc>)
 80028d4:	f007 fbde 	bl	800a094 <HAL_TIM_Base_Stop>

			 HAL_TIM_IC_Stop(&htim2, TIM_CHANNEL_1);
 80028d8:	2100      	movs	r1, #0
 80028da:	482e      	ldr	r0, [pc, #184]	; (8002994 <HAL_GPIO_EXTI_Callback+0x2d0>)
 80028dc:	f007 ff0f 	bl	800a6fe <HAL_TIM_IC_Stop>
			 HAL_TIM_IC_Stop(&htim3, TIM_CHANNEL_1);
 80028e0:	2100      	movs	r1, #0
 80028e2:	482d      	ldr	r0, [pc, #180]	; (8002998 <HAL_GPIO_EXTI_Callback+0x2d4>)
 80028e4:	f007 ff0b 	bl	800a6fe <HAL_TIM_IC_Stop>
			 HAL_TIM_IC_Stop(&htim4, TIM_CHANNEL_1);
 80028e8:	2100      	movs	r1, #0
 80028ea:	482c      	ldr	r0, [pc, #176]	; (800299c <HAL_GPIO_EXTI_Callback+0x2d8>)
 80028ec:	f007 ff07 	bl	800a6fe <HAL_TIM_IC_Stop>

			 endStopAlarmInf = true;
 80028f0:	4b2b      	ldr	r3, [pc, #172]	; (80029a0 <HAL_GPIO_EXTI_Callback+0x2dc>)
 80028f2:	2201      	movs	r2, #1
 80028f4:	701a      	strb	r2, [r3, #0]
			 state = FAULT;
 80028f6:	4b2b      	ldr	r3, [pc, #172]	; (80029a4 <HAL_GPIO_EXTI_Callback+0x2e0>)
 80028f8:	2205      	movs	r2, #5
 80028fa:	701a      	strb	r2, [r3, #0]

			 break;
 80028fc:	e039      	b.n	8002972 <HAL_GPIO_EXTI_Callback+0x2ae>

		 case E_EndStop3_Sup_Pin:
			 Stop_PWM_MOTOR_1;
 80028fe:	2100      	movs	r1, #0
 8002900:	481f      	ldr	r0, [pc, #124]	; (8002980 <HAL_GPIO_EXTI_Callback+0x2bc>)
 8002902:	f007 fe05 	bl	800a510 <HAL_TIM_PWM_Stop>
			 Stop_PWM_MOTOR_2;
 8002906:	2100      	movs	r1, #0
 8002908:	481e      	ldr	r0, [pc, #120]	; (8002984 <HAL_GPIO_EXTI_Callback+0x2c0>)
 800290a:	f007 fe01 	bl	800a510 <HAL_TIM_PWM_Stop>
			 Stop_PWM_MOTOR_3;
 800290e:	2100      	movs	r1, #0
 8002910:	481d      	ldr	r0, [pc, #116]	; (8002988 <HAL_GPIO_EXTI_Callback+0x2c4>)
 8002912:	f007 fdfd 	bl	800a510 <HAL_TIM_PWM_Stop>

			 HAL_TIM_Base_Stop_IT(&htim15);
 8002916:	481d      	ldr	r0, [pc, #116]	; (800298c <HAL_GPIO_EXTI_Callback+0x2c8>)
 8002918:	f007 fc5c 	bl	800a1d4 <HAL_TIM_Base_Stop_IT>
			 HAL_TIM_Base_Stop(&htim5);
 800291c:	481c      	ldr	r0, [pc, #112]	; (8002990 <HAL_GPIO_EXTI_Callback+0x2cc>)
 800291e:	f007 fbb9 	bl	800a094 <HAL_TIM_Base_Stop>

			 HAL_TIM_IC_Stop(&htim2, TIM_CHANNEL_1);
 8002922:	2100      	movs	r1, #0
 8002924:	481b      	ldr	r0, [pc, #108]	; (8002994 <HAL_GPIO_EXTI_Callback+0x2d0>)
 8002926:	f007 feea 	bl	800a6fe <HAL_TIM_IC_Stop>
			 HAL_TIM_IC_Stop(&htim3, TIM_CHANNEL_1);
 800292a:	2100      	movs	r1, #0
 800292c:	481a      	ldr	r0, [pc, #104]	; (8002998 <HAL_GPIO_EXTI_Callback+0x2d4>)
 800292e:	f007 fee6 	bl	800a6fe <HAL_TIM_IC_Stop>
			 HAL_TIM_IC_Stop(&htim4, TIM_CHANNEL_1);
 8002932:	2100      	movs	r1, #0
 8002934:	4819      	ldr	r0, [pc, #100]	; (800299c <HAL_GPIO_EXTI_Callback+0x2d8>)
 8002936:	f007 fee2 	bl	800a6fe <HAL_TIM_IC_Stop>

			 endStopAlarmSup = true;
 800293a:	4b1b      	ldr	r3, [pc, #108]	; (80029a8 <HAL_GPIO_EXTI_Callback+0x2e4>)
 800293c:	2201      	movs	r2, #1
 800293e:	701a      	strb	r2, [r3, #0]
			 state = FAULT;
 8002940:	4b18      	ldr	r3, [pc, #96]	; (80029a4 <HAL_GPIO_EXTI_Callback+0x2e0>)
 8002942:	2205      	movs	r2, #5
 8002944:	701a      	strb	r2, [r3, #0]
			 break;
 8002946:	e014      	b.n	8002972 <HAL_GPIO_EXTI_Callback+0x2ae>

		 case BUTTON_Pin:

			 if (!endStopAlarmSup && !endStopAlarmInf && !faultDrivers){
 8002948:	4b17      	ldr	r3, [pc, #92]	; (80029a8 <HAL_GPIO_EXTI_Callback+0x2e4>)
 800294a:	781b      	ldrb	r3, [r3, #0]
 800294c:	2b00      	cmp	r3, #0
 800294e:	d10b      	bne.n	8002968 <HAL_GPIO_EXTI_Callback+0x2a4>
 8002950:	4b13      	ldr	r3, [pc, #76]	; (80029a0 <HAL_GPIO_EXTI_Callback+0x2dc>)
 8002952:	781b      	ldrb	r3, [r3, #0]
 8002954:	2b00      	cmp	r3, #0
 8002956:	d107      	bne.n	8002968 <HAL_GPIO_EXTI_Callback+0x2a4>
 8002958:	4b14      	ldr	r3, [pc, #80]	; (80029ac <HAL_GPIO_EXTI_Callback+0x2e8>)
 800295a:	781b      	ldrb	r3, [r3, #0]
 800295c:	2b00      	cmp	r3, #0
 800295e:	d103      	bne.n	8002968 <HAL_GPIO_EXTI_Callback+0x2a4>
				 continuar = false;
 8002960:	4b13      	ldr	r3, [pc, #76]	; (80029b0 <HAL_GPIO_EXTI_Callback+0x2ec>)
 8002962:	2200      	movs	r2, #0
 8002964:	701a      	strb	r2, [r3, #0]
			 }else{continuar = true;}

			 break;
 8002966:	e004      	b.n	8002972 <HAL_GPIO_EXTI_Callback+0x2ae>
			 }else{continuar = true;}
 8002968:	4b11      	ldr	r3, [pc, #68]	; (80029b0 <HAL_GPIO_EXTI_Callback+0x2ec>)
 800296a:	2201      	movs	r2, #1
 800296c:	701a      	strb	r2, [r3, #0]
			 break;
 800296e:	e000      	b.n	8002972 <HAL_GPIO_EXTI_Callback+0x2ae>
//			 //continuar = false;
//			 faultDrivers = true;
//			 state = FAULT;
//			 break;

		 default: break;
 8002970:	bf00      	nop


	}


}
 8002972:	bf00      	nop
 8002974:	3708      	adds	r7, #8
 8002976:	46bd      	mov	sp, r7
 8002978:	bd80      	pop	{r7, pc}
 800297a:	bf00      	nop
 800297c:	24000454 	.word	0x24000454
 8002980:	240006f8 	.word	0x240006f8
 8002984:	24000744 	.word	0x24000744
 8002988:	24000790 	.word	0x24000790
 800298c:	240007dc 	.word	0x240007dc
 8002990:	240006ac 	.word	0x240006ac
 8002994:	240005c8 	.word	0x240005c8
 8002998:	24000614 	.word	0x24000614
 800299c:	24000660 	.word	0x24000660
 80029a0:	2400045d 	.word	0x2400045d
 80029a4:	24000458 	.word	0x24000458
 80029a8:	2400045c 	.word	0x2400045c
 80029ac:	2400045f 	.word	0x2400045f
 80029b0:	2400045e 	.word	0x2400045e

080029b4 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 80029b4:	b580      	push	{r7, lr}
 80029b6:	b084      	sub	sp, #16
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	6078      	str	r0, [r7, #4]

	if (huart->Instance == USART3) {
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	4a30      	ldr	r2, [pc, #192]	; (8002a84 <HAL_UART_RxCpltCallback+0xd0>)
 80029c2:	4293      	cmp	r3, r2
 80029c4:	d14d      	bne.n	8002a62 <HAL_UART_RxCpltCallback+0xae>
		char dato;
		dato = rx_data;
 80029c6:	4b30      	ldr	r3, [pc, #192]	; (8002a88 <HAL_UART_RxCpltCallback+0xd4>)
 80029c8:	781b      	ldrb	r3, [r3, #0]
 80029ca:	73fb      	strb	r3, [r7, #15]
		switch (dato) {
 80029cc:	7bfb      	ldrb	r3, [r7, #15]
 80029ce:	2b3a      	cmp	r3, #58	; 0x3a
 80029d0:	d006      	beq.n	80029e0 <HAL_UART_RxCpltCallback+0x2c>
 80029d2:	2b3a      	cmp	r3, #58	; 0x3a
 80029d4:	dc36      	bgt.n	8002a44 <HAL_UART_RxCpltCallback+0x90>
 80029d6:	2b08      	cmp	r3, #8
 80029d8:	d009      	beq.n	80029ee <HAL_UART_RxCpltCallback+0x3a>
 80029da:	2b0d      	cmp	r3, #13
 80029dc:	d01e      	beq.n	8002a1c <HAL_UART_RxCpltCallback+0x68>
 80029de:	e031      	b.n	8002a44 <HAL_UART_RxCpltCallback+0x90>
		case ':':
			rx_index = 0;
 80029e0:	4b2a      	ldr	r3, [pc, #168]	; (8002a8c <HAL_UART_RxCpltCallback+0xd8>)
 80029e2:	2200      	movs	r2, #0
 80029e4:	701a      	strb	r2, [r3, #0]
			cm0 = 1;
 80029e6:	4b2a      	ldr	r3, [pc, #168]	; (8002a90 <HAL_UART_RxCpltCallback+0xdc>)
 80029e8:	2201      	movs	r2, #1
 80029ea:	701a      	strb	r2, [r3, #0]
			break;
 80029ec:	e040      	b.n	8002a70 <HAL_UART_RxCpltCallback+0xbc>
		case 8:
			if (rx_index > 0) {
 80029ee:	4b27      	ldr	r3, [pc, #156]	; (8002a8c <HAL_UART_RxCpltCallback+0xd8>)
 80029f0:	781b      	ldrb	r3, [r3, #0]
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d037      	beq.n	8002a66 <HAL_UART_RxCpltCallback+0xb2>
				rx_index--;
 80029f6:	4b25      	ldr	r3, [pc, #148]	; (8002a8c <HAL_UART_RxCpltCallback+0xd8>)
 80029f8:	781b      	ldrb	r3, [r3, #0]
 80029fa:	3b01      	subs	r3, #1
 80029fc:	b2da      	uxtb	r2, r3
 80029fe:	4b23      	ldr	r3, [pc, #140]	; (8002a8c <HAL_UART_RxCpltCallback+0xd8>)
 8002a00:	701a      	strb	r2, [r3, #0]
			}
			break;
 8002a02:	e030      	b.n	8002a66 <HAL_UART_RxCpltCallback+0xb2>
		case '\r':

			while (!(rx_index==30)){
				rx_buffer[rx_index]= (uint8_t) 0;
 8002a04:	4b21      	ldr	r3, [pc, #132]	; (8002a8c <HAL_UART_RxCpltCallback+0xd8>)
 8002a06:	781b      	ldrb	r3, [r3, #0]
 8002a08:	461a      	mov	r2, r3
 8002a0a:	4b22      	ldr	r3, [pc, #136]	; (8002a94 <HAL_UART_RxCpltCallback+0xe0>)
 8002a0c:	2100      	movs	r1, #0
 8002a0e:	5499      	strb	r1, [r3, r2]
				rx_index++;
 8002a10:	4b1e      	ldr	r3, [pc, #120]	; (8002a8c <HAL_UART_RxCpltCallback+0xd8>)
 8002a12:	781b      	ldrb	r3, [r3, #0]
 8002a14:	3301      	adds	r3, #1
 8002a16:	b2da      	uxtb	r2, r3
 8002a18:	4b1c      	ldr	r3, [pc, #112]	; (8002a8c <HAL_UART_RxCpltCallback+0xd8>)
 8002a1a:	701a      	strb	r2, [r3, #0]
			while (!(rx_index==30)){
 8002a1c:	4b1b      	ldr	r3, [pc, #108]	; (8002a8c <HAL_UART_RxCpltCallback+0xd8>)
 8002a1e:	781b      	ldrb	r3, [r3, #0]
 8002a20:	2b1e      	cmp	r3, #30
 8002a22:	d1ef      	bne.n	8002a04 <HAL_UART_RxCpltCallback+0x50>
			}

			if (cm0 == 1) {
 8002a24:	4b1a      	ldr	r3, [pc, #104]	; (8002a90 <HAL_UART_RxCpltCallback+0xdc>)
 8002a26:	781b      	ldrb	r3, [r3, #0]
 8002a28:	2b01      	cmp	r3, #1
 8002a2a:	d11e      	bne.n	8002a6a <HAL_UART_RxCpltCallback+0xb6>
				rx_buffer[rx_index] = 0;
 8002a2c:	4b17      	ldr	r3, [pc, #92]	; (8002a8c <HAL_UART_RxCpltCallback+0xd8>)
 8002a2e:	781b      	ldrb	r3, [r3, #0]
 8002a30:	461a      	mov	r2, r3
 8002a32:	4b18      	ldr	r3, [pc, #96]	; (8002a94 <HAL_UART_RxCpltCallback+0xe0>)
 8002a34:	2100      	movs	r1, #0
 8002a36:	5499      	strb	r1, [r3, r2]
				interpretaComando();
 8002a38:	f7fe fca8 	bl	800138c <interpretaComando>
				cm0 = 0;
 8002a3c:	4b14      	ldr	r3, [pc, #80]	; (8002a90 <HAL_UART_RxCpltCallback+0xdc>)
 8002a3e:	2200      	movs	r2, #0
 8002a40:	701a      	strb	r2, [r3, #0]

			}
			break;
 8002a42:	e012      	b.n	8002a6a <HAL_UART_RxCpltCallback+0xb6>
		default:
			if (rx_index < 30) {
 8002a44:	4b11      	ldr	r3, [pc, #68]	; (8002a8c <HAL_UART_RxCpltCallback+0xd8>)
 8002a46:	781b      	ldrb	r3, [r3, #0]
 8002a48:	2b1d      	cmp	r3, #29
 8002a4a:	d810      	bhi.n	8002a6e <HAL_UART_RxCpltCallback+0xba>
				rx_buffer[rx_index++] = dato;
 8002a4c:	4b0f      	ldr	r3, [pc, #60]	; (8002a8c <HAL_UART_RxCpltCallback+0xd8>)
 8002a4e:	781b      	ldrb	r3, [r3, #0]
 8002a50:	1c5a      	adds	r2, r3, #1
 8002a52:	b2d1      	uxtb	r1, r2
 8002a54:	4a0d      	ldr	r2, [pc, #52]	; (8002a8c <HAL_UART_RxCpltCallback+0xd8>)
 8002a56:	7011      	strb	r1, [r2, #0]
 8002a58:	4619      	mov	r1, r3
 8002a5a:	4a0e      	ldr	r2, [pc, #56]	; (8002a94 <HAL_UART_RxCpltCallback+0xe0>)
 8002a5c:	7bfb      	ldrb	r3, [r7, #15]
 8002a5e:	5453      	strb	r3, [r2, r1]
			}
			break;
 8002a60:	e005      	b.n	8002a6e <HAL_UART_RxCpltCallback+0xba>
		}
	}
 8002a62:	bf00      	nop
 8002a64:	e004      	b.n	8002a70 <HAL_UART_RxCpltCallback+0xbc>
			break;
 8002a66:	bf00      	nop
 8002a68:	e002      	b.n	8002a70 <HAL_UART_RxCpltCallback+0xbc>
			break;
 8002a6a:	bf00      	nop
 8002a6c:	e000      	b.n	8002a70 <HAL_UART_RxCpltCallback+0xbc>
			break;
 8002a6e:	bf00      	nop
	HAL_UART_Receive_IT(&huart3, &rx_data, 1); //Receive data (one character only)
 8002a70:	2201      	movs	r2, #1
 8002a72:	4905      	ldr	r1, [pc, #20]	; (8002a88 <HAL_UART_RxCpltCallback+0xd4>)
 8002a74:	4808      	ldr	r0, [pc, #32]	; (8002a98 <HAL_UART_RxCpltCallback+0xe4>)
 8002a76:	f009 fad9 	bl	800c02c <HAL_UART_Receive_IT>
}
 8002a7a:	bf00      	nop
 8002a7c:	3710      	adds	r7, #16
 8002a7e:	46bd      	mov	sp, r7
 8002a80:	bd80      	pop	{r7, pc}
 8002a82:	bf00      	nop
 8002a84:	40004800 	.word	0x40004800
 8002a88:	2400059a 	.word	0x2400059a
 8002a8c:	24000579 	.word	0x24000579
 8002a90:	24000450 	.word	0x24000450
 8002a94:	2400057c 	.word	0x2400057c
 8002a98:	24000a00 	.word	0x24000a00

08002a9c <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 8002a9c:	b480      	push	{r7}
 8002a9e:	b083      	sub	sp, #12
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	6078      	str	r0, [r7, #4]
	__NOP();
 8002aa4:	bf00      	nop
}
 8002aa6:	bf00      	nop
 8002aa8:	370c      	adds	r7, #12
 8002aaa:	46bd      	mov	sp, r7
 8002aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab0:	4770      	bx	lr
	...

08002ab4 <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) {
 8002ab4:	b480      	push	{r7}
 8002ab6:	b083      	sub	sp, #12
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	6078      	str	r0, [r7, #4]

	if (htim->Instance == TIM2) {
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ac4:	d10f      	bne.n	8002ae6 <HAL_TIM_IC_CaptureCallback+0x32>
		if (motor1.pMotor == motor1.numStep) {
 8002ac6:	4b1f      	ldr	r3, [pc, #124]	; (8002b44 <HAL_TIM_IC_CaptureCallback+0x90>)
 8002ac8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002aca:	4b1e      	ldr	r3, [pc, #120]	; (8002b44 <HAL_TIM_IC_CaptureCallback+0x90>)
 8002acc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ace:	429a      	cmp	r2, r3
 8002ad0:	d103      	bne.n	8002ada <HAL_TIM_IC_CaptureCallback+0x26>
			motor1.stepReached = true;
 8002ad2:	4b1c      	ldr	r3, [pc, #112]	; (8002b44 <HAL_TIM_IC_CaptureCallback+0x90>)
 8002ad4:	2201      	movs	r2, #1
 8002ad6:	765a      	strb	r2, [r3, #25]
			motor3.pMotor++;
		}

	}

}
 8002ad8:	e02e      	b.n	8002b38 <HAL_TIM_IC_CaptureCallback+0x84>
			motor1.pMotor++;
 8002ada:	4b1a      	ldr	r3, [pc, #104]	; (8002b44 <HAL_TIM_IC_CaptureCallback+0x90>)
 8002adc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ade:	3301      	adds	r3, #1
 8002ae0:	4a18      	ldr	r2, [pc, #96]	; (8002b44 <HAL_TIM_IC_CaptureCallback+0x90>)
 8002ae2:	6413      	str	r3, [r2, #64]	; 0x40
}
 8002ae4:	e028      	b.n	8002b38 <HAL_TIM_IC_CaptureCallback+0x84>
	}else if (htim->Instance == TIM3){
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	4a17      	ldr	r2, [pc, #92]	; (8002b48 <HAL_TIM_IC_CaptureCallback+0x94>)
 8002aec:	4293      	cmp	r3, r2
 8002aee:	d10f      	bne.n	8002b10 <HAL_TIM_IC_CaptureCallback+0x5c>
		if (motor2.pMotor == motor2.numStep) {
 8002af0:	4b16      	ldr	r3, [pc, #88]	; (8002b4c <HAL_TIM_IC_CaptureCallback+0x98>)
 8002af2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002af4:	4b15      	ldr	r3, [pc, #84]	; (8002b4c <HAL_TIM_IC_CaptureCallback+0x98>)
 8002af6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002af8:	429a      	cmp	r2, r3
 8002afa:	d103      	bne.n	8002b04 <HAL_TIM_IC_CaptureCallback+0x50>
			motor2.stepReached = true;
 8002afc:	4b13      	ldr	r3, [pc, #76]	; (8002b4c <HAL_TIM_IC_CaptureCallback+0x98>)
 8002afe:	2201      	movs	r2, #1
 8002b00:	765a      	strb	r2, [r3, #25]
}
 8002b02:	e019      	b.n	8002b38 <HAL_TIM_IC_CaptureCallback+0x84>
			motor2.pMotor++;
 8002b04:	4b11      	ldr	r3, [pc, #68]	; (8002b4c <HAL_TIM_IC_CaptureCallback+0x98>)
 8002b06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b08:	3301      	adds	r3, #1
 8002b0a:	4a10      	ldr	r2, [pc, #64]	; (8002b4c <HAL_TIM_IC_CaptureCallback+0x98>)
 8002b0c:	6413      	str	r3, [r2, #64]	; 0x40
}
 8002b0e:	e013      	b.n	8002b38 <HAL_TIM_IC_CaptureCallback+0x84>
	}else if (htim->Instance == TIM4){
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	4a0e      	ldr	r2, [pc, #56]	; (8002b50 <HAL_TIM_IC_CaptureCallback+0x9c>)
 8002b16:	4293      	cmp	r3, r2
 8002b18:	d10e      	bne.n	8002b38 <HAL_TIM_IC_CaptureCallback+0x84>
		if (motor3.pMotor == motor3.numStep) {
 8002b1a:	4b0e      	ldr	r3, [pc, #56]	; (8002b54 <HAL_TIM_IC_CaptureCallback+0xa0>)
 8002b1c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002b1e:	4b0d      	ldr	r3, [pc, #52]	; (8002b54 <HAL_TIM_IC_CaptureCallback+0xa0>)
 8002b20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b22:	429a      	cmp	r2, r3
 8002b24:	d103      	bne.n	8002b2e <HAL_TIM_IC_CaptureCallback+0x7a>
			motor3.stepReached = true;
 8002b26:	4b0b      	ldr	r3, [pc, #44]	; (8002b54 <HAL_TIM_IC_CaptureCallback+0xa0>)
 8002b28:	2201      	movs	r2, #1
 8002b2a:	765a      	strb	r2, [r3, #25]
}
 8002b2c:	e004      	b.n	8002b38 <HAL_TIM_IC_CaptureCallback+0x84>
			motor3.pMotor++;
 8002b2e:	4b09      	ldr	r3, [pc, #36]	; (8002b54 <HAL_TIM_IC_CaptureCallback+0xa0>)
 8002b30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b32:	3301      	adds	r3, #1
 8002b34:	4a07      	ldr	r2, [pc, #28]	; (8002b54 <HAL_TIM_IC_CaptureCallback+0xa0>)
 8002b36:	6413      	str	r3, [r2, #64]	; 0x40
}
 8002b38:	bf00      	nop
 8002b3a:	370c      	adds	r7, #12
 8002b3c:	46bd      	mov	sp, r7
 8002b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b42:	4770      	bx	lr
 8002b44:	24000368 	.word	0x24000368
 8002b48:	40000400 	.word	0x40000400
 8002b4c:	240003b0 	.word	0x240003b0
 8002b50:	40000800 	.word	0x40000800
 8002b54:	240003f8 	.word	0x240003f8

08002b58 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8002b58:	b480      	push	{r7}
 8002b5a:	b083      	sub	sp, #12
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	6078      	str	r0, [r7, #4]

	if (htim == &htim15) {  //Timer that update velocity'curve. It interrups every 10 ms
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	4a17      	ldr	r2, [pc, #92]	; (8002bc0 <HAL_TIM_PeriodElapsedCallback+0x68>)
 8002b64:	4293      	cmp	r3, r2
 8002b66:	d11f      	bne.n	8002ba8 <HAL_TIM_PeriodElapsedCallback+0x50>

		if (!timeFlag) {
 8002b68:	4b16      	ldr	r3, [pc, #88]	; (8002bc4 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8002b6a:	781b      	ldrb	r3, [r3, #0]
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d105      	bne.n	8002b7c <HAL_TIM_PeriodElapsedCallback+0x24>
			timeFlag = true;
 8002b70:	4b14      	ldr	r3, [pc, #80]	; (8002bc4 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8002b72:	2201      	movs	r2, #1
 8002b74:	701a      	strb	r2, [r3, #0]
			TIM5->CNT = 0;	//We start counting from here
 8002b76:	4b14      	ldr	r3, [pc, #80]	; (8002bc8 <HAL_TIM_PeriodElapsedCallback+0x70>)
 8002b78:	2200      	movs	r2, #0
 8002b7a:	625a      	str	r2, [r3, #36]	; 0x24
		}

		time = (((double) (TIM5->CNT)) * ((double)(TIM5->PSC + 1) / FCL));
 8002b7c:	4b12      	ldr	r3, [pc, #72]	; (8002bc8 <HAL_TIM_PeriodElapsedCallback+0x70>)
 8002b7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b80:	ee07 3a90 	vmov	s15, r3
 8002b84:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 8002b88:	4b0f      	ldr	r3, [pc, #60]	; (8002bc8 <HAL_TIM_PeriodElapsedCallback+0x70>)
 8002b8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b8c:	3301      	adds	r3, #1
 8002b8e:	ee07 3a90 	vmov	s15, r3
 8002b92:	eeb8 5b67 	vcvt.f64.u32	d5, s15
 8002b96:	ed9f 4b08 	vldr	d4, [pc, #32]	; 8002bb8 <HAL_TIM_PeriodElapsedCallback+0x60>
 8002b9a:	ee85 7b04 	vdiv.f64	d7, d5, d4
 8002b9e:	ee26 7b07 	vmul.f64	d7, d6, d7
 8002ba2:	4b0a      	ldr	r3, [pc, #40]	; (8002bcc <HAL_TIM_PeriodElapsedCallback+0x74>)
 8002ba4:	ed83 7b00 	vstr	d7, [r3]
	}
}
 8002ba8:	bf00      	nop
 8002baa:	370c      	adds	r7, #12
 8002bac:	46bd      	mov	sp, r7
 8002bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb2:	4770      	bx	lr
 8002bb4:	f3af 8000 	nop.w
 8002bb8:	00000000 	.word	0x00000000
 8002bbc:	418e8480 	.word	0x418e8480
 8002bc0:	240007dc 	.word	0x240007dc
 8002bc4:	24000578 	.word	0x24000578
 8002bc8:	40000c00 	.word	0x40000c00
 8002bcc:	24000440 	.word	0x24000440

08002bd0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002bd0:	b480      	push	{r7}
 8002bd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8002bd4:	bf00      	nop
 8002bd6:	46bd      	mov	sp, r7
 8002bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bdc:	4770      	bx	lr
	...

08002be0 <configMotor>:
 *      Author: Santiago River
 *      Updated by: Elias Correa y Eliseo Elorga
 */
#include "motor.h"

void configMotor (Motor *motor, int i){
 8002be0:	b580      	push	{r7, lr}
 8002be2:	b084      	sub	sp, #16
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	6078      	str	r0, [r7, #4]
 8002be8:	6039      	str	r1, [r7, #0]

    i = i-1; // Esto es ya que el usario ingresara 1,2 o 3
 8002bea:	683b      	ldr	r3, [r7, #0]
 8002bec:	3b01      	subs	r3, #1
 8002bee:	603b      	str	r3, [r7, #0]

	volatile double diffAngles;

	if (motor->theta >= motor->currentAngle) {
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	ed93 6b00 	vldr	d6, [r3]
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	ed93 7b08 	vldr	d7, [r3, #32]
 8002bfc:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8002c00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c04:	db2b      	blt.n	8002c5e <configMotor+0x7e>

		diffAngles = motor->theta - motor->currentAngle;	//Calculo cuantos grados se tiene que mover.
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	ed93 6b00 	vldr	d6, [r3]
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	ed93 7b08 	vldr	d7, [r3, #32]
 8002c12:	ee36 7b47 	vsub.f64	d7, d6, d7
 8002c16:	ed87 7b02 	vstr	d7, [r7, #8]
		motor->currentAngle = motor->theta;
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c20:	6879      	ldr	r1, [r7, #4]
 8002c22:	e9c1 2308 	strd	r2, r3, [r1, #32]
		if (i==0) negative_Dir_MOTOR_1; //Antihorario visto de frente
 8002c26:	683b      	ldr	r3, [r7, #0]
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d105      	bne.n	8002c38 <configMotor+0x58>
 8002c2c:	2201      	movs	r2, #1
 8002c2e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002c32:	4849      	ldr	r0, [pc, #292]	; (8002d58 <configMotor+0x178>)
 8002c34:	f004 fdd6 	bl	80077e4 <HAL_GPIO_WritePin>
		if (i==1) negative_Dir_MOTOR_2;
 8002c38:	683b      	ldr	r3, [r7, #0]
 8002c3a:	2b01      	cmp	r3, #1
 8002c3c:	d105      	bne.n	8002c4a <configMotor+0x6a>
 8002c3e:	2201      	movs	r2, #1
 8002c40:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002c44:	4844      	ldr	r0, [pc, #272]	; (8002d58 <configMotor+0x178>)
 8002c46:	f004 fdcd 	bl	80077e4 <HAL_GPIO_WritePin>
		if (i==2) negative_Dir_MOTOR_3;
 8002c4a:	683b      	ldr	r3, [r7, #0]
 8002c4c:	2b02      	cmp	r3, #2
 8002c4e:	d131      	bne.n	8002cb4 <configMotor+0xd4>
 8002c50:	2201      	movs	r2, #1
 8002c52:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002c56:	4840      	ldr	r0, [pc, #256]	; (8002d58 <configMotor+0x178>)
 8002c58:	f004 fdc4 	bl	80077e4 <HAL_GPIO_WritePin>
 8002c5c:	e02a      	b.n	8002cb4 <configMotor+0xd4>

	} else {

		diffAngles = motor->currentAngle - motor->theta;	//Calculo cuantos grados se tiene que mover.
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	ed93 6b08 	vldr	d6, [r3, #32]
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	ed93 7b00 	vldr	d7, [r3]
 8002c6a:	ee36 7b47 	vsub.f64	d7, d6, d7
 8002c6e:	ed87 7b02 	vstr	d7, [r7, #8]
		motor->currentAngle = motor->theta;
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c78:	6879      	ldr	r1, [r7, #4]
 8002c7a:	e9c1 2308 	strd	r2, r3, [r1, #32]

		if (i==0) positive_Dir_MOTOR_1; // Horario visto de frente
 8002c7e:	683b      	ldr	r3, [r7, #0]
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d105      	bne.n	8002c90 <configMotor+0xb0>
 8002c84:	2200      	movs	r2, #0
 8002c86:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002c8a:	4833      	ldr	r0, [pc, #204]	; (8002d58 <configMotor+0x178>)
 8002c8c:	f004 fdaa 	bl	80077e4 <HAL_GPIO_WritePin>
		if (i==1) positive_Dir_MOTOR_2;
 8002c90:	683b      	ldr	r3, [r7, #0]
 8002c92:	2b01      	cmp	r3, #1
 8002c94:	d105      	bne.n	8002ca2 <configMotor+0xc2>
 8002c96:	2200      	movs	r2, #0
 8002c98:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002c9c:	482e      	ldr	r0, [pc, #184]	; (8002d58 <configMotor+0x178>)
 8002c9e:	f004 fda1 	bl	80077e4 <HAL_GPIO_WritePin>
		if (i==2) positive_Dir_MOTOR_3;
 8002ca2:	683b      	ldr	r3, [r7, #0]
 8002ca4:	2b02      	cmp	r3, #2
 8002ca6:	d105      	bne.n	8002cb4 <configMotor+0xd4>
 8002ca8:	2200      	movs	r2, #0
 8002caa:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002cae:	482a      	ldr	r0, [pc, #168]	; (8002d58 <configMotor+0x178>)
 8002cb0:	f004 fd98 	bl	80077e4 <HAL_GPIO_WritePin>

	/*Calculamos el error de posicion por caseteo a "int" y cuando supera la unidad la compenzamos, para ello
	 * almacenamos el remanente de cada operacion. Cuando este remanente supera la unidad, le sumamos 1 a el numero
	 * de pasos que debe efectuar el motor */

	motor->calcStep = (diffAngles * STEPREV) / 360;
 8002cb4:	ed97 7b02 	vldr	d7, [r7, #8]
 8002cb8:	ed9f 6b23 	vldr	d6, [pc, #140]	; 8002d48 <configMotor+0x168>
 8002cbc:	ee27 6b06 	vmul.f64	d6, d7, d6
 8002cc0:	ed9f 5b23 	vldr	d5, [pc, #140]	; 8002d50 <configMotor+0x170>
 8002cc4:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	ed83 7b0a 	vstr	d7, [r3, #40]	; 0x28
	motor->numStep = (uint32_t) motor->calcStep;
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	ed93 7b0a 	vldr	d7, [r3, #40]	; 0x28
 8002cd4:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8002cd8:	ee17 2a90 	vmov	r2, s15
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	631a      	str	r2, [r3, #48]	; 0x30
	motor->remainder += (motor->calcStep - motor->numStep);
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	ed93 6b0e 	vldr	d6, [r3, #56]	; 0x38
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	ed93 5b0a 	vldr	d5, [r3, #40]	; 0x28
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cf0:	ee07 3a90 	vmov	s15, r3
 8002cf4:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8002cf8:	ee35 7b47 	vsub.f64	d7, d5, d7
 8002cfc:	ee36 7b07 	vadd.f64	d7, d6, d7
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	ed83 7b0e 	vstr	d7, [r3, #56]	; 0x38
	if (motor->remainder >= 1) {
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	ed93 7b0e 	vldr	d7, [r3, #56]	; 0x38
 8002d0c:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8002d10:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8002d14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d18:	da00      	bge.n	8002d1c <configMotor+0x13c>
		motor->remainder -= 1;
		motor->numStep += 1;
	}

}
 8002d1a:	e00e      	b.n	8002d3a <configMotor+0x15a>
		motor->remainder -= 1;
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	ed93 7b0e 	vldr	d7, [r3, #56]	; 0x38
 8002d22:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8002d26:	ee37 7b46 	vsub.f64	d7, d7, d6
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	ed83 7b0e 	vstr	d7, [r3, #56]	; 0x38
		motor->numStep += 1;
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d34:	1c5a      	adds	r2, r3, #1
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	631a      	str	r2, [r3, #48]	; 0x30
}
 8002d3a:	bf00      	nop
 8002d3c:	3710      	adds	r7, #16
 8002d3e:	46bd      	mov	sp, r7
 8002d40:	bd80      	pop	{r7, pc}
 8002d42:	bf00      	nop
 8002d44:	f3af 8000 	nop.w
 8002d48:	00000000 	.word	0x00000000
 8002d4c:	40bf4000 	.word	0x40bf4000
 8002d50:	00000000 	.word	0x00000000
 8002d54:	40768000 	.word	0x40768000
 8002d58:	58020800 	.word	0x58020800

08002d5c <robotInitialization>:
FILE *file;
char *filename = "archivo.txt";
char buffer[BUFFER_SIZE];
//--------------------------------------------

void robotInitialization(void){
 8002d5c:	b580      	push	{r7, lr}
 8002d5e:	af00      	add	r7, sp, #0
	* habilatamos los drivers al momento de lanzar el programa para que los motores se bloqueen. Se procedera
	* a darles una consigna pequeña de posicion en direccion horario para que los eslabones no entren en la
	* singularidad de los 90º */


	HAL_TIM_Base_Start(&htim12);
 8002d60:	481b      	ldr	r0, [pc, #108]	; (8002dd0 <robotInitialization+0x74>)
 8002d62:	f007 f927 	bl	8009fb4 <HAL_TIM_Base_Start>
	HAL_TIM_Base_Start(&htim13);
 8002d66:	481b      	ldr	r0, [pc, #108]	; (8002dd4 <robotInitialization+0x78>)
 8002d68:	f007 f924 	bl	8009fb4 <HAL_TIM_Base_Start>
	HAL_TIM_Base_Start(&htim14);
 8002d6c:	481a      	ldr	r0, [pc, #104]	; (8002dd8 <robotInitialization+0x7c>)
 8002d6e:	f007 f921 	bl	8009fb4 <HAL_TIM_Base_Start>

	HAL_GPIO_WritePin(S_Enable_1_GPIO_Port, S_Enable_1_Pin, GPIO_PIN_RESET);
 8002d72:	2200      	movs	r2, #0
 8002d74:	2110      	movs	r1, #16
 8002d76:	4819      	ldr	r0, [pc, #100]	; (8002ddc <robotInitialization+0x80>)
 8002d78:	f004 fd34 	bl	80077e4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S_Enable_2_GPIO_Port, S_Enable_2_Pin, GPIO_PIN_RESET);
 8002d7c:	2200      	movs	r2, #0
 8002d7e:	2120      	movs	r1, #32
 8002d80:	4816      	ldr	r0, [pc, #88]	; (8002ddc <robotInitialization+0x80>)
 8002d82:	f004 fd2f 	bl	80077e4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S_Enable_3_GPIO_Port, S_Enable_3_Pin, GPIO_PIN_RESET);
 8002d86:	2200      	movs	r2, #0
 8002d88:	2140      	movs	r1, #64	; 0x40
 8002d8a:	4814      	ldr	r0, [pc, #80]	; (8002ddc <robotInitialization+0x80>)
 8002d8c:	f004 fd2a 	bl	80077e4 <HAL_GPIO_WritePin>

	HAL_Delay(50); //50 ms es el tiempo que la señal ENABLE en cambiar de estado
 8002d90:	2032      	movs	r0, #50	; 0x32
 8002d92:	f003 fc89 	bl	80066a8 <HAL_Delay>

	// Se estable la direccion horario por defecto
	positive_Dir_MOTOR_1;
 8002d96:	2200      	movs	r2, #0
 8002d98:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002d9c:	4810      	ldr	r0, [pc, #64]	; (8002de0 <robotInitialization+0x84>)
 8002d9e:	f004 fd21 	bl	80077e4 <HAL_GPIO_WritePin>
	positive_Dir_MOTOR_2;
 8002da2:	2200      	movs	r2, #0
 8002da4:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002da8:	480d      	ldr	r0, [pc, #52]	; (8002de0 <robotInitialization+0x84>)
 8002daa:	f004 fd1b 	bl	80077e4 <HAL_GPIO_WritePin>
	positive_Dir_MOTOR_3;
 8002dae:	2200      	movs	r2, #0
 8002db0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002db4:	480a      	ldr	r0, [pc, #40]	; (8002de0 <robotInitialization+0x84>)
 8002db6:	f004 fd15 	bl	80077e4 <HAL_GPIO_WritePin>

	motor1.stepReached = false;
 8002dba:	4b0a      	ldr	r3, [pc, #40]	; (8002de4 <robotInitialization+0x88>)
 8002dbc:	2200      	movs	r2, #0
 8002dbe:	765a      	strb	r2, [r3, #25]
	motor2.stepReached = false;
 8002dc0:	4b09      	ldr	r3, [pc, #36]	; (8002de8 <robotInitialization+0x8c>)
 8002dc2:	2200      	movs	r2, #0
 8002dc4:	765a      	strb	r2, [r3, #25]
	motor3.stepReached = false;
 8002dc6:	4b09      	ldr	r3, [pc, #36]	; (8002dec <robotInitialization+0x90>)
 8002dc8:	2200      	movs	r2, #0
 8002dca:	765a      	strb	r2, [r3, #25]


}
 8002dcc:	bf00      	nop
 8002dce:	bd80      	pop	{r7, pc}
 8002dd0:	240006f8 	.word	0x240006f8
 8002dd4:	24000744 	.word	0x24000744
 8002dd8:	24000790 	.word	0x24000790
 8002ddc:	58020c00 	.word	0x58020c00
 8002de0:	58020800 	.word	0x58020800
 8002de4:	24000368 	.word	0x24000368
 8002de8:	240003b0 	.word	0x240003b0
 8002dec:	240003f8 	.word	0x240003f8

08002df0 <statesMachineLoop>:


void statesMachineLoop(void){
 8002df0:	b580      	push	{r7, lr}
 8002df2:	af00      	add	r7, sp, #0



	switch (state){
 8002df4:	4b9a      	ldr	r3, [pc, #616]	; (8003060 <statesMachineLoop+0x270>)
 8002df6:	781b      	ldrb	r3, [r3, #0]
 8002df8:	2b05      	cmp	r3, #5
 8002dfa:	f200 8582 	bhi.w	8003902 <statesMachineLoop+0xb12>
 8002dfe:	a201      	add	r2, pc, #4	; (adr r2, 8002e04 <statesMachineLoop+0x14>)
 8002e00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e04:	08002e1d 	.word	0x08002e1d
 8002e08:	08003155 	.word	0x08003155
 8002e0c:	08002f1d 	.word	0x08002f1d
 8002e10:	08002e4d 	.word	0x08002e4d
 8002e14:	08003879 	.word	0x08003879
 8002e18:	08003301 	.word	0x08003301

	case INIT:

		  HAL_UART_Transmit(&huart3, message, sizeof(message), 100); //Mensaje de inicializacion en curso.
 8002e1c:	2364      	movs	r3, #100	; 0x64
 8002e1e:	221c      	movs	r2, #28
 8002e20:	4990      	ldr	r1, [pc, #576]	; (8003064 <statesMachineLoop+0x274>)
 8002e22:	4891      	ldr	r0, [pc, #580]	; (8003068 <statesMachineLoop+0x278>)
 8002e24:	f009 f86c 	bl	800bf00 <HAL_UART_Transmit>
		  HAL_UART_Receive_IT(&huart3, &rx_data, 1);
 8002e28:	2201      	movs	r2, #1
 8002e2a:	4990      	ldr	r1, [pc, #576]	; (800306c <statesMachineLoop+0x27c>)
 8002e2c:	488e      	ldr	r0, [pc, #568]	; (8003068 <statesMachineLoop+0x278>)
 8002e2e:	f009 f8fd 	bl	800c02c <HAL_UART_Receive_IT>
		  robotInitialization();
 8002e32:	f7ff ff93 	bl	8002d5c <robotInitialization>
		  HAL_UART_Transmit(&huart3, message1, sizeof(message1), 100); //Mensaje inidicando que el Robot esta listo para su uso
 8002e36:	2364      	movs	r3, #100	; 0x64
 8002e38:	2227      	movs	r2, #39	; 0x27
 8002e3a:	498d      	ldr	r1, [pc, #564]	; (8003070 <statesMachineLoop+0x280>)
 8002e3c:	488a      	ldr	r0, [pc, #552]	; (8003068 <statesMachineLoop+0x278>)
 8002e3e:	f009 f85f 	bl	800bf00 <HAL_UART_Transmit>

		  state = READY;
 8002e42:	4b87      	ldr	r3, [pc, #540]	; (8003060 <statesMachineLoop+0x270>)
 8002e44:	2201      	movs	r2, #1
 8002e46:	701a      	strb	r2, [r3, #0]

		break;
 8002e48:	f000 bd62 	b.w	8003910 <statesMachineLoop+0xb20>

	case HOME:

		receptionFlag = false; //Solo para asegurarse de no saltar al estado ready con esta bandera en true
 8002e4c:	4b89      	ldr	r3, [pc, #548]	; (8003074 <statesMachineLoop+0x284>)
 8002e4e:	2200      	movs	r2, #0
 8002e50:	701a      	strb	r2, [r3, #0]

		homing();
 8002e52:	f7fd ff59 	bl	8000d08 <homing>

        if(homFin){
 8002e56:	4b88      	ldr	r3, [pc, #544]	; (8003078 <statesMachineLoop+0x288>)
 8002e58:	781b      	ldrb	r3, [r3, #0]
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	f000 8553 	beq.w	8003906 <statesMachineLoop+0xb16>

        	homFin = false;
 8002e60:	4b85      	ldr	r3, [pc, #532]	; (8003078 <statesMachineLoop+0x288>)
 8002e62:	2200      	movs	r2, #0
 8002e64:	701a      	strb	r2, [r3, #0]
        	HAL_Delay(1);
 8002e66:	2001      	movs	r0, #1
 8002e68:	f003 fc1e 	bl	80066a8 <HAL_Delay>

        	HAL_NVIC_EnableIRQ(EXTI0_IRQn);		//Enciendo interrupcion EndStop 1 Superior
 8002e6c:	2006      	movs	r0, #6
 8002e6e:	f003 fd64 	bl	800693a <HAL_NVIC_EnableIRQ>
        	HAL_NVIC_EnableIRQ(EXTI1_IRQn);		//Enciendo interrupcion EndStop 1 Inferior
 8002e72:	2007      	movs	r0, #7
 8002e74:	f003 fd61 	bl	800693a <HAL_NVIC_EnableIRQ>
        	HAL_NVIC_EnableIRQ(EXTI2_IRQn);		//Enciendo interrupcion EndStop 2 Superior
 8002e78:	2008      	movs	r0, #8
 8002e7a:	f003 fd5e 	bl	800693a <HAL_NVIC_EnableIRQ>
        	HAL_NVIC_EnableIRQ(EXTI3_IRQn);		//Enciendo interrupcion EndStop 2 Inferior
 8002e7e:	2009      	movs	r0, #9
 8002e80:	f003 fd5b 	bl	800693a <HAL_NVIC_EnableIRQ>
        	HAL_NVIC_EnableIRQ(EXTI4_IRQn);		//Enciendo interrupcion EndStop 3 Superior
 8002e84:	200a      	movs	r0, #10
 8002e86:	f003 fd58 	bl	800693a <HAL_NVIC_EnableIRQ>
        	HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);	//Enciendo interrupcion EndStop 3 Inferior
 8002e8a:	2017      	movs	r0, #23
 8002e8c:	f003 fd55 	bl	800693a <HAL_NVIC_EnableIRQ>
        	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn); //Enciendo interrupcion faultDriver
 8002e90:	2028      	movs	r0, #40	; 0x28
 8002e92:	f003 fd52 	bl	800693a <HAL_NVIC_EnableIRQ>

			Pini.x=0;
 8002e96:	4979      	ldr	r1, [pc, #484]	; (800307c <statesMachineLoop+0x28c>)
 8002e98:	f04f 0200 	mov.w	r2, #0
 8002e9c:	f04f 0300 	mov.w	r3, #0
 8002ea0:	e9c1 2300 	strd	r2, r3, [r1]
			Pini.y=0;
 8002ea4:	4975      	ldr	r1, [pc, #468]	; (800307c <statesMachineLoop+0x28c>)
 8002ea6:	f04f 0200 	mov.w	r2, #0
 8002eaa:	f04f 0300 	mov.w	r3, #0
 8002eae:	e9c1 2302 	strd	r2, r3, [r1, #8]
			Pini.z =-0.5208; //antes era -0.33
 8002eb2:	4972      	ldr	r1, [pc, #456]	; (800307c <statesMachineLoop+0x28c>)
 8002eb4:	a368      	add	r3, pc, #416	; (adr r3, 8003058 <statesMachineLoop+0x268>)
 8002eb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002eba:	e9c1 2304 	strd	r2, r3, [r1, #16]

			motor1.theta = 0.0;
 8002ebe:	4970      	ldr	r1, [pc, #448]	; (8003080 <statesMachineLoop+0x290>)
 8002ec0:	f04f 0200 	mov.w	r2, #0
 8002ec4:	f04f 0300 	mov.w	r3, #0
 8002ec8:	e9c1 2300 	strd	r2, r3, [r1]
			motor2.theta = 0.0;
 8002ecc:	496d      	ldr	r1, [pc, #436]	; (8003084 <statesMachineLoop+0x294>)
 8002ece:	f04f 0200 	mov.w	r2, #0
 8002ed2:	f04f 0300 	mov.w	r3, #0
 8002ed6:	e9c1 2300 	strd	r2, r3, [r1]
			motor3.theta = 0.0;
 8002eda:	496b      	ldr	r1, [pc, #428]	; (8003088 <statesMachineLoop+0x298>)
 8002edc:	f04f 0200 	mov.w	r2, #0
 8002ee0:	f04f 0300 	mov.w	r3, #0
 8002ee4:	e9c1 2300 	strd	r2, r3, [r1]

			motor1.currentAngle = 0.0;
 8002ee8:	4965      	ldr	r1, [pc, #404]	; (8003080 <statesMachineLoop+0x290>)
 8002eea:	f04f 0200 	mov.w	r2, #0
 8002eee:	f04f 0300 	mov.w	r3, #0
 8002ef2:	e9c1 2308 	strd	r2, r3, [r1, #32]
			motor2.currentAngle = 0.0;
 8002ef6:	4963      	ldr	r1, [pc, #396]	; (8003084 <statesMachineLoop+0x294>)
 8002ef8:	f04f 0200 	mov.w	r2, #0
 8002efc:	f04f 0300 	mov.w	r3, #0
 8002f00:	e9c1 2308 	strd	r2, r3, [r1, #32]
			motor3.currentAngle = 0.0;
 8002f04:	4960      	ldr	r1, [pc, #384]	; (8003088 <statesMachineLoop+0x298>)
 8002f06:	f04f 0200 	mov.w	r2, #0
 8002f0a:	f04f 0300 	mov.w	r3, #0
 8002f0e:	e9c1 2308 	strd	r2, r3, [r1, #32]

			state = READY;
 8002f12:	4b53      	ldr	r3, [pc, #332]	; (8003060 <statesMachineLoop+0x270>)
 8002f14:	2201      	movs	r2, #1
 8002f16:	701a      	strb	r2, [r3, #0]

        }


		break;
 8002f18:	f000 bcf5 	b.w	8003906 <statesMachineLoop+0xb16>

	case WORKING:

		receptionFlag = false;
 8002f1c:	4b55      	ldr	r3, [pc, #340]	; (8003074 <statesMachineLoop+0x284>)
 8002f1e:	2200      	movs	r2, #0
 8002f20:	701a      	strb	r2, [r3, #0]

		while (!(motor1.stepReached && motor2.stepReached  && motor3.stepReached)){
 8002f22:	e087      	b.n	8003034 <statesMachineLoop+0x244>

			if (state==FAULT)break;
 8002f24:	4b4e      	ldr	r3, [pc, #312]	; (8003060 <statesMachineLoop+0x270>)
 8002f26:	781b      	ldrb	r3, [r3, #0]
 8002f28:	2b05      	cmp	r3, #5
 8002f2a:	f000 80c3 	beq.w	80030b4 <statesMachineLoop+0x2c4>

			if (motor1.stepReached) {
 8002f2e:	4b54      	ldr	r3, [pc, #336]	; (8003080 <statesMachineLoop+0x290>)
 8002f30:	7e5b      	ldrb	r3, [r3, #25]
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d008      	beq.n	8002f48 <statesMachineLoop+0x158>
				Stop_PWM_MOTOR_1;
 8002f36:	2100      	movs	r1, #0
 8002f38:	4854      	ldr	r0, [pc, #336]	; (800308c <statesMachineLoop+0x29c>)
 8002f3a:	f007 fae9 	bl	800a510 <HAL_TIM_PWM_Stop>
				HAL_TIM_IC_Stop(&htim2, TIM_CHANNEL_1);
 8002f3e:	2100      	movs	r1, #0
 8002f40:	4853      	ldr	r0, [pc, #332]	; (8003090 <statesMachineLoop+0x2a0>)
 8002f42:	f007 fbdc 	bl	800a6fe <HAL_TIM_IC_Stop>
 8002f46:	e018      	b.n	8002f7a <statesMachineLoop+0x18a>
			}else if (motor2.stepReached) {
 8002f48:	4b4e      	ldr	r3, [pc, #312]	; (8003084 <statesMachineLoop+0x294>)
 8002f4a:	7e5b      	ldrb	r3, [r3, #25]
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d008      	beq.n	8002f62 <statesMachineLoop+0x172>
				Stop_PWM_MOTOR_2;
 8002f50:	2100      	movs	r1, #0
 8002f52:	4850      	ldr	r0, [pc, #320]	; (8003094 <statesMachineLoop+0x2a4>)
 8002f54:	f007 fadc 	bl	800a510 <HAL_TIM_PWM_Stop>
				HAL_TIM_IC_Stop(&htim2, TIM_CHANNEL_2);
 8002f58:	2104      	movs	r1, #4
 8002f5a:	484d      	ldr	r0, [pc, #308]	; (8003090 <statesMachineLoop+0x2a0>)
 8002f5c:	f007 fbcf 	bl	800a6fe <HAL_TIM_IC_Stop>
 8002f60:	e00b      	b.n	8002f7a <statesMachineLoop+0x18a>
			}else if (motor3.stepReached){
 8002f62:	4b49      	ldr	r3, [pc, #292]	; (8003088 <statesMachineLoop+0x298>)
 8002f64:	7e5b      	ldrb	r3, [r3, #25]
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d007      	beq.n	8002f7a <statesMachineLoop+0x18a>
				Stop_PWM_MOTOR_3;
 8002f6a:	2100      	movs	r1, #0
 8002f6c:	484a      	ldr	r0, [pc, #296]	; (8003098 <statesMachineLoop+0x2a8>)
 8002f6e:	f007 facf 	bl	800a510 <HAL_TIM_PWM_Stop>
				HAL_TIM_IC_Stop(&htim2, TIM_CHANNEL_3);
 8002f72:	2108      	movs	r1, #8
 8002f74:	4846      	ldr	r0, [pc, #280]	; (8003090 <statesMachineLoop+0x2a0>)
 8002f76:	f007 fbc2 	bl	800a6fe <HAL_TIM_IC_Stop>
			}

			motor1.omega = get_Straj(time,motor1.currentAngle,motor1.theta,arrayParams1);
 8002f7a:	4b48      	ldr	r3, [pc, #288]	; (800309c <statesMachineLoop+0x2ac>)
 8002f7c:	ed93 7b00 	vldr	d7, [r3]
 8002f80:	4b3f      	ldr	r3, [pc, #252]	; (8003080 <statesMachineLoop+0x290>)
 8002f82:	ed93 6b08 	vldr	d6, [r3, #32]
 8002f86:	4b3e      	ldr	r3, [pc, #248]	; (8003080 <statesMachineLoop+0x290>)
 8002f88:	ed93 5b00 	vldr	d5, [r3]
 8002f8c:	4844      	ldr	r0, [pc, #272]	; (80030a0 <statesMachineLoop+0x2b0>)
 8002f8e:	eeb0 2b45 	vmov.f64	d2, d5
 8002f92:	eeb0 1b46 	vmov.f64	d1, d6
 8002f96:	eeb0 0b47 	vmov.f64	d0, d7
 8002f9a:	f001 fb89 	bl	80046b0 <get_Straj>
 8002f9e:	eeb0 7b40 	vmov.f64	d7, d0
 8002fa2:	4b37      	ldr	r3, [pc, #220]	; (8003080 <statesMachineLoop+0x290>)
 8002fa4:	ed83 7b02 	vstr	d7, [r3, #8]
			motor2.omega = get_Straj(time,motor2.currentAngle,motor2.theta,arrayParams2);
 8002fa8:	4b3c      	ldr	r3, [pc, #240]	; (800309c <statesMachineLoop+0x2ac>)
 8002faa:	ed93 7b00 	vldr	d7, [r3]
 8002fae:	4b35      	ldr	r3, [pc, #212]	; (8003084 <statesMachineLoop+0x294>)
 8002fb0:	ed93 6b08 	vldr	d6, [r3, #32]
 8002fb4:	4b33      	ldr	r3, [pc, #204]	; (8003084 <statesMachineLoop+0x294>)
 8002fb6:	ed93 5b00 	vldr	d5, [r3]
 8002fba:	483a      	ldr	r0, [pc, #232]	; (80030a4 <statesMachineLoop+0x2b4>)
 8002fbc:	eeb0 2b45 	vmov.f64	d2, d5
 8002fc0:	eeb0 1b46 	vmov.f64	d1, d6
 8002fc4:	eeb0 0b47 	vmov.f64	d0, d7
 8002fc8:	f001 fb72 	bl	80046b0 <get_Straj>
 8002fcc:	eeb0 7b40 	vmov.f64	d7, d0
 8002fd0:	4b2c      	ldr	r3, [pc, #176]	; (8003084 <statesMachineLoop+0x294>)
 8002fd2:	ed83 7b02 	vstr	d7, [r3, #8]
			motor3.omega = get_Straj(time,motor3.currentAngle,motor3.theta,arrayParams3);
 8002fd6:	4b31      	ldr	r3, [pc, #196]	; (800309c <statesMachineLoop+0x2ac>)
 8002fd8:	ed93 7b00 	vldr	d7, [r3]
 8002fdc:	4b2a      	ldr	r3, [pc, #168]	; (8003088 <statesMachineLoop+0x298>)
 8002fde:	ed93 6b08 	vldr	d6, [r3, #32]
 8002fe2:	4b29      	ldr	r3, [pc, #164]	; (8003088 <statesMachineLoop+0x298>)
 8002fe4:	ed93 5b00 	vldr	d5, [r3]
 8002fe8:	482f      	ldr	r0, [pc, #188]	; (80030a8 <statesMachineLoop+0x2b8>)
 8002fea:	eeb0 2b45 	vmov.f64	d2, d5
 8002fee:	eeb0 1b46 	vmov.f64	d1, d6
 8002ff2:	eeb0 0b47 	vmov.f64	d0, d7
 8002ff6:	f001 fb5b 	bl	80046b0 <get_Straj>
 8002ffa:	eeb0 7b40 	vmov.f64	d7, d0
 8002ffe:	4b22      	ldr	r3, [pc, #136]	; (8003088 <statesMachineLoop+0x298>)
 8003000:	ed83 7b02 	vstr	d7, [r3, #8]

			setProfilTimer();
 8003004:	f002 fef8 	bl	8005df8 <setProfilTimer>


			if(startMotors){
 8003008:	4b28      	ldr	r3, [pc, #160]	; (80030ac <statesMachineLoop+0x2bc>)
 800300a:	781b      	ldrb	r3, [r3, #0]
 800300c:	2b00      	cmp	r3, #0
 800300e:	d00e      	beq.n	800302e <statesMachineLoop+0x23e>
				startMotors = false;
 8003010:	4b26      	ldr	r3, [pc, #152]	; (80030ac <statesMachineLoop+0x2bc>)
 8003012:	2200      	movs	r2, #0
 8003014:	701a      	strb	r2, [r3, #0]
				Start_PWM_MOTOR_1;	// Activar generacion de pwm
 8003016:	2100      	movs	r1, #0
 8003018:	481c      	ldr	r0, [pc, #112]	; (800308c <statesMachineLoop+0x29c>)
 800301a:	f007 f96b 	bl	800a2f4 <HAL_TIM_PWM_Start>
				Start_PWM_MOTOR_2;	// Activar generacion de pwm
 800301e:	2100      	movs	r1, #0
 8003020:	481c      	ldr	r0, [pc, #112]	; (8003094 <statesMachineLoop+0x2a4>)
 8003022:	f007 f967 	bl	800a2f4 <HAL_TIM_PWM_Start>
				Start_PWM_MOTOR_3;	// Activar generacion de pwm
 8003026:	2100      	movs	r1, #0
 8003028:	481b      	ldr	r0, [pc, #108]	; (8003098 <statesMachineLoop+0x2a8>)
 800302a:	f007 f963 	bl	800a2f4 <HAL_TIM_PWM_Start>
			}

			stopMotors = true;
 800302e:	4b20      	ldr	r3, [pc, #128]	; (80030b0 <statesMachineLoop+0x2c0>)
 8003030:	2201      	movs	r2, #1
 8003032:	701a      	strb	r2, [r3, #0]
		while (!(motor1.stepReached && motor2.stepReached  && motor3.stepReached)){
 8003034:	4b12      	ldr	r3, [pc, #72]	; (8003080 <statesMachineLoop+0x290>)
 8003036:	7e5b      	ldrb	r3, [r3, #25]
 8003038:	2b00      	cmp	r3, #0
 800303a:	f43f af73 	beq.w	8002f24 <statesMachineLoop+0x134>
 800303e:	4b11      	ldr	r3, [pc, #68]	; (8003084 <statesMachineLoop+0x294>)
 8003040:	7e5b      	ldrb	r3, [r3, #25]
 8003042:	2b00      	cmp	r3, #0
 8003044:	f43f af6e 	beq.w	8002f24 <statesMachineLoop+0x134>
 8003048:	4b0f      	ldr	r3, [pc, #60]	; (8003088 <statesMachineLoop+0x298>)
 800304a:	7e5b      	ldrb	r3, [r3, #25]
 800304c:	2b00      	cmp	r3, #0
 800304e:	f43f af69 	beq.w	8002f24 <statesMachineLoop+0x134>
 8003052:	e030      	b.n	80030b6 <statesMachineLoop+0x2c6>
 8003054:	f3af 8000 	nop.w
 8003058:	c2f837b5 	.word	0xc2f837b5
 800305c:	bfe0aa64 	.word	0xbfe0aa64
 8003060:	24000458 	.word	0x24000458
 8003064:	24000030 	.word	0x24000030
 8003068:	24000a00 	.word	0x24000a00
 800306c:	2400059a 	.word	0x2400059a
 8003070:	2400004c 	.word	0x2400004c
 8003074:	2400059b 	.word	0x2400059b
 8003078:	24000459 	.word	0x24000459
 800307c:	240004a0 	.word	0x240004a0
 8003080:	24000368 	.word	0x24000368
 8003084:	240003b0 	.word	0x240003b0
 8003088:	240003f8 	.word	0x240003f8
 800308c:	240006f8 	.word	0x240006f8
 8003090:	240005c8 	.word	0x240005c8
 8003094:	24000744 	.word	0x24000744
 8003098:	24000790 	.word	0x24000790
 800309c:	24000440 	.word	0x24000440
 80030a0:	240004d0 	.word	0x240004d0
 80030a4:	24000508 	.word	0x24000508
 80030a8:	24000540 	.word	0x24000540
 80030ac:	2400045a 	.word	0x2400045a
 80030b0:	2400045b 	.word	0x2400045b
			if (state==FAULT)break;
 80030b4:	bf00      	nop
		}// End while




		if (stopMotors){   //If steps goals for each motor were reached, we stop motors
 80030b6:	4b77      	ldr	r3, [pc, #476]	; (8003294 <statesMachineLoop+0x4a4>)
 80030b8:	781b      	ldrb	r3, [r3, #0]
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d026      	beq.n	800310c <statesMachineLoop+0x31c>

			startMotors = false;
 80030be:	4b76      	ldr	r3, [pc, #472]	; (8003298 <statesMachineLoop+0x4a8>)
 80030c0:	2200      	movs	r2, #0
 80030c2:	701a      	strb	r2, [r3, #0]

			HAL_TIM_IC_Stop(&htim2, TIM_CHANNEL_1);
 80030c4:	2100      	movs	r1, #0
 80030c6:	4875      	ldr	r0, [pc, #468]	; (800329c <statesMachineLoop+0x4ac>)
 80030c8:	f007 fb19 	bl	800a6fe <HAL_TIM_IC_Stop>
			HAL_TIM_IC_Stop(&htim3, TIM_CHANNEL_1);
 80030cc:	2100      	movs	r1, #0
 80030ce:	4874      	ldr	r0, [pc, #464]	; (80032a0 <statesMachineLoop+0x4b0>)
 80030d0:	f007 fb15 	bl	800a6fe <HAL_TIM_IC_Stop>
			HAL_TIM_IC_Stop(&htim4, TIM_CHANNEL_1);
 80030d4:	2100      	movs	r1, #0
 80030d6:	4873      	ldr	r0, [pc, #460]	; (80032a4 <statesMachineLoop+0x4b4>)
 80030d8:	f007 fb11 	bl	800a6fe <HAL_TIM_IC_Stop>

			if (motor1.stepReached) Stop_PWM_MOTOR_1;
 80030dc:	4b72      	ldr	r3, [pc, #456]	; (80032a8 <statesMachineLoop+0x4b8>)
 80030de:	7e5b      	ldrb	r3, [r3, #25]
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d003      	beq.n	80030ec <statesMachineLoop+0x2fc>
 80030e4:	2100      	movs	r1, #0
 80030e6:	4871      	ldr	r0, [pc, #452]	; (80032ac <statesMachineLoop+0x4bc>)
 80030e8:	f007 fa12 	bl	800a510 <HAL_TIM_PWM_Stop>
			if (motor2.stepReached) Stop_PWM_MOTOR_2;
 80030ec:	4b70      	ldr	r3, [pc, #448]	; (80032b0 <statesMachineLoop+0x4c0>)
 80030ee:	7e5b      	ldrb	r3, [r3, #25]
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d003      	beq.n	80030fc <statesMachineLoop+0x30c>
 80030f4:	2100      	movs	r1, #0
 80030f6:	486f      	ldr	r0, [pc, #444]	; (80032b4 <statesMachineLoop+0x4c4>)
 80030f8:	f007 fa0a 	bl	800a510 <HAL_TIM_PWM_Stop>
			if (motor3.stepReached)	Stop_PWM_MOTOR_3;
 80030fc:	4b6e      	ldr	r3, [pc, #440]	; (80032b8 <statesMachineLoop+0x4c8>)
 80030fe:	7e5b      	ldrb	r3, [r3, #25]
 8003100:	2b00      	cmp	r3, #0
 8003102:	d003      	beq.n	800310c <statesMachineLoop+0x31c>
 8003104:	2100      	movs	r1, #0
 8003106:	486d      	ldr	r0, [pc, #436]	; (80032bc <statesMachineLoop+0x4cc>)
 8003108:	f007 fa02 	bl	800a510 <HAL_TIM_PWM_Stop>
		}

		//Update coordinantes
		Pini.x = Pfin.x;
 800310c:	4b6c      	ldr	r3, [pc, #432]	; (80032c0 <statesMachineLoop+0x4d0>)
 800310e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003112:	496c      	ldr	r1, [pc, #432]	; (80032c4 <statesMachineLoop+0x4d4>)
 8003114:	e9c1 2300 	strd	r2, r3, [r1]
		Pini.y = Pfin.y;
 8003118:	4b69      	ldr	r3, [pc, #420]	; (80032c0 <statesMachineLoop+0x4d0>)
 800311a:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800311e:	4969      	ldr	r1, [pc, #420]	; (80032c4 <statesMachineLoop+0x4d4>)
 8003120:	e9c1 2302 	strd	r2, r3, [r1, #8]
		Pini.z = Pfin.z;
 8003124:	4b66      	ldr	r3, [pc, #408]	; (80032c0 <statesMachineLoop+0x4d0>)
 8003126:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800312a:	4966      	ldr	r1, [pc, #408]	; (80032c4 <statesMachineLoop+0x4d4>)
 800312c:	e9c1 2304 	strd	r2, r3, [r1, #16]

		HAL_TIM_Base_Stop_IT(&htim15);
 8003130:	4865      	ldr	r0, [pc, #404]	; (80032c8 <statesMachineLoop+0x4d8>)
 8003132:	f007 f84f 	bl	800a1d4 <HAL_TIM_Base_Stop_IT>
		HAL_TIM_Base_Stop(&htim5);
 8003136:	4865      	ldr	r0, [pc, #404]	; (80032cc <statesMachineLoop+0x4dc>)
 8003138:	f006 ffac 	bl	800a094 <HAL_TIM_Base_Stop>

		if (startDemo){state=DEMO;}
 800313c:	4b64      	ldr	r3, [pc, #400]	; (80032d0 <statesMachineLoop+0x4e0>)
 800313e:	781b      	ldrb	r3, [r3, #0]
 8003140:	2b00      	cmp	r3, #0
 8003142:	d003      	beq.n	800314c <statesMachineLoop+0x35c>
 8003144:	4b63      	ldr	r3, [pc, #396]	; (80032d4 <statesMachineLoop+0x4e4>)
 8003146:	2204      	movs	r2, #4
 8003148:	701a      	strb	r2, [r3, #0]
		else{state = READY;}


		break;
 800314a:	e3e1      	b.n	8003910 <statesMachineLoop+0xb20>
		else{state = READY;}
 800314c:	4b61      	ldr	r3, [pc, #388]	; (80032d4 <statesMachineLoop+0x4e4>)
 800314e:	2201      	movs	r2, #1
 8003150:	701a      	strb	r2, [r3, #0]
		break;
 8003152:	e3dd      	b.n	8003910 <statesMachineLoop+0xb20>

	case READY:

		if (receptionFlag){
 8003154:	4b60      	ldr	r3, [pc, #384]	; (80032d8 <statesMachineLoop+0x4e8>)
 8003156:	781b      	ldrb	r3, [r3, #0]
 8003158:	2b00      	cmp	r3, #0
 800315a:	f000 83d6 	beq.w	800390a <statesMachineLoop+0xb1a>

			receptionFlag = false;
 800315e:	4b5e      	ldr	r3, [pc, #376]	; (80032d8 <statesMachineLoop+0x4e8>)
 8003160:	2200      	movs	r2, #0
 8003162:	701a      	strb	r2, [r3, #0]

			startMotors = true;
 8003164:	4b4c      	ldr	r3, [pc, #304]	; (8003298 <statesMachineLoop+0x4a8>)
 8003166:	2201      	movs	r2, #1
 8003168:	701a      	strb	r2, [r3, #0]

			HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1);
 800316a:	2100      	movs	r1, #0
 800316c:	484b      	ldr	r0, [pc, #300]	; (800329c <statesMachineLoop+0x4ac>)
 800316e:	f007 fb37 	bl	800a7e0 <HAL_TIM_IC_Start_IT>
			HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_1);
 8003172:	2100      	movs	r1, #0
 8003174:	484a      	ldr	r0, [pc, #296]	; (80032a0 <statesMachineLoop+0x4b0>)
 8003176:	f007 fb33 	bl	800a7e0 <HAL_TIM_IC_Start_IT>
			HAL_TIM_IC_Start_IT(&htim4, TIM_CHANNEL_1);
 800317a:	2100      	movs	r1, #0
 800317c:	4849      	ldr	r0, [pc, #292]	; (80032a4 <statesMachineLoop+0x4b4>)
 800317e:	f007 fb2f 	bl	800a7e0 <HAL_TIM_IC_Start_IT>

			inverseKinematic(Pfin);
 8003182:	4b4f      	ldr	r3, [pc, #316]	; (80032c0 <statesMachineLoop+0x4d0>)
 8003184:	ed93 5b00 	vldr	d5, [r3]
 8003188:	ed93 6b02 	vldr	d6, [r3, #8]
 800318c:	ed93 7b04 	vldr	d7, [r3, #16]
 8003190:	eeb0 0b45 	vmov.f64	d0, d5
 8003194:	eeb0 1b46 	vmov.f64	d1, d6
 8003198:	eeb0 2b47 	vmov.f64	d2, d7
 800319c:	f7fe fa68 	bl	8001670 <inverseKinematic>

			update_ScurveTraj(motor1.currentAngle, motor1.theta, vi, vf, vmax, amax, jmax, arrayParams1);
 80031a0:	4b41      	ldr	r3, [pc, #260]	; (80032a8 <statesMachineLoop+0x4b8>)
 80031a2:	ed93 7b08 	vldr	d7, [r3, #32]
 80031a6:	4b40      	ldr	r3, [pc, #256]	; (80032a8 <statesMachineLoop+0x4b8>)
 80031a8:	ed93 1b00 	vldr	d1, [r3]
 80031ac:	4b4b      	ldr	r3, [pc, #300]	; (80032dc <statesMachineLoop+0x4ec>)
 80031ae:	ed93 2b00 	vldr	d2, [r3]
 80031b2:	4b4b      	ldr	r3, [pc, #300]	; (80032e0 <statesMachineLoop+0x4f0>)
 80031b4:	ed93 3b00 	vldr	d3, [r3]
 80031b8:	4b4a      	ldr	r3, [pc, #296]	; (80032e4 <statesMachineLoop+0x4f4>)
 80031ba:	ed93 4b00 	vldr	d4, [r3]
 80031be:	4b4a      	ldr	r3, [pc, #296]	; (80032e8 <statesMachineLoop+0x4f8>)
 80031c0:	ed93 5b00 	vldr	d5, [r3]
 80031c4:	4b49      	ldr	r3, [pc, #292]	; (80032ec <statesMachineLoop+0x4fc>)
 80031c6:	ed93 6b00 	vldr	d6, [r3]
 80031ca:	4849      	ldr	r0, [pc, #292]	; (80032f0 <statesMachineLoop+0x500>)
 80031cc:	eeb0 0b47 	vmov.f64	d0, d7
 80031d0:	f002 f92a 	bl	8005428 <update_ScurveTraj>
			update_ScurveTraj(motor2.currentAngle, motor2.theta, vi, vf, vmax, amax, jmax, arrayParams2);
 80031d4:	4b36      	ldr	r3, [pc, #216]	; (80032b0 <statesMachineLoop+0x4c0>)
 80031d6:	ed93 7b08 	vldr	d7, [r3, #32]
 80031da:	4b35      	ldr	r3, [pc, #212]	; (80032b0 <statesMachineLoop+0x4c0>)
 80031dc:	ed93 1b00 	vldr	d1, [r3]
 80031e0:	4b3e      	ldr	r3, [pc, #248]	; (80032dc <statesMachineLoop+0x4ec>)
 80031e2:	ed93 2b00 	vldr	d2, [r3]
 80031e6:	4b3e      	ldr	r3, [pc, #248]	; (80032e0 <statesMachineLoop+0x4f0>)
 80031e8:	ed93 3b00 	vldr	d3, [r3]
 80031ec:	4b3d      	ldr	r3, [pc, #244]	; (80032e4 <statesMachineLoop+0x4f4>)
 80031ee:	ed93 4b00 	vldr	d4, [r3]
 80031f2:	4b3d      	ldr	r3, [pc, #244]	; (80032e8 <statesMachineLoop+0x4f8>)
 80031f4:	ed93 5b00 	vldr	d5, [r3]
 80031f8:	4b3c      	ldr	r3, [pc, #240]	; (80032ec <statesMachineLoop+0x4fc>)
 80031fa:	ed93 6b00 	vldr	d6, [r3]
 80031fe:	483d      	ldr	r0, [pc, #244]	; (80032f4 <statesMachineLoop+0x504>)
 8003200:	eeb0 0b47 	vmov.f64	d0, d7
 8003204:	f002 f910 	bl	8005428 <update_ScurveTraj>
			update_ScurveTraj(motor3.currentAngle, motor3.theta, vi, vf, vmax, amax, jmax, arrayParams3);
 8003208:	4b2b      	ldr	r3, [pc, #172]	; (80032b8 <statesMachineLoop+0x4c8>)
 800320a:	ed93 7b08 	vldr	d7, [r3, #32]
 800320e:	4b2a      	ldr	r3, [pc, #168]	; (80032b8 <statesMachineLoop+0x4c8>)
 8003210:	ed93 1b00 	vldr	d1, [r3]
 8003214:	4b31      	ldr	r3, [pc, #196]	; (80032dc <statesMachineLoop+0x4ec>)
 8003216:	ed93 2b00 	vldr	d2, [r3]
 800321a:	4b31      	ldr	r3, [pc, #196]	; (80032e0 <statesMachineLoop+0x4f0>)
 800321c:	ed93 3b00 	vldr	d3, [r3]
 8003220:	4b30      	ldr	r3, [pc, #192]	; (80032e4 <statesMachineLoop+0x4f4>)
 8003222:	ed93 4b00 	vldr	d4, [r3]
 8003226:	4b30      	ldr	r3, [pc, #192]	; (80032e8 <statesMachineLoop+0x4f8>)
 8003228:	ed93 5b00 	vldr	d5, [r3]
 800322c:	4b2f      	ldr	r3, [pc, #188]	; (80032ec <statesMachineLoop+0x4fc>)
 800322e:	ed93 6b00 	vldr	d6, [r3]
 8003232:	4831      	ldr	r0, [pc, #196]	; (80032f8 <statesMachineLoop+0x508>)
 8003234:	eeb0 0b47 	vmov.f64	d0, d7
 8003238:	f002 f8f6 	bl	8005428 <update_ScurveTraj>

			configMotor(&motor1,1);
 800323c:	2101      	movs	r1, #1
 800323e:	481a      	ldr	r0, [pc, #104]	; (80032a8 <statesMachineLoop+0x4b8>)
 8003240:	f7ff fcce 	bl	8002be0 <configMotor>
			configMotor(&motor2,2);
 8003244:	2102      	movs	r1, #2
 8003246:	481a      	ldr	r0, [pc, #104]	; (80032b0 <statesMachineLoop+0x4c0>)
 8003248:	f7ff fcca 	bl	8002be0 <configMotor>
			configMotor(&motor3,3);
 800324c:	2103      	movs	r1, #3
 800324e:	481a      	ldr	r0, [pc, #104]	; (80032b8 <statesMachineLoop+0x4c8>)
 8003250:	f7ff fcc6 	bl	8002be0 <configMotor>

			timeFlag = false;
 8003254:	4b29      	ldr	r3, [pc, #164]	; (80032fc <statesMachineLoop+0x50c>)
 8003256:	2200      	movs	r2, #0
 8003258:	701a      	strb	r2, [r3, #0]

			motor1.pMotor = 0;
 800325a:	4b13      	ldr	r3, [pc, #76]	; (80032a8 <statesMachineLoop+0x4b8>)
 800325c:	2200      	movs	r2, #0
 800325e:	641a      	str	r2, [r3, #64]	; 0x40
			motor2.pMotor = 0;
 8003260:	4b13      	ldr	r3, [pc, #76]	; (80032b0 <statesMachineLoop+0x4c0>)
 8003262:	2200      	movs	r2, #0
 8003264:	641a      	str	r2, [r3, #64]	; 0x40
			motor3.pMotor = 0;
 8003266:	4b14      	ldr	r3, [pc, #80]	; (80032b8 <statesMachineLoop+0x4c8>)
 8003268:	2200      	movs	r2, #0
 800326a:	641a      	str	r2, [r3, #64]	; 0x40

			motor1.stepReached = false;
 800326c:	4b0e      	ldr	r3, [pc, #56]	; (80032a8 <statesMachineLoop+0x4b8>)
 800326e:	2200      	movs	r2, #0
 8003270:	765a      	strb	r2, [r3, #25]
			motor2.stepReached = false;
 8003272:	4b0f      	ldr	r3, [pc, #60]	; (80032b0 <statesMachineLoop+0x4c0>)
 8003274:	2200      	movs	r2, #0
 8003276:	765a      	strb	r2, [r3, #25]
			motor3.stepReached = false;
 8003278:	4b0f      	ldr	r3, [pc, #60]	; (80032b8 <statesMachineLoop+0x4c8>)
 800327a:	2200      	movs	r2, #0
 800327c:	765a      	strb	r2, [r3, #25]

			HAL_TIM_Base_Start(&htim5);
 800327e:	4813      	ldr	r0, [pc, #76]	; (80032cc <statesMachineLoop+0x4dc>)
 8003280:	f006 fe98 	bl	8009fb4 <HAL_TIM_Base_Start>
			HAL_TIM_Base_Start_IT(&htim15);
 8003284:	4810      	ldr	r0, [pc, #64]	; (80032c8 <statesMachineLoop+0x4d8>)
 8003286:	f006 ff2d 	bl	800a0e4 <HAL_TIM_Base_Start_IT>

			state = WORKING;
 800328a:	4b12      	ldr	r3, [pc, #72]	; (80032d4 <statesMachineLoop+0x4e4>)
 800328c:	2202      	movs	r2, #2
 800328e:	701a      	strb	r2, [r3, #0]
		}
		break;
 8003290:	e33b      	b.n	800390a <statesMachineLoop+0xb1a>
 8003292:	bf00      	nop
 8003294:	2400045b 	.word	0x2400045b
 8003298:	2400045a 	.word	0x2400045a
 800329c:	240005c8 	.word	0x240005c8
 80032a0:	24000614 	.word	0x24000614
 80032a4:	24000660 	.word	0x24000660
 80032a8:	24000368 	.word	0x24000368
 80032ac:	240006f8 	.word	0x240006f8
 80032b0:	240003b0 	.word	0x240003b0
 80032b4:	24000744 	.word	0x24000744
 80032b8:	240003f8 	.word	0x240003f8
 80032bc:	24000790 	.word	0x24000790
 80032c0:	240004b8 	.word	0x240004b8
 80032c4:	240004a0 	.word	0x240004a0
 80032c8:	240007dc 	.word	0x240007dc
 80032cc:	240006ac 	.word	0x240006ac
 80032d0:	2400059d 	.word	0x2400059d
 80032d4:	24000458 	.word	0x24000458
 80032d8:	2400059b 	.word	0x2400059b
 80032dc:	24000018 	.word	0x24000018
 80032e0:	24000490 	.word	0x24000490
 80032e4:	24000010 	.word	0x24000010
 80032e8:	24000020 	.word	0x24000020
 80032ec:	24000008 	.word	0x24000008
 80032f0:	240004d0 	.word	0x240004d0
 80032f4:	24000508 	.word	0x24000508
 80032f8:	24000540 	.word	0x24000540
 80032fc:	24000578 	.word	0x24000578

	case FAULT:

		__HAL_TIM_SET_AUTORELOAD(&htim12,COUNTERPERIOD(rpm_fault)); //Escritura del registro ARR
 8003300:	4b8f      	ldr	r3, [pc, #572]	; (8003540 <statesMachineLoop+0x750>)
 8003302:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003304:	ee07 3a90 	vmov	s15, r3
 8003308:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800330c:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8003310:	ee37 7b06 	vadd.f64	d7, d7, d6
 8003314:	ed9f 5b84 	vldr	d5, [pc, #528]	; 8003528 <statesMachineLoop+0x738>
 8003318:	ee85 6b07 	vdiv.f64	d6, d5, d7
 800331c:	4b89      	ldr	r3, [pc, #548]	; (8003544 <statesMachineLoop+0x754>)
 800331e:	ed93 7b00 	vldr	d7, [r3]
 8003322:	ed9f 5b83 	vldr	d5, [pc, #524]	; 8003530 <statesMachineLoop+0x740>
 8003326:	ee27 5b05 	vmul.f64	d5, d7, d5
 800332a:	ed9f 4b83 	vldr	d4, [pc, #524]	; 8003538 <statesMachineLoop+0x748>
 800332e:	ee84 7b05 	vdiv.f64	d7, d4, d5
 8003332:	ee26 7b07 	vmul.f64	d7, d6, d7
 8003336:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800333a:	ee37 7b46 	vsub.f64	d7, d7, d6
 800333e:	4b82      	ldr	r3, [pc, #520]	; (8003548 <statesMachineLoop+0x758>)
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8003346:	ee17 2a90 	vmov	r2, s15
 800334a:	62da      	str	r2, [r3, #44]	; 0x2c
 800334c:	4b7c      	ldr	r3, [pc, #496]	; (8003540 <statesMachineLoop+0x750>)
 800334e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003350:	ee07 3a90 	vmov	s15, r3
 8003354:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8003358:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800335c:	ee37 7b06 	vadd.f64	d7, d7, d6
 8003360:	ed9f 5b71 	vldr	d5, [pc, #452]	; 8003528 <statesMachineLoop+0x738>
 8003364:	ee85 6b07 	vdiv.f64	d6, d5, d7
 8003368:	4b76      	ldr	r3, [pc, #472]	; (8003544 <statesMachineLoop+0x754>)
 800336a:	ed93 7b00 	vldr	d7, [r3]
 800336e:	ed9f 5b70 	vldr	d5, [pc, #448]	; 8003530 <statesMachineLoop+0x740>
 8003372:	ee27 5b05 	vmul.f64	d5, d7, d5
 8003376:	ed9f 4b70 	vldr	d4, [pc, #448]	; 8003538 <statesMachineLoop+0x748>
 800337a:	ee84 7b05 	vdiv.f64	d7, d4, d5
 800337e:	ee26 7b07 	vmul.f64	d7, d6, d7
 8003382:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8003386:	ee37 7b46 	vsub.f64	d7, d7, d6
 800338a:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800338e:	ee17 2a90 	vmov	r2, s15
 8003392:	4b6d      	ldr	r3, [pc, #436]	; (8003548 <statesMachineLoop+0x758>)
 8003394:	60da      	str	r2, [r3, #12]
		__HAL_TIM_SET_AUTORELOAD(&htim13,COUNTERPERIOD(rpm_fault));
 8003396:	4b6a      	ldr	r3, [pc, #424]	; (8003540 <statesMachineLoop+0x750>)
 8003398:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800339a:	ee07 3a90 	vmov	s15, r3
 800339e:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80033a2:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 80033a6:	ee37 7b06 	vadd.f64	d7, d7, d6
 80033aa:	ed9f 5b5f 	vldr	d5, [pc, #380]	; 8003528 <statesMachineLoop+0x738>
 80033ae:	ee85 6b07 	vdiv.f64	d6, d5, d7
 80033b2:	4b64      	ldr	r3, [pc, #400]	; (8003544 <statesMachineLoop+0x754>)
 80033b4:	ed93 7b00 	vldr	d7, [r3]
 80033b8:	ed9f 5b5d 	vldr	d5, [pc, #372]	; 8003530 <statesMachineLoop+0x740>
 80033bc:	ee27 5b05 	vmul.f64	d5, d7, d5
 80033c0:	ed9f 4b5d 	vldr	d4, [pc, #372]	; 8003538 <statesMachineLoop+0x748>
 80033c4:	ee84 7b05 	vdiv.f64	d7, d4, d5
 80033c8:	ee26 7b07 	vmul.f64	d7, d6, d7
 80033cc:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 80033d0:	ee37 7b46 	vsub.f64	d7, d7, d6
 80033d4:	4b5d      	ldr	r3, [pc, #372]	; (800354c <statesMachineLoop+0x75c>)
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80033dc:	ee17 2a90 	vmov	r2, s15
 80033e0:	62da      	str	r2, [r3, #44]	; 0x2c
 80033e2:	4b57      	ldr	r3, [pc, #348]	; (8003540 <statesMachineLoop+0x750>)
 80033e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033e6:	ee07 3a90 	vmov	s15, r3
 80033ea:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80033ee:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 80033f2:	ee37 7b06 	vadd.f64	d7, d7, d6
 80033f6:	ed9f 5b4c 	vldr	d5, [pc, #304]	; 8003528 <statesMachineLoop+0x738>
 80033fa:	ee85 6b07 	vdiv.f64	d6, d5, d7
 80033fe:	4b51      	ldr	r3, [pc, #324]	; (8003544 <statesMachineLoop+0x754>)
 8003400:	ed93 7b00 	vldr	d7, [r3]
 8003404:	ed9f 5b4a 	vldr	d5, [pc, #296]	; 8003530 <statesMachineLoop+0x740>
 8003408:	ee27 5b05 	vmul.f64	d5, d7, d5
 800340c:	ed9f 4b4a 	vldr	d4, [pc, #296]	; 8003538 <statesMachineLoop+0x748>
 8003410:	ee84 7b05 	vdiv.f64	d7, d4, d5
 8003414:	ee26 7b07 	vmul.f64	d7, d6, d7
 8003418:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800341c:	ee37 7b46 	vsub.f64	d7, d7, d6
 8003420:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8003424:	ee17 2a90 	vmov	r2, s15
 8003428:	4b48      	ldr	r3, [pc, #288]	; (800354c <statesMachineLoop+0x75c>)
 800342a:	60da      	str	r2, [r3, #12]
		__HAL_TIM_SET_AUTORELOAD(&htim14,COUNTERPERIOD(rpm_fault));
 800342c:	4b44      	ldr	r3, [pc, #272]	; (8003540 <statesMachineLoop+0x750>)
 800342e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003430:	ee07 3a90 	vmov	s15, r3
 8003434:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8003438:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800343c:	ee37 7b06 	vadd.f64	d7, d7, d6
 8003440:	ed9f 5b39 	vldr	d5, [pc, #228]	; 8003528 <statesMachineLoop+0x738>
 8003444:	ee85 6b07 	vdiv.f64	d6, d5, d7
 8003448:	4b3e      	ldr	r3, [pc, #248]	; (8003544 <statesMachineLoop+0x754>)
 800344a:	ed93 7b00 	vldr	d7, [r3]
 800344e:	ed9f 5b38 	vldr	d5, [pc, #224]	; 8003530 <statesMachineLoop+0x740>
 8003452:	ee27 5b05 	vmul.f64	d5, d7, d5
 8003456:	ed9f 4b38 	vldr	d4, [pc, #224]	; 8003538 <statesMachineLoop+0x748>
 800345a:	ee84 7b05 	vdiv.f64	d7, d4, d5
 800345e:	ee26 7b07 	vmul.f64	d7, d6, d7
 8003462:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8003466:	ee37 7b46 	vsub.f64	d7, d7, d6
 800346a:	4b39      	ldr	r3, [pc, #228]	; (8003550 <statesMachineLoop+0x760>)
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8003472:	ee17 2a90 	vmov	r2, s15
 8003476:	62da      	str	r2, [r3, #44]	; 0x2c
 8003478:	4b31      	ldr	r3, [pc, #196]	; (8003540 <statesMachineLoop+0x750>)
 800347a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800347c:	ee07 3a90 	vmov	s15, r3
 8003480:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8003484:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8003488:	ee37 7b06 	vadd.f64	d7, d7, d6
 800348c:	ed9f 5b26 	vldr	d5, [pc, #152]	; 8003528 <statesMachineLoop+0x738>
 8003490:	ee85 6b07 	vdiv.f64	d6, d5, d7
 8003494:	4b2b      	ldr	r3, [pc, #172]	; (8003544 <statesMachineLoop+0x754>)
 8003496:	ed93 7b00 	vldr	d7, [r3]
 800349a:	ed9f 5b25 	vldr	d5, [pc, #148]	; 8003530 <statesMachineLoop+0x740>
 800349e:	ee27 5b05 	vmul.f64	d5, d7, d5
 80034a2:	ed9f 4b25 	vldr	d4, [pc, #148]	; 8003538 <statesMachineLoop+0x748>
 80034a6:	ee84 7b05 	vdiv.f64	d7, d4, d5
 80034aa:	ee26 7b07 	vmul.f64	d7, d6, d7
 80034ae:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 80034b2:	ee37 7b46 	vsub.f64	d7, d7, d6
 80034b6:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80034ba:	ee17 2a90 	vmov	r2, s15
 80034be:	4b24      	ldr	r3, [pc, #144]	; (8003550 <statesMachineLoop+0x760>)
 80034c0:	60da      	str	r2, [r3, #12]

		TIM12->CCR1 = (uint32_t)((double)(TIM12->ARR) / 2.0);
 80034c2:	4b1f      	ldr	r3, [pc, #124]	; (8003540 <statesMachineLoop+0x750>)
 80034c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034c6:	ee07 3a90 	vmov	s15, r3
 80034ca:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 80034ce:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 80034d2:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80034d6:	4b1a      	ldr	r3, [pc, #104]	; (8003540 <statesMachineLoop+0x750>)
 80034d8:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80034dc:	ee17 2a90 	vmov	r2, s15
 80034e0:	635a      	str	r2, [r3, #52]	; 0x34
		TIM13->CCR1 = (uint32_t)((double)(TIM13->ARR) / 2.0);
 80034e2:	4b1c      	ldr	r3, [pc, #112]	; (8003554 <statesMachineLoop+0x764>)
 80034e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034e6:	ee07 3a90 	vmov	s15, r3
 80034ea:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 80034ee:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 80034f2:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80034f6:	4b17      	ldr	r3, [pc, #92]	; (8003554 <statesMachineLoop+0x764>)
 80034f8:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80034fc:	ee17 2a90 	vmov	r2, s15
 8003500:	635a      	str	r2, [r3, #52]	; 0x34
		TIM14->CCR1 = (uint32_t)((double)(TIM14->ARR) / 2.0);
 8003502:	4b15      	ldr	r3, [pc, #84]	; (8003558 <statesMachineLoop+0x768>)
 8003504:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003506:	ee07 3a90 	vmov	s15, r3
 800350a:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 800350e:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8003512:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8003516:	4b10      	ldr	r3, [pc, #64]	; (8003558 <statesMachineLoop+0x768>)
 8003518:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800351c:	ee17 2a90 	vmov	r2, s15
 8003520:	635a      	str	r2, [r3, #52]	; 0x34

		while((endStopAlarmSup || endStopAlarmInf) && continuar){
 8003522:	e166      	b.n	80037f2 <statesMachineLoop+0xa02>
 8003524:	f3af 8000 	nop.w
 8003528:	00000000 	.word	0x00000000
 800352c:	418e8480 	.word	0x418e8480
 8003530:	00000000 	.word	0x00000000
 8003534:	40bf4000 	.word	0x40bf4000
 8003538:	00000000 	.word	0x00000000
 800353c:	404e0000 	.word	0x404e0000
 8003540:	40001800 	.word	0x40001800
 8003544:	24000028 	.word	0x24000028
 8003548:	240006f8 	.word	0x240006f8
 800354c:	24000744 	.word	0x24000744
 8003550:	24000790 	.word	0x24000790
 8003554:	40001c00 	.word	0x40001c00
 8003558:	40002000 	.word	0x40002000

			 //HAL_UART_Transmit(&huart3,(uint8_t*)"EndStopAlarm\r\n", 16, 100);

			 if (ES1i_PRESSED){
 800355c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003560:	48b7      	ldr	r0, [pc, #732]	; (8003840 <statesMachineLoop+0xa50>)
 8003562:	f004 f927 	bl	80077b4 <HAL_GPIO_ReadPin>
 8003566:	4603      	mov	r3, r0
 8003568:	2b00      	cmp	r3, #0
 800356a:	d11e      	bne.n	80035aa <statesMachineLoop+0x7ba>
				 HAL_Delay(10);
 800356c:	200a      	movs	r0, #10
 800356e:	f003 f89b 	bl	80066a8 <HAL_Delay>
				 if (ES1i_PRESSED){
 8003572:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003576:	48b2      	ldr	r0, [pc, #712]	; (8003840 <statesMachineLoop+0xa50>)
 8003578:	f004 f91c 	bl	80077b4 <HAL_GPIO_ReadPin>
 800357c:	4603      	mov	r3, r0
 800357e:	2b00      	cmp	r3, #0
 8003580:	d113      	bne.n	80035aa <statesMachineLoop+0x7ba>
					 positive_Dir_MOTOR_1;
 8003582:	2200      	movs	r2, #0
 8003584:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003588:	48ae      	ldr	r0, [pc, #696]	; (8003844 <statesMachineLoop+0xa54>)
 800358a:	f004 f92b 	bl	80077e4 <HAL_GPIO_WritePin>
					 HAL_Delay(0.5); 							//delay cambio de dir
 800358e:	2000      	movs	r0, #0
 8003590:	f003 f88a 	bl	80066a8 <HAL_Delay>
					 Start_PWM_MOTOR_1;
 8003594:	2100      	movs	r1, #0
 8003596:	48ac      	ldr	r0, [pc, #688]	; (8003848 <statesMachineLoop+0xa58>)
 8003598:	f006 feac 	bl	800a2f4 <HAL_TIM_PWM_Start>
					 HAL_Delay(200);
 800359c:	20c8      	movs	r0, #200	; 0xc8
 800359e:	f003 f883 	bl	80066a8 <HAL_Delay>
					 Stop_PWM_MOTOR_1;
 80035a2:	2100      	movs	r1, #0
 80035a4:	48a8      	ldr	r0, [pc, #672]	; (8003848 <statesMachineLoop+0xa58>)
 80035a6:	f006 ffb3 	bl	800a510 <HAL_TIM_PWM_Stop>
				 }
			 }
			 if (ES1s_PRESSED){
 80035aa:	2101      	movs	r1, #1
 80035ac:	48a7      	ldr	r0, [pc, #668]	; (800384c <statesMachineLoop+0xa5c>)
 80035ae:	f004 f901 	bl	80077b4 <HAL_GPIO_ReadPin>
 80035b2:	4603      	mov	r3, r0
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d11d      	bne.n	80035f4 <statesMachineLoop+0x804>
				 HAL_Delay(10);
 80035b8:	200a      	movs	r0, #10
 80035ba:	f003 f875 	bl	80066a8 <HAL_Delay>
				 if (ES1s_PRESSED){
 80035be:	2101      	movs	r1, #1
 80035c0:	48a2      	ldr	r0, [pc, #648]	; (800384c <statesMachineLoop+0xa5c>)
 80035c2:	f004 f8f7 	bl	80077b4 <HAL_GPIO_ReadPin>
 80035c6:	4603      	mov	r3, r0
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d113      	bne.n	80035f4 <statesMachineLoop+0x804>
					 negative_Dir_MOTOR_1;
 80035cc:	2201      	movs	r2, #1
 80035ce:	f44f 7180 	mov.w	r1, #256	; 0x100
 80035d2:	489c      	ldr	r0, [pc, #624]	; (8003844 <statesMachineLoop+0xa54>)
 80035d4:	f004 f906 	bl	80077e4 <HAL_GPIO_WritePin>
					 HAL_Delay(0.5); 							//delay cambio de dir
 80035d8:	2000      	movs	r0, #0
 80035da:	f003 f865 	bl	80066a8 <HAL_Delay>
					 Start_PWM_MOTOR_1;
 80035de:	2100      	movs	r1, #0
 80035e0:	4899      	ldr	r0, [pc, #612]	; (8003848 <statesMachineLoop+0xa58>)
 80035e2:	f006 fe87 	bl	800a2f4 <HAL_TIM_PWM_Start>
					 HAL_Delay(200);
 80035e6:	20c8      	movs	r0, #200	; 0xc8
 80035e8:	f003 f85e 	bl	80066a8 <HAL_Delay>
					 Stop_PWM_MOTOR_1;
 80035ec:	2100      	movs	r1, #0
 80035ee:	4896      	ldr	r0, [pc, #600]	; (8003848 <statesMachineLoop+0xa58>)
 80035f0:	f006 ff8e 	bl	800a510 <HAL_TIM_PWM_Stop>
				 }
			 }


			 if (ES2i_PRESSED){
 80035f4:	2108      	movs	r1, #8
 80035f6:	4895      	ldr	r0, [pc, #596]	; (800384c <statesMachineLoop+0xa5c>)
 80035f8:	f004 f8dc 	bl	80077b4 <HAL_GPIO_ReadPin>
 80035fc:	4603      	mov	r3, r0
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d11d      	bne.n	800363e <statesMachineLoop+0x84e>
				 HAL_Delay(30);
 8003602:	201e      	movs	r0, #30
 8003604:	f003 f850 	bl	80066a8 <HAL_Delay>
				 if (ES2i_PRESSED){
 8003608:	2108      	movs	r1, #8
 800360a:	4890      	ldr	r0, [pc, #576]	; (800384c <statesMachineLoop+0xa5c>)
 800360c:	f004 f8d2 	bl	80077b4 <HAL_GPIO_ReadPin>
 8003610:	4603      	mov	r3, r0
 8003612:	2b00      	cmp	r3, #0
 8003614:	d113      	bne.n	800363e <statesMachineLoop+0x84e>
					 positive_Dir_MOTOR_2;
 8003616:	2200      	movs	r2, #0
 8003618:	f44f 7100 	mov.w	r1, #512	; 0x200
 800361c:	4889      	ldr	r0, [pc, #548]	; (8003844 <statesMachineLoop+0xa54>)
 800361e:	f004 f8e1 	bl	80077e4 <HAL_GPIO_WritePin>
					 HAL_Delay(0.5); 							//delay cambio de dir
 8003622:	2000      	movs	r0, #0
 8003624:	f003 f840 	bl	80066a8 <HAL_Delay>
					 Start_PWM_MOTOR_2;
 8003628:	2100      	movs	r1, #0
 800362a:	4889      	ldr	r0, [pc, #548]	; (8003850 <statesMachineLoop+0xa60>)
 800362c:	f006 fe62 	bl	800a2f4 <HAL_TIM_PWM_Start>
					 HAL_Delay(200);
 8003630:	20c8      	movs	r0, #200	; 0xc8
 8003632:	f003 f839 	bl	80066a8 <HAL_Delay>
					 Stop_PWM_MOTOR_2;
 8003636:	2100      	movs	r1, #0
 8003638:	4885      	ldr	r0, [pc, #532]	; (8003850 <statesMachineLoop+0xa60>)
 800363a:	f006 ff69 	bl	800a510 <HAL_TIM_PWM_Stop>
				 }
			 }
			 if (ES2s_PRESSED){
 800363e:	2104      	movs	r1, #4
 8003640:	4882      	ldr	r0, [pc, #520]	; (800384c <statesMachineLoop+0xa5c>)
 8003642:	f004 f8b7 	bl	80077b4 <HAL_GPIO_ReadPin>
 8003646:	4603      	mov	r3, r0
 8003648:	2b00      	cmp	r3, #0
 800364a:	d11d      	bne.n	8003688 <statesMachineLoop+0x898>
				 HAL_Delay(10);
 800364c:	200a      	movs	r0, #10
 800364e:	f003 f82b 	bl	80066a8 <HAL_Delay>
				 if (ES2s_PRESSED){
 8003652:	2104      	movs	r1, #4
 8003654:	487d      	ldr	r0, [pc, #500]	; (800384c <statesMachineLoop+0xa5c>)
 8003656:	f004 f8ad 	bl	80077b4 <HAL_GPIO_ReadPin>
 800365a:	4603      	mov	r3, r0
 800365c:	2b00      	cmp	r3, #0
 800365e:	d113      	bne.n	8003688 <statesMachineLoop+0x898>
					 negative_Dir_MOTOR_2;
 8003660:	2201      	movs	r2, #1
 8003662:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003666:	4877      	ldr	r0, [pc, #476]	; (8003844 <statesMachineLoop+0xa54>)
 8003668:	f004 f8bc 	bl	80077e4 <HAL_GPIO_WritePin>
					 HAL_Delay(0.5); 							//delay cambio de dir
 800366c:	2000      	movs	r0, #0
 800366e:	f003 f81b 	bl	80066a8 <HAL_Delay>
					 Start_PWM_MOTOR_2;
 8003672:	2100      	movs	r1, #0
 8003674:	4876      	ldr	r0, [pc, #472]	; (8003850 <statesMachineLoop+0xa60>)
 8003676:	f006 fe3d 	bl	800a2f4 <HAL_TIM_PWM_Start>
					 HAL_Delay(200);
 800367a:	20c8      	movs	r0, #200	; 0xc8
 800367c:	f003 f814 	bl	80066a8 <HAL_Delay>
					 Stop_PWM_MOTOR_2;
 8003680:	2100      	movs	r1, #0
 8003682:	4873      	ldr	r0, [pc, #460]	; (8003850 <statesMachineLoop+0xa60>)
 8003684:	f006 ff44 	bl	800a510 <HAL_TIM_PWM_Stop>
				 }
			 }
			 if (ES3i_PRESSED){
 8003688:	2120      	movs	r1, #32
 800368a:	4870      	ldr	r0, [pc, #448]	; (800384c <statesMachineLoop+0xa5c>)
 800368c:	f004 f892 	bl	80077b4 <HAL_GPIO_ReadPin>
 8003690:	4603      	mov	r3, r0
 8003692:	2b00      	cmp	r3, #0
 8003694:	d11d      	bne.n	80036d2 <statesMachineLoop+0x8e2>
				 HAL_Delay(10);
 8003696:	200a      	movs	r0, #10
 8003698:	f003 f806 	bl	80066a8 <HAL_Delay>
				 if (ES3i_PRESSED){
 800369c:	2120      	movs	r1, #32
 800369e:	486b      	ldr	r0, [pc, #428]	; (800384c <statesMachineLoop+0xa5c>)
 80036a0:	f004 f888 	bl	80077b4 <HAL_GPIO_ReadPin>
 80036a4:	4603      	mov	r3, r0
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d113      	bne.n	80036d2 <statesMachineLoop+0x8e2>
					 positive_Dir_MOTOR_3;
 80036aa:	2200      	movs	r2, #0
 80036ac:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80036b0:	4864      	ldr	r0, [pc, #400]	; (8003844 <statesMachineLoop+0xa54>)
 80036b2:	f004 f897 	bl	80077e4 <HAL_GPIO_WritePin>
					 HAL_Delay(0.5); 							//delay cambio de dir
 80036b6:	2000      	movs	r0, #0
 80036b8:	f002 fff6 	bl	80066a8 <HAL_Delay>
					 Start_PWM_MOTOR_3;
 80036bc:	2100      	movs	r1, #0
 80036be:	4865      	ldr	r0, [pc, #404]	; (8003854 <statesMachineLoop+0xa64>)
 80036c0:	f006 fe18 	bl	800a2f4 <HAL_TIM_PWM_Start>
					 HAL_Delay(200);
 80036c4:	20c8      	movs	r0, #200	; 0xc8
 80036c6:	f002 ffef 	bl	80066a8 <HAL_Delay>
					 Stop_PWM_MOTOR_3;
 80036ca:	2100      	movs	r1, #0
 80036cc:	4861      	ldr	r0, [pc, #388]	; (8003854 <statesMachineLoop+0xa64>)
 80036ce:	f006 ff1f 	bl	800a510 <HAL_TIM_PWM_Stop>
				 }
			 }
			 if (ES3s_PRESSED){
 80036d2:	2110      	movs	r1, #16
 80036d4:	485d      	ldr	r0, [pc, #372]	; (800384c <statesMachineLoop+0xa5c>)
 80036d6:	f004 f86d 	bl	80077b4 <HAL_GPIO_ReadPin>
 80036da:	4603      	mov	r3, r0
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d11d      	bne.n	800371c <statesMachineLoop+0x92c>
				 HAL_Delay(10);
 80036e0:	200a      	movs	r0, #10
 80036e2:	f002 ffe1 	bl	80066a8 <HAL_Delay>
				 if (ES3s_PRESSED){
 80036e6:	2110      	movs	r1, #16
 80036e8:	4858      	ldr	r0, [pc, #352]	; (800384c <statesMachineLoop+0xa5c>)
 80036ea:	f004 f863 	bl	80077b4 <HAL_GPIO_ReadPin>
 80036ee:	4603      	mov	r3, r0
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d113      	bne.n	800371c <statesMachineLoop+0x92c>
					 negative_Dir_MOTOR_3;
 80036f4:	2201      	movs	r2, #1
 80036f6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80036fa:	4852      	ldr	r0, [pc, #328]	; (8003844 <statesMachineLoop+0xa54>)
 80036fc:	f004 f872 	bl	80077e4 <HAL_GPIO_WritePin>
					 HAL_Delay(0.5); 							//delay cambio de dir
 8003700:	2000      	movs	r0, #0
 8003702:	f002 ffd1 	bl	80066a8 <HAL_Delay>
					 Start_PWM_MOTOR_3;
 8003706:	2100      	movs	r1, #0
 8003708:	4852      	ldr	r0, [pc, #328]	; (8003854 <statesMachineLoop+0xa64>)
 800370a:	f006 fdf3 	bl	800a2f4 <HAL_TIM_PWM_Start>
					 HAL_Delay(200);
 800370e:	20c8      	movs	r0, #200	; 0xc8
 8003710:	f002 ffca 	bl	80066a8 <HAL_Delay>
					 Stop_PWM_MOTOR_3;
 8003714:	2100      	movs	r1, #0
 8003716:	484f      	ldr	r0, [pc, #316]	; (8003854 <statesMachineLoop+0xa64>)
 8003718:	f006 fefa 	bl	800a510 <HAL_TIM_PWM_Stop>
				 }
			 }


			 if(ES1s_UNPRESSED && ES2s_UNPRESSED && ES3s_UNPRESSED && ES1i_UNPRESSED && ES2i_UNPRESSED && ES3i_UNPRESSED){
 800371c:	2101      	movs	r1, #1
 800371e:	484b      	ldr	r0, [pc, #300]	; (800384c <statesMachineLoop+0xa5c>)
 8003720:	f004 f848 	bl	80077b4 <HAL_GPIO_ReadPin>
 8003724:	4603      	mov	r3, r0
 8003726:	2b00      	cmp	r3, #0
 8003728:	d063      	beq.n	80037f2 <statesMachineLoop+0xa02>
 800372a:	2104      	movs	r1, #4
 800372c:	4847      	ldr	r0, [pc, #284]	; (800384c <statesMachineLoop+0xa5c>)
 800372e:	f004 f841 	bl	80077b4 <HAL_GPIO_ReadPin>
 8003732:	4603      	mov	r3, r0
 8003734:	2b00      	cmp	r3, #0
 8003736:	d05c      	beq.n	80037f2 <statesMachineLoop+0xa02>
 8003738:	2110      	movs	r1, #16
 800373a:	4844      	ldr	r0, [pc, #272]	; (800384c <statesMachineLoop+0xa5c>)
 800373c:	f004 f83a 	bl	80077b4 <HAL_GPIO_ReadPin>
 8003740:	4603      	mov	r3, r0
 8003742:	2b00      	cmp	r3, #0
 8003744:	d055      	beq.n	80037f2 <statesMachineLoop+0xa02>
 8003746:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800374a:	483d      	ldr	r0, [pc, #244]	; (8003840 <statesMachineLoop+0xa50>)
 800374c:	f004 f832 	bl	80077b4 <HAL_GPIO_ReadPin>
 8003750:	4603      	mov	r3, r0
 8003752:	2b00      	cmp	r3, #0
 8003754:	d04d      	beq.n	80037f2 <statesMachineLoop+0xa02>
 8003756:	2108      	movs	r1, #8
 8003758:	483c      	ldr	r0, [pc, #240]	; (800384c <statesMachineLoop+0xa5c>)
 800375a:	f004 f82b 	bl	80077b4 <HAL_GPIO_ReadPin>
 800375e:	4603      	mov	r3, r0
 8003760:	2b00      	cmp	r3, #0
 8003762:	d046      	beq.n	80037f2 <statesMachineLoop+0xa02>
 8003764:	2120      	movs	r1, #32
 8003766:	4839      	ldr	r0, [pc, #228]	; (800384c <statesMachineLoop+0xa5c>)
 8003768:	f004 f824 	bl	80077b4 <HAL_GPIO_ReadPin>
 800376c:	4603      	mov	r3, r0
 800376e:	2b00      	cmp	r3, #0
 8003770:	d03f      	beq.n	80037f2 <statesMachineLoop+0xa02>
				 HAL_Delay(10);
 8003772:	200a      	movs	r0, #10
 8003774:	f002 ff98 	bl	80066a8 <HAL_Delay>
				 if(ES1s_UNPRESSED && ES2s_UNPRESSED && ES3s_UNPRESSED && ES1i_UNPRESSED && ES2i_UNPRESSED && ES3i_UNPRESSED){
 8003778:	2101      	movs	r1, #1
 800377a:	4834      	ldr	r0, [pc, #208]	; (800384c <statesMachineLoop+0xa5c>)
 800377c:	f004 f81a 	bl	80077b4 <HAL_GPIO_ReadPin>
 8003780:	4603      	mov	r3, r0
 8003782:	2b00      	cmp	r3, #0
 8003784:	d035      	beq.n	80037f2 <statesMachineLoop+0xa02>
 8003786:	2104      	movs	r1, #4
 8003788:	4830      	ldr	r0, [pc, #192]	; (800384c <statesMachineLoop+0xa5c>)
 800378a:	f004 f813 	bl	80077b4 <HAL_GPIO_ReadPin>
 800378e:	4603      	mov	r3, r0
 8003790:	2b00      	cmp	r3, #0
 8003792:	d02e      	beq.n	80037f2 <statesMachineLoop+0xa02>
 8003794:	2110      	movs	r1, #16
 8003796:	482d      	ldr	r0, [pc, #180]	; (800384c <statesMachineLoop+0xa5c>)
 8003798:	f004 f80c 	bl	80077b4 <HAL_GPIO_ReadPin>
 800379c:	4603      	mov	r3, r0
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d027      	beq.n	80037f2 <statesMachineLoop+0xa02>
 80037a2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80037a6:	4826      	ldr	r0, [pc, #152]	; (8003840 <statesMachineLoop+0xa50>)
 80037a8:	f004 f804 	bl	80077b4 <HAL_GPIO_ReadPin>
 80037ac:	4603      	mov	r3, r0
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d01f      	beq.n	80037f2 <statesMachineLoop+0xa02>
 80037b2:	2108      	movs	r1, #8
 80037b4:	4825      	ldr	r0, [pc, #148]	; (800384c <statesMachineLoop+0xa5c>)
 80037b6:	f003 fffd 	bl	80077b4 <HAL_GPIO_ReadPin>
 80037ba:	4603      	mov	r3, r0
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d018      	beq.n	80037f2 <statesMachineLoop+0xa02>
 80037c0:	2120      	movs	r1, #32
 80037c2:	4822      	ldr	r0, [pc, #136]	; (800384c <statesMachineLoop+0xa5c>)
 80037c4:	f003 fff6 	bl	80077b4 <HAL_GPIO_ReadPin>
 80037c8:	4603      	mov	r3, r0
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d011      	beq.n	80037f2 <statesMachineLoop+0xa02>

					 endStopAlarmSup = false;
 80037ce:	4b22      	ldr	r3, [pc, #136]	; (8003858 <statesMachineLoop+0xa68>)
 80037d0:	2200      	movs	r2, #0
 80037d2:	701a      	strb	r2, [r3, #0]
					 endStopAlarmInf = false;
 80037d4:	4b21      	ldr	r3, [pc, #132]	; (800385c <statesMachineLoop+0xa6c>)
 80037d6:	2200      	movs	r2, #0
 80037d8:	701a      	strb	r2, [r3, #0]
					 continuar = false;
 80037da:	4b21      	ldr	r3, [pc, #132]	; (8003860 <statesMachineLoop+0xa70>)
 80037dc:	2200      	movs	r2, #0
 80037de:	701a      	strb	r2, [r3, #0]
					 HAL_UART_Transmit(&huart3,(uint8_t*)"Fin_FAULT\r\n", 13, 100);
 80037e0:	2364      	movs	r3, #100	; 0x64
 80037e2:	220d      	movs	r2, #13
 80037e4:	491f      	ldr	r1, [pc, #124]	; (8003864 <statesMachineLoop+0xa74>)
 80037e6:	4820      	ldr	r0, [pc, #128]	; (8003868 <statesMachineLoop+0xa78>)
 80037e8:	f008 fb8a 	bl	800bf00 <HAL_UART_Transmit>
					 state = READY;
 80037ec:	4b1f      	ldr	r3, [pc, #124]	; (800386c <statesMachineLoop+0xa7c>)
 80037ee:	2201      	movs	r2, #1
 80037f0:	701a      	strb	r2, [r3, #0]
		while((endStopAlarmSup || endStopAlarmInf) && continuar){
 80037f2:	4b19      	ldr	r3, [pc, #100]	; (8003858 <statesMachineLoop+0xa68>)
 80037f4:	781b      	ldrb	r3, [r3, #0]
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d103      	bne.n	8003802 <statesMachineLoop+0xa12>
 80037fa:	4b18      	ldr	r3, [pc, #96]	; (800385c <statesMachineLoop+0xa6c>)
 80037fc:	781b      	ldrb	r3, [r3, #0]
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d014      	beq.n	800382c <statesMachineLoop+0xa3c>
 8003802:	4b17      	ldr	r3, [pc, #92]	; (8003860 <statesMachineLoop+0xa70>)
 8003804:	781b      	ldrb	r3, [r3, #0]
 8003806:	2b00      	cmp	r3, #0
 8003808:	f47f aea8 	bne.w	800355c <statesMachineLoop+0x76c>
			 }


		}//End while

		while(faultDrivers && continuar){
 800380c:	e00e      	b.n	800382c <statesMachineLoop+0xa3c>

			//relayAbierto;
			//HAL_Delay(100);
			//relayCerrado;

			faultDrivers = false;
 800380e:	4b18      	ldr	r3, [pc, #96]	; (8003870 <statesMachineLoop+0xa80>)
 8003810:	2200      	movs	r2, #0
 8003812:	701a      	strb	r2, [r3, #0]
			continuar = false;
 8003814:	4b12      	ldr	r3, [pc, #72]	; (8003860 <statesMachineLoop+0xa70>)
 8003816:	2200      	movs	r2, #0
 8003818:	701a      	strb	r2, [r3, #0]

			HAL_UART_Transmit(&huart3,(uint8_t*)"Fin_FALL\r\n", 13, 100);
 800381a:	2364      	movs	r3, #100	; 0x64
 800381c:	220d      	movs	r2, #13
 800381e:	4915      	ldr	r1, [pc, #84]	; (8003874 <statesMachineLoop+0xa84>)
 8003820:	4811      	ldr	r0, [pc, #68]	; (8003868 <statesMachineLoop+0xa78>)
 8003822:	f008 fb6d 	bl	800bf00 <HAL_UART_Transmit>
			state = READY;
 8003826:	4b11      	ldr	r3, [pc, #68]	; (800386c <statesMachineLoop+0xa7c>)
 8003828:	2201      	movs	r2, #1
 800382a:	701a      	strb	r2, [r3, #0]
		while(faultDrivers && continuar){
 800382c:	4b10      	ldr	r3, [pc, #64]	; (8003870 <statesMachineLoop+0xa80>)
 800382e:	781b      	ldrb	r3, [r3, #0]
 8003830:	2b00      	cmp	r3, #0
 8003832:	d06c      	beq.n	800390e <statesMachineLoop+0xb1e>
 8003834:	4b0a      	ldr	r3, [pc, #40]	; (8003860 <statesMachineLoop+0xa70>)
 8003836:	781b      	ldrb	r3, [r3, #0]
 8003838:	2b00      	cmp	r3, #0
 800383a:	d1e8      	bne.n	800380e <statesMachineLoop+0xa1e>

		}//End while


		break;
 800383c:	e067      	b.n	800390e <statesMachineLoop+0xb1e>
 800383e:	bf00      	nop
 8003840:	58021800 	.word	0x58021800
 8003844:	58020800 	.word	0x58020800
 8003848:	240006f8 	.word	0x240006f8
 800384c:	58021000 	.word	0x58021000
 8003850:	24000744 	.word	0x24000744
 8003854:	24000790 	.word	0x24000790
 8003858:	2400045c 	.word	0x2400045c
 800385c:	2400045d 	.word	0x2400045d
 8003860:	2400045e 	.word	0x2400045e
 8003864:	0801219c 	.word	0x0801219c
 8003868:	24000a00 	.word	0x24000a00
 800386c:	24000458 	.word	0x24000458
 8003870:	2400045f 	.word	0x2400045f
 8003874:	080121a8 	.word	0x080121a8

	case DEMO:

	    // Abre el archivo para lectura (una sola vez siempre y cuando readFile sea verdadero )
		if (readFile){
 8003878:	4b26      	ldr	r3, [pc, #152]	; (8003914 <statesMachineLoop+0xb24>)
 800387a:	781b      	ldrb	r3, [r3, #0]
 800387c:	2b00      	cmp	r3, #0
 800387e:	d019      	beq.n	80038b4 <statesMachineLoop+0xac4>
			file = fopen(filename, "r");
 8003880:	4b25      	ldr	r3, [pc, #148]	; (8003918 <statesMachineLoop+0xb28>)
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	4925      	ldr	r1, [pc, #148]	; (800391c <statesMachineLoop+0xb2c>)
 8003886:	4618      	mov	r0, r3
 8003888:	f00b f944 	bl	800eb14 <fopen>
 800388c:	4603      	mov	r3, r0
 800388e:	4a24      	ldr	r2, [pc, #144]	; (8003920 <statesMachineLoop+0xb30>)
 8003890:	6013      	str	r3, [r2, #0]

			// Verifica si el archivo se ha abierto correctamente
			if (file == NULL) {
 8003892:	4b23      	ldr	r3, [pc, #140]	; (8003920 <statesMachineLoop+0xb30>)
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	2b00      	cmp	r3, #0
 8003898:	d106      	bne.n	80038a8 <statesMachineLoop+0xab8>
				HAL_UART_Transmit(&huart3,(uint8_t*)"No se pudo abrir el archivo.\n", 30, 100);
 800389a:	2364      	movs	r3, #100	; 0x64
 800389c:	221e      	movs	r2, #30
 800389e:	4921      	ldr	r1, [pc, #132]	; (8003924 <statesMachineLoop+0xb34>)
 80038a0:	4821      	ldr	r0, [pc, #132]	; (8003928 <statesMachineLoop+0xb38>)
 80038a2:	f008 fb2d 	bl	800bf00 <HAL_UART_Transmit>
				break;
 80038a6:	e033      	b.n	8003910 <statesMachineLoop+0xb20>
			}
			readFile = false;
 80038a8:	4b1a      	ldr	r3, [pc, #104]	; (8003914 <statesMachineLoop+0xb24>)
 80038aa:	2200      	movs	r2, #0
 80038ac:	701a      	strb	r2, [r3, #0]
			startDemo = true;
 80038ae:	4b1f      	ldr	r3, [pc, #124]	; (800392c <statesMachineLoop+0xb3c>)
 80038b0:	2201      	movs	r2, #1
 80038b2:	701a      	strb	r2, [r3, #0]
		}

	    // Lee cada línea del archivo y la guarda en el buffer
	    if (fgets(buffer, BUFFER_SIZE, file) != NULL) {
 80038b4:	4b1a      	ldr	r3, [pc, #104]	; (8003920 <statesMachineLoop+0xb30>)
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	461a      	mov	r2, r3
 80038ba:	211e      	movs	r1, #30
 80038bc:	481c      	ldr	r0, [pc, #112]	; (8003930 <statesMachineLoop+0xb40>)
 80038be:	f00a fff5 	bl	800e8ac <fgets>
 80038c2:	4603      	mov	r3, r0
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d00e      	beq.n	80038e6 <statesMachineLoop+0xaf6>

	        // Copia la línea al buffer de tipo uint8_t
	        //uint8_t rx_buffer[strlen(buffer)];
	        memcpy(rx_buffer, buffer, strlen(buffer));
 80038c8:	4819      	ldr	r0, [pc, #100]	; (8003930 <statesMachineLoop+0xb40>)
 80038ca:	f7fc fd59 	bl	8000380 <strlen>
 80038ce:	4603      	mov	r3, r0
 80038d0:	461a      	mov	r2, r3
 80038d2:	4917      	ldr	r1, [pc, #92]	; (8003930 <statesMachineLoop+0xb40>)
 80038d4:	4817      	ldr	r0, [pc, #92]	; (8003934 <statesMachineLoop+0xb44>)
 80038d6:	f00b faa5 	bl	800ee24 <memcpy>

	        interpretaComando();
 80038da:	f7fd fd57 	bl	800138c <interpretaComando>

	        state = READY;
 80038de:	4b16      	ldr	r3, [pc, #88]	; (8003938 <statesMachineLoop+0xb48>)
 80038e0:	2201      	movs	r2, #1
 80038e2:	701a      	strb	r2, [r3, #0]
			startDemo = false;
			fclose(file);
			HAL_UART_Transmit(&huart3,(uint8_t*)"Fin demo\n", 10, 100);
	    }

	default:break;
 80038e4:	e00d      	b.n	8003902 <statesMachineLoop+0xb12>
			startDemo = false;
 80038e6:	4b11      	ldr	r3, [pc, #68]	; (800392c <statesMachineLoop+0xb3c>)
 80038e8:	2200      	movs	r2, #0
 80038ea:	701a      	strb	r2, [r3, #0]
			fclose(file);
 80038ec:	4b0c      	ldr	r3, [pc, #48]	; (8003920 <statesMachineLoop+0xb30>)
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	4618      	mov	r0, r3
 80038f2:	f00a fe85 	bl	800e600 <fclose>
			HAL_UART_Transmit(&huart3,(uint8_t*)"Fin demo\n", 10, 100);
 80038f6:	2364      	movs	r3, #100	; 0x64
 80038f8:	220a      	movs	r2, #10
 80038fa:	4910      	ldr	r1, [pc, #64]	; (800393c <statesMachineLoop+0xb4c>)
 80038fc:	480a      	ldr	r0, [pc, #40]	; (8003928 <statesMachineLoop+0xb38>)
 80038fe:	f008 faff 	bl	800bf00 <HAL_UART_Transmit>
	default:break;
 8003902:	bf00      	nop
 8003904:	e004      	b.n	8003910 <statesMachineLoop+0xb20>
		break;
 8003906:	bf00      	nop
 8003908:	e002      	b.n	8003910 <statesMachineLoop+0xb20>
		break;
 800390a:	bf00      	nop
 800390c:	e000      	b.n	8003910 <statesMachineLoop+0xb20>
		break;
 800390e:	bf00      	nop
	}
}
 8003910:	bf00      	nop
 8003912:	bd80      	pop	{r7, pc}
 8003914:	2400059c 	.word	0x2400059c
 8003918:	24000074 	.word	0x24000074
 800391c:	080121b4 	.word	0x080121b4
 8003920:	240005a0 	.word	0x240005a0
 8003924:	080121b8 	.word	0x080121b8
 8003928:	24000a00 	.word	0x24000a00
 800392c:	2400059d 	.word	0x2400059d
 8003930:	240005a4 	.word	0x240005a4
 8003934:	2400057c 	.word	0x2400057c
 8003938:	24000458 	.word	0x24000458
 800393c:	080121d8 	.word	0x080121d8

08003940 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003940:	b580      	push	{r7, lr}
 8003942:	b082      	sub	sp, #8
 8003944:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003946:	4b0f      	ldr	r3, [pc, #60]	; (8003984 <HAL_MspInit+0x44>)
 8003948:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800394c:	4a0d      	ldr	r2, [pc, #52]	; (8003984 <HAL_MspInit+0x44>)
 800394e:	f043 0302 	orr.w	r3, r3, #2
 8003952:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8003956:	4b0b      	ldr	r3, [pc, #44]	; (8003984 <HAL_MspInit+0x44>)
 8003958:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800395c:	f003 0302 	and.w	r3, r3, #2
 8003960:	607b      	str	r3, [r7, #4]
 8003962:	687b      	ldr	r3, [r7, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_2);
 8003964:	2005      	movs	r0, #5
 8003966:	f002 ffc3 	bl	80068f0 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* FPU_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(FPU_IRQn, 1, 0);
 800396a:	2200      	movs	r2, #0
 800396c:	2101      	movs	r1, #1
 800396e:	2051      	movs	r0, #81	; 0x51
 8003970:	f002 ffc9 	bl	8006906 <HAL_NVIC_SetPriority>
  /* FPU_IRQn interrupt configuration */
  HAL_NVIC_EnableIRQ(FPU_IRQn);
 8003974:	2051      	movs	r0, #81	; 0x51
 8003976:	f002 ffe0 	bl	800693a <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800397a:	bf00      	nop
 800397c:	3708      	adds	r7, #8
 800397e:	46bd      	mov	sp, r7
 8003980:	bd80      	pop	{r7, pc}
 8003982:	bf00      	nop
 8003984:	58024400 	.word	0x58024400

08003988 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003988:	b480      	push	{r7}
 800398a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800398c:	bf00      	nop
 800398e:	46bd      	mov	sp, r7
 8003990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003994:	4770      	bx	lr

08003996 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003996:	b480      	push	{r7}
 8003998:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800399a:	e7fe      	b.n	800399a <HardFault_Handler+0x4>

0800399c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800399c:	b480      	push	{r7}
 800399e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80039a0:	e7fe      	b.n	80039a0 <MemManage_Handler+0x4>

080039a2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80039a2:	b480      	push	{r7}
 80039a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80039a6:	e7fe      	b.n	80039a6 <BusFault_Handler+0x4>

080039a8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80039a8:	b480      	push	{r7}
 80039aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80039ac:	e7fe      	b.n	80039ac <UsageFault_Handler+0x4>

080039ae <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80039ae:	b480      	push	{r7}
 80039b0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80039b2:	bf00      	nop
 80039b4:	46bd      	mov	sp, r7
 80039b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ba:	4770      	bx	lr

080039bc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80039bc:	b480      	push	{r7}
 80039be:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80039c0:	bf00      	nop
 80039c2:	46bd      	mov	sp, r7
 80039c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c8:	4770      	bx	lr

080039ca <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80039ca:	b480      	push	{r7}
 80039cc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80039ce:	bf00      	nop
 80039d0:	46bd      	mov	sp, r7
 80039d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d6:	4770      	bx	lr

080039d8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80039d8:	b580      	push	{r7, lr}
 80039da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80039dc:	f002 fe44 	bl	8006668 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80039e0:	bf00      	nop
 80039e2:	bd80      	pop	{r7, pc}

080039e4 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80039e4:	b580      	push	{r7, lr}
 80039e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(E_EndStop1_Sup_Pin);
 80039e8:	2001      	movs	r0, #1
 80039ea:	f003 ff14 	bl	8007816 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80039ee:	bf00      	nop
 80039f0:	bd80      	pop	{r7, pc}

080039f2 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 80039f2:	b580      	push	{r7, lr}
 80039f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(E_EndStop2_Sup_Pin);
 80039f6:	2004      	movs	r0, #4
 80039f8:	f003 ff0d 	bl	8007816 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 80039fc:	bf00      	nop
 80039fe:	bd80      	pop	{r7, pc}

08003a00 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8003a00:	b580      	push	{r7, lr}
 8003a02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(E_EndStop2_Inf_Pin);
 8003a04:	2008      	movs	r0, #8
 8003a06:	f003 ff06 	bl	8007816 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8003a0a:	bf00      	nop
 8003a0c:	bd80      	pop	{r7, pc}

08003a0e <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8003a0e:	b580      	push	{r7, lr}
 8003a10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(E_EndStop3_Sup_Pin);
 8003a12:	2010      	movs	r0, #16
 8003a14:	f003 feff 	bl	8007816 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8003a18:	bf00      	nop
 8003a1a:	bd80      	pop	{r7, pc}

08003a1c <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8003a1c:	b580      	push	{r7, lr}
 8003a1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(E_EndStop3_Inf_Pin);
 8003a20:	2020      	movs	r0, #32
 8003a22:	f003 fef8 	bl	8007816 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(faultDriver1_Pin);
 8003a26:	2080      	movs	r0, #128	; 0x80
 8003a28:	f003 fef5 	bl	8007816 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8003a2c:	bf00      	nop
 8003a2e:	bd80      	pop	{r7, pc}

08003a30 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8003a30:	b580      	push	{r7, lr}
 8003a32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8003a34:	4802      	ldr	r0, [pc, #8]	; (8003a40 <TIM2_IRQHandler+0x10>)
 8003a36:	f007 f823 	bl	800aa80 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8003a3a:	bf00      	nop
 8003a3c:	bd80      	pop	{r7, pc}
 8003a3e:	bf00      	nop
 8003a40:	240005c8 	.word	0x240005c8

08003a44 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8003a44:	b580      	push	{r7, lr}
 8003a46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8003a48:	4802      	ldr	r0, [pc, #8]	; (8003a54 <TIM3_IRQHandler+0x10>)
 8003a4a:	f007 f819 	bl	800aa80 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8003a4e:	bf00      	nop
 8003a50:	bd80      	pop	{r7, pc}
 8003a52:	bf00      	nop
 8003a54:	24000614 	.word	0x24000614

08003a58 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8003a58:	b580      	push	{r7, lr}
 8003a5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8003a5c:	4802      	ldr	r0, [pc, #8]	; (8003a68 <TIM4_IRQHandler+0x10>)
 8003a5e:	f007 f80f 	bl	800aa80 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8003a62:	bf00      	nop
 8003a64:	bd80      	pop	{r7, pc}
 8003a66:	bf00      	nop
 8003a68:	24000660 	.word	0x24000660

08003a6c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8003a6c:	b580      	push	{r7, lr}
 8003a6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8003a70:	4802      	ldr	r0, [pc, #8]	; (8003a7c <USART3_IRQHandler+0x10>)
 8003a72:	f008 fb31 	bl	800c0d8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8003a76:	bf00      	nop
 8003a78:	bd80      	pop	{r7, pc}
 8003a7a:	bf00      	nop
 8003a7c:	24000a00 	.word	0x24000a00

08003a80 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8003a80:	b580      	push	{r7, lr}
 8003a82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(E_EndStop1_Inf_Pin);
 8003a84:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8003a88:	f003 fec5 	bl	8007816 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BUTTON_Pin);
 8003a8c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8003a90:	f003 fec1 	bl	8007816 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(faultDriver2_Pin);
 8003a94:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8003a98:	f003 febd 	bl	8007816 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(faultDriver3_Pin);
 8003a9c:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8003aa0:	f003 feb9 	bl	8007816 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8003aa4:	bf00      	nop
 8003aa6:	bd80      	pop	{r7, pc}

08003aa8 <FPU_IRQHandler>:

/**
  * @brief This function handles FPU global interrupt.
  */
void FPU_IRQHandler(void)
{
 8003aa8:	b480      	push	{r7}
 8003aaa:	af00      	add	r7, sp, #0

  /* USER CODE END FPU_IRQn 0 */
  /* USER CODE BEGIN FPU_IRQn 1 */

  /* USER CODE END FPU_IRQn 1 */
}
 8003aac:	bf00      	nop
 8003aae:	46bd      	mov	sp, r7
 8003ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab4:	4770      	bx	lr
	...

08003ab8 <TIM15_IRQHandler>:

/**
  * @brief This function handles TIM15 global interrupt.
  */
void TIM15_IRQHandler(void)
{
 8003ab8:	b580      	push	{r7, lr}
 8003aba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM15_IRQn 0 */

  /* USER CODE END TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim15);
 8003abc:	4802      	ldr	r0, [pc, #8]	; (8003ac8 <TIM15_IRQHandler+0x10>)
 8003abe:	f006 ffdf 	bl	800aa80 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM15_IRQn 1 */

  /* USER CODE END TIM15_IRQn 1 */
}
 8003ac2:	bf00      	nop
 8003ac4:	bd80      	pop	{r7, pc}
 8003ac6:	bf00      	nop
 8003ac8:	240007dc 	.word	0x240007dc

08003acc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003acc:	b480      	push	{r7}
 8003ace:	af00      	add	r7, sp, #0
	return 1;
 8003ad0:	2301      	movs	r3, #1
}
 8003ad2:	4618      	mov	r0, r3
 8003ad4:	46bd      	mov	sp, r7
 8003ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ada:	4770      	bx	lr

08003adc <_kill>:

int _kill(int pid, int sig)
{
 8003adc:	b580      	push	{r7, lr}
 8003ade:	b082      	sub	sp, #8
 8003ae0:	af00      	add	r7, sp, #0
 8003ae2:	6078      	str	r0, [r7, #4]
 8003ae4:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8003ae6:	f00a fd19 	bl	800e51c <__errno>
 8003aea:	4603      	mov	r3, r0
 8003aec:	2216      	movs	r2, #22
 8003aee:	601a      	str	r2, [r3, #0]
	return -1;
 8003af0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003af4:	4618      	mov	r0, r3
 8003af6:	3708      	adds	r7, #8
 8003af8:	46bd      	mov	sp, r7
 8003afa:	bd80      	pop	{r7, pc}

08003afc <_exit>:

void _exit (int status)
{
 8003afc:	b580      	push	{r7, lr}
 8003afe:	b082      	sub	sp, #8
 8003b00:	af00      	add	r7, sp, #0
 8003b02:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8003b04:	f04f 31ff 	mov.w	r1, #4294967295
 8003b08:	6878      	ldr	r0, [r7, #4]
 8003b0a:	f7ff ffe7 	bl	8003adc <_kill>
	while (1) {}		/* Make sure we hang here */
 8003b0e:	e7fe      	b.n	8003b0e <_exit+0x12>

08003b10 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003b10:	b580      	push	{r7, lr}
 8003b12:	b086      	sub	sp, #24
 8003b14:	af00      	add	r7, sp, #0
 8003b16:	60f8      	str	r0, [r7, #12]
 8003b18:	60b9      	str	r1, [r7, #8]
 8003b1a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003b1c:	2300      	movs	r3, #0
 8003b1e:	617b      	str	r3, [r7, #20]
 8003b20:	e00a      	b.n	8003b38 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8003b22:	f3af 8000 	nop.w
 8003b26:	4601      	mov	r1, r0
 8003b28:	68bb      	ldr	r3, [r7, #8]
 8003b2a:	1c5a      	adds	r2, r3, #1
 8003b2c:	60ba      	str	r2, [r7, #8]
 8003b2e:	b2ca      	uxtb	r2, r1
 8003b30:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003b32:	697b      	ldr	r3, [r7, #20]
 8003b34:	3301      	adds	r3, #1
 8003b36:	617b      	str	r3, [r7, #20]
 8003b38:	697a      	ldr	r2, [r7, #20]
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	429a      	cmp	r2, r3
 8003b3e:	dbf0      	blt.n	8003b22 <_read+0x12>
	}

return len;
 8003b40:	687b      	ldr	r3, [r7, #4]
}
 8003b42:	4618      	mov	r0, r3
 8003b44:	3718      	adds	r7, #24
 8003b46:	46bd      	mov	sp, r7
 8003b48:	bd80      	pop	{r7, pc}

08003b4a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003b4a:	b580      	push	{r7, lr}
 8003b4c:	b086      	sub	sp, #24
 8003b4e:	af00      	add	r7, sp, #0
 8003b50:	60f8      	str	r0, [r7, #12]
 8003b52:	60b9      	str	r1, [r7, #8]
 8003b54:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003b56:	2300      	movs	r3, #0
 8003b58:	617b      	str	r3, [r7, #20]
 8003b5a:	e009      	b.n	8003b70 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8003b5c:	68bb      	ldr	r3, [r7, #8]
 8003b5e:	1c5a      	adds	r2, r3, #1
 8003b60:	60ba      	str	r2, [r7, #8]
 8003b62:	781b      	ldrb	r3, [r3, #0]
 8003b64:	4618      	mov	r0, r3
 8003b66:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003b6a:	697b      	ldr	r3, [r7, #20]
 8003b6c:	3301      	adds	r3, #1
 8003b6e:	617b      	str	r3, [r7, #20]
 8003b70:	697a      	ldr	r2, [r7, #20]
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	429a      	cmp	r2, r3
 8003b76:	dbf1      	blt.n	8003b5c <_write+0x12>
	}
	return len;
 8003b78:	687b      	ldr	r3, [r7, #4]
}
 8003b7a:	4618      	mov	r0, r3
 8003b7c:	3718      	adds	r7, #24
 8003b7e:	46bd      	mov	sp, r7
 8003b80:	bd80      	pop	{r7, pc}

08003b82 <_close>:

int _close(int file)
{
 8003b82:	b480      	push	{r7}
 8003b84:	b083      	sub	sp, #12
 8003b86:	af00      	add	r7, sp, #0
 8003b88:	6078      	str	r0, [r7, #4]
	return -1;
 8003b8a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003b8e:	4618      	mov	r0, r3
 8003b90:	370c      	adds	r7, #12
 8003b92:	46bd      	mov	sp, r7
 8003b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b98:	4770      	bx	lr

08003b9a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003b9a:	b480      	push	{r7}
 8003b9c:	b083      	sub	sp, #12
 8003b9e:	af00      	add	r7, sp, #0
 8003ba0:	6078      	str	r0, [r7, #4]
 8003ba2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8003ba4:	683b      	ldr	r3, [r7, #0]
 8003ba6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003baa:	605a      	str	r2, [r3, #4]
	return 0;
 8003bac:	2300      	movs	r3, #0
}
 8003bae:	4618      	mov	r0, r3
 8003bb0:	370c      	adds	r7, #12
 8003bb2:	46bd      	mov	sp, r7
 8003bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb8:	4770      	bx	lr

08003bba <_isatty>:

int _isatty(int file)
{
 8003bba:	b480      	push	{r7}
 8003bbc:	b083      	sub	sp, #12
 8003bbe:	af00      	add	r7, sp, #0
 8003bc0:	6078      	str	r0, [r7, #4]
	return 1;
 8003bc2:	2301      	movs	r3, #1
}
 8003bc4:	4618      	mov	r0, r3
 8003bc6:	370c      	adds	r7, #12
 8003bc8:	46bd      	mov	sp, r7
 8003bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bce:	4770      	bx	lr

08003bd0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003bd0:	b480      	push	{r7}
 8003bd2:	b085      	sub	sp, #20
 8003bd4:	af00      	add	r7, sp, #0
 8003bd6:	60f8      	str	r0, [r7, #12]
 8003bd8:	60b9      	str	r1, [r7, #8]
 8003bda:	607a      	str	r2, [r7, #4]
	return 0;
 8003bdc:	2300      	movs	r3, #0
}
 8003bde:	4618      	mov	r0, r3
 8003be0:	3714      	adds	r7, #20
 8003be2:	46bd      	mov	sp, r7
 8003be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be8:	4770      	bx	lr

08003bea <_open>:

int _open(char *path, int flags, ...)
{
 8003bea:	b40e      	push	{r1, r2, r3}
 8003bec:	b480      	push	{r7}
 8003bee:	b082      	sub	sp, #8
 8003bf0:	af00      	add	r7, sp, #0
 8003bf2:	6078      	str	r0, [r7, #4]
	/* Pretend like we always fail */
	return -1;
 8003bf4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003bf8:	4618      	mov	r0, r3
 8003bfa:	3708      	adds	r7, #8
 8003bfc:	46bd      	mov	sp, r7
 8003bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c02:	b003      	add	sp, #12
 8003c04:	4770      	bx	lr
	...

08003c08 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8003c08:	b580      	push	{r7, lr}
 8003c0a:	b084      	sub	sp, #16
 8003c0c:	af00      	add	r7, sp, #0
 8003c0e:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8003c10:	4b11      	ldr	r3, [pc, #68]	; (8003c58 <_sbrk+0x50>)
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d102      	bne.n	8003c1e <_sbrk+0x16>
		heap_end = &end;
 8003c18:	4b0f      	ldr	r3, [pc, #60]	; (8003c58 <_sbrk+0x50>)
 8003c1a:	4a10      	ldr	r2, [pc, #64]	; (8003c5c <_sbrk+0x54>)
 8003c1c:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8003c1e:	4b0e      	ldr	r3, [pc, #56]	; (8003c58 <_sbrk+0x50>)
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8003c24:	4b0c      	ldr	r3, [pc, #48]	; (8003c58 <_sbrk+0x50>)
 8003c26:	681a      	ldr	r2, [r3, #0]
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	4413      	add	r3, r2
 8003c2c:	466a      	mov	r2, sp
 8003c2e:	4293      	cmp	r3, r2
 8003c30:	d907      	bls.n	8003c42 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8003c32:	f00a fc73 	bl	800e51c <__errno>
 8003c36:	4603      	mov	r3, r0
 8003c38:	220c      	movs	r2, #12
 8003c3a:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 8003c3c:	f04f 33ff 	mov.w	r3, #4294967295
 8003c40:	e006      	b.n	8003c50 <_sbrk+0x48>
	}

	heap_end += incr;
 8003c42:	4b05      	ldr	r3, [pc, #20]	; (8003c58 <_sbrk+0x50>)
 8003c44:	681a      	ldr	r2, [r3, #0]
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	4413      	add	r3, r2
 8003c4a:	4a03      	ldr	r2, [pc, #12]	; (8003c58 <_sbrk+0x50>)
 8003c4c:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8003c4e:	68fb      	ldr	r3, [r7, #12]
}
 8003c50:	4618      	mov	r0, r3
 8003c52:	3710      	adds	r7, #16
 8003c54:	46bd      	mov	sp, r7
 8003c56:	bd80      	pop	{r7, pc}
 8003c58:	240005c4 	.word	0x240005c4
 8003c5c:	24000aa8 	.word	0x24000aa8

08003c60 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003c60:	b480      	push	{r7}
 8003c62:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8003c64:	4b29      	ldr	r3, [pc, #164]	; (8003d0c <SystemInit+0xac>)
 8003c66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c6a:	4a28      	ldr	r2, [pc, #160]	; (8003d0c <SystemInit+0xac>)
 8003c6c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003c70:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8003c74:	4b26      	ldr	r3, [pc, #152]	; (8003d10 <SystemInit+0xb0>)
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	4a25      	ldr	r2, [pc, #148]	; (8003d10 <SystemInit+0xb0>)
 8003c7a:	f043 0301 	orr.w	r3, r3, #1
 8003c7e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8003c80:	4b23      	ldr	r3, [pc, #140]	; (8003d10 <SystemInit+0xb0>)
 8003c82:	2200      	movs	r2, #0
 8003c84:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, CSSON , CSION,RC48ON, CSIKERON PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8003c86:	4b22      	ldr	r3, [pc, #136]	; (8003d10 <SystemInit+0xb0>)
 8003c88:	681a      	ldr	r2, [r3, #0]
 8003c8a:	4921      	ldr	r1, [pc, #132]	; (8003d10 <SystemInit+0xb0>)
 8003c8c:	4b21      	ldr	r3, [pc, #132]	; (8003d14 <SystemInit+0xb4>)
 8003c8e:	4013      	ands	r3, r2
 8003c90:	600b      	str	r3, [r1, #0]

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8003c92:	4b1f      	ldr	r3, [pc, #124]	; (8003d10 <SystemInit+0xb0>)
 8003c94:	2200      	movs	r2, #0
 8003c96:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8003c98:	4b1d      	ldr	r3, [pc, #116]	; (8003d10 <SystemInit+0xb0>)
 8003c9a:	2200      	movs	r2, #0
 8003c9c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8003c9e:	4b1c      	ldr	r3, [pc, #112]	; (8003d10 <SystemInit+0xb0>)
 8003ca0:	2200      	movs	r2, #0
 8003ca2:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x00000000;
 8003ca4:	4b1a      	ldr	r3, [pc, #104]	; (8003d10 <SystemInit+0xb0>)
 8003ca6:	2200      	movs	r2, #0
 8003ca8:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00000000;
 8003caa:	4b19      	ldr	r3, [pc, #100]	; (8003d10 <SystemInit+0xb0>)
 8003cac:	2200      	movs	r2, #0
 8003cae:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x00000000;
 8003cb0:	4b17      	ldr	r3, [pc, #92]	; (8003d10 <SystemInit+0xb0>)
 8003cb2:	2200      	movs	r2, #0
 8003cb4:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8003cb6:	4b16      	ldr	r3, [pc, #88]	; (8003d10 <SystemInit+0xb0>)
 8003cb8:	2200      	movs	r2, #0
 8003cba:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x00000000;
 8003cbc:	4b14      	ldr	r3, [pc, #80]	; (8003d10 <SystemInit+0xb0>)
 8003cbe:	2200      	movs	r2, #0
 8003cc0:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8003cc2:	4b13      	ldr	r3, [pc, #76]	; (8003d10 <SystemInit+0xb0>)
 8003cc4:	2200      	movs	r2, #0
 8003cc6:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x00000000;
 8003cc8:	4b11      	ldr	r3, [pc, #68]	; (8003d10 <SystemInit+0xb0>)
 8003cca:	2200      	movs	r2, #0
 8003ccc:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8003cce:	4b10      	ldr	r3, [pc, #64]	; (8003d10 <SystemInit+0xb0>)
 8003cd0:	2200      	movs	r2, #0
 8003cd2:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8003cd4:	4b0e      	ldr	r3, [pc, #56]	; (8003d10 <SystemInit+0xb0>)
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	4a0d      	ldr	r2, [pc, #52]	; (8003d10 <SystemInit+0xb0>)
 8003cda:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003cde:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8003ce0:	4b0b      	ldr	r3, [pc, #44]	; (8003d10 <SystemInit+0xb0>)
 8003ce2:	2200      	movs	r2, #0
 8003ce4:	661a      	str	r2, [r3, #96]	; 0x60
  SCB->VTOR = FLASH_BANK2_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
#endif /* VECT_TAB_SRAM */

#else
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8003ce6:	4b0c      	ldr	r3, [pc, #48]	; (8003d18 <SystemInit+0xb8>)
 8003ce8:	681a      	ldr	r2, [r3, #0]
 8003cea:	4b0c      	ldr	r3, [pc, #48]	; (8003d1c <SystemInit+0xbc>)
 8003cec:	4013      	ands	r3, r2
 8003cee:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003cf2:	d202      	bcs.n	8003cfa <SystemInit+0x9a>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8003cf4:	4b0a      	ldr	r3, [pc, #40]	; (8003d20 <SystemInit+0xc0>)
 8003cf6:	2201      	movs	r2, #1
 8003cf8:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003cfa:	4b04      	ldr	r3, [pc, #16]	; (8003d0c <SystemInit+0xac>)
 8003cfc:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003d00:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 8003d02:	bf00      	nop
 8003d04:	46bd      	mov	sp, r7
 8003d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d0a:	4770      	bx	lr
 8003d0c:	e000ed00 	.word	0xe000ed00
 8003d10:	58024400 	.word	0x58024400
 8003d14:	eaf6ed7f 	.word	0xeaf6ed7f
 8003d18:	5c001000 	.word	0x5c001000
 8003d1c:	ffff0000 	.word	0xffff0000
 8003d20:	51008108 	.word	0x51008108

08003d24 <MX_TIM2_Init>:
TIM_HandleTypeDef htim14;
TIM_HandleTypeDef htim15;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8003d24:	b580      	push	{r7, lr}
 8003d26:	b08c      	sub	sp, #48	; 0x30
 8003d28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003d2a:	f107 0320 	add.w	r3, r7, #32
 8003d2e:	2200      	movs	r2, #0
 8003d30:	601a      	str	r2, [r3, #0]
 8003d32:	605a      	str	r2, [r3, #4]
 8003d34:	609a      	str	r2, [r3, #8]
 8003d36:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003d38:	f107 0314 	add.w	r3, r7, #20
 8003d3c:	2200      	movs	r2, #0
 8003d3e:	601a      	str	r2, [r3, #0]
 8003d40:	605a      	str	r2, [r3, #4]
 8003d42:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8003d44:	1d3b      	adds	r3, r7, #4
 8003d46:	2200      	movs	r2, #0
 8003d48:	601a      	str	r2, [r3, #0]
 8003d4a:	605a      	str	r2, [r3, #4]
 8003d4c:	609a      	str	r2, [r3, #8]
 8003d4e:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8003d50:	4b2b      	ldr	r3, [pc, #172]	; (8003e00 <MX_TIM2_Init+0xdc>)
 8003d52:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003d56:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8003d58:	4b29      	ldr	r3, [pc, #164]	; (8003e00 <MX_TIM2_Init+0xdc>)
 8003d5a:	2200      	movs	r2, #0
 8003d5c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003d5e:	4b28      	ldr	r3, [pc, #160]	; (8003e00 <MX_TIM2_Init+0xdc>)
 8003d60:	2200      	movs	r2, #0
 8003d62:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8003d64:	4b26      	ldr	r3, [pc, #152]	; (8003e00 <MX_TIM2_Init+0xdc>)
 8003d66:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003d6a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003d6c:	4b24      	ldr	r3, [pc, #144]	; (8003e00 <MX_TIM2_Init+0xdc>)
 8003d6e:	2200      	movs	r2, #0
 8003d70:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003d72:	4b23      	ldr	r3, [pc, #140]	; (8003e00 <MX_TIM2_Init+0xdc>)
 8003d74:	2200      	movs	r2, #0
 8003d76:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8003d78:	4821      	ldr	r0, [pc, #132]	; (8003e00 <MX_TIM2_Init+0xdc>)
 8003d7a:	f006 f8c3 	bl	8009f04 <HAL_TIM_Base_Init>
 8003d7e:	4603      	mov	r3, r0
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d001      	beq.n	8003d88 <MX_TIM2_Init+0x64>
  {
    Error_Handler();
 8003d84:	f7fe ff24 	bl	8002bd0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003d88:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003d8c:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8003d8e:	f107 0320 	add.w	r3, r7, #32
 8003d92:	4619      	mov	r1, r3
 8003d94:	481a      	ldr	r0, [pc, #104]	; (8003e00 <MX_TIM2_Init+0xdc>)
 8003d96:	f007 f943 	bl	800b020 <HAL_TIM_ConfigClockSource>
 8003d9a:	4603      	mov	r3, r0
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d001      	beq.n	8003da4 <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 8003da0:	f7fe ff16 	bl	8002bd0 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8003da4:	4816      	ldr	r0, [pc, #88]	; (8003e00 <MX_TIM2_Init+0xdc>)
 8003da6:	f006 fc49 	bl	800a63c <HAL_TIM_IC_Init>
 8003daa:	4603      	mov	r3, r0
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d001      	beq.n	8003db4 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8003db0:	f7fe ff0e 	bl	8002bd0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003db4:	2300      	movs	r3, #0
 8003db6:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003db8:	2300      	movs	r3, #0
 8003dba:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003dbc:	f107 0314 	add.w	r3, r7, #20
 8003dc0:	4619      	mov	r1, r3
 8003dc2:	480f      	ldr	r0, [pc, #60]	; (8003e00 <MX_TIM2_Init+0xdc>)
 8003dc4:	f007 ffa0 	bl	800bd08 <HAL_TIMEx_MasterConfigSynchronization>
 8003dc8:	4603      	mov	r3, r0
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d001      	beq.n	8003dd2 <MX_TIM2_Init+0xae>
  {
    Error_Handler();
 8003dce:	f7fe feff 	bl	8002bd0 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8003dd2:	2300      	movs	r3, #0
 8003dd4:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8003dd6:	2301      	movs	r3, #1
 8003dd8:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8003dda:	2300      	movs	r3, #0
 8003ddc:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8003dde:	2300      	movs	r3, #0
 8003de0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8003de2:	1d3b      	adds	r3, r7, #4
 8003de4:	2200      	movs	r2, #0
 8003de6:	4619      	mov	r1, r3
 8003de8:	4805      	ldr	r0, [pc, #20]	; (8003e00 <MX_TIM2_Init+0xdc>)
 8003dea:	f006 ff68 	bl	800acbe <HAL_TIM_IC_ConfigChannel>
 8003dee:	4603      	mov	r3, r0
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d001      	beq.n	8003df8 <MX_TIM2_Init+0xd4>
  {
    Error_Handler();
 8003df4:	f7fe feec 	bl	8002bd0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8003df8:	bf00      	nop
 8003dfa:	3730      	adds	r7, #48	; 0x30
 8003dfc:	46bd      	mov	sp, r7
 8003dfe:	bd80      	pop	{r7, pc}
 8003e00:	240005c8 	.word	0x240005c8

08003e04 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8003e04:	b580      	push	{r7, lr}
 8003e06:	b08c      	sub	sp, #48	; 0x30
 8003e08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003e0a:	f107 0320 	add.w	r3, r7, #32
 8003e0e:	2200      	movs	r2, #0
 8003e10:	601a      	str	r2, [r3, #0]
 8003e12:	605a      	str	r2, [r3, #4]
 8003e14:	609a      	str	r2, [r3, #8]
 8003e16:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003e18:	f107 0314 	add.w	r3, r7, #20
 8003e1c:	2200      	movs	r2, #0
 8003e1e:	601a      	str	r2, [r3, #0]
 8003e20:	605a      	str	r2, [r3, #4]
 8003e22:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8003e24:	1d3b      	adds	r3, r7, #4
 8003e26:	2200      	movs	r2, #0
 8003e28:	601a      	str	r2, [r3, #0]
 8003e2a:	605a      	str	r2, [r3, #4]
 8003e2c:	609a      	str	r2, [r3, #8]
 8003e2e:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8003e30:	4b2b      	ldr	r3, [pc, #172]	; (8003ee0 <MX_TIM3_Init+0xdc>)
 8003e32:	4a2c      	ldr	r2, [pc, #176]	; (8003ee4 <MX_TIM3_Init+0xe0>)
 8003e34:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8003e36:	4b2a      	ldr	r3, [pc, #168]	; (8003ee0 <MX_TIM3_Init+0xdc>)
 8003e38:	2200      	movs	r2, #0
 8003e3a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003e3c:	4b28      	ldr	r3, [pc, #160]	; (8003ee0 <MX_TIM3_Init+0xdc>)
 8003e3e:	2200      	movs	r2, #0
 8003e40:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8003e42:	4b27      	ldr	r3, [pc, #156]	; (8003ee0 <MX_TIM3_Init+0xdc>)
 8003e44:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003e48:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003e4a:	4b25      	ldr	r3, [pc, #148]	; (8003ee0 <MX_TIM3_Init+0xdc>)
 8003e4c:	2200      	movs	r2, #0
 8003e4e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003e50:	4b23      	ldr	r3, [pc, #140]	; (8003ee0 <MX_TIM3_Init+0xdc>)
 8003e52:	2200      	movs	r2, #0
 8003e54:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8003e56:	4822      	ldr	r0, [pc, #136]	; (8003ee0 <MX_TIM3_Init+0xdc>)
 8003e58:	f006 f854 	bl	8009f04 <HAL_TIM_Base_Init>
 8003e5c:	4603      	mov	r3, r0
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d001      	beq.n	8003e66 <MX_TIM3_Init+0x62>
  {
    Error_Handler();
 8003e62:	f7fe feb5 	bl	8002bd0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003e66:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003e6a:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8003e6c:	f107 0320 	add.w	r3, r7, #32
 8003e70:	4619      	mov	r1, r3
 8003e72:	481b      	ldr	r0, [pc, #108]	; (8003ee0 <MX_TIM3_Init+0xdc>)
 8003e74:	f007 f8d4 	bl	800b020 <HAL_TIM_ConfigClockSource>
 8003e78:	4603      	mov	r3, r0
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d001      	beq.n	8003e82 <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 8003e7e:	f7fe fea7 	bl	8002bd0 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 8003e82:	4817      	ldr	r0, [pc, #92]	; (8003ee0 <MX_TIM3_Init+0xdc>)
 8003e84:	f006 fbda 	bl	800a63c <HAL_TIM_IC_Init>
 8003e88:	4603      	mov	r3, r0
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d001      	beq.n	8003e92 <MX_TIM3_Init+0x8e>
  {
    Error_Handler();
 8003e8e:	f7fe fe9f 	bl	8002bd0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003e92:	2300      	movs	r3, #0
 8003e94:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003e96:	2300      	movs	r3, #0
 8003e98:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003e9a:	f107 0314 	add.w	r3, r7, #20
 8003e9e:	4619      	mov	r1, r3
 8003ea0:	480f      	ldr	r0, [pc, #60]	; (8003ee0 <MX_TIM3_Init+0xdc>)
 8003ea2:	f007 ff31 	bl	800bd08 <HAL_TIMEx_MasterConfigSynchronization>
 8003ea6:	4603      	mov	r3, r0
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d001      	beq.n	8003eb0 <MX_TIM3_Init+0xac>
  {
    Error_Handler();
 8003eac:	f7fe fe90 	bl	8002bd0 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8003eb0:	2300      	movs	r3, #0
 8003eb2:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8003eb4:	2301      	movs	r3, #1
 8003eb6:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8003eb8:	2300      	movs	r3, #0
 8003eba:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8003ebc:	2300      	movs	r3, #0
 8003ebe:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8003ec0:	1d3b      	adds	r3, r7, #4
 8003ec2:	2200      	movs	r2, #0
 8003ec4:	4619      	mov	r1, r3
 8003ec6:	4806      	ldr	r0, [pc, #24]	; (8003ee0 <MX_TIM3_Init+0xdc>)
 8003ec8:	f006 fef9 	bl	800acbe <HAL_TIM_IC_ConfigChannel>
 8003ecc:	4603      	mov	r3, r0
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d001      	beq.n	8003ed6 <MX_TIM3_Init+0xd2>
  {
    Error_Handler();
 8003ed2:	f7fe fe7d 	bl	8002bd0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8003ed6:	bf00      	nop
 8003ed8:	3730      	adds	r7, #48	; 0x30
 8003eda:	46bd      	mov	sp, r7
 8003edc:	bd80      	pop	{r7, pc}
 8003ede:	bf00      	nop
 8003ee0:	24000614 	.word	0x24000614
 8003ee4:	40000400 	.word	0x40000400

08003ee8 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8003ee8:	b580      	push	{r7, lr}
 8003eea:	b08c      	sub	sp, #48	; 0x30
 8003eec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003eee:	f107 0320 	add.w	r3, r7, #32
 8003ef2:	2200      	movs	r2, #0
 8003ef4:	601a      	str	r2, [r3, #0]
 8003ef6:	605a      	str	r2, [r3, #4]
 8003ef8:	609a      	str	r2, [r3, #8]
 8003efa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003efc:	f107 0314 	add.w	r3, r7, #20
 8003f00:	2200      	movs	r2, #0
 8003f02:	601a      	str	r2, [r3, #0]
 8003f04:	605a      	str	r2, [r3, #4]
 8003f06:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8003f08:	1d3b      	adds	r3, r7, #4
 8003f0a:	2200      	movs	r2, #0
 8003f0c:	601a      	str	r2, [r3, #0]
 8003f0e:	605a      	str	r2, [r3, #4]
 8003f10:	609a      	str	r2, [r3, #8]
 8003f12:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8003f14:	4b2b      	ldr	r3, [pc, #172]	; (8003fc4 <MX_TIM4_Init+0xdc>)
 8003f16:	4a2c      	ldr	r2, [pc, #176]	; (8003fc8 <MX_TIM4_Init+0xe0>)
 8003f18:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8003f1a:	4b2a      	ldr	r3, [pc, #168]	; (8003fc4 <MX_TIM4_Init+0xdc>)
 8003f1c:	2200      	movs	r2, #0
 8003f1e:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003f20:	4b28      	ldr	r3, [pc, #160]	; (8003fc4 <MX_TIM4_Init+0xdc>)
 8003f22:	2200      	movs	r2, #0
 8003f24:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8003f26:	4b27      	ldr	r3, [pc, #156]	; (8003fc4 <MX_TIM4_Init+0xdc>)
 8003f28:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003f2c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003f2e:	4b25      	ldr	r3, [pc, #148]	; (8003fc4 <MX_TIM4_Init+0xdc>)
 8003f30:	2200      	movs	r2, #0
 8003f32:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003f34:	4b23      	ldr	r3, [pc, #140]	; (8003fc4 <MX_TIM4_Init+0xdc>)
 8003f36:	2200      	movs	r2, #0
 8003f38:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8003f3a:	4822      	ldr	r0, [pc, #136]	; (8003fc4 <MX_TIM4_Init+0xdc>)
 8003f3c:	f005 ffe2 	bl	8009f04 <HAL_TIM_Base_Init>
 8003f40:	4603      	mov	r3, r0
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d001      	beq.n	8003f4a <MX_TIM4_Init+0x62>
  {
    Error_Handler();
 8003f46:	f7fe fe43 	bl	8002bd0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003f4a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003f4e:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8003f50:	f107 0320 	add.w	r3, r7, #32
 8003f54:	4619      	mov	r1, r3
 8003f56:	481b      	ldr	r0, [pc, #108]	; (8003fc4 <MX_TIM4_Init+0xdc>)
 8003f58:	f007 f862 	bl	800b020 <HAL_TIM_ConfigClockSource>
 8003f5c:	4603      	mov	r3, r0
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d001      	beq.n	8003f66 <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 8003f62:	f7fe fe35 	bl	8002bd0 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim4) != HAL_OK)
 8003f66:	4817      	ldr	r0, [pc, #92]	; (8003fc4 <MX_TIM4_Init+0xdc>)
 8003f68:	f006 fb68 	bl	800a63c <HAL_TIM_IC_Init>
 8003f6c:	4603      	mov	r3, r0
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d001      	beq.n	8003f76 <MX_TIM4_Init+0x8e>
  {
    Error_Handler();
 8003f72:	f7fe fe2d 	bl	8002bd0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003f76:	2300      	movs	r3, #0
 8003f78:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003f7a:	2300      	movs	r3, #0
 8003f7c:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8003f7e:	f107 0314 	add.w	r3, r7, #20
 8003f82:	4619      	mov	r1, r3
 8003f84:	480f      	ldr	r0, [pc, #60]	; (8003fc4 <MX_TIM4_Init+0xdc>)
 8003f86:	f007 febf 	bl	800bd08 <HAL_TIMEx_MasterConfigSynchronization>
 8003f8a:	4603      	mov	r3, r0
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d001      	beq.n	8003f94 <MX_TIM4_Init+0xac>
  {
    Error_Handler();
 8003f90:	f7fe fe1e 	bl	8002bd0 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8003f94:	2300      	movs	r3, #0
 8003f96:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8003f98:	2301      	movs	r3, #1
 8003f9a:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8003f9c:	2300      	movs	r3, #0
 8003f9e:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8003fa0:	2300      	movs	r3, #0
 8003fa2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8003fa4:	1d3b      	adds	r3, r7, #4
 8003fa6:	2200      	movs	r2, #0
 8003fa8:	4619      	mov	r1, r3
 8003faa:	4806      	ldr	r0, [pc, #24]	; (8003fc4 <MX_TIM4_Init+0xdc>)
 8003fac:	f006 fe87 	bl	800acbe <HAL_TIM_IC_ConfigChannel>
 8003fb0:	4603      	mov	r3, r0
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d001      	beq.n	8003fba <MX_TIM4_Init+0xd2>
  {
    Error_Handler();
 8003fb6:	f7fe fe0b 	bl	8002bd0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8003fba:	bf00      	nop
 8003fbc:	3730      	adds	r7, #48	; 0x30
 8003fbe:	46bd      	mov	sp, r7
 8003fc0:	bd80      	pop	{r7, pc}
 8003fc2:	bf00      	nop
 8003fc4:	24000660 	.word	0x24000660
 8003fc8:	40000800 	.word	0x40000800

08003fcc <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8003fcc:	b580      	push	{r7, lr}
 8003fce:	b088      	sub	sp, #32
 8003fd0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003fd2:	f107 0310 	add.w	r3, r7, #16
 8003fd6:	2200      	movs	r2, #0
 8003fd8:	601a      	str	r2, [r3, #0]
 8003fda:	605a      	str	r2, [r3, #4]
 8003fdc:	609a      	str	r2, [r3, #8]
 8003fde:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003fe0:	1d3b      	adds	r3, r7, #4
 8003fe2:	2200      	movs	r2, #0
 8003fe4:	601a      	str	r2, [r3, #0]
 8003fe6:	605a      	str	r2, [r3, #4]
 8003fe8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8003fea:	4b1d      	ldr	r3, [pc, #116]	; (8004060 <MX_TIM5_Init+0x94>)
 8003fec:	4a1d      	ldr	r2, [pc, #116]	; (8004064 <MX_TIM5_Init+0x98>)
 8003fee:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8003ff0:	4b1b      	ldr	r3, [pc, #108]	; (8004060 <MX_TIM5_Init+0x94>)
 8003ff2:	2200      	movs	r2, #0
 8003ff4:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003ff6:	4b1a      	ldr	r3, [pc, #104]	; (8004060 <MX_TIM5_Init+0x94>)
 8003ff8:	2200      	movs	r2, #0
 8003ffa:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8003ffc:	4b18      	ldr	r3, [pc, #96]	; (8004060 <MX_TIM5_Init+0x94>)
 8003ffe:	f04f 32ff 	mov.w	r2, #4294967295
 8004002:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004004:	4b16      	ldr	r3, [pc, #88]	; (8004060 <MX_TIM5_Init+0x94>)
 8004006:	2200      	movs	r2, #0
 8004008:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800400a:	4b15      	ldr	r3, [pc, #84]	; (8004060 <MX_TIM5_Init+0x94>)
 800400c:	2200      	movs	r2, #0
 800400e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8004010:	4813      	ldr	r0, [pc, #76]	; (8004060 <MX_TIM5_Init+0x94>)
 8004012:	f005 ff77 	bl	8009f04 <HAL_TIM_Base_Init>
 8004016:	4603      	mov	r3, r0
 8004018:	2b00      	cmp	r3, #0
 800401a:	d001      	beq.n	8004020 <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 800401c:	f7fe fdd8 	bl	8002bd0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004020:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004024:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8004026:	f107 0310 	add.w	r3, r7, #16
 800402a:	4619      	mov	r1, r3
 800402c:	480c      	ldr	r0, [pc, #48]	; (8004060 <MX_TIM5_Init+0x94>)
 800402e:	f006 fff7 	bl	800b020 <HAL_TIM_ConfigClockSource>
 8004032:	4603      	mov	r3, r0
 8004034:	2b00      	cmp	r3, #0
 8004036:	d001      	beq.n	800403c <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 8004038:	f7fe fdca 	bl	8002bd0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800403c:	2300      	movs	r3, #0
 800403e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004040:	2300      	movs	r3, #0
 8004042:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8004044:	1d3b      	adds	r3, r7, #4
 8004046:	4619      	mov	r1, r3
 8004048:	4805      	ldr	r0, [pc, #20]	; (8004060 <MX_TIM5_Init+0x94>)
 800404a:	f007 fe5d 	bl	800bd08 <HAL_TIMEx_MasterConfigSynchronization>
 800404e:	4603      	mov	r3, r0
 8004050:	2b00      	cmp	r3, #0
 8004052:	d001      	beq.n	8004058 <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 8004054:	f7fe fdbc 	bl	8002bd0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8004058:	bf00      	nop
 800405a:	3720      	adds	r7, #32
 800405c:	46bd      	mov	sp, r7
 800405e:	bd80      	pop	{r7, pc}
 8004060:	240006ac 	.word	0x240006ac
 8004064:	40000c00 	.word	0x40000c00

08004068 <MX_TIM12_Init>:
/* TIM12 init function */
void MX_TIM12_Init(void)
{
 8004068:	b580      	push	{r7, lr}
 800406a:	b08c      	sub	sp, #48	; 0x30
 800406c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800406e:	f107 0320 	add.w	r3, r7, #32
 8004072:	2200      	movs	r2, #0
 8004074:	601a      	str	r2, [r3, #0]
 8004076:	605a      	str	r2, [r3, #4]
 8004078:	609a      	str	r2, [r3, #8]
 800407a:	60da      	str	r2, [r3, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800407c:	1d3b      	adds	r3, r7, #4
 800407e:	2200      	movs	r2, #0
 8004080:	601a      	str	r2, [r3, #0]
 8004082:	605a      	str	r2, [r3, #4]
 8004084:	609a      	str	r2, [r3, #8]
 8004086:	60da      	str	r2, [r3, #12]
 8004088:	611a      	str	r2, [r3, #16]
 800408a:	615a      	str	r2, [r3, #20]
 800408c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 800408e:	4b25      	ldr	r3, [pc, #148]	; (8004124 <MX_TIM12_Init+0xbc>)
 8004090:	4a25      	ldr	r2, [pc, #148]	; (8004128 <MX_TIM12_Init+0xc0>)
 8004092:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 64-1;
 8004094:	4b23      	ldr	r3, [pc, #140]	; (8004124 <MX_TIM12_Init+0xbc>)
 8004096:	223f      	movs	r2, #63	; 0x3f
 8004098:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 800409a:	4b22      	ldr	r3, [pc, #136]	; (8004124 <MX_TIM12_Init+0xbc>)
 800409c:	2200      	movs	r2, #0
 800409e:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 0;
 80040a0:	4b20      	ldr	r3, [pc, #128]	; (8004124 <MX_TIM12_Init+0xbc>)
 80040a2:	2200      	movs	r2, #0
 80040a4:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80040a6:	4b1f      	ldr	r3, [pc, #124]	; (8004124 <MX_TIM12_Init+0xbc>)
 80040a8:	2200      	movs	r2, #0
 80040aa:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80040ac:	4b1d      	ldr	r3, [pc, #116]	; (8004124 <MX_TIM12_Init+0xbc>)
 80040ae:	2200      	movs	r2, #0
 80040b0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim12) != HAL_OK)
 80040b2:	481c      	ldr	r0, [pc, #112]	; (8004124 <MX_TIM12_Init+0xbc>)
 80040b4:	f005 ff26 	bl	8009f04 <HAL_TIM_Base_Init>
 80040b8:	4603      	mov	r3, r0
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d001      	beq.n	80040c2 <MX_TIM12_Init+0x5a>
  {
    Error_Handler();
 80040be:	f7fe fd87 	bl	8002bd0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80040c2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80040c6:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim12, &sClockSourceConfig) != HAL_OK)
 80040c8:	f107 0320 	add.w	r3, r7, #32
 80040cc:	4619      	mov	r1, r3
 80040ce:	4815      	ldr	r0, [pc, #84]	; (8004124 <MX_TIM12_Init+0xbc>)
 80040d0:	f006 ffa6 	bl	800b020 <HAL_TIM_ConfigClockSource>
 80040d4:	4603      	mov	r3, r0
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d001      	beq.n	80040de <MX_TIM12_Init+0x76>
  {
    Error_Handler();
 80040da:	f7fe fd79 	bl	8002bd0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 80040de:	4811      	ldr	r0, [pc, #68]	; (8004124 <MX_TIM12_Init+0xbc>)
 80040e0:	f006 f8a7 	bl	800a232 <HAL_TIM_PWM_Init>
 80040e4:	4603      	mov	r3, r0
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d001      	beq.n	80040ee <MX_TIM12_Init+0x86>
  {
    Error_Handler();
 80040ea:	f7fe fd71 	bl	8002bd0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80040ee:	2360      	movs	r3, #96	; 0x60
 80040f0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80040f2:	2300      	movs	r3, #0
 80040f4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80040f6:	2300      	movs	r3, #0
 80040f8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80040fa:	2300      	movs	r3, #0
 80040fc:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80040fe:	1d3b      	adds	r3, r7, #4
 8004100:	2200      	movs	r2, #0
 8004102:	4619      	mov	r1, r3
 8004104:	4807      	ldr	r0, [pc, #28]	; (8004124 <MX_TIM12_Init+0xbc>)
 8004106:	f006 fe77 	bl	800adf8 <HAL_TIM_PWM_ConfigChannel>
 800410a:	4603      	mov	r3, r0
 800410c:	2b00      	cmp	r3, #0
 800410e:	d001      	beq.n	8004114 <MX_TIM12_Init+0xac>
  {
    Error_Handler();
 8004110:	f7fe fd5e 	bl	8002bd0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 8004114:	4803      	ldr	r0, [pc, #12]	; (8004124 <MX_TIM12_Init+0xbc>)
 8004116:	f000 fa3d 	bl	8004594 <HAL_TIM_MspPostInit>

}
 800411a:	bf00      	nop
 800411c:	3730      	adds	r7, #48	; 0x30
 800411e:	46bd      	mov	sp, r7
 8004120:	bd80      	pop	{r7, pc}
 8004122:	bf00      	nop
 8004124:	240006f8 	.word	0x240006f8
 8004128:	40001800 	.word	0x40001800

0800412c <MX_TIM13_Init>:
/* TIM13 init function */
void MX_TIM13_Init(void)
{
 800412c:	b580      	push	{r7, lr}
 800412e:	b088      	sub	sp, #32
 8004130:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM13_Init 0 */

  /* USER CODE END TIM13_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8004132:	1d3b      	adds	r3, r7, #4
 8004134:	2200      	movs	r2, #0
 8004136:	601a      	str	r2, [r3, #0]
 8004138:	605a      	str	r2, [r3, #4]
 800413a:	609a      	str	r2, [r3, #8]
 800413c:	60da      	str	r2, [r3, #12]
 800413e:	611a      	str	r2, [r3, #16]
 8004140:	615a      	str	r2, [r3, #20]
 8004142:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 8004144:	4b1d      	ldr	r3, [pc, #116]	; (80041bc <MX_TIM13_Init+0x90>)
 8004146:	4a1e      	ldr	r2, [pc, #120]	; (80041c0 <MX_TIM13_Init+0x94>)
 8004148:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 64-1;
 800414a:	4b1c      	ldr	r3, [pc, #112]	; (80041bc <MX_TIM13_Init+0x90>)
 800414c:	223f      	movs	r2, #63	; 0x3f
 800414e:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004150:	4b1a      	ldr	r3, [pc, #104]	; (80041bc <MX_TIM13_Init+0x90>)
 8004152:	2200      	movs	r2, #0
 8004154:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 0;
 8004156:	4b19      	ldr	r3, [pc, #100]	; (80041bc <MX_TIM13_Init+0x90>)
 8004158:	2200      	movs	r2, #0
 800415a:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800415c:	4b17      	ldr	r3, [pc, #92]	; (80041bc <MX_TIM13_Init+0x90>)
 800415e:	2200      	movs	r2, #0
 8004160:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004162:	4b16      	ldr	r3, [pc, #88]	; (80041bc <MX_TIM13_Init+0x90>)
 8004164:	2200      	movs	r2, #0
 8004166:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 8004168:	4814      	ldr	r0, [pc, #80]	; (80041bc <MX_TIM13_Init+0x90>)
 800416a:	f005 fecb 	bl	8009f04 <HAL_TIM_Base_Init>
 800416e:	4603      	mov	r3, r0
 8004170:	2b00      	cmp	r3, #0
 8004172:	d001      	beq.n	8004178 <MX_TIM13_Init+0x4c>
  {
    Error_Handler();
 8004174:	f7fe fd2c 	bl	8002bd0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim13) != HAL_OK)
 8004178:	4810      	ldr	r0, [pc, #64]	; (80041bc <MX_TIM13_Init+0x90>)
 800417a:	f006 f85a 	bl	800a232 <HAL_TIM_PWM_Init>
 800417e:	4603      	mov	r3, r0
 8004180:	2b00      	cmp	r3, #0
 8004182:	d001      	beq.n	8004188 <MX_TIM13_Init+0x5c>
  {
    Error_Handler();
 8004184:	f7fe fd24 	bl	8002bd0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004188:	2360      	movs	r3, #96	; 0x60
 800418a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800418c:	2300      	movs	r3, #0
 800418e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004190:	2300      	movs	r3, #0
 8004192:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004194:	2300      	movs	r3, #0
 8004196:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim13, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004198:	1d3b      	adds	r3, r7, #4
 800419a:	2200      	movs	r2, #0
 800419c:	4619      	mov	r1, r3
 800419e:	4807      	ldr	r0, [pc, #28]	; (80041bc <MX_TIM13_Init+0x90>)
 80041a0:	f006 fe2a 	bl	800adf8 <HAL_TIM_PWM_ConfigChannel>
 80041a4:	4603      	mov	r3, r0
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d001      	beq.n	80041ae <MX_TIM13_Init+0x82>
  {
    Error_Handler();
 80041aa:	f7fe fd11 	bl	8002bd0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */
  HAL_TIM_MspPostInit(&htim13);
 80041ae:	4803      	ldr	r0, [pc, #12]	; (80041bc <MX_TIM13_Init+0x90>)
 80041b0:	f000 f9f0 	bl	8004594 <HAL_TIM_MspPostInit>

}
 80041b4:	bf00      	nop
 80041b6:	3720      	adds	r7, #32
 80041b8:	46bd      	mov	sp, r7
 80041ba:	bd80      	pop	{r7, pc}
 80041bc:	24000744 	.word	0x24000744
 80041c0:	40001c00 	.word	0x40001c00

080041c4 <MX_TIM14_Init>:
/* TIM14 init function */
void MX_TIM14_Init(void)
{
 80041c4:	b580      	push	{r7, lr}
 80041c6:	b088      	sub	sp, #32
 80041c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM14_Init 0 */

  /* USER CODE END TIM14_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80041ca:	1d3b      	adds	r3, r7, #4
 80041cc:	2200      	movs	r2, #0
 80041ce:	601a      	str	r2, [r3, #0]
 80041d0:	605a      	str	r2, [r3, #4]
 80041d2:	609a      	str	r2, [r3, #8]
 80041d4:	60da      	str	r2, [r3, #12]
 80041d6:	611a      	str	r2, [r3, #16]
 80041d8:	615a      	str	r2, [r3, #20]
 80041da:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 80041dc:	4b1d      	ldr	r3, [pc, #116]	; (8004254 <MX_TIM14_Init+0x90>)
 80041de:	4a1e      	ldr	r2, [pc, #120]	; (8004258 <MX_TIM14_Init+0x94>)
 80041e0:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 64-1;
 80041e2:	4b1c      	ldr	r3, [pc, #112]	; (8004254 <MX_TIM14_Init+0x90>)
 80041e4:	223f      	movs	r2, #63	; 0x3f
 80041e6:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 80041e8:	4b1a      	ldr	r3, [pc, #104]	; (8004254 <MX_TIM14_Init+0x90>)
 80041ea:	2200      	movs	r2, #0
 80041ec:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 0;
 80041ee:	4b19      	ldr	r3, [pc, #100]	; (8004254 <MX_TIM14_Init+0x90>)
 80041f0:	2200      	movs	r2, #0
 80041f2:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80041f4:	4b17      	ldr	r3, [pc, #92]	; (8004254 <MX_TIM14_Init+0x90>)
 80041f6:	2200      	movs	r2, #0
 80041f8:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80041fa:	4b16      	ldr	r3, [pc, #88]	; (8004254 <MX_TIM14_Init+0x90>)
 80041fc:	2200      	movs	r2, #0
 80041fe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8004200:	4814      	ldr	r0, [pc, #80]	; (8004254 <MX_TIM14_Init+0x90>)
 8004202:	f005 fe7f 	bl	8009f04 <HAL_TIM_Base_Init>
 8004206:	4603      	mov	r3, r0
 8004208:	2b00      	cmp	r3, #0
 800420a:	d001      	beq.n	8004210 <MX_TIM14_Init+0x4c>
  {
    Error_Handler();
 800420c:	f7fe fce0 	bl	8002bd0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim14) != HAL_OK)
 8004210:	4810      	ldr	r0, [pc, #64]	; (8004254 <MX_TIM14_Init+0x90>)
 8004212:	f006 f80e 	bl	800a232 <HAL_TIM_PWM_Init>
 8004216:	4603      	mov	r3, r0
 8004218:	2b00      	cmp	r3, #0
 800421a:	d001      	beq.n	8004220 <MX_TIM14_Init+0x5c>
  {
    Error_Handler();
 800421c:	f7fe fcd8 	bl	8002bd0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004220:	2360      	movs	r3, #96	; 0x60
 8004222:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8004224:	2300      	movs	r3, #0
 8004226:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004228:	2300      	movs	r3, #0
 800422a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800422c:	2300      	movs	r3, #0
 800422e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim14, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004230:	1d3b      	adds	r3, r7, #4
 8004232:	2200      	movs	r2, #0
 8004234:	4619      	mov	r1, r3
 8004236:	4807      	ldr	r0, [pc, #28]	; (8004254 <MX_TIM14_Init+0x90>)
 8004238:	f006 fdde 	bl	800adf8 <HAL_TIM_PWM_ConfigChannel>
 800423c:	4603      	mov	r3, r0
 800423e:	2b00      	cmp	r3, #0
 8004240:	d001      	beq.n	8004246 <MX_TIM14_Init+0x82>
  {
    Error_Handler();
 8004242:	f7fe fcc5 	bl	8002bd0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */
  HAL_TIM_MspPostInit(&htim14);
 8004246:	4803      	ldr	r0, [pc, #12]	; (8004254 <MX_TIM14_Init+0x90>)
 8004248:	f000 f9a4 	bl	8004594 <HAL_TIM_MspPostInit>

}
 800424c:	bf00      	nop
 800424e:	3720      	adds	r7, #32
 8004250:	46bd      	mov	sp, r7
 8004252:	bd80      	pop	{r7, pc}
 8004254:	24000790 	.word	0x24000790
 8004258:	40002000 	.word	0x40002000

0800425c <MX_TIM15_Init>:
/* TIM15 init function */
void MX_TIM15_Init(void)
{
 800425c:	b580      	push	{r7, lr}
 800425e:	b088      	sub	sp, #32
 8004260:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004262:	f107 0310 	add.w	r3, r7, #16
 8004266:	2200      	movs	r2, #0
 8004268:	601a      	str	r2, [r3, #0]
 800426a:	605a      	str	r2, [r3, #4]
 800426c:	609a      	str	r2, [r3, #8]
 800426e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004270:	1d3b      	adds	r3, r7, #4
 8004272:	2200      	movs	r2, #0
 8004274:	601a      	str	r2, [r3, #0]
 8004276:	605a      	str	r2, [r3, #4]
 8004278:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 800427a:	4b1f      	ldr	r3, [pc, #124]	; (80042f8 <MX_TIM15_Init+0x9c>)
 800427c:	4a1f      	ldr	r2, [pc, #124]	; (80042fc <MX_TIM15_Init+0xa0>)
 800427e:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 0;
 8004280:	4b1d      	ldr	r3, [pc, #116]	; (80042f8 <MX_TIM15_Init+0x9c>)
 8004282:	2200      	movs	r2, #0
 8004284:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004286:	4b1c      	ldr	r3, [pc, #112]	; (80042f8 <MX_TIM15_Init+0x9c>)
 8004288:	2200      	movs	r2, #0
 800428a:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 64000;
 800428c:	4b1a      	ldr	r3, [pc, #104]	; (80042f8 <MX_TIM15_Init+0x9c>)
 800428e:	f44f 427a 	mov.w	r2, #64000	; 0xfa00
 8004292:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004294:	4b18      	ldr	r3, [pc, #96]	; (80042f8 <MX_TIM15_Init+0x9c>)
 8004296:	2200      	movs	r2, #0
 8004298:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 800429a:	4b17      	ldr	r3, [pc, #92]	; (80042f8 <MX_TIM15_Init+0x9c>)
 800429c:	2200      	movs	r2, #0
 800429e:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80042a0:	4b15      	ldr	r3, [pc, #84]	; (80042f8 <MX_TIM15_Init+0x9c>)
 80042a2:	2200      	movs	r2, #0
 80042a4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 80042a6:	4814      	ldr	r0, [pc, #80]	; (80042f8 <MX_TIM15_Init+0x9c>)
 80042a8:	f005 fe2c 	bl	8009f04 <HAL_TIM_Base_Init>
 80042ac:	4603      	mov	r3, r0
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d001      	beq.n	80042b6 <MX_TIM15_Init+0x5a>
  {
    Error_Handler();
 80042b2:	f7fe fc8d 	bl	8002bd0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80042b6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80042ba:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 80042bc:	f107 0310 	add.w	r3, r7, #16
 80042c0:	4619      	mov	r1, r3
 80042c2:	480d      	ldr	r0, [pc, #52]	; (80042f8 <MX_TIM15_Init+0x9c>)
 80042c4:	f006 feac 	bl	800b020 <HAL_TIM_ConfigClockSource>
 80042c8:	4603      	mov	r3, r0
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d001      	beq.n	80042d2 <MX_TIM15_Init+0x76>
  {
    Error_Handler();
 80042ce:	f7fe fc7f 	bl	8002bd0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80042d2:	2300      	movs	r3, #0
 80042d4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80042d6:	2300      	movs	r3, #0
 80042d8:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 80042da:	1d3b      	adds	r3, r7, #4
 80042dc:	4619      	mov	r1, r3
 80042de:	4806      	ldr	r0, [pc, #24]	; (80042f8 <MX_TIM15_Init+0x9c>)
 80042e0:	f007 fd12 	bl	800bd08 <HAL_TIMEx_MasterConfigSynchronization>
 80042e4:	4603      	mov	r3, r0
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d001      	beq.n	80042ee <MX_TIM15_Init+0x92>
  {
    Error_Handler();
 80042ea:	f7fe fc71 	bl	8002bd0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */

}
 80042ee:	bf00      	nop
 80042f0:	3720      	adds	r7, #32
 80042f2:	46bd      	mov	sp, r7
 80042f4:	bd80      	pop	{r7, pc}
 80042f6:	bf00      	nop
 80042f8:	240007dc 	.word	0x240007dc
 80042fc:	40014000 	.word	0x40014000

08004300 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8004300:	b580      	push	{r7, lr}
 8004302:	b092      	sub	sp, #72	; 0x48
 8004304:	af00      	add	r7, sp, #0
 8004306:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004308:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800430c:	2200      	movs	r2, #0
 800430e:	601a      	str	r2, [r3, #0]
 8004310:	605a      	str	r2, [r3, #4]
 8004312:	609a      	str	r2, [r3, #8]
 8004314:	60da      	str	r2, [r3, #12]
 8004316:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM2)
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004320:	d136      	bne.n	8004390 <HAL_TIM_Base_MspInit+0x90>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8004322:	4b92      	ldr	r3, [pc, #584]	; (800456c <HAL_TIM_Base_MspInit+0x26c>)
 8004324:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004328:	4a90      	ldr	r2, [pc, #576]	; (800456c <HAL_TIM_Base_MspInit+0x26c>)
 800432a:	f043 0301 	orr.w	r3, r3, #1
 800432e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8004332:	4b8e      	ldr	r3, [pc, #568]	; (800456c <HAL_TIM_Base_MspInit+0x26c>)
 8004334:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004338:	f003 0301 	and.w	r3, r3, #1
 800433c:	633b      	str	r3, [r7, #48]	; 0x30
 800433e:	6b3b      	ldr	r3, [r7, #48]	; 0x30

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004340:	4b8a      	ldr	r3, [pc, #552]	; (800456c <HAL_TIM_Base_MspInit+0x26c>)
 8004342:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004346:	4a89      	ldr	r2, [pc, #548]	; (800456c <HAL_TIM_Base_MspInit+0x26c>)
 8004348:	f043 0301 	orr.w	r3, r3, #1
 800434c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004350:	4b86      	ldr	r3, [pc, #536]	; (800456c <HAL_TIM_Base_MspInit+0x26c>)
 8004352:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004356:	f003 0301 	and.w	r3, r3, #1
 800435a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800435c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = stepFeedback1_Pin;
 800435e:	2301      	movs	r3, #1
 8004360:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004362:	2302      	movs	r3, #2
 8004364:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004366:	2300      	movs	r3, #0
 8004368:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800436a:	2300      	movs	r3, #0
 800436c:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800436e:	2301      	movs	r3, #1
 8004370:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(stepFeedback1_GPIO_Port, &GPIO_InitStruct);
 8004372:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8004376:	4619      	mov	r1, r3
 8004378:	487d      	ldr	r0, [pc, #500]	; (8004570 <HAL_TIM_Base_MspInit+0x270>)
 800437a:	f003 f86b 	bl	8007454 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 1, 0);
 800437e:	2200      	movs	r2, #0
 8004380:	2101      	movs	r1, #1
 8004382:	201c      	movs	r0, #28
 8004384:	f002 fabf 	bl	8006906 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8004388:	201c      	movs	r0, #28
 800438a:	f002 fad6 	bl	800693a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM15_IRQn);
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }
}
 800438e:	e0e8      	b.n	8004562 <HAL_TIM_Base_MspInit+0x262>
  else if(tim_baseHandle->Instance==TIM3)
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	4a77      	ldr	r2, [pc, #476]	; (8004574 <HAL_TIM_Base_MspInit+0x274>)
 8004396:	4293      	cmp	r3, r2
 8004398:	d136      	bne.n	8004408 <HAL_TIM_Base_MspInit+0x108>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800439a:	4b74      	ldr	r3, [pc, #464]	; (800456c <HAL_TIM_Base_MspInit+0x26c>)
 800439c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80043a0:	4a72      	ldr	r2, [pc, #456]	; (800456c <HAL_TIM_Base_MspInit+0x26c>)
 80043a2:	f043 0302 	orr.w	r3, r3, #2
 80043a6:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80043aa:	4b70      	ldr	r3, [pc, #448]	; (800456c <HAL_TIM_Base_MspInit+0x26c>)
 80043ac:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80043b0:	f003 0302 	and.w	r3, r3, #2
 80043b4:	62bb      	str	r3, [r7, #40]	; 0x28
 80043b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80043b8:	4b6c      	ldr	r3, [pc, #432]	; (800456c <HAL_TIM_Base_MspInit+0x26c>)
 80043ba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80043be:	4a6b      	ldr	r2, [pc, #428]	; (800456c <HAL_TIM_Base_MspInit+0x26c>)
 80043c0:	f043 0301 	orr.w	r3, r3, #1
 80043c4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80043c8:	4b68      	ldr	r3, [pc, #416]	; (800456c <HAL_TIM_Base_MspInit+0x26c>)
 80043ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80043ce:	f003 0301 	and.w	r3, r3, #1
 80043d2:	627b      	str	r3, [r7, #36]	; 0x24
 80043d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pin = stepFeedback2_Pin;
 80043d6:	2340      	movs	r3, #64	; 0x40
 80043d8:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80043da:	2302      	movs	r3, #2
 80043dc:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80043de:	2300      	movs	r3, #0
 80043e0:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80043e2:	2300      	movs	r3, #0
 80043e4:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80043e6:	2302      	movs	r3, #2
 80043e8:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(stepFeedback2_GPIO_Port, &GPIO_InitStruct);
 80043ea:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80043ee:	4619      	mov	r1, r3
 80043f0:	485f      	ldr	r0, [pc, #380]	; (8004570 <HAL_TIM_Base_MspInit+0x270>)
 80043f2:	f003 f82f 	bl	8007454 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM3_IRQn, 1, 0);
 80043f6:	2200      	movs	r2, #0
 80043f8:	2101      	movs	r1, #1
 80043fa:	201d      	movs	r0, #29
 80043fc:	f002 fa83 	bl	8006906 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8004400:	201d      	movs	r0, #29
 8004402:	f002 fa9a 	bl	800693a <HAL_NVIC_EnableIRQ>
}
 8004406:	e0ac      	b.n	8004562 <HAL_TIM_Base_MspInit+0x262>
  else if(tim_baseHandle->Instance==TIM4)
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	4a5a      	ldr	r2, [pc, #360]	; (8004578 <HAL_TIM_Base_MspInit+0x278>)
 800440e:	4293      	cmp	r3, r2
 8004410:	d137      	bne.n	8004482 <HAL_TIM_Base_MspInit+0x182>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8004412:	4b56      	ldr	r3, [pc, #344]	; (800456c <HAL_TIM_Base_MspInit+0x26c>)
 8004414:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004418:	4a54      	ldr	r2, [pc, #336]	; (800456c <HAL_TIM_Base_MspInit+0x26c>)
 800441a:	f043 0304 	orr.w	r3, r3, #4
 800441e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8004422:	4b52      	ldr	r3, [pc, #328]	; (800456c <HAL_TIM_Base_MspInit+0x26c>)
 8004424:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004428:	f003 0304 	and.w	r3, r3, #4
 800442c:	623b      	str	r3, [r7, #32]
 800442e:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8004430:	4b4e      	ldr	r3, [pc, #312]	; (800456c <HAL_TIM_Base_MspInit+0x26c>)
 8004432:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004436:	4a4d      	ldr	r2, [pc, #308]	; (800456c <HAL_TIM_Base_MspInit+0x26c>)
 8004438:	f043 0308 	orr.w	r3, r3, #8
 800443c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004440:	4b4a      	ldr	r3, [pc, #296]	; (800456c <HAL_TIM_Base_MspInit+0x26c>)
 8004442:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004446:	f003 0308 	and.w	r3, r3, #8
 800444a:	61fb      	str	r3, [r7, #28]
 800444c:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = stepFeedback3_Pin;
 800444e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004452:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004454:	2302      	movs	r3, #2
 8004456:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004458:	2300      	movs	r3, #0
 800445a:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800445c:	2300      	movs	r3, #0
 800445e:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8004460:	2302      	movs	r3, #2
 8004462:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(stepFeedback3_GPIO_Port, &GPIO_InitStruct);
 8004464:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8004468:	4619      	mov	r1, r3
 800446a:	4844      	ldr	r0, [pc, #272]	; (800457c <HAL_TIM_Base_MspInit+0x27c>)
 800446c:	f002 fff2 	bl	8007454 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 1, 0);
 8004470:	2200      	movs	r2, #0
 8004472:	2101      	movs	r1, #1
 8004474:	201e      	movs	r0, #30
 8004476:	f002 fa46 	bl	8006906 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800447a:	201e      	movs	r0, #30
 800447c:	f002 fa5d 	bl	800693a <HAL_NVIC_EnableIRQ>
}
 8004480:	e06f      	b.n	8004562 <HAL_TIM_Base_MspInit+0x262>
  else if(tim_baseHandle->Instance==TIM5)
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	4a3e      	ldr	r2, [pc, #248]	; (8004580 <HAL_TIM_Base_MspInit+0x280>)
 8004488:	4293      	cmp	r3, r2
 800448a:	d10f      	bne.n	80044ac <HAL_TIM_Base_MspInit+0x1ac>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800448c:	4b37      	ldr	r3, [pc, #220]	; (800456c <HAL_TIM_Base_MspInit+0x26c>)
 800448e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004492:	4a36      	ldr	r2, [pc, #216]	; (800456c <HAL_TIM_Base_MspInit+0x26c>)
 8004494:	f043 0308 	orr.w	r3, r3, #8
 8004498:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800449c:	4b33      	ldr	r3, [pc, #204]	; (800456c <HAL_TIM_Base_MspInit+0x26c>)
 800449e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80044a2:	f003 0308 	and.w	r3, r3, #8
 80044a6:	61bb      	str	r3, [r7, #24]
 80044a8:	69bb      	ldr	r3, [r7, #24]
}
 80044aa:	e05a      	b.n	8004562 <HAL_TIM_Base_MspInit+0x262>
  else if(tim_baseHandle->Instance==TIM12)
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	4a34      	ldr	r2, [pc, #208]	; (8004584 <HAL_TIM_Base_MspInit+0x284>)
 80044b2:	4293      	cmp	r3, r2
 80044b4:	d10f      	bne.n	80044d6 <HAL_TIM_Base_MspInit+0x1d6>
    __HAL_RCC_TIM12_CLK_ENABLE();
 80044b6:	4b2d      	ldr	r3, [pc, #180]	; (800456c <HAL_TIM_Base_MspInit+0x26c>)
 80044b8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80044bc:	4a2b      	ldr	r2, [pc, #172]	; (800456c <HAL_TIM_Base_MspInit+0x26c>)
 80044be:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80044c2:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80044c6:	4b29      	ldr	r3, [pc, #164]	; (800456c <HAL_TIM_Base_MspInit+0x26c>)
 80044c8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80044cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044d0:	617b      	str	r3, [r7, #20]
 80044d2:	697b      	ldr	r3, [r7, #20]
}
 80044d4:	e045      	b.n	8004562 <HAL_TIM_Base_MspInit+0x262>
  else if(tim_baseHandle->Instance==TIM13)
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	4a2b      	ldr	r2, [pc, #172]	; (8004588 <HAL_TIM_Base_MspInit+0x288>)
 80044dc:	4293      	cmp	r3, r2
 80044de:	d10f      	bne.n	8004500 <HAL_TIM_Base_MspInit+0x200>
    __HAL_RCC_TIM13_CLK_ENABLE();
 80044e0:	4b22      	ldr	r3, [pc, #136]	; (800456c <HAL_TIM_Base_MspInit+0x26c>)
 80044e2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80044e6:	4a21      	ldr	r2, [pc, #132]	; (800456c <HAL_TIM_Base_MspInit+0x26c>)
 80044e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80044ec:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80044f0:	4b1e      	ldr	r3, [pc, #120]	; (800456c <HAL_TIM_Base_MspInit+0x26c>)
 80044f2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80044f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044fa:	613b      	str	r3, [r7, #16]
 80044fc:	693b      	ldr	r3, [r7, #16]
}
 80044fe:	e030      	b.n	8004562 <HAL_TIM_Base_MspInit+0x262>
  else if(tim_baseHandle->Instance==TIM14)
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	4a21      	ldr	r2, [pc, #132]	; (800458c <HAL_TIM_Base_MspInit+0x28c>)
 8004506:	4293      	cmp	r3, r2
 8004508:	d10f      	bne.n	800452a <HAL_TIM_Base_MspInit+0x22a>
    __HAL_RCC_TIM14_CLK_ENABLE();
 800450a:	4b18      	ldr	r3, [pc, #96]	; (800456c <HAL_TIM_Base_MspInit+0x26c>)
 800450c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004510:	4a16      	ldr	r2, [pc, #88]	; (800456c <HAL_TIM_Base_MspInit+0x26c>)
 8004512:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004516:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800451a:	4b14      	ldr	r3, [pc, #80]	; (800456c <HAL_TIM_Base_MspInit+0x26c>)
 800451c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004520:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004524:	60fb      	str	r3, [r7, #12]
 8004526:	68fb      	ldr	r3, [r7, #12]
}
 8004528:	e01b      	b.n	8004562 <HAL_TIM_Base_MspInit+0x262>
  else if(tim_baseHandle->Instance==TIM15)
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	4a18      	ldr	r2, [pc, #96]	; (8004590 <HAL_TIM_Base_MspInit+0x290>)
 8004530:	4293      	cmp	r3, r2
 8004532:	d116      	bne.n	8004562 <HAL_TIM_Base_MspInit+0x262>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8004534:	4b0d      	ldr	r3, [pc, #52]	; (800456c <HAL_TIM_Base_MspInit+0x26c>)
 8004536:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800453a:	4a0c      	ldr	r2, [pc, #48]	; (800456c <HAL_TIM_Base_MspInit+0x26c>)
 800453c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004540:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8004544:	4b09      	ldr	r3, [pc, #36]	; (800456c <HAL_TIM_Base_MspInit+0x26c>)
 8004546:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800454a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800454e:	60bb      	str	r3, [r7, #8]
 8004550:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM15_IRQn, 1, 0);
 8004552:	2200      	movs	r2, #0
 8004554:	2101      	movs	r1, #1
 8004556:	2074      	movs	r0, #116	; 0x74
 8004558:	f002 f9d5 	bl	8006906 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM15_IRQn);
 800455c:	2074      	movs	r0, #116	; 0x74
 800455e:	f002 f9ec 	bl	800693a <HAL_NVIC_EnableIRQ>
}
 8004562:	bf00      	nop
 8004564:	3748      	adds	r7, #72	; 0x48
 8004566:	46bd      	mov	sp, r7
 8004568:	bd80      	pop	{r7, pc}
 800456a:	bf00      	nop
 800456c:	58024400 	.word	0x58024400
 8004570:	58020000 	.word	0x58020000
 8004574:	40000400 	.word	0x40000400
 8004578:	40000800 	.word	0x40000800
 800457c:	58020c00 	.word	0x58020c00
 8004580:	40000c00 	.word	0x40000c00
 8004584:	40001800 	.word	0x40001800
 8004588:	40001c00 	.word	0x40001c00
 800458c:	40002000 	.word	0x40002000
 8004590:	40014000 	.word	0x40014000

08004594 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8004594:	b580      	push	{r7, lr}
 8004596:	b08a      	sub	sp, #40	; 0x28
 8004598:	af00      	add	r7, sp, #0
 800459a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800459c:	f107 0314 	add.w	r3, r7, #20
 80045a0:	2200      	movs	r2, #0
 80045a2:	601a      	str	r2, [r3, #0]
 80045a4:	605a      	str	r2, [r3, #4]
 80045a6:	609a      	str	r2, [r3, #8]
 80045a8:	60da      	str	r2, [r3, #12]
 80045aa:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM12)
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	4a39      	ldr	r2, [pc, #228]	; (8004698 <HAL_TIM_MspPostInit+0x104>)
 80045b2:	4293      	cmp	r3, r2
 80045b4:	d120      	bne.n	80045f8 <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM12_MspPostInit 0 */

  /* USER CODE END TIM12_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80045b6:	4b39      	ldr	r3, [pc, #228]	; (800469c <HAL_TIM_MspPostInit+0x108>)
 80045b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80045bc:	4a37      	ldr	r2, [pc, #220]	; (800469c <HAL_TIM_MspPostInit+0x108>)
 80045be:	f043 0302 	orr.w	r3, r3, #2
 80045c2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80045c6:	4b35      	ldr	r3, [pc, #212]	; (800469c <HAL_TIM_MspPostInit+0x108>)
 80045c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80045cc:	f003 0302 	and.w	r3, r3, #2
 80045d0:	613b      	str	r3, [r7, #16]
 80045d2:	693b      	ldr	r3, [r7, #16]
    /**TIM12 GPIO Configuration
    PB14     ------> TIM12_CH1
    */
    GPIO_InitStruct.Pin = S_PulsoPaP1_Pin;
 80045d4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80045d8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80045da:	2302      	movs	r3, #2
 80045dc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80045de:	2300      	movs	r3, #0
 80045e0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80045e2:	2300      	movs	r3, #0
 80045e4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM12;
 80045e6:	2302      	movs	r3, #2
 80045e8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(S_PulsoPaP1_GPIO_Port, &GPIO_InitStruct);
 80045ea:	f107 0314 	add.w	r3, r7, #20
 80045ee:	4619      	mov	r1, r3
 80045f0:	482b      	ldr	r0, [pc, #172]	; (80046a0 <HAL_TIM_MspPostInit+0x10c>)
 80045f2:	f002 ff2f 	bl	8007454 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM14_MspPostInit 1 */

  /* USER CODE END TIM14_MspPostInit 1 */
  }

}
 80045f6:	e04a      	b.n	800468e <HAL_TIM_MspPostInit+0xfa>
  else if(timHandle->Instance==TIM13)
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	4a29      	ldr	r2, [pc, #164]	; (80046a4 <HAL_TIM_MspPostInit+0x110>)
 80045fe:	4293      	cmp	r3, r2
 8004600:	d120      	bne.n	8004644 <HAL_TIM_MspPostInit+0xb0>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8004602:	4b26      	ldr	r3, [pc, #152]	; (800469c <HAL_TIM_MspPostInit+0x108>)
 8004604:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004608:	4a24      	ldr	r2, [pc, #144]	; (800469c <HAL_TIM_MspPostInit+0x108>)
 800460a:	f043 0320 	orr.w	r3, r3, #32
 800460e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004612:	4b22      	ldr	r3, [pc, #136]	; (800469c <HAL_TIM_MspPostInit+0x108>)
 8004614:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004618:	f003 0320 	and.w	r3, r3, #32
 800461c:	60fb      	str	r3, [r7, #12]
 800461e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = S_PulsoPaP2_Pin;
 8004620:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004624:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004626:	2302      	movs	r3, #2
 8004628:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800462a:	2300      	movs	r3, #0
 800462c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800462e:	2300      	movs	r3, #0
 8004630:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM13;
 8004632:	2309      	movs	r3, #9
 8004634:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(S_PulsoPaP2_GPIO_Port, &GPIO_InitStruct);
 8004636:	f107 0314 	add.w	r3, r7, #20
 800463a:	4619      	mov	r1, r3
 800463c:	481a      	ldr	r0, [pc, #104]	; (80046a8 <HAL_TIM_MspPostInit+0x114>)
 800463e:	f002 ff09 	bl	8007454 <HAL_GPIO_Init>
}
 8004642:	e024      	b.n	800468e <HAL_TIM_MspPostInit+0xfa>
  else if(timHandle->Instance==TIM14)
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	4a18      	ldr	r2, [pc, #96]	; (80046ac <HAL_TIM_MspPostInit+0x118>)
 800464a:	4293      	cmp	r3, r2
 800464c:	d11f      	bne.n	800468e <HAL_TIM_MspPostInit+0xfa>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800464e:	4b13      	ldr	r3, [pc, #76]	; (800469c <HAL_TIM_MspPostInit+0x108>)
 8004650:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004654:	4a11      	ldr	r2, [pc, #68]	; (800469c <HAL_TIM_MspPostInit+0x108>)
 8004656:	f043 0320 	orr.w	r3, r3, #32
 800465a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800465e:	4b0f      	ldr	r3, [pc, #60]	; (800469c <HAL_TIM_MspPostInit+0x108>)
 8004660:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004664:	f003 0320 	and.w	r3, r3, #32
 8004668:	60bb      	str	r3, [r7, #8]
 800466a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = S_PulsoPaP3_Pin;
 800466c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004670:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004672:	2302      	movs	r3, #2
 8004674:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004676:	2300      	movs	r3, #0
 8004678:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800467a:	2300      	movs	r3, #0
 800467c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM14;
 800467e:	2309      	movs	r3, #9
 8004680:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(S_PulsoPaP3_GPIO_Port, &GPIO_InitStruct);
 8004682:	f107 0314 	add.w	r3, r7, #20
 8004686:	4619      	mov	r1, r3
 8004688:	4807      	ldr	r0, [pc, #28]	; (80046a8 <HAL_TIM_MspPostInit+0x114>)
 800468a:	f002 fee3 	bl	8007454 <HAL_GPIO_Init>
}
 800468e:	bf00      	nop
 8004690:	3728      	adds	r7, #40	; 0x28
 8004692:	46bd      	mov	sp, r7
 8004694:	bd80      	pop	{r7, pc}
 8004696:	bf00      	nop
 8004698:	40001800 	.word	0x40001800
 800469c:	58024400 	.word	0x58024400
 80046a0:	58020400 	.word	0x58020400
 80046a4:	40001c00 	.word	0x40001c00
 80046a8:	58021400 	.word	0x58021400
 80046ac:	40002000 	.word	0x40002000

080046b0 <get_Straj>:
double vlim;
double T,Ta,Td,Tv,Tj1,Tj2,Tj,delta;
double qi,qf;


double get_Straj(double t,double _qi, double _qf ,double *params){
 80046b0:	b580      	push	{r7, lr}
 80046b2:	ed2d 8b06 	vpush	{d8-d10}
 80046b6:	b088      	sub	sp, #32
 80046b8:	af00      	add	r7, sp, #0
 80046ba:	ed87 0b06 	vstr	d0, [r7, #24]
 80046be:	ed87 1b04 	vstr	d1, [r7, #16]
 80046c2:	ed87 2b02 	vstr	d2, [r7, #8]
 80046c6:	6078      	str	r0, [r7, #4]

	Tj1 = params[0];
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046ce:	495f      	ldr	r1, [pc, #380]	; (800484c <get_Straj+0x19c>)
 80046d0:	e9c1 2300 	strd	r2, r3, [r1]
	Tj2 = params[1];
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80046da:	495d      	ldr	r1, [pc, #372]	; (8004850 <get_Straj+0x1a0>)
 80046dc:	e9c1 2300 	strd	r2, r3, [r1]
	Tj = params[2];
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80046e6:	495b      	ldr	r1, [pc, #364]	; (8004854 <get_Straj+0x1a4>)
 80046e8:	e9c1 2300 	strd	r2, r3, [r1]
	Ta = params[3];
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80046f2:	4959      	ldr	r1, [pc, #356]	; (8004858 <get_Straj+0x1a8>)
 80046f4:	e9c1 2300 	strd	r2, r3, [r1]
	Td = params[4];
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80046fe:	4957      	ldr	r1, [pc, #348]	; (800485c <get_Straj+0x1ac>)
 8004700:	e9c1 2300 	strd	r2, r3, [r1]
	Tv = params[5];
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 800470a:	4955      	ldr	r1, [pc, #340]	; (8004860 <get_Straj+0x1b0>)
 800470c:	e9c1 2300 	strd	r2, r3, [r1]
	T = params[6];
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8004716:	4953      	ldr	r1, [pc, #332]	; (8004864 <get_Straj+0x1b4>)
 8004718:	e9c1 2300 	strd	r2, r3, [r1]

	qi=_qi;
 800471c:	4952      	ldr	r1, [pc, #328]	; (8004868 <get_Straj+0x1b8>)
 800471e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8004722:	e9c1 2300 	strd	r2, r3, [r1]
	qf=_qf;
 8004726:	4951      	ldr	r1, [pc, #324]	; (800486c <get_Straj+0x1bc>)
 8004728:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800472c:	e9c1 2300 	strd	r2, r3, [r1]

    if (qf < qi){
 8004730:	4b4e      	ldr	r3, [pc, #312]	; (800486c <get_Straj+0x1bc>)
 8004732:	ed93 6b00 	vldr	d6, [r3]
 8004736:	4b4c      	ldr	r3, [pc, #304]	; (8004868 <get_Straj+0x1b8>)
 8004738:	ed93 7b00 	vldr	d7, [r3]
 800473c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8004740:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004744:	f140 80ac 	bpl.w	80048a0 <get_Straj+0x1f0>

    flagInv = true;
 8004748:	4b49      	ldr	r3, [pc, #292]	; (8004870 <get_Straj+0x1c0>)
 800474a:	2201      	movs	r2, #1
 800474c:	701a      	strb	r2, [r3, #0]

    qi = -qi;
 800474e:	4b46      	ldr	r3, [pc, #280]	; (8004868 <get_Straj+0x1b8>)
 8004750:	ed93 7b00 	vldr	d7, [r3]
 8004754:	eeb1 7b47 	vneg.f64	d7, d7
 8004758:	4b43      	ldr	r3, [pc, #268]	; (8004868 <get_Straj+0x1b8>)
 800475a:	ed83 7b00 	vstr	d7, [r3]
    qf = -qf;
 800475e:	4b43      	ldr	r3, [pc, #268]	; (800486c <get_Straj+0x1bc>)
 8004760:	ed93 7b00 	vldr	d7, [r3]
 8004764:	eeb1 7b47 	vneg.f64	d7, d7
 8004768:	4b40      	ldr	r3, [pc, #256]	; (800486c <get_Straj+0x1bc>)
 800476a:	ed83 7b00 	vstr	d7, [r3]
    vi = -vi;
 800476e:	4b41      	ldr	r3, [pc, #260]	; (8004874 <get_Straj+0x1c4>)
 8004770:	ed93 7b00 	vldr	d7, [r3]
 8004774:	eeb1 7b47 	vneg.f64	d7, d7
 8004778:	4b3e      	ldr	r3, [pc, #248]	; (8004874 <get_Straj+0x1c4>)
 800477a:	ed83 7b00 	vstr	d7, [r3]
    vf = -vf;
 800477e:	4b3e      	ldr	r3, [pc, #248]	; (8004878 <get_Straj+0x1c8>)
 8004780:	ed93 7b00 	vldr	d7, [r3]
 8004784:	eeb1 7b47 	vneg.f64	d7, d7
 8004788:	4b3b      	ldr	r3, [pc, #236]	; (8004878 <get_Straj+0x1c8>)
 800478a:	ed83 7b00 	vstr	d7, [r3]

    vmax = -vmin;
 800478e:	4b3b      	ldr	r3, [pc, #236]	; (800487c <get_Straj+0x1cc>)
 8004790:	ed93 7b00 	vldr	d7, [r3]
 8004794:	eeb1 7b47 	vneg.f64	d7, d7
 8004798:	4b39      	ldr	r3, [pc, #228]	; (8004880 <get_Straj+0x1d0>)
 800479a:	ed83 7b00 	vstr	d7, [r3]
    vmin = -vmax;
 800479e:	4b38      	ldr	r3, [pc, #224]	; (8004880 <get_Straj+0x1d0>)
 80047a0:	ed93 7b00 	vldr	d7, [r3]
 80047a4:	eeb1 7b47 	vneg.f64	d7, d7
 80047a8:	4b34      	ldr	r3, [pc, #208]	; (800487c <get_Straj+0x1cc>)
 80047aa:	ed83 7b00 	vstr	d7, [r3]
    amax = -amin;
 80047ae:	4b35      	ldr	r3, [pc, #212]	; (8004884 <get_Straj+0x1d4>)
 80047b0:	ed93 7b00 	vldr	d7, [r3]
 80047b4:	eeb1 7b47 	vneg.f64	d7, d7
 80047b8:	4b33      	ldr	r3, [pc, #204]	; (8004888 <get_Straj+0x1d8>)
 80047ba:	ed83 7b00 	vstr	d7, [r3]
    amin = -amax;
 80047be:	4b32      	ldr	r3, [pc, #200]	; (8004888 <get_Straj+0x1d8>)
 80047c0:	ed93 7b00 	vldr	d7, [r3]
 80047c4:	eeb1 7b47 	vneg.f64	d7, d7
 80047c8:	4b2e      	ldr	r3, [pc, #184]	; (8004884 <get_Straj+0x1d4>)
 80047ca:	ed83 7b00 	vstr	d7, [r3]
    jmax = -jmin;
 80047ce:	4b2f      	ldr	r3, [pc, #188]	; (800488c <get_Straj+0x1dc>)
 80047d0:	ed93 7b00 	vldr	d7, [r3]
 80047d4:	eeb1 7b47 	vneg.f64	d7, d7
 80047d8:	4b2d      	ldr	r3, [pc, #180]	; (8004890 <get_Straj+0x1e0>)
 80047da:	ed83 7b00 	vstr	d7, [r3]
    jmin = -jmax;
 80047de:	4b2c      	ldr	r3, [pc, #176]	; (8004890 <get_Straj+0x1e0>)
 80047e0:	ed93 7b00 	vldr	d7, [r3]
 80047e4:	eeb1 7b47 	vneg.f64	d7, d7
 80047e8:	4b28      	ldr	r3, [pc, #160]	; (800488c <get_Straj+0x1dc>)
 80047ea:	ed83 7b00 	vstr	d7, [r3]

    alima = jmax*Tj1;
 80047ee:	4b28      	ldr	r3, [pc, #160]	; (8004890 <get_Straj+0x1e0>)
 80047f0:	ed93 6b00 	vldr	d6, [r3]
 80047f4:	4b15      	ldr	r3, [pc, #84]	; (800484c <get_Straj+0x19c>)
 80047f6:	ed93 7b00 	vldr	d7, [r3]
 80047fa:	ee26 7b07 	vmul.f64	d7, d6, d7
 80047fe:	4b25      	ldr	r3, [pc, #148]	; (8004894 <get_Straj+0x1e4>)
 8004800:	ed83 7b00 	vstr	d7, [r3]
    alimd = -jmax*Tj2;
 8004804:	4b22      	ldr	r3, [pc, #136]	; (8004890 <get_Straj+0x1e0>)
 8004806:	ed93 7b00 	vldr	d7, [r3]
 800480a:	eeb1 6b47 	vneg.f64	d6, d7
 800480e:	4b10      	ldr	r3, [pc, #64]	; (8004850 <get_Straj+0x1a0>)
 8004810:	ed93 7b00 	vldr	d7, [r3]
 8004814:	ee26 7b07 	vmul.f64	d7, d6, d7
 8004818:	4b1f      	ldr	r3, [pc, #124]	; (8004898 <get_Straj+0x1e8>)
 800481a:	ed83 7b00 	vstr	d7, [r3]
    vlim = vi+(Ta-Tj1)*alima;
 800481e:	4b0e      	ldr	r3, [pc, #56]	; (8004858 <get_Straj+0x1a8>)
 8004820:	ed93 6b00 	vldr	d6, [r3]
 8004824:	4b09      	ldr	r3, [pc, #36]	; (800484c <get_Straj+0x19c>)
 8004826:	ed93 7b00 	vldr	d7, [r3]
 800482a:	ee36 6b47 	vsub.f64	d6, d6, d7
 800482e:	4b19      	ldr	r3, [pc, #100]	; (8004894 <get_Straj+0x1e4>)
 8004830:	ed93 7b00 	vldr	d7, [r3]
 8004834:	ee26 6b07 	vmul.f64	d6, d6, d7
 8004838:	4b0e      	ldr	r3, [pc, #56]	; (8004874 <get_Straj+0x1c4>)
 800483a:	ed93 7b00 	vldr	d7, [r3]
 800483e:	ee36 7b07 	vadd.f64	d7, d6, d7
 8004842:	4b16      	ldr	r3, [pc, #88]	; (800489c <get_Straj+0x1ec>)
 8004844:	ed83 7b00 	vstr	d7, [r3]
 8004848:	e06f      	b.n	800492a <get_Straj+0x27a>
 800484a:	bf00      	nop
 800484c:	240008b0 	.word	0x240008b0
 8004850:	240008b8 	.word	0x240008b8
 8004854:	240008c0 	.word	0x240008c0
 8004858:	24000898 	.word	0x24000898
 800485c:	240008a0 	.word	0x240008a0
 8004860:	240008a8 	.word	0x240008a8
 8004864:	24000890 	.word	0x24000890
 8004868:	240008d0 	.word	0x240008d0
 800486c:	240008d8 	.word	0x240008d8
 8004870:	24000870 	.word	0x24000870
 8004874:	24000018 	.word	0x24000018
 8004878:	24000490 	.word	0x24000490
 800487c:	24000488 	.word	0x24000488
 8004880:	24000010 	.word	0x24000010
 8004884:	24000498 	.word	0x24000498
 8004888:	24000020 	.word	0x24000020
 800488c:	24000480 	.word	0x24000480
 8004890:	24000008 	.word	0x24000008
 8004894:	24000878 	.word	0x24000878
 8004898:	24000880 	.word	0x24000880
 800489c:	24000888 	.word	0x24000888

    }else{
        jmin = -jmax;
 80048a0:	4bbc      	ldr	r3, [pc, #752]	; (8004b94 <get_Straj+0x4e4>)
 80048a2:	ed93 7b00 	vldr	d7, [r3]
 80048a6:	eeb1 7b47 	vneg.f64	d7, d7
 80048aa:	4bbb      	ldr	r3, [pc, #748]	; (8004b98 <get_Straj+0x4e8>)
 80048ac:	ed83 7b00 	vstr	d7, [r3]
        amin = -amax;
 80048b0:	4bba      	ldr	r3, [pc, #744]	; (8004b9c <get_Straj+0x4ec>)
 80048b2:	ed93 7b00 	vldr	d7, [r3]
 80048b6:	eeb1 7b47 	vneg.f64	d7, d7
 80048ba:	4bb9      	ldr	r3, [pc, #740]	; (8004ba0 <get_Straj+0x4f0>)
 80048bc:	ed83 7b00 	vstr	d7, [r3]
        vmin = -vmax;
 80048c0:	4bb8      	ldr	r3, [pc, #736]	; (8004ba4 <get_Straj+0x4f4>)
 80048c2:	ed93 7b00 	vldr	d7, [r3]
 80048c6:	eeb1 7b47 	vneg.f64	d7, d7
 80048ca:	4bb7      	ldr	r3, [pc, #732]	; (8004ba8 <get_Straj+0x4f8>)
 80048cc:	ed83 7b00 	vstr	d7, [r3]

        alima = jmax*Tj1;
 80048d0:	4bb0      	ldr	r3, [pc, #704]	; (8004b94 <get_Straj+0x4e4>)
 80048d2:	ed93 6b00 	vldr	d6, [r3]
 80048d6:	4bb5      	ldr	r3, [pc, #724]	; (8004bac <get_Straj+0x4fc>)
 80048d8:	ed93 7b00 	vldr	d7, [r3]
 80048dc:	ee26 7b07 	vmul.f64	d7, d6, d7
 80048e0:	4bb3      	ldr	r3, [pc, #716]	; (8004bb0 <get_Straj+0x500>)
 80048e2:	ed83 7b00 	vstr	d7, [r3]
        alimd = -jmax*Tj2;
 80048e6:	4bab      	ldr	r3, [pc, #684]	; (8004b94 <get_Straj+0x4e4>)
 80048e8:	ed93 7b00 	vldr	d7, [r3]
 80048ec:	eeb1 6b47 	vneg.f64	d6, d7
 80048f0:	4bb0      	ldr	r3, [pc, #704]	; (8004bb4 <get_Straj+0x504>)
 80048f2:	ed93 7b00 	vldr	d7, [r3]
 80048f6:	ee26 7b07 	vmul.f64	d7, d6, d7
 80048fa:	4baf      	ldr	r3, [pc, #700]	; (8004bb8 <get_Straj+0x508>)
 80048fc:	ed83 7b00 	vstr	d7, [r3]
        vlim = vi+(Ta-Tj1)*alima;
 8004900:	4bae      	ldr	r3, [pc, #696]	; (8004bbc <get_Straj+0x50c>)
 8004902:	ed93 6b00 	vldr	d6, [r3]
 8004906:	4ba9      	ldr	r3, [pc, #676]	; (8004bac <get_Straj+0x4fc>)
 8004908:	ed93 7b00 	vldr	d7, [r3]
 800490c:	ee36 6b47 	vsub.f64	d6, d6, d7
 8004910:	4ba7      	ldr	r3, [pc, #668]	; (8004bb0 <get_Straj+0x500>)
 8004912:	ed93 7b00 	vldr	d7, [r3]
 8004916:	ee26 6b07 	vmul.f64	d6, d6, d7
 800491a:	4ba9      	ldr	r3, [pc, #676]	; (8004bc0 <get_Straj+0x510>)
 800491c:	ed93 7b00 	vldr	d7, [r3]
 8004920:	ee36 7b07 	vadd.f64	d7, d6, d7
 8004924:	4ba7      	ldr	r3, [pc, #668]	; (8004bc4 <get_Straj+0x514>)
 8004926:	ed83 7b00 	vstr	d7, [r3]
    }


    //#Acceleration phase

    if (t>=0 && t<=Tj1){               //a) [0,Tj1]
 800492a:	ed97 7b06 	vldr	d7, [r7, #24]
 800492e:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8004932:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004936:	db7e      	blt.n	8004a36 <get_Straj+0x386>
 8004938:	4b9c      	ldr	r3, [pc, #624]	; (8004bac <get_Straj+0x4fc>)
 800493a:	ed93 7b00 	vldr	d7, [r3]
 800493e:	ed97 6b06 	vldr	d6, [r7, #24]
 8004942:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8004946:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800494a:	d874      	bhi.n	8004a36 <get_Straj+0x386>
        //printf("tramo1\n");
        q = qi+vi*t+jmax*pow(t,3)/6;
 800494c:	4b9c      	ldr	r3, [pc, #624]	; (8004bc0 <get_Straj+0x510>)
 800494e:	ed93 6b00 	vldr	d6, [r3]
 8004952:	ed97 7b06 	vldr	d7, [r7, #24]
 8004956:	ee26 6b07 	vmul.f64	d6, d6, d7
 800495a:	4b9b      	ldr	r3, [pc, #620]	; (8004bc8 <get_Straj+0x518>)
 800495c:	ed93 7b00 	vldr	d7, [r3]
 8004960:	ee36 8b07 	vadd.f64	d8, d6, d7
 8004964:	eeb0 1b08 	vmov.f64	d1, #8	; 0x40400000  3.0
 8004968:	ed97 0b06 	vldr	d0, [r7, #24]
 800496c:	f00c ffb8 	bl	80118e0 <pow>
 8004970:	eeb0 6b40 	vmov.f64	d6, d0
 8004974:	4b87      	ldr	r3, [pc, #540]	; (8004b94 <get_Straj+0x4e4>)
 8004976:	ed93 7b00 	vldr	d7, [r3]
 800497a:	ee26 6b07 	vmul.f64	d6, d6, d7
 800497e:	eeb1 5b08 	vmov.f64	d5, #24	; 0x40c00000  6.0
 8004982:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8004986:	ee38 7b07 	vadd.f64	d7, d8, d7
 800498a:	4b90      	ldr	r3, [pc, #576]	; (8004bcc <get_Straj+0x51c>)
 800498c:	ed83 7b00 	vstr	d7, [r3]
        qd = vi+jmax*pow(t,2)/2;
 8004990:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8004994:	ed97 0b06 	vldr	d0, [r7, #24]
 8004998:	f00c ffa2 	bl	80118e0 <pow>
 800499c:	eeb0 6b40 	vmov.f64	d6, d0
 80049a0:	4b7c      	ldr	r3, [pc, #496]	; (8004b94 <get_Straj+0x4e4>)
 80049a2:	ed93 7b00 	vldr	d7, [r3]
 80049a6:	ee26 7b07 	vmul.f64	d7, d6, d7
 80049aa:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 80049ae:	ee87 6b05 	vdiv.f64	d6, d7, d5
 80049b2:	4b83      	ldr	r3, [pc, #524]	; (8004bc0 <get_Straj+0x510>)
 80049b4:	ed93 7b00 	vldr	d7, [r3]
 80049b8:	ee36 7b07 	vadd.f64	d7, d6, d7
 80049bc:	4b84      	ldr	r3, [pc, #528]	; (8004bd0 <get_Straj+0x520>)
 80049be:	ed83 7b00 	vstr	d7, [r3]
        qdd = jmax*t;
 80049c2:	4b74      	ldr	r3, [pc, #464]	; (8004b94 <get_Straj+0x4e4>)
 80049c4:	ed93 6b00 	vldr	d6, [r3]
 80049c8:	ed97 7b06 	vldr	d7, [r7, #24]
 80049cc:	ee26 7b07 	vmul.f64	d7, d6, d7
 80049d0:	4b80      	ldr	r3, [pc, #512]	; (8004bd4 <get_Straj+0x524>)
 80049d2:	ed83 7b00 	vstr	d7, [r3]
        qddd = jmax;
 80049d6:	4b6f      	ldr	r3, [pc, #444]	; (8004b94 <get_Straj+0x4e4>)
 80049d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049dc:	497e      	ldr	r1, [pc, #504]	; (8004bd8 <get_Straj+0x528>)
 80049de:	e9c1 2300 	strd	r2, r3, [r1]
        if (flagInv){
 80049e2:	4b7e      	ldr	r3, [pc, #504]	; (8004bdc <get_Straj+0x52c>)
 80049e4:	781b      	ldrb	r3, [r3, #0]
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	f000 84fb 	beq.w	80053e2 <get_Straj+0xd32>
            q=-q; qd=-qd; qdd=-qdd; qddd=-qddd;
 80049ec:	4b77      	ldr	r3, [pc, #476]	; (8004bcc <get_Straj+0x51c>)
 80049ee:	ed93 7b00 	vldr	d7, [r3]
 80049f2:	eeb1 7b47 	vneg.f64	d7, d7
 80049f6:	4b75      	ldr	r3, [pc, #468]	; (8004bcc <get_Straj+0x51c>)
 80049f8:	ed83 7b00 	vstr	d7, [r3]
 80049fc:	4b74      	ldr	r3, [pc, #464]	; (8004bd0 <get_Straj+0x520>)
 80049fe:	ed93 7b00 	vldr	d7, [r3]
 8004a02:	eeb1 7b47 	vneg.f64	d7, d7
 8004a06:	4b72      	ldr	r3, [pc, #456]	; (8004bd0 <get_Straj+0x520>)
 8004a08:	ed83 7b00 	vstr	d7, [r3]
 8004a0c:	4b71      	ldr	r3, [pc, #452]	; (8004bd4 <get_Straj+0x524>)
 8004a0e:	ed93 7b00 	vldr	d7, [r3]
 8004a12:	eeb1 7b47 	vneg.f64	d7, d7
 8004a16:	4b6f      	ldr	r3, [pc, #444]	; (8004bd4 <get_Straj+0x524>)
 8004a18:	ed83 7b00 	vstr	d7, [r3]
 8004a1c:	4b6e      	ldr	r3, [pc, #440]	; (8004bd8 <get_Straj+0x528>)
 8004a1e:	ed93 7b00 	vldr	d7, [r3]
 8004a22:	eeb1 7b47 	vneg.f64	d7, d7
 8004a26:	4b6c      	ldr	r3, [pc, #432]	; (8004bd8 <get_Straj+0x528>)
 8004a28:	ed83 7b00 	vstr	d7, [r3]
            flagInv = false;
 8004a2c:	4b6b      	ldr	r3, [pc, #428]	; (8004bdc <get_Straj+0x52c>)
 8004a2e:	2200      	movs	r2, #0
 8004a30:	701a      	strb	r2, [r3, #0]
        if (flagInv){
 8004a32:	f000 bcd6 	b.w	80053e2 <get_Straj+0xd32>
        }

    } else if (t>Tj1 && t<=Ta-Tj1){   //b) [Tj1,Ta-Tj1]
 8004a36:	4b5d      	ldr	r3, [pc, #372]	; (8004bac <get_Straj+0x4fc>)
 8004a38:	ed93 7b00 	vldr	d7, [r3]
 8004a3c:	ed97 6b06 	vldr	d6, [r7, #24]
 8004a40:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8004a44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a48:	f340 80ca 	ble.w	8004be0 <get_Straj+0x530>
 8004a4c:	4b5b      	ldr	r3, [pc, #364]	; (8004bbc <get_Straj+0x50c>)
 8004a4e:	ed93 6b00 	vldr	d6, [r3]
 8004a52:	4b56      	ldr	r3, [pc, #344]	; (8004bac <get_Straj+0x4fc>)
 8004a54:	ed93 7b00 	vldr	d7, [r3]
 8004a58:	ee36 7b47 	vsub.f64	d7, d6, d7
 8004a5c:	ed97 6b06 	vldr	d6, [r7, #24]
 8004a60:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8004a64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a68:	f200 80ba 	bhi.w	8004be0 <get_Straj+0x530>
        //printf("tramo2\n");
        q = qi+vi*t+(alima/6)*(3*pow(t,2)-3*Tj1*t+pow(Tj1,2));
 8004a6c:	4b54      	ldr	r3, [pc, #336]	; (8004bc0 <get_Straj+0x510>)
 8004a6e:	ed93 6b00 	vldr	d6, [r3]
 8004a72:	ed97 7b06 	vldr	d7, [r7, #24]
 8004a76:	ee26 6b07 	vmul.f64	d6, d6, d7
 8004a7a:	4b53      	ldr	r3, [pc, #332]	; (8004bc8 <get_Straj+0x518>)
 8004a7c:	ed93 7b00 	vldr	d7, [r3]
 8004a80:	ee36 8b07 	vadd.f64	d8, d6, d7
 8004a84:	4b4a      	ldr	r3, [pc, #296]	; (8004bb0 <get_Straj+0x500>)
 8004a86:	ed93 7b00 	vldr	d7, [r3]
 8004a8a:	eeb1 6b08 	vmov.f64	d6, #24	; 0x40c00000  6.0
 8004a8e:	ee87 9b06 	vdiv.f64	d9, d7, d6
 8004a92:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8004a96:	ed97 0b06 	vldr	d0, [r7, #24]
 8004a9a:	f00c ff21 	bl	80118e0 <pow>
 8004a9e:	eeb0 7b40 	vmov.f64	d7, d0
 8004aa2:	eeb0 6b08 	vmov.f64	d6, #8	; 0x40400000  3.0
 8004aa6:	ee27 6b06 	vmul.f64	d6, d7, d6
 8004aaa:	4b40      	ldr	r3, [pc, #256]	; (8004bac <get_Straj+0x4fc>)
 8004aac:	ed93 7b00 	vldr	d7, [r3]
 8004ab0:	eeb0 5b08 	vmov.f64	d5, #8	; 0x40400000  3.0
 8004ab4:	ee27 5b05 	vmul.f64	d5, d7, d5
 8004ab8:	ed97 7b06 	vldr	d7, [r7, #24]
 8004abc:	ee25 7b07 	vmul.f64	d7, d5, d7
 8004ac0:	ee36 ab47 	vsub.f64	d10, d6, d7
 8004ac4:	4b39      	ldr	r3, [pc, #228]	; (8004bac <get_Straj+0x4fc>)
 8004ac6:	ed93 7b00 	vldr	d7, [r3]
 8004aca:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8004ace:	eeb0 0b47 	vmov.f64	d0, d7
 8004ad2:	f00c ff05 	bl	80118e0 <pow>
 8004ad6:	eeb0 7b40 	vmov.f64	d7, d0
 8004ada:	ee3a 7b07 	vadd.f64	d7, d10, d7
 8004ade:	ee29 7b07 	vmul.f64	d7, d9, d7
 8004ae2:	ee38 7b07 	vadd.f64	d7, d8, d7
 8004ae6:	4b39      	ldr	r3, [pc, #228]	; (8004bcc <get_Straj+0x51c>)
 8004ae8:	ed83 7b00 	vstr	d7, [r3]
        qd = vi+amax*(t-Tj1/2);
 8004aec:	4b2f      	ldr	r3, [pc, #188]	; (8004bac <get_Straj+0x4fc>)
 8004aee:	ed93 6b00 	vldr	d6, [r3]
 8004af2:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8004af6:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8004afa:	ed97 6b06 	vldr	d6, [r7, #24]
 8004afe:	ee36 6b47 	vsub.f64	d6, d6, d7
 8004b02:	4b26      	ldr	r3, [pc, #152]	; (8004b9c <get_Straj+0x4ec>)
 8004b04:	ed93 7b00 	vldr	d7, [r3]
 8004b08:	ee26 6b07 	vmul.f64	d6, d6, d7
 8004b0c:	4b2c      	ldr	r3, [pc, #176]	; (8004bc0 <get_Straj+0x510>)
 8004b0e:	ed93 7b00 	vldr	d7, [r3]
 8004b12:	ee36 7b07 	vadd.f64	d7, d6, d7
 8004b16:	4b2e      	ldr	r3, [pc, #184]	; (8004bd0 <get_Straj+0x520>)
 8004b18:	ed83 7b00 	vstr	d7, [r3]
        qdd = jmax*Tj1;
 8004b1c:	4b1d      	ldr	r3, [pc, #116]	; (8004b94 <get_Straj+0x4e4>)
 8004b1e:	ed93 6b00 	vldr	d6, [r3]
 8004b22:	4b22      	ldr	r3, [pc, #136]	; (8004bac <get_Straj+0x4fc>)
 8004b24:	ed93 7b00 	vldr	d7, [r3]
 8004b28:	ee26 7b07 	vmul.f64	d7, d6, d7
 8004b2c:	4b29      	ldr	r3, [pc, #164]	; (8004bd4 <get_Straj+0x524>)
 8004b2e:	ed83 7b00 	vstr	d7, [r3]
        qddd = 0;
 8004b32:	4929      	ldr	r1, [pc, #164]	; (8004bd8 <get_Straj+0x528>)
 8004b34:	f04f 0200 	mov.w	r2, #0
 8004b38:	f04f 0300 	mov.w	r3, #0
 8004b3c:	e9c1 2300 	strd	r2, r3, [r1]

        if (flagInv){
 8004b40:	4b26      	ldr	r3, [pc, #152]	; (8004bdc <get_Straj+0x52c>)
 8004b42:	781b      	ldrb	r3, [r3, #0]
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	f000 844c 	beq.w	80053e2 <get_Straj+0xd32>
            q=-q; qd=-qd; qdd=-qdd; qddd=-qddd;
 8004b4a:	4b20      	ldr	r3, [pc, #128]	; (8004bcc <get_Straj+0x51c>)
 8004b4c:	ed93 7b00 	vldr	d7, [r3]
 8004b50:	eeb1 7b47 	vneg.f64	d7, d7
 8004b54:	4b1d      	ldr	r3, [pc, #116]	; (8004bcc <get_Straj+0x51c>)
 8004b56:	ed83 7b00 	vstr	d7, [r3]
 8004b5a:	4b1d      	ldr	r3, [pc, #116]	; (8004bd0 <get_Straj+0x520>)
 8004b5c:	ed93 7b00 	vldr	d7, [r3]
 8004b60:	eeb1 7b47 	vneg.f64	d7, d7
 8004b64:	4b1a      	ldr	r3, [pc, #104]	; (8004bd0 <get_Straj+0x520>)
 8004b66:	ed83 7b00 	vstr	d7, [r3]
 8004b6a:	4b1a      	ldr	r3, [pc, #104]	; (8004bd4 <get_Straj+0x524>)
 8004b6c:	ed93 7b00 	vldr	d7, [r3]
 8004b70:	eeb1 7b47 	vneg.f64	d7, d7
 8004b74:	4b17      	ldr	r3, [pc, #92]	; (8004bd4 <get_Straj+0x524>)
 8004b76:	ed83 7b00 	vstr	d7, [r3]
 8004b7a:	4b17      	ldr	r3, [pc, #92]	; (8004bd8 <get_Straj+0x528>)
 8004b7c:	ed93 7b00 	vldr	d7, [r3]
 8004b80:	eeb1 7b47 	vneg.f64	d7, d7
 8004b84:	4b14      	ldr	r3, [pc, #80]	; (8004bd8 <get_Straj+0x528>)
 8004b86:	ed83 7b00 	vstr	d7, [r3]
            flagInv = false;
 8004b8a:	4b14      	ldr	r3, [pc, #80]	; (8004bdc <get_Straj+0x52c>)
 8004b8c:	2200      	movs	r2, #0
 8004b8e:	701a      	strb	r2, [r3, #0]
        if (flagInv){
 8004b90:	f000 bc27 	b.w	80053e2 <get_Straj+0xd32>
 8004b94:	24000008 	.word	0x24000008
 8004b98:	24000480 	.word	0x24000480
 8004b9c:	24000020 	.word	0x24000020
 8004ba0:	24000498 	.word	0x24000498
 8004ba4:	24000010 	.word	0x24000010
 8004ba8:	24000488 	.word	0x24000488
 8004bac:	240008b0 	.word	0x240008b0
 8004bb0:	24000878 	.word	0x24000878
 8004bb4:	240008b8 	.word	0x240008b8
 8004bb8:	24000880 	.word	0x24000880
 8004bbc:	24000898 	.word	0x24000898
 8004bc0:	24000018 	.word	0x24000018
 8004bc4:	24000888 	.word	0x24000888
 8004bc8:	240008d0 	.word	0x240008d0
 8004bcc:	24000460 	.word	0x24000460
 8004bd0:	24000468 	.word	0x24000468
 8004bd4:	24000470 	.word	0x24000470
 8004bd8:	24000478 	.word	0x24000478
 8004bdc:	24000870 	.word	0x24000870
        }

    } else if (t>Ta-Tj1 && t<=Ta){    //c) [Ta-Tj1,Ta]
 8004be0:	4b9c      	ldr	r3, [pc, #624]	; (8004e54 <get_Straj+0x7a4>)
 8004be2:	ed93 6b00 	vldr	d6, [r3]
 8004be6:	4b9c      	ldr	r3, [pc, #624]	; (8004e58 <get_Straj+0x7a8>)
 8004be8:	ed93 7b00 	vldr	d7, [r3]
 8004bec:	ee36 7b47 	vsub.f64	d7, d6, d7
 8004bf0:	ed97 6b06 	vldr	d6, [r7, #24]
 8004bf4:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8004bf8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004bfc:	f340 80ac 	ble.w	8004d58 <get_Straj+0x6a8>
 8004c00:	4b94      	ldr	r3, [pc, #592]	; (8004e54 <get_Straj+0x7a4>)
 8004c02:	ed93 7b00 	vldr	d7, [r3]
 8004c06:	ed97 6b06 	vldr	d6, [r7, #24]
 8004c0a:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8004c0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c12:	f200 80a1 	bhi.w	8004d58 <get_Straj+0x6a8>
        //printf("tramo3\n");
        q = qi+(vlim+vi)*Ta/2-vlim*(Ta-t)-jmin*pow(Ta-t,3)/6;
 8004c16:	4b91      	ldr	r3, [pc, #580]	; (8004e5c <get_Straj+0x7ac>)
 8004c18:	ed93 6b00 	vldr	d6, [r3]
 8004c1c:	4b90      	ldr	r3, [pc, #576]	; (8004e60 <get_Straj+0x7b0>)
 8004c1e:	ed93 7b00 	vldr	d7, [r3]
 8004c22:	ee36 6b07 	vadd.f64	d6, d6, d7
 8004c26:	4b8b      	ldr	r3, [pc, #556]	; (8004e54 <get_Straj+0x7a4>)
 8004c28:	ed93 7b00 	vldr	d7, [r3]
 8004c2c:	ee26 7b07 	vmul.f64	d7, d6, d7
 8004c30:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8004c34:	ee87 6b05 	vdiv.f64	d6, d7, d5
 8004c38:	4b8a      	ldr	r3, [pc, #552]	; (8004e64 <get_Straj+0x7b4>)
 8004c3a:	ed93 7b00 	vldr	d7, [r3]
 8004c3e:	ee36 6b07 	vadd.f64	d6, d6, d7
 8004c42:	4b84      	ldr	r3, [pc, #528]	; (8004e54 <get_Straj+0x7a4>)
 8004c44:	ed93 5b00 	vldr	d5, [r3]
 8004c48:	ed97 7b06 	vldr	d7, [r7, #24]
 8004c4c:	ee35 5b47 	vsub.f64	d5, d5, d7
 8004c50:	4b82      	ldr	r3, [pc, #520]	; (8004e5c <get_Straj+0x7ac>)
 8004c52:	ed93 7b00 	vldr	d7, [r3]
 8004c56:	ee25 7b07 	vmul.f64	d7, d5, d7
 8004c5a:	ee36 8b47 	vsub.f64	d8, d6, d7
 8004c5e:	4b7d      	ldr	r3, [pc, #500]	; (8004e54 <get_Straj+0x7a4>)
 8004c60:	ed93 6b00 	vldr	d6, [r3]
 8004c64:	ed97 7b06 	vldr	d7, [r7, #24]
 8004c68:	ee36 7b47 	vsub.f64	d7, d6, d7
 8004c6c:	eeb0 1b08 	vmov.f64	d1, #8	; 0x40400000  3.0
 8004c70:	eeb0 0b47 	vmov.f64	d0, d7
 8004c74:	f00c fe34 	bl	80118e0 <pow>
 8004c78:	eeb0 6b40 	vmov.f64	d6, d0
 8004c7c:	4b7a      	ldr	r3, [pc, #488]	; (8004e68 <get_Straj+0x7b8>)
 8004c7e:	ed93 7b00 	vldr	d7, [r3]
 8004c82:	ee26 6b07 	vmul.f64	d6, d6, d7
 8004c86:	eeb1 5b08 	vmov.f64	d5, #24	; 0x40c00000  6.0
 8004c8a:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8004c8e:	ee38 7b47 	vsub.f64	d7, d8, d7
 8004c92:	4b76      	ldr	r3, [pc, #472]	; (8004e6c <get_Straj+0x7bc>)
 8004c94:	ed83 7b00 	vstr	d7, [r3]
        qd = vmax+jmin*pow(Ta-t,2)/2;
 8004c98:	4b6e      	ldr	r3, [pc, #440]	; (8004e54 <get_Straj+0x7a4>)
 8004c9a:	ed93 6b00 	vldr	d6, [r3]
 8004c9e:	ed97 7b06 	vldr	d7, [r7, #24]
 8004ca2:	ee36 7b47 	vsub.f64	d7, d6, d7
 8004ca6:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8004caa:	eeb0 0b47 	vmov.f64	d0, d7
 8004cae:	f00c fe17 	bl	80118e0 <pow>
 8004cb2:	eeb0 6b40 	vmov.f64	d6, d0
 8004cb6:	4b6c      	ldr	r3, [pc, #432]	; (8004e68 <get_Straj+0x7b8>)
 8004cb8:	ed93 7b00 	vldr	d7, [r3]
 8004cbc:	ee26 7b07 	vmul.f64	d7, d6, d7
 8004cc0:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8004cc4:	ee87 6b05 	vdiv.f64	d6, d7, d5
 8004cc8:	4b69      	ldr	r3, [pc, #420]	; (8004e70 <get_Straj+0x7c0>)
 8004cca:	ed93 7b00 	vldr	d7, [r3]
 8004cce:	ee36 7b07 	vadd.f64	d7, d6, d7
 8004cd2:	4b68      	ldr	r3, [pc, #416]	; (8004e74 <get_Straj+0x7c4>)
 8004cd4:	ed83 7b00 	vstr	d7, [r3]
        qdd = -jmin*(Ta-t);
 8004cd8:	4b63      	ldr	r3, [pc, #396]	; (8004e68 <get_Straj+0x7b8>)
 8004cda:	ed93 7b00 	vldr	d7, [r3]
 8004cde:	eeb1 6b47 	vneg.f64	d6, d7
 8004ce2:	4b5c      	ldr	r3, [pc, #368]	; (8004e54 <get_Straj+0x7a4>)
 8004ce4:	ed93 5b00 	vldr	d5, [r3]
 8004ce8:	ed97 7b06 	vldr	d7, [r7, #24]
 8004cec:	ee35 7b47 	vsub.f64	d7, d5, d7
 8004cf0:	ee26 7b07 	vmul.f64	d7, d6, d7
 8004cf4:	4b60      	ldr	r3, [pc, #384]	; (8004e78 <get_Straj+0x7c8>)
 8004cf6:	ed83 7b00 	vstr	d7, [r3]
        qddd = jmin;
 8004cfa:	4b5b      	ldr	r3, [pc, #364]	; (8004e68 <get_Straj+0x7b8>)
 8004cfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d00:	495e      	ldr	r1, [pc, #376]	; (8004e7c <get_Straj+0x7cc>)
 8004d02:	e9c1 2300 	strd	r2, r3, [r1]
        if (flagInv){
 8004d06:	4b5e      	ldr	r3, [pc, #376]	; (8004e80 <get_Straj+0x7d0>)
 8004d08:	781b      	ldrb	r3, [r3, #0]
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	f000 8369 	beq.w	80053e2 <get_Straj+0xd32>
            q=-q; qd=-qd; qdd=-qdd; qddd=-qddd;
 8004d10:	4b56      	ldr	r3, [pc, #344]	; (8004e6c <get_Straj+0x7bc>)
 8004d12:	ed93 7b00 	vldr	d7, [r3]
 8004d16:	eeb1 7b47 	vneg.f64	d7, d7
 8004d1a:	4b54      	ldr	r3, [pc, #336]	; (8004e6c <get_Straj+0x7bc>)
 8004d1c:	ed83 7b00 	vstr	d7, [r3]
 8004d20:	4b54      	ldr	r3, [pc, #336]	; (8004e74 <get_Straj+0x7c4>)
 8004d22:	ed93 7b00 	vldr	d7, [r3]
 8004d26:	eeb1 7b47 	vneg.f64	d7, d7
 8004d2a:	4b52      	ldr	r3, [pc, #328]	; (8004e74 <get_Straj+0x7c4>)
 8004d2c:	ed83 7b00 	vstr	d7, [r3]
 8004d30:	4b51      	ldr	r3, [pc, #324]	; (8004e78 <get_Straj+0x7c8>)
 8004d32:	ed93 7b00 	vldr	d7, [r3]
 8004d36:	eeb1 7b47 	vneg.f64	d7, d7
 8004d3a:	4b4f      	ldr	r3, [pc, #316]	; (8004e78 <get_Straj+0x7c8>)
 8004d3c:	ed83 7b00 	vstr	d7, [r3]
 8004d40:	4b4e      	ldr	r3, [pc, #312]	; (8004e7c <get_Straj+0x7cc>)
 8004d42:	ed93 7b00 	vldr	d7, [r3]
 8004d46:	eeb1 7b47 	vneg.f64	d7, d7
 8004d4a:	4b4c      	ldr	r3, [pc, #304]	; (8004e7c <get_Straj+0x7cc>)
 8004d4c:	ed83 7b00 	vstr	d7, [r3]
            flagInv = false;
 8004d50:	4b4b      	ldr	r3, [pc, #300]	; (8004e80 <get_Straj+0x7d0>)
 8004d52:	2200      	movs	r2, #0
 8004d54:	701a      	strb	r2, [r3, #0]
        if (flagInv){
 8004d56:	e344      	b.n	80053e2 <get_Straj+0xd32>
        }
    }

    /*-------------Constant phase ----------------*/
    else if (t>Ta && t<=Ta+Tv){
 8004d58:	4b3e      	ldr	r3, [pc, #248]	; (8004e54 <get_Straj+0x7a4>)
 8004d5a:	ed93 7b00 	vldr	d7, [r3]
 8004d5e:	ed97 6b06 	vldr	d6, [r7, #24]
 8004d62:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8004d66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004d6a:	f340 808d 	ble.w	8004e88 <get_Straj+0x7d8>
 8004d6e:	4b39      	ldr	r3, [pc, #228]	; (8004e54 <get_Straj+0x7a4>)
 8004d70:	ed93 6b00 	vldr	d6, [r3]
 8004d74:	4b43      	ldr	r3, [pc, #268]	; (8004e84 <get_Straj+0x7d4>)
 8004d76:	ed93 7b00 	vldr	d7, [r3]
 8004d7a:	ee36 7b07 	vadd.f64	d7, d6, d7
 8004d7e:	ed97 6b06 	vldr	d6, [r7, #24]
 8004d82:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8004d86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004d8a:	d87d      	bhi.n	8004e88 <get_Straj+0x7d8>
        //printf("tramo4\n");
        q = qi+(vlim+vi)*Ta/2+vlim*(t-Ta);
 8004d8c:	4b33      	ldr	r3, [pc, #204]	; (8004e5c <get_Straj+0x7ac>)
 8004d8e:	ed93 6b00 	vldr	d6, [r3]
 8004d92:	4b33      	ldr	r3, [pc, #204]	; (8004e60 <get_Straj+0x7b0>)
 8004d94:	ed93 7b00 	vldr	d7, [r3]
 8004d98:	ee36 6b07 	vadd.f64	d6, d6, d7
 8004d9c:	4b2d      	ldr	r3, [pc, #180]	; (8004e54 <get_Straj+0x7a4>)
 8004d9e:	ed93 7b00 	vldr	d7, [r3]
 8004da2:	ee26 7b07 	vmul.f64	d7, d6, d7
 8004da6:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8004daa:	ee87 6b05 	vdiv.f64	d6, d7, d5
 8004dae:	4b2d      	ldr	r3, [pc, #180]	; (8004e64 <get_Straj+0x7b4>)
 8004db0:	ed93 7b00 	vldr	d7, [r3]
 8004db4:	ee36 6b07 	vadd.f64	d6, d6, d7
 8004db8:	4b26      	ldr	r3, [pc, #152]	; (8004e54 <get_Straj+0x7a4>)
 8004dba:	ed93 7b00 	vldr	d7, [r3]
 8004dbe:	ed97 5b06 	vldr	d5, [r7, #24]
 8004dc2:	ee35 5b47 	vsub.f64	d5, d5, d7
 8004dc6:	4b25      	ldr	r3, [pc, #148]	; (8004e5c <get_Straj+0x7ac>)
 8004dc8:	ed93 7b00 	vldr	d7, [r3]
 8004dcc:	ee25 7b07 	vmul.f64	d7, d5, d7
 8004dd0:	ee36 7b07 	vadd.f64	d7, d6, d7
 8004dd4:	4b25      	ldr	r3, [pc, #148]	; (8004e6c <get_Straj+0x7bc>)
 8004dd6:	ed83 7b00 	vstr	d7, [r3]
        qd = vmax;
 8004dda:	4b25      	ldr	r3, [pc, #148]	; (8004e70 <get_Straj+0x7c0>)
 8004ddc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004de0:	4924      	ldr	r1, [pc, #144]	; (8004e74 <get_Straj+0x7c4>)
 8004de2:	e9c1 2300 	strd	r2, r3, [r1]
        qdd = 0;
 8004de6:	4924      	ldr	r1, [pc, #144]	; (8004e78 <get_Straj+0x7c8>)
 8004de8:	f04f 0200 	mov.w	r2, #0
 8004dec:	f04f 0300 	mov.w	r3, #0
 8004df0:	e9c1 2300 	strd	r2, r3, [r1]
        qddd = 0;
 8004df4:	4921      	ldr	r1, [pc, #132]	; (8004e7c <get_Straj+0x7cc>)
 8004df6:	f04f 0200 	mov.w	r2, #0
 8004dfa:	f04f 0300 	mov.w	r3, #0
 8004dfe:	e9c1 2300 	strd	r2, r3, [r1]
        if (flagInv){
 8004e02:	4b1f      	ldr	r3, [pc, #124]	; (8004e80 <get_Straj+0x7d0>)
 8004e04:	781b      	ldrb	r3, [r3, #0]
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	f000 82eb 	beq.w	80053e2 <get_Straj+0xd32>
            q=-q; qd=-qd; qdd=-qdd; qddd=-qddd;
 8004e0c:	4b17      	ldr	r3, [pc, #92]	; (8004e6c <get_Straj+0x7bc>)
 8004e0e:	ed93 7b00 	vldr	d7, [r3]
 8004e12:	eeb1 7b47 	vneg.f64	d7, d7
 8004e16:	4b15      	ldr	r3, [pc, #84]	; (8004e6c <get_Straj+0x7bc>)
 8004e18:	ed83 7b00 	vstr	d7, [r3]
 8004e1c:	4b15      	ldr	r3, [pc, #84]	; (8004e74 <get_Straj+0x7c4>)
 8004e1e:	ed93 7b00 	vldr	d7, [r3]
 8004e22:	eeb1 7b47 	vneg.f64	d7, d7
 8004e26:	4b13      	ldr	r3, [pc, #76]	; (8004e74 <get_Straj+0x7c4>)
 8004e28:	ed83 7b00 	vstr	d7, [r3]
 8004e2c:	4b12      	ldr	r3, [pc, #72]	; (8004e78 <get_Straj+0x7c8>)
 8004e2e:	ed93 7b00 	vldr	d7, [r3]
 8004e32:	eeb1 7b47 	vneg.f64	d7, d7
 8004e36:	4b10      	ldr	r3, [pc, #64]	; (8004e78 <get_Straj+0x7c8>)
 8004e38:	ed83 7b00 	vstr	d7, [r3]
 8004e3c:	4b0f      	ldr	r3, [pc, #60]	; (8004e7c <get_Straj+0x7cc>)
 8004e3e:	ed93 7b00 	vldr	d7, [r3]
 8004e42:	eeb1 7b47 	vneg.f64	d7, d7
 8004e46:	4b0d      	ldr	r3, [pc, #52]	; (8004e7c <get_Straj+0x7cc>)
 8004e48:	ed83 7b00 	vstr	d7, [r3]
            flagInv = false;
 8004e4c:	4b0c      	ldr	r3, [pc, #48]	; (8004e80 <get_Straj+0x7d0>)
 8004e4e:	2200      	movs	r2, #0
 8004e50:	701a      	strb	r2, [r3, #0]
        if (flagInv){
 8004e52:	e2c6      	b.n	80053e2 <get_Straj+0xd32>
 8004e54:	24000898 	.word	0x24000898
 8004e58:	240008b0 	.word	0x240008b0
 8004e5c:	24000888 	.word	0x24000888
 8004e60:	24000018 	.word	0x24000018
 8004e64:	240008d0 	.word	0x240008d0
 8004e68:	24000480 	.word	0x24000480
 8004e6c:	24000460 	.word	0x24000460
 8004e70:	24000010 	.word	0x24000010
 8004e74:	24000468 	.word	0x24000468
 8004e78:	24000470 	.word	0x24000470
 8004e7c:	24000478 	.word	0x24000478
 8004e80:	24000870 	.word	0x24000870
 8004e84:	240008a8 	.word	0x240008a8
        }
    }
    /*-------------Dese phase ----------------*/

    else if (t>=T-Td && t<=T-Td+Tj2){
 8004e88:	4b6c      	ldr	r3, [pc, #432]	; (800503c <get_Straj+0x98c>)
 8004e8a:	ed93 6b00 	vldr	d6, [r3]
 8004e8e:	4b6c      	ldr	r3, [pc, #432]	; (8005040 <get_Straj+0x990>)
 8004e90:	ed93 7b00 	vldr	d7, [r3]
 8004e94:	ee36 7b47 	vsub.f64	d7, d6, d7
 8004e98:	ed97 6b06 	vldr	d6, [r7, #24]
 8004e9c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8004ea0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004ea4:	f2c0 80e4 	blt.w	8005070 <get_Straj+0x9c0>
 8004ea8:	4b64      	ldr	r3, [pc, #400]	; (800503c <get_Straj+0x98c>)
 8004eaa:	ed93 6b00 	vldr	d6, [r3]
 8004eae:	4b64      	ldr	r3, [pc, #400]	; (8005040 <get_Straj+0x990>)
 8004eb0:	ed93 7b00 	vldr	d7, [r3]
 8004eb4:	ee36 6b47 	vsub.f64	d6, d6, d7
 8004eb8:	4b62      	ldr	r3, [pc, #392]	; (8005044 <get_Straj+0x994>)
 8004eba:	ed93 7b00 	vldr	d7, [r3]
 8004ebe:	ee36 7b07 	vadd.f64	d7, d6, d7
 8004ec2:	ed97 6b06 	vldr	d6, [r7, #24]
 8004ec6:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8004eca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004ece:	f200 80cf 	bhi.w	8005070 <get_Straj+0x9c0>
        //printf("tramo5\n");
        q=qf-(vlim+vf)*Td/2+vlim*(t-T+Td)-jmax*(pow(t-T+Td,3)/6);
 8004ed2:	4b5d      	ldr	r3, [pc, #372]	; (8005048 <get_Straj+0x998>)
 8004ed4:	ed93 6b00 	vldr	d6, [r3]
 8004ed8:	4b5c      	ldr	r3, [pc, #368]	; (800504c <get_Straj+0x99c>)
 8004eda:	ed93 5b00 	vldr	d5, [r3]
 8004ede:	4b5c      	ldr	r3, [pc, #368]	; (8005050 <get_Straj+0x9a0>)
 8004ee0:	ed93 7b00 	vldr	d7, [r3]
 8004ee4:	ee35 5b07 	vadd.f64	d5, d5, d7
 8004ee8:	4b55      	ldr	r3, [pc, #340]	; (8005040 <get_Straj+0x990>)
 8004eea:	ed93 7b00 	vldr	d7, [r3]
 8004eee:	ee25 5b07 	vmul.f64	d5, d5, d7
 8004ef2:	eeb0 4b00 	vmov.f64	d4, #0	; 0x40000000  2.0
 8004ef6:	ee85 7b04 	vdiv.f64	d7, d5, d4
 8004efa:	ee36 6b47 	vsub.f64	d6, d6, d7
 8004efe:	4b4f      	ldr	r3, [pc, #316]	; (800503c <get_Straj+0x98c>)
 8004f00:	ed93 7b00 	vldr	d7, [r3]
 8004f04:	ed97 5b06 	vldr	d5, [r7, #24]
 8004f08:	ee35 5b47 	vsub.f64	d5, d5, d7
 8004f0c:	4b4c      	ldr	r3, [pc, #304]	; (8005040 <get_Straj+0x990>)
 8004f0e:	ed93 7b00 	vldr	d7, [r3]
 8004f12:	ee35 5b07 	vadd.f64	d5, d5, d7
 8004f16:	4b4d      	ldr	r3, [pc, #308]	; (800504c <get_Straj+0x99c>)
 8004f18:	ed93 7b00 	vldr	d7, [r3]
 8004f1c:	ee25 7b07 	vmul.f64	d7, d5, d7
 8004f20:	ee36 8b07 	vadd.f64	d8, d6, d7
 8004f24:	4b45      	ldr	r3, [pc, #276]	; (800503c <get_Straj+0x98c>)
 8004f26:	ed93 7b00 	vldr	d7, [r3]
 8004f2a:	ed97 6b06 	vldr	d6, [r7, #24]
 8004f2e:	ee36 6b47 	vsub.f64	d6, d6, d7
 8004f32:	4b43      	ldr	r3, [pc, #268]	; (8005040 <get_Straj+0x990>)
 8004f34:	ed93 7b00 	vldr	d7, [r3]
 8004f38:	ee36 7b07 	vadd.f64	d7, d6, d7
 8004f3c:	eeb0 1b08 	vmov.f64	d1, #8	; 0x40400000  3.0
 8004f40:	eeb0 0b47 	vmov.f64	d0, d7
 8004f44:	f00c fccc 	bl	80118e0 <pow>
 8004f48:	eeb0 7b40 	vmov.f64	d7, d0
 8004f4c:	eeb1 5b08 	vmov.f64	d5, #24	; 0x40c00000  6.0
 8004f50:	ee87 6b05 	vdiv.f64	d6, d7, d5
 8004f54:	4b3f      	ldr	r3, [pc, #252]	; (8005054 <get_Straj+0x9a4>)
 8004f56:	ed93 7b00 	vldr	d7, [r3]
 8004f5a:	ee26 7b07 	vmul.f64	d7, d6, d7
 8004f5e:	ee38 7b47 	vsub.f64	d7, d8, d7
 8004f62:	4b3d      	ldr	r3, [pc, #244]	; (8005058 <get_Straj+0x9a8>)
 8004f64:	ed83 7b00 	vstr	d7, [r3]
        qd=vlim-jmax*(pow(t-T+Td,2)/2);
 8004f68:	4b38      	ldr	r3, [pc, #224]	; (800504c <get_Straj+0x99c>)
 8004f6a:	ed93 8b00 	vldr	d8, [r3]
 8004f6e:	4b33      	ldr	r3, [pc, #204]	; (800503c <get_Straj+0x98c>)
 8004f70:	ed93 7b00 	vldr	d7, [r3]
 8004f74:	ed97 6b06 	vldr	d6, [r7, #24]
 8004f78:	ee36 6b47 	vsub.f64	d6, d6, d7
 8004f7c:	4b30      	ldr	r3, [pc, #192]	; (8005040 <get_Straj+0x990>)
 8004f7e:	ed93 7b00 	vldr	d7, [r3]
 8004f82:	ee36 7b07 	vadd.f64	d7, d6, d7
 8004f86:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8004f8a:	eeb0 0b47 	vmov.f64	d0, d7
 8004f8e:	f00c fca7 	bl	80118e0 <pow>
 8004f92:	eeb0 7b40 	vmov.f64	d7, d0
 8004f96:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8004f9a:	ee87 6b05 	vdiv.f64	d6, d7, d5
 8004f9e:	4b2d      	ldr	r3, [pc, #180]	; (8005054 <get_Straj+0x9a4>)
 8004fa0:	ed93 7b00 	vldr	d7, [r3]
 8004fa4:	ee26 7b07 	vmul.f64	d7, d6, d7
 8004fa8:	ee38 7b47 	vsub.f64	d7, d8, d7
 8004fac:	4b2b      	ldr	r3, [pc, #172]	; (800505c <get_Straj+0x9ac>)
 8004fae:	ed83 7b00 	vstr	d7, [r3]
        qdd=-jmax*(t-T+Td);
 8004fb2:	4b28      	ldr	r3, [pc, #160]	; (8005054 <get_Straj+0x9a4>)
 8004fb4:	ed93 7b00 	vldr	d7, [r3]
 8004fb8:	eeb1 6b47 	vneg.f64	d6, d7
 8004fbc:	4b1f      	ldr	r3, [pc, #124]	; (800503c <get_Straj+0x98c>)
 8004fbe:	ed93 7b00 	vldr	d7, [r3]
 8004fc2:	ed97 5b06 	vldr	d5, [r7, #24]
 8004fc6:	ee35 5b47 	vsub.f64	d5, d5, d7
 8004fca:	4b1d      	ldr	r3, [pc, #116]	; (8005040 <get_Straj+0x990>)
 8004fcc:	ed93 7b00 	vldr	d7, [r3]
 8004fd0:	ee35 7b07 	vadd.f64	d7, d5, d7
 8004fd4:	ee26 7b07 	vmul.f64	d7, d6, d7
 8004fd8:	4b21      	ldr	r3, [pc, #132]	; (8005060 <get_Straj+0x9b0>)
 8004fda:	ed83 7b00 	vstr	d7, [r3]
        qddd=jmin;
 8004fde:	4b21      	ldr	r3, [pc, #132]	; (8005064 <get_Straj+0x9b4>)
 8004fe0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fe4:	4920      	ldr	r1, [pc, #128]	; (8005068 <get_Straj+0x9b8>)
 8004fe6:	e9c1 2300 	strd	r2, r3, [r1]
        if (flagInv){
 8004fea:	4b20      	ldr	r3, [pc, #128]	; (800506c <get_Straj+0x9bc>)
 8004fec:	781b      	ldrb	r3, [r3, #0]
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	f000 81f7 	beq.w	80053e2 <get_Straj+0xd32>
            q=-q; qd=-qd; qdd=-qdd; qddd=-qddd;
 8004ff4:	4b18      	ldr	r3, [pc, #96]	; (8005058 <get_Straj+0x9a8>)
 8004ff6:	ed93 7b00 	vldr	d7, [r3]
 8004ffa:	eeb1 7b47 	vneg.f64	d7, d7
 8004ffe:	4b16      	ldr	r3, [pc, #88]	; (8005058 <get_Straj+0x9a8>)
 8005000:	ed83 7b00 	vstr	d7, [r3]
 8005004:	4b15      	ldr	r3, [pc, #84]	; (800505c <get_Straj+0x9ac>)
 8005006:	ed93 7b00 	vldr	d7, [r3]
 800500a:	eeb1 7b47 	vneg.f64	d7, d7
 800500e:	4b13      	ldr	r3, [pc, #76]	; (800505c <get_Straj+0x9ac>)
 8005010:	ed83 7b00 	vstr	d7, [r3]
 8005014:	4b12      	ldr	r3, [pc, #72]	; (8005060 <get_Straj+0x9b0>)
 8005016:	ed93 7b00 	vldr	d7, [r3]
 800501a:	eeb1 7b47 	vneg.f64	d7, d7
 800501e:	4b10      	ldr	r3, [pc, #64]	; (8005060 <get_Straj+0x9b0>)
 8005020:	ed83 7b00 	vstr	d7, [r3]
 8005024:	4b10      	ldr	r3, [pc, #64]	; (8005068 <get_Straj+0x9b8>)
 8005026:	ed93 7b00 	vldr	d7, [r3]
 800502a:	eeb1 7b47 	vneg.f64	d7, d7
 800502e:	4b0e      	ldr	r3, [pc, #56]	; (8005068 <get_Straj+0x9b8>)
 8005030:	ed83 7b00 	vstr	d7, [r3]
            flagInv = false;
 8005034:	4b0d      	ldr	r3, [pc, #52]	; (800506c <get_Straj+0x9bc>)
 8005036:	2200      	movs	r2, #0
 8005038:	701a      	strb	r2, [r3, #0]
        if (flagInv){
 800503a:	e1d2      	b.n	80053e2 <get_Straj+0xd32>
 800503c:	24000890 	.word	0x24000890
 8005040:	240008a0 	.word	0x240008a0
 8005044:	240008b8 	.word	0x240008b8
 8005048:	240008d8 	.word	0x240008d8
 800504c:	24000888 	.word	0x24000888
 8005050:	24000490 	.word	0x24000490
 8005054:	24000008 	.word	0x24000008
 8005058:	24000460 	.word	0x24000460
 800505c:	24000468 	.word	0x24000468
 8005060:	24000470 	.word	0x24000470
 8005064:	24000480 	.word	0x24000480
 8005068:	24000478 	.word	0x24000478
 800506c:	24000870 	.word	0x24000870
        }
    } else if (t>T-Td+Tj2 && t<=T-Tj2){
 8005070:	4b7b      	ldr	r3, [pc, #492]	; (8005260 <get_Straj+0xbb0>)
 8005072:	ed93 6b00 	vldr	d6, [r3]
 8005076:	4b7b      	ldr	r3, [pc, #492]	; (8005264 <get_Straj+0xbb4>)
 8005078:	ed93 7b00 	vldr	d7, [r3]
 800507c:	ee36 6b47 	vsub.f64	d6, d6, d7
 8005080:	4b79      	ldr	r3, [pc, #484]	; (8005268 <get_Straj+0xbb8>)
 8005082:	ed93 7b00 	vldr	d7, [r3]
 8005086:	ee36 7b07 	vadd.f64	d7, d6, d7
 800508a:	ed97 6b06 	vldr	d6, [r7, #24]
 800508e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8005092:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005096:	f340 80fd 	ble.w	8005294 <get_Straj+0xbe4>
 800509a:	4b71      	ldr	r3, [pc, #452]	; (8005260 <get_Straj+0xbb0>)
 800509c:	ed93 6b00 	vldr	d6, [r3]
 80050a0:	4b71      	ldr	r3, [pc, #452]	; (8005268 <get_Straj+0xbb8>)
 80050a2:	ed93 7b00 	vldr	d7, [r3]
 80050a6:	ee36 7b47 	vsub.f64	d7, d6, d7
 80050aa:	ed97 6b06 	vldr	d6, [r7, #24]
 80050ae:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80050b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80050b6:	f200 80ed 	bhi.w	8005294 <get_Straj+0xbe4>
        //printf("tramo6\n");
        q=qf-(vlim+vf)*Td/2+vlim*(t-T+Td)+(alimd/6)*(3*pow(t-T+Td,2)-3*Tj2*(t-T+Td)+pow(Tj2,2));
 80050ba:	4b6c      	ldr	r3, [pc, #432]	; (800526c <get_Straj+0xbbc>)
 80050bc:	ed93 6b00 	vldr	d6, [r3]
 80050c0:	4b6b      	ldr	r3, [pc, #428]	; (8005270 <get_Straj+0xbc0>)
 80050c2:	ed93 5b00 	vldr	d5, [r3]
 80050c6:	4b6b      	ldr	r3, [pc, #428]	; (8005274 <get_Straj+0xbc4>)
 80050c8:	ed93 7b00 	vldr	d7, [r3]
 80050cc:	ee35 5b07 	vadd.f64	d5, d5, d7
 80050d0:	4b64      	ldr	r3, [pc, #400]	; (8005264 <get_Straj+0xbb4>)
 80050d2:	ed93 7b00 	vldr	d7, [r3]
 80050d6:	ee25 5b07 	vmul.f64	d5, d5, d7
 80050da:	eeb0 4b00 	vmov.f64	d4, #0	; 0x40000000  2.0
 80050de:	ee85 7b04 	vdiv.f64	d7, d5, d4
 80050e2:	ee36 6b47 	vsub.f64	d6, d6, d7
 80050e6:	4b5e      	ldr	r3, [pc, #376]	; (8005260 <get_Straj+0xbb0>)
 80050e8:	ed93 7b00 	vldr	d7, [r3]
 80050ec:	ed97 5b06 	vldr	d5, [r7, #24]
 80050f0:	ee35 5b47 	vsub.f64	d5, d5, d7
 80050f4:	4b5b      	ldr	r3, [pc, #364]	; (8005264 <get_Straj+0xbb4>)
 80050f6:	ed93 7b00 	vldr	d7, [r3]
 80050fa:	ee35 5b07 	vadd.f64	d5, d5, d7
 80050fe:	4b5c      	ldr	r3, [pc, #368]	; (8005270 <get_Straj+0xbc0>)
 8005100:	ed93 7b00 	vldr	d7, [r3]
 8005104:	ee25 7b07 	vmul.f64	d7, d5, d7
 8005108:	ee36 8b07 	vadd.f64	d8, d6, d7
 800510c:	4b5a      	ldr	r3, [pc, #360]	; (8005278 <get_Straj+0xbc8>)
 800510e:	ed93 7b00 	vldr	d7, [r3]
 8005112:	eeb1 6b08 	vmov.f64	d6, #24	; 0x40c00000  6.0
 8005116:	ee87 9b06 	vdiv.f64	d9, d7, d6
 800511a:	4b51      	ldr	r3, [pc, #324]	; (8005260 <get_Straj+0xbb0>)
 800511c:	ed93 7b00 	vldr	d7, [r3]
 8005120:	ed97 6b06 	vldr	d6, [r7, #24]
 8005124:	ee36 6b47 	vsub.f64	d6, d6, d7
 8005128:	4b4e      	ldr	r3, [pc, #312]	; (8005264 <get_Straj+0xbb4>)
 800512a:	ed93 7b00 	vldr	d7, [r3]
 800512e:	ee36 7b07 	vadd.f64	d7, d6, d7
 8005132:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8005136:	eeb0 0b47 	vmov.f64	d0, d7
 800513a:	f00c fbd1 	bl	80118e0 <pow>
 800513e:	eeb0 7b40 	vmov.f64	d7, d0
 8005142:	eeb0 6b08 	vmov.f64	d6, #8	; 0x40400000  3.0
 8005146:	ee27 6b06 	vmul.f64	d6, d7, d6
 800514a:	4b47      	ldr	r3, [pc, #284]	; (8005268 <get_Straj+0xbb8>)
 800514c:	ed93 7b00 	vldr	d7, [r3]
 8005150:	eeb0 5b08 	vmov.f64	d5, #8	; 0x40400000  3.0
 8005154:	ee27 5b05 	vmul.f64	d5, d7, d5
 8005158:	4b41      	ldr	r3, [pc, #260]	; (8005260 <get_Straj+0xbb0>)
 800515a:	ed93 7b00 	vldr	d7, [r3]
 800515e:	ed97 4b06 	vldr	d4, [r7, #24]
 8005162:	ee34 4b47 	vsub.f64	d4, d4, d7
 8005166:	4b3f      	ldr	r3, [pc, #252]	; (8005264 <get_Straj+0xbb4>)
 8005168:	ed93 7b00 	vldr	d7, [r3]
 800516c:	ee34 7b07 	vadd.f64	d7, d4, d7
 8005170:	ee25 7b07 	vmul.f64	d7, d5, d7
 8005174:	ee36 ab47 	vsub.f64	d10, d6, d7
 8005178:	4b3b      	ldr	r3, [pc, #236]	; (8005268 <get_Straj+0xbb8>)
 800517a:	ed93 7b00 	vldr	d7, [r3]
 800517e:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8005182:	eeb0 0b47 	vmov.f64	d0, d7
 8005186:	f00c fbab 	bl	80118e0 <pow>
 800518a:	eeb0 7b40 	vmov.f64	d7, d0
 800518e:	ee3a 7b07 	vadd.f64	d7, d10, d7
 8005192:	ee29 7b07 	vmul.f64	d7, d9, d7
 8005196:	ee38 7b07 	vadd.f64	d7, d8, d7
 800519a:	4b38      	ldr	r3, [pc, #224]	; (800527c <get_Straj+0xbcc>)
 800519c:	ed83 7b00 	vstr	d7, [r3]
        qd=vlim+alimd*(t-T+Td-Tj2/2);
 80051a0:	4b2f      	ldr	r3, [pc, #188]	; (8005260 <get_Straj+0xbb0>)
 80051a2:	ed93 7b00 	vldr	d7, [r3]
 80051a6:	ed97 6b06 	vldr	d6, [r7, #24]
 80051aa:	ee36 6b47 	vsub.f64	d6, d6, d7
 80051ae:	4b2d      	ldr	r3, [pc, #180]	; (8005264 <get_Straj+0xbb4>)
 80051b0:	ed93 7b00 	vldr	d7, [r3]
 80051b4:	ee36 6b07 	vadd.f64	d6, d6, d7
 80051b8:	4b2b      	ldr	r3, [pc, #172]	; (8005268 <get_Straj+0xbb8>)
 80051ba:	ed93 5b00 	vldr	d5, [r3]
 80051be:	eeb0 4b00 	vmov.f64	d4, #0	; 0x40000000  2.0
 80051c2:	ee85 7b04 	vdiv.f64	d7, d5, d4
 80051c6:	ee36 6b47 	vsub.f64	d6, d6, d7
 80051ca:	4b2b      	ldr	r3, [pc, #172]	; (8005278 <get_Straj+0xbc8>)
 80051cc:	ed93 7b00 	vldr	d7, [r3]
 80051d0:	ee26 6b07 	vmul.f64	d6, d6, d7
 80051d4:	4b26      	ldr	r3, [pc, #152]	; (8005270 <get_Straj+0xbc0>)
 80051d6:	ed93 7b00 	vldr	d7, [r3]
 80051da:	ee36 7b07 	vadd.f64	d7, d6, d7
 80051de:	4b28      	ldr	r3, [pc, #160]	; (8005280 <get_Straj+0xbd0>)
 80051e0:	ed83 7b00 	vstr	d7, [r3]
        qdd = -jmax*Tj2;
 80051e4:	4b27      	ldr	r3, [pc, #156]	; (8005284 <get_Straj+0xbd4>)
 80051e6:	ed93 7b00 	vldr	d7, [r3]
 80051ea:	eeb1 6b47 	vneg.f64	d6, d7
 80051ee:	4b1e      	ldr	r3, [pc, #120]	; (8005268 <get_Straj+0xbb8>)
 80051f0:	ed93 7b00 	vldr	d7, [r3]
 80051f4:	ee26 7b07 	vmul.f64	d7, d6, d7
 80051f8:	4b23      	ldr	r3, [pc, #140]	; (8005288 <get_Straj+0xbd8>)
 80051fa:	ed83 7b00 	vstr	d7, [r3]
        qddd = 0;
 80051fe:	4923      	ldr	r1, [pc, #140]	; (800528c <get_Straj+0xbdc>)
 8005200:	f04f 0200 	mov.w	r2, #0
 8005204:	f04f 0300 	mov.w	r3, #0
 8005208:	e9c1 2300 	strd	r2, r3, [r1]
        if (flagInv){
 800520c:	4b20      	ldr	r3, [pc, #128]	; (8005290 <get_Straj+0xbe0>)
 800520e:	781b      	ldrb	r3, [r3, #0]
 8005210:	2b00      	cmp	r3, #0
 8005212:	f000 80e6 	beq.w	80053e2 <get_Straj+0xd32>
            q=-q; qd=-qd; qdd=-qdd; qddd=-qddd;
 8005216:	4b19      	ldr	r3, [pc, #100]	; (800527c <get_Straj+0xbcc>)
 8005218:	ed93 7b00 	vldr	d7, [r3]
 800521c:	eeb1 7b47 	vneg.f64	d7, d7
 8005220:	4b16      	ldr	r3, [pc, #88]	; (800527c <get_Straj+0xbcc>)
 8005222:	ed83 7b00 	vstr	d7, [r3]
 8005226:	4b16      	ldr	r3, [pc, #88]	; (8005280 <get_Straj+0xbd0>)
 8005228:	ed93 7b00 	vldr	d7, [r3]
 800522c:	eeb1 7b47 	vneg.f64	d7, d7
 8005230:	4b13      	ldr	r3, [pc, #76]	; (8005280 <get_Straj+0xbd0>)
 8005232:	ed83 7b00 	vstr	d7, [r3]
 8005236:	4b14      	ldr	r3, [pc, #80]	; (8005288 <get_Straj+0xbd8>)
 8005238:	ed93 7b00 	vldr	d7, [r3]
 800523c:	eeb1 7b47 	vneg.f64	d7, d7
 8005240:	4b11      	ldr	r3, [pc, #68]	; (8005288 <get_Straj+0xbd8>)
 8005242:	ed83 7b00 	vstr	d7, [r3]
 8005246:	4b11      	ldr	r3, [pc, #68]	; (800528c <get_Straj+0xbdc>)
 8005248:	ed93 7b00 	vldr	d7, [r3]
 800524c:	eeb1 7b47 	vneg.f64	d7, d7
 8005250:	4b0e      	ldr	r3, [pc, #56]	; (800528c <get_Straj+0xbdc>)
 8005252:	ed83 7b00 	vstr	d7, [r3]
            flagInv = false;
 8005256:	4b0e      	ldr	r3, [pc, #56]	; (8005290 <get_Straj+0xbe0>)
 8005258:	2200      	movs	r2, #0
 800525a:	701a      	strb	r2, [r3, #0]
        if (flagInv){
 800525c:	e0c1      	b.n	80053e2 <get_Straj+0xd32>
 800525e:	bf00      	nop
 8005260:	24000890 	.word	0x24000890
 8005264:	240008a0 	.word	0x240008a0
 8005268:	240008b8 	.word	0x240008b8
 800526c:	240008d8 	.word	0x240008d8
 8005270:	24000888 	.word	0x24000888
 8005274:	24000490 	.word	0x24000490
 8005278:	24000880 	.word	0x24000880
 800527c:	24000460 	.word	0x24000460
 8005280:	24000468 	.word	0x24000468
 8005284:	24000008 	.word	0x24000008
 8005288:	24000470 	.word	0x24000470
 800528c:	24000478 	.word	0x24000478
 8005290:	24000870 	.word	0x24000870
        }

    } else if (t>T-Tj2 && t<=T){
 8005294:	4b59      	ldr	r3, [pc, #356]	; (80053fc <get_Straj+0xd4c>)
 8005296:	ed93 6b00 	vldr	d6, [r3]
 800529a:	4b59      	ldr	r3, [pc, #356]	; (8005400 <get_Straj+0xd50>)
 800529c:	ed93 7b00 	vldr	d7, [r3]
 80052a0:	ee36 7b47 	vsub.f64	d7, d6, d7
 80052a4:	ed97 6b06 	vldr	d6, [r7, #24]
 80052a8:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80052ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80052b0:	f340 8097 	ble.w	80053e2 <get_Straj+0xd32>
 80052b4:	4b51      	ldr	r3, [pc, #324]	; (80053fc <get_Straj+0xd4c>)
 80052b6:	ed93 7b00 	vldr	d7, [r3]
 80052ba:	ed97 6b06 	vldr	d6, [r7, #24]
 80052be:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80052c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80052c6:	f200 808c 	bhi.w	80053e2 <get_Straj+0xd32>
        //printf("tramo7\n");
        q = qf-vf*(T-t)-jmax*(pow(T-t,3)/6);
 80052ca:	4b4e      	ldr	r3, [pc, #312]	; (8005404 <get_Straj+0xd54>)
 80052cc:	ed93 6b00 	vldr	d6, [r3]
 80052d0:	4b4a      	ldr	r3, [pc, #296]	; (80053fc <get_Straj+0xd4c>)
 80052d2:	ed93 5b00 	vldr	d5, [r3]
 80052d6:	ed97 7b06 	vldr	d7, [r7, #24]
 80052da:	ee35 5b47 	vsub.f64	d5, d5, d7
 80052de:	4b4a      	ldr	r3, [pc, #296]	; (8005408 <get_Straj+0xd58>)
 80052e0:	ed93 7b00 	vldr	d7, [r3]
 80052e4:	ee25 7b07 	vmul.f64	d7, d5, d7
 80052e8:	ee36 8b47 	vsub.f64	d8, d6, d7
 80052ec:	4b43      	ldr	r3, [pc, #268]	; (80053fc <get_Straj+0xd4c>)
 80052ee:	ed93 6b00 	vldr	d6, [r3]
 80052f2:	ed97 7b06 	vldr	d7, [r7, #24]
 80052f6:	ee36 7b47 	vsub.f64	d7, d6, d7
 80052fa:	eeb0 1b08 	vmov.f64	d1, #8	; 0x40400000  3.0
 80052fe:	eeb0 0b47 	vmov.f64	d0, d7
 8005302:	f00c faed 	bl	80118e0 <pow>
 8005306:	eeb0 7b40 	vmov.f64	d7, d0
 800530a:	eeb1 5b08 	vmov.f64	d5, #24	; 0x40c00000  6.0
 800530e:	ee87 6b05 	vdiv.f64	d6, d7, d5
 8005312:	4b3e      	ldr	r3, [pc, #248]	; (800540c <get_Straj+0xd5c>)
 8005314:	ed93 7b00 	vldr	d7, [r3]
 8005318:	ee26 7b07 	vmul.f64	d7, d6, d7
 800531c:	ee38 7b47 	vsub.f64	d7, d8, d7
 8005320:	4b3b      	ldr	r3, [pc, #236]	; (8005410 <get_Straj+0xd60>)
 8005322:	ed83 7b00 	vstr	d7, [r3]
        qd = vf+jmax*(pow(T-t,2))/2;
 8005326:	4b35      	ldr	r3, [pc, #212]	; (80053fc <get_Straj+0xd4c>)
 8005328:	ed93 6b00 	vldr	d6, [r3]
 800532c:	ed97 7b06 	vldr	d7, [r7, #24]
 8005330:	ee36 7b47 	vsub.f64	d7, d6, d7
 8005334:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8005338:	eeb0 0b47 	vmov.f64	d0, d7
 800533c:	f00c fad0 	bl	80118e0 <pow>
 8005340:	eeb0 6b40 	vmov.f64	d6, d0
 8005344:	4b31      	ldr	r3, [pc, #196]	; (800540c <get_Straj+0xd5c>)
 8005346:	ed93 7b00 	vldr	d7, [r3]
 800534a:	ee26 7b07 	vmul.f64	d7, d6, d7
 800534e:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8005352:	ee87 6b05 	vdiv.f64	d6, d7, d5
 8005356:	4b2c      	ldr	r3, [pc, #176]	; (8005408 <get_Straj+0xd58>)
 8005358:	ed93 7b00 	vldr	d7, [r3]
 800535c:	ee36 7b07 	vadd.f64	d7, d6, d7
 8005360:	4b2c      	ldr	r3, [pc, #176]	; (8005414 <get_Straj+0xd64>)
 8005362:	ed83 7b00 	vstr	d7, [r3]
        qdd = -jmax*(T-t);
 8005366:	4b29      	ldr	r3, [pc, #164]	; (800540c <get_Straj+0xd5c>)
 8005368:	ed93 7b00 	vldr	d7, [r3]
 800536c:	eeb1 6b47 	vneg.f64	d6, d7
 8005370:	4b22      	ldr	r3, [pc, #136]	; (80053fc <get_Straj+0xd4c>)
 8005372:	ed93 5b00 	vldr	d5, [r3]
 8005376:	ed97 7b06 	vldr	d7, [r7, #24]
 800537a:	ee35 7b47 	vsub.f64	d7, d5, d7
 800537e:	ee26 7b07 	vmul.f64	d7, d6, d7
 8005382:	4b25      	ldr	r3, [pc, #148]	; (8005418 <get_Straj+0xd68>)
 8005384:	ed83 7b00 	vstr	d7, [r3]
        qddd = jmax;
 8005388:	4b20      	ldr	r3, [pc, #128]	; (800540c <get_Straj+0xd5c>)
 800538a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800538e:	4923      	ldr	r1, [pc, #140]	; (800541c <get_Straj+0xd6c>)
 8005390:	e9c1 2300 	strd	r2, r3, [r1]
        if (flagInv){
 8005394:	4b22      	ldr	r3, [pc, #136]	; (8005420 <get_Straj+0xd70>)
 8005396:	781b      	ldrb	r3, [r3, #0]
 8005398:	2b00      	cmp	r3, #0
 800539a:	d022      	beq.n	80053e2 <get_Straj+0xd32>
            //printf("inv tramo7\n");
            q=-q; qd=-qd; qdd=-qdd; qddd=-qddd;
 800539c:	4b1c      	ldr	r3, [pc, #112]	; (8005410 <get_Straj+0xd60>)
 800539e:	ed93 7b00 	vldr	d7, [r3]
 80053a2:	eeb1 7b47 	vneg.f64	d7, d7
 80053a6:	4b1a      	ldr	r3, [pc, #104]	; (8005410 <get_Straj+0xd60>)
 80053a8:	ed83 7b00 	vstr	d7, [r3]
 80053ac:	4b19      	ldr	r3, [pc, #100]	; (8005414 <get_Straj+0xd64>)
 80053ae:	ed93 7b00 	vldr	d7, [r3]
 80053b2:	eeb1 7b47 	vneg.f64	d7, d7
 80053b6:	4b17      	ldr	r3, [pc, #92]	; (8005414 <get_Straj+0xd64>)
 80053b8:	ed83 7b00 	vstr	d7, [r3]
 80053bc:	4b16      	ldr	r3, [pc, #88]	; (8005418 <get_Straj+0xd68>)
 80053be:	ed93 7b00 	vldr	d7, [r3]
 80053c2:	eeb1 7b47 	vneg.f64	d7, d7
 80053c6:	4b14      	ldr	r3, [pc, #80]	; (8005418 <get_Straj+0xd68>)
 80053c8:	ed83 7b00 	vstr	d7, [r3]
 80053cc:	4b13      	ldr	r3, [pc, #76]	; (800541c <get_Straj+0xd6c>)
 80053ce:	ed93 7b00 	vldr	d7, [r3]
 80053d2:	eeb1 7b47 	vneg.f64	d7, d7
 80053d6:	4b11      	ldr	r3, [pc, #68]	; (800541c <get_Straj+0xd6c>)
 80053d8:	ed83 7b00 	vstr	d7, [r3]
            flagInv = false;
 80053dc:	4b10      	ldr	r3, [pc, #64]	; (8005420 <get_Straj+0xd70>)
 80053de:	2200      	movs	r2, #0
 80053e0:	701a      	strb	r2, [r3, #0]
        }
    }


    return qd;
 80053e2:	4b0c      	ldr	r3, [pc, #48]	; (8005414 <get_Straj+0xd64>)
 80053e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053e8:	ec43 2b17 	vmov	d7, r2, r3
}
 80053ec:	eeb0 0b47 	vmov.f64	d0, d7
 80053f0:	3720      	adds	r7, #32
 80053f2:	46bd      	mov	sp, r7
 80053f4:	ecbd 8b06 	vpop	{d8-d10}
 80053f8:	bd80      	pop	{r7, pc}
 80053fa:	bf00      	nop
 80053fc:	24000890 	.word	0x24000890
 8005400:	240008b8 	.word	0x240008b8
 8005404:	240008d8 	.word	0x240008d8
 8005408:	24000490 	.word	0x24000490
 800540c:	24000008 	.word	0x24000008
 8005410:	24000460 	.word	0x24000460
 8005414:	24000468 	.word	0x24000468
 8005418:	24000470 	.word	0x24000470
 800541c:	24000478 	.word	0x24000478
 8005420:	24000870 	.word	0x24000870
 8005424:	00000000 	.word	0x00000000

08005428 <update_ScurveTraj>:


void update_ScurveTraj(double _qi ,double _qf, double vi,double vf ,double vmax,double amax,double jmax, double *params){
 8005428:	b580      	push	{r7, lr}
 800542a:	ed2d 8b04 	vpush	{d8-d9}
 800542e:	b092      	sub	sp, #72	; 0x48
 8005430:	af00      	add	r7, sp, #0
 8005432:	ed87 0b0e 	vstr	d0, [r7, #56]	; 0x38
 8005436:	ed87 1b0c 	vstr	d1, [r7, #48]	; 0x30
 800543a:	ed87 2b0a 	vstr	d2, [r7, #40]	; 0x28
 800543e:	ed87 3b08 	vstr	d3, [r7, #32]
 8005442:	ed87 4b06 	vstr	d4, [r7, #24]
 8005446:	ed87 5b04 	vstr	d5, [r7, #16]
 800544a:	ed87 6b02 	vstr	d6, [r7, #8]
 800544e:	6078      	str	r0, [r7, #4]

	jmin = -jmax;
 8005450:	ed97 7b02 	vldr	d7, [r7, #8]
 8005454:	eeb1 7b47 	vneg.f64	d7, d7
 8005458:	4b9e      	ldr	r3, [pc, #632]	; (80056d4 <update_ScurveTraj+0x2ac>)
 800545a:	ed83 7b00 	vstr	d7, [r3]
	amin = -amax;
 800545e:	ed97 7b04 	vldr	d7, [r7, #16]
 8005462:	eeb1 7b47 	vneg.f64	d7, d7
 8005466:	4b9c      	ldr	r3, [pc, #624]	; (80056d8 <update_ScurveTraj+0x2b0>)
 8005468:	ed83 7b00 	vstr	d7, [r3]
	vmin = -vmax;
 800546c:	ed97 7b06 	vldr	d7, [r7, #24]
 8005470:	eeb1 7b47 	vneg.f64	d7, d7
 8005474:	4b99      	ldr	r3, [pc, #612]	; (80056dc <update_ScurveTraj+0x2b4>)
 8005476:	ed83 7b00 	vstr	d7, [r3]
	qi=_qi;
 800547a:	4999      	ldr	r1, [pc, #612]	; (80056e0 <update_ScurveTraj+0x2b8>)
 800547c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005480:	e9c1 2300 	strd	r2, r3, [r1]
	qf=_qf;
 8005484:	4997      	ldr	r1, [pc, #604]	; (80056e4 <update_ScurveTraj+0x2bc>)
 8005486:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800548a:	e9c1 2300 	strd	r2, r3, [r1]

	if (qf < qi){
 800548e:	4b95      	ldr	r3, [pc, #596]	; (80056e4 <update_ScurveTraj+0x2bc>)
 8005490:	ed93 6b00 	vldr	d6, [r3]
 8005494:	4b92      	ldr	r3, [pc, #584]	; (80056e0 <update_ScurveTraj+0x2b8>)
 8005496:	ed93 7b00 	vldr	d7, [r3]
 800549a:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800549e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80054a2:	d548      	bpl.n	8005536 <update_ScurveTraj+0x10e>

		flagInv = true;
 80054a4:	4b90      	ldr	r3, [pc, #576]	; (80056e8 <update_ScurveTraj+0x2c0>)
 80054a6:	2201      	movs	r2, #1
 80054a8:	701a      	strb	r2, [r3, #0]

		qi = -qi;
 80054aa:	4b8d      	ldr	r3, [pc, #564]	; (80056e0 <update_ScurveTraj+0x2b8>)
 80054ac:	ed93 7b00 	vldr	d7, [r3]
 80054b0:	eeb1 7b47 	vneg.f64	d7, d7
 80054b4:	4b8a      	ldr	r3, [pc, #552]	; (80056e0 <update_ScurveTraj+0x2b8>)
 80054b6:	ed83 7b00 	vstr	d7, [r3]
		qf = -qf;
 80054ba:	4b8a      	ldr	r3, [pc, #552]	; (80056e4 <update_ScurveTraj+0x2bc>)
 80054bc:	ed93 7b00 	vldr	d7, [r3]
 80054c0:	eeb1 7b47 	vneg.f64	d7, d7
 80054c4:	4b87      	ldr	r3, [pc, #540]	; (80056e4 <update_ScurveTraj+0x2bc>)
 80054c6:	ed83 7b00 	vstr	d7, [r3]
		vi = -vi;
 80054ca:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 80054ce:	eeb1 7b47 	vneg.f64	d7, d7
 80054d2:	ed87 7b0a 	vstr	d7, [r7, #40]	; 0x28
		vf = -vf;
 80054d6:	ed97 7b08 	vldr	d7, [r7, #32]
 80054da:	eeb1 7b47 	vneg.f64	d7, d7
 80054de:	ed87 7b08 	vstr	d7, [r7, #32]

		vmax = -vmin;
 80054e2:	4b7e      	ldr	r3, [pc, #504]	; (80056dc <update_ScurveTraj+0x2b4>)
 80054e4:	ed93 7b00 	vldr	d7, [r3]
 80054e8:	eeb1 7b47 	vneg.f64	d7, d7
 80054ec:	ed87 7b06 	vstr	d7, [r7, #24]
		vmin = -vmax;
 80054f0:	ed97 7b06 	vldr	d7, [r7, #24]
 80054f4:	eeb1 7b47 	vneg.f64	d7, d7
 80054f8:	4b78      	ldr	r3, [pc, #480]	; (80056dc <update_ScurveTraj+0x2b4>)
 80054fa:	ed83 7b00 	vstr	d7, [r3]
		amax = -amin;
 80054fe:	4b76      	ldr	r3, [pc, #472]	; (80056d8 <update_ScurveTraj+0x2b0>)
 8005500:	ed93 7b00 	vldr	d7, [r3]
 8005504:	eeb1 7b47 	vneg.f64	d7, d7
 8005508:	ed87 7b04 	vstr	d7, [r7, #16]
		amin = -amax;
 800550c:	ed97 7b04 	vldr	d7, [r7, #16]
 8005510:	eeb1 7b47 	vneg.f64	d7, d7
 8005514:	4b70      	ldr	r3, [pc, #448]	; (80056d8 <update_ScurveTraj+0x2b0>)
 8005516:	ed83 7b00 	vstr	d7, [r3]
		jmax = -jmin;
 800551a:	4b6e      	ldr	r3, [pc, #440]	; (80056d4 <update_ScurveTraj+0x2ac>)
 800551c:	ed93 7b00 	vldr	d7, [r3]
 8005520:	eeb1 7b47 	vneg.f64	d7, d7
 8005524:	ed87 7b02 	vstr	d7, [r7, #8]
		jmin = -jmax;
 8005528:	ed97 7b02 	vldr	d7, [r7, #8]
 800552c:	eeb1 7b47 	vneg.f64	d7, d7
 8005530:	4b68      	ldr	r3, [pc, #416]	; (80056d4 <update_ScurveTraj+0x2ac>)
 8005532:	ed83 7b00 	vstr	d7, [r3]

	}

	volatile float Tjaux = MIN(sqrt(fabs(vf-vi)/jmax),amax/jmax);
 8005536:	ed97 6b08 	vldr	d6, [r7, #32]
 800553a:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 800553e:	ee36 7b47 	vsub.f64	d7, d6, d7
 8005542:	eeb0 6bc7 	vabs.f64	d6, d7
 8005546:	ed97 7b02 	vldr	d7, [r7, #8]
 800554a:	ee86 5b07 	vdiv.f64	d5, d6, d7
 800554e:	eeb0 0b45 	vmov.f64	d0, d5
 8005552:	f00c fc45 	bl	8011de0 <sqrt>
 8005556:	eeb0 4b40 	vmov.f64	d4, d0
 800555a:	ed97 5b04 	vldr	d5, [r7, #16]
 800555e:	ed97 6b02 	vldr	d6, [r7, #8]
 8005562:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8005566:	eeb4 4bc7 	vcmpe.f64	d4, d7
 800556a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800556e:	d512      	bpl.n	8005596 <update_ScurveTraj+0x16e>
 8005570:	ed97 6b08 	vldr	d6, [r7, #32]
 8005574:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 8005578:	ee36 7b47 	vsub.f64	d7, d6, d7
 800557c:	eeb0 6bc7 	vabs.f64	d6, d7
 8005580:	ed97 7b02 	vldr	d7, [r7, #8]
 8005584:	ee86 5b07 	vdiv.f64	d5, d6, d7
 8005588:	eeb0 0b45 	vmov.f64	d0, d5
 800558c:	f00c fc28 	bl	8011de0 <sqrt>
 8005590:	eeb0 7b40 	vmov.f64	d7, d0
 8005594:	e005      	b.n	80055a2 <update_ScurveTraj+0x17a>
 8005596:	ed97 5b04 	vldr	d5, [r7, #16]
 800559a:	ed97 6b02 	vldr	d6, [r7, #8]
 800559e:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80055a2:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80055a6:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44


	if (Tjaux<amax/jmax){
 80055aa:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80055ae:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 80055b2:	ed97 4b04 	vldr	d4, [r7, #16]
 80055b6:	ed97 5b02 	vldr	d5, [r7, #8]
 80055ba:	ee84 7b05 	vdiv.f64	d7, d4, d5
 80055be:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80055c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80055c6:	d400      	bmi.n	80055ca <update_ScurveTraj+0x1a2>
		//if (qf-qi > Tjaux*(vi+vf)) {printf("the trajectory is feasible \n");}
		//else {printf("the trajectory is NOT \n");}
	}
	else if (Tjaux == amax/jmax){
 80055c8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
		//if (qf-qi > 0.5*(vi+vf)*(Tjaux+fabs(vi+vf)/amax)) {printf("the trajectory is feasible\n");}
		//else {printf("the trajectory is NOT feasible\n");}
	}
	//Phase 1: acceleration
	if ((vmax-vi)*jmax < pow(amax,2)){
 80055ca:	ed97 6b06 	vldr	d6, [r7, #24]
 80055ce:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 80055d2:	ee36 6b47 	vsub.f64	d6, d6, d7
 80055d6:	ed97 7b02 	vldr	d7, [r7, #8]
 80055da:	ee26 8b07 	vmul.f64	d8, d6, d7
 80055de:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 80055e2:	ed97 0b04 	vldr	d0, [r7, #16]
 80055e6:	f00c f97b 	bl	80118e0 <pow>
 80055ea:	eeb0 7b40 	vmov.f64	d7, d0
 80055ee:	eeb4 8bc7 	vcmpe.f64	d8, d7
 80055f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80055f6:	d51d      	bpl.n	8005634 <update_ScurveTraj+0x20c>
		//printf("amax is NOT reached\n");

		Tj1=sqrt(fabs(vmax-vi)/jmax);
 80055f8:	ed97 6b06 	vldr	d6, [r7, #24]
 80055fc:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 8005600:	ee36 7b47 	vsub.f64	d7, d6, d7
 8005604:	eeb0 6bc7 	vabs.f64	d6, d7
 8005608:	ed97 7b02 	vldr	d7, [r7, #8]
 800560c:	ee86 5b07 	vdiv.f64	d5, d6, d7
 8005610:	eeb0 0b45 	vmov.f64	d0, d5
 8005614:	f00c fbe4 	bl	8011de0 <sqrt>
 8005618:	eeb0 7b40 	vmov.f64	d7, d0
 800561c:	4b33      	ldr	r3, [pc, #204]	; (80056ec <update_ScurveTraj+0x2c4>)
 800561e:	ed83 7b00 	vstr	d7, [r3]
		Ta=Tj1*2;
 8005622:	4b32      	ldr	r3, [pc, #200]	; (80056ec <update_ScurveTraj+0x2c4>)
 8005624:	ed93 7b00 	vldr	d7, [r3]
 8005628:	ee37 7b07 	vadd.f64	d7, d7, d7
 800562c:	4b30      	ldr	r3, [pc, #192]	; (80056f0 <update_ScurveTraj+0x2c8>)
 800562e:	ed83 7b00 	vstr	d7, [r3]
 8005632:	e01a      	b.n	800566a <update_ScurveTraj+0x242>
	}
	else{
		//printf("amax is reached\n");
		Tj1=amax/jmax;
 8005634:	ed97 5b04 	vldr	d5, [r7, #16]
 8005638:	ed97 6b02 	vldr	d6, [r7, #8]
 800563c:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8005640:	4b2a      	ldr	r3, [pc, #168]	; (80056ec <update_ScurveTraj+0x2c4>)
 8005642:	ed83 7b00 	vstr	d7, [r3]
		Ta=Tj1+(vmax-vi)/amax;
 8005646:	ed97 6b06 	vldr	d6, [r7, #24]
 800564a:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 800564e:	ee36 5b47 	vsub.f64	d5, d6, d7
 8005652:	ed97 7b04 	vldr	d7, [r7, #16]
 8005656:	ee85 6b07 	vdiv.f64	d6, d5, d7
 800565a:	4b24      	ldr	r3, [pc, #144]	; (80056ec <update_ScurveTraj+0x2c4>)
 800565c:	ed93 7b00 	vldr	d7, [r3]
 8005660:	ee36 7b07 	vadd.f64	d7, d6, d7
 8005664:	4b22      	ldr	r3, [pc, #136]	; (80056f0 <update_ScurveTraj+0x2c8>)
 8005666:	ed83 7b00 	vstr	d7, [r3]
	}

	//Phase 3: Desacceleration


	if ((vmax-vf)*jmax < pow(amax,2)){
 800566a:	ed97 6b06 	vldr	d6, [r7, #24]
 800566e:	ed97 7b08 	vldr	d7, [r7, #32]
 8005672:	ee36 6b47 	vsub.f64	d6, d6, d7
 8005676:	ed97 7b02 	vldr	d7, [r7, #8]
 800567a:	ee26 8b07 	vmul.f64	d8, d6, d7
 800567e:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8005682:	ed97 0b04 	vldr	d0, [r7, #16]
 8005686:	f00c f92b 	bl	80118e0 <pow>
 800568a:	eeb0 7b40 	vmov.f64	d7, d0
 800568e:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8005692:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005696:	d531      	bpl.n	80056fc <update_ScurveTraj+0x2d4>
		//printf("amin is NOT reached\n");

		Tj2=sqrt(fabs(vmax-vf)/jmax);
 8005698:	ed97 6b06 	vldr	d6, [r7, #24]
 800569c:	ed97 7b08 	vldr	d7, [r7, #32]
 80056a0:	ee36 7b47 	vsub.f64	d7, d6, d7
 80056a4:	eeb0 6bc7 	vabs.f64	d6, d7
 80056a8:	ed97 7b02 	vldr	d7, [r7, #8]
 80056ac:	ee86 5b07 	vdiv.f64	d5, d6, d7
 80056b0:	eeb0 0b45 	vmov.f64	d0, d5
 80056b4:	f00c fb94 	bl	8011de0 <sqrt>
 80056b8:	eeb0 7b40 	vmov.f64	d7, d0
 80056bc:	4b0d      	ldr	r3, [pc, #52]	; (80056f4 <update_ScurveTraj+0x2cc>)
 80056be:	ed83 7b00 	vstr	d7, [r3]
		Td=Tj2*2;
 80056c2:	4b0c      	ldr	r3, [pc, #48]	; (80056f4 <update_ScurveTraj+0x2cc>)
 80056c4:	ed93 7b00 	vldr	d7, [r3]
 80056c8:	ee37 7b07 	vadd.f64	d7, d7, d7
 80056cc:	4b0a      	ldr	r3, [pc, #40]	; (80056f8 <update_ScurveTraj+0x2d0>)
 80056ce:	ed83 7b00 	vstr	d7, [r3]
 80056d2:	e02e      	b.n	8005732 <update_ScurveTraj+0x30a>
 80056d4:	24000480 	.word	0x24000480
 80056d8:	24000498 	.word	0x24000498
 80056dc:	24000488 	.word	0x24000488
 80056e0:	240008d0 	.word	0x240008d0
 80056e4:	240008d8 	.word	0x240008d8
 80056e8:	24000870 	.word	0x24000870
 80056ec:	240008b0 	.word	0x240008b0
 80056f0:	24000898 	.word	0x24000898
 80056f4:	240008b8 	.word	0x240008b8
 80056f8:	240008a0 	.word	0x240008a0
	}
	else{
		//printf("amin is reached\n");
		Tj2=amax/jmax;
 80056fc:	ed97 5b04 	vldr	d5, [r7, #16]
 8005700:	ed97 6b02 	vldr	d6, [r7, #8]
 8005704:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8005708:	4b95      	ldr	r3, [pc, #596]	; (8005960 <update_ScurveTraj+0x538>)
 800570a:	ed83 7b00 	vstr	d7, [r3]
		Td=Tj2+(vmax-vf)/amax;
 800570e:	ed97 6b06 	vldr	d6, [r7, #24]
 8005712:	ed97 7b08 	vldr	d7, [r7, #32]
 8005716:	ee36 5b47 	vsub.f64	d5, d6, d7
 800571a:	ed97 7b04 	vldr	d7, [r7, #16]
 800571e:	ee85 6b07 	vdiv.f64	d6, d5, d7
 8005722:	4b8f      	ldr	r3, [pc, #572]	; (8005960 <update_ScurveTraj+0x538>)
 8005724:	ed93 7b00 	vldr	d7, [r3]
 8005728:	ee36 7b07 	vadd.f64	d7, d6, d7
 800572c:	4b8d      	ldr	r3, [pc, #564]	; (8005964 <update_ScurveTraj+0x53c>)
 800572e:	ed83 7b00 	vstr	d7, [r3]
	}


	Tv = (qf-qi)/vmax - (Ta/2)*(1+(vi/vmax))-(Td/2)*(1+(vf/vmax));
 8005732:	4b8d      	ldr	r3, [pc, #564]	; (8005968 <update_ScurveTraj+0x540>)
 8005734:	ed93 6b00 	vldr	d6, [r3]
 8005738:	4b8c      	ldr	r3, [pc, #560]	; (800596c <update_ScurveTraj+0x544>)
 800573a:	ed93 7b00 	vldr	d7, [r3]
 800573e:	ee36 5b47 	vsub.f64	d5, d6, d7
 8005742:	ed97 7b06 	vldr	d7, [r7, #24]
 8005746:	ee85 6b07 	vdiv.f64	d6, d5, d7
 800574a:	4b89      	ldr	r3, [pc, #548]	; (8005970 <update_ScurveTraj+0x548>)
 800574c:	ed93 7b00 	vldr	d7, [r3]
 8005750:	eeb0 4b00 	vmov.f64	d4, #0	; 0x40000000  2.0
 8005754:	ee87 5b04 	vdiv.f64	d5, d7, d4
 8005758:	ed97 3b0a 	vldr	d3, [r7, #40]	; 0x28
 800575c:	ed97 4b06 	vldr	d4, [r7, #24]
 8005760:	ee83 7b04 	vdiv.f64	d7, d3, d4
 8005764:	eeb7 4b00 	vmov.f64	d4, #112	; 0x3f800000  1.0
 8005768:	ee37 7b04 	vadd.f64	d7, d7, d4
 800576c:	ee25 7b07 	vmul.f64	d7, d5, d7
 8005770:	ee36 6b47 	vsub.f64	d6, d6, d7
 8005774:	4b7b      	ldr	r3, [pc, #492]	; (8005964 <update_ScurveTraj+0x53c>)
 8005776:	ed93 7b00 	vldr	d7, [r3]
 800577a:	eeb0 4b00 	vmov.f64	d4, #0	; 0x40000000  2.0
 800577e:	ee87 5b04 	vdiv.f64	d5, d7, d4
 8005782:	ed97 3b08 	vldr	d3, [r7, #32]
 8005786:	ed97 4b06 	vldr	d4, [r7, #24]
 800578a:	ee83 7b04 	vdiv.f64	d7, d3, d4
 800578e:	eeb7 4b00 	vmov.f64	d4, #112	; 0x3f800000  1.0
 8005792:	ee37 7b04 	vadd.f64	d7, d7, d4
 8005796:	ee25 7b07 	vmul.f64	d7, d5, d7
 800579a:	ee36 7b47 	vsub.f64	d7, d6, d7
 800579e:	4b75      	ldr	r3, [pc, #468]	; (8005974 <update_ScurveTraj+0x54c>)
 80057a0:	ed83 7b00 	vstr	d7, [r3]

	if (Tv>0){
 80057a4:	4b73      	ldr	r3, [pc, #460]	; (8005974 <update_ScurveTraj+0x54c>)
 80057a6:	ed93 7b00 	vldr	d7, [r3]
 80057aa:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80057ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80057b2:	f300 82d5 	bgt.w	8005d60 <update_ScurveTraj+0x938>
		//printf("the max velocity is reached\n");
	}
	else{
		//printf("CASE 2\n");
		//printf("In this case vmax is NOT reached, so Tv=0\n");
		Tj1=amax/jmax;
 80057b6:	ed97 5b04 	vldr	d5, [r7, #16]
 80057ba:	ed97 6b02 	vldr	d6, [r7, #8]
 80057be:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80057c2:	4b6d      	ldr	r3, [pc, #436]	; (8005978 <update_ScurveTraj+0x550>)
 80057c4:	ed83 7b00 	vstr	d7, [r3]
		Tj2=Tj1;
 80057c8:	4b6b      	ldr	r3, [pc, #428]	; (8005978 <update_ScurveTraj+0x550>)
 80057ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057ce:	4964      	ldr	r1, [pc, #400]	; (8005960 <update_ScurveTraj+0x538>)
 80057d0:	e9c1 2300 	strd	r2, r3, [r1]
		Tj=Tj1;
 80057d4:	4b68      	ldr	r3, [pc, #416]	; (8005978 <update_ScurveTraj+0x550>)
 80057d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057da:	4968      	ldr	r1, [pc, #416]	; (800597c <update_ScurveTraj+0x554>)
 80057dc:	e9c1 2300 	strd	r2, r3, [r1]
		delta = (pow(amax,4)/pow(jmax,2))+2*(pow(vi,2)+pow(vf,2))+amax*(4*(qf-qi)-2*(amax/jmax)*(vi+vf));
 80057e0:	eeb1 1b00 	vmov.f64	d1, #16	; 0x40800000  4.0
 80057e4:	ed97 0b04 	vldr	d0, [r7, #16]
 80057e8:	f00c f87a 	bl	80118e0 <pow>
 80057ec:	eeb0 9b40 	vmov.f64	d9, d0
 80057f0:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 80057f4:	ed97 0b02 	vldr	d0, [r7, #8]
 80057f8:	f00c f872 	bl	80118e0 <pow>
 80057fc:	eeb0 7b40 	vmov.f64	d7, d0
 8005800:	ee89 8b07 	vdiv.f64	d8, d9, d7
 8005804:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8005808:	ed97 0b0a 	vldr	d0, [r7, #40]	; 0x28
 800580c:	f00c f868 	bl	80118e0 <pow>
 8005810:	eeb0 9b40 	vmov.f64	d9, d0
 8005814:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8005818:	ed97 0b08 	vldr	d0, [r7, #32]
 800581c:	f00c f860 	bl	80118e0 <pow>
 8005820:	eeb0 7b40 	vmov.f64	d7, d0
 8005824:	ee39 7b07 	vadd.f64	d7, d9, d7
 8005828:	ee37 7b07 	vadd.f64	d7, d7, d7
 800582c:	ee38 6b07 	vadd.f64	d6, d8, d7
 8005830:	4b4d      	ldr	r3, [pc, #308]	; (8005968 <update_ScurveTraj+0x540>)
 8005832:	ed93 5b00 	vldr	d5, [r3]
 8005836:	4b4d      	ldr	r3, [pc, #308]	; (800596c <update_ScurveTraj+0x544>)
 8005838:	ed93 7b00 	vldr	d7, [r3]
 800583c:	ee35 7b47 	vsub.f64	d7, d5, d7
 8005840:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 8005844:	ee27 5b05 	vmul.f64	d5, d7, d5
 8005848:	ed97 3b04 	vldr	d3, [r7, #16]
 800584c:	ed97 4b02 	vldr	d4, [r7, #8]
 8005850:	ee83 7b04 	vdiv.f64	d7, d3, d4
 8005854:	ee37 4b07 	vadd.f64	d4, d7, d7
 8005858:	ed97 3b0a 	vldr	d3, [r7, #40]	; 0x28
 800585c:	ed97 7b08 	vldr	d7, [r7, #32]
 8005860:	ee33 7b07 	vadd.f64	d7, d3, d7
 8005864:	ee24 7b07 	vmul.f64	d7, d4, d7
 8005868:	ee35 5b47 	vsub.f64	d5, d5, d7
 800586c:	ed97 7b04 	vldr	d7, [r7, #16]
 8005870:	ee25 7b07 	vmul.f64	d7, d5, d7
 8005874:	ee36 7b07 	vadd.f64	d7, d6, d7
 8005878:	4b41      	ldr	r3, [pc, #260]	; (8005980 <update_ScurveTraj+0x558>)
 800587a:	ed83 7b00 	vstr	d7, [r3]
		Ta=((pow(amax,2)/jmax)-2*vi+sqrt(delta))/(2*amax);
 800587e:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8005882:	ed97 0b04 	vldr	d0, [r7, #16]
 8005886:	f00c f82b 	bl	80118e0 <pow>
 800588a:	eeb0 5b40 	vmov.f64	d5, d0
 800588e:	ed97 7b02 	vldr	d7, [r7, #8]
 8005892:	ee85 6b07 	vdiv.f64	d6, d5, d7
 8005896:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 800589a:	ee37 7b07 	vadd.f64	d7, d7, d7
 800589e:	ee36 8b47 	vsub.f64	d8, d6, d7
 80058a2:	4b37      	ldr	r3, [pc, #220]	; (8005980 <update_ScurveTraj+0x558>)
 80058a4:	ed93 7b00 	vldr	d7, [r3]
 80058a8:	eeb0 0b47 	vmov.f64	d0, d7
 80058ac:	f00c fa98 	bl	8011de0 <sqrt>
 80058b0:	eeb0 7b40 	vmov.f64	d7, d0
 80058b4:	ee38 5b07 	vadd.f64	d5, d8, d7
 80058b8:	ed97 7b04 	vldr	d7, [r7, #16]
 80058bc:	ee37 6b07 	vadd.f64	d6, d7, d7
 80058c0:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80058c4:	4b2a      	ldr	r3, [pc, #168]	; (8005970 <update_ScurveTraj+0x548>)
 80058c6:	ed83 7b00 	vstr	d7, [r3]
		Td=((pow(amax,2)/jmax)-2*vf+sqrt(delta))/(2*amax);
 80058ca:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 80058ce:	ed97 0b04 	vldr	d0, [r7, #16]
 80058d2:	f00c f805 	bl	80118e0 <pow>
 80058d6:	eeb0 5b40 	vmov.f64	d5, d0
 80058da:	ed97 7b02 	vldr	d7, [r7, #8]
 80058de:	ee85 6b07 	vdiv.f64	d6, d5, d7
 80058e2:	ed97 7b08 	vldr	d7, [r7, #32]
 80058e6:	ee37 7b07 	vadd.f64	d7, d7, d7
 80058ea:	ee36 8b47 	vsub.f64	d8, d6, d7
 80058ee:	4b24      	ldr	r3, [pc, #144]	; (8005980 <update_ScurveTraj+0x558>)
 80058f0:	ed93 7b00 	vldr	d7, [r3]
 80058f4:	eeb0 0b47 	vmov.f64	d0, d7
 80058f8:	f00c fa72 	bl	8011de0 <sqrt>
 80058fc:	eeb0 7b40 	vmov.f64	d7, d0
 8005900:	ee38 5b07 	vadd.f64	d5, d8, d7
 8005904:	ed97 7b04 	vldr	d7, [r7, #16]
 8005908:	ee37 6b07 	vadd.f64	d6, d7, d7
 800590c:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8005910:	4b14      	ldr	r3, [pc, #80]	; (8005964 <update_ScurveTraj+0x53c>)
 8005912:	ed83 7b00 	vstr	d7, [r3]
		Tv=0;
 8005916:	4917      	ldr	r1, [pc, #92]	; (8005974 <update_ScurveTraj+0x54c>)
 8005918:	f04f 0200 	mov.w	r2, #0
 800591c:	f04f 0300 	mov.w	r3, #0
 8005920:	e9c1 2300 	strd	r2, r3, [r1]


		if (Ta<2*Tj || Td<2*Tj){
 8005924:	4b15      	ldr	r3, [pc, #84]	; (800597c <update_ScurveTraj+0x554>)
 8005926:	ed93 7b00 	vldr	d7, [r3]
 800592a:	ee37 6b07 	vadd.f64	d6, d7, d7
 800592e:	4b10      	ldr	r3, [pc, #64]	; (8005970 <update_ScurveTraj+0x548>)
 8005930:	ed93 7b00 	vldr	d7, [r3]
 8005934:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8005938:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800593c:	f300 81e4 	bgt.w	8005d08 <update_ScurveTraj+0x8e0>
 8005940:	4b0e      	ldr	r3, [pc, #56]	; (800597c <update_ScurveTraj+0x554>)
 8005942:	ed93 7b00 	vldr	d7, [r3]
 8005946:	ee37 6b07 	vadd.f64	d6, d7, d7
 800594a:	4b06      	ldr	r3, [pc, #24]	; (8005964 <update_ScurveTraj+0x53c>)
 800594c:	ed93 7b00 	vldr	d7, [r3]
 8005950:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8005954:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005958:	f340 8202 	ble.w	8005d60 <update_ScurveTraj+0x938>
			//printf("entre\n");
			while (!(Ta>2*Tj && Td>2*Tj)){
 800595c:	e1d4      	b.n	8005d08 <update_ScurveTraj+0x8e0>
 800595e:	bf00      	nop
 8005960:	240008b8 	.word	0x240008b8
 8005964:	240008a0 	.word	0x240008a0
 8005968:	240008d8 	.word	0x240008d8
 800596c:	240008d0 	.word	0x240008d0
 8005970:	24000898 	.word	0x24000898
 8005974:	240008a8 	.word	0x240008a8
 8005978:	240008b0 	.word	0x240008b0
 800597c:	240008c0 	.word	0x240008c0
 8005980:	240008c8 	.word	0x240008c8

				amax=amax*0.99;
 8005984:	ed97 7b04 	vldr	d7, [r7, #16]
 8005988:	ed9f 6bd5 	vldr	d6, [pc, #852]	; 8005ce0 <update_ScurveTraj+0x8b8>
 800598c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8005990:	ed87 7b04 	vstr	d7, [r7, #16]
				Tj=amax/jmax;
 8005994:	ed97 5b04 	vldr	d5, [r7, #16]
 8005998:	ed97 6b02 	vldr	d6, [r7, #8]
 800599c:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80059a0:	4bd1      	ldr	r3, [pc, #836]	; (8005ce8 <update_ScurveTraj+0x8c0>)
 80059a2:	ed83 7b00 	vstr	d7, [r3]
				delta = (pow(amax,4)/pow(jmax,2))+2*(pow(vi,2)+pow(vf,2))+amax*(4*(qf-qi)-2*(amax/jmax)*(vi+vf));
 80059a6:	eeb1 1b00 	vmov.f64	d1, #16	; 0x40800000  4.0
 80059aa:	ed97 0b04 	vldr	d0, [r7, #16]
 80059ae:	f00b ff97 	bl	80118e0 <pow>
 80059b2:	eeb0 9b40 	vmov.f64	d9, d0
 80059b6:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 80059ba:	ed97 0b02 	vldr	d0, [r7, #8]
 80059be:	f00b ff8f 	bl	80118e0 <pow>
 80059c2:	eeb0 7b40 	vmov.f64	d7, d0
 80059c6:	ee89 8b07 	vdiv.f64	d8, d9, d7
 80059ca:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 80059ce:	ed97 0b0a 	vldr	d0, [r7, #40]	; 0x28
 80059d2:	f00b ff85 	bl	80118e0 <pow>
 80059d6:	eeb0 9b40 	vmov.f64	d9, d0
 80059da:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 80059de:	ed97 0b08 	vldr	d0, [r7, #32]
 80059e2:	f00b ff7d 	bl	80118e0 <pow>
 80059e6:	eeb0 7b40 	vmov.f64	d7, d0
 80059ea:	ee39 7b07 	vadd.f64	d7, d9, d7
 80059ee:	ee37 7b07 	vadd.f64	d7, d7, d7
 80059f2:	ee38 6b07 	vadd.f64	d6, d8, d7
 80059f6:	4bbd      	ldr	r3, [pc, #756]	; (8005cec <update_ScurveTraj+0x8c4>)
 80059f8:	ed93 5b00 	vldr	d5, [r3]
 80059fc:	4bbc      	ldr	r3, [pc, #752]	; (8005cf0 <update_ScurveTraj+0x8c8>)
 80059fe:	ed93 7b00 	vldr	d7, [r3]
 8005a02:	ee35 7b47 	vsub.f64	d7, d5, d7
 8005a06:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 8005a0a:	ee27 5b05 	vmul.f64	d5, d7, d5
 8005a0e:	ed97 3b04 	vldr	d3, [r7, #16]
 8005a12:	ed97 4b02 	vldr	d4, [r7, #8]
 8005a16:	ee83 7b04 	vdiv.f64	d7, d3, d4
 8005a1a:	ee37 4b07 	vadd.f64	d4, d7, d7
 8005a1e:	ed97 3b0a 	vldr	d3, [r7, #40]	; 0x28
 8005a22:	ed97 7b08 	vldr	d7, [r7, #32]
 8005a26:	ee33 7b07 	vadd.f64	d7, d3, d7
 8005a2a:	ee24 7b07 	vmul.f64	d7, d4, d7
 8005a2e:	ee35 5b47 	vsub.f64	d5, d5, d7
 8005a32:	ed97 7b04 	vldr	d7, [r7, #16]
 8005a36:	ee25 7b07 	vmul.f64	d7, d5, d7
 8005a3a:	ee36 7b07 	vadd.f64	d7, d6, d7
 8005a3e:	4bad      	ldr	r3, [pc, #692]	; (8005cf4 <update_ScurveTraj+0x8cc>)
 8005a40:	ed83 7b00 	vstr	d7, [r3]
				Ta=((pow(amax,2)/jmax)-2*vi+sqrt(delta))/(2*amax);
 8005a44:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8005a48:	ed97 0b04 	vldr	d0, [r7, #16]
 8005a4c:	f00b ff48 	bl	80118e0 <pow>
 8005a50:	eeb0 5b40 	vmov.f64	d5, d0
 8005a54:	ed97 7b02 	vldr	d7, [r7, #8]
 8005a58:	ee85 6b07 	vdiv.f64	d6, d5, d7
 8005a5c:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 8005a60:	ee37 7b07 	vadd.f64	d7, d7, d7
 8005a64:	ee36 8b47 	vsub.f64	d8, d6, d7
 8005a68:	4ba2      	ldr	r3, [pc, #648]	; (8005cf4 <update_ScurveTraj+0x8cc>)
 8005a6a:	ed93 7b00 	vldr	d7, [r3]
 8005a6e:	eeb0 0b47 	vmov.f64	d0, d7
 8005a72:	f00c f9b5 	bl	8011de0 <sqrt>
 8005a76:	eeb0 7b40 	vmov.f64	d7, d0
 8005a7a:	ee38 5b07 	vadd.f64	d5, d8, d7
 8005a7e:	ed97 7b04 	vldr	d7, [r7, #16]
 8005a82:	ee37 6b07 	vadd.f64	d6, d7, d7
 8005a86:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8005a8a:	4b9b      	ldr	r3, [pc, #620]	; (8005cf8 <update_ScurveTraj+0x8d0>)
 8005a8c:	ed83 7b00 	vstr	d7, [r3]
				Td=((pow(amax,2)/jmax)-2*vf+sqrt(delta))/(2*amax);
 8005a90:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8005a94:	ed97 0b04 	vldr	d0, [r7, #16]
 8005a98:	f00b ff22 	bl	80118e0 <pow>
 8005a9c:	eeb0 5b40 	vmov.f64	d5, d0
 8005aa0:	ed97 7b02 	vldr	d7, [r7, #8]
 8005aa4:	ee85 6b07 	vdiv.f64	d6, d5, d7
 8005aa8:	ed97 7b08 	vldr	d7, [r7, #32]
 8005aac:	ee37 7b07 	vadd.f64	d7, d7, d7
 8005ab0:	ee36 8b47 	vsub.f64	d8, d6, d7
 8005ab4:	4b8f      	ldr	r3, [pc, #572]	; (8005cf4 <update_ScurveTraj+0x8cc>)
 8005ab6:	ed93 7b00 	vldr	d7, [r3]
 8005aba:	eeb0 0b47 	vmov.f64	d0, d7
 8005abe:	f00c f98f 	bl	8011de0 <sqrt>
 8005ac2:	eeb0 7b40 	vmov.f64	d7, d0
 8005ac6:	ee38 5b07 	vadd.f64	d5, d8, d7
 8005aca:	ed97 7b04 	vldr	d7, [r7, #16]
 8005ace:	ee37 6b07 	vadd.f64	d6, d7, d7
 8005ad2:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8005ad6:	4b89      	ldr	r3, [pc, #548]	; (8005cfc <update_ScurveTraj+0x8d4>)
 8005ad8:	ed83 7b00 	vstr	d7, [r3]

				//print(f'{i}',amax)


				if (Ta<0){
 8005adc:	4b86      	ldr	r3, [pc, #536]	; (8005cf8 <update_ScurveTraj+0x8d0>)
 8005ade:	ed93 7b00 	vldr	d7, [r3]
 8005ae2:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8005ae6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005aea:	d576      	bpl.n	8005bda <update_ScurveTraj+0x7b2>
					Ta=0;
 8005aec:	4982      	ldr	r1, [pc, #520]	; (8005cf8 <update_ScurveTraj+0x8d0>)
 8005aee:	f04f 0200 	mov.w	r2, #0
 8005af2:	f04f 0300 	mov.w	r3, #0
 8005af6:	e9c1 2300 	strd	r2, r3, [r1]
					Tj1=0;
 8005afa:	4981      	ldr	r1, [pc, #516]	; (8005d00 <update_ScurveTraj+0x8d8>)
 8005afc:	f04f 0200 	mov.w	r2, #0
 8005b00:	f04f 0300 	mov.w	r3, #0
 8005b04:	e9c1 2300 	strd	r2, r3, [r1]
					Td=2*((qf-qi)/(vf+vi));
 8005b08:	4b78      	ldr	r3, [pc, #480]	; (8005cec <update_ScurveTraj+0x8c4>)
 8005b0a:	ed93 6b00 	vldr	d6, [r3]
 8005b0e:	4b78      	ldr	r3, [pc, #480]	; (8005cf0 <update_ScurveTraj+0x8c8>)
 8005b10:	ed93 7b00 	vldr	d7, [r3]
 8005b14:	ee36 5b47 	vsub.f64	d5, d6, d7
 8005b18:	ed97 6b08 	vldr	d6, [r7, #32]
 8005b1c:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 8005b20:	ee36 6b07 	vadd.f64	d6, d6, d7
 8005b24:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8005b28:	ee37 7b07 	vadd.f64	d7, d7, d7
 8005b2c:	4b73      	ldr	r3, [pc, #460]	; (8005cfc <update_ScurveTraj+0x8d4>)
 8005b2e:	ed83 7b00 	vstr	d7, [r3]
					Tj2=(jmax*(qf-qi)-sqrt(jmax*(jmax*(pow(qf-qi,2))+pow(vf+vi,2)*(vf-vi))))/(jmax*(vf+vi));
 8005b32:	4b6e      	ldr	r3, [pc, #440]	; (8005cec <update_ScurveTraj+0x8c4>)
 8005b34:	ed93 6b00 	vldr	d6, [r3]
 8005b38:	4b6d      	ldr	r3, [pc, #436]	; (8005cf0 <update_ScurveTraj+0x8c8>)
 8005b3a:	ed93 7b00 	vldr	d7, [r3]
 8005b3e:	ee36 6b47 	vsub.f64	d6, d6, d7
 8005b42:	ed97 7b02 	vldr	d7, [r7, #8]
 8005b46:	ee26 8b07 	vmul.f64	d8, d6, d7
 8005b4a:	4b68      	ldr	r3, [pc, #416]	; (8005cec <update_ScurveTraj+0x8c4>)
 8005b4c:	ed93 6b00 	vldr	d6, [r3]
 8005b50:	4b67      	ldr	r3, [pc, #412]	; (8005cf0 <update_ScurveTraj+0x8c8>)
 8005b52:	ed93 7b00 	vldr	d7, [r3]
 8005b56:	ee36 7b47 	vsub.f64	d7, d6, d7
 8005b5a:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8005b5e:	eeb0 0b47 	vmov.f64	d0, d7
 8005b62:	f00b febd 	bl	80118e0 <pow>
 8005b66:	eeb0 6b40 	vmov.f64	d6, d0
 8005b6a:	ed97 7b02 	vldr	d7, [r7, #8]
 8005b6e:	ee26 9b07 	vmul.f64	d9, d6, d7
 8005b72:	ed97 6b08 	vldr	d6, [r7, #32]
 8005b76:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 8005b7a:	ee36 7b07 	vadd.f64	d7, d6, d7
 8005b7e:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8005b82:	eeb0 0b47 	vmov.f64	d0, d7
 8005b86:	f00b feab 	bl	80118e0 <pow>
 8005b8a:	eeb0 5b40 	vmov.f64	d5, d0
 8005b8e:	ed97 6b08 	vldr	d6, [r7, #32]
 8005b92:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 8005b96:	ee36 7b47 	vsub.f64	d7, d6, d7
 8005b9a:	ee25 7b07 	vmul.f64	d7, d5, d7
 8005b9e:	ee39 6b07 	vadd.f64	d6, d9, d7
 8005ba2:	ed97 7b02 	vldr	d7, [r7, #8]
 8005ba6:	ee26 7b07 	vmul.f64	d7, d6, d7
 8005baa:	eeb0 0b47 	vmov.f64	d0, d7
 8005bae:	f00c f917 	bl	8011de0 <sqrt>
 8005bb2:	eeb0 7b40 	vmov.f64	d7, d0
 8005bb6:	ee38 5b47 	vsub.f64	d5, d8, d7
 8005bba:	ed97 6b08 	vldr	d6, [r7, #32]
 8005bbe:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 8005bc2:	ee36 6b07 	vadd.f64	d6, d6, d7
 8005bc6:	ed97 7b02 	vldr	d7, [r7, #8]
 8005bca:	ee26 6b07 	vmul.f64	d6, d6, d7
 8005bce:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8005bd2:	4b4c      	ldr	r3, [pc, #304]	; (8005d04 <update_ScurveTraj+0x8dc>)
 8005bd4:	ed83 7b00 	vstr	d7, [r3]
					break;
 8005bd8:	e0c2      	b.n	8005d60 <update_ScurveTraj+0x938>
				}
				if (Td<0){
 8005bda:	4b48      	ldr	r3, [pc, #288]	; (8005cfc <update_ScurveTraj+0x8d4>)
 8005bdc:	ed93 7b00 	vldr	d7, [r3]
 8005be0:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8005be4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005be8:	d400      	bmi.n	8005bec <update_ScurveTraj+0x7c4>
 8005bea:	e08d      	b.n	8005d08 <update_ScurveTraj+0x8e0>
					Td=0;
 8005bec:	4943      	ldr	r1, [pc, #268]	; (8005cfc <update_ScurveTraj+0x8d4>)
 8005bee:	f04f 0200 	mov.w	r2, #0
 8005bf2:	f04f 0300 	mov.w	r3, #0
 8005bf6:	e9c1 2300 	strd	r2, r3, [r1]
					Ta=2*((qf-qi)/(vf+vi));
 8005bfa:	4b3c      	ldr	r3, [pc, #240]	; (8005cec <update_ScurveTraj+0x8c4>)
 8005bfc:	ed93 6b00 	vldr	d6, [r3]
 8005c00:	4b3b      	ldr	r3, [pc, #236]	; (8005cf0 <update_ScurveTraj+0x8c8>)
 8005c02:	ed93 7b00 	vldr	d7, [r3]
 8005c06:	ee36 5b47 	vsub.f64	d5, d6, d7
 8005c0a:	ed97 6b08 	vldr	d6, [r7, #32]
 8005c0e:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 8005c12:	ee36 6b07 	vadd.f64	d6, d6, d7
 8005c16:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8005c1a:	ee37 7b07 	vadd.f64	d7, d7, d7
 8005c1e:	4b36      	ldr	r3, [pc, #216]	; (8005cf8 <update_ScurveTraj+0x8d0>)
 8005c20:	ed83 7b00 	vstr	d7, [r3]
					Tj1=(jmax*(qf-qi)-sqrt(jmax*(jmax*(pow(qf-qi,2))-pow(vf+vi,2)*(vf-vi))))/(jmax*(vf+vi));
 8005c24:	4b31      	ldr	r3, [pc, #196]	; (8005cec <update_ScurveTraj+0x8c4>)
 8005c26:	ed93 6b00 	vldr	d6, [r3]
 8005c2a:	4b31      	ldr	r3, [pc, #196]	; (8005cf0 <update_ScurveTraj+0x8c8>)
 8005c2c:	ed93 7b00 	vldr	d7, [r3]
 8005c30:	ee36 6b47 	vsub.f64	d6, d6, d7
 8005c34:	ed97 7b02 	vldr	d7, [r7, #8]
 8005c38:	ee26 8b07 	vmul.f64	d8, d6, d7
 8005c3c:	4b2b      	ldr	r3, [pc, #172]	; (8005cec <update_ScurveTraj+0x8c4>)
 8005c3e:	ed93 6b00 	vldr	d6, [r3]
 8005c42:	4b2b      	ldr	r3, [pc, #172]	; (8005cf0 <update_ScurveTraj+0x8c8>)
 8005c44:	ed93 7b00 	vldr	d7, [r3]
 8005c48:	ee36 7b47 	vsub.f64	d7, d6, d7
 8005c4c:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8005c50:	eeb0 0b47 	vmov.f64	d0, d7
 8005c54:	f00b fe44 	bl	80118e0 <pow>
 8005c58:	eeb0 6b40 	vmov.f64	d6, d0
 8005c5c:	ed97 7b02 	vldr	d7, [r7, #8]
 8005c60:	ee26 9b07 	vmul.f64	d9, d6, d7
 8005c64:	ed97 6b08 	vldr	d6, [r7, #32]
 8005c68:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 8005c6c:	ee36 7b07 	vadd.f64	d7, d6, d7
 8005c70:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8005c74:	eeb0 0b47 	vmov.f64	d0, d7
 8005c78:	f00b fe32 	bl	80118e0 <pow>
 8005c7c:	eeb0 5b40 	vmov.f64	d5, d0
 8005c80:	ed97 6b08 	vldr	d6, [r7, #32]
 8005c84:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 8005c88:	ee36 7b47 	vsub.f64	d7, d6, d7
 8005c8c:	ee25 7b07 	vmul.f64	d7, d5, d7
 8005c90:	ee39 6b47 	vsub.f64	d6, d9, d7
 8005c94:	ed97 7b02 	vldr	d7, [r7, #8]
 8005c98:	ee26 7b07 	vmul.f64	d7, d6, d7
 8005c9c:	eeb0 0b47 	vmov.f64	d0, d7
 8005ca0:	f00c f89e 	bl	8011de0 <sqrt>
 8005ca4:	eeb0 7b40 	vmov.f64	d7, d0
 8005ca8:	ee38 5b47 	vsub.f64	d5, d8, d7
 8005cac:	ed97 6b08 	vldr	d6, [r7, #32]
 8005cb0:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 8005cb4:	ee36 6b07 	vadd.f64	d6, d6, d7
 8005cb8:	ed97 7b02 	vldr	d7, [r7, #8]
 8005cbc:	ee26 6b07 	vmul.f64	d6, d6, d7
 8005cc0:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8005cc4:	4b0e      	ldr	r3, [pc, #56]	; (8005d00 <update_ScurveTraj+0x8d8>)
 8005cc6:	ed83 7b00 	vstr	d7, [r3]
					Tj2=0;
 8005cca:	490e      	ldr	r1, [pc, #56]	; (8005d04 <update_ScurveTraj+0x8dc>)
 8005ccc:	f04f 0200 	mov.w	r2, #0
 8005cd0:	f04f 0300 	mov.w	r3, #0
 8005cd4:	e9c1 2300 	strd	r2, r3, [r1]
					break;
 8005cd8:	e042      	b.n	8005d60 <update_ScurveTraj+0x938>
 8005cda:	bf00      	nop
 8005cdc:	f3af 8000 	nop.w
 8005ce0:	7ae147ae 	.word	0x7ae147ae
 8005ce4:	3fefae14 	.word	0x3fefae14
 8005ce8:	240008c0 	.word	0x240008c0
 8005cec:	240008d8 	.word	0x240008d8
 8005cf0:	240008d0 	.word	0x240008d0
 8005cf4:	240008c8 	.word	0x240008c8
 8005cf8:	24000898 	.word	0x24000898
 8005cfc:	240008a0 	.word	0x240008a0
 8005d00:	240008b0 	.word	0x240008b0
 8005d04:	240008b8 	.word	0x240008b8
			while (!(Ta>2*Tj && Td>2*Tj)){
 8005d08:	4b33      	ldr	r3, [pc, #204]	; (8005dd8 <update_ScurveTraj+0x9b0>)
 8005d0a:	ed93 7b00 	vldr	d7, [r3]
 8005d0e:	ee37 6b07 	vadd.f64	d6, d7, d7
 8005d12:	4b32      	ldr	r3, [pc, #200]	; (8005ddc <update_ScurveTraj+0x9b4>)
 8005d14:	ed93 7b00 	vldr	d7, [r3]
 8005d18:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8005d1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005d20:	bf4c      	ite	mi
 8005d22:	2301      	movmi	r3, #1
 8005d24:	2300      	movpl	r3, #0
 8005d26:	b2db      	uxtb	r3, r3
 8005d28:	f083 0301 	eor.w	r3, r3, #1
 8005d2c:	b2db      	uxtb	r3, r3
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	f47f ae28 	bne.w	8005984 <update_ScurveTraj+0x55c>
 8005d34:	4b28      	ldr	r3, [pc, #160]	; (8005dd8 <update_ScurveTraj+0x9b0>)
 8005d36:	ed93 7b00 	vldr	d7, [r3]
 8005d3a:	ee37 6b07 	vadd.f64	d6, d7, d7
 8005d3e:	4b28      	ldr	r3, [pc, #160]	; (8005de0 <update_ScurveTraj+0x9b8>)
 8005d40:	ed93 7b00 	vldr	d7, [r3]
 8005d44:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8005d48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005d4c:	bf4c      	ite	mi
 8005d4e:	2301      	movmi	r3, #1
 8005d50:	2300      	movpl	r3, #0
 8005d52:	b2db      	uxtb	r3, r3
 8005d54:	f083 0301 	eor.w	r3, r3, #1
 8005d58:	b2db      	uxtb	r3, r3
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	f47f ae12 	bne.w	8005984 <update_ScurveTraj+0x55c>
				}
			}
		}
	}

	*(params)=Tj1;
 8005d60:	4b20      	ldr	r3, [pc, #128]	; (8005de4 <update_ScurveTraj+0x9bc>)
 8005d62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d66:	6879      	ldr	r1, [r7, #4]
 8005d68:	e9c1 2300 	strd	r2, r3, [r1]
	*(params+1)=Tj2;
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	f103 0108 	add.w	r1, r3, #8
 8005d72:	4b1d      	ldr	r3, [pc, #116]	; (8005de8 <update_ScurveTraj+0x9c0>)
 8005d74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d78:	e9c1 2300 	strd	r2, r3, [r1]
	*(params+2)=Tj;
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	f103 0110 	add.w	r1, r3, #16
 8005d82:	4b15      	ldr	r3, [pc, #84]	; (8005dd8 <update_ScurveTraj+0x9b0>)
 8005d84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d88:	e9c1 2300 	strd	r2, r3, [r1]
	*(params+3)=Ta;
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	f103 0118 	add.w	r1, r3, #24
 8005d92:	4b12      	ldr	r3, [pc, #72]	; (8005ddc <update_ScurveTraj+0x9b4>)
 8005d94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d98:	e9c1 2300 	strd	r2, r3, [r1]
	*(params+4)=Td;
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	f103 0120 	add.w	r1, r3, #32
 8005da2:	4b0f      	ldr	r3, [pc, #60]	; (8005de0 <update_ScurveTraj+0x9b8>)
 8005da4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005da8:	e9c1 2300 	strd	r2, r3, [r1]
	*(params+5)=Tv;
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	f103 0128 	add.w	r1, r3, #40	; 0x28
 8005db2:	4b0e      	ldr	r3, [pc, #56]	; (8005dec <update_ScurveTraj+0x9c4>)
 8005db4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005db8:	e9c1 2300 	strd	r2, r3, [r1]
	*(params+6)=T;
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8005dc2:	4b0b      	ldr	r3, [pc, #44]	; (8005df0 <update_ScurveTraj+0x9c8>)
 8005dc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005dc8:	e9c1 2300 	strd	r2, r3, [r1]

}
 8005dcc:	bf00      	nop
 8005dce:	3748      	adds	r7, #72	; 0x48
 8005dd0:	46bd      	mov	sp, r7
 8005dd2:	ecbd 8b04 	vpop	{d8-d9}
 8005dd6:	bd80      	pop	{r7, pc}
 8005dd8:	240008c0 	.word	0x240008c0
 8005ddc:	24000898 	.word	0x24000898
 8005de0:	240008a0 	.word	0x240008a0
 8005de4:	240008b0 	.word	0x240008b0
 8005de8:	240008b8 	.word	0x240008b8
 8005dec:	240008a8 	.word	0x240008a8
 8005df0:	24000890 	.word	0x24000890
 8005df4:	00000000 	.word	0x00000000

08005df8 <setProfilTimer>:


void setProfilTimer(void){
 8005df8:	b480      	push	{r7}
 8005dfa:	b083      	sub	sp, #12
 8005dfc:	af00      	add	r7, sp, #0

	motor1.rpm = motor1.omega * RADs_TO_RPM;
 8005dfe:	4bb8      	ldr	r3, [pc, #736]	; (80060e0 <setProfilTimer+0x2e8>)
 8005e00:	ed93 7b02 	vldr	d7, [r3, #8]
 8005e04:	ed9f 6bae 	vldr	d6, [pc, #696]	; 80060c0 <setProfilTimer+0x2c8>
 8005e08:	ee27 7b06 	vmul.f64	d7, d7, d6
 8005e0c:	4bb4      	ldr	r3, [pc, #720]	; (80060e0 <setProfilTimer+0x2e8>)
 8005e0e:	ed83 7b04 	vstr	d7, [r3, #16]
	motor2.rpm = motor2.omega * RADs_TO_RPM;
 8005e12:	4bb4      	ldr	r3, [pc, #720]	; (80060e4 <setProfilTimer+0x2ec>)
 8005e14:	ed93 7b02 	vldr	d7, [r3, #8]
 8005e18:	ed9f 6ba9 	vldr	d6, [pc, #676]	; 80060c0 <setProfilTimer+0x2c8>
 8005e1c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8005e20:	4bb0      	ldr	r3, [pc, #704]	; (80060e4 <setProfilTimer+0x2ec>)
 8005e22:	ed83 7b04 	vstr	d7, [r3, #16]
	motor3.rpm = motor3.omega * RADs_TO_RPM;
 8005e26:	4bb0      	ldr	r3, [pc, #704]	; (80060e8 <setProfilTimer+0x2f0>)
 8005e28:	ed93 7b02 	vldr	d7, [r3, #8]
 8005e2c:	ed9f 6ba4 	vldr	d6, [pc, #656]	; 80060c0 <setProfilTimer+0x2c8>
 8005e30:	ee27 7b06 	vmul.f64	d7, d7, d6
 8005e34:	4bac      	ldr	r3, [pc, #688]	; (80060e8 <setProfilTimer+0x2f0>)
 8005e36:	ed83 7b04 	vstr	d7, [r3, #16]


    period[0] = COUNTERPERIOD(motor1.rpm);
 8005e3a:	4bac      	ldr	r3, [pc, #688]	; (80060ec <setProfilTimer+0x2f4>)
 8005e3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e3e:	ee07 3a90 	vmov	s15, r3
 8005e42:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8005e46:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8005e4a:	ee37 7b06 	vadd.f64	d7, d7, d6
 8005e4e:	ed9f 5b9e 	vldr	d5, [pc, #632]	; 80060c8 <setProfilTimer+0x2d0>
 8005e52:	ee85 6b07 	vdiv.f64	d6, d5, d7
 8005e56:	4ba2      	ldr	r3, [pc, #648]	; (80060e0 <setProfilTimer+0x2e8>)
 8005e58:	ed93 7b04 	vldr	d7, [r3, #16]
 8005e5c:	ed9f 5b9c 	vldr	d5, [pc, #624]	; 80060d0 <setProfilTimer+0x2d8>
 8005e60:	ee27 5b05 	vmul.f64	d5, d7, d5
 8005e64:	ed9f 4b9c 	vldr	d4, [pc, #624]	; 80060d8 <setProfilTimer+0x2e0>
 8005e68:	ee84 7b05 	vdiv.f64	d7, d4, d5
 8005e6c:	ee26 7b07 	vmul.f64	d7, d6, d7
 8005e70:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8005e74:	ee37 7b46 	vsub.f64	d7, d7, d6
 8005e78:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8005e7c:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8005e80:	4b9b      	ldr	r3, [pc, #620]	; (80060f0 <setProfilTimer+0x2f8>)
 8005e82:	ed83 7b00 	vstr	d7, [r3]
    period[1] = COUNTERPERIOD(motor2.rpm);
 8005e86:	4b99      	ldr	r3, [pc, #612]	; (80060ec <setProfilTimer+0x2f4>)
 8005e88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e8a:	ee07 3a90 	vmov	s15, r3
 8005e8e:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8005e92:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8005e96:	ee37 7b06 	vadd.f64	d7, d7, d6
 8005e9a:	ed9f 5b8b 	vldr	d5, [pc, #556]	; 80060c8 <setProfilTimer+0x2d0>
 8005e9e:	ee85 6b07 	vdiv.f64	d6, d5, d7
 8005ea2:	4b90      	ldr	r3, [pc, #576]	; (80060e4 <setProfilTimer+0x2ec>)
 8005ea4:	ed93 7b04 	vldr	d7, [r3, #16]
 8005ea8:	ed9f 5b89 	vldr	d5, [pc, #548]	; 80060d0 <setProfilTimer+0x2d8>
 8005eac:	ee27 5b05 	vmul.f64	d5, d7, d5
 8005eb0:	ed9f 4b89 	vldr	d4, [pc, #548]	; 80060d8 <setProfilTimer+0x2e0>
 8005eb4:	ee84 7b05 	vdiv.f64	d7, d4, d5
 8005eb8:	ee26 7b07 	vmul.f64	d7, d6, d7
 8005ebc:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8005ec0:	ee37 7b46 	vsub.f64	d7, d7, d6
 8005ec4:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8005ec8:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8005ecc:	4b88      	ldr	r3, [pc, #544]	; (80060f0 <setProfilTimer+0x2f8>)
 8005ece:	ed83 7b02 	vstr	d7, [r3, #8]
    period[3] = COUNTERPERIOD(motor3.rpm);
 8005ed2:	4b86      	ldr	r3, [pc, #536]	; (80060ec <setProfilTimer+0x2f4>)
 8005ed4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ed6:	ee07 3a90 	vmov	s15, r3
 8005eda:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8005ede:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8005ee2:	ee37 7b06 	vadd.f64	d7, d7, d6
 8005ee6:	ed9f 5b78 	vldr	d5, [pc, #480]	; 80060c8 <setProfilTimer+0x2d0>
 8005eea:	ee85 6b07 	vdiv.f64	d6, d5, d7
 8005eee:	4b7e      	ldr	r3, [pc, #504]	; (80060e8 <setProfilTimer+0x2f0>)
 8005ef0:	ed93 7b04 	vldr	d7, [r3, #16]
 8005ef4:	ed9f 5b76 	vldr	d5, [pc, #472]	; 80060d0 <setProfilTimer+0x2d8>
 8005ef8:	ee27 5b05 	vmul.f64	d5, d7, d5
 8005efc:	ed9f 4b76 	vldr	d4, [pc, #472]	; 80060d8 <setProfilTimer+0x2e0>
 8005f00:	ee84 7b05 	vdiv.f64	d7, d4, d5
 8005f04:	ee26 7b07 	vmul.f64	d7, d6, d7
 8005f08:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8005f0c:	ee37 7b46 	vsub.f64	d7, d7, d6
 8005f10:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8005f14:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8005f18:	4b75      	ldr	r3, [pc, #468]	; (80060f0 <setProfilTimer+0x2f8>)
 8005f1a:	ed83 7b06 	vstr	d7, [r3, #24]

	// Calculo el error por casteo a int, y cuando supero la unidad, lo compenzo

	for (int i = 0; i < 3; i++) {
 8005f1e:	2300      	movs	r3, #0
 8005f20:	607b      	str	r3, [r7, #4]
 8005f22:	e05b      	b.n	8005fdc <setProfilTimer+0x1e4>
		periodError[i] = period[i] - (double)((int32_t) period[i]);
 8005f24:	4a72      	ldr	r2, [pc, #456]	; (80060f0 <setProfilTimer+0x2f8>)
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	00db      	lsls	r3, r3, #3
 8005f2a:	4413      	add	r3, r2
 8005f2c:	ed93 6b00 	vldr	d6, [r3]
 8005f30:	4a6f      	ldr	r2, [pc, #444]	; (80060f0 <setProfilTimer+0x2f8>)
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	00db      	lsls	r3, r3, #3
 8005f36:	4413      	add	r3, r2
 8005f38:	ed93 7b00 	vldr	d7, [r3]
 8005f3c:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8005f40:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8005f44:	ee36 7b47 	vsub.f64	d7, d6, d7
 8005f48:	4a6a      	ldr	r2, [pc, #424]	; (80060f4 <setProfilTimer+0x2fc>)
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	00db      	lsls	r3, r3, #3
 8005f4e:	4413      	add	r3, r2
 8005f50:	ed83 7b00 	vstr	d7, [r3]
		accumulatedError[i] += periodError[i];
 8005f54:	4a68      	ldr	r2, [pc, #416]	; (80060f8 <setProfilTimer+0x300>)
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	00db      	lsls	r3, r3, #3
 8005f5a:	4413      	add	r3, r2
 8005f5c:	ed93 6b00 	vldr	d6, [r3]
 8005f60:	4a64      	ldr	r2, [pc, #400]	; (80060f4 <setProfilTimer+0x2fc>)
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	00db      	lsls	r3, r3, #3
 8005f66:	4413      	add	r3, r2
 8005f68:	ed93 7b00 	vldr	d7, [r3]
 8005f6c:	ee36 7b07 	vadd.f64	d7, d6, d7
 8005f70:	4a61      	ldr	r2, [pc, #388]	; (80060f8 <setProfilTimer+0x300>)
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	00db      	lsls	r3, r3, #3
 8005f76:	4413      	add	r3, r2
 8005f78:	ed83 7b00 	vstr	d7, [r3]
		if (accumulatedError[i] > 1) {
 8005f7c:	4a5e      	ldr	r2, [pc, #376]	; (80060f8 <setProfilTimer+0x300>)
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	00db      	lsls	r3, r3, #3
 8005f82:	4413      	add	r3, r2
 8005f84:	ed93 7b00 	vldr	d7, [r3]
 8005f88:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8005f8c:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8005f90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005f94:	dd1f      	ble.n	8005fd6 <setProfilTimer+0x1de>
			period[i] += 1;
 8005f96:	4a56      	ldr	r2, [pc, #344]	; (80060f0 <setProfilTimer+0x2f8>)
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	00db      	lsls	r3, r3, #3
 8005f9c:	4413      	add	r3, r2
 8005f9e:	ed93 7b00 	vldr	d7, [r3]
 8005fa2:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8005fa6:	ee37 7b06 	vadd.f64	d7, d7, d6
 8005faa:	4a51      	ldr	r2, [pc, #324]	; (80060f0 <setProfilTimer+0x2f8>)
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	00db      	lsls	r3, r3, #3
 8005fb0:	4413      	add	r3, r2
 8005fb2:	ed83 7b00 	vstr	d7, [r3]
			accumulatedError[i] -=  1;
 8005fb6:	4a50      	ldr	r2, [pc, #320]	; (80060f8 <setProfilTimer+0x300>)
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	00db      	lsls	r3, r3, #3
 8005fbc:	4413      	add	r3, r2
 8005fbe:	ed93 7b00 	vldr	d7, [r3]
 8005fc2:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8005fc6:	ee37 7b46 	vsub.f64	d7, d7, d6
 8005fca:	4a4b      	ldr	r2, [pc, #300]	; (80060f8 <setProfilTimer+0x300>)
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	00db      	lsls	r3, r3, #3
 8005fd0:	4413      	add	r3, r2
 8005fd2:	ed83 7b00 	vstr	d7, [r3]
	for (int i = 0; i < 3; i++) {
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	3301      	adds	r3, #1
 8005fda:	607b      	str	r3, [r7, #4]
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	2b02      	cmp	r3, #2
 8005fe0:	dda0      	ble.n	8005f24 <setProfilTimer+0x12c>
		}
	}

    //Escritura del registro ARR
    __HAL_TIM_SET_AUTORELOAD(&htim12,period[0]);
 8005fe2:	4b43      	ldr	r3, [pc, #268]	; (80060f0 <setProfilTimer+0x2f8>)
 8005fe4:	ed93 7b00 	vldr	d7, [r3]
 8005fe8:	4b44      	ldr	r3, [pc, #272]	; (80060fc <setProfilTimer+0x304>)
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8005ff0:	ee17 2a90 	vmov	r2, s15
 8005ff4:	62da      	str	r2, [r3, #44]	; 0x2c
 8005ff6:	4b3e      	ldr	r3, [pc, #248]	; (80060f0 <setProfilTimer+0x2f8>)
 8005ff8:	ed93 7b00 	vldr	d7, [r3]
 8005ffc:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8006000:	ee17 2a90 	vmov	r2, s15
 8006004:	4b3d      	ldr	r3, [pc, #244]	; (80060fc <setProfilTimer+0x304>)
 8006006:	60da      	str	r2, [r3, #12]
	__HAL_TIM_SET_AUTORELOAD(&htim13,period[1]);
 8006008:	4b39      	ldr	r3, [pc, #228]	; (80060f0 <setProfilTimer+0x2f8>)
 800600a:	ed93 7b02 	vldr	d7, [r3, #8]
 800600e:	4b3c      	ldr	r3, [pc, #240]	; (8006100 <setProfilTimer+0x308>)
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8006016:	ee17 2a90 	vmov	r2, s15
 800601a:	62da      	str	r2, [r3, #44]	; 0x2c
 800601c:	4b34      	ldr	r3, [pc, #208]	; (80060f0 <setProfilTimer+0x2f8>)
 800601e:	ed93 7b02 	vldr	d7, [r3, #8]
 8006022:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8006026:	ee17 2a90 	vmov	r2, s15
 800602a:	4b35      	ldr	r3, [pc, #212]	; (8006100 <setProfilTimer+0x308>)
 800602c:	60da      	str	r2, [r3, #12]
	__HAL_TIM_SET_AUTORELOAD(&htim14,period[3]);
 800602e:	4b30      	ldr	r3, [pc, #192]	; (80060f0 <setProfilTimer+0x2f8>)
 8006030:	ed93 7b06 	vldr	d7, [r3, #24]
 8006034:	4b33      	ldr	r3, [pc, #204]	; (8006104 <setProfilTimer+0x30c>)
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800603c:	ee17 2a90 	vmov	r2, s15
 8006040:	62da      	str	r2, [r3, #44]	; 0x2c
 8006042:	4b2b      	ldr	r3, [pc, #172]	; (80060f0 <setProfilTimer+0x2f8>)
 8006044:	ed93 7b06 	vldr	d7, [r3, #24]
 8006048:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800604c:	ee17 2a90 	vmov	r2, s15
 8006050:	4b2c      	ldr	r3, [pc, #176]	; (8006104 <setProfilTimer+0x30c>)
 8006052:	60da      	str	r2, [r3, #12]

	TIM12->CCR1 = (uint32_t)((double)(TIM12->ARR) / 2.0);
 8006054:	4b25      	ldr	r3, [pc, #148]	; (80060ec <setProfilTimer+0x2f4>)
 8006056:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006058:	ee07 3a90 	vmov	s15, r3
 800605c:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 8006060:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8006064:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8006068:	4b20      	ldr	r3, [pc, #128]	; (80060ec <setProfilTimer+0x2f4>)
 800606a:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800606e:	ee17 2a90 	vmov	r2, s15
 8006072:	635a      	str	r2, [r3, #52]	; 0x34
	TIM13->CCR1 = (uint32_t)((double)(TIM13->ARR) / 2.0);
 8006074:	4b24      	ldr	r3, [pc, #144]	; (8006108 <setProfilTimer+0x310>)
 8006076:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006078:	ee07 3a90 	vmov	s15, r3
 800607c:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 8006080:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8006084:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8006088:	4b1f      	ldr	r3, [pc, #124]	; (8006108 <setProfilTimer+0x310>)
 800608a:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800608e:	ee17 2a90 	vmov	r2, s15
 8006092:	635a      	str	r2, [r3, #52]	; 0x34
	TIM14->CCR1 = (uint32_t)((double)(TIM14->ARR) / 2.0);
 8006094:	4b1d      	ldr	r3, [pc, #116]	; (800610c <setProfilTimer+0x314>)
 8006096:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006098:	ee07 3a90 	vmov	s15, r3
 800609c:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 80060a0:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 80060a4:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80060a8:	4b18      	ldr	r3, [pc, #96]	; (800610c <setProfilTimer+0x314>)
 80060aa:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80060ae:	ee17 2a90 	vmov	r2, s15
 80060b2:	635a      	str	r2, [r3, #52]	; 0x34


}
 80060b4:	bf00      	nop
 80060b6:	370c      	adds	r7, #12
 80060b8:	46bd      	mov	sp, r7
 80060ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060be:	4770      	bx	lr
 80060c0:	66ed2a99 	.word	0x66ed2a99
 80060c4:	4023193d 	.word	0x4023193d
 80060c8:	00000000 	.word	0x00000000
 80060cc:	418e8480 	.word	0x418e8480
 80060d0:	00000000 	.word	0x00000000
 80060d4:	40bf4000 	.word	0x40bf4000
 80060d8:	00000000 	.word	0x00000000
 80060dc:	404e0000 	.word	0x404e0000
 80060e0:	24000368 	.word	0x24000368
 80060e4:	240003b0 	.word	0x240003b0
 80060e8:	240003f8 	.word	0x240003f8
 80060ec:	40001800 	.word	0x40001800
 80060f0:	24000828 	.word	0x24000828
 80060f4:	24000858 	.word	0x24000858
 80060f8:	24000840 	.word	0x24000840
 80060fc:	240006f8 	.word	0x240006f8
 8006100:	24000744 	.word	0x24000744
 8006104:	24000790 	.word	0x24000790
 8006108:	40001c00 	.word	0x40001c00
 800610c:	40002000 	.word	0x40002000

08006110 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart3;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8006110:	b580      	push	{r7, lr}
 8006112:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8006114:	4b22      	ldr	r3, [pc, #136]	; (80061a0 <MX_USART1_UART_Init+0x90>)
 8006116:	4a23      	ldr	r2, [pc, #140]	; (80061a4 <MX_USART1_UART_Init+0x94>)
 8006118:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800611a:	4b21      	ldr	r3, [pc, #132]	; (80061a0 <MX_USART1_UART_Init+0x90>)
 800611c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8006120:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8006122:	4b1f      	ldr	r3, [pc, #124]	; (80061a0 <MX_USART1_UART_Init+0x90>)
 8006124:	2200      	movs	r2, #0
 8006126:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8006128:	4b1d      	ldr	r3, [pc, #116]	; (80061a0 <MX_USART1_UART_Init+0x90>)
 800612a:	2200      	movs	r2, #0
 800612c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800612e:	4b1c      	ldr	r3, [pc, #112]	; (80061a0 <MX_USART1_UART_Init+0x90>)
 8006130:	2200      	movs	r2, #0
 8006132:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8006134:	4b1a      	ldr	r3, [pc, #104]	; (80061a0 <MX_USART1_UART_Init+0x90>)
 8006136:	220c      	movs	r2, #12
 8006138:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800613a:	4b19      	ldr	r3, [pc, #100]	; (80061a0 <MX_USART1_UART_Init+0x90>)
 800613c:	2200      	movs	r2, #0
 800613e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8006140:	4b17      	ldr	r3, [pc, #92]	; (80061a0 <MX_USART1_UART_Init+0x90>)
 8006142:	2200      	movs	r2, #0
 8006144:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8006146:	4b16      	ldr	r3, [pc, #88]	; (80061a0 <MX_USART1_UART_Init+0x90>)
 8006148:	2200      	movs	r2, #0
 800614a:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800614c:	4b14      	ldr	r3, [pc, #80]	; (80061a0 <MX_USART1_UART_Init+0x90>)
 800614e:	2200      	movs	r2, #0
 8006150:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8006152:	4b13      	ldr	r3, [pc, #76]	; (80061a0 <MX_USART1_UART_Init+0x90>)
 8006154:	2200      	movs	r2, #0
 8006156:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8006158:	4811      	ldr	r0, [pc, #68]	; (80061a0 <MX_USART1_UART_Init+0x90>)
 800615a:	f005 fe81 	bl	800be60 <HAL_UART_Init>
 800615e:	4603      	mov	r3, r0
 8006160:	2b00      	cmp	r3, #0
 8006162:	d001      	beq.n	8006168 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8006164:	f7fc fd34 	bl	8002bd0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8006168:	2100      	movs	r1, #0
 800616a:	480d      	ldr	r0, [pc, #52]	; (80061a0 <MX_USART1_UART_Init+0x90>)
 800616c:	f008 f90b 	bl	800e386 <HAL_UARTEx_SetTxFifoThreshold>
 8006170:	4603      	mov	r3, r0
 8006172:	2b00      	cmp	r3, #0
 8006174:	d001      	beq.n	800617a <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8006176:	f7fc fd2b 	bl	8002bd0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800617a:	2100      	movs	r1, #0
 800617c:	4808      	ldr	r0, [pc, #32]	; (80061a0 <MX_USART1_UART_Init+0x90>)
 800617e:	f008 f940 	bl	800e402 <HAL_UARTEx_SetRxFifoThreshold>
 8006182:	4603      	mov	r3, r0
 8006184:	2b00      	cmp	r3, #0
 8006186:	d001      	beq.n	800618c <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8006188:	f7fc fd22 	bl	8002bd0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 800618c:	4804      	ldr	r0, [pc, #16]	; (80061a0 <MX_USART1_UART_Init+0x90>)
 800618e:	f008 f8c1 	bl	800e314 <HAL_UARTEx_DisableFifoMode>
 8006192:	4603      	mov	r3, r0
 8006194:	2b00      	cmp	r3, #0
 8006196:	d001      	beq.n	800619c <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8006198:	f7fc fd1a 	bl	8002bd0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800619c:	bf00      	nop
 800619e:	bd80      	pop	{r7, pc}
 80061a0:	240008e0 	.word	0x240008e0
 80061a4:	40011000 	.word	0x40011000

080061a8 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80061a8:	b580      	push	{r7, lr}
 80061aa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80061ac:	4b22      	ldr	r3, [pc, #136]	; (8006238 <MX_USART2_UART_Init+0x90>)
 80061ae:	4a23      	ldr	r2, [pc, #140]	; (800623c <MX_USART2_UART_Init+0x94>)
 80061b0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80061b2:	4b21      	ldr	r3, [pc, #132]	; (8006238 <MX_USART2_UART_Init+0x90>)
 80061b4:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80061b8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80061ba:	4b1f      	ldr	r3, [pc, #124]	; (8006238 <MX_USART2_UART_Init+0x90>)
 80061bc:	2200      	movs	r2, #0
 80061be:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80061c0:	4b1d      	ldr	r3, [pc, #116]	; (8006238 <MX_USART2_UART_Init+0x90>)
 80061c2:	2200      	movs	r2, #0
 80061c4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80061c6:	4b1c      	ldr	r3, [pc, #112]	; (8006238 <MX_USART2_UART_Init+0x90>)
 80061c8:	2200      	movs	r2, #0
 80061ca:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80061cc:	4b1a      	ldr	r3, [pc, #104]	; (8006238 <MX_USART2_UART_Init+0x90>)
 80061ce:	220c      	movs	r2, #12
 80061d0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80061d2:	4b19      	ldr	r3, [pc, #100]	; (8006238 <MX_USART2_UART_Init+0x90>)
 80061d4:	2200      	movs	r2, #0
 80061d6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80061d8:	4b17      	ldr	r3, [pc, #92]	; (8006238 <MX_USART2_UART_Init+0x90>)
 80061da:	2200      	movs	r2, #0
 80061dc:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80061de:	4b16      	ldr	r3, [pc, #88]	; (8006238 <MX_USART2_UART_Init+0x90>)
 80061e0:	2200      	movs	r2, #0
 80061e2:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80061e4:	4b14      	ldr	r3, [pc, #80]	; (8006238 <MX_USART2_UART_Init+0x90>)
 80061e6:	2200      	movs	r2, #0
 80061e8:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80061ea:	4b13      	ldr	r3, [pc, #76]	; (8006238 <MX_USART2_UART_Init+0x90>)
 80061ec:	2200      	movs	r2, #0
 80061ee:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80061f0:	4811      	ldr	r0, [pc, #68]	; (8006238 <MX_USART2_UART_Init+0x90>)
 80061f2:	f005 fe35 	bl	800be60 <HAL_UART_Init>
 80061f6:	4603      	mov	r3, r0
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d001      	beq.n	8006200 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 80061fc:	f7fc fce8 	bl	8002bd0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8006200:	2100      	movs	r1, #0
 8006202:	480d      	ldr	r0, [pc, #52]	; (8006238 <MX_USART2_UART_Init+0x90>)
 8006204:	f008 f8bf 	bl	800e386 <HAL_UARTEx_SetTxFifoThreshold>
 8006208:	4603      	mov	r3, r0
 800620a:	2b00      	cmp	r3, #0
 800620c:	d001      	beq.n	8006212 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 800620e:	f7fc fcdf 	bl	8002bd0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8006212:	2100      	movs	r1, #0
 8006214:	4808      	ldr	r0, [pc, #32]	; (8006238 <MX_USART2_UART_Init+0x90>)
 8006216:	f008 f8f4 	bl	800e402 <HAL_UARTEx_SetRxFifoThreshold>
 800621a:	4603      	mov	r3, r0
 800621c:	2b00      	cmp	r3, #0
 800621e:	d001      	beq.n	8006224 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8006220:	f7fc fcd6 	bl	8002bd0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8006224:	4804      	ldr	r0, [pc, #16]	; (8006238 <MX_USART2_UART_Init+0x90>)
 8006226:	f008 f875 	bl	800e314 <HAL_UARTEx_DisableFifoMode>
 800622a:	4603      	mov	r3, r0
 800622c:	2b00      	cmp	r3, #0
 800622e:	d001      	beq.n	8006234 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8006230:	f7fc fcce 	bl	8002bd0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8006234:	bf00      	nop
 8006236:	bd80      	pop	{r7, pc}
 8006238:	24000970 	.word	0x24000970
 800623c:	40004400 	.word	0x40004400

08006240 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8006240:	b580      	push	{r7, lr}
 8006242:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8006244:	4b22      	ldr	r3, [pc, #136]	; (80062d0 <MX_USART3_UART_Init+0x90>)
 8006246:	4a23      	ldr	r2, [pc, #140]	; (80062d4 <MX_USART3_UART_Init+0x94>)
 8006248:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 800624a:	4b21      	ldr	r3, [pc, #132]	; (80062d0 <MX_USART3_UART_Init+0x90>)
 800624c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8006250:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8006252:	4b1f      	ldr	r3, [pc, #124]	; (80062d0 <MX_USART3_UART_Init+0x90>)
 8006254:	2200      	movs	r2, #0
 8006256:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8006258:	4b1d      	ldr	r3, [pc, #116]	; (80062d0 <MX_USART3_UART_Init+0x90>)
 800625a:	2200      	movs	r2, #0
 800625c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800625e:	4b1c      	ldr	r3, [pc, #112]	; (80062d0 <MX_USART3_UART_Init+0x90>)
 8006260:	2200      	movs	r2, #0
 8006262:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8006264:	4b1a      	ldr	r3, [pc, #104]	; (80062d0 <MX_USART3_UART_Init+0x90>)
 8006266:	220c      	movs	r2, #12
 8006268:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800626a:	4b19      	ldr	r3, [pc, #100]	; (80062d0 <MX_USART3_UART_Init+0x90>)
 800626c:	2200      	movs	r2, #0
 800626e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8006270:	4b17      	ldr	r3, [pc, #92]	; (80062d0 <MX_USART3_UART_Init+0x90>)
 8006272:	2200      	movs	r2, #0
 8006274:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8006276:	4b16      	ldr	r3, [pc, #88]	; (80062d0 <MX_USART3_UART_Init+0x90>)
 8006278:	2200      	movs	r2, #0
 800627a:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800627c:	4b14      	ldr	r3, [pc, #80]	; (80062d0 <MX_USART3_UART_Init+0x90>)
 800627e:	2200      	movs	r2, #0
 8006280:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8006282:	4b13      	ldr	r3, [pc, #76]	; (80062d0 <MX_USART3_UART_Init+0x90>)
 8006284:	2200      	movs	r2, #0
 8006286:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8006288:	4811      	ldr	r0, [pc, #68]	; (80062d0 <MX_USART3_UART_Init+0x90>)
 800628a:	f005 fde9 	bl	800be60 <HAL_UART_Init>
 800628e:	4603      	mov	r3, r0
 8006290:	2b00      	cmp	r3, #0
 8006292:	d001      	beq.n	8006298 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8006294:	f7fc fc9c 	bl	8002bd0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8006298:	2100      	movs	r1, #0
 800629a:	480d      	ldr	r0, [pc, #52]	; (80062d0 <MX_USART3_UART_Init+0x90>)
 800629c:	f008 f873 	bl	800e386 <HAL_UARTEx_SetTxFifoThreshold>
 80062a0:	4603      	mov	r3, r0
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d001      	beq.n	80062aa <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 80062a6:	f7fc fc93 	bl	8002bd0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80062aa:	2100      	movs	r1, #0
 80062ac:	4808      	ldr	r0, [pc, #32]	; (80062d0 <MX_USART3_UART_Init+0x90>)
 80062ae:	f008 f8a8 	bl	800e402 <HAL_UARTEx_SetRxFifoThreshold>
 80062b2:	4603      	mov	r3, r0
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d001      	beq.n	80062bc <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 80062b8:	f7fc fc8a 	bl	8002bd0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80062bc:	4804      	ldr	r0, [pc, #16]	; (80062d0 <MX_USART3_UART_Init+0x90>)
 80062be:	f008 f829 	bl	800e314 <HAL_UARTEx_DisableFifoMode>
 80062c2:	4603      	mov	r3, r0
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d001      	beq.n	80062cc <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 80062c8:	f7fc fc82 	bl	8002bd0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80062cc:	bf00      	nop
 80062ce:	bd80      	pop	{r7, pc}
 80062d0:	24000a00 	.word	0x24000a00
 80062d4:	40004800 	.word	0x40004800

080062d8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80062d8:	b580      	push	{r7, lr}
 80062da:	b0be      	sub	sp, #248	; 0xf8
 80062dc:	af00      	add	r7, sp, #0
 80062de:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80062e0:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80062e4:	2200      	movs	r2, #0
 80062e6:	601a      	str	r2, [r3, #0]
 80062e8:	605a      	str	r2, [r3, #4]
 80062ea:	609a      	str	r2, [r3, #8]
 80062ec:	60da      	str	r2, [r3, #12]
 80062ee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80062f0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80062f4:	22bc      	movs	r2, #188	; 0xbc
 80062f6:	2100      	movs	r1, #0
 80062f8:	4618      	mov	r0, r3
 80062fa:	f008 fda1 	bl	800ee40 <memset>
  if(uartHandle->Instance==USART1)
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	4a84      	ldr	r2, [pc, #528]	; (8006514 <HAL_UART_MspInit+0x23c>)
 8006304:	4293      	cmp	r3, r2
 8006306:	d168      	bne.n	80063da <HAL_UART_MspInit+0x102>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8006308:	2301      	movs	r3, #1
 800630a:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 800630c:	2300      	movs	r3, #0
 800630e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8006312:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006316:	4618      	mov	r0, r3
 8006318:	f002 fa8c 	bl	8008834 <HAL_RCCEx_PeriphCLKConfig>
 800631c:	4603      	mov	r3, r0
 800631e:	2b00      	cmp	r3, #0
 8006320:	d001      	beq.n	8006326 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8006322:	f7fc fc55 	bl	8002bd0 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8006326:	4b7c      	ldr	r3, [pc, #496]	; (8006518 <HAL_UART_MspInit+0x240>)
 8006328:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800632c:	4a7a      	ldr	r2, [pc, #488]	; (8006518 <HAL_UART_MspInit+0x240>)
 800632e:	f043 0310 	orr.w	r3, r3, #16
 8006332:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8006336:	4b78      	ldr	r3, [pc, #480]	; (8006518 <HAL_UART_MspInit+0x240>)
 8006338:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800633c:	f003 0310 	and.w	r3, r3, #16
 8006340:	627b      	str	r3, [r7, #36]	; 0x24
 8006342:	6a7b      	ldr	r3, [r7, #36]	; 0x24

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006344:	4b74      	ldr	r3, [pc, #464]	; (8006518 <HAL_UART_MspInit+0x240>)
 8006346:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800634a:	4a73      	ldr	r2, [pc, #460]	; (8006518 <HAL_UART_MspInit+0x240>)
 800634c:	f043 0302 	orr.w	r3, r3, #2
 8006350:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8006354:	4b70      	ldr	r3, [pc, #448]	; (8006518 <HAL_UART_MspInit+0x240>)
 8006356:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800635a:	f003 0302 	and.w	r3, r3, #2
 800635e:	623b      	str	r3, [r7, #32]
 8006360:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006362:	4b6d      	ldr	r3, [pc, #436]	; (8006518 <HAL_UART_MspInit+0x240>)
 8006364:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006368:	4a6b      	ldr	r2, [pc, #428]	; (8006518 <HAL_UART_MspInit+0x240>)
 800636a:	f043 0301 	orr.w	r3, r3, #1
 800636e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8006372:	4b69      	ldr	r3, [pc, #420]	; (8006518 <HAL_UART_MspInit+0x240>)
 8006374:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006378:	f003 0301 	and.w	r3, r3, #1
 800637c:	61fb      	str	r3, [r7, #28]
 800637e:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration
    PB15     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = Jetson_RX_Pin;
 8006380:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006384:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006388:	2302      	movs	r3, #2
 800638a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800638e:	2300      	movs	r3, #0
 8006390:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006394:	2300      	movs	r3, #0
 8006396:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 800639a:	2304      	movs	r3, #4
 800639c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(Jetson_RX_GPIO_Port, &GPIO_InitStruct);
 80063a0:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80063a4:	4619      	mov	r1, r3
 80063a6:	485d      	ldr	r0, [pc, #372]	; (800651c <HAL_UART_MspInit+0x244>)
 80063a8:	f001 f854 	bl	8007454 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = Jetson_TX_Pin;
 80063ac:	f44f 7300 	mov.w	r3, #512	; 0x200
 80063b0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80063b4:	2302      	movs	r3, #2
 80063b6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80063ba:	2300      	movs	r3, #0
 80063bc:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80063c0:	2300      	movs	r3, #0
 80063c2:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80063c6:	2307      	movs	r3, #7
 80063c8:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(Jetson_TX_GPIO_Port, &GPIO_InitStruct);
 80063cc:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80063d0:	4619      	mov	r1, r3
 80063d2:	4853      	ldr	r0, [pc, #332]	; (8006520 <HAL_UART_MspInit+0x248>)
 80063d4:	f001 f83e 	bl	8007454 <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80063d8:	e097      	b.n	800650a <HAL_UART_MspInit+0x232>
  else if(uartHandle->Instance==USART2)
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	4a51      	ldr	r2, [pc, #324]	; (8006524 <HAL_UART_MspInit+0x24c>)
 80063e0:	4293      	cmp	r3, r2
 80063e2:	d142      	bne.n	800646a <HAL_UART_MspInit+0x192>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80063e4:	2302      	movs	r3, #2
 80063e6:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80063e8:	2300      	movs	r3, #0
 80063ea:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80063ee:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80063f2:	4618      	mov	r0, r3
 80063f4:	f002 fa1e 	bl	8008834 <HAL_RCCEx_PeriphCLKConfig>
 80063f8:	4603      	mov	r3, r0
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d001      	beq.n	8006402 <HAL_UART_MspInit+0x12a>
      Error_Handler();
 80063fe:	f7fc fbe7 	bl	8002bd0 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8006402:	4b45      	ldr	r3, [pc, #276]	; (8006518 <HAL_UART_MspInit+0x240>)
 8006404:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006408:	4a43      	ldr	r2, [pc, #268]	; (8006518 <HAL_UART_MspInit+0x240>)
 800640a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800640e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8006412:	4b41      	ldr	r3, [pc, #260]	; (8006518 <HAL_UART_MspInit+0x240>)
 8006414:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006418:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800641c:	61bb      	str	r3, [r7, #24]
 800641e:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006420:	4b3d      	ldr	r3, [pc, #244]	; (8006518 <HAL_UART_MspInit+0x240>)
 8006422:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006426:	4a3c      	ldr	r2, [pc, #240]	; (8006518 <HAL_UART_MspInit+0x240>)
 8006428:	f043 0301 	orr.w	r3, r3, #1
 800642c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8006430:	4b39      	ldr	r3, [pc, #228]	; (8006518 <HAL_UART_MspInit+0x240>)
 8006432:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006436:	f003 0301 	and.w	r3, r3, #1
 800643a:	617b      	str	r3, [r7, #20]
 800643c:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = NucleoF4_RX_Pin|NucleoF4_TX_Pin;
 800643e:	230c      	movs	r3, #12
 8006440:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006444:	2302      	movs	r3, #2
 8006446:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800644a:	2300      	movs	r3, #0
 800644c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006450:	2300      	movs	r3, #0
 8006452:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8006456:	2307      	movs	r3, #7
 8006458:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800645c:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8006460:	4619      	mov	r1, r3
 8006462:	482f      	ldr	r0, [pc, #188]	; (8006520 <HAL_UART_MspInit+0x248>)
 8006464:	f000 fff6 	bl	8007454 <HAL_GPIO_Init>
}
 8006468:	e04f      	b.n	800650a <HAL_UART_MspInit+0x232>
  else if(uartHandle->Instance==USART3)
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	4a2e      	ldr	r2, [pc, #184]	; (8006528 <HAL_UART_MspInit+0x250>)
 8006470:	4293      	cmp	r3, r2
 8006472:	d14a      	bne.n	800650a <HAL_UART_MspInit+0x232>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8006474:	2302      	movs	r3, #2
 8006476:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8006478:	2300      	movs	r3, #0
 800647a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800647e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006482:	4618      	mov	r0, r3
 8006484:	f002 f9d6 	bl	8008834 <HAL_RCCEx_PeriphCLKConfig>
 8006488:	4603      	mov	r3, r0
 800648a:	2b00      	cmp	r3, #0
 800648c:	d001      	beq.n	8006492 <HAL_UART_MspInit+0x1ba>
      Error_Handler();
 800648e:	f7fc fb9f 	bl	8002bd0 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8006492:	4b21      	ldr	r3, [pc, #132]	; (8006518 <HAL_UART_MspInit+0x240>)
 8006494:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006498:	4a1f      	ldr	r2, [pc, #124]	; (8006518 <HAL_UART_MspInit+0x240>)
 800649a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800649e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80064a2:	4b1d      	ldr	r3, [pc, #116]	; (8006518 <HAL_UART_MspInit+0x240>)
 80064a4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80064a8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80064ac:	613b      	str	r3, [r7, #16]
 80064ae:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80064b0:	4b19      	ldr	r3, [pc, #100]	; (8006518 <HAL_UART_MspInit+0x240>)
 80064b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80064b6:	4a18      	ldr	r2, [pc, #96]	; (8006518 <HAL_UART_MspInit+0x240>)
 80064b8:	f043 0308 	orr.w	r3, r3, #8
 80064bc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80064c0:	4b15      	ldr	r3, [pc, #84]	; (8006518 <HAL_UART_MspInit+0x240>)
 80064c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80064c6:	f003 0308 	and.w	r3, r3, #8
 80064ca:	60fb      	str	r3, [r7, #12]
 80064cc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = STLINK_TX_Pin|STLINK_RX_Pin;
 80064ce:	f44f 7340 	mov.w	r3, #768	; 0x300
 80064d2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80064d6:	2302      	movs	r3, #2
 80064d8:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80064dc:	2300      	movs	r3, #0
 80064de:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80064e2:	2300      	movs	r3, #0
 80064e4:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80064e8:	2307      	movs	r3, #7
 80064ea:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80064ee:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80064f2:	4619      	mov	r1, r3
 80064f4:	480d      	ldr	r0, [pc, #52]	; (800652c <HAL_UART_MspInit+0x254>)
 80064f6:	f000 ffad 	bl	8007454 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 1, 1);
 80064fa:	2201      	movs	r2, #1
 80064fc:	2101      	movs	r1, #1
 80064fe:	2027      	movs	r0, #39	; 0x27
 8006500:	f000 fa01 	bl	8006906 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8006504:	2027      	movs	r0, #39	; 0x27
 8006506:	f000 fa18 	bl	800693a <HAL_NVIC_EnableIRQ>
}
 800650a:	bf00      	nop
 800650c:	37f8      	adds	r7, #248	; 0xf8
 800650e:	46bd      	mov	sp, r7
 8006510:	bd80      	pop	{r7, pc}
 8006512:	bf00      	nop
 8006514:	40011000 	.word	0x40011000
 8006518:	58024400 	.word	0x58024400
 800651c:	58020400 	.word	0x58020400
 8006520:	58020000 	.word	0x58020000
 8006524:	40004400 	.word	0x40004400
 8006528:	40004800 	.word	0x40004800
 800652c:	58020c00 	.word	0x58020c00

08006530 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8006530:	f8df d034 	ldr.w	sp, [pc, #52]	; 8006568 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8006534:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8006536:	e003      	b.n	8006540 <LoopCopyDataInit>

08006538 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8006538:	4b0c      	ldr	r3, [pc, #48]	; (800656c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800653a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800653c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800653e:	3104      	adds	r1, #4

08006540 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8006540:	480b      	ldr	r0, [pc, #44]	; (8006570 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8006542:	4b0c      	ldr	r3, [pc, #48]	; (8006574 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8006544:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8006546:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8006548:	d3f6      	bcc.n	8006538 <CopyDataInit>
  ldr  r2, =_sbss
 800654a:	4a0b      	ldr	r2, [pc, #44]	; (8006578 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800654c:	e002      	b.n	8006554 <LoopFillZerobss>

0800654e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800654e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8006550:	f842 3b04 	str.w	r3, [r2], #4

08006554 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8006554:	4b09      	ldr	r3, [pc, #36]	; (800657c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8006556:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8006558:	d3f9      	bcc.n	800654e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800655a:	f7fd fb81 	bl	8003c60 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800655e:	f008 fbd3 	bl	800ed08 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8006562:	f7fc f80f 	bl	8002584 <main>
  bx  lr    
 8006566:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8006568:	24080000 	.word	0x24080000
  ldr  r3, =_sidata
 800656c:	08013f18 	.word	0x08013f18
  ldr  r0, =_sdata
 8006570:	24000000 	.word	0x24000000
  ldr  r3, =_edata
 8006574:	2400025c 	.word	0x2400025c
  ldr  r2, =_sbss
 8006578:	24000260 	.word	0x24000260
  ldr  r3, = _ebss
 800657c:	24000aa4 	.word	0x24000aa4

08006580 <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8006580:	e7fe      	b.n	8006580 <ADC3_IRQHandler>
	...

08006584 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8006584:	b580      	push	{r7, lr}
 8006586:	b082      	sub	sp, #8
 8006588:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800658a:	2003      	movs	r0, #3
 800658c:	f000 f9b0 	bl	80068f0 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8006590:	f001 ff7a 	bl	8008488 <HAL_RCC_GetSysClockFreq>
 8006594:	4602      	mov	r2, r0
 8006596:	4b15      	ldr	r3, [pc, #84]	; (80065ec <HAL_Init+0x68>)
 8006598:	699b      	ldr	r3, [r3, #24]
 800659a:	0a1b      	lsrs	r3, r3, #8
 800659c:	f003 030f 	and.w	r3, r3, #15
 80065a0:	4913      	ldr	r1, [pc, #76]	; (80065f0 <HAL_Init+0x6c>)
 80065a2:	5ccb      	ldrb	r3, [r1, r3]
 80065a4:	f003 031f 	and.w	r3, r3, #31
 80065a8:	fa22 f303 	lsr.w	r3, r2, r3
 80065ac:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80065ae:	4b0f      	ldr	r3, [pc, #60]	; (80065ec <HAL_Init+0x68>)
 80065b0:	699b      	ldr	r3, [r3, #24]
 80065b2:	f003 030f 	and.w	r3, r3, #15
 80065b6:	4a0e      	ldr	r2, [pc, #56]	; (80065f0 <HAL_Init+0x6c>)
 80065b8:	5cd3      	ldrb	r3, [r2, r3]
 80065ba:	f003 031f 	and.w	r3, r3, #31
 80065be:	687a      	ldr	r2, [r7, #4]
 80065c0:	fa22 f303 	lsr.w	r3, r2, r3
 80065c4:	4a0b      	ldr	r2, [pc, #44]	; (80065f4 <HAL_Init+0x70>)
 80065c6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80065c8:	4a0b      	ldr	r2, [pc, #44]	; (80065f8 <HAL_Init+0x74>)
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80065ce:	2000      	movs	r0, #0
 80065d0:	f000 f814 	bl	80065fc <HAL_InitTick>
 80065d4:	4603      	mov	r3, r0
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d001      	beq.n	80065de <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80065da:	2301      	movs	r3, #1
 80065dc:	e002      	b.n	80065e4 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80065de:	f7fd f9af 	bl	8003940 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80065e2:	2300      	movs	r3, #0
}
 80065e4:	4618      	mov	r0, r3
 80065e6:	3708      	adds	r7, #8
 80065e8:	46bd      	mov	sp, r7
 80065ea:	bd80      	pop	{r7, pc}
 80065ec:	58024400 	.word	0x58024400
 80065f0:	080121e4 	.word	0x080121e4
 80065f4:	2400007c 	.word	0x2400007c
 80065f8:	24000078 	.word	0x24000078

080065fc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80065fc:	b580      	push	{r7, lr}
 80065fe:	b082      	sub	sp, #8
 8006600:	af00      	add	r7, sp, #0
 8006602:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8006604:	4b15      	ldr	r3, [pc, #84]	; (800665c <HAL_InitTick+0x60>)
 8006606:	781b      	ldrb	r3, [r3, #0]
 8006608:	2b00      	cmp	r3, #0
 800660a:	d101      	bne.n	8006610 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 800660c:	2301      	movs	r3, #1
 800660e:	e021      	b.n	8006654 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8006610:	4b13      	ldr	r3, [pc, #76]	; (8006660 <HAL_InitTick+0x64>)
 8006612:	681a      	ldr	r2, [r3, #0]
 8006614:	4b11      	ldr	r3, [pc, #68]	; (800665c <HAL_InitTick+0x60>)
 8006616:	781b      	ldrb	r3, [r3, #0]
 8006618:	4619      	mov	r1, r3
 800661a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800661e:	fbb3 f3f1 	udiv	r3, r3, r1
 8006622:	fbb2 f3f3 	udiv	r3, r2, r3
 8006626:	4618      	mov	r0, r3
 8006628:	f000 f9a3 	bl	8006972 <HAL_SYSTICK_Config>
 800662c:	4603      	mov	r3, r0
 800662e:	2b00      	cmp	r3, #0
 8006630:	d001      	beq.n	8006636 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8006632:	2301      	movs	r3, #1
 8006634:	e00e      	b.n	8006654 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	2b0f      	cmp	r3, #15
 800663a:	d80a      	bhi.n	8006652 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800663c:	2200      	movs	r2, #0
 800663e:	6879      	ldr	r1, [r7, #4]
 8006640:	f04f 30ff 	mov.w	r0, #4294967295
 8006644:	f000 f95f 	bl	8006906 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8006648:	4a06      	ldr	r2, [pc, #24]	; (8006664 <HAL_InitTick+0x68>)
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800664e:	2300      	movs	r3, #0
 8006650:	e000      	b.n	8006654 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8006652:	2301      	movs	r3, #1
}
 8006654:	4618      	mov	r0, r3
 8006656:	3708      	adds	r7, #8
 8006658:	46bd      	mov	sp, r7
 800665a:	bd80      	pop	{r7, pc}
 800665c:	24000084 	.word	0x24000084
 8006660:	24000078 	.word	0x24000078
 8006664:	24000080 	.word	0x24000080

08006668 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8006668:	b480      	push	{r7}
 800666a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800666c:	4b06      	ldr	r3, [pc, #24]	; (8006688 <HAL_IncTick+0x20>)
 800666e:	781b      	ldrb	r3, [r3, #0]
 8006670:	461a      	mov	r2, r3
 8006672:	4b06      	ldr	r3, [pc, #24]	; (800668c <HAL_IncTick+0x24>)
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	4413      	add	r3, r2
 8006678:	4a04      	ldr	r2, [pc, #16]	; (800668c <HAL_IncTick+0x24>)
 800667a:	6013      	str	r3, [r2, #0]
}
 800667c:	bf00      	nop
 800667e:	46bd      	mov	sp, r7
 8006680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006684:	4770      	bx	lr
 8006686:	bf00      	nop
 8006688:	24000084 	.word	0x24000084
 800668c:	24000a90 	.word	0x24000a90

08006690 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8006690:	b480      	push	{r7}
 8006692:	af00      	add	r7, sp, #0
  return uwTick;
 8006694:	4b03      	ldr	r3, [pc, #12]	; (80066a4 <HAL_GetTick+0x14>)
 8006696:	681b      	ldr	r3, [r3, #0]
}
 8006698:	4618      	mov	r0, r3
 800669a:	46bd      	mov	sp, r7
 800669c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066a0:	4770      	bx	lr
 80066a2:	bf00      	nop
 80066a4:	24000a90 	.word	0x24000a90

080066a8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80066a8:	b580      	push	{r7, lr}
 80066aa:	b084      	sub	sp, #16
 80066ac:	af00      	add	r7, sp, #0
 80066ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80066b0:	f7ff ffee 	bl	8006690 <HAL_GetTick>
 80066b4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80066c0:	d005      	beq.n	80066ce <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80066c2:	4b0a      	ldr	r3, [pc, #40]	; (80066ec <HAL_Delay+0x44>)
 80066c4:	781b      	ldrb	r3, [r3, #0]
 80066c6:	461a      	mov	r2, r3
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	4413      	add	r3, r2
 80066cc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80066ce:	bf00      	nop
 80066d0:	f7ff ffde 	bl	8006690 <HAL_GetTick>
 80066d4:	4602      	mov	r2, r0
 80066d6:	68bb      	ldr	r3, [r7, #8]
 80066d8:	1ad3      	subs	r3, r2, r3
 80066da:	68fa      	ldr	r2, [r7, #12]
 80066dc:	429a      	cmp	r2, r3
 80066de:	d8f7      	bhi.n	80066d0 <HAL_Delay+0x28>
  {
  }
}
 80066e0:	bf00      	nop
 80066e2:	bf00      	nop
 80066e4:	3710      	adds	r7, #16
 80066e6:	46bd      	mov	sp, r7
 80066e8:	bd80      	pop	{r7, pc}
 80066ea:	bf00      	nop
 80066ec:	24000084 	.word	0x24000084

080066f0 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80066f0:	b480      	push	{r7}
 80066f2:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80066f4:	4b03      	ldr	r3, [pc, #12]	; (8006704 <HAL_GetREVID+0x14>)
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	0c1b      	lsrs	r3, r3, #16
}
 80066fa:	4618      	mov	r0, r3
 80066fc:	46bd      	mov	sp, r7
 80066fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006702:	4770      	bx	lr
 8006704:	5c001000 	.word	0x5c001000

08006708 <__NVIC_SetPriorityGrouping>:
{
 8006708:	b480      	push	{r7}
 800670a:	b085      	sub	sp, #20
 800670c:	af00      	add	r7, sp, #0
 800670e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	f003 0307 	and.w	r3, r3, #7
 8006716:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006718:	4b0b      	ldr	r3, [pc, #44]	; (8006748 <__NVIC_SetPriorityGrouping+0x40>)
 800671a:	68db      	ldr	r3, [r3, #12]
 800671c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800671e:	68ba      	ldr	r2, [r7, #8]
 8006720:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8006724:	4013      	ands	r3, r2
 8006726:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800672c:	68bb      	ldr	r3, [r7, #8]
 800672e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8006730:	4b06      	ldr	r3, [pc, #24]	; (800674c <__NVIC_SetPriorityGrouping+0x44>)
 8006732:	4313      	orrs	r3, r2
 8006734:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8006736:	4a04      	ldr	r2, [pc, #16]	; (8006748 <__NVIC_SetPriorityGrouping+0x40>)
 8006738:	68bb      	ldr	r3, [r7, #8]
 800673a:	60d3      	str	r3, [r2, #12]
}
 800673c:	bf00      	nop
 800673e:	3714      	adds	r7, #20
 8006740:	46bd      	mov	sp, r7
 8006742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006746:	4770      	bx	lr
 8006748:	e000ed00 	.word	0xe000ed00
 800674c:	05fa0000 	.word	0x05fa0000

08006750 <__NVIC_GetPriorityGrouping>:
{
 8006750:	b480      	push	{r7}
 8006752:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006754:	4b04      	ldr	r3, [pc, #16]	; (8006768 <__NVIC_GetPriorityGrouping+0x18>)
 8006756:	68db      	ldr	r3, [r3, #12]
 8006758:	0a1b      	lsrs	r3, r3, #8
 800675a:	f003 0307 	and.w	r3, r3, #7
}
 800675e:	4618      	mov	r0, r3
 8006760:	46bd      	mov	sp, r7
 8006762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006766:	4770      	bx	lr
 8006768:	e000ed00 	.word	0xe000ed00

0800676c <__NVIC_EnableIRQ>:
{
 800676c:	b480      	push	{r7}
 800676e:	b083      	sub	sp, #12
 8006770:	af00      	add	r7, sp, #0
 8006772:	4603      	mov	r3, r0
 8006774:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8006776:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800677a:	2b00      	cmp	r3, #0
 800677c:	db0b      	blt.n	8006796 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800677e:	88fb      	ldrh	r3, [r7, #6]
 8006780:	f003 021f 	and.w	r2, r3, #31
 8006784:	4907      	ldr	r1, [pc, #28]	; (80067a4 <__NVIC_EnableIRQ+0x38>)
 8006786:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800678a:	095b      	lsrs	r3, r3, #5
 800678c:	2001      	movs	r0, #1
 800678e:	fa00 f202 	lsl.w	r2, r0, r2
 8006792:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8006796:	bf00      	nop
 8006798:	370c      	adds	r7, #12
 800679a:	46bd      	mov	sp, r7
 800679c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067a0:	4770      	bx	lr
 80067a2:	bf00      	nop
 80067a4:	e000e100 	.word	0xe000e100

080067a8 <__NVIC_DisableIRQ>:
{
 80067a8:	b480      	push	{r7}
 80067aa:	b083      	sub	sp, #12
 80067ac:	af00      	add	r7, sp, #0
 80067ae:	4603      	mov	r3, r0
 80067b0:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80067b2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	db12      	blt.n	80067e0 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80067ba:	88fb      	ldrh	r3, [r7, #6]
 80067bc:	f003 021f 	and.w	r2, r3, #31
 80067c0:	490a      	ldr	r1, [pc, #40]	; (80067ec <__NVIC_DisableIRQ+0x44>)
 80067c2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80067c6:	095b      	lsrs	r3, r3, #5
 80067c8:	2001      	movs	r0, #1
 80067ca:	fa00 f202 	lsl.w	r2, r0, r2
 80067ce:	3320      	adds	r3, #32
 80067d0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 80067d4:	f3bf 8f4f 	dsb	sy
}
 80067d8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80067da:	f3bf 8f6f 	isb	sy
}
 80067de:	bf00      	nop
}
 80067e0:	bf00      	nop
 80067e2:	370c      	adds	r7, #12
 80067e4:	46bd      	mov	sp, r7
 80067e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ea:	4770      	bx	lr
 80067ec:	e000e100 	.word	0xe000e100

080067f0 <__NVIC_SetPriority>:
{
 80067f0:	b480      	push	{r7}
 80067f2:	b083      	sub	sp, #12
 80067f4:	af00      	add	r7, sp, #0
 80067f6:	4603      	mov	r3, r0
 80067f8:	6039      	str	r1, [r7, #0]
 80067fa:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80067fc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006800:	2b00      	cmp	r3, #0
 8006802:	db0a      	blt.n	800681a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006804:	683b      	ldr	r3, [r7, #0]
 8006806:	b2da      	uxtb	r2, r3
 8006808:	490c      	ldr	r1, [pc, #48]	; (800683c <__NVIC_SetPriority+0x4c>)
 800680a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800680e:	0112      	lsls	r2, r2, #4
 8006810:	b2d2      	uxtb	r2, r2
 8006812:	440b      	add	r3, r1
 8006814:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8006818:	e00a      	b.n	8006830 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800681a:	683b      	ldr	r3, [r7, #0]
 800681c:	b2da      	uxtb	r2, r3
 800681e:	4908      	ldr	r1, [pc, #32]	; (8006840 <__NVIC_SetPriority+0x50>)
 8006820:	88fb      	ldrh	r3, [r7, #6]
 8006822:	f003 030f 	and.w	r3, r3, #15
 8006826:	3b04      	subs	r3, #4
 8006828:	0112      	lsls	r2, r2, #4
 800682a:	b2d2      	uxtb	r2, r2
 800682c:	440b      	add	r3, r1
 800682e:	761a      	strb	r2, [r3, #24]
}
 8006830:	bf00      	nop
 8006832:	370c      	adds	r7, #12
 8006834:	46bd      	mov	sp, r7
 8006836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800683a:	4770      	bx	lr
 800683c:	e000e100 	.word	0xe000e100
 8006840:	e000ed00 	.word	0xe000ed00

08006844 <NVIC_EncodePriority>:
{
 8006844:	b480      	push	{r7}
 8006846:	b089      	sub	sp, #36	; 0x24
 8006848:	af00      	add	r7, sp, #0
 800684a:	60f8      	str	r0, [r7, #12]
 800684c:	60b9      	str	r1, [r7, #8]
 800684e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	f003 0307 	and.w	r3, r3, #7
 8006856:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006858:	69fb      	ldr	r3, [r7, #28]
 800685a:	f1c3 0307 	rsb	r3, r3, #7
 800685e:	2b04      	cmp	r3, #4
 8006860:	bf28      	it	cs
 8006862:	2304      	movcs	r3, #4
 8006864:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006866:	69fb      	ldr	r3, [r7, #28]
 8006868:	3304      	adds	r3, #4
 800686a:	2b06      	cmp	r3, #6
 800686c:	d902      	bls.n	8006874 <NVIC_EncodePriority+0x30>
 800686e:	69fb      	ldr	r3, [r7, #28]
 8006870:	3b03      	subs	r3, #3
 8006872:	e000      	b.n	8006876 <NVIC_EncodePriority+0x32>
 8006874:	2300      	movs	r3, #0
 8006876:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006878:	f04f 32ff 	mov.w	r2, #4294967295
 800687c:	69bb      	ldr	r3, [r7, #24]
 800687e:	fa02 f303 	lsl.w	r3, r2, r3
 8006882:	43da      	mvns	r2, r3
 8006884:	68bb      	ldr	r3, [r7, #8]
 8006886:	401a      	ands	r2, r3
 8006888:	697b      	ldr	r3, [r7, #20]
 800688a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800688c:	f04f 31ff 	mov.w	r1, #4294967295
 8006890:	697b      	ldr	r3, [r7, #20]
 8006892:	fa01 f303 	lsl.w	r3, r1, r3
 8006896:	43d9      	mvns	r1, r3
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800689c:	4313      	orrs	r3, r2
}
 800689e:	4618      	mov	r0, r3
 80068a0:	3724      	adds	r7, #36	; 0x24
 80068a2:	46bd      	mov	sp, r7
 80068a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068a8:	4770      	bx	lr
	...

080068ac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80068ac:	b580      	push	{r7, lr}
 80068ae:	b082      	sub	sp, #8
 80068b0:	af00      	add	r7, sp, #0
 80068b2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	3b01      	subs	r3, #1
 80068b8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80068bc:	d301      	bcc.n	80068c2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80068be:	2301      	movs	r3, #1
 80068c0:	e00f      	b.n	80068e2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80068c2:	4a0a      	ldr	r2, [pc, #40]	; (80068ec <SysTick_Config+0x40>)
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	3b01      	subs	r3, #1
 80068c8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80068ca:	210f      	movs	r1, #15
 80068cc:	f04f 30ff 	mov.w	r0, #4294967295
 80068d0:	f7ff ff8e 	bl	80067f0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80068d4:	4b05      	ldr	r3, [pc, #20]	; (80068ec <SysTick_Config+0x40>)
 80068d6:	2200      	movs	r2, #0
 80068d8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80068da:	4b04      	ldr	r3, [pc, #16]	; (80068ec <SysTick_Config+0x40>)
 80068dc:	2207      	movs	r2, #7
 80068de:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80068e0:	2300      	movs	r3, #0
}
 80068e2:	4618      	mov	r0, r3
 80068e4:	3708      	adds	r7, #8
 80068e6:	46bd      	mov	sp, r7
 80068e8:	bd80      	pop	{r7, pc}
 80068ea:	bf00      	nop
 80068ec:	e000e010 	.word	0xe000e010

080068f0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80068f0:	b580      	push	{r7, lr}
 80068f2:	b082      	sub	sp, #8
 80068f4:	af00      	add	r7, sp, #0
 80068f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80068f8:	6878      	ldr	r0, [r7, #4]
 80068fa:	f7ff ff05 	bl	8006708 <__NVIC_SetPriorityGrouping>
}
 80068fe:	bf00      	nop
 8006900:	3708      	adds	r7, #8
 8006902:	46bd      	mov	sp, r7
 8006904:	bd80      	pop	{r7, pc}

08006906 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006906:	b580      	push	{r7, lr}
 8006908:	b086      	sub	sp, #24
 800690a:	af00      	add	r7, sp, #0
 800690c:	4603      	mov	r3, r0
 800690e:	60b9      	str	r1, [r7, #8]
 8006910:	607a      	str	r2, [r7, #4]
 8006912:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8006914:	f7ff ff1c 	bl	8006750 <__NVIC_GetPriorityGrouping>
 8006918:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800691a:	687a      	ldr	r2, [r7, #4]
 800691c:	68b9      	ldr	r1, [r7, #8]
 800691e:	6978      	ldr	r0, [r7, #20]
 8006920:	f7ff ff90 	bl	8006844 <NVIC_EncodePriority>
 8006924:	4602      	mov	r2, r0
 8006926:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800692a:	4611      	mov	r1, r2
 800692c:	4618      	mov	r0, r3
 800692e:	f7ff ff5f 	bl	80067f0 <__NVIC_SetPriority>
}
 8006932:	bf00      	nop
 8006934:	3718      	adds	r7, #24
 8006936:	46bd      	mov	sp, r7
 8006938:	bd80      	pop	{r7, pc}

0800693a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800693a:	b580      	push	{r7, lr}
 800693c:	b082      	sub	sp, #8
 800693e:	af00      	add	r7, sp, #0
 8006940:	4603      	mov	r3, r0
 8006942:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006944:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006948:	4618      	mov	r0, r3
 800694a:	f7ff ff0f 	bl	800676c <__NVIC_EnableIRQ>
}
 800694e:	bf00      	nop
 8006950:	3708      	adds	r7, #8
 8006952:	46bd      	mov	sp, r7
 8006954:	bd80      	pop	{r7, pc}

08006956 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8006956:	b580      	push	{r7, lr}
 8006958:	b082      	sub	sp, #8
 800695a:	af00      	add	r7, sp, #0
 800695c:	4603      	mov	r3, r0
 800695e:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8006960:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006964:	4618      	mov	r0, r3
 8006966:	f7ff ff1f 	bl	80067a8 <__NVIC_DisableIRQ>
}
 800696a:	bf00      	nop
 800696c:	3708      	adds	r7, #8
 800696e:	46bd      	mov	sp, r7
 8006970:	bd80      	pop	{r7, pc}

08006972 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8006972:	b580      	push	{r7, lr}
 8006974:	b082      	sub	sp, #8
 8006976:	af00      	add	r7, sp, #0
 8006978:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800697a:	6878      	ldr	r0, [r7, #4]
 800697c:	f7ff ff96 	bl	80068ac <SysTick_Config>
 8006980:	4603      	mov	r3, r0
}
 8006982:	4618      	mov	r0, r3
 8006984:	3708      	adds	r7, #8
 8006986:	46bd      	mov	sp, r7
 8006988:	bd80      	pop	{r7, pc}
	...

0800698c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800698c:	b580      	push	{r7, lr}
 800698e:	b086      	sub	sp, #24
 8006990:	af00      	add	r7, sp, #0
 8006992:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8006994:	f7ff fe7c 	bl	8006690 <HAL_GetTick>
 8006998:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	2b00      	cmp	r3, #0
 800699e:	d101      	bne.n	80069a4 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 80069a0:	2301      	movs	r3, #1
 80069a2:	e2dc      	b.n	8006f5e <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80069aa:	b2db      	uxtb	r3, r3
 80069ac:	2b02      	cmp	r3, #2
 80069ae:	d008      	beq.n	80069c2 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	2280      	movs	r2, #128	; 0x80
 80069b4:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	2200      	movs	r2, #0
 80069ba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 80069be:	2301      	movs	r3, #1
 80069c0:	e2cd      	b.n	8006f5e <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	4a76      	ldr	r2, [pc, #472]	; (8006ba0 <HAL_DMA_Abort+0x214>)
 80069c8:	4293      	cmp	r3, r2
 80069ca:	d04a      	beq.n	8006a62 <HAL_DMA_Abort+0xd6>
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	4a74      	ldr	r2, [pc, #464]	; (8006ba4 <HAL_DMA_Abort+0x218>)
 80069d2:	4293      	cmp	r3, r2
 80069d4:	d045      	beq.n	8006a62 <HAL_DMA_Abort+0xd6>
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	4a73      	ldr	r2, [pc, #460]	; (8006ba8 <HAL_DMA_Abort+0x21c>)
 80069dc:	4293      	cmp	r3, r2
 80069de:	d040      	beq.n	8006a62 <HAL_DMA_Abort+0xd6>
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	4a71      	ldr	r2, [pc, #452]	; (8006bac <HAL_DMA_Abort+0x220>)
 80069e6:	4293      	cmp	r3, r2
 80069e8:	d03b      	beq.n	8006a62 <HAL_DMA_Abort+0xd6>
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	4a70      	ldr	r2, [pc, #448]	; (8006bb0 <HAL_DMA_Abort+0x224>)
 80069f0:	4293      	cmp	r3, r2
 80069f2:	d036      	beq.n	8006a62 <HAL_DMA_Abort+0xd6>
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	4a6e      	ldr	r2, [pc, #440]	; (8006bb4 <HAL_DMA_Abort+0x228>)
 80069fa:	4293      	cmp	r3, r2
 80069fc:	d031      	beq.n	8006a62 <HAL_DMA_Abort+0xd6>
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	4a6d      	ldr	r2, [pc, #436]	; (8006bb8 <HAL_DMA_Abort+0x22c>)
 8006a04:	4293      	cmp	r3, r2
 8006a06:	d02c      	beq.n	8006a62 <HAL_DMA_Abort+0xd6>
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	4a6b      	ldr	r2, [pc, #428]	; (8006bbc <HAL_DMA_Abort+0x230>)
 8006a0e:	4293      	cmp	r3, r2
 8006a10:	d027      	beq.n	8006a62 <HAL_DMA_Abort+0xd6>
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	4a6a      	ldr	r2, [pc, #424]	; (8006bc0 <HAL_DMA_Abort+0x234>)
 8006a18:	4293      	cmp	r3, r2
 8006a1a:	d022      	beq.n	8006a62 <HAL_DMA_Abort+0xd6>
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	4a68      	ldr	r2, [pc, #416]	; (8006bc4 <HAL_DMA_Abort+0x238>)
 8006a22:	4293      	cmp	r3, r2
 8006a24:	d01d      	beq.n	8006a62 <HAL_DMA_Abort+0xd6>
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	4a67      	ldr	r2, [pc, #412]	; (8006bc8 <HAL_DMA_Abort+0x23c>)
 8006a2c:	4293      	cmp	r3, r2
 8006a2e:	d018      	beq.n	8006a62 <HAL_DMA_Abort+0xd6>
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	4a65      	ldr	r2, [pc, #404]	; (8006bcc <HAL_DMA_Abort+0x240>)
 8006a36:	4293      	cmp	r3, r2
 8006a38:	d013      	beq.n	8006a62 <HAL_DMA_Abort+0xd6>
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	4a64      	ldr	r2, [pc, #400]	; (8006bd0 <HAL_DMA_Abort+0x244>)
 8006a40:	4293      	cmp	r3, r2
 8006a42:	d00e      	beq.n	8006a62 <HAL_DMA_Abort+0xd6>
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	4a62      	ldr	r2, [pc, #392]	; (8006bd4 <HAL_DMA_Abort+0x248>)
 8006a4a:	4293      	cmp	r3, r2
 8006a4c:	d009      	beq.n	8006a62 <HAL_DMA_Abort+0xd6>
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	4a61      	ldr	r2, [pc, #388]	; (8006bd8 <HAL_DMA_Abort+0x24c>)
 8006a54:	4293      	cmp	r3, r2
 8006a56:	d004      	beq.n	8006a62 <HAL_DMA_Abort+0xd6>
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	4a5f      	ldr	r2, [pc, #380]	; (8006bdc <HAL_DMA_Abort+0x250>)
 8006a5e:	4293      	cmp	r3, r2
 8006a60:	d101      	bne.n	8006a66 <HAL_DMA_Abort+0xda>
 8006a62:	2301      	movs	r3, #1
 8006a64:	e000      	b.n	8006a68 <HAL_DMA_Abort+0xdc>
 8006a66:	2300      	movs	r3, #0
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	d013      	beq.n	8006a94 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	681a      	ldr	r2, [r3, #0]
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	f022 021e 	bic.w	r2, r2, #30
 8006a7a:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	695a      	ldr	r2, [r3, #20]
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006a8a:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	617b      	str	r3, [r7, #20]
 8006a92:	e00a      	b.n	8006aaa <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	681a      	ldr	r2, [r3, #0]
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	f022 020e 	bic.w	r2, r2, #14
 8006aa2:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	4a3c      	ldr	r2, [pc, #240]	; (8006ba0 <HAL_DMA_Abort+0x214>)
 8006ab0:	4293      	cmp	r3, r2
 8006ab2:	d072      	beq.n	8006b9a <HAL_DMA_Abort+0x20e>
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	4a3a      	ldr	r2, [pc, #232]	; (8006ba4 <HAL_DMA_Abort+0x218>)
 8006aba:	4293      	cmp	r3, r2
 8006abc:	d06d      	beq.n	8006b9a <HAL_DMA_Abort+0x20e>
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	4a39      	ldr	r2, [pc, #228]	; (8006ba8 <HAL_DMA_Abort+0x21c>)
 8006ac4:	4293      	cmp	r3, r2
 8006ac6:	d068      	beq.n	8006b9a <HAL_DMA_Abort+0x20e>
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	4a37      	ldr	r2, [pc, #220]	; (8006bac <HAL_DMA_Abort+0x220>)
 8006ace:	4293      	cmp	r3, r2
 8006ad0:	d063      	beq.n	8006b9a <HAL_DMA_Abort+0x20e>
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	4a36      	ldr	r2, [pc, #216]	; (8006bb0 <HAL_DMA_Abort+0x224>)
 8006ad8:	4293      	cmp	r3, r2
 8006ada:	d05e      	beq.n	8006b9a <HAL_DMA_Abort+0x20e>
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	4a34      	ldr	r2, [pc, #208]	; (8006bb4 <HAL_DMA_Abort+0x228>)
 8006ae2:	4293      	cmp	r3, r2
 8006ae4:	d059      	beq.n	8006b9a <HAL_DMA_Abort+0x20e>
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	4a33      	ldr	r2, [pc, #204]	; (8006bb8 <HAL_DMA_Abort+0x22c>)
 8006aec:	4293      	cmp	r3, r2
 8006aee:	d054      	beq.n	8006b9a <HAL_DMA_Abort+0x20e>
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	4a31      	ldr	r2, [pc, #196]	; (8006bbc <HAL_DMA_Abort+0x230>)
 8006af6:	4293      	cmp	r3, r2
 8006af8:	d04f      	beq.n	8006b9a <HAL_DMA_Abort+0x20e>
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	4a30      	ldr	r2, [pc, #192]	; (8006bc0 <HAL_DMA_Abort+0x234>)
 8006b00:	4293      	cmp	r3, r2
 8006b02:	d04a      	beq.n	8006b9a <HAL_DMA_Abort+0x20e>
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	4a2e      	ldr	r2, [pc, #184]	; (8006bc4 <HAL_DMA_Abort+0x238>)
 8006b0a:	4293      	cmp	r3, r2
 8006b0c:	d045      	beq.n	8006b9a <HAL_DMA_Abort+0x20e>
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	4a2d      	ldr	r2, [pc, #180]	; (8006bc8 <HAL_DMA_Abort+0x23c>)
 8006b14:	4293      	cmp	r3, r2
 8006b16:	d040      	beq.n	8006b9a <HAL_DMA_Abort+0x20e>
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	4a2b      	ldr	r2, [pc, #172]	; (8006bcc <HAL_DMA_Abort+0x240>)
 8006b1e:	4293      	cmp	r3, r2
 8006b20:	d03b      	beq.n	8006b9a <HAL_DMA_Abort+0x20e>
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	4a2a      	ldr	r2, [pc, #168]	; (8006bd0 <HAL_DMA_Abort+0x244>)
 8006b28:	4293      	cmp	r3, r2
 8006b2a:	d036      	beq.n	8006b9a <HAL_DMA_Abort+0x20e>
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	4a28      	ldr	r2, [pc, #160]	; (8006bd4 <HAL_DMA_Abort+0x248>)
 8006b32:	4293      	cmp	r3, r2
 8006b34:	d031      	beq.n	8006b9a <HAL_DMA_Abort+0x20e>
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	4a27      	ldr	r2, [pc, #156]	; (8006bd8 <HAL_DMA_Abort+0x24c>)
 8006b3c:	4293      	cmp	r3, r2
 8006b3e:	d02c      	beq.n	8006b9a <HAL_DMA_Abort+0x20e>
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	4a25      	ldr	r2, [pc, #148]	; (8006bdc <HAL_DMA_Abort+0x250>)
 8006b46:	4293      	cmp	r3, r2
 8006b48:	d027      	beq.n	8006b9a <HAL_DMA_Abort+0x20e>
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	4a24      	ldr	r2, [pc, #144]	; (8006be0 <HAL_DMA_Abort+0x254>)
 8006b50:	4293      	cmp	r3, r2
 8006b52:	d022      	beq.n	8006b9a <HAL_DMA_Abort+0x20e>
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	4a22      	ldr	r2, [pc, #136]	; (8006be4 <HAL_DMA_Abort+0x258>)
 8006b5a:	4293      	cmp	r3, r2
 8006b5c:	d01d      	beq.n	8006b9a <HAL_DMA_Abort+0x20e>
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	4a21      	ldr	r2, [pc, #132]	; (8006be8 <HAL_DMA_Abort+0x25c>)
 8006b64:	4293      	cmp	r3, r2
 8006b66:	d018      	beq.n	8006b9a <HAL_DMA_Abort+0x20e>
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	4a1f      	ldr	r2, [pc, #124]	; (8006bec <HAL_DMA_Abort+0x260>)
 8006b6e:	4293      	cmp	r3, r2
 8006b70:	d013      	beq.n	8006b9a <HAL_DMA_Abort+0x20e>
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	4a1e      	ldr	r2, [pc, #120]	; (8006bf0 <HAL_DMA_Abort+0x264>)
 8006b78:	4293      	cmp	r3, r2
 8006b7a:	d00e      	beq.n	8006b9a <HAL_DMA_Abort+0x20e>
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	4a1c      	ldr	r2, [pc, #112]	; (8006bf4 <HAL_DMA_Abort+0x268>)
 8006b82:	4293      	cmp	r3, r2
 8006b84:	d009      	beq.n	8006b9a <HAL_DMA_Abort+0x20e>
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	4a1b      	ldr	r2, [pc, #108]	; (8006bf8 <HAL_DMA_Abort+0x26c>)
 8006b8c:	4293      	cmp	r3, r2
 8006b8e:	d004      	beq.n	8006b9a <HAL_DMA_Abort+0x20e>
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	4a19      	ldr	r2, [pc, #100]	; (8006bfc <HAL_DMA_Abort+0x270>)
 8006b96:	4293      	cmp	r3, r2
 8006b98:	d132      	bne.n	8006c00 <HAL_DMA_Abort+0x274>
 8006b9a:	2301      	movs	r3, #1
 8006b9c:	e031      	b.n	8006c02 <HAL_DMA_Abort+0x276>
 8006b9e:	bf00      	nop
 8006ba0:	40020010 	.word	0x40020010
 8006ba4:	40020028 	.word	0x40020028
 8006ba8:	40020040 	.word	0x40020040
 8006bac:	40020058 	.word	0x40020058
 8006bb0:	40020070 	.word	0x40020070
 8006bb4:	40020088 	.word	0x40020088
 8006bb8:	400200a0 	.word	0x400200a0
 8006bbc:	400200b8 	.word	0x400200b8
 8006bc0:	40020410 	.word	0x40020410
 8006bc4:	40020428 	.word	0x40020428
 8006bc8:	40020440 	.word	0x40020440
 8006bcc:	40020458 	.word	0x40020458
 8006bd0:	40020470 	.word	0x40020470
 8006bd4:	40020488 	.word	0x40020488
 8006bd8:	400204a0 	.word	0x400204a0
 8006bdc:	400204b8 	.word	0x400204b8
 8006be0:	58025408 	.word	0x58025408
 8006be4:	5802541c 	.word	0x5802541c
 8006be8:	58025430 	.word	0x58025430
 8006bec:	58025444 	.word	0x58025444
 8006bf0:	58025458 	.word	0x58025458
 8006bf4:	5802546c 	.word	0x5802546c
 8006bf8:	58025480 	.word	0x58025480
 8006bfc:	58025494 	.word	0x58025494
 8006c00:	2300      	movs	r3, #0
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d007      	beq.n	8006c16 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006c0a:	681a      	ldr	r2, [r3, #0]
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006c10:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006c14:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	4a6d      	ldr	r2, [pc, #436]	; (8006dd0 <HAL_DMA_Abort+0x444>)
 8006c1c:	4293      	cmp	r3, r2
 8006c1e:	d04a      	beq.n	8006cb6 <HAL_DMA_Abort+0x32a>
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	4a6b      	ldr	r2, [pc, #428]	; (8006dd4 <HAL_DMA_Abort+0x448>)
 8006c26:	4293      	cmp	r3, r2
 8006c28:	d045      	beq.n	8006cb6 <HAL_DMA_Abort+0x32a>
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	4a6a      	ldr	r2, [pc, #424]	; (8006dd8 <HAL_DMA_Abort+0x44c>)
 8006c30:	4293      	cmp	r3, r2
 8006c32:	d040      	beq.n	8006cb6 <HAL_DMA_Abort+0x32a>
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	4a68      	ldr	r2, [pc, #416]	; (8006ddc <HAL_DMA_Abort+0x450>)
 8006c3a:	4293      	cmp	r3, r2
 8006c3c:	d03b      	beq.n	8006cb6 <HAL_DMA_Abort+0x32a>
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	4a67      	ldr	r2, [pc, #412]	; (8006de0 <HAL_DMA_Abort+0x454>)
 8006c44:	4293      	cmp	r3, r2
 8006c46:	d036      	beq.n	8006cb6 <HAL_DMA_Abort+0x32a>
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	4a65      	ldr	r2, [pc, #404]	; (8006de4 <HAL_DMA_Abort+0x458>)
 8006c4e:	4293      	cmp	r3, r2
 8006c50:	d031      	beq.n	8006cb6 <HAL_DMA_Abort+0x32a>
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	4a64      	ldr	r2, [pc, #400]	; (8006de8 <HAL_DMA_Abort+0x45c>)
 8006c58:	4293      	cmp	r3, r2
 8006c5a:	d02c      	beq.n	8006cb6 <HAL_DMA_Abort+0x32a>
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	4a62      	ldr	r2, [pc, #392]	; (8006dec <HAL_DMA_Abort+0x460>)
 8006c62:	4293      	cmp	r3, r2
 8006c64:	d027      	beq.n	8006cb6 <HAL_DMA_Abort+0x32a>
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	4a61      	ldr	r2, [pc, #388]	; (8006df0 <HAL_DMA_Abort+0x464>)
 8006c6c:	4293      	cmp	r3, r2
 8006c6e:	d022      	beq.n	8006cb6 <HAL_DMA_Abort+0x32a>
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	4a5f      	ldr	r2, [pc, #380]	; (8006df4 <HAL_DMA_Abort+0x468>)
 8006c76:	4293      	cmp	r3, r2
 8006c78:	d01d      	beq.n	8006cb6 <HAL_DMA_Abort+0x32a>
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	4a5e      	ldr	r2, [pc, #376]	; (8006df8 <HAL_DMA_Abort+0x46c>)
 8006c80:	4293      	cmp	r3, r2
 8006c82:	d018      	beq.n	8006cb6 <HAL_DMA_Abort+0x32a>
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	4a5c      	ldr	r2, [pc, #368]	; (8006dfc <HAL_DMA_Abort+0x470>)
 8006c8a:	4293      	cmp	r3, r2
 8006c8c:	d013      	beq.n	8006cb6 <HAL_DMA_Abort+0x32a>
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	4a5b      	ldr	r2, [pc, #364]	; (8006e00 <HAL_DMA_Abort+0x474>)
 8006c94:	4293      	cmp	r3, r2
 8006c96:	d00e      	beq.n	8006cb6 <HAL_DMA_Abort+0x32a>
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	4a59      	ldr	r2, [pc, #356]	; (8006e04 <HAL_DMA_Abort+0x478>)
 8006c9e:	4293      	cmp	r3, r2
 8006ca0:	d009      	beq.n	8006cb6 <HAL_DMA_Abort+0x32a>
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	4a58      	ldr	r2, [pc, #352]	; (8006e08 <HAL_DMA_Abort+0x47c>)
 8006ca8:	4293      	cmp	r3, r2
 8006caa:	d004      	beq.n	8006cb6 <HAL_DMA_Abort+0x32a>
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	4a56      	ldr	r2, [pc, #344]	; (8006e0c <HAL_DMA_Abort+0x480>)
 8006cb2:	4293      	cmp	r3, r2
 8006cb4:	d108      	bne.n	8006cc8 <HAL_DMA_Abort+0x33c>
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	681a      	ldr	r2, [r3, #0]
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	f022 0201 	bic.w	r2, r2, #1
 8006cc4:	601a      	str	r2, [r3, #0]
 8006cc6:	e007      	b.n	8006cd8 <HAL_DMA_Abort+0x34c>
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	681a      	ldr	r2, [r3, #0]
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	f022 0201 	bic.w	r2, r2, #1
 8006cd6:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8006cd8:	e013      	b.n	8006d02 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8006cda:	f7ff fcd9 	bl	8006690 <HAL_GetTick>
 8006cde:	4602      	mov	r2, r0
 8006ce0:	693b      	ldr	r3, [r7, #16]
 8006ce2:	1ad3      	subs	r3, r2, r3
 8006ce4:	2b05      	cmp	r3, #5
 8006ce6:	d90c      	bls.n	8006d02 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	2220      	movs	r2, #32
 8006cec:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	2203      	movs	r2, #3
 8006cf2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	2200      	movs	r2, #0
 8006cfa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 8006cfe:	2301      	movs	r3, #1
 8006d00:	e12d      	b.n	8006f5e <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8006d02:	697b      	ldr	r3, [r7, #20]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	f003 0301 	and.w	r3, r3, #1
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d1e5      	bne.n	8006cda <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	4a2f      	ldr	r2, [pc, #188]	; (8006dd0 <HAL_DMA_Abort+0x444>)
 8006d14:	4293      	cmp	r3, r2
 8006d16:	d04a      	beq.n	8006dae <HAL_DMA_Abort+0x422>
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	4a2d      	ldr	r2, [pc, #180]	; (8006dd4 <HAL_DMA_Abort+0x448>)
 8006d1e:	4293      	cmp	r3, r2
 8006d20:	d045      	beq.n	8006dae <HAL_DMA_Abort+0x422>
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	4a2c      	ldr	r2, [pc, #176]	; (8006dd8 <HAL_DMA_Abort+0x44c>)
 8006d28:	4293      	cmp	r3, r2
 8006d2a:	d040      	beq.n	8006dae <HAL_DMA_Abort+0x422>
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	4a2a      	ldr	r2, [pc, #168]	; (8006ddc <HAL_DMA_Abort+0x450>)
 8006d32:	4293      	cmp	r3, r2
 8006d34:	d03b      	beq.n	8006dae <HAL_DMA_Abort+0x422>
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	4a29      	ldr	r2, [pc, #164]	; (8006de0 <HAL_DMA_Abort+0x454>)
 8006d3c:	4293      	cmp	r3, r2
 8006d3e:	d036      	beq.n	8006dae <HAL_DMA_Abort+0x422>
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	4a27      	ldr	r2, [pc, #156]	; (8006de4 <HAL_DMA_Abort+0x458>)
 8006d46:	4293      	cmp	r3, r2
 8006d48:	d031      	beq.n	8006dae <HAL_DMA_Abort+0x422>
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	4a26      	ldr	r2, [pc, #152]	; (8006de8 <HAL_DMA_Abort+0x45c>)
 8006d50:	4293      	cmp	r3, r2
 8006d52:	d02c      	beq.n	8006dae <HAL_DMA_Abort+0x422>
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	4a24      	ldr	r2, [pc, #144]	; (8006dec <HAL_DMA_Abort+0x460>)
 8006d5a:	4293      	cmp	r3, r2
 8006d5c:	d027      	beq.n	8006dae <HAL_DMA_Abort+0x422>
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	4a23      	ldr	r2, [pc, #140]	; (8006df0 <HAL_DMA_Abort+0x464>)
 8006d64:	4293      	cmp	r3, r2
 8006d66:	d022      	beq.n	8006dae <HAL_DMA_Abort+0x422>
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	4a21      	ldr	r2, [pc, #132]	; (8006df4 <HAL_DMA_Abort+0x468>)
 8006d6e:	4293      	cmp	r3, r2
 8006d70:	d01d      	beq.n	8006dae <HAL_DMA_Abort+0x422>
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	4a20      	ldr	r2, [pc, #128]	; (8006df8 <HAL_DMA_Abort+0x46c>)
 8006d78:	4293      	cmp	r3, r2
 8006d7a:	d018      	beq.n	8006dae <HAL_DMA_Abort+0x422>
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	4a1e      	ldr	r2, [pc, #120]	; (8006dfc <HAL_DMA_Abort+0x470>)
 8006d82:	4293      	cmp	r3, r2
 8006d84:	d013      	beq.n	8006dae <HAL_DMA_Abort+0x422>
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	4a1d      	ldr	r2, [pc, #116]	; (8006e00 <HAL_DMA_Abort+0x474>)
 8006d8c:	4293      	cmp	r3, r2
 8006d8e:	d00e      	beq.n	8006dae <HAL_DMA_Abort+0x422>
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	4a1b      	ldr	r2, [pc, #108]	; (8006e04 <HAL_DMA_Abort+0x478>)
 8006d96:	4293      	cmp	r3, r2
 8006d98:	d009      	beq.n	8006dae <HAL_DMA_Abort+0x422>
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	4a1a      	ldr	r2, [pc, #104]	; (8006e08 <HAL_DMA_Abort+0x47c>)
 8006da0:	4293      	cmp	r3, r2
 8006da2:	d004      	beq.n	8006dae <HAL_DMA_Abort+0x422>
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	4a18      	ldr	r2, [pc, #96]	; (8006e0c <HAL_DMA_Abort+0x480>)
 8006daa:	4293      	cmp	r3, r2
 8006dac:	d101      	bne.n	8006db2 <HAL_DMA_Abort+0x426>
 8006dae:	2301      	movs	r3, #1
 8006db0:	e000      	b.n	8006db4 <HAL_DMA_Abort+0x428>
 8006db2:	2300      	movs	r3, #0
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	d02b      	beq.n	8006e10 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006dbc:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006dc2:	f003 031f 	and.w	r3, r3, #31
 8006dc6:	223f      	movs	r2, #63	; 0x3f
 8006dc8:	409a      	lsls	r2, r3
 8006dca:	68bb      	ldr	r3, [r7, #8]
 8006dcc:	609a      	str	r2, [r3, #8]
 8006dce:	e02a      	b.n	8006e26 <HAL_DMA_Abort+0x49a>
 8006dd0:	40020010 	.word	0x40020010
 8006dd4:	40020028 	.word	0x40020028
 8006dd8:	40020040 	.word	0x40020040
 8006ddc:	40020058 	.word	0x40020058
 8006de0:	40020070 	.word	0x40020070
 8006de4:	40020088 	.word	0x40020088
 8006de8:	400200a0 	.word	0x400200a0
 8006dec:	400200b8 	.word	0x400200b8
 8006df0:	40020410 	.word	0x40020410
 8006df4:	40020428 	.word	0x40020428
 8006df8:	40020440 	.word	0x40020440
 8006dfc:	40020458 	.word	0x40020458
 8006e00:	40020470 	.word	0x40020470
 8006e04:	40020488 	.word	0x40020488
 8006e08:	400204a0 	.word	0x400204a0
 8006e0c:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006e14:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006e1a:	f003 031f 	and.w	r3, r3, #31
 8006e1e:	2201      	movs	r2, #1
 8006e20:	409a      	lsls	r2, r3
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	4a4f      	ldr	r2, [pc, #316]	; (8006f68 <HAL_DMA_Abort+0x5dc>)
 8006e2c:	4293      	cmp	r3, r2
 8006e2e:	d072      	beq.n	8006f16 <HAL_DMA_Abort+0x58a>
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	4a4d      	ldr	r2, [pc, #308]	; (8006f6c <HAL_DMA_Abort+0x5e0>)
 8006e36:	4293      	cmp	r3, r2
 8006e38:	d06d      	beq.n	8006f16 <HAL_DMA_Abort+0x58a>
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	4a4c      	ldr	r2, [pc, #304]	; (8006f70 <HAL_DMA_Abort+0x5e4>)
 8006e40:	4293      	cmp	r3, r2
 8006e42:	d068      	beq.n	8006f16 <HAL_DMA_Abort+0x58a>
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	4a4a      	ldr	r2, [pc, #296]	; (8006f74 <HAL_DMA_Abort+0x5e8>)
 8006e4a:	4293      	cmp	r3, r2
 8006e4c:	d063      	beq.n	8006f16 <HAL_DMA_Abort+0x58a>
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	4a49      	ldr	r2, [pc, #292]	; (8006f78 <HAL_DMA_Abort+0x5ec>)
 8006e54:	4293      	cmp	r3, r2
 8006e56:	d05e      	beq.n	8006f16 <HAL_DMA_Abort+0x58a>
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	4a47      	ldr	r2, [pc, #284]	; (8006f7c <HAL_DMA_Abort+0x5f0>)
 8006e5e:	4293      	cmp	r3, r2
 8006e60:	d059      	beq.n	8006f16 <HAL_DMA_Abort+0x58a>
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	4a46      	ldr	r2, [pc, #280]	; (8006f80 <HAL_DMA_Abort+0x5f4>)
 8006e68:	4293      	cmp	r3, r2
 8006e6a:	d054      	beq.n	8006f16 <HAL_DMA_Abort+0x58a>
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	4a44      	ldr	r2, [pc, #272]	; (8006f84 <HAL_DMA_Abort+0x5f8>)
 8006e72:	4293      	cmp	r3, r2
 8006e74:	d04f      	beq.n	8006f16 <HAL_DMA_Abort+0x58a>
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	4a43      	ldr	r2, [pc, #268]	; (8006f88 <HAL_DMA_Abort+0x5fc>)
 8006e7c:	4293      	cmp	r3, r2
 8006e7e:	d04a      	beq.n	8006f16 <HAL_DMA_Abort+0x58a>
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	4a41      	ldr	r2, [pc, #260]	; (8006f8c <HAL_DMA_Abort+0x600>)
 8006e86:	4293      	cmp	r3, r2
 8006e88:	d045      	beq.n	8006f16 <HAL_DMA_Abort+0x58a>
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	4a40      	ldr	r2, [pc, #256]	; (8006f90 <HAL_DMA_Abort+0x604>)
 8006e90:	4293      	cmp	r3, r2
 8006e92:	d040      	beq.n	8006f16 <HAL_DMA_Abort+0x58a>
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	4a3e      	ldr	r2, [pc, #248]	; (8006f94 <HAL_DMA_Abort+0x608>)
 8006e9a:	4293      	cmp	r3, r2
 8006e9c:	d03b      	beq.n	8006f16 <HAL_DMA_Abort+0x58a>
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	4a3d      	ldr	r2, [pc, #244]	; (8006f98 <HAL_DMA_Abort+0x60c>)
 8006ea4:	4293      	cmp	r3, r2
 8006ea6:	d036      	beq.n	8006f16 <HAL_DMA_Abort+0x58a>
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	4a3b      	ldr	r2, [pc, #236]	; (8006f9c <HAL_DMA_Abort+0x610>)
 8006eae:	4293      	cmp	r3, r2
 8006eb0:	d031      	beq.n	8006f16 <HAL_DMA_Abort+0x58a>
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	4a3a      	ldr	r2, [pc, #232]	; (8006fa0 <HAL_DMA_Abort+0x614>)
 8006eb8:	4293      	cmp	r3, r2
 8006eba:	d02c      	beq.n	8006f16 <HAL_DMA_Abort+0x58a>
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	4a38      	ldr	r2, [pc, #224]	; (8006fa4 <HAL_DMA_Abort+0x618>)
 8006ec2:	4293      	cmp	r3, r2
 8006ec4:	d027      	beq.n	8006f16 <HAL_DMA_Abort+0x58a>
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	4a37      	ldr	r2, [pc, #220]	; (8006fa8 <HAL_DMA_Abort+0x61c>)
 8006ecc:	4293      	cmp	r3, r2
 8006ece:	d022      	beq.n	8006f16 <HAL_DMA_Abort+0x58a>
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	4a35      	ldr	r2, [pc, #212]	; (8006fac <HAL_DMA_Abort+0x620>)
 8006ed6:	4293      	cmp	r3, r2
 8006ed8:	d01d      	beq.n	8006f16 <HAL_DMA_Abort+0x58a>
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	4a34      	ldr	r2, [pc, #208]	; (8006fb0 <HAL_DMA_Abort+0x624>)
 8006ee0:	4293      	cmp	r3, r2
 8006ee2:	d018      	beq.n	8006f16 <HAL_DMA_Abort+0x58a>
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	4a32      	ldr	r2, [pc, #200]	; (8006fb4 <HAL_DMA_Abort+0x628>)
 8006eea:	4293      	cmp	r3, r2
 8006eec:	d013      	beq.n	8006f16 <HAL_DMA_Abort+0x58a>
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	4a31      	ldr	r2, [pc, #196]	; (8006fb8 <HAL_DMA_Abort+0x62c>)
 8006ef4:	4293      	cmp	r3, r2
 8006ef6:	d00e      	beq.n	8006f16 <HAL_DMA_Abort+0x58a>
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	4a2f      	ldr	r2, [pc, #188]	; (8006fbc <HAL_DMA_Abort+0x630>)
 8006efe:	4293      	cmp	r3, r2
 8006f00:	d009      	beq.n	8006f16 <HAL_DMA_Abort+0x58a>
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	4a2e      	ldr	r2, [pc, #184]	; (8006fc0 <HAL_DMA_Abort+0x634>)
 8006f08:	4293      	cmp	r3, r2
 8006f0a:	d004      	beq.n	8006f16 <HAL_DMA_Abort+0x58a>
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	4a2c      	ldr	r2, [pc, #176]	; (8006fc4 <HAL_DMA_Abort+0x638>)
 8006f12:	4293      	cmp	r3, r2
 8006f14:	d101      	bne.n	8006f1a <HAL_DMA_Abort+0x58e>
 8006f16:	2301      	movs	r3, #1
 8006f18:	e000      	b.n	8006f1c <HAL_DMA_Abort+0x590>
 8006f1a:	2300      	movs	r3, #0
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	d015      	beq.n	8006f4c <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006f24:	687a      	ldr	r2, [r7, #4]
 8006f26:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8006f28:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d00c      	beq.n	8006f4c <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006f36:	681a      	ldr	r2, [r3, #0]
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006f3c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006f40:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f46:	687a      	ldr	r2, [r7, #4]
 8006f48:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8006f4a:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	2201      	movs	r2, #1
 8006f50:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	2200      	movs	r2, #0
 8006f58:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 8006f5c:	2300      	movs	r3, #0
}
 8006f5e:	4618      	mov	r0, r3
 8006f60:	3718      	adds	r7, #24
 8006f62:	46bd      	mov	sp, r7
 8006f64:	bd80      	pop	{r7, pc}
 8006f66:	bf00      	nop
 8006f68:	40020010 	.word	0x40020010
 8006f6c:	40020028 	.word	0x40020028
 8006f70:	40020040 	.word	0x40020040
 8006f74:	40020058 	.word	0x40020058
 8006f78:	40020070 	.word	0x40020070
 8006f7c:	40020088 	.word	0x40020088
 8006f80:	400200a0 	.word	0x400200a0
 8006f84:	400200b8 	.word	0x400200b8
 8006f88:	40020410 	.word	0x40020410
 8006f8c:	40020428 	.word	0x40020428
 8006f90:	40020440 	.word	0x40020440
 8006f94:	40020458 	.word	0x40020458
 8006f98:	40020470 	.word	0x40020470
 8006f9c:	40020488 	.word	0x40020488
 8006fa0:	400204a0 	.word	0x400204a0
 8006fa4:	400204b8 	.word	0x400204b8
 8006fa8:	58025408 	.word	0x58025408
 8006fac:	5802541c 	.word	0x5802541c
 8006fb0:	58025430 	.word	0x58025430
 8006fb4:	58025444 	.word	0x58025444
 8006fb8:	58025458 	.word	0x58025458
 8006fbc:	5802546c 	.word	0x5802546c
 8006fc0:	58025480 	.word	0x58025480
 8006fc4:	58025494 	.word	0x58025494

08006fc8 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8006fc8:	b580      	push	{r7, lr}
 8006fca:	b084      	sub	sp, #16
 8006fcc:	af00      	add	r7, sp, #0
 8006fce:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d101      	bne.n	8006fda <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8006fd6:	2301      	movs	r3, #1
 8006fd8:	e237      	b.n	800744a <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006fe0:	b2db      	uxtb	r3, r3
 8006fe2:	2b02      	cmp	r3, #2
 8006fe4:	d004      	beq.n	8006ff0 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	2280      	movs	r2, #128	; 0x80
 8006fea:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8006fec:	2301      	movs	r3, #1
 8006fee:	e22c      	b.n	800744a <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	4a5c      	ldr	r2, [pc, #368]	; (8007168 <HAL_DMA_Abort_IT+0x1a0>)
 8006ff6:	4293      	cmp	r3, r2
 8006ff8:	d04a      	beq.n	8007090 <HAL_DMA_Abort_IT+0xc8>
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	4a5b      	ldr	r2, [pc, #364]	; (800716c <HAL_DMA_Abort_IT+0x1a4>)
 8007000:	4293      	cmp	r3, r2
 8007002:	d045      	beq.n	8007090 <HAL_DMA_Abort_IT+0xc8>
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	4a59      	ldr	r2, [pc, #356]	; (8007170 <HAL_DMA_Abort_IT+0x1a8>)
 800700a:	4293      	cmp	r3, r2
 800700c:	d040      	beq.n	8007090 <HAL_DMA_Abort_IT+0xc8>
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	4a58      	ldr	r2, [pc, #352]	; (8007174 <HAL_DMA_Abort_IT+0x1ac>)
 8007014:	4293      	cmp	r3, r2
 8007016:	d03b      	beq.n	8007090 <HAL_DMA_Abort_IT+0xc8>
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	4a56      	ldr	r2, [pc, #344]	; (8007178 <HAL_DMA_Abort_IT+0x1b0>)
 800701e:	4293      	cmp	r3, r2
 8007020:	d036      	beq.n	8007090 <HAL_DMA_Abort_IT+0xc8>
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	4a55      	ldr	r2, [pc, #340]	; (800717c <HAL_DMA_Abort_IT+0x1b4>)
 8007028:	4293      	cmp	r3, r2
 800702a:	d031      	beq.n	8007090 <HAL_DMA_Abort_IT+0xc8>
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	4a53      	ldr	r2, [pc, #332]	; (8007180 <HAL_DMA_Abort_IT+0x1b8>)
 8007032:	4293      	cmp	r3, r2
 8007034:	d02c      	beq.n	8007090 <HAL_DMA_Abort_IT+0xc8>
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	4a52      	ldr	r2, [pc, #328]	; (8007184 <HAL_DMA_Abort_IT+0x1bc>)
 800703c:	4293      	cmp	r3, r2
 800703e:	d027      	beq.n	8007090 <HAL_DMA_Abort_IT+0xc8>
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	4a50      	ldr	r2, [pc, #320]	; (8007188 <HAL_DMA_Abort_IT+0x1c0>)
 8007046:	4293      	cmp	r3, r2
 8007048:	d022      	beq.n	8007090 <HAL_DMA_Abort_IT+0xc8>
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	4a4f      	ldr	r2, [pc, #316]	; (800718c <HAL_DMA_Abort_IT+0x1c4>)
 8007050:	4293      	cmp	r3, r2
 8007052:	d01d      	beq.n	8007090 <HAL_DMA_Abort_IT+0xc8>
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	4a4d      	ldr	r2, [pc, #308]	; (8007190 <HAL_DMA_Abort_IT+0x1c8>)
 800705a:	4293      	cmp	r3, r2
 800705c:	d018      	beq.n	8007090 <HAL_DMA_Abort_IT+0xc8>
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	4a4c      	ldr	r2, [pc, #304]	; (8007194 <HAL_DMA_Abort_IT+0x1cc>)
 8007064:	4293      	cmp	r3, r2
 8007066:	d013      	beq.n	8007090 <HAL_DMA_Abort_IT+0xc8>
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	4a4a      	ldr	r2, [pc, #296]	; (8007198 <HAL_DMA_Abort_IT+0x1d0>)
 800706e:	4293      	cmp	r3, r2
 8007070:	d00e      	beq.n	8007090 <HAL_DMA_Abort_IT+0xc8>
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	4a49      	ldr	r2, [pc, #292]	; (800719c <HAL_DMA_Abort_IT+0x1d4>)
 8007078:	4293      	cmp	r3, r2
 800707a:	d009      	beq.n	8007090 <HAL_DMA_Abort_IT+0xc8>
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	4a47      	ldr	r2, [pc, #284]	; (80071a0 <HAL_DMA_Abort_IT+0x1d8>)
 8007082:	4293      	cmp	r3, r2
 8007084:	d004      	beq.n	8007090 <HAL_DMA_Abort_IT+0xc8>
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	4a46      	ldr	r2, [pc, #280]	; (80071a4 <HAL_DMA_Abort_IT+0x1dc>)
 800708c:	4293      	cmp	r3, r2
 800708e:	d101      	bne.n	8007094 <HAL_DMA_Abort_IT+0xcc>
 8007090:	2301      	movs	r3, #1
 8007092:	e000      	b.n	8007096 <HAL_DMA_Abort_IT+0xce>
 8007094:	2300      	movs	r3, #0
 8007096:	2b00      	cmp	r3, #0
 8007098:	f000 8086 	beq.w	80071a8 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	2204      	movs	r2, #4
 80070a0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	4a2f      	ldr	r2, [pc, #188]	; (8007168 <HAL_DMA_Abort_IT+0x1a0>)
 80070aa:	4293      	cmp	r3, r2
 80070ac:	d04a      	beq.n	8007144 <HAL_DMA_Abort_IT+0x17c>
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	4a2e      	ldr	r2, [pc, #184]	; (800716c <HAL_DMA_Abort_IT+0x1a4>)
 80070b4:	4293      	cmp	r3, r2
 80070b6:	d045      	beq.n	8007144 <HAL_DMA_Abort_IT+0x17c>
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	4a2c      	ldr	r2, [pc, #176]	; (8007170 <HAL_DMA_Abort_IT+0x1a8>)
 80070be:	4293      	cmp	r3, r2
 80070c0:	d040      	beq.n	8007144 <HAL_DMA_Abort_IT+0x17c>
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	4a2b      	ldr	r2, [pc, #172]	; (8007174 <HAL_DMA_Abort_IT+0x1ac>)
 80070c8:	4293      	cmp	r3, r2
 80070ca:	d03b      	beq.n	8007144 <HAL_DMA_Abort_IT+0x17c>
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	4a29      	ldr	r2, [pc, #164]	; (8007178 <HAL_DMA_Abort_IT+0x1b0>)
 80070d2:	4293      	cmp	r3, r2
 80070d4:	d036      	beq.n	8007144 <HAL_DMA_Abort_IT+0x17c>
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	4a28      	ldr	r2, [pc, #160]	; (800717c <HAL_DMA_Abort_IT+0x1b4>)
 80070dc:	4293      	cmp	r3, r2
 80070de:	d031      	beq.n	8007144 <HAL_DMA_Abort_IT+0x17c>
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	4a26      	ldr	r2, [pc, #152]	; (8007180 <HAL_DMA_Abort_IT+0x1b8>)
 80070e6:	4293      	cmp	r3, r2
 80070e8:	d02c      	beq.n	8007144 <HAL_DMA_Abort_IT+0x17c>
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	4a25      	ldr	r2, [pc, #148]	; (8007184 <HAL_DMA_Abort_IT+0x1bc>)
 80070f0:	4293      	cmp	r3, r2
 80070f2:	d027      	beq.n	8007144 <HAL_DMA_Abort_IT+0x17c>
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	4a23      	ldr	r2, [pc, #140]	; (8007188 <HAL_DMA_Abort_IT+0x1c0>)
 80070fa:	4293      	cmp	r3, r2
 80070fc:	d022      	beq.n	8007144 <HAL_DMA_Abort_IT+0x17c>
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	4a22      	ldr	r2, [pc, #136]	; (800718c <HAL_DMA_Abort_IT+0x1c4>)
 8007104:	4293      	cmp	r3, r2
 8007106:	d01d      	beq.n	8007144 <HAL_DMA_Abort_IT+0x17c>
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	4a20      	ldr	r2, [pc, #128]	; (8007190 <HAL_DMA_Abort_IT+0x1c8>)
 800710e:	4293      	cmp	r3, r2
 8007110:	d018      	beq.n	8007144 <HAL_DMA_Abort_IT+0x17c>
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	4a1f      	ldr	r2, [pc, #124]	; (8007194 <HAL_DMA_Abort_IT+0x1cc>)
 8007118:	4293      	cmp	r3, r2
 800711a:	d013      	beq.n	8007144 <HAL_DMA_Abort_IT+0x17c>
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	4a1d      	ldr	r2, [pc, #116]	; (8007198 <HAL_DMA_Abort_IT+0x1d0>)
 8007122:	4293      	cmp	r3, r2
 8007124:	d00e      	beq.n	8007144 <HAL_DMA_Abort_IT+0x17c>
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	4a1c      	ldr	r2, [pc, #112]	; (800719c <HAL_DMA_Abort_IT+0x1d4>)
 800712c:	4293      	cmp	r3, r2
 800712e:	d009      	beq.n	8007144 <HAL_DMA_Abort_IT+0x17c>
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	4a1a      	ldr	r2, [pc, #104]	; (80071a0 <HAL_DMA_Abort_IT+0x1d8>)
 8007136:	4293      	cmp	r3, r2
 8007138:	d004      	beq.n	8007144 <HAL_DMA_Abort_IT+0x17c>
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	4a19      	ldr	r2, [pc, #100]	; (80071a4 <HAL_DMA_Abort_IT+0x1dc>)
 8007140:	4293      	cmp	r3, r2
 8007142:	d108      	bne.n	8007156 <HAL_DMA_Abort_IT+0x18e>
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	681a      	ldr	r2, [r3, #0]
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	f022 0201 	bic.w	r2, r2, #1
 8007152:	601a      	str	r2, [r3, #0]
 8007154:	e178      	b.n	8007448 <HAL_DMA_Abort_IT+0x480>
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	681a      	ldr	r2, [r3, #0]
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	f022 0201 	bic.w	r2, r2, #1
 8007164:	601a      	str	r2, [r3, #0]
 8007166:	e16f      	b.n	8007448 <HAL_DMA_Abort_IT+0x480>
 8007168:	40020010 	.word	0x40020010
 800716c:	40020028 	.word	0x40020028
 8007170:	40020040 	.word	0x40020040
 8007174:	40020058 	.word	0x40020058
 8007178:	40020070 	.word	0x40020070
 800717c:	40020088 	.word	0x40020088
 8007180:	400200a0 	.word	0x400200a0
 8007184:	400200b8 	.word	0x400200b8
 8007188:	40020410 	.word	0x40020410
 800718c:	40020428 	.word	0x40020428
 8007190:	40020440 	.word	0x40020440
 8007194:	40020458 	.word	0x40020458
 8007198:	40020470 	.word	0x40020470
 800719c:	40020488 	.word	0x40020488
 80071a0:	400204a0 	.word	0x400204a0
 80071a4:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	681a      	ldr	r2, [r3, #0]
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	f022 020e 	bic.w	r2, r2, #14
 80071b6:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	4a6c      	ldr	r2, [pc, #432]	; (8007370 <HAL_DMA_Abort_IT+0x3a8>)
 80071be:	4293      	cmp	r3, r2
 80071c0:	d04a      	beq.n	8007258 <HAL_DMA_Abort_IT+0x290>
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	4a6b      	ldr	r2, [pc, #428]	; (8007374 <HAL_DMA_Abort_IT+0x3ac>)
 80071c8:	4293      	cmp	r3, r2
 80071ca:	d045      	beq.n	8007258 <HAL_DMA_Abort_IT+0x290>
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	4a69      	ldr	r2, [pc, #420]	; (8007378 <HAL_DMA_Abort_IT+0x3b0>)
 80071d2:	4293      	cmp	r3, r2
 80071d4:	d040      	beq.n	8007258 <HAL_DMA_Abort_IT+0x290>
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	4a68      	ldr	r2, [pc, #416]	; (800737c <HAL_DMA_Abort_IT+0x3b4>)
 80071dc:	4293      	cmp	r3, r2
 80071de:	d03b      	beq.n	8007258 <HAL_DMA_Abort_IT+0x290>
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	4a66      	ldr	r2, [pc, #408]	; (8007380 <HAL_DMA_Abort_IT+0x3b8>)
 80071e6:	4293      	cmp	r3, r2
 80071e8:	d036      	beq.n	8007258 <HAL_DMA_Abort_IT+0x290>
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	4a65      	ldr	r2, [pc, #404]	; (8007384 <HAL_DMA_Abort_IT+0x3bc>)
 80071f0:	4293      	cmp	r3, r2
 80071f2:	d031      	beq.n	8007258 <HAL_DMA_Abort_IT+0x290>
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	4a63      	ldr	r2, [pc, #396]	; (8007388 <HAL_DMA_Abort_IT+0x3c0>)
 80071fa:	4293      	cmp	r3, r2
 80071fc:	d02c      	beq.n	8007258 <HAL_DMA_Abort_IT+0x290>
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	4a62      	ldr	r2, [pc, #392]	; (800738c <HAL_DMA_Abort_IT+0x3c4>)
 8007204:	4293      	cmp	r3, r2
 8007206:	d027      	beq.n	8007258 <HAL_DMA_Abort_IT+0x290>
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	4a60      	ldr	r2, [pc, #384]	; (8007390 <HAL_DMA_Abort_IT+0x3c8>)
 800720e:	4293      	cmp	r3, r2
 8007210:	d022      	beq.n	8007258 <HAL_DMA_Abort_IT+0x290>
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	4a5f      	ldr	r2, [pc, #380]	; (8007394 <HAL_DMA_Abort_IT+0x3cc>)
 8007218:	4293      	cmp	r3, r2
 800721a:	d01d      	beq.n	8007258 <HAL_DMA_Abort_IT+0x290>
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	4a5d      	ldr	r2, [pc, #372]	; (8007398 <HAL_DMA_Abort_IT+0x3d0>)
 8007222:	4293      	cmp	r3, r2
 8007224:	d018      	beq.n	8007258 <HAL_DMA_Abort_IT+0x290>
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	4a5c      	ldr	r2, [pc, #368]	; (800739c <HAL_DMA_Abort_IT+0x3d4>)
 800722c:	4293      	cmp	r3, r2
 800722e:	d013      	beq.n	8007258 <HAL_DMA_Abort_IT+0x290>
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	4a5a      	ldr	r2, [pc, #360]	; (80073a0 <HAL_DMA_Abort_IT+0x3d8>)
 8007236:	4293      	cmp	r3, r2
 8007238:	d00e      	beq.n	8007258 <HAL_DMA_Abort_IT+0x290>
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	4a59      	ldr	r2, [pc, #356]	; (80073a4 <HAL_DMA_Abort_IT+0x3dc>)
 8007240:	4293      	cmp	r3, r2
 8007242:	d009      	beq.n	8007258 <HAL_DMA_Abort_IT+0x290>
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	4a57      	ldr	r2, [pc, #348]	; (80073a8 <HAL_DMA_Abort_IT+0x3e0>)
 800724a:	4293      	cmp	r3, r2
 800724c:	d004      	beq.n	8007258 <HAL_DMA_Abort_IT+0x290>
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	4a56      	ldr	r2, [pc, #344]	; (80073ac <HAL_DMA_Abort_IT+0x3e4>)
 8007254:	4293      	cmp	r3, r2
 8007256:	d108      	bne.n	800726a <HAL_DMA_Abort_IT+0x2a2>
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	681a      	ldr	r2, [r3, #0]
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	f022 0201 	bic.w	r2, r2, #1
 8007266:	601a      	str	r2, [r3, #0]
 8007268:	e007      	b.n	800727a <HAL_DMA_Abort_IT+0x2b2>
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	681a      	ldr	r2, [r3, #0]
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	f022 0201 	bic.w	r2, r2, #1
 8007278:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	4a3c      	ldr	r2, [pc, #240]	; (8007370 <HAL_DMA_Abort_IT+0x3a8>)
 8007280:	4293      	cmp	r3, r2
 8007282:	d072      	beq.n	800736a <HAL_DMA_Abort_IT+0x3a2>
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	4a3a      	ldr	r2, [pc, #232]	; (8007374 <HAL_DMA_Abort_IT+0x3ac>)
 800728a:	4293      	cmp	r3, r2
 800728c:	d06d      	beq.n	800736a <HAL_DMA_Abort_IT+0x3a2>
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	4a39      	ldr	r2, [pc, #228]	; (8007378 <HAL_DMA_Abort_IT+0x3b0>)
 8007294:	4293      	cmp	r3, r2
 8007296:	d068      	beq.n	800736a <HAL_DMA_Abort_IT+0x3a2>
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	4a37      	ldr	r2, [pc, #220]	; (800737c <HAL_DMA_Abort_IT+0x3b4>)
 800729e:	4293      	cmp	r3, r2
 80072a0:	d063      	beq.n	800736a <HAL_DMA_Abort_IT+0x3a2>
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	4a36      	ldr	r2, [pc, #216]	; (8007380 <HAL_DMA_Abort_IT+0x3b8>)
 80072a8:	4293      	cmp	r3, r2
 80072aa:	d05e      	beq.n	800736a <HAL_DMA_Abort_IT+0x3a2>
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	4a34      	ldr	r2, [pc, #208]	; (8007384 <HAL_DMA_Abort_IT+0x3bc>)
 80072b2:	4293      	cmp	r3, r2
 80072b4:	d059      	beq.n	800736a <HAL_DMA_Abort_IT+0x3a2>
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	4a33      	ldr	r2, [pc, #204]	; (8007388 <HAL_DMA_Abort_IT+0x3c0>)
 80072bc:	4293      	cmp	r3, r2
 80072be:	d054      	beq.n	800736a <HAL_DMA_Abort_IT+0x3a2>
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	4a31      	ldr	r2, [pc, #196]	; (800738c <HAL_DMA_Abort_IT+0x3c4>)
 80072c6:	4293      	cmp	r3, r2
 80072c8:	d04f      	beq.n	800736a <HAL_DMA_Abort_IT+0x3a2>
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	4a30      	ldr	r2, [pc, #192]	; (8007390 <HAL_DMA_Abort_IT+0x3c8>)
 80072d0:	4293      	cmp	r3, r2
 80072d2:	d04a      	beq.n	800736a <HAL_DMA_Abort_IT+0x3a2>
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	4a2e      	ldr	r2, [pc, #184]	; (8007394 <HAL_DMA_Abort_IT+0x3cc>)
 80072da:	4293      	cmp	r3, r2
 80072dc:	d045      	beq.n	800736a <HAL_DMA_Abort_IT+0x3a2>
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	4a2d      	ldr	r2, [pc, #180]	; (8007398 <HAL_DMA_Abort_IT+0x3d0>)
 80072e4:	4293      	cmp	r3, r2
 80072e6:	d040      	beq.n	800736a <HAL_DMA_Abort_IT+0x3a2>
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	4a2b      	ldr	r2, [pc, #172]	; (800739c <HAL_DMA_Abort_IT+0x3d4>)
 80072ee:	4293      	cmp	r3, r2
 80072f0:	d03b      	beq.n	800736a <HAL_DMA_Abort_IT+0x3a2>
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	4a2a      	ldr	r2, [pc, #168]	; (80073a0 <HAL_DMA_Abort_IT+0x3d8>)
 80072f8:	4293      	cmp	r3, r2
 80072fa:	d036      	beq.n	800736a <HAL_DMA_Abort_IT+0x3a2>
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	4a28      	ldr	r2, [pc, #160]	; (80073a4 <HAL_DMA_Abort_IT+0x3dc>)
 8007302:	4293      	cmp	r3, r2
 8007304:	d031      	beq.n	800736a <HAL_DMA_Abort_IT+0x3a2>
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	4a27      	ldr	r2, [pc, #156]	; (80073a8 <HAL_DMA_Abort_IT+0x3e0>)
 800730c:	4293      	cmp	r3, r2
 800730e:	d02c      	beq.n	800736a <HAL_DMA_Abort_IT+0x3a2>
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	4a25      	ldr	r2, [pc, #148]	; (80073ac <HAL_DMA_Abort_IT+0x3e4>)
 8007316:	4293      	cmp	r3, r2
 8007318:	d027      	beq.n	800736a <HAL_DMA_Abort_IT+0x3a2>
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	4a24      	ldr	r2, [pc, #144]	; (80073b0 <HAL_DMA_Abort_IT+0x3e8>)
 8007320:	4293      	cmp	r3, r2
 8007322:	d022      	beq.n	800736a <HAL_DMA_Abort_IT+0x3a2>
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	4a22      	ldr	r2, [pc, #136]	; (80073b4 <HAL_DMA_Abort_IT+0x3ec>)
 800732a:	4293      	cmp	r3, r2
 800732c:	d01d      	beq.n	800736a <HAL_DMA_Abort_IT+0x3a2>
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	4a21      	ldr	r2, [pc, #132]	; (80073b8 <HAL_DMA_Abort_IT+0x3f0>)
 8007334:	4293      	cmp	r3, r2
 8007336:	d018      	beq.n	800736a <HAL_DMA_Abort_IT+0x3a2>
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	4a1f      	ldr	r2, [pc, #124]	; (80073bc <HAL_DMA_Abort_IT+0x3f4>)
 800733e:	4293      	cmp	r3, r2
 8007340:	d013      	beq.n	800736a <HAL_DMA_Abort_IT+0x3a2>
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	4a1e      	ldr	r2, [pc, #120]	; (80073c0 <HAL_DMA_Abort_IT+0x3f8>)
 8007348:	4293      	cmp	r3, r2
 800734a:	d00e      	beq.n	800736a <HAL_DMA_Abort_IT+0x3a2>
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	4a1c      	ldr	r2, [pc, #112]	; (80073c4 <HAL_DMA_Abort_IT+0x3fc>)
 8007352:	4293      	cmp	r3, r2
 8007354:	d009      	beq.n	800736a <HAL_DMA_Abort_IT+0x3a2>
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	4a1b      	ldr	r2, [pc, #108]	; (80073c8 <HAL_DMA_Abort_IT+0x400>)
 800735c:	4293      	cmp	r3, r2
 800735e:	d004      	beq.n	800736a <HAL_DMA_Abort_IT+0x3a2>
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	4a19      	ldr	r2, [pc, #100]	; (80073cc <HAL_DMA_Abort_IT+0x404>)
 8007366:	4293      	cmp	r3, r2
 8007368:	d132      	bne.n	80073d0 <HAL_DMA_Abort_IT+0x408>
 800736a:	2301      	movs	r3, #1
 800736c:	e031      	b.n	80073d2 <HAL_DMA_Abort_IT+0x40a>
 800736e:	bf00      	nop
 8007370:	40020010 	.word	0x40020010
 8007374:	40020028 	.word	0x40020028
 8007378:	40020040 	.word	0x40020040
 800737c:	40020058 	.word	0x40020058
 8007380:	40020070 	.word	0x40020070
 8007384:	40020088 	.word	0x40020088
 8007388:	400200a0 	.word	0x400200a0
 800738c:	400200b8 	.word	0x400200b8
 8007390:	40020410 	.word	0x40020410
 8007394:	40020428 	.word	0x40020428
 8007398:	40020440 	.word	0x40020440
 800739c:	40020458 	.word	0x40020458
 80073a0:	40020470 	.word	0x40020470
 80073a4:	40020488 	.word	0x40020488
 80073a8:	400204a0 	.word	0x400204a0
 80073ac:	400204b8 	.word	0x400204b8
 80073b0:	58025408 	.word	0x58025408
 80073b4:	5802541c 	.word	0x5802541c
 80073b8:	58025430 	.word	0x58025430
 80073bc:	58025444 	.word	0x58025444
 80073c0:	58025458 	.word	0x58025458
 80073c4:	5802546c 	.word	0x5802546c
 80073c8:	58025480 	.word	0x58025480
 80073cc:	58025494 	.word	0x58025494
 80073d0:	2300      	movs	r3, #0
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	d028      	beq.n	8007428 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80073da:	681a      	ldr	r2, [r3, #0]
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80073e0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80073e4:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80073ea:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80073f0:	f003 031f 	and.w	r3, r3, #31
 80073f4:	2201      	movs	r2, #1
 80073f6:	409a      	lsls	r2, r3
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007400:	687a      	ldr	r2, [r7, #4]
 8007402:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8007404:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800740a:	2b00      	cmp	r3, #0
 800740c:	d00c      	beq.n	8007428 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007412:	681a      	ldr	r2, [r3, #0]
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007418:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800741c:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007422:	687a      	ldr	r2, [r7, #4]
 8007424:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8007426:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	2201      	movs	r2, #1
 800742c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	2200      	movs	r2, #0
 8007434:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800743c:	2b00      	cmp	r3, #0
 800743e:	d003      	beq.n	8007448 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007444:	6878      	ldr	r0, [r7, #4]
 8007446:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8007448:	2300      	movs	r3, #0
}
 800744a:	4618      	mov	r0, r3
 800744c:	3710      	adds	r7, #16
 800744e:	46bd      	mov	sp, r7
 8007450:	bd80      	pop	{r7, pc}
 8007452:	bf00      	nop

08007454 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007454:	b480      	push	{r7}
 8007456:	b089      	sub	sp, #36	; 0x24
 8007458:	af00      	add	r7, sp, #0
 800745a:	6078      	str	r0, [r7, #4]
 800745c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800745e:	2300      	movs	r3, #0
 8007460:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8007462:	4b89      	ldr	r3, [pc, #548]	; (8007688 <HAL_GPIO_Init+0x234>)
 8007464:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8007466:	e194      	b.n	8007792 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8007468:	683b      	ldr	r3, [r7, #0]
 800746a:	681a      	ldr	r2, [r3, #0]
 800746c:	2101      	movs	r1, #1
 800746e:	69fb      	ldr	r3, [r7, #28]
 8007470:	fa01 f303 	lsl.w	r3, r1, r3
 8007474:	4013      	ands	r3, r2
 8007476:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8007478:	693b      	ldr	r3, [r7, #16]
 800747a:	2b00      	cmp	r3, #0
 800747c:	f000 8186 	beq.w	800778c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8007480:	683b      	ldr	r3, [r7, #0]
 8007482:	685b      	ldr	r3, [r3, #4]
 8007484:	f003 0303 	and.w	r3, r3, #3
 8007488:	2b01      	cmp	r3, #1
 800748a:	d005      	beq.n	8007498 <HAL_GPIO_Init+0x44>
 800748c:	683b      	ldr	r3, [r7, #0]
 800748e:	685b      	ldr	r3, [r3, #4]
 8007490:	f003 0303 	and.w	r3, r3, #3
 8007494:	2b02      	cmp	r3, #2
 8007496:	d130      	bne.n	80074fa <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	689b      	ldr	r3, [r3, #8]
 800749c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800749e:	69fb      	ldr	r3, [r7, #28]
 80074a0:	005b      	lsls	r3, r3, #1
 80074a2:	2203      	movs	r2, #3
 80074a4:	fa02 f303 	lsl.w	r3, r2, r3
 80074a8:	43db      	mvns	r3, r3
 80074aa:	69ba      	ldr	r2, [r7, #24]
 80074ac:	4013      	ands	r3, r2
 80074ae:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80074b0:	683b      	ldr	r3, [r7, #0]
 80074b2:	68da      	ldr	r2, [r3, #12]
 80074b4:	69fb      	ldr	r3, [r7, #28]
 80074b6:	005b      	lsls	r3, r3, #1
 80074b8:	fa02 f303 	lsl.w	r3, r2, r3
 80074bc:	69ba      	ldr	r2, [r7, #24]
 80074be:	4313      	orrs	r3, r2
 80074c0:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	69ba      	ldr	r2, [r7, #24]
 80074c6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	685b      	ldr	r3, [r3, #4]
 80074cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80074ce:	2201      	movs	r2, #1
 80074d0:	69fb      	ldr	r3, [r7, #28]
 80074d2:	fa02 f303 	lsl.w	r3, r2, r3
 80074d6:	43db      	mvns	r3, r3
 80074d8:	69ba      	ldr	r2, [r7, #24]
 80074da:	4013      	ands	r3, r2
 80074dc:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80074de:	683b      	ldr	r3, [r7, #0]
 80074e0:	685b      	ldr	r3, [r3, #4]
 80074e2:	091b      	lsrs	r3, r3, #4
 80074e4:	f003 0201 	and.w	r2, r3, #1
 80074e8:	69fb      	ldr	r3, [r7, #28]
 80074ea:	fa02 f303 	lsl.w	r3, r2, r3
 80074ee:	69ba      	ldr	r2, [r7, #24]
 80074f0:	4313      	orrs	r3, r2
 80074f2:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	69ba      	ldr	r2, [r7, #24]
 80074f8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80074fa:	683b      	ldr	r3, [r7, #0]
 80074fc:	685b      	ldr	r3, [r3, #4]
 80074fe:	f003 0303 	and.w	r3, r3, #3
 8007502:	2b03      	cmp	r3, #3
 8007504:	d017      	beq.n	8007536 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	68db      	ldr	r3, [r3, #12]
 800750a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800750c:	69fb      	ldr	r3, [r7, #28]
 800750e:	005b      	lsls	r3, r3, #1
 8007510:	2203      	movs	r2, #3
 8007512:	fa02 f303 	lsl.w	r3, r2, r3
 8007516:	43db      	mvns	r3, r3
 8007518:	69ba      	ldr	r2, [r7, #24]
 800751a:	4013      	ands	r3, r2
 800751c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800751e:	683b      	ldr	r3, [r7, #0]
 8007520:	689a      	ldr	r2, [r3, #8]
 8007522:	69fb      	ldr	r3, [r7, #28]
 8007524:	005b      	lsls	r3, r3, #1
 8007526:	fa02 f303 	lsl.w	r3, r2, r3
 800752a:	69ba      	ldr	r2, [r7, #24]
 800752c:	4313      	orrs	r3, r2
 800752e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	69ba      	ldr	r2, [r7, #24]
 8007534:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007536:	683b      	ldr	r3, [r7, #0]
 8007538:	685b      	ldr	r3, [r3, #4]
 800753a:	f003 0303 	and.w	r3, r3, #3
 800753e:	2b02      	cmp	r3, #2
 8007540:	d123      	bne.n	800758a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8007542:	69fb      	ldr	r3, [r7, #28]
 8007544:	08da      	lsrs	r2, r3, #3
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	3208      	adds	r2, #8
 800754a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800754e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8007550:	69fb      	ldr	r3, [r7, #28]
 8007552:	f003 0307 	and.w	r3, r3, #7
 8007556:	009b      	lsls	r3, r3, #2
 8007558:	220f      	movs	r2, #15
 800755a:	fa02 f303 	lsl.w	r3, r2, r3
 800755e:	43db      	mvns	r3, r3
 8007560:	69ba      	ldr	r2, [r7, #24]
 8007562:	4013      	ands	r3, r2
 8007564:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8007566:	683b      	ldr	r3, [r7, #0]
 8007568:	691a      	ldr	r2, [r3, #16]
 800756a:	69fb      	ldr	r3, [r7, #28]
 800756c:	f003 0307 	and.w	r3, r3, #7
 8007570:	009b      	lsls	r3, r3, #2
 8007572:	fa02 f303 	lsl.w	r3, r2, r3
 8007576:	69ba      	ldr	r2, [r7, #24]
 8007578:	4313      	orrs	r3, r2
 800757a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800757c:	69fb      	ldr	r3, [r7, #28]
 800757e:	08da      	lsrs	r2, r3, #3
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	3208      	adds	r2, #8
 8007584:	69b9      	ldr	r1, [r7, #24]
 8007586:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8007590:	69fb      	ldr	r3, [r7, #28]
 8007592:	005b      	lsls	r3, r3, #1
 8007594:	2203      	movs	r2, #3
 8007596:	fa02 f303 	lsl.w	r3, r2, r3
 800759a:	43db      	mvns	r3, r3
 800759c:	69ba      	ldr	r2, [r7, #24]
 800759e:	4013      	ands	r3, r2
 80075a0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80075a2:	683b      	ldr	r3, [r7, #0]
 80075a4:	685b      	ldr	r3, [r3, #4]
 80075a6:	f003 0203 	and.w	r2, r3, #3
 80075aa:	69fb      	ldr	r3, [r7, #28]
 80075ac:	005b      	lsls	r3, r3, #1
 80075ae:	fa02 f303 	lsl.w	r3, r2, r3
 80075b2:	69ba      	ldr	r2, [r7, #24]
 80075b4:	4313      	orrs	r3, r2
 80075b6:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	69ba      	ldr	r2, [r7, #24]
 80075bc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80075be:	683b      	ldr	r3, [r7, #0]
 80075c0:	685b      	ldr	r3, [r3, #4]
 80075c2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	f000 80e0 	beq.w	800778c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80075cc:	4b2f      	ldr	r3, [pc, #188]	; (800768c <HAL_GPIO_Init+0x238>)
 80075ce:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80075d2:	4a2e      	ldr	r2, [pc, #184]	; (800768c <HAL_GPIO_Init+0x238>)
 80075d4:	f043 0302 	orr.w	r3, r3, #2
 80075d8:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80075dc:	4b2b      	ldr	r3, [pc, #172]	; (800768c <HAL_GPIO_Init+0x238>)
 80075de:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80075e2:	f003 0302 	and.w	r3, r3, #2
 80075e6:	60fb      	str	r3, [r7, #12]
 80075e8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80075ea:	4a29      	ldr	r2, [pc, #164]	; (8007690 <HAL_GPIO_Init+0x23c>)
 80075ec:	69fb      	ldr	r3, [r7, #28]
 80075ee:	089b      	lsrs	r3, r3, #2
 80075f0:	3302      	adds	r3, #2
 80075f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80075f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80075f8:	69fb      	ldr	r3, [r7, #28]
 80075fa:	f003 0303 	and.w	r3, r3, #3
 80075fe:	009b      	lsls	r3, r3, #2
 8007600:	220f      	movs	r2, #15
 8007602:	fa02 f303 	lsl.w	r3, r2, r3
 8007606:	43db      	mvns	r3, r3
 8007608:	69ba      	ldr	r2, [r7, #24]
 800760a:	4013      	ands	r3, r2
 800760c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	4a20      	ldr	r2, [pc, #128]	; (8007694 <HAL_GPIO_Init+0x240>)
 8007612:	4293      	cmp	r3, r2
 8007614:	d052      	beq.n	80076bc <HAL_GPIO_Init+0x268>
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	4a1f      	ldr	r2, [pc, #124]	; (8007698 <HAL_GPIO_Init+0x244>)
 800761a:	4293      	cmp	r3, r2
 800761c:	d031      	beq.n	8007682 <HAL_GPIO_Init+0x22e>
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	4a1e      	ldr	r2, [pc, #120]	; (800769c <HAL_GPIO_Init+0x248>)
 8007622:	4293      	cmp	r3, r2
 8007624:	d02b      	beq.n	800767e <HAL_GPIO_Init+0x22a>
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	4a1d      	ldr	r2, [pc, #116]	; (80076a0 <HAL_GPIO_Init+0x24c>)
 800762a:	4293      	cmp	r3, r2
 800762c:	d025      	beq.n	800767a <HAL_GPIO_Init+0x226>
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	4a1c      	ldr	r2, [pc, #112]	; (80076a4 <HAL_GPIO_Init+0x250>)
 8007632:	4293      	cmp	r3, r2
 8007634:	d01f      	beq.n	8007676 <HAL_GPIO_Init+0x222>
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	4a1b      	ldr	r2, [pc, #108]	; (80076a8 <HAL_GPIO_Init+0x254>)
 800763a:	4293      	cmp	r3, r2
 800763c:	d019      	beq.n	8007672 <HAL_GPIO_Init+0x21e>
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	4a1a      	ldr	r2, [pc, #104]	; (80076ac <HAL_GPIO_Init+0x258>)
 8007642:	4293      	cmp	r3, r2
 8007644:	d013      	beq.n	800766e <HAL_GPIO_Init+0x21a>
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	4a19      	ldr	r2, [pc, #100]	; (80076b0 <HAL_GPIO_Init+0x25c>)
 800764a:	4293      	cmp	r3, r2
 800764c:	d00d      	beq.n	800766a <HAL_GPIO_Init+0x216>
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	4a18      	ldr	r2, [pc, #96]	; (80076b4 <HAL_GPIO_Init+0x260>)
 8007652:	4293      	cmp	r3, r2
 8007654:	d007      	beq.n	8007666 <HAL_GPIO_Init+0x212>
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	4a17      	ldr	r2, [pc, #92]	; (80076b8 <HAL_GPIO_Init+0x264>)
 800765a:	4293      	cmp	r3, r2
 800765c:	d101      	bne.n	8007662 <HAL_GPIO_Init+0x20e>
 800765e:	2309      	movs	r3, #9
 8007660:	e02d      	b.n	80076be <HAL_GPIO_Init+0x26a>
 8007662:	230a      	movs	r3, #10
 8007664:	e02b      	b.n	80076be <HAL_GPIO_Init+0x26a>
 8007666:	2308      	movs	r3, #8
 8007668:	e029      	b.n	80076be <HAL_GPIO_Init+0x26a>
 800766a:	2307      	movs	r3, #7
 800766c:	e027      	b.n	80076be <HAL_GPIO_Init+0x26a>
 800766e:	2306      	movs	r3, #6
 8007670:	e025      	b.n	80076be <HAL_GPIO_Init+0x26a>
 8007672:	2305      	movs	r3, #5
 8007674:	e023      	b.n	80076be <HAL_GPIO_Init+0x26a>
 8007676:	2304      	movs	r3, #4
 8007678:	e021      	b.n	80076be <HAL_GPIO_Init+0x26a>
 800767a:	2303      	movs	r3, #3
 800767c:	e01f      	b.n	80076be <HAL_GPIO_Init+0x26a>
 800767e:	2302      	movs	r3, #2
 8007680:	e01d      	b.n	80076be <HAL_GPIO_Init+0x26a>
 8007682:	2301      	movs	r3, #1
 8007684:	e01b      	b.n	80076be <HAL_GPIO_Init+0x26a>
 8007686:	bf00      	nop
 8007688:	58000080 	.word	0x58000080
 800768c:	58024400 	.word	0x58024400
 8007690:	58000400 	.word	0x58000400
 8007694:	58020000 	.word	0x58020000
 8007698:	58020400 	.word	0x58020400
 800769c:	58020800 	.word	0x58020800
 80076a0:	58020c00 	.word	0x58020c00
 80076a4:	58021000 	.word	0x58021000
 80076a8:	58021400 	.word	0x58021400
 80076ac:	58021800 	.word	0x58021800
 80076b0:	58021c00 	.word	0x58021c00
 80076b4:	58022000 	.word	0x58022000
 80076b8:	58022400 	.word	0x58022400
 80076bc:	2300      	movs	r3, #0
 80076be:	69fa      	ldr	r2, [r7, #28]
 80076c0:	f002 0203 	and.w	r2, r2, #3
 80076c4:	0092      	lsls	r2, r2, #2
 80076c6:	4093      	lsls	r3, r2
 80076c8:	69ba      	ldr	r2, [r7, #24]
 80076ca:	4313      	orrs	r3, r2
 80076cc:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80076ce:	4938      	ldr	r1, [pc, #224]	; (80077b0 <HAL_GPIO_Init+0x35c>)
 80076d0:	69fb      	ldr	r3, [r7, #28]
 80076d2:	089b      	lsrs	r3, r3, #2
 80076d4:	3302      	adds	r3, #2
 80076d6:	69ba      	ldr	r2, [r7, #24]
 80076d8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80076dc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80076e4:	693b      	ldr	r3, [r7, #16]
 80076e6:	43db      	mvns	r3, r3
 80076e8:	69ba      	ldr	r2, [r7, #24]
 80076ea:	4013      	ands	r3, r2
 80076ec:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80076ee:	683b      	ldr	r3, [r7, #0]
 80076f0:	685b      	ldr	r3, [r3, #4]
 80076f2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	d003      	beq.n	8007702 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80076fa:	69ba      	ldr	r2, [r7, #24]
 80076fc:	693b      	ldr	r3, [r7, #16]
 80076fe:	4313      	orrs	r3, r2
 8007700:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8007702:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007706:	69bb      	ldr	r3, [r7, #24]
 8007708:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800770a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800770e:	685b      	ldr	r3, [r3, #4]
 8007710:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007712:	693b      	ldr	r3, [r7, #16]
 8007714:	43db      	mvns	r3, r3
 8007716:	69ba      	ldr	r2, [r7, #24]
 8007718:	4013      	ands	r3, r2
 800771a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800771c:	683b      	ldr	r3, [r7, #0]
 800771e:	685b      	ldr	r3, [r3, #4]
 8007720:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007724:	2b00      	cmp	r3, #0
 8007726:	d003      	beq.n	8007730 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8007728:	69ba      	ldr	r2, [r7, #24]
 800772a:	693b      	ldr	r3, [r7, #16]
 800772c:	4313      	orrs	r3, r2
 800772e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8007730:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007734:	69bb      	ldr	r3, [r7, #24]
 8007736:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8007738:	697b      	ldr	r3, [r7, #20]
 800773a:	685b      	ldr	r3, [r3, #4]
 800773c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800773e:	693b      	ldr	r3, [r7, #16]
 8007740:	43db      	mvns	r3, r3
 8007742:	69ba      	ldr	r2, [r7, #24]
 8007744:	4013      	ands	r3, r2
 8007746:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8007748:	683b      	ldr	r3, [r7, #0]
 800774a:	685b      	ldr	r3, [r3, #4]
 800774c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007750:	2b00      	cmp	r3, #0
 8007752:	d003      	beq.n	800775c <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8007754:	69ba      	ldr	r2, [r7, #24]
 8007756:	693b      	ldr	r3, [r7, #16]
 8007758:	4313      	orrs	r3, r2
 800775a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800775c:	697b      	ldr	r3, [r7, #20]
 800775e:	69ba      	ldr	r2, [r7, #24]
 8007760:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8007762:	697b      	ldr	r3, [r7, #20]
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007768:	693b      	ldr	r3, [r7, #16]
 800776a:	43db      	mvns	r3, r3
 800776c:	69ba      	ldr	r2, [r7, #24]
 800776e:	4013      	ands	r3, r2
 8007770:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8007772:	683b      	ldr	r3, [r7, #0]
 8007774:	685b      	ldr	r3, [r3, #4]
 8007776:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800777a:	2b00      	cmp	r3, #0
 800777c:	d003      	beq.n	8007786 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800777e:	69ba      	ldr	r2, [r7, #24]
 8007780:	693b      	ldr	r3, [r7, #16]
 8007782:	4313      	orrs	r3, r2
 8007784:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8007786:	697b      	ldr	r3, [r7, #20]
 8007788:	69ba      	ldr	r2, [r7, #24]
 800778a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800778c:	69fb      	ldr	r3, [r7, #28]
 800778e:	3301      	adds	r3, #1
 8007790:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8007792:	683b      	ldr	r3, [r7, #0]
 8007794:	681a      	ldr	r2, [r3, #0]
 8007796:	69fb      	ldr	r3, [r7, #28]
 8007798:	fa22 f303 	lsr.w	r3, r2, r3
 800779c:	2b00      	cmp	r3, #0
 800779e:	f47f ae63 	bne.w	8007468 <HAL_GPIO_Init+0x14>
  }
}
 80077a2:	bf00      	nop
 80077a4:	bf00      	nop
 80077a6:	3724      	adds	r7, #36	; 0x24
 80077a8:	46bd      	mov	sp, r7
 80077aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ae:	4770      	bx	lr
 80077b0:	58000400 	.word	0x58000400

080077b4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80077b4:	b480      	push	{r7}
 80077b6:	b085      	sub	sp, #20
 80077b8:	af00      	add	r7, sp, #0
 80077ba:	6078      	str	r0, [r7, #4]
 80077bc:	460b      	mov	r3, r1
 80077be:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	691a      	ldr	r2, [r3, #16]
 80077c4:	887b      	ldrh	r3, [r7, #2]
 80077c6:	4013      	ands	r3, r2
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	d002      	beq.n	80077d2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80077cc:	2301      	movs	r3, #1
 80077ce:	73fb      	strb	r3, [r7, #15]
 80077d0:	e001      	b.n	80077d6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80077d2:	2300      	movs	r3, #0
 80077d4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80077d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80077d8:	4618      	mov	r0, r3
 80077da:	3714      	adds	r7, #20
 80077dc:	46bd      	mov	sp, r7
 80077de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077e2:	4770      	bx	lr

080077e4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80077e4:	b480      	push	{r7}
 80077e6:	b083      	sub	sp, #12
 80077e8:	af00      	add	r7, sp, #0
 80077ea:	6078      	str	r0, [r7, #4]
 80077ec:	460b      	mov	r3, r1
 80077ee:	807b      	strh	r3, [r7, #2]
 80077f0:	4613      	mov	r3, r2
 80077f2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80077f4:	787b      	ldrb	r3, [r7, #1]
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	d003      	beq.n	8007802 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80077fa:	887a      	ldrh	r2, [r7, #2]
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8007800:	e003      	b.n	800780a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8007802:	887b      	ldrh	r3, [r7, #2]
 8007804:	041a      	lsls	r2, r3, #16
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	619a      	str	r2, [r3, #24]
}
 800780a:	bf00      	nop
 800780c:	370c      	adds	r7, #12
 800780e:	46bd      	mov	sp, r7
 8007810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007814:	4770      	bx	lr

08007816 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8007816:	b580      	push	{r7, lr}
 8007818:	b082      	sub	sp, #8
 800781a:	af00      	add	r7, sp, #0
 800781c:	4603      	mov	r3, r0
 800781e:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 8007820:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007824:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8007828:	88fb      	ldrh	r3, [r7, #6]
 800782a:	4013      	ands	r3, r2
 800782c:	2b00      	cmp	r3, #0
 800782e:	d008      	beq.n	8007842 <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8007830:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007834:	88fb      	ldrh	r3, [r7, #6]
 8007836:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800783a:	88fb      	ldrh	r3, [r7, #6]
 800783c:	4618      	mov	r0, r3
 800783e:	f7fa ff41 	bl	80026c4 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 8007842:	bf00      	nop
 8007844:	3708      	adds	r7, #8
 8007846:	46bd      	mov	sp, r7
 8007848:	bd80      	pop	{r7, pc}
	...

0800784c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800784c:	b580      	push	{r7, lr}
 800784e:	b084      	sub	sp, #16
 8007850:	af00      	add	r7, sp, #0
 8007852:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8007854:	4b19      	ldr	r3, [pc, #100]	; (80078bc <HAL_PWREx_ConfigSupply+0x70>)
 8007856:	68db      	ldr	r3, [r3, #12]
 8007858:	f003 0304 	and.w	r3, r3, #4
 800785c:	2b04      	cmp	r3, #4
 800785e:	d00a      	beq.n	8007876 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8007860:	4b16      	ldr	r3, [pc, #88]	; (80078bc <HAL_PWREx_ConfigSupply+0x70>)
 8007862:	68db      	ldr	r3, [r3, #12]
 8007864:	f003 0307 	and.w	r3, r3, #7
 8007868:	687a      	ldr	r2, [r7, #4]
 800786a:	429a      	cmp	r2, r3
 800786c:	d001      	beq.n	8007872 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800786e:	2301      	movs	r3, #1
 8007870:	e01f      	b.n	80078b2 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8007872:	2300      	movs	r3, #0
 8007874:	e01d      	b.n	80078b2 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8007876:	4b11      	ldr	r3, [pc, #68]	; (80078bc <HAL_PWREx_ConfigSupply+0x70>)
 8007878:	68db      	ldr	r3, [r3, #12]
 800787a:	f023 0207 	bic.w	r2, r3, #7
 800787e:	490f      	ldr	r1, [pc, #60]	; (80078bc <HAL_PWREx_ConfigSupply+0x70>)
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	4313      	orrs	r3, r2
 8007884:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8007886:	f7fe ff03 	bl	8006690 <HAL_GetTick>
 800788a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800788c:	e009      	b.n	80078a2 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800788e:	f7fe feff 	bl	8006690 <HAL_GetTick>
 8007892:	4602      	mov	r2, r0
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	1ad3      	subs	r3, r2, r3
 8007898:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800789c:	d901      	bls.n	80078a2 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800789e:	2301      	movs	r3, #1
 80078a0:	e007      	b.n	80078b2 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80078a2:	4b06      	ldr	r3, [pc, #24]	; (80078bc <HAL_PWREx_ConfigSupply+0x70>)
 80078a4:	685b      	ldr	r3, [r3, #4]
 80078a6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80078aa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80078ae:	d1ee      	bne.n	800788e <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80078b0:	2300      	movs	r3, #0
}
 80078b2:	4618      	mov	r0, r3
 80078b4:	3710      	adds	r7, #16
 80078b6:	46bd      	mov	sp, r7
 80078b8:	bd80      	pop	{r7, pc}
 80078ba:	bf00      	nop
 80078bc:	58024800 	.word	0x58024800

080078c0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80078c0:	b580      	push	{r7, lr}
 80078c2:	b08c      	sub	sp, #48	; 0x30
 80078c4:	af00      	add	r7, sp, #0
 80078c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	d102      	bne.n	80078d4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80078ce:	2301      	movs	r3, #1
 80078d0:	f000 bc1d 	b.w	800810e <HAL_RCC_OscConfig+0x84e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	f003 0301 	and.w	r3, r3, #1
 80078dc:	2b00      	cmp	r3, #0
 80078de:	f000 8087 	beq.w	80079f0 <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80078e2:	4b99      	ldr	r3, [pc, #612]	; (8007b48 <HAL_RCC_OscConfig+0x288>)
 80078e4:	691b      	ldr	r3, [r3, #16]
 80078e6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80078ea:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80078ec:	4b96      	ldr	r3, [pc, #600]	; (8007b48 <HAL_RCC_OscConfig+0x288>)
 80078ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80078f0:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80078f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078f4:	2b10      	cmp	r3, #16
 80078f6:	d007      	beq.n	8007908 <HAL_RCC_OscConfig+0x48>
 80078f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078fa:	2b18      	cmp	r3, #24
 80078fc:	d110      	bne.n	8007920 <HAL_RCC_OscConfig+0x60>
 80078fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007900:	f003 0303 	and.w	r3, r3, #3
 8007904:	2b02      	cmp	r3, #2
 8007906:	d10b      	bne.n	8007920 <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007908:	4b8f      	ldr	r3, [pc, #572]	; (8007b48 <HAL_RCC_OscConfig+0x288>)
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007910:	2b00      	cmp	r3, #0
 8007912:	d06c      	beq.n	80079ee <HAL_RCC_OscConfig+0x12e>
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	685b      	ldr	r3, [r3, #4]
 8007918:	2b00      	cmp	r3, #0
 800791a:	d168      	bne.n	80079ee <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 800791c:	2301      	movs	r3, #1
 800791e:	e3f6      	b.n	800810e <HAL_RCC_OscConfig+0x84e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	685b      	ldr	r3, [r3, #4]
 8007924:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007928:	d106      	bne.n	8007938 <HAL_RCC_OscConfig+0x78>
 800792a:	4b87      	ldr	r3, [pc, #540]	; (8007b48 <HAL_RCC_OscConfig+0x288>)
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	4a86      	ldr	r2, [pc, #536]	; (8007b48 <HAL_RCC_OscConfig+0x288>)
 8007930:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007934:	6013      	str	r3, [r2, #0]
 8007936:	e02e      	b.n	8007996 <HAL_RCC_OscConfig+0xd6>
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	685b      	ldr	r3, [r3, #4]
 800793c:	2b00      	cmp	r3, #0
 800793e:	d10c      	bne.n	800795a <HAL_RCC_OscConfig+0x9a>
 8007940:	4b81      	ldr	r3, [pc, #516]	; (8007b48 <HAL_RCC_OscConfig+0x288>)
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	4a80      	ldr	r2, [pc, #512]	; (8007b48 <HAL_RCC_OscConfig+0x288>)
 8007946:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800794a:	6013      	str	r3, [r2, #0]
 800794c:	4b7e      	ldr	r3, [pc, #504]	; (8007b48 <HAL_RCC_OscConfig+0x288>)
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	4a7d      	ldr	r2, [pc, #500]	; (8007b48 <HAL_RCC_OscConfig+0x288>)
 8007952:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007956:	6013      	str	r3, [r2, #0]
 8007958:	e01d      	b.n	8007996 <HAL_RCC_OscConfig+0xd6>
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	685b      	ldr	r3, [r3, #4]
 800795e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007962:	d10c      	bne.n	800797e <HAL_RCC_OscConfig+0xbe>
 8007964:	4b78      	ldr	r3, [pc, #480]	; (8007b48 <HAL_RCC_OscConfig+0x288>)
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	4a77      	ldr	r2, [pc, #476]	; (8007b48 <HAL_RCC_OscConfig+0x288>)
 800796a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800796e:	6013      	str	r3, [r2, #0]
 8007970:	4b75      	ldr	r3, [pc, #468]	; (8007b48 <HAL_RCC_OscConfig+0x288>)
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	4a74      	ldr	r2, [pc, #464]	; (8007b48 <HAL_RCC_OscConfig+0x288>)
 8007976:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800797a:	6013      	str	r3, [r2, #0]
 800797c:	e00b      	b.n	8007996 <HAL_RCC_OscConfig+0xd6>
 800797e:	4b72      	ldr	r3, [pc, #456]	; (8007b48 <HAL_RCC_OscConfig+0x288>)
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	4a71      	ldr	r2, [pc, #452]	; (8007b48 <HAL_RCC_OscConfig+0x288>)
 8007984:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007988:	6013      	str	r3, [r2, #0]
 800798a:	4b6f      	ldr	r3, [pc, #444]	; (8007b48 <HAL_RCC_OscConfig+0x288>)
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	4a6e      	ldr	r2, [pc, #440]	; (8007b48 <HAL_RCC_OscConfig+0x288>)
 8007990:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007994:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	685b      	ldr	r3, [r3, #4]
 800799a:	2b00      	cmp	r3, #0
 800799c:	d013      	beq.n	80079c6 <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800799e:	f7fe fe77 	bl	8006690 <HAL_GetTick>
 80079a2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80079a4:	e008      	b.n	80079b8 <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80079a6:	f7fe fe73 	bl	8006690 <HAL_GetTick>
 80079aa:	4602      	mov	r2, r0
 80079ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079ae:	1ad3      	subs	r3, r2, r3
 80079b0:	2b64      	cmp	r3, #100	; 0x64
 80079b2:	d901      	bls.n	80079b8 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 80079b4:	2303      	movs	r3, #3
 80079b6:	e3aa      	b.n	800810e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80079b8:	4b63      	ldr	r3, [pc, #396]	; (8007b48 <HAL_RCC_OscConfig+0x288>)
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80079c0:	2b00      	cmp	r3, #0
 80079c2:	d0f0      	beq.n	80079a6 <HAL_RCC_OscConfig+0xe6>
 80079c4:	e014      	b.n	80079f0 <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80079c6:	f7fe fe63 	bl	8006690 <HAL_GetTick>
 80079ca:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80079cc:	e008      	b.n	80079e0 <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80079ce:	f7fe fe5f 	bl	8006690 <HAL_GetTick>
 80079d2:	4602      	mov	r2, r0
 80079d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079d6:	1ad3      	subs	r3, r2, r3
 80079d8:	2b64      	cmp	r3, #100	; 0x64
 80079da:	d901      	bls.n	80079e0 <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 80079dc:	2303      	movs	r3, #3
 80079de:	e396      	b.n	800810e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80079e0:	4b59      	ldr	r3, [pc, #356]	; (8007b48 <HAL_RCC_OscConfig+0x288>)
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80079e8:	2b00      	cmp	r3, #0
 80079ea:	d1f0      	bne.n	80079ce <HAL_RCC_OscConfig+0x10e>
 80079ec:	e000      	b.n	80079f0 <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80079ee:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	f003 0302 	and.w	r3, r3, #2
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	f000 80cb 	beq.w	8007b94 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80079fe:	4b52      	ldr	r3, [pc, #328]	; (8007b48 <HAL_RCC_OscConfig+0x288>)
 8007a00:	691b      	ldr	r3, [r3, #16]
 8007a02:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007a06:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007a08:	4b4f      	ldr	r3, [pc, #316]	; (8007b48 <HAL_RCC_OscConfig+0x288>)
 8007a0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a0c:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8007a0e:	6a3b      	ldr	r3, [r7, #32]
 8007a10:	2b00      	cmp	r3, #0
 8007a12:	d007      	beq.n	8007a24 <HAL_RCC_OscConfig+0x164>
 8007a14:	6a3b      	ldr	r3, [r7, #32]
 8007a16:	2b18      	cmp	r3, #24
 8007a18:	d156      	bne.n	8007ac8 <HAL_RCC_OscConfig+0x208>
 8007a1a:	69fb      	ldr	r3, [r7, #28]
 8007a1c:	f003 0303 	and.w	r3, r3, #3
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	d151      	bne.n	8007ac8 <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007a24:	4b48      	ldr	r3, [pc, #288]	; (8007b48 <HAL_RCC_OscConfig+0x288>)
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	f003 0304 	and.w	r3, r3, #4
 8007a2c:	2b00      	cmp	r3, #0
 8007a2e:	d005      	beq.n	8007a3c <HAL_RCC_OscConfig+0x17c>
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	68db      	ldr	r3, [r3, #12]
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	d101      	bne.n	8007a3c <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 8007a38:	2301      	movs	r3, #1
 8007a3a:	e368      	b.n	800810e <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8007a3c:	4b42      	ldr	r3, [pc, #264]	; (8007b48 <HAL_RCC_OscConfig+0x288>)
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	f023 0219 	bic.w	r2, r3, #25
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	68db      	ldr	r3, [r3, #12]
 8007a48:	493f      	ldr	r1, [pc, #252]	; (8007b48 <HAL_RCC_OscConfig+0x288>)
 8007a4a:	4313      	orrs	r3, r2
 8007a4c:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8007a4e:	f7fe fe1f 	bl	8006690 <HAL_GetTick>
 8007a52:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007a54:	e008      	b.n	8007a68 <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007a56:	f7fe fe1b 	bl	8006690 <HAL_GetTick>
 8007a5a:	4602      	mov	r2, r0
 8007a5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a5e:	1ad3      	subs	r3, r2, r3
 8007a60:	2b02      	cmp	r3, #2
 8007a62:	d901      	bls.n	8007a68 <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 8007a64:	2303      	movs	r3, #3
 8007a66:	e352      	b.n	800810e <HAL_RCC_OscConfig+0x84e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007a68:	4b37      	ldr	r3, [pc, #220]	; (8007b48 <HAL_RCC_OscConfig+0x288>)
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	f003 0304 	and.w	r3, r3, #4
 8007a70:	2b00      	cmp	r3, #0
 8007a72:	d0f0      	beq.n	8007a56 <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007a74:	f7fe fe3c 	bl	80066f0 <HAL_GetREVID>
 8007a78:	4603      	mov	r3, r0
 8007a7a:	f241 0203 	movw	r2, #4099	; 0x1003
 8007a7e:	4293      	cmp	r3, r2
 8007a80:	d817      	bhi.n	8007ab2 <HAL_RCC_OscConfig+0x1f2>
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	691b      	ldr	r3, [r3, #16]
 8007a86:	2b40      	cmp	r3, #64	; 0x40
 8007a88:	d108      	bne.n	8007a9c <HAL_RCC_OscConfig+0x1dc>
 8007a8a:	4b2f      	ldr	r3, [pc, #188]	; (8007b48 <HAL_RCC_OscConfig+0x288>)
 8007a8c:	685b      	ldr	r3, [r3, #4]
 8007a8e:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8007a92:	4a2d      	ldr	r2, [pc, #180]	; (8007b48 <HAL_RCC_OscConfig+0x288>)
 8007a94:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007a98:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007a9a:	e07b      	b.n	8007b94 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007a9c:	4b2a      	ldr	r3, [pc, #168]	; (8007b48 <HAL_RCC_OscConfig+0x288>)
 8007a9e:	685b      	ldr	r3, [r3, #4]
 8007aa0:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	691b      	ldr	r3, [r3, #16]
 8007aa8:	031b      	lsls	r3, r3, #12
 8007aaa:	4927      	ldr	r1, [pc, #156]	; (8007b48 <HAL_RCC_OscConfig+0x288>)
 8007aac:	4313      	orrs	r3, r2
 8007aae:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007ab0:	e070      	b.n	8007b94 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007ab2:	4b25      	ldr	r3, [pc, #148]	; (8007b48 <HAL_RCC_OscConfig+0x288>)
 8007ab4:	685b      	ldr	r3, [r3, #4]
 8007ab6:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	691b      	ldr	r3, [r3, #16]
 8007abe:	061b      	lsls	r3, r3, #24
 8007ac0:	4921      	ldr	r1, [pc, #132]	; (8007b48 <HAL_RCC_OscConfig+0x288>)
 8007ac2:	4313      	orrs	r3, r2
 8007ac4:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007ac6:	e065      	b.n	8007b94 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	68db      	ldr	r3, [r3, #12]
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	d048      	beq.n	8007b62 <HAL_RCC_OscConfig+0x2a2>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8007ad0:	4b1d      	ldr	r3, [pc, #116]	; (8007b48 <HAL_RCC_OscConfig+0x288>)
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	f023 0219 	bic.w	r2, r3, #25
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	68db      	ldr	r3, [r3, #12]
 8007adc:	491a      	ldr	r1, [pc, #104]	; (8007b48 <HAL_RCC_OscConfig+0x288>)
 8007ade:	4313      	orrs	r3, r2
 8007ae0:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007ae2:	f7fe fdd5 	bl	8006690 <HAL_GetTick>
 8007ae6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007ae8:	e008      	b.n	8007afc <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007aea:	f7fe fdd1 	bl	8006690 <HAL_GetTick>
 8007aee:	4602      	mov	r2, r0
 8007af0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007af2:	1ad3      	subs	r3, r2, r3
 8007af4:	2b02      	cmp	r3, #2
 8007af6:	d901      	bls.n	8007afc <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 8007af8:	2303      	movs	r3, #3
 8007afa:	e308      	b.n	800810e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007afc:	4b12      	ldr	r3, [pc, #72]	; (8007b48 <HAL_RCC_OscConfig+0x288>)
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	f003 0304 	and.w	r3, r3, #4
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	d0f0      	beq.n	8007aea <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007b08:	f7fe fdf2 	bl	80066f0 <HAL_GetREVID>
 8007b0c:	4603      	mov	r3, r0
 8007b0e:	f241 0203 	movw	r2, #4099	; 0x1003
 8007b12:	4293      	cmp	r3, r2
 8007b14:	d81a      	bhi.n	8007b4c <HAL_RCC_OscConfig+0x28c>
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	691b      	ldr	r3, [r3, #16]
 8007b1a:	2b40      	cmp	r3, #64	; 0x40
 8007b1c:	d108      	bne.n	8007b30 <HAL_RCC_OscConfig+0x270>
 8007b1e:	4b0a      	ldr	r3, [pc, #40]	; (8007b48 <HAL_RCC_OscConfig+0x288>)
 8007b20:	685b      	ldr	r3, [r3, #4]
 8007b22:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8007b26:	4a08      	ldr	r2, [pc, #32]	; (8007b48 <HAL_RCC_OscConfig+0x288>)
 8007b28:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007b2c:	6053      	str	r3, [r2, #4]
 8007b2e:	e031      	b.n	8007b94 <HAL_RCC_OscConfig+0x2d4>
 8007b30:	4b05      	ldr	r3, [pc, #20]	; (8007b48 <HAL_RCC_OscConfig+0x288>)
 8007b32:	685b      	ldr	r3, [r3, #4]
 8007b34:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	691b      	ldr	r3, [r3, #16]
 8007b3c:	031b      	lsls	r3, r3, #12
 8007b3e:	4902      	ldr	r1, [pc, #8]	; (8007b48 <HAL_RCC_OscConfig+0x288>)
 8007b40:	4313      	orrs	r3, r2
 8007b42:	604b      	str	r3, [r1, #4]
 8007b44:	e026      	b.n	8007b94 <HAL_RCC_OscConfig+0x2d4>
 8007b46:	bf00      	nop
 8007b48:	58024400 	.word	0x58024400
 8007b4c:	4b9a      	ldr	r3, [pc, #616]	; (8007db8 <HAL_RCC_OscConfig+0x4f8>)
 8007b4e:	685b      	ldr	r3, [r3, #4]
 8007b50:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	691b      	ldr	r3, [r3, #16]
 8007b58:	061b      	lsls	r3, r3, #24
 8007b5a:	4997      	ldr	r1, [pc, #604]	; (8007db8 <HAL_RCC_OscConfig+0x4f8>)
 8007b5c:	4313      	orrs	r3, r2
 8007b5e:	604b      	str	r3, [r1, #4]
 8007b60:	e018      	b.n	8007b94 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007b62:	4b95      	ldr	r3, [pc, #596]	; (8007db8 <HAL_RCC_OscConfig+0x4f8>)
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	4a94      	ldr	r2, [pc, #592]	; (8007db8 <HAL_RCC_OscConfig+0x4f8>)
 8007b68:	f023 0301 	bic.w	r3, r3, #1
 8007b6c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007b6e:	f7fe fd8f 	bl	8006690 <HAL_GetTick>
 8007b72:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8007b74:	e008      	b.n	8007b88 <HAL_RCC_OscConfig+0x2c8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007b76:	f7fe fd8b 	bl	8006690 <HAL_GetTick>
 8007b7a:	4602      	mov	r2, r0
 8007b7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b7e:	1ad3      	subs	r3, r2, r3
 8007b80:	2b02      	cmp	r3, #2
 8007b82:	d901      	bls.n	8007b88 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8007b84:	2303      	movs	r3, #3
 8007b86:	e2c2      	b.n	800810e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8007b88:	4b8b      	ldr	r3, [pc, #556]	; (8007db8 <HAL_RCC_OscConfig+0x4f8>)
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	f003 0304 	and.w	r3, r3, #4
 8007b90:	2b00      	cmp	r3, #0
 8007b92:	d1f0      	bne.n	8007b76 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	f003 0310 	and.w	r3, r3, #16
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	f000 80a9 	beq.w	8007cf4 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007ba2:	4b85      	ldr	r3, [pc, #532]	; (8007db8 <HAL_RCC_OscConfig+0x4f8>)
 8007ba4:	691b      	ldr	r3, [r3, #16]
 8007ba6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007baa:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007bac:	4b82      	ldr	r3, [pc, #520]	; (8007db8 <HAL_RCC_OscConfig+0x4f8>)
 8007bae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007bb0:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8007bb2:	69bb      	ldr	r3, [r7, #24]
 8007bb4:	2b08      	cmp	r3, #8
 8007bb6:	d007      	beq.n	8007bc8 <HAL_RCC_OscConfig+0x308>
 8007bb8:	69bb      	ldr	r3, [r7, #24]
 8007bba:	2b18      	cmp	r3, #24
 8007bbc:	d13a      	bne.n	8007c34 <HAL_RCC_OscConfig+0x374>
 8007bbe:	697b      	ldr	r3, [r7, #20]
 8007bc0:	f003 0303 	and.w	r3, r3, #3
 8007bc4:	2b01      	cmp	r3, #1
 8007bc6:	d135      	bne.n	8007c34 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007bc8:	4b7b      	ldr	r3, [pc, #492]	; (8007db8 <HAL_RCC_OscConfig+0x4f8>)
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	d005      	beq.n	8007be0 <HAL_RCC_OscConfig+0x320>
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	69db      	ldr	r3, [r3, #28]
 8007bd8:	2b80      	cmp	r3, #128	; 0x80
 8007bda:	d001      	beq.n	8007be0 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8007bdc:	2301      	movs	r3, #1
 8007bde:	e296      	b.n	800810e <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007be0:	f7fe fd86 	bl	80066f0 <HAL_GetREVID>
 8007be4:	4603      	mov	r3, r0
 8007be6:	f241 0203 	movw	r2, #4099	; 0x1003
 8007bea:	4293      	cmp	r3, r2
 8007bec:	d817      	bhi.n	8007c1e <HAL_RCC_OscConfig+0x35e>
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	6a1b      	ldr	r3, [r3, #32]
 8007bf2:	2b20      	cmp	r3, #32
 8007bf4:	d108      	bne.n	8007c08 <HAL_RCC_OscConfig+0x348>
 8007bf6:	4b70      	ldr	r3, [pc, #448]	; (8007db8 <HAL_RCC_OscConfig+0x4f8>)
 8007bf8:	685b      	ldr	r3, [r3, #4]
 8007bfa:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8007bfe:	4a6e      	ldr	r2, [pc, #440]	; (8007db8 <HAL_RCC_OscConfig+0x4f8>)
 8007c00:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007c04:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007c06:	e075      	b.n	8007cf4 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007c08:	4b6b      	ldr	r3, [pc, #428]	; (8007db8 <HAL_RCC_OscConfig+0x4f8>)
 8007c0a:	685b      	ldr	r3, [r3, #4]
 8007c0c:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	6a1b      	ldr	r3, [r3, #32]
 8007c14:	069b      	lsls	r3, r3, #26
 8007c16:	4968      	ldr	r1, [pc, #416]	; (8007db8 <HAL_RCC_OscConfig+0x4f8>)
 8007c18:	4313      	orrs	r3, r2
 8007c1a:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007c1c:	e06a      	b.n	8007cf4 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007c1e:	4b66      	ldr	r3, [pc, #408]	; (8007db8 <HAL_RCC_OscConfig+0x4f8>)
 8007c20:	68db      	ldr	r3, [r3, #12]
 8007c22:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	6a1b      	ldr	r3, [r3, #32]
 8007c2a:	061b      	lsls	r3, r3, #24
 8007c2c:	4962      	ldr	r1, [pc, #392]	; (8007db8 <HAL_RCC_OscConfig+0x4f8>)
 8007c2e:	4313      	orrs	r3, r2
 8007c30:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007c32:	e05f      	b.n	8007cf4 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	69db      	ldr	r3, [r3, #28]
 8007c38:	2b00      	cmp	r3, #0
 8007c3a:	d042      	beq.n	8007cc2 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8007c3c:	4b5e      	ldr	r3, [pc, #376]	; (8007db8 <HAL_RCC_OscConfig+0x4f8>)
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	4a5d      	ldr	r2, [pc, #372]	; (8007db8 <HAL_RCC_OscConfig+0x4f8>)
 8007c42:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007c46:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007c48:	f7fe fd22 	bl	8006690 <HAL_GetTick>
 8007c4c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007c4e:	e008      	b.n	8007c62 <HAL_RCC_OscConfig+0x3a2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8007c50:	f7fe fd1e 	bl	8006690 <HAL_GetTick>
 8007c54:	4602      	mov	r2, r0
 8007c56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c58:	1ad3      	subs	r3, r2, r3
 8007c5a:	2b02      	cmp	r3, #2
 8007c5c:	d901      	bls.n	8007c62 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8007c5e:	2303      	movs	r3, #3
 8007c60:	e255      	b.n	800810e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007c62:	4b55      	ldr	r3, [pc, #340]	; (8007db8 <HAL_RCC_OscConfig+0x4f8>)
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007c6a:	2b00      	cmp	r3, #0
 8007c6c:	d0f0      	beq.n	8007c50 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007c6e:	f7fe fd3f 	bl	80066f0 <HAL_GetREVID>
 8007c72:	4603      	mov	r3, r0
 8007c74:	f241 0203 	movw	r2, #4099	; 0x1003
 8007c78:	4293      	cmp	r3, r2
 8007c7a:	d817      	bhi.n	8007cac <HAL_RCC_OscConfig+0x3ec>
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	6a1b      	ldr	r3, [r3, #32]
 8007c80:	2b20      	cmp	r3, #32
 8007c82:	d108      	bne.n	8007c96 <HAL_RCC_OscConfig+0x3d6>
 8007c84:	4b4c      	ldr	r3, [pc, #304]	; (8007db8 <HAL_RCC_OscConfig+0x4f8>)
 8007c86:	685b      	ldr	r3, [r3, #4]
 8007c88:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8007c8c:	4a4a      	ldr	r2, [pc, #296]	; (8007db8 <HAL_RCC_OscConfig+0x4f8>)
 8007c8e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007c92:	6053      	str	r3, [r2, #4]
 8007c94:	e02e      	b.n	8007cf4 <HAL_RCC_OscConfig+0x434>
 8007c96:	4b48      	ldr	r3, [pc, #288]	; (8007db8 <HAL_RCC_OscConfig+0x4f8>)
 8007c98:	685b      	ldr	r3, [r3, #4]
 8007c9a:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	6a1b      	ldr	r3, [r3, #32]
 8007ca2:	069b      	lsls	r3, r3, #26
 8007ca4:	4944      	ldr	r1, [pc, #272]	; (8007db8 <HAL_RCC_OscConfig+0x4f8>)
 8007ca6:	4313      	orrs	r3, r2
 8007ca8:	604b      	str	r3, [r1, #4]
 8007caa:	e023      	b.n	8007cf4 <HAL_RCC_OscConfig+0x434>
 8007cac:	4b42      	ldr	r3, [pc, #264]	; (8007db8 <HAL_RCC_OscConfig+0x4f8>)
 8007cae:	68db      	ldr	r3, [r3, #12]
 8007cb0:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	6a1b      	ldr	r3, [r3, #32]
 8007cb8:	061b      	lsls	r3, r3, #24
 8007cba:	493f      	ldr	r1, [pc, #252]	; (8007db8 <HAL_RCC_OscConfig+0x4f8>)
 8007cbc:	4313      	orrs	r3, r2
 8007cbe:	60cb      	str	r3, [r1, #12]
 8007cc0:	e018      	b.n	8007cf4 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8007cc2:	4b3d      	ldr	r3, [pc, #244]	; (8007db8 <HAL_RCC_OscConfig+0x4f8>)
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	4a3c      	ldr	r2, [pc, #240]	; (8007db8 <HAL_RCC_OscConfig+0x4f8>)
 8007cc8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007ccc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007cce:	f7fe fcdf 	bl	8006690 <HAL_GetTick>
 8007cd2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8007cd4:	e008      	b.n	8007ce8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8007cd6:	f7fe fcdb 	bl	8006690 <HAL_GetTick>
 8007cda:	4602      	mov	r2, r0
 8007cdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cde:	1ad3      	subs	r3, r2, r3
 8007ce0:	2b02      	cmp	r3, #2
 8007ce2:	d901      	bls.n	8007ce8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8007ce4:	2303      	movs	r3, #3
 8007ce6:	e212      	b.n	800810e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8007ce8:	4b33      	ldr	r3, [pc, #204]	; (8007db8 <HAL_RCC_OscConfig+0x4f8>)
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007cf0:	2b00      	cmp	r3, #0
 8007cf2:	d1f0      	bne.n	8007cd6 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	f003 0308 	and.w	r3, r3, #8
 8007cfc:	2b00      	cmp	r3, #0
 8007cfe:	d036      	beq.n	8007d6e <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	695b      	ldr	r3, [r3, #20]
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	d019      	beq.n	8007d3c <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007d08:	4b2b      	ldr	r3, [pc, #172]	; (8007db8 <HAL_RCC_OscConfig+0x4f8>)
 8007d0a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007d0c:	4a2a      	ldr	r2, [pc, #168]	; (8007db8 <HAL_RCC_OscConfig+0x4f8>)
 8007d0e:	f043 0301 	orr.w	r3, r3, #1
 8007d12:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007d14:	f7fe fcbc 	bl	8006690 <HAL_GetTick>
 8007d18:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8007d1a:	e008      	b.n	8007d2e <HAL_RCC_OscConfig+0x46e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007d1c:	f7fe fcb8 	bl	8006690 <HAL_GetTick>
 8007d20:	4602      	mov	r2, r0
 8007d22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d24:	1ad3      	subs	r3, r2, r3
 8007d26:	2b02      	cmp	r3, #2
 8007d28:	d901      	bls.n	8007d2e <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8007d2a:	2303      	movs	r3, #3
 8007d2c:	e1ef      	b.n	800810e <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8007d2e:	4b22      	ldr	r3, [pc, #136]	; (8007db8 <HAL_RCC_OscConfig+0x4f8>)
 8007d30:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007d32:	f003 0302 	and.w	r3, r3, #2
 8007d36:	2b00      	cmp	r3, #0
 8007d38:	d0f0      	beq.n	8007d1c <HAL_RCC_OscConfig+0x45c>
 8007d3a:	e018      	b.n	8007d6e <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007d3c:	4b1e      	ldr	r3, [pc, #120]	; (8007db8 <HAL_RCC_OscConfig+0x4f8>)
 8007d3e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007d40:	4a1d      	ldr	r2, [pc, #116]	; (8007db8 <HAL_RCC_OscConfig+0x4f8>)
 8007d42:	f023 0301 	bic.w	r3, r3, #1
 8007d46:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007d48:	f7fe fca2 	bl	8006690 <HAL_GetTick>
 8007d4c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8007d4e:	e008      	b.n	8007d62 <HAL_RCC_OscConfig+0x4a2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007d50:	f7fe fc9e 	bl	8006690 <HAL_GetTick>
 8007d54:	4602      	mov	r2, r0
 8007d56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d58:	1ad3      	subs	r3, r2, r3
 8007d5a:	2b02      	cmp	r3, #2
 8007d5c:	d901      	bls.n	8007d62 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8007d5e:	2303      	movs	r3, #3
 8007d60:	e1d5      	b.n	800810e <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8007d62:	4b15      	ldr	r3, [pc, #84]	; (8007db8 <HAL_RCC_OscConfig+0x4f8>)
 8007d64:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007d66:	f003 0302 	and.w	r3, r3, #2
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	d1f0      	bne.n	8007d50 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	f003 0320 	and.w	r3, r3, #32
 8007d76:	2b00      	cmp	r3, #0
 8007d78:	d039      	beq.n	8007dee <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	699b      	ldr	r3, [r3, #24]
 8007d7e:	2b00      	cmp	r3, #0
 8007d80:	d01c      	beq.n	8007dbc <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8007d82:	4b0d      	ldr	r3, [pc, #52]	; (8007db8 <HAL_RCC_OscConfig+0x4f8>)
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	4a0c      	ldr	r2, [pc, #48]	; (8007db8 <HAL_RCC_OscConfig+0x4f8>)
 8007d88:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8007d8c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8007d8e:	f7fe fc7f 	bl	8006690 <HAL_GetTick>
 8007d92:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8007d94:	e008      	b.n	8007da8 <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8007d96:	f7fe fc7b 	bl	8006690 <HAL_GetTick>
 8007d9a:	4602      	mov	r2, r0
 8007d9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d9e:	1ad3      	subs	r3, r2, r3
 8007da0:	2b02      	cmp	r3, #2
 8007da2:	d901      	bls.n	8007da8 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8007da4:	2303      	movs	r3, #3
 8007da6:	e1b2      	b.n	800810e <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8007da8:	4b03      	ldr	r3, [pc, #12]	; (8007db8 <HAL_RCC_OscConfig+0x4f8>)
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	d0f0      	beq.n	8007d96 <HAL_RCC_OscConfig+0x4d6>
 8007db4:	e01b      	b.n	8007dee <HAL_RCC_OscConfig+0x52e>
 8007db6:	bf00      	nop
 8007db8:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8007dbc:	4b9b      	ldr	r3, [pc, #620]	; (800802c <HAL_RCC_OscConfig+0x76c>)
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	4a9a      	ldr	r2, [pc, #616]	; (800802c <HAL_RCC_OscConfig+0x76c>)
 8007dc2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007dc6:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8007dc8:	f7fe fc62 	bl	8006690 <HAL_GetTick>
 8007dcc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8007dce:	e008      	b.n	8007de2 <HAL_RCC_OscConfig+0x522>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8007dd0:	f7fe fc5e 	bl	8006690 <HAL_GetTick>
 8007dd4:	4602      	mov	r2, r0
 8007dd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dd8:	1ad3      	subs	r3, r2, r3
 8007dda:	2b02      	cmp	r3, #2
 8007ddc:	d901      	bls.n	8007de2 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8007dde:	2303      	movs	r3, #3
 8007de0:	e195      	b.n	800810e <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8007de2:	4b92      	ldr	r3, [pc, #584]	; (800802c <HAL_RCC_OscConfig+0x76c>)
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007dea:	2b00      	cmp	r3, #0
 8007dec:	d1f0      	bne.n	8007dd0 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	f003 0304 	and.w	r3, r3, #4
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	f000 8081 	beq.w	8007efe <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8007dfc:	4b8c      	ldr	r3, [pc, #560]	; (8008030 <HAL_RCC_OscConfig+0x770>)
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	4a8b      	ldr	r2, [pc, #556]	; (8008030 <HAL_RCC_OscConfig+0x770>)
 8007e02:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007e06:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007e08:	f7fe fc42 	bl	8006690 <HAL_GetTick>
 8007e0c:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007e0e:	e008      	b.n	8007e22 <HAL_RCC_OscConfig+0x562>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8007e10:	f7fe fc3e 	bl	8006690 <HAL_GetTick>
 8007e14:	4602      	mov	r2, r0
 8007e16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e18:	1ad3      	subs	r3, r2, r3
 8007e1a:	2b64      	cmp	r3, #100	; 0x64
 8007e1c:	d901      	bls.n	8007e22 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8007e1e:	2303      	movs	r3, #3
 8007e20:	e175      	b.n	800810e <HAL_RCC_OscConfig+0x84e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007e22:	4b83      	ldr	r3, [pc, #524]	; (8008030 <HAL_RCC_OscConfig+0x770>)
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	d0f0      	beq.n	8007e10 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	689b      	ldr	r3, [r3, #8]
 8007e32:	2b01      	cmp	r3, #1
 8007e34:	d106      	bne.n	8007e44 <HAL_RCC_OscConfig+0x584>
 8007e36:	4b7d      	ldr	r3, [pc, #500]	; (800802c <HAL_RCC_OscConfig+0x76c>)
 8007e38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007e3a:	4a7c      	ldr	r2, [pc, #496]	; (800802c <HAL_RCC_OscConfig+0x76c>)
 8007e3c:	f043 0301 	orr.w	r3, r3, #1
 8007e40:	6713      	str	r3, [r2, #112]	; 0x70
 8007e42:	e02d      	b.n	8007ea0 <HAL_RCC_OscConfig+0x5e0>
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	689b      	ldr	r3, [r3, #8]
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	d10c      	bne.n	8007e66 <HAL_RCC_OscConfig+0x5a6>
 8007e4c:	4b77      	ldr	r3, [pc, #476]	; (800802c <HAL_RCC_OscConfig+0x76c>)
 8007e4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007e50:	4a76      	ldr	r2, [pc, #472]	; (800802c <HAL_RCC_OscConfig+0x76c>)
 8007e52:	f023 0301 	bic.w	r3, r3, #1
 8007e56:	6713      	str	r3, [r2, #112]	; 0x70
 8007e58:	4b74      	ldr	r3, [pc, #464]	; (800802c <HAL_RCC_OscConfig+0x76c>)
 8007e5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007e5c:	4a73      	ldr	r2, [pc, #460]	; (800802c <HAL_RCC_OscConfig+0x76c>)
 8007e5e:	f023 0304 	bic.w	r3, r3, #4
 8007e62:	6713      	str	r3, [r2, #112]	; 0x70
 8007e64:	e01c      	b.n	8007ea0 <HAL_RCC_OscConfig+0x5e0>
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	689b      	ldr	r3, [r3, #8]
 8007e6a:	2b05      	cmp	r3, #5
 8007e6c:	d10c      	bne.n	8007e88 <HAL_RCC_OscConfig+0x5c8>
 8007e6e:	4b6f      	ldr	r3, [pc, #444]	; (800802c <HAL_RCC_OscConfig+0x76c>)
 8007e70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007e72:	4a6e      	ldr	r2, [pc, #440]	; (800802c <HAL_RCC_OscConfig+0x76c>)
 8007e74:	f043 0304 	orr.w	r3, r3, #4
 8007e78:	6713      	str	r3, [r2, #112]	; 0x70
 8007e7a:	4b6c      	ldr	r3, [pc, #432]	; (800802c <HAL_RCC_OscConfig+0x76c>)
 8007e7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007e7e:	4a6b      	ldr	r2, [pc, #428]	; (800802c <HAL_RCC_OscConfig+0x76c>)
 8007e80:	f043 0301 	orr.w	r3, r3, #1
 8007e84:	6713      	str	r3, [r2, #112]	; 0x70
 8007e86:	e00b      	b.n	8007ea0 <HAL_RCC_OscConfig+0x5e0>
 8007e88:	4b68      	ldr	r3, [pc, #416]	; (800802c <HAL_RCC_OscConfig+0x76c>)
 8007e8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007e8c:	4a67      	ldr	r2, [pc, #412]	; (800802c <HAL_RCC_OscConfig+0x76c>)
 8007e8e:	f023 0301 	bic.w	r3, r3, #1
 8007e92:	6713      	str	r3, [r2, #112]	; 0x70
 8007e94:	4b65      	ldr	r3, [pc, #404]	; (800802c <HAL_RCC_OscConfig+0x76c>)
 8007e96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007e98:	4a64      	ldr	r2, [pc, #400]	; (800802c <HAL_RCC_OscConfig+0x76c>)
 8007e9a:	f023 0304 	bic.w	r3, r3, #4
 8007e9e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	689b      	ldr	r3, [r3, #8]
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	d015      	beq.n	8007ed4 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007ea8:	f7fe fbf2 	bl	8006690 <HAL_GetTick>
 8007eac:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007eae:	e00a      	b.n	8007ec6 <HAL_RCC_OscConfig+0x606>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007eb0:	f7fe fbee 	bl	8006690 <HAL_GetTick>
 8007eb4:	4602      	mov	r2, r0
 8007eb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007eb8:	1ad3      	subs	r3, r2, r3
 8007eba:	f241 3288 	movw	r2, #5000	; 0x1388
 8007ebe:	4293      	cmp	r3, r2
 8007ec0:	d901      	bls.n	8007ec6 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8007ec2:	2303      	movs	r3, #3
 8007ec4:	e123      	b.n	800810e <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007ec6:	4b59      	ldr	r3, [pc, #356]	; (800802c <HAL_RCC_OscConfig+0x76c>)
 8007ec8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007eca:	f003 0302 	and.w	r3, r3, #2
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	d0ee      	beq.n	8007eb0 <HAL_RCC_OscConfig+0x5f0>
 8007ed2:	e014      	b.n	8007efe <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007ed4:	f7fe fbdc 	bl	8006690 <HAL_GetTick>
 8007ed8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8007eda:	e00a      	b.n	8007ef2 <HAL_RCC_OscConfig+0x632>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007edc:	f7fe fbd8 	bl	8006690 <HAL_GetTick>
 8007ee0:	4602      	mov	r2, r0
 8007ee2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ee4:	1ad3      	subs	r3, r2, r3
 8007ee6:	f241 3288 	movw	r2, #5000	; 0x1388
 8007eea:	4293      	cmp	r3, r2
 8007eec:	d901      	bls.n	8007ef2 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8007eee:	2303      	movs	r3, #3
 8007ef0:	e10d      	b.n	800810e <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8007ef2:	4b4e      	ldr	r3, [pc, #312]	; (800802c <HAL_RCC_OscConfig+0x76c>)
 8007ef4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007ef6:	f003 0302 	and.w	r3, r3, #2
 8007efa:	2b00      	cmp	r3, #0
 8007efc:	d1ee      	bne.n	8007edc <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	f000 8102 	beq.w	800810c <HAL_RCC_OscConfig+0x84c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8007f08:	4b48      	ldr	r3, [pc, #288]	; (800802c <HAL_RCC_OscConfig+0x76c>)
 8007f0a:	691b      	ldr	r3, [r3, #16]
 8007f0c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007f10:	2b18      	cmp	r3, #24
 8007f12:	f000 80bd 	beq.w	8008090 <HAL_RCC_OscConfig+0x7d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f1a:	2b02      	cmp	r3, #2
 8007f1c:	f040 809e 	bne.w	800805c <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007f20:	4b42      	ldr	r3, [pc, #264]	; (800802c <HAL_RCC_OscConfig+0x76c>)
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	4a41      	ldr	r2, [pc, #260]	; (800802c <HAL_RCC_OscConfig+0x76c>)
 8007f26:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007f2a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007f2c:	f7fe fbb0 	bl	8006690 <HAL_GetTick>
 8007f30:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007f32:	e008      	b.n	8007f46 <HAL_RCC_OscConfig+0x686>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007f34:	f7fe fbac 	bl	8006690 <HAL_GetTick>
 8007f38:	4602      	mov	r2, r0
 8007f3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f3c:	1ad3      	subs	r3, r2, r3
 8007f3e:	2b02      	cmp	r3, #2
 8007f40:	d901      	bls.n	8007f46 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8007f42:	2303      	movs	r3, #3
 8007f44:	e0e3      	b.n	800810e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007f46:	4b39      	ldr	r3, [pc, #228]	; (800802c <HAL_RCC_OscConfig+0x76c>)
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007f4e:	2b00      	cmp	r3, #0
 8007f50:	d1f0      	bne.n	8007f34 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007f52:	4b36      	ldr	r3, [pc, #216]	; (800802c <HAL_RCC_OscConfig+0x76c>)
 8007f54:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007f56:	4b37      	ldr	r3, [pc, #220]	; (8008034 <HAL_RCC_OscConfig+0x774>)
 8007f58:	4013      	ands	r3, r2
 8007f5a:	687a      	ldr	r2, [r7, #4]
 8007f5c:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8007f5e:	687a      	ldr	r2, [r7, #4]
 8007f60:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8007f62:	0112      	lsls	r2, r2, #4
 8007f64:	430a      	orrs	r2, r1
 8007f66:	4931      	ldr	r1, [pc, #196]	; (800802c <HAL_RCC_OscConfig+0x76c>)
 8007f68:	4313      	orrs	r3, r2
 8007f6a:	628b      	str	r3, [r1, #40]	; 0x28
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f70:	3b01      	subs	r3, #1
 8007f72:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007f7a:	3b01      	subs	r3, #1
 8007f7c:	025b      	lsls	r3, r3, #9
 8007f7e:	b29b      	uxth	r3, r3
 8007f80:	431a      	orrs	r2, r3
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f86:	3b01      	subs	r3, #1
 8007f88:	041b      	lsls	r3, r3, #16
 8007f8a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8007f8e:	431a      	orrs	r2, r3
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007f94:	3b01      	subs	r3, #1
 8007f96:	061b      	lsls	r3, r3, #24
 8007f98:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8007f9c:	4923      	ldr	r1, [pc, #140]	; (800802c <HAL_RCC_OscConfig+0x76c>)
 8007f9e:	4313      	orrs	r3, r2
 8007fa0:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8007fa2:	4b22      	ldr	r3, [pc, #136]	; (800802c <HAL_RCC_OscConfig+0x76c>)
 8007fa4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007fa6:	4a21      	ldr	r2, [pc, #132]	; (800802c <HAL_RCC_OscConfig+0x76c>)
 8007fa8:	f023 0301 	bic.w	r3, r3, #1
 8007fac:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8007fae:	4b1f      	ldr	r3, [pc, #124]	; (800802c <HAL_RCC_OscConfig+0x76c>)
 8007fb0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007fb2:	4b21      	ldr	r3, [pc, #132]	; (8008038 <HAL_RCC_OscConfig+0x778>)
 8007fb4:	4013      	ands	r3, r2
 8007fb6:	687a      	ldr	r2, [r7, #4]
 8007fb8:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8007fba:	00d2      	lsls	r2, r2, #3
 8007fbc:	491b      	ldr	r1, [pc, #108]	; (800802c <HAL_RCC_OscConfig+0x76c>)
 8007fbe:	4313      	orrs	r3, r2
 8007fc0:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8007fc2:	4b1a      	ldr	r3, [pc, #104]	; (800802c <HAL_RCC_OscConfig+0x76c>)
 8007fc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007fc6:	f023 020c 	bic.w	r2, r3, #12
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007fce:	4917      	ldr	r1, [pc, #92]	; (800802c <HAL_RCC_OscConfig+0x76c>)
 8007fd0:	4313      	orrs	r3, r2
 8007fd2:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8007fd4:	4b15      	ldr	r3, [pc, #84]	; (800802c <HAL_RCC_OscConfig+0x76c>)
 8007fd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007fd8:	f023 0202 	bic.w	r2, r3, #2
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007fe0:	4912      	ldr	r1, [pc, #72]	; (800802c <HAL_RCC_OscConfig+0x76c>)
 8007fe2:	4313      	orrs	r3, r2
 8007fe4:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8007fe6:	4b11      	ldr	r3, [pc, #68]	; (800802c <HAL_RCC_OscConfig+0x76c>)
 8007fe8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007fea:	4a10      	ldr	r2, [pc, #64]	; (800802c <HAL_RCC_OscConfig+0x76c>)
 8007fec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007ff0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007ff2:	4b0e      	ldr	r3, [pc, #56]	; (800802c <HAL_RCC_OscConfig+0x76c>)
 8007ff4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ff6:	4a0d      	ldr	r2, [pc, #52]	; (800802c <HAL_RCC_OscConfig+0x76c>)
 8007ff8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007ffc:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8007ffe:	4b0b      	ldr	r3, [pc, #44]	; (800802c <HAL_RCC_OscConfig+0x76c>)
 8008000:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008002:	4a0a      	ldr	r2, [pc, #40]	; (800802c <HAL_RCC_OscConfig+0x76c>)
 8008004:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008008:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 800800a:	4b08      	ldr	r3, [pc, #32]	; (800802c <HAL_RCC_OscConfig+0x76c>)
 800800c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800800e:	4a07      	ldr	r2, [pc, #28]	; (800802c <HAL_RCC_OscConfig+0x76c>)
 8008010:	f043 0301 	orr.w	r3, r3, #1
 8008014:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008016:	4b05      	ldr	r3, [pc, #20]	; (800802c <HAL_RCC_OscConfig+0x76c>)
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	4a04      	ldr	r2, [pc, #16]	; (800802c <HAL_RCC_OscConfig+0x76c>)
 800801c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008020:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008022:	f7fe fb35 	bl	8006690 <HAL_GetTick>
 8008026:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008028:	e011      	b.n	800804e <HAL_RCC_OscConfig+0x78e>
 800802a:	bf00      	nop
 800802c:	58024400 	.word	0x58024400
 8008030:	58024800 	.word	0x58024800
 8008034:	fffffc0c 	.word	0xfffffc0c
 8008038:	ffff0007 	.word	0xffff0007
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800803c:	f7fe fb28 	bl	8006690 <HAL_GetTick>
 8008040:	4602      	mov	r2, r0
 8008042:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008044:	1ad3      	subs	r3, r2, r3
 8008046:	2b02      	cmp	r3, #2
 8008048:	d901      	bls.n	800804e <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 800804a:	2303      	movs	r3, #3
 800804c:	e05f      	b.n	800810e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800804e:	4b32      	ldr	r3, [pc, #200]	; (8008118 <HAL_RCC_OscConfig+0x858>)
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008056:	2b00      	cmp	r3, #0
 8008058:	d0f0      	beq.n	800803c <HAL_RCC_OscConfig+0x77c>
 800805a:	e057      	b.n	800810c <HAL_RCC_OscConfig+0x84c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800805c:	4b2e      	ldr	r3, [pc, #184]	; (8008118 <HAL_RCC_OscConfig+0x858>)
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	4a2d      	ldr	r2, [pc, #180]	; (8008118 <HAL_RCC_OscConfig+0x858>)
 8008062:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008066:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008068:	f7fe fb12 	bl	8006690 <HAL_GetTick>
 800806c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800806e:	e008      	b.n	8008082 <HAL_RCC_OscConfig+0x7c2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008070:	f7fe fb0e 	bl	8006690 <HAL_GetTick>
 8008074:	4602      	mov	r2, r0
 8008076:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008078:	1ad3      	subs	r3, r2, r3
 800807a:	2b02      	cmp	r3, #2
 800807c:	d901      	bls.n	8008082 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 800807e:	2303      	movs	r3, #3
 8008080:	e045      	b.n	800810e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008082:	4b25      	ldr	r3, [pc, #148]	; (8008118 <HAL_RCC_OscConfig+0x858>)
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800808a:	2b00      	cmp	r3, #0
 800808c:	d1f0      	bne.n	8008070 <HAL_RCC_OscConfig+0x7b0>
 800808e:	e03d      	b.n	800810c <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8008090:	4b21      	ldr	r3, [pc, #132]	; (8008118 <HAL_RCC_OscConfig+0x858>)
 8008092:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008094:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8008096:	4b20      	ldr	r3, [pc, #128]	; (8008118 <HAL_RCC_OscConfig+0x858>)
 8008098:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800809a:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080a0:	2b01      	cmp	r3, #1
 80080a2:	d031      	beq.n	8008108 <HAL_RCC_OscConfig+0x848>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80080a4:	693b      	ldr	r3, [r7, #16]
 80080a6:	f003 0203 	and.w	r2, r3, #3
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80080ae:	429a      	cmp	r2, r3
 80080b0:	d12a      	bne.n	8008108 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80080b2:	693b      	ldr	r3, [r7, #16]
 80080b4:	091b      	lsrs	r3, r3, #4
 80080b6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80080be:	429a      	cmp	r2, r3
 80080c0:	d122      	bne.n	8008108 <HAL_RCC_OscConfig+0x848>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80080c2:	68fb      	ldr	r3, [r7, #12]
 80080c4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80080cc:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80080ce:	429a      	cmp	r2, r3
 80080d0:	d11a      	bne.n	8008108 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80080d2:	68fb      	ldr	r3, [r7, #12]
 80080d4:	0a5b      	lsrs	r3, r3, #9
 80080d6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80080de:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80080e0:	429a      	cmp	r2, r3
 80080e2:	d111      	bne.n	8008108 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80080e4:	68fb      	ldr	r3, [r7, #12]
 80080e6:	0c1b      	lsrs	r3, r3, #16
 80080e8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080f0:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80080f2:	429a      	cmp	r2, r3
 80080f4:	d108      	bne.n	8008108 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80080f6:	68fb      	ldr	r3, [r7, #12]
 80080f8:	0e1b      	lsrs	r3, r3, #24
 80080fa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008102:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8008104:	429a      	cmp	r2, r3
 8008106:	d001      	beq.n	800810c <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8008108:	2301      	movs	r3, #1
 800810a:	e000      	b.n	800810e <HAL_RCC_OscConfig+0x84e>
      }
    }
  }
  return HAL_OK;
 800810c:	2300      	movs	r3, #0
}
 800810e:	4618      	mov	r0, r3
 8008110:	3730      	adds	r7, #48	; 0x30
 8008112:	46bd      	mov	sp, r7
 8008114:	bd80      	pop	{r7, pc}
 8008116:	bf00      	nop
 8008118:	58024400 	.word	0x58024400

0800811c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800811c:	b580      	push	{r7, lr}
 800811e:	b086      	sub	sp, #24
 8008120:	af00      	add	r7, sp, #0
 8008122:	6078      	str	r0, [r7, #4]
 8008124:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	2b00      	cmp	r3, #0
 800812a:	d101      	bne.n	8008130 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800812c:	2301      	movs	r3, #1
 800812e:	e19c      	b.n	800846a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8008130:	4b8a      	ldr	r3, [pc, #552]	; (800835c <HAL_RCC_ClockConfig+0x240>)
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	f003 030f 	and.w	r3, r3, #15
 8008138:	683a      	ldr	r2, [r7, #0]
 800813a:	429a      	cmp	r2, r3
 800813c:	d910      	bls.n	8008160 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800813e:	4b87      	ldr	r3, [pc, #540]	; (800835c <HAL_RCC_ClockConfig+0x240>)
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	f023 020f 	bic.w	r2, r3, #15
 8008146:	4985      	ldr	r1, [pc, #532]	; (800835c <HAL_RCC_ClockConfig+0x240>)
 8008148:	683b      	ldr	r3, [r7, #0]
 800814a:	4313      	orrs	r3, r2
 800814c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800814e:	4b83      	ldr	r3, [pc, #524]	; (800835c <HAL_RCC_ClockConfig+0x240>)
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	f003 030f 	and.w	r3, r3, #15
 8008156:	683a      	ldr	r2, [r7, #0]
 8008158:	429a      	cmp	r2, r3
 800815a:	d001      	beq.n	8008160 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800815c:	2301      	movs	r3, #1
 800815e:	e184      	b.n	800846a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	f003 0304 	and.w	r3, r3, #4
 8008168:	2b00      	cmp	r3, #0
 800816a:	d010      	beq.n	800818e <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	691a      	ldr	r2, [r3, #16]
 8008170:	4b7b      	ldr	r3, [pc, #492]	; (8008360 <HAL_RCC_ClockConfig+0x244>)
 8008172:	699b      	ldr	r3, [r3, #24]
 8008174:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008178:	429a      	cmp	r2, r3
 800817a:	d908      	bls.n	800818e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800817c:	4b78      	ldr	r3, [pc, #480]	; (8008360 <HAL_RCC_ClockConfig+0x244>)
 800817e:	699b      	ldr	r3, [r3, #24]
 8008180:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	691b      	ldr	r3, [r3, #16]
 8008188:	4975      	ldr	r1, [pc, #468]	; (8008360 <HAL_RCC_ClockConfig+0x244>)
 800818a:	4313      	orrs	r3, r2
 800818c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	f003 0308 	and.w	r3, r3, #8
 8008196:	2b00      	cmp	r3, #0
 8008198:	d010      	beq.n	80081bc <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	695a      	ldr	r2, [r3, #20]
 800819e:	4b70      	ldr	r3, [pc, #448]	; (8008360 <HAL_RCC_ClockConfig+0x244>)
 80081a0:	69db      	ldr	r3, [r3, #28]
 80081a2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80081a6:	429a      	cmp	r2, r3
 80081a8:	d908      	bls.n	80081bc <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80081aa:	4b6d      	ldr	r3, [pc, #436]	; (8008360 <HAL_RCC_ClockConfig+0x244>)
 80081ac:	69db      	ldr	r3, [r3, #28]
 80081ae:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	695b      	ldr	r3, [r3, #20]
 80081b6:	496a      	ldr	r1, [pc, #424]	; (8008360 <HAL_RCC_ClockConfig+0x244>)
 80081b8:	4313      	orrs	r3, r2
 80081ba:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	f003 0310 	and.w	r3, r3, #16
 80081c4:	2b00      	cmp	r3, #0
 80081c6:	d010      	beq.n	80081ea <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	699a      	ldr	r2, [r3, #24]
 80081cc:	4b64      	ldr	r3, [pc, #400]	; (8008360 <HAL_RCC_ClockConfig+0x244>)
 80081ce:	69db      	ldr	r3, [r3, #28]
 80081d0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80081d4:	429a      	cmp	r2, r3
 80081d6:	d908      	bls.n	80081ea <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80081d8:	4b61      	ldr	r3, [pc, #388]	; (8008360 <HAL_RCC_ClockConfig+0x244>)
 80081da:	69db      	ldr	r3, [r3, #28]
 80081dc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	699b      	ldr	r3, [r3, #24]
 80081e4:	495e      	ldr	r1, [pc, #376]	; (8008360 <HAL_RCC_ClockConfig+0x244>)
 80081e6:	4313      	orrs	r3, r2
 80081e8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	f003 0320 	and.w	r3, r3, #32
 80081f2:	2b00      	cmp	r3, #0
 80081f4:	d010      	beq.n	8008218 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	69da      	ldr	r2, [r3, #28]
 80081fa:	4b59      	ldr	r3, [pc, #356]	; (8008360 <HAL_RCC_ClockConfig+0x244>)
 80081fc:	6a1b      	ldr	r3, [r3, #32]
 80081fe:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008202:	429a      	cmp	r2, r3
 8008204:	d908      	bls.n	8008218 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8008206:	4b56      	ldr	r3, [pc, #344]	; (8008360 <HAL_RCC_ClockConfig+0x244>)
 8008208:	6a1b      	ldr	r3, [r3, #32]
 800820a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	69db      	ldr	r3, [r3, #28]
 8008212:	4953      	ldr	r1, [pc, #332]	; (8008360 <HAL_RCC_ClockConfig+0x244>)
 8008214:	4313      	orrs	r3, r2
 8008216:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	f003 0302 	and.w	r3, r3, #2
 8008220:	2b00      	cmp	r3, #0
 8008222:	d010      	beq.n	8008246 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	68da      	ldr	r2, [r3, #12]
 8008228:	4b4d      	ldr	r3, [pc, #308]	; (8008360 <HAL_RCC_ClockConfig+0x244>)
 800822a:	699b      	ldr	r3, [r3, #24]
 800822c:	f003 030f 	and.w	r3, r3, #15
 8008230:	429a      	cmp	r2, r3
 8008232:	d908      	bls.n	8008246 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008234:	4b4a      	ldr	r3, [pc, #296]	; (8008360 <HAL_RCC_ClockConfig+0x244>)
 8008236:	699b      	ldr	r3, [r3, #24]
 8008238:	f023 020f 	bic.w	r2, r3, #15
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	68db      	ldr	r3, [r3, #12]
 8008240:	4947      	ldr	r1, [pc, #284]	; (8008360 <HAL_RCC_ClockConfig+0x244>)
 8008242:	4313      	orrs	r3, r2
 8008244:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	f003 0301 	and.w	r3, r3, #1
 800824e:	2b00      	cmp	r3, #0
 8008250:	d055      	beq.n	80082fe <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8008252:	4b43      	ldr	r3, [pc, #268]	; (8008360 <HAL_RCC_ClockConfig+0x244>)
 8008254:	699b      	ldr	r3, [r3, #24]
 8008256:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	689b      	ldr	r3, [r3, #8]
 800825e:	4940      	ldr	r1, [pc, #256]	; (8008360 <HAL_RCC_ClockConfig+0x244>)
 8008260:	4313      	orrs	r3, r2
 8008262:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	685b      	ldr	r3, [r3, #4]
 8008268:	2b02      	cmp	r3, #2
 800826a:	d107      	bne.n	800827c <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800826c:	4b3c      	ldr	r3, [pc, #240]	; (8008360 <HAL_RCC_ClockConfig+0x244>)
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008274:	2b00      	cmp	r3, #0
 8008276:	d121      	bne.n	80082bc <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8008278:	2301      	movs	r3, #1
 800827a:	e0f6      	b.n	800846a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	685b      	ldr	r3, [r3, #4]
 8008280:	2b03      	cmp	r3, #3
 8008282:	d107      	bne.n	8008294 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008284:	4b36      	ldr	r3, [pc, #216]	; (8008360 <HAL_RCC_ClockConfig+0x244>)
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800828c:	2b00      	cmp	r3, #0
 800828e:	d115      	bne.n	80082bc <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8008290:	2301      	movs	r3, #1
 8008292:	e0ea      	b.n	800846a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	685b      	ldr	r3, [r3, #4]
 8008298:	2b01      	cmp	r3, #1
 800829a:	d107      	bne.n	80082ac <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800829c:	4b30      	ldr	r3, [pc, #192]	; (8008360 <HAL_RCC_ClockConfig+0x244>)
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80082a4:	2b00      	cmp	r3, #0
 80082a6:	d109      	bne.n	80082bc <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80082a8:	2301      	movs	r3, #1
 80082aa:	e0de      	b.n	800846a <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80082ac:	4b2c      	ldr	r3, [pc, #176]	; (8008360 <HAL_RCC_ClockConfig+0x244>)
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	f003 0304 	and.w	r3, r3, #4
 80082b4:	2b00      	cmp	r3, #0
 80082b6:	d101      	bne.n	80082bc <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80082b8:	2301      	movs	r3, #1
 80082ba:	e0d6      	b.n	800846a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80082bc:	4b28      	ldr	r3, [pc, #160]	; (8008360 <HAL_RCC_ClockConfig+0x244>)
 80082be:	691b      	ldr	r3, [r3, #16]
 80082c0:	f023 0207 	bic.w	r2, r3, #7
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	685b      	ldr	r3, [r3, #4]
 80082c8:	4925      	ldr	r1, [pc, #148]	; (8008360 <HAL_RCC_ClockConfig+0x244>)
 80082ca:	4313      	orrs	r3, r2
 80082cc:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80082ce:	f7fe f9df 	bl	8006690 <HAL_GetTick>
 80082d2:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80082d4:	e00a      	b.n	80082ec <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80082d6:	f7fe f9db 	bl	8006690 <HAL_GetTick>
 80082da:	4602      	mov	r2, r0
 80082dc:	697b      	ldr	r3, [r7, #20]
 80082de:	1ad3      	subs	r3, r2, r3
 80082e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80082e4:	4293      	cmp	r3, r2
 80082e6:	d901      	bls.n	80082ec <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80082e8:	2303      	movs	r3, #3
 80082ea:	e0be      	b.n	800846a <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80082ec:	4b1c      	ldr	r3, [pc, #112]	; (8008360 <HAL_RCC_ClockConfig+0x244>)
 80082ee:	691b      	ldr	r3, [r3, #16]
 80082f0:	f003 0238 	and.w	r2, r3, #56	; 0x38
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	685b      	ldr	r3, [r3, #4]
 80082f8:	00db      	lsls	r3, r3, #3
 80082fa:	429a      	cmp	r2, r3
 80082fc:	d1eb      	bne.n	80082d6 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	f003 0302 	and.w	r3, r3, #2
 8008306:	2b00      	cmp	r3, #0
 8008308:	d010      	beq.n	800832c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	68da      	ldr	r2, [r3, #12]
 800830e:	4b14      	ldr	r3, [pc, #80]	; (8008360 <HAL_RCC_ClockConfig+0x244>)
 8008310:	699b      	ldr	r3, [r3, #24]
 8008312:	f003 030f 	and.w	r3, r3, #15
 8008316:	429a      	cmp	r2, r3
 8008318:	d208      	bcs.n	800832c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800831a:	4b11      	ldr	r3, [pc, #68]	; (8008360 <HAL_RCC_ClockConfig+0x244>)
 800831c:	699b      	ldr	r3, [r3, #24]
 800831e:	f023 020f 	bic.w	r2, r3, #15
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	68db      	ldr	r3, [r3, #12]
 8008326:	490e      	ldr	r1, [pc, #56]	; (8008360 <HAL_RCC_ClockConfig+0x244>)
 8008328:	4313      	orrs	r3, r2
 800832a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800832c:	4b0b      	ldr	r3, [pc, #44]	; (800835c <HAL_RCC_ClockConfig+0x240>)
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	f003 030f 	and.w	r3, r3, #15
 8008334:	683a      	ldr	r2, [r7, #0]
 8008336:	429a      	cmp	r2, r3
 8008338:	d214      	bcs.n	8008364 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800833a:	4b08      	ldr	r3, [pc, #32]	; (800835c <HAL_RCC_ClockConfig+0x240>)
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	f023 020f 	bic.w	r2, r3, #15
 8008342:	4906      	ldr	r1, [pc, #24]	; (800835c <HAL_RCC_ClockConfig+0x240>)
 8008344:	683b      	ldr	r3, [r7, #0]
 8008346:	4313      	orrs	r3, r2
 8008348:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800834a:	4b04      	ldr	r3, [pc, #16]	; (800835c <HAL_RCC_ClockConfig+0x240>)
 800834c:	681b      	ldr	r3, [r3, #0]
 800834e:	f003 030f 	and.w	r3, r3, #15
 8008352:	683a      	ldr	r2, [r7, #0]
 8008354:	429a      	cmp	r2, r3
 8008356:	d005      	beq.n	8008364 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8008358:	2301      	movs	r3, #1
 800835a:	e086      	b.n	800846a <HAL_RCC_ClockConfig+0x34e>
 800835c:	52002000 	.word	0x52002000
 8008360:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	f003 0304 	and.w	r3, r3, #4
 800836c:	2b00      	cmp	r3, #0
 800836e:	d010      	beq.n	8008392 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	691a      	ldr	r2, [r3, #16]
 8008374:	4b3f      	ldr	r3, [pc, #252]	; (8008474 <HAL_RCC_ClockConfig+0x358>)
 8008376:	699b      	ldr	r3, [r3, #24]
 8008378:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800837c:	429a      	cmp	r2, r3
 800837e:	d208      	bcs.n	8008392 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8008380:	4b3c      	ldr	r3, [pc, #240]	; (8008474 <HAL_RCC_ClockConfig+0x358>)
 8008382:	699b      	ldr	r3, [r3, #24]
 8008384:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	691b      	ldr	r3, [r3, #16]
 800838c:	4939      	ldr	r1, [pc, #228]	; (8008474 <HAL_RCC_ClockConfig+0x358>)
 800838e:	4313      	orrs	r3, r2
 8008390:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	681b      	ldr	r3, [r3, #0]
 8008396:	f003 0308 	and.w	r3, r3, #8
 800839a:	2b00      	cmp	r3, #0
 800839c:	d010      	beq.n	80083c0 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	695a      	ldr	r2, [r3, #20]
 80083a2:	4b34      	ldr	r3, [pc, #208]	; (8008474 <HAL_RCC_ClockConfig+0x358>)
 80083a4:	69db      	ldr	r3, [r3, #28]
 80083a6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80083aa:	429a      	cmp	r2, r3
 80083ac:	d208      	bcs.n	80083c0 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80083ae:	4b31      	ldr	r3, [pc, #196]	; (8008474 <HAL_RCC_ClockConfig+0x358>)
 80083b0:	69db      	ldr	r3, [r3, #28]
 80083b2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	695b      	ldr	r3, [r3, #20]
 80083ba:	492e      	ldr	r1, [pc, #184]	; (8008474 <HAL_RCC_ClockConfig+0x358>)
 80083bc:	4313      	orrs	r3, r2
 80083be:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	f003 0310 	and.w	r3, r3, #16
 80083c8:	2b00      	cmp	r3, #0
 80083ca:	d010      	beq.n	80083ee <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	699a      	ldr	r2, [r3, #24]
 80083d0:	4b28      	ldr	r3, [pc, #160]	; (8008474 <HAL_RCC_ClockConfig+0x358>)
 80083d2:	69db      	ldr	r3, [r3, #28]
 80083d4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80083d8:	429a      	cmp	r2, r3
 80083da:	d208      	bcs.n	80083ee <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80083dc:	4b25      	ldr	r3, [pc, #148]	; (8008474 <HAL_RCC_ClockConfig+0x358>)
 80083de:	69db      	ldr	r3, [r3, #28]
 80083e0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	699b      	ldr	r3, [r3, #24]
 80083e8:	4922      	ldr	r1, [pc, #136]	; (8008474 <HAL_RCC_ClockConfig+0x358>)
 80083ea:	4313      	orrs	r3, r2
 80083ec:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	f003 0320 	and.w	r3, r3, #32
 80083f6:	2b00      	cmp	r3, #0
 80083f8:	d010      	beq.n	800841c <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	69da      	ldr	r2, [r3, #28]
 80083fe:	4b1d      	ldr	r3, [pc, #116]	; (8008474 <HAL_RCC_ClockConfig+0x358>)
 8008400:	6a1b      	ldr	r3, [r3, #32]
 8008402:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008406:	429a      	cmp	r2, r3
 8008408:	d208      	bcs.n	800841c <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800840a:	4b1a      	ldr	r3, [pc, #104]	; (8008474 <HAL_RCC_ClockConfig+0x358>)
 800840c:	6a1b      	ldr	r3, [r3, #32]
 800840e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	69db      	ldr	r3, [r3, #28]
 8008416:	4917      	ldr	r1, [pc, #92]	; (8008474 <HAL_RCC_ClockConfig+0x358>)
 8008418:	4313      	orrs	r3, r2
 800841a:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800841c:	f000 f834 	bl	8008488 <HAL_RCC_GetSysClockFreq>
 8008420:	4602      	mov	r2, r0
 8008422:	4b14      	ldr	r3, [pc, #80]	; (8008474 <HAL_RCC_ClockConfig+0x358>)
 8008424:	699b      	ldr	r3, [r3, #24]
 8008426:	0a1b      	lsrs	r3, r3, #8
 8008428:	f003 030f 	and.w	r3, r3, #15
 800842c:	4912      	ldr	r1, [pc, #72]	; (8008478 <HAL_RCC_ClockConfig+0x35c>)
 800842e:	5ccb      	ldrb	r3, [r1, r3]
 8008430:	f003 031f 	and.w	r3, r3, #31
 8008434:	fa22 f303 	lsr.w	r3, r2, r3
 8008438:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800843a:	4b0e      	ldr	r3, [pc, #56]	; (8008474 <HAL_RCC_ClockConfig+0x358>)
 800843c:	699b      	ldr	r3, [r3, #24]
 800843e:	f003 030f 	and.w	r3, r3, #15
 8008442:	4a0d      	ldr	r2, [pc, #52]	; (8008478 <HAL_RCC_ClockConfig+0x35c>)
 8008444:	5cd3      	ldrb	r3, [r2, r3]
 8008446:	f003 031f 	and.w	r3, r3, #31
 800844a:	693a      	ldr	r2, [r7, #16]
 800844c:	fa22 f303 	lsr.w	r3, r2, r3
 8008450:	4a0a      	ldr	r2, [pc, #40]	; (800847c <HAL_RCC_ClockConfig+0x360>)
 8008452:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8008454:	4a0a      	ldr	r2, [pc, #40]	; (8008480 <HAL_RCC_ClockConfig+0x364>)
 8008456:	693b      	ldr	r3, [r7, #16]
 8008458:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 800845a:	4b0a      	ldr	r3, [pc, #40]	; (8008484 <HAL_RCC_ClockConfig+0x368>)
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	4618      	mov	r0, r3
 8008460:	f7fe f8cc 	bl	80065fc <HAL_InitTick>
 8008464:	4603      	mov	r3, r0
 8008466:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8008468:	7bfb      	ldrb	r3, [r7, #15]
}
 800846a:	4618      	mov	r0, r3
 800846c:	3718      	adds	r7, #24
 800846e:	46bd      	mov	sp, r7
 8008470:	bd80      	pop	{r7, pc}
 8008472:	bf00      	nop
 8008474:	58024400 	.word	0x58024400
 8008478:	080121e4 	.word	0x080121e4
 800847c:	2400007c 	.word	0x2400007c
 8008480:	24000078 	.word	0x24000078
 8008484:	24000080 	.word	0x24000080

08008488 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008488:	b480      	push	{r7}
 800848a:	b089      	sub	sp, #36	; 0x24
 800848c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800848e:	4bb3      	ldr	r3, [pc, #716]	; (800875c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008490:	691b      	ldr	r3, [r3, #16]
 8008492:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008496:	2b18      	cmp	r3, #24
 8008498:	f200 8155 	bhi.w	8008746 <HAL_RCC_GetSysClockFreq+0x2be>
 800849c:	a201      	add	r2, pc, #4	; (adr r2, 80084a4 <HAL_RCC_GetSysClockFreq+0x1c>)
 800849e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084a2:	bf00      	nop
 80084a4:	08008509 	.word	0x08008509
 80084a8:	08008747 	.word	0x08008747
 80084ac:	08008747 	.word	0x08008747
 80084b0:	08008747 	.word	0x08008747
 80084b4:	08008747 	.word	0x08008747
 80084b8:	08008747 	.word	0x08008747
 80084bc:	08008747 	.word	0x08008747
 80084c0:	08008747 	.word	0x08008747
 80084c4:	0800852f 	.word	0x0800852f
 80084c8:	08008747 	.word	0x08008747
 80084cc:	08008747 	.word	0x08008747
 80084d0:	08008747 	.word	0x08008747
 80084d4:	08008747 	.word	0x08008747
 80084d8:	08008747 	.word	0x08008747
 80084dc:	08008747 	.word	0x08008747
 80084e0:	08008747 	.word	0x08008747
 80084e4:	08008535 	.word	0x08008535
 80084e8:	08008747 	.word	0x08008747
 80084ec:	08008747 	.word	0x08008747
 80084f0:	08008747 	.word	0x08008747
 80084f4:	08008747 	.word	0x08008747
 80084f8:	08008747 	.word	0x08008747
 80084fc:	08008747 	.word	0x08008747
 8008500:	08008747 	.word	0x08008747
 8008504:	0800853b 	.word	0x0800853b
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008508:	4b94      	ldr	r3, [pc, #592]	; (800875c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	f003 0320 	and.w	r3, r3, #32
 8008510:	2b00      	cmp	r3, #0
 8008512:	d009      	beq.n	8008528 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008514:	4b91      	ldr	r3, [pc, #580]	; (800875c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	08db      	lsrs	r3, r3, #3
 800851a:	f003 0303 	and.w	r3, r3, #3
 800851e:	4a90      	ldr	r2, [pc, #576]	; (8008760 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8008520:	fa22 f303 	lsr.w	r3, r2, r3
 8008524:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8008526:	e111      	b.n	800874c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8008528:	4b8d      	ldr	r3, [pc, #564]	; (8008760 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800852a:	61bb      	str	r3, [r7, #24]
    break;
 800852c:	e10e      	b.n	800874c <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 800852e:	4b8d      	ldr	r3, [pc, #564]	; (8008764 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8008530:	61bb      	str	r3, [r7, #24]
    break;
 8008532:	e10b      	b.n	800874c <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8008534:	4b8c      	ldr	r3, [pc, #560]	; (8008768 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8008536:	61bb      	str	r3, [r7, #24]
    break;
 8008538:	e108      	b.n	800874c <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800853a:	4b88      	ldr	r3, [pc, #544]	; (800875c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800853c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800853e:	f003 0303 	and.w	r3, r3, #3
 8008542:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8008544:	4b85      	ldr	r3, [pc, #532]	; (800875c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008546:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008548:	091b      	lsrs	r3, r3, #4
 800854a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800854e:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8008550:	4b82      	ldr	r3, [pc, #520]	; (800875c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008552:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008554:	f003 0301 	and.w	r3, r3, #1
 8008558:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800855a:	4b80      	ldr	r3, [pc, #512]	; (800875c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800855c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800855e:	08db      	lsrs	r3, r3, #3
 8008560:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008564:	68fa      	ldr	r2, [r7, #12]
 8008566:	fb02 f303 	mul.w	r3, r2, r3
 800856a:	ee07 3a90 	vmov	s15, r3
 800856e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008572:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8008576:	693b      	ldr	r3, [r7, #16]
 8008578:	2b00      	cmp	r3, #0
 800857a:	f000 80e1 	beq.w	8008740 <HAL_RCC_GetSysClockFreq+0x2b8>
 800857e:	697b      	ldr	r3, [r7, #20]
 8008580:	2b02      	cmp	r3, #2
 8008582:	f000 8083 	beq.w	800868c <HAL_RCC_GetSysClockFreq+0x204>
 8008586:	697b      	ldr	r3, [r7, #20]
 8008588:	2b02      	cmp	r3, #2
 800858a:	f200 80a1 	bhi.w	80086d0 <HAL_RCC_GetSysClockFreq+0x248>
 800858e:	697b      	ldr	r3, [r7, #20]
 8008590:	2b00      	cmp	r3, #0
 8008592:	d003      	beq.n	800859c <HAL_RCC_GetSysClockFreq+0x114>
 8008594:	697b      	ldr	r3, [r7, #20]
 8008596:	2b01      	cmp	r3, #1
 8008598:	d056      	beq.n	8008648 <HAL_RCC_GetSysClockFreq+0x1c0>
 800859a:	e099      	b.n	80086d0 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800859c:	4b6f      	ldr	r3, [pc, #444]	; (800875c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	f003 0320 	and.w	r3, r3, #32
 80085a4:	2b00      	cmp	r3, #0
 80085a6:	d02d      	beq.n	8008604 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80085a8:	4b6c      	ldr	r3, [pc, #432]	; (800875c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80085aa:	681b      	ldr	r3, [r3, #0]
 80085ac:	08db      	lsrs	r3, r3, #3
 80085ae:	f003 0303 	and.w	r3, r3, #3
 80085b2:	4a6b      	ldr	r2, [pc, #428]	; (8008760 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80085b4:	fa22 f303 	lsr.w	r3, r2, r3
 80085b8:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	ee07 3a90 	vmov	s15, r3
 80085c0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80085c4:	693b      	ldr	r3, [r7, #16]
 80085c6:	ee07 3a90 	vmov	s15, r3
 80085ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80085ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80085d2:	4b62      	ldr	r3, [pc, #392]	; (800875c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80085d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80085d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80085da:	ee07 3a90 	vmov	s15, r3
 80085de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80085e2:	ed97 6a02 	vldr	s12, [r7, #8]
 80085e6:	eddf 5a61 	vldr	s11, [pc, #388]	; 800876c <HAL_RCC_GetSysClockFreq+0x2e4>
 80085ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80085ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80085f2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80085f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80085fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80085fe:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8008602:	e087      	b.n	8008714 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008604:	693b      	ldr	r3, [r7, #16]
 8008606:	ee07 3a90 	vmov	s15, r3
 800860a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800860e:	eddf 6a58 	vldr	s13, [pc, #352]	; 8008770 <HAL_RCC_GetSysClockFreq+0x2e8>
 8008612:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008616:	4b51      	ldr	r3, [pc, #324]	; (800875c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008618:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800861a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800861e:	ee07 3a90 	vmov	s15, r3
 8008622:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008626:	ed97 6a02 	vldr	s12, [r7, #8]
 800862a:	eddf 5a50 	vldr	s11, [pc, #320]	; 800876c <HAL_RCC_GetSysClockFreq+0x2e4>
 800862e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008632:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008636:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800863a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800863e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008642:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008646:	e065      	b.n	8008714 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008648:	693b      	ldr	r3, [r7, #16]
 800864a:	ee07 3a90 	vmov	s15, r3
 800864e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008652:	eddf 6a48 	vldr	s13, [pc, #288]	; 8008774 <HAL_RCC_GetSysClockFreq+0x2ec>
 8008656:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800865a:	4b40      	ldr	r3, [pc, #256]	; (800875c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800865c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800865e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008662:	ee07 3a90 	vmov	s15, r3
 8008666:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800866a:	ed97 6a02 	vldr	s12, [r7, #8]
 800866e:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800876c <HAL_RCC_GetSysClockFreq+0x2e4>
 8008672:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008676:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800867a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800867e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008682:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008686:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800868a:	e043      	b.n	8008714 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800868c:	693b      	ldr	r3, [r7, #16]
 800868e:	ee07 3a90 	vmov	s15, r3
 8008692:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008696:	eddf 6a38 	vldr	s13, [pc, #224]	; 8008778 <HAL_RCC_GetSysClockFreq+0x2f0>
 800869a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800869e:	4b2f      	ldr	r3, [pc, #188]	; (800875c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80086a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80086a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80086a6:	ee07 3a90 	vmov	s15, r3
 80086aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80086ae:	ed97 6a02 	vldr	s12, [r7, #8]
 80086b2:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800876c <HAL_RCC_GetSysClockFreq+0x2e4>
 80086b6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80086ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80086be:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80086c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80086c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80086ca:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80086ce:	e021      	b.n	8008714 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80086d0:	693b      	ldr	r3, [r7, #16]
 80086d2:	ee07 3a90 	vmov	s15, r3
 80086d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80086da:	eddf 6a26 	vldr	s13, [pc, #152]	; 8008774 <HAL_RCC_GetSysClockFreq+0x2ec>
 80086de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80086e2:	4b1e      	ldr	r3, [pc, #120]	; (800875c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80086e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80086e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80086ea:	ee07 3a90 	vmov	s15, r3
 80086ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80086f2:	ed97 6a02 	vldr	s12, [r7, #8]
 80086f6:	eddf 5a1d 	vldr	s11, [pc, #116]	; 800876c <HAL_RCC_GetSysClockFreq+0x2e4>
 80086fa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80086fe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008702:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008706:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800870a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800870e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008712:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8008714:	4b11      	ldr	r3, [pc, #68]	; (800875c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008716:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008718:	0a5b      	lsrs	r3, r3, #9
 800871a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800871e:	3301      	adds	r3, #1
 8008720:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8008722:	683b      	ldr	r3, [r7, #0]
 8008724:	ee07 3a90 	vmov	s15, r3
 8008728:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800872c:	edd7 6a07 	vldr	s13, [r7, #28]
 8008730:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008734:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008738:	ee17 3a90 	vmov	r3, s15
 800873c:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 800873e:	e005      	b.n	800874c <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8008740:	2300      	movs	r3, #0
 8008742:	61bb      	str	r3, [r7, #24]
    break;
 8008744:	e002      	b.n	800874c <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8008746:	4b07      	ldr	r3, [pc, #28]	; (8008764 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8008748:	61bb      	str	r3, [r7, #24]
    break;
 800874a:	bf00      	nop
  }

  return sysclockfreq;
 800874c:	69bb      	ldr	r3, [r7, #24]
}
 800874e:	4618      	mov	r0, r3
 8008750:	3724      	adds	r7, #36	; 0x24
 8008752:	46bd      	mov	sp, r7
 8008754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008758:	4770      	bx	lr
 800875a:	bf00      	nop
 800875c:	58024400 	.word	0x58024400
 8008760:	03d09000 	.word	0x03d09000
 8008764:	003d0900 	.word	0x003d0900
 8008768:	017d7840 	.word	0x017d7840
 800876c:	46000000 	.word	0x46000000
 8008770:	4c742400 	.word	0x4c742400
 8008774:	4a742400 	.word	0x4a742400
 8008778:	4bbebc20 	.word	0x4bbebc20

0800877c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800877c:	b580      	push	{r7, lr}
 800877e:	b082      	sub	sp, #8
 8008780:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8008782:	f7ff fe81 	bl	8008488 <HAL_RCC_GetSysClockFreq>
 8008786:	4602      	mov	r2, r0
 8008788:	4b10      	ldr	r3, [pc, #64]	; (80087cc <HAL_RCC_GetHCLKFreq+0x50>)
 800878a:	699b      	ldr	r3, [r3, #24]
 800878c:	0a1b      	lsrs	r3, r3, #8
 800878e:	f003 030f 	and.w	r3, r3, #15
 8008792:	490f      	ldr	r1, [pc, #60]	; (80087d0 <HAL_RCC_GetHCLKFreq+0x54>)
 8008794:	5ccb      	ldrb	r3, [r1, r3]
 8008796:	f003 031f 	and.w	r3, r3, #31
 800879a:	fa22 f303 	lsr.w	r3, r2, r3
 800879e:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80087a0:	4b0a      	ldr	r3, [pc, #40]	; (80087cc <HAL_RCC_GetHCLKFreq+0x50>)
 80087a2:	699b      	ldr	r3, [r3, #24]
 80087a4:	f003 030f 	and.w	r3, r3, #15
 80087a8:	4a09      	ldr	r2, [pc, #36]	; (80087d0 <HAL_RCC_GetHCLKFreq+0x54>)
 80087aa:	5cd3      	ldrb	r3, [r2, r3]
 80087ac:	f003 031f 	and.w	r3, r3, #31
 80087b0:	687a      	ldr	r2, [r7, #4]
 80087b2:	fa22 f303 	lsr.w	r3, r2, r3
 80087b6:	4a07      	ldr	r2, [pc, #28]	; (80087d4 <HAL_RCC_GetHCLKFreq+0x58>)
 80087b8:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80087ba:	4a07      	ldr	r2, [pc, #28]	; (80087d8 <HAL_RCC_GetHCLKFreq+0x5c>)
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80087c0:	4b04      	ldr	r3, [pc, #16]	; (80087d4 <HAL_RCC_GetHCLKFreq+0x58>)
 80087c2:	681b      	ldr	r3, [r3, #0]
}
 80087c4:	4618      	mov	r0, r3
 80087c6:	3708      	adds	r7, #8
 80087c8:	46bd      	mov	sp, r7
 80087ca:	bd80      	pop	{r7, pc}
 80087cc:	58024400 	.word	0x58024400
 80087d0:	080121e4 	.word	0x080121e4
 80087d4:	2400007c 	.word	0x2400007c
 80087d8:	24000078 	.word	0x24000078

080087dc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80087dc:	b580      	push	{r7, lr}
 80087de:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80087e0:	f7ff ffcc 	bl	800877c <HAL_RCC_GetHCLKFreq>
 80087e4:	4602      	mov	r2, r0
 80087e6:	4b06      	ldr	r3, [pc, #24]	; (8008800 <HAL_RCC_GetPCLK1Freq+0x24>)
 80087e8:	69db      	ldr	r3, [r3, #28]
 80087ea:	091b      	lsrs	r3, r3, #4
 80087ec:	f003 0307 	and.w	r3, r3, #7
 80087f0:	4904      	ldr	r1, [pc, #16]	; (8008804 <HAL_RCC_GetPCLK1Freq+0x28>)
 80087f2:	5ccb      	ldrb	r3, [r1, r3]
 80087f4:	f003 031f 	and.w	r3, r3, #31
 80087f8:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80087fc:	4618      	mov	r0, r3
 80087fe:	bd80      	pop	{r7, pc}
 8008800:	58024400 	.word	0x58024400
 8008804:	080121e4 	.word	0x080121e4

08008808 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008808:	b580      	push	{r7, lr}
 800880a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800880c:	f7ff ffb6 	bl	800877c <HAL_RCC_GetHCLKFreq>
 8008810:	4602      	mov	r2, r0
 8008812:	4b06      	ldr	r3, [pc, #24]	; (800882c <HAL_RCC_GetPCLK2Freq+0x24>)
 8008814:	69db      	ldr	r3, [r3, #28]
 8008816:	0a1b      	lsrs	r3, r3, #8
 8008818:	f003 0307 	and.w	r3, r3, #7
 800881c:	4904      	ldr	r1, [pc, #16]	; (8008830 <HAL_RCC_GetPCLK2Freq+0x28>)
 800881e:	5ccb      	ldrb	r3, [r1, r3]
 8008820:	f003 031f 	and.w	r3, r3, #31
 8008824:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8008828:	4618      	mov	r0, r3
 800882a:	bd80      	pop	{r7, pc}
 800882c:	58024400 	.word	0x58024400
 8008830:	080121e4 	.word	0x080121e4

08008834 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008834:	b580      	push	{r7, lr}
 8008836:	b086      	sub	sp, #24
 8008838:	af00      	add	r7, sp, #0
 800883a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800883c:	2300      	movs	r3, #0
 800883e:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8008840:	2300      	movs	r3, #0
 8008842:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800884c:	2b00      	cmp	r3, #0
 800884e:	d03f      	beq.n	80088d0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008854:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008858:	d02a      	beq.n	80088b0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800885a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800885e:	d824      	bhi.n	80088aa <HAL_RCCEx_PeriphCLKConfig+0x76>
 8008860:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008864:	d018      	beq.n	8008898 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8008866:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800886a:	d81e      	bhi.n	80088aa <HAL_RCCEx_PeriphCLKConfig+0x76>
 800886c:	2b00      	cmp	r3, #0
 800886e:	d003      	beq.n	8008878 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8008870:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008874:	d007      	beq.n	8008886 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8008876:	e018      	b.n	80088aa <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008878:	4ba3      	ldr	r3, [pc, #652]	; (8008b08 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800887a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800887c:	4aa2      	ldr	r2, [pc, #648]	; (8008b08 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800887e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008882:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8008884:	e015      	b.n	80088b2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	3304      	adds	r3, #4
 800888a:	2102      	movs	r1, #2
 800888c:	4618      	mov	r0, r3
 800888e:	f001 f9d5 	bl	8009c3c <RCCEx_PLL2_Config>
 8008892:	4603      	mov	r3, r0
 8008894:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8008896:	e00c      	b.n	80088b2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	3324      	adds	r3, #36	; 0x24
 800889c:	2102      	movs	r1, #2
 800889e:	4618      	mov	r0, r3
 80088a0:	f001 fa7e 	bl	8009da0 <RCCEx_PLL3_Config>
 80088a4:	4603      	mov	r3, r0
 80088a6:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80088a8:	e003      	b.n	80088b2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80088aa:	2301      	movs	r3, #1
 80088ac:	75fb      	strb	r3, [r7, #23]
      break;
 80088ae:	e000      	b.n	80088b2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80088b0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80088b2:	7dfb      	ldrb	r3, [r7, #23]
 80088b4:	2b00      	cmp	r3, #0
 80088b6:	d109      	bne.n	80088cc <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80088b8:	4b93      	ldr	r3, [pc, #588]	; (8008b08 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80088ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80088bc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80088c4:	4990      	ldr	r1, [pc, #576]	; (8008b08 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80088c6:	4313      	orrs	r3, r2
 80088c8:	650b      	str	r3, [r1, #80]	; 0x50
 80088ca:	e001      	b.n	80088d0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80088cc:	7dfb      	ldrb	r3, [r7, #23]
 80088ce:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80088d8:	2b00      	cmp	r3, #0
 80088da:	d03d      	beq.n	8008958 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80088e0:	2b04      	cmp	r3, #4
 80088e2:	d826      	bhi.n	8008932 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80088e4:	a201      	add	r2, pc, #4	; (adr r2, 80088ec <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 80088e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80088ea:	bf00      	nop
 80088ec:	08008901 	.word	0x08008901
 80088f0:	0800890f 	.word	0x0800890f
 80088f4:	08008921 	.word	0x08008921
 80088f8:	08008939 	.word	0x08008939
 80088fc:	08008939 	.word	0x08008939
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008900:	4b81      	ldr	r3, [pc, #516]	; (8008b08 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8008902:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008904:	4a80      	ldr	r2, [pc, #512]	; (8008b08 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8008906:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800890a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800890c:	e015      	b.n	800893a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	3304      	adds	r3, #4
 8008912:	2100      	movs	r1, #0
 8008914:	4618      	mov	r0, r3
 8008916:	f001 f991 	bl	8009c3c <RCCEx_PLL2_Config>
 800891a:	4603      	mov	r3, r0
 800891c:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800891e:	e00c      	b.n	800893a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	3324      	adds	r3, #36	; 0x24
 8008924:	2100      	movs	r1, #0
 8008926:	4618      	mov	r0, r3
 8008928:	f001 fa3a 	bl	8009da0 <RCCEx_PLL3_Config>
 800892c:	4603      	mov	r3, r0
 800892e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8008930:	e003      	b.n	800893a <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008932:	2301      	movs	r3, #1
 8008934:	75fb      	strb	r3, [r7, #23]
      break;
 8008936:	e000      	b.n	800893a <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8008938:	bf00      	nop
    }

    if(ret == HAL_OK)
 800893a:	7dfb      	ldrb	r3, [r7, #23]
 800893c:	2b00      	cmp	r3, #0
 800893e:	d109      	bne.n	8008954 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8008940:	4b71      	ldr	r3, [pc, #452]	; (8008b08 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8008942:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008944:	f023 0207 	bic.w	r2, r3, #7
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800894c:	496e      	ldr	r1, [pc, #440]	; (8008b08 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800894e:	4313      	orrs	r3, r2
 8008950:	650b      	str	r3, [r1, #80]	; 0x50
 8008952:	e001      	b.n	8008958 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008954:	7dfb      	ldrb	r3, [r7, #23]
 8008956:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008960:	2b00      	cmp	r3, #0
 8008962:	d042      	beq.n	80089ea <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008968:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800896c:	d02b      	beq.n	80089c6 <HAL_RCCEx_PeriphCLKConfig+0x192>
 800896e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008972:	d825      	bhi.n	80089c0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8008974:	2bc0      	cmp	r3, #192	; 0xc0
 8008976:	d028      	beq.n	80089ca <HAL_RCCEx_PeriphCLKConfig+0x196>
 8008978:	2bc0      	cmp	r3, #192	; 0xc0
 800897a:	d821      	bhi.n	80089c0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 800897c:	2b80      	cmp	r3, #128	; 0x80
 800897e:	d016      	beq.n	80089ae <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8008980:	2b80      	cmp	r3, #128	; 0x80
 8008982:	d81d      	bhi.n	80089c0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8008984:	2b00      	cmp	r3, #0
 8008986:	d002      	beq.n	800898e <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8008988:	2b40      	cmp	r3, #64	; 0x40
 800898a:	d007      	beq.n	800899c <HAL_RCCEx_PeriphCLKConfig+0x168>
 800898c:	e018      	b.n	80089c0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800898e:	4b5e      	ldr	r3, [pc, #376]	; (8008b08 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8008990:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008992:	4a5d      	ldr	r2, [pc, #372]	; (8008b08 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8008994:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008998:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800899a:	e017      	b.n	80089cc <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	3304      	adds	r3, #4
 80089a0:	2100      	movs	r1, #0
 80089a2:	4618      	mov	r0, r3
 80089a4:	f001 f94a 	bl	8009c3c <RCCEx_PLL2_Config>
 80089a8:	4603      	mov	r3, r0
 80089aa:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80089ac:	e00e      	b.n	80089cc <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	3324      	adds	r3, #36	; 0x24
 80089b2:	2100      	movs	r1, #0
 80089b4:	4618      	mov	r0, r3
 80089b6:	f001 f9f3 	bl	8009da0 <RCCEx_PLL3_Config>
 80089ba:	4603      	mov	r3, r0
 80089bc:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80089be:	e005      	b.n	80089cc <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80089c0:	2301      	movs	r3, #1
 80089c2:	75fb      	strb	r3, [r7, #23]
      break;
 80089c4:	e002      	b.n	80089cc <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 80089c6:	bf00      	nop
 80089c8:	e000      	b.n	80089cc <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 80089ca:	bf00      	nop
    }

    if(ret == HAL_OK)
 80089cc:	7dfb      	ldrb	r3, [r7, #23]
 80089ce:	2b00      	cmp	r3, #0
 80089d0:	d109      	bne.n	80089e6 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80089d2:	4b4d      	ldr	r3, [pc, #308]	; (8008b08 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80089d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80089d6:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80089de:	494a      	ldr	r1, [pc, #296]	; (8008b08 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80089e0:	4313      	orrs	r3, r2
 80089e2:	650b      	str	r3, [r1, #80]	; 0x50
 80089e4:	e001      	b.n	80089ea <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80089e6:	7dfb      	ldrb	r3, [r7, #23]
 80089e8:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	681b      	ldr	r3, [r3, #0]
 80089ee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80089f2:	2b00      	cmp	r3, #0
 80089f4:	d049      	beq.n	8008a8a <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80089fc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008a00:	d030      	beq.n	8008a64 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8008a02:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008a06:	d82a      	bhi.n	8008a5e <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8008a08:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8008a0c:	d02c      	beq.n	8008a68 <HAL_RCCEx_PeriphCLKConfig+0x234>
 8008a0e:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8008a12:	d824      	bhi.n	8008a5e <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8008a14:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008a18:	d018      	beq.n	8008a4c <HAL_RCCEx_PeriphCLKConfig+0x218>
 8008a1a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008a1e:	d81e      	bhi.n	8008a5e <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8008a20:	2b00      	cmp	r3, #0
 8008a22:	d003      	beq.n	8008a2c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8008a24:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008a28:	d007      	beq.n	8008a3a <HAL_RCCEx_PeriphCLKConfig+0x206>
 8008a2a:	e018      	b.n	8008a5e <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008a2c:	4b36      	ldr	r3, [pc, #216]	; (8008b08 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8008a2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a30:	4a35      	ldr	r2, [pc, #212]	; (8008b08 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8008a32:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008a36:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8008a38:	e017      	b.n	8008a6a <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	3304      	adds	r3, #4
 8008a3e:	2100      	movs	r1, #0
 8008a40:	4618      	mov	r0, r3
 8008a42:	f001 f8fb 	bl	8009c3c <RCCEx_PLL2_Config>
 8008a46:	4603      	mov	r3, r0
 8008a48:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8008a4a:	e00e      	b.n	8008a6a <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	3324      	adds	r3, #36	; 0x24
 8008a50:	2100      	movs	r1, #0
 8008a52:	4618      	mov	r0, r3
 8008a54:	f001 f9a4 	bl	8009da0 <RCCEx_PLL3_Config>
 8008a58:	4603      	mov	r3, r0
 8008a5a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8008a5c:	e005      	b.n	8008a6a <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8008a5e:	2301      	movs	r3, #1
 8008a60:	75fb      	strb	r3, [r7, #23]
      break;
 8008a62:	e002      	b.n	8008a6a <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8008a64:	bf00      	nop
 8008a66:	e000      	b.n	8008a6a <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8008a68:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008a6a:	7dfb      	ldrb	r3, [r7, #23]
 8008a6c:	2b00      	cmp	r3, #0
 8008a6e:	d10a      	bne.n	8008a86 <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8008a70:	4b25      	ldr	r3, [pc, #148]	; (8008b08 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8008a72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008a74:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8008a7e:	4922      	ldr	r1, [pc, #136]	; (8008b08 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8008a80:	4313      	orrs	r3, r2
 8008a82:	658b      	str	r3, [r1, #88]	; 0x58
 8008a84:	e001      	b.n	8008a8a <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008a86:	7dfb      	ldrb	r3, [r7, #23]
 8008a88:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	681b      	ldr	r3, [r3, #0]
 8008a8e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008a92:	2b00      	cmp	r3, #0
 8008a94:	d04b      	beq.n	8008b2e <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8008a9c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008aa0:	d030      	beq.n	8008b04 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8008aa2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008aa6:	d82a      	bhi.n	8008afe <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8008aa8:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8008aac:	d02e      	beq.n	8008b0c <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 8008aae:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8008ab2:	d824      	bhi.n	8008afe <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8008ab4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008ab8:	d018      	beq.n	8008aec <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8008aba:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008abe:	d81e      	bhi.n	8008afe <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8008ac0:	2b00      	cmp	r3, #0
 8008ac2:	d003      	beq.n	8008acc <HAL_RCCEx_PeriphCLKConfig+0x298>
 8008ac4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008ac8:	d007      	beq.n	8008ada <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8008aca:	e018      	b.n	8008afe <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008acc:	4b0e      	ldr	r3, [pc, #56]	; (8008b08 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8008ace:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ad0:	4a0d      	ldr	r2, [pc, #52]	; (8008b08 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8008ad2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008ad6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8008ad8:	e019      	b.n	8008b0e <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	3304      	adds	r3, #4
 8008ade:	2100      	movs	r1, #0
 8008ae0:	4618      	mov	r0, r3
 8008ae2:	f001 f8ab 	bl	8009c3c <RCCEx_PLL2_Config>
 8008ae6:	4603      	mov	r3, r0
 8008ae8:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8008aea:	e010      	b.n	8008b0e <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	3324      	adds	r3, #36	; 0x24
 8008af0:	2100      	movs	r1, #0
 8008af2:	4618      	mov	r0, r3
 8008af4:	f001 f954 	bl	8009da0 <RCCEx_PLL3_Config>
 8008af8:	4603      	mov	r3, r0
 8008afa:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8008afc:	e007      	b.n	8008b0e <HAL_RCCEx_PeriphCLKConfig+0x2da>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8008afe:	2301      	movs	r3, #1
 8008b00:	75fb      	strb	r3, [r7, #23]
      break;
 8008b02:	e004      	b.n	8008b0e <HAL_RCCEx_PeriphCLKConfig+0x2da>
      break;
 8008b04:	bf00      	nop
 8008b06:	e002      	b.n	8008b0e <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8008b08:	58024400 	.word	0x58024400
      break;
 8008b0c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008b0e:	7dfb      	ldrb	r3, [r7, #23]
 8008b10:	2b00      	cmp	r3, #0
 8008b12:	d10a      	bne.n	8008b2a <HAL_RCCEx_PeriphCLKConfig+0x2f6>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8008b14:	4b99      	ldr	r3, [pc, #612]	; (8008d7c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8008b16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008b18:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8008b22:	4996      	ldr	r1, [pc, #600]	; (8008d7c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8008b24:	4313      	orrs	r3, r2
 8008b26:	658b      	str	r3, [r1, #88]	; 0x58
 8008b28:	e001      	b.n	8008b2e <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008b2a:	7dfb      	ldrb	r3, [r7, #23]
 8008b2c:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	681b      	ldr	r3, [r3, #0]
 8008b32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008b36:	2b00      	cmp	r3, #0
 8008b38:	d032      	beq.n	8008ba0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008b3e:	2b30      	cmp	r3, #48	; 0x30
 8008b40:	d01c      	beq.n	8008b7c <HAL_RCCEx_PeriphCLKConfig+0x348>
 8008b42:	2b30      	cmp	r3, #48	; 0x30
 8008b44:	d817      	bhi.n	8008b76 <HAL_RCCEx_PeriphCLKConfig+0x342>
 8008b46:	2b20      	cmp	r3, #32
 8008b48:	d00c      	beq.n	8008b64 <HAL_RCCEx_PeriphCLKConfig+0x330>
 8008b4a:	2b20      	cmp	r3, #32
 8008b4c:	d813      	bhi.n	8008b76 <HAL_RCCEx_PeriphCLKConfig+0x342>
 8008b4e:	2b00      	cmp	r3, #0
 8008b50:	d016      	beq.n	8008b80 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 8008b52:	2b10      	cmp	r3, #16
 8008b54:	d10f      	bne.n	8008b76 <HAL_RCCEx_PeriphCLKConfig+0x342>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008b56:	4b89      	ldr	r3, [pc, #548]	; (8008d7c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8008b58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b5a:	4a88      	ldr	r2, [pc, #544]	; (8008d7c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8008b5c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008b60:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8008b62:	e00e      	b.n	8008b82 <HAL_RCCEx_PeriphCLKConfig+0x34e>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	3304      	adds	r3, #4
 8008b68:	2102      	movs	r1, #2
 8008b6a:	4618      	mov	r0, r3
 8008b6c:	f001 f866 	bl	8009c3c <RCCEx_PLL2_Config>
 8008b70:	4603      	mov	r3, r0
 8008b72:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8008b74:	e005      	b.n	8008b82 <HAL_RCCEx_PeriphCLKConfig+0x34e>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8008b76:	2301      	movs	r3, #1
 8008b78:	75fb      	strb	r3, [r7, #23]
      break;
 8008b7a:	e002      	b.n	8008b82 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8008b7c:	bf00      	nop
 8008b7e:	e000      	b.n	8008b82 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8008b80:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008b82:	7dfb      	ldrb	r3, [r7, #23]
 8008b84:	2b00      	cmp	r3, #0
 8008b86:	d109      	bne.n	8008b9c <HAL_RCCEx_PeriphCLKConfig+0x368>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8008b88:	4b7c      	ldr	r3, [pc, #496]	; (8008d7c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8008b8a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008b8c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008b94:	4979      	ldr	r1, [pc, #484]	; (8008d7c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8008b96:	4313      	orrs	r3, r2
 8008b98:	64cb      	str	r3, [r1, #76]	; 0x4c
 8008b9a:	e001      	b.n	8008ba0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008b9c:	7dfb      	ldrb	r3, [r7, #23]
 8008b9e:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	681b      	ldr	r3, [r3, #0]
 8008ba4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008ba8:	2b00      	cmp	r3, #0
 8008baa:	d047      	beq.n	8008c3c <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008bb0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008bb4:	d030      	beq.n	8008c18 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8008bb6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008bba:	d82a      	bhi.n	8008c12 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8008bbc:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008bc0:	d02c      	beq.n	8008c1c <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8008bc2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008bc6:	d824      	bhi.n	8008c12 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8008bc8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008bcc:	d018      	beq.n	8008c00 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 8008bce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008bd2:	d81e      	bhi.n	8008c12 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8008bd4:	2b00      	cmp	r3, #0
 8008bd6:	d003      	beq.n	8008be0 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 8008bd8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008bdc:	d007      	beq.n	8008bee <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 8008bde:	e018      	b.n	8008c12 <HAL_RCCEx_PeriphCLKConfig+0x3de>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008be0:	4b66      	ldr	r3, [pc, #408]	; (8008d7c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8008be2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008be4:	4a65      	ldr	r2, [pc, #404]	; (8008d7c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8008be6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008bea:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8008bec:	e017      	b.n	8008c1e <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	3304      	adds	r3, #4
 8008bf2:	2100      	movs	r1, #0
 8008bf4:	4618      	mov	r0, r3
 8008bf6:	f001 f821 	bl	8009c3c <RCCEx_PLL2_Config>
 8008bfa:	4603      	mov	r3, r0
 8008bfc:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8008bfe:	e00e      	b.n	8008c1e <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	3324      	adds	r3, #36	; 0x24
 8008c04:	2100      	movs	r1, #0
 8008c06:	4618      	mov	r0, r3
 8008c08:	f001 f8ca 	bl	8009da0 <RCCEx_PLL3_Config>
 8008c0c:	4603      	mov	r3, r0
 8008c0e:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8008c10:	e005      	b.n	8008c1e <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008c12:	2301      	movs	r3, #1
 8008c14:	75fb      	strb	r3, [r7, #23]
      break;
 8008c16:	e002      	b.n	8008c1e <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8008c18:	bf00      	nop
 8008c1a:	e000      	b.n	8008c1e <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8008c1c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008c1e:	7dfb      	ldrb	r3, [r7, #23]
 8008c20:	2b00      	cmp	r3, #0
 8008c22:	d109      	bne.n	8008c38 <HAL_RCCEx_PeriphCLKConfig+0x404>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8008c24:	4b55      	ldr	r3, [pc, #340]	; (8008d7c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8008c26:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008c28:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008c30:	4952      	ldr	r1, [pc, #328]	; (8008d7c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8008c32:	4313      	orrs	r3, r2
 8008c34:	650b      	str	r3, [r1, #80]	; 0x50
 8008c36:	e001      	b.n	8008c3c <HAL_RCCEx_PeriphCLKConfig+0x408>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008c38:	7dfb      	ldrb	r3, [r7, #23]
 8008c3a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	681b      	ldr	r3, [r3, #0]
 8008c40:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008c44:	2b00      	cmp	r3, #0
 8008c46:	d049      	beq.n	8008cdc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008c4c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008c50:	d02e      	beq.n	8008cb0 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8008c52:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008c56:	d828      	bhi.n	8008caa <HAL_RCCEx_PeriphCLKConfig+0x476>
 8008c58:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008c5c:	d02a      	beq.n	8008cb4 <HAL_RCCEx_PeriphCLKConfig+0x480>
 8008c5e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008c62:	d822      	bhi.n	8008caa <HAL_RCCEx_PeriphCLKConfig+0x476>
 8008c64:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8008c68:	d026      	beq.n	8008cb8 <HAL_RCCEx_PeriphCLKConfig+0x484>
 8008c6a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8008c6e:	d81c      	bhi.n	8008caa <HAL_RCCEx_PeriphCLKConfig+0x476>
 8008c70:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008c74:	d010      	beq.n	8008c98 <HAL_RCCEx_PeriphCLKConfig+0x464>
 8008c76:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008c7a:	d816      	bhi.n	8008caa <HAL_RCCEx_PeriphCLKConfig+0x476>
 8008c7c:	2b00      	cmp	r3, #0
 8008c7e:	d01d      	beq.n	8008cbc <HAL_RCCEx_PeriphCLKConfig+0x488>
 8008c80:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008c84:	d111      	bne.n	8008caa <HAL_RCCEx_PeriphCLKConfig+0x476>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	3304      	adds	r3, #4
 8008c8a:	2101      	movs	r1, #1
 8008c8c:	4618      	mov	r0, r3
 8008c8e:	f000 ffd5 	bl	8009c3c <RCCEx_PLL2_Config>
 8008c92:	4603      	mov	r3, r0
 8008c94:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8008c96:	e012      	b.n	8008cbe <HAL_RCCEx_PeriphCLKConfig+0x48a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	3324      	adds	r3, #36	; 0x24
 8008c9c:	2101      	movs	r1, #1
 8008c9e:	4618      	mov	r0, r3
 8008ca0:	f001 f87e 	bl	8009da0 <RCCEx_PLL3_Config>
 8008ca4:	4603      	mov	r3, r0
 8008ca6:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8008ca8:	e009      	b.n	8008cbe <HAL_RCCEx_PeriphCLKConfig+0x48a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008caa:	2301      	movs	r3, #1
 8008cac:	75fb      	strb	r3, [r7, #23]
      break;
 8008cae:	e006      	b.n	8008cbe <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8008cb0:	bf00      	nop
 8008cb2:	e004      	b.n	8008cbe <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8008cb4:	bf00      	nop
 8008cb6:	e002      	b.n	8008cbe <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8008cb8:	bf00      	nop
 8008cba:	e000      	b.n	8008cbe <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8008cbc:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008cbe:	7dfb      	ldrb	r3, [r7, #23]
 8008cc0:	2b00      	cmp	r3, #0
 8008cc2:	d109      	bne.n	8008cd8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8008cc4:	4b2d      	ldr	r3, [pc, #180]	; (8008d7c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8008cc6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008cc8:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008cd0:	492a      	ldr	r1, [pc, #168]	; (8008d7c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8008cd2:	4313      	orrs	r3, r2
 8008cd4:	650b      	str	r3, [r1, #80]	; 0x50
 8008cd6:	e001      	b.n	8008cdc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008cd8:	7dfb      	ldrb	r3, [r7, #23]
 8008cda:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	681b      	ldr	r3, [r3, #0]
 8008ce0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008ce4:	2b00      	cmp	r3, #0
 8008ce6:	d04d      	beq.n	8008d84 <HAL_RCCEx_PeriphCLKConfig+0x550>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8008cee:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008cf2:	d02e      	beq.n	8008d52 <HAL_RCCEx_PeriphCLKConfig+0x51e>
 8008cf4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008cf8:	d828      	bhi.n	8008d4c <HAL_RCCEx_PeriphCLKConfig+0x518>
 8008cfa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008cfe:	d02a      	beq.n	8008d56 <HAL_RCCEx_PeriphCLKConfig+0x522>
 8008d00:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008d04:	d822      	bhi.n	8008d4c <HAL_RCCEx_PeriphCLKConfig+0x518>
 8008d06:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008d0a:	d026      	beq.n	8008d5a <HAL_RCCEx_PeriphCLKConfig+0x526>
 8008d0c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008d10:	d81c      	bhi.n	8008d4c <HAL_RCCEx_PeriphCLKConfig+0x518>
 8008d12:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008d16:	d010      	beq.n	8008d3a <HAL_RCCEx_PeriphCLKConfig+0x506>
 8008d18:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008d1c:	d816      	bhi.n	8008d4c <HAL_RCCEx_PeriphCLKConfig+0x518>
 8008d1e:	2b00      	cmp	r3, #0
 8008d20:	d01d      	beq.n	8008d5e <HAL_RCCEx_PeriphCLKConfig+0x52a>
 8008d22:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008d26:	d111      	bne.n	8008d4c <HAL_RCCEx_PeriphCLKConfig+0x518>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	3304      	adds	r3, #4
 8008d2c:	2101      	movs	r1, #1
 8008d2e:	4618      	mov	r0, r3
 8008d30:	f000 ff84 	bl	8009c3c <RCCEx_PLL2_Config>
 8008d34:	4603      	mov	r3, r0
 8008d36:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8008d38:	e012      	b.n	8008d60 <HAL_RCCEx_PeriphCLKConfig+0x52c>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	3324      	adds	r3, #36	; 0x24
 8008d3e:	2101      	movs	r1, #1
 8008d40:	4618      	mov	r0, r3
 8008d42:	f001 f82d 	bl	8009da0 <RCCEx_PLL3_Config>
 8008d46:	4603      	mov	r3, r0
 8008d48:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8008d4a:	e009      	b.n	8008d60 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8008d4c:	2301      	movs	r3, #1
 8008d4e:	75fb      	strb	r3, [r7, #23]
      break;
 8008d50:	e006      	b.n	8008d60 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8008d52:	bf00      	nop
 8008d54:	e004      	b.n	8008d60 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8008d56:	bf00      	nop
 8008d58:	e002      	b.n	8008d60 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8008d5a:	bf00      	nop
 8008d5c:	e000      	b.n	8008d60 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8008d5e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008d60:	7dfb      	ldrb	r3, [r7, #23]
 8008d62:	2b00      	cmp	r3, #0
 8008d64:	d10c      	bne.n	8008d80 <HAL_RCCEx_PeriphCLKConfig+0x54c>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8008d66:	4b05      	ldr	r3, [pc, #20]	; (8008d7c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8008d68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008d6a:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8008d74:	4901      	ldr	r1, [pc, #4]	; (8008d7c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8008d76:	4313      	orrs	r3, r2
 8008d78:	658b      	str	r3, [r1, #88]	; 0x58
 8008d7a:	e003      	b.n	8008d84 <HAL_RCCEx_PeriphCLKConfig+0x550>
 8008d7c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008d80:	7dfb      	ldrb	r3, [r7, #23]
 8008d82:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	681b      	ldr	r3, [r3, #0]
 8008d88:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008d8c:	2b00      	cmp	r3, #0
 8008d8e:	d02f      	beq.n	8008df0 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008d94:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008d98:	d00e      	beq.n	8008db8 <HAL_RCCEx_PeriphCLKConfig+0x584>
 8008d9a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008d9e:	d814      	bhi.n	8008dca <HAL_RCCEx_PeriphCLKConfig+0x596>
 8008da0:	2b00      	cmp	r3, #0
 8008da2:	d015      	beq.n	8008dd0 <HAL_RCCEx_PeriphCLKConfig+0x59c>
 8008da4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008da8:	d10f      	bne.n	8008dca <HAL_RCCEx_PeriphCLKConfig+0x596>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008daa:	4baf      	ldr	r3, [pc, #700]	; (8009068 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8008dac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008dae:	4aae      	ldr	r2, [pc, #696]	; (8009068 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8008db0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008db4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8008db6:	e00c      	b.n	8008dd2 <HAL_RCCEx_PeriphCLKConfig+0x59e>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	3304      	adds	r3, #4
 8008dbc:	2101      	movs	r1, #1
 8008dbe:	4618      	mov	r0, r3
 8008dc0:	f000 ff3c 	bl	8009c3c <RCCEx_PLL2_Config>
 8008dc4:	4603      	mov	r3, r0
 8008dc6:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8008dc8:	e003      	b.n	8008dd2 <HAL_RCCEx_PeriphCLKConfig+0x59e>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008dca:	2301      	movs	r3, #1
 8008dcc:	75fb      	strb	r3, [r7, #23]
      break;
 8008dce:	e000      	b.n	8008dd2 <HAL_RCCEx_PeriphCLKConfig+0x59e>
      break;
 8008dd0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008dd2:	7dfb      	ldrb	r3, [r7, #23]
 8008dd4:	2b00      	cmp	r3, #0
 8008dd6:	d109      	bne.n	8008dec <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8008dd8:	4ba3      	ldr	r3, [pc, #652]	; (8009068 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8008dda:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008ddc:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008de4:	49a0      	ldr	r1, [pc, #640]	; (8009068 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8008de6:	4313      	orrs	r3, r2
 8008de8:	650b      	str	r3, [r1, #80]	; 0x50
 8008dea:	e001      	b.n	8008df0 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008dec:	7dfb      	ldrb	r3, [r7, #23]
 8008dee:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	681b      	ldr	r3, [r3, #0]
 8008df4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008df8:	2b00      	cmp	r3, #0
 8008dfa:	d032      	beq.n	8008e62 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008e00:	2b03      	cmp	r3, #3
 8008e02:	d81b      	bhi.n	8008e3c <HAL_RCCEx_PeriphCLKConfig+0x608>
 8008e04:	a201      	add	r2, pc, #4	; (adr r2, 8008e0c <HAL_RCCEx_PeriphCLKConfig+0x5d8>)
 8008e06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e0a:	bf00      	nop
 8008e0c:	08008e43 	.word	0x08008e43
 8008e10:	08008e1d 	.word	0x08008e1d
 8008e14:	08008e2b 	.word	0x08008e2b
 8008e18:	08008e43 	.word	0x08008e43
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008e1c:	4b92      	ldr	r3, [pc, #584]	; (8009068 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8008e1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e20:	4a91      	ldr	r2, [pc, #580]	; (8009068 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8008e22:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008e26:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8008e28:	e00c      	b.n	8008e44 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	3304      	adds	r3, #4
 8008e2e:	2102      	movs	r1, #2
 8008e30:	4618      	mov	r0, r3
 8008e32:	f000 ff03 	bl	8009c3c <RCCEx_PLL2_Config>
 8008e36:	4603      	mov	r3, r0
 8008e38:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8008e3a:	e003      	b.n	8008e44 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8008e3c:	2301      	movs	r3, #1
 8008e3e:	75fb      	strb	r3, [r7, #23]
      break;
 8008e40:	e000      	b.n	8008e44 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 8008e42:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008e44:	7dfb      	ldrb	r3, [r7, #23]
 8008e46:	2b00      	cmp	r3, #0
 8008e48:	d109      	bne.n	8008e5e <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8008e4a:	4b87      	ldr	r3, [pc, #540]	; (8009068 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8008e4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008e4e:	f023 0203 	bic.w	r2, r3, #3
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008e56:	4984      	ldr	r1, [pc, #528]	; (8009068 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8008e58:	4313      	orrs	r3, r2
 8008e5a:	64cb      	str	r3, [r1, #76]	; 0x4c
 8008e5c:	e001      	b.n	8008e62 <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008e5e:	7dfb      	ldrb	r3, [r7, #23]
 8008e60:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	681b      	ldr	r3, [r3, #0]
 8008e66:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008e6a:	2b00      	cmp	r3, #0
 8008e6c:	f000 8086 	beq.w	8008f7c <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008e70:	4b7e      	ldr	r3, [pc, #504]	; (800906c <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8008e72:	681b      	ldr	r3, [r3, #0]
 8008e74:	4a7d      	ldr	r2, [pc, #500]	; (800906c <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8008e76:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008e7a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8008e7c:	f7fd fc08 	bl	8006690 <HAL_GetTick>
 8008e80:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008e82:	e009      	b.n	8008e98 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008e84:	f7fd fc04 	bl	8006690 <HAL_GetTick>
 8008e88:	4602      	mov	r2, r0
 8008e8a:	693b      	ldr	r3, [r7, #16]
 8008e8c:	1ad3      	subs	r3, r2, r3
 8008e8e:	2b64      	cmp	r3, #100	; 0x64
 8008e90:	d902      	bls.n	8008e98 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 8008e92:	2303      	movs	r3, #3
 8008e94:	75fb      	strb	r3, [r7, #23]
        break;
 8008e96:	e005      	b.n	8008ea4 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008e98:	4b74      	ldr	r3, [pc, #464]	; (800906c <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8008e9a:	681b      	ldr	r3, [r3, #0]
 8008e9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008ea0:	2b00      	cmp	r3, #0
 8008ea2:	d0ef      	beq.n	8008e84 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8008ea4:	7dfb      	ldrb	r3, [r7, #23]
 8008ea6:	2b00      	cmp	r3, #0
 8008ea8:	d166      	bne.n	8008f78 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8008eaa:	4b6f      	ldr	r3, [pc, #444]	; (8009068 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8008eac:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008eb4:	4053      	eors	r3, r2
 8008eb6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008eba:	2b00      	cmp	r3, #0
 8008ebc:	d013      	beq.n	8008ee6 <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8008ebe:	4b6a      	ldr	r3, [pc, #424]	; (8009068 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8008ec0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008ec2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008ec6:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8008ec8:	4b67      	ldr	r3, [pc, #412]	; (8009068 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8008eca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008ecc:	4a66      	ldr	r2, [pc, #408]	; (8009068 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8008ece:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008ed2:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8008ed4:	4b64      	ldr	r3, [pc, #400]	; (8009068 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8008ed6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008ed8:	4a63      	ldr	r2, [pc, #396]	; (8009068 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8008eda:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008ede:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8008ee0:	4a61      	ldr	r2, [pc, #388]	; (8009068 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8008ee2:	68fb      	ldr	r3, [r7, #12]
 8008ee4:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008eec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008ef0:	d115      	bne.n	8008f1e <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008ef2:	f7fd fbcd 	bl	8006690 <HAL_GetTick>
 8008ef6:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008ef8:	e00b      	b.n	8008f12 <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008efa:	f7fd fbc9 	bl	8006690 <HAL_GetTick>
 8008efe:	4602      	mov	r2, r0
 8008f00:	693b      	ldr	r3, [r7, #16]
 8008f02:	1ad3      	subs	r3, r2, r3
 8008f04:	f241 3288 	movw	r2, #5000	; 0x1388
 8008f08:	4293      	cmp	r3, r2
 8008f0a:	d902      	bls.n	8008f12 <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8008f0c:	2303      	movs	r3, #3
 8008f0e:	75fb      	strb	r3, [r7, #23]
            break;
 8008f10:	e005      	b.n	8008f1e <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008f12:	4b55      	ldr	r3, [pc, #340]	; (8009068 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8008f14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008f16:	f003 0302 	and.w	r3, r3, #2
 8008f1a:	2b00      	cmp	r3, #0
 8008f1c:	d0ed      	beq.n	8008efa <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 8008f1e:	7dfb      	ldrb	r3, [r7, #23]
 8008f20:	2b00      	cmp	r3, #0
 8008f22:	d126      	bne.n	8008f72 <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008f2a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008f2e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008f32:	d10d      	bne.n	8008f50 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 8008f34:	4b4c      	ldr	r3, [pc, #304]	; (8009068 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8008f36:	691b      	ldr	r3, [r3, #16]
 8008f38:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008f42:	0919      	lsrs	r1, r3, #4
 8008f44:	4b4a      	ldr	r3, [pc, #296]	; (8009070 <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 8008f46:	400b      	ands	r3, r1
 8008f48:	4947      	ldr	r1, [pc, #284]	; (8009068 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8008f4a:	4313      	orrs	r3, r2
 8008f4c:	610b      	str	r3, [r1, #16]
 8008f4e:	e005      	b.n	8008f5c <HAL_RCCEx_PeriphCLKConfig+0x728>
 8008f50:	4b45      	ldr	r3, [pc, #276]	; (8009068 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8008f52:	691b      	ldr	r3, [r3, #16]
 8008f54:	4a44      	ldr	r2, [pc, #272]	; (8009068 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8008f56:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8008f5a:	6113      	str	r3, [r2, #16]
 8008f5c:	4b42      	ldr	r3, [pc, #264]	; (8009068 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8008f5e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008f66:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008f6a:	493f      	ldr	r1, [pc, #252]	; (8009068 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8008f6c:	4313      	orrs	r3, r2
 8008f6e:	670b      	str	r3, [r1, #112]	; 0x70
 8008f70:	e004      	b.n	8008f7c <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8008f72:	7dfb      	ldrb	r3, [r7, #23]
 8008f74:	75bb      	strb	r3, [r7, #22]
 8008f76:	e001      	b.n	8008f7c <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008f78:	7dfb      	ldrb	r3, [r7, #23]
 8008f7a:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	681b      	ldr	r3, [r3, #0]
 8008f80:	f003 0301 	and.w	r3, r3, #1
 8008f84:	2b00      	cmp	r3, #0
 8008f86:	f000 8085 	beq.w	8009094 <HAL_RCCEx_PeriphCLKConfig+0x860>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008f8e:	2b28      	cmp	r3, #40	; 0x28
 8008f90:	d866      	bhi.n	8009060 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 8008f92:	a201      	add	r2, pc, #4	; (adr r2, 8008f98 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 8008f94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f98:	08009075 	.word	0x08009075
 8008f9c:	08009061 	.word	0x08009061
 8008fa0:	08009061 	.word	0x08009061
 8008fa4:	08009061 	.word	0x08009061
 8008fa8:	08009061 	.word	0x08009061
 8008fac:	08009061 	.word	0x08009061
 8008fb0:	08009061 	.word	0x08009061
 8008fb4:	08009061 	.word	0x08009061
 8008fb8:	0800903d 	.word	0x0800903d
 8008fbc:	08009061 	.word	0x08009061
 8008fc0:	08009061 	.word	0x08009061
 8008fc4:	08009061 	.word	0x08009061
 8008fc8:	08009061 	.word	0x08009061
 8008fcc:	08009061 	.word	0x08009061
 8008fd0:	08009061 	.word	0x08009061
 8008fd4:	08009061 	.word	0x08009061
 8008fd8:	0800904f 	.word	0x0800904f
 8008fdc:	08009061 	.word	0x08009061
 8008fe0:	08009061 	.word	0x08009061
 8008fe4:	08009061 	.word	0x08009061
 8008fe8:	08009061 	.word	0x08009061
 8008fec:	08009061 	.word	0x08009061
 8008ff0:	08009061 	.word	0x08009061
 8008ff4:	08009061 	.word	0x08009061
 8008ff8:	08009075 	.word	0x08009075
 8008ffc:	08009061 	.word	0x08009061
 8009000:	08009061 	.word	0x08009061
 8009004:	08009061 	.word	0x08009061
 8009008:	08009061 	.word	0x08009061
 800900c:	08009061 	.word	0x08009061
 8009010:	08009061 	.word	0x08009061
 8009014:	08009061 	.word	0x08009061
 8009018:	08009075 	.word	0x08009075
 800901c:	08009061 	.word	0x08009061
 8009020:	08009061 	.word	0x08009061
 8009024:	08009061 	.word	0x08009061
 8009028:	08009061 	.word	0x08009061
 800902c:	08009061 	.word	0x08009061
 8009030:	08009061 	.word	0x08009061
 8009034:	08009061 	.word	0x08009061
 8009038:	08009075 	.word	0x08009075
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	3304      	adds	r3, #4
 8009040:	2101      	movs	r1, #1
 8009042:	4618      	mov	r0, r3
 8009044:	f000 fdfa 	bl	8009c3c <RCCEx_PLL2_Config>
 8009048:	4603      	mov	r3, r0
 800904a:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800904c:	e013      	b.n	8009076 <HAL_RCCEx_PeriphCLKConfig+0x842>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	3324      	adds	r3, #36	; 0x24
 8009052:	2101      	movs	r1, #1
 8009054:	4618      	mov	r0, r3
 8009056:	f000 fea3 	bl	8009da0 <RCCEx_PLL3_Config>
 800905a:	4603      	mov	r3, r0
 800905c:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800905e:	e00a      	b.n	8009076 <HAL_RCCEx_PeriphCLKConfig+0x842>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009060:	2301      	movs	r3, #1
 8009062:	75fb      	strb	r3, [r7, #23]
      break;
 8009064:	e007      	b.n	8009076 <HAL_RCCEx_PeriphCLKConfig+0x842>
 8009066:	bf00      	nop
 8009068:	58024400 	.word	0x58024400
 800906c:	58024800 	.word	0x58024800
 8009070:	00ffffcf 	.word	0x00ffffcf
      break;
 8009074:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009076:	7dfb      	ldrb	r3, [r7, #23]
 8009078:	2b00      	cmp	r3, #0
 800907a:	d109      	bne.n	8009090 <HAL_RCCEx_PeriphCLKConfig+0x85c>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800907c:	4b96      	ldr	r3, [pc, #600]	; (80092d8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800907e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009080:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009088:	4993      	ldr	r1, [pc, #588]	; (80092d8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800908a:	4313      	orrs	r3, r2
 800908c:	654b      	str	r3, [r1, #84]	; 0x54
 800908e:	e001      	b.n	8009094 <HAL_RCCEx_PeriphCLKConfig+0x860>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009090:	7dfb      	ldrb	r3, [r7, #23]
 8009092:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	681b      	ldr	r3, [r3, #0]
 8009098:	f003 0302 	and.w	r3, r3, #2
 800909c:	2b00      	cmp	r3, #0
 800909e:	d038      	beq.n	8009112 <HAL_RCCEx_PeriphCLKConfig+0x8de>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80090a4:	2b05      	cmp	r3, #5
 80090a6:	d821      	bhi.n	80090ec <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 80090a8:	a201      	add	r2, pc, #4	; (adr r2, 80090b0 <HAL_RCCEx_PeriphCLKConfig+0x87c>)
 80090aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80090ae:	bf00      	nop
 80090b0:	080090f3 	.word	0x080090f3
 80090b4:	080090c9 	.word	0x080090c9
 80090b8:	080090db 	.word	0x080090db
 80090bc:	080090f3 	.word	0x080090f3
 80090c0:	080090f3 	.word	0x080090f3
 80090c4:	080090f3 	.word	0x080090f3
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	3304      	adds	r3, #4
 80090cc:	2101      	movs	r1, #1
 80090ce:	4618      	mov	r0, r3
 80090d0:	f000 fdb4 	bl	8009c3c <RCCEx_PLL2_Config>
 80090d4:	4603      	mov	r3, r0
 80090d6:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80090d8:	e00c      	b.n	80090f4 <HAL_RCCEx_PeriphCLKConfig+0x8c0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	3324      	adds	r3, #36	; 0x24
 80090de:	2101      	movs	r1, #1
 80090e0:	4618      	mov	r0, r3
 80090e2:	f000 fe5d 	bl	8009da0 <RCCEx_PLL3_Config>
 80090e6:	4603      	mov	r3, r0
 80090e8:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80090ea:	e003      	b.n	80090f4 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80090ec:	2301      	movs	r3, #1
 80090ee:	75fb      	strb	r3, [r7, #23]
      break;
 80090f0:	e000      	b.n	80090f4 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      break;
 80090f2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80090f4:	7dfb      	ldrb	r3, [r7, #23]
 80090f6:	2b00      	cmp	r3, #0
 80090f8:	d109      	bne.n	800910e <HAL_RCCEx_PeriphCLKConfig+0x8da>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80090fa:	4b77      	ldr	r3, [pc, #476]	; (80092d8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80090fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80090fe:	f023 0207 	bic.w	r2, r3, #7
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009106:	4974      	ldr	r1, [pc, #464]	; (80092d8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8009108:	4313      	orrs	r3, r2
 800910a:	654b      	str	r3, [r1, #84]	; 0x54
 800910c:	e001      	b.n	8009112 <HAL_RCCEx_PeriphCLKConfig+0x8de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800910e:	7dfb      	ldrb	r3, [r7, #23]
 8009110:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	681b      	ldr	r3, [r3, #0]
 8009116:	f003 0304 	and.w	r3, r3, #4
 800911a:	2b00      	cmp	r3, #0
 800911c:	d03a      	beq.n	8009194 <HAL_RCCEx_PeriphCLKConfig+0x960>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009124:	2b05      	cmp	r3, #5
 8009126:	d821      	bhi.n	800916c <HAL_RCCEx_PeriphCLKConfig+0x938>
 8009128:	a201      	add	r2, pc, #4	; (adr r2, 8009130 <HAL_RCCEx_PeriphCLKConfig+0x8fc>)
 800912a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800912e:	bf00      	nop
 8009130:	08009173 	.word	0x08009173
 8009134:	08009149 	.word	0x08009149
 8009138:	0800915b 	.word	0x0800915b
 800913c:	08009173 	.word	0x08009173
 8009140:	08009173 	.word	0x08009173
 8009144:	08009173 	.word	0x08009173
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	3304      	adds	r3, #4
 800914c:	2101      	movs	r1, #1
 800914e:	4618      	mov	r0, r3
 8009150:	f000 fd74 	bl	8009c3c <RCCEx_PLL2_Config>
 8009154:	4603      	mov	r3, r0
 8009156:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8009158:	e00c      	b.n	8009174 <HAL_RCCEx_PeriphCLKConfig+0x940>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	3324      	adds	r3, #36	; 0x24
 800915e:	2101      	movs	r1, #1
 8009160:	4618      	mov	r0, r3
 8009162:	f000 fe1d 	bl	8009da0 <RCCEx_PLL3_Config>
 8009166:	4603      	mov	r3, r0
 8009168:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800916a:	e003      	b.n	8009174 <HAL_RCCEx_PeriphCLKConfig+0x940>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800916c:	2301      	movs	r3, #1
 800916e:	75fb      	strb	r3, [r7, #23]
      break;
 8009170:	e000      	b.n	8009174 <HAL_RCCEx_PeriphCLKConfig+0x940>
      break;
 8009172:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009174:	7dfb      	ldrb	r3, [r7, #23]
 8009176:	2b00      	cmp	r3, #0
 8009178:	d10a      	bne.n	8009190 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800917a:	4b57      	ldr	r3, [pc, #348]	; (80092d8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800917c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800917e:	f023 0207 	bic.w	r2, r3, #7
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009188:	4953      	ldr	r1, [pc, #332]	; (80092d8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800918a:	4313      	orrs	r3, r2
 800918c:	658b      	str	r3, [r1, #88]	; 0x58
 800918e:	e001      	b.n	8009194 <HAL_RCCEx_PeriphCLKConfig+0x960>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009190:	7dfb      	ldrb	r3, [r7, #23]
 8009192:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	681b      	ldr	r3, [r3, #0]
 8009198:	f003 0320 	and.w	r3, r3, #32
 800919c:	2b00      	cmp	r3, #0
 800919e:	d04b      	beq.n	8009238 <HAL_RCCEx_PeriphCLKConfig+0xa04>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80091a6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80091aa:	d02e      	beq.n	800920a <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 80091ac:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80091b0:	d828      	bhi.n	8009204 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 80091b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80091b6:	d02a      	beq.n	800920e <HAL_RCCEx_PeriphCLKConfig+0x9da>
 80091b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80091bc:	d822      	bhi.n	8009204 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 80091be:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80091c2:	d026      	beq.n	8009212 <HAL_RCCEx_PeriphCLKConfig+0x9de>
 80091c4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80091c8:	d81c      	bhi.n	8009204 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 80091ca:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80091ce:	d010      	beq.n	80091f2 <HAL_RCCEx_PeriphCLKConfig+0x9be>
 80091d0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80091d4:	d816      	bhi.n	8009204 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 80091d6:	2b00      	cmp	r3, #0
 80091d8:	d01d      	beq.n	8009216 <HAL_RCCEx_PeriphCLKConfig+0x9e2>
 80091da:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80091de:	d111      	bne.n	8009204 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	3304      	adds	r3, #4
 80091e4:	2100      	movs	r1, #0
 80091e6:	4618      	mov	r0, r3
 80091e8:	f000 fd28 	bl	8009c3c <RCCEx_PLL2_Config>
 80091ec:	4603      	mov	r3, r0
 80091ee:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80091f0:	e012      	b.n	8009218 <HAL_RCCEx_PeriphCLKConfig+0x9e4>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	3324      	adds	r3, #36	; 0x24
 80091f6:	2102      	movs	r1, #2
 80091f8:	4618      	mov	r0, r3
 80091fa:	f000 fdd1 	bl	8009da0 <RCCEx_PLL3_Config>
 80091fe:	4603      	mov	r3, r0
 8009200:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8009202:	e009      	b.n	8009218 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009204:	2301      	movs	r3, #1
 8009206:	75fb      	strb	r3, [r7, #23]
      break;
 8009208:	e006      	b.n	8009218 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 800920a:	bf00      	nop
 800920c:	e004      	b.n	8009218 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 800920e:	bf00      	nop
 8009210:	e002      	b.n	8009218 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8009212:	bf00      	nop
 8009214:	e000      	b.n	8009218 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8009216:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009218:	7dfb      	ldrb	r3, [r7, #23]
 800921a:	2b00      	cmp	r3, #0
 800921c:	d10a      	bne.n	8009234 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800921e:	4b2e      	ldr	r3, [pc, #184]	; (80092d8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8009220:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009222:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800922c:	492a      	ldr	r1, [pc, #168]	; (80092d8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800922e:	4313      	orrs	r3, r2
 8009230:	654b      	str	r3, [r1, #84]	; 0x54
 8009232:	e001      	b.n	8009238 <HAL_RCCEx_PeriphCLKConfig+0xa04>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009234:	7dfb      	ldrb	r3, [r7, #23]
 8009236:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	681b      	ldr	r3, [r3, #0]
 800923c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009240:	2b00      	cmp	r3, #0
 8009242:	d04d      	beq.n	80092e0 <HAL_RCCEx_PeriphCLKConfig+0xaac>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800924a:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800924e:	d02e      	beq.n	80092ae <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8009250:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8009254:	d828      	bhi.n	80092a8 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8009256:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800925a:	d02a      	beq.n	80092b2 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 800925c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009260:	d822      	bhi.n	80092a8 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8009262:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009266:	d026      	beq.n	80092b6 <HAL_RCCEx_PeriphCLKConfig+0xa82>
 8009268:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800926c:	d81c      	bhi.n	80092a8 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 800926e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009272:	d010      	beq.n	8009296 <HAL_RCCEx_PeriphCLKConfig+0xa62>
 8009274:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009278:	d816      	bhi.n	80092a8 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 800927a:	2b00      	cmp	r3, #0
 800927c:	d01d      	beq.n	80092ba <HAL_RCCEx_PeriphCLKConfig+0xa86>
 800927e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009282:	d111      	bne.n	80092a8 <HAL_RCCEx_PeriphCLKConfig+0xa74>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	3304      	adds	r3, #4
 8009288:	2100      	movs	r1, #0
 800928a:	4618      	mov	r0, r3
 800928c:	f000 fcd6 	bl	8009c3c <RCCEx_PLL2_Config>
 8009290:	4603      	mov	r3, r0
 8009292:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8009294:	e012      	b.n	80092bc <HAL_RCCEx_PeriphCLKConfig+0xa88>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	3324      	adds	r3, #36	; 0x24
 800929a:	2102      	movs	r1, #2
 800929c:	4618      	mov	r0, r3
 800929e:	f000 fd7f 	bl	8009da0 <RCCEx_PLL3_Config>
 80092a2:	4603      	mov	r3, r0
 80092a4:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80092a6:	e009      	b.n	80092bc <HAL_RCCEx_PeriphCLKConfig+0xa88>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80092a8:	2301      	movs	r3, #1
 80092aa:	75fb      	strb	r3, [r7, #23]
      break;
 80092ac:	e006      	b.n	80092bc <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 80092ae:	bf00      	nop
 80092b0:	e004      	b.n	80092bc <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 80092b2:	bf00      	nop
 80092b4:	e002      	b.n	80092bc <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 80092b6:	bf00      	nop
 80092b8:	e000      	b.n	80092bc <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 80092ba:	bf00      	nop
    }

    if(ret == HAL_OK)
 80092bc:	7dfb      	ldrb	r3, [r7, #23]
 80092be:	2b00      	cmp	r3, #0
 80092c0:	d10c      	bne.n	80092dc <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80092c2:	4b05      	ldr	r3, [pc, #20]	; (80092d8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80092c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80092c6:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80092d0:	4901      	ldr	r1, [pc, #4]	; (80092d8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80092d2:	4313      	orrs	r3, r2
 80092d4:	658b      	str	r3, [r1, #88]	; 0x58
 80092d6:	e003      	b.n	80092e0 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 80092d8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80092dc:	7dfb      	ldrb	r3, [r7, #23]
 80092de:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	681b      	ldr	r3, [r3, #0]
 80092e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80092e8:	2b00      	cmp	r3, #0
 80092ea:	d04b      	beq.n	8009384 <HAL_RCCEx_PeriphCLKConfig+0xb50>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80092f2:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80092f6:	d02e      	beq.n	8009356 <HAL_RCCEx_PeriphCLKConfig+0xb22>
 80092f8:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80092fc:	d828      	bhi.n	8009350 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 80092fe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009302:	d02a      	beq.n	800935a <HAL_RCCEx_PeriphCLKConfig+0xb26>
 8009304:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009308:	d822      	bhi.n	8009350 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 800930a:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800930e:	d026      	beq.n	800935e <HAL_RCCEx_PeriphCLKConfig+0xb2a>
 8009310:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8009314:	d81c      	bhi.n	8009350 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8009316:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800931a:	d010      	beq.n	800933e <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 800931c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009320:	d816      	bhi.n	8009350 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8009322:	2b00      	cmp	r3, #0
 8009324:	d01d      	beq.n	8009362 <HAL_RCCEx_PeriphCLKConfig+0xb2e>
 8009326:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800932a:	d111      	bne.n	8009350 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	3304      	adds	r3, #4
 8009330:	2100      	movs	r1, #0
 8009332:	4618      	mov	r0, r3
 8009334:	f000 fc82 	bl	8009c3c <RCCEx_PLL2_Config>
 8009338:	4603      	mov	r3, r0
 800933a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800933c:	e012      	b.n	8009364 <HAL_RCCEx_PeriphCLKConfig+0xb30>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	3324      	adds	r3, #36	; 0x24
 8009342:	2102      	movs	r1, #2
 8009344:	4618      	mov	r0, r3
 8009346:	f000 fd2b 	bl	8009da0 <RCCEx_PLL3_Config>
 800934a:	4603      	mov	r3, r0
 800934c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800934e:	e009      	b.n	8009364 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009350:	2301      	movs	r3, #1
 8009352:	75fb      	strb	r3, [r7, #23]
      break;
 8009354:	e006      	b.n	8009364 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8009356:	bf00      	nop
 8009358:	e004      	b.n	8009364 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 800935a:	bf00      	nop
 800935c:	e002      	b.n	8009364 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 800935e:	bf00      	nop
 8009360:	e000      	b.n	8009364 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8009362:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009364:	7dfb      	ldrb	r3, [r7, #23]
 8009366:	2b00      	cmp	r3, #0
 8009368:	d10a      	bne.n	8009380 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800936a:	4b9d      	ldr	r3, [pc, #628]	; (80095e0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800936c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800936e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009378:	4999      	ldr	r1, [pc, #612]	; (80095e0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800937a:	4313      	orrs	r3, r2
 800937c:	658b      	str	r3, [r1, #88]	; 0x58
 800937e:	e001      	b.n	8009384 <HAL_RCCEx_PeriphCLKConfig+0xb50>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009380:	7dfb      	ldrb	r3, [r7, #23]
 8009382:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	681b      	ldr	r3, [r3, #0]
 8009388:	f003 0308 	and.w	r3, r3, #8
 800938c:	2b00      	cmp	r3, #0
 800938e:	d01a      	beq.n	80093c6 <HAL_RCCEx_PeriphCLKConfig+0xb92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009396:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800939a:	d10a      	bne.n	80093b2 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	3324      	adds	r3, #36	; 0x24
 80093a0:	2102      	movs	r1, #2
 80093a2:	4618      	mov	r0, r3
 80093a4:	f000 fcfc 	bl	8009da0 <RCCEx_PLL3_Config>
 80093a8:	4603      	mov	r3, r0
 80093aa:	2b00      	cmp	r3, #0
 80093ac:	d001      	beq.n	80093b2 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        {
          status = HAL_ERROR;
 80093ae:	2301      	movs	r3, #1
 80093b0:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80093b2:	4b8b      	ldr	r3, [pc, #556]	; (80095e0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80093b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80093b6:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80093c0:	4987      	ldr	r1, [pc, #540]	; (80095e0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80093c2:	4313      	orrs	r3, r2
 80093c4:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	681b      	ldr	r3, [r3, #0]
 80093ca:	f003 0310 	and.w	r3, r3, #16
 80093ce:	2b00      	cmp	r3, #0
 80093d0:	d01a      	beq.n	8009408 <HAL_RCCEx_PeriphCLKConfig+0xbd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80093d8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80093dc:	d10a      	bne.n	80093f4 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	3324      	adds	r3, #36	; 0x24
 80093e2:	2102      	movs	r1, #2
 80093e4:	4618      	mov	r0, r3
 80093e6:	f000 fcdb 	bl	8009da0 <RCCEx_PLL3_Config>
 80093ea:	4603      	mov	r3, r0
 80093ec:	2b00      	cmp	r3, #0
 80093ee:	d001      	beq.n	80093f4 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
      {
        status = HAL_ERROR;
 80093f0:	2301      	movs	r3, #1
 80093f2:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80093f4:	4b7a      	ldr	r3, [pc, #488]	; (80095e0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80093f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80093f8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009402:	4977      	ldr	r1, [pc, #476]	; (80095e0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009404:	4313      	orrs	r3, r2
 8009406:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	681b      	ldr	r3, [r3, #0]
 800940c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8009410:	2b00      	cmp	r3, #0
 8009412:	d034      	beq.n	800947e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800941a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800941e:	d01d      	beq.n	800945c <HAL_RCCEx_PeriphCLKConfig+0xc28>
 8009420:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009424:	d817      	bhi.n	8009456 <HAL_RCCEx_PeriphCLKConfig+0xc22>
 8009426:	2b00      	cmp	r3, #0
 8009428:	d003      	beq.n	8009432 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 800942a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800942e:	d009      	beq.n	8009444 <HAL_RCCEx_PeriphCLKConfig+0xc10>
 8009430:	e011      	b.n	8009456 <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	3304      	adds	r3, #4
 8009436:	2100      	movs	r1, #0
 8009438:	4618      	mov	r0, r3
 800943a:	f000 fbff 	bl	8009c3c <RCCEx_PLL2_Config>
 800943e:	4603      	mov	r3, r0
 8009440:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8009442:	e00c      	b.n	800945e <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	3324      	adds	r3, #36	; 0x24
 8009448:	2102      	movs	r1, #2
 800944a:	4618      	mov	r0, r3
 800944c:	f000 fca8 	bl	8009da0 <RCCEx_PLL3_Config>
 8009450:	4603      	mov	r3, r0
 8009452:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8009454:	e003      	b.n	800945e <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009456:	2301      	movs	r3, #1
 8009458:	75fb      	strb	r3, [r7, #23]
      break;
 800945a:	e000      	b.n	800945e <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 800945c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800945e:	7dfb      	ldrb	r3, [r7, #23]
 8009460:	2b00      	cmp	r3, #0
 8009462:	d10a      	bne.n	800947a <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8009464:	4b5e      	ldr	r3, [pc, #376]	; (80095e0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009466:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009468:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8009472:	495b      	ldr	r1, [pc, #364]	; (80095e0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009474:	4313      	orrs	r3, r2
 8009476:	658b      	str	r3, [r1, #88]	; 0x58
 8009478:	e001      	b.n	800947e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800947a:	7dfb      	ldrb	r3, [r7, #23]
 800947c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	681b      	ldr	r3, [r3, #0]
 8009482:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009486:	2b00      	cmp	r3, #0
 8009488:	d033      	beq.n	80094f2 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
  {

    switch(PeriphClkInit->UsbClockSelection)
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009490:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009494:	d01c      	beq.n	80094d0 <HAL_RCCEx_PeriphCLKConfig+0xc9c>
 8009496:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800949a:	d816      	bhi.n	80094ca <HAL_RCCEx_PeriphCLKConfig+0xc96>
 800949c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80094a0:	d003      	beq.n	80094aa <HAL_RCCEx_PeriphCLKConfig+0xc76>
 80094a2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80094a6:	d007      	beq.n	80094b8 <HAL_RCCEx_PeriphCLKConfig+0xc84>
 80094a8:	e00f      	b.n	80094ca <HAL_RCCEx_PeriphCLKConfig+0xc96>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80094aa:	4b4d      	ldr	r3, [pc, #308]	; (80095e0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80094ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80094ae:	4a4c      	ldr	r2, [pc, #304]	; (80095e0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80094b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80094b4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 80094b6:	e00c      	b.n	80094d2 <HAL_RCCEx_PeriphCLKConfig+0xc9e>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	3324      	adds	r3, #36	; 0x24
 80094bc:	2101      	movs	r1, #1
 80094be:	4618      	mov	r0, r3
 80094c0:	f000 fc6e 	bl	8009da0 <RCCEx_PLL3_Config>
 80094c4:	4603      	mov	r3, r0
 80094c6:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 80094c8:	e003      	b.n	80094d2 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80094ca:	2301      	movs	r3, #1
 80094cc:	75fb      	strb	r3, [r7, #23]
      break;
 80094ce:	e000      	b.n	80094d2 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      break;
 80094d0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80094d2:	7dfb      	ldrb	r3, [r7, #23]
 80094d4:	2b00      	cmp	r3, #0
 80094d6:	d10a      	bne.n	80094ee <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80094d8:	4b41      	ldr	r3, [pc, #260]	; (80095e0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80094da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80094dc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80094e6:	493e      	ldr	r1, [pc, #248]	; (80095e0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80094e8:	4313      	orrs	r3, r2
 80094ea:	654b      	str	r3, [r1, #84]	; 0x54
 80094ec:	e001      	b.n	80094f2 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80094ee:	7dfb      	ldrb	r3, [r7, #23]
 80094f0:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	681b      	ldr	r3, [r3, #0]
 80094f6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80094fa:	2b00      	cmp	r3, #0
 80094fc:	d029      	beq.n	8009552 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009502:	2b00      	cmp	r3, #0
 8009504:	d003      	beq.n	800950e <HAL_RCCEx_PeriphCLKConfig+0xcda>
 8009506:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800950a:	d007      	beq.n	800951c <HAL_RCCEx_PeriphCLKConfig+0xce8>
 800950c:	e00f      	b.n	800952e <HAL_RCCEx_PeriphCLKConfig+0xcfa>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800950e:	4b34      	ldr	r3, [pc, #208]	; (80095e0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009510:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009512:	4a33      	ldr	r2, [pc, #204]	; (80095e0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009514:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009518:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800951a:	e00b      	b.n	8009534 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	3304      	adds	r3, #4
 8009520:	2102      	movs	r1, #2
 8009522:	4618      	mov	r0, r3
 8009524:	f000 fb8a 	bl	8009c3c <RCCEx_PLL2_Config>
 8009528:	4603      	mov	r3, r0
 800952a:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800952c:	e002      	b.n	8009534 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    default:
      ret = HAL_ERROR;
 800952e:	2301      	movs	r3, #1
 8009530:	75fb      	strb	r3, [r7, #23]
      break;
 8009532:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009534:	7dfb      	ldrb	r3, [r7, #23]
 8009536:	2b00      	cmp	r3, #0
 8009538:	d109      	bne.n	800954e <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800953a:	4b29      	ldr	r3, [pc, #164]	; (80095e0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800953c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800953e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009546:	4926      	ldr	r1, [pc, #152]	; (80095e0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009548:	4313      	orrs	r3, r2
 800954a:	64cb      	str	r3, [r1, #76]	; 0x4c
 800954c:	e001      	b.n	8009552 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800954e:	7dfb      	ldrb	r3, [r7, #23]
 8009550:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	681b      	ldr	r3, [r3, #0]
 8009556:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800955a:	2b00      	cmp	r3, #0
 800955c:	d00a      	beq.n	8009574 <HAL_RCCEx_PeriphCLKConfig+0xd40>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	3324      	adds	r3, #36	; 0x24
 8009562:	2102      	movs	r1, #2
 8009564:	4618      	mov	r0, r3
 8009566:	f000 fc1b 	bl	8009da0 <RCCEx_PLL3_Config>
 800956a:	4603      	mov	r3, r0
 800956c:	2b00      	cmp	r3, #0
 800956e:	d001      	beq.n	8009574 <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      status=HAL_ERROR;
 8009570:	2301      	movs	r3, #1
 8009572:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	681b      	ldr	r3, [r3, #0]
 8009578:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800957c:	2b00      	cmp	r3, #0
 800957e:	d033      	beq.n	80095e8 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
  {

    switch(PeriphClkInit->RngClockSelection)
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009584:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009588:	d017      	beq.n	80095ba <HAL_RCCEx_PeriphCLKConfig+0xd86>
 800958a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800958e:	d811      	bhi.n	80095b4 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8009590:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009594:	d013      	beq.n	80095be <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 8009596:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800959a:	d80b      	bhi.n	80095b4 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 800959c:	2b00      	cmp	r3, #0
 800959e:	d010      	beq.n	80095c2 <HAL_RCCEx_PeriphCLKConfig+0xd8e>
 80095a0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80095a4:	d106      	bne.n	80095b4 <HAL_RCCEx_PeriphCLKConfig+0xd80>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80095a6:	4b0e      	ldr	r3, [pc, #56]	; (80095e0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80095a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80095aa:	4a0d      	ldr	r2, [pc, #52]	; (80095e0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80095ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80095b0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 80095b2:	e007      	b.n	80095c4 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80095b4:	2301      	movs	r3, #1
 80095b6:	75fb      	strb	r3, [r7, #23]
      break;
 80095b8:	e004      	b.n	80095c4 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 80095ba:	bf00      	nop
 80095bc:	e002      	b.n	80095c4 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 80095be:	bf00      	nop
 80095c0:	e000      	b.n	80095c4 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 80095c2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80095c4:	7dfb      	ldrb	r3, [r7, #23]
 80095c6:	2b00      	cmp	r3, #0
 80095c8:	d10c      	bne.n	80095e4 <HAL_RCCEx_PeriphCLKConfig+0xdb0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80095ca:	4b05      	ldr	r3, [pc, #20]	; (80095e0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80095cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80095ce:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80095d6:	4902      	ldr	r1, [pc, #8]	; (80095e0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80095d8:	4313      	orrs	r3, r2
 80095da:	654b      	str	r3, [r1, #84]	; 0x54
 80095dc:	e004      	b.n	80095e8 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
 80095de:	bf00      	nop
 80095e0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80095e4:	7dfb      	ldrb	r3, [r7, #23]
 80095e6:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	681b      	ldr	r3, [r3, #0]
 80095ec:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80095f0:	2b00      	cmp	r3, #0
 80095f2:	d008      	beq.n	8009606 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80095f4:	4b31      	ldr	r3, [pc, #196]	; (80096bc <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80095f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80095f8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009600:	492e      	ldr	r1, [pc, #184]	; (80096bc <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8009602:	4313      	orrs	r3, r2
 8009604:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	681b      	ldr	r3, [r3, #0]
 800960a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800960e:	2b00      	cmp	r3, #0
 8009610:	d009      	beq.n	8009626 <HAL_RCCEx_PeriphCLKConfig+0xdf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8009612:	4b2a      	ldr	r3, [pc, #168]	; (80096bc <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8009614:	691b      	ldr	r3, [r3, #16]
 8009616:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8009620:	4926      	ldr	r1, [pc, #152]	; (80096bc <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8009622:	4313      	orrs	r3, r2
 8009624:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	681b      	ldr	r3, [r3, #0]
 800962a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800962e:	2b00      	cmp	r3, #0
 8009630:	d008      	beq.n	8009644 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8009632:	4b22      	ldr	r3, [pc, #136]	; (80096bc <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8009634:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009636:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800963e:	491f      	ldr	r1, [pc, #124]	; (80096bc <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8009640:	4313      	orrs	r3, r2
 8009642:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	681b      	ldr	r3, [r3, #0]
 8009648:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800964c:	2b00      	cmp	r3, #0
 800964e:	d00d      	beq.n	800966c <HAL_RCCEx_PeriphCLKConfig+0xe38>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8009650:	4b1a      	ldr	r3, [pc, #104]	; (80096bc <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8009652:	691b      	ldr	r3, [r3, #16]
 8009654:	4a19      	ldr	r2, [pc, #100]	; (80096bc <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8009656:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800965a:	6113      	str	r3, [r2, #16]
 800965c:	4b17      	ldr	r3, [pc, #92]	; (80096bc <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800965e:	691a      	ldr	r2, [r3, #16]
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8009666:	4915      	ldr	r1, [pc, #84]	; (80096bc <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8009668:	4313      	orrs	r3, r2
 800966a:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	681b      	ldr	r3, [r3, #0]
 8009670:	2b00      	cmp	r3, #0
 8009672:	da08      	bge.n	8009686 <HAL_RCCEx_PeriphCLKConfig+0xe52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8009674:	4b11      	ldr	r3, [pc, #68]	; (80096bc <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8009676:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009678:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009680:	490e      	ldr	r1, [pc, #56]	; (80096bc <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8009682:	4313      	orrs	r3, r2
 8009684:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	681b      	ldr	r3, [r3, #0]
 800968a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800968e:	2b00      	cmp	r3, #0
 8009690:	d009      	beq.n	80096a6 <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8009692:	4b0a      	ldr	r3, [pc, #40]	; (80096bc <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8009694:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009696:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80096a0:	4906      	ldr	r1, [pc, #24]	; (80096bc <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80096a2:	4313      	orrs	r3, r2
 80096a4:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 80096a6:	7dbb      	ldrb	r3, [r7, #22]
 80096a8:	2b00      	cmp	r3, #0
 80096aa:	d101      	bne.n	80096b0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>
  {
    return HAL_OK;
 80096ac:	2300      	movs	r3, #0
 80096ae:	e000      	b.n	80096b2 <HAL_RCCEx_PeriphCLKConfig+0xe7e>
  }
  return HAL_ERROR;
 80096b0:	2301      	movs	r3, #1
}
 80096b2:	4618      	mov	r0, r3
 80096b4:	3718      	adds	r7, #24
 80096b6:	46bd      	mov	sp, r7
 80096b8:	bd80      	pop	{r7, pc}
 80096ba:	bf00      	nop
 80096bc:	58024400 	.word	0x58024400

080096c0 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80096c0:	b580      	push	{r7, lr}
 80096c2:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80096c4:	f7ff f85a 	bl	800877c <HAL_RCC_GetHCLKFreq>
 80096c8:	4602      	mov	r2, r0
 80096ca:	4b06      	ldr	r3, [pc, #24]	; (80096e4 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80096cc:	6a1b      	ldr	r3, [r3, #32]
 80096ce:	091b      	lsrs	r3, r3, #4
 80096d0:	f003 0307 	and.w	r3, r3, #7
 80096d4:	4904      	ldr	r1, [pc, #16]	; (80096e8 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80096d6:	5ccb      	ldrb	r3, [r1, r3]
 80096d8:	f003 031f 	and.w	r3, r3, #31
 80096dc:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80096e0:	4618      	mov	r0, r3
 80096e2:	bd80      	pop	{r7, pc}
 80096e4:	58024400 	.word	0x58024400
 80096e8:	080121e4 	.word	0x080121e4

080096ec <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 80096ec:	b480      	push	{r7}
 80096ee:	b089      	sub	sp, #36	; 0x24
 80096f0:	af00      	add	r7, sp, #0
 80096f2:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80096f4:	4ba1      	ldr	r3, [pc, #644]	; (800997c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80096f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80096f8:	f003 0303 	and.w	r3, r3, #3
 80096fc:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 80096fe:	4b9f      	ldr	r3, [pc, #636]	; (800997c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009700:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009702:	0b1b      	lsrs	r3, r3, #12
 8009704:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009708:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800970a:	4b9c      	ldr	r3, [pc, #624]	; (800997c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800970c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800970e:	091b      	lsrs	r3, r3, #4
 8009710:	f003 0301 	and.w	r3, r3, #1
 8009714:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8009716:	4b99      	ldr	r3, [pc, #612]	; (800997c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009718:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800971a:	08db      	lsrs	r3, r3, #3
 800971c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009720:	693a      	ldr	r2, [r7, #16]
 8009722:	fb02 f303 	mul.w	r3, r2, r3
 8009726:	ee07 3a90 	vmov	s15, r3
 800972a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800972e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8009732:	697b      	ldr	r3, [r7, #20]
 8009734:	2b00      	cmp	r3, #0
 8009736:	f000 8111 	beq.w	800995c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800973a:	69bb      	ldr	r3, [r7, #24]
 800973c:	2b02      	cmp	r3, #2
 800973e:	f000 8083 	beq.w	8009848 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8009742:	69bb      	ldr	r3, [r7, #24]
 8009744:	2b02      	cmp	r3, #2
 8009746:	f200 80a1 	bhi.w	800988c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800974a:	69bb      	ldr	r3, [r7, #24]
 800974c:	2b00      	cmp	r3, #0
 800974e:	d003      	beq.n	8009758 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8009750:	69bb      	ldr	r3, [r7, #24]
 8009752:	2b01      	cmp	r3, #1
 8009754:	d056      	beq.n	8009804 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8009756:	e099      	b.n	800988c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009758:	4b88      	ldr	r3, [pc, #544]	; (800997c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800975a:	681b      	ldr	r3, [r3, #0]
 800975c:	f003 0320 	and.w	r3, r3, #32
 8009760:	2b00      	cmp	r3, #0
 8009762:	d02d      	beq.n	80097c0 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009764:	4b85      	ldr	r3, [pc, #532]	; (800997c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009766:	681b      	ldr	r3, [r3, #0]
 8009768:	08db      	lsrs	r3, r3, #3
 800976a:	f003 0303 	and.w	r3, r3, #3
 800976e:	4a84      	ldr	r2, [pc, #528]	; (8009980 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8009770:	fa22 f303 	lsr.w	r3, r2, r3
 8009774:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8009776:	68bb      	ldr	r3, [r7, #8]
 8009778:	ee07 3a90 	vmov	s15, r3
 800977c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009780:	697b      	ldr	r3, [r7, #20]
 8009782:	ee07 3a90 	vmov	s15, r3
 8009786:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800978a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800978e:	4b7b      	ldr	r3, [pc, #492]	; (800997c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009790:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009792:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009796:	ee07 3a90 	vmov	s15, r3
 800979a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800979e:	ed97 6a03 	vldr	s12, [r7, #12]
 80097a2:	eddf 5a78 	vldr	s11, [pc, #480]	; 8009984 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80097a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80097aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80097ae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80097b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80097b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80097ba:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80097be:	e087      	b.n	80098d0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80097c0:	697b      	ldr	r3, [r7, #20]
 80097c2:	ee07 3a90 	vmov	s15, r3
 80097c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80097ca:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8009988 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80097ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80097d2:	4b6a      	ldr	r3, [pc, #424]	; (800997c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80097d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80097d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80097da:	ee07 3a90 	vmov	s15, r3
 80097de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80097e2:	ed97 6a03 	vldr	s12, [r7, #12]
 80097e6:	eddf 5a67 	vldr	s11, [pc, #412]	; 8009984 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80097ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80097ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80097f2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80097f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80097fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80097fe:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009802:	e065      	b.n	80098d0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8009804:	697b      	ldr	r3, [r7, #20]
 8009806:	ee07 3a90 	vmov	s15, r3
 800980a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800980e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800998c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8009812:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009816:	4b59      	ldr	r3, [pc, #356]	; (800997c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009818:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800981a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800981e:	ee07 3a90 	vmov	s15, r3
 8009822:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009826:	ed97 6a03 	vldr	s12, [r7, #12]
 800982a:	eddf 5a56 	vldr	s11, [pc, #344]	; 8009984 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800982e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009832:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009836:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800983a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800983e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009842:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009846:	e043      	b.n	80098d0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8009848:	697b      	ldr	r3, [r7, #20]
 800984a:	ee07 3a90 	vmov	s15, r3
 800984e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009852:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8009990 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8009856:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800985a:	4b48      	ldr	r3, [pc, #288]	; (800997c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800985c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800985e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009862:	ee07 3a90 	vmov	s15, r3
 8009866:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800986a:	ed97 6a03 	vldr	s12, [r7, #12]
 800986e:	eddf 5a45 	vldr	s11, [pc, #276]	; 8009984 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009872:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009876:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800987a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800987e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009882:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009886:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800988a:	e021      	b.n	80098d0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800988c:	697b      	ldr	r3, [r7, #20]
 800988e:	ee07 3a90 	vmov	s15, r3
 8009892:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009896:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800998c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800989a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800989e:	4b37      	ldr	r3, [pc, #220]	; (800997c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80098a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80098a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80098a6:	ee07 3a90 	vmov	s15, r3
 80098aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80098ae:	ed97 6a03 	vldr	s12, [r7, #12]
 80098b2:	eddf 5a34 	vldr	s11, [pc, #208]	; 8009984 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80098b6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80098ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80098be:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80098c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80098c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80098ca:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80098ce:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 80098d0:	4b2a      	ldr	r3, [pc, #168]	; (800997c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80098d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80098d4:	0a5b      	lsrs	r3, r3, #9
 80098d6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80098da:	ee07 3a90 	vmov	s15, r3
 80098de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80098e2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80098e6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80098ea:	edd7 6a07 	vldr	s13, [r7, #28]
 80098ee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80098f2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80098f6:	ee17 2a90 	vmov	r2, s15
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 80098fe:	4b1f      	ldr	r3, [pc, #124]	; (800997c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009900:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009902:	0c1b      	lsrs	r3, r3, #16
 8009904:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009908:	ee07 3a90 	vmov	s15, r3
 800990c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009910:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009914:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009918:	edd7 6a07 	vldr	s13, [r7, #28]
 800991c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009920:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009924:	ee17 2a90 	vmov	r2, s15
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 800992c:	4b13      	ldr	r3, [pc, #76]	; (800997c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800992e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009930:	0e1b      	lsrs	r3, r3, #24
 8009932:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009936:	ee07 3a90 	vmov	s15, r3
 800993a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800993e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009942:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009946:	edd7 6a07 	vldr	s13, [r7, #28]
 800994a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800994e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009952:	ee17 2a90 	vmov	r2, s15
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800995a:	e008      	b.n	800996e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	2200      	movs	r2, #0
 8009960:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	2200      	movs	r2, #0
 8009966:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	2200      	movs	r2, #0
 800996c:	609a      	str	r2, [r3, #8]
}
 800996e:	bf00      	nop
 8009970:	3724      	adds	r7, #36	; 0x24
 8009972:	46bd      	mov	sp, r7
 8009974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009978:	4770      	bx	lr
 800997a:	bf00      	nop
 800997c:	58024400 	.word	0x58024400
 8009980:	03d09000 	.word	0x03d09000
 8009984:	46000000 	.word	0x46000000
 8009988:	4c742400 	.word	0x4c742400
 800998c:	4a742400 	.word	0x4a742400
 8009990:	4bbebc20 	.word	0x4bbebc20

08009994 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8009994:	b480      	push	{r7}
 8009996:	b089      	sub	sp, #36	; 0x24
 8009998:	af00      	add	r7, sp, #0
 800999a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800999c:	4ba1      	ldr	r3, [pc, #644]	; (8009c24 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800999e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80099a0:	f003 0303 	and.w	r3, r3, #3
 80099a4:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 80099a6:	4b9f      	ldr	r3, [pc, #636]	; (8009c24 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80099a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80099aa:	0d1b      	lsrs	r3, r3, #20
 80099ac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80099b0:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80099b2:	4b9c      	ldr	r3, [pc, #624]	; (8009c24 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80099b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80099b6:	0a1b      	lsrs	r3, r3, #8
 80099b8:	f003 0301 	and.w	r3, r3, #1
 80099bc:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 80099be:	4b99      	ldr	r3, [pc, #612]	; (8009c24 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80099c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80099c2:	08db      	lsrs	r3, r3, #3
 80099c4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80099c8:	693a      	ldr	r2, [r7, #16]
 80099ca:	fb02 f303 	mul.w	r3, r2, r3
 80099ce:	ee07 3a90 	vmov	s15, r3
 80099d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80099d6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80099da:	697b      	ldr	r3, [r7, #20]
 80099dc:	2b00      	cmp	r3, #0
 80099de:	f000 8111 	beq.w	8009c04 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80099e2:	69bb      	ldr	r3, [r7, #24]
 80099e4:	2b02      	cmp	r3, #2
 80099e6:	f000 8083 	beq.w	8009af0 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80099ea:	69bb      	ldr	r3, [r7, #24]
 80099ec:	2b02      	cmp	r3, #2
 80099ee:	f200 80a1 	bhi.w	8009b34 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80099f2:	69bb      	ldr	r3, [r7, #24]
 80099f4:	2b00      	cmp	r3, #0
 80099f6:	d003      	beq.n	8009a00 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80099f8:	69bb      	ldr	r3, [r7, #24]
 80099fa:	2b01      	cmp	r3, #1
 80099fc:	d056      	beq.n	8009aac <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80099fe:	e099      	b.n	8009b34 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009a00:	4b88      	ldr	r3, [pc, #544]	; (8009c24 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009a02:	681b      	ldr	r3, [r3, #0]
 8009a04:	f003 0320 	and.w	r3, r3, #32
 8009a08:	2b00      	cmp	r3, #0
 8009a0a:	d02d      	beq.n	8009a68 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009a0c:	4b85      	ldr	r3, [pc, #532]	; (8009c24 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009a0e:	681b      	ldr	r3, [r3, #0]
 8009a10:	08db      	lsrs	r3, r3, #3
 8009a12:	f003 0303 	and.w	r3, r3, #3
 8009a16:	4a84      	ldr	r2, [pc, #528]	; (8009c28 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8009a18:	fa22 f303 	lsr.w	r3, r2, r3
 8009a1c:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009a1e:	68bb      	ldr	r3, [r7, #8]
 8009a20:	ee07 3a90 	vmov	s15, r3
 8009a24:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009a28:	697b      	ldr	r3, [r7, #20]
 8009a2a:	ee07 3a90 	vmov	s15, r3
 8009a2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009a32:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009a36:	4b7b      	ldr	r3, [pc, #492]	; (8009c24 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009a38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a3a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009a3e:	ee07 3a90 	vmov	s15, r3
 8009a42:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009a46:	ed97 6a03 	vldr	s12, [r7, #12]
 8009a4a:	eddf 5a78 	vldr	s11, [pc, #480]	; 8009c2c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009a4e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009a52:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009a56:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009a5a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009a5e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009a62:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8009a66:	e087      	b.n	8009b78 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009a68:	697b      	ldr	r3, [r7, #20]
 8009a6a:	ee07 3a90 	vmov	s15, r3
 8009a6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009a72:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8009c30 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8009a76:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009a7a:	4b6a      	ldr	r3, [pc, #424]	; (8009c24 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009a7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a7e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009a82:	ee07 3a90 	vmov	s15, r3
 8009a86:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009a8a:	ed97 6a03 	vldr	s12, [r7, #12]
 8009a8e:	eddf 5a67 	vldr	s11, [pc, #412]	; 8009c2c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009a92:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009a96:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009a9a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009a9e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009aa2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009aa6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009aaa:	e065      	b.n	8009b78 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009aac:	697b      	ldr	r3, [r7, #20]
 8009aae:	ee07 3a90 	vmov	s15, r3
 8009ab2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009ab6:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8009c34 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8009aba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009abe:	4b59      	ldr	r3, [pc, #356]	; (8009c24 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009ac0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ac2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009ac6:	ee07 3a90 	vmov	s15, r3
 8009aca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009ace:	ed97 6a03 	vldr	s12, [r7, #12]
 8009ad2:	eddf 5a56 	vldr	s11, [pc, #344]	; 8009c2c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009ad6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009ada:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009ade:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009ae2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009ae6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009aea:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009aee:	e043      	b.n	8009b78 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009af0:	697b      	ldr	r3, [r7, #20]
 8009af2:	ee07 3a90 	vmov	s15, r3
 8009af6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009afa:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8009c38 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8009afe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009b02:	4b48      	ldr	r3, [pc, #288]	; (8009c24 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009b04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b06:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009b0a:	ee07 3a90 	vmov	s15, r3
 8009b0e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009b12:	ed97 6a03 	vldr	s12, [r7, #12]
 8009b16:	eddf 5a45 	vldr	s11, [pc, #276]	; 8009c2c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009b1a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009b1e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009b22:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009b26:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009b2a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009b2e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009b32:	e021      	b.n	8009b78 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009b34:	697b      	ldr	r3, [r7, #20]
 8009b36:	ee07 3a90 	vmov	s15, r3
 8009b3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009b3e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8009c34 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8009b42:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009b46:	4b37      	ldr	r3, [pc, #220]	; (8009c24 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009b48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b4a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009b4e:	ee07 3a90 	vmov	s15, r3
 8009b52:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009b56:	ed97 6a03 	vldr	s12, [r7, #12]
 8009b5a:	eddf 5a34 	vldr	s11, [pc, #208]	; 8009c2c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009b5e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009b62:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009b66:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009b6a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009b6e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009b72:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009b76:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8009b78:	4b2a      	ldr	r3, [pc, #168]	; (8009c24 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009b7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b7c:	0a5b      	lsrs	r3, r3, #9
 8009b7e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009b82:	ee07 3a90 	vmov	s15, r3
 8009b86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009b8a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009b8e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009b92:	edd7 6a07 	vldr	s13, [r7, #28]
 8009b96:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009b9a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009b9e:	ee17 2a90 	vmov	r2, s15
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8009ba6:	4b1f      	ldr	r3, [pc, #124]	; (8009c24 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009ba8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009baa:	0c1b      	lsrs	r3, r3, #16
 8009bac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009bb0:	ee07 3a90 	vmov	s15, r3
 8009bb4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009bb8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009bbc:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009bc0:	edd7 6a07 	vldr	s13, [r7, #28]
 8009bc4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009bc8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009bcc:	ee17 2a90 	vmov	r2, s15
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8009bd4:	4b13      	ldr	r3, [pc, #76]	; (8009c24 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009bd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009bd8:	0e1b      	lsrs	r3, r3, #24
 8009bda:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009bde:	ee07 3a90 	vmov	s15, r3
 8009be2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009be6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009bea:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009bee:	edd7 6a07 	vldr	s13, [r7, #28]
 8009bf2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009bf6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009bfa:	ee17 2a90 	vmov	r2, s15
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8009c02:	e008      	b.n	8009c16 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	2200      	movs	r2, #0
 8009c08:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	2200      	movs	r2, #0
 8009c0e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	2200      	movs	r2, #0
 8009c14:	609a      	str	r2, [r3, #8]
}
 8009c16:	bf00      	nop
 8009c18:	3724      	adds	r7, #36	; 0x24
 8009c1a:	46bd      	mov	sp, r7
 8009c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c20:	4770      	bx	lr
 8009c22:	bf00      	nop
 8009c24:	58024400 	.word	0x58024400
 8009c28:	03d09000 	.word	0x03d09000
 8009c2c:	46000000 	.word	0x46000000
 8009c30:	4c742400 	.word	0x4c742400
 8009c34:	4a742400 	.word	0x4a742400
 8009c38:	4bbebc20 	.word	0x4bbebc20

08009c3c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8009c3c:	b580      	push	{r7, lr}
 8009c3e:	b084      	sub	sp, #16
 8009c40:	af00      	add	r7, sp, #0
 8009c42:	6078      	str	r0, [r7, #4]
 8009c44:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009c46:	2300      	movs	r3, #0
 8009c48:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8009c4a:	4b53      	ldr	r3, [pc, #332]	; (8009d98 <RCCEx_PLL2_Config+0x15c>)
 8009c4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009c4e:	f003 0303 	and.w	r3, r3, #3
 8009c52:	2b03      	cmp	r3, #3
 8009c54:	d101      	bne.n	8009c5a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8009c56:	2301      	movs	r3, #1
 8009c58:	e099      	b.n	8009d8e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8009c5a:	4b4f      	ldr	r3, [pc, #316]	; (8009d98 <RCCEx_PLL2_Config+0x15c>)
 8009c5c:	681b      	ldr	r3, [r3, #0]
 8009c5e:	4a4e      	ldr	r2, [pc, #312]	; (8009d98 <RCCEx_PLL2_Config+0x15c>)
 8009c60:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8009c64:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009c66:	f7fc fd13 	bl	8006690 <HAL_GetTick>
 8009c6a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8009c6c:	e008      	b.n	8009c80 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8009c6e:	f7fc fd0f 	bl	8006690 <HAL_GetTick>
 8009c72:	4602      	mov	r2, r0
 8009c74:	68bb      	ldr	r3, [r7, #8]
 8009c76:	1ad3      	subs	r3, r2, r3
 8009c78:	2b02      	cmp	r3, #2
 8009c7a:	d901      	bls.n	8009c80 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8009c7c:	2303      	movs	r3, #3
 8009c7e:	e086      	b.n	8009d8e <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8009c80:	4b45      	ldr	r3, [pc, #276]	; (8009d98 <RCCEx_PLL2_Config+0x15c>)
 8009c82:	681b      	ldr	r3, [r3, #0]
 8009c84:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009c88:	2b00      	cmp	r3, #0
 8009c8a:	d1f0      	bne.n	8009c6e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8009c8c:	4b42      	ldr	r3, [pc, #264]	; (8009d98 <RCCEx_PLL2_Config+0x15c>)
 8009c8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009c90:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	681b      	ldr	r3, [r3, #0]
 8009c98:	031b      	lsls	r3, r3, #12
 8009c9a:	493f      	ldr	r1, [pc, #252]	; (8009d98 <RCCEx_PLL2_Config+0x15c>)
 8009c9c:	4313      	orrs	r3, r2
 8009c9e:	628b      	str	r3, [r1, #40]	; 0x28
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	685b      	ldr	r3, [r3, #4]
 8009ca4:	3b01      	subs	r3, #1
 8009ca6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	689b      	ldr	r3, [r3, #8]
 8009cae:	3b01      	subs	r3, #1
 8009cb0:	025b      	lsls	r3, r3, #9
 8009cb2:	b29b      	uxth	r3, r3
 8009cb4:	431a      	orrs	r2, r3
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	68db      	ldr	r3, [r3, #12]
 8009cba:	3b01      	subs	r3, #1
 8009cbc:	041b      	lsls	r3, r3, #16
 8009cbe:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8009cc2:	431a      	orrs	r2, r3
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	691b      	ldr	r3, [r3, #16]
 8009cc8:	3b01      	subs	r3, #1
 8009cca:	061b      	lsls	r3, r3, #24
 8009ccc:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8009cd0:	4931      	ldr	r1, [pc, #196]	; (8009d98 <RCCEx_PLL2_Config+0x15c>)
 8009cd2:	4313      	orrs	r3, r2
 8009cd4:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8009cd6:	4b30      	ldr	r3, [pc, #192]	; (8009d98 <RCCEx_PLL2_Config+0x15c>)
 8009cd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009cda:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	695b      	ldr	r3, [r3, #20]
 8009ce2:	492d      	ldr	r1, [pc, #180]	; (8009d98 <RCCEx_PLL2_Config+0x15c>)
 8009ce4:	4313      	orrs	r3, r2
 8009ce6:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8009ce8:	4b2b      	ldr	r3, [pc, #172]	; (8009d98 <RCCEx_PLL2_Config+0x15c>)
 8009cea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009cec:	f023 0220 	bic.w	r2, r3, #32
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	699b      	ldr	r3, [r3, #24]
 8009cf4:	4928      	ldr	r1, [pc, #160]	; (8009d98 <RCCEx_PLL2_Config+0x15c>)
 8009cf6:	4313      	orrs	r3, r2
 8009cf8:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8009cfa:	4b27      	ldr	r3, [pc, #156]	; (8009d98 <RCCEx_PLL2_Config+0x15c>)
 8009cfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009cfe:	4a26      	ldr	r2, [pc, #152]	; (8009d98 <RCCEx_PLL2_Config+0x15c>)
 8009d00:	f023 0310 	bic.w	r3, r3, #16
 8009d04:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8009d06:	4b24      	ldr	r3, [pc, #144]	; (8009d98 <RCCEx_PLL2_Config+0x15c>)
 8009d08:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009d0a:	4b24      	ldr	r3, [pc, #144]	; (8009d9c <RCCEx_PLL2_Config+0x160>)
 8009d0c:	4013      	ands	r3, r2
 8009d0e:	687a      	ldr	r2, [r7, #4]
 8009d10:	69d2      	ldr	r2, [r2, #28]
 8009d12:	00d2      	lsls	r2, r2, #3
 8009d14:	4920      	ldr	r1, [pc, #128]	; (8009d98 <RCCEx_PLL2_Config+0x15c>)
 8009d16:	4313      	orrs	r3, r2
 8009d18:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8009d1a:	4b1f      	ldr	r3, [pc, #124]	; (8009d98 <RCCEx_PLL2_Config+0x15c>)
 8009d1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d1e:	4a1e      	ldr	r2, [pc, #120]	; (8009d98 <RCCEx_PLL2_Config+0x15c>)
 8009d20:	f043 0310 	orr.w	r3, r3, #16
 8009d24:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8009d26:	683b      	ldr	r3, [r7, #0]
 8009d28:	2b00      	cmp	r3, #0
 8009d2a:	d106      	bne.n	8009d3a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8009d2c:	4b1a      	ldr	r3, [pc, #104]	; (8009d98 <RCCEx_PLL2_Config+0x15c>)
 8009d2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d30:	4a19      	ldr	r2, [pc, #100]	; (8009d98 <RCCEx_PLL2_Config+0x15c>)
 8009d32:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009d36:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009d38:	e00f      	b.n	8009d5a <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8009d3a:	683b      	ldr	r3, [r7, #0]
 8009d3c:	2b01      	cmp	r3, #1
 8009d3e:	d106      	bne.n	8009d4e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8009d40:	4b15      	ldr	r3, [pc, #84]	; (8009d98 <RCCEx_PLL2_Config+0x15c>)
 8009d42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d44:	4a14      	ldr	r2, [pc, #80]	; (8009d98 <RCCEx_PLL2_Config+0x15c>)
 8009d46:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009d4a:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009d4c:	e005      	b.n	8009d5a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8009d4e:	4b12      	ldr	r3, [pc, #72]	; (8009d98 <RCCEx_PLL2_Config+0x15c>)
 8009d50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d52:	4a11      	ldr	r2, [pc, #68]	; (8009d98 <RCCEx_PLL2_Config+0x15c>)
 8009d54:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8009d58:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8009d5a:	4b0f      	ldr	r3, [pc, #60]	; (8009d98 <RCCEx_PLL2_Config+0x15c>)
 8009d5c:	681b      	ldr	r3, [r3, #0]
 8009d5e:	4a0e      	ldr	r2, [pc, #56]	; (8009d98 <RCCEx_PLL2_Config+0x15c>)
 8009d60:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8009d64:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009d66:	f7fc fc93 	bl	8006690 <HAL_GetTick>
 8009d6a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8009d6c:	e008      	b.n	8009d80 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8009d6e:	f7fc fc8f 	bl	8006690 <HAL_GetTick>
 8009d72:	4602      	mov	r2, r0
 8009d74:	68bb      	ldr	r3, [r7, #8]
 8009d76:	1ad3      	subs	r3, r2, r3
 8009d78:	2b02      	cmp	r3, #2
 8009d7a:	d901      	bls.n	8009d80 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8009d7c:	2303      	movs	r3, #3
 8009d7e:	e006      	b.n	8009d8e <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8009d80:	4b05      	ldr	r3, [pc, #20]	; (8009d98 <RCCEx_PLL2_Config+0x15c>)
 8009d82:	681b      	ldr	r3, [r3, #0]
 8009d84:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009d88:	2b00      	cmp	r3, #0
 8009d8a:	d0f0      	beq.n	8009d6e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8009d8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8009d8e:	4618      	mov	r0, r3
 8009d90:	3710      	adds	r7, #16
 8009d92:	46bd      	mov	sp, r7
 8009d94:	bd80      	pop	{r7, pc}
 8009d96:	bf00      	nop
 8009d98:	58024400 	.word	0x58024400
 8009d9c:	ffff0007 	.word	0xffff0007

08009da0 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8009da0:	b580      	push	{r7, lr}
 8009da2:	b084      	sub	sp, #16
 8009da4:	af00      	add	r7, sp, #0
 8009da6:	6078      	str	r0, [r7, #4]
 8009da8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009daa:	2300      	movs	r3, #0
 8009dac:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8009dae:	4b53      	ldr	r3, [pc, #332]	; (8009efc <RCCEx_PLL3_Config+0x15c>)
 8009db0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009db2:	f003 0303 	and.w	r3, r3, #3
 8009db6:	2b03      	cmp	r3, #3
 8009db8:	d101      	bne.n	8009dbe <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8009dba:	2301      	movs	r3, #1
 8009dbc:	e099      	b.n	8009ef2 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8009dbe:	4b4f      	ldr	r3, [pc, #316]	; (8009efc <RCCEx_PLL3_Config+0x15c>)
 8009dc0:	681b      	ldr	r3, [r3, #0]
 8009dc2:	4a4e      	ldr	r2, [pc, #312]	; (8009efc <RCCEx_PLL3_Config+0x15c>)
 8009dc4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009dc8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009dca:	f7fc fc61 	bl	8006690 <HAL_GetTick>
 8009dce:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009dd0:	e008      	b.n	8009de4 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8009dd2:	f7fc fc5d 	bl	8006690 <HAL_GetTick>
 8009dd6:	4602      	mov	r2, r0
 8009dd8:	68bb      	ldr	r3, [r7, #8]
 8009dda:	1ad3      	subs	r3, r2, r3
 8009ddc:	2b02      	cmp	r3, #2
 8009dde:	d901      	bls.n	8009de4 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8009de0:	2303      	movs	r3, #3
 8009de2:	e086      	b.n	8009ef2 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009de4:	4b45      	ldr	r3, [pc, #276]	; (8009efc <RCCEx_PLL3_Config+0x15c>)
 8009de6:	681b      	ldr	r3, [r3, #0]
 8009de8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009dec:	2b00      	cmp	r3, #0
 8009dee:	d1f0      	bne.n	8009dd2 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8009df0:	4b42      	ldr	r3, [pc, #264]	; (8009efc <RCCEx_PLL3_Config+0x15c>)
 8009df2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009df4:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	681b      	ldr	r3, [r3, #0]
 8009dfc:	051b      	lsls	r3, r3, #20
 8009dfe:	493f      	ldr	r1, [pc, #252]	; (8009efc <RCCEx_PLL3_Config+0x15c>)
 8009e00:	4313      	orrs	r3, r2
 8009e02:	628b      	str	r3, [r1, #40]	; 0x28
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	685b      	ldr	r3, [r3, #4]
 8009e08:	3b01      	subs	r3, #1
 8009e0a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	689b      	ldr	r3, [r3, #8]
 8009e12:	3b01      	subs	r3, #1
 8009e14:	025b      	lsls	r3, r3, #9
 8009e16:	b29b      	uxth	r3, r3
 8009e18:	431a      	orrs	r2, r3
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	68db      	ldr	r3, [r3, #12]
 8009e1e:	3b01      	subs	r3, #1
 8009e20:	041b      	lsls	r3, r3, #16
 8009e22:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8009e26:	431a      	orrs	r2, r3
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	691b      	ldr	r3, [r3, #16]
 8009e2c:	3b01      	subs	r3, #1
 8009e2e:	061b      	lsls	r3, r3, #24
 8009e30:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8009e34:	4931      	ldr	r1, [pc, #196]	; (8009efc <RCCEx_PLL3_Config+0x15c>)
 8009e36:	4313      	orrs	r3, r2
 8009e38:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8009e3a:	4b30      	ldr	r3, [pc, #192]	; (8009efc <RCCEx_PLL3_Config+0x15c>)
 8009e3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e3e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	695b      	ldr	r3, [r3, #20]
 8009e46:	492d      	ldr	r1, [pc, #180]	; (8009efc <RCCEx_PLL3_Config+0x15c>)
 8009e48:	4313      	orrs	r3, r2
 8009e4a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8009e4c:	4b2b      	ldr	r3, [pc, #172]	; (8009efc <RCCEx_PLL3_Config+0x15c>)
 8009e4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e50:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	699b      	ldr	r3, [r3, #24]
 8009e58:	4928      	ldr	r1, [pc, #160]	; (8009efc <RCCEx_PLL3_Config+0x15c>)
 8009e5a:	4313      	orrs	r3, r2
 8009e5c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8009e5e:	4b27      	ldr	r3, [pc, #156]	; (8009efc <RCCEx_PLL3_Config+0x15c>)
 8009e60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e62:	4a26      	ldr	r2, [pc, #152]	; (8009efc <RCCEx_PLL3_Config+0x15c>)
 8009e64:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009e68:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8009e6a:	4b24      	ldr	r3, [pc, #144]	; (8009efc <RCCEx_PLL3_Config+0x15c>)
 8009e6c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009e6e:	4b24      	ldr	r3, [pc, #144]	; (8009f00 <RCCEx_PLL3_Config+0x160>)
 8009e70:	4013      	ands	r3, r2
 8009e72:	687a      	ldr	r2, [r7, #4]
 8009e74:	69d2      	ldr	r2, [r2, #28]
 8009e76:	00d2      	lsls	r2, r2, #3
 8009e78:	4920      	ldr	r1, [pc, #128]	; (8009efc <RCCEx_PLL3_Config+0x15c>)
 8009e7a:	4313      	orrs	r3, r2
 8009e7c:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8009e7e:	4b1f      	ldr	r3, [pc, #124]	; (8009efc <RCCEx_PLL3_Config+0x15c>)
 8009e80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e82:	4a1e      	ldr	r2, [pc, #120]	; (8009efc <RCCEx_PLL3_Config+0x15c>)
 8009e84:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009e88:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8009e8a:	683b      	ldr	r3, [r7, #0]
 8009e8c:	2b00      	cmp	r3, #0
 8009e8e:	d106      	bne.n	8009e9e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8009e90:	4b1a      	ldr	r3, [pc, #104]	; (8009efc <RCCEx_PLL3_Config+0x15c>)
 8009e92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e94:	4a19      	ldr	r2, [pc, #100]	; (8009efc <RCCEx_PLL3_Config+0x15c>)
 8009e96:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8009e9a:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009e9c:	e00f      	b.n	8009ebe <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8009e9e:	683b      	ldr	r3, [r7, #0]
 8009ea0:	2b01      	cmp	r3, #1
 8009ea2:	d106      	bne.n	8009eb2 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8009ea4:	4b15      	ldr	r3, [pc, #84]	; (8009efc <RCCEx_PLL3_Config+0x15c>)
 8009ea6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ea8:	4a14      	ldr	r2, [pc, #80]	; (8009efc <RCCEx_PLL3_Config+0x15c>)
 8009eaa:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8009eae:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009eb0:	e005      	b.n	8009ebe <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8009eb2:	4b12      	ldr	r3, [pc, #72]	; (8009efc <RCCEx_PLL3_Config+0x15c>)
 8009eb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009eb6:	4a11      	ldr	r2, [pc, #68]	; (8009efc <RCCEx_PLL3_Config+0x15c>)
 8009eb8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009ebc:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8009ebe:	4b0f      	ldr	r3, [pc, #60]	; (8009efc <RCCEx_PLL3_Config+0x15c>)
 8009ec0:	681b      	ldr	r3, [r3, #0]
 8009ec2:	4a0e      	ldr	r2, [pc, #56]	; (8009efc <RCCEx_PLL3_Config+0x15c>)
 8009ec4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009ec8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009eca:	f7fc fbe1 	bl	8006690 <HAL_GetTick>
 8009ece:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009ed0:	e008      	b.n	8009ee4 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8009ed2:	f7fc fbdd 	bl	8006690 <HAL_GetTick>
 8009ed6:	4602      	mov	r2, r0
 8009ed8:	68bb      	ldr	r3, [r7, #8]
 8009eda:	1ad3      	subs	r3, r2, r3
 8009edc:	2b02      	cmp	r3, #2
 8009ede:	d901      	bls.n	8009ee4 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8009ee0:	2303      	movs	r3, #3
 8009ee2:	e006      	b.n	8009ef2 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009ee4:	4b05      	ldr	r3, [pc, #20]	; (8009efc <RCCEx_PLL3_Config+0x15c>)
 8009ee6:	681b      	ldr	r3, [r3, #0]
 8009ee8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009eec:	2b00      	cmp	r3, #0
 8009eee:	d0f0      	beq.n	8009ed2 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8009ef0:	7bfb      	ldrb	r3, [r7, #15]
}
 8009ef2:	4618      	mov	r0, r3
 8009ef4:	3710      	adds	r7, #16
 8009ef6:	46bd      	mov	sp, r7
 8009ef8:	bd80      	pop	{r7, pc}
 8009efa:	bf00      	nop
 8009efc:	58024400 	.word	0x58024400
 8009f00:	ffff0007 	.word	0xffff0007

08009f04 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009f04:	b580      	push	{r7, lr}
 8009f06:	b082      	sub	sp, #8
 8009f08:	af00      	add	r7, sp, #0
 8009f0a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	2b00      	cmp	r3, #0
 8009f10:	d101      	bne.n	8009f16 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009f12:	2301      	movs	r3, #1
 8009f14:	e049      	b.n	8009faa <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009f1c:	b2db      	uxtb	r3, r3
 8009f1e:	2b00      	cmp	r3, #0
 8009f20:	d106      	bne.n	8009f30 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	2200      	movs	r2, #0
 8009f26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009f2a:	6878      	ldr	r0, [r7, #4]
 8009f2c:	f7fa f9e8 	bl	8004300 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	2202      	movs	r2, #2
 8009f34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	681a      	ldr	r2, [r3, #0]
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	3304      	adds	r3, #4
 8009f40:	4619      	mov	r1, r3
 8009f42:	4610      	mov	r0, r2
 8009f44:	f001 f982 	bl	800b24c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	2201      	movs	r2, #1
 8009f4c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	2201      	movs	r2, #1
 8009f54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	2201      	movs	r2, #1
 8009f5c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	2201      	movs	r2, #1
 8009f64:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	2201      	movs	r2, #1
 8009f6c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	2201      	movs	r2, #1
 8009f74:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	2201      	movs	r2, #1
 8009f7c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	2201      	movs	r2, #1
 8009f84:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	2201      	movs	r2, #1
 8009f8c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	2201      	movs	r2, #1
 8009f94:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	2201      	movs	r2, #1
 8009f9c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	2201      	movs	r2, #1
 8009fa4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009fa8:	2300      	movs	r3, #0
}
 8009faa:	4618      	mov	r0, r3
 8009fac:	3708      	adds	r7, #8
 8009fae:	46bd      	mov	sp, r7
 8009fb0:	bd80      	pop	{r7, pc}
	...

08009fb4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8009fb4:	b480      	push	{r7}
 8009fb6:	b085      	sub	sp, #20
 8009fb8:	af00      	add	r7, sp, #0
 8009fba:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009fc2:	b2db      	uxtb	r3, r3
 8009fc4:	2b01      	cmp	r3, #1
 8009fc6:	d001      	beq.n	8009fcc <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8009fc8:	2301      	movs	r3, #1
 8009fca:	e04c      	b.n	800a066 <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	2202      	movs	r2, #2
 8009fd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	681b      	ldr	r3, [r3, #0]
 8009fd8:	4a26      	ldr	r2, [pc, #152]	; (800a074 <HAL_TIM_Base_Start+0xc0>)
 8009fda:	4293      	cmp	r3, r2
 8009fdc:	d022      	beq.n	800a024 <HAL_TIM_Base_Start+0x70>
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	681b      	ldr	r3, [r3, #0]
 8009fe2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009fe6:	d01d      	beq.n	800a024 <HAL_TIM_Base_Start+0x70>
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	681b      	ldr	r3, [r3, #0]
 8009fec:	4a22      	ldr	r2, [pc, #136]	; (800a078 <HAL_TIM_Base_Start+0xc4>)
 8009fee:	4293      	cmp	r3, r2
 8009ff0:	d018      	beq.n	800a024 <HAL_TIM_Base_Start+0x70>
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	681b      	ldr	r3, [r3, #0]
 8009ff6:	4a21      	ldr	r2, [pc, #132]	; (800a07c <HAL_TIM_Base_Start+0xc8>)
 8009ff8:	4293      	cmp	r3, r2
 8009ffa:	d013      	beq.n	800a024 <HAL_TIM_Base_Start+0x70>
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	681b      	ldr	r3, [r3, #0]
 800a000:	4a1f      	ldr	r2, [pc, #124]	; (800a080 <HAL_TIM_Base_Start+0xcc>)
 800a002:	4293      	cmp	r3, r2
 800a004:	d00e      	beq.n	800a024 <HAL_TIM_Base_Start+0x70>
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	681b      	ldr	r3, [r3, #0]
 800a00a:	4a1e      	ldr	r2, [pc, #120]	; (800a084 <HAL_TIM_Base_Start+0xd0>)
 800a00c:	4293      	cmp	r3, r2
 800a00e:	d009      	beq.n	800a024 <HAL_TIM_Base_Start+0x70>
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	681b      	ldr	r3, [r3, #0]
 800a014:	4a1c      	ldr	r2, [pc, #112]	; (800a088 <HAL_TIM_Base_Start+0xd4>)
 800a016:	4293      	cmp	r3, r2
 800a018:	d004      	beq.n	800a024 <HAL_TIM_Base_Start+0x70>
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	681b      	ldr	r3, [r3, #0]
 800a01e:	4a1b      	ldr	r2, [pc, #108]	; (800a08c <HAL_TIM_Base_Start+0xd8>)
 800a020:	4293      	cmp	r3, r2
 800a022:	d115      	bne.n	800a050 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	681b      	ldr	r3, [r3, #0]
 800a028:	689a      	ldr	r2, [r3, #8]
 800a02a:	4b19      	ldr	r3, [pc, #100]	; (800a090 <HAL_TIM_Base_Start+0xdc>)
 800a02c:	4013      	ands	r3, r2
 800a02e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a030:	68fb      	ldr	r3, [r7, #12]
 800a032:	2b06      	cmp	r3, #6
 800a034:	d015      	beq.n	800a062 <HAL_TIM_Base_Start+0xae>
 800a036:	68fb      	ldr	r3, [r7, #12]
 800a038:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a03c:	d011      	beq.n	800a062 <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	681b      	ldr	r3, [r3, #0]
 800a042:	681a      	ldr	r2, [r3, #0]
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	681b      	ldr	r3, [r3, #0]
 800a048:	f042 0201 	orr.w	r2, r2, #1
 800a04c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a04e:	e008      	b.n	800a062 <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	681b      	ldr	r3, [r3, #0]
 800a054:	681a      	ldr	r2, [r3, #0]
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	681b      	ldr	r3, [r3, #0]
 800a05a:	f042 0201 	orr.w	r2, r2, #1
 800a05e:	601a      	str	r2, [r3, #0]
 800a060:	e000      	b.n	800a064 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a062:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800a064:	2300      	movs	r3, #0
}
 800a066:	4618      	mov	r0, r3
 800a068:	3714      	adds	r7, #20
 800a06a:	46bd      	mov	sp, r7
 800a06c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a070:	4770      	bx	lr
 800a072:	bf00      	nop
 800a074:	40010000 	.word	0x40010000
 800a078:	40000400 	.word	0x40000400
 800a07c:	40000800 	.word	0x40000800
 800a080:	40000c00 	.word	0x40000c00
 800a084:	40010400 	.word	0x40010400
 800a088:	40001800 	.word	0x40001800
 800a08c:	40014000 	.word	0x40014000
 800a090:	00010007 	.word	0x00010007

0800a094 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 800a094:	b480      	push	{r7}
 800a096:	b083      	sub	sp, #12
 800a098:	af00      	add	r7, sp, #0
 800a09a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	681b      	ldr	r3, [r3, #0]
 800a0a0:	6a1a      	ldr	r2, [r3, #32]
 800a0a2:	f241 1311 	movw	r3, #4369	; 0x1111
 800a0a6:	4013      	ands	r3, r2
 800a0a8:	2b00      	cmp	r3, #0
 800a0aa:	d10f      	bne.n	800a0cc <HAL_TIM_Base_Stop+0x38>
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	681b      	ldr	r3, [r3, #0]
 800a0b0:	6a1a      	ldr	r2, [r3, #32]
 800a0b2:	f240 4344 	movw	r3, #1092	; 0x444
 800a0b6:	4013      	ands	r3, r2
 800a0b8:	2b00      	cmp	r3, #0
 800a0ba:	d107      	bne.n	800a0cc <HAL_TIM_Base_Stop+0x38>
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	681b      	ldr	r3, [r3, #0]
 800a0c0:	681a      	ldr	r2, [r3, #0]
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	681b      	ldr	r3, [r3, #0]
 800a0c6:	f022 0201 	bic.w	r2, r2, #1
 800a0ca:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	2201      	movs	r2, #1
 800a0d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800a0d4:	2300      	movs	r3, #0
}
 800a0d6:	4618      	mov	r0, r3
 800a0d8:	370c      	adds	r7, #12
 800a0da:	46bd      	mov	sp, r7
 800a0dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0e0:	4770      	bx	lr
	...

0800a0e4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800a0e4:	b480      	push	{r7}
 800a0e6:	b085      	sub	sp, #20
 800a0e8:	af00      	add	r7, sp, #0
 800a0ea:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a0f2:	b2db      	uxtb	r3, r3
 800a0f4:	2b01      	cmp	r3, #1
 800a0f6:	d001      	beq.n	800a0fc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800a0f8:	2301      	movs	r3, #1
 800a0fa:	e054      	b.n	800a1a6 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	2202      	movs	r2, #2
 800a100:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	681b      	ldr	r3, [r3, #0]
 800a108:	68da      	ldr	r2, [r3, #12]
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	681b      	ldr	r3, [r3, #0]
 800a10e:	f042 0201 	orr.w	r2, r2, #1
 800a112:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	681b      	ldr	r3, [r3, #0]
 800a118:	4a26      	ldr	r2, [pc, #152]	; (800a1b4 <HAL_TIM_Base_Start_IT+0xd0>)
 800a11a:	4293      	cmp	r3, r2
 800a11c:	d022      	beq.n	800a164 <HAL_TIM_Base_Start_IT+0x80>
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	681b      	ldr	r3, [r3, #0]
 800a122:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a126:	d01d      	beq.n	800a164 <HAL_TIM_Base_Start_IT+0x80>
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	681b      	ldr	r3, [r3, #0]
 800a12c:	4a22      	ldr	r2, [pc, #136]	; (800a1b8 <HAL_TIM_Base_Start_IT+0xd4>)
 800a12e:	4293      	cmp	r3, r2
 800a130:	d018      	beq.n	800a164 <HAL_TIM_Base_Start_IT+0x80>
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	681b      	ldr	r3, [r3, #0]
 800a136:	4a21      	ldr	r2, [pc, #132]	; (800a1bc <HAL_TIM_Base_Start_IT+0xd8>)
 800a138:	4293      	cmp	r3, r2
 800a13a:	d013      	beq.n	800a164 <HAL_TIM_Base_Start_IT+0x80>
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	681b      	ldr	r3, [r3, #0]
 800a140:	4a1f      	ldr	r2, [pc, #124]	; (800a1c0 <HAL_TIM_Base_Start_IT+0xdc>)
 800a142:	4293      	cmp	r3, r2
 800a144:	d00e      	beq.n	800a164 <HAL_TIM_Base_Start_IT+0x80>
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	681b      	ldr	r3, [r3, #0]
 800a14a:	4a1e      	ldr	r2, [pc, #120]	; (800a1c4 <HAL_TIM_Base_Start_IT+0xe0>)
 800a14c:	4293      	cmp	r3, r2
 800a14e:	d009      	beq.n	800a164 <HAL_TIM_Base_Start_IT+0x80>
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	681b      	ldr	r3, [r3, #0]
 800a154:	4a1c      	ldr	r2, [pc, #112]	; (800a1c8 <HAL_TIM_Base_Start_IT+0xe4>)
 800a156:	4293      	cmp	r3, r2
 800a158:	d004      	beq.n	800a164 <HAL_TIM_Base_Start_IT+0x80>
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	681b      	ldr	r3, [r3, #0]
 800a15e:	4a1b      	ldr	r2, [pc, #108]	; (800a1cc <HAL_TIM_Base_Start_IT+0xe8>)
 800a160:	4293      	cmp	r3, r2
 800a162:	d115      	bne.n	800a190 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	681b      	ldr	r3, [r3, #0]
 800a168:	689a      	ldr	r2, [r3, #8]
 800a16a:	4b19      	ldr	r3, [pc, #100]	; (800a1d0 <HAL_TIM_Base_Start_IT+0xec>)
 800a16c:	4013      	ands	r3, r2
 800a16e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a170:	68fb      	ldr	r3, [r7, #12]
 800a172:	2b06      	cmp	r3, #6
 800a174:	d015      	beq.n	800a1a2 <HAL_TIM_Base_Start_IT+0xbe>
 800a176:	68fb      	ldr	r3, [r7, #12]
 800a178:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a17c:	d011      	beq.n	800a1a2 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	681b      	ldr	r3, [r3, #0]
 800a182:	681a      	ldr	r2, [r3, #0]
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	681b      	ldr	r3, [r3, #0]
 800a188:	f042 0201 	orr.w	r2, r2, #1
 800a18c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a18e:	e008      	b.n	800a1a2 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	681b      	ldr	r3, [r3, #0]
 800a194:	681a      	ldr	r2, [r3, #0]
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	681b      	ldr	r3, [r3, #0]
 800a19a:	f042 0201 	orr.w	r2, r2, #1
 800a19e:	601a      	str	r2, [r3, #0]
 800a1a0:	e000      	b.n	800a1a4 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a1a2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800a1a4:	2300      	movs	r3, #0
}
 800a1a6:	4618      	mov	r0, r3
 800a1a8:	3714      	adds	r7, #20
 800a1aa:	46bd      	mov	sp, r7
 800a1ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1b0:	4770      	bx	lr
 800a1b2:	bf00      	nop
 800a1b4:	40010000 	.word	0x40010000
 800a1b8:	40000400 	.word	0x40000400
 800a1bc:	40000800 	.word	0x40000800
 800a1c0:	40000c00 	.word	0x40000c00
 800a1c4:	40010400 	.word	0x40010400
 800a1c8:	40001800 	.word	0x40001800
 800a1cc:	40014000 	.word	0x40014000
 800a1d0:	00010007 	.word	0x00010007

0800a1d4 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800a1d4:	b480      	push	{r7}
 800a1d6:	b083      	sub	sp, #12
 800a1d8:	af00      	add	r7, sp, #0
 800a1da:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	681b      	ldr	r3, [r3, #0]
 800a1e0:	68da      	ldr	r2, [r3, #12]
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	681b      	ldr	r3, [r3, #0]
 800a1e6:	f022 0201 	bic.w	r2, r2, #1
 800a1ea:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	681b      	ldr	r3, [r3, #0]
 800a1f0:	6a1a      	ldr	r2, [r3, #32]
 800a1f2:	f241 1311 	movw	r3, #4369	; 0x1111
 800a1f6:	4013      	ands	r3, r2
 800a1f8:	2b00      	cmp	r3, #0
 800a1fa:	d10f      	bne.n	800a21c <HAL_TIM_Base_Stop_IT+0x48>
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	681b      	ldr	r3, [r3, #0]
 800a200:	6a1a      	ldr	r2, [r3, #32]
 800a202:	f240 4344 	movw	r3, #1092	; 0x444
 800a206:	4013      	ands	r3, r2
 800a208:	2b00      	cmp	r3, #0
 800a20a:	d107      	bne.n	800a21c <HAL_TIM_Base_Stop_IT+0x48>
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	681b      	ldr	r3, [r3, #0]
 800a210:	681a      	ldr	r2, [r3, #0]
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	681b      	ldr	r3, [r3, #0]
 800a216:	f022 0201 	bic.w	r2, r2, #1
 800a21a:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	2201      	movs	r2, #1
 800a220:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800a224:	2300      	movs	r3, #0
}
 800a226:	4618      	mov	r0, r3
 800a228:	370c      	adds	r7, #12
 800a22a:	46bd      	mov	sp, r7
 800a22c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a230:	4770      	bx	lr

0800a232 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800a232:	b580      	push	{r7, lr}
 800a234:	b082      	sub	sp, #8
 800a236:	af00      	add	r7, sp, #0
 800a238:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	2b00      	cmp	r3, #0
 800a23e:	d101      	bne.n	800a244 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800a240:	2301      	movs	r3, #1
 800a242:	e049      	b.n	800a2d8 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a24a:	b2db      	uxtb	r3, r3
 800a24c:	2b00      	cmp	r3, #0
 800a24e:	d106      	bne.n	800a25e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	2200      	movs	r2, #0
 800a254:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800a258:	6878      	ldr	r0, [r7, #4]
 800a25a:	f000 f841 	bl	800a2e0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	2202      	movs	r2, #2
 800a262:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	681a      	ldr	r2, [r3, #0]
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	3304      	adds	r3, #4
 800a26e:	4619      	mov	r1, r3
 800a270:	4610      	mov	r0, r2
 800a272:	f000 ffeb 	bl	800b24c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	2201      	movs	r2, #1
 800a27a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	2201      	movs	r2, #1
 800a282:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	2201      	movs	r2, #1
 800a28a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	2201      	movs	r2, #1
 800a292:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	2201      	movs	r2, #1
 800a29a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	2201      	movs	r2, #1
 800a2a2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	2201      	movs	r2, #1
 800a2aa:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	2201      	movs	r2, #1
 800a2b2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	2201      	movs	r2, #1
 800a2ba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	2201      	movs	r2, #1
 800a2c2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	2201      	movs	r2, #1
 800a2ca:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	2201      	movs	r2, #1
 800a2d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a2d6:	2300      	movs	r3, #0
}
 800a2d8:	4618      	mov	r0, r3
 800a2da:	3708      	adds	r7, #8
 800a2dc:	46bd      	mov	sp, r7
 800a2de:	bd80      	pop	{r7, pc}

0800a2e0 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800a2e0:	b480      	push	{r7}
 800a2e2:	b083      	sub	sp, #12
 800a2e4:	af00      	add	r7, sp, #0
 800a2e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800a2e8:	bf00      	nop
 800a2ea:	370c      	adds	r7, #12
 800a2ec:	46bd      	mov	sp, r7
 800a2ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2f2:	4770      	bx	lr

0800a2f4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800a2f4:	b580      	push	{r7, lr}
 800a2f6:	b084      	sub	sp, #16
 800a2f8:	af00      	add	r7, sp, #0
 800a2fa:	6078      	str	r0, [r7, #4]
 800a2fc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800a2fe:	683b      	ldr	r3, [r7, #0]
 800a300:	2b00      	cmp	r3, #0
 800a302:	d109      	bne.n	800a318 <HAL_TIM_PWM_Start+0x24>
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a30a:	b2db      	uxtb	r3, r3
 800a30c:	2b01      	cmp	r3, #1
 800a30e:	bf14      	ite	ne
 800a310:	2301      	movne	r3, #1
 800a312:	2300      	moveq	r3, #0
 800a314:	b2db      	uxtb	r3, r3
 800a316:	e03c      	b.n	800a392 <HAL_TIM_PWM_Start+0x9e>
 800a318:	683b      	ldr	r3, [r7, #0]
 800a31a:	2b04      	cmp	r3, #4
 800a31c:	d109      	bne.n	800a332 <HAL_TIM_PWM_Start+0x3e>
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800a324:	b2db      	uxtb	r3, r3
 800a326:	2b01      	cmp	r3, #1
 800a328:	bf14      	ite	ne
 800a32a:	2301      	movne	r3, #1
 800a32c:	2300      	moveq	r3, #0
 800a32e:	b2db      	uxtb	r3, r3
 800a330:	e02f      	b.n	800a392 <HAL_TIM_PWM_Start+0x9e>
 800a332:	683b      	ldr	r3, [r7, #0]
 800a334:	2b08      	cmp	r3, #8
 800a336:	d109      	bne.n	800a34c <HAL_TIM_PWM_Start+0x58>
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800a33e:	b2db      	uxtb	r3, r3
 800a340:	2b01      	cmp	r3, #1
 800a342:	bf14      	ite	ne
 800a344:	2301      	movne	r3, #1
 800a346:	2300      	moveq	r3, #0
 800a348:	b2db      	uxtb	r3, r3
 800a34a:	e022      	b.n	800a392 <HAL_TIM_PWM_Start+0x9e>
 800a34c:	683b      	ldr	r3, [r7, #0]
 800a34e:	2b0c      	cmp	r3, #12
 800a350:	d109      	bne.n	800a366 <HAL_TIM_PWM_Start+0x72>
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a358:	b2db      	uxtb	r3, r3
 800a35a:	2b01      	cmp	r3, #1
 800a35c:	bf14      	ite	ne
 800a35e:	2301      	movne	r3, #1
 800a360:	2300      	moveq	r3, #0
 800a362:	b2db      	uxtb	r3, r3
 800a364:	e015      	b.n	800a392 <HAL_TIM_PWM_Start+0x9e>
 800a366:	683b      	ldr	r3, [r7, #0]
 800a368:	2b10      	cmp	r3, #16
 800a36a:	d109      	bne.n	800a380 <HAL_TIM_PWM_Start+0x8c>
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800a372:	b2db      	uxtb	r3, r3
 800a374:	2b01      	cmp	r3, #1
 800a376:	bf14      	ite	ne
 800a378:	2301      	movne	r3, #1
 800a37a:	2300      	moveq	r3, #0
 800a37c:	b2db      	uxtb	r3, r3
 800a37e:	e008      	b.n	800a392 <HAL_TIM_PWM_Start+0x9e>
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800a386:	b2db      	uxtb	r3, r3
 800a388:	2b01      	cmp	r3, #1
 800a38a:	bf14      	ite	ne
 800a38c:	2301      	movne	r3, #1
 800a38e:	2300      	moveq	r3, #0
 800a390:	b2db      	uxtb	r3, r3
 800a392:	2b00      	cmp	r3, #0
 800a394:	d001      	beq.n	800a39a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800a396:	2301      	movs	r3, #1
 800a398:	e0a1      	b.n	800a4de <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800a39a:	683b      	ldr	r3, [r7, #0]
 800a39c:	2b00      	cmp	r3, #0
 800a39e:	d104      	bne.n	800a3aa <HAL_TIM_PWM_Start+0xb6>
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	2202      	movs	r2, #2
 800a3a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a3a8:	e023      	b.n	800a3f2 <HAL_TIM_PWM_Start+0xfe>
 800a3aa:	683b      	ldr	r3, [r7, #0]
 800a3ac:	2b04      	cmp	r3, #4
 800a3ae:	d104      	bne.n	800a3ba <HAL_TIM_PWM_Start+0xc6>
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	2202      	movs	r2, #2
 800a3b4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a3b8:	e01b      	b.n	800a3f2 <HAL_TIM_PWM_Start+0xfe>
 800a3ba:	683b      	ldr	r3, [r7, #0]
 800a3bc:	2b08      	cmp	r3, #8
 800a3be:	d104      	bne.n	800a3ca <HAL_TIM_PWM_Start+0xd6>
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	2202      	movs	r2, #2
 800a3c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a3c8:	e013      	b.n	800a3f2 <HAL_TIM_PWM_Start+0xfe>
 800a3ca:	683b      	ldr	r3, [r7, #0]
 800a3cc:	2b0c      	cmp	r3, #12
 800a3ce:	d104      	bne.n	800a3da <HAL_TIM_PWM_Start+0xe6>
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	2202      	movs	r2, #2
 800a3d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a3d8:	e00b      	b.n	800a3f2 <HAL_TIM_PWM_Start+0xfe>
 800a3da:	683b      	ldr	r3, [r7, #0]
 800a3dc:	2b10      	cmp	r3, #16
 800a3de:	d104      	bne.n	800a3ea <HAL_TIM_PWM_Start+0xf6>
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	2202      	movs	r2, #2
 800a3e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a3e8:	e003      	b.n	800a3f2 <HAL_TIM_PWM_Start+0xfe>
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	2202      	movs	r2, #2
 800a3ee:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	681b      	ldr	r3, [r3, #0]
 800a3f6:	2201      	movs	r2, #1
 800a3f8:	6839      	ldr	r1, [r7, #0]
 800a3fa:	4618      	mov	r0, r3
 800a3fc:	f001 fc5e 	bl	800bcbc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	681b      	ldr	r3, [r3, #0]
 800a404:	4a38      	ldr	r2, [pc, #224]	; (800a4e8 <HAL_TIM_PWM_Start+0x1f4>)
 800a406:	4293      	cmp	r3, r2
 800a408:	d013      	beq.n	800a432 <HAL_TIM_PWM_Start+0x13e>
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	681b      	ldr	r3, [r3, #0]
 800a40e:	4a37      	ldr	r2, [pc, #220]	; (800a4ec <HAL_TIM_PWM_Start+0x1f8>)
 800a410:	4293      	cmp	r3, r2
 800a412:	d00e      	beq.n	800a432 <HAL_TIM_PWM_Start+0x13e>
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	681b      	ldr	r3, [r3, #0]
 800a418:	4a35      	ldr	r2, [pc, #212]	; (800a4f0 <HAL_TIM_PWM_Start+0x1fc>)
 800a41a:	4293      	cmp	r3, r2
 800a41c:	d009      	beq.n	800a432 <HAL_TIM_PWM_Start+0x13e>
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	681b      	ldr	r3, [r3, #0]
 800a422:	4a34      	ldr	r2, [pc, #208]	; (800a4f4 <HAL_TIM_PWM_Start+0x200>)
 800a424:	4293      	cmp	r3, r2
 800a426:	d004      	beq.n	800a432 <HAL_TIM_PWM_Start+0x13e>
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	681b      	ldr	r3, [r3, #0]
 800a42c:	4a32      	ldr	r2, [pc, #200]	; (800a4f8 <HAL_TIM_PWM_Start+0x204>)
 800a42e:	4293      	cmp	r3, r2
 800a430:	d101      	bne.n	800a436 <HAL_TIM_PWM_Start+0x142>
 800a432:	2301      	movs	r3, #1
 800a434:	e000      	b.n	800a438 <HAL_TIM_PWM_Start+0x144>
 800a436:	2300      	movs	r3, #0
 800a438:	2b00      	cmp	r3, #0
 800a43a:	d007      	beq.n	800a44c <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	681b      	ldr	r3, [r3, #0]
 800a440:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	681b      	ldr	r3, [r3, #0]
 800a446:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800a44a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	681b      	ldr	r3, [r3, #0]
 800a450:	4a25      	ldr	r2, [pc, #148]	; (800a4e8 <HAL_TIM_PWM_Start+0x1f4>)
 800a452:	4293      	cmp	r3, r2
 800a454:	d022      	beq.n	800a49c <HAL_TIM_PWM_Start+0x1a8>
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	681b      	ldr	r3, [r3, #0]
 800a45a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a45e:	d01d      	beq.n	800a49c <HAL_TIM_PWM_Start+0x1a8>
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	681b      	ldr	r3, [r3, #0]
 800a464:	4a25      	ldr	r2, [pc, #148]	; (800a4fc <HAL_TIM_PWM_Start+0x208>)
 800a466:	4293      	cmp	r3, r2
 800a468:	d018      	beq.n	800a49c <HAL_TIM_PWM_Start+0x1a8>
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	681b      	ldr	r3, [r3, #0]
 800a46e:	4a24      	ldr	r2, [pc, #144]	; (800a500 <HAL_TIM_PWM_Start+0x20c>)
 800a470:	4293      	cmp	r3, r2
 800a472:	d013      	beq.n	800a49c <HAL_TIM_PWM_Start+0x1a8>
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	681b      	ldr	r3, [r3, #0]
 800a478:	4a22      	ldr	r2, [pc, #136]	; (800a504 <HAL_TIM_PWM_Start+0x210>)
 800a47a:	4293      	cmp	r3, r2
 800a47c:	d00e      	beq.n	800a49c <HAL_TIM_PWM_Start+0x1a8>
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	681b      	ldr	r3, [r3, #0]
 800a482:	4a1a      	ldr	r2, [pc, #104]	; (800a4ec <HAL_TIM_PWM_Start+0x1f8>)
 800a484:	4293      	cmp	r3, r2
 800a486:	d009      	beq.n	800a49c <HAL_TIM_PWM_Start+0x1a8>
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	681b      	ldr	r3, [r3, #0]
 800a48c:	4a1e      	ldr	r2, [pc, #120]	; (800a508 <HAL_TIM_PWM_Start+0x214>)
 800a48e:	4293      	cmp	r3, r2
 800a490:	d004      	beq.n	800a49c <HAL_TIM_PWM_Start+0x1a8>
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	681b      	ldr	r3, [r3, #0]
 800a496:	4a16      	ldr	r2, [pc, #88]	; (800a4f0 <HAL_TIM_PWM_Start+0x1fc>)
 800a498:	4293      	cmp	r3, r2
 800a49a:	d115      	bne.n	800a4c8 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	681b      	ldr	r3, [r3, #0]
 800a4a0:	689a      	ldr	r2, [r3, #8]
 800a4a2:	4b1a      	ldr	r3, [pc, #104]	; (800a50c <HAL_TIM_PWM_Start+0x218>)
 800a4a4:	4013      	ands	r3, r2
 800a4a6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a4a8:	68fb      	ldr	r3, [r7, #12]
 800a4aa:	2b06      	cmp	r3, #6
 800a4ac:	d015      	beq.n	800a4da <HAL_TIM_PWM_Start+0x1e6>
 800a4ae:	68fb      	ldr	r3, [r7, #12]
 800a4b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a4b4:	d011      	beq.n	800a4da <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 800a4b6:	687b      	ldr	r3, [r7, #4]
 800a4b8:	681b      	ldr	r3, [r3, #0]
 800a4ba:	681a      	ldr	r2, [r3, #0]
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	681b      	ldr	r3, [r3, #0]
 800a4c0:	f042 0201 	orr.w	r2, r2, #1
 800a4c4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a4c6:	e008      	b.n	800a4da <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	681b      	ldr	r3, [r3, #0]
 800a4cc:	681a      	ldr	r2, [r3, #0]
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	681b      	ldr	r3, [r3, #0]
 800a4d2:	f042 0201 	orr.w	r2, r2, #1
 800a4d6:	601a      	str	r2, [r3, #0]
 800a4d8:	e000      	b.n	800a4dc <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a4da:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800a4dc:	2300      	movs	r3, #0
}
 800a4de:	4618      	mov	r0, r3
 800a4e0:	3710      	adds	r7, #16
 800a4e2:	46bd      	mov	sp, r7
 800a4e4:	bd80      	pop	{r7, pc}
 800a4e6:	bf00      	nop
 800a4e8:	40010000 	.word	0x40010000
 800a4ec:	40010400 	.word	0x40010400
 800a4f0:	40014000 	.word	0x40014000
 800a4f4:	40014400 	.word	0x40014400
 800a4f8:	40014800 	.word	0x40014800
 800a4fc:	40000400 	.word	0x40000400
 800a500:	40000800 	.word	0x40000800
 800a504:	40000c00 	.word	0x40000c00
 800a508:	40001800 	.word	0x40001800
 800a50c:	00010007 	.word	0x00010007

0800a510 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800a510:	b580      	push	{r7, lr}
 800a512:	b082      	sub	sp, #8
 800a514:	af00      	add	r7, sp, #0
 800a516:	6078      	str	r0, [r7, #4]
 800a518:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	681b      	ldr	r3, [r3, #0]
 800a51e:	2200      	movs	r2, #0
 800a520:	6839      	ldr	r1, [r7, #0]
 800a522:	4618      	mov	r0, r3
 800a524:	f001 fbca 	bl	800bcbc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	681b      	ldr	r3, [r3, #0]
 800a52c:	4a3e      	ldr	r2, [pc, #248]	; (800a628 <HAL_TIM_PWM_Stop+0x118>)
 800a52e:	4293      	cmp	r3, r2
 800a530:	d013      	beq.n	800a55a <HAL_TIM_PWM_Stop+0x4a>
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	681b      	ldr	r3, [r3, #0]
 800a536:	4a3d      	ldr	r2, [pc, #244]	; (800a62c <HAL_TIM_PWM_Stop+0x11c>)
 800a538:	4293      	cmp	r3, r2
 800a53a:	d00e      	beq.n	800a55a <HAL_TIM_PWM_Stop+0x4a>
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	681b      	ldr	r3, [r3, #0]
 800a540:	4a3b      	ldr	r2, [pc, #236]	; (800a630 <HAL_TIM_PWM_Stop+0x120>)
 800a542:	4293      	cmp	r3, r2
 800a544:	d009      	beq.n	800a55a <HAL_TIM_PWM_Stop+0x4a>
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	681b      	ldr	r3, [r3, #0]
 800a54a:	4a3a      	ldr	r2, [pc, #232]	; (800a634 <HAL_TIM_PWM_Stop+0x124>)
 800a54c:	4293      	cmp	r3, r2
 800a54e:	d004      	beq.n	800a55a <HAL_TIM_PWM_Stop+0x4a>
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	681b      	ldr	r3, [r3, #0]
 800a554:	4a38      	ldr	r2, [pc, #224]	; (800a638 <HAL_TIM_PWM_Stop+0x128>)
 800a556:	4293      	cmp	r3, r2
 800a558:	d101      	bne.n	800a55e <HAL_TIM_PWM_Stop+0x4e>
 800a55a:	2301      	movs	r3, #1
 800a55c:	e000      	b.n	800a560 <HAL_TIM_PWM_Stop+0x50>
 800a55e:	2300      	movs	r3, #0
 800a560:	2b00      	cmp	r3, #0
 800a562:	d017      	beq.n	800a594 <HAL_TIM_PWM_Stop+0x84>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	681b      	ldr	r3, [r3, #0]
 800a568:	6a1a      	ldr	r2, [r3, #32]
 800a56a:	f241 1311 	movw	r3, #4369	; 0x1111
 800a56e:	4013      	ands	r3, r2
 800a570:	2b00      	cmp	r3, #0
 800a572:	d10f      	bne.n	800a594 <HAL_TIM_PWM_Stop+0x84>
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	681b      	ldr	r3, [r3, #0]
 800a578:	6a1a      	ldr	r2, [r3, #32]
 800a57a:	f240 4344 	movw	r3, #1092	; 0x444
 800a57e:	4013      	ands	r3, r2
 800a580:	2b00      	cmp	r3, #0
 800a582:	d107      	bne.n	800a594 <HAL_TIM_PWM_Stop+0x84>
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	681b      	ldr	r3, [r3, #0]
 800a588:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	681b      	ldr	r3, [r3, #0]
 800a58e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800a592:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	681b      	ldr	r3, [r3, #0]
 800a598:	6a1a      	ldr	r2, [r3, #32]
 800a59a:	f241 1311 	movw	r3, #4369	; 0x1111
 800a59e:	4013      	ands	r3, r2
 800a5a0:	2b00      	cmp	r3, #0
 800a5a2:	d10f      	bne.n	800a5c4 <HAL_TIM_PWM_Stop+0xb4>
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	681b      	ldr	r3, [r3, #0]
 800a5a8:	6a1a      	ldr	r2, [r3, #32]
 800a5aa:	f240 4344 	movw	r3, #1092	; 0x444
 800a5ae:	4013      	ands	r3, r2
 800a5b0:	2b00      	cmp	r3, #0
 800a5b2:	d107      	bne.n	800a5c4 <HAL_TIM_PWM_Stop+0xb4>
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	681b      	ldr	r3, [r3, #0]
 800a5b8:	681a      	ldr	r2, [r3, #0]
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	681b      	ldr	r3, [r3, #0]
 800a5be:	f022 0201 	bic.w	r2, r2, #1
 800a5c2:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800a5c4:	683b      	ldr	r3, [r7, #0]
 800a5c6:	2b00      	cmp	r3, #0
 800a5c8:	d104      	bne.n	800a5d4 <HAL_TIM_PWM_Stop+0xc4>
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	2201      	movs	r2, #1
 800a5ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a5d2:	e023      	b.n	800a61c <HAL_TIM_PWM_Stop+0x10c>
 800a5d4:	683b      	ldr	r3, [r7, #0]
 800a5d6:	2b04      	cmp	r3, #4
 800a5d8:	d104      	bne.n	800a5e4 <HAL_TIM_PWM_Stop+0xd4>
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	2201      	movs	r2, #1
 800a5de:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a5e2:	e01b      	b.n	800a61c <HAL_TIM_PWM_Stop+0x10c>
 800a5e4:	683b      	ldr	r3, [r7, #0]
 800a5e6:	2b08      	cmp	r3, #8
 800a5e8:	d104      	bne.n	800a5f4 <HAL_TIM_PWM_Stop+0xe4>
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	2201      	movs	r2, #1
 800a5ee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a5f2:	e013      	b.n	800a61c <HAL_TIM_PWM_Stop+0x10c>
 800a5f4:	683b      	ldr	r3, [r7, #0]
 800a5f6:	2b0c      	cmp	r3, #12
 800a5f8:	d104      	bne.n	800a604 <HAL_TIM_PWM_Stop+0xf4>
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	2201      	movs	r2, #1
 800a5fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a602:	e00b      	b.n	800a61c <HAL_TIM_PWM_Stop+0x10c>
 800a604:	683b      	ldr	r3, [r7, #0]
 800a606:	2b10      	cmp	r3, #16
 800a608:	d104      	bne.n	800a614 <HAL_TIM_PWM_Stop+0x104>
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	2201      	movs	r2, #1
 800a60e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a612:	e003      	b.n	800a61c <HAL_TIM_PWM_Stop+0x10c>
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	2201      	movs	r2, #1
 800a618:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Return function status */
  return HAL_OK;
 800a61c:	2300      	movs	r3, #0
}
 800a61e:	4618      	mov	r0, r3
 800a620:	3708      	adds	r7, #8
 800a622:	46bd      	mov	sp, r7
 800a624:	bd80      	pop	{r7, pc}
 800a626:	bf00      	nop
 800a628:	40010000 	.word	0x40010000
 800a62c:	40010400 	.word	0x40010400
 800a630:	40014000 	.word	0x40014000
 800a634:	40014400 	.word	0x40014400
 800a638:	40014800 	.word	0x40014800

0800a63c <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 800a63c:	b580      	push	{r7, lr}
 800a63e:	b082      	sub	sp, #8
 800a640:	af00      	add	r7, sp, #0
 800a642:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	2b00      	cmp	r3, #0
 800a648:	d101      	bne.n	800a64e <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800a64a:	2301      	movs	r3, #1
 800a64c:	e049      	b.n	800a6e2 <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a654:	b2db      	uxtb	r3, r3
 800a656:	2b00      	cmp	r3, #0
 800a658:	d106      	bne.n	800a668 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	2200      	movs	r2, #0
 800a65e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800a662:	6878      	ldr	r0, [r7, #4]
 800a664:	f000 f841 	bl	800a6ea <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	2202      	movs	r2, #2
 800a66c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	681a      	ldr	r2, [r3, #0]
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	3304      	adds	r3, #4
 800a678:	4619      	mov	r1, r3
 800a67a:	4610      	mov	r0, r2
 800a67c:	f000 fde6 	bl	800b24c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a680:	687b      	ldr	r3, [r7, #4]
 800a682:	2201      	movs	r2, #1
 800a684:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	2201      	movs	r2, #1
 800a68c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	2201      	movs	r2, #1
 800a694:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	2201      	movs	r2, #1
 800a69c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	2201      	movs	r2, #1
 800a6a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	2201      	movs	r2, #1
 800a6ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	2201      	movs	r2, #1
 800a6b4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	2201      	movs	r2, #1
 800a6bc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	2201      	movs	r2, #1
 800a6c4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	2201      	movs	r2, #1
 800a6cc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	2201      	movs	r2, #1
 800a6d4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	2201      	movs	r2, #1
 800a6dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a6e0:	2300      	movs	r3, #0
}
 800a6e2:	4618      	mov	r0, r3
 800a6e4:	3708      	adds	r7, #8
 800a6e6:	46bd      	mov	sp, r7
 800a6e8:	bd80      	pop	{r7, pc}

0800a6ea <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 800a6ea:	b480      	push	{r7}
 800a6ec:	b083      	sub	sp, #12
 800a6ee:	af00      	add	r7, sp, #0
 800a6f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 800a6f2:	bf00      	nop
 800a6f4:	370c      	adds	r7, #12
 800a6f6:	46bd      	mov	sp, r7
 800a6f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6fc:	4770      	bx	lr

0800a6fe <HAL_TIM_IC_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800a6fe:	b580      	push	{r7, lr}
 800a700:	b082      	sub	sp, #8
 800a702:	af00      	add	r7, sp, #0
 800a704:	6078      	str	r0, [r7, #4]
 800a706:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	681b      	ldr	r3, [r3, #0]
 800a70c:	2200      	movs	r2, #0
 800a70e:	6839      	ldr	r1, [r7, #0]
 800a710:	4618      	mov	r0, r3
 800a712:	f001 fad3 	bl	800bcbc <TIM_CCxChannelCmd>

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	681b      	ldr	r3, [r3, #0]
 800a71a:	6a1a      	ldr	r2, [r3, #32]
 800a71c:	f241 1311 	movw	r3, #4369	; 0x1111
 800a720:	4013      	ands	r3, r2
 800a722:	2b00      	cmp	r3, #0
 800a724:	d10f      	bne.n	800a746 <HAL_TIM_IC_Stop+0x48>
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	681b      	ldr	r3, [r3, #0]
 800a72a:	6a1a      	ldr	r2, [r3, #32]
 800a72c:	f240 4344 	movw	r3, #1092	; 0x444
 800a730:	4013      	ands	r3, r2
 800a732:	2b00      	cmp	r3, #0
 800a734:	d107      	bne.n	800a746 <HAL_TIM_IC_Stop+0x48>
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	681b      	ldr	r3, [r3, #0]
 800a73a:	681a      	ldr	r2, [r3, #0]
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	681b      	ldr	r3, [r3, #0]
 800a740:	f022 0201 	bic.w	r2, r2, #1
 800a744:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800a746:	683b      	ldr	r3, [r7, #0]
 800a748:	2b00      	cmp	r3, #0
 800a74a:	d104      	bne.n	800a756 <HAL_TIM_IC_Stop+0x58>
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	2201      	movs	r2, #1
 800a750:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a754:	e023      	b.n	800a79e <HAL_TIM_IC_Stop+0xa0>
 800a756:	683b      	ldr	r3, [r7, #0]
 800a758:	2b04      	cmp	r3, #4
 800a75a:	d104      	bne.n	800a766 <HAL_TIM_IC_Stop+0x68>
 800a75c:	687b      	ldr	r3, [r7, #4]
 800a75e:	2201      	movs	r2, #1
 800a760:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a764:	e01b      	b.n	800a79e <HAL_TIM_IC_Stop+0xa0>
 800a766:	683b      	ldr	r3, [r7, #0]
 800a768:	2b08      	cmp	r3, #8
 800a76a:	d104      	bne.n	800a776 <HAL_TIM_IC_Stop+0x78>
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	2201      	movs	r2, #1
 800a770:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a774:	e013      	b.n	800a79e <HAL_TIM_IC_Stop+0xa0>
 800a776:	683b      	ldr	r3, [r7, #0]
 800a778:	2b0c      	cmp	r3, #12
 800a77a:	d104      	bne.n	800a786 <HAL_TIM_IC_Stop+0x88>
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	2201      	movs	r2, #1
 800a780:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a784:	e00b      	b.n	800a79e <HAL_TIM_IC_Stop+0xa0>
 800a786:	683b      	ldr	r3, [r7, #0]
 800a788:	2b10      	cmp	r3, #16
 800a78a:	d104      	bne.n	800a796 <HAL_TIM_IC_Stop+0x98>
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	2201      	movs	r2, #1
 800a790:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a794:	e003      	b.n	800a79e <HAL_TIM_IC_Stop+0xa0>
 800a796:	687b      	ldr	r3, [r7, #4]
 800a798:	2201      	movs	r2, #1
 800a79a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800a79e:	683b      	ldr	r3, [r7, #0]
 800a7a0:	2b00      	cmp	r3, #0
 800a7a2:	d104      	bne.n	800a7ae <HAL_TIM_IC_Stop+0xb0>
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	2201      	movs	r2, #1
 800a7a8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a7ac:	e013      	b.n	800a7d6 <HAL_TIM_IC_Stop+0xd8>
 800a7ae:	683b      	ldr	r3, [r7, #0]
 800a7b0:	2b04      	cmp	r3, #4
 800a7b2:	d104      	bne.n	800a7be <HAL_TIM_IC_Stop+0xc0>
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	2201      	movs	r2, #1
 800a7b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a7bc:	e00b      	b.n	800a7d6 <HAL_TIM_IC_Stop+0xd8>
 800a7be:	683b      	ldr	r3, [r7, #0]
 800a7c0:	2b08      	cmp	r3, #8
 800a7c2:	d104      	bne.n	800a7ce <HAL_TIM_IC_Stop+0xd0>
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	2201      	movs	r2, #1
 800a7c8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800a7cc:	e003      	b.n	800a7d6 <HAL_TIM_IC_Stop+0xd8>
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	2201      	movs	r2, #1
 800a7d2:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Return function status */
  return HAL_OK;
 800a7d6:	2300      	movs	r3, #0
}
 800a7d8:	4618      	mov	r0, r3
 800a7da:	3708      	adds	r7, #8
 800a7dc:	46bd      	mov	sp, r7
 800a7de:	bd80      	pop	{r7, pc}

0800a7e0 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800a7e0:	b580      	push	{r7, lr}
 800a7e2:	b084      	sub	sp, #16
 800a7e4:	af00      	add	r7, sp, #0
 800a7e6:	6078      	str	r0, [r7, #4]
 800a7e8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a7ea:	2300      	movs	r3, #0
 800a7ec:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800a7ee:	683b      	ldr	r3, [r7, #0]
 800a7f0:	2b00      	cmp	r3, #0
 800a7f2:	d104      	bne.n	800a7fe <HAL_TIM_IC_Start_IT+0x1e>
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a7fa:	b2db      	uxtb	r3, r3
 800a7fc:	e023      	b.n	800a846 <HAL_TIM_IC_Start_IT+0x66>
 800a7fe:	683b      	ldr	r3, [r7, #0]
 800a800:	2b04      	cmp	r3, #4
 800a802:	d104      	bne.n	800a80e <HAL_TIM_IC_Start_IT+0x2e>
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800a80a:	b2db      	uxtb	r3, r3
 800a80c:	e01b      	b.n	800a846 <HAL_TIM_IC_Start_IT+0x66>
 800a80e:	683b      	ldr	r3, [r7, #0]
 800a810:	2b08      	cmp	r3, #8
 800a812:	d104      	bne.n	800a81e <HAL_TIM_IC_Start_IT+0x3e>
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800a81a:	b2db      	uxtb	r3, r3
 800a81c:	e013      	b.n	800a846 <HAL_TIM_IC_Start_IT+0x66>
 800a81e:	683b      	ldr	r3, [r7, #0]
 800a820:	2b0c      	cmp	r3, #12
 800a822:	d104      	bne.n	800a82e <HAL_TIM_IC_Start_IT+0x4e>
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a82a:	b2db      	uxtb	r3, r3
 800a82c:	e00b      	b.n	800a846 <HAL_TIM_IC_Start_IT+0x66>
 800a82e:	683b      	ldr	r3, [r7, #0]
 800a830:	2b10      	cmp	r3, #16
 800a832:	d104      	bne.n	800a83e <HAL_TIM_IC_Start_IT+0x5e>
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800a83a:	b2db      	uxtb	r3, r3
 800a83c:	e003      	b.n	800a846 <HAL_TIM_IC_Start_IT+0x66>
 800a83e:	687b      	ldr	r3, [r7, #4]
 800a840:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800a844:	b2db      	uxtb	r3, r3
 800a846:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 800a848:	683b      	ldr	r3, [r7, #0]
 800a84a:	2b00      	cmp	r3, #0
 800a84c:	d104      	bne.n	800a858 <HAL_TIM_IC_Start_IT+0x78>
 800a84e:	687b      	ldr	r3, [r7, #4]
 800a850:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a854:	b2db      	uxtb	r3, r3
 800a856:	e013      	b.n	800a880 <HAL_TIM_IC_Start_IT+0xa0>
 800a858:	683b      	ldr	r3, [r7, #0]
 800a85a:	2b04      	cmp	r3, #4
 800a85c:	d104      	bne.n	800a868 <HAL_TIM_IC_Start_IT+0x88>
 800a85e:	687b      	ldr	r3, [r7, #4]
 800a860:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a864:	b2db      	uxtb	r3, r3
 800a866:	e00b      	b.n	800a880 <HAL_TIM_IC_Start_IT+0xa0>
 800a868:	683b      	ldr	r3, [r7, #0]
 800a86a:	2b08      	cmp	r3, #8
 800a86c:	d104      	bne.n	800a878 <HAL_TIM_IC_Start_IT+0x98>
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800a874:	b2db      	uxtb	r3, r3
 800a876:	e003      	b.n	800a880 <HAL_TIM_IC_Start_IT+0xa0>
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 800a87e:	b2db      	uxtb	r3, r3
 800a880:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 800a882:	7bbb      	ldrb	r3, [r7, #14]
 800a884:	2b01      	cmp	r3, #1
 800a886:	d102      	bne.n	800a88e <HAL_TIM_IC_Start_IT+0xae>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 800a888:	7b7b      	ldrb	r3, [r7, #13]
 800a88a:	2b01      	cmp	r3, #1
 800a88c:	d001      	beq.n	800a892 <HAL_TIM_IC_Start_IT+0xb2>
  {
    return HAL_ERROR;
 800a88e:	2301      	movs	r3, #1
 800a890:	e0e2      	b.n	800aa58 <HAL_TIM_IC_Start_IT+0x278>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800a892:	683b      	ldr	r3, [r7, #0]
 800a894:	2b00      	cmp	r3, #0
 800a896:	d104      	bne.n	800a8a2 <HAL_TIM_IC_Start_IT+0xc2>
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	2202      	movs	r2, #2
 800a89c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a8a0:	e023      	b.n	800a8ea <HAL_TIM_IC_Start_IT+0x10a>
 800a8a2:	683b      	ldr	r3, [r7, #0]
 800a8a4:	2b04      	cmp	r3, #4
 800a8a6:	d104      	bne.n	800a8b2 <HAL_TIM_IC_Start_IT+0xd2>
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	2202      	movs	r2, #2
 800a8ac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a8b0:	e01b      	b.n	800a8ea <HAL_TIM_IC_Start_IT+0x10a>
 800a8b2:	683b      	ldr	r3, [r7, #0]
 800a8b4:	2b08      	cmp	r3, #8
 800a8b6:	d104      	bne.n	800a8c2 <HAL_TIM_IC_Start_IT+0xe2>
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	2202      	movs	r2, #2
 800a8bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a8c0:	e013      	b.n	800a8ea <HAL_TIM_IC_Start_IT+0x10a>
 800a8c2:	683b      	ldr	r3, [r7, #0]
 800a8c4:	2b0c      	cmp	r3, #12
 800a8c6:	d104      	bne.n	800a8d2 <HAL_TIM_IC_Start_IT+0xf2>
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	2202      	movs	r2, #2
 800a8cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a8d0:	e00b      	b.n	800a8ea <HAL_TIM_IC_Start_IT+0x10a>
 800a8d2:	683b      	ldr	r3, [r7, #0]
 800a8d4:	2b10      	cmp	r3, #16
 800a8d6:	d104      	bne.n	800a8e2 <HAL_TIM_IC_Start_IT+0x102>
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	2202      	movs	r2, #2
 800a8dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a8e0:	e003      	b.n	800a8ea <HAL_TIM_IC_Start_IT+0x10a>
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	2202      	movs	r2, #2
 800a8e6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800a8ea:	683b      	ldr	r3, [r7, #0]
 800a8ec:	2b00      	cmp	r3, #0
 800a8ee:	d104      	bne.n	800a8fa <HAL_TIM_IC_Start_IT+0x11a>
 800a8f0:	687b      	ldr	r3, [r7, #4]
 800a8f2:	2202      	movs	r2, #2
 800a8f4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a8f8:	e013      	b.n	800a922 <HAL_TIM_IC_Start_IT+0x142>
 800a8fa:	683b      	ldr	r3, [r7, #0]
 800a8fc:	2b04      	cmp	r3, #4
 800a8fe:	d104      	bne.n	800a90a <HAL_TIM_IC_Start_IT+0x12a>
 800a900:	687b      	ldr	r3, [r7, #4]
 800a902:	2202      	movs	r2, #2
 800a904:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a908:	e00b      	b.n	800a922 <HAL_TIM_IC_Start_IT+0x142>
 800a90a:	683b      	ldr	r3, [r7, #0]
 800a90c:	2b08      	cmp	r3, #8
 800a90e:	d104      	bne.n	800a91a <HAL_TIM_IC_Start_IT+0x13a>
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	2202      	movs	r2, #2
 800a914:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800a918:	e003      	b.n	800a922 <HAL_TIM_IC_Start_IT+0x142>
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	2202      	movs	r2, #2
 800a91e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  switch (Channel)
 800a922:	683b      	ldr	r3, [r7, #0]
 800a924:	2b0c      	cmp	r3, #12
 800a926:	d841      	bhi.n	800a9ac <HAL_TIM_IC_Start_IT+0x1cc>
 800a928:	a201      	add	r2, pc, #4	; (adr r2, 800a930 <HAL_TIM_IC_Start_IT+0x150>)
 800a92a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a92e:	bf00      	nop
 800a930:	0800a965 	.word	0x0800a965
 800a934:	0800a9ad 	.word	0x0800a9ad
 800a938:	0800a9ad 	.word	0x0800a9ad
 800a93c:	0800a9ad 	.word	0x0800a9ad
 800a940:	0800a977 	.word	0x0800a977
 800a944:	0800a9ad 	.word	0x0800a9ad
 800a948:	0800a9ad 	.word	0x0800a9ad
 800a94c:	0800a9ad 	.word	0x0800a9ad
 800a950:	0800a989 	.word	0x0800a989
 800a954:	0800a9ad 	.word	0x0800a9ad
 800a958:	0800a9ad 	.word	0x0800a9ad
 800a95c:	0800a9ad 	.word	0x0800a9ad
 800a960:	0800a99b 	.word	0x0800a99b
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	681b      	ldr	r3, [r3, #0]
 800a968:	68da      	ldr	r2, [r3, #12]
 800a96a:	687b      	ldr	r3, [r7, #4]
 800a96c:	681b      	ldr	r3, [r3, #0]
 800a96e:	f042 0202 	orr.w	r2, r2, #2
 800a972:	60da      	str	r2, [r3, #12]
      break;
 800a974:	e01d      	b.n	800a9b2 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800a976:	687b      	ldr	r3, [r7, #4]
 800a978:	681b      	ldr	r3, [r3, #0]
 800a97a:	68da      	ldr	r2, [r3, #12]
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	681b      	ldr	r3, [r3, #0]
 800a980:	f042 0204 	orr.w	r2, r2, #4
 800a984:	60da      	str	r2, [r3, #12]
      break;
 800a986:	e014      	b.n	800a9b2 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	681b      	ldr	r3, [r3, #0]
 800a98c:	68da      	ldr	r2, [r3, #12]
 800a98e:	687b      	ldr	r3, [r7, #4]
 800a990:	681b      	ldr	r3, [r3, #0]
 800a992:	f042 0208 	orr.w	r2, r2, #8
 800a996:	60da      	str	r2, [r3, #12]
      break;
 800a998:	e00b      	b.n	800a9b2 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800a99a:	687b      	ldr	r3, [r7, #4]
 800a99c:	681b      	ldr	r3, [r3, #0]
 800a99e:	68da      	ldr	r2, [r3, #12]
 800a9a0:	687b      	ldr	r3, [r7, #4]
 800a9a2:	681b      	ldr	r3, [r3, #0]
 800a9a4:	f042 0210 	orr.w	r2, r2, #16
 800a9a8:	60da      	str	r2, [r3, #12]
      break;
 800a9aa:	e002      	b.n	800a9b2 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    default:
      status = HAL_ERROR;
 800a9ac:	2301      	movs	r3, #1
 800a9ae:	73fb      	strb	r3, [r7, #15]
      break;
 800a9b0:	bf00      	nop
  }

  if (status == HAL_OK)
 800a9b2:	7bfb      	ldrb	r3, [r7, #15]
 800a9b4:	2b00      	cmp	r3, #0
 800a9b6:	d14e      	bne.n	800aa56 <HAL_TIM_IC_Start_IT+0x276>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	681b      	ldr	r3, [r3, #0]
 800a9bc:	2201      	movs	r2, #1
 800a9be:	6839      	ldr	r1, [r7, #0]
 800a9c0:	4618      	mov	r0, r3
 800a9c2:	f001 f97b 	bl	800bcbc <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a9c6:	687b      	ldr	r3, [r7, #4]
 800a9c8:	681b      	ldr	r3, [r3, #0]
 800a9ca:	4a25      	ldr	r2, [pc, #148]	; (800aa60 <HAL_TIM_IC_Start_IT+0x280>)
 800a9cc:	4293      	cmp	r3, r2
 800a9ce:	d022      	beq.n	800aa16 <HAL_TIM_IC_Start_IT+0x236>
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	681b      	ldr	r3, [r3, #0]
 800a9d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a9d8:	d01d      	beq.n	800aa16 <HAL_TIM_IC_Start_IT+0x236>
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	681b      	ldr	r3, [r3, #0]
 800a9de:	4a21      	ldr	r2, [pc, #132]	; (800aa64 <HAL_TIM_IC_Start_IT+0x284>)
 800a9e0:	4293      	cmp	r3, r2
 800a9e2:	d018      	beq.n	800aa16 <HAL_TIM_IC_Start_IT+0x236>
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	681b      	ldr	r3, [r3, #0]
 800a9e8:	4a1f      	ldr	r2, [pc, #124]	; (800aa68 <HAL_TIM_IC_Start_IT+0x288>)
 800a9ea:	4293      	cmp	r3, r2
 800a9ec:	d013      	beq.n	800aa16 <HAL_TIM_IC_Start_IT+0x236>
 800a9ee:	687b      	ldr	r3, [r7, #4]
 800a9f0:	681b      	ldr	r3, [r3, #0]
 800a9f2:	4a1e      	ldr	r2, [pc, #120]	; (800aa6c <HAL_TIM_IC_Start_IT+0x28c>)
 800a9f4:	4293      	cmp	r3, r2
 800a9f6:	d00e      	beq.n	800aa16 <HAL_TIM_IC_Start_IT+0x236>
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	681b      	ldr	r3, [r3, #0]
 800a9fc:	4a1c      	ldr	r2, [pc, #112]	; (800aa70 <HAL_TIM_IC_Start_IT+0x290>)
 800a9fe:	4293      	cmp	r3, r2
 800aa00:	d009      	beq.n	800aa16 <HAL_TIM_IC_Start_IT+0x236>
 800aa02:	687b      	ldr	r3, [r7, #4]
 800aa04:	681b      	ldr	r3, [r3, #0]
 800aa06:	4a1b      	ldr	r2, [pc, #108]	; (800aa74 <HAL_TIM_IC_Start_IT+0x294>)
 800aa08:	4293      	cmp	r3, r2
 800aa0a:	d004      	beq.n	800aa16 <HAL_TIM_IC_Start_IT+0x236>
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	681b      	ldr	r3, [r3, #0]
 800aa10:	4a19      	ldr	r2, [pc, #100]	; (800aa78 <HAL_TIM_IC_Start_IT+0x298>)
 800aa12:	4293      	cmp	r3, r2
 800aa14:	d115      	bne.n	800aa42 <HAL_TIM_IC_Start_IT+0x262>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	681b      	ldr	r3, [r3, #0]
 800aa1a:	689a      	ldr	r2, [r3, #8]
 800aa1c:	4b17      	ldr	r3, [pc, #92]	; (800aa7c <HAL_TIM_IC_Start_IT+0x29c>)
 800aa1e:	4013      	ands	r3, r2
 800aa20:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800aa22:	68bb      	ldr	r3, [r7, #8]
 800aa24:	2b06      	cmp	r3, #6
 800aa26:	d015      	beq.n	800aa54 <HAL_TIM_IC_Start_IT+0x274>
 800aa28:	68bb      	ldr	r3, [r7, #8]
 800aa2a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800aa2e:	d011      	beq.n	800aa54 <HAL_TIM_IC_Start_IT+0x274>
      {
        __HAL_TIM_ENABLE(htim);
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	681b      	ldr	r3, [r3, #0]
 800aa34:	681a      	ldr	r2, [r3, #0]
 800aa36:	687b      	ldr	r3, [r7, #4]
 800aa38:	681b      	ldr	r3, [r3, #0]
 800aa3a:	f042 0201 	orr.w	r2, r2, #1
 800aa3e:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800aa40:	e008      	b.n	800aa54 <HAL_TIM_IC_Start_IT+0x274>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800aa42:	687b      	ldr	r3, [r7, #4]
 800aa44:	681b      	ldr	r3, [r3, #0]
 800aa46:	681a      	ldr	r2, [r3, #0]
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	681b      	ldr	r3, [r3, #0]
 800aa4c:	f042 0201 	orr.w	r2, r2, #1
 800aa50:	601a      	str	r2, [r3, #0]
 800aa52:	e000      	b.n	800aa56 <HAL_TIM_IC_Start_IT+0x276>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800aa54:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 800aa56:	7bfb      	ldrb	r3, [r7, #15]
}
 800aa58:	4618      	mov	r0, r3
 800aa5a:	3710      	adds	r7, #16
 800aa5c:	46bd      	mov	sp, r7
 800aa5e:	bd80      	pop	{r7, pc}
 800aa60:	40010000 	.word	0x40010000
 800aa64:	40000400 	.word	0x40000400
 800aa68:	40000800 	.word	0x40000800
 800aa6c:	40000c00 	.word	0x40000c00
 800aa70:	40010400 	.word	0x40010400
 800aa74:	40001800 	.word	0x40001800
 800aa78:	40014000 	.word	0x40014000
 800aa7c:	00010007 	.word	0x00010007

0800aa80 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800aa80:	b580      	push	{r7, lr}
 800aa82:	b082      	sub	sp, #8
 800aa84:	af00      	add	r7, sp, #0
 800aa86:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	681b      	ldr	r3, [r3, #0]
 800aa8c:	691b      	ldr	r3, [r3, #16]
 800aa8e:	f003 0302 	and.w	r3, r3, #2
 800aa92:	2b02      	cmp	r3, #2
 800aa94:	d122      	bne.n	800aadc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	681b      	ldr	r3, [r3, #0]
 800aa9a:	68db      	ldr	r3, [r3, #12]
 800aa9c:	f003 0302 	and.w	r3, r3, #2
 800aaa0:	2b02      	cmp	r3, #2
 800aaa2:	d11b      	bne.n	800aadc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	681b      	ldr	r3, [r3, #0]
 800aaa8:	f06f 0202 	mvn.w	r2, #2
 800aaac:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800aaae:	687b      	ldr	r3, [r7, #4]
 800aab0:	2201      	movs	r2, #1
 800aab2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800aab4:	687b      	ldr	r3, [r7, #4]
 800aab6:	681b      	ldr	r3, [r3, #0]
 800aab8:	699b      	ldr	r3, [r3, #24]
 800aaba:	f003 0303 	and.w	r3, r3, #3
 800aabe:	2b00      	cmp	r3, #0
 800aac0:	d003      	beq.n	800aaca <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800aac2:	6878      	ldr	r0, [r7, #4]
 800aac4:	f7f7 fff6 	bl	8002ab4 <HAL_TIM_IC_CaptureCallback>
 800aac8:	e005      	b.n	800aad6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800aaca:	6878      	ldr	r0, [r7, #4]
 800aacc:	f000 fba0 	bl	800b210 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800aad0:	6878      	ldr	r0, [r7, #4]
 800aad2:	f000 fba7 	bl	800b224 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800aad6:	687b      	ldr	r3, [r7, #4]
 800aad8:	2200      	movs	r2, #0
 800aada:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	681b      	ldr	r3, [r3, #0]
 800aae0:	691b      	ldr	r3, [r3, #16]
 800aae2:	f003 0304 	and.w	r3, r3, #4
 800aae6:	2b04      	cmp	r3, #4
 800aae8:	d122      	bne.n	800ab30 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	681b      	ldr	r3, [r3, #0]
 800aaee:	68db      	ldr	r3, [r3, #12]
 800aaf0:	f003 0304 	and.w	r3, r3, #4
 800aaf4:	2b04      	cmp	r3, #4
 800aaf6:	d11b      	bne.n	800ab30 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800aaf8:	687b      	ldr	r3, [r7, #4]
 800aafa:	681b      	ldr	r3, [r3, #0]
 800aafc:	f06f 0204 	mvn.w	r2, #4
 800ab00:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	2202      	movs	r2, #2
 800ab06:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	681b      	ldr	r3, [r3, #0]
 800ab0c:	699b      	ldr	r3, [r3, #24]
 800ab0e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ab12:	2b00      	cmp	r3, #0
 800ab14:	d003      	beq.n	800ab1e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ab16:	6878      	ldr	r0, [r7, #4]
 800ab18:	f7f7 ffcc 	bl	8002ab4 <HAL_TIM_IC_CaptureCallback>
 800ab1c:	e005      	b.n	800ab2a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ab1e:	6878      	ldr	r0, [r7, #4]
 800ab20:	f000 fb76 	bl	800b210 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ab24:	6878      	ldr	r0, [r7, #4]
 800ab26:	f000 fb7d 	bl	800b224 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ab2a:	687b      	ldr	r3, [r7, #4]
 800ab2c:	2200      	movs	r2, #0
 800ab2e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800ab30:	687b      	ldr	r3, [r7, #4]
 800ab32:	681b      	ldr	r3, [r3, #0]
 800ab34:	691b      	ldr	r3, [r3, #16]
 800ab36:	f003 0308 	and.w	r3, r3, #8
 800ab3a:	2b08      	cmp	r3, #8
 800ab3c:	d122      	bne.n	800ab84 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800ab3e:	687b      	ldr	r3, [r7, #4]
 800ab40:	681b      	ldr	r3, [r3, #0]
 800ab42:	68db      	ldr	r3, [r3, #12]
 800ab44:	f003 0308 	and.w	r3, r3, #8
 800ab48:	2b08      	cmp	r3, #8
 800ab4a:	d11b      	bne.n	800ab84 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	681b      	ldr	r3, [r3, #0]
 800ab50:	f06f 0208 	mvn.w	r2, #8
 800ab54:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800ab56:	687b      	ldr	r3, [r7, #4]
 800ab58:	2204      	movs	r2, #4
 800ab5a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800ab5c:	687b      	ldr	r3, [r7, #4]
 800ab5e:	681b      	ldr	r3, [r3, #0]
 800ab60:	69db      	ldr	r3, [r3, #28]
 800ab62:	f003 0303 	and.w	r3, r3, #3
 800ab66:	2b00      	cmp	r3, #0
 800ab68:	d003      	beq.n	800ab72 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ab6a:	6878      	ldr	r0, [r7, #4]
 800ab6c:	f7f7 ffa2 	bl	8002ab4 <HAL_TIM_IC_CaptureCallback>
 800ab70:	e005      	b.n	800ab7e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ab72:	6878      	ldr	r0, [r7, #4]
 800ab74:	f000 fb4c 	bl	800b210 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ab78:	6878      	ldr	r0, [r7, #4]
 800ab7a:	f000 fb53 	bl	800b224 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ab7e:	687b      	ldr	r3, [r7, #4]
 800ab80:	2200      	movs	r2, #0
 800ab82:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800ab84:	687b      	ldr	r3, [r7, #4]
 800ab86:	681b      	ldr	r3, [r3, #0]
 800ab88:	691b      	ldr	r3, [r3, #16]
 800ab8a:	f003 0310 	and.w	r3, r3, #16
 800ab8e:	2b10      	cmp	r3, #16
 800ab90:	d122      	bne.n	800abd8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800ab92:	687b      	ldr	r3, [r7, #4]
 800ab94:	681b      	ldr	r3, [r3, #0]
 800ab96:	68db      	ldr	r3, [r3, #12]
 800ab98:	f003 0310 	and.w	r3, r3, #16
 800ab9c:	2b10      	cmp	r3, #16
 800ab9e:	d11b      	bne.n	800abd8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800aba0:	687b      	ldr	r3, [r7, #4]
 800aba2:	681b      	ldr	r3, [r3, #0]
 800aba4:	f06f 0210 	mvn.w	r2, #16
 800aba8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800abaa:	687b      	ldr	r3, [r7, #4]
 800abac:	2208      	movs	r2, #8
 800abae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800abb0:	687b      	ldr	r3, [r7, #4]
 800abb2:	681b      	ldr	r3, [r3, #0]
 800abb4:	69db      	ldr	r3, [r3, #28]
 800abb6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800abba:	2b00      	cmp	r3, #0
 800abbc:	d003      	beq.n	800abc6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800abbe:	6878      	ldr	r0, [r7, #4]
 800abc0:	f7f7 ff78 	bl	8002ab4 <HAL_TIM_IC_CaptureCallback>
 800abc4:	e005      	b.n	800abd2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800abc6:	6878      	ldr	r0, [r7, #4]
 800abc8:	f000 fb22 	bl	800b210 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800abcc:	6878      	ldr	r0, [r7, #4]
 800abce:	f000 fb29 	bl	800b224 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800abd2:	687b      	ldr	r3, [r7, #4]
 800abd4:	2200      	movs	r2, #0
 800abd6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800abd8:	687b      	ldr	r3, [r7, #4]
 800abda:	681b      	ldr	r3, [r3, #0]
 800abdc:	691b      	ldr	r3, [r3, #16]
 800abde:	f003 0301 	and.w	r3, r3, #1
 800abe2:	2b01      	cmp	r3, #1
 800abe4:	d10e      	bne.n	800ac04 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800abe6:	687b      	ldr	r3, [r7, #4]
 800abe8:	681b      	ldr	r3, [r3, #0]
 800abea:	68db      	ldr	r3, [r3, #12]
 800abec:	f003 0301 	and.w	r3, r3, #1
 800abf0:	2b01      	cmp	r3, #1
 800abf2:	d107      	bne.n	800ac04 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800abf4:	687b      	ldr	r3, [r7, #4]
 800abf6:	681b      	ldr	r3, [r3, #0]
 800abf8:	f06f 0201 	mvn.w	r2, #1
 800abfc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800abfe:	6878      	ldr	r0, [r7, #4]
 800ac00:	f7f7 ffaa 	bl	8002b58 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800ac04:	687b      	ldr	r3, [r7, #4]
 800ac06:	681b      	ldr	r3, [r3, #0]
 800ac08:	691b      	ldr	r3, [r3, #16]
 800ac0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ac0e:	2b80      	cmp	r3, #128	; 0x80
 800ac10:	d10e      	bne.n	800ac30 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800ac12:	687b      	ldr	r3, [r7, #4]
 800ac14:	681b      	ldr	r3, [r3, #0]
 800ac16:	68db      	ldr	r3, [r3, #12]
 800ac18:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ac1c:	2b80      	cmp	r3, #128	; 0x80
 800ac1e:	d107      	bne.n	800ac30 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	681b      	ldr	r3, [r3, #0]
 800ac24:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800ac28:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800ac2a:	6878      	ldr	r0, [r7, #4]
 800ac2c:	f001 f904 	bl	800be38 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800ac30:	687b      	ldr	r3, [r7, #4]
 800ac32:	681b      	ldr	r3, [r3, #0]
 800ac34:	691b      	ldr	r3, [r3, #16]
 800ac36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ac3a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ac3e:	d10e      	bne.n	800ac5e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800ac40:	687b      	ldr	r3, [r7, #4]
 800ac42:	681b      	ldr	r3, [r3, #0]
 800ac44:	68db      	ldr	r3, [r3, #12]
 800ac46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ac4a:	2b80      	cmp	r3, #128	; 0x80
 800ac4c:	d107      	bne.n	800ac5e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800ac4e:	687b      	ldr	r3, [r7, #4]
 800ac50:	681b      	ldr	r3, [r3, #0]
 800ac52:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800ac56:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800ac58:	6878      	ldr	r0, [r7, #4]
 800ac5a:	f001 f8f7 	bl	800be4c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800ac5e:	687b      	ldr	r3, [r7, #4]
 800ac60:	681b      	ldr	r3, [r3, #0]
 800ac62:	691b      	ldr	r3, [r3, #16]
 800ac64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ac68:	2b40      	cmp	r3, #64	; 0x40
 800ac6a:	d10e      	bne.n	800ac8a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	681b      	ldr	r3, [r3, #0]
 800ac70:	68db      	ldr	r3, [r3, #12]
 800ac72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ac76:	2b40      	cmp	r3, #64	; 0x40
 800ac78:	d107      	bne.n	800ac8a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800ac7a:	687b      	ldr	r3, [r7, #4]
 800ac7c:	681b      	ldr	r3, [r3, #0]
 800ac7e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800ac82:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800ac84:	6878      	ldr	r0, [r7, #4]
 800ac86:	f000 fad7 	bl	800b238 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	681b      	ldr	r3, [r3, #0]
 800ac8e:	691b      	ldr	r3, [r3, #16]
 800ac90:	f003 0320 	and.w	r3, r3, #32
 800ac94:	2b20      	cmp	r3, #32
 800ac96:	d10e      	bne.n	800acb6 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	681b      	ldr	r3, [r3, #0]
 800ac9c:	68db      	ldr	r3, [r3, #12]
 800ac9e:	f003 0320 	and.w	r3, r3, #32
 800aca2:	2b20      	cmp	r3, #32
 800aca4:	d107      	bne.n	800acb6 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800aca6:	687b      	ldr	r3, [r7, #4]
 800aca8:	681b      	ldr	r3, [r3, #0]
 800acaa:	f06f 0220 	mvn.w	r2, #32
 800acae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800acb0:	6878      	ldr	r0, [r7, #4]
 800acb2:	f001 f8b7 	bl	800be24 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800acb6:	bf00      	nop
 800acb8:	3708      	adds	r7, #8
 800acba:	46bd      	mov	sp, r7
 800acbc:	bd80      	pop	{r7, pc}

0800acbe <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 800acbe:	b580      	push	{r7, lr}
 800acc0:	b086      	sub	sp, #24
 800acc2:	af00      	add	r7, sp, #0
 800acc4:	60f8      	str	r0, [r7, #12]
 800acc6:	60b9      	str	r1, [r7, #8]
 800acc8:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800acca:	2300      	movs	r3, #0
 800accc:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 800acce:	68fb      	ldr	r3, [r7, #12]
 800acd0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800acd4:	2b01      	cmp	r3, #1
 800acd6:	d101      	bne.n	800acdc <HAL_TIM_IC_ConfigChannel+0x1e>
 800acd8:	2302      	movs	r3, #2
 800acda:	e088      	b.n	800adee <HAL_TIM_IC_ConfigChannel+0x130>
 800acdc:	68fb      	ldr	r3, [r7, #12]
 800acde:	2201      	movs	r2, #1
 800ace0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 800ace4:	687b      	ldr	r3, [r7, #4]
 800ace6:	2b00      	cmp	r3, #0
 800ace8:	d11b      	bne.n	800ad22 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 800acea:	68fb      	ldr	r3, [r7, #12]
 800acec:	6818      	ldr	r0, [r3, #0]
 800acee:	68bb      	ldr	r3, [r7, #8]
 800acf0:	6819      	ldr	r1, [r3, #0]
 800acf2:	68bb      	ldr	r3, [r7, #8]
 800acf4:	685a      	ldr	r2, [r3, #4]
 800acf6:	68bb      	ldr	r3, [r7, #8]
 800acf8:	68db      	ldr	r3, [r3, #12]
 800acfa:	f000 fe17 	bl	800b92c <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800acfe:	68fb      	ldr	r3, [r7, #12]
 800ad00:	681b      	ldr	r3, [r3, #0]
 800ad02:	699a      	ldr	r2, [r3, #24]
 800ad04:	68fb      	ldr	r3, [r7, #12]
 800ad06:	681b      	ldr	r3, [r3, #0]
 800ad08:	f022 020c 	bic.w	r2, r2, #12
 800ad0c:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800ad0e:	68fb      	ldr	r3, [r7, #12]
 800ad10:	681b      	ldr	r3, [r3, #0]
 800ad12:	6999      	ldr	r1, [r3, #24]
 800ad14:	68bb      	ldr	r3, [r7, #8]
 800ad16:	689a      	ldr	r2, [r3, #8]
 800ad18:	68fb      	ldr	r3, [r7, #12]
 800ad1a:	681b      	ldr	r3, [r3, #0]
 800ad1c:	430a      	orrs	r2, r1
 800ad1e:	619a      	str	r2, [r3, #24]
 800ad20:	e060      	b.n	800ade4 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 800ad22:	687b      	ldr	r3, [r7, #4]
 800ad24:	2b04      	cmp	r3, #4
 800ad26:	d11c      	bne.n	800ad62 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800ad28:	68fb      	ldr	r3, [r7, #12]
 800ad2a:	6818      	ldr	r0, [r3, #0]
 800ad2c:	68bb      	ldr	r3, [r7, #8]
 800ad2e:	6819      	ldr	r1, [r3, #0]
 800ad30:	68bb      	ldr	r3, [r7, #8]
 800ad32:	685a      	ldr	r2, [r3, #4]
 800ad34:	68bb      	ldr	r3, [r7, #8]
 800ad36:	68db      	ldr	r3, [r3, #12]
 800ad38:	f000 fe9b 	bl	800ba72 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800ad3c:	68fb      	ldr	r3, [r7, #12]
 800ad3e:	681b      	ldr	r3, [r3, #0]
 800ad40:	699a      	ldr	r2, [r3, #24]
 800ad42:	68fb      	ldr	r3, [r7, #12]
 800ad44:	681b      	ldr	r3, [r3, #0]
 800ad46:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800ad4a:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800ad4c:	68fb      	ldr	r3, [r7, #12]
 800ad4e:	681b      	ldr	r3, [r3, #0]
 800ad50:	6999      	ldr	r1, [r3, #24]
 800ad52:	68bb      	ldr	r3, [r7, #8]
 800ad54:	689b      	ldr	r3, [r3, #8]
 800ad56:	021a      	lsls	r2, r3, #8
 800ad58:	68fb      	ldr	r3, [r7, #12]
 800ad5a:	681b      	ldr	r3, [r3, #0]
 800ad5c:	430a      	orrs	r2, r1
 800ad5e:	619a      	str	r2, [r3, #24]
 800ad60:	e040      	b.n	800ade4 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 800ad62:	687b      	ldr	r3, [r7, #4]
 800ad64:	2b08      	cmp	r3, #8
 800ad66:	d11b      	bne.n	800ada0 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800ad68:	68fb      	ldr	r3, [r7, #12]
 800ad6a:	6818      	ldr	r0, [r3, #0]
 800ad6c:	68bb      	ldr	r3, [r7, #8]
 800ad6e:	6819      	ldr	r1, [r3, #0]
 800ad70:	68bb      	ldr	r3, [r7, #8]
 800ad72:	685a      	ldr	r2, [r3, #4]
 800ad74:	68bb      	ldr	r3, [r7, #8]
 800ad76:	68db      	ldr	r3, [r3, #12]
 800ad78:	f000 fee8 	bl	800bb4c <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800ad7c:	68fb      	ldr	r3, [r7, #12]
 800ad7e:	681b      	ldr	r3, [r3, #0]
 800ad80:	69da      	ldr	r2, [r3, #28]
 800ad82:	68fb      	ldr	r3, [r7, #12]
 800ad84:	681b      	ldr	r3, [r3, #0]
 800ad86:	f022 020c 	bic.w	r2, r2, #12
 800ad8a:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800ad8c:	68fb      	ldr	r3, [r7, #12]
 800ad8e:	681b      	ldr	r3, [r3, #0]
 800ad90:	69d9      	ldr	r1, [r3, #28]
 800ad92:	68bb      	ldr	r3, [r7, #8]
 800ad94:	689a      	ldr	r2, [r3, #8]
 800ad96:	68fb      	ldr	r3, [r7, #12]
 800ad98:	681b      	ldr	r3, [r3, #0]
 800ad9a:	430a      	orrs	r2, r1
 800ad9c:	61da      	str	r2, [r3, #28]
 800ad9e:	e021      	b.n	800ade4 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 800ada0:	687b      	ldr	r3, [r7, #4]
 800ada2:	2b0c      	cmp	r3, #12
 800ada4:	d11c      	bne.n	800ade0 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 800ada6:	68fb      	ldr	r3, [r7, #12]
 800ada8:	6818      	ldr	r0, [r3, #0]
 800adaa:	68bb      	ldr	r3, [r7, #8]
 800adac:	6819      	ldr	r1, [r3, #0]
 800adae:	68bb      	ldr	r3, [r7, #8]
 800adb0:	685a      	ldr	r2, [r3, #4]
 800adb2:	68bb      	ldr	r3, [r7, #8]
 800adb4:	68db      	ldr	r3, [r3, #12]
 800adb6:	f000 ff05 	bl	800bbc4 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800adba:	68fb      	ldr	r3, [r7, #12]
 800adbc:	681b      	ldr	r3, [r3, #0]
 800adbe:	69da      	ldr	r2, [r3, #28]
 800adc0:	68fb      	ldr	r3, [r7, #12]
 800adc2:	681b      	ldr	r3, [r3, #0]
 800adc4:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800adc8:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800adca:	68fb      	ldr	r3, [r7, #12]
 800adcc:	681b      	ldr	r3, [r3, #0]
 800adce:	69d9      	ldr	r1, [r3, #28]
 800add0:	68bb      	ldr	r3, [r7, #8]
 800add2:	689b      	ldr	r3, [r3, #8]
 800add4:	021a      	lsls	r2, r3, #8
 800add6:	68fb      	ldr	r3, [r7, #12]
 800add8:	681b      	ldr	r3, [r3, #0]
 800adda:	430a      	orrs	r2, r1
 800addc:	61da      	str	r2, [r3, #28]
 800adde:	e001      	b.n	800ade4 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 800ade0:	2301      	movs	r3, #1
 800ade2:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 800ade4:	68fb      	ldr	r3, [r7, #12]
 800ade6:	2200      	movs	r2, #0
 800ade8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800adec:	7dfb      	ldrb	r3, [r7, #23]
}
 800adee:	4618      	mov	r0, r3
 800adf0:	3718      	adds	r7, #24
 800adf2:	46bd      	mov	sp, r7
 800adf4:	bd80      	pop	{r7, pc}
	...

0800adf8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800adf8:	b580      	push	{r7, lr}
 800adfa:	b086      	sub	sp, #24
 800adfc:	af00      	add	r7, sp, #0
 800adfe:	60f8      	str	r0, [r7, #12]
 800ae00:	60b9      	str	r1, [r7, #8]
 800ae02:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800ae04:	2300      	movs	r3, #0
 800ae06:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800ae08:	68fb      	ldr	r3, [r7, #12]
 800ae0a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ae0e:	2b01      	cmp	r3, #1
 800ae10:	d101      	bne.n	800ae16 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800ae12:	2302      	movs	r3, #2
 800ae14:	e0ff      	b.n	800b016 <HAL_TIM_PWM_ConfigChannel+0x21e>
 800ae16:	68fb      	ldr	r3, [r7, #12]
 800ae18:	2201      	movs	r2, #1
 800ae1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800ae1e:	687b      	ldr	r3, [r7, #4]
 800ae20:	2b14      	cmp	r3, #20
 800ae22:	f200 80f0 	bhi.w	800b006 <HAL_TIM_PWM_ConfigChannel+0x20e>
 800ae26:	a201      	add	r2, pc, #4	; (adr r2, 800ae2c <HAL_TIM_PWM_ConfigChannel+0x34>)
 800ae28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ae2c:	0800ae81 	.word	0x0800ae81
 800ae30:	0800b007 	.word	0x0800b007
 800ae34:	0800b007 	.word	0x0800b007
 800ae38:	0800b007 	.word	0x0800b007
 800ae3c:	0800aec1 	.word	0x0800aec1
 800ae40:	0800b007 	.word	0x0800b007
 800ae44:	0800b007 	.word	0x0800b007
 800ae48:	0800b007 	.word	0x0800b007
 800ae4c:	0800af03 	.word	0x0800af03
 800ae50:	0800b007 	.word	0x0800b007
 800ae54:	0800b007 	.word	0x0800b007
 800ae58:	0800b007 	.word	0x0800b007
 800ae5c:	0800af43 	.word	0x0800af43
 800ae60:	0800b007 	.word	0x0800b007
 800ae64:	0800b007 	.word	0x0800b007
 800ae68:	0800b007 	.word	0x0800b007
 800ae6c:	0800af85 	.word	0x0800af85
 800ae70:	0800b007 	.word	0x0800b007
 800ae74:	0800b007 	.word	0x0800b007
 800ae78:	0800b007 	.word	0x0800b007
 800ae7c:	0800afc5 	.word	0x0800afc5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800ae80:	68fb      	ldr	r3, [r7, #12]
 800ae82:	681b      	ldr	r3, [r3, #0]
 800ae84:	68b9      	ldr	r1, [r7, #8]
 800ae86:	4618      	mov	r0, r3
 800ae88:	f000 fa7a 	bl	800b380 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800ae8c:	68fb      	ldr	r3, [r7, #12]
 800ae8e:	681b      	ldr	r3, [r3, #0]
 800ae90:	699a      	ldr	r2, [r3, #24]
 800ae92:	68fb      	ldr	r3, [r7, #12]
 800ae94:	681b      	ldr	r3, [r3, #0]
 800ae96:	f042 0208 	orr.w	r2, r2, #8
 800ae9a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800ae9c:	68fb      	ldr	r3, [r7, #12]
 800ae9e:	681b      	ldr	r3, [r3, #0]
 800aea0:	699a      	ldr	r2, [r3, #24]
 800aea2:	68fb      	ldr	r3, [r7, #12]
 800aea4:	681b      	ldr	r3, [r3, #0]
 800aea6:	f022 0204 	bic.w	r2, r2, #4
 800aeaa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800aeac:	68fb      	ldr	r3, [r7, #12]
 800aeae:	681b      	ldr	r3, [r3, #0]
 800aeb0:	6999      	ldr	r1, [r3, #24]
 800aeb2:	68bb      	ldr	r3, [r7, #8]
 800aeb4:	691a      	ldr	r2, [r3, #16]
 800aeb6:	68fb      	ldr	r3, [r7, #12]
 800aeb8:	681b      	ldr	r3, [r3, #0]
 800aeba:	430a      	orrs	r2, r1
 800aebc:	619a      	str	r2, [r3, #24]
      break;
 800aebe:	e0a5      	b.n	800b00c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800aec0:	68fb      	ldr	r3, [r7, #12]
 800aec2:	681b      	ldr	r3, [r3, #0]
 800aec4:	68b9      	ldr	r1, [r7, #8]
 800aec6:	4618      	mov	r0, r3
 800aec8:	f000 faea 	bl	800b4a0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800aecc:	68fb      	ldr	r3, [r7, #12]
 800aece:	681b      	ldr	r3, [r3, #0]
 800aed0:	699a      	ldr	r2, [r3, #24]
 800aed2:	68fb      	ldr	r3, [r7, #12]
 800aed4:	681b      	ldr	r3, [r3, #0]
 800aed6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800aeda:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800aedc:	68fb      	ldr	r3, [r7, #12]
 800aede:	681b      	ldr	r3, [r3, #0]
 800aee0:	699a      	ldr	r2, [r3, #24]
 800aee2:	68fb      	ldr	r3, [r7, #12]
 800aee4:	681b      	ldr	r3, [r3, #0]
 800aee6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800aeea:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800aeec:	68fb      	ldr	r3, [r7, #12]
 800aeee:	681b      	ldr	r3, [r3, #0]
 800aef0:	6999      	ldr	r1, [r3, #24]
 800aef2:	68bb      	ldr	r3, [r7, #8]
 800aef4:	691b      	ldr	r3, [r3, #16]
 800aef6:	021a      	lsls	r2, r3, #8
 800aef8:	68fb      	ldr	r3, [r7, #12]
 800aefa:	681b      	ldr	r3, [r3, #0]
 800aefc:	430a      	orrs	r2, r1
 800aefe:	619a      	str	r2, [r3, #24]
      break;
 800af00:	e084      	b.n	800b00c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800af02:	68fb      	ldr	r3, [r7, #12]
 800af04:	681b      	ldr	r3, [r3, #0]
 800af06:	68b9      	ldr	r1, [r7, #8]
 800af08:	4618      	mov	r0, r3
 800af0a:	f000 fb53 	bl	800b5b4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800af0e:	68fb      	ldr	r3, [r7, #12]
 800af10:	681b      	ldr	r3, [r3, #0]
 800af12:	69da      	ldr	r2, [r3, #28]
 800af14:	68fb      	ldr	r3, [r7, #12]
 800af16:	681b      	ldr	r3, [r3, #0]
 800af18:	f042 0208 	orr.w	r2, r2, #8
 800af1c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800af1e:	68fb      	ldr	r3, [r7, #12]
 800af20:	681b      	ldr	r3, [r3, #0]
 800af22:	69da      	ldr	r2, [r3, #28]
 800af24:	68fb      	ldr	r3, [r7, #12]
 800af26:	681b      	ldr	r3, [r3, #0]
 800af28:	f022 0204 	bic.w	r2, r2, #4
 800af2c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800af2e:	68fb      	ldr	r3, [r7, #12]
 800af30:	681b      	ldr	r3, [r3, #0]
 800af32:	69d9      	ldr	r1, [r3, #28]
 800af34:	68bb      	ldr	r3, [r7, #8]
 800af36:	691a      	ldr	r2, [r3, #16]
 800af38:	68fb      	ldr	r3, [r7, #12]
 800af3a:	681b      	ldr	r3, [r3, #0]
 800af3c:	430a      	orrs	r2, r1
 800af3e:	61da      	str	r2, [r3, #28]
      break;
 800af40:	e064      	b.n	800b00c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800af42:	68fb      	ldr	r3, [r7, #12]
 800af44:	681b      	ldr	r3, [r3, #0]
 800af46:	68b9      	ldr	r1, [r7, #8]
 800af48:	4618      	mov	r0, r3
 800af4a:	f000 fbbb 	bl	800b6c4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800af4e:	68fb      	ldr	r3, [r7, #12]
 800af50:	681b      	ldr	r3, [r3, #0]
 800af52:	69da      	ldr	r2, [r3, #28]
 800af54:	68fb      	ldr	r3, [r7, #12]
 800af56:	681b      	ldr	r3, [r3, #0]
 800af58:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800af5c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800af5e:	68fb      	ldr	r3, [r7, #12]
 800af60:	681b      	ldr	r3, [r3, #0]
 800af62:	69da      	ldr	r2, [r3, #28]
 800af64:	68fb      	ldr	r3, [r7, #12]
 800af66:	681b      	ldr	r3, [r3, #0]
 800af68:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800af6c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800af6e:	68fb      	ldr	r3, [r7, #12]
 800af70:	681b      	ldr	r3, [r3, #0]
 800af72:	69d9      	ldr	r1, [r3, #28]
 800af74:	68bb      	ldr	r3, [r7, #8]
 800af76:	691b      	ldr	r3, [r3, #16]
 800af78:	021a      	lsls	r2, r3, #8
 800af7a:	68fb      	ldr	r3, [r7, #12]
 800af7c:	681b      	ldr	r3, [r3, #0]
 800af7e:	430a      	orrs	r2, r1
 800af80:	61da      	str	r2, [r3, #28]
      break;
 800af82:	e043      	b.n	800b00c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800af84:	68fb      	ldr	r3, [r7, #12]
 800af86:	681b      	ldr	r3, [r3, #0]
 800af88:	68b9      	ldr	r1, [r7, #8]
 800af8a:	4618      	mov	r0, r3
 800af8c:	f000 fc04 	bl	800b798 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800af90:	68fb      	ldr	r3, [r7, #12]
 800af92:	681b      	ldr	r3, [r3, #0]
 800af94:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800af96:	68fb      	ldr	r3, [r7, #12]
 800af98:	681b      	ldr	r3, [r3, #0]
 800af9a:	f042 0208 	orr.w	r2, r2, #8
 800af9e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800afa0:	68fb      	ldr	r3, [r7, #12]
 800afa2:	681b      	ldr	r3, [r3, #0]
 800afa4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800afa6:	68fb      	ldr	r3, [r7, #12]
 800afa8:	681b      	ldr	r3, [r3, #0]
 800afaa:	f022 0204 	bic.w	r2, r2, #4
 800afae:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800afb0:	68fb      	ldr	r3, [r7, #12]
 800afb2:	681b      	ldr	r3, [r3, #0]
 800afb4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800afb6:	68bb      	ldr	r3, [r7, #8]
 800afb8:	691a      	ldr	r2, [r3, #16]
 800afba:	68fb      	ldr	r3, [r7, #12]
 800afbc:	681b      	ldr	r3, [r3, #0]
 800afbe:	430a      	orrs	r2, r1
 800afc0:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800afc2:	e023      	b.n	800b00c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800afc4:	68fb      	ldr	r3, [r7, #12]
 800afc6:	681b      	ldr	r3, [r3, #0]
 800afc8:	68b9      	ldr	r1, [r7, #8]
 800afca:	4618      	mov	r0, r3
 800afcc:	f000 fc48 	bl	800b860 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800afd0:	68fb      	ldr	r3, [r7, #12]
 800afd2:	681b      	ldr	r3, [r3, #0]
 800afd4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800afd6:	68fb      	ldr	r3, [r7, #12]
 800afd8:	681b      	ldr	r3, [r3, #0]
 800afda:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800afde:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800afe0:	68fb      	ldr	r3, [r7, #12]
 800afe2:	681b      	ldr	r3, [r3, #0]
 800afe4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800afe6:	68fb      	ldr	r3, [r7, #12]
 800afe8:	681b      	ldr	r3, [r3, #0]
 800afea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800afee:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800aff0:	68fb      	ldr	r3, [r7, #12]
 800aff2:	681b      	ldr	r3, [r3, #0]
 800aff4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800aff6:	68bb      	ldr	r3, [r7, #8]
 800aff8:	691b      	ldr	r3, [r3, #16]
 800affa:	021a      	lsls	r2, r3, #8
 800affc:	68fb      	ldr	r3, [r7, #12]
 800affe:	681b      	ldr	r3, [r3, #0]
 800b000:	430a      	orrs	r2, r1
 800b002:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800b004:	e002      	b.n	800b00c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800b006:	2301      	movs	r3, #1
 800b008:	75fb      	strb	r3, [r7, #23]
      break;
 800b00a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800b00c:	68fb      	ldr	r3, [r7, #12]
 800b00e:	2200      	movs	r2, #0
 800b010:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800b014:	7dfb      	ldrb	r3, [r7, #23]
}
 800b016:	4618      	mov	r0, r3
 800b018:	3718      	adds	r7, #24
 800b01a:	46bd      	mov	sp, r7
 800b01c:	bd80      	pop	{r7, pc}
 800b01e:	bf00      	nop

0800b020 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800b020:	b580      	push	{r7, lr}
 800b022:	b084      	sub	sp, #16
 800b024:	af00      	add	r7, sp, #0
 800b026:	6078      	str	r0, [r7, #4]
 800b028:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800b02a:	2300      	movs	r3, #0
 800b02c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800b02e:	687b      	ldr	r3, [r7, #4]
 800b030:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b034:	2b01      	cmp	r3, #1
 800b036:	d101      	bne.n	800b03c <HAL_TIM_ConfigClockSource+0x1c>
 800b038:	2302      	movs	r3, #2
 800b03a:	e0dc      	b.n	800b1f6 <HAL_TIM_ConfigClockSource+0x1d6>
 800b03c:	687b      	ldr	r3, [r7, #4]
 800b03e:	2201      	movs	r2, #1
 800b040:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800b044:	687b      	ldr	r3, [r7, #4]
 800b046:	2202      	movs	r2, #2
 800b048:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800b04c:	687b      	ldr	r3, [r7, #4]
 800b04e:	681b      	ldr	r3, [r3, #0]
 800b050:	689b      	ldr	r3, [r3, #8]
 800b052:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800b054:	68ba      	ldr	r2, [r7, #8]
 800b056:	4b6a      	ldr	r3, [pc, #424]	; (800b200 <HAL_TIM_ConfigClockSource+0x1e0>)
 800b058:	4013      	ands	r3, r2
 800b05a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b05c:	68bb      	ldr	r3, [r7, #8]
 800b05e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800b062:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800b064:	687b      	ldr	r3, [r7, #4]
 800b066:	681b      	ldr	r3, [r3, #0]
 800b068:	68ba      	ldr	r2, [r7, #8]
 800b06a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800b06c:	683b      	ldr	r3, [r7, #0]
 800b06e:	681b      	ldr	r3, [r3, #0]
 800b070:	4a64      	ldr	r2, [pc, #400]	; (800b204 <HAL_TIM_ConfigClockSource+0x1e4>)
 800b072:	4293      	cmp	r3, r2
 800b074:	f000 80a9 	beq.w	800b1ca <HAL_TIM_ConfigClockSource+0x1aa>
 800b078:	4a62      	ldr	r2, [pc, #392]	; (800b204 <HAL_TIM_ConfigClockSource+0x1e4>)
 800b07a:	4293      	cmp	r3, r2
 800b07c:	f200 80ae 	bhi.w	800b1dc <HAL_TIM_ConfigClockSource+0x1bc>
 800b080:	4a61      	ldr	r2, [pc, #388]	; (800b208 <HAL_TIM_ConfigClockSource+0x1e8>)
 800b082:	4293      	cmp	r3, r2
 800b084:	f000 80a1 	beq.w	800b1ca <HAL_TIM_ConfigClockSource+0x1aa>
 800b088:	4a5f      	ldr	r2, [pc, #380]	; (800b208 <HAL_TIM_ConfigClockSource+0x1e8>)
 800b08a:	4293      	cmp	r3, r2
 800b08c:	f200 80a6 	bhi.w	800b1dc <HAL_TIM_ConfigClockSource+0x1bc>
 800b090:	4a5e      	ldr	r2, [pc, #376]	; (800b20c <HAL_TIM_ConfigClockSource+0x1ec>)
 800b092:	4293      	cmp	r3, r2
 800b094:	f000 8099 	beq.w	800b1ca <HAL_TIM_ConfigClockSource+0x1aa>
 800b098:	4a5c      	ldr	r2, [pc, #368]	; (800b20c <HAL_TIM_ConfigClockSource+0x1ec>)
 800b09a:	4293      	cmp	r3, r2
 800b09c:	f200 809e 	bhi.w	800b1dc <HAL_TIM_ConfigClockSource+0x1bc>
 800b0a0:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800b0a4:	f000 8091 	beq.w	800b1ca <HAL_TIM_ConfigClockSource+0x1aa>
 800b0a8:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800b0ac:	f200 8096 	bhi.w	800b1dc <HAL_TIM_ConfigClockSource+0x1bc>
 800b0b0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b0b4:	f000 8089 	beq.w	800b1ca <HAL_TIM_ConfigClockSource+0x1aa>
 800b0b8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b0bc:	f200 808e 	bhi.w	800b1dc <HAL_TIM_ConfigClockSource+0x1bc>
 800b0c0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b0c4:	d03e      	beq.n	800b144 <HAL_TIM_ConfigClockSource+0x124>
 800b0c6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b0ca:	f200 8087 	bhi.w	800b1dc <HAL_TIM_ConfigClockSource+0x1bc>
 800b0ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b0d2:	f000 8086 	beq.w	800b1e2 <HAL_TIM_ConfigClockSource+0x1c2>
 800b0d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b0da:	d87f      	bhi.n	800b1dc <HAL_TIM_ConfigClockSource+0x1bc>
 800b0dc:	2b70      	cmp	r3, #112	; 0x70
 800b0de:	d01a      	beq.n	800b116 <HAL_TIM_ConfigClockSource+0xf6>
 800b0e0:	2b70      	cmp	r3, #112	; 0x70
 800b0e2:	d87b      	bhi.n	800b1dc <HAL_TIM_ConfigClockSource+0x1bc>
 800b0e4:	2b60      	cmp	r3, #96	; 0x60
 800b0e6:	d050      	beq.n	800b18a <HAL_TIM_ConfigClockSource+0x16a>
 800b0e8:	2b60      	cmp	r3, #96	; 0x60
 800b0ea:	d877      	bhi.n	800b1dc <HAL_TIM_ConfigClockSource+0x1bc>
 800b0ec:	2b50      	cmp	r3, #80	; 0x50
 800b0ee:	d03c      	beq.n	800b16a <HAL_TIM_ConfigClockSource+0x14a>
 800b0f0:	2b50      	cmp	r3, #80	; 0x50
 800b0f2:	d873      	bhi.n	800b1dc <HAL_TIM_ConfigClockSource+0x1bc>
 800b0f4:	2b40      	cmp	r3, #64	; 0x40
 800b0f6:	d058      	beq.n	800b1aa <HAL_TIM_ConfigClockSource+0x18a>
 800b0f8:	2b40      	cmp	r3, #64	; 0x40
 800b0fa:	d86f      	bhi.n	800b1dc <HAL_TIM_ConfigClockSource+0x1bc>
 800b0fc:	2b30      	cmp	r3, #48	; 0x30
 800b0fe:	d064      	beq.n	800b1ca <HAL_TIM_ConfigClockSource+0x1aa>
 800b100:	2b30      	cmp	r3, #48	; 0x30
 800b102:	d86b      	bhi.n	800b1dc <HAL_TIM_ConfigClockSource+0x1bc>
 800b104:	2b20      	cmp	r3, #32
 800b106:	d060      	beq.n	800b1ca <HAL_TIM_ConfigClockSource+0x1aa>
 800b108:	2b20      	cmp	r3, #32
 800b10a:	d867      	bhi.n	800b1dc <HAL_TIM_ConfigClockSource+0x1bc>
 800b10c:	2b00      	cmp	r3, #0
 800b10e:	d05c      	beq.n	800b1ca <HAL_TIM_ConfigClockSource+0x1aa>
 800b110:	2b10      	cmp	r3, #16
 800b112:	d05a      	beq.n	800b1ca <HAL_TIM_ConfigClockSource+0x1aa>
 800b114:	e062      	b.n	800b1dc <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b116:	687b      	ldr	r3, [r7, #4]
 800b118:	6818      	ldr	r0, [r3, #0]
 800b11a:	683b      	ldr	r3, [r7, #0]
 800b11c:	6899      	ldr	r1, [r3, #8]
 800b11e:	683b      	ldr	r3, [r7, #0]
 800b120:	685a      	ldr	r2, [r3, #4]
 800b122:	683b      	ldr	r3, [r7, #0]
 800b124:	68db      	ldr	r3, [r3, #12]
 800b126:	f000 fda9 	bl	800bc7c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800b12a:	687b      	ldr	r3, [r7, #4]
 800b12c:	681b      	ldr	r3, [r3, #0]
 800b12e:	689b      	ldr	r3, [r3, #8]
 800b130:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800b132:	68bb      	ldr	r3, [r7, #8]
 800b134:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800b138:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800b13a:	687b      	ldr	r3, [r7, #4]
 800b13c:	681b      	ldr	r3, [r3, #0]
 800b13e:	68ba      	ldr	r2, [r7, #8]
 800b140:	609a      	str	r2, [r3, #8]
      break;
 800b142:	e04f      	b.n	800b1e4 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b144:	687b      	ldr	r3, [r7, #4]
 800b146:	6818      	ldr	r0, [r3, #0]
 800b148:	683b      	ldr	r3, [r7, #0]
 800b14a:	6899      	ldr	r1, [r3, #8]
 800b14c:	683b      	ldr	r3, [r7, #0]
 800b14e:	685a      	ldr	r2, [r3, #4]
 800b150:	683b      	ldr	r3, [r7, #0]
 800b152:	68db      	ldr	r3, [r3, #12]
 800b154:	f000 fd92 	bl	800bc7c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800b158:	687b      	ldr	r3, [r7, #4]
 800b15a:	681b      	ldr	r3, [r3, #0]
 800b15c:	689a      	ldr	r2, [r3, #8]
 800b15e:	687b      	ldr	r3, [r7, #4]
 800b160:	681b      	ldr	r3, [r3, #0]
 800b162:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800b166:	609a      	str	r2, [r3, #8]
      break;
 800b168:	e03c      	b.n	800b1e4 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b16a:	687b      	ldr	r3, [r7, #4]
 800b16c:	6818      	ldr	r0, [r3, #0]
 800b16e:	683b      	ldr	r3, [r7, #0]
 800b170:	6859      	ldr	r1, [r3, #4]
 800b172:	683b      	ldr	r3, [r7, #0]
 800b174:	68db      	ldr	r3, [r3, #12]
 800b176:	461a      	mov	r2, r3
 800b178:	f000 fc4c 	bl	800ba14 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800b17c:	687b      	ldr	r3, [r7, #4]
 800b17e:	681b      	ldr	r3, [r3, #0]
 800b180:	2150      	movs	r1, #80	; 0x50
 800b182:	4618      	mov	r0, r3
 800b184:	f000 fd5c 	bl	800bc40 <TIM_ITRx_SetConfig>
      break;
 800b188:	e02c      	b.n	800b1e4 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800b18a:	687b      	ldr	r3, [r7, #4]
 800b18c:	6818      	ldr	r0, [r3, #0]
 800b18e:	683b      	ldr	r3, [r7, #0]
 800b190:	6859      	ldr	r1, [r3, #4]
 800b192:	683b      	ldr	r3, [r7, #0]
 800b194:	68db      	ldr	r3, [r3, #12]
 800b196:	461a      	mov	r2, r3
 800b198:	f000 fca8 	bl	800baec <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800b19c:	687b      	ldr	r3, [r7, #4]
 800b19e:	681b      	ldr	r3, [r3, #0]
 800b1a0:	2160      	movs	r1, #96	; 0x60
 800b1a2:	4618      	mov	r0, r3
 800b1a4:	f000 fd4c 	bl	800bc40 <TIM_ITRx_SetConfig>
      break;
 800b1a8:	e01c      	b.n	800b1e4 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b1aa:	687b      	ldr	r3, [r7, #4]
 800b1ac:	6818      	ldr	r0, [r3, #0]
 800b1ae:	683b      	ldr	r3, [r7, #0]
 800b1b0:	6859      	ldr	r1, [r3, #4]
 800b1b2:	683b      	ldr	r3, [r7, #0]
 800b1b4:	68db      	ldr	r3, [r3, #12]
 800b1b6:	461a      	mov	r2, r3
 800b1b8:	f000 fc2c 	bl	800ba14 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800b1bc:	687b      	ldr	r3, [r7, #4]
 800b1be:	681b      	ldr	r3, [r3, #0]
 800b1c0:	2140      	movs	r1, #64	; 0x40
 800b1c2:	4618      	mov	r0, r3
 800b1c4:	f000 fd3c 	bl	800bc40 <TIM_ITRx_SetConfig>
      break;
 800b1c8:	e00c      	b.n	800b1e4 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800b1ca:	687b      	ldr	r3, [r7, #4]
 800b1cc:	681a      	ldr	r2, [r3, #0]
 800b1ce:	683b      	ldr	r3, [r7, #0]
 800b1d0:	681b      	ldr	r3, [r3, #0]
 800b1d2:	4619      	mov	r1, r3
 800b1d4:	4610      	mov	r0, r2
 800b1d6:	f000 fd33 	bl	800bc40 <TIM_ITRx_SetConfig>
      break;
 800b1da:	e003      	b.n	800b1e4 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800b1dc:	2301      	movs	r3, #1
 800b1de:	73fb      	strb	r3, [r7, #15]
      break;
 800b1e0:	e000      	b.n	800b1e4 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800b1e2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800b1e4:	687b      	ldr	r3, [r7, #4]
 800b1e6:	2201      	movs	r2, #1
 800b1e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b1ec:	687b      	ldr	r3, [r7, #4]
 800b1ee:	2200      	movs	r2, #0
 800b1f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800b1f4:	7bfb      	ldrb	r3, [r7, #15]
}
 800b1f6:	4618      	mov	r0, r3
 800b1f8:	3710      	adds	r7, #16
 800b1fa:	46bd      	mov	sp, r7
 800b1fc:	bd80      	pop	{r7, pc}
 800b1fe:	bf00      	nop
 800b200:	ffceff88 	.word	0xffceff88
 800b204:	00100040 	.word	0x00100040
 800b208:	00100030 	.word	0x00100030
 800b20c:	00100020 	.word	0x00100020

0800b210 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800b210:	b480      	push	{r7}
 800b212:	b083      	sub	sp, #12
 800b214:	af00      	add	r7, sp, #0
 800b216:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800b218:	bf00      	nop
 800b21a:	370c      	adds	r7, #12
 800b21c:	46bd      	mov	sp, r7
 800b21e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b222:	4770      	bx	lr

0800b224 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800b224:	b480      	push	{r7}
 800b226:	b083      	sub	sp, #12
 800b228:	af00      	add	r7, sp, #0
 800b22a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800b22c:	bf00      	nop
 800b22e:	370c      	adds	r7, #12
 800b230:	46bd      	mov	sp, r7
 800b232:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b236:	4770      	bx	lr

0800b238 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800b238:	b480      	push	{r7}
 800b23a:	b083      	sub	sp, #12
 800b23c:	af00      	add	r7, sp, #0
 800b23e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800b240:	bf00      	nop
 800b242:	370c      	adds	r7, #12
 800b244:	46bd      	mov	sp, r7
 800b246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b24a:	4770      	bx	lr

0800b24c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800b24c:	b480      	push	{r7}
 800b24e:	b085      	sub	sp, #20
 800b250:	af00      	add	r7, sp, #0
 800b252:	6078      	str	r0, [r7, #4]
 800b254:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800b256:	687b      	ldr	r3, [r7, #4]
 800b258:	681b      	ldr	r3, [r3, #0]
 800b25a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b25c:	687b      	ldr	r3, [r7, #4]
 800b25e:	4a40      	ldr	r2, [pc, #256]	; (800b360 <TIM_Base_SetConfig+0x114>)
 800b260:	4293      	cmp	r3, r2
 800b262:	d013      	beq.n	800b28c <TIM_Base_SetConfig+0x40>
 800b264:	687b      	ldr	r3, [r7, #4]
 800b266:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b26a:	d00f      	beq.n	800b28c <TIM_Base_SetConfig+0x40>
 800b26c:	687b      	ldr	r3, [r7, #4]
 800b26e:	4a3d      	ldr	r2, [pc, #244]	; (800b364 <TIM_Base_SetConfig+0x118>)
 800b270:	4293      	cmp	r3, r2
 800b272:	d00b      	beq.n	800b28c <TIM_Base_SetConfig+0x40>
 800b274:	687b      	ldr	r3, [r7, #4]
 800b276:	4a3c      	ldr	r2, [pc, #240]	; (800b368 <TIM_Base_SetConfig+0x11c>)
 800b278:	4293      	cmp	r3, r2
 800b27a:	d007      	beq.n	800b28c <TIM_Base_SetConfig+0x40>
 800b27c:	687b      	ldr	r3, [r7, #4]
 800b27e:	4a3b      	ldr	r2, [pc, #236]	; (800b36c <TIM_Base_SetConfig+0x120>)
 800b280:	4293      	cmp	r3, r2
 800b282:	d003      	beq.n	800b28c <TIM_Base_SetConfig+0x40>
 800b284:	687b      	ldr	r3, [r7, #4]
 800b286:	4a3a      	ldr	r2, [pc, #232]	; (800b370 <TIM_Base_SetConfig+0x124>)
 800b288:	4293      	cmp	r3, r2
 800b28a:	d108      	bne.n	800b29e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800b28c:	68fb      	ldr	r3, [r7, #12]
 800b28e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b292:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800b294:	683b      	ldr	r3, [r7, #0]
 800b296:	685b      	ldr	r3, [r3, #4]
 800b298:	68fa      	ldr	r2, [r7, #12]
 800b29a:	4313      	orrs	r3, r2
 800b29c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800b29e:	687b      	ldr	r3, [r7, #4]
 800b2a0:	4a2f      	ldr	r2, [pc, #188]	; (800b360 <TIM_Base_SetConfig+0x114>)
 800b2a2:	4293      	cmp	r3, r2
 800b2a4:	d01f      	beq.n	800b2e6 <TIM_Base_SetConfig+0x9a>
 800b2a6:	687b      	ldr	r3, [r7, #4]
 800b2a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b2ac:	d01b      	beq.n	800b2e6 <TIM_Base_SetConfig+0x9a>
 800b2ae:	687b      	ldr	r3, [r7, #4]
 800b2b0:	4a2c      	ldr	r2, [pc, #176]	; (800b364 <TIM_Base_SetConfig+0x118>)
 800b2b2:	4293      	cmp	r3, r2
 800b2b4:	d017      	beq.n	800b2e6 <TIM_Base_SetConfig+0x9a>
 800b2b6:	687b      	ldr	r3, [r7, #4]
 800b2b8:	4a2b      	ldr	r2, [pc, #172]	; (800b368 <TIM_Base_SetConfig+0x11c>)
 800b2ba:	4293      	cmp	r3, r2
 800b2bc:	d013      	beq.n	800b2e6 <TIM_Base_SetConfig+0x9a>
 800b2be:	687b      	ldr	r3, [r7, #4]
 800b2c0:	4a2a      	ldr	r2, [pc, #168]	; (800b36c <TIM_Base_SetConfig+0x120>)
 800b2c2:	4293      	cmp	r3, r2
 800b2c4:	d00f      	beq.n	800b2e6 <TIM_Base_SetConfig+0x9a>
 800b2c6:	687b      	ldr	r3, [r7, #4]
 800b2c8:	4a29      	ldr	r2, [pc, #164]	; (800b370 <TIM_Base_SetConfig+0x124>)
 800b2ca:	4293      	cmp	r3, r2
 800b2cc:	d00b      	beq.n	800b2e6 <TIM_Base_SetConfig+0x9a>
 800b2ce:	687b      	ldr	r3, [r7, #4]
 800b2d0:	4a28      	ldr	r2, [pc, #160]	; (800b374 <TIM_Base_SetConfig+0x128>)
 800b2d2:	4293      	cmp	r3, r2
 800b2d4:	d007      	beq.n	800b2e6 <TIM_Base_SetConfig+0x9a>
 800b2d6:	687b      	ldr	r3, [r7, #4]
 800b2d8:	4a27      	ldr	r2, [pc, #156]	; (800b378 <TIM_Base_SetConfig+0x12c>)
 800b2da:	4293      	cmp	r3, r2
 800b2dc:	d003      	beq.n	800b2e6 <TIM_Base_SetConfig+0x9a>
 800b2de:	687b      	ldr	r3, [r7, #4]
 800b2e0:	4a26      	ldr	r2, [pc, #152]	; (800b37c <TIM_Base_SetConfig+0x130>)
 800b2e2:	4293      	cmp	r3, r2
 800b2e4:	d108      	bne.n	800b2f8 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800b2e6:	68fb      	ldr	r3, [r7, #12]
 800b2e8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b2ec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800b2ee:	683b      	ldr	r3, [r7, #0]
 800b2f0:	68db      	ldr	r3, [r3, #12]
 800b2f2:	68fa      	ldr	r2, [r7, #12]
 800b2f4:	4313      	orrs	r3, r2
 800b2f6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800b2f8:	68fb      	ldr	r3, [r7, #12]
 800b2fa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800b2fe:	683b      	ldr	r3, [r7, #0]
 800b300:	695b      	ldr	r3, [r3, #20]
 800b302:	4313      	orrs	r3, r2
 800b304:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800b306:	687b      	ldr	r3, [r7, #4]
 800b308:	68fa      	ldr	r2, [r7, #12]
 800b30a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800b30c:	683b      	ldr	r3, [r7, #0]
 800b30e:	689a      	ldr	r2, [r3, #8]
 800b310:	687b      	ldr	r3, [r7, #4]
 800b312:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800b314:	683b      	ldr	r3, [r7, #0]
 800b316:	681a      	ldr	r2, [r3, #0]
 800b318:	687b      	ldr	r3, [r7, #4]
 800b31a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800b31c:	687b      	ldr	r3, [r7, #4]
 800b31e:	4a10      	ldr	r2, [pc, #64]	; (800b360 <TIM_Base_SetConfig+0x114>)
 800b320:	4293      	cmp	r3, r2
 800b322:	d00f      	beq.n	800b344 <TIM_Base_SetConfig+0xf8>
 800b324:	687b      	ldr	r3, [r7, #4]
 800b326:	4a12      	ldr	r2, [pc, #72]	; (800b370 <TIM_Base_SetConfig+0x124>)
 800b328:	4293      	cmp	r3, r2
 800b32a:	d00b      	beq.n	800b344 <TIM_Base_SetConfig+0xf8>
 800b32c:	687b      	ldr	r3, [r7, #4]
 800b32e:	4a11      	ldr	r2, [pc, #68]	; (800b374 <TIM_Base_SetConfig+0x128>)
 800b330:	4293      	cmp	r3, r2
 800b332:	d007      	beq.n	800b344 <TIM_Base_SetConfig+0xf8>
 800b334:	687b      	ldr	r3, [r7, #4]
 800b336:	4a10      	ldr	r2, [pc, #64]	; (800b378 <TIM_Base_SetConfig+0x12c>)
 800b338:	4293      	cmp	r3, r2
 800b33a:	d003      	beq.n	800b344 <TIM_Base_SetConfig+0xf8>
 800b33c:	687b      	ldr	r3, [r7, #4]
 800b33e:	4a0f      	ldr	r2, [pc, #60]	; (800b37c <TIM_Base_SetConfig+0x130>)
 800b340:	4293      	cmp	r3, r2
 800b342:	d103      	bne.n	800b34c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800b344:	683b      	ldr	r3, [r7, #0]
 800b346:	691a      	ldr	r2, [r3, #16]
 800b348:	687b      	ldr	r3, [r7, #4]
 800b34a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800b34c:	687b      	ldr	r3, [r7, #4]
 800b34e:	2201      	movs	r2, #1
 800b350:	615a      	str	r2, [r3, #20]
}
 800b352:	bf00      	nop
 800b354:	3714      	adds	r7, #20
 800b356:	46bd      	mov	sp, r7
 800b358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b35c:	4770      	bx	lr
 800b35e:	bf00      	nop
 800b360:	40010000 	.word	0x40010000
 800b364:	40000400 	.word	0x40000400
 800b368:	40000800 	.word	0x40000800
 800b36c:	40000c00 	.word	0x40000c00
 800b370:	40010400 	.word	0x40010400
 800b374:	40014000 	.word	0x40014000
 800b378:	40014400 	.word	0x40014400
 800b37c:	40014800 	.word	0x40014800

0800b380 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b380:	b480      	push	{r7}
 800b382:	b087      	sub	sp, #28
 800b384:	af00      	add	r7, sp, #0
 800b386:	6078      	str	r0, [r7, #4]
 800b388:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b38a:	687b      	ldr	r3, [r7, #4]
 800b38c:	6a1b      	ldr	r3, [r3, #32]
 800b38e:	f023 0201 	bic.w	r2, r3, #1
 800b392:	687b      	ldr	r3, [r7, #4]
 800b394:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b396:	687b      	ldr	r3, [r7, #4]
 800b398:	6a1b      	ldr	r3, [r3, #32]
 800b39a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b39c:	687b      	ldr	r3, [r7, #4]
 800b39e:	685b      	ldr	r3, [r3, #4]
 800b3a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b3a2:	687b      	ldr	r3, [r7, #4]
 800b3a4:	699b      	ldr	r3, [r3, #24]
 800b3a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800b3a8:	68fa      	ldr	r2, [r7, #12]
 800b3aa:	4b37      	ldr	r3, [pc, #220]	; (800b488 <TIM_OC1_SetConfig+0x108>)
 800b3ac:	4013      	ands	r3, r2
 800b3ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800b3b0:	68fb      	ldr	r3, [r7, #12]
 800b3b2:	f023 0303 	bic.w	r3, r3, #3
 800b3b6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b3b8:	683b      	ldr	r3, [r7, #0]
 800b3ba:	681b      	ldr	r3, [r3, #0]
 800b3bc:	68fa      	ldr	r2, [r7, #12]
 800b3be:	4313      	orrs	r3, r2
 800b3c0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800b3c2:	697b      	ldr	r3, [r7, #20]
 800b3c4:	f023 0302 	bic.w	r3, r3, #2
 800b3c8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800b3ca:	683b      	ldr	r3, [r7, #0]
 800b3cc:	689b      	ldr	r3, [r3, #8]
 800b3ce:	697a      	ldr	r2, [r7, #20]
 800b3d0:	4313      	orrs	r3, r2
 800b3d2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800b3d4:	687b      	ldr	r3, [r7, #4]
 800b3d6:	4a2d      	ldr	r2, [pc, #180]	; (800b48c <TIM_OC1_SetConfig+0x10c>)
 800b3d8:	4293      	cmp	r3, r2
 800b3da:	d00f      	beq.n	800b3fc <TIM_OC1_SetConfig+0x7c>
 800b3dc:	687b      	ldr	r3, [r7, #4]
 800b3de:	4a2c      	ldr	r2, [pc, #176]	; (800b490 <TIM_OC1_SetConfig+0x110>)
 800b3e0:	4293      	cmp	r3, r2
 800b3e2:	d00b      	beq.n	800b3fc <TIM_OC1_SetConfig+0x7c>
 800b3e4:	687b      	ldr	r3, [r7, #4]
 800b3e6:	4a2b      	ldr	r2, [pc, #172]	; (800b494 <TIM_OC1_SetConfig+0x114>)
 800b3e8:	4293      	cmp	r3, r2
 800b3ea:	d007      	beq.n	800b3fc <TIM_OC1_SetConfig+0x7c>
 800b3ec:	687b      	ldr	r3, [r7, #4]
 800b3ee:	4a2a      	ldr	r2, [pc, #168]	; (800b498 <TIM_OC1_SetConfig+0x118>)
 800b3f0:	4293      	cmp	r3, r2
 800b3f2:	d003      	beq.n	800b3fc <TIM_OC1_SetConfig+0x7c>
 800b3f4:	687b      	ldr	r3, [r7, #4]
 800b3f6:	4a29      	ldr	r2, [pc, #164]	; (800b49c <TIM_OC1_SetConfig+0x11c>)
 800b3f8:	4293      	cmp	r3, r2
 800b3fa:	d10c      	bne.n	800b416 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800b3fc:	697b      	ldr	r3, [r7, #20]
 800b3fe:	f023 0308 	bic.w	r3, r3, #8
 800b402:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800b404:	683b      	ldr	r3, [r7, #0]
 800b406:	68db      	ldr	r3, [r3, #12]
 800b408:	697a      	ldr	r2, [r7, #20]
 800b40a:	4313      	orrs	r3, r2
 800b40c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800b40e:	697b      	ldr	r3, [r7, #20]
 800b410:	f023 0304 	bic.w	r3, r3, #4
 800b414:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b416:	687b      	ldr	r3, [r7, #4]
 800b418:	4a1c      	ldr	r2, [pc, #112]	; (800b48c <TIM_OC1_SetConfig+0x10c>)
 800b41a:	4293      	cmp	r3, r2
 800b41c:	d00f      	beq.n	800b43e <TIM_OC1_SetConfig+0xbe>
 800b41e:	687b      	ldr	r3, [r7, #4]
 800b420:	4a1b      	ldr	r2, [pc, #108]	; (800b490 <TIM_OC1_SetConfig+0x110>)
 800b422:	4293      	cmp	r3, r2
 800b424:	d00b      	beq.n	800b43e <TIM_OC1_SetConfig+0xbe>
 800b426:	687b      	ldr	r3, [r7, #4]
 800b428:	4a1a      	ldr	r2, [pc, #104]	; (800b494 <TIM_OC1_SetConfig+0x114>)
 800b42a:	4293      	cmp	r3, r2
 800b42c:	d007      	beq.n	800b43e <TIM_OC1_SetConfig+0xbe>
 800b42e:	687b      	ldr	r3, [r7, #4]
 800b430:	4a19      	ldr	r2, [pc, #100]	; (800b498 <TIM_OC1_SetConfig+0x118>)
 800b432:	4293      	cmp	r3, r2
 800b434:	d003      	beq.n	800b43e <TIM_OC1_SetConfig+0xbe>
 800b436:	687b      	ldr	r3, [r7, #4]
 800b438:	4a18      	ldr	r2, [pc, #96]	; (800b49c <TIM_OC1_SetConfig+0x11c>)
 800b43a:	4293      	cmp	r3, r2
 800b43c:	d111      	bne.n	800b462 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800b43e:	693b      	ldr	r3, [r7, #16]
 800b440:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b444:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800b446:	693b      	ldr	r3, [r7, #16]
 800b448:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800b44c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800b44e:	683b      	ldr	r3, [r7, #0]
 800b450:	695b      	ldr	r3, [r3, #20]
 800b452:	693a      	ldr	r2, [r7, #16]
 800b454:	4313      	orrs	r3, r2
 800b456:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800b458:	683b      	ldr	r3, [r7, #0]
 800b45a:	699b      	ldr	r3, [r3, #24]
 800b45c:	693a      	ldr	r2, [r7, #16]
 800b45e:	4313      	orrs	r3, r2
 800b460:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b462:	687b      	ldr	r3, [r7, #4]
 800b464:	693a      	ldr	r2, [r7, #16]
 800b466:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b468:	687b      	ldr	r3, [r7, #4]
 800b46a:	68fa      	ldr	r2, [r7, #12]
 800b46c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800b46e:	683b      	ldr	r3, [r7, #0]
 800b470:	685a      	ldr	r2, [r3, #4]
 800b472:	687b      	ldr	r3, [r7, #4]
 800b474:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b476:	687b      	ldr	r3, [r7, #4]
 800b478:	697a      	ldr	r2, [r7, #20]
 800b47a:	621a      	str	r2, [r3, #32]
}
 800b47c:	bf00      	nop
 800b47e:	371c      	adds	r7, #28
 800b480:	46bd      	mov	sp, r7
 800b482:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b486:	4770      	bx	lr
 800b488:	fffeff8f 	.word	0xfffeff8f
 800b48c:	40010000 	.word	0x40010000
 800b490:	40010400 	.word	0x40010400
 800b494:	40014000 	.word	0x40014000
 800b498:	40014400 	.word	0x40014400
 800b49c:	40014800 	.word	0x40014800

0800b4a0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b4a0:	b480      	push	{r7}
 800b4a2:	b087      	sub	sp, #28
 800b4a4:	af00      	add	r7, sp, #0
 800b4a6:	6078      	str	r0, [r7, #4]
 800b4a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b4aa:	687b      	ldr	r3, [r7, #4]
 800b4ac:	6a1b      	ldr	r3, [r3, #32]
 800b4ae:	f023 0210 	bic.w	r2, r3, #16
 800b4b2:	687b      	ldr	r3, [r7, #4]
 800b4b4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b4b6:	687b      	ldr	r3, [r7, #4]
 800b4b8:	6a1b      	ldr	r3, [r3, #32]
 800b4ba:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b4bc:	687b      	ldr	r3, [r7, #4]
 800b4be:	685b      	ldr	r3, [r3, #4]
 800b4c0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b4c2:	687b      	ldr	r3, [r7, #4]
 800b4c4:	699b      	ldr	r3, [r3, #24]
 800b4c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800b4c8:	68fa      	ldr	r2, [r7, #12]
 800b4ca:	4b34      	ldr	r3, [pc, #208]	; (800b59c <TIM_OC2_SetConfig+0xfc>)
 800b4cc:	4013      	ands	r3, r2
 800b4ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800b4d0:	68fb      	ldr	r3, [r7, #12]
 800b4d2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b4d6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b4d8:	683b      	ldr	r3, [r7, #0]
 800b4da:	681b      	ldr	r3, [r3, #0]
 800b4dc:	021b      	lsls	r3, r3, #8
 800b4de:	68fa      	ldr	r2, [r7, #12]
 800b4e0:	4313      	orrs	r3, r2
 800b4e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800b4e4:	697b      	ldr	r3, [r7, #20]
 800b4e6:	f023 0320 	bic.w	r3, r3, #32
 800b4ea:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800b4ec:	683b      	ldr	r3, [r7, #0]
 800b4ee:	689b      	ldr	r3, [r3, #8]
 800b4f0:	011b      	lsls	r3, r3, #4
 800b4f2:	697a      	ldr	r2, [r7, #20]
 800b4f4:	4313      	orrs	r3, r2
 800b4f6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800b4f8:	687b      	ldr	r3, [r7, #4]
 800b4fa:	4a29      	ldr	r2, [pc, #164]	; (800b5a0 <TIM_OC2_SetConfig+0x100>)
 800b4fc:	4293      	cmp	r3, r2
 800b4fe:	d003      	beq.n	800b508 <TIM_OC2_SetConfig+0x68>
 800b500:	687b      	ldr	r3, [r7, #4]
 800b502:	4a28      	ldr	r2, [pc, #160]	; (800b5a4 <TIM_OC2_SetConfig+0x104>)
 800b504:	4293      	cmp	r3, r2
 800b506:	d10d      	bne.n	800b524 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800b508:	697b      	ldr	r3, [r7, #20]
 800b50a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b50e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800b510:	683b      	ldr	r3, [r7, #0]
 800b512:	68db      	ldr	r3, [r3, #12]
 800b514:	011b      	lsls	r3, r3, #4
 800b516:	697a      	ldr	r2, [r7, #20]
 800b518:	4313      	orrs	r3, r2
 800b51a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800b51c:	697b      	ldr	r3, [r7, #20]
 800b51e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b522:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b524:	687b      	ldr	r3, [r7, #4]
 800b526:	4a1e      	ldr	r2, [pc, #120]	; (800b5a0 <TIM_OC2_SetConfig+0x100>)
 800b528:	4293      	cmp	r3, r2
 800b52a:	d00f      	beq.n	800b54c <TIM_OC2_SetConfig+0xac>
 800b52c:	687b      	ldr	r3, [r7, #4]
 800b52e:	4a1d      	ldr	r2, [pc, #116]	; (800b5a4 <TIM_OC2_SetConfig+0x104>)
 800b530:	4293      	cmp	r3, r2
 800b532:	d00b      	beq.n	800b54c <TIM_OC2_SetConfig+0xac>
 800b534:	687b      	ldr	r3, [r7, #4]
 800b536:	4a1c      	ldr	r2, [pc, #112]	; (800b5a8 <TIM_OC2_SetConfig+0x108>)
 800b538:	4293      	cmp	r3, r2
 800b53a:	d007      	beq.n	800b54c <TIM_OC2_SetConfig+0xac>
 800b53c:	687b      	ldr	r3, [r7, #4]
 800b53e:	4a1b      	ldr	r2, [pc, #108]	; (800b5ac <TIM_OC2_SetConfig+0x10c>)
 800b540:	4293      	cmp	r3, r2
 800b542:	d003      	beq.n	800b54c <TIM_OC2_SetConfig+0xac>
 800b544:	687b      	ldr	r3, [r7, #4]
 800b546:	4a1a      	ldr	r2, [pc, #104]	; (800b5b0 <TIM_OC2_SetConfig+0x110>)
 800b548:	4293      	cmp	r3, r2
 800b54a:	d113      	bne.n	800b574 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800b54c:	693b      	ldr	r3, [r7, #16]
 800b54e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800b552:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800b554:	693b      	ldr	r3, [r7, #16]
 800b556:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800b55a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800b55c:	683b      	ldr	r3, [r7, #0]
 800b55e:	695b      	ldr	r3, [r3, #20]
 800b560:	009b      	lsls	r3, r3, #2
 800b562:	693a      	ldr	r2, [r7, #16]
 800b564:	4313      	orrs	r3, r2
 800b566:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800b568:	683b      	ldr	r3, [r7, #0]
 800b56a:	699b      	ldr	r3, [r3, #24]
 800b56c:	009b      	lsls	r3, r3, #2
 800b56e:	693a      	ldr	r2, [r7, #16]
 800b570:	4313      	orrs	r3, r2
 800b572:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b574:	687b      	ldr	r3, [r7, #4]
 800b576:	693a      	ldr	r2, [r7, #16]
 800b578:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b57a:	687b      	ldr	r3, [r7, #4]
 800b57c:	68fa      	ldr	r2, [r7, #12]
 800b57e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800b580:	683b      	ldr	r3, [r7, #0]
 800b582:	685a      	ldr	r2, [r3, #4]
 800b584:	687b      	ldr	r3, [r7, #4]
 800b586:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b588:	687b      	ldr	r3, [r7, #4]
 800b58a:	697a      	ldr	r2, [r7, #20]
 800b58c:	621a      	str	r2, [r3, #32]
}
 800b58e:	bf00      	nop
 800b590:	371c      	adds	r7, #28
 800b592:	46bd      	mov	sp, r7
 800b594:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b598:	4770      	bx	lr
 800b59a:	bf00      	nop
 800b59c:	feff8fff 	.word	0xfeff8fff
 800b5a0:	40010000 	.word	0x40010000
 800b5a4:	40010400 	.word	0x40010400
 800b5a8:	40014000 	.word	0x40014000
 800b5ac:	40014400 	.word	0x40014400
 800b5b0:	40014800 	.word	0x40014800

0800b5b4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b5b4:	b480      	push	{r7}
 800b5b6:	b087      	sub	sp, #28
 800b5b8:	af00      	add	r7, sp, #0
 800b5ba:	6078      	str	r0, [r7, #4]
 800b5bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800b5be:	687b      	ldr	r3, [r7, #4]
 800b5c0:	6a1b      	ldr	r3, [r3, #32]
 800b5c2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800b5c6:	687b      	ldr	r3, [r7, #4]
 800b5c8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b5ca:	687b      	ldr	r3, [r7, #4]
 800b5cc:	6a1b      	ldr	r3, [r3, #32]
 800b5ce:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b5d0:	687b      	ldr	r3, [r7, #4]
 800b5d2:	685b      	ldr	r3, [r3, #4]
 800b5d4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b5d6:	687b      	ldr	r3, [r7, #4]
 800b5d8:	69db      	ldr	r3, [r3, #28]
 800b5da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800b5dc:	68fa      	ldr	r2, [r7, #12]
 800b5de:	4b33      	ldr	r3, [pc, #204]	; (800b6ac <TIM_OC3_SetConfig+0xf8>)
 800b5e0:	4013      	ands	r3, r2
 800b5e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800b5e4:	68fb      	ldr	r3, [r7, #12]
 800b5e6:	f023 0303 	bic.w	r3, r3, #3
 800b5ea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b5ec:	683b      	ldr	r3, [r7, #0]
 800b5ee:	681b      	ldr	r3, [r3, #0]
 800b5f0:	68fa      	ldr	r2, [r7, #12]
 800b5f2:	4313      	orrs	r3, r2
 800b5f4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800b5f6:	697b      	ldr	r3, [r7, #20]
 800b5f8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800b5fc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800b5fe:	683b      	ldr	r3, [r7, #0]
 800b600:	689b      	ldr	r3, [r3, #8]
 800b602:	021b      	lsls	r3, r3, #8
 800b604:	697a      	ldr	r2, [r7, #20]
 800b606:	4313      	orrs	r3, r2
 800b608:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800b60a:	687b      	ldr	r3, [r7, #4]
 800b60c:	4a28      	ldr	r2, [pc, #160]	; (800b6b0 <TIM_OC3_SetConfig+0xfc>)
 800b60e:	4293      	cmp	r3, r2
 800b610:	d003      	beq.n	800b61a <TIM_OC3_SetConfig+0x66>
 800b612:	687b      	ldr	r3, [r7, #4]
 800b614:	4a27      	ldr	r2, [pc, #156]	; (800b6b4 <TIM_OC3_SetConfig+0x100>)
 800b616:	4293      	cmp	r3, r2
 800b618:	d10d      	bne.n	800b636 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800b61a:	697b      	ldr	r3, [r7, #20]
 800b61c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800b620:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800b622:	683b      	ldr	r3, [r7, #0]
 800b624:	68db      	ldr	r3, [r3, #12]
 800b626:	021b      	lsls	r3, r3, #8
 800b628:	697a      	ldr	r2, [r7, #20]
 800b62a:	4313      	orrs	r3, r2
 800b62c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800b62e:	697b      	ldr	r3, [r7, #20]
 800b630:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800b634:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b636:	687b      	ldr	r3, [r7, #4]
 800b638:	4a1d      	ldr	r2, [pc, #116]	; (800b6b0 <TIM_OC3_SetConfig+0xfc>)
 800b63a:	4293      	cmp	r3, r2
 800b63c:	d00f      	beq.n	800b65e <TIM_OC3_SetConfig+0xaa>
 800b63e:	687b      	ldr	r3, [r7, #4]
 800b640:	4a1c      	ldr	r2, [pc, #112]	; (800b6b4 <TIM_OC3_SetConfig+0x100>)
 800b642:	4293      	cmp	r3, r2
 800b644:	d00b      	beq.n	800b65e <TIM_OC3_SetConfig+0xaa>
 800b646:	687b      	ldr	r3, [r7, #4]
 800b648:	4a1b      	ldr	r2, [pc, #108]	; (800b6b8 <TIM_OC3_SetConfig+0x104>)
 800b64a:	4293      	cmp	r3, r2
 800b64c:	d007      	beq.n	800b65e <TIM_OC3_SetConfig+0xaa>
 800b64e:	687b      	ldr	r3, [r7, #4]
 800b650:	4a1a      	ldr	r2, [pc, #104]	; (800b6bc <TIM_OC3_SetConfig+0x108>)
 800b652:	4293      	cmp	r3, r2
 800b654:	d003      	beq.n	800b65e <TIM_OC3_SetConfig+0xaa>
 800b656:	687b      	ldr	r3, [r7, #4]
 800b658:	4a19      	ldr	r2, [pc, #100]	; (800b6c0 <TIM_OC3_SetConfig+0x10c>)
 800b65a:	4293      	cmp	r3, r2
 800b65c:	d113      	bne.n	800b686 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800b65e:	693b      	ldr	r3, [r7, #16]
 800b660:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b664:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800b666:	693b      	ldr	r3, [r7, #16]
 800b668:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800b66c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800b66e:	683b      	ldr	r3, [r7, #0]
 800b670:	695b      	ldr	r3, [r3, #20]
 800b672:	011b      	lsls	r3, r3, #4
 800b674:	693a      	ldr	r2, [r7, #16]
 800b676:	4313      	orrs	r3, r2
 800b678:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800b67a:	683b      	ldr	r3, [r7, #0]
 800b67c:	699b      	ldr	r3, [r3, #24]
 800b67e:	011b      	lsls	r3, r3, #4
 800b680:	693a      	ldr	r2, [r7, #16]
 800b682:	4313      	orrs	r3, r2
 800b684:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b686:	687b      	ldr	r3, [r7, #4]
 800b688:	693a      	ldr	r2, [r7, #16]
 800b68a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b68c:	687b      	ldr	r3, [r7, #4]
 800b68e:	68fa      	ldr	r2, [r7, #12]
 800b690:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800b692:	683b      	ldr	r3, [r7, #0]
 800b694:	685a      	ldr	r2, [r3, #4]
 800b696:	687b      	ldr	r3, [r7, #4]
 800b698:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b69a:	687b      	ldr	r3, [r7, #4]
 800b69c:	697a      	ldr	r2, [r7, #20]
 800b69e:	621a      	str	r2, [r3, #32]
}
 800b6a0:	bf00      	nop
 800b6a2:	371c      	adds	r7, #28
 800b6a4:	46bd      	mov	sp, r7
 800b6a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6aa:	4770      	bx	lr
 800b6ac:	fffeff8f 	.word	0xfffeff8f
 800b6b0:	40010000 	.word	0x40010000
 800b6b4:	40010400 	.word	0x40010400
 800b6b8:	40014000 	.word	0x40014000
 800b6bc:	40014400 	.word	0x40014400
 800b6c0:	40014800 	.word	0x40014800

0800b6c4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b6c4:	b480      	push	{r7}
 800b6c6:	b087      	sub	sp, #28
 800b6c8:	af00      	add	r7, sp, #0
 800b6ca:	6078      	str	r0, [r7, #4]
 800b6cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800b6ce:	687b      	ldr	r3, [r7, #4]
 800b6d0:	6a1b      	ldr	r3, [r3, #32]
 800b6d2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800b6d6:	687b      	ldr	r3, [r7, #4]
 800b6d8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b6da:	687b      	ldr	r3, [r7, #4]
 800b6dc:	6a1b      	ldr	r3, [r3, #32]
 800b6de:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b6e0:	687b      	ldr	r3, [r7, #4]
 800b6e2:	685b      	ldr	r3, [r3, #4]
 800b6e4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b6e6:	687b      	ldr	r3, [r7, #4]
 800b6e8:	69db      	ldr	r3, [r3, #28]
 800b6ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800b6ec:	68fa      	ldr	r2, [r7, #12]
 800b6ee:	4b24      	ldr	r3, [pc, #144]	; (800b780 <TIM_OC4_SetConfig+0xbc>)
 800b6f0:	4013      	ands	r3, r2
 800b6f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800b6f4:	68fb      	ldr	r3, [r7, #12]
 800b6f6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b6fa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b6fc:	683b      	ldr	r3, [r7, #0]
 800b6fe:	681b      	ldr	r3, [r3, #0]
 800b700:	021b      	lsls	r3, r3, #8
 800b702:	68fa      	ldr	r2, [r7, #12]
 800b704:	4313      	orrs	r3, r2
 800b706:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800b708:	693b      	ldr	r3, [r7, #16]
 800b70a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800b70e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800b710:	683b      	ldr	r3, [r7, #0]
 800b712:	689b      	ldr	r3, [r3, #8]
 800b714:	031b      	lsls	r3, r3, #12
 800b716:	693a      	ldr	r2, [r7, #16]
 800b718:	4313      	orrs	r3, r2
 800b71a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b71c:	687b      	ldr	r3, [r7, #4]
 800b71e:	4a19      	ldr	r2, [pc, #100]	; (800b784 <TIM_OC4_SetConfig+0xc0>)
 800b720:	4293      	cmp	r3, r2
 800b722:	d00f      	beq.n	800b744 <TIM_OC4_SetConfig+0x80>
 800b724:	687b      	ldr	r3, [r7, #4]
 800b726:	4a18      	ldr	r2, [pc, #96]	; (800b788 <TIM_OC4_SetConfig+0xc4>)
 800b728:	4293      	cmp	r3, r2
 800b72a:	d00b      	beq.n	800b744 <TIM_OC4_SetConfig+0x80>
 800b72c:	687b      	ldr	r3, [r7, #4]
 800b72e:	4a17      	ldr	r2, [pc, #92]	; (800b78c <TIM_OC4_SetConfig+0xc8>)
 800b730:	4293      	cmp	r3, r2
 800b732:	d007      	beq.n	800b744 <TIM_OC4_SetConfig+0x80>
 800b734:	687b      	ldr	r3, [r7, #4]
 800b736:	4a16      	ldr	r2, [pc, #88]	; (800b790 <TIM_OC4_SetConfig+0xcc>)
 800b738:	4293      	cmp	r3, r2
 800b73a:	d003      	beq.n	800b744 <TIM_OC4_SetConfig+0x80>
 800b73c:	687b      	ldr	r3, [r7, #4]
 800b73e:	4a15      	ldr	r2, [pc, #84]	; (800b794 <TIM_OC4_SetConfig+0xd0>)
 800b740:	4293      	cmp	r3, r2
 800b742:	d109      	bne.n	800b758 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800b744:	697b      	ldr	r3, [r7, #20]
 800b746:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b74a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800b74c:	683b      	ldr	r3, [r7, #0]
 800b74e:	695b      	ldr	r3, [r3, #20]
 800b750:	019b      	lsls	r3, r3, #6
 800b752:	697a      	ldr	r2, [r7, #20]
 800b754:	4313      	orrs	r3, r2
 800b756:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b758:	687b      	ldr	r3, [r7, #4]
 800b75a:	697a      	ldr	r2, [r7, #20]
 800b75c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b75e:	687b      	ldr	r3, [r7, #4]
 800b760:	68fa      	ldr	r2, [r7, #12]
 800b762:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800b764:	683b      	ldr	r3, [r7, #0]
 800b766:	685a      	ldr	r2, [r3, #4]
 800b768:	687b      	ldr	r3, [r7, #4]
 800b76a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b76c:	687b      	ldr	r3, [r7, #4]
 800b76e:	693a      	ldr	r2, [r7, #16]
 800b770:	621a      	str	r2, [r3, #32]
}
 800b772:	bf00      	nop
 800b774:	371c      	adds	r7, #28
 800b776:	46bd      	mov	sp, r7
 800b778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b77c:	4770      	bx	lr
 800b77e:	bf00      	nop
 800b780:	feff8fff 	.word	0xfeff8fff
 800b784:	40010000 	.word	0x40010000
 800b788:	40010400 	.word	0x40010400
 800b78c:	40014000 	.word	0x40014000
 800b790:	40014400 	.word	0x40014400
 800b794:	40014800 	.word	0x40014800

0800b798 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800b798:	b480      	push	{r7}
 800b79a:	b087      	sub	sp, #28
 800b79c:	af00      	add	r7, sp, #0
 800b79e:	6078      	str	r0, [r7, #4]
 800b7a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800b7a2:	687b      	ldr	r3, [r7, #4]
 800b7a4:	6a1b      	ldr	r3, [r3, #32]
 800b7a6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800b7aa:	687b      	ldr	r3, [r7, #4]
 800b7ac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b7ae:	687b      	ldr	r3, [r7, #4]
 800b7b0:	6a1b      	ldr	r3, [r3, #32]
 800b7b2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b7b4:	687b      	ldr	r3, [r7, #4]
 800b7b6:	685b      	ldr	r3, [r3, #4]
 800b7b8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800b7ba:	687b      	ldr	r3, [r7, #4]
 800b7bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b7be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800b7c0:	68fa      	ldr	r2, [r7, #12]
 800b7c2:	4b21      	ldr	r3, [pc, #132]	; (800b848 <TIM_OC5_SetConfig+0xb0>)
 800b7c4:	4013      	ands	r3, r2
 800b7c6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b7c8:	683b      	ldr	r3, [r7, #0]
 800b7ca:	681b      	ldr	r3, [r3, #0]
 800b7cc:	68fa      	ldr	r2, [r7, #12]
 800b7ce:	4313      	orrs	r3, r2
 800b7d0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800b7d2:	693b      	ldr	r3, [r7, #16]
 800b7d4:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800b7d8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800b7da:	683b      	ldr	r3, [r7, #0]
 800b7dc:	689b      	ldr	r3, [r3, #8]
 800b7de:	041b      	lsls	r3, r3, #16
 800b7e0:	693a      	ldr	r2, [r7, #16]
 800b7e2:	4313      	orrs	r3, r2
 800b7e4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b7e6:	687b      	ldr	r3, [r7, #4]
 800b7e8:	4a18      	ldr	r2, [pc, #96]	; (800b84c <TIM_OC5_SetConfig+0xb4>)
 800b7ea:	4293      	cmp	r3, r2
 800b7ec:	d00f      	beq.n	800b80e <TIM_OC5_SetConfig+0x76>
 800b7ee:	687b      	ldr	r3, [r7, #4]
 800b7f0:	4a17      	ldr	r2, [pc, #92]	; (800b850 <TIM_OC5_SetConfig+0xb8>)
 800b7f2:	4293      	cmp	r3, r2
 800b7f4:	d00b      	beq.n	800b80e <TIM_OC5_SetConfig+0x76>
 800b7f6:	687b      	ldr	r3, [r7, #4]
 800b7f8:	4a16      	ldr	r2, [pc, #88]	; (800b854 <TIM_OC5_SetConfig+0xbc>)
 800b7fa:	4293      	cmp	r3, r2
 800b7fc:	d007      	beq.n	800b80e <TIM_OC5_SetConfig+0x76>
 800b7fe:	687b      	ldr	r3, [r7, #4]
 800b800:	4a15      	ldr	r2, [pc, #84]	; (800b858 <TIM_OC5_SetConfig+0xc0>)
 800b802:	4293      	cmp	r3, r2
 800b804:	d003      	beq.n	800b80e <TIM_OC5_SetConfig+0x76>
 800b806:	687b      	ldr	r3, [r7, #4]
 800b808:	4a14      	ldr	r2, [pc, #80]	; (800b85c <TIM_OC5_SetConfig+0xc4>)
 800b80a:	4293      	cmp	r3, r2
 800b80c:	d109      	bne.n	800b822 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800b80e:	697b      	ldr	r3, [r7, #20]
 800b810:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b814:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800b816:	683b      	ldr	r3, [r7, #0]
 800b818:	695b      	ldr	r3, [r3, #20]
 800b81a:	021b      	lsls	r3, r3, #8
 800b81c:	697a      	ldr	r2, [r7, #20]
 800b81e:	4313      	orrs	r3, r2
 800b820:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b822:	687b      	ldr	r3, [r7, #4]
 800b824:	697a      	ldr	r2, [r7, #20]
 800b826:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800b828:	687b      	ldr	r3, [r7, #4]
 800b82a:	68fa      	ldr	r2, [r7, #12]
 800b82c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800b82e:	683b      	ldr	r3, [r7, #0]
 800b830:	685a      	ldr	r2, [r3, #4]
 800b832:	687b      	ldr	r3, [r7, #4]
 800b834:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b836:	687b      	ldr	r3, [r7, #4]
 800b838:	693a      	ldr	r2, [r7, #16]
 800b83a:	621a      	str	r2, [r3, #32]
}
 800b83c:	bf00      	nop
 800b83e:	371c      	adds	r7, #28
 800b840:	46bd      	mov	sp, r7
 800b842:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b846:	4770      	bx	lr
 800b848:	fffeff8f 	.word	0xfffeff8f
 800b84c:	40010000 	.word	0x40010000
 800b850:	40010400 	.word	0x40010400
 800b854:	40014000 	.word	0x40014000
 800b858:	40014400 	.word	0x40014400
 800b85c:	40014800 	.word	0x40014800

0800b860 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800b860:	b480      	push	{r7}
 800b862:	b087      	sub	sp, #28
 800b864:	af00      	add	r7, sp, #0
 800b866:	6078      	str	r0, [r7, #4]
 800b868:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800b86a:	687b      	ldr	r3, [r7, #4]
 800b86c:	6a1b      	ldr	r3, [r3, #32]
 800b86e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800b872:	687b      	ldr	r3, [r7, #4]
 800b874:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b876:	687b      	ldr	r3, [r7, #4]
 800b878:	6a1b      	ldr	r3, [r3, #32]
 800b87a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b87c:	687b      	ldr	r3, [r7, #4]
 800b87e:	685b      	ldr	r3, [r3, #4]
 800b880:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800b882:	687b      	ldr	r3, [r7, #4]
 800b884:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b886:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800b888:	68fa      	ldr	r2, [r7, #12]
 800b88a:	4b22      	ldr	r3, [pc, #136]	; (800b914 <TIM_OC6_SetConfig+0xb4>)
 800b88c:	4013      	ands	r3, r2
 800b88e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b890:	683b      	ldr	r3, [r7, #0]
 800b892:	681b      	ldr	r3, [r3, #0]
 800b894:	021b      	lsls	r3, r3, #8
 800b896:	68fa      	ldr	r2, [r7, #12]
 800b898:	4313      	orrs	r3, r2
 800b89a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800b89c:	693b      	ldr	r3, [r7, #16]
 800b89e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800b8a2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800b8a4:	683b      	ldr	r3, [r7, #0]
 800b8a6:	689b      	ldr	r3, [r3, #8]
 800b8a8:	051b      	lsls	r3, r3, #20
 800b8aa:	693a      	ldr	r2, [r7, #16]
 800b8ac:	4313      	orrs	r3, r2
 800b8ae:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b8b0:	687b      	ldr	r3, [r7, #4]
 800b8b2:	4a19      	ldr	r2, [pc, #100]	; (800b918 <TIM_OC6_SetConfig+0xb8>)
 800b8b4:	4293      	cmp	r3, r2
 800b8b6:	d00f      	beq.n	800b8d8 <TIM_OC6_SetConfig+0x78>
 800b8b8:	687b      	ldr	r3, [r7, #4]
 800b8ba:	4a18      	ldr	r2, [pc, #96]	; (800b91c <TIM_OC6_SetConfig+0xbc>)
 800b8bc:	4293      	cmp	r3, r2
 800b8be:	d00b      	beq.n	800b8d8 <TIM_OC6_SetConfig+0x78>
 800b8c0:	687b      	ldr	r3, [r7, #4]
 800b8c2:	4a17      	ldr	r2, [pc, #92]	; (800b920 <TIM_OC6_SetConfig+0xc0>)
 800b8c4:	4293      	cmp	r3, r2
 800b8c6:	d007      	beq.n	800b8d8 <TIM_OC6_SetConfig+0x78>
 800b8c8:	687b      	ldr	r3, [r7, #4]
 800b8ca:	4a16      	ldr	r2, [pc, #88]	; (800b924 <TIM_OC6_SetConfig+0xc4>)
 800b8cc:	4293      	cmp	r3, r2
 800b8ce:	d003      	beq.n	800b8d8 <TIM_OC6_SetConfig+0x78>
 800b8d0:	687b      	ldr	r3, [r7, #4]
 800b8d2:	4a15      	ldr	r2, [pc, #84]	; (800b928 <TIM_OC6_SetConfig+0xc8>)
 800b8d4:	4293      	cmp	r3, r2
 800b8d6:	d109      	bne.n	800b8ec <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800b8d8:	697b      	ldr	r3, [r7, #20]
 800b8da:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800b8de:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800b8e0:	683b      	ldr	r3, [r7, #0]
 800b8e2:	695b      	ldr	r3, [r3, #20]
 800b8e4:	029b      	lsls	r3, r3, #10
 800b8e6:	697a      	ldr	r2, [r7, #20]
 800b8e8:	4313      	orrs	r3, r2
 800b8ea:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b8ec:	687b      	ldr	r3, [r7, #4]
 800b8ee:	697a      	ldr	r2, [r7, #20]
 800b8f0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800b8f2:	687b      	ldr	r3, [r7, #4]
 800b8f4:	68fa      	ldr	r2, [r7, #12]
 800b8f6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800b8f8:	683b      	ldr	r3, [r7, #0]
 800b8fa:	685a      	ldr	r2, [r3, #4]
 800b8fc:	687b      	ldr	r3, [r7, #4]
 800b8fe:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b900:	687b      	ldr	r3, [r7, #4]
 800b902:	693a      	ldr	r2, [r7, #16]
 800b904:	621a      	str	r2, [r3, #32]
}
 800b906:	bf00      	nop
 800b908:	371c      	adds	r7, #28
 800b90a:	46bd      	mov	sp, r7
 800b90c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b910:	4770      	bx	lr
 800b912:	bf00      	nop
 800b914:	feff8fff 	.word	0xfeff8fff
 800b918:	40010000 	.word	0x40010000
 800b91c:	40010400 	.word	0x40010400
 800b920:	40014000 	.word	0x40014000
 800b924:	40014400 	.word	0x40014400
 800b928:	40014800 	.word	0x40014800

0800b92c <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800b92c:	b480      	push	{r7}
 800b92e:	b087      	sub	sp, #28
 800b930:	af00      	add	r7, sp, #0
 800b932:	60f8      	str	r0, [r7, #12]
 800b934:	60b9      	str	r1, [r7, #8]
 800b936:	607a      	str	r2, [r7, #4]
 800b938:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b93a:	68fb      	ldr	r3, [r7, #12]
 800b93c:	6a1b      	ldr	r3, [r3, #32]
 800b93e:	f023 0201 	bic.w	r2, r3, #1
 800b942:	68fb      	ldr	r3, [r7, #12]
 800b944:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b946:	68fb      	ldr	r3, [r7, #12]
 800b948:	699b      	ldr	r3, [r3, #24]
 800b94a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800b94c:	68fb      	ldr	r3, [r7, #12]
 800b94e:	6a1b      	ldr	r3, [r3, #32]
 800b950:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800b952:	68fb      	ldr	r3, [r7, #12]
 800b954:	4a28      	ldr	r2, [pc, #160]	; (800b9f8 <TIM_TI1_SetConfig+0xcc>)
 800b956:	4293      	cmp	r3, r2
 800b958:	d01b      	beq.n	800b992 <TIM_TI1_SetConfig+0x66>
 800b95a:	68fb      	ldr	r3, [r7, #12]
 800b95c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b960:	d017      	beq.n	800b992 <TIM_TI1_SetConfig+0x66>
 800b962:	68fb      	ldr	r3, [r7, #12]
 800b964:	4a25      	ldr	r2, [pc, #148]	; (800b9fc <TIM_TI1_SetConfig+0xd0>)
 800b966:	4293      	cmp	r3, r2
 800b968:	d013      	beq.n	800b992 <TIM_TI1_SetConfig+0x66>
 800b96a:	68fb      	ldr	r3, [r7, #12]
 800b96c:	4a24      	ldr	r2, [pc, #144]	; (800ba00 <TIM_TI1_SetConfig+0xd4>)
 800b96e:	4293      	cmp	r3, r2
 800b970:	d00f      	beq.n	800b992 <TIM_TI1_SetConfig+0x66>
 800b972:	68fb      	ldr	r3, [r7, #12]
 800b974:	4a23      	ldr	r2, [pc, #140]	; (800ba04 <TIM_TI1_SetConfig+0xd8>)
 800b976:	4293      	cmp	r3, r2
 800b978:	d00b      	beq.n	800b992 <TIM_TI1_SetConfig+0x66>
 800b97a:	68fb      	ldr	r3, [r7, #12]
 800b97c:	4a22      	ldr	r2, [pc, #136]	; (800ba08 <TIM_TI1_SetConfig+0xdc>)
 800b97e:	4293      	cmp	r3, r2
 800b980:	d007      	beq.n	800b992 <TIM_TI1_SetConfig+0x66>
 800b982:	68fb      	ldr	r3, [r7, #12]
 800b984:	4a21      	ldr	r2, [pc, #132]	; (800ba0c <TIM_TI1_SetConfig+0xe0>)
 800b986:	4293      	cmp	r3, r2
 800b988:	d003      	beq.n	800b992 <TIM_TI1_SetConfig+0x66>
 800b98a:	68fb      	ldr	r3, [r7, #12]
 800b98c:	4a20      	ldr	r2, [pc, #128]	; (800ba10 <TIM_TI1_SetConfig+0xe4>)
 800b98e:	4293      	cmp	r3, r2
 800b990:	d101      	bne.n	800b996 <TIM_TI1_SetConfig+0x6a>
 800b992:	2301      	movs	r3, #1
 800b994:	e000      	b.n	800b998 <TIM_TI1_SetConfig+0x6c>
 800b996:	2300      	movs	r3, #0
 800b998:	2b00      	cmp	r3, #0
 800b99a:	d008      	beq.n	800b9ae <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800b99c:	697b      	ldr	r3, [r7, #20]
 800b99e:	f023 0303 	bic.w	r3, r3, #3
 800b9a2:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800b9a4:	697a      	ldr	r2, [r7, #20]
 800b9a6:	687b      	ldr	r3, [r7, #4]
 800b9a8:	4313      	orrs	r3, r2
 800b9aa:	617b      	str	r3, [r7, #20]
 800b9ac:	e003      	b.n	800b9b6 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800b9ae:	697b      	ldr	r3, [r7, #20]
 800b9b0:	f043 0301 	orr.w	r3, r3, #1
 800b9b4:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800b9b6:	697b      	ldr	r3, [r7, #20]
 800b9b8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800b9bc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800b9be:	683b      	ldr	r3, [r7, #0]
 800b9c0:	011b      	lsls	r3, r3, #4
 800b9c2:	b2db      	uxtb	r3, r3
 800b9c4:	697a      	ldr	r2, [r7, #20]
 800b9c6:	4313      	orrs	r3, r2
 800b9c8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800b9ca:	693b      	ldr	r3, [r7, #16]
 800b9cc:	f023 030a 	bic.w	r3, r3, #10
 800b9d0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800b9d2:	68bb      	ldr	r3, [r7, #8]
 800b9d4:	f003 030a 	and.w	r3, r3, #10
 800b9d8:	693a      	ldr	r2, [r7, #16]
 800b9da:	4313      	orrs	r3, r2
 800b9dc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800b9de:	68fb      	ldr	r3, [r7, #12]
 800b9e0:	697a      	ldr	r2, [r7, #20]
 800b9e2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b9e4:	68fb      	ldr	r3, [r7, #12]
 800b9e6:	693a      	ldr	r2, [r7, #16]
 800b9e8:	621a      	str	r2, [r3, #32]
}
 800b9ea:	bf00      	nop
 800b9ec:	371c      	adds	r7, #28
 800b9ee:	46bd      	mov	sp, r7
 800b9f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9f4:	4770      	bx	lr
 800b9f6:	bf00      	nop
 800b9f8:	40010000 	.word	0x40010000
 800b9fc:	40000400 	.word	0x40000400
 800ba00:	40000800 	.word	0x40000800
 800ba04:	40000c00 	.word	0x40000c00
 800ba08:	40010400 	.word	0x40010400
 800ba0c:	40001800 	.word	0x40001800
 800ba10:	40014000 	.word	0x40014000

0800ba14 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800ba14:	b480      	push	{r7}
 800ba16:	b087      	sub	sp, #28
 800ba18:	af00      	add	r7, sp, #0
 800ba1a:	60f8      	str	r0, [r7, #12]
 800ba1c:	60b9      	str	r1, [r7, #8]
 800ba1e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800ba20:	68fb      	ldr	r3, [r7, #12]
 800ba22:	6a1b      	ldr	r3, [r3, #32]
 800ba24:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800ba26:	68fb      	ldr	r3, [r7, #12]
 800ba28:	6a1b      	ldr	r3, [r3, #32]
 800ba2a:	f023 0201 	bic.w	r2, r3, #1
 800ba2e:	68fb      	ldr	r3, [r7, #12]
 800ba30:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ba32:	68fb      	ldr	r3, [r7, #12]
 800ba34:	699b      	ldr	r3, [r3, #24]
 800ba36:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800ba38:	693b      	ldr	r3, [r7, #16]
 800ba3a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800ba3e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800ba40:	687b      	ldr	r3, [r7, #4]
 800ba42:	011b      	lsls	r3, r3, #4
 800ba44:	693a      	ldr	r2, [r7, #16]
 800ba46:	4313      	orrs	r3, r2
 800ba48:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800ba4a:	697b      	ldr	r3, [r7, #20]
 800ba4c:	f023 030a 	bic.w	r3, r3, #10
 800ba50:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800ba52:	697a      	ldr	r2, [r7, #20]
 800ba54:	68bb      	ldr	r3, [r7, #8]
 800ba56:	4313      	orrs	r3, r2
 800ba58:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800ba5a:	68fb      	ldr	r3, [r7, #12]
 800ba5c:	693a      	ldr	r2, [r7, #16]
 800ba5e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800ba60:	68fb      	ldr	r3, [r7, #12]
 800ba62:	697a      	ldr	r2, [r7, #20]
 800ba64:	621a      	str	r2, [r3, #32]
}
 800ba66:	bf00      	nop
 800ba68:	371c      	adds	r7, #28
 800ba6a:	46bd      	mov	sp, r7
 800ba6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba70:	4770      	bx	lr

0800ba72 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800ba72:	b480      	push	{r7}
 800ba74:	b087      	sub	sp, #28
 800ba76:	af00      	add	r7, sp, #0
 800ba78:	60f8      	str	r0, [r7, #12]
 800ba7a:	60b9      	str	r1, [r7, #8]
 800ba7c:	607a      	str	r2, [r7, #4]
 800ba7e:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800ba80:	68fb      	ldr	r3, [r7, #12]
 800ba82:	6a1b      	ldr	r3, [r3, #32]
 800ba84:	f023 0210 	bic.w	r2, r3, #16
 800ba88:	68fb      	ldr	r3, [r7, #12]
 800ba8a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ba8c:	68fb      	ldr	r3, [r7, #12]
 800ba8e:	699b      	ldr	r3, [r3, #24]
 800ba90:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800ba92:	68fb      	ldr	r3, [r7, #12]
 800ba94:	6a1b      	ldr	r3, [r3, #32]
 800ba96:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800ba98:	697b      	ldr	r3, [r7, #20]
 800ba9a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ba9e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800baa0:	687b      	ldr	r3, [r7, #4]
 800baa2:	021b      	lsls	r3, r3, #8
 800baa4:	697a      	ldr	r2, [r7, #20]
 800baa6:	4313      	orrs	r3, r2
 800baa8:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800baaa:	697b      	ldr	r3, [r7, #20]
 800baac:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800bab0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800bab2:	683b      	ldr	r3, [r7, #0]
 800bab4:	031b      	lsls	r3, r3, #12
 800bab6:	b29b      	uxth	r3, r3
 800bab8:	697a      	ldr	r2, [r7, #20]
 800baba:	4313      	orrs	r3, r2
 800babc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800babe:	693b      	ldr	r3, [r7, #16]
 800bac0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800bac4:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800bac6:	68bb      	ldr	r3, [r7, #8]
 800bac8:	011b      	lsls	r3, r3, #4
 800baca:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800bace:	693a      	ldr	r2, [r7, #16]
 800bad0:	4313      	orrs	r3, r2
 800bad2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800bad4:	68fb      	ldr	r3, [r7, #12]
 800bad6:	697a      	ldr	r2, [r7, #20]
 800bad8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800bada:	68fb      	ldr	r3, [r7, #12]
 800badc:	693a      	ldr	r2, [r7, #16]
 800bade:	621a      	str	r2, [r3, #32]
}
 800bae0:	bf00      	nop
 800bae2:	371c      	adds	r7, #28
 800bae4:	46bd      	mov	sp, r7
 800bae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baea:	4770      	bx	lr

0800baec <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800baec:	b480      	push	{r7}
 800baee:	b087      	sub	sp, #28
 800baf0:	af00      	add	r7, sp, #0
 800baf2:	60f8      	str	r0, [r7, #12]
 800baf4:	60b9      	str	r1, [r7, #8]
 800baf6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800baf8:	68fb      	ldr	r3, [r7, #12]
 800bafa:	6a1b      	ldr	r3, [r3, #32]
 800bafc:	f023 0210 	bic.w	r2, r3, #16
 800bb00:	68fb      	ldr	r3, [r7, #12]
 800bb02:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800bb04:	68fb      	ldr	r3, [r7, #12]
 800bb06:	699b      	ldr	r3, [r3, #24]
 800bb08:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800bb0a:	68fb      	ldr	r3, [r7, #12]
 800bb0c:	6a1b      	ldr	r3, [r3, #32]
 800bb0e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800bb10:	697b      	ldr	r3, [r7, #20]
 800bb12:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800bb16:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800bb18:	687b      	ldr	r3, [r7, #4]
 800bb1a:	031b      	lsls	r3, r3, #12
 800bb1c:	697a      	ldr	r2, [r7, #20]
 800bb1e:	4313      	orrs	r3, r2
 800bb20:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800bb22:	693b      	ldr	r3, [r7, #16]
 800bb24:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800bb28:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800bb2a:	68bb      	ldr	r3, [r7, #8]
 800bb2c:	011b      	lsls	r3, r3, #4
 800bb2e:	693a      	ldr	r2, [r7, #16]
 800bb30:	4313      	orrs	r3, r2
 800bb32:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800bb34:	68fb      	ldr	r3, [r7, #12]
 800bb36:	697a      	ldr	r2, [r7, #20]
 800bb38:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800bb3a:	68fb      	ldr	r3, [r7, #12]
 800bb3c:	693a      	ldr	r2, [r7, #16]
 800bb3e:	621a      	str	r2, [r3, #32]
}
 800bb40:	bf00      	nop
 800bb42:	371c      	adds	r7, #28
 800bb44:	46bd      	mov	sp, r7
 800bb46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb4a:	4770      	bx	lr

0800bb4c <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800bb4c:	b480      	push	{r7}
 800bb4e:	b087      	sub	sp, #28
 800bb50:	af00      	add	r7, sp, #0
 800bb52:	60f8      	str	r0, [r7, #12]
 800bb54:	60b9      	str	r1, [r7, #8]
 800bb56:	607a      	str	r2, [r7, #4]
 800bb58:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800bb5a:	68fb      	ldr	r3, [r7, #12]
 800bb5c:	6a1b      	ldr	r3, [r3, #32]
 800bb5e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800bb62:	68fb      	ldr	r3, [r7, #12]
 800bb64:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800bb66:	68fb      	ldr	r3, [r7, #12]
 800bb68:	69db      	ldr	r3, [r3, #28]
 800bb6a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800bb6c:	68fb      	ldr	r3, [r7, #12]
 800bb6e:	6a1b      	ldr	r3, [r3, #32]
 800bb70:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800bb72:	697b      	ldr	r3, [r7, #20]
 800bb74:	f023 0303 	bic.w	r3, r3, #3
 800bb78:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 800bb7a:	697a      	ldr	r2, [r7, #20]
 800bb7c:	687b      	ldr	r3, [r7, #4]
 800bb7e:	4313      	orrs	r3, r2
 800bb80:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800bb82:	697b      	ldr	r3, [r7, #20]
 800bb84:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800bb88:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800bb8a:	683b      	ldr	r3, [r7, #0]
 800bb8c:	011b      	lsls	r3, r3, #4
 800bb8e:	b2db      	uxtb	r3, r3
 800bb90:	697a      	ldr	r2, [r7, #20]
 800bb92:	4313      	orrs	r3, r2
 800bb94:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800bb96:	693b      	ldr	r3, [r7, #16]
 800bb98:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 800bb9c:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800bb9e:	68bb      	ldr	r3, [r7, #8]
 800bba0:	021b      	lsls	r3, r3, #8
 800bba2:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 800bba6:	693a      	ldr	r2, [r7, #16]
 800bba8:	4313      	orrs	r3, r2
 800bbaa:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800bbac:	68fb      	ldr	r3, [r7, #12]
 800bbae:	697a      	ldr	r2, [r7, #20]
 800bbb0:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800bbb2:	68fb      	ldr	r3, [r7, #12]
 800bbb4:	693a      	ldr	r2, [r7, #16]
 800bbb6:	621a      	str	r2, [r3, #32]
}
 800bbb8:	bf00      	nop
 800bbba:	371c      	adds	r7, #28
 800bbbc:	46bd      	mov	sp, r7
 800bbbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbc2:	4770      	bx	lr

0800bbc4 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800bbc4:	b480      	push	{r7}
 800bbc6:	b087      	sub	sp, #28
 800bbc8:	af00      	add	r7, sp, #0
 800bbca:	60f8      	str	r0, [r7, #12]
 800bbcc:	60b9      	str	r1, [r7, #8]
 800bbce:	607a      	str	r2, [r7, #4]
 800bbd0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800bbd2:	68fb      	ldr	r3, [r7, #12]
 800bbd4:	6a1b      	ldr	r3, [r3, #32]
 800bbd6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800bbda:	68fb      	ldr	r3, [r7, #12]
 800bbdc:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800bbde:	68fb      	ldr	r3, [r7, #12]
 800bbe0:	69db      	ldr	r3, [r3, #28]
 800bbe2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800bbe4:	68fb      	ldr	r3, [r7, #12]
 800bbe6:	6a1b      	ldr	r3, [r3, #32]
 800bbe8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800bbea:	697b      	ldr	r3, [r7, #20]
 800bbec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800bbf0:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800bbf2:	687b      	ldr	r3, [r7, #4]
 800bbf4:	021b      	lsls	r3, r3, #8
 800bbf6:	697a      	ldr	r2, [r7, #20]
 800bbf8:	4313      	orrs	r3, r2
 800bbfa:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800bbfc:	697b      	ldr	r3, [r7, #20]
 800bbfe:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800bc02:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800bc04:	683b      	ldr	r3, [r7, #0]
 800bc06:	031b      	lsls	r3, r3, #12
 800bc08:	b29b      	uxth	r3, r3
 800bc0a:	697a      	ldr	r2, [r7, #20]
 800bc0c:	4313      	orrs	r3, r2
 800bc0e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800bc10:	693b      	ldr	r3, [r7, #16]
 800bc12:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 800bc16:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800bc18:	68bb      	ldr	r3, [r7, #8]
 800bc1a:	031b      	lsls	r3, r3, #12
 800bc1c:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 800bc20:	693a      	ldr	r2, [r7, #16]
 800bc22:	4313      	orrs	r3, r2
 800bc24:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800bc26:	68fb      	ldr	r3, [r7, #12]
 800bc28:	697a      	ldr	r2, [r7, #20]
 800bc2a:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800bc2c:	68fb      	ldr	r3, [r7, #12]
 800bc2e:	693a      	ldr	r2, [r7, #16]
 800bc30:	621a      	str	r2, [r3, #32]
}
 800bc32:	bf00      	nop
 800bc34:	371c      	adds	r7, #28
 800bc36:	46bd      	mov	sp, r7
 800bc38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc3c:	4770      	bx	lr
	...

0800bc40 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800bc40:	b480      	push	{r7}
 800bc42:	b085      	sub	sp, #20
 800bc44:	af00      	add	r7, sp, #0
 800bc46:	6078      	str	r0, [r7, #4]
 800bc48:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800bc4a:	687b      	ldr	r3, [r7, #4]
 800bc4c:	689b      	ldr	r3, [r3, #8]
 800bc4e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800bc50:	68fa      	ldr	r2, [r7, #12]
 800bc52:	4b09      	ldr	r3, [pc, #36]	; (800bc78 <TIM_ITRx_SetConfig+0x38>)
 800bc54:	4013      	ands	r3, r2
 800bc56:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800bc58:	683a      	ldr	r2, [r7, #0]
 800bc5a:	68fb      	ldr	r3, [r7, #12]
 800bc5c:	4313      	orrs	r3, r2
 800bc5e:	f043 0307 	orr.w	r3, r3, #7
 800bc62:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800bc64:	687b      	ldr	r3, [r7, #4]
 800bc66:	68fa      	ldr	r2, [r7, #12]
 800bc68:	609a      	str	r2, [r3, #8]
}
 800bc6a:	bf00      	nop
 800bc6c:	3714      	adds	r7, #20
 800bc6e:	46bd      	mov	sp, r7
 800bc70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc74:	4770      	bx	lr
 800bc76:	bf00      	nop
 800bc78:	ffcfff8f 	.word	0xffcfff8f

0800bc7c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800bc7c:	b480      	push	{r7}
 800bc7e:	b087      	sub	sp, #28
 800bc80:	af00      	add	r7, sp, #0
 800bc82:	60f8      	str	r0, [r7, #12]
 800bc84:	60b9      	str	r1, [r7, #8]
 800bc86:	607a      	str	r2, [r7, #4]
 800bc88:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800bc8a:	68fb      	ldr	r3, [r7, #12]
 800bc8c:	689b      	ldr	r3, [r3, #8]
 800bc8e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800bc90:	697b      	ldr	r3, [r7, #20]
 800bc92:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800bc96:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800bc98:	683b      	ldr	r3, [r7, #0]
 800bc9a:	021a      	lsls	r2, r3, #8
 800bc9c:	687b      	ldr	r3, [r7, #4]
 800bc9e:	431a      	orrs	r2, r3
 800bca0:	68bb      	ldr	r3, [r7, #8]
 800bca2:	4313      	orrs	r3, r2
 800bca4:	697a      	ldr	r2, [r7, #20]
 800bca6:	4313      	orrs	r3, r2
 800bca8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800bcaa:	68fb      	ldr	r3, [r7, #12]
 800bcac:	697a      	ldr	r2, [r7, #20]
 800bcae:	609a      	str	r2, [r3, #8]
}
 800bcb0:	bf00      	nop
 800bcb2:	371c      	adds	r7, #28
 800bcb4:	46bd      	mov	sp, r7
 800bcb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcba:	4770      	bx	lr

0800bcbc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800bcbc:	b480      	push	{r7}
 800bcbe:	b087      	sub	sp, #28
 800bcc0:	af00      	add	r7, sp, #0
 800bcc2:	60f8      	str	r0, [r7, #12]
 800bcc4:	60b9      	str	r1, [r7, #8]
 800bcc6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800bcc8:	68bb      	ldr	r3, [r7, #8]
 800bcca:	f003 031f 	and.w	r3, r3, #31
 800bcce:	2201      	movs	r2, #1
 800bcd0:	fa02 f303 	lsl.w	r3, r2, r3
 800bcd4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800bcd6:	68fb      	ldr	r3, [r7, #12]
 800bcd8:	6a1a      	ldr	r2, [r3, #32]
 800bcda:	697b      	ldr	r3, [r7, #20]
 800bcdc:	43db      	mvns	r3, r3
 800bcde:	401a      	ands	r2, r3
 800bce0:	68fb      	ldr	r3, [r7, #12]
 800bce2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800bce4:	68fb      	ldr	r3, [r7, #12]
 800bce6:	6a1a      	ldr	r2, [r3, #32]
 800bce8:	68bb      	ldr	r3, [r7, #8]
 800bcea:	f003 031f 	and.w	r3, r3, #31
 800bcee:	6879      	ldr	r1, [r7, #4]
 800bcf0:	fa01 f303 	lsl.w	r3, r1, r3
 800bcf4:	431a      	orrs	r2, r3
 800bcf6:	68fb      	ldr	r3, [r7, #12]
 800bcf8:	621a      	str	r2, [r3, #32]
}
 800bcfa:	bf00      	nop
 800bcfc:	371c      	adds	r7, #28
 800bcfe:	46bd      	mov	sp, r7
 800bd00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd04:	4770      	bx	lr
	...

0800bd08 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800bd08:	b480      	push	{r7}
 800bd0a:	b085      	sub	sp, #20
 800bd0c:	af00      	add	r7, sp, #0
 800bd0e:	6078      	str	r0, [r7, #4]
 800bd10:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800bd12:	687b      	ldr	r3, [r7, #4]
 800bd14:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800bd18:	2b01      	cmp	r3, #1
 800bd1a:	d101      	bne.n	800bd20 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800bd1c:	2302      	movs	r3, #2
 800bd1e:	e06d      	b.n	800bdfc <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800bd20:	687b      	ldr	r3, [r7, #4]
 800bd22:	2201      	movs	r2, #1
 800bd24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bd28:	687b      	ldr	r3, [r7, #4]
 800bd2a:	2202      	movs	r2, #2
 800bd2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800bd30:	687b      	ldr	r3, [r7, #4]
 800bd32:	681b      	ldr	r3, [r3, #0]
 800bd34:	685b      	ldr	r3, [r3, #4]
 800bd36:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800bd38:	687b      	ldr	r3, [r7, #4]
 800bd3a:	681b      	ldr	r3, [r3, #0]
 800bd3c:	689b      	ldr	r3, [r3, #8]
 800bd3e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800bd40:	687b      	ldr	r3, [r7, #4]
 800bd42:	681b      	ldr	r3, [r3, #0]
 800bd44:	4a30      	ldr	r2, [pc, #192]	; (800be08 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800bd46:	4293      	cmp	r3, r2
 800bd48:	d004      	beq.n	800bd54 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800bd4a:	687b      	ldr	r3, [r7, #4]
 800bd4c:	681b      	ldr	r3, [r3, #0]
 800bd4e:	4a2f      	ldr	r2, [pc, #188]	; (800be0c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800bd50:	4293      	cmp	r3, r2
 800bd52:	d108      	bne.n	800bd66 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800bd54:	68fb      	ldr	r3, [r7, #12]
 800bd56:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800bd5a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800bd5c:	683b      	ldr	r3, [r7, #0]
 800bd5e:	685b      	ldr	r3, [r3, #4]
 800bd60:	68fa      	ldr	r2, [r7, #12]
 800bd62:	4313      	orrs	r3, r2
 800bd64:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800bd66:	68fb      	ldr	r3, [r7, #12]
 800bd68:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bd6c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800bd6e:	683b      	ldr	r3, [r7, #0]
 800bd70:	681b      	ldr	r3, [r3, #0]
 800bd72:	68fa      	ldr	r2, [r7, #12]
 800bd74:	4313      	orrs	r3, r2
 800bd76:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800bd78:	687b      	ldr	r3, [r7, #4]
 800bd7a:	681b      	ldr	r3, [r3, #0]
 800bd7c:	68fa      	ldr	r2, [r7, #12]
 800bd7e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800bd80:	687b      	ldr	r3, [r7, #4]
 800bd82:	681b      	ldr	r3, [r3, #0]
 800bd84:	4a20      	ldr	r2, [pc, #128]	; (800be08 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800bd86:	4293      	cmp	r3, r2
 800bd88:	d022      	beq.n	800bdd0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800bd8a:	687b      	ldr	r3, [r7, #4]
 800bd8c:	681b      	ldr	r3, [r3, #0]
 800bd8e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bd92:	d01d      	beq.n	800bdd0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800bd94:	687b      	ldr	r3, [r7, #4]
 800bd96:	681b      	ldr	r3, [r3, #0]
 800bd98:	4a1d      	ldr	r2, [pc, #116]	; (800be10 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800bd9a:	4293      	cmp	r3, r2
 800bd9c:	d018      	beq.n	800bdd0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800bd9e:	687b      	ldr	r3, [r7, #4]
 800bda0:	681b      	ldr	r3, [r3, #0]
 800bda2:	4a1c      	ldr	r2, [pc, #112]	; (800be14 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800bda4:	4293      	cmp	r3, r2
 800bda6:	d013      	beq.n	800bdd0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800bda8:	687b      	ldr	r3, [r7, #4]
 800bdaa:	681b      	ldr	r3, [r3, #0]
 800bdac:	4a1a      	ldr	r2, [pc, #104]	; (800be18 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800bdae:	4293      	cmp	r3, r2
 800bdb0:	d00e      	beq.n	800bdd0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800bdb2:	687b      	ldr	r3, [r7, #4]
 800bdb4:	681b      	ldr	r3, [r3, #0]
 800bdb6:	4a15      	ldr	r2, [pc, #84]	; (800be0c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800bdb8:	4293      	cmp	r3, r2
 800bdba:	d009      	beq.n	800bdd0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800bdbc:	687b      	ldr	r3, [r7, #4]
 800bdbe:	681b      	ldr	r3, [r3, #0]
 800bdc0:	4a16      	ldr	r2, [pc, #88]	; (800be1c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800bdc2:	4293      	cmp	r3, r2
 800bdc4:	d004      	beq.n	800bdd0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800bdc6:	687b      	ldr	r3, [r7, #4]
 800bdc8:	681b      	ldr	r3, [r3, #0]
 800bdca:	4a15      	ldr	r2, [pc, #84]	; (800be20 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800bdcc:	4293      	cmp	r3, r2
 800bdce:	d10c      	bne.n	800bdea <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800bdd0:	68bb      	ldr	r3, [r7, #8]
 800bdd2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800bdd6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800bdd8:	683b      	ldr	r3, [r7, #0]
 800bdda:	689b      	ldr	r3, [r3, #8]
 800bddc:	68ba      	ldr	r2, [r7, #8]
 800bdde:	4313      	orrs	r3, r2
 800bde0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800bde2:	687b      	ldr	r3, [r7, #4]
 800bde4:	681b      	ldr	r3, [r3, #0]
 800bde6:	68ba      	ldr	r2, [r7, #8]
 800bde8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800bdea:	687b      	ldr	r3, [r7, #4]
 800bdec:	2201      	movs	r2, #1
 800bdee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800bdf2:	687b      	ldr	r3, [r7, #4]
 800bdf4:	2200      	movs	r2, #0
 800bdf6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800bdfa:	2300      	movs	r3, #0
}
 800bdfc:	4618      	mov	r0, r3
 800bdfe:	3714      	adds	r7, #20
 800be00:	46bd      	mov	sp, r7
 800be02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be06:	4770      	bx	lr
 800be08:	40010000 	.word	0x40010000
 800be0c:	40010400 	.word	0x40010400
 800be10:	40000400 	.word	0x40000400
 800be14:	40000800 	.word	0x40000800
 800be18:	40000c00 	.word	0x40000c00
 800be1c:	40001800 	.word	0x40001800
 800be20:	40014000 	.word	0x40014000

0800be24 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800be24:	b480      	push	{r7}
 800be26:	b083      	sub	sp, #12
 800be28:	af00      	add	r7, sp, #0
 800be2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800be2c:	bf00      	nop
 800be2e:	370c      	adds	r7, #12
 800be30:	46bd      	mov	sp, r7
 800be32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be36:	4770      	bx	lr

0800be38 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800be38:	b480      	push	{r7}
 800be3a:	b083      	sub	sp, #12
 800be3c:	af00      	add	r7, sp, #0
 800be3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800be40:	bf00      	nop
 800be42:	370c      	adds	r7, #12
 800be44:	46bd      	mov	sp, r7
 800be46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be4a:	4770      	bx	lr

0800be4c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800be4c:	b480      	push	{r7}
 800be4e:	b083      	sub	sp, #12
 800be50:	af00      	add	r7, sp, #0
 800be52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800be54:	bf00      	nop
 800be56:	370c      	adds	r7, #12
 800be58:	46bd      	mov	sp, r7
 800be5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be5e:	4770      	bx	lr

0800be60 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800be60:	b580      	push	{r7, lr}
 800be62:	b082      	sub	sp, #8
 800be64:	af00      	add	r7, sp, #0
 800be66:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800be68:	687b      	ldr	r3, [r7, #4]
 800be6a:	2b00      	cmp	r3, #0
 800be6c:	d101      	bne.n	800be72 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800be6e:	2301      	movs	r3, #1
 800be70:	e042      	b.n	800bef8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800be72:	687b      	ldr	r3, [r7, #4]
 800be74:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800be78:	2b00      	cmp	r3, #0
 800be7a:	d106      	bne.n	800be8a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800be7c:	687b      	ldr	r3, [r7, #4]
 800be7e:	2200      	movs	r2, #0
 800be80:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800be84:	6878      	ldr	r0, [r7, #4]
 800be86:	f7fa fa27 	bl	80062d8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800be8a:	687b      	ldr	r3, [r7, #4]
 800be8c:	2224      	movs	r2, #36	; 0x24
 800be8e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800be92:	687b      	ldr	r3, [r7, #4]
 800be94:	681b      	ldr	r3, [r3, #0]
 800be96:	681a      	ldr	r2, [r3, #0]
 800be98:	687b      	ldr	r3, [r7, #4]
 800be9a:	681b      	ldr	r3, [r3, #0]
 800be9c:	f022 0201 	bic.w	r2, r2, #1
 800bea0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800bea2:	6878      	ldr	r0, [r7, #4]
 800bea4:	f000 fccc 	bl	800c840 <UART_SetConfig>
 800bea8:	4603      	mov	r3, r0
 800beaa:	2b01      	cmp	r3, #1
 800beac:	d101      	bne.n	800beb2 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800beae:	2301      	movs	r3, #1
 800beb0:	e022      	b.n	800bef8 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800beb2:	687b      	ldr	r3, [r7, #4]
 800beb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800beb6:	2b00      	cmp	r3, #0
 800beb8:	d002      	beq.n	800bec0 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800beba:	6878      	ldr	r0, [r7, #4]
 800bebc:	f001 fa28 	bl	800d310 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800bec0:	687b      	ldr	r3, [r7, #4]
 800bec2:	681b      	ldr	r3, [r3, #0]
 800bec4:	685a      	ldr	r2, [r3, #4]
 800bec6:	687b      	ldr	r3, [r7, #4]
 800bec8:	681b      	ldr	r3, [r3, #0]
 800beca:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800bece:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800bed0:	687b      	ldr	r3, [r7, #4]
 800bed2:	681b      	ldr	r3, [r3, #0]
 800bed4:	689a      	ldr	r2, [r3, #8]
 800bed6:	687b      	ldr	r3, [r7, #4]
 800bed8:	681b      	ldr	r3, [r3, #0]
 800beda:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800bede:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800bee0:	687b      	ldr	r3, [r7, #4]
 800bee2:	681b      	ldr	r3, [r3, #0]
 800bee4:	681a      	ldr	r2, [r3, #0]
 800bee6:	687b      	ldr	r3, [r7, #4]
 800bee8:	681b      	ldr	r3, [r3, #0]
 800beea:	f042 0201 	orr.w	r2, r2, #1
 800beee:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800bef0:	6878      	ldr	r0, [r7, #4]
 800bef2:	f001 faaf 	bl	800d454 <UART_CheckIdleState>
 800bef6:	4603      	mov	r3, r0
}
 800bef8:	4618      	mov	r0, r3
 800befa:	3708      	adds	r7, #8
 800befc:	46bd      	mov	sp, r7
 800befe:	bd80      	pop	{r7, pc}

0800bf00 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800bf00:	b580      	push	{r7, lr}
 800bf02:	b08a      	sub	sp, #40	; 0x28
 800bf04:	af02      	add	r7, sp, #8
 800bf06:	60f8      	str	r0, [r7, #12]
 800bf08:	60b9      	str	r1, [r7, #8]
 800bf0a:	603b      	str	r3, [r7, #0]
 800bf0c:	4613      	mov	r3, r2
 800bf0e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800bf10:	68fb      	ldr	r3, [r7, #12]
 800bf12:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bf16:	2b20      	cmp	r3, #32
 800bf18:	f040 8083 	bne.w	800c022 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 800bf1c:	68bb      	ldr	r3, [r7, #8]
 800bf1e:	2b00      	cmp	r3, #0
 800bf20:	d002      	beq.n	800bf28 <HAL_UART_Transmit+0x28>
 800bf22:	88fb      	ldrh	r3, [r7, #6]
 800bf24:	2b00      	cmp	r3, #0
 800bf26:	d101      	bne.n	800bf2c <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800bf28:	2301      	movs	r3, #1
 800bf2a:	e07b      	b.n	800c024 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 800bf2c:	68fb      	ldr	r3, [r7, #12]
 800bf2e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800bf32:	2b01      	cmp	r3, #1
 800bf34:	d101      	bne.n	800bf3a <HAL_UART_Transmit+0x3a>
 800bf36:	2302      	movs	r3, #2
 800bf38:	e074      	b.n	800c024 <HAL_UART_Transmit+0x124>
 800bf3a:	68fb      	ldr	r3, [r7, #12]
 800bf3c:	2201      	movs	r2, #1
 800bf3e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bf42:	68fb      	ldr	r3, [r7, #12]
 800bf44:	2200      	movs	r2, #0
 800bf46:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800bf4a:	68fb      	ldr	r3, [r7, #12]
 800bf4c:	2221      	movs	r2, #33	; 0x21
 800bf4e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800bf52:	f7fa fb9d 	bl	8006690 <HAL_GetTick>
 800bf56:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800bf58:	68fb      	ldr	r3, [r7, #12]
 800bf5a:	88fa      	ldrh	r2, [r7, #6]
 800bf5c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800bf60:	68fb      	ldr	r3, [r7, #12]
 800bf62:	88fa      	ldrh	r2, [r7, #6]
 800bf64:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800bf68:	68fb      	ldr	r3, [r7, #12]
 800bf6a:	689b      	ldr	r3, [r3, #8]
 800bf6c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bf70:	d108      	bne.n	800bf84 <HAL_UART_Transmit+0x84>
 800bf72:	68fb      	ldr	r3, [r7, #12]
 800bf74:	691b      	ldr	r3, [r3, #16]
 800bf76:	2b00      	cmp	r3, #0
 800bf78:	d104      	bne.n	800bf84 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 800bf7a:	2300      	movs	r3, #0
 800bf7c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800bf7e:	68bb      	ldr	r3, [r7, #8]
 800bf80:	61bb      	str	r3, [r7, #24]
 800bf82:	e003      	b.n	800bf8c <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 800bf84:	68bb      	ldr	r3, [r7, #8]
 800bf86:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800bf88:	2300      	movs	r3, #0
 800bf8a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800bf8c:	68fb      	ldr	r3, [r7, #12]
 800bf8e:	2200      	movs	r2, #0
 800bf90:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 800bf94:	e02c      	b.n	800bff0 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800bf96:	683b      	ldr	r3, [r7, #0]
 800bf98:	9300      	str	r3, [sp, #0]
 800bf9a:	697b      	ldr	r3, [r7, #20]
 800bf9c:	2200      	movs	r2, #0
 800bf9e:	2180      	movs	r1, #128	; 0x80
 800bfa0:	68f8      	ldr	r0, [r7, #12]
 800bfa2:	f001 faa2 	bl	800d4ea <UART_WaitOnFlagUntilTimeout>
 800bfa6:	4603      	mov	r3, r0
 800bfa8:	2b00      	cmp	r3, #0
 800bfaa:	d001      	beq.n	800bfb0 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 800bfac:	2303      	movs	r3, #3
 800bfae:	e039      	b.n	800c024 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 800bfb0:	69fb      	ldr	r3, [r7, #28]
 800bfb2:	2b00      	cmp	r3, #0
 800bfb4:	d10b      	bne.n	800bfce <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800bfb6:	69bb      	ldr	r3, [r7, #24]
 800bfb8:	881b      	ldrh	r3, [r3, #0]
 800bfba:	461a      	mov	r2, r3
 800bfbc:	68fb      	ldr	r3, [r7, #12]
 800bfbe:	681b      	ldr	r3, [r3, #0]
 800bfc0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800bfc4:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800bfc6:	69bb      	ldr	r3, [r7, #24]
 800bfc8:	3302      	adds	r3, #2
 800bfca:	61bb      	str	r3, [r7, #24]
 800bfcc:	e007      	b.n	800bfde <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800bfce:	69fb      	ldr	r3, [r7, #28]
 800bfd0:	781a      	ldrb	r2, [r3, #0]
 800bfd2:	68fb      	ldr	r3, [r7, #12]
 800bfd4:	681b      	ldr	r3, [r3, #0]
 800bfd6:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800bfd8:	69fb      	ldr	r3, [r7, #28]
 800bfda:	3301      	adds	r3, #1
 800bfdc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800bfde:	68fb      	ldr	r3, [r7, #12]
 800bfe0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800bfe4:	b29b      	uxth	r3, r3
 800bfe6:	3b01      	subs	r3, #1
 800bfe8:	b29a      	uxth	r2, r3
 800bfea:	68fb      	ldr	r3, [r7, #12]
 800bfec:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800bff0:	68fb      	ldr	r3, [r7, #12]
 800bff2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800bff6:	b29b      	uxth	r3, r3
 800bff8:	2b00      	cmp	r3, #0
 800bffa:	d1cc      	bne.n	800bf96 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800bffc:	683b      	ldr	r3, [r7, #0]
 800bffe:	9300      	str	r3, [sp, #0]
 800c000:	697b      	ldr	r3, [r7, #20]
 800c002:	2200      	movs	r2, #0
 800c004:	2140      	movs	r1, #64	; 0x40
 800c006:	68f8      	ldr	r0, [r7, #12]
 800c008:	f001 fa6f 	bl	800d4ea <UART_WaitOnFlagUntilTimeout>
 800c00c:	4603      	mov	r3, r0
 800c00e:	2b00      	cmp	r3, #0
 800c010:	d001      	beq.n	800c016 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 800c012:	2303      	movs	r3, #3
 800c014:	e006      	b.n	800c024 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800c016:	68fb      	ldr	r3, [r7, #12]
 800c018:	2220      	movs	r2, #32
 800c01a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 800c01e:	2300      	movs	r3, #0
 800c020:	e000      	b.n	800c024 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 800c022:	2302      	movs	r3, #2
  }
}
 800c024:	4618      	mov	r0, r3
 800c026:	3720      	adds	r7, #32
 800c028:	46bd      	mov	sp, r7
 800c02a:	bd80      	pop	{r7, pc}

0800c02c <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800c02c:	b580      	push	{r7, lr}
 800c02e:	b08a      	sub	sp, #40	; 0x28
 800c030:	af00      	add	r7, sp, #0
 800c032:	60f8      	str	r0, [r7, #12]
 800c034:	60b9      	str	r1, [r7, #8]
 800c036:	4613      	mov	r3, r2
 800c038:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800c03a:	68fb      	ldr	r3, [r7, #12]
 800c03c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c040:	2b20      	cmp	r3, #32
 800c042:	d142      	bne.n	800c0ca <HAL_UART_Receive_IT+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 800c044:	68bb      	ldr	r3, [r7, #8]
 800c046:	2b00      	cmp	r3, #0
 800c048:	d002      	beq.n	800c050 <HAL_UART_Receive_IT+0x24>
 800c04a:	88fb      	ldrh	r3, [r7, #6]
 800c04c:	2b00      	cmp	r3, #0
 800c04e:	d101      	bne.n	800c054 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800c050:	2301      	movs	r3, #1
 800c052:	e03b      	b.n	800c0cc <HAL_UART_Receive_IT+0xa0>
    }

    __HAL_LOCK(huart);
 800c054:	68fb      	ldr	r3, [r7, #12]
 800c056:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800c05a:	2b01      	cmp	r3, #1
 800c05c:	d101      	bne.n	800c062 <HAL_UART_Receive_IT+0x36>
 800c05e:	2302      	movs	r3, #2
 800c060:	e034      	b.n	800c0cc <HAL_UART_Receive_IT+0xa0>
 800c062:	68fb      	ldr	r3, [r7, #12]
 800c064:	2201      	movs	r2, #1
 800c066:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c06a:	68fb      	ldr	r3, [r7, #12]
 800c06c:	2200      	movs	r2, #0
 800c06e:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800c070:	68fb      	ldr	r3, [r7, #12]
 800c072:	681b      	ldr	r3, [r3, #0]
 800c074:	4a17      	ldr	r2, [pc, #92]	; (800c0d4 <HAL_UART_Receive_IT+0xa8>)
 800c076:	4293      	cmp	r3, r2
 800c078:	d01f      	beq.n	800c0ba <HAL_UART_Receive_IT+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800c07a:	68fb      	ldr	r3, [r7, #12]
 800c07c:	681b      	ldr	r3, [r3, #0]
 800c07e:	685b      	ldr	r3, [r3, #4]
 800c080:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c084:	2b00      	cmp	r3, #0
 800c086:	d018      	beq.n	800c0ba <HAL_UART_Receive_IT+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800c088:	68fb      	ldr	r3, [r7, #12]
 800c08a:	681b      	ldr	r3, [r3, #0]
 800c08c:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c08e:	697b      	ldr	r3, [r7, #20]
 800c090:	e853 3f00 	ldrex	r3, [r3]
 800c094:	613b      	str	r3, [r7, #16]
   return(result);
 800c096:	693b      	ldr	r3, [r7, #16]
 800c098:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800c09c:	627b      	str	r3, [r7, #36]	; 0x24
 800c09e:	68fb      	ldr	r3, [r7, #12]
 800c0a0:	681b      	ldr	r3, [r3, #0]
 800c0a2:	461a      	mov	r2, r3
 800c0a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c0a6:	623b      	str	r3, [r7, #32]
 800c0a8:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c0aa:	69f9      	ldr	r1, [r7, #28]
 800c0ac:	6a3a      	ldr	r2, [r7, #32]
 800c0ae:	e841 2300 	strex	r3, r2, [r1]
 800c0b2:	61bb      	str	r3, [r7, #24]
   return(result);
 800c0b4:	69bb      	ldr	r3, [r7, #24]
 800c0b6:	2b00      	cmp	r3, #0
 800c0b8:	d1e6      	bne.n	800c088 <HAL_UART_Receive_IT+0x5c>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800c0ba:	88fb      	ldrh	r3, [r7, #6]
 800c0bc:	461a      	mov	r2, r3
 800c0be:	68b9      	ldr	r1, [r7, #8]
 800c0c0:	68f8      	ldr	r0, [r7, #12]
 800c0c2:	f001 fadb 	bl	800d67c <UART_Start_Receive_IT>
 800c0c6:	4603      	mov	r3, r0
 800c0c8:	e000      	b.n	800c0cc <HAL_UART_Receive_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800c0ca:	2302      	movs	r3, #2
  }
}
 800c0cc:	4618      	mov	r0, r3
 800c0ce:	3728      	adds	r7, #40	; 0x28
 800c0d0:	46bd      	mov	sp, r7
 800c0d2:	bd80      	pop	{r7, pc}
 800c0d4:	58000c00 	.word	0x58000c00

0800c0d8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800c0d8:	b580      	push	{r7, lr}
 800c0da:	b0ba      	sub	sp, #232	; 0xe8
 800c0dc:	af00      	add	r7, sp, #0
 800c0de:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800c0e0:	687b      	ldr	r3, [r7, #4]
 800c0e2:	681b      	ldr	r3, [r3, #0]
 800c0e4:	69db      	ldr	r3, [r3, #28]
 800c0e6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800c0ea:	687b      	ldr	r3, [r7, #4]
 800c0ec:	681b      	ldr	r3, [r3, #0]
 800c0ee:	681b      	ldr	r3, [r3, #0]
 800c0f0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800c0f4:	687b      	ldr	r3, [r7, #4]
 800c0f6:	681b      	ldr	r3, [r3, #0]
 800c0f8:	689b      	ldr	r3, [r3, #8]
 800c0fa:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800c0fe:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800c102:	f640 030f 	movw	r3, #2063	; 0x80f
 800c106:	4013      	ands	r3, r2
 800c108:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800c10c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800c110:	2b00      	cmp	r3, #0
 800c112:	d11b      	bne.n	800c14c <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800c114:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c118:	f003 0320 	and.w	r3, r3, #32
 800c11c:	2b00      	cmp	r3, #0
 800c11e:	d015      	beq.n	800c14c <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800c120:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c124:	f003 0320 	and.w	r3, r3, #32
 800c128:	2b00      	cmp	r3, #0
 800c12a:	d105      	bne.n	800c138 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800c12c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c130:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c134:	2b00      	cmp	r3, #0
 800c136:	d009      	beq.n	800c14c <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800c138:	687b      	ldr	r3, [r7, #4]
 800c13a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c13c:	2b00      	cmp	r3, #0
 800c13e:	f000 835a 	beq.w	800c7f6 <HAL_UART_IRQHandler+0x71e>
      {
        huart->RxISR(huart);
 800c142:	687b      	ldr	r3, [r7, #4]
 800c144:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c146:	6878      	ldr	r0, [r7, #4]
 800c148:	4798      	blx	r3
      }
      return;
 800c14a:	e354      	b.n	800c7f6 <HAL_UART_IRQHandler+0x71e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800c14c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800c150:	2b00      	cmp	r3, #0
 800c152:	f000 811f 	beq.w	800c394 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800c156:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800c15a:	4b8b      	ldr	r3, [pc, #556]	; (800c388 <HAL_UART_IRQHandler+0x2b0>)
 800c15c:	4013      	ands	r3, r2
 800c15e:	2b00      	cmp	r3, #0
 800c160:	d106      	bne.n	800c170 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800c162:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800c166:	4b89      	ldr	r3, [pc, #548]	; (800c38c <HAL_UART_IRQHandler+0x2b4>)
 800c168:	4013      	ands	r3, r2
 800c16a:	2b00      	cmp	r3, #0
 800c16c:	f000 8112 	beq.w	800c394 <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800c170:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c174:	f003 0301 	and.w	r3, r3, #1
 800c178:	2b00      	cmp	r3, #0
 800c17a:	d011      	beq.n	800c1a0 <HAL_UART_IRQHandler+0xc8>
 800c17c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c180:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c184:	2b00      	cmp	r3, #0
 800c186:	d00b      	beq.n	800c1a0 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800c188:	687b      	ldr	r3, [r7, #4]
 800c18a:	681b      	ldr	r3, [r3, #0]
 800c18c:	2201      	movs	r2, #1
 800c18e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800c190:	687b      	ldr	r3, [r7, #4]
 800c192:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c196:	f043 0201 	orr.w	r2, r3, #1
 800c19a:	687b      	ldr	r3, [r7, #4]
 800c19c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c1a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c1a4:	f003 0302 	and.w	r3, r3, #2
 800c1a8:	2b00      	cmp	r3, #0
 800c1aa:	d011      	beq.n	800c1d0 <HAL_UART_IRQHandler+0xf8>
 800c1ac:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c1b0:	f003 0301 	and.w	r3, r3, #1
 800c1b4:	2b00      	cmp	r3, #0
 800c1b6:	d00b      	beq.n	800c1d0 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800c1b8:	687b      	ldr	r3, [r7, #4]
 800c1ba:	681b      	ldr	r3, [r3, #0]
 800c1bc:	2202      	movs	r2, #2
 800c1be:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800c1c0:	687b      	ldr	r3, [r7, #4]
 800c1c2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c1c6:	f043 0204 	orr.w	r2, r3, #4
 800c1ca:	687b      	ldr	r3, [r7, #4]
 800c1cc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c1d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c1d4:	f003 0304 	and.w	r3, r3, #4
 800c1d8:	2b00      	cmp	r3, #0
 800c1da:	d011      	beq.n	800c200 <HAL_UART_IRQHandler+0x128>
 800c1dc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c1e0:	f003 0301 	and.w	r3, r3, #1
 800c1e4:	2b00      	cmp	r3, #0
 800c1e6:	d00b      	beq.n	800c200 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800c1e8:	687b      	ldr	r3, [r7, #4]
 800c1ea:	681b      	ldr	r3, [r3, #0]
 800c1ec:	2204      	movs	r2, #4
 800c1ee:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800c1f0:	687b      	ldr	r3, [r7, #4]
 800c1f2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c1f6:	f043 0202 	orr.w	r2, r3, #2
 800c1fa:	687b      	ldr	r3, [r7, #4]
 800c1fc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800c200:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c204:	f003 0308 	and.w	r3, r3, #8
 800c208:	2b00      	cmp	r3, #0
 800c20a:	d017      	beq.n	800c23c <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800c20c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c210:	f003 0320 	and.w	r3, r3, #32
 800c214:	2b00      	cmp	r3, #0
 800c216:	d105      	bne.n	800c224 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800c218:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800c21c:	4b5a      	ldr	r3, [pc, #360]	; (800c388 <HAL_UART_IRQHandler+0x2b0>)
 800c21e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800c220:	2b00      	cmp	r3, #0
 800c222:	d00b      	beq.n	800c23c <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800c224:	687b      	ldr	r3, [r7, #4]
 800c226:	681b      	ldr	r3, [r3, #0]
 800c228:	2208      	movs	r2, #8
 800c22a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800c22c:	687b      	ldr	r3, [r7, #4]
 800c22e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c232:	f043 0208 	orr.w	r2, r3, #8
 800c236:	687b      	ldr	r3, [r7, #4]
 800c238:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800c23c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c240:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800c244:	2b00      	cmp	r3, #0
 800c246:	d012      	beq.n	800c26e <HAL_UART_IRQHandler+0x196>
 800c248:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c24c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800c250:	2b00      	cmp	r3, #0
 800c252:	d00c      	beq.n	800c26e <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800c254:	687b      	ldr	r3, [r7, #4]
 800c256:	681b      	ldr	r3, [r3, #0]
 800c258:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800c25c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800c25e:	687b      	ldr	r3, [r7, #4]
 800c260:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c264:	f043 0220 	orr.w	r2, r3, #32
 800c268:	687b      	ldr	r3, [r7, #4]
 800c26a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800c26e:	687b      	ldr	r3, [r7, #4]
 800c270:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c274:	2b00      	cmp	r3, #0
 800c276:	f000 82c0 	beq.w	800c7fa <HAL_UART_IRQHandler+0x722>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800c27a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c27e:	f003 0320 	and.w	r3, r3, #32
 800c282:	2b00      	cmp	r3, #0
 800c284:	d013      	beq.n	800c2ae <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800c286:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c28a:	f003 0320 	and.w	r3, r3, #32
 800c28e:	2b00      	cmp	r3, #0
 800c290:	d105      	bne.n	800c29e <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800c292:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c296:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c29a:	2b00      	cmp	r3, #0
 800c29c:	d007      	beq.n	800c2ae <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800c29e:	687b      	ldr	r3, [r7, #4]
 800c2a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c2a2:	2b00      	cmp	r3, #0
 800c2a4:	d003      	beq.n	800c2ae <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800c2a6:	687b      	ldr	r3, [r7, #4]
 800c2a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c2aa:	6878      	ldr	r0, [r7, #4]
 800c2ac:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800c2ae:	687b      	ldr	r3, [r7, #4]
 800c2b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c2b4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800c2b8:	687b      	ldr	r3, [r7, #4]
 800c2ba:	681b      	ldr	r3, [r3, #0]
 800c2bc:	689b      	ldr	r3, [r3, #8]
 800c2be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c2c2:	2b40      	cmp	r3, #64	; 0x40
 800c2c4:	d005      	beq.n	800c2d2 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800c2c6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800c2ca:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800c2ce:	2b00      	cmp	r3, #0
 800c2d0:	d04f      	beq.n	800c372 <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800c2d2:	6878      	ldr	r0, [r7, #4]
 800c2d4:	f001 fafc 	bl	800d8d0 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c2d8:	687b      	ldr	r3, [r7, #4]
 800c2da:	681b      	ldr	r3, [r3, #0]
 800c2dc:	689b      	ldr	r3, [r3, #8]
 800c2de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c2e2:	2b40      	cmp	r3, #64	; 0x40
 800c2e4:	d141      	bne.n	800c36a <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c2e6:	687b      	ldr	r3, [r7, #4]
 800c2e8:	681b      	ldr	r3, [r3, #0]
 800c2ea:	3308      	adds	r3, #8
 800c2ec:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c2f0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800c2f4:	e853 3f00 	ldrex	r3, [r3]
 800c2f8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800c2fc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800c300:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c304:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800c308:	687b      	ldr	r3, [r7, #4]
 800c30a:	681b      	ldr	r3, [r3, #0]
 800c30c:	3308      	adds	r3, #8
 800c30e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800c312:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800c316:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c31a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800c31e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800c322:	e841 2300 	strex	r3, r2, [r1]
 800c326:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800c32a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800c32e:	2b00      	cmp	r3, #0
 800c330:	d1d9      	bne.n	800c2e6 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800c332:	687b      	ldr	r3, [r7, #4]
 800c334:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c336:	2b00      	cmp	r3, #0
 800c338:	d013      	beq.n	800c362 <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800c33a:	687b      	ldr	r3, [r7, #4]
 800c33c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c33e:	4a14      	ldr	r2, [pc, #80]	; (800c390 <HAL_UART_IRQHandler+0x2b8>)
 800c340:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800c342:	687b      	ldr	r3, [r7, #4]
 800c344:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c346:	4618      	mov	r0, r3
 800c348:	f7fa fe3e 	bl	8006fc8 <HAL_DMA_Abort_IT>
 800c34c:	4603      	mov	r3, r0
 800c34e:	2b00      	cmp	r3, #0
 800c350:	d017      	beq.n	800c382 <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800c352:	687b      	ldr	r3, [r7, #4]
 800c354:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c356:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c358:	687a      	ldr	r2, [r7, #4]
 800c35a:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 800c35c:	4610      	mov	r0, r2
 800c35e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c360:	e00f      	b.n	800c382 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800c362:	6878      	ldr	r0, [r7, #4]
 800c364:	f000 fa56 	bl	800c814 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c368:	e00b      	b.n	800c382 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800c36a:	6878      	ldr	r0, [r7, #4]
 800c36c:	f000 fa52 	bl	800c814 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c370:	e007      	b.n	800c382 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800c372:	6878      	ldr	r0, [r7, #4]
 800c374:	f000 fa4e 	bl	800c814 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c378:	687b      	ldr	r3, [r7, #4]
 800c37a:	2200      	movs	r2, #0
 800c37c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 800c380:	e23b      	b.n	800c7fa <HAL_UART_IRQHandler+0x722>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c382:	bf00      	nop
    return;
 800c384:	e239      	b.n	800c7fa <HAL_UART_IRQHandler+0x722>
 800c386:	bf00      	nop
 800c388:	10000001 	.word	0x10000001
 800c38c:	04000120 	.word	0x04000120
 800c390:	0800d99d 	.word	0x0800d99d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c394:	687b      	ldr	r3, [r7, #4]
 800c396:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c398:	2b01      	cmp	r3, #1
 800c39a:	f040 81ce 	bne.w	800c73a <HAL_UART_IRQHandler+0x662>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800c39e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c3a2:	f003 0310 	and.w	r3, r3, #16
 800c3a6:	2b00      	cmp	r3, #0
 800c3a8:	f000 81c7 	beq.w	800c73a <HAL_UART_IRQHandler+0x662>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800c3ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c3b0:	f003 0310 	and.w	r3, r3, #16
 800c3b4:	2b00      	cmp	r3, #0
 800c3b6:	f000 81c0 	beq.w	800c73a <HAL_UART_IRQHandler+0x662>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800c3ba:	687b      	ldr	r3, [r7, #4]
 800c3bc:	681b      	ldr	r3, [r3, #0]
 800c3be:	2210      	movs	r2, #16
 800c3c0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c3c2:	687b      	ldr	r3, [r7, #4]
 800c3c4:	681b      	ldr	r3, [r3, #0]
 800c3c6:	689b      	ldr	r3, [r3, #8]
 800c3c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c3cc:	2b40      	cmp	r3, #64	; 0x40
 800c3ce:	f040 813b 	bne.w	800c648 <HAL_UART_IRQHandler+0x570>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800c3d2:	687b      	ldr	r3, [r7, #4]
 800c3d4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c3d6:	681b      	ldr	r3, [r3, #0]
 800c3d8:	4a8b      	ldr	r2, [pc, #556]	; (800c608 <HAL_UART_IRQHandler+0x530>)
 800c3da:	4293      	cmp	r3, r2
 800c3dc:	d059      	beq.n	800c492 <HAL_UART_IRQHandler+0x3ba>
 800c3de:	687b      	ldr	r3, [r7, #4]
 800c3e0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c3e2:	681b      	ldr	r3, [r3, #0]
 800c3e4:	4a89      	ldr	r2, [pc, #548]	; (800c60c <HAL_UART_IRQHandler+0x534>)
 800c3e6:	4293      	cmp	r3, r2
 800c3e8:	d053      	beq.n	800c492 <HAL_UART_IRQHandler+0x3ba>
 800c3ea:	687b      	ldr	r3, [r7, #4]
 800c3ec:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c3ee:	681b      	ldr	r3, [r3, #0]
 800c3f0:	4a87      	ldr	r2, [pc, #540]	; (800c610 <HAL_UART_IRQHandler+0x538>)
 800c3f2:	4293      	cmp	r3, r2
 800c3f4:	d04d      	beq.n	800c492 <HAL_UART_IRQHandler+0x3ba>
 800c3f6:	687b      	ldr	r3, [r7, #4]
 800c3f8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c3fa:	681b      	ldr	r3, [r3, #0]
 800c3fc:	4a85      	ldr	r2, [pc, #532]	; (800c614 <HAL_UART_IRQHandler+0x53c>)
 800c3fe:	4293      	cmp	r3, r2
 800c400:	d047      	beq.n	800c492 <HAL_UART_IRQHandler+0x3ba>
 800c402:	687b      	ldr	r3, [r7, #4]
 800c404:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c406:	681b      	ldr	r3, [r3, #0]
 800c408:	4a83      	ldr	r2, [pc, #524]	; (800c618 <HAL_UART_IRQHandler+0x540>)
 800c40a:	4293      	cmp	r3, r2
 800c40c:	d041      	beq.n	800c492 <HAL_UART_IRQHandler+0x3ba>
 800c40e:	687b      	ldr	r3, [r7, #4]
 800c410:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c412:	681b      	ldr	r3, [r3, #0]
 800c414:	4a81      	ldr	r2, [pc, #516]	; (800c61c <HAL_UART_IRQHandler+0x544>)
 800c416:	4293      	cmp	r3, r2
 800c418:	d03b      	beq.n	800c492 <HAL_UART_IRQHandler+0x3ba>
 800c41a:	687b      	ldr	r3, [r7, #4]
 800c41c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c41e:	681b      	ldr	r3, [r3, #0]
 800c420:	4a7f      	ldr	r2, [pc, #508]	; (800c620 <HAL_UART_IRQHandler+0x548>)
 800c422:	4293      	cmp	r3, r2
 800c424:	d035      	beq.n	800c492 <HAL_UART_IRQHandler+0x3ba>
 800c426:	687b      	ldr	r3, [r7, #4]
 800c428:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c42a:	681b      	ldr	r3, [r3, #0]
 800c42c:	4a7d      	ldr	r2, [pc, #500]	; (800c624 <HAL_UART_IRQHandler+0x54c>)
 800c42e:	4293      	cmp	r3, r2
 800c430:	d02f      	beq.n	800c492 <HAL_UART_IRQHandler+0x3ba>
 800c432:	687b      	ldr	r3, [r7, #4]
 800c434:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c436:	681b      	ldr	r3, [r3, #0]
 800c438:	4a7b      	ldr	r2, [pc, #492]	; (800c628 <HAL_UART_IRQHandler+0x550>)
 800c43a:	4293      	cmp	r3, r2
 800c43c:	d029      	beq.n	800c492 <HAL_UART_IRQHandler+0x3ba>
 800c43e:	687b      	ldr	r3, [r7, #4]
 800c440:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c442:	681b      	ldr	r3, [r3, #0]
 800c444:	4a79      	ldr	r2, [pc, #484]	; (800c62c <HAL_UART_IRQHandler+0x554>)
 800c446:	4293      	cmp	r3, r2
 800c448:	d023      	beq.n	800c492 <HAL_UART_IRQHandler+0x3ba>
 800c44a:	687b      	ldr	r3, [r7, #4]
 800c44c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c44e:	681b      	ldr	r3, [r3, #0]
 800c450:	4a77      	ldr	r2, [pc, #476]	; (800c630 <HAL_UART_IRQHandler+0x558>)
 800c452:	4293      	cmp	r3, r2
 800c454:	d01d      	beq.n	800c492 <HAL_UART_IRQHandler+0x3ba>
 800c456:	687b      	ldr	r3, [r7, #4]
 800c458:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c45a:	681b      	ldr	r3, [r3, #0]
 800c45c:	4a75      	ldr	r2, [pc, #468]	; (800c634 <HAL_UART_IRQHandler+0x55c>)
 800c45e:	4293      	cmp	r3, r2
 800c460:	d017      	beq.n	800c492 <HAL_UART_IRQHandler+0x3ba>
 800c462:	687b      	ldr	r3, [r7, #4]
 800c464:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c466:	681b      	ldr	r3, [r3, #0]
 800c468:	4a73      	ldr	r2, [pc, #460]	; (800c638 <HAL_UART_IRQHandler+0x560>)
 800c46a:	4293      	cmp	r3, r2
 800c46c:	d011      	beq.n	800c492 <HAL_UART_IRQHandler+0x3ba>
 800c46e:	687b      	ldr	r3, [r7, #4]
 800c470:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c472:	681b      	ldr	r3, [r3, #0]
 800c474:	4a71      	ldr	r2, [pc, #452]	; (800c63c <HAL_UART_IRQHandler+0x564>)
 800c476:	4293      	cmp	r3, r2
 800c478:	d00b      	beq.n	800c492 <HAL_UART_IRQHandler+0x3ba>
 800c47a:	687b      	ldr	r3, [r7, #4]
 800c47c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c47e:	681b      	ldr	r3, [r3, #0]
 800c480:	4a6f      	ldr	r2, [pc, #444]	; (800c640 <HAL_UART_IRQHandler+0x568>)
 800c482:	4293      	cmp	r3, r2
 800c484:	d005      	beq.n	800c492 <HAL_UART_IRQHandler+0x3ba>
 800c486:	687b      	ldr	r3, [r7, #4]
 800c488:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c48a:	681b      	ldr	r3, [r3, #0]
 800c48c:	4a6d      	ldr	r2, [pc, #436]	; (800c644 <HAL_UART_IRQHandler+0x56c>)
 800c48e:	4293      	cmp	r3, r2
 800c490:	d105      	bne.n	800c49e <HAL_UART_IRQHandler+0x3c6>
 800c492:	687b      	ldr	r3, [r7, #4]
 800c494:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c496:	681b      	ldr	r3, [r3, #0]
 800c498:	685b      	ldr	r3, [r3, #4]
 800c49a:	b29b      	uxth	r3, r3
 800c49c:	e004      	b.n	800c4a8 <HAL_UART_IRQHandler+0x3d0>
 800c49e:	687b      	ldr	r3, [r7, #4]
 800c4a0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c4a2:	681b      	ldr	r3, [r3, #0]
 800c4a4:	685b      	ldr	r3, [r3, #4]
 800c4a6:	b29b      	uxth	r3, r3
 800c4a8:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800c4ac:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800c4b0:	2b00      	cmp	r3, #0
 800c4b2:	f000 81a4 	beq.w	800c7fe <HAL_UART_IRQHandler+0x726>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800c4b6:	687b      	ldr	r3, [r7, #4]
 800c4b8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800c4bc:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800c4c0:	429a      	cmp	r2, r3
 800c4c2:	f080 819c 	bcs.w	800c7fe <HAL_UART_IRQHandler+0x726>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800c4c6:	687b      	ldr	r3, [r7, #4]
 800c4c8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800c4cc:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800c4d0:	687b      	ldr	r3, [r7, #4]
 800c4d2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c4d4:	69db      	ldr	r3, [r3, #28]
 800c4d6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c4da:	f000 8086 	beq.w	800c5ea <HAL_UART_IRQHandler+0x512>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c4de:	687b      	ldr	r3, [r7, #4]
 800c4e0:	681b      	ldr	r3, [r3, #0]
 800c4e2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c4e6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800c4ea:	e853 3f00 	ldrex	r3, [r3]
 800c4ee:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800c4f2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800c4f6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c4fa:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800c4fe:	687b      	ldr	r3, [r7, #4]
 800c500:	681b      	ldr	r3, [r3, #0]
 800c502:	461a      	mov	r2, r3
 800c504:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800c508:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800c50c:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c510:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800c514:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800c518:	e841 2300 	strex	r3, r2, [r1]
 800c51c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800c520:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800c524:	2b00      	cmp	r3, #0
 800c526:	d1da      	bne.n	800c4de <HAL_UART_IRQHandler+0x406>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c528:	687b      	ldr	r3, [r7, #4]
 800c52a:	681b      	ldr	r3, [r3, #0]
 800c52c:	3308      	adds	r3, #8
 800c52e:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c530:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c532:	e853 3f00 	ldrex	r3, [r3]
 800c536:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800c538:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800c53a:	f023 0301 	bic.w	r3, r3, #1
 800c53e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800c542:	687b      	ldr	r3, [r7, #4]
 800c544:	681b      	ldr	r3, [r3, #0]
 800c546:	3308      	adds	r3, #8
 800c548:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800c54c:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800c550:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c552:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800c554:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800c558:	e841 2300 	strex	r3, r2, [r1]
 800c55c:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800c55e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c560:	2b00      	cmp	r3, #0
 800c562:	d1e1      	bne.n	800c528 <HAL_UART_IRQHandler+0x450>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c564:	687b      	ldr	r3, [r7, #4]
 800c566:	681b      	ldr	r3, [r3, #0]
 800c568:	3308      	adds	r3, #8
 800c56a:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c56c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c56e:	e853 3f00 	ldrex	r3, [r3]
 800c572:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800c574:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c576:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c57a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800c57e:	687b      	ldr	r3, [r7, #4]
 800c580:	681b      	ldr	r3, [r3, #0]
 800c582:	3308      	adds	r3, #8
 800c584:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800c588:	66fa      	str	r2, [r7, #108]	; 0x6c
 800c58a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c58c:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800c58e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800c590:	e841 2300 	strex	r3, r2, [r1]
 800c594:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800c596:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c598:	2b00      	cmp	r3, #0
 800c59a:	d1e3      	bne.n	800c564 <HAL_UART_IRQHandler+0x48c>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800c59c:	687b      	ldr	r3, [r7, #4]
 800c59e:	2220      	movs	r2, #32
 800c5a0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c5a4:	687b      	ldr	r3, [r7, #4]
 800c5a6:	2200      	movs	r2, #0
 800c5a8:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c5aa:	687b      	ldr	r3, [r7, #4]
 800c5ac:	681b      	ldr	r3, [r3, #0]
 800c5ae:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c5b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c5b2:	e853 3f00 	ldrex	r3, [r3]
 800c5b6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800c5b8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c5ba:	f023 0310 	bic.w	r3, r3, #16
 800c5be:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800c5c2:	687b      	ldr	r3, [r7, #4]
 800c5c4:	681b      	ldr	r3, [r3, #0]
 800c5c6:	461a      	mov	r2, r3
 800c5c8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800c5cc:	65bb      	str	r3, [r7, #88]	; 0x58
 800c5ce:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c5d0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800c5d2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800c5d4:	e841 2300 	strex	r3, r2, [r1]
 800c5d8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800c5da:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c5dc:	2b00      	cmp	r3, #0
 800c5de:	d1e4      	bne.n	800c5aa <HAL_UART_IRQHandler+0x4d2>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800c5e0:	687b      	ldr	r3, [r7, #4]
 800c5e2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c5e4:	4618      	mov	r0, r3
 800c5e6:	f7fa f9d1 	bl	800698c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800c5ea:	687b      	ldr	r3, [r7, #4]
 800c5ec:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800c5f0:	687b      	ldr	r3, [r7, #4]
 800c5f2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c5f6:	b29b      	uxth	r3, r3
 800c5f8:	1ad3      	subs	r3, r2, r3
 800c5fa:	b29b      	uxth	r3, r3
 800c5fc:	4619      	mov	r1, r3
 800c5fe:	6878      	ldr	r0, [r7, #4]
 800c600:	f000 f912 	bl	800c828 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800c604:	e0fb      	b.n	800c7fe <HAL_UART_IRQHandler+0x726>
 800c606:	bf00      	nop
 800c608:	40020010 	.word	0x40020010
 800c60c:	40020028 	.word	0x40020028
 800c610:	40020040 	.word	0x40020040
 800c614:	40020058 	.word	0x40020058
 800c618:	40020070 	.word	0x40020070
 800c61c:	40020088 	.word	0x40020088
 800c620:	400200a0 	.word	0x400200a0
 800c624:	400200b8 	.word	0x400200b8
 800c628:	40020410 	.word	0x40020410
 800c62c:	40020428 	.word	0x40020428
 800c630:	40020440 	.word	0x40020440
 800c634:	40020458 	.word	0x40020458
 800c638:	40020470 	.word	0x40020470
 800c63c:	40020488 	.word	0x40020488
 800c640:	400204a0 	.word	0x400204a0
 800c644:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800c648:	687b      	ldr	r3, [r7, #4]
 800c64a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800c64e:	687b      	ldr	r3, [r7, #4]
 800c650:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c654:	b29b      	uxth	r3, r3
 800c656:	1ad3      	subs	r3, r2, r3
 800c658:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800c65c:	687b      	ldr	r3, [r7, #4]
 800c65e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c662:	b29b      	uxth	r3, r3
 800c664:	2b00      	cmp	r3, #0
 800c666:	f000 80cc 	beq.w	800c802 <HAL_UART_IRQHandler+0x72a>
          && (nb_rx_data > 0U))
 800c66a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800c66e:	2b00      	cmp	r3, #0
 800c670:	f000 80c7 	beq.w	800c802 <HAL_UART_IRQHandler+0x72a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c674:	687b      	ldr	r3, [r7, #4]
 800c676:	681b      	ldr	r3, [r3, #0]
 800c678:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c67a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c67c:	e853 3f00 	ldrex	r3, [r3]
 800c680:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800c682:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c684:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800c688:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800c68c:	687b      	ldr	r3, [r7, #4]
 800c68e:	681b      	ldr	r3, [r3, #0]
 800c690:	461a      	mov	r2, r3
 800c692:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800c696:	647b      	str	r3, [r7, #68]	; 0x44
 800c698:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c69a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800c69c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c69e:	e841 2300 	strex	r3, r2, [r1]
 800c6a2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800c6a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c6a6:	2b00      	cmp	r3, #0
 800c6a8:	d1e4      	bne.n	800c674 <HAL_UART_IRQHandler+0x59c>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800c6aa:	687b      	ldr	r3, [r7, #4]
 800c6ac:	681b      	ldr	r3, [r3, #0]
 800c6ae:	3308      	adds	r3, #8
 800c6b0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c6b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c6b4:	e853 3f00 	ldrex	r3, [r3]
 800c6b8:	623b      	str	r3, [r7, #32]
   return(result);
 800c6ba:	6a3a      	ldr	r2, [r7, #32]
 800c6bc:	4b54      	ldr	r3, [pc, #336]	; (800c810 <HAL_UART_IRQHandler+0x738>)
 800c6be:	4013      	ands	r3, r2
 800c6c0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800c6c4:	687b      	ldr	r3, [r7, #4]
 800c6c6:	681b      	ldr	r3, [r3, #0]
 800c6c8:	3308      	adds	r3, #8
 800c6ca:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800c6ce:	633a      	str	r2, [r7, #48]	; 0x30
 800c6d0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c6d2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c6d4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c6d6:	e841 2300 	strex	r3, r2, [r1]
 800c6da:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800c6dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c6de:	2b00      	cmp	r3, #0
 800c6e0:	d1e3      	bne.n	800c6aa <HAL_UART_IRQHandler+0x5d2>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800c6e2:	687b      	ldr	r3, [r7, #4]
 800c6e4:	2220      	movs	r2, #32
 800c6e6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c6ea:	687b      	ldr	r3, [r7, #4]
 800c6ec:	2200      	movs	r2, #0
 800c6ee:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800c6f0:	687b      	ldr	r3, [r7, #4]
 800c6f2:	2200      	movs	r2, #0
 800c6f4:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c6f6:	687b      	ldr	r3, [r7, #4]
 800c6f8:	681b      	ldr	r3, [r3, #0]
 800c6fa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c6fc:	693b      	ldr	r3, [r7, #16]
 800c6fe:	e853 3f00 	ldrex	r3, [r3]
 800c702:	60fb      	str	r3, [r7, #12]
   return(result);
 800c704:	68fb      	ldr	r3, [r7, #12]
 800c706:	f023 0310 	bic.w	r3, r3, #16
 800c70a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800c70e:	687b      	ldr	r3, [r7, #4]
 800c710:	681b      	ldr	r3, [r3, #0]
 800c712:	461a      	mov	r2, r3
 800c714:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800c718:	61fb      	str	r3, [r7, #28]
 800c71a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c71c:	69b9      	ldr	r1, [r7, #24]
 800c71e:	69fa      	ldr	r2, [r7, #28]
 800c720:	e841 2300 	strex	r3, r2, [r1]
 800c724:	617b      	str	r3, [r7, #20]
   return(result);
 800c726:	697b      	ldr	r3, [r7, #20]
 800c728:	2b00      	cmp	r3, #0
 800c72a:	d1e4      	bne.n	800c6f6 <HAL_UART_IRQHandler+0x61e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800c72c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800c730:	4619      	mov	r1, r3
 800c732:	6878      	ldr	r0, [r7, #4]
 800c734:	f000 f878 	bl	800c828 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800c738:	e063      	b.n	800c802 <HAL_UART_IRQHandler+0x72a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800c73a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c73e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800c742:	2b00      	cmp	r3, #0
 800c744:	d00e      	beq.n	800c764 <HAL_UART_IRQHandler+0x68c>
 800c746:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c74a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c74e:	2b00      	cmp	r3, #0
 800c750:	d008      	beq.n	800c764 <HAL_UART_IRQHandler+0x68c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800c752:	687b      	ldr	r3, [r7, #4]
 800c754:	681b      	ldr	r3, [r3, #0]
 800c756:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800c75a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800c75c:	6878      	ldr	r0, [r7, #4]
 800c75e:	f001 fdbb 	bl	800e2d8 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800c762:	e051      	b.n	800c808 <HAL_UART_IRQHandler+0x730>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800c764:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c768:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c76c:	2b00      	cmp	r3, #0
 800c76e:	d014      	beq.n	800c79a <HAL_UART_IRQHandler+0x6c2>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800c770:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c774:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c778:	2b00      	cmp	r3, #0
 800c77a:	d105      	bne.n	800c788 <HAL_UART_IRQHandler+0x6b0>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800c77c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c780:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c784:	2b00      	cmp	r3, #0
 800c786:	d008      	beq.n	800c79a <HAL_UART_IRQHandler+0x6c2>
  {
    if (huart->TxISR != NULL)
 800c788:	687b      	ldr	r3, [r7, #4]
 800c78a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c78c:	2b00      	cmp	r3, #0
 800c78e:	d03a      	beq.n	800c806 <HAL_UART_IRQHandler+0x72e>
    {
      huart->TxISR(huart);
 800c790:	687b      	ldr	r3, [r7, #4]
 800c792:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c794:	6878      	ldr	r0, [r7, #4]
 800c796:	4798      	blx	r3
    }
    return;
 800c798:	e035      	b.n	800c806 <HAL_UART_IRQHandler+0x72e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800c79a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c79e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c7a2:	2b00      	cmp	r3, #0
 800c7a4:	d009      	beq.n	800c7ba <HAL_UART_IRQHandler+0x6e2>
 800c7a6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c7aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c7ae:	2b00      	cmp	r3, #0
 800c7b0:	d003      	beq.n	800c7ba <HAL_UART_IRQHandler+0x6e2>
  {
    UART_EndTransmit_IT(huart);
 800c7b2:	6878      	ldr	r0, [r7, #4]
 800c7b4:	f001 f908 	bl	800d9c8 <UART_EndTransmit_IT>
    return;
 800c7b8:	e026      	b.n	800c808 <HAL_UART_IRQHandler+0x730>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800c7ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c7be:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c7c2:	2b00      	cmp	r3, #0
 800c7c4:	d009      	beq.n	800c7da <HAL_UART_IRQHandler+0x702>
 800c7c6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c7ca:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800c7ce:	2b00      	cmp	r3, #0
 800c7d0:	d003      	beq.n	800c7da <HAL_UART_IRQHandler+0x702>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800c7d2:	6878      	ldr	r0, [r7, #4]
 800c7d4:	f001 fd94 	bl	800e300 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800c7d8:	e016      	b.n	800c808 <HAL_UART_IRQHandler+0x730>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800c7da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c7de:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800c7e2:	2b00      	cmp	r3, #0
 800c7e4:	d010      	beq.n	800c808 <HAL_UART_IRQHandler+0x730>
 800c7e6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c7ea:	2b00      	cmp	r3, #0
 800c7ec:	da0c      	bge.n	800c808 <HAL_UART_IRQHandler+0x730>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800c7ee:	6878      	ldr	r0, [r7, #4]
 800c7f0:	f001 fd7c 	bl	800e2ec <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800c7f4:	e008      	b.n	800c808 <HAL_UART_IRQHandler+0x730>
      return;
 800c7f6:	bf00      	nop
 800c7f8:	e006      	b.n	800c808 <HAL_UART_IRQHandler+0x730>
    return;
 800c7fa:	bf00      	nop
 800c7fc:	e004      	b.n	800c808 <HAL_UART_IRQHandler+0x730>
      return;
 800c7fe:	bf00      	nop
 800c800:	e002      	b.n	800c808 <HAL_UART_IRQHandler+0x730>
      return;
 800c802:	bf00      	nop
 800c804:	e000      	b.n	800c808 <HAL_UART_IRQHandler+0x730>
    return;
 800c806:	bf00      	nop
  }
}
 800c808:	37e8      	adds	r7, #232	; 0xe8
 800c80a:	46bd      	mov	sp, r7
 800c80c:	bd80      	pop	{r7, pc}
 800c80e:	bf00      	nop
 800c810:	effffffe 	.word	0xeffffffe

0800c814 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800c814:	b480      	push	{r7}
 800c816:	b083      	sub	sp, #12
 800c818:	af00      	add	r7, sp, #0
 800c81a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800c81c:	bf00      	nop
 800c81e:	370c      	adds	r7, #12
 800c820:	46bd      	mov	sp, r7
 800c822:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c826:	4770      	bx	lr

0800c828 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800c828:	b480      	push	{r7}
 800c82a:	b083      	sub	sp, #12
 800c82c:	af00      	add	r7, sp, #0
 800c82e:	6078      	str	r0, [r7, #4]
 800c830:	460b      	mov	r3, r1
 800c832:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800c834:	bf00      	nop
 800c836:	370c      	adds	r7, #12
 800c838:	46bd      	mov	sp, r7
 800c83a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c83e:	4770      	bx	lr

0800c840 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800c840:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800c844:	b092      	sub	sp, #72	; 0x48
 800c846:	af00      	add	r7, sp, #0
 800c848:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800c84a:	2300      	movs	r3, #0
 800c84c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800c850:	697b      	ldr	r3, [r7, #20]
 800c852:	689a      	ldr	r2, [r3, #8]
 800c854:	697b      	ldr	r3, [r7, #20]
 800c856:	691b      	ldr	r3, [r3, #16]
 800c858:	431a      	orrs	r2, r3
 800c85a:	697b      	ldr	r3, [r7, #20]
 800c85c:	695b      	ldr	r3, [r3, #20]
 800c85e:	431a      	orrs	r2, r3
 800c860:	697b      	ldr	r3, [r7, #20]
 800c862:	69db      	ldr	r3, [r3, #28]
 800c864:	4313      	orrs	r3, r2
 800c866:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800c868:	697b      	ldr	r3, [r7, #20]
 800c86a:	681b      	ldr	r3, [r3, #0]
 800c86c:	681a      	ldr	r2, [r3, #0]
 800c86e:	4bbe      	ldr	r3, [pc, #760]	; (800cb68 <UART_SetConfig+0x328>)
 800c870:	4013      	ands	r3, r2
 800c872:	697a      	ldr	r2, [r7, #20]
 800c874:	6812      	ldr	r2, [r2, #0]
 800c876:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800c878:	430b      	orrs	r3, r1
 800c87a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800c87c:	697b      	ldr	r3, [r7, #20]
 800c87e:	681b      	ldr	r3, [r3, #0]
 800c880:	685b      	ldr	r3, [r3, #4]
 800c882:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800c886:	697b      	ldr	r3, [r7, #20]
 800c888:	68da      	ldr	r2, [r3, #12]
 800c88a:	697b      	ldr	r3, [r7, #20]
 800c88c:	681b      	ldr	r3, [r3, #0]
 800c88e:	430a      	orrs	r2, r1
 800c890:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800c892:	697b      	ldr	r3, [r7, #20]
 800c894:	699b      	ldr	r3, [r3, #24]
 800c896:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800c898:	697b      	ldr	r3, [r7, #20]
 800c89a:	681b      	ldr	r3, [r3, #0]
 800c89c:	4ab3      	ldr	r2, [pc, #716]	; (800cb6c <UART_SetConfig+0x32c>)
 800c89e:	4293      	cmp	r3, r2
 800c8a0:	d004      	beq.n	800c8ac <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800c8a2:	697b      	ldr	r3, [r7, #20]
 800c8a4:	6a1b      	ldr	r3, [r3, #32]
 800c8a6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c8a8:	4313      	orrs	r3, r2
 800c8aa:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800c8ac:	697b      	ldr	r3, [r7, #20]
 800c8ae:	681b      	ldr	r3, [r3, #0]
 800c8b0:	689a      	ldr	r2, [r3, #8]
 800c8b2:	4baf      	ldr	r3, [pc, #700]	; (800cb70 <UART_SetConfig+0x330>)
 800c8b4:	4013      	ands	r3, r2
 800c8b6:	697a      	ldr	r2, [r7, #20]
 800c8b8:	6812      	ldr	r2, [r2, #0]
 800c8ba:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800c8bc:	430b      	orrs	r3, r1
 800c8be:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800c8c0:	697b      	ldr	r3, [r7, #20]
 800c8c2:	681b      	ldr	r3, [r3, #0]
 800c8c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c8c6:	f023 010f 	bic.w	r1, r3, #15
 800c8ca:	697b      	ldr	r3, [r7, #20]
 800c8cc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c8ce:	697b      	ldr	r3, [r7, #20]
 800c8d0:	681b      	ldr	r3, [r3, #0]
 800c8d2:	430a      	orrs	r2, r1
 800c8d4:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800c8d6:	697b      	ldr	r3, [r7, #20]
 800c8d8:	681b      	ldr	r3, [r3, #0]
 800c8da:	4aa6      	ldr	r2, [pc, #664]	; (800cb74 <UART_SetConfig+0x334>)
 800c8dc:	4293      	cmp	r3, r2
 800c8de:	d177      	bne.n	800c9d0 <UART_SetConfig+0x190>
 800c8e0:	4ba5      	ldr	r3, [pc, #660]	; (800cb78 <UART_SetConfig+0x338>)
 800c8e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c8e4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800c8e8:	2b28      	cmp	r3, #40	; 0x28
 800c8ea:	d86d      	bhi.n	800c9c8 <UART_SetConfig+0x188>
 800c8ec:	a201      	add	r2, pc, #4	; (adr r2, 800c8f4 <UART_SetConfig+0xb4>)
 800c8ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c8f2:	bf00      	nop
 800c8f4:	0800c999 	.word	0x0800c999
 800c8f8:	0800c9c9 	.word	0x0800c9c9
 800c8fc:	0800c9c9 	.word	0x0800c9c9
 800c900:	0800c9c9 	.word	0x0800c9c9
 800c904:	0800c9c9 	.word	0x0800c9c9
 800c908:	0800c9c9 	.word	0x0800c9c9
 800c90c:	0800c9c9 	.word	0x0800c9c9
 800c910:	0800c9c9 	.word	0x0800c9c9
 800c914:	0800c9a1 	.word	0x0800c9a1
 800c918:	0800c9c9 	.word	0x0800c9c9
 800c91c:	0800c9c9 	.word	0x0800c9c9
 800c920:	0800c9c9 	.word	0x0800c9c9
 800c924:	0800c9c9 	.word	0x0800c9c9
 800c928:	0800c9c9 	.word	0x0800c9c9
 800c92c:	0800c9c9 	.word	0x0800c9c9
 800c930:	0800c9c9 	.word	0x0800c9c9
 800c934:	0800c9a9 	.word	0x0800c9a9
 800c938:	0800c9c9 	.word	0x0800c9c9
 800c93c:	0800c9c9 	.word	0x0800c9c9
 800c940:	0800c9c9 	.word	0x0800c9c9
 800c944:	0800c9c9 	.word	0x0800c9c9
 800c948:	0800c9c9 	.word	0x0800c9c9
 800c94c:	0800c9c9 	.word	0x0800c9c9
 800c950:	0800c9c9 	.word	0x0800c9c9
 800c954:	0800c9b1 	.word	0x0800c9b1
 800c958:	0800c9c9 	.word	0x0800c9c9
 800c95c:	0800c9c9 	.word	0x0800c9c9
 800c960:	0800c9c9 	.word	0x0800c9c9
 800c964:	0800c9c9 	.word	0x0800c9c9
 800c968:	0800c9c9 	.word	0x0800c9c9
 800c96c:	0800c9c9 	.word	0x0800c9c9
 800c970:	0800c9c9 	.word	0x0800c9c9
 800c974:	0800c9b9 	.word	0x0800c9b9
 800c978:	0800c9c9 	.word	0x0800c9c9
 800c97c:	0800c9c9 	.word	0x0800c9c9
 800c980:	0800c9c9 	.word	0x0800c9c9
 800c984:	0800c9c9 	.word	0x0800c9c9
 800c988:	0800c9c9 	.word	0x0800c9c9
 800c98c:	0800c9c9 	.word	0x0800c9c9
 800c990:	0800c9c9 	.word	0x0800c9c9
 800c994:	0800c9c1 	.word	0x0800c9c1
 800c998:	2301      	movs	r3, #1
 800c99a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c99e:	e222      	b.n	800cde6 <UART_SetConfig+0x5a6>
 800c9a0:	2304      	movs	r3, #4
 800c9a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c9a6:	e21e      	b.n	800cde6 <UART_SetConfig+0x5a6>
 800c9a8:	2308      	movs	r3, #8
 800c9aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c9ae:	e21a      	b.n	800cde6 <UART_SetConfig+0x5a6>
 800c9b0:	2310      	movs	r3, #16
 800c9b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c9b6:	e216      	b.n	800cde6 <UART_SetConfig+0x5a6>
 800c9b8:	2320      	movs	r3, #32
 800c9ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c9be:	e212      	b.n	800cde6 <UART_SetConfig+0x5a6>
 800c9c0:	2340      	movs	r3, #64	; 0x40
 800c9c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c9c6:	e20e      	b.n	800cde6 <UART_SetConfig+0x5a6>
 800c9c8:	2380      	movs	r3, #128	; 0x80
 800c9ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c9ce:	e20a      	b.n	800cde6 <UART_SetConfig+0x5a6>
 800c9d0:	697b      	ldr	r3, [r7, #20]
 800c9d2:	681b      	ldr	r3, [r3, #0]
 800c9d4:	4a69      	ldr	r2, [pc, #420]	; (800cb7c <UART_SetConfig+0x33c>)
 800c9d6:	4293      	cmp	r3, r2
 800c9d8:	d130      	bne.n	800ca3c <UART_SetConfig+0x1fc>
 800c9da:	4b67      	ldr	r3, [pc, #412]	; (800cb78 <UART_SetConfig+0x338>)
 800c9dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c9de:	f003 0307 	and.w	r3, r3, #7
 800c9e2:	2b05      	cmp	r3, #5
 800c9e4:	d826      	bhi.n	800ca34 <UART_SetConfig+0x1f4>
 800c9e6:	a201      	add	r2, pc, #4	; (adr r2, 800c9ec <UART_SetConfig+0x1ac>)
 800c9e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c9ec:	0800ca05 	.word	0x0800ca05
 800c9f0:	0800ca0d 	.word	0x0800ca0d
 800c9f4:	0800ca15 	.word	0x0800ca15
 800c9f8:	0800ca1d 	.word	0x0800ca1d
 800c9fc:	0800ca25 	.word	0x0800ca25
 800ca00:	0800ca2d 	.word	0x0800ca2d
 800ca04:	2300      	movs	r3, #0
 800ca06:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ca0a:	e1ec      	b.n	800cde6 <UART_SetConfig+0x5a6>
 800ca0c:	2304      	movs	r3, #4
 800ca0e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ca12:	e1e8      	b.n	800cde6 <UART_SetConfig+0x5a6>
 800ca14:	2308      	movs	r3, #8
 800ca16:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ca1a:	e1e4      	b.n	800cde6 <UART_SetConfig+0x5a6>
 800ca1c:	2310      	movs	r3, #16
 800ca1e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ca22:	e1e0      	b.n	800cde6 <UART_SetConfig+0x5a6>
 800ca24:	2320      	movs	r3, #32
 800ca26:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ca2a:	e1dc      	b.n	800cde6 <UART_SetConfig+0x5a6>
 800ca2c:	2340      	movs	r3, #64	; 0x40
 800ca2e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ca32:	e1d8      	b.n	800cde6 <UART_SetConfig+0x5a6>
 800ca34:	2380      	movs	r3, #128	; 0x80
 800ca36:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ca3a:	e1d4      	b.n	800cde6 <UART_SetConfig+0x5a6>
 800ca3c:	697b      	ldr	r3, [r7, #20]
 800ca3e:	681b      	ldr	r3, [r3, #0]
 800ca40:	4a4f      	ldr	r2, [pc, #316]	; (800cb80 <UART_SetConfig+0x340>)
 800ca42:	4293      	cmp	r3, r2
 800ca44:	d130      	bne.n	800caa8 <UART_SetConfig+0x268>
 800ca46:	4b4c      	ldr	r3, [pc, #304]	; (800cb78 <UART_SetConfig+0x338>)
 800ca48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ca4a:	f003 0307 	and.w	r3, r3, #7
 800ca4e:	2b05      	cmp	r3, #5
 800ca50:	d826      	bhi.n	800caa0 <UART_SetConfig+0x260>
 800ca52:	a201      	add	r2, pc, #4	; (adr r2, 800ca58 <UART_SetConfig+0x218>)
 800ca54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ca58:	0800ca71 	.word	0x0800ca71
 800ca5c:	0800ca79 	.word	0x0800ca79
 800ca60:	0800ca81 	.word	0x0800ca81
 800ca64:	0800ca89 	.word	0x0800ca89
 800ca68:	0800ca91 	.word	0x0800ca91
 800ca6c:	0800ca99 	.word	0x0800ca99
 800ca70:	2300      	movs	r3, #0
 800ca72:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ca76:	e1b6      	b.n	800cde6 <UART_SetConfig+0x5a6>
 800ca78:	2304      	movs	r3, #4
 800ca7a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ca7e:	e1b2      	b.n	800cde6 <UART_SetConfig+0x5a6>
 800ca80:	2308      	movs	r3, #8
 800ca82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ca86:	e1ae      	b.n	800cde6 <UART_SetConfig+0x5a6>
 800ca88:	2310      	movs	r3, #16
 800ca8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ca8e:	e1aa      	b.n	800cde6 <UART_SetConfig+0x5a6>
 800ca90:	2320      	movs	r3, #32
 800ca92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ca96:	e1a6      	b.n	800cde6 <UART_SetConfig+0x5a6>
 800ca98:	2340      	movs	r3, #64	; 0x40
 800ca9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ca9e:	e1a2      	b.n	800cde6 <UART_SetConfig+0x5a6>
 800caa0:	2380      	movs	r3, #128	; 0x80
 800caa2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800caa6:	e19e      	b.n	800cde6 <UART_SetConfig+0x5a6>
 800caa8:	697b      	ldr	r3, [r7, #20]
 800caaa:	681b      	ldr	r3, [r3, #0]
 800caac:	4a35      	ldr	r2, [pc, #212]	; (800cb84 <UART_SetConfig+0x344>)
 800caae:	4293      	cmp	r3, r2
 800cab0:	d130      	bne.n	800cb14 <UART_SetConfig+0x2d4>
 800cab2:	4b31      	ldr	r3, [pc, #196]	; (800cb78 <UART_SetConfig+0x338>)
 800cab4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cab6:	f003 0307 	and.w	r3, r3, #7
 800caba:	2b05      	cmp	r3, #5
 800cabc:	d826      	bhi.n	800cb0c <UART_SetConfig+0x2cc>
 800cabe:	a201      	add	r2, pc, #4	; (adr r2, 800cac4 <UART_SetConfig+0x284>)
 800cac0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cac4:	0800cadd 	.word	0x0800cadd
 800cac8:	0800cae5 	.word	0x0800cae5
 800cacc:	0800caed 	.word	0x0800caed
 800cad0:	0800caf5 	.word	0x0800caf5
 800cad4:	0800cafd 	.word	0x0800cafd
 800cad8:	0800cb05 	.word	0x0800cb05
 800cadc:	2300      	movs	r3, #0
 800cade:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cae2:	e180      	b.n	800cde6 <UART_SetConfig+0x5a6>
 800cae4:	2304      	movs	r3, #4
 800cae6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800caea:	e17c      	b.n	800cde6 <UART_SetConfig+0x5a6>
 800caec:	2308      	movs	r3, #8
 800caee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800caf2:	e178      	b.n	800cde6 <UART_SetConfig+0x5a6>
 800caf4:	2310      	movs	r3, #16
 800caf6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cafa:	e174      	b.n	800cde6 <UART_SetConfig+0x5a6>
 800cafc:	2320      	movs	r3, #32
 800cafe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cb02:	e170      	b.n	800cde6 <UART_SetConfig+0x5a6>
 800cb04:	2340      	movs	r3, #64	; 0x40
 800cb06:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cb0a:	e16c      	b.n	800cde6 <UART_SetConfig+0x5a6>
 800cb0c:	2380      	movs	r3, #128	; 0x80
 800cb0e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cb12:	e168      	b.n	800cde6 <UART_SetConfig+0x5a6>
 800cb14:	697b      	ldr	r3, [r7, #20]
 800cb16:	681b      	ldr	r3, [r3, #0]
 800cb18:	4a1b      	ldr	r2, [pc, #108]	; (800cb88 <UART_SetConfig+0x348>)
 800cb1a:	4293      	cmp	r3, r2
 800cb1c:	d142      	bne.n	800cba4 <UART_SetConfig+0x364>
 800cb1e:	4b16      	ldr	r3, [pc, #88]	; (800cb78 <UART_SetConfig+0x338>)
 800cb20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cb22:	f003 0307 	and.w	r3, r3, #7
 800cb26:	2b05      	cmp	r3, #5
 800cb28:	d838      	bhi.n	800cb9c <UART_SetConfig+0x35c>
 800cb2a:	a201      	add	r2, pc, #4	; (adr r2, 800cb30 <UART_SetConfig+0x2f0>)
 800cb2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cb30:	0800cb49 	.word	0x0800cb49
 800cb34:	0800cb51 	.word	0x0800cb51
 800cb38:	0800cb59 	.word	0x0800cb59
 800cb3c:	0800cb61 	.word	0x0800cb61
 800cb40:	0800cb8d 	.word	0x0800cb8d
 800cb44:	0800cb95 	.word	0x0800cb95
 800cb48:	2300      	movs	r3, #0
 800cb4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cb4e:	e14a      	b.n	800cde6 <UART_SetConfig+0x5a6>
 800cb50:	2304      	movs	r3, #4
 800cb52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cb56:	e146      	b.n	800cde6 <UART_SetConfig+0x5a6>
 800cb58:	2308      	movs	r3, #8
 800cb5a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cb5e:	e142      	b.n	800cde6 <UART_SetConfig+0x5a6>
 800cb60:	2310      	movs	r3, #16
 800cb62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cb66:	e13e      	b.n	800cde6 <UART_SetConfig+0x5a6>
 800cb68:	cfff69f3 	.word	0xcfff69f3
 800cb6c:	58000c00 	.word	0x58000c00
 800cb70:	11fff4ff 	.word	0x11fff4ff
 800cb74:	40011000 	.word	0x40011000
 800cb78:	58024400 	.word	0x58024400
 800cb7c:	40004400 	.word	0x40004400
 800cb80:	40004800 	.word	0x40004800
 800cb84:	40004c00 	.word	0x40004c00
 800cb88:	40005000 	.word	0x40005000
 800cb8c:	2320      	movs	r3, #32
 800cb8e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cb92:	e128      	b.n	800cde6 <UART_SetConfig+0x5a6>
 800cb94:	2340      	movs	r3, #64	; 0x40
 800cb96:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cb9a:	e124      	b.n	800cde6 <UART_SetConfig+0x5a6>
 800cb9c:	2380      	movs	r3, #128	; 0x80
 800cb9e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cba2:	e120      	b.n	800cde6 <UART_SetConfig+0x5a6>
 800cba4:	697b      	ldr	r3, [r7, #20]
 800cba6:	681b      	ldr	r3, [r3, #0]
 800cba8:	4acb      	ldr	r2, [pc, #812]	; (800ced8 <UART_SetConfig+0x698>)
 800cbaa:	4293      	cmp	r3, r2
 800cbac:	d176      	bne.n	800cc9c <UART_SetConfig+0x45c>
 800cbae:	4bcb      	ldr	r3, [pc, #812]	; (800cedc <UART_SetConfig+0x69c>)
 800cbb0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cbb2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800cbb6:	2b28      	cmp	r3, #40	; 0x28
 800cbb8:	d86c      	bhi.n	800cc94 <UART_SetConfig+0x454>
 800cbba:	a201      	add	r2, pc, #4	; (adr r2, 800cbc0 <UART_SetConfig+0x380>)
 800cbbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cbc0:	0800cc65 	.word	0x0800cc65
 800cbc4:	0800cc95 	.word	0x0800cc95
 800cbc8:	0800cc95 	.word	0x0800cc95
 800cbcc:	0800cc95 	.word	0x0800cc95
 800cbd0:	0800cc95 	.word	0x0800cc95
 800cbd4:	0800cc95 	.word	0x0800cc95
 800cbd8:	0800cc95 	.word	0x0800cc95
 800cbdc:	0800cc95 	.word	0x0800cc95
 800cbe0:	0800cc6d 	.word	0x0800cc6d
 800cbe4:	0800cc95 	.word	0x0800cc95
 800cbe8:	0800cc95 	.word	0x0800cc95
 800cbec:	0800cc95 	.word	0x0800cc95
 800cbf0:	0800cc95 	.word	0x0800cc95
 800cbf4:	0800cc95 	.word	0x0800cc95
 800cbf8:	0800cc95 	.word	0x0800cc95
 800cbfc:	0800cc95 	.word	0x0800cc95
 800cc00:	0800cc75 	.word	0x0800cc75
 800cc04:	0800cc95 	.word	0x0800cc95
 800cc08:	0800cc95 	.word	0x0800cc95
 800cc0c:	0800cc95 	.word	0x0800cc95
 800cc10:	0800cc95 	.word	0x0800cc95
 800cc14:	0800cc95 	.word	0x0800cc95
 800cc18:	0800cc95 	.word	0x0800cc95
 800cc1c:	0800cc95 	.word	0x0800cc95
 800cc20:	0800cc7d 	.word	0x0800cc7d
 800cc24:	0800cc95 	.word	0x0800cc95
 800cc28:	0800cc95 	.word	0x0800cc95
 800cc2c:	0800cc95 	.word	0x0800cc95
 800cc30:	0800cc95 	.word	0x0800cc95
 800cc34:	0800cc95 	.word	0x0800cc95
 800cc38:	0800cc95 	.word	0x0800cc95
 800cc3c:	0800cc95 	.word	0x0800cc95
 800cc40:	0800cc85 	.word	0x0800cc85
 800cc44:	0800cc95 	.word	0x0800cc95
 800cc48:	0800cc95 	.word	0x0800cc95
 800cc4c:	0800cc95 	.word	0x0800cc95
 800cc50:	0800cc95 	.word	0x0800cc95
 800cc54:	0800cc95 	.word	0x0800cc95
 800cc58:	0800cc95 	.word	0x0800cc95
 800cc5c:	0800cc95 	.word	0x0800cc95
 800cc60:	0800cc8d 	.word	0x0800cc8d
 800cc64:	2301      	movs	r3, #1
 800cc66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cc6a:	e0bc      	b.n	800cde6 <UART_SetConfig+0x5a6>
 800cc6c:	2304      	movs	r3, #4
 800cc6e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cc72:	e0b8      	b.n	800cde6 <UART_SetConfig+0x5a6>
 800cc74:	2308      	movs	r3, #8
 800cc76:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cc7a:	e0b4      	b.n	800cde6 <UART_SetConfig+0x5a6>
 800cc7c:	2310      	movs	r3, #16
 800cc7e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cc82:	e0b0      	b.n	800cde6 <UART_SetConfig+0x5a6>
 800cc84:	2320      	movs	r3, #32
 800cc86:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cc8a:	e0ac      	b.n	800cde6 <UART_SetConfig+0x5a6>
 800cc8c:	2340      	movs	r3, #64	; 0x40
 800cc8e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cc92:	e0a8      	b.n	800cde6 <UART_SetConfig+0x5a6>
 800cc94:	2380      	movs	r3, #128	; 0x80
 800cc96:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cc9a:	e0a4      	b.n	800cde6 <UART_SetConfig+0x5a6>
 800cc9c:	697b      	ldr	r3, [r7, #20]
 800cc9e:	681b      	ldr	r3, [r3, #0]
 800cca0:	4a8f      	ldr	r2, [pc, #572]	; (800cee0 <UART_SetConfig+0x6a0>)
 800cca2:	4293      	cmp	r3, r2
 800cca4:	d130      	bne.n	800cd08 <UART_SetConfig+0x4c8>
 800cca6:	4b8d      	ldr	r3, [pc, #564]	; (800cedc <UART_SetConfig+0x69c>)
 800cca8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ccaa:	f003 0307 	and.w	r3, r3, #7
 800ccae:	2b05      	cmp	r3, #5
 800ccb0:	d826      	bhi.n	800cd00 <UART_SetConfig+0x4c0>
 800ccb2:	a201      	add	r2, pc, #4	; (adr r2, 800ccb8 <UART_SetConfig+0x478>)
 800ccb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ccb8:	0800ccd1 	.word	0x0800ccd1
 800ccbc:	0800ccd9 	.word	0x0800ccd9
 800ccc0:	0800cce1 	.word	0x0800cce1
 800ccc4:	0800cce9 	.word	0x0800cce9
 800ccc8:	0800ccf1 	.word	0x0800ccf1
 800cccc:	0800ccf9 	.word	0x0800ccf9
 800ccd0:	2300      	movs	r3, #0
 800ccd2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ccd6:	e086      	b.n	800cde6 <UART_SetConfig+0x5a6>
 800ccd8:	2304      	movs	r3, #4
 800ccda:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ccde:	e082      	b.n	800cde6 <UART_SetConfig+0x5a6>
 800cce0:	2308      	movs	r3, #8
 800cce2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cce6:	e07e      	b.n	800cde6 <UART_SetConfig+0x5a6>
 800cce8:	2310      	movs	r3, #16
 800ccea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ccee:	e07a      	b.n	800cde6 <UART_SetConfig+0x5a6>
 800ccf0:	2320      	movs	r3, #32
 800ccf2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ccf6:	e076      	b.n	800cde6 <UART_SetConfig+0x5a6>
 800ccf8:	2340      	movs	r3, #64	; 0x40
 800ccfa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ccfe:	e072      	b.n	800cde6 <UART_SetConfig+0x5a6>
 800cd00:	2380      	movs	r3, #128	; 0x80
 800cd02:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cd06:	e06e      	b.n	800cde6 <UART_SetConfig+0x5a6>
 800cd08:	697b      	ldr	r3, [r7, #20]
 800cd0a:	681b      	ldr	r3, [r3, #0]
 800cd0c:	4a75      	ldr	r2, [pc, #468]	; (800cee4 <UART_SetConfig+0x6a4>)
 800cd0e:	4293      	cmp	r3, r2
 800cd10:	d130      	bne.n	800cd74 <UART_SetConfig+0x534>
 800cd12:	4b72      	ldr	r3, [pc, #456]	; (800cedc <UART_SetConfig+0x69c>)
 800cd14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cd16:	f003 0307 	and.w	r3, r3, #7
 800cd1a:	2b05      	cmp	r3, #5
 800cd1c:	d826      	bhi.n	800cd6c <UART_SetConfig+0x52c>
 800cd1e:	a201      	add	r2, pc, #4	; (adr r2, 800cd24 <UART_SetConfig+0x4e4>)
 800cd20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cd24:	0800cd3d 	.word	0x0800cd3d
 800cd28:	0800cd45 	.word	0x0800cd45
 800cd2c:	0800cd4d 	.word	0x0800cd4d
 800cd30:	0800cd55 	.word	0x0800cd55
 800cd34:	0800cd5d 	.word	0x0800cd5d
 800cd38:	0800cd65 	.word	0x0800cd65
 800cd3c:	2300      	movs	r3, #0
 800cd3e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cd42:	e050      	b.n	800cde6 <UART_SetConfig+0x5a6>
 800cd44:	2304      	movs	r3, #4
 800cd46:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cd4a:	e04c      	b.n	800cde6 <UART_SetConfig+0x5a6>
 800cd4c:	2308      	movs	r3, #8
 800cd4e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cd52:	e048      	b.n	800cde6 <UART_SetConfig+0x5a6>
 800cd54:	2310      	movs	r3, #16
 800cd56:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cd5a:	e044      	b.n	800cde6 <UART_SetConfig+0x5a6>
 800cd5c:	2320      	movs	r3, #32
 800cd5e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cd62:	e040      	b.n	800cde6 <UART_SetConfig+0x5a6>
 800cd64:	2340      	movs	r3, #64	; 0x40
 800cd66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cd6a:	e03c      	b.n	800cde6 <UART_SetConfig+0x5a6>
 800cd6c:	2380      	movs	r3, #128	; 0x80
 800cd6e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cd72:	e038      	b.n	800cde6 <UART_SetConfig+0x5a6>
 800cd74:	697b      	ldr	r3, [r7, #20]
 800cd76:	681b      	ldr	r3, [r3, #0]
 800cd78:	4a5b      	ldr	r2, [pc, #364]	; (800cee8 <UART_SetConfig+0x6a8>)
 800cd7a:	4293      	cmp	r3, r2
 800cd7c:	d130      	bne.n	800cde0 <UART_SetConfig+0x5a0>
 800cd7e:	4b57      	ldr	r3, [pc, #348]	; (800cedc <UART_SetConfig+0x69c>)
 800cd80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cd82:	f003 0307 	and.w	r3, r3, #7
 800cd86:	2b05      	cmp	r3, #5
 800cd88:	d826      	bhi.n	800cdd8 <UART_SetConfig+0x598>
 800cd8a:	a201      	add	r2, pc, #4	; (adr r2, 800cd90 <UART_SetConfig+0x550>)
 800cd8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cd90:	0800cda9 	.word	0x0800cda9
 800cd94:	0800cdb1 	.word	0x0800cdb1
 800cd98:	0800cdb9 	.word	0x0800cdb9
 800cd9c:	0800cdc1 	.word	0x0800cdc1
 800cda0:	0800cdc9 	.word	0x0800cdc9
 800cda4:	0800cdd1 	.word	0x0800cdd1
 800cda8:	2302      	movs	r3, #2
 800cdaa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cdae:	e01a      	b.n	800cde6 <UART_SetConfig+0x5a6>
 800cdb0:	2304      	movs	r3, #4
 800cdb2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cdb6:	e016      	b.n	800cde6 <UART_SetConfig+0x5a6>
 800cdb8:	2308      	movs	r3, #8
 800cdba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cdbe:	e012      	b.n	800cde6 <UART_SetConfig+0x5a6>
 800cdc0:	2310      	movs	r3, #16
 800cdc2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cdc6:	e00e      	b.n	800cde6 <UART_SetConfig+0x5a6>
 800cdc8:	2320      	movs	r3, #32
 800cdca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cdce:	e00a      	b.n	800cde6 <UART_SetConfig+0x5a6>
 800cdd0:	2340      	movs	r3, #64	; 0x40
 800cdd2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cdd6:	e006      	b.n	800cde6 <UART_SetConfig+0x5a6>
 800cdd8:	2380      	movs	r3, #128	; 0x80
 800cdda:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cdde:	e002      	b.n	800cde6 <UART_SetConfig+0x5a6>
 800cde0:	2380      	movs	r3, #128	; 0x80
 800cde2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800cde6:	697b      	ldr	r3, [r7, #20]
 800cde8:	681b      	ldr	r3, [r3, #0]
 800cdea:	4a3f      	ldr	r2, [pc, #252]	; (800cee8 <UART_SetConfig+0x6a8>)
 800cdec:	4293      	cmp	r3, r2
 800cdee:	f040 80f8 	bne.w	800cfe2 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800cdf2:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800cdf6:	2b20      	cmp	r3, #32
 800cdf8:	dc46      	bgt.n	800ce88 <UART_SetConfig+0x648>
 800cdfa:	2b02      	cmp	r3, #2
 800cdfc:	f2c0 8082 	blt.w	800cf04 <UART_SetConfig+0x6c4>
 800ce00:	3b02      	subs	r3, #2
 800ce02:	2b1e      	cmp	r3, #30
 800ce04:	d87e      	bhi.n	800cf04 <UART_SetConfig+0x6c4>
 800ce06:	a201      	add	r2, pc, #4	; (adr r2, 800ce0c <UART_SetConfig+0x5cc>)
 800ce08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ce0c:	0800ce8f 	.word	0x0800ce8f
 800ce10:	0800cf05 	.word	0x0800cf05
 800ce14:	0800ce97 	.word	0x0800ce97
 800ce18:	0800cf05 	.word	0x0800cf05
 800ce1c:	0800cf05 	.word	0x0800cf05
 800ce20:	0800cf05 	.word	0x0800cf05
 800ce24:	0800cea7 	.word	0x0800cea7
 800ce28:	0800cf05 	.word	0x0800cf05
 800ce2c:	0800cf05 	.word	0x0800cf05
 800ce30:	0800cf05 	.word	0x0800cf05
 800ce34:	0800cf05 	.word	0x0800cf05
 800ce38:	0800cf05 	.word	0x0800cf05
 800ce3c:	0800cf05 	.word	0x0800cf05
 800ce40:	0800cf05 	.word	0x0800cf05
 800ce44:	0800ceb7 	.word	0x0800ceb7
 800ce48:	0800cf05 	.word	0x0800cf05
 800ce4c:	0800cf05 	.word	0x0800cf05
 800ce50:	0800cf05 	.word	0x0800cf05
 800ce54:	0800cf05 	.word	0x0800cf05
 800ce58:	0800cf05 	.word	0x0800cf05
 800ce5c:	0800cf05 	.word	0x0800cf05
 800ce60:	0800cf05 	.word	0x0800cf05
 800ce64:	0800cf05 	.word	0x0800cf05
 800ce68:	0800cf05 	.word	0x0800cf05
 800ce6c:	0800cf05 	.word	0x0800cf05
 800ce70:	0800cf05 	.word	0x0800cf05
 800ce74:	0800cf05 	.word	0x0800cf05
 800ce78:	0800cf05 	.word	0x0800cf05
 800ce7c:	0800cf05 	.word	0x0800cf05
 800ce80:	0800cf05 	.word	0x0800cf05
 800ce84:	0800cef7 	.word	0x0800cef7
 800ce88:	2b40      	cmp	r3, #64	; 0x40
 800ce8a:	d037      	beq.n	800cefc <UART_SetConfig+0x6bc>
 800ce8c:	e03a      	b.n	800cf04 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800ce8e:	f7fc fc17 	bl	80096c0 <HAL_RCCEx_GetD3PCLK1Freq>
 800ce92:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800ce94:	e03c      	b.n	800cf10 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ce96:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ce9a:	4618      	mov	r0, r3
 800ce9c:	f7fc fc26 	bl	80096ec <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800cea0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cea2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cea4:	e034      	b.n	800cf10 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800cea6:	f107 0318 	add.w	r3, r7, #24
 800ceaa:	4618      	mov	r0, r3
 800ceac:	f7fc fd72 	bl	8009994 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800ceb0:	69fb      	ldr	r3, [r7, #28]
 800ceb2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ceb4:	e02c      	b.n	800cf10 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ceb6:	4b09      	ldr	r3, [pc, #36]	; (800cedc <UART_SetConfig+0x69c>)
 800ceb8:	681b      	ldr	r3, [r3, #0]
 800ceba:	f003 0320 	and.w	r3, r3, #32
 800cebe:	2b00      	cmp	r3, #0
 800cec0:	d016      	beq.n	800cef0 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800cec2:	4b06      	ldr	r3, [pc, #24]	; (800cedc <UART_SetConfig+0x69c>)
 800cec4:	681b      	ldr	r3, [r3, #0]
 800cec6:	08db      	lsrs	r3, r3, #3
 800cec8:	f003 0303 	and.w	r3, r3, #3
 800cecc:	4a07      	ldr	r2, [pc, #28]	; (800ceec <UART_SetConfig+0x6ac>)
 800cece:	fa22 f303 	lsr.w	r3, r2, r3
 800ced2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800ced4:	e01c      	b.n	800cf10 <UART_SetConfig+0x6d0>
 800ced6:	bf00      	nop
 800ced8:	40011400 	.word	0x40011400
 800cedc:	58024400 	.word	0x58024400
 800cee0:	40007800 	.word	0x40007800
 800cee4:	40007c00 	.word	0x40007c00
 800cee8:	58000c00 	.word	0x58000c00
 800ceec:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800cef0:	4b9d      	ldr	r3, [pc, #628]	; (800d168 <UART_SetConfig+0x928>)
 800cef2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cef4:	e00c      	b.n	800cf10 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800cef6:	4b9d      	ldr	r3, [pc, #628]	; (800d16c <UART_SetConfig+0x92c>)
 800cef8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cefa:	e009      	b.n	800cf10 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800cefc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800cf00:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cf02:	e005      	b.n	800cf10 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800cf04:	2300      	movs	r3, #0
 800cf06:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800cf08:	2301      	movs	r3, #1
 800cf0a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800cf0e:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800cf10:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cf12:	2b00      	cmp	r3, #0
 800cf14:	f000 81de 	beq.w	800d2d4 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800cf18:	697b      	ldr	r3, [r7, #20]
 800cf1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cf1c:	4a94      	ldr	r2, [pc, #592]	; (800d170 <UART_SetConfig+0x930>)
 800cf1e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800cf22:	461a      	mov	r2, r3
 800cf24:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cf26:	fbb3 f3f2 	udiv	r3, r3, r2
 800cf2a:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800cf2c:	697b      	ldr	r3, [r7, #20]
 800cf2e:	685a      	ldr	r2, [r3, #4]
 800cf30:	4613      	mov	r3, r2
 800cf32:	005b      	lsls	r3, r3, #1
 800cf34:	4413      	add	r3, r2
 800cf36:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cf38:	429a      	cmp	r2, r3
 800cf3a:	d305      	bcc.n	800cf48 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800cf3c:	697b      	ldr	r3, [r7, #20]
 800cf3e:	685b      	ldr	r3, [r3, #4]
 800cf40:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800cf42:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cf44:	429a      	cmp	r2, r3
 800cf46:	d903      	bls.n	800cf50 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800cf48:	2301      	movs	r3, #1
 800cf4a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800cf4e:	e1c1      	b.n	800d2d4 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800cf50:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cf52:	2200      	movs	r2, #0
 800cf54:	60bb      	str	r3, [r7, #8]
 800cf56:	60fa      	str	r2, [r7, #12]
 800cf58:	697b      	ldr	r3, [r7, #20]
 800cf5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cf5c:	4a84      	ldr	r2, [pc, #528]	; (800d170 <UART_SetConfig+0x930>)
 800cf5e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800cf62:	b29b      	uxth	r3, r3
 800cf64:	2200      	movs	r2, #0
 800cf66:	603b      	str	r3, [r7, #0]
 800cf68:	607a      	str	r2, [r7, #4]
 800cf6a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cf6e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800cf72:	f7f3 fbc9 	bl	8000708 <__aeabi_uldivmod>
 800cf76:	4602      	mov	r2, r0
 800cf78:	460b      	mov	r3, r1
 800cf7a:	4610      	mov	r0, r2
 800cf7c:	4619      	mov	r1, r3
 800cf7e:	f04f 0200 	mov.w	r2, #0
 800cf82:	f04f 0300 	mov.w	r3, #0
 800cf86:	020b      	lsls	r3, r1, #8
 800cf88:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800cf8c:	0202      	lsls	r2, r0, #8
 800cf8e:	6979      	ldr	r1, [r7, #20]
 800cf90:	6849      	ldr	r1, [r1, #4]
 800cf92:	0849      	lsrs	r1, r1, #1
 800cf94:	2000      	movs	r0, #0
 800cf96:	460c      	mov	r4, r1
 800cf98:	4605      	mov	r5, r0
 800cf9a:	eb12 0804 	adds.w	r8, r2, r4
 800cf9e:	eb43 0905 	adc.w	r9, r3, r5
 800cfa2:	697b      	ldr	r3, [r7, #20]
 800cfa4:	685b      	ldr	r3, [r3, #4]
 800cfa6:	2200      	movs	r2, #0
 800cfa8:	469a      	mov	sl, r3
 800cfaa:	4693      	mov	fp, r2
 800cfac:	4652      	mov	r2, sl
 800cfae:	465b      	mov	r3, fp
 800cfb0:	4640      	mov	r0, r8
 800cfb2:	4649      	mov	r1, r9
 800cfb4:	f7f3 fba8 	bl	8000708 <__aeabi_uldivmod>
 800cfb8:	4602      	mov	r2, r0
 800cfba:	460b      	mov	r3, r1
 800cfbc:	4613      	mov	r3, r2
 800cfbe:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800cfc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cfc2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800cfc6:	d308      	bcc.n	800cfda <UART_SetConfig+0x79a>
 800cfc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cfca:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800cfce:	d204      	bcs.n	800cfda <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800cfd0:	697b      	ldr	r3, [r7, #20]
 800cfd2:	681b      	ldr	r3, [r3, #0]
 800cfd4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800cfd6:	60da      	str	r2, [r3, #12]
 800cfd8:	e17c      	b.n	800d2d4 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800cfda:	2301      	movs	r3, #1
 800cfdc:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800cfe0:	e178      	b.n	800d2d4 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800cfe2:	697b      	ldr	r3, [r7, #20]
 800cfe4:	69db      	ldr	r3, [r3, #28]
 800cfe6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800cfea:	f040 80c5 	bne.w	800d178 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800cfee:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800cff2:	2b20      	cmp	r3, #32
 800cff4:	dc48      	bgt.n	800d088 <UART_SetConfig+0x848>
 800cff6:	2b00      	cmp	r3, #0
 800cff8:	db7b      	blt.n	800d0f2 <UART_SetConfig+0x8b2>
 800cffa:	2b20      	cmp	r3, #32
 800cffc:	d879      	bhi.n	800d0f2 <UART_SetConfig+0x8b2>
 800cffe:	a201      	add	r2, pc, #4	; (adr r2, 800d004 <UART_SetConfig+0x7c4>)
 800d000:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d004:	0800d08f 	.word	0x0800d08f
 800d008:	0800d097 	.word	0x0800d097
 800d00c:	0800d0f3 	.word	0x0800d0f3
 800d010:	0800d0f3 	.word	0x0800d0f3
 800d014:	0800d09f 	.word	0x0800d09f
 800d018:	0800d0f3 	.word	0x0800d0f3
 800d01c:	0800d0f3 	.word	0x0800d0f3
 800d020:	0800d0f3 	.word	0x0800d0f3
 800d024:	0800d0af 	.word	0x0800d0af
 800d028:	0800d0f3 	.word	0x0800d0f3
 800d02c:	0800d0f3 	.word	0x0800d0f3
 800d030:	0800d0f3 	.word	0x0800d0f3
 800d034:	0800d0f3 	.word	0x0800d0f3
 800d038:	0800d0f3 	.word	0x0800d0f3
 800d03c:	0800d0f3 	.word	0x0800d0f3
 800d040:	0800d0f3 	.word	0x0800d0f3
 800d044:	0800d0bf 	.word	0x0800d0bf
 800d048:	0800d0f3 	.word	0x0800d0f3
 800d04c:	0800d0f3 	.word	0x0800d0f3
 800d050:	0800d0f3 	.word	0x0800d0f3
 800d054:	0800d0f3 	.word	0x0800d0f3
 800d058:	0800d0f3 	.word	0x0800d0f3
 800d05c:	0800d0f3 	.word	0x0800d0f3
 800d060:	0800d0f3 	.word	0x0800d0f3
 800d064:	0800d0f3 	.word	0x0800d0f3
 800d068:	0800d0f3 	.word	0x0800d0f3
 800d06c:	0800d0f3 	.word	0x0800d0f3
 800d070:	0800d0f3 	.word	0x0800d0f3
 800d074:	0800d0f3 	.word	0x0800d0f3
 800d078:	0800d0f3 	.word	0x0800d0f3
 800d07c:	0800d0f3 	.word	0x0800d0f3
 800d080:	0800d0f3 	.word	0x0800d0f3
 800d084:	0800d0e5 	.word	0x0800d0e5
 800d088:	2b40      	cmp	r3, #64	; 0x40
 800d08a:	d02e      	beq.n	800d0ea <UART_SetConfig+0x8aa>
 800d08c:	e031      	b.n	800d0f2 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800d08e:	f7fb fba5 	bl	80087dc <HAL_RCC_GetPCLK1Freq>
 800d092:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800d094:	e033      	b.n	800d0fe <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800d096:	f7fb fbb7 	bl	8008808 <HAL_RCC_GetPCLK2Freq>
 800d09a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800d09c:	e02f      	b.n	800d0fe <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d09e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800d0a2:	4618      	mov	r0, r3
 800d0a4:	f7fc fb22 	bl	80096ec <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800d0a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d0aa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d0ac:	e027      	b.n	800d0fe <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d0ae:	f107 0318 	add.w	r3, r7, #24
 800d0b2:	4618      	mov	r0, r3
 800d0b4:	f7fc fc6e 	bl	8009994 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800d0b8:	69fb      	ldr	r3, [r7, #28]
 800d0ba:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d0bc:	e01f      	b.n	800d0fe <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d0be:	4b2d      	ldr	r3, [pc, #180]	; (800d174 <UART_SetConfig+0x934>)
 800d0c0:	681b      	ldr	r3, [r3, #0]
 800d0c2:	f003 0320 	and.w	r3, r3, #32
 800d0c6:	2b00      	cmp	r3, #0
 800d0c8:	d009      	beq.n	800d0de <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800d0ca:	4b2a      	ldr	r3, [pc, #168]	; (800d174 <UART_SetConfig+0x934>)
 800d0cc:	681b      	ldr	r3, [r3, #0]
 800d0ce:	08db      	lsrs	r3, r3, #3
 800d0d0:	f003 0303 	and.w	r3, r3, #3
 800d0d4:	4a24      	ldr	r2, [pc, #144]	; (800d168 <UART_SetConfig+0x928>)
 800d0d6:	fa22 f303 	lsr.w	r3, r2, r3
 800d0da:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800d0dc:	e00f      	b.n	800d0fe <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800d0de:	4b22      	ldr	r3, [pc, #136]	; (800d168 <UART_SetConfig+0x928>)
 800d0e0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d0e2:	e00c      	b.n	800d0fe <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800d0e4:	4b21      	ldr	r3, [pc, #132]	; (800d16c <UART_SetConfig+0x92c>)
 800d0e6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d0e8:	e009      	b.n	800d0fe <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d0ea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800d0ee:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d0f0:	e005      	b.n	800d0fe <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800d0f2:	2300      	movs	r3, #0
 800d0f4:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800d0f6:	2301      	movs	r3, #1
 800d0f8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800d0fc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800d0fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d100:	2b00      	cmp	r3, #0
 800d102:	f000 80e7 	beq.w	800d2d4 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d106:	697b      	ldr	r3, [r7, #20]
 800d108:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d10a:	4a19      	ldr	r2, [pc, #100]	; (800d170 <UART_SetConfig+0x930>)
 800d10c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d110:	461a      	mov	r2, r3
 800d112:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d114:	fbb3 f3f2 	udiv	r3, r3, r2
 800d118:	005a      	lsls	r2, r3, #1
 800d11a:	697b      	ldr	r3, [r7, #20]
 800d11c:	685b      	ldr	r3, [r3, #4]
 800d11e:	085b      	lsrs	r3, r3, #1
 800d120:	441a      	add	r2, r3
 800d122:	697b      	ldr	r3, [r7, #20]
 800d124:	685b      	ldr	r3, [r3, #4]
 800d126:	fbb2 f3f3 	udiv	r3, r2, r3
 800d12a:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800d12c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d12e:	2b0f      	cmp	r3, #15
 800d130:	d916      	bls.n	800d160 <UART_SetConfig+0x920>
 800d132:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d134:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d138:	d212      	bcs.n	800d160 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800d13a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d13c:	b29b      	uxth	r3, r3
 800d13e:	f023 030f 	bic.w	r3, r3, #15
 800d142:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800d144:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d146:	085b      	lsrs	r3, r3, #1
 800d148:	b29b      	uxth	r3, r3
 800d14a:	f003 0307 	and.w	r3, r3, #7
 800d14e:	b29a      	uxth	r2, r3
 800d150:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800d152:	4313      	orrs	r3, r2
 800d154:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800d156:	697b      	ldr	r3, [r7, #20]
 800d158:	681b      	ldr	r3, [r3, #0]
 800d15a:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800d15c:	60da      	str	r2, [r3, #12]
 800d15e:	e0b9      	b.n	800d2d4 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800d160:	2301      	movs	r3, #1
 800d162:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800d166:	e0b5      	b.n	800d2d4 <UART_SetConfig+0xa94>
 800d168:	03d09000 	.word	0x03d09000
 800d16c:	003d0900 	.word	0x003d0900
 800d170:	080121f4 	.word	0x080121f4
 800d174:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800d178:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800d17c:	2b20      	cmp	r3, #32
 800d17e:	dc49      	bgt.n	800d214 <UART_SetConfig+0x9d4>
 800d180:	2b00      	cmp	r3, #0
 800d182:	db7c      	blt.n	800d27e <UART_SetConfig+0xa3e>
 800d184:	2b20      	cmp	r3, #32
 800d186:	d87a      	bhi.n	800d27e <UART_SetConfig+0xa3e>
 800d188:	a201      	add	r2, pc, #4	; (adr r2, 800d190 <UART_SetConfig+0x950>)
 800d18a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d18e:	bf00      	nop
 800d190:	0800d21b 	.word	0x0800d21b
 800d194:	0800d223 	.word	0x0800d223
 800d198:	0800d27f 	.word	0x0800d27f
 800d19c:	0800d27f 	.word	0x0800d27f
 800d1a0:	0800d22b 	.word	0x0800d22b
 800d1a4:	0800d27f 	.word	0x0800d27f
 800d1a8:	0800d27f 	.word	0x0800d27f
 800d1ac:	0800d27f 	.word	0x0800d27f
 800d1b0:	0800d23b 	.word	0x0800d23b
 800d1b4:	0800d27f 	.word	0x0800d27f
 800d1b8:	0800d27f 	.word	0x0800d27f
 800d1bc:	0800d27f 	.word	0x0800d27f
 800d1c0:	0800d27f 	.word	0x0800d27f
 800d1c4:	0800d27f 	.word	0x0800d27f
 800d1c8:	0800d27f 	.word	0x0800d27f
 800d1cc:	0800d27f 	.word	0x0800d27f
 800d1d0:	0800d24b 	.word	0x0800d24b
 800d1d4:	0800d27f 	.word	0x0800d27f
 800d1d8:	0800d27f 	.word	0x0800d27f
 800d1dc:	0800d27f 	.word	0x0800d27f
 800d1e0:	0800d27f 	.word	0x0800d27f
 800d1e4:	0800d27f 	.word	0x0800d27f
 800d1e8:	0800d27f 	.word	0x0800d27f
 800d1ec:	0800d27f 	.word	0x0800d27f
 800d1f0:	0800d27f 	.word	0x0800d27f
 800d1f4:	0800d27f 	.word	0x0800d27f
 800d1f8:	0800d27f 	.word	0x0800d27f
 800d1fc:	0800d27f 	.word	0x0800d27f
 800d200:	0800d27f 	.word	0x0800d27f
 800d204:	0800d27f 	.word	0x0800d27f
 800d208:	0800d27f 	.word	0x0800d27f
 800d20c:	0800d27f 	.word	0x0800d27f
 800d210:	0800d271 	.word	0x0800d271
 800d214:	2b40      	cmp	r3, #64	; 0x40
 800d216:	d02e      	beq.n	800d276 <UART_SetConfig+0xa36>
 800d218:	e031      	b.n	800d27e <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800d21a:	f7fb fadf 	bl	80087dc <HAL_RCC_GetPCLK1Freq>
 800d21e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800d220:	e033      	b.n	800d28a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800d222:	f7fb faf1 	bl	8008808 <HAL_RCC_GetPCLK2Freq>
 800d226:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800d228:	e02f      	b.n	800d28a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d22a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800d22e:	4618      	mov	r0, r3
 800d230:	f7fc fa5c 	bl	80096ec <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800d234:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d236:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d238:	e027      	b.n	800d28a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d23a:	f107 0318 	add.w	r3, r7, #24
 800d23e:	4618      	mov	r0, r3
 800d240:	f7fc fba8 	bl	8009994 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800d244:	69fb      	ldr	r3, [r7, #28]
 800d246:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d248:	e01f      	b.n	800d28a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d24a:	4b2d      	ldr	r3, [pc, #180]	; (800d300 <UART_SetConfig+0xac0>)
 800d24c:	681b      	ldr	r3, [r3, #0]
 800d24e:	f003 0320 	and.w	r3, r3, #32
 800d252:	2b00      	cmp	r3, #0
 800d254:	d009      	beq.n	800d26a <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800d256:	4b2a      	ldr	r3, [pc, #168]	; (800d300 <UART_SetConfig+0xac0>)
 800d258:	681b      	ldr	r3, [r3, #0]
 800d25a:	08db      	lsrs	r3, r3, #3
 800d25c:	f003 0303 	and.w	r3, r3, #3
 800d260:	4a28      	ldr	r2, [pc, #160]	; (800d304 <UART_SetConfig+0xac4>)
 800d262:	fa22 f303 	lsr.w	r3, r2, r3
 800d266:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800d268:	e00f      	b.n	800d28a <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800d26a:	4b26      	ldr	r3, [pc, #152]	; (800d304 <UART_SetConfig+0xac4>)
 800d26c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d26e:	e00c      	b.n	800d28a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800d270:	4b25      	ldr	r3, [pc, #148]	; (800d308 <UART_SetConfig+0xac8>)
 800d272:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d274:	e009      	b.n	800d28a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d276:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800d27a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d27c:	e005      	b.n	800d28a <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800d27e:	2300      	movs	r3, #0
 800d280:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800d282:	2301      	movs	r3, #1
 800d284:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800d288:	bf00      	nop
    }

    if (pclk != 0U)
 800d28a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d28c:	2b00      	cmp	r3, #0
 800d28e:	d021      	beq.n	800d2d4 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d290:	697b      	ldr	r3, [r7, #20]
 800d292:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d294:	4a1d      	ldr	r2, [pc, #116]	; (800d30c <UART_SetConfig+0xacc>)
 800d296:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d29a:	461a      	mov	r2, r3
 800d29c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d29e:	fbb3 f2f2 	udiv	r2, r3, r2
 800d2a2:	697b      	ldr	r3, [r7, #20]
 800d2a4:	685b      	ldr	r3, [r3, #4]
 800d2a6:	085b      	lsrs	r3, r3, #1
 800d2a8:	441a      	add	r2, r3
 800d2aa:	697b      	ldr	r3, [r7, #20]
 800d2ac:	685b      	ldr	r3, [r3, #4]
 800d2ae:	fbb2 f3f3 	udiv	r3, r2, r3
 800d2b2:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800d2b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d2b6:	2b0f      	cmp	r3, #15
 800d2b8:	d909      	bls.n	800d2ce <UART_SetConfig+0xa8e>
 800d2ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d2bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d2c0:	d205      	bcs.n	800d2ce <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800d2c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d2c4:	b29a      	uxth	r2, r3
 800d2c6:	697b      	ldr	r3, [r7, #20]
 800d2c8:	681b      	ldr	r3, [r3, #0]
 800d2ca:	60da      	str	r2, [r3, #12]
 800d2cc:	e002      	b.n	800d2d4 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800d2ce:	2301      	movs	r3, #1
 800d2d0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800d2d4:	697b      	ldr	r3, [r7, #20]
 800d2d6:	2201      	movs	r2, #1
 800d2d8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800d2dc:	697b      	ldr	r3, [r7, #20]
 800d2de:	2201      	movs	r2, #1
 800d2e0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800d2e4:	697b      	ldr	r3, [r7, #20]
 800d2e6:	2200      	movs	r2, #0
 800d2e8:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800d2ea:	697b      	ldr	r3, [r7, #20]
 800d2ec:	2200      	movs	r2, #0
 800d2ee:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800d2f0:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800d2f4:	4618      	mov	r0, r3
 800d2f6:	3748      	adds	r7, #72	; 0x48
 800d2f8:	46bd      	mov	sp, r7
 800d2fa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800d2fe:	bf00      	nop
 800d300:	58024400 	.word	0x58024400
 800d304:	03d09000 	.word	0x03d09000
 800d308:	003d0900 	.word	0x003d0900
 800d30c:	080121f4 	.word	0x080121f4

0800d310 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800d310:	b480      	push	{r7}
 800d312:	b083      	sub	sp, #12
 800d314:	af00      	add	r7, sp, #0
 800d316:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800d318:	687b      	ldr	r3, [r7, #4]
 800d31a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d31c:	f003 0301 	and.w	r3, r3, #1
 800d320:	2b00      	cmp	r3, #0
 800d322:	d00a      	beq.n	800d33a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800d324:	687b      	ldr	r3, [r7, #4]
 800d326:	681b      	ldr	r3, [r3, #0]
 800d328:	685b      	ldr	r3, [r3, #4]
 800d32a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800d32e:	687b      	ldr	r3, [r7, #4]
 800d330:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d332:	687b      	ldr	r3, [r7, #4]
 800d334:	681b      	ldr	r3, [r3, #0]
 800d336:	430a      	orrs	r2, r1
 800d338:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800d33a:	687b      	ldr	r3, [r7, #4]
 800d33c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d33e:	f003 0302 	and.w	r3, r3, #2
 800d342:	2b00      	cmp	r3, #0
 800d344:	d00a      	beq.n	800d35c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800d346:	687b      	ldr	r3, [r7, #4]
 800d348:	681b      	ldr	r3, [r3, #0]
 800d34a:	685b      	ldr	r3, [r3, #4]
 800d34c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800d350:	687b      	ldr	r3, [r7, #4]
 800d352:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d354:	687b      	ldr	r3, [r7, #4]
 800d356:	681b      	ldr	r3, [r3, #0]
 800d358:	430a      	orrs	r2, r1
 800d35a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800d35c:	687b      	ldr	r3, [r7, #4]
 800d35e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d360:	f003 0304 	and.w	r3, r3, #4
 800d364:	2b00      	cmp	r3, #0
 800d366:	d00a      	beq.n	800d37e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800d368:	687b      	ldr	r3, [r7, #4]
 800d36a:	681b      	ldr	r3, [r3, #0]
 800d36c:	685b      	ldr	r3, [r3, #4]
 800d36e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800d372:	687b      	ldr	r3, [r7, #4]
 800d374:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d376:	687b      	ldr	r3, [r7, #4]
 800d378:	681b      	ldr	r3, [r3, #0]
 800d37a:	430a      	orrs	r2, r1
 800d37c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800d37e:	687b      	ldr	r3, [r7, #4]
 800d380:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d382:	f003 0308 	and.w	r3, r3, #8
 800d386:	2b00      	cmp	r3, #0
 800d388:	d00a      	beq.n	800d3a0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800d38a:	687b      	ldr	r3, [r7, #4]
 800d38c:	681b      	ldr	r3, [r3, #0]
 800d38e:	685b      	ldr	r3, [r3, #4]
 800d390:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800d394:	687b      	ldr	r3, [r7, #4]
 800d396:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d398:	687b      	ldr	r3, [r7, #4]
 800d39a:	681b      	ldr	r3, [r3, #0]
 800d39c:	430a      	orrs	r2, r1
 800d39e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800d3a0:	687b      	ldr	r3, [r7, #4]
 800d3a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d3a4:	f003 0310 	and.w	r3, r3, #16
 800d3a8:	2b00      	cmp	r3, #0
 800d3aa:	d00a      	beq.n	800d3c2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800d3ac:	687b      	ldr	r3, [r7, #4]
 800d3ae:	681b      	ldr	r3, [r3, #0]
 800d3b0:	689b      	ldr	r3, [r3, #8]
 800d3b2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800d3b6:	687b      	ldr	r3, [r7, #4]
 800d3b8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d3ba:	687b      	ldr	r3, [r7, #4]
 800d3bc:	681b      	ldr	r3, [r3, #0]
 800d3be:	430a      	orrs	r2, r1
 800d3c0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800d3c2:	687b      	ldr	r3, [r7, #4]
 800d3c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d3c6:	f003 0320 	and.w	r3, r3, #32
 800d3ca:	2b00      	cmp	r3, #0
 800d3cc:	d00a      	beq.n	800d3e4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800d3ce:	687b      	ldr	r3, [r7, #4]
 800d3d0:	681b      	ldr	r3, [r3, #0]
 800d3d2:	689b      	ldr	r3, [r3, #8]
 800d3d4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800d3d8:	687b      	ldr	r3, [r7, #4]
 800d3da:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800d3dc:	687b      	ldr	r3, [r7, #4]
 800d3de:	681b      	ldr	r3, [r3, #0]
 800d3e0:	430a      	orrs	r2, r1
 800d3e2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800d3e4:	687b      	ldr	r3, [r7, #4]
 800d3e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d3e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d3ec:	2b00      	cmp	r3, #0
 800d3ee:	d01a      	beq.n	800d426 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800d3f0:	687b      	ldr	r3, [r7, #4]
 800d3f2:	681b      	ldr	r3, [r3, #0]
 800d3f4:	685b      	ldr	r3, [r3, #4]
 800d3f6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800d3fa:	687b      	ldr	r3, [r7, #4]
 800d3fc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d3fe:	687b      	ldr	r3, [r7, #4]
 800d400:	681b      	ldr	r3, [r3, #0]
 800d402:	430a      	orrs	r2, r1
 800d404:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800d406:	687b      	ldr	r3, [r7, #4]
 800d408:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d40a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d40e:	d10a      	bne.n	800d426 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800d410:	687b      	ldr	r3, [r7, #4]
 800d412:	681b      	ldr	r3, [r3, #0]
 800d414:	685b      	ldr	r3, [r3, #4]
 800d416:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800d41a:	687b      	ldr	r3, [r7, #4]
 800d41c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800d41e:	687b      	ldr	r3, [r7, #4]
 800d420:	681b      	ldr	r3, [r3, #0]
 800d422:	430a      	orrs	r2, r1
 800d424:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800d426:	687b      	ldr	r3, [r7, #4]
 800d428:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d42a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d42e:	2b00      	cmp	r3, #0
 800d430:	d00a      	beq.n	800d448 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800d432:	687b      	ldr	r3, [r7, #4]
 800d434:	681b      	ldr	r3, [r3, #0]
 800d436:	685b      	ldr	r3, [r3, #4]
 800d438:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800d43c:	687b      	ldr	r3, [r7, #4]
 800d43e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800d440:	687b      	ldr	r3, [r7, #4]
 800d442:	681b      	ldr	r3, [r3, #0]
 800d444:	430a      	orrs	r2, r1
 800d446:	605a      	str	r2, [r3, #4]
  }
}
 800d448:	bf00      	nop
 800d44a:	370c      	adds	r7, #12
 800d44c:	46bd      	mov	sp, r7
 800d44e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d452:	4770      	bx	lr

0800d454 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800d454:	b580      	push	{r7, lr}
 800d456:	b086      	sub	sp, #24
 800d458:	af02      	add	r7, sp, #8
 800d45a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d45c:	687b      	ldr	r3, [r7, #4]
 800d45e:	2200      	movs	r2, #0
 800d460:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800d464:	f7f9 f914 	bl	8006690 <HAL_GetTick>
 800d468:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800d46a:	687b      	ldr	r3, [r7, #4]
 800d46c:	681b      	ldr	r3, [r3, #0]
 800d46e:	681b      	ldr	r3, [r3, #0]
 800d470:	f003 0308 	and.w	r3, r3, #8
 800d474:	2b08      	cmp	r3, #8
 800d476:	d10e      	bne.n	800d496 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800d478:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800d47c:	9300      	str	r3, [sp, #0]
 800d47e:	68fb      	ldr	r3, [r7, #12]
 800d480:	2200      	movs	r2, #0
 800d482:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800d486:	6878      	ldr	r0, [r7, #4]
 800d488:	f000 f82f 	bl	800d4ea <UART_WaitOnFlagUntilTimeout>
 800d48c:	4603      	mov	r3, r0
 800d48e:	2b00      	cmp	r3, #0
 800d490:	d001      	beq.n	800d496 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800d492:	2303      	movs	r3, #3
 800d494:	e025      	b.n	800d4e2 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800d496:	687b      	ldr	r3, [r7, #4]
 800d498:	681b      	ldr	r3, [r3, #0]
 800d49a:	681b      	ldr	r3, [r3, #0]
 800d49c:	f003 0304 	and.w	r3, r3, #4
 800d4a0:	2b04      	cmp	r3, #4
 800d4a2:	d10e      	bne.n	800d4c2 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800d4a4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800d4a8:	9300      	str	r3, [sp, #0]
 800d4aa:	68fb      	ldr	r3, [r7, #12]
 800d4ac:	2200      	movs	r2, #0
 800d4ae:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800d4b2:	6878      	ldr	r0, [r7, #4]
 800d4b4:	f000 f819 	bl	800d4ea <UART_WaitOnFlagUntilTimeout>
 800d4b8:	4603      	mov	r3, r0
 800d4ba:	2b00      	cmp	r3, #0
 800d4bc:	d001      	beq.n	800d4c2 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800d4be:	2303      	movs	r3, #3
 800d4c0:	e00f      	b.n	800d4e2 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800d4c2:	687b      	ldr	r3, [r7, #4]
 800d4c4:	2220      	movs	r2, #32
 800d4c6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800d4ca:	687b      	ldr	r3, [r7, #4]
 800d4cc:	2220      	movs	r2, #32
 800d4ce:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d4d2:	687b      	ldr	r3, [r7, #4]
 800d4d4:	2200      	movs	r2, #0
 800d4d6:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800d4d8:	687b      	ldr	r3, [r7, #4]
 800d4da:	2200      	movs	r2, #0
 800d4dc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800d4e0:	2300      	movs	r3, #0
}
 800d4e2:	4618      	mov	r0, r3
 800d4e4:	3710      	adds	r7, #16
 800d4e6:	46bd      	mov	sp, r7
 800d4e8:	bd80      	pop	{r7, pc}

0800d4ea <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800d4ea:	b580      	push	{r7, lr}
 800d4ec:	b09c      	sub	sp, #112	; 0x70
 800d4ee:	af00      	add	r7, sp, #0
 800d4f0:	60f8      	str	r0, [r7, #12]
 800d4f2:	60b9      	str	r1, [r7, #8]
 800d4f4:	603b      	str	r3, [r7, #0]
 800d4f6:	4613      	mov	r3, r2
 800d4f8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d4fa:	e0a9      	b.n	800d650 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800d4fc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d4fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d502:	f000 80a5 	beq.w	800d650 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d506:	f7f9 f8c3 	bl	8006690 <HAL_GetTick>
 800d50a:	4602      	mov	r2, r0
 800d50c:	683b      	ldr	r3, [r7, #0]
 800d50e:	1ad3      	subs	r3, r2, r3
 800d510:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800d512:	429a      	cmp	r2, r3
 800d514:	d302      	bcc.n	800d51c <UART_WaitOnFlagUntilTimeout+0x32>
 800d516:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d518:	2b00      	cmp	r3, #0
 800d51a:	d140      	bne.n	800d59e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800d51c:	68fb      	ldr	r3, [r7, #12]
 800d51e:	681b      	ldr	r3, [r3, #0]
 800d520:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d522:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d524:	e853 3f00 	ldrex	r3, [r3]
 800d528:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800d52a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d52c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800d530:	667b      	str	r3, [r7, #100]	; 0x64
 800d532:	68fb      	ldr	r3, [r7, #12]
 800d534:	681b      	ldr	r3, [r3, #0]
 800d536:	461a      	mov	r2, r3
 800d538:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d53a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800d53c:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d53e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800d540:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800d542:	e841 2300 	strex	r3, r2, [r1]
 800d546:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800d548:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d54a:	2b00      	cmp	r3, #0
 800d54c:	d1e6      	bne.n	800d51c <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d54e:	68fb      	ldr	r3, [r7, #12]
 800d550:	681b      	ldr	r3, [r3, #0]
 800d552:	3308      	adds	r3, #8
 800d554:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d556:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d558:	e853 3f00 	ldrex	r3, [r3]
 800d55c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800d55e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d560:	f023 0301 	bic.w	r3, r3, #1
 800d564:	663b      	str	r3, [r7, #96]	; 0x60
 800d566:	68fb      	ldr	r3, [r7, #12]
 800d568:	681b      	ldr	r3, [r3, #0]
 800d56a:	3308      	adds	r3, #8
 800d56c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800d56e:	64ba      	str	r2, [r7, #72]	; 0x48
 800d570:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d572:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800d574:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d576:	e841 2300 	strex	r3, r2, [r1]
 800d57a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800d57c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d57e:	2b00      	cmp	r3, #0
 800d580:	d1e5      	bne.n	800d54e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800d582:	68fb      	ldr	r3, [r7, #12]
 800d584:	2220      	movs	r2, #32
 800d586:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800d58a:	68fb      	ldr	r3, [r7, #12]
 800d58c:	2220      	movs	r2, #32
 800d58e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800d592:	68fb      	ldr	r3, [r7, #12]
 800d594:	2200      	movs	r2, #0
 800d596:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800d59a:	2303      	movs	r3, #3
 800d59c:	e069      	b.n	800d672 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800d59e:	68fb      	ldr	r3, [r7, #12]
 800d5a0:	681b      	ldr	r3, [r3, #0]
 800d5a2:	681b      	ldr	r3, [r3, #0]
 800d5a4:	f003 0304 	and.w	r3, r3, #4
 800d5a8:	2b00      	cmp	r3, #0
 800d5aa:	d051      	beq.n	800d650 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800d5ac:	68fb      	ldr	r3, [r7, #12]
 800d5ae:	681b      	ldr	r3, [r3, #0]
 800d5b0:	69db      	ldr	r3, [r3, #28]
 800d5b2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800d5b6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800d5ba:	d149      	bne.n	800d650 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800d5bc:	68fb      	ldr	r3, [r7, #12]
 800d5be:	681b      	ldr	r3, [r3, #0]
 800d5c0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800d5c4:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800d5c6:	68fb      	ldr	r3, [r7, #12]
 800d5c8:	681b      	ldr	r3, [r3, #0]
 800d5ca:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d5cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d5ce:	e853 3f00 	ldrex	r3, [r3]
 800d5d2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800d5d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d5d6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800d5da:	66fb      	str	r3, [r7, #108]	; 0x6c
 800d5dc:	68fb      	ldr	r3, [r7, #12]
 800d5de:	681b      	ldr	r3, [r3, #0]
 800d5e0:	461a      	mov	r2, r3
 800d5e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d5e4:	637b      	str	r3, [r7, #52]	; 0x34
 800d5e6:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d5e8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800d5ea:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d5ec:	e841 2300 	strex	r3, r2, [r1]
 800d5f0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800d5f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d5f4:	2b00      	cmp	r3, #0
 800d5f6:	d1e6      	bne.n	800d5c6 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d5f8:	68fb      	ldr	r3, [r7, #12]
 800d5fa:	681b      	ldr	r3, [r3, #0]
 800d5fc:	3308      	adds	r3, #8
 800d5fe:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d600:	697b      	ldr	r3, [r7, #20]
 800d602:	e853 3f00 	ldrex	r3, [r3]
 800d606:	613b      	str	r3, [r7, #16]
   return(result);
 800d608:	693b      	ldr	r3, [r7, #16]
 800d60a:	f023 0301 	bic.w	r3, r3, #1
 800d60e:	66bb      	str	r3, [r7, #104]	; 0x68
 800d610:	68fb      	ldr	r3, [r7, #12]
 800d612:	681b      	ldr	r3, [r3, #0]
 800d614:	3308      	adds	r3, #8
 800d616:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800d618:	623a      	str	r2, [r7, #32]
 800d61a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d61c:	69f9      	ldr	r1, [r7, #28]
 800d61e:	6a3a      	ldr	r2, [r7, #32]
 800d620:	e841 2300 	strex	r3, r2, [r1]
 800d624:	61bb      	str	r3, [r7, #24]
   return(result);
 800d626:	69bb      	ldr	r3, [r7, #24]
 800d628:	2b00      	cmp	r3, #0
 800d62a:	d1e5      	bne.n	800d5f8 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800d62c:	68fb      	ldr	r3, [r7, #12]
 800d62e:	2220      	movs	r2, #32
 800d630:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800d634:	68fb      	ldr	r3, [r7, #12]
 800d636:	2220      	movs	r2, #32
 800d638:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800d63c:	68fb      	ldr	r3, [r7, #12]
 800d63e:	2220      	movs	r2, #32
 800d640:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800d644:	68fb      	ldr	r3, [r7, #12]
 800d646:	2200      	movs	r2, #0
 800d648:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800d64c:	2303      	movs	r3, #3
 800d64e:	e010      	b.n	800d672 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d650:	68fb      	ldr	r3, [r7, #12]
 800d652:	681b      	ldr	r3, [r3, #0]
 800d654:	69da      	ldr	r2, [r3, #28]
 800d656:	68bb      	ldr	r3, [r7, #8]
 800d658:	4013      	ands	r3, r2
 800d65a:	68ba      	ldr	r2, [r7, #8]
 800d65c:	429a      	cmp	r2, r3
 800d65e:	bf0c      	ite	eq
 800d660:	2301      	moveq	r3, #1
 800d662:	2300      	movne	r3, #0
 800d664:	b2db      	uxtb	r3, r3
 800d666:	461a      	mov	r2, r3
 800d668:	79fb      	ldrb	r3, [r7, #7]
 800d66a:	429a      	cmp	r2, r3
 800d66c:	f43f af46 	beq.w	800d4fc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800d670:	2300      	movs	r3, #0
}
 800d672:	4618      	mov	r0, r3
 800d674:	3770      	adds	r7, #112	; 0x70
 800d676:	46bd      	mov	sp, r7
 800d678:	bd80      	pop	{r7, pc}
	...

0800d67c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800d67c:	b480      	push	{r7}
 800d67e:	b0a3      	sub	sp, #140	; 0x8c
 800d680:	af00      	add	r7, sp, #0
 800d682:	60f8      	str	r0, [r7, #12]
 800d684:	60b9      	str	r1, [r7, #8]
 800d686:	4613      	mov	r3, r2
 800d688:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800d68a:	68fb      	ldr	r3, [r7, #12]
 800d68c:	68ba      	ldr	r2, [r7, #8]
 800d68e:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 800d690:	68fb      	ldr	r3, [r7, #12]
 800d692:	88fa      	ldrh	r2, [r7, #6]
 800d694:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 800d698:	68fb      	ldr	r3, [r7, #12]
 800d69a:	88fa      	ldrh	r2, [r7, #6]
 800d69c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 800d6a0:	68fb      	ldr	r3, [r7, #12]
 800d6a2:	2200      	movs	r2, #0
 800d6a4:	671a      	str	r2, [r3, #112]	; 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800d6a6:	68fb      	ldr	r3, [r7, #12]
 800d6a8:	689b      	ldr	r3, [r3, #8]
 800d6aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d6ae:	d10e      	bne.n	800d6ce <UART_Start_Receive_IT+0x52>
 800d6b0:	68fb      	ldr	r3, [r7, #12]
 800d6b2:	691b      	ldr	r3, [r3, #16]
 800d6b4:	2b00      	cmp	r3, #0
 800d6b6:	d105      	bne.n	800d6c4 <UART_Start_Receive_IT+0x48>
 800d6b8:	68fb      	ldr	r3, [r7, #12]
 800d6ba:	f240 12ff 	movw	r2, #511	; 0x1ff
 800d6be:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800d6c2:	e02d      	b.n	800d720 <UART_Start_Receive_IT+0xa4>
 800d6c4:	68fb      	ldr	r3, [r7, #12]
 800d6c6:	22ff      	movs	r2, #255	; 0xff
 800d6c8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800d6cc:	e028      	b.n	800d720 <UART_Start_Receive_IT+0xa4>
 800d6ce:	68fb      	ldr	r3, [r7, #12]
 800d6d0:	689b      	ldr	r3, [r3, #8]
 800d6d2:	2b00      	cmp	r3, #0
 800d6d4:	d10d      	bne.n	800d6f2 <UART_Start_Receive_IT+0x76>
 800d6d6:	68fb      	ldr	r3, [r7, #12]
 800d6d8:	691b      	ldr	r3, [r3, #16]
 800d6da:	2b00      	cmp	r3, #0
 800d6dc:	d104      	bne.n	800d6e8 <UART_Start_Receive_IT+0x6c>
 800d6de:	68fb      	ldr	r3, [r7, #12]
 800d6e0:	22ff      	movs	r2, #255	; 0xff
 800d6e2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800d6e6:	e01b      	b.n	800d720 <UART_Start_Receive_IT+0xa4>
 800d6e8:	68fb      	ldr	r3, [r7, #12]
 800d6ea:	227f      	movs	r2, #127	; 0x7f
 800d6ec:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800d6f0:	e016      	b.n	800d720 <UART_Start_Receive_IT+0xa4>
 800d6f2:	68fb      	ldr	r3, [r7, #12]
 800d6f4:	689b      	ldr	r3, [r3, #8]
 800d6f6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800d6fa:	d10d      	bne.n	800d718 <UART_Start_Receive_IT+0x9c>
 800d6fc:	68fb      	ldr	r3, [r7, #12]
 800d6fe:	691b      	ldr	r3, [r3, #16]
 800d700:	2b00      	cmp	r3, #0
 800d702:	d104      	bne.n	800d70e <UART_Start_Receive_IT+0x92>
 800d704:	68fb      	ldr	r3, [r7, #12]
 800d706:	227f      	movs	r2, #127	; 0x7f
 800d708:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800d70c:	e008      	b.n	800d720 <UART_Start_Receive_IT+0xa4>
 800d70e:	68fb      	ldr	r3, [r7, #12]
 800d710:	223f      	movs	r2, #63	; 0x3f
 800d712:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800d716:	e003      	b.n	800d720 <UART_Start_Receive_IT+0xa4>
 800d718:	68fb      	ldr	r3, [r7, #12]
 800d71a:	2200      	movs	r2, #0
 800d71c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d720:	68fb      	ldr	r3, [r7, #12]
 800d722:	2200      	movs	r2, #0
 800d724:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800d728:	68fb      	ldr	r3, [r7, #12]
 800d72a:	2222      	movs	r2, #34	; 0x22
 800d72c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d730:	68fb      	ldr	r3, [r7, #12]
 800d732:	681b      	ldr	r3, [r3, #0]
 800d734:	3308      	adds	r3, #8
 800d736:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d738:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d73a:	e853 3f00 	ldrex	r3, [r3]
 800d73e:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 800d740:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d742:	f043 0301 	orr.w	r3, r3, #1
 800d746:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800d74a:	68fb      	ldr	r3, [r7, #12]
 800d74c:	681b      	ldr	r3, [r3, #0]
 800d74e:	3308      	adds	r3, #8
 800d750:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800d754:	673a      	str	r2, [r7, #112]	; 0x70
 800d756:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d758:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800d75a:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800d75c:	e841 2300 	strex	r3, r2, [r1]
 800d760:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 800d762:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800d764:	2b00      	cmp	r3, #0
 800d766:	d1e3      	bne.n	800d730 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800d768:	68fb      	ldr	r3, [r7, #12]
 800d76a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d76c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800d770:	d153      	bne.n	800d81a <UART_Start_Receive_IT+0x19e>
 800d772:	68fb      	ldr	r3, [r7, #12]
 800d774:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800d778:	88fa      	ldrh	r2, [r7, #6]
 800d77a:	429a      	cmp	r2, r3
 800d77c:	d34d      	bcc.n	800d81a <UART_Start_Receive_IT+0x19e>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800d77e:	68fb      	ldr	r3, [r7, #12]
 800d780:	689b      	ldr	r3, [r3, #8]
 800d782:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d786:	d107      	bne.n	800d798 <UART_Start_Receive_IT+0x11c>
 800d788:	68fb      	ldr	r3, [r7, #12]
 800d78a:	691b      	ldr	r3, [r3, #16]
 800d78c:	2b00      	cmp	r3, #0
 800d78e:	d103      	bne.n	800d798 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800d790:	68fb      	ldr	r3, [r7, #12]
 800d792:	4a4b      	ldr	r2, [pc, #300]	; (800d8c0 <UART_Start_Receive_IT+0x244>)
 800d794:	671a      	str	r2, [r3, #112]	; 0x70
 800d796:	e002      	b.n	800d79e <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800d798:	68fb      	ldr	r3, [r7, #12]
 800d79a:	4a4a      	ldr	r2, [pc, #296]	; (800d8c4 <UART_Start_Receive_IT+0x248>)
 800d79c:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 800d79e:	68fb      	ldr	r3, [r7, #12]
 800d7a0:	2200      	movs	r2, #0
 800d7a2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800d7a6:	68fb      	ldr	r3, [r7, #12]
 800d7a8:	691b      	ldr	r3, [r3, #16]
 800d7aa:	2b00      	cmp	r3, #0
 800d7ac:	d01a      	beq.n	800d7e4 <UART_Start_Receive_IT+0x168>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800d7ae:	68fb      	ldr	r3, [r7, #12]
 800d7b0:	681b      	ldr	r3, [r3, #0]
 800d7b2:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d7b4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d7b6:	e853 3f00 	ldrex	r3, [r3]
 800d7ba:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800d7bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d7be:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d7c2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800d7c6:	68fb      	ldr	r3, [r7, #12]
 800d7c8:	681b      	ldr	r3, [r3, #0]
 800d7ca:	461a      	mov	r2, r3
 800d7cc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800d7d0:	65fb      	str	r3, [r7, #92]	; 0x5c
 800d7d2:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d7d4:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800d7d6:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800d7d8:	e841 2300 	strex	r3, r2, [r1]
 800d7dc:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800d7de:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d7e0:	2b00      	cmp	r3, #0
 800d7e2:	d1e4      	bne.n	800d7ae <UART_Start_Receive_IT+0x132>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800d7e4:	68fb      	ldr	r3, [r7, #12]
 800d7e6:	681b      	ldr	r3, [r3, #0]
 800d7e8:	3308      	adds	r3, #8
 800d7ea:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d7ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d7ee:	e853 3f00 	ldrex	r3, [r3]
 800d7f2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800d7f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d7f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d7fa:	67fb      	str	r3, [r7, #124]	; 0x7c
 800d7fc:	68fb      	ldr	r3, [r7, #12]
 800d7fe:	681b      	ldr	r3, [r3, #0]
 800d800:	3308      	adds	r3, #8
 800d802:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800d804:	64ba      	str	r2, [r7, #72]	; 0x48
 800d806:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d808:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800d80a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d80c:	e841 2300 	strex	r3, r2, [r1]
 800d810:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800d812:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d814:	2b00      	cmp	r3, #0
 800d816:	d1e5      	bne.n	800d7e4 <UART_Start_Receive_IT+0x168>
 800d818:	e04a      	b.n	800d8b0 <UART_Start_Receive_IT+0x234>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800d81a:	68fb      	ldr	r3, [r7, #12]
 800d81c:	689b      	ldr	r3, [r3, #8]
 800d81e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d822:	d107      	bne.n	800d834 <UART_Start_Receive_IT+0x1b8>
 800d824:	68fb      	ldr	r3, [r7, #12]
 800d826:	691b      	ldr	r3, [r3, #16]
 800d828:	2b00      	cmp	r3, #0
 800d82a:	d103      	bne.n	800d834 <UART_Start_Receive_IT+0x1b8>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800d82c:	68fb      	ldr	r3, [r7, #12]
 800d82e:	4a26      	ldr	r2, [pc, #152]	; (800d8c8 <UART_Start_Receive_IT+0x24c>)
 800d830:	671a      	str	r2, [r3, #112]	; 0x70
 800d832:	e002      	b.n	800d83a <UART_Start_Receive_IT+0x1be>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800d834:	68fb      	ldr	r3, [r7, #12]
 800d836:	4a25      	ldr	r2, [pc, #148]	; (800d8cc <UART_Start_Receive_IT+0x250>)
 800d838:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 800d83a:	68fb      	ldr	r3, [r7, #12]
 800d83c:	2200      	movs	r2, #0
 800d83e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800d842:	68fb      	ldr	r3, [r7, #12]
 800d844:	691b      	ldr	r3, [r3, #16]
 800d846:	2b00      	cmp	r3, #0
 800d848:	d019      	beq.n	800d87e <UART_Start_Receive_IT+0x202>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800d84a:	68fb      	ldr	r3, [r7, #12]
 800d84c:	681b      	ldr	r3, [r3, #0]
 800d84e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d850:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d852:	e853 3f00 	ldrex	r3, [r3]
 800d856:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800d858:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d85a:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800d85e:	677b      	str	r3, [r7, #116]	; 0x74
 800d860:	68fb      	ldr	r3, [r7, #12]
 800d862:	681b      	ldr	r3, [r3, #0]
 800d864:	461a      	mov	r2, r3
 800d866:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d868:	637b      	str	r3, [r7, #52]	; 0x34
 800d86a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d86c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800d86e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d870:	e841 2300 	strex	r3, r2, [r1]
 800d874:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800d876:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d878:	2b00      	cmp	r3, #0
 800d87a:	d1e6      	bne.n	800d84a <UART_Start_Receive_IT+0x1ce>
 800d87c:	e018      	b.n	800d8b0 <UART_Start_Receive_IT+0x234>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800d87e:	68fb      	ldr	r3, [r7, #12]
 800d880:	681b      	ldr	r3, [r3, #0]
 800d882:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d884:	697b      	ldr	r3, [r7, #20]
 800d886:	e853 3f00 	ldrex	r3, [r3]
 800d88a:	613b      	str	r3, [r7, #16]
   return(result);
 800d88c:	693b      	ldr	r3, [r7, #16]
 800d88e:	f043 0320 	orr.w	r3, r3, #32
 800d892:	67bb      	str	r3, [r7, #120]	; 0x78
 800d894:	68fb      	ldr	r3, [r7, #12]
 800d896:	681b      	ldr	r3, [r3, #0]
 800d898:	461a      	mov	r2, r3
 800d89a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d89c:	623b      	str	r3, [r7, #32]
 800d89e:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d8a0:	69f9      	ldr	r1, [r7, #28]
 800d8a2:	6a3a      	ldr	r2, [r7, #32]
 800d8a4:	e841 2300 	strex	r3, r2, [r1]
 800d8a8:	61bb      	str	r3, [r7, #24]
   return(result);
 800d8aa:	69bb      	ldr	r3, [r7, #24]
 800d8ac:	2b00      	cmp	r3, #0
 800d8ae:	d1e6      	bne.n	800d87e <UART_Start_Receive_IT+0x202>
    }
  }
  return HAL_OK;
 800d8b0:	2300      	movs	r3, #0
}
 800d8b2:	4618      	mov	r0, r3
 800d8b4:	378c      	adds	r7, #140	; 0x8c
 800d8b6:	46bd      	mov	sp, r7
 800d8b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8bc:	4770      	bx	lr
 800d8be:	bf00      	nop
 800d8c0:	0800dfd9 	.word	0x0800dfd9
 800d8c4:	0800dce1 	.word	0x0800dce1
 800d8c8:	0800db7f 	.word	0x0800db7f
 800d8cc:	0800da1f 	.word	0x0800da1f

0800d8d0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800d8d0:	b480      	push	{r7}
 800d8d2:	b095      	sub	sp, #84	; 0x54
 800d8d4:	af00      	add	r7, sp, #0
 800d8d6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800d8d8:	687b      	ldr	r3, [r7, #4]
 800d8da:	681b      	ldr	r3, [r3, #0]
 800d8dc:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d8de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d8e0:	e853 3f00 	ldrex	r3, [r3]
 800d8e4:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800d8e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d8e8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800d8ec:	64fb      	str	r3, [r7, #76]	; 0x4c
 800d8ee:	687b      	ldr	r3, [r7, #4]
 800d8f0:	681b      	ldr	r3, [r3, #0]
 800d8f2:	461a      	mov	r2, r3
 800d8f4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d8f6:	643b      	str	r3, [r7, #64]	; 0x40
 800d8f8:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d8fa:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800d8fc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800d8fe:	e841 2300 	strex	r3, r2, [r1]
 800d902:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800d904:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d906:	2b00      	cmp	r3, #0
 800d908:	d1e6      	bne.n	800d8d8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800d90a:	687b      	ldr	r3, [r7, #4]
 800d90c:	681b      	ldr	r3, [r3, #0]
 800d90e:	3308      	adds	r3, #8
 800d910:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d912:	6a3b      	ldr	r3, [r7, #32]
 800d914:	e853 3f00 	ldrex	r3, [r3]
 800d918:	61fb      	str	r3, [r7, #28]
   return(result);
 800d91a:	69fa      	ldr	r2, [r7, #28]
 800d91c:	4b1e      	ldr	r3, [pc, #120]	; (800d998 <UART_EndRxTransfer+0xc8>)
 800d91e:	4013      	ands	r3, r2
 800d920:	64bb      	str	r3, [r7, #72]	; 0x48
 800d922:	687b      	ldr	r3, [r7, #4]
 800d924:	681b      	ldr	r3, [r3, #0]
 800d926:	3308      	adds	r3, #8
 800d928:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d92a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800d92c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d92e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d930:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d932:	e841 2300 	strex	r3, r2, [r1]
 800d936:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800d938:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d93a:	2b00      	cmp	r3, #0
 800d93c:	d1e5      	bne.n	800d90a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d93e:	687b      	ldr	r3, [r7, #4]
 800d940:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d942:	2b01      	cmp	r3, #1
 800d944:	d118      	bne.n	800d978 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d946:	687b      	ldr	r3, [r7, #4]
 800d948:	681b      	ldr	r3, [r3, #0]
 800d94a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d94c:	68fb      	ldr	r3, [r7, #12]
 800d94e:	e853 3f00 	ldrex	r3, [r3]
 800d952:	60bb      	str	r3, [r7, #8]
   return(result);
 800d954:	68bb      	ldr	r3, [r7, #8]
 800d956:	f023 0310 	bic.w	r3, r3, #16
 800d95a:	647b      	str	r3, [r7, #68]	; 0x44
 800d95c:	687b      	ldr	r3, [r7, #4]
 800d95e:	681b      	ldr	r3, [r3, #0]
 800d960:	461a      	mov	r2, r3
 800d962:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d964:	61bb      	str	r3, [r7, #24]
 800d966:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d968:	6979      	ldr	r1, [r7, #20]
 800d96a:	69ba      	ldr	r2, [r7, #24]
 800d96c:	e841 2300 	strex	r3, r2, [r1]
 800d970:	613b      	str	r3, [r7, #16]
   return(result);
 800d972:	693b      	ldr	r3, [r7, #16]
 800d974:	2b00      	cmp	r3, #0
 800d976:	d1e6      	bne.n	800d946 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800d978:	687b      	ldr	r3, [r7, #4]
 800d97a:	2220      	movs	r2, #32
 800d97c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d980:	687b      	ldr	r3, [r7, #4]
 800d982:	2200      	movs	r2, #0
 800d984:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800d986:	687b      	ldr	r3, [r7, #4]
 800d988:	2200      	movs	r2, #0
 800d98a:	671a      	str	r2, [r3, #112]	; 0x70
}
 800d98c:	bf00      	nop
 800d98e:	3754      	adds	r7, #84	; 0x54
 800d990:	46bd      	mov	sp, r7
 800d992:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d996:	4770      	bx	lr
 800d998:	effffffe 	.word	0xeffffffe

0800d99c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800d99c:	b580      	push	{r7, lr}
 800d99e:	b084      	sub	sp, #16
 800d9a0:	af00      	add	r7, sp, #0
 800d9a2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800d9a4:	687b      	ldr	r3, [r7, #4]
 800d9a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d9a8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800d9aa:	68fb      	ldr	r3, [r7, #12]
 800d9ac:	2200      	movs	r2, #0
 800d9ae:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800d9b2:	68fb      	ldr	r3, [r7, #12]
 800d9b4:	2200      	movs	r2, #0
 800d9b6:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800d9ba:	68f8      	ldr	r0, [r7, #12]
 800d9bc:	f7fe ff2a 	bl	800c814 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d9c0:	bf00      	nop
 800d9c2:	3710      	adds	r7, #16
 800d9c4:	46bd      	mov	sp, r7
 800d9c6:	bd80      	pop	{r7, pc}

0800d9c8 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800d9c8:	b580      	push	{r7, lr}
 800d9ca:	b088      	sub	sp, #32
 800d9cc:	af00      	add	r7, sp, #0
 800d9ce:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800d9d0:	687b      	ldr	r3, [r7, #4]
 800d9d2:	681b      	ldr	r3, [r3, #0]
 800d9d4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d9d6:	68fb      	ldr	r3, [r7, #12]
 800d9d8:	e853 3f00 	ldrex	r3, [r3]
 800d9dc:	60bb      	str	r3, [r7, #8]
   return(result);
 800d9de:	68bb      	ldr	r3, [r7, #8]
 800d9e0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d9e4:	61fb      	str	r3, [r7, #28]
 800d9e6:	687b      	ldr	r3, [r7, #4]
 800d9e8:	681b      	ldr	r3, [r3, #0]
 800d9ea:	461a      	mov	r2, r3
 800d9ec:	69fb      	ldr	r3, [r7, #28]
 800d9ee:	61bb      	str	r3, [r7, #24]
 800d9f0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d9f2:	6979      	ldr	r1, [r7, #20]
 800d9f4:	69ba      	ldr	r2, [r7, #24]
 800d9f6:	e841 2300 	strex	r3, r2, [r1]
 800d9fa:	613b      	str	r3, [r7, #16]
   return(result);
 800d9fc:	693b      	ldr	r3, [r7, #16]
 800d9fe:	2b00      	cmp	r3, #0
 800da00:	d1e6      	bne.n	800d9d0 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800da02:	687b      	ldr	r3, [r7, #4]
 800da04:	2220      	movs	r2, #32
 800da06:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800da0a:	687b      	ldr	r3, [r7, #4]
 800da0c:	2200      	movs	r2, #0
 800da0e:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800da10:	6878      	ldr	r0, [r7, #4]
 800da12:	f7f5 f843 	bl	8002a9c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800da16:	bf00      	nop
 800da18:	3720      	adds	r7, #32
 800da1a:	46bd      	mov	sp, r7
 800da1c:	bd80      	pop	{r7, pc}

0800da1e <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800da1e:	b580      	push	{r7, lr}
 800da20:	b096      	sub	sp, #88	; 0x58
 800da22:	af00      	add	r7, sp, #0
 800da24:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800da26:	687b      	ldr	r3, [r7, #4]
 800da28:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800da2c:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800da30:	687b      	ldr	r3, [r7, #4]
 800da32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800da36:	2b22      	cmp	r3, #34	; 0x22
 800da38:	f040 8095 	bne.w	800db66 <UART_RxISR_8BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800da3c:	687b      	ldr	r3, [r7, #4]
 800da3e:	681b      	ldr	r3, [r3, #0]
 800da40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800da42:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800da46:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 800da4a:	b2d9      	uxtb	r1, r3
 800da4c:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800da50:	b2da      	uxtb	r2, r3
 800da52:	687b      	ldr	r3, [r7, #4]
 800da54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800da56:	400a      	ands	r2, r1
 800da58:	b2d2      	uxtb	r2, r2
 800da5a:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800da5c:	687b      	ldr	r3, [r7, #4]
 800da5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800da60:	1c5a      	adds	r2, r3, #1
 800da62:	687b      	ldr	r3, [r7, #4]
 800da64:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800da66:	687b      	ldr	r3, [r7, #4]
 800da68:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800da6c:	b29b      	uxth	r3, r3
 800da6e:	3b01      	subs	r3, #1
 800da70:	b29a      	uxth	r2, r3
 800da72:	687b      	ldr	r3, [r7, #4]
 800da74:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800da78:	687b      	ldr	r3, [r7, #4]
 800da7a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800da7e:	b29b      	uxth	r3, r3
 800da80:	2b00      	cmp	r3, #0
 800da82:	d178      	bne.n	800db76 <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800da84:	687b      	ldr	r3, [r7, #4]
 800da86:	681b      	ldr	r3, [r3, #0]
 800da88:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800da8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800da8c:	e853 3f00 	ldrex	r3, [r3]
 800da90:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800da92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800da94:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800da98:	653b      	str	r3, [r7, #80]	; 0x50
 800da9a:	687b      	ldr	r3, [r7, #4]
 800da9c:	681b      	ldr	r3, [r3, #0]
 800da9e:	461a      	mov	r2, r3
 800daa0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800daa2:	647b      	str	r3, [r7, #68]	; 0x44
 800daa4:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800daa6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800daa8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800daaa:	e841 2300 	strex	r3, r2, [r1]
 800daae:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800dab0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dab2:	2b00      	cmp	r3, #0
 800dab4:	d1e6      	bne.n	800da84 <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800dab6:	687b      	ldr	r3, [r7, #4]
 800dab8:	681b      	ldr	r3, [r3, #0]
 800daba:	3308      	adds	r3, #8
 800dabc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dabe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dac0:	e853 3f00 	ldrex	r3, [r3]
 800dac4:	623b      	str	r3, [r7, #32]
   return(result);
 800dac6:	6a3b      	ldr	r3, [r7, #32]
 800dac8:	f023 0301 	bic.w	r3, r3, #1
 800dacc:	64fb      	str	r3, [r7, #76]	; 0x4c
 800dace:	687b      	ldr	r3, [r7, #4]
 800dad0:	681b      	ldr	r3, [r3, #0]
 800dad2:	3308      	adds	r3, #8
 800dad4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800dad6:	633a      	str	r2, [r7, #48]	; 0x30
 800dad8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dada:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800dadc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800dade:	e841 2300 	strex	r3, r2, [r1]
 800dae2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800dae4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dae6:	2b00      	cmp	r3, #0
 800dae8:	d1e5      	bne.n	800dab6 <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800daea:	687b      	ldr	r3, [r7, #4]
 800daec:	2220      	movs	r2, #32
 800daee:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800daf2:	687b      	ldr	r3, [r7, #4]
 800daf4:	2200      	movs	r2, #0
 800daf6:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800daf8:	687b      	ldr	r3, [r7, #4]
 800dafa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dafc:	2b01      	cmp	r3, #1
 800dafe:	d12e      	bne.n	800db5e <UART_RxISR_8BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800db00:	687b      	ldr	r3, [r7, #4]
 800db02:	2200      	movs	r2, #0
 800db04:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800db06:	687b      	ldr	r3, [r7, #4]
 800db08:	681b      	ldr	r3, [r3, #0]
 800db0a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800db0c:	693b      	ldr	r3, [r7, #16]
 800db0e:	e853 3f00 	ldrex	r3, [r3]
 800db12:	60fb      	str	r3, [r7, #12]
   return(result);
 800db14:	68fb      	ldr	r3, [r7, #12]
 800db16:	f023 0310 	bic.w	r3, r3, #16
 800db1a:	64bb      	str	r3, [r7, #72]	; 0x48
 800db1c:	687b      	ldr	r3, [r7, #4]
 800db1e:	681b      	ldr	r3, [r3, #0]
 800db20:	461a      	mov	r2, r3
 800db22:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800db24:	61fb      	str	r3, [r7, #28]
 800db26:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800db28:	69b9      	ldr	r1, [r7, #24]
 800db2a:	69fa      	ldr	r2, [r7, #28]
 800db2c:	e841 2300 	strex	r3, r2, [r1]
 800db30:	617b      	str	r3, [r7, #20]
   return(result);
 800db32:	697b      	ldr	r3, [r7, #20]
 800db34:	2b00      	cmp	r3, #0
 800db36:	d1e6      	bne.n	800db06 <UART_RxISR_8BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800db38:	687b      	ldr	r3, [r7, #4]
 800db3a:	681b      	ldr	r3, [r3, #0]
 800db3c:	69db      	ldr	r3, [r3, #28]
 800db3e:	f003 0310 	and.w	r3, r3, #16
 800db42:	2b10      	cmp	r3, #16
 800db44:	d103      	bne.n	800db4e <UART_RxISR_8BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800db46:	687b      	ldr	r3, [r7, #4]
 800db48:	681b      	ldr	r3, [r3, #0]
 800db4a:	2210      	movs	r2, #16
 800db4c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800db4e:	687b      	ldr	r3, [r7, #4]
 800db50:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800db54:	4619      	mov	r1, r3
 800db56:	6878      	ldr	r0, [r7, #4]
 800db58:	f7fe fe66 	bl	800c828 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800db5c:	e00b      	b.n	800db76 <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 800db5e:	6878      	ldr	r0, [r7, #4]
 800db60:	f7f4 ff28 	bl	80029b4 <HAL_UART_RxCpltCallback>
}
 800db64:	e007      	b.n	800db76 <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800db66:	687b      	ldr	r3, [r7, #4]
 800db68:	681b      	ldr	r3, [r3, #0]
 800db6a:	699a      	ldr	r2, [r3, #24]
 800db6c:	687b      	ldr	r3, [r7, #4]
 800db6e:	681b      	ldr	r3, [r3, #0]
 800db70:	f042 0208 	orr.w	r2, r2, #8
 800db74:	619a      	str	r2, [r3, #24]
}
 800db76:	bf00      	nop
 800db78:	3758      	adds	r7, #88	; 0x58
 800db7a:	46bd      	mov	sp, r7
 800db7c:	bd80      	pop	{r7, pc}

0800db7e <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800db7e:	b580      	push	{r7, lr}
 800db80:	b096      	sub	sp, #88	; 0x58
 800db82:	af00      	add	r7, sp, #0
 800db84:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800db86:	687b      	ldr	r3, [r7, #4]
 800db88:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800db8c:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800db90:	687b      	ldr	r3, [r7, #4]
 800db92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800db96:	2b22      	cmp	r3, #34	; 0x22
 800db98:	f040 8095 	bne.w	800dcc6 <UART_RxISR_16BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800db9c:	687b      	ldr	r3, [r7, #4]
 800db9e:	681b      	ldr	r3, [r3, #0]
 800dba0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dba2:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800dba6:	687b      	ldr	r3, [r7, #4]
 800dba8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800dbaa:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 800dbac:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 800dbb0:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800dbb4:	4013      	ands	r3, r2
 800dbb6:	b29a      	uxth	r2, r3
 800dbb8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800dbba:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800dbbc:	687b      	ldr	r3, [r7, #4]
 800dbbe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800dbc0:	1c9a      	adds	r2, r3, #2
 800dbc2:	687b      	ldr	r3, [r7, #4]
 800dbc4:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800dbc6:	687b      	ldr	r3, [r7, #4]
 800dbc8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800dbcc:	b29b      	uxth	r3, r3
 800dbce:	3b01      	subs	r3, #1
 800dbd0:	b29a      	uxth	r2, r3
 800dbd2:	687b      	ldr	r3, [r7, #4]
 800dbd4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800dbd8:	687b      	ldr	r3, [r7, #4]
 800dbda:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800dbde:	b29b      	uxth	r3, r3
 800dbe0:	2b00      	cmp	r3, #0
 800dbe2:	d178      	bne.n	800dcd6 <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800dbe4:	687b      	ldr	r3, [r7, #4]
 800dbe6:	681b      	ldr	r3, [r3, #0]
 800dbe8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dbea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dbec:	e853 3f00 	ldrex	r3, [r3]
 800dbf0:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800dbf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dbf4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800dbf8:	64fb      	str	r3, [r7, #76]	; 0x4c
 800dbfa:	687b      	ldr	r3, [r7, #4]
 800dbfc:	681b      	ldr	r3, [r3, #0]
 800dbfe:	461a      	mov	r2, r3
 800dc00:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dc02:	643b      	str	r3, [r7, #64]	; 0x40
 800dc04:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dc06:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800dc08:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800dc0a:	e841 2300 	strex	r3, r2, [r1]
 800dc0e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800dc10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dc12:	2b00      	cmp	r3, #0
 800dc14:	d1e6      	bne.n	800dbe4 <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800dc16:	687b      	ldr	r3, [r7, #4]
 800dc18:	681b      	ldr	r3, [r3, #0]
 800dc1a:	3308      	adds	r3, #8
 800dc1c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dc1e:	6a3b      	ldr	r3, [r7, #32]
 800dc20:	e853 3f00 	ldrex	r3, [r3]
 800dc24:	61fb      	str	r3, [r7, #28]
   return(result);
 800dc26:	69fb      	ldr	r3, [r7, #28]
 800dc28:	f023 0301 	bic.w	r3, r3, #1
 800dc2c:	64bb      	str	r3, [r7, #72]	; 0x48
 800dc2e:	687b      	ldr	r3, [r7, #4]
 800dc30:	681b      	ldr	r3, [r3, #0]
 800dc32:	3308      	adds	r3, #8
 800dc34:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800dc36:	62fa      	str	r2, [r7, #44]	; 0x2c
 800dc38:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dc3a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800dc3c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800dc3e:	e841 2300 	strex	r3, r2, [r1]
 800dc42:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800dc44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc46:	2b00      	cmp	r3, #0
 800dc48:	d1e5      	bne.n	800dc16 <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800dc4a:	687b      	ldr	r3, [r7, #4]
 800dc4c:	2220      	movs	r2, #32
 800dc4e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800dc52:	687b      	ldr	r3, [r7, #4]
 800dc54:	2200      	movs	r2, #0
 800dc56:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800dc58:	687b      	ldr	r3, [r7, #4]
 800dc5a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dc5c:	2b01      	cmp	r3, #1
 800dc5e:	d12e      	bne.n	800dcbe <UART_RxISR_16BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800dc60:	687b      	ldr	r3, [r7, #4]
 800dc62:	2200      	movs	r2, #0
 800dc64:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800dc66:	687b      	ldr	r3, [r7, #4]
 800dc68:	681b      	ldr	r3, [r3, #0]
 800dc6a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dc6c:	68fb      	ldr	r3, [r7, #12]
 800dc6e:	e853 3f00 	ldrex	r3, [r3]
 800dc72:	60bb      	str	r3, [r7, #8]
   return(result);
 800dc74:	68bb      	ldr	r3, [r7, #8]
 800dc76:	f023 0310 	bic.w	r3, r3, #16
 800dc7a:	647b      	str	r3, [r7, #68]	; 0x44
 800dc7c:	687b      	ldr	r3, [r7, #4]
 800dc7e:	681b      	ldr	r3, [r3, #0]
 800dc80:	461a      	mov	r2, r3
 800dc82:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800dc84:	61bb      	str	r3, [r7, #24]
 800dc86:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dc88:	6979      	ldr	r1, [r7, #20]
 800dc8a:	69ba      	ldr	r2, [r7, #24]
 800dc8c:	e841 2300 	strex	r3, r2, [r1]
 800dc90:	613b      	str	r3, [r7, #16]
   return(result);
 800dc92:	693b      	ldr	r3, [r7, #16]
 800dc94:	2b00      	cmp	r3, #0
 800dc96:	d1e6      	bne.n	800dc66 <UART_RxISR_16BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800dc98:	687b      	ldr	r3, [r7, #4]
 800dc9a:	681b      	ldr	r3, [r3, #0]
 800dc9c:	69db      	ldr	r3, [r3, #28]
 800dc9e:	f003 0310 	and.w	r3, r3, #16
 800dca2:	2b10      	cmp	r3, #16
 800dca4:	d103      	bne.n	800dcae <UART_RxISR_16BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800dca6:	687b      	ldr	r3, [r7, #4]
 800dca8:	681b      	ldr	r3, [r3, #0]
 800dcaa:	2210      	movs	r2, #16
 800dcac:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800dcae:	687b      	ldr	r3, [r7, #4]
 800dcb0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800dcb4:	4619      	mov	r1, r3
 800dcb6:	6878      	ldr	r0, [r7, #4]
 800dcb8:	f7fe fdb6 	bl	800c828 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800dcbc:	e00b      	b.n	800dcd6 <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 800dcbe:	6878      	ldr	r0, [r7, #4]
 800dcc0:	f7f4 fe78 	bl	80029b4 <HAL_UART_RxCpltCallback>
}
 800dcc4:	e007      	b.n	800dcd6 <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800dcc6:	687b      	ldr	r3, [r7, #4]
 800dcc8:	681b      	ldr	r3, [r3, #0]
 800dcca:	699a      	ldr	r2, [r3, #24]
 800dccc:	687b      	ldr	r3, [r7, #4]
 800dcce:	681b      	ldr	r3, [r3, #0]
 800dcd0:	f042 0208 	orr.w	r2, r2, #8
 800dcd4:	619a      	str	r2, [r3, #24]
}
 800dcd6:	bf00      	nop
 800dcd8:	3758      	adds	r7, #88	; 0x58
 800dcda:	46bd      	mov	sp, r7
 800dcdc:	bd80      	pop	{r7, pc}
	...

0800dce0 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800dce0:	b580      	push	{r7, lr}
 800dce2:	b0a6      	sub	sp, #152	; 0x98
 800dce4:	af00      	add	r7, sp, #0
 800dce6:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800dce8:	687b      	ldr	r3, [r7, #4]
 800dcea:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800dcee:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800dcf2:	687b      	ldr	r3, [r7, #4]
 800dcf4:	681b      	ldr	r3, [r3, #0]
 800dcf6:	69db      	ldr	r3, [r3, #28]
 800dcf8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800dcfc:	687b      	ldr	r3, [r7, #4]
 800dcfe:	681b      	ldr	r3, [r3, #0]
 800dd00:	681b      	ldr	r3, [r3, #0]
 800dd02:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800dd06:	687b      	ldr	r3, [r7, #4]
 800dd08:	681b      	ldr	r3, [r3, #0]
 800dd0a:	689b      	ldr	r3, [r3, #8]
 800dd0c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800dd10:	687b      	ldr	r3, [r7, #4]
 800dd12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800dd16:	2b22      	cmp	r3, #34	; 0x22
 800dd18:	f040 814d 	bne.w	800dfb6 <UART_RxISR_8BIT_FIFOEN+0x2d6>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800dd1c:	687b      	ldr	r3, [r7, #4]
 800dd1e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800dd22:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800dd26:	e0f4      	b.n	800df12 <UART_RxISR_8BIT_FIFOEN+0x232>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800dd28:	687b      	ldr	r3, [r7, #4]
 800dd2a:	681b      	ldr	r3, [r3, #0]
 800dd2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dd2e:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800dd32:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 800dd36:	b2d9      	uxtb	r1, r3
 800dd38:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 800dd3c:	b2da      	uxtb	r2, r3
 800dd3e:	687b      	ldr	r3, [r7, #4]
 800dd40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800dd42:	400a      	ands	r2, r1
 800dd44:	b2d2      	uxtb	r2, r2
 800dd46:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800dd48:	687b      	ldr	r3, [r7, #4]
 800dd4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800dd4c:	1c5a      	adds	r2, r3, #1
 800dd4e:	687b      	ldr	r3, [r7, #4]
 800dd50:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800dd52:	687b      	ldr	r3, [r7, #4]
 800dd54:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800dd58:	b29b      	uxth	r3, r3
 800dd5a:	3b01      	subs	r3, #1
 800dd5c:	b29a      	uxth	r2, r3
 800dd5e:	687b      	ldr	r3, [r7, #4]
 800dd60:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800dd64:	687b      	ldr	r3, [r7, #4]
 800dd66:	681b      	ldr	r3, [r3, #0]
 800dd68:	69db      	ldr	r3, [r3, #28]
 800dd6a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800dd6e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800dd72:	f003 0307 	and.w	r3, r3, #7
 800dd76:	2b00      	cmp	r3, #0
 800dd78:	d053      	beq.n	800de22 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800dd7a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800dd7e:	f003 0301 	and.w	r3, r3, #1
 800dd82:	2b00      	cmp	r3, #0
 800dd84:	d011      	beq.n	800ddaa <UART_RxISR_8BIT_FIFOEN+0xca>
 800dd86:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800dd8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800dd8e:	2b00      	cmp	r3, #0
 800dd90:	d00b      	beq.n	800ddaa <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800dd92:	687b      	ldr	r3, [r7, #4]
 800dd94:	681b      	ldr	r3, [r3, #0]
 800dd96:	2201      	movs	r2, #1
 800dd98:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800dd9a:	687b      	ldr	r3, [r7, #4]
 800dd9c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800dda0:	f043 0201 	orr.w	r2, r3, #1
 800dda4:	687b      	ldr	r3, [r7, #4]
 800dda6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800ddaa:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800ddae:	f003 0302 	and.w	r3, r3, #2
 800ddb2:	2b00      	cmp	r3, #0
 800ddb4:	d011      	beq.n	800ddda <UART_RxISR_8BIT_FIFOEN+0xfa>
 800ddb6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800ddba:	f003 0301 	and.w	r3, r3, #1
 800ddbe:	2b00      	cmp	r3, #0
 800ddc0:	d00b      	beq.n	800ddda <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800ddc2:	687b      	ldr	r3, [r7, #4]
 800ddc4:	681b      	ldr	r3, [r3, #0]
 800ddc6:	2202      	movs	r2, #2
 800ddc8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800ddca:	687b      	ldr	r3, [r7, #4]
 800ddcc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ddd0:	f043 0204 	orr.w	r2, r3, #4
 800ddd4:	687b      	ldr	r3, [r7, #4]
 800ddd6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800ddda:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800ddde:	f003 0304 	and.w	r3, r3, #4
 800dde2:	2b00      	cmp	r3, #0
 800dde4:	d011      	beq.n	800de0a <UART_RxISR_8BIT_FIFOEN+0x12a>
 800dde6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800ddea:	f003 0301 	and.w	r3, r3, #1
 800ddee:	2b00      	cmp	r3, #0
 800ddf0:	d00b      	beq.n	800de0a <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800ddf2:	687b      	ldr	r3, [r7, #4]
 800ddf4:	681b      	ldr	r3, [r3, #0]
 800ddf6:	2204      	movs	r2, #4
 800ddf8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800ddfa:	687b      	ldr	r3, [r7, #4]
 800ddfc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800de00:	f043 0202 	orr.w	r2, r3, #2
 800de04:	687b      	ldr	r3, [r7, #4]
 800de06:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800de0a:	687b      	ldr	r3, [r7, #4]
 800de0c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800de10:	2b00      	cmp	r3, #0
 800de12:	d006      	beq.n	800de22 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800de14:	6878      	ldr	r0, [r7, #4]
 800de16:	f7fe fcfd 	bl	800c814 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800de1a:	687b      	ldr	r3, [r7, #4]
 800de1c:	2200      	movs	r2, #0
 800de1e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 800de22:	687b      	ldr	r3, [r7, #4]
 800de24:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800de28:	b29b      	uxth	r3, r3
 800de2a:	2b00      	cmp	r3, #0
 800de2c:	d171      	bne.n	800df12 <UART_RxISR_8BIT_FIFOEN+0x232>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800de2e:	687b      	ldr	r3, [r7, #4]
 800de30:	681b      	ldr	r3, [r3, #0]
 800de32:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800de34:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800de36:	e853 3f00 	ldrex	r3, [r3]
 800de3a:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 800de3c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800de3e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800de42:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800de46:	687b      	ldr	r3, [r7, #4]
 800de48:	681b      	ldr	r3, [r3, #0]
 800de4a:	461a      	mov	r2, r3
 800de4c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800de50:	66bb      	str	r3, [r7, #104]	; 0x68
 800de52:	667a      	str	r2, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800de54:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800de56:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800de58:	e841 2300 	strex	r3, r2, [r1]
 800de5c:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 800de5e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800de60:	2b00      	cmp	r3, #0
 800de62:	d1e4      	bne.n	800de2e <UART_RxISR_8BIT_FIFOEN+0x14e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800de64:	687b      	ldr	r3, [r7, #4]
 800de66:	681b      	ldr	r3, [r3, #0]
 800de68:	3308      	adds	r3, #8
 800de6a:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800de6c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800de6e:	e853 3f00 	ldrex	r3, [r3]
 800de72:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800de74:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800de76:	4b56      	ldr	r3, [pc, #344]	; (800dfd0 <UART_RxISR_8BIT_FIFOEN+0x2f0>)
 800de78:	4013      	ands	r3, r2
 800de7a:	67fb      	str	r3, [r7, #124]	; 0x7c
 800de7c:	687b      	ldr	r3, [r7, #4]
 800de7e:	681b      	ldr	r3, [r3, #0]
 800de80:	3308      	adds	r3, #8
 800de82:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800de84:	657a      	str	r2, [r7, #84]	; 0x54
 800de86:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800de88:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800de8a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800de8c:	e841 2300 	strex	r3, r2, [r1]
 800de90:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800de92:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800de94:	2b00      	cmp	r3, #0
 800de96:	d1e5      	bne.n	800de64 <UART_RxISR_8BIT_FIFOEN+0x184>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800de98:	687b      	ldr	r3, [r7, #4]
 800de9a:	2220      	movs	r2, #32
 800de9c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800dea0:	687b      	ldr	r3, [r7, #4]
 800dea2:	2200      	movs	r2, #0
 800dea4:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800dea6:	687b      	ldr	r3, [r7, #4]
 800dea8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800deaa:	2b01      	cmp	r3, #1
 800deac:	d12e      	bne.n	800df0c <UART_RxISR_8BIT_FIFOEN+0x22c>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800deae:	687b      	ldr	r3, [r7, #4]
 800deb0:	2200      	movs	r2, #0
 800deb2:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800deb4:	687b      	ldr	r3, [r7, #4]
 800deb6:	681b      	ldr	r3, [r3, #0]
 800deb8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800deba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800debc:	e853 3f00 	ldrex	r3, [r3]
 800dec0:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800dec2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dec4:	f023 0310 	bic.w	r3, r3, #16
 800dec8:	67bb      	str	r3, [r7, #120]	; 0x78
 800deca:	687b      	ldr	r3, [r7, #4]
 800decc:	681b      	ldr	r3, [r3, #0]
 800dece:	461a      	mov	r2, r3
 800ded0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ded2:	643b      	str	r3, [r7, #64]	; 0x40
 800ded4:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ded6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800ded8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800deda:	e841 2300 	strex	r3, r2, [r1]
 800dede:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800dee0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dee2:	2b00      	cmp	r3, #0
 800dee4:	d1e6      	bne.n	800deb4 <UART_RxISR_8BIT_FIFOEN+0x1d4>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800dee6:	687b      	ldr	r3, [r7, #4]
 800dee8:	681b      	ldr	r3, [r3, #0]
 800deea:	69db      	ldr	r3, [r3, #28]
 800deec:	f003 0310 	and.w	r3, r3, #16
 800def0:	2b10      	cmp	r3, #16
 800def2:	d103      	bne.n	800defc <UART_RxISR_8BIT_FIFOEN+0x21c>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800def4:	687b      	ldr	r3, [r7, #4]
 800def6:	681b      	ldr	r3, [r3, #0]
 800def8:	2210      	movs	r2, #16
 800defa:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800defc:	687b      	ldr	r3, [r7, #4]
 800defe:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800df02:	4619      	mov	r1, r3
 800df04:	6878      	ldr	r0, [r7, #4]
 800df06:	f7fe fc8f 	bl	800c828 <HAL_UARTEx_RxEventCallback>
 800df0a:	e002      	b.n	800df12 <UART_RxISR_8BIT_FIFOEN+0x232>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800df0c:	6878      	ldr	r0, [r7, #4]
 800df0e:	f7f4 fd51 	bl	80029b4 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800df12:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800df16:	2b00      	cmp	r3, #0
 800df18:	d006      	beq.n	800df28 <UART_RxISR_8BIT_FIFOEN+0x248>
 800df1a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800df1e:	f003 0320 	and.w	r3, r3, #32
 800df22:	2b00      	cmp	r3, #0
 800df24:	f47f af00 	bne.w	800dd28 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800df28:	687b      	ldr	r3, [r7, #4]
 800df2a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800df2e:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800df32:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 800df36:	2b00      	cmp	r3, #0
 800df38:	d045      	beq.n	800dfc6 <UART_RxISR_8BIT_FIFOEN+0x2e6>
 800df3a:	687b      	ldr	r3, [r7, #4]
 800df3c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800df40:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800df44:	429a      	cmp	r2, r3
 800df46:	d23e      	bcs.n	800dfc6 <UART_RxISR_8BIT_FIFOEN+0x2e6>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800df48:	687b      	ldr	r3, [r7, #4]
 800df4a:	681b      	ldr	r3, [r3, #0]
 800df4c:	3308      	adds	r3, #8
 800df4e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800df50:	6a3b      	ldr	r3, [r7, #32]
 800df52:	e853 3f00 	ldrex	r3, [r3]
 800df56:	61fb      	str	r3, [r7, #28]
   return(result);
 800df58:	69fb      	ldr	r3, [r7, #28]
 800df5a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800df5e:	673b      	str	r3, [r7, #112]	; 0x70
 800df60:	687b      	ldr	r3, [r7, #4]
 800df62:	681b      	ldr	r3, [r3, #0]
 800df64:	3308      	adds	r3, #8
 800df66:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800df68:	62fa      	str	r2, [r7, #44]	; 0x2c
 800df6a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800df6c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800df6e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800df70:	e841 2300 	strex	r3, r2, [r1]
 800df74:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800df76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df78:	2b00      	cmp	r3, #0
 800df7a:	d1e5      	bne.n	800df48 <UART_RxISR_8BIT_FIFOEN+0x268>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800df7c:	687b      	ldr	r3, [r7, #4]
 800df7e:	4a15      	ldr	r2, [pc, #84]	; (800dfd4 <UART_RxISR_8BIT_FIFOEN+0x2f4>)
 800df80:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800df82:	687b      	ldr	r3, [r7, #4]
 800df84:	681b      	ldr	r3, [r3, #0]
 800df86:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800df88:	68fb      	ldr	r3, [r7, #12]
 800df8a:	e853 3f00 	ldrex	r3, [r3]
 800df8e:	60bb      	str	r3, [r7, #8]
   return(result);
 800df90:	68bb      	ldr	r3, [r7, #8]
 800df92:	f043 0320 	orr.w	r3, r3, #32
 800df96:	66fb      	str	r3, [r7, #108]	; 0x6c
 800df98:	687b      	ldr	r3, [r7, #4]
 800df9a:	681b      	ldr	r3, [r3, #0]
 800df9c:	461a      	mov	r2, r3
 800df9e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800dfa0:	61bb      	str	r3, [r7, #24]
 800dfa2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dfa4:	6979      	ldr	r1, [r7, #20]
 800dfa6:	69ba      	ldr	r2, [r7, #24]
 800dfa8:	e841 2300 	strex	r3, r2, [r1]
 800dfac:	613b      	str	r3, [r7, #16]
   return(result);
 800dfae:	693b      	ldr	r3, [r7, #16]
 800dfb0:	2b00      	cmp	r3, #0
 800dfb2:	d1e6      	bne.n	800df82 <UART_RxISR_8BIT_FIFOEN+0x2a2>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800dfb4:	e007      	b.n	800dfc6 <UART_RxISR_8BIT_FIFOEN+0x2e6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800dfb6:	687b      	ldr	r3, [r7, #4]
 800dfb8:	681b      	ldr	r3, [r3, #0]
 800dfba:	699a      	ldr	r2, [r3, #24]
 800dfbc:	687b      	ldr	r3, [r7, #4]
 800dfbe:	681b      	ldr	r3, [r3, #0]
 800dfc0:	f042 0208 	orr.w	r2, r2, #8
 800dfc4:	619a      	str	r2, [r3, #24]
}
 800dfc6:	bf00      	nop
 800dfc8:	3798      	adds	r7, #152	; 0x98
 800dfca:	46bd      	mov	sp, r7
 800dfcc:	bd80      	pop	{r7, pc}
 800dfce:	bf00      	nop
 800dfd0:	effffffe 	.word	0xeffffffe
 800dfd4:	0800da1f 	.word	0x0800da1f

0800dfd8 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800dfd8:	b580      	push	{r7, lr}
 800dfda:	b0a8      	sub	sp, #160	; 0xa0
 800dfdc:	af00      	add	r7, sp, #0
 800dfde:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800dfe0:	687b      	ldr	r3, [r7, #4]
 800dfe2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800dfe6:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800dfea:	687b      	ldr	r3, [r7, #4]
 800dfec:	681b      	ldr	r3, [r3, #0]
 800dfee:	69db      	ldr	r3, [r3, #28]
 800dff0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800dff4:	687b      	ldr	r3, [r7, #4]
 800dff6:	681b      	ldr	r3, [r3, #0]
 800dff8:	681b      	ldr	r3, [r3, #0]
 800dffa:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800dffe:	687b      	ldr	r3, [r7, #4]
 800e000:	681b      	ldr	r3, [r3, #0]
 800e002:	689b      	ldr	r3, [r3, #8]
 800e004:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800e008:	687b      	ldr	r3, [r7, #4]
 800e00a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e00e:	2b22      	cmp	r3, #34	; 0x22
 800e010:	f040 8151 	bne.w	800e2b6 <UART_RxISR_16BIT_FIFOEN+0x2de>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800e014:	687b      	ldr	r3, [r7, #4]
 800e016:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800e01a:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800e01e:	e0f8      	b.n	800e212 <UART_RxISR_16BIT_FIFOEN+0x23a>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800e020:	687b      	ldr	r3, [r7, #4]
 800e022:	681b      	ldr	r3, [r3, #0]
 800e024:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e026:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800e02a:	687b      	ldr	r3, [r7, #4]
 800e02c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e02e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      *tmp = (uint16_t)(uhdata & uhMask);
 800e032:	f8b7 208c 	ldrh.w	r2, [r7, #140]	; 0x8c
 800e036:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 800e03a:	4013      	ands	r3, r2
 800e03c:	b29a      	uxth	r2, r3
 800e03e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800e042:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800e044:	687b      	ldr	r3, [r7, #4]
 800e046:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e048:	1c9a      	adds	r2, r3, #2
 800e04a:	687b      	ldr	r3, [r7, #4]
 800e04c:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800e04e:	687b      	ldr	r3, [r7, #4]
 800e050:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800e054:	b29b      	uxth	r3, r3
 800e056:	3b01      	subs	r3, #1
 800e058:	b29a      	uxth	r2, r3
 800e05a:	687b      	ldr	r3, [r7, #4]
 800e05c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800e060:	687b      	ldr	r3, [r7, #4]
 800e062:	681b      	ldr	r3, [r3, #0]
 800e064:	69db      	ldr	r3, [r3, #28]
 800e066:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800e06a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800e06e:	f003 0307 	and.w	r3, r3, #7
 800e072:	2b00      	cmp	r3, #0
 800e074:	d053      	beq.n	800e11e <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800e076:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800e07a:	f003 0301 	and.w	r3, r3, #1
 800e07e:	2b00      	cmp	r3, #0
 800e080:	d011      	beq.n	800e0a6 <UART_RxISR_16BIT_FIFOEN+0xce>
 800e082:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800e086:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e08a:	2b00      	cmp	r3, #0
 800e08c:	d00b      	beq.n	800e0a6 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800e08e:	687b      	ldr	r3, [r7, #4]
 800e090:	681b      	ldr	r3, [r3, #0]
 800e092:	2201      	movs	r2, #1
 800e094:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800e096:	687b      	ldr	r3, [r7, #4]
 800e098:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e09c:	f043 0201 	orr.w	r2, r3, #1
 800e0a0:	687b      	ldr	r3, [r7, #4]
 800e0a2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800e0a6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800e0aa:	f003 0302 	and.w	r3, r3, #2
 800e0ae:	2b00      	cmp	r3, #0
 800e0b0:	d011      	beq.n	800e0d6 <UART_RxISR_16BIT_FIFOEN+0xfe>
 800e0b2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800e0b6:	f003 0301 	and.w	r3, r3, #1
 800e0ba:	2b00      	cmp	r3, #0
 800e0bc:	d00b      	beq.n	800e0d6 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800e0be:	687b      	ldr	r3, [r7, #4]
 800e0c0:	681b      	ldr	r3, [r3, #0]
 800e0c2:	2202      	movs	r2, #2
 800e0c4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800e0c6:	687b      	ldr	r3, [r7, #4]
 800e0c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e0cc:	f043 0204 	orr.w	r2, r3, #4
 800e0d0:	687b      	ldr	r3, [r7, #4]
 800e0d2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800e0d6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800e0da:	f003 0304 	and.w	r3, r3, #4
 800e0de:	2b00      	cmp	r3, #0
 800e0e0:	d011      	beq.n	800e106 <UART_RxISR_16BIT_FIFOEN+0x12e>
 800e0e2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800e0e6:	f003 0301 	and.w	r3, r3, #1
 800e0ea:	2b00      	cmp	r3, #0
 800e0ec:	d00b      	beq.n	800e106 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800e0ee:	687b      	ldr	r3, [r7, #4]
 800e0f0:	681b      	ldr	r3, [r3, #0]
 800e0f2:	2204      	movs	r2, #4
 800e0f4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800e0f6:	687b      	ldr	r3, [r7, #4]
 800e0f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e0fc:	f043 0202 	orr.w	r2, r3, #2
 800e100:	687b      	ldr	r3, [r7, #4]
 800e102:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800e106:	687b      	ldr	r3, [r7, #4]
 800e108:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e10c:	2b00      	cmp	r3, #0
 800e10e:	d006      	beq.n	800e11e <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800e110:	6878      	ldr	r0, [r7, #4]
 800e112:	f7fe fb7f 	bl	800c814 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e116:	687b      	ldr	r3, [r7, #4]
 800e118:	2200      	movs	r2, #0
 800e11a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 800e11e:	687b      	ldr	r3, [r7, #4]
 800e120:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800e124:	b29b      	uxth	r3, r3
 800e126:	2b00      	cmp	r3, #0
 800e128:	d173      	bne.n	800e212 <UART_RxISR_16BIT_FIFOEN+0x23a>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800e12a:	687b      	ldr	r3, [r7, #4]
 800e12c:	681b      	ldr	r3, [r3, #0]
 800e12e:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e130:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e132:	e853 3f00 	ldrex	r3, [r3]
 800e136:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800e138:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e13a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800e13e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800e142:	687b      	ldr	r3, [r7, #4]
 800e144:	681b      	ldr	r3, [r3, #0]
 800e146:	461a      	mov	r2, r3
 800e148:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800e14c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800e14e:	66ba      	str	r2, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e150:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800e152:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800e154:	e841 2300 	strex	r3, r2, [r1]
 800e158:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800e15a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e15c:	2b00      	cmp	r3, #0
 800e15e:	d1e4      	bne.n	800e12a <UART_RxISR_16BIT_FIFOEN+0x152>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800e160:	687b      	ldr	r3, [r7, #4]
 800e162:	681b      	ldr	r3, [r3, #0]
 800e164:	3308      	adds	r3, #8
 800e166:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e168:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e16a:	e853 3f00 	ldrex	r3, [r3]
 800e16e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800e170:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e172:	4b57      	ldr	r3, [pc, #348]	; (800e2d0 <UART_RxISR_16BIT_FIFOEN+0x2f8>)
 800e174:	4013      	ands	r3, r2
 800e176:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800e17a:	687b      	ldr	r3, [r7, #4]
 800e17c:	681b      	ldr	r3, [r3, #0]
 800e17e:	3308      	adds	r3, #8
 800e180:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800e184:	65ba      	str	r2, [r7, #88]	; 0x58
 800e186:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e188:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800e18a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800e18c:	e841 2300 	strex	r3, r2, [r1]
 800e190:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800e192:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e194:	2b00      	cmp	r3, #0
 800e196:	d1e3      	bne.n	800e160 <UART_RxISR_16BIT_FIFOEN+0x188>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800e198:	687b      	ldr	r3, [r7, #4]
 800e19a:	2220      	movs	r2, #32
 800e19c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800e1a0:	687b      	ldr	r3, [r7, #4]
 800e1a2:	2200      	movs	r2, #0
 800e1a4:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e1a6:	687b      	ldr	r3, [r7, #4]
 800e1a8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e1aa:	2b01      	cmp	r3, #1
 800e1ac:	d12e      	bne.n	800e20c <UART_RxISR_16BIT_FIFOEN+0x234>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e1ae:	687b      	ldr	r3, [r7, #4]
 800e1b0:	2200      	movs	r2, #0
 800e1b2:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e1b4:	687b      	ldr	r3, [r7, #4]
 800e1b6:	681b      	ldr	r3, [r3, #0]
 800e1b8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e1ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e1bc:	e853 3f00 	ldrex	r3, [r3]
 800e1c0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800e1c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e1c4:	f023 0310 	bic.w	r3, r3, #16
 800e1c8:	67fb      	str	r3, [r7, #124]	; 0x7c
 800e1ca:	687b      	ldr	r3, [r7, #4]
 800e1cc:	681b      	ldr	r3, [r3, #0]
 800e1ce:	461a      	mov	r2, r3
 800e1d0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800e1d2:	647b      	str	r3, [r7, #68]	; 0x44
 800e1d4:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e1d6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800e1d8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e1da:	e841 2300 	strex	r3, r2, [r1]
 800e1de:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800e1e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e1e2:	2b00      	cmp	r3, #0
 800e1e4:	d1e6      	bne.n	800e1b4 <UART_RxISR_16BIT_FIFOEN+0x1dc>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800e1e6:	687b      	ldr	r3, [r7, #4]
 800e1e8:	681b      	ldr	r3, [r3, #0]
 800e1ea:	69db      	ldr	r3, [r3, #28]
 800e1ec:	f003 0310 	and.w	r3, r3, #16
 800e1f0:	2b10      	cmp	r3, #16
 800e1f2:	d103      	bne.n	800e1fc <UART_RxISR_16BIT_FIFOEN+0x224>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800e1f4:	687b      	ldr	r3, [r7, #4]
 800e1f6:	681b      	ldr	r3, [r3, #0]
 800e1f8:	2210      	movs	r2, #16
 800e1fa:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800e1fc:	687b      	ldr	r3, [r7, #4]
 800e1fe:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800e202:	4619      	mov	r1, r3
 800e204:	6878      	ldr	r0, [r7, #4]
 800e206:	f7fe fb0f 	bl	800c828 <HAL_UARTEx_RxEventCallback>
 800e20a:	e002      	b.n	800e212 <UART_RxISR_16BIT_FIFOEN+0x23a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800e20c:	6878      	ldr	r0, [r7, #4]
 800e20e:	f7f4 fbd1 	bl	80029b4 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800e212:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 800e216:	2b00      	cmp	r3, #0
 800e218:	d006      	beq.n	800e228 <UART_RxISR_16BIT_FIFOEN+0x250>
 800e21a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800e21e:	f003 0320 	and.w	r3, r3, #32
 800e222:	2b00      	cmp	r3, #0
 800e224:	f47f aefc 	bne.w	800e020 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800e228:	687b      	ldr	r3, [r7, #4]
 800e22a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800e22e:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800e232:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 800e236:	2b00      	cmp	r3, #0
 800e238:	d045      	beq.n	800e2c6 <UART_RxISR_16BIT_FIFOEN+0x2ee>
 800e23a:	687b      	ldr	r3, [r7, #4]
 800e23c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800e240:	f8b7 207a 	ldrh.w	r2, [r7, #122]	; 0x7a
 800e244:	429a      	cmp	r2, r3
 800e246:	d23e      	bcs.n	800e2c6 <UART_RxISR_16BIT_FIFOEN+0x2ee>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800e248:	687b      	ldr	r3, [r7, #4]
 800e24a:	681b      	ldr	r3, [r3, #0]
 800e24c:	3308      	adds	r3, #8
 800e24e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e250:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e252:	e853 3f00 	ldrex	r3, [r3]
 800e256:	623b      	str	r3, [r7, #32]
   return(result);
 800e258:	6a3b      	ldr	r3, [r7, #32]
 800e25a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800e25e:	677b      	str	r3, [r7, #116]	; 0x74
 800e260:	687b      	ldr	r3, [r7, #4]
 800e262:	681b      	ldr	r3, [r3, #0]
 800e264:	3308      	adds	r3, #8
 800e266:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800e268:	633a      	str	r2, [r7, #48]	; 0x30
 800e26a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e26c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800e26e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e270:	e841 2300 	strex	r3, r2, [r1]
 800e274:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800e276:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e278:	2b00      	cmp	r3, #0
 800e27a:	d1e5      	bne.n	800e248 <UART_RxISR_16BIT_FIFOEN+0x270>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800e27c:	687b      	ldr	r3, [r7, #4]
 800e27e:	4a15      	ldr	r2, [pc, #84]	; (800e2d4 <UART_RxISR_16BIT_FIFOEN+0x2fc>)
 800e280:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800e282:	687b      	ldr	r3, [r7, #4]
 800e284:	681b      	ldr	r3, [r3, #0]
 800e286:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e288:	693b      	ldr	r3, [r7, #16]
 800e28a:	e853 3f00 	ldrex	r3, [r3]
 800e28e:	60fb      	str	r3, [r7, #12]
   return(result);
 800e290:	68fb      	ldr	r3, [r7, #12]
 800e292:	f043 0320 	orr.w	r3, r3, #32
 800e296:	673b      	str	r3, [r7, #112]	; 0x70
 800e298:	687b      	ldr	r3, [r7, #4]
 800e29a:	681b      	ldr	r3, [r3, #0]
 800e29c:	461a      	mov	r2, r3
 800e29e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800e2a0:	61fb      	str	r3, [r7, #28]
 800e2a2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e2a4:	69b9      	ldr	r1, [r7, #24]
 800e2a6:	69fa      	ldr	r2, [r7, #28]
 800e2a8:	e841 2300 	strex	r3, r2, [r1]
 800e2ac:	617b      	str	r3, [r7, #20]
   return(result);
 800e2ae:	697b      	ldr	r3, [r7, #20]
 800e2b0:	2b00      	cmp	r3, #0
 800e2b2:	d1e6      	bne.n	800e282 <UART_RxISR_16BIT_FIFOEN+0x2aa>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800e2b4:	e007      	b.n	800e2c6 <UART_RxISR_16BIT_FIFOEN+0x2ee>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800e2b6:	687b      	ldr	r3, [r7, #4]
 800e2b8:	681b      	ldr	r3, [r3, #0]
 800e2ba:	699a      	ldr	r2, [r3, #24]
 800e2bc:	687b      	ldr	r3, [r7, #4]
 800e2be:	681b      	ldr	r3, [r3, #0]
 800e2c0:	f042 0208 	orr.w	r2, r2, #8
 800e2c4:	619a      	str	r2, [r3, #24]
}
 800e2c6:	bf00      	nop
 800e2c8:	37a0      	adds	r7, #160	; 0xa0
 800e2ca:	46bd      	mov	sp, r7
 800e2cc:	bd80      	pop	{r7, pc}
 800e2ce:	bf00      	nop
 800e2d0:	effffffe 	.word	0xeffffffe
 800e2d4:	0800db7f 	.word	0x0800db7f

0800e2d8 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800e2d8:	b480      	push	{r7}
 800e2da:	b083      	sub	sp, #12
 800e2dc:	af00      	add	r7, sp, #0
 800e2de:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800e2e0:	bf00      	nop
 800e2e2:	370c      	adds	r7, #12
 800e2e4:	46bd      	mov	sp, r7
 800e2e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2ea:	4770      	bx	lr

0800e2ec <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800e2ec:	b480      	push	{r7}
 800e2ee:	b083      	sub	sp, #12
 800e2f0:	af00      	add	r7, sp, #0
 800e2f2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800e2f4:	bf00      	nop
 800e2f6:	370c      	adds	r7, #12
 800e2f8:	46bd      	mov	sp, r7
 800e2fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2fe:	4770      	bx	lr

0800e300 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800e300:	b480      	push	{r7}
 800e302:	b083      	sub	sp, #12
 800e304:	af00      	add	r7, sp, #0
 800e306:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800e308:	bf00      	nop
 800e30a:	370c      	adds	r7, #12
 800e30c:	46bd      	mov	sp, r7
 800e30e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e312:	4770      	bx	lr

0800e314 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800e314:	b480      	push	{r7}
 800e316:	b085      	sub	sp, #20
 800e318:	af00      	add	r7, sp, #0
 800e31a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800e31c:	687b      	ldr	r3, [r7, #4]
 800e31e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800e322:	2b01      	cmp	r3, #1
 800e324:	d101      	bne.n	800e32a <HAL_UARTEx_DisableFifoMode+0x16>
 800e326:	2302      	movs	r3, #2
 800e328:	e027      	b.n	800e37a <HAL_UARTEx_DisableFifoMode+0x66>
 800e32a:	687b      	ldr	r3, [r7, #4]
 800e32c:	2201      	movs	r2, #1
 800e32e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800e332:	687b      	ldr	r3, [r7, #4]
 800e334:	2224      	movs	r2, #36	; 0x24
 800e336:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800e33a:	687b      	ldr	r3, [r7, #4]
 800e33c:	681b      	ldr	r3, [r3, #0]
 800e33e:	681b      	ldr	r3, [r3, #0]
 800e340:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800e342:	687b      	ldr	r3, [r7, #4]
 800e344:	681b      	ldr	r3, [r3, #0]
 800e346:	681a      	ldr	r2, [r3, #0]
 800e348:	687b      	ldr	r3, [r7, #4]
 800e34a:	681b      	ldr	r3, [r3, #0]
 800e34c:	f022 0201 	bic.w	r2, r2, #1
 800e350:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800e352:	68fb      	ldr	r3, [r7, #12]
 800e354:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800e358:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800e35a:	687b      	ldr	r3, [r7, #4]
 800e35c:	2200      	movs	r2, #0
 800e35e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800e360:	687b      	ldr	r3, [r7, #4]
 800e362:	681b      	ldr	r3, [r3, #0]
 800e364:	68fa      	ldr	r2, [r7, #12]
 800e366:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800e368:	687b      	ldr	r3, [r7, #4]
 800e36a:	2220      	movs	r2, #32
 800e36c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800e370:	687b      	ldr	r3, [r7, #4]
 800e372:	2200      	movs	r2, #0
 800e374:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800e378:	2300      	movs	r3, #0
}
 800e37a:	4618      	mov	r0, r3
 800e37c:	3714      	adds	r7, #20
 800e37e:	46bd      	mov	sp, r7
 800e380:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e384:	4770      	bx	lr

0800e386 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800e386:	b580      	push	{r7, lr}
 800e388:	b084      	sub	sp, #16
 800e38a:	af00      	add	r7, sp, #0
 800e38c:	6078      	str	r0, [r7, #4]
 800e38e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800e390:	687b      	ldr	r3, [r7, #4]
 800e392:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800e396:	2b01      	cmp	r3, #1
 800e398:	d101      	bne.n	800e39e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800e39a:	2302      	movs	r3, #2
 800e39c:	e02d      	b.n	800e3fa <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800e39e:	687b      	ldr	r3, [r7, #4]
 800e3a0:	2201      	movs	r2, #1
 800e3a2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800e3a6:	687b      	ldr	r3, [r7, #4]
 800e3a8:	2224      	movs	r2, #36	; 0x24
 800e3aa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800e3ae:	687b      	ldr	r3, [r7, #4]
 800e3b0:	681b      	ldr	r3, [r3, #0]
 800e3b2:	681b      	ldr	r3, [r3, #0]
 800e3b4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800e3b6:	687b      	ldr	r3, [r7, #4]
 800e3b8:	681b      	ldr	r3, [r3, #0]
 800e3ba:	681a      	ldr	r2, [r3, #0]
 800e3bc:	687b      	ldr	r3, [r7, #4]
 800e3be:	681b      	ldr	r3, [r3, #0]
 800e3c0:	f022 0201 	bic.w	r2, r2, #1
 800e3c4:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800e3c6:	687b      	ldr	r3, [r7, #4]
 800e3c8:	681b      	ldr	r3, [r3, #0]
 800e3ca:	689b      	ldr	r3, [r3, #8]
 800e3cc:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800e3d0:	687b      	ldr	r3, [r7, #4]
 800e3d2:	681b      	ldr	r3, [r3, #0]
 800e3d4:	683a      	ldr	r2, [r7, #0]
 800e3d6:	430a      	orrs	r2, r1
 800e3d8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800e3da:	6878      	ldr	r0, [r7, #4]
 800e3dc:	f000 f850 	bl	800e480 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800e3e0:	687b      	ldr	r3, [r7, #4]
 800e3e2:	681b      	ldr	r3, [r3, #0]
 800e3e4:	68fa      	ldr	r2, [r7, #12]
 800e3e6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800e3e8:	687b      	ldr	r3, [r7, #4]
 800e3ea:	2220      	movs	r2, #32
 800e3ec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800e3f0:	687b      	ldr	r3, [r7, #4]
 800e3f2:	2200      	movs	r2, #0
 800e3f4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800e3f8:	2300      	movs	r3, #0
}
 800e3fa:	4618      	mov	r0, r3
 800e3fc:	3710      	adds	r7, #16
 800e3fe:	46bd      	mov	sp, r7
 800e400:	bd80      	pop	{r7, pc}

0800e402 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800e402:	b580      	push	{r7, lr}
 800e404:	b084      	sub	sp, #16
 800e406:	af00      	add	r7, sp, #0
 800e408:	6078      	str	r0, [r7, #4]
 800e40a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800e40c:	687b      	ldr	r3, [r7, #4]
 800e40e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800e412:	2b01      	cmp	r3, #1
 800e414:	d101      	bne.n	800e41a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800e416:	2302      	movs	r3, #2
 800e418:	e02d      	b.n	800e476 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800e41a:	687b      	ldr	r3, [r7, #4]
 800e41c:	2201      	movs	r2, #1
 800e41e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800e422:	687b      	ldr	r3, [r7, #4]
 800e424:	2224      	movs	r2, #36	; 0x24
 800e426:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800e42a:	687b      	ldr	r3, [r7, #4]
 800e42c:	681b      	ldr	r3, [r3, #0]
 800e42e:	681b      	ldr	r3, [r3, #0]
 800e430:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800e432:	687b      	ldr	r3, [r7, #4]
 800e434:	681b      	ldr	r3, [r3, #0]
 800e436:	681a      	ldr	r2, [r3, #0]
 800e438:	687b      	ldr	r3, [r7, #4]
 800e43a:	681b      	ldr	r3, [r3, #0]
 800e43c:	f022 0201 	bic.w	r2, r2, #1
 800e440:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800e442:	687b      	ldr	r3, [r7, #4]
 800e444:	681b      	ldr	r3, [r3, #0]
 800e446:	689b      	ldr	r3, [r3, #8]
 800e448:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800e44c:	687b      	ldr	r3, [r7, #4]
 800e44e:	681b      	ldr	r3, [r3, #0]
 800e450:	683a      	ldr	r2, [r7, #0]
 800e452:	430a      	orrs	r2, r1
 800e454:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800e456:	6878      	ldr	r0, [r7, #4]
 800e458:	f000 f812 	bl	800e480 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800e45c:	687b      	ldr	r3, [r7, #4]
 800e45e:	681b      	ldr	r3, [r3, #0]
 800e460:	68fa      	ldr	r2, [r7, #12]
 800e462:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800e464:	687b      	ldr	r3, [r7, #4]
 800e466:	2220      	movs	r2, #32
 800e468:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800e46c:	687b      	ldr	r3, [r7, #4]
 800e46e:	2200      	movs	r2, #0
 800e470:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800e474:	2300      	movs	r3, #0
}
 800e476:	4618      	mov	r0, r3
 800e478:	3710      	adds	r7, #16
 800e47a:	46bd      	mov	sp, r7
 800e47c:	bd80      	pop	{r7, pc}
	...

0800e480 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800e480:	b480      	push	{r7}
 800e482:	b085      	sub	sp, #20
 800e484:	af00      	add	r7, sp, #0
 800e486:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800e488:	687b      	ldr	r3, [r7, #4]
 800e48a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e48c:	2b00      	cmp	r3, #0
 800e48e:	d108      	bne.n	800e4a2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800e490:	687b      	ldr	r3, [r7, #4]
 800e492:	2201      	movs	r2, #1
 800e494:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800e498:	687b      	ldr	r3, [r7, #4]
 800e49a:	2201      	movs	r2, #1
 800e49c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800e4a0:	e031      	b.n	800e506 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800e4a2:	2310      	movs	r3, #16
 800e4a4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800e4a6:	2310      	movs	r3, #16
 800e4a8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800e4aa:	687b      	ldr	r3, [r7, #4]
 800e4ac:	681b      	ldr	r3, [r3, #0]
 800e4ae:	689b      	ldr	r3, [r3, #8]
 800e4b0:	0e5b      	lsrs	r3, r3, #25
 800e4b2:	b2db      	uxtb	r3, r3
 800e4b4:	f003 0307 	and.w	r3, r3, #7
 800e4b8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800e4ba:	687b      	ldr	r3, [r7, #4]
 800e4bc:	681b      	ldr	r3, [r3, #0]
 800e4be:	689b      	ldr	r3, [r3, #8]
 800e4c0:	0f5b      	lsrs	r3, r3, #29
 800e4c2:	b2db      	uxtb	r3, r3
 800e4c4:	f003 0307 	and.w	r3, r3, #7
 800e4c8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800e4ca:	7bbb      	ldrb	r3, [r7, #14]
 800e4cc:	7b3a      	ldrb	r2, [r7, #12]
 800e4ce:	4911      	ldr	r1, [pc, #68]	; (800e514 <UARTEx_SetNbDataToProcess+0x94>)
 800e4d0:	5c8a      	ldrb	r2, [r1, r2]
 800e4d2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800e4d6:	7b3a      	ldrb	r2, [r7, #12]
 800e4d8:	490f      	ldr	r1, [pc, #60]	; (800e518 <UARTEx_SetNbDataToProcess+0x98>)
 800e4da:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800e4dc:	fb93 f3f2 	sdiv	r3, r3, r2
 800e4e0:	b29a      	uxth	r2, r3
 800e4e2:	687b      	ldr	r3, [r7, #4]
 800e4e4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800e4e8:	7bfb      	ldrb	r3, [r7, #15]
 800e4ea:	7b7a      	ldrb	r2, [r7, #13]
 800e4ec:	4909      	ldr	r1, [pc, #36]	; (800e514 <UARTEx_SetNbDataToProcess+0x94>)
 800e4ee:	5c8a      	ldrb	r2, [r1, r2]
 800e4f0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800e4f4:	7b7a      	ldrb	r2, [r7, #13]
 800e4f6:	4908      	ldr	r1, [pc, #32]	; (800e518 <UARTEx_SetNbDataToProcess+0x98>)
 800e4f8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800e4fa:	fb93 f3f2 	sdiv	r3, r3, r2
 800e4fe:	b29a      	uxth	r2, r3
 800e500:	687b      	ldr	r3, [r7, #4]
 800e502:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800e506:	bf00      	nop
 800e508:	3714      	adds	r7, #20
 800e50a:	46bd      	mov	sp, r7
 800e50c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e510:	4770      	bx	lr
 800e512:	bf00      	nop
 800e514:	0801220c 	.word	0x0801220c
 800e518:	08012214 	.word	0x08012214

0800e51c <__errno>:
 800e51c:	4b01      	ldr	r3, [pc, #4]	; (800e524 <__errno+0x8>)
 800e51e:	6818      	ldr	r0, [r3, #0]
 800e520:	4770      	bx	lr
 800e522:	bf00      	nop
 800e524:	24000088 	.word	0x24000088

0800e528 <_fclose_r>:
 800e528:	b570      	push	{r4, r5, r6, lr}
 800e52a:	4605      	mov	r5, r0
 800e52c:	460c      	mov	r4, r1
 800e52e:	b911      	cbnz	r1, 800e536 <_fclose_r+0xe>
 800e530:	2600      	movs	r6, #0
 800e532:	4630      	mov	r0, r6
 800e534:	bd70      	pop	{r4, r5, r6, pc}
 800e536:	b118      	cbz	r0, 800e540 <_fclose_r+0x18>
 800e538:	6983      	ldr	r3, [r0, #24]
 800e53a:	b90b      	cbnz	r3, 800e540 <_fclose_r+0x18>
 800e53c:	f000 fa18 	bl	800e970 <__sinit>
 800e540:	4b2c      	ldr	r3, [pc, #176]	; (800e5f4 <_fclose_r+0xcc>)
 800e542:	429c      	cmp	r4, r3
 800e544:	d114      	bne.n	800e570 <_fclose_r+0x48>
 800e546:	686c      	ldr	r4, [r5, #4]
 800e548:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e54a:	07d8      	lsls	r0, r3, #31
 800e54c:	d405      	bmi.n	800e55a <_fclose_r+0x32>
 800e54e:	89a3      	ldrh	r3, [r4, #12]
 800e550:	0599      	lsls	r1, r3, #22
 800e552:	d402      	bmi.n	800e55a <_fclose_r+0x32>
 800e554:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e556:	f000 fbfd 	bl	800ed54 <__retarget_lock_acquire_recursive>
 800e55a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e55e:	b98b      	cbnz	r3, 800e584 <_fclose_r+0x5c>
 800e560:	6e66      	ldr	r6, [r4, #100]	; 0x64
 800e562:	f016 0601 	ands.w	r6, r6, #1
 800e566:	d1e3      	bne.n	800e530 <_fclose_r+0x8>
 800e568:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e56a:	f000 fbf4 	bl	800ed56 <__retarget_lock_release_recursive>
 800e56e:	e7e0      	b.n	800e532 <_fclose_r+0xa>
 800e570:	4b21      	ldr	r3, [pc, #132]	; (800e5f8 <_fclose_r+0xd0>)
 800e572:	429c      	cmp	r4, r3
 800e574:	d101      	bne.n	800e57a <_fclose_r+0x52>
 800e576:	68ac      	ldr	r4, [r5, #8]
 800e578:	e7e6      	b.n	800e548 <_fclose_r+0x20>
 800e57a:	4b20      	ldr	r3, [pc, #128]	; (800e5fc <_fclose_r+0xd4>)
 800e57c:	429c      	cmp	r4, r3
 800e57e:	bf08      	it	eq
 800e580:	68ec      	ldreq	r4, [r5, #12]
 800e582:	e7e1      	b.n	800e548 <_fclose_r+0x20>
 800e584:	4621      	mov	r1, r4
 800e586:	4628      	mov	r0, r5
 800e588:	f000 f842 	bl	800e610 <__sflush_r>
 800e58c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800e58e:	4606      	mov	r6, r0
 800e590:	b133      	cbz	r3, 800e5a0 <_fclose_r+0x78>
 800e592:	6a21      	ldr	r1, [r4, #32]
 800e594:	4628      	mov	r0, r5
 800e596:	4798      	blx	r3
 800e598:	2800      	cmp	r0, #0
 800e59a:	bfb8      	it	lt
 800e59c:	f04f 36ff 	movlt.w	r6, #4294967295
 800e5a0:	89a3      	ldrh	r3, [r4, #12]
 800e5a2:	061a      	lsls	r2, r3, #24
 800e5a4:	d503      	bpl.n	800e5ae <_fclose_r+0x86>
 800e5a6:	6921      	ldr	r1, [r4, #16]
 800e5a8:	4628      	mov	r0, r5
 800e5aa:	f000 fc51 	bl	800ee50 <_free_r>
 800e5ae:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e5b0:	b141      	cbz	r1, 800e5c4 <_fclose_r+0x9c>
 800e5b2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e5b6:	4299      	cmp	r1, r3
 800e5b8:	d002      	beq.n	800e5c0 <_fclose_r+0x98>
 800e5ba:	4628      	mov	r0, r5
 800e5bc:	f000 fc48 	bl	800ee50 <_free_r>
 800e5c0:	2300      	movs	r3, #0
 800e5c2:	6363      	str	r3, [r4, #52]	; 0x34
 800e5c4:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800e5c6:	b121      	cbz	r1, 800e5d2 <_fclose_r+0xaa>
 800e5c8:	4628      	mov	r0, r5
 800e5ca:	f000 fc41 	bl	800ee50 <_free_r>
 800e5ce:	2300      	movs	r3, #0
 800e5d0:	64a3      	str	r3, [r4, #72]	; 0x48
 800e5d2:	f000 f9b5 	bl	800e940 <__sfp_lock_acquire>
 800e5d6:	2300      	movs	r3, #0
 800e5d8:	81a3      	strh	r3, [r4, #12]
 800e5da:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e5dc:	07db      	lsls	r3, r3, #31
 800e5de:	d402      	bmi.n	800e5e6 <_fclose_r+0xbe>
 800e5e0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e5e2:	f000 fbb8 	bl	800ed56 <__retarget_lock_release_recursive>
 800e5e6:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e5e8:	f000 fbb3 	bl	800ed52 <__retarget_lock_close_recursive>
 800e5ec:	f000 f9ae 	bl	800e94c <__sfp_lock_release>
 800e5f0:	e79f      	b.n	800e532 <_fclose_r+0xa>
 800e5f2:	bf00      	nop
 800e5f4:	0801223c 	.word	0x0801223c
 800e5f8:	0801225c 	.word	0x0801225c
 800e5fc:	0801221c 	.word	0x0801221c

0800e600 <fclose>:
 800e600:	4b02      	ldr	r3, [pc, #8]	; (800e60c <fclose+0xc>)
 800e602:	4601      	mov	r1, r0
 800e604:	6818      	ldr	r0, [r3, #0]
 800e606:	f7ff bf8f 	b.w	800e528 <_fclose_r>
 800e60a:	bf00      	nop
 800e60c:	24000088 	.word	0x24000088

0800e610 <__sflush_r>:
 800e610:	898a      	ldrh	r2, [r1, #12]
 800e612:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e616:	4605      	mov	r5, r0
 800e618:	0710      	lsls	r0, r2, #28
 800e61a:	460c      	mov	r4, r1
 800e61c:	d458      	bmi.n	800e6d0 <__sflush_r+0xc0>
 800e61e:	684b      	ldr	r3, [r1, #4]
 800e620:	2b00      	cmp	r3, #0
 800e622:	dc05      	bgt.n	800e630 <__sflush_r+0x20>
 800e624:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800e626:	2b00      	cmp	r3, #0
 800e628:	dc02      	bgt.n	800e630 <__sflush_r+0x20>
 800e62a:	2000      	movs	r0, #0
 800e62c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e630:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e632:	2e00      	cmp	r6, #0
 800e634:	d0f9      	beq.n	800e62a <__sflush_r+0x1a>
 800e636:	2300      	movs	r3, #0
 800e638:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800e63c:	682f      	ldr	r7, [r5, #0]
 800e63e:	602b      	str	r3, [r5, #0]
 800e640:	d032      	beq.n	800e6a8 <__sflush_r+0x98>
 800e642:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800e644:	89a3      	ldrh	r3, [r4, #12]
 800e646:	075a      	lsls	r2, r3, #29
 800e648:	d505      	bpl.n	800e656 <__sflush_r+0x46>
 800e64a:	6863      	ldr	r3, [r4, #4]
 800e64c:	1ac0      	subs	r0, r0, r3
 800e64e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800e650:	b10b      	cbz	r3, 800e656 <__sflush_r+0x46>
 800e652:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800e654:	1ac0      	subs	r0, r0, r3
 800e656:	2300      	movs	r3, #0
 800e658:	4602      	mov	r2, r0
 800e65a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e65c:	6a21      	ldr	r1, [r4, #32]
 800e65e:	4628      	mov	r0, r5
 800e660:	47b0      	blx	r6
 800e662:	1c43      	adds	r3, r0, #1
 800e664:	89a3      	ldrh	r3, [r4, #12]
 800e666:	d106      	bne.n	800e676 <__sflush_r+0x66>
 800e668:	6829      	ldr	r1, [r5, #0]
 800e66a:	291d      	cmp	r1, #29
 800e66c:	d82c      	bhi.n	800e6c8 <__sflush_r+0xb8>
 800e66e:	4a2a      	ldr	r2, [pc, #168]	; (800e718 <__sflush_r+0x108>)
 800e670:	40ca      	lsrs	r2, r1
 800e672:	07d6      	lsls	r6, r2, #31
 800e674:	d528      	bpl.n	800e6c8 <__sflush_r+0xb8>
 800e676:	2200      	movs	r2, #0
 800e678:	6062      	str	r2, [r4, #4]
 800e67a:	04d9      	lsls	r1, r3, #19
 800e67c:	6922      	ldr	r2, [r4, #16]
 800e67e:	6022      	str	r2, [r4, #0]
 800e680:	d504      	bpl.n	800e68c <__sflush_r+0x7c>
 800e682:	1c42      	adds	r2, r0, #1
 800e684:	d101      	bne.n	800e68a <__sflush_r+0x7a>
 800e686:	682b      	ldr	r3, [r5, #0]
 800e688:	b903      	cbnz	r3, 800e68c <__sflush_r+0x7c>
 800e68a:	6560      	str	r0, [r4, #84]	; 0x54
 800e68c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e68e:	602f      	str	r7, [r5, #0]
 800e690:	2900      	cmp	r1, #0
 800e692:	d0ca      	beq.n	800e62a <__sflush_r+0x1a>
 800e694:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e698:	4299      	cmp	r1, r3
 800e69a:	d002      	beq.n	800e6a2 <__sflush_r+0x92>
 800e69c:	4628      	mov	r0, r5
 800e69e:	f000 fbd7 	bl	800ee50 <_free_r>
 800e6a2:	2000      	movs	r0, #0
 800e6a4:	6360      	str	r0, [r4, #52]	; 0x34
 800e6a6:	e7c1      	b.n	800e62c <__sflush_r+0x1c>
 800e6a8:	6a21      	ldr	r1, [r4, #32]
 800e6aa:	2301      	movs	r3, #1
 800e6ac:	4628      	mov	r0, r5
 800e6ae:	47b0      	blx	r6
 800e6b0:	1c41      	adds	r1, r0, #1
 800e6b2:	d1c7      	bne.n	800e644 <__sflush_r+0x34>
 800e6b4:	682b      	ldr	r3, [r5, #0]
 800e6b6:	2b00      	cmp	r3, #0
 800e6b8:	d0c4      	beq.n	800e644 <__sflush_r+0x34>
 800e6ba:	2b1d      	cmp	r3, #29
 800e6bc:	d001      	beq.n	800e6c2 <__sflush_r+0xb2>
 800e6be:	2b16      	cmp	r3, #22
 800e6c0:	d101      	bne.n	800e6c6 <__sflush_r+0xb6>
 800e6c2:	602f      	str	r7, [r5, #0]
 800e6c4:	e7b1      	b.n	800e62a <__sflush_r+0x1a>
 800e6c6:	89a3      	ldrh	r3, [r4, #12]
 800e6c8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e6cc:	81a3      	strh	r3, [r4, #12]
 800e6ce:	e7ad      	b.n	800e62c <__sflush_r+0x1c>
 800e6d0:	690f      	ldr	r7, [r1, #16]
 800e6d2:	2f00      	cmp	r7, #0
 800e6d4:	d0a9      	beq.n	800e62a <__sflush_r+0x1a>
 800e6d6:	0793      	lsls	r3, r2, #30
 800e6d8:	680e      	ldr	r6, [r1, #0]
 800e6da:	bf08      	it	eq
 800e6dc:	694b      	ldreq	r3, [r1, #20]
 800e6de:	600f      	str	r7, [r1, #0]
 800e6e0:	bf18      	it	ne
 800e6e2:	2300      	movne	r3, #0
 800e6e4:	eba6 0807 	sub.w	r8, r6, r7
 800e6e8:	608b      	str	r3, [r1, #8]
 800e6ea:	f1b8 0f00 	cmp.w	r8, #0
 800e6ee:	dd9c      	ble.n	800e62a <__sflush_r+0x1a>
 800e6f0:	6a21      	ldr	r1, [r4, #32]
 800e6f2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800e6f4:	4643      	mov	r3, r8
 800e6f6:	463a      	mov	r2, r7
 800e6f8:	4628      	mov	r0, r5
 800e6fa:	47b0      	blx	r6
 800e6fc:	2800      	cmp	r0, #0
 800e6fe:	dc06      	bgt.n	800e70e <__sflush_r+0xfe>
 800e700:	89a3      	ldrh	r3, [r4, #12]
 800e702:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e706:	81a3      	strh	r3, [r4, #12]
 800e708:	f04f 30ff 	mov.w	r0, #4294967295
 800e70c:	e78e      	b.n	800e62c <__sflush_r+0x1c>
 800e70e:	4407      	add	r7, r0
 800e710:	eba8 0800 	sub.w	r8, r8, r0
 800e714:	e7e9      	b.n	800e6ea <__sflush_r+0xda>
 800e716:	bf00      	nop
 800e718:	20400001 	.word	0x20400001

0800e71c <_fflush_r>:
 800e71c:	b538      	push	{r3, r4, r5, lr}
 800e71e:	690b      	ldr	r3, [r1, #16]
 800e720:	4605      	mov	r5, r0
 800e722:	460c      	mov	r4, r1
 800e724:	b913      	cbnz	r3, 800e72c <_fflush_r+0x10>
 800e726:	2500      	movs	r5, #0
 800e728:	4628      	mov	r0, r5
 800e72a:	bd38      	pop	{r3, r4, r5, pc}
 800e72c:	b118      	cbz	r0, 800e736 <_fflush_r+0x1a>
 800e72e:	6983      	ldr	r3, [r0, #24]
 800e730:	b90b      	cbnz	r3, 800e736 <_fflush_r+0x1a>
 800e732:	f000 f91d 	bl	800e970 <__sinit>
 800e736:	4b14      	ldr	r3, [pc, #80]	; (800e788 <_fflush_r+0x6c>)
 800e738:	429c      	cmp	r4, r3
 800e73a:	d11b      	bne.n	800e774 <_fflush_r+0x58>
 800e73c:	686c      	ldr	r4, [r5, #4]
 800e73e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e742:	2b00      	cmp	r3, #0
 800e744:	d0ef      	beq.n	800e726 <_fflush_r+0xa>
 800e746:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800e748:	07d0      	lsls	r0, r2, #31
 800e74a:	d404      	bmi.n	800e756 <_fflush_r+0x3a>
 800e74c:	0599      	lsls	r1, r3, #22
 800e74e:	d402      	bmi.n	800e756 <_fflush_r+0x3a>
 800e750:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e752:	f000 faff 	bl	800ed54 <__retarget_lock_acquire_recursive>
 800e756:	4628      	mov	r0, r5
 800e758:	4621      	mov	r1, r4
 800e75a:	f7ff ff59 	bl	800e610 <__sflush_r>
 800e75e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e760:	07da      	lsls	r2, r3, #31
 800e762:	4605      	mov	r5, r0
 800e764:	d4e0      	bmi.n	800e728 <_fflush_r+0xc>
 800e766:	89a3      	ldrh	r3, [r4, #12]
 800e768:	059b      	lsls	r3, r3, #22
 800e76a:	d4dd      	bmi.n	800e728 <_fflush_r+0xc>
 800e76c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e76e:	f000 faf2 	bl	800ed56 <__retarget_lock_release_recursive>
 800e772:	e7d9      	b.n	800e728 <_fflush_r+0xc>
 800e774:	4b05      	ldr	r3, [pc, #20]	; (800e78c <_fflush_r+0x70>)
 800e776:	429c      	cmp	r4, r3
 800e778:	d101      	bne.n	800e77e <_fflush_r+0x62>
 800e77a:	68ac      	ldr	r4, [r5, #8]
 800e77c:	e7df      	b.n	800e73e <_fflush_r+0x22>
 800e77e:	4b04      	ldr	r3, [pc, #16]	; (800e790 <_fflush_r+0x74>)
 800e780:	429c      	cmp	r4, r3
 800e782:	bf08      	it	eq
 800e784:	68ec      	ldreq	r4, [r5, #12]
 800e786:	e7da      	b.n	800e73e <_fflush_r+0x22>
 800e788:	0801223c 	.word	0x0801223c
 800e78c:	0801225c 	.word	0x0801225c
 800e790:	0801221c 	.word	0x0801221c

0800e794 <fflush>:
 800e794:	4601      	mov	r1, r0
 800e796:	b920      	cbnz	r0, 800e7a2 <fflush+0xe>
 800e798:	4b04      	ldr	r3, [pc, #16]	; (800e7ac <fflush+0x18>)
 800e79a:	4905      	ldr	r1, [pc, #20]	; (800e7b0 <fflush+0x1c>)
 800e79c:	6818      	ldr	r0, [r3, #0]
 800e79e:	f000 ba94 	b.w	800ecca <_fwalk_reent>
 800e7a2:	4b04      	ldr	r3, [pc, #16]	; (800e7b4 <fflush+0x20>)
 800e7a4:	6818      	ldr	r0, [r3, #0]
 800e7a6:	f7ff bfb9 	b.w	800e71c <_fflush_r>
 800e7aa:	bf00      	nop
 800e7ac:	0801227c 	.word	0x0801227c
 800e7b0:	0800e71d 	.word	0x0800e71d
 800e7b4:	24000088 	.word	0x24000088

0800e7b8 <_fgets_r>:
 800e7b8:	2a01      	cmp	r2, #1
 800e7ba:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e7be:	4680      	mov	r8, r0
 800e7c0:	460d      	mov	r5, r1
 800e7c2:	4617      	mov	r7, r2
 800e7c4:	461c      	mov	r4, r3
 800e7c6:	dc03      	bgt.n	800e7d0 <_fgets_r+0x18>
 800e7c8:	2500      	movs	r5, #0
 800e7ca:	4628      	mov	r0, r5
 800e7cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e7d0:	b118      	cbz	r0, 800e7da <_fgets_r+0x22>
 800e7d2:	6983      	ldr	r3, [r0, #24]
 800e7d4:	b90b      	cbnz	r3, 800e7da <_fgets_r+0x22>
 800e7d6:	f000 f8cb 	bl	800e970 <__sinit>
 800e7da:	4b31      	ldr	r3, [pc, #196]	; (800e8a0 <_fgets_r+0xe8>)
 800e7dc:	429c      	cmp	r4, r3
 800e7de:	d120      	bne.n	800e822 <_fgets_r+0x6a>
 800e7e0:	f8d8 4004 	ldr.w	r4, [r8, #4]
 800e7e4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e7e6:	07de      	lsls	r6, r3, #31
 800e7e8:	d405      	bmi.n	800e7f6 <_fgets_r+0x3e>
 800e7ea:	89a3      	ldrh	r3, [r4, #12]
 800e7ec:	0598      	lsls	r0, r3, #22
 800e7ee:	d402      	bmi.n	800e7f6 <_fgets_r+0x3e>
 800e7f0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e7f2:	f000 faaf 	bl	800ed54 <__retarget_lock_acquire_recursive>
 800e7f6:	3f01      	subs	r7, #1
 800e7f8:	46a9      	mov	r9, r5
 800e7fa:	6866      	ldr	r6, [r4, #4]
 800e7fc:	b9f6      	cbnz	r6, 800e83c <_fgets_r+0x84>
 800e7fe:	4621      	mov	r1, r4
 800e800:	4640      	mov	r0, r8
 800e802:	f000 fc21 	bl	800f048 <__srefill_r>
 800e806:	b1c0      	cbz	r0, 800e83a <_fgets_r+0x82>
 800e808:	45a9      	cmp	r9, r5
 800e80a:	d145      	bne.n	800e898 <_fgets_r+0xe0>
 800e80c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e80e:	07d9      	lsls	r1, r3, #31
 800e810:	d4da      	bmi.n	800e7c8 <_fgets_r+0x10>
 800e812:	89a5      	ldrh	r5, [r4, #12]
 800e814:	f415 7500 	ands.w	r5, r5, #512	; 0x200
 800e818:	d1d6      	bne.n	800e7c8 <_fgets_r+0x10>
 800e81a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e81c:	f000 fa9b 	bl	800ed56 <__retarget_lock_release_recursive>
 800e820:	e7d3      	b.n	800e7ca <_fgets_r+0x12>
 800e822:	4b20      	ldr	r3, [pc, #128]	; (800e8a4 <_fgets_r+0xec>)
 800e824:	429c      	cmp	r4, r3
 800e826:	d102      	bne.n	800e82e <_fgets_r+0x76>
 800e828:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800e82c:	e7da      	b.n	800e7e4 <_fgets_r+0x2c>
 800e82e:	4b1e      	ldr	r3, [pc, #120]	; (800e8a8 <_fgets_r+0xf0>)
 800e830:	429c      	cmp	r4, r3
 800e832:	bf08      	it	eq
 800e834:	f8d8 400c 	ldreq.w	r4, [r8, #12]
 800e838:	e7d4      	b.n	800e7e4 <_fgets_r+0x2c>
 800e83a:	6866      	ldr	r6, [r4, #4]
 800e83c:	f8d4 a000 	ldr.w	sl, [r4]
 800e840:	42be      	cmp	r6, r7
 800e842:	bf28      	it	cs
 800e844:	463e      	movcs	r6, r7
 800e846:	4632      	mov	r2, r6
 800e848:	210a      	movs	r1, #10
 800e84a:	4650      	mov	r0, sl
 800e84c:	f7f1 fd48 	bl	80002e0 <memchr>
 800e850:	6863      	ldr	r3, [r4, #4]
 800e852:	b1a0      	cbz	r0, 800e87e <_fgets_r+0xc6>
 800e854:	3001      	adds	r0, #1
 800e856:	eba0 060a 	sub.w	r6, r0, sl
 800e85a:	1b9b      	subs	r3, r3, r6
 800e85c:	e9c4 0300 	strd	r0, r3, [r4]
 800e860:	4632      	mov	r2, r6
 800e862:	4651      	mov	r1, sl
 800e864:	4648      	mov	r0, r9
 800e866:	f000 fadd 	bl	800ee24 <memcpy>
 800e86a:	2300      	movs	r3, #0
 800e86c:	f809 3006 	strb.w	r3, [r9, r6]
 800e870:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e872:	07da      	lsls	r2, r3, #31
 800e874:	d4a9      	bmi.n	800e7ca <_fgets_r+0x12>
 800e876:	89a3      	ldrh	r3, [r4, #12]
 800e878:	059b      	lsls	r3, r3, #22
 800e87a:	d4a6      	bmi.n	800e7ca <_fgets_r+0x12>
 800e87c:	e7cd      	b.n	800e81a <_fgets_r+0x62>
 800e87e:	1b9b      	subs	r3, r3, r6
 800e880:	6063      	str	r3, [r4, #4]
 800e882:	6823      	ldr	r3, [r4, #0]
 800e884:	4433      	add	r3, r6
 800e886:	4648      	mov	r0, r9
 800e888:	6023      	str	r3, [r4, #0]
 800e88a:	4632      	mov	r2, r6
 800e88c:	4651      	mov	r1, sl
 800e88e:	f000 fac9 	bl	800ee24 <memcpy>
 800e892:	1bbf      	subs	r7, r7, r6
 800e894:	44b1      	add	r9, r6
 800e896:	d1b0      	bne.n	800e7fa <_fgets_r+0x42>
 800e898:	2300      	movs	r3, #0
 800e89a:	f889 3000 	strb.w	r3, [r9]
 800e89e:	e7e7      	b.n	800e870 <_fgets_r+0xb8>
 800e8a0:	0801223c 	.word	0x0801223c
 800e8a4:	0801225c 	.word	0x0801225c
 800e8a8:	0801221c 	.word	0x0801221c

0800e8ac <fgets>:
 800e8ac:	4613      	mov	r3, r2
 800e8ae:	460a      	mov	r2, r1
 800e8b0:	4601      	mov	r1, r0
 800e8b2:	4802      	ldr	r0, [pc, #8]	; (800e8bc <fgets+0x10>)
 800e8b4:	6800      	ldr	r0, [r0, #0]
 800e8b6:	f7ff bf7f 	b.w	800e7b8 <_fgets_r>
 800e8ba:	bf00      	nop
 800e8bc:	24000088 	.word	0x24000088

0800e8c0 <std>:
 800e8c0:	2300      	movs	r3, #0
 800e8c2:	b510      	push	{r4, lr}
 800e8c4:	4604      	mov	r4, r0
 800e8c6:	e9c0 3300 	strd	r3, r3, [r0]
 800e8ca:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800e8ce:	6083      	str	r3, [r0, #8]
 800e8d0:	8181      	strh	r1, [r0, #12]
 800e8d2:	6643      	str	r3, [r0, #100]	; 0x64
 800e8d4:	81c2      	strh	r2, [r0, #14]
 800e8d6:	6183      	str	r3, [r0, #24]
 800e8d8:	4619      	mov	r1, r3
 800e8da:	2208      	movs	r2, #8
 800e8dc:	305c      	adds	r0, #92	; 0x5c
 800e8de:	f000 faaf 	bl	800ee40 <memset>
 800e8e2:	4b05      	ldr	r3, [pc, #20]	; (800e8f8 <std+0x38>)
 800e8e4:	6263      	str	r3, [r4, #36]	; 0x24
 800e8e6:	4b05      	ldr	r3, [pc, #20]	; (800e8fc <std+0x3c>)
 800e8e8:	62a3      	str	r3, [r4, #40]	; 0x28
 800e8ea:	4b05      	ldr	r3, [pc, #20]	; (800e900 <std+0x40>)
 800e8ec:	62e3      	str	r3, [r4, #44]	; 0x2c
 800e8ee:	4b05      	ldr	r3, [pc, #20]	; (800e904 <std+0x44>)
 800e8f0:	6224      	str	r4, [r4, #32]
 800e8f2:	6323      	str	r3, [r4, #48]	; 0x30
 800e8f4:	bd10      	pop	{r4, pc}
 800e8f6:	bf00      	nop
 800e8f8:	0800f17d 	.word	0x0800f17d
 800e8fc:	0800f19f 	.word	0x0800f19f
 800e900:	0800f1d7 	.word	0x0800f1d7
 800e904:	0800f1fb 	.word	0x0800f1fb

0800e908 <_cleanup_r>:
 800e908:	4901      	ldr	r1, [pc, #4]	; (800e910 <_cleanup_r+0x8>)
 800e90a:	f000 b9de 	b.w	800ecca <_fwalk_reent>
 800e90e:	bf00      	nop
 800e910:	0800e71d 	.word	0x0800e71d

0800e914 <__sfmoreglue>:
 800e914:	b570      	push	{r4, r5, r6, lr}
 800e916:	2268      	movs	r2, #104	; 0x68
 800e918:	1e4d      	subs	r5, r1, #1
 800e91a:	4355      	muls	r5, r2
 800e91c:	460e      	mov	r6, r1
 800e91e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800e922:	f000 fb01 	bl	800ef28 <_malloc_r>
 800e926:	4604      	mov	r4, r0
 800e928:	b140      	cbz	r0, 800e93c <__sfmoreglue+0x28>
 800e92a:	2100      	movs	r1, #0
 800e92c:	e9c0 1600 	strd	r1, r6, [r0]
 800e930:	300c      	adds	r0, #12
 800e932:	60a0      	str	r0, [r4, #8]
 800e934:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800e938:	f000 fa82 	bl	800ee40 <memset>
 800e93c:	4620      	mov	r0, r4
 800e93e:	bd70      	pop	{r4, r5, r6, pc}

0800e940 <__sfp_lock_acquire>:
 800e940:	4801      	ldr	r0, [pc, #4]	; (800e948 <__sfp_lock_acquire+0x8>)
 800e942:	f000 ba07 	b.w	800ed54 <__retarget_lock_acquire_recursive>
 800e946:	bf00      	nop
 800e948:	24000a95 	.word	0x24000a95

0800e94c <__sfp_lock_release>:
 800e94c:	4801      	ldr	r0, [pc, #4]	; (800e954 <__sfp_lock_release+0x8>)
 800e94e:	f000 ba02 	b.w	800ed56 <__retarget_lock_release_recursive>
 800e952:	bf00      	nop
 800e954:	24000a95 	.word	0x24000a95

0800e958 <__sinit_lock_acquire>:
 800e958:	4801      	ldr	r0, [pc, #4]	; (800e960 <__sinit_lock_acquire+0x8>)
 800e95a:	f000 b9fb 	b.w	800ed54 <__retarget_lock_acquire_recursive>
 800e95e:	bf00      	nop
 800e960:	24000a96 	.word	0x24000a96

0800e964 <__sinit_lock_release>:
 800e964:	4801      	ldr	r0, [pc, #4]	; (800e96c <__sinit_lock_release+0x8>)
 800e966:	f000 b9f6 	b.w	800ed56 <__retarget_lock_release_recursive>
 800e96a:	bf00      	nop
 800e96c:	24000a96 	.word	0x24000a96

0800e970 <__sinit>:
 800e970:	b510      	push	{r4, lr}
 800e972:	4604      	mov	r4, r0
 800e974:	f7ff fff0 	bl	800e958 <__sinit_lock_acquire>
 800e978:	69a3      	ldr	r3, [r4, #24]
 800e97a:	b11b      	cbz	r3, 800e984 <__sinit+0x14>
 800e97c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e980:	f7ff bff0 	b.w	800e964 <__sinit_lock_release>
 800e984:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800e988:	6523      	str	r3, [r4, #80]	; 0x50
 800e98a:	4b13      	ldr	r3, [pc, #76]	; (800e9d8 <__sinit+0x68>)
 800e98c:	4a13      	ldr	r2, [pc, #76]	; (800e9dc <__sinit+0x6c>)
 800e98e:	681b      	ldr	r3, [r3, #0]
 800e990:	62a2      	str	r2, [r4, #40]	; 0x28
 800e992:	42a3      	cmp	r3, r4
 800e994:	bf04      	itt	eq
 800e996:	2301      	moveq	r3, #1
 800e998:	61a3      	streq	r3, [r4, #24]
 800e99a:	4620      	mov	r0, r4
 800e99c:	f000 f820 	bl	800e9e0 <__sfp>
 800e9a0:	6060      	str	r0, [r4, #4]
 800e9a2:	4620      	mov	r0, r4
 800e9a4:	f000 f81c 	bl	800e9e0 <__sfp>
 800e9a8:	60a0      	str	r0, [r4, #8]
 800e9aa:	4620      	mov	r0, r4
 800e9ac:	f000 f818 	bl	800e9e0 <__sfp>
 800e9b0:	2200      	movs	r2, #0
 800e9b2:	60e0      	str	r0, [r4, #12]
 800e9b4:	2104      	movs	r1, #4
 800e9b6:	6860      	ldr	r0, [r4, #4]
 800e9b8:	f7ff ff82 	bl	800e8c0 <std>
 800e9bc:	68a0      	ldr	r0, [r4, #8]
 800e9be:	2201      	movs	r2, #1
 800e9c0:	2109      	movs	r1, #9
 800e9c2:	f7ff ff7d 	bl	800e8c0 <std>
 800e9c6:	68e0      	ldr	r0, [r4, #12]
 800e9c8:	2202      	movs	r2, #2
 800e9ca:	2112      	movs	r1, #18
 800e9cc:	f7ff ff78 	bl	800e8c0 <std>
 800e9d0:	2301      	movs	r3, #1
 800e9d2:	61a3      	str	r3, [r4, #24]
 800e9d4:	e7d2      	b.n	800e97c <__sinit+0xc>
 800e9d6:	bf00      	nop
 800e9d8:	0801227c 	.word	0x0801227c
 800e9dc:	0800e909 	.word	0x0800e909

0800e9e0 <__sfp>:
 800e9e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e9e2:	4607      	mov	r7, r0
 800e9e4:	f7ff ffac 	bl	800e940 <__sfp_lock_acquire>
 800e9e8:	4b1e      	ldr	r3, [pc, #120]	; (800ea64 <__sfp+0x84>)
 800e9ea:	681e      	ldr	r6, [r3, #0]
 800e9ec:	69b3      	ldr	r3, [r6, #24]
 800e9ee:	b913      	cbnz	r3, 800e9f6 <__sfp+0x16>
 800e9f0:	4630      	mov	r0, r6
 800e9f2:	f7ff ffbd 	bl	800e970 <__sinit>
 800e9f6:	3648      	adds	r6, #72	; 0x48
 800e9f8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800e9fc:	3b01      	subs	r3, #1
 800e9fe:	d503      	bpl.n	800ea08 <__sfp+0x28>
 800ea00:	6833      	ldr	r3, [r6, #0]
 800ea02:	b30b      	cbz	r3, 800ea48 <__sfp+0x68>
 800ea04:	6836      	ldr	r6, [r6, #0]
 800ea06:	e7f7      	b.n	800e9f8 <__sfp+0x18>
 800ea08:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800ea0c:	b9d5      	cbnz	r5, 800ea44 <__sfp+0x64>
 800ea0e:	4b16      	ldr	r3, [pc, #88]	; (800ea68 <__sfp+0x88>)
 800ea10:	60e3      	str	r3, [r4, #12]
 800ea12:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800ea16:	6665      	str	r5, [r4, #100]	; 0x64
 800ea18:	f000 f99a 	bl	800ed50 <__retarget_lock_init_recursive>
 800ea1c:	f7ff ff96 	bl	800e94c <__sfp_lock_release>
 800ea20:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800ea24:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800ea28:	6025      	str	r5, [r4, #0]
 800ea2a:	61a5      	str	r5, [r4, #24]
 800ea2c:	2208      	movs	r2, #8
 800ea2e:	4629      	mov	r1, r5
 800ea30:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800ea34:	f000 fa04 	bl	800ee40 <memset>
 800ea38:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800ea3c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800ea40:	4620      	mov	r0, r4
 800ea42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ea44:	3468      	adds	r4, #104	; 0x68
 800ea46:	e7d9      	b.n	800e9fc <__sfp+0x1c>
 800ea48:	2104      	movs	r1, #4
 800ea4a:	4638      	mov	r0, r7
 800ea4c:	f7ff ff62 	bl	800e914 <__sfmoreglue>
 800ea50:	4604      	mov	r4, r0
 800ea52:	6030      	str	r0, [r6, #0]
 800ea54:	2800      	cmp	r0, #0
 800ea56:	d1d5      	bne.n	800ea04 <__sfp+0x24>
 800ea58:	f7ff ff78 	bl	800e94c <__sfp_lock_release>
 800ea5c:	230c      	movs	r3, #12
 800ea5e:	603b      	str	r3, [r7, #0]
 800ea60:	e7ee      	b.n	800ea40 <__sfp+0x60>
 800ea62:	bf00      	nop
 800ea64:	0801227c 	.word	0x0801227c
 800ea68:	ffff0001 	.word	0xffff0001

0800ea6c <_fopen_r>:
 800ea6c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ea6e:	460f      	mov	r7, r1
 800ea70:	4611      	mov	r1, r2
 800ea72:	aa01      	add	r2, sp, #4
 800ea74:	4605      	mov	r5, r0
 800ea76:	f001 f9c3 	bl	800fe00 <__sflags>
 800ea7a:	4606      	mov	r6, r0
 800ea7c:	b918      	cbnz	r0, 800ea86 <_fopen_r+0x1a>
 800ea7e:	2400      	movs	r4, #0
 800ea80:	4620      	mov	r0, r4
 800ea82:	b003      	add	sp, #12
 800ea84:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ea86:	4628      	mov	r0, r5
 800ea88:	f7ff ffaa 	bl	800e9e0 <__sfp>
 800ea8c:	4604      	mov	r4, r0
 800ea8e:	2800      	cmp	r0, #0
 800ea90:	d0f5      	beq.n	800ea7e <_fopen_r+0x12>
 800ea92:	4639      	mov	r1, r7
 800ea94:	9a01      	ldr	r2, [sp, #4]
 800ea96:	f44f 73db 	mov.w	r3, #438	; 0x1b6
 800ea9a:	4628      	mov	r0, r5
 800ea9c:	f000 fab8 	bl	800f010 <_open_r>
 800eaa0:	1e07      	subs	r7, r0, #0
 800eaa2:	da09      	bge.n	800eab8 <_fopen_r+0x4c>
 800eaa4:	2500      	movs	r5, #0
 800eaa6:	f7ff ff4b 	bl	800e940 <__sfp_lock_acquire>
 800eaaa:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800eaac:	81a5      	strh	r5, [r4, #12]
 800eaae:	f000 f950 	bl	800ed52 <__retarget_lock_close_recursive>
 800eab2:	f7ff ff4b 	bl	800e94c <__sfp_lock_release>
 800eab6:	e7e2      	b.n	800ea7e <_fopen_r+0x12>
 800eab8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800eaba:	07db      	lsls	r3, r3, #31
 800eabc:	d405      	bmi.n	800eaca <_fopen_r+0x5e>
 800eabe:	89a3      	ldrh	r3, [r4, #12]
 800eac0:	0598      	lsls	r0, r3, #22
 800eac2:	d402      	bmi.n	800eaca <_fopen_r+0x5e>
 800eac4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800eac6:	f000 f945 	bl	800ed54 <__retarget_lock_acquire_recursive>
 800eaca:	4b0e      	ldr	r3, [pc, #56]	; (800eb04 <_fopen_r+0x98>)
 800eacc:	6263      	str	r3, [r4, #36]	; 0x24
 800eace:	4b0e      	ldr	r3, [pc, #56]	; (800eb08 <_fopen_r+0x9c>)
 800ead0:	62a3      	str	r3, [r4, #40]	; 0x28
 800ead2:	4b0e      	ldr	r3, [pc, #56]	; (800eb0c <_fopen_r+0xa0>)
 800ead4:	62e3      	str	r3, [r4, #44]	; 0x2c
 800ead6:	05f1      	lsls	r1, r6, #23
 800ead8:	4b0d      	ldr	r3, [pc, #52]	; (800eb10 <_fopen_r+0xa4>)
 800eada:	81e7      	strh	r7, [r4, #14]
 800eadc:	81a6      	strh	r6, [r4, #12]
 800eade:	6224      	str	r4, [r4, #32]
 800eae0:	6323      	str	r3, [r4, #48]	; 0x30
 800eae2:	d505      	bpl.n	800eaf0 <_fopen_r+0x84>
 800eae4:	2302      	movs	r3, #2
 800eae6:	2200      	movs	r2, #0
 800eae8:	4621      	mov	r1, r4
 800eaea:	4628      	mov	r0, r5
 800eaec:	f000 f81a 	bl	800eb24 <_fseek_r>
 800eaf0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800eaf2:	07da      	lsls	r2, r3, #31
 800eaf4:	d4c4      	bmi.n	800ea80 <_fopen_r+0x14>
 800eaf6:	89a3      	ldrh	r3, [r4, #12]
 800eaf8:	059b      	lsls	r3, r3, #22
 800eafa:	d4c1      	bmi.n	800ea80 <_fopen_r+0x14>
 800eafc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800eafe:	f000 f92a 	bl	800ed56 <__retarget_lock_release_recursive>
 800eb02:	e7bd      	b.n	800ea80 <_fopen_r+0x14>
 800eb04:	0800f17d 	.word	0x0800f17d
 800eb08:	0800f19f 	.word	0x0800f19f
 800eb0c:	0800f1d7 	.word	0x0800f1d7
 800eb10:	0800f1fb 	.word	0x0800f1fb

0800eb14 <fopen>:
 800eb14:	4b02      	ldr	r3, [pc, #8]	; (800eb20 <fopen+0xc>)
 800eb16:	460a      	mov	r2, r1
 800eb18:	4601      	mov	r1, r0
 800eb1a:	6818      	ldr	r0, [r3, #0]
 800eb1c:	f7ff bfa6 	b.w	800ea6c <_fopen_r>
 800eb20:	24000088 	.word	0x24000088

0800eb24 <_fseek_r>:
 800eb24:	f000 b800 	b.w	800eb28 <_fseeko_r>

0800eb28 <_fseeko_r>:
 800eb28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800eb2c:	460c      	mov	r4, r1
 800eb2e:	4617      	mov	r7, r2
 800eb30:	461d      	mov	r5, r3
 800eb32:	4606      	mov	r6, r0
 800eb34:	b118      	cbz	r0, 800eb3e <_fseeko_r+0x16>
 800eb36:	6983      	ldr	r3, [r0, #24]
 800eb38:	b90b      	cbnz	r3, 800eb3e <_fseeko_r+0x16>
 800eb3a:	f7ff ff19 	bl	800e970 <__sinit>
 800eb3e:	4b51      	ldr	r3, [pc, #324]	; (800ec84 <_fseeko_r+0x15c>)
 800eb40:	429c      	cmp	r4, r3
 800eb42:	d122      	bne.n	800eb8a <_fseeko_r+0x62>
 800eb44:	6874      	ldr	r4, [r6, #4]
 800eb46:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800eb48:	07d9      	lsls	r1, r3, #31
 800eb4a:	d405      	bmi.n	800eb58 <_fseeko_r+0x30>
 800eb4c:	89a3      	ldrh	r3, [r4, #12]
 800eb4e:	059a      	lsls	r2, r3, #22
 800eb50:	d402      	bmi.n	800eb58 <_fseeko_r+0x30>
 800eb52:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800eb54:	f000 f8fe 	bl	800ed54 <__retarget_lock_acquire_recursive>
 800eb58:	89a3      	ldrh	r3, [r4, #12]
 800eb5a:	f403 7384 	and.w	r3, r3, #264	; 0x108
 800eb5e:	f5b3 7f84 	cmp.w	r3, #264	; 0x108
 800eb62:	d103      	bne.n	800eb6c <_fseeko_r+0x44>
 800eb64:	4621      	mov	r1, r4
 800eb66:	4630      	mov	r0, r6
 800eb68:	f7ff fdd8 	bl	800e71c <_fflush_r>
 800eb6c:	f8d4 802c 	ldr.w	r8, [r4, #44]	; 0x2c
 800eb70:	f1b8 0f00 	cmp.w	r8, #0
 800eb74:	d113      	bne.n	800eb9e <_fseeko_r+0x76>
 800eb76:	231d      	movs	r3, #29
 800eb78:	6033      	str	r3, [r6, #0]
 800eb7a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800eb7c:	07d9      	lsls	r1, r3, #31
 800eb7e:	d578      	bpl.n	800ec72 <_fseeko_r+0x14a>
 800eb80:	f04f 35ff 	mov.w	r5, #4294967295
 800eb84:	4628      	mov	r0, r5
 800eb86:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800eb8a:	4b3f      	ldr	r3, [pc, #252]	; (800ec88 <_fseeko_r+0x160>)
 800eb8c:	429c      	cmp	r4, r3
 800eb8e:	d101      	bne.n	800eb94 <_fseeko_r+0x6c>
 800eb90:	68b4      	ldr	r4, [r6, #8]
 800eb92:	e7d8      	b.n	800eb46 <_fseeko_r+0x1e>
 800eb94:	4b3d      	ldr	r3, [pc, #244]	; (800ec8c <_fseeko_r+0x164>)
 800eb96:	429c      	cmp	r4, r3
 800eb98:	bf08      	it	eq
 800eb9a:	68f4      	ldreq	r4, [r6, #12]
 800eb9c:	e7d3      	b.n	800eb46 <_fseeko_r+0x1e>
 800eb9e:	2d01      	cmp	r5, #1
 800eba0:	d036      	beq.n	800ec10 <_fseeko_r+0xe8>
 800eba2:	f035 0302 	bics.w	r3, r5, #2
 800eba6:	d162      	bne.n	800ec6e <_fseeko_r+0x146>
 800eba8:	6923      	ldr	r3, [r4, #16]
 800ebaa:	b91b      	cbnz	r3, 800ebb4 <_fseeko_r+0x8c>
 800ebac:	4621      	mov	r1, r4
 800ebae:	4630      	mov	r0, r6
 800ebb0:	f000 f8f8 	bl	800eda4 <__smakebuf_r>
 800ebb4:	4621      	mov	r1, r4
 800ebb6:	4630      	mov	r0, r6
 800ebb8:	f7ff fdb0 	bl	800e71c <_fflush_r>
 800ebbc:	2800      	cmp	r0, #0
 800ebbe:	d1dc      	bne.n	800eb7a <_fseeko_r+0x52>
 800ebc0:	6a21      	ldr	r1, [r4, #32]
 800ebc2:	462b      	mov	r3, r5
 800ebc4:	463a      	mov	r2, r7
 800ebc6:	4630      	mov	r0, r6
 800ebc8:	47c0      	blx	r8
 800ebca:	3001      	adds	r0, #1
 800ebcc:	d0d5      	beq.n	800eb7a <_fseeko_r+0x52>
 800ebce:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ebd0:	b141      	cbz	r1, 800ebe4 <_fseeko_r+0xbc>
 800ebd2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ebd6:	4299      	cmp	r1, r3
 800ebd8:	d002      	beq.n	800ebe0 <_fseeko_r+0xb8>
 800ebda:	4630      	mov	r0, r6
 800ebdc:	f000 f938 	bl	800ee50 <_free_r>
 800ebe0:	2300      	movs	r3, #0
 800ebe2:	6363      	str	r3, [r4, #52]	; 0x34
 800ebe4:	6923      	ldr	r3, [r4, #16]
 800ebe6:	6023      	str	r3, [r4, #0]
 800ebe8:	89a3      	ldrh	r3, [r4, #12]
 800ebea:	2600      	movs	r6, #0
 800ebec:	f423 6302 	bic.w	r3, r3, #2080	; 0x820
 800ebf0:	6066      	str	r6, [r4, #4]
 800ebf2:	81a3      	strh	r3, [r4, #12]
 800ebf4:	2208      	movs	r2, #8
 800ebf6:	4631      	mov	r1, r6
 800ebf8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800ebfc:	f000 f920 	bl	800ee40 <memset>
 800ec00:	6e65      	ldr	r5, [r4, #100]	; 0x64
 800ec02:	f015 0501 	ands.w	r5, r5, #1
 800ec06:	d13b      	bne.n	800ec80 <_fseeko_r+0x158>
 800ec08:	89a3      	ldrh	r3, [r4, #12]
 800ec0a:	059b      	lsls	r3, r3, #22
 800ec0c:	d4ba      	bmi.n	800eb84 <_fseeko_r+0x5c>
 800ec0e:	e021      	b.n	800ec54 <_fseeko_r+0x12c>
 800ec10:	4621      	mov	r1, r4
 800ec12:	4630      	mov	r0, r6
 800ec14:	f7ff fd82 	bl	800e71c <_fflush_r>
 800ec18:	89a2      	ldrh	r2, [r4, #12]
 800ec1a:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800ec1e:	d00c      	beq.n	800ec3a <_fseeko_r+0x112>
 800ec20:	6d65      	ldr	r5, [r4, #84]	; 0x54
 800ec22:	89a3      	ldrh	r3, [r4, #12]
 800ec24:	075a      	lsls	r2, r3, #29
 800ec26:	d519      	bpl.n	800ec5c <_fseeko_r+0x134>
 800ec28:	6863      	ldr	r3, [r4, #4]
 800ec2a:	1aed      	subs	r5, r5, r3
 800ec2c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ec2e:	b10b      	cbz	r3, 800ec34 <_fseeko_r+0x10c>
 800ec30:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800ec32:	1aed      	subs	r5, r5, r3
 800ec34:	442f      	add	r7, r5
 800ec36:	2500      	movs	r5, #0
 800ec38:	e7b6      	b.n	800eba8 <_fseeko_r+0x80>
 800ec3a:	462b      	mov	r3, r5
 800ec3c:	6a21      	ldr	r1, [r4, #32]
 800ec3e:	4630      	mov	r0, r6
 800ec40:	47c0      	blx	r8
 800ec42:	1c43      	adds	r3, r0, #1
 800ec44:	4605      	mov	r5, r0
 800ec46:	d1ec      	bne.n	800ec22 <_fseeko_r+0xfa>
 800ec48:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ec4a:	07d8      	lsls	r0, r3, #31
 800ec4c:	d498      	bmi.n	800eb80 <_fseeko_r+0x58>
 800ec4e:	89a3      	ldrh	r3, [r4, #12]
 800ec50:	0599      	lsls	r1, r3, #22
 800ec52:	d495      	bmi.n	800eb80 <_fseeko_r+0x58>
 800ec54:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ec56:	f000 f87e 	bl	800ed56 <__retarget_lock_release_recursive>
 800ec5a:	e793      	b.n	800eb84 <_fseeko_r+0x5c>
 800ec5c:	0718      	lsls	r0, r3, #28
 800ec5e:	d5e9      	bpl.n	800ec34 <_fseeko_r+0x10c>
 800ec60:	6823      	ldr	r3, [r4, #0]
 800ec62:	6922      	ldr	r2, [r4, #16]
 800ec64:	2b00      	cmp	r3, #0
 800ec66:	d0e5      	beq.n	800ec34 <_fseeko_r+0x10c>
 800ec68:	1a9b      	subs	r3, r3, r2
 800ec6a:	441d      	add	r5, r3
 800ec6c:	e7e2      	b.n	800ec34 <_fseeko_r+0x10c>
 800ec6e:	2316      	movs	r3, #22
 800ec70:	e782      	b.n	800eb78 <_fseeko_r+0x50>
 800ec72:	89a3      	ldrh	r3, [r4, #12]
 800ec74:	059a      	lsls	r2, r3, #22
 800ec76:	d483      	bmi.n	800eb80 <_fseeko_r+0x58>
 800ec78:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ec7a:	f000 f86c 	bl	800ed56 <__retarget_lock_release_recursive>
 800ec7e:	e77f      	b.n	800eb80 <_fseeko_r+0x58>
 800ec80:	4635      	mov	r5, r6
 800ec82:	e77f      	b.n	800eb84 <_fseeko_r+0x5c>
 800ec84:	0801223c 	.word	0x0801223c
 800ec88:	0801225c 	.word	0x0801225c
 800ec8c:	0801221c 	.word	0x0801221c

0800ec90 <_fwalk>:
 800ec90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ec94:	460f      	mov	r7, r1
 800ec96:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800ec9a:	2600      	movs	r6, #0
 800ec9c:	e9d4 8501 	ldrd	r8, r5, [r4, #4]
 800eca0:	f1b8 0801 	subs.w	r8, r8, #1
 800eca4:	d505      	bpl.n	800ecb2 <_fwalk+0x22>
 800eca6:	6824      	ldr	r4, [r4, #0]
 800eca8:	2c00      	cmp	r4, #0
 800ecaa:	d1f7      	bne.n	800ec9c <_fwalk+0xc>
 800ecac:	4630      	mov	r0, r6
 800ecae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ecb2:	89ab      	ldrh	r3, [r5, #12]
 800ecb4:	2b01      	cmp	r3, #1
 800ecb6:	d906      	bls.n	800ecc6 <_fwalk+0x36>
 800ecb8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ecbc:	3301      	adds	r3, #1
 800ecbe:	d002      	beq.n	800ecc6 <_fwalk+0x36>
 800ecc0:	4628      	mov	r0, r5
 800ecc2:	47b8      	blx	r7
 800ecc4:	4306      	orrs	r6, r0
 800ecc6:	3568      	adds	r5, #104	; 0x68
 800ecc8:	e7ea      	b.n	800eca0 <_fwalk+0x10>

0800ecca <_fwalk_reent>:
 800ecca:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ecce:	4606      	mov	r6, r0
 800ecd0:	4688      	mov	r8, r1
 800ecd2:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800ecd6:	2700      	movs	r7, #0
 800ecd8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ecdc:	f1b9 0901 	subs.w	r9, r9, #1
 800ece0:	d505      	bpl.n	800ecee <_fwalk_reent+0x24>
 800ece2:	6824      	ldr	r4, [r4, #0]
 800ece4:	2c00      	cmp	r4, #0
 800ece6:	d1f7      	bne.n	800ecd8 <_fwalk_reent+0xe>
 800ece8:	4638      	mov	r0, r7
 800ecea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ecee:	89ab      	ldrh	r3, [r5, #12]
 800ecf0:	2b01      	cmp	r3, #1
 800ecf2:	d907      	bls.n	800ed04 <_fwalk_reent+0x3a>
 800ecf4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ecf8:	3301      	adds	r3, #1
 800ecfa:	d003      	beq.n	800ed04 <_fwalk_reent+0x3a>
 800ecfc:	4629      	mov	r1, r5
 800ecfe:	4630      	mov	r0, r6
 800ed00:	47c0      	blx	r8
 800ed02:	4307      	orrs	r7, r0
 800ed04:	3568      	adds	r5, #104	; 0x68
 800ed06:	e7e9      	b.n	800ecdc <_fwalk_reent+0x12>

0800ed08 <__libc_init_array>:
 800ed08:	b570      	push	{r4, r5, r6, lr}
 800ed0a:	4d0d      	ldr	r5, [pc, #52]	; (800ed40 <__libc_init_array+0x38>)
 800ed0c:	4c0d      	ldr	r4, [pc, #52]	; (800ed44 <__libc_init_array+0x3c>)
 800ed0e:	1b64      	subs	r4, r4, r5
 800ed10:	10a4      	asrs	r4, r4, #2
 800ed12:	2600      	movs	r6, #0
 800ed14:	42a6      	cmp	r6, r4
 800ed16:	d109      	bne.n	800ed2c <__libc_init_array+0x24>
 800ed18:	4d0b      	ldr	r5, [pc, #44]	; (800ed48 <__libc_init_array+0x40>)
 800ed1a:	4c0c      	ldr	r4, [pc, #48]	; (800ed4c <__libc_init_array+0x44>)
 800ed1c:	f003 fa0e 	bl	801213c <_init>
 800ed20:	1b64      	subs	r4, r4, r5
 800ed22:	10a4      	asrs	r4, r4, #2
 800ed24:	2600      	movs	r6, #0
 800ed26:	42a6      	cmp	r6, r4
 800ed28:	d105      	bne.n	800ed36 <__libc_init_array+0x2e>
 800ed2a:	bd70      	pop	{r4, r5, r6, pc}
 800ed2c:	f855 3b04 	ldr.w	r3, [r5], #4
 800ed30:	4798      	blx	r3
 800ed32:	3601      	adds	r6, #1
 800ed34:	e7ee      	b.n	800ed14 <__libc_init_array+0xc>
 800ed36:	f855 3b04 	ldr.w	r3, [r5], #4
 800ed3a:	4798      	blx	r3
 800ed3c:	3601      	adds	r6, #1
 800ed3e:	e7f2      	b.n	800ed26 <__libc_init_array+0x1e>
 800ed40:	08013f10 	.word	0x08013f10
 800ed44:	08013f10 	.word	0x08013f10
 800ed48:	08013f10 	.word	0x08013f10
 800ed4c:	08013f14 	.word	0x08013f14

0800ed50 <__retarget_lock_init_recursive>:
 800ed50:	4770      	bx	lr

0800ed52 <__retarget_lock_close_recursive>:
 800ed52:	4770      	bx	lr

0800ed54 <__retarget_lock_acquire_recursive>:
 800ed54:	4770      	bx	lr

0800ed56 <__retarget_lock_release_recursive>:
 800ed56:	4770      	bx	lr

0800ed58 <__swhatbuf_r>:
 800ed58:	b570      	push	{r4, r5, r6, lr}
 800ed5a:	460e      	mov	r6, r1
 800ed5c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ed60:	2900      	cmp	r1, #0
 800ed62:	b096      	sub	sp, #88	; 0x58
 800ed64:	4614      	mov	r4, r2
 800ed66:	461d      	mov	r5, r3
 800ed68:	da08      	bge.n	800ed7c <__swhatbuf_r+0x24>
 800ed6a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800ed6e:	2200      	movs	r2, #0
 800ed70:	602a      	str	r2, [r5, #0]
 800ed72:	061a      	lsls	r2, r3, #24
 800ed74:	d410      	bmi.n	800ed98 <__swhatbuf_r+0x40>
 800ed76:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ed7a:	e00e      	b.n	800ed9a <__swhatbuf_r+0x42>
 800ed7c:	466a      	mov	r2, sp
 800ed7e:	f001 f875 	bl	800fe6c <_fstat_r>
 800ed82:	2800      	cmp	r0, #0
 800ed84:	dbf1      	blt.n	800ed6a <__swhatbuf_r+0x12>
 800ed86:	9a01      	ldr	r2, [sp, #4]
 800ed88:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800ed8c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800ed90:	425a      	negs	r2, r3
 800ed92:	415a      	adcs	r2, r3
 800ed94:	602a      	str	r2, [r5, #0]
 800ed96:	e7ee      	b.n	800ed76 <__swhatbuf_r+0x1e>
 800ed98:	2340      	movs	r3, #64	; 0x40
 800ed9a:	2000      	movs	r0, #0
 800ed9c:	6023      	str	r3, [r4, #0]
 800ed9e:	b016      	add	sp, #88	; 0x58
 800eda0:	bd70      	pop	{r4, r5, r6, pc}
	...

0800eda4 <__smakebuf_r>:
 800eda4:	898b      	ldrh	r3, [r1, #12]
 800eda6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800eda8:	079d      	lsls	r5, r3, #30
 800edaa:	4606      	mov	r6, r0
 800edac:	460c      	mov	r4, r1
 800edae:	d507      	bpl.n	800edc0 <__smakebuf_r+0x1c>
 800edb0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800edb4:	6023      	str	r3, [r4, #0]
 800edb6:	6123      	str	r3, [r4, #16]
 800edb8:	2301      	movs	r3, #1
 800edba:	6163      	str	r3, [r4, #20]
 800edbc:	b002      	add	sp, #8
 800edbe:	bd70      	pop	{r4, r5, r6, pc}
 800edc0:	ab01      	add	r3, sp, #4
 800edc2:	466a      	mov	r2, sp
 800edc4:	f7ff ffc8 	bl	800ed58 <__swhatbuf_r>
 800edc8:	9900      	ldr	r1, [sp, #0]
 800edca:	4605      	mov	r5, r0
 800edcc:	4630      	mov	r0, r6
 800edce:	f000 f8ab 	bl	800ef28 <_malloc_r>
 800edd2:	b948      	cbnz	r0, 800ede8 <__smakebuf_r+0x44>
 800edd4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800edd8:	059a      	lsls	r2, r3, #22
 800edda:	d4ef      	bmi.n	800edbc <__smakebuf_r+0x18>
 800eddc:	f023 0303 	bic.w	r3, r3, #3
 800ede0:	f043 0302 	orr.w	r3, r3, #2
 800ede4:	81a3      	strh	r3, [r4, #12]
 800ede6:	e7e3      	b.n	800edb0 <__smakebuf_r+0xc>
 800ede8:	4b0d      	ldr	r3, [pc, #52]	; (800ee20 <__smakebuf_r+0x7c>)
 800edea:	62b3      	str	r3, [r6, #40]	; 0x28
 800edec:	89a3      	ldrh	r3, [r4, #12]
 800edee:	6020      	str	r0, [r4, #0]
 800edf0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800edf4:	81a3      	strh	r3, [r4, #12]
 800edf6:	9b00      	ldr	r3, [sp, #0]
 800edf8:	6163      	str	r3, [r4, #20]
 800edfa:	9b01      	ldr	r3, [sp, #4]
 800edfc:	6120      	str	r0, [r4, #16]
 800edfe:	b15b      	cbz	r3, 800ee18 <__smakebuf_r+0x74>
 800ee00:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ee04:	4630      	mov	r0, r6
 800ee06:	f001 fbb3 	bl	8010570 <_isatty_r>
 800ee0a:	b128      	cbz	r0, 800ee18 <__smakebuf_r+0x74>
 800ee0c:	89a3      	ldrh	r3, [r4, #12]
 800ee0e:	f023 0303 	bic.w	r3, r3, #3
 800ee12:	f043 0301 	orr.w	r3, r3, #1
 800ee16:	81a3      	strh	r3, [r4, #12]
 800ee18:	89a0      	ldrh	r0, [r4, #12]
 800ee1a:	4305      	orrs	r5, r0
 800ee1c:	81a5      	strh	r5, [r4, #12]
 800ee1e:	e7cd      	b.n	800edbc <__smakebuf_r+0x18>
 800ee20:	0800e909 	.word	0x0800e909

0800ee24 <memcpy>:
 800ee24:	440a      	add	r2, r1
 800ee26:	4291      	cmp	r1, r2
 800ee28:	f100 33ff 	add.w	r3, r0, #4294967295
 800ee2c:	d100      	bne.n	800ee30 <memcpy+0xc>
 800ee2e:	4770      	bx	lr
 800ee30:	b510      	push	{r4, lr}
 800ee32:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ee36:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ee3a:	4291      	cmp	r1, r2
 800ee3c:	d1f9      	bne.n	800ee32 <memcpy+0xe>
 800ee3e:	bd10      	pop	{r4, pc}

0800ee40 <memset>:
 800ee40:	4402      	add	r2, r0
 800ee42:	4603      	mov	r3, r0
 800ee44:	4293      	cmp	r3, r2
 800ee46:	d100      	bne.n	800ee4a <memset+0xa>
 800ee48:	4770      	bx	lr
 800ee4a:	f803 1b01 	strb.w	r1, [r3], #1
 800ee4e:	e7f9      	b.n	800ee44 <memset+0x4>

0800ee50 <_free_r>:
 800ee50:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ee52:	2900      	cmp	r1, #0
 800ee54:	d044      	beq.n	800eee0 <_free_r+0x90>
 800ee56:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ee5a:	9001      	str	r0, [sp, #4]
 800ee5c:	2b00      	cmp	r3, #0
 800ee5e:	f1a1 0404 	sub.w	r4, r1, #4
 800ee62:	bfb8      	it	lt
 800ee64:	18e4      	addlt	r4, r4, r3
 800ee66:	f001 fbb7 	bl	80105d8 <__malloc_lock>
 800ee6a:	4a1e      	ldr	r2, [pc, #120]	; (800eee4 <_free_r+0x94>)
 800ee6c:	9801      	ldr	r0, [sp, #4]
 800ee6e:	6813      	ldr	r3, [r2, #0]
 800ee70:	b933      	cbnz	r3, 800ee80 <_free_r+0x30>
 800ee72:	6063      	str	r3, [r4, #4]
 800ee74:	6014      	str	r4, [r2, #0]
 800ee76:	b003      	add	sp, #12
 800ee78:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ee7c:	f001 bbb2 	b.w	80105e4 <__malloc_unlock>
 800ee80:	42a3      	cmp	r3, r4
 800ee82:	d908      	bls.n	800ee96 <_free_r+0x46>
 800ee84:	6825      	ldr	r5, [r4, #0]
 800ee86:	1961      	adds	r1, r4, r5
 800ee88:	428b      	cmp	r3, r1
 800ee8a:	bf01      	itttt	eq
 800ee8c:	6819      	ldreq	r1, [r3, #0]
 800ee8e:	685b      	ldreq	r3, [r3, #4]
 800ee90:	1949      	addeq	r1, r1, r5
 800ee92:	6021      	streq	r1, [r4, #0]
 800ee94:	e7ed      	b.n	800ee72 <_free_r+0x22>
 800ee96:	461a      	mov	r2, r3
 800ee98:	685b      	ldr	r3, [r3, #4]
 800ee9a:	b10b      	cbz	r3, 800eea0 <_free_r+0x50>
 800ee9c:	42a3      	cmp	r3, r4
 800ee9e:	d9fa      	bls.n	800ee96 <_free_r+0x46>
 800eea0:	6811      	ldr	r1, [r2, #0]
 800eea2:	1855      	adds	r5, r2, r1
 800eea4:	42a5      	cmp	r5, r4
 800eea6:	d10b      	bne.n	800eec0 <_free_r+0x70>
 800eea8:	6824      	ldr	r4, [r4, #0]
 800eeaa:	4421      	add	r1, r4
 800eeac:	1854      	adds	r4, r2, r1
 800eeae:	42a3      	cmp	r3, r4
 800eeb0:	6011      	str	r1, [r2, #0]
 800eeb2:	d1e0      	bne.n	800ee76 <_free_r+0x26>
 800eeb4:	681c      	ldr	r4, [r3, #0]
 800eeb6:	685b      	ldr	r3, [r3, #4]
 800eeb8:	6053      	str	r3, [r2, #4]
 800eeba:	4421      	add	r1, r4
 800eebc:	6011      	str	r1, [r2, #0]
 800eebe:	e7da      	b.n	800ee76 <_free_r+0x26>
 800eec0:	d902      	bls.n	800eec8 <_free_r+0x78>
 800eec2:	230c      	movs	r3, #12
 800eec4:	6003      	str	r3, [r0, #0]
 800eec6:	e7d6      	b.n	800ee76 <_free_r+0x26>
 800eec8:	6825      	ldr	r5, [r4, #0]
 800eeca:	1961      	adds	r1, r4, r5
 800eecc:	428b      	cmp	r3, r1
 800eece:	bf04      	itt	eq
 800eed0:	6819      	ldreq	r1, [r3, #0]
 800eed2:	685b      	ldreq	r3, [r3, #4]
 800eed4:	6063      	str	r3, [r4, #4]
 800eed6:	bf04      	itt	eq
 800eed8:	1949      	addeq	r1, r1, r5
 800eeda:	6021      	streq	r1, [r4, #0]
 800eedc:	6054      	str	r4, [r2, #4]
 800eede:	e7ca      	b.n	800ee76 <_free_r+0x26>
 800eee0:	b003      	add	sp, #12
 800eee2:	bd30      	pop	{r4, r5, pc}
 800eee4:	24000a98 	.word	0x24000a98

0800eee8 <sbrk_aligned>:
 800eee8:	b570      	push	{r4, r5, r6, lr}
 800eeea:	4e0e      	ldr	r6, [pc, #56]	; (800ef24 <sbrk_aligned+0x3c>)
 800eeec:	460c      	mov	r4, r1
 800eeee:	6831      	ldr	r1, [r6, #0]
 800eef0:	4605      	mov	r5, r0
 800eef2:	b911      	cbnz	r1, 800eefa <sbrk_aligned+0x12>
 800eef4:	f000 f932 	bl	800f15c <_sbrk_r>
 800eef8:	6030      	str	r0, [r6, #0]
 800eefa:	4621      	mov	r1, r4
 800eefc:	4628      	mov	r0, r5
 800eefe:	f000 f92d 	bl	800f15c <_sbrk_r>
 800ef02:	1c43      	adds	r3, r0, #1
 800ef04:	d00a      	beq.n	800ef1c <sbrk_aligned+0x34>
 800ef06:	1cc4      	adds	r4, r0, #3
 800ef08:	f024 0403 	bic.w	r4, r4, #3
 800ef0c:	42a0      	cmp	r0, r4
 800ef0e:	d007      	beq.n	800ef20 <sbrk_aligned+0x38>
 800ef10:	1a21      	subs	r1, r4, r0
 800ef12:	4628      	mov	r0, r5
 800ef14:	f000 f922 	bl	800f15c <_sbrk_r>
 800ef18:	3001      	adds	r0, #1
 800ef1a:	d101      	bne.n	800ef20 <sbrk_aligned+0x38>
 800ef1c:	f04f 34ff 	mov.w	r4, #4294967295
 800ef20:	4620      	mov	r0, r4
 800ef22:	bd70      	pop	{r4, r5, r6, pc}
 800ef24:	24000a9c 	.word	0x24000a9c

0800ef28 <_malloc_r>:
 800ef28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ef2c:	1ccd      	adds	r5, r1, #3
 800ef2e:	f025 0503 	bic.w	r5, r5, #3
 800ef32:	3508      	adds	r5, #8
 800ef34:	2d0c      	cmp	r5, #12
 800ef36:	bf38      	it	cc
 800ef38:	250c      	movcc	r5, #12
 800ef3a:	2d00      	cmp	r5, #0
 800ef3c:	4607      	mov	r7, r0
 800ef3e:	db01      	blt.n	800ef44 <_malloc_r+0x1c>
 800ef40:	42a9      	cmp	r1, r5
 800ef42:	d905      	bls.n	800ef50 <_malloc_r+0x28>
 800ef44:	230c      	movs	r3, #12
 800ef46:	603b      	str	r3, [r7, #0]
 800ef48:	2600      	movs	r6, #0
 800ef4a:	4630      	mov	r0, r6
 800ef4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ef50:	4e2e      	ldr	r6, [pc, #184]	; (800f00c <_malloc_r+0xe4>)
 800ef52:	f001 fb41 	bl	80105d8 <__malloc_lock>
 800ef56:	6833      	ldr	r3, [r6, #0]
 800ef58:	461c      	mov	r4, r3
 800ef5a:	bb34      	cbnz	r4, 800efaa <_malloc_r+0x82>
 800ef5c:	4629      	mov	r1, r5
 800ef5e:	4638      	mov	r0, r7
 800ef60:	f7ff ffc2 	bl	800eee8 <sbrk_aligned>
 800ef64:	1c43      	adds	r3, r0, #1
 800ef66:	4604      	mov	r4, r0
 800ef68:	d14d      	bne.n	800f006 <_malloc_r+0xde>
 800ef6a:	6834      	ldr	r4, [r6, #0]
 800ef6c:	4626      	mov	r6, r4
 800ef6e:	2e00      	cmp	r6, #0
 800ef70:	d140      	bne.n	800eff4 <_malloc_r+0xcc>
 800ef72:	6823      	ldr	r3, [r4, #0]
 800ef74:	4631      	mov	r1, r6
 800ef76:	4638      	mov	r0, r7
 800ef78:	eb04 0803 	add.w	r8, r4, r3
 800ef7c:	f000 f8ee 	bl	800f15c <_sbrk_r>
 800ef80:	4580      	cmp	r8, r0
 800ef82:	d13a      	bne.n	800effa <_malloc_r+0xd2>
 800ef84:	6821      	ldr	r1, [r4, #0]
 800ef86:	3503      	adds	r5, #3
 800ef88:	1a6d      	subs	r5, r5, r1
 800ef8a:	f025 0503 	bic.w	r5, r5, #3
 800ef8e:	3508      	adds	r5, #8
 800ef90:	2d0c      	cmp	r5, #12
 800ef92:	bf38      	it	cc
 800ef94:	250c      	movcc	r5, #12
 800ef96:	4629      	mov	r1, r5
 800ef98:	4638      	mov	r0, r7
 800ef9a:	f7ff ffa5 	bl	800eee8 <sbrk_aligned>
 800ef9e:	3001      	adds	r0, #1
 800efa0:	d02b      	beq.n	800effa <_malloc_r+0xd2>
 800efa2:	6823      	ldr	r3, [r4, #0]
 800efa4:	442b      	add	r3, r5
 800efa6:	6023      	str	r3, [r4, #0]
 800efa8:	e00e      	b.n	800efc8 <_malloc_r+0xa0>
 800efaa:	6822      	ldr	r2, [r4, #0]
 800efac:	1b52      	subs	r2, r2, r5
 800efae:	d41e      	bmi.n	800efee <_malloc_r+0xc6>
 800efb0:	2a0b      	cmp	r2, #11
 800efb2:	d916      	bls.n	800efe2 <_malloc_r+0xba>
 800efb4:	1961      	adds	r1, r4, r5
 800efb6:	42a3      	cmp	r3, r4
 800efb8:	6025      	str	r5, [r4, #0]
 800efba:	bf18      	it	ne
 800efbc:	6059      	strne	r1, [r3, #4]
 800efbe:	6863      	ldr	r3, [r4, #4]
 800efc0:	bf08      	it	eq
 800efc2:	6031      	streq	r1, [r6, #0]
 800efc4:	5162      	str	r2, [r4, r5]
 800efc6:	604b      	str	r3, [r1, #4]
 800efc8:	4638      	mov	r0, r7
 800efca:	f104 060b 	add.w	r6, r4, #11
 800efce:	f001 fb09 	bl	80105e4 <__malloc_unlock>
 800efd2:	f026 0607 	bic.w	r6, r6, #7
 800efd6:	1d23      	adds	r3, r4, #4
 800efd8:	1af2      	subs	r2, r6, r3
 800efda:	d0b6      	beq.n	800ef4a <_malloc_r+0x22>
 800efdc:	1b9b      	subs	r3, r3, r6
 800efde:	50a3      	str	r3, [r4, r2]
 800efe0:	e7b3      	b.n	800ef4a <_malloc_r+0x22>
 800efe2:	6862      	ldr	r2, [r4, #4]
 800efe4:	42a3      	cmp	r3, r4
 800efe6:	bf0c      	ite	eq
 800efe8:	6032      	streq	r2, [r6, #0]
 800efea:	605a      	strne	r2, [r3, #4]
 800efec:	e7ec      	b.n	800efc8 <_malloc_r+0xa0>
 800efee:	4623      	mov	r3, r4
 800eff0:	6864      	ldr	r4, [r4, #4]
 800eff2:	e7b2      	b.n	800ef5a <_malloc_r+0x32>
 800eff4:	4634      	mov	r4, r6
 800eff6:	6876      	ldr	r6, [r6, #4]
 800eff8:	e7b9      	b.n	800ef6e <_malloc_r+0x46>
 800effa:	230c      	movs	r3, #12
 800effc:	603b      	str	r3, [r7, #0]
 800effe:	4638      	mov	r0, r7
 800f000:	f001 faf0 	bl	80105e4 <__malloc_unlock>
 800f004:	e7a1      	b.n	800ef4a <_malloc_r+0x22>
 800f006:	6025      	str	r5, [r4, #0]
 800f008:	e7de      	b.n	800efc8 <_malloc_r+0xa0>
 800f00a:	bf00      	nop
 800f00c:	24000a98 	.word	0x24000a98

0800f010 <_open_r>:
 800f010:	b538      	push	{r3, r4, r5, lr}
 800f012:	4d07      	ldr	r5, [pc, #28]	; (800f030 <_open_r+0x20>)
 800f014:	4604      	mov	r4, r0
 800f016:	4608      	mov	r0, r1
 800f018:	4611      	mov	r1, r2
 800f01a:	2200      	movs	r2, #0
 800f01c:	602a      	str	r2, [r5, #0]
 800f01e:	461a      	mov	r2, r3
 800f020:	f7f4 fde3 	bl	8003bea <_open>
 800f024:	1c43      	adds	r3, r0, #1
 800f026:	d102      	bne.n	800f02e <_open_r+0x1e>
 800f028:	682b      	ldr	r3, [r5, #0]
 800f02a:	b103      	cbz	r3, 800f02e <_open_r+0x1e>
 800f02c:	6023      	str	r3, [r4, #0]
 800f02e:	bd38      	pop	{r3, r4, r5, pc}
 800f030:	24000aa0 	.word	0x24000aa0

0800f034 <lflush>:
 800f034:	8983      	ldrh	r3, [r0, #12]
 800f036:	f003 0309 	and.w	r3, r3, #9
 800f03a:	2b09      	cmp	r3, #9
 800f03c:	d101      	bne.n	800f042 <lflush+0xe>
 800f03e:	f7ff bba9 	b.w	800e794 <fflush>
 800f042:	2000      	movs	r0, #0
 800f044:	4770      	bx	lr
	...

0800f048 <__srefill_r>:
 800f048:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f04a:	460c      	mov	r4, r1
 800f04c:	4605      	mov	r5, r0
 800f04e:	b118      	cbz	r0, 800f058 <__srefill_r+0x10>
 800f050:	6983      	ldr	r3, [r0, #24]
 800f052:	b90b      	cbnz	r3, 800f058 <__srefill_r+0x10>
 800f054:	f7ff fc8c 	bl	800e970 <__sinit>
 800f058:	4b3b      	ldr	r3, [pc, #236]	; (800f148 <__srefill_r+0x100>)
 800f05a:	429c      	cmp	r4, r3
 800f05c:	d10a      	bne.n	800f074 <__srefill_r+0x2c>
 800f05e:	686c      	ldr	r4, [r5, #4]
 800f060:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800f064:	2300      	movs	r3, #0
 800f066:	6063      	str	r3, [r4, #4]
 800f068:	89a3      	ldrh	r3, [r4, #12]
 800f06a:	069e      	lsls	r6, r3, #26
 800f06c:	d50c      	bpl.n	800f088 <__srefill_r+0x40>
 800f06e:	f04f 30ff 	mov.w	r0, #4294967295
 800f072:	e066      	b.n	800f142 <__srefill_r+0xfa>
 800f074:	4b35      	ldr	r3, [pc, #212]	; (800f14c <__srefill_r+0x104>)
 800f076:	429c      	cmp	r4, r3
 800f078:	d101      	bne.n	800f07e <__srefill_r+0x36>
 800f07a:	68ac      	ldr	r4, [r5, #8]
 800f07c:	e7f0      	b.n	800f060 <__srefill_r+0x18>
 800f07e:	4b34      	ldr	r3, [pc, #208]	; (800f150 <__srefill_r+0x108>)
 800f080:	429c      	cmp	r4, r3
 800f082:	bf08      	it	eq
 800f084:	68ec      	ldreq	r4, [r5, #12]
 800f086:	e7eb      	b.n	800f060 <__srefill_r+0x18>
 800f088:	0758      	lsls	r0, r3, #29
 800f08a:	d448      	bmi.n	800f11e <__srefill_r+0xd6>
 800f08c:	06d9      	lsls	r1, r3, #27
 800f08e:	d405      	bmi.n	800f09c <__srefill_r+0x54>
 800f090:	2309      	movs	r3, #9
 800f092:	602b      	str	r3, [r5, #0]
 800f094:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800f098:	81a3      	strh	r3, [r4, #12]
 800f09a:	e7e8      	b.n	800f06e <__srefill_r+0x26>
 800f09c:	071a      	lsls	r2, r3, #28
 800f09e:	d50b      	bpl.n	800f0b8 <__srefill_r+0x70>
 800f0a0:	4621      	mov	r1, r4
 800f0a2:	4628      	mov	r0, r5
 800f0a4:	f7ff fb3a 	bl	800e71c <_fflush_r>
 800f0a8:	2800      	cmp	r0, #0
 800f0aa:	d1e0      	bne.n	800f06e <__srefill_r+0x26>
 800f0ac:	89a3      	ldrh	r3, [r4, #12]
 800f0ae:	60a0      	str	r0, [r4, #8]
 800f0b0:	f023 0308 	bic.w	r3, r3, #8
 800f0b4:	81a3      	strh	r3, [r4, #12]
 800f0b6:	61a0      	str	r0, [r4, #24]
 800f0b8:	89a3      	ldrh	r3, [r4, #12]
 800f0ba:	f043 0304 	orr.w	r3, r3, #4
 800f0be:	81a3      	strh	r3, [r4, #12]
 800f0c0:	6923      	ldr	r3, [r4, #16]
 800f0c2:	b91b      	cbnz	r3, 800f0cc <__srefill_r+0x84>
 800f0c4:	4621      	mov	r1, r4
 800f0c6:	4628      	mov	r0, r5
 800f0c8:	f7ff fe6c 	bl	800eda4 <__smakebuf_r>
 800f0cc:	89a6      	ldrh	r6, [r4, #12]
 800f0ce:	f9b4 700c 	ldrsh.w	r7, [r4, #12]
 800f0d2:	07b3      	lsls	r3, r6, #30
 800f0d4:	d00f      	beq.n	800f0f6 <__srefill_r+0xae>
 800f0d6:	2301      	movs	r3, #1
 800f0d8:	81a3      	strh	r3, [r4, #12]
 800f0da:	4b1e      	ldr	r3, [pc, #120]	; (800f154 <__srefill_r+0x10c>)
 800f0dc:	491e      	ldr	r1, [pc, #120]	; (800f158 <__srefill_r+0x110>)
 800f0de:	6818      	ldr	r0, [r3, #0]
 800f0e0:	f006 0609 	and.w	r6, r6, #9
 800f0e4:	f7ff fdd4 	bl	800ec90 <_fwalk>
 800f0e8:	2e09      	cmp	r6, #9
 800f0ea:	81a7      	strh	r7, [r4, #12]
 800f0ec:	d103      	bne.n	800f0f6 <__srefill_r+0xae>
 800f0ee:	4621      	mov	r1, r4
 800f0f0:	4628      	mov	r0, r5
 800f0f2:	f7ff fa8d 	bl	800e610 <__sflush_r>
 800f0f6:	6922      	ldr	r2, [r4, #16]
 800f0f8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800f0fa:	6963      	ldr	r3, [r4, #20]
 800f0fc:	6a21      	ldr	r1, [r4, #32]
 800f0fe:	6022      	str	r2, [r4, #0]
 800f100:	4628      	mov	r0, r5
 800f102:	47b0      	blx	r6
 800f104:	2800      	cmp	r0, #0
 800f106:	6060      	str	r0, [r4, #4]
 800f108:	dc1c      	bgt.n	800f144 <__srefill_r+0xfc>
 800f10a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f10e:	bf17      	itett	ne
 800f110:	2200      	movne	r2, #0
 800f112:	f043 0320 	orreq.w	r3, r3, #32
 800f116:	6062      	strne	r2, [r4, #4]
 800f118:	f043 0340 	orrne.w	r3, r3, #64	; 0x40
 800f11c:	e7bc      	b.n	800f098 <__srefill_r+0x50>
 800f11e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f120:	2900      	cmp	r1, #0
 800f122:	d0cd      	beq.n	800f0c0 <__srefill_r+0x78>
 800f124:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f128:	4299      	cmp	r1, r3
 800f12a:	d002      	beq.n	800f132 <__srefill_r+0xea>
 800f12c:	4628      	mov	r0, r5
 800f12e:	f7ff fe8f 	bl	800ee50 <_free_r>
 800f132:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800f134:	6063      	str	r3, [r4, #4]
 800f136:	2000      	movs	r0, #0
 800f138:	6360      	str	r0, [r4, #52]	; 0x34
 800f13a:	2b00      	cmp	r3, #0
 800f13c:	d0c0      	beq.n	800f0c0 <__srefill_r+0x78>
 800f13e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800f140:	6023      	str	r3, [r4, #0]
 800f142:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f144:	2000      	movs	r0, #0
 800f146:	e7fc      	b.n	800f142 <__srefill_r+0xfa>
 800f148:	0801223c 	.word	0x0801223c
 800f14c:	0801225c 	.word	0x0801225c
 800f150:	0801221c 	.word	0x0801221c
 800f154:	0801227c 	.word	0x0801227c
 800f158:	0800f035 	.word	0x0800f035

0800f15c <_sbrk_r>:
 800f15c:	b538      	push	{r3, r4, r5, lr}
 800f15e:	4d06      	ldr	r5, [pc, #24]	; (800f178 <_sbrk_r+0x1c>)
 800f160:	2300      	movs	r3, #0
 800f162:	4604      	mov	r4, r0
 800f164:	4608      	mov	r0, r1
 800f166:	602b      	str	r3, [r5, #0]
 800f168:	f7f4 fd4e 	bl	8003c08 <_sbrk>
 800f16c:	1c43      	adds	r3, r0, #1
 800f16e:	d102      	bne.n	800f176 <_sbrk_r+0x1a>
 800f170:	682b      	ldr	r3, [r5, #0]
 800f172:	b103      	cbz	r3, 800f176 <_sbrk_r+0x1a>
 800f174:	6023      	str	r3, [r4, #0]
 800f176:	bd38      	pop	{r3, r4, r5, pc}
 800f178:	24000aa0 	.word	0x24000aa0

0800f17c <__sread>:
 800f17c:	b510      	push	{r4, lr}
 800f17e:	460c      	mov	r4, r1
 800f180:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f184:	f001 ff08 	bl	8010f98 <_read_r>
 800f188:	2800      	cmp	r0, #0
 800f18a:	bfab      	itete	ge
 800f18c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800f18e:	89a3      	ldrhlt	r3, [r4, #12]
 800f190:	181b      	addge	r3, r3, r0
 800f192:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800f196:	bfac      	ite	ge
 800f198:	6563      	strge	r3, [r4, #84]	; 0x54
 800f19a:	81a3      	strhlt	r3, [r4, #12]
 800f19c:	bd10      	pop	{r4, pc}

0800f19e <__swrite>:
 800f19e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f1a2:	461f      	mov	r7, r3
 800f1a4:	898b      	ldrh	r3, [r1, #12]
 800f1a6:	05db      	lsls	r3, r3, #23
 800f1a8:	4605      	mov	r5, r0
 800f1aa:	460c      	mov	r4, r1
 800f1ac:	4616      	mov	r6, r2
 800f1ae:	d505      	bpl.n	800f1bc <__swrite+0x1e>
 800f1b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f1b4:	2302      	movs	r3, #2
 800f1b6:	2200      	movs	r2, #0
 800f1b8:	f001 f9ea 	bl	8010590 <_lseek_r>
 800f1bc:	89a3      	ldrh	r3, [r4, #12]
 800f1be:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f1c2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800f1c6:	81a3      	strh	r3, [r4, #12]
 800f1c8:	4632      	mov	r2, r6
 800f1ca:	463b      	mov	r3, r7
 800f1cc:	4628      	mov	r0, r5
 800f1ce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f1d2:	f000 bdf3 	b.w	800fdbc <_write_r>

0800f1d6 <__sseek>:
 800f1d6:	b510      	push	{r4, lr}
 800f1d8:	460c      	mov	r4, r1
 800f1da:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f1de:	f001 f9d7 	bl	8010590 <_lseek_r>
 800f1e2:	1c43      	adds	r3, r0, #1
 800f1e4:	89a3      	ldrh	r3, [r4, #12]
 800f1e6:	bf15      	itete	ne
 800f1e8:	6560      	strne	r0, [r4, #84]	; 0x54
 800f1ea:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800f1ee:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800f1f2:	81a3      	strheq	r3, [r4, #12]
 800f1f4:	bf18      	it	ne
 800f1f6:	81a3      	strhne	r3, [r4, #12]
 800f1f8:	bd10      	pop	{r4, pc}

0800f1fa <__sclose>:
 800f1fa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f1fe:	f000 bdef 	b.w	800fde0 <_close_r>

0800f202 <sulp>:
 800f202:	b570      	push	{r4, r5, r6, lr}
 800f204:	4604      	mov	r4, r0
 800f206:	460d      	mov	r5, r1
 800f208:	4616      	mov	r6, r2
 800f20a:	ec45 4b10 	vmov	d0, r4, r5
 800f20e:	f001 fd61 	bl	8010cd4 <__ulp>
 800f212:	b17e      	cbz	r6, 800f234 <sulp+0x32>
 800f214:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800f218:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800f21c:	2b00      	cmp	r3, #0
 800f21e:	dd09      	ble.n	800f234 <sulp+0x32>
 800f220:	051b      	lsls	r3, r3, #20
 800f222:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
 800f226:	2000      	movs	r0, #0
 800f228:	f501 1140 	add.w	r1, r1, #3145728	; 0x300000
 800f22c:	ec41 0b17 	vmov	d7, r0, r1
 800f230:	ee20 0b07 	vmul.f64	d0, d0, d7
 800f234:	bd70      	pop	{r4, r5, r6, pc}
	...

0800f238 <_strtod_l>:
 800f238:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f23c:	ed2d 8b0e 	vpush	{d8-d14}
 800f240:	b097      	sub	sp, #92	; 0x5c
 800f242:	461f      	mov	r7, r3
 800f244:	2300      	movs	r3, #0
 800f246:	9312      	str	r3, [sp, #72]	; 0x48
 800f248:	4ba1      	ldr	r3, [pc, #644]	; (800f4d0 <_strtod_l+0x298>)
 800f24a:	920d      	str	r2, [sp, #52]	; 0x34
 800f24c:	681b      	ldr	r3, [r3, #0]
 800f24e:	9307      	str	r3, [sp, #28]
 800f250:	4604      	mov	r4, r0
 800f252:	4618      	mov	r0, r3
 800f254:	468b      	mov	fp, r1
 800f256:	f7f1 f893 	bl	8000380 <strlen>
 800f25a:	f04f 0800 	mov.w	r8, #0
 800f25e:	4605      	mov	r5, r0
 800f260:	f04f 0900 	mov.w	r9, #0
 800f264:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
 800f268:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800f26a:	7813      	ldrb	r3, [r2, #0]
 800f26c:	2b2b      	cmp	r3, #43	; 0x2b
 800f26e:	d04d      	beq.n	800f30c <_strtod_l+0xd4>
 800f270:	d83a      	bhi.n	800f2e8 <_strtod_l+0xb0>
 800f272:	2b0d      	cmp	r3, #13
 800f274:	d833      	bhi.n	800f2de <_strtod_l+0xa6>
 800f276:	2b08      	cmp	r3, #8
 800f278:	d833      	bhi.n	800f2e2 <_strtod_l+0xaa>
 800f27a:	2b00      	cmp	r3, #0
 800f27c:	d03d      	beq.n	800f2fa <_strtod_l+0xc2>
 800f27e:	2300      	movs	r3, #0
 800f280:	9308      	str	r3, [sp, #32]
 800f282:	9e11      	ldr	r6, [sp, #68]	; 0x44
 800f284:	7833      	ldrb	r3, [r6, #0]
 800f286:	2b30      	cmp	r3, #48	; 0x30
 800f288:	f040 80b0 	bne.w	800f3ec <_strtod_l+0x1b4>
 800f28c:	7873      	ldrb	r3, [r6, #1]
 800f28e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800f292:	2b58      	cmp	r3, #88	; 0x58
 800f294:	d167      	bne.n	800f366 <_strtod_l+0x12e>
 800f296:	9b08      	ldr	r3, [sp, #32]
 800f298:	9301      	str	r3, [sp, #4]
 800f29a:	ab12      	add	r3, sp, #72	; 0x48
 800f29c:	9702      	str	r7, [sp, #8]
 800f29e:	9300      	str	r3, [sp, #0]
 800f2a0:	4a8c      	ldr	r2, [pc, #560]	; (800f4d4 <_strtod_l+0x29c>)
 800f2a2:	ab13      	add	r3, sp, #76	; 0x4c
 800f2a4:	a911      	add	r1, sp, #68	; 0x44
 800f2a6:	4620      	mov	r0, r4
 800f2a8:	f000 fe5a 	bl	800ff60 <__gethex>
 800f2ac:	f010 0507 	ands.w	r5, r0, #7
 800f2b0:	4607      	mov	r7, r0
 800f2b2:	d005      	beq.n	800f2c0 <_strtod_l+0x88>
 800f2b4:	2d06      	cmp	r5, #6
 800f2b6:	d12b      	bne.n	800f310 <_strtod_l+0xd8>
 800f2b8:	3601      	adds	r6, #1
 800f2ba:	2300      	movs	r3, #0
 800f2bc:	9611      	str	r6, [sp, #68]	; 0x44
 800f2be:	9308      	str	r3, [sp, #32]
 800f2c0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f2c2:	2b00      	cmp	r3, #0
 800f2c4:	f040 854e 	bne.w	800fd64 <_strtod_l+0xb2c>
 800f2c8:	9b08      	ldr	r3, [sp, #32]
 800f2ca:	b1e3      	cbz	r3, 800f306 <_strtod_l+0xce>
 800f2cc:	ec49 8b17 	vmov	d7, r8, r9
 800f2d0:	eeb1 0b47 	vneg.f64	d0, d7
 800f2d4:	b017      	add	sp, #92	; 0x5c
 800f2d6:	ecbd 8b0e 	vpop	{d8-d14}
 800f2da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f2de:	2b20      	cmp	r3, #32
 800f2e0:	d1cd      	bne.n	800f27e <_strtod_l+0x46>
 800f2e2:	3201      	adds	r2, #1
 800f2e4:	9211      	str	r2, [sp, #68]	; 0x44
 800f2e6:	e7bf      	b.n	800f268 <_strtod_l+0x30>
 800f2e8:	2b2d      	cmp	r3, #45	; 0x2d
 800f2ea:	d1c8      	bne.n	800f27e <_strtod_l+0x46>
 800f2ec:	2301      	movs	r3, #1
 800f2ee:	9308      	str	r3, [sp, #32]
 800f2f0:	1c53      	adds	r3, r2, #1
 800f2f2:	9311      	str	r3, [sp, #68]	; 0x44
 800f2f4:	7853      	ldrb	r3, [r2, #1]
 800f2f6:	2b00      	cmp	r3, #0
 800f2f8:	d1c3      	bne.n	800f282 <_strtod_l+0x4a>
 800f2fa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f2fc:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
 800f300:	2b00      	cmp	r3, #0
 800f302:	f040 852d 	bne.w	800fd60 <_strtod_l+0xb28>
 800f306:	ec49 8b10 	vmov	d0, r8, r9
 800f30a:	e7e3      	b.n	800f2d4 <_strtod_l+0x9c>
 800f30c:	2300      	movs	r3, #0
 800f30e:	e7ee      	b.n	800f2ee <_strtod_l+0xb6>
 800f310:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800f312:	b13a      	cbz	r2, 800f324 <_strtod_l+0xec>
 800f314:	2135      	movs	r1, #53	; 0x35
 800f316:	a814      	add	r0, sp, #80	; 0x50
 800f318:	f001 fde4 	bl	8010ee4 <__copybits>
 800f31c:	9912      	ldr	r1, [sp, #72]	; 0x48
 800f31e:	4620      	mov	r0, r4
 800f320:	f001 f9a6 	bl	8010670 <_Bfree>
 800f324:	3d01      	subs	r5, #1
 800f326:	2d04      	cmp	r5, #4
 800f328:	d806      	bhi.n	800f338 <_strtod_l+0x100>
 800f32a:	e8df f005 	tbb	[pc, r5]
 800f32e:	030a      	.short	0x030a
 800f330:	1714      	.short	0x1714
 800f332:	0a          	.byte	0x0a
 800f333:	00          	.byte	0x00
 800f334:	e9dd 8914 	ldrd	r8, r9, [sp, #80]	; 0x50
 800f338:	073f      	lsls	r7, r7, #28
 800f33a:	d5c1      	bpl.n	800f2c0 <_strtod_l+0x88>
 800f33c:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 800f340:	e7be      	b.n	800f2c0 <_strtod_l+0x88>
 800f342:	e9dd 8314 	ldrd	r8, r3, [sp, #80]	; 0x50
 800f346:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800f348:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800f34c:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800f350:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 800f354:	e7f0      	b.n	800f338 <_strtod_l+0x100>
 800f356:	f8df 9180 	ldr.w	r9, [pc, #384]	; 800f4d8 <_strtod_l+0x2a0>
 800f35a:	e7ed      	b.n	800f338 <_strtod_l+0x100>
 800f35c:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 800f360:	f04f 38ff 	mov.w	r8, #4294967295
 800f364:	e7e8      	b.n	800f338 <_strtod_l+0x100>
 800f366:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800f368:	1c5a      	adds	r2, r3, #1
 800f36a:	9211      	str	r2, [sp, #68]	; 0x44
 800f36c:	785b      	ldrb	r3, [r3, #1]
 800f36e:	2b30      	cmp	r3, #48	; 0x30
 800f370:	d0f9      	beq.n	800f366 <_strtod_l+0x12e>
 800f372:	2b00      	cmp	r3, #0
 800f374:	d0a4      	beq.n	800f2c0 <_strtod_l+0x88>
 800f376:	2301      	movs	r3, #1
 800f378:	f04f 0a00 	mov.w	sl, #0
 800f37c:	9304      	str	r3, [sp, #16]
 800f37e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800f380:	930a      	str	r3, [sp, #40]	; 0x28
 800f382:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 800f386:	f8cd a018 	str.w	sl, [sp, #24]
 800f38a:	220a      	movs	r2, #10
 800f38c:	9811      	ldr	r0, [sp, #68]	; 0x44
 800f38e:	7807      	ldrb	r7, [r0, #0]
 800f390:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 800f394:	b2d9      	uxtb	r1, r3
 800f396:	2909      	cmp	r1, #9
 800f398:	d92a      	bls.n	800f3f0 <_strtod_l+0x1b8>
 800f39a:	9907      	ldr	r1, [sp, #28]
 800f39c:	462a      	mov	r2, r5
 800f39e:	f001 fe17 	bl	8010fd0 <strncmp>
 800f3a2:	2800      	cmp	r0, #0
 800f3a4:	d033      	beq.n	800f40e <_strtod_l+0x1d6>
 800f3a6:	2000      	movs	r0, #0
 800f3a8:	9b06      	ldr	r3, [sp, #24]
 800f3aa:	463a      	mov	r2, r7
 800f3ac:	4601      	mov	r1, r0
 800f3ae:	4607      	mov	r7, r0
 800f3b0:	2a65      	cmp	r2, #101	; 0x65
 800f3b2:	d001      	beq.n	800f3b8 <_strtod_l+0x180>
 800f3b4:	2a45      	cmp	r2, #69	; 0x45
 800f3b6:	d117      	bne.n	800f3e8 <_strtod_l+0x1b0>
 800f3b8:	b91b      	cbnz	r3, 800f3c2 <_strtod_l+0x18a>
 800f3ba:	9b04      	ldr	r3, [sp, #16]
 800f3bc:	4303      	orrs	r3, r0
 800f3be:	d09c      	beq.n	800f2fa <_strtod_l+0xc2>
 800f3c0:	2300      	movs	r3, #0
 800f3c2:	f8dd b044 	ldr.w	fp, [sp, #68]	; 0x44
 800f3c6:	f10b 0201 	add.w	r2, fp, #1
 800f3ca:	9211      	str	r2, [sp, #68]	; 0x44
 800f3cc:	f89b 2001 	ldrb.w	r2, [fp, #1]
 800f3d0:	2a2b      	cmp	r2, #43	; 0x2b
 800f3d2:	d071      	beq.n	800f4b8 <_strtod_l+0x280>
 800f3d4:	2a2d      	cmp	r2, #45	; 0x2d
 800f3d6:	d077      	beq.n	800f4c8 <_strtod_l+0x290>
 800f3d8:	f04f 0e00 	mov.w	lr, #0
 800f3dc:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 800f3e0:	2d09      	cmp	r5, #9
 800f3e2:	d97f      	bls.n	800f4e4 <_strtod_l+0x2ac>
 800f3e4:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
 800f3e8:	2500      	movs	r5, #0
 800f3ea:	e09b      	b.n	800f524 <_strtod_l+0x2ec>
 800f3ec:	2300      	movs	r3, #0
 800f3ee:	e7c3      	b.n	800f378 <_strtod_l+0x140>
 800f3f0:	9906      	ldr	r1, [sp, #24]
 800f3f2:	2908      	cmp	r1, #8
 800f3f4:	bfdd      	ittte	le
 800f3f6:	9909      	ldrle	r1, [sp, #36]	; 0x24
 800f3f8:	fb02 3301 	mlale	r3, r2, r1, r3
 800f3fc:	9309      	strle	r3, [sp, #36]	; 0x24
 800f3fe:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 800f402:	9b06      	ldr	r3, [sp, #24]
 800f404:	3001      	adds	r0, #1
 800f406:	3301      	adds	r3, #1
 800f408:	9306      	str	r3, [sp, #24]
 800f40a:	9011      	str	r0, [sp, #68]	; 0x44
 800f40c:	e7be      	b.n	800f38c <_strtod_l+0x154>
 800f40e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800f410:	195a      	adds	r2, r3, r5
 800f412:	9211      	str	r2, [sp, #68]	; 0x44
 800f414:	5d5a      	ldrb	r2, [r3, r5]
 800f416:	9b06      	ldr	r3, [sp, #24]
 800f418:	b3a3      	cbz	r3, 800f484 <_strtod_l+0x24c>
 800f41a:	4607      	mov	r7, r0
 800f41c:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800f420:	2909      	cmp	r1, #9
 800f422:	d912      	bls.n	800f44a <_strtod_l+0x212>
 800f424:	2101      	movs	r1, #1
 800f426:	e7c3      	b.n	800f3b0 <_strtod_l+0x178>
 800f428:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800f42a:	1c5a      	adds	r2, r3, #1
 800f42c:	9211      	str	r2, [sp, #68]	; 0x44
 800f42e:	785a      	ldrb	r2, [r3, #1]
 800f430:	3001      	adds	r0, #1
 800f432:	2a30      	cmp	r2, #48	; 0x30
 800f434:	d0f8      	beq.n	800f428 <_strtod_l+0x1f0>
 800f436:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800f43a:	2b08      	cmp	r3, #8
 800f43c:	f200 8497 	bhi.w	800fd6e <_strtod_l+0xb36>
 800f440:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800f442:	930a      	str	r3, [sp, #40]	; 0x28
 800f444:	4607      	mov	r7, r0
 800f446:	2000      	movs	r0, #0
 800f448:	4603      	mov	r3, r0
 800f44a:	3a30      	subs	r2, #48	; 0x30
 800f44c:	f100 0101 	add.w	r1, r0, #1
 800f450:	d012      	beq.n	800f478 <_strtod_l+0x240>
 800f452:	440f      	add	r7, r1
 800f454:	eb00 0c03 	add.w	ip, r0, r3
 800f458:	4619      	mov	r1, r3
 800f45a:	250a      	movs	r5, #10
 800f45c:	4561      	cmp	r1, ip
 800f45e:	d113      	bne.n	800f488 <_strtod_l+0x250>
 800f460:	1819      	adds	r1, r3, r0
 800f462:	2908      	cmp	r1, #8
 800f464:	f103 0301 	add.w	r3, r3, #1
 800f468:	4403      	add	r3, r0
 800f46a:	dc1c      	bgt.n	800f4a6 <_strtod_l+0x26e>
 800f46c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f46e:	210a      	movs	r1, #10
 800f470:	fb01 2200 	mla	r2, r1, r0, r2
 800f474:	9209      	str	r2, [sp, #36]	; 0x24
 800f476:	2100      	movs	r1, #0
 800f478:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800f47a:	1c50      	adds	r0, r2, #1
 800f47c:	9011      	str	r0, [sp, #68]	; 0x44
 800f47e:	7852      	ldrb	r2, [r2, #1]
 800f480:	4608      	mov	r0, r1
 800f482:	e7cb      	b.n	800f41c <_strtod_l+0x1e4>
 800f484:	9806      	ldr	r0, [sp, #24]
 800f486:	e7d4      	b.n	800f432 <_strtod_l+0x1fa>
 800f488:	2908      	cmp	r1, #8
 800f48a:	dc04      	bgt.n	800f496 <_strtod_l+0x25e>
 800f48c:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800f48e:	436e      	muls	r6, r5
 800f490:	9609      	str	r6, [sp, #36]	; 0x24
 800f492:	3101      	adds	r1, #1
 800f494:	e7e2      	b.n	800f45c <_strtod_l+0x224>
 800f496:	f101 0e01 	add.w	lr, r1, #1
 800f49a:	f1be 0f10 	cmp.w	lr, #16
 800f49e:	bfd8      	it	le
 800f4a0:	fb05 fa0a 	mulle.w	sl, r5, sl
 800f4a4:	e7f5      	b.n	800f492 <_strtod_l+0x25a>
 800f4a6:	2b10      	cmp	r3, #16
 800f4a8:	bfdc      	itt	le
 800f4aa:	210a      	movle	r1, #10
 800f4ac:	fb01 2a0a 	mlale	sl, r1, sl, r2
 800f4b0:	e7e1      	b.n	800f476 <_strtod_l+0x23e>
 800f4b2:	2700      	movs	r7, #0
 800f4b4:	2101      	movs	r1, #1
 800f4b6:	e780      	b.n	800f3ba <_strtod_l+0x182>
 800f4b8:	f04f 0e00 	mov.w	lr, #0
 800f4bc:	f10b 0202 	add.w	r2, fp, #2
 800f4c0:	9211      	str	r2, [sp, #68]	; 0x44
 800f4c2:	f89b 2002 	ldrb.w	r2, [fp, #2]
 800f4c6:	e789      	b.n	800f3dc <_strtod_l+0x1a4>
 800f4c8:	f04f 0e01 	mov.w	lr, #1
 800f4cc:	e7f6      	b.n	800f4bc <_strtod_l+0x284>
 800f4ce:	bf00      	nop
 800f4d0:	08012358 	.word	0x08012358
 800f4d4:	0801228c 	.word	0x0801228c
 800f4d8:	7ff00000 	.word	0x7ff00000
 800f4dc:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800f4de:	1c55      	adds	r5, r2, #1
 800f4e0:	9511      	str	r5, [sp, #68]	; 0x44
 800f4e2:	7852      	ldrb	r2, [r2, #1]
 800f4e4:	2a30      	cmp	r2, #48	; 0x30
 800f4e6:	d0f9      	beq.n	800f4dc <_strtod_l+0x2a4>
 800f4e8:	f1a2 0531 	sub.w	r5, r2, #49	; 0x31
 800f4ec:	2d08      	cmp	r5, #8
 800f4ee:	f63f af7b 	bhi.w	800f3e8 <_strtod_l+0x1b0>
 800f4f2:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 800f4f6:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800f4f8:	9207      	str	r2, [sp, #28]
 800f4fa:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800f4fc:	1c55      	adds	r5, r2, #1
 800f4fe:	9511      	str	r5, [sp, #68]	; 0x44
 800f500:	7852      	ldrb	r2, [r2, #1]
 800f502:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 800f506:	2e09      	cmp	r6, #9
 800f508:	d937      	bls.n	800f57a <_strtod_l+0x342>
 800f50a:	9e07      	ldr	r6, [sp, #28]
 800f50c:	1bad      	subs	r5, r5, r6
 800f50e:	2d08      	cmp	r5, #8
 800f510:	f644 651f 	movw	r5, #19999	; 0x4e1f
 800f514:	dc02      	bgt.n	800f51c <_strtod_l+0x2e4>
 800f516:	4565      	cmp	r5, ip
 800f518:	bfa8      	it	ge
 800f51a:	4665      	movge	r5, ip
 800f51c:	f1be 0f00 	cmp.w	lr, #0
 800f520:	d000      	beq.n	800f524 <_strtod_l+0x2ec>
 800f522:	426d      	negs	r5, r5
 800f524:	2b00      	cmp	r3, #0
 800f526:	d14d      	bne.n	800f5c4 <_strtod_l+0x38c>
 800f528:	9b04      	ldr	r3, [sp, #16]
 800f52a:	4303      	orrs	r3, r0
 800f52c:	f47f aec8 	bne.w	800f2c0 <_strtod_l+0x88>
 800f530:	2900      	cmp	r1, #0
 800f532:	f47f aee2 	bne.w	800f2fa <_strtod_l+0xc2>
 800f536:	2a69      	cmp	r2, #105	; 0x69
 800f538:	d027      	beq.n	800f58a <_strtod_l+0x352>
 800f53a:	dc24      	bgt.n	800f586 <_strtod_l+0x34e>
 800f53c:	2a49      	cmp	r2, #73	; 0x49
 800f53e:	d024      	beq.n	800f58a <_strtod_l+0x352>
 800f540:	2a4e      	cmp	r2, #78	; 0x4e
 800f542:	f47f aeda 	bne.w	800f2fa <_strtod_l+0xc2>
 800f546:	4996      	ldr	r1, [pc, #600]	; (800f7a0 <_strtod_l+0x568>)
 800f548:	a811      	add	r0, sp, #68	; 0x44
 800f54a:	f000 ff61 	bl	8010410 <__match>
 800f54e:	2800      	cmp	r0, #0
 800f550:	f43f aed3 	beq.w	800f2fa <_strtod_l+0xc2>
 800f554:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800f556:	781b      	ldrb	r3, [r3, #0]
 800f558:	2b28      	cmp	r3, #40	; 0x28
 800f55a:	d12d      	bne.n	800f5b8 <_strtod_l+0x380>
 800f55c:	4991      	ldr	r1, [pc, #580]	; (800f7a4 <_strtod_l+0x56c>)
 800f55e:	aa14      	add	r2, sp, #80	; 0x50
 800f560:	a811      	add	r0, sp, #68	; 0x44
 800f562:	f000 ff69 	bl	8010438 <__hexnan>
 800f566:	2805      	cmp	r0, #5
 800f568:	d126      	bne.n	800f5b8 <_strtod_l+0x380>
 800f56a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800f56c:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 800f570:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 800f574:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 800f578:	e6a2      	b.n	800f2c0 <_strtod_l+0x88>
 800f57a:	250a      	movs	r5, #10
 800f57c:	fb05 250c 	mla	r5, r5, ip, r2
 800f580:	f1a5 0c30 	sub.w	ip, r5, #48	; 0x30
 800f584:	e7b9      	b.n	800f4fa <_strtod_l+0x2c2>
 800f586:	2a6e      	cmp	r2, #110	; 0x6e
 800f588:	e7db      	b.n	800f542 <_strtod_l+0x30a>
 800f58a:	4987      	ldr	r1, [pc, #540]	; (800f7a8 <_strtod_l+0x570>)
 800f58c:	a811      	add	r0, sp, #68	; 0x44
 800f58e:	f000 ff3f 	bl	8010410 <__match>
 800f592:	2800      	cmp	r0, #0
 800f594:	f43f aeb1 	beq.w	800f2fa <_strtod_l+0xc2>
 800f598:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800f59a:	4984      	ldr	r1, [pc, #528]	; (800f7ac <_strtod_l+0x574>)
 800f59c:	3b01      	subs	r3, #1
 800f59e:	a811      	add	r0, sp, #68	; 0x44
 800f5a0:	9311      	str	r3, [sp, #68]	; 0x44
 800f5a2:	f000 ff35 	bl	8010410 <__match>
 800f5a6:	b910      	cbnz	r0, 800f5ae <_strtod_l+0x376>
 800f5a8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800f5aa:	3301      	adds	r3, #1
 800f5ac:	9311      	str	r3, [sp, #68]	; 0x44
 800f5ae:	f8df 9210 	ldr.w	r9, [pc, #528]	; 800f7c0 <_strtod_l+0x588>
 800f5b2:	f04f 0800 	mov.w	r8, #0
 800f5b6:	e683      	b.n	800f2c0 <_strtod_l+0x88>
 800f5b8:	487d      	ldr	r0, [pc, #500]	; (800f7b0 <_strtod_l+0x578>)
 800f5ba:	f001 fd01 	bl	8010fc0 <nan>
 800f5be:	ec59 8b10 	vmov	r8, r9, d0
 800f5c2:	e67d      	b.n	800f2c0 <_strtod_l+0x88>
 800f5c4:	1bea      	subs	r2, r5, r7
 800f5c6:	eddd 7a09 	vldr	s15, [sp, #36]	; 0x24
 800f5ca:	9207      	str	r2, [sp, #28]
 800f5cc:	9a06      	ldr	r2, [sp, #24]
 800f5ce:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800f5d2:	2a00      	cmp	r2, #0
 800f5d4:	bf08      	it	eq
 800f5d6:	461a      	moveq	r2, r3
 800f5d8:	2b10      	cmp	r3, #16
 800f5da:	9206      	str	r2, [sp, #24]
 800f5dc:	461a      	mov	r2, r3
 800f5de:	bfa8      	it	ge
 800f5e0:	2210      	movge	r2, #16
 800f5e2:	2b09      	cmp	r3, #9
 800f5e4:	ec59 8b17 	vmov	r8, r9, d7
 800f5e8:	dd0c      	ble.n	800f604 <_strtod_l+0x3cc>
 800f5ea:	4972      	ldr	r1, [pc, #456]	; (800f7b4 <_strtod_l+0x57c>)
 800f5ec:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 800f5f0:	ed11 5b12 	vldr	d5, [r1, #-72]	; 0xffffffb8
 800f5f4:	ee06 aa90 	vmov	s13, sl
 800f5f8:	eeb8 6b66 	vcvt.f64.u32	d6, s13
 800f5fc:	eea7 6b05 	vfma.f64	d6, d7, d5
 800f600:	ec59 8b16 	vmov	r8, r9, d6
 800f604:	2b0f      	cmp	r3, #15
 800f606:	dc36      	bgt.n	800f676 <_strtod_l+0x43e>
 800f608:	9907      	ldr	r1, [sp, #28]
 800f60a:	2900      	cmp	r1, #0
 800f60c:	f43f ae58 	beq.w	800f2c0 <_strtod_l+0x88>
 800f610:	dd23      	ble.n	800f65a <_strtod_l+0x422>
 800f612:	2916      	cmp	r1, #22
 800f614:	dc0b      	bgt.n	800f62e <_strtod_l+0x3f6>
 800f616:	4b67      	ldr	r3, [pc, #412]	; (800f7b4 <_strtod_l+0x57c>)
 800f618:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 800f61c:	ed93 7b00 	vldr	d7, [r3]
 800f620:	ec49 8b16 	vmov	d6, r8, r9
 800f624:	ee27 7b06 	vmul.f64	d7, d7, d6
 800f628:	ec59 8b17 	vmov	r8, r9, d7
 800f62c:	e648      	b.n	800f2c0 <_strtod_l+0x88>
 800f62e:	9807      	ldr	r0, [sp, #28]
 800f630:	f1c3 0125 	rsb	r1, r3, #37	; 0x25
 800f634:	4281      	cmp	r1, r0
 800f636:	db1e      	blt.n	800f676 <_strtod_l+0x43e>
 800f638:	4a5e      	ldr	r2, [pc, #376]	; (800f7b4 <_strtod_l+0x57c>)
 800f63a:	f1c3 030f 	rsb	r3, r3, #15
 800f63e:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 800f642:	ed91 7b00 	vldr	d7, [r1]
 800f646:	ec49 8b16 	vmov	d6, r8, r9
 800f64a:	1ac3      	subs	r3, r0, r3
 800f64c:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 800f650:	ee27 7b06 	vmul.f64	d7, d7, d6
 800f654:	ed92 6b00 	vldr	d6, [r2]
 800f658:	e7e4      	b.n	800f624 <_strtod_l+0x3ec>
 800f65a:	9907      	ldr	r1, [sp, #28]
 800f65c:	3116      	adds	r1, #22
 800f65e:	db0a      	blt.n	800f676 <_strtod_l+0x43e>
 800f660:	4b54      	ldr	r3, [pc, #336]	; (800f7b4 <_strtod_l+0x57c>)
 800f662:	1b7d      	subs	r5, r7, r5
 800f664:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800f668:	ed95 7b00 	vldr	d7, [r5]
 800f66c:	ec49 8b16 	vmov	d6, r8, r9
 800f670:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800f674:	e7d8      	b.n	800f628 <_strtod_l+0x3f0>
 800f676:	9907      	ldr	r1, [sp, #28]
 800f678:	1a9a      	subs	r2, r3, r2
 800f67a:	440a      	add	r2, r1
 800f67c:	2a00      	cmp	r2, #0
 800f67e:	dd6f      	ble.n	800f760 <_strtod_l+0x528>
 800f680:	f012 000f 	ands.w	r0, r2, #15
 800f684:	d00a      	beq.n	800f69c <_strtod_l+0x464>
 800f686:	494b      	ldr	r1, [pc, #300]	; (800f7b4 <_strtod_l+0x57c>)
 800f688:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 800f68c:	ed91 7b00 	vldr	d7, [r1]
 800f690:	ec49 8b16 	vmov	d6, r8, r9
 800f694:	ee27 7b06 	vmul.f64	d7, d7, d6
 800f698:	ec59 8b17 	vmov	r8, r9, d7
 800f69c:	f032 020f 	bics.w	r2, r2, #15
 800f6a0:	d04f      	beq.n	800f742 <_strtod_l+0x50a>
 800f6a2:	f5b2 7f9a 	cmp.w	r2, #308	; 0x134
 800f6a6:	dd22      	ble.n	800f6ee <_strtod_l+0x4b6>
 800f6a8:	2500      	movs	r5, #0
 800f6aa:	462e      	mov	r6, r5
 800f6ac:	9506      	str	r5, [sp, #24]
 800f6ae:	462f      	mov	r7, r5
 800f6b0:	2322      	movs	r3, #34	; 0x22
 800f6b2:	f8df 910c 	ldr.w	r9, [pc, #268]	; 800f7c0 <_strtod_l+0x588>
 800f6b6:	6023      	str	r3, [r4, #0]
 800f6b8:	f04f 0800 	mov.w	r8, #0
 800f6bc:	9b06      	ldr	r3, [sp, #24]
 800f6be:	2b00      	cmp	r3, #0
 800f6c0:	f43f adfe 	beq.w	800f2c0 <_strtod_l+0x88>
 800f6c4:	9912      	ldr	r1, [sp, #72]	; 0x48
 800f6c6:	4620      	mov	r0, r4
 800f6c8:	f000 ffd2 	bl	8010670 <_Bfree>
 800f6cc:	4639      	mov	r1, r7
 800f6ce:	4620      	mov	r0, r4
 800f6d0:	f000 ffce 	bl	8010670 <_Bfree>
 800f6d4:	4631      	mov	r1, r6
 800f6d6:	4620      	mov	r0, r4
 800f6d8:	f000 ffca 	bl	8010670 <_Bfree>
 800f6dc:	9906      	ldr	r1, [sp, #24]
 800f6de:	4620      	mov	r0, r4
 800f6e0:	f000 ffc6 	bl	8010670 <_Bfree>
 800f6e4:	4629      	mov	r1, r5
 800f6e6:	4620      	mov	r0, r4
 800f6e8:	f000 ffc2 	bl	8010670 <_Bfree>
 800f6ec:	e5e8      	b.n	800f2c0 <_strtod_l+0x88>
 800f6ee:	2000      	movs	r0, #0
 800f6f0:	ec49 8b17 	vmov	d7, r8, r9
 800f6f4:	f8df c0c0 	ldr.w	ip, [pc, #192]	; 800f7b8 <_strtod_l+0x580>
 800f6f8:	1112      	asrs	r2, r2, #4
 800f6fa:	4601      	mov	r1, r0
 800f6fc:	2a01      	cmp	r2, #1
 800f6fe:	dc23      	bgt.n	800f748 <_strtod_l+0x510>
 800f700:	b108      	cbz	r0, 800f706 <_strtod_l+0x4ce>
 800f702:	ec59 8b17 	vmov	r8, r9, d7
 800f706:	4a2c      	ldr	r2, [pc, #176]	; (800f7b8 <_strtod_l+0x580>)
 800f708:	482c      	ldr	r0, [pc, #176]	; (800f7bc <_strtod_l+0x584>)
 800f70a:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800f70e:	ed92 7b00 	vldr	d7, [r2]
 800f712:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 800f716:	ec49 8b16 	vmov	d6, r8, r9
 800f71a:	4a29      	ldr	r2, [pc, #164]	; (800f7c0 <_strtod_l+0x588>)
 800f71c:	ee27 7b06 	vmul.f64	d7, d7, d6
 800f720:	ee17 1a90 	vmov	r1, s15
 800f724:	400a      	ands	r2, r1
 800f726:	4282      	cmp	r2, r0
 800f728:	ec59 8b17 	vmov	r8, r9, d7
 800f72c:	d8bc      	bhi.n	800f6a8 <_strtod_l+0x470>
 800f72e:	f5a0 1080 	sub.w	r0, r0, #1048576	; 0x100000
 800f732:	4282      	cmp	r2, r0
 800f734:	bf86      	itte	hi
 800f736:	f8df 908c 	ldrhi.w	r9, [pc, #140]	; 800f7c4 <_strtod_l+0x58c>
 800f73a:	f04f 38ff 	movhi.w	r8, #4294967295
 800f73e:	f101 7954 	addls.w	r9, r1, #55574528	; 0x3500000
 800f742:	2200      	movs	r2, #0
 800f744:	9204      	str	r2, [sp, #16]
 800f746:	e078      	b.n	800f83a <_strtod_l+0x602>
 800f748:	07d6      	lsls	r6, r2, #31
 800f74a:	d504      	bpl.n	800f756 <_strtod_l+0x51e>
 800f74c:	ed9c 6b00 	vldr	d6, [ip]
 800f750:	2001      	movs	r0, #1
 800f752:	ee27 7b06 	vmul.f64	d7, d7, d6
 800f756:	3101      	adds	r1, #1
 800f758:	1052      	asrs	r2, r2, #1
 800f75a:	f10c 0c08 	add.w	ip, ip, #8
 800f75e:	e7cd      	b.n	800f6fc <_strtod_l+0x4c4>
 800f760:	d0ef      	beq.n	800f742 <_strtod_l+0x50a>
 800f762:	4252      	negs	r2, r2
 800f764:	f012 000f 	ands.w	r0, r2, #15
 800f768:	d00a      	beq.n	800f780 <_strtod_l+0x548>
 800f76a:	4912      	ldr	r1, [pc, #72]	; (800f7b4 <_strtod_l+0x57c>)
 800f76c:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 800f770:	ed91 7b00 	vldr	d7, [r1]
 800f774:	ec49 8b16 	vmov	d6, r8, r9
 800f778:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800f77c:	ec59 8b17 	vmov	r8, r9, d7
 800f780:	1112      	asrs	r2, r2, #4
 800f782:	d0de      	beq.n	800f742 <_strtod_l+0x50a>
 800f784:	2a1f      	cmp	r2, #31
 800f786:	dd1f      	ble.n	800f7c8 <_strtod_l+0x590>
 800f788:	2500      	movs	r5, #0
 800f78a:	462e      	mov	r6, r5
 800f78c:	9506      	str	r5, [sp, #24]
 800f78e:	462f      	mov	r7, r5
 800f790:	2322      	movs	r3, #34	; 0x22
 800f792:	f04f 0800 	mov.w	r8, #0
 800f796:	f04f 0900 	mov.w	r9, #0
 800f79a:	6023      	str	r3, [r4, #0]
 800f79c:	e78e      	b.n	800f6bc <_strtod_l+0x484>
 800f79e:	bf00      	nop
 800f7a0:	08012289 	.word	0x08012289
 800f7a4:	080122a0 	.word	0x080122a0
 800f7a8:	08012280 	.word	0x08012280
 800f7ac:	08012283 	.word	0x08012283
 800f7b0:	08012517 	.word	0x08012517
 800f7b4:	08012408 	.word	0x08012408
 800f7b8:	080123e0 	.word	0x080123e0
 800f7bc:	7ca00000 	.word	0x7ca00000
 800f7c0:	7ff00000 	.word	0x7ff00000
 800f7c4:	7fefffff 	.word	0x7fefffff
 800f7c8:	f012 0110 	ands.w	r1, r2, #16
 800f7cc:	bf18      	it	ne
 800f7ce:	216a      	movne	r1, #106	; 0x6a
 800f7d0:	9104      	str	r1, [sp, #16]
 800f7d2:	ec49 8b17 	vmov	d7, r8, r9
 800f7d6:	49be      	ldr	r1, [pc, #760]	; (800fad0 <_strtod_l+0x898>)
 800f7d8:	2000      	movs	r0, #0
 800f7da:	07d6      	lsls	r6, r2, #31
 800f7dc:	d504      	bpl.n	800f7e8 <_strtod_l+0x5b0>
 800f7de:	ed91 6b00 	vldr	d6, [r1]
 800f7e2:	2001      	movs	r0, #1
 800f7e4:	ee27 7b06 	vmul.f64	d7, d7, d6
 800f7e8:	1052      	asrs	r2, r2, #1
 800f7ea:	f101 0108 	add.w	r1, r1, #8
 800f7ee:	d1f4      	bne.n	800f7da <_strtod_l+0x5a2>
 800f7f0:	b108      	cbz	r0, 800f7f6 <_strtod_l+0x5be>
 800f7f2:	ec59 8b17 	vmov	r8, r9, d7
 800f7f6:	9a04      	ldr	r2, [sp, #16]
 800f7f8:	b1c2      	cbz	r2, 800f82c <_strtod_l+0x5f4>
 800f7fa:	f3c9 510a 	ubfx	r1, r9, #20, #11
 800f7fe:	f1c1 026b 	rsb	r2, r1, #107	; 0x6b
 800f802:	2a00      	cmp	r2, #0
 800f804:	4648      	mov	r0, r9
 800f806:	dd11      	ble.n	800f82c <_strtod_l+0x5f4>
 800f808:	2a1f      	cmp	r2, #31
 800f80a:	f340 812e 	ble.w	800fa6a <_strtod_l+0x832>
 800f80e:	2a34      	cmp	r2, #52	; 0x34
 800f810:	bfde      	ittt	le
 800f812:	f1c1 014b 	rsble	r1, r1, #75	; 0x4b
 800f816:	f04f 32ff 	movle.w	r2, #4294967295
 800f81a:	fa02 f101 	lslle.w	r1, r2, r1
 800f81e:	f04f 0800 	mov.w	r8, #0
 800f822:	bfcc      	ite	gt
 800f824:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 800f828:	ea01 0900 	andle.w	r9, r1, r0
 800f82c:	ec49 8b17 	vmov	d7, r8, r9
 800f830:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800f834:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f838:	d0a6      	beq.n	800f788 <_strtod_l+0x550>
 800f83a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f83c:	9200      	str	r2, [sp, #0]
 800f83e:	990a      	ldr	r1, [sp, #40]	; 0x28
 800f840:	9a06      	ldr	r2, [sp, #24]
 800f842:	4620      	mov	r0, r4
 800f844:	f000 ff7c 	bl	8010740 <__s2b>
 800f848:	9006      	str	r0, [sp, #24]
 800f84a:	2800      	cmp	r0, #0
 800f84c:	f43f af2c 	beq.w	800f6a8 <_strtod_l+0x470>
 800f850:	9b07      	ldr	r3, [sp, #28]
 800f852:	1b7d      	subs	r5, r7, r5
 800f854:	2b00      	cmp	r3, #0
 800f856:	bfb4      	ite	lt
 800f858:	462b      	movlt	r3, r5
 800f85a:	2300      	movge	r3, #0
 800f85c:	9309      	str	r3, [sp, #36]	; 0x24
 800f85e:	9b07      	ldr	r3, [sp, #28]
 800f860:	ed9f 9b93 	vldr	d9, [pc, #588]	; 800fab0 <_strtod_l+0x878>
 800f864:	ed9f ab94 	vldr	d10, [pc, #592]	; 800fab8 <_strtod_l+0x880>
 800f868:	ed9f bb95 	vldr	d11, [pc, #596]	; 800fac0 <_strtod_l+0x888>
 800f86c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800f870:	2500      	movs	r5, #0
 800f872:	930c      	str	r3, [sp, #48]	; 0x30
 800f874:	462e      	mov	r6, r5
 800f876:	9b06      	ldr	r3, [sp, #24]
 800f878:	4620      	mov	r0, r4
 800f87a:	6859      	ldr	r1, [r3, #4]
 800f87c:	f000 feb8 	bl	80105f0 <_Balloc>
 800f880:	4607      	mov	r7, r0
 800f882:	2800      	cmp	r0, #0
 800f884:	f43f af14 	beq.w	800f6b0 <_strtod_l+0x478>
 800f888:	9b06      	ldr	r3, [sp, #24]
 800f88a:	691a      	ldr	r2, [r3, #16]
 800f88c:	3202      	adds	r2, #2
 800f88e:	f103 010c 	add.w	r1, r3, #12
 800f892:	0092      	lsls	r2, r2, #2
 800f894:	300c      	adds	r0, #12
 800f896:	f7ff fac5 	bl	800ee24 <memcpy>
 800f89a:	ec49 8b10 	vmov	d0, r8, r9
 800f89e:	aa14      	add	r2, sp, #80	; 0x50
 800f8a0:	a913      	add	r1, sp, #76	; 0x4c
 800f8a2:	4620      	mov	r0, r4
 800f8a4:	f001 fa92 	bl	8010dcc <__d2b>
 800f8a8:	ec49 8b18 	vmov	d8, r8, r9
 800f8ac:	9012      	str	r0, [sp, #72]	; 0x48
 800f8ae:	2800      	cmp	r0, #0
 800f8b0:	f43f aefe 	beq.w	800f6b0 <_strtod_l+0x478>
 800f8b4:	2101      	movs	r1, #1
 800f8b6:	4620      	mov	r0, r4
 800f8b8:	f000 ffdc 	bl	8010874 <__i2b>
 800f8bc:	4606      	mov	r6, r0
 800f8be:	2800      	cmp	r0, #0
 800f8c0:	f43f aef6 	beq.w	800f6b0 <_strtod_l+0x478>
 800f8c4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800f8c6:	9914      	ldr	r1, [sp, #80]	; 0x50
 800f8c8:	2b00      	cmp	r3, #0
 800f8ca:	bfab      	itete	ge
 800f8cc:	9a09      	ldrge	r2, [sp, #36]	; 0x24
 800f8ce:	9a0c      	ldrlt	r2, [sp, #48]	; 0x30
 800f8d0:	f8dd a030 	ldrge.w	sl, [sp, #48]	; 0x30
 800f8d4:	f8dd b024 	ldrlt.w	fp, [sp, #36]	; 0x24
 800f8d8:	bfac      	ite	ge
 800f8da:	eb03 0b02 	addge.w	fp, r3, r2
 800f8de:	eba2 0a03 	sublt.w	sl, r2, r3
 800f8e2:	9a04      	ldr	r2, [sp, #16]
 800f8e4:	1a9b      	subs	r3, r3, r2
 800f8e6:	440b      	add	r3, r1
 800f8e8:	4a7a      	ldr	r2, [pc, #488]	; (800fad4 <_strtod_l+0x89c>)
 800f8ea:	3b01      	subs	r3, #1
 800f8ec:	4293      	cmp	r3, r2
 800f8ee:	f1c1 0136 	rsb	r1, r1, #54	; 0x36
 800f8f2:	f280 80cd 	bge.w	800fa90 <_strtod_l+0x858>
 800f8f6:	1ad2      	subs	r2, r2, r3
 800f8f8:	2a1f      	cmp	r2, #31
 800f8fa:	eba1 0102 	sub.w	r1, r1, r2
 800f8fe:	f04f 0001 	mov.w	r0, #1
 800f902:	f300 80b9 	bgt.w	800fa78 <_strtod_l+0x840>
 800f906:	fa00 f302 	lsl.w	r3, r0, r2
 800f90a:	930b      	str	r3, [sp, #44]	; 0x2c
 800f90c:	2300      	movs	r3, #0
 800f90e:	930a      	str	r3, [sp, #40]	; 0x28
 800f910:	eb0b 0301 	add.w	r3, fp, r1
 800f914:	9a04      	ldr	r2, [sp, #16]
 800f916:	459b      	cmp	fp, r3
 800f918:	448a      	add	sl, r1
 800f91a:	4492      	add	sl, r2
 800f91c:	465a      	mov	r2, fp
 800f91e:	bfa8      	it	ge
 800f920:	461a      	movge	r2, r3
 800f922:	4552      	cmp	r2, sl
 800f924:	bfa8      	it	ge
 800f926:	4652      	movge	r2, sl
 800f928:	2a00      	cmp	r2, #0
 800f92a:	bfc2      	ittt	gt
 800f92c:	1a9b      	subgt	r3, r3, r2
 800f92e:	ebaa 0a02 	subgt.w	sl, sl, r2
 800f932:	ebab 0b02 	subgt.w	fp, fp, r2
 800f936:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f938:	2a00      	cmp	r2, #0
 800f93a:	dd18      	ble.n	800f96e <_strtod_l+0x736>
 800f93c:	4631      	mov	r1, r6
 800f93e:	4620      	mov	r0, r4
 800f940:	930f      	str	r3, [sp, #60]	; 0x3c
 800f942:	f001 f857 	bl	80109f4 <__pow5mult>
 800f946:	4606      	mov	r6, r0
 800f948:	2800      	cmp	r0, #0
 800f94a:	f43f aeb1 	beq.w	800f6b0 <_strtod_l+0x478>
 800f94e:	4601      	mov	r1, r0
 800f950:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800f952:	4620      	mov	r0, r4
 800f954:	f000 ffa4 	bl	80108a0 <__multiply>
 800f958:	900e      	str	r0, [sp, #56]	; 0x38
 800f95a:	2800      	cmp	r0, #0
 800f95c:	f43f aea8 	beq.w	800f6b0 <_strtod_l+0x478>
 800f960:	9912      	ldr	r1, [sp, #72]	; 0x48
 800f962:	4620      	mov	r0, r4
 800f964:	f000 fe84 	bl	8010670 <_Bfree>
 800f968:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800f96a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800f96c:	9212      	str	r2, [sp, #72]	; 0x48
 800f96e:	2b00      	cmp	r3, #0
 800f970:	f300 8093 	bgt.w	800fa9a <_strtod_l+0x862>
 800f974:	9b07      	ldr	r3, [sp, #28]
 800f976:	2b00      	cmp	r3, #0
 800f978:	dd08      	ble.n	800f98c <_strtod_l+0x754>
 800f97a:	4639      	mov	r1, r7
 800f97c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800f97e:	4620      	mov	r0, r4
 800f980:	f001 f838 	bl	80109f4 <__pow5mult>
 800f984:	4607      	mov	r7, r0
 800f986:	2800      	cmp	r0, #0
 800f988:	f43f ae92 	beq.w	800f6b0 <_strtod_l+0x478>
 800f98c:	f1ba 0f00 	cmp.w	sl, #0
 800f990:	dd08      	ble.n	800f9a4 <_strtod_l+0x76c>
 800f992:	4639      	mov	r1, r7
 800f994:	4652      	mov	r2, sl
 800f996:	4620      	mov	r0, r4
 800f998:	f001 f886 	bl	8010aa8 <__lshift>
 800f99c:	4607      	mov	r7, r0
 800f99e:	2800      	cmp	r0, #0
 800f9a0:	f43f ae86 	beq.w	800f6b0 <_strtod_l+0x478>
 800f9a4:	f1bb 0f00 	cmp.w	fp, #0
 800f9a8:	dd08      	ble.n	800f9bc <_strtod_l+0x784>
 800f9aa:	4631      	mov	r1, r6
 800f9ac:	465a      	mov	r2, fp
 800f9ae:	4620      	mov	r0, r4
 800f9b0:	f001 f87a 	bl	8010aa8 <__lshift>
 800f9b4:	4606      	mov	r6, r0
 800f9b6:	2800      	cmp	r0, #0
 800f9b8:	f43f ae7a 	beq.w	800f6b0 <_strtod_l+0x478>
 800f9bc:	9912      	ldr	r1, [sp, #72]	; 0x48
 800f9be:	463a      	mov	r2, r7
 800f9c0:	4620      	mov	r0, r4
 800f9c2:	f001 f8fd 	bl	8010bc0 <__mdiff>
 800f9c6:	4605      	mov	r5, r0
 800f9c8:	2800      	cmp	r0, #0
 800f9ca:	f43f ae71 	beq.w	800f6b0 <_strtod_l+0x478>
 800f9ce:	2300      	movs	r3, #0
 800f9d0:	f8d0 a00c 	ldr.w	sl, [r0, #12]
 800f9d4:	60c3      	str	r3, [r0, #12]
 800f9d6:	4631      	mov	r1, r6
 800f9d8:	f001 f8d6 	bl	8010b88 <__mcmp>
 800f9dc:	2800      	cmp	r0, #0
 800f9de:	da7d      	bge.n	800fadc <_strtod_l+0x8a4>
 800f9e0:	ea5a 0308 	orrs.w	r3, sl, r8
 800f9e4:	f040 80a3 	bne.w	800fb2e <_strtod_l+0x8f6>
 800f9e8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800f9ec:	2b00      	cmp	r3, #0
 800f9ee:	f040 809e 	bne.w	800fb2e <_strtod_l+0x8f6>
 800f9f2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800f9f6:	0d1b      	lsrs	r3, r3, #20
 800f9f8:	051b      	lsls	r3, r3, #20
 800f9fa:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800f9fe:	f240 8096 	bls.w	800fb2e <_strtod_l+0x8f6>
 800fa02:	696b      	ldr	r3, [r5, #20]
 800fa04:	b91b      	cbnz	r3, 800fa0e <_strtod_l+0x7d6>
 800fa06:	692b      	ldr	r3, [r5, #16]
 800fa08:	2b01      	cmp	r3, #1
 800fa0a:	f340 8090 	ble.w	800fb2e <_strtod_l+0x8f6>
 800fa0e:	4629      	mov	r1, r5
 800fa10:	2201      	movs	r2, #1
 800fa12:	4620      	mov	r0, r4
 800fa14:	f001 f848 	bl	8010aa8 <__lshift>
 800fa18:	4631      	mov	r1, r6
 800fa1a:	4605      	mov	r5, r0
 800fa1c:	f001 f8b4 	bl	8010b88 <__mcmp>
 800fa20:	2800      	cmp	r0, #0
 800fa22:	f340 8084 	ble.w	800fb2e <_strtod_l+0x8f6>
 800fa26:	9904      	ldr	r1, [sp, #16]
 800fa28:	4a2b      	ldr	r2, [pc, #172]	; (800fad8 <_strtod_l+0x8a0>)
 800fa2a:	464b      	mov	r3, r9
 800fa2c:	2900      	cmp	r1, #0
 800fa2e:	f000 809d 	beq.w	800fb6c <_strtod_l+0x934>
 800fa32:	ea02 0109 	and.w	r1, r2, r9
 800fa36:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800fa3a:	f300 8097 	bgt.w	800fb6c <_strtod_l+0x934>
 800fa3e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800fa42:	f77f aea5 	ble.w	800f790 <_strtod_l+0x558>
 800fa46:	ed9f 7b20 	vldr	d7, [pc, #128]	; 800fac8 <_strtod_l+0x890>
 800fa4a:	ec49 8b16 	vmov	d6, r8, r9
 800fa4e:	ee26 7b07 	vmul.f64	d7, d6, d7
 800fa52:	ed8d 7b04 	vstr	d7, [sp, #16]
 800fa56:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
 800fa5a:	4313      	orrs	r3, r2
 800fa5c:	bf08      	it	eq
 800fa5e:	2322      	moveq	r3, #34	; 0x22
 800fa60:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800fa64:	bf08      	it	eq
 800fa66:	6023      	streq	r3, [r4, #0]
 800fa68:	e62c      	b.n	800f6c4 <_strtod_l+0x48c>
 800fa6a:	f04f 31ff 	mov.w	r1, #4294967295
 800fa6e:	fa01 f202 	lsl.w	r2, r1, r2
 800fa72:	ea02 0808 	and.w	r8, r2, r8
 800fa76:	e6d9      	b.n	800f82c <_strtod_l+0x5f4>
 800fa78:	f1c3 437f 	rsb	r3, r3, #4278190080	; 0xff000000
 800fa7c:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
 800fa80:	f503 437b 	add.w	r3, r3, #64256	; 0xfb00
 800fa84:	33e2      	adds	r3, #226	; 0xe2
 800fa86:	fa00 f303 	lsl.w	r3, r0, r3
 800fa8a:	e9cd 300a 	strd	r3, r0, [sp, #40]	; 0x28
 800fa8e:	e73f      	b.n	800f910 <_strtod_l+0x6d8>
 800fa90:	2200      	movs	r2, #0
 800fa92:	2301      	movs	r3, #1
 800fa94:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800fa98:	e73a      	b.n	800f910 <_strtod_l+0x6d8>
 800fa9a:	9912      	ldr	r1, [sp, #72]	; 0x48
 800fa9c:	461a      	mov	r2, r3
 800fa9e:	4620      	mov	r0, r4
 800faa0:	f001 f802 	bl	8010aa8 <__lshift>
 800faa4:	9012      	str	r0, [sp, #72]	; 0x48
 800faa6:	2800      	cmp	r0, #0
 800faa8:	f47f af64 	bne.w	800f974 <_strtod_l+0x73c>
 800faac:	e600      	b.n	800f6b0 <_strtod_l+0x478>
 800faae:	bf00      	nop
 800fab0:	94a03595 	.word	0x94a03595
 800fab4:	3fcfffff 	.word	0x3fcfffff
 800fab8:	94a03595 	.word	0x94a03595
 800fabc:	3fdfffff 	.word	0x3fdfffff
 800fac0:	35afe535 	.word	0x35afe535
 800fac4:	3fe00000 	.word	0x3fe00000
 800fac8:	00000000 	.word	0x00000000
 800facc:	39500000 	.word	0x39500000
 800fad0:	080122b8 	.word	0x080122b8
 800fad4:	fffffc02 	.word	0xfffffc02
 800fad8:	7ff00000 	.word	0x7ff00000
 800fadc:	46cb      	mov	fp, r9
 800fade:	d15f      	bne.n	800fba0 <_strtod_l+0x968>
 800fae0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800fae4:	f1ba 0f00 	cmp.w	sl, #0
 800fae8:	d02a      	beq.n	800fb40 <_strtod_l+0x908>
 800faea:	4aa7      	ldr	r2, [pc, #668]	; (800fd88 <_strtod_l+0xb50>)
 800faec:	4293      	cmp	r3, r2
 800faee:	d12b      	bne.n	800fb48 <_strtod_l+0x910>
 800faf0:	9b04      	ldr	r3, [sp, #16]
 800faf2:	4642      	mov	r2, r8
 800faf4:	b1fb      	cbz	r3, 800fb36 <_strtod_l+0x8fe>
 800faf6:	4ba5      	ldr	r3, [pc, #660]	; (800fd8c <_strtod_l+0xb54>)
 800faf8:	ea09 0303 	and.w	r3, r9, r3
 800fafc:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800fb00:	f04f 31ff 	mov.w	r1, #4294967295
 800fb04:	d81a      	bhi.n	800fb3c <_strtod_l+0x904>
 800fb06:	0d1b      	lsrs	r3, r3, #20
 800fb08:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800fb0c:	fa01 f303 	lsl.w	r3, r1, r3
 800fb10:	429a      	cmp	r2, r3
 800fb12:	d119      	bne.n	800fb48 <_strtod_l+0x910>
 800fb14:	4b9e      	ldr	r3, [pc, #632]	; (800fd90 <_strtod_l+0xb58>)
 800fb16:	459b      	cmp	fp, r3
 800fb18:	d102      	bne.n	800fb20 <_strtod_l+0x8e8>
 800fb1a:	3201      	adds	r2, #1
 800fb1c:	f43f adc8 	beq.w	800f6b0 <_strtod_l+0x478>
 800fb20:	4b9a      	ldr	r3, [pc, #616]	; (800fd8c <_strtod_l+0xb54>)
 800fb22:	ea0b 0303 	and.w	r3, fp, r3
 800fb26:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 800fb2a:	f04f 0800 	mov.w	r8, #0
 800fb2e:	9b04      	ldr	r3, [sp, #16]
 800fb30:	2b00      	cmp	r3, #0
 800fb32:	d188      	bne.n	800fa46 <_strtod_l+0x80e>
 800fb34:	e5c6      	b.n	800f6c4 <_strtod_l+0x48c>
 800fb36:	f04f 33ff 	mov.w	r3, #4294967295
 800fb3a:	e7e9      	b.n	800fb10 <_strtod_l+0x8d8>
 800fb3c:	460b      	mov	r3, r1
 800fb3e:	e7e7      	b.n	800fb10 <_strtod_l+0x8d8>
 800fb40:	ea53 0308 	orrs.w	r3, r3, r8
 800fb44:	f43f af6f 	beq.w	800fa26 <_strtod_l+0x7ee>
 800fb48:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800fb4a:	b1cb      	cbz	r3, 800fb80 <_strtod_l+0x948>
 800fb4c:	ea13 0f0b 	tst.w	r3, fp
 800fb50:	d0ed      	beq.n	800fb2e <_strtod_l+0x8f6>
 800fb52:	9a04      	ldr	r2, [sp, #16]
 800fb54:	4640      	mov	r0, r8
 800fb56:	4649      	mov	r1, r9
 800fb58:	f1ba 0f00 	cmp.w	sl, #0
 800fb5c:	d014      	beq.n	800fb88 <_strtod_l+0x950>
 800fb5e:	f7ff fb50 	bl	800f202 <sulp>
 800fb62:	ee38 7b00 	vadd.f64	d7, d8, d0
 800fb66:	ec59 8b17 	vmov	r8, r9, d7
 800fb6a:	e7e0      	b.n	800fb2e <_strtod_l+0x8f6>
 800fb6c:	4013      	ands	r3, r2
 800fb6e:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800fb72:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 800fb76:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 800fb7a:	f04f 38ff 	mov.w	r8, #4294967295
 800fb7e:	e7d6      	b.n	800fb2e <_strtod_l+0x8f6>
 800fb80:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800fb82:	ea13 0f08 	tst.w	r3, r8
 800fb86:	e7e3      	b.n	800fb50 <_strtod_l+0x918>
 800fb88:	f7ff fb3b 	bl	800f202 <sulp>
 800fb8c:	ee38 0b40 	vsub.f64	d0, d8, d0
 800fb90:	eeb5 0b40 	vcmp.f64	d0, #0.0
 800fb94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fb98:	ec59 8b10 	vmov	r8, r9, d0
 800fb9c:	d1c7      	bne.n	800fb2e <_strtod_l+0x8f6>
 800fb9e:	e5f7      	b.n	800f790 <_strtod_l+0x558>
 800fba0:	4631      	mov	r1, r6
 800fba2:	4628      	mov	r0, r5
 800fba4:	f001 f96e 	bl	8010e84 <__ratio>
 800fba8:	eeb0 7b00 	vmov.f64	d7, #0	; 0x40000000  2.0
 800fbac:	eeb4 0bc7 	vcmpe.f64	d0, d7
 800fbb0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fbb4:	d865      	bhi.n	800fc82 <_strtod_l+0xa4a>
 800fbb6:	f1ba 0f00 	cmp.w	sl, #0
 800fbba:	d042      	beq.n	800fc42 <_strtod_l+0xa0a>
 800fbbc:	4b75      	ldr	r3, [pc, #468]	; (800fd94 <_strtod_l+0xb5c>)
 800fbbe:	2200      	movs	r2, #0
 800fbc0:	eeb7 db00 	vmov.f64	d13, #112	; 0x3f800000  1.0
 800fbc4:	4871      	ldr	r0, [pc, #452]	; (800fd8c <_strtod_l+0xb54>)
 800fbc6:	f8df c1d8 	ldr.w	ip, [pc, #472]	; 800fda0 <_strtod_l+0xb68>
 800fbca:	ea0b 0100 	and.w	r1, fp, r0
 800fbce:	4561      	cmp	r1, ip
 800fbd0:	f040 808e 	bne.w	800fcf0 <_strtod_l+0xab8>
 800fbd4:	f1ab 7954 	sub.w	r9, fp, #55574528	; 0x3500000
 800fbd8:	ec49 8b10 	vmov	d0, r8, r9
 800fbdc:	ec43 2b1c 	vmov	d12, r2, r3
 800fbe0:	910a      	str	r1, [sp, #40]	; 0x28
 800fbe2:	f001 f877 	bl	8010cd4 <__ulp>
 800fbe6:	ec49 8b1e 	vmov	d14, r8, r9
 800fbea:	4868      	ldr	r0, [pc, #416]	; (800fd8c <_strtod_l+0xb54>)
 800fbec:	eeac eb00 	vfma.f64	d14, d12, d0
 800fbf0:	ee1e 3a90 	vmov	r3, s29
 800fbf4:	4a68      	ldr	r2, [pc, #416]	; (800fd98 <_strtod_l+0xb60>)
 800fbf6:	990a      	ldr	r1, [sp, #40]	; 0x28
 800fbf8:	4018      	ands	r0, r3
 800fbfa:	4290      	cmp	r0, r2
 800fbfc:	ec59 8b1e 	vmov	r8, r9, d14
 800fc00:	d94e      	bls.n	800fca0 <_strtod_l+0xa68>
 800fc02:	ee18 3a90 	vmov	r3, s17
 800fc06:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800fc0a:	4293      	cmp	r3, r2
 800fc0c:	d104      	bne.n	800fc18 <_strtod_l+0x9e0>
 800fc0e:	ee18 3a10 	vmov	r3, s16
 800fc12:	3301      	adds	r3, #1
 800fc14:	f43f ad4c 	beq.w	800f6b0 <_strtod_l+0x478>
 800fc18:	f8df 9174 	ldr.w	r9, [pc, #372]	; 800fd90 <_strtod_l+0xb58>
 800fc1c:	f04f 38ff 	mov.w	r8, #4294967295
 800fc20:	9912      	ldr	r1, [sp, #72]	; 0x48
 800fc22:	4620      	mov	r0, r4
 800fc24:	f000 fd24 	bl	8010670 <_Bfree>
 800fc28:	4639      	mov	r1, r7
 800fc2a:	4620      	mov	r0, r4
 800fc2c:	f000 fd20 	bl	8010670 <_Bfree>
 800fc30:	4631      	mov	r1, r6
 800fc32:	4620      	mov	r0, r4
 800fc34:	f000 fd1c 	bl	8010670 <_Bfree>
 800fc38:	4629      	mov	r1, r5
 800fc3a:	4620      	mov	r0, r4
 800fc3c:	f000 fd18 	bl	8010670 <_Bfree>
 800fc40:	e619      	b.n	800f876 <_strtod_l+0x63e>
 800fc42:	f1b8 0f00 	cmp.w	r8, #0
 800fc46:	d112      	bne.n	800fc6e <_strtod_l+0xa36>
 800fc48:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800fc4c:	b9b3      	cbnz	r3, 800fc7c <_strtod_l+0xa44>
 800fc4e:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 800fc52:	eeb4 0bc7 	vcmpe.f64	d0, d7
 800fc56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fc5a:	eeb6 db00 	vmov.f64	d13, #96	; 0x3f000000  0.5
 800fc5e:	bf58      	it	pl
 800fc60:	ee20 db0d 	vmulpl.f64	d13, d0, d13
 800fc64:	eeb1 7b4d 	vneg.f64	d7, d13
 800fc68:	ec53 2b17 	vmov	r2, r3, d7
 800fc6c:	e7aa      	b.n	800fbc4 <_strtod_l+0x98c>
 800fc6e:	f1b8 0f01 	cmp.w	r8, #1
 800fc72:	d103      	bne.n	800fc7c <_strtod_l+0xa44>
 800fc74:	f1b9 0f00 	cmp.w	r9, #0
 800fc78:	f43f ad8a 	beq.w	800f790 <_strtod_l+0x558>
 800fc7c:	4b47      	ldr	r3, [pc, #284]	; (800fd9c <_strtod_l+0xb64>)
 800fc7e:	2200      	movs	r2, #0
 800fc80:	e79e      	b.n	800fbc0 <_strtod_l+0x988>
 800fc82:	eeb6 db00 	vmov.f64	d13, #96	; 0x3f000000  0.5
 800fc86:	ee20 db0d 	vmul.f64	d13, d0, d13
 800fc8a:	f1ba 0f00 	cmp.w	sl, #0
 800fc8e:	d104      	bne.n	800fc9a <_strtod_l+0xa62>
 800fc90:	eeb1 7b4d 	vneg.f64	d7, d13
 800fc94:	ec53 2b17 	vmov	r2, r3, d7
 800fc98:	e794      	b.n	800fbc4 <_strtod_l+0x98c>
 800fc9a:	eeb0 7b4d 	vmov.f64	d7, d13
 800fc9e:	e7f9      	b.n	800fc94 <_strtod_l+0xa5c>
 800fca0:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 800fca4:	9b04      	ldr	r3, [sp, #16]
 800fca6:	2b00      	cmp	r3, #0
 800fca8:	d1ba      	bne.n	800fc20 <_strtod_l+0x9e8>
 800fcaa:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800fcae:	0d1b      	lsrs	r3, r3, #20
 800fcb0:	051b      	lsls	r3, r3, #20
 800fcb2:	4299      	cmp	r1, r3
 800fcb4:	d1b4      	bne.n	800fc20 <_strtod_l+0x9e8>
 800fcb6:	ec51 0b1d 	vmov	r0, r1, d13
 800fcba:	f7f0 fd3d 	bl	8000738 <__aeabi_d2lz>
 800fcbe:	f7f0 fcf5 	bl	80006ac <__aeabi_l2d>
 800fcc2:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800fcc6:	ec41 0b17 	vmov	d7, r0, r1
 800fcca:	ea43 0308 	orr.w	r3, r3, r8
 800fcce:	ea53 030a 	orrs.w	r3, r3, sl
 800fcd2:	ee3d db47 	vsub.f64	d13, d13, d7
 800fcd6:	d03c      	beq.n	800fd52 <_strtod_l+0xb1a>
 800fcd8:	eeb4 dbca 	vcmpe.f64	d13, d10
 800fcdc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fce0:	f53f acf0 	bmi.w	800f6c4 <_strtod_l+0x48c>
 800fce4:	eeb4 dbcb 	vcmpe.f64	d13, d11
 800fce8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fcec:	dd98      	ble.n	800fc20 <_strtod_l+0x9e8>
 800fcee:	e4e9      	b.n	800f6c4 <_strtod_l+0x48c>
 800fcf0:	9804      	ldr	r0, [sp, #16]
 800fcf2:	b1f0      	cbz	r0, 800fd32 <_strtod_l+0xafa>
 800fcf4:	f1b1 6fd4 	cmp.w	r1, #111149056	; 0x6a00000
 800fcf8:	d81b      	bhi.n	800fd32 <_strtod_l+0xafa>
 800fcfa:	ed9f 7b21 	vldr	d7, [pc, #132]	; 800fd80 <_strtod_l+0xb48>
 800fcfe:	eeb4 dbc7 	vcmpe.f64	d13, d7
 800fd02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fd06:	d811      	bhi.n	800fd2c <_strtod_l+0xaf4>
 800fd08:	eebc dbcd 	vcvt.u32.f64	s26, d13
 800fd0c:	ee1d 3a10 	vmov	r3, s26
 800fd10:	2b01      	cmp	r3, #1
 800fd12:	bf38      	it	cc
 800fd14:	2301      	movcc	r3, #1
 800fd16:	ee0d 3a10 	vmov	s26, r3
 800fd1a:	eeb8 db4d 	vcvt.f64.u32	d13, s26
 800fd1e:	f1ba 0f00 	cmp.w	sl, #0
 800fd22:	d113      	bne.n	800fd4c <_strtod_l+0xb14>
 800fd24:	eeb1 7b4d 	vneg.f64	d7, d13
 800fd28:	ec53 2b17 	vmov	r2, r3, d7
 800fd2c:	f103 60d6 	add.w	r0, r3, #112197632	; 0x6b00000
 800fd30:	1a43      	subs	r3, r0, r1
 800fd32:	eeb0 0b48 	vmov.f64	d0, d8
 800fd36:	ec43 2b1c 	vmov	d12, r2, r3
 800fd3a:	910a      	str	r1, [sp, #40]	; 0x28
 800fd3c:	f000 ffca 	bl	8010cd4 <__ulp>
 800fd40:	990a      	ldr	r1, [sp, #40]	; 0x28
 800fd42:	eeac 8b00 	vfma.f64	d8, d12, d0
 800fd46:	ec59 8b18 	vmov	r8, r9, d8
 800fd4a:	e7ab      	b.n	800fca4 <_strtod_l+0xa6c>
 800fd4c:	eeb0 7b4d 	vmov.f64	d7, d13
 800fd50:	e7ea      	b.n	800fd28 <_strtod_l+0xaf0>
 800fd52:	eeb4 dbc9 	vcmpe.f64	d13, d9
 800fd56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fd5a:	f57f af61 	bpl.w	800fc20 <_strtod_l+0x9e8>
 800fd5e:	e4b1      	b.n	800f6c4 <_strtod_l+0x48c>
 800fd60:	2300      	movs	r3, #0
 800fd62:	9308      	str	r3, [sp, #32]
 800fd64:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800fd66:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800fd68:	6013      	str	r3, [r2, #0]
 800fd6a:	f7ff baad 	b.w	800f2c8 <_strtod_l+0x90>
 800fd6e:	2a65      	cmp	r2, #101	; 0x65
 800fd70:	f43f ab9f 	beq.w	800f4b2 <_strtod_l+0x27a>
 800fd74:	2a45      	cmp	r2, #69	; 0x45
 800fd76:	f43f ab9c 	beq.w	800f4b2 <_strtod_l+0x27a>
 800fd7a:	2101      	movs	r1, #1
 800fd7c:	f7ff bbd4 	b.w	800f528 <_strtod_l+0x2f0>
 800fd80:	ffc00000 	.word	0xffc00000
 800fd84:	41dfffff 	.word	0x41dfffff
 800fd88:	000fffff 	.word	0x000fffff
 800fd8c:	7ff00000 	.word	0x7ff00000
 800fd90:	7fefffff 	.word	0x7fefffff
 800fd94:	3ff00000 	.word	0x3ff00000
 800fd98:	7c9fffff 	.word	0x7c9fffff
 800fd9c:	bff00000 	.word	0xbff00000
 800fda0:	7fe00000 	.word	0x7fe00000

0800fda4 <strtod>:
 800fda4:	460a      	mov	r2, r1
 800fda6:	4601      	mov	r1, r0
 800fda8:	4802      	ldr	r0, [pc, #8]	; (800fdb4 <strtod+0x10>)
 800fdaa:	4b03      	ldr	r3, [pc, #12]	; (800fdb8 <strtod+0x14>)
 800fdac:	6800      	ldr	r0, [r0, #0]
 800fdae:	f7ff ba43 	b.w	800f238 <_strtod_l>
 800fdb2:	bf00      	nop
 800fdb4:	24000088 	.word	0x24000088
 800fdb8:	240000f0 	.word	0x240000f0

0800fdbc <_write_r>:
 800fdbc:	b538      	push	{r3, r4, r5, lr}
 800fdbe:	4d07      	ldr	r5, [pc, #28]	; (800fddc <_write_r+0x20>)
 800fdc0:	4604      	mov	r4, r0
 800fdc2:	4608      	mov	r0, r1
 800fdc4:	4611      	mov	r1, r2
 800fdc6:	2200      	movs	r2, #0
 800fdc8:	602a      	str	r2, [r5, #0]
 800fdca:	461a      	mov	r2, r3
 800fdcc:	f7f3 febd 	bl	8003b4a <_write>
 800fdd0:	1c43      	adds	r3, r0, #1
 800fdd2:	d102      	bne.n	800fdda <_write_r+0x1e>
 800fdd4:	682b      	ldr	r3, [r5, #0]
 800fdd6:	b103      	cbz	r3, 800fdda <_write_r+0x1e>
 800fdd8:	6023      	str	r3, [r4, #0]
 800fdda:	bd38      	pop	{r3, r4, r5, pc}
 800fddc:	24000aa0 	.word	0x24000aa0

0800fde0 <_close_r>:
 800fde0:	b538      	push	{r3, r4, r5, lr}
 800fde2:	4d06      	ldr	r5, [pc, #24]	; (800fdfc <_close_r+0x1c>)
 800fde4:	2300      	movs	r3, #0
 800fde6:	4604      	mov	r4, r0
 800fde8:	4608      	mov	r0, r1
 800fdea:	602b      	str	r3, [r5, #0]
 800fdec:	f7f3 fec9 	bl	8003b82 <_close>
 800fdf0:	1c43      	adds	r3, r0, #1
 800fdf2:	d102      	bne.n	800fdfa <_close_r+0x1a>
 800fdf4:	682b      	ldr	r3, [r5, #0]
 800fdf6:	b103      	cbz	r3, 800fdfa <_close_r+0x1a>
 800fdf8:	6023      	str	r3, [r4, #0]
 800fdfa:	bd38      	pop	{r3, r4, r5, pc}
 800fdfc:	24000aa0 	.word	0x24000aa0

0800fe00 <__sflags>:
 800fe00:	780b      	ldrb	r3, [r1, #0]
 800fe02:	2b72      	cmp	r3, #114	; 0x72
 800fe04:	b530      	push	{r4, r5, lr}
 800fe06:	d022      	beq.n	800fe4e <__sflags+0x4e>
 800fe08:	2b77      	cmp	r3, #119	; 0x77
 800fe0a:	d024      	beq.n	800fe56 <__sflags+0x56>
 800fe0c:	2b61      	cmp	r3, #97	; 0x61
 800fe0e:	d027      	beq.n	800fe60 <__sflags+0x60>
 800fe10:	2316      	movs	r3, #22
 800fe12:	6003      	str	r3, [r0, #0]
 800fe14:	2000      	movs	r0, #0
 800fe16:	bd30      	pop	{r4, r5, pc}
 800fe18:	2d62      	cmp	r5, #98	; 0x62
 800fe1a:	d012      	beq.n	800fe42 <__sflags+0x42>
 800fe1c:	2d78      	cmp	r5, #120	; 0x78
 800fe1e:	d013      	beq.n	800fe48 <__sflags+0x48>
 800fe20:	2d2b      	cmp	r5, #43	; 0x2b
 800fe22:	d107      	bne.n	800fe34 <__sflags+0x34>
 800fe24:	f020 001c 	bic.w	r0, r0, #28
 800fe28:	f023 0303 	bic.w	r3, r3, #3
 800fe2c:	f040 0010 	orr.w	r0, r0, #16
 800fe30:	f043 0302 	orr.w	r3, r3, #2
 800fe34:	f811 5f01 	ldrb.w	r5, [r1, #1]!
 800fe38:	2d00      	cmp	r5, #0
 800fe3a:	d1ed      	bne.n	800fe18 <__sflags+0x18>
 800fe3c:	4323      	orrs	r3, r4
 800fe3e:	6013      	str	r3, [r2, #0]
 800fe40:	e7e9      	b.n	800fe16 <__sflags+0x16>
 800fe42:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800fe46:	e7f5      	b.n	800fe34 <__sflags+0x34>
 800fe48:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800fe4c:	e7f2      	b.n	800fe34 <__sflags+0x34>
 800fe4e:	2400      	movs	r4, #0
 800fe50:	4623      	mov	r3, r4
 800fe52:	2004      	movs	r0, #4
 800fe54:	e7ee      	b.n	800fe34 <__sflags+0x34>
 800fe56:	f44f 64c0 	mov.w	r4, #1536	; 0x600
 800fe5a:	2301      	movs	r3, #1
 800fe5c:	2008      	movs	r0, #8
 800fe5e:	e7e9      	b.n	800fe34 <__sflags+0x34>
 800fe60:	f44f 7402 	mov.w	r4, #520	; 0x208
 800fe64:	2301      	movs	r3, #1
 800fe66:	f44f 7084 	mov.w	r0, #264	; 0x108
 800fe6a:	e7e3      	b.n	800fe34 <__sflags+0x34>

0800fe6c <_fstat_r>:
 800fe6c:	b538      	push	{r3, r4, r5, lr}
 800fe6e:	4d07      	ldr	r5, [pc, #28]	; (800fe8c <_fstat_r+0x20>)
 800fe70:	2300      	movs	r3, #0
 800fe72:	4604      	mov	r4, r0
 800fe74:	4608      	mov	r0, r1
 800fe76:	4611      	mov	r1, r2
 800fe78:	602b      	str	r3, [r5, #0]
 800fe7a:	f7f3 fe8e 	bl	8003b9a <_fstat>
 800fe7e:	1c43      	adds	r3, r0, #1
 800fe80:	d102      	bne.n	800fe88 <_fstat_r+0x1c>
 800fe82:	682b      	ldr	r3, [r5, #0]
 800fe84:	b103      	cbz	r3, 800fe88 <_fstat_r+0x1c>
 800fe86:	6023      	str	r3, [r4, #0]
 800fe88:	bd38      	pop	{r3, r4, r5, pc}
 800fe8a:	bf00      	nop
 800fe8c:	24000aa0 	.word	0x24000aa0

0800fe90 <rshift>:
 800fe90:	6903      	ldr	r3, [r0, #16]
 800fe92:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800fe96:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800fe9a:	ea4f 1261 	mov.w	r2, r1, asr #5
 800fe9e:	f100 0414 	add.w	r4, r0, #20
 800fea2:	dd45      	ble.n	800ff30 <rshift+0xa0>
 800fea4:	f011 011f 	ands.w	r1, r1, #31
 800fea8:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800feac:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800feb0:	d10c      	bne.n	800fecc <rshift+0x3c>
 800feb2:	f100 0710 	add.w	r7, r0, #16
 800feb6:	4629      	mov	r1, r5
 800feb8:	42b1      	cmp	r1, r6
 800feba:	d334      	bcc.n	800ff26 <rshift+0x96>
 800febc:	1a9b      	subs	r3, r3, r2
 800febe:	009b      	lsls	r3, r3, #2
 800fec0:	1eea      	subs	r2, r5, #3
 800fec2:	4296      	cmp	r6, r2
 800fec4:	bf38      	it	cc
 800fec6:	2300      	movcc	r3, #0
 800fec8:	4423      	add	r3, r4
 800feca:	e015      	b.n	800fef8 <rshift+0x68>
 800fecc:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800fed0:	f1c1 0820 	rsb	r8, r1, #32
 800fed4:	40cf      	lsrs	r7, r1
 800fed6:	f105 0e04 	add.w	lr, r5, #4
 800feda:	46a1      	mov	r9, r4
 800fedc:	4576      	cmp	r6, lr
 800fede:	46f4      	mov	ip, lr
 800fee0:	d815      	bhi.n	800ff0e <rshift+0x7e>
 800fee2:	1a9a      	subs	r2, r3, r2
 800fee4:	0092      	lsls	r2, r2, #2
 800fee6:	3a04      	subs	r2, #4
 800fee8:	3501      	adds	r5, #1
 800feea:	42ae      	cmp	r6, r5
 800feec:	bf38      	it	cc
 800feee:	2200      	movcc	r2, #0
 800fef0:	18a3      	adds	r3, r4, r2
 800fef2:	50a7      	str	r7, [r4, r2]
 800fef4:	b107      	cbz	r7, 800fef8 <rshift+0x68>
 800fef6:	3304      	adds	r3, #4
 800fef8:	1b1a      	subs	r2, r3, r4
 800fefa:	42a3      	cmp	r3, r4
 800fefc:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800ff00:	bf08      	it	eq
 800ff02:	2300      	moveq	r3, #0
 800ff04:	6102      	str	r2, [r0, #16]
 800ff06:	bf08      	it	eq
 800ff08:	6143      	streq	r3, [r0, #20]
 800ff0a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ff0e:	f8dc c000 	ldr.w	ip, [ip]
 800ff12:	fa0c fc08 	lsl.w	ip, ip, r8
 800ff16:	ea4c 0707 	orr.w	r7, ip, r7
 800ff1a:	f849 7b04 	str.w	r7, [r9], #4
 800ff1e:	f85e 7b04 	ldr.w	r7, [lr], #4
 800ff22:	40cf      	lsrs	r7, r1
 800ff24:	e7da      	b.n	800fedc <rshift+0x4c>
 800ff26:	f851 cb04 	ldr.w	ip, [r1], #4
 800ff2a:	f847 cf04 	str.w	ip, [r7, #4]!
 800ff2e:	e7c3      	b.n	800feb8 <rshift+0x28>
 800ff30:	4623      	mov	r3, r4
 800ff32:	e7e1      	b.n	800fef8 <rshift+0x68>

0800ff34 <__hexdig_fun>:
 800ff34:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800ff38:	2b09      	cmp	r3, #9
 800ff3a:	d802      	bhi.n	800ff42 <__hexdig_fun+0xe>
 800ff3c:	3820      	subs	r0, #32
 800ff3e:	b2c0      	uxtb	r0, r0
 800ff40:	4770      	bx	lr
 800ff42:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800ff46:	2b05      	cmp	r3, #5
 800ff48:	d801      	bhi.n	800ff4e <__hexdig_fun+0x1a>
 800ff4a:	3847      	subs	r0, #71	; 0x47
 800ff4c:	e7f7      	b.n	800ff3e <__hexdig_fun+0xa>
 800ff4e:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800ff52:	2b05      	cmp	r3, #5
 800ff54:	d801      	bhi.n	800ff5a <__hexdig_fun+0x26>
 800ff56:	3827      	subs	r0, #39	; 0x27
 800ff58:	e7f1      	b.n	800ff3e <__hexdig_fun+0xa>
 800ff5a:	2000      	movs	r0, #0
 800ff5c:	4770      	bx	lr
	...

0800ff60 <__gethex>:
 800ff60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ff64:	ed2d 8b02 	vpush	{d8}
 800ff68:	b089      	sub	sp, #36	; 0x24
 800ff6a:	ee08 0a10 	vmov	s16, r0
 800ff6e:	9304      	str	r3, [sp, #16]
 800ff70:	4bb4      	ldr	r3, [pc, #720]	; (8010244 <__gethex+0x2e4>)
 800ff72:	681b      	ldr	r3, [r3, #0]
 800ff74:	9301      	str	r3, [sp, #4]
 800ff76:	4618      	mov	r0, r3
 800ff78:	468b      	mov	fp, r1
 800ff7a:	4690      	mov	r8, r2
 800ff7c:	f7f0 fa00 	bl	8000380 <strlen>
 800ff80:	9b01      	ldr	r3, [sp, #4]
 800ff82:	f8db 2000 	ldr.w	r2, [fp]
 800ff86:	4403      	add	r3, r0
 800ff88:	4682      	mov	sl, r0
 800ff8a:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800ff8e:	9305      	str	r3, [sp, #20]
 800ff90:	1c93      	adds	r3, r2, #2
 800ff92:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800ff96:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800ff9a:	32fe      	adds	r2, #254	; 0xfe
 800ff9c:	18d1      	adds	r1, r2, r3
 800ff9e:	461f      	mov	r7, r3
 800ffa0:	f813 0b01 	ldrb.w	r0, [r3], #1
 800ffa4:	9100      	str	r1, [sp, #0]
 800ffa6:	2830      	cmp	r0, #48	; 0x30
 800ffa8:	d0f8      	beq.n	800ff9c <__gethex+0x3c>
 800ffaa:	f7ff ffc3 	bl	800ff34 <__hexdig_fun>
 800ffae:	4604      	mov	r4, r0
 800ffb0:	2800      	cmp	r0, #0
 800ffb2:	d13a      	bne.n	801002a <__gethex+0xca>
 800ffb4:	9901      	ldr	r1, [sp, #4]
 800ffb6:	4652      	mov	r2, sl
 800ffb8:	4638      	mov	r0, r7
 800ffba:	f001 f809 	bl	8010fd0 <strncmp>
 800ffbe:	4605      	mov	r5, r0
 800ffc0:	2800      	cmp	r0, #0
 800ffc2:	d168      	bne.n	8010096 <__gethex+0x136>
 800ffc4:	f817 000a 	ldrb.w	r0, [r7, sl]
 800ffc8:	eb07 060a 	add.w	r6, r7, sl
 800ffcc:	f7ff ffb2 	bl	800ff34 <__hexdig_fun>
 800ffd0:	2800      	cmp	r0, #0
 800ffd2:	d062      	beq.n	801009a <__gethex+0x13a>
 800ffd4:	4633      	mov	r3, r6
 800ffd6:	7818      	ldrb	r0, [r3, #0]
 800ffd8:	2830      	cmp	r0, #48	; 0x30
 800ffda:	461f      	mov	r7, r3
 800ffdc:	f103 0301 	add.w	r3, r3, #1
 800ffe0:	d0f9      	beq.n	800ffd6 <__gethex+0x76>
 800ffe2:	f7ff ffa7 	bl	800ff34 <__hexdig_fun>
 800ffe6:	2301      	movs	r3, #1
 800ffe8:	fab0 f480 	clz	r4, r0
 800ffec:	0964      	lsrs	r4, r4, #5
 800ffee:	4635      	mov	r5, r6
 800fff0:	9300      	str	r3, [sp, #0]
 800fff2:	463a      	mov	r2, r7
 800fff4:	4616      	mov	r6, r2
 800fff6:	3201      	adds	r2, #1
 800fff8:	7830      	ldrb	r0, [r6, #0]
 800fffa:	f7ff ff9b 	bl	800ff34 <__hexdig_fun>
 800fffe:	2800      	cmp	r0, #0
 8010000:	d1f8      	bne.n	800fff4 <__gethex+0x94>
 8010002:	9901      	ldr	r1, [sp, #4]
 8010004:	4652      	mov	r2, sl
 8010006:	4630      	mov	r0, r6
 8010008:	f000 ffe2 	bl	8010fd0 <strncmp>
 801000c:	b980      	cbnz	r0, 8010030 <__gethex+0xd0>
 801000e:	b94d      	cbnz	r5, 8010024 <__gethex+0xc4>
 8010010:	eb06 050a 	add.w	r5, r6, sl
 8010014:	462a      	mov	r2, r5
 8010016:	4616      	mov	r6, r2
 8010018:	3201      	adds	r2, #1
 801001a:	7830      	ldrb	r0, [r6, #0]
 801001c:	f7ff ff8a 	bl	800ff34 <__hexdig_fun>
 8010020:	2800      	cmp	r0, #0
 8010022:	d1f8      	bne.n	8010016 <__gethex+0xb6>
 8010024:	1bad      	subs	r5, r5, r6
 8010026:	00ad      	lsls	r5, r5, #2
 8010028:	e004      	b.n	8010034 <__gethex+0xd4>
 801002a:	2400      	movs	r4, #0
 801002c:	4625      	mov	r5, r4
 801002e:	e7e0      	b.n	800fff2 <__gethex+0x92>
 8010030:	2d00      	cmp	r5, #0
 8010032:	d1f7      	bne.n	8010024 <__gethex+0xc4>
 8010034:	7833      	ldrb	r3, [r6, #0]
 8010036:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 801003a:	2b50      	cmp	r3, #80	; 0x50
 801003c:	d13b      	bne.n	80100b6 <__gethex+0x156>
 801003e:	7873      	ldrb	r3, [r6, #1]
 8010040:	2b2b      	cmp	r3, #43	; 0x2b
 8010042:	d02c      	beq.n	801009e <__gethex+0x13e>
 8010044:	2b2d      	cmp	r3, #45	; 0x2d
 8010046:	d02e      	beq.n	80100a6 <__gethex+0x146>
 8010048:	1c71      	adds	r1, r6, #1
 801004a:	f04f 0900 	mov.w	r9, #0
 801004e:	7808      	ldrb	r0, [r1, #0]
 8010050:	f7ff ff70 	bl	800ff34 <__hexdig_fun>
 8010054:	1e43      	subs	r3, r0, #1
 8010056:	b2db      	uxtb	r3, r3
 8010058:	2b18      	cmp	r3, #24
 801005a:	d82c      	bhi.n	80100b6 <__gethex+0x156>
 801005c:	f1a0 0210 	sub.w	r2, r0, #16
 8010060:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8010064:	f7ff ff66 	bl	800ff34 <__hexdig_fun>
 8010068:	1e43      	subs	r3, r0, #1
 801006a:	b2db      	uxtb	r3, r3
 801006c:	2b18      	cmp	r3, #24
 801006e:	d91d      	bls.n	80100ac <__gethex+0x14c>
 8010070:	f1b9 0f00 	cmp.w	r9, #0
 8010074:	d000      	beq.n	8010078 <__gethex+0x118>
 8010076:	4252      	negs	r2, r2
 8010078:	4415      	add	r5, r2
 801007a:	f8cb 1000 	str.w	r1, [fp]
 801007e:	b1e4      	cbz	r4, 80100ba <__gethex+0x15a>
 8010080:	9b00      	ldr	r3, [sp, #0]
 8010082:	2b00      	cmp	r3, #0
 8010084:	bf14      	ite	ne
 8010086:	2700      	movne	r7, #0
 8010088:	2706      	moveq	r7, #6
 801008a:	4638      	mov	r0, r7
 801008c:	b009      	add	sp, #36	; 0x24
 801008e:	ecbd 8b02 	vpop	{d8}
 8010092:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010096:	463e      	mov	r6, r7
 8010098:	4625      	mov	r5, r4
 801009a:	2401      	movs	r4, #1
 801009c:	e7ca      	b.n	8010034 <__gethex+0xd4>
 801009e:	f04f 0900 	mov.w	r9, #0
 80100a2:	1cb1      	adds	r1, r6, #2
 80100a4:	e7d3      	b.n	801004e <__gethex+0xee>
 80100a6:	f04f 0901 	mov.w	r9, #1
 80100aa:	e7fa      	b.n	80100a2 <__gethex+0x142>
 80100ac:	230a      	movs	r3, #10
 80100ae:	fb03 0202 	mla	r2, r3, r2, r0
 80100b2:	3a10      	subs	r2, #16
 80100b4:	e7d4      	b.n	8010060 <__gethex+0x100>
 80100b6:	4631      	mov	r1, r6
 80100b8:	e7df      	b.n	801007a <__gethex+0x11a>
 80100ba:	1bf3      	subs	r3, r6, r7
 80100bc:	3b01      	subs	r3, #1
 80100be:	4621      	mov	r1, r4
 80100c0:	2b07      	cmp	r3, #7
 80100c2:	dc0b      	bgt.n	80100dc <__gethex+0x17c>
 80100c4:	ee18 0a10 	vmov	r0, s16
 80100c8:	f000 fa92 	bl	80105f0 <_Balloc>
 80100cc:	4604      	mov	r4, r0
 80100ce:	b940      	cbnz	r0, 80100e2 <__gethex+0x182>
 80100d0:	4b5d      	ldr	r3, [pc, #372]	; (8010248 <__gethex+0x2e8>)
 80100d2:	4602      	mov	r2, r0
 80100d4:	21de      	movs	r1, #222	; 0xde
 80100d6:	485d      	ldr	r0, [pc, #372]	; (801024c <__gethex+0x2ec>)
 80100d8:	f000 ff9c 	bl	8011014 <__assert_func>
 80100dc:	3101      	adds	r1, #1
 80100de:	105b      	asrs	r3, r3, #1
 80100e0:	e7ee      	b.n	80100c0 <__gethex+0x160>
 80100e2:	f100 0914 	add.w	r9, r0, #20
 80100e6:	f04f 0b00 	mov.w	fp, #0
 80100ea:	f1ca 0301 	rsb	r3, sl, #1
 80100ee:	f8cd 9008 	str.w	r9, [sp, #8]
 80100f2:	f8cd b000 	str.w	fp, [sp]
 80100f6:	9306      	str	r3, [sp, #24]
 80100f8:	42b7      	cmp	r7, r6
 80100fa:	d340      	bcc.n	801017e <__gethex+0x21e>
 80100fc:	9802      	ldr	r0, [sp, #8]
 80100fe:	9b00      	ldr	r3, [sp, #0]
 8010100:	f840 3b04 	str.w	r3, [r0], #4
 8010104:	eba0 0009 	sub.w	r0, r0, r9
 8010108:	1080      	asrs	r0, r0, #2
 801010a:	0146      	lsls	r6, r0, #5
 801010c:	6120      	str	r0, [r4, #16]
 801010e:	4618      	mov	r0, r3
 8010110:	f000 fb60 	bl	80107d4 <__hi0bits>
 8010114:	1a30      	subs	r0, r6, r0
 8010116:	f8d8 6000 	ldr.w	r6, [r8]
 801011a:	42b0      	cmp	r0, r6
 801011c:	dd63      	ble.n	80101e6 <__gethex+0x286>
 801011e:	1b87      	subs	r7, r0, r6
 8010120:	4639      	mov	r1, r7
 8010122:	4620      	mov	r0, r4
 8010124:	f000 ff01 	bl	8010f2a <__any_on>
 8010128:	4682      	mov	sl, r0
 801012a:	b1a8      	cbz	r0, 8010158 <__gethex+0x1f8>
 801012c:	1e7b      	subs	r3, r7, #1
 801012e:	1159      	asrs	r1, r3, #5
 8010130:	f003 021f 	and.w	r2, r3, #31
 8010134:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8010138:	f04f 0a01 	mov.w	sl, #1
 801013c:	fa0a f202 	lsl.w	r2, sl, r2
 8010140:	420a      	tst	r2, r1
 8010142:	d009      	beq.n	8010158 <__gethex+0x1f8>
 8010144:	4553      	cmp	r3, sl
 8010146:	dd05      	ble.n	8010154 <__gethex+0x1f4>
 8010148:	1eb9      	subs	r1, r7, #2
 801014a:	4620      	mov	r0, r4
 801014c:	f000 feed 	bl	8010f2a <__any_on>
 8010150:	2800      	cmp	r0, #0
 8010152:	d145      	bne.n	80101e0 <__gethex+0x280>
 8010154:	f04f 0a02 	mov.w	sl, #2
 8010158:	4639      	mov	r1, r7
 801015a:	4620      	mov	r0, r4
 801015c:	f7ff fe98 	bl	800fe90 <rshift>
 8010160:	443d      	add	r5, r7
 8010162:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8010166:	42ab      	cmp	r3, r5
 8010168:	da4c      	bge.n	8010204 <__gethex+0x2a4>
 801016a:	ee18 0a10 	vmov	r0, s16
 801016e:	4621      	mov	r1, r4
 8010170:	f000 fa7e 	bl	8010670 <_Bfree>
 8010174:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8010176:	2300      	movs	r3, #0
 8010178:	6013      	str	r3, [r2, #0]
 801017a:	27a3      	movs	r7, #163	; 0xa3
 801017c:	e785      	b.n	801008a <__gethex+0x12a>
 801017e:	1e73      	subs	r3, r6, #1
 8010180:	9a05      	ldr	r2, [sp, #20]
 8010182:	9303      	str	r3, [sp, #12]
 8010184:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8010188:	4293      	cmp	r3, r2
 801018a:	d019      	beq.n	80101c0 <__gethex+0x260>
 801018c:	f1bb 0f20 	cmp.w	fp, #32
 8010190:	d107      	bne.n	80101a2 <__gethex+0x242>
 8010192:	9b02      	ldr	r3, [sp, #8]
 8010194:	9a00      	ldr	r2, [sp, #0]
 8010196:	f843 2b04 	str.w	r2, [r3], #4
 801019a:	9302      	str	r3, [sp, #8]
 801019c:	2300      	movs	r3, #0
 801019e:	9300      	str	r3, [sp, #0]
 80101a0:	469b      	mov	fp, r3
 80101a2:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 80101a6:	f7ff fec5 	bl	800ff34 <__hexdig_fun>
 80101aa:	9b00      	ldr	r3, [sp, #0]
 80101ac:	f000 000f 	and.w	r0, r0, #15
 80101b0:	fa00 f00b 	lsl.w	r0, r0, fp
 80101b4:	4303      	orrs	r3, r0
 80101b6:	9300      	str	r3, [sp, #0]
 80101b8:	f10b 0b04 	add.w	fp, fp, #4
 80101bc:	9b03      	ldr	r3, [sp, #12]
 80101be:	e00d      	b.n	80101dc <__gethex+0x27c>
 80101c0:	9b03      	ldr	r3, [sp, #12]
 80101c2:	9a06      	ldr	r2, [sp, #24]
 80101c4:	4413      	add	r3, r2
 80101c6:	42bb      	cmp	r3, r7
 80101c8:	d3e0      	bcc.n	801018c <__gethex+0x22c>
 80101ca:	4618      	mov	r0, r3
 80101cc:	9901      	ldr	r1, [sp, #4]
 80101ce:	9307      	str	r3, [sp, #28]
 80101d0:	4652      	mov	r2, sl
 80101d2:	f000 fefd 	bl	8010fd0 <strncmp>
 80101d6:	9b07      	ldr	r3, [sp, #28]
 80101d8:	2800      	cmp	r0, #0
 80101da:	d1d7      	bne.n	801018c <__gethex+0x22c>
 80101dc:	461e      	mov	r6, r3
 80101de:	e78b      	b.n	80100f8 <__gethex+0x198>
 80101e0:	f04f 0a03 	mov.w	sl, #3
 80101e4:	e7b8      	b.n	8010158 <__gethex+0x1f8>
 80101e6:	da0a      	bge.n	80101fe <__gethex+0x29e>
 80101e8:	1a37      	subs	r7, r6, r0
 80101ea:	4621      	mov	r1, r4
 80101ec:	ee18 0a10 	vmov	r0, s16
 80101f0:	463a      	mov	r2, r7
 80101f2:	f000 fc59 	bl	8010aa8 <__lshift>
 80101f6:	1bed      	subs	r5, r5, r7
 80101f8:	4604      	mov	r4, r0
 80101fa:	f100 0914 	add.w	r9, r0, #20
 80101fe:	f04f 0a00 	mov.w	sl, #0
 8010202:	e7ae      	b.n	8010162 <__gethex+0x202>
 8010204:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8010208:	42a8      	cmp	r0, r5
 801020a:	dd72      	ble.n	80102f2 <__gethex+0x392>
 801020c:	1b45      	subs	r5, r0, r5
 801020e:	42ae      	cmp	r6, r5
 8010210:	dc36      	bgt.n	8010280 <__gethex+0x320>
 8010212:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8010216:	2b02      	cmp	r3, #2
 8010218:	d02a      	beq.n	8010270 <__gethex+0x310>
 801021a:	2b03      	cmp	r3, #3
 801021c:	d02c      	beq.n	8010278 <__gethex+0x318>
 801021e:	2b01      	cmp	r3, #1
 8010220:	d11c      	bne.n	801025c <__gethex+0x2fc>
 8010222:	42ae      	cmp	r6, r5
 8010224:	d11a      	bne.n	801025c <__gethex+0x2fc>
 8010226:	2e01      	cmp	r6, #1
 8010228:	d112      	bne.n	8010250 <__gethex+0x2f0>
 801022a:	9a04      	ldr	r2, [sp, #16]
 801022c:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8010230:	6013      	str	r3, [r2, #0]
 8010232:	2301      	movs	r3, #1
 8010234:	6123      	str	r3, [r4, #16]
 8010236:	f8c9 3000 	str.w	r3, [r9]
 801023a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801023c:	2762      	movs	r7, #98	; 0x62
 801023e:	601c      	str	r4, [r3, #0]
 8010240:	e723      	b.n	801008a <__gethex+0x12a>
 8010242:	bf00      	nop
 8010244:	08012358 	.word	0x08012358
 8010248:	080122e0 	.word	0x080122e0
 801024c:	080122f1 	.word	0x080122f1
 8010250:	1e71      	subs	r1, r6, #1
 8010252:	4620      	mov	r0, r4
 8010254:	f000 fe69 	bl	8010f2a <__any_on>
 8010258:	2800      	cmp	r0, #0
 801025a:	d1e6      	bne.n	801022a <__gethex+0x2ca>
 801025c:	ee18 0a10 	vmov	r0, s16
 8010260:	4621      	mov	r1, r4
 8010262:	f000 fa05 	bl	8010670 <_Bfree>
 8010266:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8010268:	2300      	movs	r3, #0
 801026a:	6013      	str	r3, [r2, #0]
 801026c:	2750      	movs	r7, #80	; 0x50
 801026e:	e70c      	b.n	801008a <__gethex+0x12a>
 8010270:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8010272:	2b00      	cmp	r3, #0
 8010274:	d1f2      	bne.n	801025c <__gethex+0x2fc>
 8010276:	e7d8      	b.n	801022a <__gethex+0x2ca>
 8010278:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801027a:	2b00      	cmp	r3, #0
 801027c:	d1d5      	bne.n	801022a <__gethex+0x2ca>
 801027e:	e7ed      	b.n	801025c <__gethex+0x2fc>
 8010280:	1e6f      	subs	r7, r5, #1
 8010282:	f1ba 0f00 	cmp.w	sl, #0
 8010286:	d131      	bne.n	80102ec <__gethex+0x38c>
 8010288:	b127      	cbz	r7, 8010294 <__gethex+0x334>
 801028a:	4639      	mov	r1, r7
 801028c:	4620      	mov	r0, r4
 801028e:	f000 fe4c 	bl	8010f2a <__any_on>
 8010292:	4682      	mov	sl, r0
 8010294:	117b      	asrs	r3, r7, #5
 8010296:	2101      	movs	r1, #1
 8010298:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 801029c:	f007 071f 	and.w	r7, r7, #31
 80102a0:	fa01 f707 	lsl.w	r7, r1, r7
 80102a4:	421f      	tst	r7, r3
 80102a6:	4629      	mov	r1, r5
 80102a8:	4620      	mov	r0, r4
 80102aa:	bf18      	it	ne
 80102ac:	f04a 0a02 	orrne.w	sl, sl, #2
 80102b0:	1b76      	subs	r6, r6, r5
 80102b2:	f7ff fded 	bl	800fe90 <rshift>
 80102b6:	f8d8 5004 	ldr.w	r5, [r8, #4]
 80102ba:	2702      	movs	r7, #2
 80102bc:	f1ba 0f00 	cmp.w	sl, #0
 80102c0:	d048      	beq.n	8010354 <__gethex+0x3f4>
 80102c2:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80102c6:	2b02      	cmp	r3, #2
 80102c8:	d015      	beq.n	80102f6 <__gethex+0x396>
 80102ca:	2b03      	cmp	r3, #3
 80102cc:	d017      	beq.n	80102fe <__gethex+0x39e>
 80102ce:	2b01      	cmp	r3, #1
 80102d0:	d109      	bne.n	80102e6 <__gethex+0x386>
 80102d2:	f01a 0f02 	tst.w	sl, #2
 80102d6:	d006      	beq.n	80102e6 <__gethex+0x386>
 80102d8:	f8d9 0000 	ldr.w	r0, [r9]
 80102dc:	ea4a 0a00 	orr.w	sl, sl, r0
 80102e0:	f01a 0f01 	tst.w	sl, #1
 80102e4:	d10e      	bne.n	8010304 <__gethex+0x3a4>
 80102e6:	f047 0710 	orr.w	r7, r7, #16
 80102ea:	e033      	b.n	8010354 <__gethex+0x3f4>
 80102ec:	f04f 0a01 	mov.w	sl, #1
 80102f0:	e7d0      	b.n	8010294 <__gethex+0x334>
 80102f2:	2701      	movs	r7, #1
 80102f4:	e7e2      	b.n	80102bc <__gethex+0x35c>
 80102f6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80102f8:	f1c3 0301 	rsb	r3, r3, #1
 80102fc:	9315      	str	r3, [sp, #84]	; 0x54
 80102fe:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8010300:	2b00      	cmp	r3, #0
 8010302:	d0f0      	beq.n	80102e6 <__gethex+0x386>
 8010304:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8010308:	f104 0314 	add.w	r3, r4, #20
 801030c:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8010310:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8010314:	f04f 0c00 	mov.w	ip, #0
 8010318:	4618      	mov	r0, r3
 801031a:	f853 2b04 	ldr.w	r2, [r3], #4
 801031e:	f1b2 3fff 	cmp.w	r2, #4294967295
 8010322:	d01c      	beq.n	801035e <__gethex+0x3fe>
 8010324:	3201      	adds	r2, #1
 8010326:	6002      	str	r2, [r0, #0]
 8010328:	2f02      	cmp	r7, #2
 801032a:	f104 0314 	add.w	r3, r4, #20
 801032e:	d13f      	bne.n	80103b0 <__gethex+0x450>
 8010330:	f8d8 2000 	ldr.w	r2, [r8]
 8010334:	3a01      	subs	r2, #1
 8010336:	42b2      	cmp	r2, r6
 8010338:	d10a      	bne.n	8010350 <__gethex+0x3f0>
 801033a:	1171      	asrs	r1, r6, #5
 801033c:	2201      	movs	r2, #1
 801033e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8010342:	f006 061f 	and.w	r6, r6, #31
 8010346:	fa02 f606 	lsl.w	r6, r2, r6
 801034a:	421e      	tst	r6, r3
 801034c:	bf18      	it	ne
 801034e:	4617      	movne	r7, r2
 8010350:	f047 0720 	orr.w	r7, r7, #32
 8010354:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8010356:	601c      	str	r4, [r3, #0]
 8010358:	9b04      	ldr	r3, [sp, #16]
 801035a:	601d      	str	r5, [r3, #0]
 801035c:	e695      	b.n	801008a <__gethex+0x12a>
 801035e:	4299      	cmp	r1, r3
 8010360:	f843 cc04 	str.w	ip, [r3, #-4]
 8010364:	d8d8      	bhi.n	8010318 <__gethex+0x3b8>
 8010366:	68a3      	ldr	r3, [r4, #8]
 8010368:	459b      	cmp	fp, r3
 801036a:	db19      	blt.n	80103a0 <__gethex+0x440>
 801036c:	6861      	ldr	r1, [r4, #4]
 801036e:	ee18 0a10 	vmov	r0, s16
 8010372:	3101      	adds	r1, #1
 8010374:	f000 f93c 	bl	80105f0 <_Balloc>
 8010378:	4681      	mov	r9, r0
 801037a:	b918      	cbnz	r0, 8010384 <__gethex+0x424>
 801037c:	4b1a      	ldr	r3, [pc, #104]	; (80103e8 <__gethex+0x488>)
 801037e:	4602      	mov	r2, r0
 8010380:	2184      	movs	r1, #132	; 0x84
 8010382:	e6a8      	b.n	80100d6 <__gethex+0x176>
 8010384:	6922      	ldr	r2, [r4, #16]
 8010386:	3202      	adds	r2, #2
 8010388:	f104 010c 	add.w	r1, r4, #12
 801038c:	0092      	lsls	r2, r2, #2
 801038e:	300c      	adds	r0, #12
 8010390:	f7fe fd48 	bl	800ee24 <memcpy>
 8010394:	4621      	mov	r1, r4
 8010396:	ee18 0a10 	vmov	r0, s16
 801039a:	f000 f969 	bl	8010670 <_Bfree>
 801039e:	464c      	mov	r4, r9
 80103a0:	6923      	ldr	r3, [r4, #16]
 80103a2:	1c5a      	adds	r2, r3, #1
 80103a4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80103a8:	6122      	str	r2, [r4, #16]
 80103aa:	2201      	movs	r2, #1
 80103ac:	615a      	str	r2, [r3, #20]
 80103ae:	e7bb      	b.n	8010328 <__gethex+0x3c8>
 80103b0:	6922      	ldr	r2, [r4, #16]
 80103b2:	455a      	cmp	r2, fp
 80103b4:	dd0b      	ble.n	80103ce <__gethex+0x46e>
 80103b6:	2101      	movs	r1, #1
 80103b8:	4620      	mov	r0, r4
 80103ba:	f7ff fd69 	bl	800fe90 <rshift>
 80103be:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80103c2:	3501      	adds	r5, #1
 80103c4:	42ab      	cmp	r3, r5
 80103c6:	f6ff aed0 	blt.w	801016a <__gethex+0x20a>
 80103ca:	2701      	movs	r7, #1
 80103cc:	e7c0      	b.n	8010350 <__gethex+0x3f0>
 80103ce:	f016 061f 	ands.w	r6, r6, #31
 80103d2:	d0fa      	beq.n	80103ca <__gethex+0x46a>
 80103d4:	4453      	add	r3, sl
 80103d6:	f1c6 0620 	rsb	r6, r6, #32
 80103da:	f853 0c04 	ldr.w	r0, [r3, #-4]
 80103de:	f000 f9f9 	bl	80107d4 <__hi0bits>
 80103e2:	42b0      	cmp	r0, r6
 80103e4:	dbe7      	blt.n	80103b6 <__gethex+0x456>
 80103e6:	e7f0      	b.n	80103ca <__gethex+0x46a>
 80103e8:	080122e0 	.word	0x080122e0

080103ec <L_shift>:
 80103ec:	f1c2 0208 	rsb	r2, r2, #8
 80103f0:	0092      	lsls	r2, r2, #2
 80103f2:	b570      	push	{r4, r5, r6, lr}
 80103f4:	f1c2 0620 	rsb	r6, r2, #32
 80103f8:	6843      	ldr	r3, [r0, #4]
 80103fa:	6804      	ldr	r4, [r0, #0]
 80103fc:	fa03 f506 	lsl.w	r5, r3, r6
 8010400:	432c      	orrs	r4, r5
 8010402:	40d3      	lsrs	r3, r2
 8010404:	6004      	str	r4, [r0, #0]
 8010406:	f840 3f04 	str.w	r3, [r0, #4]!
 801040a:	4288      	cmp	r0, r1
 801040c:	d3f4      	bcc.n	80103f8 <L_shift+0xc>
 801040e:	bd70      	pop	{r4, r5, r6, pc}

08010410 <__match>:
 8010410:	b530      	push	{r4, r5, lr}
 8010412:	6803      	ldr	r3, [r0, #0]
 8010414:	3301      	adds	r3, #1
 8010416:	f811 4b01 	ldrb.w	r4, [r1], #1
 801041a:	b914      	cbnz	r4, 8010422 <__match+0x12>
 801041c:	6003      	str	r3, [r0, #0]
 801041e:	2001      	movs	r0, #1
 8010420:	bd30      	pop	{r4, r5, pc}
 8010422:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010426:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 801042a:	2d19      	cmp	r5, #25
 801042c:	bf98      	it	ls
 801042e:	3220      	addls	r2, #32
 8010430:	42a2      	cmp	r2, r4
 8010432:	d0f0      	beq.n	8010416 <__match+0x6>
 8010434:	2000      	movs	r0, #0
 8010436:	e7f3      	b.n	8010420 <__match+0x10>

08010438 <__hexnan>:
 8010438:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801043c:	680b      	ldr	r3, [r1, #0]
 801043e:	115e      	asrs	r6, r3, #5
 8010440:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8010444:	f013 031f 	ands.w	r3, r3, #31
 8010448:	b087      	sub	sp, #28
 801044a:	bf18      	it	ne
 801044c:	3604      	addne	r6, #4
 801044e:	2500      	movs	r5, #0
 8010450:	1f37      	subs	r7, r6, #4
 8010452:	4690      	mov	r8, r2
 8010454:	6802      	ldr	r2, [r0, #0]
 8010456:	9301      	str	r3, [sp, #4]
 8010458:	4682      	mov	sl, r0
 801045a:	f846 5c04 	str.w	r5, [r6, #-4]
 801045e:	46b9      	mov	r9, r7
 8010460:	463c      	mov	r4, r7
 8010462:	9502      	str	r5, [sp, #8]
 8010464:	46ab      	mov	fp, r5
 8010466:	7851      	ldrb	r1, [r2, #1]
 8010468:	1c53      	adds	r3, r2, #1
 801046a:	9303      	str	r3, [sp, #12]
 801046c:	b341      	cbz	r1, 80104c0 <__hexnan+0x88>
 801046e:	4608      	mov	r0, r1
 8010470:	9205      	str	r2, [sp, #20]
 8010472:	9104      	str	r1, [sp, #16]
 8010474:	f7ff fd5e 	bl	800ff34 <__hexdig_fun>
 8010478:	2800      	cmp	r0, #0
 801047a:	d14f      	bne.n	801051c <__hexnan+0xe4>
 801047c:	9904      	ldr	r1, [sp, #16]
 801047e:	9a05      	ldr	r2, [sp, #20]
 8010480:	2920      	cmp	r1, #32
 8010482:	d818      	bhi.n	80104b6 <__hexnan+0x7e>
 8010484:	9b02      	ldr	r3, [sp, #8]
 8010486:	459b      	cmp	fp, r3
 8010488:	dd13      	ble.n	80104b2 <__hexnan+0x7a>
 801048a:	454c      	cmp	r4, r9
 801048c:	d206      	bcs.n	801049c <__hexnan+0x64>
 801048e:	2d07      	cmp	r5, #7
 8010490:	dc04      	bgt.n	801049c <__hexnan+0x64>
 8010492:	462a      	mov	r2, r5
 8010494:	4649      	mov	r1, r9
 8010496:	4620      	mov	r0, r4
 8010498:	f7ff ffa8 	bl	80103ec <L_shift>
 801049c:	4544      	cmp	r4, r8
 801049e:	d950      	bls.n	8010542 <__hexnan+0x10a>
 80104a0:	2300      	movs	r3, #0
 80104a2:	f1a4 0904 	sub.w	r9, r4, #4
 80104a6:	f844 3c04 	str.w	r3, [r4, #-4]
 80104aa:	f8cd b008 	str.w	fp, [sp, #8]
 80104ae:	464c      	mov	r4, r9
 80104b0:	461d      	mov	r5, r3
 80104b2:	9a03      	ldr	r2, [sp, #12]
 80104b4:	e7d7      	b.n	8010466 <__hexnan+0x2e>
 80104b6:	2929      	cmp	r1, #41	; 0x29
 80104b8:	d156      	bne.n	8010568 <__hexnan+0x130>
 80104ba:	3202      	adds	r2, #2
 80104bc:	f8ca 2000 	str.w	r2, [sl]
 80104c0:	f1bb 0f00 	cmp.w	fp, #0
 80104c4:	d050      	beq.n	8010568 <__hexnan+0x130>
 80104c6:	454c      	cmp	r4, r9
 80104c8:	d206      	bcs.n	80104d8 <__hexnan+0xa0>
 80104ca:	2d07      	cmp	r5, #7
 80104cc:	dc04      	bgt.n	80104d8 <__hexnan+0xa0>
 80104ce:	462a      	mov	r2, r5
 80104d0:	4649      	mov	r1, r9
 80104d2:	4620      	mov	r0, r4
 80104d4:	f7ff ff8a 	bl	80103ec <L_shift>
 80104d8:	4544      	cmp	r4, r8
 80104da:	d934      	bls.n	8010546 <__hexnan+0x10e>
 80104dc:	f1a8 0204 	sub.w	r2, r8, #4
 80104e0:	4623      	mov	r3, r4
 80104e2:	f853 1b04 	ldr.w	r1, [r3], #4
 80104e6:	f842 1f04 	str.w	r1, [r2, #4]!
 80104ea:	429f      	cmp	r7, r3
 80104ec:	d2f9      	bcs.n	80104e2 <__hexnan+0xaa>
 80104ee:	1b3b      	subs	r3, r7, r4
 80104f0:	f023 0303 	bic.w	r3, r3, #3
 80104f4:	3304      	adds	r3, #4
 80104f6:	3401      	adds	r4, #1
 80104f8:	3e03      	subs	r6, #3
 80104fa:	42b4      	cmp	r4, r6
 80104fc:	bf88      	it	hi
 80104fe:	2304      	movhi	r3, #4
 8010500:	4443      	add	r3, r8
 8010502:	2200      	movs	r2, #0
 8010504:	f843 2b04 	str.w	r2, [r3], #4
 8010508:	429f      	cmp	r7, r3
 801050a:	d2fb      	bcs.n	8010504 <__hexnan+0xcc>
 801050c:	683b      	ldr	r3, [r7, #0]
 801050e:	b91b      	cbnz	r3, 8010518 <__hexnan+0xe0>
 8010510:	4547      	cmp	r7, r8
 8010512:	d127      	bne.n	8010564 <__hexnan+0x12c>
 8010514:	2301      	movs	r3, #1
 8010516:	603b      	str	r3, [r7, #0]
 8010518:	2005      	movs	r0, #5
 801051a:	e026      	b.n	801056a <__hexnan+0x132>
 801051c:	3501      	adds	r5, #1
 801051e:	2d08      	cmp	r5, #8
 8010520:	f10b 0b01 	add.w	fp, fp, #1
 8010524:	dd06      	ble.n	8010534 <__hexnan+0xfc>
 8010526:	4544      	cmp	r4, r8
 8010528:	d9c3      	bls.n	80104b2 <__hexnan+0x7a>
 801052a:	2300      	movs	r3, #0
 801052c:	f844 3c04 	str.w	r3, [r4, #-4]
 8010530:	2501      	movs	r5, #1
 8010532:	3c04      	subs	r4, #4
 8010534:	6822      	ldr	r2, [r4, #0]
 8010536:	f000 000f 	and.w	r0, r0, #15
 801053a:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 801053e:	6022      	str	r2, [r4, #0]
 8010540:	e7b7      	b.n	80104b2 <__hexnan+0x7a>
 8010542:	2508      	movs	r5, #8
 8010544:	e7b5      	b.n	80104b2 <__hexnan+0x7a>
 8010546:	9b01      	ldr	r3, [sp, #4]
 8010548:	2b00      	cmp	r3, #0
 801054a:	d0df      	beq.n	801050c <__hexnan+0xd4>
 801054c:	f04f 32ff 	mov.w	r2, #4294967295
 8010550:	f1c3 0320 	rsb	r3, r3, #32
 8010554:	fa22 f303 	lsr.w	r3, r2, r3
 8010558:	f856 2c04 	ldr.w	r2, [r6, #-4]
 801055c:	401a      	ands	r2, r3
 801055e:	f846 2c04 	str.w	r2, [r6, #-4]
 8010562:	e7d3      	b.n	801050c <__hexnan+0xd4>
 8010564:	3f04      	subs	r7, #4
 8010566:	e7d1      	b.n	801050c <__hexnan+0xd4>
 8010568:	2004      	movs	r0, #4
 801056a:	b007      	add	sp, #28
 801056c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08010570 <_isatty_r>:
 8010570:	b538      	push	{r3, r4, r5, lr}
 8010572:	4d06      	ldr	r5, [pc, #24]	; (801058c <_isatty_r+0x1c>)
 8010574:	2300      	movs	r3, #0
 8010576:	4604      	mov	r4, r0
 8010578:	4608      	mov	r0, r1
 801057a:	602b      	str	r3, [r5, #0]
 801057c:	f7f3 fb1d 	bl	8003bba <_isatty>
 8010580:	1c43      	adds	r3, r0, #1
 8010582:	d102      	bne.n	801058a <_isatty_r+0x1a>
 8010584:	682b      	ldr	r3, [r5, #0]
 8010586:	b103      	cbz	r3, 801058a <_isatty_r+0x1a>
 8010588:	6023      	str	r3, [r4, #0]
 801058a:	bd38      	pop	{r3, r4, r5, pc}
 801058c:	24000aa0 	.word	0x24000aa0

08010590 <_lseek_r>:
 8010590:	b538      	push	{r3, r4, r5, lr}
 8010592:	4d07      	ldr	r5, [pc, #28]	; (80105b0 <_lseek_r+0x20>)
 8010594:	4604      	mov	r4, r0
 8010596:	4608      	mov	r0, r1
 8010598:	4611      	mov	r1, r2
 801059a:	2200      	movs	r2, #0
 801059c:	602a      	str	r2, [r5, #0]
 801059e:	461a      	mov	r2, r3
 80105a0:	f7f3 fb16 	bl	8003bd0 <_lseek>
 80105a4:	1c43      	adds	r3, r0, #1
 80105a6:	d102      	bne.n	80105ae <_lseek_r+0x1e>
 80105a8:	682b      	ldr	r3, [r5, #0]
 80105aa:	b103      	cbz	r3, 80105ae <_lseek_r+0x1e>
 80105ac:	6023      	str	r3, [r4, #0]
 80105ae:	bd38      	pop	{r3, r4, r5, pc}
 80105b0:	24000aa0 	.word	0x24000aa0

080105b4 <__ascii_mbtowc>:
 80105b4:	b082      	sub	sp, #8
 80105b6:	b901      	cbnz	r1, 80105ba <__ascii_mbtowc+0x6>
 80105b8:	a901      	add	r1, sp, #4
 80105ba:	b142      	cbz	r2, 80105ce <__ascii_mbtowc+0x1a>
 80105bc:	b14b      	cbz	r3, 80105d2 <__ascii_mbtowc+0x1e>
 80105be:	7813      	ldrb	r3, [r2, #0]
 80105c0:	600b      	str	r3, [r1, #0]
 80105c2:	7812      	ldrb	r2, [r2, #0]
 80105c4:	1e10      	subs	r0, r2, #0
 80105c6:	bf18      	it	ne
 80105c8:	2001      	movne	r0, #1
 80105ca:	b002      	add	sp, #8
 80105cc:	4770      	bx	lr
 80105ce:	4610      	mov	r0, r2
 80105d0:	e7fb      	b.n	80105ca <__ascii_mbtowc+0x16>
 80105d2:	f06f 0001 	mvn.w	r0, #1
 80105d6:	e7f8      	b.n	80105ca <__ascii_mbtowc+0x16>

080105d8 <__malloc_lock>:
 80105d8:	4801      	ldr	r0, [pc, #4]	; (80105e0 <__malloc_lock+0x8>)
 80105da:	f7fe bbbb 	b.w	800ed54 <__retarget_lock_acquire_recursive>
 80105de:	bf00      	nop
 80105e0:	24000a94 	.word	0x24000a94

080105e4 <__malloc_unlock>:
 80105e4:	4801      	ldr	r0, [pc, #4]	; (80105ec <__malloc_unlock+0x8>)
 80105e6:	f7fe bbb6 	b.w	800ed56 <__retarget_lock_release_recursive>
 80105ea:	bf00      	nop
 80105ec:	24000a94 	.word	0x24000a94

080105f0 <_Balloc>:
 80105f0:	b570      	push	{r4, r5, r6, lr}
 80105f2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80105f4:	4604      	mov	r4, r0
 80105f6:	460d      	mov	r5, r1
 80105f8:	b976      	cbnz	r6, 8010618 <_Balloc+0x28>
 80105fa:	2010      	movs	r0, #16
 80105fc:	f000 fd3a 	bl	8011074 <malloc>
 8010600:	4602      	mov	r2, r0
 8010602:	6260      	str	r0, [r4, #36]	; 0x24
 8010604:	b920      	cbnz	r0, 8010610 <_Balloc+0x20>
 8010606:	4b18      	ldr	r3, [pc, #96]	; (8010668 <_Balloc+0x78>)
 8010608:	4818      	ldr	r0, [pc, #96]	; (801066c <_Balloc+0x7c>)
 801060a:	2166      	movs	r1, #102	; 0x66
 801060c:	f000 fd02 	bl	8011014 <__assert_func>
 8010610:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8010614:	6006      	str	r6, [r0, #0]
 8010616:	60c6      	str	r6, [r0, #12]
 8010618:	6a66      	ldr	r6, [r4, #36]	; 0x24
 801061a:	68f3      	ldr	r3, [r6, #12]
 801061c:	b183      	cbz	r3, 8010640 <_Balloc+0x50>
 801061e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010620:	68db      	ldr	r3, [r3, #12]
 8010622:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8010626:	b9b8      	cbnz	r0, 8010658 <_Balloc+0x68>
 8010628:	2101      	movs	r1, #1
 801062a:	fa01 f605 	lsl.w	r6, r1, r5
 801062e:	1d72      	adds	r2, r6, #5
 8010630:	0092      	lsls	r2, r2, #2
 8010632:	4620      	mov	r0, r4
 8010634:	f000 fc9a 	bl	8010f6c <_calloc_r>
 8010638:	b160      	cbz	r0, 8010654 <_Balloc+0x64>
 801063a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801063e:	e00e      	b.n	801065e <_Balloc+0x6e>
 8010640:	2221      	movs	r2, #33	; 0x21
 8010642:	2104      	movs	r1, #4
 8010644:	4620      	mov	r0, r4
 8010646:	f000 fc91 	bl	8010f6c <_calloc_r>
 801064a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801064c:	60f0      	str	r0, [r6, #12]
 801064e:	68db      	ldr	r3, [r3, #12]
 8010650:	2b00      	cmp	r3, #0
 8010652:	d1e4      	bne.n	801061e <_Balloc+0x2e>
 8010654:	2000      	movs	r0, #0
 8010656:	bd70      	pop	{r4, r5, r6, pc}
 8010658:	6802      	ldr	r2, [r0, #0]
 801065a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801065e:	2300      	movs	r3, #0
 8010660:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8010664:	e7f7      	b.n	8010656 <_Balloc+0x66>
 8010666:	bf00      	nop
 8010668:	0801236c 	.word	0x0801236c
 801066c:	08012383 	.word	0x08012383

08010670 <_Bfree>:
 8010670:	b570      	push	{r4, r5, r6, lr}
 8010672:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8010674:	4605      	mov	r5, r0
 8010676:	460c      	mov	r4, r1
 8010678:	b976      	cbnz	r6, 8010698 <_Bfree+0x28>
 801067a:	2010      	movs	r0, #16
 801067c:	f000 fcfa 	bl	8011074 <malloc>
 8010680:	4602      	mov	r2, r0
 8010682:	6268      	str	r0, [r5, #36]	; 0x24
 8010684:	b920      	cbnz	r0, 8010690 <_Bfree+0x20>
 8010686:	4b09      	ldr	r3, [pc, #36]	; (80106ac <_Bfree+0x3c>)
 8010688:	4809      	ldr	r0, [pc, #36]	; (80106b0 <_Bfree+0x40>)
 801068a:	218a      	movs	r1, #138	; 0x8a
 801068c:	f000 fcc2 	bl	8011014 <__assert_func>
 8010690:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8010694:	6006      	str	r6, [r0, #0]
 8010696:	60c6      	str	r6, [r0, #12]
 8010698:	b13c      	cbz	r4, 80106aa <_Bfree+0x3a>
 801069a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 801069c:	6862      	ldr	r2, [r4, #4]
 801069e:	68db      	ldr	r3, [r3, #12]
 80106a0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80106a4:	6021      	str	r1, [r4, #0]
 80106a6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80106aa:	bd70      	pop	{r4, r5, r6, pc}
 80106ac:	0801236c 	.word	0x0801236c
 80106b0:	08012383 	.word	0x08012383

080106b4 <__multadd>:
 80106b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80106b8:	690d      	ldr	r5, [r1, #16]
 80106ba:	4607      	mov	r7, r0
 80106bc:	460c      	mov	r4, r1
 80106be:	461e      	mov	r6, r3
 80106c0:	f101 0c14 	add.w	ip, r1, #20
 80106c4:	2000      	movs	r0, #0
 80106c6:	f8dc 3000 	ldr.w	r3, [ip]
 80106ca:	b299      	uxth	r1, r3
 80106cc:	fb02 6101 	mla	r1, r2, r1, r6
 80106d0:	0c1e      	lsrs	r6, r3, #16
 80106d2:	0c0b      	lsrs	r3, r1, #16
 80106d4:	fb02 3306 	mla	r3, r2, r6, r3
 80106d8:	b289      	uxth	r1, r1
 80106da:	3001      	adds	r0, #1
 80106dc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80106e0:	4285      	cmp	r5, r0
 80106e2:	f84c 1b04 	str.w	r1, [ip], #4
 80106e6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80106ea:	dcec      	bgt.n	80106c6 <__multadd+0x12>
 80106ec:	b30e      	cbz	r6, 8010732 <__multadd+0x7e>
 80106ee:	68a3      	ldr	r3, [r4, #8]
 80106f0:	42ab      	cmp	r3, r5
 80106f2:	dc19      	bgt.n	8010728 <__multadd+0x74>
 80106f4:	6861      	ldr	r1, [r4, #4]
 80106f6:	4638      	mov	r0, r7
 80106f8:	3101      	adds	r1, #1
 80106fa:	f7ff ff79 	bl	80105f0 <_Balloc>
 80106fe:	4680      	mov	r8, r0
 8010700:	b928      	cbnz	r0, 801070e <__multadd+0x5a>
 8010702:	4602      	mov	r2, r0
 8010704:	4b0c      	ldr	r3, [pc, #48]	; (8010738 <__multadd+0x84>)
 8010706:	480d      	ldr	r0, [pc, #52]	; (801073c <__multadd+0x88>)
 8010708:	21b5      	movs	r1, #181	; 0xb5
 801070a:	f000 fc83 	bl	8011014 <__assert_func>
 801070e:	6922      	ldr	r2, [r4, #16]
 8010710:	3202      	adds	r2, #2
 8010712:	f104 010c 	add.w	r1, r4, #12
 8010716:	0092      	lsls	r2, r2, #2
 8010718:	300c      	adds	r0, #12
 801071a:	f7fe fb83 	bl	800ee24 <memcpy>
 801071e:	4621      	mov	r1, r4
 8010720:	4638      	mov	r0, r7
 8010722:	f7ff ffa5 	bl	8010670 <_Bfree>
 8010726:	4644      	mov	r4, r8
 8010728:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 801072c:	3501      	adds	r5, #1
 801072e:	615e      	str	r6, [r3, #20]
 8010730:	6125      	str	r5, [r4, #16]
 8010732:	4620      	mov	r0, r4
 8010734:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010738:	080122e0 	.word	0x080122e0
 801073c:	08012383 	.word	0x08012383

08010740 <__s2b>:
 8010740:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010744:	460c      	mov	r4, r1
 8010746:	4615      	mov	r5, r2
 8010748:	461f      	mov	r7, r3
 801074a:	2209      	movs	r2, #9
 801074c:	3308      	adds	r3, #8
 801074e:	4606      	mov	r6, r0
 8010750:	fb93 f3f2 	sdiv	r3, r3, r2
 8010754:	2100      	movs	r1, #0
 8010756:	2201      	movs	r2, #1
 8010758:	429a      	cmp	r2, r3
 801075a:	db09      	blt.n	8010770 <__s2b+0x30>
 801075c:	4630      	mov	r0, r6
 801075e:	f7ff ff47 	bl	80105f0 <_Balloc>
 8010762:	b940      	cbnz	r0, 8010776 <__s2b+0x36>
 8010764:	4602      	mov	r2, r0
 8010766:	4b19      	ldr	r3, [pc, #100]	; (80107cc <__s2b+0x8c>)
 8010768:	4819      	ldr	r0, [pc, #100]	; (80107d0 <__s2b+0x90>)
 801076a:	21ce      	movs	r1, #206	; 0xce
 801076c:	f000 fc52 	bl	8011014 <__assert_func>
 8010770:	0052      	lsls	r2, r2, #1
 8010772:	3101      	adds	r1, #1
 8010774:	e7f0      	b.n	8010758 <__s2b+0x18>
 8010776:	9b08      	ldr	r3, [sp, #32]
 8010778:	6143      	str	r3, [r0, #20]
 801077a:	2d09      	cmp	r5, #9
 801077c:	f04f 0301 	mov.w	r3, #1
 8010780:	6103      	str	r3, [r0, #16]
 8010782:	dd16      	ble.n	80107b2 <__s2b+0x72>
 8010784:	f104 0909 	add.w	r9, r4, #9
 8010788:	46c8      	mov	r8, r9
 801078a:	442c      	add	r4, r5
 801078c:	f818 3b01 	ldrb.w	r3, [r8], #1
 8010790:	4601      	mov	r1, r0
 8010792:	3b30      	subs	r3, #48	; 0x30
 8010794:	220a      	movs	r2, #10
 8010796:	4630      	mov	r0, r6
 8010798:	f7ff ff8c 	bl	80106b4 <__multadd>
 801079c:	45a0      	cmp	r8, r4
 801079e:	d1f5      	bne.n	801078c <__s2b+0x4c>
 80107a0:	f1a5 0408 	sub.w	r4, r5, #8
 80107a4:	444c      	add	r4, r9
 80107a6:	1b2d      	subs	r5, r5, r4
 80107a8:	1963      	adds	r3, r4, r5
 80107aa:	42bb      	cmp	r3, r7
 80107ac:	db04      	blt.n	80107b8 <__s2b+0x78>
 80107ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80107b2:	340a      	adds	r4, #10
 80107b4:	2509      	movs	r5, #9
 80107b6:	e7f6      	b.n	80107a6 <__s2b+0x66>
 80107b8:	f814 3b01 	ldrb.w	r3, [r4], #1
 80107bc:	4601      	mov	r1, r0
 80107be:	3b30      	subs	r3, #48	; 0x30
 80107c0:	220a      	movs	r2, #10
 80107c2:	4630      	mov	r0, r6
 80107c4:	f7ff ff76 	bl	80106b4 <__multadd>
 80107c8:	e7ee      	b.n	80107a8 <__s2b+0x68>
 80107ca:	bf00      	nop
 80107cc:	080122e0 	.word	0x080122e0
 80107d0:	08012383 	.word	0x08012383

080107d4 <__hi0bits>:
 80107d4:	0c03      	lsrs	r3, r0, #16
 80107d6:	041b      	lsls	r3, r3, #16
 80107d8:	b9d3      	cbnz	r3, 8010810 <__hi0bits+0x3c>
 80107da:	0400      	lsls	r0, r0, #16
 80107dc:	2310      	movs	r3, #16
 80107de:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80107e2:	bf04      	itt	eq
 80107e4:	0200      	lsleq	r0, r0, #8
 80107e6:	3308      	addeq	r3, #8
 80107e8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80107ec:	bf04      	itt	eq
 80107ee:	0100      	lsleq	r0, r0, #4
 80107f0:	3304      	addeq	r3, #4
 80107f2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80107f6:	bf04      	itt	eq
 80107f8:	0080      	lsleq	r0, r0, #2
 80107fa:	3302      	addeq	r3, #2
 80107fc:	2800      	cmp	r0, #0
 80107fe:	db05      	blt.n	801080c <__hi0bits+0x38>
 8010800:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8010804:	f103 0301 	add.w	r3, r3, #1
 8010808:	bf08      	it	eq
 801080a:	2320      	moveq	r3, #32
 801080c:	4618      	mov	r0, r3
 801080e:	4770      	bx	lr
 8010810:	2300      	movs	r3, #0
 8010812:	e7e4      	b.n	80107de <__hi0bits+0xa>

08010814 <__lo0bits>:
 8010814:	6803      	ldr	r3, [r0, #0]
 8010816:	f013 0207 	ands.w	r2, r3, #7
 801081a:	4601      	mov	r1, r0
 801081c:	d00b      	beq.n	8010836 <__lo0bits+0x22>
 801081e:	07da      	lsls	r2, r3, #31
 8010820:	d423      	bmi.n	801086a <__lo0bits+0x56>
 8010822:	0798      	lsls	r0, r3, #30
 8010824:	bf49      	itett	mi
 8010826:	085b      	lsrmi	r3, r3, #1
 8010828:	089b      	lsrpl	r3, r3, #2
 801082a:	2001      	movmi	r0, #1
 801082c:	600b      	strmi	r3, [r1, #0]
 801082e:	bf5c      	itt	pl
 8010830:	600b      	strpl	r3, [r1, #0]
 8010832:	2002      	movpl	r0, #2
 8010834:	4770      	bx	lr
 8010836:	b298      	uxth	r0, r3
 8010838:	b9a8      	cbnz	r0, 8010866 <__lo0bits+0x52>
 801083a:	0c1b      	lsrs	r3, r3, #16
 801083c:	2010      	movs	r0, #16
 801083e:	b2da      	uxtb	r2, r3
 8010840:	b90a      	cbnz	r2, 8010846 <__lo0bits+0x32>
 8010842:	3008      	adds	r0, #8
 8010844:	0a1b      	lsrs	r3, r3, #8
 8010846:	071a      	lsls	r2, r3, #28
 8010848:	bf04      	itt	eq
 801084a:	091b      	lsreq	r3, r3, #4
 801084c:	3004      	addeq	r0, #4
 801084e:	079a      	lsls	r2, r3, #30
 8010850:	bf04      	itt	eq
 8010852:	089b      	lsreq	r3, r3, #2
 8010854:	3002      	addeq	r0, #2
 8010856:	07da      	lsls	r2, r3, #31
 8010858:	d403      	bmi.n	8010862 <__lo0bits+0x4e>
 801085a:	085b      	lsrs	r3, r3, #1
 801085c:	f100 0001 	add.w	r0, r0, #1
 8010860:	d005      	beq.n	801086e <__lo0bits+0x5a>
 8010862:	600b      	str	r3, [r1, #0]
 8010864:	4770      	bx	lr
 8010866:	4610      	mov	r0, r2
 8010868:	e7e9      	b.n	801083e <__lo0bits+0x2a>
 801086a:	2000      	movs	r0, #0
 801086c:	4770      	bx	lr
 801086e:	2020      	movs	r0, #32
 8010870:	4770      	bx	lr
	...

08010874 <__i2b>:
 8010874:	b510      	push	{r4, lr}
 8010876:	460c      	mov	r4, r1
 8010878:	2101      	movs	r1, #1
 801087a:	f7ff feb9 	bl	80105f0 <_Balloc>
 801087e:	4602      	mov	r2, r0
 8010880:	b928      	cbnz	r0, 801088e <__i2b+0x1a>
 8010882:	4b05      	ldr	r3, [pc, #20]	; (8010898 <__i2b+0x24>)
 8010884:	4805      	ldr	r0, [pc, #20]	; (801089c <__i2b+0x28>)
 8010886:	f44f 71a0 	mov.w	r1, #320	; 0x140
 801088a:	f000 fbc3 	bl	8011014 <__assert_func>
 801088e:	2301      	movs	r3, #1
 8010890:	6144      	str	r4, [r0, #20]
 8010892:	6103      	str	r3, [r0, #16]
 8010894:	bd10      	pop	{r4, pc}
 8010896:	bf00      	nop
 8010898:	080122e0 	.word	0x080122e0
 801089c:	08012383 	.word	0x08012383

080108a0 <__multiply>:
 80108a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80108a4:	4691      	mov	r9, r2
 80108a6:	690a      	ldr	r2, [r1, #16]
 80108a8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80108ac:	429a      	cmp	r2, r3
 80108ae:	bfb8      	it	lt
 80108b0:	460b      	movlt	r3, r1
 80108b2:	460c      	mov	r4, r1
 80108b4:	bfbc      	itt	lt
 80108b6:	464c      	movlt	r4, r9
 80108b8:	4699      	movlt	r9, r3
 80108ba:	6927      	ldr	r7, [r4, #16]
 80108bc:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80108c0:	68a3      	ldr	r3, [r4, #8]
 80108c2:	6861      	ldr	r1, [r4, #4]
 80108c4:	eb07 060a 	add.w	r6, r7, sl
 80108c8:	42b3      	cmp	r3, r6
 80108ca:	b085      	sub	sp, #20
 80108cc:	bfb8      	it	lt
 80108ce:	3101      	addlt	r1, #1
 80108d0:	f7ff fe8e 	bl	80105f0 <_Balloc>
 80108d4:	b930      	cbnz	r0, 80108e4 <__multiply+0x44>
 80108d6:	4602      	mov	r2, r0
 80108d8:	4b44      	ldr	r3, [pc, #272]	; (80109ec <__multiply+0x14c>)
 80108da:	4845      	ldr	r0, [pc, #276]	; (80109f0 <__multiply+0x150>)
 80108dc:	f240 115d 	movw	r1, #349	; 0x15d
 80108e0:	f000 fb98 	bl	8011014 <__assert_func>
 80108e4:	f100 0514 	add.w	r5, r0, #20
 80108e8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80108ec:	462b      	mov	r3, r5
 80108ee:	2200      	movs	r2, #0
 80108f0:	4543      	cmp	r3, r8
 80108f2:	d321      	bcc.n	8010938 <__multiply+0x98>
 80108f4:	f104 0314 	add.w	r3, r4, #20
 80108f8:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80108fc:	f109 0314 	add.w	r3, r9, #20
 8010900:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8010904:	9202      	str	r2, [sp, #8]
 8010906:	1b3a      	subs	r2, r7, r4
 8010908:	3a15      	subs	r2, #21
 801090a:	f022 0203 	bic.w	r2, r2, #3
 801090e:	3204      	adds	r2, #4
 8010910:	f104 0115 	add.w	r1, r4, #21
 8010914:	428f      	cmp	r7, r1
 8010916:	bf38      	it	cc
 8010918:	2204      	movcc	r2, #4
 801091a:	9201      	str	r2, [sp, #4]
 801091c:	9a02      	ldr	r2, [sp, #8]
 801091e:	9303      	str	r3, [sp, #12]
 8010920:	429a      	cmp	r2, r3
 8010922:	d80c      	bhi.n	801093e <__multiply+0x9e>
 8010924:	2e00      	cmp	r6, #0
 8010926:	dd03      	ble.n	8010930 <__multiply+0x90>
 8010928:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 801092c:	2b00      	cmp	r3, #0
 801092e:	d05a      	beq.n	80109e6 <__multiply+0x146>
 8010930:	6106      	str	r6, [r0, #16]
 8010932:	b005      	add	sp, #20
 8010934:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010938:	f843 2b04 	str.w	r2, [r3], #4
 801093c:	e7d8      	b.n	80108f0 <__multiply+0x50>
 801093e:	f8b3 a000 	ldrh.w	sl, [r3]
 8010942:	f1ba 0f00 	cmp.w	sl, #0
 8010946:	d024      	beq.n	8010992 <__multiply+0xf2>
 8010948:	f104 0e14 	add.w	lr, r4, #20
 801094c:	46a9      	mov	r9, r5
 801094e:	f04f 0c00 	mov.w	ip, #0
 8010952:	f85e 2b04 	ldr.w	r2, [lr], #4
 8010956:	f8d9 1000 	ldr.w	r1, [r9]
 801095a:	fa1f fb82 	uxth.w	fp, r2
 801095e:	b289      	uxth	r1, r1
 8010960:	fb0a 110b 	mla	r1, sl, fp, r1
 8010964:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8010968:	f8d9 2000 	ldr.w	r2, [r9]
 801096c:	4461      	add	r1, ip
 801096e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8010972:	fb0a c20b 	mla	r2, sl, fp, ip
 8010976:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 801097a:	b289      	uxth	r1, r1
 801097c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8010980:	4577      	cmp	r7, lr
 8010982:	f849 1b04 	str.w	r1, [r9], #4
 8010986:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801098a:	d8e2      	bhi.n	8010952 <__multiply+0xb2>
 801098c:	9a01      	ldr	r2, [sp, #4]
 801098e:	f845 c002 	str.w	ip, [r5, r2]
 8010992:	9a03      	ldr	r2, [sp, #12]
 8010994:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8010998:	3304      	adds	r3, #4
 801099a:	f1b9 0f00 	cmp.w	r9, #0
 801099e:	d020      	beq.n	80109e2 <__multiply+0x142>
 80109a0:	6829      	ldr	r1, [r5, #0]
 80109a2:	f104 0c14 	add.w	ip, r4, #20
 80109a6:	46ae      	mov	lr, r5
 80109a8:	f04f 0a00 	mov.w	sl, #0
 80109ac:	f8bc b000 	ldrh.w	fp, [ip]
 80109b0:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80109b4:	fb09 220b 	mla	r2, r9, fp, r2
 80109b8:	4492      	add	sl, r2
 80109ba:	b289      	uxth	r1, r1
 80109bc:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 80109c0:	f84e 1b04 	str.w	r1, [lr], #4
 80109c4:	f85c 2b04 	ldr.w	r2, [ip], #4
 80109c8:	f8be 1000 	ldrh.w	r1, [lr]
 80109cc:	0c12      	lsrs	r2, r2, #16
 80109ce:	fb09 1102 	mla	r1, r9, r2, r1
 80109d2:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 80109d6:	4567      	cmp	r7, ip
 80109d8:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80109dc:	d8e6      	bhi.n	80109ac <__multiply+0x10c>
 80109de:	9a01      	ldr	r2, [sp, #4]
 80109e0:	50a9      	str	r1, [r5, r2]
 80109e2:	3504      	adds	r5, #4
 80109e4:	e79a      	b.n	801091c <__multiply+0x7c>
 80109e6:	3e01      	subs	r6, #1
 80109e8:	e79c      	b.n	8010924 <__multiply+0x84>
 80109ea:	bf00      	nop
 80109ec:	080122e0 	.word	0x080122e0
 80109f0:	08012383 	.word	0x08012383

080109f4 <__pow5mult>:
 80109f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80109f8:	4615      	mov	r5, r2
 80109fa:	f012 0203 	ands.w	r2, r2, #3
 80109fe:	4606      	mov	r6, r0
 8010a00:	460f      	mov	r7, r1
 8010a02:	d007      	beq.n	8010a14 <__pow5mult+0x20>
 8010a04:	4c25      	ldr	r4, [pc, #148]	; (8010a9c <__pow5mult+0xa8>)
 8010a06:	3a01      	subs	r2, #1
 8010a08:	2300      	movs	r3, #0
 8010a0a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8010a0e:	f7ff fe51 	bl	80106b4 <__multadd>
 8010a12:	4607      	mov	r7, r0
 8010a14:	10ad      	asrs	r5, r5, #2
 8010a16:	d03d      	beq.n	8010a94 <__pow5mult+0xa0>
 8010a18:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8010a1a:	b97c      	cbnz	r4, 8010a3c <__pow5mult+0x48>
 8010a1c:	2010      	movs	r0, #16
 8010a1e:	f000 fb29 	bl	8011074 <malloc>
 8010a22:	4602      	mov	r2, r0
 8010a24:	6270      	str	r0, [r6, #36]	; 0x24
 8010a26:	b928      	cbnz	r0, 8010a34 <__pow5mult+0x40>
 8010a28:	4b1d      	ldr	r3, [pc, #116]	; (8010aa0 <__pow5mult+0xac>)
 8010a2a:	481e      	ldr	r0, [pc, #120]	; (8010aa4 <__pow5mult+0xb0>)
 8010a2c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8010a30:	f000 faf0 	bl	8011014 <__assert_func>
 8010a34:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8010a38:	6004      	str	r4, [r0, #0]
 8010a3a:	60c4      	str	r4, [r0, #12]
 8010a3c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8010a40:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8010a44:	b94c      	cbnz	r4, 8010a5a <__pow5mult+0x66>
 8010a46:	f240 2171 	movw	r1, #625	; 0x271
 8010a4a:	4630      	mov	r0, r6
 8010a4c:	f7ff ff12 	bl	8010874 <__i2b>
 8010a50:	2300      	movs	r3, #0
 8010a52:	f8c8 0008 	str.w	r0, [r8, #8]
 8010a56:	4604      	mov	r4, r0
 8010a58:	6003      	str	r3, [r0, #0]
 8010a5a:	f04f 0900 	mov.w	r9, #0
 8010a5e:	07eb      	lsls	r3, r5, #31
 8010a60:	d50a      	bpl.n	8010a78 <__pow5mult+0x84>
 8010a62:	4639      	mov	r1, r7
 8010a64:	4622      	mov	r2, r4
 8010a66:	4630      	mov	r0, r6
 8010a68:	f7ff ff1a 	bl	80108a0 <__multiply>
 8010a6c:	4639      	mov	r1, r7
 8010a6e:	4680      	mov	r8, r0
 8010a70:	4630      	mov	r0, r6
 8010a72:	f7ff fdfd 	bl	8010670 <_Bfree>
 8010a76:	4647      	mov	r7, r8
 8010a78:	106d      	asrs	r5, r5, #1
 8010a7a:	d00b      	beq.n	8010a94 <__pow5mult+0xa0>
 8010a7c:	6820      	ldr	r0, [r4, #0]
 8010a7e:	b938      	cbnz	r0, 8010a90 <__pow5mult+0x9c>
 8010a80:	4622      	mov	r2, r4
 8010a82:	4621      	mov	r1, r4
 8010a84:	4630      	mov	r0, r6
 8010a86:	f7ff ff0b 	bl	80108a0 <__multiply>
 8010a8a:	6020      	str	r0, [r4, #0]
 8010a8c:	f8c0 9000 	str.w	r9, [r0]
 8010a90:	4604      	mov	r4, r0
 8010a92:	e7e4      	b.n	8010a5e <__pow5mult+0x6a>
 8010a94:	4638      	mov	r0, r7
 8010a96:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010a9a:	bf00      	nop
 8010a9c:	080124d0 	.word	0x080124d0
 8010aa0:	0801236c 	.word	0x0801236c
 8010aa4:	08012383 	.word	0x08012383

08010aa8 <__lshift>:
 8010aa8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010aac:	460c      	mov	r4, r1
 8010aae:	6849      	ldr	r1, [r1, #4]
 8010ab0:	6923      	ldr	r3, [r4, #16]
 8010ab2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8010ab6:	68a3      	ldr	r3, [r4, #8]
 8010ab8:	4607      	mov	r7, r0
 8010aba:	4691      	mov	r9, r2
 8010abc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8010ac0:	f108 0601 	add.w	r6, r8, #1
 8010ac4:	42b3      	cmp	r3, r6
 8010ac6:	db0b      	blt.n	8010ae0 <__lshift+0x38>
 8010ac8:	4638      	mov	r0, r7
 8010aca:	f7ff fd91 	bl	80105f0 <_Balloc>
 8010ace:	4605      	mov	r5, r0
 8010ad0:	b948      	cbnz	r0, 8010ae6 <__lshift+0x3e>
 8010ad2:	4602      	mov	r2, r0
 8010ad4:	4b2a      	ldr	r3, [pc, #168]	; (8010b80 <__lshift+0xd8>)
 8010ad6:	482b      	ldr	r0, [pc, #172]	; (8010b84 <__lshift+0xdc>)
 8010ad8:	f240 11d9 	movw	r1, #473	; 0x1d9
 8010adc:	f000 fa9a 	bl	8011014 <__assert_func>
 8010ae0:	3101      	adds	r1, #1
 8010ae2:	005b      	lsls	r3, r3, #1
 8010ae4:	e7ee      	b.n	8010ac4 <__lshift+0x1c>
 8010ae6:	2300      	movs	r3, #0
 8010ae8:	f100 0114 	add.w	r1, r0, #20
 8010aec:	f100 0210 	add.w	r2, r0, #16
 8010af0:	4618      	mov	r0, r3
 8010af2:	4553      	cmp	r3, sl
 8010af4:	db37      	blt.n	8010b66 <__lshift+0xbe>
 8010af6:	6920      	ldr	r0, [r4, #16]
 8010af8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8010afc:	f104 0314 	add.w	r3, r4, #20
 8010b00:	f019 091f 	ands.w	r9, r9, #31
 8010b04:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8010b08:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8010b0c:	d02f      	beq.n	8010b6e <__lshift+0xc6>
 8010b0e:	f1c9 0e20 	rsb	lr, r9, #32
 8010b12:	468a      	mov	sl, r1
 8010b14:	f04f 0c00 	mov.w	ip, #0
 8010b18:	681a      	ldr	r2, [r3, #0]
 8010b1a:	fa02 f209 	lsl.w	r2, r2, r9
 8010b1e:	ea42 020c 	orr.w	r2, r2, ip
 8010b22:	f84a 2b04 	str.w	r2, [sl], #4
 8010b26:	f853 2b04 	ldr.w	r2, [r3], #4
 8010b2a:	4298      	cmp	r0, r3
 8010b2c:	fa22 fc0e 	lsr.w	ip, r2, lr
 8010b30:	d8f2      	bhi.n	8010b18 <__lshift+0x70>
 8010b32:	1b03      	subs	r3, r0, r4
 8010b34:	3b15      	subs	r3, #21
 8010b36:	f023 0303 	bic.w	r3, r3, #3
 8010b3a:	3304      	adds	r3, #4
 8010b3c:	f104 0215 	add.w	r2, r4, #21
 8010b40:	4290      	cmp	r0, r2
 8010b42:	bf38      	it	cc
 8010b44:	2304      	movcc	r3, #4
 8010b46:	f841 c003 	str.w	ip, [r1, r3]
 8010b4a:	f1bc 0f00 	cmp.w	ip, #0
 8010b4e:	d001      	beq.n	8010b54 <__lshift+0xac>
 8010b50:	f108 0602 	add.w	r6, r8, #2
 8010b54:	3e01      	subs	r6, #1
 8010b56:	4638      	mov	r0, r7
 8010b58:	612e      	str	r6, [r5, #16]
 8010b5a:	4621      	mov	r1, r4
 8010b5c:	f7ff fd88 	bl	8010670 <_Bfree>
 8010b60:	4628      	mov	r0, r5
 8010b62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010b66:	f842 0f04 	str.w	r0, [r2, #4]!
 8010b6a:	3301      	adds	r3, #1
 8010b6c:	e7c1      	b.n	8010af2 <__lshift+0x4a>
 8010b6e:	3904      	subs	r1, #4
 8010b70:	f853 2b04 	ldr.w	r2, [r3], #4
 8010b74:	f841 2f04 	str.w	r2, [r1, #4]!
 8010b78:	4298      	cmp	r0, r3
 8010b7a:	d8f9      	bhi.n	8010b70 <__lshift+0xc8>
 8010b7c:	e7ea      	b.n	8010b54 <__lshift+0xac>
 8010b7e:	bf00      	nop
 8010b80:	080122e0 	.word	0x080122e0
 8010b84:	08012383 	.word	0x08012383

08010b88 <__mcmp>:
 8010b88:	b530      	push	{r4, r5, lr}
 8010b8a:	6902      	ldr	r2, [r0, #16]
 8010b8c:	690c      	ldr	r4, [r1, #16]
 8010b8e:	1b12      	subs	r2, r2, r4
 8010b90:	d10e      	bne.n	8010bb0 <__mcmp+0x28>
 8010b92:	f100 0314 	add.w	r3, r0, #20
 8010b96:	3114      	adds	r1, #20
 8010b98:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8010b9c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8010ba0:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8010ba4:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8010ba8:	42a5      	cmp	r5, r4
 8010baa:	d003      	beq.n	8010bb4 <__mcmp+0x2c>
 8010bac:	d305      	bcc.n	8010bba <__mcmp+0x32>
 8010bae:	2201      	movs	r2, #1
 8010bb0:	4610      	mov	r0, r2
 8010bb2:	bd30      	pop	{r4, r5, pc}
 8010bb4:	4283      	cmp	r3, r0
 8010bb6:	d3f3      	bcc.n	8010ba0 <__mcmp+0x18>
 8010bb8:	e7fa      	b.n	8010bb0 <__mcmp+0x28>
 8010bba:	f04f 32ff 	mov.w	r2, #4294967295
 8010bbe:	e7f7      	b.n	8010bb0 <__mcmp+0x28>

08010bc0 <__mdiff>:
 8010bc0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010bc4:	460c      	mov	r4, r1
 8010bc6:	4606      	mov	r6, r0
 8010bc8:	4611      	mov	r1, r2
 8010bca:	4620      	mov	r0, r4
 8010bcc:	4690      	mov	r8, r2
 8010bce:	f7ff ffdb 	bl	8010b88 <__mcmp>
 8010bd2:	1e05      	subs	r5, r0, #0
 8010bd4:	d110      	bne.n	8010bf8 <__mdiff+0x38>
 8010bd6:	4629      	mov	r1, r5
 8010bd8:	4630      	mov	r0, r6
 8010bda:	f7ff fd09 	bl	80105f0 <_Balloc>
 8010bde:	b930      	cbnz	r0, 8010bee <__mdiff+0x2e>
 8010be0:	4b3a      	ldr	r3, [pc, #232]	; (8010ccc <__mdiff+0x10c>)
 8010be2:	4602      	mov	r2, r0
 8010be4:	f240 2132 	movw	r1, #562	; 0x232
 8010be8:	4839      	ldr	r0, [pc, #228]	; (8010cd0 <__mdiff+0x110>)
 8010bea:	f000 fa13 	bl	8011014 <__assert_func>
 8010bee:	2301      	movs	r3, #1
 8010bf0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8010bf4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010bf8:	bfa4      	itt	ge
 8010bfa:	4643      	movge	r3, r8
 8010bfc:	46a0      	movge	r8, r4
 8010bfe:	4630      	mov	r0, r6
 8010c00:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8010c04:	bfa6      	itte	ge
 8010c06:	461c      	movge	r4, r3
 8010c08:	2500      	movge	r5, #0
 8010c0a:	2501      	movlt	r5, #1
 8010c0c:	f7ff fcf0 	bl	80105f0 <_Balloc>
 8010c10:	b920      	cbnz	r0, 8010c1c <__mdiff+0x5c>
 8010c12:	4b2e      	ldr	r3, [pc, #184]	; (8010ccc <__mdiff+0x10c>)
 8010c14:	4602      	mov	r2, r0
 8010c16:	f44f 7110 	mov.w	r1, #576	; 0x240
 8010c1a:	e7e5      	b.n	8010be8 <__mdiff+0x28>
 8010c1c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8010c20:	6926      	ldr	r6, [r4, #16]
 8010c22:	60c5      	str	r5, [r0, #12]
 8010c24:	f104 0914 	add.w	r9, r4, #20
 8010c28:	f108 0514 	add.w	r5, r8, #20
 8010c2c:	f100 0e14 	add.w	lr, r0, #20
 8010c30:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8010c34:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8010c38:	f108 0210 	add.w	r2, r8, #16
 8010c3c:	46f2      	mov	sl, lr
 8010c3e:	2100      	movs	r1, #0
 8010c40:	f859 3b04 	ldr.w	r3, [r9], #4
 8010c44:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8010c48:	fa1f f883 	uxth.w	r8, r3
 8010c4c:	fa11 f18b 	uxtah	r1, r1, fp
 8010c50:	0c1b      	lsrs	r3, r3, #16
 8010c52:	eba1 0808 	sub.w	r8, r1, r8
 8010c56:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8010c5a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8010c5e:	fa1f f888 	uxth.w	r8, r8
 8010c62:	1419      	asrs	r1, r3, #16
 8010c64:	454e      	cmp	r6, r9
 8010c66:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8010c6a:	f84a 3b04 	str.w	r3, [sl], #4
 8010c6e:	d8e7      	bhi.n	8010c40 <__mdiff+0x80>
 8010c70:	1b33      	subs	r3, r6, r4
 8010c72:	3b15      	subs	r3, #21
 8010c74:	f023 0303 	bic.w	r3, r3, #3
 8010c78:	3304      	adds	r3, #4
 8010c7a:	3415      	adds	r4, #21
 8010c7c:	42a6      	cmp	r6, r4
 8010c7e:	bf38      	it	cc
 8010c80:	2304      	movcc	r3, #4
 8010c82:	441d      	add	r5, r3
 8010c84:	4473      	add	r3, lr
 8010c86:	469e      	mov	lr, r3
 8010c88:	462e      	mov	r6, r5
 8010c8a:	4566      	cmp	r6, ip
 8010c8c:	d30e      	bcc.n	8010cac <__mdiff+0xec>
 8010c8e:	f10c 0203 	add.w	r2, ip, #3
 8010c92:	1b52      	subs	r2, r2, r5
 8010c94:	f022 0203 	bic.w	r2, r2, #3
 8010c98:	3d03      	subs	r5, #3
 8010c9a:	45ac      	cmp	ip, r5
 8010c9c:	bf38      	it	cc
 8010c9e:	2200      	movcc	r2, #0
 8010ca0:	441a      	add	r2, r3
 8010ca2:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8010ca6:	b17b      	cbz	r3, 8010cc8 <__mdiff+0x108>
 8010ca8:	6107      	str	r7, [r0, #16]
 8010caa:	e7a3      	b.n	8010bf4 <__mdiff+0x34>
 8010cac:	f856 8b04 	ldr.w	r8, [r6], #4
 8010cb0:	fa11 f288 	uxtah	r2, r1, r8
 8010cb4:	1414      	asrs	r4, r2, #16
 8010cb6:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8010cba:	b292      	uxth	r2, r2
 8010cbc:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8010cc0:	f84e 2b04 	str.w	r2, [lr], #4
 8010cc4:	1421      	asrs	r1, r4, #16
 8010cc6:	e7e0      	b.n	8010c8a <__mdiff+0xca>
 8010cc8:	3f01      	subs	r7, #1
 8010cca:	e7ea      	b.n	8010ca2 <__mdiff+0xe2>
 8010ccc:	080122e0 	.word	0x080122e0
 8010cd0:	08012383 	.word	0x08012383

08010cd4 <__ulp>:
 8010cd4:	b082      	sub	sp, #8
 8010cd6:	ed8d 0b00 	vstr	d0, [sp]
 8010cda:	9b01      	ldr	r3, [sp, #4]
 8010cdc:	4912      	ldr	r1, [pc, #72]	; (8010d28 <__ulp+0x54>)
 8010cde:	4019      	ands	r1, r3
 8010ce0:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 8010ce4:	2900      	cmp	r1, #0
 8010ce6:	dd05      	ble.n	8010cf4 <__ulp+0x20>
 8010ce8:	2200      	movs	r2, #0
 8010cea:	460b      	mov	r3, r1
 8010cec:	ec43 2b10 	vmov	d0, r2, r3
 8010cf0:	b002      	add	sp, #8
 8010cf2:	4770      	bx	lr
 8010cf4:	4249      	negs	r1, r1
 8010cf6:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 8010cfa:	ea4f 5021 	mov.w	r0, r1, asr #20
 8010cfe:	f04f 0200 	mov.w	r2, #0
 8010d02:	f04f 0300 	mov.w	r3, #0
 8010d06:	da04      	bge.n	8010d12 <__ulp+0x3e>
 8010d08:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8010d0c:	fa41 f300 	asr.w	r3, r1, r0
 8010d10:	e7ec      	b.n	8010cec <__ulp+0x18>
 8010d12:	f1a0 0114 	sub.w	r1, r0, #20
 8010d16:	291e      	cmp	r1, #30
 8010d18:	bfda      	itte	le
 8010d1a:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 8010d1e:	fa20 f101 	lsrle.w	r1, r0, r1
 8010d22:	2101      	movgt	r1, #1
 8010d24:	460a      	mov	r2, r1
 8010d26:	e7e1      	b.n	8010cec <__ulp+0x18>
 8010d28:	7ff00000 	.word	0x7ff00000

08010d2c <__b2d>:
 8010d2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010d2e:	6905      	ldr	r5, [r0, #16]
 8010d30:	f100 0714 	add.w	r7, r0, #20
 8010d34:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8010d38:	1f2e      	subs	r6, r5, #4
 8010d3a:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8010d3e:	4620      	mov	r0, r4
 8010d40:	f7ff fd48 	bl	80107d4 <__hi0bits>
 8010d44:	f1c0 0320 	rsb	r3, r0, #32
 8010d48:	280a      	cmp	r0, #10
 8010d4a:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8010dc8 <__b2d+0x9c>
 8010d4e:	600b      	str	r3, [r1, #0]
 8010d50:	dc14      	bgt.n	8010d7c <__b2d+0x50>
 8010d52:	f1c0 0e0b 	rsb	lr, r0, #11
 8010d56:	fa24 f10e 	lsr.w	r1, r4, lr
 8010d5a:	42b7      	cmp	r7, r6
 8010d5c:	ea41 030c 	orr.w	r3, r1, ip
 8010d60:	bf34      	ite	cc
 8010d62:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8010d66:	2100      	movcs	r1, #0
 8010d68:	3015      	adds	r0, #21
 8010d6a:	fa04 f000 	lsl.w	r0, r4, r0
 8010d6e:	fa21 f10e 	lsr.w	r1, r1, lr
 8010d72:	ea40 0201 	orr.w	r2, r0, r1
 8010d76:	ec43 2b10 	vmov	d0, r2, r3
 8010d7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010d7c:	42b7      	cmp	r7, r6
 8010d7e:	bf3a      	itte	cc
 8010d80:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8010d84:	f1a5 0608 	subcc.w	r6, r5, #8
 8010d88:	2100      	movcs	r1, #0
 8010d8a:	380b      	subs	r0, #11
 8010d8c:	d017      	beq.n	8010dbe <__b2d+0x92>
 8010d8e:	f1c0 0c20 	rsb	ip, r0, #32
 8010d92:	fa04 f500 	lsl.w	r5, r4, r0
 8010d96:	42be      	cmp	r6, r7
 8010d98:	fa21 f40c 	lsr.w	r4, r1, ip
 8010d9c:	ea45 0504 	orr.w	r5, r5, r4
 8010da0:	bf8c      	ite	hi
 8010da2:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8010da6:	2400      	movls	r4, #0
 8010da8:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 8010dac:	fa01 f000 	lsl.w	r0, r1, r0
 8010db0:	fa24 f40c 	lsr.w	r4, r4, ip
 8010db4:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8010db8:	ea40 0204 	orr.w	r2, r0, r4
 8010dbc:	e7db      	b.n	8010d76 <__b2d+0x4a>
 8010dbe:	ea44 030c 	orr.w	r3, r4, ip
 8010dc2:	460a      	mov	r2, r1
 8010dc4:	e7d7      	b.n	8010d76 <__b2d+0x4a>
 8010dc6:	bf00      	nop
 8010dc8:	3ff00000 	.word	0x3ff00000

08010dcc <__d2b>:
 8010dcc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8010dd0:	4689      	mov	r9, r1
 8010dd2:	2101      	movs	r1, #1
 8010dd4:	ec57 6b10 	vmov	r6, r7, d0
 8010dd8:	4690      	mov	r8, r2
 8010dda:	f7ff fc09 	bl	80105f0 <_Balloc>
 8010dde:	4604      	mov	r4, r0
 8010de0:	b930      	cbnz	r0, 8010df0 <__d2b+0x24>
 8010de2:	4602      	mov	r2, r0
 8010de4:	4b25      	ldr	r3, [pc, #148]	; (8010e7c <__d2b+0xb0>)
 8010de6:	4826      	ldr	r0, [pc, #152]	; (8010e80 <__d2b+0xb4>)
 8010de8:	f240 310a 	movw	r1, #778	; 0x30a
 8010dec:	f000 f912 	bl	8011014 <__assert_func>
 8010df0:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8010df4:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8010df8:	bb35      	cbnz	r5, 8010e48 <__d2b+0x7c>
 8010dfa:	2e00      	cmp	r6, #0
 8010dfc:	9301      	str	r3, [sp, #4]
 8010dfe:	d028      	beq.n	8010e52 <__d2b+0x86>
 8010e00:	4668      	mov	r0, sp
 8010e02:	9600      	str	r6, [sp, #0]
 8010e04:	f7ff fd06 	bl	8010814 <__lo0bits>
 8010e08:	9900      	ldr	r1, [sp, #0]
 8010e0a:	b300      	cbz	r0, 8010e4e <__d2b+0x82>
 8010e0c:	9a01      	ldr	r2, [sp, #4]
 8010e0e:	f1c0 0320 	rsb	r3, r0, #32
 8010e12:	fa02 f303 	lsl.w	r3, r2, r3
 8010e16:	430b      	orrs	r3, r1
 8010e18:	40c2      	lsrs	r2, r0
 8010e1a:	6163      	str	r3, [r4, #20]
 8010e1c:	9201      	str	r2, [sp, #4]
 8010e1e:	9b01      	ldr	r3, [sp, #4]
 8010e20:	61a3      	str	r3, [r4, #24]
 8010e22:	2b00      	cmp	r3, #0
 8010e24:	bf14      	ite	ne
 8010e26:	2202      	movne	r2, #2
 8010e28:	2201      	moveq	r2, #1
 8010e2a:	6122      	str	r2, [r4, #16]
 8010e2c:	b1d5      	cbz	r5, 8010e64 <__d2b+0x98>
 8010e2e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8010e32:	4405      	add	r5, r0
 8010e34:	f8c9 5000 	str.w	r5, [r9]
 8010e38:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8010e3c:	f8c8 0000 	str.w	r0, [r8]
 8010e40:	4620      	mov	r0, r4
 8010e42:	b003      	add	sp, #12
 8010e44:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010e48:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8010e4c:	e7d5      	b.n	8010dfa <__d2b+0x2e>
 8010e4e:	6161      	str	r1, [r4, #20]
 8010e50:	e7e5      	b.n	8010e1e <__d2b+0x52>
 8010e52:	a801      	add	r0, sp, #4
 8010e54:	f7ff fcde 	bl	8010814 <__lo0bits>
 8010e58:	9b01      	ldr	r3, [sp, #4]
 8010e5a:	6163      	str	r3, [r4, #20]
 8010e5c:	2201      	movs	r2, #1
 8010e5e:	6122      	str	r2, [r4, #16]
 8010e60:	3020      	adds	r0, #32
 8010e62:	e7e3      	b.n	8010e2c <__d2b+0x60>
 8010e64:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8010e68:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8010e6c:	f8c9 0000 	str.w	r0, [r9]
 8010e70:	6918      	ldr	r0, [r3, #16]
 8010e72:	f7ff fcaf 	bl	80107d4 <__hi0bits>
 8010e76:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8010e7a:	e7df      	b.n	8010e3c <__d2b+0x70>
 8010e7c:	080122e0 	.word	0x080122e0
 8010e80:	08012383 	.word	0x08012383

08010e84 <__ratio>:
 8010e84:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010e88:	4688      	mov	r8, r1
 8010e8a:	4669      	mov	r1, sp
 8010e8c:	4681      	mov	r9, r0
 8010e8e:	f7ff ff4d 	bl	8010d2c <__b2d>
 8010e92:	a901      	add	r1, sp, #4
 8010e94:	4640      	mov	r0, r8
 8010e96:	ec55 4b10 	vmov	r4, r5, d0
 8010e9a:	ee10 aa10 	vmov	sl, s0
 8010e9e:	f7ff ff45 	bl	8010d2c <__b2d>
 8010ea2:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8010ea6:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8010eaa:	1a59      	subs	r1, r3, r1
 8010eac:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010eb0:	1ad3      	subs	r3, r2, r3
 8010eb2:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8010eb6:	ec57 6b10 	vmov	r6, r7, d0
 8010eba:	2b00      	cmp	r3, #0
 8010ebc:	bfd6      	itet	le
 8010ebe:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8010ec2:	462a      	movgt	r2, r5
 8010ec4:	463a      	movle	r2, r7
 8010ec6:	46ab      	mov	fp, r5
 8010ec8:	bfd6      	itet	le
 8010eca:	eb02 5303 	addle.w	r3, r2, r3, lsl #20
 8010ece:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 8010ed2:	ee00 3a90 	vmovle	s1, r3
 8010ed6:	ec4b ab17 	vmov	d7, sl, fp
 8010eda:	ee87 0b00 	vdiv.f64	d0, d7, d0
 8010ede:	b003      	add	sp, #12
 8010ee0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08010ee4 <__copybits>:
 8010ee4:	3901      	subs	r1, #1
 8010ee6:	b570      	push	{r4, r5, r6, lr}
 8010ee8:	1149      	asrs	r1, r1, #5
 8010eea:	6914      	ldr	r4, [r2, #16]
 8010eec:	3101      	adds	r1, #1
 8010eee:	f102 0314 	add.w	r3, r2, #20
 8010ef2:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8010ef6:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8010efa:	1f05      	subs	r5, r0, #4
 8010efc:	42a3      	cmp	r3, r4
 8010efe:	d30c      	bcc.n	8010f1a <__copybits+0x36>
 8010f00:	1aa3      	subs	r3, r4, r2
 8010f02:	3b11      	subs	r3, #17
 8010f04:	f023 0303 	bic.w	r3, r3, #3
 8010f08:	3211      	adds	r2, #17
 8010f0a:	42a2      	cmp	r2, r4
 8010f0c:	bf88      	it	hi
 8010f0e:	2300      	movhi	r3, #0
 8010f10:	4418      	add	r0, r3
 8010f12:	2300      	movs	r3, #0
 8010f14:	4288      	cmp	r0, r1
 8010f16:	d305      	bcc.n	8010f24 <__copybits+0x40>
 8010f18:	bd70      	pop	{r4, r5, r6, pc}
 8010f1a:	f853 6b04 	ldr.w	r6, [r3], #4
 8010f1e:	f845 6f04 	str.w	r6, [r5, #4]!
 8010f22:	e7eb      	b.n	8010efc <__copybits+0x18>
 8010f24:	f840 3b04 	str.w	r3, [r0], #4
 8010f28:	e7f4      	b.n	8010f14 <__copybits+0x30>

08010f2a <__any_on>:
 8010f2a:	f100 0214 	add.w	r2, r0, #20
 8010f2e:	6900      	ldr	r0, [r0, #16]
 8010f30:	114b      	asrs	r3, r1, #5
 8010f32:	4298      	cmp	r0, r3
 8010f34:	b510      	push	{r4, lr}
 8010f36:	db11      	blt.n	8010f5c <__any_on+0x32>
 8010f38:	dd0a      	ble.n	8010f50 <__any_on+0x26>
 8010f3a:	f011 011f 	ands.w	r1, r1, #31
 8010f3e:	d007      	beq.n	8010f50 <__any_on+0x26>
 8010f40:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8010f44:	fa24 f001 	lsr.w	r0, r4, r1
 8010f48:	fa00 f101 	lsl.w	r1, r0, r1
 8010f4c:	428c      	cmp	r4, r1
 8010f4e:	d10b      	bne.n	8010f68 <__any_on+0x3e>
 8010f50:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8010f54:	4293      	cmp	r3, r2
 8010f56:	d803      	bhi.n	8010f60 <__any_on+0x36>
 8010f58:	2000      	movs	r0, #0
 8010f5a:	bd10      	pop	{r4, pc}
 8010f5c:	4603      	mov	r3, r0
 8010f5e:	e7f7      	b.n	8010f50 <__any_on+0x26>
 8010f60:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8010f64:	2900      	cmp	r1, #0
 8010f66:	d0f5      	beq.n	8010f54 <__any_on+0x2a>
 8010f68:	2001      	movs	r0, #1
 8010f6a:	e7f6      	b.n	8010f5a <__any_on+0x30>

08010f6c <_calloc_r>:
 8010f6c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8010f6e:	fba1 2402 	umull	r2, r4, r1, r2
 8010f72:	b94c      	cbnz	r4, 8010f88 <_calloc_r+0x1c>
 8010f74:	4611      	mov	r1, r2
 8010f76:	9201      	str	r2, [sp, #4]
 8010f78:	f7fd ffd6 	bl	800ef28 <_malloc_r>
 8010f7c:	9a01      	ldr	r2, [sp, #4]
 8010f7e:	4605      	mov	r5, r0
 8010f80:	b930      	cbnz	r0, 8010f90 <_calloc_r+0x24>
 8010f82:	4628      	mov	r0, r5
 8010f84:	b003      	add	sp, #12
 8010f86:	bd30      	pop	{r4, r5, pc}
 8010f88:	220c      	movs	r2, #12
 8010f8a:	6002      	str	r2, [r0, #0]
 8010f8c:	2500      	movs	r5, #0
 8010f8e:	e7f8      	b.n	8010f82 <_calloc_r+0x16>
 8010f90:	4621      	mov	r1, r4
 8010f92:	f7fd ff55 	bl	800ee40 <memset>
 8010f96:	e7f4      	b.n	8010f82 <_calloc_r+0x16>

08010f98 <_read_r>:
 8010f98:	b538      	push	{r3, r4, r5, lr}
 8010f9a:	4d07      	ldr	r5, [pc, #28]	; (8010fb8 <_read_r+0x20>)
 8010f9c:	4604      	mov	r4, r0
 8010f9e:	4608      	mov	r0, r1
 8010fa0:	4611      	mov	r1, r2
 8010fa2:	2200      	movs	r2, #0
 8010fa4:	602a      	str	r2, [r5, #0]
 8010fa6:	461a      	mov	r2, r3
 8010fa8:	f7f2 fdb2 	bl	8003b10 <_read>
 8010fac:	1c43      	adds	r3, r0, #1
 8010fae:	d102      	bne.n	8010fb6 <_read_r+0x1e>
 8010fb0:	682b      	ldr	r3, [r5, #0]
 8010fb2:	b103      	cbz	r3, 8010fb6 <_read_r+0x1e>
 8010fb4:	6023      	str	r3, [r4, #0]
 8010fb6:	bd38      	pop	{r3, r4, r5, pc}
 8010fb8:	24000aa0 	.word	0x24000aa0
 8010fbc:	00000000 	.word	0x00000000

08010fc0 <nan>:
 8010fc0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8010fc8 <nan+0x8>
 8010fc4:	4770      	bx	lr
 8010fc6:	bf00      	nop
 8010fc8:	00000000 	.word	0x00000000
 8010fcc:	7ff80000 	.word	0x7ff80000

08010fd0 <strncmp>:
 8010fd0:	b510      	push	{r4, lr}
 8010fd2:	b17a      	cbz	r2, 8010ff4 <strncmp+0x24>
 8010fd4:	4603      	mov	r3, r0
 8010fd6:	3901      	subs	r1, #1
 8010fd8:	1884      	adds	r4, r0, r2
 8010fda:	f813 0b01 	ldrb.w	r0, [r3], #1
 8010fde:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8010fe2:	4290      	cmp	r0, r2
 8010fe4:	d101      	bne.n	8010fea <strncmp+0x1a>
 8010fe6:	42a3      	cmp	r3, r4
 8010fe8:	d101      	bne.n	8010fee <strncmp+0x1e>
 8010fea:	1a80      	subs	r0, r0, r2
 8010fec:	bd10      	pop	{r4, pc}
 8010fee:	2800      	cmp	r0, #0
 8010ff0:	d1f3      	bne.n	8010fda <strncmp+0xa>
 8010ff2:	e7fa      	b.n	8010fea <strncmp+0x1a>
 8010ff4:	4610      	mov	r0, r2
 8010ff6:	e7f9      	b.n	8010fec <strncmp+0x1c>

08010ff8 <__ascii_wctomb>:
 8010ff8:	b149      	cbz	r1, 801100e <__ascii_wctomb+0x16>
 8010ffa:	2aff      	cmp	r2, #255	; 0xff
 8010ffc:	bf85      	ittet	hi
 8010ffe:	238a      	movhi	r3, #138	; 0x8a
 8011000:	6003      	strhi	r3, [r0, #0]
 8011002:	700a      	strbls	r2, [r1, #0]
 8011004:	f04f 30ff 	movhi.w	r0, #4294967295
 8011008:	bf98      	it	ls
 801100a:	2001      	movls	r0, #1
 801100c:	4770      	bx	lr
 801100e:	4608      	mov	r0, r1
 8011010:	4770      	bx	lr
	...

08011014 <__assert_func>:
 8011014:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8011016:	4614      	mov	r4, r2
 8011018:	461a      	mov	r2, r3
 801101a:	4b09      	ldr	r3, [pc, #36]	; (8011040 <__assert_func+0x2c>)
 801101c:	681b      	ldr	r3, [r3, #0]
 801101e:	4605      	mov	r5, r0
 8011020:	68d8      	ldr	r0, [r3, #12]
 8011022:	b14c      	cbz	r4, 8011038 <__assert_func+0x24>
 8011024:	4b07      	ldr	r3, [pc, #28]	; (8011044 <__assert_func+0x30>)
 8011026:	9100      	str	r1, [sp, #0]
 8011028:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801102c:	4906      	ldr	r1, [pc, #24]	; (8011048 <__assert_func+0x34>)
 801102e:	462b      	mov	r3, r5
 8011030:	f000 f80e 	bl	8011050 <fiprintf>
 8011034:	f000 fbd4 	bl	80117e0 <abort>
 8011038:	4b04      	ldr	r3, [pc, #16]	; (801104c <__assert_func+0x38>)
 801103a:	461c      	mov	r4, r3
 801103c:	e7f3      	b.n	8011026 <__assert_func+0x12>
 801103e:	bf00      	nop
 8011040:	24000088 	.word	0x24000088
 8011044:	080124dc 	.word	0x080124dc
 8011048:	080124e9 	.word	0x080124e9
 801104c:	08012517 	.word	0x08012517

08011050 <fiprintf>:
 8011050:	b40e      	push	{r1, r2, r3}
 8011052:	b503      	push	{r0, r1, lr}
 8011054:	4601      	mov	r1, r0
 8011056:	ab03      	add	r3, sp, #12
 8011058:	4805      	ldr	r0, [pc, #20]	; (8011070 <fiprintf+0x20>)
 801105a:	f853 2b04 	ldr.w	r2, [r3], #4
 801105e:	6800      	ldr	r0, [r0, #0]
 8011060:	9301      	str	r3, [sp, #4]
 8011062:	f000 f839 	bl	80110d8 <_vfiprintf_r>
 8011066:	b002      	add	sp, #8
 8011068:	f85d eb04 	ldr.w	lr, [sp], #4
 801106c:	b003      	add	sp, #12
 801106e:	4770      	bx	lr
 8011070:	24000088 	.word	0x24000088

08011074 <malloc>:
 8011074:	4b02      	ldr	r3, [pc, #8]	; (8011080 <malloc+0xc>)
 8011076:	4601      	mov	r1, r0
 8011078:	6818      	ldr	r0, [r3, #0]
 801107a:	f7fd bf55 	b.w	800ef28 <_malloc_r>
 801107e:	bf00      	nop
 8011080:	24000088 	.word	0x24000088

08011084 <__sfputc_r>:
 8011084:	6893      	ldr	r3, [r2, #8]
 8011086:	3b01      	subs	r3, #1
 8011088:	2b00      	cmp	r3, #0
 801108a:	b410      	push	{r4}
 801108c:	6093      	str	r3, [r2, #8]
 801108e:	da08      	bge.n	80110a2 <__sfputc_r+0x1e>
 8011090:	6994      	ldr	r4, [r2, #24]
 8011092:	42a3      	cmp	r3, r4
 8011094:	db01      	blt.n	801109a <__sfputc_r+0x16>
 8011096:	290a      	cmp	r1, #10
 8011098:	d103      	bne.n	80110a2 <__sfputc_r+0x1e>
 801109a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801109e:	f000 badf 	b.w	8011660 <__swbuf_r>
 80110a2:	6813      	ldr	r3, [r2, #0]
 80110a4:	1c58      	adds	r0, r3, #1
 80110a6:	6010      	str	r0, [r2, #0]
 80110a8:	7019      	strb	r1, [r3, #0]
 80110aa:	4608      	mov	r0, r1
 80110ac:	f85d 4b04 	ldr.w	r4, [sp], #4
 80110b0:	4770      	bx	lr

080110b2 <__sfputs_r>:
 80110b2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80110b4:	4606      	mov	r6, r0
 80110b6:	460f      	mov	r7, r1
 80110b8:	4614      	mov	r4, r2
 80110ba:	18d5      	adds	r5, r2, r3
 80110bc:	42ac      	cmp	r4, r5
 80110be:	d101      	bne.n	80110c4 <__sfputs_r+0x12>
 80110c0:	2000      	movs	r0, #0
 80110c2:	e007      	b.n	80110d4 <__sfputs_r+0x22>
 80110c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80110c8:	463a      	mov	r2, r7
 80110ca:	4630      	mov	r0, r6
 80110cc:	f7ff ffda 	bl	8011084 <__sfputc_r>
 80110d0:	1c43      	adds	r3, r0, #1
 80110d2:	d1f3      	bne.n	80110bc <__sfputs_r+0xa>
 80110d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080110d8 <_vfiprintf_r>:
 80110d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80110dc:	460d      	mov	r5, r1
 80110de:	b09d      	sub	sp, #116	; 0x74
 80110e0:	4614      	mov	r4, r2
 80110e2:	4698      	mov	r8, r3
 80110e4:	4606      	mov	r6, r0
 80110e6:	b118      	cbz	r0, 80110f0 <_vfiprintf_r+0x18>
 80110e8:	6983      	ldr	r3, [r0, #24]
 80110ea:	b90b      	cbnz	r3, 80110f0 <_vfiprintf_r+0x18>
 80110ec:	f7fd fc40 	bl	800e970 <__sinit>
 80110f0:	4b89      	ldr	r3, [pc, #548]	; (8011318 <_vfiprintf_r+0x240>)
 80110f2:	429d      	cmp	r5, r3
 80110f4:	d11b      	bne.n	801112e <_vfiprintf_r+0x56>
 80110f6:	6875      	ldr	r5, [r6, #4]
 80110f8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80110fa:	07d9      	lsls	r1, r3, #31
 80110fc:	d405      	bmi.n	801110a <_vfiprintf_r+0x32>
 80110fe:	89ab      	ldrh	r3, [r5, #12]
 8011100:	059a      	lsls	r2, r3, #22
 8011102:	d402      	bmi.n	801110a <_vfiprintf_r+0x32>
 8011104:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8011106:	f7fd fe25 	bl	800ed54 <__retarget_lock_acquire_recursive>
 801110a:	89ab      	ldrh	r3, [r5, #12]
 801110c:	071b      	lsls	r3, r3, #28
 801110e:	d501      	bpl.n	8011114 <_vfiprintf_r+0x3c>
 8011110:	692b      	ldr	r3, [r5, #16]
 8011112:	b9eb      	cbnz	r3, 8011150 <_vfiprintf_r+0x78>
 8011114:	4629      	mov	r1, r5
 8011116:	4630      	mov	r0, r6
 8011118:	f000 faf4 	bl	8011704 <__swsetup_r>
 801111c:	b1c0      	cbz	r0, 8011150 <_vfiprintf_r+0x78>
 801111e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8011120:	07dc      	lsls	r4, r3, #31
 8011122:	d50e      	bpl.n	8011142 <_vfiprintf_r+0x6a>
 8011124:	f04f 30ff 	mov.w	r0, #4294967295
 8011128:	b01d      	add	sp, #116	; 0x74
 801112a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801112e:	4b7b      	ldr	r3, [pc, #492]	; (801131c <_vfiprintf_r+0x244>)
 8011130:	429d      	cmp	r5, r3
 8011132:	d101      	bne.n	8011138 <_vfiprintf_r+0x60>
 8011134:	68b5      	ldr	r5, [r6, #8]
 8011136:	e7df      	b.n	80110f8 <_vfiprintf_r+0x20>
 8011138:	4b79      	ldr	r3, [pc, #484]	; (8011320 <_vfiprintf_r+0x248>)
 801113a:	429d      	cmp	r5, r3
 801113c:	bf08      	it	eq
 801113e:	68f5      	ldreq	r5, [r6, #12]
 8011140:	e7da      	b.n	80110f8 <_vfiprintf_r+0x20>
 8011142:	89ab      	ldrh	r3, [r5, #12]
 8011144:	0598      	lsls	r0, r3, #22
 8011146:	d4ed      	bmi.n	8011124 <_vfiprintf_r+0x4c>
 8011148:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801114a:	f7fd fe04 	bl	800ed56 <__retarget_lock_release_recursive>
 801114e:	e7e9      	b.n	8011124 <_vfiprintf_r+0x4c>
 8011150:	2300      	movs	r3, #0
 8011152:	9309      	str	r3, [sp, #36]	; 0x24
 8011154:	2320      	movs	r3, #32
 8011156:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801115a:	f8cd 800c 	str.w	r8, [sp, #12]
 801115e:	2330      	movs	r3, #48	; 0x30
 8011160:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8011324 <_vfiprintf_r+0x24c>
 8011164:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8011168:	f04f 0901 	mov.w	r9, #1
 801116c:	4623      	mov	r3, r4
 801116e:	469a      	mov	sl, r3
 8011170:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011174:	b10a      	cbz	r2, 801117a <_vfiprintf_r+0xa2>
 8011176:	2a25      	cmp	r2, #37	; 0x25
 8011178:	d1f9      	bne.n	801116e <_vfiprintf_r+0x96>
 801117a:	ebba 0b04 	subs.w	fp, sl, r4
 801117e:	d00b      	beq.n	8011198 <_vfiprintf_r+0xc0>
 8011180:	465b      	mov	r3, fp
 8011182:	4622      	mov	r2, r4
 8011184:	4629      	mov	r1, r5
 8011186:	4630      	mov	r0, r6
 8011188:	f7ff ff93 	bl	80110b2 <__sfputs_r>
 801118c:	3001      	adds	r0, #1
 801118e:	f000 80aa 	beq.w	80112e6 <_vfiprintf_r+0x20e>
 8011192:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011194:	445a      	add	r2, fp
 8011196:	9209      	str	r2, [sp, #36]	; 0x24
 8011198:	f89a 3000 	ldrb.w	r3, [sl]
 801119c:	2b00      	cmp	r3, #0
 801119e:	f000 80a2 	beq.w	80112e6 <_vfiprintf_r+0x20e>
 80111a2:	2300      	movs	r3, #0
 80111a4:	f04f 32ff 	mov.w	r2, #4294967295
 80111a8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80111ac:	f10a 0a01 	add.w	sl, sl, #1
 80111b0:	9304      	str	r3, [sp, #16]
 80111b2:	9307      	str	r3, [sp, #28]
 80111b4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80111b8:	931a      	str	r3, [sp, #104]	; 0x68
 80111ba:	4654      	mov	r4, sl
 80111bc:	2205      	movs	r2, #5
 80111be:	f814 1b01 	ldrb.w	r1, [r4], #1
 80111c2:	4858      	ldr	r0, [pc, #352]	; (8011324 <_vfiprintf_r+0x24c>)
 80111c4:	f7ef f88c 	bl	80002e0 <memchr>
 80111c8:	9a04      	ldr	r2, [sp, #16]
 80111ca:	b9d8      	cbnz	r0, 8011204 <_vfiprintf_r+0x12c>
 80111cc:	06d1      	lsls	r1, r2, #27
 80111ce:	bf44      	itt	mi
 80111d0:	2320      	movmi	r3, #32
 80111d2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80111d6:	0713      	lsls	r3, r2, #28
 80111d8:	bf44      	itt	mi
 80111da:	232b      	movmi	r3, #43	; 0x2b
 80111dc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80111e0:	f89a 3000 	ldrb.w	r3, [sl]
 80111e4:	2b2a      	cmp	r3, #42	; 0x2a
 80111e6:	d015      	beq.n	8011214 <_vfiprintf_r+0x13c>
 80111e8:	9a07      	ldr	r2, [sp, #28]
 80111ea:	4654      	mov	r4, sl
 80111ec:	2000      	movs	r0, #0
 80111ee:	f04f 0c0a 	mov.w	ip, #10
 80111f2:	4621      	mov	r1, r4
 80111f4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80111f8:	3b30      	subs	r3, #48	; 0x30
 80111fa:	2b09      	cmp	r3, #9
 80111fc:	d94e      	bls.n	801129c <_vfiprintf_r+0x1c4>
 80111fe:	b1b0      	cbz	r0, 801122e <_vfiprintf_r+0x156>
 8011200:	9207      	str	r2, [sp, #28]
 8011202:	e014      	b.n	801122e <_vfiprintf_r+0x156>
 8011204:	eba0 0308 	sub.w	r3, r0, r8
 8011208:	fa09 f303 	lsl.w	r3, r9, r3
 801120c:	4313      	orrs	r3, r2
 801120e:	9304      	str	r3, [sp, #16]
 8011210:	46a2      	mov	sl, r4
 8011212:	e7d2      	b.n	80111ba <_vfiprintf_r+0xe2>
 8011214:	9b03      	ldr	r3, [sp, #12]
 8011216:	1d19      	adds	r1, r3, #4
 8011218:	681b      	ldr	r3, [r3, #0]
 801121a:	9103      	str	r1, [sp, #12]
 801121c:	2b00      	cmp	r3, #0
 801121e:	bfbb      	ittet	lt
 8011220:	425b      	neglt	r3, r3
 8011222:	f042 0202 	orrlt.w	r2, r2, #2
 8011226:	9307      	strge	r3, [sp, #28]
 8011228:	9307      	strlt	r3, [sp, #28]
 801122a:	bfb8      	it	lt
 801122c:	9204      	strlt	r2, [sp, #16]
 801122e:	7823      	ldrb	r3, [r4, #0]
 8011230:	2b2e      	cmp	r3, #46	; 0x2e
 8011232:	d10c      	bne.n	801124e <_vfiprintf_r+0x176>
 8011234:	7863      	ldrb	r3, [r4, #1]
 8011236:	2b2a      	cmp	r3, #42	; 0x2a
 8011238:	d135      	bne.n	80112a6 <_vfiprintf_r+0x1ce>
 801123a:	9b03      	ldr	r3, [sp, #12]
 801123c:	1d1a      	adds	r2, r3, #4
 801123e:	681b      	ldr	r3, [r3, #0]
 8011240:	9203      	str	r2, [sp, #12]
 8011242:	2b00      	cmp	r3, #0
 8011244:	bfb8      	it	lt
 8011246:	f04f 33ff 	movlt.w	r3, #4294967295
 801124a:	3402      	adds	r4, #2
 801124c:	9305      	str	r3, [sp, #20]
 801124e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8011334 <_vfiprintf_r+0x25c>
 8011252:	7821      	ldrb	r1, [r4, #0]
 8011254:	2203      	movs	r2, #3
 8011256:	4650      	mov	r0, sl
 8011258:	f7ef f842 	bl	80002e0 <memchr>
 801125c:	b140      	cbz	r0, 8011270 <_vfiprintf_r+0x198>
 801125e:	2340      	movs	r3, #64	; 0x40
 8011260:	eba0 000a 	sub.w	r0, r0, sl
 8011264:	fa03 f000 	lsl.w	r0, r3, r0
 8011268:	9b04      	ldr	r3, [sp, #16]
 801126a:	4303      	orrs	r3, r0
 801126c:	3401      	adds	r4, #1
 801126e:	9304      	str	r3, [sp, #16]
 8011270:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011274:	482c      	ldr	r0, [pc, #176]	; (8011328 <_vfiprintf_r+0x250>)
 8011276:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801127a:	2206      	movs	r2, #6
 801127c:	f7ef f830 	bl	80002e0 <memchr>
 8011280:	2800      	cmp	r0, #0
 8011282:	d03f      	beq.n	8011304 <_vfiprintf_r+0x22c>
 8011284:	4b29      	ldr	r3, [pc, #164]	; (801132c <_vfiprintf_r+0x254>)
 8011286:	bb1b      	cbnz	r3, 80112d0 <_vfiprintf_r+0x1f8>
 8011288:	9b03      	ldr	r3, [sp, #12]
 801128a:	3307      	adds	r3, #7
 801128c:	f023 0307 	bic.w	r3, r3, #7
 8011290:	3308      	adds	r3, #8
 8011292:	9303      	str	r3, [sp, #12]
 8011294:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011296:	443b      	add	r3, r7
 8011298:	9309      	str	r3, [sp, #36]	; 0x24
 801129a:	e767      	b.n	801116c <_vfiprintf_r+0x94>
 801129c:	fb0c 3202 	mla	r2, ip, r2, r3
 80112a0:	460c      	mov	r4, r1
 80112a2:	2001      	movs	r0, #1
 80112a4:	e7a5      	b.n	80111f2 <_vfiprintf_r+0x11a>
 80112a6:	2300      	movs	r3, #0
 80112a8:	3401      	adds	r4, #1
 80112aa:	9305      	str	r3, [sp, #20]
 80112ac:	4619      	mov	r1, r3
 80112ae:	f04f 0c0a 	mov.w	ip, #10
 80112b2:	4620      	mov	r0, r4
 80112b4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80112b8:	3a30      	subs	r2, #48	; 0x30
 80112ba:	2a09      	cmp	r2, #9
 80112bc:	d903      	bls.n	80112c6 <_vfiprintf_r+0x1ee>
 80112be:	2b00      	cmp	r3, #0
 80112c0:	d0c5      	beq.n	801124e <_vfiprintf_r+0x176>
 80112c2:	9105      	str	r1, [sp, #20]
 80112c4:	e7c3      	b.n	801124e <_vfiprintf_r+0x176>
 80112c6:	fb0c 2101 	mla	r1, ip, r1, r2
 80112ca:	4604      	mov	r4, r0
 80112cc:	2301      	movs	r3, #1
 80112ce:	e7f0      	b.n	80112b2 <_vfiprintf_r+0x1da>
 80112d0:	ab03      	add	r3, sp, #12
 80112d2:	9300      	str	r3, [sp, #0]
 80112d4:	462a      	mov	r2, r5
 80112d6:	4b16      	ldr	r3, [pc, #88]	; (8011330 <_vfiprintf_r+0x258>)
 80112d8:	a904      	add	r1, sp, #16
 80112da:	4630      	mov	r0, r6
 80112dc:	f3af 8000 	nop.w
 80112e0:	4607      	mov	r7, r0
 80112e2:	1c78      	adds	r0, r7, #1
 80112e4:	d1d6      	bne.n	8011294 <_vfiprintf_r+0x1bc>
 80112e6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80112e8:	07d9      	lsls	r1, r3, #31
 80112ea:	d405      	bmi.n	80112f8 <_vfiprintf_r+0x220>
 80112ec:	89ab      	ldrh	r3, [r5, #12]
 80112ee:	059a      	lsls	r2, r3, #22
 80112f0:	d402      	bmi.n	80112f8 <_vfiprintf_r+0x220>
 80112f2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80112f4:	f7fd fd2f 	bl	800ed56 <__retarget_lock_release_recursive>
 80112f8:	89ab      	ldrh	r3, [r5, #12]
 80112fa:	065b      	lsls	r3, r3, #25
 80112fc:	f53f af12 	bmi.w	8011124 <_vfiprintf_r+0x4c>
 8011300:	9809      	ldr	r0, [sp, #36]	; 0x24
 8011302:	e711      	b.n	8011128 <_vfiprintf_r+0x50>
 8011304:	ab03      	add	r3, sp, #12
 8011306:	9300      	str	r3, [sp, #0]
 8011308:	462a      	mov	r2, r5
 801130a:	4b09      	ldr	r3, [pc, #36]	; (8011330 <_vfiprintf_r+0x258>)
 801130c:	a904      	add	r1, sp, #16
 801130e:	4630      	mov	r0, r6
 8011310:	f000 f880 	bl	8011414 <_printf_i>
 8011314:	e7e4      	b.n	80112e0 <_vfiprintf_r+0x208>
 8011316:	bf00      	nop
 8011318:	0801223c 	.word	0x0801223c
 801131c:	0801225c 	.word	0x0801225c
 8011320:	0801221c 	.word	0x0801221c
 8011324:	08012619 	.word	0x08012619
 8011328:	08012623 	.word	0x08012623
 801132c:	00000000 	.word	0x00000000
 8011330:	080110b3 	.word	0x080110b3
 8011334:	0801261f 	.word	0x0801261f

08011338 <_printf_common>:
 8011338:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801133c:	4616      	mov	r6, r2
 801133e:	4699      	mov	r9, r3
 8011340:	688a      	ldr	r2, [r1, #8]
 8011342:	690b      	ldr	r3, [r1, #16]
 8011344:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8011348:	4293      	cmp	r3, r2
 801134a:	bfb8      	it	lt
 801134c:	4613      	movlt	r3, r2
 801134e:	6033      	str	r3, [r6, #0]
 8011350:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8011354:	4607      	mov	r7, r0
 8011356:	460c      	mov	r4, r1
 8011358:	b10a      	cbz	r2, 801135e <_printf_common+0x26>
 801135a:	3301      	adds	r3, #1
 801135c:	6033      	str	r3, [r6, #0]
 801135e:	6823      	ldr	r3, [r4, #0]
 8011360:	0699      	lsls	r1, r3, #26
 8011362:	bf42      	ittt	mi
 8011364:	6833      	ldrmi	r3, [r6, #0]
 8011366:	3302      	addmi	r3, #2
 8011368:	6033      	strmi	r3, [r6, #0]
 801136a:	6825      	ldr	r5, [r4, #0]
 801136c:	f015 0506 	ands.w	r5, r5, #6
 8011370:	d106      	bne.n	8011380 <_printf_common+0x48>
 8011372:	f104 0a19 	add.w	sl, r4, #25
 8011376:	68e3      	ldr	r3, [r4, #12]
 8011378:	6832      	ldr	r2, [r6, #0]
 801137a:	1a9b      	subs	r3, r3, r2
 801137c:	42ab      	cmp	r3, r5
 801137e:	dc26      	bgt.n	80113ce <_printf_common+0x96>
 8011380:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8011384:	1e13      	subs	r3, r2, #0
 8011386:	6822      	ldr	r2, [r4, #0]
 8011388:	bf18      	it	ne
 801138a:	2301      	movne	r3, #1
 801138c:	0692      	lsls	r2, r2, #26
 801138e:	d42b      	bmi.n	80113e8 <_printf_common+0xb0>
 8011390:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8011394:	4649      	mov	r1, r9
 8011396:	4638      	mov	r0, r7
 8011398:	47c0      	blx	r8
 801139a:	3001      	adds	r0, #1
 801139c:	d01e      	beq.n	80113dc <_printf_common+0xa4>
 801139e:	6823      	ldr	r3, [r4, #0]
 80113a0:	68e5      	ldr	r5, [r4, #12]
 80113a2:	6832      	ldr	r2, [r6, #0]
 80113a4:	f003 0306 	and.w	r3, r3, #6
 80113a8:	2b04      	cmp	r3, #4
 80113aa:	bf08      	it	eq
 80113ac:	1aad      	subeq	r5, r5, r2
 80113ae:	68a3      	ldr	r3, [r4, #8]
 80113b0:	6922      	ldr	r2, [r4, #16]
 80113b2:	bf0c      	ite	eq
 80113b4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80113b8:	2500      	movne	r5, #0
 80113ba:	4293      	cmp	r3, r2
 80113bc:	bfc4      	itt	gt
 80113be:	1a9b      	subgt	r3, r3, r2
 80113c0:	18ed      	addgt	r5, r5, r3
 80113c2:	2600      	movs	r6, #0
 80113c4:	341a      	adds	r4, #26
 80113c6:	42b5      	cmp	r5, r6
 80113c8:	d11a      	bne.n	8011400 <_printf_common+0xc8>
 80113ca:	2000      	movs	r0, #0
 80113cc:	e008      	b.n	80113e0 <_printf_common+0xa8>
 80113ce:	2301      	movs	r3, #1
 80113d0:	4652      	mov	r2, sl
 80113d2:	4649      	mov	r1, r9
 80113d4:	4638      	mov	r0, r7
 80113d6:	47c0      	blx	r8
 80113d8:	3001      	adds	r0, #1
 80113da:	d103      	bne.n	80113e4 <_printf_common+0xac>
 80113dc:	f04f 30ff 	mov.w	r0, #4294967295
 80113e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80113e4:	3501      	adds	r5, #1
 80113e6:	e7c6      	b.n	8011376 <_printf_common+0x3e>
 80113e8:	18e1      	adds	r1, r4, r3
 80113ea:	1c5a      	adds	r2, r3, #1
 80113ec:	2030      	movs	r0, #48	; 0x30
 80113ee:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80113f2:	4422      	add	r2, r4
 80113f4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80113f8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80113fc:	3302      	adds	r3, #2
 80113fe:	e7c7      	b.n	8011390 <_printf_common+0x58>
 8011400:	2301      	movs	r3, #1
 8011402:	4622      	mov	r2, r4
 8011404:	4649      	mov	r1, r9
 8011406:	4638      	mov	r0, r7
 8011408:	47c0      	blx	r8
 801140a:	3001      	adds	r0, #1
 801140c:	d0e6      	beq.n	80113dc <_printf_common+0xa4>
 801140e:	3601      	adds	r6, #1
 8011410:	e7d9      	b.n	80113c6 <_printf_common+0x8e>
	...

08011414 <_printf_i>:
 8011414:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8011418:	7e0f      	ldrb	r7, [r1, #24]
 801141a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801141c:	2f78      	cmp	r7, #120	; 0x78
 801141e:	4691      	mov	r9, r2
 8011420:	4680      	mov	r8, r0
 8011422:	460c      	mov	r4, r1
 8011424:	469a      	mov	sl, r3
 8011426:	f101 0243 	add.w	r2, r1, #67	; 0x43
 801142a:	d807      	bhi.n	801143c <_printf_i+0x28>
 801142c:	2f62      	cmp	r7, #98	; 0x62
 801142e:	d80a      	bhi.n	8011446 <_printf_i+0x32>
 8011430:	2f00      	cmp	r7, #0
 8011432:	f000 80d8 	beq.w	80115e6 <_printf_i+0x1d2>
 8011436:	2f58      	cmp	r7, #88	; 0x58
 8011438:	f000 80a3 	beq.w	8011582 <_printf_i+0x16e>
 801143c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8011440:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8011444:	e03a      	b.n	80114bc <_printf_i+0xa8>
 8011446:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801144a:	2b15      	cmp	r3, #21
 801144c:	d8f6      	bhi.n	801143c <_printf_i+0x28>
 801144e:	a101      	add	r1, pc, #4	; (adr r1, 8011454 <_printf_i+0x40>)
 8011450:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8011454:	080114ad 	.word	0x080114ad
 8011458:	080114c1 	.word	0x080114c1
 801145c:	0801143d 	.word	0x0801143d
 8011460:	0801143d 	.word	0x0801143d
 8011464:	0801143d 	.word	0x0801143d
 8011468:	0801143d 	.word	0x0801143d
 801146c:	080114c1 	.word	0x080114c1
 8011470:	0801143d 	.word	0x0801143d
 8011474:	0801143d 	.word	0x0801143d
 8011478:	0801143d 	.word	0x0801143d
 801147c:	0801143d 	.word	0x0801143d
 8011480:	080115cd 	.word	0x080115cd
 8011484:	080114f1 	.word	0x080114f1
 8011488:	080115af 	.word	0x080115af
 801148c:	0801143d 	.word	0x0801143d
 8011490:	0801143d 	.word	0x0801143d
 8011494:	080115ef 	.word	0x080115ef
 8011498:	0801143d 	.word	0x0801143d
 801149c:	080114f1 	.word	0x080114f1
 80114a0:	0801143d 	.word	0x0801143d
 80114a4:	0801143d 	.word	0x0801143d
 80114a8:	080115b7 	.word	0x080115b7
 80114ac:	682b      	ldr	r3, [r5, #0]
 80114ae:	1d1a      	adds	r2, r3, #4
 80114b0:	681b      	ldr	r3, [r3, #0]
 80114b2:	602a      	str	r2, [r5, #0]
 80114b4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80114b8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80114bc:	2301      	movs	r3, #1
 80114be:	e0a3      	b.n	8011608 <_printf_i+0x1f4>
 80114c0:	6820      	ldr	r0, [r4, #0]
 80114c2:	6829      	ldr	r1, [r5, #0]
 80114c4:	0606      	lsls	r6, r0, #24
 80114c6:	f101 0304 	add.w	r3, r1, #4
 80114ca:	d50a      	bpl.n	80114e2 <_printf_i+0xce>
 80114cc:	680e      	ldr	r6, [r1, #0]
 80114ce:	602b      	str	r3, [r5, #0]
 80114d0:	2e00      	cmp	r6, #0
 80114d2:	da03      	bge.n	80114dc <_printf_i+0xc8>
 80114d4:	232d      	movs	r3, #45	; 0x2d
 80114d6:	4276      	negs	r6, r6
 80114d8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80114dc:	485e      	ldr	r0, [pc, #376]	; (8011658 <_printf_i+0x244>)
 80114de:	230a      	movs	r3, #10
 80114e0:	e019      	b.n	8011516 <_printf_i+0x102>
 80114e2:	680e      	ldr	r6, [r1, #0]
 80114e4:	602b      	str	r3, [r5, #0]
 80114e6:	f010 0f40 	tst.w	r0, #64	; 0x40
 80114ea:	bf18      	it	ne
 80114ec:	b236      	sxthne	r6, r6
 80114ee:	e7ef      	b.n	80114d0 <_printf_i+0xbc>
 80114f0:	682b      	ldr	r3, [r5, #0]
 80114f2:	6820      	ldr	r0, [r4, #0]
 80114f4:	1d19      	adds	r1, r3, #4
 80114f6:	6029      	str	r1, [r5, #0]
 80114f8:	0601      	lsls	r1, r0, #24
 80114fa:	d501      	bpl.n	8011500 <_printf_i+0xec>
 80114fc:	681e      	ldr	r6, [r3, #0]
 80114fe:	e002      	b.n	8011506 <_printf_i+0xf2>
 8011500:	0646      	lsls	r6, r0, #25
 8011502:	d5fb      	bpl.n	80114fc <_printf_i+0xe8>
 8011504:	881e      	ldrh	r6, [r3, #0]
 8011506:	4854      	ldr	r0, [pc, #336]	; (8011658 <_printf_i+0x244>)
 8011508:	2f6f      	cmp	r7, #111	; 0x6f
 801150a:	bf0c      	ite	eq
 801150c:	2308      	moveq	r3, #8
 801150e:	230a      	movne	r3, #10
 8011510:	2100      	movs	r1, #0
 8011512:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8011516:	6865      	ldr	r5, [r4, #4]
 8011518:	60a5      	str	r5, [r4, #8]
 801151a:	2d00      	cmp	r5, #0
 801151c:	bfa2      	ittt	ge
 801151e:	6821      	ldrge	r1, [r4, #0]
 8011520:	f021 0104 	bicge.w	r1, r1, #4
 8011524:	6021      	strge	r1, [r4, #0]
 8011526:	b90e      	cbnz	r6, 801152c <_printf_i+0x118>
 8011528:	2d00      	cmp	r5, #0
 801152a:	d04d      	beq.n	80115c8 <_printf_i+0x1b4>
 801152c:	4615      	mov	r5, r2
 801152e:	fbb6 f1f3 	udiv	r1, r6, r3
 8011532:	fb03 6711 	mls	r7, r3, r1, r6
 8011536:	5dc7      	ldrb	r7, [r0, r7]
 8011538:	f805 7d01 	strb.w	r7, [r5, #-1]!
 801153c:	4637      	mov	r7, r6
 801153e:	42bb      	cmp	r3, r7
 8011540:	460e      	mov	r6, r1
 8011542:	d9f4      	bls.n	801152e <_printf_i+0x11a>
 8011544:	2b08      	cmp	r3, #8
 8011546:	d10b      	bne.n	8011560 <_printf_i+0x14c>
 8011548:	6823      	ldr	r3, [r4, #0]
 801154a:	07de      	lsls	r6, r3, #31
 801154c:	d508      	bpl.n	8011560 <_printf_i+0x14c>
 801154e:	6923      	ldr	r3, [r4, #16]
 8011550:	6861      	ldr	r1, [r4, #4]
 8011552:	4299      	cmp	r1, r3
 8011554:	bfde      	ittt	le
 8011556:	2330      	movle	r3, #48	; 0x30
 8011558:	f805 3c01 	strble.w	r3, [r5, #-1]
 801155c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8011560:	1b52      	subs	r2, r2, r5
 8011562:	6122      	str	r2, [r4, #16]
 8011564:	f8cd a000 	str.w	sl, [sp]
 8011568:	464b      	mov	r3, r9
 801156a:	aa03      	add	r2, sp, #12
 801156c:	4621      	mov	r1, r4
 801156e:	4640      	mov	r0, r8
 8011570:	f7ff fee2 	bl	8011338 <_printf_common>
 8011574:	3001      	adds	r0, #1
 8011576:	d14c      	bne.n	8011612 <_printf_i+0x1fe>
 8011578:	f04f 30ff 	mov.w	r0, #4294967295
 801157c:	b004      	add	sp, #16
 801157e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011582:	4835      	ldr	r0, [pc, #212]	; (8011658 <_printf_i+0x244>)
 8011584:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8011588:	6829      	ldr	r1, [r5, #0]
 801158a:	6823      	ldr	r3, [r4, #0]
 801158c:	f851 6b04 	ldr.w	r6, [r1], #4
 8011590:	6029      	str	r1, [r5, #0]
 8011592:	061d      	lsls	r5, r3, #24
 8011594:	d514      	bpl.n	80115c0 <_printf_i+0x1ac>
 8011596:	07df      	lsls	r7, r3, #31
 8011598:	bf44      	itt	mi
 801159a:	f043 0320 	orrmi.w	r3, r3, #32
 801159e:	6023      	strmi	r3, [r4, #0]
 80115a0:	b91e      	cbnz	r6, 80115aa <_printf_i+0x196>
 80115a2:	6823      	ldr	r3, [r4, #0]
 80115a4:	f023 0320 	bic.w	r3, r3, #32
 80115a8:	6023      	str	r3, [r4, #0]
 80115aa:	2310      	movs	r3, #16
 80115ac:	e7b0      	b.n	8011510 <_printf_i+0xfc>
 80115ae:	6823      	ldr	r3, [r4, #0]
 80115b0:	f043 0320 	orr.w	r3, r3, #32
 80115b4:	6023      	str	r3, [r4, #0]
 80115b6:	2378      	movs	r3, #120	; 0x78
 80115b8:	4828      	ldr	r0, [pc, #160]	; (801165c <_printf_i+0x248>)
 80115ba:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80115be:	e7e3      	b.n	8011588 <_printf_i+0x174>
 80115c0:	0659      	lsls	r1, r3, #25
 80115c2:	bf48      	it	mi
 80115c4:	b2b6      	uxthmi	r6, r6
 80115c6:	e7e6      	b.n	8011596 <_printf_i+0x182>
 80115c8:	4615      	mov	r5, r2
 80115ca:	e7bb      	b.n	8011544 <_printf_i+0x130>
 80115cc:	682b      	ldr	r3, [r5, #0]
 80115ce:	6826      	ldr	r6, [r4, #0]
 80115d0:	6961      	ldr	r1, [r4, #20]
 80115d2:	1d18      	adds	r0, r3, #4
 80115d4:	6028      	str	r0, [r5, #0]
 80115d6:	0635      	lsls	r5, r6, #24
 80115d8:	681b      	ldr	r3, [r3, #0]
 80115da:	d501      	bpl.n	80115e0 <_printf_i+0x1cc>
 80115dc:	6019      	str	r1, [r3, #0]
 80115de:	e002      	b.n	80115e6 <_printf_i+0x1d2>
 80115e0:	0670      	lsls	r0, r6, #25
 80115e2:	d5fb      	bpl.n	80115dc <_printf_i+0x1c8>
 80115e4:	8019      	strh	r1, [r3, #0]
 80115e6:	2300      	movs	r3, #0
 80115e8:	6123      	str	r3, [r4, #16]
 80115ea:	4615      	mov	r5, r2
 80115ec:	e7ba      	b.n	8011564 <_printf_i+0x150>
 80115ee:	682b      	ldr	r3, [r5, #0]
 80115f0:	1d1a      	adds	r2, r3, #4
 80115f2:	602a      	str	r2, [r5, #0]
 80115f4:	681d      	ldr	r5, [r3, #0]
 80115f6:	6862      	ldr	r2, [r4, #4]
 80115f8:	2100      	movs	r1, #0
 80115fa:	4628      	mov	r0, r5
 80115fc:	f7ee fe70 	bl	80002e0 <memchr>
 8011600:	b108      	cbz	r0, 8011606 <_printf_i+0x1f2>
 8011602:	1b40      	subs	r0, r0, r5
 8011604:	6060      	str	r0, [r4, #4]
 8011606:	6863      	ldr	r3, [r4, #4]
 8011608:	6123      	str	r3, [r4, #16]
 801160a:	2300      	movs	r3, #0
 801160c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8011610:	e7a8      	b.n	8011564 <_printf_i+0x150>
 8011612:	6923      	ldr	r3, [r4, #16]
 8011614:	462a      	mov	r2, r5
 8011616:	4649      	mov	r1, r9
 8011618:	4640      	mov	r0, r8
 801161a:	47d0      	blx	sl
 801161c:	3001      	adds	r0, #1
 801161e:	d0ab      	beq.n	8011578 <_printf_i+0x164>
 8011620:	6823      	ldr	r3, [r4, #0]
 8011622:	079b      	lsls	r3, r3, #30
 8011624:	d413      	bmi.n	801164e <_printf_i+0x23a>
 8011626:	68e0      	ldr	r0, [r4, #12]
 8011628:	9b03      	ldr	r3, [sp, #12]
 801162a:	4298      	cmp	r0, r3
 801162c:	bfb8      	it	lt
 801162e:	4618      	movlt	r0, r3
 8011630:	e7a4      	b.n	801157c <_printf_i+0x168>
 8011632:	2301      	movs	r3, #1
 8011634:	4632      	mov	r2, r6
 8011636:	4649      	mov	r1, r9
 8011638:	4640      	mov	r0, r8
 801163a:	47d0      	blx	sl
 801163c:	3001      	adds	r0, #1
 801163e:	d09b      	beq.n	8011578 <_printf_i+0x164>
 8011640:	3501      	adds	r5, #1
 8011642:	68e3      	ldr	r3, [r4, #12]
 8011644:	9903      	ldr	r1, [sp, #12]
 8011646:	1a5b      	subs	r3, r3, r1
 8011648:	42ab      	cmp	r3, r5
 801164a:	dcf2      	bgt.n	8011632 <_printf_i+0x21e>
 801164c:	e7eb      	b.n	8011626 <_printf_i+0x212>
 801164e:	2500      	movs	r5, #0
 8011650:	f104 0619 	add.w	r6, r4, #25
 8011654:	e7f5      	b.n	8011642 <_printf_i+0x22e>
 8011656:	bf00      	nop
 8011658:	0801262a 	.word	0x0801262a
 801165c:	0801263b 	.word	0x0801263b

08011660 <__swbuf_r>:
 8011660:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011662:	460e      	mov	r6, r1
 8011664:	4614      	mov	r4, r2
 8011666:	4605      	mov	r5, r0
 8011668:	b118      	cbz	r0, 8011672 <__swbuf_r+0x12>
 801166a:	6983      	ldr	r3, [r0, #24]
 801166c:	b90b      	cbnz	r3, 8011672 <__swbuf_r+0x12>
 801166e:	f7fd f97f 	bl	800e970 <__sinit>
 8011672:	4b21      	ldr	r3, [pc, #132]	; (80116f8 <__swbuf_r+0x98>)
 8011674:	429c      	cmp	r4, r3
 8011676:	d12b      	bne.n	80116d0 <__swbuf_r+0x70>
 8011678:	686c      	ldr	r4, [r5, #4]
 801167a:	69a3      	ldr	r3, [r4, #24]
 801167c:	60a3      	str	r3, [r4, #8]
 801167e:	89a3      	ldrh	r3, [r4, #12]
 8011680:	071a      	lsls	r2, r3, #28
 8011682:	d52f      	bpl.n	80116e4 <__swbuf_r+0x84>
 8011684:	6923      	ldr	r3, [r4, #16]
 8011686:	b36b      	cbz	r3, 80116e4 <__swbuf_r+0x84>
 8011688:	6923      	ldr	r3, [r4, #16]
 801168a:	6820      	ldr	r0, [r4, #0]
 801168c:	1ac0      	subs	r0, r0, r3
 801168e:	6963      	ldr	r3, [r4, #20]
 8011690:	b2f6      	uxtb	r6, r6
 8011692:	4283      	cmp	r3, r0
 8011694:	4637      	mov	r7, r6
 8011696:	dc04      	bgt.n	80116a2 <__swbuf_r+0x42>
 8011698:	4621      	mov	r1, r4
 801169a:	4628      	mov	r0, r5
 801169c:	f7fd f83e 	bl	800e71c <_fflush_r>
 80116a0:	bb30      	cbnz	r0, 80116f0 <__swbuf_r+0x90>
 80116a2:	68a3      	ldr	r3, [r4, #8]
 80116a4:	3b01      	subs	r3, #1
 80116a6:	60a3      	str	r3, [r4, #8]
 80116a8:	6823      	ldr	r3, [r4, #0]
 80116aa:	1c5a      	adds	r2, r3, #1
 80116ac:	6022      	str	r2, [r4, #0]
 80116ae:	701e      	strb	r6, [r3, #0]
 80116b0:	6963      	ldr	r3, [r4, #20]
 80116b2:	3001      	adds	r0, #1
 80116b4:	4283      	cmp	r3, r0
 80116b6:	d004      	beq.n	80116c2 <__swbuf_r+0x62>
 80116b8:	89a3      	ldrh	r3, [r4, #12]
 80116ba:	07db      	lsls	r3, r3, #31
 80116bc:	d506      	bpl.n	80116cc <__swbuf_r+0x6c>
 80116be:	2e0a      	cmp	r6, #10
 80116c0:	d104      	bne.n	80116cc <__swbuf_r+0x6c>
 80116c2:	4621      	mov	r1, r4
 80116c4:	4628      	mov	r0, r5
 80116c6:	f7fd f829 	bl	800e71c <_fflush_r>
 80116ca:	b988      	cbnz	r0, 80116f0 <__swbuf_r+0x90>
 80116cc:	4638      	mov	r0, r7
 80116ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80116d0:	4b0a      	ldr	r3, [pc, #40]	; (80116fc <__swbuf_r+0x9c>)
 80116d2:	429c      	cmp	r4, r3
 80116d4:	d101      	bne.n	80116da <__swbuf_r+0x7a>
 80116d6:	68ac      	ldr	r4, [r5, #8]
 80116d8:	e7cf      	b.n	801167a <__swbuf_r+0x1a>
 80116da:	4b09      	ldr	r3, [pc, #36]	; (8011700 <__swbuf_r+0xa0>)
 80116dc:	429c      	cmp	r4, r3
 80116de:	bf08      	it	eq
 80116e0:	68ec      	ldreq	r4, [r5, #12]
 80116e2:	e7ca      	b.n	801167a <__swbuf_r+0x1a>
 80116e4:	4621      	mov	r1, r4
 80116e6:	4628      	mov	r0, r5
 80116e8:	f000 f80c 	bl	8011704 <__swsetup_r>
 80116ec:	2800      	cmp	r0, #0
 80116ee:	d0cb      	beq.n	8011688 <__swbuf_r+0x28>
 80116f0:	f04f 37ff 	mov.w	r7, #4294967295
 80116f4:	e7ea      	b.n	80116cc <__swbuf_r+0x6c>
 80116f6:	bf00      	nop
 80116f8:	0801223c 	.word	0x0801223c
 80116fc:	0801225c 	.word	0x0801225c
 8011700:	0801221c 	.word	0x0801221c

08011704 <__swsetup_r>:
 8011704:	4b32      	ldr	r3, [pc, #200]	; (80117d0 <__swsetup_r+0xcc>)
 8011706:	b570      	push	{r4, r5, r6, lr}
 8011708:	681d      	ldr	r5, [r3, #0]
 801170a:	4606      	mov	r6, r0
 801170c:	460c      	mov	r4, r1
 801170e:	b125      	cbz	r5, 801171a <__swsetup_r+0x16>
 8011710:	69ab      	ldr	r3, [r5, #24]
 8011712:	b913      	cbnz	r3, 801171a <__swsetup_r+0x16>
 8011714:	4628      	mov	r0, r5
 8011716:	f7fd f92b 	bl	800e970 <__sinit>
 801171a:	4b2e      	ldr	r3, [pc, #184]	; (80117d4 <__swsetup_r+0xd0>)
 801171c:	429c      	cmp	r4, r3
 801171e:	d10f      	bne.n	8011740 <__swsetup_r+0x3c>
 8011720:	686c      	ldr	r4, [r5, #4]
 8011722:	89a3      	ldrh	r3, [r4, #12]
 8011724:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8011728:	0719      	lsls	r1, r3, #28
 801172a:	d42c      	bmi.n	8011786 <__swsetup_r+0x82>
 801172c:	06dd      	lsls	r5, r3, #27
 801172e:	d411      	bmi.n	8011754 <__swsetup_r+0x50>
 8011730:	2309      	movs	r3, #9
 8011732:	6033      	str	r3, [r6, #0]
 8011734:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8011738:	81a3      	strh	r3, [r4, #12]
 801173a:	f04f 30ff 	mov.w	r0, #4294967295
 801173e:	e03e      	b.n	80117be <__swsetup_r+0xba>
 8011740:	4b25      	ldr	r3, [pc, #148]	; (80117d8 <__swsetup_r+0xd4>)
 8011742:	429c      	cmp	r4, r3
 8011744:	d101      	bne.n	801174a <__swsetup_r+0x46>
 8011746:	68ac      	ldr	r4, [r5, #8]
 8011748:	e7eb      	b.n	8011722 <__swsetup_r+0x1e>
 801174a:	4b24      	ldr	r3, [pc, #144]	; (80117dc <__swsetup_r+0xd8>)
 801174c:	429c      	cmp	r4, r3
 801174e:	bf08      	it	eq
 8011750:	68ec      	ldreq	r4, [r5, #12]
 8011752:	e7e6      	b.n	8011722 <__swsetup_r+0x1e>
 8011754:	0758      	lsls	r0, r3, #29
 8011756:	d512      	bpl.n	801177e <__swsetup_r+0x7a>
 8011758:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801175a:	b141      	cbz	r1, 801176e <__swsetup_r+0x6a>
 801175c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8011760:	4299      	cmp	r1, r3
 8011762:	d002      	beq.n	801176a <__swsetup_r+0x66>
 8011764:	4630      	mov	r0, r6
 8011766:	f7fd fb73 	bl	800ee50 <_free_r>
 801176a:	2300      	movs	r3, #0
 801176c:	6363      	str	r3, [r4, #52]	; 0x34
 801176e:	89a3      	ldrh	r3, [r4, #12]
 8011770:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8011774:	81a3      	strh	r3, [r4, #12]
 8011776:	2300      	movs	r3, #0
 8011778:	6063      	str	r3, [r4, #4]
 801177a:	6923      	ldr	r3, [r4, #16]
 801177c:	6023      	str	r3, [r4, #0]
 801177e:	89a3      	ldrh	r3, [r4, #12]
 8011780:	f043 0308 	orr.w	r3, r3, #8
 8011784:	81a3      	strh	r3, [r4, #12]
 8011786:	6923      	ldr	r3, [r4, #16]
 8011788:	b94b      	cbnz	r3, 801179e <__swsetup_r+0x9a>
 801178a:	89a3      	ldrh	r3, [r4, #12]
 801178c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8011790:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8011794:	d003      	beq.n	801179e <__swsetup_r+0x9a>
 8011796:	4621      	mov	r1, r4
 8011798:	4630      	mov	r0, r6
 801179a:	f7fd fb03 	bl	800eda4 <__smakebuf_r>
 801179e:	89a0      	ldrh	r0, [r4, #12]
 80117a0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80117a4:	f010 0301 	ands.w	r3, r0, #1
 80117a8:	d00a      	beq.n	80117c0 <__swsetup_r+0xbc>
 80117aa:	2300      	movs	r3, #0
 80117ac:	60a3      	str	r3, [r4, #8]
 80117ae:	6963      	ldr	r3, [r4, #20]
 80117b0:	425b      	negs	r3, r3
 80117b2:	61a3      	str	r3, [r4, #24]
 80117b4:	6923      	ldr	r3, [r4, #16]
 80117b6:	b943      	cbnz	r3, 80117ca <__swsetup_r+0xc6>
 80117b8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80117bc:	d1ba      	bne.n	8011734 <__swsetup_r+0x30>
 80117be:	bd70      	pop	{r4, r5, r6, pc}
 80117c0:	0781      	lsls	r1, r0, #30
 80117c2:	bf58      	it	pl
 80117c4:	6963      	ldrpl	r3, [r4, #20]
 80117c6:	60a3      	str	r3, [r4, #8]
 80117c8:	e7f4      	b.n	80117b4 <__swsetup_r+0xb0>
 80117ca:	2000      	movs	r0, #0
 80117cc:	e7f7      	b.n	80117be <__swsetup_r+0xba>
 80117ce:	bf00      	nop
 80117d0:	24000088 	.word	0x24000088
 80117d4:	0801223c 	.word	0x0801223c
 80117d8:	0801225c 	.word	0x0801225c
 80117dc:	0801221c 	.word	0x0801221c

080117e0 <abort>:
 80117e0:	b508      	push	{r3, lr}
 80117e2:	2006      	movs	r0, #6
 80117e4:	f000 f82c 	bl	8011840 <raise>
 80117e8:	2001      	movs	r0, #1
 80117ea:	f7f2 f987 	bl	8003afc <_exit>

080117ee <_raise_r>:
 80117ee:	291f      	cmp	r1, #31
 80117f0:	b538      	push	{r3, r4, r5, lr}
 80117f2:	4604      	mov	r4, r0
 80117f4:	460d      	mov	r5, r1
 80117f6:	d904      	bls.n	8011802 <_raise_r+0x14>
 80117f8:	2316      	movs	r3, #22
 80117fa:	6003      	str	r3, [r0, #0]
 80117fc:	f04f 30ff 	mov.w	r0, #4294967295
 8011800:	bd38      	pop	{r3, r4, r5, pc}
 8011802:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8011804:	b112      	cbz	r2, 801180c <_raise_r+0x1e>
 8011806:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801180a:	b94b      	cbnz	r3, 8011820 <_raise_r+0x32>
 801180c:	4620      	mov	r0, r4
 801180e:	f000 f831 	bl	8011874 <_getpid_r>
 8011812:	462a      	mov	r2, r5
 8011814:	4601      	mov	r1, r0
 8011816:	4620      	mov	r0, r4
 8011818:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801181c:	f000 b818 	b.w	8011850 <_kill_r>
 8011820:	2b01      	cmp	r3, #1
 8011822:	d00a      	beq.n	801183a <_raise_r+0x4c>
 8011824:	1c59      	adds	r1, r3, #1
 8011826:	d103      	bne.n	8011830 <_raise_r+0x42>
 8011828:	2316      	movs	r3, #22
 801182a:	6003      	str	r3, [r0, #0]
 801182c:	2001      	movs	r0, #1
 801182e:	e7e7      	b.n	8011800 <_raise_r+0x12>
 8011830:	2400      	movs	r4, #0
 8011832:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8011836:	4628      	mov	r0, r5
 8011838:	4798      	blx	r3
 801183a:	2000      	movs	r0, #0
 801183c:	e7e0      	b.n	8011800 <_raise_r+0x12>
	...

08011840 <raise>:
 8011840:	4b02      	ldr	r3, [pc, #8]	; (801184c <raise+0xc>)
 8011842:	4601      	mov	r1, r0
 8011844:	6818      	ldr	r0, [r3, #0]
 8011846:	f7ff bfd2 	b.w	80117ee <_raise_r>
 801184a:	bf00      	nop
 801184c:	24000088 	.word	0x24000088

08011850 <_kill_r>:
 8011850:	b538      	push	{r3, r4, r5, lr}
 8011852:	4d07      	ldr	r5, [pc, #28]	; (8011870 <_kill_r+0x20>)
 8011854:	2300      	movs	r3, #0
 8011856:	4604      	mov	r4, r0
 8011858:	4608      	mov	r0, r1
 801185a:	4611      	mov	r1, r2
 801185c:	602b      	str	r3, [r5, #0]
 801185e:	f7f2 f93d 	bl	8003adc <_kill>
 8011862:	1c43      	adds	r3, r0, #1
 8011864:	d102      	bne.n	801186c <_kill_r+0x1c>
 8011866:	682b      	ldr	r3, [r5, #0]
 8011868:	b103      	cbz	r3, 801186c <_kill_r+0x1c>
 801186a:	6023      	str	r3, [r4, #0]
 801186c:	bd38      	pop	{r3, r4, r5, pc}
 801186e:	bf00      	nop
 8011870:	24000aa0 	.word	0x24000aa0

08011874 <_getpid_r>:
 8011874:	f7f2 b92a 	b.w	8003acc <_getpid>

08011878 <checkint>:
 8011878:	f3c1 520a 	ubfx	r2, r1, #20, #11
 801187c:	f240 33fe 	movw	r3, #1022	; 0x3fe
 8011880:	429a      	cmp	r2, r3
 8011882:	b570      	push	{r4, r5, r6, lr}
 8011884:	dd2a      	ble.n	80118dc <checkint+0x64>
 8011886:	f240 4333 	movw	r3, #1075	; 0x433
 801188a:	429a      	cmp	r2, r3
 801188c:	dc24      	bgt.n	80118d8 <checkint+0x60>
 801188e:	1a9b      	subs	r3, r3, r2
 8011890:	f1a3 0620 	sub.w	r6, r3, #32
 8011894:	f04f 32ff 	mov.w	r2, #4294967295
 8011898:	fa02 f403 	lsl.w	r4, r2, r3
 801189c:	fa02 f606 	lsl.w	r6, r2, r6
 80118a0:	f1c3 0520 	rsb	r5, r3, #32
 80118a4:	fa22 f505 	lsr.w	r5, r2, r5
 80118a8:	4334      	orrs	r4, r6
 80118aa:	432c      	orrs	r4, r5
 80118ac:	409a      	lsls	r2, r3
 80118ae:	ea20 0202 	bic.w	r2, r0, r2
 80118b2:	ea21 0404 	bic.w	r4, r1, r4
 80118b6:	4322      	orrs	r2, r4
 80118b8:	f1a3 0420 	sub.w	r4, r3, #32
 80118bc:	f1c3 0220 	rsb	r2, r3, #32
 80118c0:	d10c      	bne.n	80118dc <checkint+0x64>
 80118c2:	40d8      	lsrs	r0, r3
 80118c4:	fa01 f302 	lsl.w	r3, r1, r2
 80118c8:	4318      	orrs	r0, r3
 80118ca:	40e1      	lsrs	r1, r4
 80118cc:	4308      	orrs	r0, r1
 80118ce:	f000 0001 	and.w	r0, r0, #1
 80118d2:	f1d0 0002 	rsbs	r0, r0, #2
 80118d6:	bd70      	pop	{r4, r5, r6, pc}
 80118d8:	2002      	movs	r0, #2
 80118da:	e7fc      	b.n	80118d6 <checkint+0x5e>
 80118dc:	2000      	movs	r0, #0
 80118de:	e7fa      	b.n	80118d6 <checkint+0x5e>

080118e0 <pow>:
 80118e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80118e4:	ee10 4a90 	vmov	r4, s1
 80118e8:	ed2d 8b0a 	vpush	{d8-d12}
 80118ec:	ea4f 5a14 	mov.w	sl, r4, lsr #20
 80118f0:	ee11 7a90 	vmov	r7, s3
 80118f4:	f10a 32ff 	add.w	r2, sl, #4294967295
 80118f8:	f240 73fd 	movw	r3, #2045	; 0x7fd
 80118fc:	429a      	cmp	r2, r3
 80118fe:	ee10 6a10 	vmov	r6, s0
 8011902:	ee11 0a10 	vmov	r0, s2
 8011906:	b086      	sub	sp, #24
 8011908:	46d4      	mov	ip, sl
 801190a:	ea4f 5517 	mov.w	r5, r7, lsr #20
 801190e:	d806      	bhi.n	801191e <pow+0x3e>
 8011910:	f3c5 030a 	ubfx	r3, r5, #0, #11
 8011914:	f2a3 33be 	subw	r3, r3, #958	; 0x3be
 8011918:	2b7f      	cmp	r3, #127	; 0x7f
 801191a:	f240 8156 	bls.w	8011bca <pow+0x2ea>
 801191e:	1802      	adds	r2, r0, r0
 8011920:	eb47 0107 	adc.w	r1, r7, r7
 8011924:	f06f 0e01 	mvn.w	lr, #1
 8011928:	f112 39ff 	adds.w	r9, r2, #4294967295
 801192c:	f141 38ff 	adc.w	r8, r1, #4294967295
 8011930:	f46f 1300 	mvn.w	r3, #2097152	; 0x200000
 8011934:	45ce      	cmp	lr, r9
 8011936:	eb73 0808 	sbcs.w	r8, r3, r8
 801193a:	d23f      	bcs.n	80119bc <pow+0xdc>
 801193c:	ea52 0301 	orrs.w	r3, r2, r1
 8011940:	f04f 0300 	mov.w	r3, #0
 8011944:	d10c      	bne.n	8011960 <pow+0x80>
 8011946:	19b6      	adds	r6, r6, r6
 8011948:	f484 2400 	eor.w	r4, r4, #524288	; 0x80000
 801194c:	4164      	adcs	r4, r4
 801194e:	42b3      	cmp	r3, r6
 8011950:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8011954:	41a3      	sbcs	r3, r4
 8011956:	f0c0 808c 	bcc.w	8011a72 <pow+0x192>
 801195a:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 801195e:	e028      	b.n	80119b2 <pow+0xd2>
 8011960:	4da3      	ldr	r5, [pc, #652]	; (8011bf0 <pow+0x310>)
 8011962:	42ac      	cmp	r4, r5
 8011964:	bf08      	it	eq
 8011966:	429e      	cmpeq	r6, r3
 8011968:	d107      	bne.n	801197a <pow+0x9a>
 801196a:	1800      	adds	r0, r0, r0
 801196c:	f487 2700 	eor.w	r7, r7, #524288	; 0x80000
 8011970:	417f      	adcs	r7, r7
 8011972:	4283      	cmp	r3, r0
 8011974:	4b9f      	ldr	r3, [pc, #636]	; (8011bf4 <pow+0x314>)
 8011976:	41bb      	sbcs	r3, r7
 8011978:	e7ed      	b.n	8011956 <pow+0x76>
 801197a:	19b6      	adds	r6, r6, r6
 801197c:	489e      	ldr	r0, [pc, #632]	; (8011bf8 <pow+0x318>)
 801197e:	4164      	adcs	r4, r4
 8011980:	42b3      	cmp	r3, r6
 8011982:	eb70 0504 	sbcs.w	r5, r0, r4
 8011986:	d374      	bcc.n	8011a72 <pow+0x192>
 8011988:	4281      	cmp	r1, r0
 801198a:	bf08      	it	eq
 801198c:	429a      	cmpeq	r2, r3
 801198e:	d170      	bne.n	8011a72 <pow+0x192>
 8011990:	4a9a      	ldr	r2, [pc, #616]	; (8011bfc <pow+0x31c>)
 8011992:	4294      	cmp	r4, r2
 8011994:	bf08      	it	eq
 8011996:	429e      	cmpeq	r6, r3
 8011998:	d0df      	beq.n	801195a <pow+0x7a>
 801199a:	4294      	cmp	r4, r2
 801199c:	ea6f 0707 	mvn.w	r7, r7
 80119a0:	bf34      	ite	cc
 80119a2:	2400      	movcc	r4, #0
 80119a4:	2401      	movcs	r4, #1
 80119a6:	0fff      	lsrs	r7, r7, #31
 80119a8:	42bc      	cmp	r4, r7
 80119aa:	f040 81d9 	bne.w	8011d60 <pow+0x480>
 80119ae:	ee21 0b01 	vmul.f64	d0, d1, d1
 80119b2:	b006      	add	sp, #24
 80119b4:	ecbd 8b0a 	vpop	{d8-d12}
 80119b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80119bc:	eb16 0806 	adds.w	r8, r6, r6
 80119c0:	eb44 0904 	adc.w	r9, r4, r4
 80119c4:	f118 31ff 	adds.w	r1, r8, #4294967295
 80119c8:	f169 0200 	sbc.w	r2, r9, #0
 80119cc:	458e      	cmp	lr, r1
 80119ce:	4193      	sbcs	r3, r2
 80119d0:	d223      	bcs.n	8011a1a <pow+0x13a>
 80119d2:	ee20 0b00 	vmul.f64	d0, d0, d0
 80119d6:	2c00      	cmp	r4, #0
 80119d8:	da12      	bge.n	8011a00 <pow+0x120>
 80119da:	4639      	mov	r1, r7
 80119dc:	f7ff ff4c 	bl	8011878 <checkint>
 80119e0:	2801      	cmp	r0, #1
 80119e2:	d10d      	bne.n	8011a00 <pow+0x120>
 80119e4:	eeb1 0b40 	vneg.f64	d0, d0
 80119e8:	ea58 0309 	orrs.w	r3, r8, r9
 80119ec:	d10a      	bne.n	8011a04 <pow+0x124>
 80119ee:	2f00      	cmp	r7, #0
 80119f0:	dadf      	bge.n	80119b2 <pow+0xd2>
 80119f2:	b006      	add	sp, #24
 80119f4:	ecbd 8b0a 	vpop	{d8-d12}
 80119f8:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80119fc:	f000 bb50 	b.w	80120a0 <__math_divzero>
 8011a00:	2000      	movs	r0, #0
 8011a02:	e7f1      	b.n	80119e8 <pow+0x108>
 8011a04:	2f00      	cmp	r7, #0
 8011a06:	dad4      	bge.n	80119b2 <pow+0xd2>
 8011a08:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8011a0c:	ee86 7b00 	vdiv.f64	d7, d6, d0
 8011a10:	ed8d 7b00 	vstr	d7, [sp]
 8011a14:	ed9d 0b00 	vldr	d0, [sp]
 8011a18:	e7cb      	b.n	80119b2 <pow+0xd2>
 8011a1a:	2c00      	cmp	r4, #0
 8011a1c:	da2c      	bge.n	8011a78 <pow+0x198>
 8011a1e:	4639      	mov	r1, r7
 8011a20:	f7ff ff2a 	bl	8011878 <checkint>
 8011a24:	b930      	cbnz	r0, 8011a34 <pow+0x154>
 8011a26:	b006      	add	sp, #24
 8011a28:	ecbd 8b0a 	vpop	{d8-d12}
 8011a2c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011a30:	f000 bb4e 	b.w	80120d0 <__math_invalid>
 8011a34:	2801      	cmp	r0, #1
 8011a36:	bf14      	ite	ne
 8011a38:	2000      	movne	r0, #0
 8011a3a:	f44f 2080 	moveq.w	r0, #262144	; 0x40000
 8011a3e:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 8011a42:	f3ca 0c0a 	ubfx	ip, sl, #0, #11
 8011a46:	f3c5 020a 	ubfx	r2, r5, #0, #11
 8011a4a:	f2a2 33be 	subw	r3, r2, #958	; 0x3be
 8011a4e:	2b7f      	cmp	r3, #127	; 0x7f
 8011a50:	d92d      	bls.n	8011aae <pow+0x1ce>
 8011a52:	4b67      	ldr	r3, [pc, #412]	; (8011bf0 <pow+0x310>)
 8011a54:	2000      	movs	r0, #0
 8011a56:	429c      	cmp	r4, r3
 8011a58:	bf08      	it	eq
 8011a5a:	4286      	cmpeq	r6, r0
 8011a5c:	f43f af7d 	beq.w	801195a <pow+0x7a>
 8011a60:	f240 31bd 	movw	r1, #957	; 0x3bd
 8011a64:	428a      	cmp	r2, r1
 8011a66:	d80c      	bhi.n	8011a82 <pow+0x1a2>
 8011a68:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 8011a6c:	42b0      	cmp	r0, r6
 8011a6e:	41a3      	sbcs	r3, r4
 8011a70:	d204      	bcs.n	8011a7c <pow+0x19c>
 8011a72:	ee31 0b00 	vadd.f64	d0, d1, d0
 8011a76:	e79c      	b.n	80119b2 <pow+0xd2>
 8011a78:	2000      	movs	r0, #0
 8011a7a:	e7e4      	b.n	8011a46 <pow+0x166>
 8011a7c:	ee30 0b41 	vsub.f64	d0, d0, d1
 8011a80:	e797      	b.n	80119b2 <pow+0xd2>
 8011a82:	2e01      	cmp	r6, #1
 8011a84:	eb74 0303 	sbcs.w	r3, r4, r3
 8011a88:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8011a8c:	bf34      	ite	cc
 8011a8e:	2301      	movcc	r3, #1
 8011a90:	2300      	movcs	r3, #0
 8011a92:	4295      	cmp	r5, r2
 8011a94:	bf8c      	ite	hi
 8011a96:	2500      	movhi	r5, #0
 8011a98:	2501      	movls	r5, #1
 8011a9a:	42ab      	cmp	r3, r5
 8011a9c:	f000 809d 	beq.w	8011bda <pow+0x2fa>
 8011aa0:	b006      	add	sp, #24
 8011aa2:	ecbd 8b0a 	vpop	{d8-d12}
 8011aa6:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011aaa:	f000 baf1 	b.w	8012090 <__math_oflow>
 8011aae:	f1bc 0f00 	cmp.w	ip, #0
 8011ab2:	d10b      	bne.n	8011acc <pow+0x1ec>
 8011ab4:	ed9f 7b4c 	vldr	d7, [pc, #304]	; 8011be8 <pow+0x308>
 8011ab8:	ee20 7b07 	vmul.f64	d7, d0, d7
 8011abc:	ec53 2b17 	vmov	r2, r3, d7
 8011ac0:	ee17 6a10 	vmov	r6, s14
 8011ac4:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 8011ac8:	f1a4 7450 	sub.w	r4, r4, #54525952	; 0x3400000
 8011acc:	4b4c      	ldr	r3, [pc, #304]	; (8011c00 <pow+0x320>)
 8011ace:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 8011ad2:	4423      	add	r3, r4
 8011ad4:	f3c3 3246 	ubfx	r2, r3, #13, #7
 8011ad8:	1519      	asrs	r1, r3, #20
 8011ada:	0d1b      	lsrs	r3, r3, #20
 8011adc:	051b      	lsls	r3, r3, #20
 8011ade:	eba4 0903 	sub.w	r9, r4, r3
 8011ae2:	4b48      	ldr	r3, [pc, #288]	; (8011c04 <pow+0x324>)
 8011ae4:	ee04 1a10 	vmov	s8, r1
 8011ae8:	eb03 1142 	add.w	r1, r3, r2, lsl #5
 8011aec:	f1b6 0800 	subs.w	r8, r6, #0
 8011af0:	ed91 7b12 	vldr	d7, [r1, #72]	; 0x48
 8011af4:	ec49 8b15 	vmov	d5, r8, r9
 8011af8:	ed91 2b16 	vldr	d2, [r1, #88]	; 0x58
 8011afc:	eea5 6b07 	vfma.f64	d6, d5, d7
 8011b00:	ed93 7b00 	vldr	d7, [r3]
 8011b04:	ed93 5b02 	vldr	d5, [r3, #8]
 8011b08:	eeb8 4bc4 	vcvt.f64.s32	d4, s8
 8011b0c:	eea4 2b07 	vfma.f64	d2, d4, d7
 8011b10:	ed91 7b18 	vldr	d7, [r1, #96]	; 0x60
 8011b14:	ee36 ab02 	vadd.f64	d10, d6, d2
 8011b18:	ee32 2b4a 	vsub.f64	d2, d2, d10
 8011b1c:	eea4 7b05 	vfma.f64	d7, d4, d5
 8011b20:	ed93 5b04 	vldr	d5, [r3, #16]
 8011b24:	ee32 2b06 	vadd.f64	d2, d2, d6
 8011b28:	ee37 7b02 	vadd.f64	d7, d7, d2
 8011b2c:	ee26 5b05 	vmul.f64	d5, d6, d5
 8011b30:	ed93 4b08 	vldr	d4, [r3, #32]
 8011b34:	ee26 0b05 	vmul.f64	d0, d6, d5
 8011b38:	eeb0 9b40 	vmov.f64	d9, d0
 8011b3c:	ee95 9b06 	vfnms.f64	d9, d5, d6
 8011b40:	ed93 5b06 	vldr	d5, [r3, #24]
 8011b44:	ee3a 8b00 	vadd.f64	d8, d10, d0
 8011b48:	ee26 bb00 	vmul.f64	d11, d6, d0
 8011b4c:	ed93 3b0c 	vldr	d3, [r3, #48]	; 0x30
 8011b50:	eea6 5b04 	vfma.f64	d5, d6, d4
 8011b54:	ee3a ab48 	vsub.f64	d10, d10, d8
 8011b58:	ed93 4b0a 	vldr	d4, [r3, #40]	; 0x28
 8011b5c:	ee37 9b09 	vadd.f64	d9, d7, d9
 8011b60:	ee3a ab00 	vadd.f64	d10, d10, d0
 8011b64:	eea6 4b03 	vfma.f64	d4, d6, d3
 8011b68:	ed93 cb10 	vldr	d12, [r3, #64]	; 0x40
 8011b6c:	ee39 ab0a 	vadd.f64	d10, d9, d10
 8011b70:	ed93 3b0e 	vldr	d3, [r3, #56]	; 0x38
 8011b74:	eea6 3b0c 	vfma.f64	d3, d6, d12
 8011b78:	eea0 4b03 	vfma.f64	d4, d0, d3
 8011b7c:	eea0 5b04 	vfma.f64	d5, d0, d4
 8011b80:	eeab ab05 	vfma.f64	d10, d11, d5
 8011b84:	ee38 6b0a 	vadd.f64	d6, d8, d10
 8011b88:	ee21 7b06 	vmul.f64	d7, d1, d6
 8011b8c:	ee17 3a90 	vmov	r3, s15
 8011b90:	eeb0 5b47 	vmov.f64	d5, d7
 8011b94:	f3c3 560a 	ubfx	r6, r3, #20, #11
 8011b98:	f46f 7272 	mvn.w	r2, #968	; 0x3c8
 8011b9c:	18b2      	adds	r2, r6, r2
 8011b9e:	2a3e      	cmp	r2, #62	; 0x3e
 8011ba0:	ee91 5b06 	vfnms.f64	d5, d1, d6
 8011ba4:	ee38 8b46 	vsub.f64	d8, d8, d6
 8011ba8:	ee38 ab0a 	vadd.f64	d10, d8, d10
 8011bac:	eea1 5b0a 	vfma.f64	d5, d1, d10
 8011bb0:	d92b      	bls.n	8011c0a <pow+0x32a>
 8011bb2:	2a00      	cmp	r2, #0
 8011bb4:	da0b      	bge.n	8011bce <pow+0x2ee>
 8011bb6:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 8011bba:	ee37 0b00 	vadd.f64	d0, d7, d0
 8011bbe:	2800      	cmp	r0, #0
 8011bc0:	f43f aef7 	beq.w	80119b2 <pow+0xd2>
 8011bc4:	eeb1 0b40 	vneg.f64	d0, d0
 8011bc8:	e6f3      	b.n	80119b2 <pow+0xd2>
 8011bca:	2000      	movs	r0, #0
 8011bcc:	e77e      	b.n	8011acc <pow+0x1ec>
 8011bce:	f5b6 6f81 	cmp.w	r6, #1032	; 0x408
 8011bd2:	d919      	bls.n	8011c08 <pow+0x328>
 8011bd4:	2b00      	cmp	r3, #0
 8011bd6:	f6bf af63 	bge.w	8011aa0 <pow+0x1c0>
 8011bda:	b006      	add	sp, #24
 8011bdc:	ecbd 8b0a 	vpop	{d8-d12}
 8011be0:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011be4:	f000 ba4c 	b.w	8012080 <__math_uflow>
 8011be8:	00000000 	.word	0x00000000
 8011bec:	43300000 	.word	0x43300000
 8011bf0:	3ff00000 	.word	0x3ff00000
 8011bf4:	fff00000 	.word	0xfff00000
 8011bf8:	ffe00000 	.word	0xffe00000
 8011bfc:	7fe00000 	.word	0x7fe00000
 8011c00:	c0196aab 	.word	0xc0196aab
 8011c04:	08012650 	.word	0x08012650
 8011c08:	2600      	movs	r6, #0
 8011c0a:	495d      	ldr	r1, [pc, #372]	; (8011d80 <pow+0x4a0>)
 8011c0c:	ed91 4b02 	vldr	d4, [r1, #8]
 8011c10:	ed91 3b00 	vldr	d3, [r1]
 8011c14:	eeb0 6b44 	vmov.f64	d6, d4
 8011c18:	eea7 6b03 	vfma.f64	d6, d7, d3
 8011c1c:	ee16 5a10 	vmov	r5, s12
 8011c20:	ee36 6b44 	vsub.f64	d6, d6, d4
 8011c24:	ed91 4b04 	vldr	d4, [r1, #16]
 8011c28:	f005 037f 	and.w	r3, r5, #127	; 0x7f
 8011c2c:	eea6 7b04 	vfma.f64	d7, d6, d4
 8011c30:	eeb0 0b47 	vmov.f64	d0, d7
 8011c34:	ed91 7b06 	vldr	d7, [r1, #24]
 8011c38:	18dc      	adds	r4, r3, r3
 8011c3a:	f104 030f 	add.w	r3, r4, #15
 8011c3e:	eb01 04c4 	add.w	r4, r1, r4, lsl #3
 8011c42:	eea6 0b07 	vfma.f64	d0, d6, d7
 8011c46:	ed91 4b0a 	vldr	d4, [r1, #40]	; 0x28
 8011c4a:	ee35 0b00 	vadd.f64	d0, d5, d0
 8011c4e:	ee20 6b00 	vmul.f64	d6, d0, d0
 8011c52:	ed94 7b1c 	vldr	d7, [r4, #112]	; 0x70
 8011c56:	ed91 5b08 	vldr	d5, [r1, #32]
 8011c5a:	ee30 7b07 	vadd.f64	d7, d0, d7
 8011c5e:	eb01 02c3 	add.w	r2, r1, r3, lsl #3
 8011c62:	eea0 5b04 	vfma.f64	d5, d0, d4
 8011c66:	ed91 4b0e 	vldr	d4, [r1, #56]	; 0x38
 8011c6a:	eea6 7b05 	vfma.f64	d7, d6, d5
 8011c6e:	ee26 6b06 	vmul.f64	d6, d6, d6
 8011c72:	ed91 5b0c 	vldr	d5, [r1, #48]	; 0x30
 8011c76:	f851 c033 	ldr.w	ip, [r1, r3, lsl #3]
 8011c7a:	f8d2 e004 	ldr.w	lr, [r2, #4]
 8011c7e:	eea0 5b04 	vfma.f64	d5, d0, d4
 8011c82:	1940      	adds	r0, r0, r5
 8011c84:	2700      	movs	r7, #0
 8011c86:	eb17 020c 	adds.w	r2, r7, ip
 8011c8a:	eb0e 3340 	add.w	r3, lr, r0, lsl #13
 8011c8e:	eea6 7b05 	vfma.f64	d7, d6, d5
 8011c92:	2e00      	cmp	r6, #0
 8011c94:	d15f      	bne.n	8011d56 <pow+0x476>
 8011c96:	42bd      	cmp	r5, r7
 8011c98:	db13      	blt.n	8011cc2 <pow+0x3e2>
 8011c9a:	f103 4140 	add.w	r1, r3, #3221225472	; 0xc0000000
 8011c9e:	f501 0170 	add.w	r1, r1, #15728640	; 0xf00000
 8011ca2:	4610      	mov	r0, r2
 8011ca4:	ec41 0b10 	vmov	d0, r0, r1
 8011ca8:	eea7 0b00 	vfma.f64	d0, d7, d0
 8011cac:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 8011d68 <pow+0x488>
 8011cb0:	ee20 0b07 	vmul.f64	d0, d0, d7
 8011cb4:	b006      	add	sp, #24
 8011cb6:	ecbd 8b0a 	vpop	{d8-d12}
 8011cba:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011cbe:	f000 ba1f 	b.w	8012100 <__math_check_oflow>
 8011cc2:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
 8011cc6:	f501 1100 	add.w	r1, r1, #2097152	; 0x200000
 8011cca:	4610      	mov	r0, r2
 8011ccc:	ec41 0b15 	vmov	d5, r0, r1
 8011cd0:	eeb7 4b00 	vmov.f64	d4, #112	; 0x3f800000  1.0
 8011cd4:	ee27 6b05 	vmul.f64	d6, d7, d5
 8011cd8:	ee35 7b06 	vadd.f64	d7, d5, d6
 8011cdc:	eeb0 3bc7 	vabs.f64	d3, d7
 8011ce0:	eeb4 3bc4 	vcmpe.f64	d3, d4
 8011ce4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011ce8:	ed9f 0b21 	vldr	d0, [pc, #132]	; 8011d70 <pow+0x490>
 8011cec:	d52a      	bpl.n	8011d44 <pow+0x464>
 8011cee:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8011cf2:	ee35 5b47 	vsub.f64	d5, d5, d7
 8011cf6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011cfa:	eebf 3b00 	vmov.f64	d3, #240	; 0xbf800000 -1.0
 8011cfe:	ee35 6b06 	vadd.f64	d6, d5, d6
 8011d02:	bf48      	it	mi
 8011d04:	eeb0 4b43 	vmovmi.f64	d4, d3
 8011d08:	ee37 3b04 	vadd.f64	d3, d7, d4
 8011d0c:	ee34 5b43 	vsub.f64	d5, d4, d3
 8011d10:	ee35 7b07 	vadd.f64	d7, d5, d7
 8011d14:	ee37 7b06 	vadd.f64	d7, d7, d6
 8011d18:	ee37 7b03 	vadd.f64	d7, d7, d3
 8011d1c:	ee37 7b44 	vsub.f64	d7, d7, d4
 8011d20:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8011d24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011d28:	d104      	bne.n	8011d34 <pow+0x454>
 8011d2a:	4632      	mov	r2, r6
 8011d2c:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 8011d30:	ec43 2b17 	vmov	d7, r2, r3
 8011d34:	ed8d 0b02 	vstr	d0, [sp, #8]
 8011d38:	ed9d 6b02 	vldr	d6, [sp, #8]
 8011d3c:	ee26 6b00 	vmul.f64	d6, d6, d0
 8011d40:	ed8d 6b04 	vstr	d6, [sp, #16]
 8011d44:	ee27 0b00 	vmul.f64	d0, d7, d0
 8011d48:	b006      	add	sp, #24
 8011d4a:	ecbd 8b0a 	vpop	{d8-d12}
 8011d4e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011d52:	f000 b9cc 	b.w	80120ee <__math_check_uflow>
 8011d56:	ec43 2b10 	vmov	d0, r2, r3
 8011d5a:	eea7 0b00 	vfma.f64	d0, d7, d0
 8011d5e:	e628      	b.n	80119b2 <pow+0xd2>
 8011d60:	ed9f 0b05 	vldr	d0, [pc, #20]	; 8011d78 <pow+0x498>
 8011d64:	e625      	b.n	80119b2 <pow+0xd2>
 8011d66:	bf00      	nop
 8011d68:	00000000 	.word	0x00000000
 8011d6c:	7f000000 	.word	0x7f000000
 8011d70:	00000000 	.word	0x00000000
 8011d74:	00100000 	.word	0x00100000
	...
 8011d80:	08013698 	.word	0x08013698

08011d84 <asin>:
 8011d84:	b508      	push	{r3, lr}
 8011d86:	ed2d 8b04 	vpush	{d8-d9}
 8011d8a:	eeb0 8b40 	vmov.f64	d8, d0
 8011d8e:	f000 f847 	bl	8011e20 <__ieee754_asin>
 8011d92:	eeb4 8b48 	vcmp.f64	d8, d8
 8011d96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011d9a:	eeb0 9b40 	vmov.f64	d9, d0
 8011d9e:	d615      	bvs.n	8011dcc <asin+0x48>
 8011da0:	eeb0 0b48 	vmov.f64	d0, d8
 8011da4:	f000 f9c0 	bl	8012128 <fabs>
 8011da8:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 8011dac:	eeb4 0bc7 	vcmpe.f64	d0, d7
 8011db0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011db4:	dd0a      	ble.n	8011dcc <asin+0x48>
 8011db6:	f7fc fbb1 	bl	800e51c <__errno>
 8011dba:	ecbd 8b04 	vpop	{d8-d9}
 8011dbe:	2321      	movs	r3, #33	; 0x21
 8011dc0:	6003      	str	r3, [r0, #0]
 8011dc2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8011dc6:	4804      	ldr	r0, [pc, #16]	; (8011dd8 <asin+0x54>)
 8011dc8:	f7ff b8fa 	b.w	8010fc0 <nan>
 8011dcc:	eeb0 0b49 	vmov.f64	d0, d9
 8011dd0:	ecbd 8b04 	vpop	{d8-d9}
 8011dd4:	bd08      	pop	{r3, pc}
 8011dd6:	bf00      	nop
 8011dd8:	08012517 	.word	0x08012517
 8011ddc:	00000000 	.word	0x00000000

08011de0 <sqrt>:
 8011de0:	b508      	push	{r3, lr}
 8011de2:	ed2d 8b04 	vpush	{d8-d9}
 8011de6:	eeb0 8b40 	vmov.f64	d8, d0
 8011dea:	f000 f927 	bl	801203c <__ieee754_sqrt>
 8011dee:	eeb4 8b48 	vcmp.f64	d8, d8
 8011df2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011df6:	d60c      	bvs.n	8011e12 <sqrt+0x32>
 8011df8:	ed9f 9b07 	vldr	d9, [pc, #28]	; 8011e18 <sqrt+0x38>
 8011dfc:	eeb4 8bc9 	vcmpe.f64	d8, d9
 8011e00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011e04:	d505      	bpl.n	8011e12 <sqrt+0x32>
 8011e06:	f7fc fb89 	bl	800e51c <__errno>
 8011e0a:	ee89 0b09 	vdiv.f64	d0, d9, d9
 8011e0e:	2321      	movs	r3, #33	; 0x21
 8011e10:	6003      	str	r3, [r0, #0]
 8011e12:	ecbd 8b04 	vpop	{d8-d9}
 8011e16:	bd08      	pop	{r3, pc}
	...

08011e20 <__ieee754_asin>:
 8011e20:	b538      	push	{r3, r4, r5, lr}
 8011e22:	ee10 5a90 	vmov	r5, s1
 8011e26:	4b82      	ldr	r3, [pc, #520]	; (8012030 <__ieee754_asin+0x210>)
 8011e28:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 8011e2c:	429c      	cmp	r4, r3
 8011e2e:	ed2d 8b06 	vpush	{d8-d10}
 8011e32:	dd19      	ble.n	8011e68 <__ieee754_asin+0x48>
 8011e34:	ee10 3a10 	vmov	r3, s0
 8011e38:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8011e3c:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8011e40:	4323      	orrs	r3, r4
 8011e42:	d10c      	bne.n	8011e5e <__ieee754_asin+0x3e>
 8011e44:	ed9f 7b5c 	vldr	d7, [pc, #368]	; 8011fb8 <__ieee754_asin+0x198>
 8011e48:	ed9f 6b5d 	vldr	d6, [pc, #372]	; 8011fc0 <__ieee754_asin+0x1a0>
 8011e4c:	ee20 7b07 	vmul.f64	d7, d0, d7
 8011e50:	eea0 7b06 	vfma.f64	d7, d0, d6
 8011e54:	eeb0 0b47 	vmov.f64	d0, d7
 8011e58:	ecbd 8b06 	vpop	{d8-d10}
 8011e5c:	bd38      	pop	{r3, r4, r5, pc}
 8011e5e:	ee30 7b40 	vsub.f64	d7, d0, d0
 8011e62:	ee87 0b07 	vdiv.f64	d0, d7, d7
 8011e66:	e7f7      	b.n	8011e58 <__ieee754_asin+0x38>
 8011e68:	4b72      	ldr	r3, [pc, #456]	; (8012034 <__ieee754_asin+0x214>)
 8011e6a:	eeb7 9b00 	vmov.f64	d9, #112	; 0x3f800000  1.0
 8011e6e:	429c      	cmp	r4, r3
 8011e70:	dc0b      	bgt.n	8011e8a <__ieee754_asin+0x6a>
 8011e72:	f1b4 5f79 	cmp.w	r4, #1044381696	; 0x3e400000
 8011e76:	da52      	bge.n	8011f1e <__ieee754_asin+0xfe>
 8011e78:	ed9f 7b53 	vldr	d7, [pc, #332]	; 8011fc8 <__ieee754_asin+0x1a8>
 8011e7c:	ee30 7b07 	vadd.f64	d7, d0, d7
 8011e80:	eeb4 7bc9 	vcmpe.f64	d7, d9
 8011e84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011e88:	dce6      	bgt.n	8011e58 <__ieee754_asin+0x38>
 8011e8a:	eeb6 8b00 	vmov.f64	d8, #96	; 0x3f000000  0.5
 8011e8e:	f000 f94b 	bl	8012128 <fabs>
 8011e92:	ed9f 7b4f 	vldr	d7, [pc, #316]	; 8011fd0 <__ieee754_asin+0x1b0>
 8011e96:	ee39 0b40 	vsub.f64	d0, d9, d0
 8011e9a:	ee20 8b08 	vmul.f64	d8, d0, d8
 8011e9e:	ed9f 6b4e 	vldr	d6, [pc, #312]	; 8011fd8 <__ieee754_asin+0x1b8>
 8011ea2:	eeb0 0b48 	vmov.f64	d0, d8
 8011ea6:	eea8 6b07 	vfma.f64	d6, d8, d7
 8011eaa:	ed9f 7b4d 	vldr	d7, [pc, #308]	; 8011fe0 <__ieee754_asin+0x1c0>
 8011eae:	eea6 7b08 	vfma.f64	d7, d6, d8
 8011eb2:	ed9f 6b4d 	vldr	d6, [pc, #308]	; 8011fe8 <__ieee754_asin+0x1c8>
 8011eb6:	ed9f ab4e 	vldr	d10, [pc, #312]	; 8011ff0 <__ieee754_asin+0x1d0>
 8011eba:	eea7 6b08 	vfma.f64	d6, d7, d8
 8011ebe:	ed9f 7b4e 	vldr	d7, [pc, #312]	; 8011ff8 <__ieee754_asin+0x1d8>
 8011ec2:	eea6 7b08 	vfma.f64	d7, d6, d8
 8011ec6:	ed9f 6b4e 	vldr	d6, [pc, #312]	; 8012000 <__ieee754_asin+0x1e0>
 8011eca:	eea7 ab08 	vfma.f64	d10, d7, d8
 8011ece:	ee2a ab08 	vmul.f64	d10, d10, d8
 8011ed2:	ed9f 7b4d 	vldr	d7, [pc, #308]	; 8012008 <__ieee754_asin+0x1e8>
 8011ed6:	eea8 7b06 	vfma.f64	d7, d8, d6
 8011eda:	ed9f 6b4d 	vldr	d6, [pc, #308]	; 8012010 <__ieee754_asin+0x1f0>
 8011ede:	eea7 6b08 	vfma.f64	d6, d7, d8
 8011ee2:	ed9f 7b4d 	vldr	d7, [pc, #308]	; 8012018 <__ieee754_asin+0x1f8>
 8011ee6:	eea6 7b08 	vfma.f64	d7, d6, d8
 8011eea:	eea7 9b08 	vfma.f64	d9, d7, d8
 8011eee:	f000 f8a5 	bl	801203c <__ieee754_sqrt>
 8011ef2:	ee8a 5b09 	vdiv.f64	d5, d10, d9
 8011ef6:	eeb0 4b00 	vmov.f64	d4, #0	; 0x40000000  2.0
 8011efa:	4b4f      	ldr	r3, [pc, #316]	; (8012038 <__ieee754_asin+0x218>)
 8011efc:	429c      	cmp	r4, r3
 8011efe:	dd3d      	ble.n	8011f7c <__ieee754_asin+0x15c>
 8011f00:	eea0 0b05 	vfma.f64	d0, d0, d5
 8011f04:	ed9f 7b46 	vldr	d7, [pc, #280]	; 8012020 <__ieee754_asin+0x200>
 8011f08:	eea0 7b04 	vfma.f64	d7, d0, d4
 8011f0c:	ed9f 0b2c 	vldr	d0, [pc, #176]	; 8011fc0 <__ieee754_asin+0x1a0>
 8011f10:	ee30 0b47 	vsub.f64	d0, d0, d7
 8011f14:	2d00      	cmp	r5, #0
 8011f16:	bfd8      	it	le
 8011f18:	eeb1 0b40 	vnegle.f64	d0, d0
 8011f1c:	e79c      	b.n	8011e58 <__ieee754_asin+0x38>
 8011f1e:	ed9f 5b2c 	vldr	d5, [pc, #176]	; 8011fd0 <__ieee754_asin+0x1b0>
 8011f22:	ee20 7b00 	vmul.f64	d7, d0, d0
 8011f26:	ed9f 6b2c 	vldr	d6, [pc, #176]	; 8011fd8 <__ieee754_asin+0x1b8>
 8011f2a:	eea7 6b05 	vfma.f64	d6, d7, d5
 8011f2e:	ed9f 5b2c 	vldr	d5, [pc, #176]	; 8011fe0 <__ieee754_asin+0x1c0>
 8011f32:	eea6 5b07 	vfma.f64	d5, d6, d7
 8011f36:	ed9f 6b2c 	vldr	d6, [pc, #176]	; 8011fe8 <__ieee754_asin+0x1c8>
 8011f3a:	eea5 6b07 	vfma.f64	d6, d5, d7
 8011f3e:	ed9f 5b2e 	vldr	d5, [pc, #184]	; 8011ff8 <__ieee754_asin+0x1d8>
 8011f42:	eea6 5b07 	vfma.f64	d5, d6, d7
 8011f46:	ed9f 6b2a 	vldr	d6, [pc, #168]	; 8011ff0 <__ieee754_asin+0x1d0>
 8011f4a:	ed9f 4b2d 	vldr	d4, [pc, #180]	; 8012000 <__ieee754_asin+0x1e0>
 8011f4e:	eea5 6b07 	vfma.f64	d6, d5, d7
 8011f52:	ee26 6b07 	vmul.f64	d6, d6, d7
 8011f56:	ed9f 5b2c 	vldr	d5, [pc, #176]	; 8012008 <__ieee754_asin+0x1e8>
 8011f5a:	eea7 5b04 	vfma.f64	d5, d7, d4
 8011f5e:	ed9f 4b2c 	vldr	d4, [pc, #176]	; 8012010 <__ieee754_asin+0x1f0>
 8011f62:	eea5 4b07 	vfma.f64	d4, d5, d7
 8011f66:	ed9f 5b2c 	vldr	d5, [pc, #176]	; 8012018 <__ieee754_asin+0x1f8>
 8011f6a:	eea4 5b07 	vfma.f64	d5, d4, d7
 8011f6e:	eea5 9b07 	vfma.f64	d9, d5, d7
 8011f72:	ee86 7b09 	vdiv.f64	d7, d6, d9
 8011f76:	eea0 0b07 	vfma.f64	d0, d0, d7
 8011f7a:	e76d      	b.n	8011e58 <__ieee754_asin+0x38>
 8011f7c:	ec53 2b10 	vmov	r2, r3, d0
 8011f80:	2200      	movs	r2, #0
 8011f82:	ec43 2b16 	vmov	d6, r2, r3
 8011f86:	ee30 7b06 	vadd.f64	d7, d0, d6
 8011f8a:	eea6 8b46 	vfms.f64	d8, d6, d6
 8011f8e:	ee88 3b07 	vdiv.f64	d3, d8, d7
 8011f92:	ed9f 7b09 	vldr	d7, [pc, #36]	; 8011fb8 <__ieee754_asin+0x198>
 8011f96:	ee30 0b00 	vadd.f64	d0, d0, d0
 8011f9a:	eea3 7b44 	vfms.f64	d7, d3, d4
 8011f9e:	ee90 7b05 	vfnms.f64	d7, d0, d5
 8011fa2:	ed9f 5b21 	vldr	d5, [pc, #132]	; 8012028 <__ieee754_asin+0x208>
 8011fa6:	eeb0 0b45 	vmov.f64	d0, d5
 8011faa:	eea6 0b44 	vfms.f64	d0, d6, d4
 8011fae:	ee37 0b40 	vsub.f64	d0, d7, d0
 8011fb2:	ee35 0b40 	vsub.f64	d0, d5, d0
 8011fb6:	e7ad      	b.n	8011f14 <__ieee754_asin+0xf4>
 8011fb8:	33145c07 	.word	0x33145c07
 8011fbc:	3c91a626 	.word	0x3c91a626
 8011fc0:	54442d18 	.word	0x54442d18
 8011fc4:	3ff921fb 	.word	0x3ff921fb
 8011fc8:	8800759c 	.word	0x8800759c
 8011fcc:	7e37e43c 	.word	0x7e37e43c
 8011fd0:	0dfdf709 	.word	0x0dfdf709
 8011fd4:	3f023de1 	.word	0x3f023de1
 8011fd8:	7501b288 	.word	0x7501b288
 8011fdc:	3f49efe0 	.word	0x3f49efe0
 8011fe0:	b5688f3b 	.word	0xb5688f3b
 8011fe4:	bfa48228 	.word	0xbfa48228
 8011fe8:	0e884455 	.word	0x0e884455
 8011fec:	3fc9c155 	.word	0x3fc9c155
 8011ff0:	55555555 	.word	0x55555555
 8011ff4:	3fc55555 	.word	0x3fc55555
 8011ff8:	03eb6f7d 	.word	0x03eb6f7d
 8011ffc:	bfd4d612 	.word	0xbfd4d612
 8012000:	b12e9282 	.word	0xb12e9282
 8012004:	3fb3b8c5 	.word	0x3fb3b8c5
 8012008:	1b8d0159 	.word	0x1b8d0159
 801200c:	bfe6066c 	.word	0xbfe6066c
 8012010:	9c598ac8 	.word	0x9c598ac8
 8012014:	40002ae5 	.word	0x40002ae5
 8012018:	1c8a2d4b 	.word	0x1c8a2d4b
 801201c:	c0033a27 	.word	0xc0033a27
 8012020:	33145c07 	.word	0x33145c07
 8012024:	bc91a626 	.word	0xbc91a626
 8012028:	54442d18 	.word	0x54442d18
 801202c:	3fe921fb 	.word	0x3fe921fb
 8012030:	3fefffff 	.word	0x3fefffff
 8012034:	3fdfffff 	.word	0x3fdfffff
 8012038:	3fef3332 	.word	0x3fef3332

0801203c <__ieee754_sqrt>:
 801203c:	eeb1 0bc0 	vsqrt.f64	d0, d0
 8012040:	4770      	bx	lr

08012042 <with_errno>:
 8012042:	b513      	push	{r0, r1, r4, lr}
 8012044:	4604      	mov	r4, r0
 8012046:	ed8d 0b00 	vstr	d0, [sp]
 801204a:	f7fc fa67 	bl	800e51c <__errno>
 801204e:	ed9d 0b00 	vldr	d0, [sp]
 8012052:	6004      	str	r4, [r0, #0]
 8012054:	b002      	add	sp, #8
 8012056:	bd10      	pop	{r4, pc}

08012058 <xflow>:
 8012058:	b082      	sub	sp, #8
 801205a:	b158      	cbz	r0, 8012074 <xflow+0x1c>
 801205c:	eeb1 7b40 	vneg.f64	d7, d0
 8012060:	ed8d 7b00 	vstr	d7, [sp]
 8012064:	ed9d 7b00 	vldr	d7, [sp]
 8012068:	2022      	movs	r0, #34	; 0x22
 801206a:	ee20 0b07 	vmul.f64	d0, d0, d7
 801206e:	b002      	add	sp, #8
 8012070:	f7ff bfe7 	b.w	8012042 <with_errno>
 8012074:	eeb0 7b40 	vmov.f64	d7, d0
 8012078:	e7f2      	b.n	8012060 <xflow+0x8>
 801207a:	0000      	movs	r0, r0
 801207c:	0000      	movs	r0, r0
	...

08012080 <__math_uflow>:
 8012080:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8012088 <__math_uflow+0x8>
 8012084:	f7ff bfe8 	b.w	8012058 <xflow>
 8012088:	00000000 	.word	0x00000000
 801208c:	10000000 	.word	0x10000000

08012090 <__math_oflow>:
 8012090:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8012098 <__math_oflow+0x8>
 8012094:	f7ff bfe0 	b.w	8012058 <xflow>
 8012098:	00000000 	.word	0x00000000
 801209c:	70000000 	.word	0x70000000

080120a0 <__math_divzero>:
 80120a0:	b082      	sub	sp, #8
 80120a2:	2800      	cmp	r0, #0
 80120a4:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 80120a8:	eebf 7b00 	vmov.f64	d7, #240	; 0xbf800000 -1.0
 80120ac:	fe06 7b07 	vseleq.f64	d7, d6, d7
 80120b0:	ed8d 7b00 	vstr	d7, [sp]
 80120b4:	ed9d 0b00 	vldr	d0, [sp]
 80120b8:	ed9f 7b03 	vldr	d7, [pc, #12]	; 80120c8 <__math_divzero+0x28>
 80120bc:	2022      	movs	r0, #34	; 0x22
 80120be:	ee80 0b07 	vdiv.f64	d0, d0, d7
 80120c2:	b002      	add	sp, #8
 80120c4:	f7ff bfbd 	b.w	8012042 <with_errno>
	...

080120d0 <__math_invalid>:
 80120d0:	eeb0 7b40 	vmov.f64	d7, d0
 80120d4:	eeb4 7b47 	vcmp.f64	d7, d7
 80120d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80120dc:	ee30 6b40 	vsub.f64	d6, d0, d0
 80120e0:	ee86 0b06 	vdiv.f64	d0, d6, d6
 80120e4:	d602      	bvs.n	80120ec <__math_invalid+0x1c>
 80120e6:	2021      	movs	r0, #33	; 0x21
 80120e8:	f7ff bfab 	b.w	8012042 <with_errno>
 80120ec:	4770      	bx	lr

080120ee <__math_check_uflow>:
 80120ee:	eeb5 0b40 	vcmp.f64	d0, #0.0
 80120f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80120f6:	d102      	bne.n	80120fe <__math_check_uflow+0x10>
 80120f8:	2022      	movs	r0, #34	; 0x22
 80120fa:	f7ff bfa2 	b.w	8012042 <with_errno>
 80120fe:	4770      	bx	lr

08012100 <__math_check_oflow>:
 8012100:	ed9f 6b07 	vldr	d6, [pc, #28]	; 8012120 <__math_check_oflow+0x20>
 8012104:	eeb0 7bc0 	vabs.f64	d7, d0
 8012108:	eeb4 7b46 	vcmp.f64	d7, d6
 801210c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012110:	dd02      	ble.n	8012118 <__math_check_oflow+0x18>
 8012112:	2022      	movs	r0, #34	; 0x22
 8012114:	f7ff bf95 	b.w	8012042 <with_errno>
 8012118:	4770      	bx	lr
 801211a:	bf00      	nop
 801211c:	f3af 8000 	nop.w
 8012120:	ffffffff 	.word	0xffffffff
 8012124:	7fefffff 	.word	0x7fefffff

08012128 <fabs>:
 8012128:	ec51 0b10 	vmov	r0, r1, d0
 801212c:	ee10 2a10 	vmov	r2, s0
 8012130:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8012134:	ec43 2b10 	vmov	d0, r2, r3
 8012138:	4770      	bx	lr
	...

0801213c <_init>:
 801213c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801213e:	bf00      	nop
 8012140:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012142:	bc08      	pop	{r3}
 8012144:	469e      	mov	lr, r3
 8012146:	4770      	bx	lr

08012148 <_fini>:
 8012148:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801214a:	bf00      	nop
 801214c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801214e:	bc08      	pop	{r3}
 8012150:	469e      	mov	lr, r3
 8012152:	4770      	bx	lr
