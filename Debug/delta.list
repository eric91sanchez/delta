
delta.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00011ff4  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001e28  08012298  08012298  00022298  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080140c0  080140c0  00030284  2**0
                  CONTENTS
  4 .ARM          00000008  080140c0  080140c0  000240c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080140c8  080140c8  00030284  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080140c8  080140c8  000240c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080140cc  080140cc  000240cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000284  24000000  080140d0  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000ac4  24000288  08014354  00030288  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  24000d4c  08014354  00030d4c  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00030284  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001c155  00000000  00000000  000302b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000357b  00000000  00000000  0004c407  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001328  00000000  00000000  0004f988  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000011b0  00000000  00000000  00050cb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00039536  00000000  00000000  00051e60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001d072  00000000  00000000  0008b396  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001652fc  00000000  00000000  000a8408  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0020d704  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006268  00000000  00000000  0020d754  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000288 	.word	0x24000288
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0801227c 	.word	0x0801227c

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	2400028c 	.word	0x2400028c
 80002dc:	0801227c 	.word	0x0801227c

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_drsub>:
 8000390:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000394:	e002      	b.n	800039c <__adddf3>
 8000396:	bf00      	nop

08000398 <__aeabi_dsub>:
 8000398:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800039c <__adddf3>:
 800039c:	b530      	push	{r4, r5, lr}
 800039e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003a6:	ea94 0f05 	teq	r4, r5
 80003aa:	bf08      	it	eq
 80003ac:	ea90 0f02 	teqeq	r0, r2
 80003b0:	bf1f      	itttt	ne
 80003b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003c2:	f000 80e2 	beq.w	800058a <__adddf3+0x1ee>
 80003c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003ce:	bfb8      	it	lt
 80003d0:	426d      	neglt	r5, r5
 80003d2:	dd0c      	ble.n	80003ee <__adddf3+0x52>
 80003d4:	442c      	add	r4, r5
 80003d6:	ea80 0202 	eor.w	r2, r0, r2
 80003da:	ea81 0303 	eor.w	r3, r1, r3
 80003de:	ea82 0000 	eor.w	r0, r2, r0
 80003e2:	ea83 0101 	eor.w	r1, r3, r1
 80003e6:	ea80 0202 	eor.w	r2, r0, r2
 80003ea:	ea81 0303 	eor.w	r3, r1, r3
 80003ee:	2d36      	cmp	r5, #54	; 0x36
 80003f0:	bf88      	it	hi
 80003f2:	bd30      	pophi	{r4, r5, pc}
 80003f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80003f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80003fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000400:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000404:	d002      	beq.n	800040c <__adddf3+0x70>
 8000406:	4240      	negs	r0, r0
 8000408:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800040c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000410:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000414:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000418:	d002      	beq.n	8000420 <__adddf3+0x84>
 800041a:	4252      	negs	r2, r2
 800041c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000420:	ea94 0f05 	teq	r4, r5
 8000424:	f000 80a7 	beq.w	8000576 <__adddf3+0x1da>
 8000428:	f1a4 0401 	sub.w	r4, r4, #1
 800042c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000430:	db0d      	blt.n	800044e <__adddf3+0xb2>
 8000432:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000436:	fa22 f205 	lsr.w	r2, r2, r5
 800043a:	1880      	adds	r0, r0, r2
 800043c:	f141 0100 	adc.w	r1, r1, #0
 8000440:	fa03 f20e 	lsl.w	r2, r3, lr
 8000444:	1880      	adds	r0, r0, r2
 8000446:	fa43 f305 	asr.w	r3, r3, r5
 800044a:	4159      	adcs	r1, r3
 800044c:	e00e      	b.n	800046c <__adddf3+0xd0>
 800044e:	f1a5 0520 	sub.w	r5, r5, #32
 8000452:	f10e 0e20 	add.w	lr, lr, #32
 8000456:	2a01      	cmp	r2, #1
 8000458:	fa03 fc0e 	lsl.w	ip, r3, lr
 800045c:	bf28      	it	cs
 800045e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000462:	fa43 f305 	asr.w	r3, r3, r5
 8000466:	18c0      	adds	r0, r0, r3
 8000468:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800046c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000470:	d507      	bpl.n	8000482 <__adddf3+0xe6>
 8000472:	f04f 0e00 	mov.w	lr, #0
 8000476:	f1dc 0c00 	rsbs	ip, ip, #0
 800047a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800047e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000482:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000486:	d31b      	bcc.n	80004c0 <__adddf3+0x124>
 8000488:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800048c:	d30c      	bcc.n	80004a8 <__adddf3+0x10c>
 800048e:	0849      	lsrs	r1, r1, #1
 8000490:	ea5f 0030 	movs.w	r0, r0, rrx
 8000494:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000498:	f104 0401 	add.w	r4, r4, #1
 800049c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80004a4:	f080 809a 	bcs.w	80005dc <__adddf3+0x240>
 80004a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80004ac:	bf08      	it	eq
 80004ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004b2:	f150 0000 	adcs.w	r0, r0, #0
 80004b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004ba:	ea41 0105 	orr.w	r1, r1, r5
 80004be:	bd30      	pop	{r4, r5, pc}
 80004c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004c4:	4140      	adcs	r0, r0
 80004c6:	eb41 0101 	adc.w	r1, r1, r1
 80004ca:	3c01      	subs	r4, #1
 80004cc:	bf28      	it	cs
 80004ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80004d2:	d2e9      	bcs.n	80004a8 <__adddf3+0x10c>
 80004d4:	f091 0f00 	teq	r1, #0
 80004d8:	bf04      	itt	eq
 80004da:	4601      	moveq	r1, r0
 80004dc:	2000      	moveq	r0, #0
 80004de:	fab1 f381 	clz	r3, r1
 80004e2:	bf08      	it	eq
 80004e4:	3320      	addeq	r3, #32
 80004e6:	f1a3 030b 	sub.w	r3, r3, #11
 80004ea:	f1b3 0220 	subs.w	r2, r3, #32
 80004ee:	da0c      	bge.n	800050a <__adddf3+0x16e>
 80004f0:	320c      	adds	r2, #12
 80004f2:	dd08      	ble.n	8000506 <__adddf3+0x16a>
 80004f4:	f102 0c14 	add.w	ip, r2, #20
 80004f8:	f1c2 020c 	rsb	r2, r2, #12
 80004fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000500:	fa21 f102 	lsr.w	r1, r1, r2
 8000504:	e00c      	b.n	8000520 <__adddf3+0x184>
 8000506:	f102 0214 	add.w	r2, r2, #20
 800050a:	bfd8      	it	le
 800050c:	f1c2 0c20 	rsble	ip, r2, #32
 8000510:	fa01 f102 	lsl.w	r1, r1, r2
 8000514:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000518:	bfdc      	itt	le
 800051a:	ea41 010c 	orrle.w	r1, r1, ip
 800051e:	4090      	lslle	r0, r2
 8000520:	1ae4      	subs	r4, r4, r3
 8000522:	bfa2      	ittt	ge
 8000524:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000528:	4329      	orrge	r1, r5
 800052a:	bd30      	popge	{r4, r5, pc}
 800052c:	ea6f 0404 	mvn.w	r4, r4
 8000530:	3c1f      	subs	r4, #31
 8000532:	da1c      	bge.n	800056e <__adddf3+0x1d2>
 8000534:	340c      	adds	r4, #12
 8000536:	dc0e      	bgt.n	8000556 <__adddf3+0x1ba>
 8000538:	f104 0414 	add.w	r4, r4, #20
 800053c:	f1c4 0220 	rsb	r2, r4, #32
 8000540:	fa20 f004 	lsr.w	r0, r0, r4
 8000544:	fa01 f302 	lsl.w	r3, r1, r2
 8000548:	ea40 0003 	orr.w	r0, r0, r3
 800054c:	fa21 f304 	lsr.w	r3, r1, r4
 8000550:	ea45 0103 	orr.w	r1, r5, r3
 8000554:	bd30      	pop	{r4, r5, pc}
 8000556:	f1c4 040c 	rsb	r4, r4, #12
 800055a:	f1c4 0220 	rsb	r2, r4, #32
 800055e:	fa20 f002 	lsr.w	r0, r0, r2
 8000562:	fa01 f304 	lsl.w	r3, r1, r4
 8000566:	ea40 0003 	orr.w	r0, r0, r3
 800056a:	4629      	mov	r1, r5
 800056c:	bd30      	pop	{r4, r5, pc}
 800056e:	fa21 f004 	lsr.w	r0, r1, r4
 8000572:	4629      	mov	r1, r5
 8000574:	bd30      	pop	{r4, r5, pc}
 8000576:	f094 0f00 	teq	r4, #0
 800057a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800057e:	bf06      	itte	eq
 8000580:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000584:	3401      	addeq	r4, #1
 8000586:	3d01      	subne	r5, #1
 8000588:	e74e      	b.n	8000428 <__adddf3+0x8c>
 800058a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800058e:	bf18      	it	ne
 8000590:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000594:	d029      	beq.n	80005ea <__adddf3+0x24e>
 8000596:	ea94 0f05 	teq	r4, r5
 800059a:	bf08      	it	eq
 800059c:	ea90 0f02 	teqeq	r0, r2
 80005a0:	d005      	beq.n	80005ae <__adddf3+0x212>
 80005a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80005a6:	bf04      	itt	eq
 80005a8:	4619      	moveq	r1, r3
 80005aa:	4610      	moveq	r0, r2
 80005ac:	bd30      	pop	{r4, r5, pc}
 80005ae:	ea91 0f03 	teq	r1, r3
 80005b2:	bf1e      	ittt	ne
 80005b4:	2100      	movne	r1, #0
 80005b6:	2000      	movne	r0, #0
 80005b8:	bd30      	popne	{r4, r5, pc}
 80005ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005be:	d105      	bne.n	80005cc <__adddf3+0x230>
 80005c0:	0040      	lsls	r0, r0, #1
 80005c2:	4149      	adcs	r1, r1
 80005c4:	bf28      	it	cs
 80005c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80005ca:	bd30      	pop	{r4, r5, pc}
 80005cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80005d0:	bf3c      	itt	cc
 80005d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80005d6:	bd30      	popcc	{r4, r5, pc}
 80005d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80005e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80005e4:	f04f 0000 	mov.w	r0, #0
 80005e8:	bd30      	pop	{r4, r5, pc}
 80005ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005ee:	bf1a      	itte	ne
 80005f0:	4619      	movne	r1, r3
 80005f2:	4610      	movne	r0, r2
 80005f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80005f8:	bf1c      	itt	ne
 80005fa:	460b      	movne	r3, r1
 80005fc:	4602      	movne	r2, r0
 80005fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000602:	bf06      	itte	eq
 8000604:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000608:	ea91 0f03 	teqeq	r1, r3
 800060c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000610:	bd30      	pop	{r4, r5, pc}
 8000612:	bf00      	nop

08000614 <__aeabi_ui2d>:
 8000614:	f090 0f00 	teq	r0, #0
 8000618:	bf04      	itt	eq
 800061a:	2100      	moveq	r1, #0
 800061c:	4770      	bxeq	lr
 800061e:	b530      	push	{r4, r5, lr}
 8000620:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000624:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000628:	f04f 0500 	mov.w	r5, #0
 800062c:	f04f 0100 	mov.w	r1, #0
 8000630:	e750      	b.n	80004d4 <__adddf3+0x138>
 8000632:	bf00      	nop

08000634 <__aeabi_i2d>:
 8000634:	f090 0f00 	teq	r0, #0
 8000638:	bf04      	itt	eq
 800063a:	2100      	moveq	r1, #0
 800063c:	4770      	bxeq	lr
 800063e:	b530      	push	{r4, r5, lr}
 8000640:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000644:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000648:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800064c:	bf48      	it	mi
 800064e:	4240      	negmi	r0, r0
 8000650:	f04f 0100 	mov.w	r1, #0
 8000654:	e73e      	b.n	80004d4 <__adddf3+0x138>
 8000656:	bf00      	nop

08000658 <__aeabi_f2d>:
 8000658:	0042      	lsls	r2, r0, #1
 800065a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800065e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000662:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000666:	bf1f      	itttt	ne
 8000668:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800066c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000670:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000674:	4770      	bxne	lr
 8000676:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800067a:	bf08      	it	eq
 800067c:	4770      	bxeq	lr
 800067e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000682:	bf04      	itt	eq
 8000684:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000688:	4770      	bxeq	lr
 800068a:	b530      	push	{r4, r5, lr}
 800068c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000690:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000694:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000698:	e71c      	b.n	80004d4 <__adddf3+0x138>
 800069a:	bf00      	nop

0800069c <__aeabi_ul2d>:
 800069c:	ea50 0201 	orrs.w	r2, r0, r1
 80006a0:	bf08      	it	eq
 80006a2:	4770      	bxeq	lr
 80006a4:	b530      	push	{r4, r5, lr}
 80006a6:	f04f 0500 	mov.w	r5, #0
 80006aa:	e00a      	b.n	80006c2 <__aeabi_l2d+0x16>

080006ac <__aeabi_l2d>:
 80006ac:	ea50 0201 	orrs.w	r2, r0, r1
 80006b0:	bf08      	it	eq
 80006b2:	4770      	bxeq	lr
 80006b4:	b530      	push	{r4, r5, lr}
 80006b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80006ba:	d502      	bpl.n	80006c2 <__aeabi_l2d+0x16>
 80006bc:	4240      	negs	r0, r0
 80006be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006ce:	f43f aed8 	beq.w	8000482 <__adddf3+0xe6>
 80006d2:	f04f 0203 	mov.w	r2, #3
 80006d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006da:	bf18      	it	ne
 80006dc:	3203      	addne	r2, #3
 80006de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006e2:	bf18      	it	ne
 80006e4:	3203      	addne	r2, #3
 80006e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80006ea:	f1c2 0320 	rsb	r3, r2, #32
 80006ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80006f2:	fa20 f002 	lsr.w	r0, r0, r2
 80006f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80006fa:	ea40 000e 	orr.w	r0, r0, lr
 80006fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000702:	4414      	add	r4, r2
 8000704:	e6bd      	b.n	8000482 <__adddf3+0xe6>
 8000706:	bf00      	nop

08000708 <__aeabi_uldivmod>:
 8000708:	b953      	cbnz	r3, 8000720 <__aeabi_uldivmod+0x18>
 800070a:	b94a      	cbnz	r2, 8000720 <__aeabi_uldivmod+0x18>
 800070c:	2900      	cmp	r1, #0
 800070e:	bf08      	it	eq
 8000710:	2800      	cmpeq	r0, #0
 8000712:	bf1c      	itt	ne
 8000714:	f04f 31ff 	movne.w	r1, #4294967295
 8000718:	f04f 30ff 	movne.w	r0, #4294967295
 800071c:	f000 b9ac 	b.w	8000a78 <__aeabi_idiv0>
 8000720:	f1ad 0c08 	sub.w	ip, sp, #8
 8000724:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000728:	f000 f83e 	bl	80007a8 <__udivmoddi4>
 800072c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000730:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000734:	b004      	add	sp, #16
 8000736:	4770      	bx	lr

08000738 <__aeabi_d2lz>:
 8000738:	b508      	push	{r3, lr}
 800073a:	4602      	mov	r2, r0
 800073c:	460b      	mov	r3, r1
 800073e:	ec43 2b17 	vmov	d7, r2, r3
 8000742:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8000746:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800074a:	d403      	bmi.n	8000754 <__aeabi_d2lz+0x1c>
 800074c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8000750:	f000 b80a 	b.w	8000768 <__aeabi_d2ulz>
 8000754:	eeb1 7b47 	vneg.f64	d7, d7
 8000758:	ec51 0b17 	vmov	r0, r1, d7
 800075c:	f000 f804 	bl	8000768 <__aeabi_d2ulz>
 8000760:	4240      	negs	r0, r0
 8000762:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000766:	bd08      	pop	{r3, pc}

08000768 <__aeabi_d2ulz>:
 8000768:	ed9f 6b0b 	vldr	d6, [pc, #44]	; 8000798 <__aeabi_d2ulz+0x30>
 800076c:	ec41 0b17 	vmov	d7, r0, r1
 8000770:	ed9f 5b0b 	vldr	d5, [pc, #44]	; 80007a0 <__aeabi_d2ulz+0x38>
 8000774:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000778:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 800077c:	eeb8 4b46 	vcvt.f64.u32	d4, s12
 8000780:	eea4 7b45 	vfms.f64	d7, d4, d5
 8000784:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000788:	ee16 1a10 	vmov	r1, s12
 800078c:	ee17 0a90 	vmov	r0, s15
 8000790:	4770      	bx	lr
 8000792:	bf00      	nop
 8000794:	f3af 8000 	nop.w
 8000798:	00000000 	.word	0x00000000
 800079c:	3df00000 	.word	0x3df00000
 80007a0:	00000000 	.word	0x00000000
 80007a4:	41f00000 	.word	0x41f00000

080007a8 <__udivmoddi4>:
 80007a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80007ac:	9d08      	ldr	r5, [sp, #32]
 80007ae:	4604      	mov	r4, r0
 80007b0:	468e      	mov	lr, r1
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	d14d      	bne.n	8000852 <__udivmoddi4+0xaa>
 80007b6:	428a      	cmp	r2, r1
 80007b8:	4694      	mov	ip, r2
 80007ba:	d969      	bls.n	8000890 <__udivmoddi4+0xe8>
 80007bc:	fab2 f282 	clz	r2, r2
 80007c0:	b152      	cbz	r2, 80007d8 <__udivmoddi4+0x30>
 80007c2:	fa01 f302 	lsl.w	r3, r1, r2
 80007c6:	f1c2 0120 	rsb	r1, r2, #32
 80007ca:	fa20 f101 	lsr.w	r1, r0, r1
 80007ce:	fa0c fc02 	lsl.w	ip, ip, r2
 80007d2:	ea41 0e03 	orr.w	lr, r1, r3
 80007d6:	4094      	lsls	r4, r2
 80007d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80007dc:	0c21      	lsrs	r1, r4, #16
 80007de:	fbbe f6f8 	udiv	r6, lr, r8
 80007e2:	fa1f f78c 	uxth.w	r7, ip
 80007e6:	fb08 e316 	mls	r3, r8, r6, lr
 80007ea:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80007ee:	fb06 f107 	mul.w	r1, r6, r7
 80007f2:	4299      	cmp	r1, r3
 80007f4:	d90a      	bls.n	800080c <__udivmoddi4+0x64>
 80007f6:	eb1c 0303 	adds.w	r3, ip, r3
 80007fa:	f106 30ff 	add.w	r0, r6, #4294967295
 80007fe:	f080 811f 	bcs.w	8000a40 <__udivmoddi4+0x298>
 8000802:	4299      	cmp	r1, r3
 8000804:	f240 811c 	bls.w	8000a40 <__udivmoddi4+0x298>
 8000808:	3e02      	subs	r6, #2
 800080a:	4463      	add	r3, ip
 800080c:	1a5b      	subs	r3, r3, r1
 800080e:	b2a4      	uxth	r4, r4
 8000810:	fbb3 f0f8 	udiv	r0, r3, r8
 8000814:	fb08 3310 	mls	r3, r8, r0, r3
 8000818:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800081c:	fb00 f707 	mul.w	r7, r0, r7
 8000820:	42a7      	cmp	r7, r4
 8000822:	d90a      	bls.n	800083a <__udivmoddi4+0x92>
 8000824:	eb1c 0404 	adds.w	r4, ip, r4
 8000828:	f100 33ff 	add.w	r3, r0, #4294967295
 800082c:	f080 810a 	bcs.w	8000a44 <__udivmoddi4+0x29c>
 8000830:	42a7      	cmp	r7, r4
 8000832:	f240 8107 	bls.w	8000a44 <__udivmoddi4+0x29c>
 8000836:	4464      	add	r4, ip
 8000838:	3802      	subs	r0, #2
 800083a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800083e:	1be4      	subs	r4, r4, r7
 8000840:	2600      	movs	r6, #0
 8000842:	b11d      	cbz	r5, 800084c <__udivmoddi4+0xa4>
 8000844:	40d4      	lsrs	r4, r2
 8000846:	2300      	movs	r3, #0
 8000848:	e9c5 4300 	strd	r4, r3, [r5]
 800084c:	4631      	mov	r1, r6
 800084e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000852:	428b      	cmp	r3, r1
 8000854:	d909      	bls.n	800086a <__udivmoddi4+0xc2>
 8000856:	2d00      	cmp	r5, #0
 8000858:	f000 80ef 	beq.w	8000a3a <__udivmoddi4+0x292>
 800085c:	2600      	movs	r6, #0
 800085e:	e9c5 0100 	strd	r0, r1, [r5]
 8000862:	4630      	mov	r0, r6
 8000864:	4631      	mov	r1, r6
 8000866:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800086a:	fab3 f683 	clz	r6, r3
 800086e:	2e00      	cmp	r6, #0
 8000870:	d14a      	bne.n	8000908 <__udivmoddi4+0x160>
 8000872:	428b      	cmp	r3, r1
 8000874:	d302      	bcc.n	800087c <__udivmoddi4+0xd4>
 8000876:	4282      	cmp	r2, r0
 8000878:	f200 80f9 	bhi.w	8000a6e <__udivmoddi4+0x2c6>
 800087c:	1a84      	subs	r4, r0, r2
 800087e:	eb61 0303 	sbc.w	r3, r1, r3
 8000882:	2001      	movs	r0, #1
 8000884:	469e      	mov	lr, r3
 8000886:	2d00      	cmp	r5, #0
 8000888:	d0e0      	beq.n	800084c <__udivmoddi4+0xa4>
 800088a:	e9c5 4e00 	strd	r4, lr, [r5]
 800088e:	e7dd      	b.n	800084c <__udivmoddi4+0xa4>
 8000890:	b902      	cbnz	r2, 8000894 <__udivmoddi4+0xec>
 8000892:	deff      	udf	#255	; 0xff
 8000894:	fab2 f282 	clz	r2, r2
 8000898:	2a00      	cmp	r2, #0
 800089a:	f040 8092 	bne.w	80009c2 <__udivmoddi4+0x21a>
 800089e:	eba1 010c 	sub.w	r1, r1, ip
 80008a2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80008a6:	fa1f fe8c 	uxth.w	lr, ip
 80008aa:	2601      	movs	r6, #1
 80008ac:	0c20      	lsrs	r0, r4, #16
 80008ae:	fbb1 f3f7 	udiv	r3, r1, r7
 80008b2:	fb07 1113 	mls	r1, r7, r3, r1
 80008b6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80008ba:	fb0e f003 	mul.w	r0, lr, r3
 80008be:	4288      	cmp	r0, r1
 80008c0:	d908      	bls.n	80008d4 <__udivmoddi4+0x12c>
 80008c2:	eb1c 0101 	adds.w	r1, ip, r1
 80008c6:	f103 38ff 	add.w	r8, r3, #4294967295
 80008ca:	d202      	bcs.n	80008d2 <__udivmoddi4+0x12a>
 80008cc:	4288      	cmp	r0, r1
 80008ce:	f200 80cb 	bhi.w	8000a68 <__udivmoddi4+0x2c0>
 80008d2:	4643      	mov	r3, r8
 80008d4:	1a09      	subs	r1, r1, r0
 80008d6:	b2a4      	uxth	r4, r4
 80008d8:	fbb1 f0f7 	udiv	r0, r1, r7
 80008dc:	fb07 1110 	mls	r1, r7, r0, r1
 80008e0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80008e4:	fb0e fe00 	mul.w	lr, lr, r0
 80008e8:	45a6      	cmp	lr, r4
 80008ea:	d908      	bls.n	80008fe <__udivmoddi4+0x156>
 80008ec:	eb1c 0404 	adds.w	r4, ip, r4
 80008f0:	f100 31ff 	add.w	r1, r0, #4294967295
 80008f4:	d202      	bcs.n	80008fc <__udivmoddi4+0x154>
 80008f6:	45a6      	cmp	lr, r4
 80008f8:	f200 80bb 	bhi.w	8000a72 <__udivmoddi4+0x2ca>
 80008fc:	4608      	mov	r0, r1
 80008fe:	eba4 040e 	sub.w	r4, r4, lr
 8000902:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000906:	e79c      	b.n	8000842 <__udivmoddi4+0x9a>
 8000908:	f1c6 0720 	rsb	r7, r6, #32
 800090c:	40b3      	lsls	r3, r6
 800090e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000912:	ea4c 0c03 	orr.w	ip, ip, r3
 8000916:	fa20 f407 	lsr.w	r4, r0, r7
 800091a:	fa01 f306 	lsl.w	r3, r1, r6
 800091e:	431c      	orrs	r4, r3
 8000920:	40f9      	lsrs	r1, r7
 8000922:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000926:	fa00 f306 	lsl.w	r3, r0, r6
 800092a:	fbb1 f8f9 	udiv	r8, r1, r9
 800092e:	0c20      	lsrs	r0, r4, #16
 8000930:	fa1f fe8c 	uxth.w	lr, ip
 8000934:	fb09 1118 	mls	r1, r9, r8, r1
 8000938:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800093c:	fb08 f00e 	mul.w	r0, r8, lr
 8000940:	4288      	cmp	r0, r1
 8000942:	fa02 f206 	lsl.w	r2, r2, r6
 8000946:	d90b      	bls.n	8000960 <__udivmoddi4+0x1b8>
 8000948:	eb1c 0101 	adds.w	r1, ip, r1
 800094c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000950:	f080 8088 	bcs.w	8000a64 <__udivmoddi4+0x2bc>
 8000954:	4288      	cmp	r0, r1
 8000956:	f240 8085 	bls.w	8000a64 <__udivmoddi4+0x2bc>
 800095a:	f1a8 0802 	sub.w	r8, r8, #2
 800095e:	4461      	add	r1, ip
 8000960:	1a09      	subs	r1, r1, r0
 8000962:	b2a4      	uxth	r4, r4
 8000964:	fbb1 f0f9 	udiv	r0, r1, r9
 8000968:	fb09 1110 	mls	r1, r9, r0, r1
 800096c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000970:	fb00 fe0e 	mul.w	lr, r0, lr
 8000974:	458e      	cmp	lr, r1
 8000976:	d908      	bls.n	800098a <__udivmoddi4+0x1e2>
 8000978:	eb1c 0101 	adds.w	r1, ip, r1
 800097c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000980:	d26c      	bcs.n	8000a5c <__udivmoddi4+0x2b4>
 8000982:	458e      	cmp	lr, r1
 8000984:	d96a      	bls.n	8000a5c <__udivmoddi4+0x2b4>
 8000986:	3802      	subs	r0, #2
 8000988:	4461      	add	r1, ip
 800098a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800098e:	fba0 9402 	umull	r9, r4, r0, r2
 8000992:	eba1 010e 	sub.w	r1, r1, lr
 8000996:	42a1      	cmp	r1, r4
 8000998:	46c8      	mov	r8, r9
 800099a:	46a6      	mov	lr, r4
 800099c:	d356      	bcc.n	8000a4c <__udivmoddi4+0x2a4>
 800099e:	d053      	beq.n	8000a48 <__udivmoddi4+0x2a0>
 80009a0:	b15d      	cbz	r5, 80009ba <__udivmoddi4+0x212>
 80009a2:	ebb3 0208 	subs.w	r2, r3, r8
 80009a6:	eb61 010e 	sbc.w	r1, r1, lr
 80009aa:	fa01 f707 	lsl.w	r7, r1, r7
 80009ae:	fa22 f306 	lsr.w	r3, r2, r6
 80009b2:	40f1      	lsrs	r1, r6
 80009b4:	431f      	orrs	r7, r3
 80009b6:	e9c5 7100 	strd	r7, r1, [r5]
 80009ba:	2600      	movs	r6, #0
 80009bc:	4631      	mov	r1, r6
 80009be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80009c2:	f1c2 0320 	rsb	r3, r2, #32
 80009c6:	40d8      	lsrs	r0, r3
 80009c8:	fa0c fc02 	lsl.w	ip, ip, r2
 80009cc:	fa21 f303 	lsr.w	r3, r1, r3
 80009d0:	4091      	lsls	r1, r2
 80009d2:	4301      	orrs	r1, r0
 80009d4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80009d8:	fa1f fe8c 	uxth.w	lr, ip
 80009dc:	fbb3 f0f7 	udiv	r0, r3, r7
 80009e0:	fb07 3610 	mls	r6, r7, r0, r3
 80009e4:	0c0b      	lsrs	r3, r1, #16
 80009e6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80009ea:	fb00 f60e 	mul.w	r6, r0, lr
 80009ee:	429e      	cmp	r6, r3
 80009f0:	fa04 f402 	lsl.w	r4, r4, r2
 80009f4:	d908      	bls.n	8000a08 <__udivmoddi4+0x260>
 80009f6:	eb1c 0303 	adds.w	r3, ip, r3
 80009fa:	f100 38ff 	add.w	r8, r0, #4294967295
 80009fe:	d22f      	bcs.n	8000a60 <__udivmoddi4+0x2b8>
 8000a00:	429e      	cmp	r6, r3
 8000a02:	d92d      	bls.n	8000a60 <__udivmoddi4+0x2b8>
 8000a04:	3802      	subs	r0, #2
 8000a06:	4463      	add	r3, ip
 8000a08:	1b9b      	subs	r3, r3, r6
 8000a0a:	b289      	uxth	r1, r1
 8000a0c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000a10:	fb07 3316 	mls	r3, r7, r6, r3
 8000a14:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000a18:	fb06 f30e 	mul.w	r3, r6, lr
 8000a1c:	428b      	cmp	r3, r1
 8000a1e:	d908      	bls.n	8000a32 <__udivmoddi4+0x28a>
 8000a20:	eb1c 0101 	adds.w	r1, ip, r1
 8000a24:	f106 38ff 	add.w	r8, r6, #4294967295
 8000a28:	d216      	bcs.n	8000a58 <__udivmoddi4+0x2b0>
 8000a2a:	428b      	cmp	r3, r1
 8000a2c:	d914      	bls.n	8000a58 <__udivmoddi4+0x2b0>
 8000a2e:	3e02      	subs	r6, #2
 8000a30:	4461      	add	r1, ip
 8000a32:	1ac9      	subs	r1, r1, r3
 8000a34:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000a38:	e738      	b.n	80008ac <__udivmoddi4+0x104>
 8000a3a:	462e      	mov	r6, r5
 8000a3c:	4628      	mov	r0, r5
 8000a3e:	e705      	b.n	800084c <__udivmoddi4+0xa4>
 8000a40:	4606      	mov	r6, r0
 8000a42:	e6e3      	b.n	800080c <__udivmoddi4+0x64>
 8000a44:	4618      	mov	r0, r3
 8000a46:	e6f8      	b.n	800083a <__udivmoddi4+0x92>
 8000a48:	454b      	cmp	r3, r9
 8000a4a:	d2a9      	bcs.n	80009a0 <__udivmoddi4+0x1f8>
 8000a4c:	ebb9 0802 	subs.w	r8, r9, r2
 8000a50:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000a54:	3801      	subs	r0, #1
 8000a56:	e7a3      	b.n	80009a0 <__udivmoddi4+0x1f8>
 8000a58:	4646      	mov	r6, r8
 8000a5a:	e7ea      	b.n	8000a32 <__udivmoddi4+0x28a>
 8000a5c:	4620      	mov	r0, r4
 8000a5e:	e794      	b.n	800098a <__udivmoddi4+0x1e2>
 8000a60:	4640      	mov	r0, r8
 8000a62:	e7d1      	b.n	8000a08 <__udivmoddi4+0x260>
 8000a64:	46d0      	mov	r8, sl
 8000a66:	e77b      	b.n	8000960 <__udivmoddi4+0x1b8>
 8000a68:	3b02      	subs	r3, #2
 8000a6a:	4461      	add	r1, ip
 8000a6c:	e732      	b.n	80008d4 <__udivmoddi4+0x12c>
 8000a6e:	4630      	mov	r0, r6
 8000a70:	e709      	b.n	8000886 <__udivmoddi4+0xde>
 8000a72:	4464      	add	r4, ip
 8000a74:	3802      	subs	r0, #2
 8000a76:	e742      	b.n	80008fe <__udivmoddi4+0x156>

08000a78 <__aeabi_idiv0>:
 8000a78:	4770      	bx	lr
 8000a7a:	bf00      	nop
 8000a7c:	0000      	movs	r0, r0
	...

08000a80 <cinematicaInversa>:
double A1, B1, C1, XJ1_1, XJ1_2, YJ1_1, YJ1_2, ZJ1_1, ZJ1_2, A11, A12, A13, A14, A15;
double A2, B2, C2, XJ2_1, XJ2_2, YJ2_1, YJ2_2, ZJ2_1, ZJ2_2;
double A3, B3, C3, XJ3_1, XJ3_2, YJ3_1, YJ3_2, ZJ3_1, ZJ3_2;


void cinematicaInversa(Vec3D _Pfin) {
 8000a80:	b580      	push	{r7, lr}
 8000a82:	ed2d 8b04 	vpush	{d8-d9}
 8000a86:	b084      	sub	sp, #16
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	eef0 6a40 	vmov.f32	s13, s0
 8000a8e:	eeb0 7a60 	vmov.f32	s14, s1
 8000a92:	eef0 7a41 	vmov.f32	s15, s2
 8000a96:	edc7 6a01 	vstr	s13, [r7, #4]
 8000a9a:	ed87 7a02 	vstr	s14, [r7, #8]
 8000a9e:	edc7 7a03 	vstr	s15, [r7, #12]

	A1 = 1.0 + pow(((-2.0  * (R + (_Pfin.y - r))) / (2 * _Pfin.z)), 2);
 8000aa2:	edd7 7a02 	vldr	s15, [r7, #8]
 8000aa6:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000aaa:	ed9f 6bf1 	vldr	d6, [pc, #964]	; 8000e70 <cinematicaInversa+0x3f0>
 8000aae:	ee37 7b46 	vsub.f64	d7, d7, d6
 8000ab2:	ed9f 6bf1 	vldr	d6, [pc, #964]	; 8000e78 <cinematicaInversa+0x3f8>
 8000ab6:	ee37 7b06 	vadd.f64	d7, d7, d6
 8000aba:	eeb8 6b00 	vmov.f64	d6, #128	; 0xc0000000 -2.0
 8000abe:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000ac2:	edd7 7a03 	vldr	s15, [r7, #12]
 8000ac6:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8000aca:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000ace:	ee86 5b07 	vdiv.f64	d5, d6, d7
 8000ad2:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8000ad6:	eeb0 0b45 	vmov.f64	d0, d5
 8000ada:	f010 ffa1 	bl	8011a20 <pow>
 8000ade:	eeb0 7b40 	vmov.f64	d7, d0
 8000ae2:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8000ae6:	ee37 7b06 	vadd.f64	d7, d7, d6
 8000aea:	4bfb      	ldr	r3, [pc, #1004]	; (8000ed8 <cinematicaInversa+0x458>)
 8000aec:	ed83 7b00 	vstr	d7, [r3]
	A2 = 4.0 + pow(((2.0 * sqrt(3.0) * R * C30 + 2.0 * R * S30 - 2.0 * sqrt(3) * (_Pfin.x + r * C30) - 2.0 * (_Pfin.y + r * S30)) / (2.0 * _Pfin.z)), 2.0);
 8000af0:	edd7 7a01 	vldr	s15, [r7, #4]
 8000af4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000af8:	ed9f 6be1 	vldr	d6, [pc, #900]	; 8000e80 <cinematicaInversa+0x400>
 8000afc:	ee37 7b06 	vadd.f64	d7, d7, d6
 8000b00:	ed9f 6be1 	vldr	d6, [pc, #900]	; 8000e88 <cinematicaInversa+0x408>
 8000b04:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000b08:	ed9f 6be1 	vldr	d6, [pc, #900]	; 8000e90 <cinematicaInversa+0x410>
 8000b0c:	ee36 6b47 	vsub.f64	d6, d6, d7
 8000b10:	edd7 7a02 	vldr	s15, [r7, #8]
 8000b14:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000b18:	ed9f 5bdf 	vldr	d5, [pc, #892]	; 8000e98 <cinematicaInversa+0x418>
 8000b1c:	ee37 7b05 	vadd.f64	d7, d7, d5
 8000b20:	ee37 7b07 	vadd.f64	d7, d7, d7
 8000b24:	ee36 6b47 	vsub.f64	d6, d6, d7
 8000b28:	edd7 7a03 	vldr	s15, [r7, #12]
 8000b2c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000b30:	ee37 7b07 	vadd.f64	d7, d7, d7
 8000b34:	ee86 5b07 	vdiv.f64	d5, d6, d7
 8000b38:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8000b3c:	eeb0 0b45 	vmov.f64	d0, d5
 8000b40:	f010 ff6e 	bl	8011a20 <pow>
 8000b44:	eeb0 7b40 	vmov.f64	d7, d0
 8000b48:	eeb1 6b00 	vmov.f64	d6, #16	; 0x40800000  4.0
 8000b4c:	ee37 7b06 	vadd.f64	d7, d7, d6
 8000b50:	4be2      	ldr	r3, [pc, #904]	; (8000edc <cinematicaInversa+0x45c>)
 8000b52:	ed83 7b00 	vstr	d7, [r3]
	A3 = 4.0 + pow(((2.0 * sqrt(3.0) * (_Pfin.x + r * C150) - 2.0 * (_Pfin.y + r * S150) - 2.0 * sqrt(3) * R * C150 + 2.0 * R * S150) / (2.0 * _Pfin.z)), 2.0);
 8000b56:	edd7 7a01 	vldr	s15, [r7, #4]
 8000b5a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000b5e:	ed9f 6bc8 	vldr	d6, [pc, #800]	; 8000e80 <cinematicaInversa+0x400>
 8000b62:	ee37 7b46 	vsub.f64	d7, d7, d6
 8000b66:	ed9f 6bc8 	vldr	d6, [pc, #800]	; 8000e88 <cinematicaInversa+0x408>
 8000b6a:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000b6e:	edd7 7a02 	vldr	s15, [r7, #8]
 8000b72:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000b76:	ed9f 5bc8 	vldr	d5, [pc, #800]	; 8000e98 <cinematicaInversa+0x418>
 8000b7a:	ee37 7b05 	vadd.f64	d7, d7, d5
 8000b7e:	ee37 7b07 	vadd.f64	d7, d7, d7
 8000b82:	ee36 7b47 	vsub.f64	d7, d6, d7
 8000b86:	ed9f 6bc6 	vldr	d6, [pc, #792]	; 8000ea0 <cinematicaInversa+0x420>
 8000b8a:	ee37 7b06 	vadd.f64	d7, d7, d6
 8000b8e:	ed9f 6bba 	vldr	d6, [pc, #744]	; 8000e78 <cinematicaInversa+0x3f8>
 8000b92:	ee37 6b06 	vadd.f64	d6, d7, d6
 8000b96:	edd7 7a03 	vldr	s15, [r7, #12]
 8000b9a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000b9e:	ee37 7b07 	vadd.f64	d7, d7, d7
 8000ba2:	ee86 5b07 	vdiv.f64	d5, d6, d7
 8000ba6:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8000baa:	eeb0 0b45 	vmov.f64	d0, d5
 8000bae:	f010 ff37 	bl	8011a20 <pow>
 8000bb2:	eeb0 7b40 	vmov.f64	d7, d0
 8000bb6:	eeb1 6b00 	vmov.f64	d6, #16	; 0x40800000  4.0
 8000bba:	ee37 7b06 	vadd.f64	d7, d7, d6
 8000bbe:	4bc8      	ldr	r3, [pc, #800]	; (8000ee0 <cinematicaInversa+0x460>)
 8000bc0:	ed83 7b00 	vstr	d7, [r3]

	B1 = (2.0 * R) + (2.0 * ((-2.0  * (R + (_Pfin.y - r))) / (2.0 * _Pfin.z)) * ((-pow(R, 2.0) + pow(L1, 2.0) + pow((_Pfin.y - r), 2.0) + pow(_Pfin.z, 2.0) - pow(L2, 2.0) + pow(_Pfin.x, 2)) / (2 * _Pfin.z)));
 8000bc4:	edd7 7a02 	vldr	s15, [r7, #8]
 8000bc8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000bcc:	ed9f 6ba8 	vldr	d6, [pc, #672]	; 8000e70 <cinematicaInversa+0x3f0>
 8000bd0:	ee37 7b46 	vsub.f64	d7, d7, d6
 8000bd4:	ed9f 6ba8 	vldr	d6, [pc, #672]	; 8000e78 <cinematicaInversa+0x3f8>
 8000bd8:	ee37 7b06 	vadd.f64	d7, d7, d6
 8000bdc:	eeb8 6b00 	vmov.f64	d6, #128	; 0xc0000000 -2.0
 8000be0:	ee27 5b06 	vmul.f64	d5, d7, d6
 8000be4:	edd7 7a03 	vldr	s15, [r7, #12]
 8000be8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000bec:	ee37 6b07 	vadd.f64	d6, d7, d7
 8000bf0:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8000bf4:	ee37 8b07 	vadd.f64	d8, d7, d7
 8000bf8:	edd7 7a02 	vldr	s15, [r7, #8]
 8000bfc:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000c00:	ed9f 6b9b 	vldr	d6, [pc, #620]	; 8000e70 <cinematicaInversa+0x3f0>
 8000c04:	ee37 7b46 	vsub.f64	d7, d7, d6
 8000c08:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8000c0c:	eeb0 0b47 	vmov.f64	d0, d7
 8000c10:	f010 ff06 	bl	8011a20 <pow>
 8000c14:	eeb0 7b40 	vmov.f64	d7, d0
 8000c18:	ed9f 6ba3 	vldr	d6, [pc, #652]	; 8000ea8 <cinematicaInversa+0x428>
 8000c1c:	ee37 9b06 	vadd.f64	d9, d7, d6
 8000c20:	edd7 7a03 	vldr	s15, [r7, #12]
 8000c24:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000c28:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8000c2c:	eeb0 0b47 	vmov.f64	d0, d7
 8000c30:	f010 fef6 	bl	8011a20 <pow>
 8000c34:	eeb0 7b40 	vmov.f64	d7, d0
 8000c38:	ee39 7b07 	vadd.f64	d7, d9, d7
 8000c3c:	ed9f 6b9c 	vldr	d6, [pc, #624]	; 8000eb0 <cinematicaInversa+0x430>
 8000c40:	ee37 9b46 	vsub.f64	d9, d7, d6
 8000c44:	edd7 7a01 	vldr	s15, [r7, #4]
 8000c48:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000c4c:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8000c50:	eeb0 0b47 	vmov.f64	d0, d7
 8000c54:	f010 fee4 	bl	8011a20 <pow>
 8000c58:	eeb0 7b40 	vmov.f64	d7, d0
 8000c5c:	ee39 5b07 	vadd.f64	d5, d9, d7
 8000c60:	edd7 7a03 	vldr	s15, [r7, #12]
 8000c64:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8000c68:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8000c6c:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8000c70:	ee28 7b07 	vmul.f64	d7, d8, d7
 8000c74:	ed9f 6b90 	vldr	d6, [pc, #576]	; 8000eb8 <cinematicaInversa+0x438>
 8000c78:	ee37 7b06 	vadd.f64	d7, d7, d6
 8000c7c:	4b99      	ldr	r3, [pc, #612]	; (8000ee4 <cinematicaInversa+0x464>)
 8000c7e:	ed83 7b00 	vstr	d7, [r3]
	B2 = -2.0 * sqrt(3) * R * C30 - 2.0 * R * S30 + 2.0 * (((2.0 * sqrt(3) * R * C30 + 2.0 * R * S30)	+ (-2 * sqrt(3) * (_Pfin.x + r * C30)	- 2.0 * (_Pfin.y + r * S30))) / (2 * _Pfin.z)) * ((-pow(R, 2) + pow(L1, 2) + pow((_Pfin.x + r * C30), 2) + pow((_Pfin.y + r * S30), 2) + pow(_Pfin.z, 2) - pow(L2, 2)) / (2 * _Pfin.z));
 8000c82:	edd7 7a01 	vldr	s15, [r7, #4]
 8000c86:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000c8a:	ed9f 6b7d 	vldr	d6, [pc, #500]	; 8000e80 <cinematicaInversa+0x400>
 8000c8e:	ee37 7b06 	vadd.f64	d7, d7, d6
 8000c92:	ed9f 6b8b 	vldr	d6, [pc, #556]	; 8000ec0 <cinematicaInversa+0x440>
 8000c96:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000c9a:	edd7 7a02 	vldr	s15, [r7, #8]
 8000c9e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000ca2:	ed9f 5b7d 	vldr	d5, [pc, #500]	; 8000e98 <cinematicaInversa+0x418>
 8000ca6:	ee37 7b05 	vadd.f64	d7, d7, d5
 8000caa:	ee37 7b07 	vadd.f64	d7, d7, d7
 8000cae:	ee36 7b47 	vsub.f64	d7, d6, d7
 8000cb2:	ed9f 6b77 	vldr	d6, [pc, #476]	; 8000e90 <cinematicaInversa+0x410>
 8000cb6:	ee37 5b06 	vadd.f64	d5, d7, d6
 8000cba:	edd7 7a03 	vldr	s15, [r7, #12]
 8000cbe:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8000cc2:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8000cc6:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8000cca:	ee37 8b07 	vadd.f64	d8, d7, d7
 8000cce:	edd7 7a01 	vldr	s15, [r7, #4]
 8000cd2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000cd6:	ed9f 6b6a 	vldr	d6, [pc, #424]	; 8000e80 <cinematicaInversa+0x400>
 8000cda:	ee37 7b06 	vadd.f64	d7, d7, d6
 8000cde:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8000ce2:	eeb0 0b47 	vmov.f64	d0, d7
 8000ce6:	f010 fe9b 	bl	8011a20 <pow>
 8000cea:	eeb0 7b40 	vmov.f64	d7, d0
 8000cee:	ed9f 6b6e 	vldr	d6, [pc, #440]	; 8000ea8 <cinematicaInversa+0x428>
 8000cf2:	ee37 9b06 	vadd.f64	d9, d7, d6
 8000cf6:	edd7 7a02 	vldr	s15, [r7, #8]
 8000cfa:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000cfe:	ed9f 6b66 	vldr	d6, [pc, #408]	; 8000e98 <cinematicaInversa+0x418>
 8000d02:	ee37 7b06 	vadd.f64	d7, d7, d6
 8000d06:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8000d0a:	eeb0 0b47 	vmov.f64	d0, d7
 8000d0e:	f010 fe87 	bl	8011a20 <pow>
 8000d12:	eeb0 7b40 	vmov.f64	d7, d0
 8000d16:	ee39 9b07 	vadd.f64	d9, d9, d7
 8000d1a:	edd7 7a03 	vldr	s15, [r7, #12]
 8000d1e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000d22:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8000d26:	eeb0 0b47 	vmov.f64	d0, d7
 8000d2a:	f010 fe79 	bl	8011a20 <pow>
 8000d2e:	eeb0 7b40 	vmov.f64	d7, d0
 8000d32:	ee39 7b07 	vadd.f64	d7, d9, d7
 8000d36:	ed9f 6b5e 	vldr	d6, [pc, #376]	; 8000eb0 <cinematicaInversa+0x430>
 8000d3a:	ee37 5b46 	vsub.f64	d5, d7, d6
 8000d3e:	edd7 7a03 	vldr	s15, [r7, #12]
 8000d42:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8000d46:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8000d4a:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8000d4e:	ee28 7b07 	vmul.f64	d7, d8, d7
 8000d52:	ed9f 6b4f 	vldr	d6, [pc, #316]	; 8000e90 <cinematicaInversa+0x410>
 8000d56:	ee37 7b46 	vsub.f64	d7, d7, d6
 8000d5a:	4b63      	ldr	r3, [pc, #396]	; (8000ee8 <cinematicaInversa+0x468>)
 8000d5c:	ed83 7b00 	vstr	d7, [r3]
	B3 = 2.0 * sqrt(3) * R * C150 - 2.0 * R * S150 + 2.0 * ((2.0 * sqrt(3) * (_Pfin.x + r * C150) - 2.0 * (_Pfin.y + r * S150) - 2.0 * sqrt(3) * R * C150 + 2.0 * R * S150) / (2 * _Pfin.z)) * ((pow((_Pfin.x + r * C150), 2) + pow((_Pfin.y + r * S150), 2) + pow(_Pfin.z, 2) - pow(L2, 2) - pow(R, 2) + pow(L1, 2)) / (2 * _Pfin.z));
 8000d60:	edd7 7a01 	vldr	s15, [r7, #4]
 8000d64:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000d68:	ed9f 6b45 	vldr	d6, [pc, #276]	; 8000e80 <cinematicaInversa+0x400>
 8000d6c:	ee37 7b46 	vsub.f64	d7, d7, d6
 8000d70:	ed9f 6b45 	vldr	d6, [pc, #276]	; 8000e88 <cinematicaInversa+0x408>
 8000d74:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000d78:	edd7 7a02 	vldr	s15, [r7, #8]
 8000d7c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000d80:	ed9f 5b45 	vldr	d5, [pc, #276]	; 8000e98 <cinematicaInversa+0x418>
 8000d84:	ee37 7b05 	vadd.f64	d7, d7, d5
 8000d88:	ee37 7b07 	vadd.f64	d7, d7, d7
 8000d8c:	ee36 7b47 	vsub.f64	d7, d6, d7
 8000d90:	ed9f 6b43 	vldr	d6, [pc, #268]	; 8000ea0 <cinematicaInversa+0x420>
 8000d94:	ee37 7b06 	vadd.f64	d7, d7, d6
 8000d98:	ed9f 6b37 	vldr	d6, [pc, #220]	; 8000e78 <cinematicaInversa+0x3f8>
 8000d9c:	ee37 5b06 	vadd.f64	d5, d7, d6
 8000da0:	edd7 7a03 	vldr	s15, [r7, #12]
 8000da4:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8000da8:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8000dac:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8000db0:	ee37 8b07 	vadd.f64	d8, d7, d7
 8000db4:	edd7 7a01 	vldr	s15, [r7, #4]
 8000db8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000dbc:	ed9f 6b30 	vldr	d6, [pc, #192]	; 8000e80 <cinematicaInversa+0x400>
 8000dc0:	ee37 7b46 	vsub.f64	d7, d7, d6
 8000dc4:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8000dc8:	eeb0 0b47 	vmov.f64	d0, d7
 8000dcc:	f010 fe28 	bl	8011a20 <pow>
 8000dd0:	eeb0 9b40 	vmov.f64	d9, d0
 8000dd4:	edd7 7a02 	vldr	s15, [r7, #8]
 8000dd8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000ddc:	ed9f 6b2e 	vldr	d6, [pc, #184]	; 8000e98 <cinematicaInversa+0x418>
 8000de0:	ee37 7b06 	vadd.f64	d7, d7, d6
 8000de4:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8000de8:	eeb0 0b47 	vmov.f64	d0, d7
 8000dec:	f010 fe18 	bl	8011a20 <pow>
 8000df0:	eeb0 7b40 	vmov.f64	d7, d0
 8000df4:	ee39 9b07 	vadd.f64	d9, d9, d7
 8000df8:	edd7 7a03 	vldr	s15, [r7, #12]
 8000dfc:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000e00:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8000e04:	eeb0 0b47 	vmov.f64	d0, d7
 8000e08:	f010 fe0a 	bl	8011a20 <pow>
 8000e0c:	eeb0 7b40 	vmov.f64	d7, d0
 8000e10:	ee39 7b07 	vadd.f64	d7, d9, d7
 8000e14:	ed9f 6b26 	vldr	d6, [pc, #152]	; 8000eb0 <cinematicaInversa+0x430>
 8000e18:	ee37 7b46 	vsub.f64	d7, d7, d6
 8000e1c:	ed9f 6b2a 	vldr	d6, [pc, #168]	; 8000ec8 <cinematicaInversa+0x448>
 8000e20:	ee37 7b46 	vsub.f64	d7, d7, d6
 8000e24:	ed9f 6b2a 	vldr	d6, [pc, #168]	; 8000ed0 <cinematicaInversa+0x450>
 8000e28:	ee37 5b06 	vadd.f64	d5, d7, d6
 8000e2c:	edd7 7a03 	vldr	s15, [r7, #12]
 8000e30:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8000e34:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8000e38:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8000e3c:	ee28 7b07 	vmul.f64	d7, d8, d7
 8000e40:	ed9f 6b13 	vldr	d6, [pc, #76]	; 8000e90 <cinematicaInversa+0x410>
 8000e44:	ee37 7b46 	vsub.f64	d7, d7, d6
 8000e48:	4b28      	ldr	r3, [pc, #160]	; (8000eec <cinematicaInversa+0x46c>)
 8000e4a:	ed83 7b00 	vstr	d7, [r3]

	C1 = (pow(((pow((_Pfin.y - r), 2) + pow(_Pfin.z, 2) - pow(L2, 2) + pow(_Pfin.x, 2) - pow(R, 2) + pow(L1, 2)) / (2 * _Pfin.z)), 2) - pow(L1, 2) + pow(R, 2));
 8000e4e:	edd7 7a02 	vldr	s15, [r7, #8]
 8000e52:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000e56:	ed9f 6b06 	vldr	d6, [pc, #24]	; 8000e70 <cinematicaInversa+0x3f0>
 8000e5a:	ee37 7b46 	vsub.f64	d7, d7, d6
 8000e5e:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8000e62:	eeb0 0b47 	vmov.f64	d0, d7
 8000e66:	f010 fddb 	bl	8011a20 <pow>
 8000e6a:	e041      	b.n	8000ef0 <cinematicaInversa+0x470>
 8000e6c:	f3af 8000 	nop.w
 8000e70:	1eb851ec 	.word	0x1eb851ec
 8000e74:	3fb1eb85 	.word	0x3fb1eb85
 8000e78:	24dd2f1b 	.word	0x24dd2f1b
 8000e7c:	3fc58106 	.word	0x3fc58106
 8000e80:	5625749b 	.word	0x5625749b
 8000e84:	3faf09d1 	.word	0x3faf09d1
 8000e88:	e8584caa 	.word	0xe8584caa
 8000e8c:	400bb67a 	.word	0x400bb67a
 8000e90:	24dd2f1d 	.word	0x24dd2f1d
 8000e94:	3fe58106 	.word	0x3fe58106
 8000e98:	1eb851ec 	.word	0x1eb851ec
 8000e9c:	3fa1eb85 	.word	0x3fa1eb85
 8000ea0:	9ba5e356 	.word	0x9ba5e356
 8000ea4:	3fe020c4 	.word	0x3fe020c4
 8000ea8:	3532e7b5 	.word	0x3532e7b5
 8000eac:	3fc0de09 	.word	0x3fc0de09
 8000eb0:	70a3d70a 	.word	0x70a3d70a
 8000eb4:	3fd70a3d 	.word	0x3fd70a3d
 8000eb8:	24dd2f1b 	.word	0x24dd2f1b
 8000ebc:	3fd58106 	.word	0x3fd58106
 8000ec0:	e8584caa 	.word	0xe8584caa
 8000ec4:	c00bb67a 	.word	0xc00bb67a
 8000ec8:	93d96639 	.word	0x93d96639
 8000ecc:	3f9ce6c0 	.word	0x3f9ce6c0
 8000ed0:	47ae147c 	.word	0x47ae147c
 8000ed4:	3fc47ae1 	.word	0x3fc47ae1
 8000ed8:	240002a8 	.word	0x240002a8
 8000edc:	240002f0 	.word	0x240002f0
 8000ee0:	24000338 	.word	0x24000338
 8000ee4:	240002b0 	.word	0x240002b0
 8000ee8:	240002f8 	.word	0x240002f8
 8000eec:	24000340 	.word	0x24000340
 8000ef0:	eeb0 8b40 	vmov.f64	d8, d0
 8000ef4:	edd7 7a03 	vldr	s15, [r7, #12]
 8000ef8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000efc:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8000f00:	eeb0 0b47 	vmov.f64	d0, d7
 8000f04:	f010 fd8c 	bl	8011a20 <pow>
 8000f08:	eeb0 7b40 	vmov.f64	d7, d0
 8000f0c:	ee38 7b07 	vadd.f64	d7, d8, d7
 8000f10:	ed9f 6beb 	vldr	d6, [pc, #940]	; 80012c0 <cinematicaInversa+0x840>
 8000f14:	ee37 8b46 	vsub.f64	d8, d7, d6
 8000f18:	edd7 7a01 	vldr	s15, [r7, #4]
 8000f1c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000f20:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8000f24:	eeb0 0b47 	vmov.f64	d0, d7
 8000f28:	f010 fd7a 	bl	8011a20 <pow>
 8000f2c:	eeb0 7b40 	vmov.f64	d7, d0
 8000f30:	ee38 7b07 	vadd.f64	d7, d8, d7
 8000f34:	ed9f 6be4 	vldr	d6, [pc, #912]	; 80012c8 <cinematicaInversa+0x848>
 8000f38:	ee37 7b46 	vsub.f64	d7, d7, d6
 8000f3c:	ed9f 6be4 	vldr	d6, [pc, #912]	; 80012d0 <cinematicaInversa+0x850>
 8000f40:	ee37 6b06 	vadd.f64	d6, d7, d6
 8000f44:	edd7 7a03 	vldr	s15, [r7, #12]
 8000f48:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8000f4c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000f50:	ee86 5b07 	vdiv.f64	d5, d6, d7
 8000f54:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8000f58:	eeb0 0b45 	vmov.f64	d0, d5
 8000f5c:	f010 fd60 	bl	8011a20 <pow>
 8000f60:	eeb0 7b40 	vmov.f64	d7, d0
 8000f64:	ed9f 6bda 	vldr	d6, [pc, #872]	; 80012d0 <cinematicaInversa+0x850>
 8000f68:	ee37 7b46 	vsub.f64	d7, d7, d6
 8000f6c:	ed9f 6bd6 	vldr	d6, [pc, #856]	; 80012c8 <cinematicaInversa+0x848>
 8000f70:	ee37 7b06 	vadd.f64	d7, d7, d6
 8000f74:	4bde      	ldr	r3, [pc, #888]	; (80012f0 <cinematicaInversa+0x870>)
 8000f76:	ed83 7b00 	vstr	d7, [r3]
	C2 = pow(R, 2) - pow(L1, 2) + pow(((-pow(R, 2) + pow(L1, 2) + pow((_Pfin.x + r * C30), 2) + pow((_Pfin.y + r * S30), 2) + pow(_Pfin.z, 2) - pow(L2, 2)) / (2.0 * _Pfin.z)), 2.0);
 8000f7a:	edd7 7a01 	vldr	s15, [r7, #4]
 8000f7e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000f82:	ed9f 6bd5 	vldr	d6, [pc, #852]	; 80012d8 <cinematicaInversa+0x858>
 8000f86:	ee37 7b06 	vadd.f64	d7, d7, d6
 8000f8a:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8000f8e:	eeb0 0b47 	vmov.f64	d0, d7
 8000f92:	f010 fd45 	bl	8011a20 <pow>
 8000f96:	eeb0 7b40 	vmov.f64	d7, d0
 8000f9a:	ed9f 6bd1 	vldr	d6, [pc, #836]	; 80012e0 <cinematicaInversa+0x860>
 8000f9e:	ee37 8b06 	vadd.f64	d8, d7, d6
 8000fa2:	edd7 7a02 	vldr	s15, [r7, #8]
 8000fa6:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000faa:	ed9f 6bcf 	vldr	d6, [pc, #828]	; 80012e8 <cinematicaInversa+0x868>
 8000fae:	ee37 7b06 	vadd.f64	d7, d7, d6
 8000fb2:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8000fb6:	eeb0 0b47 	vmov.f64	d0, d7
 8000fba:	f010 fd31 	bl	8011a20 <pow>
 8000fbe:	eeb0 7b40 	vmov.f64	d7, d0
 8000fc2:	ee38 8b07 	vadd.f64	d8, d8, d7
 8000fc6:	edd7 7a03 	vldr	s15, [r7, #12]
 8000fca:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000fce:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8000fd2:	eeb0 0b47 	vmov.f64	d0, d7
 8000fd6:	f010 fd23 	bl	8011a20 <pow>
 8000fda:	eeb0 7b40 	vmov.f64	d7, d0
 8000fde:	ee38 7b07 	vadd.f64	d7, d8, d7
 8000fe2:	ed9f 6bb7 	vldr	d6, [pc, #732]	; 80012c0 <cinematicaInversa+0x840>
 8000fe6:	ee37 6b46 	vsub.f64	d6, d7, d6
 8000fea:	edd7 7a03 	vldr	s15, [r7, #12]
 8000fee:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000ff2:	ee37 7b07 	vadd.f64	d7, d7, d7
 8000ff6:	ee86 5b07 	vdiv.f64	d5, d6, d7
 8000ffa:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8000ffe:	eeb0 0b45 	vmov.f64	d0, d5
 8001002:	f010 fd0d 	bl	8011a20 <pow>
 8001006:	eeb0 7b40 	vmov.f64	d7, d0
 800100a:	ed9f 6bb5 	vldr	d6, [pc, #724]	; 80012e0 <cinematicaInversa+0x860>
 800100e:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001012:	4bb8      	ldr	r3, [pc, #736]	; (80012f4 <cinematicaInversa+0x874>)
 8001014:	ed83 7b00 	vstr	d7, [r3]
	C3 = pow(R, 2) - pow(L1, 2) + pow(((pow((_Pfin.x + r * C150), 2) + pow((_Pfin.y + r * S150), 2) + pow(_Pfin.z, 2) - pow(L2, 2) - pow(R, 2) + pow(L1, 2)) / (2.0 * _Pfin.z)), 2.0);
 8001018:	edd7 7a01 	vldr	s15, [r7, #4]
 800101c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001020:	ed9f 6bad 	vldr	d6, [pc, #692]	; 80012d8 <cinematicaInversa+0x858>
 8001024:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001028:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 800102c:	eeb0 0b47 	vmov.f64	d0, d7
 8001030:	f010 fcf6 	bl	8011a20 <pow>
 8001034:	eeb0 8b40 	vmov.f64	d8, d0
 8001038:	edd7 7a02 	vldr	s15, [r7, #8]
 800103c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001040:	ed9f 6ba9 	vldr	d6, [pc, #676]	; 80012e8 <cinematicaInversa+0x868>
 8001044:	ee37 7b06 	vadd.f64	d7, d7, d6
 8001048:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 800104c:	eeb0 0b47 	vmov.f64	d0, d7
 8001050:	f010 fce6 	bl	8011a20 <pow>
 8001054:	eeb0 7b40 	vmov.f64	d7, d0
 8001058:	ee38 8b07 	vadd.f64	d8, d8, d7
 800105c:	edd7 7a03 	vldr	s15, [r7, #12]
 8001060:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001064:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8001068:	eeb0 0b47 	vmov.f64	d0, d7
 800106c:	f010 fcd8 	bl	8011a20 <pow>
 8001070:	eeb0 7b40 	vmov.f64	d7, d0
 8001074:	ee38 7b07 	vadd.f64	d7, d8, d7
 8001078:	ed9f 6b91 	vldr	d6, [pc, #580]	; 80012c0 <cinematicaInversa+0x840>
 800107c:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001080:	ed9f 6b91 	vldr	d6, [pc, #580]	; 80012c8 <cinematicaInversa+0x848>
 8001084:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001088:	ed9f 6b91 	vldr	d6, [pc, #580]	; 80012d0 <cinematicaInversa+0x850>
 800108c:	ee37 6b06 	vadd.f64	d6, d7, d6
 8001090:	edd7 7a03 	vldr	s15, [r7, #12]
 8001094:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001098:	ee37 7b07 	vadd.f64	d7, d7, d7
 800109c:	ee86 5b07 	vdiv.f64	d5, d6, d7
 80010a0:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 80010a4:	eeb0 0b45 	vmov.f64	d0, d5
 80010a8:	f010 fcba 	bl	8011a20 <pow>
 80010ac:	eeb0 7b40 	vmov.f64	d7, d0
 80010b0:	ed9f 6b8b 	vldr	d6, [pc, #556]	; 80012e0 <cinematicaInversa+0x860>
 80010b4:	ee37 7b46 	vsub.f64	d7, d7, d6
 80010b8:	4b8f      	ldr	r3, [pc, #572]	; (80012f8 <cinematicaInversa+0x878>)
 80010ba:	ed83 7b00 	vstr	d7, [r3]

	YJ1_1 = (-B1 - sqrt(pow(B1, 2) - 4 * A1 * C1)) / (2 * A1);
 80010be:	4b8f      	ldr	r3, [pc, #572]	; (80012fc <cinematicaInversa+0x87c>)
 80010c0:	ed93 7b00 	vldr	d7, [r3]
 80010c4:	eeb1 8b47 	vneg.f64	d8, d7
 80010c8:	4b8c      	ldr	r3, [pc, #560]	; (80012fc <cinematicaInversa+0x87c>)
 80010ca:	ed93 7b00 	vldr	d7, [r3]
 80010ce:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 80010d2:	eeb0 0b47 	vmov.f64	d0, d7
 80010d6:	f010 fca3 	bl	8011a20 <pow>
 80010da:	eeb0 5b40 	vmov.f64	d5, d0
 80010de:	4b88      	ldr	r3, [pc, #544]	; (8001300 <cinematicaInversa+0x880>)
 80010e0:	ed93 7b00 	vldr	d7, [r3]
 80010e4:	eeb1 6b00 	vmov.f64	d6, #16	; 0x40800000  4.0
 80010e8:	ee27 6b06 	vmul.f64	d6, d7, d6
 80010ec:	4b80      	ldr	r3, [pc, #512]	; (80012f0 <cinematicaInversa+0x870>)
 80010ee:	ed93 7b00 	vldr	d7, [r3]
 80010f2:	ee26 7b07 	vmul.f64	d7, d6, d7
 80010f6:	ee35 7b47 	vsub.f64	d7, d5, d7
 80010fa:	eeb0 0b47 	vmov.f64	d0, d7
 80010fe:	f010 ff0f 	bl	8011f20 <sqrt>
 8001102:	eeb0 7b40 	vmov.f64	d7, d0
 8001106:	ee38 5b47 	vsub.f64	d5, d8, d7
 800110a:	4b7d      	ldr	r3, [pc, #500]	; (8001300 <cinematicaInversa+0x880>)
 800110c:	ed93 7b00 	vldr	d7, [r3]
 8001110:	ee37 6b07 	vadd.f64	d6, d7, d7
 8001114:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8001118:	4b7a      	ldr	r3, [pc, #488]	; (8001304 <cinematicaInversa+0x884>)
 800111a:	ed83 7b00 	vstr	d7, [r3]
	YJ1_2 = (-B1 + sqrt(pow(B1, 2) - 4 * A1 * C1)) / (2 * A1);
 800111e:	4b77      	ldr	r3, [pc, #476]	; (80012fc <cinematicaInversa+0x87c>)
 8001120:	ed93 7b00 	vldr	d7, [r3]
 8001124:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8001128:	eeb0 0b47 	vmov.f64	d0, d7
 800112c:	f010 fc78 	bl	8011a20 <pow>
 8001130:	eeb0 5b40 	vmov.f64	d5, d0
 8001134:	4b72      	ldr	r3, [pc, #456]	; (8001300 <cinematicaInversa+0x880>)
 8001136:	ed93 7b00 	vldr	d7, [r3]
 800113a:	eeb1 6b00 	vmov.f64	d6, #16	; 0x40800000  4.0
 800113e:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001142:	4b6b      	ldr	r3, [pc, #428]	; (80012f0 <cinematicaInversa+0x870>)
 8001144:	ed93 7b00 	vldr	d7, [r3]
 8001148:	ee26 7b07 	vmul.f64	d7, d6, d7
 800114c:	ee35 7b47 	vsub.f64	d7, d5, d7
 8001150:	eeb0 0b47 	vmov.f64	d0, d7
 8001154:	f010 fee4 	bl	8011f20 <sqrt>
 8001158:	eeb0 6b40 	vmov.f64	d6, d0
 800115c:	4b67      	ldr	r3, [pc, #412]	; (80012fc <cinematicaInversa+0x87c>)
 800115e:	ed93 7b00 	vldr	d7, [r3]
 8001162:	ee36 5b47 	vsub.f64	d5, d6, d7
 8001166:	4b66      	ldr	r3, [pc, #408]	; (8001300 <cinematicaInversa+0x880>)
 8001168:	ed93 7b00 	vldr	d7, [r3]
 800116c:	ee37 6b07 	vadd.f64	d6, d7, d7
 8001170:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8001174:	4b64      	ldr	r3, [pc, #400]	; (8001308 <cinematicaInversa+0x888>)
 8001176:	ed83 7b00 	vstr	d7, [r3]
	YJ2_1 = (-B2 + sqrt(pow(B2, 2) - 4 * A2 * C2)) / (2 * A2);
 800117a:	4b64      	ldr	r3, [pc, #400]	; (800130c <cinematicaInversa+0x88c>)
 800117c:	ed93 7b00 	vldr	d7, [r3]
 8001180:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8001184:	eeb0 0b47 	vmov.f64	d0, d7
 8001188:	f010 fc4a 	bl	8011a20 <pow>
 800118c:	eeb0 5b40 	vmov.f64	d5, d0
 8001190:	4b5f      	ldr	r3, [pc, #380]	; (8001310 <cinematicaInversa+0x890>)
 8001192:	ed93 7b00 	vldr	d7, [r3]
 8001196:	eeb1 6b00 	vmov.f64	d6, #16	; 0x40800000  4.0
 800119a:	ee27 6b06 	vmul.f64	d6, d7, d6
 800119e:	4b55      	ldr	r3, [pc, #340]	; (80012f4 <cinematicaInversa+0x874>)
 80011a0:	ed93 7b00 	vldr	d7, [r3]
 80011a4:	ee26 7b07 	vmul.f64	d7, d6, d7
 80011a8:	ee35 7b47 	vsub.f64	d7, d5, d7
 80011ac:	eeb0 0b47 	vmov.f64	d0, d7
 80011b0:	f010 feb6 	bl	8011f20 <sqrt>
 80011b4:	eeb0 6b40 	vmov.f64	d6, d0
 80011b8:	4b54      	ldr	r3, [pc, #336]	; (800130c <cinematicaInversa+0x88c>)
 80011ba:	ed93 7b00 	vldr	d7, [r3]
 80011be:	ee36 5b47 	vsub.f64	d5, d6, d7
 80011c2:	4b53      	ldr	r3, [pc, #332]	; (8001310 <cinematicaInversa+0x890>)
 80011c4:	ed93 7b00 	vldr	d7, [r3]
 80011c8:	ee37 6b07 	vadd.f64	d6, d7, d7
 80011cc:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80011d0:	4b50      	ldr	r3, [pc, #320]	; (8001314 <cinematicaInversa+0x894>)
 80011d2:	ed83 7b00 	vstr	d7, [r3]
	YJ2_2 = (-B2 - sqrt(pow(B2, 2) - 4 * A2 * C2)) / (2 * A2);
 80011d6:	4b4d      	ldr	r3, [pc, #308]	; (800130c <cinematicaInversa+0x88c>)
 80011d8:	ed93 7b00 	vldr	d7, [r3]
 80011dc:	eeb1 8b47 	vneg.f64	d8, d7
 80011e0:	4b4a      	ldr	r3, [pc, #296]	; (800130c <cinematicaInversa+0x88c>)
 80011e2:	ed93 7b00 	vldr	d7, [r3]
 80011e6:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 80011ea:	eeb0 0b47 	vmov.f64	d0, d7
 80011ee:	f010 fc17 	bl	8011a20 <pow>
 80011f2:	eeb0 5b40 	vmov.f64	d5, d0
 80011f6:	4b46      	ldr	r3, [pc, #280]	; (8001310 <cinematicaInversa+0x890>)
 80011f8:	ed93 7b00 	vldr	d7, [r3]
 80011fc:	eeb1 6b00 	vmov.f64	d6, #16	; 0x40800000  4.0
 8001200:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001204:	4b3b      	ldr	r3, [pc, #236]	; (80012f4 <cinematicaInversa+0x874>)
 8001206:	ed93 7b00 	vldr	d7, [r3]
 800120a:	ee26 7b07 	vmul.f64	d7, d6, d7
 800120e:	ee35 7b47 	vsub.f64	d7, d5, d7
 8001212:	eeb0 0b47 	vmov.f64	d0, d7
 8001216:	f010 fe83 	bl	8011f20 <sqrt>
 800121a:	eeb0 7b40 	vmov.f64	d7, d0
 800121e:	ee38 5b47 	vsub.f64	d5, d8, d7
 8001222:	4b3b      	ldr	r3, [pc, #236]	; (8001310 <cinematicaInversa+0x890>)
 8001224:	ed93 7b00 	vldr	d7, [r3]
 8001228:	ee37 6b07 	vadd.f64	d6, d7, d7
 800122c:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8001230:	4b39      	ldr	r3, [pc, #228]	; (8001318 <cinematicaInversa+0x898>)
 8001232:	ed83 7b00 	vstr	d7, [r3]
	YJ3_1 = (-B3 + sqrt(pow(B3, 2) - 4 * A3 * C3)) / (2 * A3);
 8001236:	4b39      	ldr	r3, [pc, #228]	; (800131c <cinematicaInversa+0x89c>)
 8001238:	ed93 7b00 	vldr	d7, [r3]
 800123c:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8001240:	eeb0 0b47 	vmov.f64	d0, d7
 8001244:	f010 fbec 	bl	8011a20 <pow>
 8001248:	eeb0 5b40 	vmov.f64	d5, d0
 800124c:	4b34      	ldr	r3, [pc, #208]	; (8001320 <cinematicaInversa+0x8a0>)
 800124e:	ed93 7b00 	vldr	d7, [r3]
 8001252:	eeb1 6b00 	vmov.f64	d6, #16	; 0x40800000  4.0
 8001256:	ee27 6b06 	vmul.f64	d6, d7, d6
 800125a:	4b27      	ldr	r3, [pc, #156]	; (80012f8 <cinematicaInversa+0x878>)
 800125c:	ed93 7b00 	vldr	d7, [r3]
 8001260:	ee26 7b07 	vmul.f64	d7, d6, d7
 8001264:	ee35 7b47 	vsub.f64	d7, d5, d7
 8001268:	eeb0 0b47 	vmov.f64	d0, d7
 800126c:	f010 fe58 	bl	8011f20 <sqrt>
 8001270:	eeb0 6b40 	vmov.f64	d6, d0
 8001274:	4b29      	ldr	r3, [pc, #164]	; (800131c <cinematicaInversa+0x89c>)
 8001276:	ed93 7b00 	vldr	d7, [r3]
 800127a:	ee36 5b47 	vsub.f64	d5, d6, d7
 800127e:	4b28      	ldr	r3, [pc, #160]	; (8001320 <cinematicaInversa+0x8a0>)
 8001280:	ed93 7b00 	vldr	d7, [r3]
 8001284:	ee37 6b07 	vadd.f64	d6, d7, d7
 8001288:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800128c:	4b25      	ldr	r3, [pc, #148]	; (8001324 <cinematicaInversa+0x8a4>)
 800128e:	ed83 7b00 	vstr	d7, [r3]
	YJ3_2 = (-B3 - sqrt(pow(B3, 2) - 4 * A3 * C3)) / (2 * A3);
 8001292:	4b22      	ldr	r3, [pc, #136]	; (800131c <cinematicaInversa+0x89c>)
 8001294:	ed93 7b00 	vldr	d7, [r3]
 8001298:	eeb1 8b47 	vneg.f64	d8, d7
 800129c:	4b1f      	ldr	r3, [pc, #124]	; (800131c <cinematicaInversa+0x89c>)
 800129e:	ed93 7b00 	vldr	d7, [r3]
 80012a2:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 80012a6:	eeb0 0b47 	vmov.f64	d0, d7
 80012aa:	f010 fbb9 	bl	8011a20 <pow>
 80012ae:	eeb0 5b40 	vmov.f64	d5, d0
 80012b2:	4b1b      	ldr	r3, [pc, #108]	; (8001320 <cinematicaInversa+0x8a0>)
 80012b4:	ed93 7b00 	vldr	d7, [r3]
 80012b8:	eeb1 6b00 	vmov.f64	d6, #16	; 0x40800000  4.0
 80012bc:	e034      	b.n	8001328 <cinematicaInversa+0x8a8>
 80012be:	bf00      	nop
 80012c0:	70a3d70a 	.word	0x70a3d70a
 80012c4:	3fd70a3d 	.word	0x3fd70a3d
 80012c8:	93d96639 	.word	0x93d96639
 80012cc:	3f9ce6c0 	.word	0x3f9ce6c0
 80012d0:	47ae147c 	.word	0x47ae147c
 80012d4:	3fc47ae1 	.word	0x3fc47ae1
 80012d8:	5625749b 	.word	0x5625749b
 80012dc:	3faf09d1 	.word	0x3faf09d1
 80012e0:	3532e7b5 	.word	0x3532e7b5
 80012e4:	3fc0de09 	.word	0x3fc0de09
 80012e8:	1eb851ec 	.word	0x1eb851ec
 80012ec:	3fa1eb85 	.word	0x3fa1eb85
 80012f0:	240002b8 	.word	0x240002b8
 80012f4:	24000300 	.word	0x24000300
 80012f8:	24000348 	.word	0x24000348
 80012fc:	240002b0 	.word	0x240002b0
 8001300:	240002a8 	.word	0x240002a8
 8001304:	240002d0 	.word	0x240002d0
 8001308:	240002d8 	.word	0x240002d8
 800130c:	240002f8 	.word	0x240002f8
 8001310:	240002f0 	.word	0x240002f0
 8001314:	24000318 	.word	0x24000318
 8001318:	24000320 	.word	0x24000320
 800131c:	24000340 	.word	0x24000340
 8001320:	24000338 	.word	0x24000338
 8001324:	24000360 	.word	0x24000360
 8001328:	ee27 6b06 	vmul.f64	d6, d7, d6
 800132c:	4bf0      	ldr	r3, [pc, #960]	; (80016f0 <cinematicaInversa+0xc70>)
 800132e:	ed93 7b00 	vldr	d7, [r3]
 8001332:	ee26 7b07 	vmul.f64	d7, d6, d7
 8001336:	ee35 7b47 	vsub.f64	d7, d5, d7
 800133a:	eeb0 0b47 	vmov.f64	d0, d7
 800133e:	f010 fdef 	bl	8011f20 <sqrt>
 8001342:	eeb0 7b40 	vmov.f64	d7, d0
 8001346:	ee38 5b47 	vsub.f64	d5, d8, d7
 800134a:	4bea      	ldr	r3, [pc, #936]	; (80016f4 <cinematicaInversa+0xc74>)
 800134c:	ed93 7b00 	vldr	d7, [r3]
 8001350:	ee37 6b07 	vadd.f64	d6, d7, d7
 8001354:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8001358:	4be7      	ldr	r3, [pc, #924]	; (80016f8 <cinematicaInversa+0xc78>)
 800135a:	ed83 7b00 	vstr	d7, [r3]

	XJ1_1 = 0;
 800135e:	49e7      	ldr	r1, [pc, #924]	; (80016fc <cinematicaInversa+0xc7c>)
 8001360:	f04f 0200 	mov.w	r2, #0
 8001364:	f04f 0300 	mov.w	r3, #0
 8001368:	e9c1 2300 	strd	r2, r3, [r1]
	XJ1_2 = 0;
 800136c:	49e4      	ldr	r1, [pc, #912]	; (8001700 <cinematicaInversa+0xc80>)
 800136e:	f04f 0200 	mov.w	r2, #0
 8001372:	f04f 0300 	mov.w	r3, #0
 8001376:	e9c1 2300 	strd	r2, r3, [r1]
	XJ2_1 = sqrt(3) * YJ2_1;
 800137a:	4be2      	ldr	r3, [pc, #904]	; (8001704 <cinematicaInversa+0xc84>)
 800137c:	ed93 7b00 	vldr	d7, [r3]
 8001380:	ed9f 6bc3 	vldr	d6, [pc, #780]	; 8001690 <cinematicaInversa+0xc10>
 8001384:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001388:	4bdf      	ldr	r3, [pc, #892]	; (8001708 <cinematicaInversa+0xc88>)
 800138a:	ed83 7b00 	vstr	d7, [r3]
	XJ2_2 = sqrt(3) * YJ2_2;
 800138e:	4bdf      	ldr	r3, [pc, #892]	; (800170c <cinematicaInversa+0xc8c>)
 8001390:	ed93 7b00 	vldr	d7, [r3]
 8001394:	ed9f 6bbe 	vldr	d6, [pc, #760]	; 8001690 <cinematicaInversa+0xc10>
 8001398:	ee27 7b06 	vmul.f64	d7, d7, d6
 800139c:	4bdc      	ldr	r3, [pc, #880]	; (8001710 <cinematicaInversa+0xc90>)
 800139e:	ed83 7b00 	vstr	d7, [r3]
	XJ3_1 = -sqrt(3) * YJ3_1;
 80013a2:	4bdc      	ldr	r3, [pc, #880]	; (8001714 <cinematicaInversa+0xc94>)
 80013a4:	ed93 7b00 	vldr	d7, [r3]
 80013a8:	ed9f 6bbb 	vldr	d6, [pc, #748]	; 8001698 <cinematicaInversa+0xc18>
 80013ac:	ee27 7b06 	vmul.f64	d7, d7, d6
 80013b0:	4bd9      	ldr	r3, [pc, #868]	; (8001718 <cinematicaInversa+0xc98>)
 80013b2:	ed83 7b00 	vstr	d7, [r3]
	XJ3_2 = -sqrt(3) * YJ3_2;
 80013b6:	4bd0      	ldr	r3, [pc, #832]	; (80016f8 <cinematicaInversa+0xc78>)
 80013b8:	ed93 7b00 	vldr	d7, [r3]
 80013bc:	ed9f 6bb6 	vldr	d6, [pc, #728]	; 8001698 <cinematicaInversa+0xc18>
 80013c0:	ee27 7b06 	vmul.f64	d7, d7, d6
 80013c4:	4bd5      	ldr	r3, [pc, #852]	; (800171c <cinematicaInversa+0xc9c>)
 80013c6:	ed83 7b00 	vstr	d7, [r3]

	ZJ1_1 = ((YJ1_1 * ((-2 * (R + (_Pfin.y - r))) / (2 * _Pfin.z))) + ((pow((_Pfin.y - r), 2) + pow(_Pfin.z, 2) - pow(L2, 2) + pow(_Pfin.x, 2) - pow(R, 2) + pow(L1, 2)) / (2 * _Pfin.z)));
 80013ca:	edd7 7a02 	vldr	s15, [r7, #8]
 80013ce:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80013d2:	ed9f 6bb3 	vldr	d6, [pc, #716]	; 80016a0 <cinematicaInversa+0xc20>
 80013d6:	ee37 7b46 	vsub.f64	d7, d7, d6
 80013da:	ed9f 6bb3 	vldr	d6, [pc, #716]	; 80016a8 <cinematicaInversa+0xc28>
 80013de:	ee37 7b06 	vadd.f64	d7, d7, d6
 80013e2:	eeb8 6b00 	vmov.f64	d6, #128	; 0xc0000000 -2.0
 80013e6:	ee27 5b06 	vmul.f64	d5, d7, d6
 80013ea:	edd7 7a03 	vldr	s15, [r7, #12]
 80013ee:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80013f2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80013f6:	ee85 6b07 	vdiv.f64	d6, d5, d7
 80013fa:	4bc9      	ldr	r3, [pc, #804]	; (8001720 <cinematicaInversa+0xca0>)
 80013fc:	ed93 7b00 	vldr	d7, [r3]
 8001400:	ee26 8b07 	vmul.f64	d8, d6, d7
 8001404:	edd7 7a02 	vldr	s15, [r7, #8]
 8001408:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800140c:	ed9f 6ba4 	vldr	d6, [pc, #656]	; 80016a0 <cinematicaInversa+0xc20>
 8001410:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001414:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8001418:	eeb0 0b47 	vmov.f64	d0, d7
 800141c:	f010 fb00 	bl	8011a20 <pow>
 8001420:	eeb0 9b40 	vmov.f64	d9, d0
 8001424:	edd7 7a03 	vldr	s15, [r7, #12]
 8001428:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800142c:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8001430:	eeb0 0b47 	vmov.f64	d0, d7
 8001434:	f010 faf4 	bl	8011a20 <pow>
 8001438:	eeb0 7b40 	vmov.f64	d7, d0
 800143c:	ee39 7b07 	vadd.f64	d7, d9, d7
 8001440:	ed9f 6b9b 	vldr	d6, [pc, #620]	; 80016b0 <cinematicaInversa+0xc30>
 8001444:	ee37 9b46 	vsub.f64	d9, d7, d6
 8001448:	edd7 7a01 	vldr	s15, [r7, #4]
 800144c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001450:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8001454:	eeb0 0b47 	vmov.f64	d0, d7
 8001458:	f010 fae2 	bl	8011a20 <pow>
 800145c:	eeb0 7b40 	vmov.f64	d7, d0
 8001460:	ee39 7b07 	vadd.f64	d7, d9, d7
 8001464:	ed9f 6b94 	vldr	d6, [pc, #592]	; 80016b8 <cinematicaInversa+0xc38>
 8001468:	ee37 7b46 	vsub.f64	d7, d7, d6
 800146c:	ed9f 6b94 	vldr	d6, [pc, #592]	; 80016c0 <cinematicaInversa+0xc40>
 8001470:	ee37 5b06 	vadd.f64	d5, d7, d6
 8001474:	edd7 7a03 	vldr	s15, [r7, #12]
 8001478:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800147c:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8001480:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8001484:	ee38 7b07 	vadd.f64	d7, d8, d7
 8001488:	4ba6      	ldr	r3, [pc, #664]	; (8001724 <cinematicaInversa+0xca4>)
 800148a:	ed83 7b00 	vstr	d7, [r3]
	ZJ1_2 = ((YJ1_2 * ((-2 * (R + (_Pfin.y - r))) / (2 * _Pfin.z))) + ((pow((_Pfin.y - r), 2) + pow(_Pfin.z, 2) - pow(L2, 2) + pow(_Pfin.x, 2) - pow(R, 2) + pow(L1, 2)) / (2 * _Pfin.z)));
 800148e:	edd7 7a02 	vldr	s15, [r7, #8]
 8001492:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001496:	ed9f 6b82 	vldr	d6, [pc, #520]	; 80016a0 <cinematicaInversa+0xc20>
 800149a:	ee37 7b46 	vsub.f64	d7, d7, d6
 800149e:	ed9f 6b82 	vldr	d6, [pc, #520]	; 80016a8 <cinematicaInversa+0xc28>
 80014a2:	ee37 7b06 	vadd.f64	d7, d7, d6
 80014a6:	eeb8 6b00 	vmov.f64	d6, #128	; 0xc0000000 -2.0
 80014aa:	ee27 5b06 	vmul.f64	d5, d7, d6
 80014ae:	edd7 7a03 	vldr	s15, [r7, #12]
 80014b2:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80014b6:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80014ba:	ee85 6b07 	vdiv.f64	d6, d5, d7
 80014be:	4b9a      	ldr	r3, [pc, #616]	; (8001728 <cinematicaInversa+0xca8>)
 80014c0:	ed93 7b00 	vldr	d7, [r3]
 80014c4:	ee26 8b07 	vmul.f64	d8, d6, d7
 80014c8:	edd7 7a02 	vldr	s15, [r7, #8]
 80014cc:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80014d0:	ed9f 6b73 	vldr	d6, [pc, #460]	; 80016a0 <cinematicaInversa+0xc20>
 80014d4:	ee37 7b46 	vsub.f64	d7, d7, d6
 80014d8:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 80014dc:	eeb0 0b47 	vmov.f64	d0, d7
 80014e0:	f010 fa9e 	bl	8011a20 <pow>
 80014e4:	eeb0 9b40 	vmov.f64	d9, d0
 80014e8:	edd7 7a03 	vldr	s15, [r7, #12]
 80014ec:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80014f0:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 80014f4:	eeb0 0b47 	vmov.f64	d0, d7
 80014f8:	f010 fa92 	bl	8011a20 <pow>
 80014fc:	eeb0 7b40 	vmov.f64	d7, d0
 8001500:	ee39 7b07 	vadd.f64	d7, d9, d7
 8001504:	ed9f 6b6a 	vldr	d6, [pc, #424]	; 80016b0 <cinematicaInversa+0xc30>
 8001508:	ee37 9b46 	vsub.f64	d9, d7, d6
 800150c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001510:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001514:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8001518:	eeb0 0b47 	vmov.f64	d0, d7
 800151c:	f010 fa80 	bl	8011a20 <pow>
 8001520:	eeb0 7b40 	vmov.f64	d7, d0
 8001524:	ee39 7b07 	vadd.f64	d7, d9, d7
 8001528:	ed9f 6b63 	vldr	d6, [pc, #396]	; 80016b8 <cinematicaInversa+0xc38>
 800152c:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001530:	ed9f 6b63 	vldr	d6, [pc, #396]	; 80016c0 <cinematicaInversa+0xc40>
 8001534:	ee37 5b06 	vadd.f64	d5, d7, d6
 8001538:	edd7 7a03 	vldr	s15, [r7, #12]
 800153c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001540:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8001544:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8001548:	ee38 7b07 	vadd.f64	d7, d8, d7
 800154c:	4b77      	ldr	r3, [pc, #476]	; (800172c <cinematicaInversa+0xcac>)
 800154e:	ed83 7b00 	vstr	d7, [r3]
	ZJ2_1 = YJ2_1 * (((2 * sqrt(3.0) * R * C30 + 2.0 * R * S30) + (-2 * sqrt(3) * (_Pfin.x + r * C30) - 2.0 * (_Pfin.y + r * S30))) / (2 * _Pfin.z)) + ((-pow(R, 2) + pow(L1, 2) + pow((_Pfin.x + r * C30), 2) + pow((_Pfin.y + r * S30), 2) + pow(_Pfin.z, 2) - pow(L2, 2)) / (2 * _Pfin.z));
 8001552:	edd7 7a01 	vldr	s15, [r7, #4]
 8001556:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800155a:	ed9f 6b5b 	vldr	d6, [pc, #364]	; 80016c8 <cinematicaInversa+0xc48>
 800155e:	ee37 7b06 	vadd.f64	d7, d7, d6
 8001562:	ed9f 6b5b 	vldr	d6, [pc, #364]	; 80016d0 <cinematicaInversa+0xc50>
 8001566:	ee27 6b06 	vmul.f64	d6, d7, d6
 800156a:	edd7 7a02 	vldr	s15, [r7, #8]
 800156e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001572:	ed9f 5b59 	vldr	d5, [pc, #356]	; 80016d8 <cinematicaInversa+0xc58>
 8001576:	ee37 7b05 	vadd.f64	d7, d7, d5
 800157a:	ee37 7b07 	vadd.f64	d7, d7, d7
 800157e:	ee36 7b47 	vsub.f64	d7, d6, d7
 8001582:	ed9f 6b57 	vldr	d6, [pc, #348]	; 80016e0 <cinematicaInversa+0xc60>
 8001586:	ee37 5b06 	vadd.f64	d5, d7, d6
 800158a:	edd7 7a03 	vldr	s15, [r7, #12]
 800158e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001592:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001596:	ee85 6b07 	vdiv.f64	d6, d5, d7
 800159a:	4b5a      	ldr	r3, [pc, #360]	; (8001704 <cinematicaInversa+0xc84>)
 800159c:	ed93 7b00 	vldr	d7, [r3]
 80015a0:	ee26 8b07 	vmul.f64	d8, d6, d7
 80015a4:	edd7 7a01 	vldr	s15, [r7, #4]
 80015a8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80015ac:	ed9f 6b46 	vldr	d6, [pc, #280]	; 80016c8 <cinematicaInversa+0xc48>
 80015b0:	ee37 7b06 	vadd.f64	d7, d7, d6
 80015b4:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 80015b8:	eeb0 0b47 	vmov.f64	d0, d7
 80015bc:	f010 fa30 	bl	8011a20 <pow>
 80015c0:	eeb0 7b40 	vmov.f64	d7, d0
 80015c4:	ed9f 6b48 	vldr	d6, [pc, #288]	; 80016e8 <cinematicaInversa+0xc68>
 80015c8:	ee37 9b06 	vadd.f64	d9, d7, d6
 80015cc:	edd7 7a02 	vldr	s15, [r7, #8]
 80015d0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80015d4:	ed9f 6b40 	vldr	d6, [pc, #256]	; 80016d8 <cinematicaInversa+0xc58>
 80015d8:	ee37 7b06 	vadd.f64	d7, d7, d6
 80015dc:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 80015e0:	eeb0 0b47 	vmov.f64	d0, d7
 80015e4:	f010 fa1c 	bl	8011a20 <pow>
 80015e8:	eeb0 7b40 	vmov.f64	d7, d0
 80015ec:	ee39 9b07 	vadd.f64	d9, d9, d7
 80015f0:	edd7 7a03 	vldr	s15, [r7, #12]
 80015f4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80015f8:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 80015fc:	eeb0 0b47 	vmov.f64	d0, d7
 8001600:	f010 fa0e 	bl	8011a20 <pow>
 8001604:	eeb0 7b40 	vmov.f64	d7, d0
 8001608:	ee39 7b07 	vadd.f64	d7, d9, d7
 800160c:	ed9f 6b28 	vldr	d6, [pc, #160]	; 80016b0 <cinematicaInversa+0xc30>
 8001610:	ee37 5b46 	vsub.f64	d5, d7, d6
 8001614:	edd7 7a03 	vldr	s15, [r7, #12]
 8001618:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800161c:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8001620:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8001624:	ee38 7b07 	vadd.f64	d7, d8, d7
 8001628:	4b41      	ldr	r3, [pc, #260]	; (8001730 <cinematicaInversa+0xcb0>)
 800162a:	ed83 7b00 	vstr	d7, [r3]
	ZJ2_2 = YJ2_2 * (((2 * sqrt(3.0) * R * C30 + 2.0 * R * S30) + (-2 * sqrt(3) * (_Pfin.x + r * C30) - 2.0 * (_Pfin.y + r * S30))) / (2 * _Pfin.z)) + ((-pow(R, 2) + pow(L1, 2) + pow((_Pfin.x + r * C30), 2) + pow((_Pfin.y + r * S30), 2) + pow(_Pfin.z, 2) - pow(L2, 2)) / (2 * _Pfin.z));
 800162e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001632:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001636:	ed9f 6b24 	vldr	d6, [pc, #144]	; 80016c8 <cinematicaInversa+0xc48>
 800163a:	ee37 7b06 	vadd.f64	d7, d7, d6
 800163e:	ed9f 6b24 	vldr	d6, [pc, #144]	; 80016d0 <cinematicaInversa+0xc50>
 8001642:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001646:	edd7 7a02 	vldr	s15, [r7, #8]
 800164a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800164e:	ed9f 5b22 	vldr	d5, [pc, #136]	; 80016d8 <cinematicaInversa+0xc58>
 8001652:	ee37 7b05 	vadd.f64	d7, d7, d5
 8001656:	ee37 7b07 	vadd.f64	d7, d7, d7
 800165a:	ee36 7b47 	vsub.f64	d7, d6, d7
 800165e:	ed9f 6b20 	vldr	d6, [pc, #128]	; 80016e0 <cinematicaInversa+0xc60>
 8001662:	ee37 5b06 	vadd.f64	d5, d7, d6
 8001666:	edd7 7a03 	vldr	s15, [r7, #12]
 800166a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800166e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001672:	ee85 6b07 	vdiv.f64	d6, d5, d7
 8001676:	4b25      	ldr	r3, [pc, #148]	; (800170c <cinematicaInversa+0xc8c>)
 8001678:	ed93 7b00 	vldr	d7, [r3]
 800167c:	ee26 8b07 	vmul.f64	d8, d6, d7
 8001680:	edd7 7a01 	vldr	s15, [r7, #4]
 8001684:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001688:	e054      	b.n	8001734 <cinematicaInversa+0xcb4>
 800168a:	bf00      	nop
 800168c:	f3af 8000 	nop.w
 8001690:	e8584caa 	.word	0xe8584caa
 8001694:	3ffbb67a 	.word	0x3ffbb67a
 8001698:	e8584caa 	.word	0xe8584caa
 800169c:	bffbb67a 	.word	0xbffbb67a
 80016a0:	1eb851ec 	.word	0x1eb851ec
 80016a4:	3fb1eb85 	.word	0x3fb1eb85
 80016a8:	24dd2f1b 	.word	0x24dd2f1b
 80016ac:	3fc58106 	.word	0x3fc58106
 80016b0:	70a3d70a 	.word	0x70a3d70a
 80016b4:	3fd70a3d 	.word	0x3fd70a3d
 80016b8:	93d96639 	.word	0x93d96639
 80016bc:	3f9ce6c0 	.word	0x3f9ce6c0
 80016c0:	47ae147c 	.word	0x47ae147c
 80016c4:	3fc47ae1 	.word	0x3fc47ae1
 80016c8:	5625749b 	.word	0x5625749b
 80016cc:	3faf09d1 	.word	0x3faf09d1
 80016d0:	e8584caa 	.word	0xe8584caa
 80016d4:	c00bb67a 	.word	0xc00bb67a
 80016d8:	1eb851ec 	.word	0x1eb851ec
 80016dc:	3fa1eb85 	.word	0x3fa1eb85
 80016e0:	24dd2f1d 	.word	0x24dd2f1d
 80016e4:	3fe58106 	.word	0x3fe58106
 80016e8:	3532e7b5 	.word	0x3532e7b5
 80016ec:	3fc0de09 	.word	0x3fc0de09
 80016f0:	24000348 	.word	0x24000348
 80016f4:	24000338 	.word	0x24000338
 80016f8:	24000368 	.word	0x24000368
 80016fc:	240002c0 	.word	0x240002c0
 8001700:	240002c8 	.word	0x240002c8
 8001704:	24000318 	.word	0x24000318
 8001708:	24000308 	.word	0x24000308
 800170c:	24000320 	.word	0x24000320
 8001710:	24000310 	.word	0x24000310
 8001714:	24000360 	.word	0x24000360
 8001718:	24000350 	.word	0x24000350
 800171c:	24000358 	.word	0x24000358
 8001720:	240002d0 	.word	0x240002d0
 8001724:	240002e0 	.word	0x240002e0
 8001728:	240002d8 	.word	0x240002d8
 800172c:	240002e8 	.word	0x240002e8
 8001730:	24000328 	.word	0x24000328
 8001734:	ed9f 6bca 	vldr	d6, [pc, #808]	; 8001a60 <cinematicaInversa+0xfe0>
 8001738:	ee37 7b06 	vadd.f64	d7, d7, d6
 800173c:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8001740:	eeb0 0b47 	vmov.f64	d0, d7
 8001744:	f010 f96c 	bl	8011a20 <pow>
 8001748:	eeb0 7b40 	vmov.f64	d7, d0
 800174c:	ed9f 6bc6 	vldr	d6, [pc, #792]	; 8001a68 <cinematicaInversa+0xfe8>
 8001750:	ee37 9b06 	vadd.f64	d9, d7, d6
 8001754:	edd7 7a02 	vldr	s15, [r7, #8]
 8001758:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800175c:	ed9f 6bc4 	vldr	d6, [pc, #784]	; 8001a70 <cinematicaInversa+0xff0>
 8001760:	ee37 7b06 	vadd.f64	d7, d7, d6
 8001764:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8001768:	eeb0 0b47 	vmov.f64	d0, d7
 800176c:	f010 f958 	bl	8011a20 <pow>
 8001770:	eeb0 7b40 	vmov.f64	d7, d0
 8001774:	ee39 9b07 	vadd.f64	d9, d9, d7
 8001778:	edd7 7a03 	vldr	s15, [r7, #12]
 800177c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001780:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8001784:	eeb0 0b47 	vmov.f64	d0, d7
 8001788:	f010 f94a 	bl	8011a20 <pow>
 800178c:	eeb0 7b40 	vmov.f64	d7, d0
 8001790:	ee39 7b07 	vadd.f64	d7, d9, d7
 8001794:	ed9f 6bb8 	vldr	d6, [pc, #736]	; 8001a78 <cinematicaInversa+0xff8>
 8001798:	ee37 5b46 	vsub.f64	d5, d7, d6
 800179c:	edd7 7a03 	vldr	s15, [r7, #12]
 80017a0:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80017a4:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 80017a8:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80017ac:	ee38 7b07 	vadd.f64	d7, d8, d7
 80017b0:	4bc3      	ldr	r3, [pc, #780]	; (8001ac0 <cinematicaInversa+0x1040>)
 80017b2:	ed83 7b00 	vstr	d7, [r3]
	ZJ3_1 = YJ3_1 * ((2 * sqrt(3.0) * (_Pfin.x + r * C150) - 2.0 * (_Pfin.y + r * S150) - 2.0 * sqrt(3) * R * C150 + 2.0 * R * S150) / (2.0 * _Pfin.z)) + ((pow((_Pfin.x + r * C150), 2.0) + pow((_Pfin.y + r * S150), 2) + pow(_Pfin.z, 2.0) - pow(L2, 2) - pow(R, 2) + pow(L1, 2)) / (2 * _Pfin.z));
 80017b6:	edd7 7a01 	vldr	s15, [r7, #4]
 80017ba:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80017be:	ed9f 6ba8 	vldr	d6, [pc, #672]	; 8001a60 <cinematicaInversa+0xfe0>
 80017c2:	ee37 7b46 	vsub.f64	d7, d7, d6
 80017c6:	ed9f 6bae 	vldr	d6, [pc, #696]	; 8001a80 <cinematicaInversa+0x1000>
 80017ca:	ee27 6b06 	vmul.f64	d6, d7, d6
 80017ce:	edd7 7a02 	vldr	s15, [r7, #8]
 80017d2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80017d6:	ed9f 5ba6 	vldr	d5, [pc, #664]	; 8001a70 <cinematicaInversa+0xff0>
 80017da:	ee37 7b05 	vadd.f64	d7, d7, d5
 80017de:	ee37 7b07 	vadd.f64	d7, d7, d7
 80017e2:	ee36 7b47 	vsub.f64	d7, d6, d7
 80017e6:	ed9f 6ba8 	vldr	d6, [pc, #672]	; 8001a88 <cinematicaInversa+0x1008>
 80017ea:	ee37 7b06 	vadd.f64	d7, d7, d6
 80017ee:	ed9f 6ba8 	vldr	d6, [pc, #672]	; 8001a90 <cinematicaInversa+0x1010>
 80017f2:	ee37 5b06 	vadd.f64	d5, d7, d6
 80017f6:	edd7 7a03 	vldr	s15, [r7, #12]
 80017fa:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80017fe:	ee37 7b07 	vadd.f64	d7, d7, d7
 8001802:	ee85 6b07 	vdiv.f64	d6, d5, d7
 8001806:	4baf      	ldr	r3, [pc, #700]	; (8001ac4 <cinematicaInversa+0x1044>)
 8001808:	ed93 7b00 	vldr	d7, [r3]
 800180c:	ee26 8b07 	vmul.f64	d8, d6, d7
 8001810:	edd7 7a01 	vldr	s15, [r7, #4]
 8001814:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001818:	ed9f 6b91 	vldr	d6, [pc, #580]	; 8001a60 <cinematicaInversa+0xfe0>
 800181c:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001820:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8001824:	eeb0 0b47 	vmov.f64	d0, d7
 8001828:	f010 f8fa 	bl	8011a20 <pow>
 800182c:	eeb0 9b40 	vmov.f64	d9, d0
 8001830:	edd7 7a02 	vldr	s15, [r7, #8]
 8001834:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001838:	ed9f 6b8d 	vldr	d6, [pc, #564]	; 8001a70 <cinematicaInversa+0xff0>
 800183c:	ee37 7b06 	vadd.f64	d7, d7, d6
 8001840:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8001844:	eeb0 0b47 	vmov.f64	d0, d7
 8001848:	f010 f8ea 	bl	8011a20 <pow>
 800184c:	eeb0 7b40 	vmov.f64	d7, d0
 8001850:	ee39 9b07 	vadd.f64	d9, d9, d7
 8001854:	edd7 7a03 	vldr	s15, [r7, #12]
 8001858:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800185c:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8001860:	eeb0 0b47 	vmov.f64	d0, d7
 8001864:	f010 f8dc 	bl	8011a20 <pow>
 8001868:	eeb0 7b40 	vmov.f64	d7, d0
 800186c:	ee39 7b07 	vadd.f64	d7, d9, d7
 8001870:	ed9f 6b81 	vldr	d6, [pc, #516]	; 8001a78 <cinematicaInversa+0xff8>
 8001874:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001878:	ed9f 6b87 	vldr	d6, [pc, #540]	; 8001a98 <cinematicaInversa+0x1018>
 800187c:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001880:	ed9f 6b87 	vldr	d6, [pc, #540]	; 8001aa0 <cinematicaInversa+0x1020>
 8001884:	ee37 5b06 	vadd.f64	d5, d7, d6
 8001888:	edd7 7a03 	vldr	s15, [r7, #12]
 800188c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001890:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8001894:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8001898:	ee38 7b07 	vadd.f64	d7, d8, d7
 800189c:	4b8a      	ldr	r3, [pc, #552]	; (8001ac8 <cinematicaInversa+0x1048>)
 800189e:	ed83 7b00 	vstr	d7, [r3]
	ZJ3_2 = YJ3_2 * ((2 * sqrt(3.0) * (_Pfin.x + r * C150) - 2.0 * (_Pfin.y + r * S150) - 2.0 * sqrt(3) * R * C150 + 2.0 * R * S150) / (2.0 * _Pfin.z)) + ((pow((_Pfin.x + r * C150), 2.0) + pow((_Pfin.y + r * S150), 2) + pow(_Pfin.z, 2) - pow(L2, 2) - pow(R, 2) + pow(L1, 2)) / (2 * _Pfin.z));
 80018a2:	edd7 7a01 	vldr	s15, [r7, #4]
 80018a6:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80018aa:	ed9f 6b6d 	vldr	d6, [pc, #436]	; 8001a60 <cinematicaInversa+0xfe0>
 80018ae:	ee37 7b46 	vsub.f64	d7, d7, d6
 80018b2:	ed9f 6b73 	vldr	d6, [pc, #460]	; 8001a80 <cinematicaInversa+0x1000>
 80018b6:	ee27 6b06 	vmul.f64	d6, d7, d6
 80018ba:	edd7 7a02 	vldr	s15, [r7, #8]
 80018be:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80018c2:	ed9f 5b6b 	vldr	d5, [pc, #428]	; 8001a70 <cinematicaInversa+0xff0>
 80018c6:	ee37 7b05 	vadd.f64	d7, d7, d5
 80018ca:	ee37 7b07 	vadd.f64	d7, d7, d7
 80018ce:	ee36 7b47 	vsub.f64	d7, d6, d7
 80018d2:	ed9f 6b6d 	vldr	d6, [pc, #436]	; 8001a88 <cinematicaInversa+0x1008>
 80018d6:	ee37 7b06 	vadd.f64	d7, d7, d6
 80018da:	ed9f 6b6d 	vldr	d6, [pc, #436]	; 8001a90 <cinematicaInversa+0x1010>
 80018de:	ee37 5b06 	vadd.f64	d5, d7, d6
 80018e2:	edd7 7a03 	vldr	s15, [r7, #12]
 80018e6:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80018ea:	ee37 7b07 	vadd.f64	d7, d7, d7
 80018ee:	ee85 6b07 	vdiv.f64	d6, d5, d7
 80018f2:	4b76      	ldr	r3, [pc, #472]	; (8001acc <cinematicaInversa+0x104c>)
 80018f4:	ed93 7b00 	vldr	d7, [r3]
 80018f8:	ee26 8b07 	vmul.f64	d8, d6, d7
 80018fc:	edd7 7a01 	vldr	s15, [r7, #4]
 8001900:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001904:	ed9f 6b56 	vldr	d6, [pc, #344]	; 8001a60 <cinematicaInversa+0xfe0>
 8001908:	ee37 7b46 	vsub.f64	d7, d7, d6
 800190c:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8001910:	eeb0 0b47 	vmov.f64	d0, d7
 8001914:	f010 f884 	bl	8011a20 <pow>
 8001918:	eeb0 9b40 	vmov.f64	d9, d0
 800191c:	edd7 7a02 	vldr	s15, [r7, #8]
 8001920:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001924:	ed9f 6b52 	vldr	d6, [pc, #328]	; 8001a70 <cinematicaInversa+0xff0>
 8001928:	ee37 7b06 	vadd.f64	d7, d7, d6
 800192c:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8001930:	eeb0 0b47 	vmov.f64	d0, d7
 8001934:	f010 f874 	bl	8011a20 <pow>
 8001938:	eeb0 7b40 	vmov.f64	d7, d0
 800193c:	ee39 9b07 	vadd.f64	d9, d9, d7
 8001940:	edd7 7a03 	vldr	s15, [r7, #12]
 8001944:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001948:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 800194c:	eeb0 0b47 	vmov.f64	d0, d7
 8001950:	f010 f866 	bl	8011a20 <pow>
 8001954:	eeb0 7b40 	vmov.f64	d7, d0
 8001958:	ee39 7b07 	vadd.f64	d7, d9, d7
 800195c:	ed9f 6b46 	vldr	d6, [pc, #280]	; 8001a78 <cinematicaInversa+0xff8>
 8001960:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001964:	ed9f 6b4c 	vldr	d6, [pc, #304]	; 8001a98 <cinematicaInversa+0x1018>
 8001968:	ee37 7b46 	vsub.f64	d7, d7, d6
 800196c:	ed9f 6b4c 	vldr	d6, [pc, #304]	; 8001aa0 <cinematicaInversa+0x1020>
 8001970:	ee37 5b06 	vadd.f64	d5, d7, d6
 8001974:	edd7 7a03 	vldr	s15, [r7, #12]
 8001978:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800197c:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8001980:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8001984:	ee38 7b07 	vadd.f64	d7, d8, d7
 8001988:	4b51      	ldr	r3, [pc, #324]	; (8001ad0 <cinematicaInversa+0x1050>)
 800198a:	ed83 7b00 	vstr	d7, [r3]

	titha1 = -1.0 * asin(ZJ1_1 / L1);
 800198e:	4b51      	ldr	r3, [pc, #324]	; (8001ad4 <cinematicaInversa+0x1054>)
 8001990:	ed93 7b00 	vldr	d7, [r3]
 8001994:	ed9f 5b44 	vldr	d5, [pc, #272]	; 8001aa8 <cinematicaInversa+0x1028>
 8001998:	ee87 6b05 	vdiv.f64	d6, d7, d5
 800199c:	eeb0 0b46 	vmov.f64	d0, d6
 80019a0:	f010 fa90 	bl	8011ec4 <asin>
 80019a4:	eeb0 7b40 	vmov.f64	d7, d0
 80019a8:	eeb1 7b47 	vneg.f64	d7, d7
 80019ac:	4b4a      	ldr	r3, [pc, #296]	; (8001ad8 <cinematicaInversa+0x1058>)
 80019ae:	ed83 7b00 	vstr	d7, [r3]
	titha1 = titha1 * RAD_TO_DEG;
 80019b2:	4b49      	ldr	r3, [pc, #292]	; (8001ad8 <cinematicaInversa+0x1058>)
 80019b4:	ed93 7b00 	vldr	d7, [r3]
 80019b8:	ed9f 6b3d 	vldr	d6, [pc, #244]	; 8001ab0 <cinematicaInversa+0x1030>
 80019bc:	ee27 6b06 	vmul.f64	d6, d7, d6
 80019c0:	ed9f 5b3d 	vldr	d5, [pc, #244]	; 8001ab8 <cinematicaInversa+0x1038>
 80019c4:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80019c8:	4b43      	ldr	r3, [pc, #268]	; (8001ad8 <cinematicaInversa+0x1058>)
 80019ca:	ed83 7b00 	vstr	d7, [r3]
	titha2 = -1.0 * asin(ZJ2_1 / L1);
 80019ce:	4b43      	ldr	r3, [pc, #268]	; (8001adc <cinematicaInversa+0x105c>)
 80019d0:	ed93 7b00 	vldr	d7, [r3]
 80019d4:	ed9f 5b34 	vldr	d5, [pc, #208]	; 8001aa8 <cinematicaInversa+0x1028>
 80019d8:	ee87 6b05 	vdiv.f64	d6, d7, d5
 80019dc:	eeb0 0b46 	vmov.f64	d0, d6
 80019e0:	f010 fa70 	bl	8011ec4 <asin>
 80019e4:	eeb0 7b40 	vmov.f64	d7, d0
 80019e8:	eeb1 7b47 	vneg.f64	d7, d7
 80019ec:	4b3c      	ldr	r3, [pc, #240]	; (8001ae0 <cinematicaInversa+0x1060>)
 80019ee:	ed83 7b00 	vstr	d7, [r3]
	titha2 = titha2 * RAD_TO_DEG;
 80019f2:	4b3b      	ldr	r3, [pc, #236]	; (8001ae0 <cinematicaInversa+0x1060>)
 80019f4:	ed93 7b00 	vldr	d7, [r3]
 80019f8:	ed9f 6b2d 	vldr	d6, [pc, #180]	; 8001ab0 <cinematicaInversa+0x1030>
 80019fc:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001a00:	ed9f 5b2d 	vldr	d5, [pc, #180]	; 8001ab8 <cinematicaInversa+0x1038>
 8001a04:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001a08:	4b35      	ldr	r3, [pc, #212]	; (8001ae0 <cinematicaInversa+0x1060>)
 8001a0a:	ed83 7b00 	vstr	d7, [r3]
	titha3 = -1.0 * asin(ZJ3_1 / L1);
 8001a0e:	4b2e      	ldr	r3, [pc, #184]	; (8001ac8 <cinematicaInversa+0x1048>)
 8001a10:	ed93 7b00 	vldr	d7, [r3]
 8001a14:	ed9f 5b24 	vldr	d5, [pc, #144]	; 8001aa8 <cinematicaInversa+0x1028>
 8001a18:	ee87 6b05 	vdiv.f64	d6, d7, d5
 8001a1c:	eeb0 0b46 	vmov.f64	d0, d6
 8001a20:	f010 fa50 	bl	8011ec4 <asin>
 8001a24:	eeb0 7b40 	vmov.f64	d7, d0
 8001a28:	eeb1 7b47 	vneg.f64	d7, d7
 8001a2c:	4b2d      	ldr	r3, [pc, #180]	; (8001ae4 <cinematicaInversa+0x1064>)
 8001a2e:	ed83 7b00 	vstr	d7, [r3]
	titha3 = titha3 * RAD_TO_DEG;
 8001a32:	4b2c      	ldr	r3, [pc, #176]	; (8001ae4 <cinematicaInversa+0x1064>)
 8001a34:	ed93 7b00 	vldr	d7, [r3]
 8001a38:	ed9f 6b1d 	vldr	d6, [pc, #116]	; 8001ab0 <cinematicaInversa+0x1030>
 8001a3c:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001a40:	ed9f 5b1d 	vldr	d5, [pc, #116]	; 8001ab8 <cinematicaInversa+0x1038>
 8001a44:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001a48:	4b26      	ldr	r3, [pc, #152]	; (8001ae4 <cinematicaInversa+0x1064>)
 8001a4a:	ed83 7b00 	vstr	d7, [r3]
}
 8001a4e:	bf00      	nop
 8001a50:	3710      	adds	r7, #16
 8001a52:	46bd      	mov	sp, r7
 8001a54:	ecbd 8b04 	vpop	{d8-d9}
 8001a58:	bd80      	pop	{r7, pc}
 8001a5a:	bf00      	nop
 8001a5c:	f3af 8000 	nop.w
 8001a60:	5625749b 	.word	0x5625749b
 8001a64:	3faf09d1 	.word	0x3faf09d1
 8001a68:	3532e7b5 	.word	0x3532e7b5
 8001a6c:	3fc0de09 	.word	0x3fc0de09
 8001a70:	1eb851ec 	.word	0x1eb851ec
 8001a74:	3fa1eb85 	.word	0x3fa1eb85
 8001a78:	70a3d70a 	.word	0x70a3d70a
 8001a7c:	3fd70a3d 	.word	0x3fd70a3d
 8001a80:	e8584caa 	.word	0xe8584caa
 8001a84:	400bb67a 	.word	0x400bb67a
 8001a88:	9ba5e356 	.word	0x9ba5e356
 8001a8c:	3fe020c4 	.word	0x3fe020c4
 8001a90:	24dd2f1b 	.word	0x24dd2f1b
 8001a94:	3fc58106 	.word	0x3fc58106
 8001a98:	93d96639 	.word	0x93d96639
 8001a9c:	3f9ce6c0 	.word	0x3f9ce6c0
 8001aa0:	47ae147c 	.word	0x47ae147c
 8001aa4:	3fc47ae1 	.word	0x3fc47ae1
 8001aa8:	9999999a 	.word	0x9999999a
 8001aac:	3fd99999 	.word	0x3fd99999
 8001ab0:	00000000 	.word	0x00000000
 8001ab4:	40668000 	.word	0x40668000
 8001ab8:	54442eea 	.word	0x54442eea
 8001abc:	400921fb 	.word	0x400921fb
 8001ac0:	24000330 	.word	0x24000330
 8001ac4:	24000360 	.word	0x24000360
 8001ac8:	24000370 	.word	0x24000370
 8001acc:	24000368 	.word	0x24000368
 8001ad0:	24000378 	.word	0x24000378
 8001ad4:	240002e0 	.word	0x240002e0
 8001ad8:	240003b8 	.word	0x240003b8
 8001adc:	24000328 	.word	0x24000328
 8001ae0:	240003c0 	.word	0x240003c0
 8001ae4:	240003c8 	.word	0x240003c8

08001ae8 <MX_GPIO_Init>:
     PH1-OSC_OUT (PH1)   ------> RCC_OSC_OUT
     PA13 (JTMS/SWDIO)   ------> DEBUG_JTMS-SWDIO
     PA14 (JTCK/SWCLK)   ------> DEBUG_JTCK-SWCLK
*/
void MX_GPIO_Init(void)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b08c      	sub	sp, #48	; 0x30
 8001aec:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001aee:	f107 031c 	add.w	r3, r7, #28
 8001af2:	2200      	movs	r2, #0
 8001af4:	601a      	str	r2, [r3, #0]
 8001af6:	605a      	str	r2, [r3, #4]
 8001af8:	609a      	str	r2, [r3, #8]
 8001afa:	60da      	str	r2, [r3, #12]
 8001afc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001afe:	4b74      	ldr	r3, [pc, #464]	; (8001cd0 <MX_GPIO_Init+0x1e8>)
 8001b00:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b04:	4a72      	ldr	r2, [pc, #456]	; (8001cd0 <MX_GPIO_Init+0x1e8>)
 8001b06:	f043 0310 	orr.w	r3, r3, #16
 8001b0a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001b0e:	4b70      	ldr	r3, [pc, #448]	; (8001cd0 <MX_GPIO_Init+0x1e8>)
 8001b10:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b14:	f003 0310 	and.w	r3, r3, #16
 8001b18:	61bb      	str	r3, [r7, #24]
 8001b1a:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b1c:	4b6c      	ldr	r3, [pc, #432]	; (8001cd0 <MX_GPIO_Init+0x1e8>)
 8001b1e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b22:	4a6b      	ldr	r2, [pc, #428]	; (8001cd0 <MX_GPIO_Init+0x1e8>)
 8001b24:	f043 0304 	orr.w	r3, r3, #4
 8001b28:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001b2c:	4b68      	ldr	r3, [pc, #416]	; (8001cd0 <MX_GPIO_Init+0x1e8>)
 8001b2e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b32:	f003 0304 	and.w	r3, r3, #4
 8001b36:	617b      	str	r3, [r7, #20]
 8001b38:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001b3a:	4b65      	ldr	r3, [pc, #404]	; (8001cd0 <MX_GPIO_Init+0x1e8>)
 8001b3c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b40:	4a63      	ldr	r2, [pc, #396]	; (8001cd0 <MX_GPIO_Init+0x1e8>)
 8001b42:	f043 0320 	orr.w	r3, r3, #32
 8001b46:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001b4a:	4b61      	ldr	r3, [pc, #388]	; (8001cd0 <MX_GPIO_Init+0x1e8>)
 8001b4c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b50:	f003 0320 	and.w	r3, r3, #32
 8001b54:	613b      	str	r3, [r7, #16]
 8001b56:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001b58:	4b5d      	ldr	r3, [pc, #372]	; (8001cd0 <MX_GPIO_Init+0x1e8>)
 8001b5a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b5e:	4a5c      	ldr	r2, [pc, #368]	; (8001cd0 <MX_GPIO_Init+0x1e8>)
 8001b60:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001b64:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001b68:	4b59      	ldr	r3, [pc, #356]	; (8001cd0 <MX_GPIO_Init+0x1e8>)
 8001b6a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b72:	60fb      	str	r3, [r7, #12]
 8001b74:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b76:	4b56      	ldr	r3, [pc, #344]	; (8001cd0 <MX_GPIO_Init+0x1e8>)
 8001b78:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b7c:	4a54      	ldr	r2, [pc, #336]	; (8001cd0 <MX_GPIO_Init+0x1e8>)
 8001b7e:	f043 0301 	orr.w	r3, r3, #1
 8001b82:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001b86:	4b52      	ldr	r3, [pc, #328]	; (8001cd0 <MX_GPIO_Init+0x1e8>)
 8001b88:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b8c:	f003 0301 	and.w	r3, r3, #1
 8001b90:	60bb      	str	r3, [r7, #8]
 8001b92:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b94:	4b4e      	ldr	r3, [pc, #312]	; (8001cd0 <MX_GPIO_Init+0x1e8>)
 8001b96:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b9a:	4a4d      	ldr	r2, [pc, #308]	; (8001cd0 <MX_GPIO_Init+0x1e8>)
 8001b9c:	f043 0302 	orr.w	r3, r3, #2
 8001ba0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001ba4:	4b4a      	ldr	r3, [pc, #296]	; (8001cd0 <MX_GPIO_Init+0x1e8>)
 8001ba6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001baa:	f003 0302 	and.w	r3, r3, #2
 8001bae:	607b      	str	r3, [r7, #4]
 8001bb0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001bb2:	4b47      	ldr	r3, [pc, #284]	; (8001cd0 <MX_GPIO_Init+0x1e8>)
 8001bb4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001bb8:	4a45      	ldr	r2, [pc, #276]	; (8001cd0 <MX_GPIO_Init+0x1e8>)
 8001bba:	f043 0308 	orr.w	r3, r3, #8
 8001bbe:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001bc2:	4b43      	ldr	r3, [pc, #268]	; (8001cd0 <MX_GPIO_Init+0x1e8>)
 8001bc4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001bc8:	f003 0308 	and.w	r3, r3, #8
 8001bcc:	603b      	str	r3, [r7, #0]
 8001bce:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, S_DirPaP1_Pin|S_DirPaP2_Pin|S_DirPaP3_Pin, GPIO_PIN_RESET);
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8001bd6:	483f      	ldr	r0, [pc, #252]	; (8001cd4 <MX_GPIO_Init+0x1ec>)
 8001bd8:	f006 f96c 	bl	8007eb4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, S_Enable_1_Pin|S_Enable_2_Pin|S_Enable_3_Pin, GPIO_PIN_SET);
 8001bdc:	2201      	movs	r2, #1
 8001bde:	2170      	movs	r1, #112	; 0x70
 8001be0:	483d      	ldr	r0, [pc, #244]	; (8001cd8 <MX_GPIO_Init+0x1f0>)
 8001be2:	f006 f967 	bl	8007eb4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin
                           PEPin PEPin */
  GPIO_InitStruct.Pin = E_EndStop2_Sup_Pin|E_EndStop2_Inf_Pin|E_EndStop3_Sup_Pin|E_EndStop3_Inf_Pin
 8001be6:	233f      	movs	r3, #63	; 0x3f
 8001be8:	61fb      	str	r3, [r7, #28]
                          |E_EndStop1_Sup_Pin|E_EndStop1_Inf_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001bea:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001bee:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001bf0:	2301      	movs	r3, #1
 8001bf2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001bf4:	f107 031c 	add.w	r3, r7, #28
 8001bf8:	4619      	mov	r1, r3
 8001bfa:	4838      	ldr	r0, [pc, #224]	; (8001cdc <MX_GPIO_Init+0x1f4>)
 8001bfc:	f005 ff92 	bl	8007b24 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BUTTON_Pin;
 8001c00:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001c04:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001c06:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001c0a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001c0c:	2302      	movs	r3, #2
 8001c0e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BUTTON_GPIO_Port, &GPIO_InitStruct);
 8001c10:	f107 031c 	add.w	r3, r7, #28
 8001c14:	4619      	mov	r1, r3
 8001c16:	482f      	ldr	r0, [pc, #188]	; (8001cd4 <MX_GPIO_Init+0x1ec>)
 8001c18:	f005 ff84 	bl	8007b24 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = S_DirPaP1_Pin|S_DirPaP2_Pin|S_DirPaP3_Pin;
 8001c1c:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8001c20:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c22:	2301      	movs	r3, #1
 8001c24:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001c26:	2301      	movs	r3, #1
 8001c28:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c2e:	f107 031c 	add.w	r3, r7, #28
 8001c32:	4619      	mov	r1, r3
 8001c34:	4827      	ldr	r0, [pc, #156]	; (8001cd4 <MX_GPIO_Init+0x1ec>)
 8001c36:	f005 ff75 	bl	8007b24 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = S_Enable_1_Pin|S_Enable_2_Pin|S_Enable_3_Pin;
 8001c3a:	2370      	movs	r3, #112	; 0x70
 8001c3c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c3e:	2301      	movs	r3, #1
 8001c40:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001c42:	2301      	movs	r3, #1
 8001c44:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c46:	2300      	movs	r3, #0
 8001c48:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001c4a:	f107 031c 	add.w	r3, r7, #28
 8001c4e:	4619      	mov	r1, r3
 8001c50:	4821      	ldr	r0, [pc, #132]	; (8001cd8 <MX_GPIO_Init+0x1f0>)
 8001c52:	f005 ff67 	bl	8007b24 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 1, 0);
 8001c56:	2200      	movs	r2, #0
 8001c58:	2101      	movs	r1, #1
 8001c5a:	2006      	movs	r0, #6
 8001c5c:	f005 f9bb 	bl	8006fd6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001c60:	2006      	movs	r0, #6
 8001c62:	f005 f9d2 	bl	800700a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 1, 0);
 8001c66:	2200      	movs	r2, #0
 8001c68:	2101      	movs	r1, #1
 8001c6a:	2007      	movs	r0, #7
 8001c6c:	f005 f9b3 	bl	8006fd6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8001c70:	2007      	movs	r0, #7
 8001c72:	f005 f9ca 	bl	800700a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 1, 0);
 8001c76:	2200      	movs	r2, #0
 8001c78:	2101      	movs	r1, #1
 8001c7a:	2008      	movs	r0, #8
 8001c7c:	f005 f9ab 	bl	8006fd6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8001c80:	2008      	movs	r0, #8
 8001c82:	f005 f9c2 	bl	800700a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 1, 0);
 8001c86:	2200      	movs	r2, #0
 8001c88:	2101      	movs	r1, #1
 8001c8a:	2009      	movs	r0, #9
 8001c8c:	f005 f9a3 	bl	8006fd6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8001c90:	2009      	movs	r0, #9
 8001c92:	f005 f9ba 	bl	800700a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 1, 0);
 8001c96:	2200      	movs	r2, #0
 8001c98:	2101      	movs	r1, #1
 8001c9a:	200a      	movs	r0, #10
 8001c9c:	f005 f99b 	bl	8006fd6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8001ca0:	200a      	movs	r0, #10
 8001ca2:	f005 f9b2 	bl	800700a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 1, 0);
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	2101      	movs	r1, #1
 8001caa:	2017      	movs	r0, #23
 8001cac:	f005 f993 	bl	8006fd6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001cb0:	2017      	movs	r0, #23
 8001cb2:	f005 f9aa 	bl	800700a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 2, 0);
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	2102      	movs	r1, #2
 8001cba:	2028      	movs	r0, #40	; 0x28
 8001cbc:	f005 f98b 	bl	8006fd6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001cc0:	2028      	movs	r0, #40	; 0x28
 8001cc2:	f005 f9a2 	bl	800700a <HAL_NVIC_EnableIRQ>

}
 8001cc6:	bf00      	nop
 8001cc8:	3730      	adds	r7, #48	; 0x30
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	bd80      	pop	{r7, pc}
 8001cce:	bf00      	nop
 8001cd0:	58024400 	.word	0x58024400
 8001cd4:	58020800 	.word	0x58020800
 8001cd8:	58020c00 	.word	0x58020c00
 8001cdc:	58021000 	.word	0x58021000

08001ce0 <homingAprox>:
#include "homing.h"
uint8_t homeOk;			//Flag de aproximacion de homing
double rpm;


void homingAprox(void) {
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b082      	sub	sp, #8
 8001ce4:	af00      	add	r7, sp, #0
	homeOk = 0;
 8001ce6:	4b22      	ldr	r3, [pc, #136]	; (8001d70 <homingAprox+0x90>)
 8001ce8:	2200      	movs	r2, #0
 8001cea:	701a      	strb	r2, [r3, #0]
	HAL_TIM_IC_Stop_IT(&htim2, TIM_CHANNEL_1);//Apago interrupcion input capture motor 1
 8001cec:	2100      	movs	r1, #0
 8001cee:	4821      	ldr	r0, [pc, #132]	; (8001d74 <homingAprox+0x94>)
 8001cf0:	f009 f9be 	bl	800b070 <HAL_TIM_IC_Stop_IT>
	HAL_TIM_IC_Stop_IT(&htim3, TIM_CHANNEL_1);//Apago interrupcion input capture motor 2
 8001cf4:	2100      	movs	r1, #0
 8001cf6:	4820      	ldr	r0, [pc, #128]	; (8001d78 <homingAprox+0x98>)
 8001cf8:	f009 f9ba 	bl	800b070 <HAL_TIM_IC_Stop_IT>
	HAL_TIM_IC_Stop_IT(&htim4, TIM_CHANNEL_1);//Apago interrupcion input capture motor 3
 8001cfc:	2100      	movs	r1, #0
 8001cfe:	481f      	ldr	r0, [pc, #124]	; (8001d7c <homingAprox+0x9c>)
 8001d00:	f009 f9b6 	bl	800b070 <HAL_TIM_IC_Stop_IT>
	HAL_NVIC_DisableIRQ(EXTI0_IRQn);	//Apago interrupcion EndStop 1 Superior
 8001d04:	2006      	movs	r0, #6
 8001d06:	f005 f98e 	bl	8007026 <HAL_NVIC_DisableIRQ>
	HAL_NVIC_DisableIRQ(EXTI1_IRQn);	//Apago interrupcion EndStop 1 Inferior
 8001d0a:	2007      	movs	r0, #7
 8001d0c:	f005 f98b 	bl	8007026 <HAL_NVIC_DisableIRQ>
	HAL_NVIC_DisableIRQ(EXTI2_IRQn);	//Apago interrupcion EndStop 2 Superior
 8001d10:	2008      	movs	r0, #8
 8001d12:	f005 f988 	bl	8007026 <HAL_NVIC_DisableIRQ>
	HAL_NVIC_DisableIRQ(EXTI3_IRQn);	//Apago interrupcion EndStop 2 Inferior
 8001d16:	2009      	movs	r0, #9
 8001d18:	f005 f985 	bl	8007026 <HAL_NVIC_DisableIRQ>
	HAL_NVIC_DisableIRQ(EXTI4_IRQn);	//Apago interrupcion EndStop 3 Superior
 8001d1c:	200a      	movs	r0, #10
 8001d1e:	f005 f982 	bl	8007026 <HAL_NVIC_DisableIRQ>
	HAL_NVIC_DisableIRQ(EXTI9_5_IRQn);	//Apago interrupcion EndStop 3 Inferior
 8001d22:	2017      	movs	r0, #23
 8001d24:	f005 f97f 	bl	8007026 <HAL_NVIC_DisableIRQ>
	HAL_GPIO_WritePin(S_DirPaP1_GPIO_Port, S_DirPaP1_Pin, GPIO_PIN_RESET);//Set direccion con la misma convencion que motor.c
 8001d28:	2200      	movs	r2, #0
 8001d2a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001d2e:	4814      	ldr	r0, [pc, #80]	; (8001d80 <homingAprox+0xa0>)
 8001d30:	f006 f8c0 	bl	8007eb4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S_DirPaP2_GPIO_Port, S_DirPaP2_Pin, GPIO_PIN_RESET);
 8001d34:	2200      	movs	r2, #0
 8001d36:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001d3a:	4811      	ldr	r0, [pc, #68]	; (8001d80 <homingAprox+0xa0>)
 8001d3c:	f006 f8ba 	bl	8007eb4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S_DirPaP3_GPIO_Port, S_DirPaP3_Pin, GPIO_PIN_RESET);
 8001d40:	2200      	movs	r2, #0
 8001d42:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001d46:	480e      	ldr	r0, [pc, #56]	; (8001d80 <homingAprox+0xa0>)
 8001d48:	f006 f8b4 	bl	8007eb4 <HAL_GPIO_WritePin>
	HAL_Delay(20);
 8001d4c:	2014      	movs	r0, #20
 8001d4e:	f005 f813 	bl	8006d78 <HAL_Delay>
	rpm = 0.1;
 8001d52:	490c      	ldr	r1, [pc, #48]	; (8001d84 <homingAprox+0xa4>)
 8001d54:	a304      	add	r3, pc, #16	; (adr r3, 8001d68 <homingAprox+0x88>)
 8001d56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d5a:	e9c1 2300 	strd	r2, r3, [r1]
	uint32_t hom = 0;
 8001d5e:	2300      	movs	r3, #0
 8001d60:	607b      	str	r3, [r7, #4]


	while (homeOk == 0) {
 8001d62:	e17d      	b.n	8002060 <homingAprox+0x380>
 8001d64:	f3af 8000 	nop.w
 8001d68:	9999999a 	.word	0x9999999a
 8001d6c:	3fb99999 	.word	0x3fb99999
 8001d70:	24000380 	.word	0x24000380
 8001d74:	2400058c 	.word	0x2400058c
 8001d78:	240005d8 	.word	0x240005d8
 8001d7c:	24000624 	.word	0x24000624
 8001d80:	58020800 	.word	0x58020800
 8001d84:	24000388 	.word	0x24000388
		if(rpm<=4){
 8001d88:	4bc3      	ldr	r3, [pc, #780]	; (8002098 <homingAprox+0x3b8>)
 8001d8a:	ed93 7b00 	vldr	d7, [r3]
 8001d8e:	eeb1 6b00 	vmov.f64	d6, #16	; 0x40800000  4.0
 8001d92:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8001d96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d9a:	d809      	bhi.n	8001db0 <homingAprox+0xd0>
			rpm = rpm + 0.001;
 8001d9c:	4bbe      	ldr	r3, [pc, #760]	; (8002098 <homingAprox+0x3b8>)
 8001d9e:	ed93 7b00 	vldr	d7, [r3]
 8001da2:	ed9f 6bb7 	vldr	d6, [pc, #732]	; 8002080 <homingAprox+0x3a0>
 8001da6:	ee37 7b06 	vadd.f64	d7, d7, d6
 8001daa:	4bbb      	ldr	r3, [pc, #748]	; (8002098 <homingAprox+0x3b8>)
 8001dac:	ed83 7b00 	vstr	d7, [r3]
		//TIM12->CNT=0;




		periodoM[0]=(uint32_t)(((FCL * 60.0) / (rpm * ((double)(TIM12->PSC) + 1.0) * 9600.0)) - 1.0);
 8001db0:	4bba      	ldr	r3, [pc, #744]	; (800209c <homingAprox+0x3bc>)
 8001db2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001db4:	ee07 3a90 	vmov	s15, r3
 8001db8:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8001dbc:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8001dc0:	ee37 6b06 	vadd.f64	d6, d7, d6
 8001dc4:	4bb4      	ldr	r3, [pc, #720]	; (8002098 <homingAprox+0x3b8>)
 8001dc6:	ed93 7b00 	vldr	d7, [r3]
 8001dca:	ee26 7b07 	vmul.f64	d7, d6, d7
 8001dce:	ed9f 6bae 	vldr	d6, [pc, #696]	; 8002088 <homingAprox+0x3a8>
 8001dd2:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001dd6:	ed9f 5bae 	vldr	d5, [pc, #696]	; 8002090 <homingAprox+0x3b0>
 8001dda:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8001dde:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8001de2:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001de6:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001dea:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8001dee:	4bac      	ldr	r3, [pc, #688]	; (80020a0 <homingAprox+0x3c0>)
 8001df0:	ed83 7b00 	vstr	d7, [r3]
		periodoM[1]=(uint32_t)(((FCL * 60.0) / (rpm * ((double)(TIM13->PSC) + 1.0) * 9600.0)) - 1.0);
 8001df4:	4bab      	ldr	r3, [pc, #684]	; (80020a4 <homingAprox+0x3c4>)
 8001df6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001df8:	ee07 3a90 	vmov	s15, r3
 8001dfc:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8001e00:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8001e04:	ee37 6b06 	vadd.f64	d6, d7, d6
 8001e08:	4ba3      	ldr	r3, [pc, #652]	; (8002098 <homingAprox+0x3b8>)
 8001e0a:	ed93 7b00 	vldr	d7, [r3]
 8001e0e:	ee26 7b07 	vmul.f64	d7, d6, d7
 8001e12:	ed9f 6b9d 	vldr	d6, [pc, #628]	; 8002088 <homingAprox+0x3a8>
 8001e16:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001e1a:	ed9f 5b9d 	vldr	d5, [pc, #628]	; 8002090 <homingAprox+0x3b0>
 8001e1e:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8001e22:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8001e26:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001e2a:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001e2e:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8001e32:	4b9b      	ldr	r3, [pc, #620]	; (80020a0 <homingAprox+0x3c0>)
 8001e34:	ed83 7b02 	vstr	d7, [r3, #8]
		periodoM[2]=(uint32_t)(((FCL * 60.0) / (rpm * ((double)(TIM14->PSC) + 1.0) * 9600.0)) - 1.0);
 8001e38:	4b9b      	ldr	r3, [pc, #620]	; (80020a8 <homingAprox+0x3c8>)
 8001e3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e3c:	ee07 3a90 	vmov	s15, r3
 8001e40:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8001e44:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8001e48:	ee37 6b06 	vadd.f64	d6, d7, d6
 8001e4c:	4b92      	ldr	r3, [pc, #584]	; (8002098 <homingAprox+0x3b8>)
 8001e4e:	ed93 7b00 	vldr	d7, [r3]
 8001e52:	ee26 7b07 	vmul.f64	d7, d6, d7
 8001e56:	ed9f 6b8c 	vldr	d6, [pc, #560]	; 8002088 <homingAprox+0x3a8>
 8001e5a:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001e5e:	ed9f 5b8c 	vldr	d5, [pc, #560]	; 8002090 <homingAprox+0x3b0>
 8001e62:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8001e66:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8001e6a:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001e6e:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001e72:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8001e76:	4b8a      	ldr	r3, [pc, #552]	; (80020a0 <homingAprox+0x3c0>)
 8001e78:	ed83 7b04 	vstr	d7, [r3, #16]


		if (TIM12->CNT > periodoM[0]) {
 8001e7c:	4b87      	ldr	r3, [pc, #540]	; (800209c <homingAprox+0x3bc>)
 8001e7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e80:	ee07 3a90 	vmov	s15, r3
 8001e84:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 8001e88:	4b85      	ldr	r3, [pc, #532]	; (80020a0 <homingAprox+0x3c0>)
 8001e8a:	ed93 7b00 	vldr	d7, [r3]
 8001e8e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8001e92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e96:	dd0c      	ble.n	8001eb2 <homingAprox+0x1d2>
					TIM12->CNT = periodoM[0] - 1;// Reinicio clock solo si hace falta y a un valor cercano a la interrupcion, para que no haga ese paso de nuevo
 8001e98:	4b81      	ldr	r3, [pc, #516]	; (80020a0 <homingAprox+0x3c0>)
 8001e9a:	ed93 7b00 	vldr	d7, [r3]
 8001e9e:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8001ea2:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001ea6:	4b7d      	ldr	r3, [pc, #500]	; (800209c <homingAprox+0x3bc>)
 8001ea8:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001eac:	ee17 2a90 	vmov	r2, s15
 8001eb0:	625a      	str	r2, [r3, #36]	; 0x24
		}
		if (TIM13->CNT > periodoM[1]) {
 8001eb2:	4b7c      	ldr	r3, [pc, #496]	; (80020a4 <homingAprox+0x3c4>)
 8001eb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eb6:	ee07 3a90 	vmov	s15, r3
 8001eba:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 8001ebe:	4b78      	ldr	r3, [pc, #480]	; (80020a0 <homingAprox+0x3c0>)
 8001ec0:	ed93 7b02 	vldr	d7, [r3, #8]
 8001ec4:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8001ec8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ecc:	dd0c      	ble.n	8001ee8 <homingAprox+0x208>
					TIM13->CNT = periodoM[1] - 1;// Reinicio clock solo si hace falta y a un valor cercano a la interrupcion, para que no haga ese paso de nuevo
 8001ece:	4b74      	ldr	r3, [pc, #464]	; (80020a0 <homingAprox+0x3c0>)
 8001ed0:	ed93 7b02 	vldr	d7, [r3, #8]
 8001ed4:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8001ed8:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001edc:	4b71      	ldr	r3, [pc, #452]	; (80020a4 <homingAprox+0x3c4>)
 8001ede:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001ee2:	ee17 2a90 	vmov	r2, s15
 8001ee6:	625a      	str	r2, [r3, #36]	; 0x24
		}
		if (TIM14->CNT > periodoM[2]) {
 8001ee8:	4b6f      	ldr	r3, [pc, #444]	; (80020a8 <homingAprox+0x3c8>)
 8001eea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eec:	ee07 3a90 	vmov	s15, r3
 8001ef0:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 8001ef4:	4b6a      	ldr	r3, [pc, #424]	; (80020a0 <homingAprox+0x3c0>)
 8001ef6:	ed93 7b04 	vldr	d7, [r3, #16]
 8001efa:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8001efe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f02:	dd0c      	ble.n	8001f1e <homingAprox+0x23e>
					TIM14->CNT = periodoM[2] - 1;// Reinicio clock solo si hace falta y a un valor cercano a la interrupcion, para que no haga ese paso de nuevo
 8001f04:	4b66      	ldr	r3, [pc, #408]	; (80020a0 <homingAprox+0x3c0>)
 8001f06:	ed93 7b04 	vldr	d7, [r3, #16]
 8001f0a:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8001f0e:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001f12:	4b65      	ldr	r3, [pc, #404]	; (80020a8 <homingAprox+0x3c8>)
 8001f14:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001f18:	ee17 2a90 	vmov	r2, s15
 8001f1c:	625a      	str	r2, [r3, #36]	; 0x24
		}

		TIM12->ARR =periodoM[0];
 8001f1e:	4b60      	ldr	r3, [pc, #384]	; (80020a0 <homingAprox+0x3c0>)
 8001f20:	ed93 7b00 	vldr	d7, [r3]
 8001f24:	4b5d      	ldr	r3, [pc, #372]	; (800209c <homingAprox+0x3bc>)
 8001f26:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001f2a:	ee17 2a90 	vmov	r2, s15
 8001f2e:	62da      	str	r2, [r3, #44]	; 0x2c
		TIM12->CCR1 = (uint32_t)((double)(TIM12->ARR) / 2.0);
 8001f30:	4b5a      	ldr	r3, [pc, #360]	; (800209c <homingAprox+0x3bc>)
 8001f32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f34:	ee07 3a90 	vmov	s15, r3
 8001f38:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 8001f3c:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8001f40:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001f44:	4b55      	ldr	r3, [pc, #340]	; (800209c <homingAprox+0x3bc>)
 8001f46:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001f4a:	ee17 2a90 	vmov	r2, s15
 8001f4e:	635a      	str	r2, [r3, #52]	; 0x34
		TIM13->ARR =periodoM[1];
 8001f50:	4b53      	ldr	r3, [pc, #332]	; (80020a0 <homingAprox+0x3c0>)
 8001f52:	ed93 7b02 	vldr	d7, [r3, #8]
 8001f56:	4b53      	ldr	r3, [pc, #332]	; (80020a4 <homingAprox+0x3c4>)
 8001f58:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001f5c:	ee17 2a90 	vmov	r2, s15
 8001f60:	62da      	str	r2, [r3, #44]	; 0x2c
		TIM13->CCR1 = (uint32_t)((double)(TIM13->ARR) / 2.0);
 8001f62:	4b50      	ldr	r3, [pc, #320]	; (80020a4 <homingAprox+0x3c4>)
 8001f64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f66:	ee07 3a90 	vmov	s15, r3
 8001f6a:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 8001f6e:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8001f72:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001f76:	4b4b      	ldr	r3, [pc, #300]	; (80020a4 <homingAprox+0x3c4>)
 8001f78:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001f7c:	ee17 2a90 	vmov	r2, s15
 8001f80:	635a      	str	r2, [r3, #52]	; 0x34
		TIM14->ARR =periodoM[2];
 8001f82:	4b47      	ldr	r3, [pc, #284]	; (80020a0 <homingAprox+0x3c0>)
 8001f84:	ed93 7b04 	vldr	d7, [r3, #16]
 8001f88:	4b47      	ldr	r3, [pc, #284]	; (80020a8 <homingAprox+0x3c8>)
 8001f8a:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001f8e:	ee17 2a90 	vmov	r2, s15
 8001f92:	62da      	str	r2, [r3, #44]	; 0x2c
		TIM14->CCR1 = (uint32_t)((double)(TIM14->ARR) / 2.0);
 8001f94:	4b44      	ldr	r3, [pc, #272]	; (80020a8 <homingAprox+0x3c8>)
 8001f96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f98:	ee07 3a90 	vmov	s15, r3
 8001f9c:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 8001fa0:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8001fa4:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001fa8:	4b3f      	ldr	r3, [pc, #252]	; (80020a8 <homingAprox+0x3c8>)
 8001faa:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001fae:	ee17 2a90 	vmov	r2, s15
 8001fb2:	635a      	str	r2, [r3, #52]	; 0x34


		if (!(HAL_GPIO_ReadPin(E_EndStop1_Sup_GPIO_Port, E_EndStop1_Sup_Pin)) || !(HAL_GPIO_ReadPin(E_EndStop2_Sup_GPIO_Port, E_EndStop2_Sup_Pin)) || !(HAL_GPIO_ReadPin(E_EndStop3_Sup_GPIO_Port, E_EndStop3_Sup_Pin))) {
 8001fb4:	2101      	movs	r1, #1
 8001fb6:	483d      	ldr	r0, [pc, #244]	; (80020ac <homingAprox+0x3cc>)
 8001fb8:	f005 ff64 	bl	8007e84 <HAL_GPIO_ReadPin>
 8001fbc:	4603      	mov	r3, r0
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d00d      	beq.n	8001fde <homingAprox+0x2fe>
 8001fc2:	2104      	movs	r1, #4
 8001fc4:	4839      	ldr	r0, [pc, #228]	; (80020ac <homingAprox+0x3cc>)
 8001fc6:	f005 ff5d 	bl	8007e84 <HAL_GPIO_ReadPin>
 8001fca:	4603      	mov	r3, r0
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d006      	beq.n	8001fde <homingAprox+0x2fe>
 8001fd0:	2110      	movs	r1, #16
 8001fd2:	4836      	ldr	r0, [pc, #216]	; (80020ac <homingAprox+0x3cc>)
 8001fd4:	f005 ff56 	bl	8007e84 <HAL_GPIO_ReadPin>
 8001fd8:	4603      	mov	r3, r0
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d126      	bne.n	800202c <homingAprox+0x34c>
			HAL_Delay(30);
 8001fde:	201e      	movs	r0, #30
 8001fe0:	f004 feca 	bl	8006d78 <HAL_Delay>
			if (!(HAL_GPIO_ReadPin(E_EndStop1_Sup_GPIO_Port, E_EndStop1_Sup_Pin)) || !(HAL_GPIO_ReadPin(E_EndStop2_Sup_GPIO_Port, E_EndStop2_Sup_Pin)) || !(HAL_GPIO_ReadPin(E_EndStop3_Sup_GPIO_Port, E_EndStop3_Sup_Pin))) {
 8001fe4:	2101      	movs	r1, #1
 8001fe6:	4831      	ldr	r0, [pc, #196]	; (80020ac <homingAprox+0x3cc>)
 8001fe8:	f005 ff4c 	bl	8007e84 <HAL_GPIO_ReadPin>
 8001fec:	4603      	mov	r3, r0
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d00d      	beq.n	800200e <homingAprox+0x32e>
 8001ff2:	2104      	movs	r1, #4
 8001ff4:	482d      	ldr	r0, [pc, #180]	; (80020ac <homingAprox+0x3cc>)
 8001ff6:	f005 ff45 	bl	8007e84 <HAL_GPIO_ReadPin>
 8001ffa:	4603      	mov	r3, r0
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d006      	beq.n	800200e <homingAprox+0x32e>
 8002000:	2110      	movs	r1, #16
 8002002:	482a      	ldr	r0, [pc, #168]	; (80020ac <homingAprox+0x3cc>)
 8002004:	f005 ff3e 	bl	8007e84 <HAL_GPIO_ReadPin>
 8002008:	4603      	mov	r3, r0
 800200a:	2b00      	cmp	r3, #0
 800200c:	d10e      	bne.n	800202c <homingAprox+0x34c>
				HAL_TIM_PWM_Stop(&htim12, TIM_CHANNEL_1);
 800200e:	2100      	movs	r1, #0
 8002010:	4827      	ldr	r0, [pc, #156]	; (80020b0 <homingAprox+0x3d0>)
 8002012:	f008 fde5 	bl	800abe0 <HAL_TIM_PWM_Stop>
				HAL_TIM_PWM_Stop(&htim13, TIM_CHANNEL_1);
 8002016:	2100      	movs	r1, #0
 8002018:	4826      	ldr	r0, [pc, #152]	; (80020b4 <homingAprox+0x3d4>)
 800201a:	f008 fde1 	bl	800abe0 <HAL_TIM_PWM_Stop>
				HAL_TIM_PWM_Stop(&htim14, TIM_CHANNEL_1);
 800201e:	2100      	movs	r1, #0
 8002020:	4825      	ldr	r0, [pc, #148]	; (80020b8 <homingAprox+0x3d8>)
 8002022:	f008 fddd 	bl	800abe0 <HAL_TIM_PWM_Stop>
				homeOk = 1;
 8002026:	4b25      	ldr	r3, [pc, #148]	; (80020bc <homingAprox+0x3dc>)
 8002028:	2201      	movs	r2, #1
 800202a:	701a      	strb	r2, [r3, #0]
			}
		}
		if(hom==0){
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	2b00      	cmp	r3, #0
 8002030:	d113      	bne.n	800205a <homingAprox+0x37a>
			hom=1;
 8002032:	2301      	movs	r3, #1
 8002034:	607b      	str	r3, [r7, #4]
			HAL_UART_Transmit(&huart3,(uint8_t *)"hola k ace\n\r", 12, 100);
 8002036:	2364      	movs	r3, #100	; 0x64
 8002038:	220c      	movs	r2, #12
 800203a:	4921      	ldr	r1, [pc, #132]	; (80020c0 <homingAprox+0x3e0>)
 800203c:	4821      	ldr	r0, [pc, #132]	; (80020c4 <homingAprox+0x3e4>)
 800203e:	f00a fb15 	bl	800c66c <HAL_UART_Transmit>
			HAL_TIM_PWM_Start(&htim12, TIM_CHANNEL_1);
 8002042:	2100      	movs	r1, #0
 8002044:	481a      	ldr	r0, [pc, #104]	; (80020b0 <homingAprox+0x3d0>)
 8002046:	f008 fcbd 	bl	800a9c4 <HAL_TIM_PWM_Start>
			HAL_TIM_PWM_Start(&htim13, TIM_CHANNEL_1);
 800204a:	2100      	movs	r1, #0
 800204c:	4819      	ldr	r0, [pc, #100]	; (80020b4 <homingAprox+0x3d4>)
 800204e:	f008 fcb9 	bl	800a9c4 <HAL_TIM_PWM_Start>
			HAL_TIM_PWM_Start(&htim14, TIM_CHANNEL_1);
 8002052:	2100      	movs	r1, #0
 8002054:	4818      	ldr	r0, [pc, #96]	; (80020b8 <homingAprox+0x3d8>)
 8002056:	f008 fcb5 	bl	800a9c4 <HAL_TIM_PWM_Start>
		}
		HAL_Delay(1);
 800205a:	2001      	movs	r0, #1
 800205c:	f004 fe8c 	bl	8006d78 <HAL_Delay>
	while (homeOk == 0) {
 8002060:	4b16      	ldr	r3, [pc, #88]	; (80020bc <homingAprox+0x3dc>)
 8002062:	781b      	ldrb	r3, [r3, #0]
 8002064:	2b00      	cmp	r3, #0
 8002066:	f43f ae8f 	beq.w	8001d88 <homingAprox+0xa8>
	}
	HAL_UART_Transmit(&huart3,(uint8_t *)"Fin_Aprox\n\r", 11, 100);
 800206a:	2364      	movs	r3, #100	; 0x64
 800206c:	220b      	movs	r2, #11
 800206e:	4916      	ldr	r1, [pc, #88]	; (80020c8 <homingAprox+0x3e8>)
 8002070:	4814      	ldr	r0, [pc, #80]	; (80020c4 <homingAprox+0x3e4>)
 8002072:	f00a fafb 	bl	800c66c <HAL_UART_Transmit>
}
 8002076:	bf00      	nop
 8002078:	3708      	adds	r7, #8
 800207a:	46bd      	mov	sp, r7
 800207c:	bd80      	pop	{r7, pc}
 800207e:	bf00      	nop
 8002080:	d2f1a9fc 	.word	0xd2f1a9fc
 8002084:	3f50624d 	.word	0x3f50624d
 8002088:	00000000 	.word	0x00000000
 800208c:	40c2c000 	.word	0x40c2c000
 8002090:	00000000 	.word	0x00000000
 8002094:	41ec9c38 	.word	0x41ec9c38
 8002098:	24000388 	.word	0x24000388
 800209c:	40001800 	.word	0x40001800
 80020a0:	240004b8 	.word	0x240004b8
 80020a4:	40001c00 	.word	0x40001c00
 80020a8:	40002000 	.word	0x40002000
 80020ac:	58021000 	.word	0x58021000
 80020b0:	240006bc 	.word	0x240006bc
 80020b4:	24000708 	.word	0x24000708
 80020b8:	24000754 	.word	0x24000754
 80020bc:	24000380 	.word	0x24000380
 80020c0:	08012298 	.word	0x08012298
 80020c4:	24000ca8 	.word	0x24000ca8
 80020c8:	080122a8 	.word	0x080122a8
 80020cc:	00000000 	.word	0x00000000

080020d0 <homingArm1>:

void homingArm1(void) {
 80020d0:	b580      	push	{r7, lr}
 80020d2:	b082      	sub	sp, #8
 80020d4:	af00      	add	r7, sp, #0
	double flagEndStop=0;
 80020d6:	f04f 0200 	mov.w	r2, #0
 80020da:	f04f 0300 	mov.w	r3, #0
 80020de:	e9c7 2300 	strd	r2, r3, [r7]
	HAL_TIM_PWM_Stop(&htim12, TIM_CHANNEL_1);
 80020e2:	2100      	movs	r1, #0
 80020e4:	485e      	ldr	r0, [pc, #376]	; (8002260 <homingArm1+0x190>)
 80020e6:	f008 fd7b 	bl	800abe0 <HAL_TIM_PWM_Stop>
	rpm = 0.5;
 80020ea:	495e      	ldr	r1, [pc, #376]	; (8002264 <homingArm1+0x194>)
 80020ec:	f04f 0200 	mov.w	r2, #0
 80020f0:	4b5d      	ldr	r3, [pc, #372]	; (8002268 <homingArm1+0x198>)
 80020f2:	e9c1 2300 	strd	r2, r3, [r1]
	TIM12->ARR = ((FCL * 60) / (rpm * ((TIM12->PSC) + 1) * 9600)) - 1;
 80020f6:	4b5d      	ldr	r3, [pc, #372]	; (800226c <homingArm1+0x19c>)
 80020f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020fa:	3301      	adds	r3, #1
 80020fc:	ee07 3a90 	vmov	s15, r3
 8002100:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 8002104:	4b57      	ldr	r3, [pc, #348]	; (8002264 <homingArm1+0x194>)
 8002106:	ed93 7b00 	vldr	d7, [r3]
 800210a:	ee26 7b07 	vmul.f64	d7, d6, d7
 800210e:	ed9f 6b50 	vldr	d6, [pc, #320]	; 8002250 <homingArm1+0x180>
 8002112:	ee27 6b06 	vmul.f64	d6, d7, d6
 8002116:	ed9f 5b50 	vldr	d5, [pc, #320]	; 8002258 <homingArm1+0x188>
 800211a:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800211e:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8002122:	ee37 7b46 	vsub.f64	d7, d7, d6
 8002126:	4b51      	ldr	r3, [pc, #324]	; (800226c <homingArm1+0x19c>)
 8002128:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800212c:	ee17 2a90 	vmov	r2, s15
 8002130:	62da      	str	r2, [r3, #44]	; 0x2c
	TIM12->CCR1 = (TIM12->ARR) / 2;
 8002132:	4b4e      	ldr	r3, [pc, #312]	; (800226c <homingArm1+0x19c>)
 8002134:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002136:	4a4d      	ldr	r2, [pc, #308]	; (800226c <homingArm1+0x19c>)
 8002138:	085b      	lsrs	r3, r3, #1
 800213a:	6353      	str	r3, [r2, #52]	; 0x34
	if (!(HAL_GPIO_ReadPin(E_EndStop1_Sup_GPIO_Port, E_EndStop1_Sup_Pin))) {
 800213c:	2101      	movs	r1, #1
 800213e:	484c      	ldr	r0, [pc, #304]	; (8002270 <homingArm1+0x1a0>)
 8002140:	f005 fea0 	bl	8007e84 <HAL_GPIO_ReadPin>
 8002144:	4603      	mov	r3, r0
 8002146:	2b00      	cmp	r3, #0
 8002148:	d114      	bne.n	8002174 <homingArm1+0xa4>
		while(!(HAL_GPIO_ReadPin(E_EndStop1_Sup_GPIO_Port, E_EndStop1_Sup_Pin))){
 800214a:	e00c      	b.n	8002166 <homingArm1+0x96>
			HAL_GPIO_WritePin(S_DirPaP1_GPIO_Port, S_DirPaP1_Pin, GPIO_PIN_SET);
 800214c:	2201      	movs	r2, #1
 800214e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002152:	4848      	ldr	r0, [pc, #288]	; (8002274 <homingArm1+0x1a4>)
 8002154:	f005 feae 	bl	8007eb4 <HAL_GPIO_WritePin>
			HAL_TIM_PWM_Start(&htim12, TIM_CHANNEL_1);
 8002158:	2100      	movs	r1, #0
 800215a:	4841      	ldr	r0, [pc, #260]	; (8002260 <homingArm1+0x190>)
 800215c:	f008 fc32 	bl	800a9c4 <HAL_TIM_PWM_Start>
			HAL_Delay(30);
 8002160:	201e      	movs	r0, #30
 8002162:	f004 fe09 	bl	8006d78 <HAL_Delay>
		while(!(HAL_GPIO_ReadPin(E_EndStop1_Sup_GPIO_Port, E_EndStop1_Sup_Pin))){
 8002166:	2101      	movs	r1, #1
 8002168:	4841      	ldr	r0, [pc, #260]	; (8002270 <homingArm1+0x1a0>)
 800216a:	f005 fe8b 	bl	8007e84 <HAL_GPIO_ReadPin>
 800216e:	4603      	mov	r3, r0
 8002170:	2b00      	cmp	r3, #0
 8002172:	d0eb      	beq.n	800214c <homingArm1+0x7c>
		}
	}
	HAL_GPIO_WritePin(S_DirPaP1_GPIO_Port, S_DirPaP1_Pin, GPIO_PIN_RESET);
 8002174:	2200      	movs	r2, #0
 8002176:	f44f 7180 	mov.w	r1, #256	; 0x100
 800217a:	483e      	ldr	r0, [pc, #248]	; (8002274 <homingArm1+0x1a4>)
 800217c:	f005 fe9a 	bl	8007eb4 <HAL_GPIO_WritePin>
	HAL_TIM_PWM_Start(&htim12, TIM_CHANNEL_1);
 8002180:	2100      	movs	r1, #0
 8002182:	4837      	ldr	r0, [pc, #220]	; (8002260 <homingArm1+0x190>)
 8002184:	f008 fc1e 	bl	800a9c4 <HAL_TIM_PWM_Start>
	homeOk = 0;
 8002188:	4b3b      	ldr	r3, [pc, #236]	; (8002278 <homingArm1+0x1a8>)
 800218a:	2200      	movs	r2, #0
 800218c:	701a      	strb	r2, [r3, #0]
	while (homeOk == 0) {
 800218e:	e056      	b.n	800223e <homingArm1+0x16e>
		if (flagEndStop==0 && !(HAL_GPIO_ReadPin(E_EndStop1_Sup_GPIO_Port, E_EndStop1_Sup_Pin))) {
 8002190:	ed97 7b00 	vldr	d7, [r7]
 8002194:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8002198:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800219c:	d121      	bne.n	80021e2 <homingArm1+0x112>
 800219e:	2101      	movs	r1, #1
 80021a0:	4833      	ldr	r0, [pc, #204]	; (8002270 <homingArm1+0x1a0>)
 80021a2:	f005 fe6f 	bl	8007e84 <HAL_GPIO_ReadPin>
 80021a6:	4603      	mov	r3, r0
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d11a      	bne.n	80021e2 <homingArm1+0x112>
			HAL_Delay(30);		//Para filtrar transitorio
 80021ac:	201e      	movs	r0, #30
 80021ae:	f004 fde3 	bl	8006d78 <HAL_Delay>
			if (!(HAL_GPIO_ReadPin(E_EndStop1_Sup_GPIO_Port,E_EndStop1_Sup_Pin))) {
 80021b2:	2101      	movs	r1, #1
 80021b4:	482e      	ldr	r0, [pc, #184]	; (8002270 <homingArm1+0x1a0>)
 80021b6:	f005 fe65 	bl	8007e84 <HAL_GPIO_ReadPin>
 80021ba:	4603      	mov	r3, r0
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d110      	bne.n	80021e2 <homingArm1+0x112>
				HAL_UART_Transmit(&huart3,(uint8_t *)"EndStop1_Pulsado\n\r", 18, 100);
 80021c0:	2364      	movs	r3, #100	; 0x64
 80021c2:	2212      	movs	r2, #18
 80021c4:	492d      	ldr	r1, [pc, #180]	; (800227c <homingArm1+0x1ac>)
 80021c6:	482e      	ldr	r0, [pc, #184]	; (8002280 <homingArm1+0x1b0>)
 80021c8:	f00a fa50 	bl	800c66c <HAL_UART_Transmit>
				HAL_GPIO_WritePin(S_DirPaP1_GPIO_Port, S_DirPaP1_Pin, GPIO_PIN_SET);
 80021cc:	2201      	movs	r2, #1
 80021ce:	f44f 7180 	mov.w	r1, #256	; 0x100
 80021d2:	4828      	ldr	r0, [pc, #160]	; (8002274 <homingArm1+0x1a4>)
 80021d4:	f005 fe6e 	bl	8007eb4 <HAL_GPIO_WritePin>
				flagEndStop = 1;
 80021d8:	f04f 0200 	mov.w	r2, #0
 80021dc:	4b29      	ldr	r3, [pc, #164]	; (8002284 <homingArm1+0x1b4>)
 80021de:	e9c7 2300 	strd	r2, r3, [r7]
			}
		}
		if (flagEndStop==1 && HAL_GPIO_ReadPin(E_EndStop1_Sup_GPIO_Port,E_EndStop1_Sup_Pin)) {
 80021e2:	ed97 7b00 	vldr	d7, [r7]
 80021e6:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 80021ea:	eeb4 7b46 	vcmp.f64	d7, d6
 80021ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80021f2:	d124      	bne.n	800223e <homingArm1+0x16e>
 80021f4:	2101      	movs	r1, #1
 80021f6:	481e      	ldr	r0, [pc, #120]	; (8002270 <homingArm1+0x1a0>)
 80021f8:	f005 fe44 	bl	8007e84 <HAL_GPIO_ReadPin>
 80021fc:	4603      	mov	r3, r0
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d01d      	beq.n	800223e <homingArm1+0x16e>
			HAL_Delay(30);		//Para filtrar transitorio
 8002202:	201e      	movs	r0, #30
 8002204:	f004 fdb8 	bl	8006d78 <HAL_Delay>
			if (HAL_GPIO_ReadPin(E_EndStop1_Sup_GPIO_Port,E_EndStop1_Sup_Pin)) {
 8002208:	2101      	movs	r1, #1
 800220a:	4819      	ldr	r0, [pc, #100]	; (8002270 <homingArm1+0x1a0>)
 800220c:	f005 fe3a 	bl	8007e84 <HAL_GPIO_ReadPin>
 8002210:	4603      	mov	r3, r0
 8002212:	2b00      	cmp	r3, #0
 8002214:	d013      	beq.n	800223e <homingArm1+0x16e>
				HAL_TIM_PWM_Stop(&htim12, TIM_CHANNEL_1);
 8002216:	2100      	movs	r1, #0
 8002218:	4811      	ldr	r0, [pc, #68]	; (8002260 <homingArm1+0x190>)
 800221a:	f008 fce1 	bl	800abe0 <HAL_TIM_PWM_Stop>
				HAL_UART_Transmit(&huart3,(uint8_t *)"FinArm1\n\r", 9, 100);
 800221e:	2364      	movs	r3, #100	; 0x64
 8002220:	2209      	movs	r2, #9
 8002222:	4919      	ldr	r1, [pc, #100]	; (8002288 <homingArm1+0x1b8>)
 8002224:	4816      	ldr	r0, [pc, #88]	; (8002280 <homingArm1+0x1b0>)
 8002226:	f00a fa21 	bl	800c66c <HAL_UART_Transmit>
				titha1 = 0;
 800222a:	4918      	ldr	r1, [pc, #96]	; (800228c <homingArm1+0x1bc>)
 800222c:	f04f 0200 	mov.w	r2, #0
 8002230:	f04f 0300 	mov.w	r3, #0
 8002234:	e9c1 2300 	strd	r2, r3, [r1]
				homeOk = 1;
 8002238:	4b0f      	ldr	r3, [pc, #60]	; (8002278 <homingArm1+0x1a8>)
 800223a:	2201      	movs	r2, #1
 800223c:	701a      	strb	r2, [r3, #0]
	while (homeOk == 0) {
 800223e:	4b0e      	ldr	r3, [pc, #56]	; (8002278 <homingArm1+0x1a8>)
 8002240:	781b      	ldrb	r3, [r3, #0]
 8002242:	2b00      	cmp	r3, #0
 8002244:	d0a4      	beq.n	8002190 <homingArm1+0xc0>
			}
		}
	}
}
 8002246:	bf00      	nop
 8002248:	bf00      	nop
 800224a:	3708      	adds	r7, #8
 800224c:	46bd      	mov	sp, r7
 800224e:	bd80      	pop	{r7, pc}
 8002250:	00000000 	.word	0x00000000
 8002254:	40c2c000 	.word	0x40c2c000
 8002258:	00000000 	.word	0x00000000
 800225c:	c1bb1e40 	.word	0xc1bb1e40
 8002260:	240006bc 	.word	0x240006bc
 8002264:	24000388 	.word	0x24000388
 8002268:	3fe00000 	.word	0x3fe00000
 800226c:	40001800 	.word	0x40001800
 8002270:	58021000 	.word	0x58021000
 8002274:	58020800 	.word	0x58020800
 8002278:	24000380 	.word	0x24000380
 800227c:	080122b4 	.word	0x080122b4
 8002280:	24000ca8 	.word	0x24000ca8
 8002284:	3ff00000 	.word	0x3ff00000
 8002288:	080122c8 	.word	0x080122c8
 800228c:	240003b8 	.word	0x240003b8

08002290 <homingArm2>:

void homingArm2(void) {
 8002290:	b580      	push	{r7, lr}
 8002292:	b082      	sub	sp, #8
 8002294:	af00      	add	r7, sp, #0
	double flagEndStop = 0;
 8002296:	f04f 0200 	mov.w	r2, #0
 800229a:	f04f 0300 	mov.w	r3, #0
 800229e:	e9c7 2300 	strd	r2, r3, [r7]
	HAL_TIM_PWM_Stop(&htim13, TIM_CHANNEL_1);
 80022a2:	2100      	movs	r1, #0
 80022a4:	486e      	ldr	r0, [pc, #440]	; (8002460 <homingArm2+0x1d0>)
 80022a6:	f008 fc9b 	bl	800abe0 <HAL_TIM_PWM_Stop>
	rpm = 0.5;
 80022aa:	496e      	ldr	r1, [pc, #440]	; (8002464 <homingArm2+0x1d4>)
 80022ac:	f04f 0200 	mov.w	r2, #0
 80022b0:	4b6d      	ldr	r3, [pc, #436]	; (8002468 <homingArm2+0x1d8>)
 80022b2:	e9c1 2300 	strd	r2, r3, [r1]
	TIM13->ARR = ((FCL * 60) / (rpm * ((TIM13->PSC) + 1) * 9600)) - 1;
 80022b6:	4b6d      	ldr	r3, [pc, #436]	; (800246c <homingArm2+0x1dc>)
 80022b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022ba:	3301      	adds	r3, #1
 80022bc:	ee07 3a90 	vmov	s15, r3
 80022c0:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 80022c4:	4b67      	ldr	r3, [pc, #412]	; (8002464 <homingArm2+0x1d4>)
 80022c6:	ed93 7b00 	vldr	d7, [r3]
 80022ca:	ee26 7b07 	vmul.f64	d7, d6, d7
 80022ce:	ed9f 6b60 	vldr	d6, [pc, #384]	; 8002450 <homingArm2+0x1c0>
 80022d2:	ee27 6b06 	vmul.f64	d6, d7, d6
 80022d6:	ed9f 5b60 	vldr	d5, [pc, #384]	; 8002458 <homingArm2+0x1c8>
 80022da:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80022de:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 80022e2:	ee37 7b46 	vsub.f64	d7, d7, d6
 80022e6:	4b61      	ldr	r3, [pc, #388]	; (800246c <homingArm2+0x1dc>)
 80022e8:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80022ec:	ee17 2a90 	vmov	r2, s15
 80022f0:	62da      	str	r2, [r3, #44]	; 0x2c
	TIM13->CCR1 = (TIM13->ARR) / 2;
 80022f2:	4b5e      	ldr	r3, [pc, #376]	; (800246c <homingArm2+0x1dc>)
 80022f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022f6:	4a5d      	ldr	r2, [pc, #372]	; (800246c <homingArm2+0x1dc>)
 80022f8:	085b      	lsrs	r3, r3, #1
 80022fa:	6353      	str	r3, [r2, #52]	; 0x34
	if (!(HAL_GPIO_ReadPin(E_EndStop2_Sup_GPIO_Port, E_EndStop2_Sup_Pin))) {
 80022fc:	2104      	movs	r1, #4
 80022fe:	485c      	ldr	r0, [pc, #368]	; (8002470 <homingArm2+0x1e0>)
 8002300:	f005 fdc0 	bl	8007e84 <HAL_GPIO_ReadPin>
 8002304:	4603      	mov	r3, r0
 8002306:	2b00      	cmp	r3, #0
 8002308:	d114      	bne.n	8002334 <homingArm2+0xa4>
		while(!(HAL_GPIO_ReadPin(E_EndStop2_Sup_GPIO_Port, E_EndStop2_Sup_Pin))){
 800230a:	e00c      	b.n	8002326 <homingArm2+0x96>
			HAL_GPIO_WritePin(S_DirPaP2_GPIO_Port, S_DirPaP2_Pin, GPIO_PIN_SET);
 800230c:	2201      	movs	r2, #1
 800230e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002312:	4858      	ldr	r0, [pc, #352]	; (8002474 <homingArm2+0x1e4>)
 8002314:	f005 fdce 	bl	8007eb4 <HAL_GPIO_WritePin>
			HAL_TIM_PWM_Start(&htim13, TIM_CHANNEL_1);
 8002318:	2100      	movs	r1, #0
 800231a:	4851      	ldr	r0, [pc, #324]	; (8002460 <homingArm2+0x1d0>)
 800231c:	f008 fb52 	bl	800a9c4 <HAL_TIM_PWM_Start>
			HAL_Delay(30);
 8002320:	201e      	movs	r0, #30
 8002322:	f004 fd29 	bl	8006d78 <HAL_Delay>
		while(!(HAL_GPIO_ReadPin(E_EndStop2_Sup_GPIO_Port, E_EndStop2_Sup_Pin))){
 8002326:	2104      	movs	r1, #4
 8002328:	4851      	ldr	r0, [pc, #324]	; (8002470 <homingArm2+0x1e0>)
 800232a:	f005 fdab 	bl	8007e84 <HAL_GPIO_ReadPin>
 800232e:	4603      	mov	r3, r0
 8002330:	2b00      	cmp	r3, #0
 8002332:	d0eb      	beq.n	800230c <homingArm2+0x7c>
		}

	}
	HAL_TIM_PWM_Stop(&htim13, TIM_CHANNEL_1);
 8002334:	2100      	movs	r1, #0
 8002336:	484a      	ldr	r0, [pc, #296]	; (8002460 <homingArm2+0x1d0>)
 8002338:	f008 fc52 	bl	800abe0 <HAL_TIM_PWM_Stop>
	rpm = 0.5;
 800233c:	4949      	ldr	r1, [pc, #292]	; (8002464 <homingArm2+0x1d4>)
 800233e:	f04f 0200 	mov.w	r2, #0
 8002342:	4b49      	ldr	r3, [pc, #292]	; (8002468 <homingArm2+0x1d8>)
 8002344:	e9c1 2300 	strd	r2, r3, [r1]
	TIM13->ARR = ((FCL * 60) / (rpm * ((TIM13->PSC) + 1) * 9600)) - 1;
 8002348:	4b48      	ldr	r3, [pc, #288]	; (800246c <homingArm2+0x1dc>)
 800234a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800234c:	3301      	adds	r3, #1
 800234e:	ee07 3a90 	vmov	s15, r3
 8002352:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 8002356:	4b43      	ldr	r3, [pc, #268]	; (8002464 <homingArm2+0x1d4>)
 8002358:	ed93 7b00 	vldr	d7, [r3]
 800235c:	ee26 7b07 	vmul.f64	d7, d6, d7
 8002360:	ed9f 6b3b 	vldr	d6, [pc, #236]	; 8002450 <homingArm2+0x1c0>
 8002364:	ee27 6b06 	vmul.f64	d6, d7, d6
 8002368:	ed9f 5b3b 	vldr	d5, [pc, #236]	; 8002458 <homingArm2+0x1c8>
 800236c:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8002370:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8002374:	ee37 7b46 	vsub.f64	d7, d7, d6
 8002378:	4b3c      	ldr	r3, [pc, #240]	; (800246c <homingArm2+0x1dc>)
 800237a:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800237e:	ee17 2a90 	vmov	r2, s15
 8002382:	62da      	str	r2, [r3, #44]	; 0x2c
	TIM13->CCR1 = (TIM13->ARR) / 2;
 8002384:	4b39      	ldr	r3, [pc, #228]	; (800246c <homingArm2+0x1dc>)
 8002386:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002388:	4a38      	ldr	r2, [pc, #224]	; (800246c <homingArm2+0x1dc>)
 800238a:	085b      	lsrs	r3, r3, #1
 800238c:	6353      	str	r3, [r2, #52]	; 0x34
	HAL_GPIO_WritePin(S_DirPaP2_GPIO_Port, S_DirPaP2_Pin, GPIO_PIN_RESET);
 800238e:	2200      	movs	r2, #0
 8002390:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002394:	4837      	ldr	r0, [pc, #220]	; (8002474 <homingArm2+0x1e4>)
 8002396:	f005 fd8d 	bl	8007eb4 <HAL_GPIO_WritePin>
	HAL_TIM_PWM_Start(&htim13, TIM_CHANNEL_1);
 800239a:	2100      	movs	r1, #0
 800239c:	4830      	ldr	r0, [pc, #192]	; (8002460 <homingArm2+0x1d0>)
 800239e:	f008 fb11 	bl	800a9c4 <HAL_TIM_PWM_Start>
	homeOk = 0;
 80023a2:	4b35      	ldr	r3, [pc, #212]	; (8002478 <homingArm2+0x1e8>)
 80023a4:	2200      	movs	r2, #0
 80023a6:	701a      	strb	r2, [r3, #0]
	while (homeOk == 0) {
 80023a8:	e049      	b.n	800243e <homingArm2+0x1ae>
		if (!(HAL_GPIO_ReadPin(E_EndStop2_Sup_GPIO_Port, E_EndStop2_Sup_Pin))) {
 80023aa:	2104      	movs	r1, #4
 80023ac:	4830      	ldr	r0, [pc, #192]	; (8002470 <homingArm2+0x1e0>)
 80023ae:	f005 fd69 	bl	8007e84 <HAL_GPIO_ReadPin>
 80023b2:	4603      	mov	r3, r0
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d114      	bne.n	80023e2 <homingArm2+0x152>
			HAL_Delay(30);		//Para filtrar transitorio
 80023b8:	201e      	movs	r0, #30
 80023ba:	f004 fcdd 	bl	8006d78 <HAL_Delay>
			if (!(HAL_GPIO_ReadPin(E_EndStop2_Sup_GPIO_Port,E_EndStop2_Sup_Pin))) {
 80023be:	2104      	movs	r1, #4
 80023c0:	482b      	ldr	r0, [pc, #172]	; (8002470 <homingArm2+0x1e0>)
 80023c2:	f005 fd5f 	bl	8007e84 <HAL_GPIO_ReadPin>
 80023c6:	4603      	mov	r3, r0
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d10a      	bne.n	80023e2 <homingArm2+0x152>
				HAL_GPIO_WritePin(S_DirPaP2_GPIO_Port, S_DirPaP2_Pin, GPIO_PIN_SET);
 80023cc:	2201      	movs	r2, #1
 80023ce:	f44f 7100 	mov.w	r1, #512	; 0x200
 80023d2:	4828      	ldr	r0, [pc, #160]	; (8002474 <homingArm2+0x1e4>)
 80023d4:	f005 fd6e 	bl	8007eb4 <HAL_GPIO_WritePin>
				flagEndStop = 1;
 80023d8:	f04f 0200 	mov.w	r2, #0
 80023dc:	4b27      	ldr	r3, [pc, #156]	; (800247c <homingArm2+0x1ec>)
 80023de:	e9c7 2300 	strd	r2, r3, [r7]
			}
		}
		if (flagEndStop == 1 && HAL_GPIO_ReadPin(E_EndStop2_Sup_GPIO_Port,E_EndStop2_Sup_Pin)) {
 80023e2:	ed97 7b00 	vldr	d7, [r7]
 80023e6:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 80023ea:	eeb4 7b46 	vcmp.f64	d7, d6
 80023ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80023f2:	d124      	bne.n	800243e <homingArm2+0x1ae>
 80023f4:	2104      	movs	r1, #4
 80023f6:	481e      	ldr	r0, [pc, #120]	; (8002470 <homingArm2+0x1e0>)
 80023f8:	f005 fd44 	bl	8007e84 <HAL_GPIO_ReadPin>
 80023fc:	4603      	mov	r3, r0
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d01d      	beq.n	800243e <homingArm2+0x1ae>
			HAL_Delay(30);		//Para filtrar transitorio
 8002402:	201e      	movs	r0, #30
 8002404:	f004 fcb8 	bl	8006d78 <HAL_Delay>
			if (HAL_GPIO_ReadPin(E_EndStop2_Sup_GPIO_Port,E_EndStop2_Sup_Pin)) {
 8002408:	2104      	movs	r1, #4
 800240a:	4819      	ldr	r0, [pc, #100]	; (8002470 <homingArm2+0x1e0>)
 800240c:	f005 fd3a 	bl	8007e84 <HAL_GPIO_ReadPin>
 8002410:	4603      	mov	r3, r0
 8002412:	2b00      	cmp	r3, #0
 8002414:	d013      	beq.n	800243e <homingArm2+0x1ae>
				HAL_TIM_PWM_Stop(&htim13, TIM_CHANNEL_1);
 8002416:	2100      	movs	r1, #0
 8002418:	4811      	ldr	r0, [pc, #68]	; (8002460 <homingArm2+0x1d0>)
 800241a:	f008 fbe1 	bl	800abe0 <HAL_TIM_PWM_Stop>
				HAL_UART_Transmit(&huart3,(uint8_t *)"FinArm2\n\r", 9, 100);
 800241e:	2364      	movs	r3, #100	; 0x64
 8002420:	2209      	movs	r2, #9
 8002422:	4917      	ldr	r1, [pc, #92]	; (8002480 <homingArm2+0x1f0>)
 8002424:	4817      	ldr	r0, [pc, #92]	; (8002484 <homingArm2+0x1f4>)
 8002426:	f00a f921 	bl	800c66c <HAL_UART_Transmit>
				titha2 = 0;
 800242a:	4917      	ldr	r1, [pc, #92]	; (8002488 <homingArm2+0x1f8>)
 800242c:	f04f 0200 	mov.w	r2, #0
 8002430:	f04f 0300 	mov.w	r3, #0
 8002434:	e9c1 2300 	strd	r2, r3, [r1]
				homeOk = 1;
 8002438:	4b0f      	ldr	r3, [pc, #60]	; (8002478 <homingArm2+0x1e8>)
 800243a:	2201      	movs	r2, #1
 800243c:	701a      	strb	r2, [r3, #0]
	while (homeOk == 0) {
 800243e:	4b0e      	ldr	r3, [pc, #56]	; (8002478 <homingArm2+0x1e8>)
 8002440:	781b      	ldrb	r3, [r3, #0]
 8002442:	2b00      	cmp	r3, #0
 8002444:	d0b1      	beq.n	80023aa <homingArm2+0x11a>
			}
		}
	}
}
 8002446:	bf00      	nop
 8002448:	bf00      	nop
 800244a:	3708      	adds	r7, #8
 800244c:	46bd      	mov	sp, r7
 800244e:	bd80      	pop	{r7, pc}
 8002450:	00000000 	.word	0x00000000
 8002454:	40c2c000 	.word	0x40c2c000
 8002458:	00000000 	.word	0x00000000
 800245c:	c1bb1e40 	.word	0xc1bb1e40
 8002460:	24000708 	.word	0x24000708
 8002464:	24000388 	.word	0x24000388
 8002468:	3fe00000 	.word	0x3fe00000
 800246c:	40001c00 	.word	0x40001c00
 8002470:	58021000 	.word	0x58021000
 8002474:	58020800 	.word	0x58020800
 8002478:	24000380 	.word	0x24000380
 800247c:	3ff00000 	.word	0x3ff00000
 8002480:	080122d4 	.word	0x080122d4
 8002484:	24000ca8 	.word	0x24000ca8
 8002488:	240003c0 	.word	0x240003c0
 800248c:	00000000 	.word	0x00000000

08002490 <homingArm3>:

void homingArm3(void) {
 8002490:	b580      	push	{r7, lr}
 8002492:	b082      	sub	sp, #8
 8002494:	af00      	add	r7, sp, #0
	double flagEndStop = 0;
 8002496:	f04f 0200 	mov.w	r2, #0
 800249a:	f04f 0300 	mov.w	r3, #0
 800249e:	e9c7 2300 	strd	r2, r3, [r7]
	HAL_TIM_PWM_Stop(&htim14, TIM_CHANNEL_1);
 80024a2:	2100      	movs	r1, #0
 80024a4:	485e      	ldr	r0, [pc, #376]	; (8002620 <homingArm3+0x190>)
 80024a6:	f008 fb9b 	bl	800abe0 <HAL_TIM_PWM_Stop>
	rpm = 0.5;
 80024aa:	495e      	ldr	r1, [pc, #376]	; (8002624 <homingArm3+0x194>)
 80024ac:	f04f 0200 	mov.w	r2, #0
 80024b0:	4b5d      	ldr	r3, [pc, #372]	; (8002628 <homingArm3+0x198>)
 80024b2:	e9c1 2300 	strd	r2, r3, [r1]
	TIM14->ARR = ((FCL * 60) / (rpm * ((TIM14->PSC) + 1) * 9600)) - 1;
 80024b6:	4b5d      	ldr	r3, [pc, #372]	; (800262c <homingArm3+0x19c>)
 80024b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024ba:	3301      	adds	r3, #1
 80024bc:	ee07 3a90 	vmov	s15, r3
 80024c0:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 80024c4:	4b57      	ldr	r3, [pc, #348]	; (8002624 <homingArm3+0x194>)
 80024c6:	ed93 7b00 	vldr	d7, [r3]
 80024ca:	ee26 7b07 	vmul.f64	d7, d6, d7
 80024ce:	ed9f 6b50 	vldr	d6, [pc, #320]	; 8002610 <homingArm3+0x180>
 80024d2:	ee27 6b06 	vmul.f64	d6, d7, d6
 80024d6:	ed9f 5b50 	vldr	d5, [pc, #320]	; 8002618 <homingArm3+0x188>
 80024da:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80024de:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 80024e2:	ee37 7b46 	vsub.f64	d7, d7, d6
 80024e6:	4b51      	ldr	r3, [pc, #324]	; (800262c <homingArm3+0x19c>)
 80024e8:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80024ec:	ee17 2a90 	vmov	r2, s15
 80024f0:	62da      	str	r2, [r3, #44]	; 0x2c
	TIM14->CCR1 = (TIM14->ARR) / 2;
 80024f2:	4b4e      	ldr	r3, [pc, #312]	; (800262c <homingArm3+0x19c>)
 80024f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024f6:	4a4d      	ldr	r2, [pc, #308]	; (800262c <homingArm3+0x19c>)
 80024f8:	085b      	lsrs	r3, r3, #1
 80024fa:	6353      	str	r3, [r2, #52]	; 0x34
	if (!(HAL_GPIO_ReadPin(E_EndStop3_Sup_GPIO_Port, E_EndStop3_Sup_Pin))) {
 80024fc:	2110      	movs	r1, #16
 80024fe:	484c      	ldr	r0, [pc, #304]	; (8002630 <homingArm3+0x1a0>)
 8002500:	f005 fcc0 	bl	8007e84 <HAL_GPIO_ReadPin>
 8002504:	4603      	mov	r3, r0
 8002506:	2b00      	cmp	r3, #0
 8002508:	d114      	bne.n	8002534 <homingArm3+0xa4>
		while(!(HAL_GPIO_ReadPin(E_EndStop3_Sup_GPIO_Port, E_EndStop3_Sup_Pin))){
 800250a:	e00c      	b.n	8002526 <homingArm3+0x96>
			HAL_GPIO_WritePin(S_DirPaP3_GPIO_Port, S_DirPaP3_Pin, GPIO_PIN_SET);
 800250c:	2201      	movs	r2, #1
 800250e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002512:	4848      	ldr	r0, [pc, #288]	; (8002634 <homingArm3+0x1a4>)
 8002514:	f005 fcce 	bl	8007eb4 <HAL_GPIO_WritePin>
			HAL_TIM_PWM_Start(&htim14, TIM_CHANNEL_1);
 8002518:	2100      	movs	r1, #0
 800251a:	4841      	ldr	r0, [pc, #260]	; (8002620 <homingArm3+0x190>)
 800251c:	f008 fa52 	bl	800a9c4 <HAL_TIM_PWM_Start>
			HAL_Delay(30);
 8002520:	201e      	movs	r0, #30
 8002522:	f004 fc29 	bl	8006d78 <HAL_Delay>
		while(!(HAL_GPIO_ReadPin(E_EndStop3_Sup_GPIO_Port, E_EndStop3_Sup_Pin))){
 8002526:	2110      	movs	r1, #16
 8002528:	4841      	ldr	r0, [pc, #260]	; (8002630 <homingArm3+0x1a0>)
 800252a:	f005 fcab 	bl	8007e84 <HAL_GPIO_ReadPin>
 800252e:	4603      	mov	r3, r0
 8002530:	2b00      	cmp	r3, #0
 8002532:	d0eb      	beq.n	800250c <homingArm3+0x7c>
		}
	}
	HAL_GPIO_WritePin(S_DirPaP3_GPIO_Port, S_DirPaP3_Pin, GPIO_PIN_RESET);
 8002534:	2200      	movs	r2, #0
 8002536:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800253a:	483e      	ldr	r0, [pc, #248]	; (8002634 <homingArm3+0x1a4>)
 800253c:	f005 fcba 	bl	8007eb4 <HAL_GPIO_WritePin>
	HAL_TIM_PWM_Start(&htim14, TIM_CHANNEL_1);
 8002540:	2100      	movs	r1, #0
 8002542:	4837      	ldr	r0, [pc, #220]	; (8002620 <homingArm3+0x190>)
 8002544:	f008 fa3e 	bl	800a9c4 <HAL_TIM_PWM_Start>
	homeOk = 0;
 8002548:	4b3b      	ldr	r3, [pc, #236]	; (8002638 <homingArm3+0x1a8>)
 800254a:	2200      	movs	r2, #0
 800254c:	701a      	strb	r2, [r3, #0]
	while (homeOk == 0) {
 800254e:	e049      	b.n	80025e4 <homingArm3+0x154>
		if (!(HAL_GPIO_ReadPin(E_EndStop3_Sup_GPIO_Port, E_EndStop3_Sup_Pin))) {
 8002550:	2110      	movs	r1, #16
 8002552:	4837      	ldr	r0, [pc, #220]	; (8002630 <homingArm3+0x1a0>)
 8002554:	f005 fc96 	bl	8007e84 <HAL_GPIO_ReadPin>
 8002558:	4603      	mov	r3, r0
 800255a:	2b00      	cmp	r3, #0
 800255c:	d114      	bne.n	8002588 <homingArm3+0xf8>
			HAL_Delay(30);		//Para filtrar transitorio
 800255e:	201e      	movs	r0, #30
 8002560:	f004 fc0a 	bl	8006d78 <HAL_Delay>
			if (!(HAL_GPIO_ReadPin(E_EndStop3_Sup_GPIO_Port, E_EndStop3_Sup_Pin))) {
 8002564:	2110      	movs	r1, #16
 8002566:	4832      	ldr	r0, [pc, #200]	; (8002630 <homingArm3+0x1a0>)
 8002568:	f005 fc8c 	bl	8007e84 <HAL_GPIO_ReadPin>
 800256c:	4603      	mov	r3, r0
 800256e:	2b00      	cmp	r3, #0
 8002570:	d10a      	bne.n	8002588 <homingArm3+0xf8>
				HAL_GPIO_WritePin(S_DirPaP3_GPIO_Port, S_DirPaP3_Pin, GPIO_PIN_SET);
 8002572:	2201      	movs	r2, #1
 8002574:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002578:	482e      	ldr	r0, [pc, #184]	; (8002634 <homingArm3+0x1a4>)
 800257a:	f005 fc9b 	bl	8007eb4 <HAL_GPIO_WritePin>
				flagEndStop = 1;
 800257e:	f04f 0200 	mov.w	r2, #0
 8002582:	4b2e      	ldr	r3, [pc, #184]	; (800263c <homingArm3+0x1ac>)
 8002584:	e9c7 2300 	strd	r2, r3, [r7]
			}
		}
		if (flagEndStop == 1 && HAL_GPIO_ReadPin(E_EndStop3_Sup_GPIO_Port, E_EndStop3_Sup_Pin)) {
 8002588:	ed97 7b00 	vldr	d7, [r7]
 800258c:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8002590:	eeb4 7b46 	vcmp.f64	d7, d6
 8002594:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002598:	d124      	bne.n	80025e4 <homingArm3+0x154>
 800259a:	2110      	movs	r1, #16
 800259c:	4824      	ldr	r0, [pc, #144]	; (8002630 <homingArm3+0x1a0>)
 800259e:	f005 fc71 	bl	8007e84 <HAL_GPIO_ReadPin>
 80025a2:	4603      	mov	r3, r0
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d01d      	beq.n	80025e4 <homingArm3+0x154>
			HAL_Delay(30);		//Para filtrar transitorio
 80025a8:	201e      	movs	r0, #30
 80025aa:	f004 fbe5 	bl	8006d78 <HAL_Delay>
			if (HAL_GPIO_ReadPin(E_EndStop3_Sup_GPIO_Port, E_EndStop3_Sup_Pin)) {
 80025ae:	2110      	movs	r1, #16
 80025b0:	481f      	ldr	r0, [pc, #124]	; (8002630 <homingArm3+0x1a0>)
 80025b2:	f005 fc67 	bl	8007e84 <HAL_GPIO_ReadPin>
 80025b6:	4603      	mov	r3, r0
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d013      	beq.n	80025e4 <homingArm3+0x154>
				HAL_TIM_PWM_Stop(&htim14, TIM_CHANNEL_1);
 80025bc:	2100      	movs	r1, #0
 80025be:	4818      	ldr	r0, [pc, #96]	; (8002620 <homingArm3+0x190>)
 80025c0:	f008 fb0e 	bl	800abe0 <HAL_TIM_PWM_Stop>
				HAL_UART_Transmit(&huart3,(uint8_t *)"FinArm3\n\r", 9, 100);
 80025c4:	2364      	movs	r3, #100	; 0x64
 80025c6:	2209      	movs	r2, #9
 80025c8:	491d      	ldr	r1, [pc, #116]	; (8002640 <homingArm3+0x1b0>)
 80025ca:	481e      	ldr	r0, [pc, #120]	; (8002644 <homingArm3+0x1b4>)
 80025cc:	f00a f84e 	bl	800c66c <HAL_UART_Transmit>
				titha3 = 0;
 80025d0:	491d      	ldr	r1, [pc, #116]	; (8002648 <homingArm3+0x1b8>)
 80025d2:	f04f 0200 	mov.w	r2, #0
 80025d6:	f04f 0300 	mov.w	r3, #0
 80025da:	e9c1 2300 	strd	r2, r3, [r1]
				homeOk = 1;
 80025de:	4b16      	ldr	r3, [pc, #88]	; (8002638 <homingArm3+0x1a8>)
 80025e0:	2201      	movs	r2, #1
 80025e2:	701a      	strb	r2, [r3, #0]
	while (homeOk == 0) {
 80025e4:	4b14      	ldr	r3, [pc, #80]	; (8002638 <homingArm3+0x1a8>)
 80025e6:	781b      	ldrb	r3, [r3, #0]
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d0b1      	beq.n	8002550 <homingArm3+0xc0>
			}
		}
	}
	HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1);	//Enciendo interrupcion input capture motor 1
 80025ec:	2100      	movs	r1, #0
 80025ee:	4817      	ldr	r0, [pc, #92]	; (800264c <homingArm3+0x1bc>)
 80025f0:	f008 fbee 	bl	800add0 <HAL_TIM_IC_Start_IT>
	HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_1);	//Enciendo interrupcion input capture motor 2
 80025f4:	2100      	movs	r1, #0
 80025f6:	4816      	ldr	r0, [pc, #88]	; (8002650 <homingArm3+0x1c0>)
 80025f8:	f008 fbea 	bl	800add0 <HAL_TIM_IC_Start_IT>
	HAL_TIM_IC_Start_IT(&htim4, TIM_CHANNEL_1);	//Enciendo interrupcion input capture motor 3
 80025fc:	2100      	movs	r1, #0
 80025fe:	4815      	ldr	r0, [pc, #84]	; (8002654 <homingArm3+0x1c4>)
 8002600:	f008 fbe6 	bl	800add0 <HAL_TIM_IC_Start_IT>
	HAL_NVIC_EnableIRQ(EXTI1_IRQn);	//Apago interrupcion EndStop 1 Inferior
	HAL_NVIC_EnableIRQ(EXTI2_IRQn);	//Apago interrupcion EndStop 2 Superior
	HAL_NVIC_EnableIRQ(EXTI3_IRQn);	//Apago interrupcion EndStop 2 Inferior
	HAL_NVIC_EnableIRQ(EXTI4_IRQn);	//Apago interrupcion EndStop 3 Superior
	HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);	//Apago interrupcion EndStop 3 Inferior*/
}
 8002604:	bf00      	nop
 8002606:	3708      	adds	r7, #8
 8002608:	46bd      	mov	sp, r7
 800260a:	bd80      	pop	{r7, pc}
 800260c:	f3af 8000 	nop.w
 8002610:	00000000 	.word	0x00000000
 8002614:	40c2c000 	.word	0x40c2c000
 8002618:	00000000 	.word	0x00000000
 800261c:	c1bb1e40 	.word	0xc1bb1e40
 8002620:	24000754 	.word	0x24000754
 8002624:	24000388 	.word	0x24000388
 8002628:	3fe00000 	.word	0x3fe00000
 800262c:	40002000 	.word	0x40002000
 8002630:	58021000 	.word	0x58021000
 8002634:	58020800 	.word	0x58020800
 8002638:	24000380 	.word	0x24000380
 800263c:	3ff00000 	.word	0x3ff00000
 8002640:	080122e0 	.word	0x080122e0
 8002644:	24000ca8 	.word	0x24000ca8
 8002648:	240003c8 	.word	0x240003c8
 800264c:	2400058c 	.word	0x2400058c
 8002650:	240005d8 	.word	0x240005d8
 8002654:	24000624 	.word	0x24000624

08002658 <interpretaComando>:


float auxM;
uint8_t auxString[10];

void interpretaComando(void){
 8002658:	b580      	push	{r7, lr}
 800265a:	b084      	sub	sp, #16
 800265c:	af00      	add	r7, sp, #0

	switch(rx_buffer[0]){
 800265e:	4bb5      	ldr	r3, [pc, #724]	; (8002934 <interpretaComando+0x2dc>)
 8002660:	781b      	ldrb	r3, [r3, #0]
 8002662:	3b48      	subs	r3, #72	; 0x48
 8002664:	2b2a      	cmp	r3, #42	; 0x2a
 8002666:	f200 8226 	bhi.w	8002ab6 <interpretaComando+0x45e>
 800266a:	a201      	add	r2, pc, #4	; (adr r2, 8002670 <interpretaComando+0x18>)
 800266c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002670:	08002a4b 	.word	0x08002a4b
 8002674:	08002ab7 	.word	0x08002ab7
 8002678:	08002ab7 	.word	0x08002ab7
 800267c:	08002ab7 	.word	0x08002ab7
 8002680:	08002ab7 	.word	0x08002ab7
 8002684:	0800271d 	.word	0x0800271d
 8002688:	08002ab7 	.word	0x08002ab7
 800268c:	08002ab7 	.word	0x08002ab7
 8002690:	0800284b 	.word	0x0800284b
 8002694:	08002ab7 	.word	0x08002ab7
 8002698:	08002aa9 	.word	0x08002aa9
 800269c:	08002ab7 	.word	0x08002ab7
 80026a0:	08002ab7 	.word	0x08002ab7
 80026a4:	08002ab7 	.word	0x08002ab7
 80026a8:	08002ab7 	.word	0x08002ab7
 80026ac:	08002ab7 	.word	0x08002ab7
 80026b0:	08002ab7 	.word	0x08002ab7
 80026b4:	08002ab7 	.word	0x08002ab7
 80026b8:	08002ab7 	.word	0x08002ab7
 80026bc:	08002ab7 	.word	0x08002ab7
 80026c0:	08002ab7 	.word	0x08002ab7
 80026c4:	08002ab7 	.word	0x08002ab7
 80026c8:	08002ab7 	.word	0x08002ab7
 80026cc:	08002ab7 	.word	0x08002ab7
 80026d0:	08002ab7 	.word	0x08002ab7
 80026d4:	08002ab7 	.word	0x08002ab7
 80026d8:	08002ab7 	.word	0x08002ab7
 80026dc:	08002ab7 	.word	0x08002ab7
 80026e0:	08002ab7 	.word	0x08002ab7
 80026e4:	08002ab7 	.word	0x08002ab7
 80026e8:	08002ab7 	.word	0x08002ab7
 80026ec:	08002ab7 	.word	0x08002ab7
 80026f0:	08002a4b 	.word	0x08002a4b
 80026f4:	08002ab7 	.word	0x08002ab7
 80026f8:	08002ab7 	.word	0x08002ab7
 80026fc:	08002ab7 	.word	0x08002ab7
 8002700:	08002ab7 	.word	0x08002ab7
 8002704:	0800271d 	.word	0x0800271d
 8002708:	08002ab7 	.word	0x08002ab7
 800270c:	08002ab7 	.word	0x08002ab7
 8002710:	0800284b 	.word	0x0800284b
 8002714:	08002ab7 	.word	0x08002ab7
 8002718:	08002aa9 	.word	0x08002aa9
	case 'M':						//:M(motor) + numero de motor (1. 2. 3) + Angulo de 0 a 90
	case 'm':
		switch(rx_buffer[1]){
 800271c:	4b85      	ldr	r3, [pc, #532]	; (8002934 <interpretaComando+0x2dc>)
 800271e:	785b      	ldrb	r3, [r3, #1]
 8002720:	2b33      	cmp	r3, #51	; 0x33
 8002722:	d062      	beq.n	80027ea <interpretaComando+0x192>
 8002724:	2b33      	cmp	r3, #51	; 0x33
 8002726:	f300 8088 	bgt.w	800283a <interpretaComando+0x1e2>
 800272a:	2b31      	cmp	r3, #49	; 0x31
 800272c:	d002      	beq.n	8002734 <interpretaComando+0xdc>
 800272e:	2b32      	cmp	r3, #50	; 0x32
 8002730:	d033      	beq.n	800279a <interpretaComando+0x142>
 8002732:	e082      	b.n	800283a <interpretaComando+0x1e2>
		case '1':
			HAL_UART_Transmit(&huart3,(uint8_t *)"Motor1\n\r", 8, 100);
 8002734:	2364      	movs	r3, #100	; 0x64
 8002736:	2208      	movs	r2, #8
 8002738:	497f      	ldr	r1, [pc, #508]	; (8002938 <interpretaComando+0x2e0>)
 800273a:	4880      	ldr	r0, [pc, #512]	; (800293c <interpretaComando+0x2e4>)
 800273c:	f009 ff96 	bl	800c66c <HAL_UART_Transmit>
			auxM =  strtod(&rx_buffer[2], NULL);
 8002740:	2100      	movs	r1, #0
 8002742:	487f      	ldr	r0, [pc, #508]	; (8002940 <interpretaComando+0x2e8>)
 8002744:	f00d f8b2 	bl	800f8ac <strtod>
 8002748:	eeb0 7b40 	vmov.f64	d7, d0
 800274c:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002750:	4b7c      	ldr	r3, [pc, #496]	; (8002944 <interpretaComando+0x2ec>)
 8002752:	edc3 7a00 	vstr	s15, [r3]
			if(auxM>=0 && auxM<=90){  // verificacion de limites articulares
 8002756:	4b7b      	ldr	r3, [pc, #492]	; (8002944 <interpretaComando+0x2ec>)
 8002758:	edd3 7a00 	vldr	s15, [r3]
 800275c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002760:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002764:	db12      	blt.n	800278c <interpretaComando+0x134>
 8002766:	4b77      	ldr	r3, [pc, #476]	; (8002944 <interpretaComando+0x2ec>)
 8002768:	edd3 7a00 	vldr	s15, [r3]
 800276c:	ed9f 7a76 	vldr	s14, [pc, #472]	; 8002948 <interpretaComando+0x2f0>
 8002770:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002774:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002778:	d808      	bhi.n	800278c <interpretaComando+0x134>
				titha1 = auxM;
 800277a:	4b72      	ldr	r3, [pc, #456]	; (8002944 <interpretaComando+0x2ec>)
 800277c:	edd3 7a00 	vldr	s15, [r3]
 8002780:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002784:	4b71      	ldr	r3, [pc, #452]	; (800294c <interpretaComando+0x2f4>)
 8002786:	ed83 7b00 	vstr	d7, [r3]
			}
			else{
				HAL_UART_Transmit(&huart3,(uint8_t *)"ErrorPos\n\r", 10, 100);
			}
			break;
 800278a:	e05d      	b.n	8002848 <interpretaComando+0x1f0>
				HAL_UART_Transmit(&huart3,(uint8_t *)"ErrorPos\n\r", 10, 100);
 800278c:	2364      	movs	r3, #100	; 0x64
 800278e:	220a      	movs	r2, #10
 8002790:	496f      	ldr	r1, [pc, #444]	; (8002950 <interpretaComando+0x2f8>)
 8002792:	486a      	ldr	r0, [pc, #424]	; (800293c <interpretaComando+0x2e4>)
 8002794:	f009 ff6a 	bl	800c66c <HAL_UART_Transmit>
			break;
 8002798:	e056      	b.n	8002848 <interpretaComando+0x1f0>
		case '2':
			HAL_UART_Transmit(&huart3,(uint8_t *)"Motor2\n\r", 8, 100);
 800279a:	2364      	movs	r3, #100	; 0x64
 800279c:	2208      	movs	r2, #8
 800279e:	496d      	ldr	r1, [pc, #436]	; (8002954 <interpretaComando+0x2fc>)
 80027a0:	4866      	ldr	r0, [pc, #408]	; (800293c <interpretaComando+0x2e4>)
 80027a2:	f009 ff63 	bl	800c66c <HAL_UART_Transmit>
			if(auxM>=0 && auxM<=90){  // verificacion de limites articulares
 80027a6:	4b67      	ldr	r3, [pc, #412]	; (8002944 <interpretaComando+0x2ec>)
 80027a8:	edd3 7a00 	vldr	s15, [r3]
 80027ac:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80027b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80027b4:	db12      	blt.n	80027dc <interpretaComando+0x184>
 80027b6:	4b63      	ldr	r3, [pc, #396]	; (8002944 <interpretaComando+0x2ec>)
 80027b8:	edd3 7a00 	vldr	s15, [r3]
 80027bc:	ed9f 7a62 	vldr	s14, [pc, #392]	; 8002948 <interpretaComando+0x2f0>
 80027c0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80027c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80027c8:	d808      	bhi.n	80027dc <interpretaComando+0x184>
				titha2 = auxM;
 80027ca:	4b5e      	ldr	r3, [pc, #376]	; (8002944 <interpretaComando+0x2ec>)
 80027cc:	edd3 7a00 	vldr	s15, [r3]
 80027d0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80027d4:	4b60      	ldr	r3, [pc, #384]	; (8002958 <interpretaComando+0x300>)
 80027d6:	ed83 7b00 	vstr	d7, [r3]
			}
			else{
				HAL_UART_Transmit(&huart3,(uint8_t *)"ErrorPos\n\r", 10, 100);
			}
			break;
 80027da:	e035      	b.n	8002848 <interpretaComando+0x1f0>
				HAL_UART_Transmit(&huart3,(uint8_t *)"ErrorPos\n\r", 10, 100);
 80027dc:	2364      	movs	r3, #100	; 0x64
 80027de:	220a      	movs	r2, #10
 80027e0:	495b      	ldr	r1, [pc, #364]	; (8002950 <interpretaComando+0x2f8>)
 80027e2:	4856      	ldr	r0, [pc, #344]	; (800293c <interpretaComando+0x2e4>)
 80027e4:	f009 ff42 	bl	800c66c <HAL_UART_Transmit>
			break;
 80027e8:	e02e      	b.n	8002848 <interpretaComando+0x1f0>
		case '3':
			HAL_UART_Transmit(&huart3,(uint8_t *)"Motor3\n\r", 8, 100);
 80027ea:	2364      	movs	r3, #100	; 0x64
 80027ec:	2208      	movs	r2, #8
 80027ee:	495b      	ldr	r1, [pc, #364]	; (800295c <interpretaComando+0x304>)
 80027f0:	4852      	ldr	r0, [pc, #328]	; (800293c <interpretaComando+0x2e4>)
 80027f2:	f009 ff3b 	bl	800c66c <HAL_UART_Transmit>
			if(auxM>=0 && auxM<=90){   // verificacion de limites articulares
 80027f6:	4b53      	ldr	r3, [pc, #332]	; (8002944 <interpretaComando+0x2ec>)
 80027f8:	edd3 7a00 	vldr	s15, [r3]
 80027fc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002800:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002804:	db12      	blt.n	800282c <interpretaComando+0x1d4>
 8002806:	4b4f      	ldr	r3, [pc, #316]	; (8002944 <interpretaComando+0x2ec>)
 8002808:	edd3 7a00 	vldr	s15, [r3]
 800280c:	ed9f 7a4e 	vldr	s14, [pc, #312]	; 8002948 <interpretaComando+0x2f0>
 8002810:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002814:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002818:	d808      	bhi.n	800282c <interpretaComando+0x1d4>
				titha3 = auxM;
 800281a:	4b4a      	ldr	r3, [pc, #296]	; (8002944 <interpretaComando+0x2ec>)
 800281c:	edd3 7a00 	vldr	s15, [r3]
 8002820:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002824:	4b4e      	ldr	r3, [pc, #312]	; (8002960 <interpretaComando+0x308>)
 8002826:	ed83 7b00 	vstr	d7, [r3]
			}
			else{
				HAL_UART_Transmit(&huart3,(uint8_t *)"ErrorPos\n\r", 10, 100);
			}
			break;
 800282a:	e00d      	b.n	8002848 <interpretaComando+0x1f0>
				HAL_UART_Transmit(&huart3,(uint8_t *)"ErrorPos\n\r", 10, 100);
 800282c:	2364      	movs	r3, #100	; 0x64
 800282e:	220a      	movs	r2, #10
 8002830:	4947      	ldr	r1, [pc, #284]	; (8002950 <interpretaComando+0x2f8>)
 8002832:	4842      	ldr	r0, [pc, #264]	; (800293c <interpretaComando+0x2e4>)
 8002834:	f009 ff1a 	bl	800c66c <HAL_UART_Transmit>
			break;
 8002838:	e006      	b.n	8002848 <interpretaComando+0x1f0>
		default:
			HAL_UART_Transmit(&huart3,(uint8_t *)"ErrorMotor\n\r", 12, 100);
 800283a:	2364      	movs	r3, #100	; 0x64
 800283c:	220c      	movs	r2, #12
 800283e:	4949      	ldr	r1, [pc, #292]	; (8002964 <interpretaComando+0x30c>)
 8002840:	483e      	ldr	r0, [pc, #248]	; (800293c <interpretaComando+0x2e4>)
 8002842:	f009 ff13 	bl	800c66c <HAL_UART_Transmit>
			break;
 8002846:	bf00      	nop
		}
		break;
 8002848:	e13c      	b.n	8002ac4 <interpretaComando+0x46c>
	case 'P':												//:Px0.1 y0.1 z-0.5 \0 (Eje, valor, espacio, Eje, valor, espacio, Eje, valor, espacio)
	case 'p':
		HAL_UART_Transmit(&huart3,(uint8_t *)"Punto\n\r", 7, 100);
 800284a:	2364      	movs	r3, #100	; 0x64
 800284c:	2207      	movs	r2, #7
 800284e:	4946      	ldr	r1, [pc, #280]	; (8002968 <interpretaComando+0x310>)
 8002850:	483a      	ldr	r0, [pc, #232]	; (800293c <interpretaComando+0x2e4>)
 8002852:	f009 ff0b 	bl	800c66c <HAL_UART_Transmit>
		flagErrorEndStop = 0;
 8002856:	4945      	ldr	r1, [pc, #276]	; (800296c <interpretaComando+0x314>)
 8002858:	f04f 0200 	mov.w	r2, #0
 800285c:	f04f 0300 	mov.w	r3, #0
 8002860:	e9c1 2300 	strd	r2, r3, [r1]
		uint8_t i = 1;
 8002864:	2301      	movs	r3, #1
 8002866:	73fb      	strb	r3, [r7, #15]
		uint8_t j = 0;
 8002868:	2300      	movs	r3, #0
 800286a:	73bb      	strb	r3, [r7, #14]
		while(rx_buffer[i] != 0){
 800286c:	e0d7      	b.n	8002a1e <interpretaComando+0x3c6>
			if(rx_buffer[i] == 'x'){
 800286e:	7bfb      	ldrb	r3, [r7, #15]
 8002870:	4a30      	ldr	r2, [pc, #192]	; (8002934 <interpretaComando+0x2dc>)
 8002872:	5cd3      	ldrb	r3, [r2, r3]
 8002874:	2b78      	cmp	r3, #120	; 0x78
 8002876:	d135      	bne.n	80028e4 <interpretaComando+0x28c>
				while(rx_buffer[i+1] != ' '){			//Almacenar dato en buffer hasta que se encuentre un espacio
 8002878:	e00c      	b.n	8002894 <interpretaComando+0x23c>
					auxString[j] = rx_buffer[i+1];
 800287a:	7bfb      	ldrb	r3, [r7, #15]
 800287c:	1c5a      	adds	r2, r3, #1
 800287e:	7bbb      	ldrb	r3, [r7, #14]
 8002880:	492c      	ldr	r1, [pc, #176]	; (8002934 <interpretaComando+0x2dc>)
 8002882:	5c89      	ldrb	r1, [r1, r2]
 8002884:	4a3a      	ldr	r2, [pc, #232]	; (8002970 <interpretaComando+0x318>)
 8002886:	54d1      	strb	r1, [r2, r3]
					j++;
 8002888:	7bbb      	ldrb	r3, [r7, #14]
 800288a:	3301      	adds	r3, #1
 800288c:	73bb      	strb	r3, [r7, #14]
					i++;
 800288e:	7bfb      	ldrb	r3, [r7, #15]
 8002890:	3301      	adds	r3, #1
 8002892:	73fb      	strb	r3, [r7, #15]
				while(rx_buffer[i+1] != ' '){			//Almacenar dato en buffer hasta que se encuentre un espacio
 8002894:	7bfb      	ldrb	r3, [r7, #15]
 8002896:	3301      	adds	r3, #1
 8002898:	4a26      	ldr	r2, [pc, #152]	; (8002934 <interpretaComando+0x2dc>)
 800289a:	5cd3      	ldrb	r3, [r2, r3]
 800289c:	2b20      	cmp	r3, #32
 800289e:	d1ec      	bne.n	800287a <interpretaComando+0x222>
				}
				Pfin.x = strtod(&auxString[0], NULL);
 80028a0:	2100      	movs	r1, #0
 80028a2:	4833      	ldr	r0, [pc, #204]	; (8002970 <interpretaComando+0x318>)
 80028a4:	f00d f802 	bl	800f8ac <strtod>
 80028a8:	eeb0 7b40 	vmov.f64	d7, d0
 80028ac:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80028b0:	4b30      	ldr	r3, [pc, #192]	; (8002974 <interpretaComando+0x31c>)
 80028b2:	edc3 7a00 	vstr	s15, [r3]
				for (int k = 0; k <= 10; k++) {
 80028b6:	2300      	movs	r3, #0
 80028b8:	60bb      	str	r3, [r7, #8]
 80028ba:	e007      	b.n	80028cc <interpretaComando+0x274>
					auxString[k] = 0;
 80028bc:	4a2c      	ldr	r2, [pc, #176]	; (8002970 <interpretaComando+0x318>)
 80028be:	68bb      	ldr	r3, [r7, #8]
 80028c0:	4413      	add	r3, r2
 80028c2:	2200      	movs	r2, #0
 80028c4:	701a      	strb	r2, [r3, #0]
				for (int k = 0; k <= 10; k++) {
 80028c6:	68bb      	ldr	r3, [r7, #8]
 80028c8:	3301      	adds	r3, #1
 80028ca:	60bb      	str	r3, [r7, #8]
 80028cc:	68bb      	ldr	r3, [r7, #8]
 80028ce:	2b0a      	cmp	r3, #10
 80028d0:	ddf4      	ble.n	80028bc <interpretaComando+0x264>
				}
				j=0;
 80028d2:	2300      	movs	r3, #0
 80028d4:	73bb      	strb	r3, [r7, #14]
				HAL_UART_Transmit(&huart3, (uint8_t *)"PuntoX_ok\n\r", 11, 100);
 80028d6:	2364      	movs	r3, #100	; 0x64
 80028d8:	220b      	movs	r2, #11
 80028da:	4927      	ldr	r1, [pc, #156]	; (8002978 <interpretaComando+0x320>)
 80028dc:	4817      	ldr	r0, [pc, #92]	; (800293c <interpretaComando+0x2e4>)
 80028de:	f009 fec5 	bl	800c66c <HAL_UART_Transmit>
 80028e2:	e099      	b.n	8002a18 <interpretaComando+0x3c0>
			}
			else if(rx_buffer[i] == 'y'){
 80028e4:	7bfb      	ldrb	r3, [r7, #15]
 80028e6:	4a13      	ldr	r2, [pc, #76]	; (8002934 <interpretaComando+0x2dc>)
 80028e8:	5cd3      	ldrb	r3, [r2, r3]
 80028ea:	2b79      	cmp	r3, #121	; 0x79
 80028ec:	d15a      	bne.n	80029a4 <interpretaComando+0x34c>
				while(rx_buffer[i+1] != ' '){			//Almacenar dato en buffer hasta que se encuentre un espacio
 80028ee:	e00c      	b.n	800290a <interpretaComando+0x2b2>
					auxString[j] = rx_buffer[i+1];
 80028f0:	7bfb      	ldrb	r3, [r7, #15]
 80028f2:	1c5a      	adds	r2, r3, #1
 80028f4:	7bbb      	ldrb	r3, [r7, #14]
 80028f6:	490f      	ldr	r1, [pc, #60]	; (8002934 <interpretaComando+0x2dc>)
 80028f8:	5c89      	ldrb	r1, [r1, r2]
 80028fa:	4a1d      	ldr	r2, [pc, #116]	; (8002970 <interpretaComando+0x318>)
 80028fc:	54d1      	strb	r1, [r2, r3]
					j++;
 80028fe:	7bbb      	ldrb	r3, [r7, #14]
 8002900:	3301      	adds	r3, #1
 8002902:	73bb      	strb	r3, [r7, #14]
					i++;
 8002904:	7bfb      	ldrb	r3, [r7, #15]
 8002906:	3301      	adds	r3, #1
 8002908:	73fb      	strb	r3, [r7, #15]
				while(rx_buffer[i+1] != ' '){			//Almacenar dato en buffer hasta que se encuentre un espacio
 800290a:	7bfb      	ldrb	r3, [r7, #15]
 800290c:	3301      	adds	r3, #1
 800290e:	4a09      	ldr	r2, [pc, #36]	; (8002934 <interpretaComando+0x2dc>)
 8002910:	5cd3      	ldrb	r3, [r2, r3]
 8002912:	2b20      	cmp	r3, #32
 8002914:	d1ec      	bne.n	80028f0 <interpretaComando+0x298>
				}
				Pfin.y = strtod(&auxString[0], NULL);
 8002916:	2100      	movs	r1, #0
 8002918:	4815      	ldr	r0, [pc, #84]	; (8002970 <interpretaComando+0x318>)
 800291a:	f00c ffc7 	bl	800f8ac <strtod>
 800291e:	eeb0 7b40 	vmov.f64	d7, d0
 8002922:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002926:	4b13      	ldr	r3, [pc, #76]	; (8002974 <interpretaComando+0x31c>)
 8002928:	edc3 7a01 	vstr	s15, [r3, #4]
				for (int k = 0; k <= 10; k++) {
 800292c:	2300      	movs	r3, #0
 800292e:	607b      	str	r3, [r7, #4]
 8002930:	e02c      	b.n	800298c <interpretaComando+0x334>
 8002932:	bf00      	nop
 8002934:	2400044c 	.word	0x2400044c
 8002938:	080122ec 	.word	0x080122ec
 800293c:	24000ca8 	.word	0x24000ca8
 8002940:	2400044e 	.word	0x2400044e
 8002944:	24000390 	.word	0x24000390
 8002948:	42b40000 	.word	0x42b40000
 800294c:	240003b8 	.word	0x240003b8
 8002950:	080122f8 	.word	0x080122f8
 8002954:	08012304 	.word	0x08012304
 8002958:	240003c0 	.word	0x240003c0
 800295c:	08012310 	.word	0x08012310
 8002960:	240003c8 	.word	0x240003c8
 8002964:	0801231c 	.word	0x0801231c
 8002968:	0801232c 	.word	0x0801232c
 800296c:	240004d8 	.word	0x240004d8
 8002970:	24000394 	.word	0x24000394
 8002974:	240003dc 	.word	0x240003dc
 8002978:	08012334 	.word	0x08012334
					auxString[k] = 0;
 800297c:	4a53      	ldr	r2, [pc, #332]	; (8002acc <interpretaComando+0x474>)
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	4413      	add	r3, r2
 8002982:	2200      	movs	r2, #0
 8002984:	701a      	strb	r2, [r3, #0]
				for (int k = 0; k <= 10; k++) {
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	3301      	adds	r3, #1
 800298a:	607b      	str	r3, [r7, #4]
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	2b0a      	cmp	r3, #10
 8002990:	ddf4      	ble.n	800297c <interpretaComando+0x324>
				}
				j=0;
 8002992:	2300      	movs	r3, #0
 8002994:	73bb      	strb	r3, [r7, #14]
				HAL_UART_Transmit(&huart3,(uint8_t *)"PuntoY_ok\n\r", 11, 100);
 8002996:	2364      	movs	r3, #100	; 0x64
 8002998:	220b      	movs	r2, #11
 800299a:	494d      	ldr	r1, [pc, #308]	; (8002ad0 <interpretaComando+0x478>)
 800299c:	484d      	ldr	r0, [pc, #308]	; (8002ad4 <interpretaComando+0x47c>)
 800299e:	f009 fe65 	bl	800c66c <HAL_UART_Transmit>
 80029a2:	e039      	b.n	8002a18 <interpretaComando+0x3c0>
			}
			else if(rx_buffer[i] == 'z'){
 80029a4:	7bfb      	ldrb	r3, [r7, #15]
 80029a6:	4a4c      	ldr	r2, [pc, #304]	; (8002ad8 <interpretaComando+0x480>)
 80029a8:	5cd3      	ldrb	r3, [r2, r3]
 80029aa:	2b7a      	cmp	r3, #122	; 0x7a
 80029ac:	d134      	bne.n	8002a18 <interpretaComando+0x3c0>
				while(rx_buffer[i+1] != ' '){			//Almacenar dato en buffer hasta que se encuentre un espacio
 80029ae:	e00c      	b.n	80029ca <interpretaComando+0x372>
					auxString[j] = rx_buffer[i+1];
 80029b0:	7bfb      	ldrb	r3, [r7, #15]
 80029b2:	1c5a      	adds	r2, r3, #1
 80029b4:	7bbb      	ldrb	r3, [r7, #14]
 80029b6:	4948      	ldr	r1, [pc, #288]	; (8002ad8 <interpretaComando+0x480>)
 80029b8:	5c89      	ldrb	r1, [r1, r2]
 80029ba:	4a44      	ldr	r2, [pc, #272]	; (8002acc <interpretaComando+0x474>)
 80029bc:	54d1      	strb	r1, [r2, r3]
					j++;
 80029be:	7bbb      	ldrb	r3, [r7, #14]
 80029c0:	3301      	adds	r3, #1
 80029c2:	73bb      	strb	r3, [r7, #14]
					i++;
 80029c4:	7bfb      	ldrb	r3, [r7, #15]
 80029c6:	3301      	adds	r3, #1
 80029c8:	73fb      	strb	r3, [r7, #15]
				while(rx_buffer[i+1] != ' '){			//Almacenar dato en buffer hasta que se encuentre un espacio
 80029ca:	7bfb      	ldrb	r3, [r7, #15]
 80029cc:	3301      	adds	r3, #1
 80029ce:	4a42      	ldr	r2, [pc, #264]	; (8002ad8 <interpretaComando+0x480>)
 80029d0:	5cd3      	ldrb	r3, [r2, r3]
 80029d2:	2b20      	cmp	r3, #32
 80029d4:	d1ec      	bne.n	80029b0 <interpretaComando+0x358>
				}
				Pfin.z = strtod(&auxString[0], NULL);
 80029d6:	2100      	movs	r1, #0
 80029d8:	483c      	ldr	r0, [pc, #240]	; (8002acc <interpretaComando+0x474>)
 80029da:	f00c ff67 	bl	800f8ac <strtod>
 80029de:	eeb0 7b40 	vmov.f64	d7, d0
 80029e2:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80029e6:	4b3d      	ldr	r3, [pc, #244]	; (8002adc <interpretaComando+0x484>)
 80029e8:	edc3 7a02 	vstr	s15, [r3, #8]
				for (int k = 0; k <= 10; k++) {
 80029ec:	2300      	movs	r3, #0
 80029ee:	603b      	str	r3, [r7, #0]
 80029f0:	e007      	b.n	8002a02 <interpretaComando+0x3aa>
					auxString[k] = 0;
 80029f2:	4a36      	ldr	r2, [pc, #216]	; (8002acc <interpretaComando+0x474>)
 80029f4:	683b      	ldr	r3, [r7, #0]
 80029f6:	4413      	add	r3, r2
 80029f8:	2200      	movs	r2, #0
 80029fa:	701a      	strb	r2, [r3, #0]
				for (int k = 0; k <= 10; k++) {
 80029fc:	683b      	ldr	r3, [r7, #0]
 80029fe:	3301      	adds	r3, #1
 8002a00:	603b      	str	r3, [r7, #0]
 8002a02:	683b      	ldr	r3, [r7, #0]
 8002a04:	2b0a      	cmp	r3, #10
 8002a06:	ddf4      	ble.n	80029f2 <interpretaComando+0x39a>
				}
				j=0;
 8002a08:	2300      	movs	r3, #0
 8002a0a:	73bb      	strb	r3, [r7, #14]
				HAL_UART_Transmit(&huart3,(uint8_t *)"PuntoZ_ok\n\r", 11, 100);
 8002a0c:	2364      	movs	r3, #100	; 0x64
 8002a0e:	220b      	movs	r2, #11
 8002a10:	4933      	ldr	r1, [pc, #204]	; (8002ae0 <interpretaComando+0x488>)
 8002a12:	4830      	ldr	r0, [pc, #192]	; (8002ad4 <interpretaComando+0x47c>)
 8002a14:	f009 fe2a 	bl	800c66c <HAL_UART_Transmit>
			}
			i++;
 8002a18:	7bfb      	ldrb	r3, [r7, #15]
 8002a1a:	3301      	adds	r3, #1
 8002a1c:	73fb      	strb	r3, [r7, #15]
		while(rx_buffer[i] != 0){
 8002a1e:	7bfb      	ldrb	r3, [r7, #15]
 8002a20:	4a2d      	ldr	r2, [pc, #180]	; (8002ad8 <interpretaComando+0x480>)
 8002a22:	5cd3      	ldrb	r3, [r2, r3]
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	f47f af22 	bne.w	800286e <interpretaComando+0x216>
		}
		cinematicaInversa(Pfin);
 8002a2a:	4b2c      	ldr	r3, [pc, #176]	; (8002adc <interpretaComando+0x484>)
 8002a2c:	edd3 6a00 	vldr	s13, [r3]
 8002a30:	ed93 7a01 	vldr	s14, [r3, #4]
 8002a34:	edd3 7a02 	vldr	s15, [r3, #8]
 8002a38:	eeb0 0a66 	vmov.f32	s0, s13
 8002a3c:	eef0 0a47 	vmov.f32	s1, s14
 8002a40:	eeb0 1a67 	vmov.f32	s2, s15
 8002a44:	f7fe f81c 	bl	8000a80 <cinematicaInversa>
		break;
 8002a48:	e03c      	b.n	8002ac4 <interpretaComando+0x46c>
	case 'H':
	case 'h':
		HAL_UART_Transmit(&huart3,(uint8_t *)"Homing\n\r", 8, 100);
 8002a4a:	2364      	movs	r3, #100	; 0x64
 8002a4c:	2208      	movs	r2, #8
 8002a4e:	4925      	ldr	r1, [pc, #148]	; (8002ae4 <interpretaComando+0x48c>)
 8002a50:	4820      	ldr	r0, [pc, #128]	; (8002ad4 <interpretaComando+0x47c>)
 8002a52:	f009 fe0b 	bl	800c66c <HAL_UART_Transmit>
		//PREGUNTA : se activan los enables en el homming para asegurarse de que el robot empiece a operar en una posicion segura  ?
		HAL_GPIO_WritePin(S_Enable_1_GPIO_Port, S_Enable_1_Pin, GPIO_PIN_RESET);  //activo Enable
 8002a56:	2200      	movs	r2, #0
 8002a58:	2110      	movs	r1, #16
 8002a5a:	4823      	ldr	r0, [pc, #140]	; (8002ae8 <interpretaComando+0x490>)
 8002a5c:	f005 fa2a 	bl	8007eb4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(S_Enable_2_GPIO_Port, S_Enable_2_Pin, GPIO_PIN_RESET);
 8002a60:	2200      	movs	r2, #0
 8002a62:	2120      	movs	r1, #32
 8002a64:	4820      	ldr	r0, [pc, #128]	; (8002ae8 <interpretaComando+0x490>)
 8002a66:	f005 fa25 	bl	8007eb4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(S_Enable_3_GPIO_Port, S_Enable_3_Pin, GPIO_PIN_RESET);
 8002a6a:	2200      	movs	r2, #0
 8002a6c:	2140      	movs	r1, #64	; 0x40
 8002a6e:	481e      	ldr	r0, [pc, #120]	; (8002ae8 <interpretaComando+0x490>)
 8002a70:	f005 fa20 	bl	8007eb4 <HAL_GPIO_WritePin>
		homingAprox();
 8002a74:	f7ff f934 	bl	8001ce0 <homingAprox>
		homingArm1();
 8002a78:	f7ff fb2a 	bl	80020d0 <homingArm1>
		homingArm2();
 8002a7c:	f7ff fc08 	bl	8002290 <homingArm2>
		homingArm3();
 8002a80:	f7ff fd06 	bl	8002490 <homingArm3>
		Pini.x=0;
 8002a84:	4b19      	ldr	r3, [pc, #100]	; (8002aec <interpretaComando+0x494>)
 8002a86:	f04f 0200 	mov.w	r2, #0
 8002a8a:	601a      	str	r2, [r3, #0]
		Pini.y=0;
 8002a8c:	4b17      	ldr	r3, [pc, #92]	; (8002aec <interpretaComando+0x494>)
 8002a8e:	f04f 0200 	mov.w	r2, #0
 8002a92:	605a      	str	r2, [r3, #4]
		Pini.z = -0.334658034417224;
 8002a94:	4b15      	ldr	r3, [pc, #84]	; (8002aec <interpretaComando+0x494>)
 8002a96:	4a16      	ldr	r2, [pc, #88]	; (8002af0 <interpretaComando+0x498>)
 8002a98:	609a      	str	r2, [r3, #8]
		HAL_UART_Transmit(&huart3,(uint8_t *)"Fin_Homing\n\r", 12, 100);
 8002a9a:	2364      	movs	r3, #100	; 0x64
 8002a9c:	220c      	movs	r2, #12
 8002a9e:	4915      	ldr	r1, [pc, #84]	; (8002af4 <interpretaComando+0x49c>)
 8002aa0:	480c      	ldr	r0, [pc, #48]	; (8002ad4 <interpretaComando+0x47c>)
 8002aa2:	f009 fde3 	bl	800c66c <HAL_UART_Transmit>

		break;
 8002aa6:	e00d      	b.n	8002ac4 <interpretaComando+0x46c>
	case 'R':			//Set RPM
	case 'r':
		HAL_UART_Transmit(&huart3,(uint8_t *)"RPM\n\r", 5, 100);
 8002aa8:	2364      	movs	r3, #100	; 0x64
 8002aaa:	2205      	movs	r2, #5
 8002aac:	4912      	ldr	r1, [pc, #72]	; (8002af8 <interpretaComando+0x4a0>)
 8002aae:	4809      	ldr	r0, [pc, #36]	; (8002ad4 <interpretaComando+0x47c>)
 8002ab0:	f009 fddc 	bl	800c66c <HAL_UART_Transmit>
		break;
 8002ab4:	e006      	b.n	8002ac4 <interpretaComando+0x46c>
	default:
		HAL_UART_Transmit(&huart3, (uint8_t *)"Nada\n\r", 6, 100);
 8002ab6:	2364      	movs	r3, #100	; 0x64
 8002ab8:	2206      	movs	r2, #6
 8002aba:	4910      	ldr	r1, [pc, #64]	; (8002afc <interpretaComando+0x4a4>)
 8002abc:	4805      	ldr	r0, [pc, #20]	; (8002ad4 <interpretaComando+0x47c>)
 8002abe:	f009 fdd5 	bl	800c66c <HAL_UART_Transmit>
		break;
 8002ac2:	bf00      	nop
	}
}
 8002ac4:	bf00      	nop
 8002ac6:	3710      	adds	r7, #16
 8002ac8:	46bd      	mov	sp, r7
 8002aca:	bd80      	pop	{r7, pc}
 8002acc:	24000394 	.word	0x24000394
 8002ad0:	08012340 	.word	0x08012340
 8002ad4:	24000ca8 	.word	0x24000ca8
 8002ad8:	2400044c 	.word	0x2400044c
 8002adc:	240003dc 	.word	0x240003dc
 8002ae0:	0801234c 	.word	0x0801234c
 8002ae4:	08012358 	.word	0x08012358
 8002ae8:	58020c00 	.word	0x58020c00
 8002aec:	240003d0 	.word	0x240003d0
 8002af0:	beab584c 	.word	0xbeab584c
 8002af4:	08012364 	.word	0x08012364
 8002af8:	08012374 	.word	0x08012374
 8002afc:	0801237c 	.word	0x0801237c

08002b00 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002b00:	b580      	push	{r7, lr}
 8002b02:	ed2d 8b02 	vpush	{d8}
 8002b06:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002b08:	f004 f8a4 	bl	8006c54 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002b0c:	f000 f970 	bl	8002df0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002b10:	f7fe ffea 	bl	8001ae8 <MX_GPIO_Init>
  MX_TIM2_Init();
 8002b14:	f001 faa4 	bl	8004060 <MX_TIM2_Init>
  MX_TIM3_Init();
 8002b18:	f001 fb12 	bl	8004140 <MX_TIM3_Init>
  MX_TIM4_Init();
 8002b1c:	f001 fb82 	bl	8004224 <MX_TIM4_Init>
  MX_USART3_UART_Init();
 8002b20:	f003 fef6 	bl	8006910 <MX_USART3_UART_Init>
  MX_TIM12_Init();
 8002b24:	f001 fc40 	bl	80043a8 <MX_TIM12_Init>
  MX_TIM13_Init();
 8002b28:	f001 fca2 	bl	8004470 <MX_TIM13_Init>
  MX_TIM14_Init();
 8002b2c:	f001 fcf0 	bl	8004510 <MX_TIM14_Init>
  MX_TIM5_Init();
 8002b30:	f001 fbea 	bl	8004308 <MX_TIM5_Init>
  MX_TIM15_Init();
 8002b34:	f001 fd3c 	bl	80045b0 <MX_TIM15_Init>
  MX_USART1_UART_Init();
 8002b38:	f003 fe52 	bl	80067e0 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8002b3c:	f003 fe9c 	bl	8006878 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
	HAL_UART_Transmit(&huart3, data, sizeof(data), 100); //Enviamos el mensaje: Start
 8002b40:	2364      	movs	r3, #100	; 0x64
 8002b42:	2207      	movs	r2, #7
 8002b44:	498c      	ldr	r1, [pc, #560]	; (8002d78 <main+0x278>)
 8002b46:	488d      	ldr	r0, [pc, #564]	; (8002d7c <main+0x27c>)
 8002b48:	f009 fd90 	bl	800c66c <HAL_UART_Transmit>
	HAL_UART_Receive_IT(&huart3, &rx_data, 1);
 8002b4c:	2201      	movs	r2, #1
 8002b4e:	498c      	ldr	r1, [pc, #560]	; (8002d80 <main+0x280>)
 8002b50:	488a      	ldr	r0, [pc, #552]	; (8002d7c <main+0x27c>)
 8002b52:	f009 fe21 	bl	800c798 <HAL_UART_Receive_IT>


	HAL_TIM_Base_Start(&htim12);
 8002b56:	488b      	ldr	r0, [pc, #556]	; (8002d84 <main+0x284>)
 8002b58:	f007 fd94 	bl	800a684 <HAL_TIM_Base_Start>
	HAL_TIM_Base_Start(&htim13);
 8002b5c:	488a      	ldr	r0, [pc, #552]	; (8002d88 <main+0x288>)
 8002b5e:	f007 fd91 	bl	800a684 <HAL_TIM_Base_Start>
	HAL_TIM_Base_Start(&htim14);
 8002b62:	488a      	ldr	r0, [pc, #552]	; (8002d8c <main+0x28c>)
 8002b64:	f007 fd8e 	bl	800a684 <HAL_TIM_Base_Start>

	HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1);	//Enciendo interrupcion input capture motor 1
 8002b68:	2100      	movs	r1, #0
 8002b6a:	4889      	ldr	r0, [pc, #548]	; (8002d90 <main+0x290>)
 8002b6c:	f008 f930 	bl	800add0 <HAL_TIM_IC_Start_IT>
	HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_1);	//Enciendo interrupcion input capture motor 2
 8002b70:	2100      	movs	r1, #0
 8002b72:	4888      	ldr	r0, [pc, #544]	; (8002d94 <main+0x294>)
 8002b74:	f008 f92c 	bl	800add0 <HAL_TIM_IC_Start_IT>
	HAL_TIM_IC_Start_IT(&htim4, TIM_CHANNEL_1);	//Enciendo interrupcion input capture motor 3
 8002b78:	2100      	movs	r1, #0
 8002b7a:	4887      	ldr	r0, [pc, #540]	; (8002d98 <main+0x298>)
 8002b7c:	f008 f928 	bl	800add0 <HAL_TIM_IC_Start_IT>
	HAL_UART_Transmit(&huart3, (uint8_t *)"Ejemplo :px0 y0 z-0.8 \nr", 24, 100);
 8002b80:	2364      	movs	r3, #100	; 0x64
 8002b82:	2218      	movs	r2, #24
 8002b84:	4985      	ldr	r1, [pc, #532]	; (8002d9c <main+0x29c>)
 8002b86:	487d      	ldr	r0, [pc, #500]	; (8002d7c <main+0x27c>)
 8002b88:	f009 fd70 	bl	800c66c <HAL_UART_Transmit>
  /* USER CODE BEGIN WHILE */
	while (1) {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		if (FlagButton == 1) {
 8002b8c:	4b84      	ldr	r3, [pc, #528]	; (8002da0 <main+0x2a0>)
 8002b8e:	ed93 7b00 	vldr	d7, [r3]
 8002b92:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8002b96:	eeb4 7b46 	vcmp.f64	d7, d6
 8002b9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b9e:	d1f5      	bne.n	8002b8c <main+0x8c>
			FlagButton = 0;
 8002ba0:	497f      	ldr	r1, [pc, #508]	; (8002da0 <main+0x2a0>)
 8002ba2:	f04f 0200 	mov.w	r2, #0
 8002ba6:	f04f 0300 	mov.w	r3, #0
 8002baa:	e9c1 2300 	strd	r2, r3, [r1]
			distancia = sqrt(pow(Pfin.x - Pini.x, 2) + pow(Pfin.y - Pini.y, 2) + pow(Pfin.z - Pini.z, 2));
 8002bae:	4b7d      	ldr	r3, [pc, #500]	; (8002da4 <main+0x2a4>)
 8002bb0:	ed93 7a00 	vldr	s14, [r3]
 8002bb4:	4b7c      	ldr	r3, [pc, #496]	; (8002da8 <main+0x2a8>)
 8002bb6:	edd3 7a00 	vldr	s15, [r3]
 8002bba:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002bbe:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002bc2:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8002bc6:	eeb0 0b47 	vmov.f64	d0, d7
 8002bca:	f00e ff29 	bl	8011a20 <pow>
 8002bce:	eeb0 8b40 	vmov.f64	d8, d0
 8002bd2:	4b74      	ldr	r3, [pc, #464]	; (8002da4 <main+0x2a4>)
 8002bd4:	ed93 7a01 	vldr	s14, [r3, #4]
 8002bd8:	4b73      	ldr	r3, [pc, #460]	; (8002da8 <main+0x2a8>)
 8002bda:	edd3 7a01 	vldr	s15, [r3, #4]
 8002bde:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002be2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002be6:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8002bea:	eeb0 0b47 	vmov.f64	d0, d7
 8002bee:	f00e ff17 	bl	8011a20 <pow>
 8002bf2:	eeb0 7b40 	vmov.f64	d7, d0
 8002bf6:	ee38 8b07 	vadd.f64	d8, d8, d7
 8002bfa:	4b6a      	ldr	r3, [pc, #424]	; (8002da4 <main+0x2a4>)
 8002bfc:	ed93 7a02 	vldr	s14, [r3, #8]
 8002c00:	4b69      	ldr	r3, [pc, #420]	; (8002da8 <main+0x2a8>)
 8002c02:	edd3 7a02 	vldr	s15, [r3, #8]
 8002c06:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002c0a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002c0e:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8002c12:	eeb0 0b47 	vmov.f64	d0, d7
 8002c16:	f00e ff03 	bl	8011a20 <pow>
 8002c1a:	eeb0 7b40 	vmov.f64	d7, d0
 8002c1e:	ee38 7b07 	vadd.f64	d7, d8, d7
 8002c22:	eeb0 0b47 	vmov.f64	d0, d7
 8002c26:	f00f f97b 	bl	8011f20 <sqrt>
 8002c2a:	eeb0 7b40 	vmov.f64	d7, d0
 8002c2e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002c32:	4b5e      	ldr	r3, [pc, #376]	; (8002dac <main+0x2ac>)
 8002c34:	edc3 7a00 	vstr	s15, [r3]
			vDirector[0] = (Pfin.x - Pini.x) / distancia;	//Vector director en X
 8002c38:	4b5a      	ldr	r3, [pc, #360]	; (8002da4 <main+0x2a4>)
 8002c3a:	ed93 7a00 	vldr	s14, [r3]
 8002c3e:	4b5a      	ldr	r3, [pc, #360]	; (8002da8 <main+0x2a8>)
 8002c40:	edd3 7a00 	vldr	s15, [r3]
 8002c44:	ee77 6a67 	vsub.f32	s13, s14, s15
 8002c48:	4b58      	ldr	r3, [pc, #352]	; (8002dac <main+0x2ac>)
 8002c4a:	ed93 7a00 	vldr	s14, [r3]
 8002c4e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002c52:	4b57      	ldr	r3, [pc, #348]	; (8002db0 <main+0x2b0>)
 8002c54:	edc3 7a00 	vstr	s15, [r3]
			vDirector[1] = (Pfin.y - Pini.y) / distancia;	//Vector director en Y
 8002c58:	4b52      	ldr	r3, [pc, #328]	; (8002da4 <main+0x2a4>)
 8002c5a:	ed93 7a01 	vldr	s14, [r3, #4]
 8002c5e:	4b52      	ldr	r3, [pc, #328]	; (8002da8 <main+0x2a8>)
 8002c60:	edd3 7a01 	vldr	s15, [r3, #4]
 8002c64:	ee77 6a67 	vsub.f32	s13, s14, s15
 8002c68:	4b50      	ldr	r3, [pc, #320]	; (8002dac <main+0x2ac>)
 8002c6a:	ed93 7a00 	vldr	s14, [r3]
 8002c6e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002c72:	4b4f      	ldr	r3, [pc, #316]	; (8002db0 <main+0x2b0>)
 8002c74:	edc3 7a01 	vstr	s15, [r3, #4]
			vDirector[2] = (Pfin.z - Pini.z) / distancia;	//Vector director en Z
 8002c78:	4b4a      	ldr	r3, [pc, #296]	; (8002da4 <main+0x2a4>)
 8002c7a:	ed93 7a02 	vldr	s14, [r3, #8]
 8002c7e:	4b4a      	ldr	r3, [pc, #296]	; (8002da8 <main+0x2a8>)
 8002c80:	edd3 7a02 	vldr	s15, [r3, #8]
 8002c84:	ee77 6a67 	vsub.f32	s13, s14, s15
 8002c88:	4b48      	ldr	r3, [pc, #288]	; (8002dac <main+0x2ac>)
 8002c8a:	ed93 7a00 	vldr	s14, [r3]
 8002c8e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002c92:	4b47      	ldr	r3, [pc, #284]	; (8002db0 <main+0x2b0>)
 8002c94:	edc3 7a02 	vstr	s15, [r3, #8]
			configStepMotor1(titha1);
 8002c98:	4b46      	ldr	r3, [pc, #280]	; (8002db4 <main+0x2b4>)
 8002c9a:	ed93 7b00 	vldr	d7, [r3]
 8002c9e:	eeb0 0b47 	vmov.f64	d0, d7
 8002ca2:	f000 fb85 	bl	80033b0 <configStepMotor1>
			configStepMotor2(titha2);
 8002ca6:	4b44      	ldr	r3, [pc, #272]	; (8002db8 <main+0x2b8>)
 8002ca8:	ed93 7b00 	vldr	d7, [r3]
 8002cac:	eeb0 0b47 	vmov.f64	d0, d7
 8002cb0:	f000 fc3e 	bl	8003530 <configStepMotor2>
			configStepMotor3(titha3);
 8002cb4:	4b41      	ldr	r3, [pc, #260]	; (8002dbc <main+0x2bc>)
 8002cb6:	ed93 7b00 	vldr	d7, [r3]
 8002cba:	eeb0 0b47 	vmov.f64	d0, d7
 8002cbe:	f000 fcf7 	bl	80036b0 <configStepMotor3>
			inicializarTrayectoria(0, distancia, 0, 0, 0.4, 4, 1); //(Posinicio , Posfin , Vinicio , Vfin , Vmaxima, Amaxima, jerk)
 8002cc2:	4b3a      	ldr	r3, [pc, #232]	; (8002dac <main+0x2ac>)
 8002cc4:	edd3 7a00 	vldr	s15, [r3]
 8002cc8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002ccc:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8002cd0:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 8002cd4:	ed9f 4b24 	vldr	d4, [pc, #144]	; 8002d68 <main+0x268>
 8002cd8:	ed9f 3b25 	vldr	d3, [pc, #148]	; 8002d70 <main+0x270>
 8002cdc:	ed9f 2b24 	vldr	d2, [pc, #144]	; 8002d70 <main+0x270>
 8002ce0:	eeb0 1b47 	vmov.f64	d1, d7
 8002ce4:	ed9f 0b22 	vldr	d0, [pc, #136]	; 8002d70 <main+0x270>
 8002ce8:	f001 fe8e 	bl	8004a08 <inicializarTrayectoria>
			FlagTiempo = 0;
 8002cec:	4b34      	ldr	r3, [pc, #208]	; (8002dc0 <main+0x2c0>)
 8002cee:	2200      	movs	r2, #0
 8002cf0:	701a      	strb	r2, [r3, #0]
			FlagTrayectoM1 = 0;
 8002cf2:	4934      	ldr	r1, [pc, #208]	; (8002dc4 <main+0x2c4>)
 8002cf4:	f04f 0200 	mov.w	r2, #0
 8002cf8:	f04f 0300 	mov.w	r3, #0
 8002cfc:	e9c1 2300 	strd	r2, r3, [r1]
			FlagTrayectoM2 = 0;
 8002d00:	4931      	ldr	r1, [pc, #196]	; (8002dc8 <main+0x2c8>)
 8002d02:	f04f 0200 	mov.w	r2, #0
 8002d06:	f04f 0300 	mov.w	r3, #0
 8002d0a:	e9c1 2300 	strd	r2, r3, [r1]
			FlagTrayectoM3 = 0;
 8002d0e:	492f      	ldr	r1, [pc, #188]	; (8002dcc <main+0x2cc>)
 8002d10:	f04f 0200 	mov.w	r2, #0
 8002d14:	f04f 0300 	mov.w	r3, #0
 8002d18:	e9c1 2300 	strd	r2, r3, [r1]
			Start=1;
 8002d1c:	4b2c      	ldr	r3, [pc, #176]	; (8002dd0 <main+0x2d0>)
 8002d1e:	2201      	movs	r2, #1
 8002d20:	701a      	strb	r2, [r3, #0]
			rpm1 = 0;
 8002d22:	492c      	ldr	r1, [pc, #176]	; (8002dd4 <main+0x2d4>)
 8002d24:	f04f 0200 	mov.w	r2, #0
 8002d28:	f04f 0300 	mov.w	r3, #0
 8002d2c:	e9c1 2300 	strd	r2, r3, [r1]
			rpm2 = 0;
 8002d30:	4929      	ldr	r1, [pc, #164]	; (8002dd8 <main+0x2d8>)
 8002d32:	f04f 0200 	mov.w	r2, #0
 8002d36:	f04f 0300 	mov.w	r3, #0
 8002d3a:	e9c1 2300 	strd	r2, r3, [r1]
			rpm3 = 0;
 8002d3e:	4927      	ldr	r1, [pc, #156]	; (8002ddc <main+0x2dc>)
 8002d40:	f04f 0200 	mov.w	r2, #0
 8002d44:	f04f 0300 	mov.w	r3, #0
 8002d48:	e9c1 2300 	strd	r2, r3, [r1]
			mandalemecha = 1;
 8002d4c:	4924      	ldr	r1, [pc, #144]	; (8002de0 <main+0x2e0>)
 8002d4e:	f04f 0200 	mov.w	r2, #0
 8002d52:	4b24      	ldr	r3, [pc, #144]	; (8002de4 <main+0x2e4>)
 8002d54:	e9c1 2300 	strd	r2, r3, [r1]
			HAL_TIM_Base_Start(&htim5);
 8002d58:	4823      	ldr	r0, [pc, #140]	; (8002de8 <main+0x2e8>)
 8002d5a:	f007 fc93 	bl	800a684 <HAL_TIM_Base_Start>
			HAL_TIM_Base_Start_IT(&htim15);
 8002d5e:	4823      	ldr	r0, [pc, #140]	; (8002dec <main+0x2ec>)
 8002d60:	f007 fd28 	bl	800a7b4 <HAL_TIM_Base_Start_IT>
		if (FlagButton == 1) {
 8002d64:	e712      	b.n	8002b8c <main+0x8c>
 8002d66:	bf00      	nop
 8002d68:	9999999a 	.word	0x9999999a
 8002d6c:	3fd99999 	.word	0x3fd99999
	...
 8002d78:	24000000 	.word	0x24000000
 8002d7c:	24000ca8 	.word	0x24000ca8
 8002d80:	2400046a 	.word	0x2400046a
 8002d84:	240006bc 	.word	0x240006bc
 8002d88:	24000708 	.word	0x24000708
 8002d8c:	24000754 	.word	0x24000754
 8002d90:	2400058c 	.word	0x2400058c
 8002d94:	240005d8 	.word	0x240005d8
 8002d98:	24000624 	.word	0x24000624
 8002d9c:	08012384 	.word	0x08012384
 8002da0:	240004d0 	.word	0x240004d0
 8002da4:	240003dc 	.word	0x240003dc
 8002da8:	240003d0 	.word	0x240003d0
 8002dac:	240003e8 	.word	0x240003e8
 8002db0:	240003ec 	.word	0x240003ec
 8002db4:	240003b8 	.word	0x240003b8
 8002db8:	240003c0 	.word	0x240003c0
 8002dbc:	240003c8 	.word	0x240003c8
 8002dc0:	2400046c 	.word	0x2400046c
 8002dc4:	24000490 	.word	0x24000490
 8002dc8:	24000498 	.word	0x24000498
 8002dcc:	24000008 	.word	0x24000008
 8002dd0:	24000528 	.word	0x24000528
 8002dd4:	240004e0 	.word	0x240004e0
 8002dd8:	240004e8 	.word	0x240004e8
 8002ddc:	240004f0 	.word	0x240004f0
 8002de0:	24000530 	.word	0x24000530
 8002de4:	3ff00000 	.word	0x3ff00000
 8002de8:	24000670 	.word	0x24000670
 8002dec:	240007a0 	.word	0x240007a0

08002df0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002df0:	b580      	push	{r7, lr}
 8002df2:	b09c      	sub	sp, #112	; 0x70
 8002df4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002df6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002dfa:	224c      	movs	r2, #76	; 0x4c
 8002dfc:	2100      	movs	r1, #0
 8002dfe:	4618      	mov	r0, r3
 8002e00:	f00b ff7a 	bl	800ecf8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002e04:	1d3b      	adds	r3, r7, #4
 8002e06:	2220      	movs	r2, #32
 8002e08:	2100      	movs	r1, #0
 8002e0a:	4618      	mov	r0, r3
 8002e0c:	f00b ff74 	bl	800ecf8 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8002e10:	2002      	movs	r0, #2
 8002e12:	f005 f883 	bl	8007f1c <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8002e16:	2300      	movs	r3, #0
 8002e18:	603b      	str	r3, [r7, #0]
 8002e1a:	4b32      	ldr	r3, [pc, #200]	; (8002ee4 <SystemClock_Config+0xf4>)
 8002e1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e1e:	4a31      	ldr	r2, [pc, #196]	; (8002ee4 <SystemClock_Config+0xf4>)
 8002e20:	f023 0301 	bic.w	r3, r3, #1
 8002e24:	62d3      	str	r3, [r2, #44]	; 0x2c
 8002e26:	4b2f      	ldr	r3, [pc, #188]	; (8002ee4 <SystemClock_Config+0xf4>)
 8002e28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e2a:	f003 0301 	and.w	r3, r3, #1
 8002e2e:	603b      	str	r3, [r7, #0]
 8002e30:	4b2d      	ldr	r3, [pc, #180]	; (8002ee8 <SystemClock_Config+0xf8>)
 8002e32:	699b      	ldr	r3, [r3, #24]
 8002e34:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8002e38:	4a2b      	ldr	r2, [pc, #172]	; (8002ee8 <SystemClock_Config+0xf8>)
 8002e3a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002e3e:	6193      	str	r3, [r2, #24]
 8002e40:	4b29      	ldr	r3, [pc, #164]	; (8002ee8 <SystemClock_Config+0xf8>)
 8002e42:	699b      	ldr	r3, [r3, #24]
 8002e44:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002e48:	603b      	str	r3, [r7, #0]
 8002e4a:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8002e4c:	bf00      	nop
 8002e4e:	4b26      	ldr	r3, [pc, #152]	; (8002ee8 <SystemClock_Config+0xf8>)
 8002e50:	699b      	ldr	r3, [r3, #24]
 8002e52:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002e56:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002e5a:	d1f8      	bne.n	8002e4e <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002e5c:	2302      	movs	r3, #2
 8002e5e:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8002e60:	2301      	movs	r3, #1
 8002e62:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002e64:	2340      	movs	r3, #64	; 0x40
 8002e66:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002e68:	2302      	movs	r3, #2
 8002e6a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002e6c:	2300      	movs	r3, #0
 8002e6e:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8002e70:	2304      	movs	r3, #4
 8002e72:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 16;
 8002e74:	2310      	movs	r3, #16
 8002e76:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8002e78:	2302      	movs	r3, #2
 8002e7a:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8002e7c:	2302      	movs	r3, #2
 8002e7e:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8002e80:	2302      	movs	r3, #2
 8002e82:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8002e84:	230c      	movs	r3, #12
 8002e86:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8002e88:	2300      	movs	r3, #0
 8002e8a:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8002e8c:	2300      	movs	r3, #0
 8002e8e:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002e90:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002e94:	4618      	mov	r0, r3
 8002e96:	f005 f87b 	bl	8007f90 <HAL_RCC_OscConfig>
 8002e9a:	4603      	mov	r3, r0
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d001      	beq.n	8002ea4 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8002ea0:	f000 fa7e 	bl	80033a0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002ea4:	233f      	movs	r3, #63	; 0x3f
 8002ea6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002ea8:	2303      	movs	r3, #3
 8002eaa:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8002eac:	2300      	movs	r3, #0
 8002eae:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8002eb0:	2308      	movs	r3, #8
 8002eb2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8002eb4:	2300      	movs	r3, #0
 8002eb6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8002eb8:	2340      	movs	r3, #64	; 0x40
 8002eba:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8002ebc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002ec0:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8002ec2:	2300      	movs	r3, #0
 8002ec4:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8002ec6:	1d3b      	adds	r3, r7, #4
 8002ec8:	2101      	movs	r1, #1
 8002eca:	4618      	mov	r0, r3
 8002ecc:	f005 fc8e 	bl	80087ec <HAL_RCC_ClockConfig>
 8002ed0:	4603      	mov	r3, r0
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d001      	beq.n	8002eda <SystemClock_Config+0xea>
  {
    Error_Handler();
 8002ed6:	f000 fa63 	bl	80033a0 <Error_Handler>
  }
}
 8002eda:	bf00      	nop
 8002edc:	3770      	adds	r7, #112	; 0x70
 8002ede:	46bd      	mov	sp, r7
 8002ee0:	bd80      	pop	{r7, pc}
 8002ee2:	bf00      	nop
 8002ee4:	58000400 	.word	0x58000400
 8002ee8:	58024800 	.word	0x58024800

08002eec <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8002eec:	b480      	push	{r7}
 8002eee:	b083      	sub	sp, #12
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	4603      	mov	r3, r0
 8002ef4:	80fb      	strh	r3, [r7, #6]
	switch (GPIO_Pin) {
 8002ef6:	88fb      	ldrh	r3, [r7, #6]
 8002ef8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002efc:	d106      	bne.n	8002f0c <HAL_GPIO_EXTI_Callback+0x20>
	case BUTTON_Pin:
		FlagButton = 1;
 8002efe:	4907      	ldr	r1, [pc, #28]	; (8002f1c <HAL_GPIO_EXTI_Callback+0x30>)
 8002f00:	f04f 0200 	mov.w	r2, #0
 8002f04:	4b06      	ldr	r3, [pc, #24]	; (8002f20 <HAL_GPIO_EXTI_Callback+0x34>)
 8002f06:	e9c1 2300 	strd	r2, r3, [r1]
		break;
 8002f0a:	e000      	b.n	8002f0e <HAL_GPIO_EXTI_Callback+0x22>
		 HAL_TIM_PWM_Stop(&htim14, TIM_CHANNEL_1);	//Apago el PWM del motor 3
		 HAL_UART_Transmit(&huart3, "EndStop3Sup\n\r", 13, 100);
		 break;*/
	default:

		break;
 8002f0c:	bf00      	nop
	}

}
 8002f0e:	bf00      	nop
 8002f10:	370c      	adds	r7, #12
 8002f12:	46bd      	mov	sp, r7
 8002f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f18:	4770      	bx	lr
 8002f1a:	bf00      	nop
 8002f1c:	240004d0 	.word	0x240004d0
 8002f20:	3ff00000 	.word	0x3ff00000

08002f24 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8002f24:	b580      	push	{r7, lr}
 8002f26:	b084      	sub	sp, #16
 8002f28:	af00      	add	r7, sp, #0
 8002f2a:	6078      	str	r0, [r7, #4]

	if (huart->Instance == USART3) {
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	4a28      	ldr	r2, [pc, #160]	; (8002fd4 <HAL_UART_RxCpltCallback+0xb0>)
 8002f32:	4293      	cmp	r3, r2
 8002f34:	d13d      	bne.n	8002fb2 <HAL_UART_RxCpltCallback+0x8e>
		char dato;
		dato = rx_data;
 8002f36:	4b28      	ldr	r3, [pc, #160]	; (8002fd8 <HAL_UART_RxCpltCallback+0xb4>)
 8002f38:	781b      	ldrb	r3, [r3, #0]
 8002f3a:	73fb      	strb	r3, [r7, #15]
		switch (dato) {
 8002f3c:	7bfb      	ldrb	r3, [r7, #15]
 8002f3e:	2b3a      	cmp	r3, #58	; 0x3a
 8002f40:	d006      	beq.n	8002f50 <HAL_UART_RxCpltCallback+0x2c>
 8002f42:	2b3a      	cmp	r3, #58	; 0x3a
 8002f44:	dc26      	bgt.n	8002f94 <HAL_UART_RxCpltCallback+0x70>
 8002f46:	2b08      	cmp	r3, #8
 8002f48:	d009      	beq.n	8002f5e <HAL_UART_RxCpltCallback+0x3a>
 8002f4a:	2b0d      	cmp	r3, #13
 8002f4c:	d012      	beq.n	8002f74 <HAL_UART_RxCpltCallback+0x50>
 8002f4e:	e021      	b.n	8002f94 <HAL_UART_RxCpltCallback+0x70>
		case ':':
			rx_index = 0;
 8002f50:	4b22      	ldr	r3, [pc, #136]	; (8002fdc <HAL_UART_RxCpltCallback+0xb8>)
 8002f52:	2200      	movs	r2, #0
 8002f54:	701a      	strb	r2, [r3, #0]
			cm0 = 1;
 8002f56:	4b22      	ldr	r3, [pc, #136]	; (8002fe0 <HAL_UART_RxCpltCallback+0xbc>)
 8002f58:	2201      	movs	r2, #1
 8002f5a:	701a      	strb	r2, [r3, #0]
			break;
 8002f5c:	e030      	b.n	8002fc0 <HAL_UART_RxCpltCallback+0x9c>
		case 8:
			if (rx_index > 0) {
 8002f5e:	4b1f      	ldr	r3, [pc, #124]	; (8002fdc <HAL_UART_RxCpltCallback+0xb8>)
 8002f60:	781b      	ldrb	r3, [r3, #0]
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d027      	beq.n	8002fb6 <HAL_UART_RxCpltCallback+0x92>
				rx_index--;
 8002f66:	4b1d      	ldr	r3, [pc, #116]	; (8002fdc <HAL_UART_RxCpltCallback+0xb8>)
 8002f68:	781b      	ldrb	r3, [r3, #0]
 8002f6a:	3b01      	subs	r3, #1
 8002f6c:	b2da      	uxtb	r2, r3
 8002f6e:	4b1b      	ldr	r3, [pc, #108]	; (8002fdc <HAL_UART_RxCpltCallback+0xb8>)
 8002f70:	701a      	strb	r2, [r3, #0]
			}
			break;
 8002f72:	e020      	b.n	8002fb6 <HAL_UART_RxCpltCallback+0x92>
		case '\r':
			if (cm0 == 1) {
 8002f74:	4b1a      	ldr	r3, [pc, #104]	; (8002fe0 <HAL_UART_RxCpltCallback+0xbc>)
 8002f76:	781b      	ldrb	r3, [r3, #0]
 8002f78:	2b01      	cmp	r3, #1
 8002f7a:	d11e      	bne.n	8002fba <HAL_UART_RxCpltCallback+0x96>
				rx_buffer[rx_index] = 0;
 8002f7c:	4b17      	ldr	r3, [pc, #92]	; (8002fdc <HAL_UART_RxCpltCallback+0xb8>)
 8002f7e:	781b      	ldrb	r3, [r3, #0]
 8002f80:	461a      	mov	r2, r3
 8002f82:	4b18      	ldr	r3, [pc, #96]	; (8002fe4 <HAL_UART_RxCpltCallback+0xc0>)
 8002f84:	2100      	movs	r1, #0
 8002f86:	5499      	strb	r1, [r3, r2]
				interpretaComando();
 8002f88:	f7ff fb66 	bl	8002658 <interpretaComando>
				cm0 = 0;
 8002f8c:	4b14      	ldr	r3, [pc, #80]	; (8002fe0 <HAL_UART_RxCpltCallback+0xbc>)
 8002f8e:	2200      	movs	r2, #0
 8002f90:	701a      	strb	r2, [r3, #0]
			}
			break;
 8002f92:	e012      	b.n	8002fba <HAL_UART_RxCpltCallback+0x96>
		default:
			if (rx_index < 30) {
 8002f94:	4b11      	ldr	r3, [pc, #68]	; (8002fdc <HAL_UART_RxCpltCallback+0xb8>)
 8002f96:	781b      	ldrb	r3, [r3, #0]
 8002f98:	2b1d      	cmp	r3, #29
 8002f9a:	d810      	bhi.n	8002fbe <HAL_UART_RxCpltCallback+0x9a>
				rx_buffer[rx_index++] = dato;
 8002f9c:	4b0f      	ldr	r3, [pc, #60]	; (8002fdc <HAL_UART_RxCpltCallback+0xb8>)
 8002f9e:	781b      	ldrb	r3, [r3, #0]
 8002fa0:	1c5a      	adds	r2, r3, #1
 8002fa2:	b2d1      	uxtb	r1, r2
 8002fa4:	4a0d      	ldr	r2, [pc, #52]	; (8002fdc <HAL_UART_RxCpltCallback+0xb8>)
 8002fa6:	7011      	strb	r1, [r2, #0]
 8002fa8:	4619      	mov	r1, r3
 8002faa:	4a0e      	ldr	r2, [pc, #56]	; (8002fe4 <HAL_UART_RxCpltCallback+0xc0>)
 8002fac:	7bfb      	ldrb	r3, [r7, #15]
 8002fae:	5453      	strb	r3, [r2, r1]
			}
			break;
 8002fb0:	e005      	b.n	8002fbe <HAL_UART_RxCpltCallback+0x9a>
		}
	}
 8002fb2:	bf00      	nop
 8002fb4:	e004      	b.n	8002fc0 <HAL_UART_RxCpltCallback+0x9c>
			break;
 8002fb6:	bf00      	nop
 8002fb8:	e002      	b.n	8002fc0 <HAL_UART_RxCpltCallback+0x9c>
			break;
 8002fba:	bf00      	nop
 8002fbc:	e000      	b.n	8002fc0 <HAL_UART_RxCpltCallback+0x9c>
			break;
 8002fbe:	bf00      	nop
	HAL_UART_Receive_IT(&huart3, &rx_data, 1); //Receive data (one character only)
 8002fc0:	2201      	movs	r2, #1
 8002fc2:	4905      	ldr	r1, [pc, #20]	; (8002fd8 <HAL_UART_RxCpltCallback+0xb4>)
 8002fc4:	4808      	ldr	r0, [pc, #32]	; (8002fe8 <HAL_UART_RxCpltCallback+0xc4>)
 8002fc6:	f009 fbe7 	bl	800c798 <HAL_UART_Receive_IT>
}
 8002fca:	bf00      	nop
 8002fcc:	3710      	adds	r7, #16
 8002fce:	46bd      	mov	sp, r7
 8002fd0:	bd80      	pop	{r7, pc}
 8002fd2:	bf00      	nop
 8002fd4:	40004800 	.word	0x40004800
 8002fd8:	2400046a 	.word	0x2400046a
 8002fdc:	24000448 	.word	0x24000448
 8002fe0:	2400046b 	.word	0x2400046b
 8002fe4:	2400044c 	.word	0x2400044c
 8002fe8:	24000ca8 	.word	0x24000ca8

08002fec <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 8002fec:	b480      	push	{r7}
 8002fee:	b083      	sub	sp, #12
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	6078      	str	r0, [r7, #4]
	__NOP();
 8002ff4:	bf00      	nop
}
 8002ff6:	bf00      	nop
 8002ff8:	370c      	adds	r7, #12
 8002ffa:	46bd      	mov	sp, r7
 8002ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003000:	4770      	bx	lr
	...

08003004 <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) {
 8003004:	b580      	push	{r7, lr}
 8003006:	b082      	sub	sp, #8
 8003008:	af00      	add	r7, sp, #0
 800300a:	6078      	str	r0, [r7, #4]

	if (htim->Instance == TIM2) {
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003014:	d116      	bne.n	8003044 <HAL_TIM_IC_CaptureCallback+0x40>
		if (pMotor1 == numStep1) {
 8003016:	4b29      	ldr	r3, [pc, #164]	; (80030bc <HAL_TIM_IC_CaptureCallback+0xb8>)
 8003018:	681a      	ldr	r2, [r3, #0]
 800301a:	4b29      	ldr	r3, [pc, #164]	; (80030c0 <HAL_TIM_IC_CaptureCallback+0xbc>)
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	429a      	cmp	r2, r3
 8003020:	d10a      	bne.n	8003038 <HAL_TIM_IC_CaptureCallback+0x34>
			HAL_TIM_PWM_Stop(&htim12, TIM_CHANNEL_1); //Apago el PWM del motor 1
 8003022:	2100      	movs	r1, #0
 8003024:	4827      	ldr	r0, [pc, #156]	; (80030c4 <HAL_TIM_IC_CaptureCallback+0xc0>)
 8003026:	f007 fddb 	bl	800abe0 <HAL_TIM_PWM_Stop>
			FlagTrayectoM1 = 1;
 800302a:	4927      	ldr	r1, [pc, #156]	; (80030c8 <HAL_TIM_IC_CaptureCallback+0xc4>)
 800302c:	f04f 0200 	mov.w	r2, #0
 8003030:	4b26      	ldr	r3, [pc, #152]	; (80030cc <HAL_TIM_IC_CaptureCallback+0xc8>)
 8003032:	e9c1 2300 	strd	r2, r3, [r1]
		} else {
			pMotor3++;
		}

	}
}
 8003036:	e03c      	b.n	80030b2 <HAL_TIM_IC_CaptureCallback+0xae>
			pMotor1++;
 8003038:	4b20      	ldr	r3, [pc, #128]	; (80030bc <HAL_TIM_IC_CaptureCallback+0xb8>)
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	3301      	adds	r3, #1
 800303e:	4a1f      	ldr	r2, [pc, #124]	; (80030bc <HAL_TIM_IC_CaptureCallback+0xb8>)
 8003040:	6013      	str	r3, [r2, #0]
}
 8003042:	e036      	b.n	80030b2 <HAL_TIM_IC_CaptureCallback+0xae>
	} else if (htim->Instance == TIM3) {
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	4a21      	ldr	r2, [pc, #132]	; (80030d0 <HAL_TIM_IC_CaptureCallback+0xcc>)
 800304a:	4293      	cmp	r3, r2
 800304c:	d116      	bne.n	800307c <HAL_TIM_IC_CaptureCallback+0x78>
		if (pMotor2 == numStep2) {
 800304e:	4b21      	ldr	r3, [pc, #132]	; (80030d4 <HAL_TIM_IC_CaptureCallback+0xd0>)
 8003050:	681a      	ldr	r2, [r3, #0]
 8003052:	4b21      	ldr	r3, [pc, #132]	; (80030d8 <HAL_TIM_IC_CaptureCallback+0xd4>)
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	429a      	cmp	r2, r3
 8003058:	d10a      	bne.n	8003070 <HAL_TIM_IC_CaptureCallback+0x6c>
			HAL_TIM_PWM_Stop(&htim13, TIM_CHANNEL_1);//Apago el PWM del motor 1
 800305a:	2100      	movs	r1, #0
 800305c:	481f      	ldr	r0, [pc, #124]	; (80030dc <HAL_TIM_IC_CaptureCallback+0xd8>)
 800305e:	f007 fdbf 	bl	800abe0 <HAL_TIM_PWM_Stop>
			FlagTrayectoM2 = 1;
 8003062:	491f      	ldr	r1, [pc, #124]	; (80030e0 <HAL_TIM_IC_CaptureCallback+0xdc>)
 8003064:	f04f 0200 	mov.w	r2, #0
 8003068:	4b18      	ldr	r3, [pc, #96]	; (80030cc <HAL_TIM_IC_CaptureCallback+0xc8>)
 800306a:	e9c1 2300 	strd	r2, r3, [r1]
}
 800306e:	e020      	b.n	80030b2 <HAL_TIM_IC_CaptureCallback+0xae>
			pMotor2++;
 8003070:	4b18      	ldr	r3, [pc, #96]	; (80030d4 <HAL_TIM_IC_CaptureCallback+0xd0>)
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	3301      	adds	r3, #1
 8003076:	4a17      	ldr	r2, [pc, #92]	; (80030d4 <HAL_TIM_IC_CaptureCallback+0xd0>)
 8003078:	6013      	str	r3, [r2, #0]
}
 800307a:	e01a      	b.n	80030b2 <HAL_TIM_IC_CaptureCallback+0xae>
	} else if (htim->Instance == TIM4) {
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	4a18      	ldr	r2, [pc, #96]	; (80030e4 <HAL_TIM_IC_CaptureCallback+0xe0>)
 8003082:	4293      	cmp	r3, r2
 8003084:	d115      	bne.n	80030b2 <HAL_TIM_IC_CaptureCallback+0xae>
		if (pMotor3 == numStep3) {
 8003086:	4b18      	ldr	r3, [pc, #96]	; (80030e8 <HAL_TIM_IC_CaptureCallback+0xe4>)
 8003088:	681a      	ldr	r2, [r3, #0]
 800308a:	4b18      	ldr	r3, [pc, #96]	; (80030ec <HAL_TIM_IC_CaptureCallback+0xe8>)
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	429a      	cmp	r2, r3
 8003090:	d10a      	bne.n	80030a8 <HAL_TIM_IC_CaptureCallback+0xa4>
			HAL_TIM_PWM_Stop(&htim14, TIM_CHANNEL_1);//Apago el PWM del motor 1
 8003092:	2100      	movs	r1, #0
 8003094:	4816      	ldr	r0, [pc, #88]	; (80030f0 <HAL_TIM_IC_CaptureCallback+0xec>)
 8003096:	f007 fda3 	bl	800abe0 <HAL_TIM_PWM_Stop>
			FlagTrayectoM3 = 1;
 800309a:	4916      	ldr	r1, [pc, #88]	; (80030f4 <HAL_TIM_IC_CaptureCallback+0xf0>)
 800309c:	f04f 0200 	mov.w	r2, #0
 80030a0:	4b0a      	ldr	r3, [pc, #40]	; (80030cc <HAL_TIM_IC_CaptureCallback+0xc8>)
 80030a2:	e9c1 2300 	strd	r2, r3, [r1]
}
 80030a6:	e004      	b.n	80030b2 <HAL_TIM_IC_CaptureCallback+0xae>
			pMotor3++;
 80030a8:	4b0f      	ldr	r3, [pc, #60]	; (80030e8 <HAL_TIM_IC_CaptureCallback+0xe4>)
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	3301      	adds	r3, #1
 80030ae:	4a0e      	ldr	r2, [pc, #56]	; (80030e8 <HAL_TIM_IC_CaptureCallback+0xe4>)
 80030b0:	6013      	str	r3, [r2, #0]
}
 80030b2:	bf00      	nop
 80030b4:	3708      	adds	r7, #8
 80030b6:	46bd      	mov	sp, r7
 80030b8:	bd80      	pop	{r7, pc}
 80030ba:	bf00      	nop
 80030bc:	240003a0 	.word	0x240003a0
 80030c0:	240003ac 	.word	0x240003ac
 80030c4:	240006bc 	.word	0x240006bc
 80030c8:	24000490 	.word	0x24000490
 80030cc:	3ff00000 	.word	0x3ff00000
 80030d0:	40000400 	.word	0x40000400
 80030d4:	240003a4 	.word	0x240003a4
 80030d8:	240003b0 	.word	0x240003b0
 80030dc:	24000708 	.word	0x24000708
 80030e0:	24000498 	.word	0x24000498
 80030e4:	40000800 	.word	0x40000800
 80030e8:	240003a8 	.word	0x240003a8
 80030ec:	240003b4 	.word	0x240003b4
 80030f0:	24000754 	.word	0x24000754
 80030f4:	24000008 	.word	0x24000008

080030f8 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80030f8:	b580      	push	{r7, lr}
 80030fa:	b082      	sub	sp, #8
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	6078      	str	r0, [r7, #4]
	if (htim == &htim15) {  //Timer que actualiza curva de velocidad
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	4a91      	ldr	r2, [pc, #580]	; (8003348 <HAL_TIM_PeriodElapsedCallback+0x250>)
 8003104:	4293      	cmp	r3, r2
 8003106:	f040 8110 	bne.w	800332a <HAL_TIM_PeriodElapsedCallback+0x232>
		if (FlagTrayectoM1 == 1 && FlagTrayectoM2 == 1 && FlagTrayectoM3 == 1) {
 800310a:	4b90      	ldr	r3, [pc, #576]	; (800334c <HAL_TIM_PeriodElapsedCallback+0x254>)
 800310c:	ed93 7b00 	vldr	d7, [r3]
 8003110:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8003114:	eeb4 7b46 	vcmp.f64	d7, d6
 8003118:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800311c:	d12d      	bne.n	800317a <HAL_TIM_PeriodElapsedCallback+0x82>
 800311e:	4b8c      	ldr	r3, [pc, #560]	; (8003350 <HAL_TIM_PeriodElapsedCallback+0x258>)
 8003120:	ed93 7b00 	vldr	d7, [r3]
 8003124:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8003128:	eeb4 7b46 	vcmp.f64	d7, d6
 800312c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003130:	d123      	bne.n	800317a <HAL_TIM_PeriodElapsedCallback+0x82>
 8003132:	4b88      	ldr	r3, [pc, #544]	; (8003354 <HAL_TIM_PeriodElapsedCallback+0x25c>)
 8003134:	ed93 7b00 	vldr	d7, [r3]
 8003138:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800313c:	eeb4 7b46 	vcmp.f64	d7, d6
 8003140:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003144:	d119      	bne.n	800317a <HAL_TIM_PeriodElapsedCallback+0x82>
			HAL_TIM_Base_Stop_IT(&htim15);
 8003146:	4880      	ldr	r0, [pc, #512]	; (8003348 <HAL_TIM_PeriodElapsedCallback+0x250>)
 8003148:	f007 fbac 	bl	800a8a4 <HAL_TIM_Base_Stop_IT>
			HAL_TIM_Base_Stop(&htim5);
 800314c:	4882      	ldr	r0, [pc, #520]	; (8003358 <HAL_TIM_PeriodElapsedCallback+0x260>)
 800314e:	f007 fb09 	bl	800a764 <HAL_TIM_Base_Stop>
			Pini.x = Pfin.x;
 8003152:	4b82      	ldr	r3, [pc, #520]	; (800335c <HAL_TIM_PeriodElapsedCallback+0x264>)
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	4a82      	ldr	r2, [pc, #520]	; (8003360 <HAL_TIM_PeriodElapsedCallback+0x268>)
 8003158:	6013      	str	r3, [r2, #0]
			Pini.y = Pfin.y;
 800315a:	4b80      	ldr	r3, [pc, #512]	; (800335c <HAL_TIM_PeriodElapsedCallback+0x264>)
 800315c:	685b      	ldr	r3, [r3, #4]
 800315e:	4a80      	ldr	r2, [pc, #512]	; (8003360 <HAL_TIM_PeriodElapsedCallback+0x268>)
 8003160:	6053      	str	r3, [r2, #4]
			Pini.z = Pfin.z;
 8003162:	4b7e      	ldr	r3, [pc, #504]	; (800335c <HAL_TIM_PeriodElapsedCallback+0x264>)
 8003164:	689b      	ldr	r3, [r3, #8]
 8003166:	4a7e      	ldr	r2, [pc, #504]	; (8003360 <HAL_TIM_PeriodElapsedCallback+0x268>)
 8003168:	6093      	str	r3, [r2, #8]
			mandalemecha = 0;
 800316a:	497e      	ldr	r1, [pc, #504]	; (8003364 <HAL_TIM_PeriodElapsedCallback+0x26c>)
 800316c:	f04f 0200 	mov.w	r2, #0
 8003170:	f04f 0300 	mov.w	r3, #0
 8003174:	e9c1 2300 	strd	r2, r3, [r1]
				HAL_TIM_PWM_Start(&htim13, TIM_CHANNEL_1);	// Activar generacion de pwm
				HAL_TIM_PWM_Start(&htim14, TIM_CHANNEL_1);	// Activar generacion de pwm
			}
		}
	}
}
 8003178:	e0d7      	b.n	800332a <HAL_TIM_PeriodElapsedCallback+0x232>
			if (!FlagTiempo) {
 800317a:	4b7b      	ldr	r3, [pc, #492]	; (8003368 <HAL_TIM_PeriodElapsedCallback+0x270>)
 800317c:	781b      	ldrb	r3, [r3, #0]
 800317e:	2b00      	cmp	r3, #0
 8003180:	d105      	bne.n	800318e <HAL_TIM_PeriodElapsedCallback+0x96>
				FlagTiempo = 1;
 8003182:	4b79      	ldr	r3, [pc, #484]	; (8003368 <HAL_TIM_PeriodElapsedCallback+0x270>)
 8003184:	2201      	movs	r2, #1
 8003186:	701a      	strb	r2, [r3, #0]
				TIM5->CNT = 0;	// comienzo a contabilizar el tiempo recien acá
 8003188:	4b78      	ldr	r3, [pc, #480]	; (800336c <HAL_TIM_PeriodElapsedCallback+0x274>)
 800318a:	2200      	movs	r2, #0
 800318c:	625a      	str	r2, [r3, #36]	; 0x24
			Tiempo = (((double) (TIM5->CNT)) * ((double)(TIM5->PSC + 1) / 64000000.0));
 800318e:	4b77      	ldr	r3, [pc, #476]	; (800336c <HAL_TIM_PeriodElapsedCallback+0x274>)
 8003190:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003192:	ee07 3a90 	vmov	s15, r3
 8003196:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 800319a:	4b74      	ldr	r3, [pc, #464]	; (800336c <HAL_TIM_PeriodElapsedCallback+0x274>)
 800319c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800319e:	3301      	adds	r3, #1
 80031a0:	ee07 3a90 	vmov	s15, r3
 80031a4:	eeb8 5b67 	vcvt.f64.u32	d5, s15
 80031a8:	ed9f 4b63 	vldr	d4, [pc, #396]	; 8003338 <HAL_TIM_PeriodElapsedCallback+0x240>
 80031ac:	ee85 7b04 	vdiv.f64	d7, d5, d4
 80031b0:	ee26 7b07 	vmul.f64	d7, d6, d7
 80031b4:	4b6e      	ldr	r3, [pc, #440]	; (8003370 <HAL_TIM_PeriodElapsedCallback+0x278>)
 80031b6:	ed83 7b00 	vstr	d7, [r3]
			obtenerVelCurva(Tiempo);
 80031ba:	4b6d      	ldr	r3, [pc, #436]	; (8003370 <HAL_TIM_PeriodElapsedCallback+0x278>)
 80031bc:	ed93 7b00 	vldr	d7, [r3]
 80031c0:	eeb0 0b47 	vmov.f64	d0, d7
 80031c4:	f002 f9c6 	bl	8005554 <obtenerVelCurva>
			Recta3D[0] = Pini.x + X * vDirector[0];
 80031c8:	4b65      	ldr	r3, [pc, #404]	; (8003360 <HAL_TIM_PeriodElapsedCallback+0x268>)
 80031ca:	edd3 7a00 	vldr	s15, [r3]
 80031ce:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 80031d2:	4b68      	ldr	r3, [pc, #416]	; (8003374 <HAL_TIM_PeriodElapsedCallback+0x27c>)
 80031d4:	edd3 7a00 	vldr	s15, [r3]
 80031d8:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 80031dc:	4b66      	ldr	r3, [pc, #408]	; (8003378 <HAL_TIM_PeriodElapsedCallback+0x280>)
 80031de:	ed93 7b00 	vldr	d7, [r3]
 80031e2:	ee25 7b07 	vmul.f64	d7, d5, d7
 80031e6:	ee36 7b07 	vadd.f64	d7, d6, d7
 80031ea:	4b64      	ldr	r3, [pc, #400]	; (800337c <HAL_TIM_PeriodElapsedCallback+0x284>)
 80031ec:	ed83 7b00 	vstr	d7, [r3]
			Recta3D[1] = Pini.y + X * vDirector[1];
 80031f0:	4b5b      	ldr	r3, [pc, #364]	; (8003360 <HAL_TIM_PeriodElapsedCallback+0x268>)
 80031f2:	edd3 7a01 	vldr	s15, [r3, #4]
 80031f6:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 80031fa:	4b5e      	ldr	r3, [pc, #376]	; (8003374 <HAL_TIM_PeriodElapsedCallback+0x27c>)
 80031fc:	edd3 7a01 	vldr	s15, [r3, #4]
 8003200:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 8003204:	4b5c      	ldr	r3, [pc, #368]	; (8003378 <HAL_TIM_PeriodElapsedCallback+0x280>)
 8003206:	ed93 7b00 	vldr	d7, [r3]
 800320a:	ee25 7b07 	vmul.f64	d7, d5, d7
 800320e:	ee36 7b07 	vadd.f64	d7, d6, d7
 8003212:	4b5a      	ldr	r3, [pc, #360]	; (800337c <HAL_TIM_PeriodElapsedCallback+0x284>)
 8003214:	ed83 7b02 	vstr	d7, [r3, #8]
			Recta3D[2] = Pini.z + X * vDirector[2];
 8003218:	4b51      	ldr	r3, [pc, #324]	; (8003360 <HAL_TIM_PeriodElapsedCallback+0x268>)
 800321a:	edd3 7a02 	vldr	s15, [r3, #8]
 800321e:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8003222:	4b54      	ldr	r3, [pc, #336]	; (8003374 <HAL_TIM_PeriodElapsedCallback+0x27c>)
 8003224:	edd3 7a02 	vldr	s15, [r3, #8]
 8003228:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 800322c:	4b52      	ldr	r3, [pc, #328]	; (8003378 <HAL_TIM_PeriodElapsedCallback+0x280>)
 800322e:	ed93 7b00 	vldr	d7, [r3]
 8003232:	ee25 7b07 	vmul.f64	d7, d5, d7
 8003236:	ee36 7b07 	vadd.f64	d7, d6, d7
 800323a:	4b50      	ldr	r3, [pc, #320]	; (800337c <HAL_TIM_PeriodElapsedCallback+0x284>)
 800323c:	ed83 7b04 	vstr	d7, [r3, #16]
			dRecta3D[0] = 0 + DX * vDirector[0];
 8003240:	4b4c      	ldr	r3, [pc, #304]	; (8003374 <HAL_TIM_PeriodElapsedCallback+0x27c>)
 8003242:	edd3 7a00 	vldr	s15, [r3]
 8003246:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 800324a:	4b4d      	ldr	r3, [pc, #308]	; (8003380 <HAL_TIM_PeriodElapsedCallback+0x288>)
 800324c:	ed93 7b00 	vldr	d7, [r3]
 8003250:	ee26 7b07 	vmul.f64	d7, d6, d7
 8003254:	ed9f 6b3a 	vldr	d6, [pc, #232]	; 8003340 <HAL_TIM_PeriodElapsedCallback+0x248>
 8003258:	ee37 7b06 	vadd.f64	d7, d7, d6
 800325c:	4b49      	ldr	r3, [pc, #292]	; (8003384 <HAL_TIM_PeriodElapsedCallback+0x28c>)
 800325e:	ed83 7b00 	vstr	d7, [r3]
			dRecta3D[1] = 0 + DX * vDirector[1];
 8003262:	4b44      	ldr	r3, [pc, #272]	; (8003374 <HAL_TIM_PeriodElapsedCallback+0x27c>)
 8003264:	edd3 7a01 	vldr	s15, [r3, #4]
 8003268:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 800326c:	4b44      	ldr	r3, [pc, #272]	; (8003380 <HAL_TIM_PeriodElapsedCallback+0x288>)
 800326e:	ed93 7b00 	vldr	d7, [r3]
 8003272:	ee26 7b07 	vmul.f64	d7, d6, d7
 8003276:	ed9f 6b32 	vldr	d6, [pc, #200]	; 8003340 <HAL_TIM_PeriodElapsedCallback+0x248>
 800327a:	ee37 7b06 	vadd.f64	d7, d7, d6
 800327e:	4b41      	ldr	r3, [pc, #260]	; (8003384 <HAL_TIM_PeriodElapsedCallback+0x28c>)
 8003280:	ed83 7b02 	vstr	d7, [r3, #8]
			dRecta3D[2] = 0 + DX * vDirector[2];
 8003284:	4b3b      	ldr	r3, [pc, #236]	; (8003374 <HAL_TIM_PeriodElapsedCallback+0x27c>)
 8003286:	edd3 7a02 	vldr	s15, [r3, #8]
 800328a:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 800328e:	4b3c      	ldr	r3, [pc, #240]	; (8003380 <HAL_TIM_PeriodElapsedCallback+0x288>)
 8003290:	ed93 7b00 	vldr	d7, [r3]
 8003294:	ee26 7b07 	vmul.f64	d7, d6, d7
 8003298:	ed9f 6b29 	vldr	d6, [pc, #164]	; 8003340 <HAL_TIM_PeriodElapsedCallback+0x248>
 800329c:	ee37 7b06 	vadd.f64	d7, d7, d6
 80032a0:	4b38      	ldr	r3, [pc, #224]	; (8003384 <HAL_TIM_PeriodElapsedCallback+0x28c>)
 80032a2:	ed83 7b04 	vstr	d7, [r3, #16]
			dRecta3DZ=dRecta3D[2];
 80032a6:	4b37      	ldr	r3, [pc, #220]	; (8003384 <HAL_TIM_PeriodElapsedCallback+0x28c>)
 80032a8:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80032ac:	4936      	ldr	r1, [pc, #216]	; (8003388 <HAL_TIM_PeriodElapsedCallback+0x290>)
 80032ae:	e9c1 2300 	strd	r2, r3, [r1]
			jacobianoInverso(dRecta3D[0], dRecta3D[1], dRecta3D[2], Recta3D[0], Recta3D[1], Recta3D[2]);
 80032b2:	4b34      	ldr	r3, [pc, #208]	; (8003384 <HAL_TIM_PeriodElapsedCallback+0x28c>)
 80032b4:	ed93 7b00 	vldr	d7, [r3]
 80032b8:	4b32      	ldr	r3, [pc, #200]	; (8003384 <HAL_TIM_PeriodElapsedCallback+0x28c>)
 80032ba:	ed93 6b02 	vldr	d6, [r3, #8]
 80032be:	4b31      	ldr	r3, [pc, #196]	; (8003384 <HAL_TIM_PeriodElapsedCallback+0x28c>)
 80032c0:	ed93 2b04 	vldr	d2, [r3, #16]
 80032c4:	4b2d      	ldr	r3, [pc, #180]	; (800337c <HAL_TIM_PeriodElapsedCallback+0x284>)
 80032c6:	ed93 3b00 	vldr	d3, [r3]
 80032ca:	4b2c      	ldr	r3, [pc, #176]	; (800337c <HAL_TIM_PeriodElapsedCallback+0x284>)
 80032cc:	ed93 4b02 	vldr	d4, [r3, #8]
 80032d0:	4b2a      	ldr	r3, [pc, #168]	; (800337c <HAL_TIM_PeriodElapsedCallback+0x284>)
 80032d2:	ed93 5b04 	vldr	d5, [r3, #16]
 80032d6:	eeb0 1b46 	vmov.f64	d1, d6
 80032da:	eeb0 0b47 	vmov.f64	d0, d7
 80032de:	f002 fccf 	bl	8005c80 <jacobianoInverso>
			SetPerfilTimers(omega[0], omega[1], omega[2]);
 80032e2:	4b2a      	ldr	r3, [pc, #168]	; (800338c <HAL_TIM_PeriodElapsedCallback+0x294>)
 80032e4:	ed93 7b00 	vldr	d7, [r3]
 80032e8:	4b28      	ldr	r3, [pc, #160]	; (800338c <HAL_TIM_PeriodElapsedCallback+0x294>)
 80032ea:	ed93 6b02 	vldr	d6, [r3, #8]
 80032ee:	4b27      	ldr	r3, [pc, #156]	; (800338c <HAL_TIM_PeriodElapsedCallback+0x294>)
 80032f0:	ed93 5b04 	vldr	d5, [r3, #16]
 80032f4:	eeb0 2b45 	vmov.f64	d2, d5
 80032f8:	eeb0 1b46 	vmov.f64	d1, d6
 80032fc:	eeb0 0b47 	vmov.f64	d0, d7
 8003300:	f002 ffe6 	bl	80062d0 <SetPerfilTimers>
			if(Start==1){
 8003304:	4b22      	ldr	r3, [pc, #136]	; (8003390 <HAL_TIM_PeriodElapsedCallback+0x298>)
 8003306:	781b      	ldrb	r3, [r3, #0]
 8003308:	2b01      	cmp	r3, #1
 800330a:	d10e      	bne.n	800332a <HAL_TIM_PeriodElapsedCallback+0x232>
				Start=0;
 800330c:	4b20      	ldr	r3, [pc, #128]	; (8003390 <HAL_TIM_PeriodElapsedCallback+0x298>)
 800330e:	2200      	movs	r2, #0
 8003310:	701a      	strb	r2, [r3, #0]
				HAL_TIM_PWM_Start(&htim12, TIM_CHANNEL_1);	// Activar generacion de pwm
 8003312:	2100      	movs	r1, #0
 8003314:	481f      	ldr	r0, [pc, #124]	; (8003394 <HAL_TIM_PeriodElapsedCallback+0x29c>)
 8003316:	f007 fb55 	bl	800a9c4 <HAL_TIM_PWM_Start>
				HAL_TIM_PWM_Start(&htim13, TIM_CHANNEL_1);	// Activar generacion de pwm
 800331a:	2100      	movs	r1, #0
 800331c:	481e      	ldr	r0, [pc, #120]	; (8003398 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 800331e:	f007 fb51 	bl	800a9c4 <HAL_TIM_PWM_Start>
				HAL_TIM_PWM_Start(&htim14, TIM_CHANNEL_1);	// Activar generacion de pwm
 8003322:	2100      	movs	r1, #0
 8003324:	481d      	ldr	r0, [pc, #116]	; (800339c <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 8003326:	f007 fb4d 	bl	800a9c4 <HAL_TIM_PWM_Start>
}
 800332a:	bf00      	nop
 800332c:	3708      	adds	r7, #8
 800332e:	46bd      	mov	sp, r7
 8003330:	bd80      	pop	{r7, pc}
 8003332:	bf00      	nop
 8003334:	f3af 8000 	nop.w
 8003338:	00000000 	.word	0x00000000
 800333c:	418e8480 	.word	0x418e8480
	...
 8003348:	240007a0 	.word	0x240007a0
 800334c:	24000490 	.word	0x24000490
 8003350:	24000498 	.word	0x24000498
 8003354:	24000008 	.word	0x24000008
 8003358:	24000670 	.word	0x24000670
 800335c:	240003dc 	.word	0x240003dc
 8003360:	240003d0 	.word	0x240003d0
 8003364:	24000530 	.word	0x24000530
 8003368:	2400046c 	.word	0x2400046c
 800336c:	40000c00 	.word	0x40000c00
 8003370:	24000470 	.word	0x24000470
 8003374:	240003ec 	.word	0x240003ec
 8003378:	24000478 	.word	0x24000478
 800337c:	240003f8 	.word	0x240003f8
 8003380:	24000480 	.word	0x24000480
 8003384:	24000410 	.word	0x24000410
 8003388:	24000538 	.word	0x24000538
 800338c:	24000428 	.word	0x24000428
 8003390:	24000528 	.word	0x24000528
 8003394:	240006bc 	.word	0x240006bc
 8003398:	24000708 	.word	0x24000708
 800339c:	24000754 	.word	0x24000754

080033a0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80033a0:	b480      	push	{r7}
 80033a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80033a4:	bf00      	nop
 80033a6:	46bd      	mov	sp, r7
 80033a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ac:	4770      	bx	lr
	...

080033b0 <configStepMotor1>:
double remanente3;
double Periodo;		//periodo de timer PWM
//double ErrorPeriodo;
//double ErrorAcumuladoPeriodo[3];

void configStepMotor1(double angulo) {
 80033b0:	b580      	push	{r7, lr}
 80033b2:	b084      	sub	sp, #16
 80033b4:	af00      	add	r7, sp, #0
 80033b6:	ed87 0b00 	vstr	d0, [r7]
	double anguloDif;
	pMotor1 = 0;
 80033ba:	4b53      	ldr	r3, [pc, #332]	; (8003508 <configStepMotor1+0x158>)
 80033bc:	2200      	movs	r2, #0
 80033be:	601a      	str	r2, [r3, #0]
	if (angulo >= anguloActual1) {
 80033c0:	4b52      	ldr	r3, [pc, #328]	; (800350c <configStepMotor1+0x15c>)
 80033c2:	ed93 7b00 	vldr	d7, [r3]
 80033c6:	ed97 6b00 	vldr	d6, [r7]
 80033ca:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80033ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80033d2:	db22      	blt.n	800341a <configStepMotor1+0x6a>
		if(!(HAL_GPIO_ReadPin(E_EndStop1_Inf_GPIO_Port, E_EndStop1_Inf_Pin))){
 80033d4:	2102      	movs	r1, #2
 80033d6:	484e      	ldr	r0, [pc, #312]	; (8003510 <configStepMotor1+0x160>)
 80033d8:	f004 fd54 	bl	8007e84 <HAL_GPIO_ReadPin>
 80033dc:	4603      	mov	r3, r0
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d106      	bne.n	80033f0 <configStepMotor1+0x40>
			flagErrorEndStop = 1;
 80033e2:	494c      	ldr	r1, [pc, #304]	; (8003514 <configStepMotor1+0x164>)
 80033e4:	f04f 0200 	mov.w	r2, #0
 80033e8:	4b4b      	ldr	r3, [pc, #300]	; (8003518 <configStepMotor1+0x168>)
 80033ea:	e9c1 2300 	strd	r2, r3, [r1]
 80033ee:	e036      	b.n	800345e <configStepMotor1+0xae>
		} else {
			anguloDif = angulo - anguloActual1;	//Calculo cuantos grados se tiene que mover.
 80033f0:	4b46      	ldr	r3, [pc, #280]	; (800350c <configStepMotor1+0x15c>)
 80033f2:	ed93 7b00 	vldr	d7, [r3]
 80033f6:	ed97 6b00 	vldr	d6, [r7]
 80033fa:	ee36 7b47 	vsub.f64	d7, d6, d7
 80033fe:	ed87 7b02 	vstr	d7, [r7, #8]
			anguloActual1 = angulo;
 8003402:	4942      	ldr	r1, [pc, #264]	; (800350c <configStepMotor1+0x15c>)
 8003404:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003408:	e9c1 2300 	strd	r2, r3, [r1]
			HAL_GPIO_WritePin(S_DirPaP1_GPIO_Port, S_DirPaP1_Pin, GPIO_PIN_SET); //Antihorario visto de frente
 800340c:	2201      	movs	r2, #1
 800340e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003412:	4842      	ldr	r0, [pc, #264]	; (800351c <configStepMotor1+0x16c>)
 8003414:	f004 fd4e 	bl	8007eb4 <HAL_GPIO_WritePin>
 8003418:	e021      	b.n	800345e <configStepMotor1+0xae>
		}
	} else {
		if(!(HAL_GPIO_ReadPin(E_EndStop1_Sup_GPIO_Port, E_EndStop1_Sup_Pin))){
 800341a:	2101      	movs	r1, #1
 800341c:	483c      	ldr	r0, [pc, #240]	; (8003510 <configStepMotor1+0x160>)
 800341e:	f004 fd31 	bl	8007e84 <HAL_GPIO_ReadPin>
 8003422:	4603      	mov	r3, r0
 8003424:	2b00      	cmp	r3, #0
 8003426:	d106      	bne.n	8003436 <configStepMotor1+0x86>
			flagErrorEndStop = 1;
 8003428:	493a      	ldr	r1, [pc, #232]	; (8003514 <configStepMotor1+0x164>)
 800342a:	f04f 0200 	mov.w	r2, #0
 800342e:	4b3a      	ldr	r3, [pc, #232]	; (8003518 <configStepMotor1+0x168>)
 8003430:	e9c1 2300 	strd	r2, r3, [r1]
 8003434:	e013      	b.n	800345e <configStepMotor1+0xae>
		} else {
			anguloDif = anguloActual1 - angulo;	//Calculo cuantos grados se tiene que mover.
 8003436:	4b35      	ldr	r3, [pc, #212]	; (800350c <configStepMotor1+0x15c>)
 8003438:	ed93 6b00 	vldr	d6, [r3]
 800343c:	ed97 7b00 	vldr	d7, [r7]
 8003440:	ee36 7b47 	vsub.f64	d7, d6, d7
 8003444:	ed87 7b02 	vstr	d7, [r7, #8]
			anguloActual1 = angulo;
 8003448:	4930      	ldr	r1, [pc, #192]	; (800350c <configStepMotor1+0x15c>)
 800344a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800344e:	e9c1 2300 	strd	r2, r3, [r1]
			HAL_GPIO_WritePin(S_DirPaP1_GPIO_Port, S_DirPaP1_Pin, GPIO_PIN_RESET); // Horario visto de frente
 8003452:	2200      	movs	r2, #0
 8003454:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003458:	4830      	ldr	r0, [pc, #192]	; (800351c <configStepMotor1+0x16c>)
 800345a:	f004 fd2b 	bl	8007eb4 <HAL_GPIO_WritePin>
		}

	}
	// Calculo el error de posicion por casteo a int, y cuando supera la unidad lo compenzo------
	calculoStep1 = (anguloDif * stepRev * reductor) / 360; // Almaceno el remante de los numeros de pasos y
 800345e:	ed97 7b02 	vldr	d7, [r7, #8]
 8003462:	ed9f 6b25 	vldr	d6, [pc, #148]	; 80034f8 <configStepMotor1+0x148>
 8003466:	ee27 7b06 	vmul.f64	d7, d7, d6
 800346a:	eeb1 6b08 	vmov.f64	d6, #24	; 0x40c00000  6.0
 800346e:	ee27 6b06 	vmul.f64	d6, d7, d6
 8003472:	ed9f 5b23 	vldr	d5, [pc, #140]	; 8003500 <configStepMotor1+0x150>
 8003476:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800347a:	4b29      	ldr	r3, [pc, #164]	; (8003520 <configStepMotor1+0x170>)
 800347c:	ed83 7b00 	vstr	d7, [r3]
	numStep1 = (uint32_t) calculoStep1;	// cuando pasa la unidad lo sumo al numero de pasos para
 8003480:	4b27      	ldr	r3, [pc, #156]	; (8003520 <configStepMotor1+0x170>)
 8003482:	ed93 7b00 	vldr	d7, [r3]
 8003486:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800348a:	ee17 2a90 	vmov	r2, s15
 800348e:	4b25      	ldr	r3, [pc, #148]	; (8003524 <configStepMotor1+0x174>)
 8003490:	601a      	str	r2, [r3, #0]
	remanente1 = remanente1 + (calculoStep1 - numStep1);// que el error no se amplifique.
 8003492:	4b23      	ldr	r3, [pc, #140]	; (8003520 <configStepMotor1+0x170>)
 8003494:	ed93 6b00 	vldr	d6, [r3]
 8003498:	4b22      	ldr	r3, [pc, #136]	; (8003524 <configStepMotor1+0x174>)
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	ee07 3a90 	vmov	s15, r3
 80034a0:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80034a4:	ee36 6b47 	vsub.f64	d6, d6, d7
 80034a8:	4b1f      	ldr	r3, [pc, #124]	; (8003528 <configStepMotor1+0x178>)
 80034aa:	ed93 7b00 	vldr	d7, [r3]
 80034ae:	ee36 7b07 	vadd.f64	d7, d6, d7
 80034b2:	4b1d      	ldr	r3, [pc, #116]	; (8003528 <configStepMotor1+0x178>)
 80034b4:	ed83 7b00 	vstr	d7, [r3]
	if (remanente1 >= 1) {
 80034b8:	4b1b      	ldr	r3, [pc, #108]	; (8003528 <configStepMotor1+0x178>)
 80034ba:	ed93 7b00 	vldr	d7, [r3]
 80034be:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 80034c2:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80034c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80034ca:	da00      	bge.n	80034ce <configStepMotor1+0x11e>
		remanente1 = remanente1 - 1;
		numStep1 = numStep1 + 1;
	}
}
 80034cc:	e00e      	b.n	80034ec <configStepMotor1+0x13c>
		remanente1 = remanente1 - 1;
 80034ce:	4b16      	ldr	r3, [pc, #88]	; (8003528 <configStepMotor1+0x178>)
 80034d0:	ed93 7b00 	vldr	d7, [r3]
 80034d4:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 80034d8:	ee37 7b46 	vsub.f64	d7, d7, d6
 80034dc:	4b12      	ldr	r3, [pc, #72]	; (8003528 <configStepMotor1+0x178>)
 80034de:	ed83 7b00 	vstr	d7, [r3]
		numStep1 = numStep1 + 1;
 80034e2:	4b10      	ldr	r3, [pc, #64]	; (8003524 <configStepMotor1+0x174>)
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	3301      	adds	r3, #1
 80034e8:	4a0e      	ldr	r2, [pc, #56]	; (8003524 <configStepMotor1+0x174>)
 80034ea:	6013      	str	r3, [r2, #0]
}
 80034ec:	bf00      	nop
 80034ee:	3710      	adds	r7, #16
 80034f0:	46bd      	mov	sp, r7
 80034f2:	bd80      	pop	{r7, pc}
 80034f4:	f3af 8000 	nop.w
 80034f8:	00000000 	.word	0x00000000
 80034fc:	40990000 	.word	0x40990000
 8003500:	00000000 	.word	0x00000000
 8003504:	40768000 	.word	0x40768000
 8003508:	240003a0 	.word	0x240003a0
 800350c:	24000540 	.word	0x24000540
 8003510:	58021000 	.word	0x58021000
 8003514:	240004d8 	.word	0x240004d8
 8003518:	3ff00000 	.word	0x3ff00000
 800351c:	58020800 	.word	0x58020800
 8003520:	24000558 	.word	0x24000558
 8003524:	240003ac 	.word	0x240003ac
 8003528:	24000570 	.word	0x24000570
 800352c:	00000000 	.word	0x00000000

08003530 <configStepMotor2>:

void configStepMotor2(double angulo) {
 8003530:	b580      	push	{r7, lr}
 8003532:	b084      	sub	sp, #16
 8003534:	af00      	add	r7, sp, #0
 8003536:	ed87 0b00 	vstr	d0, [r7]
	double anguloDif;
	pMotor2 = 0;
 800353a:	4b53      	ldr	r3, [pc, #332]	; (8003688 <configStepMotor2+0x158>)
 800353c:	2200      	movs	r2, #0
 800353e:	601a      	str	r2, [r3, #0]
	if (angulo >= anguloActual2) {
 8003540:	4b52      	ldr	r3, [pc, #328]	; (800368c <configStepMotor2+0x15c>)
 8003542:	ed93 7b00 	vldr	d7, [r3]
 8003546:	ed97 6b00 	vldr	d6, [r7]
 800354a:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800354e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003552:	db22      	blt.n	800359a <configStepMotor2+0x6a>
		if(!(HAL_GPIO_ReadPin(E_EndStop2_Inf_GPIO_Port, E_EndStop2_Inf_Pin))){
 8003554:	2108      	movs	r1, #8
 8003556:	484e      	ldr	r0, [pc, #312]	; (8003690 <configStepMotor2+0x160>)
 8003558:	f004 fc94 	bl	8007e84 <HAL_GPIO_ReadPin>
 800355c:	4603      	mov	r3, r0
 800355e:	2b00      	cmp	r3, #0
 8003560:	d106      	bne.n	8003570 <configStepMotor2+0x40>
			flagErrorEndStop = 1;
 8003562:	494c      	ldr	r1, [pc, #304]	; (8003694 <configStepMotor2+0x164>)
 8003564:	f04f 0200 	mov.w	r2, #0
 8003568:	4b4b      	ldr	r3, [pc, #300]	; (8003698 <configStepMotor2+0x168>)
 800356a:	e9c1 2300 	strd	r2, r3, [r1]
 800356e:	e036      	b.n	80035de <configStepMotor2+0xae>
		} else {
			anguloDif = angulo - anguloActual2;	//Calculo cuantos grados se tiene que mover.
 8003570:	4b46      	ldr	r3, [pc, #280]	; (800368c <configStepMotor2+0x15c>)
 8003572:	ed93 7b00 	vldr	d7, [r3]
 8003576:	ed97 6b00 	vldr	d6, [r7]
 800357a:	ee36 7b47 	vsub.f64	d7, d6, d7
 800357e:	ed87 7b02 	vstr	d7, [r7, #8]
			anguloActual2 = angulo;
 8003582:	4942      	ldr	r1, [pc, #264]	; (800368c <configStepMotor2+0x15c>)
 8003584:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003588:	e9c1 2300 	strd	r2, r3, [r1]
			HAL_GPIO_WritePin(S_DirPaP2_GPIO_Port, S_DirPaP2_Pin, GPIO_PIN_SET); // VERIFICAR SENTIDO DE GIRO
 800358c:	2201      	movs	r2, #1
 800358e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003592:	4842      	ldr	r0, [pc, #264]	; (800369c <configStepMotor2+0x16c>)
 8003594:	f004 fc8e 	bl	8007eb4 <HAL_GPIO_WritePin>
 8003598:	e021      	b.n	80035de <configStepMotor2+0xae>
		}
	} else {
		if(!(HAL_GPIO_ReadPin(E_EndStop2_Sup_GPIO_Port, E_EndStop2_Sup_Pin))){
 800359a:	2104      	movs	r1, #4
 800359c:	483c      	ldr	r0, [pc, #240]	; (8003690 <configStepMotor2+0x160>)
 800359e:	f004 fc71 	bl	8007e84 <HAL_GPIO_ReadPin>
 80035a2:	4603      	mov	r3, r0
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d106      	bne.n	80035b6 <configStepMotor2+0x86>
			flagErrorEndStop = 1;
 80035a8:	493a      	ldr	r1, [pc, #232]	; (8003694 <configStepMotor2+0x164>)
 80035aa:	f04f 0200 	mov.w	r2, #0
 80035ae:	4b3a      	ldr	r3, [pc, #232]	; (8003698 <configStepMotor2+0x168>)
 80035b0:	e9c1 2300 	strd	r2, r3, [r1]
 80035b4:	e013      	b.n	80035de <configStepMotor2+0xae>
		} else {
			anguloDif = anguloActual2 - angulo;	//Calculo cuantos grados se tiene que mover.
 80035b6:	4b35      	ldr	r3, [pc, #212]	; (800368c <configStepMotor2+0x15c>)
 80035b8:	ed93 6b00 	vldr	d6, [r3]
 80035bc:	ed97 7b00 	vldr	d7, [r7]
 80035c0:	ee36 7b47 	vsub.f64	d7, d6, d7
 80035c4:	ed87 7b02 	vstr	d7, [r7, #8]
			anguloActual2 = angulo;
 80035c8:	4930      	ldr	r1, [pc, #192]	; (800368c <configStepMotor2+0x15c>)
 80035ca:	e9d7 2300 	ldrd	r2, r3, [r7]
 80035ce:	e9c1 2300 	strd	r2, r3, [r1]
			HAL_GPIO_WritePin(S_DirPaP2_GPIO_Port, S_DirPaP2_Pin, GPIO_PIN_RESET); // VERIFICAR SENTIDO DE GIRO
 80035d2:	2200      	movs	r2, #0
 80035d4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80035d8:	4830      	ldr	r0, [pc, #192]	; (800369c <configStepMotor2+0x16c>)
 80035da:	f004 fc6b 	bl	8007eb4 <HAL_GPIO_WritePin>
		}

	}
	// Calculo el error de posicion por casteo a int, y cuando supera la unidad lo compenzo------
	calculoStep2 = (anguloDif * stepRev * reductor) / 360; // Almaceno el remante de los numeros de pasos y
 80035de:	ed97 7b02 	vldr	d7, [r7, #8]
 80035e2:	ed9f 6b25 	vldr	d6, [pc, #148]	; 8003678 <configStepMotor2+0x148>
 80035e6:	ee27 7b06 	vmul.f64	d7, d7, d6
 80035ea:	eeb1 6b08 	vmov.f64	d6, #24	; 0x40c00000  6.0
 80035ee:	ee27 6b06 	vmul.f64	d6, d7, d6
 80035f2:	ed9f 5b23 	vldr	d5, [pc, #140]	; 8003680 <configStepMotor2+0x150>
 80035f6:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80035fa:	4b29      	ldr	r3, [pc, #164]	; (80036a0 <configStepMotor2+0x170>)
 80035fc:	ed83 7b00 	vstr	d7, [r3]
	numStep2 = (uint32_t) calculoStep2;	// cuando pasa la unidad lo sumo al numero de pasos para
 8003600:	4b27      	ldr	r3, [pc, #156]	; (80036a0 <configStepMotor2+0x170>)
 8003602:	ed93 7b00 	vldr	d7, [r3]
 8003606:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800360a:	ee17 2a90 	vmov	r2, s15
 800360e:	4b25      	ldr	r3, [pc, #148]	; (80036a4 <configStepMotor2+0x174>)
 8003610:	601a      	str	r2, [r3, #0]
	remanente2 = remanente2 + (calculoStep2 - numStep2);// que el error no se amplifique.
 8003612:	4b23      	ldr	r3, [pc, #140]	; (80036a0 <configStepMotor2+0x170>)
 8003614:	ed93 6b00 	vldr	d6, [r3]
 8003618:	4b22      	ldr	r3, [pc, #136]	; (80036a4 <configStepMotor2+0x174>)
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	ee07 3a90 	vmov	s15, r3
 8003620:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8003624:	ee36 6b47 	vsub.f64	d6, d6, d7
 8003628:	4b1f      	ldr	r3, [pc, #124]	; (80036a8 <configStepMotor2+0x178>)
 800362a:	ed93 7b00 	vldr	d7, [r3]
 800362e:	ee36 7b07 	vadd.f64	d7, d6, d7
 8003632:	4b1d      	ldr	r3, [pc, #116]	; (80036a8 <configStepMotor2+0x178>)
 8003634:	ed83 7b00 	vstr	d7, [r3]
	if (remanente2 >= 1) {
 8003638:	4b1b      	ldr	r3, [pc, #108]	; (80036a8 <configStepMotor2+0x178>)
 800363a:	ed93 7b00 	vldr	d7, [r3]
 800363e:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8003642:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8003646:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800364a:	da00      	bge.n	800364e <configStepMotor2+0x11e>
		remanente2 = remanente2 - 1;
		numStep2 = numStep2 + 1;
	}
}
 800364c:	e00e      	b.n	800366c <configStepMotor2+0x13c>
		remanente2 = remanente2 - 1;
 800364e:	4b16      	ldr	r3, [pc, #88]	; (80036a8 <configStepMotor2+0x178>)
 8003650:	ed93 7b00 	vldr	d7, [r3]
 8003654:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8003658:	ee37 7b46 	vsub.f64	d7, d7, d6
 800365c:	4b12      	ldr	r3, [pc, #72]	; (80036a8 <configStepMotor2+0x178>)
 800365e:	ed83 7b00 	vstr	d7, [r3]
		numStep2 = numStep2 + 1;
 8003662:	4b10      	ldr	r3, [pc, #64]	; (80036a4 <configStepMotor2+0x174>)
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	3301      	adds	r3, #1
 8003668:	4a0e      	ldr	r2, [pc, #56]	; (80036a4 <configStepMotor2+0x174>)
 800366a:	6013      	str	r3, [r2, #0]
}
 800366c:	bf00      	nop
 800366e:	3710      	adds	r7, #16
 8003670:	46bd      	mov	sp, r7
 8003672:	bd80      	pop	{r7, pc}
 8003674:	f3af 8000 	nop.w
 8003678:	00000000 	.word	0x00000000
 800367c:	40990000 	.word	0x40990000
 8003680:	00000000 	.word	0x00000000
 8003684:	40768000 	.word	0x40768000
 8003688:	240003a4 	.word	0x240003a4
 800368c:	24000548 	.word	0x24000548
 8003690:	58021000 	.word	0x58021000
 8003694:	240004d8 	.word	0x240004d8
 8003698:	3ff00000 	.word	0x3ff00000
 800369c:	58020800 	.word	0x58020800
 80036a0:	24000560 	.word	0x24000560
 80036a4:	240003b0 	.word	0x240003b0
 80036a8:	24000578 	.word	0x24000578
 80036ac:	00000000 	.word	0x00000000

080036b0 <configStepMotor3>:

void configStepMotor3(double angulo) {
 80036b0:	b580      	push	{r7, lr}
 80036b2:	b084      	sub	sp, #16
 80036b4:	af00      	add	r7, sp, #0
 80036b6:	ed87 0b00 	vstr	d0, [r7]
	double anguloDif;
	pMotor3 = 0;
 80036ba:	4b53      	ldr	r3, [pc, #332]	; (8003808 <configStepMotor3+0x158>)
 80036bc:	2200      	movs	r2, #0
 80036be:	601a      	str	r2, [r3, #0]
	if (angulo >= anguloActual3) {
 80036c0:	4b52      	ldr	r3, [pc, #328]	; (800380c <configStepMotor3+0x15c>)
 80036c2:	ed93 7b00 	vldr	d7, [r3]
 80036c6:	ed97 6b00 	vldr	d6, [r7]
 80036ca:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80036ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80036d2:	db22      	blt.n	800371a <configStepMotor3+0x6a>
		if(!(HAL_GPIO_ReadPin(E_EndStop3_Inf_GPIO_Port, E_EndStop3_Inf_Pin))){
 80036d4:	2120      	movs	r1, #32
 80036d6:	484e      	ldr	r0, [pc, #312]	; (8003810 <configStepMotor3+0x160>)
 80036d8:	f004 fbd4 	bl	8007e84 <HAL_GPIO_ReadPin>
 80036dc:	4603      	mov	r3, r0
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d106      	bne.n	80036f0 <configStepMotor3+0x40>
			flagErrorEndStop = 1;
 80036e2:	494c      	ldr	r1, [pc, #304]	; (8003814 <configStepMotor3+0x164>)
 80036e4:	f04f 0200 	mov.w	r2, #0
 80036e8:	4b4b      	ldr	r3, [pc, #300]	; (8003818 <configStepMotor3+0x168>)
 80036ea:	e9c1 2300 	strd	r2, r3, [r1]
 80036ee:	e036      	b.n	800375e <configStepMotor3+0xae>
		} else {
			anguloDif = angulo - anguloActual3;	//Calculo cuantos grados se tiene que mover.
 80036f0:	4b46      	ldr	r3, [pc, #280]	; (800380c <configStepMotor3+0x15c>)
 80036f2:	ed93 7b00 	vldr	d7, [r3]
 80036f6:	ed97 6b00 	vldr	d6, [r7]
 80036fa:	ee36 7b47 	vsub.f64	d7, d6, d7
 80036fe:	ed87 7b02 	vstr	d7, [r7, #8]
			anguloActual3 = angulo;
 8003702:	4942      	ldr	r1, [pc, #264]	; (800380c <configStepMotor3+0x15c>)
 8003704:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003708:	e9c1 2300 	strd	r2, r3, [r1]
			HAL_GPIO_WritePin(S_DirPaP3_GPIO_Port, S_DirPaP3_Pin, GPIO_PIN_SET); // Brazo Baja (Antihorario)
 800370c:	2201      	movs	r2, #1
 800370e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003712:	4842      	ldr	r0, [pc, #264]	; (800381c <configStepMotor3+0x16c>)
 8003714:	f004 fbce 	bl	8007eb4 <HAL_GPIO_WritePin>
 8003718:	e021      	b.n	800375e <configStepMotor3+0xae>
		}
	} else {
		if(!(HAL_GPIO_ReadPin(E_EndStop3_Inf_GPIO_Port, E_EndStop3_Inf_Pin))){
 800371a:	2120      	movs	r1, #32
 800371c:	483c      	ldr	r0, [pc, #240]	; (8003810 <configStepMotor3+0x160>)
 800371e:	f004 fbb1 	bl	8007e84 <HAL_GPIO_ReadPin>
 8003722:	4603      	mov	r3, r0
 8003724:	2b00      	cmp	r3, #0
 8003726:	d106      	bne.n	8003736 <configStepMotor3+0x86>
					flagErrorEndStop = 1;
 8003728:	493a      	ldr	r1, [pc, #232]	; (8003814 <configStepMotor3+0x164>)
 800372a:	f04f 0200 	mov.w	r2, #0
 800372e:	4b3a      	ldr	r3, [pc, #232]	; (8003818 <configStepMotor3+0x168>)
 8003730:	e9c1 2300 	strd	r2, r3, [r1]
 8003734:	e013      	b.n	800375e <configStepMotor3+0xae>
		} else {
			anguloDif = anguloActual3 - angulo;	//Calculo cuantos grados se tiene que mover.
 8003736:	4b35      	ldr	r3, [pc, #212]	; (800380c <configStepMotor3+0x15c>)
 8003738:	ed93 6b00 	vldr	d6, [r3]
 800373c:	ed97 7b00 	vldr	d7, [r7]
 8003740:	ee36 7b47 	vsub.f64	d7, d6, d7
 8003744:	ed87 7b02 	vstr	d7, [r7, #8]
			anguloActual3 = angulo;
 8003748:	4930      	ldr	r1, [pc, #192]	; (800380c <configStepMotor3+0x15c>)
 800374a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800374e:	e9c1 2300 	strd	r2, r3, [r1]
			HAL_GPIO_WritePin(S_DirPaP3_GPIO_Port, S_DirPaP3_Pin, GPIO_PIN_RESET); // Brazo Sube (Horario)
 8003752:	2200      	movs	r2, #0
 8003754:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003758:	4830      	ldr	r0, [pc, #192]	; (800381c <configStepMotor3+0x16c>)
 800375a:	f004 fbab 	bl	8007eb4 <HAL_GPIO_WritePin>
		}
	}
	// Calculo el error de posicion por casteo a int, y cuando supera la unidad lo compenzo------
	calculoStep3 = (anguloDif * stepRev * reductor) / 360; // Almaceno el remante de los numeros de pasos y
 800375e:	ed97 7b02 	vldr	d7, [r7, #8]
 8003762:	ed9f 6b25 	vldr	d6, [pc, #148]	; 80037f8 <configStepMotor3+0x148>
 8003766:	ee27 7b06 	vmul.f64	d7, d7, d6
 800376a:	eeb1 6b08 	vmov.f64	d6, #24	; 0x40c00000  6.0
 800376e:	ee27 6b06 	vmul.f64	d6, d7, d6
 8003772:	ed9f 5b23 	vldr	d5, [pc, #140]	; 8003800 <configStepMotor3+0x150>
 8003776:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800377a:	4b29      	ldr	r3, [pc, #164]	; (8003820 <configStepMotor3+0x170>)
 800377c:	ed83 7b00 	vstr	d7, [r3]
	numStep3 = (uint32_t) calculoStep3;	// cuando pasa la unidad lo sumo al numero de pasos para
 8003780:	4b27      	ldr	r3, [pc, #156]	; (8003820 <configStepMotor3+0x170>)
 8003782:	ed93 7b00 	vldr	d7, [r3]
 8003786:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800378a:	ee17 2a90 	vmov	r2, s15
 800378e:	4b25      	ldr	r3, [pc, #148]	; (8003824 <configStepMotor3+0x174>)
 8003790:	601a      	str	r2, [r3, #0]
	remanente3 = remanente3 + (calculoStep3 - numStep3);// que el error no se amplifique.
 8003792:	4b23      	ldr	r3, [pc, #140]	; (8003820 <configStepMotor3+0x170>)
 8003794:	ed93 6b00 	vldr	d6, [r3]
 8003798:	4b22      	ldr	r3, [pc, #136]	; (8003824 <configStepMotor3+0x174>)
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	ee07 3a90 	vmov	s15, r3
 80037a0:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80037a4:	ee36 6b47 	vsub.f64	d6, d6, d7
 80037a8:	4b1f      	ldr	r3, [pc, #124]	; (8003828 <configStepMotor3+0x178>)
 80037aa:	ed93 7b00 	vldr	d7, [r3]
 80037ae:	ee36 7b07 	vadd.f64	d7, d6, d7
 80037b2:	4b1d      	ldr	r3, [pc, #116]	; (8003828 <configStepMotor3+0x178>)
 80037b4:	ed83 7b00 	vstr	d7, [r3]
	if (remanente3 >= 1) {
 80037b8:	4b1b      	ldr	r3, [pc, #108]	; (8003828 <configStepMotor3+0x178>)
 80037ba:	ed93 7b00 	vldr	d7, [r3]
 80037be:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 80037c2:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80037c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80037ca:	da00      	bge.n	80037ce <configStepMotor3+0x11e>
		remanente3 = remanente3 - 1;
		numStep3 = numStep3 + 1;
	}
}
 80037cc:	e00e      	b.n	80037ec <configStepMotor3+0x13c>
		remanente3 = remanente3 - 1;
 80037ce:	4b16      	ldr	r3, [pc, #88]	; (8003828 <configStepMotor3+0x178>)
 80037d0:	ed93 7b00 	vldr	d7, [r3]
 80037d4:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 80037d8:	ee37 7b46 	vsub.f64	d7, d7, d6
 80037dc:	4b12      	ldr	r3, [pc, #72]	; (8003828 <configStepMotor3+0x178>)
 80037de:	ed83 7b00 	vstr	d7, [r3]
		numStep3 = numStep3 + 1;
 80037e2:	4b10      	ldr	r3, [pc, #64]	; (8003824 <configStepMotor3+0x174>)
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	3301      	adds	r3, #1
 80037e8:	4a0e      	ldr	r2, [pc, #56]	; (8003824 <configStepMotor3+0x174>)
 80037ea:	6013      	str	r3, [r2, #0]
}
 80037ec:	bf00      	nop
 80037ee:	3710      	adds	r7, #16
 80037f0:	46bd      	mov	sp, r7
 80037f2:	bd80      	pop	{r7, pc}
 80037f4:	f3af 8000 	nop.w
 80037f8:	00000000 	.word	0x00000000
 80037fc:	40990000 	.word	0x40990000
 8003800:	00000000 	.word	0x00000000
 8003804:	40768000 	.word	0x40768000
 8003808:	240003a8 	.word	0x240003a8
 800380c:	24000550 	.word	0x24000550
 8003810:	58021000 	.word	0x58021000
 8003814:	240004d8 	.word	0x240004d8
 8003818:	3ff00000 	.word	0x3ff00000
 800381c:	58020800 	.word	0x58020800
 8003820:	24000568 	.word	0x24000568
 8003824:	240003b4 	.word	0x240003b4
 8003828:	24000580 	.word	0x24000580

0800382c <transpuesta>:
 *      Author: EliasC
 */

#include <operaciones.h>

array2D transpuesta(double Maux[3][3]) {
 800382c:	b580      	push	{r7, lr}
 800382e:	b096      	sub	sp, #88	; 0x58
 8003830:	af00      	add	r7, sp, #0
 8003832:	6078      	str	r0, [r7, #4]
 8003834:	6039      	str	r1, [r7, #0]
	array2D MTaux;
	for (int i = 0; i < 3; ++i) {
 8003836:	2300      	movs	r3, #0
 8003838:	657b      	str	r3, [r7, #84]	; 0x54
 800383a:	e024      	b.n	8003886 <transpuesta+0x5a>
		for (int j = 0; j < 3; ++j) {
 800383c:	2300      	movs	r3, #0
 800383e:	653b      	str	r3, [r7, #80]	; 0x50
 8003840:	e01b      	b.n	800387a <transpuesta+0x4e>
			MTaux.m[j][i] = Maux[i][j];	//transpuesta de la matriz l2 JP=[l21';l22';l23'];
 8003842:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003844:	4613      	mov	r3, r2
 8003846:	005b      	lsls	r3, r3, #1
 8003848:	4413      	add	r3, r2
 800384a:	00db      	lsls	r3, r3, #3
 800384c:	461a      	mov	r2, r3
 800384e:	683b      	ldr	r3, [r7, #0]
 8003850:	441a      	add	r2, r3
 8003852:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003854:	00db      	lsls	r3, r3, #3
 8003856:	4413      	add	r3, r2
 8003858:	e9d3 0100 	ldrd	r0, r1, [r3]
 800385c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800385e:	4613      	mov	r3, r2
 8003860:	005b      	lsls	r3, r3, #1
 8003862:	4413      	add	r3, r2
 8003864:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003866:	4413      	add	r3, r2
 8003868:	00db      	lsls	r3, r3, #3
 800386a:	3358      	adds	r3, #88	; 0x58
 800386c:	443b      	add	r3, r7
 800386e:	3b50      	subs	r3, #80	; 0x50
 8003870:	e9c3 0100 	strd	r0, r1, [r3]
		for (int j = 0; j < 3; ++j) {
 8003874:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003876:	3301      	adds	r3, #1
 8003878:	653b      	str	r3, [r7, #80]	; 0x50
 800387a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800387c:	2b02      	cmp	r3, #2
 800387e:	dde0      	ble.n	8003842 <transpuesta+0x16>
	for (int i = 0; i < 3; ++i) {
 8003880:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003882:	3301      	adds	r3, #1
 8003884:	657b      	str	r3, [r7, #84]	; 0x54
 8003886:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003888:	2b02      	cmp	r3, #2
 800388a:	ddd7      	ble.n	800383c <transpuesta+0x10>
		}
	}
	return MTaux;
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	4618      	mov	r0, r3
 8003890:	f107 0308 	add.w	r3, r7, #8
 8003894:	2248      	movs	r2, #72	; 0x48
 8003896:	4619      	mov	r1, r3
 8003898:	f00b fa20 	bl	800ecdc <memcpy>
}
 800389c:	6878      	ldr	r0, [r7, #4]
 800389e:	3758      	adds	r7, #88	; 0x58
 80038a0:	46bd      	mov	sp, r7
 80038a2:	bd80      	pop	{r7, pc}

080038a4 <productDot>:

double productDot(double VectA[], double VectB[]) {
 80038a4:	b480      	push	{r7}
 80038a6:	b087      	sub	sp, #28
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	6078      	str	r0, [r7, #4]
 80038ac:	6039      	str	r1, [r7, #0]
	double dotaux = 0;
 80038ae:	f04f 0200 	mov.w	r2, #0
 80038b2:	f04f 0300 	mov.w	r3, #0
 80038b6:	e9c7 2304 	strd	r2, r3, [r7, #16]
	for (int i = 0; i < 3; ++i) {				//Producto punto entre vectores
 80038ba:	2300      	movs	r3, #0
 80038bc:	60fb      	str	r3, [r7, #12]
 80038be:	e016      	b.n	80038ee <productDot+0x4a>
		dotaux = dotaux + VectA[i] * VectB[i];
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	00db      	lsls	r3, r3, #3
 80038c4:	687a      	ldr	r2, [r7, #4]
 80038c6:	4413      	add	r3, r2
 80038c8:	ed93 6b00 	vldr	d6, [r3]
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	00db      	lsls	r3, r3, #3
 80038d0:	683a      	ldr	r2, [r7, #0]
 80038d2:	4413      	add	r3, r2
 80038d4:	ed93 7b00 	vldr	d7, [r3]
 80038d8:	ee26 7b07 	vmul.f64	d7, d6, d7
 80038dc:	ed97 6b04 	vldr	d6, [r7, #16]
 80038e0:	ee36 7b07 	vadd.f64	d7, d6, d7
 80038e4:	ed87 7b04 	vstr	d7, [r7, #16]
	for (int i = 0; i < 3; ++i) {				//Producto punto entre vectores
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	3301      	adds	r3, #1
 80038ec:	60fb      	str	r3, [r7, #12]
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	2b02      	cmp	r3, #2
 80038f2:	dde5      	ble.n	80038c0 <productDot+0x1c>
	}
	return dotaux;
 80038f4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80038f8:	ec43 2b17 	vmov	d7, r2, r3
}
 80038fc:	eeb0 0b47 	vmov.f64	d0, d7
 8003900:	371c      	adds	r7, #28
 8003902:	46bd      	mov	sp, r7
 8003904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003908:	4770      	bx	lr

0800390a <determinante>:

double determinante(double Maux[3][3]) {
 800390a:	b480      	push	{r7}
 800390c:	b085      	sub	sp, #20
 800390e:	af00      	add	r7, sp, #0
 8003910:	6078      	str	r0, [r7, #4]
	double det;
	det = Maux[0][0] * Maux[1][1] * Maux[2][2]; // + Maux[0][1] * Maux[1][2] * Maux[2][0] + Maux[1][0] * Maux[2][1] * Maux[0][2] - Maux[2][0] * Maux[1][1] * Maux[0][2] - Maux[1][0] * Maux[0][1] * Maux[2][2] - Maux[2][1] * Maux[1][2] * Maux[0][0];
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	ed93 6b00 	vldr	d6, [r3]
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	3318      	adds	r3, #24
 800391c:	ed93 7b02 	vldr	d7, [r3, #8]
 8003920:	ee26 6b07 	vmul.f64	d6, d6, d7
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	3330      	adds	r3, #48	; 0x30
 8003928:	ed93 7b04 	vldr	d7, [r3, #16]
 800392c:	ee26 7b07 	vmul.f64	d7, d6, d7
 8003930:	ed87 7b02 	vstr	d7, [r7, #8]
	return det;
 8003934:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003938:	ec43 2b17 	vmov	d7, r2, r3
}
 800393c:	eeb0 0b47 	vmov.f64	d0, d7
 8003940:	3714      	adds	r7, #20
 8003942:	46bd      	mov	sp, r7
 8003944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003948:	4770      	bx	lr

0800394a <adjunta>:

array2D adjunta(double Maux[3][3]) {
 800394a:	b580      	push	{r7, lr}
 800394c:	b094      	sub	sp, #80	; 0x50
 800394e:	af00      	add	r7, sp, #0
 8003950:	6078      	str	r0, [r7, #4]
 8003952:	6039      	str	r1, [r7, #0]
	array2D adj;
	adj.m[0][0] = Maux[1][1] * Maux[2][2] - Maux[2][1] * Maux[1][2];
 8003954:	683b      	ldr	r3, [r7, #0]
 8003956:	3318      	adds	r3, #24
 8003958:	ed93 6b02 	vldr	d6, [r3, #8]
 800395c:	683b      	ldr	r3, [r7, #0]
 800395e:	3330      	adds	r3, #48	; 0x30
 8003960:	ed93 7b04 	vldr	d7, [r3, #16]
 8003964:	ee26 6b07 	vmul.f64	d6, d6, d7
 8003968:	683b      	ldr	r3, [r7, #0]
 800396a:	3330      	adds	r3, #48	; 0x30
 800396c:	ed93 5b02 	vldr	d5, [r3, #8]
 8003970:	683b      	ldr	r3, [r7, #0]
 8003972:	3318      	adds	r3, #24
 8003974:	ed93 7b04 	vldr	d7, [r3, #16]
 8003978:	ee25 7b07 	vmul.f64	d7, d5, d7
 800397c:	ee36 7b47 	vsub.f64	d7, d6, d7
 8003980:	ed87 7b02 	vstr	d7, [r7, #8]
	adj.m[0][1] = Maux[1][0] * Maux[2][2] - Maux[2][0] * Maux[1][2];
 8003984:	683b      	ldr	r3, [r7, #0]
 8003986:	3318      	adds	r3, #24
 8003988:	ed93 6b00 	vldr	d6, [r3]
 800398c:	683b      	ldr	r3, [r7, #0]
 800398e:	3330      	adds	r3, #48	; 0x30
 8003990:	ed93 7b04 	vldr	d7, [r3, #16]
 8003994:	ee26 6b07 	vmul.f64	d6, d6, d7
 8003998:	683b      	ldr	r3, [r7, #0]
 800399a:	3330      	adds	r3, #48	; 0x30
 800399c:	ed93 5b00 	vldr	d5, [r3]
 80039a0:	683b      	ldr	r3, [r7, #0]
 80039a2:	3318      	adds	r3, #24
 80039a4:	ed93 7b04 	vldr	d7, [r3, #16]
 80039a8:	ee25 7b07 	vmul.f64	d7, d5, d7
 80039ac:	ee36 7b47 	vsub.f64	d7, d6, d7
 80039b0:	ed87 7b04 	vstr	d7, [r7, #16]
	adj.m[0][2] = Maux[1][0] * Maux[2][1] - Maux[2][0] * Maux[1][1];
 80039b4:	683b      	ldr	r3, [r7, #0]
 80039b6:	3318      	adds	r3, #24
 80039b8:	ed93 6b00 	vldr	d6, [r3]
 80039bc:	683b      	ldr	r3, [r7, #0]
 80039be:	3330      	adds	r3, #48	; 0x30
 80039c0:	ed93 7b02 	vldr	d7, [r3, #8]
 80039c4:	ee26 6b07 	vmul.f64	d6, d6, d7
 80039c8:	683b      	ldr	r3, [r7, #0]
 80039ca:	3330      	adds	r3, #48	; 0x30
 80039cc:	ed93 5b00 	vldr	d5, [r3]
 80039d0:	683b      	ldr	r3, [r7, #0]
 80039d2:	3318      	adds	r3, #24
 80039d4:	ed93 7b02 	vldr	d7, [r3, #8]
 80039d8:	ee25 7b07 	vmul.f64	d7, d5, d7
 80039dc:	ee36 7b47 	vsub.f64	d7, d6, d7
 80039e0:	ed87 7b06 	vstr	d7, [r7, #24]
	adj.m[1][0] = Maux[0][1] * Maux[2][2] - Maux[2][1] * Maux[0][2];
 80039e4:	683b      	ldr	r3, [r7, #0]
 80039e6:	ed93 6b02 	vldr	d6, [r3, #8]
 80039ea:	683b      	ldr	r3, [r7, #0]
 80039ec:	3330      	adds	r3, #48	; 0x30
 80039ee:	ed93 7b04 	vldr	d7, [r3, #16]
 80039f2:	ee26 6b07 	vmul.f64	d6, d6, d7
 80039f6:	683b      	ldr	r3, [r7, #0]
 80039f8:	3330      	adds	r3, #48	; 0x30
 80039fa:	ed93 5b02 	vldr	d5, [r3, #8]
 80039fe:	683b      	ldr	r3, [r7, #0]
 8003a00:	ed93 7b04 	vldr	d7, [r3, #16]
 8003a04:	ee25 7b07 	vmul.f64	d7, d5, d7
 8003a08:	ee36 7b47 	vsub.f64	d7, d6, d7
 8003a0c:	ed87 7b08 	vstr	d7, [r7, #32]
	adj.m[1][1] = Maux[0][0] * Maux[2][2] - Maux[2][0] * Maux[0][2];
 8003a10:	683b      	ldr	r3, [r7, #0]
 8003a12:	ed93 6b00 	vldr	d6, [r3]
 8003a16:	683b      	ldr	r3, [r7, #0]
 8003a18:	3330      	adds	r3, #48	; 0x30
 8003a1a:	ed93 7b04 	vldr	d7, [r3, #16]
 8003a1e:	ee26 6b07 	vmul.f64	d6, d6, d7
 8003a22:	683b      	ldr	r3, [r7, #0]
 8003a24:	3330      	adds	r3, #48	; 0x30
 8003a26:	ed93 5b00 	vldr	d5, [r3]
 8003a2a:	683b      	ldr	r3, [r7, #0]
 8003a2c:	ed93 7b04 	vldr	d7, [r3, #16]
 8003a30:	ee25 7b07 	vmul.f64	d7, d5, d7
 8003a34:	ee36 7b47 	vsub.f64	d7, d6, d7
 8003a38:	ed87 7b0a 	vstr	d7, [r7, #40]	; 0x28
	adj.m[1][2] = Maux[0][0] * Maux[2][1] - Maux[2][0] * Maux[0][1];
 8003a3c:	683b      	ldr	r3, [r7, #0]
 8003a3e:	ed93 6b00 	vldr	d6, [r3]
 8003a42:	683b      	ldr	r3, [r7, #0]
 8003a44:	3330      	adds	r3, #48	; 0x30
 8003a46:	ed93 7b02 	vldr	d7, [r3, #8]
 8003a4a:	ee26 6b07 	vmul.f64	d6, d6, d7
 8003a4e:	683b      	ldr	r3, [r7, #0]
 8003a50:	3330      	adds	r3, #48	; 0x30
 8003a52:	ed93 5b00 	vldr	d5, [r3]
 8003a56:	683b      	ldr	r3, [r7, #0]
 8003a58:	ed93 7b02 	vldr	d7, [r3, #8]
 8003a5c:	ee25 7b07 	vmul.f64	d7, d5, d7
 8003a60:	ee36 7b47 	vsub.f64	d7, d6, d7
 8003a64:	ed87 7b0c 	vstr	d7, [r7, #48]	; 0x30
	adj.m[2][0] = Maux[0][1] * Maux[1][2] - Maux[1][1] * Maux[0][2];
 8003a68:	683b      	ldr	r3, [r7, #0]
 8003a6a:	ed93 6b02 	vldr	d6, [r3, #8]
 8003a6e:	683b      	ldr	r3, [r7, #0]
 8003a70:	3318      	adds	r3, #24
 8003a72:	ed93 7b04 	vldr	d7, [r3, #16]
 8003a76:	ee26 6b07 	vmul.f64	d6, d6, d7
 8003a7a:	683b      	ldr	r3, [r7, #0]
 8003a7c:	3318      	adds	r3, #24
 8003a7e:	ed93 5b02 	vldr	d5, [r3, #8]
 8003a82:	683b      	ldr	r3, [r7, #0]
 8003a84:	ed93 7b04 	vldr	d7, [r3, #16]
 8003a88:	ee25 7b07 	vmul.f64	d7, d5, d7
 8003a8c:	ee36 7b47 	vsub.f64	d7, d6, d7
 8003a90:	ed87 7b0e 	vstr	d7, [r7, #56]	; 0x38
	adj.m[2][1] = Maux[0][0] * Maux[1][2] - Maux[1][0] * Maux[0][2];
 8003a94:	683b      	ldr	r3, [r7, #0]
 8003a96:	ed93 6b00 	vldr	d6, [r3]
 8003a9a:	683b      	ldr	r3, [r7, #0]
 8003a9c:	3318      	adds	r3, #24
 8003a9e:	ed93 7b04 	vldr	d7, [r3, #16]
 8003aa2:	ee26 6b07 	vmul.f64	d6, d6, d7
 8003aa6:	683b      	ldr	r3, [r7, #0]
 8003aa8:	3318      	adds	r3, #24
 8003aaa:	ed93 5b00 	vldr	d5, [r3]
 8003aae:	683b      	ldr	r3, [r7, #0]
 8003ab0:	ed93 7b04 	vldr	d7, [r3, #16]
 8003ab4:	ee25 7b07 	vmul.f64	d7, d5, d7
 8003ab8:	ee36 7b47 	vsub.f64	d7, d6, d7
 8003abc:	ed87 7b10 	vstr	d7, [r7, #64]	; 0x40
	adj.m[2][2] = Maux[0][0] * Maux[1][1] - Maux[1][0] * Maux[0][1];
 8003ac0:	683b      	ldr	r3, [r7, #0]
 8003ac2:	ed93 6b00 	vldr	d6, [r3]
 8003ac6:	683b      	ldr	r3, [r7, #0]
 8003ac8:	3318      	adds	r3, #24
 8003aca:	ed93 7b02 	vldr	d7, [r3, #8]
 8003ace:	ee26 6b07 	vmul.f64	d6, d6, d7
 8003ad2:	683b      	ldr	r3, [r7, #0]
 8003ad4:	3318      	adds	r3, #24
 8003ad6:	ed93 5b00 	vldr	d5, [r3]
 8003ada:	683b      	ldr	r3, [r7, #0]
 8003adc:	ed93 7b02 	vldr	d7, [r3, #8]
 8003ae0:	ee25 7b07 	vmul.f64	d7, d5, d7
 8003ae4:	ee36 7b47 	vsub.f64	d7, d6, d7
 8003ae8:	ed87 7b12 	vstr	d7, [r7, #72]	; 0x48
	return adj;
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	4618      	mov	r0, r3
 8003af0:	f107 0308 	add.w	r3, r7, #8
 8003af4:	2248      	movs	r2, #72	; 0x48
 8003af6:	4619      	mov	r1, r3
 8003af8:	f00b f8f0 	bl	800ecdc <memcpy>
}
 8003afc:	6878      	ldr	r0, [r7, #4]
 8003afe:	3750      	adds	r7, #80	; 0x50
 8003b00:	46bd      	mov	sp, r7
 8003b02:	bd80      	pop	{r7, pc}

08003b04 <inversa>:

array2D inversa(double A[3][3]) {
 8003b04:	b580      	push	{r7, lr}
 8003b06:	b0bc      	sub	sp, #240	; 0xf0
 8003b08:	af00      	add	r7, sp, #0
 8003b0a:	64f8      	str	r0, [r7, #76]	; 0x4c
 8003b0c:	64b9      	str	r1, [r7, #72]	; 0x48
	array2D Minv;
	array2D Maux;
	double det;
	Maux = adjunta(A);
 8003b0e:	463b      	mov	r3, r7
 8003b10:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8003b12:	4618      	mov	r0, r3
 8003b14:	f7ff ff19 	bl	800394a <adjunta>
 8003b18:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8003b1c:	4639      	mov	r1, r7
 8003b1e:	2248      	movs	r2, #72	; 0x48
 8003b20:	4618      	mov	r0, r3
 8003b22:	f00b f8db 	bl	800ecdc <memcpy>
	Maux = transpuesta(Maux.m);
 8003b26:	463b      	mov	r3, r7
 8003b28:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8003b2c:	4611      	mov	r1, r2
 8003b2e:	4618      	mov	r0, r3
 8003b30:	f7ff fe7c 	bl	800382c <transpuesta>
 8003b34:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8003b38:	4639      	mov	r1, r7
 8003b3a:	2248      	movs	r2, #72	; 0x48
 8003b3c:	4618      	mov	r0, r3
 8003b3e:	f00b f8cd 	bl	800ecdc <memcpy>
	det = determinante(A);
 8003b42:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8003b44:	f7ff fee1 	bl	800390a <determinante>
 8003b48:	ed87 0b38 	vstr	d0, [r7, #224]	; 0xe0
	for (int i = 0; i < 3; ++i) {
 8003b4c:	2300      	movs	r3, #0
 8003b4e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8003b52:	e035      	b.n	8003bc0 <inversa+0xbc>
		for (int j = 0; j < 3; ++j) {
 8003b54:	2300      	movs	r3, #0
 8003b56:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003b5a:	e028      	b.n	8003bae <inversa+0xaa>
			Minv.m[i][j] = (1 / det) * Maux.m[i][j];
 8003b5c:	eeb7 5b00 	vmov.f64	d5, #112	; 0x3f800000  1.0
 8003b60:	ed97 7b38 	vldr	d7, [r7, #224]	; 0xe0
 8003b64:	ee85 6b07 	vdiv.f64	d6, d5, d7
 8003b68:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8003b6c:	4613      	mov	r3, r2
 8003b6e:	005b      	lsls	r3, r3, #1
 8003b70:	4413      	add	r3, r2
 8003b72:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 8003b76:	4413      	add	r3, r2
 8003b78:	00db      	lsls	r3, r3, #3
 8003b7a:	33f0      	adds	r3, #240	; 0xf0
 8003b7c:	443b      	add	r3, r7
 8003b7e:	3ba0      	subs	r3, #160	; 0xa0
 8003b80:	ed93 7b00 	vldr	d7, [r3]
 8003b84:	ee26 7b07 	vmul.f64	d7, d6, d7
 8003b88:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8003b8c:	4613      	mov	r3, r2
 8003b8e:	005b      	lsls	r3, r3, #1
 8003b90:	4413      	add	r3, r2
 8003b92:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 8003b96:	4413      	add	r3, r2
 8003b98:	00db      	lsls	r3, r3, #3
 8003b9a:	33f0      	adds	r3, #240	; 0xf0
 8003b9c:	443b      	add	r3, r7
 8003b9e:	3b58      	subs	r3, #88	; 0x58
 8003ba0:	ed83 7b00 	vstr	d7, [r3]
		for (int j = 0; j < 3; ++j) {
 8003ba4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8003ba8:	3301      	adds	r3, #1
 8003baa:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003bae:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8003bb2:	2b02      	cmp	r3, #2
 8003bb4:	ddd2      	ble.n	8003b5c <inversa+0x58>
	for (int i = 0; i < 3; ++i) {
 8003bb6:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8003bba:	3301      	adds	r3, #1
 8003bbc:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8003bc0:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8003bc4:	2b02      	cmp	r3, #2
 8003bc6:	ddc5      	ble.n	8003b54 <inversa+0x50>
		}
	}
	return Minv;
 8003bc8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003bca:	4618      	mov	r0, r3
 8003bcc:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8003bd0:	2248      	movs	r2, #72	; 0x48
 8003bd2:	4619      	mov	r1, r3
 8003bd4:	f00b f882 	bl	800ecdc <memcpy>
}
 8003bd8:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8003bda:	37f0      	adds	r7, #240	; 0xf0
 8003bdc:	46bd      	mov	sp, r7
 8003bde:	bd80      	pop	{r7, pc}

08003be0 <productMatriz>:

array2D productMatriz(double MatrizA[3][3], double MatrizB[3][3]) {
 8003be0:	b580      	push	{r7, lr}
 8003be2:	b09c      	sub	sp, #112	; 0x70
 8003be4:	af00      	add	r7, sp, #0
 8003be6:	60f8      	str	r0, [r7, #12]
 8003be8:	60b9      	str	r1, [r7, #8]
 8003bea:	607a      	str	r2, [r7, #4]
	array2D producto;

	for (int k = 0; k < 3; ++k) {
 8003bec:	2300      	movs	r3, #0
 8003bee:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003bf0:	e04b      	b.n	8003c8a <productMatriz+0xaa>
		for (int i = 0; i < 3; ++i) {
 8003bf2:	2300      	movs	r3, #0
 8003bf4:	66bb      	str	r3, [r7, #104]	; 0x68
 8003bf6:	e042      	b.n	8003c7e <productMatriz+0x9e>
			double suma = 0;
 8003bf8:	f04f 0200 	mov.w	r2, #0
 8003bfc:	f04f 0300 	mov.w	r3, #0
 8003c00:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
			for (int j = 0; j < 3; ++j) {
 8003c04:	2300      	movs	r3, #0
 8003c06:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003c08:	e024      	b.n	8003c54 <productMatriz+0x74>
				suma += MatrizA[i][j] * MatrizB[j][k];
 8003c0a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003c0c:	4613      	mov	r3, r2
 8003c0e:	005b      	lsls	r3, r3, #1
 8003c10:	4413      	add	r3, r2
 8003c12:	00db      	lsls	r3, r3, #3
 8003c14:	461a      	mov	r2, r3
 8003c16:	68bb      	ldr	r3, [r7, #8]
 8003c18:	441a      	add	r2, r3
 8003c1a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003c1c:	00db      	lsls	r3, r3, #3
 8003c1e:	4413      	add	r3, r2
 8003c20:	ed93 6b00 	vldr	d6, [r3]
 8003c24:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003c26:	4613      	mov	r3, r2
 8003c28:	005b      	lsls	r3, r3, #1
 8003c2a:	4413      	add	r3, r2
 8003c2c:	00db      	lsls	r3, r3, #3
 8003c2e:	461a      	mov	r2, r3
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	441a      	add	r2, r3
 8003c34:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c36:	00db      	lsls	r3, r3, #3
 8003c38:	4413      	add	r3, r2
 8003c3a:	ed93 7b00 	vldr	d7, [r3]
 8003c3e:	ee26 7b07 	vmul.f64	d7, d6, d7
 8003c42:	ed97 6b18 	vldr	d6, [r7, #96]	; 0x60
 8003c46:	ee36 7b07 	vadd.f64	d7, d6, d7
 8003c4a:	ed87 7b18 	vstr	d7, [r7, #96]	; 0x60
			for (int j = 0; j < 3; ++j) {
 8003c4e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003c50:	3301      	adds	r3, #1
 8003c52:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003c54:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003c56:	2b02      	cmp	r3, #2
 8003c58:	ddd7      	ble.n	8003c0a <productMatriz+0x2a>
			}
			producto.m[i][k] = suma;
 8003c5a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003c5c:	4613      	mov	r3, r2
 8003c5e:	005b      	lsls	r3, r3, #1
 8003c60:	4413      	add	r3, r2
 8003c62:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003c64:	4413      	add	r3, r2
 8003c66:	00db      	lsls	r3, r3, #3
 8003c68:	3370      	adds	r3, #112	; 0x70
 8003c6a:	443b      	add	r3, r7
 8003c6c:	f1a3 0160 	sub.w	r1, r3, #96	; 0x60
 8003c70:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8003c74:	e9c1 2300 	strd	r2, r3, [r1]
		for (int i = 0; i < 3; ++i) {
 8003c78:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003c7a:	3301      	adds	r3, #1
 8003c7c:	66bb      	str	r3, [r7, #104]	; 0x68
 8003c7e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003c80:	2b02      	cmp	r3, #2
 8003c82:	ddb9      	ble.n	8003bf8 <productMatriz+0x18>
	for (int k = 0; k < 3; ++k) {
 8003c84:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c86:	3301      	adds	r3, #1
 8003c88:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003c8a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c8c:	2b02      	cmp	r3, #2
 8003c8e:	ddb0      	ble.n	8003bf2 <productMatriz+0x12>
		}
	}
	return producto;
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	4618      	mov	r0, r3
 8003c94:	f107 0310 	add.w	r3, r7, #16
 8003c98:	2248      	movs	r2, #72	; 0x48
 8003c9a:	4619      	mov	r1, r3
 8003c9c:	f00b f81e 	bl	800ecdc <memcpy>
}
 8003ca0:	68f8      	ldr	r0, [r7, #12]
 8003ca2:	3770      	adds	r7, #112	; 0x70
 8003ca4:	46bd      	mov	sp, r7
 8003ca6:	bd80      	pop	{r7, pc}

08003ca8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003ca8:	b580      	push	{r7, lr}
 8003caa:	b082      	sub	sp, #8
 8003cac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003cae:	4b0f      	ldr	r3, [pc, #60]	; (8003cec <HAL_MspInit+0x44>)
 8003cb0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003cb4:	4a0d      	ldr	r2, [pc, #52]	; (8003cec <HAL_MspInit+0x44>)
 8003cb6:	f043 0302 	orr.w	r3, r3, #2
 8003cba:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8003cbe:	4b0b      	ldr	r3, [pc, #44]	; (8003cec <HAL_MspInit+0x44>)
 8003cc0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003cc4:	f003 0302 	and.w	r3, r3, #2
 8003cc8:	607b      	str	r3, [r7, #4]
 8003cca:	687b      	ldr	r3, [r7, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_2);
 8003ccc:	2005      	movs	r0, #5
 8003cce:	f003 f977 	bl	8006fc0 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* FPU_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(FPU_IRQn, 1, 0);
 8003cd2:	2200      	movs	r2, #0
 8003cd4:	2101      	movs	r1, #1
 8003cd6:	2051      	movs	r0, #81	; 0x51
 8003cd8:	f003 f97d 	bl	8006fd6 <HAL_NVIC_SetPriority>
  /* FPU_IRQn interrupt configuration */
  HAL_NVIC_EnableIRQ(FPU_IRQn);
 8003cdc:	2051      	movs	r0, #81	; 0x51
 8003cde:	f003 f994 	bl	800700a <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003ce2:	bf00      	nop
 8003ce4:	3708      	adds	r7, #8
 8003ce6:	46bd      	mov	sp, r7
 8003ce8:	bd80      	pop	{r7, pc}
 8003cea:	bf00      	nop
 8003cec:	58024400 	.word	0x58024400

08003cf0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003cf0:	b480      	push	{r7}
 8003cf2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8003cf4:	bf00      	nop
 8003cf6:	46bd      	mov	sp, r7
 8003cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cfc:	4770      	bx	lr

08003cfe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003cfe:	b480      	push	{r7}
 8003d00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003d02:	e7fe      	b.n	8003d02 <HardFault_Handler+0x4>

08003d04 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003d04:	b480      	push	{r7}
 8003d06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003d08:	e7fe      	b.n	8003d08 <MemManage_Handler+0x4>

08003d0a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003d0a:	b480      	push	{r7}
 8003d0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003d0e:	e7fe      	b.n	8003d0e <BusFault_Handler+0x4>

08003d10 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003d10:	b480      	push	{r7}
 8003d12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003d14:	e7fe      	b.n	8003d14 <UsageFault_Handler+0x4>

08003d16 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003d16:	b480      	push	{r7}
 8003d18:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003d1a:	bf00      	nop
 8003d1c:	46bd      	mov	sp, r7
 8003d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d22:	4770      	bx	lr

08003d24 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003d24:	b480      	push	{r7}
 8003d26:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003d28:	bf00      	nop
 8003d2a:	46bd      	mov	sp, r7
 8003d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d30:	4770      	bx	lr

08003d32 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003d32:	b480      	push	{r7}
 8003d34:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003d36:	bf00      	nop
 8003d38:	46bd      	mov	sp, r7
 8003d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d3e:	4770      	bx	lr

08003d40 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003d40:	b580      	push	{r7, lr}
 8003d42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003d44:	f002 fff8 	bl	8006d38 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003d48:	bf00      	nop
 8003d4a:	bd80      	pop	{r7, pc}

08003d4c <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8003d4c:	b580      	push	{r7, lr}
 8003d4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(E_EndStop1_Sup_Pin);
 8003d50:	2001      	movs	r0, #1
 8003d52:	f004 f8c8 	bl	8007ee6 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8003d56:	bf00      	nop
 8003d58:	bd80      	pop	{r7, pc}

08003d5a <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8003d5a:	b580      	push	{r7, lr}
 8003d5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(E_EndStop1_Inf_Pin);
 8003d5e:	2002      	movs	r0, #2
 8003d60:	f004 f8c1 	bl	8007ee6 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8003d64:	bf00      	nop
 8003d66:	bd80      	pop	{r7, pc}

08003d68 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8003d68:	b580      	push	{r7, lr}
 8003d6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(E_EndStop2_Sup_Pin);
 8003d6c:	2004      	movs	r0, #4
 8003d6e:	f004 f8ba 	bl	8007ee6 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8003d72:	bf00      	nop
 8003d74:	bd80      	pop	{r7, pc}

08003d76 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8003d76:	b580      	push	{r7, lr}
 8003d78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(E_EndStop2_Inf_Pin);
 8003d7a:	2008      	movs	r0, #8
 8003d7c:	f004 f8b3 	bl	8007ee6 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8003d80:	bf00      	nop
 8003d82:	bd80      	pop	{r7, pc}

08003d84 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8003d84:	b580      	push	{r7, lr}
 8003d86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(E_EndStop3_Sup_Pin);
 8003d88:	2010      	movs	r0, #16
 8003d8a:	f004 f8ac 	bl	8007ee6 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8003d8e:	bf00      	nop
 8003d90:	bd80      	pop	{r7, pc}

08003d92 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8003d92:	b580      	push	{r7, lr}
 8003d94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(E_EndStop3_Inf_Pin);
 8003d96:	2020      	movs	r0, #32
 8003d98:	f004 f8a5 	bl	8007ee6 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8003d9c:	bf00      	nop
 8003d9e:	bd80      	pop	{r7, pc}

08003da0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8003da0:	b580      	push	{r7, lr}
 8003da2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8003da4:	4802      	ldr	r0, [pc, #8]	; (8003db0 <TIM2_IRQHandler+0x10>)
 8003da6:	f007 fa21 	bl	800b1ec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8003daa:	bf00      	nop
 8003dac:	bd80      	pop	{r7, pc}
 8003dae:	bf00      	nop
 8003db0:	2400058c 	.word	0x2400058c

08003db4 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8003db4:	b580      	push	{r7, lr}
 8003db6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8003db8:	4802      	ldr	r0, [pc, #8]	; (8003dc4 <TIM3_IRQHandler+0x10>)
 8003dba:	f007 fa17 	bl	800b1ec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8003dbe:	bf00      	nop
 8003dc0:	bd80      	pop	{r7, pc}
 8003dc2:	bf00      	nop
 8003dc4:	240005d8 	.word	0x240005d8

08003dc8 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8003dc8:	b580      	push	{r7, lr}
 8003dca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8003dcc:	4802      	ldr	r0, [pc, #8]	; (8003dd8 <TIM4_IRQHandler+0x10>)
 8003dce:	f007 fa0d 	bl	800b1ec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8003dd2:	bf00      	nop
 8003dd4:	bd80      	pop	{r7, pc}
 8003dd6:	bf00      	nop
 8003dd8:	24000624 	.word	0x24000624

08003ddc <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8003ddc:	b580      	push	{r7, lr}
 8003dde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8003de0:	4802      	ldr	r0, [pc, #8]	; (8003dec <USART3_IRQHandler+0x10>)
 8003de2:	f008 fd2f 	bl	800c844 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8003de6:	bf00      	nop
 8003de8:	bd80      	pop	{r7, pc}
 8003dea:	bf00      	nop
 8003dec:	24000ca8 	.word	0x24000ca8

08003df0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8003df0:	b580      	push	{r7, lr}
 8003df2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUTTON_Pin);
 8003df4:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8003df8:	f004 f875 	bl	8007ee6 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8003dfc:	bf00      	nop
 8003dfe:	bd80      	pop	{r7, pc}

08003e00 <FPU_IRQHandler>:

/**
  * @brief This function handles FPU global interrupt.
  */
void FPU_IRQHandler(void)
{
 8003e00:	b480      	push	{r7}
 8003e02:	af00      	add	r7, sp, #0

  /* USER CODE END FPU_IRQn 0 */
  /* USER CODE BEGIN FPU_IRQn 1 */

  /* USER CODE END FPU_IRQn 1 */
}
 8003e04:	bf00      	nop
 8003e06:	46bd      	mov	sp, r7
 8003e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e0c:	4770      	bx	lr
	...

08003e10 <TIM15_IRQHandler>:

/**
  * @brief This function handles TIM15 global interrupt.
  */
void TIM15_IRQHandler(void)
{
 8003e10:	b580      	push	{r7, lr}
 8003e12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM15_IRQn 0 */

  /* USER CODE END TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim15);
 8003e14:	4802      	ldr	r0, [pc, #8]	; (8003e20 <TIM15_IRQHandler+0x10>)
 8003e16:	f007 f9e9 	bl	800b1ec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM15_IRQn 1 */

  /* USER CODE END TIM15_IRQn 1 */
}
 8003e1a:	bf00      	nop
 8003e1c:	bd80      	pop	{r7, pc}
 8003e1e:	bf00      	nop
 8003e20:	240007a0 	.word	0x240007a0

08003e24 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003e24:	b480      	push	{r7}
 8003e26:	af00      	add	r7, sp, #0
	return 1;
 8003e28:	2301      	movs	r3, #1
}
 8003e2a:	4618      	mov	r0, r3
 8003e2c:	46bd      	mov	sp, r7
 8003e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e32:	4770      	bx	lr

08003e34 <_kill>:

int _kill(int pid, int sig)
{
 8003e34:	b580      	push	{r7, lr}
 8003e36:	b082      	sub	sp, #8
 8003e38:	af00      	add	r7, sp, #0
 8003e3a:	6078      	str	r0, [r7, #4]
 8003e3c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8003e3e:	f00a ff23 	bl	800ec88 <__errno>
 8003e42:	4603      	mov	r3, r0
 8003e44:	2216      	movs	r2, #22
 8003e46:	601a      	str	r2, [r3, #0]
	return -1;
 8003e48:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003e4c:	4618      	mov	r0, r3
 8003e4e:	3708      	adds	r7, #8
 8003e50:	46bd      	mov	sp, r7
 8003e52:	bd80      	pop	{r7, pc}

08003e54 <_exit>:

void _exit (int status)
{
 8003e54:	b580      	push	{r7, lr}
 8003e56:	b082      	sub	sp, #8
 8003e58:	af00      	add	r7, sp, #0
 8003e5a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8003e5c:	f04f 31ff 	mov.w	r1, #4294967295
 8003e60:	6878      	ldr	r0, [r7, #4]
 8003e62:	f7ff ffe7 	bl	8003e34 <_kill>
	while (1) {}		/* Make sure we hang here */
 8003e66:	e7fe      	b.n	8003e66 <_exit+0x12>

08003e68 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003e68:	b580      	push	{r7, lr}
 8003e6a:	b086      	sub	sp, #24
 8003e6c:	af00      	add	r7, sp, #0
 8003e6e:	60f8      	str	r0, [r7, #12]
 8003e70:	60b9      	str	r1, [r7, #8]
 8003e72:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003e74:	2300      	movs	r3, #0
 8003e76:	617b      	str	r3, [r7, #20]
 8003e78:	e00a      	b.n	8003e90 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8003e7a:	f3af 8000 	nop.w
 8003e7e:	4601      	mov	r1, r0
 8003e80:	68bb      	ldr	r3, [r7, #8]
 8003e82:	1c5a      	adds	r2, r3, #1
 8003e84:	60ba      	str	r2, [r7, #8]
 8003e86:	b2ca      	uxtb	r2, r1
 8003e88:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003e8a:	697b      	ldr	r3, [r7, #20]
 8003e8c:	3301      	adds	r3, #1
 8003e8e:	617b      	str	r3, [r7, #20]
 8003e90:	697a      	ldr	r2, [r7, #20]
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	429a      	cmp	r2, r3
 8003e96:	dbf0      	blt.n	8003e7a <_read+0x12>
	}

return len;
 8003e98:	687b      	ldr	r3, [r7, #4]
}
 8003e9a:	4618      	mov	r0, r3
 8003e9c:	3718      	adds	r7, #24
 8003e9e:	46bd      	mov	sp, r7
 8003ea0:	bd80      	pop	{r7, pc}

08003ea2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003ea2:	b580      	push	{r7, lr}
 8003ea4:	b086      	sub	sp, #24
 8003ea6:	af00      	add	r7, sp, #0
 8003ea8:	60f8      	str	r0, [r7, #12]
 8003eaa:	60b9      	str	r1, [r7, #8]
 8003eac:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003eae:	2300      	movs	r3, #0
 8003eb0:	617b      	str	r3, [r7, #20]
 8003eb2:	e009      	b.n	8003ec8 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8003eb4:	68bb      	ldr	r3, [r7, #8]
 8003eb6:	1c5a      	adds	r2, r3, #1
 8003eb8:	60ba      	str	r2, [r7, #8]
 8003eba:	781b      	ldrb	r3, [r3, #0]
 8003ebc:	4618      	mov	r0, r3
 8003ebe:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003ec2:	697b      	ldr	r3, [r7, #20]
 8003ec4:	3301      	adds	r3, #1
 8003ec6:	617b      	str	r3, [r7, #20]
 8003ec8:	697a      	ldr	r2, [r7, #20]
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	429a      	cmp	r2, r3
 8003ece:	dbf1      	blt.n	8003eb4 <_write+0x12>
	}
	return len;
 8003ed0:	687b      	ldr	r3, [r7, #4]
}
 8003ed2:	4618      	mov	r0, r3
 8003ed4:	3718      	adds	r7, #24
 8003ed6:	46bd      	mov	sp, r7
 8003ed8:	bd80      	pop	{r7, pc}

08003eda <_close>:

int _close(int file)
{
 8003eda:	b480      	push	{r7}
 8003edc:	b083      	sub	sp, #12
 8003ede:	af00      	add	r7, sp, #0
 8003ee0:	6078      	str	r0, [r7, #4]
	return -1;
 8003ee2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003ee6:	4618      	mov	r0, r3
 8003ee8:	370c      	adds	r7, #12
 8003eea:	46bd      	mov	sp, r7
 8003eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef0:	4770      	bx	lr

08003ef2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003ef2:	b480      	push	{r7}
 8003ef4:	b083      	sub	sp, #12
 8003ef6:	af00      	add	r7, sp, #0
 8003ef8:	6078      	str	r0, [r7, #4]
 8003efa:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8003efc:	683b      	ldr	r3, [r7, #0]
 8003efe:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003f02:	605a      	str	r2, [r3, #4]
	return 0;
 8003f04:	2300      	movs	r3, #0
}
 8003f06:	4618      	mov	r0, r3
 8003f08:	370c      	adds	r7, #12
 8003f0a:	46bd      	mov	sp, r7
 8003f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f10:	4770      	bx	lr

08003f12 <_isatty>:

int _isatty(int file)
{
 8003f12:	b480      	push	{r7}
 8003f14:	b083      	sub	sp, #12
 8003f16:	af00      	add	r7, sp, #0
 8003f18:	6078      	str	r0, [r7, #4]
	return 1;
 8003f1a:	2301      	movs	r3, #1
}
 8003f1c:	4618      	mov	r0, r3
 8003f1e:	370c      	adds	r7, #12
 8003f20:	46bd      	mov	sp, r7
 8003f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f26:	4770      	bx	lr

08003f28 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003f28:	b480      	push	{r7}
 8003f2a:	b085      	sub	sp, #20
 8003f2c:	af00      	add	r7, sp, #0
 8003f2e:	60f8      	str	r0, [r7, #12]
 8003f30:	60b9      	str	r1, [r7, #8]
 8003f32:	607a      	str	r2, [r7, #4]
	return 0;
 8003f34:	2300      	movs	r3, #0
}
 8003f36:	4618      	mov	r0, r3
 8003f38:	3714      	adds	r7, #20
 8003f3a:	46bd      	mov	sp, r7
 8003f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f40:	4770      	bx	lr
	...

08003f44 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8003f44:	b580      	push	{r7, lr}
 8003f46:	b084      	sub	sp, #16
 8003f48:	af00      	add	r7, sp, #0
 8003f4a:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8003f4c:	4b11      	ldr	r3, [pc, #68]	; (8003f94 <_sbrk+0x50>)
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d102      	bne.n	8003f5a <_sbrk+0x16>
		heap_end = &end;
 8003f54:	4b0f      	ldr	r3, [pc, #60]	; (8003f94 <_sbrk+0x50>)
 8003f56:	4a10      	ldr	r2, [pc, #64]	; (8003f98 <_sbrk+0x54>)
 8003f58:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8003f5a:	4b0e      	ldr	r3, [pc, #56]	; (8003f94 <_sbrk+0x50>)
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8003f60:	4b0c      	ldr	r3, [pc, #48]	; (8003f94 <_sbrk+0x50>)
 8003f62:	681a      	ldr	r2, [r3, #0]
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	4413      	add	r3, r2
 8003f68:	466a      	mov	r2, sp
 8003f6a:	4293      	cmp	r3, r2
 8003f6c:	d907      	bls.n	8003f7e <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8003f6e:	f00a fe8b 	bl	800ec88 <__errno>
 8003f72:	4603      	mov	r3, r0
 8003f74:	220c      	movs	r2, #12
 8003f76:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 8003f78:	f04f 33ff 	mov.w	r3, #4294967295
 8003f7c:	e006      	b.n	8003f8c <_sbrk+0x48>
	}

	heap_end += incr;
 8003f7e:	4b05      	ldr	r3, [pc, #20]	; (8003f94 <_sbrk+0x50>)
 8003f80:	681a      	ldr	r2, [r3, #0]
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	4413      	add	r3, r2
 8003f86:	4a03      	ldr	r2, [pc, #12]	; (8003f94 <_sbrk+0x50>)
 8003f88:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8003f8a:	68fb      	ldr	r3, [r7, #12]
}
 8003f8c:	4618      	mov	r0, r3
 8003f8e:	3710      	adds	r7, #16
 8003f90:	46bd      	mov	sp, r7
 8003f92:	bd80      	pop	{r7, pc}
 8003f94:	24000588 	.word	0x24000588
 8003f98:	24000d50 	.word	0x24000d50

08003f9c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003f9c:	b480      	push	{r7}
 8003f9e:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8003fa0:	4b29      	ldr	r3, [pc, #164]	; (8004048 <SystemInit+0xac>)
 8003fa2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fa6:	4a28      	ldr	r2, [pc, #160]	; (8004048 <SystemInit+0xac>)
 8003fa8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003fac:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8003fb0:	4b26      	ldr	r3, [pc, #152]	; (800404c <SystemInit+0xb0>)
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	4a25      	ldr	r2, [pc, #148]	; (800404c <SystemInit+0xb0>)
 8003fb6:	f043 0301 	orr.w	r3, r3, #1
 8003fba:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8003fbc:	4b23      	ldr	r3, [pc, #140]	; (800404c <SystemInit+0xb0>)
 8003fbe:	2200      	movs	r2, #0
 8003fc0:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, CSSON , CSION,RC48ON, CSIKERON PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8003fc2:	4b22      	ldr	r3, [pc, #136]	; (800404c <SystemInit+0xb0>)
 8003fc4:	681a      	ldr	r2, [r3, #0]
 8003fc6:	4921      	ldr	r1, [pc, #132]	; (800404c <SystemInit+0xb0>)
 8003fc8:	4b21      	ldr	r3, [pc, #132]	; (8004050 <SystemInit+0xb4>)
 8003fca:	4013      	ands	r3, r2
 8003fcc:	600b      	str	r3, [r1, #0]

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8003fce:	4b1f      	ldr	r3, [pc, #124]	; (800404c <SystemInit+0xb0>)
 8003fd0:	2200      	movs	r2, #0
 8003fd2:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8003fd4:	4b1d      	ldr	r3, [pc, #116]	; (800404c <SystemInit+0xb0>)
 8003fd6:	2200      	movs	r2, #0
 8003fd8:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8003fda:	4b1c      	ldr	r3, [pc, #112]	; (800404c <SystemInit+0xb0>)
 8003fdc:	2200      	movs	r2, #0
 8003fde:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x00000000;
 8003fe0:	4b1a      	ldr	r3, [pc, #104]	; (800404c <SystemInit+0xb0>)
 8003fe2:	2200      	movs	r2, #0
 8003fe4:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00000000;
 8003fe6:	4b19      	ldr	r3, [pc, #100]	; (800404c <SystemInit+0xb0>)
 8003fe8:	2200      	movs	r2, #0
 8003fea:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x00000000;
 8003fec:	4b17      	ldr	r3, [pc, #92]	; (800404c <SystemInit+0xb0>)
 8003fee:	2200      	movs	r2, #0
 8003ff0:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8003ff2:	4b16      	ldr	r3, [pc, #88]	; (800404c <SystemInit+0xb0>)
 8003ff4:	2200      	movs	r2, #0
 8003ff6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x00000000;
 8003ff8:	4b14      	ldr	r3, [pc, #80]	; (800404c <SystemInit+0xb0>)
 8003ffa:	2200      	movs	r2, #0
 8003ffc:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8003ffe:	4b13      	ldr	r3, [pc, #76]	; (800404c <SystemInit+0xb0>)
 8004000:	2200      	movs	r2, #0
 8004002:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x00000000;
 8004004:	4b11      	ldr	r3, [pc, #68]	; (800404c <SystemInit+0xb0>)
 8004006:	2200      	movs	r2, #0
 8004008:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800400a:	4b10      	ldr	r3, [pc, #64]	; (800404c <SystemInit+0xb0>)
 800400c:	2200      	movs	r2, #0
 800400e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8004010:	4b0e      	ldr	r3, [pc, #56]	; (800404c <SystemInit+0xb0>)
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	4a0d      	ldr	r2, [pc, #52]	; (800404c <SystemInit+0xb0>)
 8004016:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800401a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800401c:	4b0b      	ldr	r3, [pc, #44]	; (800404c <SystemInit+0xb0>)
 800401e:	2200      	movs	r2, #0
 8004020:	661a      	str	r2, [r3, #96]	; 0x60
  SCB->VTOR = FLASH_BANK2_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
#endif /* VECT_TAB_SRAM */

#else
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8004022:	4b0c      	ldr	r3, [pc, #48]	; (8004054 <SystemInit+0xb8>)
 8004024:	681a      	ldr	r2, [r3, #0]
 8004026:	4b0c      	ldr	r3, [pc, #48]	; (8004058 <SystemInit+0xbc>)
 8004028:	4013      	ands	r3, r2
 800402a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800402e:	d202      	bcs.n	8004036 <SystemInit+0x9a>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8004030:	4b0a      	ldr	r3, [pc, #40]	; (800405c <SystemInit+0xc0>)
 8004032:	2201      	movs	r2, #1
 8004034:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8004036:	4b04      	ldr	r3, [pc, #16]	; (8004048 <SystemInit+0xac>)
 8004038:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800403c:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 800403e:	bf00      	nop
 8004040:	46bd      	mov	sp, r7
 8004042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004046:	4770      	bx	lr
 8004048:	e000ed00 	.word	0xe000ed00
 800404c:	58024400 	.word	0x58024400
 8004050:	eaf6ed7f 	.word	0xeaf6ed7f
 8004054:	5c001000 	.word	0x5c001000
 8004058:	ffff0000 	.word	0xffff0000
 800405c:	51008108 	.word	0x51008108

08004060 <MX_TIM2_Init>:
TIM_HandleTypeDef htim14;
TIM_HandleTypeDef htim15;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8004060:	b580      	push	{r7, lr}
 8004062:	b08c      	sub	sp, #48	; 0x30
 8004064:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004066:	f107 0320 	add.w	r3, r7, #32
 800406a:	2200      	movs	r2, #0
 800406c:	601a      	str	r2, [r3, #0]
 800406e:	605a      	str	r2, [r3, #4]
 8004070:	609a      	str	r2, [r3, #8]
 8004072:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004074:	f107 0314 	add.w	r3, r7, #20
 8004078:	2200      	movs	r2, #0
 800407a:	601a      	str	r2, [r3, #0]
 800407c:	605a      	str	r2, [r3, #4]
 800407e:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8004080:	1d3b      	adds	r3, r7, #4
 8004082:	2200      	movs	r2, #0
 8004084:	601a      	str	r2, [r3, #0]
 8004086:	605a      	str	r2, [r3, #4]
 8004088:	609a      	str	r2, [r3, #8]
 800408a:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800408c:	4b2b      	ldr	r3, [pc, #172]	; (800413c <MX_TIM2_Init+0xdc>)
 800408e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8004092:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8004094:	4b29      	ldr	r3, [pc, #164]	; (800413c <MX_TIM2_Init+0xdc>)
 8004096:	2200      	movs	r2, #0
 8004098:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800409a:	4b28      	ldr	r3, [pc, #160]	; (800413c <MX_TIM2_Init+0xdc>)
 800409c:	2200      	movs	r2, #0
 800409e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 80040a0:	4b26      	ldr	r3, [pc, #152]	; (800413c <MX_TIM2_Init+0xdc>)
 80040a2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80040a6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80040a8:	4b24      	ldr	r3, [pc, #144]	; (800413c <MX_TIM2_Init+0xdc>)
 80040aa:	2200      	movs	r2, #0
 80040ac:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80040ae:	4b23      	ldr	r3, [pc, #140]	; (800413c <MX_TIM2_Init+0xdc>)
 80040b0:	2200      	movs	r2, #0
 80040b2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80040b4:	4821      	ldr	r0, [pc, #132]	; (800413c <MX_TIM2_Init+0xdc>)
 80040b6:	f006 fa8d 	bl	800a5d4 <HAL_TIM_Base_Init>
 80040ba:	4603      	mov	r3, r0
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d001      	beq.n	80040c4 <MX_TIM2_Init+0x64>
  {
    Error_Handler();
 80040c0:	f7ff f96e 	bl	80033a0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80040c4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80040c8:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80040ca:	f107 0320 	add.w	r3, r7, #32
 80040ce:	4619      	mov	r1, r3
 80040d0:	481a      	ldr	r0, [pc, #104]	; (800413c <MX_TIM2_Init+0xdc>)
 80040d2:	f007 fb5b 	bl	800b78c <HAL_TIM_ConfigClockSource>
 80040d6:	4603      	mov	r3, r0
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d001      	beq.n	80040e0 <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 80040dc:	f7ff f960 	bl	80033a0 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 80040e0:	4816      	ldr	r0, [pc, #88]	; (800413c <MX_TIM2_Init+0xdc>)
 80040e2:	f006 fe13 	bl	800ad0c <HAL_TIM_IC_Init>
 80040e6:	4603      	mov	r3, r0
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d001      	beq.n	80040f0 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 80040ec:	f7ff f958 	bl	80033a0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80040f0:	2300      	movs	r3, #0
 80040f2:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80040f4:	2300      	movs	r3, #0
 80040f6:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80040f8:	f107 0314 	add.w	r3, r7, #20
 80040fc:	4619      	mov	r1, r3
 80040fe:	480f      	ldr	r0, [pc, #60]	; (800413c <MX_TIM2_Init+0xdc>)
 8004100:	f008 f9b8 	bl	800c474 <HAL_TIMEx_MasterConfigSynchronization>
 8004104:	4603      	mov	r3, r0
 8004106:	2b00      	cmp	r3, #0
 8004108:	d001      	beq.n	800410e <MX_TIM2_Init+0xae>
  {
    Error_Handler();
 800410a:	f7ff f949 	bl	80033a0 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800410e:	2300      	movs	r3, #0
 8004110:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8004112:	2301      	movs	r3, #1
 8004114:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8004116:	2300      	movs	r3, #0
 8004118:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 800411a:	2300      	movs	r3, #0
 800411c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 800411e:	1d3b      	adds	r3, r7, #4
 8004120:	2200      	movs	r2, #0
 8004122:	4619      	mov	r1, r3
 8004124:	4805      	ldr	r0, [pc, #20]	; (800413c <MX_TIM2_Init+0xdc>)
 8004126:	f007 f980 	bl	800b42a <HAL_TIM_IC_ConfigChannel>
 800412a:	4603      	mov	r3, r0
 800412c:	2b00      	cmp	r3, #0
 800412e:	d001      	beq.n	8004134 <MX_TIM2_Init+0xd4>
  {
    Error_Handler();
 8004130:	f7ff f936 	bl	80033a0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8004134:	bf00      	nop
 8004136:	3730      	adds	r7, #48	; 0x30
 8004138:	46bd      	mov	sp, r7
 800413a:	bd80      	pop	{r7, pc}
 800413c:	2400058c 	.word	0x2400058c

08004140 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8004140:	b580      	push	{r7, lr}
 8004142:	b08c      	sub	sp, #48	; 0x30
 8004144:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004146:	f107 0320 	add.w	r3, r7, #32
 800414a:	2200      	movs	r2, #0
 800414c:	601a      	str	r2, [r3, #0]
 800414e:	605a      	str	r2, [r3, #4]
 8004150:	609a      	str	r2, [r3, #8]
 8004152:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004154:	f107 0314 	add.w	r3, r7, #20
 8004158:	2200      	movs	r2, #0
 800415a:	601a      	str	r2, [r3, #0]
 800415c:	605a      	str	r2, [r3, #4]
 800415e:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8004160:	1d3b      	adds	r3, r7, #4
 8004162:	2200      	movs	r2, #0
 8004164:	601a      	str	r2, [r3, #0]
 8004166:	605a      	str	r2, [r3, #4]
 8004168:	609a      	str	r2, [r3, #8]
 800416a:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800416c:	4b2b      	ldr	r3, [pc, #172]	; (800421c <MX_TIM3_Init+0xdc>)
 800416e:	4a2c      	ldr	r2, [pc, #176]	; (8004220 <MX_TIM3_Init+0xe0>)
 8004170:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8004172:	4b2a      	ldr	r3, [pc, #168]	; (800421c <MX_TIM3_Init+0xdc>)
 8004174:	2200      	movs	r2, #0
 8004176:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004178:	4b28      	ldr	r3, [pc, #160]	; (800421c <MX_TIM3_Init+0xdc>)
 800417a:	2200      	movs	r2, #0
 800417c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800417e:	4b27      	ldr	r3, [pc, #156]	; (800421c <MX_TIM3_Init+0xdc>)
 8004180:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004184:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004186:	4b25      	ldr	r3, [pc, #148]	; (800421c <MX_TIM3_Init+0xdc>)
 8004188:	2200      	movs	r2, #0
 800418a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800418c:	4b23      	ldr	r3, [pc, #140]	; (800421c <MX_TIM3_Init+0xdc>)
 800418e:	2200      	movs	r2, #0
 8004190:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8004192:	4822      	ldr	r0, [pc, #136]	; (800421c <MX_TIM3_Init+0xdc>)
 8004194:	f006 fa1e 	bl	800a5d4 <HAL_TIM_Base_Init>
 8004198:	4603      	mov	r3, r0
 800419a:	2b00      	cmp	r3, #0
 800419c:	d001      	beq.n	80041a2 <MX_TIM3_Init+0x62>
  {
    Error_Handler();
 800419e:	f7ff f8ff 	bl	80033a0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80041a2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80041a6:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80041a8:	f107 0320 	add.w	r3, r7, #32
 80041ac:	4619      	mov	r1, r3
 80041ae:	481b      	ldr	r0, [pc, #108]	; (800421c <MX_TIM3_Init+0xdc>)
 80041b0:	f007 faec 	bl	800b78c <HAL_TIM_ConfigClockSource>
 80041b4:	4603      	mov	r3, r0
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d001      	beq.n	80041be <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 80041ba:	f7ff f8f1 	bl	80033a0 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 80041be:	4817      	ldr	r0, [pc, #92]	; (800421c <MX_TIM3_Init+0xdc>)
 80041c0:	f006 fda4 	bl	800ad0c <HAL_TIM_IC_Init>
 80041c4:	4603      	mov	r3, r0
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d001      	beq.n	80041ce <MX_TIM3_Init+0x8e>
  {
    Error_Handler();
 80041ca:	f7ff f8e9 	bl	80033a0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80041ce:	2300      	movs	r3, #0
 80041d0:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80041d2:	2300      	movs	r3, #0
 80041d4:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80041d6:	f107 0314 	add.w	r3, r7, #20
 80041da:	4619      	mov	r1, r3
 80041dc:	480f      	ldr	r0, [pc, #60]	; (800421c <MX_TIM3_Init+0xdc>)
 80041de:	f008 f949 	bl	800c474 <HAL_TIMEx_MasterConfigSynchronization>
 80041e2:	4603      	mov	r3, r0
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d001      	beq.n	80041ec <MX_TIM3_Init+0xac>
  {
    Error_Handler();
 80041e8:	f7ff f8da 	bl	80033a0 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80041ec:	2300      	movs	r3, #0
 80041ee:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80041f0:	2301      	movs	r3, #1
 80041f2:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80041f4:	2300      	movs	r3, #0
 80041f6:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 80041f8:	2300      	movs	r3, #0
 80041fa:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80041fc:	1d3b      	adds	r3, r7, #4
 80041fe:	2200      	movs	r2, #0
 8004200:	4619      	mov	r1, r3
 8004202:	4806      	ldr	r0, [pc, #24]	; (800421c <MX_TIM3_Init+0xdc>)
 8004204:	f007 f911 	bl	800b42a <HAL_TIM_IC_ConfigChannel>
 8004208:	4603      	mov	r3, r0
 800420a:	2b00      	cmp	r3, #0
 800420c:	d001      	beq.n	8004212 <MX_TIM3_Init+0xd2>
  {
    Error_Handler();
 800420e:	f7ff f8c7 	bl	80033a0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8004212:	bf00      	nop
 8004214:	3730      	adds	r7, #48	; 0x30
 8004216:	46bd      	mov	sp, r7
 8004218:	bd80      	pop	{r7, pc}
 800421a:	bf00      	nop
 800421c:	240005d8 	.word	0x240005d8
 8004220:	40000400 	.word	0x40000400

08004224 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8004224:	b580      	push	{r7, lr}
 8004226:	b08c      	sub	sp, #48	; 0x30
 8004228:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800422a:	f107 0320 	add.w	r3, r7, #32
 800422e:	2200      	movs	r2, #0
 8004230:	601a      	str	r2, [r3, #0]
 8004232:	605a      	str	r2, [r3, #4]
 8004234:	609a      	str	r2, [r3, #8]
 8004236:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004238:	f107 0314 	add.w	r3, r7, #20
 800423c:	2200      	movs	r2, #0
 800423e:	601a      	str	r2, [r3, #0]
 8004240:	605a      	str	r2, [r3, #4]
 8004242:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8004244:	1d3b      	adds	r3, r7, #4
 8004246:	2200      	movs	r2, #0
 8004248:	601a      	str	r2, [r3, #0]
 800424a:	605a      	str	r2, [r3, #4]
 800424c:	609a      	str	r2, [r3, #8]
 800424e:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8004250:	4b2b      	ldr	r3, [pc, #172]	; (8004300 <MX_TIM4_Init+0xdc>)
 8004252:	4a2c      	ldr	r2, [pc, #176]	; (8004304 <MX_TIM4_Init+0xe0>)
 8004254:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8004256:	4b2a      	ldr	r3, [pc, #168]	; (8004300 <MX_TIM4_Init+0xdc>)
 8004258:	2200      	movs	r2, #0
 800425a:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800425c:	4b28      	ldr	r3, [pc, #160]	; (8004300 <MX_TIM4_Init+0xdc>)
 800425e:	2200      	movs	r2, #0
 8004260:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8004262:	4b27      	ldr	r3, [pc, #156]	; (8004300 <MX_TIM4_Init+0xdc>)
 8004264:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004268:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800426a:	4b25      	ldr	r3, [pc, #148]	; (8004300 <MX_TIM4_Init+0xdc>)
 800426c:	2200      	movs	r2, #0
 800426e:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004270:	4b23      	ldr	r3, [pc, #140]	; (8004300 <MX_TIM4_Init+0xdc>)
 8004272:	2200      	movs	r2, #0
 8004274:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8004276:	4822      	ldr	r0, [pc, #136]	; (8004300 <MX_TIM4_Init+0xdc>)
 8004278:	f006 f9ac 	bl	800a5d4 <HAL_TIM_Base_Init>
 800427c:	4603      	mov	r3, r0
 800427e:	2b00      	cmp	r3, #0
 8004280:	d001      	beq.n	8004286 <MX_TIM4_Init+0x62>
  {
    Error_Handler();
 8004282:	f7ff f88d 	bl	80033a0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004286:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800428a:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800428c:	f107 0320 	add.w	r3, r7, #32
 8004290:	4619      	mov	r1, r3
 8004292:	481b      	ldr	r0, [pc, #108]	; (8004300 <MX_TIM4_Init+0xdc>)
 8004294:	f007 fa7a 	bl	800b78c <HAL_TIM_ConfigClockSource>
 8004298:	4603      	mov	r3, r0
 800429a:	2b00      	cmp	r3, #0
 800429c:	d001      	beq.n	80042a2 <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 800429e:	f7ff f87f 	bl	80033a0 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim4) != HAL_OK)
 80042a2:	4817      	ldr	r0, [pc, #92]	; (8004300 <MX_TIM4_Init+0xdc>)
 80042a4:	f006 fd32 	bl	800ad0c <HAL_TIM_IC_Init>
 80042a8:	4603      	mov	r3, r0
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d001      	beq.n	80042b2 <MX_TIM4_Init+0x8e>
  {
    Error_Handler();
 80042ae:	f7ff f877 	bl	80033a0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80042b2:	2300      	movs	r3, #0
 80042b4:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80042b6:	2300      	movs	r3, #0
 80042b8:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80042ba:	f107 0314 	add.w	r3, r7, #20
 80042be:	4619      	mov	r1, r3
 80042c0:	480f      	ldr	r0, [pc, #60]	; (8004300 <MX_TIM4_Init+0xdc>)
 80042c2:	f008 f8d7 	bl	800c474 <HAL_TIMEx_MasterConfigSynchronization>
 80042c6:	4603      	mov	r3, r0
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d001      	beq.n	80042d0 <MX_TIM4_Init+0xac>
  {
    Error_Handler();
 80042cc:	f7ff f868 	bl	80033a0 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80042d0:	2300      	movs	r3, #0
 80042d2:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80042d4:	2301      	movs	r3, #1
 80042d6:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80042d8:	2300      	movs	r3, #0
 80042da:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 80042dc:	2300      	movs	r3, #0
 80042de:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80042e0:	1d3b      	adds	r3, r7, #4
 80042e2:	2200      	movs	r2, #0
 80042e4:	4619      	mov	r1, r3
 80042e6:	4806      	ldr	r0, [pc, #24]	; (8004300 <MX_TIM4_Init+0xdc>)
 80042e8:	f007 f89f 	bl	800b42a <HAL_TIM_IC_ConfigChannel>
 80042ec:	4603      	mov	r3, r0
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d001      	beq.n	80042f6 <MX_TIM4_Init+0xd2>
  {
    Error_Handler();
 80042f2:	f7ff f855 	bl	80033a0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80042f6:	bf00      	nop
 80042f8:	3730      	adds	r7, #48	; 0x30
 80042fa:	46bd      	mov	sp, r7
 80042fc:	bd80      	pop	{r7, pc}
 80042fe:	bf00      	nop
 8004300:	24000624 	.word	0x24000624
 8004304:	40000800 	.word	0x40000800

08004308 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8004308:	b580      	push	{r7, lr}
 800430a:	b088      	sub	sp, #32
 800430c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800430e:	f107 0310 	add.w	r3, r7, #16
 8004312:	2200      	movs	r2, #0
 8004314:	601a      	str	r2, [r3, #0]
 8004316:	605a      	str	r2, [r3, #4]
 8004318:	609a      	str	r2, [r3, #8]
 800431a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800431c:	1d3b      	adds	r3, r7, #4
 800431e:	2200      	movs	r2, #0
 8004320:	601a      	str	r2, [r3, #0]
 8004322:	605a      	str	r2, [r3, #4]
 8004324:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8004326:	4b1e      	ldr	r3, [pc, #120]	; (80043a0 <MX_TIM5_Init+0x98>)
 8004328:	4a1e      	ldr	r2, [pc, #120]	; (80043a4 <MX_TIM5_Init+0x9c>)
 800432a:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 64000-1;
 800432c:	4b1c      	ldr	r3, [pc, #112]	; (80043a0 <MX_TIM5_Init+0x98>)
 800432e:	f64f 12ff 	movw	r2, #63999	; 0xf9ff
 8004332:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004334:	4b1a      	ldr	r3, [pc, #104]	; (80043a0 <MX_TIM5_Init+0x98>)
 8004336:	2200      	movs	r2, #0
 8004338:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 800433a:	4b19      	ldr	r3, [pc, #100]	; (80043a0 <MX_TIM5_Init+0x98>)
 800433c:	f04f 32ff 	mov.w	r2, #4294967295
 8004340:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004342:	4b17      	ldr	r3, [pc, #92]	; (80043a0 <MX_TIM5_Init+0x98>)
 8004344:	2200      	movs	r2, #0
 8004346:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004348:	4b15      	ldr	r3, [pc, #84]	; (80043a0 <MX_TIM5_Init+0x98>)
 800434a:	2200      	movs	r2, #0
 800434c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 800434e:	4814      	ldr	r0, [pc, #80]	; (80043a0 <MX_TIM5_Init+0x98>)
 8004350:	f006 f940 	bl	800a5d4 <HAL_TIM_Base_Init>
 8004354:	4603      	mov	r3, r0
 8004356:	2b00      	cmp	r3, #0
 8004358:	d001      	beq.n	800435e <MX_TIM5_Init+0x56>
  {
    Error_Handler();
 800435a:	f7ff f821 	bl	80033a0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800435e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004362:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8004364:	f107 0310 	add.w	r3, r7, #16
 8004368:	4619      	mov	r1, r3
 800436a:	480d      	ldr	r0, [pc, #52]	; (80043a0 <MX_TIM5_Init+0x98>)
 800436c:	f007 fa0e 	bl	800b78c <HAL_TIM_ConfigClockSource>
 8004370:	4603      	mov	r3, r0
 8004372:	2b00      	cmp	r3, #0
 8004374:	d001      	beq.n	800437a <MX_TIM5_Init+0x72>
  {
    Error_Handler();
 8004376:	f7ff f813 	bl	80033a0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800437a:	2300      	movs	r3, #0
 800437c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800437e:	2300      	movs	r3, #0
 8004380:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8004382:	1d3b      	adds	r3, r7, #4
 8004384:	4619      	mov	r1, r3
 8004386:	4806      	ldr	r0, [pc, #24]	; (80043a0 <MX_TIM5_Init+0x98>)
 8004388:	f008 f874 	bl	800c474 <HAL_TIMEx_MasterConfigSynchronization>
 800438c:	4603      	mov	r3, r0
 800438e:	2b00      	cmp	r3, #0
 8004390:	d001      	beq.n	8004396 <MX_TIM5_Init+0x8e>
  {
    Error_Handler();
 8004392:	f7ff f805 	bl	80033a0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8004396:	bf00      	nop
 8004398:	3720      	adds	r7, #32
 800439a:	46bd      	mov	sp, r7
 800439c:	bd80      	pop	{r7, pc}
 800439e:	bf00      	nop
 80043a0:	24000670 	.word	0x24000670
 80043a4:	40000c00 	.word	0x40000c00

080043a8 <MX_TIM12_Init>:
/* TIM12 init function */
void MX_TIM12_Init(void)
{
 80043a8:	b580      	push	{r7, lr}
 80043aa:	b08c      	sub	sp, #48	; 0x30
 80043ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80043ae:	f107 0320 	add.w	r3, r7, #32
 80043b2:	2200      	movs	r2, #0
 80043b4:	601a      	str	r2, [r3, #0]
 80043b6:	605a      	str	r2, [r3, #4]
 80043b8:	609a      	str	r2, [r3, #8]
 80043ba:	60da      	str	r2, [r3, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80043bc:	1d3b      	adds	r3, r7, #4
 80043be:	2200      	movs	r2, #0
 80043c0:	601a      	str	r2, [r3, #0]
 80043c2:	605a      	str	r2, [r3, #4]
 80043c4:	609a      	str	r2, [r3, #8]
 80043c6:	60da      	str	r2, [r3, #12]
 80043c8:	611a      	str	r2, [r3, #16]
 80043ca:	615a      	str	r2, [r3, #20]
 80043cc:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 80043ce:	4b26      	ldr	r3, [pc, #152]	; (8004468 <MX_TIM12_Init+0xc0>)
 80043d0:	4a26      	ldr	r2, [pc, #152]	; (800446c <MX_TIM12_Init+0xc4>)
 80043d2:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 500-1;
 80043d4:	4b24      	ldr	r3, [pc, #144]	; (8004468 <MX_TIM12_Init+0xc0>)
 80043d6:	f240 12f3 	movw	r2, #499	; 0x1f3
 80043da:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 80043dc:	4b22      	ldr	r3, [pc, #136]	; (8004468 <MX_TIM12_Init+0xc0>)
 80043de:	2200      	movs	r2, #0
 80043e0:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 40000;
 80043e2:	4b21      	ldr	r3, [pc, #132]	; (8004468 <MX_TIM12_Init+0xc0>)
 80043e4:	f649 4240 	movw	r2, #40000	; 0x9c40
 80043e8:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80043ea:	4b1f      	ldr	r3, [pc, #124]	; (8004468 <MX_TIM12_Init+0xc0>)
 80043ec:	2200      	movs	r2, #0
 80043ee:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80043f0:	4b1d      	ldr	r3, [pc, #116]	; (8004468 <MX_TIM12_Init+0xc0>)
 80043f2:	2200      	movs	r2, #0
 80043f4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim12) != HAL_OK)
 80043f6:	481c      	ldr	r0, [pc, #112]	; (8004468 <MX_TIM12_Init+0xc0>)
 80043f8:	f006 f8ec 	bl	800a5d4 <HAL_TIM_Base_Init>
 80043fc:	4603      	mov	r3, r0
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d001      	beq.n	8004406 <MX_TIM12_Init+0x5e>
  {
    Error_Handler();
 8004402:	f7fe ffcd 	bl	80033a0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004406:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800440a:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim12, &sClockSourceConfig) != HAL_OK)
 800440c:	f107 0320 	add.w	r3, r7, #32
 8004410:	4619      	mov	r1, r3
 8004412:	4815      	ldr	r0, [pc, #84]	; (8004468 <MX_TIM12_Init+0xc0>)
 8004414:	f007 f9ba 	bl	800b78c <HAL_TIM_ConfigClockSource>
 8004418:	4603      	mov	r3, r0
 800441a:	2b00      	cmp	r3, #0
 800441c:	d001      	beq.n	8004422 <MX_TIM12_Init+0x7a>
  {
    Error_Handler();
 800441e:	f7fe ffbf 	bl	80033a0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 8004422:	4811      	ldr	r0, [pc, #68]	; (8004468 <MX_TIM12_Init+0xc0>)
 8004424:	f006 fa6d 	bl	800a902 <HAL_TIM_PWM_Init>
 8004428:	4603      	mov	r3, r0
 800442a:	2b00      	cmp	r3, #0
 800442c:	d001      	beq.n	8004432 <MX_TIM12_Init+0x8a>
  {
    Error_Handler();
 800442e:	f7fe ffb7 	bl	80033a0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004432:	2360      	movs	r3, #96	; 0x60
 8004434:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 20000;
 8004436:	f644 6320 	movw	r3, #20000	; 0x4e20
 800443a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800443c:	2300      	movs	r3, #0
 800443e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004440:	2300      	movs	r3, #0
 8004442:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004444:	1d3b      	adds	r3, r7, #4
 8004446:	2200      	movs	r2, #0
 8004448:	4619      	mov	r1, r3
 800444a:	4807      	ldr	r0, [pc, #28]	; (8004468 <MX_TIM12_Init+0xc0>)
 800444c:	f007 f88a 	bl	800b564 <HAL_TIM_PWM_ConfigChannel>
 8004450:	4603      	mov	r3, r0
 8004452:	2b00      	cmp	r3, #0
 8004454:	d001      	beq.n	800445a <MX_TIM12_Init+0xb2>
  {
    Error_Handler();
 8004456:	f7fe ffa3 	bl	80033a0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 800445a:	4803      	ldr	r0, [pc, #12]	; (8004468 <MX_TIM12_Init+0xc0>)
 800445c:	f000 fa44 	bl	80048e8 <HAL_TIM_MspPostInit>

}
 8004460:	bf00      	nop
 8004462:	3730      	adds	r7, #48	; 0x30
 8004464:	46bd      	mov	sp, r7
 8004466:	bd80      	pop	{r7, pc}
 8004468:	240006bc 	.word	0x240006bc
 800446c:	40001800 	.word	0x40001800

08004470 <MX_TIM13_Init>:
/* TIM13 init function */
void MX_TIM13_Init(void)
{
 8004470:	b580      	push	{r7, lr}
 8004472:	b088      	sub	sp, #32
 8004474:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM13_Init 0 */

  /* USER CODE END TIM13_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8004476:	1d3b      	adds	r3, r7, #4
 8004478:	2200      	movs	r2, #0
 800447a:	601a      	str	r2, [r3, #0]
 800447c:	605a      	str	r2, [r3, #4]
 800447e:	609a      	str	r2, [r3, #8]
 8004480:	60da      	str	r2, [r3, #12]
 8004482:	611a      	str	r2, [r3, #16]
 8004484:	615a      	str	r2, [r3, #20]
 8004486:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 8004488:	4b1f      	ldr	r3, [pc, #124]	; (8004508 <MX_TIM13_Init+0x98>)
 800448a:	4a20      	ldr	r2, [pc, #128]	; (800450c <MX_TIM13_Init+0x9c>)
 800448c:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 500-1;
 800448e:	4b1e      	ldr	r3, [pc, #120]	; (8004508 <MX_TIM13_Init+0x98>)
 8004490:	f240 12f3 	movw	r2, #499	; 0x1f3
 8004494:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004496:	4b1c      	ldr	r3, [pc, #112]	; (8004508 <MX_TIM13_Init+0x98>)
 8004498:	2200      	movs	r2, #0
 800449a:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 40000;
 800449c:	4b1a      	ldr	r3, [pc, #104]	; (8004508 <MX_TIM13_Init+0x98>)
 800449e:	f649 4240 	movw	r2, #40000	; 0x9c40
 80044a2:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80044a4:	4b18      	ldr	r3, [pc, #96]	; (8004508 <MX_TIM13_Init+0x98>)
 80044a6:	2200      	movs	r2, #0
 80044a8:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80044aa:	4b17      	ldr	r3, [pc, #92]	; (8004508 <MX_TIM13_Init+0x98>)
 80044ac:	2200      	movs	r2, #0
 80044ae:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 80044b0:	4815      	ldr	r0, [pc, #84]	; (8004508 <MX_TIM13_Init+0x98>)
 80044b2:	f006 f88f 	bl	800a5d4 <HAL_TIM_Base_Init>
 80044b6:	4603      	mov	r3, r0
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d001      	beq.n	80044c0 <MX_TIM13_Init+0x50>
  {
    Error_Handler();
 80044bc:	f7fe ff70 	bl	80033a0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim13) != HAL_OK)
 80044c0:	4811      	ldr	r0, [pc, #68]	; (8004508 <MX_TIM13_Init+0x98>)
 80044c2:	f006 fa1e 	bl	800a902 <HAL_TIM_PWM_Init>
 80044c6:	4603      	mov	r3, r0
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d001      	beq.n	80044d0 <MX_TIM13_Init+0x60>
  {
    Error_Handler();
 80044cc:	f7fe ff68 	bl	80033a0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80044d0:	2360      	movs	r3, #96	; 0x60
 80044d2:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 20000;
 80044d4:	f644 6320 	movw	r3, #20000	; 0x4e20
 80044d8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80044da:	2300      	movs	r3, #0
 80044dc:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80044de:	2300      	movs	r3, #0
 80044e0:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim13, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80044e2:	1d3b      	adds	r3, r7, #4
 80044e4:	2200      	movs	r2, #0
 80044e6:	4619      	mov	r1, r3
 80044e8:	4807      	ldr	r0, [pc, #28]	; (8004508 <MX_TIM13_Init+0x98>)
 80044ea:	f007 f83b 	bl	800b564 <HAL_TIM_PWM_ConfigChannel>
 80044ee:	4603      	mov	r3, r0
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d001      	beq.n	80044f8 <MX_TIM13_Init+0x88>
  {
    Error_Handler();
 80044f4:	f7fe ff54 	bl	80033a0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */
  HAL_TIM_MspPostInit(&htim13);
 80044f8:	4803      	ldr	r0, [pc, #12]	; (8004508 <MX_TIM13_Init+0x98>)
 80044fa:	f000 f9f5 	bl	80048e8 <HAL_TIM_MspPostInit>

}
 80044fe:	bf00      	nop
 8004500:	3720      	adds	r7, #32
 8004502:	46bd      	mov	sp, r7
 8004504:	bd80      	pop	{r7, pc}
 8004506:	bf00      	nop
 8004508:	24000708 	.word	0x24000708
 800450c:	40001c00 	.word	0x40001c00

08004510 <MX_TIM14_Init>:
/* TIM14 init function */
void MX_TIM14_Init(void)
{
 8004510:	b580      	push	{r7, lr}
 8004512:	b088      	sub	sp, #32
 8004514:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM14_Init 0 */

  /* USER CODE END TIM14_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8004516:	1d3b      	adds	r3, r7, #4
 8004518:	2200      	movs	r2, #0
 800451a:	601a      	str	r2, [r3, #0]
 800451c:	605a      	str	r2, [r3, #4]
 800451e:	609a      	str	r2, [r3, #8]
 8004520:	60da      	str	r2, [r3, #12]
 8004522:	611a      	str	r2, [r3, #16]
 8004524:	615a      	str	r2, [r3, #20]
 8004526:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8004528:	4b1f      	ldr	r3, [pc, #124]	; (80045a8 <MX_TIM14_Init+0x98>)
 800452a:	4a20      	ldr	r2, [pc, #128]	; (80045ac <MX_TIM14_Init+0x9c>)
 800452c:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 500-1;
 800452e:	4b1e      	ldr	r3, [pc, #120]	; (80045a8 <MX_TIM14_Init+0x98>)
 8004530:	f240 12f3 	movw	r2, #499	; 0x1f3
 8004534:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004536:	4b1c      	ldr	r3, [pc, #112]	; (80045a8 <MX_TIM14_Init+0x98>)
 8004538:	2200      	movs	r2, #0
 800453a:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 40000;
 800453c:	4b1a      	ldr	r3, [pc, #104]	; (80045a8 <MX_TIM14_Init+0x98>)
 800453e:	f649 4240 	movw	r2, #40000	; 0x9c40
 8004542:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004544:	4b18      	ldr	r3, [pc, #96]	; (80045a8 <MX_TIM14_Init+0x98>)
 8004546:	2200      	movs	r2, #0
 8004548:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800454a:	4b17      	ldr	r3, [pc, #92]	; (80045a8 <MX_TIM14_Init+0x98>)
 800454c:	2200      	movs	r2, #0
 800454e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8004550:	4815      	ldr	r0, [pc, #84]	; (80045a8 <MX_TIM14_Init+0x98>)
 8004552:	f006 f83f 	bl	800a5d4 <HAL_TIM_Base_Init>
 8004556:	4603      	mov	r3, r0
 8004558:	2b00      	cmp	r3, #0
 800455a:	d001      	beq.n	8004560 <MX_TIM14_Init+0x50>
  {
    Error_Handler();
 800455c:	f7fe ff20 	bl	80033a0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim14) != HAL_OK)
 8004560:	4811      	ldr	r0, [pc, #68]	; (80045a8 <MX_TIM14_Init+0x98>)
 8004562:	f006 f9ce 	bl	800a902 <HAL_TIM_PWM_Init>
 8004566:	4603      	mov	r3, r0
 8004568:	2b00      	cmp	r3, #0
 800456a:	d001      	beq.n	8004570 <MX_TIM14_Init+0x60>
  {
    Error_Handler();
 800456c:	f7fe ff18 	bl	80033a0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004570:	2360      	movs	r3, #96	; 0x60
 8004572:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 20000;
 8004574:	f644 6320 	movw	r3, #20000	; 0x4e20
 8004578:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800457a:	2300      	movs	r3, #0
 800457c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800457e:	2300      	movs	r3, #0
 8004580:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim14, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004582:	1d3b      	adds	r3, r7, #4
 8004584:	2200      	movs	r2, #0
 8004586:	4619      	mov	r1, r3
 8004588:	4807      	ldr	r0, [pc, #28]	; (80045a8 <MX_TIM14_Init+0x98>)
 800458a:	f006 ffeb 	bl	800b564 <HAL_TIM_PWM_ConfigChannel>
 800458e:	4603      	mov	r3, r0
 8004590:	2b00      	cmp	r3, #0
 8004592:	d001      	beq.n	8004598 <MX_TIM14_Init+0x88>
  {
    Error_Handler();
 8004594:	f7fe ff04 	bl	80033a0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */
  HAL_TIM_MspPostInit(&htim14);
 8004598:	4803      	ldr	r0, [pc, #12]	; (80045a8 <MX_TIM14_Init+0x98>)
 800459a:	f000 f9a5 	bl	80048e8 <HAL_TIM_MspPostInit>

}
 800459e:	bf00      	nop
 80045a0:	3720      	adds	r7, #32
 80045a2:	46bd      	mov	sp, r7
 80045a4:	bd80      	pop	{r7, pc}
 80045a6:	bf00      	nop
 80045a8:	24000754 	.word	0x24000754
 80045ac:	40002000 	.word	0x40002000

080045b0 <MX_TIM15_Init>:
/* TIM15 init function */
void MX_TIM15_Init(void)
{
 80045b0:	b580      	push	{r7, lr}
 80045b2:	b088      	sub	sp, #32
 80045b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80045b6:	f107 0310 	add.w	r3, r7, #16
 80045ba:	2200      	movs	r2, #0
 80045bc:	601a      	str	r2, [r3, #0]
 80045be:	605a      	str	r2, [r3, #4]
 80045c0:	609a      	str	r2, [r3, #8]
 80045c2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80045c4:	1d3b      	adds	r3, r7, #4
 80045c6:	2200      	movs	r2, #0
 80045c8:	601a      	str	r2, [r3, #0]
 80045ca:	605a      	str	r2, [r3, #4]
 80045cc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 80045ce:	4b1f      	ldr	r3, [pc, #124]	; (800464c <MX_TIM15_Init+0x9c>)
 80045d0:	4a1f      	ldr	r2, [pc, #124]	; (8004650 <MX_TIM15_Init+0xa0>)
 80045d2:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 1;
 80045d4:	4b1d      	ldr	r3, [pc, #116]	; (800464c <MX_TIM15_Init+0x9c>)
 80045d6:	2201      	movs	r2, #1
 80045d8:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 80045da:	4b1c      	ldr	r3, [pc, #112]	; (800464c <MX_TIM15_Init+0x9c>)
 80045dc:	2200      	movs	r2, #0
 80045de:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 64000;
 80045e0:	4b1a      	ldr	r3, [pc, #104]	; (800464c <MX_TIM15_Init+0x9c>)
 80045e2:	f44f 427a 	mov.w	r2, #64000	; 0xfa00
 80045e6:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80045e8:	4b18      	ldr	r3, [pc, #96]	; (800464c <MX_TIM15_Init+0x9c>)
 80045ea:	2200      	movs	r2, #0
 80045ec:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 80045ee:	4b17      	ldr	r3, [pc, #92]	; (800464c <MX_TIM15_Init+0x9c>)
 80045f0:	2200      	movs	r2, #0
 80045f2:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80045f4:	4b15      	ldr	r3, [pc, #84]	; (800464c <MX_TIM15_Init+0x9c>)
 80045f6:	2200      	movs	r2, #0
 80045f8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 80045fa:	4814      	ldr	r0, [pc, #80]	; (800464c <MX_TIM15_Init+0x9c>)
 80045fc:	f005 ffea 	bl	800a5d4 <HAL_TIM_Base_Init>
 8004600:	4603      	mov	r3, r0
 8004602:	2b00      	cmp	r3, #0
 8004604:	d001      	beq.n	800460a <MX_TIM15_Init+0x5a>
  {
    Error_Handler();
 8004606:	f7fe fecb 	bl	80033a0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800460a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800460e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 8004610:	f107 0310 	add.w	r3, r7, #16
 8004614:	4619      	mov	r1, r3
 8004616:	480d      	ldr	r0, [pc, #52]	; (800464c <MX_TIM15_Init+0x9c>)
 8004618:	f007 f8b8 	bl	800b78c <HAL_TIM_ConfigClockSource>
 800461c:	4603      	mov	r3, r0
 800461e:	2b00      	cmp	r3, #0
 8004620:	d001      	beq.n	8004626 <MX_TIM15_Init+0x76>
  {
    Error_Handler();
 8004622:	f7fe febd 	bl	80033a0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004626:	2300      	movs	r3, #0
 8004628:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800462a:	2300      	movs	r3, #0
 800462c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 800462e:	1d3b      	adds	r3, r7, #4
 8004630:	4619      	mov	r1, r3
 8004632:	4806      	ldr	r0, [pc, #24]	; (800464c <MX_TIM15_Init+0x9c>)
 8004634:	f007 ff1e 	bl	800c474 <HAL_TIMEx_MasterConfigSynchronization>
 8004638:	4603      	mov	r3, r0
 800463a:	2b00      	cmp	r3, #0
 800463c:	d001      	beq.n	8004642 <MX_TIM15_Init+0x92>
  {
    Error_Handler();
 800463e:	f7fe feaf 	bl	80033a0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */

}
 8004642:	bf00      	nop
 8004644:	3720      	adds	r7, #32
 8004646:	46bd      	mov	sp, r7
 8004648:	bd80      	pop	{r7, pc}
 800464a:	bf00      	nop
 800464c:	240007a0 	.word	0x240007a0
 8004650:	40014000 	.word	0x40014000

08004654 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8004654:	b580      	push	{r7, lr}
 8004656:	b092      	sub	sp, #72	; 0x48
 8004658:	af00      	add	r7, sp, #0
 800465a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800465c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8004660:	2200      	movs	r2, #0
 8004662:	601a      	str	r2, [r3, #0]
 8004664:	605a      	str	r2, [r3, #4]
 8004666:	609a      	str	r2, [r3, #8]
 8004668:	60da      	str	r2, [r3, #12]
 800466a:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM2)
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004674:	d136      	bne.n	80046e4 <HAL_TIM_Base_MspInit+0x90>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8004676:	4b92      	ldr	r3, [pc, #584]	; (80048c0 <HAL_TIM_Base_MspInit+0x26c>)
 8004678:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800467c:	4a90      	ldr	r2, [pc, #576]	; (80048c0 <HAL_TIM_Base_MspInit+0x26c>)
 800467e:	f043 0301 	orr.w	r3, r3, #1
 8004682:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8004686:	4b8e      	ldr	r3, [pc, #568]	; (80048c0 <HAL_TIM_Base_MspInit+0x26c>)
 8004688:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800468c:	f003 0301 	and.w	r3, r3, #1
 8004690:	633b      	str	r3, [r7, #48]	; 0x30
 8004692:	6b3b      	ldr	r3, [r7, #48]	; 0x30

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004694:	4b8a      	ldr	r3, [pc, #552]	; (80048c0 <HAL_TIM_Base_MspInit+0x26c>)
 8004696:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800469a:	4a89      	ldr	r2, [pc, #548]	; (80048c0 <HAL_TIM_Base_MspInit+0x26c>)
 800469c:	f043 0301 	orr.w	r3, r3, #1
 80046a0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80046a4:	4b86      	ldr	r3, [pc, #536]	; (80048c0 <HAL_TIM_Base_MspInit+0x26c>)
 80046a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80046aa:	f003 0301 	and.w	r3, r3, #1
 80046ae:	62fb      	str	r3, [r7, #44]	; 0x2c
 80046b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = E_CountPap1_Pin;
 80046b2:	2320      	movs	r3, #32
 80046b4:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80046b6:	2302      	movs	r3, #2
 80046b8:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80046ba:	2302      	movs	r3, #2
 80046bc:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80046be:	2300      	movs	r3, #0
 80046c0:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80046c2:	2301      	movs	r3, #1
 80046c4:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(E_CountPap1_GPIO_Port, &GPIO_InitStruct);
 80046c6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80046ca:	4619      	mov	r1, r3
 80046cc:	487d      	ldr	r0, [pc, #500]	; (80048c4 <HAL_TIM_Base_MspInit+0x270>)
 80046ce:	f003 fa29 	bl	8007b24 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 1, 0);
 80046d2:	2200      	movs	r2, #0
 80046d4:	2101      	movs	r1, #1
 80046d6:	201c      	movs	r0, #28
 80046d8:	f002 fc7d 	bl	8006fd6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80046dc:	201c      	movs	r0, #28
 80046de:	f002 fc94 	bl	800700a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM15_IRQn);
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }
}
 80046e2:	e0e8      	b.n	80048b6 <HAL_TIM_Base_MspInit+0x262>
  else if(tim_baseHandle->Instance==TIM3)
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	4a77      	ldr	r2, [pc, #476]	; (80048c8 <HAL_TIM_Base_MspInit+0x274>)
 80046ea:	4293      	cmp	r3, r2
 80046ec:	d136      	bne.n	800475c <HAL_TIM_Base_MspInit+0x108>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80046ee:	4b74      	ldr	r3, [pc, #464]	; (80048c0 <HAL_TIM_Base_MspInit+0x26c>)
 80046f0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80046f4:	4a72      	ldr	r2, [pc, #456]	; (80048c0 <HAL_TIM_Base_MspInit+0x26c>)
 80046f6:	f043 0302 	orr.w	r3, r3, #2
 80046fa:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80046fe:	4b70      	ldr	r3, [pc, #448]	; (80048c0 <HAL_TIM_Base_MspInit+0x26c>)
 8004700:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004704:	f003 0302 	and.w	r3, r3, #2
 8004708:	62bb      	str	r3, [r7, #40]	; 0x28
 800470a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800470c:	4b6c      	ldr	r3, [pc, #432]	; (80048c0 <HAL_TIM_Base_MspInit+0x26c>)
 800470e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004712:	4a6b      	ldr	r2, [pc, #428]	; (80048c0 <HAL_TIM_Base_MspInit+0x26c>)
 8004714:	f043 0301 	orr.w	r3, r3, #1
 8004718:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800471c:	4b68      	ldr	r3, [pc, #416]	; (80048c0 <HAL_TIM_Base_MspInit+0x26c>)
 800471e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004722:	f003 0301 	and.w	r3, r3, #1
 8004726:	627b      	str	r3, [r7, #36]	; 0x24
 8004728:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pin = E_CountPaP2_Pin;
 800472a:	2340      	movs	r3, #64	; 0x40
 800472c:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800472e:	2302      	movs	r3, #2
 8004730:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8004732:	2302      	movs	r3, #2
 8004734:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004736:	2300      	movs	r3, #0
 8004738:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800473a:	2302      	movs	r3, #2
 800473c:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(E_CountPaP2_GPIO_Port, &GPIO_InitStruct);
 800473e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8004742:	4619      	mov	r1, r3
 8004744:	485f      	ldr	r0, [pc, #380]	; (80048c4 <HAL_TIM_Base_MspInit+0x270>)
 8004746:	f003 f9ed 	bl	8007b24 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM3_IRQn, 1, 0);
 800474a:	2200      	movs	r2, #0
 800474c:	2101      	movs	r1, #1
 800474e:	201d      	movs	r0, #29
 8004750:	f002 fc41 	bl	8006fd6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8004754:	201d      	movs	r0, #29
 8004756:	f002 fc58 	bl	800700a <HAL_NVIC_EnableIRQ>
}
 800475a:	e0ac      	b.n	80048b6 <HAL_TIM_Base_MspInit+0x262>
  else if(tim_baseHandle->Instance==TIM4)
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	4a5a      	ldr	r2, [pc, #360]	; (80048cc <HAL_TIM_Base_MspInit+0x278>)
 8004762:	4293      	cmp	r3, r2
 8004764:	d137      	bne.n	80047d6 <HAL_TIM_Base_MspInit+0x182>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8004766:	4b56      	ldr	r3, [pc, #344]	; (80048c0 <HAL_TIM_Base_MspInit+0x26c>)
 8004768:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800476c:	4a54      	ldr	r2, [pc, #336]	; (80048c0 <HAL_TIM_Base_MspInit+0x26c>)
 800476e:	f043 0304 	orr.w	r3, r3, #4
 8004772:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8004776:	4b52      	ldr	r3, [pc, #328]	; (80048c0 <HAL_TIM_Base_MspInit+0x26c>)
 8004778:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800477c:	f003 0304 	and.w	r3, r3, #4
 8004780:	623b      	str	r3, [r7, #32]
 8004782:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8004784:	4b4e      	ldr	r3, [pc, #312]	; (80048c0 <HAL_TIM_Base_MspInit+0x26c>)
 8004786:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800478a:	4a4d      	ldr	r2, [pc, #308]	; (80048c0 <HAL_TIM_Base_MspInit+0x26c>)
 800478c:	f043 0308 	orr.w	r3, r3, #8
 8004790:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004794:	4b4a      	ldr	r3, [pc, #296]	; (80048c0 <HAL_TIM_Base_MspInit+0x26c>)
 8004796:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800479a:	f003 0308 	and.w	r3, r3, #8
 800479e:	61fb      	str	r3, [r7, #28]
 80047a0:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = E_CountPaP3_Pin;
 80047a2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80047a6:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80047a8:	2302      	movs	r3, #2
 80047aa:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80047ac:	2302      	movs	r3, #2
 80047ae:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80047b0:	2300      	movs	r3, #0
 80047b2:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80047b4:	2302      	movs	r3, #2
 80047b6:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(E_CountPaP3_GPIO_Port, &GPIO_InitStruct);
 80047b8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80047bc:	4619      	mov	r1, r3
 80047be:	4844      	ldr	r0, [pc, #272]	; (80048d0 <HAL_TIM_Base_MspInit+0x27c>)
 80047c0:	f003 f9b0 	bl	8007b24 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 1, 0);
 80047c4:	2200      	movs	r2, #0
 80047c6:	2101      	movs	r1, #1
 80047c8:	201e      	movs	r0, #30
 80047ca:	f002 fc04 	bl	8006fd6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80047ce:	201e      	movs	r0, #30
 80047d0:	f002 fc1b 	bl	800700a <HAL_NVIC_EnableIRQ>
}
 80047d4:	e06f      	b.n	80048b6 <HAL_TIM_Base_MspInit+0x262>
  else if(tim_baseHandle->Instance==TIM5)
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	4a3e      	ldr	r2, [pc, #248]	; (80048d4 <HAL_TIM_Base_MspInit+0x280>)
 80047dc:	4293      	cmp	r3, r2
 80047de:	d10f      	bne.n	8004800 <HAL_TIM_Base_MspInit+0x1ac>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80047e0:	4b37      	ldr	r3, [pc, #220]	; (80048c0 <HAL_TIM_Base_MspInit+0x26c>)
 80047e2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80047e6:	4a36      	ldr	r2, [pc, #216]	; (80048c0 <HAL_TIM_Base_MspInit+0x26c>)
 80047e8:	f043 0308 	orr.w	r3, r3, #8
 80047ec:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80047f0:	4b33      	ldr	r3, [pc, #204]	; (80048c0 <HAL_TIM_Base_MspInit+0x26c>)
 80047f2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80047f6:	f003 0308 	and.w	r3, r3, #8
 80047fa:	61bb      	str	r3, [r7, #24]
 80047fc:	69bb      	ldr	r3, [r7, #24]
}
 80047fe:	e05a      	b.n	80048b6 <HAL_TIM_Base_MspInit+0x262>
  else if(tim_baseHandle->Instance==TIM12)
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	4a34      	ldr	r2, [pc, #208]	; (80048d8 <HAL_TIM_Base_MspInit+0x284>)
 8004806:	4293      	cmp	r3, r2
 8004808:	d10f      	bne.n	800482a <HAL_TIM_Base_MspInit+0x1d6>
    __HAL_RCC_TIM12_CLK_ENABLE();
 800480a:	4b2d      	ldr	r3, [pc, #180]	; (80048c0 <HAL_TIM_Base_MspInit+0x26c>)
 800480c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004810:	4a2b      	ldr	r2, [pc, #172]	; (80048c0 <HAL_TIM_Base_MspInit+0x26c>)
 8004812:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004816:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800481a:	4b29      	ldr	r3, [pc, #164]	; (80048c0 <HAL_TIM_Base_MspInit+0x26c>)
 800481c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004820:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004824:	617b      	str	r3, [r7, #20]
 8004826:	697b      	ldr	r3, [r7, #20]
}
 8004828:	e045      	b.n	80048b6 <HAL_TIM_Base_MspInit+0x262>
  else if(tim_baseHandle->Instance==TIM13)
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	4a2b      	ldr	r2, [pc, #172]	; (80048dc <HAL_TIM_Base_MspInit+0x288>)
 8004830:	4293      	cmp	r3, r2
 8004832:	d10f      	bne.n	8004854 <HAL_TIM_Base_MspInit+0x200>
    __HAL_RCC_TIM13_CLK_ENABLE();
 8004834:	4b22      	ldr	r3, [pc, #136]	; (80048c0 <HAL_TIM_Base_MspInit+0x26c>)
 8004836:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800483a:	4a21      	ldr	r2, [pc, #132]	; (80048c0 <HAL_TIM_Base_MspInit+0x26c>)
 800483c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004840:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8004844:	4b1e      	ldr	r3, [pc, #120]	; (80048c0 <HAL_TIM_Base_MspInit+0x26c>)
 8004846:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800484a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800484e:	613b      	str	r3, [r7, #16]
 8004850:	693b      	ldr	r3, [r7, #16]
}
 8004852:	e030      	b.n	80048b6 <HAL_TIM_Base_MspInit+0x262>
  else if(tim_baseHandle->Instance==TIM14)
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	4a21      	ldr	r2, [pc, #132]	; (80048e0 <HAL_TIM_Base_MspInit+0x28c>)
 800485a:	4293      	cmp	r3, r2
 800485c:	d10f      	bne.n	800487e <HAL_TIM_Base_MspInit+0x22a>
    __HAL_RCC_TIM14_CLK_ENABLE();
 800485e:	4b18      	ldr	r3, [pc, #96]	; (80048c0 <HAL_TIM_Base_MspInit+0x26c>)
 8004860:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004864:	4a16      	ldr	r2, [pc, #88]	; (80048c0 <HAL_TIM_Base_MspInit+0x26c>)
 8004866:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800486a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800486e:	4b14      	ldr	r3, [pc, #80]	; (80048c0 <HAL_TIM_Base_MspInit+0x26c>)
 8004870:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004874:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004878:	60fb      	str	r3, [r7, #12]
 800487a:	68fb      	ldr	r3, [r7, #12]
}
 800487c:	e01b      	b.n	80048b6 <HAL_TIM_Base_MspInit+0x262>
  else if(tim_baseHandle->Instance==TIM15)
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	4a18      	ldr	r2, [pc, #96]	; (80048e4 <HAL_TIM_Base_MspInit+0x290>)
 8004884:	4293      	cmp	r3, r2
 8004886:	d116      	bne.n	80048b6 <HAL_TIM_Base_MspInit+0x262>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8004888:	4b0d      	ldr	r3, [pc, #52]	; (80048c0 <HAL_TIM_Base_MspInit+0x26c>)
 800488a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800488e:	4a0c      	ldr	r2, [pc, #48]	; (80048c0 <HAL_TIM_Base_MspInit+0x26c>)
 8004890:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004894:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8004898:	4b09      	ldr	r3, [pc, #36]	; (80048c0 <HAL_TIM_Base_MspInit+0x26c>)
 800489a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800489e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80048a2:	60bb      	str	r3, [r7, #8]
 80048a4:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM15_IRQn, 1, 0);
 80048a6:	2200      	movs	r2, #0
 80048a8:	2101      	movs	r1, #1
 80048aa:	2074      	movs	r0, #116	; 0x74
 80048ac:	f002 fb93 	bl	8006fd6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM15_IRQn);
 80048b0:	2074      	movs	r0, #116	; 0x74
 80048b2:	f002 fbaa 	bl	800700a <HAL_NVIC_EnableIRQ>
}
 80048b6:	bf00      	nop
 80048b8:	3748      	adds	r7, #72	; 0x48
 80048ba:	46bd      	mov	sp, r7
 80048bc:	bd80      	pop	{r7, pc}
 80048be:	bf00      	nop
 80048c0:	58024400 	.word	0x58024400
 80048c4:	58020000 	.word	0x58020000
 80048c8:	40000400 	.word	0x40000400
 80048cc:	40000800 	.word	0x40000800
 80048d0:	58020c00 	.word	0x58020c00
 80048d4:	40000c00 	.word	0x40000c00
 80048d8:	40001800 	.word	0x40001800
 80048dc:	40001c00 	.word	0x40001c00
 80048e0:	40002000 	.word	0x40002000
 80048e4:	40014000 	.word	0x40014000

080048e8 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80048e8:	b580      	push	{r7, lr}
 80048ea:	b08a      	sub	sp, #40	; 0x28
 80048ec:	af00      	add	r7, sp, #0
 80048ee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80048f0:	f107 0314 	add.w	r3, r7, #20
 80048f4:	2200      	movs	r2, #0
 80048f6:	601a      	str	r2, [r3, #0]
 80048f8:	605a      	str	r2, [r3, #4]
 80048fa:	609a      	str	r2, [r3, #8]
 80048fc:	60da      	str	r2, [r3, #12]
 80048fe:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM12)
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	4a39      	ldr	r2, [pc, #228]	; (80049ec <HAL_TIM_MspPostInit+0x104>)
 8004906:	4293      	cmp	r3, r2
 8004908:	d120      	bne.n	800494c <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM12_MspPostInit 0 */

  /* USER CODE END TIM12_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800490a:	4b39      	ldr	r3, [pc, #228]	; (80049f0 <HAL_TIM_MspPostInit+0x108>)
 800490c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004910:	4a37      	ldr	r2, [pc, #220]	; (80049f0 <HAL_TIM_MspPostInit+0x108>)
 8004912:	f043 0302 	orr.w	r3, r3, #2
 8004916:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800491a:	4b35      	ldr	r3, [pc, #212]	; (80049f0 <HAL_TIM_MspPostInit+0x108>)
 800491c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004920:	f003 0302 	and.w	r3, r3, #2
 8004924:	613b      	str	r3, [r7, #16]
 8004926:	693b      	ldr	r3, [r7, #16]
    /**TIM12 GPIO Configuration
    PB14     ------> TIM12_CH1
    */
    GPIO_InitStruct.Pin = S_PulsoPaP1_Pin;
 8004928:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800492c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800492e:	2302      	movs	r3, #2
 8004930:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8004932:	2302      	movs	r3, #2
 8004934:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004936:	2300      	movs	r3, #0
 8004938:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM12;
 800493a:	2302      	movs	r3, #2
 800493c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(S_PulsoPaP1_GPIO_Port, &GPIO_InitStruct);
 800493e:	f107 0314 	add.w	r3, r7, #20
 8004942:	4619      	mov	r1, r3
 8004944:	482b      	ldr	r0, [pc, #172]	; (80049f4 <HAL_TIM_MspPostInit+0x10c>)
 8004946:	f003 f8ed 	bl	8007b24 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM14_MspPostInit 1 */

  /* USER CODE END TIM14_MspPostInit 1 */
  }

}
 800494a:	e04a      	b.n	80049e2 <HAL_TIM_MspPostInit+0xfa>
  else if(timHandle->Instance==TIM13)
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	4a29      	ldr	r2, [pc, #164]	; (80049f8 <HAL_TIM_MspPostInit+0x110>)
 8004952:	4293      	cmp	r3, r2
 8004954:	d120      	bne.n	8004998 <HAL_TIM_MspPostInit+0xb0>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8004956:	4b26      	ldr	r3, [pc, #152]	; (80049f0 <HAL_TIM_MspPostInit+0x108>)
 8004958:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800495c:	4a24      	ldr	r2, [pc, #144]	; (80049f0 <HAL_TIM_MspPostInit+0x108>)
 800495e:	f043 0320 	orr.w	r3, r3, #32
 8004962:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004966:	4b22      	ldr	r3, [pc, #136]	; (80049f0 <HAL_TIM_MspPostInit+0x108>)
 8004968:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800496c:	f003 0320 	and.w	r3, r3, #32
 8004970:	60fb      	str	r3, [r7, #12]
 8004972:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = S_PulsoPaP2_Pin;
 8004974:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004978:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800497a:	2302      	movs	r3, #2
 800497c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800497e:	2302      	movs	r3, #2
 8004980:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004982:	2300      	movs	r3, #0
 8004984:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM13;
 8004986:	2309      	movs	r3, #9
 8004988:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(S_PulsoPaP2_GPIO_Port, &GPIO_InitStruct);
 800498a:	f107 0314 	add.w	r3, r7, #20
 800498e:	4619      	mov	r1, r3
 8004990:	481a      	ldr	r0, [pc, #104]	; (80049fc <HAL_TIM_MspPostInit+0x114>)
 8004992:	f003 f8c7 	bl	8007b24 <HAL_GPIO_Init>
}
 8004996:	e024      	b.n	80049e2 <HAL_TIM_MspPostInit+0xfa>
  else if(timHandle->Instance==TIM14)
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	4a18      	ldr	r2, [pc, #96]	; (8004a00 <HAL_TIM_MspPostInit+0x118>)
 800499e:	4293      	cmp	r3, r2
 80049a0:	d11f      	bne.n	80049e2 <HAL_TIM_MspPostInit+0xfa>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80049a2:	4b13      	ldr	r3, [pc, #76]	; (80049f0 <HAL_TIM_MspPostInit+0x108>)
 80049a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80049a8:	4a11      	ldr	r2, [pc, #68]	; (80049f0 <HAL_TIM_MspPostInit+0x108>)
 80049aa:	f043 0320 	orr.w	r3, r3, #32
 80049ae:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80049b2:	4b0f      	ldr	r3, [pc, #60]	; (80049f0 <HAL_TIM_MspPostInit+0x108>)
 80049b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80049b8:	f003 0320 	and.w	r3, r3, #32
 80049bc:	60bb      	str	r3, [r7, #8]
 80049be:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = S_PulsoPaP3_Pin;
 80049c0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80049c4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80049c6:	2302      	movs	r3, #2
 80049c8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80049ca:	2302      	movs	r3, #2
 80049cc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80049ce:	2300      	movs	r3, #0
 80049d0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM14;
 80049d2:	2309      	movs	r3, #9
 80049d4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(S_PulsoPaP3_GPIO_Port, &GPIO_InitStruct);
 80049d6:	f107 0314 	add.w	r3, r7, #20
 80049da:	4619      	mov	r1, r3
 80049dc:	4807      	ldr	r0, [pc, #28]	; (80049fc <HAL_TIM_MspPostInit+0x114>)
 80049de:	f003 f8a1 	bl	8007b24 <HAL_GPIO_Init>
}
 80049e2:	bf00      	nop
 80049e4:	3728      	adds	r7, #40	; 0x28
 80049e6:	46bd      	mov	sp, r7
 80049e8:	bd80      	pop	{r7, pc}
 80049ea:	bf00      	nop
 80049ec:	40001800 	.word	0x40001800
 80049f0:	58024400 	.word	0x58024400
 80049f4:	58020400 	.word	0x58020400
 80049f8:	40001c00 	.word	0x40001c00
 80049fc:	58021400 	.word	0x58021400
 8004a00:	40002000 	.word	0x40002000
 8004a04:	00000000 	.word	0x00000000

08004a08 <inicializarTrayectoria>:

double DVHip, Aaux1, ViHip2, XiHip2, Aaux, XiHip3, ViHip4, XiHip4;

//(Posinicio , Posfin , Vinicio , Vfin , Vmaxima, Amaxima, jerk)

void inicializarTrayectoria(double XiHip1, double XfHip4, double V0Hip, double Vf, double Vmax, double Amax, double Jerk) {
 8004a08:	b580      	push	{r7, lr}
 8004a0a:	ed2d 8b04 	vpush	{d8-d9}
 8004a0e:	b090      	sub	sp, #64	; 0x40
 8004a10:	af00      	add	r7, sp, #0
 8004a12:	ed87 0b0c 	vstr	d0, [r7, #48]	; 0x30
 8004a16:	ed87 1b0a 	vstr	d1, [r7, #40]	; 0x28
 8004a1a:	ed87 2b08 	vstr	d2, [r7, #32]
 8004a1e:	ed87 3b06 	vstr	d3, [r7, #24]
 8004a22:	ed87 4b04 	vstr	d4, [r7, #16]
 8004a26:	ed87 5b02 	vstr	d5, [r7, #8]
 8004a2a:	ed87 6b00 	vstr	d6, [r7]

	if (XfHip4 < XiHip1) {
 8004a2e:	ed97 6b0a 	vldr	d6, [r7, #40]	; 0x28
 8004a32:	ed97 7b0c 	vldr	d7, [r7, #48]	; 0x30
 8004a36:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8004a3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a3e:	d519      	bpl.n	8004a74 <inicializarTrayectoria+0x6c>
		Ai = -Amax;
 8004a40:	ed97 7b02 	vldr	d7, [r7, #8]
 8004a44:	eeb1 7b47 	vneg.f64	d7, d7
 8004a48:	4b7e      	ldr	r3, [pc, #504]	; (8004c44 <inicializarTrayectoria+0x23c>)
 8004a4a:	ed83 7b00 	vstr	d7, [r3]
		Af = +Amax;
 8004a4e:	497e      	ldr	r1, [pc, #504]	; (8004c48 <inicializarTrayectoria+0x240>)
 8004a50:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004a54:	e9c1 2300 	strd	r2, r3, [r1]
		Vm = -Vmax;
 8004a58:	ed97 7b04 	vldr	d7, [r7, #16]
 8004a5c:	eeb1 7b47 	vneg.f64	d7, d7
 8004a60:	4b7a      	ldr	r3, [pc, #488]	; (8004c4c <inicializarTrayectoria+0x244>)
 8004a62:	ed83 7b00 	vstr	d7, [r3]
		Jerk = -Jerk;
 8004a66:	ed97 7b00 	vldr	d7, [r7]
 8004a6a:	eeb1 7b47 	vneg.f64	d7, d7
 8004a6e:	ed87 7b00 	vstr	d7, [r7]
 8004a72:	e019      	b.n	8004aa8 <inicializarTrayectoria+0xa0>
	} else if (XfHip4 > XiHip1) {
 8004a74:	ed97 6b0a 	vldr	d6, [r7, #40]	; 0x28
 8004a78:	ed97 7b0c 	vldr	d7, [r7, #48]	; 0x30
 8004a7c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8004a80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a84:	dd10      	ble.n	8004aa8 <inicializarTrayectoria+0xa0>
		Ai = Amax;
 8004a86:	496f      	ldr	r1, [pc, #444]	; (8004c44 <inicializarTrayectoria+0x23c>)
 8004a88:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004a8c:	e9c1 2300 	strd	r2, r3, [r1]
		Af = -Amax;
 8004a90:	ed97 7b02 	vldr	d7, [r7, #8]
 8004a94:	eeb1 7b47 	vneg.f64	d7, d7
 8004a98:	4b6b      	ldr	r3, [pc, #428]	; (8004c48 <inicializarTrayectoria+0x240>)
 8004a9a:	ed83 7b00 	vstr	d7, [r3]
		Vm = Vmax;
 8004a9e:	496b      	ldr	r1, [pc, #428]	; (8004c4c <inicializarTrayectoria+0x244>)
 8004aa0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8004aa4:	e9c1 2300 	strd	r2, r3, [r1]
	}

	if (V0Hip > Vmax) {
 8004aa8:	ed97 6b08 	vldr	d6, [r7, #32]
 8004aac:	ed97 7b04 	vldr	d7, [r7, #16]
 8004ab0:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8004ab4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004ab8:	dd0b      	ble.n	8004ad2 <inicializarTrayectoria+0xca>
		Ai = -Amax;
 8004aba:	ed97 7b02 	vldr	d7, [r7, #8]
 8004abe:	eeb1 7b47 	vneg.f64	d7, d7
 8004ac2:	4b60      	ldr	r3, [pc, #384]	; (8004c44 <inicializarTrayectoria+0x23c>)
 8004ac4:	ed83 7b00 	vstr	d7, [r3]
		Af = Amax;
 8004ac8:	495f      	ldr	r1, [pc, #380]	; (8004c48 <inicializarTrayectoria+0x240>)
 8004aca:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004ace:	e9c1 2300 	strd	r2, r3, [r1]
	}
	if (Vf > Vmax) {
 8004ad2:	ed97 6b06 	vldr	d6, [r7, #24]
 8004ad6:	ed97 7b04 	vldr	d7, [r7, #16]
 8004ada:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8004ade:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004ae2:	dd0b      	ble.n	8004afc <inicializarTrayectoria+0xf4>
		Ai = Amax;
 8004ae4:	4957      	ldr	r1, [pc, #348]	; (8004c44 <inicializarTrayectoria+0x23c>)
 8004ae6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004aea:	e9c1 2300 	strd	r2, r3, [r1]
		Af = -Amax;
 8004aee:	ed97 7b02 	vldr	d7, [r7, #8]
 8004af2:	eeb1 7b47 	vneg.f64	d7, d7
 8004af6:	4b54      	ldr	r3, [pc, #336]	; (8004c48 <inicializarTrayectoria+0x240>)
 8004af8:	ed83 7b00 	vstr	d7, [r3]
	}

	for (uint8_t Iteracion = 0; Iteracion < 100; Iteracion++) { // Itero 40 veces, solo en caso de que no se alcance la vel maxima, sino salgo
 8004afc:	2300      	movs	r3, #0
 8004afe:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8004b02:	f000 bd05 	b.w	8005510 <inicializarTrayectoria+0xb08>
		DVHip = (Ai * Ai) / (2 * Jerk) * 2;
 8004b06:	4b4f      	ldr	r3, [pc, #316]	; (8004c44 <inicializarTrayectoria+0x23c>)
 8004b08:	ed93 6b00 	vldr	d6, [r3]
 8004b0c:	4b4d      	ldr	r3, [pc, #308]	; (8004c44 <inicializarTrayectoria+0x23c>)
 8004b0e:	ed93 7b00 	vldr	d7, [r3]
 8004b12:	ee26 5b07 	vmul.f64	d5, d6, d7
 8004b16:	ed97 7b00 	vldr	d7, [r7]
 8004b1a:	ee37 6b07 	vadd.f64	d6, d7, d7
 8004b1e:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8004b22:	ee37 7b07 	vadd.f64	d7, d7, d7
 8004b26:	4b4a      	ldr	r3, [pc, #296]	; (8004c50 <inicializarTrayectoria+0x248>)
 8004b28:	ed83 7b00 	vstr	d7, [r3]

		if (fabs(DVHip) > fabs(Vm - V0Hip)) { // Para cuando la velocidad inicial es muy cercana a la maxima
 8004b2c:	4b48      	ldr	r3, [pc, #288]	; (8004c50 <inicializarTrayectoria+0x248>)
 8004b2e:	ed93 7b00 	vldr	d7, [r3]
 8004b32:	eeb0 6bc7 	vabs.f64	d6, d7
 8004b36:	4b45      	ldr	r3, [pc, #276]	; (8004c4c <inicializarTrayectoria+0x244>)
 8004b38:	ed93 5b00 	vldr	d5, [r3]
 8004b3c:	ed97 7b08 	vldr	d7, [r7, #32]
 8004b40:	ee35 7b47 	vsub.f64	d7, d5, d7
 8004b44:	eeb0 7bc7 	vabs.f64	d7, d7
 8004b48:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8004b4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b50:	dd35      	ble.n	8004bbe <inicializarTrayectoria+0x1b6>
			if (fabs(Vm - V0Hip) != 0) {
 8004b52:	4b3e      	ldr	r3, [pc, #248]	; (8004c4c <inicializarTrayectoria+0x244>)
 8004b54:	ed93 6b00 	vldr	d6, [r3]
 8004b58:	ed97 7b08 	vldr	d7, [r7, #32]
 8004b5c:	ee36 7b47 	vsub.f64	d7, d6, d7
 8004b60:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8004b64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b68:	d029      	beq.n	8004bbe <inicializarTrayectoria+0x1b6>
				Aaux1 = ((Ai) / fabs(Ai)) * sqrt(fabs(Vm - V0Hip) * fabs(Jerk));
 8004b6a:	4b36      	ldr	r3, [pc, #216]	; (8004c44 <inicializarTrayectoria+0x23c>)
 8004b6c:	ed93 6b00 	vldr	d6, [r3]
 8004b70:	4b34      	ldr	r3, [pc, #208]	; (8004c44 <inicializarTrayectoria+0x23c>)
 8004b72:	ed93 7b00 	vldr	d7, [r3]
 8004b76:	eeb0 7bc7 	vabs.f64	d7, d7
 8004b7a:	ee86 8b07 	vdiv.f64	d8, d6, d7
 8004b7e:	4b33      	ldr	r3, [pc, #204]	; (8004c4c <inicializarTrayectoria+0x244>)
 8004b80:	ed93 6b00 	vldr	d6, [r3]
 8004b84:	ed97 7b08 	vldr	d7, [r7, #32]
 8004b88:	ee36 7b47 	vsub.f64	d7, d6, d7
 8004b8c:	eeb0 6bc7 	vabs.f64	d6, d7
 8004b90:	ed97 7b00 	vldr	d7, [r7]
 8004b94:	eeb0 7bc7 	vabs.f64	d7, d7
 8004b98:	ee26 7b07 	vmul.f64	d7, d6, d7
 8004b9c:	eeb0 0b47 	vmov.f64	d0, d7
 8004ba0:	f00d f9be 	bl	8011f20 <sqrt>
 8004ba4:	eeb0 7b40 	vmov.f64	d7, d0
 8004ba8:	ee28 7b07 	vmul.f64	d7, d8, d7
 8004bac:	4b29      	ldr	r3, [pc, #164]	; (8004c54 <inicializarTrayectoria+0x24c>)
 8004bae:	ed83 7b00 	vstr	d7, [r3]
				Ai = Aaux1;
 8004bb2:	4b28      	ldr	r3, [pc, #160]	; (8004c54 <inicializarTrayectoria+0x24c>)
 8004bb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bb8:	4922      	ldr	r1, [pc, #136]	; (8004c44 <inicializarTrayectoria+0x23c>)
 8004bba:	e9c1 2300 	strd	r2, r3, [r1]
			}
		}

		if (fabs(Vm - V0Hip) == 0) { // Para cuando la velocidad inicial es igual a la maxima
 8004bbe:	4b23      	ldr	r3, [pc, #140]	; (8004c4c <inicializarTrayectoria+0x244>)
 8004bc0:	ed93 6b00 	vldr	d6, [r3]
 8004bc4:	ed97 7b08 	vldr	d7, [r7, #32]
 8004bc8:	ee36 7b47 	vsub.f64	d7, d6, d7
 8004bcc:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8004bd0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004bd4:	d150      	bne.n	8004c78 <inicializarTrayectoria+0x270>
			a3Hip1 = 0;
 8004bd6:	4920      	ldr	r1, [pc, #128]	; (8004c58 <inicializarTrayectoria+0x250>)
 8004bd8:	f04f 0200 	mov.w	r2, #0
 8004bdc:	f04f 0300 	mov.w	r3, #0
 8004be0:	e9c1 2300 	strd	r2, r3, [r1]
			a2Hip1 = 0;
 8004be4:	491d      	ldr	r1, [pc, #116]	; (8004c5c <inicializarTrayectoria+0x254>)
 8004be6:	f04f 0200 	mov.w	r2, #0
 8004bea:	f04f 0300 	mov.w	r3, #0
 8004bee:	e9c1 2300 	strd	r2, r3, [r1]
			a1Hip1 = 0;
 8004bf2:	491b      	ldr	r1, [pc, #108]	; (8004c60 <inicializarTrayectoria+0x258>)
 8004bf4:	f04f 0200 	mov.w	r2, #0
 8004bf8:	f04f 0300 	mov.w	r3, #0
 8004bfc:	e9c1 2300 	strd	r2, r3, [r1]
			a0Hip1 = 0;
 8004c00:	4918      	ldr	r1, [pc, #96]	; (8004c64 <inicializarTrayectoria+0x25c>)
 8004c02:	f04f 0200 	mov.w	r2, #0
 8004c06:	f04f 0300 	mov.w	r3, #0
 8004c0a:	e9c1 2300 	strd	r2, r3, [r1]
			tfHip1 = 0;
 8004c0e:	4916      	ldr	r1, [pc, #88]	; (8004c68 <inicializarTrayectoria+0x260>)
 8004c10:	f04f 0200 	mov.w	r2, #0
 8004c14:	f04f 0300 	mov.w	r3, #0
 8004c18:	e9c1 2300 	strd	r2, r3, [r1]
			tiHip2 = 0;
 8004c1c:	4913      	ldr	r1, [pc, #76]	; (8004c6c <inicializarTrayectoria+0x264>)
 8004c1e:	f04f 0200 	mov.w	r2, #0
 8004c22:	f04f 0300 	mov.w	r3, #0
 8004c26:	e9c1 2300 	strd	r2, r3, [r1]
			tfHip2 = 0;
 8004c2a:	4911      	ldr	r1, [pc, #68]	; (8004c70 <inicializarTrayectoria+0x268>)
 8004c2c:	f04f 0200 	mov.w	r2, #0
 8004c30:	f04f 0300 	mov.w	r3, #0
 8004c34:	e9c1 2300 	strd	r2, r3, [r1]
			XfHip2 = XiHip1;
 8004c38:	490e      	ldr	r1, [pc, #56]	; (8004c74 <inicializarTrayectoria+0x26c>)
 8004c3a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8004c3e:	e9c1 2300 	strd	r2, r3, [r1]
 8004c42:	e195      	b.n	8004f70 <inicializarTrayectoria+0x568>
 8004c44:	24000a48 	.word	0x24000a48
 8004c48:	24000a50 	.word	0x24000a50
 8004c4c:	24000af8 	.word	0x24000af8
 8004c50:	24000b50 	.word	0x24000b50
 8004c54:	24000b58 	.word	0x24000b58
 8004c58:	24000a70 	.word	0x24000a70
 8004c5c:	24000a68 	.word	0x24000a68
 8004c60:	24000a60 	.word	0x24000a60
 8004c64:	24000a58 	.word	0x24000a58
 8004c68:	24000b10 	.word	0x24000b10
 8004c6c:	24000b18 	.word	0x24000b18
 8004c70:	24000b20 	.word	0x24000b20
 8004c74:	24000ae0 	.word	0x24000ae0
		} else {
			//  Polinomio de 3° orden (Jerk cte, parabola en V, hiperbola en X)         HIPERBOLA 1
			a3Hip1 = (Jerk / 6);
 8004c78:	ed97 6b00 	vldr	d6, [r7]
 8004c7c:	eeb1 5b08 	vmov.f64	d5, #24	; 0x40c00000  6.0
 8004c80:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8004c84:	4bcf      	ldr	r3, [pc, #828]	; (8004fc4 <inicializarTrayectoria+0x5bc>)
 8004c86:	ed83 7b00 	vstr	d7, [r3]
			a2Hip1 = 0;
 8004c8a:	49cf      	ldr	r1, [pc, #828]	; (8004fc8 <inicializarTrayectoria+0x5c0>)
 8004c8c:	f04f 0200 	mov.w	r2, #0
 8004c90:	f04f 0300 	mov.w	r3, #0
 8004c94:	e9c1 2300 	strd	r2, r3, [r1]
			tfHip1 = ((Ai / (6 * a3Hip1)));
 8004c98:	4bcc      	ldr	r3, [pc, #816]	; (8004fcc <inicializarTrayectoria+0x5c4>)
 8004c9a:	ed93 5b00 	vldr	d5, [r3]
 8004c9e:	4bc9      	ldr	r3, [pc, #804]	; (8004fc4 <inicializarTrayectoria+0x5bc>)
 8004ca0:	ed93 7b00 	vldr	d7, [r3]
 8004ca4:	eeb1 6b08 	vmov.f64	d6, #24	; 0x40c00000  6.0
 8004ca8:	ee27 6b06 	vmul.f64	d6, d7, d6
 8004cac:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8004cb0:	4bc7      	ldr	r3, [pc, #796]	; (8004fd0 <inicializarTrayectoria+0x5c8>)
 8004cb2:	ed83 7b00 	vstr	d7, [r3]
			a1Hip1 = V0Hip;
 8004cb6:	49c7      	ldr	r1, [pc, #796]	; (8004fd4 <inicializarTrayectoria+0x5cc>)
 8004cb8:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004cbc:	e9c1 2300 	strd	r2, r3, [r1]
			VfHip1 = a1Hip1 + (2 * a2Hip1 * tfHip1)
 8004cc0:	4bc1      	ldr	r3, [pc, #772]	; (8004fc8 <inicializarTrayectoria+0x5c0>)
 8004cc2:	ed93 7b00 	vldr	d7, [r3]
 8004cc6:	ee37 6b07 	vadd.f64	d6, d7, d7
 8004cca:	4bc1      	ldr	r3, [pc, #772]	; (8004fd0 <inicializarTrayectoria+0x5c8>)
 8004ccc:	ed93 7b00 	vldr	d7, [r3]
 8004cd0:	ee26 6b07 	vmul.f64	d6, d6, d7
 8004cd4:	4bbf      	ldr	r3, [pc, #764]	; (8004fd4 <inicializarTrayectoria+0x5cc>)
 8004cd6:	ed93 7b00 	vldr	d7, [r3]
 8004cda:	ee36 8b07 	vadd.f64	d8, d6, d7
					+ 3 * a3Hip1 * pow(tfHip1, 2);
 8004cde:	4bb9      	ldr	r3, [pc, #740]	; (8004fc4 <inicializarTrayectoria+0x5bc>)
 8004ce0:	ed93 7b00 	vldr	d7, [r3]
 8004ce4:	eeb0 6b08 	vmov.f64	d6, #8	; 0x40400000  3.0
 8004ce8:	ee27 9b06 	vmul.f64	d9, d7, d6
 8004cec:	4bb8      	ldr	r3, [pc, #736]	; (8004fd0 <inicializarTrayectoria+0x5c8>)
 8004cee:	ed93 7b00 	vldr	d7, [r3]
 8004cf2:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8004cf6:	eeb0 0b47 	vmov.f64	d0, d7
 8004cfa:	f00c fe91 	bl	8011a20 <pow>
 8004cfe:	eeb0 7b40 	vmov.f64	d7, d0
 8004d02:	ee29 7b07 	vmul.f64	d7, d9, d7
 8004d06:	ee38 7b07 	vadd.f64	d7, d8, d7
			VfHip1 = a1Hip1 + (2 * a2Hip1 * tfHip1)
 8004d0a:	4bb3      	ldr	r3, [pc, #716]	; (8004fd8 <inicializarTrayectoria+0x5d0>)
 8004d0c:	ed83 7b00 	vstr	d7, [r3]
			a0Hip1 = XiHip1;
 8004d10:	49b2      	ldr	r1, [pc, #712]	; (8004fdc <inicializarTrayectoria+0x5d4>)
 8004d12:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8004d16:	e9c1 2300 	strd	r2, r3, [r1]
			XfHip1 = a0Hip1 + (a1Hip1 * tfHip1) + a2Hip1 * pow(tfHip1, 2)
 8004d1a:	4bae      	ldr	r3, [pc, #696]	; (8004fd4 <inicializarTrayectoria+0x5cc>)
 8004d1c:	ed93 6b00 	vldr	d6, [r3]
 8004d20:	4bab      	ldr	r3, [pc, #684]	; (8004fd0 <inicializarTrayectoria+0x5c8>)
 8004d22:	ed93 7b00 	vldr	d7, [r3]
 8004d26:	ee26 6b07 	vmul.f64	d6, d6, d7
 8004d2a:	4bac      	ldr	r3, [pc, #688]	; (8004fdc <inicializarTrayectoria+0x5d4>)
 8004d2c:	ed93 7b00 	vldr	d7, [r3]
 8004d30:	ee36 8b07 	vadd.f64	d8, d6, d7
 8004d34:	4ba6      	ldr	r3, [pc, #664]	; (8004fd0 <inicializarTrayectoria+0x5c8>)
 8004d36:	ed93 7b00 	vldr	d7, [r3]
 8004d3a:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8004d3e:	eeb0 0b47 	vmov.f64	d0, d7
 8004d42:	f00c fe6d 	bl	8011a20 <pow>
 8004d46:	eeb0 6b40 	vmov.f64	d6, d0
 8004d4a:	4b9f      	ldr	r3, [pc, #636]	; (8004fc8 <inicializarTrayectoria+0x5c0>)
 8004d4c:	ed93 7b00 	vldr	d7, [r3]
 8004d50:	ee26 7b07 	vmul.f64	d7, d6, d7
 8004d54:	ee38 8b07 	vadd.f64	d8, d8, d7
					+ a3Hip1 * pow(tfHip1, 3);
 8004d58:	4b9d      	ldr	r3, [pc, #628]	; (8004fd0 <inicializarTrayectoria+0x5c8>)
 8004d5a:	ed93 7b00 	vldr	d7, [r3]
 8004d5e:	eeb0 1b08 	vmov.f64	d1, #8	; 0x40400000  3.0
 8004d62:	eeb0 0b47 	vmov.f64	d0, d7
 8004d66:	f00c fe5b 	bl	8011a20 <pow>
 8004d6a:	eeb0 6b40 	vmov.f64	d6, d0
 8004d6e:	4b95      	ldr	r3, [pc, #596]	; (8004fc4 <inicializarTrayectoria+0x5bc>)
 8004d70:	ed93 7b00 	vldr	d7, [r3]
 8004d74:	ee26 7b07 	vmul.f64	d7, d6, d7
 8004d78:	ee38 7b07 	vadd.f64	d7, d8, d7
			XfHip1 = a0Hip1 + (a1Hip1 * tfHip1) + a2Hip1 * pow(tfHip1, 2)
 8004d7c:	4b98      	ldr	r3, [pc, #608]	; (8004fe0 <inicializarTrayectoria+0x5d8>)
 8004d7e:	ed83 7b00 	vstr	d7, [r3]
			// Polinomio de 2° orden (Acel cte, trapecio en V, parabola en X)           PARABOLA 1
			a3Hip2 = (-Jerk / 6);
 8004d82:	ed97 7b00 	vldr	d7, [r7]
 8004d86:	eeb1 6b47 	vneg.f64	d6, d7
 8004d8a:	eeb1 5b08 	vmov.f64	d5, #24	; 0x40c00000  6.0
 8004d8e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8004d92:	4b94      	ldr	r3, [pc, #592]	; (8004fe4 <inicializarTrayectoria+0x5dc>)
 8004d94:	ed83 7b00 	vstr	d7, [r3]
			a2Hip2 = Ai / 2;
 8004d98:	4b8c      	ldr	r3, [pc, #560]	; (8004fcc <inicializarTrayectoria+0x5c4>)
 8004d9a:	ed93 6b00 	vldr	d6, [r3]
 8004d9e:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8004da2:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8004da6:	4b90      	ldr	r3, [pc, #576]	; (8004fe8 <inicializarTrayectoria+0x5e0>)
 8004da8:	ed83 7b00 	vstr	d7, [r3]
			ViHip2 = Vm - 2.0 * a2Hip2 * (Ai / Jerk)
 8004dac:	4b8f      	ldr	r3, [pc, #572]	; (8004fec <inicializarTrayectoria+0x5e4>)
 8004dae:	ed93 6b00 	vldr	d6, [r3]
 8004db2:	4b8d      	ldr	r3, [pc, #564]	; (8004fe8 <inicializarTrayectoria+0x5e0>)
 8004db4:	ed93 7b00 	vldr	d7, [r3]
 8004db8:	ee37 5b07 	vadd.f64	d5, d7, d7
 8004dbc:	4b83      	ldr	r3, [pc, #524]	; (8004fcc <inicializarTrayectoria+0x5c4>)
 8004dbe:	ed93 3b00 	vldr	d3, [r3]
 8004dc2:	ed97 4b00 	vldr	d4, [r7]
 8004dc6:	ee83 7b04 	vdiv.f64	d7, d3, d4
 8004dca:	ee25 7b07 	vmul.f64	d7, d5, d7
 8004dce:	ee36 6b47 	vsub.f64	d6, d6, d7
					- 3 * a3Hip2 * (Ai / Jerk) * (Ai / Jerk);
 8004dd2:	4b84      	ldr	r3, [pc, #528]	; (8004fe4 <inicializarTrayectoria+0x5dc>)
 8004dd4:	ed93 7b00 	vldr	d7, [r3]
 8004dd8:	eeb0 5b08 	vmov.f64	d5, #8	; 0x40400000  3.0
 8004ddc:	ee27 5b05 	vmul.f64	d5, d7, d5
 8004de0:	4b7a      	ldr	r3, [pc, #488]	; (8004fcc <inicializarTrayectoria+0x5c4>)
 8004de2:	ed93 3b00 	vldr	d3, [r3]
 8004de6:	ed97 4b00 	vldr	d4, [r7]
 8004dea:	ee83 7b04 	vdiv.f64	d7, d3, d4
 8004dee:	ee25 5b07 	vmul.f64	d5, d5, d7
 8004df2:	4b76      	ldr	r3, [pc, #472]	; (8004fcc <inicializarTrayectoria+0x5c4>)
 8004df4:	ed93 3b00 	vldr	d3, [r3]
 8004df8:	ed97 4b00 	vldr	d4, [r7]
 8004dfc:	ee83 7b04 	vdiv.f64	d7, d3, d4
 8004e00:	ee25 7b07 	vmul.f64	d7, d5, d7
 8004e04:	ee36 7b47 	vsub.f64	d7, d6, d7
			ViHip2 = Vm - 2.0 * a2Hip2 * (Ai / Jerk)
 8004e08:	4b79      	ldr	r3, [pc, #484]	; (8004ff0 <inicializarTrayectoria+0x5e8>)
 8004e0a:	ed83 7b00 	vstr	d7, [r3]
			tiHip2 = ((ViHip2 - VfHip1) / Ai) + tfHip1;
 8004e0e:	4b78      	ldr	r3, [pc, #480]	; (8004ff0 <inicializarTrayectoria+0x5e8>)
 8004e10:	ed93 6b00 	vldr	d6, [r3]
 8004e14:	4b70      	ldr	r3, [pc, #448]	; (8004fd8 <inicializarTrayectoria+0x5d0>)
 8004e16:	ed93 7b00 	vldr	d7, [r3]
 8004e1a:	ee36 5b47 	vsub.f64	d5, d6, d7
 8004e1e:	4b6b      	ldr	r3, [pc, #428]	; (8004fcc <inicializarTrayectoria+0x5c4>)
 8004e20:	ed93 7b00 	vldr	d7, [r3]
 8004e24:	ee85 6b07 	vdiv.f64	d6, d5, d7
 8004e28:	4b69      	ldr	r3, [pc, #420]	; (8004fd0 <inicializarTrayectoria+0x5c8>)
 8004e2a:	ed93 7b00 	vldr	d7, [r3]
 8004e2e:	ee36 7b07 	vadd.f64	d7, d6, d7
 8004e32:	4b70      	ldr	r3, [pc, #448]	; (8004ff4 <inicializarTrayectoria+0x5ec>)
 8004e34:	ed83 7b00 	vstr	d7, [r3]
			XiHip2 = XfHip1 + (Ai / 2) * pow(((ViHip2 - VfHip1) / Ai), 2)
 8004e38:	4b64      	ldr	r3, [pc, #400]	; (8004fcc <inicializarTrayectoria+0x5c4>)
 8004e3a:	ed93 7b00 	vldr	d7, [r3]
 8004e3e:	eeb0 6b00 	vmov.f64	d6, #0	; 0x40000000  2.0
 8004e42:	ee87 8b06 	vdiv.f64	d8, d7, d6
 8004e46:	4b6a      	ldr	r3, [pc, #424]	; (8004ff0 <inicializarTrayectoria+0x5e8>)
 8004e48:	ed93 6b00 	vldr	d6, [r3]
 8004e4c:	4b62      	ldr	r3, [pc, #392]	; (8004fd8 <inicializarTrayectoria+0x5d0>)
 8004e4e:	ed93 7b00 	vldr	d7, [r3]
 8004e52:	ee36 6b47 	vsub.f64	d6, d6, d7
 8004e56:	4b5d      	ldr	r3, [pc, #372]	; (8004fcc <inicializarTrayectoria+0x5c4>)
 8004e58:	ed93 7b00 	vldr	d7, [r3]
 8004e5c:	ee86 5b07 	vdiv.f64	d5, d6, d7
 8004e60:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8004e64:	eeb0 0b45 	vmov.f64	d0, d5
 8004e68:	f00c fdda 	bl	8011a20 <pow>
 8004e6c:	eeb0 7b40 	vmov.f64	d7, d0
 8004e70:	ee28 6b07 	vmul.f64	d6, d8, d7
 8004e74:	4b5a      	ldr	r3, [pc, #360]	; (8004fe0 <inicializarTrayectoria+0x5d8>)
 8004e76:	ed93 7b00 	vldr	d7, [r3]
 8004e7a:	ee36 6b07 	vadd.f64	d6, d6, d7
					+ VfHip1 * ((ViHip2 - VfHip1) / Ai);    //x=(Cte/2)*t^2+Vi*t
 8004e7e:	4b5c      	ldr	r3, [pc, #368]	; (8004ff0 <inicializarTrayectoria+0x5e8>)
 8004e80:	ed93 5b00 	vldr	d5, [r3]
 8004e84:	4b54      	ldr	r3, [pc, #336]	; (8004fd8 <inicializarTrayectoria+0x5d0>)
 8004e86:	ed93 7b00 	vldr	d7, [r3]
 8004e8a:	ee35 4b47 	vsub.f64	d4, d5, d7
 8004e8e:	4b4f      	ldr	r3, [pc, #316]	; (8004fcc <inicializarTrayectoria+0x5c4>)
 8004e90:	ed93 7b00 	vldr	d7, [r3]
 8004e94:	ee84 5b07 	vdiv.f64	d5, d4, d7
 8004e98:	4b4f      	ldr	r3, [pc, #316]	; (8004fd8 <inicializarTrayectoria+0x5d0>)
 8004e9a:	ed93 7b00 	vldr	d7, [r3]
 8004e9e:	ee25 7b07 	vmul.f64	d7, d5, d7
 8004ea2:	ee36 7b07 	vadd.f64	d7, d6, d7
			XiHip2 = XfHip1 + (Ai / 2) * pow(((ViHip2 - VfHip1) / Ai), 2)
 8004ea6:	4b54      	ldr	r3, [pc, #336]	; (8004ff8 <inicializarTrayectoria+0x5f0>)
 8004ea8:	ed83 7b00 	vstr	d7, [r3]
					//  Polinomio de 3° orden (Jerk cte, parabola en V, hiperbola en X)         HIPERBOLA 2
			tfHip2 = fabs(Ai / (-Jerk)) + tiHip2;
 8004eac:	4b47      	ldr	r3, [pc, #284]	; (8004fcc <inicializarTrayectoria+0x5c4>)
 8004eae:	ed93 7b00 	vldr	d7, [r3]
 8004eb2:	eeb1 5b47 	vneg.f64	d5, d7
 8004eb6:	ed97 6b00 	vldr	d6, [r7]
 8004eba:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8004ebe:	eeb0 6bc7 	vabs.f64	d6, d7
 8004ec2:	4b4c      	ldr	r3, [pc, #304]	; (8004ff4 <inicializarTrayectoria+0x5ec>)
 8004ec4:	ed93 7b00 	vldr	d7, [r3]
 8004ec8:	ee36 7b07 	vadd.f64	d7, d6, d7
 8004ecc:	4b4b      	ldr	r3, [pc, #300]	; (8004ffc <inicializarTrayectoria+0x5f4>)
 8004ece:	ed83 7b00 	vstr	d7, [r3]
			a1Hip2 = ViHip2;
 8004ed2:	4b47      	ldr	r3, [pc, #284]	; (8004ff0 <inicializarTrayectoria+0x5e8>)
 8004ed4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ed8:	4949      	ldr	r1, [pc, #292]	; (8005000 <inicializarTrayectoria+0x5f8>)
 8004eda:	e9c1 2300 	strd	r2, r3, [r1]
			a0Hip2 = XiHip2;
 8004ede:	4b46      	ldr	r3, [pc, #280]	; (8004ff8 <inicializarTrayectoria+0x5f0>)
 8004ee0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ee4:	4947      	ldr	r1, [pc, #284]	; (8005004 <inicializarTrayectoria+0x5fc>)
 8004ee6:	e9c1 2300 	strd	r2, r3, [r1]
			XfHip2 = a0Hip2 + (a1Hip2 * (tfHip2 - tiHip2))
 8004eea:	4b44      	ldr	r3, [pc, #272]	; (8004ffc <inicializarTrayectoria+0x5f4>)
 8004eec:	ed93 6b00 	vldr	d6, [r3]
 8004ef0:	4b40      	ldr	r3, [pc, #256]	; (8004ff4 <inicializarTrayectoria+0x5ec>)
 8004ef2:	ed93 7b00 	vldr	d7, [r3]
 8004ef6:	ee36 6b47 	vsub.f64	d6, d6, d7
 8004efa:	4b41      	ldr	r3, [pc, #260]	; (8005000 <inicializarTrayectoria+0x5f8>)
 8004efc:	ed93 7b00 	vldr	d7, [r3]
 8004f00:	ee26 6b07 	vmul.f64	d6, d6, d7
 8004f04:	4b3f      	ldr	r3, [pc, #252]	; (8005004 <inicializarTrayectoria+0x5fc>)
 8004f06:	ed93 7b00 	vldr	d7, [r3]
 8004f0a:	ee36 8b07 	vadd.f64	d8, d6, d7
					+ a2Hip2 * pow((tfHip2 - tiHip2), 2.0)
 8004f0e:	4b3b      	ldr	r3, [pc, #236]	; (8004ffc <inicializarTrayectoria+0x5f4>)
 8004f10:	ed93 6b00 	vldr	d6, [r3]
 8004f14:	4b37      	ldr	r3, [pc, #220]	; (8004ff4 <inicializarTrayectoria+0x5ec>)
 8004f16:	ed93 7b00 	vldr	d7, [r3]
 8004f1a:	ee36 7b47 	vsub.f64	d7, d6, d7
 8004f1e:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8004f22:	eeb0 0b47 	vmov.f64	d0, d7
 8004f26:	f00c fd7b 	bl	8011a20 <pow>
 8004f2a:	eeb0 6b40 	vmov.f64	d6, d0
 8004f2e:	4b2e      	ldr	r3, [pc, #184]	; (8004fe8 <inicializarTrayectoria+0x5e0>)
 8004f30:	ed93 7b00 	vldr	d7, [r3]
 8004f34:	ee26 7b07 	vmul.f64	d7, d6, d7
 8004f38:	ee38 8b07 	vadd.f64	d8, d8, d7
					+ a3Hip2 * pow((tfHip2 - tiHip2), 3.0);
 8004f3c:	4b2f      	ldr	r3, [pc, #188]	; (8004ffc <inicializarTrayectoria+0x5f4>)
 8004f3e:	ed93 6b00 	vldr	d6, [r3]
 8004f42:	4b2c      	ldr	r3, [pc, #176]	; (8004ff4 <inicializarTrayectoria+0x5ec>)
 8004f44:	ed93 7b00 	vldr	d7, [r3]
 8004f48:	ee36 7b47 	vsub.f64	d7, d6, d7
 8004f4c:	eeb0 1b08 	vmov.f64	d1, #8	; 0x40400000  3.0
 8004f50:	eeb0 0b47 	vmov.f64	d0, d7
 8004f54:	f00c fd64 	bl	8011a20 <pow>
 8004f58:	eeb0 6b40 	vmov.f64	d6, d0
 8004f5c:	4b21      	ldr	r3, [pc, #132]	; (8004fe4 <inicializarTrayectoria+0x5dc>)
 8004f5e:	ed93 7b00 	vldr	d7, [r3]
 8004f62:	ee26 7b07 	vmul.f64	d7, d6, d7
 8004f66:	ee38 7b07 	vadd.f64	d7, d8, d7
			XfHip2 = a0Hip2 + (a1Hip2 * (tfHip2 - tiHip2))
 8004f6a:	4b27      	ldr	r3, [pc, #156]	; (8005008 <inicializarTrayectoria+0x600>)
 8004f6c:	ed83 7b00 	vstr	d7, [r3]
		}

		// Condiciones borde:    Se calcula de adelante hacia atras
		DVHip = pow(Af, 2) / (2 * Jerk) * 2;
 8004f70:	4b26      	ldr	r3, [pc, #152]	; (800500c <inicializarTrayectoria+0x604>)
 8004f72:	ed93 7b00 	vldr	d7, [r3]
 8004f76:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8004f7a:	eeb0 0b47 	vmov.f64	d0, d7
 8004f7e:	f00c fd4f 	bl	8011a20 <pow>
 8004f82:	eeb0 5b40 	vmov.f64	d5, d0
 8004f86:	ed97 7b00 	vldr	d7, [r7]
 8004f8a:	ee37 6b07 	vadd.f64	d6, d7, d7
 8004f8e:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8004f92:	ee37 7b07 	vadd.f64	d7, d7, d7
 8004f96:	4b1e      	ldr	r3, [pc, #120]	; (8005010 <inicializarTrayectoria+0x608>)
 8004f98:	ed83 7b00 	vstr	d7, [r3]
		if (fabs(DVHip) > fabs(Vm - Vf)) { // Para cuando la velocidad final es muy cercana a la maxima
 8004f9c:	4b1c      	ldr	r3, [pc, #112]	; (8005010 <inicializarTrayectoria+0x608>)
 8004f9e:	ed93 7b00 	vldr	d7, [r3]
 8004fa2:	eeb0 6bc7 	vabs.f64	d6, d7
 8004fa6:	4b11      	ldr	r3, [pc, #68]	; (8004fec <inicializarTrayectoria+0x5e4>)
 8004fa8:	ed93 5b00 	vldr	d5, [r3]
 8004fac:	ed97 7b06 	vldr	d7, [r7, #24]
 8004fb0:	ee35 7b47 	vsub.f64	d7, d5, d7
 8004fb4:	eeb0 7bc7 	vabs.f64	d7, d7
 8004fb8:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8004fbc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004fc0:	dd5e      	ble.n	8005080 <inicializarTrayectoria+0x678>
 8004fc2:	e027      	b.n	8005014 <inicializarTrayectoria+0x60c>
 8004fc4:	24000a70 	.word	0x24000a70
 8004fc8:	24000a68 	.word	0x24000a68
 8004fcc:	24000a48 	.word	0x24000a48
 8004fd0:	24000b10 	.word	0x24000b10
 8004fd4:	24000a60 	.word	0x24000a60
 8004fd8:	24000b00 	.word	0x24000b00
 8004fdc:	24000a58 	.word	0x24000a58
 8004fe0:	24000ad8 	.word	0x24000ad8
 8004fe4:	24000a90 	.word	0x24000a90
 8004fe8:	24000a88 	.word	0x24000a88
 8004fec:	24000af8 	.word	0x24000af8
 8004ff0:	24000b60 	.word	0x24000b60
 8004ff4:	24000b18 	.word	0x24000b18
 8004ff8:	24000b68 	.word	0x24000b68
 8004ffc:	24000b20 	.word	0x24000b20
 8005000:	24000a80 	.word	0x24000a80
 8005004:	24000a78 	.word	0x24000a78
 8005008:	24000ae0 	.word	0x24000ae0
 800500c:	24000a50 	.word	0x24000a50
 8005010:	24000b50 	.word	0x24000b50
			if (fabs(Vm - Vf) != 0) {
 8005014:	4b34      	ldr	r3, [pc, #208]	; (80050e8 <inicializarTrayectoria+0x6e0>)
 8005016:	ed93 6b00 	vldr	d6, [r3]
 800501a:	ed97 7b06 	vldr	d7, [r7, #24]
 800501e:	ee36 7b47 	vsub.f64	d7, d6, d7
 8005022:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8005026:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800502a:	d029      	beq.n	8005080 <inicializarTrayectoria+0x678>
				Aaux = ((Af) / fabs(Af)) * sqrt(fabs(Vm - Vf) * fabs(Jerk));
 800502c:	4b2f      	ldr	r3, [pc, #188]	; (80050ec <inicializarTrayectoria+0x6e4>)
 800502e:	ed93 6b00 	vldr	d6, [r3]
 8005032:	4b2e      	ldr	r3, [pc, #184]	; (80050ec <inicializarTrayectoria+0x6e4>)
 8005034:	ed93 7b00 	vldr	d7, [r3]
 8005038:	eeb0 7bc7 	vabs.f64	d7, d7
 800503c:	ee86 8b07 	vdiv.f64	d8, d6, d7
 8005040:	4b29      	ldr	r3, [pc, #164]	; (80050e8 <inicializarTrayectoria+0x6e0>)
 8005042:	ed93 6b00 	vldr	d6, [r3]
 8005046:	ed97 7b06 	vldr	d7, [r7, #24]
 800504a:	ee36 7b47 	vsub.f64	d7, d6, d7
 800504e:	eeb0 6bc7 	vabs.f64	d6, d7
 8005052:	ed97 7b00 	vldr	d7, [r7]
 8005056:	eeb0 7bc7 	vabs.f64	d7, d7
 800505a:	ee26 7b07 	vmul.f64	d7, d6, d7
 800505e:	eeb0 0b47 	vmov.f64	d0, d7
 8005062:	f00c ff5d 	bl	8011f20 <sqrt>
 8005066:	eeb0 7b40 	vmov.f64	d7, d0
 800506a:	ee28 7b07 	vmul.f64	d7, d8, d7
 800506e:	4b20      	ldr	r3, [pc, #128]	; (80050f0 <inicializarTrayectoria+0x6e8>)
 8005070:	ed83 7b00 	vstr	d7, [r3]
				Af = Aaux;
 8005074:	4b1e      	ldr	r3, [pc, #120]	; (80050f0 <inicializarTrayectoria+0x6e8>)
 8005076:	e9d3 2300 	ldrd	r2, r3, [r3]
 800507a:	491c      	ldr	r1, [pc, #112]	; (80050ec <inicializarTrayectoria+0x6e4>)
 800507c:	e9c1 2300 	strd	r2, r3, [r1]
			}
		}
		if (fabs(Vm - Vf) == 0) { // Para cuando la velocidad final es igual a la maxima
 8005080:	4b19      	ldr	r3, [pc, #100]	; (80050e8 <inicializarTrayectoria+0x6e0>)
 8005082:	ed93 6b00 	vldr	d6, [r3]
 8005086:	ed97 7b06 	vldr	d7, [r7, #24]
 800508a:	ee36 7b47 	vsub.f64	d7, d6, d7
 800508e:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8005092:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005096:	d139      	bne.n	800510c <inicializarTrayectoria+0x704>
			VfHip3 = Vf;
 8005098:	4916      	ldr	r1, [pc, #88]	; (80050f4 <inicializarTrayectoria+0x6ec>)
 800509a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800509e:	e9c1 2300 	strd	r2, r3, [r1]
			XiHip3 = XfHip4;
 80050a2:	4915      	ldr	r1, [pc, #84]	; (80050f8 <inicializarTrayectoria+0x6f0>)
 80050a4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80050a8:	e9c1 2300 	strd	r2, r3, [r1]
			tiHip3 = fabs((XiHip3 - XfHip2) / Vm) + tfHip2;
 80050ac:	4b12      	ldr	r3, [pc, #72]	; (80050f8 <inicializarTrayectoria+0x6f0>)
 80050ae:	ed93 6b00 	vldr	d6, [r3]
 80050b2:	4b12      	ldr	r3, [pc, #72]	; (80050fc <inicializarTrayectoria+0x6f4>)
 80050b4:	ed93 7b00 	vldr	d7, [r3]
 80050b8:	ee36 5b47 	vsub.f64	d5, d6, d7
 80050bc:	4b0a      	ldr	r3, [pc, #40]	; (80050e8 <inicializarTrayectoria+0x6e0>)
 80050be:	ed93 6b00 	vldr	d6, [r3]
 80050c2:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80050c6:	eeb0 6bc7 	vabs.f64	d6, d7
 80050ca:	4b0d      	ldr	r3, [pc, #52]	; (8005100 <inicializarTrayectoria+0x6f8>)
 80050cc:	ed93 7b00 	vldr	d7, [r3]
 80050d0:	ee36 7b07 	vadd.f64	d7, d6, d7
 80050d4:	4b0b      	ldr	r3, [pc, #44]	; (8005104 <inicializarTrayectoria+0x6fc>)
 80050d6:	ed83 7b00 	vstr	d7, [r3]
			TiempoTotX = tiHip3;
 80050da:	4b0a      	ldr	r3, [pc, #40]	; (8005104 <inicializarTrayectoria+0x6fc>)
 80050dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050e0:	4909      	ldr	r1, [pc, #36]	; (8005108 <inicializarTrayectoria+0x700>)
 80050e2:	e9c1 2300 	strd	r2, r3, [r1]
 80050e6:	e18b      	b.n	8005400 <inicializarTrayectoria+0x9f8>
 80050e8:	24000af8 	.word	0x24000af8
 80050ec:	24000a50 	.word	0x24000a50
 80050f0:	24000b70 	.word	0x24000b70
 80050f4:	24000b08 	.word	0x24000b08
 80050f8:	24000af0 	.word	0x24000af0
 80050fc:	24000ae0 	.word	0x24000ae0
 8005100:	24000b20 	.word	0x24000b20
 8005104:	24000b28 	.word	0x24000b28
 8005108:	24000b40 	.word	0x24000b40
		} else {
			ViHip4 = pow(Af, 2) / (2 * Jerk) + Vf;
 800510c:	4bc7      	ldr	r3, [pc, #796]	; (800542c <inicializarTrayectoria+0xa24>)
 800510e:	ed93 7b00 	vldr	d7, [r3]
 8005112:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8005116:	eeb0 0b47 	vmov.f64	d0, d7
 800511a:	f00c fc81 	bl	8011a20 <pow>
 800511e:	eeb0 5b40 	vmov.f64	d5, d0
 8005122:	ed97 7b00 	vldr	d7, [r7]
 8005126:	ee37 7b07 	vadd.f64	d7, d7, d7
 800512a:	ee85 6b07 	vdiv.f64	d6, d5, d7
 800512e:	ed97 7b06 	vldr	d7, [r7, #24]
 8005132:	ee36 7b07 	vadd.f64	d7, d6, d7
 8005136:	4bbe      	ldr	r3, [pc, #760]	; (8005430 <inicializarTrayectoria+0xa28>)
 8005138:	ed83 7b00 	vstr	d7, [r3]
			XiHip4 =
					XfHip4
							- (fabs(pow(Af, 3) / (6 * pow(Jerk, 2)))
 800513c:	4bbb      	ldr	r3, [pc, #748]	; (800542c <inicializarTrayectoria+0xa24>)
 800513e:	ed93 7b00 	vldr	d7, [r3]
 8005142:	eeb0 1b08 	vmov.f64	d1, #8	; 0x40400000  3.0
 8005146:	eeb0 0b47 	vmov.f64	d0, d7
 800514a:	f00c fc69 	bl	8011a20 <pow>
 800514e:	eeb0 8b40 	vmov.f64	d8, d0
 8005152:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8005156:	ed97 0b00 	vldr	d0, [r7]
 800515a:	f00c fc61 	bl	8011a20 <pow>
 800515e:	eeb0 7b40 	vmov.f64	d7, d0
 8005162:	eeb1 6b08 	vmov.f64	d6, #24	; 0x40c00000  6.0
 8005166:	ee27 6b06 	vmul.f64	d6, d7, d6
 800516a:	ee88 7b06 	vdiv.f64	d7, d8, d6
 800516e:	eeb0 6bc7 	vabs.f64	d6, d7
									* ((ViHip4) / fabs(ViHip4))
 8005172:	4baf      	ldr	r3, [pc, #700]	; (8005430 <inicializarTrayectoria+0xa28>)
 8005174:	ed93 4b00 	vldr	d4, [r3]
 8005178:	4bad      	ldr	r3, [pc, #692]	; (8005430 <inicializarTrayectoria+0xa28>)
 800517a:	ed93 7b00 	vldr	d7, [r3]
 800517e:	eeb0 5bc7 	vabs.f64	d5, d7
 8005182:	ee84 7b05 	vdiv.f64	d7, d4, d5
 8005186:	ee26 6b07 	vmul.f64	d6, d6, d7
									+ Vf * (fabs(Af / Jerk)));
 800518a:	4ba8      	ldr	r3, [pc, #672]	; (800542c <inicializarTrayectoria+0xa24>)
 800518c:	ed93 4b00 	vldr	d4, [r3]
 8005190:	ed97 5b00 	vldr	d5, [r7]
 8005194:	ee84 7b05 	vdiv.f64	d7, d4, d5
 8005198:	eeb0 5bc7 	vabs.f64	d5, d7
 800519c:	ed97 7b06 	vldr	d7, [r7, #24]
 80051a0:	ee25 7b07 	vmul.f64	d7, d5, d7
 80051a4:	ee36 7b07 	vadd.f64	d7, d6, d7
							- (fabs(pow(Af, 3) / (6 * pow(Jerk, 2)))
 80051a8:	ed97 6b0a 	vldr	d6, [r7, #40]	; 0x28
 80051ac:	ee36 7b47 	vsub.f64	d7, d6, d7
			XiHip4 =
 80051b0:	4ba0      	ldr	r3, [pc, #640]	; (8005434 <inicializarTrayectoria+0xa2c>)
 80051b2:	ed83 7b00 	vstr	d7, [r3]
			VfHip3 = Vm - pow(Af, 2) / (2 * (Jerk));
 80051b6:	4ba0      	ldr	r3, [pc, #640]	; (8005438 <inicializarTrayectoria+0xa30>)
 80051b8:	ed93 8b00 	vldr	d8, [r3]
 80051bc:	4b9b      	ldr	r3, [pc, #620]	; (800542c <inicializarTrayectoria+0xa24>)
 80051be:	ed93 7b00 	vldr	d7, [r3]
 80051c2:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 80051c6:	eeb0 0b47 	vmov.f64	d0, d7
 80051ca:	f00c fc29 	bl	8011a20 <pow>
 80051ce:	eeb0 5b40 	vmov.f64	d5, d0
 80051d2:	ed97 7b00 	vldr	d7, [r7]
 80051d6:	ee37 6b07 	vadd.f64	d6, d7, d7
 80051da:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80051de:	ee38 7b47 	vsub.f64	d7, d8, d7
 80051e2:	4b96      	ldr	r3, [pc, #600]	; (800543c <inicializarTrayectoria+0xa34>)
 80051e4:	ed83 7b00 	vstr	d7, [r3]
			XfHip3 = XiHip4
					- (((ViHip4) / fabs(ViHip4)) * (fabs(Af) / 2)
 80051e8:	4b92      	ldr	r3, [pc, #584]	; (8005434 <inicializarTrayectoria+0xa2c>)
 80051ea:	ed93 8b00 	vldr	d8, [r3]
 80051ee:	4b90      	ldr	r3, [pc, #576]	; (8005430 <inicializarTrayectoria+0xa28>)
 80051f0:	ed93 5b00 	vldr	d5, [r3]
 80051f4:	4b8e      	ldr	r3, [pc, #568]	; (8005430 <inicializarTrayectoria+0xa28>)
 80051f6:	ed93 7b00 	vldr	d7, [r3]
 80051fa:	eeb0 7bc7 	vabs.f64	d7, d7
 80051fe:	ee85 6b07 	vdiv.f64	d6, d5, d7
 8005202:	4b8a      	ldr	r3, [pc, #552]	; (800542c <inicializarTrayectoria+0xa24>)
 8005204:	ed93 7b00 	vldr	d7, [r3]
 8005208:	eeb0 5bc7 	vabs.f64	d5, d7
 800520c:	eeb0 4b00 	vmov.f64	d4, #0	; 0x40000000  2.0
 8005210:	ee85 7b04 	vdiv.f64	d7, d5, d4
 8005214:	ee26 9b07 	vmul.f64	d9, d6, d7
							* pow(((ViHip4 - VfHip3) / Af), 2)
 8005218:	4b85      	ldr	r3, [pc, #532]	; (8005430 <inicializarTrayectoria+0xa28>)
 800521a:	ed93 6b00 	vldr	d6, [r3]
 800521e:	4b87      	ldr	r3, [pc, #540]	; (800543c <inicializarTrayectoria+0xa34>)
 8005220:	ed93 7b00 	vldr	d7, [r3]
 8005224:	ee36 6b47 	vsub.f64	d6, d6, d7
 8005228:	4b80      	ldr	r3, [pc, #512]	; (800542c <inicializarTrayectoria+0xa24>)
 800522a:	ed93 7b00 	vldr	d7, [r3]
 800522e:	ee86 5b07 	vdiv.f64	d5, d6, d7
 8005232:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8005236:	eeb0 0b45 	vmov.f64	d0, d5
 800523a:	f00c fbf1 	bl	8011a20 <pow>
 800523e:	eeb0 7b40 	vmov.f64	d7, d0
 8005242:	ee29 6b07 	vmul.f64	d6, d9, d7
							+ ViHip4 * ((ViHip4 - VfHip3) / Af));
 8005246:	4b7a      	ldr	r3, [pc, #488]	; (8005430 <inicializarTrayectoria+0xa28>)
 8005248:	ed93 5b00 	vldr	d5, [r3]
 800524c:	4b7b      	ldr	r3, [pc, #492]	; (800543c <inicializarTrayectoria+0xa34>)
 800524e:	ed93 7b00 	vldr	d7, [r3]
 8005252:	ee35 4b47 	vsub.f64	d4, d5, d7
 8005256:	4b75      	ldr	r3, [pc, #468]	; (800542c <inicializarTrayectoria+0xa24>)
 8005258:	ed93 7b00 	vldr	d7, [r3]
 800525c:	ee84 5b07 	vdiv.f64	d5, d4, d7
 8005260:	4b73      	ldr	r3, [pc, #460]	; (8005430 <inicializarTrayectoria+0xa28>)
 8005262:	ed93 7b00 	vldr	d7, [r3]
 8005266:	ee25 7b07 	vmul.f64	d7, d5, d7
 800526a:	ee36 7b07 	vadd.f64	d7, d6, d7
					- (((ViHip4) / fabs(ViHip4)) * (fabs(Af) / 2)
 800526e:	ee38 7b47 	vsub.f64	d7, d8, d7
			XfHip3 = XiHip4
 8005272:	4b73      	ldr	r3, [pc, #460]	; (8005440 <inicializarTrayectoria+0xa38>)
 8005274:	ed83 7b00 	vstr	d7, [r3]
			XiHip3 = XfHip3 - Vm * (Af / (-Jerk))
 8005278:	4b6c      	ldr	r3, [pc, #432]	; (800542c <inicializarTrayectoria+0xa24>)
 800527a:	ed93 5b00 	vldr	d5, [r3]
 800527e:	ed97 7b00 	vldr	d7, [r7]
 8005282:	ee85 6b07 	vdiv.f64	d6, d5, d7
 8005286:	4b6c      	ldr	r3, [pc, #432]	; (8005438 <inicializarTrayectoria+0xa30>)
 8005288:	ed93 7b00 	vldr	d7, [r3]
 800528c:	ee26 6b07 	vmul.f64	d6, d6, d7
 8005290:	4b6b      	ldr	r3, [pc, #428]	; (8005440 <inicializarTrayectoria+0xa38>)
 8005292:	ed93 7b00 	vldr	d7, [r3]
 8005296:	ee36 8b07 	vadd.f64	d8, d6, d7
					- (pow(Af, 3) / (6 * (pow(-Jerk, 2))));
 800529a:	4b64      	ldr	r3, [pc, #400]	; (800542c <inicializarTrayectoria+0xa24>)
 800529c:	ed93 7b00 	vldr	d7, [r3]
 80052a0:	eeb0 1b08 	vmov.f64	d1, #8	; 0x40400000  3.0
 80052a4:	eeb0 0b47 	vmov.f64	d0, d7
 80052a8:	f00c fbba 	bl	8011a20 <pow>
 80052ac:	eeb0 9b40 	vmov.f64	d9, d0
 80052b0:	ed97 7b00 	vldr	d7, [r7]
 80052b4:	eeb1 7b47 	vneg.f64	d7, d7
 80052b8:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 80052bc:	eeb0 0b47 	vmov.f64	d0, d7
 80052c0:	f00c fbae 	bl	8011a20 <pow>
 80052c4:	eeb0 7b40 	vmov.f64	d7, d0
 80052c8:	eeb1 6b08 	vmov.f64	d6, #24	; 0x40c00000  6.0
 80052cc:	ee27 6b06 	vmul.f64	d6, d7, d6
 80052d0:	ee89 7b06 	vdiv.f64	d7, d9, d6
 80052d4:	ee38 7b47 	vsub.f64	d7, d8, d7
			XiHip3 = XfHip3 - Vm * (Af / (-Jerk))
 80052d8:	4b5a      	ldr	r3, [pc, #360]	; (8005444 <inicializarTrayectoria+0xa3c>)
 80052da:	ed83 7b00 	vstr	d7, [r3]
			tiHip3 = fabs((XiHip3 - XfHip2) / Vm) + tfHip2;
 80052de:	4b59      	ldr	r3, [pc, #356]	; (8005444 <inicializarTrayectoria+0xa3c>)
 80052e0:	ed93 6b00 	vldr	d6, [r3]
 80052e4:	4b58      	ldr	r3, [pc, #352]	; (8005448 <inicializarTrayectoria+0xa40>)
 80052e6:	ed93 7b00 	vldr	d7, [r3]
 80052ea:	ee36 5b47 	vsub.f64	d5, d6, d7
 80052ee:	4b52      	ldr	r3, [pc, #328]	; (8005438 <inicializarTrayectoria+0xa30>)
 80052f0:	ed93 6b00 	vldr	d6, [r3]
 80052f4:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80052f8:	eeb0 6bc7 	vabs.f64	d6, d7
 80052fc:	4b53      	ldr	r3, [pc, #332]	; (800544c <inicializarTrayectoria+0xa44>)
 80052fe:	ed93 7b00 	vldr	d7, [r3]
 8005302:	ee36 7b07 	vadd.f64	d7, d6, d7
 8005306:	4b52      	ldr	r3, [pc, #328]	; (8005450 <inicializarTrayectoria+0xa48>)
 8005308:	ed83 7b00 	vstr	d7, [r3]
			//  Polinomio de 3° orden (Jerk cte, parabola en V, hiperbola en X)         HIPERBOLA 3
			a3Hip3 = (-Jerk / 6);
 800530c:	ed97 7b00 	vldr	d7, [r7]
 8005310:	eeb1 6b47 	vneg.f64	d6, d7
 8005314:	eeb1 5b08 	vmov.f64	d5, #24	; 0x40c00000  6.0
 8005318:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800531c:	4b4d      	ldr	r3, [pc, #308]	; (8005454 <inicializarTrayectoria+0xa4c>)
 800531e:	ed83 7b00 	vstr	d7, [r3]
			a2Hip3 = 0;
 8005322:	494d      	ldr	r1, [pc, #308]	; (8005458 <inicializarTrayectoria+0xa50>)
 8005324:	f04f 0200 	mov.w	r2, #0
 8005328:	f04f 0300 	mov.w	r3, #0
 800532c:	e9c1 2300 	strd	r2, r3, [r1]
			tfHip3 = (Af / (-Jerk)) + tiHip3;
 8005330:	4b3e      	ldr	r3, [pc, #248]	; (800542c <inicializarTrayectoria+0xa24>)
 8005332:	ed93 7b00 	vldr	d7, [r3]
 8005336:	eeb1 5b47 	vneg.f64	d5, d7
 800533a:	ed97 7b00 	vldr	d7, [r7]
 800533e:	ee85 6b07 	vdiv.f64	d6, d5, d7
 8005342:	4b43      	ldr	r3, [pc, #268]	; (8005450 <inicializarTrayectoria+0xa48>)
 8005344:	ed93 7b00 	vldr	d7, [r3]
 8005348:	ee36 7b07 	vadd.f64	d7, d6, d7
 800534c:	4b43      	ldr	r3, [pc, #268]	; (800545c <inicializarTrayectoria+0xa54>)
 800534e:	ed83 7b00 	vstr	d7, [r3]
			a1Hip3 = Vm;
 8005352:	4b39      	ldr	r3, [pc, #228]	; (8005438 <inicializarTrayectoria+0xa30>)
 8005354:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005358:	4941      	ldr	r1, [pc, #260]	; (8005460 <inicializarTrayectoria+0xa58>)
 800535a:	e9c1 2300 	strd	r2, r3, [r1]
			a0Hip3 = XiHip3;
 800535e:	4b39      	ldr	r3, [pc, #228]	; (8005444 <inicializarTrayectoria+0xa3c>)
 8005360:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005364:	493f      	ldr	r1, [pc, #252]	; (8005464 <inicializarTrayectoria+0xa5c>)
 8005366:	e9c1 2300 	strd	r2, r3, [r1]
			// Polinomio de 2° orden (Acel cte, trapecio en V, parabola en X)           PARABOLA 2
			tiHip4 = ((ViHip4 - VfHip3) / Af) + tfHip3;
 800536a:	4b31      	ldr	r3, [pc, #196]	; (8005430 <inicializarTrayectoria+0xa28>)
 800536c:	ed93 6b00 	vldr	d6, [r3]
 8005370:	4b32      	ldr	r3, [pc, #200]	; (800543c <inicializarTrayectoria+0xa34>)
 8005372:	ed93 7b00 	vldr	d7, [r3]
 8005376:	ee36 5b47 	vsub.f64	d5, d6, d7
 800537a:	4b2c      	ldr	r3, [pc, #176]	; (800542c <inicializarTrayectoria+0xa24>)
 800537c:	ed93 7b00 	vldr	d7, [r3]
 8005380:	ee85 6b07 	vdiv.f64	d6, d5, d7
 8005384:	4b35      	ldr	r3, [pc, #212]	; (800545c <inicializarTrayectoria+0xa54>)
 8005386:	ed93 7b00 	vldr	d7, [r3]
 800538a:	ee36 7b07 	vadd.f64	d7, d6, d7
 800538e:	4b36      	ldr	r3, [pc, #216]	; (8005468 <inicializarTrayectoria+0xa60>)
 8005390:	ed83 7b00 	vstr	d7, [r3]
			//  Polinomio de 3° orden (Jerk cte, parabola en V, hiperbola en X)         HIPERBOLA 4
			a3Hip4 = Jerk / 6;
 8005394:	ed97 6b00 	vldr	d6, [r7]
 8005398:	eeb1 5b08 	vmov.f64	d5, #24	; 0x40c00000  6.0
 800539c:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80053a0:	4b32      	ldr	r3, [pc, #200]	; (800546c <inicializarTrayectoria+0xa64>)
 80053a2:	ed83 7b00 	vstr	d7, [r3]
			a2Hip4 = Af / 2;
 80053a6:	4b21      	ldr	r3, [pc, #132]	; (800542c <inicializarTrayectoria+0xa24>)
 80053a8:	ed93 6b00 	vldr	d6, [r3]
 80053ac:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 80053b0:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80053b4:	4b2e      	ldr	r3, [pc, #184]	; (8005470 <inicializarTrayectoria+0xa68>)
 80053b6:	ed83 7b00 	vstr	d7, [r3]
			tfHip4 = fabs(Af / Jerk) + tiHip4;
 80053ba:	4b1c      	ldr	r3, [pc, #112]	; (800542c <inicializarTrayectoria+0xa24>)
 80053bc:	ed93 5b00 	vldr	d5, [r3]
 80053c0:	ed97 6b00 	vldr	d6, [r7]
 80053c4:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80053c8:	eeb0 6bc7 	vabs.f64	d6, d7
 80053cc:	4b26      	ldr	r3, [pc, #152]	; (8005468 <inicializarTrayectoria+0xa60>)
 80053ce:	ed93 7b00 	vldr	d7, [r3]
 80053d2:	ee36 7b07 	vadd.f64	d7, d6, d7
 80053d6:	4b27      	ldr	r3, [pc, #156]	; (8005474 <inicializarTrayectoria+0xa6c>)
 80053d8:	ed83 7b00 	vstr	d7, [r3]
			a1Hip4 = ViHip4;
 80053dc:	4b14      	ldr	r3, [pc, #80]	; (8005430 <inicializarTrayectoria+0xa28>)
 80053de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053e2:	4925      	ldr	r1, [pc, #148]	; (8005478 <inicializarTrayectoria+0xa70>)
 80053e4:	e9c1 2300 	strd	r2, r3, [r1]
			a0Hip4 = XiHip4;
 80053e8:	4b12      	ldr	r3, [pc, #72]	; (8005434 <inicializarTrayectoria+0xa2c>)
 80053ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053ee:	4923      	ldr	r1, [pc, #140]	; (800547c <inicializarTrayectoria+0xa74>)
 80053f0:	e9c1 2300 	strd	r2, r3, [r1]
			TiempoTotX = tfHip4;
 80053f4:	4b1f      	ldr	r3, [pc, #124]	; (8005474 <inicializarTrayectoria+0xa6c>)
 80053f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053fa:	4921      	ldr	r1, [pc, #132]	; (8005480 <inicializarTrayectoria+0xa78>)
 80053fc:	e9c1 2300 	strd	r2, r3, [r1]
		}
		if (XiHip1 < XfHip4) {      // Por si va en un sentido o en el otro
 8005400:	ed97 6b0c 	vldr	d6, [r7, #48]	; 0x30
 8005404:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 8005408:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800540c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005410:	d553      	bpl.n	80054ba <inicializarTrayectoria+0xab2>
			if (XiHip3 < XfHip2) { // la superposicion de la hip 3 con la 2, acusa de que no se alcanzó la vel maxima
 8005412:	4b0c      	ldr	r3, [pc, #48]	; (8005444 <inicializarTrayectoria+0xa3c>)
 8005414:	ed93 6b00 	vldr	d6, [r3]
 8005418:	4b0b      	ldr	r3, [pc, #44]	; (8005448 <inicializarTrayectoria+0xa40>)
 800541a:	ed93 7b00 	vldr	d7, [r3]
 800541e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8005422:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005426:	d42d      	bmi.n	8005484 <inicializarTrayectoria+0xa7c>
				Vm = Vm - (Vmax * 0.01) * (Vm / fabs(Vm));
			} else {
				break;
 8005428:	e077      	b.n	800551a <inicializarTrayectoria+0xb12>
 800542a:	bf00      	nop
 800542c:	24000a50 	.word	0x24000a50
 8005430:	24000b78 	.word	0x24000b78
 8005434:	24000b80 	.word	0x24000b80
 8005438:	24000af8 	.word	0x24000af8
 800543c:	24000b08 	.word	0x24000b08
 8005440:	24000ae8 	.word	0x24000ae8
 8005444:	24000af0 	.word	0x24000af0
 8005448:	24000ae0 	.word	0x24000ae0
 800544c:	24000b20 	.word	0x24000b20
 8005450:	24000b28 	.word	0x24000b28
 8005454:	24000ab0 	.word	0x24000ab0
 8005458:	24000aa8 	.word	0x24000aa8
 800545c:	24000b30 	.word	0x24000b30
 8005460:	24000aa0 	.word	0x24000aa0
 8005464:	24000a98 	.word	0x24000a98
 8005468:	24000b38 	.word	0x24000b38
 800546c:	24000ad0 	.word	0x24000ad0
 8005470:	24000ac8 	.word	0x24000ac8
 8005474:	24000b48 	.word	0x24000b48
 8005478:	24000ac0 	.word	0x24000ac0
 800547c:	24000ab8 	.word	0x24000ab8
 8005480:	24000b40 	.word	0x24000b40
				Vm = Vm - (Vmax * 0.01) * (Vm / fabs(Vm));
 8005484:	4b2e      	ldr	r3, [pc, #184]	; (8005540 <inicializarTrayectoria+0xb38>)
 8005486:	ed93 6b00 	vldr	d6, [r3]
 800548a:	ed97 7b04 	vldr	d7, [r7, #16]
 800548e:	ed9f 5b2a 	vldr	d5, [pc, #168]	; 8005538 <inicializarTrayectoria+0xb30>
 8005492:	ee27 5b05 	vmul.f64	d5, d7, d5
 8005496:	4b2a      	ldr	r3, [pc, #168]	; (8005540 <inicializarTrayectoria+0xb38>)
 8005498:	ed93 3b00 	vldr	d3, [r3]
 800549c:	4b28      	ldr	r3, [pc, #160]	; (8005540 <inicializarTrayectoria+0xb38>)
 800549e:	ed93 7b00 	vldr	d7, [r3]
 80054a2:	eeb0 4bc7 	vabs.f64	d4, d7
 80054a6:	ee83 7b04 	vdiv.f64	d7, d3, d4
 80054aa:	ee25 7b07 	vmul.f64	d7, d5, d7
 80054ae:	ee36 7b47 	vsub.f64	d7, d6, d7
 80054b2:	4b23      	ldr	r3, [pc, #140]	; (8005540 <inicializarTrayectoria+0xb38>)
 80054b4:	ed83 7b00 	vstr	d7, [r3]
 80054b8:	e025      	b.n	8005506 <inicializarTrayectoria+0xafe>
			}
		} else {
			if (XiHip3 > XfHip2) { // la superposicion de la hip 3 con la 2, acusa de que no se alcanzó la vel maxima
 80054ba:	4b22      	ldr	r3, [pc, #136]	; (8005544 <inicializarTrayectoria+0xb3c>)
 80054bc:	ed93 6b00 	vldr	d6, [r3]
 80054c0:	4b21      	ldr	r3, [pc, #132]	; (8005548 <inicializarTrayectoria+0xb40>)
 80054c2:	ed93 7b00 	vldr	d7, [r3]
 80054c6:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80054ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80054ce:	dc00      	bgt.n	80054d2 <inicializarTrayectoria+0xaca>
				Vm = Vm - (Vmax * 0.01) * (Vm / fabs(Vm));
			} else {
				break;
 80054d0:	e023      	b.n	800551a <inicializarTrayectoria+0xb12>
				Vm = Vm - (Vmax * 0.01) * (Vm / fabs(Vm));
 80054d2:	4b1b      	ldr	r3, [pc, #108]	; (8005540 <inicializarTrayectoria+0xb38>)
 80054d4:	ed93 6b00 	vldr	d6, [r3]
 80054d8:	ed97 7b04 	vldr	d7, [r7, #16]
 80054dc:	ed9f 5b16 	vldr	d5, [pc, #88]	; 8005538 <inicializarTrayectoria+0xb30>
 80054e0:	ee27 5b05 	vmul.f64	d5, d7, d5
 80054e4:	4b16      	ldr	r3, [pc, #88]	; (8005540 <inicializarTrayectoria+0xb38>)
 80054e6:	ed93 3b00 	vldr	d3, [r3]
 80054ea:	4b15      	ldr	r3, [pc, #84]	; (8005540 <inicializarTrayectoria+0xb38>)
 80054ec:	ed93 7b00 	vldr	d7, [r3]
 80054f0:	eeb0 4bc7 	vabs.f64	d4, d7
 80054f4:	ee83 7b04 	vdiv.f64	d7, d3, d4
 80054f8:	ee25 7b07 	vmul.f64	d7, d5, d7
 80054fc:	ee36 7b47 	vsub.f64	d7, d6, d7
 8005500:	4b0f      	ldr	r3, [pc, #60]	; (8005540 <inicializarTrayectoria+0xb38>)
 8005502:	ed83 7b00 	vstr	d7, [r3]
	for (uint8_t Iteracion = 0; Iteracion < 100; Iteracion++) { // Itero 40 veces, solo en caso de que no se alcance la vel maxima, sino salgo
 8005506:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800550a:	3301      	adds	r3, #1
 800550c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8005510:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8005514:	2b63      	cmp	r3, #99	; 0x63
 8005516:	f67f aaf6 	bls.w	8004b06 <inicializarTrayectoria+0xfe>
			}
		}
	}
	TiempoTotal = tfHip4;
 800551a:	4b0c      	ldr	r3, [pc, #48]	; (800554c <inicializarTrayectoria+0xb44>)
 800551c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005520:	490b      	ldr	r1, [pc, #44]	; (8005550 <inicializarTrayectoria+0xb48>)
 8005522:	e9c1 2300 	strd	r2, r3, [r1]
}
 8005526:	bf00      	nop
 8005528:	3740      	adds	r7, #64	; 0x40
 800552a:	46bd      	mov	sp, r7
 800552c:	ecbd 8b04 	vpop	{d8-d9}
 8005530:	bd80      	pop	{r7, pc}
 8005532:	bf00      	nop
 8005534:	f3af 8000 	nop.w
 8005538:	47ae147b 	.word	0x47ae147b
 800553c:	3f847ae1 	.word	0x3f847ae1
 8005540:	24000af8 	.word	0x24000af8
 8005544:	24000af0 	.word	0x24000af0
 8005548:	24000ae0 	.word	0x24000ae0
 800554c:	24000b48 	.word	0x24000b48
 8005550:	24000440 	.word	0x24000440

08005554 <obtenerVelCurva>:

void obtenerVelCurva(double t) {
 8005554:	b580      	push	{r7, lr}
 8005556:	ed2d 8b04 	vpush	{d8-d9}
 800555a:	b082      	sub	sp, #8
 800555c:	af00      	add	r7, sp, #0
 800555e:	ed87 0b00 	vstr	d0, [r7]
	/*   -----------------------------------------------------------------------
	 * 	 Funcion que devuelve la velocidad de la trayectoria en un instante dado
	 *	 Entrada: tiempo actual,
	 *	 Salida:  velocidad lineal en m/s en el instante de tiempo t
	 -----------------------------------------------------------------------*/
	if (t <= tfHip1) {                                      // Hiperbola 1
 8005562:	4bc3      	ldr	r3, [pc, #780]	; (8005870 <obtenerVelCurva+0x31c>)
 8005564:	ed93 7b00 	vldr	d7, [r3]
 8005568:	ed97 6b00 	vldr	d6, [r7]
 800556c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8005570:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005574:	d866      	bhi.n	8005644 <obtenerVelCurva+0xf0>
		X = a0Hip1 + a1Hip1 * t + a2Hip1 * pow(t, 2) + a3Hip1 * pow(t, 3);
 8005576:	4bbf      	ldr	r3, [pc, #764]	; (8005874 <obtenerVelCurva+0x320>)
 8005578:	ed93 6b00 	vldr	d6, [r3]
 800557c:	ed97 7b00 	vldr	d7, [r7]
 8005580:	ee26 6b07 	vmul.f64	d6, d6, d7
 8005584:	4bbc      	ldr	r3, [pc, #752]	; (8005878 <obtenerVelCurva+0x324>)
 8005586:	ed93 7b00 	vldr	d7, [r3]
 800558a:	ee36 8b07 	vadd.f64	d8, d6, d7
 800558e:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8005592:	ed97 0b00 	vldr	d0, [r7]
 8005596:	f00c fa43 	bl	8011a20 <pow>
 800559a:	eeb0 6b40 	vmov.f64	d6, d0
 800559e:	4bb7      	ldr	r3, [pc, #732]	; (800587c <obtenerVelCurva+0x328>)
 80055a0:	ed93 7b00 	vldr	d7, [r3]
 80055a4:	ee26 7b07 	vmul.f64	d7, d6, d7
 80055a8:	ee38 8b07 	vadd.f64	d8, d8, d7
 80055ac:	eeb0 1b08 	vmov.f64	d1, #8	; 0x40400000  3.0
 80055b0:	ed97 0b00 	vldr	d0, [r7]
 80055b4:	f00c fa34 	bl	8011a20 <pow>
 80055b8:	eeb0 6b40 	vmov.f64	d6, d0
 80055bc:	4bb0      	ldr	r3, [pc, #704]	; (8005880 <obtenerVelCurva+0x32c>)
 80055be:	ed93 7b00 	vldr	d7, [r3]
 80055c2:	ee26 7b07 	vmul.f64	d7, d6, d7
 80055c6:	ee38 7b07 	vadd.f64	d7, d8, d7
 80055ca:	4bae      	ldr	r3, [pc, #696]	; (8005884 <obtenerVelCurva+0x330>)
 80055cc:	ed83 7b00 	vstr	d7, [r3]
		DX = a1Hip1 + 2.0 * a2Hip1 * t + 3 * a3Hip1 * pow(t, 2);
 80055d0:	4baa      	ldr	r3, [pc, #680]	; (800587c <obtenerVelCurva+0x328>)
 80055d2:	ed93 7b00 	vldr	d7, [r3]
 80055d6:	ee37 6b07 	vadd.f64	d6, d7, d7
 80055da:	ed97 7b00 	vldr	d7, [r7]
 80055de:	ee26 6b07 	vmul.f64	d6, d6, d7
 80055e2:	4ba4      	ldr	r3, [pc, #656]	; (8005874 <obtenerVelCurva+0x320>)
 80055e4:	ed93 7b00 	vldr	d7, [r3]
 80055e8:	ee36 8b07 	vadd.f64	d8, d6, d7
 80055ec:	4ba4      	ldr	r3, [pc, #656]	; (8005880 <obtenerVelCurva+0x32c>)
 80055ee:	ed93 7b00 	vldr	d7, [r3]
 80055f2:	eeb0 6b08 	vmov.f64	d6, #8	; 0x40400000  3.0
 80055f6:	ee27 9b06 	vmul.f64	d9, d7, d6
 80055fa:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 80055fe:	ed97 0b00 	vldr	d0, [r7]
 8005602:	f00c fa0d 	bl	8011a20 <pow>
 8005606:	eeb0 7b40 	vmov.f64	d7, d0
 800560a:	ee29 7b07 	vmul.f64	d7, d9, d7
 800560e:	ee38 7b07 	vadd.f64	d7, d8, d7
 8005612:	4b9d      	ldr	r3, [pc, #628]	; (8005888 <obtenerVelCurva+0x334>)
 8005614:	ed83 7b00 	vstr	d7, [r3]
		DDX = 2.0 * a2Hip1 + 6 * a3Hip1 * t;
 8005618:	4b98      	ldr	r3, [pc, #608]	; (800587c <obtenerVelCurva+0x328>)
 800561a:	ed93 7b00 	vldr	d7, [r3]
 800561e:	ee37 6b07 	vadd.f64	d6, d7, d7
 8005622:	4b97      	ldr	r3, [pc, #604]	; (8005880 <obtenerVelCurva+0x32c>)
 8005624:	ed93 7b00 	vldr	d7, [r3]
 8005628:	eeb1 5b08 	vmov.f64	d5, #24	; 0x40c00000  6.0
 800562c:	ee27 5b05 	vmul.f64	d5, d7, d5
 8005630:	ed97 7b00 	vldr	d7, [r7]
 8005634:	ee25 7b07 	vmul.f64	d7, d5, d7
 8005638:	ee36 7b07 	vadd.f64	d7, d6, d7
 800563c:	4b93      	ldr	r3, [pc, #588]	; (800588c <obtenerVelCurva+0x338>)
 800563e:	ed83 7b00 	vstr	d7, [r3]
		X = 0;
		DX = 0;
		DDX = 0;
	}

}
 8005642:	e30e      	b.n	8005c62 <obtenerVelCurva+0x70e>
	} else if (t <= (tiHip2)) {                              // Parabola 1
 8005644:	4b92      	ldr	r3, [pc, #584]	; (8005890 <obtenerVelCurva+0x33c>)
 8005646:	ed93 7b00 	vldr	d7, [r3]
 800564a:	ed97 6b00 	vldr	d6, [r7]
 800564e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8005652:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005656:	d848      	bhi.n	80056ea <obtenerVelCurva+0x196>
		X = (Ai / 2) * pow((t - tfHip1), 2) + VfHip1 * (t - tfHip1) + XfHip1;
 8005658:	4b8e      	ldr	r3, [pc, #568]	; (8005894 <obtenerVelCurva+0x340>)
 800565a:	ed93 7b00 	vldr	d7, [r3]
 800565e:	eeb0 6b00 	vmov.f64	d6, #0	; 0x40000000  2.0
 8005662:	ee87 8b06 	vdiv.f64	d8, d7, d6
 8005666:	4b82      	ldr	r3, [pc, #520]	; (8005870 <obtenerVelCurva+0x31c>)
 8005668:	ed93 7b00 	vldr	d7, [r3]
 800566c:	ed97 6b00 	vldr	d6, [r7]
 8005670:	ee36 7b47 	vsub.f64	d7, d6, d7
 8005674:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8005678:	eeb0 0b47 	vmov.f64	d0, d7
 800567c:	f00c f9d0 	bl	8011a20 <pow>
 8005680:	eeb0 7b40 	vmov.f64	d7, d0
 8005684:	ee28 6b07 	vmul.f64	d6, d8, d7
 8005688:	4b79      	ldr	r3, [pc, #484]	; (8005870 <obtenerVelCurva+0x31c>)
 800568a:	ed93 7b00 	vldr	d7, [r3]
 800568e:	ed97 5b00 	vldr	d5, [r7]
 8005692:	ee35 5b47 	vsub.f64	d5, d5, d7
 8005696:	4b80      	ldr	r3, [pc, #512]	; (8005898 <obtenerVelCurva+0x344>)
 8005698:	ed93 7b00 	vldr	d7, [r3]
 800569c:	ee25 7b07 	vmul.f64	d7, d5, d7
 80056a0:	ee36 6b07 	vadd.f64	d6, d6, d7
 80056a4:	4b7d      	ldr	r3, [pc, #500]	; (800589c <obtenerVelCurva+0x348>)
 80056a6:	ed93 7b00 	vldr	d7, [r3]
 80056aa:	ee36 7b07 	vadd.f64	d7, d6, d7
 80056ae:	4b75      	ldr	r3, [pc, #468]	; (8005884 <obtenerVelCurva+0x330>)
 80056b0:	ed83 7b00 	vstr	d7, [r3]
		DX = Ai * (t - tfHip1) + VfHip1;
 80056b4:	4b6e      	ldr	r3, [pc, #440]	; (8005870 <obtenerVelCurva+0x31c>)
 80056b6:	ed93 7b00 	vldr	d7, [r3]
 80056ba:	ed97 6b00 	vldr	d6, [r7]
 80056be:	ee36 6b47 	vsub.f64	d6, d6, d7
 80056c2:	4b74      	ldr	r3, [pc, #464]	; (8005894 <obtenerVelCurva+0x340>)
 80056c4:	ed93 7b00 	vldr	d7, [r3]
 80056c8:	ee26 6b07 	vmul.f64	d6, d6, d7
 80056cc:	4b72      	ldr	r3, [pc, #456]	; (8005898 <obtenerVelCurva+0x344>)
 80056ce:	ed93 7b00 	vldr	d7, [r3]
 80056d2:	ee36 7b07 	vadd.f64	d7, d6, d7
 80056d6:	4b6c      	ldr	r3, [pc, #432]	; (8005888 <obtenerVelCurva+0x334>)
 80056d8:	ed83 7b00 	vstr	d7, [r3]
		DDX = Ai;
 80056dc:	4b6d      	ldr	r3, [pc, #436]	; (8005894 <obtenerVelCurva+0x340>)
 80056de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056e2:	496a      	ldr	r1, [pc, #424]	; (800588c <obtenerVelCurva+0x338>)
 80056e4:	e9c1 2300 	strd	r2, r3, [r1]
}
 80056e8:	e2bb      	b.n	8005c62 <obtenerVelCurva+0x70e>
	} else if (t <= (tfHip2)) {                            // Hiperbola 2
 80056ea:	4b6d      	ldr	r3, [pc, #436]	; (80058a0 <obtenerVelCurva+0x34c>)
 80056ec:	ed93 7b00 	vldr	d7, [r3]
 80056f0:	ed97 6b00 	vldr	d6, [r7]
 80056f4:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80056f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80056fc:	f200 808b 	bhi.w	8005816 <obtenerVelCurva+0x2c2>
		X = a0Hip2 + a1Hip2 * (t - tiHip2) + a2Hip2 * pow((t - tiHip2), 2)
 8005700:	4b63      	ldr	r3, [pc, #396]	; (8005890 <obtenerVelCurva+0x33c>)
 8005702:	ed93 7b00 	vldr	d7, [r3]
 8005706:	ed97 6b00 	vldr	d6, [r7]
 800570a:	ee36 6b47 	vsub.f64	d6, d6, d7
 800570e:	4b65      	ldr	r3, [pc, #404]	; (80058a4 <obtenerVelCurva+0x350>)
 8005710:	ed93 7b00 	vldr	d7, [r3]
 8005714:	ee26 6b07 	vmul.f64	d6, d6, d7
 8005718:	4b63      	ldr	r3, [pc, #396]	; (80058a8 <obtenerVelCurva+0x354>)
 800571a:	ed93 7b00 	vldr	d7, [r3]
 800571e:	ee36 8b07 	vadd.f64	d8, d6, d7
 8005722:	4b5b      	ldr	r3, [pc, #364]	; (8005890 <obtenerVelCurva+0x33c>)
 8005724:	ed93 7b00 	vldr	d7, [r3]
 8005728:	ed97 6b00 	vldr	d6, [r7]
 800572c:	ee36 7b47 	vsub.f64	d7, d6, d7
 8005730:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8005734:	eeb0 0b47 	vmov.f64	d0, d7
 8005738:	f00c f972 	bl	8011a20 <pow>
 800573c:	eeb0 6b40 	vmov.f64	d6, d0
 8005740:	4b5a      	ldr	r3, [pc, #360]	; (80058ac <obtenerVelCurva+0x358>)
 8005742:	ed93 7b00 	vldr	d7, [r3]
 8005746:	ee26 7b07 	vmul.f64	d7, d6, d7
 800574a:	ee38 8b07 	vadd.f64	d8, d8, d7
				+ a3Hip2 * pow((t - tiHip2), 3);
 800574e:	4b50      	ldr	r3, [pc, #320]	; (8005890 <obtenerVelCurva+0x33c>)
 8005750:	ed93 7b00 	vldr	d7, [r3]
 8005754:	ed97 6b00 	vldr	d6, [r7]
 8005758:	ee36 7b47 	vsub.f64	d7, d6, d7
 800575c:	eeb0 1b08 	vmov.f64	d1, #8	; 0x40400000  3.0
 8005760:	eeb0 0b47 	vmov.f64	d0, d7
 8005764:	f00c f95c 	bl	8011a20 <pow>
 8005768:	eeb0 6b40 	vmov.f64	d6, d0
 800576c:	4b50      	ldr	r3, [pc, #320]	; (80058b0 <obtenerVelCurva+0x35c>)
 800576e:	ed93 7b00 	vldr	d7, [r3]
 8005772:	ee26 7b07 	vmul.f64	d7, d6, d7
 8005776:	ee38 7b07 	vadd.f64	d7, d8, d7
		X = a0Hip2 + a1Hip2 * (t - tiHip2) + a2Hip2 * pow((t - tiHip2), 2)
 800577a:	4b42      	ldr	r3, [pc, #264]	; (8005884 <obtenerVelCurva+0x330>)
 800577c:	ed83 7b00 	vstr	d7, [r3]
		DX = a1Hip2 + 2.0 * a2Hip2 * (t - tiHip2)
 8005780:	4b4a      	ldr	r3, [pc, #296]	; (80058ac <obtenerVelCurva+0x358>)
 8005782:	ed93 7b00 	vldr	d7, [r3]
 8005786:	ee37 6b07 	vadd.f64	d6, d7, d7
 800578a:	4b41      	ldr	r3, [pc, #260]	; (8005890 <obtenerVelCurva+0x33c>)
 800578c:	ed93 7b00 	vldr	d7, [r3]
 8005790:	ed97 5b00 	vldr	d5, [r7]
 8005794:	ee35 7b47 	vsub.f64	d7, d5, d7
 8005798:	ee26 6b07 	vmul.f64	d6, d6, d7
 800579c:	4b41      	ldr	r3, [pc, #260]	; (80058a4 <obtenerVelCurva+0x350>)
 800579e:	ed93 7b00 	vldr	d7, [r3]
 80057a2:	ee36 8b07 	vadd.f64	d8, d6, d7
				+ 3 * a3Hip2 * pow((t - tiHip2), 2);
 80057a6:	4b42      	ldr	r3, [pc, #264]	; (80058b0 <obtenerVelCurva+0x35c>)
 80057a8:	ed93 7b00 	vldr	d7, [r3]
 80057ac:	eeb0 6b08 	vmov.f64	d6, #8	; 0x40400000  3.0
 80057b0:	ee27 9b06 	vmul.f64	d9, d7, d6
 80057b4:	4b36      	ldr	r3, [pc, #216]	; (8005890 <obtenerVelCurva+0x33c>)
 80057b6:	ed93 7b00 	vldr	d7, [r3]
 80057ba:	ed97 6b00 	vldr	d6, [r7]
 80057be:	ee36 7b47 	vsub.f64	d7, d6, d7
 80057c2:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 80057c6:	eeb0 0b47 	vmov.f64	d0, d7
 80057ca:	f00c f929 	bl	8011a20 <pow>
 80057ce:	eeb0 7b40 	vmov.f64	d7, d0
 80057d2:	ee29 7b07 	vmul.f64	d7, d9, d7
 80057d6:	ee38 7b07 	vadd.f64	d7, d8, d7
		DX = a1Hip2 + 2.0 * a2Hip2 * (t - tiHip2)
 80057da:	4b2b      	ldr	r3, [pc, #172]	; (8005888 <obtenerVelCurva+0x334>)
 80057dc:	ed83 7b00 	vstr	d7, [r3]
		DDX = 2.0 * a2Hip2 + 6 * a3Hip2 * (t - tiHip2);
 80057e0:	4b32      	ldr	r3, [pc, #200]	; (80058ac <obtenerVelCurva+0x358>)
 80057e2:	ed93 7b00 	vldr	d7, [r3]
 80057e6:	ee37 6b07 	vadd.f64	d6, d7, d7
 80057ea:	4b31      	ldr	r3, [pc, #196]	; (80058b0 <obtenerVelCurva+0x35c>)
 80057ec:	ed93 7b00 	vldr	d7, [r3]
 80057f0:	eeb1 5b08 	vmov.f64	d5, #24	; 0x40c00000  6.0
 80057f4:	ee27 5b05 	vmul.f64	d5, d7, d5
 80057f8:	4b25      	ldr	r3, [pc, #148]	; (8005890 <obtenerVelCurva+0x33c>)
 80057fa:	ed93 7b00 	vldr	d7, [r3]
 80057fe:	ed97 4b00 	vldr	d4, [r7]
 8005802:	ee34 7b47 	vsub.f64	d7, d4, d7
 8005806:	ee25 7b07 	vmul.f64	d7, d5, d7
 800580a:	ee36 7b07 	vadd.f64	d7, d6, d7
 800580e:	4b1f      	ldr	r3, [pc, #124]	; (800588c <obtenerVelCurva+0x338>)
 8005810:	ed83 7b00 	vstr	d7, [r3]
}
 8005814:	e225      	b.n	8005c62 <obtenerVelCurva+0x70e>
	} else if (t <= (tiHip3)) {                              // Recta
 8005816:	4b27      	ldr	r3, [pc, #156]	; (80058b4 <obtenerVelCurva+0x360>)
 8005818:	ed93 7b00 	vldr	d7, [r3]
 800581c:	ed97 6b00 	vldr	d6, [r7]
 8005820:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8005824:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005828:	d84a      	bhi.n	80058c0 <obtenerVelCurva+0x36c>
		X = Vm * (t - tfHip2) + XfHip2;
 800582a:	4b1d      	ldr	r3, [pc, #116]	; (80058a0 <obtenerVelCurva+0x34c>)
 800582c:	ed93 7b00 	vldr	d7, [r3]
 8005830:	ed97 6b00 	vldr	d6, [r7]
 8005834:	ee36 6b47 	vsub.f64	d6, d6, d7
 8005838:	4b1f      	ldr	r3, [pc, #124]	; (80058b8 <obtenerVelCurva+0x364>)
 800583a:	ed93 7b00 	vldr	d7, [r3]
 800583e:	ee26 6b07 	vmul.f64	d6, d6, d7
 8005842:	4b1e      	ldr	r3, [pc, #120]	; (80058bc <obtenerVelCurva+0x368>)
 8005844:	ed93 7b00 	vldr	d7, [r3]
 8005848:	ee36 7b07 	vadd.f64	d7, d6, d7
 800584c:	4b0d      	ldr	r3, [pc, #52]	; (8005884 <obtenerVelCurva+0x330>)
 800584e:	ed83 7b00 	vstr	d7, [r3]
		DX = Vm;
 8005852:	4b19      	ldr	r3, [pc, #100]	; (80058b8 <obtenerVelCurva+0x364>)
 8005854:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005858:	490b      	ldr	r1, [pc, #44]	; (8005888 <obtenerVelCurva+0x334>)
 800585a:	e9c1 2300 	strd	r2, r3, [r1]
		DDX = 0;
 800585e:	490b      	ldr	r1, [pc, #44]	; (800588c <obtenerVelCurva+0x338>)
 8005860:	f04f 0200 	mov.w	r2, #0
 8005864:	f04f 0300 	mov.w	r3, #0
 8005868:	e9c1 2300 	strd	r2, r3, [r1]
}
 800586c:	e1f9      	b.n	8005c62 <obtenerVelCurva+0x70e>
 800586e:	bf00      	nop
 8005870:	24000b10 	.word	0x24000b10
 8005874:	24000a60 	.word	0x24000a60
 8005878:	24000a58 	.word	0x24000a58
 800587c:	24000a68 	.word	0x24000a68
 8005880:	24000a70 	.word	0x24000a70
 8005884:	24000478 	.word	0x24000478
 8005888:	24000480 	.word	0x24000480
 800588c:	24000488 	.word	0x24000488
 8005890:	24000b18 	.word	0x24000b18
 8005894:	24000a48 	.word	0x24000a48
 8005898:	24000b00 	.word	0x24000b00
 800589c:	24000ad8 	.word	0x24000ad8
 80058a0:	24000b20 	.word	0x24000b20
 80058a4:	24000a80 	.word	0x24000a80
 80058a8:	24000a78 	.word	0x24000a78
 80058ac:	24000a88 	.word	0x24000a88
 80058b0:	24000a90 	.word	0x24000a90
 80058b4:	24000b28 	.word	0x24000b28
 80058b8:	24000af8 	.word	0x24000af8
 80058bc:	24000ae0 	.word	0x24000ae0
	} else if (t <= (tfHip3)) {                            // Hiperbola 3
 80058c0:	4bcb      	ldr	r3, [pc, #812]	; (8005bf0 <obtenerVelCurva+0x69c>)
 80058c2:	ed93 7b00 	vldr	d7, [r3]
 80058c6:	ed97 6b00 	vldr	d6, [r7]
 80058ca:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80058ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80058d2:	f200 808b 	bhi.w	80059ec <obtenerVelCurva+0x498>
		X = a0Hip3 + a1Hip3 * (t - tiHip3) + a2Hip3 * pow((t - tiHip3), 2)
 80058d6:	4bc7      	ldr	r3, [pc, #796]	; (8005bf4 <obtenerVelCurva+0x6a0>)
 80058d8:	ed93 7b00 	vldr	d7, [r3]
 80058dc:	ed97 6b00 	vldr	d6, [r7]
 80058e0:	ee36 6b47 	vsub.f64	d6, d6, d7
 80058e4:	4bc4      	ldr	r3, [pc, #784]	; (8005bf8 <obtenerVelCurva+0x6a4>)
 80058e6:	ed93 7b00 	vldr	d7, [r3]
 80058ea:	ee26 6b07 	vmul.f64	d6, d6, d7
 80058ee:	4bc3      	ldr	r3, [pc, #780]	; (8005bfc <obtenerVelCurva+0x6a8>)
 80058f0:	ed93 7b00 	vldr	d7, [r3]
 80058f4:	ee36 8b07 	vadd.f64	d8, d6, d7
 80058f8:	4bbe      	ldr	r3, [pc, #760]	; (8005bf4 <obtenerVelCurva+0x6a0>)
 80058fa:	ed93 7b00 	vldr	d7, [r3]
 80058fe:	ed97 6b00 	vldr	d6, [r7]
 8005902:	ee36 7b47 	vsub.f64	d7, d6, d7
 8005906:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 800590a:	eeb0 0b47 	vmov.f64	d0, d7
 800590e:	f00c f887 	bl	8011a20 <pow>
 8005912:	eeb0 6b40 	vmov.f64	d6, d0
 8005916:	4bba      	ldr	r3, [pc, #744]	; (8005c00 <obtenerVelCurva+0x6ac>)
 8005918:	ed93 7b00 	vldr	d7, [r3]
 800591c:	ee26 7b07 	vmul.f64	d7, d6, d7
 8005920:	ee38 8b07 	vadd.f64	d8, d8, d7
				+ a3Hip3 * pow((t - tiHip3), 3);
 8005924:	4bb3      	ldr	r3, [pc, #716]	; (8005bf4 <obtenerVelCurva+0x6a0>)
 8005926:	ed93 7b00 	vldr	d7, [r3]
 800592a:	ed97 6b00 	vldr	d6, [r7]
 800592e:	ee36 7b47 	vsub.f64	d7, d6, d7
 8005932:	eeb0 1b08 	vmov.f64	d1, #8	; 0x40400000  3.0
 8005936:	eeb0 0b47 	vmov.f64	d0, d7
 800593a:	f00c f871 	bl	8011a20 <pow>
 800593e:	eeb0 6b40 	vmov.f64	d6, d0
 8005942:	4bb0      	ldr	r3, [pc, #704]	; (8005c04 <obtenerVelCurva+0x6b0>)
 8005944:	ed93 7b00 	vldr	d7, [r3]
 8005948:	ee26 7b07 	vmul.f64	d7, d6, d7
 800594c:	ee38 7b07 	vadd.f64	d7, d8, d7
		X = a0Hip3 + a1Hip3 * (t - tiHip3) + a2Hip3 * pow((t - tiHip3), 2)
 8005950:	4bad      	ldr	r3, [pc, #692]	; (8005c08 <obtenerVelCurva+0x6b4>)
 8005952:	ed83 7b00 	vstr	d7, [r3]
		DX = a1Hip3 + 2.0 * a2Hip3 * (t - tiHip3)
 8005956:	4baa      	ldr	r3, [pc, #680]	; (8005c00 <obtenerVelCurva+0x6ac>)
 8005958:	ed93 7b00 	vldr	d7, [r3]
 800595c:	ee37 6b07 	vadd.f64	d6, d7, d7
 8005960:	4ba4      	ldr	r3, [pc, #656]	; (8005bf4 <obtenerVelCurva+0x6a0>)
 8005962:	ed93 7b00 	vldr	d7, [r3]
 8005966:	ed97 5b00 	vldr	d5, [r7]
 800596a:	ee35 7b47 	vsub.f64	d7, d5, d7
 800596e:	ee26 6b07 	vmul.f64	d6, d6, d7
 8005972:	4ba1      	ldr	r3, [pc, #644]	; (8005bf8 <obtenerVelCurva+0x6a4>)
 8005974:	ed93 7b00 	vldr	d7, [r3]
 8005978:	ee36 8b07 	vadd.f64	d8, d6, d7
				+ 3 * a3Hip3 * pow((t - tiHip3), 2);
 800597c:	4ba1      	ldr	r3, [pc, #644]	; (8005c04 <obtenerVelCurva+0x6b0>)
 800597e:	ed93 7b00 	vldr	d7, [r3]
 8005982:	eeb0 6b08 	vmov.f64	d6, #8	; 0x40400000  3.0
 8005986:	ee27 9b06 	vmul.f64	d9, d7, d6
 800598a:	4b9a      	ldr	r3, [pc, #616]	; (8005bf4 <obtenerVelCurva+0x6a0>)
 800598c:	ed93 7b00 	vldr	d7, [r3]
 8005990:	ed97 6b00 	vldr	d6, [r7]
 8005994:	ee36 7b47 	vsub.f64	d7, d6, d7
 8005998:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 800599c:	eeb0 0b47 	vmov.f64	d0, d7
 80059a0:	f00c f83e 	bl	8011a20 <pow>
 80059a4:	eeb0 7b40 	vmov.f64	d7, d0
 80059a8:	ee29 7b07 	vmul.f64	d7, d9, d7
 80059ac:	ee38 7b07 	vadd.f64	d7, d8, d7
		DX = a1Hip3 + 2.0 * a2Hip3 * (t - tiHip3)
 80059b0:	4b96      	ldr	r3, [pc, #600]	; (8005c0c <obtenerVelCurva+0x6b8>)
 80059b2:	ed83 7b00 	vstr	d7, [r3]
		DDX = 2.0 * a2Hip3 + 6 * a3Hip3 * (t - tiHip3);
 80059b6:	4b92      	ldr	r3, [pc, #584]	; (8005c00 <obtenerVelCurva+0x6ac>)
 80059b8:	ed93 7b00 	vldr	d7, [r3]
 80059bc:	ee37 6b07 	vadd.f64	d6, d7, d7
 80059c0:	4b90      	ldr	r3, [pc, #576]	; (8005c04 <obtenerVelCurva+0x6b0>)
 80059c2:	ed93 7b00 	vldr	d7, [r3]
 80059c6:	eeb1 5b08 	vmov.f64	d5, #24	; 0x40c00000  6.0
 80059ca:	ee27 5b05 	vmul.f64	d5, d7, d5
 80059ce:	4b89      	ldr	r3, [pc, #548]	; (8005bf4 <obtenerVelCurva+0x6a0>)
 80059d0:	ed93 7b00 	vldr	d7, [r3]
 80059d4:	ed97 4b00 	vldr	d4, [r7]
 80059d8:	ee34 7b47 	vsub.f64	d7, d4, d7
 80059dc:	ee25 7b07 	vmul.f64	d7, d5, d7
 80059e0:	ee36 7b07 	vadd.f64	d7, d6, d7
 80059e4:	4b8a      	ldr	r3, [pc, #552]	; (8005c10 <obtenerVelCurva+0x6bc>)
 80059e6:	ed83 7b00 	vstr	d7, [r3]
}
 80059ea:	e13a      	b.n	8005c62 <obtenerVelCurva+0x70e>
	} else if (t <= (tiHip4)) {                            // Parabola 2
 80059ec:	4b89      	ldr	r3, [pc, #548]	; (8005c14 <obtenerVelCurva+0x6c0>)
 80059ee:	ed93 7b00 	vldr	d7, [r3]
 80059f2:	ed97 6b00 	vldr	d6, [r7]
 80059f6:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80059fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80059fe:	d848      	bhi.n	8005a92 <obtenerVelCurva+0x53e>
		X = (Af / 2) * pow((t - tfHip3), 2) + VfHip3 * (t - tfHip3) + XfHip3;
 8005a00:	4b85      	ldr	r3, [pc, #532]	; (8005c18 <obtenerVelCurva+0x6c4>)
 8005a02:	ed93 7b00 	vldr	d7, [r3]
 8005a06:	eeb0 6b00 	vmov.f64	d6, #0	; 0x40000000  2.0
 8005a0a:	ee87 8b06 	vdiv.f64	d8, d7, d6
 8005a0e:	4b78      	ldr	r3, [pc, #480]	; (8005bf0 <obtenerVelCurva+0x69c>)
 8005a10:	ed93 7b00 	vldr	d7, [r3]
 8005a14:	ed97 6b00 	vldr	d6, [r7]
 8005a18:	ee36 7b47 	vsub.f64	d7, d6, d7
 8005a1c:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8005a20:	eeb0 0b47 	vmov.f64	d0, d7
 8005a24:	f00b fffc 	bl	8011a20 <pow>
 8005a28:	eeb0 7b40 	vmov.f64	d7, d0
 8005a2c:	ee28 6b07 	vmul.f64	d6, d8, d7
 8005a30:	4b6f      	ldr	r3, [pc, #444]	; (8005bf0 <obtenerVelCurva+0x69c>)
 8005a32:	ed93 7b00 	vldr	d7, [r3]
 8005a36:	ed97 5b00 	vldr	d5, [r7]
 8005a3a:	ee35 5b47 	vsub.f64	d5, d5, d7
 8005a3e:	4b77      	ldr	r3, [pc, #476]	; (8005c1c <obtenerVelCurva+0x6c8>)
 8005a40:	ed93 7b00 	vldr	d7, [r3]
 8005a44:	ee25 7b07 	vmul.f64	d7, d5, d7
 8005a48:	ee36 6b07 	vadd.f64	d6, d6, d7
 8005a4c:	4b74      	ldr	r3, [pc, #464]	; (8005c20 <obtenerVelCurva+0x6cc>)
 8005a4e:	ed93 7b00 	vldr	d7, [r3]
 8005a52:	ee36 7b07 	vadd.f64	d7, d6, d7
 8005a56:	4b6c      	ldr	r3, [pc, #432]	; (8005c08 <obtenerVelCurva+0x6b4>)
 8005a58:	ed83 7b00 	vstr	d7, [r3]
		DX = Af * (t - tfHip3) + VfHip3;
 8005a5c:	4b64      	ldr	r3, [pc, #400]	; (8005bf0 <obtenerVelCurva+0x69c>)
 8005a5e:	ed93 7b00 	vldr	d7, [r3]
 8005a62:	ed97 6b00 	vldr	d6, [r7]
 8005a66:	ee36 6b47 	vsub.f64	d6, d6, d7
 8005a6a:	4b6b      	ldr	r3, [pc, #428]	; (8005c18 <obtenerVelCurva+0x6c4>)
 8005a6c:	ed93 7b00 	vldr	d7, [r3]
 8005a70:	ee26 6b07 	vmul.f64	d6, d6, d7
 8005a74:	4b69      	ldr	r3, [pc, #420]	; (8005c1c <obtenerVelCurva+0x6c8>)
 8005a76:	ed93 7b00 	vldr	d7, [r3]
 8005a7a:	ee36 7b07 	vadd.f64	d7, d6, d7
 8005a7e:	4b63      	ldr	r3, [pc, #396]	; (8005c0c <obtenerVelCurva+0x6b8>)
 8005a80:	ed83 7b00 	vstr	d7, [r3]
		DDX = Af;
 8005a84:	4b64      	ldr	r3, [pc, #400]	; (8005c18 <obtenerVelCurva+0x6c4>)
 8005a86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a8a:	4961      	ldr	r1, [pc, #388]	; (8005c10 <obtenerVelCurva+0x6bc>)
 8005a8c:	e9c1 2300 	strd	r2, r3, [r1]
}
 8005a90:	e0e7      	b.n	8005c62 <obtenerVelCurva+0x70e>
	} else if (t <= TiempoTotX) {                               // Hiperbola 4
 8005a92:	4b64      	ldr	r3, [pc, #400]	; (8005c24 <obtenerVelCurva+0x6d0>)
 8005a94:	ed93 7b00 	vldr	d7, [r3]
 8005a98:	ed97 6b00 	vldr	d6, [r7]
 8005a9c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8005aa0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005aa4:	f200 808b 	bhi.w	8005bbe <obtenerVelCurva+0x66a>
		X = a0Hip4 + a1Hip4 * (t - tiHip4) + a2Hip4 * pow((t - tiHip4), 2)
 8005aa8:	4b5a      	ldr	r3, [pc, #360]	; (8005c14 <obtenerVelCurva+0x6c0>)
 8005aaa:	ed93 7b00 	vldr	d7, [r3]
 8005aae:	ed97 6b00 	vldr	d6, [r7]
 8005ab2:	ee36 6b47 	vsub.f64	d6, d6, d7
 8005ab6:	4b5c      	ldr	r3, [pc, #368]	; (8005c28 <obtenerVelCurva+0x6d4>)
 8005ab8:	ed93 7b00 	vldr	d7, [r3]
 8005abc:	ee26 6b07 	vmul.f64	d6, d6, d7
 8005ac0:	4b5a      	ldr	r3, [pc, #360]	; (8005c2c <obtenerVelCurva+0x6d8>)
 8005ac2:	ed93 7b00 	vldr	d7, [r3]
 8005ac6:	ee36 8b07 	vadd.f64	d8, d6, d7
 8005aca:	4b52      	ldr	r3, [pc, #328]	; (8005c14 <obtenerVelCurva+0x6c0>)
 8005acc:	ed93 7b00 	vldr	d7, [r3]
 8005ad0:	ed97 6b00 	vldr	d6, [r7]
 8005ad4:	ee36 7b47 	vsub.f64	d7, d6, d7
 8005ad8:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8005adc:	eeb0 0b47 	vmov.f64	d0, d7
 8005ae0:	f00b ff9e 	bl	8011a20 <pow>
 8005ae4:	eeb0 6b40 	vmov.f64	d6, d0
 8005ae8:	4b51      	ldr	r3, [pc, #324]	; (8005c30 <obtenerVelCurva+0x6dc>)
 8005aea:	ed93 7b00 	vldr	d7, [r3]
 8005aee:	ee26 7b07 	vmul.f64	d7, d6, d7
 8005af2:	ee38 8b07 	vadd.f64	d8, d8, d7
				+ a3Hip4 * pow((t - tiHip4), 3);
 8005af6:	4b47      	ldr	r3, [pc, #284]	; (8005c14 <obtenerVelCurva+0x6c0>)
 8005af8:	ed93 7b00 	vldr	d7, [r3]
 8005afc:	ed97 6b00 	vldr	d6, [r7]
 8005b00:	ee36 7b47 	vsub.f64	d7, d6, d7
 8005b04:	eeb0 1b08 	vmov.f64	d1, #8	; 0x40400000  3.0
 8005b08:	eeb0 0b47 	vmov.f64	d0, d7
 8005b0c:	f00b ff88 	bl	8011a20 <pow>
 8005b10:	eeb0 6b40 	vmov.f64	d6, d0
 8005b14:	4b47      	ldr	r3, [pc, #284]	; (8005c34 <obtenerVelCurva+0x6e0>)
 8005b16:	ed93 7b00 	vldr	d7, [r3]
 8005b1a:	ee26 7b07 	vmul.f64	d7, d6, d7
 8005b1e:	ee38 7b07 	vadd.f64	d7, d8, d7
		X = a0Hip4 + a1Hip4 * (t - tiHip4) + a2Hip4 * pow((t - tiHip4), 2)
 8005b22:	4b39      	ldr	r3, [pc, #228]	; (8005c08 <obtenerVelCurva+0x6b4>)
 8005b24:	ed83 7b00 	vstr	d7, [r3]
		DX = a1Hip4 + 2.0 * a2Hip4 * (t - tiHip4)
 8005b28:	4b41      	ldr	r3, [pc, #260]	; (8005c30 <obtenerVelCurva+0x6dc>)
 8005b2a:	ed93 7b00 	vldr	d7, [r3]
 8005b2e:	ee37 6b07 	vadd.f64	d6, d7, d7
 8005b32:	4b38      	ldr	r3, [pc, #224]	; (8005c14 <obtenerVelCurva+0x6c0>)
 8005b34:	ed93 7b00 	vldr	d7, [r3]
 8005b38:	ed97 5b00 	vldr	d5, [r7]
 8005b3c:	ee35 7b47 	vsub.f64	d7, d5, d7
 8005b40:	ee26 6b07 	vmul.f64	d6, d6, d7
 8005b44:	4b38      	ldr	r3, [pc, #224]	; (8005c28 <obtenerVelCurva+0x6d4>)
 8005b46:	ed93 7b00 	vldr	d7, [r3]
 8005b4a:	ee36 8b07 	vadd.f64	d8, d6, d7
				+ 3 * a3Hip4 * pow((t - tiHip4), 2);
 8005b4e:	4b39      	ldr	r3, [pc, #228]	; (8005c34 <obtenerVelCurva+0x6e0>)
 8005b50:	ed93 7b00 	vldr	d7, [r3]
 8005b54:	eeb0 6b08 	vmov.f64	d6, #8	; 0x40400000  3.0
 8005b58:	ee27 9b06 	vmul.f64	d9, d7, d6
 8005b5c:	4b2d      	ldr	r3, [pc, #180]	; (8005c14 <obtenerVelCurva+0x6c0>)
 8005b5e:	ed93 7b00 	vldr	d7, [r3]
 8005b62:	ed97 6b00 	vldr	d6, [r7]
 8005b66:	ee36 7b47 	vsub.f64	d7, d6, d7
 8005b6a:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8005b6e:	eeb0 0b47 	vmov.f64	d0, d7
 8005b72:	f00b ff55 	bl	8011a20 <pow>
 8005b76:	eeb0 7b40 	vmov.f64	d7, d0
 8005b7a:	ee29 7b07 	vmul.f64	d7, d9, d7
 8005b7e:	ee38 7b07 	vadd.f64	d7, d8, d7
		DX = a1Hip4 + 2.0 * a2Hip4 * (t - tiHip4)
 8005b82:	4b22      	ldr	r3, [pc, #136]	; (8005c0c <obtenerVelCurva+0x6b8>)
 8005b84:	ed83 7b00 	vstr	d7, [r3]
		DDX = 2.0 * a2Hip4 + 6.0 * a3Hip4 * (t - tiHip4);
 8005b88:	4b29      	ldr	r3, [pc, #164]	; (8005c30 <obtenerVelCurva+0x6dc>)
 8005b8a:	ed93 7b00 	vldr	d7, [r3]
 8005b8e:	ee37 6b07 	vadd.f64	d6, d7, d7
 8005b92:	4b28      	ldr	r3, [pc, #160]	; (8005c34 <obtenerVelCurva+0x6e0>)
 8005b94:	ed93 7b00 	vldr	d7, [r3]
 8005b98:	eeb1 5b08 	vmov.f64	d5, #24	; 0x40c00000  6.0
 8005b9c:	ee27 5b05 	vmul.f64	d5, d7, d5
 8005ba0:	4b1c      	ldr	r3, [pc, #112]	; (8005c14 <obtenerVelCurva+0x6c0>)
 8005ba2:	ed93 7b00 	vldr	d7, [r3]
 8005ba6:	ed97 4b00 	vldr	d4, [r7]
 8005baa:	ee34 7b47 	vsub.f64	d7, d4, d7
 8005bae:	ee25 7b07 	vmul.f64	d7, d5, d7
 8005bb2:	ee36 7b07 	vadd.f64	d7, d6, d7
 8005bb6:	4b16      	ldr	r3, [pc, #88]	; (8005c10 <obtenerVelCurva+0x6bc>)
 8005bb8:	ed83 7b00 	vstr	d7, [r3]
}
 8005bbc:	e051      	b.n	8005c62 <obtenerVelCurva+0x70e>
	} else if (t > TiempoTotX) {                               // Tiempo extra
 8005bbe:	4b19      	ldr	r3, [pc, #100]	; (8005c24 <obtenerVelCurva+0x6d0>)
 8005bc0:	ed93 7b00 	vldr	d7, [r3]
 8005bc4:	ed97 6b00 	vldr	d6, [r7]
 8005bc8:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8005bcc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005bd0:	dd32      	ble.n	8005c38 <obtenerVelCurva+0x6e4>
		DX = 0;
 8005bd2:	490e      	ldr	r1, [pc, #56]	; (8005c0c <obtenerVelCurva+0x6b8>)
 8005bd4:	f04f 0200 	mov.w	r2, #0
 8005bd8:	f04f 0300 	mov.w	r3, #0
 8005bdc:	e9c1 2300 	strd	r2, r3, [r1]
		DDX = 0;
 8005be0:	490b      	ldr	r1, [pc, #44]	; (8005c10 <obtenerVelCurva+0x6bc>)
 8005be2:	f04f 0200 	mov.w	r2, #0
 8005be6:	f04f 0300 	mov.w	r3, #0
 8005bea:	e9c1 2300 	strd	r2, r3, [r1]
}
 8005bee:	e038      	b.n	8005c62 <obtenerVelCurva+0x70e>
 8005bf0:	24000b30 	.word	0x24000b30
 8005bf4:	24000b28 	.word	0x24000b28
 8005bf8:	24000aa0 	.word	0x24000aa0
 8005bfc:	24000a98 	.word	0x24000a98
 8005c00:	24000aa8 	.word	0x24000aa8
 8005c04:	24000ab0 	.word	0x24000ab0
 8005c08:	24000478 	.word	0x24000478
 8005c0c:	24000480 	.word	0x24000480
 8005c10:	24000488 	.word	0x24000488
 8005c14:	24000b38 	.word	0x24000b38
 8005c18:	24000a50 	.word	0x24000a50
 8005c1c:	24000b08 	.word	0x24000b08
 8005c20:	24000ae8 	.word	0x24000ae8
 8005c24:	24000b40 	.word	0x24000b40
 8005c28:	24000ac0 	.word	0x24000ac0
 8005c2c:	24000ab8 	.word	0x24000ab8
 8005c30:	24000ac8 	.word	0x24000ac8
 8005c34:	24000ad0 	.word	0x24000ad0
		X = 0;
 8005c38:	490d      	ldr	r1, [pc, #52]	; (8005c70 <obtenerVelCurva+0x71c>)
 8005c3a:	f04f 0200 	mov.w	r2, #0
 8005c3e:	f04f 0300 	mov.w	r3, #0
 8005c42:	e9c1 2300 	strd	r2, r3, [r1]
		DX = 0;
 8005c46:	490b      	ldr	r1, [pc, #44]	; (8005c74 <obtenerVelCurva+0x720>)
 8005c48:	f04f 0200 	mov.w	r2, #0
 8005c4c:	f04f 0300 	mov.w	r3, #0
 8005c50:	e9c1 2300 	strd	r2, r3, [r1]
		DDX = 0;
 8005c54:	4908      	ldr	r1, [pc, #32]	; (8005c78 <obtenerVelCurva+0x724>)
 8005c56:	f04f 0200 	mov.w	r2, #0
 8005c5a:	f04f 0300 	mov.w	r3, #0
 8005c5e:	e9c1 2300 	strd	r2, r3, [r1]
}
 8005c62:	bf00      	nop
 8005c64:	3708      	adds	r7, #8
 8005c66:	46bd      	mov	sp, r7
 8005c68:	ecbd 8b04 	vpop	{d8-d9}
 8005c6c:	bd80      	pop	{r7, pc}
 8005c6e:	bf00      	nop
 8005c70:	24000478 	.word	0x24000478
 8005c74:	24000480 	.word	0x24000480
 8005c78:	24000488 	.word	0x24000488
 8005c7c:	00000000 	.word	0x00000000

08005c80 <jacobianoInverso>:



void jacobianoInverso(double Vxaux, double Vyaux, double Vzaux, double Pxaux, double Pyaux, double Pzaux) {
 8005c80:	b590      	push	{r4, r7, lr}
 8005c82:	b0ad      	sub	sp, #180	; 0xb4
 8005c84:	af00      	add	r7, sp, #0
 8005c86:	ed87 0b1c 	vstr	d0, [r7, #112]	; 0x70
 8005c8a:	ed87 1b1a 	vstr	d1, [r7, #104]	; 0x68
 8005c8e:	ed87 2b18 	vstr	d2, [r7, #96]	; 0x60
 8005c92:	ed87 3b16 	vstr	d3, [r7, #88]	; 0x58
 8005c96:	ed87 4b14 	vstr	d4, [r7, #80]	; 0x50
 8005c9a:	ed87 5b12 	vstr	d5, [r7, #72]	; 0x48
	 * 	 Funcion que devuelve la velocidad angular de cada motor
	 *	 Entrada: Velocidad en (x,y,z) y Posicion en (x,y,z)
	 *	 Salida:  Velocidad angular en rad/s
	 	 -----------------------------------------------------------------------*/

	double Vaux[3] = { Vxaux, Vyaux, Vzaux };
 8005c9e:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8005ca2:	e9c7 231e 	strd	r2, r3, [r7, #120]	; 0x78
 8005ca6:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8005caa:	e9c7 2320 	strd	r2, r3, [r7, #128]	; 0x80
 8005cae:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8005cb2:	e9c7 2322 	strd	r2, r3, [r7, #136]	; 0x88

	E1[0] = Pxaux + 0;
 8005cb6:	ed97 7b16 	vldr	d7, [r7, #88]	; 0x58
 8005cba:	ed9f 6bc3 	vldr	d6, [pc, #780]	; 8005fc8 <jacobianoInverso+0x348>
 8005cbe:	ee37 7b06 	vadd.f64	d7, d7, d6
 8005cc2:	4bc9      	ldr	r3, [pc, #804]	; (8005fe8 <jacobianoInverso+0x368>)
 8005cc4:	ed83 7b00 	vstr	d7, [r3]
	E1[1] = Pyaux - 0.07;
 8005cc8:	ed97 7b14 	vldr	d7, [r7, #80]	; 0x50
 8005ccc:	ed9f 6bc0 	vldr	d6, [pc, #768]	; 8005fd0 <jacobianoInverso+0x350>
 8005cd0:	ee37 7b46 	vsub.f64	d7, d7, d6
 8005cd4:	4bc4      	ldr	r3, [pc, #784]	; (8005fe8 <jacobianoInverso+0x368>)
 8005cd6:	ed83 7b02 	vstr	d7, [r3, #8]
	E1[2] = Pzaux;
 8005cda:	49c3      	ldr	r1, [pc, #780]	; (8005fe8 <jacobianoInverso+0x368>)
 8005cdc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005ce0:	e9c1 2304 	strd	r2, r3, [r1, #16]
	E2[0] = Pxaux + 0.060621778264911;
 8005ce4:	ed97 7b16 	vldr	d7, [r7, #88]	; 0x58
 8005ce8:	ed9f 6bbb 	vldr	d6, [pc, #748]	; 8005fd8 <jacobianoInverso+0x358>
 8005cec:	ee37 7b06 	vadd.f64	d7, d7, d6
 8005cf0:	4bbe      	ldr	r3, [pc, #760]	; (8005fec <jacobianoInverso+0x36c>)
 8005cf2:	ed83 7b00 	vstr	d7, [r3]
	E2[1] = Pyaux + 0.035;
 8005cf6:	ed97 7b14 	vldr	d7, [r7, #80]	; 0x50
 8005cfa:	ed9f 6bb9 	vldr	d6, [pc, #740]	; 8005fe0 <jacobianoInverso+0x360>
 8005cfe:	ee37 7b06 	vadd.f64	d7, d7, d6
 8005d02:	4bba      	ldr	r3, [pc, #744]	; (8005fec <jacobianoInverso+0x36c>)
 8005d04:	ed83 7b02 	vstr	d7, [r3, #8]
	E2[2] = Pzaux;
 8005d08:	49b8      	ldr	r1, [pc, #736]	; (8005fec <jacobianoInverso+0x36c>)
 8005d0a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005d0e:	e9c1 2304 	strd	r2, r3, [r1, #16]
	E3[0] = Pxaux - 0.060621778264911;
 8005d12:	ed97 7b16 	vldr	d7, [r7, #88]	; 0x58
 8005d16:	ed9f 6bb0 	vldr	d6, [pc, #704]	; 8005fd8 <jacobianoInverso+0x358>
 8005d1a:	ee37 7b46 	vsub.f64	d7, d7, d6
 8005d1e:	4bb4      	ldr	r3, [pc, #720]	; (8005ff0 <jacobianoInverso+0x370>)
 8005d20:	ed83 7b00 	vstr	d7, [r3]
	E3[1] = Pyaux + 0.035;
 8005d24:	ed97 7b14 	vldr	d7, [r7, #80]	; 0x50
 8005d28:	ed9f 6bad 	vldr	d6, [pc, #692]	; 8005fe0 <jacobianoInverso+0x360>
 8005d2c:	ee37 7b06 	vadd.f64	d7, d7, d6
 8005d30:	4baf      	ldr	r3, [pc, #700]	; (8005ff0 <jacobianoInverso+0x370>)
 8005d32:	ed83 7b02 	vstr	d7, [r3, #8]
	E3[2] = Pzaux;
 8005d36:	49ae      	ldr	r1, [pc, #696]	; (8005ff0 <jacobianoInverso+0x370>)
 8005d38:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005d3c:	e9c1 2304 	strd	r2, r3, [r1, #16]

	l1[0][0] = XJ1_1 - F1[0];//l11=[(XJ1(1)-F1(1,1));(YJ1(1)-F1(1,2));(ZJ1(1)-F1(1,3))];
 8005d40:	4bac      	ldr	r3, [pc, #688]	; (8005ff4 <jacobianoInverso+0x374>)
 8005d42:	ed93 6b00 	vldr	d6, [r3]
 8005d46:	4bac      	ldr	r3, [pc, #688]	; (8005ff8 <jacobianoInverso+0x378>)
 8005d48:	ed93 7b00 	vldr	d7, [r3]
 8005d4c:	ee36 7b47 	vsub.f64	d7, d6, d7
 8005d50:	4baa      	ldr	r3, [pc, #680]	; (8005ffc <jacobianoInverso+0x37c>)
 8005d52:	ed83 7b00 	vstr	d7, [r3]
	l1[0][1] = YJ1_1 - F1[1];
 8005d56:	4baa      	ldr	r3, [pc, #680]	; (8006000 <jacobianoInverso+0x380>)
 8005d58:	ed93 6b00 	vldr	d6, [r3]
 8005d5c:	4ba6      	ldr	r3, [pc, #664]	; (8005ff8 <jacobianoInverso+0x378>)
 8005d5e:	ed93 7b02 	vldr	d7, [r3, #8]
 8005d62:	ee36 7b47 	vsub.f64	d7, d6, d7
 8005d66:	4ba5      	ldr	r3, [pc, #660]	; (8005ffc <jacobianoInverso+0x37c>)
 8005d68:	ed83 7b02 	vstr	d7, [r3, #8]
	l1[0][2] = ZJ1_1 - F1[2];
 8005d6c:	4ba5      	ldr	r3, [pc, #660]	; (8006004 <jacobianoInverso+0x384>)
 8005d6e:	ed93 6b00 	vldr	d6, [r3]
 8005d72:	4ba1      	ldr	r3, [pc, #644]	; (8005ff8 <jacobianoInverso+0x378>)
 8005d74:	ed93 7b04 	vldr	d7, [r3, #16]
 8005d78:	ee36 7b47 	vsub.f64	d7, d6, d7
 8005d7c:	4b9f      	ldr	r3, [pc, #636]	; (8005ffc <jacobianoInverso+0x37c>)
 8005d7e:	ed83 7b04 	vstr	d7, [r3, #16]
	l1[1][0] = XJ2_1 - F2[0];//l12=[(XJ2(1)-F2(1,1));(YJ2(1)-F2(1,2));(ZJ2(1)-F2(1,3))];
 8005d82:	4ba1      	ldr	r3, [pc, #644]	; (8006008 <jacobianoInverso+0x388>)
 8005d84:	ed93 6b00 	vldr	d6, [r3]
 8005d88:	4ba0      	ldr	r3, [pc, #640]	; (800600c <jacobianoInverso+0x38c>)
 8005d8a:	ed93 7b00 	vldr	d7, [r3]
 8005d8e:	ee36 7b47 	vsub.f64	d7, d6, d7
 8005d92:	4b9a      	ldr	r3, [pc, #616]	; (8005ffc <jacobianoInverso+0x37c>)
 8005d94:	ed83 7b06 	vstr	d7, [r3, #24]
	l1[1][1] = YJ2_1 - F2[1];
 8005d98:	4b9d      	ldr	r3, [pc, #628]	; (8006010 <jacobianoInverso+0x390>)
 8005d9a:	ed93 6b00 	vldr	d6, [r3]
 8005d9e:	4b9b      	ldr	r3, [pc, #620]	; (800600c <jacobianoInverso+0x38c>)
 8005da0:	ed93 7b02 	vldr	d7, [r3, #8]
 8005da4:	ee36 7b47 	vsub.f64	d7, d6, d7
 8005da8:	4b94      	ldr	r3, [pc, #592]	; (8005ffc <jacobianoInverso+0x37c>)
 8005daa:	ed83 7b08 	vstr	d7, [r3, #32]
	l1[1][2] = ZJ2_1 - F2[2];
 8005dae:	4b99      	ldr	r3, [pc, #612]	; (8006014 <jacobianoInverso+0x394>)
 8005db0:	ed93 6b00 	vldr	d6, [r3]
 8005db4:	4b95      	ldr	r3, [pc, #596]	; (800600c <jacobianoInverso+0x38c>)
 8005db6:	ed93 7b04 	vldr	d7, [r3, #16]
 8005dba:	ee36 7b47 	vsub.f64	d7, d6, d7
 8005dbe:	4b8f      	ldr	r3, [pc, #572]	; (8005ffc <jacobianoInverso+0x37c>)
 8005dc0:	ed83 7b0a 	vstr	d7, [r3, #40]	; 0x28
	l1[2][0] = XJ3_1 - F3[0];//l13=[(XJ3(1)-F3(1,1));(YJ3(1)-F3(1,2));(ZJ3(1)-F3(1,3))];
 8005dc4:	4b94      	ldr	r3, [pc, #592]	; (8006018 <jacobianoInverso+0x398>)
 8005dc6:	ed93 6b00 	vldr	d6, [r3]
 8005dca:	4b94      	ldr	r3, [pc, #592]	; (800601c <jacobianoInverso+0x39c>)
 8005dcc:	ed93 7b00 	vldr	d7, [r3]
 8005dd0:	ee36 7b47 	vsub.f64	d7, d6, d7
 8005dd4:	4b89      	ldr	r3, [pc, #548]	; (8005ffc <jacobianoInverso+0x37c>)
 8005dd6:	ed83 7b0c 	vstr	d7, [r3, #48]	; 0x30
	l1[2][1] = YJ3_1 - F3[1];
 8005dda:	4b91      	ldr	r3, [pc, #580]	; (8006020 <jacobianoInverso+0x3a0>)
 8005ddc:	ed93 6b00 	vldr	d6, [r3]
 8005de0:	4b8e      	ldr	r3, [pc, #568]	; (800601c <jacobianoInverso+0x39c>)
 8005de2:	ed93 7b02 	vldr	d7, [r3, #8]
 8005de6:	ee36 7b47 	vsub.f64	d7, d6, d7
 8005dea:	4b84      	ldr	r3, [pc, #528]	; (8005ffc <jacobianoInverso+0x37c>)
 8005dec:	ed83 7b0e 	vstr	d7, [r3, #56]	; 0x38
	l1[2][2] = ZJ3_1 - F3[2];
 8005df0:	4b8c      	ldr	r3, [pc, #560]	; (8006024 <jacobianoInverso+0x3a4>)
 8005df2:	ed93 6b00 	vldr	d6, [r3]
 8005df6:	4b89      	ldr	r3, [pc, #548]	; (800601c <jacobianoInverso+0x39c>)
 8005df8:	ed93 7b04 	vldr	d7, [r3, #16]
 8005dfc:	ee36 7b47 	vsub.f64	d7, d6, d7
 8005e00:	4b7e      	ldr	r3, [pc, #504]	; (8005ffc <jacobianoInverso+0x37c>)
 8005e02:	ed83 7b10 	vstr	d7, [r3, #64]	; 0x40

	l2[0][0] = E1[0] - XJ1_1;//l21=[(E1(1,1)-XJ1(1));(E1(1,2)-YJ1(1));(E1(1,3)-ZJ1(1))];
 8005e06:	4b78      	ldr	r3, [pc, #480]	; (8005fe8 <jacobianoInverso+0x368>)
 8005e08:	ed93 6b00 	vldr	d6, [r3]
 8005e0c:	4b79      	ldr	r3, [pc, #484]	; (8005ff4 <jacobianoInverso+0x374>)
 8005e0e:	ed93 7b00 	vldr	d7, [r3]
 8005e12:	ee36 7b47 	vsub.f64	d7, d6, d7
 8005e16:	4b84      	ldr	r3, [pc, #528]	; (8006028 <jacobianoInverso+0x3a8>)
 8005e18:	ed83 7b00 	vstr	d7, [r3]
	l2[1][0] = E1[1] - YJ1_1;
 8005e1c:	4b72      	ldr	r3, [pc, #456]	; (8005fe8 <jacobianoInverso+0x368>)
 8005e1e:	ed93 6b02 	vldr	d6, [r3, #8]
 8005e22:	4b77      	ldr	r3, [pc, #476]	; (8006000 <jacobianoInverso+0x380>)
 8005e24:	ed93 7b00 	vldr	d7, [r3]
 8005e28:	ee36 7b47 	vsub.f64	d7, d6, d7
 8005e2c:	4b7e      	ldr	r3, [pc, #504]	; (8006028 <jacobianoInverso+0x3a8>)
 8005e2e:	ed83 7b06 	vstr	d7, [r3, #24]
	l2[2][0] = E1[2] - ZJ1_1;
 8005e32:	4b6d      	ldr	r3, [pc, #436]	; (8005fe8 <jacobianoInverso+0x368>)
 8005e34:	ed93 6b04 	vldr	d6, [r3, #16]
 8005e38:	4b72      	ldr	r3, [pc, #456]	; (8006004 <jacobianoInverso+0x384>)
 8005e3a:	ed93 7b00 	vldr	d7, [r3]
 8005e3e:	ee36 7b47 	vsub.f64	d7, d6, d7
 8005e42:	4b79      	ldr	r3, [pc, #484]	; (8006028 <jacobianoInverso+0x3a8>)
 8005e44:	ed83 7b0c 	vstr	d7, [r3, #48]	; 0x30
	l2[0][1] = E2[0] - XJ2_1;//l22=[(E2(1,1)-XJ2(1));(E2(1,2)-YJ2(1));(E2(1,3)-ZJ2(1))];
 8005e48:	4b68      	ldr	r3, [pc, #416]	; (8005fec <jacobianoInverso+0x36c>)
 8005e4a:	ed93 6b00 	vldr	d6, [r3]
 8005e4e:	4b6e      	ldr	r3, [pc, #440]	; (8006008 <jacobianoInverso+0x388>)
 8005e50:	ed93 7b00 	vldr	d7, [r3]
 8005e54:	ee36 7b47 	vsub.f64	d7, d6, d7
 8005e58:	4b73      	ldr	r3, [pc, #460]	; (8006028 <jacobianoInverso+0x3a8>)
 8005e5a:	ed83 7b02 	vstr	d7, [r3, #8]
	l2[1][1] = E2[1] - YJ2_1;
 8005e5e:	4b63      	ldr	r3, [pc, #396]	; (8005fec <jacobianoInverso+0x36c>)
 8005e60:	ed93 6b02 	vldr	d6, [r3, #8]
 8005e64:	4b6a      	ldr	r3, [pc, #424]	; (8006010 <jacobianoInverso+0x390>)
 8005e66:	ed93 7b00 	vldr	d7, [r3]
 8005e6a:	ee36 7b47 	vsub.f64	d7, d6, d7
 8005e6e:	4b6e      	ldr	r3, [pc, #440]	; (8006028 <jacobianoInverso+0x3a8>)
 8005e70:	ed83 7b08 	vstr	d7, [r3, #32]
	l2[2][1] = E2[2] - ZJ2_1;
 8005e74:	4b5d      	ldr	r3, [pc, #372]	; (8005fec <jacobianoInverso+0x36c>)
 8005e76:	ed93 6b04 	vldr	d6, [r3, #16]
 8005e7a:	4b66      	ldr	r3, [pc, #408]	; (8006014 <jacobianoInverso+0x394>)
 8005e7c:	ed93 7b00 	vldr	d7, [r3]
 8005e80:	ee36 7b47 	vsub.f64	d7, d6, d7
 8005e84:	4b68      	ldr	r3, [pc, #416]	; (8006028 <jacobianoInverso+0x3a8>)
 8005e86:	ed83 7b0e 	vstr	d7, [r3, #56]	; 0x38
	l2[0][2] = E3[0] - XJ3_1;//l23=[(E3(1,1)-XJ3(1));(E3(1,2)-YJ3(1));(E3(1,3)-ZJ3(1))];
 8005e8a:	4b59      	ldr	r3, [pc, #356]	; (8005ff0 <jacobianoInverso+0x370>)
 8005e8c:	ed93 6b00 	vldr	d6, [r3]
 8005e90:	4b61      	ldr	r3, [pc, #388]	; (8006018 <jacobianoInverso+0x398>)
 8005e92:	ed93 7b00 	vldr	d7, [r3]
 8005e96:	ee36 7b47 	vsub.f64	d7, d6, d7
 8005e9a:	4b63      	ldr	r3, [pc, #396]	; (8006028 <jacobianoInverso+0x3a8>)
 8005e9c:	ed83 7b04 	vstr	d7, [r3, #16]
	l2[1][2] = E3[1] - YJ3_1;
 8005ea0:	4b53      	ldr	r3, [pc, #332]	; (8005ff0 <jacobianoInverso+0x370>)
 8005ea2:	ed93 6b02 	vldr	d6, [r3, #8]
 8005ea6:	4b5e      	ldr	r3, [pc, #376]	; (8006020 <jacobianoInverso+0x3a0>)
 8005ea8:	ed93 7b00 	vldr	d7, [r3]
 8005eac:	ee36 7b47 	vsub.f64	d7, d6, d7
 8005eb0:	4b5d      	ldr	r3, [pc, #372]	; (8006028 <jacobianoInverso+0x3a8>)
 8005eb2:	ed83 7b0a 	vstr	d7, [r3, #40]	; 0x28
	l2[2][2] = E3[2] - ZJ3_1;
 8005eb6:	4b4e      	ldr	r3, [pc, #312]	; (8005ff0 <jacobianoInverso+0x370>)
 8005eb8:	ed93 6b04 	vldr	d6, [r3, #16]
 8005ebc:	4b59      	ldr	r3, [pc, #356]	; (8006024 <jacobianoInverso+0x3a4>)
 8005ebe:	ed93 7b00 	vldr	d7, [r3]
 8005ec2:	ee36 7b47 	vsub.f64	d7, d6, d7
 8005ec6:	4b58      	ldr	r3, [pc, #352]	; (8006028 <jacobianoInverso+0x3a8>)
 8005ec8:	ed83 7b10 	vstr	d7, [r3, #64]	; 0x40

	Jcd = transpuesta(l2);				//Jacobiano de la cinematica directa
 8005ecc:	4c57      	ldr	r4, [pc, #348]	; (800602c <jacobianoInverso+0x3ac>)
 8005ece:	463b      	mov	r3, r7
 8005ed0:	4955      	ldr	r1, [pc, #340]	; (8006028 <jacobianoInverso+0x3a8>)
 8005ed2:	4618      	mov	r0, r3
 8005ed4:	f7fd fcaa 	bl	800382c <transpuesta>
 8005ed8:	4620      	mov	r0, r4
 8005eda:	463b      	mov	r3, r7
 8005edc:	2248      	movs	r2, #72	; 0x48
 8005ede:	4619      	mov	r1, r3
 8005ee0:	f008 fefc 	bl	800ecdc <memcpy>

	cross_P1[0] = SA1[1] * l1[0][2] - SA1[2] * l1[0][1];//Producto Cruz entre vectores
 8005ee4:	4b52      	ldr	r3, [pc, #328]	; (8006030 <jacobianoInverso+0x3b0>)
 8005ee6:	ed93 6b02 	vldr	d6, [r3, #8]
 8005eea:	4b44      	ldr	r3, [pc, #272]	; (8005ffc <jacobianoInverso+0x37c>)
 8005eec:	ed93 7b04 	vldr	d7, [r3, #16]
 8005ef0:	ee26 6b07 	vmul.f64	d6, d6, d7
 8005ef4:	4b4e      	ldr	r3, [pc, #312]	; (8006030 <jacobianoInverso+0x3b0>)
 8005ef6:	ed93 5b04 	vldr	d5, [r3, #16]
 8005efa:	4b40      	ldr	r3, [pc, #256]	; (8005ffc <jacobianoInverso+0x37c>)
 8005efc:	ed93 7b02 	vldr	d7, [r3, #8]
 8005f00:	ee25 7b07 	vmul.f64	d7, d5, d7
 8005f04:	ee36 7b47 	vsub.f64	d7, d6, d7
 8005f08:	4b4a      	ldr	r3, [pc, #296]	; (8006034 <jacobianoInverso+0x3b4>)
 8005f0a:	ed83 7b00 	vstr	d7, [r3]
	cross_P1[1] = SA1[2] * l1[0][0] - SA1[0] * l1[0][2];
 8005f0e:	4b48      	ldr	r3, [pc, #288]	; (8006030 <jacobianoInverso+0x3b0>)
 8005f10:	ed93 6b04 	vldr	d6, [r3, #16]
 8005f14:	4b39      	ldr	r3, [pc, #228]	; (8005ffc <jacobianoInverso+0x37c>)
 8005f16:	ed93 7b00 	vldr	d7, [r3]
 8005f1a:	ee26 6b07 	vmul.f64	d6, d6, d7
 8005f1e:	4b44      	ldr	r3, [pc, #272]	; (8006030 <jacobianoInverso+0x3b0>)
 8005f20:	ed93 5b00 	vldr	d5, [r3]
 8005f24:	4b35      	ldr	r3, [pc, #212]	; (8005ffc <jacobianoInverso+0x37c>)
 8005f26:	ed93 7b04 	vldr	d7, [r3, #16]
 8005f2a:	ee25 7b07 	vmul.f64	d7, d5, d7
 8005f2e:	ee36 7b47 	vsub.f64	d7, d6, d7
 8005f32:	4b40      	ldr	r3, [pc, #256]	; (8006034 <jacobianoInverso+0x3b4>)
 8005f34:	ed83 7b02 	vstr	d7, [r3, #8]
	cross_P1[2] = SA1[0] * l1[0][1] - SA1[1] * l1[0][0];
 8005f38:	4b3d      	ldr	r3, [pc, #244]	; (8006030 <jacobianoInverso+0x3b0>)
 8005f3a:	ed93 6b00 	vldr	d6, [r3]
 8005f3e:	4b2f      	ldr	r3, [pc, #188]	; (8005ffc <jacobianoInverso+0x37c>)
 8005f40:	ed93 7b02 	vldr	d7, [r3, #8]
 8005f44:	ee26 6b07 	vmul.f64	d6, d6, d7
 8005f48:	4b39      	ldr	r3, [pc, #228]	; (8006030 <jacobianoInverso+0x3b0>)
 8005f4a:	ed93 5b02 	vldr	d5, [r3, #8]
 8005f4e:	4b2b      	ldr	r3, [pc, #172]	; (8005ffc <jacobianoInverso+0x37c>)
 8005f50:	ed93 7b00 	vldr	d7, [r3]
 8005f54:	ee25 7b07 	vmul.f64	d7, d5, d7
 8005f58:	ee36 7b47 	vsub.f64	d7, d6, d7
 8005f5c:	4b35      	ldr	r3, [pc, #212]	; (8006034 <jacobianoInverso+0x3b4>)
 8005f5e:	ed83 7b04 	vstr	d7, [r3, #16]

	cross_P2[0] = SA2[1] * l1[1][2] - SA2[2] * l1[1][1];//vect_A[1] * vect_B[2] - vect_A[2] * vect_B[1]
 8005f62:	4b35      	ldr	r3, [pc, #212]	; (8006038 <jacobianoInverso+0x3b8>)
 8005f64:	ed93 6b02 	vldr	d6, [r3, #8]
 8005f68:	4b24      	ldr	r3, [pc, #144]	; (8005ffc <jacobianoInverso+0x37c>)
 8005f6a:	ed93 7b0a 	vldr	d7, [r3, #40]	; 0x28
 8005f6e:	ee26 6b07 	vmul.f64	d6, d6, d7
 8005f72:	4b31      	ldr	r3, [pc, #196]	; (8006038 <jacobianoInverso+0x3b8>)
 8005f74:	ed93 5b04 	vldr	d5, [r3, #16]
 8005f78:	4b20      	ldr	r3, [pc, #128]	; (8005ffc <jacobianoInverso+0x37c>)
 8005f7a:	ed93 7b08 	vldr	d7, [r3, #32]
 8005f7e:	ee25 7b07 	vmul.f64	d7, d5, d7
 8005f82:	ee36 7b47 	vsub.f64	d7, d6, d7
 8005f86:	4b2d      	ldr	r3, [pc, #180]	; (800603c <jacobianoInverso+0x3bc>)
 8005f88:	ed83 7b00 	vstr	d7, [r3]
	cross_P2[1] = SA2[2] * l1[1][0] - SA2[0] * l1[1][2];//vect_A[2] * vect_B[0] - vect_A[0] * vect_B[2]
 8005f8c:	4b2a      	ldr	r3, [pc, #168]	; (8006038 <jacobianoInverso+0x3b8>)
 8005f8e:	ed93 6b04 	vldr	d6, [r3, #16]
 8005f92:	4b1a      	ldr	r3, [pc, #104]	; (8005ffc <jacobianoInverso+0x37c>)
 8005f94:	ed93 7b06 	vldr	d7, [r3, #24]
 8005f98:	ee26 6b07 	vmul.f64	d6, d6, d7
 8005f9c:	4b26      	ldr	r3, [pc, #152]	; (8006038 <jacobianoInverso+0x3b8>)
 8005f9e:	ed93 5b00 	vldr	d5, [r3]
 8005fa2:	4b16      	ldr	r3, [pc, #88]	; (8005ffc <jacobianoInverso+0x37c>)
 8005fa4:	ed93 7b0a 	vldr	d7, [r3, #40]	; 0x28
 8005fa8:	ee25 7b07 	vmul.f64	d7, d5, d7
 8005fac:	ee36 7b47 	vsub.f64	d7, d6, d7
 8005fb0:	4b22      	ldr	r3, [pc, #136]	; (800603c <jacobianoInverso+0x3bc>)
 8005fb2:	ed83 7b02 	vstr	d7, [r3, #8]
	cross_P2[2] = SA2[0] * l1[1][1] - SA2[1] * l1[1][0];//vect_A[0] * vect_B[1] - vect_A[1] * vect_B[0]
 8005fb6:	4b20      	ldr	r3, [pc, #128]	; (8006038 <jacobianoInverso+0x3b8>)
 8005fb8:	ed93 6b00 	vldr	d6, [r3]
 8005fbc:	4b0f      	ldr	r3, [pc, #60]	; (8005ffc <jacobianoInverso+0x37c>)
 8005fbe:	ed93 7b08 	vldr	d7, [r3, #32]
 8005fc2:	ee26 6b07 	vmul.f64	d6, d6, d7
 8005fc6:	e03b      	b.n	8006040 <jacobianoInverso+0x3c0>
	...
 8005fd0:	1eb851ec 	.word	0x1eb851ec
 8005fd4:	3fb1eb85 	.word	0x3fb1eb85
 8005fd8:	562574c0 	.word	0x562574c0
 8005fdc:	3faf09d1 	.word	0x3faf09d1
 8005fe0:	1eb851ec 	.word	0x1eb851ec
 8005fe4:	3fa1eb85 	.word	0x3fa1eb85
 8005fe8:	240007f0 	.word	0x240007f0
 8005fec:	24000808 	.word	0x24000808
 8005ff0:	24000820 	.word	0x24000820
 8005ff4:	240002c0 	.word	0x240002c0
 8005ff8:	24000018 	.word	0x24000018
 8005ffc:	24000838 	.word	0x24000838
 8006000:	240002d0 	.word	0x240002d0
 8006004:	240002e0 	.word	0x240002e0
 8006008:	24000308 	.word	0x24000308
 800600c:	24000030 	.word	0x24000030
 8006010:	24000318 	.word	0x24000318
 8006014:	24000328 	.word	0x24000328
 8006018:	24000350 	.word	0x24000350
 800601c:	24000048 	.word	0x24000048
 8006020:	24000360 	.word	0x24000360
 8006024:	24000370 	.word	0x24000370
 8006028:	24000880 	.word	0x24000880
 800602c:	240008c8 	.word	0x240008c8
 8006030:	24000060 	.word	0x24000060
 8006034:	240009e8 	.word	0x240009e8
 8006038:	24000078 	.word	0x24000078
 800603c:	24000a00 	.word	0x24000a00
 8006040:	4b92      	ldr	r3, [pc, #584]	; (800628c <jacobianoInverso+0x60c>)
 8006042:	ed93 5b02 	vldr	d5, [r3, #8]
 8006046:	4b92      	ldr	r3, [pc, #584]	; (8006290 <jacobianoInverso+0x610>)
 8006048:	ed93 7b06 	vldr	d7, [r3, #24]
 800604c:	ee25 7b07 	vmul.f64	d7, d5, d7
 8006050:	ee36 7b47 	vsub.f64	d7, d6, d7
 8006054:	4b8f      	ldr	r3, [pc, #572]	; (8006294 <jacobianoInverso+0x614>)
 8006056:	ed83 7b04 	vstr	d7, [r3, #16]

	cross_P3[0] = SA3[1] * l1[2][2] - SA3[2] * l1[2][1];
 800605a:	4b8f      	ldr	r3, [pc, #572]	; (8006298 <jacobianoInverso+0x618>)
 800605c:	ed93 6b02 	vldr	d6, [r3, #8]
 8006060:	4b8b      	ldr	r3, [pc, #556]	; (8006290 <jacobianoInverso+0x610>)
 8006062:	ed93 7b10 	vldr	d7, [r3, #64]	; 0x40
 8006066:	ee26 6b07 	vmul.f64	d6, d6, d7
 800606a:	4b8b      	ldr	r3, [pc, #556]	; (8006298 <jacobianoInverso+0x618>)
 800606c:	ed93 5b04 	vldr	d5, [r3, #16]
 8006070:	4b87      	ldr	r3, [pc, #540]	; (8006290 <jacobianoInverso+0x610>)
 8006072:	ed93 7b0e 	vldr	d7, [r3, #56]	; 0x38
 8006076:	ee25 7b07 	vmul.f64	d7, d5, d7
 800607a:	ee36 7b47 	vsub.f64	d7, d6, d7
 800607e:	4b87      	ldr	r3, [pc, #540]	; (800629c <jacobianoInverso+0x61c>)
 8006080:	ed83 7b00 	vstr	d7, [r3]
	cross_P3[1] = SA3[2] * l1[2][0] - SA3[0] * l1[2][2];
 8006084:	4b84      	ldr	r3, [pc, #528]	; (8006298 <jacobianoInverso+0x618>)
 8006086:	ed93 6b04 	vldr	d6, [r3, #16]
 800608a:	4b81      	ldr	r3, [pc, #516]	; (8006290 <jacobianoInverso+0x610>)
 800608c:	ed93 7b0c 	vldr	d7, [r3, #48]	; 0x30
 8006090:	ee26 6b07 	vmul.f64	d6, d6, d7
 8006094:	4b80      	ldr	r3, [pc, #512]	; (8006298 <jacobianoInverso+0x618>)
 8006096:	ed93 5b00 	vldr	d5, [r3]
 800609a:	4b7d      	ldr	r3, [pc, #500]	; (8006290 <jacobianoInverso+0x610>)
 800609c:	ed93 7b10 	vldr	d7, [r3, #64]	; 0x40
 80060a0:	ee25 7b07 	vmul.f64	d7, d5, d7
 80060a4:	ee36 7b47 	vsub.f64	d7, d6, d7
 80060a8:	4b7c      	ldr	r3, [pc, #496]	; (800629c <jacobianoInverso+0x61c>)
 80060aa:	ed83 7b02 	vstr	d7, [r3, #8]
	cross_P3[2] = SA3[0] * l1[2][1] - SA3[1] * l1[2][0];
 80060ae:	4b7a      	ldr	r3, [pc, #488]	; (8006298 <jacobianoInverso+0x618>)
 80060b0:	ed93 6b00 	vldr	d6, [r3]
 80060b4:	4b76      	ldr	r3, [pc, #472]	; (8006290 <jacobianoInverso+0x610>)
 80060b6:	ed93 7b0e 	vldr	d7, [r3, #56]	; 0x38
 80060ba:	ee26 6b07 	vmul.f64	d6, d6, d7
 80060be:	4b76      	ldr	r3, [pc, #472]	; (8006298 <jacobianoInverso+0x618>)
 80060c0:	ed93 5b02 	vldr	d5, [r3, #8]
 80060c4:	4b72      	ldr	r3, [pc, #456]	; (8006290 <jacobianoInverso+0x610>)
 80060c6:	ed93 7b0c 	vldr	d7, [r3, #48]	; 0x30
 80060ca:	ee25 7b07 	vmul.f64	d7, d5, d7
 80060ce:	ee36 7b47 	vsub.f64	d7, d6, d7
 80060d2:	4b72      	ldr	r3, [pc, #456]	; (800629c <jacobianoInverso+0x61c>)
 80060d4:	ed83 7b04 	vstr	d7, [r3, #16]

	dot[0] = productDot(cross_P1, Jcd.m[0]);			//Producto Punto
 80060d8:	4971      	ldr	r1, [pc, #452]	; (80062a0 <jacobianoInverso+0x620>)
 80060da:	4872      	ldr	r0, [pc, #456]	; (80062a4 <jacobianoInverso+0x624>)
 80060dc:	f7fd fbe2 	bl	80038a4 <productDot>
 80060e0:	eeb0 7b40 	vmov.f64	d7, d0
 80060e4:	4b70      	ldr	r3, [pc, #448]	; (80062a8 <jacobianoInverso+0x628>)
 80060e6:	ed83 7b00 	vstr	d7, [r3]
	dot[1] = productDot(cross_P2, Jcd.m[1]);
 80060ea:	4970      	ldr	r1, [pc, #448]	; (80062ac <jacobianoInverso+0x62c>)
 80060ec:	4869      	ldr	r0, [pc, #420]	; (8006294 <jacobianoInverso+0x614>)
 80060ee:	f7fd fbd9 	bl	80038a4 <productDot>
 80060f2:	eeb0 7b40 	vmov.f64	d7, d0
 80060f6:	4b6c      	ldr	r3, [pc, #432]	; (80062a8 <jacobianoInverso+0x628>)
 80060f8:	ed83 7b02 	vstr	d7, [r3, #8]
	dot[2] = productDot(cross_P3, Jcd.m[2]);
 80060fc:	496c      	ldr	r1, [pc, #432]	; (80062b0 <jacobianoInverso+0x630>)
 80060fe:	4867      	ldr	r0, [pc, #412]	; (800629c <jacobianoInverso+0x61c>)
 8006100:	f7fd fbd0 	bl	80038a4 <productDot>
 8006104:	eeb0 7b40 	vmov.f64	d7, d0
 8006108:	4b67      	ldr	r3, [pc, #412]	; (80062a8 <jacobianoInverso+0x628>)
 800610a:	ed83 7b04 	vstr	d7, [r3, #16]

	for (int i = 0; i < 3; ++i) {			//Jacobiano de la cinematica inversa
 800610e:	2300      	movs	r3, #0
 8006110:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006114:	e03d      	b.n	8006192 <jacobianoInverso+0x512>
		for (int j = 0; j < 3; ++j) {
 8006116:	2300      	movs	r3, #0
 8006118:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800611c:	e030      	b.n	8006180 <jacobianoInverso+0x500>
			if (i == j) {
 800611e:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8006122:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006126:	429a      	cmp	r2, r3
 8006128:	d114      	bne.n	8006154 <jacobianoInverso+0x4d4>
				Jci[i][j] = dot[i];
 800612a:	4a5f      	ldr	r2, [pc, #380]	; (80062a8 <jacobianoInverso+0x628>)
 800612c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006130:	00db      	lsls	r3, r3, #3
 8006132:	4413      	add	r3, r2
 8006134:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006138:	4c5e      	ldr	r4, [pc, #376]	; (80062b4 <jacobianoInverso+0x634>)
 800613a:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800613e:	4613      	mov	r3, r2
 8006140:	005b      	lsls	r3, r3, #1
 8006142:	4413      	add	r3, r2
 8006144:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006148:	4413      	add	r3, r2
 800614a:	00db      	lsls	r3, r3, #3
 800614c:	4423      	add	r3, r4
 800614e:	e9c3 0100 	strd	r0, r1, [r3]
 8006152:	e010      	b.n	8006176 <jacobianoInverso+0x4f6>
			} else {
				Jci[i][j] = 0;
 8006154:	4957      	ldr	r1, [pc, #348]	; (80062b4 <jacobianoInverso+0x634>)
 8006156:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800615a:	4613      	mov	r3, r2
 800615c:	005b      	lsls	r3, r3, #1
 800615e:	4413      	add	r3, r2
 8006160:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006164:	4413      	add	r3, r2
 8006166:	00db      	lsls	r3, r3, #3
 8006168:	4419      	add	r1, r3
 800616a:	f04f 0200 	mov.w	r2, #0
 800616e:	f04f 0300 	mov.w	r3, #0
 8006172:	e9c1 2300 	strd	r2, r3, [r1]
		for (int j = 0; j < 3; ++j) {
 8006176:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800617a:	3301      	adds	r3, #1
 800617c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006180:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006184:	2b02      	cmp	r3, #2
 8006186:	ddca      	ble.n	800611e <jacobianoInverso+0x49e>
	for (int i = 0; i < 3; ++i) {			//Jacobiano de la cinematica inversa
 8006188:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800618c:	3301      	adds	r3, #1
 800618e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006192:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006196:	2b02      	cmp	r3, #2
 8006198:	ddbd      	ble.n	8006116 <jacobianoInverso+0x496>
			}
		}
	}

	Jci_inv = inversa(Jci);
 800619a:	4c47      	ldr	r4, [pc, #284]	; (80062b8 <jacobianoInverso+0x638>)
 800619c:	463b      	mov	r3, r7
 800619e:	4945      	ldr	r1, [pc, #276]	; (80062b4 <jacobianoInverso+0x634>)
 80061a0:	4618      	mov	r0, r3
 80061a2:	f7fd fcaf 	bl	8003b04 <inversa>
 80061a6:	4620      	mov	r0, r4
 80061a8:	463b      	mov	r3, r7
 80061aa:	2248      	movs	r2, #72	; 0x48
 80061ac:	4619      	mov	r1, r3
 80061ae:	f008 fd95 	bl	800ecdc <memcpy>
	Jinv = productMatriz(Jcd.m,Jci_inv.m);	//Jacobiano Inverso
 80061b2:	4c42      	ldr	r4, [pc, #264]	; (80062bc <jacobianoInverso+0x63c>)
 80061b4:	463b      	mov	r3, r7
 80061b6:	4a40      	ldr	r2, [pc, #256]	; (80062b8 <jacobianoInverso+0x638>)
 80061b8:	4939      	ldr	r1, [pc, #228]	; (80062a0 <jacobianoInverso+0x620>)
 80061ba:	4618      	mov	r0, r3
 80061bc:	f7fd fd10 	bl	8003be0 <productMatriz>
 80061c0:	4620      	mov	r0, r4
 80061c2:	463b      	mov	r3, r7
 80061c4:	2248      	movs	r2, #72	; 0x48
 80061c6:	4619      	mov	r1, r3
 80061c8:	f008 fd88 	bl	800ecdc <memcpy>

	for (int i = 0; i < 3; ++i) {
 80061cc:	2300      	movs	r3, #0
 80061ce:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80061d2:	e041      	b.n	8006258 <jacobianoInverso+0x5d8>
		double sum = 0;
 80061d4:	f04f 0200 	mov.w	r2, #0
 80061d8:	f04f 0300 	mov.w	r3, #0
 80061dc:	e9c7 2326 	strd	r2, r3, [r7, #152]	; 0x98
		for (int j = 0; j < 3; ++j) {
 80061e0:	2300      	movs	r3, #0
 80061e2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80061e6:	e025      	b.n	8006234 <jacobianoInverso+0x5b4>
			sum += sum + Jinv.m[i][j] * Vaux[j];
 80061e8:	4934      	ldr	r1, [pc, #208]	; (80062bc <jacobianoInverso+0x63c>)
 80061ea:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 80061ee:	4613      	mov	r3, r2
 80061f0:	005b      	lsls	r3, r3, #1
 80061f2:	4413      	add	r3, r2
 80061f4:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80061f8:	4413      	add	r3, r2
 80061fa:	00db      	lsls	r3, r3, #3
 80061fc:	440b      	add	r3, r1
 80061fe:	ed93 6b00 	vldr	d6, [r3]
 8006202:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8006206:	00db      	lsls	r3, r3, #3
 8006208:	33b0      	adds	r3, #176	; 0xb0
 800620a:	443b      	add	r3, r7
 800620c:	3b38      	subs	r3, #56	; 0x38
 800620e:	ed93 7b00 	vldr	d7, [r3]
 8006212:	ee26 6b07 	vmul.f64	d6, d6, d7
 8006216:	ed97 7b26 	vldr	d7, [r7, #152]	; 0x98
 800621a:	ee36 7b07 	vadd.f64	d7, d6, d7
 800621e:	ed97 6b26 	vldr	d6, [r7, #152]	; 0x98
 8006222:	ee36 7b07 	vadd.f64	d7, d6, d7
 8006226:	ed87 7b26 	vstr	d7, [r7, #152]	; 0x98
		for (int j = 0; j < 3; ++j) {
 800622a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800622e:	3301      	adds	r3, #1
 8006230:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006234:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8006238:	2b02      	cmp	r3, #2
 800623a:	ddd5      	ble.n	80061e8 <jacobianoInverso+0x568>
		}
		omega[i] = sum;
 800623c:	4a20      	ldr	r2, [pc, #128]	; (80062c0 <jacobianoInverso+0x640>)
 800623e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8006242:	00db      	lsls	r3, r3, #3
 8006244:	18d1      	adds	r1, r2, r3
 8006246:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	; 0x98
 800624a:	e9c1 2300 	strd	r2, r3, [r1]
	for (int i = 0; i < 3; ++i) {
 800624e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8006252:	3301      	adds	r3, #1
 8006254:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8006258:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800625c:	2b02      	cmp	r3, #2
 800625e:	ddb9      	ble.n	80061d4 <jacobianoInverso+0x554>
	}
	omega1 = omega[0];
 8006260:	4b17      	ldr	r3, [pc, #92]	; (80062c0 <jacobianoInverso+0x640>)
 8006262:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006266:	4917      	ldr	r1, [pc, #92]	; (80062c4 <jacobianoInverso+0x644>)
 8006268:	e9c1 2300 	strd	r2, r3, [r1]
	omega2 = omega[1];
 800626c:	4b14      	ldr	r3, [pc, #80]	; (80062c0 <jacobianoInverso+0x640>)
 800626e:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8006272:	4915      	ldr	r1, [pc, #84]	; (80062c8 <jacobianoInverso+0x648>)
 8006274:	e9c1 2300 	strd	r2, r3, [r1]
	omega3 = omega[2];
 8006278:	4b11      	ldr	r3, [pc, #68]	; (80062c0 <jacobianoInverso+0x640>)
 800627a:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800627e:	4913      	ldr	r1, [pc, #76]	; (80062cc <jacobianoInverso+0x64c>)
 8006280:	e9c1 2300 	strd	r2, r3, [r1]

}
 8006284:	bf00      	nop
 8006286:	37b4      	adds	r7, #180	; 0xb4
 8006288:	46bd      	mov	sp, r7
 800628a:	bd90      	pop	{r4, r7, pc}
 800628c:	24000078 	.word	0x24000078
 8006290:	24000838 	.word	0x24000838
 8006294:	24000a00 	.word	0x24000a00
 8006298:	24000090 	.word	0x24000090
 800629c:	24000a18 	.word	0x24000a18
 80062a0:	240008c8 	.word	0x240008c8
 80062a4:	240009e8 	.word	0x240009e8
 80062a8:	24000a30 	.word	0x24000a30
 80062ac:	240008e0 	.word	0x240008e0
 80062b0:	240008f8 	.word	0x240008f8
 80062b4:	24000910 	.word	0x24000910
 80062b8:	24000958 	.word	0x24000958
 80062bc:	240009a0 	.word	0x240009a0
 80062c0:	24000428 	.word	0x24000428
 80062c4:	240004a0 	.word	0x240004a0
 80062c8:	240004a8 	.word	0x240004a8
 80062cc:	240004b0 	.word	0x240004b0

080062d0 <SetPerfilTimers>:

void SetPerfilTimers(double omeg1, double omeg2, double omeg3) {	// velAng en rpm
 80062d0:	b480      	push	{r7}
 80062d2:	b089      	sub	sp, #36	; 0x24
 80062d4:	af00      	add	r7, sp, #0
 80062d6:	ed87 0b04 	vstr	d0, [r7, #16]
 80062da:	ed87 1b02 	vstr	d1, [r7, #8]
 80062de:	ed87 2b00 	vstr	d2, [r7]
	 *   Funcion que configura el PWM del timer 12,13 14, para que el motor vaya a la
	 *   velocidad deseada.
	 *   Entrada: velocidad Angular de cada eslabon, en rad/s.
	 ----------------------------------------------------------------------- */

		rpm1 = (omeg1*((60.00)/(2.00*pi)));
 80062e2:	ed97 7b04 	vldr	d7, [r7, #16]
 80062e6:	ed9f 6b8c 	vldr	d6, [pc, #560]	; 8006518 <SetPerfilTimers+0x248>
 80062ea:	ee27 7b06 	vmul.f64	d7, d7, d6
 80062ee:	4b92      	ldr	r3, [pc, #584]	; (8006538 <SetPerfilTimers+0x268>)
 80062f0:	ed83 7b00 	vstr	d7, [r3]
		rpm2 = (omeg2*((60.00)/(2.00*pi)));
 80062f4:	ed97 7b02 	vldr	d7, [r7, #8]
 80062f8:	ed9f 6b87 	vldr	d6, [pc, #540]	; 8006518 <SetPerfilTimers+0x248>
 80062fc:	ee27 7b06 	vmul.f64	d7, d7, d6
 8006300:	4b8e      	ldr	r3, [pc, #568]	; (800653c <SetPerfilTimers+0x26c>)
 8006302:	ed83 7b00 	vstr	d7, [r3]
		rpm3 = (omeg3*((60.00)/(2.00*pi)));
 8006306:	ed97 7b00 	vldr	d7, [r7]
 800630a:	ed9f 6b83 	vldr	d6, [pc, #524]	; 8006518 <SetPerfilTimers+0x248>
 800630e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8006312:	4b8b      	ldr	r3, [pc, #556]	; (8006540 <SetPerfilTimers+0x270>)
 8006314:	ed83 7b00 	vstr	d7, [r3]
		if(rpm1<=0.1){
 8006318:	4b87      	ldr	r3, [pc, #540]	; (8006538 <SetPerfilTimers+0x268>)
 800631a:	ed93 7b00 	vldr	d7, [r3]
 800631e:	ed9f 6b80 	vldr	d6, [pc, #512]	; 8006520 <SetPerfilTimers+0x250>
 8006322:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8006326:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800632a:	d805      	bhi.n	8006338 <SetPerfilTimers+0x68>
			rpm1=0.1;
 800632c:	4982      	ldr	r1, [pc, #520]	; (8006538 <SetPerfilTimers+0x268>)
 800632e:	a37c      	add	r3, pc, #496	; (adr r3, 8006520 <SetPerfilTimers+0x250>)
 8006330:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006334:	e9c1 2300 	strd	r2, r3, [r1]
		}
		if(rpm2<=0.1){
 8006338:	4b80      	ldr	r3, [pc, #512]	; (800653c <SetPerfilTimers+0x26c>)
 800633a:	ed93 7b00 	vldr	d7, [r3]
 800633e:	ed9f 6b78 	vldr	d6, [pc, #480]	; 8006520 <SetPerfilTimers+0x250>
 8006342:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8006346:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800634a:	d805      	bhi.n	8006358 <SetPerfilTimers+0x88>
			rpm2=0.1;
 800634c:	497b      	ldr	r1, [pc, #492]	; (800653c <SetPerfilTimers+0x26c>)
 800634e:	a374      	add	r3, pc, #464	; (adr r3, 8006520 <SetPerfilTimers+0x250>)
 8006350:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006354:	e9c1 2300 	strd	r2, r3, [r1]
		}
		if(rpm3<=0.1){
 8006358:	4b79      	ldr	r3, [pc, #484]	; (8006540 <SetPerfilTimers+0x270>)
 800635a:	ed93 7b00 	vldr	d7, [r3]
 800635e:	ed9f 6b70 	vldr	d6, [pc, #448]	; 8006520 <SetPerfilTimers+0x250>
 8006362:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8006366:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800636a:	d805      	bhi.n	8006378 <SetPerfilTimers+0xa8>
			rpm3=0.1;
 800636c:	4974      	ldr	r1, [pc, #464]	; (8006540 <SetPerfilTimers+0x270>)
 800636e:	a36c      	add	r3, pc, #432	; (adr r3, 8006520 <SetPerfilTimers+0x250>)
 8006370:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006374:	e9c1 2300 	strd	r2, r3, [r1]
		}


		periodoM[0] = (((FCL * 60.00) / ((double)rpm1 * ((double)(TIM12->PSC) + 1.00) * 9600.00)) - 1.00);	//Fpwm = 64M / ((ARR+1)*(PSC+1)
 8006378:	4b72      	ldr	r3, [pc, #456]	; (8006544 <SetPerfilTimers+0x274>)
 800637a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800637c:	ee07 3a90 	vmov	s15, r3
 8006380:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8006384:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8006388:	ee37 6b06 	vadd.f64	d6, d7, d6
 800638c:	4b6a      	ldr	r3, [pc, #424]	; (8006538 <SetPerfilTimers+0x268>)
 800638e:	ed93 7b00 	vldr	d7, [r3]
 8006392:	ee26 7b07 	vmul.f64	d7, d6, d7
 8006396:	ed9f 6b64 	vldr	d6, [pc, #400]	; 8006528 <SetPerfilTimers+0x258>
 800639a:	ee27 6b06 	vmul.f64	d6, d7, d6
 800639e:	ed9f 5b64 	vldr	d5, [pc, #400]	; 8006530 <SetPerfilTimers+0x260>
 80063a2:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80063a6:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 80063aa:	ee37 7b46 	vsub.f64	d7, d7, d6
 80063ae:	4b66      	ldr	r3, [pc, #408]	; (8006548 <SetPerfilTimers+0x278>)
 80063b0:	ed83 7b00 	vstr	d7, [r3]
		periodoM[1] = (((FCL * 60.00) / ((double)rpm2 * ((double)(TIM13->PSC) + 1.00) * 9600.00)) - 1.00);
 80063b4:	4b65      	ldr	r3, [pc, #404]	; (800654c <SetPerfilTimers+0x27c>)
 80063b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063b8:	ee07 3a90 	vmov	s15, r3
 80063bc:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80063c0:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 80063c4:	ee37 6b06 	vadd.f64	d6, d7, d6
 80063c8:	4b5c      	ldr	r3, [pc, #368]	; (800653c <SetPerfilTimers+0x26c>)
 80063ca:	ed93 7b00 	vldr	d7, [r3]
 80063ce:	ee26 7b07 	vmul.f64	d7, d6, d7
 80063d2:	ed9f 6b55 	vldr	d6, [pc, #340]	; 8006528 <SetPerfilTimers+0x258>
 80063d6:	ee27 6b06 	vmul.f64	d6, d7, d6
 80063da:	ed9f 5b55 	vldr	d5, [pc, #340]	; 8006530 <SetPerfilTimers+0x260>
 80063de:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80063e2:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 80063e6:	ee37 7b46 	vsub.f64	d7, d7, d6
 80063ea:	4b57      	ldr	r3, [pc, #348]	; (8006548 <SetPerfilTimers+0x278>)
 80063ec:	ed83 7b02 	vstr	d7, [r3, #8]
		periodoM[2] = (((FCL * 60.00) / ((double)rpm3 * ((double)(TIM14->PSC) + 1.00) * 9600.00)) - 1.00);
 80063f0:	4b57      	ldr	r3, [pc, #348]	; (8006550 <SetPerfilTimers+0x280>)
 80063f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063f4:	ee07 3a90 	vmov	s15, r3
 80063f8:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80063fc:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8006400:	ee37 6b06 	vadd.f64	d6, d7, d6
 8006404:	4b4e      	ldr	r3, [pc, #312]	; (8006540 <SetPerfilTimers+0x270>)
 8006406:	ed93 7b00 	vldr	d7, [r3]
 800640a:	ee26 7b07 	vmul.f64	d7, d6, d7
 800640e:	ed9f 6b46 	vldr	d6, [pc, #280]	; 8006528 <SetPerfilTimers+0x258>
 8006412:	ee27 6b06 	vmul.f64	d6, d7, d6
 8006416:	ed9f 5b46 	vldr	d5, [pc, #280]	; 8006530 <SetPerfilTimers+0x260>
 800641a:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800641e:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8006422:	ee37 7b46 	vsub.f64	d7, d7, d6
 8006426:	4b48      	ldr	r3, [pc, #288]	; (8006548 <SetPerfilTimers+0x278>)
 8006428:	ed83 7b04 	vstr	d7, [r3, #16]


		// Calculo el error por casteo a int, y cuando supero la unidad, lo compenzo --------------
		for (int i = 0; i < 3; ++i) {
 800642c:	2300      	movs	r3, #0
 800642e:	61fb      	str	r3, [r7, #28]
 8006430:	e0ad      	b.n	800658e <SetPerfilTimers+0x2be>
			ErrorPeriodo[i] = periodoM[i] - (double) ((int32_t) periodoM[i]);
 8006432:	4a45      	ldr	r2, [pc, #276]	; (8006548 <SetPerfilTimers+0x278>)
 8006434:	69fb      	ldr	r3, [r7, #28]
 8006436:	00db      	lsls	r3, r3, #3
 8006438:	4413      	add	r3, r2
 800643a:	ed93 6b00 	vldr	d6, [r3]
 800643e:	4a42      	ldr	r2, [pc, #264]	; (8006548 <SetPerfilTimers+0x278>)
 8006440:	69fb      	ldr	r3, [r7, #28]
 8006442:	00db      	lsls	r3, r3, #3
 8006444:	4413      	add	r3, r2
 8006446:	ed93 7b00 	vldr	d7, [r3]
 800644a:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 800644e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8006452:	ee36 7b47 	vsub.f64	d7, d6, d7
 8006456:	4a3f      	ldr	r2, [pc, #252]	; (8006554 <SetPerfilTimers+0x284>)
 8006458:	69fb      	ldr	r3, [r7, #28]
 800645a:	00db      	lsls	r3, r3, #3
 800645c:	4413      	add	r3, r2
 800645e:	ed83 7b00 	vstr	d7, [r3]
			ErrorAcumuladoPeriodo[i] = ErrorAcumuladoPeriodo[i] + ErrorPeriodo[i];
 8006462:	4a3d      	ldr	r2, [pc, #244]	; (8006558 <SetPerfilTimers+0x288>)
 8006464:	69fb      	ldr	r3, [r7, #28]
 8006466:	00db      	lsls	r3, r3, #3
 8006468:	4413      	add	r3, r2
 800646a:	ed93 6b00 	vldr	d6, [r3]
 800646e:	4a39      	ldr	r2, [pc, #228]	; (8006554 <SetPerfilTimers+0x284>)
 8006470:	69fb      	ldr	r3, [r7, #28]
 8006472:	00db      	lsls	r3, r3, #3
 8006474:	4413      	add	r3, r2
 8006476:	ed93 7b00 	vldr	d7, [r3]
 800647a:	ee36 7b07 	vadd.f64	d7, d6, d7
 800647e:	4a36      	ldr	r2, [pc, #216]	; (8006558 <SetPerfilTimers+0x288>)
 8006480:	69fb      	ldr	r3, [r7, #28]
 8006482:	00db      	lsls	r3, r3, #3
 8006484:	4413      	add	r3, r2
 8006486:	ed83 7b00 	vstr	d7, [r3]
			if (ErrorAcumuladoPeriodo[i] > 1) {
 800648a:	4a33      	ldr	r2, [pc, #204]	; (8006558 <SetPerfilTimers+0x288>)
 800648c:	69fb      	ldr	r3, [r7, #28]
 800648e:	00db      	lsls	r3, r3, #3
 8006490:	4413      	add	r3, r2
 8006492:	ed93 7b00 	vldr	d7, [r3]
 8006496:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800649a:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800649e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80064a2:	dd1f      	ble.n	80064e4 <SetPerfilTimers+0x214>
				periodoM[i] = periodoM[i] + 1;
 80064a4:	4a28      	ldr	r2, [pc, #160]	; (8006548 <SetPerfilTimers+0x278>)
 80064a6:	69fb      	ldr	r3, [r7, #28]
 80064a8:	00db      	lsls	r3, r3, #3
 80064aa:	4413      	add	r3, r2
 80064ac:	ed93 7b00 	vldr	d7, [r3]
 80064b0:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 80064b4:	ee37 7b06 	vadd.f64	d7, d7, d6
 80064b8:	4a23      	ldr	r2, [pc, #140]	; (8006548 <SetPerfilTimers+0x278>)
 80064ba:	69fb      	ldr	r3, [r7, #28]
 80064bc:	00db      	lsls	r3, r3, #3
 80064be:	4413      	add	r3, r2
 80064c0:	ed83 7b00 	vstr	d7, [r3]
				ErrorAcumuladoPeriodo[i] = ErrorAcumuladoPeriodo[i] - 1;
 80064c4:	4a24      	ldr	r2, [pc, #144]	; (8006558 <SetPerfilTimers+0x288>)
 80064c6:	69fb      	ldr	r3, [r7, #28]
 80064c8:	00db      	lsls	r3, r3, #3
 80064ca:	4413      	add	r3, r2
 80064cc:	ed93 7b00 	vldr	d7, [r3]
 80064d0:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 80064d4:	ee37 7b46 	vsub.f64	d7, d7, d6
 80064d8:	4a1f      	ldr	r2, [pc, #124]	; (8006558 <SetPerfilTimers+0x288>)
 80064da:	69fb      	ldr	r3, [r7, #28]
 80064dc:	00db      	lsls	r3, r3, #3
 80064de:	4413      	add	r3, r2
 80064e0:	ed83 7b00 	vstr	d7, [r3]
			}
			if (periodoM[i] < 2) {
 80064e4:	4a18      	ldr	r2, [pc, #96]	; (8006548 <SetPerfilTimers+0x278>)
 80064e6:	69fb      	ldr	r3, [r7, #28]
 80064e8:	00db      	lsls	r3, r3, #3
 80064ea:	4413      	add	r3, r2
 80064ec:	ed93 7b00 	vldr	d7, [r3]
 80064f0:	eeb0 6b00 	vmov.f64	d6, #0	; 0x40000000  2.0
 80064f4:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80064f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80064fc:	d52e      	bpl.n	800655c <SetPerfilTimers+0x28c>
				periodoM[i] = 0; // velocidad lineal de 10.000mm/s !!!
 80064fe:	4a12      	ldr	r2, [pc, #72]	; (8006548 <SetPerfilTimers+0x278>)
 8006500:	69fb      	ldr	r3, [r7, #28]
 8006502:	00db      	lsls	r3, r3, #3
 8006504:	18d1      	adds	r1, r2, r3
 8006506:	f04f 0200 	mov.w	r2, #0
 800650a:	f04f 0300 	mov.w	r3, #0
 800650e:	e9c1 2300 	strd	r2, r3, [r1]
 8006512:	e039      	b.n	8006588 <SetPerfilTimers+0x2b8>
 8006514:	f3af 8000 	nop.w
 8006518:	66ed2a99 	.word	0x66ed2a99
 800651c:	4023193d 	.word	0x4023193d
 8006520:	9999999a 	.word	0x9999999a
 8006524:	3fb99999 	.word	0x3fb99999
 8006528:	00000000 	.word	0x00000000
 800652c:	40c2c000 	.word	0x40c2c000
 8006530:	00000000 	.word	0x00000000
 8006534:	41ec9c38 	.word	0x41ec9c38
 8006538:	240004e0 	.word	0x240004e0
 800653c:	240004e8 	.word	0x240004e8
 8006540:	240004f0 	.word	0x240004f0
 8006544:	40001800 	.word	0x40001800
 8006548:	240004b8 	.word	0x240004b8
 800654c:	40001c00 	.word	0x40001c00
 8006550:	40002000 	.word	0x40002000
 8006554:	240004f8 	.word	0x240004f8
 8006558:	24000510 	.word	0x24000510
			}

			else if (periodoM[i] > pow(2, 16)) { 		// desborde de timer 32 bits
 800655c:	4a98      	ldr	r2, [pc, #608]	; (80067c0 <SetPerfilTimers+0x4f0>)
 800655e:	69fb      	ldr	r3, [r7, #28]
 8006560:	00db      	lsls	r3, r3, #3
 8006562:	4413      	add	r3, r2
 8006564:	ed93 7b00 	vldr	d7, [r3]
 8006568:	ed9f 6b8f 	vldr	d6, [pc, #572]	; 80067a8 <SetPerfilTimers+0x4d8>
 800656c:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8006570:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006574:	dd08      	ble.n	8006588 <SetPerfilTimers+0x2b8>
				periodoM[i] = pow(2, 16);
 8006576:	4a92      	ldr	r2, [pc, #584]	; (80067c0 <SetPerfilTimers+0x4f0>)
 8006578:	69fb      	ldr	r3, [r7, #28]
 800657a:	00db      	lsls	r3, r3, #3
 800657c:	18d1      	adds	r1, r2, r3
 800657e:	f04f 0200 	mov.w	r2, #0
 8006582:	4b90      	ldr	r3, [pc, #576]	; (80067c4 <SetPerfilTimers+0x4f4>)
 8006584:	e9c1 2300 	strd	r2, r3, [r1]
		for (int i = 0; i < 3; ++i) {
 8006588:	69fb      	ldr	r3, [r7, #28]
 800658a:	3301      	adds	r3, #1
 800658c:	61fb      	str	r3, [r7, #28]
 800658e:	69fb      	ldr	r3, [r7, #28]
 8006590:	2b02      	cmp	r3, #2
 8006592:	f77f af4e 	ble.w	8006432 <SetPerfilTimers+0x162>
			}
		}

			periodoM[0]=(uint32_t)(((FCL * 60.0) / (rpm1 * ((double)(TIM12->PSC) + 1.0) * 9600.0)) - 1.0);
 8006596:	4b8c      	ldr	r3, [pc, #560]	; (80067c8 <SetPerfilTimers+0x4f8>)
 8006598:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800659a:	ee07 3a90 	vmov	s15, r3
 800659e:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80065a2:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 80065a6:	ee37 6b06 	vadd.f64	d6, d7, d6
 80065aa:	4b88      	ldr	r3, [pc, #544]	; (80067cc <SetPerfilTimers+0x4fc>)
 80065ac:	ed93 7b00 	vldr	d7, [r3]
 80065b0:	ee26 7b07 	vmul.f64	d7, d6, d7
 80065b4:	ed9f 6b7e 	vldr	d6, [pc, #504]	; 80067b0 <SetPerfilTimers+0x4e0>
 80065b8:	ee27 6b06 	vmul.f64	d6, d7, d6
 80065bc:	ed9f 5b7e 	vldr	d5, [pc, #504]	; 80067b8 <SetPerfilTimers+0x4e8>
 80065c0:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80065c4:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 80065c8:	ee37 7b46 	vsub.f64	d7, d7, d6
 80065cc:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80065d0:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80065d4:	4b7a      	ldr	r3, [pc, #488]	; (80067c0 <SetPerfilTimers+0x4f0>)
 80065d6:	ed83 7b00 	vstr	d7, [r3]
			periodoM[1]=(uint32_t)(((FCL * 60.0) / (rpm2 * ((double)(TIM13->PSC) + 1.0) * 9600.0)) - 1.0);
 80065da:	4b7d      	ldr	r3, [pc, #500]	; (80067d0 <SetPerfilTimers+0x500>)
 80065dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065de:	ee07 3a90 	vmov	s15, r3
 80065e2:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80065e6:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 80065ea:	ee37 6b06 	vadd.f64	d6, d7, d6
 80065ee:	4b79      	ldr	r3, [pc, #484]	; (80067d4 <SetPerfilTimers+0x504>)
 80065f0:	ed93 7b00 	vldr	d7, [r3]
 80065f4:	ee26 7b07 	vmul.f64	d7, d6, d7
 80065f8:	ed9f 6b6d 	vldr	d6, [pc, #436]	; 80067b0 <SetPerfilTimers+0x4e0>
 80065fc:	ee27 6b06 	vmul.f64	d6, d7, d6
 8006600:	ed9f 5b6d 	vldr	d5, [pc, #436]	; 80067b8 <SetPerfilTimers+0x4e8>
 8006604:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8006608:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800660c:	ee37 7b46 	vsub.f64	d7, d7, d6
 8006610:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8006614:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8006618:	4b69      	ldr	r3, [pc, #420]	; (80067c0 <SetPerfilTimers+0x4f0>)
 800661a:	ed83 7b02 	vstr	d7, [r3, #8]
			periodoM[2]=(uint32_t)(((FCL * 60.0) / (rpm3 * ((double)(TIM14->PSC) + 1.0) * 9600.0)) - 1.0);
 800661e:	4b6e      	ldr	r3, [pc, #440]	; (80067d8 <SetPerfilTimers+0x508>)
 8006620:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006622:	ee07 3a90 	vmov	s15, r3
 8006626:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800662a:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800662e:	ee37 6b06 	vadd.f64	d6, d7, d6
 8006632:	4b6a      	ldr	r3, [pc, #424]	; (80067dc <SetPerfilTimers+0x50c>)
 8006634:	ed93 7b00 	vldr	d7, [r3]
 8006638:	ee26 7b07 	vmul.f64	d7, d6, d7
 800663c:	ed9f 6b5c 	vldr	d6, [pc, #368]	; 80067b0 <SetPerfilTimers+0x4e0>
 8006640:	ee27 6b06 	vmul.f64	d6, d7, d6
 8006644:	ed9f 5b5c 	vldr	d5, [pc, #368]	; 80067b8 <SetPerfilTimers+0x4e8>
 8006648:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800664c:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8006650:	ee37 7b46 	vsub.f64	d7, d7, d6
 8006654:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8006658:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800665c:	4b58      	ldr	r3, [pc, #352]	; (80067c0 <SetPerfilTimers+0x4f0>)
 800665e:	ed83 7b04 	vstr	d7, [r3, #16]


			if (TIM12->CNT > periodoM[0]) {
 8006662:	4b59      	ldr	r3, [pc, #356]	; (80067c8 <SetPerfilTimers+0x4f8>)
 8006664:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006666:	ee07 3a90 	vmov	s15, r3
 800666a:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 800666e:	4b54      	ldr	r3, [pc, #336]	; (80067c0 <SetPerfilTimers+0x4f0>)
 8006670:	ed93 7b00 	vldr	d7, [r3]
 8006674:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8006678:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800667c:	dd0c      	ble.n	8006698 <SetPerfilTimers+0x3c8>
						TIM12->CNT = periodoM[0] - 1;// Reinicio clock solo si hace falta y a un valor cercano a la interrupcion, para que no haga ese paso de nuevo
 800667e:	4b50      	ldr	r3, [pc, #320]	; (80067c0 <SetPerfilTimers+0x4f0>)
 8006680:	ed93 7b00 	vldr	d7, [r3]
 8006684:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8006688:	ee37 7b46 	vsub.f64	d7, d7, d6
 800668c:	4b4e      	ldr	r3, [pc, #312]	; (80067c8 <SetPerfilTimers+0x4f8>)
 800668e:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8006692:	ee17 2a90 	vmov	r2, s15
 8006696:	625a      	str	r2, [r3, #36]	; 0x24
			}
			if (TIM13->CNT > periodoM[1]) {
 8006698:	4b4d      	ldr	r3, [pc, #308]	; (80067d0 <SetPerfilTimers+0x500>)
 800669a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800669c:	ee07 3a90 	vmov	s15, r3
 80066a0:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 80066a4:	4b46      	ldr	r3, [pc, #280]	; (80067c0 <SetPerfilTimers+0x4f0>)
 80066a6:	ed93 7b02 	vldr	d7, [r3, #8]
 80066aa:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80066ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80066b2:	dd0c      	ble.n	80066ce <SetPerfilTimers+0x3fe>
						TIM13->CNT = periodoM[1] - 1;// Reinicio clock solo si hace falta y a un valor cercano a la interrupcion, para que no haga ese paso de nuevo
 80066b4:	4b42      	ldr	r3, [pc, #264]	; (80067c0 <SetPerfilTimers+0x4f0>)
 80066b6:	ed93 7b02 	vldr	d7, [r3, #8]
 80066ba:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 80066be:	ee37 7b46 	vsub.f64	d7, d7, d6
 80066c2:	4b43      	ldr	r3, [pc, #268]	; (80067d0 <SetPerfilTimers+0x500>)
 80066c4:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80066c8:	ee17 2a90 	vmov	r2, s15
 80066cc:	625a      	str	r2, [r3, #36]	; 0x24
			}
			if (TIM14->CNT > periodoM[2]) {
 80066ce:	4b42      	ldr	r3, [pc, #264]	; (80067d8 <SetPerfilTimers+0x508>)
 80066d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066d2:	ee07 3a90 	vmov	s15, r3
 80066d6:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 80066da:	4b39      	ldr	r3, [pc, #228]	; (80067c0 <SetPerfilTimers+0x4f0>)
 80066dc:	ed93 7b04 	vldr	d7, [r3, #16]
 80066e0:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80066e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80066e8:	dd0c      	ble.n	8006704 <SetPerfilTimers+0x434>
						TIM14->CNT = periodoM[2] - 1;// Reinicio clock solo si hace falta y a un valor cercano a la interrupcion, para que no haga ese paso de nuevo
 80066ea:	4b35      	ldr	r3, [pc, #212]	; (80067c0 <SetPerfilTimers+0x4f0>)
 80066ec:	ed93 7b04 	vldr	d7, [r3, #16]
 80066f0:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 80066f4:	ee37 7b46 	vsub.f64	d7, d7, d6
 80066f8:	4b37      	ldr	r3, [pc, #220]	; (80067d8 <SetPerfilTimers+0x508>)
 80066fa:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80066fe:	ee17 2a90 	vmov	r2, s15
 8006702:	625a      	str	r2, [r3, #36]	; 0x24
			}

			TIM12->ARR =periodoM[0];
 8006704:	4b2e      	ldr	r3, [pc, #184]	; (80067c0 <SetPerfilTimers+0x4f0>)
 8006706:	ed93 7b00 	vldr	d7, [r3]
 800670a:	4b2f      	ldr	r3, [pc, #188]	; (80067c8 <SetPerfilTimers+0x4f8>)
 800670c:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8006710:	ee17 2a90 	vmov	r2, s15
 8006714:	62da      	str	r2, [r3, #44]	; 0x2c
			TIM12->CCR1 = (uint32_t)((double)(TIM12->ARR) / 2.0);
 8006716:	4b2c      	ldr	r3, [pc, #176]	; (80067c8 <SetPerfilTimers+0x4f8>)
 8006718:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800671a:	ee07 3a90 	vmov	s15, r3
 800671e:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 8006722:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8006726:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800672a:	4b27      	ldr	r3, [pc, #156]	; (80067c8 <SetPerfilTimers+0x4f8>)
 800672c:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8006730:	ee17 2a90 	vmov	r2, s15
 8006734:	635a      	str	r2, [r3, #52]	; 0x34
			TIM13->ARR =periodoM[1];
 8006736:	4b22      	ldr	r3, [pc, #136]	; (80067c0 <SetPerfilTimers+0x4f0>)
 8006738:	ed93 7b02 	vldr	d7, [r3, #8]
 800673c:	4b24      	ldr	r3, [pc, #144]	; (80067d0 <SetPerfilTimers+0x500>)
 800673e:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8006742:	ee17 2a90 	vmov	r2, s15
 8006746:	62da      	str	r2, [r3, #44]	; 0x2c
			TIM13->CCR1 = (uint32_t)((double)(TIM13->ARR) / 2.0);
 8006748:	4b21      	ldr	r3, [pc, #132]	; (80067d0 <SetPerfilTimers+0x500>)
 800674a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800674c:	ee07 3a90 	vmov	s15, r3
 8006750:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 8006754:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8006758:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800675c:	4b1c      	ldr	r3, [pc, #112]	; (80067d0 <SetPerfilTimers+0x500>)
 800675e:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8006762:	ee17 2a90 	vmov	r2, s15
 8006766:	635a      	str	r2, [r3, #52]	; 0x34
			TIM14->ARR =periodoM[2];
 8006768:	4b15      	ldr	r3, [pc, #84]	; (80067c0 <SetPerfilTimers+0x4f0>)
 800676a:	ed93 7b04 	vldr	d7, [r3, #16]
 800676e:	4b1a      	ldr	r3, [pc, #104]	; (80067d8 <SetPerfilTimers+0x508>)
 8006770:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8006774:	ee17 2a90 	vmov	r2, s15
 8006778:	62da      	str	r2, [r3, #44]	; 0x2c
			TIM14->CCR1 = (uint32_t)((double)(TIM14->ARR) / 2.0);
 800677a:	4b17      	ldr	r3, [pc, #92]	; (80067d8 <SetPerfilTimers+0x508>)
 800677c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800677e:	ee07 3a90 	vmov	s15, r3
 8006782:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 8006786:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800678a:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800678e:	4b12      	ldr	r3, [pc, #72]	; (80067d8 <SetPerfilTimers+0x508>)
 8006790:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8006794:	ee17 2a90 	vmov	r2, s15
 8006798:	635a      	str	r2, [r3, #52]	; 0x34
			TIM13->CNT = Periodo[1] - 1;// Reinicio clock solo si hace falta y a un valor cercano a la interrupcion, para que no haga ese paso de nuevo
		}
		if (TIM14->CNT > Periodo[2]) {
			TIM14->CNT = Periodo[2] - 1;// Reinicio clock solo si hace falta y a un valor cercano a la interrupcion, para que no haga ese paso de nuevo
		}*/
}
 800679a:	bf00      	nop
 800679c:	3724      	adds	r7, #36	; 0x24
 800679e:	46bd      	mov	sp, r7
 80067a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067a4:	4770      	bx	lr
 80067a6:	bf00      	nop
 80067a8:	00000000 	.word	0x00000000
 80067ac:	40f00000 	.word	0x40f00000
 80067b0:	00000000 	.word	0x00000000
 80067b4:	40c2c000 	.word	0x40c2c000
 80067b8:	00000000 	.word	0x00000000
 80067bc:	41ec9c38 	.word	0x41ec9c38
 80067c0:	240004b8 	.word	0x240004b8
 80067c4:	40f00000 	.word	0x40f00000
 80067c8:	40001800 	.word	0x40001800
 80067cc:	240004e0 	.word	0x240004e0
 80067d0:	40001c00 	.word	0x40001c00
 80067d4:	240004e8 	.word	0x240004e8
 80067d8:	40002000 	.word	0x40002000
 80067dc:	240004f0 	.word	0x240004f0

080067e0 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart3;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80067e0:	b580      	push	{r7, lr}
 80067e2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80067e4:	4b22      	ldr	r3, [pc, #136]	; (8006870 <MX_USART1_UART_Init+0x90>)
 80067e6:	4a23      	ldr	r2, [pc, #140]	; (8006874 <MX_USART1_UART_Init+0x94>)
 80067e8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80067ea:	4b21      	ldr	r3, [pc, #132]	; (8006870 <MX_USART1_UART_Init+0x90>)
 80067ec:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80067f0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80067f2:	4b1f      	ldr	r3, [pc, #124]	; (8006870 <MX_USART1_UART_Init+0x90>)
 80067f4:	2200      	movs	r2, #0
 80067f6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80067f8:	4b1d      	ldr	r3, [pc, #116]	; (8006870 <MX_USART1_UART_Init+0x90>)
 80067fa:	2200      	movs	r2, #0
 80067fc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80067fe:	4b1c      	ldr	r3, [pc, #112]	; (8006870 <MX_USART1_UART_Init+0x90>)
 8006800:	2200      	movs	r2, #0
 8006802:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8006804:	4b1a      	ldr	r3, [pc, #104]	; (8006870 <MX_USART1_UART_Init+0x90>)
 8006806:	220c      	movs	r2, #12
 8006808:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800680a:	4b19      	ldr	r3, [pc, #100]	; (8006870 <MX_USART1_UART_Init+0x90>)
 800680c:	2200      	movs	r2, #0
 800680e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8006810:	4b17      	ldr	r3, [pc, #92]	; (8006870 <MX_USART1_UART_Init+0x90>)
 8006812:	2200      	movs	r2, #0
 8006814:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8006816:	4b16      	ldr	r3, [pc, #88]	; (8006870 <MX_USART1_UART_Init+0x90>)
 8006818:	2200      	movs	r2, #0
 800681a:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800681c:	4b14      	ldr	r3, [pc, #80]	; (8006870 <MX_USART1_UART_Init+0x90>)
 800681e:	2200      	movs	r2, #0
 8006820:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8006822:	4b13      	ldr	r3, [pc, #76]	; (8006870 <MX_USART1_UART_Init+0x90>)
 8006824:	2200      	movs	r2, #0
 8006826:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8006828:	4811      	ldr	r0, [pc, #68]	; (8006870 <MX_USART1_UART_Init+0x90>)
 800682a:	f005 fecf 	bl	800c5cc <HAL_UART_Init>
 800682e:	4603      	mov	r3, r0
 8006830:	2b00      	cmp	r3, #0
 8006832:	d001      	beq.n	8006838 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8006834:	f7fc fdb4 	bl	80033a0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8006838:	2100      	movs	r1, #0
 800683a:	480d      	ldr	r0, [pc, #52]	; (8006870 <MX_USART1_UART_Init+0x90>)
 800683c:	f008 f959 	bl	800eaf2 <HAL_UARTEx_SetTxFifoThreshold>
 8006840:	4603      	mov	r3, r0
 8006842:	2b00      	cmp	r3, #0
 8006844:	d001      	beq.n	800684a <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8006846:	f7fc fdab 	bl	80033a0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800684a:	2100      	movs	r1, #0
 800684c:	4808      	ldr	r0, [pc, #32]	; (8006870 <MX_USART1_UART_Init+0x90>)
 800684e:	f008 f98e 	bl	800eb6e <HAL_UARTEx_SetRxFifoThreshold>
 8006852:	4603      	mov	r3, r0
 8006854:	2b00      	cmp	r3, #0
 8006856:	d001      	beq.n	800685c <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8006858:	f7fc fda2 	bl	80033a0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 800685c:	4804      	ldr	r0, [pc, #16]	; (8006870 <MX_USART1_UART_Init+0x90>)
 800685e:	f008 f90f 	bl	800ea80 <HAL_UARTEx_DisableFifoMode>
 8006862:	4603      	mov	r3, r0
 8006864:	2b00      	cmp	r3, #0
 8006866:	d001      	beq.n	800686c <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8006868:	f7fc fd9a 	bl	80033a0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800686c:	bf00      	nop
 800686e:	bd80      	pop	{r7, pc}
 8006870:	24000b88 	.word	0x24000b88
 8006874:	40011000 	.word	0x40011000

08006878 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8006878:	b580      	push	{r7, lr}
 800687a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800687c:	4b22      	ldr	r3, [pc, #136]	; (8006908 <MX_USART2_UART_Init+0x90>)
 800687e:	4a23      	ldr	r2, [pc, #140]	; (800690c <MX_USART2_UART_Init+0x94>)
 8006880:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8006882:	4b21      	ldr	r3, [pc, #132]	; (8006908 <MX_USART2_UART_Init+0x90>)
 8006884:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8006888:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800688a:	4b1f      	ldr	r3, [pc, #124]	; (8006908 <MX_USART2_UART_Init+0x90>)
 800688c:	2200      	movs	r2, #0
 800688e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8006890:	4b1d      	ldr	r3, [pc, #116]	; (8006908 <MX_USART2_UART_Init+0x90>)
 8006892:	2200      	movs	r2, #0
 8006894:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8006896:	4b1c      	ldr	r3, [pc, #112]	; (8006908 <MX_USART2_UART_Init+0x90>)
 8006898:	2200      	movs	r2, #0
 800689a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800689c:	4b1a      	ldr	r3, [pc, #104]	; (8006908 <MX_USART2_UART_Init+0x90>)
 800689e:	220c      	movs	r2, #12
 80068a0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80068a2:	4b19      	ldr	r3, [pc, #100]	; (8006908 <MX_USART2_UART_Init+0x90>)
 80068a4:	2200      	movs	r2, #0
 80068a6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80068a8:	4b17      	ldr	r3, [pc, #92]	; (8006908 <MX_USART2_UART_Init+0x90>)
 80068aa:	2200      	movs	r2, #0
 80068ac:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80068ae:	4b16      	ldr	r3, [pc, #88]	; (8006908 <MX_USART2_UART_Init+0x90>)
 80068b0:	2200      	movs	r2, #0
 80068b2:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80068b4:	4b14      	ldr	r3, [pc, #80]	; (8006908 <MX_USART2_UART_Init+0x90>)
 80068b6:	2200      	movs	r2, #0
 80068b8:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80068ba:	4b13      	ldr	r3, [pc, #76]	; (8006908 <MX_USART2_UART_Init+0x90>)
 80068bc:	2200      	movs	r2, #0
 80068be:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80068c0:	4811      	ldr	r0, [pc, #68]	; (8006908 <MX_USART2_UART_Init+0x90>)
 80068c2:	f005 fe83 	bl	800c5cc <HAL_UART_Init>
 80068c6:	4603      	mov	r3, r0
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d001      	beq.n	80068d0 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 80068cc:	f7fc fd68 	bl	80033a0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80068d0:	2100      	movs	r1, #0
 80068d2:	480d      	ldr	r0, [pc, #52]	; (8006908 <MX_USART2_UART_Init+0x90>)
 80068d4:	f008 f90d 	bl	800eaf2 <HAL_UARTEx_SetTxFifoThreshold>
 80068d8:	4603      	mov	r3, r0
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d001      	beq.n	80068e2 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 80068de:	f7fc fd5f 	bl	80033a0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80068e2:	2100      	movs	r1, #0
 80068e4:	4808      	ldr	r0, [pc, #32]	; (8006908 <MX_USART2_UART_Init+0x90>)
 80068e6:	f008 f942 	bl	800eb6e <HAL_UARTEx_SetRxFifoThreshold>
 80068ea:	4603      	mov	r3, r0
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d001      	beq.n	80068f4 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 80068f0:	f7fc fd56 	bl	80033a0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80068f4:	4804      	ldr	r0, [pc, #16]	; (8006908 <MX_USART2_UART_Init+0x90>)
 80068f6:	f008 f8c3 	bl	800ea80 <HAL_UARTEx_DisableFifoMode>
 80068fa:	4603      	mov	r3, r0
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	d001      	beq.n	8006904 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8006900:	f7fc fd4e 	bl	80033a0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8006904:	bf00      	nop
 8006906:	bd80      	pop	{r7, pc}
 8006908:	24000c18 	.word	0x24000c18
 800690c:	40004400 	.word	0x40004400

08006910 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8006910:	b580      	push	{r7, lr}
 8006912:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8006914:	4b22      	ldr	r3, [pc, #136]	; (80069a0 <MX_USART3_UART_Init+0x90>)
 8006916:	4a23      	ldr	r2, [pc, #140]	; (80069a4 <MX_USART3_UART_Init+0x94>)
 8006918:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 800691a:	4b21      	ldr	r3, [pc, #132]	; (80069a0 <MX_USART3_UART_Init+0x90>)
 800691c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8006920:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8006922:	4b1f      	ldr	r3, [pc, #124]	; (80069a0 <MX_USART3_UART_Init+0x90>)
 8006924:	2200      	movs	r2, #0
 8006926:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8006928:	4b1d      	ldr	r3, [pc, #116]	; (80069a0 <MX_USART3_UART_Init+0x90>)
 800692a:	2200      	movs	r2, #0
 800692c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800692e:	4b1c      	ldr	r3, [pc, #112]	; (80069a0 <MX_USART3_UART_Init+0x90>)
 8006930:	2200      	movs	r2, #0
 8006932:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8006934:	4b1a      	ldr	r3, [pc, #104]	; (80069a0 <MX_USART3_UART_Init+0x90>)
 8006936:	220c      	movs	r2, #12
 8006938:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800693a:	4b19      	ldr	r3, [pc, #100]	; (80069a0 <MX_USART3_UART_Init+0x90>)
 800693c:	2200      	movs	r2, #0
 800693e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8006940:	4b17      	ldr	r3, [pc, #92]	; (80069a0 <MX_USART3_UART_Init+0x90>)
 8006942:	2200      	movs	r2, #0
 8006944:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8006946:	4b16      	ldr	r3, [pc, #88]	; (80069a0 <MX_USART3_UART_Init+0x90>)
 8006948:	2200      	movs	r2, #0
 800694a:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800694c:	4b14      	ldr	r3, [pc, #80]	; (80069a0 <MX_USART3_UART_Init+0x90>)
 800694e:	2200      	movs	r2, #0
 8006950:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8006952:	4b13      	ldr	r3, [pc, #76]	; (80069a0 <MX_USART3_UART_Init+0x90>)
 8006954:	2200      	movs	r2, #0
 8006956:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8006958:	4811      	ldr	r0, [pc, #68]	; (80069a0 <MX_USART3_UART_Init+0x90>)
 800695a:	f005 fe37 	bl	800c5cc <HAL_UART_Init>
 800695e:	4603      	mov	r3, r0
 8006960:	2b00      	cmp	r3, #0
 8006962:	d001      	beq.n	8006968 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8006964:	f7fc fd1c 	bl	80033a0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8006968:	2100      	movs	r1, #0
 800696a:	480d      	ldr	r0, [pc, #52]	; (80069a0 <MX_USART3_UART_Init+0x90>)
 800696c:	f008 f8c1 	bl	800eaf2 <HAL_UARTEx_SetTxFifoThreshold>
 8006970:	4603      	mov	r3, r0
 8006972:	2b00      	cmp	r3, #0
 8006974:	d001      	beq.n	800697a <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8006976:	f7fc fd13 	bl	80033a0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800697a:	2100      	movs	r1, #0
 800697c:	4808      	ldr	r0, [pc, #32]	; (80069a0 <MX_USART3_UART_Init+0x90>)
 800697e:	f008 f8f6 	bl	800eb6e <HAL_UARTEx_SetRxFifoThreshold>
 8006982:	4603      	mov	r3, r0
 8006984:	2b00      	cmp	r3, #0
 8006986:	d001      	beq.n	800698c <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8006988:	f7fc fd0a 	bl	80033a0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 800698c:	4804      	ldr	r0, [pc, #16]	; (80069a0 <MX_USART3_UART_Init+0x90>)
 800698e:	f008 f877 	bl	800ea80 <HAL_UARTEx_DisableFifoMode>
 8006992:	4603      	mov	r3, r0
 8006994:	2b00      	cmp	r3, #0
 8006996:	d001      	beq.n	800699c <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8006998:	f7fc fd02 	bl	80033a0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800699c:	bf00      	nop
 800699e:	bd80      	pop	{r7, pc}
 80069a0:	24000ca8 	.word	0x24000ca8
 80069a4:	40004800 	.word	0x40004800

080069a8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80069a8:	b580      	push	{r7, lr}
 80069aa:	b0be      	sub	sp, #248	; 0xf8
 80069ac:	af00      	add	r7, sp, #0
 80069ae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80069b0:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80069b4:	2200      	movs	r2, #0
 80069b6:	601a      	str	r2, [r3, #0]
 80069b8:	605a      	str	r2, [r3, #4]
 80069ba:	609a      	str	r2, [r3, #8]
 80069bc:	60da      	str	r2, [r3, #12]
 80069be:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80069c0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80069c4:	22bc      	movs	r2, #188	; 0xbc
 80069c6:	2100      	movs	r1, #0
 80069c8:	4618      	mov	r0, r3
 80069ca:	f008 f995 	bl	800ecf8 <memset>
  if(uartHandle->Instance==USART1)
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	4a84      	ldr	r2, [pc, #528]	; (8006be4 <HAL_UART_MspInit+0x23c>)
 80069d4:	4293      	cmp	r3, r2
 80069d6:	d168      	bne.n	8006aaa <HAL_UART_MspInit+0x102>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80069d8:	2301      	movs	r3, #1
 80069da:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 80069dc:	2300      	movs	r3, #0
 80069de:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80069e2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80069e6:	4618      	mov	r0, r3
 80069e8:	f002 fa8c 	bl	8008f04 <HAL_RCCEx_PeriphCLKConfig>
 80069ec:	4603      	mov	r3, r0
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d001      	beq.n	80069f6 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80069f2:	f7fc fcd5 	bl	80033a0 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80069f6:	4b7c      	ldr	r3, [pc, #496]	; (8006be8 <HAL_UART_MspInit+0x240>)
 80069f8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80069fc:	4a7a      	ldr	r2, [pc, #488]	; (8006be8 <HAL_UART_MspInit+0x240>)
 80069fe:	f043 0310 	orr.w	r3, r3, #16
 8006a02:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8006a06:	4b78      	ldr	r3, [pc, #480]	; (8006be8 <HAL_UART_MspInit+0x240>)
 8006a08:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006a0c:	f003 0310 	and.w	r3, r3, #16
 8006a10:	627b      	str	r3, [r7, #36]	; 0x24
 8006a12:	6a7b      	ldr	r3, [r7, #36]	; 0x24

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006a14:	4b74      	ldr	r3, [pc, #464]	; (8006be8 <HAL_UART_MspInit+0x240>)
 8006a16:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006a1a:	4a73      	ldr	r2, [pc, #460]	; (8006be8 <HAL_UART_MspInit+0x240>)
 8006a1c:	f043 0302 	orr.w	r3, r3, #2
 8006a20:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8006a24:	4b70      	ldr	r3, [pc, #448]	; (8006be8 <HAL_UART_MspInit+0x240>)
 8006a26:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006a2a:	f003 0302 	and.w	r3, r3, #2
 8006a2e:	623b      	str	r3, [r7, #32]
 8006a30:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006a32:	4b6d      	ldr	r3, [pc, #436]	; (8006be8 <HAL_UART_MspInit+0x240>)
 8006a34:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006a38:	4a6b      	ldr	r2, [pc, #428]	; (8006be8 <HAL_UART_MspInit+0x240>)
 8006a3a:	f043 0301 	orr.w	r3, r3, #1
 8006a3e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8006a42:	4b69      	ldr	r3, [pc, #420]	; (8006be8 <HAL_UART_MspInit+0x240>)
 8006a44:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006a48:	f003 0301 	and.w	r3, r3, #1
 8006a4c:	61fb      	str	r3, [r7, #28]
 8006a4e:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration
    PB15     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = Jetson_RX_Pin;
 8006a50:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006a54:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006a58:	2302      	movs	r3, #2
 8006a5a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006a5e:	2300      	movs	r3, #0
 8006a60:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006a64:	2300      	movs	r3, #0
 8006a66:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8006a6a:	2304      	movs	r3, #4
 8006a6c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(Jetson_RX_GPIO_Port, &GPIO_InitStruct);
 8006a70:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8006a74:	4619      	mov	r1, r3
 8006a76:	485d      	ldr	r0, [pc, #372]	; (8006bec <HAL_UART_MspInit+0x244>)
 8006a78:	f001 f854 	bl	8007b24 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = Jetson_TX_Pin;
 8006a7c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006a80:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006a84:	2302      	movs	r3, #2
 8006a86:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006a8a:	2300      	movs	r3, #0
 8006a8c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006a90:	2300      	movs	r3, #0
 8006a92:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8006a96:	2307      	movs	r3, #7
 8006a98:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(Jetson_TX_GPIO_Port, &GPIO_InitStruct);
 8006a9c:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8006aa0:	4619      	mov	r1, r3
 8006aa2:	4853      	ldr	r0, [pc, #332]	; (8006bf0 <HAL_UART_MspInit+0x248>)
 8006aa4:	f001 f83e 	bl	8007b24 <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8006aa8:	e097      	b.n	8006bda <HAL_UART_MspInit+0x232>
  else if(uartHandle->Instance==USART2)
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	4a51      	ldr	r2, [pc, #324]	; (8006bf4 <HAL_UART_MspInit+0x24c>)
 8006ab0:	4293      	cmp	r3, r2
 8006ab2:	d142      	bne.n	8006b3a <HAL_UART_MspInit+0x192>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8006ab4:	2302      	movs	r3, #2
 8006ab6:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8006ab8:	2300      	movs	r3, #0
 8006aba:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8006abe:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006ac2:	4618      	mov	r0, r3
 8006ac4:	f002 fa1e 	bl	8008f04 <HAL_RCCEx_PeriphCLKConfig>
 8006ac8:	4603      	mov	r3, r0
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d001      	beq.n	8006ad2 <HAL_UART_MspInit+0x12a>
      Error_Handler();
 8006ace:	f7fc fc67 	bl	80033a0 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8006ad2:	4b45      	ldr	r3, [pc, #276]	; (8006be8 <HAL_UART_MspInit+0x240>)
 8006ad4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006ad8:	4a43      	ldr	r2, [pc, #268]	; (8006be8 <HAL_UART_MspInit+0x240>)
 8006ada:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006ade:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8006ae2:	4b41      	ldr	r3, [pc, #260]	; (8006be8 <HAL_UART_MspInit+0x240>)
 8006ae4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006ae8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006aec:	61bb      	str	r3, [r7, #24]
 8006aee:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006af0:	4b3d      	ldr	r3, [pc, #244]	; (8006be8 <HAL_UART_MspInit+0x240>)
 8006af2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006af6:	4a3c      	ldr	r2, [pc, #240]	; (8006be8 <HAL_UART_MspInit+0x240>)
 8006af8:	f043 0301 	orr.w	r3, r3, #1
 8006afc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8006b00:	4b39      	ldr	r3, [pc, #228]	; (8006be8 <HAL_UART_MspInit+0x240>)
 8006b02:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006b06:	f003 0301 	and.w	r3, r3, #1
 8006b0a:	617b      	str	r3, [r7, #20]
 8006b0c:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = NucleoF4_RX_Pin|NucleoF4_TX_Pin;
 8006b0e:	230c      	movs	r3, #12
 8006b10:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006b14:	2302      	movs	r3, #2
 8006b16:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006b1a:	2300      	movs	r3, #0
 8006b1c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006b20:	2300      	movs	r3, #0
 8006b22:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8006b26:	2307      	movs	r3, #7
 8006b28:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006b2c:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8006b30:	4619      	mov	r1, r3
 8006b32:	482f      	ldr	r0, [pc, #188]	; (8006bf0 <HAL_UART_MspInit+0x248>)
 8006b34:	f000 fff6 	bl	8007b24 <HAL_GPIO_Init>
}
 8006b38:	e04f      	b.n	8006bda <HAL_UART_MspInit+0x232>
  else if(uartHandle->Instance==USART3)
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	4a2e      	ldr	r2, [pc, #184]	; (8006bf8 <HAL_UART_MspInit+0x250>)
 8006b40:	4293      	cmp	r3, r2
 8006b42:	d14a      	bne.n	8006bda <HAL_UART_MspInit+0x232>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8006b44:	2302      	movs	r3, #2
 8006b46:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8006b48:	2300      	movs	r3, #0
 8006b4a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8006b4e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006b52:	4618      	mov	r0, r3
 8006b54:	f002 f9d6 	bl	8008f04 <HAL_RCCEx_PeriphCLKConfig>
 8006b58:	4603      	mov	r3, r0
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d001      	beq.n	8006b62 <HAL_UART_MspInit+0x1ba>
      Error_Handler();
 8006b5e:	f7fc fc1f 	bl	80033a0 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8006b62:	4b21      	ldr	r3, [pc, #132]	; (8006be8 <HAL_UART_MspInit+0x240>)
 8006b64:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006b68:	4a1f      	ldr	r2, [pc, #124]	; (8006be8 <HAL_UART_MspInit+0x240>)
 8006b6a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006b6e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8006b72:	4b1d      	ldr	r3, [pc, #116]	; (8006be8 <HAL_UART_MspInit+0x240>)
 8006b74:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006b78:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006b7c:	613b      	str	r3, [r7, #16]
 8006b7e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8006b80:	4b19      	ldr	r3, [pc, #100]	; (8006be8 <HAL_UART_MspInit+0x240>)
 8006b82:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006b86:	4a18      	ldr	r2, [pc, #96]	; (8006be8 <HAL_UART_MspInit+0x240>)
 8006b88:	f043 0308 	orr.w	r3, r3, #8
 8006b8c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8006b90:	4b15      	ldr	r3, [pc, #84]	; (8006be8 <HAL_UART_MspInit+0x240>)
 8006b92:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006b96:	f003 0308 	and.w	r3, r3, #8
 8006b9a:	60fb      	str	r3, [r7, #12]
 8006b9c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = STLINK_TX_Pin|STLINK_RX_Pin;
 8006b9e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8006ba2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006ba6:	2302      	movs	r3, #2
 8006ba8:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006bac:	2300      	movs	r3, #0
 8006bae:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006bb2:	2300      	movs	r3, #0
 8006bb4:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8006bb8:	2307      	movs	r3, #7
 8006bba:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006bbe:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8006bc2:	4619      	mov	r1, r3
 8006bc4:	480d      	ldr	r0, [pc, #52]	; (8006bfc <HAL_UART_MspInit+0x254>)
 8006bc6:	f000 ffad 	bl	8007b24 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 1, 1);
 8006bca:	2201      	movs	r2, #1
 8006bcc:	2101      	movs	r1, #1
 8006bce:	2027      	movs	r0, #39	; 0x27
 8006bd0:	f000 fa01 	bl	8006fd6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8006bd4:	2027      	movs	r0, #39	; 0x27
 8006bd6:	f000 fa18 	bl	800700a <HAL_NVIC_EnableIRQ>
}
 8006bda:	bf00      	nop
 8006bdc:	37f8      	adds	r7, #248	; 0xf8
 8006bde:	46bd      	mov	sp, r7
 8006be0:	bd80      	pop	{r7, pc}
 8006be2:	bf00      	nop
 8006be4:	40011000 	.word	0x40011000
 8006be8:	58024400 	.word	0x58024400
 8006bec:	58020400 	.word	0x58020400
 8006bf0:	58020000 	.word	0x58020000
 8006bf4:	40004400 	.word	0x40004400
 8006bf8:	40004800 	.word	0x40004800
 8006bfc:	58020c00 	.word	0x58020c00

08006c00 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8006c00:	f8df d034 	ldr.w	sp, [pc, #52]	; 8006c38 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8006c04:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8006c06:	e003      	b.n	8006c10 <LoopCopyDataInit>

08006c08 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8006c08:	4b0c      	ldr	r3, [pc, #48]	; (8006c3c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8006c0a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8006c0c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8006c0e:	3104      	adds	r1, #4

08006c10 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8006c10:	480b      	ldr	r0, [pc, #44]	; (8006c40 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8006c12:	4b0c      	ldr	r3, [pc, #48]	; (8006c44 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8006c14:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8006c16:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8006c18:	d3f6      	bcc.n	8006c08 <CopyDataInit>
  ldr  r2, =_sbss
 8006c1a:	4a0b      	ldr	r2, [pc, #44]	; (8006c48 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8006c1c:	e002      	b.n	8006c24 <LoopFillZerobss>

08006c1e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8006c1e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8006c20:	f842 3b04 	str.w	r3, [r2], #4

08006c24 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8006c24:	4b09      	ldr	r3, [pc, #36]	; (8006c4c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8006c26:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8006c28:	d3f9      	bcc.n	8006c1e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8006c2a:	f7fd f9b7 	bl	8003f9c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8006c2e:	f008 f831 	bl	800ec94 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8006c32:	f7fb ff65 	bl	8002b00 <main>
  bx  lr    
 8006c36:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8006c38:	24080000 	.word	0x24080000
  ldr  r3, =_sidata
 8006c3c:	080140d0 	.word	0x080140d0
  ldr  r0, =_sdata
 8006c40:	24000000 	.word	0x24000000
  ldr  r3, =_edata
 8006c44:	24000284 	.word	0x24000284
  ldr  r2, =_sbss
 8006c48:	24000288 	.word	0x24000288
  ldr  r3, = _ebss
 8006c4c:	24000d4c 	.word	0x24000d4c

08006c50 <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8006c50:	e7fe      	b.n	8006c50 <ADC3_IRQHandler>
	...

08006c54 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8006c54:	b580      	push	{r7, lr}
 8006c56:	b082      	sub	sp, #8
 8006c58:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8006c5a:	2003      	movs	r0, #3
 8006c5c:	f000 f9b0 	bl	8006fc0 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8006c60:	f001 ff7a 	bl	8008b58 <HAL_RCC_GetSysClockFreq>
 8006c64:	4602      	mov	r2, r0
 8006c66:	4b15      	ldr	r3, [pc, #84]	; (8006cbc <HAL_Init+0x68>)
 8006c68:	699b      	ldr	r3, [r3, #24]
 8006c6a:	0a1b      	lsrs	r3, r3, #8
 8006c6c:	f003 030f 	and.w	r3, r3, #15
 8006c70:	4913      	ldr	r1, [pc, #76]	; (8006cc0 <HAL_Init+0x6c>)
 8006c72:	5ccb      	ldrb	r3, [r1, r3]
 8006c74:	f003 031f 	and.w	r3, r3, #31
 8006c78:	fa22 f303 	lsr.w	r3, r2, r3
 8006c7c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006c7e:	4b0f      	ldr	r3, [pc, #60]	; (8006cbc <HAL_Init+0x68>)
 8006c80:	699b      	ldr	r3, [r3, #24]
 8006c82:	f003 030f 	and.w	r3, r3, #15
 8006c86:	4a0e      	ldr	r2, [pc, #56]	; (8006cc0 <HAL_Init+0x6c>)
 8006c88:	5cd3      	ldrb	r3, [r2, r3]
 8006c8a:	f003 031f 	and.w	r3, r3, #31
 8006c8e:	687a      	ldr	r2, [r7, #4]
 8006c90:	fa22 f303 	lsr.w	r3, r2, r3
 8006c94:	4a0b      	ldr	r2, [pc, #44]	; (8006cc4 <HAL_Init+0x70>)
 8006c96:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006c98:	4a0b      	ldr	r2, [pc, #44]	; (8006cc8 <HAL_Init+0x74>)
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8006c9e:	2000      	movs	r0, #0
 8006ca0:	f000 f814 	bl	8006ccc <HAL_InitTick>
 8006ca4:	4603      	mov	r3, r0
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d001      	beq.n	8006cae <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8006caa:	2301      	movs	r3, #1
 8006cac:	e002      	b.n	8006cb4 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8006cae:	f7fc fffb 	bl	8003ca8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8006cb2:	2300      	movs	r3, #0
}
 8006cb4:	4618      	mov	r0, r3
 8006cb6:	3708      	adds	r7, #8
 8006cb8:	46bd      	mov	sp, r7
 8006cba:	bd80      	pop	{r7, pc}
 8006cbc:	58024400 	.word	0x58024400
 8006cc0:	080123a0 	.word	0x080123a0
 8006cc4:	24000014 	.word	0x24000014
 8006cc8:	24000010 	.word	0x24000010

08006ccc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8006ccc:	b580      	push	{r7, lr}
 8006cce:	b082      	sub	sp, #8
 8006cd0:	af00      	add	r7, sp, #0
 8006cd2:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8006cd4:	4b15      	ldr	r3, [pc, #84]	; (8006d2c <HAL_InitTick+0x60>)
 8006cd6:	781b      	ldrb	r3, [r3, #0]
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d101      	bne.n	8006ce0 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8006cdc:	2301      	movs	r3, #1
 8006cde:	e021      	b.n	8006d24 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8006ce0:	4b13      	ldr	r3, [pc, #76]	; (8006d30 <HAL_InitTick+0x64>)
 8006ce2:	681a      	ldr	r2, [r3, #0]
 8006ce4:	4b11      	ldr	r3, [pc, #68]	; (8006d2c <HAL_InitTick+0x60>)
 8006ce6:	781b      	ldrb	r3, [r3, #0]
 8006ce8:	4619      	mov	r1, r3
 8006cea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006cee:	fbb3 f3f1 	udiv	r3, r3, r1
 8006cf2:	fbb2 f3f3 	udiv	r3, r2, r3
 8006cf6:	4618      	mov	r0, r3
 8006cf8:	f000 f9a3 	bl	8007042 <HAL_SYSTICK_Config>
 8006cfc:	4603      	mov	r3, r0
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d001      	beq.n	8006d06 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8006d02:	2301      	movs	r3, #1
 8006d04:	e00e      	b.n	8006d24 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	2b0f      	cmp	r3, #15
 8006d0a:	d80a      	bhi.n	8006d22 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8006d0c:	2200      	movs	r2, #0
 8006d0e:	6879      	ldr	r1, [r7, #4]
 8006d10:	f04f 30ff 	mov.w	r0, #4294967295
 8006d14:	f000 f95f 	bl	8006fd6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8006d18:	4a06      	ldr	r2, [pc, #24]	; (8006d34 <HAL_InitTick+0x68>)
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8006d1e:	2300      	movs	r3, #0
 8006d20:	e000      	b.n	8006d24 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8006d22:	2301      	movs	r3, #1
}
 8006d24:	4618      	mov	r0, r3
 8006d26:	3708      	adds	r7, #8
 8006d28:	46bd      	mov	sp, r7
 8006d2a:	bd80      	pop	{r7, pc}
 8006d2c:	240000ac 	.word	0x240000ac
 8006d30:	24000010 	.word	0x24000010
 8006d34:	240000a8 	.word	0x240000a8

08006d38 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8006d38:	b480      	push	{r7}
 8006d3a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8006d3c:	4b06      	ldr	r3, [pc, #24]	; (8006d58 <HAL_IncTick+0x20>)
 8006d3e:	781b      	ldrb	r3, [r3, #0]
 8006d40:	461a      	mov	r2, r3
 8006d42:	4b06      	ldr	r3, [pc, #24]	; (8006d5c <HAL_IncTick+0x24>)
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	4413      	add	r3, r2
 8006d48:	4a04      	ldr	r2, [pc, #16]	; (8006d5c <HAL_IncTick+0x24>)
 8006d4a:	6013      	str	r3, [r2, #0]
}
 8006d4c:	bf00      	nop
 8006d4e:	46bd      	mov	sp, r7
 8006d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d54:	4770      	bx	lr
 8006d56:	bf00      	nop
 8006d58:	240000ac 	.word	0x240000ac
 8006d5c:	24000d38 	.word	0x24000d38

08006d60 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8006d60:	b480      	push	{r7}
 8006d62:	af00      	add	r7, sp, #0
  return uwTick;
 8006d64:	4b03      	ldr	r3, [pc, #12]	; (8006d74 <HAL_GetTick+0x14>)
 8006d66:	681b      	ldr	r3, [r3, #0]
}
 8006d68:	4618      	mov	r0, r3
 8006d6a:	46bd      	mov	sp, r7
 8006d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d70:	4770      	bx	lr
 8006d72:	bf00      	nop
 8006d74:	24000d38 	.word	0x24000d38

08006d78 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8006d78:	b580      	push	{r7, lr}
 8006d7a:	b084      	sub	sp, #16
 8006d7c:	af00      	add	r7, sp, #0
 8006d7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8006d80:	f7ff ffee 	bl	8006d60 <HAL_GetTick>
 8006d84:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d90:	d005      	beq.n	8006d9e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8006d92:	4b0a      	ldr	r3, [pc, #40]	; (8006dbc <HAL_Delay+0x44>)
 8006d94:	781b      	ldrb	r3, [r3, #0]
 8006d96:	461a      	mov	r2, r3
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	4413      	add	r3, r2
 8006d9c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8006d9e:	bf00      	nop
 8006da0:	f7ff ffde 	bl	8006d60 <HAL_GetTick>
 8006da4:	4602      	mov	r2, r0
 8006da6:	68bb      	ldr	r3, [r7, #8]
 8006da8:	1ad3      	subs	r3, r2, r3
 8006daa:	68fa      	ldr	r2, [r7, #12]
 8006dac:	429a      	cmp	r2, r3
 8006dae:	d8f7      	bhi.n	8006da0 <HAL_Delay+0x28>
  {
  }
}
 8006db0:	bf00      	nop
 8006db2:	bf00      	nop
 8006db4:	3710      	adds	r7, #16
 8006db6:	46bd      	mov	sp, r7
 8006db8:	bd80      	pop	{r7, pc}
 8006dba:	bf00      	nop
 8006dbc:	240000ac 	.word	0x240000ac

08006dc0 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8006dc0:	b480      	push	{r7}
 8006dc2:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8006dc4:	4b03      	ldr	r3, [pc, #12]	; (8006dd4 <HAL_GetREVID+0x14>)
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	0c1b      	lsrs	r3, r3, #16
}
 8006dca:	4618      	mov	r0, r3
 8006dcc:	46bd      	mov	sp, r7
 8006dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dd2:	4770      	bx	lr
 8006dd4:	5c001000 	.word	0x5c001000

08006dd8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006dd8:	b480      	push	{r7}
 8006dda:	b085      	sub	sp, #20
 8006ddc:	af00      	add	r7, sp, #0
 8006dde:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	f003 0307 	and.w	r3, r3, #7
 8006de6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006de8:	4b0b      	ldr	r3, [pc, #44]	; (8006e18 <__NVIC_SetPriorityGrouping+0x40>)
 8006dea:	68db      	ldr	r3, [r3, #12]
 8006dec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006dee:	68ba      	ldr	r2, [r7, #8]
 8006df0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8006df4:	4013      	ands	r3, r2
 8006df6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006dfc:	68bb      	ldr	r3, [r7, #8]
 8006dfe:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8006e00:	4b06      	ldr	r3, [pc, #24]	; (8006e1c <__NVIC_SetPriorityGrouping+0x44>)
 8006e02:	4313      	orrs	r3, r2
 8006e04:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8006e06:	4a04      	ldr	r2, [pc, #16]	; (8006e18 <__NVIC_SetPriorityGrouping+0x40>)
 8006e08:	68bb      	ldr	r3, [r7, #8]
 8006e0a:	60d3      	str	r3, [r2, #12]
}
 8006e0c:	bf00      	nop
 8006e0e:	3714      	adds	r7, #20
 8006e10:	46bd      	mov	sp, r7
 8006e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e16:	4770      	bx	lr
 8006e18:	e000ed00 	.word	0xe000ed00
 8006e1c:	05fa0000 	.word	0x05fa0000

08006e20 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8006e20:	b480      	push	{r7}
 8006e22:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006e24:	4b04      	ldr	r3, [pc, #16]	; (8006e38 <__NVIC_GetPriorityGrouping+0x18>)
 8006e26:	68db      	ldr	r3, [r3, #12]
 8006e28:	0a1b      	lsrs	r3, r3, #8
 8006e2a:	f003 0307 	and.w	r3, r3, #7
}
 8006e2e:	4618      	mov	r0, r3
 8006e30:	46bd      	mov	sp, r7
 8006e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e36:	4770      	bx	lr
 8006e38:	e000ed00 	.word	0xe000ed00

08006e3c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006e3c:	b480      	push	{r7}
 8006e3e:	b083      	sub	sp, #12
 8006e40:	af00      	add	r7, sp, #0
 8006e42:	4603      	mov	r3, r0
 8006e44:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8006e46:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	db0b      	blt.n	8006e66 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006e4e:	88fb      	ldrh	r3, [r7, #6]
 8006e50:	f003 021f 	and.w	r2, r3, #31
 8006e54:	4907      	ldr	r1, [pc, #28]	; (8006e74 <__NVIC_EnableIRQ+0x38>)
 8006e56:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006e5a:	095b      	lsrs	r3, r3, #5
 8006e5c:	2001      	movs	r0, #1
 8006e5e:	fa00 f202 	lsl.w	r2, r0, r2
 8006e62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8006e66:	bf00      	nop
 8006e68:	370c      	adds	r7, #12
 8006e6a:	46bd      	mov	sp, r7
 8006e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e70:	4770      	bx	lr
 8006e72:	bf00      	nop
 8006e74:	e000e100 	.word	0xe000e100

08006e78 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8006e78:	b480      	push	{r7}
 8006e7a:	b083      	sub	sp, #12
 8006e7c:	af00      	add	r7, sp, #0
 8006e7e:	4603      	mov	r3, r0
 8006e80:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8006e82:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	db12      	blt.n	8006eb0 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006e8a:	88fb      	ldrh	r3, [r7, #6]
 8006e8c:	f003 021f 	and.w	r2, r3, #31
 8006e90:	490a      	ldr	r1, [pc, #40]	; (8006ebc <__NVIC_DisableIRQ+0x44>)
 8006e92:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006e96:	095b      	lsrs	r3, r3, #5
 8006e98:	2001      	movs	r0, #1
 8006e9a:	fa00 f202 	lsl.w	r2, r0, r2
 8006e9e:	3320      	adds	r3, #32
 8006ea0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8006ea4:	f3bf 8f4f 	dsb	sy
}
 8006ea8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8006eaa:	f3bf 8f6f 	isb	sy
}
 8006eae:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8006eb0:	bf00      	nop
 8006eb2:	370c      	adds	r7, #12
 8006eb4:	46bd      	mov	sp, r7
 8006eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eba:	4770      	bx	lr
 8006ebc:	e000e100 	.word	0xe000e100

08006ec0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006ec0:	b480      	push	{r7}
 8006ec2:	b083      	sub	sp, #12
 8006ec4:	af00      	add	r7, sp, #0
 8006ec6:	4603      	mov	r3, r0
 8006ec8:	6039      	str	r1, [r7, #0]
 8006eca:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8006ecc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	db0a      	blt.n	8006eea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006ed4:	683b      	ldr	r3, [r7, #0]
 8006ed6:	b2da      	uxtb	r2, r3
 8006ed8:	490c      	ldr	r1, [pc, #48]	; (8006f0c <__NVIC_SetPriority+0x4c>)
 8006eda:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006ede:	0112      	lsls	r2, r2, #4
 8006ee0:	b2d2      	uxtb	r2, r2
 8006ee2:	440b      	add	r3, r1
 8006ee4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8006ee8:	e00a      	b.n	8006f00 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006eea:	683b      	ldr	r3, [r7, #0]
 8006eec:	b2da      	uxtb	r2, r3
 8006eee:	4908      	ldr	r1, [pc, #32]	; (8006f10 <__NVIC_SetPriority+0x50>)
 8006ef0:	88fb      	ldrh	r3, [r7, #6]
 8006ef2:	f003 030f 	and.w	r3, r3, #15
 8006ef6:	3b04      	subs	r3, #4
 8006ef8:	0112      	lsls	r2, r2, #4
 8006efa:	b2d2      	uxtb	r2, r2
 8006efc:	440b      	add	r3, r1
 8006efe:	761a      	strb	r2, [r3, #24]
}
 8006f00:	bf00      	nop
 8006f02:	370c      	adds	r7, #12
 8006f04:	46bd      	mov	sp, r7
 8006f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f0a:	4770      	bx	lr
 8006f0c:	e000e100 	.word	0xe000e100
 8006f10:	e000ed00 	.word	0xe000ed00

08006f14 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006f14:	b480      	push	{r7}
 8006f16:	b089      	sub	sp, #36	; 0x24
 8006f18:	af00      	add	r7, sp, #0
 8006f1a:	60f8      	str	r0, [r7, #12]
 8006f1c:	60b9      	str	r1, [r7, #8]
 8006f1e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	f003 0307 	and.w	r3, r3, #7
 8006f26:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006f28:	69fb      	ldr	r3, [r7, #28]
 8006f2a:	f1c3 0307 	rsb	r3, r3, #7
 8006f2e:	2b04      	cmp	r3, #4
 8006f30:	bf28      	it	cs
 8006f32:	2304      	movcs	r3, #4
 8006f34:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006f36:	69fb      	ldr	r3, [r7, #28]
 8006f38:	3304      	adds	r3, #4
 8006f3a:	2b06      	cmp	r3, #6
 8006f3c:	d902      	bls.n	8006f44 <NVIC_EncodePriority+0x30>
 8006f3e:	69fb      	ldr	r3, [r7, #28]
 8006f40:	3b03      	subs	r3, #3
 8006f42:	e000      	b.n	8006f46 <NVIC_EncodePriority+0x32>
 8006f44:	2300      	movs	r3, #0
 8006f46:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006f48:	f04f 32ff 	mov.w	r2, #4294967295
 8006f4c:	69bb      	ldr	r3, [r7, #24]
 8006f4e:	fa02 f303 	lsl.w	r3, r2, r3
 8006f52:	43da      	mvns	r2, r3
 8006f54:	68bb      	ldr	r3, [r7, #8]
 8006f56:	401a      	ands	r2, r3
 8006f58:	697b      	ldr	r3, [r7, #20]
 8006f5a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006f5c:	f04f 31ff 	mov.w	r1, #4294967295
 8006f60:	697b      	ldr	r3, [r7, #20]
 8006f62:	fa01 f303 	lsl.w	r3, r1, r3
 8006f66:	43d9      	mvns	r1, r3
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006f6c:	4313      	orrs	r3, r2
         );
}
 8006f6e:	4618      	mov	r0, r3
 8006f70:	3724      	adds	r7, #36	; 0x24
 8006f72:	46bd      	mov	sp, r7
 8006f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f78:	4770      	bx	lr
	...

08006f7c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8006f7c:	b580      	push	{r7, lr}
 8006f7e:	b082      	sub	sp, #8
 8006f80:	af00      	add	r7, sp, #0
 8006f82:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	3b01      	subs	r3, #1
 8006f88:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006f8c:	d301      	bcc.n	8006f92 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8006f8e:	2301      	movs	r3, #1
 8006f90:	e00f      	b.n	8006fb2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8006f92:	4a0a      	ldr	r2, [pc, #40]	; (8006fbc <SysTick_Config+0x40>)
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	3b01      	subs	r3, #1
 8006f98:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8006f9a:	210f      	movs	r1, #15
 8006f9c:	f04f 30ff 	mov.w	r0, #4294967295
 8006fa0:	f7ff ff8e 	bl	8006ec0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006fa4:	4b05      	ldr	r3, [pc, #20]	; (8006fbc <SysTick_Config+0x40>)
 8006fa6:	2200      	movs	r2, #0
 8006fa8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006faa:	4b04      	ldr	r3, [pc, #16]	; (8006fbc <SysTick_Config+0x40>)
 8006fac:	2207      	movs	r2, #7
 8006fae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006fb0:	2300      	movs	r3, #0
}
 8006fb2:	4618      	mov	r0, r3
 8006fb4:	3708      	adds	r7, #8
 8006fb6:	46bd      	mov	sp, r7
 8006fb8:	bd80      	pop	{r7, pc}
 8006fba:	bf00      	nop
 8006fbc:	e000e010 	.word	0xe000e010

08006fc0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006fc0:	b580      	push	{r7, lr}
 8006fc2:	b082      	sub	sp, #8
 8006fc4:	af00      	add	r7, sp, #0
 8006fc6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006fc8:	6878      	ldr	r0, [r7, #4]
 8006fca:	f7ff ff05 	bl	8006dd8 <__NVIC_SetPriorityGrouping>
}
 8006fce:	bf00      	nop
 8006fd0:	3708      	adds	r7, #8
 8006fd2:	46bd      	mov	sp, r7
 8006fd4:	bd80      	pop	{r7, pc}

08006fd6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006fd6:	b580      	push	{r7, lr}
 8006fd8:	b086      	sub	sp, #24
 8006fda:	af00      	add	r7, sp, #0
 8006fdc:	4603      	mov	r3, r0
 8006fde:	60b9      	str	r1, [r7, #8]
 8006fe0:	607a      	str	r2, [r7, #4]
 8006fe2:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8006fe4:	f7ff ff1c 	bl	8006e20 <__NVIC_GetPriorityGrouping>
 8006fe8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006fea:	687a      	ldr	r2, [r7, #4]
 8006fec:	68b9      	ldr	r1, [r7, #8]
 8006fee:	6978      	ldr	r0, [r7, #20]
 8006ff0:	f7ff ff90 	bl	8006f14 <NVIC_EncodePriority>
 8006ff4:	4602      	mov	r2, r0
 8006ff6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8006ffa:	4611      	mov	r1, r2
 8006ffc:	4618      	mov	r0, r3
 8006ffe:	f7ff ff5f 	bl	8006ec0 <__NVIC_SetPriority>
}
 8007002:	bf00      	nop
 8007004:	3718      	adds	r7, #24
 8007006:	46bd      	mov	sp, r7
 8007008:	bd80      	pop	{r7, pc}

0800700a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800700a:	b580      	push	{r7, lr}
 800700c:	b082      	sub	sp, #8
 800700e:	af00      	add	r7, sp, #0
 8007010:	4603      	mov	r3, r0
 8007012:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8007014:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007018:	4618      	mov	r0, r3
 800701a:	f7ff ff0f 	bl	8006e3c <__NVIC_EnableIRQ>
}
 800701e:	bf00      	nop
 8007020:	3708      	adds	r7, #8
 8007022:	46bd      	mov	sp, r7
 8007024:	bd80      	pop	{r7, pc}

08007026 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8007026:	b580      	push	{r7, lr}
 8007028:	b082      	sub	sp, #8
 800702a:	af00      	add	r7, sp, #0
 800702c:	4603      	mov	r3, r0
 800702e:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8007030:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007034:	4618      	mov	r0, r3
 8007036:	f7ff ff1f 	bl	8006e78 <__NVIC_DisableIRQ>
}
 800703a:	bf00      	nop
 800703c:	3708      	adds	r7, #8
 800703e:	46bd      	mov	sp, r7
 8007040:	bd80      	pop	{r7, pc}

08007042 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8007042:	b580      	push	{r7, lr}
 8007044:	b082      	sub	sp, #8
 8007046:	af00      	add	r7, sp, #0
 8007048:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800704a:	6878      	ldr	r0, [r7, #4]
 800704c:	f7ff ff96 	bl	8006f7c <SysTick_Config>
 8007050:	4603      	mov	r3, r0
}
 8007052:	4618      	mov	r0, r3
 8007054:	3708      	adds	r7, #8
 8007056:	46bd      	mov	sp, r7
 8007058:	bd80      	pop	{r7, pc}
	...

0800705c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800705c:	b580      	push	{r7, lr}
 800705e:	b086      	sub	sp, #24
 8007060:	af00      	add	r7, sp, #0
 8007062:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8007064:	f7ff fe7c 	bl	8006d60 <HAL_GetTick>
 8007068:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	2b00      	cmp	r3, #0
 800706e:	d101      	bne.n	8007074 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8007070:	2301      	movs	r3, #1
 8007072:	e2dc      	b.n	800762e <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800707a:	b2db      	uxtb	r3, r3
 800707c:	2b02      	cmp	r3, #2
 800707e:	d008      	beq.n	8007092 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	2280      	movs	r2, #128	; 0x80
 8007084:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	2200      	movs	r2, #0
 800708a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 800708e:	2301      	movs	r3, #1
 8007090:	e2cd      	b.n	800762e <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	4a76      	ldr	r2, [pc, #472]	; (8007270 <HAL_DMA_Abort+0x214>)
 8007098:	4293      	cmp	r3, r2
 800709a:	d04a      	beq.n	8007132 <HAL_DMA_Abort+0xd6>
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	4a74      	ldr	r2, [pc, #464]	; (8007274 <HAL_DMA_Abort+0x218>)
 80070a2:	4293      	cmp	r3, r2
 80070a4:	d045      	beq.n	8007132 <HAL_DMA_Abort+0xd6>
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	4a73      	ldr	r2, [pc, #460]	; (8007278 <HAL_DMA_Abort+0x21c>)
 80070ac:	4293      	cmp	r3, r2
 80070ae:	d040      	beq.n	8007132 <HAL_DMA_Abort+0xd6>
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	4a71      	ldr	r2, [pc, #452]	; (800727c <HAL_DMA_Abort+0x220>)
 80070b6:	4293      	cmp	r3, r2
 80070b8:	d03b      	beq.n	8007132 <HAL_DMA_Abort+0xd6>
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	4a70      	ldr	r2, [pc, #448]	; (8007280 <HAL_DMA_Abort+0x224>)
 80070c0:	4293      	cmp	r3, r2
 80070c2:	d036      	beq.n	8007132 <HAL_DMA_Abort+0xd6>
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	4a6e      	ldr	r2, [pc, #440]	; (8007284 <HAL_DMA_Abort+0x228>)
 80070ca:	4293      	cmp	r3, r2
 80070cc:	d031      	beq.n	8007132 <HAL_DMA_Abort+0xd6>
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	4a6d      	ldr	r2, [pc, #436]	; (8007288 <HAL_DMA_Abort+0x22c>)
 80070d4:	4293      	cmp	r3, r2
 80070d6:	d02c      	beq.n	8007132 <HAL_DMA_Abort+0xd6>
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	4a6b      	ldr	r2, [pc, #428]	; (800728c <HAL_DMA_Abort+0x230>)
 80070de:	4293      	cmp	r3, r2
 80070e0:	d027      	beq.n	8007132 <HAL_DMA_Abort+0xd6>
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	4a6a      	ldr	r2, [pc, #424]	; (8007290 <HAL_DMA_Abort+0x234>)
 80070e8:	4293      	cmp	r3, r2
 80070ea:	d022      	beq.n	8007132 <HAL_DMA_Abort+0xd6>
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	4a68      	ldr	r2, [pc, #416]	; (8007294 <HAL_DMA_Abort+0x238>)
 80070f2:	4293      	cmp	r3, r2
 80070f4:	d01d      	beq.n	8007132 <HAL_DMA_Abort+0xd6>
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	4a67      	ldr	r2, [pc, #412]	; (8007298 <HAL_DMA_Abort+0x23c>)
 80070fc:	4293      	cmp	r3, r2
 80070fe:	d018      	beq.n	8007132 <HAL_DMA_Abort+0xd6>
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	4a65      	ldr	r2, [pc, #404]	; (800729c <HAL_DMA_Abort+0x240>)
 8007106:	4293      	cmp	r3, r2
 8007108:	d013      	beq.n	8007132 <HAL_DMA_Abort+0xd6>
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	4a64      	ldr	r2, [pc, #400]	; (80072a0 <HAL_DMA_Abort+0x244>)
 8007110:	4293      	cmp	r3, r2
 8007112:	d00e      	beq.n	8007132 <HAL_DMA_Abort+0xd6>
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	4a62      	ldr	r2, [pc, #392]	; (80072a4 <HAL_DMA_Abort+0x248>)
 800711a:	4293      	cmp	r3, r2
 800711c:	d009      	beq.n	8007132 <HAL_DMA_Abort+0xd6>
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	4a61      	ldr	r2, [pc, #388]	; (80072a8 <HAL_DMA_Abort+0x24c>)
 8007124:	4293      	cmp	r3, r2
 8007126:	d004      	beq.n	8007132 <HAL_DMA_Abort+0xd6>
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	4a5f      	ldr	r2, [pc, #380]	; (80072ac <HAL_DMA_Abort+0x250>)
 800712e:	4293      	cmp	r3, r2
 8007130:	d101      	bne.n	8007136 <HAL_DMA_Abort+0xda>
 8007132:	2301      	movs	r3, #1
 8007134:	e000      	b.n	8007138 <HAL_DMA_Abort+0xdc>
 8007136:	2300      	movs	r3, #0
 8007138:	2b00      	cmp	r3, #0
 800713a:	d013      	beq.n	8007164 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	681a      	ldr	r2, [r3, #0]
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	f022 021e 	bic.w	r2, r2, #30
 800714a:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	695a      	ldr	r2, [r3, #20]
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800715a:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	617b      	str	r3, [r7, #20]
 8007162:	e00a      	b.n	800717a <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	681a      	ldr	r2, [r3, #0]
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	f022 020e 	bic.w	r2, r2, #14
 8007172:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	4a3c      	ldr	r2, [pc, #240]	; (8007270 <HAL_DMA_Abort+0x214>)
 8007180:	4293      	cmp	r3, r2
 8007182:	d072      	beq.n	800726a <HAL_DMA_Abort+0x20e>
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	4a3a      	ldr	r2, [pc, #232]	; (8007274 <HAL_DMA_Abort+0x218>)
 800718a:	4293      	cmp	r3, r2
 800718c:	d06d      	beq.n	800726a <HAL_DMA_Abort+0x20e>
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	4a39      	ldr	r2, [pc, #228]	; (8007278 <HAL_DMA_Abort+0x21c>)
 8007194:	4293      	cmp	r3, r2
 8007196:	d068      	beq.n	800726a <HAL_DMA_Abort+0x20e>
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	4a37      	ldr	r2, [pc, #220]	; (800727c <HAL_DMA_Abort+0x220>)
 800719e:	4293      	cmp	r3, r2
 80071a0:	d063      	beq.n	800726a <HAL_DMA_Abort+0x20e>
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	4a36      	ldr	r2, [pc, #216]	; (8007280 <HAL_DMA_Abort+0x224>)
 80071a8:	4293      	cmp	r3, r2
 80071aa:	d05e      	beq.n	800726a <HAL_DMA_Abort+0x20e>
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	4a34      	ldr	r2, [pc, #208]	; (8007284 <HAL_DMA_Abort+0x228>)
 80071b2:	4293      	cmp	r3, r2
 80071b4:	d059      	beq.n	800726a <HAL_DMA_Abort+0x20e>
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	4a33      	ldr	r2, [pc, #204]	; (8007288 <HAL_DMA_Abort+0x22c>)
 80071bc:	4293      	cmp	r3, r2
 80071be:	d054      	beq.n	800726a <HAL_DMA_Abort+0x20e>
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	4a31      	ldr	r2, [pc, #196]	; (800728c <HAL_DMA_Abort+0x230>)
 80071c6:	4293      	cmp	r3, r2
 80071c8:	d04f      	beq.n	800726a <HAL_DMA_Abort+0x20e>
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	4a30      	ldr	r2, [pc, #192]	; (8007290 <HAL_DMA_Abort+0x234>)
 80071d0:	4293      	cmp	r3, r2
 80071d2:	d04a      	beq.n	800726a <HAL_DMA_Abort+0x20e>
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	4a2e      	ldr	r2, [pc, #184]	; (8007294 <HAL_DMA_Abort+0x238>)
 80071da:	4293      	cmp	r3, r2
 80071dc:	d045      	beq.n	800726a <HAL_DMA_Abort+0x20e>
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	4a2d      	ldr	r2, [pc, #180]	; (8007298 <HAL_DMA_Abort+0x23c>)
 80071e4:	4293      	cmp	r3, r2
 80071e6:	d040      	beq.n	800726a <HAL_DMA_Abort+0x20e>
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	4a2b      	ldr	r2, [pc, #172]	; (800729c <HAL_DMA_Abort+0x240>)
 80071ee:	4293      	cmp	r3, r2
 80071f0:	d03b      	beq.n	800726a <HAL_DMA_Abort+0x20e>
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	4a2a      	ldr	r2, [pc, #168]	; (80072a0 <HAL_DMA_Abort+0x244>)
 80071f8:	4293      	cmp	r3, r2
 80071fa:	d036      	beq.n	800726a <HAL_DMA_Abort+0x20e>
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	4a28      	ldr	r2, [pc, #160]	; (80072a4 <HAL_DMA_Abort+0x248>)
 8007202:	4293      	cmp	r3, r2
 8007204:	d031      	beq.n	800726a <HAL_DMA_Abort+0x20e>
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	4a27      	ldr	r2, [pc, #156]	; (80072a8 <HAL_DMA_Abort+0x24c>)
 800720c:	4293      	cmp	r3, r2
 800720e:	d02c      	beq.n	800726a <HAL_DMA_Abort+0x20e>
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	4a25      	ldr	r2, [pc, #148]	; (80072ac <HAL_DMA_Abort+0x250>)
 8007216:	4293      	cmp	r3, r2
 8007218:	d027      	beq.n	800726a <HAL_DMA_Abort+0x20e>
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	4a24      	ldr	r2, [pc, #144]	; (80072b0 <HAL_DMA_Abort+0x254>)
 8007220:	4293      	cmp	r3, r2
 8007222:	d022      	beq.n	800726a <HAL_DMA_Abort+0x20e>
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	4a22      	ldr	r2, [pc, #136]	; (80072b4 <HAL_DMA_Abort+0x258>)
 800722a:	4293      	cmp	r3, r2
 800722c:	d01d      	beq.n	800726a <HAL_DMA_Abort+0x20e>
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	4a21      	ldr	r2, [pc, #132]	; (80072b8 <HAL_DMA_Abort+0x25c>)
 8007234:	4293      	cmp	r3, r2
 8007236:	d018      	beq.n	800726a <HAL_DMA_Abort+0x20e>
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	4a1f      	ldr	r2, [pc, #124]	; (80072bc <HAL_DMA_Abort+0x260>)
 800723e:	4293      	cmp	r3, r2
 8007240:	d013      	beq.n	800726a <HAL_DMA_Abort+0x20e>
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	4a1e      	ldr	r2, [pc, #120]	; (80072c0 <HAL_DMA_Abort+0x264>)
 8007248:	4293      	cmp	r3, r2
 800724a:	d00e      	beq.n	800726a <HAL_DMA_Abort+0x20e>
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	4a1c      	ldr	r2, [pc, #112]	; (80072c4 <HAL_DMA_Abort+0x268>)
 8007252:	4293      	cmp	r3, r2
 8007254:	d009      	beq.n	800726a <HAL_DMA_Abort+0x20e>
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	4a1b      	ldr	r2, [pc, #108]	; (80072c8 <HAL_DMA_Abort+0x26c>)
 800725c:	4293      	cmp	r3, r2
 800725e:	d004      	beq.n	800726a <HAL_DMA_Abort+0x20e>
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	4a19      	ldr	r2, [pc, #100]	; (80072cc <HAL_DMA_Abort+0x270>)
 8007266:	4293      	cmp	r3, r2
 8007268:	d132      	bne.n	80072d0 <HAL_DMA_Abort+0x274>
 800726a:	2301      	movs	r3, #1
 800726c:	e031      	b.n	80072d2 <HAL_DMA_Abort+0x276>
 800726e:	bf00      	nop
 8007270:	40020010 	.word	0x40020010
 8007274:	40020028 	.word	0x40020028
 8007278:	40020040 	.word	0x40020040
 800727c:	40020058 	.word	0x40020058
 8007280:	40020070 	.word	0x40020070
 8007284:	40020088 	.word	0x40020088
 8007288:	400200a0 	.word	0x400200a0
 800728c:	400200b8 	.word	0x400200b8
 8007290:	40020410 	.word	0x40020410
 8007294:	40020428 	.word	0x40020428
 8007298:	40020440 	.word	0x40020440
 800729c:	40020458 	.word	0x40020458
 80072a0:	40020470 	.word	0x40020470
 80072a4:	40020488 	.word	0x40020488
 80072a8:	400204a0 	.word	0x400204a0
 80072ac:	400204b8 	.word	0x400204b8
 80072b0:	58025408 	.word	0x58025408
 80072b4:	5802541c 	.word	0x5802541c
 80072b8:	58025430 	.word	0x58025430
 80072bc:	58025444 	.word	0x58025444
 80072c0:	58025458 	.word	0x58025458
 80072c4:	5802546c 	.word	0x5802546c
 80072c8:	58025480 	.word	0x58025480
 80072cc:	58025494 	.word	0x58025494
 80072d0:	2300      	movs	r3, #0
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	d007      	beq.n	80072e6 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80072da:	681a      	ldr	r2, [r3, #0]
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80072e0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80072e4:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	4a6d      	ldr	r2, [pc, #436]	; (80074a0 <HAL_DMA_Abort+0x444>)
 80072ec:	4293      	cmp	r3, r2
 80072ee:	d04a      	beq.n	8007386 <HAL_DMA_Abort+0x32a>
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	4a6b      	ldr	r2, [pc, #428]	; (80074a4 <HAL_DMA_Abort+0x448>)
 80072f6:	4293      	cmp	r3, r2
 80072f8:	d045      	beq.n	8007386 <HAL_DMA_Abort+0x32a>
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	4a6a      	ldr	r2, [pc, #424]	; (80074a8 <HAL_DMA_Abort+0x44c>)
 8007300:	4293      	cmp	r3, r2
 8007302:	d040      	beq.n	8007386 <HAL_DMA_Abort+0x32a>
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	4a68      	ldr	r2, [pc, #416]	; (80074ac <HAL_DMA_Abort+0x450>)
 800730a:	4293      	cmp	r3, r2
 800730c:	d03b      	beq.n	8007386 <HAL_DMA_Abort+0x32a>
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	4a67      	ldr	r2, [pc, #412]	; (80074b0 <HAL_DMA_Abort+0x454>)
 8007314:	4293      	cmp	r3, r2
 8007316:	d036      	beq.n	8007386 <HAL_DMA_Abort+0x32a>
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	4a65      	ldr	r2, [pc, #404]	; (80074b4 <HAL_DMA_Abort+0x458>)
 800731e:	4293      	cmp	r3, r2
 8007320:	d031      	beq.n	8007386 <HAL_DMA_Abort+0x32a>
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	4a64      	ldr	r2, [pc, #400]	; (80074b8 <HAL_DMA_Abort+0x45c>)
 8007328:	4293      	cmp	r3, r2
 800732a:	d02c      	beq.n	8007386 <HAL_DMA_Abort+0x32a>
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	4a62      	ldr	r2, [pc, #392]	; (80074bc <HAL_DMA_Abort+0x460>)
 8007332:	4293      	cmp	r3, r2
 8007334:	d027      	beq.n	8007386 <HAL_DMA_Abort+0x32a>
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	4a61      	ldr	r2, [pc, #388]	; (80074c0 <HAL_DMA_Abort+0x464>)
 800733c:	4293      	cmp	r3, r2
 800733e:	d022      	beq.n	8007386 <HAL_DMA_Abort+0x32a>
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	4a5f      	ldr	r2, [pc, #380]	; (80074c4 <HAL_DMA_Abort+0x468>)
 8007346:	4293      	cmp	r3, r2
 8007348:	d01d      	beq.n	8007386 <HAL_DMA_Abort+0x32a>
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	4a5e      	ldr	r2, [pc, #376]	; (80074c8 <HAL_DMA_Abort+0x46c>)
 8007350:	4293      	cmp	r3, r2
 8007352:	d018      	beq.n	8007386 <HAL_DMA_Abort+0x32a>
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	4a5c      	ldr	r2, [pc, #368]	; (80074cc <HAL_DMA_Abort+0x470>)
 800735a:	4293      	cmp	r3, r2
 800735c:	d013      	beq.n	8007386 <HAL_DMA_Abort+0x32a>
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	4a5b      	ldr	r2, [pc, #364]	; (80074d0 <HAL_DMA_Abort+0x474>)
 8007364:	4293      	cmp	r3, r2
 8007366:	d00e      	beq.n	8007386 <HAL_DMA_Abort+0x32a>
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	4a59      	ldr	r2, [pc, #356]	; (80074d4 <HAL_DMA_Abort+0x478>)
 800736e:	4293      	cmp	r3, r2
 8007370:	d009      	beq.n	8007386 <HAL_DMA_Abort+0x32a>
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	4a58      	ldr	r2, [pc, #352]	; (80074d8 <HAL_DMA_Abort+0x47c>)
 8007378:	4293      	cmp	r3, r2
 800737a:	d004      	beq.n	8007386 <HAL_DMA_Abort+0x32a>
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	4a56      	ldr	r2, [pc, #344]	; (80074dc <HAL_DMA_Abort+0x480>)
 8007382:	4293      	cmp	r3, r2
 8007384:	d108      	bne.n	8007398 <HAL_DMA_Abort+0x33c>
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	681a      	ldr	r2, [r3, #0]
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	f022 0201 	bic.w	r2, r2, #1
 8007394:	601a      	str	r2, [r3, #0]
 8007396:	e007      	b.n	80073a8 <HAL_DMA_Abort+0x34c>
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	681a      	ldr	r2, [r3, #0]
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	f022 0201 	bic.w	r2, r2, #1
 80073a6:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80073a8:	e013      	b.n	80073d2 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80073aa:	f7ff fcd9 	bl	8006d60 <HAL_GetTick>
 80073ae:	4602      	mov	r2, r0
 80073b0:	693b      	ldr	r3, [r7, #16]
 80073b2:	1ad3      	subs	r3, r2, r3
 80073b4:	2b05      	cmp	r3, #5
 80073b6:	d90c      	bls.n	80073d2 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	2220      	movs	r2, #32
 80073bc:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	2203      	movs	r2, #3
 80073c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	2200      	movs	r2, #0
 80073ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 80073ce:	2301      	movs	r3, #1
 80073d0:	e12d      	b.n	800762e <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80073d2:	697b      	ldr	r3, [r7, #20]
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	f003 0301 	and.w	r3, r3, #1
 80073da:	2b00      	cmp	r3, #0
 80073dc:	d1e5      	bne.n	80073aa <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	4a2f      	ldr	r2, [pc, #188]	; (80074a0 <HAL_DMA_Abort+0x444>)
 80073e4:	4293      	cmp	r3, r2
 80073e6:	d04a      	beq.n	800747e <HAL_DMA_Abort+0x422>
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	4a2d      	ldr	r2, [pc, #180]	; (80074a4 <HAL_DMA_Abort+0x448>)
 80073ee:	4293      	cmp	r3, r2
 80073f0:	d045      	beq.n	800747e <HAL_DMA_Abort+0x422>
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	4a2c      	ldr	r2, [pc, #176]	; (80074a8 <HAL_DMA_Abort+0x44c>)
 80073f8:	4293      	cmp	r3, r2
 80073fa:	d040      	beq.n	800747e <HAL_DMA_Abort+0x422>
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	4a2a      	ldr	r2, [pc, #168]	; (80074ac <HAL_DMA_Abort+0x450>)
 8007402:	4293      	cmp	r3, r2
 8007404:	d03b      	beq.n	800747e <HAL_DMA_Abort+0x422>
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	4a29      	ldr	r2, [pc, #164]	; (80074b0 <HAL_DMA_Abort+0x454>)
 800740c:	4293      	cmp	r3, r2
 800740e:	d036      	beq.n	800747e <HAL_DMA_Abort+0x422>
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	4a27      	ldr	r2, [pc, #156]	; (80074b4 <HAL_DMA_Abort+0x458>)
 8007416:	4293      	cmp	r3, r2
 8007418:	d031      	beq.n	800747e <HAL_DMA_Abort+0x422>
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	4a26      	ldr	r2, [pc, #152]	; (80074b8 <HAL_DMA_Abort+0x45c>)
 8007420:	4293      	cmp	r3, r2
 8007422:	d02c      	beq.n	800747e <HAL_DMA_Abort+0x422>
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	4a24      	ldr	r2, [pc, #144]	; (80074bc <HAL_DMA_Abort+0x460>)
 800742a:	4293      	cmp	r3, r2
 800742c:	d027      	beq.n	800747e <HAL_DMA_Abort+0x422>
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	4a23      	ldr	r2, [pc, #140]	; (80074c0 <HAL_DMA_Abort+0x464>)
 8007434:	4293      	cmp	r3, r2
 8007436:	d022      	beq.n	800747e <HAL_DMA_Abort+0x422>
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	4a21      	ldr	r2, [pc, #132]	; (80074c4 <HAL_DMA_Abort+0x468>)
 800743e:	4293      	cmp	r3, r2
 8007440:	d01d      	beq.n	800747e <HAL_DMA_Abort+0x422>
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	4a20      	ldr	r2, [pc, #128]	; (80074c8 <HAL_DMA_Abort+0x46c>)
 8007448:	4293      	cmp	r3, r2
 800744a:	d018      	beq.n	800747e <HAL_DMA_Abort+0x422>
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	4a1e      	ldr	r2, [pc, #120]	; (80074cc <HAL_DMA_Abort+0x470>)
 8007452:	4293      	cmp	r3, r2
 8007454:	d013      	beq.n	800747e <HAL_DMA_Abort+0x422>
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	4a1d      	ldr	r2, [pc, #116]	; (80074d0 <HAL_DMA_Abort+0x474>)
 800745c:	4293      	cmp	r3, r2
 800745e:	d00e      	beq.n	800747e <HAL_DMA_Abort+0x422>
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	4a1b      	ldr	r2, [pc, #108]	; (80074d4 <HAL_DMA_Abort+0x478>)
 8007466:	4293      	cmp	r3, r2
 8007468:	d009      	beq.n	800747e <HAL_DMA_Abort+0x422>
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	4a1a      	ldr	r2, [pc, #104]	; (80074d8 <HAL_DMA_Abort+0x47c>)
 8007470:	4293      	cmp	r3, r2
 8007472:	d004      	beq.n	800747e <HAL_DMA_Abort+0x422>
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	4a18      	ldr	r2, [pc, #96]	; (80074dc <HAL_DMA_Abort+0x480>)
 800747a:	4293      	cmp	r3, r2
 800747c:	d101      	bne.n	8007482 <HAL_DMA_Abort+0x426>
 800747e:	2301      	movs	r3, #1
 8007480:	e000      	b.n	8007484 <HAL_DMA_Abort+0x428>
 8007482:	2300      	movs	r3, #0
 8007484:	2b00      	cmp	r3, #0
 8007486:	d02b      	beq.n	80074e0 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800748c:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007492:	f003 031f 	and.w	r3, r3, #31
 8007496:	223f      	movs	r2, #63	; 0x3f
 8007498:	409a      	lsls	r2, r3
 800749a:	68bb      	ldr	r3, [r7, #8]
 800749c:	609a      	str	r2, [r3, #8]
 800749e:	e02a      	b.n	80074f6 <HAL_DMA_Abort+0x49a>
 80074a0:	40020010 	.word	0x40020010
 80074a4:	40020028 	.word	0x40020028
 80074a8:	40020040 	.word	0x40020040
 80074ac:	40020058 	.word	0x40020058
 80074b0:	40020070 	.word	0x40020070
 80074b4:	40020088 	.word	0x40020088
 80074b8:	400200a0 	.word	0x400200a0
 80074bc:	400200b8 	.word	0x400200b8
 80074c0:	40020410 	.word	0x40020410
 80074c4:	40020428 	.word	0x40020428
 80074c8:	40020440 	.word	0x40020440
 80074cc:	40020458 	.word	0x40020458
 80074d0:	40020470 	.word	0x40020470
 80074d4:	40020488 	.word	0x40020488
 80074d8:	400204a0 	.word	0x400204a0
 80074dc:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80074e4:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80074ea:	f003 031f 	and.w	r3, r3, #31
 80074ee:	2201      	movs	r2, #1
 80074f0:	409a      	lsls	r2, r3
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	4a4f      	ldr	r2, [pc, #316]	; (8007638 <HAL_DMA_Abort+0x5dc>)
 80074fc:	4293      	cmp	r3, r2
 80074fe:	d072      	beq.n	80075e6 <HAL_DMA_Abort+0x58a>
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	4a4d      	ldr	r2, [pc, #308]	; (800763c <HAL_DMA_Abort+0x5e0>)
 8007506:	4293      	cmp	r3, r2
 8007508:	d06d      	beq.n	80075e6 <HAL_DMA_Abort+0x58a>
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	4a4c      	ldr	r2, [pc, #304]	; (8007640 <HAL_DMA_Abort+0x5e4>)
 8007510:	4293      	cmp	r3, r2
 8007512:	d068      	beq.n	80075e6 <HAL_DMA_Abort+0x58a>
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	4a4a      	ldr	r2, [pc, #296]	; (8007644 <HAL_DMA_Abort+0x5e8>)
 800751a:	4293      	cmp	r3, r2
 800751c:	d063      	beq.n	80075e6 <HAL_DMA_Abort+0x58a>
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	4a49      	ldr	r2, [pc, #292]	; (8007648 <HAL_DMA_Abort+0x5ec>)
 8007524:	4293      	cmp	r3, r2
 8007526:	d05e      	beq.n	80075e6 <HAL_DMA_Abort+0x58a>
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	4a47      	ldr	r2, [pc, #284]	; (800764c <HAL_DMA_Abort+0x5f0>)
 800752e:	4293      	cmp	r3, r2
 8007530:	d059      	beq.n	80075e6 <HAL_DMA_Abort+0x58a>
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	4a46      	ldr	r2, [pc, #280]	; (8007650 <HAL_DMA_Abort+0x5f4>)
 8007538:	4293      	cmp	r3, r2
 800753a:	d054      	beq.n	80075e6 <HAL_DMA_Abort+0x58a>
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	4a44      	ldr	r2, [pc, #272]	; (8007654 <HAL_DMA_Abort+0x5f8>)
 8007542:	4293      	cmp	r3, r2
 8007544:	d04f      	beq.n	80075e6 <HAL_DMA_Abort+0x58a>
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	4a43      	ldr	r2, [pc, #268]	; (8007658 <HAL_DMA_Abort+0x5fc>)
 800754c:	4293      	cmp	r3, r2
 800754e:	d04a      	beq.n	80075e6 <HAL_DMA_Abort+0x58a>
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	4a41      	ldr	r2, [pc, #260]	; (800765c <HAL_DMA_Abort+0x600>)
 8007556:	4293      	cmp	r3, r2
 8007558:	d045      	beq.n	80075e6 <HAL_DMA_Abort+0x58a>
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	4a40      	ldr	r2, [pc, #256]	; (8007660 <HAL_DMA_Abort+0x604>)
 8007560:	4293      	cmp	r3, r2
 8007562:	d040      	beq.n	80075e6 <HAL_DMA_Abort+0x58a>
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	4a3e      	ldr	r2, [pc, #248]	; (8007664 <HAL_DMA_Abort+0x608>)
 800756a:	4293      	cmp	r3, r2
 800756c:	d03b      	beq.n	80075e6 <HAL_DMA_Abort+0x58a>
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	4a3d      	ldr	r2, [pc, #244]	; (8007668 <HAL_DMA_Abort+0x60c>)
 8007574:	4293      	cmp	r3, r2
 8007576:	d036      	beq.n	80075e6 <HAL_DMA_Abort+0x58a>
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	4a3b      	ldr	r2, [pc, #236]	; (800766c <HAL_DMA_Abort+0x610>)
 800757e:	4293      	cmp	r3, r2
 8007580:	d031      	beq.n	80075e6 <HAL_DMA_Abort+0x58a>
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	4a3a      	ldr	r2, [pc, #232]	; (8007670 <HAL_DMA_Abort+0x614>)
 8007588:	4293      	cmp	r3, r2
 800758a:	d02c      	beq.n	80075e6 <HAL_DMA_Abort+0x58a>
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	4a38      	ldr	r2, [pc, #224]	; (8007674 <HAL_DMA_Abort+0x618>)
 8007592:	4293      	cmp	r3, r2
 8007594:	d027      	beq.n	80075e6 <HAL_DMA_Abort+0x58a>
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	4a37      	ldr	r2, [pc, #220]	; (8007678 <HAL_DMA_Abort+0x61c>)
 800759c:	4293      	cmp	r3, r2
 800759e:	d022      	beq.n	80075e6 <HAL_DMA_Abort+0x58a>
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	4a35      	ldr	r2, [pc, #212]	; (800767c <HAL_DMA_Abort+0x620>)
 80075a6:	4293      	cmp	r3, r2
 80075a8:	d01d      	beq.n	80075e6 <HAL_DMA_Abort+0x58a>
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	4a34      	ldr	r2, [pc, #208]	; (8007680 <HAL_DMA_Abort+0x624>)
 80075b0:	4293      	cmp	r3, r2
 80075b2:	d018      	beq.n	80075e6 <HAL_DMA_Abort+0x58a>
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	4a32      	ldr	r2, [pc, #200]	; (8007684 <HAL_DMA_Abort+0x628>)
 80075ba:	4293      	cmp	r3, r2
 80075bc:	d013      	beq.n	80075e6 <HAL_DMA_Abort+0x58a>
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	4a31      	ldr	r2, [pc, #196]	; (8007688 <HAL_DMA_Abort+0x62c>)
 80075c4:	4293      	cmp	r3, r2
 80075c6:	d00e      	beq.n	80075e6 <HAL_DMA_Abort+0x58a>
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	4a2f      	ldr	r2, [pc, #188]	; (800768c <HAL_DMA_Abort+0x630>)
 80075ce:	4293      	cmp	r3, r2
 80075d0:	d009      	beq.n	80075e6 <HAL_DMA_Abort+0x58a>
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	4a2e      	ldr	r2, [pc, #184]	; (8007690 <HAL_DMA_Abort+0x634>)
 80075d8:	4293      	cmp	r3, r2
 80075da:	d004      	beq.n	80075e6 <HAL_DMA_Abort+0x58a>
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	4a2c      	ldr	r2, [pc, #176]	; (8007694 <HAL_DMA_Abort+0x638>)
 80075e2:	4293      	cmp	r3, r2
 80075e4:	d101      	bne.n	80075ea <HAL_DMA_Abort+0x58e>
 80075e6:	2301      	movs	r3, #1
 80075e8:	e000      	b.n	80075ec <HAL_DMA_Abort+0x590>
 80075ea:	2300      	movs	r3, #0
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	d015      	beq.n	800761c <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80075f4:	687a      	ldr	r2, [r7, #4]
 80075f6:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80075f8:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80075fe:	2b00      	cmp	r3, #0
 8007600:	d00c      	beq.n	800761c <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007606:	681a      	ldr	r2, [r3, #0]
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800760c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007610:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007616:	687a      	ldr	r2, [r7, #4]
 8007618:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800761a:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	2201      	movs	r2, #1
 8007620:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	2200      	movs	r2, #0
 8007628:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 800762c:	2300      	movs	r3, #0
}
 800762e:	4618      	mov	r0, r3
 8007630:	3718      	adds	r7, #24
 8007632:	46bd      	mov	sp, r7
 8007634:	bd80      	pop	{r7, pc}
 8007636:	bf00      	nop
 8007638:	40020010 	.word	0x40020010
 800763c:	40020028 	.word	0x40020028
 8007640:	40020040 	.word	0x40020040
 8007644:	40020058 	.word	0x40020058
 8007648:	40020070 	.word	0x40020070
 800764c:	40020088 	.word	0x40020088
 8007650:	400200a0 	.word	0x400200a0
 8007654:	400200b8 	.word	0x400200b8
 8007658:	40020410 	.word	0x40020410
 800765c:	40020428 	.word	0x40020428
 8007660:	40020440 	.word	0x40020440
 8007664:	40020458 	.word	0x40020458
 8007668:	40020470 	.word	0x40020470
 800766c:	40020488 	.word	0x40020488
 8007670:	400204a0 	.word	0x400204a0
 8007674:	400204b8 	.word	0x400204b8
 8007678:	58025408 	.word	0x58025408
 800767c:	5802541c 	.word	0x5802541c
 8007680:	58025430 	.word	0x58025430
 8007684:	58025444 	.word	0x58025444
 8007688:	58025458 	.word	0x58025458
 800768c:	5802546c 	.word	0x5802546c
 8007690:	58025480 	.word	0x58025480
 8007694:	58025494 	.word	0x58025494

08007698 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8007698:	b580      	push	{r7, lr}
 800769a:	b084      	sub	sp, #16
 800769c:	af00      	add	r7, sp, #0
 800769e:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	d101      	bne.n	80076aa <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 80076a6:	2301      	movs	r3, #1
 80076a8:	e237      	b.n	8007b1a <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80076b0:	b2db      	uxtb	r3, r3
 80076b2:	2b02      	cmp	r3, #2
 80076b4:	d004      	beq.n	80076c0 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	2280      	movs	r2, #128	; 0x80
 80076ba:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80076bc:	2301      	movs	r3, #1
 80076be:	e22c      	b.n	8007b1a <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	4a5c      	ldr	r2, [pc, #368]	; (8007838 <HAL_DMA_Abort_IT+0x1a0>)
 80076c6:	4293      	cmp	r3, r2
 80076c8:	d04a      	beq.n	8007760 <HAL_DMA_Abort_IT+0xc8>
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	4a5b      	ldr	r2, [pc, #364]	; (800783c <HAL_DMA_Abort_IT+0x1a4>)
 80076d0:	4293      	cmp	r3, r2
 80076d2:	d045      	beq.n	8007760 <HAL_DMA_Abort_IT+0xc8>
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	4a59      	ldr	r2, [pc, #356]	; (8007840 <HAL_DMA_Abort_IT+0x1a8>)
 80076da:	4293      	cmp	r3, r2
 80076dc:	d040      	beq.n	8007760 <HAL_DMA_Abort_IT+0xc8>
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	4a58      	ldr	r2, [pc, #352]	; (8007844 <HAL_DMA_Abort_IT+0x1ac>)
 80076e4:	4293      	cmp	r3, r2
 80076e6:	d03b      	beq.n	8007760 <HAL_DMA_Abort_IT+0xc8>
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	4a56      	ldr	r2, [pc, #344]	; (8007848 <HAL_DMA_Abort_IT+0x1b0>)
 80076ee:	4293      	cmp	r3, r2
 80076f0:	d036      	beq.n	8007760 <HAL_DMA_Abort_IT+0xc8>
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	4a55      	ldr	r2, [pc, #340]	; (800784c <HAL_DMA_Abort_IT+0x1b4>)
 80076f8:	4293      	cmp	r3, r2
 80076fa:	d031      	beq.n	8007760 <HAL_DMA_Abort_IT+0xc8>
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	4a53      	ldr	r2, [pc, #332]	; (8007850 <HAL_DMA_Abort_IT+0x1b8>)
 8007702:	4293      	cmp	r3, r2
 8007704:	d02c      	beq.n	8007760 <HAL_DMA_Abort_IT+0xc8>
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	4a52      	ldr	r2, [pc, #328]	; (8007854 <HAL_DMA_Abort_IT+0x1bc>)
 800770c:	4293      	cmp	r3, r2
 800770e:	d027      	beq.n	8007760 <HAL_DMA_Abort_IT+0xc8>
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	4a50      	ldr	r2, [pc, #320]	; (8007858 <HAL_DMA_Abort_IT+0x1c0>)
 8007716:	4293      	cmp	r3, r2
 8007718:	d022      	beq.n	8007760 <HAL_DMA_Abort_IT+0xc8>
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	4a4f      	ldr	r2, [pc, #316]	; (800785c <HAL_DMA_Abort_IT+0x1c4>)
 8007720:	4293      	cmp	r3, r2
 8007722:	d01d      	beq.n	8007760 <HAL_DMA_Abort_IT+0xc8>
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	4a4d      	ldr	r2, [pc, #308]	; (8007860 <HAL_DMA_Abort_IT+0x1c8>)
 800772a:	4293      	cmp	r3, r2
 800772c:	d018      	beq.n	8007760 <HAL_DMA_Abort_IT+0xc8>
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	4a4c      	ldr	r2, [pc, #304]	; (8007864 <HAL_DMA_Abort_IT+0x1cc>)
 8007734:	4293      	cmp	r3, r2
 8007736:	d013      	beq.n	8007760 <HAL_DMA_Abort_IT+0xc8>
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	4a4a      	ldr	r2, [pc, #296]	; (8007868 <HAL_DMA_Abort_IT+0x1d0>)
 800773e:	4293      	cmp	r3, r2
 8007740:	d00e      	beq.n	8007760 <HAL_DMA_Abort_IT+0xc8>
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	4a49      	ldr	r2, [pc, #292]	; (800786c <HAL_DMA_Abort_IT+0x1d4>)
 8007748:	4293      	cmp	r3, r2
 800774a:	d009      	beq.n	8007760 <HAL_DMA_Abort_IT+0xc8>
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	4a47      	ldr	r2, [pc, #284]	; (8007870 <HAL_DMA_Abort_IT+0x1d8>)
 8007752:	4293      	cmp	r3, r2
 8007754:	d004      	beq.n	8007760 <HAL_DMA_Abort_IT+0xc8>
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	4a46      	ldr	r2, [pc, #280]	; (8007874 <HAL_DMA_Abort_IT+0x1dc>)
 800775c:	4293      	cmp	r3, r2
 800775e:	d101      	bne.n	8007764 <HAL_DMA_Abort_IT+0xcc>
 8007760:	2301      	movs	r3, #1
 8007762:	e000      	b.n	8007766 <HAL_DMA_Abort_IT+0xce>
 8007764:	2300      	movs	r3, #0
 8007766:	2b00      	cmp	r3, #0
 8007768:	f000 8086 	beq.w	8007878 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	2204      	movs	r2, #4
 8007770:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	4a2f      	ldr	r2, [pc, #188]	; (8007838 <HAL_DMA_Abort_IT+0x1a0>)
 800777a:	4293      	cmp	r3, r2
 800777c:	d04a      	beq.n	8007814 <HAL_DMA_Abort_IT+0x17c>
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	4a2e      	ldr	r2, [pc, #184]	; (800783c <HAL_DMA_Abort_IT+0x1a4>)
 8007784:	4293      	cmp	r3, r2
 8007786:	d045      	beq.n	8007814 <HAL_DMA_Abort_IT+0x17c>
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	4a2c      	ldr	r2, [pc, #176]	; (8007840 <HAL_DMA_Abort_IT+0x1a8>)
 800778e:	4293      	cmp	r3, r2
 8007790:	d040      	beq.n	8007814 <HAL_DMA_Abort_IT+0x17c>
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	4a2b      	ldr	r2, [pc, #172]	; (8007844 <HAL_DMA_Abort_IT+0x1ac>)
 8007798:	4293      	cmp	r3, r2
 800779a:	d03b      	beq.n	8007814 <HAL_DMA_Abort_IT+0x17c>
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	4a29      	ldr	r2, [pc, #164]	; (8007848 <HAL_DMA_Abort_IT+0x1b0>)
 80077a2:	4293      	cmp	r3, r2
 80077a4:	d036      	beq.n	8007814 <HAL_DMA_Abort_IT+0x17c>
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	4a28      	ldr	r2, [pc, #160]	; (800784c <HAL_DMA_Abort_IT+0x1b4>)
 80077ac:	4293      	cmp	r3, r2
 80077ae:	d031      	beq.n	8007814 <HAL_DMA_Abort_IT+0x17c>
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	4a26      	ldr	r2, [pc, #152]	; (8007850 <HAL_DMA_Abort_IT+0x1b8>)
 80077b6:	4293      	cmp	r3, r2
 80077b8:	d02c      	beq.n	8007814 <HAL_DMA_Abort_IT+0x17c>
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	4a25      	ldr	r2, [pc, #148]	; (8007854 <HAL_DMA_Abort_IT+0x1bc>)
 80077c0:	4293      	cmp	r3, r2
 80077c2:	d027      	beq.n	8007814 <HAL_DMA_Abort_IT+0x17c>
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	4a23      	ldr	r2, [pc, #140]	; (8007858 <HAL_DMA_Abort_IT+0x1c0>)
 80077ca:	4293      	cmp	r3, r2
 80077cc:	d022      	beq.n	8007814 <HAL_DMA_Abort_IT+0x17c>
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	4a22      	ldr	r2, [pc, #136]	; (800785c <HAL_DMA_Abort_IT+0x1c4>)
 80077d4:	4293      	cmp	r3, r2
 80077d6:	d01d      	beq.n	8007814 <HAL_DMA_Abort_IT+0x17c>
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	4a20      	ldr	r2, [pc, #128]	; (8007860 <HAL_DMA_Abort_IT+0x1c8>)
 80077de:	4293      	cmp	r3, r2
 80077e0:	d018      	beq.n	8007814 <HAL_DMA_Abort_IT+0x17c>
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	4a1f      	ldr	r2, [pc, #124]	; (8007864 <HAL_DMA_Abort_IT+0x1cc>)
 80077e8:	4293      	cmp	r3, r2
 80077ea:	d013      	beq.n	8007814 <HAL_DMA_Abort_IT+0x17c>
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	4a1d      	ldr	r2, [pc, #116]	; (8007868 <HAL_DMA_Abort_IT+0x1d0>)
 80077f2:	4293      	cmp	r3, r2
 80077f4:	d00e      	beq.n	8007814 <HAL_DMA_Abort_IT+0x17c>
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	4a1c      	ldr	r2, [pc, #112]	; (800786c <HAL_DMA_Abort_IT+0x1d4>)
 80077fc:	4293      	cmp	r3, r2
 80077fe:	d009      	beq.n	8007814 <HAL_DMA_Abort_IT+0x17c>
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	4a1a      	ldr	r2, [pc, #104]	; (8007870 <HAL_DMA_Abort_IT+0x1d8>)
 8007806:	4293      	cmp	r3, r2
 8007808:	d004      	beq.n	8007814 <HAL_DMA_Abort_IT+0x17c>
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	4a19      	ldr	r2, [pc, #100]	; (8007874 <HAL_DMA_Abort_IT+0x1dc>)
 8007810:	4293      	cmp	r3, r2
 8007812:	d108      	bne.n	8007826 <HAL_DMA_Abort_IT+0x18e>
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	681a      	ldr	r2, [r3, #0]
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	f022 0201 	bic.w	r2, r2, #1
 8007822:	601a      	str	r2, [r3, #0]
 8007824:	e178      	b.n	8007b18 <HAL_DMA_Abort_IT+0x480>
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	681a      	ldr	r2, [r3, #0]
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	f022 0201 	bic.w	r2, r2, #1
 8007834:	601a      	str	r2, [r3, #0]
 8007836:	e16f      	b.n	8007b18 <HAL_DMA_Abort_IT+0x480>
 8007838:	40020010 	.word	0x40020010
 800783c:	40020028 	.word	0x40020028
 8007840:	40020040 	.word	0x40020040
 8007844:	40020058 	.word	0x40020058
 8007848:	40020070 	.word	0x40020070
 800784c:	40020088 	.word	0x40020088
 8007850:	400200a0 	.word	0x400200a0
 8007854:	400200b8 	.word	0x400200b8
 8007858:	40020410 	.word	0x40020410
 800785c:	40020428 	.word	0x40020428
 8007860:	40020440 	.word	0x40020440
 8007864:	40020458 	.word	0x40020458
 8007868:	40020470 	.word	0x40020470
 800786c:	40020488 	.word	0x40020488
 8007870:	400204a0 	.word	0x400204a0
 8007874:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	681a      	ldr	r2, [r3, #0]
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	f022 020e 	bic.w	r2, r2, #14
 8007886:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	4a6c      	ldr	r2, [pc, #432]	; (8007a40 <HAL_DMA_Abort_IT+0x3a8>)
 800788e:	4293      	cmp	r3, r2
 8007890:	d04a      	beq.n	8007928 <HAL_DMA_Abort_IT+0x290>
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	4a6b      	ldr	r2, [pc, #428]	; (8007a44 <HAL_DMA_Abort_IT+0x3ac>)
 8007898:	4293      	cmp	r3, r2
 800789a:	d045      	beq.n	8007928 <HAL_DMA_Abort_IT+0x290>
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	4a69      	ldr	r2, [pc, #420]	; (8007a48 <HAL_DMA_Abort_IT+0x3b0>)
 80078a2:	4293      	cmp	r3, r2
 80078a4:	d040      	beq.n	8007928 <HAL_DMA_Abort_IT+0x290>
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	4a68      	ldr	r2, [pc, #416]	; (8007a4c <HAL_DMA_Abort_IT+0x3b4>)
 80078ac:	4293      	cmp	r3, r2
 80078ae:	d03b      	beq.n	8007928 <HAL_DMA_Abort_IT+0x290>
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	4a66      	ldr	r2, [pc, #408]	; (8007a50 <HAL_DMA_Abort_IT+0x3b8>)
 80078b6:	4293      	cmp	r3, r2
 80078b8:	d036      	beq.n	8007928 <HAL_DMA_Abort_IT+0x290>
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	4a65      	ldr	r2, [pc, #404]	; (8007a54 <HAL_DMA_Abort_IT+0x3bc>)
 80078c0:	4293      	cmp	r3, r2
 80078c2:	d031      	beq.n	8007928 <HAL_DMA_Abort_IT+0x290>
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	4a63      	ldr	r2, [pc, #396]	; (8007a58 <HAL_DMA_Abort_IT+0x3c0>)
 80078ca:	4293      	cmp	r3, r2
 80078cc:	d02c      	beq.n	8007928 <HAL_DMA_Abort_IT+0x290>
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	4a62      	ldr	r2, [pc, #392]	; (8007a5c <HAL_DMA_Abort_IT+0x3c4>)
 80078d4:	4293      	cmp	r3, r2
 80078d6:	d027      	beq.n	8007928 <HAL_DMA_Abort_IT+0x290>
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	4a60      	ldr	r2, [pc, #384]	; (8007a60 <HAL_DMA_Abort_IT+0x3c8>)
 80078de:	4293      	cmp	r3, r2
 80078e0:	d022      	beq.n	8007928 <HAL_DMA_Abort_IT+0x290>
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	4a5f      	ldr	r2, [pc, #380]	; (8007a64 <HAL_DMA_Abort_IT+0x3cc>)
 80078e8:	4293      	cmp	r3, r2
 80078ea:	d01d      	beq.n	8007928 <HAL_DMA_Abort_IT+0x290>
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	4a5d      	ldr	r2, [pc, #372]	; (8007a68 <HAL_DMA_Abort_IT+0x3d0>)
 80078f2:	4293      	cmp	r3, r2
 80078f4:	d018      	beq.n	8007928 <HAL_DMA_Abort_IT+0x290>
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	4a5c      	ldr	r2, [pc, #368]	; (8007a6c <HAL_DMA_Abort_IT+0x3d4>)
 80078fc:	4293      	cmp	r3, r2
 80078fe:	d013      	beq.n	8007928 <HAL_DMA_Abort_IT+0x290>
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	4a5a      	ldr	r2, [pc, #360]	; (8007a70 <HAL_DMA_Abort_IT+0x3d8>)
 8007906:	4293      	cmp	r3, r2
 8007908:	d00e      	beq.n	8007928 <HAL_DMA_Abort_IT+0x290>
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	4a59      	ldr	r2, [pc, #356]	; (8007a74 <HAL_DMA_Abort_IT+0x3dc>)
 8007910:	4293      	cmp	r3, r2
 8007912:	d009      	beq.n	8007928 <HAL_DMA_Abort_IT+0x290>
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	4a57      	ldr	r2, [pc, #348]	; (8007a78 <HAL_DMA_Abort_IT+0x3e0>)
 800791a:	4293      	cmp	r3, r2
 800791c:	d004      	beq.n	8007928 <HAL_DMA_Abort_IT+0x290>
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	4a56      	ldr	r2, [pc, #344]	; (8007a7c <HAL_DMA_Abort_IT+0x3e4>)
 8007924:	4293      	cmp	r3, r2
 8007926:	d108      	bne.n	800793a <HAL_DMA_Abort_IT+0x2a2>
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	681a      	ldr	r2, [r3, #0]
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	f022 0201 	bic.w	r2, r2, #1
 8007936:	601a      	str	r2, [r3, #0]
 8007938:	e007      	b.n	800794a <HAL_DMA_Abort_IT+0x2b2>
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	681a      	ldr	r2, [r3, #0]
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	f022 0201 	bic.w	r2, r2, #1
 8007948:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	4a3c      	ldr	r2, [pc, #240]	; (8007a40 <HAL_DMA_Abort_IT+0x3a8>)
 8007950:	4293      	cmp	r3, r2
 8007952:	d072      	beq.n	8007a3a <HAL_DMA_Abort_IT+0x3a2>
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	4a3a      	ldr	r2, [pc, #232]	; (8007a44 <HAL_DMA_Abort_IT+0x3ac>)
 800795a:	4293      	cmp	r3, r2
 800795c:	d06d      	beq.n	8007a3a <HAL_DMA_Abort_IT+0x3a2>
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	4a39      	ldr	r2, [pc, #228]	; (8007a48 <HAL_DMA_Abort_IT+0x3b0>)
 8007964:	4293      	cmp	r3, r2
 8007966:	d068      	beq.n	8007a3a <HAL_DMA_Abort_IT+0x3a2>
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	4a37      	ldr	r2, [pc, #220]	; (8007a4c <HAL_DMA_Abort_IT+0x3b4>)
 800796e:	4293      	cmp	r3, r2
 8007970:	d063      	beq.n	8007a3a <HAL_DMA_Abort_IT+0x3a2>
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	4a36      	ldr	r2, [pc, #216]	; (8007a50 <HAL_DMA_Abort_IT+0x3b8>)
 8007978:	4293      	cmp	r3, r2
 800797a:	d05e      	beq.n	8007a3a <HAL_DMA_Abort_IT+0x3a2>
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	4a34      	ldr	r2, [pc, #208]	; (8007a54 <HAL_DMA_Abort_IT+0x3bc>)
 8007982:	4293      	cmp	r3, r2
 8007984:	d059      	beq.n	8007a3a <HAL_DMA_Abort_IT+0x3a2>
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	4a33      	ldr	r2, [pc, #204]	; (8007a58 <HAL_DMA_Abort_IT+0x3c0>)
 800798c:	4293      	cmp	r3, r2
 800798e:	d054      	beq.n	8007a3a <HAL_DMA_Abort_IT+0x3a2>
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	4a31      	ldr	r2, [pc, #196]	; (8007a5c <HAL_DMA_Abort_IT+0x3c4>)
 8007996:	4293      	cmp	r3, r2
 8007998:	d04f      	beq.n	8007a3a <HAL_DMA_Abort_IT+0x3a2>
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	4a30      	ldr	r2, [pc, #192]	; (8007a60 <HAL_DMA_Abort_IT+0x3c8>)
 80079a0:	4293      	cmp	r3, r2
 80079a2:	d04a      	beq.n	8007a3a <HAL_DMA_Abort_IT+0x3a2>
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	4a2e      	ldr	r2, [pc, #184]	; (8007a64 <HAL_DMA_Abort_IT+0x3cc>)
 80079aa:	4293      	cmp	r3, r2
 80079ac:	d045      	beq.n	8007a3a <HAL_DMA_Abort_IT+0x3a2>
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	4a2d      	ldr	r2, [pc, #180]	; (8007a68 <HAL_DMA_Abort_IT+0x3d0>)
 80079b4:	4293      	cmp	r3, r2
 80079b6:	d040      	beq.n	8007a3a <HAL_DMA_Abort_IT+0x3a2>
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	4a2b      	ldr	r2, [pc, #172]	; (8007a6c <HAL_DMA_Abort_IT+0x3d4>)
 80079be:	4293      	cmp	r3, r2
 80079c0:	d03b      	beq.n	8007a3a <HAL_DMA_Abort_IT+0x3a2>
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	4a2a      	ldr	r2, [pc, #168]	; (8007a70 <HAL_DMA_Abort_IT+0x3d8>)
 80079c8:	4293      	cmp	r3, r2
 80079ca:	d036      	beq.n	8007a3a <HAL_DMA_Abort_IT+0x3a2>
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	4a28      	ldr	r2, [pc, #160]	; (8007a74 <HAL_DMA_Abort_IT+0x3dc>)
 80079d2:	4293      	cmp	r3, r2
 80079d4:	d031      	beq.n	8007a3a <HAL_DMA_Abort_IT+0x3a2>
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	4a27      	ldr	r2, [pc, #156]	; (8007a78 <HAL_DMA_Abort_IT+0x3e0>)
 80079dc:	4293      	cmp	r3, r2
 80079de:	d02c      	beq.n	8007a3a <HAL_DMA_Abort_IT+0x3a2>
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	4a25      	ldr	r2, [pc, #148]	; (8007a7c <HAL_DMA_Abort_IT+0x3e4>)
 80079e6:	4293      	cmp	r3, r2
 80079e8:	d027      	beq.n	8007a3a <HAL_DMA_Abort_IT+0x3a2>
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	4a24      	ldr	r2, [pc, #144]	; (8007a80 <HAL_DMA_Abort_IT+0x3e8>)
 80079f0:	4293      	cmp	r3, r2
 80079f2:	d022      	beq.n	8007a3a <HAL_DMA_Abort_IT+0x3a2>
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	4a22      	ldr	r2, [pc, #136]	; (8007a84 <HAL_DMA_Abort_IT+0x3ec>)
 80079fa:	4293      	cmp	r3, r2
 80079fc:	d01d      	beq.n	8007a3a <HAL_DMA_Abort_IT+0x3a2>
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	4a21      	ldr	r2, [pc, #132]	; (8007a88 <HAL_DMA_Abort_IT+0x3f0>)
 8007a04:	4293      	cmp	r3, r2
 8007a06:	d018      	beq.n	8007a3a <HAL_DMA_Abort_IT+0x3a2>
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	4a1f      	ldr	r2, [pc, #124]	; (8007a8c <HAL_DMA_Abort_IT+0x3f4>)
 8007a0e:	4293      	cmp	r3, r2
 8007a10:	d013      	beq.n	8007a3a <HAL_DMA_Abort_IT+0x3a2>
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	4a1e      	ldr	r2, [pc, #120]	; (8007a90 <HAL_DMA_Abort_IT+0x3f8>)
 8007a18:	4293      	cmp	r3, r2
 8007a1a:	d00e      	beq.n	8007a3a <HAL_DMA_Abort_IT+0x3a2>
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	4a1c      	ldr	r2, [pc, #112]	; (8007a94 <HAL_DMA_Abort_IT+0x3fc>)
 8007a22:	4293      	cmp	r3, r2
 8007a24:	d009      	beq.n	8007a3a <HAL_DMA_Abort_IT+0x3a2>
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	4a1b      	ldr	r2, [pc, #108]	; (8007a98 <HAL_DMA_Abort_IT+0x400>)
 8007a2c:	4293      	cmp	r3, r2
 8007a2e:	d004      	beq.n	8007a3a <HAL_DMA_Abort_IT+0x3a2>
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	4a19      	ldr	r2, [pc, #100]	; (8007a9c <HAL_DMA_Abort_IT+0x404>)
 8007a36:	4293      	cmp	r3, r2
 8007a38:	d132      	bne.n	8007aa0 <HAL_DMA_Abort_IT+0x408>
 8007a3a:	2301      	movs	r3, #1
 8007a3c:	e031      	b.n	8007aa2 <HAL_DMA_Abort_IT+0x40a>
 8007a3e:	bf00      	nop
 8007a40:	40020010 	.word	0x40020010
 8007a44:	40020028 	.word	0x40020028
 8007a48:	40020040 	.word	0x40020040
 8007a4c:	40020058 	.word	0x40020058
 8007a50:	40020070 	.word	0x40020070
 8007a54:	40020088 	.word	0x40020088
 8007a58:	400200a0 	.word	0x400200a0
 8007a5c:	400200b8 	.word	0x400200b8
 8007a60:	40020410 	.word	0x40020410
 8007a64:	40020428 	.word	0x40020428
 8007a68:	40020440 	.word	0x40020440
 8007a6c:	40020458 	.word	0x40020458
 8007a70:	40020470 	.word	0x40020470
 8007a74:	40020488 	.word	0x40020488
 8007a78:	400204a0 	.word	0x400204a0
 8007a7c:	400204b8 	.word	0x400204b8
 8007a80:	58025408 	.word	0x58025408
 8007a84:	5802541c 	.word	0x5802541c
 8007a88:	58025430 	.word	0x58025430
 8007a8c:	58025444 	.word	0x58025444
 8007a90:	58025458 	.word	0x58025458
 8007a94:	5802546c 	.word	0x5802546c
 8007a98:	58025480 	.word	0x58025480
 8007a9c:	58025494 	.word	0x58025494
 8007aa0:	2300      	movs	r3, #0
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	d028      	beq.n	8007af8 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007aaa:	681a      	ldr	r2, [r3, #0]
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007ab0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007ab4:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007aba:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007ac0:	f003 031f 	and.w	r3, r3, #31
 8007ac4:	2201      	movs	r2, #1
 8007ac6:	409a      	lsls	r2, r3
 8007ac8:	68fb      	ldr	r3, [r7, #12]
 8007aca:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007ad0:	687a      	ldr	r2, [r7, #4]
 8007ad2:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8007ad4:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	d00c      	beq.n	8007af8 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007ae2:	681a      	ldr	r2, [r3, #0]
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007ae8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007aec:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007af2:	687a      	ldr	r2, [r7, #4]
 8007af4:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8007af6:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	2201      	movs	r2, #1
 8007afc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	2200      	movs	r2, #0
 8007b04:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	d003      	beq.n	8007b18 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007b14:	6878      	ldr	r0, [r7, #4]
 8007b16:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8007b18:	2300      	movs	r3, #0
}
 8007b1a:	4618      	mov	r0, r3
 8007b1c:	3710      	adds	r7, #16
 8007b1e:	46bd      	mov	sp, r7
 8007b20:	bd80      	pop	{r7, pc}
 8007b22:	bf00      	nop

08007b24 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007b24:	b480      	push	{r7}
 8007b26:	b089      	sub	sp, #36	; 0x24
 8007b28:	af00      	add	r7, sp, #0
 8007b2a:	6078      	str	r0, [r7, #4]
 8007b2c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8007b2e:	2300      	movs	r3, #0
 8007b30:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8007b32:	4b89      	ldr	r3, [pc, #548]	; (8007d58 <HAL_GPIO_Init+0x234>)
 8007b34:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8007b36:	e194      	b.n	8007e62 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8007b38:	683b      	ldr	r3, [r7, #0]
 8007b3a:	681a      	ldr	r2, [r3, #0]
 8007b3c:	2101      	movs	r1, #1
 8007b3e:	69fb      	ldr	r3, [r7, #28]
 8007b40:	fa01 f303 	lsl.w	r3, r1, r3
 8007b44:	4013      	ands	r3, r2
 8007b46:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8007b48:	693b      	ldr	r3, [r7, #16]
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	f000 8186 	beq.w	8007e5c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8007b50:	683b      	ldr	r3, [r7, #0]
 8007b52:	685b      	ldr	r3, [r3, #4]
 8007b54:	f003 0303 	and.w	r3, r3, #3
 8007b58:	2b01      	cmp	r3, #1
 8007b5a:	d005      	beq.n	8007b68 <HAL_GPIO_Init+0x44>
 8007b5c:	683b      	ldr	r3, [r7, #0]
 8007b5e:	685b      	ldr	r3, [r3, #4]
 8007b60:	f003 0303 	and.w	r3, r3, #3
 8007b64:	2b02      	cmp	r3, #2
 8007b66:	d130      	bne.n	8007bca <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	689b      	ldr	r3, [r3, #8]
 8007b6c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8007b6e:	69fb      	ldr	r3, [r7, #28]
 8007b70:	005b      	lsls	r3, r3, #1
 8007b72:	2203      	movs	r2, #3
 8007b74:	fa02 f303 	lsl.w	r3, r2, r3
 8007b78:	43db      	mvns	r3, r3
 8007b7a:	69ba      	ldr	r2, [r7, #24]
 8007b7c:	4013      	ands	r3, r2
 8007b7e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8007b80:	683b      	ldr	r3, [r7, #0]
 8007b82:	68da      	ldr	r2, [r3, #12]
 8007b84:	69fb      	ldr	r3, [r7, #28]
 8007b86:	005b      	lsls	r3, r3, #1
 8007b88:	fa02 f303 	lsl.w	r3, r2, r3
 8007b8c:	69ba      	ldr	r2, [r7, #24]
 8007b8e:	4313      	orrs	r3, r2
 8007b90:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	69ba      	ldr	r2, [r7, #24]
 8007b96:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	685b      	ldr	r3, [r3, #4]
 8007b9c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8007b9e:	2201      	movs	r2, #1
 8007ba0:	69fb      	ldr	r3, [r7, #28]
 8007ba2:	fa02 f303 	lsl.w	r3, r2, r3
 8007ba6:	43db      	mvns	r3, r3
 8007ba8:	69ba      	ldr	r2, [r7, #24]
 8007baa:	4013      	ands	r3, r2
 8007bac:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8007bae:	683b      	ldr	r3, [r7, #0]
 8007bb0:	685b      	ldr	r3, [r3, #4]
 8007bb2:	091b      	lsrs	r3, r3, #4
 8007bb4:	f003 0201 	and.w	r2, r3, #1
 8007bb8:	69fb      	ldr	r3, [r7, #28]
 8007bba:	fa02 f303 	lsl.w	r3, r2, r3
 8007bbe:	69ba      	ldr	r2, [r7, #24]
 8007bc0:	4313      	orrs	r3, r2
 8007bc2:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	69ba      	ldr	r2, [r7, #24]
 8007bc8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8007bca:	683b      	ldr	r3, [r7, #0]
 8007bcc:	685b      	ldr	r3, [r3, #4]
 8007bce:	f003 0303 	and.w	r3, r3, #3
 8007bd2:	2b03      	cmp	r3, #3
 8007bd4:	d017      	beq.n	8007c06 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	68db      	ldr	r3, [r3, #12]
 8007bda:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8007bdc:	69fb      	ldr	r3, [r7, #28]
 8007bde:	005b      	lsls	r3, r3, #1
 8007be0:	2203      	movs	r2, #3
 8007be2:	fa02 f303 	lsl.w	r3, r2, r3
 8007be6:	43db      	mvns	r3, r3
 8007be8:	69ba      	ldr	r2, [r7, #24]
 8007bea:	4013      	ands	r3, r2
 8007bec:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007bee:	683b      	ldr	r3, [r7, #0]
 8007bf0:	689a      	ldr	r2, [r3, #8]
 8007bf2:	69fb      	ldr	r3, [r7, #28]
 8007bf4:	005b      	lsls	r3, r3, #1
 8007bf6:	fa02 f303 	lsl.w	r3, r2, r3
 8007bfa:	69ba      	ldr	r2, [r7, #24]
 8007bfc:	4313      	orrs	r3, r2
 8007bfe:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	69ba      	ldr	r2, [r7, #24]
 8007c04:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007c06:	683b      	ldr	r3, [r7, #0]
 8007c08:	685b      	ldr	r3, [r3, #4]
 8007c0a:	f003 0303 	and.w	r3, r3, #3
 8007c0e:	2b02      	cmp	r3, #2
 8007c10:	d123      	bne.n	8007c5a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8007c12:	69fb      	ldr	r3, [r7, #28]
 8007c14:	08da      	lsrs	r2, r3, #3
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	3208      	adds	r2, #8
 8007c1a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007c1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8007c20:	69fb      	ldr	r3, [r7, #28]
 8007c22:	f003 0307 	and.w	r3, r3, #7
 8007c26:	009b      	lsls	r3, r3, #2
 8007c28:	220f      	movs	r2, #15
 8007c2a:	fa02 f303 	lsl.w	r3, r2, r3
 8007c2e:	43db      	mvns	r3, r3
 8007c30:	69ba      	ldr	r2, [r7, #24]
 8007c32:	4013      	ands	r3, r2
 8007c34:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8007c36:	683b      	ldr	r3, [r7, #0]
 8007c38:	691a      	ldr	r2, [r3, #16]
 8007c3a:	69fb      	ldr	r3, [r7, #28]
 8007c3c:	f003 0307 	and.w	r3, r3, #7
 8007c40:	009b      	lsls	r3, r3, #2
 8007c42:	fa02 f303 	lsl.w	r3, r2, r3
 8007c46:	69ba      	ldr	r2, [r7, #24]
 8007c48:	4313      	orrs	r3, r2
 8007c4a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8007c4c:	69fb      	ldr	r3, [r7, #28]
 8007c4e:	08da      	lsrs	r2, r3, #3
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	3208      	adds	r2, #8
 8007c54:	69b9      	ldr	r1, [r7, #24]
 8007c56:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8007c60:	69fb      	ldr	r3, [r7, #28]
 8007c62:	005b      	lsls	r3, r3, #1
 8007c64:	2203      	movs	r2, #3
 8007c66:	fa02 f303 	lsl.w	r3, r2, r3
 8007c6a:	43db      	mvns	r3, r3
 8007c6c:	69ba      	ldr	r2, [r7, #24]
 8007c6e:	4013      	ands	r3, r2
 8007c70:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8007c72:	683b      	ldr	r3, [r7, #0]
 8007c74:	685b      	ldr	r3, [r3, #4]
 8007c76:	f003 0203 	and.w	r2, r3, #3
 8007c7a:	69fb      	ldr	r3, [r7, #28]
 8007c7c:	005b      	lsls	r3, r3, #1
 8007c7e:	fa02 f303 	lsl.w	r3, r2, r3
 8007c82:	69ba      	ldr	r2, [r7, #24]
 8007c84:	4313      	orrs	r3, r2
 8007c86:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	69ba      	ldr	r2, [r7, #24]
 8007c8c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8007c8e:	683b      	ldr	r3, [r7, #0]
 8007c90:	685b      	ldr	r3, [r3, #4]
 8007c92:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	f000 80e0 	beq.w	8007e5c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007c9c:	4b2f      	ldr	r3, [pc, #188]	; (8007d5c <HAL_GPIO_Init+0x238>)
 8007c9e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007ca2:	4a2e      	ldr	r2, [pc, #184]	; (8007d5c <HAL_GPIO_Init+0x238>)
 8007ca4:	f043 0302 	orr.w	r3, r3, #2
 8007ca8:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8007cac:	4b2b      	ldr	r3, [pc, #172]	; (8007d5c <HAL_GPIO_Init+0x238>)
 8007cae:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007cb2:	f003 0302 	and.w	r3, r3, #2
 8007cb6:	60fb      	str	r3, [r7, #12]
 8007cb8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8007cba:	4a29      	ldr	r2, [pc, #164]	; (8007d60 <HAL_GPIO_Init+0x23c>)
 8007cbc:	69fb      	ldr	r3, [r7, #28]
 8007cbe:	089b      	lsrs	r3, r3, #2
 8007cc0:	3302      	adds	r3, #2
 8007cc2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007cc6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8007cc8:	69fb      	ldr	r3, [r7, #28]
 8007cca:	f003 0303 	and.w	r3, r3, #3
 8007cce:	009b      	lsls	r3, r3, #2
 8007cd0:	220f      	movs	r2, #15
 8007cd2:	fa02 f303 	lsl.w	r3, r2, r3
 8007cd6:	43db      	mvns	r3, r3
 8007cd8:	69ba      	ldr	r2, [r7, #24]
 8007cda:	4013      	ands	r3, r2
 8007cdc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	4a20      	ldr	r2, [pc, #128]	; (8007d64 <HAL_GPIO_Init+0x240>)
 8007ce2:	4293      	cmp	r3, r2
 8007ce4:	d052      	beq.n	8007d8c <HAL_GPIO_Init+0x268>
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	4a1f      	ldr	r2, [pc, #124]	; (8007d68 <HAL_GPIO_Init+0x244>)
 8007cea:	4293      	cmp	r3, r2
 8007cec:	d031      	beq.n	8007d52 <HAL_GPIO_Init+0x22e>
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	4a1e      	ldr	r2, [pc, #120]	; (8007d6c <HAL_GPIO_Init+0x248>)
 8007cf2:	4293      	cmp	r3, r2
 8007cf4:	d02b      	beq.n	8007d4e <HAL_GPIO_Init+0x22a>
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	4a1d      	ldr	r2, [pc, #116]	; (8007d70 <HAL_GPIO_Init+0x24c>)
 8007cfa:	4293      	cmp	r3, r2
 8007cfc:	d025      	beq.n	8007d4a <HAL_GPIO_Init+0x226>
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	4a1c      	ldr	r2, [pc, #112]	; (8007d74 <HAL_GPIO_Init+0x250>)
 8007d02:	4293      	cmp	r3, r2
 8007d04:	d01f      	beq.n	8007d46 <HAL_GPIO_Init+0x222>
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	4a1b      	ldr	r2, [pc, #108]	; (8007d78 <HAL_GPIO_Init+0x254>)
 8007d0a:	4293      	cmp	r3, r2
 8007d0c:	d019      	beq.n	8007d42 <HAL_GPIO_Init+0x21e>
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	4a1a      	ldr	r2, [pc, #104]	; (8007d7c <HAL_GPIO_Init+0x258>)
 8007d12:	4293      	cmp	r3, r2
 8007d14:	d013      	beq.n	8007d3e <HAL_GPIO_Init+0x21a>
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	4a19      	ldr	r2, [pc, #100]	; (8007d80 <HAL_GPIO_Init+0x25c>)
 8007d1a:	4293      	cmp	r3, r2
 8007d1c:	d00d      	beq.n	8007d3a <HAL_GPIO_Init+0x216>
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	4a18      	ldr	r2, [pc, #96]	; (8007d84 <HAL_GPIO_Init+0x260>)
 8007d22:	4293      	cmp	r3, r2
 8007d24:	d007      	beq.n	8007d36 <HAL_GPIO_Init+0x212>
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	4a17      	ldr	r2, [pc, #92]	; (8007d88 <HAL_GPIO_Init+0x264>)
 8007d2a:	4293      	cmp	r3, r2
 8007d2c:	d101      	bne.n	8007d32 <HAL_GPIO_Init+0x20e>
 8007d2e:	2309      	movs	r3, #9
 8007d30:	e02d      	b.n	8007d8e <HAL_GPIO_Init+0x26a>
 8007d32:	230a      	movs	r3, #10
 8007d34:	e02b      	b.n	8007d8e <HAL_GPIO_Init+0x26a>
 8007d36:	2308      	movs	r3, #8
 8007d38:	e029      	b.n	8007d8e <HAL_GPIO_Init+0x26a>
 8007d3a:	2307      	movs	r3, #7
 8007d3c:	e027      	b.n	8007d8e <HAL_GPIO_Init+0x26a>
 8007d3e:	2306      	movs	r3, #6
 8007d40:	e025      	b.n	8007d8e <HAL_GPIO_Init+0x26a>
 8007d42:	2305      	movs	r3, #5
 8007d44:	e023      	b.n	8007d8e <HAL_GPIO_Init+0x26a>
 8007d46:	2304      	movs	r3, #4
 8007d48:	e021      	b.n	8007d8e <HAL_GPIO_Init+0x26a>
 8007d4a:	2303      	movs	r3, #3
 8007d4c:	e01f      	b.n	8007d8e <HAL_GPIO_Init+0x26a>
 8007d4e:	2302      	movs	r3, #2
 8007d50:	e01d      	b.n	8007d8e <HAL_GPIO_Init+0x26a>
 8007d52:	2301      	movs	r3, #1
 8007d54:	e01b      	b.n	8007d8e <HAL_GPIO_Init+0x26a>
 8007d56:	bf00      	nop
 8007d58:	58000080 	.word	0x58000080
 8007d5c:	58024400 	.word	0x58024400
 8007d60:	58000400 	.word	0x58000400
 8007d64:	58020000 	.word	0x58020000
 8007d68:	58020400 	.word	0x58020400
 8007d6c:	58020800 	.word	0x58020800
 8007d70:	58020c00 	.word	0x58020c00
 8007d74:	58021000 	.word	0x58021000
 8007d78:	58021400 	.word	0x58021400
 8007d7c:	58021800 	.word	0x58021800
 8007d80:	58021c00 	.word	0x58021c00
 8007d84:	58022000 	.word	0x58022000
 8007d88:	58022400 	.word	0x58022400
 8007d8c:	2300      	movs	r3, #0
 8007d8e:	69fa      	ldr	r2, [r7, #28]
 8007d90:	f002 0203 	and.w	r2, r2, #3
 8007d94:	0092      	lsls	r2, r2, #2
 8007d96:	4093      	lsls	r3, r2
 8007d98:	69ba      	ldr	r2, [r7, #24]
 8007d9a:	4313      	orrs	r3, r2
 8007d9c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8007d9e:	4938      	ldr	r1, [pc, #224]	; (8007e80 <HAL_GPIO_Init+0x35c>)
 8007da0:	69fb      	ldr	r3, [r7, #28]
 8007da2:	089b      	lsrs	r3, r3, #2
 8007da4:	3302      	adds	r3, #2
 8007da6:	69ba      	ldr	r2, [r7, #24]
 8007da8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8007dac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007db4:	693b      	ldr	r3, [r7, #16]
 8007db6:	43db      	mvns	r3, r3
 8007db8:	69ba      	ldr	r2, [r7, #24]
 8007dba:	4013      	ands	r3, r2
 8007dbc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8007dbe:	683b      	ldr	r3, [r7, #0]
 8007dc0:	685b      	ldr	r3, [r3, #4]
 8007dc2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	d003      	beq.n	8007dd2 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8007dca:	69ba      	ldr	r2, [r7, #24]
 8007dcc:	693b      	ldr	r3, [r7, #16]
 8007dce:	4313      	orrs	r3, r2
 8007dd0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8007dd2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007dd6:	69bb      	ldr	r3, [r7, #24]
 8007dd8:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8007dda:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007dde:	685b      	ldr	r3, [r3, #4]
 8007de0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007de2:	693b      	ldr	r3, [r7, #16]
 8007de4:	43db      	mvns	r3, r3
 8007de6:	69ba      	ldr	r2, [r7, #24]
 8007de8:	4013      	ands	r3, r2
 8007dea:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8007dec:	683b      	ldr	r3, [r7, #0]
 8007dee:	685b      	ldr	r3, [r3, #4]
 8007df0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007df4:	2b00      	cmp	r3, #0
 8007df6:	d003      	beq.n	8007e00 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8007df8:	69ba      	ldr	r2, [r7, #24]
 8007dfa:	693b      	ldr	r3, [r7, #16]
 8007dfc:	4313      	orrs	r3, r2
 8007dfe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8007e00:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007e04:	69bb      	ldr	r3, [r7, #24]
 8007e06:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8007e08:	697b      	ldr	r3, [r7, #20]
 8007e0a:	685b      	ldr	r3, [r3, #4]
 8007e0c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007e0e:	693b      	ldr	r3, [r7, #16]
 8007e10:	43db      	mvns	r3, r3
 8007e12:	69ba      	ldr	r2, [r7, #24]
 8007e14:	4013      	ands	r3, r2
 8007e16:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8007e18:	683b      	ldr	r3, [r7, #0]
 8007e1a:	685b      	ldr	r3, [r3, #4]
 8007e1c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007e20:	2b00      	cmp	r3, #0
 8007e22:	d003      	beq.n	8007e2c <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8007e24:	69ba      	ldr	r2, [r7, #24]
 8007e26:	693b      	ldr	r3, [r7, #16]
 8007e28:	4313      	orrs	r3, r2
 8007e2a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8007e2c:	697b      	ldr	r3, [r7, #20]
 8007e2e:	69ba      	ldr	r2, [r7, #24]
 8007e30:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8007e32:	697b      	ldr	r3, [r7, #20]
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007e38:	693b      	ldr	r3, [r7, #16]
 8007e3a:	43db      	mvns	r3, r3
 8007e3c:	69ba      	ldr	r2, [r7, #24]
 8007e3e:	4013      	ands	r3, r2
 8007e40:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8007e42:	683b      	ldr	r3, [r7, #0]
 8007e44:	685b      	ldr	r3, [r3, #4]
 8007e46:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007e4a:	2b00      	cmp	r3, #0
 8007e4c:	d003      	beq.n	8007e56 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8007e4e:	69ba      	ldr	r2, [r7, #24]
 8007e50:	693b      	ldr	r3, [r7, #16]
 8007e52:	4313      	orrs	r3, r2
 8007e54:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8007e56:	697b      	ldr	r3, [r7, #20]
 8007e58:	69ba      	ldr	r2, [r7, #24]
 8007e5a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8007e5c:	69fb      	ldr	r3, [r7, #28]
 8007e5e:	3301      	adds	r3, #1
 8007e60:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8007e62:	683b      	ldr	r3, [r7, #0]
 8007e64:	681a      	ldr	r2, [r3, #0]
 8007e66:	69fb      	ldr	r3, [r7, #28]
 8007e68:	fa22 f303 	lsr.w	r3, r2, r3
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	f47f ae63 	bne.w	8007b38 <HAL_GPIO_Init+0x14>
  }
}
 8007e72:	bf00      	nop
 8007e74:	bf00      	nop
 8007e76:	3724      	adds	r7, #36	; 0x24
 8007e78:	46bd      	mov	sp, r7
 8007e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e7e:	4770      	bx	lr
 8007e80:	58000400 	.word	0x58000400

08007e84 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8007e84:	b480      	push	{r7}
 8007e86:	b085      	sub	sp, #20
 8007e88:	af00      	add	r7, sp, #0
 8007e8a:	6078      	str	r0, [r7, #4]
 8007e8c:	460b      	mov	r3, r1
 8007e8e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	691a      	ldr	r2, [r3, #16]
 8007e94:	887b      	ldrh	r3, [r7, #2]
 8007e96:	4013      	ands	r3, r2
 8007e98:	2b00      	cmp	r3, #0
 8007e9a:	d002      	beq.n	8007ea2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8007e9c:	2301      	movs	r3, #1
 8007e9e:	73fb      	strb	r3, [r7, #15]
 8007ea0:	e001      	b.n	8007ea6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8007ea2:	2300      	movs	r3, #0
 8007ea4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8007ea6:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ea8:	4618      	mov	r0, r3
 8007eaa:	3714      	adds	r7, #20
 8007eac:	46bd      	mov	sp, r7
 8007eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eb2:	4770      	bx	lr

08007eb4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007eb4:	b480      	push	{r7}
 8007eb6:	b083      	sub	sp, #12
 8007eb8:	af00      	add	r7, sp, #0
 8007eba:	6078      	str	r0, [r7, #4]
 8007ebc:	460b      	mov	r3, r1
 8007ebe:	807b      	strh	r3, [r7, #2]
 8007ec0:	4613      	mov	r3, r2
 8007ec2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8007ec4:	787b      	ldrb	r3, [r7, #1]
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	d003      	beq.n	8007ed2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8007eca:	887a      	ldrh	r2, [r7, #2]
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8007ed0:	e003      	b.n	8007eda <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8007ed2:	887b      	ldrh	r3, [r7, #2]
 8007ed4:	041a      	lsls	r2, r3, #16
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	619a      	str	r2, [r3, #24]
}
 8007eda:	bf00      	nop
 8007edc:	370c      	adds	r7, #12
 8007ede:	46bd      	mov	sp, r7
 8007ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ee4:	4770      	bx	lr

08007ee6 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8007ee6:	b580      	push	{r7, lr}
 8007ee8:	b082      	sub	sp, #8
 8007eea:	af00      	add	r7, sp, #0
 8007eec:	4603      	mov	r3, r0
 8007eee:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 8007ef0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007ef4:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8007ef8:	88fb      	ldrh	r3, [r7, #6]
 8007efa:	4013      	ands	r3, r2
 8007efc:	2b00      	cmp	r3, #0
 8007efe:	d008      	beq.n	8007f12 <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8007f00:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007f04:	88fb      	ldrh	r3, [r7, #6]
 8007f06:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8007f0a:	88fb      	ldrh	r3, [r7, #6]
 8007f0c:	4618      	mov	r0, r3
 8007f0e:	f7fa ffed 	bl	8002eec <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 8007f12:	bf00      	nop
 8007f14:	3708      	adds	r7, #8
 8007f16:	46bd      	mov	sp, r7
 8007f18:	bd80      	pop	{r7, pc}
	...

08007f1c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8007f1c:	b580      	push	{r7, lr}
 8007f1e:	b084      	sub	sp, #16
 8007f20:	af00      	add	r7, sp, #0
 8007f22:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8007f24:	4b19      	ldr	r3, [pc, #100]	; (8007f8c <HAL_PWREx_ConfigSupply+0x70>)
 8007f26:	68db      	ldr	r3, [r3, #12]
 8007f28:	f003 0304 	and.w	r3, r3, #4
 8007f2c:	2b04      	cmp	r3, #4
 8007f2e:	d00a      	beq.n	8007f46 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8007f30:	4b16      	ldr	r3, [pc, #88]	; (8007f8c <HAL_PWREx_ConfigSupply+0x70>)
 8007f32:	68db      	ldr	r3, [r3, #12]
 8007f34:	f003 0307 	and.w	r3, r3, #7
 8007f38:	687a      	ldr	r2, [r7, #4]
 8007f3a:	429a      	cmp	r2, r3
 8007f3c:	d001      	beq.n	8007f42 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8007f3e:	2301      	movs	r3, #1
 8007f40:	e01f      	b.n	8007f82 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8007f42:	2300      	movs	r3, #0
 8007f44:	e01d      	b.n	8007f82 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8007f46:	4b11      	ldr	r3, [pc, #68]	; (8007f8c <HAL_PWREx_ConfigSupply+0x70>)
 8007f48:	68db      	ldr	r3, [r3, #12]
 8007f4a:	f023 0207 	bic.w	r2, r3, #7
 8007f4e:	490f      	ldr	r1, [pc, #60]	; (8007f8c <HAL_PWREx_ConfigSupply+0x70>)
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	4313      	orrs	r3, r2
 8007f54:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8007f56:	f7fe ff03 	bl	8006d60 <HAL_GetTick>
 8007f5a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8007f5c:	e009      	b.n	8007f72 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8007f5e:	f7fe feff 	bl	8006d60 <HAL_GetTick>
 8007f62:	4602      	mov	r2, r0
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	1ad3      	subs	r3, r2, r3
 8007f68:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007f6c:	d901      	bls.n	8007f72 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8007f6e:	2301      	movs	r3, #1
 8007f70:	e007      	b.n	8007f82 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8007f72:	4b06      	ldr	r3, [pc, #24]	; (8007f8c <HAL_PWREx_ConfigSupply+0x70>)
 8007f74:	685b      	ldr	r3, [r3, #4]
 8007f76:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007f7a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007f7e:	d1ee      	bne.n	8007f5e <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8007f80:	2300      	movs	r3, #0
}
 8007f82:	4618      	mov	r0, r3
 8007f84:	3710      	adds	r7, #16
 8007f86:	46bd      	mov	sp, r7
 8007f88:	bd80      	pop	{r7, pc}
 8007f8a:	bf00      	nop
 8007f8c:	58024800 	.word	0x58024800

08007f90 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007f90:	b580      	push	{r7, lr}
 8007f92:	b08c      	sub	sp, #48	; 0x30
 8007f94:	af00      	add	r7, sp, #0
 8007f96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	2b00      	cmp	r3, #0
 8007f9c:	d102      	bne.n	8007fa4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8007f9e:	2301      	movs	r3, #1
 8007fa0:	f000 bc1d 	b.w	80087de <HAL_RCC_OscConfig+0x84e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	f003 0301 	and.w	r3, r3, #1
 8007fac:	2b00      	cmp	r3, #0
 8007fae:	f000 8087 	beq.w	80080c0 <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007fb2:	4b99      	ldr	r3, [pc, #612]	; (8008218 <HAL_RCC_OscConfig+0x288>)
 8007fb4:	691b      	ldr	r3, [r3, #16]
 8007fb6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007fba:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007fbc:	4b96      	ldr	r3, [pc, #600]	; (8008218 <HAL_RCC_OscConfig+0x288>)
 8007fbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007fc0:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8007fc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007fc4:	2b10      	cmp	r3, #16
 8007fc6:	d007      	beq.n	8007fd8 <HAL_RCC_OscConfig+0x48>
 8007fc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007fca:	2b18      	cmp	r3, #24
 8007fcc:	d110      	bne.n	8007ff0 <HAL_RCC_OscConfig+0x60>
 8007fce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fd0:	f003 0303 	and.w	r3, r3, #3
 8007fd4:	2b02      	cmp	r3, #2
 8007fd6:	d10b      	bne.n	8007ff0 <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007fd8:	4b8f      	ldr	r3, [pc, #572]	; (8008218 <HAL_RCC_OscConfig+0x288>)
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007fe0:	2b00      	cmp	r3, #0
 8007fe2:	d06c      	beq.n	80080be <HAL_RCC_OscConfig+0x12e>
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	685b      	ldr	r3, [r3, #4]
 8007fe8:	2b00      	cmp	r3, #0
 8007fea:	d168      	bne.n	80080be <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 8007fec:	2301      	movs	r3, #1
 8007fee:	e3f6      	b.n	80087de <HAL_RCC_OscConfig+0x84e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	685b      	ldr	r3, [r3, #4]
 8007ff4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007ff8:	d106      	bne.n	8008008 <HAL_RCC_OscConfig+0x78>
 8007ffa:	4b87      	ldr	r3, [pc, #540]	; (8008218 <HAL_RCC_OscConfig+0x288>)
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	4a86      	ldr	r2, [pc, #536]	; (8008218 <HAL_RCC_OscConfig+0x288>)
 8008000:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008004:	6013      	str	r3, [r2, #0]
 8008006:	e02e      	b.n	8008066 <HAL_RCC_OscConfig+0xd6>
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	685b      	ldr	r3, [r3, #4]
 800800c:	2b00      	cmp	r3, #0
 800800e:	d10c      	bne.n	800802a <HAL_RCC_OscConfig+0x9a>
 8008010:	4b81      	ldr	r3, [pc, #516]	; (8008218 <HAL_RCC_OscConfig+0x288>)
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	4a80      	ldr	r2, [pc, #512]	; (8008218 <HAL_RCC_OscConfig+0x288>)
 8008016:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800801a:	6013      	str	r3, [r2, #0]
 800801c:	4b7e      	ldr	r3, [pc, #504]	; (8008218 <HAL_RCC_OscConfig+0x288>)
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	4a7d      	ldr	r2, [pc, #500]	; (8008218 <HAL_RCC_OscConfig+0x288>)
 8008022:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008026:	6013      	str	r3, [r2, #0]
 8008028:	e01d      	b.n	8008066 <HAL_RCC_OscConfig+0xd6>
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	685b      	ldr	r3, [r3, #4]
 800802e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008032:	d10c      	bne.n	800804e <HAL_RCC_OscConfig+0xbe>
 8008034:	4b78      	ldr	r3, [pc, #480]	; (8008218 <HAL_RCC_OscConfig+0x288>)
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	4a77      	ldr	r2, [pc, #476]	; (8008218 <HAL_RCC_OscConfig+0x288>)
 800803a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800803e:	6013      	str	r3, [r2, #0]
 8008040:	4b75      	ldr	r3, [pc, #468]	; (8008218 <HAL_RCC_OscConfig+0x288>)
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	4a74      	ldr	r2, [pc, #464]	; (8008218 <HAL_RCC_OscConfig+0x288>)
 8008046:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800804a:	6013      	str	r3, [r2, #0]
 800804c:	e00b      	b.n	8008066 <HAL_RCC_OscConfig+0xd6>
 800804e:	4b72      	ldr	r3, [pc, #456]	; (8008218 <HAL_RCC_OscConfig+0x288>)
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	4a71      	ldr	r2, [pc, #452]	; (8008218 <HAL_RCC_OscConfig+0x288>)
 8008054:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008058:	6013      	str	r3, [r2, #0]
 800805a:	4b6f      	ldr	r3, [pc, #444]	; (8008218 <HAL_RCC_OscConfig+0x288>)
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	4a6e      	ldr	r2, [pc, #440]	; (8008218 <HAL_RCC_OscConfig+0x288>)
 8008060:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008064:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	685b      	ldr	r3, [r3, #4]
 800806a:	2b00      	cmp	r3, #0
 800806c:	d013      	beq.n	8008096 <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800806e:	f7fe fe77 	bl	8006d60 <HAL_GetTick>
 8008072:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008074:	e008      	b.n	8008088 <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008076:	f7fe fe73 	bl	8006d60 <HAL_GetTick>
 800807a:	4602      	mov	r2, r0
 800807c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800807e:	1ad3      	subs	r3, r2, r3
 8008080:	2b64      	cmp	r3, #100	; 0x64
 8008082:	d901      	bls.n	8008088 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8008084:	2303      	movs	r3, #3
 8008086:	e3aa      	b.n	80087de <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008088:	4b63      	ldr	r3, [pc, #396]	; (8008218 <HAL_RCC_OscConfig+0x288>)
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008090:	2b00      	cmp	r3, #0
 8008092:	d0f0      	beq.n	8008076 <HAL_RCC_OscConfig+0xe6>
 8008094:	e014      	b.n	80080c0 <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008096:	f7fe fe63 	bl	8006d60 <HAL_GetTick>
 800809a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800809c:	e008      	b.n	80080b0 <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800809e:	f7fe fe5f 	bl	8006d60 <HAL_GetTick>
 80080a2:	4602      	mov	r2, r0
 80080a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080a6:	1ad3      	subs	r3, r2, r3
 80080a8:	2b64      	cmp	r3, #100	; 0x64
 80080aa:	d901      	bls.n	80080b0 <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 80080ac:	2303      	movs	r3, #3
 80080ae:	e396      	b.n	80087de <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80080b0:	4b59      	ldr	r3, [pc, #356]	; (8008218 <HAL_RCC_OscConfig+0x288>)
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80080b8:	2b00      	cmp	r3, #0
 80080ba:	d1f0      	bne.n	800809e <HAL_RCC_OscConfig+0x10e>
 80080bc:	e000      	b.n	80080c0 <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80080be:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	f003 0302 	and.w	r3, r3, #2
 80080c8:	2b00      	cmp	r3, #0
 80080ca:	f000 80cb 	beq.w	8008264 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80080ce:	4b52      	ldr	r3, [pc, #328]	; (8008218 <HAL_RCC_OscConfig+0x288>)
 80080d0:	691b      	ldr	r3, [r3, #16]
 80080d2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80080d6:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80080d8:	4b4f      	ldr	r3, [pc, #316]	; (8008218 <HAL_RCC_OscConfig+0x288>)
 80080da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80080dc:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80080de:	6a3b      	ldr	r3, [r7, #32]
 80080e0:	2b00      	cmp	r3, #0
 80080e2:	d007      	beq.n	80080f4 <HAL_RCC_OscConfig+0x164>
 80080e4:	6a3b      	ldr	r3, [r7, #32]
 80080e6:	2b18      	cmp	r3, #24
 80080e8:	d156      	bne.n	8008198 <HAL_RCC_OscConfig+0x208>
 80080ea:	69fb      	ldr	r3, [r7, #28]
 80080ec:	f003 0303 	and.w	r3, r3, #3
 80080f0:	2b00      	cmp	r3, #0
 80080f2:	d151      	bne.n	8008198 <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80080f4:	4b48      	ldr	r3, [pc, #288]	; (8008218 <HAL_RCC_OscConfig+0x288>)
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	f003 0304 	and.w	r3, r3, #4
 80080fc:	2b00      	cmp	r3, #0
 80080fe:	d005      	beq.n	800810c <HAL_RCC_OscConfig+0x17c>
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	68db      	ldr	r3, [r3, #12]
 8008104:	2b00      	cmp	r3, #0
 8008106:	d101      	bne.n	800810c <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 8008108:	2301      	movs	r3, #1
 800810a:	e368      	b.n	80087de <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800810c:	4b42      	ldr	r3, [pc, #264]	; (8008218 <HAL_RCC_OscConfig+0x288>)
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	f023 0219 	bic.w	r2, r3, #25
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	68db      	ldr	r3, [r3, #12]
 8008118:	493f      	ldr	r1, [pc, #252]	; (8008218 <HAL_RCC_OscConfig+0x288>)
 800811a:	4313      	orrs	r3, r2
 800811c:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800811e:	f7fe fe1f 	bl	8006d60 <HAL_GetTick>
 8008122:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008124:	e008      	b.n	8008138 <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008126:	f7fe fe1b 	bl	8006d60 <HAL_GetTick>
 800812a:	4602      	mov	r2, r0
 800812c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800812e:	1ad3      	subs	r3, r2, r3
 8008130:	2b02      	cmp	r3, #2
 8008132:	d901      	bls.n	8008138 <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 8008134:	2303      	movs	r3, #3
 8008136:	e352      	b.n	80087de <HAL_RCC_OscConfig+0x84e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008138:	4b37      	ldr	r3, [pc, #220]	; (8008218 <HAL_RCC_OscConfig+0x288>)
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	f003 0304 	and.w	r3, r3, #4
 8008140:	2b00      	cmp	r3, #0
 8008142:	d0f0      	beq.n	8008126 <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008144:	f7fe fe3c 	bl	8006dc0 <HAL_GetREVID>
 8008148:	4603      	mov	r3, r0
 800814a:	f241 0203 	movw	r2, #4099	; 0x1003
 800814e:	4293      	cmp	r3, r2
 8008150:	d817      	bhi.n	8008182 <HAL_RCC_OscConfig+0x1f2>
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	691b      	ldr	r3, [r3, #16]
 8008156:	2b40      	cmp	r3, #64	; 0x40
 8008158:	d108      	bne.n	800816c <HAL_RCC_OscConfig+0x1dc>
 800815a:	4b2f      	ldr	r3, [pc, #188]	; (8008218 <HAL_RCC_OscConfig+0x288>)
 800815c:	685b      	ldr	r3, [r3, #4]
 800815e:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8008162:	4a2d      	ldr	r2, [pc, #180]	; (8008218 <HAL_RCC_OscConfig+0x288>)
 8008164:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008168:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800816a:	e07b      	b.n	8008264 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800816c:	4b2a      	ldr	r3, [pc, #168]	; (8008218 <HAL_RCC_OscConfig+0x288>)
 800816e:	685b      	ldr	r3, [r3, #4]
 8008170:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	691b      	ldr	r3, [r3, #16]
 8008178:	031b      	lsls	r3, r3, #12
 800817a:	4927      	ldr	r1, [pc, #156]	; (8008218 <HAL_RCC_OscConfig+0x288>)
 800817c:	4313      	orrs	r3, r2
 800817e:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008180:	e070      	b.n	8008264 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008182:	4b25      	ldr	r3, [pc, #148]	; (8008218 <HAL_RCC_OscConfig+0x288>)
 8008184:	685b      	ldr	r3, [r3, #4]
 8008186:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	691b      	ldr	r3, [r3, #16]
 800818e:	061b      	lsls	r3, r3, #24
 8008190:	4921      	ldr	r1, [pc, #132]	; (8008218 <HAL_RCC_OscConfig+0x288>)
 8008192:	4313      	orrs	r3, r2
 8008194:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008196:	e065      	b.n	8008264 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	68db      	ldr	r3, [r3, #12]
 800819c:	2b00      	cmp	r3, #0
 800819e:	d048      	beq.n	8008232 <HAL_RCC_OscConfig+0x2a2>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80081a0:	4b1d      	ldr	r3, [pc, #116]	; (8008218 <HAL_RCC_OscConfig+0x288>)
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	f023 0219 	bic.w	r2, r3, #25
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	68db      	ldr	r3, [r3, #12]
 80081ac:	491a      	ldr	r1, [pc, #104]	; (8008218 <HAL_RCC_OscConfig+0x288>)
 80081ae:	4313      	orrs	r3, r2
 80081b0:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80081b2:	f7fe fdd5 	bl	8006d60 <HAL_GetTick>
 80081b6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80081b8:	e008      	b.n	80081cc <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80081ba:	f7fe fdd1 	bl	8006d60 <HAL_GetTick>
 80081be:	4602      	mov	r2, r0
 80081c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081c2:	1ad3      	subs	r3, r2, r3
 80081c4:	2b02      	cmp	r3, #2
 80081c6:	d901      	bls.n	80081cc <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 80081c8:	2303      	movs	r3, #3
 80081ca:	e308      	b.n	80087de <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80081cc:	4b12      	ldr	r3, [pc, #72]	; (8008218 <HAL_RCC_OscConfig+0x288>)
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	f003 0304 	and.w	r3, r3, #4
 80081d4:	2b00      	cmp	r3, #0
 80081d6:	d0f0      	beq.n	80081ba <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80081d8:	f7fe fdf2 	bl	8006dc0 <HAL_GetREVID>
 80081dc:	4603      	mov	r3, r0
 80081de:	f241 0203 	movw	r2, #4099	; 0x1003
 80081e2:	4293      	cmp	r3, r2
 80081e4:	d81a      	bhi.n	800821c <HAL_RCC_OscConfig+0x28c>
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	691b      	ldr	r3, [r3, #16]
 80081ea:	2b40      	cmp	r3, #64	; 0x40
 80081ec:	d108      	bne.n	8008200 <HAL_RCC_OscConfig+0x270>
 80081ee:	4b0a      	ldr	r3, [pc, #40]	; (8008218 <HAL_RCC_OscConfig+0x288>)
 80081f0:	685b      	ldr	r3, [r3, #4]
 80081f2:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80081f6:	4a08      	ldr	r2, [pc, #32]	; (8008218 <HAL_RCC_OscConfig+0x288>)
 80081f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80081fc:	6053      	str	r3, [r2, #4]
 80081fe:	e031      	b.n	8008264 <HAL_RCC_OscConfig+0x2d4>
 8008200:	4b05      	ldr	r3, [pc, #20]	; (8008218 <HAL_RCC_OscConfig+0x288>)
 8008202:	685b      	ldr	r3, [r3, #4]
 8008204:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	691b      	ldr	r3, [r3, #16]
 800820c:	031b      	lsls	r3, r3, #12
 800820e:	4902      	ldr	r1, [pc, #8]	; (8008218 <HAL_RCC_OscConfig+0x288>)
 8008210:	4313      	orrs	r3, r2
 8008212:	604b      	str	r3, [r1, #4]
 8008214:	e026      	b.n	8008264 <HAL_RCC_OscConfig+0x2d4>
 8008216:	bf00      	nop
 8008218:	58024400 	.word	0x58024400
 800821c:	4b9a      	ldr	r3, [pc, #616]	; (8008488 <HAL_RCC_OscConfig+0x4f8>)
 800821e:	685b      	ldr	r3, [r3, #4]
 8008220:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	691b      	ldr	r3, [r3, #16]
 8008228:	061b      	lsls	r3, r3, #24
 800822a:	4997      	ldr	r1, [pc, #604]	; (8008488 <HAL_RCC_OscConfig+0x4f8>)
 800822c:	4313      	orrs	r3, r2
 800822e:	604b      	str	r3, [r1, #4]
 8008230:	e018      	b.n	8008264 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008232:	4b95      	ldr	r3, [pc, #596]	; (8008488 <HAL_RCC_OscConfig+0x4f8>)
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	4a94      	ldr	r2, [pc, #592]	; (8008488 <HAL_RCC_OscConfig+0x4f8>)
 8008238:	f023 0301 	bic.w	r3, r3, #1
 800823c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800823e:	f7fe fd8f 	bl	8006d60 <HAL_GetTick>
 8008242:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8008244:	e008      	b.n	8008258 <HAL_RCC_OscConfig+0x2c8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008246:	f7fe fd8b 	bl	8006d60 <HAL_GetTick>
 800824a:	4602      	mov	r2, r0
 800824c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800824e:	1ad3      	subs	r3, r2, r3
 8008250:	2b02      	cmp	r3, #2
 8008252:	d901      	bls.n	8008258 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8008254:	2303      	movs	r3, #3
 8008256:	e2c2      	b.n	80087de <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8008258:	4b8b      	ldr	r3, [pc, #556]	; (8008488 <HAL_RCC_OscConfig+0x4f8>)
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	f003 0304 	and.w	r3, r3, #4
 8008260:	2b00      	cmp	r3, #0
 8008262:	d1f0      	bne.n	8008246 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	f003 0310 	and.w	r3, r3, #16
 800826c:	2b00      	cmp	r3, #0
 800826e:	f000 80a9 	beq.w	80083c4 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008272:	4b85      	ldr	r3, [pc, #532]	; (8008488 <HAL_RCC_OscConfig+0x4f8>)
 8008274:	691b      	ldr	r3, [r3, #16]
 8008276:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800827a:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800827c:	4b82      	ldr	r3, [pc, #520]	; (8008488 <HAL_RCC_OscConfig+0x4f8>)
 800827e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008280:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8008282:	69bb      	ldr	r3, [r7, #24]
 8008284:	2b08      	cmp	r3, #8
 8008286:	d007      	beq.n	8008298 <HAL_RCC_OscConfig+0x308>
 8008288:	69bb      	ldr	r3, [r7, #24]
 800828a:	2b18      	cmp	r3, #24
 800828c:	d13a      	bne.n	8008304 <HAL_RCC_OscConfig+0x374>
 800828e:	697b      	ldr	r3, [r7, #20]
 8008290:	f003 0303 	and.w	r3, r3, #3
 8008294:	2b01      	cmp	r3, #1
 8008296:	d135      	bne.n	8008304 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8008298:	4b7b      	ldr	r3, [pc, #492]	; (8008488 <HAL_RCC_OscConfig+0x4f8>)
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80082a0:	2b00      	cmp	r3, #0
 80082a2:	d005      	beq.n	80082b0 <HAL_RCC_OscConfig+0x320>
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	69db      	ldr	r3, [r3, #28]
 80082a8:	2b80      	cmp	r3, #128	; 0x80
 80082aa:	d001      	beq.n	80082b0 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 80082ac:	2301      	movs	r3, #1
 80082ae:	e296      	b.n	80087de <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80082b0:	f7fe fd86 	bl	8006dc0 <HAL_GetREVID>
 80082b4:	4603      	mov	r3, r0
 80082b6:	f241 0203 	movw	r2, #4099	; 0x1003
 80082ba:	4293      	cmp	r3, r2
 80082bc:	d817      	bhi.n	80082ee <HAL_RCC_OscConfig+0x35e>
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	6a1b      	ldr	r3, [r3, #32]
 80082c2:	2b20      	cmp	r3, #32
 80082c4:	d108      	bne.n	80082d8 <HAL_RCC_OscConfig+0x348>
 80082c6:	4b70      	ldr	r3, [pc, #448]	; (8008488 <HAL_RCC_OscConfig+0x4f8>)
 80082c8:	685b      	ldr	r3, [r3, #4]
 80082ca:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80082ce:	4a6e      	ldr	r2, [pc, #440]	; (8008488 <HAL_RCC_OscConfig+0x4f8>)
 80082d0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80082d4:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80082d6:	e075      	b.n	80083c4 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80082d8:	4b6b      	ldr	r3, [pc, #428]	; (8008488 <HAL_RCC_OscConfig+0x4f8>)
 80082da:	685b      	ldr	r3, [r3, #4]
 80082dc:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	6a1b      	ldr	r3, [r3, #32]
 80082e4:	069b      	lsls	r3, r3, #26
 80082e6:	4968      	ldr	r1, [pc, #416]	; (8008488 <HAL_RCC_OscConfig+0x4f8>)
 80082e8:	4313      	orrs	r3, r2
 80082ea:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80082ec:	e06a      	b.n	80083c4 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80082ee:	4b66      	ldr	r3, [pc, #408]	; (8008488 <HAL_RCC_OscConfig+0x4f8>)
 80082f0:	68db      	ldr	r3, [r3, #12]
 80082f2:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	6a1b      	ldr	r3, [r3, #32]
 80082fa:	061b      	lsls	r3, r3, #24
 80082fc:	4962      	ldr	r1, [pc, #392]	; (8008488 <HAL_RCC_OscConfig+0x4f8>)
 80082fe:	4313      	orrs	r3, r2
 8008300:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8008302:	e05f      	b.n	80083c4 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	69db      	ldr	r3, [r3, #28]
 8008308:	2b00      	cmp	r3, #0
 800830a:	d042      	beq.n	8008392 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800830c:	4b5e      	ldr	r3, [pc, #376]	; (8008488 <HAL_RCC_OscConfig+0x4f8>)
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	4a5d      	ldr	r2, [pc, #372]	; (8008488 <HAL_RCC_OscConfig+0x4f8>)
 8008312:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008316:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008318:	f7fe fd22 	bl	8006d60 <HAL_GetTick>
 800831c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800831e:	e008      	b.n	8008332 <HAL_RCC_OscConfig+0x3a2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8008320:	f7fe fd1e 	bl	8006d60 <HAL_GetTick>
 8008324:	4602      	mov	r2, r0
 8008326:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008328:	1ad3      	subs	r3, r2, r3
 800832a:	2b02      	cmp	r3, #2
 800832c:	d901      	bls.n	8008332 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 800832e:	2303      	movs	r3, #3
 8008330:	e255      	b.n	80087de <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008332:	4b55      	ldr	r3, [pc, #340]	; (8008488 <HAL_RCC_OscConfig+0x4f8>)
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800833a:	2b00      	cmp	r3, #0
 800833c:	d0f0      	beq.n	8008320 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800833e:	f7fe fd3f 	bl	8006dc0 <HAL_GetREVID>
 8008342:	4603      	mov	r3, r0
 8008344:	f241 0203 	movw	r2, #4099	; 0x1003
 8008348:	4293      	cmp	r3, r2
 800834a:	d817      	bhi.n	800837c <HAL_RCC_OscConfig+0x3ec>
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	6a1b      	ldr	r3, [r3, #32]
 8008350:	2b20      	cmp	r3, #32
 8008352:	d108      	bne.n	8008366 <HAL_RCC_OscConfig+0x3d6>
 8008354:	4b4c      	ldr	r3, [pc, #304]	; (8008488 <HAL_RCC_OscConfig+0x4f8>)
 8008356:	685b      	ldr	r3, [r3, #4]
 8008358:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800835c:	4a4a      	ldr	r2, [pc, #296]	; (8008488 <HAL_RCC_OscConfig+0x4f8>)
 800835e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008362:	6053      	str	r3, [r2, #4]
 8008364:	e02e      	b.n	80083c4 <HAL_RCC_OscConfig+0x434>
 8008366:	4b48      	ldr	r3, [pc, #288]	; (8008488 <HAL_RCC_OscConfig+0x4f8>)
 8008368:	685b      	ldr	r3, [r3, #4]
 800836a:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	6a1b      	ldr	r3, [r3, #32]
 8008372:	069b      	lsls	r3, r3, #26
 8008374:	4944      	ldr	r1, [pc, #272]	; (8008488 <HAL_RCC_OscConfig+0x4f8>)
 8008376:	4313      	orrs	r3, r2
 8008378:	604b      	str	r3, [r1, #4]
 800837a:	e023      	b.n	80083c4 <HAL_RCC_OscConfig+0x434>
 800837c:	4b42      	ldr	r3, [pc, #264]	; (8008488 <HAL_RCC_OscConfig+0x4f8>)
 800837e:	68db      	ldr	r3, [r3, #12]
 8008380:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	6a1b      	ldr	r3, [r3, #32]
 8008388:	061b      	lsls	r3, r3, #24
 800838a:	493f      	ldr	r1, [pc, #252]	; (8008488 <HAL_RCC_OscConfig+0x4f8>)
 800838c:	4313      	orrs	r3, r2
 800838e:	60cb      	str	r3, [r1, #12]
 8008390:	e018      	b.n	80083c4 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8008392:	4b3d      	ldr	r3, [pc, #244]	; (8008488 <HAL_RCC_OscConfig+0x4f8>)
 8008394:	681b      	ldr	r3, [r3, #0]
 8008396:	4a3c      	ldr	r2, [pc, #240]	; (8008488 <HAL_RCC_OscConfig+0x4f8>)
 8008398:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800839c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800839e:	f7fe fcdf 	bl	8006d60 <HAL_GetTick>
 80083a2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80083a4:	e008      	b.n	80083b8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80083a6:	f7fe fcdb 	bl	8006d60 <HAL_GetTick>
 80083aa:	4602      	mov	r2, r0
 80083ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083ae:	1ad3      	subs	r3, r2, r3
 80083b0:	2b02      	cmp	r3, #2
 80083b2:	d901      	bls.n	80083b8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80083b4:	2303      	movs	r3, #3
 80083b6:	e212      	b.n	80087de <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80083b8:	4b33      	ldr	r3, [pc, #204]	; (8008488 <HAL_RCC_OscConfig+0x4f8>)
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80083c0:	2b00      	cmp	r3, #0
 80083c2:	d1f0      	bne.n	80083a6 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	f003 0308 	and.w	r3, r3, #8
 80083cc:	2b00      	cmp	r3, #0
 80083ce:	d036      	beq.n	800843e <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	695b      	ldr	r3, [r3, #20]
 80083d4:	2b00      	cmp	r3, #0
 80083d6:	d019      	beq.n	800840c <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80083d8:	4b2b      	ldr	r3, [pc, #172]	; (8008488 <HAL_RCC_OscConfig+0x4f8>)
 80083da:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80083dc:	4a2a      	ldr	r2, [pc, #168]	; (8008488 <HAL_RCC_OscConfig+0x4f8>)
 80083de:	f043 0301 	orr.w	r3, r3, #1
 80083e2:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80083e4:	f7fe fcbc 	bl	8006d60 <HAL_GetTick>
 80083e8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80083ea:	e008      	b.n	80083fe <HAL_RCC_OscConfig+0x46e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80083ec:	f7fe fcb8 	bl	8006d60 <HAL_GetTick>
 80083f0:	4602      	mov	r2, r0
 80083f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083f4:	1ad3      	subs	r3, r2, r3
 80083f6:	2b02      	cmp	r3, #2
 80083f8:	d901      	bls.n	80083fe <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 80083fa:	2303      	movs	r3, #3
 80083fc:	e1ef      	b.n	80087de <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80083fe:	4b22      	ldr	r3, [pc, #136]	; (8008488 <HAL_RCC_OscConfig+0x4f8>)
 8008400:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008402:	f003 0302 	and.w	r3, r3, #2
 8008406:	2b00      	cmp	r3, #0
 8008408:	d0f0      	beq.n	80083ec <HAL_RCC_OscConfig+0x45c>
 800840a:	e018      	b.n	800843e <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800840c:	4b1e      	ldr	r3, [pc, #120]	; (8008488 <HAL_RCC_OscConfig+0x4f8>)
 800840e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008410:	4a1d      	ldr	r2, [pc, #116]	; (8008488 <HAL_RCC_OscConfig+0x4f8>)
 8008412:	f023 0301 	bic.w	r3, r3, #1
 8008416:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008418:	f7fe fca2 	bl	8006d60 <HAL_GetTick>
 800841c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800841e:	e008      	b.n	8008432 <HAL_RCC_OscConfig+0x4a2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008420:	f7fe fc9e 	bl	8006d60 <HAL_GetTick>
 8008424:	4602      	mov	r2, r0
 8008426:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008428:	1ad3      	subs	r3, r2, r3
 800842a:	2b02      	cmp	r3, #2
 800842c:	d901      	bls.n	8008432 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 800842e:	2303      	movs	r3, #3
 8008430:	e1d5      	b.n	80087de <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8008432:	4b15      	ldr	r3, [pc, #84]	; (8008488 <HAL_RCC_OscConfig+0x4f8>)
 8008434:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008436:	f003 0302 	and.w	r3, r3, #2
 800843a:	2b00      	cmp	r3, #0
 800843c:	d1f0      	bne.n	8008420 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	f003 0320 	and.w	r3, r3, #32
 8008446:	2b00      	cmp	r3, #0
 8008448:	d039      	beq.n	80084be <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	699b      	ldr	r3, [r3, #24]
 800844e:	2b00      	cmp	r3, #0
 8008450:	d01c      	beq.n	800848c <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8008452:	4b0d      	ldr	r3, [pc, #52]	; (8008488 <HAL_RCC_OscConfig+0x4f8>)
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	4a0c      	ldr	r2, [pc, #48]	; (8008488 <HAL_RCC_OscConfig+0x4f8>)
 8008458:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800845c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800845e:	f7fe fc7f 	bl	8006d60 <HAL_GetTick>
 8008462:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8008464:	e008      	b.n	8008478 <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8008466:	f7fe fc7b 	bl	8006d60 <HAL_GetTick>
 800846a:	4602      	mov	r2, r0
 800846c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800846e:	1ad3      	subs	r3, r2, r3
 8008470:	2b02      	cmp	r3, #2
 8008472:	d901      	bls.n	8008478 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8008474:	2303      	movs	r3, #3
 8008476:	e1b2      	b.n	80087de <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8008478:	4b03      	ldr	r3, [pc, #12]	; (8008488 <HAL_RCC_OscConfig+0x4f8>)
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008480:	2b00      	cmp	r3, #0
 8008482:	d0f0      	beq.n	8008466 <HAL_RCC_OscConfig+0x4d6>
 8008484:	e01b      	b.n	80084be <HAL_RCC_OscConfig+0x52e>
 8008486:	bf00      	nop
 8008488:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800848c:	4b9b      	ldr	r3, [pc, #620]	; (80086fc <HAL_RCC_OscConfig+0x76c>)
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	4a9a      	ldr	r2, [pc, #616]	; (80086fc <HAL_RCC_OscConfig+0x76c>)
 8008492:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008496:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8008498:	f7fe fc62 	bl	8006d60 <HAL_GetTick>
 800849c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800849e:	e008      	b.n	80084b2 <HAL_RCC_OscConfig+0x522>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80084a0:	f7fe fc5e 	bl	8006d60 <HAL_GetTick>
 80084a4:	4602      	mov	r2, r0
 80084a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084a8:	1ad3      	subs	r3, r2, r3
 80084aa:	2b02      	cmp	r3, #2
 80084ac:	d901      	bls.n	80084b2 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 80084ae:	2303      	movs	r3, #3
 80084b0:	e195      	b.n	80087de <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80084b2:	4b92      	ldr	r3, [pc, #584]	; (80086fc <HAL_RCC_OscConfig+0x76c>)
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	d1f0      	bne.n	80084a0 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	f003 0304 	and.w	r3, r3, #4
 80084c6:	2b00      	cmp	r3, #0
 80084c8:	f000 8081 	beq.w	80085ce <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80084cc:	4b8c      	ldr	r3, [pc, #560]	; (8008700 <HAL_RCC_OscConfig+0x770>)
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	4a8b      	ldr	r2, [pc, #556]	; (8008700 <HAL_RCC_OscConfig+0x770>)
 80084d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80084d6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80084d8:	f7fe fc42 	bl	8006d60 <HAL_GetTick>
 80084dc:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80084de:	e008      	b.n	80084f2 <HAL_RCC_OscConfig+0x562>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80084e0:	f7fe fc3e 	bl	8006d60 <HAL_GetTick>
 80084e4:	4602      	mov	r2, r0
 80084e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084e8:	1ad3      	subs	r3, r2, r3
 80084ea:	2b64      	cmp	r3, #100	; 0x64
 80084ec:	d901      	bls.n	80084f2 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 80084ee:	2303      	movs	r3, #3
 80084f0:	e175      	b.n	80087de <HAL_RCC_OscConfig+0x84e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80084f2:	4b83      	ldr	r3, [pc, #524]	; (8008700 <HAL_RCC_OscConfig+0x770>)
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80084fa:	2b00      	cmp	r3, #0
 80084fc:	d0f0      	beq.n	80084e0 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	689b      	ldr	r3, [r3, #8]
 8008502:	2b01      	cmp	r3, #1
 8008504:	d106      	bne.n	8008514 <HAL_RCC_OscConfig+0x584>
 8008506:	4b7d      	ldr	r3, [pc, #500]	; (80086fc <HAL_RCC_OscConfig+0x76c>)
 8008508:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800850a:	4a7c      	ldr	r2, [pc, #496]	; (80086fc <HAL_RCC_OscConfig+0x76c>)
 800850c:	f043 0301 	orr.w	r3, r3, #1
 8008510:	6713      	str	r3, [r2, #112]	; 0x70
 8008512:	e02d      	b.n	8008570 <HAL_RCC_OscConfig+0x5e0>
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	689b      	ldr	r3, [r3, #8]
 8008518:	2b00      	cmp	r3, #0
 800851a:	d10c      	bne.n	8008536 <HAL_RCC_OscConfig+0x5a6>
 800851c:	4b77      	ldr	r3, [pc, #476]	; (80086fc <HAL_RCC_OscConfig+0x76c>)
 800851e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008520:	4a76      	ldr	r2, [pc, #472]	; (80086fc <HAL_RCC_OscConfig+0x76c>)
 8008522:	f023 0301 	bic.w	r3, r3, #1
 8008526:	6713      	str	r3, [r2, #112]	; 0x70
 8008528:	4b74      	ldr	r3, [pc, #464]	; (80086fc <HAL_RCC_OscConfig+0x76c>)
 800852a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800852c:	4a73      	ldr	r2, [pc, #460]	; (80086fc <HAL_RCC_OscConfig+0x76c>)
 800852e:	f023 0304 	bic.w	r3, r3, #4
 8008532:	6713      	str	r3, [r2, #112]	; 0x70
 8008534:	e01c      	b.n	8008570 <HAL_RCC_OscConfig+0x5e0>
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	689b      	ldr	r3, [r3, #8]
 800853a:	2b05      	cmp	r3, #5
 800853c:	d10c      	bne.n	8008558 <HAL_RCC_OscConfig+0x5c8>
 800853e:	4b6f      	ldr	r3, [pc, #444]	; (80086fc <HAL_RCC_OscConfig+0x76c>)
 8008540:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008542:	4a6e      	ldr	r2, [pc, #440]	; (80086fc <HAL_RCC_OscConfig+0x76c>)
 8008544:	f043 0304 	orr.w	r3, r3, #4
 8008548:	6713      	str	r3, [r2, #112]	; 0x70
 800854a:	4b6c      	ldr	r3, [pc, #432]	; (80086fc <HAL_RCC_OscConfig+0x76c>)
 800854c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800854e:	4a6b      	ldr	r2, [pc, #428]	; (80086fc <HAL_RCC_OscConfig+0x76c>)
 8008550:	f043 0301 	orr.w	r3, r3, #1
 8008554:	6713      	str	r3, [r2, #112]	; 0x70
 8008556:	e00b      	b.n	8008570 <HAL_RCC_OscConfig+0x5e0>
 8008558:	4b68      	ldr	r3, [pc, #416]	; (80086fc <HAL_RCC_OscConfig+0x76c>)
 800855a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800855c:	4a67      	ldr	r2, [pc, #412]	; (80086fc <HAL_RCC_OscConfig+0x76c>)
 800855e:	f023 0301 	bic.w	r3, r3, #1
 8008562:	6713      	str	r3, [r2, #112]	; 0x70
 8008564:	4b65      	ldr	r3, [pc, #404]	; (80086fc <HAL_RCC_OscConfig+0x76c>)
 8008566:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008568:	4a64      	ldr	r2, [pc, #400]	; (80086fc <HAL_RCC_OscConfig+0x76c>)
 800856a:	f023 0304 	bic.w	r3, r3, #4
 800856e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	689b      	ldr	r3, [r3, #8]
 8008574:	2b00      	cmp	r3, #0
 8008576:	d015      	beq.n	80085a4 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008578:	f7fe fbf2 	bl	8006d60 <HAL_GetTick>
 800857c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800857e:	e00a      	b.n	8008596 <HAL_RCC_OscConfig+0x606>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008580:	f7fe fbee 	bl	8006d60 <HAL_GetTick>
 8008584:	4602      	mov	r2, r0
 8008586:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008588:	1ad3      	subs	r3, r2, r3
 800858a:	f241 3288 	movw	r2, #5000	; 0x1388
 800858e:	4293      	cmp	r3, r2
 8008590:	d901      	bls.n	8008596 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8008592:	2303      	movs	r3, #3
 8008594:	e123      	b.n	80087de <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008596:	4b59      	ldr	r3, [pc, #356]	; (80086fc <HAL_RCC_OscConfig+0x76c>)
 8008598:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800859a:	f003 0302 	and.w	r3, r3, #2
 800859e:	2b00      	cmp	r3, #0
 80085a0:	d0ee      	beq.n	8008580 <HAL_RCC_OscConfig+0x5f0>
 80085a2:	e014      	b.n	80085ce <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80085a4:	f7fe fbdc 	bl	8006d60 <HAL_GetTick>
 80085a8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80085aa:	e00a      	b.n	80085c2 <HAL_RCC_OscConfig+0x632>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80085ac:	f7fe fbd8 	bl	8006d60 <HAL_GetTick>
 80085b0:	4602      	mov	r2, r0
 80085b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085b4:	1ad3      	subs	r3, r2, r3
 80085b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80085ba:	4293      	cmp	r3, r2
 80085bc:	d901      	bls.n	80085c2 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 80085be:	2303      	movs	r3, #3
 80085c0:	e10d      	b.n	80087de <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80085c2:	4b4e      	ldr	r3, [pc, #312]	; (80086fc <HAL_RCC_OscConfig+0x76c>)
 80085c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80085c6:	f003 0302 	and.w	r3, r3, #2
 80085ca:	2b00      	cmp	r3, #0
 80085cc:	d1ee      	bne.n	80085ac <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085d2:	2b00      	cmp	r3, #0
 80085d4:	f000 8102 	beq.w	80087dc <HAL_RCC_OscConfig+0x84c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80085d8:	4b48      	ldr	r3, [pc, #288]	; (80086fc <HAL_RCC_OscConfig+0x76c>)
 80085da:	691b      	ldr	r3, [r3, #16]
 80085dc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80085e0:	2b18      	cmp	r3, #24
 80085e2:	f000 80bd 	beq.w	8008760 <HAL_RCC_OscConfig+0x7d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085ea:	2b02      	cmp	r3, #2
 80085ec:	f040 809e 	bne.w	800872c <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80085f0:	4b42      	ldr	r3, [pc, #264]	; (80086fc <HAL_RCC_OscConfig+0x76c>)
 80085f2:	681b      	ldr	r3, [r3, #0]
 80085f4:	4a41      	ldr	r2, [pc, #260]	; (80086fc <HAL_RCC_OscConfig+0x76c>)
 80085f6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80085fa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80085fc:	f7fe fbb0 	bl	8006d60 <HAL_GetTick>
 8008600:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008602:	e008      	b.n	8008616 <HAL_RCC_OscConfig+0x686>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008604:	f7fe fbac 	bl	8006d60 <HAL_GetTick>
 8008608:	4602      	mov	r2, r0
 800860a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800860c:	1ad3      	subs	r3, r2, r3
 800860e:	2b02      	cmp	r3, #2
 8008610:	d901      	bls.n	8008616 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8008612:	2303      	movs	r3, #3
 8008614:	e0e3      	b.n	80087de <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008616:	4b39      	ldr	r3, [pc, #228]	; (80086fc <HAL_RCC_OscConfig+0x76c>)
 8008618:	681b      	ldr	r3, [r3, #0]
 800861a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800861e:	2b00      	cmp	r3, #0
 8008620:	d1f0      	bne.n	8008604 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008622:	4b36      	ldr	r3, [pc, #216]	; (80086fc <HAL_RCC_OscConfig+0x76c>)
 8008624:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008626:	4b37      	ldr	r3, [pc, #220]	; (8008704 <HAL_RCC_OscConfig+0x774>)
 8008628:	4013      	ands	r3, r2
 800862a:	687a      	ldr	r2, [r7, #4]
 800862c:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800862e:	687a      	ldr	r2, [r7, #4]
 8008630:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8008632:	0112      	lsls	r2, r2, #4
 8008634:	430a      	orrs	r2, r1
 8008636:	4931      	ldr	r1, [pc, #196]	; (80086fc <HAL_RCC_OscConfig+0x76c>)
 8008638:	4313      	orrs	r3, r2
 800863a:	628b      	str	r3, [r1, #40]	; 0x28
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008640:	3b01      	subs	r3, #1
 8008642:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800864a:	3b01      	subs	r3, #1
 800864c:	025b      	lsls	r3, r3, #9
 800864e:	b29b      	uxth	r3, r3
 8008650:	431a      	orrs	r2, r3
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008656:	3b01      	subs	r3, #1
 8008658:	041b      	lsls	r3, r3, #16
 800865a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800865e:	431a      	orrs	r2, r3
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008664:	3b01      	subs	r3, #1
 8008666:	061b      	lsls	r3, r3, #24
 8008668:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800866c:	4923      	ldr	r1, [pc, #140]	; (80086fc <HAL_RCC_OscConfig+0x76c>)
 800866e:	4313      	orrs	r3, r2
 8008670:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8008672:	4b22      	ldr	r3, [pc, #136]	; (80086fc <HAL_RCC_OscConfig+0x76c>)
 8008674:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008676:	4a21      	ldr	r2, [pc, #132]	; (80086fc <HAL_RCC_OscConfig+0x76c>)
 8008678:	f023 0301 	bic.w	r3, r3, #1
 800867c:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800867e:	4b1f      	ldr	r3, [pc, #124]	; (80086fc <HAL_RCC_OscConfig+0x76c>)
 8008680:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008682:	4b21      	ldr	r3, [pc, #132]	; (8008708 <HAL_RCC_OscConfig+0x778>)
 8008684:	4013      	ands	r3, r2
 8008686:	687a      	ldr	r2, [r7, #4]
 8008688:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800868a:	00d2      	lsls	r2, r2, #3
 800868c:	491b      	ldr	r1, [pc, #108]	; (80086fc <HAL_RCC_OscConfig+0x76c>)
 800868e:	4313      	orrs	r3, r2
 8008690:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8008692:	4b1a      	ldr	r3, [pc, #104]	; (80086fc <HAL_RCC_OscConfig+0x76c>)
 8008694:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008696:	f023 020c 	bic.w	r2, r3, #12
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800869e:	4917      	ldr	r1, [pc, #92]	; (80086fc <HAL_RCC_OscConfig+0x76c>)
 80086a0:	4313      	orrs	r3, r2
 80086a2:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80086a4:	4b15      	ldr	r3, [pc, #84]	; (80086fc <HAL_RCC_OscConfig+0x76c>)
 80086a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086a8:	f023 0202 	bic.w	r2, r3, #2
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80086b0:	4912      	ldr	r1, [pc, #72]	; (80086fc <HAL_RCC_OscConfig+0x76c>)
 80086b2:	4313      	orrs	r3, r2
 80086b4:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80086b6:	4b11      	ldr	r3, [pc, #68]	; (80086fc <HAL_RCC_OscConfig+0x76c>)
 80086b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086ba:	4a10      	ldr	r2, [pc, #64]	; (80086fc <HAL_RCC_OscConfig+0x76c>)
 80086bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80086c0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80086c2:	4b0e      	ldr	r3, [pc, #56]	; (80086fc <HAL_RCC_OscConfig+0x76c>)
 80086c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086c6:	4a0d      	ldr	r2, [pc, #52]	; (80086fc <HAL_RCC_OscConfig+0x76c>)
 80086c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80086cc:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80086ce:	4b0b      	ldr	r3, [pc, #44]	; (80086fc <HAL_RCC_OscConfig+0x76c>)
 80086d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086d2:	4a0a      	ldr	r2, [pc, #40]	; (80086fc <HAL_RCC_OscConfig+0x76c>)
 80086d4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80086d8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 80086da:	4b08      	ldr	r3, [pc, #32]	; (80086fc <HAL_RCC_OscConfig+0x76c>)
 80086dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086de:	4a07      	ldr	r2, [pc, #28]	; (80086fc <HAL_RCC_OscConfig+0x76c>)
 80086e0:	f043 0301 	orr.w	r3, r3, #1
 80086e4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80086e6:	4b05      	ldr	r3, [pc, #20]	; (80086fc <HAL_RCC_OscConfig+0x76c>)
 80086e8:	681b      	ldr	r3, [r3, #0]
 80086ea:	4a04      	ldr	r2, [pc, #16]	; (80086fc <HAL_RCC_OscConfig+0x76c>)
 80086ec:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80086f0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80086f2:	f7fe fb35 	bl	8006d60 <HAL_GetTick>
 80086f6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80086f8:	e011      	b.n	800871e <HAL_RCC_OscConfig+0x78e>
 80086fa:	bf00      	nop
 80086fc:	58024400 	.word	0x58024400
 8008700:	58024800 	.word	0x58024800
 8008704:	fffffc0c 	.word	0xfffffc0c
 8008708:	ffff0007 	.word	0xffff0007
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800870c:	f7fe fb28 	bl	8006d60 <HAL_GetTick>
 8008710:	4602      	mov	r2, r0
 8008712:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008714:	1ad3      	subs	r3, r2, r3
 8008716:	2b02      	cmp	r3, #2
 8008718:	d901      	bls.n	800871e <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 800871a:	2303      	movs	r3, #3
 800871c:	e05f      	b.n	80087de <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800871e:	4b32      	ldr	r3, [pc, #200]	; (80087e8 <HAL_RCC_OscConfig+0x858>)
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008726:	2b00      	cmp	r3, #0
 8008728:	d0f0      	beq.n	800870c <HAL_RCC_OscConfig+0x77c>
 800872a:	e057      	b.n	80087dc <HAL_RCC_OscConfig+0x84c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800872c:	4b2e      	ldr	r3, [pc, #184]	; (80087e8 <HAL_RCC_OscConfig+0x858>)
 800872e:	681b      	ldr	r3, [r3, #0]
 8008730:	4a2d      	ldr	r2, [pc, #180]	; (80087e8 <HAL_RCC_OscConfig+0x858>)
 8008732:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008736:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008738:	f7fe fb12 	bl	8006d60 <HAL_GetTick>
 800873c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800873e:	e008      	b.n	8008752 <HAL_RCC_OscConfig+0x7c2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008740:	f7fe fb0e 	bl	8006d60 <HAL_GetTick>
 8008744:	4602      	mov	r2, r0
 8008746:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008748:	1ad3      	subs	r3, r2, r3
 800874a:	2b02      	cmp	r3, #2
 800874c:	d901      	bls.n	8008752 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 800874e:	2303      	movs	r3, #3
 8008750:	e045      	b.n	80087de <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008752:	4b25      	ldr	r3, [pc, #148]	; (80087e8 <HAL_RCC_OscConfig+0x858>)
 8008754:	681b      	ldr	r3, [r3, #0]
 8008756:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800875a:	2b00      	cmp	r3, #0
 800875c:	d1f0      	bne.n	8008740 <HAL_RCC_OscConfig+0x7b0>
 800875e:	e03d      	b.n	80087dc <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8008760:	4b21      	ldr	r3, [pc, #132]	; (80087e8 <HAL_RCC_OscConfig+0x858>)
 8008762:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008764:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8008766:	4b20      	ldr	r3, [pc, #128]	; (80087e8 <HAL_RCC_OscConfig+0x858>)
 8008768:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800876a:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008770:	2b01      	cmp	r3, #1
 8008772:	d031      	beq.n	80087d8 <HAL_RCC_OscConfig+0x848>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008774:	693b      	ldr	r3, [r7, #16]
 8008776:	f003 0203 	and.w	r2, r3, #3
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800877e:	429a      	cmp	r2, r3
 8008780:	d12a      	bne.n	80087d8 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8008782:	693b      	ldr	r3, [r7, #16]
 8008784:	091b      	lsrs	r3, r3, #4
 8008786:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800878e:	429a      	cmp	r2, r3
 8008790:	d122      	bne.n	80087d8 <HAL_RCC_OscConfig+0x848>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8008792:	68fb      	ldr	r3, [r7, #12]
 8008794:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800879c:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800879e:	429a      	cmp	r2, r3
 80087a0:	d11a      	bne.n	80087d8 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80087a2:	68fb      	ldr	r3, [r7, #12]
 80087a4:	0a5b      	lsrs	r3, r3, #9
 80087a6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80087ae:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80087b0:	429a      	cmp	r2, r3
 80087b2:	d111      	bne.n	80087d8 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80087b4:	68fb      	ldr	r3, [r7, #12]
 80087b6:	0c1b      	lsrs	r3, r3, #16
 80087b8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80087c0:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80087c2:	429a      	cmp	r2, r3
 80087c4:	d108      	bne.n	80087d8 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80087c6:	68fb      	ldr	r3, [r7, #12]
 80087c8:	0e1b      	lsrs	r3, r3, #24
 80087ca:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80087d2:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80087d4:	429a      	cmp	r2, r3
 80087d6:	d001      	beq.n	80087dc <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 80087d8:	2301      	movs	r3, #1
 80087da:	e000      	b.n	80087de <HAL_RCC_OscConfig+0x84e>
      }
    }
  }
  return HAL_OK;
 80087dc:	2300      	movs	r3, #0
}
 80087de:	4618      	mov	r0, r3
 80087e0:	3730      	adds	r7, #48	; 0x30
 80087e2:	46bd      	mov	sp, r7
 80087e4:	bd80      	pop	{r7, pc}
 80087e6:	bf00      	nop
 80087e8:	58024400 	.word	0x58024400

080087ec <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80087ec:	b580      	push	{r7, lr}
 80087ee:	b086      	sub	sp, #24
 80087f0:	af00      	add	r7, sp, #0
 80087f2:	6078      	str	r0, [r7, #4]
 80087f4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	2b00      	cmp	r3, #0
 80087fa:	d101      	bne.n	8008800 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80087fc:	2301      	movs	r3, #1
 80087fe:	e19c      	b.n	8008b3a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8008800:	4b8a      	ldr	r3, [pc, #552]	; (8008a2c <HAL_RCC_ClockConfig+0x240>)
 8008802:	681b      	ldr	r3, [r3, #0]
 8008804:	f003 030f 	and.w	r3, r3, #15
 8008808:	683a      	ldr	r2, [r7, #0]
 800880a:	429a      	cmp	r2, r3
 800880c:	d910      	bls.n	8008830 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800880e:	4b87      	ldr	r3, [pc, #540]	; (8008a2c <HAL_RCC_ClockConfig+0x240>)
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	f023 020f 	bic.w	r2, r3, #15
 8008816:	4985      	ldr	r1, [pc, #532]	; (8008a2c <HAL_RCC_ClockConfig+0x240>)
 8008818:	683b      	ldr	r3, [r7, #0]
 800881a:	4313      	orrs	r3, r2
 800881c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800881e:	4b83      	ldr	r3, [pc, #524]	; (8008a2c <HAL_RCC_ClockConfig+0x240>)
 8008820:	681b      	ldr	r3, [r3, #0]
 8008822:	f003 030f 	and.w	r3, r3, #15
 8008826:	683a      	ldr	r2, [r7, #0]
 8008828:	429a      	cmp	r2, r3
 800882a:	d001      	beq.n	8008830 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800882c:	2301      	movs	r3, #1
 800882e:	e184      	b.n	8008b3a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	681b      	ldr	r3, [r3, #0]
 8008834:	f003 0304 	and.w	r3, r3, #4
 8008838:	2b00      	cmp	r3, #0
 800883a:	d010      	beq.n	800885e <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	691a      	ldr	r2, [r3, #16]
 8008840:	4b7b      	ldr	r3, [pc, #492]	; (8008a30 <HAL_RCC_ClockConfig+0x244>)
 8008842:	699b      	ldr	r3, [r3, #24]
 8008844:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008848:	429a      	cmp	r2, r3
 800884a:	d908      	bls.n	800885e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800884c:	4b78      	ldr	r3, [pc, #480]	; (8008a30 <HAL_RCC_ClockConfig+0x244>)
 800884e:	699b      	ldr	r3, [r3, #24]
 8008850:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	691b      	ldr	r3, [r3, #16]
 8008858:	4975      	ldr	r1, [pc, #468]	; (8008a30 <HAL_RCC_ClockConfig+0x244>)
 800885a:	4313      	orrs	r3, r2
 800885c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	f003 0308 	and.w	r3, r3, #8
 8008866:	2b00      	cmp	r3, #0
 8008868:	d010      	beq.n	800888c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	695a      	ldr	r2, [r3, #20]
 800886e:	4b70      	ldr	r3, [pc, #448]	; (8008a30 <HAL_RCC_ClockConfig+0x244>)
 8008870:	69db      	ldr	r3, [r3, #28]
 8008872:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008876:	429a      	cmp	r2, r3
 8008878:	d908      	bls.n	800888c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800887a:	4b6d      	ldr	r3, [pc, #436]	; (8008a30 <HAL_RCC_ClockConfig+0x244>)
 800887c:	69db      	ldr	r3, [r3, #28]
 800887e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	695b      	ldr	r3, [r3, #20]
 8008886:	496a      	ldr	r1, [pc, #424]	; (8008a30 <HAL_RCC_ClockConfig+0x244>)
 8008888:	4313      	orrs	r3, r2
 800888a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	681b      	ldr	r3, [r3, #0]
 8008890:	f003 0310 	and.w	r3, r3, #16
 8008894:	2b00      	cmp	r3, #0
 8008896:	d010      	beq.n	80088ba <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	699a      	ldr	r2, [r3, #24]
 800889c:	4b64      	ldr	r3, [pc, #400]	; (8008a30 <HAL_RCC_ClockConfig+0x244>)
 800889e:	69db      	ldr	r3, [r3, #28]
 80088a0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80088a4:	429a      	cmp	r2, r3
 80088a6:	d908      	bls.n	80088ba <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80088a8:	4b61      	ldr	r3, [pc, #388]	; (8008a30 <HAL_RCC_ClockConfig+0x244>)
 80088aa:	69db      	ldr	r3, [r3, #28]
 80088ac:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	699b      	ldr	r3, [r3, #24]
 80088b4:	495e      	ldr	r1, [pc, #376]	; (8008a30 <HAL_RCC_ClockConfig+0x244>)
 80088b6:	4313      	orrs	r3, r2
 80088b8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	681b      	ldr	r3, [r3, #0]
 80088be:	f003 0320 	and.w	r3, r3, #32
 80088c2:	2b00      	cmp	r3, #0
 80088c4:	d010      	beq.n	80088e8 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	69da      	ldr	r2, [r3, #28]
 80088ca:	4b59      	ldr	r3, [pc, #356]	; (8008a30 <HAL_RCC_ClockConfig+0x244>)
 80088cc:	6a1b      	ldr	r3, [r3, #32]
 80088ce:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80088d2:	429a      	cmp	r2, r3
 80088d4:	d908      	bls.n	80088e8 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80088d6:	4b56      	ldr	r3, [pc, #344]	; (8008a30 <HAL_RCC_ClockConfig+0x244>)
 80088d8:	6a1b      	ldr	r3, [r3, #32]
 80088da:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	69db      	ldr	r3, [r3, #28]
 80088e2:	4953      	ldr	r1, [pc, #332]	; (8008a30 <HAL_RCC_ClockConfig+0x244>)
 80088e4:	4313      	orrs	r3, r2
 80088e6:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	681b      	ldr	r3, [r3, #0]
 80088ec:	f003 0302 	and.w	r3, r3, #2
 80088f0:	2b00      	cmp	r3, #0
 80088f2:	d010      	beq.n	8008916 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	68da      	ldr	r2, [r3, #12]
 80088f8:	4b4d      	ldr	r3, [pc, #308]	; (8008a30 <HAL_RCC_ClockConfig+0x244>)
 80088fa:	699b      	ldr	r3, [r3, #24]
 80088fc:	f003 030f 	and.w	r3, r3, #15
 8008900:	429a      	cmp	r2, r3
 8008902:	d908      	bls.n	8008916 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008904:	4b4a      	ldr	r3, [pc, #296]	; (8008a30 <HAL_RCC_ClockConfig+0x244>)
 8008906:	699b      	ldr	r3, [r3, #24]
 8008908:	f023 020f 	bic.w	r2, r3, #15
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	68db      	ldr	r3, [r3, #12]
 8008910:	4947      	ldr	r1, [pc, #284]	; (8008a30 <HAL_RCC_ClockConfig+0x244>)
 8008912:	4313      	orrs	r3, r2
 8008914:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	681b      	ldr	r3, [r3, #0]
 800891a:	f003 0301 	and.w	r3, r3, #1
 800891e:	2b00      	cmp	r3, #0
 8008920:	d055      	beq.n	80089ce <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8008922:	4b43      	ldr	r3, [pc, #268]	; (8008a30 <HAL_RCC_ClockConfig+0x244>)
 8008924:	699b      	ldr	r3, [r3, #24]
 8008926:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	689b      	ldr	r3, [r3, #8]
 800892e:	4940      	ldr	r1, [pc, #256]	; (8008a30 <HAL_RCC_ClockConfig+0x244>)
 8008930:	4313      	orrs	r3, r2
 8008932:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	685b      	ldr	r3, [r3, #4]
 8008938:	2b02      	cmp	r3, #2
 800893a:	d107      	bne.n	800894c <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800893c:	4b3c      	ldr	r3, [pc, #240]	; (8008a30 <HAL_RCC_ClockConfig+0x244>)
 800893e:	681b      	ldr	r3, [r3, #0]
 8008940:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008944:	2b00      	cmp	r3, #0
 8008946:	d121      	bne.n	800898c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8008948:	2301      	movs	r3, #1
 800894a:	e0f6      	b.n	8008b3a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	685b      	ldr	r3, [r3, #4]
 8008950:	2b03      	cmp	r3, #3
 8008952:	d107      	bne.n	8008964 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008954:	4b36      	ldr	r3, [pc, #216]	; (8008a30 <HAL_RCC_ClockConfig+0x244>)
 8008956:	681b      	ldr	r3, [r3, #0]
 8008958:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800895c:	2b00      	cmp	r3, #0
 800895e:	d115      	bne.n	800898c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8008960:	2301      	movs	r3, #1
 8008962:	e0ea      	b.n	8008b3a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	685b      	ldr	r3, [r3, #4]
 8008968:	2b01      	cmp	r3, #1
 800896a:	d107      	bne.n	800897c <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800896c:	4b30      	ldr	r3, [pc, #192]	; (8008a30 <HAL_RCC_ClockConfig+0x244>)
 800896e:	681b      	ldr	r3, [r3, #0]
 8008970:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008974:	2b00      	cmp	r3, #0
 8008976:	d109      	bne.n	800898c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8008978:	2301      	movs	r3, #1
 800897a:	e0de      	b.n	8008b3a <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800897c:	4b2c      	ldr	r3, [pc, #176]	; (8008a30 <HAL_RCC_ClockConfig+0x244>)
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	f003 0304 	and.w	r3, r3, #4
 8008984:	2b00      	cmp	r3, #0
 8008986:	d101      	bne.n	800898c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8008988:	2301      	movs	r3, #1
 800898a:	e0d6      	b.n	8008b3a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800898c:	4b28      	ldr	r3, [pc, #160]	; (8008a30 <HAL_RCC_ClockConfig+0x244>)
 800898e:	691b      	ldr	r3, [r3, #16]
 8008990:	f023 0207 	bic.w	r2, r3, #7
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	685b      	ldr	r3, [r3, #4]
 8008998:	4925      	ldr	r1, [pc, #148]	; (8008a30 <HAL_RCC_ClockConfig+0x244>)
 800899a:	4313      	orrs	r3, r2
 800899c:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800899e:	f7fe f9df 	bl	8006d60 <HAL_GetTick>
 80089a2:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80089a4:	e00a      	b.n	80089bc <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80089a6:	f7fe f9db 	bl	8006d60 <HAL_GetTick>
 80089aa:	4602      	mov	r2, r0
 80089ac:	697b      	ldr	r3, [r7, #20]
 80089ae:	1ad3      	subs	r3, r2, r3
 80089b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80089b4:	4293      	cmp	r3, r2
 80089b6:	d901      	bls.n	80089bc <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80089b8:	2303      	movs	r3, #3
 80089ba:	e0be      	b.n	8008b3a <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80089bc:	4b1c      	ldr	r3, [pc, #112]	; (8008a30 <HAL_RCC_ClockConfig+0x244>)
 80089be:	691b      	ldr	r3, [r3, #16]
 80089c0:	f003 0238 	and.w	r2, r3, #56	; 0x38
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	685b      	ldr	r3, [r3, #4]
 80089c8:	00db      	lsls	r3, r3, #3
 80089ca:	429a      	cmp	r2, r3
 80089cc:	d1eb      	bne.n	80089a6 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	681b      	ldr	r3, [r3, #0]
 80089d2:	f003 0302 	and.w	r3, r3, #2
 80089d6:	2b00      	cmp	r3, #0
 80089d8:	d010      	beq.n	80089fc <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	68da      	ldr	r2, [r3, #12]
 80089de:	4b14      	ldr	r3, [pc, #80]	; (8008a30 <HAL_RCC_ClockConfig+0x244>)
 80089e0:	699b      	ldr	r3, [r3, #24]
 80089e2:	f003 030f 	and.w	r3, r3, #15
 80089e6:	429a      	cmp	r2, r3
 80089e8:	d208      	bcs.n	80089fc <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80089ea:	4b11      	ldr	r3, [pc, #68]	; (8008a30 <HAL_RCC_ClockConfig+0x244>)
 80089ec:	699b      	ldr	r3, [r3, #24]
 80089ee:	f023 020f 	bic.w	r2, r3, #15
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	68db      	ldr	r3, [r3, #12]
 80089f6:	490e      	ldr	r1, [pc, #56]	; (8008a30 <HAL_RCC_ClockConfig+0x244>)
 80089f8:	4313      	orrs	r3, r2
 80089fa:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80089fc:	4b0b      	ldr	r3, [pc, #44]	; (8008a2c <HAL_RCC_ClockConfig+0x240>)
 80089fe:	681b      	ldr	r3, [r3, #0]
 8008a00:	f003 030f 	and.w	r3, r3, #15
 8008a04:	683a      	ldr	r2, [r7, #0]
 8008a06:	429a      	cmp	r2, r3
 8008a08:	d214      	bcs.n	8008a34 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008a0a:	4b08      	ldr	r3, [pc, #32]	; (8008a2c <HAL_RCC_ClockConfig+0x240>)
 8008a0c:	681b      	ldr	r3, [r3, #0]
 8008a0e:	f023 020f 	bic.w	r2, r3, #15
 8008a12:	4906      	ldr	r1, [pc, #24]	; (8008a2c <HAL_RCC_ClockConfig+0x240>)
 8008a14:	683b      	ldr	r3, [r7, #0]
 8008a16:	4313      	orrs	r3, r2
 8008a18:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008a1a:	4b04      	ldr	r3, [pc, #16]	; (8008a2c <HAL_RCC_ClockConfig+0x240>)
 8008a1c:	681b      	ldr	r3, [r3, #0]
 8008a1e:	f003 030f 	and.w	r3, r3, #15
 8008a22:	683a      	ldr	r2, [r7, #0]
 8008a24:	429a      	cmp	r2, r3
 8008a26:	d005      	beq.n	8008a34 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8008a28:	2301      	movs	r3, #1
 8008a2a:	e086      	b.n	8008b3a <HAL_RCC_ClockConfig+0x34e>
 8008a2c:	52002000 	.word	0x52002000
 8008a30:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	681b      	ldr	r3, [r3, #0]
 8008a38:	f003 0304 	and.w	r3, r3, #4
 8008a3c:	2b00      	cmp	r3, #0
 8008a3e:	d010      	beq.n	8008a62 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	691a      	ldr	r2, [r3, #16]
 8008a44:	4b3f      	ldr	r3, [pc, #252]	; (8008b44 <HAL_RCC_ClockConfig+0x358>)
 8008a46:	699b      	ldr	r3, [r3, #24]
 8008a48:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008a4c:	429a      	cmp	r2, r3
 8008a4e:	d208      	bcs.n	8008a62 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8008a50:	4b3c      	ldr	r3, [pc, #240]	; (8008b44 <HAL_RCC_ClockConfig+0x358>)
 8008a52:	699b      	ldr	r3, [r3, #24]
 8008a54:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	691b      	ldr	r3, [r3, #16]
 8008a5c:	4939      	ldr	r1, [pc, #228]	; (8008b44 <HAL_RCC_ClockConfig+0x358>)
 8008a5e:	4313      	orrs	r3, r2
 8008a60:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	681b      	ldr	r3, [r3, #0]
 8008a66:	f003 0308 	and.w	r3, r3, #8
 8008a6a:	2b00      	cmp	r3, #0
 8008a6c:	d010      	beq.n	8008a90 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	695a      	ldr	r2, [r3, #20]
 8008a72:	4b34      	ldr	r3, [pc, #208]	; (8008b44 <HAL_RCC_ClockConfig+0x358>)
 8008a74:	69db      	ldr	r3, [r3, #28]
 8008a76:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008a7a:	429a      	cmp	r2, r3
 8008a7c:	d208      	bcs.n	8008a90 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8008a7e:	4b31      	ldr	r3, [pc, #196]	; (8008b44 <HAL_RCC_ClockConfig+0x358>)
 8008a80:	69db      	ldr	r3, [r3, #28]
 8008a82:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	695b      	ldr	r3, [r3, #20]
 8008a8a:	492e      	ldr	r1, [pc, #184]	; (8008b44 <HAL_RCC_ClockConfig+0x358>)
 8008a8c:	4313      	orrs	r3, r2
 8008a8e:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	681b      	ldr	r3, [r3, #0]
 8008a94:	f003 0310 	and.w	r3, r3, #16
 8008a98:	2b00      	cmp	r3, #0
 8008a9a:	d010      	beq.n	8008abe <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	699a      	ldr	r2, [r3, #24]
 8008aa0:	4b28      	ldr	r3, [pc, #160]	; (8008b44 <HAL_RCC_ClockConfig+0x358>)
 8008aa2:	69db      	ldr	r3, [r3, #28]
 8008aa4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008aa8:	429a      	cmp	r2, r3
 8008aaa:	d208      	bcs.n	8008abe <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8008aac:	4b25      	ldr	r3, [pc, #148]	; (8008b44 <HAL_RCC_ClockConfig+0x358>)
 8008aae:	69db      	ldr	r3, [r3, #28]
 8008ab0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	699b      	ldr	r3, [r3, #24]
 8008ab8:	4922      	ldr	r1, [pc, #136]	; (8008b44 <HAL_RCC_ClockConfig+0x358>)
 8008aba:	4313      	orrs	r3, r2
 8008abc:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	681b      	ldr	r3, [r3, #0]
 8008ac2:	f003 0320 	and.w	r3, r3, #32
 8008ac6:	2b00      	cmp	r3, #0
 8008ac8:	d010      	beq.n	8008aec <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	69da      	ldr	r2, [r3, #28]
 8008ace:	4b1d      	ldr	r3, [pc, #116]	; (8008b44 <HAL_RCC_ClockConfig+0x358>)
 8008ad0:	6a1b      	ldr	r3, [r3, #32]
 8008ad2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008ad6:	429a      	cmp	r2, r3
 8008ad8:	d208      	bcs.n	8008aec <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8008ada:	4b1a      	ldr	r3, [pc, #104]	; (8008b44 <HAL_RCC_ClockConfig+0x358>)
 8008adc:	6a1b      	ldr	r3, [r3, #32]
 8008ade:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	69db      	ldr	r3, [r3, #28]
 8008ae6:	4917      	ldr	r1, [pc, #92]	; (8008b44 <HAL_RCC_ClockConfig+0x358>)
 8008ae8:	4313      	orrs	r3, r2
 8008aea:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8008aec:	f000 f834 	bl	8008b58 <HAL_RCC_GetSysClockFreq>
 8008af0:	4602      	mov	r2, r0
 8008af2:	4b14      	ldr	r3, [pc, #80]	; (8008b44 <HAL_RCC_ClockConfig+0x358>)
 8008af4:	699b      	ldr	r3, [r3, #24]
 8008af6:	0a1b      	lsrs	r3, r3, #8
 8008af8:	f003 030f 	and.w	r3, r3, #15
 8008afc:	4912      	ldr	r1, [pc, #72]	; (8008b48 <HAL_RCC_ClockConfig+0x35c>)
 8008afe:	5ccb      	ldrb	r3, [r1, r3]
 8008b00:	f003 031f 	and.w	r3, r3, #31
 8008b04:	fa22 f303 	lsr.w	r3, r2, r3
 8008b08:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8008b0a:	4b0e      	ldr	r3, [pc, #56]	; (8008b44 <HAL_RCC_ClockConfig+0x358>)
 8008b0c:	699b      	ldr	r3, [r3, #24]
 8008b0e:	f003 030f 	and.w	r3, r3, #15
 8008b12:	4a0d      	ldr	r2, [pc, #52]	; (8008b48 <HAL_RCC_ClockConfig+0x35c>)
 8008b14:	5cd3      	ldrb	r3, [r2, r3]
 8008b16:	f003 031f 	and.w	r3, r3, #31
 8008b1a:	693a      	ldr	r2, [r7, #16]
 8008b1c:	fa22 f303 	lsr.w	r3, r2, r3
 8008b20:	4a0a      	ldr	r2, [pc, #40]	; (8008b4c <HAL_RCC_ClockConfig+0x360>)
 8008b22:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8008b24:	4a0a      	ldr	r2, [pc, #40]	; (8008b50 <HAL_RCC_ClockConfig+0x364>)
 8008b26:	693b      	ldr	r3, [r7, #16]
 8008b28:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8008b2a:	4b0a      	ldr	r3, [pc, #40]	; (8008b54 <HAL_RCC_ClockConfig+0x368>)
 8008b2c:	681b      	ldr	r3, [r3, #0]
 8008b2e:	4618      	mov	r0, r3
 8008b30:	f7fe f8cc 	bl	8006ccc <HAL_InitTick>
 8008b34:	4603      	mov	r3, r0
 8008b36:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8008b38:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b3a:	4618      	mov	r0, r3
 8008b3c:	3718      	adds	r7, #24
 8008b3e:	46bd      	mov	sp, r7
 8008b40:	bd80      	pop	{r7, pc}
 8008b42:	bf00      	nop
 8008b44:	58024400 	.word	0x58024400
 8008b48:	080123a0 	.word	0x080123a0
 8008b4c:	24000014 	.word	0x24000014
 8008b50:	24000010 	.word	0x24000010
 8008b54:	240000a8 	.word	0x240000a8

08008b58 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008b58:	b480      	push	{r7}
 8008b5a:	b089      	sub	sp, #36	; 0x24
 8008b5c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008b5e:	4bb3      	ldr	r3, [pc, #716]	; (8008e2c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008b60:	691b      	ldr	r3, [r3, #16]
 8008b62:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008b66:	2b18      	cmp	r3, #24
 8008b68:	f200 8155 	bhi.w	8008e16 <HAL_RCC_GetSysClockFreq+0x2be>
 8008b6c:	a201      	add	r2, pc, #4	; (adr r2, 8008b74 <HAL_RCC_GetSysClockFreq+0x1c>)
 8008b6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b72:	bf00      	nop
 8008b74:	08008bd9 	.word	0x08008bd9
 8008b78:	08008e17 	.word	0x08008e17
 8008b7c:	08008e17 	.word	0x08008e17
 8008b80:	08008e17 	.word	0x08008e17
 8008b84:	08008e17 	.word	0x08008e17
 8008b88:	08008e17 	.word	0x08008e17
 8008b8c:	08008e17 	.word	0x08008e17
 8008b90:	08008e17 	.word	0x08008e17
 8008b94:	08008bff 	.word	0x08008bff
 8008b98:	08008e17 	.word	0x08008e17
 8008b9c:	08008e17 	.word	0x08008e17
 8008ba0:	08008e17 	.word	0x08008e17
 8008ba4:	08008e17 	.word	0x08008e17
 8008ba8:	08008e17 	.word	0x08008e17
 8008bac:	08008e17 	.word	0x08008e17
 8008bb0:	08008e17 	.word	0x08008e17
 8008bb4:	08008c05 	.word	0x08008c05
 8008bb8:	08008e17 	.word	0x08008e17
 8008bbc:	08008e17 	.word	0x08008e17
 8008bc0:	08008e17 	.word	0x08008e17
 8008bc4:	08008e17 	.word	0x08008e17
 8008bc8:	08008e17 	.word	0x08008e17
 8008bcc:	08008e17 	.word	0x08008e17
 8008bd0:	08008e17 	.word	0x08008e17
 8008bd4:	08008c0b 	.word	0x08008c0b
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008bd8:	4b94      	ldr	r3, [pc, #592]	; (8008e2c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008bda:	681b      	ldr	r3, [r3, #0]
 8008bdc:	f003 0320 	and.w	r3, r3, #32
 8008be0:	2b00      	cmp	r3, #0
 8008be2:	d009      	beq.n	8008bf8 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008be4:	4b91      	ldr	r3, [pc, #580]	; (8008e2c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008be6:	681b      	ldr	r3, [r3, #0]
 8008be8:	08db      	lsrs	r3, r3, #3
 8008bea:	f003 0303 	and.w	r3, r3, #3
 8008bee:	4a90      	ldr	r2, [pc, #576]	; (8008e30 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8008bf0:	fa22 f303 	lsr.w	r3, r2, r3
 8008bf4:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8008bf6:	e111      	b.n	8008e1c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8008bf8:	4b8d      	ldr	r3, [pc, #564]	; (8008e30 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8008bfa:	61bb      	str	r3, [r7, #24]
    break;
 8008bfc:	e10e      	b.n	8008e1c <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8008bfe:	4b8d      	ldr	r3, [pc, #564]	; (8008e34 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8008c00:	61bb      	str	r3, [r7, #24]
    break;
 8008c02:	e10b      	b.n	8008e1c <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8008c04:	4b8c      	ldr	r3, [pc, #560]	; (8008e38 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8008c06:	61bb      	str	r3, [r7, #24]
    break;
 8008c08:	e108      	b.n	8008e1c <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008c0a:	4b88      	ldr	r3, [pc, #544]	; (8008e2c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008c0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c0e:	f003 0303 	and.w	r3, r3, #3
 8008c12:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8008c14:	4b85      	ldr	r3, [pc, #532]	; (8008e2c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008c16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c18:	091b      	lsrs	r3, r3, #4
 8008c1a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008c1e:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8008c20:	4b82      	ldr	r3, [pc, #520]	; (8008e2c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008c22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c24:	f003 0301 	and.w	r3, r3, #1
 8008c28:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8008c2a:	4b80      	ldr	r3, [pc, #512]	; (8008e2c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008c2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008c2e:	08db      	lsrs	r3, r3, #3
 8008c30:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008c34:	68fa      	ldr	r2, [r7, #12]
 8008c36:	fb02 f303 	mul.w	r3, r2, r3
 8008c3a:	ee07 3a90 	vmov	s15, r3
 8008c3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008c42:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8008c46:	693b      	ldr	r3, [r7, #16]
 8008c48:	2b00      	cmp	r3, #0
 8008c4a:	f000 80e1 	beq.w	8008e10 <HAL_RCC_GetSysClockFreq+0x2b8>
 8008c4e:	697b      	ldr	r3, [r7, #20]
 8008c50:	2b02      	cmp	r3, #2
 8008c52:	f000 8083 	beq.w	8008d5c <HAL_RCC_GetSysClockFreq+0x204>
 8008c56:	697b      	ldr	r3, [r7, #20]
 8008c58:	2b02      	cmp	r3, #2
 8008c5a:	f200 80a1 	bhi.w	8008da0 <HAL_RCC_GetSysClockFreq+0x248>
 8008c5e:	697b      	ldr	r3, [r7, #20]
 8008c60:	2b00      	cmp	r3, #0
 8008c62:	d003      	beq.n	8008c6c <HAL_RCC_GetSysClockFreq+0x114>
 8008c64:	697b      	ldr	r3, [r7, #20]
 8008c66:	2b01      	cmp	r3, #1
 8008c68:	d056      	beq.n	8008d18 <HAL_RCC_GetSysClockFreq+0x1c0>
 8008c6a:	e099      	b.n	8008da0 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008c6c:	4b6f      	ldr	r3, [pc, #444]	; (8008e2c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008c6e:	681b      	ldr	r3, [r3, #0]
 8008c70:	f003 0320 	and.w	r3, r3, #32
 8008c74:	2b00      	cmp	r3, #0
 8008c76:	d02d      	beq.n	8008cd4 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008c78:	4b6c      	ldr	r3, [pc, #432]	; (8008e2c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008c7a:	681b      	ldr	r3, [r3, #0]
 8008c7c:	08db      	lsrs	r3, r3, #3
 8008c7e:	f003 0303 	and.w	r3, r3, #3
 8008c82:	4a6b      	ldr	r2, [pc, #428]	; (8008e30 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8008c84:	fa22 f303 	lsr.w	r3, r2, r3
 8008c88:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	ee07 3a90 	vmov	s15, r3
 8008c90:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008c94:	693b      	ldr	r3, [r7, #16]
 8008c96:	ee07 3a90 	vmov	s15, r3
 8008c9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008c9e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008ca2:	4b62      	ldr	r3, [pc, #392]	; (8008e2c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008ca4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ca6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008caa:	ee07 3a90 	vmov	s15, r3
 8008cae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008cb2:	ed97 6a02 	vldr	s12, [r7, #8]
 8008cb6:	eddf 5a61 	vldr	s11, [pc, #388]	; 8008e3c <HAL_RCC_GetSysClockFreq+0x2e4>
 8008cba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008cbe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008cc2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008cc6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008cca:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008cce:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8008cd2:	e087      	b.n	8008de4 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008cd4:	693b      	ldr	r3, [r7, #16]
 8008cd6:	ee07 3a90 	vmov	s15, r3
 8008cda:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008cde:	eddf 6a58 	vldr	s13, [pc, #352]	; 8008e40 <HAL_RCC_GetSysClockFreq+0x2e8>
 8008ce2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008ce6:	4b51      	ldr	r3, [pc, #324]	; (8008e2c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008ce8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008cea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008cee:	ee07 3a90 	vmov	s15, r3
 8008cf2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008cf6:	ed97 6a02 	vldr	s12, [r7, #8]
 8008cfa:	eddf 5a50 	vldr	s11, [pc, #320]	; 8008e3c <HAL_RCC_GetSysClockFreq+0x2e4>
 8008cfe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008d02:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008d06:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008d0a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008d0e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008d12:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008d16:	e065      	b.n	8008de4 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008d18:	693b      	ldr	r3, [r7, #16]
 8008d1a:	ee07 3a90 	vmov	s15, r3
 8008d1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008d22:	eddf 6a48 	vldr	s13, [pc, #288]	; 8008e44 <HAL_RCC_GetSysClockFreq+0x2ec>
 8008d26:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008d2a:	4b40      	ldr	r3, [pc, #256]	; (8008e2c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008d2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d2e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008d32:	ee07 3a90 	vmov	s15, r3
 8008d36:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008d3a:	ed97 6a02 	vldr	s12, [r7, #8]
 8008d3e:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8008e3c <HAL_RCC_GetSysClockFreq+0x2e4>
 8008d42:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008d46:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008d4a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008d4e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008d52:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008d56:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008d5a:	e043      	b.n	8008de4 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008d5c:	693b      	ldr	r3, [r7, #16]
 8008d5e:	ee07 3a90 	vmov	s15, r3
 8008d62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008d66:	eddf 6a38 	vldr	s13, [pc, #224]	; 8008e48 <HAL_RCC_GetSysClockFreq+0x2f0>
 8008d6a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008d6e:	4b2f      	ldr	r3, [pc, #188]	; (8008e2c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008d70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d72:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008d76:	ee07 3a90 	vmov	s15, r3
 8008d7a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008d7e:	ed97 6a02 	vldr	s12, [r7, #8]
 8008d82:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8008e3c <HAL_RCC_GetSysClockFreq+0x2e4>
 8008d86:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008d8a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008d8e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008d92:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008d96:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008d9a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008d9e:	e021      	b.n	8008de4 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008da0:	693b      	ldr	r3, [r7, #16]
 8008da2:	ee07 3a90 	vmov	s15, r3
 8008da6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008daa:	eddf 6a26 	vldr	s13, [pc, #152]	; 8008e44 <HAL_RCC_GetSysClockFreq+0x2ec>
 8008dae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008db2:	4b1e      	ldr	r3, [pc, #120]	; (8008e2c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008db4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008db6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008dba:	ee07 3a90 	vmov	s15, r3
 8008dbe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008dc2:	ed97 6a02 	vldr	s12, [r7, #8]
 8008dc6:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8008e3c <HAL_RCC_GetSysClockFreq+0x2e4>
 8008dca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008dce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008dd2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008dd6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008dda:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008dde:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008de2:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8008de4:	4b11      	ldr	r3, [pc, #68]	; (8008e2c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008de6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008de8:	0a5b      	lsrs	r3, r3, #9
 8008dea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008dee:	3301      	adds	r3, #1
 8008df0:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8008df2:	683b      	ldr	r3, [r7, #0]
 8008df4:	ee07 3a90 	vmov	s15, r3
 8008df8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8008dfc:	edd7 6a07 	vldr	s13, [r7, #28]
 8008e00:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008e04:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008e08:	ee17 3a90 	vmov	r3, s15
 8008e0c:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8008e0e:	e005      	b.n	8008e1c <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8008e10:	2300      	movs	r3, #0
 8008e12:	61bb      	str	r3, [r7, #24]
    break;
 8008e14:	e002      	b.n	8008e1c <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8008e16:	4b07      	ldr	r3, [pc, #28]	; (8008e34 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8008e18:	61bb      	str	r3, [r7, #24]
    break;
 8008e1a:	bf00      	nop
  }

  return sysclockfreq;
 8008e1c:	69bb      	ldr	r3, [r7, #24]
}
 8008e1e:	4618      	mov	r0, r3
 8008e20:	3724      	adds	r7, #36	; 0x24
 8008e22:	46bd      	mov	sp, r7
 8008e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e28:	4770      	bx	lr
 8008e2a:	bf00      	nop
 8008e2c:	58024400 	.word	0x58024400
 8008e30:	03d09000 	.word	0x03d09000
 8008e34:	003d0900 	.word	0x003d0900
 8008e38:	017d7840 	.word	0x017d7840
 8008e3c:	46000000 	.word	0x46000000
 8008e40:	4c742400 	.word	0x4c742400
 8008e44:	4a742400 	.word	0x4a742400
 8008e48:	4bbebc20 	.word	0x4bbebc20

08008e4c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008e4c:	b580      	push	{r7, lr}
 8008e4e:	b082      	sub	sp, #8
 8008e50:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8008e52:	f7ff fe81 	bl	8008b58 <HAL_RCC_GetSysClockFreq>
 8008e56:	4602      	mov	r2, r0
 8008e58:	4b10      	ldr	r3, [pc, #64]	; (8008e9c <HAL_RCC_GetHCLKFreq+0x50>)
 8008e5a:	699b      	ldr	r3, [r3, #24]
 8008e5c:	0a1b      	lsrs	r3, r3, #8
 8008e5e:	f003 030f 	and.w	r3, r3, #15
 8008e62:	490f      	ldr	r1, [pc, #60]	; (8008ea0 <HAL_RCC_GetHCLKFreq+0x54>)
 8008e64:	5ccb      	ldrb	r3, [r1, r3]
 8008e66:	f003 031f 	and.w	r3, r3, #31
 8008e6a:	fa22 f303 	lsr.w	r3, r2, r3
 8008e6e:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8008e70:	4b0a      	ldr	r3, [pc, #40]	; (8008e9c <HAL_RCC_GetHCLKFreq+0x50>)
 8008e72:	699b      	ldr	r3, [r3, #24]
 8008e74:	f003 030f 	and.w	r3, r3, #15
 8008e78:	4a09      	ldr	r2, [pc, #36]	; (8008ea0 <HAL_RCC_GetHCLKFreq+0x54>)
 8008e7a:	5cd3      	ldrb	r3, [r2, r3]
 8008e7c:	f003 031f 	and.w	r3, r3, #31
 8008e80:	687a      	ldr	r2, [r7, #4]
 8008e82:	fa22 f303 	lsr.w	r3, r2, r3
 8008e86:	4a07      	ldr	r2, [pc, #28]	; (8008ea4 <HAL_RCC_GetHCLKFreq+0x58>)
 8008e88:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8008e8a:	4a07      	ldr	r2, [pc, #28]	; (8008ea8 <HAL_RCC_GetHCLKFreq+0x5c>)
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8008e90:	4b04      	ldr	r3, [pc, #16]	; (8008ea4 <HAL_RCC_GetHCLKFreq+0x58>)
 8008e92:	681b      	ldr	r3, [r3, #0]
}
 8008e94:	4618      	mov	r0, r3
 8008e96:	3708      	adds	r7, #8
 8008e98:	46bd      	mov	sp, r7
 8008e9a:	bd80      	pop	{r7, pc}
 8008e9c:	58024400 	.word	0x58024400
 8008ea0:	080123a0 	.word	0x080123a0
 8008ea4:	24000014 	.word	0x24000014
 8008ea8:	24000010 	.word	0x24000010

08008eac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008eac:	b580      	push	{r7, lr}
 8008eae:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8008eb0:	f7ff ffcc 	bl	8008e4c <HAL_RCC_GetHCLKFreq>
 8008eb4:	4602      	mov	r2, r0
 8008eb6:	4b06      	ldr	r3, [pc, #24]	; (8008ed0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008eb8:	69db      	ldr	r3, [r3, #28]
 8008eba:	091b      	lsrs	r3, r3, #4
 8008ebc:	f003 0307 	and.w	r3, r3, #7
 8008ec0:	4904      	ldr	r1, [pc, #16]	; (8008ed4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8008ec2:	5ccb      	ldrb	r3, [r1, r3]
 8008ec4:	f003 031f 	and.w	r3, r3, #31
 8008ec8:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8008ecc:	4618      	mov	r0, r3
 8008ece:	bd80      	pop	{r7, pc}
 8008ed0:	58024400 	.word	0x58024400
 8008ed4:	080123a0 	.word	0x080123a0

08008ed8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008ed8:	b580      	push	{r7, lr}
 8008eda:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8008edc:	f7ff ffb6 	bl	8008e4c <HAL_RCC_GetHCLKFreq>
 8008ee0:	4602      	mov	r2, r0
 8008ee2:	4b06      	ldr	r3, [pc, #24]	; (8008efc <HAL_RCC_GetPCLK2Freq+0x24>)
 8008ee4:	69db      	ldr	r3, [r3, #28]
 8008ee6:	0a1b      	lsrs	r3, r3, #8
 8008ee8:	f003 0307 	and.w	r3, r3, #7
 8008eec:	4904      	ldr	r1, [pc, #16]	; (8008f00 <HAL_RCC_GetPCLK2Freq+0x28>)
 8008eee:	5ccb      	ldrb	r3, [r1, r3]
 8008ef0:	f003 031f 	and.w	r3, r3, #31
 8008ef4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8008ef8:	4618      	mov	r0, r3
 8008efa:	bd80      	pop	{r7, pc}
 8008efc:	58024400 	.word	0x58024400
 8008f00:	080123a0 	.word	0x080123a0

08008f04 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008f04:	b580      	push	{r7, lr}
 8008f06:	b086      	sub	sp, #24
 8008f08:	af00      	add	r7, sp, #0
 8008f0a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8008f0c:	2300      	movs	r3, #0
 8008f0e:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8008f10:	2300      	movs	r3, #0
 8008f12:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	681b      	ldr	r3, [r3, #0]
 8008f18:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008f1c:	2b00      	cmp	r3, #0
 8008f1e:	d03f      	beq.n	8008fa0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008f24:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008f28:	d02a      	beq.n	8008f80 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8008f2a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008f2e:	d824      	bhi.n	8008f7a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8008f30:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008f34:	d018      	beq.n	8008f68 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8008f36:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008f3a:	d81e      	bhi.n	8008f7a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8008f3c:	2b00      	cmp	r3, #0
 8008f3e:	d003      	beq.n	8008f48 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8008f40:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008f44:	d007      	beq.n	8008f56 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8008f46:	e018      	b.n	8008f7a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008f48:	4ba3      	ldr	r3, [pc, #652]	; (80091d8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8008f4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f4c:	4aa2      	ldr	r2, [pc, #648]	; (80091d8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8008f4e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008f52:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8008f54:	e015      	b.n	8008f82 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	3304      	adds	r3, #4
 8008f5a:	2102      	movs	r1, #2
 8008f5c:	4618      	mov	r0, r3
 8008f5e:	f001 f9d5 	bl	800a30c <RCCEx_PLL2_Config>
 8008f62:	4603      	mov	r3, r0
 8008f64:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8008f66:	e00c      	b.n	8008f82 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	3324      	adds	r3, #36	; 0x24
 8008f6c:	2102      	movs	r1, #2
 8008f6e:	4618      	mov	r0, r3
 8008f70:	f001 fa7e 	bl	800a470 <RCCEx_PLL3_Config>
 8008f74:	4603      	mov	r3, r0
 8008f76:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8008f78:	e003      	b.n	8008f82 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008f7a:	2301      	movs	r3, #1
 8008f7c:	75fb      	strb	r3, [r7, #23]
      break;
 8008f7e:	e000      	b.n	8008f82 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8008f80:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008f82:	7dfb      	ldrb	r3, [r7, #23]
 8008f84:	2b00      	cmp	r3, #0
 8008f86:	d109      	bne.n	8008f9c <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8008f88:	4b93      	ldr	r3, [pc, #588]	; (80091d8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8008f8a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008f8c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008f94:	4990      	ldr	r1, [pc, #576]	; (80091d8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8008f96:	4313      	orrs	r3, r2
 8008f98:	650b      	str	r3, [r1, #80]	; 0x50
 8008f9a:	e001      	b.n	8008fa0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008f9c:	7dfb      	ldrb	r3, [r7, #23]
 8008f9e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	681b      	ldr	r3, [r3, #0]
 8008fa4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008fa8:	2b00      	cmp	r3, #0
 8008faa:	d03d      	beq.n	8009028 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008fb0:	2b04      	cmp	r3, #4
 8008fb2:	d826      	bhi.n	8009002 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8008fb4:	a201      	add	r2, pc, #4	; (adr r2, 8008fbc <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8008fb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008fba:	bf00      	nop
 8008fbc:	08008fd1 	.word	0x08008fd1
 8008fc0:	08008fdf 	.word	0x08008fdf
 8008fc4:	08008ff1 	.word	0x08008ff1
 8008fc8:	08009009 	.word	0x08009009
 8008fcc:	08009009 	.word	0x08009009
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008fd0:	4b81      	ldr	r3, [pc, #516]	; (80091d8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8008fd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008fd4:	4a80      	ldr	r2, [pc, #512]	; (80091d8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8008fd6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008fda:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8008fdc:	e015      	b.n	800900a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	3304      	adds	r3, #4
 8008fe2:	2100      	movs	r1, #0
 8008fe4:	4618      	mov	r0, r3
 8008fe6:	f001 f991 	bl	800a30c <RCCEx_PLL2_Config>
 8008fea:	4603      	mov	r3, r0
 8008fec:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8008fee:	e00c      	b.n	800900a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	3324      	adds	r3, #36	; 0x24
 8008ff4:	2100      	movs	r1, #0
 8008ff6:	4618      	mov	r0, r3
 8008ff8:	f001 fa3a 	bl	800a470 <RCCEx_PLL3_Config>
 8008ffc:	4603      	mov	r3, r0
 8008ffe:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8009000:	e003      	b.n	800900a <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009002:	2301      	movs	r3, #1
 8009004:	75fb      	strb	r3, [r7, #23]
      break;
 8009006:	e000      	b.n	800900a <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8009008:	bf00      	nop
    }

    if(ret == HAL_OK)
 800900a:	7dfb      	ldrb	r3, [r7, #23]
 800900c:	2b00      	cmp	r3, #0
 800900e:	d109      	bne.n	8009024 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8009010:	4b71      	ldr	r3, [pc, #452]	; (80091d8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8009012:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009014:	f023 0207 	bic.w	r2, r3, #7
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800901c:	496e      	ldr	r1, [pc, #440]	; (80091d8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800901e:	4313      	orrs	r3, r2
 8009020:	650b      	str	r3, [r1, #80]	; 0x50
 8009022:	e001      	b.n	8009028 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009024:	7dfb      	ldrb	r3, [r7, #23]
 8009026:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	681b      	ldr	r3, [r3, #0]
 800902c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009030:	2b00      	cmp	r3, #0
 8009032:	d042      	beq.n	80090ba <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009038:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800903c:	d02b      	beq.n	8009096 <HAL_RCCEx_PeriphCLKConfig+0x192>
 800903e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009042:	d825      	bhi.n	8009090 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8009044:	2bc0      	cmp	r3, #192	; 0xc0
 8009046:	d028      	beq.n	800909a <HAL_RCCEx_PeriphCLKConfig+0x196>
 8009048:	2bc0      	cmp	r3, #192	; 0xc0
 800904a:	d821      	bhi.n	8009090 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 800904c:	2b80      	cmp	r3, #128	; 0x80
 800904e:	d016      	beq.n	800907e <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8009050:	2b80      	cmp	r3, #128	; 0x80
 8009052:	d81d      	bhi.n	8009090 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8009054:	2b00      	cmp	r3, #0
 8009056:	d002      	beq.n	800905e <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8009058:	2b40      	cmp	r3, #64	; 0x40
 800905a:	d007      	beq.n	800906c <HAL_RCCEx_PeriphCLKConfig+0x168>
 800905c:	e018      	b.n	8009090 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800905e:	4b5e      	ldr	r3, [pc, #376]	; (80091d8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8009060:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009062:	4a5d      	ldr	r2, [pc, #372]	; (80091d8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8009064:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009068:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800906a:	e017      	b.n	800909c <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	3304      	adds	r3, #4
 8009070:	2100      	movs	r1, #0
 8009072:	4618      	mov	r0, r3
 8009074:	f001 f94a 	bl	800a30c <RCCEx_PLL2_Config>
 8009078:	4603      	mov	r3, r0
 800907a:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800907c:	e00e      	b.n	800909c <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	3324      	adds	r3, #36	; 0x24
 8009082:	2100      	movs	r1, #0
 8009084:	4618      	mov	r0, r3
 8009086:	f001 f9f3 	bl	800a470 <RCCEx_PLL3_Config>
 800908a:	4603      	mov	r3, r0
 800908c:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800908e:	e005      	b.n	800909c <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009090:	2301      	movs	r3, #1
 8009092:	75fb      	strb	r3, [r7, #23]
      break;
 8009094:	e002      	b.n	800909c <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8009096:	bf00      	nop
 8009098:	e000      	b.n	800909c <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 800909a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800909c:	7dfb      	ldrb	r3, [r7, #23]
 800909e:	2b00      	cmp	r3, #0
 80090a0:	d109      	bne.n	80090b6 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80090a2:	4b4d      	ldr	r3, [pc, #308]	; (80091d8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80090a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80090a6:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80090ae:	494a      	ldr	r1, [pc, #296]	; (80091d8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80090b0:	4313      	orrs	r3, r2
 80090b2:	650b      	str	r3, [r1, #80]	; 0x50
 80090b4:	e001      	b.n	80090ba <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80090b6:	7dfb      	ldrb	r3, [r7, #23]
 80090b8:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	681b      	ldr	r3, [r3, #0]
 80090be:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80090c2:	2b00      	cmp	r3, #0
 80090c4:	d049      	beq.n	800915a <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80090cc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80090d0:	d030      	beq.n	8009134 <HAL_RCCEx_PeriphCLKConfig+0x230>
 80090d2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80090d6:	d82a      	bhi.n	800912e <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80090d8:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80090dc:	d02c      	beq.n	8009138 <HAL_RCCEx_PeriphCLKConfig+0x234>
 80090de:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80090e2:	d824      	bhi.n	800912e <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80090e4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80090e8:	d018      	beq.n	800911c <HAL_RCCEx_PeriphCLKConfig+0x218>
 80090ea:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80090ee:	d81e      	bhi.n	800912e <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80090f0:	2b00      	cmp	r3, #0
 80090f2:	d003      	beq.n	80090fc <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 80090f4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80090f8:	d007      	beq.n	800910a <HAL_RCCEx_PeriphCLKConfig+0x206>
 80090fa:	e018      	b.n	800912e <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80090fc:	4b36      	ldr	r3, [pc, #216]	; (80091d8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80090fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009100:	4a35      	ldr	r2, [pc, #212]	; (80091d8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8009102:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009106:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8009108:	e017      	b.n	800913a <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	3304      	adds	r3, #4
 800910e:	2100      	movs	r1, #0
 8009110:	4618      	mov	r0, r3
 8009112:	f001 f8fb 	bl	800a30c <RCCEx_PLL2_Config>
 8009116:	4603      	mov	r3, r0
 8009118:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800911a:	e00e      	b.n	800913a <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	3324      	adds	r3, #36	; 0x24
 8009120:	2100      	movs	r1, #0
 8009122:	4618      	mov	r0, r3
 8009124:	f001 f9a4 	bl	800a470 <RCCEx_PLL3_Config>
 8009128:	4603      	mov	r3, r0
 800912a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800912c:	e005      	b.n	800913a <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800912e:	2301      	movs	r3, #1
 8009130:	75fb      	strb	r3, [r7, #23]
      break;
 8009132:	e002      	b.n	800913a <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8009134:	bf00      	nop
 8009136:	e000      	b.n	800913a <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8009138:	bf00      	nop
    }

    if(ret == HAL_OK)
 800913a:	7dfb      	ldrb	r3, [r7, #23]
 800913c:	2b00      	cmp	r3, #0
 800913e:	d10a      	bne.n	8009156 <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8009140:	4b25      	ldr	r3, [pc, #148]	; (80091d8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8009142:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009144:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800914e:	4922      	ldr	r1, [pc, #136]	; (80091d8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8009150:	4313      	orrs	r3, r2
 8009152:	658b      	str	r3, [r1, #88]	; 0x58
 8009154:	e001      	b.n	800915a <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009156:	7dfb      	ldrb	r3, [r7, #23]
 8009158:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	681b      	ldr	r3, [r3, #0]
 800915e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009162:	2b00      	cmp	r3, #0
 8009164:	d04b      	beq.n	80091fe <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800916c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009170:	d030      	beq.n	80091d4 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8009172:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009176:	d82a      	bhi.n	80091ce <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8009178:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800917c:	d02e      	beq.n	80091dc <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 800917e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8009182:	d824      	bhi.n	80091ce <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8009184:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009188:	d018      	beq.n	80091bc <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 800918a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800918e:	d81e      	bhi.n	80091ce <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8009190:	2b00      	cmp	r3, #0
 8009192:	d003      	beq.n	800919c <HAL_RCCEx_PeriphCLKConfig+0x298>
 8009194:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8009198:	d007      	beq.n	80091aa <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 800919a:	e018      	b.n	80091ce <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800919c:	4b0e      	ldr	r3, [pc, #56]	; (80091d8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800919e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80091a0:	4a0d      	ldr	r2, [pc, #52]	; (80091d8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80091a2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80091a6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80091a8:	e019      	b.n	80091de <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	3304      	adds	r3, #4
 80091ae:	2100      	movs	r1, #0
 80091b0:	4618      	mov	r0, r3
 80091b2:	f001 f8ab 	bl	800a30c <RCCEx_PLL2_Config>
 80091b6:	4603      	mov	r3, r0
 80091b8:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80091ba:	e010      	b.n	80091de <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	3324      	adds	r3, #36	; 0x24
 80091c0:	2100      	movs	r1, #0
 80091c2:	4618      	mov	r0, r3
 80091c4:	f001 f954 	bl	800a470 <RCCEx_PLL3_Config>
 80091c8:	4603      	mov	r3, r0
 80091ca:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80091cc:	e007      	b.n	80091de <HAL_RCCEx_PeriphCLKConfig+0x2da>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80091ce:	2301      	movs	r3, #1
 80091d0:	75fb      	strb	r3, [r7, #23]
      break;
 80091d2:	e004      	b.n	80091de <HAL_RCCEx_PeriphCLKConfig+0x2da>
      break;
 80091d4:	bf00      	nop
 80091d6:	e002      	b.n	80091de <HAL_RCCEx_PeriphCLKConfig+0x2da>
 80091d8:	58024400 	.word	0x58024400
      break;
 80091dc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80091de:	7dfb      	ldrb	r3, [r7, #23]
 80091e0:	2b00      	cmp	r3, #0
 80091e2:	d10a      	bne.n	80091fa <HAL_RCCEx_PeriphCLKConfig+0x2f6>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80091e4:	4b99      	ldr	r3, [pc, #612]	; (800944c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80091e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80091e8:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80091f2:	4996      	ldr	r1, [pc, #600]	; (800944c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80091f4:	4313      	orrs	r3, r2
 80091f6:	658b      	str	r3, [r1, #88]	; 0x58
 80091f8:	e001      	b.n	80091fe <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80091fa:	7dfb      	ldrb	r3, [r7, #23]
 80091fc:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	681b      	ldr	r3, [r3, #0]
 8009202:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009206:	2b00      	cmp	r3, #0
 8009208:	d032      	beq.n	8009270 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    switch(PeriphClkInit->QspiClockSelection)
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800920e:	2b30      	cmp	r3, #48	; 0x30
 8009210:	d01c      	beq.n	800924c <HAL_RCCEx_PeriphCLKConfig+0x348>
 8009212:	2b30      	cmp	r3, #48	; 0x30
 8009214:	d817      	bhi.n	8009246 <HAL_RCCEx_PeriphCLKConfig+0x342>
 8009216:	2b20      	cmp	r3, #32
 8009218:	d00c      	beq.n	8009234 <HAL_RCCEx_PeriphCLKConfig+0x330>
 800921a:	2b20      	cmp	r3, #32
 800921c:	d813      	bhi.n	8009246 <HAL_RCCEx_PeriphCLKConfig+0x342>
 800921e:	2b00      	cmp	r3, #0
 8009220:	d016      	beq.n	8009250 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 8009222:	2b10      	cmp	r3, #16
 8009224:	d10f      	bne.n	8009246 <HAL_RCCEx_PeriphCLKConfig+0x342>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009226:	4b89      	ldr	r3, [pc, #548]	; (800944c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8009228:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800922a:	4a88      	ldr	r2, [pc, #544]	; (800944c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800922c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009230:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8009232:	e00e      	b.n	8009252 <HAL_RCCEx_PeriphCLKConfig+0x34e>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	3304      	adds	r3, #4
 8009238:	2102      	movs	r1, #2
 800923a:	4618      	mov	r0, r3
 800923c:	f001 f866 	bl	800a30c <RCCEx_PLL2_Config>
 8009240:	4603      	mov	r3, r0
 8009242:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8009244:	e005      	b.n	8009252 <HAL_RCCEx_PeriphCLKConfig+0x34e>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8009246:	2301      	movs	r3, #1
 8009248:	75fb      	strb	r3, [r7, #23]
      break;
 800924a:	e002      	b.n	8009252 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 800924c:	bf00      	nop
 800924e:	e000      	b.n	8009252 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8009250:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009252:	7dfb      	ldrb	r3, [r7, #23]
 8009254:	2b00      	cmp	r3, #0
 8009256:	d109      	bne.n	800926c <HAL_RCCEx_PeriphCLKConfig+0x368>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8009258:	4b7c      	ldr	r3, [pc, #496]	; (800944c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800925a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800925c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009264:	4979      	ldr	r1, [pc, #484]	; (800944c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8009266:	4313      	orrs	r3, r2
 8009268:	64cb      	str	r3, [r1, #76]	; 0x4c
 800926a:	e001      	b.n	8009270 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800926c:	7dfb      	ldrb	r3, [r7, #23]
 800926e:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	681b      	ldr	r3, [r3, #0]
 8009274:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009278:	2b00      	cmp	r3, #0
 800927a:	d047      	beq.n	800930c <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009280:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009284:	d030      	beq.n	80092e8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8009286:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800928a:	d82a      	bhi.n	80092e2 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 800928c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009290:	d02c      	beq.n	80092ec <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8009292:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009296:	d824      	bhi.n	80092e2 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8009298:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800929c:	d018      	beq.n	80092d0 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 800929e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80092a2:	d81e      	bhi.n	80092e2 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 80092a4:	2b00      	cmp	r3, #0
 80092a6:	d003      	beq.n	80092b0 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 80092a8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80092ac:	d007      	beq.n	80092be <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 80092ae:	e018      	b.n	80092e2 <HAL_RCCEx_PeriphCLKConfig+0x3de>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80092b0:	4b66      	ldr	r3, [pc, #408]	; (800944c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80092b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80092b4:	4a65      	ldr	r2, [pc, #404]	; (800944c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80092b6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80092ba:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80092bc:	e017      	b.n	80092ee <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	3304      	adds	r3, #4
 80092c2:	2100      	movs	r1, #0
 80092c4:	4618      	mov	r0, r3
 80092c6:	f001 f821 	bl	800a30c <RCCEx_PLL2_Config>
 80092ca:	4603      	mov	r3, r0
 80092cc:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80092ce:	e00e      	b.n	80092ee <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	3324      	adds	r3, #36	; 0x24
 80092d4:	2100      	movs	r1, #0
 80092d6:	4618      	mov	r0, r3
 80092d8:	f001 f8ca 	bl	800a470 <RCCEx_PLL3_Config>
 80092dc:	4603      	mov	r3, r0
 80092de:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80092e0:	e005      	b.n	80092ee <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80092e2:	2301      	movs	r3, #1
 80092e4:	75fb      	strb	r3, [r7, #23]
      break;
 80092e6:	e002      	b.n	80092ee <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 80092e8:	bf00      	nop
 80092ea:	e000      	b.n	80092ee <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 80092ec:	bf00      	nop
    }

    if(ret == HAL_OK)
 80092ee:	7dfb      	ldrb	r3, [r7, #23]
 80092f0:	2b00      	cmp	r3, #0
 80092f2:	d109      	bne.n	8009308 <HAL_RCCEx_PeriphCLKConfig+0x404>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80092f4:	4b55      	ldr	r3, [pc, #340]	; (800944c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80092f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80092f8:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009300:	4952      	ldr	r1, [pc, #328]	; (800944c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8009302:	4313      	orrs	r3, r2
 8009304:	650b      	str	r3, [r1, #80]	; 0x50
 8009306:	e001      	b.n	800930c <HAL_RCCEx_PeriphCLKConfig+0x408>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009308:	7dfb      	ldrb	r3, [r7, #23]
 800930a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	681b      	ldr	r3, [r3, #0]
 8009310:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009314:	2b00      	cmp	r3, #0
 8009316:	d049      	beq.n	80093ac <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800931c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009320:	d02e      	beq.n	8009380 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8009322:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009326:	d828      	bhi.n	800937a <HAL_RCCEx_PeriphCLKConfig+0x476>
 8009328:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800932c:	d02a      	beq.n	8009384 <HAL_RCCEx_PeriphCLKConfig+0x480>
 800932e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8009332:	d822      	bhi.n	800937a <HAL_RCCEx_PeriphCLKConfig+0x476>
 8009334:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8009338:	d026      	beq.n	8009388 <HAL_RCCEx_PeriphCLKConfig+0x484>
 800933a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800933e:	d81c      	bhi.n	800937a <HAL_RCCEx_PeriphCLKConfig+0x476>
 8009340:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009344:	d010      	beq.n	8009368 <HAL_RCCEx_PeriphCLKConfig+0x464>
 8009346:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800934a:	d816      	bhi.n	800937a <HAL_RCCEx_PeriphCLKConfig+0x476>
 800934c:	2b00      	cmp	r3, #0
 800934e:	d01d      	beq.n	800938c <HAL_RCCEx_PeriphCLKConfig+0x488>
 8009350:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009354:	d111      	bne.n	800937a <HAL_RCCEx_PeriphCLKConfig+0x476>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	3304      	adds	r3, #4
 800935a:	2101      	movs	r1, #1
 800935c:	4618      	mov	r0, r3
 800935e:	f000 ffd5 	bl	800a30c <RCCEx_PLL2_Config>
 8009362:	4603      	mov	r3, r0
 8009364:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8009366:	e012      	b.n	800938e <HAL_RCCEx_PeriphCLKConfig+0x48a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	3324      	adds	r3, #36	; 0x24
 800936c:	2101      	movs	r1, #1
 800936e:	4618      	mov	r0, r3
 8009370:	f001 f87e 	bl	800a470 <RCCEx_PLL3_Config>
 8009374:	4603      	mov	r3, r0
 8009376:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8009378:	e009      	b.n	800938e <HAL_RCCEx_PeriphCLKConfig+0x48a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800937a:	2301      	movs	r3, #1
 800937c:	75fb      	strb	r3, [r7, #23]
      break;
 800937e:	e006      	b.n	800938e <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8009380:	bf00      	nop
 8009382:	e004      	b.n	800938e <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8009384:	bf00      	nop
 8009386:	e002      	b.n	800938e <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8009388:	bf00      	nop
 800938a:	e000      	b.n	800938e <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 800938c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800938e:	7dfb      	ldrb	r3, [r7, #23]
 8009390:	2b00      	cmp	r3, #0
 8009392:	d109      	bne.n	80093a8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8009394:	4b2d      	ldr	r3, [pc, #180]	; (800944c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8009396:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009398:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80093a0:	492a      	ldr	r1, [pc, #168]	; (800944c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80093a2:	4313      	orrs	r3, r2
 80093a4:	650b      	str	r3, [r1, #80]	; 0x50
 80093a6:	e001      	b.n	80093ac <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80093a8:	7dfb      	ldrb	r3, [r7, #23]
 80093aa:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	681b      	ldr	r3, [r3, #0]
 80093b0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80093b4:	2b00      	cmp	r3, #0
 80093b6:	d04d      	beq.n	8009454 <HAL_RCCEx_PeriphCLKConfig+0x550>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80093be:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80093c2:	d02e      	beq.n	8009422 <HAL_RCCEx_PeriphCLKConfig+0x51e>
 80093c4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80093c8:	d828      	bhi.n	800941c <HAL_RCCEx_PeriphCLKConfig+0x518>
 80093ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80093ce:	d02a      	beq.n	8009426 <HAL_RCCEx_PeriphCLKConfig+0x522>
 80093d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80093d4:	d822      	bhi.n	800941c <HAL_RCCEx_PeriphCLKConfig+0x518>
 80093d6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80093da:	d026      	beq.n	800942a <HAL_RCCEx_PeriphCLKConfig+0x526>
 80093dc:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80093e0:	d81c      	bhi.n	800941c <HAL_RCCEx_PeriphCLKConfig+0x518>
 80093e2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80093e6:	d010      	beq.n	800940a <HAL_RCCEx_PeriphCLKConfig+0x506>
 80093e8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80093ec:	d816      	bhi.n	800941c <HAL_RCCEx_PeriphCLKConfig+0x518>
 80093ee:	2b00      	cmp	r3, #0
 80093f0:	d01d      	beq.n	800942e <HAL_RCCEx_PeriphCLKConfig+0x52a>
 80093f2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80093f6:	d111      	bne.n	800941c <HAL_RCCEx_PeriphCLKConfig+0x518>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	3304      	adds	r3, #4
 80093fc:	2101      	movs	r1, #1
 80093fe:	4618      	mov	r0, r3
 8009400:	f000 ff84 	bl	800a30c <RCCEx_PLL2_Config>
 8009404:	4603      	mov	r3, r0
 8009406:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8009408:	e012      	b.n	8009430 <HAL_RCCEx_PeriphCLKConfig+0x52c>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	3324      	adds	r3, #36	; 0x24
 800940e:	2101      	movs	r1, #1
 8009410:	4618      	mov	r0, r3
 8009412:	f001 f82d 	bl	800a470 <RCCEx_PLL3_Config>
 8009416:	4603      	mov	r3, r0
 8009418:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800941a:	e009      	b.n	8009430 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 800941c:	2301      	movs	r3, #1
 800941e:	75fb      	strb	r3, [r7, #23]
      break;
 8009420:	e006      	b.n	8009430 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8009422:	bf00      	nop
 8009424:	e004      	b.n	8009430 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8009426:	bf00      	nop
 8009428:	e002      	b.n	8009430 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 800942a:	bf00      	nop
 800942c:	e000      	b.n	8009430 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 800942e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009430:	7dfb      	ldrb	r3, [r7, #23]
 8009432:	2b00      	cmp	r3, #0
 8009434:	d10c      	bne.n	8009450 <HAL_RCCEx_PeriphCLKConfig+0x54c>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8009436:	4b05      	ldr	r3, [pc, #20]	; (800944c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8009438:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800943a:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8009444:	4901      	ldr	r1, [pc, #4]	; (800944c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8009446:	4313      	orrs	r3, r2
 8009448:	658b      	str	r3, [r1, #88]	; 0x58
 800944a:	e003      	b.n	8009454 <HAL_RCCEx_PeriphCLKConfig+0x550>
 800944c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009450:	7dfb      	ldrb	r3, [r7, #23]
 8009452:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	681b      	ldr	r3, [r3, #0]
 8009458:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800945c:	2b00      	cmp	r3, #0
 800945e:	d02f      	beq.n	80094c0 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009464:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009468:	d00e      	beq.n	8009488 <HAL_RCCEx_PeriphCLKConfig+0x584>
 800946a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800946e:	d814      	bhi.n	800949a <HAL_RCCEx_PeriphCLKConfig+0x596>
 8009470:	2b00      	cmp	r3, #0
 8009472:	d015      	beq.n	80094a0 <HAL_RCCEx_PeriphCLKConfig+0x59c>
 8009474:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009478:	d10f      	bne.n	800949a <HAL_RCCEx_PeriphCLKConfig+0x596>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800947a:	4baf      	ldr	r3, [pc, #700]	; (8009738 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800947c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800947e:	4aae      	ldr	r2, [pc, #696]	; (8009738 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8009480:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009484:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8009486:	e00c      	b.n	80094a2 <HAL_RCCEx_PeriphCLKConfig+0x59e>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	3304      	adds	r3, #4
 800948c:	2101      	movs	r1, #1
 800948e:	4618      	mov	r0, r3
 8009490:	f000 ff3c 	bl	800a30c <RCCEx_PLL2_Config>
 8009494:	4603      	mov	r3, r0
 8009496:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8009498:	e003      	b.n	80094a2 <HAL_RCCEx_PeriphCLKConfig+0x59e>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800949a:	2301      	movs	r3, #1
 800949c:	75fb      	strb	r3, [r7, #23]
      break;
 800949e:	e000      	b.n	80094a2 <HAL_RCCEx_PeriphCLKConfig+0x59e>
      break;
 80094a0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80094a2:	7dfb      	ldrb	r3, [r7, #23]
 80094a4:	2b00      	cmp	r3, #0
 80094a6:	d109      	bne.n	80094bc <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80094a8:	4ba3      	ldr	r3, [pc, #652]	; (8009738 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80094aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80094ac:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80094b4:	49a0      	ldr	r1, [pc, #640]	; (8009738 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80094b6:	4313      	orrs	r3, r2
 80094b8:	650b      	str	r3, [r1, #80]	; 0x50
 80094ba:	e001      	b.n	80094c0 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80094bc:	7dfb      	ldrb	r3, [r7, #23]
 80094be:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	681b      	ldr	r3, [r3, #0]
 80094c4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80094c8:	2b00      	cmp	r3, #0
 80094ca:	d032      	beq.n	8009532 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80094d0:	2b03      	cmp	r3, #3
 80094d2:	d81b      	bhi.n	800950c <HAL_RCCEx_PeriphCLKConfig+0x608>
 80094d4:	a201      	add	r2, pc, #4	; (adr r2, 80094dc <HAL_RCCEx_PeriphCLKConfig+0x5d8>)
 80094d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80094da:	bf00      	nop
 80094dc:	08009513 	.word	0x08009513
 80094e0:	080094ed 	.word	0x080094ed
 80094e4:	080094fb 	.word	0x080094fb
 80094e8:	08009513 	.word	0x08009513
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80094ec:	4b92      	ldr	r3, [pc, #584]	; (8009738 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80094ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80094f0:	4a91      	ldr	r2, [pc, #580]	; (8009738 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80094f2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80094f6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 80094f8:	e00c      	b.n	8009514 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	3304      	adds	r3, #4
 80094fe:	2102      	movs	r1, #2
 8009500:	4618      	mov	r0, r3
 8009502:	f000 ff03 	bl	800a30c <RCCEx_PLL2_Config>
 8009506:	4603      	mov	r3, r0
 8009508:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 800950a:	e003      	b.n	8009514 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800950c:	2301      	movs	r3, #1
 800950e:	75fb      	strb	r3, [r7, #23]
      break;
 8009510:	e000      	b.n	8009514 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 8009512:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009514:	7dfb      	ldrb	r3, [r7, #23]
 8009516:	2b00      	cmp	r3, #0
 8009518:	d109      	bne.n	800952e <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800951a:	4b87      	ldr	r3, [pc, #540]	; (8009738 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800951c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800951e:	f023 0203 	bic.w	r2, r3, #3
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009526:	4984      	ldr	r1, [pc, #528]	; (8009738 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8009528:	4313      	orrs	r3, r2
 800952a:	64cb      	str	r3, [r1, #76]	; 0x4c
 800952c:	e001      	b.n	8009532 <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800952e:	7dfb      	ldrb	r3, [r7, #23]
 8009530:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	681b      	ldr	r3, [r3, #0]
 8009536:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800953a:	2b00      	cmp	r3, #0
 800953c:	f000 8086 	beq.w	800964c <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8009540:	4b7e      	ldr	r3, [pc, #504]	; (800973c <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8009542:	681b      	ldr	r3, [r3, #0]
 8009544:	4a7d      	ldr	r2, [pc, #500]	; (800973c <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8009546:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800954a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800954c:	f7fd fc08 	bl	8006d60 <HAL_GetTick>
 8009550:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009552:	e009      	b.n	8009568 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009554:	f7fd fc04 	bl	8006d60 <HAL_GetTick>
 8009558:	4602      	mov	r2, r0
 800955a:	693b      	ldr	r3, [r7, #16]
 800955c:	1ad3      	subs	r3, r2, r3
 800955e:	2b64      	cmp	r3, #100	; 0x64
 8009560:	d902      	bls.n	8009568 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 8009562:	2303      	movs	r3, #3
 8009564:	75fb      	strb	r3, [r7, #23]
        break;
 8009566:	e005      	b.n	8009574 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009568:	4b74      	ldr	r3, [pc, #464]	; (800973c <HAL_RCCEx_PeriphCLKConfig+0x838>)
 800956a:	681b      	ldr	r3, [r3, #0]
 800956c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009570:	2b00      	cmp	r3, #0
 8009572:	d0ef      	beq.n	8009554 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8009574:	7dfb      	ldrb	r3, [r7, #23]
 8009576:	2b00      	cmp	r3, #0
 8009578:	d166      	bne.n	8009648 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800957a:	4b6f      	ldr	r3, [pc, #444]	; (8009738 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800957c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8009584:	4053      	eors	r3, r2
 8009586:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800958a:	2b00      	cmp	r3, #0
 800958c:	d013      	beq.n	80095b6 <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800958e:	4b6a      	ldr	r3, [pc, #424]	; (8009738 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8009590:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009592:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009596:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8009598:	4b67      	ldr	r3, [pc, #412]	; (8009738 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800959a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800959c:	4a66      	ldr	r2, [pc, #408]	; (8009738 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800959e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80095a2:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80095a4:	4b64      	ldr	r3, [pc, #400]	; (8009738 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80095a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80095a8:	4a63      	ldr	r2, [pc, #396]	; (8009738 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80095aa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80095ae:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80095b0:	4a61      	ldr	r2, [pc, #388]	; (8009738 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80095b2:	68fb      	ldr	r3, [r7, #12]
 80095b4:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80095bc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80095c0:	d115      	bne.n	80095ee <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80095c2:	f7fd fbcd 	bl	8006d60 <HAL_GetTick>
 80095c6:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80095c8:	e00b      	b.n	80095e2 <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80095ca:	f7fd fbc9 	bl	8006d60 <HAL_GetTick>
 80095ce:	4602      	mov	r2, r0
 80095d0:	693b      	ldr	r3, [r7, #16]
 80095d2:	1ad3      	subs	r3, r2, r3
 80095d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80095d8:	4293      	cmp	r3, r2
 80095da:	d902      	bls.n	80095e2 <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 80095dc:	2303      	movs	r3, #3
 80095de:	75fb      	strb	r3, [r7, #23]
            break;
 80095e0:	e005      	b.n	80095ee <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80095e2:	4b55      	ldr	r3, [pc, #340]	; (8009738 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80095e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80095e6:	f003 0302 	and.w	r3, r3, #2
 80095ea:	2b00      	cmp	r3, #0
 80095ec:	d0ed      	beq.n	80095ca <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 80095ee:	7dfb      	ldrb	r3, [r7, #23]
 80095f0:	2b00      	cmp	r3, #0
 80095f2:	d126      	bne.n	8009642 <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80095fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80095fe:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009602:	d10d      	bne.n	8009620 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 8009604:	4b4c      	ldr	r3, [pc, #304]	; (8009738 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8009606:	691b      	ldr	r3, [r3, #16]
 8009608:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8009612:	0919      	lsrs	r1, r3, #4
 8009614:	4b4a      	ldr	r3, [pc, #296]	; (8009740 <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 8009616:	400b      	ands	r3, r1
 8009618:	4947      	ldr	r1, [pc, #284]	; (8009738 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800961a:	4313      	orrs	r3, r2
 800961c:	610b      	str	r3, [r1, #16]
 800961e:	e005      	b.n	800962c <HAL_RCCEx_PeriphCLKConfig+0x728>
 8009620:	4b45      	ldr	r3, [pc, #276]	; (8009738 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8009622:	691b      	ldr	r3, [r3, #16]
 8009624:	4a44      	ldr	r2, [pc, #272]	; (8009738 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8009626:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800962a:	6113      	str	r3, [r2, #16]
 800962c:	4b42      	ldr	r3, [pc, #264]	; (8009738 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800962e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8009636:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800963a:	493f      	ldr	r1, [pc, #252]	; (8009738 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800963c:	4313      	orrs	r3, r2
 800963e:	670b      	str	r3, [r1, #112]	; 0x70
 8009640:	e004      	b.n	800964c <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8009642:	7dfb      	ldrb	r3, [r7, #23]
 8009644:	75bb      	strb	r3, [r7, #22]
 8009646:	e001      	b.n	800964c <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009648:	7dfb      	ldrb	r3, [r7, #23]
 800964a:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	681b      	ldr	r3, [r3, #0]
 8009650:	f003 0301 	and.w	r3, r3, #1
 8009654:	2b00      	cmp	r3, #0
 8009656:	f000 8085 	beq.w	8009764 <HAL_RCCEx_PeriphCLKConfig+0x860>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800965e:	2b28      	cmp	r3, #40	; 0x28
 8009660:	d866      	bhi.n	8009730 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 8009662:	a201      	add	r2, pc, #4	; (adr r2, 8009668 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 8009664:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009668:	08009745 	.word	0x08009745
 800966c:	08009731 	.word	0x08009731
 8009670:	08009731 	.word	0x08009731
 8009674:	08009731 	.word	0x08009731
 8009678:	08009731 	.word	0x08009731
 800967c:	08009731 	.word	0x08009731
 8009680:	08009731 	.word	0x08009731
 8009684:	08009731 	.word	0x08009731
 8009688:	0800970d 	.word	0x0800970d
 800968c:	08009731 	.word	0x08009731
 8009690:	08009731 	.word	0x08009731
 8009694:	08009731 	.word	0x08009731
 8009698:	08009731 	.word	0x08009731
 800969c:	08009731 	.word	0x08009731
 80096a0:	08009731 	.word	0x08009731
 80096a4:	08009731 	.word	0x08009731
 80096a8:	0800971f 	.word	0x0800971f
 80096ac:	08009731 	.word	0x08009731
 80096b0:	08009731 	.word	0x08009731
 80096b4:	08009731 	.word	0x08009731
 80096b8:	08009731 	.word	0x08009731
 80096bc:	08009731 	.word	0x08009731
 80096c0:	08009731 	.word	0x08009731
 80096c4:	08009731 	.word	0x08009731
 80096c8:	08009745 	.word	0x08009745
 80096cc:	08009731 	.word	0x08009731
 80096d0:	08009731 	.word	0x08009731
 80096d4:	08009731 	.word	0x08009731
 80096d8:	08009731 	.word	0x08009731
 80096dc:	08009731 	.word	0x08009731
 80096e0:	08009731 	.word	0x08009731
 80096e4:	08009731 	.word	0x08009731
 80096e8:	08009745 	.word	0x08009745
 80096ec:	08009731 	.word	0x08009731
 80096f0:	08009731 	.word	0x08009731
 80096f4:	08009731 	.word	0x08009731
 80096f8:	08009731 	.word	0x08009731
 80096fc:	08009731 	.word	0x08009731
 8009700:	08009731 	.word	0x08009731
 8009704:	08009731 	.word	0x08009731
 8009708:	08009745 	.word	0x08009745
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	3304      	adds	r3, #4
 8009710:	2101      	movs	r1, #1
 8009712:	4618      	mov	r0, r3
 8009714:	f000 fdfa 	bl	800a30c <RCCEx_PLL2_Config>
 8009718:	4603      	mov	r3, r0
 800971a:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800971c:	e013      	b.n	8009746 <HAL_RCCEx_PeriphCLKConfig+0x842>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	3324      	adds	r3, #36	; 0x24
 8009722:	2101      	movs	r1, #1
 8009724:	4618      	mov	r0, r3
 8009726:	f000 fea3 	bl	800a470 <RCCEx_PLL3_Config>
 800972a:	4603      	mov	r3, r0
 800972c:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800972e:	e00a      	b.n	8009746 <HAL_RCCEx_PeriphCLKConfig+0x842>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009730:	2301      	movs	r3, #1
 8009732:	75fb      	strb	r3, [r7, #23]
      break;
 8009734:	e007      	b.n	8009746 <HAL_RCCEx_PeriphCLKConfig+0x842>
 8009736:	bf00      	nop
 8009738:	58024400 	.word	0x58024400
 800973c:	58024800 	.word	0x58024800
 8009740:	00ffffcf 	.word	0x00ffffcf
      break;
 8009744:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009746:	7dfb      	ldrb	r3, [r7, #23]
 8009748:	2b00      	cmp	r3, #0
 800974a:	d109      	bne.n	8009760 <HAL_RCCEx_PeriphCLKConfig+0x85c>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800974c:	4b96      	ldr	r3, [pc, #600]	; (80099a8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800974e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009750:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009758:	4993      	ldr	r1, [pc, #588]	; (80099a8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800975a:	4313      	orrs	r3, r2
 800975c:	654b      	str	r3, [r1, #84]	; 0x54
 800975e:	e001      	b.n	8009764 <HAL_RCCEx_PeriphCLKConfig+0x860>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009760:	7dfb      	ldrb	r3, [r7, #23]
 8009762:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	681b      	ldr	r3, [r3, #0]
 8009768:	f003 0302 	and.w	r3, r3, #2
 800976c:	2b00      	cmp	r3, #0
 800976e:	d038      	beq.n	80097e2 <HAL_RCCEx_PeriphCLKConfig+0x8de>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009774:	2b05      	cmp	r3, #5
 8009776:	d821      	bhi.n	80097bc <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 8009778:	a201      	add	r2, pc, #4	; (adr r2, 8009780 <HAL_RCCEx_PeriphCLKConfig+0x87c>)
 800977a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800977e:	bf00      	nop
 8009780:	080097c3 	.word	0x080097c3
 8009784:	08009799 	.word	0x08009799
 8009788:	080097ab 	.word	0x080097ab
 800978c:	080097c3 	.word	0x080097c3
 8009790:	080097c3 	.word	0x080097c3
 8009794:	080097c3 	.word	0x080097c3
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	3304      	adds	r3, #4
 800979c:	2101      	movs	r1, #1
 800979e:	4618      	mov	r0, r3
 80097a0:	f000 fdb4 	bl	800a30c <RCCEx_PLL2_Config>
 80097a4:	4603      	mov	r3, r0
 80097a6:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80097a8:	e00c      	b.n	80097c4 <HAL_RCCEx_PeriphCLKConfig+0x8c0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	3324      	adds	r3, #36	; 0x24
 80097ae:	2101      	movs	r1, #1
 80097b0:	4618      	mov	r0, r3
 80097b2:	f000 fe5d 	bl	800a470 <RCCEx_PLL3_Config>
 80097b6:	4603      	mov	r3, r0
 80097b8:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80097ba:	e003      	b.n	80097c4 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80097bc:	2301      	movs	r3, #1
 80097be:	75fb      	strb	r3, [r7, #23]
      break;
 80097c0:	e000      	b.n	80097c4 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      break;
 80097c2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80097c4:	7dfb      	ldrb	r3, [r7, #23]
 80097c6:	2b00      	cmp	r3, #0
 80097c8:	d109      	bne.n	80097de <HAL_RCCEx_PeriphCLKConfig+0x8da>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80097ca:	4b77      	ldr	r3, [pc, #476]	; (80099a8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80097cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80097ce:	f023 0207 	bic.w	r2, r3, #7
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80097d6:	4974      	ldr	r1, [pc, #464]	; (80099a8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80097d8:	4313      	orrs	r3, r2
 80097da:	654b      	str	r3, [r1, #84]	; 0x54
 80097dc:	e001      	b.n	80097e2 <HAL_RCCEx_PeriphCLKConfig+0x8de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80097de:	7dfb      	ldrb	r3, [r7, #23]
 80097e0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	681b      	ldr	r3, [r3, #0]
 80097e6:	f003 0304 	and.w	r3, r3, #4
 80097ea:	2b00      	cmp	r3, #0
 80097ec:	d03a      	beq.n	8009864 <HAL_RCCEx_PeriphCLKConfig+0x960>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80097f4:	2b05      	cmp	r3, #5
 80097f6:	d821      	bhi.n	800983c <HAL_RCCEx_PeriphCLKConfig+0x938>
 80097f8:	a201      	add	r2, pc, #4	; (adr r2, 8009800 <HAL_RCCEx_PeriphCLKConfig+0x8fc>)
 80097fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80097fe:	bf00      	nop
 8009800:	08009843 	.word	0x08009843
 8009804:	08009819 	.word	0x08009819
 8009808:	0800982b 	.word	0x0800982b
 800980c:	08009843 	.word	0x08009843
 8009810:	08009843 	.word	0x08009843
 8009814:	08009843 	.word	0x08009843
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	3304      	adds	r3, #4
 800981c:	2101      	movs	r1, #1
 800981e:	4618      	mov	r0, r3
 8009820:	f000 fd74 	bl	800a30c <RCCEx_PLL2_Config>
 8009824:	4603      	mov	r3, r0
 8009826:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8009828:	e00c      	b.n	8009844 <HAL_RCCEx_PeriphCLKConfig+0x940>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	3324      	adds	r3, #36	; 0x24
 800982e:	2101      	movs	r1, #1
 8009830:	4618      	mov	r0, r3
 8009832:	f000 fe1d 	bl	800a470 <RCCEx_PLL3_Config>
 8009836:	4603      	mov	r3, r0
 8009838:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800983a:	e003      	b.n	8009844 <HAL_RCCEx_PeriphCLKConfig+0x940>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800983c:	2301      	movs	r3, #1
 800983e:	75fb      	strb	r3, [r7, #23]
      break;
 8009840:	e000      	b.n	8009844 <HAL_RCCEx_PeriphCLKConfig+0x940>
      break;
 8009842:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009844:	7dfb      	ldrb	r3, [r7, #23]
 8009846:	2b00      	cmp	r3, #0
 8009848:	d10a      	bne.n	8009860 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800984a:	4b57      	ldr	r3, [pc, #348]	; (80099a8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800984c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800984e:	f023 0207 	bic.w	r2, r3, #7
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009858:	4953      	ldr	r1, [pc, #332]	; (80099a8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800985a:	4313      	orrs	r3, r2
 800985c:	658b      	str	r3, [r1, #88]	; 0x58
 800985e:	e001      	b.n	8009864 <HAL_RCCEx_PeriphCLKConfig+0x960>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009860:	7dfb      	ldrb	r3, [r7, #23]
 8009862:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	681b      	ldr	r3, [r3, #0]
 8009868:	f003 0320 	and.w	r3, r3, #32
 800986c:	2b00      	cmp	r3, #0
 800986e:	d04b      	beq.n	8009908 <HAL_RCCEx_PeriphCLKConfig+0xa04>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009876:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800987a:	d02e      	beq.n	80098da <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 800987c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009880:	d828      	bhi.n	80098d4 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8009882:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009886:	d02a      	beq.n	80098de <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8009888:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800988c:	d822      	bhi.n	80098d4 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 800988e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009892:	d026      	beq.n	80098e2 <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8009894:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009898:	d81c      	bhi.n	80098d4 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 800989a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800989e:	d010      	beq.n	80098c2 <HAL_RCCEx_PeriphCLKConfig+0x9be>
 80098a0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80098a4:	d816      	bhi.n	80098d4 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 80098a6:	2b00      	cmp	r3, #0
 80098a8:	d01d      	beq.n	80098e6 <HAL_RCCEx_PeriphCLKConfig+0x9e2>
 80098aa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80098ae:	d111      	bne.n	80098d4 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	3304      	adds	r3, #4
 80098b4:	2100      	movs	r1, #0
 80098b6:	4618      	mov	r0, r3
 80098b8:	f000 fd28 	bl	800a30c <RCCEx_PLL2_Config>
 80098bc:	4603      	mov	r3, r0
 80098be:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80098c0:	e012      	b.n	80098e8 <HAL_RCCEx_PeriphCLKConfig+0x9e4>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	3324      	adds	r3, #36	; 0x24
 80098c6:	2102      	movs	r1, #2
 80098c8:	4618      	mov	r0, r3
 80098ca:	f000 fdd1 	bl	800a470 <RCCEx_PLL3_Config>
 80098ce:	4603      	mov	r3, r0
 80098d0:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80098d2:	e009      	b.n	80098e8 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80098d4:	2301      	movs	r3, #1
 80098d6:	75fb      	strb	r3, [r7, #23]
      break;
 80098d8:	e006      	b.n	80098e8 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 80098da:	bf00      	nop
 80098dc:	e004      	b.n	80098e8 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 80098de:	bf00      	nop
 80098e0:	e002      	b.n	80098e8 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 80098e2:	bf00      	nop
 80098e4:	e000      	b.n	80098e8 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 80098e6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80098e8:	7dfb      	ldrb	r3, [r7, #23]
 80098ea:	2b00      	cmp	r3, #0
 80098ec:	d10a      	bne.n	8009904 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80098ee:	4b2e      	ldr	r3, [pc, #184]	; (80099a8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80098f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80098f2:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80098fc:	492a      	ldr	r1, [pc, #168]	; (80099a8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80098fe:	4313      	orrs	r3, r2
 8009900:	654b      	str	r3, [r1, #84]	; 0x54
 8009902:	e001      	b.n	8009908 <HAL_RCCEx_PeriphCLKConfig+0xa04>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009904:	7dfb      	ldrb	r3, [r7, #23]
 8009906:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	681b      	ldr	r3, [r3, #0]
 800990c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009910:	2b00      	cmp	r3, #0
 8009912:	d04d      	beq.n	80099b0 <HAL_RCCEx_PeriphCLKConfig+0xaac>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800991a:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800991e:	d02e      	beq.n	800997e <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8009920:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8009924:	d828      	bhi.n	8009978 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8009926:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800992a:	d02a      	beq.n	8009982 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 800992c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009930:	d822      	bhi.n	8009978 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8009932:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009936:	d026      	beq.n	8009986 <HAL_RCCEx_PeriphCLKConfig+0xa82>
 8009938:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800993c:	d81c      	bhi.n	8009978 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 800993e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009942:	d010      	beq.n	8009966 <HAL_RCCEx_PeriphCLKConfig+0xa62>
 8009944:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009948:	d816      	bhi.n	8009978 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 800994a:	2b00      	cmp	r3, #0
 800994c:	d01d      	beq.n	800998a <HAL_RCCEx_PeriphCLKConfig+0xa86>
 800994e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009952:	d111      	bne.n	8009978 <HAL_RCCEx_PeriphCLKConfig+0xa74>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	3304      	adds	r3, #4
 8009958:	2100      	movs	r1, #0
 800995a:	4618      	mov	r0, r3
 800995c:	f000 fcd6 	bl	800a30c <RCCEx_PLL2_Config>
 8009960:	4603      	mov	r3, r0
 8009962:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8009964:	e012      	b.n	800998c <HAL_RCCEx_PeriphCLKConfig+0xa88>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	3324      	adds	r3, #36	; 0x24
 800996a:	2102      	movs	r1, #2
 800996c:	4618      	mov	r0, r3
 800996e:	f000 fd7f 	bl	800a470 <RCCEx_PLL3_Config>
 8009972:	4603      	mov	r3, r0
 8009974:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8009976:	e009      	b.n	800998c <HAL_RCCEx_PeriphCLKConfig+0xa88>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009978:	2301      	movs	r3, #1
 800997a:	75fb      	strb	r3, [r7, #23]
      break;
 800997c:	e006      	b.n	800998c <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 800997e:	bf00      	nop
 8009980:	e004      	b.n	800998c <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8009982:	bf00      	nop
 8009984:	e002      	b.n	800998c <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8009986:	bf00      	nop
 8009988:	e000      	b.n	800998c <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 800998a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800998c:	7dfb      	ldrb	r3, [r7, #23]
 800998e:	2b00      	cmp	r3, #0
 8009990:	d10c      	bne.n	80099ac <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8009992:	4b05      	ldr	r3, [pc, #20]	; (80099a8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8009994:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009996:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80099a0:	4901      	ldr	r1, [pc, #4]	; (80099a8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80099a2:	4313      	orrs	r3, r2
 80099a4:	658b      	str	r3, [r1, #88]	; 0x58
 80099a6:	e003      	b.n	80099b0 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 80099a8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80099ac:	7dfb      	ldrb	r3, [r7, #23]
 80099ae:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	681b      	ldr	r3, [r3, #0]
 80099b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80099b8:	2b00      	cmp	r3, #0
 80099ba:	d04b      	beq.n	8009a54 <HAL_RCCEx_PeriphCLKConfig+0xb50>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80099c2:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80099c6:	d02e      	beq.n	8009a26 <HAL_RCCEx_PeriphCLKConfig+0xb22>
 80099c8:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80099cc:	d828      	bhi.n	8009a20 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 80099ce:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80099d2:	d02a      	beq.n	8009a2a <HAL_RCCEx_PeriphCLKConfig+0xb26>
 80099d4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80099d8:	d822      	bhi.n	8009a20 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 80099da:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80099de:	d026      	beq.n	8009a2e <HAL_RCCEx_PeriphCLKConfig+0xb2a>
 80099e0:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80099e4:	d81c      	bhi.n	8009a20 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 80099e6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80099ea:	d010      	beq.n	8009a0e <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 80099ec:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80099f0:	d816      	bhi.n	8009a20 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 80099f2:	2b00      	cmp	r3, #0
 80099f4:	d01d      	beq.n	8009a32 <HAL_RCCEx_PeriphCLKConfig+0xb2e>
 80099f6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80099fa:	d111      	bne.n	8009a20 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	3304      	adds	r3, #4
 8009a00:	2100      	movs	r1, #0
 8009a02:	4618      	mov	r0, r3
 8009a04:	f000 fc82 	bl	800a30c <RCCEx_PLL2_Config>
 8009a08:	4603      	mov	r3, r0
 8009a0a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8009a0c:	e012      	b.n	8009a34 <HAL_RCCEx_PeriphCLKConfig+0xb30>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	3324      	adds	r3, #36	; 0x24
 8009a12:	2102      	movs	r1, #2
 8009a14:	4618      	mov	r0, r3
 8009a16:	f000 fd2b 	bl	800a470 <RCCEx_PLL3_Config>
 8009a1a:	4603      	mov	r3, r0
 8009a1c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8009a1e:	e009      	b.n	8009a34 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009a20:	2301      	movs	r3, #1
 8009a22:	75fb      	strb	r3, [r7, #23]
      break;
 8009a24:	e006      	b.n	8009a34 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8009a26:	bf00      	nop
 8009a28:	e004      	b.n	8009a34 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8009a2a:	bf00      	nop
 8009a2c:	e002      	b.n	8009a34 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8009a2e:	bf00      	nop
 8009a30:	e000      	b.n	8009a34 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8009a32:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009a34:	7dfb      	ldrb	r3, [r7, #23]
 8009a36:	2b00      	cmp	r3, #0
 8009a38:	d10a      	bne.n	8009a50 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8009a3a:	4b9d      	ldr	r3, [pc, #628]	; (8009cb0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009a3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009a3e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009a48:	4999      	ldr	r1, [pc, #612]	; (8009cb0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009a4a:	4313      	orrs	r3, r2
 8009a4c:	658b      	str	r3, [r1, #88]	; 0x58
 8009a4e:	e001      	b.n	8009a54 <HAL_RCCEx_PeriphCLKConfig+0xb50>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009a50:	7dfb      	ldrb	r3, [r7, #23]
 8009a52:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	681b      	ldr	r3, [r3, #0]
 8009a58:	f003 0308 	and.w	r3, r3, #8
 8009a5c:	2b00      	cmp	r3, #0
 8009a5e:	d01a      	beq.n	8009a96 <HAL_RCCEx_PeriphCLKConfig+0xb92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009a66:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009a6a:	d10a      	bne.n	8009a82 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	3324      	adds	r3, #36	; 0x24
 8009a70:	2102      	movs	r1, #2
 8009a72:	4618      	mov	r0, r3
 8009a74:	f000 fcfc 	bl	800a470 <RCCEx_PLL3_Config>
 8009a78:	4603      	mov	r3, r0
 8009a7a:	2b00      	cmp	r3, #0
 8009a7c:	d001      	beq.n	8009a82 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        {
          status = HAL_ERROR;
 8009a7e:	2301      	movs	r3, #1
 8009a80:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8009a82:	4b8b      	ldr	r3, [pc, #556]	; (8009cb0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009a84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009a86:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009a90:	4987      	ldr	r1, [pc, #540]	; (8009cb0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009a92:	4313      	orrs	r3, r2
 8009a94:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	681b      	ldr	r3, [r3, #0]
 8009a9a:	f003 0310 	and.w	r3, r3, #16
 8009a9e:	2b00      	cmp	r3, #0
 8009aa0:	d01a      	beq.n	8009ad8 <HAL_RCCEx_PeriphCLKConfig+0xbd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009aa8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009aac:	d10a      	bne.n	8009ac4 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	3324      	adds	r3, #36	; 0x24
 8009ab2:	2102      	movs	r1, #2
 8009ab4:	4618      	mov	r0, r3
 8009ab6:	f000 fcdb 	bl	800a470 <RCCEx_PLL3_Config>
 8009aba:	4603      	mov	r3, r0
 8009abc:	2b00      	cmp	r3, #0
 8009abe:	d001      	beq.n	8009ac4 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
      {
        status = HAL_ERROR;
 8009ac0:	2301      	movs	r3, #1
 8009ac2:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8009ac4:	4b7a      	ldr	r3, [pc, #488]	; (8009cb0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009ac6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009ac8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009ad2:	4977      	ldr	r1, [pc, #476]	; (8009cb0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009ad4:	4313      	orrs	r3, r2
 8009ad6:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	681b      	ldr	r3, [r3, #0]
 8009adc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8009ae0:	2b00      	cmp	r3, #0
 8009ae2:	d034      	beq.n	8009b4e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8009aea:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009aee:	d01d      	beq.n	8009b2c <HAL_RCCEx_PeriphCLKConfig+0xc28>
 8009af0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009af4:	d817      	bhi.n	8009b26 <HAL_RCCEx_PeriphCLKConfig+0xc22>
 8009af6:	2b00      	cmp	r3, #0
 8009af8:	d003      	beq.n	8009b02 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 8009afa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009afe:	d009      	beq.n	8009b14 <HAL_RCCEx_PeriphCLKConfig+0xc10>
 8009b00:	e011      	b.n	8009b26 <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	3304      	adds	r3, #4
 8009b06:	2100      	movs	r1, #0
 8009b08:	4618      	mov	r0, r3
 8009b0a:	f000 fbff 	bl	800a30c <RCCEx_PLL2_Config>
 8009b0e:	4603      	mov	r3, r0
 8009b10:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8009b12:	e00c      	b.n	8009b2e <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	3324      	adds	r3, #36	; 0x24
 8009b18:	2102      	movs	r1, #2
 8009b1a:	4618      	mov	r0, r3
 8009b1c:	f000 fca8 	bl	800a470 <RCCEx_PLL3_Config>
 8009b20:	4603      	mov	r3, r0
 8009b22:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8009b24:	e003      	b.n	8009b2e <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009b26:	2301      	movs	r3, #1
 8009b28:	75fb      	strb	r3, [r7, #23]
      break;
 8009b2a:	e000      	b.n	8009b2e <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 8009b2c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009b2e:	7dfb      	ldrb	r3, [r7, #23]
 8009b30:	2b00      	cmp	r3, #0
 8009b32:	d10a      	bne.n	8009b4a <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8009b34:	4b5e      	ldr	r3, [pc, #376]	; (8009cb0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009b36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009b38:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8009b42:	495b      	ldr	r1, [pc, #364]	; (8009cb0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009b44:	4313      	orrs	r3, r2
 8009b46:	658b      	str	r3, [r1, #88]	; 0x58
 8009b48:	e001      	b.n	8009b4e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009b4a:	7dfb      	ldrb	r3, [r7, #23]
 8009b4c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	681b      	ldr	r3, [r3, #0]
 8009b52:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009b56:	2b00      	cmp	r3, #0
 8009b58:	d033      	beq.n	8009bc2 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009b60:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009b64:	d01c      	beq.n	8009ba0 <HAL_RCCEx_PeriphCLKConfig+0xc9c>
 8009b66:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009b6a:	d816      	bhi.n	8009b9a <HAL_RCCEx_PeriphCLKConfig+0xc96>
 8009b6c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009b70:	d003      	beq.n	8009b7a <HAL_RCCEx_PeriphCLKConfig+0xc76>
 8009b72:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009b76:	d007      	beq.n	8009b88 <HAL_RCCEx_PeriphCLKConfig+0xc84>
 8009b78:	e00f      	b.n	8009b9a <HAL_RCCEx_PeriphCLKConfig+0xc96>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009b7a:	4b4d      	ldr	r3, [pc, #308]	; (8009cb0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009b7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b7e:	4a4c      	ldr	r2, [pc, #304]	; (8009cb0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009b80:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009b84:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8009b86:	e00c      	b.n	8009ba2 <HAL_RCCEx_PeriphCLKConfig+0xc9e>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	3324      	adds	r3, #36	; 0x24
 8009b8c:	2101      	movs	r1, #1
 8009b8e:	4618      	mov	r0, r3
 8009b90:	f000 fc6e 	bl	800a470 <RCCEx_PLL3_Config>
 8009b94:	4603      	mov	r3, r0
 8009b96:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8009b98:	e003      	b.n	8009ba2 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009b9a:	2301      	movs	r3, #1
 8009b9c:	75fb      	strb	r3, [r7, #23]
      break;
 8009b9e:	e000      	b.n	8009ba2 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      break;
 8009ba0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009ba2:	7dfb      	ldrb	r3, [r7, #23]
 8009ba4:	2b00      	cmp	r3, #0
 8009ba6:	d10a      	bne.n	8009bbe <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8009ba8:	4b41      	ldr	r3, [pc, #260]	; (8009cb0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009baa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009bac:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009bb6:	493e      	ldr	r1, [pc, #248]	; (8009cb0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009bb8:	4313      	orrs	r3, r2
 8009bba:	654b      	str	r3, [r1, #84]	; 0x54
 8009bbc:	e001      	b.n	8009bc2 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009bbe:	7dfb      	ldrb	r3, [r7, #23]
 8009bc0:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	681b      	ldr	r3, [r3, #0]
 8009bc6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009bca:	2b00      	cmp	r3, #0
 8009bcc:	d029      	beq.n	8009c22 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009bd2:	2b00      	cmp	r3, #0
 8009bd4:	d003      	beq.n	8009bde <HAL_RCCEx_PeriphCLKConfig+0xcda>
 8009bd6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009bda:	d007      	beq.n	8009bec <HAL_RCCEx_PeriphCLKConfig+0xce8>
 8009bdc:	e00f      	b.n	8009bfe <HAL_RCCEx_PeriphCLKConfig+0xcfa>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009bde:	4b34      	ldr	r3, [pc, #208]	; (8009cb0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009be0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009be2:	4a33      	ldr	r2, [pc, #204]	; (8009cb0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009be4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009be8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8009bea:	e00b      	b.n	8009c04 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	3304      	adds	r3, #4
 8009bf0:	2102      	movs	r1, #2
 8009bf2:	4618      	mov	r0, r3
 8009bf4:	f000 fb8a 	bl	800a30c <RCCEx_PLL2_Config>
 8009bf8:	4603      	mov	r3, r0
 8009bfa:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8009bfc:	e002      	b.n	8009c04 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    default:
      ret = HAL_ERROR;
 8009bfe:	2301      	movs	r3, #1
 8009c00:	75fb      	strb	r3, [r7, #23]
      break;
 8009c02:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009c04:	7dfb      	ldrb	r3, [r7, #23]
 8009c06:	2b00      	cmp	r3, #0
 8009c08:	d109      	bne.n	8009c1e <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8009c0a:	4b29      	ldr	r3, [pc, #164]	; (8009cb0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009c0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009c0e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009c16:	4926      	ldr	r1, [pc, #152]	; (8009cb0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009c18:	4313      	orrs	r3, r2
 8009c1a:	64cb      	str	r3, [r1, #76]	; 0x4c
 8009c1c:	e001      	b.n	8009c22 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009c1e:	7dfb      	ldrb	r3, [r7, #23]
 8009c20:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	681b      	ldr	r3, [r3, #0]
 8009c26:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009c2a:	2b00      	cmp	r3, #0
 8009c2c:	d00a      	beq.n	8009c44 <HAL_RCCEx_PeriphCLKConfig+0xd40>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	3324      	adds	r3, #36	; 0x24
 8009c32:	2102      	movs	r1, #2
 8009c34:	4618      	mov	r0, r3
 8009c36:	f000 fc1b 	bl	800a470 <RCCEx_PLL3_Config>
 8009c3a:	4603      	mov	r3, r0
 8009c3c:	2b00      	cmp	r3, #0
 8009c3e:	d001      	beq.n	8009c44 <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      status=HAL_ERROR;
 8009c40:	2301      	movs	r3, #1
 8009c42:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	681b      	ldr	r3, [r3, #0]
 8009c48:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009c4c:	2b00      	cmp	r3, #0
 8009c4e:	d033      	beq.n	8009cb8 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
  {

    switch(PeriphClkInit->RngClockSelection)
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009c54:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009c58:	d017      	beq.n	8009c8a <HAL_RCCEx_PeriphCLKConfig+0xd86>
 8009c5a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009c5e:	d811      	bhi.n	8009c84 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8009c60:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009c64:	d013      	beq.n	8009c8e <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 8009c66:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009c6a:	d80b      	bhi.n	8009c84 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8009c6c:	2b00      	cmp	r3, #0
 8009c6e:	d010      	beq.n	8009c92 <HAL_RCCEx_PeriphCLKConfig+0xd8e>
 8009c70:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009c74:	d106      	bne.n	8009c84 <HAL_RCCEx_PeriphCLKConfig+0xd80>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009c76:	4b0e      	ldr	r3, [pc, #56]	; (8009cb0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009c78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c7a:	4a0d      	ldr	r2, [pc, #52]	; (8009cb0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009c7c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009c80:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8009c82:	e007      	b.n	8009c94 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009c84:	2301      	movs	r3, #1
 8009c86:	75fb      	strb	r3, [r7, #23]
      break;
 8009c88:	e004      	b.n	8009c94 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8009c8a:	bf00      	nop
 8009c8c:	e002      	b.n	8009c94 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8009c8e:	bf00      	nop
 8009c90:	e000      	b.n	8009c94 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8009c92:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009c94:	7dfb      	ldrb	r3, [r7, #23]
 8009c96:	2b00      	cmp	r3, #0
 8009c98:	d10c      	bne.n	8009cb4 <HAL_RCCEx_PeriphCLKConfig+0xdb0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8009c9a:	4b05      	ldr	r3, [pc, #20]	; (8009cb0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009c9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009c9e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009ca6:	4902      	ldr	r1, [pc, #8]	; (8009cb0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009ca8:	4313      	orrs	r3, r2
 8009caa:	654b      	str	r3, [r1, #84]	; 0x54
 8009cac:	e004      	b.n	8009cb8 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
 8009cae:	bf00      	nop
 8009cb0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009cb4:	7dfb      	ldrb	r3, [r7, #23]
 8009cb6:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	681b      	ldr	r3, [r3, #0]
 8009cbc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009cc0:	2b00      	cmp	r3, #0
 8009cc2:	d008      	beq.n	8009cd6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8009cc4:	4b31      	ldr	r3, [pc, #196]	; (8009d8c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8009cc6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009cc8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009cd0:	492e      	ldr	r1, [pc, #184]	; (8009d8c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8009cd2:	4313      	orrs	r3, r2
 8009cd4:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	681b      	ldr	r3, [r3, #0]
 8009cda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009cde:	2b00      	cmp	r3, #0
 8009ce0:	d009      	beq.n	8009cf6 <HAL_RCCEx_PeriphCLKConfig+0xdf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8009ce2:	4b2a      	ldr	r3, [pc, #168]	; (8009d8c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8009ce4:	691b      	ldr	r3, [r3, #16]
 8009ce6:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8009cf0:	4926      	ldr	r1, [pc, #152]	; (8009d8c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8009cf2:	4313      	orrs	r3, r2
 8009cf4:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	681b      	ldr	r3, [r3, #0]
 8009cfa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009cfe:	2b00      	cmp	r3, #0
 8009d00:	d008      	beq.n	8009d14 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8009d02:	4b22      	ldr	r3, [pc, #136]	; (8009d8c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8009d04:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009d06:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009d0e:	491f      	ldr	r1, [pc, #124]	; (8009d8c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8009d10:	4313      	orrs	r3, r2
 8009d12:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	681b      	ldr	r3, [r3, #0]
 8009d18:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8009d1c:	2b00      	cmp	r3, #0
 8009d1e:	d00d      	beq.n	8009d3c <HAL_RCCEx_PeriphCLKConfig+0xe38>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8009d20:	4b1a      	ldr	r3, [pc, #104]	; (8009d8c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8009d22:	691b      	ldr	r3, [r3, #16]
 8009d24:	4a19      	ldr	r2, [pc, #100]	; (8009d8c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8009d26:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8009d2a:	6113      	str	r3, [r2, #16]
 8009d2c:	4b17      	ldr	r3, [pc, #92]	; (8009d8c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8009d2e:	691a      	ldr	r2, [r3, #16]
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8009d36:	4915      	ldr	r1, [pc, #84]	; (8009d8c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8009d38:	4313      	orrs	r3, r2
 8009d3a:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	681b      	ldr	r3, [r3, #0]
 8009d40:	2b00      	cmp	r3, #0
 8009d42:	da08      	bge.n	8009d56 <HAL_RCCEx_PeriphCLKConfig+0xe52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8009d44:	4b11      	ldr	r3, [pc, #68]	; (8009d8c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8009d46:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009d48:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009d50:	490e      	ldr	r1, [pc, #56]	; (8009d8c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8009d52:	4313      	orrs	r3, r2
 8009d54:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	681b      	ldr	r3, [r3, #0]
 8009d5a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009d5e:	2b00      	cmp	r3, #0
 8009d60:	d009      	beq.n	8009d76 <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8009d62:	4b0a      	ldr	r3, [pc, #40]	; (8009d8c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8009d64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009d66:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009d70:	4906      	ldr	r1, [pc, #24]	; (8009d8c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8009d72:	4313      	orrs	r3, r2
 8009d74:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8009d76:	7dbb      	ldrb	r3, [r7, #22]
 8009d78:	2b00      	cmp	r3, #0
 8009d7a:	d101      	bne.n	8009d80 <HAL_RCCEx_PeriphCLKConfig+0xe7c>
  {
    return HAL_OK;
 8009d7c:	2300      	movs	r3, #0
 8009d7e:	e000      	b.n	8009d82 <HAL_RCCEx_PeriphCLKConfig+0xe7e>
  }
  return HAL_ERROR;
 8009d80:	2301      	movs	r3, #1
}
 8009d82:	4618      	mov	r0, r3
 8009d84:	3718      	adds	r7, #24
 8009d86:	46bd      	mov	sp, r7
 8009d88:	bd80      	pop	{r7, pc}
 8009d8a:	bf00      	nop
 8009d8c:	58024400 	.word	0x58024400

08009d90 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8009d90:	b580      	push	{r7, lr}
 8009d92:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8009d94:	f7ff f85a 	bl	8008e4c <HAL_RCC_GetHCLKFreq>
 8009d98:	4602      	mov	r2, r0
 8009d9a:	4b06      	ldr	r3, [pc, #24]	; (8009db4 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8009d9c:	6a1b      	ldr	r3, [r3, #32]
 8009d9e:	091b      	lsrs	r3, r3, #4
 8009da0:	f003 0307 	and.w	r3, r3, #7
 8009da4:	4904      	ldr	r1, [pc, #16]	; (8009db8 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8009da6:	5ccb      	ldrb	r3, [r1, r3]
 8009da8:	f003 031f 	and.w	r3, r3, #31
 8009dac:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8009db0:	4618      	mov	r0, r3
 8009db2:	bd80      	pop	{r7, pc}
 8009db4:	58024400 	.word	0x58024400
 8009db8:	080123a0 	.word	0x080123a0

08009dbc <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8009dbc:	b480      	push	{r7}
 8009dbe:	b089      	sub	sp, #36	; 0x24
 8009dc0:	af00      	add	r7, sp, #0
 8009dc2:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009dc4:	4ba1      	ldr	r3, [pc, #644]	; (800a04c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009dc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009dc8:	f003 0303 	and.w	r3, r3, #3
 8009dcc:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8009dce:	4b9f      	ldr	r3, [pc, #636]	; (800a04c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009dd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009dd2:	0b1b      	lsrs	r3, r3, #12
 8009dd4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009dd8:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8009dda:	4b9c      	ldr	r3, [pc, #624]	; (800a04c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009ddc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009dde:	091b      	lsrs	r3, r3, #4
 8009de0:	f003 0301 	and.w	r3, r3, #1
 8009de4:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8009de6:	4b99      	ldr	r3, [pc, #612]	; (800a04c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009de8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009dea:	08db      	lsrs	r3, r3, #3
 8009dec:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009df0:	693a      	ldr	r2, [r7, #16]
 8009df2:	fb02 f303 	mul.w	r3, r2, r3
 8009df6:	ee07 3a90 	vmov	s15, r3
 8009dfa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009dfe:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8009e02:	697b      	ldr	r3, [r7, #20]
 8009e04:	2b00      	cmp	r3, #0
 8009e06:	f000 8111 	beq.w	800a02c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8009e0a:	69bb      	ldr	r3, [r7, #24]
 8009e0c:	2b02      	cmp	r3, #2
 8009e0e:	f000 8083 	beq.w	8009f18 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8009e12:	69bb      	ldr	r3, [r7, #24]
 8009e14:	2b02      	cmp	r3, #2
 8009e16:	f200 80a1 	bhi.w	8009f5c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8009e1a:	69bb      	ldr	r3, [r7, #24]
 8009e1c:	2b00      	cmp	r3, #0
 8009e1e:	d003      	beq.n	8009e28 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8009e20:	69bb      	ldr	r3, [r7, #24]
 8009e22:	2b01      	cmp	r3, #1
 8009e24:	d056      	beq.n	8009ed4 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8009e26:	e099      	b.n	8009f5c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009e28:	4b88      	ldr	r3, [pc, #544]	; (800a04c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009e2a:	681b      	ldr	r3, [r3, #0]
 8009e2c:	f003 0320 	and.w	r3, r3, #32
 8009e30:	2b00      	cmp	r3, #0
 8009e32:	d02d      	beq.n	8009e90 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009e34:	4b85      	ldr	r3, [pc, #532]	; (800a04c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009e36:	681b      	ldr	r3, [r3, #0]
 8009e38:	08db      	lsrs	r3, r3, #3
 8009e3a:	f003 0303 	and.w	r3, r3, #3
 8009e3e:	4a84      	ldr	r2, [pc, #528]	; (800a050 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8009e40:	fa22 f303 	lsr.w	r3, r2, r3
 8009e44:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8009e46:	68bb      	ldr	r3, [r7, #8]
 8009e48:	ee07 3a90 	vmov	s15, r3
 8009e4c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009e50:	697b      	ldr	r3, [r7, #20]
 8009e52:	ee07 3a90 	vmov	s15, r3
 8009e56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009e5a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009e5e:	4b7b      	ldr	r3, [pc, #492]	; (800a04c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009e60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e62:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009e66:	ee07 3a90 	vmov	s15, r3
 8009e6a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009e6e:	ed97 6a03 	vldr	s12, [r7, #12]
 8009e72:	eddf 5a78 	vldr	s11, [pc, #480]	; 800a054 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009e76:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009e7a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009e7e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009e82:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009e86:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009e8a:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8009e8e:	e087      	b.n	8009fa0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8009e90:	697b      	ldr	r3, [r7, #20]
 8009e92:	ee07 3a90 	vmov	s15, r3
 8009e96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009e9a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800a058 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8009e9e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009ea2:	4b6a      	ldr	r3, [pc, #424]	; (800a04c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009ea4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009ea6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009eaa:	ee07 3a90 	vmov	s15, r3
 8009eae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009eb2:	ed97 6a03 	vldr	s12, [r7, #12]
 8009eb6:	eddf 5a67 	vldr	s11, [pc, #412]	; 800a054 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009eba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009ebe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009ec2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009ec6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009eca:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009ece:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009ed2:	e065      	b.n	8009fa0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8009ed4:	697b      	ldr	r3, [r7, #20]
 8009ed6:	ee07 3a90 	vmov	s15, r3
 8009eda:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009ede:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800a05c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8009ee2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009ee6:	4b59      	ldr	r3, [pc, #356]	; (800a04c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009ee8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009eea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009eee:	ee07 3a90 	vmov	s15, r3
 8009ef2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009ef6:	ed97 6a03 	vldr	s12, [r7, #12]
 8009efa:	eddf 5a56 	vldr	s11, [pc, #344]	; 800a054 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009efe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009f02:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009f06:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009f0a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009f0e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009f12:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009f16:	e043      	b.n	8009fa0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8009f18:	697b      	ldr	r3, [r7, #20]
 8009f1a:	ee07 3a90 	vmov	s15, r3
 8009f1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009f22:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800a060 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8009f26:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009f2a:	4b48      	ldr	r3, [pc, #288]	; (800a04c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009f2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f2e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009f32:	ee07 3a90 	vmov	s15, r3
 8009f36:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009f3a:	ed97 6a03 	vldr	s12, [r7, #12]
 8009f3e:	eddf 5a45 	vldr	s11, [pc, #276]	; 800a054 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009f42:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009f46:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009f4a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009f4e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009f52:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009f56:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009f5a:	e021      	b.n	8009fa0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8009f5c:	697b      	ldr	r3, [r7, #20]
 8009f5e:	ee07 3a90 	vmov	s15, r3
 8009f62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009f66:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800a05c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8009f6a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009f6e:	4b37      	ldr	r3, [pc, #220]	; (800a04c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009f70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f72:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009f76:	ee07 3a90 	vmov	s15, r3
 8009f7a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009f7e:	ed97 6a03 	vldr	s12, [r7, #12]
 8009f82:	eddf 5a34 	vldr	s11, [pc, #208]	; 800a054 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009f86:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009f8a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009f8e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009f92:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009f96:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009f9a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009f9e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8009fa0:	4b2a      	ldr	r3, [pc, #168]	; (800a04c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009fa2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009fa4:	0a5b      	lsrs	r3, r3, #9
 8009fa6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009faa:	ee07 3a90 	vmov	s15, r3
 8009fae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009fb2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009fb6:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009fba:	edd7 6a07 	vldr	s13, [r7, #28]
 8009fbe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009fc2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009fc6:	ee17 2a90 	vmov	r2, s15
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8009fce:	4b1f      	ldr	r3, [pc, #124]	; (800a04c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009fd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009fd2:	0c1b      	lsrs	r3, r3, #16
 8009fd4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009fd8:	ee07 3a90 	vmov	s15, r3
 8009fdc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009fe0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009fe4:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009fe8:	edd7 6a07 	vldr	s13, [r7, #28]
 8009fec:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009ff0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009ff4:	ee17 2a90 	vmov	r2, s15
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8009ffc:	4b13      	ldr	r3, [pc, #76]	; (800a04c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009ffe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a000:	0e1b      	lsrs	r3, r3, #24
 800a002:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a006:	ee07 3a90 	vmov	s15, r3
 800a00a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a00e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a012:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a016:	edd7 6a07 	vldr	s13, [r7, #28]
 800a01a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a01e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a022:	ee17 2a90 	vmov	r2, s15
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800a02a:	e008      	b.n	800a03e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	2200      	movs	r2, #0
 800a030:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	2200      	movs	r2, #0
 800a036:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	2200      	movs	r2, #0
 800a03c:	609a      	str	r2, [r3, #8]
}
 800a03e:	bf00      	nop
 800a040:	3724      	adds	r7, #36	; 0x24
 800a042:	46bd      	mov	sp, r7
 800a044:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a048:	4770      	bx	lr
 800a04a:	bf00      	nop
 800a04c:	58024400 	.word	0x58024400
 800a050:	03d09000 	.word	0x03d09000
 800a054:	46000000 	.word	0x46000000
 800a058:	4c742400 	.word	0x4c742400
 800a05c:	4a742400 	.word	0x4a742400
 800a060:	4bbebc20 	.word	0x4bbebc20

0800a064 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 800a064:	b480      	push	{r7}
 800a066:	b089      	sub	sp, #36	; 0x24
 800a068:	af00      	add	r7, sp, #0
 800a06a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a06c:	4ba1      	ldr	r3, [pc, #644]	; (800a2f4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a06e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a070:	f003 0303 	and.w	r3, r3, #3
 800a074:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800a076:	4b9f      	ldr	r3, [pc, #636]	; (800a2f4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a078:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a07a:	0d1b      	lsrs	r3, r3, #20
 800a07c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a080:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800a082:	4b9c      	ldr	r3, [pc, #624]	; (800a2f4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a084:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a086:	0a1b      	lsrs	r3, r3, #8
 800a088:	f003 0301 	and.w	r3, r3, #1
 800a08c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 800a08e:	4b99      	ldr	r3, [pc, #612]	; (800a2f4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a090:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a092:	08db      	lsrs	r3, r3, #3
 800a094:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a098:	693a      	ldr	r2, [r7, #16]
 800a09a:	fb02 f303 	mul.w	r3, r2, r3
 800a09e:	ee07 3a90 	vmov	s15, r3
 800a0a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a0a6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800a0aa:	697b      	ldr	r3, [r7, #20]
 800a0ac:	2b00      	cmp	r3, #0
 800a0ae:	f000 8111 	beq.w	800a2d4 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800a0b2:	69bb      	ldr	r3, [r7, #24]
 800a0b4:	2b02      	cmp	r3, #2
 800a0b6:	f000 8083 	beq.w	800a1c0 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800a0ba:	69bb      	ldr	r3, [r7, #24]
 800a0bc:	2b02      	cmp	r3, #2
 800a0be:	f200 80a1 	bhi.w	800a204 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800a0c2:	69bb      	ldr	r3, [r7, #24]
 800a0c4:	2b00      	cmp	r3, #0
 800a0c6:	d003      	beq.n	800a0d0 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800a0c8:	69bb      	ldr	r3, [r7, #24]
 800a0ca:	2b01      	cmp	r3, #1
 800a0cc:	d056      	beq.n	800a17c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800a0ce:	e099      	b.n	800a204 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a0d0:	4b88      	ldr	r3, [pc, #544]	; (800a2f4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a0d2:	681b      	ldr	r3, [r3, #0]
 800a0d4:	f003 0320 	and.w	r3, r3, #32
 800a0d8:	2b00      	cmp	r3, #0
 800a0da:	d02d      	beq.n	800a138 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800a0dc:	4b85      	ldr	r3, [pc, #532]	; (800a2f4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a0de:	681b      	ldr	r3, [r3, #0]
 800a0e0:	08db      	lsrs	r3, r3, #3
 800a0e2:	f003 0303 	and.w	r3, r3, #3
 800a0e6:	4a84      	ldr	r2, [pc, #528]	; (800a2f8 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800a0e8:	fa22 f303 	lsr.w	r3, r2, r3
 800a0ec:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800a0ee:	68bb      	ldr	r3, [r7, #8]
 800a0f0:	ee07 3a90 	vmov	s15, r3
 800a0f4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a0f8:	697b      	ldr	r3, [r7, #20]
 800a0fa:	ee07 3a90 	vmov	s15, r3
 800a0fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a102:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a106:	4b7b      	ldr	r3, [pc, #492]	; (800a2f4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a108:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a10a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a10e:	ee07 3a90 	vmov	s15, r3
 800a112:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a116:	ed97 6a03 	vldr	s12, [r7, #12]
 800a11a:	eddf 5a78 	vldr	s11, [pc, #480]	; 800a2fc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a11e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a122:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a126:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a12a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a12e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a132:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800a136:	e087      	b.n	800a248 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800a138:	697b      	ldr	r3, [r7, #20]
 800a13a:	ee07 3a90 	vmov	s15, r3
 800a13e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a142:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800a300 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800a146:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a14a:	4b6a      	ldr	r3, [pc, #424]	; (800a2f4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a14c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a14e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a152:	ee07 3a90 	vmov	s15, r3
 800a156:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a15a:	ed97 6a03 	vldr	s12, [r7, #12]
 800a15e:	eddf 5a67 	vldr	s11, [pc, #412]	; 800a2fc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a162:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a166:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a16a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a16e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a172:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a176:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a17a:	e065      	b.n	800a248 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800a17c:	697b      	ldr	r3, [r7, #20]
 800a17e:	ee07 3a90 	vmov	s15, r3
 800a182:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a186:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800a304 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800a18a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a18e:	4b59      	ldr	r3, [pc, #356]	; (800a2f4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a190:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a192:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a196:	ee07 3a90 	vmov	s15, r3
 800a19a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a19e:	ed97 6a03 	vldr	s12, [r7, #12]
 800a1a2:	eddf 5a56 	vldr	s11, [pc, #344]	; 800a2fc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a1a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a1aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a1ae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a1b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a1b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a1ba:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a1be:	e043      	b.n	800a248 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800a1c0:	697b      	ldr	r3, [r7, #20]
 800a1c2:	ee07 3a90 	vmov	s15, r3
 800a1c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a1ca:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800a308 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800a1ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a1d2:	4b48      	ldr	r3, [pc, #288]	; (800a2f4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a1d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a1d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a1da:	ee07 3a90 	vmov	s15, r3
 800a1de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a1e2:	ed97 6a03 	vldr	s12, [r7, #12]
 800a1e6:	eddf 5a45 	vldr	s11, [pc, #276]	; 800a2fc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a1ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a1ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a1f2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a1f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a1fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a1fe:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a202:	e021      	b.n	800a248 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800a204:	697b      	ldr	r3, [r7, #20]
 800a206:	ee07 3a90 	vmov	s15, r3
 800a20a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a20e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800a304 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800a212:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a216:	4b37      	ldr	r3, [pc, #220]	; (800a2f4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a218:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a21a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a21e:	ee07 3a90 	vmov	s15, r3
 800a222:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a226:	ed97 6a03 	vldr	s12, [r7, #12]
 800a22a:	eddf 5a34 	vldr	s11, [pc, #208]	; 800a2fc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a22e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a232:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a236:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a23a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a23e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a242:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a246:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 800a248:	4b2a      	ldr	r3, [pc, #168]	; (800a2f4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a24a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a24c:	0a5b      	lsrs	r3, r3, #9
 800a24e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a252:	ee07 3a90 	vmov	s15, r3
 800a256:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a25a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a25e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a262:	edd7 6a07 	vldr	s13, [r7, #28]
 800a266:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a26a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a26e:	ee17 2a90 	vmov	r2, s15
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 800a276:	4b1f      	ldr	r3, [pc, #124]	; (800a2f4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a278:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a27a:	0c1b      	lsrs	r3, r3, #16
 800a27c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a280:	ee07 3a90 	vmov	s15, r3
 800a284:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a288:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a28c:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a290:	edd7 6a07 	vldr	s13, [r7, #28]
 800a294:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a298:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a29c:	ee17 2a90 	vmov	r2, s15
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 800a2a4:	4b13      	ldr	r3, [pc, #76]	; (800a2f4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a2a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a2a8:	0e1b      	lsrs	r3, r3, #24
 800a2aa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a2ae:	ee07 3a90 	vmov	s15, r3
 800a2b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a2b6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a2ba:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a2be:	edd7 6a07 	vldr	s13, [r7, #28]
 800a2c2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a2c6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a2ca:	ee17 2a90 	vmov	r2, s15
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800a2d2:	e008      	b.n	800a2e6 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	2200      	movs	r2, #0
 800a2d8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	2200      	movs	r2, #0
 800a2de:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	2200      	movs	r2, #0
 800a2e4:	609a      	str	r2, [r3, #8]
}
 800a2e6:	bf00      	nop
 800a2e8:	3724      	adds	r7, #36	; 0x24
 800a2ea:	46bd      	mov	sp, r7
 800a2ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2f0:	4770      	bx	lr
 800a2f2:	bf00      	nop
 800a2f4:	58024400 	.word	0x58024400
 800a2f8:	03d09000 	.word	0x03d09000
 800a2fc:	46000000 	.word	0x46000000
 800a300:	4c742400 	.word	0x4c742400
 800a304:	4a742400 	.word	0x4a742400
 800a308:	4bbebc20 	.word	0x4bbebc20

0800a30c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800a30c:	b580      	push	{r7, lr}
 800a30e:	b084      	sub	sp, #16
 800a310:	af00      	add	r7, sp, #0
 800a312:	6078      	str	r0, [r7, #4]
 800a314:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800a316:	2300      	movs	r3, #0
 800a318:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800a31a:	4b53      	ldr	r3, [pc, #332]	; (800a468 <RCCEx_PLL2_Config+0x15c>)
 800a31c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a31e:	f003 0303 	and.w	r3, r3, #3
 800a322:	2b03      	cmp	r3, #3
 800a324:	d101      	bne.n	800a32a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800a326:	2301      	movs	r3, #1
 800a328:	e099      	b.n	800a45e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800a32a:	4b4f      	ldr	r3, [pc, #316]	; (800a468 <RCCEx_PLL2_Config+0x15c>)
 800a32c:	681b      	ldr	r3, [r3, #0]
 800a32e:	4a4e      	ldr	r2, [pc, #312]	; (800a468 <RCCEx_PLL2_Config+0x15c>)
 800a330:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800a334:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a336:	f7fc fd13 	bl	8006d60 <HAL_GetTick>
 800a33a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800a33c:	e008      	b.n	800a350 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800a33e:	f7fc fd0f 	bl	8006d60 <HAL_GetTick>
 800a342:	4602      	mov	r2, r0
 800a344:	68bb      	ldr	r3, [r7, #8]
 800a346:	1ad3      	subs	r3, r2, r3
 800a348:	2b02      	cmp	r3, #2
 800a34a:	d901      	bls.n	800a350 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800a34c:	2303      	movs	r3, #3
 800a34e:	e086      	b.n	800a45e <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800a350:	4b45      	ldr	r3, [pc, #276]	; (800a468 <RCCEx_PLL2_Config+0x15c>)
 800a352:	681b      	ldr	r3, [r3, #0]
 800a354:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a358:	2b00      	cmp	r3, #0
 800a35a:	d1f0      	bne.n	800a33e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800a35c:	4b42      	ldr	r3, [pc, #264]	; (800a468 <RCCEx_PLL2_Config+0x15c>)
 800a35e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a360:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	681b      	ldr	r3, [r3, #0]
 800a368:	031b      	lsls	r3, r3, #12
 800a36a:	493f      	ldr	r1, [pc, #252]	; (800a468 <RCCEx_PLL2_Config+0x15c>)
 800a36c:	4313      	orrs	r3, r2
 800a36e:	628b      	str	r3, [r1, #40]	; 0x28
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	685b      	ldr	r3, [r3, #4]
 800a374:	3b01      	subs	r3, #1
 800a376:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	689b      	ldr	r3, [r3, #8]
 800a37e:	3b01      	subs	r3, #1
 800a380:	025b      	lsls	r3, r3, #9
 800a382:	b29b      	uxth	r3, r3
 800a384:	431a      	orrs	r2, r3
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	68db      	ldr	r3, [r3, #12]
 800a38a:	3b01      	subs	r3, #1
 800a38c:	041b      	lsls	r3, r3, #16
 800a38e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800a392:	431a      	orrs	r2, r3
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	691b      	ldr	r3, [r3, #16]
 800a398:	3b01      	subs	r3, #1
 800a39a:	061b      	lsls	r3, r3, #24
 800a39c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800a3a0:	4931      	ldr	r1, [pc, #196]	; (800a468 <RCCEx_PLL2_Config+0x15c>)
 800a3a2:	4313      	orrs	r3, r2
 800a3a4:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800a3a6:	4b30      	ldr	r3, [pc, #192]	; (800a468 <RCCEx_PLL2_Config+0x15c>)
 800a3a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a3aa:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	695b      	ldr	r3, [r3, #20]
 800a3b2:	492d      	ldr	r1, [pc, #180]	; (800a468 <RCCEx_PLL2_Config+0x15c>)
 800a3b4:	4313      	orrs	r3, r2
 800a3b6:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800a3b8:	4b2b      	ldr	r3, [pc, #172]	; (800a468 <RCCEx_PLL2_Config+0x15c>)
 800a3ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a3bc:	f023 0220 	bic.w	r2, r3, #32
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	699b      	ldr	r3, [r3, #24]
 800a3c4:	4928      	ldr	r1, [pc, #160]	; (800a468 <RCCEx_PLL2_Config+0x15c>)
 800a3c6:	4313      	orrs	r3, r2
 800a3c8:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800a3ca:	4b27      	ldr	r3, [pc, #156]	; (800a468 <RCCEx_PLL2_Config+0x15c>)
 800a3cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a3ce:	4a26      	ldr	r2, [pc, #152]	; (800a468 <RCCEx_PLL2_Config+0x15c>)
 800a3d0:	f023 0310 	bic.w	r3, r3, #16
 800a3d4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800a3d6:	4b24      	ldr	r3, [pc, #144]	; (800a468 <RCCEx_PLL2_Config+0x15c>)
 800a3d8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a3da:	4b24      	ldr	r3, [pc, #144]	; (800a46c <RCCEx_PLL2_Config+0x160>)
 800a3dc:	4013      	ands	r3, r2
 800a3de:	687a      	ldr	r2, [r7, #4]
 800a3e0:	69d2      	ldr	r2, [r2, #28]
 800a3e2:	00d2      	lsls	r2, r2, #3
 800a3e4:	4920      	ldr	r1, [pc, #128]	; (800a468 <RCCEx_PLL2_Config+0x15c>)
 800a3e6:	4313      	orrs	r3, r2
 800a3e8:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800a3ea:	4b1f      	ldr	r3, [pc, #124]	; (800a468 <RCCEx_PLL2_Config+0x15c>)
 800a3ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a3ee:	4a1e      	ldr	r2, [pc, #120]	; (800a468 <RCCEx_PLL2_Config+0x15c>)
 800a3f0:	f043 0310 	orr.w	r3, r3, #16
 800a3f4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800a3f6:	683b      	ldr	r3, [r7, #0]
 800a3f8:	2b00      	cmp	r3, #0
 800a3fa:	d106      	bne.n	800a40a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800a3fc:	4b1a      	ldr	r3, [pc, #104]	; (800a468 <RCCEx_PLL2_Config+0x15c>)
 800a3fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a400:	4a19      	ldr	r2, [pc, #100]	; (800a468 <RCCEx_PLL2_Config+0x15c>)
 800a402:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a406:	62d3      	str	r3, [r2, #44]	; 0x2c
 800a408:	e00f      	b.n	800a42a <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800a40a:	683b      	ldr	r3, [r7, #0]
 800a40c:	2b01      	cmp	r3, #1
 800a40e:	d106      	bne.n	800a41e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800a410:	4b15      	ldr	r3, [pc, #84]	; (800a468 <RCCEx_PLL2_Config+0x15c>)
 800a412:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a414:	4a14      	ldr	r2, [pc, #80]	; (800a468 <RCCEx_PLL2_Config+0x15c>)
 800a416:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a41a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800a41c:	e005      	b.n	800a42a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800a41e:	4b12      	ldr	r3, [pc, #72]	; (800a468 <RCCEx_PLL2_Config+0x15c>)
 800a420:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a422:	4a11      	ldr	r2, [pc, #68]	; (800a468 <RCCEx_PLL2_Config+0x15c>)
 800a424:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800a428:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800a42a:	4b0f      	ldr	r3, [pc, #60]	; (800a468 <RCCEx_PLL2_Config+0x15c>)
 800a42c:	681b      	ldr	r3, [r3, #0]
 800a42e:	4a0e      	ldr	r2, [pc, #56]	; (800a468 <RCCEx_PLL2_Config+0x15c>)
 800a430:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800a434:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a436:	f7fc fc93 	bl	8006d60 <HAL_GetTick>
 800a43a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800a43c:	e008      	b.n	800a450 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800a43e:	f7fc fc8f 	bl	8006d60 <HAL_GetTick>
 800a442:	4602      	mov	r2, r0
 800a444:	68bb      	ldr	r3, [r7, #8]
 800a446:	1ad3      	subs	r3, r2, r3
 800a448:	2b02      	cmp	r3, #2
 800a44a:	d901      	bls.n	800a450 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800a44c:	2303      	movs	r3, #3
 800a44e:	e006      	b.n	800a45e <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800a450:	4b05      	ldr	r3, [pc, #20]	; (800a468 <RCCEx_PLL2_Config+0x15c>)
 800a452:	681b      	ldr	r3, [r3, #0]
 800a454:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a458:	2b00      	cmp	r3, #0
 800a45a:	d0f0      	beq.n	800a43e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800a45c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a45e:	4618      	mov	r0, r3
 800a460:	3710      	adds	r7, #16
 800a462:	46bd      	mov	sp, r7
 800a464:	bd80      	pop	{r7, pc}
 800a466:	bf00      	nop
 800a468:	58024400 	.word	0x58024400
 800a46c:	ffff0007 	.word	0xffff0007

0800a470 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800a470:	b580      	push	{r7, lr}
 800a472:	b084      	sub	sp, #16
 800a474:	af00      	add	r7, sp, #0
 800a476:	6078      	str	r0, [r7, #4]
 800a478:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800a47a:	2300      	movs	r3, #0
 800a47c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800a47e:	4b53      	ldr	r3, [pc, #332]	; (800a5cc <RCCEx_PLL3_Config+0x15c>)
 800a480:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a482:	f003 0303 	and.w	r3, r3, #3
 800a486:	2b03      	cmp	r3, #3
 800a488:	d101      	bne.n	800a48e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800a48a:	2301      	movs	r3, #1
 800a48c:	e099      	b.n	800a5c2 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800a48e:	4b4f      	ldr	r3, [pc, #316]	; (800a5cc <RCCEx_PLL3_Config+0x15c>)
 800a490:	681b      	ldr	r3, [r3, #0]
 800a492:	4a4e      	ldr	r2, [pc, #312]	; (800a5cc <RCCEx_PLL3_Config+0x15c>)
 800a494:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a498:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a49a:	f7fc fc61 	bl	8006d60 <HAL_GetTick>
 800a49e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800a4a0:	e008      	b.n	800a4b4 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800a4a2:	f7fc fc5d 	bl	8006d60 <HAL_GetTick>
 800a4a6:	4602      	mov	r2, r0
 800a4a8:	68bb      	ldr	r3, [r7, #8]
 800a4aa:	1ad3      	subs	r3, r2, r3
 800a4ac:	2b02      	cmp	r3, #2
 800a4ae:	d901      	bls.n	800a4b4 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800a4b0:	2303      	movs	r3, #3
 800a4b2:	e086      	b.n	800a5c2 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800a4b4:	4b45      	ldr	r3, [pc, #276]	; (800a5cc <RCCEx_PLL3_Config+0x15c>)
 800a4b6:	681b      	ldr	r3, [r3, #0]
 800a4b8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a4bc:	2b00      	cmp	r3, #0
 800a4be:	d1f0      	bne.n	800a4a2 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800a4c0:	4b42      	ldr	r3, [pc, #264]	; (800a5cc <RCCEx_PLL3_Config+0x15c>)
 800a4c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a4c4:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	681b      	ldr	r3, [r3, #0]
 800a4cc:	051b      	lsls	r3, r3, #20
 800a4ce:	493f      	ldr	r1, [pc, #252]	; (800a5cc <RCCEx_PLL3_Config+0x15c>)
 800a4d0:	4313      	orrs	r3, r2
 800a4d2:	628b      	str	r3, [r1, #40]	; 0x28
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	685b      	ldr	r3, [r3, #4]
 800a4d8:	3b01      	subs	r3, #1
 800a4da:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a4de:	687b      	ldr	r3, [r7, #4]
 800a4e0:	689b      	ldr	r3, [r3, #8]
 800a4e2:	3b01      	subs	r3, #1
 800a4e4:	025b      	lsls	r3, r3, #9
 800a4e6:	b29b      	uxth	r3, r3
 800a4e8:	431a      	orrs	r2, r3
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	68db      	ldr	r3, [r3, #12]
 800a4ee:	3b01      	subs	r3, #1
 800a4f0:	041b      	lsls	r3, r3, #16
 800a4f2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800a4f6:	431a      	orrs	r2, r3
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	691b      	ldr	r3, [r3, #16]
 800a4fc:	3b01      	subs	r3, #1
 800a4fe:	061b      	lsls	r3, r3, #24
 800a500:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800a504:	4931      	ldr	r1, [pc, #196]	; (800a5cc <RCCEx_PLL3_Config+0x15c>)
 800a506:	4313      	orrs	r3, r2
 800a508:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800a50a:	4b30      	ldr	r3, [pc, #192]	; (800a5cc <RCCEx_PLL3_Config+0x15c>)
 800a50c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a50e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800a512:	687b      	ldr	r3, [r7, #4]
 800a514:	695b      	ldr	r3, [r3, #20]
 800a516:	492d      	ldr	r1, [pc, #180]	; (800a5cc <RCCEx_PLL3_Config+0x15c>)
 800a518:	4313      	orrs	r3, r2
 800a51a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800a51c:	4b2b      	ldr	r3, [pc, #172]	; (800a5cc <RCCEx_PLL3_Config+0x15c>)
 800a51e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a520:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	699b      	ldr	r3, [r3, #24]
 800a528:	4928      	ldr	r1, [pc, #160]	; (800a5cc <RCCEx_PLL3_Config+0x15c>)
 800a52a:	4313      	orrs	r3, r2
 800a52c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800a52e:	4b27      	ldr	r3, [pc, #156]	; (800a5cc <RCCEx_PLL3_Config+0x15c>)
 800a530:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a532:	4a26      	ldr	r2, [pc, #152]	; (800a5cc <RCCEx_PLL3_Config+0x15c>)
 800a534:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a538:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800a53a:	4b24      	ldr	r3, [pc, #144]	; (800a5cc <RCCEx_PLL3_Config+0x15c>)
 800a53c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a53e:	4b24      	ldr	r3, [pc, #144]	; (800a5d0 <RCCEx_PLL3_Config+0x160>)
 800a540:	4013      	ands	r3, r2
 800a542:	687a      	ldr	r2, [r7, #4]
 800a544:	69d2      	ldr	r2, [r2, #28]
 800a546:	00d2      	lsls	r2, r2, #3
 800a548:	4920      	ldr	r1, [pc, #128]	; (800a5cc <RCCEx_PLL3_Config+0x15c>)
 800a54a:	4313      	orrs	r3, r2
 800a54c:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800a54e:	4b1f      	ldr	r3, [pc, #124]	; (800a5cc <RCCEx_PLL3_Config+0x15c>)
 800a550:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a552:	4a1e      	ldr	r2, [pc, #120]	; (800a5cc <RCCEx_PLL3_Config+0x15c>)
 800a554:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a558:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800a55a:	683b      	ldr	r3, [r7, #0]
 800a55c:	2b00      	cmp	r3, #0
 800a55e:	d106      	bne.n	800a56e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800a560:	4b1a      	ldr	r3, [pc, #104]	; (800a5cc <RCCEx_PLL3_Config+0x15c>)
 800a562:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a564:	4a19      	ldr	r2, [pc, #100]	; (800a5cc <RCCEx_PLL3_Config+0x15c>)
 800a566:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800a56a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800a56c:	e00f      	b.n	800a58e <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800a56e:	683b      	ldr	r3, [r7, #0]
 800a570:	2b01      	cmp	r3, #1
 800a572:	d106      	bne.n	800a582 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800a574:	4b15      	ldr	r3, [pc, #84]	; (800a5cc <RCCEx_PLL3_Config+0x15c>)
 800a576:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a578:	4a14      	ldr	r2, [pc, #80]	; (800a5cc <RCCEx_PLL3_Config+0x15c>)
 800a57a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800a57e:	62d3      	str	r3, [r2, #44]	; 0x2c
 800a580:	e005      	b.n	800a58e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800a582:	4b12      	ldr	r3, [pc, #72]	; (800a5cc <RCCEx_PLL3_Config+0x15c>)
 800a584:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a586:	4a11      	ldr	r2, [pc, #68]	; (800a5cc <RCCEx_PLL3_Config+0x15c>)
 800a588:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800a58c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800a58e:	4b0f      	ldr	r3, [pc, #60]	; (800a5cc <RCCEx_PLL3_Config+0x15c>)
 800a590:	681b      	ldr	r3, [r3, #0]
 800a592:	4a0e      	ldr	r2, [pc, #56]	; (800a5cc <RCCEx_PLL3_Config+0x15c>)
 800a594:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a598:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a59a:	f7fc fbe1 	bl	8006d60 <HAL_GetTick>
 800a59e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800a5a0:	e008      	b.n	800a5b4 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800a5a2:	f7fc fbdd 	bl	8006d60 <HAL_GetTick>
 800a5a6:	4602      	mov	r2, r0
 800a5a8:	68bb      	ldr	r3, [r7, #8]
 800a5aa:	1ad3      	subs	r3, r2, r3
 800a5ac:	2b02      	cmp	r3, #2
 800a5ae:	d901      	bls.n	800a5b4 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800a5b0:	2303      	movs	r3, #3
 800a5b2:	e006      	b.n	800a5c2 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800a5b4:	4b05      	ldr	r3, [pc, #20]	; (800a5cc <RCCEx_PLL3_Config+0x15c>)
 800a5b6:	681b      	ldr	r3, [r3, #0]
 800a5b8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a5bc:	2b00      	cmp	r3, #0
 800a5be:	d0f0      	beq.n	800a5a2 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800a5c0:	7bfb      	ldrb	r3, [r7, #15]
}
 800a5c2:	4618      	mov	r0, r3
 800a5c4:	3710      	adds	r7, #16
 800a5c6:	46bd      	mov	sp, r7
 800a5c8:	bd80      	pop	{r7, pc}
 800a5ca:	bf00      	nop
 800a5cc:	58024400 	.word	0x58024400
 800a5d0:	ffff0007 	.word	0xffff0007

0800a5d4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a5d4:	b580      	push	{r7, lr}
 800a5d6:	b082      	sub	sp, #8
 800a5d8:	af00      	add	r7, sp, #0
 800a5da:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	2b00      	cmp	r3, #0
 800a5e0:	d101      	bne.n	800a5e6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a5e2:	2301      	movs	r3, #1
 800a5e4:	e049      	b.n	800a67a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a5ec:	b2db      	uxtb	r3, r3
 800a5ee:	2b00      	cmp	r3, #0
 800a5f0:	d106      	bne.n	800a600 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	2200      	movs	r2, #0
 800a5f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a5fa:	6878      	ldr	r0, [r7, #4]
 800a5fc:	f7fa f82a 	bl	8004654 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a600:	687b      	ldr	r3, [r7, #4]
 800a602:	2202      	movs	r2, #2
 800a604:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a608:	687b      	ldr	r3, [r7, #4]
 800a60a:	681a      	ldr	r2, [r3, #0]
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	3304      	adds	r3, #4
 800a610:	4619      	mov	r1, r3
 800a612:	4610      	mov	r0, r2
 800a614:	f001 f9d0 	bl	800b9b8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	2201      	movs	r2, #1
 800a61c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	2201      	movs	r2, #1
 800a624:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	2201      	movs	r2, #1
 800a62c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	2201      	movs	r2, #1
 800a634:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	2201      	movs	r2, #1
 800a63c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	2201      	movs	r2, #1
 800a644:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	2201      	movs	r2, #1
 800a64c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	2201      	movs	r2, #1
 800a654:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	2201      	movs	r2, #1
 800a65c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	2201      	movs	r2, #1
 800a664:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	2201      	movs	r2, #1
 800a66c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	2201      	movs	r2, #1
 800a674:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a678:	2300      	movs	r3, #0
}
 800a67a:	4618      	mov	r0, r3
 800a67c:	3708      	adds	r7, #8
 800a67e:	46bd      	mov	sp, r7
 800a680:	bd80      	pop	{r7, pc}
	...

0800a684 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800a684:	b480      	push	{r7}
 800a686:	b085      	sub	sp, #20
 800a688:	af00      	add	r7, sp, #0
 800a68a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a692:	b2db      	uxtb	r3, r3
 800a694:	2b01      	cmp	r3, #1
 800a696:	d001      	beq.n	800a69c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800a698:	2301      	movs	r3, #1
 800a69a:	e04c      	b.n	800a736 <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	2202      	movs	r2, #2
 800a6a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	681b      	ldr	r3, [r3, #0]
 800a6a8:	4a26      	ldr	r2, [pc, #152]	; (800a744 <HAL_TIM_Base_Start+0xc0>)
 800a6aa:	4293      	cmp	r3, r2
 800a6ac:	d022      	beq.n	800a6f4 <HAL_TIM_Base_Start+0x70>
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	681b      	ldr	r3, [r3, #0]
 800a6b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a6b6:	d01d      	beq.n	800a6f4 <HAL_TIM_Base_Start+0x70>
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	681b      	ldr	r3, [r3, #0]
 800a6bc:	4a22      	ldr	r2, [pc, #136]	; (800a748 <HAL_TIM_Base_Start+0xc4>)
 800a6be:	4293      	cmp	r3, r2
 800a6c0:	d018      	beq.n	800a6f4 <HAL_TIM_Base_Start+0x70>
 800a6c2:	687b      	ldr	r3, [r7, #4]
 800a6c4:	681b      	ldr	r3, [r3, #0]
 800a6c6:	4a21      	ldr	r2, [pc, #132]	; (800a74c <HAL_TIM_Base_Start+0xc8>)
 800a6c8:	4293      	cmp	r3, r2
 800a6ca:	d013      	beq.n	800a6f4 <HAL_TIM_Base_Start+0x70>
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	681b      	ldr	r3, [r3, #0]
 800a6d0:	4a1f      	ldr	r2, [pc, #124]	; (800a750 <HAL_TIM_Base_Start+0xcc>)
 800a6d2:	4293      	cmp	r3, r2
 800a6d4:	d00e      	beq.n	800a6f4 <HAL_TIM_Base_Start+0x70>
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	681b      	ldr	r3, [r3, #0]
 800a6da:	4a1e      	ldr	r2, [pc, #120]	; (800a754 <HAL_TIM_Base_Start+0xd0>)
 800a6dc:	4293      	cmp	r3, r2
 800a6de:	d009      	beq.n	800a6f4 <HAL_TIM_Base_Start+0x70>
 800a6e0:	687b      	ldr	r3, [r7, #4]
 800a6e2:	681b      	ldr	r3, [r3, #0]
 800a6e4:	4a1c      	ldr	r2, [pc, #112]	; (800a758 <HAL_TIM_Base_Start+0xd4>)
 800a6e6:	4293      	cmp	r3, r2
 800a6e8:	d004      	beq.n	800a6f4 <HAL_TIM_Base_Start+0x70>
 800a6ea:	687b      	ldr	r3, [r7, #4]
 800a6ec:	681b      	ldr	r3, [r3, #0]
 800a6ee:	4a1b      	ldr	r2, [pc, #108]	; (800a75c <HAL_TIM_Base_Start+0xd8>)
 800a6f0:	4293      	cmp	r3, r2
 800a6f2:	d115      	bne.n	800a720 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	681b      	ldr	r3, [r3, #0]
 800a6f8:	689a      	ldr	r2, [r3, #8]
 800a6fa:	4b19      	ldr	r3, [pc, #100]	; (800a760 <HAL_TIM_Base_Start+0xdc>)
 800a6fc:	4013      	ands	r3, r2
 800a6fe:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a700:	68fb      	ldr	r3, [r7, #12]
 800a702:	2b06      	cmp	r3, #6
 800a704:	d015      	beq.n	800a732 <HAL_TIM_Base_Start+0xae>
 800a706:	68fb      	ldr	r3, [r7, #12]
 800a708:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a70c:	d011      	beq.n	800a732 <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	681b      	ldr	r3, [r3, #0]
 800a712:	681a      	ldr	r2, [r3, #0]
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	681b      	ldr	r3, [r3, #0]
 800a718:	f042 0201 	orr.w	r2, r2, #1
 800a71c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a71e:	e008      	b.n	800a732 <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	681b      	ldr	r3, [r3, #0]
 800a724:	681a      	ldr	r2, [r3, #0]
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	681b      	ldr	r3, [r3, #0]
 800a72a:	f042 0201 	orr.w	r2, r2, #1
 800a72e:	601a      	str	r2, [r3, #0]
 800a730:	e000      	b.n	800a734 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a732:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800a734:	2300      	movs	r3, #0
}
 800a736:	4618      	mov	r0, r3
 800a738:	3714      	adds	r7, #20
 800a73a:	46bd      	mov	sp, r7
 800a73c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a740:	4770      	bx	lr
 800a742:	bf00      	nop
 800a744:	40010000 	.word	0x40010000
 800a748:	40000400 	.word	0x40000400
 800a74c:	40000800 	.word	0x40000800
 800a750:	40000c00 	.word	0x40000c00
 800a754:	40010400 	.word	0x40010400
 800a758:	40001800 	.word	0x40001800
 800a75c:	40014000 	.word	0x40014000
 800a760:	00010007 	.word	0x00010007

0800a764 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 800a764:	b480      	push	{r7}
 800a766:	b083      	sub	sp, #12
 800a768:	af00      	add	r7, sp, #0
 800a76a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	681b      	ldr	r3, [r3, #0]
 800a770:	6a1a      	ldr	r2, [r3, #32]
 800a772:	f241 1311 	movw	r3, #4369	; 0x1111
 800a776:	4013      	ands	r3, r2
 800a778:	2b00      	cmp	r3, #0
 800a77a:	d10f      	bne.n	800a79c <HAL_TIM_Base_Stop+0x38>
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	681b      	ldr	r3, [r3, #0]
 800a780:	6a1a      	ldr	r2, [r3, #32]
 800a782:	f240 4344 	movw	r3, #1092	; 0x444
 800a786:	4013      	ands	r3, r2
 800a788:	2b00      	cmp	r3, #0
 800a78a:	d107      	bne.n	800a79c <HAL_TIM_Base_Stop+0x38>
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	681b      	ldr	r3, [r3, #0]
 800a790:	681a      	ldr	r2, [r3, #0]
 800a792:	687b      	ldr	r3, [r7, #4]
 800a794:	681b      	ldr	r3, [r3, #0]
 800a796:	f022 0201 	bic.w	r2, r2, #1
 800a79a:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	2201      	movs	r2, #1
 800a7a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800a7a4:	2300      	movs	r3, #0
}
 800a7a6:	4618      	mov	r0, r3
 800a7a8:	370c      	adds	r7, #12
 800a7aa:	46bd      	mov	sp, r7
 800a7ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7b0:	4770      	bx	lr
	...

0800a7b4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800a7b4:	b480      	push	{r7}
 800a7b6:	b085      	sub	sp, #20
 800a7b8:	af00      	add	r7, sp, #0
 800a7ba:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a7c2:	b2db      	uxtb	r3, r3
 800a7c4:	2b01      	cmp	r3, #1
 800a7c6:	d001      	beq.n	800a7cc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800a7c8:	2301      	movs	r3, #1
 800a7ca:	e054      	b.n	800a876 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	2202      	movs	r2, #2
 800a7d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	681b      	ldr	r3, [r3, #0]
 800a7d8:	68da      	ldr	r2, [r3, #12]
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	681b      	ldr	r3, [r3, #0]
 800a7de:	f042 0201 	orr.w	r2, r2, #1
 800a7e2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	681b      	ldr	r3, [r3, #0]
 800a7e8:	4a26      	ldr	r2, [pc, #152]	; (800a884 <HAL_TIM_Base_Start_IT+0xd0>)
 800a7ea:	4293      	cmp	r3, r2
 800a7ec:	d022      	beq.n	800a834 <HAL_TIM_Base_Start_IT+0x80>
 800a7ee:	687b      	ldr	r3, [r7, #4]
 800a7f0:	681b      	ldr	r3, [r3, #0]
 800a7f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a7f6:	d01d      	beq.n	800a834 <HAL_TIM_Base_Start_IT+0x80>
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	681b      	ldr	r3, [r3, #0]
 800a7fc:	4a22      	ldr	r2, [pc, #136]	; (800a888 <HAL_TIM_Base_Start_IT+0xd4>)
 800a7fe:	4293      	cmp	r3, r2
 800a800:	d018      	beq.n	800a834 <HAL_TIM_Base_Start_IT+0x80>
 800a802:	687b      	ldr	r3, [r7, #4]
 800a804:	681b      	ldr	r3, [r3, #0]
 800a806:	4a21      	ldr	r2, [pc, #132]	; (800a88c <HAL_TIM_Base_Start_IT+0xd8>)
 800a808:	4293      	cmp	r3, r2
 800a80a:	d013      	beq.n	800a834 <HAL_TIM_Base_Start_IT+0x80>
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	681b      	ldr	r3, [r3, #0]
 800a810:	4a1f      	ldr	r2, [pc, #124]	; (800a890 <HAL_TIM_Base_Start_IT+0xdc>)
 800a812:	4293      	cmp	r3, r2
 800a814:	d00e      	beq.n	800a834 <HAL_TIM_Base_Start_IT+0x80>
 800a816:	687b      	ldr	r3, [r7, #4]
 800a818:	681b      	ldr	r3, [r3, #0]
 800a81a:	4a1e      	ldr	r2, [pc, #120]	; (800a894 <HAL_TIM_Base_Start_IT+0xe0>)
 800a81c:	4293      	cmp	r3, r2
 800a81e:	d009      	beq.n	800a834 <HAL_TIM_Base_Start_IT+0x80>
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	681b      	ldr	r3, [r3, #0]
 800a824:	4a1c      	ldr	r2, [pc, #112]	; (800a898 <HAL_TIM_Base_Start_IT+0xe4>)
 800a826:	4293      	cmp	r3, r2
 800a828:	d004      	beq.n	800a834 <HAL_TIM_Base_Start_IT+0x80>
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	681b      	ldr	r3, [r3, #0]
 800a82e:	4a1b      	ldr	r2, [pc, #108]	; (800a89c <HAL_TIM_Base_Start_IT+0xe8>)
 800a830:	4293      	cmp	r3, r2
 800a832:	d115      	bne.n	800a860 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	681b      	ldr	r3, [r3, #0]
 800a838:	689a      	ldr	r2, [r3, #8]
 800a83a:	4b19      	ldr	r3, [pc, #100]	; (800a8a0 <HAL_TIM_Base_Start_IT+0xec>)
 800a83c:	4013      	ands	r3, r2
 800a83e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a840:	68fb      	ldr	r3, [r7, #12]
 800a842:	2b06      	cmp	r3, #6
 800a844:	d015      	beq.n	800a872 <HAL_TIM_Base_Start_IT+0xbe>
 800a846:	68fb      	ldr	r3, [r7, #12]
 800a848:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a84c:	d011      	beq.n	800a872 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800a84e:	687b      	ldr	r3, [r7, #4]
 800a850:	681b      	ldr	r3, [r3, #0]
 800a852:	681a      	ldr	r2, [r3, #0]
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	681b      	ldr	r3, [r3, #0]
 800a858:	f042 0201 	orr.w	r2, r2, #1
 800a85c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a85e:	e008      	b.n	800a872 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	681b      	ldr	r3, [r3, #0]
 800a864:	681a      	ldr	r2, [r3, #0]
 800a866:	687b      	ldr	r3, [r7, #4]
 800a868:	681b      	ldr	r3, [r3, #0]
 800a86a:	f042 0201 	orr.w	r2, r2, #1
 800a86e:	601a      	str	r2, [r3, #0]
 800a870:	e000      	b.n	800a874 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a872:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800a874:	2300      	movs	r3, #0
}
 800a876:	4618      	mov	r0, r3
 800a878:	3714      	adds	r7, #20
 800a87a:	46bd      	mov	sp, r7
 800a87c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a880:	4770      	bx	lr
 800a882:	bf00      	nop
 800a884:	40010000 	.word	0x40010000
 800a888:	40000400 	.word	0x40000400
 800a88c:	40000800 	.word	0x40000800
 800a890:	40000c00 	.word	0x40000c00
 800a894:	40010400 	.word	0x40010400
 800a898:	40001800 	.word	0x40001800
 800a89c:	40014000 	.word	0x40014000
 800a8a0:	00010007 	.word	0x00010007

0800a8a4 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800a8a4:	b480      	push	{r7}
 800a8a6:	b083      	sub	sp, #12
 800a8a8:	af00      	add	r7, sp, #0
 800a8aa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	681b      	ldr	r3, [r3, #0]
 800a8b0:	68da      	ldr	r2, [r3, #12]
 800a8b2:	687b      	ldr	r3, [r7, #4]
 800a8b4:	681b      	ldr	r3, [r3, #0]
 800a8b6:	f022 0201 	bic.w	r2, r2, #1
 800a8ba:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	681b      	ldr	r3, [r3, #0]
 800a8c0:	6a1a      	ldr	r2, [r3, #32]
 800a8c2:	f241 1311 	movw	r3, #4369	; 0x1111
 800a8c6:	4013      	ands	r3, r2
 800a8c8:	2b00      	cmp	r3, #0
 800a8ca:	d10f      	bne.n	800a8ec <HAL_TIM_Base_Stop_IT+0x48>
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	681b      	ldr	r3, [r3, #0]
 800a8d0:	6a1a      	ldr	r2, [r3, #32]
 800a8d2:	f240 4344 	movw	r3, #1092	; 0x444
 800a8d6:	4013      	ands	r3, r2
 800a8d8:	2b00      	cmp	r3, #0
 800a8da:	d107      	bne.n	800a8ec <HAL_TIM_Base_Stop_IT+0x48>
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	681b      	ldr	r3, [r3, #0]
 800a8e0:	681a      	ldr	r2, [r3, #0]
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	681b      	ldr	r3, [r3, #0]
 800a8e6:	f022 0201 	bic.w	r2, r2, #1
 800a8ea:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	2201      	movs	r2, #1
 800a8f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800a8f4:	2300      	movs	r3, #0
}
 800a8f6:	4618      	mov	r0, r3
 800a8f8:	370c      	adds	r7, #12
 800a8fa:	46bd      	mov	sp, r7
 800a8fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a900:	4770      	bx	lr

0800a902 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800a902:	b580      	push	{r7, lr}
 800a904:	b082      	sub	sp, #8
 800a906:	af00      	add	r7, sp, #0
 800a908:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	2b00      	cmp	r3, #0
 800a90e:	d101      	bne.n	800a914 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800a910:	2301      	movs	r3, #1
 800a912:	e049      	b.n	800a9a8 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a914:	687b      	ldr	r3, [r7, #4]
 800a916:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a91a:	b2db      	uxtb	r3, r3
 800a91c:	2b00      	cmp	r3, #0
 800a91e:	d106      	bne.n	800a92e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	2200      	movs	r2, #0
 800a924:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800a928:	6878      	ldr	r0, [r7, #4]
 800a92a:	f000 f841 	bl	800a9b0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	2202      	movs	r2, #2
 800a932:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	681a      	ldr	r2, [r3, #0]
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	3304      	adds	r3, #4
 800a93e:	4619      	mov	r1, r3
 800a940:	4610      	mov	r0, r2
 800a942:	f001 f839 	bl	800b9b8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	2201      	movs	r2, #1
 800a94a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a94e:	687b      	ldr	r3, [r7, #4]
 800a950:	2201      	movs	r2, #1
 800a952:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a956:	687b      	ldr	r3, [r7, #4]
 800a958:	2201      	movs	r2, #1
 800a95a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a95e:	687b      	ldr	r3, [r7, #4]
 800a960:	2201      	movs	r2, #1
 800a962:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a966:	687b      	ldr	r3, [r7, #4]
 800a968:	2201      	movs	r2, #1
 800a96a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a96e:	687b      	ldr	r3, [r7, #4]
 800a970:	2201      	movs	r2, #1
 800a972:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a976:	687b      	ldr	r3, [r7, #4]
 800a978:	2201      	movs	r2, #1
 800a97a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	2201      	movs	r2, #1
 800a982:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a986:	687b      	ldr	r3, [r7, #4]
 800a988:	2201      	movs	r2, #1
 800a98a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a98e:	687b      	ldr	r3, [r7, #4]
 800a990:	2201      	movs	r2, #1
 800a992:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800a996:	687b      	ldr	r3, [r7, #4]
 800a998:	2201      	movs	r2, #1
 800a99a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	2201      	movs	r2, #1
 800a9a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a9a6:	2300      	movs	r3, #0
}
 800a9a8:	4618      	mov	r0, r3
 800a9aa:	3708      	adds	r7, #8
 800a9ac:	46bd      	mov	sp, r7
 800a9ae:	bd80      	pop	{r7, pc}

0800a9b0 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800a9b0:	b480      	push	{r7}
 800a9b2:	b083      	sub	sp, #12
 800a9b4:	af00      	add	r7, sp, #0
 800a9b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800a9b8:	bf00      	nop
 800a9ba:	370c      	adds	r7, #12
 800a9bc:	46bd      	mov	sp, r7
 800a9be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9c2:	4770      	bx	lr

0800a9c4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800a9c4:	b580      	push	{r7, lr}
 800a9c6:	b084      	sub	sp, #16
 800a9c8:	af00      	add	r7, sp, #0
 800a9ca:	6078      	str	r0, [r7, #4]
 800a9cc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800a9ce:	683b      	ldr	r3, [r7, #0]
 800a9d0:	2b00      	cmp	r3, #0
 800a9d2:	d109      	bne.n	800a9e8 <HAL_TIM_PWM_Start+0x24>
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a9da:	b2db      	uxtb	r3, r3
 800a9dc:	2b01      	cmp	r3, #1
 800a9de:	bf14      	ite	ne
 800a9e0:	2301      	movne	r3, #1
 800a9e2:	2300      	moveq	r3, #0
 800a9e4:	b2db      	uxtb	r3, r3
 800a9e6:	e03c      	b.n	800aa62 <HAL_TIM_PWM_Start+0x9e>
 800a9e8:	683b      	ldr	r3, [r7, #0]
 800a9ea:	2b04      	cmp	r3, #4
 800a9ec:	d109      	bne.n	800aa02 <HAL_TIM_PWM_Start+0x3e>
 800a9ee:	687b      	ldr	r3, [r7, #4]
 800a9f0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800a9f4:	b2db      	uxtb	r3, r3
 800a9f6:	2b01      	cmp	r3, #1
 800a9f8:	bf14      	ite	ne
 800a9fa:	2301      	movne	r3, #1
 800a9fc:	2300      	moveq	r3, #0
 800a9fe:	b2db      	uxtb	r3, r3
 800aa00:	e02f      	b.n	800aa62 <HAL_TIM_PWM_Start+0x9e>
 800aa02:	683b      	ldr	r3, [r7, #0]
 800aa04:	2b08      	cmp	r3, #8
 800aa06:	d109      	bne.n	800aa1c <HAL_TIM_PWM_Start+0x58>
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800aa0e:	b2db      	uxtb	r3, r3
 800aa10:	2b01      	cmp	r3, #1
 800aa12:	bf14      	ite	ne
 800aa14:	2301      	movne	r3, #1
 800aa16:	2300      	moveq	r3, #0
 800aa18:	b2db      	uxtb	r3, r3
 800aa1a:	e022      	b.n	800aa62 <HAL_TIM_PWM_Start+0x9e>
 800aa1c:	683b      	ldr	r3, [r7, #0]
 800aa1e:	2b0c      	cmp	r3, #12
 800aa20:	d109      	bne.n	800aa36 <HAL_TIM_PWM_Start+0x72>
 800aa22:	687b      	ldr	r3, [r7, #4]
 800aa24:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800aa28:	b2db      	uxtb	r3, r3
 800aa2a:	2b01      	cmp	r3, #1
 800aa2c:	bf14      	ite	ne
 800aa2e:	2301      	movne	r3, #1
 800aa30:	2300      	moveq	r3, #0
 800aa32:	b2db      	uxtb	r3, r3
 800aa34:	e015      	b.n	800aa62 <HAL_TIM_PWM_Start+0x9e>
 800aa36:	683b      	ldr	r3, [r7, #0]
 800aa38:	2b10      	cmp	r3, #16
 800aa3a:	d109      	bne.n	800aa50 <HAL_TIM_PWM_Start+0x8c>
 800aa3c:	687b      	ldr	r3, [r7, #4]
 800aa3e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800aa42:	b2db      	uxtb	r3, r3
 800aa44:	2b01      	cmp	r3, #1
 800aa46:	bf14      	ite	ne
 800aa48:	2301      	movne	r3, #1
 800aa4a:	2300      	moveq	r3, #0
 800aa4c:	b2db      	uxtb	r3, r3
 800aa4e:	e008      	b.n	800aa62 <HAL_TIM_PWM_Start+0x9e>
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800aa56:	b2db      	uxtb	r3, r3
 800aa58:	2b01      	cmp	r3, #1
 800aa5a:	bf14      	ite	ne
 800aa5c:	2301      	movne	r3, #1
 800aa5e:	2300      	moveq	r3, #0
 800aa60:	b2db      	uxtb	r3, r3
 800aa62:	2b00      	cmp	r3, #0
 800aa64:	d001      	beq.n	800aa6a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800aa66:	2301      	movs	r3, #1
 800aa68:	e0a1      	b.n	800abae <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800aa6a:	683b      	ldr	r3, [r7, #0]
 800aa6c:	2b00      	cmp	r3, #0
 800aa6e:	d104      	bne.n	800aa7a <HAL_TIM_PWM_Start+0xb6>
 800aa70:	687b      	ldr	r3, [r7, #4]
 800aa72:	2202      	movs	r2, #2
 800aa74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800aa78:	e023      	b.n	800aac2 <HAL_TIM_PWM_Start+0xfe>
 800aa7a:	683b      	ldr	r3, [r7, #0]
 800aa7c:	2b04      	cmp	r3, #4
 800aa7e:	d104      	bne.n	800aa8a <HAL_TIM_PWM_Start+0xc6>
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	2202      	movs	r2, #2
 800aa84:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800aa88:	e01b      	b.n	800aac2 <HAL_TIM_PWM_Start+0xfe>
 800aa8a:	683b      	ldr	r3, [r7, #0]
 800aa8c:	2b08      	cmp	r3, #8
 800aa8e:	d104      	bne.n	800aa9a <HAL_TIM_PWM_Start+0xd6>
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	2202      	movs	r2, #2
 800aa94:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800aa98:	e013      	b.n	800aac2 <HAL_TIM_PWM_Start+0xfe>
 800aa9a:	683b      	ldr	r3, [r7, #0]
 800aa9c:	2b0c      	cmp	r3, #12
 800aa9e:	d104      	bne.n	800aaaa <HAL_TIM_PWM_Start+0xe6>
 800aaa0:	687b      	ldr	r3, [r7, #4]
 800aaa2:	2202      	movs	r2, #2
 800aaa4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800aaa8:	e00b      	b.n	800aac2 <HAL_TIM_PWM_Start+0xfe>
 800aaaa:	683b      	ldr	r3, [r7, #0]
 800aaac:	2b10      	cmp	r3, #16
 800aaae:	d104      	bne.n	800aaba <HAL_TIM_PWM_Start+0xf6>
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	2202      	movs	r2, #2
 800aab4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800aab8:	e003      	b.n	800aac2 <HAL_TIM_PWM_Start+0xfe>
 800aaba:	687b      	ldr	r3, [r7, #4]
 800aabc:	2202      	movs	r2, #2
 800aabe:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800aac2:	687b      	ldr	r3, [r7, #4]
 800aac4:	681b      	ldr	r3, [r3, #0]
 800aac6:	2201      	movs	r2, #1
 800aac8:	6839      	ldr	r1, [r7, #0]
 800aaca:	4618      	mov	r0, r3
 800aacc:	f001 fcac 	bl	800c428 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	681b      	ldr	r3, [r3, #0]
 800aad4:	4a38      	ldr	r2, [pc, #224]	; (800abb8 <HAL_TIM_PWM_Start+0x1f4>)
 800aad6:	4293      	cmp	r3, r2
 800aad8:	d013      	beq.n	800ab02 <HAL_TIM_PWM_Start+0x13e>
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	681b      	ldr	r3, [r3, #0]
 800aade:	4a37      	ldr	r2, [pc, #220]	; (800abbc <HAL_TIM_PWM_Start+0x1f8>)
 800aae0:	4293      	cmp	r3, r2
 800aae2:	d00e      	beq.n	800ab02 <HAL_TIM_PWM_Start+0x13e>
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	681b      	ldr	r3, [r3, #0]
 800aae8:	4a35      	ldr	r2, [pc, #212]	; (800abc0 <HAL_TIM_PWM_Start+0x1fc>)
 800aaea:	4293      	cmp	r3, r2
 800aaec:	d009      	beq.n	800ab02 <HAL_TIM_PWM_Start+0x13e>
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	681b      	ldr	r3, [r3, #0]
 800aaf2:	4a34      	ldr	r2, [pc, #208]	; (800abc4 <HAL_TIM_PWM_Start+0x200>)
 800aaf4:	4293      	cmp	r3, r2
 800aaf6:	d004      	beq.n	800ab02 <HAL_TIM_PWM_Start+0x13e>
 800aaf8:	687b      	ldr	r3, [r7, #4]
 800aafa:	681b      	ldr	r3, [r3, #0]
 800aafc:	4a32      	ldr	r2, [pc, #200]	; (800abc8 <HAL_TIM_PWM_Start+0x204>)
 800aafe:	4293      	cmp	r3, r2
 800ab00:	d101      	bne.n	800ab06 <HAL_TIM_PWM_Start+0x142>
 800ab02:	2301      	movs	r3, #1
 800ab04:	e000      	b.n	800ab08 <HAL_TIM_PWM_Start+0x144>
 800ab06:	2300      	movs	r3, #0
 800ab08:	2b00      	cmp	r3, #0
 800ab0a:	d007      	beq.n	800ab1c <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	681b      	ldr	r3, [r3, #0]
 800ab10:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ab12:	687b      	ldr	r3, [r7, #4]
 800ab14:	681b      	ldr	r3, [r3, #0]
 800ab16:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800ab1a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	681b      	ldr	r3, [r3, #0]
 800ab20:	4a25      	ldr	r2, [pc, #148]	; (800abb8 <HAL_TIM_PWM_Start+0x1f4>)
 800ab22:	4293      	cmp	r3, r2
 800ab24:	d022      	beq.n	800ab6c <HAL_TIM_PWM_Start+0x1a8>
 800ab26:	687b      	ldr	r3, [r7, #4]
 800ab28:	681b      	ldr	r3, [r3, #0]
 800ab2a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ab2e:	d01d      	beq.n	800ab6c <HAL_TIM_PWM_Start+0x1a8>
 800ab30:	687b      	ldr	r3, [r7, #4]
 800ab32:	681b      	ldr	r3, [r3, #0]
 800ab34:	4a25      	ldr	r2, [pc, #148]	; (800abcc <HAL_TIM_PWM_Start+0x208>)
 800ab36:	4293      	cmp	r3, r2
 800ab38:	d018      	beq.n	800ab6c <HAL_TIM_PWM_Start+0x1a8>
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	681b      	ldr	r3, [r3, #0]
 800ab3e:	4a24      	ldr	r2, [pc, #144]	; (800abd0 <HAL_TIM_PWM_Start+0x20c>)
 800ab40:	4293      	cmp	r3, r2
 800ab42:	d013      	beq.n	800ab6c <HAL_TIM_PWM_Start+0x1a8>
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	681b      	ldr	r3, [r3, #0]
 800ab48:	4a22      	ldr	r2, [pc, #136]	; (800abd4 <HAL_TIM_PWM_Start+0x210>)
 800ab4a:	4293      	cmp	r3, r2
 800ab4c:	d00e      	beq.n	800ab6c <HAL_TIM_PWM_Start+0x1a8>
 800ab4e:	687b      	ldr	r3, [r7, #4]
 800ab50:	681b      	ldr	r3, [r3, #0]
 800ab52:	4a1a      	ldr	r2, [pc, #104]	; (800abbc <HAL_TIM_PWM_Start+0x1f8>)
 800ab54:	4293      	cmp	r3, r2
 800ab56:	d009      	beq.n	800ab6c <HAL_TIM_PWM_Start+0x1a8>
 800ab58:	687b      	ldr	r3, [r7, #4]
 800ab5a:	681b      	ldr	r3, [r3, #0]
 800ab5c:	4a1e      	ldr	r2, [pc, #120]	; (800abd8 <HAL_TIM_PWM_Start+0x214>)
 800ab5e:	4293      	cmp	r3, r2
 800ab60:	d004      	beq.n	800ab6c <HAL_TIM_PWM_Start+0x1a8>
 800ab62:	687b      	ldr	r3, [r7, #4]
 800ab64:	681b      	ldr	r3, [r3, #0]
 800ab66:	4a16      	ldr	r2, [pc, #88]	; (800abc0 <HAL_TIM_PWM_Start+0x1fc>)
 800ab68:	4293      	cmp	r3, r2
 800ab6a:	d115      	bne.n	800ab98 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	681b      	ldr	r3, [r3, #0]
 800ab70:	689a      	ldr	r2, [r3, #8]
 800ab72:	4b1a      	ldr	r3, [pc, #104]	; (800abdc <HAL_TIM_PWM_Start+0x218>)
 800ab74:	4013      	ands	r3, r2
 800ab76:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ab78:	68fb      	ldr	r3, [r7, #12]
 800ab7a:	2b06      	cmp	r3, #6
 800ab7c:	d015      	beq.n	800abaa <HAL_TIM_PWM_Start+0x1e6>
 800ab7e:	68fb      	ldr	r3, [r7, #12]
 800ab80:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ab84:	d011      	beq.n	800abaa <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 800ab86:	687b      	ldr	r3, [r7, #4]
 800ab88:	681b      	ldr	r3, [r3, #0]
 800ab8a:	681a      	ldr	r2, [r3, #0]
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	681b      	ldr	r3, [r3, #0]
 800ab90:	f042 0201 	orr.w	r2, r2, #1
 800ab94:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ab96:	e008      	b.n	800abaa <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800ab98:	687b      	ldr	r3, [r7, #4]
 800ab9a:	681b      	ldr	r3, [r3, #0]
 800ab9c:	681a      	ldr	r2, [r3, #0]
 800ab9e:	687b      	ldr	r3, [r7, #4]
 800aba0:	681b      	ldr	r3, [r3, #0]
 800aba2:	f042 0201 	orr.w	r2, r2, #1
 800aba6:	601a      	str	r2, [r3, #0]
 800aba8:	e000      	b.n	800abac <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800abaa:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800abac:	2300      	movs	r3, #0
}
 800abae:	4618      	mov	r0, r3
 800abb0:	3710      	adds	r7, #16
 800abb2:	46bd      	mov	sp, r7
 800abb4:	bd80      	pop	{r7, pc}
 800abb6:	bf00      	nop
 800abb8:	40010000 	.word	0x40010000
 800abbc:	40010400 	.word	0x40010400
 800abc0:	40014000 	.word	0x40014000
 800abc4:	40014400 	.word	0x40014400
 800abc8:	40014800 	.word	0x40014800
 800abcc:	40000400 	.word	0x40000400
 800abd0:	40000800 	.word	0x40000800
 800abd4:	40000c00 	.word	0x40000c00
 800abd8:	40001800 	.word	0x40001800
 800abdc:	00010007 	.word	0x00010007

0800abe0 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800abe0:	b580      	push	{r7, lr}
 800abe2:	b082      	sub	sp, #8
 800abe4:	af00      	add	r7, sp, #0
 800abe6:	6078      	str	r0, [r7, #4]
 800abe8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	681b      	ldr	r3, [r3, #0]
 800abee:	2200      	movs	r2, #0
 800abf0:	6839      	ldr	r1, [r7, #0]
 800abf2:	4618      	mov	r0, r3
 800abf4:	f001 fc18 	bl	800c428 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800abf8:	687b      	ldr	r3, [r7, #4]
 800abfa:	681b      	ldr	r3, [r3, #0]
 800abfc:	4a3e      	ldr	r2, [pc, #248]	; (800acf8 <HAL_TIM_PWM_Stop+0x118>)
 800abfe:	4293      	cmp	r3, r2
 800ac00:	d013      	beq.n	800ac2a <HAL_TIM_PWM_Stop+0x4a>
 800ac02:	687b      	ldr	r3, [r7, #4]
 800ac04:	681b      	ldr	r3, [r3, #0]
 800ac06:	4a3d      	ldr	r2, [pc, #244]	; (800acfc <HAL_TIM_PWM_Stop+0x11c>)
 800ac08:	4293      	cmp	r3, r2
 800ac0a:	d00e      	beq.n	800ac2a <HAL_TIM_PWM_Stop+0x4a>
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	681b      	ldr	r3, [r3, #0]
 800ac10:	4a3b      	ldr	r2, [pc, #236]	; (800ad00 <HAL_TIM_PWM_Stop+0x120>)
 800ac12:	4293      	cmp	r3, r2
 800ac14:	d009      	beq.n	800ac2a <HAL_TIM_PWM_Stop+0x4a>
 800ac16:	687b      	ldr	r3, [r7, #4]
 800ac18:	681b      	ldr	r3, [r3, #0]
 800ac1a:	4a3a      	ldr	r2, [pc, #232]	; (800ad04 <HAL_TIM_PWM_Stop+0x124>)
 800ac1c:	4293      	cmp	r3, r2
 800ac1e:	d004      	beq.n	800ac2a <HAL_TIM_PWM_Stop+0x4a>
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	681b      	ldr	r3, [r3, #0]
 800ac24:	4a38      	ldr	r2, [pc, #224]	; (800ad08 <HAL_TIM_PWM_Stop+0x128>)
 800ac26:	4293      	cmp	r3, r2
 800ac28:	d101      	bne.n	800ac2e <HAL_TIM_PWM_Stop+0x4e>
 800ac2a:	2301      	movs	r3, #1
 800ac2c:	e000      	b.n	800ac30 <HAL_TIM_PWM_Stop+0x50>
 800ac2e:	2300      	movs	r3, #0
 800ac30:	2b00      	cmp	r3, #0
 800ac32:	d017      	beq.n	800ac64 <HAL_TIM_PWM_Stop+0x84>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	681b      	ldr	r3, [r3, #0]
 800ac38:	6a1a      	ldr	r2, [r3, #32]
 800ac3a:	f241 1311 	movw	r3, #4369	; 0x1111
 800ac3e:	4013      	ands	r3, r2
 800ac40:	2b00      	cmp	r3, #0
 800ac42:	d10f      	bne.n	800ac64 <HAL_TIM_PWM_Stop+0x84>
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	681b      	ldr	r3, [r3, #0]
 800ac48:	6a1a      	ldr	r2, [r3, #32]
 800ac4a:	f240 4344 	movw	r3, #1092	; 0x444
 800ac4e:	4013      	ands	r3, r2
 800ac50:	2b00      	cmp	r3, #0
 800ac52:	d107      	bne.n	800ac64 <HAL_TIM_PWM_Stop+0x84>
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	681b      	ldr	r3, [r3, #0]
 800ac58:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ac5a:	687b      	ldr	r3, [r7, #4]
 800ac5c:	681b      	ldr	r3, [r3, #0]
 800ac5e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800ac62:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	681b      	ldr	r3, [r3, #0]
 800ac68:	6a1a      	ldr	r2, [r3, #32]
 800ac6a:	f241 1311 	movw	r3, #4369	; 0x1111
 800ac6e:	4013      	ands	r3, r2
 800ac70:	2b00      	cmp	r3, #0
 800ac72:	d10f      	bne.n	800ac94 <HAL_TIM_PWM_Stop+0xb4>
 800ac74:	687b      	ldr	r3, [r7, #4]
 800ac76:	681b      	ldr	r3, [r3, #0]
 800ac78:	6a1a      	ldr	r2, [r3, #32]
 800ac7a:	f240 4344 	movw	r3, #1092	; 0x444
 800ac7e:	4013      	ands	r3, r2
 800ac80:	2b00      	cmp	r3, #0
 800ac82:	d107      	bne.n	800ac94 <HAL_TIM_PWM_Stop+0xb4>
 800ac84:	687b      	ldr	r3, [r7, #4]
 800ac86:	681b      	ldr	r3, [r3, #0]
 800ac88:	681a      	ldr	r2, [r3, #0]
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	681b      	ldr	r3, [r3, #0]
 800ac8e:	f022 0201 	bic.w	r2, r2, #1
 800ac92:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800ac94:	683b      	ldr	r3, [r7, #0]
 800ac96:	2b00      	cmp	r3, #0
 800ac98:	d104      	bne.n	800aca4 <HAL_TIM_PWM_Stop+0xc4>
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	2201      	movs	r2, #1
 800ac9e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800aca2:	e023      	b.n	800acec <HAL_TIM_PWM_Stop+0x10c>
 800aca4:	683b      	ldr	r3, [r7, #0]
 800aca6:	2b04      	cmp	r3, #4
 800aca8:	d104      	bne.n	800acb4 <HAL_TIM_PWM_Stop+0xd4>
 800acaa:	687b      	ldr	r3, [r7, #4]
 800acac:	2201      	movs	r2, #1
 800acae:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800acb2:	e01b      	b.n	800acec <HAL_TIM_PWM_Stop+0x10c>
 800acb4:	683b      	ldr	r3, [r7, #0]
 800acb6:	2b08      	cmp	r3, #8
 800acb8:	d104      	bne.n	800acc4 <HAL_TIM_PWM_Stop+0xe4>
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	2201      	movs	r2, #1
 800acbe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800acc2:	e013      	b.n	800acec <HAL_TIM_PWM_Stop+0x10c>
 800acc4:	683b      	ldr	r3, [r7, #0]
 800acc6:	2b0c      	cmp	r3, #12
 800acc8:	d104      	bne.n	800acd4 <HAL_TIM_PWM_Stop+0xf4>
 800acca:	687b      	ldr	r3, [r7, #4]
 800accc:	2201      	movs	r2, #1
 800acce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800acd2:	e00b      	b.n	800acec <HAL_TIM_PWM_Stop+0x10c>
 800acd4:	683b      	ldr	r3, [r7, #0]
 800acd6:	2b10      	cmp	r3, #16
 800acd8:	d104      	bne.n	800ace4 <HAL_TIM_PWM_Stop+0x104>
 800acda:	687b      	ldr	r3, [r7, #4]
 800acdc:	2201      	movs	r2, #1
 800acde:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800ace2:	e003      	b.n	800acec <HAL_TIM_PWM_Stop+0x10c>
 800ace4:	687b      	ldr	r3, [r7, #4]
 800ace6:	2201      	movs	r2, #1
 800ace8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Return function status */
  return HAL_OK;
 800acec:	2300      	movs	r3, #0
}
 800acee:	4618      	mov	r0, r3
 800acf0:	3708      	adds	r7, #8
 800acf2:	46bd      	mov	sp, r7
 800acf4:	bd80      	pop	{r7, pc}
 800acf6:	bf00      	nop
 800acf8:	40010000 	.word	0x40010000
 800acfc:	40010400 	.word	0x40010400
 800ad00:	40014000 	.word	0x40014000
 800ad04:	40014400 	.word	0x40014400
 800ad08:	40014800 	.word	0x40014800

0800ad0c <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 800ad0c:	b580      	push	{r7, lr}
 800ad0e:	b082      	sub	sp, #8
 800ad10:	af00      	add	r7, sp, #0
 800ad12:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	2b00      	cmp	r3, #0
 800ad18:	d101      	bne.n	800ad1e <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800ad1a:	2301      	movs	r3, #1
 800ad1c:	e049      	b.n	800adb2 <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800ad1e:	687b      	ldr	r3, [r7, #4]
 800ad20:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ad24:	b2db      	uxtb	r3, r3
 800ad26:	2b00      	cmp	r3, #0
 800ad28:	d106      	bne.n	800ad38 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800ad2a:	687b      	ldr	r3, [r7, #4]
 800ad2c:	2200      	movs	r2, #0
 800ad2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800ad32:	6878      	ldr	r0, [r7, #4]
 800ad34:	f000 f841 	bl	800adba <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ad38:	687b      	ldr	r3, [r7, #4]
 800ad3a:	2202      	movs	r2, #2
 800ad3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800ad40:	687b      	ldr	r3, [r7, #4]
 800ad42:	681a      	ldr	r2, [r3, #0]
 800ad44:	687b      	ldr	r3, [r7, #4]
 800ad46:	3304      	adds	r3, #4
 800ad48:	4619      	mov	r1, r3
 800ad4a:	4610      	mov	r0, r2
 800ad4c:	f000 fe34 	bl	800b9b8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800ad50:	687b      	ldr	r3, [r7, #4]
 800ad52:	2201      	movs	r2, #1
 800ad54:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	2201      	movs	r2, #1
 800ad5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	2201      	movs	r2, #1
 800ad64:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800ad68:	687b      	ldr	r3, [r7, #4]
 800ad6a:	2201      	movs	r2, #1
 800ad6c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800ad70:	687b      	ldr	r3, [r7, #4]
 800ad72:	2201      	movs	r2, #1
 800ad74:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800ad78:	687b      	ldr	r3, [r7, #4]
 800ad7a:	2201      	movs	r2, #1
 800ad7c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800ad80:	687b      	ldr	r3, [r7, #4]
 800ad82:	2201      	movs	r2, #1
 800ad84:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ad88:	687b      	ldr	r3, [r7, #4]
 800ad8a:	2201      	movs	r2, #1
 800ad8c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	2201      	movs	r2, #1
 800ad94:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ad98:	687b      	ldr	r3, [r7, #4]
 800ad9a:	2201      	movs	r2, #1
 800ad9c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800ada0:	687b      	ldr	r3, [r7, #4]
 800ada2:	2201      	movs	r2, #1
 800ada4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800ada8:	687b      	ldr	r3, [r7, #4]
 800adaa:	2201      	movs	r2, #1
 800adac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800adb0:	2300      	movs	r3, #0
}
 800adb2:	4618      	mov	r0, r3
 800adb4:	3708      	adds	r7, #8
 800adb6:	46bd      	mov	sp, r7
 800adb8:	bd80      	pop	{r7, pc}

0800adba <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 800adba:	b480      	push	{r7}
 800adbc:	b083      	sub	sp, #12
 800adbe:	af00      	add	r7, sp, #0
 800adc0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 800adc2:	bf00      	nop
 800adc4:	370c      	adds	r7, #12
 800adc6:	46bd      	mov	sp, r7
 800adc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adcc:	4770      	bx	lr
	...

0800add0 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800add0:	b580      	push	{r7, lr}
 800add2:	b084      	sub	sp, #16
 800add4:	af00      	add	r7, sp, #0
 800add6:	6078      	str	r0, [r7, #4]
 800add8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800adda:	2300      	movs	r3, #0
 800addc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800adde:	683b      	ldr	r3, [r7, #0]
 800ade0:	2b00      	cmp	r3, #0
 800ade2:	d104      	bne.n	800adee <HAL_TIM_IC_Start_IT+0x1e>
 800ade4:	687b      	ldr	r3, [r7, #4]
 800ade6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800adea:	b2db      	uxtb	r3, r3
 800adec:	e023      	b.n	800ae36 <HAL_TIM_IC_Start_IT+0x66>
 800adee:	683b      	ldr	r3, [r7, #0]
 800adf0:	2b04      	cmp	r3, #4
 800adf2:	d104      	bne.n	800adfe <HAL_TIM_IC_Start_IT+0x2e>
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800adfa:	b2db      	uxtb	r3, r3
 800adfc:	e01b      	b.n	800ae36 <HAL_TIM_IC_Start_IT+0x66>
 800adfe:	683b      	ldr	r3, [r7, #0]
 800ae00:	2b08      	cmp	r3, #8
 800ae02:	d104      	bne.n	800ae0e <HAL_TIM_IC_Start_IT+0x3e>
 800ae04:	687b      	ldr	r3, [r7, #4]
 800ae06:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800ae0a:	b2db      	uxtb	r3, r3
 800ae0c:	e013      	b.n	800ae36 <HAL_TIM_IC_Start_IT+0x66>
 800ae0e:	683b      	ldr	r3, [r7, #0]
 800ae10:	2b0c      	cmp	r3, #12
 800ae12:	d104      	bne.n	800ae1e <HAL_TIM_IC_Start_IT+0x4e>
 800ae14:	687b      	ldr	r3, [r7, #4]
 800ae16:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ae1a:	b2db      	uxtb	r3, r3
 800ae1c:	e00b      	b.n	800ae36 <HAL_TIM_IC_Start_IT+0x66>
 800ae1e:	683b      	ldr	r3, [r7, #0]
 800ae20:	2b10      	cmp	r3, #16
 800ae22:	d104      	bne.n	800ae2e <HAL_TIM_IC_Start_IT+0x5e>
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800ae2a:	b2db      	uxtb	r3, r3
 800ae2c:	e003      	b.n	800ae36 <HAL_TIM_IC_Start_IT+0x66>
 800ae2e:	687b      	ldr	r3, [r7, #4]
 800ae30:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800ae34:	b2db      	uxtb	r3, r3
 800ae36:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 800ae38:	683b      	ldr	r3, [r7, #0]
 800ae3a:	2b00      	cmp	r3, #0
 800ae3c:	d104      	bne.n	800ae48 <HAL_TIM_IC_Start_IT+0x78>
 800ae3e:	687b      	ldr	r3, [r7, #4]
 800ae40:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ae44:	b2db      	uxtb	r3, r3
 800ae46:	e013      	b.n	800ae70 <HAL_TIM_IC_Start_IT+0xa0>
 800ae48:	683b      	ldr	r3, [r7, #0]
 800ae4a:	2b04      	cmp	r3, #4
 800ae4c:	d104      	bne.n	800ae58 <HAL_TIM_IC_Start_IT+0x88>
 800ae4e:	687b      	ldr	r3, [r7, #4]
 800ae50:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ae54:	b2db      	uxtb	r3, r3
 800ae56:	e00b      	b.n	800ae70 <HAL_TIM_IC_Start_IT+0xa0>
 800ae58:	683b      	ldr	r3, [r7, #0]
 800ae5a:	2b08      	cmp	r3, #8
 800ae5c:	d104      	bne.n	800ae68 <HAL_TIM_IC_Start_IT+0x98>
 800ae5e:	687b      	ldr	r3, [r7, #4]
 800ae60:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800ae64:	b2db      	uxtb	r3, r3
 800ae66:	e003      	b.n	800ae70 <HAL_TIM_IC_Start_IT+0xa0>
 800ae68:	687b      	ldr	r3, [r7, #4]
 800ae6a:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 800ae6e:	b2db      	uxtb	r3, r3
 800ae70:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 800ae72:	7bbb      	ldrb	r3, [r7, #14]
 800ae74:	2b01      	cmp	r3, #1
 800ae76:	d102      	bne.n	800ae7e <HAL_TIM_IC_Start_IT+0xae>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 800ae78:	7b7b      	ldrb	r3, [r7, #13]
 800ae7a:	2b01      	cmp	r3, #1
 800ae7c:	d001      	beq.n	800ae82 <HAL_TIM_IC_Start_IT+0xb2>
  {
    return HAL_ERROR;
 800ae7e:	2301      	movs	r3, #1
 800ae80:	e0e2      	b.n	800b048 <HAL_TIM_IC_Start_IT+0x278>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800ae82:	683b      	ldr	r3, [r7, #0]
 800ae84:	2b00      	cmp	r3, #0
 800ae86:	d104      	bne.n	800ae92 <HAL_TIM_IC_Start_IT+0xc2>
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	2202      	movs	r2, #2
 800ae8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800ae90:	e023      	b.n	800aeda <HAL_TIM_IC_Start_IT+0x10a>
 800ae92:	683b      	ldr	r3, [r7, #0]
 800ae94:	2b04      	cmp	r3, #4
 800ae96:	d104      	bne.n	800aea2 <HAL_TIM_IC_Start_IT+0xd2>
 800ae98:	687b      	ldr	r3, [r7, #4]
 800ae9a:	2202      	movs	r2, #2
 800ae9c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800aea0:	e01b      	b.n	800aeda <HAL_TIM_IC_Start_IT+0x10a>
 800aea2:	683b      	ldr	r3, [r7, #0]
 800aea4:	2b08      	cmp	r3, #8
 800aea6:	d104      	bne.n	800aeb2 <HAL_TIM_IC_Start_IT+0xe2>
 800aea8:	687b      	ldr	r3, [r7, #4]
 800aeaa:	2202      	movs	r2, #2
 800aeac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800aeb0:	e013      	b.n	800aeda <HAL_TIM_IC_Start_IT+0x10a>
 800aeb2:	683b      	ldr	r3, [r7, #0]
 800aeb4:	2b0c      	cmp	r3, #12
 800aeb6:	d104      	bne.n	800aec2 <HAL_TIM_IC_Start_IT+0xf2>
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	2202      	movs	r2, #2
 800aebc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800aec0:	e00b      	b.n	800aeda <HAL_TIM_IC_Start_IT+0x10a>
 800aec2:	683b      	ldr	r3, [r7, #0]
 800aec4:	2b10      	cmp	r3, #16
 800aec6:	d104      	bne.n	800aed2 <HAL_TIM_IC_Start_IT+0x102>
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	2202      	movs	r2, #2
 800aecc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800aed0:	e003      	b.n	800aeda <HAL_TIM_IC_Start_IT+0x10a>
 800aed2:	687b      	ldr	r3, [r7, #4]
 800aed4:	2202      	movs	r2, #2
 800aed6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800aeda:	683b      	ldr	r3, [r7, #0]
 800aedc:	2b00      	cmp	r3, #0
 800aede:	d104      	bne.n	800aeea <HAL_TIM_IC_Start_IT+0x11a>
 800aee0:	687b      	ldr	r3, [r7, #4]
 800aee2:	2202      	movs	r2, #2
 800aee4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800aee8:	e013      	b.n	800af12 <HAL_TIM_IC_Start_IT+0x142>
 800aeea:	683b      	ldr	r3, [r7, #0]
 800aeec:	2b04      	cmp	r3, #4
 800aeee:	d104      	bne.n	800aefa <HAL_TIM_IC_Start_IT+0x12a>
 800aef0:	687b      	ldr	r3, [r7, #4]
 800aef2:	2202      	movs	r2, #2
 800aef4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800aef8:	e00b      	b.n	800af12 <HAL_TIM_IC_Start_IT+0x142>
 800aefa:	683b      	ldr	r3, [r7, #0]
 800aefc:	2b08      	cmp	r3, #8
 800aefe:	d104      	bne.n	800af0a <HAL_TIM_IC_Start_IT+0x13a>
 800af00:	687b      	ldr	r3, [r7, #4]
 800af02:	2202      	movs	r2, #2
 800af04:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800af08:	e003      	b.n	800af12 <HAL_TIM_IC_Start_IT+0x142>
 800af0a:	687b      	ldr	r3, [r7, #4]
 800af0c:	2202      	movs	r2, #2
 800af0e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  switch (Channel)
 800af12:	683b      	ldr	r3, [r7, #0]
 800af14:	2b0c      	cmp	r3, #12
 800af16:	d841      	bhi.n	800af9c <HAL_TIM_IC_Start_IT+0x1cc>
 800af18:	a201      	add	r2, pc, #4	; (adr r2, 800af20 <HAL_TIM_IC_Start_IT+0x150>)
 800af1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800af1e:	bf00      	nop
 800af20:	0800af55 	.word	0x0800af55
 800af24:	0800af9d 	.word	0x0800af9d
 800af28:	0800af9d 	.word	0x0800af9d
 800af2c:	0800af9d 	.word	0x0800af9d
 800af30:	0800af67 	.word	0x0800af67
 800af34:	0800af9d 	.word	0x0800af9d
 800af38:	0800af9d 	.word	0x0800af9d
 800af3c:	0800af9d 	.word	0x0800af9d
 800af40:	0800af79 	.word	0x0800af79
 800af44:	0800af9d 	.word	0x0800af9d
 800af48:	0800af9d 	.word	0x0800af9d
 800af4c:	0800af9d 	.word	0x0800af9d
 800af50:	0800af8b 	.word	0x0800af8b
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800af54:	687b      	ldr	r3, [r7, #4]
 800af56:	681b      	ldr	r3, [r3, #0]
 800af58:	68da      	ldr	r2, [r3, #12]
 800af5a:	687b      	ldr	r3, [r7, #4]
 800af5c:	681b      	ldr	r3, [r3, #0]
 800af5e:	f042 0202 	orr.w	r2, r2, #2
 800af62:	60da      	str	r2, [r3, #12]
      break;
 800af64:	e01d      	b.n	800afa2 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800af66:	687b      	ldr	r3, [r7, #4]
 800af68:	681b      	ldr	r3, [r3, #0]
 800af6a:	68da      	ldr	r2, [r3, #12]
 800af6c:	687b      	ldr	r3, [r7, #4]
 800af6e:	681b      	ldr	r3, [r3, #0]
 800af70:	f042 0204 	orr.w	r2, r2, #4
 800af74:	60da      	str	r2, [r3, #12]
      break;
 800af76:	e014      	b.n	800afa2 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800af78:	687b      	ldr	r3, [r7, #4]
 800af7a:	681b      	ldr	r3, [r3, #0]
 800af7c:	68da      	ldr	r2, [r3, #12]
 800af7e:	687b      	ldr	r3, [r7, #4]
 800af80:	681b      	ldr	r3, [r3, #0]
 800af82:	f042 0208 	orr.w	r2, r2, #8
 800af86:	60da      	str	r2, [r3, #12]
      break;
 800af88:	e00b      	b.n	800afa2 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800af8a:	687b      	ldr	r3, [r7, #4]
 800af8c:	681b      	ldr	r3, [r3, #0]
 800af8e:	68da      	ldr	r2, [r3, #12]
 800af90:	687b      	ldr	r3, [r7, #4]
 800af92:	681b      	ldr	r3, [r3, #0]
 800af94:	f042 0210 	orr.w	r2, r2, #16
 800af98:	60da      	str	r2, [r3, #12]
      break;
 800af9a:	e002      	b.n	800afa2 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    default:
      status = HAL_ERROR;
 800af9c:	2301      	movs	r3, #1
 800af9e:	73fb      	strb	r3, [r7, #15]
      break;
 800afa0:	bf00      	nop
  }

  if (status == HAL_OK)
 800afa2:	7bfb      	ldrb	r3, [r7, #15]
 800afa4:	2b00      	cmp	r3, #0
 800afa6:	d14e      	bne.n	800b046 <HAL_TIM_IC_Start_IT+0x276>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800afa8:	687b      	ldr	r3, [r7, #4]
 800afaa:	681b      	ldr	r3, [r3, #0]
 800afac:	2201      	movs	r2, #1
 800afae:	6839      	ldr	r1, [r7, #0]
 800afb0:	4618      	mov	r0, r3
 800afb2:	f001 fa39 	bl	800c428 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800afb6:	687b      	ldr	r3, [r7, #4]
 800afb8:	681b      	ldr	r3, [r3, #0]
 800afba:	4a25      	ldr	r2, [pc, #148]	; (800b050 <HAL_TIM_IC_Start_IT+0x280>)
 800afbc:	4293      	cmp	r3, r2
 800afbe:	d022      	beq.n	800b006 <HAL_TIM_IC_Start_IT+0x236>
 800afc0:	687b      	ldr	r3, [r7, #4]
 800afc2:	681b      	ldr	r3, [r3, #0]
 800afc4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800afc8:	d01d      	beq.n	800b006 <HAL_TIM_IC_Start_IT+0x236>
 800afca:	687b      	ldr	r3, [r7, #4]
 800afcc:	681b      	ldr	r3, [r3, #0]
 800afce:	4a21      	ldr	r2, [pc, #132]	; (800b054 <HAL_TIM_IC_Start_IT+0x284>)
 800afd0:	4293      	cmp	r3, r2
 800afd2:	d018      	beq.n	800b006 <HAL_TIM_IC_Start_IT+0x236>
 800afd4:	687b      	ldr	r3, [r7, #4]
 800afd6:	681b      	ldr	r3, [r3, #0]
 800afd8:	4a1f      	ldr	r2, [pc, #124]	; (800b058 <HAL_TIM_IC_Start_IT+0x288>)
 800afda:	4293      	cmp	r3, r2
 800afdc:	d013      	beq.n	800b006 <HAL_TIM_IC_Start_IT+0x236>
 800afde:	687b      	ldr	r3, [r7, #4]
 800afe0:	681b      	ldr	r3, [r3, #0]
 800afe2:	4a1e      	ldr	r2, [pc, #120]	; (800b05c <HAL_TIM_IC_Start_IT+0x28c>)
 800afe4:	4293      	cmp	r3, r2
 800afe6:	d00e      	beq.n	800b006 <HAL_TIM_IC_Start_IT+0x236>
 800afe8:	687b      	ldr	r3, [r7, #4]
 800afea:	681b      	ldr	r3, [r3, #0]
 800afec:	4a1c      	ldr	r2, [pc, #112]	; (800b060 <HAL_TIM_IC_Start_IT+0x290>)
 800afee:	4293      	cmp	r3, r2
 800aff0:	d009      	beq.n	800b006 <HAL_TIM_IC_Start_IT+0x236>
 800aff2:	687b      	ldr	r3, [r7, #4]
 800aff4:	681b      	ldr	r3, [r3, #0]
 800aff6:	4a1b      	ldr	r2, [pc, #108]	; (800b064 <HAL_TIM_IC_Start_IT+0x294>)
 800aff8:	4293      	cmp	r3, r2
 800affa:	d004      	beq.n	800b006 <HAL_TIM_IC_Start_IT+0x236>
 800affc:	687b      	ldr	r3, [r7, #4]
 800affe:	681b      	ldr	r3, [r3, #0]
 800b000:	4a19      	ldr	r2, [pc, #100]	; (800b068 <HAL_TIM_IC_Start_IT+0x298>)
 800b002:	4293      	cmp	r3, r2
 800b004:	d115      	bne.n	800b032 <HAL_TIM_IC_Start_IT+0x262>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b006:	687b      	ldr	r3, [r7, #4]
 800b008:	681b      	ldr	r3, [r3, #0]
 800b00a:	689a      	ldr	r2, [r3, #8]
 800b00c:	4b17      	ldr	r3, [pc, #92]	; (800b06c <HAL_TIM_IC_Start_IT+0x29c>)
 800b00e:	4013      	ands	r3, r2
 800b010:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b012:	68bb      	ldr	r3, [r7, #8]
 800b014:	2b06      	cmp	r3, #6
 800b016:	d015      	beq.n	800b044 <HAL_TIM_IC_Start_IT+0x274>
 800b018:	68bb      	ldr	r3, [r7, #8]
 800b01a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b01e:	d011      	beq.n	800b044 <HAL_TIM_IC_Start_IT+0x274>
      {
        __HAL_TIM_ENABLE(htim);
 800b020:	687b      	ldr	r3, [r7, #4]
 800b022:	681b      	ldr	r3, [r3, #0]
 800b024:	681a      	ldr	r2, [r3, #0]
 800b026:	687b      	ldr	r3, [r7, #4]
 800b028:	681b      	ldr	r3, [r3, #0]
 800b02a:	f042 0201 	orr.w	r2, r2, #1
 800b02e:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b030:	e008      	b.n	800b044 <HAL_TIM_IC_Start_IT+0x274>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800b032:	687b      	ldr	r3, [r7, #4]
 800b034:	681b      	ldr	r3, [r3, #0]
 800b036:	681a      	ldr	r2, [r3, #0]
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	681b      	ldr	r3, [r3, #0]
 800b03c:	f042 0201 	orr.w	r2, r2, #1
 800b040:	601a      	str	r2, [r3, #0]
 800b042:	e000      	b.n	800b046 <HAL_TIM_IC_Start_IT+0x276>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b044:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 800b046:	7bfb      	ldrb	r3, [r7, #15]
}
 800b048:	4618      	mov	r0, r3
 800b04a:	3710      	adds	r7, #16
 800b04c:	46bd      	mov	sp, r7
 800b04e:	bd80      	pop	{r7, pc}
 800b050:	40010000 	.word	0x40010000
 800b054:	40000400 	.word	0x40000400
 800b058:	40000800 	.word	0x40000800
 800b05c:	40000c00 	.word	0x40000c00
 800b060:	40010400 	.word	0x40010400
 800b064:	40001800 	.word	0x40001800
 800b068:	40014000 	.word	0x40014000
 800b06c:	00010007 	.word	0x00010007

0800b070 <HAL_TIM_IC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800b070:	b580      	push	{r7, lr}
 800b072:	b084      	sub	sp, #16
 800b074:	af00      	add	r7, sp, #0
 800b076:	6078      	str	r0, [r7, #4]
 800b078:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800b07a:	2300      	movs	r3, #0
 800b07c:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 800b07e:	683b      	ldr	r3, [r7, #0]
 800b080:	2b0c      	cmp	r3, #12
 800b082:	d841      	bhi.n	800b108 <HAL_TIM_IC_Stop_IT+0x98>
 800b084:	a201      	add	r2, pc, #4	; (adr r2, 800b08c <HAL_TIM_IC_Stop_IT+0x1c>)
 800b086:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b08a:	bf00      	nop
 800b08c:	0800b0c1 	.word	0x0800b0c1
 800b090:	0800b109 	.word	0x0800b109
 800b094:	0800b109 	.word	0x0800b109
 800b098:	0800b109 	.word	0x0800b109
 800b09c:	0800b0d3 	.word	0x0800b0d3
 800b0a0:	0800b109 	.word	0x0800b109
 800b0a4:	0800b109 	.word	0x0800b109
 800b0a8:	0800b109 	.word	0x0800b109
 800b0ac:	0800b0e5 	.word	0x0800b0e5
 800b0b0:	0800b109 	.word	0x0800b109
 800b0b4:	0800b109 	.word	0x0800b109
 800b0b8:	0800b109 	.word	0x0800b109
 800b0bc:	0800b0f7 	.word	0x0800b0f7
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 800b0c0:	687b      	ldr	r3, [r7, #4]
 800b0c2:	681b      	ldr	r3, [r3, #0]
 800b0c4:	68da      	ldr	r2, [r3, #12]
 800b0c6:	687b      	ldr	r3, [r7, #4]
 800b0c8:	681b      	ldr	r3, [r3, #0]
 800b0ca:	f022 0202 	bic.w	r2, r2, #2
 800b0ce:	60da      	str	r2, [r3, #12]
      break;
 800b0d0:	e01d      	b.n	800b10e <HAL_TIM_IC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 800b0d2:	687b      	ldr	r3, [r7, #4]
 800b0d4:	681b      	ldr	r3, [r3, #0]
 800b0d6:	68da      	ldr	r2, [r3, #12]
 800b0d8:	687b      	ldr	r3, [r7, #4]
 800b0da:	681b      	ldr	r3, [r3, #0]
 800b0dc:	f022 0204 	bic.w	r2, r2, #4
 800b0e0:	60da      	str	r2, [r3, #12]
      break;
 800b0e2:	e014      	b.n	800b10e <HAL_TIM_IC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 800b0e4:	687b      	ldr	r3, [r7, #4]
 800b0e6:	681b      	ldr	r3, [r3, #0]
 800b0e8:	68da      	ldr	r2, [r3, #12]
 800b0ea:	687b      	ldr	r3, [r7, #4]
 800b0ec:	681b      	ldr	r3, [r3, #0]
 800b0ee:	f022 0208 	bic.w	r2, r2, #8
 800b0f2:	60da      	str	r2, [r3, #12]
      break;
 800b0f4:	e00b      	b.n	800b10e <HAL_TIM_IC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 800b0f6:	687b      	ldr	r3, [r7, #4]
 800b0f8:	681b      	ldr	r3, [r3, #0]
 800b0fa:	68da      	ldr	r2, [r3, #12]
 800b0fc:	687b      	ldr	r3, [r7, #4]
 800b0fe:	681b      	ldr	r3, [r3, #0]
 800b100:	f022 0210 	bic.w	r2, r2, #16
 800b104:	60da      	str	r2, [r3, #12]
      break;
 800b106:	e002      	b.n	800b10e <HAL_TIM_IC_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 800b108:	2301      	movs	r3, #1
 800b10a:	73fb      	strb	r3, [r7, #15]
      break;
 800b10c:	bf00      	nop
  }

  if (status == HAL_OK)
 800b10e:	7bfb      	ldrb	r3, [r7, #15]
 800b110:	2b00      	cmp	r3, #0
 800b112:	d166      	bne.n	800b1e2 <HAL_TIM_IC_Stop_IT+0x172>
  {
    /* Disable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	681b      	ldr	r3, [r3, #0]
 800b118:	2200      	movs	r2, #0
 800b11a:	6839      	ldr	r1, [r7, #0]
 800b11c:	4618      	mov	r0, r3
 800b11e:	f001 f983 	bl	800c428 <TIM_CCxChannelCmd>

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 800b122:	687b      	ldr	r3, [r7, #4]
 800b124:	681b      	ldr	r3, [r3, #0]
 800b126:	6a1a      	ldr	r2, [r3, #32]
 800b128:	f241 1311 	movw	r3, #4369	; 0x1111
 800b12c:	4013      	ands	r3, r2
 800b12e:	2b00      	cmp	r3, #0
 800b130:	d10f      	bne.n	800b152 <HAL_TIM_IC_Stop_IT+0xe2>
 800b132:	687b      	ldr	r3, [r7, #4]
 800b134:	681b      	ldr	r3, [r3, #0]
 800b136:	6a1a      	ldr	r2, [r3, #32]
 800b138:	f240 4344 	movw	r3, #1092	; 0x444
 800b13c:	4013      	ands	r3, r2
 800b13e:	2b00      	cmp	r3, #0
 800b140:	d107      	bne.n	800b152 <HAL_TIM_IC_Stop_IT+0xe2>
 800b142:	687b      	ldr	r3, [r7, #4]
 800b144:	681b      	ldr	r3, [r3, #0]
 800b146:	681a      	ldr	r2, [r3, #0]
 800b148:	687b      	ldr	r3, [r7, #4]
 800b14a:	681b      	ldr	r3, [r3, #0]
 800b14c:	f022 0201 	bic.w	r2, r2, #1
 800b150:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800b152:	683b      	ldr	r3, [r7, #0]
 800b154:	2b00      	cmp	r3, #0
 800b156:	d104      	bne.n	800b162 <HAL_TIM_IC_Stop_IT+0xf2>
 800b158:	687b      	ldr	r3, [r7, #4]
 800b15a:	2201      	movs	r2, #1
 800b15c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b160:	e023      	b.n	800b1aa <HAL_TIM_IC_Stop_IT+0x13a>
 800b162:	683b      	ldr	r3, [r7, #0]
 800b164:	2b04      	cmp	r3, #4
 800b166:	d104      	bne.n	800b172 <HAL_TIM_IC_Stop_IT+0x102>
 800b168:	687b      	ldr	r3, [r7, #4]
 800b16a:	2201      	movs	r2, #1
 800b16c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800b170:	e01b      	b.n	800b1aa <HAL_TIM_IC_Stop_IT+0x13a>
 800b172:	683b      	ldr	r3, [r7, #0]
 800b174:	2b08      	cmp	r3, #8
 800b176:	d104      	bne.n	800b182 <HAL_TIM_IC_Stop_IT+0x112>
 800b178:	687b      	ldr	r3, [r7, #4]
 800b17a:	2201      	movs	r2, #1
 800b17c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b180:	e013      	b.n	800b1aa <HAL_TIM_IC_Stop_IT+0x13a>
 800b182:	683b      	ldr	r3, [r7, #0]
 800b184:	2b0c      	cmp	r3, #12
 800b186:	d104      	bne.n	800b192 <HAL_TIM_IC_Stop_IT+0x122>
 800b188:	687b      	ldr	r3, [r7, #4]
 800b18a:	2201      	movs	r2, #1
 800b18c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800b190:	e00b      	b.n	800b1aa <HAL_TIM_IC_Stop_IT+0x13a>
 800b192:	683b      	ldr	r3, [r7, #0]
 800b194:	2b10      	cmp	r3, #16
 800b196:	d104      	bne.n	800b1a2 <HAL_TIM_IC_Stop_IT+0x132>
 800b198:	687b      	ldr	r3, [r7, #4]
 800b19a:	2201      	movs	r2, #1
 800b19c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800b1a0:	e003      	b.n	800b1aa <HAL_TIM_IC_Stop_IT+0x13a>
 800b1a2:	687b      	ldr	r3, [r7, #4]
 800b1a4:	2201      	movs	r2, #1
 800b1a6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800b1aa:	683b      	ldr	r3, [r7, #0]
 800b1ac:	2b00      	cmp	r3, #0
 800b1ae:	d104      	bne.n	800b1ba <HAL_TIM_IC_Stop_IT+0x14a>
 800b1b0:	687b      	ldr	r3, [r7, #4]
 800b1b2:	2201      	movs	r2, #1
 800b1b4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b1b8:	e013      	b.n	800b1e2 <HAL_TIM_IC_Stop_IT+0x172>
 800b1ba:	683b      	ldr	r3, [r7, #0]
 800b1bc:	2b04      	cmp	r3, #4
 800b1be:	d104      	bne.n	800b1ca <HAL_TIM_IC_Stop_IT+0x15a>
 800b1c0:	687b      	ldr	r3, [r7, #4]
 800b1c2:	2201      	movs	r2, #1
 800b1c4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b1c8:	e00b      	b.n	800b1e2 <HAL_TIM_IC_Stop_IT+0x172>
 800b1ca:	683b      	ldr	r3, [r7, #0]
 800b1cc:	2b08      	cmp	r3, #8
 800b1ce:	d104      	bne.n	800b1da <HAL_TIM_IC_Stop_IT+0x16a>
 800b1d0:	687b      	ldr	r3, [r7, #4]
 800b1d2:	2201      	movs	r2, #1
 800b1d4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800b1d8:	e003      	b.n	800b1e2 <HAL_TIM_IC_Stop_IT+0x172>
 800b1da:	687b      	ldr	r3, [r7, #4]
 800b1dc:	2201      	movs	r2, #1
 800b1de:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
  }

  /* Return function status */
  return status;
 800b1e2:	7bfb      	ldrb	r3, [r7, #15]
}
 800b1e4:	4618      	mov	r0, r3
 800b1e6:	3710      	adds	r7, #16
 800b1e8:	46bd      	mov	sp, r7
 800b1ea:	bd80      	pop	{r7, pc}

0800b1ec <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800b1ec:	b580      	push	{r7, lr}
 800b1ee:	b082      	sub	sp, #8
 800b1f0:	af00      	add	r7, sp, #0
 800b1f2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800b1f4:	687b      	ldr	r3, [r7, #4]
 800b1f6:	681b      	ldr	r3, [r3, #0]
 800b1f8:	691b      	ldr	r3, [r3, #16]
 800b1fa:	f003 0302 	and.w	r3, r3, #2
 800b1fe:	2b02      	cmp	r3, #2
 800b200:	d122      	bne.n	800b248 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800b202:	687b      	ldr	r3, [r7, #4]
 800b204:	681b      	ldr	r3, [r3, #0]
 800b206:	68db      	ldr	r3, [r3, #12]
 800b208:	f003 0302 	and.w	r3, r3, #2
 800b20c:	2b02      	cmp	r3, #2
 800b20e:	d11b      	bne.n	800b248 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800b210:	687b      	ldr	r3, [r7, #4]
 800b212:	681b      	ldr	r3, [r3, #0]
 800b214:	f06f 0202 	mvn.w	r2, #2
 800b218:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800b21a:	687b      	ldr	r3, [r7, #4]
 800b21c:	2201      	movs	r2, #1
 800b21e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800b220:	687b      	ldr	r3, [r7, #4]
 800b222:	681b      	ldr	r3, [r3, #0]
 800b224:	699b      	ldr	r3, [r3, #24]
 800b226:	f003 0303 	and.w	r3, r3, #3
 800b22a:	2b00      	cmp	r3, #0
 800b22c:	d003      	beq.n	800b236 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800b22e:	6878      	ldr	r0, [r7, #4]
 800b230:	f7f7 fee8 	bl	8003004 <HAL_TIM_IC_CaptureCallback>
 800b234:	e005      	b.n	800b242 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800b236:	6878      	ldr	r0, [r7, #4]
 800b238:	f000 fba0 	bl	800b97c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b23c:	6878      	ldr	r0, [r7, #4]
 800b23e:	f000 fba7 	bl	800b990 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b242:	687b      	ldr	r3, [r7, #4]
 800b244:	2200      	movs	r2, #0
 800b246:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800b248:	687b      	ldr	r3, [r7, #4]
 800b24a:	681b      	ldr	r3, [r3, #0]
 800b24c:	691b      	ldr	r3, [r3, #16]
 800b24e:	f003 0304 	and.w	r3, r3, #4
 800b252:	2b04      	cmp	r3, #4
 800b254:	d122      	bne.n	800b29c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800b256:	687b      	ldr	r3, [r7, #4]
 800b258:	681b      	ldr	r3, [r3, #0]
 800b25a:	68db      	ldr	r3, [r3, #12]
 800b25c:	f003 0304 	and.w	r3, r3, #4
 800b260:	2b04      	cmp	r3, #4
 800b262:	d11b      	bne.n	800b29c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800b264:	687b      	ldr	r3, [r7, #4]
 800b266:	681b      	ldr	r3, [r3, #0]
 800b268:	f06f 0204 	mvn.w	r2, #4
 800b26c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800b26e:	687b      	ldr	r3, [r7, #4]
 800b270:	2202      	movs	r2, #2
 800b272:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800b274:	687b      	ldr	r3, [r7, #4]
 800b276:	681b      	ldr	r3, [r3, #0]
 800b278:	699b      	ldr	r3, [r3, #24]
 800b27a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b27e:	2b00      	cmp	r3, #0
 800b280:	d003      	beq.n	800b28a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b282:	6878      	ldr	r0, [r7, #4]
 800b284:	f7f7 febe 	bl	8003004 <HAL_TIM_IC_CaptureCallback>
 800b288:	e005      	b.n	800b296 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b28a:	6878      	ldr	r0, [r7, #4]
 800b28c:	f000 fb76 	bl	800b97c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b290:	6878      	ldr	r0, [r7, #4]
 800b292:	f000 fb7d 	bl	800b990 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b296:	687b      	ldr	r3, [r7, #4]
 800b298:	2200      	movs	r2, #0
 800b29a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800b29c:	687b      	ldr	r3, [r7, #4]
 800b29e:	681b      	ldr	r3, [r3, #0]
 800b2a0:	691b      	ldr	r3, [r3, #16]
 800b2a2:	f003 0308 	and.w	r3, r3, #8
 800b2a6:	2b08      	cmp	r3, #8
 800b2a8:	d122      	bne.n	800b2f0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800b2aa:	687b      	ldr	r3, [r7, #4]
 800b2ac:	681b      	ldr	r3, [r3, #0]
 800b2ae:	68db      	ldr	r3, [r3, #12]
 800b2b0:	f003 0308 	and.w	r3, r3, #8
 800b2b4:	2b08      	cmp	r3, #8
 800b2b6:	d11b      	bne.n	800b2f0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800b2b8:	687b      	ldr	r3, [r7, #4]
 800b2ba:	681b      	ldr	r3, [r3, #0]
 800b2bc:	f06f 0208 	mvn.w	r2, #8
 800b2c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800b2c2:	687b      	ldr	r3, [r7, #4]
 800b2c4:	2204      	movs	r2, #4
 800b2c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800b2c8:	687b      	ldr	r3, [r7, #4]
 800b2ca:	681b      	ldr	r3, [r3, #0]
 800b2cc:	69db      	ldr	r3, [r3, #28]
 800b2ce:	f003 0303 	and.w	r3, r3, #3
 800b2d2:	2b00      	cmp	r3, #0
 800b2d4:	d003      	beq.n	800b2de <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b2d6:	6878      	ldr	r0, [r7, #4]
 800b2d8:	f7f7 fe94 	bl	8003004 <HAL_TIM_IC_CaptureCallback>
 800b2dc:	e005      	b.n	800b2ea <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b2de:	6878      	ldr	r0, [r7, #4]
 800b2e0:	f000 fb4c 	bl	800b97c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b2e4:	6878      	ldr	r0, [r7, #4]
 800b2e6:	f000 fb53 	bl	800b990 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b2ea:	687b      	ldr	r3, [r7, #4]
 800b2ec:	2200      	movs	r2, #0
 800b2ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800b2f0:	687b      	ldr	r3, [r7, #4]
 800b2f2:	681b      	ldr	r3, [r3, #0]
 800b2f4:	691b      	ldr	r3, [r3, #16]
 800b2f6:	f003 0310 	and.w	r3, r3, #16
 800b2fa:	2b10      	cmp	r3, #16
 800b2fc:	d122      	bne.n	800b344 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800b2fe:	687b      	ldr	r3, [r7, #4]
 800b300:	681b      	ldr	r3, [r3, #0]
 800b302:	68db      	ldr	r3, [r3, #12]
 800b304:	f003 0310 	and.w	r3, r3, #16
 800b308:	2b10      	cmp	r3, #16
 800b30a:	d11b      	bne.n	800b344 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800b30c:	687b      	ldr	r3, [r7, #4]
 800b30e:	681b      	ldr	r3, [r3, #0]
 800b310:	f06f 0210 	mvn.w	r2, #16
 800b314:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800b316:	687b      	ldr	r3, [r7, #4]
 800b318:	2208      	movs	r2, #8
 800b31a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800b31c:	687b      	ldr	r3, [r7, #4]
 800b31e:	681b      	ldr	r3, [r3, #0]
 800b320:	69db      	ldr	r3, [r3, #28]
 800b322:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b326:	2b00      	cmp	r3, #0
 800b328:	d003      	beq.n	800b332 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b32a:	6878      	ldr	r0, [r7, #4]
 800b32c:	f7f7 fe6a 	bl	8003004 <HAL_TIM_IC_CaptureCallback>
 800b330:	e005      	b.n	800b33e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b332:	6878      	ldr	r0, [r7, #4]
 800b334:	f000 fb22 	bl	800b97c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b338:	6878      	ldr	r0, [r7, #4]
 800b33a:	f000 fb29 	bl	800b990 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b33e:	687b      	ldr	r3, [r7, #4]
 800b340:	2200      	movs	r2, #0
 800b342:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800b344:	687b      	ldr	r3, [r7, #4]
 800b346:	681b      	ldr	r3, [r3, #0]
 800b348:	691b      	ldr	r3, [r3, #16]
 800b34a:	f003 0301 	and.w	r3, r3, #1
 800b34e:	2b01      	cmp	r3, #1
 800b350:	d10e      	bne.n	800b370 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800b352:	687b      	ldr	r3, [r7, #4]
 800b354:	681b      	ldr	r3, [r3, #0]
 800b356:	68db      	ldr	r3, [r3, #12]
 800b358:	f003 0301 	and.w	r3, r3, #1
 800b35c:	2b01      	cmp	r3, #1
 800b35e:	d107      	bne.n	800b370 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800b360:	687b      	ldr	r3, [r7, #4]
 800b362:	681b      	ldr	r3, [r3, #0]
 800b364:	f06f 0201 	mvn.w	r2, #1
 800b368:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800b36a:	6878      	ldr	r0, [r7, #4]
 800b36c:	f7f7 fec4 	bl	80030f8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800b370:	687b      	ldr	r3, [r7, #4]
 800b372:	681b      	ldr	r3, [r3, #0]
 800b374:	691b      	ldr	r3, [r3, #16]
 800b376:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b37a:	2b80      	cmp	r3, #128	; 0x80
 800b37c:	d10e      	bne.n	800b39c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800b37e:	687b      	ldr	r3, [r7, #4]
 800b380:	681b      	ldr	r3, [r3, #0]
 800b382:	68db      	ldr	r3, [r3, #12]
 800b384:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b388:	2b80      	cmp	r3, #128	; 0x80
 800b38a:	d107      	bne.n	800b39c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800b38c:	687b      	ldr	r3, [r7, #4]
 800b38e:	681b      	ldr	r3, [r3, #0]
 800b390:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800b394:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800b396:	6878      	ldr	r0, [r7, #4]
 800b398:	f001 f904 	bl	800c5a4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800b39c:	687b      	ldr	r3, [r7, #4]
 800b39e:	681b      	ldr	r3, [r3, #0]
 800b3a0:	691b      	ldr	r3, [r3, #16]
 800b3a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b3a6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b3aa:	d10e      	bne.n	800b3ca <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800b3ac:	687b      	ldr	r3, [r7, #4]
 800b3ae:	681b      	ldr	r3, [r3, #0]
 800b3b0:	68db      	ldr	r3, [r3, #12]
 800b3b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b3b6:	2b80      	cmp	r3, #128	; 0x80
 800b3b8:	d107      	bne.n	800b3ca <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800b3ba:	687b      	ldr	r3, [r7, #4]
 800b3bc:	681b      	ldr	r3, [r3, #0]
 800b3be:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800b3c2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800b3c4:	6878      	ldr	r0, [r7, #4]
 800b3c6:	f001 f8f7 	bl	800c5b8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800b3ca:	687b      	ldr	r3, [r7, #4]
 800b3cc:	681b      	ldr	r3, [r3, #0]
 800b3ce:	691b      	ldr	r3, [r3, #16]
 800b3d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b3d4:	2b40      	cmp	r3, #64	; 0x40
 800b3d6:	d10e      	bne.n	800b3f6 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800b3d8:	687b      	ldr	r3, [r7, #4]
 800b3da:	681b      	ldr	r3, [r3, #0]
 800b3dc:	68db      	ldr	r3, [r3, #12]
 800b3de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b3e2:	2b40      	cmp	r3, #64	; 0x40
 800b3e4:	d107      	bne.n	800b3f6 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800b3e6:	687b      	ldr	r3, [r7, #4]
 800b3e8:	681b      	ldr	r3, [r3, #0]
 800b3ea:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800b3ee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800b3f0:	6878      	ldr	r0, [r7, #4]
 800b3f2:	f000 fad7 	bl	800b9a4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800b3f6:	687b      	ldr	r3, [r7, #4]
 800b3f8:	681b      	ldr	r3, [r3, #0]
 800b3fa:	691b      	ldr	r3, [r3, #16]
 800b3fc:	f003 0320 	and.w	r3, r3, #32
 800b400:	2b20      	cmp	r3, #32
 800b402:	d10e      	bne.n	800b422 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800b404:	687b      	ldr	r3, [r7, #4]
 800b406:	681b      	ldr	r3, [r3, #0]
 800b408:	68db      	ldr	r3, [r3, #12]
 800b40a:	f003 0320 	and.w	r3, r3, #32
 800b40e:	2b20      	cmp	r3, #32
 800b410:	d107      	bne.n	800b422 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800b412:	687b      	ldr	r3, [r7, #4]
 800b414:	681b      	ldr	r3, [r3, #0]
 800b416:	f06f 0220 	mvn.w	r2, #32
 800b41a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800b41c:	6878      	ldr	r0, [r7, #4]
 800b41e:	f001 f8b7 	bl	800c590 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800b422:	bf00      	nop
 800b424:	3708      	adds	r7, #8
 800b426:	46bd      	mov	sp, r7
 800b428:	bd80      	pop	{r7, pc}

0800b42a <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 800b42a:	b580      	push	{r7, lr}
 800b42c:	b086      	sub	sp, #24
 800b42e:	af00      	add	r7, sp, #0
 800b430:	60f8      	str	r0, [r7, #12]
 800b432:	60b9      	str	r1, [r7, #8]
 800b434:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800b436:	2300      	movs	r3, #0
 800b438:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 800b43a:	68fb      	ldr	r3, [r7, #12]
 800b43c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b440:	2b01      	cmp	r3, #1
 800b442:	d101      	bne.n	800b448 <HAL_TIM_IC_ConfigChannel+0x1e>
 800b444:	2302      	movs	r3, #2
 800b446:	e088      	b.n	800b55a <HAL_TIM_IC_ConfigChannel+0x130>
 800b448:	68fb      	ldr	r3, [r7, #12]
 800b44a:	2201      	movs	r2, #1
 800b44c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 800b450:	687b      	ldr	r3, [r7, #4]
 800b452:	2b00      	cmp	r3, #0
 800b454:	d11b      	bne.n	800b48e <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 800b456:	68fb      	ldr	r3, [r7, #12]
 800b458:	6818      	ldr	r0, [r3, #0]
 800b45a:	68bb      	ldr	r3, [r7, #8]
 800b45c:	6819      	ldr	r1, [r3, #0]
 800b45e:	68bb      	ldr	r3, [r7, #8]
 800b460:	685a      	ldr	r2, [r3, #4]
 800b462:	68bb      	ldr	r3, [r7, #8]
 800b464:	68db      	ldr	r3, [r3, #12]
 800b466:	f000 fe17 	bl	800c098 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800b46a:	68fb      	ldr	r3, [r7, #12]
 800b46c:	681b      	ldr	r3, [r3, #0]
 800b46e:	699a      	ldr	r2, [r3, #24]
 800b470:	68fb      	ldr	r3, [r7, #12]
 800b472:	681b      	ldr	r3, [r3, #0]
 800b474:	f022 020c 	bic.w	r2, r2, #12
 800b478:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800b47a:	68fb      	ldr	r3, [r7, #12]
 800b47c:	681b      	ldr	r3, [r3, #0]
 800b47e:	6999      	ldr	r1, [r3, #24]
 800b480:	68bb      	ldr	r3, [r7, #8]
 800b482:	689a      	ldr	r2, [r3, #8]
 800b484:	68fb      	ldr	r3, [r7, #12]
 800b486:	681b      	ldr	r3, [r3, #0]
 800b488:	430a      	orrs	r2, r1
 800b48a:	619a      	str	r2, [r3, #24]
 800b48c:	e060      	b.n	800b550 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 800b48e:	687b      	ldr	r3, [r7, #4]
 800b490:	2b04      	cmp	r3, #4
 800b492:	d11c      	bne.n	800b4ce <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800b494:	68fb      	ldr	r3, [r7, #12]
 800b496:	6818      	ldr	r0, [r3, #0]
 800b498:	68bb      	ldr	r3, [r7, #8]
 800b49a:	6819      	ldr	r1, [r3, #0]
 800b49c:	68bb      	ldr	r3, [r7, #8]
 800b49e:	685a      	ldr	r2, [r3, #4]
 800b4a0:	68bb      	ldr	r3, [r7, #8]
 800b4a2:	68db      	ldr	r3, [r3, #12]
 800b4a4:	f000 fe9b 	bl	800c1de <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800b4a8:	68fb      	ldr	r3, [r7, #12]
 800b4aa:	681b      	ldr	r3, [r3, #0]
 800b4ac:	699a      	ldr	r2, [r3, #24]
 800b4ae:	68fb      	ldr	r3, [r7, #12]
 800b4b0:	681b      	ldr	r3, [r3, #0]
 800b4b2:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800b4b6:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800b4b8:	68fb      	ldr	r3, [r7, #12]
 800b4ba:	681b      	ldr	r3, [r3, #0]
 800b4bc:	6999      	ldr	r1, [r3, #24]
 800b4be:	68bb      	ldr	r3, [r7, #8]
 800b4c0:	689b      	ldr	r3, [r3, #8]
 800b4c2:	021a      	lsls	r2, r3, #8
 800b4c4:	68fb      	ldr	r3, [r7, #12]
 800b4c6:	681b      	ldr	r3, [r3, #0]
 800b4c8:	430a      	orrs	r2, r1
 800b4ca:	619a      	str	r2, [r3, #24]
 800b4cc:	e040      	b.n	800b550 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 800b4ce:	687b      	ldr	r3, [r7, #4]
 800b4d0:	2b08      	cmp	r3, #8
 800b4d2:	d11b      	bne.n	800b50c <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800b4d4:	68fb      	ldr	r3, [r7, #12]
 800b4d6:	6818      	ldr	r0, [r3, #0]
 800b4d8:	68bb      	ldr	r3, [r7, #8]
 800b4da:	6819      	ldr	r1, [r3, #0]
 800b4dc:	68bb      	ldr	r3, [r7, #8]
 800b4de:	685a      	ldr	r2, [r3, #4]
 800b4e0:	68bb      	ldr	r3, [r7, #8]
 800b4e2:	68db      	ldr	r3, [r3, #12]
 800b4e4:	f000 fee8 	bl	800c2b8 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800b4e8:	68fb      	ldr	r3, [r7, #12]
 800b4ea:	681b      	ldr	r3, [r3, #0]
 800b4ec:	69da      	ldr	r2, [r3, #28]
 800b4ee:	68fb      	ldr	r3, [r7, #12]
 800b4f0:	681b      	ldr	r3, [r3, #0]
 800b4f2:	f022 020c 	bic.w	r2, r2, #12
 800b4f6:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800b4f8:	68fb      	ldr	r3, [r7, #12]
 800b4fa:	681b      	ldr	r3, [r3, #0]
 800b4fc:	69d9      	ldr	r1, [r3, #28]
 800b4fe:	68bb      	ldr	r3, [r7, #8]
 800b500:	689a      	ldr	r2, [r3, #8]
 800b502:	68fb      	ldr	r3, [r7, #12]
 800b504:	681b      	ldr	r3, [r3, #0]
 800b506:	430a      	orrs	r2, r1
 800b508:	61da      	str	r2, [r3, #28]
 800b50a:	e021      	b.n	800b550 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 800b50c:	687b      	ldr	r3, [r7, #4]
 800b50e:	2b0c      	cmp	r3, #12
 800b510:	d11c      	bne.n	800b54c <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 800b512:	68fb      	ldr	r3, [r7, #12]
 800b514:	6818      	ldr	r0, [r3, #0]
 800b516:	68bb      	ldr	r3, [r7, #8]
 800b518:	6819      	ldr	r1, [r3, #0]
 800b51a:	68bb      	ldr	r3, [r7, #8]
 800b51c:	685a      	ldr	r2, [r3, #4]
 800b51e:	68bb      	ldr	r3, [r7, #8]
 800b520:	68db      	ldr	r3, [r3, #12]
 800b522:	f000 ff05 	bl	800c330 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800b526:	68fb      	ldr	r3, [r7, #12]
 800b528:	681b      	ldr	r3, [r3, #0]
 800b52a:	69da      	ldr	r2, [r3, #28]
 800b52c:	68fb      	ldr	r3, [r7, #12]
 800b52e:	681b      	ldr	r3, [r3, #0]
 800b530:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800b534:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800b536:	68fb      	ldr	r3, [r7, #12]
 800b538:	681b      	ldr	r3, [r3, #0]
 800b53a:	69d9      	ldr	r1, [r3, #28]
 800b53c:	68bb      	ldr	r3, [r7, #8]
 800b53e:	689b      	ldr	r3, [r3, #8]
 800b540:	021a      	lsls	r2, r3, #8
 800b542:	68fb      	ldr	r3, [r7, #12]
 800b544:	681b      	ldr	r3, [r3, #0]
 800b546:	430a      	orrs	r2, r1
 800b548:	61da      	str	r2, [r3, #28]
 800b54a:	e001      	b.n	800b550 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 800b54c:	2301      	movs	r3, #1
 800b54e:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 800b550:	68fb      	ldr	r3, [r7, #12]
 800b552:	2200      	movs	r2, #0
 800b554:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800b558:	7dfb      	ldrb	r3, [r7, #23]
}
 800b55a:	4618      	mov	r0, r3
 800b55c:	3718      	adds	r7, #24
 800b55e:	46bd      	mov	sp, r7
 800b560:	bd80      	pop	{r7, pc}
	...

0800b564 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800b564:	b580      	push	{r7, lr}
 800b566:	b086      	sub	sp, #24
 800b568:	af00      	add	r7, sp, #0
 800b56a:	60f8      	str	r0, [r7, #12]
 800b56c:	60b9      	str	r1, [r7, #8]
 800b56e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800b570:	2300      	movs	r3, #0
 800b572:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800b574:	68fb      	ldr	r3, [r7, #12]
 800b576:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b57a:	2b01      	cmp	r3, #1
 800b57c:	d101      	bne.n	800b582 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800b57e:	2302      	movs	r3, #2
 800b580:	e0ff      	b.n	800b782 <HAL_TIM_PWM_ConfigChannel+0x21e>
 800b582:	68fb      	ldr	r3, [r7, #12]
 800b584:	2201      	movs	r2, #1
 800b586:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800b58a:	687b      	ldr	r3, [r7, #4]
 800b58c:	2b14      	cmp	r3, #20
 800b58e:	f200 80f0 	bhi.w	800b772 <HAL_TIM_PWM_ConfigChannel+0x20e>
 800b592:	a201      	add	r2, pc, #4	; (adr r2, 800b598 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800b594:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b598:	0800b5ed 	.word	0x0800b5ed
 800b59c:	0800b773 	.word	0x0800b773
 800b5a0:	0800b773 	.word	0x0800b773
 800b5a4:	0800b773 	.word	0x0800b773
 800b5a8:	0800b62d 	.word	0x0800b62d
 800b5ac:	0800b773 	.word	0x0800b773
 800b5b0:	0800b773 	.word	0x0800b773
 800b5b4:	0800b773 	.word	0x0800b773
 800b5b8:	0800b66f 	.word	0x0800b66f
 800b5bc:	0800b773 	.word	0x0800b773
 800b5c0:	0800b773 	.word	0x0800b773
 800b5c4:	0800b773 	.word	0x0800b773
 800b5c8:	0800b6af 	.word	0x0800b6af
 800b5cc:	0800b773 	.word	0x0800b773
 800b5d0:	0800b773 	.word	0x0800b773
 800b5d4:	0800b773 	.word	0x0800b773
 800b5d8:	0800b6f1 	.word	0x0800b6f1
 800b5dc:	0800b773 	.word	0x0800b773
 800b5e0:	0800b773 	.word	0x0800b773
 800b5e4:	0800b773 	.word	0x0800b773
 800b5e8:	0800b731 	.word	0x0800b731
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800b5ec:	68fb      	ldr	r3, [r7, #12]
 800b5ee:	681b      	ldr	r3, [r3, #0]
 800b5f0:	68b9      	ldr	r1, [r7, #8]
 800b5f2:	4618      	mov	r0, r3
 800b5f4:	f000 fa7a 	bl	800baec <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800b5f8:	68fb      	ldr	r3, [r7, #12]
 800b5fa:	681b      	ldr	r3, [r3, #0]
 800b5fc:	699a      	ldr	r2, [r3, #24]
 800b5fe:	68fb      	ldr	r3, [r7, #12]
 800b600:	681b      	ldr	r3, [r3, #0]
 800b602:	f042 0208 	orr.w	r2, r2, #8
 800b606:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800b608:	68fb      	ldr	r3, [r7, #12]
 800b60a:	681b      	ldr	r3, [r3, #0]
 800b60c:	699a      	ldr	r2, [r3, #24]
 800b60e:	68fb      	ldr	r3, [r7, #12]
 800b610:	681b      	ldr	r3, [r3, #0]
 800b612:	f022 0204 	bic.w	r2, r2, #4
 800b616:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800b618:	68fb      	ldr	r3, [r7, #12]
 800b61a:	681b      	ldr	r3, [r3, #0]
 800b61c:	6999      	ldr	r1, [r3, #24]
 800b61e:	68bb      	ldr	r3, [r7, #8]
 800b620:	691a      	ldr	r2, [r3, #16]
 800b622:	68fb      	ldr	r3, [r7, #12]
 800b624:	681b      	ldr	r3, [r3, #0]
 800b626:	430a      	orrs	r2, r1
 800b628:	619a      	str	r2, [r3, #24]
      break;
 800b62a:	e0a5      	b.n	800b778 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800b62c:	68fb      	ldr	r3, [r7, #12]
 800b62e:	681b      	ldr	r3, [r3, #0]
 800b630:	68b9      	ldr	r1, [r7, #8]
 800b632:	4618      	mov	r0, r3
 800b634:	f000 faea 	bl	800bc0c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800b638:	68fb      	ldr	r3, [r7, #12]
 800b63a:	681b      	ldr	r3, [r3, #0]
 800b63c:	699a      	ldr	r2, [r3, #24]
 800b63e:	68fb      	ldr	r3, [r7, #12]
 800b640:	681b      	ldr	r3, [r3, #0]
 800b642:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b646:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800b648:	68fb      	ldr	r3, [r7, #12]
 800b64a:	681b      	ldr	r3, [r3, #0]
 800b64c:	699a      	ldr	r2, [r3, #24]
 800b64e:	68fb      	ldr	r3, [r7, #12]
 800b650:	681b      	ldr	r3, [r3, #0]
 800b652:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b656:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800b658:	68fb      	ldr	r3, [r7, #12]
 800b65a:	681b      	ldr	r3, [r3, #0]
 800b65c:	6999      	ldr	r1, [r3, #24]
 800b65e:	68bb      	ldr	r3, [r7, #8]
 800b660:	691b      	ldr	r3, [r3, #16]
 800b662:	021a      	lsls	r2, r3, #8
 800b664:	68fb      	ldr	r3, [r7, #12]
 800b666:	681b      	ldr	r3, [r3, #0]
 800b668:	430a      	orrs	r2, r1
 800b66a:	619a      	str	r2, [r3, #24]
      break;
 800b66c:	e084      	b.n	800b778 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800b66e:	68fb      	ldr	r3, [r7, #12]
 800b670:	681b      	ldr	r3, [r3, #0]
 800b672:	68b9      	ldr	r1, [r7, #8]
 800b674:	4618      	mov	r0, r3
 800b676:	f000 fb53 	bl	800bd20 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800b67a:	68fb      	ldr	r3, [r7, #12]
 800b67c:	681b      	ldr	r3, [r3, #0]
 800b67e:	69da      	ldr	r2, [r3, #28]
 800b680:	68fb      	ldr	r3, [r7, #12]
 800b682:	681b      	ldr	r3, [r3, #0]
 800b684:	f042 0208 	orr.w	r2, r2, #8
 800b688:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800b68a:	68fb      	ldr	r3, [r7, #12]
 800b68c:	681b      	ldr	r3, [r3, #0]
 800b68e:	69da      	ldr	r2, [r3, #28]
 800b690:	68fb      	ldr	r3, [r7, #12]
 800b692:	681b      	ldr	r3, [r3, #0]
 800b694:	f022 0204 	bic.w	r2, r2, #4
 800b698:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800b69a:	68fb      	ldr	r3, [r7, #12]
 800b69c:	681b      	ldr	r3, [r3, #0]
 800b69e:	69d9      	ldr	r1, [r3, #28]
 800b6a0:	68bb      	ldr	r3, [r7, #8]
 800b6a2:	691a      	ldr	r2, [r3, #16]
 800b6a4:	68fb      	ldr	r3, [r7, #12]
 800b6a6:	681b      	ldr	r3, [r3, #0]
 800b6a8:	430a      	orrs	r2, r1
 800b6aa:	61da      	str	r2, [r3, #28]
      break;
 800b6ac:	e064      	b.n	800b778 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800b6ae:	68fb      	ldr	r3, [r7, #12]
 800b6b0:	681b      	ldr	r3, [r3, #0]
 800b6b2:	68b9      	ldr	r1, [r7, #8]
 800b6b4:	4618      	mov	r0, r3
 800b6b6:	f000 fbbb 	bl	800be30 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800b6ba:	68fb      	ldr	r3, [r7, #12]
 800b6bc:	681b      	ldr	r3, [r3, #0]
 800b6be:	69da      	ldr	r2, [r3, #28]
 800b6c0:	68fb      	ldr	r3, [r7, #12]
 800b6c2:	681b      	ldr	r3, [r3, #0]
 800b6c4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b6c8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800b6ca:	68fb      	ldr	r3, [r7, #12]
 800b6cc:	681b      	ldr	r3, [r3, #0]
 800b6ce:	69da      	ldr	r2, [r3, #28]
 800b6d0:	68fb      	ldr	r3, [r7, #12]
 800b6d2:	681b      	ldr	r3, [r3, #0]
 800b6d4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b6d8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800b6da:	68fb      	ldr	r3, [r7, #12]
 800b6dc:	681b      	ldr	r3, [r3, #0]
 800b6de:	69d9      	ldr	r1, [r3, #28]
 800b6e0:	68bb      	ldr	r3, [r7, #8]
 800b6e2:	691b      	ldr	r3, [r3, #16]
 800b6e4:	021a      	lsls	r2, r3, #8
 800b6e6:	68fb      	ldr	r3, [r7, #12]
 800b6e8:	681b      	ldr	r3, [r3, #0]
 800b6ea:	430a      	orrs	r2, r1
 800b6ec:	61da      	str	r2, [r3, #28]
      break;
 800b6ee:	e043      	b.n	800b778 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800b6f0:	68fb      	ldr	r3, [r7, #12]
 800b6f2:	681b      	ldr	r3, [r3, #0]
 800b6f4:	68b9      	ldr	r1, [r7, #8]
 800b6f6:	4618      	mov	r0, r3
 800b6f8:	f000 fc04 	bl	800bf04 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800b6fc:	68fb      	ldr	r3, [r7, #12]
 800b6fe:	681b      	ldr	r3, [r3, #0]
 800b700:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b702:	68fb      	ldr	r3, [r7, #12]
 800b704:	681b      	ldr	r3, [r3, #0]
 800b706:	f042 0208 	orr.w	r2, r2, #8
 800b70a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800b70c:	68fb      	ldr	r3, [r7, #12]
 800b70e:	681b      	ldr	r3, [r3, #0]
 800b710:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b712:	68fb      	ldr	r3, [r7, #12]
 800b714:	681b      	ldr	r3, [r3, #0]
 800b716:	f022 0204 	bic.w	r2, r2, #4
 800b71a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800b71c:	68fb      	ldr	r3, [r7, #12]
 800b71e:	681b      	ldr	r3, [r3, #0]
 800b720:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800b722:	68bb      	ldr	r3, [r7, #8]
 800b724:	691a      	ldr	r2, [r3, #16]
 800b726:	68fb      	ldr	r3, [r7, #12]
 800b728:	681b      	ldr	r3, [r3, #0]
 800b72a:	430a      	orrs	r2, r1
 800b72c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800b72e:	e023      	b.n	800b778 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800b730:	68fb      	ldr	r3, [r7, #12]
 800b732:	681b      	ldr	r3, [r3, #0]
 800b734:	68b9      	ldr	r1, [r7, #8]
 800b736:	4618      	mov	r0, r3
 800b738:	f000 fc48 	bl	800bfcc <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800b73c:	68fb      	ldr	r3, [r7, #12]
 800b73e:	681b      	ldr	r3, [r3, #0]
 800b740:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b742:	68fb      	ldr	r3, [r7, #12]
 800b744:	681b      	ldr	r3, [r3, #0]
 800b746:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b74a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800b74c:	68fb      	ldr	r3, [r7, #12]
 800b74e:	681b      	ldr	r3, [r3, #0]
 800b750:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b752:	68fb      	ldr	r3, [r7, #12]
 800b754:	681b      	ldr	r3, [r3, #0]
 800b756:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b75a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800b75c:	68fb      	ldr	r3, [r7, #12]
 800b75e:	681b      	ldr	r3, [r3, #0]
 800b760:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800b762:	68bb      	ldr	r3, [r7, #8]
 800b764:	691b      	ldr	r3, [r3, #16]
 800b766:	021a      	lsls	r2, r3, #8
 800b768:	68fb      	ldr	r3, [r7, #12]
 800b76a:	681b      	ldr	r3, [r3, #0]
 800b76c:	430a      	orrs	r2, r1
 800b76e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800b770:	e002      	b.n	800b778 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800b772:	2301      	movs	r3, #1
 800b774:	75fb      	strb	r3, [r7, #23]
      break;
 800b776:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800b778:	68fb      	ldr	r3, [r7, #12]
 800b77a:	2200      	movs	r2, #0
 800b77c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800b780:	7dfb      	ldrb	r3, [r7, #23]
}
 800b782:	4618      	mov	r0, r3
 800b784:	3718      	adds	r7, #24
 800b786:	46bd      	mov	sp, r7
 800b788:	bd80      	pop	{r7, pc}
 800b78a:	bf00      	nop

0800b78c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800b78c:	b580      	push	{r7, lr}
 800b78e:	b084      	sub	sp, #16
 800b790:	af00      	add	r7, sp, #0
 800b792:	6078      	str	r0, [r7, #4]
 800b794:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800b796:	2300      	movs	r3, #0
 800b798:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800b79a:	687b      	ldr	r3, [r7, #4]
 800b79c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b7a0:	2b01      	cmp	r3, #1
 800b7a2:	d101      	bne.n	800b7a8 <HAL_TIM_ConfigClockSource+0x1c>
 800b7a4:	2302      	movs	r3, #2
 800b7a6:	e0dc      	b.n	800b962 <HAL_TIM_ConfigClockSource+0x1d6>
 800b7a8:	687b      	ldr	r3, [r7, #4]
 800b7aa:	2201      	movs	r2, #1
 800b7ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800b7b0:	687b      	ldr	r3, [r7, #4]
 800b7b2:	2202      	movs	r2, #2
 800b7b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800b7b8:	687b      	ldr	r3, [r7, #4]
 800b7ba:	681b      	ldr	r3, [r3, #0]
 800b7bc:	689b      	ldr	r3, [r3, #8]
 800b7be:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800b7c0:	68ba      	ldr	r2, [r7, #8]
 800b7c2:	4b6a      	ldr	r3, [pc, #424]	; (800b96c <HAL_TIM_ConfigClockSource+0x1e0>)
 800b7c4:	4013      	ands	r3, r2
 800b7c6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b7c8:	68bb      	ldr	r3, [r7, #8]
 800b7ca:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800b7ce:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800b7d0:	687b      	ldr	r3, [r7, #4]
 800b7d2:	681b      	ldr	r3, [r3, #0]
 800b7d4:	68ba      	ldr	r2, [r7, #8]
 800b7d6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800b7d8:	683b      	ldr	r3, [r7, #0]
 800b7da:	681b      	ldr	r3, [r3, #0]
 800b7dc:	4a64      	ldr	r2, [pc, #400]	; (800b970 <HAL_TIM_ConfigClockSource+0x1e4>)
 800b7de:	4293      	cmp	r3, r2
 800b7e0:	f000 80a9 	beq.w	800b936 <HAL_TIM_ConfigClockSource+0x1aa>
 800b7e4:	4a62      	ldr	r2, [pc, #392]	; (800b970 <HAL_TIM_ConfigClockSource+0x1e4>)
 800b7e6:	4293      	cmp	r3, r2
 800b7e8:	f200 80ae 	bhi.w	800b948 <HAL_TIM_ConfigClockSource+0x1bc>
 800b7ec:	4a61      	ldr	r2, [pc, #388]	; (800b974 <HAL_TIM_ConfigClockSource+0x1e8>)
 800b7ee:	4293      	cmp	r3, r2
 800b7f0:	f000 80a1 	beq.w	800b936 <HAL_TIM_ConfigClockSource+0x1aa>
 800b7f4:	4a5f      	ldr	r2, [pc, #380]	; (800b974 <HAL_TIM_ConfigClockSource+0x1e8>)
 800b7f6:	4293      	cmp	r3, r2
 800b7f8:	f200 80a6 	bhi.w	800b948 <HAL_TIM_ConfigClockSource+0x1bc>
 800b7fc:	4a5e      	ldr	r2, [pc, #376]	; (800b978 <HAL_TIM_ConfigClockSource+0x1ec>)
 800b7fe:	4293      	cmp	r3, r2
 800b800:	f000 8099 	beq.w	800b936 <HAL_TIM_ConfigClockSource+0x1aa>
 800b804:	4a5c      	ldr	r2, [pc, #368]	; (800b978 <HAL_TIM_ConfigClockSource+0x1ec>)
 800b806:	4293      	cmp	r3, r2
 800b808:	f200 809e 	bhi.w	800b948 <HAL_TIM_ConfigClockSource+0x1bc>
 800b80c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800b810:	f000 8091 	beq.w	800b936 <HAL_TIM_ConfigClockSource+0x1aa>
 800b814:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800b818:	f200 8096 	bhi.w	800b948 <HAL_TIM_ConfigClockSource+0x1bc>
 800b81c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b820:	f000 8089 	beq.w	800b936 <HAL_TIM_ConfigClockSource+0x1aa>
 800b824:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b828:	f200 808e 	bhi.w	800b948 <HAL_TIM_ConfigClockSource+0x1bc>
 800b82c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b830:	d03e      	beq.n	800b8b0 <HAL_TIM_ConfigClockSource+0x124>
 800b832:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b836:	f200 8087 	bhi.w	800b948 <HAL_TIM_ConfigClockSource+0x1bc>
 800b83a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b83e:	f000 8086 	beq.w	800b94e <HAL_TIM_ConfigClockSource+0x1c2>
 800b842:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b846:	d87f      	bhi.n	800b948 <HAL_TIM_ConfigClockSource+0x1bc>
 800b848:	2b70      	cmp	r3, #112	; 0x70
 800b84a:	d01a      	beq.n	800b882 <HAL_TIM_ConfigClockSource+0xf6>
 800b84c:	2b70      	cmp	r3, #112	; 0x70
 800b84e:	d87b      	bhi.n	800b948 <HAL_TIM_ConfigClockSource+0x1bc>
 800b850:	2b60      	cmp	r3, #96	; 0x60
 800b852:	d050      	beq.n	800b8f6 <HAL_TIM_ConfigClockSource+0x16a>
 800b854:	2b60      	cmp	r3, #96	; 0x60
 800b856:	d877      	bhi.n	800b948 <HAL_TIM_ConfigClockSource+0x1bc>
 800b858:	2b50      	cmp	r3, #80	; 0x50
 800b85a:	d03c      	beq.n	800b8d6 <HAL_TIM_ConfigClockSource+0x14a>
 800b85c:	2b50      	cmp	r3, #80	; 0x50
 800b85e:	d873      	bhi.n	800b948 <HAL_TIM_ConfigClockSource+0x1bc>
 800b860:	2b40      	cmp	r3, #64	; 0x40
 800b862:	d058      	beq.n	800b916 <HAL_TIM_ConfigClockSource+0x18a>
 800b864:	2b40      	cmp	r3, #64	; 0x40
 800b866:	d86f      	bhi.n	800b948 <HAL_TIM_ConfigClockSource+0x1bc>
 800b868:	2b30      	cmp	r3, #48	; 0x30
 800b86a:	d064      	beq.n	800b936 <HAL_TIM_ConfigClockSource+0x1aa>
 800b86c:	2b30      	cmp	r3, #48	; 0x30
 800b86e:	d86b      	bhi.n	800b948 <HAL_TIM_ConfigClockSource+0x1bc>
 800b870:	2b20      	cmp	r3, #32
 800b872:	d060      	beq.n	800b936 <HAL_TIM_ConfigClockSource+0x1aa>
 800b874:	2b20      	cmp	r3, #32
 800b876:	d867      	bhi.n	800b948 <HAL_TIM_ConfigClockSource+0x1bc>
 800b878:	2b00      	cmp	r3, #0
 800b87a:	d05c      	beq.n	800b936 <HAL_TIM_ConfigClockSource+0x1aa>
 800b87c:	2b10      	cmp	r3, #16
 800b87e:	d05a      	beq.n	800b936 <HAL_TIM_ConfigClockSource+0x1aa>
 800b880:	e062      	b.n	800b948 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b882:	687b      	ldr	r3, [r7, #4]
 800b884:	6818      	ldr	r0, [r3, #0]
 800b886:	683b      	ldr	r3, [r7, #0]
 800b888:	6899      	ldr	r1, [r3, #8]
 800b88a:	683b      	ldr	r3, [r7, #0]
 800b88c:	685a      	ldr	r2, [r3, #4]
 800b88e:	683b      	ldr	r3, [r7, #0]
 800b890:	68db      	ldr	r3, [r3, #12]
 800b892:	f000 fda9 	bl	800c3e8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800b896:	687b      	ldr	r3, [r7, #4]
 800b898:	681b      	ldr	r3, [r3, #0]
 800b89a:	689b      	ldr	r3, [r3, #8]
 800b89c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800b89e:	68bb      	ldr	r3, [r7, #8]
 800b8a0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800b8a4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800b8a6:	687b      	ldr	r3, [r7, #4]
 800b8a8:	681b      	ldr	r3, [r3, #0]
 800b8aa:	68ba      	ldr	r2, [r7, #8]
 800b8ac:	609a      	str	r2, [r3, #8]
      break;
 800b8ae:	e04f      	b.n	800b950 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b8b0:	687b      	ldr	r3, [r7, #4]
 800b8b2:	6818      	ldr	r0, [r3, #0]
 800b8b4:	683b      	ldr	r3, [r7, #0]
 800b8b6:	6899      	ldr	r1, [r3, #8]
 800b8b8:	683b      	ldr	r3, [r7, #0]
 800b8ba:	685a      	ldr	r2, [r3, #4]
 800b8bc:	683b      	ldr	r3, [r7, #0]
 800b8be:	68db      	ldr	r3, [r3, #12]
 800b8c0:	f000 fd92 	bl	800c3e8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800b8c4:	687b      	ldr	r3, [r7, #4]
 800b8c6:	681b      	ldr	r3, [r3, #0]
 800b8c8:	689a      	ldr	r2, [r3, #8]
 800b8ca:	687b      	ldr	r3, [r7, #4]
 800b8cc:	681b      	ldr	r3, [r3, #0]
 800b8ce:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800b8d2:	609a      	str	r2, [r3, #8]
      break;
 800b8d4:	e03c      	b.n	800b950 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b8d6:	687b      	ldr	r3, [r7, #4]
 800b8d8:	6818      	ldr	r0, [r3, #0]
 800b8da:	683b      	ldr	r3, [r7, #0]
 800b8dc:	6859      	ldr	r1, [r3, #4]
 800b8de:	683b      	ldr	r3, [r7, #0]
 800b8e0:	68db      	ldr	r3, [r3, #12]
 800b8e2:	461a      	mov	r2, r3
 800b8e4:	f000 fc4c 	bl	800c180 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800b8e8:	687b      	ldr	r3, [r7, #4]
 800b8ea:	681b      	ldr	r3, [r3, #0]
 800b8ec:	2150      	movs	r1, #80	; 0x50
 800b8ee:	4618      	mov	r0, r3
 800b8f0:	f000 fd5c 	bl	800c3ac <TIM_ITRx_SetConfig>
      break;
 800b8f4:	e02c      	b.n	800b950 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800b8f6:	687b      	ldr	r3, [r7, #4]
 800b8f8:	6818      	ldr	r0, [r3, #0]
 800b8fa:	683b      	ldr	r3, [r7, #0]
 800b8fc:	6859      	ldr	r1, [r3, #4]
 800b8fe:	683b      	ldr	r3, [r7, #0]
 800b900:	68db      	ldr	r3, [r3, #12]
 800b902:	461a      	mov	r2, r3
 800b904:	f000 fca8 	bl	800c258 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800b908:	687b      	ldr	r3, [r7, #4]
 800b90a:	681b      	ldr	r3, [r3, #0]
 800b90c:	2160      	movs	r1, #96	; 0x60
 800b90e:	4618      	mov	r0, r3
 800b910:	f000 fd4c 	bl	800c3ac <TIM_ITRx_SetConfig>
      break;
 800b914:	e01c      	b.n	800b950 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b916:	687b      	ldr	r3, [r7, #4]
 800b918:	6818      	ldr	r0, [r3, #0]
 800b91a:	683b      	ldr	r3, [r7, #0]
 800b91c:	6859      	ldr	r1, [r3, #4]
 800b91e:	683b      	ldr	r3, [r7, #0]
 800b920:	68db      	ldr	r3, [r3, #12]
 800b922:	461a      	mov	r2, r3
 800b924:	f000 fc2c 	bl	800c180 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800b928:	687b      	ldr	r3, [r7, #4]
 800b92a:	681b      	ldr	r3, [r3, #0]
 800b92c:	2140      	movs	r1, #64	; 0x40
 800b92e:	4618      	mov	r0, r3
 800b930:	f000 fd3c 	bl	800c3ac <TIM_ITRx_SetConfig>
      break;
 800b934:	e00c      	b.n	800b950 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800b936:	687b      	ldr	r3, [r7, #4]
 800b938:	681a      	ldr	r2, [r3, #0]
 800b93a:	683b      	ldr	r3, [r7, #0]
 800b93c:	681b      	ldr	r3, [r3, #0]
 800b93e:	4619      	mov	r1, r3
 800b940:	4610      	mov	r0, r2
 800b942:	f000 fd33 	bl	800c3ac <TIM_ITRx_SetConfig>
      break;
 800b946:	e003      	b.n	800b950 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800b948:	2301      	movs	r3, #1
 800b94a:	73fb      	strb	r3, [r7, #15]
      break;
 800b94c:	e000      	b.n	800b950 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800b94e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800b950:	687b      	ldr	r3, [r7, #4]
 800b952:	2201      	movs	r2, #1
 800b954:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b958:	687b      	ldr	r3, [r7, #4]
 800b95a:	2200      	movs	r2, #0
 800b95c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800b960:	7bfb      	ldrb	r3, [r7, #15]
}
 800b962:	4618      	mov	r0, r3
 800b964:	3710      	adds	r7, #16
 800b966:	46bd      	mov	sp, r7
 800b968:	bd80      	pop	{r7, pc}
 800b96a:	bf00      	nop
 800b96c:	ffceff88 	.word	0xffceff88
 800b970:	00100040 	.word	0x00100040
 800b974:	00100030 	.word	0x00100030
 800b978:	00100020 	.word	0x00100020

0800b97c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800b97c:	b480      	push	{r7}
 800b97e:	b083      	sub	sp, #12
 800b980:	af00      	add	r7, sp, #0
 800b982:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800b984:	bf00      	nop
 800b986:	370c      	adds	r7, #12
 800b988:	46bd      	mov	sp, r7
 800b98a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b98e:	4770      	bx	lr

0800b990 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800b990:	b480      	push	{r7}
 800b992:	b083      	sub	sp, #12
 800b994:	af00      	add	r7, sp, #0
 800b996:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800b998:	bf00      	nop
 800b99a:	370c      	adds	r7, #12
 800b99c:	46bd      	mov	sp, r7
 800b99e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9a2:	4770      	bx	lr

0800b9a4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800b9a4:	b480      	push	{r7}
 800b9a6:	b083      	sub	sp, #12
 800b9a8:	af00      	add	r7, sp, #0
 800b9aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800b9ac:	bf00      	nop
 800b9ae:	370c      	adds	r7, #12
 800b9b0:	46bd      	mov	sp, r7
 800b9b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9b6:	4770      	bx	lr

0800b9b8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800b9b8:	b480      	push	{r7}
 800b9ba:	b085      	sub	sp, #20
 800b9bc:	af00      	add	r7, sp, #0
 800b9be:	6078      	str	r0, [r7, #4]
 800b9c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800b9c2:	687b      	ldr	r3, [r7, #4]
 800b9c4:	681b      	ldr	r3, [r3, #0]
 800b9c6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b9c8:	687b      	ldr	r3, [r7, #4]
 800b9ca:	4a40      	ldr	r2, [pc, #256]	; (800bacc <TIM_Base_SetConfig+0x114>)
 800b9cc:	4293      	cmp	r3, r2
 800b9ce:	d013      	beq.n	800b9f8 <TIM_Base_SetConfig+0x40>
 800b9d0:	687b      	ldr	r3, [r7, #4]
 800b9d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b9d6:	d00f      	beq.n	800b9f8 <TIM_Base_SetConfig+0x40>
 800b9d8:	687b      	ldr	r3, [r7, #4]
 800b9da:	4a3d      	ldr	r2, [pc, #244]	; (800bad0 <TIM_Base_SetConfig+0x118>)
 800b9dc:	4293      	cmp	r3, r2
 800b9de:	d00b      	beq.n	800b9f8 <TIM_Base_SetConfig+0x40>
 800b9e0:	687b      	ldr	r3, [r7, #4]
 800b9e2:	4a3c      	ldr	r2, [pc, #240]	; (800bad4 <TIM_Base_SetConfig+0x11c>)
 800b9e4:	4293      	cmp	r3, r2
 800b9e6:	d007      	beq.n	800b9f8 <TIM_Base_SetConfig+0x40>
 800b9e8:	687b      	ldr	r3, [r7, #4]
 800b9ea:	4a3b      	ldr	r2, [pc, #236]	; (800bad8 <TIM_Base_SetConfig+0x120>)
 800b9ec:	4293      	cmp	r3, r2
 800b9ee:	d003      	beq.n	800b9f8 <TIM_Base_SetConfig+0x40>
 800b9f0:	687b      	ldr	r3, [r7, #4]
 800b9f2:	4a3a      	ldr	r2, [pc, #232]	; (800badc <TIM_Base_SetConfig+0x124>)
 800b9f4:	4293      	cmp	r3, r2
 800b9f6:	d108      	bne.n	800ba0a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800b9f8:	68fb      	ldr	r3, [r7, #12]
 800b9fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b9fe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800ba00:	683b      	ldr	r3, [r7, #0]
 800ba02:	685b      	ldr	r3, [r3, #4]
 800ba04:	68fa      	ldr	r2, [r7, #12]
 800ba06:	4313      	orrs	r3, r2
 800ba08:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800ba0a:	687b      	ldr	r3, [r7, #4]
 800ba0c:	4a2f      	ldr	r2, [pc, #188]	; (800bacc <TIM_Base_SetConfig+0x114>)
 800ba0e:	4293      	cmp	r3, r2
 800ba10:	d01f      	beq.n	800ba52 <TIM_Base_SetConfig+0x9a>
 800ba12:	687b      	ldr	r3, [r7, #4]
 800ba14:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ba18:	d01b      	beq.n	800ba52 <TIM_Base_SetConfig+0x9a>
 800ba1a:	687b      	ldr	r3, [r7, #4]
 800ba1c:	4a2c      	ldr	r2, [pc, #176]	; (800bad0 <TIM_Base_SetConfig+0x118>)
 800ba1e:	4293      	cmp	r3, r2
 800ba20:	d017      	beq.n	800ba52 <TIM_Base_SetConfig+0x9a>
 800ba22:	687b      	ldr	r3, [r7, #4]
 800ba24:	4a2b      	ldr	r2, [pc, #172]	; (800bad4 <TIM_Base_SetConfig+0x11c>)
 800ba26:	4293      	cmp	r3, r2
 800ba28:	d013      	beq.n	800ba52 <TIM_Base_SetConfig+0x9a>
 800ba2a:	687b      	ldr	r3, [r7, #4]
 800ba2c:	4a2a      	ldr	r2, [pc, #168]	; (800bad8 <TIM_Base_SetConfig+0x120>)
 800ba2e:	4293      	cmp	r3, r2
 800ba30:	d00f      	beq.n	800ba52 <TIM_Base_SetConfig+0x9a>
 800ba32:	687b      	ldr	r3, [r7, #4]
 800ba34:	4a29      	ldr	r2, [pc, #164]	; (800badc <TIM_Base_SetConfig+0x124>)
 800ba36:	4293      	cmp	r3, r2
 800ba38:	d00b      	beq.n	800ba52 <TIM_Base_SetConfig+0x9a>
 800ba3a:	687b      	ldr	r3, [r7, #4]
 800ba3c:	4a28      	ldr	r2, [pc, #160]	; (800bae0 <TIM_Base_SetConfig+0x128>)
 800ba3e:	4293      	cmp	r3, r2
 800ba40:	d007      	beq.n	800ba52 <TIM_Base_SetConfig+0x9a>
 800ba42:	687b      	ldr	r3, [r7, #4]
 800ba44:	4a27      	ldr	r2, [pc, #156]	; (800bae4 <TIM_Base_SetConfig+0x12c>)
 800ba46:	4293      	cmp	r3, r2
 800ba48:	d003      	beq.n	800ba52 <TIM_Base_SetConfig+0x9a>
 800ba4a:	687b      	ldr	r3, [r7, #4]
 800ba4c:	4a26      	ldr	r2, [pc, #152]	; (800bae8 <TIM_Base_SetConfig+0x130>)
 800ba4e:	4293      	cmp	r3, r2
 800ba50:	d108      	bne.n	800ba64 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800ba52:	68fb      	ldr	r3, [r7, #12]
 800ba54:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ba58:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800ba5a:	683b      	ldr	r3, [r7, #0]
 800ba5c:	68db      	ldr	r3, [r3, #12]
 800ba5e:	68fa      	ldr	r2, [r7, #12]
 800ba60:	4313      	orrs	r3, r2
 800ba62:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800ba64:	68fb      	ldr	r3, [r7, #12]
 800ba66:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800ba6a:	683b      	ldr	r3, [r7, #0]
 800ba6c:	695b      	ldr	r3, [r3, #20]
 800ba6e:	4313      	orrs	r3, r2
 800ba70:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800ba72:	687b      	ldr	r3, [r7, #4]
 800ba74:	68fa      	ldr	r2, [r7, #12]
 800ba76:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800ba78:	683b      	ldr	r3, [r7, #0]
 800ba7a:	689a      	ldr	r2, [r3, #8]
 800ba7c:	687b      	ldr	r3, [r7, #4]
 800ba7e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800ba80:	683b      	ldr	r3, [r7, #0]
 800ba82:	681a      	ldr	r2, [r3, #0]
 800ba84:	687b      	ldr	r3, [r7, #4]
 800ba86:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800ba88:	687b      	ldr	r3, [r7, #4]
 800ba8a:	4a10      	ldr	r2, [pc, #64]	; (800bacc <TIM_Base_SetConfig+0x114>)
 800ba8c:	4293      	cmp	r3, r2
 800ba8e:	d00f      	beq.n	800bab0 <TIM_Base_SetConfig+0xf8>
 800ba90:	687b      	ldr	r3, [r7, #4]
 800ba92:	4a12      	ldr	r2, [pc, #72]	; (800badc <TIM_Base_SetConfig+0x124>)
 800ba94:	4293      	cmp	r3, r2
 800ba96:	d00b      	beq.n	800bab0 <TIM_Base_SetConfig+0xf8>
 800ba98:	687b      	ldr	r3, [r7, #4]
 800ba9a:	4a11      	ldr	r2, [pc, #68]	; (800bae0 <TIM_Base_SetConfig+0x128>)
 800ba9c:	4293      	cmp	r3, r2
 800ba9e:	d007      	beq.n	800bab0 <TIM_Base_SetConfig+0xf8>
 800baa0:	687b      	ldr	r3, [r7, #4]
 800baa2:	4a10      	ldr	r2, [pc, #64]	; (800bae4 <TIM_Base_SetConfig+0x12c>)
 800baa4:	4293      	cmp	r3, r2
 800baa6:	d003      	beq.n	800bab0 <TIM_Base_SetConfig+0xf8>
 800baa8:	687b      	ldr	r3, [r7, #4]
 800baaa:	4a0f      	ldr	r2, [pc, #60]	; (800bae8 <TIM_Base_SetConfig+0x130>)
 800baac:	4293      	cmp	r3, r2
 800baae:	d103      	bne.n	800bab8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800bab0:	683b      	ldr	r3, [r7, #0]
 800bab2:	691a      	ldr	r2, [r3, #16]
 800bab4:	687b      	ldr	r3, [r7, #4]
 800bab6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800bab8:	687b      	ldr	r3, [r7, #4]
 800baba:	2201      	movs	r2, #1
 800babc:	615a      	str	r2, [r3, #20]
}
 800babe:	bf00      	nop
 800bac0:	3714      	adds	r7, #20
 800bac2:	46bd      	mov	sp, r7
 800bac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bac8:	4770      	bx	lr
 800baca:	bf00      	nop
 800bacc:	40010000 	.word	0x40010000
 800bad0:	40000400 	.word	0x40000400
 800bad4:	40000800 	.word	0x40000800
 800bad8:	40000c00 	.word	0x40000c00
 800badc:	40010400 	.word	0x40010400
 800bae0:	40014000 	.word	0x40014000
 800bae4:	40014400 	.word	0x40014400
 800bae8:	40014800 	.word	0x40014800

0800baec <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800baec:	b480      	push	{r7}
 800baee:	b087      	sub	sp, #28
 800baf0:	af00      	add	r7, sp, #0
 800baf2:	6078      	str	r0, [r7, #4]
 800baf4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800baf6:	687b      	ldr	r3, [r7, #4]
 800baf8:	6a1b      	ldr	r3, [r3, #32]
 800bafa:	f023 0201 	bic.w	r2, r3, #1
 800bafe:	687b      	ldr	r3, [r7, #4]
 800bb00:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bb02:	687b      	ldr	r3, [r7, #4]
 800bb04:	6a1b      	ldr	r3, [r3, #32]
 800bb06:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bb08:	687b      	ldr	r3, [r7, #4]
 800bb0a:	685b      	ldr	r3, [r3, #4]
 800bb0c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800bb0e:	687b      	ldr	r3, [r7, #4]
 800bb10:	699b      	ldr	r3, [r3, #24]
 800bb12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800bb14:	68fa      	ldr	r2, [r7, #12]
 800bb16:	4b37      	ldr	r3, [pc, #220]	; (800bbf4 <TIM_OC1_SetConfig+0x108>)
 800bb18:	4013      	ands	r3, r2
 800bb1a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800bb1c:	68fb      	ldr	r3, [r7, #12]
 800bb1e:	f023 0303 	bic.w	r3, r3, #3
 800bb22:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800bb24:	683b      	ldr	r3, [r7, #0]
 800bb26:	681b      	ldr	r3, [r3, #0]
 800bb28:	68fa      	ldr	r2, [r7, #12]
 800bb2a:	4313      	orrs	r3, r2
 800bb2c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800bb2e:	697b      	ldr	r3, [r7, #20]
 800bb30:	f023 0302 	bic.w	r3, r3, #2
 800bb34:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800bb36:	683b      	ldr	r3, [r7, #0]
 800bb38:	689b      	ldr	r3, [r3, #8]
 800bb3a:	697a      	ldr	r2, [r7, #20]
 800bb3c:	4313      	orrs	r3, r2
 800bb3e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800bb40:	687b      	ldr	r3, [r7, #4]
 800bb42:	4a2d      	ldr	r2, [pc, #180]	; (800bbf8 <TIM_OC1_SetConfig+0x10c>)
 800bb44:	4293      	cmp	r3, r2
 800bb46:	d00f      	beq.n	800bb68 <TIM_OC1_SetConfig+0x7c>
 800bb48:	687b      	ldr	r3, [r7, #4]
 800bb4a:	4a2c      	ldr	r2, [pc, #176]	; (800bbfc <TIM_OC1_SetConfig+0x110>)
 800bb4c:	4293      	cmp	r3, r2
 800bb4e:	d00b      	beq.n	800bb68 <TIM_OC1_SetConfig+0x7c>
 800bb50:	687b      	ldr	r3, [r7, #4]
 800bb52:	4a2b      	ldr	r2, [pc, #172]	; (800bc00 <TIM_OC1_SetConfig+0x114>)
 800bb54:	4293      	cmp	r3, r2
 800bb56:	d007      	beq.n	800bb68 <TIM_OC1_SetConfig+0x7c>
 800bb58:	687b      	ldr	r3, [r7, #4]
 800bb5a:	4a2a      	ldr	r2, [pc, #168]	; (800bc04 <TIM_OC1_SetConfig+0x118>)
 800bb5c:	4293      	cmp	r3, r2
 800bb5e:	d003      	beq.n	800bb68 <TIM_OC1_SetConfig+0x7c>
 800bb60:	687b      	ldr	r3, [r7, #4]
 800bb62:	4a29      	ldr	r2, [pc, #164]	; (800bc08 <TIM_OC1_SetConfig+0x11c>)
 800bb64:	4293      	cmp	r3, r2
 800bb66:	d10c      	bne.n	800bb82 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800bb68:	697b      	ldr	r3, [r7, #20]
 800bb6a:	f023 0308 	bic.w	r3, r3, #8
 800bb6e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800bb70:	683b      	ldr	r3, [r7, #0]
 800bb72:	68db      	ldr	r3, [r3, #12]
 800bb74:	697a      	ldr	r2, [r7, #20]
 800bb76:	4313      	orrs	r3, r2
 800bb78:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800bb7a:	697b      	ldr	r3, [r7, #20]
 800bb7c:	f023 0304 	bic.w	r3, r3, #4
 800bb80:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bb82:	687b      	ldr	r3, [r7, #4]
 800bb84:	4a1c      	ldr	r2, [pc, #112]	; (800bbf8 <TIM_OC1_SetConfig+0x10c>)
 800bb86:	4293      	cmp	r3, r2
 800bb88:	d00f      	beq.n	800bbaa <TIM_OC1_SetConfig+0xbe>
 800bb8a:	687b      	ldr	r3, [r7, #4]
 800bb8c:	4a1b      	ldr	r2, [pc, #108]	; (800bbfc <TIM_OC1_SetConfig+0x110>)
 800bb8e:	4293      	cmp	r3, r2
 800bb90:	d00b      	beq.n	800bbaa <TIM_OC1_SetConfig+0xbe>
 800bb92:	687b      	ldr	r3, [r7, #4]
 800bb94:	4a1a      	ldr	r2, [pc, #104]	; (800bc00 <TIM_OC1_SetConfig+0x114>)
 800bb96:	4293      	cmp	r3, r2
 800bb98:	d007      	beq.n	800bbaa <TIM_OC1_SetConfig+0xbe>
 800bb9a:	687b      	ldr	r3, [r7, #4]
 800bb9c:	4a19      	ldr	r2, [pc, #100]	; (800bc04 <TIM_OC1_SetConfig+0x118>)
 800bb9e:	4293      	cmp	r3, r2
 800bba0:	d003      	beq.n	800bbaa <TIM_OC1_SetConfig+0xbe>
 800bba2:	687b      	ldr	r3, [r7, #4]
 800bba4:	4a18      	ldr	r2, [pc, #96]	; (800bc08 <TIM_OC1_SetConfig+0x11c>)
 800bba6:	4293      	cmp	r3, r2
 800bba8:	d111      	bne.n	800bbce <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800bbaa:	693b      	ldr	r3, [r7, #16]
 800bbac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800bbb0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800bbb2:	693b      	ldr	r3, [r7, #16]
 800bbb4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800bbb8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800bbba:	683b      	ldr	r3, [r7, #0]
 800bbbc:	695b      	ldr	r3, [r3, #20]
 800bbbe:	693a      	ldr	r2, [r7, #16]
 800bbc0:	4313      	orrs	r3, r2
 800bbc2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800bbc4:	683b      	ldr	r3, [r7, #0]
 800bbc6:	699b      	ldr	r3, [r3, #24]
 800bbc8:	693a      	ldr	r2, [r7, #16]
 800bbca:	4313      	orrs	r3, r2
 800bbcc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bbce:	687b      	ldr	r3, [r7, #4]
 800bbd0:	693a      	ldr	r2, [r7, #16]
 800bbd2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800bbd4:	687b      	ldr	r3, [r7, #4]
 800bbd6:	68fa      	ldr	r2, [r7, #12]
 800bbd8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800bbda:	683b      	ldr	r3, [r7, #0]
 800bbdc:	685a      	ldr	r2, [r3, #4]
 800bbde:	687b      	ldr	r3, [r7, #4]
 800bbe0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bbe2:	687b      	ldr	r3, [r7, #4]
 800bbe4:	697a      	ldr	r2, [r7, #20]
 800bbe6:	621a      	str	r2, [r3, #32]
}
 800bbe8:	bf00      	nop
 800bbea:	371c      	adds	r7, #28
 800bbec:	46bd      	mov	sp, r7
 800bbee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbf2:	4770      	bx	lr
 800bbf4:	fffeff8f 	.word	0xfffeff8f
 800bbf8:	40010000 	.word	0x40010000
 800bbfc:	40010400 	.word	0x40010400
 800bc00:	40014000 	.word	0x40014000
 800bc04:	40014400 	.word	0x40014400
 800bc08:	40014800 	.word	0x40014800

0800bc0c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800bc0c:	b480      	push	{r7}
 800bc0e:	b087      	sub	sp, #28
 800bc10:	af00      	add	r7, sp, #0
 800bc12:	6078      	str	r0, [r7, #4]
 800bc14:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800bc16:	687b      	ldr	r3, [r7, #4]
 800bc18:	6a1b      	ldr	r3, [r3, #32]
 800bc1a:	f023 0210 	bic.w	r2, r3, #16
 800bc1e:	687b      	ldr	r3, [r7, #4]
 800bc20:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bc22:	687b      	ldr	r3, [r7, #4]
 800bc24:	6a1b      	ldr	r3, [r3, #32]
 800bc26:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bc28:	687b      	ldr	r3, [r7, #4]
 800bc2a:	685b      	ldr	r3, [r3, #4]
 800bc2c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800bc2e:	687b      	ldr	r3, [r7, #4]
 800bc30:	699b      	ldr	r3, [r3, #24]
 800bc32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800bc34:	68fa      	ldr	r2, [r7, #12]
 800bc36:	4b34      	ldr	r3, [pc, #208]	; (800bd08 <TIM_OC2_SetConfig+0xfc>)
 800bc38:	4013      	ands	r3, r2
 800bc3a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800bc3c:	68fb      	ldr	r3, [r7, #12]
 800bc3e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800bc42:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800bc44:	683b      	ldr	r3, [r7, #0]
 800bc46:	681b      	ldr	r3, [r3, #0]
 800bc48:	021b      	lsls	r3, r3, #8
 800bc4a:	68fa      	ldr	r2, [r7, #12]
 800bc4c:	4313      	orrs	r3, r2
 800bc4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800bc50:	697b      	ldr	r3, [r7, #20]
 800bc52:	f023 0320 	bic.w	r3, r3, #32
 800bc56:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800bc58:	683b      	ldr	r3, [r7, #0]
 800bc5a:	689b      	ldr	r3, [r3, #8]
 800bc5c:	011b      	lsls	r3, r3, #4
 800bc5e:	697a      	ldr	r2, [r7, #20]
 800bc60:	4313      	orrs	r3, r2
 800bc62:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800bc64:	687b      	ldr	r3, [r7, #4]
 800bc66:	4a29      	ldr	r2, [pc, #164]	; (800bd0c <TIM_OC2_SetConfig+0x100>)
 800bc68:	4293      	cmp	r3, r2
 800bc6a:	d003      	beq.n	800bc74 <TIM_OC2_SetConfig+0x68>
 800bc6c:	687b      	ldr	r3, [r7, #4]
 800bc6e:	4a28      	ldr	r2, [pc, #160]	; (800bd10 <TIM_OC2_SetConfig+0x104>)
 800bc70:	4293      	cmp	r3, r2
 800bc72:	d10d      	bne.n	800bc90 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800bc74:	697b      	ldr	r3, [r7, #20]
 800bc76:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800bc7a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800bc7c:	683b      	ldr	r3, [r7, #0]
 800bc7e:	68db      	ldr	r3, [r3, #12]
 800bc80:	011b      	lsls	r3, r3, #4
 800bc82:	697a      	ldr	r2, [r7, #20]
 800bc84:	4313      	orrs	r3, r2
 800bc86:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800bc88:	697b      	ldr	r3, [r7, #20]
 800bc8a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bc8e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bc90:	687b      	ldr	r3, [r7, #4]
 800bc92:	4a1e      	ldr	r2, [pc, #120]	; (800bd0c <TIM_OC2_SetConfig+0x100>)
 800bc94:	4293      	cmp	r3, r2
 800bc96:	d00f      	beq.n	800bcb8 <TIM_OC2_SetConfig+0xac>
 800bc98:	687b      	ldr	r3, [r7, #4]
 800bc9a:	4a1d      	ldr	r2, [pc, #116]	; (800bd10 <TIM_OC2_SetConfig+0x104>)
 800bc9c:	4293      	cmp	r3, r2
 800bc9e:	d00b      	beq.n	800bcb8 <TIM_OC2_SetConfig+0xac>
 800bca0:	687b      	ldr	r3, [r7, #4]
 800bca2:	4a1c      	ldr	r2, [pc, #112]	; (800bd14 <TIM_OC2_SetConfig+0x108>)
 800bca4:	4293      	cmp	r3, r2
 800bca6:	d007      	beq.n	800bcb8 <TIM_OC2_SetConfig+0xac>
 800bca8:	687b      	ldr	r3, [r7, #4]
 800bcaa:	4a1b      	ldr	r2, [pc, #108]	; (800bd18 <TIM_OC2_SetConfig+0x10c>)
 800bcac:	4293      	cmp	r3, r2
 800bcae:	d003      	beq.n	800bcb8 <TIM_OC2_SetConfig+0xac>
 800bcb0:	687b      	ldr	r3, [r7, #4]
 800bcb2:	4a1a      	ldr	r2, [pc, #104]	; (800bd1c <TIM_OC2_SetConfig+0x110>)
 800bcb4:	4293      	cmp	r3, r2
 800bcb6:	d113      	bne.n	800bce0 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800bcb8:	693b      	ldr	r3, [r7, #16]
 800bcba:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800bcbe:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800bcc0:	693b      	ldr	r3, [r7, #16]
 800bcc2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800bcc6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800bcc8:	683b      	ldr	r3, [r7, #0]
 800bcca:	695b      	ldr	r3, [r3, #20]
 800bccc:	009b      	lsls	r3, r3, #2
 800bcce:	693a      	ldr	r2, [r7, #16]
 800bcd0:	4313      	orrs	r3, r2
 800bcd2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800bcd4:	683b      	ldr	r3, [r7, #0]
 800bcd6:	699b      	ldr	r3, [r3, #24]
 800bcd8:	009b      	lsls	r3, r3, #2
 800bcda:	693a      	ldr	r2, [r7, #16]
 800bcdc:	4313      	orrs	r3, r2
 800bcde:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bce0:	687b      	ldr	r3, [r7, #4]
 800bce2:	693a      	ldr	r2, [r7, #16]
 800bce4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800bce6:	687b      	ldr	r3, [r7, #4]
 800bce8:	68fa      	ldr	r2, [r7, #12]
 800bcea:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800bcec:	683b      	ldr	r3, [r7, #0]
 800bcee:	685a      	ldr	r2, [r3, #4]
 800bcf0:	687b      	ldr	r3, [r7, #4]
 800bcf2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bcf4:	687b      	ldr	r3, [r7, #4]
 800bcf6:	697a      	ldr	r2, [r7, #20]
 800bcf8:	621a      	str	r2, [r3, #32]
}
 800bcfa:	bf00      	nop
 800bcfc:	371c      	adds	r7, #28
 800bcfe:	46bd      	mov	sp, r7
 800bd00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd04:	4770      	bx	lr
 800bd06:	bf00      	nop
 800bd08:	feff8fff 	.word	0xfeff8fff
 800bd0c:	40010000 	.word	0x40010000
 800bd10:	40010400 	.word	0x40010400
 800bd14:	40014000 	.word	0x40014000
 800bd18:	40014400 	.word	0x40014400
 800bd1c:	40014800 	.word	0x40014800

0800bd20 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800bd20:	b480      	push	{r7}
 800bd22:	b087      	sub	sp, #28
 800bd24:	af00      	add	r7, sp, #0
 800bd26:	6078      	str	r0, [r7, #4]
 800bd28:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800bd2a:	687b      	ldr	r3, [r7, #4]
 800bd2c:	6a1b      	ldr	r3, [r3, #32]
 800bd2e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800bd32:	687b      	ldr	r3, [r7, #4]
 800bd34:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bd36:	687b      	ldr	r3, [r7, #4]
 800bd38:	6a1b      	ldr	r3, [r3, #32]
 800bd3a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bd3c:	687b      	ldr	r3, [r7, #4]
 800bd3e:	685b      	ldr	r3, [r3, #4]
 800bd40:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800bd42:	687b      	ldr	r3, [r7, #4]
 800bd44:	69db      	ldr	r3, [r3, #28]
 800bd46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800bd48:	68fa      	ldr	r2, [r7, #12]
 800bd4a:	4b33      	ldr	r3, [pc, #204]	; (800be18 <TIM_OC3_SetConfig+0xf8>)
 800bd4c:	4013      	ands	r3, r2
 800bd4e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800bd50:	68fb      	ldr	r3, [r7, #12]
 800bd52:	f023 0303 	bic.w	r3, r3, #3
 800bd56:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800bd58:	683b      	ldr	r3, [r7, #0]
 800bd5a:	681b      	ldr	r3, [r3, #0]
 800bd5c:	68fa      	ldr	r2, [r7, #12]
 800bd5e:	4313      	orrs	r3, r2
 800bd60:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800bd62:	697b      	ldr	r3, [r7, #20]
 800bd64:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800bd68:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800bd6a:	683b      	ldr	r3, [r7, #0]
 800bd6c:	689b      	ldr	r3, [r3, #8]
 800bd6e:	021b      	lsls	r3, r3, #8
 800bd70:	697a      	ldr	r2, [r7, #20]
 800bd72:	4313      	orrs	r3, r2
 800bd74:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800bd76:	687b      	ldr	r3, [r7, #4]
 800bd78:	4a28      	ldr	r2, [pc, #160]	; (800be1c <TIM_OC3_SetConfig+0xfc>)
 800bd7a:	4293      	cmp	r3, r2
 800bd7c:	d003      	beq.n	800bd86 <TIM_OC3_SetConfig+0x66>
 800bd7e:	687b      	ldr	r3, [r7, #4]
 800bd80:	4a27      	ldr	r2, [pc, #156]	; (800be20 <TIM_OC3_SetConfig+0x100>)
 800bd82:	4293      	cmp	r3, r2
 800bd84:	d10d      	bne.n	800bda2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800bd86:	697b      	ldr	r3, [r7, #20]
 800bd88:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800bd8c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800bd8e:	683b      	ldr	r3, [r7, #0]
 800bd90:	68db      	ldr	r3, [r3, #12]
 800bd92:	021b      	lsls	r3, r3, #8
 800bd94:	697a      	ldr	r2, [r7, #20]
 800bd96:	4313      	orrs	r3, r2
 800bd98:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800bd9a:	697b      	ldr	r3, [r7, #20]
 800bd9c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800bda0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bda2:	687b      	ldr	r3, [r7, #4]
 800bda4:	4a1d      	ldr	r2, [pc, #116]	; (800be1c <TIM_OC3_SetConfig+0xfc>)
 800bda6:	4293      	cmp	r3, r2
 800bda8:	d00f      	beq.n	800bdca <TIM_OC3_SetConfig+0xaa>
 800bdaa:	687b      	ldr	r3, [r7, #4]
 800bdac:	4a1c      	ldr	r2, [pc, #112]	; (800be20 <TIM_OC3_SetConfig+0x100>)
 800bdae:	4293      	cmp	r3, r2
 800bdb0:	d00b      	beq.n	800bdca <TIM_OC3_SetConfig+0xaa>
 800bdb2:	687b      	ldr	r3, [r7, #4]
 800bdb4:	4a1b      	ldr	r2, [pc, #108]	; (800be24 <TIM_OC3_SetConfig+0x104>)
 800bdb6:	4293      	cmp	r3, r2
 800bdb8:	d007      	beq.n	800bdca <TIM_OC3_SetConfig+0xaa>
 800bdba:	687b      	ldr	r3, [r7, #4]
 800bdbc:	4a1a      	ldr	r2, [pc, #104]	; (800be28 <TIM_OC3_SetConfig+0x108>)
 800bdbe:	4293      	cmp	r3, r2
 800bdc0:	d003      	beq.n	800bdca <TIM_OC3_SetConfig+0xaa>
 800bdc2:	687b      	ldr	r3, [r7, #4]
 800bdc4:	4a19      	ldr	r2, [pc, #100]	; (800be2c <TIM_OC3_SetConfig+0x10c>)
 800bdc6:	4293      	cmp	r3, r2
 800bdc8:	d113      	bne.n	800bdf2 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800bdca:	693b      	ldr	r3, [r7, #16]
 800bdcc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800bdd0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800bdd2:	693b      	ldr	r3, [r7, #16]
 800bdd4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800bdd8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800bdda:	683b      	ldr	r3, [r7, #0]
 800bddc:	695b      	ldr	r3, [r3, #20]
 800bdde:	011b      	lsls	r3, r3, #4
 800bde0:	693a      	ldr	r2, [r7, #16]
 800bde2:	4313      	orrs	r3, r2
 800bde4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800bde6:	683b      	ldr	r3, [r7, #0]
 800bde8:	699b      	ldr	r3, [r3, #24]
 800bdea:	011b      	lsls	r3, r3, #4
 800bdec:	693a      	ldr	r2, [r7, #16]
 800bdee:	4313      	orrs	r3, r2
 800bdf0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bdf2:	687b      	ldr	r3, [r7, #4]
 800bdf4:	693a      	ldr	r2, [r7, #16]
 800bdf6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800bdf8:	687b      	ldr	r3, [r7, #4]
 800bdfa:	68fa      	ldr	r2, [r7, #12]
 800bdfc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800bdfe:	683b      	ldr	r3, [r7, #0]
 800be00:	685a      	ldr	r2, [r3, #4]
 800be02:	687b      	ldr	r3, [r7, #4]
 800be04:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800be06:	687b      	ldr	r3, [r7, #4]
 800be08:	697a      	ldr	r2, [r7, #20]
 800be0a:	621a      	str	r2, [r3, #32]
}
 800be0c:	bf00      	nop
 800be0e:	371c      	adds	r7, #28
 800be10:	46bd      	mov	sp, r7
 800be12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be16:	4770      	bx	lr
 800be18:	fffeff8f 	.word	0xfffeff8f
 800be1c:	40010000 	.word	0x40010000
 800be20:	40010400 	.word	0x40010400
 800be24:	40014000 	.word	0x40014000
 800be28:	40014400 	.word	0x40014400
 800be2c:	40014800 	.word	0x40014800

0800be30 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800be30:	b480      	push	{r7}
 800be32:	b087      	sub	sp, #28
 800be34:	af00      	add	r7, sp, #0
 800be36:	6078      	str	r0, [r7, #4]
 800be38:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800be3a:	687b      	ldr	r3, [r7, #4]
 800be3c:	6a1b      	ldr	r3, [r3, #32]
 800be3e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800be42:	687b      	ldr	r3, [r7, #4]
 800be44:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800be46:	687b      	ldr	r3, [r7, #4]
 800be48:	6a1b      	ldr	r3, [r3, #32]
 800be4a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800be4c:	687b      	ldr	r3, [r7, #4]
 800be4e:	685b      	ldr	r3, [r3, #4]
 800be50:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800be52:	687b      	ldr	r3, [r7, #4]
 800be54:	69db      	ldr	r3, [r3, #28]
 800be56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800be58:	68fa      	ldr	r2, [r7, #12]
 800be5a:	4b24      	ldr	r3, [pc, #144]	; (800beec <TIM_OC4_SetConfig+0xbc>)
 800be5c:	4013      	ands	r3, r2
 800be5e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800be60:	68fb      	ldr	r3, [r7, #12]
 800be62:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800be66:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800be68:	683b      	ldr	r3, [r7, #0]
 800be6a:	681b      	ldr	r3, [r3, #0]
 800be6c:	021b      	lsls	r3, r3, #8
 800be6e:	68fa      	ldr	r2, [r7, #12]
 800be70:	4313      	orrs	r3, r2
 800be72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800be74:	693b      	ldr	r3, [r7, #16]
 800be76:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800be7a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800be7c:	683b      	ldr	r3, [r7, #0]
 800be7e:	689b      	ldr	r3, [r3, #8]
 800be80:	031b      	lsls	r3, r3, #12
 800be82:	693a      	ldr	r2, [r7, #16]
 800be84:	4313      	orrs	r3, r2
 800be86:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800be88:	687b      	ldr	r3, [r7, #4]
 800be8a:	4a19      	ldr	r2, [pc, #100]	; (800bef0 <TIM_OC4_SetConfig+0xc0>)
 800be8c:	4293      	cmp	r3, r2
 800be8e:	d00f      	beq.n	800beb0 <TIM_OC4_SetConfig+0x80>
 800be90:	687b      	ldr	r3, [r7, #4]
 800be92:	4a18      	ldr	r2, [pc, #96]	; (800bef4 <TIM_OC4_SetConfig+0xc4>)
 800be94:	4293      	cmp	r3, r2
 800be96:	d00b      	beq.n	800beb0 <TIM_OC4_SetConfig+0x80>
 800be98:	687b      	ldr	r3, [r7, #4]
 800be9a:	4a17      	ldr	r2, [pc, #92]	; (800bef8 <TIM_OC4_SetConfig+0xc8>)
 800be9c:	4293      	cmp	r3, r2
 800be9e:	d007      	beq.n	800beb0 <TIM_OC4_SetConfig+0x80>
 800bea0:	687b      	ldr	r3, [r7, #4]
 800bea2:	4a16      	ldr	r2, [pc, #88]	; (800befc <TIM_OC4_SetConfig+0xcc>)
 800bea4:	4293      	cmp	r3, r2
 800bea6:	d003      	beq.n	800beb0 <TIM_OC4_SetConfig+0x80>
 800bea8:	687b      	ldr	r3, [r7, #4]
 800beaa:	4a15      	ldr	r2, [pc, #84]	; (800bf00 <TIM_OC4_SetConfig+0xd0>)
 800beac:	4293      	cmp	r3, r2
 800beae:	d109      	bne.n	800bec4 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800beb0:	697b      	ldr	r3, [r7, #20]
 800beb2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800beb6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800beb8:	683b      	ldr	r3, [r7, #0]
 800beba:	695b      	ldr	r3, [r3, #20]
 800bebc:	019b      	lsls	r3, r3, #6
 800bebe:	697a      	ldr	r2, [r7, #20]
 800bec0:	4313      	orrs	r3, r2
 800bec2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bec4:	687b      	ldr	r3, [r7, #4]
 800bec6:	697a      	ldr	r2, [r7, #20]
 800bec8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800beca:	687b      	ldr	r3, [r7, #4]
 800becc:	68fa      	ldr	r2, [r7, #12]
 800bece:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800bed0:	683b      	ldr	r3, [r7, #0]
 800bed2:	685a      	ldr	r2, [r3, #4]
 800bed4:	687b      	ldr	r3, [r7, #4]
 800bed6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bed8:	687b      	ldr	r3, [r7, #4]
 800beda:	693a      	ldr	r2, [r7, #16]
 800bedc:	621a      	str	r2, [r3, #32]
}
 800bede:	bf00      	nop
 800bee0:	371c      	adds	r7, #28
 800bee2:	46bd      	mov	sp, r7
 800bee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bee8:	4770      	bx	lr
 800beea:	bf00      	nop
 800beec:	feff8fff 	.word	0xfeff8fff
 800bef0:	40010000 	.word	0x40010000
 800bef4:	40010400 	.word	0x40010400
 800bef8:	40014000 	.word	0x40014000
 800befc:	40014400 	.word	0x40014400
 800bf00:	40014800 	.word	0x40014800

0800bf04 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800bf04:	b480      	push	{r7}
 800bf06:	b087      	sub	sp, #28
 800bf08:	af00      	add	r7, sp, #0
 800bf0a:	6078      	str	r0, [r7, #4]
 800bf0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800bf0e:	687b      	ldr	r3, [r7, #4]
 800bf10:	6a1b      	ldr	r3, [r3, #32]
 800bf12:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800bf16:	687b      	ldr	r3, [r7, #4]
 800bf18:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bf1a:	687b      	ldr	r3, [r7, #4]
 800bf1c:	6a1b      	ldr	r3, [r3, #32]
 800bf1e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bf20:	687b      	ldr	r3, [r7, #4]
 800bf22:	685b      	ldr	r3, [r3, #4]
 800bf24:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800bf26:	687b      	ldr	r3, [r7, #4]
 800bf28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bf2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800bf2c:	68fa      	ldr	r2, [r7, #12]
 800bf2e:	4b21      	ldr	r3, [pc, #132]	; (800bfb4 <TIM_OC5_SetConfig+0xb0>)
 800bf30:	4013      	ands	r3, r2
 800bf32:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800bf34:	683b      	ldr	r3, [r7, #0]
 800bf36:	681b      	ldr	r3, [r3, #0]
 800bf38:	68fa      	ldr	r2, [r7, #12]
 800bf3a:	4313      	orrs	r3, r2
 800bf3c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800bf3e:	693b      	ldr	r3, [r7, #16]
 800bf40:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800bf44:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800bf46:	683b      	ldr	r3, [r7, #0]
 800bf48:	689b      	ldr	r3, [r3, #8]
 800bf4a:	041b      	lsls	r3, r3, #16
 800bf4c:	693a      	ldr	r2, [r7, #16]
 800bf4e:	4313      	orrs	r3, r2
 800bf50:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bf52:	687b      	ldr	r3, [r7, #4]
 800bf54:	4a18      	ldr	r2, [pc, #96]	; (800bfb8 <TIM_OC5_SetConfig+0xb4>)
 800bf56:	4293      	cmp	r3, r2
 800bf58:	d00f      	beq.n	800bf7a <TIM_OC5_SetConfig+0x76>
 800bf5a:	687b      	ldr	r3, [r7, #4]
 800bf5c:	4a17      	ldr	r2, [pc, #92]	; (800bfbc <TIM_OC5_SetConfig+0xb8>)
 800bf5e:	4293      	cmp	r3, r2
 800bf60:	d00b      	beq.n	800bf7a <TIM_OC5_SetConfig+0x76>
 800bf62:	687b      	ldr	r3, [r7, #4]
 800bf64:	4a16      	ldr	r2, [pc, #88]	; (800bfc0 <TIM_OC5_SetConfig+0xbc>)
 800bf66:	4293      	cmp	r3, r2
 800bf68:	d007      	beq.n	800bf7a <TIM_OC5_SetConfig+0x76>
 800bf6a:	687b      	ldr	r3, [r7, #4]
 800bf6c:	4a15      	ldr	r2, [pc, #84]	; (800bfc4 <TIM_OC5_SetConfig+0xc0>)
 800bf6e:	4293      	cmp	r3, r2
 800bf70:	d003      	beq.n	800bf7a <TIM_OC5_SetConfig+0x76>
 800bf72:	687b      	ldr	r3, [r7, #4]
 800bf74:	4a14      	ldr	r2, [pc, #80]	; (800bfc8 <TIM_OC5_SetConfig+0xc4>)
 800bf76:	4293      	cmp	r3, r2
 800bf78:	d109      	bne.n	800bf8e <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800bf7a:	697b      	ldr	r3, [r7, #20]
 800bf7c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800bf80:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800bf82:	683b      	ldr	r3, [r7, #0]
 800bf84:	695b      	ldr	r3, [r3, #20]
 800bf86:	021b      	lsls	r3, r3, #8
 800bf88:	697a      	ldr	r2, [r7, #20]
 800bf8a:	4313      	orrs	r3, r2
 800bf8c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bf8e:	687b      	ldr	r3, [r7, #4]
 800bf90:	697a      	ldr	r2, [r7, #20]
 800bf92:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800bf94:	687b      	ldr	r3, [r7, #4]
 800bf96:	68fa      	ldr	r2, [r7, #12]
 800bf98:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800bf9a:	683b      	ldr	r3, [r7, #0]
 800bf9c:	685a      	ldr	r2, [r3, #4]
 800bf9e:	687b      	ldr	r3, [r7, #4]
 800bfa0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bfa2:	687b      	ldr	r3, [r7, #4]
 800bfa4:	693a      	ldr	r2, [r7, #16]
 800bfa6:	621a      	str	r2, [r3, #32]
}
 800bfa8:	bf00      	nop
 800bfaa:	371c      	adds	r7, #28
 800bfac:	46bd      	mov	sp, r7
 800bfae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfb2:	4770      	bx	lr
 800bfb4:	fffeff8f 	.word	0xfffeff8f
 800bfb8:	40010000 	.word	0x40010000
 800bfbc:	40010400 	.word	0x40010400
 800bfc0:	40014000 	.word	0x40014000
 800bfc4:	40014400 	.word	0x40014400
 800bfc8:	40014800 	.word	0x40014800

0800bfcc <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800bfcc:	b480      	push	{r7}
 800bfce:	b087      	sub	sp, #28
 800bfd0:	af00      	add	r7, sp, #0
 800bfd2:	6078      	str	r0, [r7, #4]
 800bfd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800bfd6:	687b      	ldr	r3, [r7, #4]
 800bfd8:	6a1b      	ldr	r3, [r3, #32]
 800bfda:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800bfde:	687b      	ldr	r3, [r7, #4]
 800bfe0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bfe2:	687b      	ldr	r3, [r7, #4]
 800bfe4:	6a1b      	ldr	r3, [r3, #32]
 800bfe6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bfe8:	687b      	ldr	r3, [r7, #4]
 800bfea:	685b      	ldr	r3, [r3, #4]
 800bfec:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800bfee:	687b      	ldr	r3, [r7, #4]
 800bff0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bff2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800bff4:	68fa      	ldr	r2, [r7, #12]
 800bff6:	4b22      	ldr	r3, [pc, #136]	; (800c080 <TIM_OC6_SetConfig+0xb4>)
 800bff8:	4013      	ands	r3, r2
 800bffa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800bffc:	683b      	ldr	r3, [r7, #0]
 800bffe:	681b      	ldr	r3, [r3, #0]
 800c000:	021b      	lsls	r3, r3, #8
 800c002:	68fa      	ldr	r2, [r7, #12]
 800c004:	4313      	orrs	r3, r2
 800c006:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800c008:	693b      	ldr	r3, [r7, #16]
 800c00a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800c00e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800c010:	683b      	ldr	r3, [r7, #0]
 800c012:	689b      	ldr	r3, [r3, #8]
 800c014:	051b      	lsls	r3, r3, #20
 800c016:	693a      	ldr	r2, [r7, #16]
 800c018:	4313      	orrs	r3, r2
 800c01a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c01c:	687b      	ldr	r3, [r7, #4]
 800c01e:	4a19      	ldr	r2, [pc, #100]	; (800c084 <TIM_OC6_SetConfig+0xb8>)
 800c020:	4293      	cmp	r3, r2
 800c022:	d00f      	beq.n	800c044 <TIM_OC6_SetConfig+0x78>
 800c024:	687b      	ldr	r3, [r7, #4]
 800c026:	4a18      	ldr	r2, [pc, #96]	; (800c088 <TIM_OC6_SetConfig+0xbc>)
 800c028:	4293      	cmp	r3, r2
 800c02a:	d00b      	beq.n	800c044 <TIM_OC6_SetConfig+0x78>
 800c02c:	687b      	ldr	r3, [r7, #4]
 800c02e:	4a17      	ldr	r2, [pc, #92]	; (800c08c <TIM_OC6_SetConfig+0xc0>)
 800c030:	4293      	cmp	r3, r2
 800c032:	d007      	beq.n	800c044 <TIM_OC6_SetConfig+0x78>
 800c034:	687b      	ldr	r3, [r7, #4]
 800c036:	4a16      	ldr	r2, [pc, #88]	; (800c090 <TIM_OC6_SetConfig+0xc4>)
 800c038:	4293      	cmp	r3, r2
 800c03a:	d003      	beq.n	800c044 <TIM_OC6_SetConfig+0x78>
 800c03c:	687b      	ldr	r3, [r7, #4]
 800c03e:	4a15      	ldr	r2, [pc, #84]	; (800c094 <TIM_OC6_SetConfig+0xc8>)
 800c040:	4293      	cmp	r3, r2
 800c042:	d109      	bne.n	800c058 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800c044:	697b      	ldr	r3, [r7, #20]
 800c046:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800c04a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800c04c:	683b      	ldr	r3, [r7, #0]
 800c04e:	695b      	ldr	r3, [r3, #20]
 800c050:	029b      	lsls	r3, r3, #10
 800c052:	697a      	ldr	r2, [r7, #20]
 800c054:	4313      	orrs	r3, r2
 800c056:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c058:	687b      	ldr	r3, [r7, #4]
 800c05a:	697a      	ldr	r2, [r7, #20]
 800c05c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800c05e:	687b      	ldr	r3, [r7, #4]
 800c060:	68fa      	ldr	r2, [r7, #12]
 800c062:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800c064:	683b      	ldr	r3, [r7, #0]
 800c066:	685a      	ldr	r2, [r3, #4]
 800c068:	687b      	ldr	r3, [r7, #4]
 800c06a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c06c:	687b      	ldr	r3, [r7, #4]
 800c06e:	693a      	ldr	r2, [r7, #16]
 800c070:	621a      	str	r2, [r3, #32]
}
 800c072:	bf00      	nop
 800c074:	371c      	adds	r7, #28
 800c076:	46bd      	mov	sp, r7
 800c078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c07c:	4770      	bx	lr
 800c07e:	bf00      	nop
 800c080:	feff8fff 	.word	0xfeff8fff
 800c084:	40010000 	.word	0x40010000
 800c088:	40010400 	.word	0x40010400
 800c08c:	40014000 	.word	0x40014000
 800c090:	40014400 	.word	0x40014400
 800c094:	40014800 	.word	0x40014800

0800c098 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800c098:	b480      	push	{r7}
 800c09a:	b087      	sub	sp, #28
 800c09c:	af00      	add	r7, sp, #0
 800c09e:	60f8      	str	r0, [r7, #12]
 800c0a0:	60b9      	str	r1, [r7, #8]
 800c0a2:	607a      	str	r2, [r7, #4]
 800c0a4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c0a6:	68fb      	ldr	r3, [r7, #12]
 800c0a8:	6a1b      	ldr	r3, [r3, #32]
 800c0aa:	f023 0201 	bic.w	r2, r3, #1
 800c0ae:	68fb      	ldr	r3, [r7, #12]
 800c0b0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c0b2:	68fb      	ldr	r3, [r7, #12]
 800c0b4:	699b      	ldr	r3, [r3, #24]
 800c0b6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800c0b8:	68fb      	ldr	r3, [r7, #12]
 800c0ba:	6a1b      	ldr	r3, [r3, #32]
 800c0bc:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800c0be:	68fb      	ldr	r3, [r7, #12]
 800c0c0:	4a28      	ldr	r2, [pc, #160]	; (800c164 <TIM_TI1_SetConfig+0xcc>)
 800c0c2:	4293      	cmp	r3, r2
 800c0c4:	d01b      	beq.n	800c0fe <TIM_TI1_SetConfig+0x66>
 800c0c6:	68fb      	ldr	r3, [r7, #12]
 800c0c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c0cc:	d017      	beq.n	800c0fe <TIM_TI1_SetConfig+0x66>
 800c0ce:	68fb      	ldr	r3, [r7, #12]
 800c0d0:	4a25      	ldr	r2, [pc, #148]	; (800c168 <TIM_TI1_SetConfig+0xd0>)
 800c0d2:	4293      	cmp	r3, r2
 800c0d4:	d013      	beq.n	800c0fe <TIM_TI1_SetConfig+0x66>
 800c0d6:	68fb      	ldr	r3, [r7, #12]
 800c0d8:	4a24      	ldr	r2, [pc, #144]	; (800c16c <TIM_TI1_SetConfig+0xd4>)
 800c0da:	4293      	cmp	r3, r2
 800c0dc:	d00f      	beq.n	800c0fe <TIM_TI1_SetConfig+0x66>
 800c0de:	68fb      	ldr	r3, [r7, #12]
 800c0e0:	4a23      	ldr	r2, [pc, #140]	; (800c170 <TIM_TI1_SetConfig+0xd8>)
 800c0e2:	4293      	cmp	r3, r2
 800c0e4:	d00b      	beq.n	800c0fe <TIM_TI1_SetConfig+0x66>
 800c0e6:	68fb      	ldr	r3, [r7, #12]
 800c0e8:	4a22      	ldr	r2, [pc, #136]	; (800c174 <TIM_TI1_SetConfig+0xdc>)
 800c0ea:	4293      	cmp	r3, r2
 800c0ec:	d007      	beq.n	800c0fe <TIM_TI1_SetConfig+0x66>
 800c0ee:	68fb      	ldr	r3, [r7, #12]
 800c0f0:	4a21      	ldr	r2, [pc, #132]	; (800c178 <TIM_TI1_SetConfig+0xe0>)
 800c0f2:	4293      	cmp	r3, r2
 800c0f4:	d003      	beq.n	800c0fe <TIM_TI1_SetConfig+0x66>
 800c0f6:	68fb      	ldr	r3, [r7, #12]
 800c0f8:	4a20      	ldr	r2, [pc, #128]	; (800c17c <TIM_TI1_SetConfig+0xe4>)
 800c0fa:	4293      	cmp	r3, r2
 800c0fc:	d101      	bne.n	800c102 <TIM_TI1_SetConfig+0x6a>
 800c0fe:	2301      	movs	r3, #1
 800c100:	e000      	b.n	800c104 <TIM_TI1_SetConfig+0x6c>
 800c102:	2300      	movs	r3, #0
 800c104:	2b00      	cmp	r3, #0
 800c106:	d008      	beq.n	800c11a <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800c108:	697b      	ldr	r3, [r7, #20]
 800c10a:	f023 0303 	bic.w	r3, r3, #3
 800c10e:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800c110:	697a      	ldr	r2, [r7, #20]
 800c112:	687b      	ldr	r3, [r7, #4]
 800c114:	4313      	orrs	r3, r2
 800c116:	617b      	str	r3, [r7, #20]
 800c118:	e003      	b.n	800c122 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800c11a:	697b      	ldr	r3, [r7, #20]
 800c11c:	f043 0301 	orr.w	r3, r3, #1
 800c120:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800c122:	697b      	ldr	r3, [r7, #20]
 800c124:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800c128:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800c12a:	683b      	ldr	r3, [r7, #0]
 800c12c:	011b      	lsls	r3, r3, #4
 800c12e:	b2db      	uxtb	r3, r3
 800c130:	697a      	ldr	r2, [r7, #20]
 800c132:	4313      	orrs	r3, r2
 800c134:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800c136:	693b      	ldr	r3, [r7, #16]
 800c138:	f023 030a 	bic.w	r3, r3, #10
 800c13c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800c13e:	68bb      	ldr	r3, [r7, #8]
 800c140:	f003 030a 	and.w	r3, r3, #10
 800c144:	693a      	ldr	r2, [r7, #16]
 800c146:	4313      	orrs	r3, r2
 800c148:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800c14a:	68fb      	ldr	r3, [r7, #12]
 800c14c:	697a      	ldr	r2, [r7, #20]
 800c14e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c150:	68fb      	ldr	r3, [r7, #12]
 800c152:	693a      	ldr	r2, [r7, #16]
 800c154:	621a      	str	r2, [r3, #32]
}
 800c156:	bf00      	nop
 800c158:	371c      	adds	r7, #28
 800c15a:	46bd      	mov	sp, r7
 800c15c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c160:	4770      	bx	lr
 800c162:	bf00      	nop
 800c164:	40010000 	.word	0x40010000
 800c168:	40000400 	.word	0x40000400
 800c16c:	40000800 	.word	0x40000800
 800c170:	40000c00 	.word	0x40000c00
 800c174:	40010400 	.word	0x40010400
 800c178:	40001800 	.word	0x40001800
 800c17c:	40014000 	.word	0x40014000

0800c180 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c180:	b480      	push	{r7}
 800c182:	b087      	sub	sp, #28
 800c184:	af00      	add	r7, sp, #0
 800c186:	60f8      	str	r0, [r7, #12]
 800c188:	60b9      	str	r1, [r7, #8]
 800c18a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800c18c:	68fb      	ldr	r3, [r7, #12]
 800c18e:	6a1b      	ldr	r3, [r3, #32]
 800c190:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c192:	68fb      	ldr	r3, [r7, #12]
 800c194:	6a1b      	ldr	r3, [r3, #32]
 800c196:	f023 0201 	bic.w	r2, r3, #1
 800c19a:	68fb      	ldr	r3, [r7, #12]
 800c19c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c19e:	68fb      	ldr	r3, [r7, #12]
 800c1a0:	699b      	ldr	r3, [r3, #24]
 800c1a2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800c1a4:	693b      	ldr	r3, [r7, #16]
 800c1a6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800c1aa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800c1ac:	687b      	ldr	r3, [r7, #4]
 800c1ae:	011b      	lsls	r3, r3, #4
 800c1b0:	693a      	ldr	r2, [r7, #16]
 800c1b2:	4313      	orrs	r3, r2
 800c1b4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800c1b6:	697b      	ldr	r3, [r7, #20]
 800c1b8:	f023 030a 	bic.w	r3, r3, #10
 800c1bc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800c1be:	697a      	ldr	r2, [r7, #20]
 800c1c0:	68bb      	ldr	r3, [r7, #8]
 800c1c2:	4313      	orrs	r3, r2
 800c1c4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800c1c6:	68fb      	ldr	r3, [r7, #12]
 800c1c8:	693a      	ldr	r2, [r7, #16]
 800c1ca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c1cc:	68fb      	ldr	r3, [r7, #12]
 800c1ce:	697a      	ldr	r2, [r7, #20]
 800c1d0:	621a      	str	r2, [r3, #32]
}
 800c1d2:	bf00      	nop
 800c1d4:	371c      	adds	r7, #28
 800c1d6:	46bd      	mov	sp, r7
 800c1d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1dc:	4770      	bx	lr

0800c1de <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800c1de:	b480      	push	{r7}
 800c1e0:	b087      	sub	sp, #28
 800c1e2:	af00      	add	r7, sp, #0
 800c1e4:	60f8      	str	r0, [r7, #12]
 800c1e6:	60b9      	str	r1, [r7, #8]
 800c1e8:	607a      	str	r2, [r7, #4]
 800c1ea:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c1ec:	68fb      	ldr	r3, [r7, #12]
 800c1ee:	6a1b      	ldr	r3, [r3, #32]
 800c1f0:	f023 0210 	bic.w	r2, r3, #16
 800c1f4:	68fb      	ldr	r3, [r7, #12]
 800c1f6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c1f8:	68fb      	ldr	r3, [r7, #12]
 800c1fa:	699b      	ldr	r3, [r3, #24]
 800c1fc:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800c1fe:	68fb      	ldr	r3, [r7, #12]
 800c200:	6a1b      	ldr	r3, [r3, #32]
 800c202:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800c204:	697b      	ldr	r3, [r7, #20]
 800c206:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c20a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800c20c:	687b      	ldr	r3, [r7, #4]
 800c20e:	021b      	lsls	r3, r3, #8
 800c210:	697a      	ldr	r2, [r7, #20]
 800c212:	4313      	orrs	r3, r2
 800c214:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800c216:	697b      	ldr	r3, [r7, #20]
 800c218:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800c21c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800c21e:	683b      	ldr	r3, [r7, #0]
 800c220:	031b      	lsls	r3, r3, #12
 800c222:	b29b      	uxth	r3, r3
 800c224:	697a      	ldr	r2, [r7, #20]
 800c226:	4313      	orrs	r3, r2
 800c228:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800c22a:	693b      	ldr	r3, [r7, #16]
 800c22c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800c230:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800c232:	68bb      	ldr	r3, [r7, #8]
 800c234:	011b      	lsls	r3, r3, #4
 800c236:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800c23a:	693a      	ldr	r2, [r7, #16]
 800c23c:	4313      	orrs	r3, r2
 800c23e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800c240:	68fb      	ldr	r3, [r7, #12]
 800c242:	697a      	ldr	r2, [r7, #20]
 800c244:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c246:	68fb      	ldr	r3, [r7, #12]
 800c248:	693a      	ldr	r2, [r7, #16]
 800c24a:	621a      	str	r2, [r3, #32]
}
 800c24c:	bf00      	nop
 800c24e:	371c      	adds	r7, #28
 800c250:	46bd      	mov	sp, r7
 800c252:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c256:	4770      	bx	lr

0800c258 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c258:	b480      	push	{r7}
 800c25a:	b087      	sub	sp, #28
 800c25c:	af00      	add	r7, sp, #0
 800c25e:	60f8      	str	r0, [r7, #12]
 800c260:	60b9      	str	r1, [r7, #8]
 800c262:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c264:	68fb      	ldr	r3, [r7, #12]
 800c266:	6a1b      	ldr	r3, [r3, #32]
 800c268:	f023 0210 	bic.w	r2, r3, #16
 800c26c:	68fb      	ldr	r3, [r7, #12]
 800c26e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c270:	68fb      	ldr	r3, [r7, #12]
 800c272:	699b      	ldr	r3, [r3, #24]
 800c274:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800c276:	68fb      	ldr	r3, [r7, #12]
 800c278:	6a1b      	ldr	r3, [r3, #32]
 800c27a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800c27c:	697b      	ldr	r3, [r7, #20]
 800c27e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800c282:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800c284:	687b      	ldr	r3, [r7, #4]
 800c286:	031b      	lsls	r3, r3, #12
 800c288:	697a      	ldr	r2, [r7, #20]
 800c28a:	4313      	orrs	r3, r2
 800c28c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800c28e:	693b      	ldr	r3, [r7, #16]
 800c290:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800c294:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800c296:	68bb      	ldr	r3, [r7, #8]
 800c298:	011b      	lsls	r3, r3, #4
 800c29a:	693a      	ldr	r2, [r7, #16]
 800c29c:	4313      	orrs	r3, r2
 800c29e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800c2a0:	68fb      	ldr	r3, [r7, #12]
 800c2a2:	697a      	ldr	r2, [r7, #20]
 800c2a4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c2a6:	68fb      	ldr	r3, [r7, #12]
 800c2a8:	693a      	ldr	r2, [r7, #16]
 800c2aa:	621a      	str	r2, [r3, #32]
}
 800c2ac:	bf00      	nop
 800c2ae:	371c      	adds	r7, #28
 800c2b0:	46bd      	mov	sp, r7
 800c2b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2b6:	4770      	bx	lr

0800c2b8 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800c2b8:	b480      	push	{r7}
 800c2ba:	b087      	sub	sp, #28
 800c2bc:	af00      	add	r7, sp, #0
 800c2be:	60f8      	str	r0, [r7, #12]
 800c2c0:	60b9      	str	r1, [r7, #8]
 800c2c2:	607a      	str	r2, [r7, #4]
 800c2c4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800c2c6:	68fb      	ldr	r3, [r7, #12]
 800c2c8:	6a1b      	ldr	r3, [r3, #32]
 800c2ca:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800c2ce:	68fb      	ldr	r3, [r7, #12]
 800c2d0:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800c2d2:	68fb      	ldr	r3, [r7, #12]
 800c2d4:	69db      	ldr	r3, [r3, #28]
 800c2d6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800c2d8:	68fb      	ldr	r3, [r7, #12]
 800c2da:	6a1b      	ldr	r3, [r3, #32]
 800c2dc:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800c2de:	697b      	ldr	r3, [r7, #20]
 800c2e0:	f023 0303 	bic.w	r3, r3, #3
 800c2e4:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 800c2e6:	697a      	ldr	r2, [r7, #20]
 800c2e8:	687b      	ldr	r3, [r7, #4]
 800c2ea:	4313      	orrs	r3, r2
 800c2ec:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800c2ee:	697b      	ldr	r3, [r7, #20]
 800c2f0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800c2f4:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800c2f6:	683b      	ldr	r3, [r7, #0]
 800c2f8:	011b      	lsls	r3, r3, #4
 800c2fa:	b2db      	uxtb	r3, r3
 800c2fc:	697a      	ldr	r2, [r7, #20]
 800c2fe:	4313      	orrs	r3, r2
 800c300:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800c302:	693b      	ldr	r3, [r7, #16]
 800c304:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 800c308:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800c30a:	68bb      	ldr	r3, [r7, #8]
 800c30c:	021b      	lsls	r3, r3, #8
 800c30e:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 800c312:	693a      	ldr	r2, [r7, #16]
 800c314:	4313      	orrs	r3, r2
 800c316:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800c318:	68fb      	ldr	r3, [r7, #12]
 800c31a:	697a      	ldr	r2, [r7, #20]
 800c31c:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800c31e:	68fb      	ldr	r3, [r7, #12]
 800c320:	693a      	ldr	r2, [r7, #16]
 800c322:	621a      	str	r2, [r3, #32]
}
 800c324:	bf00      	nop
 800c326:	371c      	adds	r7, #28
 800c328:	46bd      	mov	sp, r7
 800c32a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c32e:	4770      	bx	lr

0800c330 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800c330:	b480      	push	{r7}
 800c332:	b087      	sub	sp, #28
 800c334:	af00      	add	r7, sp, #0
 800c336:	60f8      	str	r0, [r7, #12]
 800c338:	60b9      	str	r1, [r7, #8]
 800c33a:	607a      	str	r2, [r7, #4]
 800c33c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800c33e:	68fb      	ldr	r3, [r7, #12]
 800c340:	6a1b      	ldr	r3, [r3, #32]
 800c342:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800c346:	68fb      	ldr	r3, [r7, #12]
 800c348:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800c34a:	68fb      	ldr	r3, [r7, #12]
 800c34c:	69db      	ldr	r3, [r3, #28]
 800c34e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800c350:	68fb      	ldr	r3, [r7, #12]
 800c352:	6a1b      	ldr	r3, [r3, #32]
 800c354:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800c356:	697b      	ldr	r3, [r7, #20]
 800c358:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c35c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800c35e:	687b      	ldr	r3, [r7, #4]
 800c360:	021b      	lsls	r3, r3, #8
 800c362:	697a      	ldr	r2, [r7, #20]
 800c364:	4313      	orrs	r3, r2
 800c366:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800c368:	697b      	ldr	r3, [r7, #20]
 800c36a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800c36e:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800c370:	683b      	ldr	r3, [r7, #0]
 800c372:	031b      	lsls	r3, r3, #12
 800c374:	b29b      	uxth	r3, r3
 800c376:	697a      	ldr	r2, [r7, #20]
 800c378:	4313      	orrs	r3, r2
 800c37a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800c37c:	693b      	ldr	r3, [r7, #16]
 800c37e:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 800c382:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800c384:	68bb      	ldr	r3, [r7, #8]
 800c386:	031b      	lsls	r3, r3, #12
 800c388:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 800c38c:	693a      	ldr	r2, [r7, #16]
 800c38e:	4313      	orrs	r3, r2
 800c390:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800c392:	68fb      	ldr	r3, [r7, #12]
 800c394:	697a      	ldr	r2, [r7, #20]
 800c396:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800c398:	68fb      	ldr	r3, [r7, #12]
 800c39a:	693a      	ldr	r2, [r7, #16]
 800c39c:	621a      	str	r2, [r3, #32]
}
 800c39e:	bf00      	nop
 800c3a0:	371c      	adds	r7, #28
 800c3a2:	46bd      	mov	sp, r7
 800c3a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3a8:	4770      	bx	lr
	...

0800c3ac <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800c3ac:	b480      	push	{r7}
 800c3ae:	b085      	sub	sp, #20
 800c3b0:	af00      	add	r7, sp, #0
 800c3b2:	6078      	str	r0, [r7, #4]
 800c3b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800c3b6:	687b      	ldr	r3, [r7, #4]
 800c3b8:	689b      	ldr	r3, [r3, #8]
 800c3ba:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800c3bc:	68fa      	ldr	r2, [r7, #12]
 800c3be:	4b09      	ldr	r3, [pc, #36]	; (800c3e4 <TIM_ITRx_SetConfig+0x38>)
 800c3c0:	4013      	ands	r3, r2
 800c3c2:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800c3c4:	683a      	ldr	r2, [r7, #0]
 800c3c6:	68fb      	ldr	r3, [r7, #12]
 800c3c8:	4313      	orrs	r3, r2
 800c3ca:	f043 0307 	orr.w	r3, r3, #7
 800c3ce:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c3d0:	687b      	ldr	r3, [r7, #4]
 800c3d2:	68fa      	ldr	r2, [r7, #12]
 800c3d4:	609a      	str	r2, [r3, #8]
}
 800c3d6:	bf00      	nop
 800c3d8:	3714      	adds	r7, #20
 800c3da:	46bd      	mov	sp, r7
 800c3dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3e0:	4770      	bx	lr
 800c3e2:	bf00      	nop
 800c3e4:	ffcfff8f 	.word	0xffcfff8f

0800c3e8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800c3e8:	b480      	push	{r7}
 800c3ea:	b087      	sub	sp, #28
 800c3ec:	af00      	add	r7, sp, #0
 800c3ee:	60f8      	str	r0, [r7, #12]
 800c3f0:	60b9      	str	r1, [r7, #8]
 800c3f2:	607a      	str	r2, [r7, #4]
 800c3f4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800c3f6:	68fb      	ldr	r3, [r7, #12]
 800c3f8:	689b      	ldr	r3, [r3, #8]
 800c3fa:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c3fc:	697b      	ldr	r3, [r7, #20]
 800c3fe:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800c402:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800c404:	683b      	ldr	r3, [r7, #0]
 800c406:	021a      	lsls	r2, r3, #8
 800c408:	687b      	ldr	r3, [r7, #4]
 800c40a:	431a      	orrs	r2, r3
 800c40c:	68bb      	ldr	r3, [r7, #8]
 800c40e:	4313      	orrs	r3, r2
 800c410:	697a      	ldr	r2, [r7, #20]
 800c412:	4313      	orrs	r3, r2
 800c414:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c416:	68fb      	ldr	r3, [r7, #12]
 800c418:	697a      	ldr	r2, [r7, #20]
 800c41a:	609a      	str	r2, [r3, #8]
}
 800c41c:	bf00      	nop
 800c41e:	371c      	adds	r7, #28
 800c420:	46bd      	mov	sp, r7
 800c422:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c426:	4770      	bx	lr

0800c428 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800c428:	b480      	push	{r7}
 800c42a:	b087      	sub	sp, #28
 800c42c:	af00      	add	r7, sp, #0
 800c42e:	60f8      	str	r0, [r7, #12]
 800c430:	60b9      	str	r1, [r7, #8]
 800c432:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800c434:	68bb      	ldr	r3, [r7, #8]
 800c436:	f003 031f 	and.w	r3, r3, #31
 800c43a:	2201      	movs	r2, #1
 800c43c:	fa02 f303 	lsl.w	r3, r2, r3
 800c440:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800c442:	68fb      	ldr	r3, [r7, #12]
 800c444:	6a1a      	ldr	r2, [r3, #32]
 800c446:	697b      	ldr	r3, [r7, #20]
 800c448:	43db      	mvns	r3, r3
 800c44a:	401a      	ands	r2, r3
 800c44c:	68fb      	ldr	r3, [r7, #12]
 800c44e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800c450:	68fb      	ldr	r3, [r7, #12]
 800c452:	6a1a      	ldr	r2, [r3, #32]
 800c454:	68bb      	ldr	r3, [r7, #8]
 800c456:	f003 031f 	and.w	r3, r3, #31
 800c45a:	6879      	ldr	r1, [r7, #4]
 800c45c:	fa01 f303 	lsl.w	r3, r1, r3
 800c460:	431a      	orrs	r2, r3
 800c462:	68fb      	ldr	r3, [r7, #12]
 800c464:	621a      	str	r2, [r3, #32]
}
 800c466:	bf00      	nop
 800c468:	371c      	adds	r7, #28
 800c46a:	46bd      	mov	sp, r7
 800c46c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c470:	4770      	bx	lr
	...

0800c474 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800c474:	b480      	push	{r7}
 800c476:	b085      	sub	sp, #20
 800c478:	af00      	add	r7, sp, #0
 800c47a:	6078      	str	r0, [r7, #4]
 800c47c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800c47e:	687b      	ldr	r3, [r7, #4]
 800c480:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c484:	2b01      	cmp	r3, #1
 800c486:	d101      	bne.n	800c48c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800c488:	2302      	movs	r3, #2
 800c48a:	e06d      	b.n	800c568 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800c48c:	687b      	ldr	r3, [r7, #4]
 800c48e:	2201      	movs	r2, #1
 800c490:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c494:	687b      	ldr	r3, [r7, #4]
 800c496:	2202      	movs	r2, #2
 800c498:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800c49c:	687b      	ldr	r3, [r7, #4]
 800c49e:	681b      	ldr	r3, [r3, #0]
 800c4a0:	685b      	ldr	r3, [r3, #4]
 800c4a2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800c4a4:	687b      	ldr	r3, [r7, #4]
 800c4a6:	681b      	ldr	r3, [r3, #0]
 800c4a8:	689b      	ldr	r3, [r3, #8]
 800c4aa:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800c4ac:	687b      	ldr	r3, [r7, #4]
 800c4ae:	681b      	ldr	r3, [r3, #0]
 800c4b0:	4a30      	ldr	r2, [pc, #192]	; (800c574 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800c4b2:	4293      	cmp	r3, r2
 800c4b4:	d004      	beq.n	800c4c0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800c4b6:	687b      	ldr	r3, [r7, #4]
 800c4b8:	681b      	ldr	r3, [r3, #0]
 800c4ba:	4a2f      	ldr	r2, [pc, #188]	; (800c578 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800c4bc:	4293      	cmp	r3, r2
 800c4be:	d108      	bne.n	800c4d2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800c4c0:	68fb      	ldr	r3, [r7, #12]
 800c4c2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800c4c6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800c4c8:	683b      	ldr	r3, [r7, #0]
 800c4ca:	685b      	ldr	r3, [r3, #4]
 800c4cc:	68fa      	ldr	r2, [r7, #12]
 800c4ce:	4313      	orrs	r3, r2
 800c4d0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800c4d2:	68fb      	ldr	r3, [r7, #12]
 800c4d4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c4d8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800c4da:	683b      	ldr	r3, [r7, #0]
 800c4dc:	681b      	ldr	r3, [r3, #0]
 800c4de:	68fa      	ldr	r2, [r7, #12]
 800c4e0:	4313      	orrs	r3, r2
 800c4e2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800c4e4:	687b      	ldr	r3, [r7, #4]
 800c4e6:	681b      	ldr	r3, [r3, #0]
 800c4e8:	68fa      	ldr	r2, [r7, #12]
 800c4ea:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c4ec:	687b      	ldr	r3, [r7, #4]
 800c4ee:	681b      	ldr	r3, [r3, #0]
 800c4f0:	4a20      	ldr	r2, [pc, #128]	; (800c574 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800c4f2:	4293      	cmp	r3, r2
 800c4f4:	d022      	beq.n	800c53c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800c4f6:	687b      	ldr	r3, [r7, #4]
 800c4f8:	681b      	ldr	r3, [r3, #0]
 800c4fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c4fe:	d01d      	beq.n	800c53c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800c500:	687b      	ldr	r3, [r7, #4]
 800c502:	681b      	ldr	r3, [r3, #0]
 800c504:	4a1d      	ldr	r2, [pc, #116]	; (800c57c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800c506:	4293      	cmp	r3, r2
 800c508:	d018      	beq.n	800c53c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800c50a:	687b      	ldr	r3, [r7, #4]
 800c50c:	681b      	ldr	r3, [r3, #0]
 800c50e:	4a1c      	ldr	r2, [pc, #112]	; (800c580 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800c510:	4293      	cmp	r3, r2
 800c512:	d013      	beq.n	800c53c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800c514:	687b      	ldr	r3, [r7, #4]
 800c516:	681b      	ldr	r3, [r3, #0]
 800c518:	4a1a      	ldr	r2, [pc, #104]	; (800c584 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800c51a:	4293      	cmp	r3, r2
 800c51c:	d00e      	beq.n	800c53c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800c51e:	687b      	ldr	r3, [r7, #4]
 800c520:	681b      	ldr	r3, [r3, #0]
 800c522:	4a15      	ldr	r2, [pc, #84]	; (800c578 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800c524:	4293      	cmp	r3, r2
 800c526:	d009      	beq.n	800c53c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800c528:	687b      	ldr	r3, [r7, #4]
 800c52a:	681b      	ldr	r3, [r3, #0]
 800c52c:	4a16      	ldr	r2, [pc, #88]	; (800c588 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800c52e:	4293      	cmp	r3, r2
 800c530:	d004      	beq.n	800c53c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800c532:	687b      	ldr	r3, [r7, #4]
 800c534:	681b      	ldr	r3, [r3, #0]
 800c536:	4a15      	ldr	r2, [pc, #84]	; (800c58c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800c538:	4293      	cmp	r3, r2
 800c53a:	d10c      	bne.n	800c556 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800c53c:	68bb      	ldr	r3, [r7, #8]
 800c53e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c542:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800c544:	683b      	ldr	r3, [r7, #0]
 800c546:	689b      	ldr	r3, [r3, #8]
 800c548:	68ba      	ldr	r2, [r7, #8]
 800c54a:	4313      	orrs	r3, r2
 800c54c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800c54e:	687b      	ldr	r3, [r7, #4]
 800c550:	681b      	ldr	r3, [r3, #0]
 800c552:	68ba      	ldr	r2, [r7, #8]
 800c554:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800c556:	687b      	ldr	r3, [r7, #4]
 800c558:	2201      	movs	r2, #1
 800c55a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800c55e:	687b      	ldr	r3, [r7, #4]
 800c560:	2200      	movs	r2, #0
 800c562:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800c566:	2300      	movs	r3, #0
}
 800c568:	4618      	mov	r0, r3
 800c56a:	3714      	adds	r7, #20
 800c56c:	46bd      	mov	sp, r7
 800c56e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c572:	4770      	bx	lr
 800c574:	40010000 	.word	0x40010000
 800c578:	40010400 	.word	0x40010400
 800c57c:	40000400 	.word	0x40000400
 800c580:	40000800 	.word	0x40000800
 800c584:	40000c00 	.word	0x40000c00
 800c588:	40001800 	.word	0x40001800
 800c58c:	40014000 	.word	0x40014000

0800c590 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800c590:	b480      	push	{r7}
 800c592:	b083      	sub	sp, #12
 800c594:	af00      	add	r7, sp, #0
 800c596:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800c598:	bf00      	nop
 800c59a:	370c      	adds	r7, #12
 800c59c:	46bd      	mov	sp, r7
 800c59e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5a2:	4770      	bx	lr

0800c5a4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800c5a4:	b480      	push	{r7}
 800c5a6:	b083      	sub	sp, #12
 800c5a8:	af00      	add	r7, sp, #0
 800c5aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800c5ac:	bf00      	nop
 800c5ae:	370c      	adds	r7, #12
 800c5b0:	46bd      	mov	sp, r7
 800c5b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5b6:	4770      	bx	lr

0800c5b8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800c5b8:	b480      	push	{r7}
 800c5ba:	b083      	sub	sp, #12
 800c5bc:	af00      	add	r7, sp, #0
 800c5be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800c5c0:	bf00      	nop
 800c5c2:	370c      	adds	r7, #12
 800c5c4:	46bd      	mov	sp, r7
 800c5c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5ca:	4770      	bx	lr

0800c5cc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800c5cc:	b580      	push	{r7, lr}
 800c5ce:	b082      	sub	sp, #8
 800c5d0:	af00      	add	r7, sp, #0
 800c5d2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800c5d4:	687b      	ldr	r3, [r7, #4]
 800c5d6:	2b00      	cmp	r3, #0
 800c5d8:	d101      	bne.n	800c5de <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800c5da:	2301      	movs	r3, #1
 800c5dc:	e042      	b.n	800c664 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800c5de:	687b      	ldr	r3, [r7, #4]
 800c5e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c5e4:	2b00      	cmp	r3, #0
 800c5e6:	d106      	bne.n	800c5f6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800c5e8:	687b      	ldr	r3, [r7, #4]
 800c5ea:	2200      	movs	r2, #0
 800c5ec:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800c5f0:	6878      	ldr	r0, [r7, #4]
 800c5f2:	f7fa f9d9 	bl	80069a8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800c5f6:	687b      	ldr	r3, [r7, #4]
 800c5f8:	2224      	movs	r2, #36	; 0x24
 800c5fa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800c5fe:	687b      	ldr	r3, [r7, #4]
 800c600:	681b      	ldr	r3, [r3, #0]
 800c602:	681a      	ldr	r2, [r3, #0]
 800c604:	687b      	ldr	r3, [r7, #4]
 800c606:	681b      	ldr	r3, [r3, #0]
 800c608:	f022 0201 	bic.w	r2, r2, #1
 800c60c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800c60e:	6878      	ldr	r0, [r7, #4]
 800c610:	f000 fccc 	bl	800cfac <UART_SetConfig>
 800c614:	4603      	mov	r3, r0
 800c616:	2b01      	cmp	r3, #1
 800c618:	d101      	bne.n	800c61e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800c61a:	2301      	movs	r3, #1
 800c61c:	e022      	b.n	800c664 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800c61e:	687b      	ldr	r3, [r7, #4]
 800c620:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c622:	2b00      	cmp	r3, #0
 800c624:	d002      	beq.n	800c62c <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800c626:	6878      	ldr	r0, [r7, #4]
 800c628:	f001 fa28 	bl	800da7c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800c62c:	687b      	ldr	r3, [r7, #4]
 800c62e:	681b      	ldr	r3, [r3, #0]
 800c630:	685a      	ldr	r2, [r3, #4]
 800c632:	687b      	ldr	r3, [r7, #4]
 800c634:	681b      	ldr	r3, [r3, #0]
 800c636:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800c63a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800c63c:	687b      	ldr	r3, [r7, #4]
 800c63e:	681b      	ldr	r3, [r3, #0]
 800c640:	689a      	ldr	r2, [r3, #8]
 800c642:	687b      	ldr	r3, [r7, #4]
 800c644:	681b      	ldr	r3, [r3, #0]
 800c646:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800c64a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800c64c:	687b      	ldr	r3, [r7, #4]
 800c64e:	681b      	ldr	r3, [r3, #0]
 800c650:	681a      	ldr	r2, [r3, #0]
 800c652:	687b      	ldr	r3, [r7, #4]
 800c654:	681b      	ldr	r3, [r3, #0]
 800c656:	f042 0201 	orr.w	r2, r2, #1
 800c65a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800c65c:	6878      	ldr	r0, [r7, #4]
 800c65e:	f001 faaf 	bl	800dbc0 <UART_CheckIdleState>
 800c662:	4603      	mov	r3, r0
}
 800c664:	4618      	mov	r0, r3
 800c666:	3708      	adds	r7, #8
 800c668:	46bd      	mov	sp, r7
 800c66a:	bd80      	pop	{r7, pc}

0800c66c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800c66c:	b580      	push	{r7, lr}
 800c66e:	b08a      	sub	sp, #40	; 0x28
 800c670:	af02      	add	r7, sp, #8
 800c672:	60f8      	str	r0, [r7, #12]
 800c674:	60b9      	str	r1, [r7, #8]
 800c676:	603b      	str	r3, [r7, #0]
 800c678:	4613      	mov	r3, r2
 800c67a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800c67c:	68fb      	ldr	r3, [r7, #12]
 800c67e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c682:	2b20      	cmp	r3, #32
 800c684:	f040 8083 	bne.w	800c78e <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 800c688:	68bb      	ldr	r3, [r7, #8]
 800c68a:	2b00      	cmp	r3, #0
 800c68c:	d002      	beq.n	800c694 <HAL_UART_Transmit+0x28>
 800c68e:	88fb      	ldrh	r3, [r7, #6]
 800c690:	2b00      	cmp	r3, #0
 800c692:	d101      	bne.n	800c698 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800c694:	2301      	movs	r3, #1
 800c696:	e07b      	b.n	800c790 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 800c698:	68fb      	ldr	r3, [r7, #12]
 800c69a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800c69e:	2b01      	cmp	r3, #1
 800c6a0:	d101      	bne.n	800c6a6 <HAL_UART_Transmit+0x3a>
 800c6a2:	2302      	movs	r3, #2
 800c6a4:	e074      	b.n	800c790 <HAL_UART_Transmit+0x124>
 800c6a6:	68fb      	ldr	r3, [r7, #12]
 800c6a8:	2201      	movs	r2, #1
 800c6aa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c6ae:	68fb      	ldr	r3, [r7, #12]
 800c6b0:	2200      	movs	r2, #0
 800c6b2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800c6b6:	68fb      	ldr	r3, [r7, #12]
 800c6b8:	2221      	movs	r2, #33	; 0x21
 800c6ba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800c6be:	f7fa fb4f 	bl	8006d60 <HAL_GetTick>
 800c6c2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800c6c4:	68fb      	ldr	r3, [r7, #12]
 800c6c6:	88fa      	ldrh	r2, [r7, #6]
 800c6c8:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800c6cc:	68fb      	ldr	r3, [r7, #12]
 800c6ce:	88fa      	ldrh	r2, [r7, #6]
 800c6d0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c6d4:	68fb      	ldr	r3, [r7, #12]
 800c6d6:	689b      	ldr	r3, [r3, #8]
 800c6d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c6dc:	d108      	bne.n	800c6f0 <HAL_UART_Transmit+0x84>
 800c6de:	68fb      	ldr	r3, [r7, #12]
 800c6e0:	691b      	ldr	r3, [r3, #16]
 800c6e2:	2b00      	cmp	r3, #0
 800c6e4:	d104      	bne.n	800c6f0 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 800c6e6:	2300      	movs	r3, #0
 800c6e8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800c6ea:	68bb      	ldr	r3, [r7, #8]
 800c6ec:	61bb      	str	r3, [r7, #24]
 800c6ee:	e003      	b.n	800c6f8 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 800c6f0:	68bb      	ldr	r3, [r7, #8]
 800c6f2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800c6f4:	2300      	movs	r3, #0
 800c6f6:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800c6f8:	68fb      	ldr	r3, [r7, #12]
 800c6fa:	2200      	movs	r2, #0
 800c6fc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 800c700:	e02c      	b.n	800c75c <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800c702:	683b      	ldr	r3, [r7, #0]
 800c704:	9300      	str	r3, [sp, #0]
 800c706:	697b      	ldr	r3, [r7, #20]
 800c708:	2200      	movs	r2, #0
 800c70a:	2180      	movs	r1, #128	; 0x80
 800c70c:	68f8      	ldr	r0, [r7, #12]
 800c70e:	f001 faa2 	bl	800dc56 <UART_WaitOnFlagUntilTimeout>
 800c712:	4603      	mov	r3, r0
 800c714:	2b00      	cmp	r3, #0
 800c716:	d001      	beq.n	800c71c <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 800c718:	2303      	movs	r3, #3
 800c71a:	e039      	b.n	800c790 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 800c71c:	69fb      	ldr	r3, [r7, #28]
 800c71e:	2b00      	cmp	r3, #0
 800c720:	d10b      	bne.n	800c73a <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800c722:	69bb      	ldr	r3, [r7, #24]
 800c724:	881b      	ldrh	r3, [r3, #0]
 800c726:	461a      	mov	r2, r3
 800c728:	68fb      	ldr	r3, [r7, #12]
 800c72a:	681b      	ldr	r3, [r3, #0]
 800c72c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800c730:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800c732:	69bb      	ldr	r3, [r7, #24]
 800c734:	3302      	adds	r3, #2
 800c736:	61bb      	str	r3, [r7, #24]
 800c738:	e007      	b.n	800c74a <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800c73a:	69fb      	ldr	r3, [r7, #28]
 800c73c:	781a      	ldrb	r2, [r3, #0]
 800c73e:	68fb      	ldr	r3, [r7, #12]
 800c740:	681b      	ldr	r3, [r3, #0]
 800c742:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800c744:	69fb      	ldr	r3, [r7, #28]
 800c746:	3301      	adds	r3, #1
 800c748:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800c74a:	68fb      	ldr	r3, [r7, #12]
 800c74c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800c750:	b29b      	uxth	r3, r3
 800c752:	3b01      	subs	r3, #1
 800c754:	b29a      	uxth	r2, r3
 800c756:	68fb      	ldr	r3, [r7, #12]
 800c758:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800c75c:	68fb      	ldr	r3, [r7, #12]
 800c75e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800c762:	b29b      	uxth	r3, r3
 800c764:	2b00      	cmp	r3, #0
 800c766:	d1cc      	bne.n	800c702 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800c768:	683b      	ldr	r3, [r7, #0]
 800c76a:	9300      	str	r3, [sp, #0]
 800c76c:	697b      	ldr	r3, [r7, #20]
 800c76e:	2200      	movs	r2, #0
 800c770:	2140      	movs	r1, #64	; 0x40
 800c772:	68f8      	ldr	r0, [r7, #12]
 800c774:	f001 fa6f 	bl	800dc56 <UART_WaitOnFlagUntilTimeout>
 800c778:	4603      	mov	r3, r0
 800c77a:	2b00      	cmp	r3, #0
 800c77c:	d001      	beq.n	800c782 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 800c77e:	2303      	movs	r3, #3
 800c780:	e006      	b.n	800c790 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800c782:	68fb      	ldr	r3, [r7, #12]
 800c784:	2220      	movs	r2, #32
 800c786:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 800c78a:	2300      	movs	r3, #0
 800c78c:	e000      	b.n	800c790 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 800c78e:	2302      	movs	r3, #2
  }
}
 800c790:	4618      	mov	r0, r3
 800c792:	3720      	adds	r7, #32
 800c794:	46bd      	mov	sp, r7
 800c796:	bd80      	pop	{r7, pc}

0800c798 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800c798:	b580      	push	{r7, lr}
 800c79a:	b08a      	sub	sp, #40	; 0x28
 800c79c:	af00      	add	r7, sp, #0
 800c79e:	60f8      	str	r0, [r7, #12]
 800c7a0:	60b9      	str	r1, [r7, #8]
 800c7a2:	4613      	mov	r3, r2
 800c7a4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800c7a6:	68fb      	ldr	r3, [r7, #12]
 800c7a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c7ac:	2b20      	cmp	r3, #32
 800c7ae:	d142      	bne.n	800c836 <HAL_UART_Receive_IT+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 800c7b0:	68bb      	ldr	r3, [r7, #8]
 800c7b2:	2b00      	cmp	r3, #0
 800c7b4:	d002      	beq.n	800c7bc <HAL_UART_Receive_IT+0x24>
 800c7b6:	88fb      	ldrh	r3, [r7, #6]
 800c7b8:	2b00      	cmp	r3, #0
 800c7ba:	d101      	bne.n	800c7c0 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800c7bc:	2301      	movs	r3, #1
 800c7be:	e03b      	b.n	800c838 <HAL_UART_Receive_IT+0xa0>
    }

    __HAL_LOCK(huart);
 800c7c0:	68fb      	ldr	r3, [r7, #12]
 800c7c2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800c7c6:	2b01      	cmp	r3, #1
 800c7c8:	d101      	bne.n	800c7ce <HAL_UART_Receive_IT+0x36>
 800c7ca:	2302      	movs	r3, #2
 800c7cc:	e034      	b.n	800c838 <HAL_UART_Receive_IT+0xa0>
 800c7ce:	68fb      	ldr	r3, [r7, #12]
 800c7d0:	2201      	movs	r2, #1
 800c7d2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c7d6:	68fb      	ldr	r3, [r7, #12]
 800c7d8:	2200      	movs	r2, #0
 800c7da:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800c7dc:	68fb      	ldr	r3, [r7, #12]
 800c7de:	681b      	ldr	r3, [r3, #0]
 800c7e0:	4a17      	ldr	r2, [pc, #92]	; (800c840 <HAL_UART_Receive_IT+0xa8>)
 800c7e2:	4293      	cmp	r3, r2
 800c7e4:	d01f      	beq.n	800c826 <HAL_UART_Receive_IT+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800c7e6:	68fb      	ldr	r3, [r7, #12]
 800c7e8:	681b      	ldr	r3, [r3, #0]
 800c7ea:	685b      	ldr	r3, [r3, #4]
 800c7ec:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c7f0:	2b00      	cmp	r3, #0
 800c7f2:	d018      	beq.n	800c826 <HAL_UART_Receive_IT+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800c7f4:	68fb      	ldr	r3, [r7, #12]
 800c7f6:	681b      	ldr	r3, [r3, #0]
 800c7f8:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c7fa:	697b      	ldr	r3, [r7, #20]
 800c7fc:	e853 3f00 	ldrex	r3, [r3]
 800c800:	613b      	str	r3, [r7, #16]
   return(result);
 800c802:	693b      	ldr	r3, [r7, #16]
 800c804:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800c808:	627b      	str	r3, [r7, #36]	; 0x24
 800c80a:	68fb      	ldr	r3, [r7, #12]
 800c80c:	681b      	ldr	r3, [r3, #0]
 800c80e:	461a      	mov	r2, r3
 800c810:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c812:	623b      	str	r3, [r7, #32]
 800c814:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c816:	69f9      	ldr	r1, [r7, #28]
 800c818:	6a3a      	ldr	r2, [r7, #32]
 800c81a:	e841 2300 	strex	r3, r2, [r1]
 800c81e:	61bb      	str	r3, [r7, #24]
   return(result);
 800c820:	69bb      	ldr	r3, [r7, #24]
 800c822:	2b00      	cmp	r3, #0
 800c824:	d1e6      	bne.n	800c7f4 <HAL_UART_Receive_IT+0x5c>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800c826:	88fb      	ldrh	r3, [r7, #6]
 800c828:	461a      	mov	r2, r3
 800c82a:	68b9      	ldr	r1, [r7, #8]
 800c82c:	68f8      	ldr	r0, [r7, #12]
 800c82e:	f001 fadb 	bl	800dde8 <UART_Start_Receive_IT>
 800c832:	4603      	mov	r3, r0
 800c834:	e000      	b.n	800c838 <HAL_UART_Receive_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800c836:	2302      	movs	r3, #2
  }
}
 800c838:	4618      	mov	r0, r3
 800c83a:	3728      	adds	r7, #40	; 0x28
 800c83c:	46bd      	mov	sp, r7
 800c83e:	bd80      	pop	{r7, pc}
 800c840:	58000c00 	.word	0x58000c00

0800c844 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800c844:	b580      	push	{r7, lr}
 800c846:	b0ba      	sub	sp, #232	; 0xe8
 800c848:	af00      	add	r7, sp, #0
 800c84a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800c84c:	687b      	ldr	r3, [r7, #4]
 800c84e:	681b      	ldr	r3, [r3, #0]
 800c850:	69db      	ldr	r3, [r3, #28]
 800c852:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800c856:	687b      	ldr	r3, [r7, #4]
 800c858:	681b      	ldr	r3, [r3, #0]
 800c85a:	681b      	ldr	r3, [r3, #0]
 800c85c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800c860:	687b      	ldr	r3, [r7, #4]
 800c862:	681b      	ldr	r3, [r3, #0]
 800c864:	689b      	ldr	r3, [r3, #8]
 800c866:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800c86a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800c86e:	f640 030f 	movw	r3, #2063	; 0x80f
 800c872:	4013      	ands	r3, r2
 800c874:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800c878:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800c87c:	2b00      	cmp	r3, #0
 800c87e:	d11b      	bne.n	800c8b8 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800c880:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c884:	f003 0320 	and.w	r3, r3, #32
 800c888:	2b00      	cmp	r3, #0
 800c88a:	d015      	beq.n	800c8b8 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800c88c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c890:	f003 0320 	and.w	r3, r3, #32
 800c894:	2b00      	cmp	r3, #0
 800c896:	d105      	bne.n	800c8a4 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800c898:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c89c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c8a0:	2b00      	cmp	r3, #0
 800c8a2:	d009      	beq.n	800c8b8 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800c8a4:	687b      	ldr	r3, [r7, #4]
 800c8a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c8a8:	2b00      	cmp	r3, #0
 800c8aa:	f000 835a 	beq.w	800cf62 <HAL_UART_IRQHandler+0x71e>
      {
        huart->RxISR(huart);
 800c8ae:	687b      	ldr	r3, [r7, #4]
 800c8b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c8b2:	6878      	ldr	r0, [r7, #4]
 800c8b4:	4798      	blx	r3
      }
      return;
 800c8b6:	e354      	b.n	800cf62 <HAL_UART_IRQHandler+0x71e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800c8b8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800c8bc:	2b00      	cmp	r3, #0
 800c8be:	f000 811f 	beq.w	800cb00 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800c8c2:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800c8c6:	4b8b      	ldr	r3, [pc, #556]	; (800caf4 <HAL_UART_IRQHandler+0x2b0>)
 800c8c8:	4013      	ands	r3, r2
 800c8ca:	2b00      	cmp	r3, #0
 800c8cc:	d106      	bne.n	800c8dc <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800c8ce:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800c8d2:	4b89      	ldr	r3, [pc, #548]	; (800caf8 <HAL_UART_IRQHandler+0x2b4>)
 800c8d4:	4013      	ands	r3, r2
 800c8d6:	2b00      	cmp	r3, #0
 800c8d8:	f000 8112 	beq.w	800cb00 <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800c8dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c8e0:	f003 0301 	and.w	r3, r3, #1
 800c8e4:	2b00      	cmp	r3, #0
 800c8e6:	d011      	beq.n	800c90c <HAL_UART_IRQHandler+0xc8>
 800c8e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c8ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c8f0:	2b00      	cmp	r3, #0
 800c8f2:	d00b      	beq.n	800c90c <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800c8f4:	687b      	ldr	r3, [r7, #4]
 800c8f6:	681b      	ldr	r3, [r3, #0]
 800c8f8:	2201      	movs	r2, #1
 800c8fa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800c8fc:	687b      	ldr	r3, [r7, #4]
 800c8fe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c902:	f043 0201 	orr.w	r2, r3, #1
 800c906:	687b      	ldr	r3, [r7, #4]
 800c908:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c90c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c910:	f003 0302 	and.w	r3, r3, #2
 800c914:	2b00      	cmp	r3, #0
 800c916:	d011      	beq.n	800c93c <HAL_UART_IRQHandler+0xf8>
 800c918:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c91c:	f003 0301 	and.w	r3, r3, #1
 800c920:	2b00      	cmp	r3, #0
 800c922:	d00b      	beq.n	800c93c <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800c924:	687b      	ldr	r3, [r7, #4]
 800c926:	681b      	ldr	r3, [r3, #0]
 800c928:	2202      	movs	r2, #2
 800c92a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800c92c:	687b      	ldr	r3, [r7, #4]
 800c92e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c932:	f043 0204 	orr.w	r2, r3, #4
 800c936:	687b      	ldr	r3, [r7, #4]
 800c938:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c93c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c940:	f003 0304 	and.w	r3, r3, #4
 800c944:	2b00      	cmp	r3, #0
 800c946:	d011      	beq.n	800c96c <HAL_UART_IRQHandler+0x128>
 800c948:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c94c:	f003 0301 	and.w	r3, r3, #1
 800c950:	2b00      	cmp	r3, #0
 800c952:	d00b      	beq.n	800c96c <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800c954:	687b      	ldr	r3, [r7, #4]
 800c956:	681b      	ldr	r3, [r3, #0]
 800c958:	2204      	movs	r2, #4
 800c95a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800c95c:	687b      	ldr	r3, [r7, #4]
 800c95e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c962:	f043 0202 	orr.w	r2, r3, #2
 800c966:	687b      	ldr	r3, [r7, #4]
 800c968:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800c96c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c970:	f003 0308 	and.w	r3, r3, #8
 800c974:	2b00      	cmp	r3, #0
 800c976:	d017      	beq.n	800c9a8 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800c978:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c97c:	f003 0320 	and.w	r3, r3, #32
 800c980:	2b00      	cmp	r3, #0
 800c982:	d105      	bne.n	800c990 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800c984:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800c988:	4b5a      	ldr	r3, [pc, #360]	; (800caf4 <HAL_UART_IRQHandler+0x2b0>)
 800c98a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800c98c:	2b00      	cmp	r3, #0
 800c98e:	d00b      	beq.n	800c9a8 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800c990:	687b      	ldr	r3, [r7, #4]
 800c992:	681b      	ldr	r3, [r3, #0]
 800c994:	2208      	movs	r2, #8
 800c996:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800c998:	687b      	ldr	r3, [r7, #4]
 800c99a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c99e:	f043 0208 	orr.w	r2, r3, #8
 800c9a2:	687b      	ldr	r3, [r7, #4]
 800c9a4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800c9a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c9ac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800c9b0:	2b00      	cmp	r3, #0
 800c9b2:	d012      	beq.n	800c9da <HAL_UART_IRQHandler+0x196>
 800c9b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c9b8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800c9bc:	2b00      	cmp	r3, #0
 800c9be:	d00c      	beq.n	800c9da <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800c9c0:	687b      	ldr	r3, [r7, #4]
 800c9c2:	681b      	ldr	r3, [r3, #0]
 800c9c4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800c9c8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800c9ca:	687b      	ldr	r3, [r7, #4]
 800c9cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c9d0:	f043 0220 	orr.w	r2, r3, #32
 800c9d4:	687b      	ldr	r3, [r7, #4]
 800c9d6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800c9da:	687b      	ldr	r3, [r7, #4]
 800c9dc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c9e0:	2b00      	cmp	r3, #0
 800c9e2:	f000 82c0 	beq.w	800cf66 <HAL_UART_IRQHandler+0x722>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800c9e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c9ea:	f003 0320 	and.w	r3, r3, #32
 800c9ee:	2b00      	cmp	r3, #0
 800c9f0:	d013      	beq.n	800ca1a <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800c9f2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c9f6:	f003 0320 	and.w	r3, r3, #32
 800c9fa:	2b00      	cmp	r3, #0
 800c9fc:	d105      	bne.n	800ca0a <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800c9fe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ca02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ca06:	2b00      	cmp	r3, #0
 800ca08:	d007      	beq.n	800ca1a <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800ca0a:	687b      	ldr	r3, [r7, #4]
 800ca0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ca0e:	2b00      	cmp	r3, #0
 800ca10:	d003      	beq.n	800ca1a <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800ca12:	687b      	ldr	r3, [r7, #4]
 800ca14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ca16:	6878      	ldr	r0, [r7, #4]
 800ca18:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800ca1a:	687b      	ldr	r3, [r7, #4]
 800ca1c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ca20:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800ca24:	687b      	ldr	r3, [r7, #4]
 800ca26:	681b      	ldr	r3, [r3, #0]
 800ca28:	689b      	ldr	r3, [r3, #8]
 800ca2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ca2e:	2b40      	cmp	r3, #64	; 0x40
 800ca30:	d005      	beq.n	800ca3e <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800ca32:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800ca36:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800ca3a:	2b00      	cmp	r3, #0
 800ca3c:	d04f      	beq.n	800cade <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800ca3e:	6878      	ldr	r0, [r7, #4]
 800ca40:	f001 fafc 	bl	800e03c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ca44:	687b      	ldr	r3, [r7, #4]
 800ca46:	681b      	ldr	r3, [r3, #0]
 800ca48:	689b      	ldr	r3, [r3, #8]
 800ca4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ca4e:	2b40      	cmp	r3, #64	; 0x40
 800ca50:	d141      	bne.n	800cad6 <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ca52:	687b      	ldr	r3, [r7, #4]
 800ca54:	681b      	ldr	r3, [r3, #0]
 800ca56:	3308      	adds	r3, #8
 800ca58:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ca5c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800ca60:	e853 3f00 	ldrex	r3, [r3]
 800ca64:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800ca68:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800ca6c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ca70:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800ca74:	687b      	ldr	r3, [r7, #4]
 800ca76:	681b      	ldr	r3, [r3, #0]
 800ca78:	3308      	adds	r3, #8
 800ca7a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800ca7e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800ca82:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ca86:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800ca8a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800ca8e:	e841 2300 	strex	r3, r2, [r1]
 800ca92:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800ca96:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800ca9a:	2b00      	cmp	r3, #0
 800ca9c:	d1d9      	bne.n	800ca52 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800ca9e:	687b      	ldr	r3, [r7, #4]
 800caa0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800caa2:	2b00      	cmp	r3, #0
 800caa4:	d013      	beq.n	800cace <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800caa6:	687b      	ldr	r3, [r7, #4]
 800caa8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800caaa:	4a14      	ldr	r2, [pc, #80]	; (800cafc <HAL_UART_IRQHandler+0x2b8>)
 800caac:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800caae:	687b      	ldr	r3, [r7, #4]
 800cab0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cab2:	4618      	mov	r0, r3
 800cab4:	f7fa fdf0 	bl	8007698 <HAL_DMA_Abort_IT>
 800cab8:	4603      	mov	r3, r0
 800caba:	2b00      	cmp	r3, #0
 800cabc:	d017      	beq.n	800caee <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800cabe:	687b      	ldr	r3, [r7, #4]
 800cac0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cac2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cac4:	687a      	ldr	r2, [r7, #4]
 800cac6:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 800cac8:	4610      	mov	r0, r2
 800caca:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800cacc:	e00f      	b.n	800caee <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800cace:	6878      	ldr	r0, [r7, #4]
 800cad0:	f000 fa56 	bl	800cf80 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800cad4:	e00b      	b.n	800caee <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800cad6:	6878      	ldr	r0, [r7, #4]
 800cad8:	f000 fa52 	bl	800cf80 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800cadc:	e007      	b.n	800caee <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800cade:	6878      	ldr	r0, [r7, #4]
 800cae0:	f000 fa4e 	bl	800cf80 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cae4:	687b      	ldr	r3, [r7, #4]
 800cae6:	2200      	movs	r2, #0
 800cae8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 800caec:	e23b      	b.n	800cf66 <HAL_UART_IRQHandler+0x722>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800caee:	bf00      	nop
    return;
 800caf0:	e239      	b.n	800cf66 <HAL_UART_IRQHandler+0x722>
 800caf2:	bf00      	nop
 800caf4:	10000001 	.word	0x10000001
 800caf8:	04000120 	.word	0x04000120
 800cafc:	0800e109 	.word	0x0800e109

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800cb00:	687b      	ldr	r3, [r7, #4]
 800cb02:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cb04:	2b01      	cmp	r3, #1
 800cb06:	f040 81ce 	bne.w	800cea6 <HAL_UART_IRQHandler+0x662>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800cb0a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800cb0e:	f003 0310 	and.w	r3, r3, #16
 800cb12:	2b00      	cmp	r3, #0
 800cb14:	f000 81c7 	beq.w	800cea6 <HAL_UART_IRQHandler+0x662>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800cb18:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800cb1c:	f003 0310 	and.w	r3, r3, #16
 800cb20:	2b00      	cmp	r3, #0
 800cb22:	f000 81c0 	beq.w	800cea6 <HAL_UART_IRQHandler+0x662>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800cb26:	687b      	ldr	r3, [r7, #4]
 800cb28:	681b      	ldr	r3, [r3, #0]
 800cb2a:	2210      	movs	r2, #16
 800cb2c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800cb2e:	687b      	ldr	r3, [r7, #4]
 800cb30:	681b      	ldr	r3, [r3, #0]
 800cb32:	689b      	ldr	r3, [r3, #8]
 800cb34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cb38:	2b40      	cmp	r3, #64	; 0x40
 800cb3a:	f040 813b 	bne.w	800cdb4 <HAL_UART_IRQHandler+0x570>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800cb3e:	687b      	ldr	r3, [r7, #4]
 800cb40:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cb42:	681b      	ldr	r3, [r3, #0]
 800cb44:	4a8b      	ldr	r2, [pc, #556]	; (800cd74 <HAL_UART_IRQHandler+0x530>)
 800cb46:	4293      	cmp	r3, r2
 800cb48:	d059      	beq.n	800cbfe <HAL_UART_IRQHandler+0x3ba>
 800cb4a:	687b      	ldr	r3, [r7, #4]
 800cb4c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cb4e:	681b      	ldr	r3, [r3, #0]
 800cb50:	4a89      	ldr	r2, [pc, #548]	; (800cd78 <HAL_UART_IRQHandler+0x534>)
 800cb52:	4293      	cmp	r3, r2
 800cb54:	d053      	beq.n	800cbfe <HAL_UART_IRQHandler+0x3ba>
 800cb56:	687b      	ldr	r3, [r7, #4]
 800cb58:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cb5a:	681b      	ldr	r3, [r3, #0]
 800cb5c:	4a87      	ldr	r2, [pc, #540]	; (800cd7c <HAL_UART_IRQHandler+0x538>)
 800cb5e:	4293      	cmp	r3, r2
 800cb60:	d04d      	beq.n	800cbfe <HAL_UART_IRQHandler+0x3ba>
 800cb62:	687b      	ldr	r3, [r7, #4]
 800cb64:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cb66:	681b      	ldr	r3, [r3, #0]
 800cb68:	4a85      	ldr	r2, [pc, #532]	; (800cd80 <HAL_UART_IRQHandler+0x53c>)
 800cb6a:	4293      	cmp	r3, r2
 800cb6c:	d047      	beq.n	800cbfe <HAL_UART_IRQHandler+0x3ba>
 800cb6e:	687b      	ldr	r3, [r7, #4]
 800cb70:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cb72:	681b      	ldr	r3, [r3, #0]
 800cb74:	4a83      	ldr	r2, [pc, #524]	; (800cd84 <HAL_UART_IRQHandler+0x540>)
 800cb76:	4293      	cmp	r3, r2
 800cb78:	d041      	beq.n	800cbfe <HAL_UART_IRQHandler+0x3ba>
 800cb7a:	687b      	ldr	r3, [r7, #4]
 800cb7c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cb7e:	681b      	ldr	r3, [r3, #0]
 800cb80:	4a81      	ldr	r2, [pc, #516]	; (800cd88 <HAL_UART_IRQHandler+0x544>)
 800cb82:	4293      	cmp	r3, r2
 800cb84:	d03b      	beq.n	800cbfe <HAL_UART_IRQHandler+0x3ba>
 800cb86:	687b      	ldr	r3, [r7, #4]
 800cb88:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cb8a:	681b      	ldr	r3, [r3, #0]
 800cb8c:	4a7f      	ldr	r2, [pc, #508]	; (800cd8c <HAL_UART_IRQHandler+0x548>)
 800cb8e:	4293      	cmp	r3, r2
 800cb90:	d035      	beq.n	800cbfe <HAL_UART_IRQHandler+0x3ba>
 800cb92:	687b      	ldr	r3, [r7, #4]
 800cb94:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cb96:	681b      	ldr	r3, [r3, #0]
 800cb98:	4a7d      	ldr	r2, [pc, #500]	; (800cd90 <HAL_UART_IRQHandler+0x54c>)
 800cb9a:	4293      	cmp	r3, r2
 800cb9c:	d02f      	beq.n	800cbfe <HAL_UART_IRQHandler+0x3ba>
 800cb9e:	687b      	ldr	r3, [r7, #4]
 800cba0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cba2:	681b      	ldr	r3, [r3, #0]
 800cba4:	4a7b      	ldr	r2, [pc, #492]	; (800cd94 <HAL_UART_IRQHandler+0x550>)
 800cba6:	4293      	cmp	r3, r2
 800cba8:	d029      	beq.n	800cbfe <HAL_UART_IRQHandler+0x3ba>
 800cbaa:	687b      	ldr	r3, [r7, #4]
 800cbac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cbae:	681b      	ldr	r3, [r3, #0]
 800cbb0:	4a79      	ldr	r2, [pc, #484]	; (800cd98 <HAL_UART_IRQHandler+0x554>)
 800cbb2:	4293      	cmp	r3, r2
 800cbb4:	d023      	beq.n	800cbfe <HAL_UART_IRQHandler+0x3ba>
 800cbb6:	687b      	ldr	r3, [r7, #4]
 800cbb8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cbba:	681b      	ldr	r3, [r3, #0]
 800cbbc:	4a77      	ldr	r2, [pc, #476]	; (800cd9c <HAL_UART_IRQHandler+0x558>)
 800cbbe:	4293      	cmp	r3, r2
 800cbc0:	d01d      	beq.n	800cbfe <HAL_UART_IRQHandler+0x3ba>
 800cbc2:	687b      	ldr	r3, [r7, #4]
 800cbc4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cbc6:	681b      	ldr	r3, [r3, #0]
 800cbc8:	4a75      	ldr	r2, [pc, #468]	; (800cda0 <HAL_UART_IRQHandler+0x55c>)
 800cbca:	4293      	cmp	r3, r2
 800cbcc:	d017      	beq.n	800cbfe <HAL_UART_IRQHandler+0x3ba>
 800cbce:	687b      	ldr	r3, [r7, #4]
 800cbd0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cbd2:	681b      	ldr	r3, [r3, #0]
 800cbd4:	4a73      	ldr	r2, [pc, #460]	; (800cda4 <HAL_UART_IRQHandler+0x560>)
 800cbd6:	4293      	cmp	r3, r2
 800cbd8:	d011      	beq.n	800cbfe <HAL_UART_IRQHandler+0x3ba>
 800cbda:	687b      	ldr	r3, [r7, #4]
 800cbdc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cbde:	681b      	ldr	r3, [r3, #0]
 800cbe0:	4a71      	ldr	r2, [pc, #452]	; (800cda8 <HAL_UART_IRQHandler+0x564>)
 800cbe2:	4293      	cmp	r3, r2
 800cbe4:	d00b      	beq.n	800cbfe <HAL_UART_IRQHandler+0x3ba>
 800cbe6:	687b      	ldr	r3, [r7, #4]
 800cbe8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cbea:	681b      	ldr	r3, [r3, #0]
 800cbec:	4a6f      	ldr	r2, [pc, #444]	; (800cdac <HAL_UART_IRQHandler+0x568>)
 800cbee:	4293      	cmp	r3, r2
 800cbf0:	d005      	beq.n	800cbfe <HAL_UART_IRQHandler+0x3ba>
 800cbf2:	687b      	ldr	r3, [r7, #4]
 800cbf4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cbf6:	681b      	ldr	r3, [r3, #0]
 800cbf8:	4a6d      	ldr	r2, [pc, #436]	; (800cdb0 <HAL_UART_IRQHandler+0x56c>)
 800cbfa:	4293      	cmp	r3, r2
 800cbfc:	d105      	bne.n	800cc0a <HAL_UART_IRQHandler+0x3c6>
 800cbfe:	687b      	ldr	r3, [r7, #4]
 800cc00:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cc02:	681b      	ldr	r3, [r3, #0]
 800cc04:	685b      	ldr	r3, [r3, #4]
 800cc06:	b29b      	uxth	r3, r3
 800cc08:	e004      	b.n	800cc14 <HAL_UART_IRQHandler+0x3d0>
 800cc0a:	687b      	ldr	r3, [r7, #4]
 800cc0c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cc0e:	681b      	ldr	r3, [r3, #0]
 800cc10:	685b      	ldr	r3, [r3, #4]
 800cc12:	b29b      	uxth	r3, r3
 800cc14:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800cc18:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800cc1c:	2b00      	cmp	r3, #0
 800cc1e:	f000 81a4 	beq.w	800cf6a <HAL_UART_IRQHandler+0x726>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800cc22:	687b      	ldr	r3, [r7, #4]
 800cc24:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800cc28:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800cc2c:	429a      	cmp	r2, r3
 800cc2e:	f080 819c 	bcs.w	800cf6a <HAL_UART_IRQHandler+0x726>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800cc32:	687b      	ldr	r3, [r7, #4]
 800cc34:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800cc38:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800cc3c:	687b      	ldr	r3, [r7, #4]
 800cc3e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cc40:	69db      	ldr	r3, [r3, #28]
 800cc42:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800cc46:	f000 8086 	beq.w	800cd56 <HAL_UART_IRQHandler+0x512>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800cc4a:	687b      	ldr	r3, [r7, #4]
 800cc4c:	681b      	ldr	r3, [r3, #0]
 800cc4e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cc52:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800cc56:	e853 3f00 	ldrex	r3, [r3]
 800cc5a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800cc5e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800cc62:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800cc66:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800cc6a:	687b      	ldr	r3, [r7, #4]
 800cc6c:	681b      	ldr	r3, [r3, #0]
 800cc6e:	461a      	mov	r2, r3
 800cc70:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800cc74:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800cc78:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cc7c:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800cc80:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800cc84:	e841 2300 	strex	r3, r2, [r1]
 800cc88:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800cc8c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800cc90:	2b00      	cmp	r3, #0
 800cc92:	d1da      	bne.n	800cc4a <HAL_UART_IRQHandler+0x406>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800cc94:	687b      	ldr	r3, [r7, #4]
 800cc96:	681b      	ldr	r3, [r3, #0]
 800cc98:	3308      	adds	r3, #8
 800cc9a:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cc9c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800cc9e:	e853 3f00 	ldrex	r3, [r3]
 800cca2:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800cca4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800cca6:	f023 0301 	bic.w	r3, r3, #1
 800ccaa:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800ccae:	687b      	ldr	r3, [r7, #4]
 800ccb0:	681b      	ldr	r3, [r3, #0]
 800ccb2:	3308      	adds	r3, #8
 800ccb4:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800ccb8:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800ccbc:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ccbe:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800ccc0:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800ccc4:	e841 2300 	strex	r3, r2, [r1]
 800ccc8:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800ccca:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800cccc:	2b00      	cmp	r3, #0
 800ccce:	d1e1      	bne.n	800cc94 <HAL_UART_IRQHandler+0x450>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ccd0:	687b      	ldr	r3, [r7, #4]
 800ccd2:	681b      	ldr	r3, [r3, #0]
 800ccd4:	3308      	adds	r3, #8
 800ccd6:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ccd8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800ccda:	e853 3f00 	ldrex	r3, [r3]
 800ccde:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800cce0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800cce2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800cce6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800ccea:	687b      	ldr	r3, [r7, #4]
 800ccec:	681b      	ldr	r3, [r3, #0]
 800ccee:	3308      	adds	r3, #8
 800ccf0:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800ccf4:	66fa      	str	r2, [r7, #108]	; 0x6c
 800ccf6:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ccf8:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800ccfa:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800ccfc:	e841 2300 	strex	r3, r2, [r1]
 800cd00:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800cd02:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800cd04:	2b00      	cmp	r3, #0
 800cd06:	d1e3      	bne.n	800ccd0 <HAL_UART_IRQHandler+0x48c>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800cd08:	687b      	ldr	r3, [r7, #4]
 800cd0a:	2220      	movs	r2, #32
 800cd0c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cd10:	687b      	ldr	r3, [r7, #4]
 800cd12:	2200      	movs	r2, #0
 800cd14:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800cd16:	687b      	ldr	r3, [r7, #4]
 800cd18:	681b      	ldr	r3, [r3, #0]
 800cd1a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cd1c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cd1e:	e853 3f00 	ldrex	r3, [r3]
 800cd22:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800cd24:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800cd26:	f023 0310 	bic.w	r3, r3, #16
 800cd2a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800cd2e:	687b      	ldr	r3, [r7, #4]
 800cd30:	681b      	ldr	r3, [r3, #0]
 800cd32:	461a      	mov	r2, r3
 800cd34:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800cd38:	65bb      	str	r3, [r7, #88]	; 0x58
 800cd3a:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cd3c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800cd3e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800cd40:	e841 2300 	strex	r3, r2, [r1]
 800cd44:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800cd46:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cd48:	2b00      	cmp	r3, #0
 800cd4a:	d1e4      	bne.n	800cd16 <HAL_UART_IRQHandler+0x4d2>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800cd4c:	687b      	ldr	r3, [r7, #4]
 800cd4e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cd50:	4618      	mov	r0, r3
 800cd52:	f7fa f983 	bl	800705c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800cd56:	687b      	ldr	r3, [r7, #4]
 800cd58:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800cd5c:	687b      	ldr	r3, [r7, #4]
 800cd5e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800cd62:	b29b      	uxth	r3, r3
 800cd64:	1ad3      	subs	r3, r2, r3
 800cd66:	b29b      	uxth	r3, r3
 800cd68:	4619      	mov	r1, r3
 800cd6a:	6878      	ldr	r0, [r7, #4]
 800cd6c:	f000 f912 	bl	800cf94 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800cd70:	e0fb      	b.n	800cf6a <HAL_UART_IRQHandler+0x726>
 800cd72:	bf00      	nop
 800cd74:	40020010 	.word	0x40020010
 800cd78:	40020028 	.word	0x40020028
 800cd7c:	40020040 	.word	0x40020040
 800cd80:	40020058 	.word	0x40020058
 800cd84:	40020070 	.word	0x40020070
 800cd88:	40020088 	.word	0x40020088
 800cd8c:	400200a0 	.word	0x400200a0
 800cd90:	400200b8 	.word	0x400200b8
 800cd94:	40020410 	.word	0x40020410
 800cd98:	40020428 	.word	0x40020428
 800cd9c:	40020440 	.word	0x40020440
 800cda0:	40020458 	.word	0x40020458
 800cda4:	40020470 	.word	0x40020470
 800cda8:	40020488 	.word	0x40020488
 800cdac:	400204a0 	.word	0x400204a0
 800cdb0:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800cdb4:	687b      	ldr	r3, [r7, #4]
 800cdb6:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800cdba:	687b      	ldr	r3, [r7, #4]
 800cdbc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800cdc0:	b29b      	uxth	r3, r3
 800cdc2:	1ad3      	subs	r3, r2, r3
 800cdc4:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800cdc8:	687b      	ldr	r3, [r7, #4]
 800cdca:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800cdce:	b29b      	uxth	r3, r3
 800cdd0:	2b00      	cmp	r3, #0
 800cdd2:	f000 80cc 	beq.w	800cf6e <HAL_UART_IRQHandler+0x72a>
          && (nb_rx_data > 0U))
 800cdd6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800cdda:	2b00      	cmp	r3, #0
 800cddc:	f000 80c7 	beq.w	800cf6e <HAL_UART_IRQHandler+0x72a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800cde0:	687b      	ldr	r3, [r7, #4]
 800cde2:	681b      	ldr	r3, [r3, #0]
 800cde4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cde6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cde8:	e853 3f00 	ldrex	r3, [r3]
 800cdec:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800cdee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cdf0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800cdf4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800cdf8:	687b      	ldr	r3, [r7, #4]
 800cdfa:	681b      	ldr	r3, [r3, #0]
 800cdfc:	461a      	mov	r2, r3
 800cdfe:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800ce02:	647b      	str	r3, [r7, #68]	; 0x44
 800ce04:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ce06:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800ce08:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ce0a:	e841 2300 	strex	r3, r2, [r1]
 800ce0e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800ce10:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ce12:	2b00      	cmp	r3, #0
 800ce14:	d1e4      	bne.n	800cde0 <HAL_UART_IRQHandler+0x59c>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800ce16:	687b      	ldr	r3, [r7, #4]
 800ce18:	681b      	ldr	r3, [r3, #0]
 800ce1a:	3308      	adds	r3, #8
 800ce1c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ce1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce20:	e853 3f00 	ldrex	r3, [r3]
 800ce24:	623b      	str	r3, [r7, #32]
   return(result);
 800ce26:	6a3a      	ldr	r2, [r7, #32]
 800ce28:	4b54      	ldr	r3, [pc, #336]	; (800cf7c <HAL_UART_IRQHandler+0x738>)
 800ce2a:	4013      	ands	r3, r2
 800ce2c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800ce30:	687b      	ldr	r3, [r7, #4]
 800ce32:	681b      	ldr	r3, [r3, #0]
 800ce34:	3308      	adds	r3, #8
 800ce36:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800ce3a:	633a      	str	r2, [r7, #48]	; 0x30
 800ce3c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ce3e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ce40:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ce42:	e841 2300 	strex	r3, r2, [r1]
 800ce46:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800ce48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce4a:	2b00      	cmp	r3, #0
 800ce4c:	d1e3      	bne.n	800ce16 <HAL_UART_IRQHandler+0x5d2>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800ce4e:	687b      	ldr	r3, [r7, #4]
 800ce50:	2220      	movs	r2, #32
 800ce52:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ce56:	687b      	ldr	r3, [r7, #4]
 800ce58:	2200      	movs	r2, #0
 800ce5a:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800ce5c:	687b      	ldr	r3, [r7, #4]
 800ce5e:	2200      	movs	r2, #0
 800ce60:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ce62:	687b      	ldr	r3, [r7, #4]
 800ce64:	681b      	ldr	r3, [r3, #0]
 800ce66:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ce68:	693b      	ldr	r3, [r7, #16]
 800ce6a:	e853 3f00 	ldrex	r3, [r3]
 800ce6e:	60fb      	str	r3, [r7, #12]
   return(result);
 800ce70:	68fb      	ldr	r3, [r7, #12]
 800ce72:	f023 0310 	bic.w	r3, r3, #16
 800ce76:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800ce7a:	687b      	ldr	r3, [r7, #4]
 800ce7c:	681b      	ldr	r3, [r3, #0]
 800ce7e:	461a      	mov	r2, r3
 800ce80:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800ce84:	61fb      	str	r3, [r7, #28]
 800ce86:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ce88:	69b9      	ldr	r1, [r7, #24]
 800ce8a:	69fa      	ldr	r2, [r7, #28]
 800ce8c:	e841 2300 	strex	r3, r2, [r1]
 800ce90:	617b      	str	r3, [r7, #20]
   return(result);
 800ce92:	697b      	ldr	r3, [r7, #20]
 800ce94:	2b00      	cmp	r3, #0
 800ce96:	d1e4      	bne.n	800ce62 <HAL_UART_IRQHandler+0x61e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800ce98:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800ce9c:	4619      	mov	r1, r3
 800ce9e:	6878      	ldr	r0, [r7, #4]
 800cea0:	f000 f878 	bl	800cf94 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800cea4:	e063      	b.n	800cf6e <HAL_UART_IRQHandler+0x72a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800cea6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ceaa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800ceae:	2b00      	cmp	r3, #0
 800ceb0:	d00e      	beq.n	800ced0 <HAL_UART_IRQHandler+0x68c>
 800ceb2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ceb6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800ceba:	2b00      	cmp	r3, #0
 800cebc:	d008      	beq.n	800ced0 <HAL_UART_IRQHandler+0x68c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800cebe:	687b      	ldr	r3, [r7, #4]
 800cec0:	681b      	ldr	r3, [r3, #0]
 800cec2:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800cec6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800cec8:	6878      	ldr	r0, [r7, #4]
 800ceca:	f001 fdbb 	bl	800ea44 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800cece:	e051      	b.n	800cf74 <HAL_UART_IRQHandler+0x730>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800ced0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ced4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ced8:	2b00      	cmp	r3, #0
 800ceda:	d014      	beq.n	800cf06 <HAL_UART_IRQHandler+0x6c2>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800cedc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800cee0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cee4:	2b00      	cmp	r3, #0
 800cee6:	d105      	bne.n	800cef4 <HAL_UART_IRQHandler+0x6b0>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800cee8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ceec:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800cef0:	2b00      	cmp	r3, #0
 800cef2:	d008      	beq.n	800cf06 <HAL_UART_IRQHandler+0x6c2>
  {
    if (huart->TxISR != NULL)
 800cef4:	687b      	ldr	r3, [r7, #4]
 800cef6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800cef8:	2b00      	cmp	r3, #0
 800cefa:	d03a      	beq.n	800cf72 <HAL_UART_IRQHandler+0x72e>
    {
      huart->TxISR(huart);
 800cefc:	687b      	ldr	r3, [r7, #4]
 800cefe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800cf00:	6878      	ldr	r0, [r7, #4]
 800cf02:	4798      	blx	r3
    }
    return;
 800cf04:	e035      	b.n	800cf72 <HAL_UART_IRQHandler+0x72e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800cf06:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800cf0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cf0e:	2b00      	cmp	r3, #0
 800cf10:	d009      	beq.n	800cf26 <HAL_UART_IRQHandler+0x6e2>
 800cf12:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800cf16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cf1a:	2b00      	cmp	r3, #0
 800cf1c:	d003      	beq.n	800cf26 <HAL_UART_IRQHandler+0x6e2>
  {
    UART_EndTransmit_IT(huart);
 800cf1e:	6878      	ldr	r0, [r7, #4]
 800cf20:	f001 f908 	bl	800e134 <UART_EndTransmit_IT>
    return;
 800cf24:	e026      	b.n	800cf74 <HAL_UART_IRQHandler+0x730>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800cf26:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800cf2a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800cf2e:	2b00      	cmp	r3, #0
 800cf30:	d009      	beq.n	800cf46 <HAL_UART_IRQHandler+0x702>
 800cf32:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800cf36:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800cf3a:	2b00      	cmp	r3, #0
 800cf3c:	d003      	beq.n	800cf46 <HAL_UART_IRQHandler+0x702>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800cf3e:	6878      	ldr	r0, [r7, #4]
 800cf40:	f001 fd94 	bl	800ea6c <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800cf44:	e016      	b.n	800cf74 <HAL_UART_IRQHandler+0x730>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800cf46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800cf4a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800cf4e:	2b00      	cmp	r3, #0
 800cf50:	d010      	beq.n	800cf74 <HAL_UART_IRQHandler+0x730>
 800cf52:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800cf56:	2b00      	cmp	r3, #0
 800cf58:	da0c      	bge.n	800cf74 <HAL_UART_IRQHandler+0x730>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800cf5a:	6878      	ldr	r0, [r7, #4]
 800cf5c:	f001 fd7c 	bl	800ea58 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800cf60:	e008      	b.n	800cf74 <HAL_UART_IRQHandler+0x730>
      return;
 800cf62:	bf00      	nop
 800cf64:	e006      	b.n	800cf74 <HAL_UART_IRQHandler+0x730>
    return;
 800cf66:	bf00      	nop
 800cf68:	e004      	b.n	800cf74 <HAL_UART_IRQHandler+0x730>
      return;
 800cf6a:	bf00      	nop
 800cf6c:	e002      	b.n	800cf74 <HAL_UART_IRQHandler+0x730>
      return;
 800cf6e:	bf00      	nop
 800cf70:	e000      	b.n	800cf74 <HAL_UART_IRQHandler+0x730>
    return;
 800cf72:	bf00      	nop
  }
}
 800cf74:	37e8      	adds	r7, #232	; 0xe8
 800cf76:	46bd      	mov	sp, r7
 800cf78:	bd80      	pop	{r7, pc}
 800cf7a:	bf00      	nop
 800cf7c:	effffffe 	.word	0xeffffffe

0800cf80 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800cf80:	b480      	push	{r7}
 800cf82:	b083      	sub	sp, #12
 800cf84:	af00      	add	r7, sp, #0
 800cf86:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800cf88:	bf00      	nop
 800cf8a:	370c      	adds	r7, #12
 800cf8c:	46bd      	mov	sp, r7
 800cf8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf92:	4770      	bx	lr

0800cf94 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800cf94:	b480      	push	{r7}
 800cf96:	b083      	sub	sp, #12
 800cf98:	af00      	add	r7, sp, #0
 800cf9a:	6078      	str	r0, [r7, #4]
 800cf9c:	460b      	mov	r3, r1
 800cf9e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800cfa0:	bf00      	nop
 800cfa2:	370c      	adds	r7, #12
 800cfa4:	46bd      	mov	sp, r7
 800cfa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfaa:	4770      	bx	lr

0800cfac <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800cfac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800cfb0:	b092      	sub	sp, #72	; 0x48
 800cfb2:	af00      	add	r7, sp, #0
 800cfb4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800cfb6:	2300      	movs	r3, #0
 800cfb8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800cfbc:	697b      	ldr	r3, [r7, #20]
 800cfbe:	689a      	ldr	r2, [r3, #8]
 800cfc0:	697b      	ldr	r3, [r7, #20]
 800cfc2:	691b      	ldr	r3, [r3, #16]
 800cfc4:	431a      	orrs	r2, r3
 800cfc6:	697b      	ldr	r3, [r7, #20]
 800cfc8:	695b      	ldr	r3, [r3, #20]
 800cfca:	431a      	orrs	r2, r3
 800cfcc:	697b      	ldr	r3, [r7, #20]
 800cfce:	69db      	ldr	r3, [r3, #28]
 800cfd0:	4313      	orrs	r3, r2
 800cfd2:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800cfd4:	697b      	ldr	r3, [r7, #20]
 800cfd6:	681b      	ldr	r3, [r3, #0]
 800cfd8:	681a      	ldr	r2, [r3, #0]
 800cfda:	4bbe      	ldr	r3, [pc, #760]	; (800d2d4 <UART_SetConfig+0x328>)
 800cfdc:	4013      	ands	r3, r2
 800cfde:	697a      	ldr	r2, [r7, #20]
 800cfe0:	6812      	ldr	r2, [r2, #0]
 800cfe2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800cfe4:	430b      	orrs	r3, r1
 800cfe6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800cfe8:	697b      	ldr	r3, [r7, #20]
 800cfea:	681b      	ldr	r3, [r3, #0]
 800cfec:	685b      	ldr	r3, [r3, #4]
 800cfee:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800cff2:	697b      	ldr	r3, [r7, #20]
 800cff4:	68da      	ldr	r2, [r3, #12]
 800cff6:	697b      	ldr	r3, [r7, #20]
 800cff8:	681b      	ldr	r3, [r3, #0]
 800cffa:	430a      	orrs	r2, r1
 800cffc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800cffe:	697b      	ldr	r3, [r7, #20]
 800d000:	699b      	ldr	r3, [r3, #24]
 800d002:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800d004:	697b      	ldr	r3, [r7, #20]
 800d006:	681b      	ldr	r3, [r3, #0]
 800d008:	4ab3      	ldr	r2, [pc, #716]	; (800d2d8 <UART_SetConfig+0x32c>)
 800d00a:	4293      	cmp	r3, r2
 800d00c:	d004      	beq.n	800d018 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800d00e:	697b      	ldr	r3, [r7, #20]
 800d010:	6a1b      	ldr	r3, [r3, #32]
 800d012:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d014:	4313      	orrs	r3, r2
 800d016:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800d018:	697b      	ldr	r3, [r7, #20]
 800d01a:	681b      	ldr	r3, [r3, #0]
 800d01c:	689a      	ldr	r2, [r3, #8]
 800d01e:	4baf      	ldr	r3, [pc, #700]	; (800d2dc <UART_SetConfig+0x330>)
 800d020:	4013      	ands	r3, r2
 800d022:	697a      	ldr	r2, [r7, #20]
 800d024:	6812      	ldr	r2, [r2, #0]
 800d026:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800d028:	430b      	orrs	r3, r1
 800d02a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800d02c:	697b      	ldr	r3, [r7, #20]
 800d02e:	681b      	ldr	r3, [r3, #0]
 800d030:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d032:	f023 010f 	bic.w	r1, r3, #15
 800d036:	697b      	ldr	r3, [r7, #20]
 800d038:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d03a:	697b      	ldr	r3, [r7, #20]
 800d03c:	681b      	ldr	r3, [r3, #0]
 800d03e:	430a      	orrs	r2, r1
 800d040:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800d042:	697b      	ldr	r3, [r7, #20]
 800d044:	681b      	ldr	r3, [r3, #0]
 800d046:	4aa6      	ldr	r2, [pc, #664]	; (800d2e0 <UART_SetConfig+0x334>)
 800d048:	4293      	cmp	r3, r2
 800d04a:	d177      	bne.n	800d13c <UART_SetConfig+0x190>
 800d04c:	4ba5      	ldr	r3, [pc, #660]	; (800d2e4 <UART_SetConfig+0x338>)
 800d04e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d050:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800d054:	2b28      	cmp	r3, #40	; 0x28
 800d056:	d86d      	bhi.n	800d134 <UART_SetConfig+0x188>
 800d058:	a201      	add	r2, pc, #4	; (adr r2, 800d060 <UART_SetConfig+0xb4>)
 800d05a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d05e:	bf00      	nop
 800d060:	0800d105 	.word	0x0800d105
 800d064:	0800d135 	.word	0x0800d135
 800d068:	0800d135 	.word	0x0800d135
 800d06c:	0800d135 	.word	0x0800d135
 800d070:	0800d135 	.word	0x0800d135
 800d074:	0800d135 	.word	0x0800d135
 800d078:	0800d135 	.word	0x0800d135
 800d07c:	0800d135 	.word	0x0800d135
 800d080:	0800d10d 	.word	0x0800d10d
 800d084:	0800d135 	.word	0x0800d135
 800d088:	0800d135 	.word	0x0800d135
 800d08c:	0800d135 	.word	0x0800d135
 800d090:	0800d135 	.word	0x0800d135
 800d094:	0800d135 	.word	0x0800d135
 800d098:	0800d135 	.word	0x0800d135
 800d09c:	0800d135 	.word	0x0800d135
 800d0a0:	0800d115 	.word	0x0800d115
 800d0a4:	0800d135 	.word	0x0800d135
 800d0a8:	0800d135 	.word	0x0800d135
 800d0ac:	0800d135 	.word	0x0800d135
 800d0b0:	0800d135 	.word	0x0800d135
 800d0b4:	0800d135 	.word	0x0800d135
 800d0b8:	0800d135 	.word	0x0800d135
 800d0bc:	0800d135 	.word	0x0800d135
 800d0c0:	0800d11d 	.word	0x0800d11d
 800d0c4:	0800d135 	.word	0x0800d135
 800d0c8:	0800d135 	.word	0x0800d135
 800d0cc:	0800d135 	.word	0x0800d135
 800d0d0:	0800d135 	.word	0x0800d135
 800d0d4:	0800d135 	.word	0x0800d135
 800d0d8:	0800d135 	.word	0x0800d135
 800d0dc:	0800d135 	.word	0x0800d135
 800d0e0:	0800d125 	.word	0x0800d125
 800d0e4:	0800d135 	.word	0x0800d135
 800d0e8:	0800d135 	.word	0x0800d135
 800d0ec:	0800d135 	.word	0x0800d135
 800d0f0:	0800d135 	.word	0x0800d135
 800d0f4:	0800d135 	.word	0x0800d135
 800d0f8:	0800d135 	.word	0x0800d135
 800d0fc:	0800d135 	.word	0x0800d135
 800d100:	0800d12d 	.word	0x0800d12d
 800d104:	2301      	movs	r3, #1
 800d106:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d10a:	e222      	b.n	800d552 <UART_SetConfig+0x5a6>
 800d10c:	2304      	movs	r3, #4
 800d10e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d112:	e21e      	b.n	800d552 <UART_SetConfig+0x5a6>
 800d114:	2308      	movs	r3, #8
 800d116:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d11a:	e21a      	b.n	800d552 <UART_SetConfig+0x5a6>
 800d11c:	2310      	movs	r3, #16
 800d11e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d122:	e216      	b.n	800d552 <UART_SetConfig+0x5a6>
 800d124:	2320      	movs	r3, #32
 800d126:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d12a:	e212      	b.n	800d552 <UART_SetConfig+0x5a6>
 800d12c:	2340      	movs	r3, #64	; 0x40
 800d12e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d132:	e20e      	b.n	800d552 <UART_SetConfig+0x5a6>
 800d134:	2380      	movs	r3, #128	; 0x80
 800d136:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d13a:	e20a      	b.n	800d552 <UART_SetConfig+0x5a6>
 800d13c:	697b      	ldr	r3, [r7, #20]
 800d13e:	681b      	ldr	r3, [r3, #0]
 800d140:	4a69      	ldr	r2, [pc, #420]	; (800d2e8 <UART_SetConfig+0x33c>)
 800d142:	4293      	cmp	r3, r2
 800d144:	d130      	bne.n	800d1a8 <UART_SetConfig+0x1fc>
 800d146:	4b67      	ldr	r3, [pc, #412]	; (800d2e4 <UART_SetConfig+0x338>)
 800d148:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d14a:	f003 0307 	and.w	r3, r3, #7
 800d14e:	2b05      	cmp	r3, #5
 800d150:	d826      	bhi.n	800d1a0 <UART_SetConfig+0x1f4>
 800d152:	a201      	add	r2, pc, #4	; (adr r2, 800d158 <UART_SetConfig+0x1ac>)
 800d154:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d158:	0800d171 	.word	0x0800d171
 800d15c:	0800d179 	.word	0x0800d179
 800d160:	0800d181 	.word	0x0800d181
 800d164:	0800d189 	.word	0x0800d189
 800d168:	0800d191 	.word	0x0800d191
 800d16c:	0800d199 	.word	0x0800d199
 800d170:	2300      	movs	r3, #0
 800d172:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d176:	e1ec      	b.n	800d552 <UART_SetConfig+0x5a6>
 800d178:	2304      	movs	r3, #4
 800d17a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d17e:	e1e8      	b.n	800d552 <UART_SetConfig+0x5a6>
 800d180:	2308      	movs	r3, #8
 800d182:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d186:	e1e4      	b.n	800d552 <UART_SetConfig+0x5a6>
 800d188:	2310      	movs	r3, #16
 800d18a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d18e:	e1e0      	b.n	800d552 <UART_SetConfig+0x5a6>
 800d190:	2320      	movs	r3, #32
 800d192:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d196:	e1dc      	b.n	800d552 <UART_SetConfig+0x5a6>
 800d198:	2340      	movs	r3, #64	; 0x40
 800d19a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d19e:	e1d8      	b.n	800d552 <UART_SetConfig+0x5a6>
 800d1a0:	2380      	movs	r3, #128	; 0x80
 800d1a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d1a6:	e1d4      	b.n	800d552 <UART_SetConfig+0x5a6>
 800d1a8:	697b      	ldr	r3, [r7, #20]
 800d1aa:	681b      	ldr	r3, [r3, #0]
 800d1ac:	4a4f      	ldr	r2, [pc, #316]	; (800d2ec <UART_SetConfig+0x340>)
 800d1ae:	4293      	cmp	r3, r2
 800d1b0:	d130      	bne.n	800d214 <UART_SetConfig+0x268>
 800d1b2:	4b4c      	ldr	r3, [pc, #304]	; (800d2e4 <UART_SetConfig+0x338>)
 800d1b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d1b6:	f003 0307 	and.w	r3, r3, #7
 800d1ba:	2b05      	cmp	r3, #5
 800d1bc:	d826      	bhi.n	800d20c <UART_SetConfig+0x260>
 800d1be:	a201      	add	r2, pc, #4	; (adr r2, 800d1c4 <UART_SetConfig+0x218>)
 800d1c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d1c4:	0800d1dd 	.word	0x0800d1dd
 800d1c8:	0800d1e5 	.word	0x0800d1e5
 800d1cc:	0800d1ed 	.word	0x0800d1ed
 800d1d0:	0800d1f5 	.word	0x0800d1f5
 800d1d4:	0800d1fd 	.word	0x0800d1fd
 800d1d8:	0800d205 	.word	0x0800d205
 800d1dc:	2300      	movs	r3, #0
 800d1de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d1e2:	e1b6      	b.n	800d552 <UART_SetConfig+0x5a6>
 800d1e4:	2304      	movs	r3, #4
 800d1e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d1ea:	e1b2      	b.n	800d552 <UART_SetConfig+0x5a6>
 800d1ec:	2308      	movs	r3, #8
 800d1ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d1f2:	e1ae      	b.n	800d552 <UART_SetConfig+0x5a6>
 800d1f4:	2310      	movs	r3, #16
 800d1f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d1fa:	e1aa      	b.n	800d552 <UART_SetConfig+0x5a6>
 800d1fc:	2320      	movs	r3, #32
 800d1fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d202:	e1a6      	b.n	800d552 <UART_SetConfig+0x5a6>
 800d204:	2340      	movs	r3, #64	; 0x40
 800d206:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d20a:	e1a2      	b.n	800d552 <UART_SetConfig+0x5a6>
 800d20c:	2380      	movs	r3, #128	; 0x80
 800d20e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d212:	e19e      	b.n	800d552 <UART_SetConfig+0x5a6>
 800d214:	697b      	ldr	r3, [r7, #20]
 800d216:	681b      	ldr	r3, [r3, #0]
 800d218:	4a35      	ldr	r2, [pc, #212]	; (800d2f0 <UART_SetConfig+0x344>)
 800d21a:	4293      	cmp	r3, r2
 800d21c:	d130      	bne.n	800d280 <UART_SetConfig+0x2d4>
 800d21e:	4b31      	ldr	r3, [pc, #196]	; (800d2e4 <UART_SetConfig+0x338>)
 800d220:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d222:	f003 0307 	and.w	r3, r3, #7
 800d226:	2b05      	cmp	r3, #5
 800d228:	d826      	bhi.n	800d278 <UART_SetConfig+0x2cc>
 800d22a:	a201      	add	r2, pc, #4	; (adr r2, 800d230 <UART_SetConfig+0x284>)
 800d22c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d230:	0800d249 	.word	0x0800d249
 800d234:	0800d251 	.word	0x0800d251
 800d238:	0800d259 	.word	0x0800d259
 800d23c:	0800d261 	.word	0x0800d261
 800d240:	0800d269 	.word	0x0800d269
 800d244:	0800d271 	.word	0x0800d271
 800d248:	2300      	movs	r3, #0
 800d24a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d24e:	e180      	b.n	800d552 <UART_SetConfig+0x5a6>
 800d250:	2304      	movs	r3, #4
 800d252:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d256:	e17c      	b.n	800d552 <UART_SetConfig+0x5a6>
 800d258:	2308      	movs	r3, #8
 800d25a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d25e:	e178      	b.n	800d552 <UART_SetConfig+0x5a6>
 800d260:	2310      	movs	r3, #16
 800d262:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d266:	e174      	b.n	800d552 <UART_SetConfig+0x5a6>
 800d268:	2320      	movs	r3, #32
 800d26a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d26e:	e170      	b.n	800d552 <UART_SetConfig+0x5a6>
 800d270:	2340      	movs	r3, #64	; 0x40
 800d272:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d276:	e16c      	b.n	800d552 <UART_SetConfig+0x5a6>
 800d278:	2380      	movs	r3, #128	; 0x80
 800d27a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d27e:	e168      	b.n	800d552 <UART_SetConfig+0x5a6>
 800d280:	697b      	ldr	r3, [r7, #20]
 800d282:	681b      	ldr	r3, [r3, #0]
 800d284:	4a1b      	ldr	r2, [pc, #108]	; (800d2f4 <UART_SetConfig+0x348>)
 800d286:	4293      	cmp	r3, r2
 800d288:	d142      	bne.n	800d310 <UART_SetConfig+0x364>
 800d28a:	4b16      	ldr	r3, [pc, #88]	; (800d2e4 <UART_SetConfig+0x338>)
 800d28c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d28e:	f003 0307 	and.w	r3, r3, #7
 800d292:	2b05      	cmp	r3, #5
 800d294:	d838      	bhi.n	800d308 <UART_SetConfig+0x35c>
 800d296:	a201      	add	r2, pc, #4	; (adr r2, 800d29c <UART_SetConfig+0x2f0>)
 800d298:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d29c:	0800d2b5 	.word	0x0800d2b5
 800d2a0:	0800d2bd 	.word	0x0800d2bd
 800d2a4:	0800d2c5 	.word	0x0800d2c5
 800d2a8:	0800d2cd 	.word	0x0800d2cd
 800d2ac:	0800d2f9 	.word	0x0800d2f9
 800d2b0:	0800d301 	.word	0x0800d301
 800d2b4:	2300      	movs	r3, #0
 800d2b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d2ba:	e14a      	b.n	800d552 <UART_SetConfig+0x5a6>
 800d2bc:	2304      	movs	r3, #4
 800d2be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d2c2:	e146      	b.n	800d552 <UART_SetConfig+0x5a6>
 800d2c4:	2308      	movs	r3, #8
 800d2c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d2ca:	e142      	b.n	800d552 <UART_SetConfig+0x5a6>
 800d2cc:	2310      	movs	r3, #16
 800d2ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d2d2:	e13e      	b.n	800d552 <UART_SetConfig+0x5a6>
 800d2d4:	cfff69f3 	.word	0xcfff69f3
 800d2d8:	58000c00 	.word	0x58000c00
 800d2dc:	11fff4ff 	.word	0x11fff4ff
 800d2e0:	40011000 	.word	0x40011000
 800d2e4:	58024400 	.word	0x58024400
 800d2e8:	40004400 	.word	0x40004400
 800d2ec:	40004800 	.word	0x40004800
 800d2f0:	40004c00 	.word	0x40004c00
 800d2f4:	40005000 	.word	0x40005000
 800d2f8:	2320      	movs	r3, #32
 800d2fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d2fe:	e128      	b.n	800d552 <UART_SetConfig+0x5a6>
 800d300:	2340      	movs	r3, #64	; 0x40
 800d302:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d306:	e124      	b.n	800d552 <UART_SetConfig+0x5a6>
 800d308:	2380      	movs	r3, #128	; 0x80
 800d30a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d30e:	e120      	b.n	800d552 <UART_SetConfig+0x5a6>
 800d310:	697b      	ldr	r3, [r7, #20]
 800d312:	681b      	ldr	r3, [r3, #0]
 800d314:	4acb      	ldr	r2, [pc, #812]	; (800d644 <UART_SetConfig+0x698>)
 800d316:	4293      	cmp	r3, r2
 800d318:	d176      	bne.n	800d408 <UART_SetConfig+0x45c>
 800d31a:	4bcb      	ldr	r3, [pc, #812]	; (800d648 <UART_SetConfig+0x69c>)
 800d31c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d31e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800d322:	2b28      	cmp	r3, #40	; 0x28
 800d324:	d86c      	bhi.n	800d400 <UART_SetConfig+0x454>
 800d326:	a201      	add	r2, pc, #4	; (adr r2, 800d32c <UART_SetConfig+0x380>)
 800d328:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d32c:	0800d3d1 	.word	0x0800d3d1
 800d330:	0800d401 	.word	0x0800d401
 800d334:	0800d401 	.word	0x0800d401
 800d338:	0800d401 	.word	0x0800d401
 800d33c:	0800d401 	.word	0x0800d401
 800d340:	0800d401 	.word	0x0800d401
 800d344:	0800d401 	.word	0x0800d401
 800d348:	0800d401 	.word	0x0800d401
 800d34c:	0800d3d9 	.word	0x0800d3d9
 800d350:	0800d401 	.word	0x0800d401
 800d354:	0800d401 	.word	0x0800d401
 800d358:	0800d401 	.word	0x0800d401
 800d35c:	0800d401 	.word	0x0800d401
 800d360:	0800d401 	.word	0x0800d401
 800d364:	0800d401 	.word	0x0800d401
 800d368:	0800d401 	.word	0x0800d401
 800d36c:	0800d3e1 	.word	0x0800d3e1
 800d370:	0800d401 	.word	0x0800d401
 800d374:	0800d401 	.word	0x0800d401
 800d378:	0800d401 	.word	0x0800d401
 800d37c:	0800d401 	.word	0x0800d401
 800d380:	0800d401 	.word	0x0800d401
 800d384:	0800d401 	.word	0x0800d401
 800d388:	0800d401 	.word	0x0800d401
 800d38c:	0800d3e9 	.word	0x0800d3e9
 800d390:	0800d401 	.word	0x0800d401
 800d394:	0800d401 	.word	0x0800d401
 800d398:	0800d401 	.word	0x0800d401
 800d39c:	0800d401 	.word	0x0800d401
 800d3a0:	0800d401 	.word	0x0800d401
 800d3a4:	0800d401 	.word	0x0800d401
 800d3a8:	0800d401 	.word	0x0800d401
 800d3ac:	0800d3f1 	.word	0x0800d3f1
 800d3b0:	0800d401 	.word	0x0800d401
 800d3b4:	0800d401 	.word	0x0800d401
 800d3b8:	0800d401 	.word	0x0800d401
 800d3bc:	0800d401 	.word	0x0800d401
 800d3c0:	0800d401 	.word	0x0800d401
 800d3c4:	0800d401 	.word	0x0800d401
 800d3c8:	0800d401 	.word	0x0800d401
 800d3cc:	0800d3f9 	.word	0x0800d3f9
 800d3d0:	2301      	movs	r3, #1
 800d3d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d3d6:	e0bc      	b.n	800d552 <UART_SetConfig+0x5a6>
 800d3d8:	2304      	movs	r3, #4
 800d3da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d3de:	e0b8      	b.n	800d552 <UART_SetConfig+0x5a6>
 800d3e0:	2308      	movs	r3, #8
 800d3e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d3e6:	e0b4      	b.n	800d552 <UART_SetConfig+0x5a6>
 800d3e8:	2310      	movs	r3, #16
 800d3ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d3ee:	e0b0      	b.n	800d552 <UART_SetConfig+0x5a6>
 800d3f0:	2320      	movs	r3, #32
 800d3f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d3f6:	e0ac      	b.n	800d552 <UART_SetConfig+0x5a6>
 800d3f8:	2340      	movs	r3, #64	; 0x40
 800d3fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d3fe:	e0a8      	b.n	800d552 <UART_SetConfig+0x5a6>
 800d400:	2380      	movs	r3, #128	; 0x80
 800d402:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d406:	e0a4      	b.n	800d552 <UART_SetConfig+0x5a6>
 800d408:	697b      	ldr	r3, [r7, #20]
 800d40a:	681b      	ldr	r3, [r3, #0]
 800d40c:	4a8f      	ldr	r2, [pc, #572]	; (800d64c <UART_SetConfig+0x6a0>)
 800d40e:	4293      	cmp	r3, r2
 800d410:	d130      	bne.n	800d474 <UART_SetConfig+0x4c8>
 800d412:	4b8d      	ldr	r3, [pc, #564]	; (800d648 <UART_SetConfig+0x69c>)
 800d414:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d416:	f003 0307 	and.w	r3, r3, #7
 800d41a:	2b05      	cmp	r3, #5
 800d41c:	d826      	bhi.n	800d46c <UART_SetConfig+0x4c0>
 800d41e:	a201      	add	r2, pc, #4	; (adr r2, 800d424 <UART_SetConfig+0x478>)
 800d420:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d424:	0800d43d 	.word	0x0800d43d
 800d428:	0800d445 	.word	0x0800d445
 800d42c:	0800d44d 	.word	0x0800d44d
 800d430:	0800d455 	.word	0x0800d455
 800d434:	0800d45d 	.word	0x0800d45d
 800d438:	0800d465 	.word	0x0800d465
 800d43c:	2300      	movs	r3, #0
 800d43e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d442:	e086      	b.n	800d552 <UART_SetConfig+0x5a6>
 800d444:	2304      	movs	r3, #4
 800d446:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d44a:	e082      	b.n	800d552 <UART_SetConfig+0x5a6>
 800d44c:	2308      	movs	r3, #8
 800d44e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d452:	e07e      	b.n	800d552 <UART_SetConfig+0x5a6>
 800d454:	2310      	movs	r3, #16
 800d456:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d45a:	e07a      	b.n	800d552 <UART_SetConfig+0x5a6>
 800d45c:	2320      	movs	r3, #32
 800d45e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d462:	e076      	b.n	800d552 <UART_SetConfig+0x5a6>
 800d464:	2340      	movs	r3, #64	; 0x40
 800d466:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d46a:	e072      	b.n	800d552 <UART_SetConfig+0x5a6>
 800d46c:	2380      	movs	r3, #128	; 0x80
 800d46e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d472:	e06e      	b.n	800d552 <UART_SetConfig+0x5a6>
 800d474:	697b      	ldr	r3, [r7, #20]
 800d476:	681b      	ldr	r3, [r3, #0]
 800d478:	4a75      	ldr	r2, [pc, #468]	; (800d650 <UART_SetConfig+0x6a4>)
 800d47a:	4293      	cmp	r3, r2
 800d47c:	d130      	bne.n	800d4e0 <UART_SetConfig+0x534>
 800d47e:	4b72      	ldr	r3, [pc, #456]	; (800d648 <UART_SetConfig+0x69c>)
 800d480:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d482:	f003 0307 	and.w	r3, r3, #7
 800d486:	2b05      	cmp	r3, #5
 800d488:	d826      	bhi.n	800d4d8 <UART_SetConfig+0x52c>
 800d48a:	a201      	add	r2, pc, #4	; (adr r2, 800d490 <UART_SetConfig+0x4e4>)
 800d48c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d490:	0800d4a9 	.word	0x0800d4a9
 800d494:	0800d4b1 	.word	0x0800d4b1
 800d498:	0800d4b9 	.word	0x0800d4b9
 800d49c:	0800d4c1 	.word	0x0800d4c1
 800d4a0:	0800d4c9 	.word	0x0800d4c9
 800d4a4:	0800d4d1 	.word	0x0800d4d1
 800d4a8:	2300      	movs	r3, #0
 800d4aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d4ae:	e050      	b.n	800d552 <UART_SetConfig+0x5a6>
 800d4b0:	2304      	movs	r3, #4
 800d4b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d4b6:	e04c      	b.n	800d552 <UART_SetConfig+0x5a6>
 800d4b8:	2308      	movs	r3, #8
 800d4ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d4be:	e048      	b.n	800d552 <UART_SetConfig+0x5a6>
 800d4c0:	2310      	movs	r3, #16
 800d4c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d4c6:	e044      	b.n	800d552 <UART_SetConfig+0x5a6>
 800d4c8:	2320      	movs	r3, #32
 800d4ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d4ce:	e040      	b.n	800d552 <UART_SetConfig+0x5a6>
 800d4d0:	2340      	movs	r3, #64	; 0x40
 800d4d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d4d6:	e03c      	b.n	800d552 <UART_SetConfig+0x5a6>
 800d4d8:	2380      	movs	r3, #128	; 0x80
 800d4da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d4de:	e038      	b.n	800d552 <UART_SetConfig+0x5a6>
 800d4e0:	697b      	ldr	r3, [r7, #20]
 800d4e2:	681b      	ldr	r3, [r3, #0]
 800d4e4:	4a5b      	ldr	r2, [pc, #364]	; (800d654 <UART_SetConfig+0x6a8>)
 800d4e6:	4293      	cmp	r3, r2
 800d4e8:	d130      	bne.n	800d54c <UART_SetConfig+0x5a0>
 800d4ea:	4b57      	ldr	r3, [pc, #348]	; (800d648 <UART_SetConfig+0x69c>)
 800d4ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d4ee:	f003 0307 	and.w	r3, r3, #7
 800d4f2:	2b05      	cmp	r3, #5
 800d4f4:	d826      	bhi.n	800d544 <UART_SetConfig+0x598>
 800d4f6:	a201      	add	r2, pc, #4	; (adr r2, 800d4fc <UART_SetConfig+0x550>)
 800d4f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d4fc:	0800d515 	.word	0x0800d515
 800d500:	0800d51d 	.word	0x0800d51d
 800d504:	0800d525 	.word	0x0800d525
 800d508:	0800d52d 	.word	0x0800d52d
 800d50c:	0800d535 	.word	0x0800d535
 800d510:	0800d53d 	.word	0x0800d53d
 800d514:	2302      	movs	r3, #2
 800d516:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d51a:	e01a      	b.n	800d552 <UART_SetConfig+0x5a6>
 800d51c:	2304      	movs	r3, #4
 800d51e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d522:	e016      	b.n	800d552 <UART_SetConfig+0x5a6>
 800d524:	2308      	movs	r3, #8
 800d526:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d52a:	e012      	b.n	800d552 <UART_SetConfig+0x5a6>
 800d52c:	2310      	movs	r3, #16
 800d52e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d532:	e00e      	b.n	800d552 <UART_SetConfig+0x5a6>
 800d534:	2320      	movs	r3, #32
 800d536:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d53a:	e00a      	b.n	800d552 <UART_SetConfig+0x5a6>
 800d53c:	2340      	movs	r3, #64	; 0x40
 800d53e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d542:	e006      	b.n	800d552 <UART_SetConfig+0x5a6>
 800d544:	2380      	movs	r3, #128	; 0x80
 800d546:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d54a:	e002      	b.n	800d552 <UART_SetConfig+0x5a6>
 800d54c:	2380      	movs	r3, #128	; 0x80
 800d54e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800d552:	697b      	ldr	r3, [r7, #20]
 800d554:	681b      	ldr	r3, [r3, #0]
 800d556:	4a3f      	ldr	r2, [pc, #252]	; (800d654 <UART_SetConfig+0x6a8>)
 800d558:	4293      	cmp	r3, r2
 800d55a:	f040 80f8 	bne.w	800d74e <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800d55e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800d562:	2b20      	cmp	r3, #32
 800d564:	dc46      	bgt.n	800d5f4 <UART_SetConfig+0x648>
 800d566:	2b02      	cmp	r3, #2
 800d568:	f2c0 8082 	blt.w	800d670 <UART_SetConfig+0x6c4>
 800d56c:	3b02      	subs	r3, #2
 800d56e:	2b1e      	cmp	r3, #30
 800d570:	d87e      	bhi.n	800d670 <UART_SetConfig+0x6c4>
 800d572:	a201      	add	r2, pc, #4	; (adr r2, 800d578 <UART_SetConfig+0x5cc>)
 800d574:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d578:	0800d5fb 	.word	0x0800d5fb
 800d57c:	0800d671 	.word	0x0800d671
 800d580:	0800d603 	.word	0x0800d603
 800d584:	0800d671 	.word	0x0800d671
 800d588:	0800d671 	.word	0x0800d671
 800d58c:	0800d671 	.word	0x0800d671
 800d590:	0800d613 	.word	0x0800d613
 800d594:	0800d671 	.word	0x0800d671
 800d598:	0800d671 	.word	0x0800d671
 800d59c:	0800d671 	.word	0x0800d671
 800d5a0:	0800d671 	.word	0x0800d671
 800d5a4:	0800d671 	.word	0x0800d671
 800d5a8:	0800d671 	.word	0x0800d671
 800d5ac:	0800d671 	.word	0x0800d671
 800d5b0:	0800d623 	.word	0x0800d623
 800d5b4:	0800d671 	.word	0x0800d671
 800d5b8:	0800d671 	.word	0x0800d671
 800d5bc:	0800d671 	.word	0x0800d671
 800d5c0:	0800d671 	.word	0x0800d671
 800d5c4:	0800d671 	.word	0x0800d671
 800d5c8:	0800d671 	.word	0x0800d671
 800d5cc:	0800d671 	.word	0x0800d671
 800d5d0:	0800d671 	.word	0x0800d671
 800d5d4:	0800d671 	.word	0x0800d671
 800d5d8:	0800d671 	.word	0x0800d671
 800d5dc:	0800d671 	.word	0x0800d671
 800d5e0:	0800d671 	.word	0x0800d671
 800d5e4:	0800d671 	.word	0x0800d671
 800d5e8:	0800d671 	.word	0x0800d671
 800d5ec:	0800d671 	.word	0x0800d671
 800d5f0:	0800d663 	.word	0x0800d663
 800d5f4:	2b40      	cmp	r3, #64	; 0x40
 800d5f6:	d037      	beq.n	800d668 <UART_SetConfig+0x6bc>
 800d5f8:	e03a      	b.n	800d670 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800d5fa:	f7fc fbc9 	bl	8009d90 <HAL_RCCEx_GetD3PCLK1Freq>
 800d5fe:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800d600:	e03c      	b.n	800d67c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d602:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800d606:	4618      	mov	r0, r3
 800d608:	f7fc fbd8 	bl	8009dbc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800d60c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d60e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d610:	e034      	b.n	800d67c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d612:	f107 0318 	add.w	r3, r7, #24
 800d616:	4618      	mov	r0, r3
 800d618:	f7fc fd24 	bl	800a064 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800d61c:	69fb      	ldr	r3, [r7, #28]
 800d61e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d620:	e02c      	b.n	800d67c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d622:	4b09      	ldr	r3, [pc, #36]	; (800d648 <UART_SetConfig+0x69c>)
 800d624:	681b      	ldr	r3, [r3, #0]
 800d626:	f003 0320 	and.w	r3, r3, #32
 800d62a:	2b00      	cmp	r3, #0
 800d62c:	d016      	beq.n	800d65c <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800d62e:	4b06      	ldr	r3, [pc, #24]	; (800d648 <UART_SetConfig+0x69c>)
 800d630:	681b      	ldr	r3, [r3, #0]
 800d632:	08db      	lsrs	r3, r3, #3
 800d634:	f003 0303 	and.w	r3, r3, #3
 800d638:	4a07      	ldr	r2, [pc, #28]	; (800d658 <UART_SetConfig+0x6ac>)
 800d63a:	fa22 f303 	lsr.w	r3, r2, r3
 800d63e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800d640:	e01c      	b.n	800d67c <UART_SetConfig+0x6d0>
 800d642:	bf00      	nop
 800d644:	40011400 	.word	0x40011400
 800d648:	58024400 	.word	0x58024400
 800d64c:	40007800 	.word	0x40007800
 800d650:	40007c00 	.word	0x40007c00
 800d654:	58000c00 	.word	0x58000c00
 800d658:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800d65c:	4b9d      	ldr	r3, [pc, #628]	; (800d8d4 <UART_SetConfig+0x928>)
 800d65e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d660:	e00c      	b.n	800d67c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800d662:	4b9d      	ldr	r3, [pc, #628]	; (800d8d8 <UART_SetConfig+0x92c>)
 800d664:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d666:	e009      	b.n	800d67c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d668:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800d66c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d66e:	e005      	b.n	800d67c <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800d670:	2300      	movs	r3, #0
 800d672:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800d674:	2301      	movs	r3, #1
 800d676:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800d67a:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800d67c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d67e:	2b00      	cmp	r3, #0
 800d680:	f000 81de 	beq.w	800da40 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800d684:	697b      	ldr	r3, [r7, #20]
 800d686:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d688:	4a94      	ldr	r2, [pc, #592]	; (800d8dc <UART_SetConfig+0x930>)
 800d68a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d68e:	461a      	mov	r2, r3
 800d690:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d692:	fbb3 f3f2 	udiv	r3, r3, r2
 800d696:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800d698:	697b      	ldr	r3, [r7, #20]
 800d69a:	685a      	ldr	r2, [r3, #4]
 800d69c:	4613      	mov	r3, r2
 800d69e:	005b      	lsls	r3, r3, #1
 800d6a0:	4413      	add	r3, r2
 800d6a2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d6a4:	429a      	cmp	r2, r3
 800d6a6:	d305      	bcc.n	800d6b4 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800d6a8:	697b      	ldr	r3, [r7, #20]
 800d6aa:	685b      	ldr	r3, [r3, #4]
 800d6ac:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800d6ae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d6b0:	429a      	cmp	r2, r3
 800d6b2:	d903      	bls.n	800d6bc <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800d6b4:	2301      	movs	r3, #1
 800d6b6:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800d6ba:	e1c1      	b.n	800da40 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d6bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d6be:	2200      	movs	r2, #0
 800d6c0:	60bb      	str	r3, [r7, #8]
 800d6c2:	60fa      	str	r2, [r7, #12]
 800d6c4:	697b      	ldr	r3, [r7, #20]
 800d6c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d6c8:	4a84      	ldr	r2, [pc, #528]	; (800d8dc <UART_SetConfig+0x930>)
 800d6ca:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d6ce:	b29b      	uxth	r3, r3
 800d6d0:	2200      	movs	r2, #0
 800d6d2:	603b      	str	r3, [r7, #0]
 800d6d4:	607a      	str	r2, [r7, #4]
 800d6d6:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d6da:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800d6de:	f7f3 f813 	bl	8000708 <__aeabi_uldivmod>
 800d6e2:	4602      	mov	r2, r0
 800d6e4:	460b      	mov	r3, r1
 800d6e6:	4610      	mov	r0, r2
 800d6e8:	4619      	mov	r1, r3
 800d6ea:	f04f 0200 	mov.w	r2, #0
 800d6ee:	f04f 0300 	mov.w	r3, #0
 800d6f2:	020b      	lsls	r3, r1, #8
 800d6f4:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800d6f8:	0202      	lsls	r2, r0, #8
 800d6fa:	6979      	ldr	r1, [r7, #20]
 800d6fc:	6849      	ldr	r1, [r1, #4]
 800d6fe:	0849      	lsrs	r1, r1, #1
 800d700:	2000      	movs	r0, #0
 800d702:	460c      	mov	r4, r1
 800d704:	4605      	mov	r5, r0
 800d706:	eb12 0804 	adds.w	r8, r2, r4
 800d70a:	eb43 0905 	adc.w	r9, r3, r5
 800d70e:	697b      	ldr	r3, [r7, #20]
 800d710:	685b      	ldr	r3, [r3, #4]
 800d712:	2200      	movs	r2, #0
 800d714:	469a      	mov	sl, r3
 800d716:	4693      	mov	fp, r2
 800d718:	4652      	mov	r2, sl
 800d71a:	465b      	mov	r3, fp
 800d71c:	4640      	mov	r0, r8
 800d71e:	4649      	mov	r1, r9
 800d720:	f7f2 fff2 	bl	8000708 <__aeabi_uldivmod>
 800d724:	4602      	mov	r2, r0
 800d726:	460b      	mov	r3, r1
 800d728:	4613      	mov	r3, r2
 800d72a:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800d72c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d72e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800d732:	d308      	bcc.n	800d746 <UART_SetConfig+0x79a>
 800d734:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d736:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d73a:	d204      	bcs.n	800d746 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800d73c:	697b      	ldr	r3, [r7, #20]
 800d73e:	681b      	ldr	r3, [r3, #0]
 800d740:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d742:	60da      	str	r2, [r3, #12]
 800d744:	e17c      	b.n	800da40 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800d746:	2301      	movs	r3, #1
 800d748:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800d74c:	e178      	b.n	800da40 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800d74e:	697b      	ldr	r3, [r7, #20]
 800d750:	69db      	ldr	r3, [r3, #28]
 800d752:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d756:	f040 80c5 	bne.w	800d8e4 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800d75a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800d75e:	2b20      	cmp	r3, #32
 800d760:	dc48      	bgt.n	800d7f4 <UART_SetConfig+0x848>
 800d762:	2b00      	cmp	r3, #0
 800d764:	db7b      	blt.n	800d85e <UART_SetConfig+0x8b2>
 800d766:	2b20      	cmp	r3, #32
 800d768:	d879      	bhi.n	800d85e <UART_SetConfig+0x8b2>
 800d76a:	a201      	add	r2, pc, #4	; (adr r2, 800d770 <UART_SetConfig+0x7c4>)
 800d76c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d770:	0800d7fb 	.word	0x0800d7fb
 800d774:	0800d803 	.word	0x0800d803
 800d778:	0800d85f 	.word	0x0800d85f
 800d77c:	0800d85f 	.word	0x0800d85f
 800d780:	0800d80b 	.word	0x0800d80b
 800d784:	0800d85f 	.word	0x0800d85f
 800d788:	0800d85f 	.word	0x0800d85f
 800d78c:	0800d85f 	.word	0x0800d85f
 800d790:	0800d81b 	.word	0x0800d81b
 800d794:	0800d85f 	.word	0x0800d85f
 800d798:	0800d85f 	.word	0x0800d85f
 800d79c:	0800d85f 	.word	0x0800d85f
 800d7a0:	0800d85f 	.word	0x0800d85f
 800d7a4:	0800d85f 	.word	0x0800d85f
 800d7a8:	0800d85f 	.word	0x0800d85f
 800d7ac:	0800d85f 	.word	0x0800d85f
 800d7b0:	0800d82b 	.word	0x0800d82b
 800d7b4:	0800d85f 	.word	0x0800d85f
 800d7b8:	0800d85f 	.word	0x0800d85f
 800d7bc:	0800d85f 	.word	0x0800d85f
 800d7c0:	0800d85f 	.word	0x0800d85f
 800d7c4:	0800d85f 	.word	0x0800d85f
 800d7c8:	0800d85f 	.word	0x0800d85f
 800d7cc:	0800d85f 	.word	0x0800d85f
 800d7d0:	0800d85f 	.word	0x0800d85f
 800d7d4:	0800d85f 	.word	0x0800d85f
 800d7d8:	0800d85f 	.word	0x0800d85f
 800d7dc:	0800d85f 	.word	0x0800d85f
 800d7e0:	0800d85f 	.word	0x0800d85f
 800d7e4:	0800d85f 	.word	0x0800d85f
 800d7e8:	0800d85f 	.word	0x0800d85f
 800d7ec:	0800d85f 	.word	0x0800d85f
 800d7f0:	0800d851 	.word	0x0800d851
 800d7f4:	2b40      	cmp	r3, #64	; 0x40
 800d7f6:	d02e      	beq.n	800d856 <UART_SetConfig+0x8aa>
 800d7f8:	e031      	b.n	800d85e <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800d7fa:	f7fb fb57 	bl	8008eac <HAL_RCC_GetPCLK1Freq>
 800d7fe:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800d800:	e033      	b.n	800d86a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800d802:	f7fb fb69 	bl	8008ed8 <HAL_RCC_GetPCLK2Freq>
 800d806:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800d808:	e02f      	b.n	800d86a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d80a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800d80e:	4618      	mov	r0, r3
 800d810:	f7fc fad4 	bl	8009dbc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800d814:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d816:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d818:	e027      	b.n	800d86a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d81a:	f107 0318 	add.w	r3, r7, #24
 800d81e:	4618      	mov	r0, r3
 800d820:	f7fc fc20 	bl	800a064 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800d824:	69fb      	ldr	r3, [r7, #28]
 800d826:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d828:	e01f      	b.n	800d86a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d82a:	4b2d      	ldr	r3, [pc, #180]	; (800d8e0 <UART_SetConfig+0x934>)
 800d82c:	681b      	ldr	r3, [r3, #0]
 800d82e:	f003 0320 	and.w	r3, r3, #32
 800d832:	2b00      	cmp	r3, #0
 800d834:	d009      	beq.n	800d84a <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800d836:	4b2a      	ldr	r3, [pc, #168]	; (800d8e0 <UART_SetConfig+0x934>)
 800d838:	681b      	ldr	r3, [r3, #0]
 800d83a:	08db      	lsrs	r3, r3, #3
 800d83c:	f003 0303 	and.w	r3, r3, #3
 800d840:	4a24      	ldr	r2, [pc, #144]	; (800d8d4 <UART_SetConfig+0x928>)
 800d842:	fa22 f303 	lsr.w	r3, r2, r3
 800d846:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800d848:	e00f      	b.n	800d86a <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800d84a:	4b22      	ldr	r3, [pc, #136]	; (800d8d4 <UART_SetConfig+0x928>)
 800d84c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d84e:	e00c      	b.n	800d86a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800d850:	4b21      	ldr	r3, [pc, #132]	; (800d8d8 <UART_SetConfig+0x92c>)
 800d852:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d854:	e009      	b.n	800d86a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d856:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800d85a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d85c:	e005      	b.n	800d86a <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800d85e:	2300      	movs	r3, #0
 800d860:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800d862:	2301      	movs	r3, #1
 800d864:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800d868:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800d86a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d86c:	2b00      	cmp	r3, #0
 800d86e:	f000 80e7 	beq.w	800da40 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d872:	697b      	ldr	r3, [r7, #20]
 800d874:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d876:	4a19      	ldr	r2, [pc, #100]	; (800d8dc <UART_SetConfig+0x930>)
 800d878:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d87c:	461a      	mov	r2, r3
 800d87e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d880:	fbb3 f3f2 	udiv	r3, r3, r2
 800d884:	005a      	lsls	r2, r3, #1
 800d886:	697b      	ldr	r3, [r7, #20]
 800d888:	685b      	ldr	r3, [r3, #4]
 800d88a:	085b      	lsrs	r3, r3, #1
 800d88c:	441a      	add	r2, r3
 800d88e:	697b      	ldr	r3, [r7, #20]
 800d890:	685b      	ldr	r3, [r3, #4]
 800d892:	fbb2 f3f3 	udiv	r3, r2, r3
 800d896:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800d898:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d89a:	2b0f      	cmp	r3, #15
 800d89c:	d916      	bls.n	800d8cc <UART_SetConfig+0x920>
 800d89e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d8a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d8a4:	d212      	bcs.n	800d8cc <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800d8a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d8a8:	b29b      	uxth	r3, r3
 800d8aa:	f023 030f 	bic.w	r3, r3, #15
 800d8ae:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800d8b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d8b2:	085b      	lsrs	r3, r3, #1
 800d8b4:	b29b      	uxth	r3, r3
 800d8b6:	f003 0307 	and.w	r3, r3, #7
 800d8ba:	b29a      	uxth	r2, r3
 800d8bc:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800d8be:	4313      	orrs	r3, r2
 800d8c0:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800d8c2:	697b      	ldr	r3, [r7, #20]
 800d8c4:	681b      	ldr	r3, [r3, #0]
 800d8c6:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800d8c8:	60da      	str	r2, [r3, #12]
 800d8ca:	e0b9      	b.n	800da40 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800d8cc:	2301      	movs	r3, #1
 800d8ce:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800d8d2:	e0b5      	b.n	800da40 <UART_SetConfig+0xa94>
 800d8d4:	03d09000 	.word	0x03d09000
 800d8d8:	003d0900 	.word	0x003d0900
 800d8dc:	080123b0 	.word	0x080123b0
 800d8e0:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800d8e4:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800d8e8:	2b20      	cmp	r3, #32
 800d8ea:	dc49      	bgt.n	800d980 <UART_SetConfig+0x9d4>
 800d8ec:	2b00      	cmp	r3, #0
 800d8ee:	db7c      	blt.n	800d9ea <UART_SetConfig+0xa3e>
 800d8f0:	2b20      	cmp	r3, #32
 800d8f2:	d87a      	bhi.n	800d9ea <UART_SetConfig+0xa3e>
 800d8f4:	a201      	add	r2, pc, #4	; (adr r2, 800d8fc <UART_SetConfig+0x950>)
 800d8f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d8fa:	bf00      	nop
 800d8fc:	0800d987 	.word	0x0800d987
 800d900:	0800d98f 	.word	0x0800d98f
 800d904:	0800d9eb 	.word	0x0800d9eb
 800d908:	0800d9eb 	.word	0x0800d9eb
 800d90c:	0800d997 	.word	0x0800d997
 800d910:	0800d9eb 	.word	0x0800d9eb
 800d914:	0800d9eb 	.word	0x0800d9eb
 800d918:	0800d9eb 	.word	0x0800d9eb
 800d91c:	0800d9a7 	.word	0x0800d9a7
 800d920:	0800d9eb 	.word	0x0800d9eb
 800d924:	0800d9eb 	.word	0x0800d9eb
 800d928:	0800d9eb 	.word	0x0800d9eb
 800d92c:	0800d9eb 	.word	0x0800d9eb
 800d930:	0800d9eb 	.word	0x0800d9eb
 800d934:	0800d9eb 	.word	0x0800d9eb
 800d938:	0800d9eb 	.word	0x0800d9eb
 800d93c:	0800d9b7 	.word	0x0800d9b7
 800d940:	0800d9eb 	.word	0x0800d9eb
 800d944:	0800d9eb 	.word	0x0800d9eb
 800d948:	0800d9eb 	.word	0x0800d9eb
 800d94c:	0800d9eb 	.word	0x0800d9eb
 800d950:	0800d9eb 	.word	0x0800d9eb
 800d954:	0800d9eb 	.word	0x0800d9eb
 800d958:	0800d9eb 	.word	0x0800d9eb
 800d95c:	0800d9eb 	.word	0x0800d9eb
 800d960:	0800d9eb 	.word	0x0800d9eb
 800d964:	0800d9eb 	.word	0x0800d9eb
 800d968:	0800d9eb 	.word	0x0800d9eb
 800d96c:	0800d9eb 	.word	0x0800d9eb
 800d970:	0800d9eb 	.word	0x0800d9eb
 800d974:	0800d9eb 	.word	0x0800d9eb
 800d978:	0800d9eb 	.word	0x0800d9eb
 800d97c:	0800d9dd 	.word	0x0800d9dd
 800d980:	2b40      	cmp	r3, #64	; 0x40
 800d982:	d02e      	beq.n	800d9e2 <UART_SetConfig+0xa36>
 800d984:	e031      	b.n	800d9ea <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800d986:	f7fb fa91 	bl	8008eac <HAL_RCC_GetPCLK1Freq>
 800d98a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800d98c:	e033      	b.n	800d9f6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800d98e:	f7fb faa3 	bl	8008ed8 <HAL_RCC_GetPCLK2Freq>
 800d992:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800d994:	e02f      	b.n	800d9f6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d996:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800d99a:	4618      	mov	r0, r3
 800d99c:	f7fc fa0e 	bl	8009dbc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800d9a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d9a2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d9a4:	e027      	b.n	800d9f6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d9a6:	f107 0318 	add.w	r3, r7, #24
 800d9aa:	4618      	mov	r0, r3
 800d9ac:	f7fc fb5a 	bl	800a064 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800d9b0:	69fb      	ldr	r3, [r7, #28]
 800d9b2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d9b4:	e01f      	b.n	800d9f6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d9b6:	4b2d      	ldr	r3, [pc, #180]	; (800da6c <UART_SetConfig+0xac0>)
 800d9b8:	681b      	ldr	r3, [r3, #0]
 800d9ba:	f003 0320 	and.w	r3, r3, #32
 800d9be:	2b00      	cmp	r3, #0
 800d9c0:	d009      	beq.n	800d9d6 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800d9c2:	4b2a      	ldr	r3, [pc, #168]	; (800da6c <UART_SetConfig+0xac0>)
 800d9c4:	681b      	ldr	r3, [r3, #0]
 800d9c6:	08db      	lsrs	r3, r3, #3
 800d9c8:	f003 0303 	and.w	r3, r3, #3
 800d9cc:	4a28      	ldr	r2, [pc, #160]	; (800da70 <UART_SetConfig+0xac4>)
 800d9ce:	fa22 f303 	lsr.w	r3, r2, r3
 800d9d2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800d9d4:	e00f      	b.n	800d9f6 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800d9d6:	4b26      	ldr	r3, [pc, #152]	; (800da70 <UART_SetConfig+0xac4>)
 800d9d8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d9da:	e00c      	b.n	800d9f6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800d9dc:	4b25      	ldr	r3, [pc, #148]	; (800da74 <UART_SetConfig+0xac8>)
 800d9de:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d9e0:	e009      	b.n	800d9f6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d9e2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800d9e6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d9e8:	e005      	b.n	800d9f6 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800d9ea:	2300      	movs	r3, #0
 800d9ec:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800d9ee:	2301      	movs	r3, #1
 800d9f0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800d9f4:	bf00      	nop
    }

    if (pclk != 0U)
 800d9f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d9f8:	2b00      	cmp	r3, #0
 800d9fa:	d021      	beq.n	800da40 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d9fc:	697b      	ldr	r3, [r7, #20]
 800d9fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800da00:	4a1d      	ldr	r2, [pc, #116]	; (800da78 <UART_SetConfig+0xacc>)
 800da02:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800da06:	461a      	mov	r2, r3
 800da08:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800da0a:	fbb3 f2f2 	udiv	r2, r3, r2
 800da0e:	697b      	ldr	r3, [r7, #20]
 800da10:	685b      	ldr	r3, [r3, #4]
 800da12:	085b      	lsrs	r3, r3, #1
 800da14:	441a      	add	r2, r3
 800da16:	697b      	ldr	r3, [r7, #20]
 800da18:	685b      	ldr	r3, [r3, #4]
 800da1a:	fbb2 f3f3 	udiv	r3, r2, r3
 800da1e:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800da20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800da22:	2b0f      	cmp	r3, #15
 800da24:	d909      	bls.n	800da3a <UART_SetConfig+0xa8e>
 800da26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800da28:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800da2c:	d205      	bcs.n	800da3a <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800da2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800da30:	b29a      	uxth	r2, r3
 800da32:	697b      	ldr	r3, [r7, #20]
 800da34:	681b      	ldr	r3, [r3, #0]
 800da36:	60da      	str	r2, [r3, #12]
 800da38:	e002      	b.n	800da40 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800da3a:	2301      	movs	r3, #1
 800da3c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800da40:	697b      	ldr	r3, [r7, #20]
 800da42:	2201      	movs	r2, #1
 800da44:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800da48:	697b      	ldr	r3, [r7, #20]
 800da4a:	2201      	movs	r2, #1
 800da4c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800da50:	697b      	ldr	r3, [r7, #20]
 800da52:	2200      	movs	r2, #0
 800da54:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800da56:	697b      	ldr	r3, [r7, #20]
 800da58:	2200      	movs	r2, #0
 800da5a:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800da5c:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800da60:	4618      	mov	r0, r3
 800da62:	3748      	adds	r7, #72	; 0x48
 800da64:	46bd      	mov	sp, r7
 800da66:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800da6a:	bf00      	nop
 800da6c:	58024400 	.word	0x58024400
 800da70:	03d09000 	.word	0x03d09000
 800da74:	003d0900 	.word	0x003d0900
 800da78:	080123b0 	.word	0x080123b0

0800da7c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800da7c:	b480      	push	{r7}
 800da7e:	b083      	sub	sp, #12
 800da80:	af00      	add	r7, sp, #0
 800da82:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800da84:	687b      	ldr	r3, [r7, #4]
 800da86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800da88:	f003 0301 	and.w	r3, r3, #1
 800da8c:	2b00      	cmp	r3, #0
 800da8e:	d00a      	beq.n	800daa6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800da90:	687b      	ldr	r3, [r7, #4]
 800da92:	681b      	ldr	r3, [r3, #0]
 800da94:	685b      	ldr	r3, [r3, #4]
 800da96:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800da9a:	687b      	ldr	r3, [r7, #4]
 800da9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800da9e:	687b      	ldr	r3, [r7, #4]
 800daa0:	681b      	ldr	r3, [r3, #0]
 800daa2:	430a      	orrs	r2, r1
 800daa4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800daa6:	687b      	ldr	r3, [r7, #4]
 800daa8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800daaa:	f003 0302 	and.w	r3, r3, #2
 800daae:	2b00      	cmp	r3, #0
 800dab0:	d00a      	beq.n	800dac8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800dab2:	687b      	ldr	r3, [r7, #4]
 800dab4:	681b      	ldr	r3, [r3, #0]
 800dab6:	685b      	ldr	r3, [r3, #4]
 800dab8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800dabc:	687b      	ldr	r3, [r7, #4]
 800dabe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800dac0:	687b      	ldr	r3, [r7, #4]
 800dac2:	681b      	ldr	r3, [r3, #0]
 800dac4:	430a      	orrs	r2, r1
 800dac6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800dac8:	687b      	ldr	r3, [r7, #4]
 800daca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dacc:	f003 0304 	and.w	r3, r3, #4
 800dad0:	2b00      	cmp	r3, #0
 800dad2:	d00a      	beq.n	800daea <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800dad4:	687b      	ldr	r3, [r7, #4]
 800dad6:	681b      	ldr	r3, [r3, #0]
 800dad8:	685b      	ldr	r3, [r3, #4]
 800dada:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800dade:	687b      	ldr	r3, [r7, #4]
 800dae0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800dae2:	687b      	ldr	r3, [r7, #4]
 800dae4:	681b      	ldr	r3, [r3, #0]
 800dae6:	430a      	orrs	r2, r1
 800dae8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800daea:	687b      	ldr	r3, [r7, #4]
 800daec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800daee:	f003 0308 	and.w	r3, r3, #8
 800daf2:	2b00      	cmp	r3, #0
 800daf4:	d00a      	beq.n	800db0c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800daf6:	687b      	ldr	r3, [r7, #4]
 800daf8:	681b      	ldr	r3, [r3, #0]
 800dafa:	685b      	ldr	r3, [r3, #4]
 800dafc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800db00:	687b      	ldr	r3, [r7, #4]
 800db02:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800db04:	687b      	ldr	r3, [r7, #4]
 800db06:	681b      	ldr	r3, [r3, #0]
 800db08:	430a      	orrs	r2, r1
 800db0a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800db0c:	687b      	ldr	r3, [r7, #4]
 800db0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800db10:	f003 0310 	and.w	r3, r3, #16
 800db14:	2b00      	cmp	r3, #0
 800db16:	d00a      	beq.n	800db2e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800db18:	687b      	ldr	r3, [r7, #4]
 800db1a:	681b      	ldr	r3, [r3, #0]
 800db1c:	689b      	ldr	r3, [r3, #8]
 800db1e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800db22:	687b      	ldr	r3, [r7, #4]
 800db24:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800db26:	687b      	ldr	r3, [r7, #4]
 800db28:	681b      	ldr	r3, [r3, #0]
 800db2a:	430a      	orrs	r2, r1
 800db2c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800db2e:	687b      	ldr	r3, [r7, #4]
 800db30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800db32:	f003 0320 	and.w	r3, r3, #32
 800db36:	2b00      	cmp	r3, #0
 800db38:	d00a      	beq.n	800db50 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800db3a:	687b      	ldr	r3, [r7, #4]
 800db3c:	681b      	ldr	r3, [r3, #0]
 800db3e:	689b      	ldr	r3, [r3, #8]
 800db40:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800db44:	687b      	ldr	r3, [r7, #4]
 800db46:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800db48:	687b      	ldr	r3, [r7, #4]
 800db4a:	681b      	ldr	r3, [r3, #0]
 800db4c:	430a      	orrs	r2, r1
 800db4e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800db50:	687b      	ldr	r3, [r7, #4]
 800db52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800db54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800db58:	2b00      	cmp	r3, #0
 800db5a:	d01a      	beq.n	800db92 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800db5c:	687b      	ldr	r3, [r7, #4]
 800db5e:	681b      	ldr	r3, [r3, #0]
 800db60:	685b      	ldr	r3, [r3, #4]
 800db62:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800db66:	687b      	ldr	r3, [r7, #4]
 800db68:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800db6a:	687b      	ldr	r3, [r7, #4]
 800db6c:	681b      	ldr	r3, [r3, #0]
 800db6e:	430a      	orrs	r2, r1
 800db70:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800db72:	687b      	ldr	r3, [r7, #4]
 800db74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800db76:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800db7a:	d10a      	bne.n	800db92 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800db7c:	687b      	ldr	r3, [r7, #4]
 800db7e:	681b      	ldr	r3, [r3, #0]
 800db80:	685b      	ldr	r3, [r3, #4]
 800db82:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800db86:	687b      	ldr	r3, [r7, #4]
 800db88:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800db8a:	687b      	ldr	r3, [r7, #4]
 800db8c:	681b      	ldr	r3, [r3, #0]
 800db8e:	430a      	orrs	r2, r1
 800db90:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800db92:	687b      	ldr	r3, [r7, #4]
 800db94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800db96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800db9a:	2b00      	cmp	r3, #0
 800db9c:	d00a      	beq.n	800dbb4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800db9e:	687b      	ldr	r3, [r7, #4]
 800dba0:	681b      	ldr	r3, [r3, #0]
 800dba2:	685b      	ldr	r3, [r3, #4]
 800dba4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800dba8:	687b      	ldr	r3, [r7, #4]
 800dbaa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800dbac:	687b      	ldr	r3, [r7, #4]
 800dbae:	681b      	ldr	r3, [r3, #0]
 800dbb0:	430a      	orrs	r2, r1
 800dbb2:	605a      	str	r2, [r3, #4]
  }
}
 800dbb4:	bf00      	nop
 800dbb6:	370c      	adds	r7, #12
 800dbb8:	46bd      	mov	sp, r7
 800dbba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbbe:	4770      	bx	lr

0800dbc0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800dbc0:	b580      	push	{r7, lr}
 800dbc2:	b086      	sub	sp, #24
 800dbc4:	af02      	add	r7, sp, #8
 800dbc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800dbc8:	687b      	ldr	r3, [r7, #4]
 800dbca:	2200      	movs	r2, #0
 800dbcc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800dbd0:	f7f9 f8c6 	bl	8006d60 <HAL_GetTick>
 800dbd4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800dbd6:	687b      	ldr	r3, [r7, #4]
 800dbd8:	681b      	ldr	r3, [r3, #0]
 800dbda:	681b      	ldr	r3, [r3, #0]
 800dbdc:	f003 0308 	and.w	r3, r3, #8
 800dbe0:	2b08      	cmp	r3, #8
 800dbe2:	d10e      	bne.n	800dc02 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800dbe4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800dbe8:	9300      	str	r3, [sp, #0]
 800dbea:	68fb      	ldr	r3, [r7, #12]
 800dbec:	2200      	movs	r2, #0
 800dbee:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800dbf2:	6878      	ldr	r0, [r7, #4]
 800dbf4:	f000 f82f 	bl	800dc56 <UART_WaitOnFlagUntilTimeout>
 800dbf8:	4603      	mov	r3, r0
 800dbfa:	2b00      	cmp	r3, #0
 800dbfc:	d001      	beq.n	800dc02 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800dbfe:	2303      	movs	r3, #3
 800dc00:	e025      	b.n	800dc4e <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800dc02:	687b      	ldr	r3, [r7, #4]
 800dc04:	681b      	ldr	r3, [r3, #0]
 800dc06:	681b      	ldr	r3, [r3, #0]
 800dc08:	f003 0304 	and.w	r3, r3, #4
 800dc0c:	2b04      	cmp	r3, #4
 800dc0e:	d10e      	bne.n	800dc2e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800dc10:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800dc14:	9300      	str	r3, [sp, #0]
 800dc16:	68fb      	ldr	r3, [r7, #12]
 800dc18:	2200      	movs	r2, #0
 800dc1a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800dc1e:	6878      	ldr	r0, [r7, #4]
 800dc20:	f000 f819 	bl	800dc56 <UART_WaitOnFlagUntilTimeout>
 800dc24:	4603      	mov	r3, r0
 800dc26:	2b00      	cmp	r3, #0
 800dc28:	d001      	beq.n	800dc2e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800dc2a:	2303      	movs	r3, #3
 800dc2c:	e00f      	b.n	800dc4e <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800dc2e:	687b      	ldr	r3, [r7, #4]
 800dc30:	2220      	movs	r2, #32
 800dc32:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800dc36:	687b      	ldr	r3, [r7, #4]
 800dc38:	2220      	movs	r2, #32
 800dc3a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800dc3e:	687b      	ldr	r3, [r7, #4]
 800dc40:	2200      	movs	r2, #0
 800dc42:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800dc44:	687b      	ldr	r3, [r7, #4]
 800dc46:	2200      	movs	r2, #0
 800dc48:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800dc4c:	2300      	movs	r3, #0
}
 800dc4e:	4618      	mov	r0, r3
 800dc50:	3710      	adds	r7, #16
 800dc52:	46bd      	mov	sp, r7
 800dc54:	bd80      	pop	{r7, pc}

0800dc56 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800dc56:	b580      	push	{r7, lr}
 800dc58:	b09c      	sub	sp, #112	; 0x70
 800dc5a:	af00      	add	r7, sp, #0
 800dc5c:	60f8      	str	r0, [r7, #12]
 800dc5e:	60b9      	str	r1, [r7, #8]
 800dc60:	603b      	str	r3, [r7, #0]
 800dc62:	4613      	mov	r3, r2
 800dc64:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800dc66:	e0a9      	b.n	800ddbc <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800dc68:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800dc6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dc6e:	f000 80a5 	beq.w	800ddbc <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800dc72:	f7f9 f875 	bl	8006d60 <HAL_GetTick>
 800dc76:	4602      	mov	r2, r0
 800dc78:	683b      	ldr	r3, [r7, #0]
 800dc7a:	1ad3      	subs	r3, r2, r3
 800dc7c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800dc7e:	429a      	cmp	r2, r3
 800dc80:	d302      	bcc.n	800dc88 <UART_WaitOnFlagUntilTimeout+0x32>
 800dc82:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800dc84:	2b00      	cmp	r3, #0
 800dc86:	d140      	bne.n	800dd0a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800dc88:	68fb      	ldr	r3, [r7, #12]
 800dc8a:	681b      	ldr	r3, [r3, #0]
 800dc8c:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dc8e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800dc90:	e853 3f00 	ldrex	r3, [r3]
 800dc94:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800dc96:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dc98:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800dc9c:	667b      	str	r3, [r7, #100]	; 0x64
 800dc9e:	68fb      	ldr	r3, [r7, #12]
 800dca0:	681b      	ldr	r3, [r3, #0]
 800dca2:	461a      	mov	r2, r3
 800dca4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800dca6:	65fb      	str	r3, [r7, #92]	; 0x5c
 800dca8:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dcaa:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800dcac:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800dcae:	e841 2300 	strex	r3, r2, [r1]
 800dcb2:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800dcb4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800dcb6:	2b00      	cmp	r3, #0
 800dcb8:	d1e6      	bne.n	800dc88 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800dcba:	68fb      	ldr	r3, [r7, #12]
 800dcbc:	681b      	ldr	r3, [r3, #0]
 800dcbe:	3308      	adds	r3, #8
 800dcc0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dcc2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dcc4:	e853 3f00 	ldrex	r3, [r3]
 800dcc8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800dcca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dccc:	f023 0301 	bic.w	r3, r3, #1
 800dcd0:	663b      	str	r3, [r7, #96]	; 0x60
 800dcd2:	68fb      	ldr	r3, [r7, #12]
 800dcd4:	681b      	ldr	r3, [r3, #0]
 800dcd6:	3308      	adds	r3, #8
 800dcd8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800dcda:	64ba      	str	r2, [r7, #72]	; 0x48
 800dcdc:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dcde:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800dce0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800dce2:	e841 2300 	strex	r3, r2, [r1]
 800dce6:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800dce8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800dcea:	2b00      	cmp	r3, #0
 800dcec:	d1e5      	bne.n	800dcba <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800dcee:	68fb      	ldr	r3, [r7, #12]
 800dcf0:	2220      	movs	r2, #32
 800dcf2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800dcf6:	68fb      	ldr	r3, [r7, #12]
 800dcf8:	2220      	movs	r2, #32
 800dcfa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800dcfe:	68fb      	ldr	r3, [r7, #12]
 800dd00:	2200      	movs	r2, #0
 800dd02:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800dd06:	2303      	movs	r3, #3
 800dd08:	e069      	b.n	800ddde <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800dd0a:	68fb      	ldr	r3, [r7, #12]
 800dd0c:	681b      	ldr	r3, [r3, #0]
 800dd0e:	681b      	ldr	r3, [r3, #0]
 800dd10:	f003 0304 	and.w	r3, r3, #4
 800dd14:	2b00      	cmp	r3, #0
 800dd16:	d051      	beq.n	800ddbc <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800dd18:	68fb      	ldr	r3, [r7, #12]
 800dd1a:	681b      	ldr	r3, [r3, #0]
 800dd1c:	69db      	ldr	r3, [r3, #28]
 800dd1e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800dd22:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800dd26:	d149      	bne.n	800ddbc <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800dd28:	68fb      	ldr	r3, [r7, #12]
 800dd2a:	681b      	ldr	r3, [r3, #0]
 800dd2c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800dd30:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800dd32:	68fb      	ldr	r3, [r7, #12]
 800dd34:	681b      	ldr	r3, [r3, #0]
 800dd36:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dd38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd3a:	e853 3f00 	ldrex	r3, [r3]
 800dd3e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800dd40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd42:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800dd46:	66fb      	str	r3, [r7, #108]	; 0x6c
 800dd48:	68fb      	ldr	r3, [r7, #12]
 800dd4a:	681b      	ldr	r3, [r3, #0]
 800dd4c:	461a      	mov	r2, r3
 800dd4e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800dd50:	637b      	str	r3, [r7, #52]	; 0x34
 800dd52:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dd54:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800dd56:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800dd58:	e841 2300 	strex	r3, r2, [r1]
 800dd5c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800dd5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dd60:	2b00      	cmp	r3, #0
 800dd62:	d1e6      	bne.n	800dd32 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800dd64:	68fb      	ldr	r3, [r7, #12]
 800dd66:	681b      	ldr	r3, [r3, #0]
 800dd68:	3308      	adds	r3, #8
 800dd6a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dd6c:	697b      	ldr	r3, [r7, #20]
 800dd6e:	e853 3f00 	ldrex	r3, [r3]
 800dd72:	613b      	str	r3, [r7, #16]
   return(result);
 800dd74:	693b      	ldr	r3, [r7, #16]
 800dd76:	f023 0301 	bic.w	r3, r3, #1
 800dd7a:	66bb      	str	r3, [r7, #104]	; 0x68
 800dd7c:	68fb      	ldr	r3, [r7, #12]
 800dd7e:	681b      	ldr	r3, [r3, #0]
 800dd80:	3308      	adds	r3, #8
 800dd82:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800dd84:	623a      	str	r2, [r7, #32]
 800dd86:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dd88:	69f9      	ldr	r1, [r7, #28]
 800dd8a:	6a3a      	ldr	r2, [r7, #32]
 800dd8c:	e841 2300 	strex	r3, r2, [r1]
 800dd90:	61bb      	str	r3, [r7, #24]
   return(result);
 800dd92:	69bb      	ldr	r3, [r7, #24]
 800dd94:	2b00      	cmp	r3, #0
 800dd96:	d1e5      	bne.n	800dd64 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800dd98:	68fb      	ldr	r3, [r7, #12]
 800dd9a:	2220      	movs	r2, #32
 800dd9c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800dda0:	68fb      	ldr	r3, [r7, #12]
 800dda2:	2220      	movs	r2, #32
 800dda4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800dda8:	68fb      	ldr	r3, [r7, #12]
 800ddaa:	2220      	movs	r2, #32
 800ddac:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800ddb0:	68fb      	ldr	r3, [r7, #12]
 800ddb2:	2200      	movs	r2, #0
 800ddb4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800ddb8:	2303      	movs	r3, #3
 800ddba:	e010      	b.n	800ddde <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ddbc:	68fb      	ldr	r3, [r7, #12]
 800ddbe:	681b      	ldr	r3, [r3, #0]
 800ddc0:	69da      	ldr	r2, [r3, #28]
 800ddc2:	68bb      	ldr	r3, [r7, #8]
 800ddc4:	4013      	ands	r3, r2
 800ddc6:	68ba      	ldr	r2, [r7, #8]
 800ddc8:	429a      	cmp	r2, r3
 800ddca:	bf0c      	ite	eq
 800ddcc:	2301      	moveq	r3, #1
 800ddce:	2300      	movne	r3, #0
 800ddd0:	b2db      	uxtb	r3, r3
 800ddd2:	461a      	mov	r2, r3
 800ddd4:	79fb      	ldrb	r3, [r7, #7]
 800ddd6:	429a      	cmp	r2, r3
 800ddd8:	f43f af46 	beq.w	800dc68 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800dddc:	2300      	movs	r3, #0
}
 800ddde:	4618      	mov	r0, r3
 800dde0:	3770      	adds	r7, #112	; 0x70
 800dde2:	46bd      	mov	sp, r7
 800dde4:	bd80      	pop	{r7, pc}
	...

0800dde8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800dde8:	b480      	push	{r7}
 800ddea:	b0a3      	sub	sp, #140	; 0x8c
 800ddec:	af00      	add	r7, sp, #0
 800ddee:	60f8      	str	r0, [r7, #12]
 800ddf0:	60b9      	str	r1, [r7, #8]
 800ddf2:	4613      	mov	r3, r2
 800ddf4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800ddf6:	68fb      	ldr	r3, [r7, #12]
 800ddf8:	68ba      	ldr	r2, [r7, #8]
 800ddfa:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 800ddfc:	68fb      	ldr	r3, [r7, #12]
 800ddfe:	88fa      	ldrh	r2, [r7, #6]
 800de00:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 800de04:	68fb      	ldr	r3, [r7, #12]
 800de06:	88fa      	ldrh	r2, [r7, #6]
 800de08:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 800de0c:	68fb      	ldr	r3, [r7, #12]
 800de0e:	2200      	movs	r2, #0
 800de10:	671a      	str	r2, [r3, #112]	; 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800de12:	68fb      	ldr	r3, [r7, #12]
 800de14:	689b      	ldr	r3, [r3, #8]
 800de16:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800de1a:	d10e      	bne.n	800de3a <UART_Start_Receive_IT+0x52>
 800de1c:	68fb      	ldr	r3, [r7, #12]
 800de1e:	691b      	ldr	r3, [r3, #16]
 800de20:	2b00      	cmp	r3, #0
 800de22:	d105      	bne.n	800de30 <UART_Start_Receive_IT+0x48>
 800de24:	68fb      	ldr	r3, [r7, #12]
 800de26:	f240 12ff 	movw	r2, #511	; 0x1ff
 800de2a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800de2e:	e02d      	b.n	800de8c <UART_Start_Receive_IT+0xa4>
 800de30:	68fb      	ldr	r3, [r7, #12]
 800de32:	22ff      	movs	r2, #255	; 0xff
 800de34:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800de38:	e028      	b.n	800de8c <UART_Start_Receive_IT+0xa4>
 800de3a:	68fb      	ldr	r3, [r7, #12]
 800de3c:	689b      	ldr	r3, [r3, #8]
 800de3e:	2b00      	cmp	r3, #0
 800de40:	d10d      	bne.n	800de5e <UART_Start_Receive_IT+0x76>
 800de42:	68fb      	ldr	r3, [r7, #12]
 800de44:	691b      	ldr	r3, [r3, #16]
 800de46:	2b00      	cmp	r3, #0
 800de48:	d104      	bne.n	800de54 <UART_Start_Receive_IT+0x6c>
 800de4a:	68fb      	ldr	r3, [r7, #12]
 800de4c:	22ff      	movs	r2, #255	; 0xff
 800de4e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800de52:	e01b      	b.n	800de8c <UART_Start_Receive_IT+0xa4>
 800de54:	68fb      	ldr	r3, [r7, #12]
 800de56:	227f      	movs	r2, #127	; 0x7f
 800de58:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800de5c:	e016      	b.n	800de8c <UART_Start_Receive_IT+0xa4>
 800de5e:	68fb      	ldr	r3, [r7, #12]
 800de60:	689b      	ldr	r3, [r3, #8]
 800de62:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800de66:	d10d      	bne.n	800de84 <UART_Start_Receive_IT+0x9c>
 800de68:	68fb      	ldr	r3, [r7, #12]
 800de6a:	691b      	ldr	r3, [r3, #16]
 800de6c:	2b00      	cmp	r3, #0
 800de6e:	d104      	bne.n	800de7a <UART_Start_Receive_IT+0x92>
 800de70:	68fb      	ldr	r3, [r7, #12]
 800de72:	227f      	movs	r2, #127	; 0x7f
 800de74:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800de78:	e008      	b.n	800de8c <UART_Start_Receive_IT+0xa4>
 800de7a:	68fb      	ldr	r3, [r7, #12]
 800de7c:	223f      	movs	r2, #63	; 0x3f
 800de7e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800de82:	e003      	b.n	800de8c <UART_Start_Receive_IT+0xa4>
 800de84:	68fb      	ldr	r3, [r7, #12]
 800de86:	2200      	movs	r2, #0
 800de88:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800de8c:	68fb      	ldr	r3, [r7, #12]
 800de8e:	2200      	movs	r2, #0
 800de90:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800de94:	68fb      	ldr	r3, [r7, #12]
 800de96:	2222      	movs	r2, #34	; 0x22
 800de98:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800de9c:	68fb      	ldr	r3, [r7, #12]
 800de9e:	681b      	ldr	r3, [r3, #0]
 800dea0:	3308      	adds	r3, #8
 800dea2:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dea4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800dea6:	e853 3f00 	ldrex	r3, [r3]
 800deaa:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 800deac:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800deae:	f043 0301 	orr.w	r3, r3, #1
 800deb2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800deb6:	68fb      	ldr	r3, [r7, #12]
 800deb8:	681b      	ldr	r3, [r3, #0]
 800deba:	3308      	adds	r3, #8
 800debc:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800dec0:	673a      	str	r2, [r7, #112]	; 0x70
 800dec2:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dec4:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800dec6:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800dec8:	e841 2300 	strex	r3, r2, [r1]
 800decc:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 800dece:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800ded0:	2b00      	cmp	r3, #0
 800ded2:	d1e3      	bne.n	800de9c <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800ded4:	68fb      	ldr	r3, [r7, #12]
 800ded6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ded8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800dedc:	d153      	bne.n	800df86 <UART_Start_Receive_IT+0x19e>
 800dede:	68fb      	ldr	r3, [r7, #12]
 800dee0:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800dee4:	88fa      	ldrh	r2, [r7, #6]
 800dee6:	429a      	cmp	r2, r3
 800dee8:	d34d      	bcc.n	800df86 <UART_Start_Receive_IT+0x19e>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800deea:	68fb      	ldr	r3, [r7, #12]
 800deec:	689b      	ldr	r3, [r3, #8]
 800deee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800def2:	d107      	bne.n	800df04 <UART_Start_Receive_IT+0x11c>
 800def4:	68fb      	ldr	r3, [r7, #12]
 800def6:	691b      	ldr	r3, [r3, #16]
 800def8:	2b00      	cmp	r3, #0
 800defa:	d103      	bne.n	800df04 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800defc:	68fb      	ldr	r3, [r7, #12]
 800defe:	4a4b      	ldr	r2, [pc, #300]	; (800e02c <UART_Start_Receive_IT+0x244>)
 800df00:	671a      	str	r2, [r3, #112]	; 0x70
 800df02:	e002      	b.n	800df0a <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800df04:	68fb      	ldr	r3, [r7, #12]
 800df06:	4a4a      	ldr	r2, [pc, #296]	; (800e030 <UART_Start_Receive_IT+0x248>)
 800df08:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 800df0a:	68fb      	ldr	r3, [r7, #12]
 800df0c:	2200      	movs	r2, #0
 800df0e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800df12:	68fb      	ldr	r3, [r7, #12]
 800df14:	691b      	ldr	r3, [r3, #16]
 800df16:	2b00      	cmp	r3, #0
 800df18:	d01a      	beq.n	800df50 <UART_Start_Receive_IT+0x168>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800df1a:	68fb      	ldr	r3, [r7, #12]
 800df1c:	681b      	ldr	r3, [r3, #0]
 800df1e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800df20:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800df22:	e853 3f00 	ldrex	r3, [r3]
 800df26:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800df28:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800df2a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800df2e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800df32:	68fb      	ldr	r3, [r7, #12]
 800df34:	681b      	ldr	r3, [r3, #0]
 800df36:	461a      	mov	r2, r3
 800df38:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800df3c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800df3e:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800df40:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800df42:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800df44:	e841 2300 	strex	r3, r2, [r1]
 800df48:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800df4a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800df4c:	2b00      	cmp	r3, #0
 800df4e:	d1e4      	bne.n	800df1a <UART_Start_Receive_IT+0x132>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800df50:	68fb      	ldr	r3, [r7, #12]
 800df52:	681b      	ldr	r3, [r3, #0]
 800df54:	3308      	adds	r3, #8
 800df56:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800df58:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800df5a:	e853 3f00 	ldrex	r3, [r3]
 800df5e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800df60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800df62:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800df66:	67fb      	str	r3, [r7, #124]	; 0x7c
 800df68:	68fb      	ldr	r3, [r7, #12]
 800df6a:	681b      	ldr	r3, [r3, #0]
 800df6c:	3308      	adds	r3, #8
 800df6e:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800df70:	64ba      	str	r2, [r7, #72]	; 0x48
 800df72:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800df74:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800df76:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800df78:	e841 2300 	strex	r3, r2, [r1]
 800df7c:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800df7e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800df80:	2b00      	cmp	r3, #0
 800df82:	d1e5      	bne.n	800df50 <UART_Start_Receive_IT+0x168>
 800df84:	e04a      	b.n	800e01c <UART_Start_Receive_IT+0x234>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800df86:	68fb      	ldr	r3, [r7, #12]
 800df88:	689b      	ldr	r3, [r3, #8]
 800df8a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800df8e:	d107      	bne.n	800dfa0 <UART_Start_Receive_IT+0x1b8>
 800df90:	68fb      	ldr	r3, [r7, #12]
 800df92:	691b      	ldr	r3, [r3, #16]
 800df94:	2b00      	cmp	r3, #0
 800df96:	d103      	bne.n	800dfa0 <UART_Start_Receive_IT+0x1b8>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800df98:	68fb      	ldr	r3, [r7, #12]
 800df9a:	4a26      	ldr	r2, [pc, #152]	; (800e034 <UART_Start_Receive_IT+0x24c>)
 800df9c:	671a      	str	r2, [r3, #112]	; 0x70
 800df9e:	e002      	b.n	800dfa6 <UART_Start_Receive_IT+0x1be>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800dfa0:	68fb      	ldr	r3, [r7, #12]
 800dfa2:	4a25      	ldr	r2, [pc, #148]	; (800e038 <UART_Start_Receive_IT+0x250>)
 800dfa4:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 800dfa6:	68fb      	ldr	r3, [r7, #12]
 800dfa8:	2200      	movs	r2, #0
 800dfaa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800dfae:	68fb      	ldr	r3, [r7, #12]
 800dfb0:	691b      	ldr	r3, [r3, #16]
 800dfb2:	2b00      	cmp	r3, #0
 800dfb4:	d019      	beq.n	800dfea <UART_Start_Receive_IT+0x202>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800dfb6:	68fb      	ldr	r3, [r7, #12]
 800dfb8:	681b      	ldr	r3, [r3, #0]
 800dfba:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dfbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dfbe:	e853 3f00 	ldrex	r3, [r3]
 800dfc2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800dfc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dfc6:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800dfca:	677b      	str	r3, [r7, #116]	; 0x74
 800dfcc:	68fb      	ldr	r3, [r7, #12]
 800dfce:	681b      	ldr	r3, [r3, #0]
 800dfd0:	461a      	mov	r2, r3
 800dfd2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800dfd4:	637b      	str	r3, [r7, #52]	; 0x34
 800dfd6:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dfd8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800dfda:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800dfdc:	e841 2300 	strex	r3, r2, [r1]
 800dfe0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800dfe2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dfe4:	2b00      	cmp	r3, #0
 800dfe6:	d1e6      	bne.n	800dfb6 <UART_Start_Receive_IT+0x1ce>
 800dfe8:	e018      	b.n	800e01c <UART_Start_Receive_IT+0x234>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800dfea:	68fb      	ldr	r3, [r7, #12]
 800dfec:	681b      	ldr	r3, [r3, #0]
 800dfee:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dff0:	697b      	ldr	r3, [r7, #20]
 800dff2:	e853 3f00 	ldrex	r3, [r3]
 800dff6:	613b      	str	r3, [r7, #16]
   return(result);
 800dff8:	693b      	ldr	r3, [r7, #16]
 800dffa:	f043 0320 	orr.w	r3, r3, #32
 800dffe:	67bb      	str	r3, [r7, #120]	; 0x78
 800e000:	68fb      	ldr	r3, [r7, #12]
 800e002:	681b      	ldr	r3, [r3, #0]
 800e004:	461a      	mov	r2, r3
 800e006:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800e008:	623b      	str	r3, [r7, #32]
 800e00a:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e00c:	69f9      	ldr	r1, [r7, #28]
 800e00e:	6a3a      	ldr	r2, [r7, #32]
 800e010:	e841 2300 	strex	r3, r2, [r1]
 800e014:	61bb      	str	r3, [r7, #24]
   return(result);
 800e016:	69bb      	ldr	r3, [r7, #24]
 800e018:	2b00      	cmp	r3, #0
 800e01a:	d1e6      	bne.n	800dfea <UART_Start_Receive_IT+0x202>
    }
  }
  return HAL_OK;
 800e01c:	2300      	movs	r3, #0
}
 800e01e:	4618      	mov	r0, r3
 800e020:	378c      	adds	r7, #140	; 0x8c
 800e022:	46bd      	mov	sp, r7
 800e024:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e028:	4770      	bx	lr
 800e02a:	bf00      	nop
 800e02c:	0800e745 	.word	0x0800e745
 800e030:	0800e44d 	.word	0x0800e44d
 800e034:	0800e2eb 	.word	0x0800e2eb
 800e038:	0800e18b 	.word	0x0800e18b

0800e03c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800e03c:	b480      	push	{r7}
 800e03e:	b095      	sub	sp, #84	; 0x54
 800e040:	af00      	add	r7, sp, #0
 800e042:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800e044:	687b      	ldr	r3, [r7, #4]
 800e046:	681b      	ldr	r3, [r3, #0]
 800e048:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e04a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e04c:	e853 3f00 	ldrex	r3, [r3]
 800e050:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800e052:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e054:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800e058:	64fb      	str	r3, [r7, #76]	; 0x4c
 800e05a:	687b      	ldr	r3, [r7, #4]
 800e05c:	681b      	ldr	r3, [r3, #0]
 800e05e:	461a      	mov	r2, r3
 800e060:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e062:	643b      	str	r3, [r7, #64]	; 0x40
 800e064:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e066:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800e068:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800e06a:	e841 2300 	strex	r3, r2, [r1]
 800e06e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800e070:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e072:	2b00      	cmp	r3, #0
 800e074:	d1e6      	bne.n	800e044 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800e076:	687b      	ldr	r3, [r7, #4]
 800e078:	681b      	ldr	r3, [r3, #0]
 800e07a:	3308      	adds	r3, #8
 800e07c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e07e:	6a3b      	ldr	r3, [r7, #32]
 800e080:	e853 3f00 	ldrex	r3, [r3]
 800e084:	61fb      	str	r3, [r7, #28]
   return(result);
 800e086:	69fa      	ldr	r2, [r7, #28]
 800e088:	4b1e      	ldr	r3, [pc, #120]	; (800e104 <UART_EndRxTransfer+0xc8>)
 800e08a:	4013      	ands	r3, r2
 800e08c:	64bb      	str	r3, [r7, #72]	; 0x48
 800e08e:	687b      	ldr	r3, [r7, #4]
 800e090:	681b      	ldr	r3, [r3, #0]
 800e092:	3308      	adds	r3, #8
 800e094:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e096:	62fa      	str	r2, [r7, #44]	; 0x2c
 800e098:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e09a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800e09c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e09e:	e841 2300 	strex	r3, r2, [r1]
 800e0a2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800e0a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e0a6:	2b00      	cmp	r3, #0
 800e0a8:	d1e5      	bne.n	800e076 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e0aa:	687b      	ldr	r3, [r7, #4]
 800e0ac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e0ae:	2b01      	cmp	r3, #1
 800e0b0:	d118      	bne.n	800e0e4 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e0b2:	687b      	ldr	r3, [r7, #4]
 800e0b4:	681b      	ldr	r3, [r3, #0]
 800e0b6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e0b8:	68fb      	ldr	r3, [r7, #12]
 800e0ba:	e853 3f00 	ldrex	r3, [r3]
 800e0be:	60bb      	str	r3, [r7, #8]
   return(result);
 800e0c0:	68bb      	ldr	r3, [r7, #8]
 800e0c2:	f023 0310 	bic.w	r3, r3, #16
 800e0c6:	647b      	str	r3, [r7, #68]	; 0x44
 800e0c8:	687b      	ldr	r3, [r7, #4]
 800e0ca:	681b      	ldr	r3, [r3, #0]
 800e0cc:	461a      	mov	r2, r3
 800e0ce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e0d0:	61bb      	str	r3, [r7, #24]
 800e0d2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e0d4:	6979      	ldr	r1, [r7, #20]
 800e0d6:	69ba      	ldr	r2, [r7, #24]
 800e0d8:	e841 2300 	strex	r3, r2, [r1]
 800e0dc:	613b      	str	r3, [r7, #16]
   return(result);
 800e0de:	693b      	ldr	r3, [r7, #16]
 800e0e0:	2b00      	cmp	r3, #0
 800e0e2:	d1e6      	bne.n	800e0b2 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800e0e4:	687b      	ldr	r3, [r7, #4]
 800e0e6:	2220      	movs	r2, #32
 800e0e8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e0ec:	687b      	ldr	r3, [r7, #4]
 800e0ee:	2200      	movs	r2, #0
 800e0f0:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800e0f2:	687b      	ldr	r3, [r7, #4]
 800e0f4:	2200      	movs	r2, #0
 800e0f6:	671a      	str	r2, [r3, #112]	; 0x70
}
 800e0f8:	bf00      	nop
 800e0fa:	3754      	adds	r7, #84	; 0x54
 800e0fc:	46bd      	mov	sp, r7
 800e0fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e102:	4770      	bx	lr
 800e104:	effffffe 	.word	0xeffffffe

0800e108 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800e108:	b580      	push	{r7, lr}
 800e10a:	b084      	sub	sp, #16
 800e10c:	af00      	add	r7, sp, #0
 800e10e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800e110:	687b      	ldr	r3, [r7, #4]
 800e112:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e114:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800e116:	68fb      	ldr	r3, [r7, #12]
 800e118:	2200      	movs	r2, #0
 800e11a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800e11e:	68fb      	ldr	r3, [r7, #12]
 800e120:	2200      	movs	r2, #0
 800e122:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800e126:	68f8      	ldr	r0, [r7, #12]
 800e128:	f7fe ff2a 	bl	800cf80 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800e12c:	bf00      	nop
 800e12e:	3710      	adds	r7, #16
 800e130:	46bd      	mov	sp, r7
 800e132:	bd80      	pop	{r7, pc}

0800e134 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800e134:	b580      	push	{r7, lr}
 800e136:	b088      	sub	sp, #32
 800e138:	af00      	add	r7, sp, #0
 800e13a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800e13c:	687b      	ldr	r3, [r7, #4]
 800e13e:	681b      	ldr	r3, [r3, #0]
 800e140:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e142:	68fb      	ldr	r3, [r7, #12]
 800e144:	e853 3f00 	ldrex	r3, [r3]
 800e148:	60bb      	str	r3, [r7, #8]
   return(result);
 800e14a:	68bb      	ldr	r3, [r7, #8]
 800e14c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e150:	61fb      	str	r3, [r7, #28]
 800e152:	687b      	ldr	r3, [r7, #4]
 800e154:	681b      	ldr	r3, [r3, #0]
 800e156:	461a      	mov	r2, r3
 800e158:	69fb      	ldr	r3, [r7, #28]
 800e15a:	61bb      	str	r3, [r7, #24]
 800e15c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e15e:	6979      	ldr	r1, [r7, #20]
 800e160:	69ba      	ldr	r2, [r7, #24]
 800e162:	e841 2300 	strex	r3, r2, [r1]
 800e166:	613b      	str	r3, [r7, #16]
   return(result);
 800e168:	693b      	ldr	r3, [r7, #16]
 800e16a:	2b00      	cmp	r3, #0
 800e16c:	d1e6      	bne.n	800e13c <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800e16e:	687b      	ldr	r3, [r7, #4]
 800e170:	2220      	movs	r2, #32
 800e172:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800e176:	687b      	ldr	r3, [r7, #4]
 800e178:	2200      	movs	r2, #0
 800e17a:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800e17c:	6878      	ldr	r0, [r7, #4]
 800e17e:	f7f4 ff35 	bl	8002fec <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800e182:	bf00      	nop
 800e184:	3720      	adds	r7, #32
 800e186:	46bd      	mov	sp, r7
 800e188:	bd80      	pop	{r7, pc}

0800e18a <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800e18a:	b580      	push	{r7, lr}
 800e18c:	b096      	sub	sp, #88	; 0x58
 800e18e:	af00      	add	r7, sp, #0
 800e190:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800e192:	687b      	ldr	r3, [r7, #4]
 800e194:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800e198:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800e19c:	687b      	ldr	r3, [r7, #4]
 800e19e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e1a2:	2b22      	cmp	r3, #34	; 0x22
 800e1a4:	f040 8095 	bne.w	800e2d2 <UART_RxISR_8BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800e1a8:	687b      	ldr	r3, [r7, #4]
 800e1aa:	681b      	ldr	r3, [r3, #0]
 800e1ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e1ae:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800e1b2:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 800e1b6:	b2d9      	uxtb	r1, r3
 800e1b8:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800e1bc:	b2da      	uxtb	r2, r3
 800e1be:	687b      	ldr	r3, [r7, #4]
 800e1c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e1c2:	400a      	ands	r2, r1
 800e1c4:	b2d2      	uxtb	r2, r2
 800e1c6:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800e1c8:	687b      	ldr	r3, [r7, #4]
 800e1ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e1cc:	1c5a      	adds	r2, r3, #1
 800e1ce:	687b      	ldr	r3, [r7, #4]
 800e1d0:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800e1d2:	687b      	ldr	r3, [r7, #4]
 800e1d4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800e1d8:	b29b      	uxth	r3, r3
 800e1da:	3b01      	subs	r3, #1
 800e1dc:	b29a      	uxth	r2, r3
 800e1de:	687b      	ldr	r3, [r7, #4]
 800e1e0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800e1e4:	687b      	ldr	r3, [r7, #4]
 800e1e6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800e1ea:	b29b      	uxth	r3, r3
 800e1ec:	2b00      	cmp	r3, #0
 800e1ee:	d178      	bne.n	800e2e2 <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800e1f0:	687b      	ldr	r3, [r7, #4]
 800e1f2:	681b      	ldr	r3, [r3, #0]
 800e1f4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e1f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e1f8:	e853 3f00 	ldrex	r3, [r3]
 800e1fc:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800e1fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e200:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800e204:	653b      	str	r3, [r7, #80]	; 0x50
 800e206:	687b      	ldr	r3, [r7, #4]
 800e208:	681b      	ldr	r3, [r3, #0]
 800e20a:	461a      	mov	r2, r3
 800e20c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e20e:	647b      	str	r3, [r7, #68]	; 0x44
 800e210:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e212:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800e214:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e216:	e841 2300 	strex	r3, r2, [r1]
 800e21a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800e21c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e21e:	2b00      	cmp	r3, #0
 800e220:	d1e6      	bne.n	800e1f0 <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e222:	687b      	ldr	r3, [r7, #4]
 800e224:	681b      	ldr	r3, [r3, #0]
 800e226:	3308      	adds	r3, #8
 800e228:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e22a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e22c:	e853 3f00 	ldrex	r3, [r3]
 800e230:	623b      	str	r3, [r7, #32]
   return(result);
 800e232:	6a3b      	ldr	r3, [r7, #32]
 800e234:	f023 0301 	bic.w	r3, r3, #1
 800e238:	64fb      	str	r3, [r7, #76]	; 0x4c
 800e23a:	687b      	ldr	r3, [r7, #4]
 800e23c:	681b      	ldr	r3, [r3, #0]
 800e23e:	3308      	adds	r3, #8
 800e240:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800e242:	633a      	str	r2, [r7, #48]	; 0x30
 800e244:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e246:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800e248:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e24a:	e841 2300 	strex	r3, r2, [r1]
 800e24e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800e250:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e252:	2b00      	cmp	r3, #0
 800e254:	d1e5      	bne.n	800e222 <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800e256:	687b      	ldr	r3, [r7, #4]
 800e258:	2220      	movs	r2, #32
 800e25a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800e25e:	687b      	ldr	r3, [r7, #4]
 800e260:	2200      	movs	r2, #0
 800e262:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e264:	687b      	ldr	r3, [r7, #4]
 800e266:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e268:	2b01      	cmp	r3, #1
 800e26a:	d12e      	bne.n	800e2ca <UART_RxISR_8BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e26c:	687b      	ldr	r3, [r7, #4]
 800e26e:	2200      	movs	r2, #0
 800e270:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e272:	687b      	ldr	r3, [r7, #4]
 800e274:	681b      	ldr	r3, [r3, #0]
 800e276:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e278:	693b      	ldr	r3, [r7, #16]
 800e27a:	e853 3f00 	ldrex	r3, [r3]
 800e27e:	60fb      	str	r3, [r7, #12]
   return(result);
 800e280:	68fb      	ldr	r3, [r7, #12]
 800e282:	f023 0310 	bic.w	r3, r3, #16
 800e286:	64bb      	str	r3, [r7, #72]	; 0x48
 800e288:	687b      	ldr	r3, [r7, #4]
 800e28a:	681b      	ldr	r3, [r3, #0]
 800e28c:	461a      	mov	r2, r3
 800e28e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e290:	61fb      	str	r3, [r7, #28]
 800e292:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e294:	69b9      	ldr	r1, [r7, #24]
 800e296:	69fa      	ldr	r2, [r7, #28]
 800e298:	e841 2300 	strex	r3, r2, [r1]
 800e29c:	617b      	str	r3, [r7, #20]
   return(result);
 800e29e:	697b      	ldr	r3, [r7, #20]
 800e2a0:	2b00      	cmp	r3, #0
 800e2a2:	d1e6      	bne.n	800e272 <UART_RxISR_8BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800e2a4:	687b      	ldr	r3, [r7, #4]
 800e2a6:	681b      	ldr	r3, [r3, #0]
 800e2a8:	69db      	ldr	r3, [r3, #28]
 800e2aa:	f003 0310 	and.w	r3, r3, #16
 800e2ae:	2b10      	cmp	r3, #16
 800e2b0:	d103      	bne.n	800e2ba <UART_RxISR_8BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800e2b2:	687b      	ldr	r3, [r7, #4]
 800e2b4:	681b      	ldr	r3, [r3, #0]
 800e2b6:	2210      	movs	r2, #16
 800e2b8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800e2ba:	687b      	ldr	r3, [r7, #4]
 800e2bc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800e2c0:	4619      	mov	r1, r3
 800e2c2:	6878      	ldr	r0, [r7, #4]
 800e2c4:	f7fe fe66 	bl	800cf94 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800e2c8:	e00b      	b.n	800e2e2 <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 800e2ca:	6878      	ldr	r0, [r7, #4]
 800e2cc:	f7f4 fe2a 	bl	8002f24 <HAL_UART_RxCpltCallback>
}
 800e2d0:	e007      	b.n	800e2e2 <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800e2d2:	687b      	ldr	r3, [r7, #4]
 800e2d4:	681b      	ldr	r3, [r3, #0]
 800e2d6:	699a      	ldr	r2, [r3, #24]
 800e2d8:	687b      	ldr	r3, [r7, #4]
 800e2da:	681b      	ldr	r3, [r3, #0]
 800e2dc:	f042 0208 	orr.w	r2, r2, #8
 800e2e0:	619a      	str	r2, [r3, #24]
}
 800e2e2:	bf00      	nop
 800e2e4:	3758      	adds	r7, #88	; 0x58
 800e2e6:	46bd      	mov	sp, r7
 800e2e8:	bd80      	pop	{r7, pc}

0800e2ea <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800e2ea:	b580      	push	{r7, lr}
 800e2ec:	b096      	sub	sp, #88	; 0x58
 800e2ee:	af00      	add	r7, sp, #0
 800e2f0:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800e2f2:	687b      	ldr	r3, [r7, #4]
 800e2f4:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800e2f8:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800e2fc:	687b      	ldr	r3, [r7, #4]
 800e2fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e302:	2b22      	cmp	r3, #34	; 0x22
 800e304:	f040 8095 	bne.w	800e432 <UART_RxISR_16BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800e308:	687b      	ldr	r3, [r7, #4]
 800e30a:	681b      	ldr	r3, [r3, #0]
 800e30c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e30e:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800e312:	687b      	ldr	r3, [r7, #4]
 800e314:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e316:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 800e318:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 800e31c:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800e320:	4013      	ands	r3, r2
 800e322:	b29a      	uxth	r2, r3
 800e324:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e326:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800e328:	687b      	ldr	r3, [r7, #4]
 800e32a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e32c:	1c9a      	adds	r2, r3, #2
 800e32e:	687b      	ldr	r3, [r7, #4]
 800e330:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800e332:	687b      	ldr	r3, [r7, #4]
 800e334:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800e338:	b29b      	uxth	r3, r3
 800e33a:	3b01      	subs	r3, #1
 800e33c:	b29a      	uxth	r2, r3
 800e33e:	687b      	ldr	r3, [r7, #4]
 800e340:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800e344:	687b      	ldr	r3, [r7, #4]
 800e346:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800e34a:	b29b      	uxth	r3, r3
 800e34c:	2b00      	cmp	r3, #0
 800e34e:	d178      	bne.n	800e442 <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800e350:	687b      	ldr	r3, [r7, #4]
 800e352:	681b      	ldr	r3, [r3, #0]
 800e354:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e356:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e358:	e853 3f00 	ldrex	r3, [r3]
 800e35c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800e35e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e360:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800e364:	64fb      	str	r3, [r7, #76]	; 0x4c
 800e366:	687b      	ldr	r3, [r7, #4]
 800e368:	681b      	ldr	r3, [r3, #0]
 800e36a:	461a      	mov	r2, r3
 800e36c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e36e:	643b      	str	r3, [r7, #64]	; 0x40
 800e370:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e372:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800e374:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800e376:	e841 2300 	strex	r3, r2, [r1]
 800e37a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800e37c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e37e:	2b00      	cmp	r3, #0
 800e380:	d1e6      	bne.n	800e350 <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e382:	687b      	ldr	r3, [r7, #4]
 800e384:	681b      	ldr	r3, [r3, #0]
 800e386:	3308      	adds	r3, #8
 800e388:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e38a:	6a3b      	ldr	r3, [r7, #32]
 800e38c:	e853 3f00 	ldrex	r3, [r3]
 800e390:	61fb      	str	r3, [r7, #28]
   return(result);
 800e392:	69fb      	ldr	r3, [r7, #28]
 800e394:	f023 0301 	bic.w	r3, r3, #1
 800e398:	64bb      	str	r3, [r7, #72]	; 0x48
 800e39a:	687b      	ldr	r3, [r7, #4]
 800e39c:	681b      	ldr	r3, [r3, #0]
 800e39e:	3308      	adds	r3, #8
 800e3a0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e3a2:	62fa      	str	r2, [r7, #44]	; 0x2c
 800e3a4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e3a6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800e3a8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e3aa:	e841 2300 	strex	r3, r2, [r1]
 800e3ae:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800e3b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e3b2:	2b00      	cmp	r3, #0
 800e3b4:	d1e5      	bne.n	800e382 <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800e3b6:	687b      	ldr	r3, [r7, #4]
 800e3b8:	2220      	movs	r2, #32
 800e3ba:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800e3be:	687b      	ldr	r3, [r7, #4]
 800e3c0:	2200      	movs	r2, #0
 800e3c2:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e3c4:	687b      	ldr	r3, [r7, #4]
 800e3c6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e3c8:	2b01      	cmp	r3, #1
 800e3ca:	d12e      	bne.n	800e42a <UART_RxISR_16BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e3cc:	687b      	ldr	r3, [r7, #4]
 800e3ce:	2200      	movs	r2, #0
 800e3d0:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e3d2:	687b      	ldr	r3, [r7, #4]
 800e3d4:	681b      	ldr	r3, [r3, #0]
 800e3d6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e3d8:	68fb      	ldr	r3, [r7, #12]
 800e3da:	e853 3f00 	ldrex	r3, [r3]
 800e3de:	60bb      	str	r3, [r7, #8]
   return(result);
 800e3e0:	68bb      	ldr	r3, [r7, #8]
 800e3e2:	f023 0310 	bic.w	r3, r3, #16
 800e3e6:	647b      	str	r3, [r7, #68]	; 0x44
 800e3e8:	687b      	ldr	r3, [r7, #4]
 800e3ea:	681b      	ldr	r3, [r3, #0]
 800e3ec:	461a      	mov	r2, r3
 800e3ee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e3f0:	61bb      	str	r3, [r7, #24]
 800e3f2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e3f4:	6979      	ldr	r1, [r7, #20]
 800e3f6:	69ba      	ldr	r2, [r7, #24]
 800e3f8:	e841 2300 	strex	r3, r2, [r1]
 800e3fc:	613b      	str	r3, [r7, #16]
   return(result);
 800e3fe:	693b      	ldr	r3, [r7, #16]
 800e400:	2b00      	cmp	r3, #0
 800e402:	d1e6      	bne.n	800e3d2 <UART_RxISR_16BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800e404:	687b      	ldr	r3, [r7, #4]
 800e406:	681b      	ldr	r3, [r3, #0]
 800e408:	69db      	ldr	r3, [r3, #28]
 800e40a:	f003 0310 	and.w	r3, r3, #16
 800e40e:	2b10      	cmp	r3, #16
 800e410:	d103      	bne.n	800e41a <UART_RxISR_16BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800e412:	687b      	ldr	r3, [r7, #4]
 800e414:	681b      	ldr	r3, [r3, #0]
 800e416:	2210      	movs	r2, #16
 800e418:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800e41a:	687b      	ldr	r3, [r7, #4]
 800e41c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800e420:	4619      	mov	r1, r3
 800e422:	6878      	ldr	r0, [r7, #4]
 800e424:	f7fe fdb6 	bl	800cf94 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800e428:	e00b      	b.n	800e442 <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 800e42a:	6878      	ldr	r0, [r7, #4]
 800e42c:	f7f4 fd7a 	bl	8002f24 <HAL_UART_RxCpltCallback>
}
 800e430:	e007      	b.n	800e442 <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800e432:	687b      	ldr	r3, [r7, #4]
 800e434:	681b      	ldr	r3, [r3, #0]
 800e436:	699a      	ldr	r2, [r3, #24]
 800e438:	687b      	ldr	r3, [r7, #4]
 800e43a:	681b      	ldr	r3, [r3, #0]
 800e43c:	f042 0208 	orr.w	r2, r2, #8
 800e440:	619a      	str	r2, [r3, #24]
}
 800e442:	bf00      	nop
 800e444:	3758      	adds	r7, #88	; 0x58
 800e446:	46bd      	mov	sp, r7
 800e448:	bd80      	pop	{r7, pc}
	...

0800e44c <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800e44c:	b580      	push	{r7, lr}
 800e44e:	b0a6      	sub	sp, #152	; 0x98
 800e450:	af00      	add	r7, sp, #0
 800e452:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800e454:	687b      	ldr	r3, [r7, #4]
 800e456:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800e45a:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800e45e:	687b      	ldr	r3, [r7, #4]
 800e460:	681b      	ldr	r3, [r3, #0]
 800e462:	69db      	ldr	r3, [r3, #28]
 800e464:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800e468:	687b      	ldr	r3, [r7, #4]
 800e46a:	681b      	ldr	r3, [r3, #0]
 800e46c:	681b      	ldr	r3, [r3, #0]
 800e46e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800e472:	687b      	ldr	r3, [r7, #4]
 800e474:	681b      	ldr	r3, [r3, #0]
 800e476:	689b      	ldr	r3, [r3, #8]
 800e478:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800e47c:	687b      	ldr	r3, [r7, #4]
 800e47e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e482:	2b22      	cmp	r3, #34	; 0x22
 800e484:	f040 814d 	bne.w	800e722 <UART_RxISR_8BIT_FIFOEN+0x2d6>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800e488:	687b      	ldr	r3, [r7, #4]
 800e48a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800e48e:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800e492:	e0f4      	b.n	800e67e <UART_RxISR_8BIT_FIFOEN+0x232>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800e494:	687b      	ldr	r3, [r7, #4]
 800e496:	681b      	ldr	r3, [r3, #0]
 800e498:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e49a:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800e49e:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 800e4a2:	b2d9      	uxtb	r1, r3
 800e4a4:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 800e4a8:	b2da      	uxtb	r2, r3
 800e4aa:	687b      	ldr	r3, [r7, #4]
 800e4ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e4ae:	400a      	ands	r2, r1
 800e4b0:	b2d2      	uxtb	r2, r2
 800e4b2:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800e4b4:	687b      	ldr	r3, [r7, #4]
 800e4b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e4b8:	1c5a      	adds	r2, r3, #1
 800e4ba:	687b      	ldr	r3, [r7, #4]
 800e4bc:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800e4be:	687b      	ldr	r3, [r7, #4]
 800e4c0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800e4c4:	b29b      	uxth	r3, r3
 800e4c6:	3b01      	subs	r3, #1
 800e4c8:	b29a      	uxth	r2, r3
 800e4ca:	687b      	ldr	r3, [r7, #4]
 800e4cc:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800e4d0:	687b      	ldr	r3, [r7, #4]
 800e4d2:	681b      	ldr	r3, [r3, #0]
 800e4d4:	69db      	ldr	r3, [r3, #28]
 800e4d6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800e4da:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800e4de:	f003 0307 	and.w	r3, r3, #7
 800e4e2:	2b00      	cmp	r3, #0
 800e4e4:	d053      	beq.n	800e58e <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800e4e6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800e4ea:	f003 0301 	and.w	r3, r3, #1
 800e4ee:	2b00      	cmp	r3, #0
 800e4f0:	d011      	beq.n	800e516 <UART_RxISR_8BIT_FIFOEN+0xca>
 800e4f2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800e4f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e4fa:	2b00      	cmp	r3, #0
 800e4fc:	d00b      	beq.n	800e516 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800e4fe:	687b      	ldr	r3, [r7, #4]
 800e500:	681b      	ldr	r3, [r3, #0]
 800e502:	2201      	movs	r2, #1
 800e504:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800e506:	687b      	ldr	r3, [r7, #4]
 800e508:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e50c:	f043 0201 	orr.w	r2, r3, #1
 800e510:	687b      	ldr	r3, [r7, #4]
 800e512:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800e516:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800e51a:	f003 0302 	and.w	r3, r3, #2
 800e51e:	2b00      	cmp	r3, #0
 800e520:	d011      	beq.n	800e546 <UART_RxISR_8BIT_FIFOEN+0xfa>
 800e522:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800e526:	f003 0301 	and.w	r3, r3, #1
 800e52a:	2b00      	cmp	r3, #0
 800e52c:	d00b      	beq.n	800e546 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800e52e:	687b      	ldr	r3, [r7, #4]
 800e530:	681b      	ldr	r3, [r3, #0]
 800e532:	2202      	movs	r2, #2
 800e534:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800e536:	687b      	ldr	r3, [r7, #4]
 800e538:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e53c:	f043 0204 	orr.w	r2, r3, #4
 800e540:	687b      	ldr	r3, [r7, #4]
 800e542:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800e546:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800e54a:	f003 0304 	and.w	r3, r3, #4
 800e54e:	2b00      	cmp	r3, #0
 800e550:	d011      	beq.n	800e576 <UART_RxISR_8BIT_FIFOEN+0x12a>
 800e552:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800e556:	f003 0301 	and.w	r3, r3, #1
 800e55a:	2b00      	cmp	r3, #0
 800e55c:	d00b      	beq.n	800e576 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800e55e:	687b      	ldr	r3, [r7, #4]
 800e560:	681b      	ldr	r3, [r3, #0]
 800e562:	2204      	movs	r2, #4
 800e564:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800e566:	687b      	ldr	r3, [r7, #4]
 800e568:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e56c:	f043 0202 	orr.w	r2, r3, #2
 800e570:	687b      	ldr	r3, [r7, #4]
 800e572:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800e576:	687b      	ldr	r3, [r7, #4]
 800e578:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e57c:	2b00      	cmp	r3, #0
 800e57e:	d006      	beq.n	800e58e <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800e580:	6878      	ldr	r0, [r7, #4]
 800e582:	f7fe fcfd 	bl	800cf80 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e586:	687b      	ldr	r3, [r7, #4]
 800e588:	2200      	movs	r2, #0
 800e58a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 800e58e:	687b      	ldr	r3, [r7, #4]
 800e590:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800e594:	b29b      	uxth	r3, r3
 800e596:	2b00      	cmp	r3, #0
 800e598:	d171      	bne.n	800e67e <UART_RxISR_8BIT_FIFOEN+0x232>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800e59a:	687b      	ldr	r3, [r7, #4]
 800e59c:	681b      	ldr	r3, [r3, #0]
 800e59e:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e5a0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e5a2:	e853 3f00 	ldrex	r3, [r3]
 800e5a6:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 800e5a8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e5aa:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800e5ae:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800e5b2:	687b      	ldr	r3, [r7, #4]
 800e5b4:	681b      	ldr	r3, [r3, #0]
 800e5b6:	461a      	mov	r2, r3
 800e5b8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800e5bc:	66bb      	str	r3, [r7, #104]	; 0x68
 800e5be:	667a      	str	r2, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e5c0:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800e5c2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800e5c4:	e841 2300 	strex	r3, r2, [r1]
 800e5c8:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 800e5ca:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e5cc:	2b00      	cmp	r3, #0
 800e5ce:	d1e4      	bne.n	800e59a <UART_RxISR_8BIT_FIFOEN+0x14e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800e5d0:	687b      	ldr	r3, [r7, #4]
 800e5d2:	681b      	ldr	r3, [r3, #0]
 800e5d4:	3308      	adds	r3, #8
 800e5d6:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e5d8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e5da:	e853 3f00 	ldrex	r3, [r3]
 800e5de:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800e5e0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e5e2:	4b56      	ldr	r3, [pc, #344]	; (800e73c <UART_RxISR_8BIT_FIFOEN+0x2f0>)
 800e5e4:	4013      	ands	r3, r2
 800e5e6:	67fb      	str	r3, [r7, #124]	; 0x7c
 800e5e8:	687b      	ldr	r3, [r7, #4]
 800e5ea:	681b      	ldr	r3, [r3, #0]
 800e5ec:	3308      	adds	r3, #8
 800e5ee:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800e5f0:	657a      	str	r2, [r7, #84]	; 0x54
 800e5f2:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e5f4:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800e5f6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800e5f8:	e841 2300 	strex	r3, r2, [r1]
 800e5fc:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800e5fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e600:	2b00      	cmp	r3, #0
 800e602:	d1e5      	bne.n	800e5d0 <UART_RxISR_8BIT_FIFOEN+0x184>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800e604:	687b      	ldr	r3, [r7, #4]
 800e606:	2220      	movs	r2, #32
 800e608:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800e60c:	687b      	ldr	r3, [r7, #4]
 800e60e:	2200      	movs	r2, #0
 800e610:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e612:	687b      	ldr	r3, [r7, #4]
 800e614:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e616:	2b01      	cmp	r3, #1
 800e618:	d12e      	bne.n	800e678 <UART_RxISR_8BIT_FIFOEN+0x22c>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e61a:	687b      	ldr	r3, [r7, #4]
 800e61c:	2200      	movs	r2, #0
 800e61e:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e620:	687b      	ldr	r3, [r7, #4]
 800e622:	681b      	ldr	r3, [r3, #0]
 800e624:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e626:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e628:	e853 3f00 	ldrex	r3, [r3]
 800e62c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800e62e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e630:	f023 0310 	bic.w	r3, r3, #16
 800e634:	67bb      	str	r3, [r7, #120]	; 0x78
 800e636:	687b      	ldr	r3, [r7, #4]
 800e638:	681b      	ldr	r3, [r3, #0]
 800e63a:	461a      	mov	r2, r3
 800e63c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800e63e:	643b      	str	r3, [r7, #64]	; 0x40
 800e640:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e642:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800e644:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800e646:	e841 2300 	strex	r3, r2, [r1]
 800e64a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800e64c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e64e:	2b00      	cmp	r3, #0
 800e650:	d1e6      	bne.n	800e620 <UART_RxISR_8BIT_FIFOEN+0x1d4>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800e652:	687b      	ldr	r3, [r7, #4]
 800e654:	681b      	ldr	r3, [r3, #0]
 800e656:	69db      	ldr	r3, [r3, #28]
 800e658:	f003 0310 	and.w	r3, r3, #16
 800e65c:	2b10      	cmp	r3, #16
 800e65e:	d103      	bne.n	800e668 <UART_RxISR_8BIT_FIFOEN+0x21c>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800e660:	687b      	ldr	r3, [r7, #4]
 800e662:	681b      	ldr	r3, [r3, #0]
 800e664:	2210      	movs	r2, #16
 800e666:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800e668:	687b      	ldr	r3, [r7, #4]
 800e66a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800e66e:	4619      	mov	r1, r3
 800e670:	6878      	ldr	r0, [r7, #4]
 800e672:	f7fe fc8f 	bl	800cf94 <HAL_UARTEx_RxEventCallback>
 800e676:	e002      	b.n	800e67e <UART_RxISR_8BIT_FIFOEN+0x232>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800e678:	6878      	ldr	r0, [r7, #4]
 800e67a:	f7f4 fc53 	bl	8002f24 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800e67e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800e682:	2b00      	cmp	r3, #0
 800e684:	d006      	beq.n	800e694 <UART_RxISR_8BIT_FIFOEN+0x248>
 800e686:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800e68a:	f003 0320 	and.w	r3, r3, #32
 800e68e:	2b00      	cmp	r3, #0
 800e690:	f47f af00 	bne.w	800e494 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800e694:	687b      	ldr	r3, [r7, #4]
 800e696:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800e69a:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800e69e:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 800e6a2:	2b00      	cmp	r3, #0
 800e6a4:	d045      	beq.n	800e732 <UART_RxISR_8BIT_FIFOEN+0x2e6>
 800e6a6:	687b      	ldr	r3, [r7, #4]
 800e6a8:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800e6ac:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800e6b0:	429a      	cmp	r2, r3
 800e6b2:	d23e      	bcs.n	800e732 <UART_RxISR_8BIT_FIFOEN+0x2e6>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800e6b4:	687b      	ldr	r3, [r7, #4]
 800e6b6:	681b      	ldr	r3, [r3, #0]
 800e6b8:	3308      	adds	r3, #8
 800e6ba:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e6bc:	6a3b      	ldr	r3, [r7, #32]
 800e6be:	e853 3f00 	ldrex	r3, [r3]
 800e6c2:	61fb      	str	r3, [r7, #28]
   return(result);
 800e6c4:	69fb      	ldr	r3, [r7, #28]
 800e6c6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800e6ca:	673b      	str	r3, [r7, #112]	; 0x70
 800e6cc:	687b      	ldr	r3, [r7, #4]
 800e6ce:	681b      	ldr	r3, [r3, #0]
 800e6d0:	3308      	adds	r3, #8
 800e6d2:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800e6d4:	62fa      	str	r2, [r7, #44]	; 0x2c
 800e6d6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e6d8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800e6da:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e6dc:	e841 2300 	strex	r3, r2, [r1]
 800e6e0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800e6e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e6e4:	2b00      	cmp	r3, #0
 800e6e6:	d1e5      	bne.n	800e6b4 <UART_RxISR_8BIT_FIFOEN+0x268>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800e6e8:	687b      	ldr	r3, [r7, #4]
 800e6ea:	4a15      	ldr	r2, [pc, #84]	; (800e740 <UART_RxISR_8BIT_FIFOEN+0x2f4>)
 800e6ec:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800e6ee:	687b      	ldr	r3, [r7, #4]
 800e6f0:	681b      	ldr	r3, [r3, #0]
 800e6f2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e6f4:	68fb      	ldr	r3, [r7, #12]
 800e6f6:	e853 3f00 	ldrex	r3, [r3]
 800e6fa:	60bb      	str	r3, [r7, #8]
   return(result);
 800e6fc:	68bb      	ldr	r3, [r7, #8]
 800e6fe:	f043 0320 	orr.w	r3, r3, #32
 800e702:	66fb      	str	r3, [r7, #108]	; 0x6c
 800e704:	687b      	ldr	r3, [r7, #4]
 800e706:	681b      	ldr	r3, [r3, #0]
 800e708:	461a      	mov	r2, r3
 800e70a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e70c:	61bb      	str	r3, [r7, #24]
 800e70e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e710:	6979      	ldr	r1, [r7, #20]
 800e712:	69ba      	ldr	r2, [r7, #24]
 800e714:	e841 2300 	strex	r3, r2, [r1]
 800e718:	613b      	str	r3, [r7, #16]
   return(result);
 800e71a:	693b      	ldr	r3, [r7, #16]
 800e71c:	2b00      	cmp	r3, #0
 800e71e:	d1e6      	bne.n	800e6ee <UART_RxISR_8BIT_FIFOEN+0x2a2>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800e720:	e007      	b.n	800e732 <UART_RxISR_8BIT_FIFOEN+0x2e6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800e722:	687b      	ldr	r3, [r7, #4]
 800e724:	681b      	ldr	r3, [r3, #0]
 800e726:	699a      	ldr	r2, [r3, #24]
 800e728:	687b      	ldr	r3, [r7, #4]
 800e72a:	681b      	ldr	r3, [r3, #0]
 800e72c:	f042 0208 	orr.w	r2, r2, #8
 800e730:	619a      	str	r2, [r3, #24]
}
 800e732:	bf00      	nop
 800e734:	3798      	adds	r7, #152	; 0x98
 800e736:	46bd      	mov	sp, r7
 800e738:	bd80      	pop	{r7, pc}
 800e73a:	bf00      	nop
 800e73c:	effffffe 	.word	0xeffffffe
 800e740:	0800e18b 	.word	0x0800e18b

0800e744 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800e744:	b580      	push	{r7, lr}
 800e746:	b0a8      	sub	sp, #160	; 0xa0
 800e748:	af00      	add	r7, sp, #0
 800e74a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800e74c:	687b      	ldr	r3, [r7, #4]
 800e74e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800e752:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800e756:	687b      	ldr	r3, [r7, #4]
 800e758:	681b      	ldr	r3, [r3, #0]
 800e75a:	69db      	ldr	r3, [r3, #28]
 800e75c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800e760:	687b      	ldr	r3, [r7, #4]
 800e762:	681b      	ldr	r3, [r3, #0]
 800e764:	681b      	ldr	r3, [r3, #0]
 800e766:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800e76a:	687b      	ldr	r3, [r7, #4]
 800e76c:	681b      	ldr	r3, [r3, #0]
 800e76e:	689b      	ldr	r3, [r3, #8]
 800e770:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800e774:	687b      	ldr	r3, [r7, #4]
 800e776:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e77a:	2b22      	cmp	r3, #34	; 0x22
 800e77c:	f040 8151 	bne.w	800ea22 <UART_RxISR_16BIT_FIFOEN+0x2de>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800e780:	687b      	ldr	r3, [r7, #4]
 800e782:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800e786:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800e78a:	e0f8      	b.n	800e97e <UART_RxISR_16BIT_FIFOEN+0x23a>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800e78c:	687b      	ldr	r3, [r7, #4]
 800e78e:	681b      	ldr	r3, [r3, #0]
 800e790:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e792:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800e796:	687b      	ldr	r3, [r7, #4]
 800e798:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e79a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      *tmp = (uint16_t)(uhdata & uhMask);
 800e79e:	f8b7 208c 	ldrh.w	r2, [r7, #140]	; 0x8c
 800e7a2:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 800e7a6:	4013      	ands	r3, r2
 800e7a8:	b29a      	uxth	r2, r3
 800e7aa:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800e7ae:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800e7b0:	687b      	ldr	r3, [r7, #4]
 800e7b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e7b4:	1c9a      	adds	r2, r3, #2
 800e7b6:	687b      	ldr	r3, [r7, #4]
 800e7b8:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800e7ba:	687b      	ldr	r3, [r7, #4]
 800e7bc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800e7c0:	b29b      	uxth	r3, r3
 800e7c2:	3b01      	subs	r3, #1
 800e7c4:	b29a      	uxth	r2, r3
 800e7c6:	687b      	ldr	r3, [r7, #4]
 800e7c8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800e7cc:	687b      	ldr	r3, [r7, #4]
 800e7ce:	681b      	ldr	r3, [r3, #0]
 800e7d0:	69db      	ldr	r3, [r3, #28]
 800e7d2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800e7d6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800e7da:	f003 0307 	and.w	r3, r3, #7
 800e7de:	2b00      	cmp	r3, #0
 800e7e0:	d053      	beq.n	800e88a <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800e7e2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800e7e6:	f003 0301 	and.w	r3, r3, #1
 800e7ea:	2b00      	cmp	r3, #0
 800e7ec:	d011      	beq.n	800e812 <UART_RxISR_16BIT_FIFOEN+0xce>
 800e7ee:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800e7f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e7f6:	2b00      	cmp	r3, #0
 800e7f8:	d00b      	beq.n	800e812 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800e7fa:	687b      	ldr	r3, [r7, #4]
 800e7fc:	681b      	ldr	r3, [r3, #0]
 800e7fe:	2201      	movs	r2, #1
 800e800:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800e802:	687b      	ldr	r3, [r7, #4]
 800e804:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e808:	f043 0201 	orr.w	r2, r3, #1
 800e80c:	687b      	ldr	r3, [r7, #4]
 800e80e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800e812:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800e816:	f003 0302 	and.w	r3, r3, #2
 800e81a:	2b00      	cmp	r3, #0
 800e81c:	d011      	beq.n	800e842 <UART_RxISR_16BIT_FIFOEN+0xfe>
 800e81e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800e822:	f003 0301 	and.w	r3, r3, #1
 800e826:	2b00      	cmp	r3, #0
 800e828:	d00b      	beq.n	800e842 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800e82a:	687b      	ldr	r3, [r7, #4]
 800e82c:	681b      	ldr	r3, [r3, #0]
 800e82e:	2202      	movs	r2, #2
 800e830:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800e832:	687b      	ldr	r3, [r7, #4]
 800e834:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e838:	f043 0204 	orr.w	r2, r3, #4
 800e83c:	687b      	ldr	r3, [r7, #4]
 800e83e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800e842:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800e846:	f003 0304 	and.w	r3, r3, #4
 800e84a:	2b00      	cmp	r3, #0
 800e84c:	d011      	beq.n	800e872 <UART_RxISR_16BIT_FIFOEN+0x12e>
 800e84e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800e852:	f003 0301 	and.w	r3, r3, #1
 800e856:	2b00      	cmp	r3, #0
 800e858:	d00b      	beq.n	800e872 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800e85a:	687b      	ldr	r3, [r7, #4]
 800e85c:	681b      	ldr	r3, [r3, #0]
 800e85e:	2204      	movs	r2, #4
 800e860:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800e862:	687b      	ldr	r3, [r7, #4]
 800e864:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e868:	f043 0202 	orr.w	r2, r3, #2
 800e86c:	687b      	ldr	r3, [r7, #4]
 800e86e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800e872:	687b      	ldr	r3, [r7, #4]
 800e874:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e878:	2b00      	cmp	r3, #0
 800e87a:	d006      	beq.n	800e88a <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800e87c:	6878      	ldr	r0, [r7, #4]
 800e87e:	f7fe fb7f 	bl	800cf80 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e882:	687b      	ldr	r3, [r7, #4]
 800e884:	2200      	movs	r2, #0
 800e886:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 800e88a:	687b      	ldr	r3, [r7, #4]
 800e88c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800e890:	b29b      	uxth	r3, r3
 800e892:	2b00      	cmp	r3, #0
 800e894:	d173      	bne.n	800e97e <UART_RxISR_16BIT_FIFOEN+0x23a>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800e896:	687b      	ldr	r3, [r7, #4]
 800e898:	681b      	ldr	r3, [r3, #0]
 800e89a:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e89c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e89e:	e853 3f00 	ldrex	r3, [r3]
 800e8a2:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800e8a4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e8a6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800e8aa:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800e8ae:	687b      	ldr	r3, [r7, #4]
 800e8b0:	681b      	ldr	r3, [r3, #0]
 800e8b2:	461a      	mov	r2, r3
 800e8b4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800e8b8:	66fb      	str	r3, [r7, #108]	; 0x6c
 800e8ba:	66ba      	str	r2, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e8bc:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800e8be:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800e8c0:	e841 2300 	strex	r3, r2, [r1]
 800e8c4:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800e8c6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e8c8:	2b00      	cmp	r3, #0
 800e8ca:	d1e4      	bne.n	800e896 <UART_RxISR_16BIT_FIFOEN+0x152>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800e8cc:	687b      	ldr	r3, [r7, #4]
 800e8ce:	681b      	ldr	r3, [r3, #0]
 800e8d0:	3308      	adds	r3, #8
 800e8d2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e8d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e8d6:	e853 3f00 	ldrex	r3, [r3]
 800e8da:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800e8dc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e8de:	4b57      	ldr	r3, [pc, #348]	; (800ea3c <UART_RxISR_16BIT_FIFOEN+0x2f8>)
 800e8e0:	4013      	ands	r3, r2
 800e8e2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800e8e6:	687b      	ldr	r3, [r7, #4]
 800e8e8:	681b      	ldr	r3, [r3, #0]
 800e8ea:	3308      	adds	r3, #8
 800e8ec:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800e8f0:	65ba      	str	r2, [r7, #88]	; 0x58
 800e8f2:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e8f4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800e8f6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800e8f8:	e841 2300 	strex	r3, r2, [r1]
 800e8fc:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800e8fe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e900:	2b00      	cmp	r3, #0
 800e902:	d1e3      	bne.n	800e8cc <UART_RxISR_16BIT_FIFOEN+0x188>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800e904:	687b      	ldr	r3, [r7, #4]
 800e906:	2220      	movs	r2, #32
 800e908:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800e90c:	687b      	ldr	r3, [r7, #4]
 800e90e:	2200      	movs	r2, #0
 800e910:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e912:	687b      	ldr	r3, [r7, #4]
 800e914:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e916:	2b01      	cmp	r3, #1
 800e918:	d12e      	bne.n	800e978 <UART_RxISR_16BIT_FIFOEN+0x234>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e91a:	687b      	ldr	r3, [r7, #4]
 800e91c:	2200      	movs	r2, #0
 800e91e:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e920:	687b      	ldr	r3, [r7, #4]
 800e922:	681b      	ldr	r3, [r3, #0]
 800e924:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e926:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e928:	e853 3f00 	ldrex	r3, [r3]
 800e92c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800e92e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e930:	f023 0310 	bic.w	r3, r3, #16
 800e934:	67fb      	str	r3, [r7, #124]	; 0x7c
 800e936:	687b      	ldr	r3, [r7, #4]
 800e938:	681b      	ldr	r3, [r3, #0]
 800e93a:	461a      	mov	r2, r3
 800e93c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800e93e:	647b      	str	r3, [r7, #68]	; 0x44
 800e940:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e942:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800e944:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e946:	e841 2300 	strex	r3, r2, [r1]
 800e94a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800e94c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e94e:	2b00      	cmp	r3, #0
 800e950:	d1e6      	bne.n	800e920 <UART_RxISR_16BIT_FIFOEN+0x1dc>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800e952:	687b      	ldr	r3, [r7, #4]
 800e954:	681b      	ldr	r3, [r3, #0]
 800e956:	69db      	ldr	r3, [r3, #28]
 800e958:	f003 0310 	and.w	r3, r3, #16
 800e95c:	2b10      	cmp	r3, #16
 800e95e:	d103      	bne.n	800e968 <UART_RxISR_16BIT_FIFOEN+0x224>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800e960:	687b      	ldr	r3, [r7, #4]
 800e962:	681b      	ldr	r3, [r3, #0]
 800e964:	2210      	movs	r2, #16
 800e966:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800e968:	687b      	ldr	r3, [r7, #4]
 800e96a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800e96e:	4619      	mov	r1, r3
 800e970:	6878      	ldr	r0, [r7, #4]
 800e972:	f7fe fb0f 	bl	800cf94 <HAL_UARTEx_RxEventCallback>
 800e976:	e002      	b.n	800e97e <UART_RxISR_16BIT_FIFOEN+0x23a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800e978:	6878      	ldr	r0, [r7, #4]
 800e97a:	f7f4 fad3 	bl	8002f24 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800e97e:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 800e982:	2b00      	cmp	r3, #0
 800e984:	d006      	beq.n	800e994 <UART_RxISR_16BIT_FIFOEN+0x250>
 800e986:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800e98a:	f003 0320 	and.w	r3, r3, #32
 800e98e:	2b00      	cmp	r3, #0
 800e990:	f47f aefc 	bne.w	800e78c <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800e994:	687b      	ldr	r3, [r7, #4]
 800e996:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800e99a:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800e99e:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 800e9a2:	2b00      	cmp	r3, #0
 800e9a4:	d045      	beq.n	800ea32 <UART_RxISR_16BIT_FIFOEN+0x2ee>
 800e9a6:	687b      	ldr	r3, [r7, #4]
 800e9a8:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800e9ac:	f8b7 207a 	ldrh.w	r2, [r7, #122]	; 0x7a
 800e9b0:	429a      	cmp	r2, r3
 800e9b2:	d23e      	bcs.n	800ea32 <UART_RxISR_16BIT_FIFOEN+0x2ee>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800e9b4:	687b      	ldr	r3, [r7, #4]
 800e9b6:	681b      	ldr	r3, [r3, #0]
 800e9b8:	3308      	adds	r3, #8
 800e9ba:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e9bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e9be:	e853 3f00 	ldrex	r3, [r3]
 800e9c2:	623b      	str	r3, [r7, #32]
   return(result);
 800e9c4:	6a3b      	ldr	r3, [r7, #32]
 800e9c6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800e9ca:	677b      	str	r3, [r7, #116]	; 0x74
 800e9cc:	687b      	ldr	r3, [r7, #4]
 800e9ce:	681b      	ldr	r3, [r3, #0]
 800e9d0:	3308      	adds	r3, #8
 800e9d2:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800e9d4:	633a      	str	r2, [r7, #48]	; 0x30
 800e9d6:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e9d8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800e9da:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e9dc:	e841 2300 	strex	r3, r2, [r1]
 800e9e0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800e9e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e9e4:	2b00      	cmp	r3, #0
 800e9e6:	d1e5      	bne.n	800e9b4 <UART_RxISR_16BIT_FIFOEN+0x270>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800e9e8:	687b      	ldr	r3, [r7, #4]
 800e9ea:	4a15      	ldr	r2, [pc, #84]	; (800ea40 <UART_RxISR_16BIT_FIFOEN+0x2fc>)
 800e9ec:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800e9ee:	687b      	ldr	r3, [r7, #4]
 800e9f0:	681b      	ldr	r3, [r3, #0]
 800e9f2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e9f4:	693b      	ldr	r3, [r7, #16]
 800e9f6:	e853 3f00 	ldrex	r3, [r3]
 800e9fa:	60fb      	str	r3, [r7, #12]
   return(result);
 800e9fc:	68fb      	ldr	r3, [r7, #12]
 800e9fe:	f043 0320 	orr.w	r3, r3, #32
 800ea02:	673b      	str	r3, [r7, #112]	; 0x70
 800ea04:	687b      	ldr	r3, [r7, #4]
 800ea06:	681b      	ldr	r3, [r3, #0]
 800ea08:	461a      	mov	r2, r3
 800ea0a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800ea0c:	61fb      	str	r3, [r7, #28]
 800ea0e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ea10:	69b9      	ldr	r1, [r7, #24]
 800ea12:	69fa      	ldr	r2, [r7, #28]
 800ea14:	e841 2300 	strex	r3, r2, [r1]
 800ea18:	617b      	str	r3, [r7, #20]
   return(result);
 800ea1a:	697b      	ldr	r3, [r7, #20]
 800ea1c:	2b00      	cmp	r3, #0
 800ea1e:	d1e6      	bne.n	800e9ee <UART_RxISR_16BIT_FIFOEN+0x2aa>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800ea20:	e007      	b.n	800ea32 <UART_RxISR_16BIT_FIFOEN+0x2ee>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800ea22:	687b      	ldr	r3, [r7, #4]
 800ea24:	681b      	ldr	r3, [r3, #0]
 800ea26:	699a      	ldr	r2, [r3, #24]
 800ea28:	687b      	ldr	r3, [r7, #4]
 800ea2a:	681b      	ldr	r3, [r3, #0]
 800ea2c:	f042 0208 	orr.w	r2, r2, #8
 800ea30:	619a      	str	r2, [r3, #24]
}
 800ea32:	bf00      	nop
 800ea34:	37a0      	adds	r7, #160	; 0xa0
 800ea36:	46bd      	mov	sp, r7
 800ea38:	bd80      	pop	{r7, pc}
 800ea3a:	bf00      	nop
 800ea3c:	effffffe 	.word	0xeffffffe
 800ea40:	0800e2eb 	.word	0x0800e2eb

0800ea44 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800ea44:	b480      	push	{r7}
 800ea46:	b083      	sub	sp, #12
 800ea48:	af00      	add	r7, sp, #0
 800ea4a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800ea4c:	bf00      	nop
 800ea4e:	370c      	adds	r7, #12
 800ea50:	46bd      	mov	sp, r7
 800ea52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea56:	4770      	bx	lr

0800ea58 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800ea58:	b480      	push	{r7}
 800ea5a:	b083      	sub	sp, #12
 800ea5c:	af00      	add	r7, sp, #0
 800ea5e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800ea60:	bf00      	nop
 800ea62:	370c      	adds	r7, #12
 800ea64:	46bd      	mov	sp, r7
 800ea66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea6a:	4770      	bx	lr

0800ea6c <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800ea6c:	b480      	push	{r7}
 800ea6e:	b083      	sub	sp, #12
 800ea70:	af00      	add	r7, sp, #0
 800ea72:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800ea74:	bf00      	nop
 800ea76:	370c      	adds	r7, #12
 800ea78:	46bd      	mov	sp, r7
 800ea7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea7e:	4770      	bx	lr

0800ea80 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800ea80:	b480      	push	{r7}
 800ea82:	b085      	sub	sp, #20
 800ea84:	af00      	add	r7, sp, #0
 800ea86:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ea88:	687b      	ldr	r3, [r7, #4]
 800ea8a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800ea8e:	2b01      	cmp	r3, #1
 800ea90:	d101      	bne.n	800ea96 <HAL_UARTEx_DisableFifoMode+0x16>
 800ea92:	2302      	movs	r3, #2
 800ea94:	e027      	b.n	800eae6 <HAL_UARTEx_DisableFifoMode+0x66>
 800ea96:	687b      	ldr	r3, [r7, #4]
 800ea98:	2201      	movs	r2, #1
 800ea9a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800ea9e:	687b      	ldr	r3, [r7, #4]
 800eaa0:	2224      	movs	r2, #36	; 0x24
 800eaa2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800eaa6:	687b      	ldr	r3, [r7, #4]
 800eaa8:	681b      	ldr	r3, [r3, #0]
 800eaaa:	681b      	ldr	r3, [r3, #0]
 800eaac:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800eaae:	687b      	ldr	r3, [r7, #4]
 800eab0:	681b      	ldr	r3, [r3, #0]
 800eab2:	681a      	ldr	r2, [r3, #0]
 800eab4:	687b      	ldr	r3, [r7, #4]
 800eab6:	681b      	ldr	r3, [r3, #0]
 800eab8:	f022 0201 	bic.w	r2, r2, #1
 800eabc:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800eabe:	68fb      	ldr	r3, [r7, #12]
 800eac0:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800eac4:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800eac6:	687b      	ldr	r3, [r7, #4]
 800eac8:	2200      	movs	r2, #0
 800eaca:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800eacc:	687b      	ldr	r3, [r7, #4]
 800eace:	681b      	ldr	r3, [r3, #0]
 800ead0:	68fa      	ldr	r2, [r7, #12]
 800ead2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ead4:	687b      	ldr	r3, [r7, #4]
 800ead6:	2220      	movs	r2, #32
 800ead8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800eadc:	687b      	ldr	r3, [r7, #4]
 800eade:	2200      	movs	r2, #0
 800eae0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800eae4:	2300      	movs	r3, #0
}
 800eae6:	4618      	mov	r0, r3
 800eae8:	3714      	adds	r7, #20
 800eaea:	46bd      	mov	sp, r7
 800eaec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eaf0:	4770      	bx	lr

0800eaf2 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800eaf2:	b580      	push	{r7, lr}
 800eaf4:	b084      	sub	sp, #16
 800eaf6:	af00      	add	r7, sp, #0
 800eaf8:	6078      	str	r0, [r7, #4]
 800eafa:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800eafc:	687b      	ldr	r3, [r7, #4]
 800eafe:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800eb02:	2b01      	cmp	r3, #1
 800eb04:	d101      	bne.n	800eb0a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800eb06:	2302      	movs	r3, #2
 800eb08:	e02d      	b.n	800eb66 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800eb0a:	687b      	ldr	r3, [r7, #4]
 800eb0c:	2201      	movs	r2, #1
 800eb0e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800eb12:	687b      	ldr	r3, [r7, #4]
 800eb14:	2224      	movs	r2, #36	; 0x24
 800eb16:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800eb1a:	687b      	ldr	r3, [r7, #4]
 800eb1c:	681b      	ldr	r3, [r3, #0]
 800eb1e:	681b      	ldr	r3, [r3, #0]
 800eb20:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800eb22:	687b      	ldr	r3, [r7, #4]
 800eb24:	681b      	ldr	r3, [r3, #0]
 800eb26:	681a      	ldr	r2, [r3, #0]
 800eb28:	687b      	ldr	r3, [r7, #4]
 800eb2a:	681b      	ldr	r3, [r3, #0]
 800eb2c:	f022 0201 	bic.w	r2, r2, #1
 800eb30:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800eb32:	687b      	ldr	r3, [r7, #4]
 800eb34:	681b      	ldr	r3, [r3, #0]
 800eb36:	689b      	ldr	r3, [r3, #8]
 800eb38:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800eb3c:	687b      	ldr	r3, [r7, #4]
 800eb3e:	681b      	ldr	r3, [r3, #0]
 800eb40:	683a      	ldr	r2, [r7, #0]
 800eb42:	430a      	orrs	r2, r1
 800eb44:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800eb46:	6878      	ldr	r0, [r7, #4]
 800eb48:	f000 f850 	bl	800ebec <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800eb4c:	687b      	ldr	r3, [r7, #4]
 800eb4e:	681b      	ldr	r3, [r3, #0]
 800eb50:	68fa      	ldr	r2, [r7, #12]
 800eb52:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800eb54:	687b      	ldr	r3, [r7, #4]
 800eb56:	2220      	movs	r2, #32
 800eb58:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800eb5c:	687b      	ldr	r3, [r7, #4]
 800eb5e:	2200      	movs	r2, #0
 800eb60:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800eb64:	2300      	movs	r3, #0
}
 800eb66:	4618      	mov	r0, r3
 800eb68:	3710      	adds	r7, #16
 800eb6a:	46bd      	mov	sp, r7
 800eb6c:	bd80      	pop	{r7, pc}

0800eb6e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800eb6e:	b580      	push	{r7, lr}
 800eb70:	b084      	sub	sp, #16
 800eb72:	af00      	add	r7, sp, #0
 800eb74:	6078      	str	r0, [r7, #4]
 800eb76:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800eb78:	687b      	ldr	r3, [r7, #4]
 800eb7a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800eb7e:	2b01      	cmp	r3, #1
 800eb80:	d101      	bne.n	800eb86 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800eb82:	2302      	movs	r3, #2
 800eb84:	e02d      	b.n	800ebe2 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800eb86:	687b      	ldr	r3, [r7, #4]
 800eb88:	2201      	movs	r2, #1
 800eb8a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800eb8e:	687b      	ldr	r3, [r7, #4]
 800eb90:	2224      	movs	r2, #36	; 0x24
 800eb92:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800eb96:	687b      	ldr	r3, [r7, #4]
 800eb98:	681b      	ldr	r3, [r3, #0]
 800eb9a:	681b      	ldr	r3, [r3, #0]
 800eb9c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800eb9e:	687b      	ldr	r3, [r7, #4]
 800eba0:	681b      	ldr	r3, [r3, #0]
 800eba2:	681a      	ldr	r2, [r3, #0]
 800eba4:	687b      	ldr	r3, [r7, #4]
 800eba6:	681b      	ldr	r3, [r3, #0]
 800eba8:	f022 0201 	bic.w	r2, r2, #1
 800ebac:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800ebae:	687b      	ldr	r3, [r7, #4]
 800ebb0:	681b      	ldr	r3, [r3, #0]
 800ebb2:	689b      	ldr	r3, [r3, #8]
 800ebb4:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800ebb8:	687b      	ldr	r3, [r7, #4]
 800ebba:	681b      	ldr	r3, [r3, #0]
 800ebbc:	683a      	ldr	r2, [r7, #0]
 800ebbe:	430a      	orrs	r2, r1
 800ebc0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800ebc2:	6878      	ldr	r0, [r7, #4]
 800ebc4:	f000 f812 	bl	800ebec <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ebc8:	687b      	ldr	r3, [r7, #4]
 800ebca:	681b      	ldr	r3, [r3, #0]
 800ebcc:	68fa      	ldr	r2, [r7, #12]
 800ebce:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ebd0:	687b      	ldr	r3, [r7, #4]
 800ebd2:	2220      	movs	r2, #32
 800ebd4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ebd8:	687b      	ldr	r3, [r7, #4]
 800ebda:	2200      	movs	r2, #0
 800ebdc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800ebe0:	2300      	movs	r3, #0
}
 800ebe2:	4618      	mov	r0, r3
 800ebe4:	3710      	adds	r7, #16
 800ebe6:	46bd      	mov	sp, r7
 800ebe8:	bd80      	pop	{r7, pc}
	...

0800ebec <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800ebec:	b480      	push	{r7}
 800ebee:	b085      	sub	sp, #20
 800ebf0:	af00      	add	r7, sp, #0
 800ebf2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800ebf4:	687b      	ldr	r3, [r7, #4]
 800ebf6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ebf8:	2b00      	cmp	r3, #0
 800ebfa:	d108      	bne.n	800ec0e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800ebfc:	687b      	ldr	r3, [r7, #4]
 800ebfe:	2201      	movs	r2, #1
 800ec00:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800ec04:	687b      	ldr	r3, [r7, #4]
 800ec06:	2201      	movs	r2, #1
 800ec08:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800ec0c:	e031      	b.n	800ec72 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800ec0e:	2310      	movs	r3, #16
 800ec10:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800ec12:	2310      	movs	r3, #16
 800ec14:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800ec16:	687b      	ldr	r3, [r7, #4]
 800ec18:	681b      	ldr	r3, [r3, #0]
 800ec1a:	689b      	ldr	r3, [r3, #8]
 800ec1c:	0e5b      	lsrs	r3, r3, #25
 800ec1e:	b2db      	uxtb	r3, r3
 800ec20:	f003 0307 	and.w	r3, r3, #7
 800ec24:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800ec26:	687b      	ldr	r3, [r7, #4]
 800ec28:	681b      	ldr	r3, [r3, #0]
 800ec2a:	689b      	ldr	r3, [r3, #8]
 800ec2c:	0f5b      	lsrs	r3, r3, #29
 800ec2e:	b2db      	uxtb	r3, r3
 800ec30:	f003 0307 	and.w	r3, r3, #7
 800ec34:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800ec36:	7bbb      	ldrb	r3, [r7, #14]
 800ec38:	7b3a      	ldrb	r2, [r7, #12]
 800ec3a:	4911      	ldr	r1, [pc, #68]	; (800ec80 <UARTEx_SetNbDataToProcess+0x94>)
 800ec3c:	5c8a      	ldrb	r2, [r1, r2]
 800ec3e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800ec42:	7b3a      	ldrb	r2, [r7, #12]
 800ec44:	490f      	ldr	r1, [pc, #60]	; (800ec84 <UARTEx_SetNbDataToProcess+0x98>)
 800ec46:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800ec48:	fb93 f3f2 	sdiv	r3, r3, r2
 800ec4c:	b29a      	uxth	r2, r3
 800ec4e:	687b      	ldr	r3, [r7, #4]
 800ec50:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800ec54:	7bfb      	ldrb	r3, [r7, #15]
 800ec56:	7b7a      	ldrb	r2, [r7, #13]
 800ec58:	4909      	ldr	r1, [pc, #36]	; (800ec80 <UARTEx_SetNbDataToProcess+0x94>)
 800ec5a:	5c8a      	ldrb	r2, [r1, r2]
 800ec5c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800ec60:	7b7a      	ldrb	r2, [r7, #13]
 800ec62:	4908      	ldr	r1, [pc, #32]	; (800ec84 <UARTEx_SetNbDataToProcess+0x98>)
 800ec64:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800ec66:	fb93 f3f2 	sdiv	r3, r3, r2
 800ec6a:	b29a      	uxth	r2, r3
 800ec6c:	687b      	ldr	r3, [r7, #4]
 800ec6e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800ec72:	bf00      	nop
 800ec74:	3714      	adds	r7, #20
 800ec76:	46bd      	mov	sp, r7
 800ec78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec7c:	4770      	bx	lr
 800ec7e:	bf00      	nop
 800ec80:	080123c8 	.word	0x080123c8
 800ec84:	080123d0 	.word	0x080123d0

0800ec88 <__errno>:
 800ec88:	4b01      	ldr	r3, [pc, #4]	; (800ec90 <__errno+0x8>)
 800ec8a:	6818      	ldr	r0, [r3, #0]
 800ec8c:	4770      	bx	lr
 800ec8e:	bf00      	nop
 800ec90:	240000b0 	.word	0x240000b0

0800ec94 <__libc_init_array>:
 800ec94:	b570      	push	{r4, r5, r6, lr}
 800ec96:	4d0d      	ldr	r5, [pc, #52]	; (800eccc <__libc_init_array+0x38>)
 800ec98:	4c0d      	ldr	r4, [pc, #52]	; (800ecd0 <__libc_init_array+0x3c>)
 800ec9a:	1b64      	subs	r4, r4, r5
 800ec9c:	10a4      	asrs	r4, r4, #2
 800ec9e:	2600      	movs	r6, #0
 800eca0:	42a6      	cmp	r6, r4
 800eca2:	d109      	bne.n	800ecb8 <__libc_init_array+0x24>
 800eca4:	4d0b      	ldr	r5, [pc, #44]	; (800ecd4 <__libc_init_array+0x40>)
 800eca6:	4c0c      	ldr	r4, [pc, #48]	; (800ecd8 <__libc_init_array+0x44>)
 800eca8:	f003 fae8 	bl	801227c <_init>
 800ecac:	1b64      	subs	r4, r4, r5
 800ecae:	10a4      	asrs	r4, r4, #2
 800ecb0:	2600      	movs	r6, #0
 800ecb2:	42a6      	cmp	r6, r4
 800ecb4:	d105      	bne.n	800ecc2 <__libc_init_array+0x2e>
 800ecb6:	bd70      	pop	{r4, r5, r6, pc}
 800ecb8:	f855 3b04 	ldr.w	r3, [r5], #4
 800ecbc:	4798      	blx	r3
 800ecbe:	3601      	adds	r6, #1
 800ecc0:	e7ee      	b.n	800eca0 <__libc_init_array+0xc>
 800ecc2:	f855 3b04 	ldr.w	r3, [r5], #4
 800ecc6:	4798      	blx	r3
 800ecc8:	3601      	adds	r6, #1
 800ecca:	e7f2      	b.n	800ecb2 <__libc_init_array+0x1e>
 800eccc:	080140c8 	.word	0x080140c8
 800ecd0:	080140c8 	.word	0x080140c8
 800ecd4:	080140c8 	.word	0x080140c8
 800ecd8:	080140cc 	.word	0x080140cc

0800ecdc <memcpy>:
 800ecdc:	440a      	add	r2, r1
 800ecde:	4291      	cmp	r1, r2
 800ece0:	f100 33ff 	add.w	r3, r0, #4294967295
 800ece4:	d100      	bne.n	800ece8 <memcpy+0xc>
 800ece6:	4770      	bx	lr
 800ece8:	b510      	push	{r4, lr}
 800ecea:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ecee:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ecf2:	4291      	cmp	r1, r2
 800ecf4:	d1f9      	bne.n	800ecea <memcpy+0xe>
 800ecf6:	bd10      	pop	{r4, pc}

0800ecf8 <memset>:
 800ecf8:	4402      	add	r2, r0
 800ecfa:	4603      	mov	r3, r0
 800ecfc:	4293      	cmp	r3, r2
 800ecfe:	d100      	bne.n	800ed02 <memset+0xa>
 800ed00:	4770      	bx	lr
 800ed02:	f803 1b01 	strb.w	r1, [r3], #1
 800ed06:	e7f9      	b.n	800ecfc <memset+0x4>

0800ed08 <sulp>:
 800ed08:	b570      	push	{r4, r5, r6, lr}
 800ed0a:	4604      	mov	r4, r0
 800ed0c:	460d      	mov	r5, r1
 800ed0e:	4616      	mov	r6, r2
 800ed10:	ec45 4b10 	vmov	d0, r4, r5
 800ed14:	f001 fcca 	bl	80106ac <__ulp>
 800ed18:	b17e      	cbz	r6, 800ed3a <sulp+0x32>
 800ed1a:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800ed1e:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800ed22:	2b00      	cmp	r3, #0
 800ed24:	dd09      	ble.n	800ed3a <sulp+0x32>
 800ed26:	051b      	lsls	r3, r3, #20
 800ed28:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
 800ed2c:	2000      	movs	r0, #0
 800ed2e:	f501 1140 	add.w	r1, r1, #3145728	; 0x300000
 800ed32:	ec41 0b17 	vmov	d7, r0, r1
 800ed36:	ee20 0b07 	vmul.f64	d0, d0, d7
 800ed3a:	bd70      	pop	{r4, r5, r6, pc}
 800ed3c:	0000      	movs	r0, r0
	...

0800ed40 <_strtod_l>:
 800ed40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ed44:	ed2d 8b0e 	vpush	{d8-d14}
 800ed48:	b097      	sub	sp, #92	; 0x5c
 800ed4a:	461f      	mov	r7, r3
 800ed4c:	2300      	movs	r3, #0
 800ed4e:	9312      	str	r3, [sp, #72]	; 0x48
 800ed50:	4ba1      	ldr	r3, [pc, #644]	; (800efd8 <_strtod_l+0x298>)
 800ed52:	920d      	str	r2, [sp, #52]	; 0x34
 800ed54:	681b      	ldr	r3, [r3, #0]
 800ed56:	9307      	str	r3, [sp, #28]
 800ed58:	4604      	mov	r4, r0
 800ed5a:	4618      	mov	r0, r3
 800ed5c:	468b      	mov	fp, r1
 800ed5e:	f7f1 fabf 	bl	80002e0 <strlen>
 800ed62:	f04f 0800 	mov.w	r8, #0
 800ed66:	4605      	mov	r5, r0
 800ed68:	f04f 0900 	mov.w	r9, #0
 800ed6c:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
 800ed70:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800ed72:	7813      	ldrb	r3, [r2, #0]
 800ed74:	2b2b      	cmp	r3, #43	; 0x2b
 800ed76:	d04d      	beq.n	800ee14 <_strtod_l+0xd4>
 800ed78:	d83a      	bhi.n	800edf0 <_strtod_l+0xb0>
 800ed7a:	2b0d      	cmp	r3, #13
 800ed7c:	d833      	bhi.n	800ede6 <_strtod_l+0xa6>
 800ed7e:	2b08      	cmp	r3, #8
 800ed80:	d833      	bhi.n	800edea <_strtod_l+0xaa>
 800ed82:	2b00      	cmp	r3, #0
 800ed84:	d03d      	beq.n	800ee02 <_strtod_l+0xc2>
 800ed86:	2300      	movs	r3, #0
 800ed88:	9308      	str	r3, [sp, #32]
 800ed8a:	9e11      	ldr	r6, [sp, #68]	; 0x44
 800ed8c:	7833      	ldrb	r3, [r6, #0]
 800ed8e:	2b30      	cmp	r3, #48	; 0x30
 800ed90:	f040 80b0 	bne.w	800eef4 <_strtod_l+0x1b4>
 800ed94:	7873      	ldrb	r3, [r6, #1]
 800ed96:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800ed9a:	2b58      	cmp	r3, #88	; 0x58
 800ed9c:	d167      	bne.n	800ee6e <_strtod_l+0x12e>
 800ed9e:	9b08      	ldr	r3, [sp, #32]
 800eda0:	9301      	str	r3, [sp, #4]
 800eda2:	ab12      	add	r3, sp, #72	; 0x48
 800eda4:	9702      	str	r7, [sp, #8]
 800eda6:	9300      	str	r3, [sp, #0]
 800eda8:	4a8c      	ldr	r2, [pc, #560]	; (800efdc <_strtod_l+0x29c>)
 800edaa:	ab13      	add	r3, sp, #76	; 0x4c
 800edac:	a911      	add	r1, sp, #68	; 0x44
 800edae:	4620      	mov	r0, r4
 800edb0:	f000 fdf0 	bl	800f994 <__gethex>
 800edb4:	f010 0507 	ands.w	r5, r0, #7
 800edb8:	4607      	mov	r7, r0
 800edba:	d005      	beq.n	800edc8 <_strtod_l+0x88>
 800edbc:	2d06      	cmp	r5, #6
 800edbe:	d12b      	bne.n	800ee18 <_strtod_l+0xd8>
 800edc0:	3601      	adds	r6, #1
 800edc2:	2300      	movs	r3, #0
 800edc4:	9611      	str	r6, [sp, #68]	; 0x44
 800edc6:	9308      	str	r3, [sp, #32]
 800edc8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800edca:	2b00      	cmp	r3, #0
 800edcc:	f040 854e 	bne.w	800f86c <_strtod_l+0xb2c>
 800edd0:	9b08      	ldr	r3, [sp, #32]
 800edd2:	b1e3      	cbz	r3, 800ee0e <_strtod_l+0xce>
 800edd4:	ec49 8b17 	vmov	d7, r8, r9
 800edd8:	eeb1 0b47 	vneg.f64	d0, d7
 800eddc:	b017      	add	sp, #92	; 0x5c
 800edde:	ecbd 8b0e 	vpop	{d8-d14}
 800ede2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ede6:	2b20      	cmp	r3, #32
 800ede8:	d1cd      	bne.n	800ed86 <_strtod_l+0x46>
 800edea:	3201      	adds	r2, #1
 800edec:	9211      	str	r2, [sp, #68]	; 0x44
 800edee:	e7bf      	b.n	800ed70 <_strtod_l+0x30>
 800edf0:	2b2d      	cmp	r3, #45	; 0x2d
 800edf2:	d1c8      	bne.n	800ed86 <_strtod_l+0x46>
 800edf4:	2301      	movs	r3, #1
 800edf6:	9308      	str	r3, [sp, #32]
 800edf8:	1c53      	adds	r3, r2, #1
 800edfa:	9311      	str	r3, [sp, #68]	; 0x44
 800edfc:	7853      	ldrb	r3, [r2, #1]
 800edfe:	2b00      	cmp	r3, #0
 800ee00:	d1c3      	bne.n	800ed8a <_strtod_l+0x4a>
 800ee02:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ee04:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
 800ee08:	2b00      	cmp	r3, #0
 800ee0a:	f040 852d 	bne.w	800f868 <_strtod_l+0xb28>
 800ee0e:	ec49 8b10 	vmov	d0, r8, r9
 800ee12:	e7e3      	b.n	800eddc <_strtod_l+0x9c>
 800ee14:	2300      	movs	r3, #0
 800ee16:	e7ee      	b.n	800edf6 <_strtod_l+0xb6>
 800ee18:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800ee1a:	b13a      	cbz	r2, 800ee2c <_strtod_l+0xec>
 800ee1c:	2135      	movs	r1, #53	; 0x35
 800ee1e:	a814      	add	r0, sp, #80	; 0x50
 800ee20:	f001 fd4c 	bl	80108bc <__copybits>
 800ee24:	9912      	ldr	r1, [sp, #72]	; 0x48
 800ee26:	4620      	mov	r0, r4
 800ee28:	f001 f90e 	bl	8010048 <_Bfree>
 800ee2c:	3d01      	subs	r5, #1
 800ee2e:	2d04      	cmp	r5, #4
 800ee30:	d806      	bhi.n	800ee40 <_strtod_l+0x100>
 800ee32:	e8df f005 	tbb	[pc, r5]
 800ee36:	030a      	.short	0x030a
 800ee38:	1714      	.short	0x1714
 800ee3a:	0a          	.byte	0x0a
 800ee3b:	00          	.byte	0x00
 800ee3c:	e9dd 8914 	ldrd	r8, r9, [sp, #80]	; 0x50
 800ee40:	073f      	lsls	r7, r7, #28
 800ee42:	d5c1      	bpl.n	800edc8 <_strtod_l+0x88>
 800ee44:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 800ee48:	e7be      	b.n	800edc8 <_strtod_l+0x88>
 800ee4a:	e9dd 8314 	ldrd	r8, r3, [sp, #80]	; 0x50
 800ee4e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800ee50:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800ee54:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800ee58:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 800ee5c:	e7f0      	b.n	800ee40 <_strtod_l+0x100>
 800ee5e:	f8df 9180 	ldr.w	r9, [pc, #384]	; 800efe0 <_strtod_l+0x2a0>
 800ee62:	e7ed      	b.n	800ee40 <_strtod_l+0x100>
 800ee64:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 800ee68:	f04f 38ff 	mov.w	r8, #4294967295
 800ee6c:	e7e8      	b.n	800ee40 <_strtod_l+0x100>
 800ee6e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800ee70:	1c5a      	adds	r2, r3, #1
 800ee72:	9211      	str	r2, [sp, #68]	; 0x44
 800ee74:	785b      	ldrb	r3, [r3, #1]
 800ee76:	2b30      	cmp	r3, #48	; 0x30
 800ee78:	d0f9      	beq.n	800ee6e <_strtod_l+0x12e>
 800ee7a:	2b00      	cmp	r3, #0
 800ee7c:	d0a4      	beq.n	800edc8 <_strtod_l+0x88>
 800ee7e:	2301      	movs	r3, #1
 800ee80:	f04f 0a00 	mov.w	sl, #0
 800ee84:	9304      	str	r3, [sp, #16]
 800ee86:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800ee88:	930a      	str	r3, [sp, #40]	; 0x28
 800ee8a:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 800ee8e:	f8cd a018 	str.w	sl, [sp, #24]
 800ee92:	220a      	movs	r2, #10
 800ee94:	9811      	ldr	r0, [sp, #68]	; 0x44
 800ee96:	7807      	ldrb	r7, [r0, #0]
 800ee98:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 800ee9c:	b2d9      	uxtb	r1, r3
 800ee9e:	2909      	cmp	r1, #9
 800eea0:	d92a      	bls.n	800eef8 <_strtod_l+0x1b8>
 800eea2:	9907      	ldr	r1, [sp, #28]
 800eea4:	462a      	mov	r2, r5
 800eea6:	f001 fe0f 	bl	8010ac8 <strncmp>
 800eeaa:	2800      	cmp	r0, #0
 800eeac:	d033      	beq.n	800ef16 <_strtod_l+0x1d6>
 800eeae:	2000      	movs	r0, #0
 800eeb0:	9b06      	ldr	r3, [sp, #24]
 800eeb2:	463a      	mov	r2, r7
 800eeb4:	4601      	mov	r1, r0
 800eeb6:	4607      	mov	r7, r0
 800eeb8:	2a65      	cmp	r2, #101	; 0x65
 800eeba:	d001      	beq.n	800eec0 <_strtod_l+0x180>
 800eebc:	2a45      	cmp	r2, #69	; 0x45
 800eebe:	d117      	bne.n	800eef0 <_strtod_l+0x1b0>
 800eec0:	b91b      	cbnz	r3, 800eeca <_strtod_l+0x18a>
 800eec2:	9b04      	ldr	r3, [sp, #16]
 800eec4:	4303      	orrs	r3, r0
 800eec6:	d09c      	beq.n	800ee02 <_strtod_l+0xc2>
 800eec8:	2300      	movs	r3, #0
 800eeca:	f8dd b044 	ldr.w	fp, [sp, #68]	; 0x44
 800eece:	f10b 0201 	add.w	r2, fp, #1
 800eed2:	9211      	str	r2, [sp, #68]	; 0x44
 800eed4:	f89b 2001 	ldrb.w	r2, [fp, #1]
 800eed8:	2a2b      	cmp	r2, #43	; 0x2b
 800eeda:	d071      	beq.n	800efc0 <_strtod_l+0x280>
 800eedc:	2a2d      	cmp	r2, #45	; 0x2d
 800eede:	d077      	beq.n	800efd0 <_strtod_l+0x290>
 800eee0:	f04f 0e00 	mov.w	lr, #0
 800eee4:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 800eee8:	2d09      	cmp	r5, #9
 800eeea:	d97f      	bls.n	800efec <_strtod_l+0x2ac>
 800eeec:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
 800eef0:	2500      	movs	r5, #0
 800eef2:	e09b      	b.n	800f02c <_strtod_l+0x2ec>
 800eef4:	2300      	movs	r3, #0
 800eef6:	e7c3      	b.n	800ee80 <_strtod_l+0x140>
 800eef8:	9906      	ldr	r1, [sp, #24]
 800eefa:	2908      	cmp	r1, #8
 800eefc:	bfdd      	ittte	le
 800eefe:	9909      	ldrle	r1, [sp, #36]	; 0x24
 800ef00:	fb02 3301 	mlale	r3, r2, r1, r3
 800ef04:	9309      	strle	r3, [sp, #36]	; 0x24
 800ef06:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 800ef0a:	9b06      	ldr	r3, [sp, #24]
 800ef0c:	3001      	adds	r0, #1
 800ef0e:	3301      	adds	r3, #1
 800ef10:	9306      	str	r3, [sp, #24]
 800ef12:	9011      	str	r0, [sp, #68]	; 0x44
 800ef14:	e7be      	b.n	800ee94 <_strtod_l+0x154>
 800ef16:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800ef18:	195a      	adds	r2, r3, r5
 800ef1a:	9211      	str	r2, [sp, #68]	; 0x44
 800ef1c:	5d5a      	ldrb	r2, [r3, r5]
 800ef1e:	9b06      	ldr	r3, [sp, #24]
 800ef20:	b3a3      	cbz	r3, 800ef8c <_strtod_l+0x24c>
 800ef22:	4607      	mov	r7, r0
 800ef24:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800ef28:	2909      	cmp	r1, #9
 800ef2a:	d912      	bls.n	800ef52 <_strtod_l+0x212>
 800ef2c:	2101      	movs	r1, #1
 800ef2e:	e7c3      	b.n	800eeb8 <_strtod_l+0x178>
 800ef30:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800ef32:	1c5a      	adds	r2, r3, #1
 800ef34:	9211      	str	r2, [sp, #68]	; 0x44
 800ef36:	785a      	ldrb	r2, [r3, #1]
 800ef38:	3001      	adds	r0, #1
 800ef3a:	2a30      	cmp	r2, #48	; 0x30
 800ef3c:	d0f8      	beq.n	800ef30 <_strtod_l+0x1f0>
 800ef3e:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800ef42:	2b08      	cmp	r3, #8
 800ef44:	f200 8497 	bhi.w	800f876 <_strtod_l+0xb36>
 800ef48:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800ef4a:	930a      	str	r3, [sp, #40]	; 0x28
 800ef4c:	4607      	mov	r7, r0
 800ef4e:	2000      	movs	r0, #0
 800ef50:	4603      	mov	r3, r0
 800ef52:	3a30      	subs	r2, #48	; 0x30
 800ef54:	f100 0101 	add.w	r1, r0, #1
 800ef58:	d012      	beq.n	800ef80 <_strtod_l+0x240>
 800ef5a:	440f      	add	r7, r1
 800ef5c:	eb00 0c03 	add.w	ip, r0, r3
 800ef60:	4619      	mov	r1, r3
 800ef62:	250a      	movs	r5, #10
 800ef64:	4561      	cmp	r1, ip
 800ef66:	d113      	bne.n	800ef90 <_strtod_l+0x250>
 800ef68:	1819      	adds	r1, r3, r0
 800ef6a:	2908      	cmp	r1, #8
 800ef6c:	f103 0301 	add.w	r3, r3, #1
 800ef70:	4403      	add	r3, r0
 800ef72:	dc1c      	bgt.n	800efae <_strtod_l+0x26e>
 800ef74:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ef76:	210a      	movs	r1, #10
 800ef78:	fb01 2200 	mla	r2, r1, r0, r2
 800ef7c:	9209      	str	r2, [sp, #36]	; 0x24
 800ef7e:	2100      	movs	r1, #0
 800ef80:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800ef82:	1c50      	adds	r0, r2, #1
 800ef84:	9011      	str	r0, [sp, #68]	; 0x44
 800ef86:	7852      	ldrb	r2, [r2, #1]
 800ef88:	4608      	mov	r0, r1
 800ef8a:	e7cb      	b.n	800ef24 <_strtod_l+0x1e4>
 800ef8c:	9806      	ldr	r0, [sp, #24]
 800ef8e:	e7d4      	b.n	800ef3a <_strtod_l+0x1fa>
 800ef90:	2908      	cmp	r1, #8
 800ef92:	dc04      	bgt.n	800ef9e <_strtod_l+0x25e>
 800ef94:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800ef96:	436e      	muls	r6, r5
 800ef98:	9609      	str	r6, [sp, #36]	; 0x24
 800ef9a:	3101      	adds	r1, #1
 800ef9c:	e7e2      	b.n	800ef64 <_strtod_l+0x224>
 800ef9e:	f101 0e01 	add.w	lr, r1, #1
 800efa2:	f1be 0f10 	cmp.w	lr, #16
 800efa6:	bfd8      	it	le
 800efa8:	fb05 fa0a 	mulle.w	sl, r5, sl
 800efac:	e7f5      	b.n	800ef9a <_strtod_l+0x25a>
 800efae:	2b10      	cmp	r3, #16
 800efb0:	bfdc      	itt	le
 800efb2:	210a      	movle	r1, #10
 800efb4:	fb01 2a0a 	mlale	sl, r1, sl, r2
 800efb8:	e7e1      	b.n	800ef7e <_strtod_l+0x23e>
 800efba:	2700      	movs	r7, #0
 800efbc:	2101      	movs	r1, #1
 800efbe:	e780      	b.n	800eec2 <_strtod_l+0x182>
 800efc0:	f04f 0e00 	mov.w	lr, #0
 800efc4:	f10b 0202 	add.w	r2, fp, #2
 800efc8:	9211      	str	r2, [sp, #68]	; 0x44
 800efca:	f89b 2002 	ldrb.w	r2, [fp, #2]
 800efce:	e789      	b.n	800eee4 <_strtod_l+0x1a4>
 800efd0:	f04f 0e01 	mov.w	lr, #1
 800efd4:	e7f6      	b.n	800efc4 <_strtod_l+0x284>
 800efd6:	bf00      	nop
 800efd8:	080124b0 	.word	0x080124b0
 800efdc:	080123e8 	.word	0x080123e8
 800efe0:	7ff00000 	.word	0x7ff00000
 800efe4:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800efe6:	1c55      	adds	r5, r2, #1
 800efe8:	9511      	str	r5, [sp, #68]	; 0x44
 800efea:	7852      	ldrb	r2, [r2, #1]
 800efec:	2a30      	cmp	r2, #48	; 0x30
 800efee:	d0f9      	beq.n	800efe4 <_strtod_l+0x2a4>
 800eff0:	f1a2 0531 	sub.w	r5, r2, #49	; 0x31
 800eff4:	2d08      	cmp	r5, #8
 800eff6:	f63f af7b 	bhi.w	800eef0 <_strtod_l+0x1b0>
 800effa:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 800effe:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800f000:	9207      	str	r2, [sp, #28]
 800f002:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800f004:	1c55      	adds	r5, r2, #1
 800f006:	9511      	str	r5, [sp, #68]	; 0x44
 800f008:	7852      	ldrb	r2, [r2, #1]
 800f00a:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 800f00e:	2e09      	cmp	r6, #9
 800f010:	d937      	bls.n	800f082 <_strtod_l+0x342>
 800f012:	9e07      	ldr	r6, [sp, #28]
 800f014:	1bad      	subs	r5, r5, r6
 800f016:	2d08      	cmp	r5, #8
 800f018:	f644 651f 	movw	r5, #19999	; 0x4e1f
 800f01c:	dc02      	bgt.n	800f024 <_strtod_l+0x2e4>
 800f01e:	4565      	cmp	r5, ip
 800f020:	bfa8      	it	ge
 800f022:	4665      	movge	r5, ip
 800f024:	f1be 0f00 	cmp.w	lr, #0
 800f028:	d000      	beq.n	800f02c <_strtod_l+0x2ec>
 800f02a:	426d      	negs	r5, r5
 800f02c:	2b00      	cmp	r3, #0
 800f02e:	d14d      	bne.n	800f0cc <_strtod_l+0x38c>
 800f030:	9b04      	ldr	r3, [sp, #16]
 800f032:	4303      	orrs	r3, r0
 800f034:	f47f aec8 	bne.w	800edc8 <_strtod_l+0x88>
 800f038:	2900      	cmp	r1, #0
 800f03a:	f47f aee2 	bne.w	800ee02 <_strtod_l+0xc2>
 800f03e:	2a69      	cmp	r2, #105	; 0x69
 800f040:	d027      	beq.n	800f092 <_strtod_l+0x352>
 800f042:	dc24      	bgt.n	800f08e <_strtod_l+0x34e>
 800f044:	2a49      	cmp	r2, #73	; 0x49
 800f046:	d024      	beq.n	800f092 <_strtod_l+0x352>
 800f048:	2a4e      	cmp	r2, #78	; 0x4e
 800f04a:	f47f aeda 	bne.w	800ee02 <_strtod_l+0xc2>
 800f04e:	4996      	ldr	r1, [pc, #600]	; (800f2a8 <_strtod_l+0x568>)
 800f050:	a811      	add	r0, sp, #68	; 0x44
 800f052:	f000 fef7 	bl	800fe44 <__match>
 800f056:	2800      	cmp	r0, #0
 800f058:	f43f aed3 	beq.w	800ee02 <_strtod_l+0xc2>
 800f05c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800f05e:	781b      	ldrb	r3, [r3, #0]
 800f060:	2b28      	cmp	r3, #40	; 0x28
 800f062:	d12d      	bne.n	800f0c0 <_strtod_l+0x380>
 800f064:	4991      	ldr	r1, [pc, #580]	; (800f2ac <_strtod_l+0x56c>)
 800f066:	aa14      	add	r2, sp, #80	; 0x50
 800f068:	a811      	add	r0, sp, #68	; 0x44
 800f06a:	f000 feff 	bl	800fe6c <__hexnan>
 800f06e:	2805      	cmp	r0, #5
 800f070:	d126      	bne.n	800f0c0 <_strtod_l+0x380>
 800f072:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800f074:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 800f078:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 800f07c:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 800f080:	e6a2      	b.n	800edc8 <_strtod_l+0x88>
 800f082:	250a      	movs	r5, #10
 800f084:	fb05 250c 	mla	r5, r5, ip, r2
 800f088:	f1a5 0c30 	sub.w	ip, r5, #48	; 0x30
 800f08c:	e7b9      	b.n	800f002 <_strtod_l+0x2c2>
 800f08e:	2a6e      	cmp	r2, #110	; 0x6e
 800f090:	e7db      	b.n	800f04a <_strtod_l+0x30a>
 800f092:	4987      	ldr	r1, [pc, #540]	; (800f2b0 <_strtod_l+0x570>)
 800f094:	a811      	add	r0, sp, #68	; 0x44
 800f096:	f000 fed5 	bl	800fe44 <__match>
 800f09a:	2800      	cmp	r0, #0
 800f09c:	f43f aeb1 	beq.w	800ee02 <_strtod_l+0xc2>
 800f0a0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800f0a2:	4984      	ldr	r1, [pc, #528]	; (800f2b4 <_strtod_l+0x574>)
 800f0a4:	3b01      	subs	r3, #1
 800f0a6:	a811      	add	r0, sp, #68	; 0x44
 800f0a8:	9311      	str	r3, [sp, #68]	; 0x44
 800f0aa:	f000 fecb 	bl	800fe44 <__match>
 800f0ae:	b910      	cbnz	r0, 800f0b6 <_strtod_l+0x376>
 800f0b0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800f0b2:	3301      	adds	r3, #1
 800f0b4:	9311      	str	r3, [sp, #68]	; 0x44
 800f0b6:	f8df 9210 	ldr.w	r9, [pc, #528]	; 800f2c8 <_strtod_l+0x588>
 800f0ba:	f04f 0800 	mov.w	r8, #0
 800f0be:	e683      	b.n	800edc8 <_strtod_l+0x88>
 800f0c0:	487d      	ldr	r0, [pc, #500]	; (800f2b8 <_strtod_l+0x578>)
 800f0c2:	f001 fce9 	bl	8010a98 <nan>
 800f0c6:	ec59 8b10 	vmov	r8, r9, d0
 800f0ca:	e67d      	b.n	800edc8 <_strtod_l+0x88>
 800f0cc:	1bea      	subs	r2, r5, r7
 800f0ce:	eddd 7a09 	vldr	s15, [sp, #36]	; 0x24
 800f0d2:	9207      	str	r2, [sp, #28]
 800f0d4:	9a06      	ldr	r2, [sp, #24]
 800f0d6:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800f0da:	2a00      	cmp	r2, #0
 800f0dc:	bf08      	it	eq
 800f0de:	461a      	moveq	r2, r3
 800f0e0:	2b10      	cmp	r3, #16
 800f0e2:	9206      	str	r2, [sp, #24]
 800f0e4:	461a      	mov	r2, r3
 800f0e6:	bfa8      	it	ge
 800f0e8:	2210      	movge	r2, #16
 800f0ea:	2b09      	cmp	r3, #9
 800f0ec:	ec59 8b17 	vmov	r8, r9, d7
 800f0f0:	dd0c      	ble.n	800f10c <_strtod_l+0x3cc>
 800f0f2:	4972      	ldr	r1, [pc, #456]	; (800f2bc <_strtod_l+0x57c>)
 800f0f4:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 800f0f8:	ed11 5b12 	vldr	d5, [r1, #-72]	; 0xffffffb8
 800f0fc:	ee06 aa90 	vmov	s13, sl
 800f100:	eeb8 6b66 	vcvt.f64.u32	d6, s13
 800f104:	eea7 6b05 	vfma.f64	d6, d7, d5
 800f108:	ec59 8b16 	vmov	r8, r9, d6
 800f10c:	2b0f      	cmp	r3, #15
 800f10e:	dc36      	bgt.n	800f17e <_strtod_l+0x43e>
 800f110:	9907      	ldr	r1, [sp, #28]
 800f112:	2900      	cmp	r1, #0
 800f114:	f43f ae58 	beq.w	800edc8 <_strtod_l+0x88>
 800f118:	dd23      	ble.n	800f162 <_strtod_l+0x422>
 800f11a:	2916      	cmp	r1, #22
 800f11c:	dc0b      	bgt.n	800f136 <_strtod_l+0x3f6>
 800f11e:	4b67      	ldr	r3, [pc, #412]	; (800f2bc <_strtod_l+0x57c>)
 800f120:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 800f124:	ed93 7b00 	vldr	d7, [r3]
 800f128:	ec49 8b16 	vmov	d6, r8, r9
 800f12c:	ee27 7b06 	vmul.f64	d7, d7, d6
 800f130:	ec59 8b17 	vmov	r8, r9, d7
 800f134:	e648      	b.n	800edc8 <_strtod_l+0x88>
 800f136:	9807      	ldr	r0, [sp, #28]
 800f138:	f1c3 0125 	rsb	r1, r3, #37	; 0x25
 800f13c:	4281      	cmp	r1, r0
 800f13e:	db1e      	blt.n	800f17e <_strtod_l+0x43e>
 800f140:	4a5e      	ldr	r2, [pc, #376]	; (800f2bc <_strtod_l+0x57c>)
 800f142:	f1c3 030f 	rsb	r3, r3, #15
 800f146:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 800f14a:	ed91 7b00 	vldr	d7, [r1]
 800f14e:	ec49 8b16 	vmov	d6, r8, r9
 800f152:	1ac3      	subs	r3, r0, r3
 800f154:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 800f158:	ee27 7b06 	vmul.f64	d7, d7, d6
 800f15c:	ed92 6b00 	vldr	d6, [r2]
 800f160:	e7e4      	b.n	800f12c <_strtod_l+0x3ec>
 800f162:	9907      	ldr	r1, [sp, #28]
 800f164:	3116      	adds	r1, #22
 800f166:	db0a      	blt.n	800f17e <_strtod_l+0x43e>
 800f168:	4b54      	ldr	r3, [pc, #336]	; (800f2bc <_strtod_l+0x57c>)
 800f16a:	1b7d      	subs	r5, r7, r5
 800f16c:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800f170:	ed95 7b00 	vldr	d7, [r5]
 800f174:	ec49 8b16 	vmov	d6, r8, r9
 800f178:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800f17c:	e7d8      	b.n	800f130 <_strtod_l+0x3f0>
 800f17e:	9907      	ldr	r1, [sp, #28]
 800f180:	1a9a      	subs	r2, r3, r2
 800f182:	440a      	add	r2, r1
 800f184:	2a00      	cmp	r2, #0
 800f186:	dd6f      	ble.n	800f268 <_strtod_l+0x528>
 800f188:	f012 000f 	ands.w	r0, r2, #15
 800f18c:	d00a      	beq.n	800f1a4 <_strtod_l+0x464>
 800f18e:	494b      	ldr	r1, [pc, #300]	; (800f2bc <_strtod_l+0x57c>)
 800f190:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 800f194:	ed91 7b00 	vldr	d7, [r1]
 800f198:	ec49 8b16 	vmov	d6, r8, r9
 800f19c:	ee27 7b06 	vmul.f64	d7, d7, d6
 800f1a0:	ec59 8b17 	vmov	r8, r9, d7
 800f1a4:	f032 020f 	bics.w	r2, r2, #15
 800f1a8:	d04f      	beq.n	800f24a <_strtod_l+0x50a>
 800f1aa:	f5b2 7f9a 	cmp.w	r2, #308	; 0x134
 800f1ae:	dd22      	ble.n	800f1f6 <_strtod_l+0x4b6>
 800f1b0:	2500      	movs	r5, #0
 800f1b2:	462e      	mov	r6, r5
 800f1b4:	9506      	str	r5, [sp, #24]
 800f1b6:	462f      	mov	r7, r5
 800f1b8:	2322      	movs	r3, #34	; 0x22
 800f1ba:	f8df 910c 	ldr.w	r9, [pc, #268]	; 800f2c8 <_strtod_l+0x588>
 800f1be:	6023      	str	r3, [r4, #0]
 800f1c0:	f04f 0800 	mov.w	r8, #0
 800f1c4:	9b06      	ldr	r3, [sp, #24]
 800f1c6:	2b00      	cmp	r3, #0
 800f1c8:	f43f adfe 	beq.w	800edc8 <_strtod_l+0x88>
 800f1cc:	9912      	ldr	r1, [sp, #72]	; 0x48
 800f1ce:	4620      	mov	r0, r4
 800f1d0:	f000 ff3a 	bl	8010048 <_Bfree>
 800f1d4:	4639      	mov	r1, r7
 800f1d6:	4620      	mov	r0, r4
 800f1d8:	f000 ff36 	bl	8010048 <_Bfree>
 800f1dc:	4631      	mov	r1, r6
 800f1de:	4620      	mov	r0, r4
 800f1e0:	f000 ff32 	bl	8010048 <_Bfree>
 800f1e4:	9906      	ldr	r1, [sp, #24]
 800f1e6:	4620      	mov	r0, r4
 800f1e8:	f000 ff2e 	bl	8010048 <_Bfree>
 800f1ec:	4629      	mov	r1, r5
 800f1ee:	4620      	mov	r0, r4
 800f1f0:	f000 ff2a 	bl	8010048 <_Bfree>
 800f1f4:	e5e8      	b.n	800edc8 <_strtod_l+0x88>
 800f1f6:	2000      	movs	r0, #0
 800f1f8:	ec49 8b17 	vmov	d7, r8, r9
 800f1fc:	f8df c0c0 	ldr.w	ip, [pc, #192]	; 800f2c0 <_strtod_l+0x580>
 800f200:	1112      	asrs	r2, r2, #4
 800f202:	4601      	mov	r1, r0
 800f204:	2a01      	cmp	r2, #1
 800f206:	dc23      	bgt.n	800f250 <_strtod_l+0x510>
 800f208:	b108      	cbz	r0, 800f20e <_strtod_l+0x4ce>
 800f20a:	ec59 8b17 	vmov	r8, r9, d7
 800f20e:	4a2c      	ldr	r2, [pc, #176]	; (800f2c0 <_strtod_l+0x580>)
 800f210:	482c      	ldr	r0, [pc, #176]	; (800f2c4 <_strtod_l+0x584>)
 800f212:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800f216:	ed92 7b00 	vldr	d7, [r2]
 800f21a:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 800f21e:	ec49 8b16 	vmov	d6, r8, r9
 800f222:	4a29      	ldr	r2, [pc, #164]	; (800f2c8 <_strtod_l+0x588>)
 800f224:	ee27 7b06 	vmul.f64	d7, d7, d6
 800f228:	ee17 1a90 	vmov	r1, s15
 800f22c:	400a      	ands	r2, r1
 800f22e:	4282      	cmp	r2, r0
 800f230:	ec59 8b17 	vmov	r8, r9, d7
 800f234:	d8bc      	bhi.n	800f1b0 <_strtod_l+0x470>
 800f236:	f5a0 1080 	sub.w	r0, r0, #1048576	; 0x100000
 800f23a:	4282      	cmp	r2, r0
 800f23c:	bf86      	itte	hi
 800f23e:	f8df 908c 	ldrhi.w	r9, [pc, #140]	; 800f2cc <_strtod_l+0x58c>
 800f242:	f04f 38ff 	movhi.w	r8, #4294967295
 800f246:	f101 7954 	addls.w	r9, r1, #55574528	; 0x3500000
 800f24a:	2200      	movs	r2, #0
 800f24c:	9204      	str	r2, [sp, #16]
 800f24e:	e078      	b.n	800f342 <_strtod_l+0x602>
 800f250:	07d6      	lsls	r6, r2, #31
 800f252:	d504      	bpl.n	800f25e <_strtod_l+0x51e>
 800f254:	ed9c 6b00 	vldr	d6, [ip]
 800f258:	2001      	movs	r0, #1
 800f25a:	ee27 7b06 	vmul.f64	d7, d7, d6
 800f25e:	3101      	adds	r1, #1
 800f260:	1052      	asrs	r2, r2, #1
 800f262:	f10c 0c08 	add.w	ip, ip, #8
 800f266:	e7cd      	b.n	800f204 <_strtod_l+0x4c4>
 800f268:	d0ef      	beq.n	800f24a <_strtod_l+0x50a>
 800f26a:	4252      	negs	r2, r2
 800f26c:	f012 000f 	ands.w	r0, r2, #15
 800f270:	d00a      	beq.n	800f288 <_strtod_l+0x548>
 800f272:	4912      	ldr	r1, [pc, #72]	; (800f2bc <_strtod_l+0x57c>)
 800f274:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 800f278:	ed91 7b00 	vldr	d7, [r1]
 800f27c:	ec49 8b16 	vmov	d6, r8, r9
 800f280:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800f284:	ec59 8b17 	vmov	r8, r9, d7
 800f288:	1112      	asrs	r2, r2, #4
 800f28a:	d0de      	beq.n	800f24a <_strtod_l+0x50a>
 800f28c:	2a1f      	cmp	r2, #31
 800f28e:	dd1f      	ble.n	800f2d0 <_strtod_l+0x590>
 800f290:	2500      	movs	r5, #0
 800f292:	462e      	mov	r6, r5
 800f294:	9506      	str	r5, [sp, #24]
 800f296:	462f      	mov	r7, r5
 800f298:	2322      	movs	r3, #34	; 0x22
 800f29a:	f04f 0800 	mov.w	r8, #0
 800f29e:	f04f 0900 	mov.w	r9, #0
 800f2a2:	6023      	str	r3, [r4, #0]
 800f2a4:	e78e      	b.n	800f1c4 <_strtod_l+0x484>
 800f2a6:	bf00      	nop
 800f2a8:	080123e5 	.word	0x080123e5
 800f2ac:	080123fc 	.word	0x080123fc
 800f2b0:	080123dc 	.word	0x080123dc
 800f2b4:	080123df 	.word	0x080123df
 800f2b8:	0801266f 	.word	0x0801266f
 800f2bc:	08012560 	.word	0x08012560
 800f2c0:	08012538 	.word	0x08012538
 800f2c4:	7ca00000 	.word	0x7ca00000
 800f2c8:	7ff00000 	.word	0x7ff00000
 800f2cc:	7fefffff 	.word	0x7fefffff
 800f2d0:	f012 0110 	ands.w	r1, r2, #16
 800f2d4:	bf18      	it	ne
 800f2d6:	216a      	movne	r1, #106	; 0x6a
 800f2d8:	9104      	str	r1, [sp, #16]
 800f2da:	ec49 8b17 	vmov	d7, r8, r9
 800f2de:	49be      	ldr	r1, [pc, #760]	; (800f5d8 <_strtod_l+0x898>)
 800f2e0:	2000      	movs	r0, #0
 800f2e2:	07d6      	lsls	r6, r2, #31
 800f2e4:	d504      	bpl.n	800f2f0 <_strtod_l+0x5b0>
 800f2e6:	ed91 6b00 	vldr	d6, [r1]
 800f2ea:	2001      	movs	r0, #1
 800f2ec:	ee27 7b06 	vmul.f64	d7, d7, d6
 800f2f0:	1052      	asrs	r2, r2, #1
 800f2f2:	f101 0108 	add.w	r1, r1, #8
 800f2f6:	d1f4      	bne.n	800f2e2 <_strtod_l+0x5a2>
 800f2f8:	b108      	cbz	r0, 800f2fe <_strtod_l+0x5be>
 800f2fa:	ec59 8b17 	vmov	r8, r9, d7
 800f2fe:	9a04      	ldr	r2, [sp, #16]
 800f300:	b1c2      	cbz	r2, 800f334 <_strtod_l+0x5f4>
 800f302:	f3c9 510a 	ubfx	r1, r9, #20, #11
 800f306:	f1c1 026b 	rsb	r2, r1, #107	; 0x6b
 800f30a:	2a00      	cmp	r2, #0
 800f30c:	4648      	mov	r0, r9
 800f30e:	dd11      	ble.n	800f334 <_strtod_l+0x5f4>
 800f310:	2a1f      	cmp	r2, #31
 800f312:	f340 812e 	ble.w	800f572 <_strtod_l+0x832>
 800f316:	2a34      	cmp	r2, #52	; 0x34
 800f318:	bfde      	ittt	le
 800f31a:	f1c1 014b 	rsble	r1, r1, #75	; 0x4b
 800f31e:	f04f 32ff 	movle.w	r2, #4294967295
 800f322:	fa02 f101 	lslle.w	r1, r2, r1
 800f326:	f04f 0800 	mov.w	r8, #0
 800f32a:	bfcc      	ite	gt
 800f32c:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 800f330:	ea01 0900 	andle.w	r9, r1, r0
 800f334:	ec49 8b17 	vmov	d7, r8, r9
 800f338:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800f33c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f340:	d0a6      	beq.n	800f290 <_strtod_l+0x550>
 800f342:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f344:	9200      	str	r2, [sp, #0]
 800f346:	990a      	ldr	r1, [sp, #40]	; 0x28
 800f348:	9a06      	ldr	r2, [sp, #24]
 800f34a:	4620      	mov	r0, r4
 800f34c:	f000 fee4 	bl	8010118 <__s2b>
 800f350:	9006      	str	r0, [sp, #24]
 800f352:	2800      	cmp	r0, #0
 800f354:	f43f af2c 	beq.w	800f1b0 <_strtod_l+0x470>
 800f358:	9b07      	ldr	r3, [sp, #28]
 800f35a:	1b7d      	subs	r5, r7, r5
 800f35c:	2b00      	cmp	r3, #0
 800f35e:	bfb4      	ite	lt
 800f360:	462b      	movlt	r3, r5
 800f362:	2300      	movge	r3, #0
 800f364:	9309      	str	r3, [sp, #36]	; 0x24
 800f366:	9b07      	ldr	r3, [sp, #28]
 800f368:	ed9f 9b93 	vldr	d9, [pc, #588]	; 800f5b8 <_strtod_l+0x878>
 800f36c:	ed9f ab94 	vldr	d10, [pc, #592]	; 800f5c0 <_strtod_l+0x880>
 800f370:	ed9f bb95 	vldr	d11, [pc, #596]	; 800f5c8 <_strtod_l+0x888>
 800f374:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800f378:	2500      	movs	r5, #0
 800f37a:	930c      	str	r3, [sp, #48]	; 0x30
 800f37c:	462e      	mov	r6, r5
 800f37e:	9b06      	ldr	r3, [sp, #24]
 800f380:	4620      	mov	r0, r4
 800f382:	6859      	ldr	r1, [r3, #4]
 800f384:	f000 fe20 	bl	800ffc8 <_Balloc>
 800f388:	4607      	mov	r7, r0
 800f38a:	2800      	cmp	r0, #0
 800f38c:	f43f af14 	beq.w	800f1b8 <_strtod_l+0x478>
 800f390:	9b06      	ldr	r3, [sp, #24]
 800f392:	691a      	ldr	r2, [r3, #16]
 800f394:	3202      	adds	r2, #2
 800f396:	f103 010c 	add.w	r1, r3, #12
 800f39a:	0092      	lsls	r2, r2, #2
 800f39c:	300c      	adds	r0, #12
 800f39e:	f7ff fc9d 	bl	800ecdc <memcpy>
 800f3a2:	ec49 8b10 	vmov	d0, r8, r9
 800f3a6:	aa14      	add	r2, sp, #80	; 0x50
 800f3a8:	a913      	add	r1, sp, #76	; 0x4c
 800f3aa:	4620      	mov	r0, r4
 800f3ac:	f001 f9fa 	bl	80107a4 <__d2b>
 800f3b0:	ec49 8b18 	vmov	d8, r8, r9
 800f3b4:	9012      	str	r0, [sp, #72]	; 0x48
 800f3b6:	2800      	cmp	r0, #0
 800f3b8:	f43f aefe 	beq.w	800f1b8 <_strtod_l+0x478>
 800f3bc:	2101      	movs	r1, #1
 800f3be:	4620      	mov	r0, r4
 800f3c0:	f000 ff44 	bl	801024c <__i2b>
 800f3c4:	4606      	mov	r6, r0
 800f3c6:	2800      	cmp	r0, #0
 800f3c8:	f43f aef6 	beq.w	800f1b8 <_strtod_l+0x478>
 800f3cc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800f3ce:	9914      	ldr	r1, [sp, #80]	; 0x50
 800f3d0:	2b00      	cmp	r3, #0
 800f3d2:	bfab      	itete	ge
 800f3d4:	9a09      	ldrge	r2, [sp, #36]	; 0x24
 800f3d6:	9a0c      	ldrlt	r2, [sp, #48]	; 0x30
 800f3d8:	f8dd a030 	ldrge.w	sl, [sp, #48]	; 0x30
 800f3dc:	f8dd b024 	ldrlt.w	fp, [sp, #36]	; 0x24
 800f3e0:	bfac      	ite	ge
 800f3e2:	eb03 0b02 	addge.w	fp, r3, r2
 800f3e6:	eba2 0a03 	sublt.w	sl, r2, r3
 800f3ea:	9a04      	ldr	r2, [sp, #16]
 800f3ec:	1a9b      	subs	r3, r3, r2
 800f3ee:	440b      	add	r3, r1
 800f3f0:	4a7a      	ldr	r2, [pc, #488]	; (800f5dc <_strtod_l+0x89c>)
 800f3f2:	3b01      	subs	r3, #1
 800f3f4:	4293      	cmp	r3, r2
 800f3f6:	f1c1 0136 	rsb	r1, r1, #54	; 0x36
 800f3fa:	f280 80cd 	bge.w	800f598 <_strtod_l+0x858>
 800f3fe:	1ad2      	subs	r2, r2, r3
 800f400:	2a1f      	cmp	r2, #31
 800f402:	eba1 0102 	sub.w	r1, r1, r2
 800f406:	f04f 0001 	mov.w	r0, #1
 800f40a:	f300 80b9 	bgt.w	800f580 <_strtod_l+0x840>
 800f40e:	fa00 f302 	lsl.w	r3, r0, r2
 800f412:	930b      	str	r3, [sp, #44]	; 0x2c
 800f414:	2300      	movs	r3, #0
 800f416:	930a      	str	r3, [sp, #40]	; 0x28
 800f418:	eb0b 0301 	add.w	r3, fp, r1
 800f41c:	9a04      	ldr	r2, [sp, #16]
 800f41e:	459b      	cmp	fp, r3
 800f420:	448a      	add	sl, r1
 800f422:	4492      	add	sl, r2
 800f424:	465a      	mov	r2, fp
 800f426:	bfa8      	it	ge
 800f428:	461a      	movge	r2, r3
 800f42a:	4552      	cmp	r2, sl
 800f42c:	bfa8      	it	ge
 800f42e:	4652      	movge	r2, sl
 800f430:	2a00      	cmp	r2, #0
 800f432:	bfc2      	ittt	gt
 800f434:	1a9b      	subgt	r3, r3, r2
 800f436:	ebaa 0a02 	subgt.w	sl, sl, r2
 800f43a:	ebab 0b02 	subgt.w	fp, fp, r2
 800f43e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f440:	2a00      	cmp	r2, #0
 800f442:	dd18      	ble.n	800f476 <_strtod_l+0x736>
 800f444:	4631      	mov	r1, r6
 800f446:	4620      	mov	r0, r4
 800f448:	930f      	str	r3, [sp, #60]	; 0x3c
 800f44a:	f000 ffbf 	bl	80103cc <__pow5mult>
 800f44e:	4606      	mov	r6, r0
 800f450:	2800      	cmp	r0, #0
 800f452:	f43f aeb1 	beq.w	800f1b8 <_strtod_l+0x478>
 800f456:	4601      	mov	r1, r0
 800f458:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800f45a:	4620      	mov	r0, r4
 800f45c:	f000 ff0c 	bl	8010278 <__multiply>
 800f460:	900e      	str	r0, [sp, #56]	; 0x38
 800f462:	2800      	cmp	r0, #0
 800f464:	f43f aea8 	beq.w	800f1b8 <_strtod_l+0x478>
 800f468:	9912      	ldr	r1, [sp, #72]	; 0x48
 800f46a:	4620      	mov	r0, r4
 800f46c:	f000 fdec 	bl	8010048 <_Bfree>
 800f470:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800f472:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800f474:	9212      	str	r2, [sp, #72]	; 0x48
 800f476:	2b00      	cmp	r3, #0
 800f478:	f300 8093 	bgt.w	800f5a2 <_strtod_l+0x862>
 800f47c:	9b07      	ldr	r3, [sp, #28]
 800f47e:	2b00      	cmp	r3, #0
 800f480:	dd08      	ble.n	800f494 <_strtod_l+0x754>
 800f482:	4639      	mov	r1, r7
 800f484:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800f486:	4620      	mov	r0, r4
 800f488:	f000 ffa0 	bl	80103cc <__pow5mult>
 800f48c:	4607      	mov	r7, r0
 800f48e:	2800      	cmp	r0, #0
 800f490:	f43f ae92 	beq.w	800f1b8 <_strtod_l+0x478>
 800f494:	f1ba 0f00 	cmp.w	sl, #0
 800f498:	dd08      	ble.n	800f4ac <_strtod_l+0x76c>
 800f49a:	4639      	mov	r1, r7
 800f49c:	4652      	mov	r2, sl
 800f49e:	4620      	mov	r0, r4
 800f4a0:	f000 ffee 	bl	8010480 <__lshift>
 800f4a4:	4607      	mov	r7, r0
 800f4a6:	2800      	cmp	r0, #0
 800f4a8:	f43f ae86 	beq.w	800f1b8 <_strtod_l+0x478>
 800f4ac:	f1bb 0f00 	cmp.w	fp, #0
 800f4b0:	dd08      	ble.n	800f4c4 <_strtod_l+0x784>
 800f4b2:	4631      	mov	r1, r6
 800f4b4:	465a      	mov	r2, fp
 800f4b6:	4620      	mov	r0, r4
 800f4b8:	f000 ffe2 	bl	8010480 <__lshift>
 800f4bc:	4606      	mov	r6, r0
 800f4be:	2800      	cmp	r0, #0
 800f4c0:	f43f ae7a 	beq.w	800f1b8 <_strtod_l+0x478>
 800f4c4:	9912      	ldr	r1, [sp, #72]	; 0x48
 800f4c6:	463a      	mov	r2, r7
 800f4c8:	4620      	mov	r0, r4
 800f4ca:	f001 f865 	bl	8010598 <__mdiff>
 800f4ce:	4605      	mov	r5, r0
 800f4d0:	2800      	cmp	r0, #0
 800f4d2:	f43f ae71 	beq.w	800f1b8 <_strtod_l+0x478>
 800f4d6:	2300      	movs	r3, #0
 800f4d8:	f8d0 a00c 	ldr.w	sl, [r0, #12]
 800f4dc:	60c3      	str	r3, [r0, #12]
 800f4de:	4631      	mov	r1, r6
 800f4e0:	f001 f83e 	bl	8010560 <__mcmp>
 800f4e4:	2800      	cmp	r0, #0
 800f4e6:	da7d      	bge.n	800f5e4 <_strtod_l+0x8a4>
 800f4e8:	ea5a 0308 	orrs.w	r3, sl, r8
 800f4ec:	f040 80a3 	bne.w	800f636 <_strtod_l+0x8f6>
 800f4f0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800f4f4:	2b00      	cmp	r3, #0
 800f4f6:	f040 809e 	bne.w	800f636 <_strtod_l+0x8f6>
 800f4fa:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800f4fe:	0d1b      	lsrs	r3, r3, #20
 800f500:	051b      	lsls	r3, r3, #20
 800f502:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800f506:	f240 8096 	bls.w	800f636 <_strtod_l+0x8f6>
 800f50a:	696b      	ldr	r3, [r5, #20]
 800f50c:	b91b      	cbnz	r3, 800f516 <_strtod_l+0x7d6>
 800f50e:	692b      	ldr	r3, [r5, #16]
 800f510:	2b01      	cmp	r3, #1
 800f512:	f340 8090 	ble.w	800f636 <_strtod_l+0x8f6>
 800f516:	4629      	mov	r1, r5
 800f518:	2201      	movs	r2, #1
 800f51a:	4620      	mov	r0, r4
 800f51c:	f000 ffb0 	bl	8010480 <__lshift>
 800f520:	4631      	mov	r1, r6
 800f522:	4605      	mov	r5, r0
 800f524:	f001 f81c 	bl	8010560 <__mcmp>
 800f528:	2800      	cmp	r0, #0
 800f52a:	f340 8084 	ble.w	800f636 <_strtod_l+0x8f6>
 800f52e:	9904      	ldr	r1, [sp, #16]
 800f530:	4a2b      	ldr	r2, [pc, #172]	; (800f5e0 <_strtod_l+0x8a0>)
 800f532:	464b      	mov	r3, r9
 800f534:	2900      	cmp	r1, #0
 800f536:	f000 809d 	beq.w	800f674 <_strtod_l+0x934>
 800f53a:	ea02 0109 	and.w	r1, r2, r9
 800f53e:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800f542:	f300 8097 	bgt.w	800f674 <_strtod_l+0x934>
 800f546:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800f54a:	f77f aea5 	ble.w	800f298 <_strtod_l+0x558>
 800f54e:	ed9f 7b20 	vldr	d7, [pc, #128]	; 800f5d0 <_strtod_l+0x890>
 800f552:	ec49 8b16 	vmov	d6, r8, r9
 800f556:	ee26 7b07 	vmul.f64	d7, d6, d7
 800f55a:	ed8d 7b04 	vstr	d7, [sp, #16]
 800f55e:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
 800f562:	4313      	orrs	r3, r2
 800f564:	bf08      	it	eq
 800f566:	2322      	moveq	r3, #34	; 0x22
 800f568:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800f56c:	bf08      	it	eq
 800f56e:	6023      	streq	r3, [r4, #0]
 800f570:	e62c      	b.n	800f1cc <_strtod_l+0x48c>
 800f572:	f04f 31ff 	mov.w	r1, #4294967295
 800f576:	fa01 f202 	lsl.w	r2, r1, r2
 800f57a:	ea02 0808 	and.w	r8, r2, r8
 800f57e:	e6d9      	b.n	800f334 <_strtod_l+0x5f4>
 800f580:	f1c3 437f 	rsb	r3, r3, #4278190080	; 0xff000000
 800f584:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
 800f588:	f503 437b 	add.w	r3, r3, #64256	; 0xfb00
 800f58c:	33e2      	adds	r3, #226	; 0xe2
 800f58e:	fa00 f303 	lsl.w	r3, r0, r3
 800f592:	e9cd 300a 	strd	r3, r0, [sp, #40]	; 0x28
 800f596:	e73f      	b.n	800f418 <_strtod_l+0x6d8>
 800f598:	2200      	movs	r2, #0
 800f59a:	2301      	movs	r3, #1
 800f59c:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800f5a0:	e73a      	b.n	800f418 <_strtod_l+0x6d8>
 800f5a2:	9912      	ldr	r1, [sp, #72]	; 0x48
 800f5a4:	461a      	mov	r2, r3
 800f5a6:	4620      	mov	r0, r4
 800f5a8:	f000 ff6a 	bl	8010480 <__lshift>
 800f5ac:	9012      	str	r0, [sp, #72]	; 0x48
 800f5ae:	2800      	cmp	r0, #0
 800f5b0:	f47f af64 	bne.w	800f47c <_strtod_l+0x73c>
 800f5b4:	e600      	b.n	800f1b8 <_strtod_l+0x478>
 800f5b6:	bf00      	nop
 800f5b8:	94a03595 	.word	0x94a03595
 800f5bc:	3fcfffff 	.word	0x3fcfffff
 800f5c0:	94a03595 	.word	0x94a03595
 800f5c4:	3fdfffff 	.word	0x3fdfffff
 800f5c8:	35afe535 	.word	0x35afe535
 800f5cc:	3fe00000 	.word	0x3fe00000
 800f5d0:	00000000 	.word	0x00000000
 800f5d4:	39500000 	.word	0x39500000
 800f5d8:	08012410 	.word	0x08012410
 800f5dc:	fffffc02 	.word	0xfffffc02
 800f5e0:	7ff00000 	.word	0x7ff00000
 800f5e4:	46cb      	mov	fp, r9
 800f5e6:	d15f      	bne.n	800f6a8 <_strtod_l+0x968>
 800f5e8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800f5ec:	f1ba 0f00 	cmp.w	sl, #0
 800f5f0:	d02a      	beq.n	800f648 <_strtod_l+0x908>
 800f5f2:	4aa7      	ldr	r2, [pc, #668]	; (800f890 <_strtod_l+0xb50>)
 800f5f4:	4293      	cmp	r3, r2
 800f5f6:	d12b      	bne.n	800f650 <_strtod_l+0x910>
 800f5f8:	9b04      	ldr	r3, [sp, #16]
 800f5fa:	4642      	mov	r2, r8
 800f5fc:	b1fb      	cbz	r3, 800f63e <_strtod_l+0x8fe>
 800f5fe:	4ba5      	ldr	r3, [pc, #660]	; (800f894 <_strtod_l+0xb54>)
 800f600:	ea09 0303 	and.w	r3, r9, r3
 800f604:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800f608:	f04f 31ff 	mov.w	r1, #4294967295
 800f60c:	d81a      	bhi.n	800f644 <_strtod_l+0x904>
 800f60e:	0d1b      	lsrs	r3, r3, #20
 800f610:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800f614:	fa01 f303 	lsl.w	r3, r1, r3
 800f618:	429a      	cmp	r2, r3
 800f61a:	d119      	bne.n	800f650 <_strtod_l+0x910>
 800f61c:	4b9e      	ldr	r3, [pc, #632]	; (800f898 <_strtod_l+0xb58>)
 800f61e:	459b      	cmp	fp, r3
 800f620:	d102      	bne.n	800f628 <_strtod_l+0x8e8>
 800f622:	3201      	adds	r2, #1
 800f624:	f43f adc8 	beq.w	800f1b8 <_strtod_l+0x478>
 800f628:	4b9a      	ldr	r3, [pc, #616]	; (800f894 <_strtod_l+0xb54>)
 800f62a:	ea0b 0303 	and.w	r3, fp, r3
 800f62e:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 800f632:	f04f 0800 	mov.w	r8, #0
 800f636:	9b04      	ldr	r3, [sp, #16]
 800f638:	2b00      	cmp	r3, #0
 800f63a:	d188      	bne.n	800f54e <_strtod_l+0x80e>
 800f63c:	e5c6      	b.n	800f1cc <_strtod_l+0x48c>
 800f63e:	f04f 33ff 	mov.w	r3, #4294967295
 800f642:	e7e9      	b.n	800f618 <_strtod_l+0x8d8>
 800f644:	460b      	mov	r3, r1
 800f646:	e7e7      	b.n	800f618 <_strtod_l+0x8d8>
 800f648:	ea53 0308 	orrs.w	r3, r3, r8
 800f64c:	f43f af6f 	beq.w	800f52e <_strtod_l+0x7ee>
 800f650:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f652:	b1cb      	cbz	r3, 800f688 <_strtod_l+0x948>
 800f654:	ea13 0f0b 	tst.w	r3, fp
 800f658:	d0ed      	beq.n	800f636 <_strtod_l+0x8f6>
 800f65a:	9a04      	ldr	r2, [sp, #16]
 800f65c:	4640      	mov	r0, r8
 800f65e:	4649      	mov	r1, r9
 800f660:	f1ba 0f00 	cmp.w	sl, #0
 800f664:	d014      	beq.n	800f690 <_strtod_l+0x950>
 800f666:	f7ff fb4f 	bl	800ed08 <sulp>
 800f66a:	ee38 7b00 	vadd.f64	d7, d8, d0
 800f66e:	ec59 8b17 	vmov	r8, r9, d7
 800f672:	e7e0      	b.n	800f636 <_strtod_l+0x8f6>
 800f674:	4013      	ands	r3, r2
 800f676:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800f67a:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 800f67e:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 800f682:	f04f 38ff 	mov.w	r8, #4294967295
 800f686:	e7d6      	b.n	800f636 <_strtod_l+0x8f6>
 800f688:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f68a:	ea13 0f08 	tst.w	r3, r8
 800f68e:	e7e3      	b.n	800f658 <_strtod_l+0x918>
 800f690:	f7ff fb3a 	bl	800ed08 <sulp>
 800f694:	ee38 0b40 	vsub.f64	d0, d8, d0
 800f698:	eeb5 0b40 	vcmp.f64	d0, #0.0
 800f69c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f6a0:	ec59 8b10 	vmov	r8, r9, d0
 800f6a4:	d1c7      	bne.n	800f636 <_strtod_l+0x8f6>
 800f6a6:	e5f7      	b.n	800f298 <_strtod_l+0x558>
 800f6a8:	4631      	mov	r1, r6
 800f6aa:	4628      	mov	r0, r5
 800f6ac:	f001 f8d6 	bl	801085c <__ratio>
 800f6b0:	eeb0 7b00 	vmov.f64	d7, #0	; 0x40000000  2.0
 800f6b4:	eeb4 0bc7 	vcmpe.f64	d0, d7
 800f6b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f6bc:	d865      	bhi.n	800f78a <_strtod_l+0xa4a>
 800f6be:	f1ba 0f00 	cmp.w	sl, #0
 800f6c2:	d042      	beq.n	800f74a <_strtod_l+0xa0a>
 800f6c4:	4b75      	ldr	r3, [pc, #468]	; (800f89c <_strtod_l+0xb5c>)
 800f6c6:	2200      	movs	r2, #0
 800f6c8:	eeb7 db00 	vmov.f64	d13, #112	; 0x3f800000  1.0
 800f6cc:	4871      	ldr	r0, [pc, #452]	; (800f894 <_strtod_l+0xb54>)
 800f6ce:	f8df c1d8 	ldr.w	ip, [pc, #472]	; 800f8a8 <_strtod_l+0xb68>
 800f6d2:	ea0b 0100 	and.w	r1, fp, r0
 800f6d6:	4561      	cmp	r1, ip
 800f6d8:	f040 808e 	bne.w	800f7f8 <_strtod_l+0xab8>
 800f6dc:	f1ab 7954 	sub.w	r9, fp, #55574528	; 0x3500000
 800f6e0:	ec49 8b10 	vmov	d0, r8, r9
 800f6e4:	ec43 2b1c 	vmov	d12, r2, r3
 800f6e8:	910a      	str	r1, [sp, #40]	; 0x28
 800f6ea:	f000 ffdf 	bl	80106ac <__ulp>
 800f6ee:	ec49 8b1e 	vmov	d14, r8, r9
 800f6f2:	4868      	ldr	r0, [pc, #416]	; (800f894 <_strtod_l+0xb54>)
 800f6f4:	eeac eb00 	vfma.f64	d14, d12, d0
 800f6f8:	ee1e 3a90 	vmov	r3, s29
 800f6fc:	4a68      	ldr	r2, [pc, #416]	; (800f8a0 <_strtod_l+0xb60>)
 800f6fe:	990a      	ldr	r1, [sp, #40]	; 0x28
 800f700:	4018      	ands	r0, r3
 800f702:	4290      	cmp	r0, r2
 800f704:	ec59 8b1e 	vmov	r8, r9, d14
 800f708:	d94e      	bls.n	800f7a8 <_strtod_l+0xa68>
 800f70a:	ee18 3a90 	vmov	r3, s17
 800f70e:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800f712:	4293      	cmp	r3, r2
 800f714:	d104      	bne.n	800f720 <_strtod_l+0x9e0>
 800f716:	ee18 3a10 	vmov	r3, s16
 800f71a:	3301      	adds	r3, #1
 800f71c:	f43f ad4c 	beq.w	800f1b8 <_strtod_l+0x478>
 800f720:	f8df 9174 	ldr.w	r9, [pc, #372]	; 800f898 <_strtod_l+0xb58>
 800f724:	f04f 38ff 	mov.w	r8, #4294967295
 800f728:	9912      	ldr	r1, [sp, #72]	; 0x48
 800f72a:	4620      	mov	r0, r4
 800f72c:	f000 fc8c 	bl	8010048 <_Bfree>
 800f730:	4639      	mov	r1, r7
 800f732:	4620      	mov	r0, r4
 800f734:	f000 fc88 	bl	8010048 <_Bfree>
 800f738:	4631      	mov	r1, r6
 800f73a:	4620      	mov	r0, r4
 800f73c:	f000 fc84 	bl	8010048 <_Bfree>
 800f740:	4629      	mov	r1, r5
 800f742:	4620      	mov	r0, r4
 800f744:	f000 fc80 	bl	8010048 <_Bfree>
 800f748:	e619      	b.n	800f37e <_strtod_l+0x63e>
 800f74a:	f1b8 0f00 	cmp.w	r8, #0
 800f74e:	d112      	bne.n	800f776 <_strtod_l+0xa36>
 800f750:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800f754:	b9b3      	cbnz	r3, 800f784 <_strtod_l+0xa44>
 800f756:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 800f75a:	eeb4 0bc7 	vcmpe.f64	d0, d7
 800f75e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f762:	eeb6 db00 	vmov.f64	d13, #96	; 0x3f000000  0.5
 800f766:	bf58      	it	pl
 800f768:	ee20 db0d 	vmulpl.f64	d13, d0, d13
 800f76c:	eeb1 7b4d 	vneg.f64	d7, d13
 800f770:	ec53 2b17 	vmov	r2, r3, d7
 800f774:	e7aa      	b.n	800f6cc <_strtod_l+0x98c>
 800f776:	f1b8 0f01 	cmp.w	r8, #1
 800f77a:	d103      	bne.n	800f784 <_strtod_l+0xa44>
 800f77c:	f1b9 0f00 	cmp.w	r9, #0
 800f780:	f43f ad8a 	beq.w	800f298 <_strtod_l+0x558>
 800f784:	4b47      	ldr	r3, [pc, #284]	; (800f8a4 <_strtod_l+0xb64>)
 800f786:	2200      	movs	r2, #0
 800f788:	e79e      	b.n	800f6c8 <_strtod_l+0x988>
 800f78a:	eeb6 db00 	vmov.f64	d13, #96	; 0x3f000000  0.5
 800f78e:	ee20 db0d 	vmul.f64	d13, d0, d13
 800f792:	f1ba 0f00 	cmp.w	sl, #0
 800f796:	d104      	bne.n	800f7a2 <_strtod_l+0xa62>
 800f798:	eeb1 7b4d 	vneg.f64	d7, d13
 800f79c:	ec53 2b17 	vmov	r2, r3, d7
 800f7a0:	e794      	b.n	800f6cc <_strtod_l+0x98c>
 800f7a2:	eeb0 7b4d 	vmov.f64	d7, d13
 800f7a6:	e7f9      	b.n	800f79c <_strtod_l+0xa5c>
 800f7a8:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 800f7ac:	9b04      	ldr	r3, [sp, #16]
 800f7ae:	2b00      	cmp	r3, #0
 800f7b0:	d1ba      	bne.n	800f728 <_strtod_l+0x9e8>
 800f7b2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800f7b6:	0d1b      	lsrs	r3, r3, #20
 800f7b8:	051b      	lsls	r3, r3, #20
 800f7ba:	4299      	cmp	r1, r3
 800f7bc:	d1b4      	bne.n	800f728 <_strtod_l+0x9e8>
 800f7be:	ec51 0b1d 	vmov	r0, r1, d13
 800f7c2:	f7f0 ffb9 	bl	8000738 <__aeabi_d2lz>
 800f7c6:	f7f0 ff71 	bl	80006ac <__aeabi_l2d>
 800f7ca:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800f7ce:	ec41 0b17 	vmov	d7, r0, r1
 800f7d2:	ea43 0308 	orr.w	r3, r3, r8
 800f7d6:	ea53 030a 	orrs.w	r3, r3, sl
 800f7da:	ee3d db47 	vsub.f64	d13, d13, d7
 800f7de:	d03c      	beq.n	800f85a <_strtod_l+0xb1a>
 800f7e0:	eeb4 dbca 	vcmpe.f64	d13, d10
 800f7e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f7e8:	f53f acf0 	bmi.w	800f1cc <_strtod_l+0x48c>
 800f7ec:	eeb4 dbcb 	vcmpe.f64	d13, d11
 800f7f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f7f4:	dd98      	ble.n	800f728 <_strtod_l+0x9e8>
 800f7f6:	e4e9      	b.n	800f1cc <_strtod_l+0x48c>
 800f7f8:	9804      	ldr	r0, [sp, #16]
 800f7fa:	b1f0      	cbz	r0, 800f83a <_strtod_l+0xafa>
 800f7fc:	f1b1 6fd4 	cmp.w	r1, #111149056	; 0x6a00000
 800f800:	d81b      	bhi.n	800f83a <_strtod_l+0xafa>
 800f802:	ed9f 7b21 	vldr	d7, [pc, #132]	; 800f888 <_strtod_l+0xb48>
 800f806:	eeb4 dbc7 	vcmpe.f64	d13, d7
 800f80a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f80e:	d811      	bhi.n	800f834 <_strtod_l+0xaf4>
 800f810:	eebc dbcd 	vcvt.u32.f64	s26, d13
 800f814:	ee1d 3a10 	vmov	r3, s26
 800f818:	2b01      	cmp	r3, #1
 800f81a:	bf38      	it	cc
 800f81c:	2301      	movcc	r3, #1
 800f81e:	ee0d 3a10 	vmov	s26, r3
 800f822:	eeb8 db4d 	vcvt.f64.u32	d13, s26
 800f826:	f1ba 0f00 	cmp.w	sl, #0
 800f82a:	d113      	bne.n	800f854 <_strtod_l+0xb14>
 800f82c:	eeb1 7b4d 	vneg.f64	d7, d13
 800f830:	ec53 2b17 	vmov	r2, r3, d7
 800f834:	f103 60d6 	add.w	r0, r3, #112197632	; 0x6b00000
 800f838:	1a43      	subs	r3, r0, r1
 800f83a:	eeb0 0b48 	vmov.f64	d0, d8
 800f83e:	ec43 2b1c 	vmov	d12, r2, r3
 800f842:	910a      	str	r1, [sp, #40]	; 0x28
 800f844:	f000 ff32 	bl	80106ac <__ulp>
 800f848:	990a      	ldr	r1, [sp, #40]	; 0x28
 800f84a:	eeac 8b00 	vfma.f64	d8, d12, d0
 800f84e:	ec59 8b18 	vmov	r8, r9, d8
 800f852:	e7ab      	b.n	800f7ac <_strtod_l+0xa6c>
 800f854:	eeb0 7b4d 	vmov.f64	d7, d13
 800f858:	e7ea      	b.n	800f830 <_strtod_l+0xaf0>
 800f85a:	eeb4 dbc9 	vcmpe.f64	d13, d9
 800f85e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f862:	f57f af61 	bpl.w	800f728 <_strtod_l+0x9e8>
 800f866:	e4b1      	b.n	800f1cc <_strtod_l+0x48c>
 800f868:	2300      	movs	r3, #0
 800f86a:	9308      	str	r3, [sp, #32]
 800f86c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800f86e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800f870:	6013      	str	r3, [r2, #0]
 800f872:	f7ff baad 	b.w	800edd0 <_strtod_l+0x90>
 800f876:	2a65      	cmp	r2, #101	; 0x65
 800f878:	f43f ab9f 	beq.w	800efba <_strtod_l+0x27a>
 800f87c:	2a45      	cmp	r2, #69	; 0x45
 800f87e:	f43f ab9c 	beq.w	800efba <_strtod_l+0x27a>
 800f882:	2101      	movs	r1, #1
 800f884:	f7ff bbd4 	b.w	800f030 <_strtod_l+0x2f0>
 800f888:	ffc00000 	.word	0xffc00000
 800f88c:	41dfffff 	.word	0x41dfffff
 800f890:	000fffff 	.word	0x000fffff
 800f894:	7ff00000 	.word	0x7ff00000
 800f898:	7fefffff 	.word	0x7fefffff
 800f89c:	3ff00000 	.word	0x3ff00000
 800f8a0:	7c9fffff 	.word	0x7c9fffff
 800f8a4:	bff00000 	.word	0xbff00000
 800f8a8:	7fe00000 	.word	0x7fe00000

0800f8ac <strtod>:
 800f8ac:	460a      	mov	r2, r1
 800f8ae:	4601      	mov	r1, r0
 800f8b0:	4802      	ldr	r0, [pc, #8]	; (800f8bc <strtod+0x10>)
 800f8b2:	4b03      	ldr	r3, [pc, #12]	; (800f8c0 <strtod+0x14>)
 800f8b4:	6800      	ldr	r0, [r0, #0]
 800f8b6:	f7ff ba43 	b.w	800ed40 <_strtod_l>
 800f8ba:	bf00      	nop
 800f8bc:	240000b0 	.word	0x240000b0
 800f8c0:	24000118 	.word	0x24000118

0800f8c4 <rshift>:
 800f8c4:	6903      	ldr	r3, [r0, #16]
 800f8c6:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800f8ca:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800f8ce:	ea4f 1261 	mov.w	r2, r1, asr #5
 800f8d2:	f100 0414 	add.w	r4, r0, #20
 800f8d6:	dd45      	ble.n	800f964 <rshift+0xa0>
 800f8d8:	f011 011f 	ands.w	r1, r1, #31
 800f8dc:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800f8e0:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800f8e4:	d10c      	bne.n	800f900 <rshift+0x3c>
 800f8e6:	f100 0710 	add.w	r7, r0, #16
 800f8ea:	4629      	mov	r1, r5
 800f8ec:	42b1      	cmp	r1, r6
 800f8ee:	d334      	bcc.n	800f95a <rshift+0x96>
 800f8f0:	1a9b      	subs	r3, r3, r2
 800f8f2:	009b      	lsls	r3, r3, #2
 800f8f4:	1eea      	subs	r2, r5, #3
 800f8f6:	4296      	cmp	r6, r2
 800f8f8:	bf38      	it	cc
 800f8fa:	2300      	movcc	r3, #0
 800f8fc:	4423      	add	r3, r4
 800f8fe:	e015      	b.n	800f92c <rshift+0x68>
 800f900:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800f904:	f1c1 0820 	rsb	r8, r1, #32
 800f908:	40cf      	lsrs	r7, r1
 800f90a:	f105 0e04 	add.w	lr, r5, #4
 800f90e:	46a1      	mov	r9, r4
 800f910:	4576      	cmp	r6, lr
 800f912:	46f4      	mov	ip, lr
 800f914:	d815      	bhi.n	800f942 <rshift+0x7e>
 800f916:	1a9a      	subs	r2, r3, r2
 800f918:	0092      	lsls	r2, r2, #2
 800f91a:	3a04      	subs	r2, #4
 800f91c:	3501      	adds	r5, #1
 800f91e:	42ae      	cmp	r6, r5
 800f920:	bf38      	it	cc
 800f922:	2200      	movcc	r2, #0
 800f924:	18a3      	adds	r3, r4, r2
 800f926:	50a7      	str	r7, [r4, r2]
 800f928:	b107      	cbz	r7, 800f92c <rshift+0x68>
 800f92a:	3304      	adds	r3, #4
 800f92c:	1b1a      	subs	r2, r3, r4
 800f92e:	42a3      	cmp	r3, r4
 800f930:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800f934:	bf08      	it	eq
 800f936:	2300      	moveq	r3, #0
 800f938:	6102      	str	r2, [r0, #16]
 800f93a:	bf08      	it	eq
 800f93c:	6143      	streq	r3, [r0, #20]
 800f93e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f942:	f8dc c000 	ldr.w	ip, [ip]
 800f946:	fa0c fc08 	lsl.w	ip, ip, r8
 800f94a:	ea4c 0707 	orr.w	r7, ip, r7
 800f94e:	f849 7b04 	str.w	r7, [r9], #4
 800f952:	f85e 7b04 	ldr.w	r7, [lr], #4
 800f956:	40cf      	lsrs	r7, r1
 800f958:	e7da      	b.n	800f910 <rshift+0x4c>
 800f95a:	f851 cb04 	ldr.w	ip, [r1], #4
 800f95e:	f847 cf04 	str.w	ip, [r7, #4]!
 800f962:	e7c3      	b.n	800f8ec <rshift+0x28>
 800f964:	4623      	mov	r3, r4
 800f966:	e7e1      	b.n	800f92c <rshift+0x68>

0800f968 <__hexdig_fun>:
 800f968:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800f96c:	2b09      	cmp	r3, #9
 800f96e:	d802      	bhi.n	800f976 <__hexdig_fun+0xe>
 800f970:	3820      	subs	r0, #32
 800f972:	b2c0      	uxtb	r0, r0
 800f974:	4770      	bx	lr
 800f976:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800f97a:	2b05      	cmp	r3, #5
 800f97c:	d801      	bhi.n	800f982 <__hexdig_fun+0x1a>
 800f97e:	3847      	subs	r0, #71	; 0x47
 800f980:	e7f7      	b.n	800f972 <__hexdig_fun+0xa>
 800f982:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800f986:	2b05      	cmp	r3, #5
 800f988:	d801      	bhi.n	800f98e <__hexdig_fun+0x26>
 800f98a:	3827      	subs	r0, #39	; 0x27
 800f98c:	e7f1      	b.n	800f972 <__hexdig_fun+0xa>
 800f98e:	2000      	movs	r0, #0
 800f990:	4770      	bx	lr
	...

0800f994 <__gethex>:
 800f994:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f998:	ed2d 8b02 	vpush	{d8}
 800f99c:	b089      	sub	sp, #36	; 0x24
 800f99e:	ee08 0a10 	vmov	s16, r0
 800f9a2:	9304      	str	r3, [sp, #16]
 800f9a4:	4bb4      	ldr	r3, [pc, #720]	; (800fc78 <__gethex+0x2e4>)
 800f9a6:	681b      	ldr	r3, [r3, #0]
 800f9a8:	9301      	str	r3, [sp, #4]
 800f9aa:	4618      	mov	r0, r3
 800f9ac:	468b      	mov	fp, r1
 800f9ae:	4690      	mov	r8, r2
 800f9b0:	f7f0 fc96 	bl	80002e0 <strlen>
 800f9b4:	9b01      	ldr	r3, [sp, #4]
 800f9b6:	f8db 2000 	ldr.w	r2, [fp]
 800f9ba:	4403      	add	r3, r0
 800f9bc:	4682      	mov	sl, r0
 800f9be:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800f9c2:	9305      	str	r3, [sp, #20]
 800f9c4:	1c93      	adds	r3, r2, #2
 800f9c6:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800f9ca:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800f9ce:	32fe      	adds	r2, #254	; 0xfe
 800f9d0:	18d1      	adds	r1, r2, r3
 800f9d2:	461f      	mov	r7, r3
 800f9d4:	f813 0b01 	ldrb.w	r0, [r3], #1
 800f9d8:	9100      	str	r1, [sp, #0]
 800f9da:	2830      	cmp	r0, #48	; 0x30
 800f9dc:	d0f8      	beq.n	800f9d0 <__gethex+0x3c>
 800f9de:	f7ff ffc3 	bl	800f968 <__hexdig_fun>
 800f9e2:	4604      	mov	r4, r0
 800f9e4:	2800      	cmp	r0, #0
 800f9e6:	d13a      	bne.n	800fa5e <__gethex+0xca>
 800f9e8:	9901      	ldr	r1, [sp, #4]
 800f9ea:	4652      	mov	r2, sl
 800f9ec:	4638      	mov	r0, r7
 800f9ee:	f001 f86b 	bl	8010ac8 <strncmp>
 800f9f2:	4605      	mov	r5, r0
 800f9f4:	2800      	cmp	r0, #0
 800f9f6:	d168      	bne.n	800faca <__gethex+0x136>
 800f9f8:	f817 000a 	ldrb.w	r0, [r7, sl]
 800f9fc:	eb07 060a 	add.w	r6, r7, sl
 800fa00:	f7ff ffb2 	bl	800f968 <__hexdig_fun>
 800fa04:	2800      	cmp	r0, #0
 800fa06:	d062      	beq.n	800face <__gethex+0x13a>
 800fa08:	4633      	mov	r3, r6
 800fa0a:	7818      	ldrb	r0, [r3, #0]
 800fa0c:	2830      	cmp	r0, #48	; 0x30
 800fa0e:	461f      	mov	r7, r3
 800fa10:	f103 0301 	add.w	r3, r3, #1
 800fa14:	d0f9      	beq.n	800fa0a <__gethex+0x76>
 800fa16:	f7ff ffa7 	bl	800f968 <__hexdig_fun>
 800fa1a:	2301      	movs	r3, #1
 800fa1c:	fab0 f480 	clz	r4, r0
 800fa20:	0964      	lsrs	r4, r4, #5
 800fa22:	4635      	mov	r5, r6
 800fa24:	9300      	str	r3, [sp, #0]
 800fa26:	463a      	mov	r2, r7
 800fa28:	4616      	mov	r6, r2
 800fa2a:	3201      	adds	r2, #1
 800fa2c:	7830      	ldrb	r0, [r6, #0]
 800fa2e:	f7ff ff9b 	bl	800f968 <__hexdig_fun>
 800fa32:	2800      	cmp	r0, #0
 800fa34:	d1f8      	bne.n	800fa28 <__gethex+0x94>
 800fa36:	9901      	ldr	r1, [sp, #4]
 800fa38:	4652      	mov	r2, sl
 800fa3a:	4630      	mov	r0, r6
 800fa3c:	f001 f844 	bl	8010ac8 <strncmp>
 800fa40:	b980      	cbnz	r0, 800fa64 <__gethex+0xd0>
 800fa42:	b94d      	cbnz	r5, 800fa58 <__gethex+0xc4>
 800fa44:	eb06 050a 	add.w	r5, r6, sl
 800fa48:	462a      	mov	r2, r5
 800fa4a:	4616      	mov	r6, r2
 800fa4c:	3201      	adds	r2, #1
 800fa4e:	7830      	ldrb	r0, [r6, #0]
 800fa50:	f7ff ff8a 	bl	800f968 <__hexdig_fun>
 800fa54:	2800      	cmp	r0, #0
 800fa56:	d1f8      	bne.n	800fa4a <__gethex+0xb6>
 800fa58:	1bad      	subs	r5, r5, r6
 800fa5a:	00ad      	lsls	r5, r5, #2
 800fa5c:	e004      	b.n	800fa68 <__gethex+0xd4>
 800fa5e:	2400      	movs	r4, #0
 800fa60:	4625      	mov	r5, r4
 800fa62:	e7e0      	b.n	800fa26 <__gethex+0x92>
 800fa64:	2d00      	cmp	r5, #0
 800fa66:	d1f7      	bne.n	800fa58 <__gethex+0xc4>
 800fa68:	7833      	ldrb	r3, [r6, #0]
 800fa6a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800fa6e:	2b50      	cmp	r3, #80	; 0x50
 800fa70:	d13b      	bne.n	800faea <__gethex+0x156>
 800fa72:	7873      	ldrb	r3, [r6, #1]
 800fa74:	2b2b      	cmp	r3, #43	; 0x2b
 800fa76:	d02c      	beq.n	800fad2 <__gethex+0x13e>
 800fa78:	2b2d      	cmp	r3, #45	; 0x2d
 800fa7a:	d02e      	beq.n	800fada <__gethex+0x146>
 800fa7c:	1c71      	adds	r1, r6, #1
 800fa7e:	f04f 0900 	mov.w	r9, #0
 800fa82:	7808      	ldrb	r0, [r1, #0]
 800fa84:	f7ff ff70 	bl	800f968 <__hexdig_fun>
 800fa88:	1e43      	subs	r3, r0, #1
 800fa8a:	b2db      	uxtb	r3, r3
 800fa8c:	2b18      	cmp	r3, #24
 800fa8e:	d82c      	bhi.n	800faea <__gethex+0x156>
 800fa90:	f1a0 0210 	sub.w	r2, r0, #16
 800fa94:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800fa98:	f7ff ff66 	bl	800f968 <__hexdig_fun>
 800fa9c:	1e43      	subs	r3, r0, #1
 800fa9e:	b2db      	uxtb	r3, r3
 800faa0:	2b18      	cmp	r3, #24
 800faa2:	d91d      	bls.n	800fae0 <__gethex+0x14c>
 800faa4:	f1b9 0f00 	cmp.w	r9, #0
 800faa8:	d000      	beq.n	800faac <__gethex+0x118>
 800faaa:	4252      	negs	r2, r2
 800faac:	4415      	add	r5, r2
 800faae:	f8cb 1000 	str.w	r1, [fp]
 800fab2:	b1e4      	cbz	r4, 800faee <__gethex+0x15a>
 800fab4:	9b00      	ldr	r3, [sp, #0]
 800fab6:	2b00      	cmp	r3, #0
 800fab8:	bf14      	ite	ne
 800faba:	2700      	movne	r7, #0
 800fabc:	2706      	moveq	r7, #6
 800fabe:	4638      	mov	r0, r7
 800fac0:	b009      	add	sp, #36	; 0x24
 800fac2:	ecbd 8b02 	vpop	{d8}
 800fac6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800faca:	463e      	mov	r6, r7
 800facc:	4625      	mov	r5, r4
 800face:	2401      	movs	r4, #1
 800fad0:	e7ca      	b.n	800fa68 <__gethex+0xd4>
 800fad2:	f04f 0900 	mov.w	r9, #0
 800fad6:	1cb1      	adds	r1, r6, #2
 800fad8:	e7d3      	b.n	800fa82 <__gethex+0xee>
 800fada:	f04f 0901 	mov.w	r9, #1
 800fade:	e7fa      	b.n	800fad6 <__gethex+0x142>
 800fae0:	230a      	movs	r3, #10
 800fae2:	fb03 0202 	mla	r2, r3, r2, r0
 800fae6:	3a10      	subs	r2, #16
 800fae8:	e7d4      	b.n	800fa94 <__gethex+0x100>
 800faea:	4631      	mov	r1, r6
 800faec:	e7df      	b.n	800faae <__gethex+0x11a>
 800faee:	1bf3      	subs	r3, r6, r7
 800faf0:	3b01      	subs	r3, #1
 800faf2:	4621      	mov	r1, r4
 800faf4:	2b07      	cmp	r3, #7
 800faf6:	dc0b      	bgt.n	800fb10 <__gethex+0x17c>
 800faf8:	ee18 0a10 	vmov	r0, s16
 800fafc:	f000 fa64 	bl	800ffc8 <_Balloc>
 800fb00:	4604      	mov	r4, r0
 800fb02:	b940      	cbnz	r0, 800fb16 <__gethex+0x182>
 800fb04:	4b5d      	ldr	r3, [pc, #372]	; (800fc7c <__gethex+0x2e8>)
 800fb06:	4602      	mov	r2, r0
 800fb08:	21de      	movs	r1, #222	; 0xde
 800fb0a:	485d      	ldr	r0, [pc, #372]	; (800fc80 <__gethex+0x2ec>)
 800fb0c:	f000 fffe 	bl	8010b0c <__assert_func>
 800fb10:	3101      	adds	r1, #1
 800fb12:	105b      	asrs	r3, r3, #1
 800fb14:	e7ee      	b.n	800faf4 <__gethex+0x160>
 800fb16:	f100 0914 	add.w	r9, r0, #20
 800fb1a:	f04f 0b00 	mov.w	fp, #0
 800fb1e:	f1ca 0301 	rsb	r3, sl, #1
 800fb22:	f8cd 9008 	str.w	r9, [sp, #8]
 800fb26:	f8cd b000 	str.w	fp, [sp]
 800fb2a:	9306      	str	r3, [sp, #24]
 800fb2c:	42b7      	cmp	r7, r6
 800fb2e:	d340      	bcc.n	800fbb2 <__gethex+0x21e>
 800fb30:	9802      	ldr	r0, [sp, #8]
 800fb32:	9b00      	ldr	r3, [sp, #0]
 800fb34:	f840 3b04 	str.w	r3, [r0], #4
 800fb38:	eba0 0009 	sub.w	r0, r0, r9
 800fb3c:	1080      	asrs	r0, r0, #2
 800fb3e:	0146      	lsls	r6, r0, #5
 800fb40:	6120      	str	r0, [r4, #16]
 800fb42:	4618      	mov	r0, r3
 800fb44:	f000 fb32 	bl	80101ac <__hi0bits>
 800fb48:	1a30      	subs	r0, r6, r0
 800fb4a:	f8d8 6000 	ldr.w	r6, [r8]
 800fb4e:	42b0      	cmp	r0, r6
 800fb50:	dd63      	ble.n	800fc1a <__gethex+0x286>
 800fb52:	1b87      	subs	r7, r0, r6
 800fb54:	4639      	mov	r1, r7
 800fb56:	4620      	mov	r0, r4
 800fb58:	f000 fed3 	bl	8010902 <__any_on>
 800fb5c:	4682      	mov	sl, r0
 800fb5e:	b1a8      	cbz	r0, 800fb8c <__gethex+0x1f8>
 800fb60:	1e7b      	subs	r3, r7, #1
 800fb62:	1159      	asrs	r1, r3, #5
 800fb64:	f003 021f 	and.w	r2, r3, #31
 800fb68:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800fb6c:	f04f 0a01 	mov.w	sl, #1
 800fb70:	fa0a f202 	lsl.w	r2, sl, r2
 800fb74:	420a      	tst	r2, r1
 800fb76:	d009      	beq.n	800fb8c <__gethex+0x1f8>
 800fb78:	4553      	cmp	r3, sl
 800fb7a:	dd05      	ble.n	800fb88 <__gethex+0x1f4>
 800fb7c:	1eb9      	subs	r1, r7, #2
 800fb7e:	4620      	mov	r0, r4
 800fb80:	f000 febf 	bl	8010902 <__any_on>
 800fb84:	2800      	cmp	r0, #0
 800fb86:	d145      	bne.n	800fc14 <__gethex+0x280>
 800fb88:	f04f 0a02 	mov.w	sl, #2
 800fb8c:	4639      	mov	r1, r7
 800fb8e:	4620      	mov	r0, r4
 800fb90:	f7ff fe98 	bl	800f8c4 <rshift>
 800fb94:	443d      	add	r5, r7
 800fb96:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800fb9a:	42ab      	cmp	r3, r5
 800fb9c:	da4c      	bge.n	800fc38 <__gethex+0x2a4>
 800fb9e:	ee18 0a10 	vmov	r0, s16
 800fba2:	4621      	mov	r1, r4
 800fba4:	f000 fa50 	bl	8010048 <_Bfree>
 800fba8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800fbaa:	2300      	movs	r3, #0
 800fbac:	6013      	str	r3, [r2, #0]
 800fbae:	27a3      	movs	r7, #163	; 0xa3
 800fbb0:	e785      	b.n	800fabe <__gethex+0x12a>
 800fbb2:	1e73      	subs	r3, r6, #1
 800fbb4:	9a05      	ldr	r2, [sp, #20]
 800fbb6:	9303      	str	r3, [sp, #12]
 800fbb8:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800fbbc:	4293      	cmp	r3, r2
 800fbbe:	d019      	beq.n	800fbf4 <__gethex+0x260>
 800fbc0:	f1bb 0f20 	cmp.w	fp, #32
 800fbc4:	d107      	bne.n	800fbd6 <__gethex+0x242>
 800fbc6:	9b02      	ldr	r3, [sp, #8]
 800fbc8:	9a00      	ldr	r2, [sp, #0]
 800fbca:	f843 2b04 	str.w	r2, [r3], #4
 800fbce:	9302      	str	r3, [sp, #8]
 800fbd0:	2300      	movs	r3, #0
 800fbd2:	9300      	str	r3, [sp, #0]
 800fbd4:	469b      	mov	fp, r3
 800fbd6:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800fbda:	f7ff fec5 	bl	800f968 <__hexdig_fun>
 800fbde:	9b00      	ldr	r3, [sp, #0]
 800fbe0:	f000 000f 	and.w	r0, r0, #15
 800fbe4:	fa00 f00b 	lsl.w	r0, r0, fp
 800fbe8:	4303      	orrs	r3, r0
 800fbea:	9300      	str	r3, [sp, #0]
 800fbec:	f10b 0b04 	add.w	fp, fp, #4
 800fbf0:	9b03      	ldr	r3, [sp, #12]
 800fbf2:	e00d      	b.n	800fc10 <__gethex+0x27c>
 800fbf4:	9b03      	ldr	r3, [sp, #12]
 800fbf6:	9a06      	ldr	r2, [sp, #24]
 800fbf8:	4413      	add	r3, r2
 800fbfa:	42bb      	cmp	r3, r7
 800fbfc:	d3e0      	bcc.n	800fbc0 <__gethex+0x22c>
 800fbfe:	4618      	mov	r0, r3
 800fc00:	9901      	ldr	r1, [sp, #4]
 800fc02:	9307      	str	r3, [sp, #28]
 800fc04:	4652      	mov	r2, sl
 800fc06:	f000 ff5f 	bl	8010ac8 <strncmp>
 800fc0a:	9b07      	ldr	r3, [sp, #28]
 800fc0c:	2800      	cmp	r0, #0
 800fc0e:	d1d7      	bne.n	800fbc0 <__gethex+0x22c>
 800fc10:	461e      	mov	r6, r3
 800fc12:	e78b      	b.n	800fb2c <__gethex+0x198>
 800fc14:	f04f 0a03 	mov.w	sl, #3
 800fc18:	e7b8      	b.n	800fb8c <__gethex+0x1f8>
 800fc1a:	da0a      	bge.n	800fc32 <__gethex+0x29e>
 800fc1c:	1a37      	subs	r7, r6, r0
 800fc1e:	4621      	mov	r1, r4
 800fc20:	ee18 0a10 	vmov	r0, s16
 800fc24:	463a      	mov	r2, r7
 800fc26:	f000 fc2b 	bl	8010480 <__lshift>
 800fc2a:	1bed      	subs	r5, r5, r7
 800fc2c:	4604      	mov	r4, r0
 800fc2e:	f100 0914 	add.w	r9, r0, #20
 800fc32:	f04f 0a00 	mov.w	sl, #0
 800fc36:	e7ae      	b.n	800fb96 <__gethex+0x202>
 800fc38:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800fc3c:	42a8      	cmp	r0, r5
 800fc3e:	dd72      	ble.n	800fd26 <__gethex+0x392>
 800fc40:	1b45      	subs	r5, r0, r5
 800fc42:	42ae      	cmp	r6, r5
 800fc44:	dc36      	bgt.n	800fcb4 <__gethex+0x320>
 800fc46:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800fc4a:	2b02      	cmp	r3, #2
 800fc4c:	d02a      	beq.n	800fca4 <__gethex+0x310>
 800fc4e:	2b03      	cmp	r3, #3
 800fc50:	d02c      	beq.n	800fcac <__gethex+0x318>
 800fc52:	2b01      	cmp	r3, #1
 800fc54:	d11c      	bne.n	800fc90 <__gethex+0x2fc>
 800fc56:	42ae      	cmp	r6, r5
 800fc58:	d11a      	bne.n	800fc90 <__gethex+0x2fc>
 800fc5a:	2e01      	cmp	r6, #1
 800fc5c:	d112      	bne.n	800fc84 <__gethex+0x2f0>
 800fc5e:	9a04      	ldr	r2, [sp, #16]
 800fc60:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800fc64:	6013      	str	r3, [r2, #0]
 800fc66:	2301      	movs	r3, #1
 800fc68:	6123      	str	r3, [r4, #16]
 800fc6a:	f8c9 3000 	str.w	r3, [r9]
 800fc6e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800fc70:	2762      	movs	r7, #98	; 0x62
 800fc72:	601c      	str	r4, [r3, #0]
 800fc74:	e723      	b.n	800fabe <__gethex+0x12a>
 800fc76:	bf00      	nop
 800fc78:	080124b0 	.word	0x080124b0
 800fc7c:	08012438 	.word	0x08012438
 800fc80:	08012449 	.word	0x08012449
 800fc84:	1e71      	subs	r1, r6, #1
 800fc86:	4620      	mov	r0, r4
 800fc88:	f000 fe3b 	bl	8010902 <__any_on>
 800fc8c:	2800      	cmp	r0, #0
 800fc8e:	d1e6      	bne.n	800fc5e <__gethex+0x2ca>
 800fc90:	ee18 0a10 	vmov	r0, s16
 800fc94:	4621      	mov	r1, r4
 800fc96:	f000 f9d7 	bl	8010048 <_Bfree>
 800fc9a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800fc9c:	2300      	movs	r3, #0
 800fc9e:	6013      	str	r3, [r2, #0]
 800fca0:	2750      	movs	r7, #80	; 0x50
 800fca2:	e70c      	b.n	800fabe <__gethex+0x12a>
 800fca4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800fca6:	2b00      	cmp	r3, #0
 800fca8:	d1f2      	bne.n	800fc90 <__gethex+0x2fc>
 800fcaa:	e7d8      	b.n	800fc5e <__gethex+0x2ca>
 800fcac:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800fcae:	2b00      	cmp	r3, #0
 800fcb0:	d1d5      	bne.n	800fc5e <__gethex+0x2ca>
 800fcb2:	e7ed      	b.n	800fc90 <__gethex+0x2fc>
 800fcb4:	1e6f      	subs	r7, r5, #1
 800fcb6:	f1ba 0f00 	cmp.w	sl, #0
 800fcba:	d131      	bne.n	800fd20 <__gethex+0x38c>
 800fcbc:	b127      	cbz	r7, 800fcc8 <__gethex+0x334>
 800fcbe:	4639      	mov	r1, r7
 800fcc0:	4620      	mov	r0, r4
 800fcc2:	f000 fe1e 	bl	8010902 <__any_on>
 800fcc6:	4682      	mov	sl, r0
 800fcc8:	117b      	asrs	r3, r7, #5
 800fcca:	2101      	movs	r1, #1
 800fccc:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800fcd0:	f007 071f 	and.w	r7, r7, #31
 800fcd4:	fa01 f707 	lsl.w	r7, r1, r7
 800fcd8:	421f      	tst	r7, r3
 800fcda:	4629      	mov	r1, r5
 800fcdc:	4620      	mov	r0, r4
 800fcde:	bf18      	it	ne
 800fce0:	f04a 0a02 	orrne.w	sl, sl, #2
 800fce4:	1b76      	subs	r6, r6, r5
 800fce6:	f7ff fded 	bl	800f8c4 <rshift>
 800fcea:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800fcee:	2702      	movs	r7, #2
 800fcf0:	f1ba 0f00 	cmp.w	sl, #0
 800fcf4:	d048      	beq.n	800fd88 <__gethex+0x3f4>
 800fcf6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800fcfa:	2b02      	cmp	r3, #2
 800fcfc:	d015      	beq.n	800fd2a <__gethex+0x396>
 800fcfe:	2b03      	cmp	r3, #3
 800fd00:	d017      	beq.n	800fd32 <__gethex+0x39e>
 800fd02:	2b01      	cmp	r3, #1
 800fd04:	d109      	bne.n	800fd1a <__gethex+0x386>
 800fd06:	f01a 0f02 	tst.w	sl, #2
 800fd0a:	d006      	beq.n	800fd1a <__gethex+0x386>
 800fd0c:	f8d9 0000 	ldr.w	r0, [r9]
 800fd10:	ea4a 0a00 	orr.w	sl, sl, r0
 800fd14:	f01a 0f01 	tst.w	sl, #1
 800fd18:	d10e      	bne.n	800fd38 <__gethex+0x3a4>
 800fd1a:	f047 0710 	orr.w	r7, r7, #16
 800fd1e:	e033      	b.n	800fd88 <__gethex+0x3f4>
 800fd20:	f04f 0a01 	mov.w	sl, #1
 800fd24:	e7d0      	b.n	800fcc8 <__gethex+0x334>
 800fd26:	2701      	movs	r7, #1
 800fd28:	e7e2      	b.n	800fcf0 <__gethex+0x35c>
 800fd2a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800fd2c:	f1c3 0301 	rsb	r3, r3, #1
 800fd30:	9315      	str	r3, [sp, #84]	; 0x54
 800fd32:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800fd34:	2b00      	cmp	r3, #0
 800fd36:	d0f0      	beq.n	800fd1a <__gethex+0x386>
 800fd38:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800fd3c:	f104 0314 	add.w	r3, r4, #20
 800fd40:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800fd44:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800fd48:	f04f 0c00 	mov.w	ip, #0
 800fd4c:	4618      	mov	r0, r3
 800fd4e:	f853 2b04 	ldr.w	r2, [r3], #4
 800fd52:	f1b2 3fff 	cmp.w	r2, #4294967295
 800fd56:	d01c      	beq.n	800fd92 <__gethex+0x3fe>
 800fd58:	3201      	adds	r2, #1
 800fd5a:	6002      	str	r2, [r0, #0]
 800fd5c:	2f02      	cmp	r7, #2
 800fd5e:	f104 0314 	add.w	r3, r4, #20
 800fd62:	d13f      	bne.n	800fde4 <__gethex+0x450>
 800fd64:	f8d8 2000 	ldr.w	r2, [r8]
 800fd68:	3a01      	subs	r2, #1
 800fd6a:	42b2      	cmp	r2, r6
 800fd6c:	d10a      	bne.n	800fd84 <__gethex+0x3f0>
 800fd6e:	1171      	asrs	r1, r6, #5
 800fd70:	2201      	movs	r2, #1
 800fd72:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800fd76:	f006 061f 	and.w	r6, r6, #31
 800fd7a:	fa02 f606 	lsl.w	r6, r2, r6
 800fd7e:	421e      	tst	r6, r3
 800fd80:	bf18      	it	ne
 800fd82:	4617      	movne	r7, r2
 800fd84:	f047 0720 	orr.w	r7, r7, #32
 800fd88:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800fd8a:	601c      	str	r4, [r3, #0]
 800fd8c:	9b04      	ldr	r3, [sp, #16]
 800fd8e:	601d      	str	r5, [r3, #0]
 800fd90:	e695      	b.n	800fabe <__gethex+0x12a>
 800fd92:	4299      	cmp	r1, r3
 800fd94:	f843 cc04 	str.w	ip, [r3, #-4]
 800fd98:	d8d8      	bhi.n	800fd4c <__gethex+0x3b8>
 800fd9a:	68a3      	ldr	r3, [r4, #8]
 800fd9c:	459b      	cmp	fp, r3
 800fd9e:	db19      	blt.n	800fdd4 <__gethex+0x440>
 800fda0:	6861      	ldr	r1, [r4, #4]
 800fda2:	ee18 0a10 	vmov	r0, s16
 800fda6:	3101      	adds	r1, #1
 800fda8:	f000 f90e 	bl	800ffc8 <_Balloc>
 800fdac:	4681      	mov	r9, r0
 800fdae:	b918      	cbnz	r0, 800fdb8 <__gethex+0x424>
 800fdb0:	4b1a      	ldr	r3, [pc, #104]	; (800fe1c <__gethex+0x488>)
 800fdb2:	4602      	mov	r2, r0
 800fdb4:	2184      	movs	r1, #132	; 0x84
 800fdb6:	e6a8      	b.n	800fb0a <__gethex+0x176>
 800fdb8:	6922      	ldr	r2, [r4, #16]
 800fdba:	3202      	adds	r2, #2
 800fdbc:	f104 010c 	add.w	r1, r4, #12
 800fdc0:	0092      	lsls	r2, r2, #2
 800fdc2:	300c      	adds	r0, #12
 800fdc4:	f7fe ff8a 	bl	800ecdc <memcpy>
 800fdc8:	4621      	mov	r1, r4
 800fdca:	ee18 0a10 	vmov	r0, s16
 800fdce:	f000 f93b 	bl	8010048 <_Bfree>
 800fdd2:	464c      	mov	r4, r9
 800fdd4:	6923      	ldr	r3, [r4, #16]
 800fdd6:	1c5a      	adds	r2, r3, #1
 800fdd8:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800fddc:	6122      	str	r2, [r4, #16]
 800fdde:	2201      	movs	r2, #1
 800fde0:	615a      	str	r2, [r3, #20]
 800fde2:	e7bb      	b.n	800fd5c <__gethex+0x3c8>
 800fde4:	6922      	ldr	r2, [r4, #16]
 800fde6:	455a      	cmp	r2, fp
 800fde8:	dd0b      	ble.n	800fe02 <__gethex+0x46e>
 800fdea:	2101      	movs	r1, #1
 800fdec:	4620      	mov	r0, r4
 800fdee:	f7ff fd69 	bl	800f8c4 <rshift>
 800fdf2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800fdf6:	3501      	adds	r5, #1
 800fdf8:	42ab      	cmp	r3, r5
 800fdfa:	f6ff aed0 	blt.w	800fb9e <__gethex+0x20a>
 800fdfe:	2701      	movs	r7, #1
 800fe00:	e7c0      	b.n	800fd84 <__gethex+0x3f0>
 800fe02:	f016 061f 	ands.w	r6, r6, #31
 800fe06:	d0fa      	beq.n	800fdfe <__gethex+0x46a>
 800fe08:	4453      	add	r3, sl
 800fe0a:	f1c6 0620 	rsb	r6, r6, #32
 800fe0e:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800fe12:	f000 f9cb 	bl	80101ac <__hi0bits>
 800fe16:	42b0      	cmp	r0, r6
 800fe18:	dbe7      	blt.n	800fdea <__gethex+0x456>
 800fe1a:	e7f0      	b.n	800fdfe <__gethex+0x46a>
 800fe1c:	08012438 	.word	0x08012438

0800fe20 <L_shift>:
 800fe20:	f1c2 0208 	rsb	r2, r2, #8
 800fe24:	0092      	lsls	r2, r2, #2
 800fe26:	b570      	push	{r4, r5, r6, lr}
 800fe28:	f1c2 0620 	rsb	r6, r2, #32
 800fe2c:	6843      	ldr	r3, [r0, #4]
 800fe2e:	6804      	ldr	r4, [r0, #0]
 800fe30:	fa03 f506 	lsl.w	r5, r3, r6
 800fe34:	432c      	orrs	r4, r5
 800fe36:	40d3      	lsrs	r3, r2
 800fe38:	6004      	str	r4, [r0, #0]
 800fe3a:	f840 3f04 	str.w	r3, [r0, #4]!
 800fe3e:	4288      	cmp	r0, r1
 800fe40:	d3f4      	bcc.n	800fe2c <L_shift+0xc>
 800fe42:	bd70      	pop	{r4, r5, r6, pc}

0800fe44 <__match>:
 800fe44:	b530      	push	{r4, r5, lr}
 800fe46:	6803      	ldr	r3, [r0, #0]
 800fe48:	3301      	adds	r3, #1
 800fe4a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800fe4e:	b914      	cbnz	r4, 800fe56 <__match+0x12>
 800fe50:	6003      	str	r3, [r0, #0]
 800fe52:	2001      	movs	r0, #1
 800fe54:	bd30      	pop	{r4, r5, pc}
 800fe56:	f813 2b01 	ldrb.w	r2, [r3], #1
 800fe5a:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800fe5e:	2d19      	cmp	r5, #25
 800fe60:	bf98      	it	ls
 800fe62:	3220      	addls	r2, #32
 800fe64:	42a2      	cmp	r2, r4
 800fe66:	d0f0      	beq.n	800fe4a <__match+0x6>
 800fe68:	2000      	movs	r0, #0
 800fe6a:	e7f3      	b.n	800fe54 <__match+0x10>

0800fe6c <__hexnan>:
 800fe6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fe70:	680b      	ldr	r3, [r1, #0]
 800fe72:	115e      	asrs	r6, r3, #5
 800fe74:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800fe78:	f013 031f 	ands.w	r3, r3, #31
 800fe7c:	b087      	sub	sp, #28
 800fe7e:	bf18      	it	ne
 800fe80:	3604      	addne	r6, #4
 800fe82:	2500      	movs	r5, #0
 800fe84:	1f37      	subs	r7, r6, #4
 800fe86:	4690      	mov	r8, r2
 800fe88:	6802      	ldr	r2, [r0, #0]
 800fe8a:	9301      	str	r3, [sp, #4]
 800fe8c:	4682      	mov	sl, r0
 800fe8e:	f846 5c04 	str.w	r5, [r6, #-4]
 800fe92:	46b9      	mov	r9, r7
 800fe94:	463c      	mov	r4, r7
 800fe96:	9502      	str	r5, [sp, #8]
 800fe98:	46ab      	mov	fp, r5
 800fe9a:	7851      	ldrb	r1, [r2, #1]
 800fe9c:	1c53      	adds	r3, r2, #1
 800fe9e:	9303      	str	r3, [sp, #12]
 800fea0:	b341      	cbz	r1, 800fef4 <__hexnan+0x88>
 800fea2:	4608      	mov	r0, r1
 800fea4:	9205      	str	r2, [sp, #20]
 800fea6:	9104      	str	r1, [sp, #16]
 800fea8:	f7ff fd5e 	bl	800f968 <__hexdig_fun>
 800feac:	2800      	cmp	r0, #0
 800feae:	d14f      	bne.n	800ff50 <__hexnan+0xe4>
 800feb0:	9904      	ldr	r1, [sp, #16]
 800feb2:	9a05      	ldr	r2, [sp, #20]
 800feb4:	2920      	cmp	r1, #32
 800feb6:	d818      	bhi.n	800feea <__hexnan+0x7e>
 800feb8:	9b02      	ldr	r3, [sp, #8]
 800feba:	459b      	cmp	fp, r3
 800febc:	dd13      	ble.n	800fee6 <__hexnan+0x7a>
 800febe:	454c      	cmp	r4, r9
 800fec0:	d206      	bcs.n	800fed0 <__hexnan+0x64>
 800fec2:	2d07      	cmp	r5, #7
 800fec4:	dc04      	bgt.n	800fed0 <__hexnan+0x64>
 800fec6:	462a      	mov	r2, r5
 800fec8:	4649      	mov	r1, r9
 800feca:	4620      	mov	r0, r4
 800fecc:	f7ff ffa8 	bl	800fe20 <L_shift>
 800fed0:	4544      	cmp	r4, r8
 800fed2:	d950      	bls.n	800ff76 <__hexnan+0x10a>
 800fed4:	2300      	movs	r3, #0
 800fed6:	f1a4 0904 	sub.w	r9, r4, #4
 800feda:	f844 3c04 	str.w	r3, [r4, #-4]
 800fede:	f8cd b008 	str.w	fp, [sp, #8]
 800fee2:	464c      	mov	r4, r9
 800fee4:	461d      	mov	r5, r3
 800fee6:	9a03      	ldr	r2, [sp, #12]
 800fee8:	e7d7      	b.n	800fe9a <__hexnan+0x2e>
 800feea:	2929      	cmp	r1, #41	; 0x29
 800feec:	d156      	bne.n	800ff9c <__hexnan+0x130>
 800feee:	3202      	adds	r2, #2
 800fef0:	f8ca 2000 	str.w	r2, [sl]
 800fef4:	f1bb 0f00 	cmp.w	fp, #0
 800fef8:	d050      	beq.n	800ff9c <__hexnan+0x130>
 800fefa:	454c      	cmp	r4, r9
 800fefc:	d206      	bcs.n	800ff0c <__hexnan+0xa0>
 800fefe:	2d07      	cmp	r5, #7
 800ff00:	dc04      	bgt.n	800ff0c <__hexnan+0xa0>
 800ff02:	462a      	mov	r2, r5
 800ff04:	4649      	mov	r1, r9
 800ff06:	4620      	mov	r0, r4
 800ff08:	f7ff ff8a 	bl	800fe20 <L_shift>
 800ff0c:	4544      	cmp	r4, r8
 800ff0e:	d934      	bls.n	800ff7a <__hexnan+0x10e>
 800ff10:	f1a8 0204 	sub.w	r2, r8, #4
 800ff14:	4623      	mov	r3, r4
 800ff16:	f853 1b04 	ldr.w	r1, [r3], #4
 800ff1a:	f842 1f04 	str.w	r1, [r2, #4]!
 800ff1e:	429f      	cmp	r7, r3
 800ff20:	d2f9      	bcs.n	800ff16 <__hexnan+0xaa>
 800ff22:	1b3b      	subs	r3, r7, r4
 800ff24:	f023 0303 	bic.w	r3, r3, #3
 800ff28:	3304      	adds	r3, #4
 800ff2a:	3401      	adds	r4, #1
 800ff2c:	3e03      	subs	r6, #3
 800ff2e:	42b4      	cmp	r4, r6
 800ff30:	bf88      	it	hi
 800ff32:	2304      	movhi	r3, #4
 800ff34:	4443      	add	r3, r8
 800ff36:	2200      	movs	r2, #0
 800ff38:	f843 2b04 	str.w	r2, [r3], #4
 800ff3c:	429f      	cmp	r7, r3
 800ff3e:	d2fb      	bcs.n	800ff38 <__hexnan+0xcc>
 800ff40:	683b      	ldr	r3, [r7, #0]
 800ff42:	b91b      	cbnz	r3, 800ff4c <__hexnan+0xe0>
 800ff44:	4547      	cmp	r7, r8
 800ff46:	d127      	bne.n	800ff98 <__hexnan+0x12c>
 800ff48:	2301      	movs	r3, #1
 800ff4a:	603b      	str	r3, [r7, #0]
 800ff4c:	2005      	movs	r0, #5
 800ff4e:	e026      	b.n	800ff9e <__hexnan+0x132>
 800ff50:	3501      	adds	r5, #1
 800ff52:	2d08      	cmp	r5, #8
 800ff54:	f10b 0b01 	add.w	fp, fp, #1
 800ff58:	dd06      	ble.n	800ff68 <__hexnan+0xfc>
 800ff5a:	4544      	cmp	r4, r8
 800ff5c:	d9c3      	bls.n	800fee6 <__hexnan+0x7a>
 800ff5e:	2300      	movs	r3, #0
 800ff60:	f844 3c04 	str.w	r3, [r4, #-4]
 800ff64:	2501      	movs	r5, #1
 800ff66:	3c04      	subs	r4, #4
 800ff68:	6822      	ldr	r2, [r4, #0]
 800ff6a:	f000 000f 	and.w	r0, r0, #15
 800ff6e:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800ff72:	6022      	str	r2, [r4, #0]
 800ff74:	e7b7      	b.n	800fee6 <__hexnan+0x7a>
 800ff76:	2508      	movs	r5, #8
 800ff78:	e7b5      	b.n	800fee6 <__hexnan+0x7a>
 800ff7a:	9b01      	ldr	r3, [sp, #4]
 800ff7c:	2b00      	cmp	r3, #0
 800ff7e:	d0df      	beq.n	800ff40 <__hexnan+0xd4>
 800ff80:	f04f 32ff 	mov.w	r2, #4294967295
 800ff84:	f1c3 0320 	rsb	r3, r3, #32
 800ff88:	fa22 f303 	lsr.w	r3, r2, r3
 800ff8c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800ff90:	401a      	ands	r2, r3
 800ff92:	f846 2c04 	str.w	r2, [r6, #-4]
 800ff96:	e7d3      	b.n	800ff40 <__hexnan+0xd4>
 800ff98:	3f04      	subs	r7, #4
 800ff9a:	e7d1      	b.n	800ff40 <__hexnan+0xd4>
 800ff9c:	2004      	movs	r0, #4
 800ff9e:	b007      	add	sp, #28
 800ffa0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800ffa4 <__ascii_mbtowc>:
 800ffa4:	b082      	sub	sp, #8
 800ffa6:	b901      	cbnz	r1, 800ffaa <__ascii_mbtowc+0x6>
 800ffa8:	a901      	add	r1, sp, #4
 800ffaa:	b142      	cbz	r2, 800ffbe <__ascii_mbtowc+0x1a>
 800ffac:	b14b      	cbz	r3, 800ffc2 <__ascii_mbtowc+0x1e>
 800ffae:	7813      	ldrb	r3, [r2, #0]
 800ffb0:	600b      	str	r3, [r1, #0]
 800ffb2:	7812      	ldrb	r2, [r2, #0]
 800ffb4:	1e10      	subs	r0, r2, #0
 800ffb6:	bf18      	it	ne
 800ffb8:	2001      	movne	r0, #1
 800ffba:	b002      	add	sp, #8
 800ffbc:	4770      	bx	lr
 800ffbe:	4610      	mov	r0, r2
 800ffc0:	e7fb      	b.n	800ffba <__ascii_mbtowc+0x16>
 800ffc2:	f06f 0001 	mvn.w	r0, #1
 800ffc6:	e7f8      	b.n	800ffba <__ascii_mbtowc+0x16>

0800ffc8 <_Balloc>:
 800ffc8:	b570      	push	{r4, r5, r6, lr}
 800ffca:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800ffcc:	4604      	mov	r4, r0
 800ffce:	460d      	mov	r5, r1
 800ffd0:	b976      	cbnz	r6, 800fff0 <_Balloc+0x28>
 800ffd2:	2010      	movs	r0, #16
 800ffd4:	f000 fdca 	bl	8010b6c <malloc>
 800ffd8:	4602      	mov	r2, r0
 800ffda:	6260      	str	r0, [r4, #36]	; 0x24
 800ffdc:	b920      	cbnz	r0, 800ffe8 <_Balloc+0x20>
 800ffde:	4b18      	ldr	r3, [pc, #96]	; (8010040 <_Balloc+0x78>)
 800ffe0:	4818      	ldr	r0, [pc, #96]	; (8010044 <_Balloc+0x7c>)
 800ffe2:	2166      	movs	r1, #102	; 0x66
 800ffe4:	f000 fd92 	bl	8010b0c <__assert_func>
 800ffe8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ffec:	6006      	str	r6, [r0, #0]
 800ffee:	60c6      	str	r6, [r0, #12]
 800fff0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800fff2:	68f3      	ldr	r3, [r6, #12]
 800fff4:	b183      	cbz	r3, 8010018 <_Balloc+0x50>
 800fff6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800fff8:	68db      	ldr	r3, [r3, #12]
 800fffa:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800fffe:	b9b8      	cbnz	r0, 8010030 <_Balloc+0x68>
 8010000:	2101      	movs	r1, #1
 8010002:	fa01 f605 	lsl.w	r6, r1, r5
 8010006:	1d72      	adds	r2, r6, #5
 8010008:	0092      	lsls	r2, r2, #2
 801000a:	4620      	mov	r0, r4
 801000c:	f000 fc9a 	bl	8010944 <_calloc_r>
 8010010:	b160      	cbz	r0, 801002c <_Balloc+0x64>
 8010012:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8010016:	e00e      	b.n	8010036 <_Balloc+0x6e>
 8010018:	2221      	movs	r2, #33	; 0x21
 801001a:	2104      	movs	r1, #4
 801001c:	4620      	mov	r0, r4
 801001e:	f000 fc91 	bl	8010944 <_calloc_r>
 8010022:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010024:	60f0      	str	r0, [r6, #12]
 8010026:	68db      	ldr	r3, [r3, #12]
 8010028:	2b00      	cmp	r3, #0
 801002a:	d1e4      	bne.n	800fff6 <_Balloc+0x2e>
 801002c:	2000      	movs	r0, #0
 801002e:	bd70      	pop	{r4, r5, r6, pc}
 8010030:	6802      	ldr	r2, [r0, #0]
 8010032:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8010036:	2300      	movs	r3, #0
 8010038:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801003c:	e7f7      	b.n	801002e <_Balloc+0x66>
 801003e:	bf00      	nop
 8010040:	080124c4 	.word	0x080124c4
 8010044:	080124db 	.word	0x080124db

08010048 <_Bfree>:
 8010048:	b570      	push	{r4, r5, r6, lr}
 801004a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 801004c:	4605      	mov	r5, r0
 801004e:	460c      	mov	r4, r1
 8010050:	b976      	cbnz	r6, 8010070 <_Bfree+0x28>
 8010052:	2010      	movs	r0, #16
 8010054:	f000 fd8a 	bl	8010b6c <malloc>
 8010058:	4602      	mov	r2, r0
 801005a:	6268      	str	r0, [r5, #36]	; 0x24
 801005c:	b920      	cbnz	r0, 8010068 <_Bfree+0x20>
 801005e:	4b09      	ldr	r3, [pc, #36]	; (8010084 <_Bfree+0x3c>)
 8010060:	4809      	ldr	r0, [pc, #36]	; (8010088 <_Bfree+0x40>)
 8010062:	218a      	movs	r1, #138	; 0x8a
 8010064:	f000 fd52 	bl	8010b0c <__assert_func>
 8010068:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801006c:	6006      	str	r6, [r0, #0]
 801006e:	60c6      	str	r6, [r0, #12]
 8010070:	b13c      	cbz	r4, 8010082 <_Bfree+0x3a>
 8010072:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8010074:	6862      	ldr	r2, [r4, #4]
 8010076:	68db      	ldr	r3, [r3, #12]
 8010078:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801007c:	6021      	str	r1, [r4, #0]
 801007e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8010082:	bd70      	pop	{r4, r5, r6, pc}
 8010084:	080124c4 	.word	0x080124c4
 8010088:	080124db 	.word	0x080124db

0801008c <__multadd>:
 801008c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010090:	690d      	ldr	r5, [r1, #16]
 8010092:	4607      	mov	r7, r0
 8010094:	460c      	mov	r4, r1
 8010096:	461e      	mov	r6, r3
 8010098:	f101 0c14 	add.w	ip, r1, #20
 801009c:	2000      	movs	r0, #0
 801009e:	f8dc 3000 	ldr.w	r3, [ip]
 80100a2:	b299      	uxth	r1, r3
 80100a4:	fb02 6101 	mla	r1, r2, r1, r6
 80100a8:	0c1e      	lsrs	r6, r3, #16
 80100aa:	0c0b      	lsrs	r3, r1, #16
 80100ac:	fb02 3306 	mla	r3, r2, r6, r3
 80100b0:	b289      	uxth	r1, r1
 80100b2:	3001      	adds	r0, #1
 80100b4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80100b8:	4285      	cmp	r5, r0
 80100ba:	f84c 1b04 	str.w	r1, [ip], #4
 80100be:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80100c2:	dcec      	bgt.n	801009e <__multadd+0x12>
 80100c4:	b30e      	cbz	r6, 801010a <__multadd+0x7e>
 80100c6:	68a3      	ldr	r3, [r4, #8]
 80100c8:	42ab      	cmp	r3, r5
 80100ca:	dc19      	bgt.n	8010100 <__multadd+0x74>
 80100cc:	6861      	ldr	r1, [r4, #4]
 80100ce:	4638      	mov	r0, r7
 80100d0:	3101      	adds	r1, #1
 80100d2:	f7ff ff79 	bl	800ffc8 <_Balloc>
 80100d6:	4680      	mov	r8, r0
 80100d8:	b928      	cbnz	r0, 80100e6 <__multadd+0x5a>
 80100da:	4602      	mov	r2, r0
 80100dc:	4b0c      	ldr	r3, [pc, #48]	; (8010110 <__multadd+0x84>)
 80100de:	480d      	ldr	r0, [pc, #52]	; (8010114 <__multadd+0x88>)
 80100e0:	21b5      	movs	r1, #181	; 0xb5
 80100e2:	f000 fd13 	bl	8010b0c <__assert_func>
 80100e6:	6922      	ldr	r2, [r4, #16]
 80100e8:	3202      	adds	r2, #2
 80100ea:	f104 010c 	add.w	r1, r4, #12
 80100ee:	0092      	lsls	r2, r2, #2
 80100f0:	300c      	adds	r0, #12
 80100f2:	f7fe fdf3 	bl	800ecdc <memcpy>
 80100f6:	4621      	mov	r1, r4
 80100f8:	4638      	mov	r0, r7
 80100fa:	f7ff ffa5 	bl	8010048 <_Bfree>
 80100fe:	4644      	mov	r4, r8
 8010100:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8010104:	3501      	adds	r5, #1
 8010106:	615e      	str	r6, [r3, #20]
 8010108:	6125      	str	r5, [r4, #16]
 801010a:	4620      	mov	r0, r4
 801010c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010110:	08012438 	.word	0x08012438
 8010114:	080124db 	.word	0x080124db

08010118 <__s2b>:
 8010118:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801011c:	460c      	mov	r4, r1
 801011e:	4615      	mov	r5, r2
 8010120:	461f      	mov	r7, r3
 8010122:	2209      	movs	r2, #9
 8010124:	3308      	adds	r3, #8
 8010126:	4606      	mov	r6, r0
 8010128:	fb93 f3f2 	sdiv	r3, r3, r2
 801012c:	2100      	movs	r1, #0
 801012e:	2201      	movs	r2, #1
 8010130:	429a      	cmp	r2, r3
 8010132:	db09      	blt.n	8010148 <__s2b+0x30>
 8010134:	4630      	mov	r0, r6
 8010136:	f7ff ff47 	bl	800ffc8 <_Balloc>
 801013a:	b940      	cbnz	r0, 801014e <__s2b+0x36>
 801013c:	4602      	mov	r2, r0
 801013e:	4b19      	ldr	r3, [pc, #100]	; (80101a4 <__s2b+0x8c>)
 8010140:	4819      	ldr	r0, [pc, #100]	; (80101a8 <__s2b+0x90>)
 8010142:	21ce      	movs	r1, #206	; 0xce
 8010144:	f000 fce2 	bl	8010b0c <__assert_func>
 8010148:	0052      	lsls	r2, r2, #1
 801014a:	3101      	adds	r1, #1
 801014c:	e7f0      	b.n	8010130 <__s2b+0x18>
 801014e:	9b08      	ldr	r3, [sp, #32]
 8010150:	6143      	str	r3, [r0, #20]
 8010152:	2d09      	cmp	r5, #9
 8010154:	f04f 0301 	mov.w	r3, #1
 8010158:	6103      	str	r3, [r0, #16]
 801015a:	dd16      	ble.n	801018a <__s2b+0x72>
 801015c:	f104 0909 	add.w	r9, r4, #9
 8010160:	46c8      	mov	r8, r9
 8010162:	442c      	add	r4, r5
 8010164:	f818 3b01 	ldrb.w	r3, [r8], #1
 8010168:	4601      	mov	r1, r0
 801016a:	3b30      	subs	r3, #48	; 0x30
 801016c:	220a      	movs	r2, #10
 801016e:	4630      	mov	r0, r6
 8010170:	f7ff ff8c 	bl	801008c <__multadd>
 8010174:	45a0      	cmp	r8, r4
 8010176:	d1f5      	bne.n	8010164 <__s2b+0x4c>
 8010178:	f1a5 0408 	sub.w	r4, r5, #8
 801017c:	444c      	add	r4, r9
 801017e:	1b2d      	subs	r5, r5, r4
 8010180:	1963      	adds	r3, r4, r5
 8010182:	42bb      	cmp	r3, r7
 8010184:	db04      	blt.n	8010190 <__s2b+0x78>
 8010186:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801018a:	340a      	adds	r4, #10
 801018c:	2509      	movs	r5, #9
 801018e:	e7f6      	b.n	801017e <__s2b+0x66>
 8010190:	f814 3b01 	ldrb.w	r3, [r4], #1
 8010194:	4601      	mov	r1, r0
 8010196:	3b30      	subs	r3, #48	; 0x30
 8010198:	220a      	movs	r2, #10
 801019a:	4630      	mov	r0, r6
 801019c:	f7ff ff76 	bl	801008c <__multadd>
 80101a0:	e7ee      	b.n	8010180 <__s2b+0x68>
 80101a2:	bf00      	nop
 80101a4:	08012438 	.word	0x08012438
 80101a8:	080124db 	.word	0x080124db

080101ac <__hi0bits>:
 80101ac:	0c03      	lsrs	r3, r0, #16
 80101ae:	041b      	lsls	r3, r3, #16
 80101b0:	b9d3      	cbnz	r3, 80101e8 <__hi0bits+0x3c>
 80101b2:	0400      	lsls	r0, r0, #16
 80101b4:	2310      	movs	r3, #16
 80101b6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80101ba:	bf04      	itt	eq
 80101bc:	0200      	lsleq	r0, r0, #8
 80101be:	3308      	addeq	r3, #8
 80101c0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80101c4:	bf04      	itt	eq
 80101c6:	0100      	lsleq	r0, r0, #4
 80101c8:	3304      	addeq	r3, #4
 80101ca:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80101ce:	bf04      	itt	eq
 80101d0:	0080      	lsleq	r0, r0, #2
 80101d2:	3302      	addeq	r3, #2
 80101d4:	2800      	cmp	r0, #0
 80101d6:	db05      	blt.n	80101e4 <__hi0bits+0x38>
 80101d8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80101dc:	f103 0301 	add.w	r3, r3, #1
 80101e0:	bf08      	it	eq
 80101e2:	2320      	moveq	r3, #32
 80101e4:	4618      	mov	r0, r3
 80101e6:	4770      	bx	lr
 80101e8:	2300      	movs	r3, #0
 80101ea:	e7e4      	b.n	80101b6 <__hi0bits+0xa>

080101ec <__lo0bits>:
 80101ec:	6803      	ldr	r3, [r0, #0]
 80101ee:	f013 0207 	ands.w	r2, r3, #7
 80101f2:	4601      	mov	r1, r0
 80101f4:	d00b      	beq.n	801020e <__lo0bits+0x22>
 80101f6:	07da      	lsls	r2, r3, #31
 80101f8:	d423      	bmi.n	8010242 <__lo0bits+0x56>
 80101fa:	0798      	lsls	r0, r3, #30
 80101fc:	bf49      	itett	mi
 80101fe:	085b      	lsrmi	r3, r3, #1
 8010200:	089b      	lsrpl	r3, r3, #2
 8010202:	2001      	movmi	r0, #1
 8010204:	600b      	strmi	r3, [r1, #0]
 8010206:	bf5c      	itt	pl
 8010208:	600b      	strpl	r3, [r1, #0]
 801020a:	2002      	movpl	r0, #2
 801020c:	4770      	bx	lr
 801020e:	b298      	uxth	r0, r3
 8010210:	b9a8      	cbnz	r0, 801023e <__lo0bits+0x52>
 8010212:	0c1b      	lsrs	r3, r3, #16
 8010214:	2010      	movs	r0, #16
 8010216:	b2da      	uxtb	r2, r3
 8010218:	b90a      	cbnz	r2, 801021e <__lo0bits+0x32>
 801021a:	3008      	adds	r0, #8
 801021c:	0a1b      	lsrs	r3, r3, #8
 801021e:	071a      	lsls	r2, r3, #28
 8010220:	bf04      	itt	eq
 8010222:	091b      	lsreq	r3, r3, #4
 8010224:	3004      	addeq	r0, #4
 8010226:	079a      	lsls	r2, r3, #30
 8010228:	bf04      	itt	eq
 801022a:	089b      	lsreq	r3, r3, #2
 801022c:	3002      	addeq	r0, #2
 801022e:	07da      	lsls	r2, r3, #31
 8010230:	d403      	bmi.n	801023a <__lo0bits+0x4e>
 8010232:	085b      	lsrs	r3, r3, #1
 8010234:	f100 0001 	add.w	r0, r0, #1
 8010238:	d005      	beq.n	8010246 <__lo0bits+0x5a>
 801023a:	600b      	str	r3, [r1, #0]
 801023c:	4770      	bx	lr
 801023e:	4610      	mov	r0, r2
 8010240:	e7e9      	b.n	8010216 <__lo0bits+0x2a>
 8010242:	2000      	movs	r0, #0
 8010244:	4770      	bx	lr
 8010246:	2020      	movs	r0, #32
 8010248:	4770      	bx	lr
	...

0801024c <__i2b>:
 801024c:	b510      	push	{r4, lr}
 801024e:	460c      	mov	r4, r1
 8010250:	2101      	movs	r1, #1
 8010252:	f7ff feb9 	bl	800ffc8 <_Balloc>
 8010256:	4602      	mov	r2, r0
 8010258:	b928      	cbnz	r0, 8010266 <__i2b+0x1a>
 801025a:	4b05      	ldr	r3, [pc, #20]	; (8010270 <__i2b+0x24>)
 801025c:	4805      	ldr	r0, [pc, #20]	; (8010274 <__i2b+0x28>)
 801025e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8010262:	f000 fc53 	bl	8010b0c <__assert_func>
 8010266:	2301      	movs	r3, #1
 8010268:	6144      	str	r4, [r0, #20]
 801026a:	6103      	str	r3, [r0, #16]
 801026c:	bd10      	pop	{r4, pc}
 801026e:	bf00      	nop
 8010270:	08012438 	.word	0x08012438
 8010274:	080124db 	.word	0x080124db

08010278 <__multiply>:
 8010278:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801027c:	4691      	mov	r9, r2
 801027e:	690a      	ldr	r2, [r1, #16]
 8010280:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8010284:	429a      	cmp	r2, r3
 8010286:	bfb8      	it	lt
 8010288:	460b      	movlt	r3, r1
 801028a:	460c      	mov	r4, r1
 801028c:	bfbc      	itt	lt
 801028e:	464c      	movlt	r4, r9
 8010290:	4699      	movlt	r9, r3
 8010292:	6927      	ldr	r7, [r4, #16]
 8010294:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8010298:	68a3      	ldr	r3, [r4, #8]
 801029a:	6861      	ldr	r1, [r4, #4]
 801029c:	eb07 060a 	add.w	r6, r7, sl
 80102a0:	42b3      	cmp	r3, r6
 80102a2:	b085      	sub	sp, #20
 80102a4:	bfb8      	it	lt
 80102a6:	3101      	addlt	r1, #1
 80102a8:	f7ff fe8e 	bl	800ffc8 <_Balloc>
 80102ac:	b930      	cbnz	r0, 80102bc <__multiply+0x44>
 80102ae:	4602      	mov	r2, r0
 80102b0:	4b44      	ldr	r3, [pc, #272]	; (80103c4 <__multiply+0x14c>)
 80102b2:	4845      	ldr	r0, [pc, #276]	; (80103c8 <__multiply+0x150>)
 80102b4:	f240 115d 	movw	r1, #349	; 0x15d
 80102b8:	f000 fc28 	bl	8010b0c <__assert_func>
 80102bc:	f100 0514 	add.w	r5, r0, #20
 80102c0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80102c4:	462b      	mov	r3, r5
 80102c6:	2200      	movs	r2, #0
 80102c8:	4543      	cmp	r3, r8
 80102ca:	d321      	bcc.n	8010310 <__multiply+0x98>
 80102cc:	f104 0314 	add.w	r3, r4, #20
 80102d0:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80102d4:	f109 0314 	add.w	r3, r9, #20
 80102d8:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80102dc:	9202      	str	r2, [sp, #8]
 80102de:	1b3a      	subs	r2, r7, r4
 80102e0:	3a15      	subs	r2, #21
 80102e2:	f022 0203 	bic.w	r2, r2, #3
 80102e6:	3204      	adds	r2, #4
 80102e8:	f104 0115 	add.w	r1, r4, #21
 80102ec:	428f      	cmp	r7, r1
 80102ee:	bf38      	it	cc
 80102f0:	2204      	movcc	r2, #4
 80102f2:	9201      	str	r2, [sp, #4]
 80102f4:	9a02      	ldr	r2, [sp, #8]
 80102f6:	9303      	str	r3, [sp, #12]
 80102f8:	429a      	cmp	r2, r3
 80102fa:	d80c      	bhi.n	8010316 <__multiply+0x9e>
 80102fc:	2e00      	cmp	r6, #0
 80102fe:	dd03      	ble.n	8010308 <__multiply+0x90>
 8010300:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8010304:	2b00      	cmp	r3, #0
 8010306:	d05a      	beq.n	80103be <__multiply+0x146>
 8010308:	6106      	str	r6, [r0, #16]
 801030a:	b005      	add	sp, #20
 801030c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010310:	f843 2b04 	str.w	r2, [r3], #4
 8010314:	e7d8      	b.n	80102c8 <__multiply+0x50>
 8010316:	f8b3 a000 	ldrh.w	sl, [r3]
 801031a:	f1ba 0f00 	cmp.w	sl, #0
 801031e:	d024      	beq.n	801036a <__multiply+0xf2>
 8010320:	f104 0e14 	add.w	lr, r4, #20
 8010324:	46a9      	mov	r9, r5
 8010326:	f04f 0c00 	mov.w	ip, #0
 801032a:	f85e 2b04 	ldr.w	r2, [lr], #4
 801032e:	f8d9 1000 	ldr.w	r1, [r9]
 8010332:	fa1f fb82 	uxth.w	fp, r2
 8010336:	b289      	uxth	r1, r1
 8010338:	fb0a 110b 	mla	r1, sl, fp, r1
 801033c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8010340:	f8d9 2000 	ldr.w	r2, [r9]
 8010344:	4461      	add	r1, ip
 8010346:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801034a:	fb0a c20b 	mla	r2, sl, fp, ip
 801034e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8010352:	b289      	uxth	r1, r1
 8010354:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8010358:	4577      	cmp	r7, lr
 801035a:	f849 1b04 	str.w	r1, [r9], #4
 801035e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8010362:	d8e2      	bhi.n	801032a <__multiply+0xb2>
 8010364:	9a01      	ldr	r2, [sp, #4]
 8010366:	f845 c002 	str.w	ip, [r5, r2]
 801036a:	9a03      	ldr	r2, [sp, #12]
 801036c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8010370:	3304      	adds	r3, #4
 8010372:	f1b9 0f00 	cmp.w	r9, #0
 8010376:	d020      	beq.n	80103ba <__multiply+0x142>
 8010378:	6829      	ldr	r1, [r5, #0]
 801037a:	f104 0c14 	add.w	ip, r4, #20
 801037e:	46ae      	mov	lr, r5
 8010380:	f04f 0a00 	mov.w	sl, #0
 8010384:	f8bc b000 	ldrh.w	fp, [ip]
 8010388:	f8be 2002 	ldrh.w	r2, [lr, #2]
 801038c:	fb09 220b 	mla	r2, r9, fp, r2
 8010390:	4492      	add	sl, r2
 8010392:	b289      	uxth	r1, r1
 8010394:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8010398:	f84e 1b04 	str.w	r1, [lr], #4
 801039c:	f85c 2b04 	ldr.w	r2, [ip], #4
 80103a0:	f8be 1000 	ldrh.w	r1, [lr]
 80103a4:	0c12      	lsrs	r2, r2, #16
 80103a6:	fb09 1102 	mla	r1, r9, r2, r1
 80103aa:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 80103ae:	4567      	cmp	r7, ip
 80103b0:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80103b4:	d8e6      	bhi.n	8010384 <__multiply+0x10c>
 80103b6:	9a01      	ldr	r2, [sp, #4]
 80103b8:	50a9      	str	r1, [r5, r2]
 80103ba:	3504      	adds	r5, #4
 80103bc:	e79a      	b.n	80102f4 <__multiply+0x7c>
 80103be:	3e01      	subs	r6, #1
 80103c0:	e79c      	b.n	80102fc <__multiply+0x84>
 80103c2:	bf00      	nop
 80103c4:	08012438 	.word	0x08012438
 80103c8:	080124db 	.word	0x080124db

080103cc <__pow5mult>:
 80103cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80103d0:	4615      	mov	r5, r2
 80103d2:	f012 0203 	ands.w	r2, r2, #3
 80103d6:	4606      	mov	r6, r0
 80103d8:	460f      	mov	r7, r1
 80103da:	d007      	beq.n	80103ec <__pow5mult+0x20>
 80103dc:	4c25      	ldr	r4, [pc, #148]	; (8010474 <__pow5mult+0xa8>)
 80103de:	3a01      	subs	r2, #1
 80103e0:	2300      	movs	r3, #0
 80103e2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80103e6:	f7ff fe51 	bl	801008c <__multadd>
 80103ea:	4607      	mov	r7, r0
 80103ec:	10ad      	asrs	r5, r5, #2
 80103ee:	d03d      	beq.n	801046c <__pow5mult+0xa0>
 80103f0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80103f2:	b97c      	cbnz	r4, 8010414 <__pow5mult+0x48>
 80103f4:	2010      	movs	r0, #16
 80103f6:	f000 fbb9 	bl	8010b6c <malloc>
 80103fa:	4602      	mov	r2, r0
 80103fc:	6270      	str	r0, [r6, #36]	; 0x24
 80103fe:	b928      	cbnz	r0, 801040c <__pow5mult+0x40>
 8010400:	4b1d      	ldr	r3, [pc, #116]	; (8010478 <__pow5mult+0xac>)
 8010402:	481e      	ldr	r0, [pc, #120]	; (801047c <__pow5mult+0xb0>)
 8010404:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8010408:	f000 fb80 	bl	8010b0c <__assert_func>
 801040c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8010410:	6004      	str	r4, [r0, #0]
 8010412:	60c4      	str	r4, [r0, #12]
 8010414:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8010418:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801041c:	b94c      	cbnz	r4, 8010432 <__pow5mult+0x66>
 801041e:	f240 2171 	movw	r1, #625	; 0x271
 8010422:	4630      	mov	r0, r6
 8010424:	f7ff ff12 	bl	801024c <__i2b>
 8010428:	2300      	movs	r3, #0
 801042a:	f8c8 0008 	str.w	r0, [r8, #8]
 801042e:	4604      	mov	r4, r0
 8010430:	6003      	str	r3, [r0, #0]
 8010432:	f04f 0900 	mov.w	r9, #0
 8010436:	07eb      	lsls	r3, r5, #31
 8010438:	d50a      	bpl.n	8010450 <__pow5mult+0x84>
 801043a:	4639      	mov	r1, r7
 801043c:	4622      	mov	r2, r4
 801043e:	4630      	mov	r0, r6
 8010440:	f7ff ff1a 	bl	8010278 <__multiply>
 8010444:	4639      	mov	r1, r7
 8010446:	4680      	mov	r8, r0
 8010448:	4630      	mov	r0, r6
 801044a:	f7ff fdfd 	bl	8010048 <_Bfree>
 801044e:	4647      	mov	r7, r8
 8010450:	106d      	asrs	r5, r5, #1
 8010452:	d00b      	beq.n	801046c <__pow5mult+0xa0>
 8010454:	6820      	ldr	r0, [r4, #0]
 8010456:	b938      	cbnz	r0, 8010468 <__pow5mult+0x9c>
 8010458:	4622      	mov	r2, r4
 801045a:	4621      	mov	r1, r4
 801045c:	4630      	mov	r0, r6
 801045e:	f7ff ff0b 	bl	8010278 <__multiply>
 8010462:	6020      	str	r0, [r4, #0]
 8010464:	f8c0 9000 	str.w	r9, [r0]
 8010468:	4604      	mov	r4, r0
 801046a:	e7e4      	b.n	8010436 <__pow5mult+0x6a>
 801046c:	4638      	mov	r0, r7
 801046e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010472:	bf00      	nop
 8010474:	08012628 	.word	0x08012628
 8010478:	080124c4 	.word	0x080124c4
 801047c:	080124db 	.word	0x080124db

08010480 <__lshift>:
 8010480:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010484:	460c      	mov	r4, r1
 8010486:	6849      	ldr	r1, [r1, #4]
 8010488:	6923      	ldr	r3, [r4, #16]
 801048a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801048e:	68a3      	ldr	r3, [r4, #8]
 8010490:	4607      	mov	r7, r0
 8010492:	4691      	mov	r9, r2
 8010494:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8010498:	f108 0601 	add.w	r6, r8, #1
 801049c:	42b3      	cmp	r3, r6
 801049e:	db0b      	blt.n	80104b8 <__lshift+0x38>
 80104a0:	4638      	mov	r0, r7
 80104a2:	f7ff fd91 	bl	800ffc8 <_Balloc>
 80104a6:	4605      	mov	r5, r0
 80104a8:	b948      	cbnz	r0, 80104be <__lshift+0x3e>
 80104aa:	4602      	mov	r2, r0
 80104ac:	4b2a      	ldr	r3, [pc, #168]	; (8010558 <__lshift+0xd8>)
 80104ae:	482b      	ldr	r0, [pc, #172]	; (801055c <__lshift+0xdc>)
 80104b0:	f240 11d9 	movw	r1, #473	; 0x1d9
 80104b4:	f000 fb2a 	bl	8010b0c <__assert_func>
 80104b8:	3101      	adds	r1, #1
 80104ba:	005b      	lsls	r3, r3, #1
 80104bc:	e7ee      	b.n	801049c <__lshift+0x1c>
 80104be:	2300      	movs	r3, #0
 80104c0:	f100 0114 	add.w	r1, r0, #20
 80104c4:	f100 0210 	add.w	r2, r0, #16
 80104c8:	4618      	mov	r0, r3
 80104ca:	4553      	cmp	r3, sl
 80104cc:	db37      	blt.n	801053e <__lshift+0xbe>
 80104ce:	6920      	ldr	r0, [r4, #16]
 80104d0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80104d4:	f104 0314 	add.w	r3, r4, #20
 80104d8:	f019 091f 	ands.w	r9, r9, #31
 80104dc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80104e0:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80104e4:	d02f      	beq.n	8010546 <__lshift+0xc6>
 80104e6:	f1c9 0e20 	rsb	lr, r9, #32
 80104ea:	468a      	mov	sl, r1
 80104ec:	f04f 0c00 	mov.w	ip, #0
 80104f0:	681a      	ldr	r2, [r3, #0]
 80104f2:	fa02 f209 	lsl.w	r2, r2, r9
 80104f6:	ea42 020c 	orr.w	r2, r2, ip
 80104fa:	f84a 2b04 	str.w	r2, [sl], #4
 80104fe:	f853 2b04 	ldr.w	r2, [r3], #4
 8010502:	4298      	cmp	r0, r3
 8010504:	fa22 fc0e 	lsr.w	ip, r2, lr
 8010508:	d8f2      	bhi.n	80104f0 <__lshift+0x70>
 801050a:	1b03      	subs	r3, r0, r4
 801050c:	3b15      	subs	r3, #21
 801050e:	f023 0303 	bic.w	r3, r3, #3
 8010512:	3304      	adds	r3, #4
 8010514:	f104 0215 	add.w	r2, r4, #21
 8010518:	4290      	cmp	r0, r2
 801051a:	bf38      	it	cc
 801051c:	2304      	movcc	r3, #4
 801051e:	f841 c003 	str.w	ip, [r1, r3]
 8010522:	f1bc 0f00 	cmp.w	ip, #0
 8010526:	d001      	beq.n	801052c <__lshift+0xac>
 8010528:	f108 0602 	add.w	r6, r8, #2
 801052c:	3e01      	subs	r6, #1
 801052e:	4638      	mov	r0, r7
 8010530:	612e      	str	r6, [r5, #16]
 8010532:	4621      	mov	r1, r4
 8010534:	f7ff fd88 	bl	8010048 <_Bfree>
 8010538:	4628      	mov	r0, r5
 801053a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801053e:	f842 0f04 	str.w	r0, [r2, #4]!
 8010542:	3301      	adds	r3, #1
 8010544:	e7c1      	b.n	80104ca <__lshift+0x4a>
 8010546:	3904      	subs	r1, #4
 8010548:	f853 2b04 	ldr.w	r2, [r3], #4
 801054c:	f841 2f04 	str.w	r2, [r1, #4]!
 8010550:	4298      	cmp	r0, r3
 8010552:	d8f9      	bhi.n	8010548 <__lshift+0xc8>
 8010554:	e7ea      	b.n	801052c <__lshift+0xac>
 8010556:	bf00      	nop
 8010558:	08012438 	.word	0x08012438
 801055c:	080124db 	.word	0x080124db

08010560 <__mcmp>:
 8010560:	b530      	push	{r4, r5, lr}
 8010562:	6902      	ldr	r2, [r0, #16]
 8010564:	690c      	ldr	r4, [r1, #16]
 8010566:	1b12      	subs	r2, r2, r4
 8010568:	d10e      	bne.n	8010588 <__mcmp+0x28>
 801056a:	f100 0314 	add.w	r3, r0, #20
 801056e:	3114      	adds	r1, #20
 8010570:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8010574:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8010578:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 801057c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8010580:	42a5      	cmp	r5, r4
 8010582:	d003      	beq.n	801058c <__mcmp+0x2c>
 8010584:	d305      	bcc.n	8010592 <__mcmp+0x32>
 8010586:	2201      	movs	r2, #1
 8010588:	4610      	mov	r0, r2
 801058a:	bd30      	pop	{r4, r5, pc}
 801058c:	4283      	cmp	r3, r0
 801058e:	d3f3      	bcc.n	8010578 <__mcmp+0x18>
 8010590:	e7fa      	b.n	8010588 <__mcmp+0x28>
 8010592:	f04f 32ff 	mov.w	r2, #4294967295
 8010596:	e7f7      	b.n	8010588 <__mcmp+0x28>

08010598 <__mdiff>:
 8010598:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801059c:	460c      	mov	r4, r1
 801059e:	4606      	mov	r6, r0
 80105a0:	4611      	mov	r1, r2
 80105a2:	4620      	mov	r0, r4
 80105a4:	4690      	mov	r8, r2
 80105a6:	f7ff ffdb 	bl	8010560 <__mcmp>
 80105aa:	1e05      	subs	r5, r0, #0
 80105ac:	d110      	bne.n	80105d0 <__mdiff+0x38>
 80105ae:	4629      	mov	r1, r5
 80105b0:	4630      	mov	r0, r6
 80105b2:	f7ff fd09 	bl	800ffc8 <_Balloc>
 80105b6:	b930      	cbnz	r0, 80105c6 <__mdiff+0x2e>
 80105b8:	4b3a      	ldr	r3, [pc, #232]	; (80106a4 <__mdiff+0x10c>)
 80105ba:	4602      	mov	r2, r0
 80105bc:	f240 2132 	movw	r1, #562	; 0x232
 80105c0:	4839      	ldr	r0, [pc, #228]	; (80106a8 <__mdiff+0x110>)
 80105c2:	f000 faa3 	bl	8010b0c <__assert_func>
 80105c6:	2301      	movs	r3, #1
 80105c8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80105cc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80105d0:	bfa4      	itt	ge
 80105d2:	4643      	movge	r3, r8
 80105d4:	46a0      	movge	r8, r4
 80105d6:	4630      	mov	r0, r6
 80105d8:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80105dc:	bfa6      	itte	ge
 80105de:	461c      	movge	r4, r3
 80105e0:	2500      	movge	r5, #0
 80105e2:	2501      	movlt	r5, #1
 80105e4:	f7ff fcf0 	bl	800ffc8 <_Balloc>
 80105e8:	b920      	cbnz	r0, 80105f4 <__mdiff+0x5c>
 80105ea:	4b2e      	ldr	r3, [pc, #184]	; (80106a4 <__mdiff+0x10c>)
 80105ec:	4602      	mov	r2, r0
 80105ee:	f44f 7110 	mov.w	r1, #576	; 0x240
 80105f2:	e7e5      	b.n	80105c0 <__mdiff+0x28>
 80105f4:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80105f8:	6926      	ldr	r6, [r4, #16]
 80105fa:	60c5      	str	r5, [r0, #12]
 80105fc:	f104 0914 	add.w	r9, r4, #20
 8010600:	f108 0514 	add.w	r5, r8, #20
 8010604:	f100 0e14 	add.w	lr, r0, #20
 8010608:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 801060c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8010610:	f108 0210 	add.w	r2, r8, #16
 8010614:	46f2      	mov	sl, lr
 8010616:	2100      	movs	r1, #0
 8010618:	f859 3b04 	ldr.w	r3, [r9], #4
 801061c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8010620:	fa1f f883 	uxth.w	r8, r3
 8010624:	fa11 f18b 	uxtah	r1, r1, fp
 8010628:	0c1b      	lsrs	r3, r3, #16
 801062a:	eba1 0808 	sub.w	r8, r1, r8
 801062e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8010632:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8010636:	fa1f f888 	uxth.w	r8, r8
 801063a:	1419      	asrs	r1, r3, #16
 801063c:	454e      	cmp	r6, r9
 801063e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8010642:	f84a 3b04 	str.w	r3, [sl], #4
 8010646:	d8e7      	bhi.n	8010618 <__mdiff+0x80>
 8010648:	1b33      	subs	r3, r6, r4
 801064a:	3b15      	subs	r3, #21
 801064c:	f023 0303 	bic.w	r3, r3, #3
 8010650:	3304      	adds	r3, #4
 8010652:	3415      	adds	r4, #21
 8010654:	42a6      	cmp	r6, r4
 8010656:	bf38      	it	cc
 8010658:	2304      	movcc	r3, #4
 801065a:	441d      	add	r5, r3
 801065c:	4473      	add	r3, lr
 801065e:	469e      	mov	lr, r3
 8010660:	462e      	mov	r6, r5
 8010662:	4566      	cmp	r6, ip
 8010664:	d30e      	bcc.n	8010684 <__mdiff+0xec>
 8010666:	f10c 0203 	add.w	r2, ip, #3
 801066a:	1b52      	subs	r2, r2, r5
 801066c:	f022 0203 	bic.w	r2, r2, #3
 8010670:	3d03      	subs	r5, #3
 8010672:	45ac      	cmp	ip, r5
 8010674:	bf38      	it	cc
 8010676:	2200      	movcc	r2, #0
 8010678:	441a      	add	r2, r3
 801067a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 801067e:	b17b      	cbz	r3, 80106a0 <__mdiff+0x108>
 8010680:	6107      	str	r7, [r0, #16]
 8010682:	e7a3      	b.n	80105cc <__mdiff+0x34>
 8010684:	f856 8b04 	ldr.w	r8, [r6], #4
 8010688:	fa11 f288 	uxtah	r2, r1, r8
 801068c:	1414      	asrs	r4, r2, #16
 801068e:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8010692:	b292      	uxth	r2, r2
 8010694:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8010698:	f84e 2b04 	str.w	r2, [lr], #4
 801069c:	1421      	asrs	r1, r4, #16
 801069e:	e7e0      	b.n	8010662 <__mdiff+0xca>
 80106a0:	3f01      	subs	r7, #1
 80106a2:	e7ea      	b.n	801067a <__mdiff+0xe2>
 80106a4:	08012438 	.word	0x08012438
 80106a8:	080124db 	.word	0x080124db

080106ac <__ulp>:
 80106ac:	b082      	sub	sp, #8
 80106ae:	ed8d 0b00 	vstr	d0, [sp]
 80106b2:	9b01      	ldr	r3, [sp, #4]
 80106b4:	4912      	ldr	r1, [pc, #72]	; (8010700 <__ulp+0x54>)
 80106b6:	4019      	ands	r1, r3
 80106b8:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 80106bc:	2900      	cmp	r1, #0
 80106be:	dd05      	ble.n	80106cc <__ulp+0x20>
 80106c0:	2200      	movs	r2, #0
 80106c2:	460b      	mov	r3, r1
 80106c4:	ec43 2b10 	vmov	d0, r2, r3
 80106c8:	b002      	add	sp, #8
 80106ca:	4770      	bx	lr
 80106cc:	4249      	negs	r1, r1
 80106ce:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 80106d2:	ea4f 5021 	mov.w	r0, r1, asr #20
 80106d6:	f04f 0200 	mov.w	r2, #0
 80106da:	f04f 0300 	mov.w	r3, #0
 80106de:	da04      	bge.n	80106ea <__ulp+0x3e>
 80106e0:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 80106e4:	fa41 f300 	asr.w	r3, r1, r0
 80106e8:	e7ec      	b.n	80106c4 <__ulp+0x18>
 80106ea:	f1a0 0114 	sub.w	r1, r0, #20
 80106ee:	291e      	cmp	r1, #30
 80106f0:	bfda      	itte	le
 80106f2:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 80106f6:	fa20 f101 	lsrle.w	r1, r0, r1
 80106fa:	2101      	movgt	r1, #1
 80106fc:	460a      	mov	r2, r1
 80106fe:	e7e1      	b.n	80106c4 <__ulp+0x18>
 8010700:	7ff00000 	.word	0x7ff00000

08010704 <__b2d>:
 8010704:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010706:	6905      	ldr	r5, [r0, #16]
 8010708:	f100 0714 	add.w	r7, r0, #20
 801070c:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8010710:	1f2e      	subs	r6, r5, #4
 8010712:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8010716:	4620      	mov	r0, r4
 8010718:	f7ff fd48 	bl	80101ac <__hi0bits>
 801071c:	f1c0 0320 	rsb	r3, r0, #32
 8010720:	280a      	cmp	r0, #10
 8010722:	f8df c07c 	ldr.w	ip, [pc, #124]	; 80107a0 <__b2d+0x9c>
 8010726:	600b      	str	r3, [r1, #0]
 8010728:	dc14      	bgt.n	8010754 <__b2d+0x50>
 801072a:	f1c0 0e0b 	rsb	lr, r0, #11
 801072e:	fa24 f10e 	lsr.w	r1, r4, lr
 8010732:	42b7      	cmp	r7, r6
 8010734:	ea41 030c 	orr.w	r3, r1, ip
 8010738:	bf34      	ite	cc
 801073a:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 801073e:	2100      	movcs	r1, #0
 8010740:	3015      	adds	r0, #21
 8010742:	fa04 f000 	lsl.w	r0, r4, r0
 8010746:	fa21 f10e 	lsr.w	r1, r1, lr
 801074a:	ea40 0201 	orr.w	r2, r0, r1
 801074e:	ec43 2b10 	vmov	d0, r2, r3
 8010752:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010754:	42b7      	cmp	r7, r6
 8010756:	bf3a      	itte	cc
 8010758:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 801075c:	f1a5 0608 	subcc.w	r6, r5, #8
 8010760:	2100      	movcs	r1, #0
 8010762:	380b      	subs	r0, #11
 8010764:	d017      	beq.n	8010796 <__b2d+0x92>
 8010766:	f1c0 0c20 	rsb	ip, r0, #32
 801076a:	fa04 f500 	lsl.w	r5, r4, r0
 801076e:	42be      	cmp	r6, r7
 8010770:	fa21 f40c 	lsr.w	r4, r1, ip
 8010774:	ea45 0504 	orr.w	r5, r5, r4
 8010778:	bf8c      	ite	hi
 801077a:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 801077e:	2400      	movls	r4, #0
 8010780:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 8010784:	fa01 f000 	lsl.w	r0, r1, r0
 8010788:	fa24 f40c 	lsr.w	r4, r4, ip
 801078c:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8010790:	ea40 0204 	orr.w	r2, r0, r4
 8010794:	e7db      	b.n	801074e <__b2d+0x4a>
 8010796:	ea44 030c 	orr.w	r3, r4, ip
 801079a:	460a      	mov	r2, r1
 801079c:	e7d7      	b.n	801074e <__b2d+0x4a>
 801079e:	bf00      	nop
 80107a0:	3ff00000 	.word	0x3ff00000

080107a4 <__d2b>:
 80107a4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80107a8:	4689      	mov	r9, r1
 80107aa:	2101      	movs	r1, #1
 80107ac:	ec57 6b10 	vmov	r6, r7, d0
 80107b0:	4690      	mov	r8, r2
 80107b2:	f7ff fc09 	bl	800ffc8 <_Balloc>
 80107b6:	4604      	mov	r4, r0
 80107b8:	b930      	cbnz	r0, 80107c8 <__d2b+0x24>
 80107ba:	4602      	mov	r2, r0
 80107bc:	4b25      	ldr	r3, [pc, #148]	; (8010854 <__d2b+0xb0>)
 80107be:	4826      	ldr	r0, [pc, #152]	; (8010858 <__d2b+0xb4>)
 80107c0:	f240 310a 	movw	r1, #778	; 0x30a
 80107c4:	f000 f9a2 	bl	8010b0c <__assert_func>
 80107c8:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80107cc:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80107d0:	bb35      	cbnz	r5, 8010820 <__d2b+0x7c>
 80107d2:	2e00      	cmp	r6, #0
 80107d4:	9301      	str	r3, [sp, #4]
 80107d6:	d028      	beq.n	801082a <__d2b+0x86>
 80107d8:	4668      	mov	r0, sp
 80107da:	9600      	str	r6, [sp, #0]
 80107dc:	f7ff fd06 	bl	80101ec <__lo0bits>
 80107e0:	9900      	ldr	r1, [sp, #0]
 80107e2:	b300      	cbz	r0, 8010826 <__d2b+0x82>
 80107e4:	9a01      	ldr	r2, [sp, #4]
 80107e6:	f1c0 0320 	rsb	r3, r0, #32
 80107ea:	fa02 f303 	lsl.w	r3, r2, r3
 80107ee:	430b      	orrs	r3, r1
 80107f0:	40c2      	lsrs	r2, r0
 80107f2:	6163      	str	r3, [r4, #20]
 80107f4:	9201      	str	r2, [sp, #4]
 80107f6:	9b01      	ldr	r3, [sp, #4]
 80107f8:	61a3      	str	r3, [r4, #24]
 80107fa:	2b00      	cmp	r3, #0
 80107fc:	bf14      	ite	ne
 80107fe:	2202      	movne	r2, #2
 8010800:	2201      	moveq	r2, #1
 8010802:	6122      	str	r2, [r4, #16]
 8010804:	b1d5      	cbz	r5, 801083c <__d2b+0x98>
 8010806:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 801080a:	4405      	add	r5, r0
 801080c:	f8c9 5000 	str.w	r5, [r9]
 8010810:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8010814:	f8c8 0000 	str.w	r0, [r8]
 8010818:	4620      	mov	r0, r4
 801081a:	b003      	add	sp, #12
 801081c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010820:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8010824:	e7d5      	b.n	80107d2 <__d2b+0x2e>
 8010826:	6161      	str	r1, [r4, #20]
 8010828:	e7e5      	b.n	80107f6 <__d2b+0x52>
 801082a:	a801      	add	r0, sp, #4
 801082c:	f7ff fcde 	bl	80101ec <__lo0bits>
 8010830:	9b01      	ldr	r3, [sp, #4]
 8010832:	6163      	str	r3, [r4, #20]
 8010834:	2201      	movs	r2, #1
 8010836:	6122      	str	r2, [r4, #16]
 8010838:	3020      	adds	r0, #32
 801083a:	e7e3      	b.n	8010804 <__d2b+0x60>
 801083c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8010840:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8010844:	f8c9 0000 	str.w	r0, [r9]
 8010848:	6918      	ldr	r0, [r3, #16]
 801084a:	f7ff fcaf 	bl	80101ac <__hi0bits>
 801084e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8010852:	e7df      	b.n	8010814 <__d2b+0x70>
 8010854:	08012438 	.word	0x08012438
 8010858:	080124db 	.word	0x080124db

0801085c <__ratio>:
 801085c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010860:	4688      	mov	r8, r1
 8010862:	4669      	mov	r1, sp
 8010864:	4681      	mov	r9, r0
 8010866:	f7ff ff4d 	bl	8010704 <__b2d>
 801086a:	a901      	add	r1, sp, #4
 801086c:	4640      	mov	r0, r8
 801086e:	ec55 4b10 	vmov	r4, r5, d0
 8010872:	ee10 aa10 	vmov	sl, s0
 8010876:	f7ff ff45 	bl	8010704 <__b2d>
 801087a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801087e:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8010882:	1a59      	subs	r1, r3, r1
 8010884:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010888:	1ad3      	subs	r3, r2, r3
 801088a:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 801088e:	ec57 6b10 	vmov	r6, r7, d0
 8010892:	2b00      	cmp	r3, #0
 8010894:	bfd6      	itet	le
 8010896:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 801089a:	462a      	movgt	r2, r5
 801089c:	463a      	movle	r2, r7
 801089e:	46ab      	mov	fp, r5
 80108a0:	bfd6      	itet	le
 80108a2:	eb02 5303 	addle.w	r3, r2, r3, lsl #20
 80108a6:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 80108aa:	ee00 3a90 	vmovle	s1, r3
 80108ae:	ec4b ab17 	vmov	d7, sl, fp
 80108b2:	ee87 0b00 	vdiv.f64	d0, d7, d0
 80108b6:	b003      	add	sp, #12
 80108b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080108bc <__copybits>:
 80108bc:	3901      	subs	r1, #1
 80108be:	b570      	push	{r4, r5, r6, lr}
 80108c0:	1149      	asrs	r1, r1, #5
 80108c2:	6914      	ldr	r4, [r2, #16]
 80108c4:	3101      	adds	r1, #1
 80108c6:	f102 0314 	add.w	r3, r2, #20
 80108ca:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80108ce:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80108d2:	1f05      	subs	r5, r0, #4
 80108d4:	42a3      	cmp	r3, r4
 80108d6:	d30c      	bcc.n	80108f2 <__copybits+0x36>
 80108d8:	1aa3      	subs	r3, r4, r2
 80108da:	3b11      	subs	r3, #17
 80108dc:	f023 0303 	bic.w	r3, r3, #3
 80108e0:	3211      	adds	r2, #17
 80108e2:	42a2      	cmp	r2, r4
 80108e4:	bf88      	it	hi
 80108e6:	2300      	movhi	r3, #0
 80108e8:	4418      	add	r0, r3
 80108ea:	2300      	movs	r3, #0
 80108ec:	4288      	cmp	r0, r1
 80108ee:	d305      	bcc.n	80108fc <__copybits+0x40>
 80108f0:	bd70      	pop	{r4, r5, r6, pc}
 80108f2:	f853 6b04 	ldr.w	r6, [r3], #4
 80108f6:	f845 6f04 	str.w	r6, [r5, #4]!
 80108fa:	e7eb      	b.n	80108d4 <__copybits+0x18>
 80108fc:	f840 3b04 	str.w	r3, [r0], #4
 8010900:	e7f4      	b.n	80108ec <__copybits+0x30>

08010902 <__any_on>:
 8010902:	f100 0214 	add.w	r2, r0, #20
 8010906:	6900      	ldr	r0, [r0, #16]
 8010908:	114b      	asrs	r3, r1, #5
 801090a:	4298      	cmp	r0, r3
 801090c:	b510      	push	{r4, lr}
 801090e:	db11      	blt.n	8010934 <__any_on+0x32>
 8010910:	dd0a      	ble.n	8010928 <__any_on+0x26>
 8010912:	f011 011f 	ands.w	r1, r1, #31
 8010916:	d007      	beq.n	8010928 <__any_on+0x26>
 8010918:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 801091c:	fa24 f001 	lsr.w	r0, r4, r1
 8010920:	fa00 f101 	lsl.w	r1, r0, r1
 8010924:	428c      	cmp	r4, r1
 8010926:	d10b      	bne.n	8010940 <__any_on+0x3e>
 8010928:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801092c:	4293      	cmp	r3, r2
 801092e:	d803      	bhi.n	8010938 <__any_on+0x36>
 8010930:	2000      	movs	r0, #0
 8010932:	bd10      	pop	{r4, pc}
 8010934:	4603      	mov	r3, r0
 8010936:	e7f7      	b.n	8010928 <__any_on+0x26>
 8010938:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801093c:	2900      	cmp	r1, #0
 801093e:	d0f5      	beq.n	801092c <__any_on+0x2a>
 8010940:	2001      	movs	r0, #1
 8010942:	e7f6      	b.n	8010932 <__any_on+0x30>

08010944 <_calloc_r>:
 8010944:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8010946:	fba1 2402 	umull	r2, r4, r1, r2
 801094a:	b94c      	cbnz	r4, 8010960 <_calloc_r+0x1c>
 801094c:	4611      	mov	r1, r2
 801094e:	9201      	str	r2, [sp, #4]
 8010950:	f000 f82e 	bl	80109b0 <_malloc_r>
 8010954:	9a01      	ldr	r2, [sp, #4]
 8010956:	4605      	mov	r5, r0
 8010958:	b930      	cbnz	r0, 8010968 <_calloc_r+0x24>
 801095a:	4628      	mov	r0, r5
 801095c:	b003      	add	sp, #12
 801095e:	bd30      	pop	{r4, r5, pc}
 8010960:	220c      	movs	r2, #12
 8010962:	6002      	str	r2, [r0, #0]
 8010964:	2500      	movs	r5, #0
 8010966:	e7f8      	b.n	801095a <_calloc_r+0x16>
 8010968:	4621      	mov	r1, r4
 801096a:	f7fe f9c5 	bl	800ecf8 <memset>
 801096e:	e7f4      	b.n	801095a <_calloc_r+0x16>

08010970 <sbrk_aligned>:
 8010970:	b570      	push	{r4, r5, r6, lr}
 8010972:	4e0e      	ldr	r6, [pc, #56]	; (80109ac <sbrk_aligned+0x3c>)
 8010974:	460c      	mov	r4, r1
 8010976:	6831      	ldr	r1, [r6, #0]
 8010978:	4605      	mov	r5, r0
 801097a:	b911      	cbnz	r1, 8010982 <sbrk_aligned+0x12>
 801097c:	f000 f894 	bl	8010aa8 <_sbrk_r>
 8010980:	6030      	str	r0, [r6, #0]
 8010982:	4621      	mov	r1, r4
 8010984:	4628      	mov	r0, r5
 8010986:	f000 f88f 	bl	8010aa8 <_sbrk_r>
 801098a:	1c43      	adds	r3, r0, #1
 801098c:	d00a      	beq.n	80109a4 <sbrk_aligned+0x34>
 801098e:	1cc4      	adds	r4, r0, #3
 8010990:	f024 0403 	bic.w	r4, r4, #3
 8010994:	42a0      	cmp	r0, r4
 8010996:	d007      	beq.n	80109a8 <sbrk_aligned+0x38>
 8010998:	1a21      	subs	r1, r4, r0
 801099a:	4628      	mov	r0, r5
 801099c:	f000 f884 	bl	8010aa8 <_sbrk_r>
 80109a0:	3001      	adds	r0, #1
 80109a2:	d101      	bne.n	80109a8 <sbrk_aligned+0x38>
 80109a4:	f04f 34ff 	mov.w	r4, #4294967295
 80109a8:	4620      	mov	r0, r4
 80109aa:	bd70      	pop	{r4, r5, r6, pc}
 80109ac:	24000d40 	.word	0x24000d40

080109b0 <_malloc_r>:
 80109b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80109b4:	1ccd      	adds	r5, r1, #3
 80109b6:	f025 0503 	bic.w	r5, r5, #3
 80109ba:	3508      	adds	r5, #8
 80109bc:	2d0c      	cmp	r5, #12
 80109be:	bf38      	it	cc
 80109c0:	250c      	movcc	r5, #12
 80109c2:	2d00      	cmp	r5, #0
 80109c4:	4607      	mov	r7, r0
 80109c6:	db01      	blt.n	80109cc <_malloc_r+0x1c>
 80109c8:	42a9      	cmp	r1, r5
 80109ca:	d905      	bls.n	80109d8 <_malloc_r+0x28>
 80109cc:	230c      	movs	r3, #12
 80109ce:	603b      	str	r3, [r7, #0]
 80109d0:	2600      	movs	r6, #0
 80109d2:	4630      	mov	r0, r6
 80109d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80109d8:	4e2e      	ldr	r6, [pc, #184]	; (8010a94 <_malloc_r+0xe4>)
 80109da:	f000 f8cf 	bl	8010b7c <__malloc_lock>
 80109de:	6833      	ldr	r3, [r6, #0]
 80109e0:	461c      	mov	r4, r3
 80109e2:	bb34      	cbnz	r4, 8010a32 <_malloc_r+0x82>
 80109e4:	4629      	mov	r1, r5
 80109e6:	4638      	mov	r0, r7
 80109e8:	f7ff ffc2 	bl	8010970 <sbrk_aligned>
 80109ec:	1c43      	adds	r3, r0, #1
 80109ee:	4604      	mov	r4, r0
 80109f0:	d14d      	bne.n	8010a8e <_malloc_r+0xde>
 80109f2:	6834      	ldr	r4, [r6, #0]
 80109f4:	4626      	mov	r6, r4
 80109f6:	2e00      	cmp	r6, #0
 80109f8:	d140      	bne.n	8010a7c <_malloc_r+0xcc>
 80109fa:	6823      	ldr	r3, [r4, #0]
 80109fc:	4631      	mov	r1, r6
 80109fe:	4638      	mov	r0, r7
 8010a00:	eb04 0803 	add.w	r8, r4, r3
 8010a04:	f000 f850 	bl	8010aa8 <_sbrk_r>
 8010a08:	4580      	cmp	r8, r0
 8010a0a:	d13a      	bne.n	8010a82 <_malloc_r+0xd2>
 8010a0c:	6821      	ldr	r1, [r4, #0]
 8010a0e:	3503      	adds	r5, #3
 8010a10:	1a6d      	subs	r5, r5, r1
 8010a12:	f025 0503 	bic.w	r5, r5, #3
 8010a16:	3508      	adds	r5, #8
 8010a18:	2d0c      	cmp	r5, #12
 8010a1a:	bf38      	it	cc
 8010a1c:	250c      	movcc	r5, #12
 8010a1e:	4629      	mov	r1, r5
 8010a20:	4638      	mov	r0, r7
 8010a22:	f7ff ffa5 	bl	8010970 <sbrk_aligned>
 8010a26:	3001      	adds	r0, #1
 8010a28:	d02b      	beq.n	8010a82 <_malloc_r+0xd2>
 8010a2a:	6823      	ldr	r3, [r4, #0]
 8010a2c:	442b      	add	r3, r5
 8010a2e:	6023      	str	r3, [r4, #0]
 8010a30:	e00e      	b.n	8010a50 <_malloc_r+0xa0>
 8010a32:	6822      	ldr	r2, [r4, #0]
 8010a34:	1b52      	subs	r2, r2, r5
 8010a36:	d41e      	bmi.n	8010a76 <_malloc_r+0xc6>
 8010a38:	2a0b      	cmp	r2, #11
 8010a3a:	d916      	bls.n	8010a6a <_malloc_r+0xba>
 8010a3c:	1961      	adds	r1, r4, r5
 8010a3e:	42a3      	cmp	r3, r4
 8010a40:	6025      	str	r5, [r4, #0]
 8010a42:	bf18      	it	ne
 8010a44:	6059      	strne	r1, [r3, #4]
 8010a46:	6863      	ldr	r3, [r4, #4]
 8010a48:	bf08      	it	eq
 8010a4a:	6031      	streq	r1, [r6, #0]
 8010a4c:	5162      	str	r2, [r4, r5]
 8010a4e:	604b      	str	r3, [r1, #4]
 8010a50:	4638      	mov	r0, r7
 8010a52:	f104 060b 	add.w	r6, r4, #11
 8010a56:	f000 f897 	bl	8010b88 <__malloc_unlock>
 8010a5a:	f026 0607 	bic.w	r6, r6, #7
 8010a5e:	1d23      	adds	r3, r4, #4
 8010a60:	1af2      	subs	r2, r6, r3
 8010a62:	d0b6      	beq.n	80109d2 <_malloc_r+0x22>
 8010a64:	1b9b      	subs	r3, r3, r6
 8010a66:	50a3      	str	r3, [r4, r2]
 8010a68:	e7b3      	b.n	80109d2 <_malloc_r+0x22>
 8010a6a:	6862      	ldr	r2, [r4, #4]
 8010a6c:	42a3      	cmp	r3, r4
 8010a6e:	bf0c      	ite	eq
 8010a70:	6032      	streq	r2, [r6, #0]
 8010a72:	605a      	strne	r2, [r3, #4]
 8010a74:	e7ec      	b.n	8010a50 <_malloc_r+0xa0>
 8010a76:	4623      	mov	r3, r4
 8010a78:	6864      	ldr	r4, [r4, #4]
 8010a7a:	e7b2      	b.n	80109e2 <_malloc_r+0x32>
 8010a7c:	4634      	mov	r4, r6
 8010a7e:	6876      	ldr	r6, [r6, #4]
 8010a80:	e7b9      	b.n	80109f6 <_malloc_r+0x46>
 8010a82:	230c      	movs	r3, #12
 8010a84:	603b      	str	r3, [r7, #0]
 8010a86:	4638      	mov	r0, r7
 8010a88:	f000 f87e 	bl	8010b88 <__malloc_unlock>
 8010a8c:	e7a1      	b.n	80109d2 <_malloc_r+0x22>
 8010a8e:	6025      	str	r5, [r4, #0]
 8010a90:	e7de      	b.n	8010a50 <_malloc_r+0xa0>
 8010a92:	bf00      	nop
 8010a94:	24000d3c 	.word	0x24000d3c

08010a98 <nan>:
 8010a98:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8010aa0 <nan+0x8>
 8010a9c:	4770      	bx	lr
 8010a9e:	bf00      	nop
 8010aa0:	00000000 	.word	0x00000000
 8010aa4:	7ff80000 	.word	0x7ff80000

08010aa8 <_sbrk_r>:
 8010aa8:	b538      	push	{r3, r4, r5, lr}
 8010aaa:	4d06      	ldr	r5, [pc, #24]	; (8010ac4 <_sbrk_r+0x1c>)
 8010aac:	2300      	movs	r3, #0
 8010aae:	4604      	mov	r4, r0
 8010ab0:	4608      	mov	r0, r1
 8010ab2:	602b      	str	r3, [r5, #0]
 8010ab4:	f7f3 fa46 	bl	8003f44 <_sbrk>
 8010ab8:	1c43      	adds	r3, r0, #1
 8010aba:	d102      	bne.n	8010ac2 <_sbrk_r+0x1a>
 8010abc:	682b      	ldr	r3, [r5, #0]
 8010abe:	b103      	cbz	r3, 8010ac2 <_sbrk_r+0x1a>
 8010ac0:	6023      	str	r3, [r4, #0]
 8010ac2:	bd38      	pop	{r3, r4, r5, pc}
 8010ac4:	24000d44 	.word	0x24000d44

08010ac8 <strncmp>:
 8010ac8:	b510      	push	{r4, lr}
 8010aca:	b17a      	cbz	r2, 8010aec <strncmp+0x24>
 8010acc:	4603      	mov	r3, r0
 8010ace:	3901      	subs	r1, #1
 8010ad0:	1884      	adds	r4, r0, r2
 8010ad2:	f813 0b01 	ldrb.w	r0, [r3], #1
 8010ad6:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8010ada:	4290      	cmp	r0, r2
 8010adc:	d101      	bne.n	8010ae2 <strncmp+0x1a>
 8010ade:	42a3      	cmp	r3, r4
 8010ae0:	d101      	bne.n	8010ae6 <strncmp+0x1e>
 8010ae2:	1a80      	subs	r0, r0, r2
 8010ae4:	bd10      	pop	{r4, pc}
 8010ae6:	2800      	cmp	r0, #0
 8010ae8:	d1f3      	bne.n	8010ad2 <strncmp+0xa>
 8010aea:	e7fa      	b.n	8010ae2 <strncmp+0x1a>
 8010aec:	4610      	mov	r0, r2
 8010aee:	e7f9      	b.n	8010ae4 <strncmp+0x1c>

08010af0 <__ascii_wctomb>:
 8010af0:	b149      	cbz	r1, 8010b06 <__ascii_wctomb+0x16>
 8010af2:	2aff      	cmp	r2, #255	; 0xff
 8010af4:	bf85      	ittet	hi
 8010af6:	238a      	movhi	r3, #138	; 0x8a
 8010af8:	6003      	strhi	r3, [r0, #0]
 8010afa:	700a      	strbls	r2, [r1, #0]
 8010afc:	f04f 30ff 	movhi.w	r0, #4294967295
 8010b00:	bf98      	it	ls
 8010b02:	2001      	movls	r0, #1
 8010b04:	4770      	bx	lr
 8010b06:	4608      	mov	r0, r1
 8010b08:	4770      	bx	lr
	...

08010b0c <__assert_func>:
 8010b0c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8010b0e:	4614      	mov	r4, r2
 8010b10:	461a      	mov	r2, r3
 8010b12:	4b09      	ldr	r3, [pc, #36]	; (8010b38 <__assert_func+0x2c>)
 8010b14:	681b      	ldr	r3, [r3, #0]
 8010b16:	4605      	mov	r5, r0
 8010b18:	68d8      	ldr	r0, [r3, #12]
 8010b1a:	b14c      	cbz	r4, 8010b30 <__assert_func+0x24>
 8010b1c:	4b07      	ldr	r3, [pc, #28]	; (8010b3c <__assert_func+0x30>)
 8010b1e:	9100      	str	r1, [sp, #0]
 8010b20:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8010b24:	4906      	ldr	r1, [pc, #24]	; (8010b40 <__assert_func+0x34>)
 8010b26:	462b      	mov	r3, r5
 8010b28:	f000 f80e 	bl	8010b48 <fiprintf>
 8010b2c:	f000 fc2c 	bl	8011388 <abort>
 8010b30:	4b04      	ldr	r3, [pc, #16]	; (8010b44 <__assert_func+0x38>)
 8010b32:	461c      	mov	r4, r3
 8010b34:	e7f3      	b.n	8010b1e <__assert_func+0x12>
 8010b36:	bf00      	nop
 8010b38:	240000b0 	.word	0x240000b0
 8010b3c:	08012634 	.word	0x08012634
 8010b40:	08012641 	.word	0x08012641
 8010b44:	0801266f 	.word	0x0801266f

08010b48 <fiprintf>:
 8010b48:	b40e      	push	{r1, r2, r3}
 8010b4a:	b503      	push	{r0, r1, lr}
 8010b4c:	4601      	mov	r1, r0
 8010b4e:	ab03      	add	r3, sp, #12
 8010b50:	4805      	ldr	r0, [pc, #20]	; (8010b68 <fiprintf+0x20>)
 8010b52:	f853 2b04 	ldr.w	r2, [r3], #4
 8010b56:	6800      	ldr	r0, [r0, #0]
 8010b58:	9301      	str	r3, [sp, #4]
 8010b5a:	f000 f891 	bl	8010c80 <_vfiprintf_r>
 8010b5e:	b002      	add	sp, #8
 8010b60:	f85d eb04 	ldr.w	lr, [sp], #4
 8010b64:	b003      	add	sp, #12
 8010b66:	4770      	bx	lr
 8010b68:	240000b0 	.word	0x240000b0

08010b6c <malloc>:
 8010b6c:	4b02      	ldr	r3, [pc, #8]	; (8010b78 <malloc+0xc>)
 8010b6e:	4601      	mov	r1, r0
 8010b70:	6818      	ldr	r0, [r3, #0]
 8010b72:	f7ff bf1d 	b.w	80109b0 <_malloc_r>
 8010b76:	bf00      	nop
 8010b78:	240000b0 	.word	0x240000b0

08010b7c <__malloc_lock>:
 8010b7c:	4801      	ldr	r0, [pc, #4]	; (8010b84 <__malloc_lock+0x8>)
 8010b7e:	f000 bdc3 	b.w	8011708 <__retarget_lock_acquire_recursive>
 8010b82:	bf00      	nop
 8010b84:	24000d48 	.word	0x24000d48

08010b88 <__malloc_unlock>:
 8010b88:	4801      	ldr	r0, [pc, #4]	; (8010b90 <__malloc_unlock+0x8>)
 8010b8a:	f000 bdbe 	b.w	801170a <__retarget_lock_release_recursive>
 8010b8e:	bf00      	nop
 8010b90:	24000d48 	.word	0x24000d48

08010b94 <_free_r>:
 8010b94:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8010b96:	2900      	cmp	r1, #0
 8010b98:	d044      	beq.n	8010c24 <_free_r+0x90>
 8010b9a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010b9e:	9001      	str	r0, [sp, #4]
 8010ba0:	2b00      	cmp	r3, #0
 8010ba2:	f1a1 0404 	sub.w	r4, r1, #4
 8010ba6:	bfb8      	it	lt
 8010ba8:	18e4      	addlt	r4, r4, r3
 8010baa:	f7ff ffe7 	bl	8010b7c <__malloc_lock>
 8010bae:	4a1e      	ldr	r2, [pc, #120]	; (8010c28 <_free_r+0x94>)
 8010bb0:	9801      	ldr	r0, [sp, #4]
 8010bb2:	6813      	ldr	r3, [r2, #0]
 8010bb4:	b933      	cbnz	r3, 8010bc4 <_free_r+0x30>
 8010bb6:	6063      	str	r3, [r4, #4]
 8010bb8:	6014      	str	r4, [r2, #0]
 8010bba:	b003      	add	sp, #12
 8010bbc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8010bc0:	f7ff bfe2 	b.w	8010b88 <__malloc_unlock>
 8010bc4:	42a3      	cmp	r3, r4
 8010bc6:	d908      	bls.n	8010bda <_free_r+0x46>
 8010bc8:	6825      	ldr	r5, [r4, #0]
 8010bca:	1961      	adds	r1, r4, r5
 8010bcc:	428b      	cmp	r3, r1
 8010bce:	bf01      	itttt	eq
 8010bd0:	6819      	ldreq	r1, [r3, #0]
 8010bd2:	685b      	ldreq	r3, [r3, #4]
 8010bd4:	1949      	addeq	r1, r1, r5
 8010bd6:	6021      	streq	r1, [r4, #0]
 8010bd8:	e7ed      	b.n	8010bb6 <_free_r+0x22>
 8010bda:	461a      	mov	r2, r3
 8010bdc:	685b      	ldr	r3, [r3, #4]
 8010bde:	b10b      	cbz	r3, 8010be4 <_free_r+0x50>
 8010be0:	42a3      	cmp	r3, r4
 8010be2:	d9fa      	bls.n	8010bda <_free_r+0x46>
 8010be4:	6811      	ldr	r1, [r2, #0]
 8010be6:	1855      	adds	r5, r2, r1
 8010be8:	42a5      	cmp	r5, r4
 8010bea:	d10b      	bne.n	8010c04 <_free_r+0x70>
 8010bec:	6824      	ldr	r4, [r4, #0]
 8010bee:	4421      	add	r1, r4
 8010bf0:	1854      	adds	r4, r2, r1
 8010bf2:	42a3      	cmp	r3, r4
 8010bf4:	6011      	str	r1, [r2, #0]
 8010bf6:	d1e0      	bne.n	8010bba <_free_r+0x26>
 8010bf8:	681c      	ldr	r4, [r3, #0]
 8010bfa:	685b      	ldr	r3, [r3, #4]
 8010bfc:	6053      	str	r3, [r2, #4]
 8010bfe:	4421      	add	r1, r4
 8010c00:	6011      	str	r1, [r2, #0]
 8010c02:	e7da      	b.n	8010bba <_free_r+0x26>
 8010c04:	d902      	bls.n	8010c0c <_free_r+0x78>
 8010c06:	230c      	movs	r3, #12
 8010c08:	6003      	str	r3, [r0, #0]
 8010c0a:	e7d6      	b.n	8010bba <_free_r+0x26>
 8010c0c:	6825      	ldr	r5, [r4, #0]
 8010c0e:	1961      	adds	r1, r4, r5
 8010c10:	428b      	cmp	r3, r1
 8010c12:	bf04      	itt	eq
 8010c14:	6819      	ldreq	r1, [r3, #0]
 8010c16:	685b      	ldreq	r3, [r3, #4]
 8010c18:	6063      	str	r3, [r4, #4]
 8010c1a:	bf04      	itt	eq
 8010c1c:	1949      	addeq	r1, r1, r5
 8010c1e:	6021      	streq	r1, [r4, #0]
 8010c20:	6054      	str	r4, [r2, #4]
 8010c22:	e7ca      	b.n	8010bba <_free_r+0x26>
 8010c24:	b003      	add	sp, #12
 8010c26:	bd30      	pop	{r4, r5, pc}
 8010c28:	24000d3c 	.word	0x24000d3c

08010c2c <__sfputc_r>:
 8010c2c:	6893      	ldr	r3, [r2, #8]
 8010c2e:	3b01      	subs	r3, #1
 8010c30:	2b00      	cmp	r3, #0
 8010c32:	b410      	push	{r4}
 8010c34:	6093      	str	r3, [r2, #8]
 8010c36:	da08      	bge.n	8010c4a <__sfputc_r+0x1e>
 8010c38:	6994      	ldr	r4, [r2, #24]
 8010c3a:	42a3      	cmp	r3, r4
 8010c3c:	db01      	blt.n	8010c42 <__sfputc_r+0x16>
 8010c3e:	290a      	cmp	r1, #10
 8010c40:	d103      	bne.n	8010c4a <__sfputc_r+0x1e>
 8010c42:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010c46:	f000 badf 	b.w	8011208 <__swbuf_r>
 8010c4a:	6813      	ldr	r3, [r2, #0]
 8010c4c:	1c58      	adds	r0, r3, #1
 8010c4e:	6010      	str	r0, [r2, #0]
 8010c50:	7019      	strb	r1, [r3, #0]
 8010c52:	4608      	mov	r0, r1
 8010c54:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010c58:	4770      	bx	lr

08010c5a <__sfputs_r>:
 8010c5a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010c5c:	4606      	mov	r6, r0
 8010c5e:	460f      	mov	r7, r1
 8010c60:	4614      	mov	r4, r2
 8010c62:	18d5      	adds	r5, r2, r3
 8010c64:	42ac      	cmp	r4, r5
 8010c66:	d101      	bne.n	8010c6c <__sfputs_r+0x12>
 8010c68:	2000      	movs	r0, #0
 8010c6a:	e007      	b.n	8010c7c <__sfputs_r+0x22>
 8010c6c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010c70:	463a      	mov	r2, r7
 8010c72:	4630      	mov	r0, r6
 8010c74:	f7ff ffda 	bl	8010c2c <__sfputc_r>
 8010c78:	1c43      	adds	r3, r0, #1
 8010c7a:	d1f3      	bne.n	8010c64 <__sfputs_r+0xa>
 8010c7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08010c80 <_vfiprintf_r>:
 8010c80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010c84:	460d      	mov	r5, r1
 8010c86:	b09d      	sub	sp, #116	; 0x74
 8010c88:	4614      	mov	r4, r2
 8010c8a:	4698      	mov	r8, r3
 8010c8c:	4606      	mov	r6, r0
 8010c8e:	b118      	cbz	r0, 8010c98 <_vfiprintf_r+0x18>
 8010c90:	6983      	ldr	r3, [r0, #24]
 8010c92:	b90b      	cbnz	r3, 8010c98 <_vfiprintf_r+0x18>
 8010c94:	f000 fc9a 	bl	80115cc <__sinit>
 8010c98:	4b89      	ldr	r3, [pc, #548]	; (8010ec0 <_vfiprintf_r+0x240>)
 8010c9a:	429d      	cmp	r5, r3
 8010c9c:	d11b      	bne.n	8010cd6 <_vfiprintf_r+0x56>
 8010c9e:	6875      	ldr	r5, [r6, #4]
 8010ca0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8010ca2:	07d9      	lsls	r1, r3, #31
 8010ca4:	d405      	bmi.n	8010cb2 <_vfiprintf_r+0x32>
 8010ca6:	89ab      	ldrh	r3, [r5, #12]
 8010ca8:	059a      	lsls	r2, r3, #22
 8010caa:	d402      	bmi.n	8010cb2 <_vfiprintf_r+0x32>
 8010cac:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8010cae:	f000 fd2b 	bl	8011708 <__retarget_lock_acquire_recursive>
 8010cb2:	89ab      	ldrh	r3, [r5, #12]
 8010cb4:	071b      	lsls	r3, r3, #28
 8010cb6:	d501      	bpl.n	8010cbc <_vfiprintf_r+0x3c>
 8010cb8:	692b      	ldr	r3, [r5, #16]
 8010cba:	b9eb      	cbnz	r3, 8010cf8 <_vfiprintf_r+0x78>
 8010cbc:	4629      	mov	r1, r5
 8010cbe:	4630      	mov	r0, r6
 8010cc0:	f000 faf4 	bl	80112ac <__swsetup_r>
 8010cc4:	b1c0      	cbz	r0, 8010cf8 <_vfiprintf_r+0x78>
 8010cc6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8010cc8:	07dc      	lsls	r4, r3, #31
 8010cca:	d50e      	bpl.n	8010cea <_vfiprintf_r+0x6a>
 8010ccc:	f04f 30ff 	mov.w	r0, #4294967295
 8010cd0:	b01d      	add	sp, #116	; 0x74
 8010cd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010cd6:	4b7b      	ldr	r3, [pc, #492]	; (8010ec4 <_vfiprintf_r+0x244>)
 8010cd8:	429d      	cmp	r5, r3
 8010cda:	d101      	bne.n	8010ce0 <_vfiprintf_r+0x60>
 8010cdc:	68b5      	ldr	r5, [r6, #8]
 8010cde:	e7df      	b.n	8010ca0 <_vfiprintf_r+0x20>
 8010ce0:	4b79      	ldr	r3, [pc, #484]	; (8010ec8 <_vfiprintf_r+0x248>)
 8010ce2:	429d      	cmp	r5, r3
 8010ce4:	bf08      	it	eq
 8010ce6:	68f5      	ldreq	r5, [r6, #12]
 8010ce8:	e7da      	b.n	8010ca0 <_vfiprintf_r+0x20>
 8010cea:	89ab      	ldrh	r3, [r5, #12]
 8010cec:	0598      	lsls	r0, r3, #22
 8010cee:	d4ed      	bmi.n	8010ccc <_vfiprintf_r+0x4c>
 8010cf0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8010cf2:	f000 fd0a 	bl	801170a <__retarget_lock_release_recursive>
 8010cf6:	e7e9      	b.n	8010ccc <_vfiprintf_r+0x4c>
 8010cf8:	2300      	movs	r3, #0
 8010cfa:	9309      	str	r3, [sp, #36]	; 0x24
 8010cfc:	2320      	movs	r3, #32
 8010cfe:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8010d02:	f8cd 800c 	str.w	r8, [sp, #12]
 8010d06:	2330      	movs	r3, #48	; 0x30
 8010d08:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8010ecc <_vfiprintf_r+0x24c>
 8010d0c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8010d10:	f04f 0901 	mov.w	r9, #1
 8010d14:	4623      	mov	r3, r4
 8010d16:	469a      	mov	sl, r3
 8010d18:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010d1c:	b10a      	cbz	r2, 8010d22 <_vfiprintf_r+0xa2>
 8010d1e:	2a25      	cmp	r2, #37	; 0x25
 8010d20:	d1f9      	bne.n	8010d16 <_vfiprintf_r+0x96>
 8010d22:	ebba 0b04 	subs.w	fp, sl, r4
 8010d26:	d00b      	beq.n	8010d40 <_vfiprintf_r+0xc0>
 8010d28:	465b      	mov	r3, fp
 8010d2a:	4622      	mov	r2, r4
 8010d2c:	4629      	mov	r1, r5
 8010d2e:	4630      	mov	r0, r6
 8010d30:	f7ff ff93 	bl	8010c5a <__sfputs_r>
 8010d34:	3001      	adds	r0, #1
 8010d36:	f000 80aa 	beq.w	8010e8e <_vfiprintf_r+0x20e>
 8010d3a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010d3c:	445a      	add	r2, fp
 8010d3e:	9209      	str	r2, [sp, #36]	; 0x24
 8010d40:	f89a 3000 	ldrb.w	r3, [sl]
 8010d44:	2b00      	cmp	r3, #0
 8010d46:	f000 80a2 	beq.w	8010e8e <_vfiprintf_r+0x20e>
 8010d4a:	2300      	movs	r3, #0
 8010d4c:	f04f 32ff 	mov.w	r2, #4294967295
 8010d50:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010d54:	f10a 0a01 	add.w	sl, sl, #1
 8010d58:	9304      	str	r3, [sp, #16]
 8010d5a:	9307      	str	r3, [sp, #28]
 8010d5c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8010d60:	931a      	str	r3, [sp, #104]	; 0x68
 8010d62:	4654      	mov	r4, sl
 8010d64:	2205      	movs	r2, #5
 8010d66:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010d6a:	4858      	ldr	r0, [pc, #352]	; (8010ecc <_vfiprintf_r+0x24c>)
 8010d6c:	f7ef fac0 	bl	80002f0 <memchr>
 8010d70:	9a04      	ldr	r2, [sp, #16]
 8010d72:	b9d8      	cbnz	r0, 8010dac <_vfiprintf_r+0x12c>
 8010d74:	06d1      	lsls	r1, r2, #27
 8010d76:	bf44      	itt	mi
 8010d78:	2320      	movmi	r3, #32
 8010d7a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010d7e:	0713      	lsls	r3, r2, #28
 8010d80:	bf44      	itt	mi
 8010d82:	232b      	movmi	r3, #43	; 0x2b
 8010d84:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010d88:	f89a 3000 	ldrb.w	r3, [sl]
 8010d8c:	2b2a      	cmp	r3, #42	; 0x2a
 8010d8e:	d015      	beq.n	8010dbc <_vfiprintf_r+0x13c>
 8010d90:	9a07      	ldr	r2, [sp, #28]
 8010d92:	4654      	mov	r4, sl
 8010d94:	2000      	movs	r0, #0
 8010d96:	f04f 0c0a 	mov.w	ip, #10
 8010d9a:	4621      	mov	r1, r4
 8010d9c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010da0:	3b30      	subs	r3, #48	; 0x30
 8010da2:	2b09      	cmp	r3, #9
 8010da4:	d94e      	bls.n	8010e44 <_vfiprintf_r+0x1c4>
 8010da6:	b1b0      	cbz	r0, 8010dd6 <_vfiprintf_r+0x156>
 8010da8:	9207      	str	r2, [sp, #28]
 8010daa:	e014      	b.n	8010dd6 <_vfiprintf_r+0x156>
 8010dac:	eba0 0308 	sub.w	r3, r0, r8
 8010db0:	fa09 f303 	lsl.w	r3, r9, r3
 8010db4:	4313      	orrs	r3, r2
 8010db6:	9304      	str	r3, [sp, #16]
 8010db8:	46a2      	mov	sl, r4
 8010dba:	e7d2      	b.n	8010d62 <_vfiprintf_r+0xe2>
 8010dbc:	9b03      	ldr	r3, [sp, #12]
 8010dbe:	1d19      	adds	r1, r3, #4
 8010dc0:	681b      	ldr	r3, [r3, #0]
 8010dc2:	9103      	str	r1, [sp, #12]
 8010dc4:	2b00      	cmp	r3, #0
 8010dc6:	bfbb      	ittet	lt
 8010dc8:	425b      	neglt	r3, r3
 8010dca:	f042 0202 	orrlt.w	r2, r2, #2
 8010dce:	9307      	strge	r3, [sp, #28]
 8010dd0:	9307      	strlt	r3, [sp, #28]
 8010dd2:	bfb8      	it	lt
 8010dd4:	9204      	strlt	r2, [sp, #16]
 8010dd6:	7823      	ldrb	r3, [r4, #0]
 8010dd8:	2b2e      	cmp	r3, #46	; 0x2e
 8010dda:	d10c      	bne.n	8010df6 <_vfiprintf_r+0x176>
 8010ddc:	7863      	ldrb	r3, [r4, #1]
 8010dde:	2b2a      	cmp	r3, #42	; 0x2a
 8010de0:	d135      	bne.n	8010e4e <_vfiprintf_r+0x1ce>
 8010de2:	9b03      	ldr	r3, [sp, #12]
 8010de4:	1d1a      	adds	r2, r3, #4
 8010de6:	681b      	ldr	r3, [r3, #0]
 8010de8:	9203      	str	r2, [sp, #12]
 8010dea:	2b00      	cmp	r3, #0
 8010dec:	bfb8      	it	lt
 8010dee:	f04f 33ff 	movlt.w	r3, #4294967295
 8010df2:	3402      	adds	r4, #2
 8010df4:	9305      	str	r3, [sp, #20]
 8010df6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8010edc <_vfiprintf_r+0x25c>
 8010dfa:	7821      	ldrb	r1, [r4, #0]
 8010dfc:	2203      	movs	r2, #3
 8010dfe:	4650      	mov	r0, sl
 8010e00:	f7ef fa76 	bl	80002f0 <memchr>
 8010e04:	b140      	cbz	r0, 8010e18 <_vfiprintf_r+0x198>
 8010e06:	2340      	movs	r3, #64	; 0x40
 8010e08:	eba0 000a 	sub.w	r0, r0, sl
 8010e0c:	fa03 f000 	lsl.w	r0, r3, r0
 8010e10:	9b04      	ldr	r3, [sp, #16]
 8010e12:	4303      	orrs	r3, r0
 8010e14:	3401      	adds	r4, #1
 8010e16:	9304      	str	r3, [sp, #16]
 8010e18:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010e1c:	482c      	ldr	r0, [pc, #176]	; (8010ed0 <_vfiprintf_r+0x250>)
 8010e1e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8010e22:	2206      	movs	r2, #6
 8010e24:	f7ef fa64 	bl	80002f0 <memchr>
 8010e28:	2800      	cmp	r0, #0
 8010e2a:	d03f      	beq.n	8010eac <_vfiprintf_r+0x22c>
 8010e2c:	4b29      	ldr	r3, [pc, #164]	; (8010ed4 <_vfiprintf_r+0x254>)
 8010e2e:	bb1b      	cbnz	r3, 8010e78 <_vfiprintf_r+0x1f8>
 8010e30:	9b03      	ldr	r3, [sp, #12]
 8010e32:	3307      	adds	r3, #7
 8010e34:	f023 0307 	bic.w	r3, r3, #7
 8010e38:	3308      	adds	r3, #8
 8010e3a:	9303      	str	r3, [sp, #12]
 8010e3c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010e3e:	443b      	add	r3, r7
 8010e40:	9309      	str	r3, [sp, #36]	; 0x24
 8010e42:	e767      	b.n	8010d14 <_vfiprintf_r+0x94>
 8010e44:	fb0c 3202 	mla	r2, ip, r2, r3
 8010e48:	460c      	mov	r4, r1
 8010e4a:	2001      	movs	r0, #1
 8010e4c:	e7a5      	b.n	8010d9a <_vfiprintf_r+0x11a>
 8010e4e:	2300      	movs	r3, #0
 8010e50:	3401      	adds	r4, #1
 8010e52:	9305      	str	r3, [sp, #20]
 8010e54:	4619      	mov	r1, r3
 8010e56:	f04f 0c0a 	mov.w	ip, #10
 8010e5a:	4620      	mov	r0, r4
 8010e5c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010e60:	3a30      	subs	r2, #48	; 0x30
 8010e62:	2a09      	cmp	r2, #9
 8010e64:	d903      	bls.n	8010e6e <_vfiprintf_r+0x1ee>
 8010e66:	2b00      	cmp	r3, #0
 8010e68:	d0c5      	beq.n	8010df6 <_vfiprintf_r+0x176>
 8010e6a:	9105      	str	r1, [sp, #20]
 8010e6c:	e7c3      	b.n	8010df6 <_vfiprintf_r+0x176>
 8010e6e:	fb0c 2101 	mla	r1, ip, r1, r2
 8010e72:	4604      	mov	r4, r0
 8010e74:	2301      	movs	r3, #1
 8010e76:	e7f0      	b.n	8010e5a <_vfiprintf_r+0x1da>
 8010e78:	ab03      	add	r3, sp, #12
 8010e7a:	9300      	str	r3, [sp, #0]
 8010e7c:	462a      	mov	r2, r5
 8010e7e:	4b16      	ldr	r3, [pc, #88]	; (8010ed8 <_vfiprintf_r+0x258>)
 8010e80:	a904      	add	r1, sp, #16
 8010e82:	4630      	mov	r0, r6
 8010e84:	f3af 8000 	nop.w
 8010e88:	4607      	mov	r7, r0
 8010e8a:	1c78      	adds	r0, r7, #1
 8010e8c:	d1d6      	bne.n	8010e3c <_vfiprintf_r+0x1bc>
 8010e8e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8010e90:	07d9      	lsls	r1, r3, #31
 8010e92:	d405      	bmi.n	8010ea0 <_vfiprintf_r+0x220>
 8010e94:	89ab      	ldrh	r3, [r5, #12]
 8010e96:	059a      	lsls	r2, r3, #22
 8010e98:	d402      	bmi.n	8010ea0 <_vfiprintf_r+0x220>
 8010e9a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8010e9c:	f000 fc35 	bl	801170a <__retarget_lock_release_recursive>
 8010ea0:	89ab      	ldrh	r3, [r5, #12]
 8010ea2:	065b      	lsls	r3, r3, #25
 8010ea4:	f53f af12 	bmi.w	8010ccc <_vfiprintf_r+0x4c>
 8010ea8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8010eaa:	e711      	b.n	8010cd0 <_vfiprintf_r+0x50>
 8010eac:	ab03      	add	r3, sp, #12
 8010eae:	9300      	str	r3, [sp, #0]
 8010eb0:	462a      	mov	r2, r5
 8010eb2:	4b09      	ldr	r3, [pc, #36]	; (8010ed8 <_vfiprintf_r+0x258>)
 8010eb4:	a904      	add	r1, sp, #16
 8010eb6:	4630      	mov	r0, r6
 8010eb8:	f000 f880 	bl	8010fbc <_printf_i>
 8010ebc:	e7e4      	b.n	8010e88 <_vfiprintf_r+0x208>
 8010ebe:	bf00      	nop
 8010ec0:	080127c4 	.word	0x080127c4
 8010ec4:	080127e4 	.word	0x080127e4
 8010ec8:	080127a4 	.word	0x080127a4
 8010ecc:	08012771 	.word	0x08012771
 8010ed0:	0801277b 	.word	0x0801277b
 8010ed4:	00000000 	.word	0x00000000
 8010ed8:	08010c5b 	.word	0x08010c5b
 8010edc:	08012777 	.word	0x08012777

08010ee0 <_printf_common>:
 8010ee0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010ee4:	4616      	mov	r6, r2
 8010ee6:	4699      	mov	r9, r3
 8010ee8:	688a      	ldr	r2, [r1, #8]
 8010eea:	690b      	ldr	r3, [r1, #16]
 8010eec:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8010ef0:	4293      	cmp	r3, r2
 8010ef2:	bfb8      	it	lt
 8010ef4:	4613      	movlt	r3, r2
 8010ef6:	6033      	str	r3, [r6, #0]
 8010ef8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8010efc:	4607      	mov	r7, r0
 8010efe:	460c      	mov	r4, r1
 8010f00:	b10a      	cbz	r2, 8010f06 <_printf_common+0x26>
 8010f02:	3301      	adds	r3, #1
 8010f04:	6033      	str	r3, [r6, #0]
 8010f06:	6823      	ldr	r3, [r4, #0]
 8010f08:	0699      	lsls	r1, r3, #26
 8010f0a:	bf42      	ittt	mi
 8010f0c:	6833      	ldrmi	r3, [r6, #0]
 8010f0e:	3302      	addmi	r3, #2
 8010f10:	6033      	strmi	r3, [r6, #0]
 8010f12:	6825      	ldr	r5, [r4, #0]
 8010f14:	f015 0506 	ands.w	r5, r5, #6
 8010f18:	d106      	bne.n	8010f28 <_printf_common+0x48>
 8010f1a:	f104 0a19 	add.w	sl, r4, #25
 8010f1e:	68e3      	ldr	r3, [r4, #12]
 8010f20:	6832      	ldr	r2, [r6, #0]
 8010f22:	1a9b      	subs	r3, r3, r2
 8010f24:	42ab      	cmp	r3, r5
 8010f26:	dc26      	bgt.n	8010f76 <_printf_common+0x96>
 8010f28:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8010f2c:	1e13      	subs	r3, r2, #0
 8010f2e:	6822      	ldr	r2, [r4, #0]
 8010f30:	bf18      	it	ne
 8010f32:	2301      	movne	r3, #1
 8010f34:	0692      	lsls	r2, r2, #26
 8010f36:	d42b      	bmi.n	8010f90 <_printf_common+0xb0>
 8010f38:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8010f3c:	4649      	mov	r1, r9
 8010f3e:	4638      	mov	r0, r7
 8010f40:	47c0      	blx	r8
 8010f42:	3001      	adds	r0, #1
 8010f44:	d01e      	beq.n	8010f84 <_printf_common+0xa4>
 8010f46:	6823      	ldr	r3, [r4, #0]
 8010f48:	68e5      	ldr	r5, [r4, #12]
 8010f4a:	6832      	ldr	r2, [r6, #0]
 8010f4c:	f003 0306 	and.w	r3, r3, #6
 8010f50:	2b04      	cmp	r3, #4
 8010f52:	bf08      	it	eq
 8010f54:	1aad      	subeq	r5, r5, r2
 8010f56:	68a3      	ldr	r3, [r4, #8]
 8010f58:	6922      	ldr	r2, [r4, #16]
 8010f5a:	bf0c      	ite	eq
 8010f5c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8010f60:	2500      	movne	r5, #0
 8010f62:	4293      	cmp	r3, r2
 8010f64:	bfc4      	itt	gt
 8010f66:	1a9b      	subgt	r3, r3, r2
 8010f68:	18ed      	addgt	r5, r5, r3
 8010f6a:	2600      	movs	r6, #0
 8010f6c:	341a      	adds	r4, #26
 8010f6e:	42b5      	cmp	r5, r6
 8010f70:	d11a      	bne.n	8010fa8 <_printf_common+0xc8>
 8010f72:	2000      	movs	r0, #0
 8010f74:	e008      	b.n	8010f88 <_printf_common+0xa8>
 8010f76:	2301      	movs	r3, #1
 8010f78:	4652      	mov	r2, sl
 8010f7a:	4649      	mov	r1, r9
 8010f7c:	4638      	mov	r0, r7
 8010f7e:	47c0      	blx	r8
 8010f80:	3001      	adds	r0, #1
 8010f82:	d103      	bne.n	8010f8c <_printf_common+0xac>
 8010f84:	f04f 30ff 	mov.w	r0, #4294967295
 8010f88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010f8c:	3501      	adds	r5, #1
 8010f8e:	e7c6      	b.n	8010f1e <_printf_common+0x3e>
 8010f90:	18e1      	adds	r1, r4, r3
 8010f92:	1c5a      	adds	r2, r3, #1
 8010f94:	2030      	movs	r0, #48	; 0x30
 8010f96:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8010f9a:	4422      	add	r2, r4
 8010f9c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8010fa0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8010fa4:	3302      	adds	r3, #2
 8010fa6:	e7c7      	b.n	8010f38 <_printf_common+0x58>
 8010fa8:	2301      	movs	r3, #1
 8010faa:	4622      	mov	r2, r4
 8010fac:	4649      	mov	r1, r9
 8010fae:	4638      	mov	r0, r7
 8010fb0:	47c0      	blx	r8
 8010fb2:	3001      	adds	r0, #1
 8010fb4:	d0e6      	beq.n	8010f84 <_printf_common+0xa4>
 8010fb6:	3601      	adds	r6, #1
 8010fb8:	e7d9      	b.n	8010f6e <_printf_common+0x8e>
	...

08010fbc <_printf_i>:
 8010fbc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8010fc0:	7e0f      	ldrb	r7, [r1, #24]
 8010fc2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8010fc4:	2f78      	cmp	r7, #120	; 0x78
 8010fc6:	4691      	mov	r9, r2
 8010fc8:	4680      	mov	r8, r0
 8010fca:	460c      	mov	r4, r1
 8010fcc:	469a      	mov	sl, r3
 8010fce:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8010fd2:	d807      	bhi.n	8010fe4 <_printf_i+0x28>
 8010fd4:	2f62      	cmp	r7, #98	; 0x62
 8010fd6:	d80a      	bhi.n	8010fee <_printf_i+0x32>
 8010fd8:	2f00      	cmp	r7, #0
 8010fda:	f000 80d8 	beq.w	801118e <_printf_i+0x1d2>
 8010fde:	2f58      	cmp	r7, #88	; 0x58
 8010fe0:	f000 80a3 	beq.w	801112a <_printf_i+0x16e>
 8010fe4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8010fe8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8010fec:	e03a      	b.n	8011064 <_printf_i+0xa8>
 8010fee:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8010ff2:	2b15      	cmp	r3, #21
 8010ff4:	d8f6      	bhi.n	8010fe4 <_printf_i+0x28>
 8010ff6:	a101      	add	r1, pc, #4	; (adr r1, 8010ffc <_printf_i+0x40>)
 8010ff8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8010ffc:	08011055 	.word	0x08011055
 8011000:	08011069 	.word	0x08011069
 8011004:	08010fe5 	.word	0x08010fe5
 8011008:	08010fe5 	.word	0x08010fe5
 801100c:	08010fe5 	.word	0x08010fe5
 8011010:	08010fe5 	.word	0x08010fe5
 8011014:	08011069 	.word	0x08011069
 8011018:	08010fe5 	.word	0x08010fe5
 801101c:	08010fe5 	.word	0x08010fe5
 8011020:	08010fe5 	.word	0x08010fe5
 8011024:	08010fe5 	.word	0x08010fe5
 8011028:	08011175 	.word	0x08011175
 801102c:	08011099 	.word	0x08011099
 8011030:	08011157 	.word	0x08011157
 8011034:	08010fe5 	.word	0x08010fe5
 8011038:	08010fe5 	.word	0x08010fe5
 801103c:	08011197 	.word	0x08011197
 8011040:	08010fe5 	.word	0x08010fe5
 8011044:	08011099 	.word	0x08011099
 8011048:	08010fe5 	.word	0x08010fe5
 801104c:	08010fe5 	.word	0x08010fe5
 8011050:	0801115f 	.word	0x0801115f
 8011054:	682b      	ldr	r3, [r5, #0]
 8011056:	1d1a      	adds	r2, r3, #4
 8011058:	681b      	ldr	r3, [r3, #0]
 801105a:	602a      	str	r2, [r5, #0]
 801105c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8011060:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8011064:	2301      	movs	r3, #1
 8011066:	e0a3      	b.n	80111b0 <_printf_i+0x1f4>
 8011068:	6820      	ldr	r0, [r4, #0]
 801106a:	6829      	ldr	r1, [r5, #0]
 801106c:	0606      	lsls	r6, r0, #24
 801106e:	f101 0304 	add.w	r3, r1, #4
 8011072:	d50a      	bpl.n	801108a <_printf_i+0xce>
 8011074:	680e      	ldr	r6, [r1, #0]
 8011076:	602b      	str	r3, [r5, #0]
 8011078:	2e00      	cmp	r6, #0
 801107a:	da03      	bge.n	8011084 <_printf_i+0xc8>
 801107c:	232d      	movs	r3, #45	; 0x2d
 801107e:	4276      	negs	r6, r6
 8011080:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8011084:	485e      	ldr	r0, [pc, #376]	; (8011200 <_printf_i+0x244>)
 8011086:	230a      	movs	r3, #10
 8011088:	e019      	b.n	80110be <_printf_i+0x102>
 801108a:	680e      	ldr	r6, [r1, #0]
 801108c:	602b      	str	r3, [r5, #0]
 801108e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8011092:	bf18      	it	ne
 8011094:	b236      	sxthne	r6, r6
 8011096:	e7ef      	b.n	8011078 <_printf_i+0xbc>
 8011098:	682b      	ldr	r3, [r5, #0]
 801109a:	6820      	ldr	r0, [r4, #0]
 801109c:	1d19      	adds	r1, r3, #4
 801109e:	6029      	str	r1, [r5, #0]
 80110a0:	0601      	lsls	r1, r0, #24
 80110a2:	d501      	bpl.n	80110a8 <_printf_i+0xec>
 80110a4:	681e      	ldr	r6, [r3, #0]
 80110a6:	e002      	b.n	80110ae <_printf_i+0xf2>
 80110a8:	0646      	lsls	r6, r0, #25
 80110aa:	d5fb      	bpl.n	80110a4 <_printf_i+0xe8>
 80110ac:	881e      	ldrh	r6, [r3, #0]
 80110ae:	4854      	ldr	r0, [pc, #336]	; (8011200 <_printf_i+0x244>)
 80110b0:	2f6f      	cmp	r7, #111	; 0x6f
 80110b2:	bf0c      	ite	eq
 80110b4:	2308      	moveq	r3, #8
 80110b6:	230a      	movne	r3, #10
 80110b8:	2100      	movs	r1, #0
 80110ba:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80110be:	6865      	ldr	r5, [r4, #4]
 80110c0:	60a5      	str	r5, [r4, #8]
 80110c2:	2d00      	cmp	r5, #0
 80110c4:	bfa2      	ittt	ge
 80110c6:	6821      	ldrge	r1, [r4, #0]
 80110c8:	f021 0104 	bicge.w	r1, r1, #4
 80110cc:	6021      	strge	r1, [r4, #0]
 80110ce:	b90e      	cbnz	r6, 80110d4 <_printf_i+0x118>
 80110d0:	2d00      	cmp	r5, #0
 80110d2:	d04d      	beq.n	8011170 <_printf_i+0x1b4>
 80110d4:	4615      	mov	r5, r2
 80110d6:	fbb6 f1f3 	udiv	r1, r6, r3
 80110da:	fb03 6711 	mls	r7, r3, r1, r6
 80110de:	5dc7      	ldrb	r7, [r0, r7]
 80110e0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80110e4:	4637      	mov	r7, r6
 80110e6:	42bb      	cmp	r3, r7
 80110e8:	460e      	mov	r6, r1
 80110ea:	d9f4      	bls.n	80110d6 <_printf_i+0x11a>
 80110ec:	2b08      	cmp	r3, #8
 80110ee:	d10b      	bne.n	8011108 <_printf_i+0x14c>
 80110f0:	6823      	ldr	r3, [r4, #0]
 80110f2:	07de      	lsls	r6, r3, #31
 80110f4:	d508      	bpl.n	8011108 <_printf_i+0x14c>
 80110f6:	6923      	ldr	r3, [r4, #16]
 80110f8:	6861      	ldr	r1, [r4, #4]
 80110fa:	4299      	cmp	r1, r3
 80110fc:	bfde      	ittt	le
 80110fe:	2330      	movle	r3, #48	; 0x30
 8011100:	f805 3c01 	strble.w	r3, [r5, #-1]
 8011104:	f105 35ff 	addle.w	r5, r5, #4294967295
 8011108:	1b52      	subs	r2, r2, r5
 801110a:	6122      	str	r2, [r4, #16]
 801110c:	f8cd a000 	str.w	sl, [sp]
 8011110:	464b      	mov	r3, r9
 8011112:	aa03      	add	r2, sp, #12
 8011114:	4621      	mov	r1, r4
 8011116:	4640      	mov	r0, r8
 8011118:	f7ff fee2 	bl	8010ee0 <_printf_common>
 801111c:	3001      	adds	r0, #1
 801111e:	d14c      	bne.n	80111ba <_printf_i+0x1fe>
 8011120:	f04f 30ff 	mov.w	r0, #4294967295
 8011124:	b004      	add	sp, #16
 8011126:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801112a:	4835      	ldr	r0, [pc, #212]	; (8011200 <_printf_i+0x244>)
 801112c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8011130:	6829      	ldr	r1, [r5, #0]
 8011132:	6823      	ldr	r3, [r4, #0]
 8011134:	f851 6b04 	ldr.w	r6, [r1], #4
 8011138:	6029      	str	r1, [r5, #0]
 801113a:	061d      	lsls	r5, r3, #24
 801113c:	d514      	bpl.n	8011168 <_printf_i+0x1ac>
 801113e:	07df      	lsls	r7, r3, #31
 8011140:	bf44      	itt	mi
 8011142:	f043 0320 	orrmi.w	r3, r3, #32
 8011146:	6023      	strmi	r3, [r4, #0]
 8011148:	b91e      	cbnz	r6, 8011152 <_printf_i+0x196>
 801114a:	6823      	ldr	r3, [r4, #0]
 801114c:	f023 0320 	bic.w	r3, r3, #32
 8011150:	6023      	str	r3, [r4, #0]
 8011152:	2310      	movs	r3, #16
 8011154:	e7b0      	b.n	80110b8 <_printf_i+0xfc>
 8011156:	6823      	ldr	r3, [r4, #0]
 8011158:	f043 0320 	orr.w	r3, r3, #32
 801115c:	6023      	str	r3, [r4, #0]
 801115e:	2378      	movs	r3, #120	; 0x78
 8011160:	4828      	ldr	r0, [pc, #160]	; (8011204 <_printf_i+0x248>)
 8011162:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8011166:	e7e3      	b.n	8011130 <_printf_i+0x174>
 8011168:	0659      	lsls	r1, r3, #25
 801116a:	bf48      	it	mi
 801116c:	b2b6      	uxthmi	r6, r6
 801116e:	e7e6      	b.n	801113e <_printf_i+0x182>
 8011170:	4615      	mov	r5, r2
 8011172:	e7bb      	b.n	80110ec <_printf_i+0x130>
 8011174:	682b      	ldr	r3, [r5, #0]
 8011176:	6826      	ldr	r6, [r4, #0]
 8011178:	6961      	ldr	r1, [r4, #20]
 801117a:	1d18      	adds	r0, r3, #4
 801117c:	6028      	str	r0, [r5, #0]
 801117e:	0635      	lsls	r5, r6, #24
 8011180:	681b      	ldr	r3, [r3, #0]
 8011182:	d501      	bpl.n	8011188 <_printf_i+0x1cc>
 8011184:	6019      	str	r1, [r3, #0]
 8011186:	e002      	b.n	801118e <_printf_i+0x1d2>
 8011188:	0670      	lsls	r0, r6, #25
 801118a:	d5fb      	bpl.n	8011184 <_printf_i+0x1c8>
 801118c:	8019      	strh	r1, [r3, #0]
 801118e:	2300      	movs	r3, #0
 8011190:	6123      	str	r3, [r4, #16]
 8011192:	4615      	mov	r5, r2
 8011194:	e7ba      	b.n	801110c <_printf_i+0x150>
 8011196:	682b      	ldr	r3, [r5, #0]
 8011198:	1d1a      	adds	r2, r3, #4
 801119a:	602a      	str	r2, [r5, #0]
 801119c:	681d      	ldr	r5, [r3, #0]
 801119e:	6862      	ldr	r2, [r4, #4]
 80111a0:	2100      	movs	r1, #0
 80111a2:	4628      	mov	r0, r5
 80111a4:	f7ef f8a4 	bl	80002f0 <memchr>
 80111a8:	b108      	cbz	r0, 80111ae <_printf_i+0x1f2>
 80111aa:	1b40      	subs	r0, r0, r5
 80111ac:	6060      	str	r0, [r4, #4]
 80111ae:	6863      	ldr	r3, [r4, #4]
 80111b0:	6123      	str	r3, [r4, #16]
 80111b2:	2300      	movs	r3, #0
 80111b4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80111b8:	e7a8      	b.n	801110c <_printf_i+0x150>
 80111ba:	6923      	ldr	r3, [r4, #16]
 80111bc:	462a      	mov	r2, r5
 80111be:	4649      	mov	r1, r9
 80111c0:	4640      	mov	r0, r8
 80111c2:	47d0      	blx	sl
 80111c4:	3001      	adds	r0, #1
 80111c6:	d0ab      	beq.n	8011120 <_printf_i+0x164>
 80111c8:	6823      	ldr	r3, [r4, #0]
 80111ca:	079b      	lsls	r3, r3, #30
 80111cc:	d413      	bmi.n	80111f6 <_printf_i+0x23a>
 80111ce:	68e0      	ldr	r0, [r4, #12]
 80111d0:	9b03      	ldr	r3, [sp, #12]
 80111d2:	4298      	cmp	r0, r3
 80111d4:	bfb8      	it	lt
 80111d6:	4618      	movlt	r0, r3
 80111d8:	e7a4      	b.n	8011124 <_printf_i+0x168>
 80111da:	2301      	movs	r3, #1
 80111dc:	4632      	mov	r2, r6
 80111de:	4649      	mov	r1, r9
 80111e0:	4640      	mov	r0, r8
 80111e2:	47d0      	blx	sl
 80111e4:	3001      	adds	r0, #1
 80111e6:	d09b      	beq.n	8011120 <_printf_i+0x164>
 80111e8:	3501      	adds	r5, #1
 80111ea:	68e3      	ldr	r3, [r4, #12]
 80111ec:	9903      	ldr	r1, [sp, #12]
 80111ee:	1a5b      	subs	r3, r3, r1
 80111f0:	42ab      	cmp	r3, r5
 80111f2:	dcf2      	bgt.n	80111da <_printf_i+0x21e>
 80111f4:	e7eb      	b.n	80111ce <_printf_i+0x212>
 80111f6:	2500      	movs	r5, #0
 80111f8:	f104 0619 	add.w	r6, r4, #25
 80111fc:	e7f5      	b.n	80111ea <_printf_i+0x22e>
 80111fe:	bf00      	nop
 8011200:	08012782 	.word	0x08012782
 8011204:	08012793 	.word	0x08012793

08011208 <__swbuf_r>:
 8011208:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801120a:	460e      	mov	r6, r1
 801120c:	4614      	mov	r4, r2
 801120e:	4605      	mov	r5, r0
 8011210:	b118      	cbz	r0, 801121a <__swbuf_r+0x12>
 8011212:	6983      	ldr	r3, [r0, #24]
 8011214:	b90b      	cbnz	r3, 801121a <__swbuf_r+0x12>
 8011216:	f000 f9d9 	bl	80115cc <__sinit>
 801121a:	4b21      	ldr	r3, [pc, #132]	; (80112a0 <__swbuf_r+0x98>)
 801121c:	429c      	cmp	r4, r3
 801121e:	d12b      	bne.n	8011278 <__swbuf_r+0x70>
 8011220:	686c      	ldr	r4, [r5, #4]
 8011222:	69a3      	ldr	r3, [r4, #24]
 8011224:	60a3      	str	r3, [r4, #8]
 8011226:	89a3      	ldrh	r3, [r4, #12]
 8011228:	071a      	lsls	r2, r3, #28
 801122a:	d52f      	bpl.n	801128c <__swbuf_r+0x84>
 801122c:	6923      	ldr	r3, [r4, #16]
 801122e:	b36b      	cbz	r3, 801128c <__swbuf_r+0x84>
 8011230:	6923      	ldr	r3, [r4, #16]
 8011232:	6820      	ldr	r0, [r4, #0]
 8011234:	1ac0      	subs	r0, r0, r3
 8011236:	6963      	ldr	r3, [r4, #20]
 8011238:	b2f6      	uxtb	r6, r6
 801123a:	4283      	cmp	r3, r0
 801123c:	4637      	mov	r7, r6
 801123e:	dc04      	bgt.n	801124a <__swbuf_r+0x42>
 8011240:	4621      	mov	r1, r4
 8011242:	4628      	mov	r0, r5
 8011244:	f000 f92e 	bl	80114a4 <_fflush_r>
 8011248:	bb30      	cbnz	r0, 8011298 <__swbuf_r+0x90>
 801124a:	68a3      	ldr	r3, [r4, #8]
 801124c:	3b01      	subs	r3, #1
 801124e:	60a3      	str	r3, [r4, #8]
 8011250:	6823      	ldr	r3, [r4, #0]
 8011252:	1c5a      	adds	r2, r3, #1
 8011254:	6022      	str	r2, [r4, #0]
 8011256:	701e      	strb	r6, [r3, #0]
 8011258:	6963      	ldr	r3, [r4, #20]
 801125a:	3001      	adds	r0, #1
 801125c:	4283      	cmp	r3, r0
 801125e:	d004      	beq.n	801126a <__swbuf_r+0x62>
 8011260:	89a3      	ldrh	r3, [r4, #12]
 8011262:	07db      	lsls	r3, r3, #31
 8011264:	d506      	bpl.n	8011274 <__swbuf_r+0x6c>
 8011266:	2e0a      	cmp	r6, #10
 8011268:	d104      	bne.n	8011274 <__swbuf_r+0x6c>
 801126a:	4621      	mov	r1, r4
 801126c:	4628      	mov	r0, r5
 801126e:	f000 f919 	bl	80114a4 <_fflush_r>
 8011272:	b988      	cbnz	r0, 8011298 <__swbuf_r+0x90>
 8011274:	4638      	mov	r0, r7
 8011276:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011278:	4b0a      	ldr	r3, [pc, #40]	; (80112a4 <__swbuf_r+0x9c>)
 801127a:	429c      	cmp	r4, r3
 801127c:	d101      	bne.n	8011282 <__swbuf_r+0x7a>
 801127e:	68ac      	ldr	r4, [r5, #8]
 8011280:	e7cf      	b.n	8011222 <__swbuf_r+0x1a>
 8011282:	4b09      	ldr	r3, [pc, #36]	; (80112a8 <__swbuf_r+0xa0>)
 8011284:	429c      	cmp	r4, r3
 8011286:	bf08      	it	eq
 8011288:	68ec      	ldreq	r4, [r5, #12]
 801128a:	e7ca      	b.n	8011222 <__swbuf_r+0x1a>
 801128c:	4621      	mov	r1, r4
 801128e:	4628      	mov	r0, r5
 8011290:	f000 f80c 	bl	80112ac <__swsetup_r>
 8011294:	2800      	cmp	r0, #0
 8011296:	d0cb      	beq.n	8011230 <__swbuf_r+0x28>
 8011298:	f04f 37ff 	mov.w	r7, #4294967295
 801129c:	e7ea      	b.n	8011274 <__swbuf_r+0x6c>
 801129e:	bf00      	nop
 80112a0:	080127c4 	.word	0x080127c4
 80112a4:	080127e4 	.word	0x080127e4
 80112a8:	080127a4 	.word	0x080127a4

080112ac <__swsetup_r>:
 80112ac:	4b32      	ldr	r3, [pc, #200]	; (8011378 <__swsetup_r+0xcc>)
 80112ae:	b570      	push	{r4, r5, r6, lr}
 80112b0:	681d      	ldr	r5, [r3, #0]
 80112b2:	4606      	mov	r6, r0
 80112b4:	460c      	mov	r4, r1
 80112b6:	b125      	cbz	r5, 80112c2 <__swsetup_r+0x16>
 80112b8:	69ab      	ldr	r3, [r5, #24]
 80112ba:	b913      	cbnz	r3, 80112c2 <__swsetup_r+0x16>
 80112bc:	4628      	mov	r0, r5
 80112be:	f000 f985 	bl	80115cc <__sinit>
 80112c2:	4b2e      	ldr	r3, [pc, #184]	; (801137c <__swsetup_r+0xd0>)
 80112c4:	429c      	cmp	r4, r3
 80112c6:	d10f      	bne.n	80112e8 <__swsetup_r+0x3c>
 80112c8:	686c      	ldr	r4, [r5, #4]
 80112ca:	89a3      	ldrh	r3, [r4, #12]
 80112cc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80112d0:	0719      	lsls	r1, r3, #28
 80112d2:	d42c      	bmi.n	801132e <__swsetup_r+0x82>
 80112d4:	06dd      	lsls	r5, r3, #27
 80112d6:	d411      	bmi.n	80112fc <__swsetup_r+0x50>
 80112d8:	2309      	movs	r3, #9
 80112da:	6033      	str	r3, [r6, #0]
 80112dc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80112e0:	81a3      	strh	r3, [r4, #12]
 80112e2:	f04f 30ff 	mov.w	r0, #4294967295
 80112e6:	e03e      	b.n	8011366 <__swsetup_r+0xba>
 80112e8:	4b25      	ldr	r3, [pc, #148]	; (8011380 <__swsetup_r+0xd4>)
 80112ea:	429c      	cmp	r4, r3
 80112ec:	d101      	bne.n	80112f2 <__swsetup_r+0x46>
 80112ee:	68ac      	ldr	r4, [r5, #8]
 80112f0:	e7eb      	b.n	80112ca <__swsetup_r+0x1e>
 80112f2:	4b24      	ldr	r3, [pc, #144]	; (8011384 <__swsetup_r+0xd8>)
 80112f4:	429c      	cmp	r4, r3
 80112f6:	bf08      	it	eq
 80112f8:	68ec      	ldreq	r4, [r5, #12]
 80112fa:	e7e6      	b.n	80112ca <__swsetup_r+0x1e>
 80112fc:	0758      	lsls	r0, r3, #29
 80112fe:	d512      	bpl.n	8011326 <__swsetup_r+0x7a>
 8011300:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8011302:	b141      	cbz	r1, 8011316 <__swsetup_r+0x6a>
 8011304:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8011308:	4299      	cmp	r1, r3
 801130a:	d002      	beq.n	8011312 <__swsetup_r+0x66>
 801130c:	4630      	mov	r0, r6
 801130e:	f7ff fc41 	bl	8010b94 <_free_r>
 8011312:	2300      	movs	r3, #0
 8011314:	6363      	str	r3, [r4, #52]	; 0x34
 8011316:	89a3      	ldrh	r3, [r4, #12]
 8011318:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801131c:	81a3      	strh	r3, [r4, #12]
 801131e:	2300      	movs	r3, #0
 8011320:	6063      	str	r3, [r4, #4]
 8011322:	6923      	ldr	r3, [r4, #16]
 8011324:	6023      	str	r3, [r4, #0]
 8011326:	89a3      	ldrh	r3, [r4, #12]
 8011328:	f043 0308 	orr.w	r3, r3, #8
 801132c:	81a3      	strh	r3, [r4, #12]
 801132e:	6923      	ldr	r3, [r4, #16]
 8011330:	b94b      	cbnz	r3, 8011346 <__swsetup_r+0x9a>
 8011332:	89a3      	ldrh	r3, [r4, #12]
 8011334:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8011338:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801133c:	d003      	beq.n	8011346 <__swsetup_r+0x9a>
 801133e:	4621      	mov	r1, r4
 8011340:	4630      	mov	r0, r6
 8011342:	f000 fa09 	bl	8011758 <__smakebuf_r>
 8011346:	89a0      	ldrh	r0, [r4, #12]
 8011348:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801134c:	f010 0301 	ands.w	r3, r0, #1
 8011350:	d00a      	beq.n	8011368 <__swsetup_r+0xbc>
 8011352:	2300      	movs	r3, #0
 8011354:	60a3      	str	r3, [r4, #8]
 8011356:	6963      	ldr	r3, [r4, #20]
 8011358:	425b      	negs	r3, r3
 801135a:	61a3      	str	r3, [r4, #24]
 801135c:	6923      	ldr	r3, [r4, #16]
 801135e:	b943      	cbnz	r3, 8011372 <__swsetup_r+0xc6>
 8011360:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8011364:	d1ba      	bne.n	80112dc <__swsetup_r+0x30>
 8011366:	bd70      	pop	{r4, r5, r6, pc}
 8011368:	0781      	lsls	r1, r0, #30
 801136a:	bf58      	it	pl
 801136c:	6963      	ldrpl	r3, [r4, #20]
 801136e:	60a3      	str	r3, [r4, #8]
 8011370:	e7f4      	b.n	801135c <__swsetup_r+0xb0>
 8011372:	2000      	movs	r0, #0
 8011374:	e7f7      	b.n	8011366 <__swsetup_r+0xba>
 8011376:	bf00      	nop
 8011378:	240000b0 	.word	0x240000b0
 801137c:	080127c4 	.word	0x080127c4
 8011380:	080127e4 	.word	0x080127e4
 8011384:	080127a4 	.word	0x080127a4

08011388 <abort>:
 8011388:	b508      	push	{r3, lr}
 801138a:	2006      	movs	r0, #6
 801138c:	f000 fa4c 	bl	8011828 <raise>
 8011390:	2001      	movs	r0, #1
 8011392:	f7f2 fd5f 	bl	8003e54 <_exit>
	...

08011398 <__sflush_r>:
 8011398:	898a      	ldrh	r2, [r1, #12]
 801139a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801139e:	4605      	mov	r5, r0
 80113a0:	0710      	lsls	r0, r2, #28
 80113a2:	460c      	mov	r4, r1
 80113a4:	d458      	bmi.n	8011458 <__sflush_r+0xc0>
 80113a6:	684b      	ldr	r3, [r1, #4]
 80113a8:	2b00      	cmp	r3, #0
 80113aa:	dc05      	bgt.n	80113b8 <__sflush_r+0x20>
 80113ac:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80113ae:	2b00      	cmp	r3, #0
 80113b0:	dc02      	bgt.n	80113b8 <__sflush_r+0x20>
 80113b2:	2000      	movs	r0, #0
 80113b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80113b8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80113ba:	2e00      	cmp	r6, #0
 80113bc:	d0f9      	beq.n	80113b2 <__sflush_r+0x1a>
 80113be:	2300      	movs	r3, #0
 80113c0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80113c4:	682f      	ldr	r7, [r5, #0]
 80113c6:	602b      	str	r3, [r5, #0]
 80113c8:	d032      	beq.n	8011430 <__sflush_r+0x98>
 80113ca:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80113cc:	89a3      	ldrh	r3, [r4, #12]
 80113ce:	075a      	lsls	r2, r3, #29
 80113d0:	d505      	bpl.n	80113de <__sflush_r+0x46>
 80113d2:	6863      	ldr	r3, [r4, #4]
 80113d4:	1ac0      	subs	r0, r0, r3
 80113d6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80113d8:	b10b      	cbz	r3, 80113de <__sflush_r+0x46>
 80113da:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80113dc:	1ac0      	subs	r0, r0, r3
 80113de:	2300      	movs	r3, #0
 80113e0:	4602      	mov	r2, r0
 80113e2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80113e4:	6a21      	ldr	r1, [r4, #32]
 80113e6:	4628      	mov	r0, r5
 80113e8:	47b0      	blx	r6
 80113ea:	1c43      	adds	r3, r0, #1
 80113ec:	89a3      	ldrh	r3, [r4, #12]
 80113ee:	d106      	bne.n	80113fe <__sflush_r+0x66>
 80113f0:	6829      	ldr	r1, [r5, #0]
 80113f2:	291d      	cmp	r1, #29
 80113f4:	d82c      	bhi.n	8011450 <__sflush_r+0xb8>
 80113f6:	4a2a      	ldr	r2, [pc, #168]	; (80114a0 <__sflush_r+0x108>)
 80113f8:	40ca      	lsrs	r2, r1
 80113fa:	07d6      	lsls	r6, r2, #31
 80113fc:	d528      	bpl.n	8011450 <__sflush_r+0xb8>
 80113fe:	2200      	movs	r2, #0
 8011400:	6062      	str	r2, [r4, #4]
 8011402:	04d9      	lsls	r1, r3, #19
 8011404:	6922      	ldr	r2, [r4, #16]
 8011406:	6022      	str	r2, [r4, #0]
 8011408:	d504      	bpl.n	8011414 <__sflush_r+0x7c>
 801140a:	1c42      	adds	r2, r0, #1
 801140c:	d101      	bne.n	8011412 <__sflush_r+0x7a>
 801140e:	682b      	ldr	r3, [r5, #0]
 8011410:	b903      	cbnz	r3, 8011414 <__sflush_r+0x7c>
 8011412:	6560      	str	r0, [r4, #84]	; 0x54
 8011414:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8011416:	602f      	str	r7, [r5, #0]
 8011418:	2900      	cmp	r1, #0
 801141a:	d0ca      	beq.n	80113b2 <__sflush_r+0x1a>
 801141c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8011420:	4299      	cmp	r1, r3
 8011422:	d002      	beq.n	801142a <__sflush_r+0x92>
 8011424:	4628      	mov	r0, r5
 8011426:	f7ff fbb5 	bl	8010b94 <_free_r>
 801142a:	2000      	movs	r0, #0
 801142c:	6360      	str	r0, [r4, #52]	; 0x34
 801142e:	e7c1      	b.n	80113b4 <__sflush_r+0x1c>
 8011430:	6a21      	ldr	r1, [r4, #32]
 8011432:	2301      	movs	r3, #1
 8011434:	4628      	mov	r0, r5
 8011436:	47b0      	blx	r6
 8011438:	1c41      	adds	r1, r0, #1
 801143a:	d1c7      	bne.n	80113cc <__sflush_r+0x34>
 801143c:	682b      	ldr	r3, [r5, #0]
 801143e:	2b00      	cmp	r3, #0
 8011440:	d0c4      	beq.n	80113cc <__sflush_r+0x34>
 8011442:	2b1d      	cmp	r3, #29
 8011444:	d001      	beq.n	801144a <__sflush_r+0xb2>
 8011446:	2b16      	cmp	r3, #22
 8011448:	d101      	bne.n	801144e <__sflush_r+0xb6>
 801144a:	602f      	str	r7, [r5, #0]
 801144c:	e7b1      	b.n	80113b2 <__sflush_r+0x1a>
 801144e:	89a3      	ldrh	r3, [r4, #12]
 8011450:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011454:	81a3      	strh	r3, [r4, #12]
 8011456:	e7ad      	b.n	80113b4 <__sflush_r+0x1c>
 8011458:	690f      	ldr	r7, [r1, #16]
 801145a:	2f00      	cmp	r7, #0
 801145c:	d0a9      	beq.n	80113b2 <__sflush_r+0x1a>
 801145e:	0793      	lsls	r3, r2, #30
 8011460:	680e      	ldr	r6, [r1, #0]
 8011462:	bf08      	it	eq
 8011464:	694b      	ldreq	r3, [r1, #20]
 8011466:	600f      	str	r7, [r1, #0]
 8011468:	bf18      	it	ne
 801146a:	2300      	movne	r3, #0
 801146c:	eba6 0807 	sub.w	r8, r6, r7
 8011470:	608b      	str	r3, [r1, #8]
 8011472:	f1b8 0f00 	cmp.w	r8, #0
 8011476:	dd9c      	ble.n	80113b2 <__sflush_r+0x1a>
 8011478:	6a21      	ldr	r1, [r4, #32]
 801147a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801147c:	4643      	mov	r3, r8
 801147e:	463a      	mov	r2, r7
 8011480:	4628      	mov	r0, r5
 8011482:	47b0      	blx	r6
 8011484:	2800      	cmp	r0, #0
 8011486:	dc06      	bgt.n	8011496 <__sflush_r+0xfe>
 8011488:	89a3      	ldrh	r3, [r4, #12]
 801148a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801148e:	81a3      	strh	r3, [r4, #12]
 8011490:	f04f 30ff 	mov.w	r0, #4294967295
 8011494:	e78e      	b.n	80113b4 <__sflush_r+0x1c>
 8011496:	4407      	add	r7, r0
 8011498:	eba8 0800 	sub.w	r8, r8, r0
 801149c:	e7e9      	b.n	8011472 <__sflush_r+0xda>
 801149e:	bf00      	nop
 80114a0:	20400001 	.word	0x20400001

080114a4 <_fflush_r>:
 80114a4:	b538      	push	{r3, r4, r5, lr}
 80114a6:	690b      	ldr	r3, [r1, #16]
 80114a8:	4605      	mov	r5, r0
 80114aa:	460c      	mov	r4, r1
 80114ac:	b913      	cbnz	r3, 80114b4 <_fflush_r+0x10>
 80114ae:	2500      	movs	r5, #0
 80114b0:	4628      	mov	r0, r5
 80114b2:	bd38      	pop	{r3, r4, r5, pc}
 80114b4:	b118      	cbz	r0, 80114be <_fflush_r+0x1a>
 80114b6:	6983      	ldr	r3, [r0, #24]
 80114b8:	b90b      	cbnz	r3, 80114be <_fflush_r+0x1a>
 80114ba:	f000 f887 	bl	80115cc <__sinit>
 80114be:	4b14      	ldr	r3, [pc, #80]	; (8011510 <_fflush_r+0x6c>)
 80114c0:	429c      	cmp	r4, r3
 80114c2:	d11b      	bne.n	80114fc <_fflush_r+0x58>
 80114c4:	686c      	ldr	r4, [r5, #4]
 80114c6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80114ca:	2b00      	cmp	r3, #0
 80114cc:	d0ef      	beq.n	80114ae <_fflush_r+0xa>
 80114ce:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80114d0:	07d0      	lsls	r0, r2, #31
 80114d2:	d404      	bmi.n	80114de <_fflush_r+0x3a>
 80114d4:	0599      	lsls	r1, r3, #22
 80114d6:	d402      	bmi.n	80114de <_fflush_r+0x3a>
 80114d8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80114da:	f000 f915 	bl	8011708 <__retarget_lock_acquire_recursive>
 80114de:	4628      	mov	r0, r5
 80114e0:	4621      	mov	r1, r4
 80114e2:	f7ff ff59 	bl	8011398 <__sflush_r>
 80114e6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80114e8:	07da      	lsls	r2, r3, #31
 80114ea:	4605      	mov	r5, r0
 80114ec:	d4e0      	bmi.n	80114b0 <_fflush_r+0xc>
 80114ee:	89a3      	ldrh	r3, [r4, #12]
 80114f0:	059b      	lsls	r3, r3, #22
 80114f2:	d4dd      	bmi.n	80114b0 <_fflush_r+0xc>
 80114f4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80114f6:	f000 f908 	bl	801170a <__retarget_lock_release_recursive>
 80114fa:	e7d9      	b.n	80114b0 <_fflush_r+0xc>
 80114fc:	4b05      	ldr	r3, [pc, #20]	; (8011514 <_fflush_r+0x70>)
 80114fe:	429c      	cmp	r4, r3
 8011500:	d101      	bne.n	8011506 <_fflush_r+0x62>
 8011502:	68ac      	ldr	r4, [r5, #8]
 8011504:	e7df      	b.n	80114c6 <_fflush_r+0x22>
 8011506:	4b04      	ldr	r3, [pc, #16]	; (8011518 <_fflush_r+0x74>)
 8011508:	429c      	cmp	r4, r3
 801150a:	bf08      	it	eq
 801150c:	68ec      	ldreq	r4, [r5, #12]
 801150e:	e7da      	b.n	80114c6 <_fflush_r+0x22>
 8011510:	080127c4 	.word	0x080127c4
 8011514:	080127e4 	.word	0x080127e4
 8011518:	080127a4 	.word	0x080127a4

0801151c <std>:
 801151c:	2300      	movs	r3, #0
 801151e:	b510      	push	{r4, lr}
 8011520:	4604      	mov	r4, r0
 8011522:	e9c0 3300 	strd	r3, r3, [r0]
 8011526:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801152a:	6083      	str	r3, [r0, #8]
 801152c:	8181      	strh	r1, [r0, #12]
 801152e:	6643      	str	r3, [r0, #100]	; 0x64
 8011530:	81c2      	strh	r2, [r0, #14]
 8011532:	6183      	str	r3, [r0, #24]
 8011534:	4619      	mov	r1, r3
 8011536:	2208      	movs	r2, #8
 8011538:	305c      	adds	r0, #92	; 0x5c
 801153a:	f7fd fbdd 	bl	800ecf8 <memset>
 801153e:	4b05      	ldr	r3, [pc, #20]	; (8011554 <std+0x38>)
 8011540:	6263      	str	r3, [r4, #36]	; 0x24
 8011542:	4b05      	ldr	r3, [pc, #20]	; (8011558 <std+0x3c>)
 8011544:	62a3      	str	r3, [r4, #40]	; 0x28
 8011546:	4b05      	ldr	r3, [pc, #20]	; (801155c <std+0x40>)
 8011548:	62e3      	str	r3, [r4, #44]	; 0x2c
 801154a:	4b05      	ldr	r3, [pc, #20]	; (8011560 <std+0x44>)
 801154c:	6224      	str	r4, [r4, #32]
 801154e:	6323      	str	r3, [r4, #48]	; 0x30
 8011550:	bd10      	pop	{r4, pc}
 8011552:	bf00      	nop
 8011554:	08011861 	.word	0x08011861
 8011558:	08011883 	.word	0x08011883
 801155c:	080118bb 	.word	0x080118bb
 8011560:	080118df 	.word	0x080118df

08011564 <_cleanup_r>:
 8011564:	4901      	ldr	r1, [pc, #4]	; (801156c <_cleanup_r+0x8>)
 8011566:	f000 b8af 	b.w	80116c8 <_fwalk_reent>
 801156a:	bf00      	nop
 801156c:	080114a5 	.word	0x080114a5

08011570 <__sfmoreglue>:
 8011570:	b570      	push	{r4, r5, r6, lr}
 8011572:	2268      	movs	r2, #104	; 0x68
 8011574:	1e4d      	subs	r5, r1, #1
 8011576:	4355      	muls	r5, r2
 8011578:	460e      	mov	r6, r1
 801157a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801157e:	f7ff fa17 	bl	80109b0 <_malloc_r>
 8011582:	4604      	mov	r4, r0
 8011584:	b140      	cbz	r0, 8011598 <__sfmoreglue+0x28>
 8011586:	2100      	movs	r1, #0
 8011588:	e9c0 1600 	strd	r1, r6, [r0]
 801158c:	300c      	adds	r0, #12
 801158e:	60a0      	str	r0, [r4, #8]
 8011590:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8011594:	f7fd fbb0 	bl	800ecf8 <memset>
 8011598:	4620      	mov	r0, r4
 801159a:	bd70      	pop	{r4, r5, r6, pc}

0801159c <__sfp_lock_acquire>:
 801159c:	4801      	ldr	r0, [pc, #4]	; (80115a4 <__sfp_lock_acquire+0x8>)
 801159e:	f000 b8b3 	b.w	8011708 <__retarget_lock_acquire_recursive>
 80115a2:	bf00      	nop
 80115a4:	24000d49 	.word	0x24000d49

080115a8 <__sfp_lock_release>:
 80115a8:	4801      	ldr	r0, [pc, #4]	; (80115b0 <__sfp_lock_release+0x8>)
 80115aa:	f000 b8ae 	b.w	801170a <__retarget_lock_release_recursive>
 80115ae:	bf00      	nop
 80115b0:	24000d49 	.word	0x24000d49

080115b4 <__sinit_lock_acquire>:
 80115b4:	4801      	ldr	r0, [pc, #4]	; (80115bc <__sinit_lock_acquire+0x8>)
 80115b6:	f000 b8a7 	b.w	8011708 <__retarget_lock_acquire_recursive>
 80115ba:	bf00      	nop
 80115bc:	24000d4a 	.word	0x24000d4a

080115c0 <__sinit_lock_release>:
 80115c0:	4801      	ldr	r0, [pc, #4]	; (80115c8 <__sinit_lock_release+0x8>)
 80115c2:	f000 b8a2 	b.w	801170a <__retarget_lock_release_recursive>
 80115c6:	bf00      	nop
 80115c8:	24000d4a 	.word	0x24000d4a

080115cc <__sinit>:
 80115cc:	b510      	push	{r4, lr}
 80115ce:	4604      	mov	r4, r0
 80115d0:	f7ff fff0 	bl	80115b4 <__sinit_lock_acquire>
 80115d4:	69a3      	ldr	r3, [r4, #24]
 80115d6:	b11b      	cbz	r3, 80115e0 <__sinit+0x14>
 80115d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80115dc:	f7ff bff0 	b.w	80115c0 <__sinit_lock_release>
 80115e0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80115e4:	6523      	str	r3, [r4, #80]	; 0x50
 80115e6:	4b13      	ldr	r3, [pc, #76]	; (8011634 <__sinit+0x68>)
 80115e8:	4a13      	ldr	r2, [pc, #76]	; (8011638 <__sinit+0x6c>)
 80115ea:	681b      	ldr	r3, [r3, #0]
 80115ec:	62a2      	str	r2, [r4, #40]	; 0x28
 80115ee:	42a3      	cmp	r3, r4
 80115f0:	bf04      	itt	eq
 80115f2:	2301      	moveq	r3, #1
 80115f4:	61a3      	streq	r3, [r4, #24]
 80115f6:	4620      	mov	r0, r4
 80115f8:	f000 f820 	bl	801163c <__sfp>
 80115fc:	6060      	str	r0, [r4, #4]
 80115fe:	4620      	mov	r0, r4
 8011600:	f000 f81c 	bl	801163c <__sfp>
 8011604:	60a0      	str	r0, [r4, #8]
 8011606:	4620      	mov	r0, r4
 8011608:	f000 f818 	bl	801163c <__sfp>
 801160c:	2200      	movs	r2, #0
 801160e:	60e0      	str	r0, [r4, #12]
 8011610:	2104      	movs	r1, #4
 8011612:	6860      	ldr	r0, [r4, #4]
 8011614:	f7ff ff82 	bl	801151c <std>
 8011618:	68a0      	ldr	r0, [r4, #8]
 801161a:	2201      	movs	r2, #1
 801161c:	2109      	movs	r1, #9
 801161e:	f7ff ff7d 	bl	801151c <std>
 8011622:	68e0      	ldr	r0, [r4, #12]
 8011624:	2202      	movs	r2, #2
 8011626:	2112      	movs	r1, #18
 8011628:	f7ff ff78 	bl	801151c <std>
 801162c:	2301      	movs	r3, #1
 801162e:	61a3      	str	r3, [r4, #24]
 8011630:	e7d2      	b.n	80115d8 <__sinit+0xc>
 8011632:	bf00      	nop
 8011634:	080123d8 	.word	0x080123d8
 8011638:	08011565 	.word	0x08011565

0801163c <__sfp>:
 801163c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801163e:	4607      	mov	r7, r0
 8011640:	f7ff ffac 	bl	801159c <__sfp_lock_acquire>
 8011644:	4b1e      	ldr	r3, [pc, #120]	; (80116c0 <__sfp+0x84>)
 8011646:	681e      	ldr	r6, [r3, #0]
 8011648:	69b3      	ldr	r3, [r6, #24]
 801164a:	b913      	cbnz	r3, 8011652 <__sfp+0x16>
 801164c:	4630      	mov	r0, r6
 801164e:	f7ff ffbd 	bl	80115cc <__sinit>
 8011652:	3648      	adds	r6, #72	; 0x48
 8011654:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8011658:	3b01      	subs	r3, #1
 801165a:	d503      	bpl.n	8011664 <__sfp+0x28>
 801165c:	6833      	ldr	r3, [r6, #0]
 801165e:	b30b      	cbz	r3, 80116a4 <__sfp+0x68>
 8011660:	6836      	ldr	r6, [r6, #0]
 8011662:	e7f7      	b.n	8011654 <__sfp+0x18>
 8011664:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8011668:	b9d5      	cbnz	r5, 80116a0 <__sfp+0x64>
 801166a:	4b16      	ldr	r3, [pc, #88]	; (80116c4 <__sfp+0x88>)
 801166c:	60e3      	str	r3, [r4, #12]
 801166e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8011672:	6665      	str	r5, [r4, #100]	; 0x64
 8011674:	f000 f847 	bl	8011706 <__retarget_lock_init_recursive>
 8011678:	f7ff ff96 	bl	80115a8 <__sfp_lock_release>
 801167c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8011680:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8011684:	6025      	str	r5, [r4, #0]
 8011686:	61a5      	str	r5, [r4, #24]
 8011688:	2208      	movs	r2, #8
 801168a:	4629      	mov	r1, r5
 801168c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8011690:	f7fd fb32 	bl	800ecf8 <memset>
 8011694:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8011698:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801169c:	4620      	mov	r0, r4
 801169e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80116a0:	3468      	adds	r4, #104	; 0x68
 80116a2:	e7d9      	b.n	8011658 <__sfp+0x1c>
 80116a4:	2104      	movs	r1, #4
 80116a6:	4638      	mov	r0, r7
 80116a8:	f7ff ff62 	bl	8011570 <__sfmoreglue>
 80116ac:	4604      	mov	r4, r0
 80116ae:	6030      	str	r0, [r6, #0]
 80116b0:	2800      	cmp	r0, #0
 80116b2:	d1d5      	bne.n	8011660 <__sfp+0x24>
 80116b4:	f7ff ff78 	bl	80115a8 <__sfp_lock_release>
 80116b8:	230c      	movs	r3, #12
 80116ba:	603b      	str	r3, [r7, #0]
 80116bc:	e7ee      	b.n	801169c <__sfp+0x60>
 80116be:	bf00      	nop
 80116c0:	080123d8 	.word	0x080123d8
 80116c4:	ffff0001 	.word	0xffff0001

080116c8 <_fwalk_reent>:
 80116c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80116cc:	4606      	mov	r6, r0
 80116ce:	4688      	mov	r8, r1
 80116d0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80116d4:	2700      	movs	r7, #0
 80116d6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80116da:	f1b9 0901 	subs.w	r9, r9, #1
 80116de:	d505      	bpl.n	80116ec <_fwalk_reent+0x24>
 80116e0:	6824      	ldr	r4, [r4, #0]
 80116e2:	2c00      	cmp	r4, #0
 80116e4:	d1f7      	bne.n	80116d6 <_fwalk_reent+0xe>
 80116e6:	4638      	mov	r0, r7
 80116e8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80116ec:	89ab      	ldrh	r3, [r5, #12]
 80116ee:	2b01      	cmp	r3, #1
 80116f0:	d907      	bls.n	8011702 <_fwalk_reent+0x3a>
 80116f2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80116f6:	3301      	adds	r3, #1
 80116f8:	d003      	beq.n	8011702 <_fwalk_reent+0x3a>
 80116fa:	4629      	mov	r1, r5
 80116fc:	4630      	mov	r0, r6
 80116fe:	47c0      	blx	r8
 8011700:	4307      	orrs	r7, r0
 8011702:	3568      	adds	r5, #104	; 0x68
 8011704:	e7e9      	b.n	80116da <_fwalk_reent+0x12>

08011706 <__retarget_lock_init_recursive>:
 8011706:	4770      	bx	lr

08011708 <__retarget_lock_acquire_recursive>:
 8011708:	4770      	bx	lr

0801170a <__retarget_lock_release_recursive>:
 801170a:	4770      	bx	lr

0801170c <__swhatbuf_r>:
 801170c:	b570      	push	{r4, r5, r6, lr}
 801170e:	460e      	mov	r6, r1
 8011710:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011714:	2900      	cmp	r1, #0
 8011716:	b096      	sub	sp, #88	; 0x58
 8011718:	4614      	mov	r4, r2
 801171a:	461d      	mov	r5, r3
 801171c:	da08      	bge.n	8011730 <__swhatbuf_r+0x24>
 801171e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8011722:	2200      	movs	r2, #0
 8011724:	602a      	str	r2, [r5, #0]
 8011726:	061a      	lsls	r2, r3, #24
 8011728:	d410      	bmi.n	801174c <__swhatbuf_r+0x40>
 801172a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801172e:	e00e      	b.n	801174e <__swhatbuf_r+0x42>
 8011730:	466a      	mov	r2, sp
 8011732:	f000 f8fb 	bl	801192c <_fstat_r>
 8011736:	2800      	cmp	r0, #0
 8011738:	dbf1      	blt.n	801171e <__swhatbuf_r+0x12>
 801173a:	9a01      	ldr	r2, [sp, #4]
 801173c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8011740:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8011744:	425a      	negs	r2, r3
 8011746:	415a      	adcs	r2, r3
 8011748:	602a      	str	r2, [r5, #0]
 801174a:	e7ee      	b.n	801172a <__swhatbuf_r+0x1e>
 801174c:	2340      	movs	r3, #64	; 0x40
 801174e:	2000      	movs	r0, #0
 8011750:	6023      	str	r3, [r4, #0]
 8011752:	b016      	add	sp, #88	; 0x58
 8011754:	bd70      	pop	{r4, r5, r6, pc}
	...

08011758 <__smakebuf_r>:
 8011758:	898b      	ldrh	r3, [r1, #12]
 801175a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801175c:	079d      	lsls	r5, r3, #30
 801175e:	4606      	mov	r6, r0
 8011760:	460c      	mov	r4, r1
 8011762:	d507      	bpl.n	8011774 <__smakebuf_r+0x1c>
 8011764:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8011768:	6023      	str	r3, [r4, #0]
 801176a:	6123      	str	r3, [r4, #16]
 801176c:	2301      	movs	r3, #1
 801176e:	6163      	str	r3, [r4, #20]
 8011770:	b002      	add	sp, #8
 8011772:	bd70      	pop	{r4, r5, r6, pc}
 8011774:	ab01      	add	r3, sp, #4
 8011776:	466a      	mov	r2, sp
 8011778:	f7ff ffc8 	bl	801170c <__swhatbuf_r>
 801177c:	9900      	ldr	r1, [sp, #0]
 801177e:	4605      	mov	r5, r0
 8011780:	4630      	mov	r0, r6
 8011782:	f7ff f915 	bl	80109b0 <_malloc_r>
 8011786:	b948      	cbnz	r0, 801179c <__smakebuf_r+0x44>
 8011788:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801178c:	059a      	lsls	r2, r3, #22
 801178e:	d4ef      	bmi.n	8011770 <__smakebuf_r+0x18>
 8011790:	f023 0303 	bic.w	r3, r3, #3
 8011794:	f043 0302 	orr.w	r3, r3, #2
 8011798:	81a3      	strh	r3, [r4, #12]
 801179a:	e7e3      	b.n	8011764 <__smakebuf_r+0xc>
 801179c:	4b0d      	ldr	r3, [pc, #52]	; (80117d4 <__smakebuf_r+0x7c>)
 801179e:	62b3      	str	r3, [r6, #40]	; 0x28
 80117a0:	89a3      	ldrh	r3, [r4, #12]
 80117a2:	6020      	str	r0, [r4, #0]
 80117a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80117a8:	81a3      	strh	r3, [r4, #12]
 80117aa:	9b00      	ldr	r3, [sp, #0]
 80117ac:	6163      	str	r3, [r4, #20]
 80117ae:	9b01      	ldr	r3, [sp, #4]
 80117b0:	6120      	str	r0, [r4, #16]
 80117b2:	b15b      	cbz	r3, 80117cc <__smakebuf_r+0x74>
 80117b4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80117b8:	4630      	mov	r0, r6
 80117ba:	f000 f8c9 	bl	8011950 <_isatty_r>
 80117be:	b128      	cbz	r0, 80117cc <__smakebuf_r+0x74>
 80117c0:	89a3      	ldrh	r3, [r4, #12]
 80117c2:	f023 0303 	bic.w	r3, r3, #3
 80117c6:	f043 0301 	orr.w	r3, r3, #1
 80117ca:	81a3      	strh	r3, [r4, #12]
 80117cc:	89a0      	ldrh	r0, [r4, #12]
 80117ce:	4305      	orrs	r5, r0
 80117d0:	81a5      	strh	r5, [r4, #12]
 80117d2:	e7cd      	b.n	8011770 <__smakebuf_r+0x18>
 80117d4:	08011565 	.word	0x08011565

080117d8 <_raise_r>:
 80117d8:	291f      	cmp	r1, #31
 80117da:	b538      	push	{r3, r4, r5, lr}
 80117dc:	4604      	mov	r4, r0
 80117de:	460d      	mov	r5, r1
 80117e0:	d904      	bls.n	80117ec <_raise_r+0x14>
 80117e2:	2316      	movs	r3, #22
 80117e4:	6003      	str	r3, [r0, #0]
 80117e6:	f04f 30ff 	mov.w	r0, #4294967295
 80117ea:	bd38      	pop	{r3, r4, r5, pc}
 80117ec:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80117ee:	b112      	cbz	r2, 80117f6 <_raise_r+0x1e>
 80117f0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80117f4:	b94b      	cbnz	r3, 801180a <_raise_r+0x32>
 80117f6:	4620      	mov	r0, r4
 80117f8:	f000 f830 	bl	801185c <_getpid_r>
 80117fc:	462a      	mov	r2, r5
 80117fe:	4601      	mov	r1, r0
 8011800:	4620      	mov	r0, r4
 8011802:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011806:	f000 b817 	b.w	8011838 <_kill_r>
 801180a:	2b01      	cmp	r3, #1
 801180c:	d00a      	beq.n	8011824 <_raise_r+0x4c>
 801180e:	1c59      	adds	r1, r3, #1
 8011810:	d103      	bne.n	801181a <_raise_r+0x42>
 8011812:	2316      	movs	r3, #22
 8011814:	6003      	str	r3, [r0, #0]
 8011816:	2001      	movs	r0, #1
 8011818:	e7e7      	b.n	80117ea <_raise_r+0x12>
 801181a:	2400      	movs	r4, #0
 801181c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8011820:	4628      	mov	r0, r5
 8011822:	4798      	blx	r3
 8011824:	2000      	movs	r0, #0
 8011826:	e7e0      	b.n	80117ea <_raise_r+0x12>

08011828 <raise>:
 8011828:	4b02      	ldr	r3, [pc, #8]	; (8011834 <raise+0xc>)
 801182a:	4601      	mov	r1, r0
 801182c:	6818      	ldr	r0, [r3, #0]
 801182e:	f7ff bfd3 	b.w	80117d8 <_raise_r>
 8011832:	bf00      	nop
 8011834:	240000b0 	.word	0x240000b0

08011838 <_kill_r>:
 8011838:	b538      	push	{r3, r4, r5, lr}
 801183a:	4d07      	ldr	r5, [pc, #28]	; (8011858 <_kill_r+0x20>)
 801183c:	2300      	movs	r3, #0
 801183e:	4604      	mov	r4, r0
 8011840:	4608      	mov	r0, r1
 8011842:	4611      	mov	r1, r2
 8011844:	602b      	str	r3, [r5, #0]
 8011846:	f7f2 faf5 	bl	8003e34 <_kill>
 801184a:	1c43      	adds	r3, r0, #1
 801184c:	d102      	bne.n	8011854 <_kill_r+0x1c>
 801184e:	682b      	ldr	r3, [r5, #0]
 8011850:	b103      	cbz	r3, 8011854 <_kill_r+0x1c>
 8011852:	6023      	str	r3, [r4, #0]
 8011854:	bd38      	pop	{r3, r4, r5, pc}
 8011856:	bf00      	nop
 8011858:	24000d44 	.word	0x24000d44

0801185c <_getpid_r>:
 801185c:	f7f2 bae2 	b.w	8003e24 <_getpid>

08011860 <__sread>:
 8011860:	b510      	push	{r4, lr}
 8011862:	460c      	mov	r4, r1
 8011864:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011868:	f000 f894 	bl	8011994 <_read_r>
 801186c:	2800      	cmp	r0, #0
 801186e:	bfab      	itete	ge
 8011870:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8011872:	89a3      	ldrhlt	r3, [r4, #12]
 8011874:	181b      	addge	r3, r3, r0
 8011876:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801187a:	bfac      	ite	ge
 801187c:	6563      	strge	r3, [r4, #84]	; 0x54
 801187e:	81a3      	strhlt	r3, [r4, #12]
 8011880:	bd10      	pop	{r4, pc}

08011882 <__swrite>:
 8011882:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011886:	461f      	mov	r7, r3
 8011888:	898b      	ldrh	r3, [r1, #12]
 801188a:	05db      	lsls	r3, r3, #23
 801188c:	4605      	mov	r5, r0
 801188e:	460c      	mov	r4, r1
 8011890:	4616      	mov	r6, r2
 8011892:	d505      	bpl.n	80118a0 <__swrite+0x1e>
 8011894:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011898:	2302      	movs	r3, #2
 801189a:	2200      	movs	r2, #0
 801189c:	f000 f868 	bl	8011970 <_lseek_r>
 80118a0:	89a3      	ldrh	r3, [r4, #12]
 80118a2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80118a6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80118aa:	81a3      	strh	r3, [r4, #12]
 80118ac:	4632      	mov	r2, r6
 80118ae:	463b      	mov	r3, r7
 80118b0:	4628      	mov	r0, r5
 80118b2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80118b6:	f000 b817 	b.w	80118e8 <_write_r>

080118ba <__sseek>:
 80118ba:	b510      	push	{r4, lr}
 80118bc:	460c      	mov	r4, r1
 80118be:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80118c2:	f000 f855 	bl	8011970 <_lseek_r>
 80118c6:	1c43      	adds	r3, r0, #1
 80118c8:	89a3      	ldrh	r3, [r4, #12]
 80118ca:	bf15      	itete	ne
 80118cc:	6560      	strne	r0, [r4, #84]	; 0x54
 80118ce:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80118d2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80118d6:	81a3      	strheq	r3, [r4, #12]
 80118d8:	bf18      	it	ne
 80118da:	81a3      	strhne	r3, [r4, #12]
 80118dc:	bd10      	pop	{r4, pc}

080118de <__sclose>:
 80118de:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80118e2:	f000 b813 	b.w	801190c <_close_r>
	...

080118e8 <_write_r>:
 80118e8:	b538      	push	{r3, r4, r5, lr}
 80118ea:	4d07      	ldr	r5, [pc, #28]	; (8011908 <_write_r+0x20>)
 80118ec:	4604      	mov	r4, r0
 80118ee:	4608      	mov	r0, r1
 80118f0:	4611      	mov	r1, r2
 80118f2:	2200      	movs	r2, #0
 80118f4:	602a      	str	r2, [r5, #0]
 80118f6:	461a      	mov	r2, r3
 80118f8:	f7f2 fad3 	bl	8003ea2 <_write>
 80118fc:	1c43      	adds	r3, r0, #1
 80118fe:	d102      	bne.n	8011906 <_write_r+0x1e>
 8011900:	682b      	ldr	r3, [r5, #0]
 8011902:	b103      	cbz	r3, 8011906 <_write_r+0x1e>
 8011904:	6023      	str	r3, [r4, #0]
 8011906:	bd38      	pop	{r3, r4, r5, pc}
 8011908:	24000d44 	.word	0x24000d44

0801190c <_close_r>:
 801190c:	b538      	push	{r3, r4, r5, lr}
 801190e:	4d06      	ldr	r5, [pc, #24]	; (8011928 <_close_r+0x1c>)
 8011910:	2300      	movs	r3, #0
 8011912:	4604      	mov	r4, r0
 8011914:	4608      	mov	r0, r1
 8011916:	602b      	str	r3, [r5, #0]
 8011918:	f7f2 fadf 	bl	8003eda <_close>
 801191c:	1c43      	adds	r3, r0, #1
 801191e:	d102      	bne.n	8011926 <_close_r+0x1a>
 8011920:	682b      	ldr	r3, [r5, #0]
 8011922:	b103      	cbz	r3, 8011926 <_close_r+0x1a>
 8011924:	6023      	str	r3, [r4, #0]
 8011926:	bd38      	pop	{r3, r4, r5, pc}
 8011928:	24000d44 	.word	0x24000d44

0801192c <_fstat_r>:
 801192c:	b538      	push	{r3, r4, r5, lr}
 801192e:	4d07      	ldr	r5, [pc, #28]	; (801194c <_fstat_r+0x20>)
 8011930:	2300      	movs	r3, #0
 8011932:	4604      	mov	r4, r0
 8011934:	4608      	mov	r0, r1
 8011936:	4611      	mov	r1, r2
 8011938:	602b      	str	r3, [r5, #0]
 801193a:	f7f2 fada 	bl	8003ef2 <_fstat>
 801193e:	1c43      	adds	r3, r0, #1
 8011940:	d102      	bne.n	8011948 <_fstat_r+0x1c>
 8011942:	682b      	ldr	r3, [r5, #0]
 8011944:	b103      	cbz	r3, 8011948 <_fstat_r+0x1c>
 8011946:	6023      	str	r3, [r4, #0]
 8011948:	bd38      	pop	{r3, r4, r5, pc}
 801194a:	bf00      	nop
 801194c:	24000d44 	.word	0x24000d44

08011950 <_isatty_r>:
 8011950:	b538      	push	{r3, r4, r5, lr}
 8011952:	4d06      	ldr	r5, [pc, #24]	; (801196c <_isatty_r+0x1c>)
 8011954:	2300      	movs	r3, #0
 8011956:	4604      	mov	r4, r0
 8011958:	4608      	mov	r0, r1
 801195a:	602b      	str	r3, [r5, #0]
 801195c:	f7f2 fad9 	bl	8003f12 <_isatty>
 8011960:	1c43      	adds	r3, r0, #1
 8011962:	d102      	bne.n	801196a <_isatty_r+0x1a>
 8011964:	682b      	ldr	r3, [r5, #0]
 8011966:	b103      	cbz	r3, 801196a <_isatty_r+0x1a>
 8011968:	6023      	str	r3, [r4, #0]
 801196a:	bd38      	pop	{r3, r4, r5, pc}
 801196c:	24000d44 	.word	0x24000d44

08011970 <_lseek_r>:
 8011970:	b538      	push	{r3, r4, r5, lr}
 8011972:	4d07      	ldr	r5, [pc, #28]	; (8011990 <_lseek_r+0x20>)
 8011974:	4604      	mov	r4, r0
 8011976:	4608      	mov	r0, r1
 8011978:	4611      	mov	r1, r2
 801197a:	2200      	movs	r2, #0
 801197c:	602a      	str	r2, [r5, #0]
 801197e:	461a      	mov	r2, r3
 8011980:	f7f2 fad2 	bl	8003f28 <_lseek>
 8011984:	1c43      	adds	r3, r0, #1
 8011986:	d102      	bne.n	801198e <_lseek_r+0x1e>
 8011988:	682b      	ldr	r3, [r5, #0]
 801198a:	b103      	cbz	r3, 801198e <_lseek_r+0x1e>
 801198c:	6023      	str	r3, [r4, #0]
 801198e:	bd38      	pop	{r3, r4, r5, pc}
 8011990:	24000d44 	.word	0x24000d44

08011994 <_read_r>:
 8011994:	b538      	push	{r3, r4, r5, lr}
 8011996:	4d07      	ldr	r5, [pc, #28]	; (80119b4 <_read_r+0x20>)
 8011998:	4604      	mov	r4, r0
 801199a:	4608      	mov	r0, r1
 801199c:	4611      	mov	r1, r2
 801199e:	2200      	movs	r2, #0
 80119a0:	602a      	str	r2, [r5, #0]
 80119a2:	461a      	mov	r2, r3
 80119a4:	f7f2 fa60 	bl	8003e68 <_read>
 80119a8:	1c43      	adds	r3, r0, #1
 80119aa:	d102      	bne.n	80119b2 <_read_r+0x1e>
 80119ac:	682b      	ldr	r3, [r5, #0]
 80119ae:	b103      	cbz	r3, 80119b2 <_read_r+0x1e>
 80119b0:	6023      	str	r3, [r4, #0]
 80119b2:	bd38      	pop	{r3, r4, r5, pc}
 80119b4:	24000d44 	.word	0x24000d44

080119b8 <checkint>:
 80119b8:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80119bc:	f240 33fe 	movw	r3, #1022	; 0x3fe
 80119c0:	429a      	cmp	r2, r3
 80119c2:	b570      	push	{r4, r5, r6, lr}
 80119c4:	dd2a      	ble.n	8011a1c <checkint+0x64>
 80119c6:	f240 4333 	movw	r3, #1075	; 0x433
 80119ca:	429a      	cmp	r2, r3
 80119cc:	dc24      	bgt.n	8011a18 <checkint+0x60>
 80119ce:	1a9b      	subs	r3, r3, r2
 80119d0:	f1a3 0620 	sub.w	r6, r3, #32
 80119d4:	f04f 32ff 	mov.w	r2, #4294967295
 80119d8:	fa02 f403 	lsl.w	r4, r2, r3
 80119dc:	fa02 f606 	lsl.w	r6, r2, r6
 80119e0:	f1c3 0520 	rsb	r5, r3, #32
 80119e4:	fa22 f505 	lsr.w	r5, r2, r5
 80119e8:	4334      	orrs	r4, r6
 80119ea:	432c      	orrs	r4, r5
 80119ec:	409a      	lsls	r2, r3
 80119ee:	ea20 0202 	bic.w	r2, r0, r2
 80119f2:	ea21 0404 	bic.w	r4, r1, r4
 80119f6:	4322      	orrs	r2, r4
 80119f8:	f1a3 0420 	sub.w	r4, r3, #32
 80119fc:	f1c3 0220 	rsb	r2, r3, #32
 8011a00:	d10c      	bne.n	8011a1c <checkint+0x64>
 8011a02:	40d8      	lsrs	r0, r3
 8011a04:	fa01 f302 	lsl.w	r3, r1, r2
 8011a08:	4318      	orrs	r0, r3
 8011a0a:	40e1      	lsrs	r1, r4
 8011a0c:	4308      	orrs	r0, r1
 8011a0e:	f000 0001 	and.w	r0, r0, #1
 8011a12:	f1d0 0002 	rsbs	r0, r0, #2
 8011a16:	bd70      	pop	{r4, r5, r6, pc}
 8011a18:	2002      	movs	r0, #2
 8011a1a:	e7fc      	b.n	8011a16 <checkint+0x5e>
 8011a1c:	2000      	movs	r0, #0
 8011a1e:	e7fa      	b.n	8011a16 <checkint+0x5e>

08011a20 <pow>:
 8011a20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011a24:	ee10 4a90 	vmov	r4, s1
 8011a28:	ed2d 8b0a 	vpush	{d8-d12}
 8011a2c:	ea4f 5a14 	mov.w	sl, r4, lsr #20
 8011a30:	ee11 7a90 	vmov	r7, s3
 8011a34:	f10a 32ff 	add.w	r2, sl, #4294967295
 8011a38:	f240 73fd 	movw	r3, #2045	; 0x7fd
 8011a3c:	429a      	cmp	r2, r3
 8011a3e:	ee10 6a10 	vmov	r6, s0
 8011a42:	ee11 0a10 	vmov	r0, s2
 8011a46:	b086      	sub	sp, #24
 8011a48:	46d4      	mov	ip, sl
 8011a4a:	ea4f 5517 	mov.w	r5, r7, lsr #20
 8011a4e:	d806      	bhi.n	8011a5e <pow+0x3e>
 8011a50:	f3c5 030a 	ubfx	r3, r5, #0, #11
 8011a54:	f2a3 33be 	subw	r3, r3, #958	; 0x3be
 8011a58:	2b7f      	cmp	r3, #127	; 0x7f
 8011a5a:	f240 8156 	bls.w	8011d0a <pow+0x2ea>
 8011a5e:	1802      	adds	r2, r0, r0
 8011a60:	eb47 0107 	adc.w	r1, r7, r7
 8011a64:	f06f 0e01 	mvn.w	lr, #1
 8011a68:	f112 39ff 	adds.w	r9, r2, #4294967295
 8011a6c:	f141 38ff 	adc.w	r8, r1, #4294967295
 8011a70:	f46f 1300 	mvn.w	r3, #2097152	; 0x200000
 8011a74:	45ce      	cmp	lr, r9
 8011a76:	eb73 0808 	sbcs.w	r8, r3, r8
 8011a7a:	d23f      	bcs.n	8011afc <pow+0xdc>
 8011a7c:	ea52 0301 	orrs.w	r3, r2, r1
 8011a80:	f04f 0300 	mov.w	r3, #0
 8011a84:	d10c      	bne.n	8011aa0 <pow+0x80>
 8011a86:	19b6      	adds	r6, r6, r6
 8011a88:	f484 2400 	eor.w	r4, r4, #524288	; 0x80000
 8011a8c:	4164      	adcs	r4, r4
 8011a8e:	42b3      	cmp	r3, r6
 8011a90:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8011a94:	41a3      	sbcs	r3, r4
 8011a96:	f0c0 808c 	bcc.w	8011bb2 <pow+0x192>
 8011a9a:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 8011a9e:	e028      	b.n	8011af2 <pow+0xd2>
 8011aa0:	4da3      	ldr	r5, [pc, #652]	; (8011d30 <pow+0x310>)
 8011aa2:	42ac      	cmp	r4, r5
 8011aa4:	bf08      	it	eq
 8011aa6:	429e      	cmpeq	r6, r3
 8011aa8:	d107      	bne.n	8011aba <pow+0x9a>
 8011aaa:	1800      	adds	r0, r0, r0
 8011aac:	f487 2700 	eor.w	r7, r7, #524288	; 0x80000
 8011ab0:	417f      	adcs	r7, r7
 8011ab2:	4283      	cmp	r3, r0
 8011ab4:	4b9f      	ldr	r3, [pc, #636]	; (8011d34 <pow+0x314>)
 8011ab6:	41bb      	sbcs	r3, r7
 8011ab8:	e7ed      	b.n	8011a96 <pow+0x76>
 8011aba:	19b6      	adds	r6, r6, r6
 8011abc:	489e      	ldr	r0, [pc, #632]	; (8011d38 <pow+0x318>)
 8011abe:	4164      	adcs	r4, r4
 8011ac0:	42b3      	cmp	r3, r6
 8011ac2:	eb70 0504 	sbcs.w	r5, r0, r4
 8011ac6:	d374      	bcc.n	8011bb2 <pow+0x192>
 8011ac8:	4281      	cmp	r1, r0
 8011aca:	bf08      	it	eq
 8011acc:	429a      	cmpeq	r2, r3
 8011ace:	d170      	bne.n	8011bb2 <pow+0x192>
 8011ad0:	4a9a      	ldr	r2, [pc, #616]	; (8011d3c <pow+0x31c>)
 8011ad2:	4294      	cmp	r4, r2
 8011ad4:	bf08      	it	eq
 8011ad6:	429e      	cmpeq	r6, r3
 8011ad8:	d0df      	beq.n	8011a9a <pow+0x7a>
 8011ada:	4294      	cmp	r4, r2
 8011adc:	ea6f 0707 	mvn.w	r7, r7
 8011ae0:	bf34      	ite	cc
 8011ae2:	2400      	movcc	r4, #0
 8011ae4:	2401      	movcs	r4, #1
 8011ae6:	0fff      	lsrs	r7, r7, #31
 8011ae8:	42bc      	cmp	r4, r7
 8011aea:	f040 81d9 	bne.w	8011ea0 <pow+0x480>
 8011aee:	ee21 0b01 	vmul.f64	d0, d1, d1
 8011af2:	b006      	add	sp, #24
 8011af4:	ecbd 8b0a 	vpop	{d8-d12}
 8011af8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011afc:	eb16 0806 	adds.w	r8, r6, r6
 8011b00:	eb44 0904 	adc.w	r9, r4, r4
 8011b04:	f118 31ff 	adds.w	r1, r8, #4294967295
 8011b08:	f169 0200 	sbc.w	r2, r9, #0
 8011b0c:	458e      	cmp	lr, r1
 8011b0e:	4193      	sbcs	r3, r2
 8011b10:	d223      	bcs.n	8011b5a <pow+0x13a>
 8011b12:	ee20 0b00 	vmul.f64	d0, d0, d0
 8011b16:	2c00      	cmp	r4, #0
 8011b18:	da12      	bge.n	8011b40 <pow+0x120>
 8011b1a:	4639      	mov	r1, r7
 8011b1c:	f7ff ff4c 	bl	80119b8 <checkint>
 8011b20:	2801      	cmp	r0, #1
 8011b22:	d10d      	bne.n	8011b40 <pow+0x120>
 8011b24:	eeb1 0b40 	vneg.f64	d0, d0
 8011b28:	ea58 0309 	orrs.w	r3, r8, r9
 8011b2c:	d10a      	bne.n	8011b44 <pow+0x124>
 8011b2e:	2f00      	cmp	r7, #0
 8011b30:	dadf      	bge.n	8011af2 <pow+0xd2>
 8011b32:	b006      	add	sp, #24
 8011b34:	ecbd 8b0a 	vpop	{d8-d12}
 8011b38:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011b3c:	f000 bb50 	b.w	80121e0 <__math_divzero>
 8011b40:	2000      	movs	r0, #0
 8011b42:	e7f1      	b.n	8011b28 <pow+0x108>
 8011b44:	2f00      	cmp	r7, #0
 8011b46:	dad4      	bge.n	8011af2 <pow+0xd2>
 8011b48:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8011b4c:	ee86 7b00 	vdiv.f64	d7, d6, d0
 8011b50:	ed8d 7b00 	vstr	d7, [sp]
 8011b54:	ed9d 0b00 	vldr	d0, [sp]
 8011b58:	e7cb      	b.n	8011af2 <pow+0xd2>
 8011b5a:	2c00      	cmp	r4, #0
 8011b5c:	da2c      	bge.n	8011bb8 <pow+0x198>
 8011b5e:	4639      	mov	r1, r7
 8011b60:	f7ff ff2a 	bl	80119b8 <checkint>
 8011b64:	b930      	cbnz	r0, 8011b74 <pow+0x154>
 8011b66:	b006      	add	sp, #24
 8011b68:	ecbd 8b0a 	vpop	{d8-d12}
 8011b6c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011b70:	f000 bb4e 	b.w	8012210 <__math_invalid>
 8011b74:	2801      	cmp	r0, #1
 8011b76:	bf14      	ite	ne
 8011b78:	2000      	movne	r0, #0
 8011b7a:	f44f 2080 	moveq.w	r0, #262144	; 0x40000
 8011b7e:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 8011b82:	f3ca 0c0a 	ubfx	ip, sl, #0, #11
 8011b86:	f3c5 020a 	ubfx	r2, r5, #0, #11
 8011b8a:	f2a2 33be 	subw	r3, r2, #958	; 0x3be
 8011b8e:	2b7f      	cmp	r3, #127	; 0x7f
 8011b90:	d92d      	bls.n	8011bee <pow+0x1ce>
 8011b92:	4b67      	ldr	r3, [pc, #412]	; (8011d30 <pow+0x310>)
 8011b94:	2000      	movs	r0, #0
 8011b96:	429c      	cmp	r4, r3
 8011b98:	bf08      	it	eq
 8011b9a:	4286      	cmpeq	r6, r0
 8011b9c:	f43f af7d 	beq.w	8011a9a <pow+0x7a>
 8011ba0:	f240 31bd 	movw	r1, #957	; 0x3bd
 8011ba4:	428a      	cmp	r2, r1
 8011ba6:	d80c      	bhi.n	8011bc2 <pow+0x1a2>
 8011ba8:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 8011bac:	42b0      	cmp	r0, r6
 8011bae:	41a3      	sbcs	r3, r4
 8011bb0:	d204      	bcs.n	8011bbc <pow+0x19c>
 8011bb2:	ee31 0b00 	vadd.f64	d0, d1, d0
 8011bb6:	e79c      	b.n	8011af2 <pow+0xd2>
 8011bb8:	2000      	movs	r0, #0
 8011bba:	e7e4      	b.n	8011b86 <pow+0x166>
 8011bbc:	ee30 0b41 	vsub.f64	d0, d0, d1
 8011bc0:	e797      	b.n	8011af2 <pow+0xd2>
 8011bc2:	2e01      	cmp	r6, #1
 8011bc4:	eb74 0303 	sbcs.w	r3, r4, r3
 8011bc8:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8011bcc:	bf34      	ite	cc
 8011bce:	2301      	movcc	r3, #1
 8011bd0:	2300      	movcs	r3, #0
 8011bd2:	4295      	cmp	r5, r2
 8011bd4:	bf8c      	ite	hi
 8011bd6:	2500      	movhi	r5, #0
 8011bd8:	2501      	movls	r5, #1
 8011bda:	42ab      	cmp	r3, r5
 8011bdc:	f000 809d 	beq.w	8011d1a <pow+0x2fa>
 8011be0:	b006      	add	sp, #24
 8011be2:	ecbd 8b0a 	vpop	{d8-d12}
 8011be6:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011bea:	f000 baf1 	b.w	80121d0 <__math_oflow>
 8011bee:	f1bc 0f00 	cmp.w	ip, #0
 8011bf2:	d10b      	bne.n	8011c0c <pow+0x1ec>
 8011bf4:	ed9f 7b4c 	vldr	d7, [pc, #304]	; 8011d28 <pow+0x308>
 8011bf8:	ee20 7b07 	vmul.f64	d7, d0, d7
 8011bfc:	ec53 2b17 	vmov	r2, r3, d7
 8011c00:	ee17 6a10 	vmov	r6, s14
 8011c04:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 8011c08:	f1a4 7450 	sub.w	r4, r4, #54525952	; 0x3400000
 8011c0c:	4b4c      	ldr	r3, [pc, #304]	; (8011d40 <pow+0x320>)
 8011c0e:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 8011c12:	4423      	add	r3, r4
 8011c14:	f3c3 3246 	ubfx	r2, r3, #13, #7
 8011c18:	1519      	asrs	r1, r3, #20
 8011c1a:	0d1b      	lsrs	r3, r3, #20
 8011c1c:	051b      	lsls	r3, r3, #20
 8011c1e:	eba4 0903 	sub.w	r9, r4, r3
 8011c22:	4b48      	ldr	r3, [pc, #288]	; (8011d44 <pow+0x324>)
 8011c24:	ee04 1a10 	vmov	s8, r1
 8011c28:	eb03 1142 	add.w	r1, r3, r2, lsl #5
 8011c2c:	f1b6 0800 	subs.w	r8, r6, #0
 8011c30:	ed91 7b12 	vldr	d7, [r1, #72]	; 0x48
 8011c34:	ec49 8b15 	vmov	d5, r8, r9
 8011c38:	ed91 2b16 	vldr	d2, [r1, #88]	; 0x58
 8011c3c:	eea5 6b07 	vfma.f64	d6, d5, d7
 8011c40:	ed93 7b00 	vldr	d7, [r3]
 8011c44:	ed93 5b02 	vldr	d5, [r3, #8]
 8011c48:	eeb8 4bc4 	vcvt.f64.s32	d4, s8
 8011c4c:	eea4 2b07 	vfma.f64	d2, d4, d7
 8011c50:	ed91 7b18 	vldr	d7, [r1, #96]	; 0x60
 8011c54:	ee36 ab02 	vadd.f64	d10, d6, d2
 8011c58:	ee32 2b4a 	vsub.f64	d2, d2, d10
 8011c5c:	eea4 7b05 	vfma.f64	d7, d4, d5
 8011c60:	ed93 5b04 	vldr	d5, [r3, #16]
 8011c64:	ee32 2b06 	vadd.f64	d2, d2, d6
 8011c68:	ee37 7b02 	vadd.f64	d7, d7, d2
 8011c6c:	ee26 5b05 	vmul.f64	d5, d6, d5
 8011c70:	ed93 4b08 	vldr	d4, [r3, #32]
 8011c74:	ee26 0b05 	vmul.f64	d0, d6, d5
 8011c78:	eeb0 9b40 	vmov.f64	d9, d0
 8011c7c:	ee95 9b06 	vfnms.f64	d9, d5, d6
 8011c80:	ed93 5b06 	vldr	d5, [r3, #24]
 8011c84:	ee3a 8b00 	vadd.f64	d8, d10, d0
 8011c88:	ee26 bb00 	vmul.f64	d11, d6, d0
 8011c8c:	ed93 3b0c 	vldr	d3, [r3, #48]	; 0x30
 8011c90:	eea6 5b04 	vfma.f64	d5, d6, d4
 8011c94:	ee3a ab48 	vsub.f64	d10, d10, d8
 8011c98:	ed93 4b0a 	vldr	d4, [r3, #40]	; 0x28
 8011c9c:	ee37 9b09 	vadd.f64	d9, d7, d9
 8011ca0:	ee3a ab00 	vadd.f64	d10, d10, d0
 8011ca4:	eea6 4b03 	vfma.f64	d4, d6, d3
 8011ca8:	ed93 cb10 	vldr	d12, [r3, #64]	; 0x40
 8011cac:	ee39 ab0a 	vadd.f64	d10, d9, d10
 8011cb0:	ed93 3b0e 	vldr	d3, [r3, #56]	; 0x38
 8011cb4:	eea6 3b0c 	vfma.f64	d3, d6, d12
 8011cb8:	eea0 4b03 	vfma.f64	d4, d0, d3
 8011cbc:	eea0 5b04 	vfma.f64	d5, d0, d4
 8011cc0:	eeab ab05 	vfma.f64	d10, d11, d5
 8011cc4:	ee38 6b0a 	vadd.f64	d6, d8, d10
 8011cc8:	ee21 7b06 	vmul.f64	d7, d1, d6
 8011ccc:	ee17 3a90 	vmov	r3, s15
 8011cd0:	eeb0 5b47 	vmov.f64	d5, d7
 8011cd4:	f3c3 560a 	ubfx	r6, r3, #20, #11
 8011cd8:	f46f 7272 	mvn.w	r2, #968	; 0x3c8
 8011cdc:	18b2      	adds	r2, r6, r2
 8011cde:	2a3e      	cmp	r2, #62	; 0x3e
 8011ce0:	ee91 5b06 	vfnms.f64	d5, d1, d6
 8011ce4:	ee38 8b46 	vsub.f64	d8, d8, d6
 8011ce8:	ee38 ab0a 	vadd.f64	d10, d8, d10
 8011cec:	eea1 5b0a 	vfma.f64	d5, d1, d10
 8011cf0:	d92b      	bls.n	8011d4a <pow+0x32a>
 8011cf2:	2a00      	cmp	r2, #0
 8011cf4:	da0b      	bge.n	8011d0e <pow+0x2ee>
 8011cf6:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 8011cfa:	ee37 0b00 	vadd.f64	d0, d7, d0
 8011cfe:	2800      	cmp	r0, #0
 8011d00:	f43f aef7 	beq.w	8011af2 <pow+0xd2>
 8011d04:	eeb1 0b40 	vneg.f64	d0, d0
 8011d08:	e6f3      	b.n	8011af2 <pow+0xd2>
 8011d0a:	2000      	movs	r0, #0
 8011d0c:	e77e      	b.n	8011c0c <pow+0x1ec>
 8011d0e:	f5b6 6f81 	cmp.w	r6, #1032	; 0x408
 8011d12:	d919      	bls.n	8011d48 <pow+0x328>
 8011d14:	2b00      	cmp	r3, #0
 8011d16:	f6bf af63 	bge.w	8011be0 <pow+0x1c0>
 8011d1a:	b006      	add	sp, #24
 8011d1c:	ecbd 8b0a 	vpop	{d8-d12}
 8011d20:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011d24:	f000 ba4c 	b.w	80121c0 <__math_uflow>
 8011d28:	00000000 	.word	0x00000000
 8011d2c:	43300000 	.word	0x43300000
 8011d30:	3ff00000 	.word	0x3ff00000
 8011d34:	fff00000 	.word	0xfff00000
 8011d38:	ffe00000 	.word	0xffe00000
 8011d3c:	7fe00000 	.word	0x7fe00000
 8011d40:	c0196aab 	.word	0xc0196aab
 8011d44:	08012808 	.word	0x08012808
 8011d48:	2600      	movs	r6, #0
 8011d4a:	495d      	ldr	r1, [pc, #372]	; (8011ec0 <pow+0x4a0>)
 8011d4c:	ed91 4b02 	vldr	d4, [r1, #8]
 8011d50:	ed91 3b00 	vldr	d3, [r1]
 8011d54:	eeb0 6b44 	vmov.f64	d6, d4
 8011d58:	eea7 6b03 	vfma.f64	d6, d7, d3
 8011d5c:	ee16 5a10 	vmov	r5, s12
 8011d60:	ee36 6b44 	vsub.f64	d6, d6, d4
 8011d64:	ed91 4b04 	vldr	d4, [r1, #16]
 8011d68:	f005 037f 	and.w	r3, r5, #127	; 0x7f
 8011d6c:	eea6 7b04 	vfma.f64	d7, d6, d4
 8011d70:	eeb0 0b47 	vmov.f64	d0, d7
 8011d74:	ed91 7b06 	vldr	d7, [r1, #24]
 8011d78:	18dc      	adds	r4, r3, r3
 8011d7a:	f104 030f 	add.w	r3, r4, #15
 8011d7e:	eb01 04c4 	add.w	r4, r1, r4, lsl #3
 8011d82:	eea6 0b07 	vfma.f64	d0, d6, d7
 8011d86:	ed91 4b0a 	vldr	d4, [r1, #40]	; 0x28
 8011d8a:	ee35 0b00 	vadd.f64	d0, d5, d0
 8011d8e:	ee20 6b00 	vmul.f64	d6, d0, d0
 8011d92:	ed94 7b1c 	vldr	d7, [r4, #112]	; 0x70
 8011d96:	ed91 5b08 	vldr	d5, [r1, #32]
 8011d9a:	ee30 7b07 	vadd.f64	d7, d0, d7
 8011d9e:	eb01 02c3 	add.w	r2, r1, r3, lsl #3
 8011da2:	eea0 5b04 	vfma.f64	d5, d0, d4
 8011da6:	ed91 4b0e 	vldr	d4, [r1, #56]	; 0x38
 8011daa:	eea6 7b05 	vfma.f64	d7, d6, d5
 8011dae:	ee26 6b06 	vmul.f64	d6, d6, d6
 8011db2:	ed91 5b0c 	vldr	d5, [r1, #48]	; 0x30
 8011db6:	f851 c033 	ldr.w	ip, [r1, r3, lsl #3]
 8011dba:	f8d2 e004 	ldr.w	lr, [r2, #4]
 8011dbe:	eea0 5b04 	vfma.f64	d5, d0, d4
 8011dc2:	1940      	adds	r0, r0, r5
 8011dc4:	2700      	movs	r7, #0
 8011dc6:	eb17 020c 	adds.w	r2, r7, ip
 8011dca:	eb0e 3340 	add.w	r3, lr, r0, lsl #13
 8011dce:	eea6 7b05 	vfma.f64	d7, d6, d5
 8011dd2:	2e00      	cmp	r6, #0
 8011dd4:	d15f      	bne.n	8011e96 <pow+0x476>
 8011dd6:	42bd      	cmp	r5, r7
 8011dd8:	db13      	blt.n	8011e02 <pow+0x3e2>
 8011dda:	f103 4140 	add.w	r1, r3, #3221225472	; 0xc0000000
 8011dde:	f501 0170 	add.w	r1, r1, #15728640	; 0xf00000
 8011de2:	4610      	mov	r0, r2
 8011de4:	ec41 0b10 	vmov	d0, r0, r1
 8011de8:	eea7 0b00 	vfma.f64	d0, d7, d0
 8011dec:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 8011ea8 <pow+0x488>
 8011df0:	ee20 0b07 	vmul.f64	d0, d0, d7
 8011df4:	b006      	add	sp, #24
 8011df6:	ecbd 8b0a 	vpop	{d8-d12}
 8011dfa:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011dfe:	f000 ba1f 	b.w	8012240 <__math_check_oflow>
 8011e02:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
 8011e06:	f501 1100 	add.w	r1, r1, #2097152	; 0x200000
 8011e0a:	4610      	mov	r0, r2
 8011e0c:	ec41 0b15 	vmov	d5, r0, r1
 8011e10:	eeb7 4b00 	vmov.f64	d4, #112	; 0x3f800000  1.0
 8011e14:	ee27 6b05 	vmul.f64	d6, d7, d5
 8011e18:	ee35 7b06 	vadd.f64	d7, d5, d6
 8011e1c:	eeb0 3bc7 	vabs.f64	d3, d7
 8011e20:	eeb4 3bc4 	vcmpe.f64	d3, d4
 8011e24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011e28:	ed9f 0b21 	vldr	d0, [pc, #132]	; 8011eb0 <pow+0x490>
 8011e2c:	d52a      	bpl.n	8011e84 <pow+0x464>
 8011e2e:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8011e32:	ee35 5b47 	vsub.f64	d5, d5, d7
 8011e36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011e3a:	eebf 3b00 	vmov.f64	d3, #240	; 0xbf800000 -1.0
 8011e3e:	ee35 6b06 	vadd.f64	d6, d5, d6
 8011e42:	bf48      	it	mi
 8011e44:	eeb0 4b43 	vmovmi.f64	d4, d3
 8011e48:	ee37 3b04 	vadd.f64	d3, d7, d4
 8011e4c:	ee34 5b43 	vsub.f64	d5, d4, d3
 8011e50:	ee35 7b07 	vadd.f64	d7, d5, d7
 8011e54:	ee37 7b06 	vadd.f64	d7, d7, d6
 8011e58:	ee37 7b03 	vadd.f64	d7, d7, d3
 8011e5c:	ee37 7b44 	vsub.f64	d7, d7, d4
 8011e60:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8011e64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011e68:	d104      	bne.n	8011e74 <pow+0x454>
 8011e6a:	4632      	mov	r2, r6
 8011e6c:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 8011e70:	ec43 2b17 	vmov	d7, r2, r3
 8011e74:	ed8d 0b02 	vstr	d0, [sp, #8]
 8011e78:	ed9d 6b02 	vldr	d6, [sp, #8]
 8011e7c:	ee26 6b00 	vmul.f64	d6, d6, d0
 8011e80:	ed8d 6b04 	vstr	d6, [sp, #16]
 8011e84:	ee27 0b00 	vmul.f64	d0, d7, d0
 8011e88:	b006      	add	sp, #24
 8011e8a:	ecbd 8b0a 	vpop	{d8-d12}
 8011e8e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011e92:	f000 b9cc 	b.w	801222e <__math_check_uflow>
 8011e96:	ec43 2b10 	vmov	d0, r2, r3
 8011e9a:	eea7 0b00 	vfma.f64	d0, d7, d0
 8011e9e:	e628      	b.n	8011af2 <pow+0xd2>
 8011ea0:	ed9f 0b05 	vldr	d0, [pc, #20]	; 8011eb8 <pow+0x498>
 8011ea4:	e625      	b.n	8011af2 <pow+0xd2>
 8011ea6:	bf00      	nop
 8011ea8:	00000000 	.word	0x00000000
 8011eac:	7f000000 	.word	0x7f000000
 8011eb0:	00000000 	.word	0x00000000
 8011eb4:	00100000 	.word	0x00100000
	...
 8011ec0:	08013850 	.word	0x08013850

08011ec4 <asin>:
 8011ec4:	b508      	push	{r3, lr}
 8011ec6:	ed2d 8b04 	vpush	{d8-d9}
 8011eca:	eeb0 8b40 	vmov.f64	d8, d0
 8011ece:	f000 f847 	bl	8011f60 <__ieee754_asin>
 8011ed2:	eeb4 8b48 	vcmp.f64	d8, d8
 8011ed6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011eda:	eeb0 9b40 	vmov.f64	d9, d0
 8011ede:	d615      	bvs.n	8011f0c <asin+0x48>
 8011ee0:	eeb0 0b48 	vmov.f64	d0, d8
 8011ee4:	f000 f9c0 	bl	8012268 <fabs>
 8011ee8:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 8011eec:	eeb4 0bc7 	vcmpe.f64	d0, d7
 8011ef0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011ef4:	dd0a      	ble.n	8011f0c <asin+0x48>
 8011ef6:	f7fc fec7 	bl	800ec88 <__errno>
 8011efa:	ecbd 8b04 	vpop	{d8-d9}
 8011efe:	2321      	movs	r3, #33	; 0x21
 8011f00:	6003      	str	r3, [r0, #0]
 8011f02:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8011f06:	4804      	ldr	r0, [pc, #16]	; (8011f18 <asin+0x54>)
 8011f08:	f7fe bdc6 	b.w	8010a98 <nan>
 8011f0c:	eeb0 0b49 	vmov.f64	d0, d9
 8011f10:	ecbd 8b04 	vpop	{d8-d9}
 8011f14:	bd08      	pop	{r3, pc}
 8011f16:	bf00      	nop
 8011f18:	0801266f 	.word	0x0801266f
 8011f1c:	00000000 	.word	0x00000000

08011f20 <sqrt>:
 8011f20:	b508      	push	{r3, lr}
 8011f22:	ed2d 8b04 	vpush	{d8-d9}
 8011f26:	eeb0 8b40 	vmov.f64	d8, d0
 8011f2a:	f000 f927 	bl	801217c <__ieee754_sqrt>
 8011f2e:	eeb4 8b48 	vcmp.f64	d8, d8
 8011f32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011f36:	d60c      	bvs.n	8011f52 <sqrt+0x32>
 8011f38:	ed9f 9b07 	vldr	d9, [pc, #28]	; 8011f58 <sqrt+0x38>
 8011f3c:	eeb4 8bc9 	vcmpe.f64	d8, d9
 8011f40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011f44:	d505      	bpl.n	8011f52 <sqrt+0x32>
 8011f46:	f7fc fe9f 	bl	800ec88 <__errno>
 8011f4a:	ee89 0b09 	vdiv.f64	d0, d9, d9
 8011f4e:	2321      	movs	r3, #33	; 0x21
 8011f50:	6003      	str	r3, [r0, #0]
 8011f52:	ecbd 8b04 	vpop	{d8-d9}
 8011f56:	bd08      	pop	{r3, pc}
	...

08011f60 <__ieee754_asin>:
 8011f60:	b538      	push	{r3, r4, r5, lr}
 8011f62:	ee10 5a90 	vmov	r5, s1
 8011f66:	4b82      	ldr	r3, [pc, #520]	; (8012170 <__ieee754_asin+0x210>)
 8011f68:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 8011f6c:	429c      	cmp	r4, r3
 8011f6e:	ed2d 8b06 	vpush	{d8-d10}
 8011f72:	dd19      	ble.n	8011fa8 <__ieee754_asin+0x48>
 8011f74:	ee10 3a10 	vmov	r3, s0
 8011f78:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8011f7c:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8011f80:	4323      	orrs	r3, r4
 8011f82:	d10c      	bne.n	8011f9e <__ieee754_asin+0x3e>
 8011f84:	ed9f 7b5c 	vldr	d7, [pc, #368]	; 80120f8 <__ieee754_asin+0x198>
 8011f88:	ed9f 6b5d 	vldr	d6, [pc, #372]	; 8012100 <__ieee754_asin+0x1a0>
 8011f8c:	ee20 7b07 	vmul.f64	d7, d0, d7
 8011f90:	eea0 7b06 	vfma.f64	d7, d0, d6
 8011f94:	eeb0 0b47 	vmov.f64	d0, d7
 8011f98:	ecbd 8b06 	vpop	{d8-d10}
 8011f9c:	bd38      	pop	{r3, r4, r5, pc}
 8011f9e:	ee30 7b40 	vsub.f64	d7, d0, d0
 8011fa2:	ee87 0b07 	vdiv.f64	d0, d7, d7
 8011fa6:	e7f7      	b.n	8011f98 <__ieee754_asin+0x38>
 8011fa8:	4b72      	ldr	r3, [pc, #456]	; (8012174 <__ieee754_asin+0x214>)
 8011faa:	eeb7 9b00 	vmov.f64	d9, #112	; 0x3f800000  1.0
 8011fae:	429c      	cmp	r4, r3
 8011fb0:	dc0b      	bgt.n	8011fca <__ieee754_asin+0x6a>
 8011fb2:	f1b4 5f79 	cmp.w	r4, #1044381696	; 0x3e400000
 8011fb6:	da52      	bge.n	801205e <__ieee754_asin+0xfe>
 8011fb8:	ed9f 7b53 	vldr	d7, [pc, #332]	; 8012108 <__ieee754_asin+0x1a8>
 8011fbc:	ee30 7b07 	vadd.f64	d7, d0, d7
 8011fc0:	eeb4 7bc9 	vcmpe.f64	d7, d9
 8011fc4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011fc8:	dce6      	bgt.n	8011f98 <__ieee754_asin+0x38>
 8011fca:	eeb6 8b00 	vmov.f64	d8, #96	; 0x3f000000  0.5
 8011fce:	f000 f94b 	bl	8012268 <fabs>
 8011fd2:	ed9f 7b4f 	vldr	d7, [pc, #316]	; 8012110 <__ieee754_asin+0x1b0>
 8011fd6:	ee39 0b40 	vsub.f64	d0, d9, d0
 8011fda:	ee20 8b08 	vmul.f64	d8, d0, d8
 8011fde:	ed9f 6b4e 	vldr	d6, [pc, #312]	; 8012118 <__ieee754_asin+0x1b8>
 8011fe2:	eeb0 0b48 	vmov.f64	d0, d8
 8011fe6:	eea8 6b07 	vfma.f64	d6, d8, d7
 8011fea:	ed9f 7b4d 	vldr	d7, [pc, #308]	; 8012120 <__ieee754_asin+0x1c0>
 8011fee:	eea6 7b08 	vfma.f64	d7, d6, d8
 8011ff2:	ed9f 6b4d 	vldr	d6, [pc, #308]	; 8012128 <__ieee754_asin+0x1c8>
 8011ff6:	ed9f ab4e 	vldr	d10, [pc, #312]	; 8012130 <__ieee754_asin+0x1d0>
 8011ffa:	eea7 6b08 	vfma.f64	d6, d7, d8
 8011ffe:	ed9f 7b4e 	vldr	d7, [pc, #312]	; 8012138 <__ieee754_asin+0x1d8>
 8012002:	eea6 7b08 	vfma.f64	d7, d6, d8
 8012006:	ed9f 6b4e 	vldr	d6, [pc, #312]	; 8012140 <__ieee754_asin+0x1e0>
 801200a:	eea7 ab08 	vfma.f64	d10, d7, d8
 801200e:	ee2a ab08 	vmul.f64	d10, d10, d8
 8012012:	ed9f 7b4d 	vldr	d7, [pc, #308]	; 8012148 <__ieee754_asin+0x1e8>
 8012016:	eea8 7b06 	vfma.f64	d7, d8, d6
 801201a:	ed9f 6b4d 	vldr	d6, [pc, #308]	; 8012150 <__ieee754_asin+0x1f0>
 801201e:	eea7 6b08 	vfma.f64	d6, d7, d8
 8012022:	ed9f 7b4d 	vldr	d7, [pc, #308]	; 8012158 <__ieee754_asin+0x1f8>
 8012026:	eea6 7b08 	vfma.f64	d7, d6, d8
 801202a:	eea7 9b08 	vfma.f64	d9, d7, d8
 801202e:	f000 f8a5 	bl	801217c <__ieee754_sqrt>
 8012032:	ee8a 5b09 	vdiv.f64	d5, d10, d9
 8012036:	eeb0 4b00 	vmov.f64	d4, #0	; 0x40000000  2.0
 801203a:	4b4f      	ldr	r3, [pc, #316]	; (8012178 <__ieee754_asin+0x218>)
 801203c:	429c      	cmp	r4, r3
 801203e:	dd3d      	ble.n	80120bc <__ieee754_asin+0x15c>
 8012040:	eea0 0b05 	vfma.f64	d0, d0, d5
 8012044:	ed9f 7b46 	vldr	d7, [pc, #280]	; 8012160 <__ieee754_asin+0x200>
 8012048:	eea0 7b04 	vfma.f64	d7, d0, d4
 801204c:	ed9f 0b2c 	vldr	d0, [pc, #176]	; 8012100 <__ieee754_asin+0x1a0>
 8012050:	ee30 0b47 	vsub.f64	d0, d0, d7
 8012054:	2d00      	cmp	r5, #0
 8012056:	bfd8      	it	le
 8012058:	eeb1 0b40 	vnegle.f64	d0, d0
 801205c:	e79c      	b.n	8011f98 <__ieee754_asin+0x38>
 801205e:	ed9f 5b2c 	vldr	d5, [pc, #176]	; 8012110 <__ieee754_asin+0x1b0>
 8012062:	ee20 7b00 	vmul.f64	d7, d0, d0
 8012066:	ed9f 6b2c 	vldr	d6, [pc, #176]	; 8012118 <__ieee754_asin+0x1b8>
 801206a:	eea7 6b05 	vfma.f64	d6, d7, d5
 801206e:	ed9f 5b2c 	vldr	d5, [pc, #176]	; 8012120 <__ieee754_asin+0x1c0>
 8012072:	eea6 5b07 	vfma.f64	d5, d6, d7
 8012076:	ed9f 6b2c 	vldr	d6, [pc, #176]	; 8012128 <__ieee754_asin+0x1c8>
 801207a:	eea5 6b07 	vfma.f64	d6, d5, d7
 801207e:	ed9f 5b2e 	vldr	d5, [pc, #184]	; 8012138 <__ieee754_asin+0x1d8>
 8012082:	eea6 5b07 	vfma.f64	d5, d6, d7
 8012086:	ed9f 6b2a 	vldr	d6, [pc, #168]	; 8012130 <__ieee754_asin+0x1d0>
 801208a:	ed9f 4b2d 	vldr	d4, [pc, #180]	; 8012140 <__ieee754_asin+0x1e0>
 801208e:	eea5 6b07 	vfma.f64	d6, d5, d7
 8012092:	ee26 6b07 	vmul.f64	d6, d6, d7
 8012096:	ed9f 5b2c 	vldr	d5, [pc, #176]	; 8012148 <__ieee754_asin+0x1e8>
 801209a:	eea7 5b04 	vfma.f64	d5, d7, d4
 801209e:	ed9f 4b2c 	vldr	d4, [pc, #176]	; 8012150 <__ieee754_asin+0x1f0>
 80120a2:	eea5 4b07 	vfma.f64	d4, d5, d7
 80120a6:	ed9f 5b2c 	vldr	d5, [pc, #176]	; 8012158 <__ieee754_asin+0x1f8>
 80120aa:	eea4 5b07 	vfma.f64	d5, d4, d7
 80120ae:	eea5 9b07 	vfma.f64	d9, d5, d7
 80120b2:	ee86 7b09 	vdiv.f64	d7, d6, d9
 80120b6:	eea0 0b07 	vfma.f64	d0, d0, d7
 80120ba:	e76d      	b.n	8011f98 <__ieee754_asin+0x38>
 80120bc:	ec53 2b10 	vmov	r2, r3, d0
 80120c0:	2200      	movs	r2, #0
 80120c2:	ec43 2b16 	vmov	d6, r2, r3
 80120c6:	ee30 7b06 	vadd.f64	d7, d0, d6
 80120ca:	eea6 8b46 	vfms.f64	d8, d6, d6
 80120ce:	ee88 3b07 	vdiv.f64	d3, d8, d7
 80120d2:	ed9f 7b09 	vldr	d7, [pc, #36]	; 80120f8 <__ieee754_asin+0x198>
 80120d6:	ee30 0b00 	vadd.f64	d0, d0, d0
 80120da:	eea3 7b44 	vfms.f64	d7, d3, d4
 80120de:	ee90 7b05 	vfnms.f64	d7, d0, d5
 80120e2:	ed9f 5b21 	vldr	d5, [pc, #132]	; 8012168 <__ieee754_asin+0x208>
 80120e6:	eeb0 0b45 	vmov.f64	d0, d5
 80120ea:	eea6 0b44 	vfms.f64	d0, d6, d4
 80120ee:	ee37 0b40 	vsub.f64	d0, d7, d0
 80120f2:	ee35 0b40 	vsub.f64	d0, d5, d0
 80120f6:	e7ad      	b.n	8012054 <__ieee754_asin+0xf4>
 80120f8:	33145c07 	.word	0x33145c07
 80120fc:	3c91a626 	.word	0x3c91a626
 8012100:	54442d18 	.word	0x54442d18
 8012104:	3ff921fb 	.word	0x3ff921fb
 8012108:	8800759c 	.word	0x8800759c
 801210c:	7e37e43c 	.word	0x7e37e43c
 8012110:	0dfdf709 	.word	0x0dfdf709
 8012114:	3f023de1 	.word	0x3f023de1
 8012118:	7501b288 	.word	0x7501b288
 801211c:	3f49efe0 	.word	0x3f49efe0
 8012120:	b5688f3b 	.word	0xb5688f3b
 8012124:	bfa48228 	.word	0xbfa48228
 8012128:	0e884455 	.word	0x0e884455
 801212c:	3fc9c155 	.word	0x3fc9c155
 8012130:	55555555 	.word	0x55555555
 8012134:	3fc55555 	.word	0x3fc55555
 8012138:	03eb6f7d 	.word	0x03eb6f7d
 801213c:	bfd4d612 	.word	0xbfd4d612
 8012140:	b12e9282 	.word	0xb12e9282
 8012144:	3fb3b8c5 	.word	0x3fb3b8c5
 8012148:	1b8d0159 	.word	0x1b8d0159
 801214c:	bfe6066c 	.word	0xbfe6066c
 8012150:	9c598ac8 	.word	0x9c598ac8
 8012154:	40002ae5 	.word	0x40002ae5
 8012158:	1c8a2d4b 	.word	0x1c8a2d4b
 801215c:	c0033a27 	.word	0xc0033a27
 8012160:	33145c07 	.word	0x33145c07
 8012164:	bc91a626 	.word	0xbc91a626
 8012168:	54442d18 	.word	0x54442d18
 801216c:	3fe921fb 	.word	0x3fe921fb
 8012170:	3fefffff 	.word	0x3fefffff
 8012174:	3fdfffff 	.word	0x3fdfffff
 8012178:	3fef3332 	.word	0x3fef3332

0801217c <__ieee754_sqrt>:
 801217c:	eeb1 0bc0 	vsqrt.f64	d0, d0
 8012180:	4770      	bx	lr

08012182 <with_errno>:
 8012182:	b513      	push	{r0, r1, r4, lr}
 8012184:	4604      	mov	r4, r0
 8012186:	ed8d 0b00 	vstr	d0, [sp]
 801218a:	f7fc fd7d 	bl	800ec88 <__errno>
 801218e:	ed9d 0b00 	vldr	d0, [sp]
 8012192:	6004      	str	r4, [r0, #0]
 8012194:	b002      	add	sp, #8
 8012196:	bd10      	pop	{r4, pc}

08012198 <xflow>:
 8012198:	b082      	sub	sp, #8
 801219a:	b158      	cbz	r0, 80121b4 <xflow+0x1c>
 801219c:	eeb1 7b40 	vneg.f64	d7, d0
 80121a0:	ed8d 7b00 	vstr	d7, [sp]
 80121a4:	ed9d 7b00 	vldr	d7, [sp]
 80121a8:	2022      	movs	r0, #34	; 0x22
 80121aa:	ee20 0b07 	vmul.f64	d0, d0, d7
 80121ae:	b002      	add	sp, #8
 80121b0:	f7ff bfe7 	b.w	8012182 <with_errno>
 80121b4:	eeb0 7b40 	vmov.f64	d7, d0
 80121b8:	e7f2      	b.n	80121a0 <xflow+0x8>
 80121ba:	0000      	movs	r0, r0
 80121bc:	0000      	movs	r0, r0
	...

080121c0 <__math_uflow>:
 80121c0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 80121c8 <__math_uflow+0x8>
 80121c4:	f7ff bfe8 	b.w	8012198 <xflow>
 80121c8:	00000000 	.word	0x00000000
 80121cc:	10000000 	.word	0x10000000

080121d0 <__math_oflow>:
 80121d0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 80121d8 <__math_oflow+0x8>
 80121d4:	f7ff bfe0 	b.w	8012198 <xflow>
 80121d8:	00000000 	.word	0x00000000
 80121dc:	70000000 	.word	0x70000000

080121e0 <__math_divzero>:
 80121e0:	b082      	sub	sp, #8
 80121e2:	2800      	cmp	r0, #0
 80121e4:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 80121e8:	eebf 7b00 	vmov.f64	d7, #240	; 0xbf800000 -1.0
 80121ec:	fe06 7b07 	vseleq.f64	d7, d6, d7
 80121f0:	ed8d 7b00 	vstr	d7, [sp]
 80121f4:	ed9d 0b00 	vldr	d0, [sp]
 80121f8:	ed9f 7b03 	vldr	d7, [pc, #12]	; 8012208 <__math_divzero+0x28>
 80121fc:	2022      	movs	r0, #34	; 0x22
 80121fe:	ee80 0b07 	vdiv.f64	d0, d0, d7
 8012202:	b002      	add	sp, #8
 8012204:	f7ff bfbd 	b.w	8012182 <with_errno>
	...

08012210 <__math_invalid>:
 8012210:	eeb0 7b40 	vmov.f64	d7, d0
 8012214:	eeb4 7b47 	vcmp.f64	d7, d7
 8012218:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801221c:	ee30 6b40 	vsub.f64	d6, d0, d0
 8012220:	ee86 0b06 	vdiv.f64	d0, d6, d6
 8012224:	d602      	bvs.n	801222c <__math_invalid+0x1c>
 8012226:	2021      	movs	r0, #33	; 0x21
 8012228:	f7ff bfab 	b.w	8012182 <with_errno>
 801222c:	4770      	bx	lr

0801222e <__math_check_uflow>:
 801222e:	eeb5 0b40 	vcmp.f64	d0, #0.0
 8012232:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012236:	d102      	bne.n	801223e <__math_check_uflow+0x10>
 8012238:	2022      	movs	r0, #34	; 0x22
 801223a:	f7ff bfa2 	b.w	8012182 <with_errno>
 801223e:	4770      	bx	lr

08012240 <__math_check_oflow>:
 8012240:	ed9f 6b07 	vldr	d6, [pc, #28]	; 8012260 <__math_check_oflow+0x20>
 8012244:	eeb0 7bc0 	vabs.f64	d7, d0
 8012248:	eeb4 7b46 	vcmp.f64	d7, d6
 801224c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012250:	dd02      	ble.n	8012258 <__math_check_oflow+0x18>
 8012252:	2022      	movs	r0, #34	; 0x22
 8012254:	f7ff bf95 	b.w	8012182 <with_errno>
 8012258:	4770      	bx	lr
 801225a:	bf00      	nop
 801225c:	f3af 8000 	nop.w
 8012260:	ffffffff 	.word	0xffffffff
 8012264:	7fefffff 	.word	0x7fefffff

08012268 <fabs>:
 8012268:	ec51 0b10 	vmov	r0, r1, d0
 801226c:	ee10 2a10 	vmov	r2, s0
 8012270:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8012274:	ec43 2b10 	vmov	d0, r2, r3
 8012278:	4770      	bx	lr
	...

0801227c <_init>:
 801227c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801227e:	bf00      	nop
 8012280:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012282:	bc08      	pop	{r3}
 8012284:	469e      	mov	lr, r3
 8012286:	4770      	bx	lr

08012288 <_fini>:
 8012288:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801228a:	bf00      	nop
 801228c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801228e:	bc08      	pop	{r3}
 8012290:	469e      	mov	lr, r3
 8012292:	4770      	bx	lr
