
delta.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00011f0c  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001db0  080121b0  080121b0  000221b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08013f60  08013f60  0003025c  2**0
                  CONTENTS
  4 .ARM          00000008  08013f60  08013f60  00023f60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08013f68  08013f68  0003025c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08013f68  08013f68  00023f68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08013f6c  08013f6c  00023f6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000025c  24000000  08013f70  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000844  24000260  080141cc  00030260  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  24000aa4  080141cc  00030aa4  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0003025c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001de04  00000000  00000000  0003028a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000036c6  00000000  00000000  0004e08e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000012d8  00000000  00000000  00051758  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001160  00000000  00000000  00052a30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00005a55  00000000  00000000  00053b90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001d609  00000000  00000000  000595e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00165ed0  00000000  00000000  00076bee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001dcabe  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000062a8  00000000  00000000  001dcb10  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000260 	.word	0x24000260
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08012194 	.word	0x08012194

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000264 	.word	0x24000264
 80002dc:	08012194 	.word	0x08012194

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <strlen>:
 8000380:	4603      	mov	r3, r0
 8000382:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000386:	2a00      	cmp	r2, #0
 8000388:	d1fb      	bne.n	8000382 <strlen+0x2>
 800038a:	1a18      	subs	r0, r3, r0
 800038c:	3801      	subs	r0, #1
 800038e:	4770      	bx	lr

08000390 <__aeabi_drsub>:
 8000390:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000394:	e002      	b.n	800039c <__adddf3>
 8000396:	bf00      	nop

08000398 <__aeabi_dsub>:
 8000398:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800039c <__adddf3>:
 800039c:	b530      	push	{r4, r5, lr}
 800039e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003a6:	ea94 0f05 	teq	r4, r5
 80003aa:	bf08      	it	eq
 80003ac:	ea90 0f02 	teqeq	r0, r2
 80003b0:	bf1f      	itttt	ne
 80003b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003c2:	f000 80e2 	beq.w	800058a <__adddf3+0x1ee>
 80003c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003ce:	bfb8      	it	lt
 80003d0:	426d      	neglt	r5, r5
 80003d2:	dd0c      	ble.n	80003ee <__adddf3+0x52>
 80003d4:	442c      	add	r4, r5
 80003d6:	ea80 0202 	eor.w	r2, r0, r2
 80003da:	ea81 0303 	eor.w	r3, r1, r3
 80003de:	ea82 0000 	eor.w	r0, r2, r0
 80003e2:	ea83 0101 	eor.w	r1, r3, r1
 80003e6:	ea80 0202 	eor.w	r2, r0, r2
 80003ea:	ea81 0303 	eor.w	r3, r1, r3
 80003ee:	2d36      	cmp	r5, #54	; 0x36
 80003f0:	bf88      	it	hi
 80003f2:	bd30      	pophi	{r4, r5, pc}
 80003f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80003f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80003fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000400:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000404:	d002      	beq.n	800040c <__adddf3+0x70>
 8000406:	4240      	negs	r0, r0
 8000408:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800040c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000410:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000414:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000418:	d002      	beq.n	8000420 <__adddf3+0x84>
 800041a:	4252      	negs	r2, r2
 800041c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000420:	ea94 0f05 	teq	r4, r5
 8000424:	f000 80a7 	beq.w	8000576 <__adddf3+0x1da>
 8000428:	f1a4 0401 	sub.w	r4, r4, #1
 800042c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000430:	db0d      	blt.n	800044e <__adddf3+0xb2>
 8000432:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000436:	fa22 f205 	lsr.w	r2, r2, r5
 800043a:	1880      	adds	r0, r0, r2
 800043c:	f141 0100 	adc.w	r1, r1, #0
 8000440:	fa03 f20e 	lsl.w	r2, r3, lr
 8000444:	1880      	adds	r0, r0, r2
 8000446:	fa43 f305 	asr.w	r3, r3, r5
 800044a:	4159      	adcs	r1, r3
 800044c:	e00e      	b.n	800046c <__adddf3+0xd0>
 800044e:	f1a5 0520 	sub.w	r5, r5, #32
 8000452:	f10e 0e20 	add.w	lr, lr, #32
 8000456:	2a01      	cmp	r2, #1
 8000458:	fa03 fc0e 	lsl.w	ip, r3, lr
 800045c:	bf28      	it	cs
 800045e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000462:	fa43 f305 	asr.w	r3, r3, r5
 8000466:	18c0      	adds	r0, r0, r3
 8000468:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800046c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000470:	d507      	bpl.n	8000482 <__adddf3+0xe6>
 8000472:	f04f 0e00 	mov.w	lr, #0
 8000476:	f1dc 0c00 	rsbs	ip, ip, #0
 800047a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800047e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000482:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000486:	d31b      	bcc.n	80004c0 <__adddf3+0x124>
 8000488:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800048c:	d30c      	bcc.n	80004a8 <__adddf3+0x10c>
 800048e:	0849      	lsrs	r1, r1, #1
 8000490:	ea5f 0030 	movs.w	r0, r0, rrx
 8000494:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000498:	f104 0401 	add.w	r4, r4, #1
 800049c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80004a4:	f080 809a 	bcs.w	80005dc <__adddf3+0x240>
 80004a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80004ac:	bf08      	it	eq
 80004ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004b2:	f150 0000 	adcs.w	r0, r0, #0
 80004b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004ba:	ea41 0105 	orr.w	r1, r1, r5
 80004be:	bd30      	pop	{r4, r5, pc}
 80004c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004c4:	4140      	adcs	r0, r0
 80004c6:	eb41 0101 	adc.w	r1, r1, r1
 80004ca:	3c01      	subs	r4, #1
 80004cc:	bf28      	it	cs
 80004ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80004d2:	d2e9      	bcs.n	80004a8 <__adddf3+0x10c>
 80004d4:	f091 0f00 	teq	r1, #0
 80004d8:	bf04      	itt	eq
 80004da:	4601      	moveq	r1, r0
 80004dc:	2000      	moveq	r0, #0
 80004de:	fab1 f381 	clz	r3, r1
 80004e2:	bf08      	it	eq
 80004e4:	3320      	addeq	r3, #32
 80004e6:	f1a3 030b 	sub.w	r3, r3, #11
 80004ea:	f1b3 0220 	subs.w	r2, r3, #32
 80004ee:	da0c      	bge.n	800050a <__adddf3+0x16e>
 80004f0:	320c      	adds	r2, #12
 80004f2:	dd08      	ble.n	8000506 <__adddf3+0x16a>
 80004f4:	f102 0c14 	add.w	ip, r2, #20
 80004f8:	f1c2 020c 	rsb	r2, r2, #12
 80004fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000500:	fa21 f102 	lsr.w	r1, r1, r2
 8000504:	e00c      	b.n	8000520 <__adddf3+0x184>
 8000506:	f102 0214 	add.w	r2, r2, #20
 800050a:	bfd8      	it	le
 800050c:	f1c2 0c20 	rsble	ip, r2, #32
 8000510:	fa01 f102 	lsl.w	r1, r1, r2
 8000514:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000518:	bfdc      	itt	le
 800051a:	ea41 010c 	orrle.w	r1, r1, ip
 800051e:	4090      	lslle	r0, r2
 8000520:	1ae4      	subs	r4, r4, r3
 8000522:	bfa2      	ittt	ge
 8000524:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000528:	4329      	orrge	r1, r5
 800052a:	bd30      	popge	{r4, r5, pc}
 800052c:	ea6f 0404 	mvn.w	r4, r4
 8000530:	3c1f      	subs	r4, #31
 8000532:	da1c      	bge.n	800056e <__adddf3+0x1d2>
 8000534:	340c      	adds	r4, #12
 8000536:	dc0e      	bgt.n	8000556 <__adddf3+0x1ba>
 8000538:	f104 0414 	add.w	r4, r4, #20
 800053c:	f1c4 0220 	rsb	r2, r4, #32
 8000540:	fa20 f004 	lsr.w	r0, r0, r4
 8000544:	fa01 f302 	lsl.w	r3, r1, r2
 8000548:	ea40 0003 	orr.w	r0, r0, r3
 800054c:	fa21 f304 	lsr.w	r3, r1, r4
 8000550:	ea45 0103 	orr.w	r1, r5, r3
 8000554:	bd30      	pop	{r4, r5, pc}
 8000556:	f1c4 040c 	rsb	r4, r4, #12
 800055a:	f1c4 0220 	rsb	r2, r4, #32
 800055e:	fa20 f002 	lsr.w	r0, r0, r2
 8000562:	fa01 f304 	lsl.w	r3, r1, r4
 8000566:	ea40 0003 	orr.w	r0, r0, r3
 800056a:	4629      	mov	r1, r5
 800056c:	bd30      	pop	{r4, r5, pc}
 800056e:	fa21 f004 	lsr.w	r0, r1, r4
 8000572:	4629      	mov	r1, r5
 8000574:	bd30      	pop	{r4, r5, pc}
 8000576:	f094 0f00 	teq	r4, #0
 800057a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800057e:	bf06      	itte	eq
 8000580:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000584:	3401      	addeq	r4, #1
 8000586:	3d01      	subne	r5, #1
 8000588:	e74e      	b.n	8000428 <__adddf3+0x8c>
 800058a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800058e:	bf18      	it	ne
 8000590:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000594:	d029      	beq.n	80005ea <__adddf3+0x24e>
 8000596:	ea94 0f05 	teq	r4, r5
 800059a:	bf08      	it	eq
 800059c:	ea90 0f02 	teqeq	r0, r2
 80005a0:	d005      	beq.n	80005ae <__adddf3+0x212>
 80005a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80005a6:	bf04      	itt	eq
 80005a8:	4619      	moveq	r1, r3
 80005aa:	4610      	moveq	r0, r2
 80005ac:	bd30      	pop	{r4, r5, pc}
 80005ae:	ea91 0f03 	teq	r1, r3
 80005b2:	bf1e      	ittt	ne
 80005b4:	2100      	movne	r1, #0
 80005b6:	2000      	movne	r0, #0
 80005b8:	bd30      	popne	{r4, r5, pc}
 80005ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005be:	d105      	bne.n	80005cc <__adddf3+0x230>
 80005c0:	0040      	lsls	r0, r0, #1
 80005c2:	4149      	adcs	r1, r1
 80005c4:	bf28      	it	cs
 80005c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80005ca:	bd30      	pop	{r4, r5, pc}
 80005cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80005d0:	bf3c      	itt	cc
 80005d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80005d6:	bd30      	popcc	{r4, r5, pc}
 80005d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80005e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80005e4:	f04f 0000 	mov.w	r0, #0
 80005e8:	bd30      	pop	{r4, r5, pc}
 80005ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005ee:	bf1a      	itte	ne
 80005f0:	4619      	movne	r1, r3
 80005f2:	4610      	movne	r0, r2
 80005f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80005f8:	bf1c      	itt	ne
 80005fa:	460b      	movne	r3, r1
 80005fc:	4602      	movne	r2, r0
 80005fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000602:	bf06      	itte	eq
 8000604:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000608:	ea91 0f03 	teqeq	r1, r3
 800060c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000610:	bd30      	pop	{r4, r5, pc}
 8000612:	bf00      	nop

08000614 <__aeabi_ui2d>:
 8000614:	f090 0f00 	teq	r0, #0
 8000618:	bf04      	itt	eq
 800061a:	2100      	moveq	r1, #0
 800061c:	4770      	bxeq	lr
 800061e:	b530      	push	{r4, r5, lr}
 8000620:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000624:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000628:	f04f 0500 	mov.w	r5, #0
 800062c:	f04f 0100 	mov.w	r1, #0
 8000630:	e750      	b.n	80004d4 <__adddf3+0x138>
 8000632:	bf00      	nop

08000634 <__aeabi_i2d>:
 8000634:	f090 0f00 	teq	r0, #0
 8000638:	bf04      	itt	eq
 800063a:	2100      	moveq	r1, #0
 800063c:	4770      	bxeq	lr
 800063e:	b530      	push	{r4, r5, lr}
 8000640:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000644:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000648:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800064c:	bf48      	it	mi
 800064e:	4240      	negmi	r0, r0
 8000650:	f04f 0100 	mov.w	r1, #0
 8000654:	e73e      	b.n	80004d4 <__adddf3+0x138>
 8000656:	bf00      	nop

08000658 <__aeabi_f2d>:
 8000658:	0042      	lsls	r2, r0, #1
 800065a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800065e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000662:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000666:	bf1f      	itttt	ne
 8000668:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800066c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000670:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000674:	4770      	bxne	lr
 8000676:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800067a:	bf08      	it	eq
 800067c:	4770      	bxeq	lr
 800067e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000682:	bf04      	itt	eq
 8000684:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000688:	4770      	bxeq	lr
 800068a:	b530      	push	{r4, r5, lr}
 800068c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000690:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000694:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000698:	e71c      	b.n	80004d4 <__adddf3+0x138>
 800069a:	bf00      	nop

0800069c <__aeabi_ul2d>:
 800069c:	ea50 0201 	orrs.w	r2, r0, r1
 80006a0:	bf08      	it	eq
 80006a2:	4770      	bxeq	lr
 80006a4:	b530      	push	{r4, r5, lr}
 80006a6:	f04f 0500 	mov.w	r5, #0
 80006aa:	e00a      	b.n	80006c2 <__aeabi_l2d+0x16>

080006ac <__aeabi_l2d>:
 80006ac:	ea50 0201 	orrs.w	r2, r0, r1
 80006b0:	bf08      	it	eq
 80006b2:	4770      	bxeq	lr
 80006b4:	b530      	push	{r4, r5, lr}
 80006b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80006ba:	d502      	bpl.n	80006c2 <__aeabi_l2d+0x16>
 80006bc:	4240      	negs	r0, r0
 80006be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006ce:	f43f aed8 	beq.w	8000482 <__adddf3+0xe6>
 80006d2:	f04f 0203 	mov.w	r2, #3
 80006d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006da:	bf18      	it	ne
 80006dc:	3203      	addne	r2, #3
 80006de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006e2:	bf18      	it	ne
 80006e4:	3203      	addne	r2, #3
 80006e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80006ea:	f1c2 0320 	rsb	r3, r2, #32
 80006ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80006f2:	fa20 f002 	lsr.w	r0, r0, r2
 80006f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80006fa:	ea40 000e 	orr.w	r0, r0, lr
 80006fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000702:	4414      	add	r4, r2
 8000704:	e6bd      	b.n	8000482 <__adddf3+0xe6>
 8000706:	bf00      	nop

08000708 <__aeabi_uldivmod>:
 8000708:	b953      	cbnz	r3, 8000720 <__aeabi_uldivmod+0x18>
 800070a:	b94a      	cbnz	r2, 8000720 <__aeabi_uldivmod+0x18>
 800070c:	2900      	cmp	r1, #0
 800070e:	bf08      	it	eq
 8000710:	2800      	cmpeq	r0, #0
 8000712:	bf1c      	itt	ne
 8000714:	f04f 31ff 	movne.w	r1, #4294967295
 8000718:	f04f 30ff 	movne.w	r0, #4294967295
 800071c:	f000 b9ac 	b.w	8000a78 <__aeabi_idiv0>
 8000720:	f1ad 0c08 	sub.w	ip, sp, #8
 8000724:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000728:	f000 f83e 	bl	80007a8 <__udivmoddi4>
 800072c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000730:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000734:	b004      	add	sp, #16
 8000736:	4770      	bx	lr

08000738 <__aeabi_d2lz>:
 8000738:	b508      	push	{r3, lr}
 800073a:	4602      	mov	r2, r0
 800073c:	460b      	mov	r3, r1
 800073e:	ec43 2b17 	vmov	d7, r2, r3
 8000742:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8000746:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800074a:	d403      	bmi.n	8000754 <__aeabi_d2lz+0x1c>
 800074c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8000750:	f000 b80a 	b.w	8000768 <__aeabi_d2ulz>
 8000754:	eeb1 7b47 	vneg.f64	d7, d7
 8000758:	ec51 0b17 	vmov	r0, r1, d7
 800075c:	f000 f804 	bl	8000768 <__aeabi_d2ulz>
 8000760:	4240      	negs	r0, r0
 8000762:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000766:	bd08      	pop	{r3, pc}

08000768 <__aeabi_d2ulz>:
 8000768:	ed9f 6b0b 	vldr	d6, [pc, #44]	; 8000798 <__aeabi_d2ulz+0x30>
 800076c:	ec41 0b17 	vmov	d7, r0, r1
 8000770:	ed9f 5b0b 	vldr	d5, [pc, #44]	; 80007a0 <__aeabi_d2ulz+0x38>
 8000774:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000778:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 800077c:	eeb8 4b46 	vcvt.f64.u32	d4, s12
 8000780:	eea4 7b45 	vfms.f64	d7, d4, d5
 8000784:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000788:	ee16 1a10 	vmov	r1, s12
 800078c:	ee17 0a90 	vmov	r0, s15
 8000790:	4770      	bx	lr
 8000792:	bf00      	nop
 8000794:	f3af 8000 	nop.w
 8000798:	00000000 	.word	0x00000000
 800079c:	3df00000 	.word	0x3df00000
 80007a0:	00000000 	.word	0x00000000
 80007a4:	41f00000 	.word	0x41f00000

080007a8 <__udivmoddi4>:
 80007a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80007ac:	9d08      	ldr	r5, [sp, #32]
 80007ae:	4604      	mov	r4, r0
 80007b0:	468e      	mov	lr, r1
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	d14d      	bne.n	8000852 <__udivmoddi4+0xaa>
 80007b6:	428a      	cmp	r2, r1
 80007b8:	4694      	mov	ip, r2
 80007ba:	d969      	bls.n	8000890 <__udivmoddi4+0xe8>
 80007bc:	fab2 f282 	clz	r2, r2
 80007c0:	b152      	cbz	r2, 80007d8 <__udivmoddi4+0x30>
 80007c2:	fa01 f302 	lsl.w	r3, r1, r2
 80007c6:	f1c2 0120 	rsb	r1, r2, #32
 80007ca:	fa20 f101 	lsr.w	r1, r0, r1
 80007ce:	fa0c fc02 	lsl.w	ip, ip, r2
 80007d2:	ea41 0e03 	orr.w	lr, r1, r3
 80007d6:	4094      	lsls	r4, r2
 80007d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80007dc:	0c21      	lsrs	r1, r4, #16
 80007de:	fbbe f6f8 	udiv	r6, lr, r8
 80007e2:	fa1f f78c 	uxth.w	r7, ip
 80007e6:	fb08 e316 	mls	r3, r8, r6, lr
 80007ea:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80007ee:	fb06 f107 	mul.w	r1, r6, r7
 80007f2:	4299      	cmp	r1, r3
 80007f4:	d90a      	bls.n	800080c <__udivmoddi4+0x64>
 80007f6:	eb1c 0303 	adds.w	r3, ip, r3
 80007fa:	f106 30ff 	add.w	r0, r6, #4294967295
 80007fe:	f080 811f 	bcs.w	8000a40 <__udivmoddi4+0x298>
 8000802:	4299      	cmp	r1, r3
 8000804:	f240 811c 	bls.w	8000a40 <__udivmoddi4+0x298>
 8000808:	3e02      	subs	r6, #2
 800080a:	4463      	add	r3, ip
 800080c:	1a5b      	subs	r3, r3, r1
 800080e:	b2a4      	uxth	r4, r4
 8000810:	fbb3 f0f8 	udiv	r0, r3, r8
 8000814:	fb08 3310 	mls	r3, r8, r0, r3
 8000818:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800081c:	fb00 f707 	mul.w	r7, r0, r7
 8000820:	42a7      	cmp	r7, r4
 8000822:	d90a      	bls.n	800083a <__udivmoddi4+0x92>
 8000824:	eb1c 0404 	adds.w	r4, ip, r4
 8000828:	f100 33ff 	add.w	r3, r0, #4294967295
 800082c:	f080 810a 	bcs.w	8000a44 <__udivmoddi4+0x29c>
 8000830:	42a7      	cmp	r7, r4
 8000832:	f240 8107 	bls.w	8000a44 <__udivmoddi4+0x29c>
 8000836:	4464      	add	r4, ip
 8000838:	3802      	subs	r0, #2
 800083a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800083e:	1be4      	subs	r4, r4, r7
 8000840:	2600      	movs	r6, #0
 8000842:	b11d      	cbz	r5, 800084c <__udivmoddi4+0xa4>
 8000844:	40d4      	lsrs	r4, r2
 8000846:	2300      	movs	r3, #0
 8000848:	e9c5 4300 	strd	r4, r3, [r5]
 800084c:	4631      	mov	r1, r6
 800084e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000852:	428b      	cmp	r3, r1
 8000854:	d909      	bls.n	800086a <__udivmoddi4+0xc2>
 8000856:	2d00      	cmp	r5, #0
 8000858:	f000 80ef 	beq.w	8000a3a <__udivmoddi4+0x292>
 800085c:	2600      	movs	r6, #0
 800085e:	e9c5 0100 	strd	r0, r1, [r5]
 8000862:	4630      	mov	r0, r6
 8000864:	4631      	mov	r1, r6
 8000866:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800086a:	fab3 f683 	clz	r6, r3
 800086e:	2e00      	cmp	r6, #0
 8000870:	d14a      	bne.n	8000908 <__udivmoddi4+0x160>
 8000872:	428b      	cmp	r3, r1
 8000874:	d302      	bcc.n	800087c <__udivmoddi4+0xd4>
 8000876:	4282      	cmp	r2, r0
 8000878:	f200 80f9 	bhi.w	8000a6e <__udivmoddi4+0x2c6>
 800087c:	1a84      	subs	r4, r0, r2
 800087e:	eb61 0303 	sbc.w	r3, r1, r3
 8000882:	2001      	movs	r0, #1
 8000884:	469e      	mov	lr, r3
 8000886:	2d00      	cmp	r5, #0
 8000888:	d0e0      	beq.n	800084c <__udivmoddi4+0xa4>
 800088a:	e9c5 4e00 	strd	r4, lr, [r5]
 800088e:	e7dd      	b.n	800084c <__udivmoddi4+0xa4>
 8000890:	b902      	cbnz	r2, 8000894 <__udivmoddi4+0xec>
 8000892:	deff      	udf	#255	; 0xff
 8000894:	fab2 f282 	clz	r2, r2
 8000898:	2a00      	cmp	r2, #0
 800089a:	f040 8092 	bne.w	80009c2 <__udivmoddi4+0x21a>
 800089e:	eba1 010c 	sub.w	r1, r1, ip
 80008a2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80008a6:	fa1f fe8c 	uxth.w	lr, ip
 80008aa:	2601      	movs	r6, #1
 80008ac:	0c20      	lsrs	r0, r4, #16
 80008ae:	fbb1 f3f7 	udiv	r3, r1, r7
 80008b2:	fb07 1113 	mls	r1, r7, r3, r1
 80008b6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80008ba:	fb0e f003 	mul.w	r0, lr, r3
 80008be:	4288      	cmp	r0, r1
 80008c0:	d908      	bls.n	80008d4 <__udivmoddi4+0x12c>
 80008c2:	eb1c 0101 	adds.w	r1, ip, r1
 80008c6:	f103 38ff 	add.w	r8, r3, #4294967295
 80008ca:	d202      	bcs.n	80008d2 <__udivmoddi4+0x12a>
 80008cc:	4288      	cmp	r0, r1
 80008ce:	f200 80cb 	bhi.w	8000a68 <__udivmoddi4+0x2c0>
 80008d2:	4643      	mov	r3, r8
 80008d4:	1a09      	subs	r1, r1, r0
 80008d6:	b2a4      	uxth	r4, r4
 80008d8:	fbb1 f0f7 	udiv	r0, r1, r7
 80008dc:	fb07 1110 	mls	r1, r7, r0, r1
 80008e0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80008e4:	fb0e fe00 	mul.w	lr, lr, r0
 80008e8:	45a6      	cmp	lr, r4
 80008ea:	d908      	bls.n	80008fe <__udivmoddi4+0x156>
 80008ec:	eb1c 0404 	adds.w	r4, ip, r4
 80008f0:	f100 31ff 	add.w	r1, r0, #4294967295
 80008f4:	d202      	bcs.n	80008fc <__udivmoddi4+0x154>
 80008f6:	45a6      	cmp	lr, r4
 80008f8:	f200 80bb 	bhi.w	8000a72 <__udivmoddi4+0x2ca>
 80008fc:	4608      	mov	r0, r1
 80008fe:	eba4 040e 	sub.w	r4, r4, lr
 8000902:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000906:	e79c      	b.n	8000842 <__udivmoddi4+0x9a>
 8000908:	f1c6 0720 	rsb	r7, r6, #32
 800090c:	40b3      	lsls	r3, r6
 800090e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000912:	ea4c 0c03 	orr.w	ip, ip, r3
 8000916:	fa20 f407 	lsr.w	r4, r0, r7
 800091a:	fa01 f306 	lsl.w	r3, r1, r6
 800091e:	431c      	orrs	r4, r3
 8000920:	40f9      	lsrs	r1, r7
 8000922:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000926:	fa00 f306 	lsl.w	r3, r0, r6
 800092a:	fbb1 f8f9 	udiv	r8, r1, r9
 800092e:	0c20      	lsrs	r0, r4, #16
 8000930:	fa1f fe8c 	uxth.w	lr, ip
 8000934:	fb09 1118 	mls	r1, r9, r8, r1
 8000938:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800093c:	fb08 f00e 	mul.w	r0, r8, lr
 8000940:	4288      	cmp	r0, r1
 8000942:	fa02 f206 	lsl.w	r2, r2, r6
 8000946:	d90b      	bls.n	8000960 <__udivmoddi4+0x1b8>
 8000948:	eb1c 0101 	adds.w	r1, ip, r1
 800094c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000950:	f080 8088 	bcs.w	8000a64 <__udivmoddi4+0x2bc>
 8000954:	4288      	cmp	r0, r1
 8000956:	f240 8085 	bls.w	8000a64 <__udivmoddi4+0x2bc>
 800095a:	f1a8 0802 	sub.w	r8, r8, #2
 800095e:	4461      	add	r1, ip
 8000960:	1a09      	subs	r1, r1, r0
 8000962:	b2a4      	uxth	r4, r4
 8000964:	fbb1 f0f9 	udiv	r0, r1, r9
 8000968:	fb09 1110 	mls	r1, r9, r0, r1
 800096c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000970:	fb00 fe0e 	mul.w	lr, r0, lr
 8000974:	458e      	cmp	lr, r1
 8000976:	d908      	bls.n	800098a <__udivmoddi4+0x1e2>
 8000978:	eb1c 0101 	adds.w	r1, ip, r1
 800097c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000980:	d26c      	bcs.n	8000a5c <__udivmoddi4+0x2b4>
 8000982:	458e      	cmp	lr, r1
 8000984:	d96a      	bls.n	8000a5c <__udivmoddi4+0x2b4>
 8000986:	3802      	subs	r0, #2
 8000988:	4461      	add	r1, ip
 800098a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800098e:	fba0 9402 	umull	r9, r4, r0, r2
 8000992:	eba1 010e 	sub.w	r1, r1, lr
 8000996:	42a1      	cmp	r1, r4
 8000998:	46c8      	mov	r8, r9
 800099a:	46a6      	mov	lr, r4
 800099c:	d356      	bcc.n	8000a4c <__udivmoddi4+0x2a4>
 800099e:	d053      	beq.n	8000a48 <__udivmoddi4+0x2a0>
 80009a0:	b15d      	cbz	r5, 80009ba <__udivmoddi4+0x212>
 80009a2:	ebb3 0208 	subs.w	r2, r3, r8
 80009a6:	eb61 010e 	sbc.w	r1, r1, lr
 80009aa:	fa01 f707 	lsl.w	r7, r1, r7
 80009ae:	fa22 f306 	lsr.w	r3, r2, r6
 80009b2:	40f1      	lsrs	r1, r6
 80009b4:	431f      	orrs	r7, r3
 80009b6:	e9c5 7100 	strd	r7, r1, [r5]
 80009ba:	2600      	movs	r6, #0
 80009bc:	4631      	mov	r1, r6
 80009be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80009c2:	f1c2 0320 	rsb	r3, r2, #32
 80009c6:	40d8      	lsrs	r0, r3
 80009c8:	fa0c fc02 	lsl.w	ip, ip, r2
 80009cc:	fa21 f303 	lsr.w	r3, r1, r3
 80009d0:	4091      	lsls	r1, r2
 80009d2:	4301      	orrs	r1, r0
 80009d4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80009d8:	fa1f fe8c 	uxth.w	lr, ip
 80009dc:	fbb3 f0f7 	udiv	r0, r3, r7
 80009e0:	fb07 3610 	mls	r6, r7, r0, r3
 80009e4:	0c0b      	lsrs	r3, r1, #16
 80009e6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80009ea:	fb00 f60e 	mul.w	r6, r0, lr
 80009ee:	429e      	cmp	r6, r3
 80009f0:	fa04 f402 	lsl.w	r4, r4, r2
 80009f4:	d908      	bls.n	8000a08 <__udivmoddi4+0x260>
 80009f6:	eb1c 0303 	adds.w	r3, ip, r3
 80009fa:	f100 38ff 	add.w	r8, r0, #4294967295
 80009fe:	d22f      	bcs.n	8000a60 <__udivmoddi4+0x2b8>
 8000a00:	429e      	cmp	r6, r3
 8000a02:	d92d      	bls.n	8000a60 <__udivmoddi4+0x2b8>
 8000a04:	3802      	subs	r0, #2
 8000a06:	4463      	add	r3, ip
 8000a08:	1b9b      	subs	r3, r3, r6
 8000a0a:	b289      	uxth	r1, r1
 8000a0c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000a10:	fb07 3316 	mls	r3, r7, r6, r3
 8000a14:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000a18:	fb06 f30e 	mul.w	r3, r6, lr
 8000a1c:	428b      	cmp	r3, r1
 8000a1e:	d908      	bls.n	8000a32 <__udivmoddi4+0x28a>
 8000a20:	eb1c 0101 	adds.w	r1, ip, r1
 8000a24:	f106 38ff 	add.w	r8, r6, #4294967295
 8000a28:	d216      	bcs.n	8000a58 <__udivmoddi4+0x2b0>
 8000a2a:	428b      	cmp	r3, r1
 8000a2c:	d914      	bls.n	8000a58 <__udivmoddi4+0x2b0>
 8000a2e:	3e02      	subs	r6, #2
 8000a30:	4461      	add	r1, ip
 8000a32:	1ac9      	subs	r1, r1, r3
 8000a34:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000a38:	e738      	b.n	80008ac <__udivmoddi4+0x104>
 8000a3a:	462e      	mov	r6, r5
 8000a3c:	4628      	mov	r0, r5
 8000a3e:	e705      	b.n	800084c <__udivmoddi4+0xa4>
 8000a40:	4606      	mov	r6, r0
 8000a42:	e6e3      	b.n	800080c <__udivmoddi4+0x64>
 8000a44:	4618      	mov	r0, r3
 8000a46:	e6f8      	b.n	800083a <__udivmoddi4+0x92>
 8000a48:	454b      	cmp	r3, r9
 8000a4a:	d2a9      	bcs.n	80009a0 <__udivmoddi4+0x1f8>
 8000a4c:	ebb9 0802 	subs.w	r8, r9, r2
 8000a50:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000a54:	3801      	subs	r0, #1
 8000a56:	e7a3      	b.n	80009a0 <__udivmoddi4+0x1f8>
 8000a58:	4646      	mov	r6, r8
 8000a5a:	e7ea      	b.n	8000a32 <__udivmoddi4+0x28a>
 8000a5c:	4620      	mov	r0, r4
 8000a5e:	e794      	b.n	800098a <__udivmoddi4+0x1e2>
 8000a60:	4640      	mov	r0, r8
 8000a62:	e7d1      	b.n	8000a08 <__udivmoddi4+0x260>
 8000a64:	46d0      	mov	r8, sl
 8000a66:	e77b      	b.n	8000960 <__udivmoddi4+0x1b8>
 8000a68:	3b02      	subs	r3, #2
 8000a6a:	4461      	add	r1, ip
 8000a6c:	e732      	b.n	80008d4 <__udivmoddi4+0x12c>
 8000a6e:	4630      	mov	r0, r6
 8000a70:	e709      	b.n	8000886 <__udivmoddi4+0xde>
 8000a72:	4464      	add	r4, ip
 8000a74:	3802      	subs	r0, #2
 8000a76:	e742      	b.n	80008fe <__udivmoddi4+0x156>

08000a78 <__aeabi_idiv0>:
 8000a78:	4770      	bx	lr
 8000a7a:	bf00      	nop

08000a7c <MX_GPIO_Init>:
     PH1-OSC_OUT (PH1)   ------> RCC_OSC_OUT
     PA13 (JTMS/SWDIO)   ------> DEBUG_JTMS-SWDIO
     PA14 (JTCK/SWCLK)   ------> DEBUG_JTCK-SWCLK
*/
void MX_GPIO_Init(void)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	b08e      	sub	sp, #56	; 0x38
 8000a80:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a82:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a86:	2200      	movs	r2, #0
 8000a88:	601a      	str	r2, [r3, #0]
 8000a8a:	605a      	str	r2, [r3, #4]
 8000a8c:	609a      	str	r2, [r3, #8]
 8000a8e:	60da      	str	r2, [r3, #12]
 8000a90:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000a92:	4b96      	ldr	r3, [pc, #600]	; (8000cec <MX_GPIO_Init+0x270>)
 8000a94:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a98:	4a94      	ldr	r2, [pc, #592]	; (8000cec <MX_GPIO_Init+0x270>)
 8000a9a:	f043 0310 	orr.w	r3, r3, #16
 8000a9e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000aa2:	4b92      	ldr	r3, [pc, #584]	; (8000cec <MX_GPIO_Init+0x270>)
 8000aa4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000aa8:	f003 0310 	and.w	r3, r3, #16
 8000aac:	623b      	str	r3, [r7, #32]
 8000aae:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ab0:	4b8e      	ldr	r3, [pc, #568]	; (8000cec <MX_GPIO_Init+0x270>)
 8000ab2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ab6:	4a8d      	ldr	r2, [pc, #564]	; (8000cec <MX_GPIO_Init+0x270>)
 8000ab8:	f043 0304 	orr.w	r3, r3, #4
 8000abc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ac0:	4b8a      	ldr	r3, [pc, #552]	; (8000cec <MX_GPIO_Init+0x270>)
 8000ac2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ac6:	f003 0304 	and.w	r3, r3, #4
 8000aca:	61fb      	str	r3, [r7, #28]
 8000acc:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000ace:	4b87      	ldr	r3, [pc, #540]	; (8000cec <MX_GPIO_Init+0x270>)
 8000ad0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ad4:	4a85      	ldr	r2, [pc, #532]	; (8000cec <MX_GPIO_Init+0x270>)
 8000ad6:	f043 0320 	orr.w	r3, r3, #32
 8000ada:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ade:	4b83      	ldr	r3, [pc, #524]	; (8000cec <MX_GPIO_Init+0x270>)
 8000ae0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ae4:	f003 0320 	and.w	r3, r3, #32
 8000ae8:	61bb      	str	r3, [r7, #24]
 8000aea:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000aec:	4b7f      	ldr	r3, [pc, #508]	; (8000cec <MX_GPIO_Init+0x270>)
 8000aee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000af2:	4a7e      	ldr	r2, [pc, #504]	; (8000cec <MX_GPIO_Init+0x270>)
 8000af4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000af8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000afc:	4b7b      	ldr	r3, [pc, #492]	; (8000cec <MX_GPIO_Init+0x270>)
 8000afe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b06:	617b      	str	r3, [r7, #20]
 8000b08:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b0a:	4b78      	ldr	r3, [pc, #480]	; (8000cec <MX_GPIO_Init+0x270>)
 8000b0c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b10:	4a76      	ldr	r2, [pc, #472]	; (8000cec <MX_GPIO_Init+0x270>)
 8000b12:	f043 0301 	orr.w	r3, r3, #1
 8000b16:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b1a:	4b74      	ldr	r3, [pc, #464]	; (8000cec <MX_GPIO_Init+0x270>)
 8000b1c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b20:	f003 0301 	and.w	r3, r3, #1
 8000b24:	613b      	str	r3, [r7, #16]
 8000b26:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b28:	4b70      	ldr	r3, [pc, #448]	; (8000cec <MX_GPIO_Init+0x270>)
 8000b2a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b2e:	4a6f      	ldr	r2, [pc, #444]	; (8000cec <MX_GPIO_Init+0x270>)
 8000b30:	f043 0302 	orr.w	r3, r3, #2
 8000b34:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b38:	4b6c      	ldr	r3, [pc, #432]	; (8000cec <MX_GPIO_Init+0x270>)
 8000b3a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b3e:	f003 0302 	and.w	r3, r3, #2
 8000b42:	60fb      	str	r3, [r7, #12]
 8000b44:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b46:	4b69      	ldr	r3, [pc, #420]	; (8000cec <MX_GPIO_Init+0x270>)
 8000b48:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b4c:	4a67      	ldr	r2, [pc, #412]	; (8000cec <MX_GPIO_Init+0x270>)
 8000b4e:	f043 0308 	orr.w	r3, r3, #8
 8000b52:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b56:	4b65      	ldr	r3, [pc, #404]	; (8000cec <MX_GPIO_Init+0x270>)
 8000b58:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b5c:	f003 0308 	and.w	r3, r3, #8
 8000b60:	60bb      	str	r3, [r7, #8]
 8000b62:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000b64:	4b61      	ldr	r3, [pc, #388]	; (8000cec <MX_GPIO_Init+0x270>)
 8000b66:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b6a:	4a60      	ldr	r2, [pc, #384]	; (8000cec <MX_GPIO_Init+0x270>)
 8000b6c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000b70:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b74:	4b5d      	ldr	r3, [pc, #372]	; (8000cec <MX_GPIO_Init+0x270>)
 8000b76:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000b7e:	607b      	str	r3, [r7, #4]
 8000b80:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(relayDrivers_GPIO_Port, relayDrivers_Pin, GPIO_PIN_RESET);
 8000b82:	2200      	movs	r2, #0
 8000b84:	2108      	movs	r1, #8
 8000b86:	485a      	ldr	r0, [pc, #360]	; (8000cf0 <MX_GPIO_Init+0x274>)
 8000b88:	f006 fe58 	bl	800783c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, S_DirPaP1_Pin|S_DirPaP2_Pin|S_DirPaP3_Pin, GPIO_PIN_RESET);
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8000b92:	4858      	ldr	r0, [pc, #352]	; (8000cf4 <MX_GPIO_Init+0x278>)
 8000b94:	f006 fe52 	bl	800783c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, S_Enable_1_Pin|S_Enable_2_Pin|S_Enable_3_Pin, GPIO_PIN_RESET);
 8000b98:	2200      	movs	r2, #0
 8000b9a:	2170      	movs	r1, #112	; 0x70
 8000b9c:	4856      	ldr	r0, [pc, #344]	; (8000cf8 <MX_GPIO_Init+0x27c>)
 8000b9e:	f006 fe4d 	bl	800783c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin
                           PEPin PEPin */
  GPIO_InitStruct.Pin = E_EndStop2_Sup_Pin|E_EndStop2_Inf_Pin|E_EndStop3_Sup_Pin|E_EndStop3_Inf_Pin
 8000ba2:	23bd      	movs	r3, #189	; 0xbd
 8000ba4:	627b      	str	r3, [r7, #36]	; 0x24
                          |faultDriver1_Pin|E_EndStop1_Sup_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000ba6:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000baa:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bac:	2300      	movs	r3, #0
 8000bae:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000bb0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bb4:	4619      	mov	r1, r3
 8000bb6:	4851      	ldr	r0, [pc, #324]	; (8000cfc <MX_GPIO_Init+0x280>)
 8000bb8:	f006 fc78 	bl	80074ac <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BUTTON_Pin;
 8000bbc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000bc0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000bc2:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000bc6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000bc8:	2302      	movs	r3, #2
 8000bca:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(BUTTON_GPIO_Port, &GPIO_InitStruct);
 8000bcc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bd0:	4619      	mov	r1, r3
 8000bd2:	4848      	ldr	r0, [pc, #288]	; (8000cf4 <MX_GPIO_Init+0x278>)
 8000bd4:	f006 fc6a 	bl	80074ac <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = relayDrivers_Pin;
 8000bd8:	2308      	movs	r3, #8
 8000bda:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bdc:	2301      	movs	r3, #1
 8000bde:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be0:	2300      	movs	r3, #0
 8000be2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000be4:	2300      	movs	r3, #0
 8000be6:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(relayDrivers_GPIO_Port, &GPIO_InitStruct);
 8000be8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bec:	4619      	mov	r1, r3
 8000bee:	4840      	ldr	r0, [pc, #256]	; (8000cf0 <MX_GPIO_Init+0x274>)
 8000bf0:	f006 fc5c 	bl	80074ac <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = faultDriver2_Pin|faultDriver3_Pin;
 8000bf4:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8000bf8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000bfa:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000bfe:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c00:	2300      	movs	r3, #0
 8000c02:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c04:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c08:	4619      	mov	r1, r3
 8000c0a:	483b      	ldr	r0, [pc, #236]	; (8000cf8 <MX_GPIO_Init+0x27c>)
 8000c0c:	f006 fc4e 	bl	80074ac <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = S_DirPaP1_Pin|S_DirPaP2_Pin|S_DirPaP3_Pin;
 8000c10:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8000c14:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c16:	2301      	movs	r3, #1
 8000c18:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c1e:	2300      	movs	r3, #0
 8000c20:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c22:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c26:	4619      	mov	r1, r3
 8000c28:	4832      	ldr	r0, [pc, #200]	; (8000cf4 <MX_GPIO_Init+0x278>)
 8000c2a:	f006 fc3f 	bl	80074ac <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = S_Enable_1_Pin;
 8000c2e:	2310      	movs	r3, #16
 8000c30:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c32:	2301      	movs	r3, #1
 8000c34:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c36:	2300      	movs	r3, #0
 8000c38:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(S_Enable_1_GPIO_Port, &GPIO_InitStruct);
 8000c3e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c42:	4619      	mov	r1, r3
 8000c44:	482c      	ldr	r0, [pc, #176]	; (8000cf8 <MX_GPIO_Init+0x27c>)
 8000c46:	f006 fc31 	bl	80074ac <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = S_Enable_2_Pin|S_Enable_3_Pin;
 8000c4a:	2360      	movs	r3, #96	; 0x60
 8000c4c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000c4e:	2311      	movs	r3, #17
 8000c50:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c52:	2300      	movs	r3, #0
 8000c54:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c56:	2300      	movs	r3, #0
 8000c58:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c5a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c5e:	4619      	mov	r1, r3
 8000c60:	4825      	ldr	r0, [pc, #148]	; (8000cf8 <MX_GPIO_Init+0x27c>)
 8000c62:	f006 fc23 	bl	80074ac <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = E_EndStop1_Inf_Pin;
 8000c66:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c6a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000c6c:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000c70:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c72:	2300      	movs	r3, #0
 8000c74:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(E_EndStop1_Inf_GPIO_Port, &GPIO_InitStruct);
 8000c76:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c7a:	4619      	mov	r1, r3
 8000c7c:	4820      	ldr	r0, [pc, #128]	; (8000d00 <MX_GPIO_Init+0x284>)
 8000c7e:	f006 fc15 	bl	80074ac <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 1, 0);
 8000c82:	2200      	movs	r2, #0
 8000c84:	2101      	movs	r1, #1
 8000c86:	2006      	movs	r0, #6
 8000c88:	f005 fe69 	bl	800695e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000c8c:	2006      	movs	r0, #6
 8000c8e:	f005 fe80 	bl	8006992 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 1, 0);
 8000c92:	2200      	movs	r2, #0
 8000c94:	2101      	movs	r1, #1
 8000c96:	2008      	movs	r0, #8
 8000c98:	f005 fe61 	bl	800695e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8000c9c:	2008      	movs	r0, #8
 8000c9e:	f005 fe78 	bl	8006992 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 1, 0);
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	2101      	movs	r1, #1
 8000ca6:	2009      	movs	r0, #9
 8000ca8:	f005 fe59 	bl	800695e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8000cac:	2009      	movs	r0, #9
 8000cae:	f005 fe70 	bl	8006992 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 1, 0);
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	2101      	movs	r1, #1
 8000cb6:	200a      	movs	r0, #10
 8000cb8:	f005 fe51 	bl	800695e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8000cbc:	200a      	movs	r0, #10
 8000cbe:	f005 fe68 	bl	8006992 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 1, 0);
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	2101      	movs	r1, #1
 8000cc6:	2017      	movs	r0, #23
 8000cc8:	f005 fe49 	bl	800695e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000ccc:	2017      	movs	r0, #23
 8000cce:	f005 fe60 	bl	8006992 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 1, 0);
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	2101      	movs	r1, #1
 8000cd6:	2028      	movs	r0, #40	; 0x28
 8000cd8:	f005 fe41 	bl	800695e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000cdc:	2028      	movs	r0, #40	; 0x28
 8000cde:	f005 fe58 	bl	8006992 <HAL_NVIC_EnableIRQ>

}
 8000ce2:	bf00      	nop
 8000ce4:	3738      	adds	r7, #56	; 0x38
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	bd80      	pop	{r7, pc}
 8000cea:	bf00      	nop
 8000cec:	58024400 	.word	0x58024400
 8000cf0:	58021400 	.word	0x58021400
 8000cf4:	58020800 	.word	0x58020800
 8000cf8:	58020c00 	.word	0x58020c00
 8000cfc:	58021000 	.word	0x58021000
 8000d00:	58021800 	.word	0x58021800
 8000d04:	00000000 	.word	0x00000000

08000d08 <homing>:

double rpm = 1.0;  //Valor experimental. Se encontro que es una buena velocidad para la tarea de homing
bool homAprox, homStart;


void homing(void) {
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	af00      	add	r7, sp, #0

	homAprox = true;
 8000d0c:	4bb0      	ldr	r3, [pc, #704]	; (8000fd0 <homing+0x2c8>)
 8000d0e:	2201      	movs	r2, #1
 8000d10:	701a      	strb	r2, [r3, #0]
	homStart = true;
 8000d12:	4bb0      	ldr	r3, [pc, #704]	; (8000fd4 <homing+0x2cc>)
 8000d14:	2201      	movs	r2, #1
 8000d16:	701a      	strb	r2, [r3, #0]

    motor1.hom = false;
 8000d18:	4baf      	ldr	r3, [pc, #700]	; (8000fd8 <homing+0x2d0>)
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	761a      	strb	r2, [r3, #24]
    motor2.hom = false;
 8000d1e:	4baf      	ldr	r3, [pc, #700]	; (8000fdc <homing+0x2d4>)
 8000d20:	2200      	movs	r2, #0
 8000d22:	761a      	strb	r2, [r3, #24]
    motor3.hom = false;
 8000d24:	4bae      	ldr	r3, [pc, #696]	; (8000fe0 <homing+0x2d8>)
 8000d26:	2200      	movs	r2, #0
 8000d28:	761a      	strb	r2, [r3, #24]

    //Establecemos la direccion en sentido horario (VISTA FRONTAL DEL MOTOR)
    positive_Dir_MOTOR_1;
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000d30:	48ac      	ldr	r0, [pc, #688]	; (8000fe4 <homing+0x2dc>)
 8000d32:	f006 fd83 	bl	800783c <HAL_GPIO_WritePin>
	positive_Dir_MOTOR_2;
 8000d36:	2200      	movs	r2, #0
 8000d38:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000d3c:	48a9      	ldr	r0, [pc, #676]	; (8000fe4 <homing+0x2dc>)
 8000d3e:	f006 fd7d 	bl	800783c <HAL_GPIO_WritePin>
	positive_Dir_MOTOR_3;
 8000d42:	2200      	movs	r2, #0
 8000d44:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000d48:	48a6      	ldr	r0, [pc, #664]	; (8000fe4 <homing+0x2dc>)
 8000d4a:	f006 fd77 	bl	800783c <HAL_GPIO_WritePin>

	HAL_NVIC_DisableIRQ(EXTI0_IRQn);	//Apago interrupcion EndStop 1 Superior
 8000d4e:	2006      	movs	r0, #6
 8000d50:	f005 fe2d 	bl	80069ae <HAL_NVIC_DisableIRQ>
	HAL_NVIC_DisableIRQ(EXTI1_IRQn);	//Apago interrupcion EndStop 1 Inferior
 8000d54:	2007      	movs	r0, #7
 8000d56:	f005 fe2a 	bl	80069ae <HAL_NVIC_DisableIRQ>
	HAL_NVIC_DisableIRQ(EXTI2_IRQn);	//Apago interrupcion EndStop 2 Superior
 8000d5a:	2008      	movs	r0, #8
 8000d5c:	f005 fe27 	bl	80069ae <HAL_NVIC_DisableIRQ>
	HAL_NVIC_DisableIRQ(EXTI3_IRQn);	//Apago interrupcion EndStop 2 Inferior
 8000d60:	2009      	movs	r0, #9
 8000d62:	f005 fe24 	bl	80069ae <HAL_NVIC_DisableIRQ>
	HAL_NVIC_DisableIRQ(EXTI4_IRQn);	//Apago interrupcion EndStop 3 Superior
 8000d66:	200a      	movs	r0, #10
 8000d68:	f005 fe21 	bl	80069ae <HAL_NVIC_DisableIRQ>
	HAL_NVIC_DisableIRQ(EXTI9_5_IRQn);	//Apago interrupcion EndStop 3 Inferior
 8000d6c:	2017      	movs	r0, #23
 8000d6e:	f005 fe1e 	bl	80069ae <HAL_NVIC_DisableIRQ>
	HAL_NVIC_DisableIRQ(EXTI15_10_IRQn); //Apago interrupcion faultDriver
 8000d72:	2028      	movs	r0, #40	; 0x28
 8000d74:	f005 fe1b 	bl	80069ae <HAL_NVIC_DisableIRQ>


    //Me aseguro que los motores esten detenidos

	Stop_PWM_MOTOR_1;
 8000d78:	2100      	movs	r1, #0
 8000d7a:	489b      	ldr	r0, [pc, #620]	; (8000fe8 <homing+0x2e0>)
 8000d7c:	f009 fbf4 	bl	800a568 <HAL_TIM_PWM_Stop>
	Stop_PWM_MOTOR_2;
 8000d80:	2100      	movs	r1, #0
 8000d82:	489a      	ldr	r0, [pc, #616]	; (8000fec <homing+0x2e4>)
 8000d84:	f009 fbf0 	bl	800a568 <HAL_TIM_PWM_Stop>
	Stop_PWM_MOTOR_3;
 8000d88:	2100      	movs	r1, #0
 8000d8a:	4899      	ldr	r0, [pc, #612]	; (8000ff0 <homing+0x2e8>)
 8000d8c:	f009 fbec 	bl	800a568 <HAL_TIM_PWM_Stop>

	//Escritura del registro ARR
	__HAL_TIM_SET_AUTORELOAD(&htim12,COUNTERPERIOD(rpm));
 8000d90:	4b98      	ldr	r3, [pc, #608]	; (8000ff4 <homing+0x2ec>)
 8000d92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d94:	ee07 3a90 	vmov	s15, r3
 8000d98:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8000d9c:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8000da0:	ee37 7b06 	vadd.f64	d7, d7, d6
 8000da4:	ed9f 5b84 	vldr	d5, [pc, #528]	; 8000fb8 <homing+0x2b0>
 8000da8:	ee85 6b07 	vdiv.f64	d6, d5, d7
 8000dac:	4b92      	ldr	r3, [pc, #584]	; (8000ff8 <homing+0x2f0>)
 8000dae:	ed93 7b00 	vldr	d7, [r3]
 8000db2:	ed9f 5b83 	vldr	d5, [pc, #524]	; 8000fc0 <homing+0x2b8>
 8000db6:	ee27 5b05 	vmul.f64	d5, d7, d5
 8000dba:	ed9f 4b83 	vldr	d4, [pc, #524]	; 8000fc8 <homing+0x2c0>
 8000dbe:	ee84 7b05 	vdiv.f64	d7, d4, d5
 8000dc2:	ee26 7b07 	vmul.f64	d7, d6, d7
 8000dc6:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8000dca:	ee37 7b46 	vsub.f64	d7, d7, d6
 8000dce:	4b86      	ldr	r3, [pc, #536]	; (8000fe8 <homing+0x2e0>)
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000dd6:	ee17 2a90 	vmov	r2, s15
 8000dda:	62da      	str	r2, [r3, #44]	; 0x2c
 8000ddc:	4b85      	ldr	r3, [pc, #532]	; (8000ff4 <homing+0x2ec>)
 8000dde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000de0:	ee07 3a90 	vmov	s15, r3
 8000de4:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8000de8:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8000dec:	ee37 7b06 	vadd.f64	d7, d7, d6
 8000df0:	ed9f 5b71 	vldr	d5, [pc, #452]	; 8000fb8 <homing+0x2b0>
 8000df4:	ee85 6b07 	vdiv.f64	d6, d5, d7
 8000df8:	4b7f      	ldr	r3, [pc, #508]	; (8000ff8 <homing+0x2f0>)
 8000dfa:	ed93 7b00 	vldr	d7, [r3]
 8000dfe:	ed9f 5b70 	vldr	d5, [pc, #448]	; 8000fc0 <homing+0x2b8>
 8000e02:	ee27 5b05 	vmul.f64	d5, d7, d5
 8000e06:	ed9f 4b70 	vldr	d4, [pc, #448]	; 8000fc8 <homing+0x2c0>
 8000e0a:	ee84 7b05 	vdiv.f64	d7, d4, d5
 8000e0e:	ee26 7b07 	vmul.f64	d7, d6, d7
 8000e12:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8000e16:	ee37 7b46 	vsub.f64	d7, d7, d6
 8000e1a:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000e1e:	ee17 2a90 	vmov	r2, s15
 8000e22:	4b71      	ldr	r3, [pc, #452]	; (8000fe8 <homing+0x2e0>)
 8000e24:	60da      	str	r2, [r3, #12]
	__HAL_TIM_SET_AUTORELOAD(&htim13,COUNTERPERIOD(rpm));
 8000e26:	4b73      	ldr	r3, [pc, #460]	; (8000ff4 <homing+0x2ec>)
 8000e28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e2a:	ee07 3a90 	vmov	s15, r3
 8000e2e:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8000e32:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8000e36:	ee37 7b06 	vadd.f64	d7, d7, d6
 8000e3a:	ed9f 5b5f 	vldr	d5, [pc, #380]	; 8000fb8 <homing+0x2b0>
 8000e3e:	ee85 6b07 	vdiv.f64	d6, d5, d7
 8000e42:	4b6d      	ldr	r3, [pc, #436]	; (8000ff8 <homing+0x2f0>)
 8000e44:	ed93 7b00 	vldr	d7, [r3]
 8000e48:	ed9f 5b5d 	vldr	d5, [pc, #372]	; 8000fc0 <homing+0x2b8>
 8000e4c:	ee27 5b05 	vmul.f64	d5, d7, d5
 8000e50:	ed9f 4b5d 	vldr	d4, [pc, #372]	; 8000fc8 <homing+0x2c0>
 8000e54:	ee84 7b05 	vdiv.f64	d7, d4, d5
 8000e58:	ee26 7b07 	vmul.f64	d7, d6, d7
 8000e5c:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8000e60:	ee37 7b46 	vsub.f64	d7, d7, d6
 8000e64:	4b61      	ldr	r3, [pc, #388]	; (8000fec <homing+0x2e4>)
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000e6c:	ee17 2a90 	vmov	r2, s15
 8000e70:	62da      	str	r2, [r3, #44]	; 0x2c
 8000e72:	4b60      	ldr	r3, [pc, #384]	; (8000ff4 <homing+0x2ec>)
 8000e74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e76:	ee07 3a90 	vmov	s15, r3
 8000e7a:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8000e7e:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8000e82:	ee37 7b06 	vadd.f64	d7, d7, d6
 8000e86:	ed9f 5b4c 	vldr	d5, [pc, #304]	; 8000fb8 <homing+0x2b0>
 8000e8a:	ee85 6b07 	vdiv.f64	d6, d5, d7
 8000e8e:	4b5a      	ldr	r3, [pc, #360]	; (8000ff8 <homing+0x2f0>)
 8000e90:	ed93 7b00 	vldr	d7, [r3]
 8000e94:	ed9f 5b4a 	vldr	d5, [pc, #296]	; 8000fc0 <homing+0x2b8>
 8000e98:	ee27 5b05 	vmul.f64	d5, d7, d5
 8000e9c:	ed9f 4b4a 	vldr	d4, [pc, #296]	; 8000fc8 <homing+0x2c0>
 8000ea0:	ee84 7b05 	vdiv.f64	d7, d4, d5
 8000ea4:	ee26 7b07 	vmul.f64	d7, d6, d7
 8000ea8:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8000eac:	ee37 7b46 	vsub.f64	d7, d7, d6
 8000eb0:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000eb4:	ee17 2a90 	vmov	r2, s15
 8000eb8:	4b4c      	ldr	r3, [pc, #304]	; (8000fec <homing+0x2e4>)
 8000eba:	60da      	str	r2, [r3, #12]
	__HAL_TIM_SET_AUTORELOAD(&htim14,COUNTERPERIOD(rpm));
 8000ebc:	4b4d      	ldr	r3, [pc, #308]	; (8000ff4 <homing+0x2ec>)
 8000ebe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ec0:	ee07 3a90 	vmov	s15, r3
 8000ec4:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8000ec8:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8000ecc:	ee37 7b06 	vadd.f64	d7, d7, d6
 8000ed0:	ed9f 5b39 	vldr	d5, [pc, #228]	; 8000fb8 <homing+0x2b0>
 8000ed4:	ee85 6b07 	vdiv.f64	d6, d5, d7
 8000ed8:	4b47      	ldr	r3, [pc, #284]	; (8000ff8 <homing+0x2f0>)
 8000eda:	ed93 7b00 	vldr	d7, [r3]
 8000ede:	ed9f 5b38 	vldr	d5, [pc, #224]	; 8000fc0 <homing+0x2b8>
 8000ee2:	ee27 5b05 	vmul.f64	d5, d7, d5
 8000ee6:	ed9f 4b38 	vldr	d4, [pc, #224]	; 8000fc8 <homing+0x2c0>
 8000eea:	ee84 7b05 	vdiv.f64	d7, d4, d5
 8000eee:	ee26 7b07 	vmul.f64	d7, d6, d7
 8000ef2:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8000ef6:	ee37 7b46 	vsub.f64	d7, d7, d6
 8000efa:	4b3d      	ldr	r3, [pc, #244]	; (8000ff0 <homing+0x2e8>)
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000f02:	ee17 2a90 	vmov	r2, s15
 8000f06:	62da      	str	r2, [r3, #44]	; 0x2c
 8000f08:	4b3a      	ldr	r3, [pc, #232]	; (8000ff4 <homing+0x2ec>)
 8000f0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f0c:	ee07 3a90 	vmov	s15, r3
 8000f10:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8000f14:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8000f18:	ee37 7b06 	vadd.f64	d7, d7, d6
 8000f1c:	ed9f 5b26 	vldr	d5, [pc, #152]	; 8000fb8 <homing+0x2b0>
 8000f20:	ee85 6b07 	vdiv.f64	d6, d5, d7
 8000f24:	4b34      	ldr	r3, [pc, #208]	; (8000ff8 <homing+0x2f0>)
 8000f26:	ed93 7b00 	vldr	d7, [r3]
 8000f2a:	ed9f 5b25 	vldr	d5, [pc, #148]	; 8000fc0 <homing+0x2b8>
 8000f2e:	ee27 5b05 	vmul.f64	d5, d7, d5
 8000f32:	ed9f 4b25 	vldr	d4, [pc, #148]	; 8000fc8 <homing+0x2c0>
 8000f36:	ee84 7b05 	vdiv.f64	d7, d4, d5
 8000f3a:	ee26 7b07 	vmul.f64	d7, d6, d7
 8000f3e:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8000f42:	ee37 7b46 	vsub.f64	d7, d7, d6
 8000f46:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000f4a:	ee17 2a90 	vmov	r2, s15
 8000f4e:	4b28      	ldr	r3, [pc, #160]	; (8000ff0 <homing+0x2e8>)
 8000f50:	60da      	str	r2, [r3, #12]

	TIM12->CCR1 = (uint32_t)((double)(TIM12->ARR) / 2.0);
 8000f52:	4b28      	ldr	r3, [pc, #160]	; (8000ff4 <homing+0x2ec>)
 8000f54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f56:	ee07 3a90 	vmov	s15, r3
 8000f5a:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 8000f5e:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8000f62:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000f66:	4b23      	ldr	r3, [pc, #140]	; (8000ff4 <homing+0x2ec>)
 8000f68:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000f6c:	ee17 2a90 	vmov	r2, s15
 8000f70:	635a      	str	r2, [r3, #52]	; 0x34
	TIM13->CCR1 = (uint32_t)((double)(TIM13->ARR) / 2.0);
 8000f72:	4b22      	ldr	r3, [pc, #136]	; (8000ffc <homing+0x2f4>)
 8000f74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f76:	ee07 3a90 	vmov	s15, r3
 8000f7a:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 8000f7e:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8000f82:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000f86:	4b1d      	ldr	r3, [pc, #116]	; (8000ffc <homing+0x2f4>)
 8000f88:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000f8c:	ee17 2a90 	vmov	r2, s15
 8000f90:	635a      	str	r2, [r3, #52]	; 0x34
	TIM14->CCR1 = (uint32_t)((double)(TIM14->ARR) / 2.0);
 8000f92:	4b1b      	ldr	r3, [pc, #108]	; (8001000 <homing+0x2f8>)
 8000f94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f96:	ee07 3a90 	vmov	s15, r3
 8000f9a:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 8000f9e:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8000fa2:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000fa6:	4b16      	ldr	r3, [pc, #88]	; (8001000 <homing+0x2f8>)
 8000fa8:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000fac:	ee17 2a90 	vmov	r2, s15
 8000fb0:	635a      	str	r2, [r3, #52]	; 0x34


    while(homAprox){
 8000fb2:	e06f      	b.n	8001094 <homing+0x38c>
 8000fb4:	f3af 8000 	nop.w
 8000fb8:	00000000 	.word	0x00000000
 8000fbc:	418e8480 	.word	0x418e8480
 8000fc0:	00000000 	.word	0x00000000
 8000fc4:	40bf4000 	.word	0x40bf4000
 8000fc8:	00000000 	.word	0x00000000
 8000fcc:	404e0000 	.word	0x404e0000
 8000fd0:	2400027c 	.word	0x2400027c
 8000fd4:	2400027d 	.word	0x2400027d
 8000fd8:	24000370 	.word	0x24000370
 8000fdc:	240003b8 	.word	0x240003b8
 8000fe0:	24000400 	.word	0x24000400
 8000fe4:	58020800 	.word	0x58020800
 8000fe8:	240006f8 	.word	0x240006f8
 8000fec:	24000744 	.word	0x24000744
 8000ff0:	24000790 	.word	0x24000790
 8000ff4:	40001800 	.word	0x40001800
 8000ff8:	24000000 	.word	0x24000000
 8000ffc:	40001c00 	.word	0x40001c00
 8001000:	40002000 	.word	0x40002000

        Start_PWM_MOTOR_1;
 8001004:	2100      	movs	r1, #0
 8001006:	488c      	ldr	r0, [pc, #560]	; (8001238 <homing+0x530>)
 8001008:	f009 f9a0 	bl	800a34c <HAL_TIM_PWM_Start>
        Start_PWM_MOTOR_2;
 800100c:	2100      	movs	r1, #0
 800100e:	488b      	ldr	r0, [pc, #556]	; (800123c <homing+0x534>)
 8001010:	f009 f99c 	bl	800a34c <HAL_TIM_PWM_Start>
        Start_PWM_MOTOR_3;
 8001014:	2100      	movs	r1, #0
 8001016:	488a      	ldr	r0, [pc, #552]	; (8001240 <homing+0x538>)
 8001018:	f009 f998 	bl	800a34c <HAL_TIM_PWM_Start>

        if (ES1s_PRESSED || ES2s_PRESSED || ES3s_PRESSED){
 800101c:	2101      	movs	r1, #1
 800101e:	4889      	ldr	r0, [pc, #548]	; (8001244 <homing+0x53c>)
 8001020:	f006 fbf4 	bl	800780c <HAL_GPIO_ReadPin>
 8001024:	4603      	mov	r3, r0
 8001026:	2b00      	cmp	r3, #0
 8001028:	d00d      	beq.n	8001046 <homing+0x33e>
 800102a:	2104      	movs	r1, #4
 800102c:	4885      	ldr	r0, [pc, #532]	; (8001244 <homing+0x53c>)
 800102e:	f006 fbed 	bl	800780c <HAL_GPIO_ReadPin>
 8001032:	4603      	mov	r3, r0
 8001034:	2b00      	cmp	r3, #0
 8001036:	d006      	beq.n	8001046 <homing+0x33e>
 8001038:	2110      	movs	r1, #16
 800103a:	4882      	ldr	r0, [pc, #520]	; (8001244 <homing+0x53c>)
 800103c:	f006 fbe6 	bl	800780c <HAL_GPIO_ReadPin>
 8001040:	4603      	mov	r3, r0
 8001042:	2b00      	cmp	r3, #0
 8001044:	d126      	bne.n	8001094 <homing+0x38c>
            HAL_Delay(30);
 8001046:	201e      	movs	r0, #30
 8001048:	f005 fb5a 	bl	8006700 <HAL_Delay>
            if (ES1s_PRESSED || ES2s_PRESSED || ES3s_PRESSED){
 800104c:	2101      	movs	r1, #1
 800104e:	487d      	ldr	r0, [pc, #500]	; (8001244 <homing+0x53c>)
 8001050:	f006 fbdc 	bl	800780c <HAL_GPIO_ReadPin>
 8001054:	4603      	mov	r3, r0
 8001056:	2b00      	cmp	r3, #0
 8001058:	d00d      	beq.n	8001076 <homing+0x36e>
 800105a:	2104      	movs	r1, #4
 800105c:	4879      	ldr	r0, [pc, #484]	; (8001244 <homing+0x53c>)
 800105e:	f006 fbd5 	bl	800780c <HAL_GPIO_ReadPin>
 8001062:	4603      	mov	r3, r0
 8001064:	2b00      	cmp	r3, #0
 8001066:	d006      	beq.n	8001076 <homing+0x36e>
 8001068:	2110      	movs	r1, #16
 800106a:	4876      	ldr	r0, [pc, #472]	; (8001244 <homing+0x53c>)
 800106c:	f006 fbce 	bl	800780c <HAL_GPIO_ReadPin>
 8001070:	4603      	mov	r3, r0
 8001072:	2b00      	cmp	r3, #0
 8001074:	d10e      	bne.n	8001094 <homing+0x38c>

                Stop_PWM_MOTOR_1;
 8001076:	2100      	movs	r1, #0
 8001078:	486f      	ldr	r0, [pc, #444]	; (8001238 <homing+0x530>)
 800107a:	f009 fa75 	bl	800a568 <HAL_TIM_PWM_Stop>
                Stop_PWM_MOTOR_2;
 800107e:	2100      	movs	r1, #0
 8001080:	486e      	ldr	r0, [pc, #440]	; (800123c <homing+0x534>)
 8001082:	f009 fa71 	bl	800a568 <HAL_TIM_PWM_Stop>
                Stop_PWM_MOTOR_3;
 8001086:	2100      	movs	r1, #0
 8001088:	486d      	ldr	r0, [pc, #436]	; (8001240 <homing+0x538>)
 800108a:	f009 fa6d 	bl	800a568 <HAL_TIM_PWM_Stop>

                homAprox = false;
 800108e:	4b6e      	ldr	r3, [pc, #440]	; (8001248 <homing+0x540>)
 8001090:	2200      	movs	r2, #0
 8001092:	701a      	strb	r2, [r3, #0]
    while(homAprox){
 8001094:	4b6c      	ldr	r3, [pc, #432]	; (8001248 <homing+0x540>)
 8001096:	781b      	ldrb	r3, [r3, #0]
 8001098:	2b00      	cmp	r3, #0
 800109a:	d1b3      	bne.n	8001004 <homing+0x2fc>
        }
    }

    //-----------------------------------------------------------------------------

    while (!homFin){
 800109c:	e13f      	b.n	800131e <homing+0x616>

        if (ES1s_PRESSED && !motor1.hom) {
 800109e:	2101      	movs	r1, #1
 80010a0:	4868      	ldr	r0, [pc, #416]	; (8001244 <homing+0x53c>)
 80010a2:	f006 fbb3 	bl	800780c <HAL_GPIO_ReadPin>
 80010a6:	4603      	mov	r3, r0
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d155      	bne.n	8001158 <homing+0x450>
 80010ac:	4b67      	ldr	r3, [pc, #412]	; (800124c <homing+0x544>)
 80010ae:	7e1b      	ldrb	r3, [r3, #24]
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d151      	bne.n	8001158 <homing+0x450>

            Stop_PWM_MOTOR_2;
 80010b4:	2100      	movs	r1, #0
 80010b6:	4861      	ldr	r0, [pc, #388]	; (800123c <homing+0x534>)
 80010b8:	f009 fa56 	bl	800a568 <HAL_TIM_PWM_Stop>
            Stop_PWM_MOTOR_3;
 80010bc:	2100      	movs	r1, #0
 80010be:	4860      	ldr	r0, [pc, #384]	; (8001240 <homing+0x538>)
 80010c0:	f009 fa52 	bl	800a568 <HAL_TIM_PWM_Stop>

            HAL_Delay(30);//Delay necesario para consultar el estado del pin vinculado al ES1s
 80010c4:	201e      	movs	r0, #30
 80010c6:	f005 fb1b 	bl	8006700 <HAL_Delay>

            while(ES1s_PRESSED){
 80010ca:	e010      	b.n	80010ee <homing+0x3e6>

                negative_Dir_MOTOR_1;
 80010cc:	2201      	movs	r2, #1
 80010ce:	f44f 7180 	mov.w	r1, #256	; 0x100
 80010d2:	485f      	ldr	r0, [pc, #380]	; (8001250 <homing+0x548>)
 80010d4:	f006 fbb2 	bl	800783c <HAL_GPIO_WritePin>
                HAL_Delay(0.5); 							//delay cambio de dir
 80010d8:	2000      	movs	r0, #0
 80010da:	f005 fb11 	bl	8006700 <HAL_Delay>
                Start_PWM_MOTOR_1;
 80010de:	2100      	movs	r1, #0
 80010e0:	4855      	ldr	r0, [pc, #340]	; (8001238 <homing+0x530>)
 80010e2:	f009 f933 	bl	800a34c <HAL_TIM_PWM_Start>
                HAL_Delay(500); //Lo dejamos que se mueva medio segundo en la direccion descreciente
 80010e6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80010ea:	f005 fb09 	bl	8006700 <HAL_Delay>
            while(ES1s_PRESSED){
 80010ee:	2101      	movs	r1, #1
 80010f0:	4854      	ldr	r0, [pc, #336]	; (8001244 <homing+0x53c>)
 80010f2:	f006 fb8b 	bl	800780c <HAL_GPIO_ReadPin>
 80010f6:	4603      	mov	r3, r0
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d0e7      	beq.n	80010cc <homing+0x3c4>

            }

            Stop_PWM_MOTOR_1;
 80010fc:	2100      	movs	r1, #0
 80010fe:	484e      	ldr	r0, [pc, #312]	; (8001238 <homing+0x530>)
 8001100:	f009 fa32 	bl	800a568 <HAL_TIM_PWM_Stop>
            motor1.hom=true;
 8001104:	4b51      	ldr	r3, [pc, #324]	; (800124c <homing+0x544>)
 8001106:	2201      	movs	r2, #1
 8001108:	761a      	strb	r2, [r3, #24]
            HAL_UART_Transmit(&huart3,(uint8_t *)"F1\n", 4, 100);
 800110a:	2364      	movs	r3, #100	; 0x64
 800110c:	2204      	movs	r2, #4
 800110e:	4951      	ldr	r1, [pc, #324]	; (8001254 <homing+0x54c>)
 8001110:	4851      	ldr	r0, [pc, #324]	; (8001258 <homing+0x550>)
 8001112:	f00a ff21 	bl	800bf58 <HAL_UART_Transmit>
            HAL_Delay(30);
 8001116:	201e      	movs	r0, #30
 8001118:	f005 faf2 	bl	8006700 <HAL_Delay>

            if (ES2s_UNPRESSED && !motor2.hom)Start_PWM_MOTOR_2;
 800111c:	2104      	movs	r1, #4
 800111e:	4849      	ldr	r0, [pc, #292]	; (8001244 <homing+0x53c>)
 8001120:	f006 fb74 	bl	800780c <HAL_GPIO_ReadPin>
 8001124:	4603      	mov	r3, r0
 8001126:	2b00      	cmp	r3, #0
 8001128:	d007      	beq.n	800113a <homing+0x432>
 800112a:	4b4c      	ldr	r3, [pc, #304]	; (800125c <homing+0x554>)
 800112c:	7e1b      	ldrb	r3, [r3, #24]
 800112e:	2b00      	cmp	r3, #0
 8001130:	d103      	bne.n	800113a <homing+0x432>
 8001132:	2100      	movs	r1, #0
 8001134:	4841      	ldr	r0, [pc, #260]	; (800123c <homing+0x534>)
 8001136:	f009 f909 	bl	800a34c <HAL_TIM_PWM_Start>
            if (ES3s_UNPRESSED && !motor3.hom)Start_PWM_MOTOR_3;
 800113a:	2110      	movs	r1, #16
 800113c:	4841      	ldr	r0, [pc, #260]	; (8001244 <homing+0x53c>)
 800113e:	f006 fb65 	bl	800780c <HAL_GPIO_ReadPin>
 8001142:	4603      	mov	r3, r0
 8001144:	2b00      	cmp	r3, #0
 8001146:	d007      	beq.n	8001158 <homing+0x450>
 8001148:	4b45      	ldr	r3, [pc, #276]	; (8001260 <homing+0x558>)
 800114a:	7e1b      	ldrb	r3, [r3, #24]
 800114c:	2b00      	cmp	r3, #0
 800114e:	d103      	bne.n	8001158 <homing+0x450>
 8001150:	2100      	movs	r1, #0
 8001152:	483b      	ldr	r0, [pc, #236]	; (8001240 <homing+0x538>)
 8001154:	f009 f8fa 	bl	800a34c <HAL_TIM_PWM_Start>


        } // ES1s_UNPRESSED : Se dejó de presionar el FC1 sup

        if (ES2s_PRESSED && !motor2.hom){
 8001158:	2104      	movs	r1, #4
 800115a:	483a      	ldr	r0, [pc, #232]	; (8001244 <homing+0x53c>)
 800115c:	f006 fb56 	bl	800780c <HAL_GPIO_ReadPin>
 8001160:	4603      	mov	r3, r0
 8001162:	2b00      	cmp	r3, #0
 8001164:	d155      	bne.n	8001212 <homing+0x50a>
 8001166:	4b3d      	ldr	r3, [pc, #244]	; (800125c <homing+0x554>)
 8001168:	7e1b      	ldrb	r3, [r3, #24]
 800116a:	2b00      	cmp	r3, #0
 800116c:	d151      	bne.n	8001212 <homing+0x50a>

            Stop_PWM_MOTOR_1;
 800116e:	2100      	movs	r1, #0
 8001170:	4831      	ldr	r0, [pc, #196]	; (8001238 <homing+0x530>)
 8001172:	f009 f9f9 	bl	800a568 <HAL_TIM_PWM_Stop>
            Stop_PWM_MOTOR_3;
 8001176:	2100      	movs	r1, #0
 8001178:	4831      	ldr	r0, [pc, #196]	; (8001240 <homing+0x538>)
 800117a:	f009 f9f5 	bl	800a568 <HAL_TIM_PWM_Stop>

            HAL_Delay(30);//Delay necesario para consultar el estado del pin vinculado al ES2s
 800117e:	201e      	movs	r0, #30
 8001180:	f005 fabe 	bl	8006700 <HAL_Delay>

            while(ES2s_PRESSED){
 8001184:	e010      	b.n	80011a8 <homing+0x4a0>

                negative_Dir_MOTOR_2;
 8001186:	2201      	movs	r2, #1
 8001188:	f44f 7100 	mov.w	r1, #512	; 0x200
 800118c:	4830      	ldr	r0, [pc, #192]	; (8001250 <homing+0x548>)
 800118e:	f006 fb55 	bl	800783c <HAL_GPIO_WritePin>
                HAL_Delay(0.5);
 8001192:	2000      	movs	r0, #0
 8001194:	f005 fab4 	bl	8006700 <HAL_Delay>
                Start_PWM_MOTOR_2;
 8001198:	2100      	movs	r1, #0
 800119a:	4828      	ldr	r0, [pc, #160]	; (800123c <homing+0x534>)
 800119c:	f009 f8d6 	bl	800a34c <HAL_TIM_PWM_Start>
                HAL_Delay(500);
 80011a0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80011a4:	f005 faac 	bl	8006700 <HAL_Delay>
            while(ES2s_PRESSED){
 80011a8:	2104      	movs	r1, #4
 80011aa:	4826      	ldr	r0, [pc, #152]	; (8001244 <homing+0x53c>)
 80011ac:	f006 fb2e 	bl	800780c <HAL_GPIO_ReadPin>
 80011b0:	4603      	mov	r3, r0
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d0e7      	beq.n	8001186 <homing+0x47e>

            }

            Stop_PWM_MOTOR_2;
 80011b6:	2100      	movs	r1, #0
 80011b8:	4820      	ldr	r0, [pc, #128]	; (800123c <homing+0x534>)
 80011ba:	f009 f9d5 	bl	800a568 <HAL_TIM_PWM_Stop>
            motor2.hom=true;
 80011be:	4b27      	ldr	r3, [pc, #156]	; (800125c <homing+0x554>)
 80011c0:	2201      	movs	r2, #1
 80011c2:	761a      	strb	r2, [r3, #24]
            HAL_UART_Transmit(&huart3,(uint8_t *)"F2\n", 4, 100);
 80011c4:	2364      	movs	r3, #100	; 0x64
 80011c6:	2204      	movs	r2, #4
 80011c8:	4926      	ldr	r1, [pc, #152]	; (8001264 <homing+0x55c>)
 80011ca:	4823      	ldr	r0, [pc, #140]	; (8001258 <homing+0x550>)
 80011cc:	f00a fec4 	bl	800bf58 <HAL_UART_Transmit>
            HAL_Delay(30);
 80011d0:	201e      	movs	r0, #30
 80011d2:	f005 fa95 	bl	8006700 <HAL_Delay>

            if (ES1s_UNPRESSED && !motor1.hom)Start_PWM_MOTOR_1;
 80011d6:	2101      	movs	r1, #1
 80011d8:	481a      	ldr	r0, [pc, #104]	; (8001244 <homing+0x53c>)
 80011da:	f006 fb17 	bl	800780c <HAL_GPIO_ReadPin>
 80011de:	4603      	mov	r3, r0
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d007      	beq.n	80011f4 <homing+0x4ec>
 80011e4:	4b19      	ldr	r3, [pc, #100]	; (800124c <homing+0x544>)
 80011e6:	7e1b      	ldrb	r3, [r3, #24]
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d103      	bne.n	80011f4 <homing+0x4ec>
 80011ec:	2100      	movs	r1, #0
 80011ee:	4812      	ldr	r0, [pc, #72]	; (8001238 <homing+0x530>)
 80011f0:	f009 f8ac 	bl	800a34c <HAL_TIM_PWM_Start>
            if (ES3s_UNPRESSED && !motor3.hom)Start_PWM_MOTOR_3;
 80011f4:	2110      	movs	r1, #16
 80011f6:	4813      	ldr	r0, [pc, #76]	; (8001244 <homing+0x53c>)
 80011f8:	f006 fb08 	bl	800780c <HAL_GPIO_ReadPin>
 80011fc:	4603      	mov	r3, r0
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d007      	beq.n	8001212 <homing+0x50a>
 8001202:	4b17      	ldr	r3, [pc, #92]	; (8001260 <homing+0x558>)
 8001204:	7e1b      	ldrb	r3, [r3, #24]
 8001206:	2b00      	cmp	r3, #0
 8001208:	d103      	bne.n	8001212 <homing+0x50a>
 800120a:	2100      	movs	r1, #0
 800120c:	480c      	ldr	r0, [pc, #48]	; (8001240 <homing+0x538>)
 800120e:	f009 f89d 	bl	800a34c <HAL_TIM_PWM_Start>

        }// ES2s_UNPRESSED : Se dejó de presionar el FC2 sup


        if (ES3s_PRESSED){
 8001212:	2110      	movs	r1, #16
 8001214:	480b      	ldr	r0, [pc, #44]	; (8001244 <homing+0x53c>)
 8001216:	f006 faf9 	bl	800780c <HAL_GPIO_ReadPin>
 800121a:	4603      	mov	r3, r0
 800121c:	2b00      	cmp	r3, #0
 800121e:	d169      	bne.n	80012f4 <homing+0x5ec>

            Stop_PWM_MOTOR_1;
 8001220:	2100      	movs	r1, #0
 8001222:	4805      	ldr	r0, [pc, #20]	; (8001238 <homing+0x530>)
 8001224:	f009 f9a0 	bl	800a568 <HAL_TIM_PWM_Stop>
            Stop_PWM_MOTOR_2;
 8001228:	2100      	movs	r1, #0
 800122a:	4804      	ldr	r0, [pc, #16]	; (800123c <homing+0x534>)
 800122c:	f009 f99c 	bl	800a568 <HAL_TIM_PWM_Stop>

            HAL_Delay(30);//Delay necesario para consultar el estado del pin vinculado al ES3s
 8001230:	201e      	movs	r0, #30
 8001232:	f005 fa65 	bl	8006700 <HAL_Delay>

            while(ES3s_PRESSED){
 8001236:	e028      	b.n	800128a <homing+0x582>
 8001238:	240006f8 	.word	0x240006f8
 800123c:	24000744 	.word	0x24000744
 8001240:	24000790 	.word	0x24000790
 8001244:	58021000 	.word	0x58021000
 8001248:	2400027c 	.word	0x2400027c
 800124c:	24000370 	.word	0x24000370
 8001250:	58020800 	.word	0x58020800
 8001254:	080121b0 	.word	0x080121b0
 8001258:	24000a00 	.word	0x24000a00
 800125c:	240003b8 	.word	0x240003b8
 8001260:	24000400 	.word	0x24000400
 8001264:	080121b4 	.word	0x080121b4

                negative_Dir_MOTOR_3;
 8001268:	2201      	movs	r2, #1
 800126a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800126e:	4830      	ldr	r0, [pc, #192]	; (8001330 <homing+0x628>)
 8001270:	f006 fae4 	bl	800783c <HAL_GPIO_WritePin>
                HAL_Delay(0.5);
 8001274:	2000      	movs	r0, #0
 8001276:	f005 fa43 	bl	8006700 <HAL_Delay>
                Start_PWM_MOTOR_3;
 800127a:	2100      	movs	r1, #0
 800127c:	482d      	ldr	r0, [pc, #180]	; (8001334 <homing+0x62c>)
 800127e:	f009 f865 	bl	800a34c <HAL_TIM_PWM_Start>
                HAL_Delay(500);
 8001282:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001286:	f005 fa3b 	bl	8006700 <HAL_Delay>
            while(ES3s_PRESSED){
 800128a:	2110      	movs	r1, #16
 800128c:	482a      	ldr	r0, [pc, #168]	; (8001338 <homing+0x630>)
 800128e:	f006 fabd 	bl	800780c <HAL_GPIO_ReadPin>
 8001292:	4603      	mov	r3, r0
 8001294:	2b00      	cmp	r3, #0
 8001296:	d0e7      	beq.n	8001268 <homing+0x560>
            }

            Stop_PWM_MOTOR_3;
 8001298:	2100      	movs	r1, #0
 800129a:	4826      	ldr	r0, [pc, #152]	; (8001334 <homing+0x62c>)
 800129c:	f009 f964 	bl	800a568 <HAL_TIM_PWM_Stop>
            motor3.hom = true;
 80012a0:	4b26      	ldr	r3, [pc, #152]	; (800133c <homing+0x634>)
 80012a2:	2201      	movs	r2, #1
 80012a4:	761a      	strb	r2, [r3, #24]
            HAL_UART_Transmit(&huart3,(uint8_t *)"F3\n", 4, 100);
 80012a6:	2364      	movs	r3, #100	; 0x64
 80012a8:	2204      	movs	r2, #4
 80012aa:	4925      	ldr	r1, [pc, #148]	; (8001340 <homing+0x638>)
 80012ac:	4825      	ldr	r0, [pc, #148]	; (8001344 <homing+0x63c>)
 80012ae:	f00a fe53 	bl	800bf58 <HAL_UART_Transmit>
			HAL_Delay(30);
 80012b2:	201e      	movs	r0, #30
 80012b4:	f005 fa24 	bl	8006700 <HAL_Delay>
            if (ES1s_UNPRESSED && !motor1.hom)Start_PWM_MOTOR_1;
 80012b8:	2101      	movs	r1, #1
 80012ba:	481f      	ldr	r0, [pc, #124]	; (8001338 <homing+0x630>)
 80012bc:	f006 faa6 	bl	800780c <HAL_GPIO_ReadPin>
 80012c0:	4603      	mov	r3, r0
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d007      	beq.n	80012d6 <homing+0x5ce>
 80012c6:	4b20      	ldr	r3, [pc, #128]	; (8001348 <homing+0x640>)
 80012c8:	7e1b      	ldrb	r3, [r3, #24]
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d103      	bne.n	80012d6 <homing+0x5ce>
 80012ce:	2100      	movs	r1, #0
 80012d0:	481e      	ldr	r0, [pc, #120]	; (800134c <homing+0x644>)
 80012d2:	f009 f83b 	bl	800a34c <HAL_TIM_PWM_Start>
            if (ES2s_UNPRESSED && !motor2.hom)Start_PWM_MOTOR_2;
 80012d6:	2104      	movs	r1, #4
 80012d8:	4817      	ldr	r0, [pc, #92]	; (8001338 <homing+0x630>)
 80012da:	f006 fa97 	bl	800780c <HAL_GPIO_ReadPin>
 80012de:	4603      	mov	r3, r0
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d007      	beq.n	80012f4 <homing+0x5ec>
 80012e4:	4b1a      	ldr	r3, [pc, #104]	; (8001350 <homing+0x648>)
 80012e6:	7e1b      	ldrb	r3, [r3, #24]
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d103      	bne.n	80012f4 <homing+0x5ec>
 80012ec:	2100      	movs	r1, #0
 80012ee:	4819      	ldr	r0, [pc, #100]	; (8001354 <homing+0x64c>)
 80012f0:	f009 f82c 	bl	800a34c <HAL_TIM_PWM_Start>
        }// ES3s_UNPRESSED : Se dejó de presionar el FC3 sup



        if (motor1.hom && motor2.hom && motor3.hom){
 80012f4:	4b14      	ldr	r3, [pc, #80]	; (8001348 <homing+0x640>)
 80012f6:	7e1b      	ldrb	r3, [r3, #24]
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d010      	beq.n	800131e <homing+0x616>
 80012fc:	4b14      	ldr	r3, [pc, #80]	; (8001350 <homing+0x648>)
 80012fe:	7e1b      	ldrb	r3, [r3, #24]
 8001300:	2b00      	cmp	r3, #0
 8001302:	d00c      	beq.n	800131e <homing+0x616>
 8001304:	4b0d      	ldr	r3, [pc, #52]	; (800133c <homing+0x634>)
 8001306:	7e1b      	ldrb	r3, [r3, #24]
 8001308:	2b00      	cmp	r3, #0
 800130a:	d008      	beq.n	800131e <homing+0x616>
        	homFin=true;
 800130c:	4b12      	ldr	r3, [pc, #72]	; (8001358 <homing+0x650>)
 800130e:	2201      	movs	r2, #1
 8001310:	701a      	strb	r2, [r3, #0]
        	HAL_UART_Transmit(&huart3,(uint8_t *)"FH\n", 4, 100);
 8001312:	2364      	movs	r3, #100	; 0x64
 8001314:	2204      	movs	r2, #4
 8001316:	4911      	ldr	r1, [pc, #68]	; (800135c <homing+0x654>)
 8001318:	480a      	ldr	r0, [pc, #40]	; (8001344 <homing+0x63c>)
 800131a:	f00a fe1d 	bl	800bf58 <HAL_UART_Transmit>
    while (!homFin){
 800131e:	4b0e      	ldr	r3, [pc, #56]	; (8001358 <homing+0x650>)
 8001320:	781b      	ldrb	r3, [r3, #0]
 8001322:	2b00      	cmp	r3, #0
 8001324:	f43f aebb 	beq.w	800109e <homing+0x396>
        }
       }


    }
 8001328:	bf00      	nop
 800132a:	bf00      	nop
 800132c:	bd80      	pop	{r7, pc}
 800132e:	bf00      	nop
 8001330:	58020800 	.word	0x58020800
 8001334:	24000790 	.word	0x24000790
 8001338:	58021000 	.word	0x58021000
 800133c:	24000400 	.word	0x24000400
 8001340:	080121b8 	.word	0x080121b8
 8001344:	24000a00 	.word	0x24000a00
 8001348:	24000370 	.word	0x24000370
 800134c:	240006f8 	.word	0x240006f8
 8001350:	240003b8 	.word	0x240003b8
 8001354:	24000744 	.word	0x24000744
 8001358:	24000459 	.word	0x24000459
 800135c:	080121bc 	.word	0x080121bc

08001360 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8001360:	b480      	push	{r7}
 8001362:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001364:	f3bf 8f4f 	dsb	sy
}
 8001368:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800136a:	4b06      	ldr	r3, [pc, #24]	; (8001384 <__NVIC_SystemReset+0x24>)
 800136c:	68db      	ldr	r3, [r3, #12]
 800136e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8001372:	4904      	ldr	r1, [pc, #16]	; (8001384 <__NVIC_SystemReset+0x24>)
 8001374:	4b04      	ldr	r3, [pc, #16]	; (8001388 <__NVIC_SystemReset+0x28>)
 8001376:	4313      	orrs	r3, r2
 8001378:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800137a:	f3bf 8f4f 	dsb	sy
}
 800137e:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8001380:	bf00      	nop
 8001382:	e7fd      	b.n	8001380 <__NVIC_SystemReset+0x20>
 8001384:	e000ed00 	.word	0xe000ed00
 8001388:	05fa0004 	.word	0x05fa0004

0800138c <interpretaComando>:
bool newline_detected = false;
volatile double aux;
uint8_t auxString[10];
int i,j;

void interpretaComando(void){
 800138c:	b580      	push	{r7, lr}
 800138e:	b084      	sub	sp, #16
 8001390:	af00      	add	r7, sp, #0

	switch(rx_buffer[0]){
 8001392:	4b95      	ldr	r3, [pc, #596]	; (80015e8 <interpretaComando+0x25c>)
 8001394:	781b      	ldrb	r3, [r3, #0]
 8001396:	3b44      	subs	r3, #68	; 0x44
 8001398:	2b2e      	cmp	r3, #46	; 0x2e
 800139a:	f200 8178 	bhi.w	800168e <interpretaComando+0x302>
 800139e:	a201      	add	r2, pc, #4	; (adr r2, 80013a4 <interpretaComando+0x18>)
 80013a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013a4:	08001681 	.word	0x08001681
 80013a8:	0800168f 	.word	0x0800168f
 80013ac:	0800168f 	.word	0x0800168f
 80013b0:	0800168f 	.word	0x0800168f
 80013b4:	08001461 	.word	0x08001461
 80013b8:	0800168f 	.word	0x0800168f
 80013bc:	0800168f 	.word	0x0800168f
 80013c0:	0800168f 	.word	0x0800168f
 80013c4:	0800168f 	.word	0x0800168f
 80013c8:	0800168f 	.word	0x0800168f
 80013cc:	0800168f 	.word	0x0800168f
 80013d0:	0800168f 	.word	0x0800168f
 80013d4:	08001469 	.word	0x08001469
 80013d8:	0800168f 	.word	0x0800168f
 80013dc:	08001671 	.word	0x08001671
 80013e0:	0800168f 	.word	0x0800168f
 80013e4:	0800168f 	.word	0x0800168f
 80013e8:	0800168f 	.word	0x0800168f
 80013ec:	0800168f 	.word	0x0800168f
 80013f0:	0800168f 	.word	0x0800168f
 80013f4:	0800168f 	.word	0x0800168f
 80013f8:	0800168f 	.word	0x0800168f
 80013fc:	0800168f 	.word	0x0800168f
 8001400:	0800168f 	.word	0x0800168f
 8001404:	0800168f 	.word	0x0800168f
 8001408:	0800168f 	.word	0x0800168f
 800140c:	0800168f 	.word	0x0800168f
 8001410:	0800168f 	.word	0x0800168f
 8001414:	0800168f 	.word	0x0800168f
 8001418:	0800168f 	.word	0x0800168f
 800141c:	0800168f 	.word	0x0800168f
 8001420:	0800168f 	.word	0x0800168f
 8001424:	08001681 	.word	0x08001681
 8001428:	0800168f 	.word	0x0800168f
 800142c:	0800168f 	.word	0x0800168f
 8001430:	0800168f 	.word	0x0800168f
 8001434:	08001461 	.word	0x08001461
 8001438:	0800168f 	.word	0x0800168f
 800143c:	0800168f 	.word	0x0800168f
 8001440:	0800168f 	.word	0x0800168f
 8001444:	0800168f 	.word	0x0800168f
 8001448:	0800168f 	.word	0x0800168f
 800144c:	0800168f 	.word	0x0800168f
 8001450:	0800168f 	.word	0x0800168f
 8001454:	08001469 	.word	0x08001469
 8001458:	0800168f 	.word	0x0800168f
 800145c:	08001671 	.word	0x08001671


	case 'H':
	case 'h':
		state = HOME;
 8001460:	4b62      	ldr	r3, [pc, #392]	; (80015ec <interpretaComando+0x260>)
 8001462:	2203      	movs	r2, #3
 8001464:	701a      	strb	r2, [r3, #0]
	break;
 8001466:	e113      	b.n	8001690 <interpretaComando+0x304>

	case 'P':	//Formato de la trama  :Px0.1 y0.1 z-0.5(Eje, valor, espacio, Eje, valor, espacio, Eje, valor)
	case 'p':
		//TODO: VER SI SE PUEDE DEFINIR i,j como int. y asi borrar la variable flagError
		//flagErrorEndStop = 0;
		i = 1;
 8001468:	4b61      	ldr	r3, [pc, #388]	; (80015f0 <interpretaComando+0x264>)
 800146a:	2201      	movs	r2, #1
 800146c:	601a      	str	r2, [r3, #0]
		j = 0;
 800146e:	4b61      	ldr	r3, [pc, #388]	; (80015f4 <interpretaComando+0x268>)
 8001470:	2200      	movs	r2, #0
 8001472:	601a      	str	r2, [r3, #0]
		while(rx_buffer[i] != 0 && !newline_detected){
 8001474:	e0ed      	b.n	8001652 <interpretaComando+0x2c6>
			if(rx_buffer[i] == 'x'){
 8001476:	4b5e      	ldr	r3, [pc, #376]	; (80015f0 <interpretaComando+0x264>)
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	4a5b      	ldr	r2, [pc, #364]	; (80015e8 <interpretaComando+0x25c>)
 800147c:	5cd3      	ldrb	r3, [r2, r3]
 800147e:	2b78      	cmp	r3, #120	; 0x78
 8001480:	d13b      	bne.n	80014fa <interpretaComando+0x16e>
				while(rx_buffer[i+1] != ' '){			//Almacenar dato en buffer hasta que se encuentre un espacio
 8001482:	e012      	b.n	80014aa <interpretaComando+0x11e>
					auxString[j] = rx_buffer[i+1];
 8001484:	4b5a      	ldr	r3, [pc, #360]	; (80015f0 <interpretaComando+0x264>)
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	1c5a      	adds	r2, r3, #1
 800148a:	4b5a      	ldr	r3, [pc, #360]	; (80015f4 <interpretaComando+0x268>)
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	4956      	ldr	r1, [pc, #344]	; (80015e8 <interpretaComando+0x25c>)
 8001490:	5c89      	ldrb	r1, [r1, r2]
 8001492:	4a59      	ldr	r2, [pc, #356]	; (80015f8 <interpretaComando+0x26c>)
 8001494:	54d1      	strb	r1, [r2, r3]
					j++;
 8001496:	4b57      	ldr	r3, [pc, #348]	; (80015f4 <interpretaComando+0x268>)
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	3301      	adds	r3, #1
 800149c:	4a55      	ldr	r2, [pc, #340]	; (80015f4 <interpretaComando+0x268>)
 800149e:	6013      	str	r3, [r2, #0]
					i++;
 80014a0:	4b53      	ldr	r3, [pc, #332]	; (80015f0 <interpretaComando+0x264>)
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	3301      	adds	r3, #1
 80014a6:	4a52      	ldr	r2, [pc, #328]	; (80015f0 <interpretaComando+0x264>)
 80014a8:	6013      	str	r3, [r2, #0]
				while(rx_buffer[i+1] != ' '){			//Almacenar dato en buffer hasta que se encuentre un espacio
 80014aa:	4b51      	ldr	r3, [pc, #324]	; (80015f0 <interpretaComando+0x264>)
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	3301      	adds	r3, #1
 80014b0:	4a4d      	ldr	r2, [pc, #308]	; (80015e8 <interpretaComando+0x25c>)
 80014b2:	5cd3      	ldrb	r3, [r2, r3]
 80014b4:	2b20      	cmp	r3, #32
 80014b6:	d1e5      	bne.n	8001484 <interpretaComando+0xf8>
				}
				Pfin.x = strtod(&auxString[0], NULL);
 80014b8:	2100      	movs	r1, #0
 80014ba:	484f      	ldr	r0, [pc, #316]	; (80015f8 <interpretaComando+0x26c>)
 80014bc:	f00e fc9e 	bl	800fdfc <strtod>
 80014c0:	eeb0 7b40 	vmov.f64	d7, d0
 80014c4:	4b4d      	ldr	r3, [pc, #308]	; (80015fc <interpretaComando+0x270>)
 80014c6:	ed83 7b00 	vstr	d7, [r3]
				for (int k = 0; k <= 10; k++) {
 80014ca:	2300      	movs	r3, #0
 80014cc:	60fb      	str	r3, [r7, #12]
 80014ce:	e007      	b.n	80014e0 <interpretaComando+0x154>
					auxString[k] = 0;
 80014d0:	4a49      	ldr	r2, [pc, #292]	; (80015f8 <interpretaComando+0x26c>)
 80014d2:	68fb      	ldr	r3, [r7, #12]
 80014d4:	4413      	add	r3, r2
 80014d6:	2200      	movs	r2, #0
 80014d8:	701a      	strb	r2, [r3, #0]
				for (int k = 0; k <= 10; k++) {
 80014da:	68fb      	ldr	r3, [r7, #12]
 80014dc:	3301      	adds	r3, #1
 80014de:	60fb      	str	r3, [r7, #12]
 80014e0:	68fb      	ldr	r3, [r7, #12]
 80014e2:	2b0a      	cmp	r3, #10
 80014e4:	ddf4      	ble.n	80014d0 <interpretaComando+0x144>
				}
				j=0;
 80014e6:	4b43      	ldr	r3, [pc, #268]	; (80015f4 <interpretaComando+0x268>)
 80014e8:	2200      	movs	r2, #0
 80014ea:	601a      	str	r2, [r3, #0]
				HAL_UART_Transmit(&huart3, (uint8_t *)"Px_ok\n", 7, 100);
 80014ec:	2364      	movs	r3, #100	; 0x64
 80014ee:	2207      	movs	r2, #7
 80014f0:	4943      	ldr	r1, [pc, #268]	; (8001600 <interpretaComando+0x274>)
 80014f2:	4844      	ldr	r0, [pc, #272]	; (8001604 <interpretaComando+0x278>)
 80014f4:	f00a fd30 	bl	800bf58 <HAL_UART_Transmit>
 80014f8:	e0a6      	b.n	8001648 <interpretaComando+0x2bc>
			}
			else if(rx_buffer[i] == 'y'){
 80014fa:	4b3d      	ldr	r3, [pc, #244]	; (80015f0 <interpretaComando+0x264>)
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	4a3a      	ldr	r2, [pc, #232]	; (80015e8 <interpretaComando+0x25c>)
 8001500:	5cd3      	ldrb	r3, [r2, r3]
 8001502:	2b79      	cmp	r3, #121	; 0x79
 8001504:	d13b      	bne.n	800157e <interpretaComando+0x1f2>
				while(rx_buffer[i+1] != ' '){			//Almacenar dato en buffer hasta que se encuentre un espacio
 8001506:	e012      	b.n	800152e <interpretaComando+0x1a2>
					auxString[j] = rx_buffer[i+1];
 8001508:	4b39      	ldr	r3, [pc, #228]	; (80015f0 <interpretaComando+0x264>)
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	1c5a      	adds	r2, r3, #1
 800150e:	4b39      	ldr	r3, [pc, #228]	; (80015f4 <interpretaComando+0x268>)
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	4935      	ldr	r1, [pc, #212]	; (80015e8 <interpretaComando+0x25c>)
 8001514:	5c89      	ldrb	r1, [r1, r2]
 8001516:	4a38      	ldr	r2, [pc, #224]	; (80015f8 <interpretaComando+0x26c>)
 8001518:	54d1      	strb	r1, [r2, r3]
					j++;
 800151a:	4b36      	ldr	r3, [pc, #216]	; (80015f4 <interpretaComando+0x268>)
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	3301      	adds	r3, #1
 8001520:	4a34      	ldr	r2, [pc, #208]	; (80015f4 <interpretaComando+0x268>)
 8001522:	6013      	str	r3, [r2, #0]
					i++;
 8001524:	4b32      	ldr	r3, [pc, #200]	; (80015f0 <interpretaComando+0x264>)
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	3301      	adds	r3, #1
 800152a:	4a31      	ldr	r2, [pc, #196]	; (80015f0 <interpretaComando+0x264>)
 800152c:	6013      	str	r3, [r2, #0]
				while(rx_buffer[i+1] != ' '){			//Almacenar dato en buffer hasta que se encuentre un espacio
 800152e:	4b30      	ldr	r3, [pc, #192]	; (80015f0 <interpretaComando+0x264>)
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	3301      	adds	r3, #1
 8001534:	4a2c      	ldr	r2, [pc, #176]	; (80015e8 <interpretaComando+0x25c>)
 8001536:	5cd3      	ldrb	r3, [r2, r3]
 8001538:	2b20      	cmp	r3, #32
 800153a:	d1e5      	bne.n	8001508 <interpretaComando+0x17c>
				}
				Pfin.y = strtod(&auxString[0], NULL);
 800153c:	2100      	movs	r1, #0
 800153e:	482e      	ldr	r0, [pc, #184]	; (80015f8 <interpretaComando+0x26c>)
 8001540:	f00e fc5c 	bl	800fdfc <strtod>
 8001544:	eeb0 7b40 	vmov.f64	d7, d0
 8001548:	4b2c      	ldr	r3, [pc, #176]	; (80015fc <interpretaComando+0x270>)
 800154a:	ed83 7b02 	vstr	d7, [r3, #8]
				for (int k = 0; k <= 10; k++) {
 800154e:	2300      	movs	r3, #0
 8001550:	60bb      	str	r3, [r7, #8]
 8001552:	e007      	b.n	8001564 <interpretaComando+0x1d8>
					auxString[k] = 0;
 8001554:	4a28      	ldr	r2, [pc, #160]	; (80015f8 <interpretaComando+0x26c>)
 8001556:	68bb      	ldr	r3, [r7, #8]
 8001558:	4413      	add	r3, r2
 800155a:	2200      	movs	r2, #0
 800155c:	701a      	strb	r2, [r3, #0]
				for (int k = 0; k <= 10; k++) {
 800155e:	68bb      	ldr	r3, [r7, #8]
 8001560:	3301      	adds	r3, #1
 8001562:	60bb      	str	r3, [r7, #8]
 8001564:	68bb      	ldr	r3, [r7, #8]
 8001566:	2b0a      	cmp	r3, #10
 8001568:	ddf4      	ble.n	8001554 <interpretaComando+0x1c8>
				}
				j=0;
 800156a:	4b22      	ldr	r3, [pc, #136]	; (80015f4 <interpretaComando+0x268>)
 800156c:	2200      	movs	r2, #0
 800156e:	601a      	str	r2, [r3, #0]
				HAL_UART_Transmit(&huart3,(uint8_t *)"Py_ok\n", 7, 100);
 8001570:	2364      	movs	r3, #100	; 0x64
 8001572:	2207      	movs	r2, #7
 8001574:	4924      	ldr	r1, [pc, #144]	; (8001608 <interpretaComando+0x27c>)
 8001576:	4823      	ldr	r0, [pc, #140]	; (8001604 <interpretaComando+0x278>)
 8001578:	f00a fcee 	bl	800bf58 <HAL_UART_Transmit>
 800157c:	e064      	b.n	8001648 <interpretaComando+0x2bc>
			}
			else if(rx_buffer[i] == 'z'){
 800157e:	4b1c      	ldr	r3, [pc, #112]	; (80015f0 <interpretaComando+0x264>)
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	4a19      	ldr	r2, [pc, #100]	; (80015e8 <interpretaComando+0x25c>)
 8001584:	5cd3      	ldrb	r3, [r2, r3]
 8001586:	2b7a      	cmp	r3, #122	; 0x7a
 8001588:	d15e      	bne.n	8001648 <interpretaComando+0x2bc>
				while(rx_buffer[i+1] != '\n' && rx_buffer[i+1] != 0){			//Almacenar dato en buffer hasta que se encuentre un espacio
 800158a:	e012      	b.n	80015b2 <interpretaComando+0x226>
					auxString[j] = rx_buffer[i+1];
 800158c:	4b18      	ldr	r3, [pc, #96]	; (80015f0 <interpretaComando+0x264>)
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	1c5a      	adds	r2, r3, #1
 8001592:	4b18      	ldr	r3, [pc, #96]	; (80015f4 <interpretaComando+0x268>)
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	4914      	ldr	r1, [pc, #80]	; (80015e8 <interpretaComando+0x25c>)
 8001598:	5c89      	ldrb	r1, [r1, r2]
 800159a:	4a17      	ldr	r2, [pc, #92]	; (80015f8 <interpretaComando+0x26c>)
 800159c:	54d1      	strb	r1, [r2, r3]
					j++;
 800159e:	4b15      	ldr	r3, [pc, #84]	; (80015f4 <interpretaComando+0x268>)
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	3301      	adds	r3, #1
 80015a4:	4a13      	ldr	r2, [pc, #76]	; (80015f4 <interpretaComando+0x268>)
 80015a6:	6013      	str	r3, [r2, #0]
					i++;
 80015a8:	4b11      	ldr	r3, [pc, #68]	; (80015f0 <interpretaComando+0x264>)
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	3301      	adds	r3, #1
 80015ae:	4a10      	ldr	r2, [pc, #64]	; (80015f0 <interpretaComando+0x264>)
 80015b0:	6013      	str	r3, [r2, #0]
				while(rx_buffer[i+1] != '\n' && rx_buffer[i+1] != 0){			//Almacenar dato en buffer hasta que se encuentre un espacio
 80015b2:	4b0f      	ldr	r3, [pc, #60]	; (80015f0 <interpretaComando+0x264>)
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	3301      	adds	r3, #1
 80015b8:	4a0b      	ldr	r2, [pc, #44]	; (80015e8 <interpretaComando+0x25c>)
 80015ba:	5cd3      	ldrb	r3, [r2, r3]
 80015bc:	2b0a      	cmp	r3, #10
 80015be:	d006      	beq.n	80015ce <interpretaComando+0x242>
 80015c0:	4b0b      	ldr	r3, [pc, #44]	; (80015f0 <interpretaComando+0x264>)
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	3301      	adds	r3, #1
 80015c6:	4a08      	ldr	r2, [pc, #32]	; (80015e8 <interpretaComando+0x25c>)
 80015c8:	5cd3      	ldrb	r3, [r2, r3]
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d1de      	bne.n	800158c <interpretaComando+0x200>
				}
				Pfin.z = strtod(&auxString[0], NULL);
 80015ce:	2100      	movs	r1, #0
 80015d0:	4809      	ldr	r0, [pc, #36]	; (80015f8 <interpretaComando+0x26c>)
 80015d2:	f00e fc13 	bl	800fdfc <strtod>
 80015d6:	eeb0 7b40 	vmov.f64	d7, d0
 80015da:	4b08      	ldr	r3, [pc, #32]	; (80015fc <interpretaComando+0x270>)
 80015dc:	ed83 7b04 	vstr	d7, [r3, #16]
				for (int k = 0; k <= 10; k++) {
 80015e0:	2300      	movs	r3, #0
 80015e2:	607b      	str	r3, [r7, #4]
 80015e4:	e01a      	b.n	800161c <interpretaComando+0x290>
 80015e6:	bf00      	nop
 80015e8:	2400057c 	.word	0x2400057c
 80015ec:	24000458 	.word	0x24000458
 80015f0:	2400028c 	.word	0x2400028c
 80015f4:	24000290 	.word	0x24000290
 80015f8:	24000280 	.word	0x24000280
 80015fc:	240004b8 	.word	0x240004b8
 8001600:	080121c0 	.word	0x080121c0
 8001604:	24000a00 	.word	0x24000a00
 8001608:	080121c8 	.word	0x080121c8
					auxString[k] = 0;
 800160c:	4a22      	ldr	r2, [pc, #136]	; (8001698 <interpretaComando+0x30c>)
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	4413      	add	r3, r2
 8001612:	2200      	movs	r2, #0
 8001614:	701a      	strb	r2, [r3, #0]
				for (int k = 0; k <= 10; k++) {
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	3301      	adds	r3, #1
 800161a:	607b      	str	r3, [r7, #4]
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	2b0a      	cmp	r3, #10
 8001620:	ddf4      	ble.n	800160c <interpretaComando+0x280>
				}
				j=0;
 8001622:	4b1e      	ldr	r3, [pc, #120]	; (800169c <interpretaComando+0x310>)
 8001624:	2200      	movs	r2, #0
 8001626:	601a      	str	r2, [r3, #0]
				HAL_UART_Transmit(&huart3,(uint8_t *)"Pz_ok\n", 7, 100);
 8001628:	2364      	movs	r3, #100	; 0x64
 800162a:	2207      	movs	r2, #7
 800162c:	491c      	ldr	r1, [pc, #112]	; (80016a0 <interpretaComando+0x314>)
 800162e:	481d      	ldr	r0, [pc, #116]	; (80016a4 <interpretaComando+0x318>)
 8001630:	f00a fc92 	bl	800bf58 <HAL_UART_Transmit>
				if(rx_buffer[i+1] == '\n'){	//Detectar salto de línea
 8001634:	4b1c      	ldr	r3, [pc, #112]	; (80016a8 <interpretaComando+0x31c>)
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	3301      	adds	r3, #1
 800163a:	4a1c      	ldr	r2, [pc, #112]	; (80016ac <interpretaComando+0x320>)
 800163c:	5cd3      	ldrb	r3, [r2, r3]
 800163e:	2b0a      	cmp	r3, #10
 8001640:	d102      	bne.n	8001648 <interpretaComando+0x2bc>
				    newline_detected = true;
 8001642:	4b1b      	ldr	r3, [pc, #108]	; (80016b0 <interpretaComando+0x324>)
 8001644:	2201      	movs	r2, #1
 8001646:	701a      	strb	r2, [r3, #0]
				}
			}
			i++;
 8001648:	4b17      	ldr	r3, [pc, #92]	; (80016a8 <interpretaComando+0x31c>)
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	3301      	adds	r3, #1
 800164e:	4a16      	ldr	r2, [pc, #88]	; (80016a8 <interpretaComando+0x31c>)
 8001650:	6013      	str	r3, [r2, #0]
		while(rx_buffer[i] != 0 && !newline_detected){
 8001652:	4b15      	ldr	r3, [pc, #84]	; (80016a8 <interpretaComando+0x31c>)
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	4a15      	ldr	r2, [pc, #84]	; (80016ac <interpretaComando+0x320>)
 8001658:	5cd3      	ldrb	r3, [r2, r3]
 800165a:	2b00      	cmp	r3, #0
 800165c:	d004      	beq.n	8001668 <interpretaComando+0x2dc>
 800165e:	4b14      	ldr	r3, [pc, #80]	; (80016b0 <interpretaComando+0x324>)
 8001660:	781b      	ldrb	r3, [r3, #0]
 8001662:	2b00      	cmp	r3, #0
 8001664:	f43f af07 	beq.w	8001476 <interpretaComando+0xea>
		}

		receptionFlag = true;
 8001668:	4b12      	ldr	r3, [pc, #72]	; (80016b4 <interpretaComando+0x328>)
 800166a:	2201      	movs	r2, #1
 800166c:	701a      	strb	r2, [r3, #0]
		break;
 800166e:	e00f      	b.n	8001690 <interpretaComando+0x304>


	case 'r':
	case 'R':
		HAL_UART_Transmit(&huart3, (uint8_t *)"Resetting...\n", 14, 100);
 8001670:	2364      	movs	r3, #100	; 0x64
 8001672:	220e      	movs	r2, #14
 8001674:	4910      	ldr	r1, [pc, #64]	; (80016b8 <interpretaComando+0x32c>)
 8001676:	480b      	ldr	r0, [pc, #44]	; (80016a4 <interpretaComando+0x318>)
 8001678:	f00a fc6e 	bl	800bf58 <HAL_UART_Transmit>
		NVIC_SystemReset();
 800167c:	f7ff fe70 	bl	8001360 <__NVIC_SystemReset>

		break;

	case 'd':
	case 'D':
		readFile = true;
 8001680:	4b0e      	ldr	r3, [pc, #56]	; (80016bc <interpretaComando+0x330>)
 8001682:	2201      	movs	r2, #1
 8001684:	701a      	strb	r2, [r3, #0]
		state = DEMO;
 8001686:	4b0e      	ldr	r3, [pc, #56]	; (80016c0 <interpretaComando+0x334>)
 8001688:	2204      	movs	r2, #4
 800168a:	701a      	strb	r2, [r3, #0]
		break;
 800168c:	e000      	b.n	8001690 <interpretaComando+0x304>

	default:break;
 800168e:	bf00      	nop


	}

}
 8001690:	bf00      	nop
 8001692:	3710      	adds	r7, #16
 8001694:	46bd      	mov	sp, r7
 8001696:	bd80      	pop	{r7, pc}
 8001698:	24000280 	.word	0x24000280
 800169c:	24000290 	.word	0x24000290
 80016a0:	080121d0 	.word	0x080121d0
 80016a4:	24000a00 	.word	0x24000a00
 80016a8:	2400028c 	.word	0x2400028c
 80016ac:	2400057c 	.word	0x2400057c
 80016b0:	2400027e 	.word	0x2400027e
 80016b4:	2400059b 	.word	0x2400059b
 80016b8:	080121d8 	.word	0x080121d8
 80016bc:	2400059c 	.word	0x2400059c
 80016c0:	24000458 	.word	0x24000458
 80016c4:	00000000 	.word	0x00000000

080016c8 <inverseKinematic>:
double A1, B1, C1, XJ1_1, XJ1_2, YJ1_1, YJ1_2, ZJ1_1, ZJ1_2, A11, A12, A13, A14, A15;
double A2, B2, C2, XJ2_1, XJ2_2, YJ2_1, YJ2_2, ZJ2_1, ZJ2_2;
double A3, B3, C3, XJ3_1, XJ3_2, YJ3_1, YJ3_2, ZJ3_1, ZJ3_2;


void inverseKinematic(Vec3D _Pfin) {
 80016c8:	b580      	push	{r7, lr}
 80016ca:	ed2d 8b04 	vpush	{d8-d9}
 80016ce:	b086      	sub	sp, #24
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	eeb0 5b40 	vmov.f64	d5, d0
 80016d6:	eeb0 6b41 	vmov.f64	d6, d1
 80016da:	eeb0 7b42 	vmov.f64	d7, d2
 80016de:	ed87 5b00 	vstr	d5, [r7]
 80016e2:	ed87 6b02 	vstr	d6, [r7, #8]
 80016e6:	ed87 7b04 	vstr	d7, [r7, #16]

	A1 = 1.0 + pow(((-2.0  * (R + (_Pfin.y - r))) / (2 * _Pfin.z)), 2);
 80016ea:	ed97 7b02 	vldr	d7, [r7, #8]
 80016ee:	ed9f 6bee 	vldr	d6, [pc, #952]	; 8001aa8 <inverseKinematic+0x3e0>
 80016f2:	ee37 7b46 	vsub.f64	d7, d7, d6
 80016f6:	ed9f 6bee 	vldr	d6, [pc, #952]	; 8001ab0 <inverseKinematic+0x3e8>
 80016fa:	ee37 7b06 	vadd.f64	d7, d7, d6
 80016fe:	eeb8 6b00 	vmov.f64	d6, #128	; 0xc0000000 -2.0
 8001702:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001706:	ed97 7b04 	vldr	d7, [r7, #16]
 800170a:	ee37 7b07 	vadd.f64	d7, d7, d7
 800170e:	ee86 5b07 	vdiv.f64	d5, d6, d7
 8001712:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8001716:	eeb0 0b45 	vmov.f64	d0, d5
 800171a:	f010 f90d 	bl	8011938 <pow>
 800171e:	eeb0 7b40 	vmov.f64	d7, d0
 8001722:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8001726:	ee37 7b06 	vadd.f64	d7, d7, d6
 800172a:	4bf9      	ldr	r3, [pc, #996]	; (8001b10 <inverseKinematic+0x448>)
 800172c:	ed83 7b00 	vstr	d7, [r3]
	A2 = 4.0 + pow(((2.0 * sqrt(3.0) * R * C30 + 2.0 * R * S30 - 2.0 * sqrt(3) * (_Pfin.x + r * C30) - 2.0 * (_Pfin.y + r * S30)) / (2.0 * _Pfin.z)), 2.0);
 8001730:	ed97 7b00 	vldr	d7, [r7]
 8001734:	ed9f 6be0 	vldr	d6, [pc, #896]	; 8001ab8 <inverseKinematic+0x3f0>
 8001738:	ee37 7b06 	vadd.f64	d7, d7, d6
 800173c:	ed9f 6be0 	vldr	d6, [pc, #896]	; 8001ac0 <inverseKinematic+0x3f8>
 8001740:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001744:	ed9f 6be0 	vldr	d6, [pc, #896]	; 8001ac8 <inverseKinematic+0x400>
 8001748:	ee36 6b47 	vsub.f64	d6, d6, d7
 800174c:	ed97 7b02 	vldr	d7, [r7, #8]
 8001750:	ed9f 5bdf 	vldr	d5, [pc, #892]	; 8001ad0 <inverseKinematic+0x408>
 8001754:	ee37 7b05 	vadd.f64	d7, d7, d5
 8001758:	ee37 7b07 	vadd.f64	d7, d7, d7
 800175c:	ee36 6b47 	vsub.f64	d6, d6, d7
 8001760:	ed97 7b04 	vldr	d7, [r7, #16]
 8001764:	ee37 7b07 	vadd.f64	d7, d7, d7
 8001768:	ee86 5b07 	vdiv.f64	d5, d6, d7
 800176c:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8001770:	eeb0 0b45 	vmov.f64	d0, d5
 8001774:	f010 f8e0 	bl	8011938 <pow>
 8001778:	eeb0 7b40 	vmov.f64	d7, d0
 800177c:	eeb1 6b00 	vmov.f64	d6, #16	; 0x40800000  4.0
 8001780:	ee37 7b06 	vadd.f64	d7, d7, d6
 8001784:	4be3      	ldr	r3, [pc, #908]	; (8001b14 <inverseKinematic+0x44c>)
 8001786:	ed83 7b00 	vstr	d7, [r3]
	A3 = 4.0 + pow(((2.0 * sqrt(3.0) * (_Pfin.x + r * C150) - 2.0 * (_Pfin.y + r * S150) - 2.0 * sqrt(3) * R * C150 + 2.0 * R * S150) / (2.0 * _Pfin.z)), 2.0);
 800178a:	ed97 7b00 	vldr	d7, [r7]
 800178e:	ed9f 6bca 	vldr	d6, [pc, #808]	; 8001ab8 <inverseKinematic+0x3f0>
 8001792:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001796:	ed9f 6bca 	vldr	d6, [pc, #808]	; 8001ac0 <inverseKinematic+0x3f8>
 800179a:	ee27 6b06 	vmul.f64	d6, d7, d6
 800179e:	ed97 7b02 	vldr	d7, [r7, #8]
 80017a2:	ed9f 5bcb 	vldr	d5, [pc, #812]	; 8001ad0 <inverseKinematic+0x408>
 80017a6:	ee37 7b05 	vadd.f64	d7, d7, d5
 80017aa:	ee37 7b07 	vadd.f64	d7, d7, d7
 80017ae:	ee36 7b47 	vsub.f64	d7, d6, d7
 80017b2:	ed9f 6bc9 	vldr	d6, [pc, #804]	; 8001ad8 <inverseKinematic+0x410>
 80017b6:	ee37 7b06 	vadd.f64	d7, d7, d6
 80017ba:	ed9f 6bbd 	vldr	d6, [pc, #756]	; 8001ab0 <inverseKinematic+0x3e8>
 80017be:	ee37 6b06 	vadd.f64	d6, d7, d6
 80017c2:	ed97 7b04 	vldr	d7, [r7, #16]
 80017c6:	ee37 7b07 	vadd.f64	d7, d7, d7
 80017ca:	ee86 5b07 	vdiv.f64	d5, d6, d7
 80017ce:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 80017d2:	eeb0 0b45 	vmov.f64	d0, d5
 80017d6:	f010 f8af 	bl	8011938 <pow>
 80017da:	eeb0 7b40 	vmov.f64	d7, d0
 80017de:	eeb1 6b00 	vmov.f64	d6, #16	; 0x40800000  4.0
 80017e2:	ee37 7b06 	vadd.f64	d7, d7, d6
 80017e6:	4bcc      	ldr	r3, [pc, #816]	; (8001b18 <inverseKinematic+0x450>)
 80017e8:	ed83 7b00 	vstr	d7, [r3]

	B1 = (2.0 * R) + (2.0 * ((-2.0  * (R + (_Pfin.y - r))) / (2.0 * _Pfin.z)) * ((-pow(R, 2.0) + pow(L1, 2.0) + pow((_Pfin.y - r), 2.0) + pow(_Pfin.z, 2.0) - pow(L2, 2.0) + pow(_Pfin.x, 2)) / (2 * _Pfin.z)));
 80017ec:	ed97 7b02 	vldr	d7, [r7, #8]
 80017f0:	ed9f 6bad 	vldr	d6, [pc, #692]	; 8001aa8 <inverseKinematic+0x3e0>
 80017f4:	ee37 7b46 	vsub.f64	d7, d7, d6
 80017f8:	ed9f 6bad 	vldr	d6, [pc, #692]	; 8001ab0 <inverseKinematic+0x3e8>
 80017fc:	ee37 7b06 	vadd.f64	d7, d7, d6
 8001800:	eeb8 6b00 	vmov.f64	d6, #128	; 0xc0000000 -2.0
 8001804:	ee27 5b06 	vmul.f64	d5, d7, d6
 8001808:	ed97 7b04 	vldr	d7, [r7, #16]
 800180c:	ee37 6b07 	vadd.f64	d6, d7, d7
 8001810:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8001814:	ee37 8b07 	vadd.f64	d8, d7, d7
 8001818:	ed97 7b02 	vldr	d7, [r7, #8]
 800181c:	ed9f 6ba2 	vldr	d6, [pc, #648]	; 8001aa8 <inverseKinematic+0x3e0>
 8001820:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001824:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8001828:	eeb0 0b47 	vmov.f64	d0, d7
 800182c:	f010 f884 	bl	8011938 <pow>
 8001830:	eeb0 7b40 	vmov.f64	d7, d0
 8001834:	ed9f 6baa 	vldr	d6, [pc, #680]	; 8001ae0 <inverseKinematic+0x418>
 8001838:	ee37 9b06 	vadd.f64	d9, d7, d6
 800183c:	ed97 7b04 	vldr	d7, [r7, #16]
 8001840:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8001844:	eeb0 0b47 	vmov.f64	d0, d7
 8001848:	f010 f876 	bl	8011938 <pow>
 800184c:	eeb0 7b40 	vmov.f64	d7, d0
 8001850:	ee39 7b07 	vadd.f64	d7, d9, d7
 8001854:	ed9f 6ba4 	vldr	d6, [pc, #656]	; 8001ae8 <inverseKinematic+0x420>
 8001858:	ee37 9b46 	vsub.f64	d9, d7, d6
 800185c:	ed97 7b00 	vldr	d7, [r7]
 8001860:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8001864:	eeb0 0b47 	vmov.f64	d0, d7
 8001868:	f010 f866 	bl	8011938 <pow>
 800186c:	eeb0 7b40 	vmov.f64	d7, d0
 8001870:	ee39 5b07 	vadd.f64	d5, d9, d7
 8001874:	ed97 7b04 	vldr	d7, [r7, #16]
 8001878:	ee37 6b07 	vadd.f64	d6, d7, d7
 800187c:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8001880:	ee28 7b07 	vmul.f64	d7, d8, d7
 8001884:	ed9f 6b9a 	vldr	d6, [pc, #616]	; 8001af0 <inverseKinematic+0x428>
 8001888:	ee37 7b06 	vadd.f64	d7, d7, d6
 800188c:	4ba3      	ldr	r3, [pc, #652]	; (8001b1c <inverseKinematic+0x454>)
 800188e:	ed83 7b00 	vstr	d7, [r3]
	B2 = -2.0 * sqrt(3) * R * C30 - 2.0 * R * S30 + 2.0 * (((2.0 * sqrt(3) * R * C30 + 2.0 * R * S30)	+ (-2 * sqrt(3) * (_Pfin.x + r * C30)	- 2.0 * (_Pfin.y + r * S30))) / (2 * _Pfin.z)) * ((-pow(R, 2) + pow(L1, 2) + pow((_Pfin.x + r * C30), 2) + pow((_Pfin.y + r * S30), 2) + pow(_Pfin.z, 2) - pow(L2, 2)) / (2 * _Pfin.z));
 8001892:	ed97 7b00 	vldr	d7, [r7]
 8001896:	ed9f 6b88 	vldr	d6, [pc, #544]	; 8001ab8 <inverseKinematic+0x3f0>
 800189a:	ee37 7b06 	vadd.f64	d7, d7, d6
 800189e:	ed9f 6b96 	vldr	d6, [pc, #600]	; 8001af8 <inverseKinematic+0x430>
 80018a2:	ee27 6b06 	vmul.f64	d6, d7, d6
 80018a6:	ed97 7b02 	vldr	d7, [r7, #8]
 80018aa:	ed9f 5b89 	vldr	d5, [pc, #548]	; 8001ad0 <inverseKinematic+0x408>
 80018ae:	ee37 7b05 	vadd.f64	d7, d7, d5
 80018b2:	ee37 7b07 	vadd.f64	d7, d7, d7
 80018b6:	ee36 7b47 	vsub.f64	d7, d6, d7
 80018ba:	ed9f 6b83 	vldr	d6, [pc, #524]	; 8001ac8 <inverseKinematic+0x400>
 80018be:	ee37 5b06 	vadd.f64	d5, d7, d6
 80018c2:	ed97 7b04 	vldr	d7, [r7, #16]
 80018c6:	ee37 6b07 	vadd.f64	d6, d7, d7
 80018ca:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80018ce:	ee37 8b07 	vadd.f64	d8, d7, d7
 80018d2:	ed97 7b00 	vldr	d7, [r7]
 80018d6:	ed9f 6b78 	vldr	d6, [pc, #480]	; 8001ab8 <inverseKinematic+0x3f0>
 80018da:	ee37 7b06 	vadd.f64	d7, d7, d6
 80018de:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 80018e2:	eeb0 0b47 	vmov.f64	d0, d7
 80018e6:	f010 f827 	bl	8011938 <pow>
 80018ea:	eeb0 7b40 	vmov.f64	d7, d0
 80018ee:	ed9f 6b7c 	vldr	d6, [pc, #496]	; 8001ae0 <inverseKinematic+0x418>
 80018f2:	ee37 9b06 	vadd.f64	d9, d7, d6
 80018f6:	ed97 7b02 	vldr	d7, [r7, #8]
 80018fa:	ed9f 6b75 	vldr	d6, [pc, #468]	; 8001ad0 <inverseKinematic+0x408>
 80018fe:	ee37 7b06 	vadd.f64	d7, d7, d6
 8001902:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8001906:	eeb0 0b47 	vmov.f64	d0, d7
 800190a:	f010 f815 	bl	8011938 <pow>
 800190e:	eeb0 7b40 	vmov.f64	d7, d0
 8001912:	ee39 9b07 	vadd.f64	d9, d9, d7
 8001916:	ed97 7b04 	vldr	d7, [r7, #16]
 800191a:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 800191e:	eeb0 0b47 	vmov.f64	d0, d7
 8001922:	f010 f809 	bl	8011938 <pow>
 8001926:	eeb0 7b40 	vmov.f64	d7, d0
 800192a:	ee39 7b07 	vadd.f64	d7, d9, d7
 800192e:	ed9f 6b6e 	vldr	d6, [pc, #440]	; 8001ae8 <inverseKinematic+0x420>
 8001932:	ee37 5b46 	vsub.f64	d5, d7, d6
 8001936:	ed97 7b04 	vldr	d7, [r7, #16]
 800193a:	ee37 6b07 	vadd.f64	d6, d7, d7
 800193e:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8001942:	ee28 7b07 	vmul.f64	d7, d8, d7
 8001946:	ed9f 6b60 	vldr	d6, [pc, #384]	; 8001ac8 <inverseKinematic+0x400>
 800194a:	ee37 7b46 	vsub.f64	d7, d7, d6
 800194e:	4b74      	ldr	r3, [pc, #464]	; (8001b20 <inverseKinematic+0x458>)
 8001950:	ed83 7b00 	vstr	d7, [r3]
	B3 = 2.0 * sqrt(3) * R * C150 - 2.0 * R * S150 + 2.0 * ((2.0 * sqrt(3) * (_Pfin.x + r * C150) - 2.0 * (_Pfin.y + r * S150) - 2.0 * sqrt(3) * R * C150 + 2.0 * R * S150) / (2 * _Pfin.z)) * ((pow((_Pfin.x + r * C150), 2) + pow((_Pfin.y + r * S150), 2) + pow(_Pfin.z, 2) - pow(L2, 2) - pow(R, 2) + pow(L1, 2)) / (2 * _Pfin.z));
 8001954:	ed97 7b00 	vldr	d7, [r7]
 8001958:	ed9f 6b57 	vldr	d6, [pc, #348]	; 8001ab8 <inverseKinematic+0x3f0>
 800195c:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001960:	ed9f 6b57 	vldr	d6, [pc, #348]	; 8001ac0 <inverseKinematic+0x3f8>
 8001964:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001968:	ed97 7b02 	vldr	d7, [r7, #8]
 800196c:	ed9f 5b58 	vldr	d5, [pc, #352]	; 8001ad0 <inverseKinematic+0x408>
 8001970:	ee37 7b05 	vadd.f64	d7, d7, d5
 8001974:	ee37 7b07 	vadd.f64	d7, d7, d7
 8001978:	ee36 7b47 	vsub.f64	d7, d6, d7
 800197c:	ed9f 6b56 	vldr	d6, [pc, #344]	; 8001ad8 <inverseKinematic+0x410>
 8001980:	ee37 7b06 	vadd.f64	d7, d7, d6
 8001984:	ed9f 6b4a 	vldr	d6, [pc, #296]	; 8001ab0 <inverseKinematic+0x3e8>
 8001988:	ee37 5b06 	vadd.f64	d5, d7, d6
 800198c:	ed97 7b04 	vldr	d7, [r7, #16]
 8001990:	ee37 6b07 	vadd.f64	d6, d7, d7
 8001994:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8001998:	ee37 8b07 	vadd.f64	d8, d7, d7
 800199c:	ed97 7b00 	vldr	d7, [r7]
 80019a0:	ed9f 6b45 	vldr	d6, [pc, #276]	; 8001ab8 <inverseKinematic+0x3f0>
 80019a4:	ee37 7b46 	vsub.f64	d7, d7, d6
 80019a8:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 80019ac:	eeb0 0b47 	vmov.f64	d0, d7
 80019b0:	f00f ffc2 	bl	8011938 <pow>
 80019b4:	eeb0 9b40 	vmov.f64	d9, d0
 80019b8:	ed97 7b02 	vldr	d7, [r7, #8]
 80019bc:	ed9f 6b44 	vldr	d6, [pc, #272]	; 8001ad0 <inverseKinematic+0x408>
 80019c0:	ee37 7b06 	vadd.f64	d7, d7, d6
 80019c4:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 80019c8:	eeb0 0b47 	vmov.f64	d0, d7
 80019cc:	f00f ffb4 	bl	8011938 <pow>
 80019d0:	eeb0 7b40 	vmov.f64	d7, d0
 80019d4:	ee39 9b07 	vadd.f64	d9, d9, d7
 80019d8:	ed97 7b04 	vldr	d7, [r7, #16]
 80019dc:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 80019e0:	eeb0 0b47 	vmov.f64	d0, d7
 80019e4:	f00f ffa8 	bl	8011938 <pow>
 80019e8:	eeb0 7b40 	vmov.f64	d7, d0
 80019ec:	ee39 7b07 	vadd.f64	d7, d9, d7
 80019f0:	ed9f 6b3d 	vldr	d6, [pc, #244]	; 8001ae8 <inverseKinematic+0x420>
 80019f4:	ee37 7b46 	vsub.f64	d7, d7, d6
 80019f8:	ed9f 6b41 	vldr	d6, [pc, #260]	; 8001b00 <inverseKinematic+0x438>
 80019fc:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001a00:	ed9f 6b41 	vldr	d6, [pc, #260]	; 8001b08 <inverseKinematic+0x440>
 8001a04:	ee37 5b06 	vadd.f64	d5, d7, d6
 8001a08:	ed97 7b04 	vldr	d7, [r7, #16]
 8001a0c:	ee37 6b07 	vadd.f64	d6, d7, d7
 8001a10:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8001a14:	ee28 7b07 	vmul.f64	d7, d8, d7
 8001a18:	ed9f 6b2b 	vldr	d6, [pc, #172]	; 8001ac8 <inverseKinematic+0x400>
 8001a1c:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001a20:	4b40      	ldr	r3, [pc, #256]	; (8001b24 <inverseKinematic+0x45c>)
 8001a22:	ed83 7b00 	vstr	d7, [r3]

	C1 = (pow(((pow((_Pfin.y - r), 2) + pow(_Pfin.z, 2) - pow(L2, 2) + pow(_Pfin.x, 2) - pow(R, 2) + pow(L1, 2)) / (2 * _Pfin.z)), 2) - pow(L1, 2) + pow(R, 2));
 8001a26:	ed97 7b02 	vldr	d7, [r7, #8]
 8001a2a:	ed9f 6b1f 	vldr	d6, [pc, #124]	; 8001aa8 <inverseKinematic+0x3e0>
 8001a2e:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001a32:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8001a36:	eeb0 0b47 	vmov.f64	d0, d7
 8001a3a:	f00f ff7d 	bl	8011938 <pow>
 8001a3e:	eeb0 8b40 	vmov.f64	d8, d0
 8001a42:	ed97 7b04 	vldr	d7, [r7, #16]
 8001a46:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8001a4a:	eeb0 0b47 	vmov.f64	d0, d7
 8001a4e:	f00f ff73 	bl	8011938 <pow>
 8001a52:	eeb0 7b40 	vmov.f64	d7, d0
 8001a56:	ee38 7b07 	vadd.f64	d7, d8, d7
 8001a5a:	ed9f 6b23 	vldr	d6, [pc, #140]	; 8001ae8 <inverseKinematic+0x420>
 8001a5e:	ee37 8b46 	vsub.f64	d8, d7, d6
 8001a62:	ed97 7b00 	vldr	d7, [r7]
 8001a66:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8001a6a:	eeb0 0b47 	vmov.f64	d0, d7
 8001a6e:	f00f ff63 	bl	8011938 <pow>
 8001a72:	eeb0 7b40 	vmov.f64	d7, d0
 8001a76:	ee38 7b07 	vadd.f64	d7, d8, d7
 8001a7a:	ed9f 6b21 	vldr	d6, [pc, #132]	; 8001b00 <inverseKinematic+0x438>
 8001a7e:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001a82:	ed9f 6b21 	vldr	d6, [pc, #132]	; 8001b08 <inverseKinematic+0x440>
 8001a86:	ee37 6b06 	vadd.f64	d6, d7, d6
 8001a8a:	ed97 7b04 	vldr	d7, [r7, #16]
 8001a8e:	ee37 7b07 	vadd.f64	d7, d7, d7
 8001a92:	ee86 5b07 	vdiv.f64	d5, d6, d7
 8001a96:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8001a9a:	eeb0 0b45 	vmov.f64	d0, d5
 8001a9e:	f00f ff4b 	bl	8011938 <pow>
 8001aa2:	eeb0 7b40 	vmov.f64	d7, d0
 8001aa6:	e03f      	b.n	8001b28 <inverseKinematic+0x460>
 8001aa8:	1eb851ec 	.word	0x1eb851ec
 8001aac:	3fb1eb85 	.word	0x3fb1eb85
 8001ab0:	24dd2f1b 	.word	0x24dd2f1b
 8001ab4:	3fc58106 	.word	0x3fc58106
 8001ab8:	5625749b 	.word	0x5625749b
 8001abc:	3faf09d1 	.word	0x3faf09d1
 8001ac0:	e8584caa 	.word	0xe8584caa
 8001ac4:	400bb67a 	.word	0x400bb67a
 8001ac8:	24dd2f1d 	.word	0x24dd2f1d
 8001acc:	3fe58106 	.word	0x3fe58106
 8001ad0:	1eb851ec 	.word	0x1eb851ec
 8001ad4:	3fa1eb85 	.word	0x3fa1eb85
 8001ad8:	9ba5e356 	.word	0x9ba5e356
 8001adc:	3fe020c4 	.word	0x3fe020c4
 8001ae0:	f705857e 	.word	0xf705857e
 8001ae4:	3f881e03 	.word	0x3f881e03
 8001ae8:	70a3d70a 	.word	0x70a3d70a
 8001aec:	3fd70a3d 	.word	0x3fd70a3d
 8001af0:	24dd2f1b 	.word	0x24dd2f1b
 8001af4:	3fd58106 	.word	0x3fd58106
 8001af8:	e8584caa 	.word	0xe8584caa
 8001afc:	c00bb67a 	.word	0xc00bb67a
 8001b00:	93d96639 	.word	0x93d96639
 8001b04:	3f9ce6c0 	.word	0x3f9ce6c0
 8001b08:	47ae147c 	.word	0x47ae147c
 8001b0c:	3fa47ae1 	.word	0x3fa47ae1
 8001b10:	24000298 	.word	0x24000298
 8001b14:	240002e0 	.word	0x240002e0
 8001b18:	24000328 	.word	0x24000328
 8001b1c:	240002a0 	.word	0x240002a0
 8001b20:	240002e8 	.word	0x240002e8
 8001b24:	24000330 	.word	0x24000330
 8001b28:	ed9f 6bdf 	vldr	d6, [pc, #892]	; 8001ea8 <inverseKinematic+0x7e0>
 8001b2c:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001b30:	ed9f 6bdf 	vldr	d6, [pc, #892]	; 8001eb0 <inverseKinematic+0x7e8>
 8001b34:	ee37 7b06 	vadd.f64	d7, d7, d6
 8001b38:	4be7      	ldr	r3, [pc, #924]	; (8001ed8 <inverseKinematic+0x810>)
 8001b3a:	ed83 7b00 	vstr	d7, [r3]
	C2 = pow(R, 2) - pow(L1, 2) + pow(((-pow(R, 2) + pow(L1, 2) + pow((_Pfin.x + r * C30), 2) + pow((_Pfin.y + r * S30), 2) + pow(_Pfin.z, 2) - pow(L2, 2)) / (2.0 * _Pfin.z)), 2.0);
 8001b3e:	ed97 7b00 	vldr	d7, [r7]
 8001b42:	ed9f 6bdd 	vldr	d6, [pc, #884]	; 8001eb8 <inverseKinematic+0x7f0>
 8001b46:	ee37 7b06 	vadd.f64	d7, d7, d6
 8001b4a:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8001b4e:	eeb0 0b47 	vmov.f64	d0, d7
 8001b52:	f00f fef1 	bl	8011938 <pow>
 8001b56:	eeb0 7b40 	vmov.f64	d7, d0
 8001b5a:	ed9f 6bd9 	vldr	d6, [pc, #868]	; 8001ec0 <inverseKinematic+0x7f8>
 8001b5e:	ee37 8b06 	vadd.f64	d8, d7, d6
 8001b62:	ed97 7b02 	vldr	d7, [r7, #8]
 8001b66:	ed9f 6bd8 	vldr	d6, [pc, #864]	; 8001ec8 <inverseKinematic+0x800>
 8001b6a:	ee37 7b06 	vadd.f64	d7, d7, d6
 8001b6e:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8001b72:	eeb0 0b47 	vmov.f64	d0, d7
 8001b76:	f00f fedf 	bl	8011938 <pow>
 8001b7a:	eeb0 7b40 	vmov.f64	d7, d0
 8001b7e:	ee38 8b07 	vadd.f64	d8, d8, d7
 8001b82:	ed97 7b04 	vldr	d7, [r7, #16]
 8001b86:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8001b8a:	eeb0 0b47 	vmov.f64	d0, d7
 8001b8e:	f00f fed3 	bl	8011938 <pow>
 8001b92:	eeb0 7b40 	vmov.f64	d7, d0
 8001b96:	ee38 7b07 	vadd.f64	d7, d8, d7
 8001b9a:	ed9f 6bcd 	vldr	d6, [pc, #820]	; 8001ed0 <inverseKinematic+0x808>
 8001b9e:	ee37 6b46 	vsub.f64	d6, d7, d6
 8001ba2:	ed97 7b04 	vldr	d7, [r7, #16]
 8001ba6:	ee37 7b07 	vadd.f64	d7, d7, d7
 8001baa:	ee86 5b07 	vdiv.f64	d5, d6, d7
 8001bae:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8001bb2:	eeb0 0b45 	vmov.f64	d0, d5
 8001bb6:	f00f febf 	bl	8011938 <pow>
 8001bba:	eeb0 7b40 	vmov.f64	d7, d0
 8001bbe:	ed9f 6bc0 	vldr	d6, [pc, #768]	; 8001ec0 <inverseKinematic+0x7f8>
 8001bc2:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001bc6:	4bc5      	ldr	r3, [pc, #788]	; (8001edc <inverseKinematic+0x814>)
 8001bc8:	ed83 7b00 	vstr	d7, [r3]
	C3 = pow(R, 2) - pow(L1, 2) + pow(((pow((_Pfin.x + r * C150), 2) + pow((_Pfin.y + r * S150), 2) + pow(_Pfin.z, 2) - pow(L2, 2) - pow(R, 2) + pow(L1, 2)) / (2.0 * _Pfin.z)), 2.0);
 8001bcc:	ed97 7b00 	vldr	d7, [r7]
 8001bd0:	ed9f 6bb9 	vldr	d6, [pc, #740]	; 8001eb8 <inverseKinematic+0x7f0>
 8001bd4:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001bd8:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8001bdc:	eeb0 0b47 	vmov.f64	d0, d7
 8001be0:	f00f feaa 	bl	8011938 <pow>
 8001be4:	eeb0 8b40 	vmov.f64	d8, d0
 8001be8:	ed97 7b02 	vldr	d7, [r7, #8]
 8001bec:	ed9f 6bb6 	vldr	d6, [pc, #728]	; 8001ec8 <inverseKinematic+0x800>
 8001bf0:	ee37 7b06 	vadd.f64	d7, d7, d6
 8001bf4:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8001bf8:	eeb0 0b47 	vmov.f64	d0, d7
 8001bfc:	f00f fe9c 	bl	8011938 <pow>
 8001c00:	eeb0 7b40 	vmov.f64	d7, d0
 8001c04:	ee38 8b07 	vadd.f64	d8, d8, d7
 8001c08:	ed97 7b04 	vldr	d7, [r7, #16]
 8001c0c:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8001c10:	eeb0 0b47 	vmov.f64	d0, d7
 8001c14:	f00f fe90 	bl	8011938 <pow>
 8001c18:	eeb0 7b40 	vmov.f64	d7, d0
 8001c1c:	ee38 7b07 	vadd.f64	d7, d8, d7
 8001c20:	ed9f 6bab 	vldr	d6, [pc, #684]	; 8001ed0 <inverseKinematic+0x808>
 8001c24:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001c28:	ed9f 6ba1 	vldr	d6, [pc, #644]	; 8001eb0 <inverseKinematic+0x7e8>
 8001c2c:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001c30:	ed9f 6b9d 	vldr	d6, [pc, #628]	; 8001ea8 <inverseKinematic+0x7e0>
 8001c34:	ee37 6b06 	vadd.f64	d6, d7, d6
 8001c38:	ed97 7b04 	vldr	d7, [r7, #16]
 8001c3c:	ee37 7b07 	vadd.f64	d7, d7, d7
 8001c40:	ee86 5b07 	vdiv.f64	d5, d6, d7
 8001c44:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8001c48:	eeb0 0b45 	vmov.f64	d0, d5
 8001c4c:	f00f fe74 	bl	8011938 <pow>
 8001c50:	eeb0 7b40 	vmov.f64	d7, d0
 8001c54:	ed9f 6b9a 	vldr	d6, [pc, #616]	; 8001ec0 <inverseKinematic+0x7f8>
 8001c58:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001c5c:	4ba0      	ldr	r3, [pc, #640]	; (8001ee0 <inverseKinematic+0x818>)
 8001c5e:	ed83 7b00 	vstr	d7, [r3]

	YJ1_1 = (-B1 - sqrt(pow(B1, 2) - 4 * A1 * C1)) / (2 * A1);
 8001c62:	4ba0      	ldr	r3, [pc, #640]	; (8001ee4 <inverseKinematic+0x81c>)
 8001c64:	ed93 7b00 	vldr	d7, [r3]
 8001c68:	eeb1 8b47 	vneg.f64	d8, d7
 8001c6c:	4b9d      	ldr	r3, [pc, #628]	; (8001ee4 <inverseKinematic+0x81c>)
 8001c6e:	ed93 7b00 	vldr	d7, [r3]
 8001c72:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8001c76:	eeb0 0b47 	vmov.f64	d0, d7
 8001c7a:	f00f fe5d 	bl	8011938 <pow>
 8001c7e:	eeb0 5b40 	vmov.f64	d5, d0
 8001c82:	4b99      	ldr	r3, [pc, #612]	; (8001ee8 <inverseKinematic+0x820>)
 8001c84:	ed93 7b00 	vldr	d7, [r3]
 8001c88:	eeb1 6b00 	vmov.f64	d6, #16	; 0x40800000  4.0
 8001c8c:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001c90:	4b91      	ldr	r3, [pc, #580]	; (8001ed8 <inverseKinematic+0x810>)
 8001c92:	ed93 7b00 	vldr	d7, [r3]
 8001c96:	ee26 7b07 	vmul.f64	d7, d6, d7
 8001c9a:	ee35 7b47 	vsub.f64	d7, d5, d7
 8001c9e:	eeb0 0b47 	vmov.f64	d0, d7
 8001ca2:	f010 f8c9 	bl	8011e38 <sqrt>
 8001ca6:	eeb0 7b40 	vmov.f64	d7, d0
 8001caa:	ee38 5b47 	vsub.f64	d5, d8, d7
 8001cae:	4b8e      	ldr	r3, [pc, #568]	; (8001ee8 <inverseKinematic+0x820>)
 8001cb0:	ed93 7b00 	vldr	d7, [r3]
 8001cb4:	ee37 6b07 	vadd.f64	d6, d7, d7
 8001cb8:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8001cbc:	4b8b      	ldr	r3, [pc, #556]	; (8001eec <inverseKinematic+0x824>)
 8001cbe:	ed83 7b00 	vstr	d7, [r3]
	YJ1_2 = (-B1 + sqrt(pow(B1, 2) - 4 * A1 * C1)) / (2 * A1);
 8001cc2:	4b88      	ldr	r3, [pc, #544]	; (8001ee4 <inverseKinematic+0x81c>)
 8001cc4:	ed93 7b00 	vldr	d7, [r3]
 8001cc8:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8001ccc:	eeb0 0b47 	vmov.f64	d0, d7
 8001cd0:	f00f fe32 	bl	8011938 <pow>
 8001cd4:	eeb0 5b40 	vmov.f64	d5, d0
 8001cd8:	4b83      	ldr	r3, [pc, #524]	; (8001ee8 <inverseKinematic+0x820>)
 8001cda:	ed93 7b00 	vldr	d7, [r3]
 8001cde:	eeb1 6b00 	vmov.f64	d6, #16	; 0x40800000  4.0
 8001ce2:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001ce6:	4b7c      	ldr	r3, [pc, #496]	; (8001ed8 <inverseKinematic+0x810>)
 8001ce8:	ed93 7b00 	vldr	d7, [r3]
 8001cec:	ee26 7b07 	vmul.f64	d7, d6, d7
 8001cf0:	ee35 7b47 	vsub.f64	d7, d5, d7
 8001cf4:	eeb0 0b47 	vmov.f64	d0, d7
 8001cf8:	f010 f89e 	bl	8011e38 <sqrt>
 8001cfc:	eeb0 6b40 	vmov.f64	d6, d0
 8001d00:	4b78      	ldr	r3, [pc, #480]	; (8001ee4 <inverseKinematic+0x81c>)
 8001d02:	ed93 7b00 	vldr	d7, [r3]
 8001d06:	ee36 5b47 	vsub.f64	d5, d6, d7
 8001d0a:	4b77      	ldr	r3, [pc, #476]	; (8001ee8 <inverseKinematic+0x820>)
 8001d0c:	ed93 7b00 	vldr	d7, [r3]
 8001d10:	ee37 6b07 	vadd.f64	d6, d7, d7
 8001d14:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8001d18:	4b75      	ldr	r3, [pc, #468]	; (8001ef0 <inverseKinematic+0x828>)
 8001d1a:	ed83 7b00 	vstr	d7, [r3]
	YJ2_1 = (-B2 + sqrt(pow(B2, 2) - 4 * A2 * C2)) / (2 * A2);
 8001d1e:	4b75      	ldr	r3, [pc, #468]	; (8001ef4 <inverseKinematic+0x82c>)
 8001d20:	ed93 7b00 	vldr	d7, [r3]
 8001d24:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8001d28:	eeb0 0b47 	vmov.f64	d0, d7
 8001d2c:	f00f fe04 	bl	8011938 <pow>
 8001d30:	eeb0 5b40 	vmov.f64	d5, d0
 8001d34:	4b70      	ldr	r3, [pc, #448]	; (8001ef8 <inverseKinematic+0x830>)
 8001d36:	ed93 7b00 	vldr	d7, [r3]
 8001d3a:	eeb1 6b00 	vmov.f64	d6, #16	; 0x40800000  4.0
 8001d3e:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001d42:	4b66      	ldr	r3, [pc, #408]	; (8001edc <inverseKinematic+0x814>)
 8001d44:	ed93 7b00 	vldr	d7, [r3]
 8001d48:	ee26 7b07 	vmul.f64	d7, d6, d7
 8001d4c:	ee35 7b47 	vsub.f64	d7, d5, d7
 8001d50:	eeb0 0b47 	vmov.f64	d0, d7
 8001d54:	f010 f870 	bl	8011e38 <sqrt>
 8001d58:	eeb0 6b40 	vmov.f64	d6, d0
 8001d5c:	4b65      	ldr	r3, [pc, #404]	; (8001ef4 <inverseKinematic+0x82c>)
 8001d5e:	ed93 7b00 	vldr	d7, [r3]
 8001d62:	ee36 5b47 	vsub.f64	d5, d6, d7
 8001d66:	4b64      	ldr	r3, [pc, #400]	; (8001ef8 <inverseKinematic+0x830>)
 8001d68:	ed93 7b00 	vldr	d7, [r3]
 8001d6c:	ee37 6b07 	vadd.f64	d6, d7, d7
 8001d70:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8001d74:	4b61      	ldr	r3, [pc, #388]	; (8001efc <inverseKinematic+0x834>)
 8001d76:	ed83 7b00 	vstr	d7, [r3]
	YJ2_2 = (-B2 - sqrt(pow(B2, 2) - 4 * A2 * C2)) / (2 * A2);
 8001d7a:	4b5e      	ldr	r3, [pc, #376]	; (8001ef4 <inverseKinematic+0x82c>)
 8001d7c:	ed93 7b00 	vldr	d7, [r3]
 8001d80:	eeb1 8b47 	vneg.f64	d8, d7
 8001d84:	4b5b      	ldr	r3, [pc, #364]	; (8001ef4 <inverseKinematic+0x82c>)
 8001d86:	ed93 7b00 	vldr	d7, [r3]
 8001d8a:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8001d8e:	eeb0 0b47 	vmov.f64	d0, d7
 8001d92:	f00f fdd1 	bl	8011938 <pow>
 8001d96:	eeb0 5b40 	vmov.f64	d5, d0
 8001d9a:	4b57      	ldr	r3, [pc, #348]	; (8001ef8 <inverseKinematic+0x830>)
 8001d9c:	ed93 7b00 	vldr	d7, [r3]
 8001da0:	eeb1 6b00 	vmov.f64	d6, #16	; 0x40800000  4.0
 8001da4:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001da8:	4b4c      	ldr	r3, [pc, #304]	; (8001edc <inverseKinematic+0x814>)
 8001daa:	ed93 7b00 	vldr	d7, [r3]
 8001dae:	ee26 7b07 	vmul.f64	d7, d6, d7
 8001db2:	ee35 7b47 	vsub.f64	d7, d5, d7
 8001db6:	eeb0 0b47 	vmov.f64	d0, d7
 8001dba:	f010 f83d 	bl	8011e38 <sqrt>
 8001dbe:	eeb0 7b40 	vmov.f64	d7, d0
 8001dc2:	ee38 5b47 	vsub.f64	d5, d8, d7
 8001dc6:	4b4c      	ldr	r3, [pc, #304]	; (8001ef8 <inverseKinematic+0x830>)
 8001dc8:	ed93 7b00 	vldr	d7, [r3]
 8001dcc:	ee37 6b07 	vadd.f64	d6, d7, d7
 8001dd0:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8001dd4:	4b4a      	ldr	r3, [pc, #296]	; (8001f00 <inverseKinematic+0x838>)
 8001dd6:	ed83 7b00 	vstr	d7, [r3]
	YJ3_1 = (-B3 + sqrt(pow(B3, 2) - 4 * A3 * C3)) / (2 * A3);
 8001dda:	4b4a      	ldr	r3, [pc, #296]	; (8001f04 <inverseKinematic+0x83c>)
 8001ddc:	ed93 7b00 	vldr	d7, [r3]
 8001de0:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8001de4:	eeb0 0b47 	vmov.f64	d0, d7
 8001de8:	f00f fda6 	bl	8011938 <pow>
 8001dec:	eeb0 5b40 	vmov.f64	d5, d0
 8001df0:	4b45      	ldr	r3, [pc, #276]	; (8001f08 <inverseKinematic+0x840>)
 8001df2:	ed93 7b00 	vldr	d7, [r3]
 8001df6:	eeb1 6b00 	vmov.f64	d6, #16	; 0x40800000  4.0
 8001dfa:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001dfe:	4b38      	ldr	r3, [pc, #224]	; (8001ee0 <inverseKinematic+0x818>)
 8001e00:	ed93 7b00 	vldr	d7, [r3]
 8001e04:	ee26 7b07 	vmul.f64	d7, d6, d7
 8001e08:	ee35 7b47 	vsub.f64	d7, d5, d7
 8001e0c:	eeb0 0b47 	vmov.f64	d0, d7
 8001e10:	f010 f812 	bl	8011e38 <sqrt>
 8001e14:	eeb0 6b40 	vmov.f64	d6, d0
 8001e18:	4b3a      	ldr	r3, [pc, #232]	; (8001f04 <inverseKinematic+0x83c>)
 8001e1a:	ed93 7b00 	vldr	d7, [r3]
 8001e1e:	ee36 5b47 	vsub.f64	d5, d6, d7
 8001e22:	4b39      	ldr	r3, [pc, #228]	; (8001f08 <inverseKinematic+0x840>)
 8001e24:	ed93 7b00 	vldr	d7, [r3]
 8001e28:	ee37 6b07 	vadd.f64	d6, d7, d7
 8001e2c:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8001e30:	4b36      	ldr	r3, [pc, #216]	; (8001f0c <inverseKinematic+0x844>)
 8001e32:	ed83 7b00 	vstr	d7, [r3]
	YJ3_2 = (-B3 - sqrt(pow(B3, 2) - 4 * A3 * C3)) / (2 * A3);
 8001e36:	4b33      	ldr	r3, [pc, #204]	; (8001f04 <inverseKinematic+0x83c>)
 8001e38:	ed93 7b00 	vldr	d7, [r3]
 8001e3c:	eeb1 8b47 	vneg.f64	d8, d7
 8001e40:	4b30      	ldr	r3, [pc, #192]	; (8001f04 <inverseKinematic+0x83c>)
 8001e42:	ed93 7b00 	vldr	d7, [r3]
 8001e46:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8001e4a:	eeb0 0b47 	vmov.f64	d0, d7
 8001e4e:	f00f fd73 	bl	8011938 <pow>
 8001e52:	eeb0 5b40 	vmov.f64	d5, d0
 8001e56:	4b2c      	ldr	r3, [pc, #176]	; (8001f08 <inverseKinematic+0x840>)
 8001e58:	ed93 7b00 	vldr	d7, [r3]
 8001e5c:	eeb1 6b00 	vmov.f64	d6, #16	; 0x40800000  4.0
 8001e60:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001e64:	4b1e      	ldr	r3, [pc, #120]	; (8001ee0 <inverseKinematic+0x818>)
 8001e66:	ed93 7b00 	vldr	d7, [r3]
 8001e6a:	ee26 7b07 	vmul.f64	d7, d6, d7
 8001e6e:	ee35 7b47 	vsub.f64	d7, d5, d7
 8001e72:	eeb0 0b47 	vmov.f64	d0, d7
 8001e76:	f00f ffdf 	bl	8011e38 <sqrt>
 8001e7a:	eeb0 7b40 	vmov.f64	d7, d0
 8001e7e:	ee38 5b47 	vsub.f64	d5, d8, d7
 8001e82:	4b21      	ldr	r3, [pc, #132]	; (8001f08 <inverseKinematic+0x840>)
 8001e84:	ed93 7b00 	vldr	d7, [r3]
 8001e88:	ee37 6b07 	vadd.f64	d6, d7, d7
 8001e8c:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8001e90:	4b1f      	ldr	r3, [pc, #124]	; (8001f10 <inverseKinematic+0x848>)
 8001e92:	ed83 7b00 	vstr	d7, [r3]

	XJ1_1 = 0;
 8001e96:	491f      	ldr	r1, [pc, #124]	; (8001f14 <inverseKinematic+0x84c>)
 8001e98:	f04f 0200 	mov.w	r2, #0
 8001e9c:	f04f 0300 	mov.w	r3, #0
 8001ea0:	e9c1 2300 	strd	r2, r3, [r1]
 8001ea4:	e038      	b.n	8001f18 <inverseKinematic+0x850>
 8001ea6:	bf00      	nop
 8001ea8:	47ae147c 	.word	0x47ae147c
 8001eac:	3fa47ae1 	.word	0x3fa47ae1
 8001eb0:	93d96639 	.word	0x93d96639
 8001eb4:	3f9ce6c0 	.word	0x3f9ce6c0
 8001eb8:	5625749b 	.word	0x5625749b
 8001ebc:	3faf09d1 	.word	0x3faf09d1
 8001ec0:	f705857e 	.word	0xf705857e
 8001ec4:	3f881e03 	.word	0x3f881e03
 8001ec8:	1eb851ec 	.word	0x1eb851ec
 8001ecc:	3fa1eb85 	.word	0x3fa1eb85
 8001ed0:	70a3d70a 	.word	0x70a3d70a
 8001ed4:	3fd70a3d 	.word	0x3fd70a3d
 8001ed8:	240002a8 	.word	0x240002a8
 8001edc:	240002f0 	.word	0x240002f0
 8001ee0:	24000338 	.word	0x24000338
 8001ee4:	240002a0 	.word	0x240002a0
 8001ee8:	24000298 	.word	0x24000298
 8001eec:	240002c0 	.word	0x240002c0
 8001ef0:	240002c8 	.word	0x240002c8
 8001ef4:	240002e8 	.word	0x240002e8
 8001ef8:	240002e0 	.word	0x240002e0
 8001efc:	24000308 	.word	0x24000308
 8001f00:	24000310 	.word	0x24000310
 8001f04:	24000330 	.word	0x24000330
 8001f08:	24000328 	.word	0x24000328
 8001f0c:	24000350 	.word	0x24000350
 8001f10:	24000358 	.word	0x24000358
 8001f14:	240002b0 	.word	0x240002b0
	XJ1_2 = 0;
 8001f18:	49f1      	ldr	r1, [pc, #964]	; (80022e0 <inverseKinematic+0xc18>)
 8001f1a:	f04f 0200 	mov.w	r2, #0
 8001f1e:	f04f 0300 	mov.w	r3, #0
 8001f22:	e9c1 2300 	strd	r2, r3, [r1]
	XJ2_1 = sqrt(3) * YJ2_1;
 8001f26:	4bef      	ldr	r3, [pc, #956]	; (80022e4 <inverseKinematic+0xc1c>)
 8001f28:	ed93 7b00 	vldr	d7, [r3]
 8001f2c:	ed9f 6bd2 	vldr	d6, [pc, #840]	; 8002278 <inverseKinematic+0xbb0>
 8001f30:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001f34:	4bec      	ldr	r3, [pc, #944]	; (80022e8 <inverseKinematic+0xc20>)
 8001f36:	ed83 7b00 	vstr	d7, [r3]
	XJ2_2 = sqrt(3) * YJ2_2;
 8001f3a:	4bec      	ldr	r3, [pc, #944]	; (80022ec <inverseKinematic+0xc24>)
 8001f3c:	ed93 7b00 	vldr	d7, [r3]
 8001f40:	ed9f 6bcd 	vldr	d6, [pc, #820]	; 8002278 <inverseKinematic+0xbb0>
 8001f44:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001f48:	4be9      	ldr	r3, [pc, #932]	; (80022f0 <inverseKinematic+0xc28>)
 8001f4a:	ed83 7b00 	vstr	d7, [r3]
	XJ3_1 = -sqrt(3) * YJ3_1;
 8001f4e:	4be9      	ldr	r3, [pc, #932]	; (80022f4 <inverseKinematic+0xc2c>)
 8001f50:	ed93 7b00 	vldr	d7, [r3]
 8001f54:	ed9f 6bca 	vldr	d6, [pc, #808]	; 8002280 <inverseKinematic+0xbb8>
 8001f58:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001f5c:	4be6      	ldr	r3, [pc, #920]	; (80022f8 <inverseKinematic+0xc30>)
 8001f5e:	ed83 7b00 	vstr	d7, [r3]
	XJ3_2 = -sqrt(3) * YJ3_2;
 8001f62:	4be6      	ldr	r3, [pc, #920]	; (80022fc <inverseKinematic+0xc34>)
 8001f64:	ed93 7b00 	vldr	d7, [r3]
 8001f68:	ed9f 6bc5 	vldr	d6, [pc, #788]	; 8002280 <inverseKinematic+0xbb8>
 8001f6c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001f70:	4be3      	ldr	r3, [pc, #908]	; (8002300 <inverseKinematic+0xc38>)
 8001f72:	ed83 7b00 	vstr	d7, [r3]

	ZJ1_1 = ((YJ1_1 * ((-2 * (R + (_Pfin.y - r))) / (2 * _Pfin.z))) + ((pow((_Pfin.y - r), 2) + pow(_Pfin.z, 2) - pow(L2, 2) + pow(_Pfin.x, 2) - pow(R, 2) + pow(L1, 2)) / (2 * _Pfin.z)));
 8001f76:	ed97 7b02 	vldr	d7, [r7, #8]
 8001f7a:	ed9f 6bc3 	vldr	d6, [pc, #780]	; 8002288 <inverseKinematic+0xbc0>
 8001f7e:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001f82:	ed9f 6bc3 	vldr	d6, [pc, #780]	; 8002290 <inverseKinematic+0xbc8>
 8001f86:	ee37 7b06 	vadd.f64	d7, d7, d6
 8001f8a:	eeb8 6b00 	vmov.f64	d6, #128	; 0xc0000000 -2.0
 8001f8e:	ee27 5b06 	vmul.f64	d5, d7, d6
 8001f92:	ed97 7b04 	vldr	d7, [r7, #16]
 8001f96:	ee37 7b07 	vadd.f64	d7, d7, d7
 8001f9a:	ee85 6b07 	vdiv.f64	d6, d5, d7
 8001f9e:	4bd9      	ldr	r3, [pc, #868]	; (8002304 <inverseKinematic+0xc3c>)
 8001fa0:	ed93 7b00 	vldr	d7, [r3]
 8001fa4:	ee26 8b07 	vmul.f64	d8, d6, d7
 8001fa8:	ed97 7b02 	vldr	d7, [r7, #8]
 8001fac:	ed9f 6bb6 	vldr	d6, [pc, #728]	; 8002288 <inverseKinematic+0xbc0>
 8001fb0:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001fb4:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8001fb8:	eeb0 0b47 	vmov.f64	d0, d7
 8001fbc:	f00f fcbc 	bl	8011938 <pow>
 8001fc0:	eeb0 9b40 	vmov.f64	d9, d0
 8001fc4:	ed97 7b04 	vldr	d7, [r7, #16]
 8001fc8:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8001fcc:	eeb0 0b47 	vmov.f64	d0, d7
 8001fd0:	f00f fcb2 	bl	8011938 <pow>
 8001fd4:	eeb0 7b40 	vmov.f64	d7, d0
 8001fd8:	ee39 7b07 	vadd.f64	d7, d9, d7
 8001fdc:	ed9f 6bae 	vldr	d6, [pc, #696]	; 8002298 <inverseKinematic+0xbd0>
 8001fe0:	ee37 9b46 	vsub.f64	d9, d7, d6
 8001fe4:	ed97 7b00 	vldr	d7, [r7]
 8001fe8:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8001fec:	eeb0 0b47 	vmov.f64	d0, d7
 8001ff0:	f00f fca2 	bl	8011938 <pow>
 8001ff4:	eeb0 7b40 	vmov.f64	d7, d0
 8001ff8:	ee39 7b07 	vadd.f64	d7, d9, d7
 8001ffc:	ed9f 6ba8 	vldr	d6, [pc, #672]	; 80022a0 <inverseKinematic+0xbd8>
 8002000:	ee37 7b46 	vsub.f64	d7, d7, d6
 8002004:	ed9f 6ba8 	vldr	d6, [pc, #672]	; 80022a8 <inverseKinematic+0xbe0>
 8002008:	ee37 5b06 	vadd.f64	d5, d7, d6
 800200c:	ed97 7b04 	vldr	d7, [r7, #16]
 8002010:	ee37 6b07 	vadd.f64	d6, d7, d7
 8002014:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8002018:	ee38 7b07 	vadd.f64	d7, d8, d7
 800201c:	4bba      	ldr	r3, [pc, #744]	; (8002308 <inverseKinematic+0xc40>)
 800201e:	ed83 7b00 	vstr	d7, [r3]
	ZJ1_2 = ((YJ1_2 * ((-2 * (R + (_Pfin.y - r))) / (2 * _Pfin.z))) + ((pow((_Pfin.y - r), 2) + pow(_Pfin.z, 2) - pow(L2, 2) + pow(_Pfin.x, 2) - pow(R, 2) + pow(L1, 2)) / (2 * _Pfin.z)));
 8002022:	ed97 7b02 	vldr	d7, [r7, #8]
 8002026:	ed9f 6b98 	vldr	d6, [pc, #608]	; 8002288 <inverseKinematic+0xbc0>
 800202a:	ee37 7b46 	vsub.f64	d7, d7, d6
 800202e:	ed9f 6b98 	vldr	d6, [pc, #608]	; 8002290 <inverseKinematic+0xbc8>
 8002032:	ee37 7b06 	vadd.f64	d7, d7, d6
 8002036:	eeb8 6b00 	vmov.f64	d6, #128	; 0xc0000000 -2.0
 800203a:	ee27 5b06 	vmul.f64	d5, d7, d6
 800203e:	ed97 7b04 	vldr	d7, [r7, #16]
 8002042:	ee37 7b07 	vadd.f64	d7, d7, d7
 8002046:	ee85 6b07 	vdiv.f64	d6, d5, d7
 800204a:	4bb0      	ldr	r3, [pc, #704]	; (800230c <inverseKinematic+0xc44>)
 800204c:	ed93 7b00 	vldr	d7, [r3]
 8002050:	ee26 8b07 	vmul.f64	d8, d6, d7
 8002054:	ed97 7b02 	vldr	d7, [r7, #8]
 8002058:	ed9f 6b8b 	vldr	d6, [pc, #556]	; 8002288 <inverseKinematic+0xbc0>
 800205c:	ee37 7b46 	vsub.f64	d7, d7, d6
 8002060:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8002064:	eeb0 0b47 	vmov.f64	d0, d7
 8002068:	f00f fc66 	bl	8011938 <pow>
 800206c:	eeb0 9b40 	vmov.f64	d9, d0
 8002070:	ed97 7b04 	vldr	d7, [r7, #16]
 8002074:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8002078:	eeb0 0b47 	vmov.f64	d0, d7
 800207c:	f00f fc5c 	bl	8011938 <pow>
 8002080:	eeb0 7b40 	vmov.f64	d7, d0
 8002084:	ee39 7b07 	vadd.f64	d7, d9, d7
 8002088:	ed9f 6b83 	vldr	d6, [pc, #524]	; 8002298 <inverseKinematic+0xbd0>
 800208c:	ee37 9b46 	vsub.f64	d9, d7, d6
 8002090:	ed97 7b00 	vldr	d7, [r7]
 8002094:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8002098:	eeb0 0b47 	vmov.f64	d0, d7
 800209c:	f00f fc4c 	bl	8011938 <pow>
 80020a0:	eeb0 7b40 	vmov.f64	d7, d0
 80020a4:	ee39 7b07 	vadd.f64	d7, d9, d7
 80020a8:	ed9f 6b7d 	vldr	d6, [pc, #500]	; 80022a0 <inverseKinematic+0xbd8>
 80020ac:	ee37 7b46 	vsub.f64	d7, d7, d6
 80020b0:	ed9f 6b7d 	vldr	d6, [pc, #500]	; 80022a8 <inverseKinematic+0xbe0>
 80020b4:	ee37 5b06 	vadd.f64	d5, d7, d6
 80020b8:	ed97 7b04 	vldr	d7, [r7, #16]
 80020bc:	ee37 6b07 	vadd.f64	d6, d7, d7
 80020c0:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80020c4:	ee38 7b07 	vadd.f64	d7, d8, d7
 80020c8:	4b91      	ldr	r3, [pc, #580]	; (8002310 <inverseKinematic+0xc48>)
 80020ca:	ed83 7b00 	vstr	d7, [r3]
	ZJ2_1 = YJ2_1 * (((2 * sqrt(3.0) * R * C30 + 2.0 * R * S30) + (-2 * sqrt(3) * (_Pfin.x + r * C30) - 2.0 * (_Pfin.y + r * S30))) / (2 * _Pfin.z)) + ((-pow(R, 2) + pow(L1, 2) + pow((_Pfin.x + r * C30), 2) + pow((_Pfin.y + r * S30), 2) + pow(_Pfin.z, 2) - pow(L2, 2)) / (2 * _Pfin.z));
 80020ce:	ed97 7b00 	vldr	d7, [r7]
 80020d2:	ed9f 6b77 	vldr	d6, [pc, #476]	; 80022b0 <inverseKinematic+0xbe8>
 80020d6:	ee37 7b06 	vadd.f64	d7, d7, d6
 80020da:	ed9f 6b77 	vldr	d6, [pc, #476]	; 80022b8 <inverseKinematic+0xbf0>
 80020de:	ee27 6b06 	vmul.f64	d6, d7, d6
 80020e2:	ed97 7b02 	vldr	d7, [r7, #8]
 80020e6:	ed9f 5b76 	vldr	d5, [pc, #472]	; 80022c0 <inverseKinematic+0xbf8>
 80020ea:	ee37 7b05 	vadd.f64	d7, d7, d5
 80020ee:	ee37 7b07 	vadd.f64	d7, d7, d7
 80020f2:	ee36 7b47 	vsub.f64	d7, d6, d7
 80020f6:	ed9f 6b74 	vldr	d6, [pc, #464]	; 80022c8 <inverseKinematic+0xc00>
 80020fa:	ee37 5b06 	vadd.f64	d5, d7, d6
 80020fe:	ed97 7b04 	vldr	d7, [r7, #16]
 8002102:	ee37 7b07 	vadd.f64	d7, d7, d7
 8002106:	ee85 6b07 	vdiv.f64	d6, d5, d7
 800210a:	4b76      	ldr	r3, [pc, #472]	; (80022e4 <inverseKinematic+0xc1c>)
 800210c:	ed93 7b00 	vldr	d7, [r3]
 8002110:	ee26 8b07 	vmul.f64	d8, d6, d7
 8002114:	ed97 7b00 	vldr	d7, [r7]
 8002118:	ed9f 6b65 	vldr	d6, [pc, #404]	; 80022b0 <inverseKinematic+0xbe8>
 800211c:	ee37 7b06 	vadd.f64	d7, d7, d6
 8002120:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8002124:	eeb0 0b47 	vmov.f64	d0, d7
 8002128:	f00f fc06 	bl	8011938 <pow>
 800212c:	eeb0 7b40 	vmov.f64	d7, d0
 8002130:	ed9f 6b67 	vldr	d6, [pc, #412]	; 80022d0 <inverseKinematic+0xc08>
 8002134:	ee37 9b06 	vadd.f64	d9, d7, d6
 8002138:	ed97 7b02 	vldr	d7, [r7, #8]
 800213c:	ed9f 6b60 	vldr	d6, [pc, #384]	; 80022c0 <inverseKinematic+0xbf8>
 8002140:	ee37 7b06 	vadd.f64	d7, d7, d6
 8002144:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8002148:	eeb0 0b47 	vmov.f64	d0, d7
 800214c:	f00f fbf4 	bl	8011938 <pow>
 8002150:	eeb0 7b40 	vmov.f64	d7, d0
 8002154:	ee39 9b07 	vadd.f64	d9, d9, d7
 8002158:	ed97 7b04 	vldr	d7, [r7, #16]
 800215c:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8002160:	eeb0 0b47 	vmov.f64	d0, d7
 8002164:	f00f fbe8 	bl	8011938 <pow>
 8002168:	eeb0 7b40 	vmov.f64	d7, d0
 800216c:	ee39 7b07 	vadd.f64	d7, d9, d7
 8002170:	ed9f 6b49 	vldr	d6, [pc, #292]	; 8002298 <inverseKinematic+0xbd0>
 8002174:	ee37 5b46 	vsub.f64	d5, d7, d6
 8002178:	ed97 7b04 	vldr	d7, [r7, #16]
 800217c:	ee37 6b07 	vadd.f64	d6, d7, d7
 8002180:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8002184:	ee38 7b07 	vadd.f64	d7, d8, d7
 8002188:	4b62      	ldr	r3, [pc, #392]	; (8002314 <inverseKinematic+0xc4c>)
 800218a:	ed83 7b00 	vstr	d7, [r3]
	ZJ2_2 = YJ2_2 * (((2 * sqrt(3.0) * R * C30 + 2.0 * R * S30) + (-2 * sqrt(3) * (_Pfin.x + r * C30) - 2.0 * (_Pfin.y + r * S30))) / (2 * _Pfin.z)) + ((-pow(R, 2) + pow(L1, 2) + pow((_Pfin.x + r * C30), 2) + pow((_Pfin.y + r * S30), 2) + pow(_Pfin.z, 2) - pow(L2, 2)) / (2 * _Pfin.z));
 800218e:	ed97 7b00 	vldr	d7, [r7]
 8002192:	ed9f 6b47 	vldr	d6, [pc, #284]	; 80022b0 <inverseKinematic+0xbe8>
 8002196:	ee37 7b06 	vadd.f64	d7, d7, d6
 800219a:	ed9f 6b47 	vldr	d6, [pc, #284]	; 80022b8 <inverseKinematic+0xbf0>
 800219e:	ee27 6b06 	vmul.f64	d6, d7, d6
 80021a2:	ed97 7b02 	vldr	d7, [r7, #8]
 80021a6:	ed9f 5b46 	vldr	d5, [pc, #280]	; 80022c0 <inverseKinematic+0xbf8>
 80021aa:	ee37 7b05 	vadd.f64	d7, d7, d5
 80021ae:	ee37 7b07 	vadd.f64	d7, d7, d7
 80021b2:	ee36 7b47 	vsub.f64	d7, d6, d7
 80021b6:	ed9f 6b44 	vldr	d6, [pc, #272]	; 80022c8 <inverseKinematic+0xc00>
 80021ba:	ee37 5b06 	vadd.f64	d5, d7, d6
 80021be:	ed97 7b04 	vldr	d7, [r7, #16]
 80021c2:	ee37 7b07 	vadd.f64	d7, d7, d7
 80021c6:	ee85 6b07 	vdiv.f64	d6, d5, d7
 80021ca:	4b48      	ldr	r3, [pc, #288]	; (80022ec <inverseKinematic+0xc24>)
 80021cc:	ed93 7b00 	vldr	d7, [r3]
 80021d0:	ee26 8b07 	vmul.f64	d8, d6, d7
 80021d4:	ed97 7b00 	vldr	d7, [r7]
 80021d8:	ed9f 6b35 	vldr	d6, [pc, #212]	; 80022b0 <inverseKinematic+0xbe8>
 80021dc:	ee37 7b06 	vadd.f64	d7, d7, d6
 80021e0:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 80021e4:	eeb0 0b47 	vmov.f64	d0, d7
 80021e8:	f00f fba6 	bl	8011938 <pow>
 80021ec:	eeb0 7b40 	vmov.f64	d7, d0
 80021f0:	ed9f 6b37 	vldr	d6, [pc, #220]	; 80022d0 <inverseKinematic+0xc08>
 80021f4:	ee37 9b06 	vadd.f64	d9, d7, d6
 80021f8:	ed97 7b02 	vldr	d7, [r7, #8]
 80021fc:	ed9f 6b30 	vldr	d6, [pc, #192]	; 80022c0 <inverseKinematic+0xbf8>
 8002200:	ee37 7b06 	vadd.f64	d7, d7, d6
 8002204:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8002208:	eeb0 0b47 	vmov.f64	d0, d7
 800220c:	f00f fb94 	bl	8011938 <pow>
 8002210:	eeb0 7b40 	vmov.f64	d7, d0
 8002214:	ee39 9b07 	vadd.f64	d9, d9, d7
 8002218:	ed97 7b04 	vldr	d7, [r7, #16]
 800221c:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8002220:	eeb0 0b47 	vmov.f64	d0, d7
 8002224:	f00f fb88 	bl	8011938 <pow>
 8002228:	eeb0 7b40 	vmov.f64	d7, d0
 800222c:	ee39 7b07 	vadd.f64	d7, d9, d7
 8002230:	ed9f 6b19 	vldr	d6, [pc, #100]	; 8002298 <inverseKinematic+0xbd0>
 8002234:	ee37 5b46 	vsub.f64	d5, d7, d6
 8002238:	ed97 7b04 	vldr	d7, [r7, #16]
 800223c:	ee37 6b07 	vadd.f64	d6, d7, d7
 8002240:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8002244:	ee38 7b07 	vadd.f64	d7, d8, d7
 8002248:	4b33      	ldr	r3, [pc, #204]	; (8002318 <inverseKinematic+0xc50>)
 800224a:	ed83 7b00 	vstr	d7, [r3]
	ZJ3_1 = YJ3_1 * ((2 * sqrt(3.0) * (_Pfin.x + r * C150) - 2.0 * (_Pfin.y + r * S150) - 2.0 * sqrt(3) * R * C150 + 2.0 * R * S150) / (2.0 * _Pfin.z)) + ((pow((_Pfin.x + r * C150), 2.0) + pow((_Pfin.y + r * S150), 2) + pow(_Pfin.z, 2.0) - pow(L2, 2) - pow(R, 2) + pow(L1, 2)) / (2 * _Pfin.z));
 800224e:	ed97 7b00 	vldr	d7, [r7]
 8002252:	ed9f 6b17 	vldr	d6, [pc, #92]	; 80022b0 <inverseKinematic+0xbe8>
 8002256:	ee37 7b46 	vsub.f64	d7, d7, d6
 800225a:	ed9f 6b1f 	vldr	d6, [pc, #124]	; 80022d8 <inverseKinematic+0xc10>
 800225e:	ee27 6b06 	vmul.f64	d6, d7, d6
 8002262:	ed97 7b02 	vldr	d7, [r7, #8]
 8002266:	ed9f 5b16 	vldr	d5, [pc, #88]	; 80022c0 <inverseKinematic+0xbf8>
 800226a:	ee37 7b05 	vadd.f64	d7, d7, d5
 800226e:	ee37 7b07 	vadd.f64	d7, d7, d7
 8002272:	ee36 7b47 	vsub.f64	d7, d6, d7
 8002276:	e051      	b.n	800231c <inverseKinematic+0xc54>
 8002278:	e8584caa 	.word	0xe8584caa
 800227c:	3ffbb67a 	.word	0x3ffbb67a
 8002280:	e8584caa 	.word	0xe8584caa
 8002284:	bffbb67a 	.word	0xbffbb67a
 8002288:	1eb851ec 	.word	0x1eb851ec
 800228c:	3fb1eb85 	.word	0x3fb1eb85
 8002290:	24dd2f1b 	.word	0x24dd2f1b
 8002294:	3fc58106 	.word	0x3fc58106
 8002298:	70a3d70a 	.word	0x70a3d70a
 800229c:	3fd70a3d 	.word	0x3fd70a3d
 80022a0:	93d96639 	.word	0x93d96639
 80022a4:	3f9ce6c0 	.word	0x3f9ce6c0
 80022a8:	47ae147c 	.word	0x47ae147c
 80022ac:	3fa47ae1 	.word	0x3fa47ae1
 80022b0:	5625749b 	.word	0x5625749b
 80022b4:	3faf09d1 	.word	0x3faf09d1
 80022b8:	e8584caa 	.word	0xe8584caa
 80022bc:	c00bb67a 	.word	0xc00bb67a
 80022c0:	1eb851ec 	.word	0x1eb851ec
 80022c4:	3fa1eb85 	.word	0x3fa1eb85
 80022c8:	24dd2f1d 	.word	0x24dd2f1d
 80022cc:	3fe58106 	.word	0x3fe58106
 80022d0:	f705857e 	.word	0xf705857e
 80022d4:	3f881e03 	.word	0x3f881e03
 80022d8:	e8584caa 	.word	0xe8584caa
 80022dc:	400bb67a 	.word	0x400bb67a
 80022e0:	240002b8 	.word	0x240002b8
 80022e4:	24000308 	.word	0x24000308
 80022e8:	240002f8 	.word	0x240002f8
 80022ec:	24000310 	.word	0x24000310
 80022f0:	24000300 	.word	0x24000300
 80022f4:	24000350 	.word	0x24000350
 80022f8:	24000340 	.word	0x24000340
 80022fc:	24000358 	.word	0x24000358
 8002300:	24000348 	.word	0x24000348
 8002304:	240002c0 	.word	0x240002c0
 8002308:	240002d0 	.word	0x240002d0
 800230c:	240002c8 	.word	0x240002c8
 8002310:	240002d8 	.word	0x240002d8
 8002314:	24000318 	.word	0x24000318
 8002318:	24000320 	.word	0x24000320
 800231c:	ed9f 6b90 	vldr	d6, [pc, #576]	; 8002560 <inverseKinematic+0xe98>
 8002320:	ee37 7b06 	vadd.f64	d7, d7, d6
 8002324:	ed9f 6b90 	vldr	d6, [pc, #576]	; 8002568 <inverseKinematic+0xea0>
 8002328:	ee37 5b06 	vadd.f64	d5, d7, d6
 800232c:	ed97 7b04 	vldr	d7, [r7, #16]
 8002330:	ee37 7b07 	vadd.f64	d7, d7, d7
 8002334:	ee85 6b07 	vdiv.f64	d6, d5, d7
 8002338:	4b9f      	ldr	r3, [pc, #636]	; (80025b8 <inverseKinematic+0xef0>)
 800233a:	ed93 7b00 	vldr	d7, [r3]
 800233e:	ee26 8b07 	vmul.f64	d8, d6, d7
 8002342:	ed97 7b00 	vldr	d7, [r7]
 8002346:	ed9f 6b8a 	vldr	d6, [pc, #552]	; 8002570 <inverseKinematic+0xea8>
 800234a:	ee37 7b46 	vsub.f64	d7, d7, d6
 800234e:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8002352:	eeb0 0b47 	vmov.f64	d0, d7
 8002356:	f00f faef 	bl	8011938 <pow>
 800235a:	eeb0 9b40 	vmov.f64	d9, d0
 800235e:	ed97 7b02 	vldr	d7, [r7, #8]
 8002362:	ed9f 6b85 	vldr	d6, [pc, #532]	; 8002578 <inverseKinematic+0xeb0>
 8002366:	ee37 7b06 	vadd.f64	d7, d7, d6
 800236a:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 800236e:	eeb0 0b47 	vmov.f64	d0, d7
 8002372:	f00f fae1 	bl	8011938 <pow>
 8002376:	eeb0 7b40 	vmov.f64	d7, d0
 800237a:	ee39 9b07 	vadd.f64	d9, d9, d7
 800237e:	ed97 7b04 	vldr	d7, [r7, #16]
 8002382:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8002386:	eeb0 0b47 	vmov.f64	d0, d7
 800238a:	f00f fad5 	bl	8011938 <pow>
 800238e:	eeb0 7b40 	vmov.f64	d7, d0
 8002392:	ee39 7b07 	vadd.f64	d7, d9, d7
 8002396:	ed9f 6b7a 	vldr	d6, [pc, #488]	; 8002580 <inverseKinematic+0xeb8>
 800239a:	ee37 7b46 	vsub.f64	d7, d7, d6
 800239e:	ed9f 6b7a 	vldr	d6, [pc, #488]	; 8002588 <inverseKinematic+0xec0>
 80023a2:	ee37 7b46 	vsub.f64	d7, d7, d6
 80023a6:	ed9f 6b7a 	vldr	d6, [pc, #488]	; 8002590 <inverseKinematic+0xec8>
 80023aa:	ee37 5b06 	vadd.f64	d5, d7, d6
 80023ae:	ed97 7b04 	vldr	d7, [r7, #16]
 80023b2:	ee37 6b07 	vadd.f64	d6, d7, d7
 80023b6:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80023ba:	ee38 7b07 	vadd.f64	d7, d8, d7
 80023be:	4b7f      	ldr	r3, [pc, #508]	; (80025bc <inverseKinematic+0xef4>)
 80023c0:	ed83 7b00 	vstr	d7, [r3]
	ZJ3_2 = YJ3_2 * ((2 * sqrt(3.0) * (_Pfin.x + r * C150) - 2.0 * (_Pfin.y + r * S150) - 2.0 * sqrt(3) * R * C150 + 2.0 * R * S150) / (2.0 * _Pfin.z)) + ((pow((_Pfin.x + r * C150), 2.0) + pow((_Pfin.y + r * S150), 2) + pow(_Pfin.z, 2) - pow(L2, 2) - pow(R, 2) + pow(L1, 2)) / (2 * _Pfin.z));
 80023c4:	ed97 7b00 	vldr	d7, [r7]
 80023c8:	ed9f 6b69 	vldr	d6, [pc, #420]	; 8002570 <inverseKinematic+0xea8>
 80023cc:	ee37 7b46 	vsub.f64	d7, d7, d6
 80023d0:	ed9f 6b71 	vldr	d6, [pc, #452]	; 8002598 <inverseKinematic+0xed0>
 80023d4:	ee27 6b06 	vmul.f64	d6, d7, d6
 80023d8:	ed97 7b02 	vldr	d7, [r7, #8]
 80023dc:	ed9f 5b66 	vldr	d5, [pc, #408]	; 8002578 <inverseKinematic+0xeb0>
 80023e0:	ee37 7b05 	vadd.f64	d7, d7, d5
 80023e4:	ee37 7b07 	vadd.f64	d7, d7, d7
 80023e8:	ee36 7b47 	vsub.f64	d7, d6, d7
 80023ec:	ed9f 6b5c 	vldr	d6, [pc, #368]	; 8002560 <inverseKinematic+0xe98>
 80023f0:	ee37 7b06 	vadd.f64	d7, d7, d6
 80023f4:	ed9f 6b5c 	vldr	d6, [pc, #368]	; 8002568 <inverseKinematic+0xea0>
 80023f8:	ee37 5b06 	vadd.f64	d5, d7, d6
 80023fc:	ed97 7b04 	vldr	d7, [r7, #16]
 8002400:	ee37 7b07 	vadd.f64	d7, d7, d7
 8002404:	ee85 6b07 	vdiv.f64	d6, d5, d7
 8002408:	4b6d      	ldr	r3, [pc, #436]	; (80025c0 <inverseKinematic+0xef8>)
 800240a:	ed93 7b00 	vldr	d7, [r3]
 800240e:	ee26 8b07 	vmul.f64	d8, d6, d7
 8002412:	ed97 7b00 	vldr	d7, [r7]
 8002416:	ed9f 6b56 	vldr	d6, [pc, #344]	; 8002570 <inverseKinematic+0xea8>
 800241a:	ee37 7b46 	vsub.f64	d7, d7, d6
 800241e:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8002422:	eeb0 0b47 	vmov.f64	d0, d7
 8002426:	f00f fa87 	bl	8011938 <pow>
 800242a:	eeb0 9b40 	vmov.f64	d9, d0
 800242e:	ed97 7b02 	vldr	d7, [r7, #8]
 8002432:	ed9f 6b51 	vldr	d6, [pc, #324]	; 8002578 <inverseKinematic+0xeb0>
 8002436:	ee37 7b06 	vadd.f64	d7, d7, d6
 800243a:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 800243e:	eeb0 0b47 	vmov.f64	d0, d7
 8002442:	f00f fa79 	bl	8011938 <pow>
 8002446:	eeb0 7b40 	vmov.f64	d7, d0
 800244a:	ee39 9b07 	vadd.f64	d9, d9, d7
 800244e:	ed97 7b04 	vldr	d7, [r7, #16]
 8002452:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8002456:	eeb0 0b47 	vmov.f64	d0, d7
 800245a:	f00f fa6d 	bl	8011938 <pow>
 800245e:	eeb0 7b40 	vmov.f64	d7, d0
 8002462:	ee39 7b07 	vadd.f64	d7, d9, d7
 8002466:	ed9f 6b46 	vldr	d6, [pc, #280]	; 8002580 <inverseKinematic+0xeb8>
 800246a:	ee37 7b46 	vsub.f64	d7, d7, d6
 800246e:	ed9f 6b46 	vldr	d6, [pc, #280]	; 8002588 <inverseKinematic+0xec0>
 8002472:	ee37 7b46 	vsub.f64	d7, d7, d6
 8002476:	ed9f 6b46 	vldr	d6, [pc, #280]	; 8002590 <inverseKinematic+0xec8>
 800247a:	ee37 5b06 	vadd.f64	d5, d7, d6
 800247e:	ed97 7b04 	vldr	d7, [r7, #16]
 8002482:	ee37 6b07 	vadd.f64	d6, d7, d7
 8002486:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800248a:	ee38 7b07 	vadd.f64	d7, d8, d7
 800248e:	4b4d      	ldr	r3, [pc, #308]	; (80025c4 <inverseKinematic+0xefc>)
 8002490:	ed83 7b00 	vstr	d7, [r3]

	motor1.theta = -1.0 * asin(ZJ1_1 / L1);
 8002494:	4b4c      	ldr	r3, [pc, #304]	; (80025c8 <inverseKinematic+0xf00>)
 8002496:	ed93 7b00 	vldr	d7, [r3]
 800249a:	ed9f 5b41 	vldr	d5, [pc, #260]	; 80025a0 <inverseKinematic+0xed8>
 800249e:	ee87 6b05 	vdiv.f64	d6, d7, d5
 80024a2:	eeb0 0b46 	vmov.f64	d0, d6
 80024a6:	f00f fc99 	bl	8011ddc <asin>
 80024aa:	eeb0 7b40 	vmov.f64	d7, d0
 80024ae:	eeb1 7b47 	vneg.f64	d7, d7
 80024b2:	4b46      	ldr	r3, [pc, #280]	; (80025cc <inverseKinematic+0xf04>)
 80024b4:	ed83 7b00 	vstr	d7, [r3]
	motor1.theta = motor1.theta * RAD_TO_DEG;
 80024b8:	4b44      	ldr	r3, [pc, #272]	; (80025cc <inverseKinematic+0xf04>)
 80024ba:	ed93 7b00 	vldr	d7, [r3]
 80024be:	ed9f 6b3a 	vldr	d6, [pc, #232]	; 80025a8 <inverseKinematic+0xee0>
 80024c2:	ee27 6b06 	vmul.f64	d6, d7, d6
 80024c6:	ed9f 5b3a 	vldr	d5, [pc, #232]	; 80025b0 <inverseKinematic+0xee8>
 80024ca:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80024ce:	4b3f      	ldr	r3, [pc, #252]	; (80025cc <inverseKinematic+0xf04>)
 80024d0:	ed83 7b00 	vstr	d7, [r3]
	motor2.theta = -1.0 * asin(ZJ2_1 / L1);
 80024d4:	4b3e      	ldr	r3, [pc, #248]	; (80025d0 <inverseKinematic+0xf08>)
 80024d6:	ed93 7b00 	vldr	d7, [r3]
 80024da:	ed9f 5b31 	vldr	d5, [pc, #196]	; 80025a0 <inverseKinematic+0xed8>
 80024de:	ee87 6b05 	vdiv.f64	d6, d7, d5
 80024e2:	eeb0 0b46 	vmov.f64	d0, d6
 80024e6:	f00f fc79 	bl	8011ddc <asin>
 80024ea:	eeb0 7b40 	vmov.f64	d7, d0
 80024ee:	eeb1 7b47 	vneg.f64	d7, d7
 80024f2:	4b38      	ldr	r3, [pc, #224]	; (80025d4 <inverseKinematic+0xf0c>)
 80024f4:	ed83 7b00 	vstr	d7, [r3]
	motor2.theta = motor2.theta * RAD_TO_DEG;
 80024f8:	4b36      	ldr	r3, [pc, #216]	; (80025d4 <inverseKinematic+0xf0c>)
 80024fa:	ed93 7b00 	vldr	d7, [r3]
 80024fe:	ed9f 6b2a 	vldr	d6, [pc, #168]	; 80025a8 <inverseKinematic+0xee0>
 8002502:	ee27 6b06 	vmul.f64	d6, d7, d6
 8002506:	ed9f 5b2a 	vldr	d5, [pc, #168]	; 80025b0 <inverseKinematic+0xee8>
 800250a:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800250e:	4b31      	ldr	r3, [pc, #196]	; (80025d4 <inverseKinematic+0xf0c>)
 8002510:	ed83 7b00 	vstr	d7, [r3]
	motor3.theta = -1.0 * asin(ZJ3_1 / L1);
 8002514:	4b29      	ldr	r3, [pc, #164]	; (80025bc <inverseKinematic+0xef4>)
 8002516:	ed93 7b00 	vldr	d7, [r3]
 800251a:	ed9f 5b21 	vldr	d5, [pc, #132]	; 80025a0 <inverseKinematic+0xed8>
 800251e:	ee87 6b05 	vdiv.f64	d6, d7, d5
 8002522:	eeb0 0b46 	vmov.f64	d0, d6
 8002526:	f00f fc59 	bl	8011ddc <asin>
 800252a:	eeb0 7b40 	vmov.f64	d7, d0
 800252e:	eeb1 7b47 	vneg.f64	d7, d7
 8002532:	4b29      	ldr	r3, [pc, #164]	; (80025d8 <inverseKinematic+0xf10>)
 8002534:	ed83 7b00 	vstr	d7, [r3]
	motor3.theta = motor3.theta * RAD_TO_DEG;
 8002538:	4b27      	ldr	r3, [pc, #156]	; (80025d8 <inverseKinematic+0xf10>)
 800253a:	ed93 7b00 	vldr	d7, [r3]
 800253e:	ed9f 6b1a 	vldr	d6, [pc, #104]	; 80025a8 <inverseKinematic+0xee0>
 8002542:	ee27 6b06 	vmul.f64	d6, d7, d6
 8002546:	ed9f 5b1a 	vldr	d5, [pc, #104]	; 80025b0 <inverseKinematic+0xee8>
 800254a:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800254e:	4b22      	ldr	r3, [pc, #136]	; (80025d8 <inverseKinematic+0xf10>)
 8002550:	ed83 7b00 	vstr	d7, [r3]
}
 8002554:	bf00      	nop
 8002556:	3718      	adds	r7, #24
 8002558:	46bd      	mov	sp, r7
 800255a:	ecbd 8b04 	vpop	{d8-d9}
 800255e:	bd80      	pop	{r7, pc}
 8002560:	9ba5e356 	.word	0x9ba5e356
 8002564:	3fe020c4 	.word	0x3fe020c4
 8002568:	24dd2f1b 	.word	0x24dd2f1b
 800256c:	3fc58106 	.word	0x3fc58106
 8002570:	5625749b 	.word	0x5625749b
 8002574:	3faf09d1 	.word	0x3faf09d1
 8002578:	1eb851ec 	.word	0x1eb851ec
 800257c:	3fa1eb85 	.word	0x3fa1eb85
 8002580:	70a3d70a 	.word	0x70a3d70a
 8002584:	3fd70a3d 	.word	0x3fd70a3d
 8002588:	93d96639 	.word	0x93d96639
 800258c:	3f9ce6c0 	.word	0x3f9ce6c0
 8002590:	47ae147c 	.word	0x47ae147c
 8002594:	3fa47ae1 	.word	0x3fa47ae1
 8002598:	e8584caa 	.word	0xe8584caa
 800259c:	400bb67a 	.word	0x400bb67a
 80025a0:	9999999a 	.word	0x9999999a
 80025a4:	3fc99999 	.word	0x3fc99999
 80025a8:	00000000 	.word	0x00000000
 80025ac:	40668000 	.word	0x40668000
 80025b0:	54442eea 	.word	0x54442eea
 80025b4:	400921fb 	.word	0x400921fb
 80025b8:	24000350 	.word	0x24000350
 80025bc:	24000360 	.word	0x24000360
 80025c0:	24000358 	.word	0x24000358
 80025c4:	24000368 	.word	0x24000368
 80025c8:	240002d0 	.word	0x240002d0
 80025cc:	24000370 	.word	0x24000370
 80025d0:	24000318 	.word	0x24000318
 80025d4:	240003b8 	.word	0x240003b8
 80025d8:	24000400 	.word	0x24000400

080025dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80025dc:	b580      	push	{r7, lr}
 80025de:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80025e0:	f003 fffc 	bl	80065dc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80025e4:	f000 f81c 	bl	8002620 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80025e8:	f7fe fa48 	bl	8000a7c <MX_GPIO_Init>
  MX_TIM2_Init();
 80025ec:	f001 fbc6 	bl	8003d7c <MX_TIM2_Init>
  MX_USART3_UART_Init();
 80025f0:	f003 fe52 	bl	8006298 <MX_USART3_UART_Init>
  MX_TIM12_Init();
 80025f4:	f001 fd64 	bl	80040c0 <MX_TIM12_Init>
  MX_TIM13_Init();
 80025f8:	f001 fdc4 	bl	8004184 <MX_TIM13_Init>
  MX_TIM14_Init();
 80025fc:	f001 fe0e 	bl	800421c <MX_TIM14_Init>
  MX_TIM5_Init();
 8002600:	f001 fd10 	bl	8004024 <MX_TIM5_Init>
  MX_TIM15_Init();
 8002604:	f001 fe56 	bl	80042b4 <MX_TIM15_Init>
  MX_USART2_UART_Init();
 8002608:	f003 fdfa 	bl	8006200 <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 800260c:	f003 fdac 	bl	8006168 <MX_USART1_UART_Init>
  MX_TIM3_Init();
 8002610:	f001 fc24 	bl	8003e5c <MX_TIM3_Init>
  MX_TIM4_Init();
 8002614:	f001 fc94 	bl	8003f40 <MX_TIM4_Init>

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

		statesMachineLoop();
 8002618:	f000 fc16 	bl	8002e48 <statesMachineLoop>
 800261c:	e7fc      	b.n	8002618 <main+0x3c>
	...

08002620 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002620:	b580      	push	{r7, lr}
 8002622:	b09c      	sub	sp, #112	; 0x70
 8002624:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002626:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800262a:	224c      	movs	r2, #76	; 0x4c
 800262c:	2100      	movs	r1, #0
 800262e:	4618      	mov	r0, r3
 8002630:	f00c fc32 	bl	800ee98 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002634:	1d3b      	adds	r3, r7, #4
 8002636:	2220      	movs	r2, #32
 8002638:	2100      	movs	r1, #0
 800263a:	4618      	mov	r0, r3
 800263c:	f00c fc2c 	bl	800ee98 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8002640:	2002      	movs	r0, #2
 8002642:	f005 f92f 	bl	80078a4 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8002646:	2300      	movs	r3, #0
 8002648:	603b      	str	r3, [r7, #0]
 800264a:	4b32      	ldr	r3, [pc, #200]	; (8002714 <SystemClock_Config+0xf4>)
 800264c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800264e:	4a31      	ldr	r2, [pc, #196]	; (8002714 <SystemClock_Config+0xf4>)
 8002650:	f023 0301 	bic.w	r3, r3, #1
 8002654:	62d3      	str	r3, [r2, #44]	; 0x2c
 8002656:	4b2f      	ldr	r3, [pc, #188]	; (8002714 <SystemClock_Config+0xf4>)
 8002658:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800265a:	f003 0301 	and.w	r3, r3, #1
 800265e:	603b      	str	r3, [r7, #0]
 8002660:	4b2d      	ldr	r3, [pc, #180]	; (8002718 <SystemClock_Config+0xf8>)
 8002662:	699b      	ldr	r3, [r3, #24]
 8002664:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8002668:	4a2b      	ldr	r2, [pc, #172]	; (8002718 <SystemClock_Config+0xf8>)
 800266a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800266e:	6193      	str	r3, [r2, #24]
 8002670:	4b29      	ldr	r3, [pc, #164]	; (8002718 <SystemClock_Config+0xf8>)
 8002672:	699b      	ldr	r3, [r3, #24]
 8002674:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002678:	603b      	str	r3, [r7, #0]
 800267a:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800267c:	bf00      	nop
 800267e:	4b26      	ldr	r3, [pc, #152]	; (8002718 <SystemClock_Config+0xf8>)
 8002680:	699b      	ldr	r3, [r3, #24]
 8002682:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002686:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800268a:	d1f8      	bne.n	800267e <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800268c:	2302      	movs	r3, #2
 800268e:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8002690:	2301      	movs	r3, #1
 8002692:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002694:	2340      	movs	r3, #64	; 0x40
 8002696:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002698:	2302      	movs	r3, #2
 800269a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800269c:	2300      	movs	r3, #0
 800269e:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80026a0:	2304      	movs	r3, #4
 80026a2:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 16;
 80026a4:	2310      	movs	r3, #16
 80026a6:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80026a8:	2302      	movs	r3, #2
 80026aa:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80026ac:	2302      	movs	r3, #2
 80026ae:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80026b0:	2302      	movs	r3, #2
 80026b2:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80026b4:	230c      	movs	r3, #12
 80026b6:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80026b8:	2300      	movs	r3, #0
 80026ba:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80026bc:	2300      	movs	r3, #0
 80026be:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80026c0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80026c4:	4618      	mov	r0, r3
 80026c6:	f005 f927 	bl	8007918 <HAL_RCC_OscConfig>
 80026ca:	4603      	mov	r3, r0
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d001      	beq.n	80026d4 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 80026d0:	f000 faaa 	bl	8002c28 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80026d4:	233f      	movs	r3, #63	; 0x3f
 80026d6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80026d8:	2303      	movs	r3, #3
 80026da:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80026dc:	2300      	movs	r3, #0
 80026de:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80026e0:	2308      	movs	r3, #8
 80026e2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 80026e4:	2300      	movs	r3, #0
 80026e6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80026e8:	2340      	movs	r3, #64	; 0x40
 80026ea:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80026ec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80026f0:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 80026f2:	2300      	movs	r3, #0
 80026f4:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80026f6:	1d3b      	adds	r3, r7, #4
 80026f8:	2101      	movs	r1, #1
 80026fa:	4618      	mov	r0, r3
 80026fc:	f005 fd3a 	bl	8008174 <HAL_RCC_ClockConfig>
 8002700:	4603      	mov	r3, r0
 8002702:	2b00      	cmp	r3, #0
 8002704:	d001      	beq.n	800270a <SystemClock_Config+0xea>
  {
    Error_Handler();
 8002706:	f000 fa8f 	bl	8002c28 <Error_Handler>
  }
}
 800270a:	bf00      	nop
 800270c:	3770      	adds	r7, #112	; 0x70
 800270e:	46bd      	mov	sp, r7
 8002710:	bd80      	pop	{r7, pc}
 8002712:	bf00      	nop
 8002714:	58000400 	.word	0x58000400
 8002718:	58024800 	.word	0x58024800

0800271c <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 800271c:	b580      	push	{r7, lr}
 800271e:	b082      	sub	sp, #8
 8002720:	af00      	add	r7, sp, #0
 8002722:	4603      	mov	r3, r0
 8002724:	80fb      	strh	r3, [r7, #6]

	test++;
 8002726:	4bab      	ldr	r3, [pc, #684]	; (80029d4 <HAL_GPIO_EXTI_Callback+0x2b8>)
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	3301      	adds	r3, #1
 800272c:	4aa9      	ldr	r2, [pc, #676]	; (80029d4 <HAL_GPIO_EXTI_Callback+0x2b8>)
 800272e:	6013      	str	r3, [r2, #0]
	switch( GPIO_Pin){
 8002730:	88fb      	ldrh	r3, [r7, #6]
 8002732:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002736:	f000 8133 	beq.w	80029a0 <HAL_GPIO_EXTI_Callback+0x284>
 800273a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800273e:	f300 8143 	bgt.w	80029c8 <HAL_GPIO_EXTI_Callback+0x2ac>
 8002742:	2b20      	cmp	r3, #32
 8002744:	dc4a      	bgt.n	80027dc <HAL_GPIO_EXTI_Callback+0xc0>
 8002746:	2b00      	cmp	r3, #0
 8002748:	f340 813e 	ble.w	80029c8 <HAL_GPIO_EXTI_Callback+0x2ac>
 800274c:	3b01      	subs	r3, #1
 800274e:	2b1f      	cmp	r3, #31
 8002750:	f200 813a 	bhi.w	80029c8 <HAL_GPIO_EXTI_Callback+0x2ac>
 8002754:	a201      	add	r2, pc, #4	; (adr r2, 800275c <HAL_GPIO_EXTI_Callback+0x40>)
 8002756:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800275a:	bf00      	nop
 800275c:	0800282f 	.word	0x0800282f
 8002760:	080029c9 	.word	0x080029c9
 8002764:	080029c9 	.word	0x080029c9
 8002768:	080028c3 	.word	0x080028c3
 800276c:	080029c9 	.word	0x080029c9
 8002770:	080029c9 	.word	0x080029c9
 8002774:	080029c9 	.word	0x080029c9
 8002778:	08002879 	.word	0x08002879
 800277c:	080029c9 	.word	0x080029c9
 8002780:	080029c9 	.word	0x080029c9
 8002784:	080029c9 	.word	0x080029c9
 8002788:	080029c9 	.word	0x080029c9
 800278c:	080029c9 	.word	0x080029c9
 8002790:	080029c9 	.word	0x080029c9
 8002794:	080029c9 	.word	0x080029c9
 8002798:	08002957 	.word	0x08002957
 800279c:	080029c9 	.word	0x080029c9
 80027a0:	080029c9 	.word	0x080029c9
 80027a4:	080029c9 	.word	0x080029c9
 80027a8:	080029c9 	.word	0x080029c9
 80027ac:	080029c9 	.word	0x080029c9
 80027b0:	080029c9 	.word	0x080029c9
 80027b4:	080029c9 	.word	0x080029c9
 80027b8:	080029c9 	.word	0x080029c9
 80027bc:	080029c9 	.word	0x080029c9
 80027c0:	080029c9 	.word	0x080029c9
 80027c4:	080029c9 	.word	0x080029c9
 80027c8:	080029c9 	.word	0x080029c9
 80027cc:	080029c9 	.word	0x080029c9
 80027d0:	080029c9 	.word	0x080029c9
 80027d4:	080029c9 	.word	0x080029c9
 80027d8:	0800290d 	.word	0x0800290d
 80027dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80027e0:	f040 80f2 	bne.w	80029c8 <HAL_GPIO_EXTI_Callback+0x2ac>

		 case E_EndStop1_Inf_Pin:

			 Stop_PWM_MOTOR_1;
 80027e4:	2100      	movs	r1, #0
 80027e6:	487c      	ldr	r0, [pc, #496]	; (80029d8 <HAL_GPIO_EXTI_Callback+0x2bc>)
 80027e8:	f007 febe 	bl	800a568 <HAL_TIM_PWM_Stop>
			 Stop_PWM_MOTOR_2;
 80027ec:	2100      	movs	r1, #0
 80027ee:	487b      	ldr	r0, [pc, #492]	; (80029dc <HAL_GPIO_EXTI_Callback+0x2c0>)
 80027f0:	f007 feba 	bl	800a568 <HAL_TIM_PWM_Stop>
			 Stop_PWM_MOTOR_3;
 80027f4:	2100      	movs	r1, #0
 80027f6:	487a      	ldr	r0, [pc, #488]	; (80029e0 <HAL_GPIO_EXTI_Callback+0x2c4>)
 80027f8:	f007 feb6 	bl	800a568 <HAL_TIM_PWM_Stop>

			 HAL_TIM_Base_Stop_IT(&htim15);
 80027fc:	4879      	ldr	r0, [pc, #484]	; (80029e4 <HAL_GPIO_EXTI_Callback+0x2c8>)
 80027fe:	f007 fd15 	bl	800a22c <HAL_TIM_Base_Stop_IT>
			 HAL_TIM_Base_Stop(&htim5);
 8002802:	4879      	ldr	r0, [pc, #484]	; (80029e8 <HAL_GPIO_EXTI_Callback+0x2cc>)
 8002804:	f007 fc72 	bl	800a0ec <HAL_TIM_Base_Stop>

			 HAL_TIM_IC_Stop(&htim2, TIM_CHANNEL_1);
 8002808:	2100      	movs	r1, #0
 800280a:	4878      	ldr	r0, [pc, #480]	; (80029ec <HAL_GPIO_EXTI_Callback+0x2d0>)
 800280c:	f007 ffa3 	bl	800a756 <HAL_TIM_IC_Stop>
			 HAL_TIM_IC_Stop(&htim3, TIM_CHANNEL_1);
 8002810:	2100      	movs	r1, #0
 8002812:	4877      	ldr	r0, [pc, #476]	; (80029f0 <HAL_GPIO_EXTI_Callback+0x2d4>)
 8002814:	f007 ff9f 	bl	800a756 <HAL_TIM_IC_Stop>
			 HAL_TIM_IC_Stop(&htim4, TIM_CHANNEL_1);
 8002818:	2100      	movs	r1, #0
 800281a:	4876      	ldr	r0, [pc, #472]	; (80029f4 <HAL_GPIO_EXTI_Callback+0x2d8>)
 800281c:	f007 ff9b 	bl	800a756 <HAL_TIM_IC_Stop>

			 endStopAlarmInf = true;
 8002820:	4b75      	ldr	r3, [pc, #468]	; (80029f8 <HAL_GPIO_EXTI_Callback+0x2dc>)
 8002822:	2201      	movs	r2, #1
 8002824:	701a      	strb	r2, [r3, #0]
			 state = FAULT;
 8002826:	4b75      	ldr	r3, [pc, #468]	; (80029fc <HAL_GPIO_EXTI_Callback+0x2e0>)
 8002828:	2205      	movs	r2, #5
 800282a:	701a      	strb	r2, [r3, #0]
			 break;
 800282c:	e0cd      	b.n	80029ca <HAL_GPIO_EXTI_Callback+0x2ae>

		 case E_EndStop1_Sup_Pin:
			 Stop_PWM_MOTOR_1;
 800282e:	2100      	movs	r1, #0
 8002830:	4869      	ldr	r0, [pc, #420]	; (80029d8 <HAL_GPIO_EXTI_Callback+0x2bc>)
 8002832:	f007 fe99 	bl	800a568 <HAL_TIM_PWM_Stop>
			 Stop_PWM_MOTOR_2;
 8002836:	2100      	movs	r1, #0
 8002838:	4868      	ldr	r0, [pc, #416]	; (80029dc <HAL_GPIO_EXTI_Callback+0x2c0>)
 800283a:	f007 fe95 	bl	800a568 <HAL_TIM_PWM_Stop>
			 Stop_PWM_MOTOR_3;
 800283e:	2100      	movs	r1, #0
 8002840:	4867      	ldr	r0, [pc, #412]	; (80029e0 <HAL_GPIO_EXTI_Callback+0x2c4>)
 8002842:	f007 fe91 	bl	800a568 <HAL_TIM_PWM_Stop>

			 HAL_TIM_Base_Stop_IT(&htim15);
 8002846:	4867      	ldr	r0, [pc, #412]	; (80029e4 <HAL_GPIO_EXTI_Callback+0x2c8>)
 8002848:	f007 fcf0 	bl	800a22c <HAL_TIM_Base_Stop_IT>
			 HAL_TIM_Base_Stop(&htim5);
 800284c:	4866      	ldr	r0, [pc, #408]	; (80029e8 <HAL_GPIO_EXTI_Callback+0x2cc>)
 800284e:	f007 fc4d 	bl	800a0ec <HAL_TIM_Base_Stop>

			 HAL_TIM_IC_Stop(&htim2, TIM_CHANNEL_1);
 8002852:	2100      	movs	r1, #0
 8002854:	4865      	ldr	r0, [pc, #404]	; (80029ec <HAL_GPIO_EXTI_Callback+0x2d0>)
 8002856:	f007 ff7e 	bl	800a756 <HAL_TIM_IC_Stop>
			 HAL_TIM_IC_Stop(&htim3, TIM_CHANNEL_1);
 800285a:	2100      	movs	r1, #0
 800285c:	4864      	ldr	r0, [pc, #400]	; (80029f0 <HAL_GPIO_EXTI_Callback+0x2d4>)
 800285e:	f007 ff7a 	bl	800a756 <HAL_TIM_IC_Stop>
			 HAL_TIM_IC_Stop(&htim4, TIM_CHANNEL_1);
 8002862:	2100      	movs	r1, #0
 8002864:	4863      	ldr	r0, [pc, #396]	; (80029f4 <HAL_GPIO_EXTI_Callback+0x2d8>)
 8002866:	f007 ff76 	bl	800a756 <HAL_TIM_IC_Stop>

			 endStopAlarmSup = true;
 800286a:	4b65      	ldr	r3, [pc, #404]	; (8002a00 <HAL_GPIO_EXTI_Callback+0x2e4>)
 800286c:	2201      	movs	r2, #1
 800286e:	701a      	strb	r2, [r3, #0]
			 state = FAULT;
 8002870:	4b62      	ldr	r3, [pc, #392]	; (80029fc <HAL_GPIO_EXTI_Callback+0x2e0>)
 8002872:	2205      	movs	r2, #5
 8002874:	701a      	strb	r2, [r3, #0]
			 break;
 8002876:	e0a8      	b.n	80029ca <HAL_GPIO_EXTI_Callback+0x2ae>

		 case E_EndStop2_Inf_Pin:
			 Stop_PWM_MOTOR_1;
 8002878:	2100      	movs	r1, #0
 800287a:	4857      	ldr	r0, [pc, #348]	; (80029d8 <HAL_GPIO_EXTI_Callback+0x2bc>)
 800287c:	f007 fe74 	bl	800a568 <HAL_TIM_PWM_Stop>
			 Stop_PWM_MOTOR_2;
 8002880:	2100      	movs	r1, #0
 8002882:	4856      	ldr	r0, [pc, #344]	; (80029dc <HAL_GPIO_EXTI_Callback+0x2c0>)
 8002884:	f007 fe70 	bl	800a568 <HAL_TIM_PWM_Stop>
			 Stop_PWM_MOTOR_3;
 8002888:	2100      	movs	r1, #0
 800288a:	4855      	ldr	r0, [pc, #340]	; (80029e0 <HAL_GPIO_EXTI_Callback+0x2c4>)
 800288c:	f007 fe6c 	bl	800a568 <HAL_TIM_PWM_Stop>

			 HAL_TIM_Base_Stop_IT(&htim15);
 8002890:	4854      	ldr	r0, [pc, #336]	; (80029e4 <HAL_GPIO_EXTI_Callback+0x2c8>)
 8002892:	f007 fccb 	bl	800a22c <HAL_TIM_Base_Stop_IT>
			 HAL_TIM_Base_Stop(&htim5);
 8002896:	4854      	ldr	r0, [pc, #336]	; (80029e8 <HAL_GPIO_EXTI_Callback+0x2cc>)
 8002898:	f007 fc28 	bl	800a0ec <HAL_TIM_Base_Stop>

			 HAL_TIM_IC_Stop(&htim2, TIM_CHANNEL_1);
 800289c:	2100      	movs	r1, #0
 800289e:	4853      	ldr	r0, [pc, #332]	; (80029ec <HAL_GPIO_EXTI_Callback+0x2d0>)
 80028a0:	f007 ff59 	bl	800a756 <HAL_TIM_IC_Stop>
			 HAL_TIM_IC_Stop(&htim3, TIM_CHANNEL_1);
 80028a4:	2100      	movs	r1, #0
 80028a6:	4852      	ldr	r0, [pc, #328]	; (80029f0 <HAL_GPIO_EXTI_Callback+0x2d4>)
 80028a8:	f007 ff55 	bl	800a756 <HAL_TIM_IC_Stop>
			 HAL_TIM_IC_Stop(&htim4, TIM_CHANNEL_1);
 80028ac:	2100      	movs	r1, #0
 80028ae:	4851      	ldr	r0, [pc, #324]	; (80029f4 <HAL_GPIO_EXTI_Callback+0x2d8>)
 80028b0:	f007 ff51 	bl	800a756 <HAL_TIM_IC_Stop>

			 endStopAlarmInf = true;
 80028b4:	4b50      	ldr	r3, [pc, #320]	; (80029f8 <HAL_GPIO_EXTI_Callback+0x2dc>)
 80028b6:	2201      	movs	r2, #1
 80028b8:	701a      	strb	r2, [r3, #0]
			 state = FAULT;
 80028ba:	4b50      	ldr	r3, [pc, #320]	; (80029fc <HAL_GPIO_EXTI_Callback+0x2e0>)
 80028bc:	2205      	movs	r2, #5
 80028be:	701a      	strb	r2, [r3, #0]
			 break;
 80028c0:	e083      	b.n	80029ca <HAL_GPIO_EXTI_Callback+0x2ae>


		 case E_EndStop2_Sup_Pin:
			 Stop_PWM_MOTOR_1;
 80028c2:	2100      	movs	r1, #0
 80028c4:	4844      	ldr	r0, [pc, #272]	; (80029d8 <HAL_GPIO_EXTI_Callback+0x2bc>)
 80028c6:	f007 fe4f 	bl	800a568 <HAL_TIM_PWM_Stop>
			 Stop_PWM_MOTOR_2;
 80028ca:	2100      	movs	r1, #0
 80028cc:	4843      	ldr	r0, [pc, #268]	; (80029dc <HAL_GPIO_EXTI_Callback+0x2c0>)
 80028ce:	f007 fe4b 	bl	800a568 <HAL_TIM_PWM_Stop>
			 Stop_PWM_MOTOR_3;
 80028d2:	2100      	movs	r1, #0
 80028d4:	4842      	ldr	r0, [pc, #264]	; (80029e0 <HAL_GPIO_EXTI_Callback+0x2c4>)
 80028d6:	f007 fe47 	bl	800a568 <HAL_TIM_PWM_Stop>

			 HAL_TIM_Base_Stop_IT(&htim15);
 80028da:	4842      	ldr	r0, [pc, #264]	; (80029e4 <HAL_GPIO_EXTI_Callback+0x2c8>)
 80028dc:	f007 fca6 	bl	800a22c <HAL_TIM_Base_Stop_IT>
			 HAL_TIM_Base_Stop(&htim5);
 80028e0:	4841      	ldr	r0, [pc, #260]	; (80029e8 <HAL_GPIO_EXTI_Callback+0x2cc>)
 80028e2:	f007 fc03 	bl	800a0ec <HAL_TIM_Base_Stop>

			 HAL_TIM_IC_Stop(&htim2, TIM_CHANNEL_1);
 80028e6:	2100      	movs	r1, #0
 80028e8:	4840      	ldr	r0, [pc, #256]	; (80029ec <HAL_GPIO_EXTI_Callback+0x2d0>)
 80028ea:	f007 ff34 	bl	800a756 <HAL_TIM_IC_Stop>
			 HAL_TIM_IC_Stop(&htim3, TIM_CHANNEL_1);
 80028ee:	2100      	movs	r1, #0
 80028f0:	483f      	ldr	r0, [pc, #252]	; (80029f0 <HAL_GPIO_EXTI_Callback+0x2d4>)
 80028f2:	f007 ff30 	bl	800a756 <HAL_TIM_IC_Stop>
			 HAL_TIM_IC_Stop(&htim4, TIM_CHANNEL_1);
 80028f6:	2100      	movs	r1, #0
 80028f8:	483e      	ldr	r0, [pc, #248]	; (80029f4 <HAL_GPIO_EXTI_Callback+0x2d8>)
 80028fa:	f007 ff2c 	bl	800a756 <HAL_TIM_IC_Stop>

			 endStopAlarmSup = true;
 80028fe:	4b40      	ldr	r3, [pc, #256]	; (8002a00 <HAL_GPIO_EXTI_Callback+0x2e4>)
 8002900:	2201      	movs	r2, #1
 8002902:	701a      	strb	r2, [r3, #0]
			 state = FAULT;
 8002904:	4b3d      	ldr	r3, [pc, #244]	; (80029fc <HAL_GPIO_EXTI_Callback+0x2e0>)
 8002906:	2205      	movs	r2, #5
 8002908:	701a      	strb	r2, [r3, #0]
			 break;
 800290a:	e05e      	b.n	80029ca <HAL_GPIO_EXTI_Callback+0x2ae>

		 case E_EndStop3_Inf_Pin:
			 Stop_PWM_MOTOR_1;
 800290c:	2100      	movs	r1, #0
 800290e:	4832      	ldr	r0, [pc, #200]	; (80029d8 <HAL_GPIO_EXTI_Callback+0x2bc>)
 8002910:	f007 fe2a 	bl	800a568 <HAL_TIM_PWM_Stop>
			 Stop_PWM_MOTOR_2;
 8002914:	2100      	movs	r1, #0
 8002916:	4831      	ldr	r0, [pc, #196]	; (80029dc <HAL_GPIO_EXTI_Callback+0x2c0>)
 8002918:	f007 fe26 	bl	800a568 <HAL_TIM_PWM_Stop>
			 Stop_PWM_MOTOR_3;
 800291c:	2100      	movs	r1, #0
 800291e:	4830      	ldr	r0, [pc, #192]	; (80029e0 <HAL_GPIO_EXTI_Callback+0x2c4>)
 8002920:	f007 fe22 	bl	800a568 <HAL_TIM_PWM_Stop>

			 HAL_TIM_Base_Stop_IT(&htim15);
 8002924:	482f      	ldr	r0, [pc, #188]	; (80029e4 <HAL_GPIO_EXTI_Callback+0x2c8>)
 8002926:	f007 fc81 	bl	800a22c <HAL_TIM_Base_Stop_IT>
			 HAL_TIM_Base_Stop(&htim5);
 800292a:	482f      	ldr	r0, [pc, #188]	; (80029e8 <HAL_GPIO_EXTI_Callback+0x2cc>)
 800292c:	f007 fbde 	bl	800a0ec <HAL_TIM_Base_Stop>

			 HAL_TIM_IC_Stop(&htim2, TIM_CHANNEL_1);
 8002930:	2100      	movs	r1, #0
 8002932:	482e      	ldr	r0, [pc, #184]	; (80029ec <HAL_GPIO_EXTI_Callback+0x2d0>)
 8002934:	f007 ff0f 	bl	800a756 <HAL_TIM_IC_Stop>
			 HAL_TIM_IC_Stop(&htim3, TIM_CHANNEL_1);
 8002938:	2100      	movs	r1, #0
 800293a:	482d      	ldr	r0, [pc, #180]	; (80029f0 <HAL_GPIO_EXTI_Callback+0x2d4>)
 800293c:	f007 ff0b 	bl	800a756 <HAL_TIM_IC_Stop>
			 HAL_TIM_IC_Stop(&htim4, TIM_CHANNEL_1);
 8002940:	2100      	movs	r1, #0
 8002942:	482c      	ldr	r0, [pc, #176]	; (80029f4 <HAL_GPIO_EXTI_Callback+0x2d8>)
 8002944:	f007 ff07 	bl	800a756 <HAL_TIM_IC_Stop>

			 endStopAlarmInf = true;
 8002948:	4b2b      	ldr	r3, [pc, #172]	; (80029f8 <HAL_GPIO_EXTI_Callback+0x2dc>)
 800294a:	2201      	movs	r2, #1
 800294c:	701a      	strb	r2, [r3, #0]
			 state = FAULT;
 800294e:	4b2b      	ldr	r3, [pc, #172]	; (80029fc <HAL_GPIO_EXTI_Callback+0x2e0>)
 8002950:	2205      	movs	r2, #5
 8002952:	701a      	strb	r2, [r3, #0]

			 break;
 8002954:	e039      	b.n	80029ca <HAL_GPIO_EXTI_Callback+0x2ae>

		 case E_EndStop3_Sup_Pin:
			 Stop_PWM_MOTOR_1;
 8002956:	2100      	movs	r1, #0
 8002958:	481f      	ldr	r0, [pc, #124]	; (80029d8 <HAL_GPIO_EXTI_Callback+0x2bc>)
 800295a:	f007 fe05 	bl	800a568 <HAL_TIM_PWM_Stop>
			 Stop_PWM_MOTOR_2;
 800295e:	2100      	movs	r1, #0
 8002960:	481e      	ldr	r0, [pc, #120]	; (80029dc <HAL_GPIO_EXTI_Callback+0x2c0>)
 8002962:	f007 fe01 	bl	800a568 <HAL_TIM_PWM_Stop>
			 Stop_PWM_MOTOR_3;
 8002966:	2100      	movs	r1, #0
 8002968:	481d      	ldr	r0, [pc, #116]	; (80029e0 <HAL_GPIO_EXTI_Callback+0x2c4>)
 800296a:	f007 fdfd 	bl	800a568 <HAL_TIM_PWM_Stop>

			 HAL_TIM_Base_Stop_IT(&htim15);
 800296e:	481d      	ldr	r0, [pc, #116]	; (80029e4 <HAL_GPIO_EXTI_Callback+0x2c8>)
 8002970:	f007 fc5c 	bl	800a22c <HAL_TIM_Base_Stop_IT>
			 HAL_TIM_Base_Stop(&htim5);
 8002974:	481c      	ldr	r0, [pc, #112]	; (80029e8 <HAL_GPIO_EXTI_Callback+0x2cc>)
 8002976:	f007 fbb9 	bl	800a0ec <HAL_TIM_Base_Stop>

			 HAL_TIM_IC_Stop(&htim2, TIM_CHANNEL_1);
 800297a:	2100      	movs	r1, #0
 800297c:	481b      	ldr	r0, [pc, #108]	; (80029ec <HAL_GPIO_EXTI_Callback+0x2d0>)
 800297e:	f007 feea 	bl	800a756 <HAL_TIM_IC_Stop>
			 HAL_TIM_IC_Stop(&htim3, TIM_CHANNEL_1);
 8002982:	2100      	movs	r1, #0
 8002984:	481a      	ldr	r0, [pc, #104]	; (80029f0 <HAL_GPIO_EXTI_Callback+0x2d4>)
 8002986:	f007 fee6 	bl	800a756 <HAL_TIM_IC_Stop>
			 HAL_TIM_IC_Stop(&htim4, TIM_CHANNEL_1);
 800298a:	2100      	movs	r1, #0
 800298c:	4819      	ldr	r0, [pc, #100]	; (80029f4 <HAL_GPIO_EXTI_Callback+0x2d8>)
 800298e:	f007 fee2 	bl	800a756 <HAL_TIM_IC_Stop>

			 endStopAlarmSup = true;
 8002992:	4b1b      	ldr	r3, [pc, #108]	; (8002a00 <HAL_GPIO_EXTI_Callback+0x2e4>)
 8002994:	2201      	movs	r2, #1
 8002996:	701a      	strb	r2, [r3, #0]
			 state = FAULT;
 8002998:	4b18      	ldr	r3, [pc, #96]	; (80029fc <HAL_GPIO_EXTI_Callback+0x2e0>)
 800299a:	2205      	movs	r2, #5
 800299c:	701a      	strb	r2, [r3, #0]
			 break;
 800299e:	e014      	b.n	80029ca <HAL_GPIO_EXTI_Callback+0x2ae>

		 case BUTTON_Pin:

			 if (!endStopAlarmSup && !endStopAlarmInf && !faultDrivers){
 80029a0:	4b17      	ldr	r3, [pc, #92]	; (8002a00 <HAL_GPIO_EXTI_Callback+0x2e4>)
 80029a2:	781b      	ldrb	r3, [r3, #0]
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d10b      	bne.n	80029c0 <HAL_GPIO_EXTI_Callback+0x2a4>
 80029a8:	4b13      	ldr	r3, [pc, #76]	; (80029f8 <HAL_GPIO_EXTI_Callback+0x2dc>)
 80029aa:	781b      	ldrb	r3, [r3, #0]
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d107      	bne.n	80029c0 <HAL_GPIO_EXTI_Callback+0x2a4>
 80029b0:	4b14      	ldr	r3, [pc, #80]	; (8002a04 <HAL_GPIO_EXTI_Callback+0x2e8>)
 80029b2:	781b      	ldrb	r3, [r3, #0]
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d103      	bne.n	80029c0 <HAL_GPIO_EXTI_Callback+0x2a4>
				 continuar = false;
 80029b8:	4b13      	ldr	r3, [pc, #76]	; (8002a08 <HAL_GPIO_EXTI_Callback+0x2ec>)
 80029ba:	2200      	movs	r2, #0
 80029bc:	701a      	strb	r2, [r3, #0]
			 }else{continuar = true;}

			 break;
 80029be:	e004      	b.n	80029ca <HAL_GPIO_EXTI_Callback+0x2ae>
			 }else{continuar = true;}
 80029c0:	4b11      	ldr	r3, [pc, #68]	; (8002a08 <HAL_GPIO_EXTI_Callback+0x2ec>)
 80029c2:	2201      	movs	r2, #1
 80029c4:	701a      	strb	r2, [r3, #0]
			 break;
 80029c6:	e000      	b.n	80029ca <HAL_GPIO_EXTI_Callback+0x2ae>
//			 //continuar = false;
//			 faultDrivers = true;
//			 state = FAULT;
//			 break;

		 default: break;
 80029c8:	bf00      	nop


	}


}
 80029ca:	bf00      	nop
 80029cc:	3708      	adds	r7, #8
 80029ce:	46bd      	mov	sp, r7
 80029d0:	bd80      	pop	{r7, pc}
 80029d2:	bf00      	nop
 80029d4:	24000454 	.word	0x24000454
 80029d8:	240006f8 	.word	0x240006f8
 80029dc:	24000744 	.word	0x24000744
 80029e0:	24000790 	.word	0x24000790
 80029e4:	240007dc 	.word	0x240007dc
 80029e8:	240006ac 	.word	0x240006ac
 80029ec:	240005c8 	.word	0x240005c8
 80029f0:	24000614 	.word	0x24000614
 80029f4:	24000660 	.word	0x24000660
 80029f8:	2400045d 	.word	0x2400045d
 80029fc:	24000458 	.word	0x24000458
 8002a00:	2400045c 	.word	0x2400045c
 8002a04:	2400045f 	.word	0x2400045f
 8002a08:	2400045e 	.word	0x2400045e

08002a0c <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8002a0c:	b580      	push	{r7, lr}
 8002a0e:	b084      	sub	sp, #16
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	6078      	str	r0, [r7, #4]

	if (huart->Instance == USART3) {
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	4a30      	ldr	r2, [pc, #192]	; (8002adc <HAL_UART_RxCpltCallback+0xd0>)
 8002a1a:	4293      	cmp	r3, r2
 8002a1c:	d14d      	bne.n	8002aba <HAL_UART_RxCpltCallback+0xae>
		char dato;
		dato = rx_data;
 8002a1e:	4b30      	ldr	r3, [pc, #192]	; (8002ae0 <HAL_UART_RxCpltCallback+0xd4>)
 8002a20:	781b      	ldrb	r3, [r3, #0]
 8002a22:	73fb      	strb	r3, [r7, #15]
		switch (dato) {
 8002a24:	7bfb      	ldrb	r3, [r7, #15]
 8002a26:	2b3a      	cmp	r3, #58	; 0x3a
 8002a28:	d006      	beq.n	8002a38 <HAL_UART_RxCpltCallback+0x2c>
 8002a2a:	2b3a      	cmp	r3, #58	; 0x3a
 8002a2c:	dc36      	bgt.n	8002a9c <HAL_UART_RxCpltCallback+0x90>
 8002a2e:	2b08      	cmp	r3, #8
 8002a30:	d009      	beq.n	8002a46 <HAL_UART_RxCpltCallback+0x3a>
 8002a32:	2b0d      	cmp	r3, #13
 8002a34:	d01e      	beq.n	8002a74 <HAL_UART_RxCpltCallback+0x68>
 8002a36:	e031      	b.n	8002a9c <HAL_UART_RxCpltCallback+0x90>
		case ':':
			rx_index = 0;
 8002a38:	4b2a      	ldr	r3, [pc, #168]	; (8002ae4 <HAL_UART_RxCpltCallback+0xd8>)
 8002a3a:	2200      	movs	r2, #0
 8002a3c:	701a      	strb	r2, [r3, #0]
			cm0 = 1;
 8002a3e:	4b2a      	ldr	r3, [pc, #168]	; (8002ae8 <HAL_UART_RxCpltCallback+0xdc>)
 8002a40:	2201      	movs	r2, #1
 8002a42:	701a      	strb	r2, [r3, #0]
			break;
 8002a44:	e040      	b.n	8002ac8 <HAL_UART_RxCpltCallback+0xbc>
		case 8:
			if (rx_index > 0) {
 8002a46:	4b27      	ldr	r3, [pc, #156]	; (8002ae4 <HAL_UART_RxCpltCallback+0xd8>)
 8002a48:	781b      	ldrb	r3, [r3, #0]
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d037      	beq.n	8002abe <HAL_UART_RxCpltCallback+0xb2>
				rx_index--;
 8002a4e:	4b25      	ldr	r3, [pc, #148]	; (8002ae4 <HAL_UART_RxCpltCallback+0xd8>)
 8002a50:	781b      	ldrb	r3, [r3, #0]
 8002a52:	3b01      	subs	r3, #1
 8002a54:	b2da      	uxtb	r2, r3
 8002a56:	4b23      	ldr	r3, [pc, #140]	; (8002ae4 <HAL_UART_RxCpltCallback+0xd8>)
 8002a58:	701a      	strb	r2, [r3, #0]
			}
			break;
 8002a5a:	e030      	b.n	8002abe <HAL_UART_RxCpltCallback+0xb2>
		case '\r':

			while (!(rx_index==30)){
				rx_buffer[rx_index]= (uint8_t) 0;
 8002a5c:	4b21      	ldr	r3, [pc, #132]	; (8002ae4 <HAL_UART_RxCpltCallback+0xd8>)
 8002a5e:	781b      	ldrb	r3, [r3, #0]
 8002a60:	461a      	mov	r2, r3
 8002a62:	4b22      	ldr	r3, [pc, #136]	; (8002aec <HAL_UART_RxCpltCallback+0xe0>)
 8002a64:	2100      	movs	r1, #0
 8002a66:	5499      	strb	r1, [r3, r2]
				rx_index++;
 8002a68:	4b1e      	ldr	r3, [pc, #120]	; (8002ae4 <HAL_UART_RxCpltCallback+0xd8>)
 8002a6a:	781b      	ldrb	r3, [r3, #0]
 8002a6c:	3301      	adds	r3, #1
 8002a6e:	b2da      	uxtb	r2, r3
 8002a70:	4b1c      	ldr	r3, [pc, #112]	; (8002ae4 <HAL_UART_RxCpltCallback+0xd8>)
 8002a72:	701a      	strb	r2, [r3, #0]
			while (!(rx_index==30)){
 8002a74:	4b1b      	ldr	r3, [pc, #108]	; (8002ae4 <HAL_UART_RxCpltCallback+0xd8>)
 8002a76:	781b      	ldrb	r3, [r3, #0]
 8002a78:	2b1e      	cmp	r3, #30
 8002a7a:	d1ef      	bne.n	8002a5c <HAL_UART_RxCpltCallback+0x50>
			}

			if (cm0 == 1) {
 8002a7c:	4b1a      	ldr	r3, [pc, #104]	; (8002ae8 <HAL_UART_RxCpltCallback+0xdc>)
 8002a7e:	781b      	ldrb	r3, [r3, #0]
 8002a80:	2b01      	cmp	r3, #1
 8002a82:	d11e      	bne.n	8002ac2 <HAL_UART_RxCpltCallback+0xb6>
				rx_buffer[rx_index] = 0;
 8002a84:	4b17      	ldr	r3, [pc, #92]	; (8002ae4 <HAL_UART_RxCpltCallback+0xd8>)
 8002a86:	781b      	ldrb	r3, [r3, #0]
 8002a88:	461a      	mov	r2, r3
 8002a8a:	4b18      	ldr	r3, [pc, #96]	; (8002aec <HAL_UART_RxCpltCallback+0xe0>)
 8002a8c:	2100      	movs	r1, #0
 8002a8e:	5499      	strb	r1, [r3, r2]
				interpretaComando();
 8002a90:	f7fe fc7c 	bl	800138c <interpretaComando>
				cm0 = 0;
 8002a94:	4b14      	ldr	r3, [pc, #80]	; (8002ae8 <HAL_UART_RxCpltCallback+0xdc>)
 8002a96:	2200      	movs	r2, #0
 8002a98:	701a      	strb	r2, [r3, #0]

			}
			break;
 8002a9a:	e012      	b.n	8002ac2 <HAL_UART_RxCpltCallback+0xb6>
		default:
			if (rx_index < 30) {
 8002a9c:	4b11      	ldr	r3, [pc, #68]	; (8002ae4 <HAL_UART_RxCpltCallback+0xd8>)
 8002a9e:	781b      	ldrb	r3, [r3, #0]
 8002aa0:	2b1d      	cmp	r3, #29
 8002aa2:	d810      	bhi.n	8002ac6 <HAL_UART_RxCpltCallback+0xba>
				rx_buffer[rx_index++] = dato;
 8002aa4:	4b0f      	ldr	r3, [pc, #60]	; (8002ae4 <HAL_UART_RxCpltCallback+0xd8>)
 8002aa6:	781b      	ldrb	r3, [r3, #0]
 8002aa8:	1c5a      	adds	r2, r3, #1
 8002aaa:	b2d1      	uxtb	r1, r2
 8002aac:	4a0d      	ldr	r2, [pc, #52]	; (8002ae4 <HAL_UART_RxCpltCallback+0xd8>)
 8002aae:	7011      	strb	r1, [r2, #0]
 8002ab0:	4619      	mov	r1, r3
 8002ab2:	4a0e      	ldr	r2, [pc, #56]	; (8002aec <HAL_UART_RxCpltCallback+0xe0>)
 8002ab4:	7bfb      	ldrb	r3, [r7, #15]
 8002ab6:	5453      	strb	r3, [r2, r1]
			}
			break;
 8002ab8:	e005      	b.n	8002ac6 <HAL_UART_RxCpltCallback+0xba>
		}
	}
 8002aba:	bf00      	nop
 8002abc:	e004      	b.n	8002ac8 <HAL_UART_RxCpltCallback+0xbc>
			break;
 8002abe:	bf00      	nop
 8002ac0:	e002      	b.n	8002ac8 <HAL_UART_RxCpltCallback+0xbc>
			break;
 8002ac2:	bf00      	nop
 8002ac4:	e000      	b.n	8002ac8 <HAL_UART_RxCpltCallback+0xbc>
			break;
 8002ac6:	bf00      	nop
	HAL_UART_Receive_IT(&huart3, &rx_data, 1); //Receive data (one character only)
 8002ac8:	2201      	movs	r2, #1
 8002aca:	4905      	ldr	r1, [pc, #20]	; (8002ae0 <HAL_UART_RxCpltCallback+0xd4>)
 8002acc:	4808      	ldr	r0, [pc, #32]	; (8002af0 <HAL_UART_RxCpltCallback+0xe4>)
 8002ace:	f009 fad9 	bl	800c084 <HAL_UART_Receive_IT>
}
 8002ad2:	bf00      	nop
 8002ad4:	3710      	adds	r7, #16
 8002ad6:	46bd      	mov	sp, r7
 8002ad8:	bd80      	pop	{r7, pc}
 8002ada:	bf00      	nop
 8002adc:	40004800 	.word	0x40004800
 8002ae0:	2400059a 	.word	0x2400059a
 8002ae4:	24000579 	.word	0x24000579
 8002ae8:	24000450 	.word	0x24000450
 8002aec:	2400057c 	.word	0x2400057c
 8002af0:	24000a00 	.word	0x24000a00

08002af4 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 8002af4:	b480      	push	{r7}
 8002af6:	b083      	sub	sp, #12
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	6078      	str	r0, [r7, #4]
	__NOP();
 8002afc:	bf00      	nop
}
 8002afe:	bf00      	nop
 8002b00:	370c      	adds	r7, #12
 8002b02:	46bd      	mov	sp, r7
 8002b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b08:	4770      	bx	lr
	...

08002b0c <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) {
 8002b0c:	b480      	push	{r7}
 8002b0e:	b083      	sub	sp, #12
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	6078      	str	r0, [r7, #4]

	if (htim->Instance == TIM2) {
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b1c:	d10f      	bne.n	8002b3e <HAL_TIM_IC_CaptureCallback+0x32>
		if (motor1.pMotor == motor1.numStep) {
 8002b1e:	4b1f      	ldr	r3, [pc, #124]	; (8002b9c <HAL_TIM_IC_CaptureCallback+0x90>)
 8002b20:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002b22:	4b1e      	ldr	r3, [pc, #120]	; (8002b9c <HAL_TIM_IC_CaptureCallback+0x90>)
 8002b24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b26:	429a      	cmp	r2, r3
 8002b28:	d103      	bne.n	8002b32 <HAL_TIM_IC_CaptureCallback+0x26>
			motor1.stepReached = true;
 8002b2a:	4b1c      	ldr	r3, [pc, #112]	; (8002b9c <HAL_TIM_IC_CaptureCallback+0x90>)
 8002b2c:	2201      	movs	r2, #1
 8002b2e:	765a      	strb	r2, [r3, #25]
			motor3.pMotor++;
		}

	}

}
 8002b30:	e02e      	b.n	8002b90 <HAL_TIM_IC_CaptureCallback+0x84>
			motor1.pMotor++;
 8002b32:	4b1a      	ldr	r3, [pc, #104]	; (8002b9c <HAL_TIM_IC_CaptureCallback+0x90>)
 8002b34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b36:	3301      	adds	r3, #1
 8002b38:	4a18      	ldr	r2, [pc, #96]	; (8002b9c <HAL_TIM_IC_CaptureCallback+0x90>)
 8002b3a:	6413      	str	r3, [r2, #64]	; 0x40
}
 8002b3c:	e028      	b.n	8002b90 <HAL_TIM_IC_CaptureCallback+0x84>
	}else if (htim->Instance == TIM3){
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	4a17      	ldr	r2, [pc, #92]	; (8002ba0 <HAL_TIM_IC_CaptureCallback+0x94>)
 8002b44:	4293      	cmp	r3, r2
 8002b46:	d10f      	bne.n	8002b68 <HAL_TIM_IC_CaptureCallback+0x5c>
		if (motor2.pMotor == motor2.numStep) {
 8002b48:	4b16      	ldr	r3, [pc, #88]	; (8002ba4 <HAL_TIM_IC_CaptureCallback+0x98>)
 8002b4a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002b4c:	4b15      	ldr	r3, [pc, #84]	; (8002ba4 <HAL_TIM_IC_CaptureCallback+0x98>)
 8002b4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b50:	429a      	cmp	r2, r3
 8002b52:	d103      	bne.n	8002b5c <HAL_TIM_IC_CaptureCallback+0x50>
			motor2.stepReached = true;
 8002b54:	4b13      	ldr	r3, [pc, #76]	; (8002ba4 <HAL_TIM_IC_CaptureCallback+0x98>)
 8002b56:	2201      	movs	r2, #1
 8002b58:	765a      	strb	r2, [r3, #25]
}
 8002b5a:	e019      	b.n	8002b90 <HAL_TIM_IC_CaptureCallback+0x84>
			motor2.pMotor++;
 8002b5c:	4b11      	ldr	r3, [pc, #68]	; (8002ba4 <HAL_TIM_IC_CaptureCallback+0x98>)
 8002b5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b60:	3301      	adds	r3, #1
 8002b62:	4a10      	ldr	r2, [pc, #64]	; (8002ba4 <HAL_TIM_IC_CaptureCallback+0x98>)
 8002b64:	6413      	str	r3, [r2, #64]	; 0x40
}
 8002b66:	e013      	b.n	8002b90 <HAL_TIM_IC_CaptureCallback+0x84>
	}else if (htim->Instance == TIM4){
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	4a0e      	ldr	r2, [pc, #56]	; (8002ba8 <HAL_TIM_IC_CaptureCallback+0x9c>)
 8002b6e:	4293      	cmp	r3, r2
 8002b70:	d10e      	bne.n	8002b90 <HAL_TIM_IC_CaptureCallback+0x84>
		if (motor3.pMotor == motor3.numStep) {
 8002b72:	4b0e      	ldr	r3, [pc, #56]	; (8002bac <HAL_TIM_IC_CaptureCallback+0xa0>)
 8002b74:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002b76:	4b0d      	ldr	r3, [pc, #52]	; (8002bac <HAL_TIM_IC_CaptureCallback+0xa0>)
 8002b78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b7a:	429a      	cmp	r2, r3
 8002b7c:	d103      	bne.n	8002b86 <HAL_TIM_IC_CaptureCallback+0x7a>
			motor3.stepReached = true;
 8002b7e:	4b0b      	ldr	r3, [pc, #44]	; (8002bac <HAL_TIM_IC_CaptureCallback+0xa0>)
 8002b80:	2201      	movs	r2, #1
 8002b82:	765a      	strb	r2, [r3, #25]
}
 8002b84:	e004      	b.n	8002b90 <HAL_TIM_IC_CaptureCallback+0x84>
			motor3.pMotor++;
 8002b86:	4b09      	ldr	r3, [pc, #36]	; (8002bac <HAL_TIM_IC_CaptureCallback+0xa0>)
 8002b88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b8a:	3301      	adds	r3, #1
 8002b8c:	4a07      	ldr	r2, [pc, #28]	; (8002bac <HAL_TIM_IC_CaptureCallback+0xa0>)
 8002b8e:	6413      	str	r3, [r2, #64]	; 0x40
}
 8002b90:	bf00      	nop
 8002b92:	370c      	adds	r7, #12
 8002b94:	46bd      	mov	sp, r7
 8002b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b9a:	4770      	bx	lr
 8002b9c:	24000370 	.word	0x24000370
 8002ba0:	40000400 	.word	0x40000400
 8002ba4:	240003b8 	.word	0x240003b8
 8002ba8:	40000800 	.word	0x40000800
 8002bac:	24000400 	.word	0x24000400

08002bb0 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8002bb0:	b480      	push	{r7}
 8002bb2:	b083      	sub	sp, #12
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	6078      	str	r0, [r7, #4]

	if (htim == &htim15) {  //Timer that update velocity'curve. It interrups every 10 ms
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	4a17      	ldr	r2, [pc, #92]	; (8002c18 <HAL_TIM_PeriodElapsedCallback+0x68>)
 8002bbc:	4293      	cmp	r3, r2
 8002bbe:	d11f      	bne.n	8002c00 <HAL_TIM_PeriodElapsedCallback+0x50>

		if (!timeFlag) {
 8002bc0:	4b16      	ldr	r3, [pc, #88]	; (8002c1c <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8002bc2:	781b      	ldrb	r3, [r3, #0]
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d105      	bne.n	8002bd4 <HAL_TIM_PeriodElapsedCallback+0x24>
			timeFlag = true;
 8002bc8:	4b14      	ldr	r3, [pc, #80]	; (8002c1c <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8002bca:	2201      	movs	r2, #1
 8002bcc:	701a      	strb	r2, [r3, #0]
			TIM5->CNT = 0;	//We start counting from here
 8002bce:	4b14      	ldr	r3, [pc, #80]	; (8002c20 <HAL_TIM_PeriodElapsedCallback+0x70>)
 8002bd0:	2200      	movs	r2, #0
 8002bd2:	625a      	str	r2, [r3, #36]	; 0x24
		}

		time = (((double) (TIM5->CNT)) * ((double)(TIM5->PSC + 1) / FCL));
 8002bd4:	4b12      	ldr	r3, [pc, #72]	; (8002c20 <HAL_TIM_PeriodElapsedCallback+0x70>)
 8002bd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bd8:	ee07 3a90 	vmov	s15, r3
 8002bdc:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 8002be0:	4b0f      	ldr	r3, [pc, #60]	; (8002c20 <HAL_TIM_PeriodElapsedCallback+0x70>)
 8002be2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002be4:	3301      	adds	r3, #1
 8002be6:	ee07 3a90 	vmov	s15, r3
 8002bea:	eeb8 5b67 	vcvt.f64.u32	d5, s15
 8002bee:	ed9f 4b08 	vldr	d4, [pc, #32]	; 8002c10 <HAL_TIM_PeriodElapsedCallback+0x60>
 8002bf2:	ee85 7b04 	vdiv.f64	d7, d5, d4
 8002bf6:	ee26 7b07 	vmul.f64	d7, d6, d7
 8002bfa:	4b0a      	ldr	r3, [pc, #40]	; (8002c24 <HAL_TIM_PeriodElapsedCallback+0x74>)
 8002bfc:	ed83 7b00 	vstr	d7, [r3]
	}
}
 8002c00:	bf00      	nop
 8002c02:	370c      	adds	r7, #12
 8002c04:	46bd      	mov	sp, r7
 8002c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c0a:	4770      	bx	lr
 8002c0c:	f3af 8000 	nop.w
 8002c10:	00000000 	.word	0x00000000
 8002c14:	418e8480 	.word	0x418e8480
 8002c18:	240007dc 	.word	0x240007dc
 8002c1c:	24000578 	.word	0x24000578
 8002c20:	40000c00 	.word	0x40000c00
 8002c24:	24000448 	.word	0x24000448

08002c28 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002c28:	b480      	push	{r7}
 8002c2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8002c2c:	bf00      	nop
 8002c2e:	46bd      	mov	sp, r7
 8002c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c34:	4770      	bx	lr
	...

08002c38 <configMotor>:
 *      Author: Santiago River
 *      Updated by: Elias Correa y Eliseo Elorga
 */
#include "motor.h"

void configMotor (Motor *motor, int i){
 8002c38:	b580      	push	{r7, lr}
 8002c3a:	b084      	sub	sp, #16
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	6078      	str	r0, [r7, #4]
 8002c40:	6039      	str	r1, [r7, #0]

    i = i-1; // Esto es ya que el usario ingresara 1,2 o 3
 8002c42:	683b      	ldr	r3, [r7, #0]
 8002c44:	3b01      	subs	r3, #1
 8002c46:	603b      	str	r3, [r7, #0]

	volatile double diffAngles;

	if (motor->theta >= motor->currentAngle) {
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	ed93 6b00 	vldr	d6, [r3]
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	ed93 7b08 	vldr	d7, [r3, #32]
 8002c54:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8002c58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c5c:	db2b      	blt.n	8002cb6 <configMotor+0x7e>

		diffAngles = motor->theta - motor->currentAngle;	//Calculo cuantos grados se tiene que mover.
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	ed93 6b00 	vldr	d6, [r3]
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	ed93 7b08 	vldr	d7, [r3, #32]
 8002c6a:	ee36 7b47 	vsub.f64	d7, d6, d7
 8002c6e:	ed87 7b02 	vstr	d7, [r7, #8]
		motor->currentAngle = motor->theta;
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c78:	6879      	ldr	r1, [r7, #4]
 8002c7a:	e9c1 2308 	strd	r2, r3, [r1, #32]
		if (i==0) negative_Dir_MOTOR_1; //Antihorario visto de frente
 8002c7e:	683b      	ldr	r3, [r7, #0]
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d105      	bne.n	8002c90 <configMotor+0x58>
 8002c84:	2201      	movs	r2, #1
 8002c86:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002c8a:	4849      	ldr	r0, [pc, #292]	; (8002db0 <configMotor+0x178>)
 8002c8c:	f004 fdd6 	bl	800783c <HAL_GPIO_WritePin>
		if (i==1) negative_Dir_MOTOR_2;
 8002c90:	683b      	ldr	r3, [r7, #0]
 8002c92:	2b01      	cmp	r3, #1
 8002c94:	d105      	bne.n	8002ca2 <configMotor+0x6a>
 8002c96:	2201      	movs	r2, #1
 8002c98:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002c9c:	4844      	ldr	r0, [pc, #272]	; (8002db0 <configMotor+0x178>)
 8002c9e:	f004 fdcd 	bl	800783c <HAL_GPIO_WritePin>
		if (i==2) negative_Dir_MOTOR_3;
 8002ca2:	683b      	ldr	r3, [r7, #0]
 8002ca4:	2b02      	cmp	r3, #2
 8002ca6:	d131      	bne.n	8002d0c <configMotor+0xd4>
 8002ca8:	2201      	movs	r2, #1
 8002caa:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002cae:	4840      	ldr	r0, [pc, #256]	; (8002db0 <configMotor+0x178>)
 8002cb0:	f004 fdc4 	bl	800783c <HAL_GPIO_WritePin>
 8002cb4:	e02a      	b.n	8002d0c <configMotor+0xd4>

	} else {

		diffAngles = motor->currentAngle - motor->theta;	//Calculo cuantos grados se tiene que mover.
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	ed93 6b08 	vldr	d6, [r3, #32]
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	ed93 7b00 	vldr	d7, [r3]
 8002cc2:	ee36 7b47 	vsub.f64	d7, d6, d7
 8002cc6:	ed87 7b02 	vstr	d7, [r7, #8]
		motor->currentAngle = motor->theta;
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cd0:	6879      	ldr	r1, [r7, #4]
 8002cd2:	e9c1 2308 	strd	r2, r3, [r1, #32]

		if (i==0) positive_Dir_MOTOR_1; // Horario visto de frente
 8002cd6:	683b      	ldr	r3, [r7, #0]
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d105      	bne.n	8002ce8 <configMotor+0xb0>
 8002cdc:	2200      	movs	r2, #0
 8002cde:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002ce2:	4833      	ldr	r0, [pc, #204]	; (8002db0 <configMotor+0x178>)
 8002ce4:	f004 fdaa 	bl	800783c <HAL_GPIO_WritePin>
		if (i==1) positive_Dir_MOTOR_2;
 8002ce8:	683b      	ldr	r3, [r7, #0]
 8002cea:	2b01      	cmp	r3, #1
 8002cec:	d105      	bne.n	8002cfa <configMotor+0xc2>
 8002cee:	2200      	movs	r2, #0
 8002cf0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002cf4:	482e      	ldr	r0, [pc, #184]	; (8002db0 <configMotor+0x178>)
 8002cf6:	f004 fda1 	bl	800783c <HAL_GPIO_WritePin>
		if (i==2) positive_Dir_MOTOR_3;
 8002cfa:	683b      	ldr	r3, [r7, #0]
 8002cfc:	2b02      	cmp	r3, #2
 8002cfe:	d105      	bne.n	8002d0c <configMotor+0xd4>
 8002d00:	2200      	movs	r2, #0
 8002d02:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002d06:	482a      	ldr	r0, [pc, #168]	; (8002db0 <configMotor+0x178>)
 8002d08:	f004 fd98 	bl	800783c <HAL_GPIO_WritePin>

	/*Calculamos el error de posicion por caseteo a "int" y cuando supera la unidad la compenzamos, para ello
	 * almacenamos el remanente de cada operacion. Cuando este remanente supera la unidad, le sumamos 1 a el numero
	 * de pasos que debe efectuar el motor */

	motor->calcStep = (diffAngles * STEPREV) / 360;
 8002d0c:	ed97 7b02 	vldr	d7, [r7, #8]
 8002d10:	ed9f 6b23 	vldr	d6, [pc, #140]	; 8002da0 <configMotor+0x168>
 8002d14:	ee27 6b06 	vmul.f64	d6, d7, d6
 8002d18:	ed9f 5b23 	vldr	d5, [pc, #140]	; 8002da8 <configMotor+0x170>
 8002d1c:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	ed83 7b0a 	vstr	d7, [r3, #40]	; 0x28
	motor->numStep = (uint32_t) motor->calcStep;
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	ed93 7b0a 	vldr	d7, [r3, #40]	; 0x28
 8002d2c:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8002d30:	ee17 2a90 	vmov	r2, s15
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	631a      	str	r2, [r3, #48]	; 0x30
	motor->remainder += (motor->calcStep - motor->numStep);
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	ed93 6b0e 	vldr	d6, [r3, #56]	; 0x38
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	ed93 5b0a 	vldr	d5, [r3, #40]	; 0x28
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d48:	ee07 3a90 	vmov	s15, r3
 8002d4c:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8002d50:	ee35 7b47 	vsub.f64	d7, d5, d7
 8002d54:	ee36 7b07 	vadd.f64	d7, d6, d7
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	ed83 7b0e 	vstr	d7, [r3, #56]	; 0x38
	if (motor->remainder >= 1) {
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	ed93 7b0e 	vldr	d7, [r3, #56]	; 0x38
 8002d64:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8002d68:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8002d6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d70:	da00      	bge.n	8002d74 <configMotor+0x13c>
		motor->remainder -= 1;
		motor->numStep += 1;
	}

}
 8002d72:	e00e      	b.n	8002d92 <configMotor+0x15a>
		motor->remainder -= 1;
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	ed93 7b0e 	vldr	d7, [r3, #56]	; 0x38
 8002d7a:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8002d7e:	ee37 7b46 	vsub.f64	d7, d7, d6
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	ed83 7b0e 	vstr	d7, [r3, #56]	; 0x38
		motor->numStep += 1;
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d8c:	1c5a      	adds	r2, r3, #1
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	631a      	str	r2, [r3, #48]	; 0x30
}
 8002d92:	bf00      	nop
 8002d94:	3710      	adds	r7, #16
 8002d96:	46bd      	mov	sp, r7
 8002d98:	bd80      	pop	{r7, pc}
 8002d9a:	bf00      	nop
 8002d9c:	f3af 8000 	nop.w
 8002da0:	00000000 	.word	0x00000000
 8002da4:	40bf4000 	.word	0x40bf4000
 8002da8:	00000000 	.word	0x00000000
 8002dac:	40768000 	.word	0x40768000
 8002db0:	58020800 	.word	0x58020800

08002db4 <robotInitialization>:
FILE *file;
char *filename = "archivo.txt";
char buffer[BUFFER_SIZE];
//--------------------------------------------

void robotInitialization(void){
 8002db4:	b580      	push	{r7, lr}
 8002db6:	af00      	add	r7, sp, #0
	* habilatamos los drivers al momento de lanzar el programa para que los motores se bloqueen. Se procedera
	* a darles una consigna pequeña de posicion en direccion horario para que los eslabones no entren en la
	* singularidad de los 90º */


	HAL_TIM_Base_Start(&htim12);
 8002db8:	481b      	ldr	r0, [pc, #108]	; (8002e28 <robotInitialization+0x74>)
 8002dba:	f007 f927 	bl	800a00c <HAL_TIM_Base_Start>
	HAL_TIM_Base_Start(&htim13);
 8002dbe:	481b      	ldr	r0, [pc, #108]	; (8002e2c <robotInitialization+0x78>)
 8002dc0:	f007 f924 	bl	800a00c <HAL_TIM_Base_Start>
	HAL_TIM_Base_Start(&htim14);
 8002dc4:	481a      	ldr	r0, [pc, #104]	; (8002e30 <robotInitialization+0x7c>)
 8002dc6:	f007 f921 	bl	800a00c <HAL_TIM_Base_Start>

	HAL_GPIO_WritePin(S_Enable_1_GPIO_Port, S_Enable_1_Pin, GPIO_PIN_RESET);
 8002dca:	2200      	movs	r2, #0
 8002dcc:	2110      	movs	r1, #16
 8002dce:	4819      	ldr	r0, [pc, #100]	; (8002e34 <robotInitialization+0x80>)
 8002dd0:	f004 fd34 	bl	800783c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S_Enable_2_GPIO_Port, S_Enable_2_Pin, GPIO_PIN_RESET);
 8002dd4:	2200      	movs	r2, #0
 8002dd6:	2120      	movs	r1, #32
 8002dd8:	4816      	ldr	r0, [pc, #88]	; (8002e34 <robotInitialization+0x80>)
 8002dda:	f004 fd2f 	bl	800783c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S_Enable_3_GPIO_Port, S_Enable_3_Pin, GPIO_PIN_RESET);
 8002dde:	2200      	movs	r2, #0
 8002de0:	2140      	movs	r1, #64	; 0x40
 8002de2:	4814      	ldr	r0, [pc, #80]	; (8002e34 <robotInitialization+0x80>)
 8002de4:	f004 fd2a 	bl	800783c <HAL_GPIO_WritePin>

	HAL_Delay(50); //50 ms es el tiempo que la señal ENABLE en cambiar de estado
 8002de8:	2032      	movs	r0, #50	; 0x32
 8002dea:	f003 fc89 	bl	8006700 <HAL_Delay>

	// Se estable la direccion horario por defecto
	positive_Dir_MOTOR_1;
 8002dee:	2200      	movs	r2, #0
 8002df0:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002df4:	4810      	ldr	r0, [pc, #64]	; (8002e38 <robotInitialization+0x84>)
 8002df6:	f004 fd21 	bl	800783c <HAL_GPIO_WritePin>
	positive_Dir_MOTOR_2;
 8002dfa:	2200      	movs	r2, #0
 8002dfc:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002e00:	480d      	ldr	r0, [pc, #52]	; (8002e38 <robotInitialization+0x84>)
 8002e02:	f004 fd1b 	bl	800783c <HAL_GPIO_WritePin>
	positive_Dir_MOTOR_3;
 8002e06:	2200      	movs	r2, #0
 8002e08:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002e0c:	480a      	ldr	r0, [pc, #40]	; (8002e38 <robotInitialization+0x84>)
 8002e0e:	f004 fd15 	bl	800783c <HAL_GPIO_WritePin>

	motor1.stepReached = false;
 8002e12:	4b0a      	ldr	r3, [pc, #40]	; (8002e3c <robotInitialization+0x88>)
 8002e14:	2200      	movs	r2, #0
 8002e16:	765a      	strb	r2, [r3, #25]
	motor2.stepReached = false;
 8002e18:	4b09      	ldr	r3, [pc, #36]	; (8002e40 <robotInitialization+0x8c>)
 8002e1a:	2200      	movs	r2, #0
 8002e1c:	765a      	strb	r2, [r3, #25]
	motor3.stepReached = false;
 8002e1e:	4b09      	ldr	r3, [pc, #36]	; (8002e44 <robotInitialization+0x90>)
 8002e20:	2200      	movs	r2, #0
 8002e22:	765a      	strb	r2, [r3, #25]


}
 8002e24:	bf00      	nop
 8002e26:	bd80      	pop	{r7, pc}
 8002e28:	240006f8 	.word	0x240006f8
 8002e2c:	24000744 	.word	0x24000744
 8002e30:	24000790 	.word	0x24000790
 8002e34:	58020c00 	.word	0x58020c00
 8002e38:	58020800 	.word	0x58020800
 8002e3c:	24000370 	.word	0x24000370
 8002e40:	240003b8 	.word	0x240003b8
 8002e44:	24000400 	.word	0x24000400

08002e48 <statesMachineLoop>:


void statesMachineLoop(void){
 8002e48:	b580      	push	{r7, lr}
 8002e4a:	af00      	add	r7, sp, #0



	switch (state){
 8002e4c:	4b9a      	ldr	r3, [pc, #616]	; (80030b8 <statesMachineLoop+0x270>)
 8002e4e:	781b      	ldrb	r3, [r3, #0]
 8002e50:	2b05      	cmp	r3, #5
 8002e52:	f200 8582 	bhi.w	800395a <statesMachineLoop+0xb12>
 8002e56:	a201      	add	r2, pc, #4	; (adr r2, 8002e5c <statesMachineLoop+0x14>)
 8002e58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e5c:	08002e75 	.word	0x08002e75
 8002e60:	080031ad 	.word	0x080031ad
 8002e64:	08002f75 	.word	0x08002f75
 8002e68:	08002ea5 	.word	0x08002ea5
 8002e6c:	080038d1 	.word	0x080038d1
 8002e70:	08003359 	.word	0x08003359

	case INIT:

		  HAL_UART_Transmit(&huart3, message, sizeof(message), 100); //Mensaje de inicializacion en curso.
 8002e74:	2364      	movs	r3, #100	; 0x64
 8002e76:	221c      	movs	r2, #28
 8002e78:	4990      	ldr	r1, [pc, #576]	; (80030bc <statesMachineLoop+0x274>)
 8002e7a:	4891      	ldr	r0, [pc, #580]	; (80030c0 <statesMachineLoop+0x278>)
 8002e7c:	f009 f86c 	bl	800bf58 <HAL_UART_Transmit>
		  HAL_UART_Receive_IT(&huart3, &rx_data, 1);
 8002e80:	2201      	movs	r2, #1
 8002e82:	4990      	ldr	r1, [pc, #576]	; (80030c4 <statesMachineLoop+0x27c>)
 8002e84:	488e      	ldr	r0, [pc, #568]	; (80030c0 <statesMachineLoop+0x278>)
 8002e86:	f009 f8fd 	bl	800c084 <HAL_UART_Receive_IT>
		  robotInitialization();
 8002e8a:	f7ff ff93 	bl	8002db4 <robotInitialization>
		  HAL_UART_Transmit(&huart3, message1, sizeof(message1), 100); //Mensaje inidicando que el Robot esta listo para su uso
 8002e8e:	2364      	movs	r3, #100	; 0x64
 8002e90:	2227      	movs	r2, #39	; 0x27
 8002e92:	498d      	ldr	r1, [pc, #564]	; (80030c8 <statesMachineLoop+0x280>)
 8002e94:	488a      	ldr	r0, [pc, #552]	; (80030c0 <statesMachineLoop+0x278>)
 8002e96:	f009 f85f 	bl	800bf58 <HAL_UART_Transmit>

		  state = READY;
 8002e9a:	4b87      	ldr	r3, [pc, #540]	; (80030b8 <statesMachineLoop+0x270>)
 8002e9c:	2201      	movs	r2, #1
 8002e9e:	701a      	strb	r2, [r3, #0]

		break;
 8002ea0:	f000 bd62 	b.w	8003968 <statesMachineLoop+0xb20>

	case HOME:

		receptionFlag = false; //Solo para asegurarse de no saltar al estado ready con esta bandera en true
 8002ea4:	4b89      	ldr	r3, [pc, #548]	; (80030cc <statesMachineLoop+0x284>)
 8002ea6:	2200      	movs	r2, #0
 8002ea8:	701a      	strb	r2, [r3, #0]

		homing();
 8002eaa:	f7fd ff2d 	bl	8000d08 <homing>

        if(homFin){
 8002eae:	4b88      	ldr	r3, [pc, #544]	; (80030d0 <statesMachineLoop+0x288>)
 8002eb0:	781b      	ldrb	r3, [r3, #0]
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	f000 8553 	beq.w	800395e <statesMachineLoop+0xb16>

        	homFin = false;
 8002eb8:	4b85      	ldr	r3, [pc, #532]	; (80030d0 <statesMachineLoop+0x288>)
 8002eba:	2200      	movs	r2, #0
 8002ebc:	701a      	strb	r2, [r3, #0]
        	HAL_Delay(1);
 8002ebe:	2001      	movs	r0, #1
 8002ec0:	f003 fc1e 	bl	8006700 <HAL_Delay>

        	HAL_NVIC_EnableIRQ(EXTI0_IRQn);		//Enciendo interrupcion EndStop 1 Superior
 8002ec4:	2006      	movs	r0, #6
 8002ec6:	f003 fd64 	bl	8006992 <HAL_NVIC_EnableIRQ>
        	HAL_NVIC_EnableIRQ(EXTI1_IRQn);		//Enciendo interrupcion EndStop 1 Inferior
 8002eca:	2007      	movs	r0, #7
 8002ecc:	f003 fd61 	bl	8006992 <HAL_NVIC_EnableIRQ>
        	HAL_NVIC_EnableIRQ(EXTI2_IRQn);		//Enciendo interrupcion EndStop 2 Superior
 8002ed0:	2008      	movs	r0, #8
 8002ed2:	f003 fd5e 	bl	8006992 <HAL_NVIC_EnableIRQ>
        	HAL_NVIC_EnableIRQ(EXTI3_IRQn);		//Enciendo interrupcion EndStop 2 Inferior
 8002ed6:	2009      	movs	r0, #9
 8002ed8:	f003 fd5b 	bl	8006992 <HAL_NVIC_EnableIRQ>
        	HAL_NVIC_EnableIRQ(EXTI4_IRQn);		//Enciendo interrupcion EndStop 3 Superior
 8002edc:	200a      	movs	r0, #10
 8002ede:	f003 fd58 	bl	8006992 <HAL_NVIC_EnableIRQ>
        	HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);	//Enciendo interrupcion EndStop 3 Inferior
 8002ee2:	2017      	movs	r0, #23
 8002ee4:	f003 fd55 	bl	8006992 <HAL_NVIC_EnableIRQ>
        	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn); //Enciendo interrupcion faultDriver
 8002ee8:	2028      	movs	r0, #40	; 0x28
 8002eea:	f003 fd52 	bl	8006992 <HAL_NVIC_EnableIRQ>

			Pini.x=0;
 8002eee:	4979      	ldr	r1, [pc, #484]	; (80030d4 <statesMachineLoop+0x28c>)
 8002ef0:	f04f 0200 	mov.w	r2, #0
 8002ef4:	f04f 0300 	mov.w	r3, #0
 8002ef8:	e9c1 2300 	strd	r2, r3, [r1]
			Pini.y=0;
 8002efc:	4975      	ldr	r1, [pc, #468]	; (80030d4 <statesMachineLoop+0x28c>)
 8002efe:	f04f 0200 	mov.w	r2, #0
 8002f02:	f04f 0300 	mov.w	r3, #0
 8002f06:	e9c1 2302 	strd	r2, r3, [r1, #8]
			Pini.z =-0.5208; //antes era -0.33
 8002f0a:	4972      	ldr	r1, [pc, #456]	; (80030d4 <statesMachineLoop+0x28c>)
 8002f0c:	a368      	add	r3, pc, #416	; (adr r3, 80030b0 <statesMachineLoop+0x268>)
 8002f0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f12:	e9c1 2304 	strd	r2, r3, [r1, #16]

			motor1.theta = 0.0;
 8002f16:	4970      	ldr	r1, [pc, #448]	; (80030d8 <statesMachineLoop+0x290>)
 8002f18:	f04f 0200 	mov.w	r2, #0
 8002f1c:	f04f 0300 	mov.w	r3, #0
 8002f20:	e9c1 2300 	strd	r2, r3, [r1]
			motor2.theta = 0.0;
 8002f24:	496d      	ldr	r1, [pc, #436]	; (80030dc <statesMachineLoop+0x294>)
 8002f26:	f04f 0200 	mov.w	r2, #0
 8002f2a:	f04f 0300 	mov.w	r3, #0
 8002f2e:	e9c1 2300 	strd	r2, r3, [r1]
			motor3.theta = 0.0;
 8002f32:	496b      	ldr	r1, [pc, #428]	; (80030e0 <statesMachineLoop+0x298>)
 8002f34:	f04f 0200 	mov.w	r2, #0
 8002f38:	f04f 0300 	mov.w	r3, #0
 8002f3c:	e9c1 2300 	strd	r2, r3, [r1]

			motor1.currentAngle = 0.0;
 8002f40:	4965      	ldr	r1, [pc, #404]	; (80030d8 <statesMachineLoop+0x290>)
 8002f42:	f04f 0200 	mov.w	r2, #0
 8002f46:	f04f 0300 	mov.w	r3, #0
 8002f4a:	e9c1 2308 	strd	r2, r3, [r1, #32]
			motor2.currentAngle = 0.0;
 8002f4e:	4963      	ldr	r1, [pc, #396]	; (80030dc <statesMachineLoop+0x294>)
 8002f50:	f04f 0200 	mov.w	r2, #0
 8002f54:	f04f 0300 	mov.w	r3, #0
 8002f58:	e9c1 2308 	strd	r2, r3, [r1, #32]
			motor3.currentAngle = 0.0;
 8002f5c:	4960      	ldr	r1, [pc, #384]	; (80030e0 <statesMachineLoop+0x298>)
 8002f5e:	f04f 0200 	mov.w	r2, #0
 8002f62:	f04f 0300 	mov.w	r3, #0
 8002f66:	e9c1 2308 	strd	r2, r3, [r1, #32]

			state = READY;
 8002f6a:	4b53      	ldr	r3, [pc, #332]	; (80030b8 <statesMachineLoop+0x270>)
 8002f6c:	2201      	movs	r2, #1
 8002f6e:	701a      	strb	r2, [r3, #0]

        }


		break;
 8002f70:	f000 bcf5 	b.w	800395e <statesMachineLoop+0xb16>

	case WORKING:

		receptionFlag = false;
 8002f74:	4b55      	ldr	r3, [pc, #340]	; (80030cc <statesMachineLoop+0x284>)
 8002f76:	2200      	movs	r2, #0
 8002f78:	701a      	strb	r2, [r3, #0]

		while (!(motor1.stepReached && motor2.stepReached  && motor3.stepReached)){
 8002f7a:	e087      	b.n	800308c <statesMachineLoop+0x244>

			if (state==FAULT)break;
 8002f7c:	4b4e      	ldr	r3, [pc, #312]	; (80030b8 <statesMachineLoop+0x270>)
 8002f7e:	781b      	ldrb	r3, [r3, #0]
 8002f80:	2b05      	cmp	r3, #5
 8002f82:	f000 80c3 	beq.w	800310c <statesMachineLoop+0x2c4>

			if (motor1.stepReached) {
 8002f86:	4b54      	ldr	r3, [pc, #336]	; (80030d8 <statesMachineLoop+0x290>)
 8002f88:	7e5b      	ldrb	r3, [r3, #25]
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d008      	beq.n	8002fa0 <statesMachineLoop+0x158>
				Stop_PWM_MOTOR_1;
 8002f8e:	2100      	movs	r1, #0
 8002f90:	4854      	ldr	r0, [pc, #336]	; (80030e4 <statesMachineLoop+0x29c>)
 8002f92:	f007 fae9 	bl	800a568 <HAL_TIM_PWM_Stop>
				HAL_TIM_IC_Stop(&htim2, TIM_CHANNEL_1);
 8002f96:	2100      	movs	r1, #0
 8002f98:	4853      	ldr	r0, [pc, #332]	; (80030e8 <statesMachineLoop+0x2a0>)
 8002f9a:	f007 fbdc 	bl	800a756 <HAL_TIM_IC_Stop>
 8002f9e:	e018      	b.n	8002fd2 <statesMachineLoop+0x18a>
			}else if (motor2.stepReached) {
 8002fa0:	4b4e      	ldr	r3, [pc, #312]	; (80030dc <statesMachineLoop+0x294>)
 8002fa2:	7e5b      	ldrb	r3, [r3, #25]
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d008      	beq.n	8002fba <statesMachineLoop+0x172>
				Stop_PWM_MOTOR_2;
 8002fa8:	2100      	movs	r1, #0
 8002faa:	4850      	ldr	r0, [pc, #320]	; (80030ec <statesMachineLoop+0x2a4>)
 8002fac:	f007 fadc 	bl	800a568 <HAL_TIM_PWM_Stop>
				HAL_TIM_IC_Stop(&htim2, TIM_CHANNEL_2);
 8002fb0:	2104      	movs	r1, #4
 8002fb2:	484d      	ldr	r0, [pc, #308]	; (80030e8 <statesMachineLoop+0x2a0>)
 8002fb4:	f007 fbcf 	bl	800a756 <HAL_TIM_IC_Stop>
 8002fb8:	e00b      	b.n	8002fd2 <statesMachineLoop+0x18a>
			}else if (motor3.stepReached){
 8002fba:	4b49      	ldr	r3, [pc, #292]	; (80030e0 <statesMachineLoop+0x298>)
 8002fbc:	7e5b      	ldrb	r3, [r3, #25]
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d007      	beq.n	8002fd2 <statesMachineLoop+0x18a>
				Stop_PWM_MOTOR_3;
 8002fc2:	2100      	movs	r1, #0
 8002fc4:	484a      	ldr	r0, [pc, #296]	; (80030f0 <statesMachineLoop+0x2a8>)
 8002fc6:	f007 facf 	bl	800a568 <HAL_TIM_PWM_Stop>
				HAL_TIM_IC_Stop(&htim2, TIM_CHANNEL_3);
 8002fca:	2108      	movs	r1, #8
 8002fcc:	4846      	ldr	r0, [pc, #280]	; (80030e8 <statesMachineLoop+0x2a0>)
 8002fce:	f007 fbc2 	bl	800a756 <HAL_TIM_IC_Stop>
			}

			motor1.omega = get_Straj(time,motor1.currentAngle,motor1.theta,arrayParams1);
 8002fd2:	4b48      	ldr	r3, [pc, #288]	; (80030f4 <statesMachineLoop+0x2ac>)
 8002fd4:	ed93 7b00 	vldr	d7, [r3]
 8002fd8:	4b3f      	ldr	r3, [pc, #252]	; (80030d8 <statesMachineLoop+0x290>)
 8002fda:	ed93 6b08 	vldr	d6, [r3, #32]
 8002fde:	4b3e      	ldr	r3, [pc, #248]	; (80030d8 <statesMachineLoop+0x290>)
 8002fe0:	ed93 5b00 	vldr	d5, [r3]
 8002fe4:	4844      	ldr	r0, [pc, #272]	; (80030f8 <statesMachineLoop+0x2b0>)
 8002fe6:	eeb0 2b45 	vmov.f64	d2, d5
 8002fea:	eeb0 1b46 	vmov.f64	d1, d6
 8002fee:	eeb0 0b47 	vmov.f64	d0, d7
 8002ff2:	f001 fb89 	bl	8004708 <get_Straj>
 8002ff6:	eeb0 7b40 	vmov.f64	d7, d0
 8002ffa:	4b37      	ldr	r3, [pc, #220]	; (80030d8 <statesMachineLoop+0x290>)
 8002ffc:	ed83 7b02 	vstr	d7, [r3, #8]
			motor2.omega = get_Straj(time,motor2.currentAngle,motor2.theta,arrayParams2);
 8003000:	4b3c      	ldr	r3, [pc, #240]	; (80030f4 <statesMachineLoop+0x2ac>)
 8003002:	ed93 7b00 	vldr	d7, [r3]
 8003006:	4b35      	ldr	r3, [pc, #212]	; (80030dc <statesMachineLoop+0x294>)
 8003008:	ed93 6b08 	vldr	d6, [r3, #32]
 800300c:	4b33      	ldr	r3, [pc, #204]	; (80030dc <statesMachineLoop+0x294>)
 800300e:	ed93 5b00 	vldr	d5, [r3]
 8003012:	483a      	ldr	r0, [pc, #232]	; (80030fc <statesMachineLoop+0x2b4>)
 8003014:	eeb0 2b45 	vmov.f64	d2, d5
 8003018:	eeb0 1b46 	vmov.f64	d1, d6
 800301c:	eeb0 0b47 	vmov.f64	d0, d7
 8003020:	f001 fb72 	bl	8004708 <get_Straj>
 8003024:	eeb0 7b40 	vmov.f64	d7, d0
 8003028:	4b2c      	ldr	r3, [pc, #176]	; (80030dc <statesMachineLoop+0x294>)
 800302a:	ed83 7b02 	vstr	d7, [r3, #8]
			motor3.omega = get_Straj(time,motor3.currentAngle,motor3.theta,arrayParams3);
 800302e:	4b31      	ldr	r3, [pc, #196]	; (80030f4 <statesMachineLoop+0x2ac>)
 8003030:	ed93 7b00 	vldr	d7, [r3]
 8003034:	4b2a      	ldr	r3, [pc, #168]	; (80030e0 <statesMachineLoop+0x298>)
 8003036:	ed93 6b08 	vldr	d6, [r3, #32]
 800303a:	4b29      	ldr	r3, [pc, #164]	; (80030e0 <statesMachineLoop+0x298>)
 800303c:	ed93 5b00 	vldr	d5, [r3]
 8003040:	482f      	ldr	r0, [pc, #188]	; (8003100 <statesMachineLoop+0x2b8>)
 8003042:	eeb0 2b45 	vmov.f64	d2, d5
 8003046:	eeb0 1b46 	vmov.f64	d1, d6
 800304a:	eeb0 0b47 	vmov.f64	d0, d7
 800304e:	f001 fb5b 	bl	8004708 <get_Straj>
 8003052:	eeb0 7b40 	vmov.f64	d7, d0
 8003056:	4b22      	ldr	r3, [pc, #136]	; (80030e0 <statesMachineLoop+0x298>)
 8003058:	ed83 7b02 	vstr	d7, [r3, #8]

			setProfilTimer();
 800305c:	f002 fef8 	bl	8005e50 <setProfilTimer>


			if(startMotors){
 8003060:	4b28      	ldr	r3, [pc, #160]	; (8003104 <statesMachineLoop+0x2bc>)
 8003062:	781b      	ldrb	r3, [r3, #0]
 8003064:	2b00      	cmp	r3, #0
 8003066:	d00e      	beq.n	8003086 <statesMachineLoop+0x23e>
				startMotors = false;
 8003068:	4b26      	ldr	r3, [pc, #152]	; (8003104 <statesMachineLoop+0x2bc>)
 800306a:	2200      	movs	r2, #0
 800306c:	701a      	strb	r2, [r3, #0]
				Start_PWM_MOTOR_1;	// Activar generacion de pwm
 800306e:	2100      	movs	r1, #0
 8003070:	481c      	ldr	r0, [pc, #112]	; (80030e4 <statesMachineLoop+0x29c>)
 8003072:	f007 f96b 	bl	800a34c <HAL_TIM_PWM_Start>
				Start_PWM_MOTOR_2;	// Activar generacion de pwm
 8003076:	2100      	movs	r1, #0
 8003078:	481c      	ldr	r0, [pc, #112]	; (80030ec <statesMachineLoop+0x2a4>)
 800307a:	f007 f967 	bl	800a34c <HAL_TIM_PWM_Start>
				Start_PWM_MOTOR_3;	// Activar generacion de pwm
 800307e:	2100      	movs	r1, #0
 8003080:	481b      	ldr	r0, [pc, #108]	; (80030f0 <statesMachineLoop+0x2a8>)
 8003082:	f007 f963 	bl	800a34c <HAL_TIM_PWM_Start>
			}

			stopMotors = true;
 8003086:	4b20      	ldr	r3, [pc, #128]	; (8003108 <statesMachineLoop+0x2c0>)
 8003088:	2201      	movs	r2, #1
 800308a:	701a      	strb	r2, [r3, #0]
		while (!(motor1.stepReached && motor2.stepReached  && motor3.stepReached)){
 800308c:	4b12      	ldr	r3, [pc, #72]	; (80030d8 <statesMachineLoop+0x290>)
 800308e:	7e5b      	ldrb	r3, [r3, #25]
 8003090:	2b00      	cmp	r3, #0
 8003092:	f43f af73 	beq.w	8002f7c <statesMachineLoop+0x134>
 8003096:	4b11      	ldr	r3, [pc, #68]	; (80030dc <statesMachineLoop+0x294>)
 8003098:	7e5b      	ldrb	r3, [r3, #25]
 800309a:	2b00      	cmp	r3, #0
 800309c:	f43f af6e 	beq.w	8002f7c <statesMachineLoop+0x134>
 80030a0:	4b0f      	ldr	r3, [pc, #60]	; (80030e0 <statesMachineLoop+0x298>)
 80030a2:	7e5b      	ldrb	r3, [r3, #25]
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	f43f af69 	beq.w	8002f7c <statesMachineLoop+0x134>
 80030aa:	e030      	b.n	800310e <statesMachineLoop+0x2c6>
 80030ac:	f3af 8000 	nop.w
 80030b0:	c2f837b5 	.word	0xc2f837b5
 80030b4:	bfe0aa64 	.word	0xbfe0aa64
 80030b8:	24000458 	.word	0x24000458
 80030bc:	24000030 	.word	0x24000030
 80030c0:	24000a00 	.word	0x24000a00
 80030c4:	2400059a 	.word	0x2400059a
 80030c8:	2400004c 	.word	0x2400004c
 80030cc:	2400059b 	.word	0x2400059b
 80030d0:	24000459 	.word	0x24000459
 80030d4:	240004a0 	.word	0x240004a0
 80030d8:	24000370 	.word	0x24000370
 80030dc:	240003b8 	.word	0x240003b8
 80030e0:	24000400 	.word	0x24000400
 80030e4:	240006f8 	.word	0x240006f8
 80030e8:	240005c8 	.word	0x240005c8
 80030ec:	24000744 	.word	0x24000744
 80030f0:	24000790 	.word	0x24000790
 80030f4:	24000448 	.word	0x24000448
 80030f8:	240004d0 	.word	0x240004d0
 80030fc:	24000508 	.word	0x24000508
 8003100:	24000540 	.word	0x24000540
 8003104:	2400045a 	.word	0x2400045a
 8003108:	2400045b 	.word	0x2400045b
			if (state==FAULT)break;
 800310c:	bf00      	nop
		}// End while




		if (stopMotors){   //If steps goals for each motor were reached, we stop motors
 800310e:	4b77      	ldr	r3, [pc, #476]	; (80032ec <statesMachineLoop+0x4a4>)
 8003110:	781b      	ldrb	r3, [r3, #0]
 8003112:	2b00      	cmp	r3, #0
 8003114:	d026      	beq.n	8003164 <statesMachineLoop+0x31c>

			startMotors = false;
 8003116:	4b76      	ldr	r3, [pc, #472]	; (80032f0 <statesMachineLoop+0x4a8>)
 8003118:	2200      	movs	r2, #0
 800311a:	701a      	strb	r2, [r3, #0]

			HAL_TIM_IC_Stop(&htim2, TIM_CHANNEL_1);
 800311c:	2100      	movs	r1, #0
 800311e:	4875      	ldr	r0, [pc, #468]	; (80032f4 <statesMachineLoop+0x4ac>)
 8003120:	f007 fb19 	bl	800a756 <HAL_TIM_IC_Stop>
			HAL_TIM_IC_Stop(&htim3, TIM_CHANNEL_1);
 8003124:	2100      	movs	r1, #0
 8003126:	4874      	ldr	r0, [pc, #464]	; (80032f8 <statesMachineLoop+0x4b0>)
 8003128:	f007 fb15 	bl	800a756 <HAL_TIM_IC_Stop>
			HAL_TIM_IC_Stop(&htim4, TIM_CHANNEL_1);
 800312c:	2100      	movs	r1, #0
 800312e:	4873      	ldr	r0, [pc, #460]	; (80032fc <statesMachineLoop+0x4b4>)
 8003130:	f007 fb11 	bl	800a756 <HAL_TIM_IC_Stop>

			if (motor1.stepReached) Stop_PWM_MOTOR_1;
 8003134:	4b72      	ldr	r3, [pc, #456]	; (8003300 <statesMachineLoop+0x4b8>)
 8003136:	7e5b      	ldrb	r3, [r3, #25]
 8003138:	2b00      	cmp	r3, #0
 800313a:	d003      	beq.n	8003144 <statesMachineLoop+0x2fc>
 800313c:	2100      	movs	r1, #0
 800313e:	4871      	ldr	r0, [pc, #452]	; (8003304 <statesMachineLoop+0x4bc>)
 8003140:	f007 fa12 	bl	800a568 <HAL_TIM_PWM_Stop>
			if (motor2.stepReached) Stop_PWM_MOTOR_2;
 8003144:	4b70      	ldr	r3, [pc, #448]	; (8003308 <statesMachineLoop+0x4c0>)
 8003146:	7e5b      	ldrb	r3, [r3, #25]
 8003148:	2b00      	cmp	r3, #0
 800314a:	d003      	beq.n	8003154 <statesMachineLoop+0x30c>
 800314c:	2100      	movs	r1, #0
 800314e:	486f      	ldr	r0, [pc, #444]	; (800330c <statesMachineLoop+0x4c4>)
 8003150:	f007 fa0a 	bl	800a568 <HAL_TIM_PWM_Stop>
			if (motor3.stepReached)	Stop_PWM_MOTOR_3;
 8003154:	4b6e      	ldr	r3, [pc, #440]	; (8003310 <statesMachineLoop+0x4c8>)
 8003156:	7e5b      	ldrb	r3, [r3, #25]
 8003158:	2b00      	cmp	r3, #0
 800315a:	d003      	beq.n	8003164 <statesMachineLoop+0x31c>
 800315c:	2100      	movs	r1, #0
 800315e:	486d      	ldr	r0, [pc, #436]	; (8003314 <statesMachineLoop+0x4cc>)
 8003160:	f007 fa02 	bl	800a568 <HAL_TIM_PWM_Stop>
		}

		//Update coordinantes
		Pini.x = Pfin.x;
 8003164:	4b6c      	ldr	r3, [pc, #432]	; (8003318 <statesMachineLoop+0x4d0>)
 8003166:	e9d3 2300 	ldrd	r2, r3, [r3]
 800316a:	496c      	ldr	r1, [pc, #432]	; (800331c <statesMachineLoop+0x4d4>)
 800316c:	e9c1 2300 	strd	r2, r3, [r1]
		Pini.y = Pfin.y;
 8003170:	4b69      	ldr	r3, [pc, #420]	; (8003318 <statesMachineLoop+0x4d0>)
 8003172:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8003176:	4969      	ldr	r1, [pc, #420]	; (800331c <statesMachineLoop+0x4d4>)
 8003178:	e9c1 2302 	strd	r2, r3, [r1, #8]
		Pini.z = Pfin.z;
 800317c:	4b66      	ldr	r3, [pc, #408]	; (8003318 <statesMachineLoop+0x4d0>)
 800317e:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8003182:	4966      	ldr	r1, [pc, #408]	; (800331c <statesMachineLoop+0x4d4>)
 8003184:	e9c1 2304 	strd	r2, r3, [r1, #16]

		HAL_TIM_Base_Stop_IT(&htim15);
 8003188:	4865      	ldr	r0, [pc, #404]	; (8003320 <statesMachineLoop+0x4d8>)
 800318a:	f007 f84f 	bl	800a22c <HAL_TIM_Base_Stop_IT>
		HAL_TIM_Base_Stop(&htim5);
 800318e:	4865      	ldr	r0, [pc, #404]	; (8003324 <statesMachineLoop+0x4dc>)
 8003190:	f006 ffac 	bl	800a0ec <HAL_TIM_Base_Stop>

		if (startDemo){state=DEMO;}
 8003194:	4b64      	ldr	r3, [pc, #400]	; (8003328 <statesMachineLoop+0x4e0>)
 8003196:	781b      	ldrb	r3, [r3, #0]
 8003198:	2b00      	cmp	r3, #0
 800319a:	d003      	beq.n	80031a4 <statesMachineLoop+0x35c>
 800319c:	4b63      	ldr	r3, [pc, #396]	; (800332c <statesMachineLoop+0x4e4>)
 800319e:	2204      	movs	r2, #4
 80031a0:	701a      	strb	r2, [r3, #0]
		else{state = READY;}


		break;
 80031a2:	e3e1      	b.n	8003968 <statesMachineLoop+0xb20>
		else{state = READY;}
 80031a4:	4b61      	ldr	r3, [pc, #388]	; (800332c <statesMachineLoop+0x4e4>)
 80031a6:	2201      	movs	r2, #1
 80031a8:	701a      	strb	r2, [r3, #0]
		break;
 80031aa:	e3dd      	b.n	8003968 <statesMachineLoop+0xb20>

	case READY:

		if (receptionFlag){
 80031ac:	4b60      	ldr	r3, [pc, #384]	; (8003330 <statesMachineLoop+0x4e8>)
 80031ae:	781b      	ldrb	r3, [r3, #0]
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	f000 83d6 	beq.w	8003962 <statesMachineLoop+0xb1a>

			receptionFlag = false;
 80031b6:	4b5e      	ldr	r3, [pc, #376]	; (8003330 <statesMachineLoop+0x4e8>)
 80031b8:	2200      	movs	r2, #0
 80031ba:	701a      	strb	r2, [r3, #0]

			startMotors = true;
 80031bc:	4b4c      	ldr	r3, [pc, #304]	; (80032f0 <statesMachineLoop+0x4a8>)
 80031be:	2201      	movs	r2, #1
 80031c0:	701a      	strb	r2, [r3, #0]

			HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1);
 80031c2:	2100      	movs	r1, #0
 80031c4:	484b      	ldr	r0, [pc, #300]	; (80032f4 <statesMachineLoop+0x4ac>)
 80031c6:	f007 fb37 	bl	800a838 <HAL_TIM_IC_Start_IT>
			HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_1);
 80031ca:	2100      	movs	r1, #0
 80031cc:	484a      	ldr	r0, [pc, #296]	; (80032f8 <statesMachineLoop+0x4b0>)
 80031ce:	f007 fb33 	bl	800a838 <HAL_TIM_IC_Start_IT>
			HAL_TIM_IC_Start_IT(&htim4, TIM_CHANNEL_1);
 80031d2:	2100      	movs	r1, #0
 80031d4:	4849      	ldr	r0, [pc, #292]	; (80032fc <statesMachineLoop+0x4b4>)
 80031d6:	f007 fb2f 	bl	800a838 <HAL_TIM_IC_Start_IT>

			inverseKinematic(Pfin);
 80031da:	4b4f      	ldr	r3, [pc, #316]	; (8003318 <statesMachineLoop+0x4d0>)
 80031dc:	ed93 5b00 	vldr	d5, [r3]
 80031e0:	ed93 6b02 	vldr	d6, [r3, #8]
 80031e4:	ed93 7b04 	vldr	d7, [r3, #16]
 80031e8:	eeb0 0b45 	vmov.f64	d0, d5
 80031ec:	eeb0 1b46 	vmov.f64	d1, d6
 80031f0:	eeb0 2b47 	vmov.f64	d2, d7
 80031f4:	f7fe fa68 	bl	80016c8 <inverseKinematic>

			update_ScurveTraj(motor1.currentAngle, motor1.theta, vi, vf, vmax, amax, jmax, arrayParams1);
 80031f8:	4b41      	ldr	r3, [pc, #260]	; (8003300 <statesMachineLoop+0x4b8>)
 80031fa:	ed93 7b08 	vldr	d7, [r3, #32]
 80031fe:	4b40      	ldr	r3, [pc, #256]	; (8003300 <statesMachineLoop+0x4b8>)
 8003200:	ed93 1b00 	vldr	d1, [r3]
 8003204:	4b4b      	ldr	r3, [pc, #300]	; (8003334 <statesMachineLoop+0x4ec>)
 8003206:	ed93 2b00 	vldr	d2, [r3]
 800320a:	4b4b      	ldr	r3, [pc, #300]	; (8003338 <statesMachineLoop+0x4f0>)
 800320c:	ed93 3b00 	vldr	d3, [r3]
 8003210:	4b4a      	ldr	r3, [pc, #296]	; (800333c <statesMachineLoop+0x4f4>)
 8003212:	ed93 4b00 	vldr	d4, [r3]
 8003216:	4b4a      	ldr	r3, [pc, #296]	; (8003340 <statesMachineLoop+0x4f8>)
 8003218:	ed93 5b00 	vldr	d5, [r3]
 800321c:	4b49      	ldr	r3, [pc, #292]	; (8003344 <statesMachineLoop+0x4fc>)
 800321e:	ed93 6b00 	vldr	d6, [r3]
 8003222:	4849      	ldr	r0, [pc, #292]	; (8003348 <statesMachineLoop+0x500>)
 8003224:	eeb0 0b47 	vmov.f64	d0, d7
 8003228:	f002 f92a 	bl	8005480 <update_ScurveTraj>
			update_ScurveTraj(motor2.currentAngle, motor2.theta, vi, vf, vmax, amax, jmax, arrayParams2);
 800322c:	4b36      	ldr	r3, [pc, #216]	; (8003308 <statesMachineLoop+0x4c0>)
 800322e:	ed93 7b08 	vldr	d7, [r3, #32]
 8003232:	4b35      	ldr	r3, [pc, #212]	; (8003308 <statesMachineLoop+0x4c0>)
 8003234:	ed93 1b00 	vldr	d1, [r3]
 8003238:	4b3e      	ldr	r3, [pc, #248]	; (8003334 <statesMachineLoop+0x4ec>)
 800323a:	ed93 2b00 	vldr	d2, [r3]
 800323e:	4b3e      	ldr	r3, [pc, #248]	; (8003338 <statesMachineLoop+0x4f0>)
 8003240:	ed93 3b00 	vldr	d3, [r3]
 8003244:	4b3d      	ldr	r3, [pc, #244]	; (800333c <statesMachineLoop+0x4f4>)
 8003246:	ed93 4b00 	vldr	d4, [r3]
 800324a:	4b3d      	ldr	r3, [pc, #244]	; (8003340 <statesMachineLoop+0x4f8>)
 800324c:	ed93 5b00 	vldr	d5, [r3]
 8003250:	4b3c      	ldr	r3, [pc, #240]	; (8003344 <statesMachineLoop+0x4fc>)
 8003252:	ed93 6b00 	vldr	d6, [r3]
 8003256:	483d      	ldr	r0, [pc, #244]	; (800334c <statesMachineLoop+0x504>)
 8003258:	eeb0 0b47 	vmov.f64	d0, d7
 800325c:	f002 f910 	bl	8005480 <update_ScurveTraj>
			update_ScurveTraj(motor3.currentAngle, motor3.theta, vi, vf, vmax, amax, jmax, arrayParams3);
 8003260:	4b2b      	ldr	r3, [pc, #172]	; (8003310 <statesMachineLoop+0x4c8>)
 8003262:	ed93 7b08 	vldr	d7, [r3, #32]
 8003266:	4b2a      	ldr	r3, [pc, #168]	; (8003310 <statesMachineLoop+0x4c8>)
 8003268:	ed93 1b00 	vldr	d1, [r3]
 800326c:	4b31      	ldr	r3, [pc, #196]	; (8003334 <statesMachineLoop+0x4ec>)
 800326e:	ed93 2b00 	vldr	d2, [r3]
 8003272:	4b31      	ldr	r3, [pc, #196]	; (8003338 <statesMachineLoop+0x4f0>)
 8003274:	ed93 3b00 	vldr	d3, [r3]
 8003278:	4b30      	ldr	r3, [pc, #192]	; (800333c <statesMachineLoop+0x4f4>)
 800327a:	ed93 4b00 	vldr	d4, [r3]
 800327e:	4b30      	ldr	r3, [pc, #192]	; (8003340 <statesMachineLoop+0x4f8>)
 8003280:	ed93 5b00 	vldr	d5, [r3]
 8003284:	4b2f      	ldr	r3, [pc, #188]	; (8003344 <statesMachineLoop+0x4fc>)
 8003286:	ed93 6b00 	vldr	d6, [r3]
 800328a:	4831      	ldr	r0, [pc, #196]	; (8003350 <statesMachineLoop+0x508>)
 800328c:	eeb0 0b47 	vmov.f64	d0, d7
 8003290:	f002 f8f6 	bl	8005480 <update_ScurveTraj>

			configMotor(&motor1,1);
 8003294:	2101      	movs	r1, #1
 8003296:	481a      	ldr	r0, [pc, #104]	; (8003300 <statesMachineLoop+0x4b8>)
 8003298:	f7ff fcce 	bl	8002c38 <configMotor>
			configMotor(&motor2,2);
 800329c:	2102      	movs	r1, #2
 800329e:	481a      	ldr	r0, [pc, #104]	; (8003308 <statesMachineLoop+0x4c0>)
 80032a0:	f7ff fcca 	bl	8002c38 <configMotor>
			configMotor(&motor3,3);
 80032a4:	2103      	movs	r1, #3
 80032a6:	481a      	ldr	r0, [pc, #104]	; (8003310 <statesMachineLoop+0x4c8>)
 80032a8:	f7ff fcc6 	bl	8002c38 <configMotor>

			timeFlag = false;
 80032ac:	4b29      	ldr	r3, [pc, #164]	; (8003354 <statesMachineLoop+0x50c>)
 80032ae:	2200      	movs	r2, #0
 80032b0:	701a      	strb	r2, [r3, #0]

			motor1.pMotor = 0;
 80032b2:	4b13      	ldr	r3, [pc, #76]	; (8003300 <statesMachineLoop+0x4b8>)
 80032b4:	2200      	movs	r2, #0
 80032b6:	641a      	str	r2, [r3, #64]	; 0x40
			motor2.pMotor = 0;
 80032b8:	4b13      	ldr	r3, [pc, #76]	; (8003308 <statesMachineLoop+0x4c0>)
 80032ba:	2200      	movs	r2, #0
 80032bc:	641a      	str	r2, [r3, #64]	; 0x40
			motor3.pMotor = 0;
 80032be:	4b14      	ldr	r3, [pc, #80]	; (8003310 <statesMachineLoop+0x4c8>)
 80032c0:	2200      	movs	r2, #0
 80032c2:	641a      	str	r2, [r3, #64]	; 0x40

			motor1.stepReached = false;
 80032c4:	4b0e      	ldr	r3, [pc, #56]	; (8003300 <statesMachineLoop+0x4b8>)
 80032c6:	2200      	movs	r2, #0
 80032c8:	765a      	strb	r2, [r3, #25]
			motor2.stepReached = false;
 80032ca:	4b0f      	ldr	r3, [pc, #60]	; (8003308 <statesMachineLoop+0x4c0>)
 80032cc:	2200      	movs	r2, #0
 80032ce:	765a      	strb	r2, [r3, #25]
			motor3.stepReached = false;
 80032d0:	4b0f      	ldr	r3, [pc, #60]	; (8003310 <statesMachineLoop+0x4c8>)
 80032d2:	2200      	movs	r2, #0
 80032d4:	765a      	strb	r2, [r3, #25]

			HAL_TIM_Base_Start(&htim5);
 80032d6:	4813      	ldr	r0, [pc, #76]	; (8003324 <statesMachineLoop+0x4dc>)
 80032d8:	f006 fe98 	bl	800a00c <HAL_TIM_Base_Start>
			HAL_TIM_Base_Start_IT(&htim15);
 80032dc:	4810      	ldr	r0, [pc, #64]	; (8003320 <statesMachineLoop+0x4d8>)
 80032de:	f006 ff2d 	bl	800a13c <HAL_TIM_Base_Start_IT>

			state = WORKING;
 80032e2:	4b12      	ldr	r3, [pc, #72]	; (800332c <statesMachineLoop+0x4e4>)
 80032e4:	2202      	movs	r2, #2
 80032e6:	701a      	strb	r2, [r3, #0]
		}
		break;
 80032e8:	e33b      	b.n	8003962 <statesMachineLoop+0xb1a>
 80032ea:	bf00      	nop
 80032ec:	2400045b 	.word	0x2400045b
 80032f0:	2400045a 	.word	0x2400045a
 80032f4:	240005c8 	.word	0x240005c8
 80032f8:	24000614 	.word	0x24000614
 80032fc:	24000660 	.word	0x24000660
 8003300:	24000370 	.word	0x24000370
 8003304:	240006f8 	.word	0x240006f8
 8003308:	240003b8 	.word	0x240003b8
 800330c:	24000744 	.word	0x24000744
 8003310:	24000400 	.word	0x24000400
 8003314:	24000790 	.word	0x24000790
 8003318:	240004b8 	.word	0x240004b8
 800331c:	240004a0 	.word	0x240004a0
 8003320:	240007dc 	.word	0x240007dc
 8003324:	240006ac 	.word	0x240006ac
 8003328:	2400059d 	.word	0x2400059d
 800332c:	24000458 	.word	0x24000458
 8003330:	2400059b 	.word	0x2400059b
 8003334:	24000018 	.word	0x24000018
 8003338:	24000490 	.word	0x24000490
 800333c:	24000010 	.word	0x24000010
 8003340:	24000020 	.word	0x24000020
 8003344:	24000008 	.word	0x24000008
 8003348:	240004d0 	.word	0x240004d0
 800334c:	24000508 	.word	0x24000508
 8003350:	24000540 	.word	0x24000540
 8003354:	24000578 	.word	0x24000578

	case FAULT:

		__HAL_TIM_SET_AUTORELOAD(&htim12,COUNTERPERIOD(rpm_fault)); //Escritura del registro ARR
 8003358:	4b8f      	ldr	r3, [pc, #572]	; (8003598 <statesMachineLoop+0x750>)
 800335a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800335c:	ee07 3a90 	vmov	s15, r3
 8003360:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8003364:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8003368:	ee37 7b06 	vadd.f64	d7, d7, d6
 800336c:	ed9f 5b84 	vldr	d5, [pc, #528]	; 8003580 <statesMachineLoop+0x738>
 8003370:	ee85 6b07 	vdiv.f64	d6, d5, d7
 8003374:	4b89      	ldr	r3, [pc, #548]	; (800359c <statesMachineLoop+0x754>)
 8003376:	ed93 7b00 	vldr	d7, [r3]
 800337a:	ed9f 5b83 	vldr	d5, [pc, #524]	; 8003588 <statesMachineLoop+0x740>
 800337e:	ee27 5b05 	vmul.f64	d5, d7, d5
 8003382:	ed9f 4b83 	vldr	d4, [pc, #524]	; 8003590 <statesMachineLoop+0x748>
 8003386:	ee84 7b05 	vdiv.f64	d7, d4, d5
 800338a:	ee26 7b07 	vmul.f64	d7, d6, d7
 800338e:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8003392:	ee37 7b46 	vsub.f64	d7, d7, d6
 8003396:	4b82      	ldr	r3, [pc, #520]	; (80035a0 <statesMachineLoop+0x758>)
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800339e:	ee17 2a90 	vmov	r2, s15
 80033a2:	62da      	str	r2, [r3, #44]	; 0x2c
 80033a4:	4b7c      	ldr	r3, [pc, #496]	; (8003598 <statesMachineLoop+0x750>)
 80033a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033a8:	ee07 3a90 	vmov	s15, r3
 80033ac:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80033b0:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 80033b4:	ee37 7b06 	vadd.f64	d7, d7, d6
 80033b8:	ed9f 5b71 	vldr	d5, [pc, #452]	; 8003580 <statesMachineLoop+0x738>
 80033bc:	ee85 6b07 	vdiv.f64	d6, d5, d7
 80033c0:	4b76      	ldr	r3, [pc, #472]	; (800359c <statesMachineLoop+0x754>)
 80033c2:	ed93 7b00 	vldr	d7, [r3]
 80033c6:	ed9f 5b70 	vldr	d5, [pc, #448]	; 8003588 <statesMachineLoop+0x740>
 80033ca:	ee27 5b05 	vmul.f64	d5, d7, d5
 80033ce:	ed9f 4b70 	vldr	d4, [pc, #448]	; 8003590 <statesMachineLoop+0x748>
 80033d2:	ee84 7b05 	vdiv.f64	d7, d4, d5
 80033d6:	ee26 7b07 	vmul.f64	d7, d6, d7
 80033da:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 80033de:	ee37 7b46 	vsub.f64	d7, d7, d6
 80033e2:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80033e6:	ee17 2a90 	vmov	r2, s15
 80033ea:	4b6d      	ldr	r3, [pc, #436]	; (80035a0 <statesMachineLoop+0x758>)
 80033ec:	60da      	str	r2, [r3, #12]
		__HAL_TIM_SET_AUTORELOAD(&htim13,COUNTERPERIOD(rpm_fault));
 80033ee:	4b6a      	ldr	r3, [pc, #424]	; (8003598 <statesMachineLoop+0x750>)
 80033f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033f2:	ee07 3a90 	vmov	s15, r3
 80033f6:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80033fa:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 80033fe:	ee37 7b06 	vadd.f64	d7, d7, d6
 8003402:	ed9f 5b5f 	vldr	d5, [pc, #380]	; 8003580 <statesMachineLoop+0x738>
 8003406:	ee85 6b07 	vdiv.f64	d6, d5, d7
 800340a:	4b64      	ldr	r3, [pc, #400]	; (800359c <statesMachineLoop+0x754>)
 800340c:	ed93 7b00 	vldr	d7, [r3]
 8003410:	ed9f 5b5d 	vldr	d5, [pc, #372]	; 8003588 <statesMachineLoop+0x740>
 8003414:	ee27 5b05 	vmul.f64	d5, d7, d5
 8003418:	ed9f 4b5d 	vldr	d4, [pc, #372]	; 8003590 <statesMachineLoop+0x748>
 800341c:	ee84 7b05 	vdiv.f64	d7, d4, d5
 8003420:	ee26 7b07 	vmul.f64	d7, d6, d7
 8003424:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8003428:	ee37 7b46 	vsub.f64	d7, d7, d6
 800342c:	4b5d      	ldr	r3, [pc, #372]	; (80035a4 <statesMachineLoop+0x75c>)
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8003434:	ee17 2a90 	vmov	r2, s15
 8003438:	62da      	str	r2, [r3, #44]	; 0x2c
 800343a:	4b57      	ldr	r3, [pc, #348]	; (8003598 <statesMachineLoop+0x750>)
 800343c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800343e:	ee07 3a90 	vmov	s15, r3
 8003442:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8003446:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800344a:	ee37 7b06 	vadd.f64	d7, d7, d6
 800344e:	ed9f 5b4c 	vldr	d5, [pc, #304]	; 8003580 <statesMachineLoop+0x738>
 8003452:	ee85 6b07 	vdiv.f64	d6, d5, d7
 8003456:	4b51      	ldr	r3, [pc, #324]	; (800359c <statesMachineLoop+0x754>)
 8003458:	ed93 7b00 	vldr	d7, [r3]
 800345c:	ed9f 5b4a 	vldr	d5, [pc, #296]	; 8003588 <statesMachineLoop+0x740>
 8003460:	ee27 5b05 	vmul.f64	d5, d7, d5
 8003464:	ed9f 4b4a 	vldr	d4, [pc, #296]	; 8003590 <statesMachineLoop+0x748>
 8003468:	ee84 7b05 	vdiv.f64	d7, d4, d5
 800346c:	ee26 7b07 	vmul.f64	d7, d6, d7
 8003470:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8003474:	ee37 7b46 	vsub.f64	d7, d7, d6
 8003478:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800347c:	ee17 2a90 	vmov	r2, s15
 8003480:	4b48      	ldr	r3, [pc, #288]	; (80035a4 <statesMachineLoop+0x75c>)
 8003482:	60da      	str	r2, [r3, #12]
		__HAL_TIM_SET_AUTORELOAD(&htim14,COUNTERPERIOD(rpm_fault));
 8003484:	4b44      	ldr	r3, [pc, #272]	; (8003598 <statesMachineLoop+0x750>)
 8003486:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003488:	ee07 3a90 	vmov	s15, r3
 800348c:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8003490:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8003494:	ee37 7b06 	vadd.f64	d7, d7, d6
 8003498:	ed9f 5b39 	vldr	d5, [pc, #228]	; 8003580 <statesMachineLoop+0x738>
 800349c:	ee85 6b07 	vdiv.f64	d6, d5, d7
 80034a0:	4b3e      	ldr	r3, [pc, #248]	; (800359c <statesMachineLoop+0x754>)
 80034a2:	ed93 7b00 	vldr	d7, [r3]
 80034a6:	ed9f 5b38 	vldr	d5, [pc, #224]	; 8003588 <statesMachineLoop+0x740>
 80034aa:	ee27 5b05 	vmul.f64	d5, d7, d5
 80034ae:	ed9f 4b38 	vldr	d4, [pc, #224]	; 8003590 <statesMachineLoop+0x748>
 80034b2:	ee84 7b05 	vdiv.f64	d7, d4, d5
 80034b6:	ee26 7b07 	vmul.f64	d7, d6, d7
 80034ba:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 80034be:	ee37 7b46 	vsub.f64	d7, d7, d6
 80034c2:	4b39      	ldr	r3, [pc, #228]	; (80035a8 <statesMachineLoop+0x760>)
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80034ca:	ee17 2a90 	vmov	r2, s15
 80034ce:	62da      	str	r2, [r3, #44]	; 0x2c
 80034d0:	4b31      	ldr	r3, [pc, #196]	; (8003598 <statesMachineLoop+0x750>)
 80034d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034d4:	ee07 3a90 	vmov	s15, r3
 80034d8:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80034dc:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 80034e0:	ee37 7b06 	vadd.f64	d7, d7, d6
 80034e4:	ed9f 5b26 	vldr	d5, [pc, #152]	; 8003580 <statesMachineLoop+0x738>
 80034e8:	ee85 6b07 	vdiv.f64	d6, d5, d7
 80034ec:	4b2b      	ldr	r3, [pc, #172]	; (800359c <statesMachineLoop+0x754>)
 80034ee:	ed93 7b00 	vldr	d7, [r3]
 80034f2:	ed9f 5b25 	vldr	d5, [pc, #148]	; 8003588 <statesMachineLoop+0x740>
 80034f6:	ee27 5b05 	vmul.f64	d5, d7, d5
 80034fa:	ed9f 4b25 	vldr	d4, [pc, #148]	; 8003590 <statesMachineLoop+0x748>
 80034fe:	ee84 7b05 	vdiv.f64	d7, d4, d5
 8003502:	ee26 7b07 	vmul.f64	d7, d6, d7
 8003506:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800350a:	ee37 7b46 	vsub.f64	d7, d7, d6
 800350e:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8003512:	ee17 2a90 	vmov	r2, s15
 8003516:	4b24      	ldr	r3, [pc, #144]	; (80035a8 <statesMachineLoop+0x760>)
 8003518:	60da      	str	r2, [r3, #12]

		TIM12->CCR1 = (uint32_t)((double)(TIM12->ARR) / 2.0);
 800351a:	4b1f      	ldr	r3, [pc, #124]	; (8003598 <statesMachineLoop+0x750>)
 800351c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800351e:	ee07 3a90 	vmov	s15, r3
 8003522:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 8003526:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800352a:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800352e:	4b1a      	ldr	r3, [pc, #104]	; (8003598 <statesMachineLoop+0x750>)
 8003530:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8003534:	ee17 2a90 	vmov	r2, s15
 8003538:	635a      	str	r2, [r3, #52]	; 0x34
		TIM13->CCR1 = (uint32_t)((double)(TIM13->ARR) / 2.0);
 800353a:	4b1c      	ldr	r3, [pc, #112]	; (80035ac <statesMachineLoop+0x764>)
 800353c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800353e:	ee07 3a90 	vmov	s15, r3
 8003542:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 8003546:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800354a:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800354e:	4b17      	ldr	r3, [pc, #92]	; (80035ac <statesMachineLoop+0x764>)
 8003550:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8003554:	ee17 2a90 	vmov	r2, s15
 8003558:	635a      	str	r2, [r3, #52]	; 0x34
		TIM14->CCR1 = (uint32_t)((double)(TIM14->ARR) / 2.0);
 800355a:	4b15      	ldr	r3, [pc, #84]	; (80035b0 <statesMachineLoop+0x768>)
 800355c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800355e:	ee07 3a90 	vmov	s15, r3
 8003562:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 8003566:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800356a:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800356e:	4b10      	ldr	r3, [pc, #64]	; (80035b0 <statesMachineLoop+0x768>)
 8003570:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8003574:	ee17 2a90 	vmov	r2, s15
 8003578:	635a      	str	r2, [r3, #52]	; 0x34

		while((endStopAlarmSup || endStopAlarmInf) && continuar){
 800357a:	e166      	b.n	800384a <statesMachineLoop+0xa02>
 800357c:	f3af 8000 	nop.w
 8003580:	00000000 	.word	0x00000000
 8003584:	418e8480 	.word	0x418e8480
 8003588:	00000000 	.word	0x00000000
 800358c:	40bf4000 	.word	0x40bf4000
 8003590:	00000000 	.word	0x00000000
 8003594:	404e0000 	.word	0x404e0000
 8003598:	40001800 	.word	0x40001800
 800359c:	24000028 	.word	0x24000028
 80035a0:	240006f8 	.word	0x240006f8
 80035a4:	24000744 	.word	0x24000744
 80035a8:	24000790 	.word	0x24000790
 80035ac:	40001c00 	.word	0x40001c00
 80035b0:	40002000 	.word	0x40002000

			 //HAL_UART_Transmit(&huart3,(uint8_t*)"EndStopAlarm\r\n", 16, 100);

			 if (ES1i_PRESSED){
 80035b4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80035b8:	48b7      	ldr	r0, [pc, #732]	; (8003898 <statesMachineLoop+0xa50>)
 80035ba:	f004 f927 	bl	800780c <HAL_GPIO_ReadPin>
 80035be:	4603      	mov	r3, r0
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d11e      	bne.n	8003602 <statesMachineLoop+0x7ba>
				 HAL_Delay(10);
 80035c4:	200a      	movs	r0, #10
 80035c6:	f003 f89b 	bl	8006700 <HAL_Delay>
				 if (ES1i_PRESSED){
 80035ca:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80035ce:	48b2      	ldr	r0, [pc, #712]	; (8003898 <statesMachineLoop+0xa50>)
 80035d0:	f004 f91c 	bl	800780c <HAL_GPIO_ReadPin>
 80035d4:	4603      	mov	r3, r0
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d113      	bne.n	8003602 <statesMachineLoop+0x7ba>
					 positive_Dir_MOTOR_1;
 80035da:	2200      	movs	r2, #0
 80035dc:	f44f 7180 	mov.w	r1, #256	; 0x100
 80035e0:	48ae      	ldr	r0, [pc, #696]	; (800389c <statesMachineLoop+0xa54>)
 80035e2:	f004 f92b 	bl	800783c <HAL_GPIO_WritePin>
					 HAL_Delay(0.5); 							//delay cambio de dir
 80035e6:	2000      	movs	r0, #0
 80035e8:	f003 f88a 	bl	8006700 <HAL_Delay>
					 Start_PWM_MOTOR_1;
 80035ec:	2100      	movs	r1, #0
 80035ee:	48ac      	ldr	r0, [pc, #688]	; (80038a0 <statesMachineLoop+0xa58>)
 80035f0:	f006 feac 	bl	800a34c <HAL_TIM_PWM_Start>
					 HAL_Delay(200);
 80035f4:	20c8      	movs	r0, #200	; 0xc8
 80035f6:	f003 f883 	bl	8006700 <HAL_Delay>
					 Stop_PWM_MOTOR_1;
 80035fa:	2100      	movs	r1, #0
 80035fc:	48a8      	ldr	r0, [pc, #672]	; (80038a0 <statesMachineLoop+0xa58>)
 80035fe:	f006 ffb3 	bl	800a568 <HAL_TIM_PWM_Stop>
				 }
			 }
			 if (ES1s_PRESSED){
 8003602:	2101      	movs	r1, #1
 8003604:	48a7      	ldr	r0, [pc, #668]	; (80038a4 <statesMachineLoop+0xa5c>)
 8003606:	f004 f901 	bl	800780c <HAL_GPIO_ReadPin>
 800360a:	4603      	mov	r3, r0
 800360c:	2b00      	cmp	r3, #0
 800360e:	d11d      	bne.n	800364c <statesMachineLoop+0x804>
				 HAL_Delay(10);
 8003610:	200a      	movs	r0, #10
 8003612:	f003 f875 	bl	8006700 <HAL_Delay>
				 if (ES1s_PRESSED){
 8003616:	2101      	movs	r1, #1
 8003618:	48a2      	ldr	r0, [pc, #648]	; (80038a4 <statesMachineLoop+0xa5c>)
 800361a:	f004 f8f7 	bl	800780c <HAL_GPIO_ReadPin>
 800361e:	4603      	mov	r3, r0
 8003620:	2b00      	cmp	r3, #0
 8003622:	d113      	bne.n	800364c <statesMachineLoop+0x804>
					 negative_Dir_MOTOR_1;
 8003624:	2201      	movs	r2, #1
 8003626:	f44f 7180 	mov.w	r1, #256	; 0x100
 800362a:	489c      	ldr	r0, [pc, #624]	; (800389c <statesMachineLoop+0xa54>)
 800362c:	f004 f906 	bl	800783c <HAL_GPIO_WritePin>
					 HAL_Delay(0.5); 							//delay cambio de dir
 8003630:	2000      	movs	r0, #0
 8003632:	f003 f865 	bl	8006700 <HAL_Delay>
					 Start_PWM_MOTOR_1;
 8003636:	2100      	movs	r1, #0
 8003638:	4899      	ldr	r0, [pc, #612]	; (80038a0 <statesMachineLoop+0xa58>)
 800363a:	f006 fe87 	bl	800a34c <HAL_TIM_PWM_Start>
					 HAL_Delay(200);
 800363e:	20c8      	movs	r0, #200	; 0xc8
 8003640:	f003 f85e 	bl	8006700 <HAL_Delay>
					 Stop_PWM_MOTOR_1;
 8003644:	2100      	movs	r1, #0
 8003646:	4896      	ldr	r0, [pc, #600]	; (80038a0 <statesMachineLoop+0xa58>)
 8003648:	f006 ff8e 	bl	800a568 <HAL_TIM_PWM_Stop>
				 }
			 }


			 if (ES2i_PRESSED){
 800364c:	2108      	movs	r1, #8
 800364e:	4895      	ldr	r0, [pc, #596]	; (80038a4 <statesMachineLoop+0xa5c>)
 8003650:	f004 f8dc 	bl	800780c <HAL_GPIO_ReadPin>
 8003654:	4603      	mov	r3, r0
 8003656:	2b00      	cmp	r3, #0
 8003658:	d11d      	bne.n	8003696 <statesMachineLoop+0x84e>
				 HAL_Delay(30);
 800365a:	201e      	movs	r0, #30
 800365c:	f003 f850 	bl	8006700 <HAL_Delay>
				 if (ES2i_PRESSED){
 8003660:	2108      	movs	r1, #8
 8003662:	4890      	ldr	r0, [pc, #576]	; (80038a4 <statesMachineLoop+0xa5c>)
 8003664:	f004 f8d2 	bl	800780c <HAL_GPIO_ReadPin>
 8003668:	4603      	mov	r3, r0
 800366a:	2b00      	cmp	r3, #0
 800366c:	d113      	bne.n	8003696 <statesMachineLoop+0x84e>
					 positive_Dir_MOTOR_2;
 800366e:	2200      	movs	r2, #0
 8003670:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003674:	4889      	ldr	r0, [pc, #548]	; (800389c <statesMachineLoop+0xa54>)
 8003676:	f004 f8e1 	bl	800783c <HAL_GPIO_WritePin>
					 HAL_Delay(0.5); 							//delay cambio de dir
 800367a:	2000      	movs	r0, #0
 800367c:	f003 f840 	bl	8006700 <HAL_Delay>
					 Start_PWM_MOTOR_2;
 8003680:	2100      	movs	r1, #0
 8003682:	4889      	ldr	r0, [pc, #548]	; (80038a8 <statesMachineLoop+0xa60>)
 8003684:	f006 fe62 	bl	800a34c <HAL_TIM_PWM_Start>
					 HAL_Delay(200);
 8003688:	20c8      	movs	r0, #200	; 0xc8
 800368a:	f003 f839 	bl	8006700 <HAL_Delay>
					 Stop_PWM_MOTOR_2;
 800368e:	2100      	movs	r1, #0
 8003690:	4885      	ldr	r0, [pc, #532]	; (80038a8 <statesMachineLoop+0xa60>)
 8003692:	f006 ff69 	bl	800a568 <HAL_TIM_PWM_Stop>
				 }
			 }
			 if (ES2s_PRESSED){
 8003696:	2104      	movs	r1, #4
 8003698:	4882      	ldr	r0, [pc, #520]	; (80038a4 <statesMachineLoop+0xa5c>)
 800369a:	f004 f8b7 	bl	800780c <HAL_GPIO_ReadPin>
 800369e:	4603      	mov	r3, r0
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d11d      	bne.n	80036e0 <statesMachineLoop+0x898>
				 HAL_Delay(10);
 80036a4:	200a      	movs	r0, #10
 80036a6:	f003 f82b 	bl	8006700 <HAL_Delay>
				 if (ES2s_PRESSED){
 80036aa:	2104      	movs	r1, #4
 80036ac:	487d      	ldr	r0, [pc, #500]	; (80038a4 <statesMachineLoop+0xa5c>)
 80036ae:	f004 f8ad 	bl	800780c <HAL_GPIO_ReadPin>
 80036b2:	4603      	mov	r3, r0
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d113      	bne.n	80036e0 <statesMachineLoop+0x898>
					 negative_Dir_MOTOR_2;
 80036b8:	2201      	movs	r2, #1
 80036ba:	f44f 7100 	mov.w	r1, #512	; 0x200
 80036be:	4877      	ldr	r0, [pc, #476]	; (800389c <statesMachineLoop+0xa54>)
 80036c0:	f004 f8bc 	bl	800783c <HAL_GPIO_WritePin>
					 HAL_Delay(0.5); 							//delay cambio de dir
 80036c4:	2000      	movs	r0, #0
 80036c6:	f003 f81b 	bl	8006700 <HAL_Delay>
					 Start_PWM_MOTOR_2;
 80036ca:	2100      	movs	r1, #0
 80036cc:	4876      	ldr	r0, [pc, #472]	; (80038a8 <statesMachineLoop+0xa60>)
 80036ce:	f006 fe3d 	bl	800a34c <HAL_TIM_PWM_Start>
					 HAL_Delay(200);
 80036d2:	20c8      	movs	r0, #200	; 0xc8
 80036d4:	f003 f814 	bl	8006700 <HAL_Delay>
					 Stop_PWM_MOTOR_2;
 80036d8:	2100      	movs	r1, #0
 80036da:	4873      	ldr	r0, [pc, #460]	; (80038a8 <statesMachineLoop+0xa60>)
 80036dc:	f006 ff44 	bl	800a568 <HAL_TIM_PWM_Stop>
				 }
			 }
			 if (ES3i_PRESSED){
 80036e0:	2120      	movs	r1, #32
 80036e2:	4870      	ldr	r0, [pc, #448]	; (80038a4 <statesMachineLoop+0xa5c>)
 80036e4:	f004 f892 	bl	800780c <HAL_GPIO_ReadPin>
 80036e8:	4603      	mov	r3, r0
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d11d      	bne.n	800372a <statesMachineLoop+0x8e2>
				 HAL_Delay(10);
 80036ee:	200a      	movs	r0, #10
 80036f0:	f003 f806 	bl	8006700 <HAL_Delay>
				 if (ES3i_PRESSED){
 80036f4:	2120      	movs	r1, #32
 80036f6:	486b      	ldr	r0, [pc, #428]	; (80038a4 <statesMachineLoop+0xa5c>)
 80036f8:	f004 f888 	bl	800780c <HAL_GPIO_ReadPin>
 80036fc:	4603      	mov	r3, r0
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d113      	bne.n	800372a <statesMachineLoop+0x8e2>
					 positive_Dir_MOTOR_3;
 8003702:	2200      	movs	r2, #0
 8003704:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003708:	4864      	ldr	r0, [pc, #400]	; (800389c <statesMachineLoop+0xa54>)
 800370a:	f004 f897 	bl	800783c <HAL_GPIO_WritePin>
					 HAL_Delay(0.5); 							//delay cambio de dir
 800370e:	2000      	movs	r0, #0
 8003710:	f002 fff6 	bl	8006700 <HAL_Delay>
					 Start_PWM_MOTOR_3;
 8003714:	2100      	movs	r1, #0
 8003716:	4865      	ldr	r0, [pc, #404]	; (80038ac <statesMachineLoop+0xa64>)
 8003718:	f006 fe18 	bl	800a34c <HAL_TIM_PWM_Start>
					 HAL_Delay(200);
 800371c:	20c8      	movs	r0, #200	; 0xc8
 800371e:	f002 ffef 	bl	8006700 <HAL_Delay>
					 Stop_PWM_MOTOR_3;
 8003722:	2100      	movs	r1, #0
 8003724:	4861      	ldr	r0, [pc, #388]	; (80038ac <statesMachineLoop+0xa64>)
 8003726:	f006 ff1f 	bl	800a568 <HAL_TIM_PWM_Stop>
				 }
			 }
			 if (ES3s_PRESSED){
 800372a:	2110      	movs	r1, #16
 800372c:	485d      	ldr	r0, [pc, #372]	; (80038a4 <statesMachineLoop+0xa5c>)
 800372e:	f004 f86d 	bl	800780c <HAL_GPIO_ReadPin>
 8003732:	4603      	mov	r3, r0
 8003734:	2b00      	cmp	r3, #0
 8003736:	d11d      	bne.n	8003774 <statesMachineLoop+0x92c>
				 HAL_Delay(10);
 8003738:	200a      	movs	r0, #10
 800373a:	f002 ffe1 	bl	8006700 <HAL_Delay>
				 if (ES3s_PRESSED){
 800373e:	2110      	movs	r1, #16
 8003740:	4858      	ldr	r0, [pc, #352]	; (80038a4 <statesMachineLoop+0xa5c>)
 8003742:	f004 f863 	bl	800780c <HAL_GPIO_ReadPin>
 8003746:	4603      	mov	r3, r0
 8003748:	2b00      	cmp	r3, #0
 800374a:	d113      	bne.n	8003774 <statesMachineLoop+0x92c>
					 negative_Dir_MOTOR_3;
 800374c:	2201      	movs	r2, #1
 800374e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003752:	4852      	ldr	r0, [pc, #328]	; (800389c <statesMachineLoop+0xa54>)
 8003754:	f004 f872 	bl	800783c <HAL_GPIO_WritePin>
					 HAL_Delay(0.5); 							//delay cambio de dir
 8003758:	2000      	movs	r0, #0
 800375a:	f002 ffd1 	bl	8006700 <HAL_Delay>
					 Start_PWM_MOTOR_3;
 800375e:	2100      	movs	r1, #0
 8003760:	4852      	ldr	r0, [pc, #328]	; (80038ac <statesMachineLoop+0xa64>)
 8003762:	f006 fdf3 	bl	800a34c <HAL_TIM_PWM_Start>
					 HAL_Delay(200);
 8003766:	20c8      	movs	r0, #200	; 0xc8
 8003768:	f002 ffca 	bl	8006700 <HAL_Delay>
					 Stop_PWM_MOTOR_3;
 800376c:	2100      	movs	r1, #0
 800376e:	484f      	ldr	r0, [pc, #316]	; (80038ac <statesMachineLoop+0xa64>)
 8003770:	f006 fefa 	bl	800a568 <HAL_TIM_PWM_Stop>
				 }
			 }


			 if(ES1s_UNPRESSED && ES2s_UNPRESSED && ES3s_UNPRESSED && ES1i_UNPRESSED && ES2i_UNPRESSED && ES3i_UNPRESSED){
 8003774:	2101      	movs	r1, #1
 8003776:	484b      	ldr	r0, [pc, #300]	; (80038a4 <statesMachineLoop+0xa5c>)
 8003778:	f004 f848 	bl	800780c <HAL_GPIO_ReadPin>
 800377c:	4603      	mov	r3, r0
 800377e:	2b00      	cmp	r3, #0
 8003780:	d063      	beq.n	800384a <statesMachineLoop+0xa02>
 8003782:	2104      	movs	r1, #4
 8003784:	4847      	ldr	r0, [pc, #284]	; (80038a4 <statesMachineLoop+0xa5c>)
 8003786:	f004 f841 	bl	800780c <HAL_GPIO_ReadPin>
 800378a:	4603      	mov	r3, r0
 800378c:	2b00      	cmp	r3, #0
 800378e:	d05c      	beq.n	800384a <statesMachineLoop+0xa02>
 8003790:	2110      	movs	r1, #16
 8003792:	4844      	ldr	r0, [pc, #272]	; (80038a4 <statesMachineLoop+0xa5c>)
 8003794:	f004 f83a 	bl	800780c <HAL_GPIO_ReadPin>
 8003798:	4603      	mov	r3, r0
 800379a:	2b00      	cmp	r3, #0
 800379c:	d055      	beq.n	800384a <statesMachineLoop+0xa02>
 800379e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80037a2:	483d      	ldr	r0, [pc, #244]	; (8003898 <statesMachineLoop+0xa50>)
 80037a4:	f004 f832 	bl	800780c <HAL_GPIO_ReadPin>
 80037a8:	4603      	mov	r3, r0
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d04d      	beq.n	800384a <statesMachineLoop+0xa02>
 80037ae:	2108      	movs	r1, #8
 80037b0:	483c      	ldr	r0, [pc, #240]	; (80038a4 <statesMachineLoop+0xa5c>)
 80037b2:	f004 f82b 	bl	800780c <HAL_GPIO_ReadPin>
 80037b6:	4603      	mov	r3, r0
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d046      	beq.n	800384a <statesMachineLoop+0xa02>
 80037bc:	2120      	movs	r1, #32
 80037be:	4839      	ldr	r0, [pc, #228]	; (80038a4 <statesMachineLoop+0xa5c>)
 80037c0:	f004 f824 	bl	800780c <HAL_GPIO_ReadPin>
 80037c4:	4603      	mov	r3, r0
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d03f      	beq.n	800384a <statesMachineLoop+0xa02>
				 HAL_Delay(10);
 80037ca:	200a      	movs	r0, #10
 80037cc:	f002 ff98 	bl	8006700 <HAL_Delay>
				 if(ES1s_UNPRESSED && ES2s_UNPRESSED && ES3s_UNPRESSED && ES1i_UNPRESSED && ES2i_UNPRESSED && ES3i_UNPRESSED){
 80037d0:	2101      	movs	r1, #1
 80037d2:	4834      	ldr	r0, [pc, #208]	; (80038a4 <statesMachineLoop+0xa5c>)
 80037d4:	f004 f81a 	bl	800780c <HAL_GPIO_ReadPin>
 80037d8:	4603      	mov	r3, r0
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d035      	beq.n	800384a <statesMachineLoop+0xa02>
 80037de:	2104      	movs	r1, #4
 80037e0:	4830      	ldr	r0, [pc, #192]	; (80038a4 <statesMachineLoop+0xa5c>)
 80037e2:	f004 f813 	bl	800780c <HAL_GPIO_ReadPin>
 80037e6:	4603      	mov	r3, r0
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d02e      	beq.n	800384a <statesMachineLoop+0xa02>
 80037ec:	2110      	movs	r1, #16
 80037ee:	482d      	ldr	r0, [pc, #180]	; (80038a4 <statesMachineLoop+0xa5c>)
 80037f0:	f004 f80c 	bl	800780c <HAL_GPIO_ReadPin>
 80037f4:	4603      	mov	r3, r0
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d027      	beq.n	800384a <statesMachineLoop+0xa02>
 80037fa:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80037fe:	4826      	ldr	r0, [pc, #152]	; (8003898 <statesMachineLoop+0xa50>)
 8003800:	f004 f804 	bl	800780c <HAL_GPIO_ReadPin>
 8003804:	4603      	mov	r3, r0
 8003806:	2b00      	cmp	r3, #0
 8003808:	d01f      	beq.n	800384a <statesMachineLoop+0xa02>
 800380a:	2108      	movs	r1, #8
 800380c:	4825      	ldr	r0, [pc, #148]	; (80038a4 <statesMachineLoop+0xa5c>)
 800380e:	f003 fffd 	bl	800780c <HAL_GPIO_ReadPin>
 8003812:	4603      	mov	r3, r0
 8003814:	2b00      	cmp	r3, #0
 8003816:	d018      	beq.n	800384a <statesMachineLoop+0xa02>
 8003818:	2120      	movs	r1, #32
 800381a:	4822      	ldr	r0, [pc, #136]	; (80038a4 <statesMachineLoop+0xa5c>)
 800381c:	f003 fff6 	bl	800780c <HAL_GPIO_ReadPin>
 8003820:	4603      	mov	r3, r0
 8003822:	2b00      	cmp	r3, #0
 8003824:	d011      	beq.n	800384a <statesMachineLoop+0xa02>

					 endStopAlarmSup = false;
 8003826:	4b22      	ldr	r3, [pc, #136]	; (80038b0 <statesMachineLoop+0xa68>)
 8003828:	2200      	movs	r2, #0
 800382a:	701a      	strb	r2, [r3, #0]
					 endStopAlarmInf = false;
 800382c:	4b21      	ldr	r3, [pc, #132]	; (80038b4 <statesMachineLoop+0xa6c>)
 800382e:	2200      	movs	r2, #0
 8003830:	701a      	strb	r2, [r3, #0]
					 continuar = false;
 8003832:	4b21      	ldr	r3, [pc, #132]	; (80038b8 <statesMachineLoop+0xa70>)
 8003834:	2200      	movs	r2, #0
 8003836:	701a      	strb	r2, [r3, #0]
					 HAL_UART_Transmit(&huart3,(uint8_t*)"Fin_FAULT\r\n", 13, 100);
 8003838:	2364      	movs	r3, #100	; 0x64
 800383a:	220d      	movs	r2, #13
 800383c:	491f      	ldr	r1, [pc, #124]	; (80038bc <statesMachineLoop+0xa74>)
 800383e:	4820      	ldr	r0, [pc, #128]	; (80038c0 <statesMachineLoop+0xa78>)
 8003840:	f008 fb8a 	bl	800bf58 <HAL_UART_Transmit>
					 state = READY;
 8003844:	4b1f      	ldr	r3, [pc, #124]	; (80038c4 <statesMachineLoop+0xa7c>)
 8003846:	2201      	movs	r2, #1
 8003848:	701a      	strb	r2, [r3, #0]
		while((endStopAlarmSup || endStopAlarmInf) && continuar){
 800384a:	4b19      	ldr	r3, [pc, #100]	; (80038b0 <statesMachineLoop+0xa68>)
 800384c:	781b      	ldrb	r3, [r3, #0]
 800384e:	2b00      	cmp	r3, #0
 8003850:	d103      	bne.n	800385a <statesMachineLoop+0xa12>
 8003852:	4b18      	ldr	r3, [pc, #96]	; (80038b4 <statesMachineLoop+0xa6c>)
 8003854:	781b      	ldrb	r3, [r3, #0]
 8003856:	2b00      	cmp	r3, #0
 8003858:	d014      	beq.n	8003884 <statesMachineLoop+0xa3c>
 800385a:	4b17      	ldr	r3, [pc, #92]	; (80038b8 <statesMachineLoop+0xa70>)
 800385c:	781b      	ldrb	r3, [r3, #0]
 800385e:	2b00      	cmp	r3, #0
 8003860:	f47f aea8 	bne.w	80035b4 <statesMachineLoop+0x76c>
			 }


		}//End while

		while(faultDrivers && continuar){
 8003864:	e00e      	b.n	8003884 <statesMachineLoop+0xa3c>

			//relayAbierto;
			//HAL_Delay(100);
			//relayCerrado;

			faultDrivers = false;
 8003866:	4b18      	ldr	r3, [pc, #96]	; (80038c8 <statesMachineLoop+0xa80>)
 8003868:	2200      	movs	r2, #0
 800386a:	701a      	strb	r2, [r3, #0]
			continuar = false;
 800386c:	4b12      	ldr	r3, [pc, #72]	; (80038b8 <statesMachineLoop+0xa70>)
 800386e:	2200      	movs	r2, #0
 8003870:	701a      	strb	r2, [r3, #0]

			HAL_UART_Transmit(&huart3,(uint8_t*)"Fin_FALL\r\n", 13, 100);
 8003872:	2364      	movs	r3, #100	; 0x64
 8003874:	220d      	movs	r2, #13
 8003876:	4915      	ldr	r1, [pc, #84]	; (80038cc <statesMachineLoop+0xa84>)
 8003878:	4811      	ldr	r0, [pc, #68]	; (80038c0 <statesMachineLoop+0xa78>)
 800387a:	f008 fb6d 	bl	800bf58 <HAL_UART_Transmit>
			state = READY;
 800387e:	4b11      	ldr	r3, [pc, #68]	; (80038c4 <statesMachineLoop+0xa7c>)
 8003880:	2201      	movs	r2, #1
 8003882:	701a      	strb	r2, [r3, #0]
		while(faultDrivers && continuar){
 8003884:	4b10      	ldr	r3, [pc, #64]	; (80038c8 <statesMachineLoop+0xa80>)
 8003886:	781b      	ldrb	r3, [r3, #0]
 8003888:	2b00      	cmp	r3, #0
 800388a:	d06c      	beq.n	8003966 <statesMachineLoop+0xb1e>
 800388c:	4b0a      	ldr	r3, [pc, #40]	; (80038b8 <statesMachineLoop+0xa70>)
 800388e:	781b      	ldrb	r3, [r3, #0]
 8003890:	2b00      	cmp	r3, #0
 8003892:	d1e8      	bne.n	8003866 <statesMachineLoop+0xa1e>

		}//End while


		break;
 8003894:	e067      	b.n	8003966 <statesMachineLoop+0xb1e>
 8003896:	bf00      	nop
 8003898:	58021800 	.word	0x58021800
 800389c:	58020800 	.word	0x58020800
 80038a0:	240006f8 	.word	0x240006f8
 80038a4:	58021000 	.word	0x58021000
 80038a8:	24000744 	.word	0x24000744
 80038ac:	24000790 	.word	0x24000790
 80038b0:	2400045c 	.word	0x2400045c
 80038b4:	2400045d 	.word	0x2400045d
 80038b8:	2400045e 	.word	0x2400045e
 80038bc:	080121f4 	.word	0x080121f4
 80038c0:	24000a00 	.word	0x24000a00
 80038c4:	24000458 	.word	0x24000458
 80038c8:	2400045f 	.word	0x2400045f
 80038cc:	08012200 	.word	0x08012200

	case DEMO:

	    // Abre el archivo para lectura (una sola vez siempre y cuando readFile sea verdadero )
		if (readFile){
 80038d0:	4b26      	ldr	r3, [pc, #152]	; (800396c <statesMachineLoop+0xb24>)
 80038d2:	781b      	ldrb	r3, [r3, #0]
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d019      	beq.n	800390c <statesMachineLoop+0xac4>
			file = fopen(filename, "r");
 80038d8:	4b25      	ldr	r3, [pc, #148]	; (8003970 <statesMachineLoop+0xb28>)
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	4925      	ldr	r1, [pc, #148]	; (8003974 <statesMachineLoop+0xb2c>)
 80038de:	4618      	mov	r0, r3
 80038e0:	f00b f944 	bl	800eb6c <fopen>
 80038e4:	4603      	mov	r3, r0
 80038e6:	4a24      	ldr	r2, [pc, #144]	; (8003978 <statesMachineLoop+0xb30>)
 80038e8:	6013      	str	r3, [r2, #0]

			// Verifica si el archivo se ha abierto correctamente
			if (file == NULL) {
 80038ea:	4b23      	ldr	r3, [pc, #140]	; (8003978 <statesMachineLoop+0xb30>)
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d106      	bne.n	8003900 <statesMachineLoop+0xab8>
				HAL_UART_Transmit(&huart3,(uint8_t*)"No se pudo abrir el archivo.\n", 30, 100);
 80038f2:	2364      	movs	r3, #100	; 0x64
 80038f4:	221e      	movs	r2, #30
 80038f6:	4921      	ldr	r1, [pc, #132]	; (800397c <statesMachineLoop+0xb34>)
 80038f8:	4821      	ldr	r0, [pc, #132]	; (8003980 <statesMachineLoop+0xb38>)
 80038fa:	f008 fb2d 	bl	800bf58 <HAL_UART_Transmit>
				break;
 80038fe:	e033      	b.n	8003968 <statesMachineLoop+0xb20>
			}
			readFile = false;
 8003900:	4b1a      	ldr	r3, [pc, #104]	; (800396c <statesMachineLoop+0xb24>)
 8003902:	2200      	movs	r2, #0
 8003904:	701a      	strb	r2, [r3, #0]
			startDemo = true;
 8003906:	4b1f      	ldr	r3, [pc, #124]	; (8003984 <statesMachineLoop+0xb3c>)
 8003908:	2201      	movs	r2, #1
 800390a:	701a      	strb	r2, [r3, #0]
		}

	    // Lee cada línea del archivo y la guarda en el buffer
	    if (fgets(buffer, BUFFER_SIZE, file) != NULL) {
 800390c:	4b1a      	ldr	r3, [pc, #104]	; (8003978 <statesMachineLoop+0xb30>)
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	461a      	mov	r2, r3
 8003912:	211e      	movs	r1, #30
 8003914:	481c      	ldr	r0, [pc, #112]	; (8003988 <statesMachineLoop+0xb40>)
 8003916:	f00a fff5 	bl	800e904 <fgets>
 800391a:	4603      	mov	r3, r0
 800391c:	2b00      	cmp	r3, #0
 800391e:	d00e      	beq.n	800393e <statesMachineLoop+0xaf6>

	        // Copia la línea al buffer de tipo uint8_t
	        //uint8_t rx_buffer[strlen(buffer)];
	        memcpy(rx_buffer, buffer, strlen(buffer));
 8003920:	4819      	ldr	r0, [pc, #100]	; (8003988 <statesMachineLoop+0xb40>)
 8003922:	f7fc fd2d 	bl	8000380 <strlen>
 8003926:	4603      	mov	r3, r0
 8003928:	461a      	mov	r2, r3
 800392a:	4917      	ldr	r1, [pc, #92]	; (8003988 <statesMachineLoop+0xb40>)
 800392c:	4817      	ldr	r0, [pc, #92]	; (800398c <statesMachineLoop+0xb44>)
 800392e:	f00b faa5 	bl	800ee7c <memcpy>

	        interpretaComando();
 8003932:	f7fd fd2b 	bl	800138c <interpretaComando>

	        state = READY;
 8003936:	4b16      	ldr	r3, [pc, #88]	; (8003990 <statesMachineLoop+0xb48>)
 8003938:	2201      	movs	r2, #1
 800393a:	701a      	strb	r2, [r3, #0]
			startDemo = false;
			fclose(file);
			HAL_UART_Transmit(&huart3,(uint8_t*)"Fin demo\n", 10, 100);
	    }

	default:break;
 800393c:	e00d      	b.n	800395a <statesMachineLoop+0xb12>
			startDemo = false;
 800393e:	4b11      	ldr	r3, [pc, #68]	; (8003984 <statesMachineLoop+0xb3c>)
 8003940:	2200      	movs	r2, #0
 8003942:	701a      	strb	r2, [r3, #0]
			fclose(file);
 8003944:	4b0c      	ldr	r3, [pc, #48]	; (8003978 <statesMachineLoop+0xb30>)
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	4618      	mov	r0, r3
 800394a:	f00a fe85 	bl	800e658 <fclose>
			HAL_UART_Transmit(&huart3,(uint8_t*)"Fin demo\n", 10, 100);
 800394e:	2364      	movs	r3, #100	; 0x64
 8003950:	220a      	movs	r2, #10
 8003952:	4910      	ldr	r1, [pc, #64]	; (8003994 <statesMachineLoop+0xb4c>)
 8003954:	480a      	ldr	r0, [pc, #40]	; (8003980 <statesMachineLoop+0xb38>)
 8003956:	f008 faff 	bl	800bf58 <HAL_UART_Transmit>
	default:break;
 800395a:	bf00      	nop
 800395c:	e004      	b.n	8003968 <statesMachineLoop+0xb20>
		break;
 800395e:	bf00      	nop
 8003960:	e002      	b.n	8003968 <statesMachineLoop+0xb20>
		break;
 8003962:	bf00      	nop
 8003964:	e000      	b.n	8003968 <statesMachineLoop+0xb20>
		break;
 8003966:	bf00      	nop
	}
}
 8003968:	bf00      	nop
 800396a:	bd80      	pop	{r7, pc}
 800396c:	2400059c 	.word	0x2400059c
 8003970:	24000074 	.word	0x24000074
 8003974:	0801220c 	.word	0x0801220c
 8003978:	240005a0 	.word	0x240005a0
 800397c:	08012210 	.word	0x08012210
 8003980:	24000a00 	.word	0x24000a00
 8003984:	2400059d 	.word	0x2400059d
 8003988:	240005a4 	.word	0x240005a4
 800398c:	2400057c 	.word	0x2400057c
 8003990:	24000458 	.word	0x24000458
 8003994:	08012230 	.word	0x08012230

08003998 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003998:	b580      	push	{r7, lr}
 800399a:	b082      	sub	sp, #8
 800399c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800399e:	4b0f      	ldr	r3, [pc, #60]	; (80039dc <HAL_MspInit+0x44>)
 80039a0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80039a4:	4a0d      	ldr	r2, [pc, #52]	; (80039dc <HAL_MspInit+0x44>)
 80039a6:	f043 0302 	orr.w	r3, r3, #2
 80039aa:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80039ae:	4b0b      	ldr	r3, [pc, #44]	; (80039dc <HAL_MspInit+0x44>)
 80039b0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80039b4:	f003 0302 	and.w	r3, r3, #2
 80039b8:	607b      	str	r3, [r7, #4]
 80039ba:	687b      	ldr	r3, [r7, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_2);
 80039bc:	2005      	movs	r0, #5
 80039be:	f002 ffc3 	bl	8006948 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* FPU_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(FPU_IRQn, 1, 0);
 80039c2:	2200      	movs	r2, #0
 80039c4:	2101      	movs	r1, #1
 80039c6:	2051      	movs	r0, #81	; 0x51
 80039c8:	f002 ffc9 	bl	800695e <HAL_NVIC_SetPriority>
  /* FPU_IRQn interrupt configuration */
  HAL_NVIC_EnableIRQ(FPU_IRQn);
 80039cc:	2051      	movs	r0, #81	; 0x51
 80039ce:	f002 ffe0 	bl	8006992 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80039d2:	bf00      	nop
 80039d4:	3708      	adds	r7, #8
 80039d6:	46bd      	mov	sp, r7
 80039d8:	bd80      	pop	{r7, pc}
 80039da:	bf00      	nop
 80039dc:	58024400 	.word	0x58024400

080039e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80039e0:	b480      	push	{r7}
 80039e2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80039e4:	bf00      	nop
 80039e6:	46bd      	mov	sp, r7
 80039e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ec:	4770      	bx	lr

080039ee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80039ee:	b480      	push	{r7}
 80039f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80039f2:	e7fe      	b.n	80039f2 <HardFault_Handler+0x4>

080039f4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80039f4:	b480      	push	{r7}
 80039f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80039f8:	e7fe      	b.n	80039f8 <MemManage_Handler+0x4>

080039fa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80039fa:	b480      	push	{r7}
 80039fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80039fe:	e7fe      	b.n	80039fe <BusFault_Handler+0x4>

08003a00 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003a00:	b480      	push	{r7}
 8003a02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003a04:	e7fe      	b.n	8003a04 <UsageFault_Handler+0x4>

08003a06 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003a06:	b480      	push	{r7}
 8003a08:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003a0a:	bf00      	nop
 8003a0c:	46bd      	mov	sp, r7
 8003a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a12:	4770      	bx	lr

08003a14 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003a14:	b480      	push	{r7}
 8003a16:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003a18:	bf00      	nop
 8003a1a:	46bd      	mov	sp, r7
 8003a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a20:	4770      	bx	lr

08003a22 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003a22:	b480      	push	{r7}
 8003a24:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003a26:	bf00      	nop
 8003a28:	46bd      	mov	sp, r7
 8003a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a2e:	4770      	bx	lr

08003a30 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003a30:	b580      	push	{r7, lr}
 8003a32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003a34:	f002 fe44 	bl	80066c0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003a38:	bf00      	nop
 8003a3a:	bd80      	pop	{r7, pc}

08003a3c <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8003a3c:	b580      	push	{r7, lr}
 8003a3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(E_EndStop1_Sup_Pin);
 8003a40:	2001      	movs	r0, #1
 8003a42:	f003 ff14 	bl	800786e <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8003a46:	bf00      	nop
 8003a48:	bd80      	pop	{r7, pc}

08003a4a <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8003a4a:	b580      	push	{r7, lr}
 8003a4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(E_EndStop2_Sup_Pin);
 8003a4e:	2004      	movs	r0, #4
 8003a50:	f003 ff0d 	bl	800786e <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8003a54:	bf00      	nop
 8003a56:	bd80      	pop	{r7, pc}

08003a58 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8003a58:	b580      	push	{r7, lr}
 8003a5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(E_EndStop2_Inf_Pin);
 8003a5c:	2008      	movs	r0, #8
 8003a5e:	f003 ff06 	bl	800786e <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8003a62:	bf00      	nop
 8003a64:	bd80      	pop	{r7, pc}

08003a66 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8003a66:	b580      	push	{r7, lr}
 8003a68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(E_EndStop3_Sup_Pin);
 8003a6a:	2010      	movs	r0, #16
 8003a6c:	f003 feff 	bl	800786e <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8003a70:	bf00      	nop
 8003a72:	bd80      	pop	{r7, pc}

08003a74 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8003a74:	b580      	push	{r7, lr}
 8003a76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(E_EndStop3_Inf_Pin);
 8003a78:	2020      	movs	r0, #32
 8003a7a:	f003 fef8 	bl	800786e <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(faultDriver1_Pin);
 8003a7e:	2080      	movs	r0, #128	; 0x80
 8003a80:	f003 fef5 	bl	800786e <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8003a84:	bf00      	nop
 8003a86:	bd80      	pop	{r7, pc}

08003a88 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8003a88:	b580      	push	{r7, lr}
 8003a8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8003a8c:	4802      	ldr	r0, [pc, #8]	; (8003a98 <TIM2_IRQHandler+0x10>)
 8003a8e:	f007 f823 	bl	800aad8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8003a92:	bf00      	nop
 8003a94:	bd80      	pop	{r7, pc}
 8003a96:	bf00      	nop
 8003a98:	240005c8 	.word	0x240005c8

08003a9c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8003a9c:	b580      	push	{r7, lr}
 8003a9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8003aa0:	4802      	ldr	r0, [pc, #8]	; (8003aac <TIM3_IRQHandler+0x10>)
 8003aa2:	f007 f819 	bl	800aad8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8003aa6:	bf00      	nop
 8003aa8:	bd80      	pop	{r7, pc}
 8003aaa:	bf00      	nop
 8003aac:	24000614 	.word	0x24000614

08003ab0 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8003ab0:	b580      	push	{r7, lr}
 8003ab2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8003ab4:	4802      	ldr	r0, [pc, #8]	; (8003ac0 <TIM4_IRQHandler+0x10>)
 8003ab6:	f007 f80f 	bl	800aad8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8003aba:	bf00      	nop
 8003abc:	bd80      	pop	{r7, pc}
 8003abe:	bf00      	nop
 8003ac0:	24000660 	.word	0x24000660

08003ac4 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8003ac4:	b580      	push	{r7, lr}
 8003ac6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8003ac8:	4802      	ldr	r0, [pc, #8]	; (8003ad4 <USART3_IRQHandler+0x10>)
 8003aca:	f008 fb31 	bl	800c130 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8003ace:	bf00      	nop
 8003ad0:	bd80      	pop	{r7, pc}
 8003ad2:	bf00      	nop
 8003ad4:	24000a00 	.word	0x24000a00

08003ad8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8003ad8:	b580      	push	{r7, lr}
 8003ada:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(E_EndStop1_Inf_Pin);
 8003adc:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8003ae0:	f003 fec5 	bl	800786e <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BUTTON_Pin);
 8003ae4:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8003ae8:	f003 fec1 	bl	800786e <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(faultDriver2_Pin);
 8003aec:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8003af0:	f003 febd 	bl	800786e <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(faultDriver3_Pin);
 8003af4:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8003af8:	f003 feb9 	bl	800786e <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8003afc:	bf00      	nop
 8003afe:	bd80      	pop	{r7, pc}

08003b00 <FPU_IRQHandler>:

/**
  * @brief This function handles FPU global interrupt.
  */
void FPU_IRQHandler(void)
{
 8003b00:	b480      	push	{r7}
 8003b02:	af00      	add	r7, sp, #0

  /* USER CODE END FPU_IRQn 0 */
  /* USER CODE BEGIN FPU_IRQn 1 */

  /* USER CODE END FPU_IRQn 1 */
}
 8003b04:	bf00      	nop
 8003b06:	46bd      	mov	sp, r7
 8003b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b0c:	4770      	bx	lr
	...

08003b10 <TIM15_IRQHandler>:

/**
  * @brief This function handles TIM15 global interrupt.
  */
void TIM15_IRQHandler(void)
{
 8003b10:	b580      	push	{r7, lr}
 8003b12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM15_IRQn 0 */

  /* USER CODE END TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim15);
 8003b14:	4802      	ldr	r0, [pc, #8]	; (8003b20 <TIM15_IRQHandler+0x10>)
 8003b16:	f006 ffdf 	bl	800aad8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM15_IRQn 1 */

  /* USER CODE END TIM15_IRQn 1 */
}
 8003b1a:	bf00      	nop
 8003b1c:	bd80      	pop	{r7, pc}
 8003b1e:	bf00      	nop
 8003b20:	240007dc 	.word	0x240007dc

08003b24 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003b24:	b480      	push	{r7}
 8003b26:	af00      	add	r7, sp, #0
	return 1;
 8003b28:	2301      	movs	r3, #1
}
 8003b2a:	4618      	mov	r0, r3
 8003b2c:	46bd      	mov	sp, r7
 8003b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b32:	4770      	bx	lr

08003b34 <_kill>:

int _kill(int pid, int sig)
{
 8003b34:	b580      	push	{r7, lr}
 8003b36:	b082      	sub	sp, #8
 8003b38:	af00      	add	r7, sp, #0
 8003b3a:	6078      	str	r0, [r7, #4]
 8003b3c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8003b3e:	f00a fd19 	bl	800e574 <__errno>
 8003b42:	4603      	mov	r3, r0
 8003b44:	2216      	movs	r2, #22
 8003b46:	601a      	str	r2, [r3, #0]
	return -1;
 8003b48:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003b4c:	4618      	mov	r0, r3
 8003b4e:	3708      	adds	r7, #8
 8003b50:	46bd      	mov	sp, r7
 8003b52:	bd80      	pop	{r7, pc}

08003b54 <_exit>:

void _exit (int status)
{
 8003b54:	b580      	push	{r7, lr}
 8003b56:	b082      	sub	sp, #8
 8003b58:	af00      	add	r7, sp, #0
 8003b5a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8003b5c:	f04f 31ff 	mov.w	r1, #4294967295
 8003b60:	6878      	ldr	r0, [r7, #4]
 8003b62:	f7ff ffe7 	bl	8003b34 <_kill>
	while (1) {}		/* Make sure we hang here */
 8003b66:	e7fe      	b.n	8003b66 <_exit+0x12>

08003b68 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003b68:	b580      	push	{r7, lr}
 8003b6a:	b086      	sub	sp, #24
 8003b6c:	af00      	add	r7, sp, #0
 8003b6e:	60f8      	str	r0, [r7, #12]
 8003b70:	60b9      	str	r1, [r7, #8]
 8003b72:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003b74:	2300      	movs	r3, #0
 8003b76:	617b      	str	r3, [r7, #20]
 8003b78:	e00a      	b.n	8003b90 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8003b7a:	f3af 8000 	nop.w
 8003b7e:	4601      	mov	r1, r0
 8003b80:	68bb      	ldr	r3, [r7, #8]
 8003b82:	1c5a      	adds	r2, r3, #1
 8003b84:	60ba      	str	r2, [r7, #8]
 8003b86:	b2ca      	uxtb	r2, r1
 8003b88:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003b8a:	697b      	ldr	r3, [r7, #20]
 8003b8c:	3301      	adds	r3, #1
 8003b8e:	617b      	str	r3, [r7, #20]
 8003b90:	697a      	ldr	r2, [r7, #20]
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	429a      	cmp	r2, r3
 8003b96:	dbf0      	blt.n	8003b7a <_read+0x12>
	}

return len;
 8003b98:	687b      	ldr	r3, [r7, #4]
}
 8003b9a:	4618      	mov	r0, r3
 8003b9c:	3718      	adds	r7, #24
 8003b9e:	46bd      	mov	sp, r7
 8003ba0:	bd80      	pop	{r7, pc}

08003ba2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003ba2:	b580      	push	{r7, lr}
 8003ba4:	b086      	sub	sp, #24
 8003ba6:	af00      	add	r7, sp, #0
 8003ba8:	60f8      	str	r0, [r7, #12]
 8003baa:	60b9      	str	r1, [r7, #8]
 8003bac:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003bae:	2300      	movs	r3, #0
 8003bb0:	617b      	str	r3, [r7, #20]
 8003bb2:	e009      	b.n	8003bc8 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8003bb4:	68bb      	ldr	r3, [r7, #8]
 8003bb6:	1c5a      	adds	r2, r3, #1
 8003bb8:	60ba      	str	r2, [r7, #8]
 8003bba:	781b      	ldrb	r3, [r3, #0]
 8003bbc:	4618      	mov	r0, r3
 8003bbe:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003bc2:	697b      	ldr	r3, [r7, #20]
 8003bc4:	3301      	adds	r3, #1
 8003bc6:	617b      	str	r3, [r7, #20]
 8003bc8:	697a      	ldr	r2, [r7, #20]
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	429a      	cmp	r2, r3
 8003bce:	dbf1      	blt.n	8003bb4 <_write+0x12>
	}
	return len;
 8003bd0:	687b      	ldr	r3, [r7, #4]
}
 8003bd2:	4618      	mov	r0, r3
 8003bd4:	3718      	adds	r7, #24
 8003bd6:	46bd      	mov	sp, r7
 8003bd8:	bd80      	pop	{r7, pc}

08003bda <_close>:

int _close(int file)
{
 8003bda:	b480      	push	{r7}
 8003bdc:	b083      	sub	sp, #12
 8003bde:	af00      	add	r7, sp, #0
 8003be0:	6078      	str	r0, [r7, #4]
	return -1;
 8003be2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003be6:	4618      	mov	r0, r3
 8003be8:	370c      	adds	r7, #12
 8003bea:	46bd      	mov	sp, r7
 8003bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf0:	4770      	bx	lr

08003bf2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003bf2:	b480      	push	{r7}
 8003bf4:	b083      	sub	sp, #12
 8003bf6:	af00      	add	r7, sp, #0
 8003bf8:	6078      	str	r0, [r7, #4]
 8003bfa:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8003bfc:	683b      	ldr	r3, [r7, #0]
 8003bfe:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003c02:	605a      	str	r2, [r3, #4]
	return 0;
 8003c04:	2300      	movs	r3, #0
}
 8003c06:	4618      	mov	r0, r3
 8003c08:	370c      	adds	r7, #12
 8003c0a:	46bd      	mov	sp, r7
 8003c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c10:	4770      	bx	lr

08003c12 <_isatty>:

int _isatty(int file)
{
 8003c12:	b480      	push	{r7}
 8003c14:	b083      	sub	sp, #12
 8003c16:	af00      	add	r7, sp, #0
 8003c18:	6078      	str	r0, [r7, #4]
	return 1;
 8003c1a:	2301      	movs	r3, #1
}
 8003c1c:	4618      	mov	r0, r3
 8003c1e:	370c      	adds	r7, #12
 8003c20:	46bd      	mov	sp, r7
 8003c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c26:	4770      	bx	lr

08003c28 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003c28:	b480      	push	{r7}
 8003c2a:	b085      	sub	sp, #20
 8003c2c:	af00      	add	r7, sp, #0
 8003c2e:	60f8      	str	r0, [r7, #12]
 8003c30:	60b9      	str	r1, [r7, #8]
 8003c32:	607a      	str	r2, [r7, #4]
	return 0;
 8003c34:	2300      	movs	r3, #0
}
 8003c36:	4618      	mov	r0, r3
 8003c38:	3714      	adds	r7, #20
 8003c3a:	46bd      	mov	sp, r7
 8003c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c40:	4770      	bx	lr

08003c42 <_open>:

int _open(char *path, int flags, ...)
{
 8003c42:	b40e      	push	{r1, r2, r3}
 8003c44:	b480      	push	{r7}
 8003c46:	b082      	sub	sp, #8
 8003c48:	af00      	add	r7, sp, #0
 8003c4a:	6078      	str	r0, [r7, #4]
	/* Pretend like we always fail */
	return -1;
 8003c4c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003c50:	4618      	mov	r0, r3
 8003c52:	3708      	adds	r7, #8
 8003c54:	46bd      	mov	sp, r7
 8003c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c5a:	b003      	add	sp, #12
 8003c5c:	4770      	bx	lr
	...

08003c60 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8003c60:	b580      	push	{r7, lr}
 8003c62:	b084      	sub	sp, #16
 8003c64:	af00      	add	r7, sp, #0
 8003c66:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8003c68:	4b11      	ldr	r3, [pc, #68]	; (8003cb0 <_sbrk+0x50>)
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d102      	bne.n	8003c76 <_sbrk+0x16>
		heap_end = &end;
 8003c70:	4b0f      	ldr	r3, [pc, #60]	; (8003cb0 <_sbrk+0x50>)
 8003c72:	4a10      	ldr	r2, [pc, #64]	; (8003cb4 <_sbrk+0x54>)
 8003c74:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8003c76:	4b0e      	ldr	r3, [pc, #56]	; (8003cb0 <_sbrk+0x50>)
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8003c7c:	4b0c      	ldr	r3, [pc, #48]	; (8003cb0 <_sbrk+0x50>)
 8003c7e:	681a      	ldr	r2, [r3, #0]
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	4413      	add	r3, r2
 8003c84:	466a      	mov	r2, sp
 8003c86:	4293      	cmp	r3, r2
 8003c88:	d907      	bls.n	8003c9a <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8003c8a:	f00a fc73 	bl	800e574 <__errno>
 8003c8e:	4603      	mov	r3, r0
 8003c90:	220c      	movs	r2, #12
 8003c92:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 8003c94:	f04f 33ff 	mov.w	r3, #4294967295
 8003c98:	e006      	b.n	8003ca8 <_sbrk+0x48>
	}

	heap_end += incr;
 8003c9a:	4b05      	ldr	r3, [pc, #20]	; (8003cb0 <_sbrk+0x50>)
 8003c9c:	681a      	ldr	r2, [r3, #0]
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	4413      	add	r3, r2
 8003ca2:	4a03      	ldr	r2, [pc, #12]	; (8003cb0 <_sbrk+0x50>)
 8003ca4:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8003ca6:	68fb      	ldr	r3, [r7, #12]
}
 8003ca8:	4618      	mov	r0, r3
 8003caa:	3710      	adds	r7, #16
 8003cac:	46bd      	mov	sp, r7
 8003cae:	bd80      	pop	{r7, pc}
 8003cb0:	240005c4 	.word	0x240005c4
 8003cb4:	24000aa8 	.word	0x24000aa8

08003cb8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003cb8:	b480      	push	{r7}
 8003cba:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8003cbc:	4b29      	ldr	r3, [pc, #164]	; (8003d64 <SystemInit+0xac>)
 8003cbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cc2:	4a28      	ldr	r2, [pc, #160]	; (8003d64 <SystemInit+0xac>)
 8003cc4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003cc8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8003ccc:	4b26      	ldr	r3, [pc, #152]	; (8003d68 <SystemInit+0xb0>)
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	4a25      	ldr	r2, [pc, #148]	; (8003d68 <SystemInit+0xb0>)
 8003cd2:	f043 0301 	orr.w	r3, r3, #1
 8003cd6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8003cd8:	4b23      	ldr	r3, [pc, #140]	; (8003d68 <SystemInit+0xb0>)
 8003cda:	2200      	movs	r2, #0
 8003cdc:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, CSSON , CSION,RC48ON, CSIKERON PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8003cde:	4b22      	ldr	r3, [pc, #136]	; (8003d68 <SystemInit+0xb0>)
 8003ce0:	681a      	ldr	r2, [r3, #0]
 8003ce2:	4921      	ldr	r1, [pc, #132]	; (8003d68 <SystemInit+0xb0>)
 8003ce4:	4b21      	ldr	r3, [pc, #132]	; (8003d6c <SystemInit+0xb4>)
 8003ce6:	4013      	ands	r3, r2
 8003ce8:	600b      	str	r3, [r1, #0]

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8003cea:	4b1f      	ldr	r3, [pc, #124]	; (8003d68 <SystemInit+0xb0>)
 8003cec:	2200      	movs	r2, #0
 8003cee:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8003cf0:	4b1d      	ldr	r3, [pc, #116]	; (8003d68 <SystemInit+0xb0>)
 8003cf2:	2200      	movs	r2, #0
 8003cf4:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8003cf6:	4b1c      	ldr	r3, [pc, #112]	; (8003d68 <SystemInit+0xb0>)
 8003cf8:	2200      	movs	r2, #0
 8003cfa:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x00000000;
 8003cfc:	4b1a      	ldr	r3, [pc, #104]	; (8003d68 <SystemInit+0xb0>)
 8003cfe:	2200      	movs	r2, #0
 8003d00:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00000000;
 8003d02:	4b19      	ldr	r3, [pc, #100]	; (8003d68 <SystemInit+0xb0>)
 8003d04:	2200      	movs	r2, #0
 8003d06:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x00000000;
 8003d08:	4b17      	ldr	r3, [pc, #92]	; (8003d68 <SystemInit+0xb0>)
 8003d0a:	2200      	movs	r2, #0
 8003d0c:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8003d0e:	4b16      	ldr	r3, [pc, #88]	; (8003d68 <SystemInit+0xb0>)
 8003d10:	2200      	movs	r2, #0
 8003d12:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x00000000;
 8003d14:	4b14      	ldr	r3, [pc, #80]	; (8003d68 <SystemInit+0xb0>)
 8003d16:	2200      	movs	r2, #0
 8003d18:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8003d1a:	4b13      	ldr	r3, [pc, #76]	; (8003d68 <SystemInit+0xb0>)
 8003d1c:	2200      	movs	r2, #0
 8003d1e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x00000000;
 8003d20:	4b11      	ldr	r3, [pc, #68]	; (8003d68 <SystemInit+0xb0>)
 8003d22:	2200      	movs	r2, #0
 8003d24:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8003d26:	4b10      	ldr	r3, [pc, #64]	; (8003d68 <SystemInit+0xb0>)
 8003d28:	2200      	movs	r2, #0
 8003d2a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8003d2c:	4b0e      	ldr	r3, [pc, #56]	; (8003d68 <SystemInit+0xb0>)
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	4a0d      	ldr	r2, [pc, #52]	; (8003d68 <SystemInit+0xb0>)
 8003d32:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003d36:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8003d38:	4b0b      	ldr	r3, [pc, #44]	; (8003d68 <SystemInit+0xb0>)
 8003d3a:	2200      	movs	r2, #0
 8003d3c:	661a      	str	r2, [r3, #96]	; 0x60
  SCB->VTOR = FLASH_BANK2_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
#endif /* VECT_TAB_SRAM */

#else
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8003d3e:	4b0c      	ldr	r3, [pc, #48]	; (8003d70 <SystemInit+0xb8>)
 8003d40:	681a      	ldr	r2, [r3, #0]
 8003d42:	4b0c      	ldr	r3, [pc, #48]	; (8003d74 <SystemInit+0xbc>)
 8003d44:	4013      	ands	r3, r2
 8003d46:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003d4a:	d202      	bcs.n	8003d52 <SystemInit+0x9a>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8003d4c:	4b0a      	ldr	r3, [pc, #40]	; (8003d78 <SystemInit+0xc0>)
 8003d4e:	2201      	movs	r2, #1
 8003d50:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003d52:	4b04      	ldr	r3, [pc, #16]	; (8003d64 <SystemInit+0xac>)
 8003d54:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003d58:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 8003d5a:	bf00      	nop
 8003d5c:	46bd      	mov	sp, r7
 8003d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d62:	4770      	bx	lr
 8003d64:	e000ed00 	.word	0xe000ed00
 8003d68:	58024400 	.word	0x58024400
 8003d6c:	eaf6ed7f 	.word	0xeaf6ed7f
 8003d70:	5c001000 	.word	0x5c001000
 8003d74:	ffff0000 	.word	0xffff0000
 8003d78:	51008108 	.word	0x51008108

08003d7c <MX_TIM2_Init>:
TIM_HandleTypeDef htim14;
TIM_HandleTypeDef htim15;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8003d7c:	b580      	push	{r7, lr}
 8003d7e:	b08c      	sub	sp, #48	; 0x30
 8003d80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003d82:	f107 0320 	add.w	r3, r7, #32
 8003d86:	2200      	movs	r2, #0
 8003d88:	601a      	str	r2, [r3, #0]
 8003d8a:	605a      	str	r2, [r3, #4]
 8003d8c:	609a      	str	r2, [r3, #8]
 8003d8e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003d90:	f107 0314 	add.w	r3, r7, #20
 8003d94:	2200      	movs	r2, #0
 8003d96:	601a      	str	r2, [r3, #0]
 8003d98:	605a      	str	r2, [r3, #4]
 8003d9a:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8003d9c:	1d3b      	adds	r3, r7, #4
 8003d9e:	2200      	movs	r2, #0
 8003da0:	601a      	str	r2, [r3, #0]
 8003da2:	605a      	str	r2, [r3, #4]
 8003da4:	609a      	str	r2, [r3, #8]
 8003da6:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8003da8:	4b2b      	ldr	r3, [pc, #172]	; (8003e58 <MX_TIM2_Init+0xdc>)
 8003daa:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003dae:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8003db0:	4b29      	ldr	r3, [pc, #164]	; (8003e58 <MX_TIM2_Init+0xdc>)
 8003db2:	2200      	movs	r2, #0
 8003db4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003db6:	4b28      	ldr	r3, [pc, #160]	; (8003e58 <MX_TIM2_Init+0xdc>)
 8003db8:	2200      	movs	r2, #0
 8003dba:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8003dbc:	4b26      	ldr	r3, [pc, #152]	; (8003e58 <MX_TIM2_Init+0xdc>)
 8003dbe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003dc2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003dc4:	4b24      	ldr	r3, [pc, #144]	; (8003e58 <MX_TIM2_Init+0xdc>)
 8003dc6:	2200      	movs	r2, #0
 8003dc8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003dca:	4b23      	ldr	r3, [pc, #140]	; (8003e58 <MX_TIM2_Init+0xdc>)
 8003dcc:	2200      	movs	r2, #0
 8003dce:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8003dd0:	4821      	ldr	r0, [pc, #132]	; (8003e58 <MX_TIM2_Init+0xdc>)
 8003dd2:	f006 f8c3 	bl	8009f5c <HAL_TIM_Base_Init>
 8003dd6:	4603      	mov	r3, r0
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d001      	beq.n	8003de0 <MX_TIM2_Init+0x64>
  {
    Error_Handler();
 8003ddc:	f7fe ff24 	bl	8002c28 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003de0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003de4:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8003de6:	f107 0320 	add.w	r3, r7, #32
 8003dea:	4619      	mov	r1, r3
 8003dec:	481a      	ldr	r0, [pc, #104]	; (8003e58 <MX_TIM2_Init+0xdc>)
 8003dee:	f007 f943 	bl	800b078 <HAL_TIM_ConfigClockSource>
 8003df2:	4603      	mov	r3, r0
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d001      	beq.n	8003dfc <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 8003df8:	f7fe ff16 	bl	8002c28 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8003dfc:	4816      	ldr	r0, [pc, #88]	; (8003e58 <MX_TIM2_Init+0xdc>)
 8003dfe:	f006 fc49 	bl	800a694 <HAL_TIM_IC_Init>
 8003e02:	4603      	mov	r3, r0
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d001      	beq.n	8003e0c <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8003e08:	f7fe ff0e 	bl	8002c28 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003e0c:	2300      	movs	r3, #0
 8003e0e:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003e10:	2300      	movs	r3, #0
 8003e12:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003e14:	f107 0314 	add.w	r3, r7, #20
 8003e18:	4619      	mov	r1, r3
 8003e1a:	480f      	ldr	r0, [pc, #60]	; (8003e58 <MX_TIM2_Init+0xdc>)
 8003e1c:	f007 ffa0 	bl	800bd60 <HAL_TIMEx_MasterConfigSynchronization>
 8003e20:	4603      	mov	r3, r0
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d001      	beq.n	8003e2a <MX_TIM2_Init+0xae>
  {
    Error_Handler();
 8003e26:	f7fe feff 	bl	8002c28 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8003e2a:	2300      	movs	r3, #0
 8003e2c:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8003e2e:	2301      	movs	r3, #1
 8003e30:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8003e32:	2300      	movs	r3, #0
 8003e34:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8003e36:	2300      	movs	r3, #0
 8003e38:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8003e3a:	1d3b      	adds	r3, r7, #4
 8003e3c:	2200      	movs	r2, #0
 8003e3e:	4619      	mov	r1, r3
 8003e40:	4805      	ldr	r0, [pc, #20]	; (8003e58 <MX_TIM2_Init+0xdc>)
 8003e42:	f006 ff68 	bl	800ad16 <HAL_TIM_IC_ConfigChannel>
 8003e46:	4603      	mov	r3, r0
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d001      	beq.n	8003e50 <MX_TIM2_Init+0xd4>
  {
    Error_Handler();
 8003e4c:	f7fe feec 	bl	8002c28 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8003e50:	bf00      	nop
 8003e52:	3730      	adds	r7, #48	; 0x30
 8003e54:	46bd      	mov	sp, r7
 8003e56:	bd80      	pop	{r7, pc}
 8003e58:	240005c8 	.word	0x240005c8

08003e5c <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8003e5c:	b580      	push	{r7, lr}
 8003e5e:	b08c      	sub	sp, #48	; 0x30
 8003e60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003e62:	f107 0320 	add.w	r3, r7, #32
 8003e66:	2200      	movs	r2, #0
 8003e68:	601a      	str	r2, [r3, #0]
 8003e6a:	605a      	str	r2, [r3, #4]
 8003e6c:	609a      	str	r2, [r3, #8]
 8003e6e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003e70:	f107 0314 	add.w	r3, r7, #20
 8003e74:	2200      	movs	r2, #0
 8003e76:	601a      	str	r2, [r3, #0]
 8003e78:	605a      	str	r2, [r3, #4]
 8003e7a:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8003e7c:	1d3b      	adds	r3, r7, #4
 8003e7e:	2200      	movs	r2, #0
 8003e80:	601a      	str	r2, [r3, #0]
 8003e82:	605a      	str	r2, [r3, #4]
 8003e84:	609a      	str	r2, [r3, #8]
 8003e86:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8003e88:	4b2b      	ldr	r3, [pc, #172]	; (8003f38 <MX_TIM3_Init+0xdc>)
 8003e8a:	4a2c      	ldr	r2, [pc, #176]	; (8003f3c <MX_TIM3_Init+0xe0>)
 8003e8c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8003e8e:	4b2a      	ldr	r3, [pc, #168]	; (8003f38 <MX_TIM3_Init+0xdc>)
 8003e90:	2200      	movs	r2, #0
 8003e92:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003e94:	4b28      	ldr	r3, [pc, #160]	; (8003f38 <MX_TIM3_Init+0xdc>)
 8003e96:	2200      	movs	r2, #0
 8003e98:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8003e9a:	4b27      	ldr	r3, [pc, #156]	; (8003f38 <MX_TIM3_Init+0xdc>)
 8003e9c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003ea0:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003ea2:	4b25      	ldr	r3, [pc, #148]	; (8003f38 <MX_TIM3_Init+0xdc>)
 8003ea4:	2200      	movs	r2, #0
 8003ea6:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003ea8:	4b23      	ldr	r3, [pc, #140]	; (8003f38 <MX_TIM3_Init+0xdc>)
 8003eaa:	2200      	movs	r2, #0
 8003eac:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8003eae:	4822      	ldr	r0, [pc, #136]	; (8003f38 <MX_TIM3_Init+0xdc>)
 8003eb0:	f006 f854 	bl	8009f5c <HAL_TIM_Base_Init>
 8003eb4:	4603      	mov	r3, r0
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d001      	beq.n	8003ebe <MX_TIM3_Init+0x62>
  {
    Error_Handler();
 8003eba:	f7fe feb5 	bl	8002c28 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003ebe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003ec2:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8003ec4:	f107 0320 	add.w	r3, r7, #32
 8003ec8:	4619      	mov	r1, r3
 8003eca:	481b      	ldr	r0, [pc, #108]	; (8003f38 <MX_TIM3_Init+0xdc>)
 8003ecc:	f007 f8d4 	bl	800b078 <HAL_TIM_ConfigClockSource>
 8003ed0:	4603      	mov	r3, r0
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d001      	beq.n	8003eda <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 8003ed6:	f7fe fea7 	bl	8002c28 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 8003eda:	4817      	ldr	r0, [pc, #92]	; (8003f38 <MX_TIM3_Init+0xdc>)
 8003edc:	f006 fbda 	bl	800a694 <HAL_TIM_IC_Init>
 8003ee0:	4603      	mov	r3, r0
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d001      	beq.n	8003eea <MX_TIM3_Init+0x8e>
  {
    Error_Handler();
 8003ee6:	f7fe fe9f 	bl	8002c28 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003eea:	2300      	movs	r3, #0
 8003eec:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003eee:	2300      	movs	r3, #0
 8003ef0:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003ef2:	f107 0314 	add.w	r3, r7, #20
 8003ef6:	4619      	mov	r1, r3
 8003ef8:	480f      	ldr	r0, [pc, #60]	; (8003f38 <MX_TIM3_Init+0xdc>)
 8003efa:	f007 ff31 	bl	800bd60 <HAL_TIMEx_MasterConfigSynchronization>
 8003efe:	4603      	mov	r3, r0
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d001      	beq.n	8003f08 <MX_TIM3_Init+0xac>
  {
    Error_Handler();
 8003f04:	f7fe fe90 	bl	8002c28 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8003f08:	2300      	movs	r3, #0
 8003f0a:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8003f0c:	2301      	movs	r3, #1
 8003f0e:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8003f10:	2300      	movs	r3, #0
 8003f12:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8003f14:	2300      	movs	r3, #0
 8003f16:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8003f18:	1d3b      	adds	r3, r7, #4
 8003f1a:	2200      	movs	r2, #0
 8003f1c:	4619      	mov	r1, r3
 8003f1e:	4806      	ldr	r0, [pc, #24]	; (8003f38 <MX_TIM3_Init+0xdc>)
 8003f20:	f006 fef9 	bl	800ad16 <HAL_TIM_IC_ConfigChannel>
 8003f24:	4603      	mov	r3, r0
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d001      	beq.n	8003f2e <MX_TIM3_Init+0xd2>
  {
    Error_Handler();
 8003f2a:	f7fe fe7d 	bl	8002c28 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8003f2e:	bf00      	nop
 8003f30:	3730      	adds	r7, #48	; 0x30
 8003f32:	46bd      	mov	sp, r7
 8003f34:	bd80      	pop	{r7, pc}
 8003f36:	bf00      	nop
 8003f38:	24000614 	.word	0x24000614
 8003f3c:	40000400 	.word	0x40000400

08003f40 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8003f40:	b580      	push	{r7, lr}
 8003f42:	b08c      	sub	sp, #48	; 0x30
 8003f44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003f46:	f107 0320 	add.w	r3, r7, #32
 8003f4a:	2200      	movs	r2, #0
 8003f4c:	601a      	str	r2, [r3, #0]
 8003f4e:	605a      	str	r2, [r3, #4]
 8003f50:	609a      	str	r2, [r3, #8]
 8003f52:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003f54:	f107 0314 	add.w	r3, r7, #20
 8003f58:	2200      	movs	r2, #0
 8003f5a:	601a      	str	r2, [r3, #0]
 8003f5c:	605a      	str	r2, [r3, #4]
 8003f5e:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8003f60:	1d3b      	adds	r3, r7, #4
 8003f62:	2200      	movs	r2, #0
 8003f64:	601a      	str	r2, [r3, #0]
 8003f66:	605a      	str	r2, [r3, #4]
 8003f68:	609a      	str	r2, [r3, #8]
 8003f6a:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8003f6c:	4b2b      	ldr	r3, [pc, #172]	; (800401c <MX_TIM4_Init+0xdc>)
 8003f6e:	4a2c      	ldr	r2, [pc, #176]	; (8004020 <MX_TIM4_Init+0xe0>)
 8003f70:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8003f72:	4b2a      	ldr	r3, [pc, #168]	; (800401c <MX_TIM4_Init+0xdc>)
 8003f74:	2200      	movs	r2, #0
 8003f76:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003f78:	4b28      	ldr	r3, [pc, #160]	; (800401c <MX_TIM4_Init+0xdc>)
 8003f7a:	2200      	movs	r2, #0
 8003f7c:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8003f7e:	4b27      	ldr	r3, [pc, #156]	; (800401c <MX_TIM4_Init+0xdc>)
 8003f80:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003f84:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003f86:	4b25      	ldr	r3, [pc, #148]	; (800401c <MX_TIM4_Init+0xdc>)
 8003f88:	2200      	movs	r2, #0
 8003f8a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003f8c:	4b23      	ldr	r3, [pc, #140]	; (800401c <MX_TIM4_Init+0xdc>)
 8003f8e:	2200      	movs	r2, #0
 8003f90:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8003f92:	4822      	ldr	r0, [pc, #136]	; (800401c <MX_TIM4_Init+0xdc>)
 8003f94:	f005 ffe2 	bl	8009f5c <HAL_TIM_Base_Init>
 8003f98:	4603      	mov	r3, r0
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d001      	beq.n	8003fa2 <MX_TIM4_Init+0x62>
  {
    Error_Handler();
 8003f9e:	f7fe fe43 	bl	8002c28 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003fa2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003fa6:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8003fa8:	f107 0320 	add.w	r3, r7, #32
 8003fac:	4619      	mov	r1, r3
 8003fae:	481b      	ldr	r0, [pc, #108]	; (800401c <MX_TIM4_Init+0xdc>)
 8003fb0:	f007 f862 	bl	800b078 <HAL_TIM_ConfigClockSource>
 8003fb4:	4603      	mov	r3, r0
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d001      	beq.n	8003fbe <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 8003fba:	f7fe fe35 	bl	8002c28 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim4) != HAL_OK)
 8003fbe:	4817      	ldr	r0, [pc, #92]	; (800401c <MX_TIM4_Init+0xdc>)
 8003fc0:	f006 fb68 	bl	800a694 <HAL_TIM_IC_Init>
 8003fc4:	4603      	mov	r3, r0
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d001      	beq.n	8003fce <MX_TIM4_Init+0x8e>
  {
    Error_Handler();
 8003fca:	f7fe fe2d 	bl	8002c28 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003fce:	2300      	movs	r3, #0
 8003fd0:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003fd2:	2300      	movs	r3, #0
 8003fd4:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8003fd6:	f107 0314 	add.w	r3, r7, #20
 8003fda:	4619      	mov	r1, r3
 8003fdc:	480f      	ldr	r0, [pc, #60]	; (800401c <MX_TIM4_Init+0xdc>)
 8003fde:	f007 febf 	bl	800bd60 <HAL_TIMEx_MasterConfigSynchronization>
 8003fe2:	4603      	mov	r3, r0
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d001      	beq.n	8003fec <MX_TIM4_Init+0xac>
  {
    Error_Handler();
 8003fe8:	f7fe fe1e 	bl	8002c28 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8003fec:	2300      	movs	r3, #0
 8003fee:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8003ff0:	2301      	movs	r3, #1
 8003ff2:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8003ff4:	2300      	movs	r3, #0
 8003ff6:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8003ff8:	2300      	movs	r3, #0
 8003ffa:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8003ffc:	1d3b      	adds	r3, r7, #4
 8003ffe:	2200      	movs	r2, #0
 8004000:	4619      	mov	r1, r3
 8004002:	4806      	ldr	r0, [pc, #24]	; (800401c <MX_TIM4_Init+0xdc>)
 8004004:	f006 fe87 	bl	800ad16 <HAL_TIM_IC_ConfigChannel>
 8004008:	4603      	mov	r3, r0
 800400a:	2b00      	cmp	r3, #0
 800400c:	d001      	beq.n	8004012 <MX_TIM4_Init+0xd2>
  {
    Error_Handler();
 800400e:	f7fe fe0b 	bl	8002c28 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8004012:	bf00      	nop
 8004014:	3730      	adds	r7, #48	; 0x30
 8004016:	46bd      	mov	sp, r7
 8004018:	bd80      	pop	{r7, pc}
 800401a:	bf00      	nop
 800401c:	24000660 	.word	0x24000660
 8004020:	40000800 	.word	0x40000800

08004024 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8004024:	b580      	push	{r7, lr}
 8004026:	b088      	sub	sp, #32
 8004028:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800402a:	f107 0310 	add.w	r3, r7, #16
 800402e:	2200      	movs	r2, #0
 8004030:	601a      	str	r2, [r3, #0]
 8004032:	605a      	str	r2, [r3, #4]
 8004034:	609a      	str	r2, [r3, #8]
 8004036:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004038:	1d3b      	adds	r3, r7, #4
 800403a:	2200      	movs	r2, #0
 800403c:	601a      	str	r2, [r3, #0]
 800403e:	605a      	str	r2, [r3, #4]
 8004040:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8004042:	4b1d      	ldr	r3, [pc, #116]	; (80040b8 <MX_TIM5_Init+0x94>)
 8004044:	4a1d      	ldr	r2, [pc, #116]	; (80040bc <MX_TIM5_Init+0x98>)
 8004046:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8004048:	4b1b      	ldr	r3, [pc, #108]	; (80040b8 <MX_TIM5_Init+0x94>)
 800404a:	2200      	movs	r2, #0
 800404c:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800404e:	4b1a      	ldr	r3, [pc, #104]	; (80040b8 <MX_TIM5_Init+0x94>)
 8004050:	2200      	movs	r2, #0
 8004052:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8004054:	4b18      	ldr	r3, [pc, #96]	; (80040b8 <MX_TIM5_Init+0x94>)
 8004056:	f04f 32ff 	mov.w	r2, #4294967295
 800405a:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800405c:	4b16      	ldr	r3, [pc, #88]	; (80040b8 <MX_TIM5_Init+0x94>)
 800405e:	2200      	movs	r2, #0
 8004060:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004062:	4b15      	ldr	r3, [pc, #84]	; (80040b8 <MX_TIM5_Init+0x94>)
 8004064:	2200      	movs	r2, #0
 8004066:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8004068:	4813      	ldr	r0, [pc, #76]	; (80040b8 <MX_TIM5_Init+0x94>)
 800406a:	f005 ff77 	bl	8009f5c <HAL_TIM_Base_Init>
 800406e:	4603      	mov	r3, r0
 8004070:	2b00      	cmp	r3, #0
 8004072:	d001      	beq.n	8004078 <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 8004074:	f7fe fdd8 	bl	8002c28 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004078:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800407c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 800407e:	f107 0310 	add.w	r3, r7, #16
 8004082:	4619      	mov	r1, r3
 8004084:	480c      	ldr	r0, [pc, #48]	; (80040b8 <MX_TIM5_Init+0x94>)
 8004086:	f006 fff7 	bl	800b078 <HAL_TIM_ConfigClockSource>
 800408a:	4603      	mov	r3, r0
 800408c:	2b00      	cmp	r3, #0
 800408e:	d001      	beq.n	8004094 <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 8004090:	f7fe fdca 	bl	8002c28 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004094:	2300      	movs	r3, #0
 8004096:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004098:	2300      	movs	r3, #0
 800409a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800409c:	1d3b      	adds	r3, r7, #4
 800409e:	4619      	mov	r1, r3
 80040a0:	4805      	ldr	r0, [pc, #20]	; (80040b8 <MX_TIM5_Init+0x94>)
 80040a2:	f007 fe5d 	bl	800bd60 <HAL_TIMEx_MasterConfigSynchronization>
 80040a6:	4603      	mov	r3, r0
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d001      	beq.n	80040b0 <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 80040ac:	f7fe fdbc 	bl	8002c28 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 80040b0:	bf00      	nop
 80040b2:	3720      	adds	r7, #32
 80040b4:	46bd      	mov	sp, r7
 80040b6:	bd80      	pop	{r7, pc}
 80040b8:	240006ac 	.word	0x240006ac
 80040bc:	40000c00 	.word	0x40000c00

080040c0 <MX_TIM12_Init>:
/* TIM12 init function */
void MX_TIM12_Init(void)
{
 80040c0:	b580      	push	{r7, lr}
 80040c2:	b08c      	sub	sp, #48	; 0x30
 80040c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80040c6:	f107 0320 	add.w	r3, r7, #32
 80040ca:	2200      	movs	r2, #0
 80040cc:	601a      	str	r2, [r3, #0]
 80040ce:	605a      	str	r2, [r3, #4]
 80040d0:	609a      	str	r2, [r3, #8]
 80040d2:	60da      	str	r2, [r3, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80040d4:	1d3b      	adds	r3, r7, #4
 80040d6:	2200      	movs	r2, #0
 80040d8:	601a      	str	r2, [r3, #0]
 80040da:	605a      	str	r2, [r3, #4]
 80040dc:	609a      	str	r2, [r3, #8]
 80040de:	60da      	str	r2, [r3, #12]
 80040e0:	611a      	str	r2, [r3, #16]
 80040e2:	615a      	str	r2, [r3, #20]
 80040e4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 80040e6:	4b25      	ldr	r3, [pc, #148]	; (800417c <MX_TIM12_Init+0xbc>)
 80040e8:	4a25      	ldr	r2, [pc, #148]	; (8004180 <MX_TIM12_Init+0xc0>)
 80040ea:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 64-1;
 80040ec:	4b23      	ldr	r3, [pc, #140]	; (800417c <MX_TIM12_Init+0xbc>)
 80040ee:	223f      	movs	r2, #63	; 0x3f
 80040f0:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 80040f2:	4b22      	ldr	r3, [pc, #136]	; (800417c <MX_TIM12_Init+0xbc>)
 80040f4:	2200      	movs	r2, #0
 80040f6:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 0;
 80040f8:	4b20      	ldr	r3, [pc, #128]	; (800417c <MX_TIM12_Init+0xbc>)
 80040fa:	2200      	movs	r2, #0
 80040fc:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80040fe:	4b1f      	ldr	r3, [pc, #124]	; (800417c <MX_TIM12_Init+0xbc>)
 8004100:	2200      	movs	r2, #0
 8004102:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004104:	4b1d      	ldr	r3, [pc, #116]	; (800417c <MX_TIM12_Init+0xbc>)
 8004106:	2200      	movs	r2, #0
 8004108:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim12) != HAL_OK)
 800410a:	481c      	ldr	r0, [pc, #112]	; (800417c <MX_TIM12_Init+0xbc>)
 800410c:	f005 ff26 	bl	8009f5c <HAL_TIM_Base_Init>
 8004110:	4603      	mov	r3, r0
 8004112:	2b00      	cmp	r3, #0
 8004114:	d001      	beq.n	800411a <MX_TIM12_Init+0x5a>
  {
    Error_Handler();
 8004116:	f7fe fd87 	bl	8002c28 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800411a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800411e:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim12, &sClockSourceConfig) != HAL_OK)
 8004120:	f107 0320 	add.w	r3, r7, #32
 8004124:	4619      	mov	r1, r3
 8004126:	4815      	ldr	r0, [pc, #84]	; (800417c <MX_TIM12_Init+0xbc>)
 8004128:	f006 ffa6 	bl	800b078 <HAL_TIM_ConfigClockSource>
 800412c:	4603      	mov	r3, r0
 800412e:	2b00      	cmp	r3, #0
 8004130:	d001      	beq.n	8004136 <MX_TIM12_Init+0x76>
  {
    Error_Handler();
 8004132:	f7fe fd79 	bl	8002c28 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 8004136:	4811      	ldr	r0, [pc, #68]	; (800417c <MX_TIM12_Init+0xbc>)
 8004138:	f006 f8a7 	bl	800a28a <HAL_TIM_PWM_Init>
 800413c:	4603      	mov	r3, r0
 800413e:	2b00      	cmp	r3, #0
 8004140:	d001      	beq.n	8004146 <MX_TIM12_Init+0x86>
  {
    Error_Handler();
 8004142:	f7fe fd71 	bl	8002c28 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004146:	2360      	movs	r3, #96	; 0x60
 8004148:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800414a:	2300      	movs	r3, #0
 800414c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800414e:	2300      	movs	r3, #0
 8004150:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004152:	2300      	movs	r3, #0
 8004154:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004156:	1d3b      	adds	r3, r7, #4
 8004158:	2200      	movs	r2, #0
 800415a:	4619      	mov	r1, r3
 800415c:	4807      	ldr	r0, [pc, #28]	; (800417c <MX_TIM12_Init+0xbc>)
 800415e:	f006 fe77 	bl	800ae50 <HAL_TIM_PWM_ConfigChannel>
 8004162:	4603      	mov	r3, r0
 8004164:	2b00      	cmp	r3, #0
 8004166:	d001      	beq.n	800416c <MX_TIM12_Init+0xac>
  {
    Error_Handler();
 8004168:	f7fe fd5e 	bl	8002c28 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 800416c:	4803      	ldr	r0, [pc, #12]	; (800417c <MX_TIM12_Init+0xbc>)
 800416e:	f000 fa3d 	bl	80045ec <HAL_TIM_MspPostInit>

}
 8004172:	bf00      	nop
 8004174:	3730      	adds	r7, #48	; 0x30
 8004176:	46bd      	mov	sp, r7
 8004178:	bd80      	pop	{r7, pc}
 800417a:	bf00      	nop
 800417c:	240006f8 	.word	0x240006f8
 8004180:	40001800 	.word	0x40001800

08004184 <MX_TIM13_Init>:
/* TIM13 init function */
void MX_TIM13_Init(void)
{
 8004184:	b580      	push	{r7, lr}
 8004186:	b088      	sub	sp, #32
 8004188:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM13_Init 0 */

  /* USER CODE END TIM13_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800418a:	1d3b      	adds	r3, r7, #4
 800418c:	2200      	movs	r2, #0
 800418e:	601a      	str	r2, [r3, #0]
 8004190:	605a      	str	r2, [r3, #4]
 8004192:	609a      	str	r2, [r3, #8]
 8004194:	60da      	str	r2, [r3, #12]
 8004196:	611a      	str	r2, [r3, #16]
 8004198:	615a      	str	r2, [r3, #20]
 800419a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 800419c:	4b1d      	ldr	r3, [pc, #116]	; (8004214 <MX_TIM13_Init+0x90>)
 800419e:	4a1e      	ldr	r2, [pc, #120]	; (8004218 <MX_TIM13_Init+0x94>)
 80041a0:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 64-1;
 80041a2:	4b1c      	ldr	r3, [pc, #112]	; (8004214 <MX_TIM13_Init+0x90>)
 80041a4:	223f      	movs	r2, #63	; 0x3f
 80041a6:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 80041a8:	4b1a      	ldr	r3, [pc, #104]	; (8004214 <MX_TIM13_Init+0x90>)
 80041aa:	2200      	movs	r2, #0
 80041ac:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 0;
 80041ae:	4b19      	ldr	r3, [pc, #100]	; (8004214 <MX_TIM13_Init+0x90>)
 80041b0:	2200      	movs	r2, #0
 80041b2:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80041b4:	4b17      	ldr	r3, [pc, #92]	; (8004214 <MX_TIM13_Init+0x90>)
 80041b6:	2200      	movs	r2, #0
 80041b8:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80041ba:	4b16      	ldr	r3, [pc, #88]	; (8004214 <MX_TIM13_Init+0x90>)
 80041bc:	2200      	movs	r2, #0
 80041be:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 80041c0:	4814      	ldr	r0, [pc, #80]	; (8004214 <MX_TIM13_Init+0x90>)
 80041c2:	f005 fecb 	bl	8009f5c <HAL_TIM_Base_Init>
 80041c6:	4603      	mov	r3, r0
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d001      	beq.n	80041d0 <MX_TIM13_Init+0x4c>
  {
    Error_Handler();
 80041cc:	f7fe fd2c 	bl	8002c28 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim13) != HAL_OK)
 80041d0:	4810      	ldr	r0, [pc, #64]	; (8004214 <MX_TIM13_Init+0x90>)
 80041d2:	f006 f85a 	bl	800a28a <HAL_TIM_PWM_Init>
 80041d6:	4603      	mov	r3, r0
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d001      	beq.n	80041e0 <MX_TIM13_Init+0x5c>
  {
    Error_Handler();
 80041dc:	f7fe fd24 	bl	8002c28 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80041e0:	2360      	movs	r3, #96	; 0x60
 80041e2:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80041e4:	2300      	movs	r3, #0
 80041e6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80041e8:	2300      	movs	r3, #0
 80041ea:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80041ec:	2300      	movs	r3, #0
 80041ee:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim13, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80041f0:	1d3b      	adds	r3, r7, #4
 80041f2:	2200      	movs	r2, #0
 80041f4:	4619      	mov	r1, r3
 80041f6:	4807      	ldr	r0, [pc, #28]	; (8004214 <MX_TIM13_Init+0x90>)
 80041f8:	f006 fe2a 	bl	800ae50 <HAL_TIM_PWM_ConfigChannel>
 80041fc:	4603      	mov	r3, r0
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d001      	beq.n	8004206 <MX_TIM13_Init+0x82>
  {
    Error_Handler();
 8004202:	f7fe fd11 	bl	8002c28 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */
  HAL_TIM_MspPostInit(&htim13);
 8004206:	4803      	ldr	r0, [pc, #12]	; (8004214 <MX_TIM13_Init+0x90>)
 8004208:	f000 f9f0 	bl	80045ec <HAL_TIM_MspPostInit>

}
 800420c:	bf00      	nop
 800420e:	3720      	adds	r7, #32
 8004210:	46bd      	mov	sp, r7
 8004212:	bd80      	pop	{r7, pc}
 8004214:	24000744 	.word	0x24000744
 8004218:	40001c00 	.word	0x40001c00

0800421c <MX_TIM14_Init>:
/* TIM14 init function */
void MX_TIM14_Init(void)
{
 800421c:	b580      	push	{r7, lr}
 800421e:	b088      	sub	sp, #32
 8004220:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM14_Init 0 */

  /* USER CODE END TIM14_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8004222:	1d3b      	adds	r3, r7, #4
 8004224:	2200      	movs	r2, #0
 8004226:	601a      	str	r2, [r3, #0]
 8004228:	605a      	str	r2, [r3, #4]
 800422a:	609a      	str	r2, [r3, #8]
 800422c:	60da      	str	r2, [r3, #12]
 800422e:	611a      	str	r2, [r3, #16]
 8004230:	615a      	str	r2, [r3, #20]
 8004232:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8004234:	4b1d      	ldr	r3, [pc, #116]	; (80042ac <MX_TIM14_Init+0x90>)
 8004236:	4a1e      	ldr	r2, [pc, #120]	; (80042b0 <MX_TIM14_Init+0x94>)
 8004238:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 64-1;
 800423a:	4b1c      	ldr	r3, [pc, #112]	; (80042ac <MX_TIM14_Init+0x90>)
 800423c:	223f      	movs	r2, #63	; 0x3f
 800423e:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004240:	4b1a      	ldr	r3, [pc, #104]	; (80042ac <MX_TIM14_Init+0x90>)
 8004242:	2200      	movs	r2, #0
 8004244:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 0;
 8004246:	4b19      	ldr	r3, [pc, #100]	; (80042ac <MX_TIM14_Init+0x90>)
 8004248:	2200      	movs	r2, #0
 800424a:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800424c:	4b17      	ldr	r3, [pc, #92]	; (80042ac <MX_TIM14_Init+0x90>)
 800424e:	2200      	movs	r2, #0
 8004250:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004252:	4b16      	ldr	r3, [pc, #88]	; (80042ac <MX_TIM14_Init+0x90>)
 8004254:	2200      	movs	r2, #0
 8004256:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8004258:	4814      	ldr	r0, [pc, #80]	; (80042ac <MX_TIM14_Init+0x90>)
 800425a:	f005 fe7f 	bl	8009f5c <HAL_TIM_Base_Init>
 800425e:	4603      	mov	r3, r0
 8004260:	2b00      	cmp	r3, #0
 8004262:	d001      	beq.n	8004268 <MX_TIM14_Init+0x4c>
  {
    Error_Handler();
 8004264:	f7fe fce0 	bl	8002c28 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim14) != HAL_OK)
 8004268:	4810      	ldr	r0, [pc, #64]	; (80042ac <MX_TIM14_Init+0x90>)
 800426a:	f006 f80e 	bl	800a28a <HAL_TIM_PWM_Init>
 800426e:	4603      	mov	r3, r0
 8004270:	2b00      	cmp	r3, #0
 8004272:	d001      	beq.n	8004278 <MX_TIM14_Init+0x5c>
  {
    Error_Handler();
 8004274:	f7fe fcd8 	bl	8002c28 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004278:	2360      	movs	r3, #96	; 0x60
 800427a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800427c:	2300      	movs	r3, #0
 800427e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004280:	2300      	movs	r3, #0
 8004282:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004284:	2300      	movs	r3, #0
 8004286:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim14, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004288:	1d3b      	adds	r3, r7, #4
 800428a:	2200      	movs	r2, #0
 800428c:	4619      	mov	r1, r3
 800428e:	4807      	ldr	r0, [pc, #28]	; (80042ac <MX_TIM14_Init+0x90>)
 8004290:	f006 fdde 	bl	800ae50 <HAL_TIM_PWM_ConfigChannel>
 8004294:	4603      	mov	r3, r0
 8004296:	2b00      	cmp	r3, #0
 8004298:	d001      	beq.n	800429e <MX_TIM14_Init+0x82>
  {
    Error_Handler();
 800429a:	f7fe fcc5 	bl	8002c28 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */
  HAL_TIM_MspPostInit(&htim14);
 800429e:	4803      	ldr	r0, [pc, #12]	; (80042ac <MX_TIM14_Init+0x90>)
 80042a0:	f000 f9a4 	bl	80045ec <HAL_TIM_MspPostInit>

}
 80042a4:	bf00      	nop
 80042a6:	3720      	adds	r7, #32
 80042a8:	46bd      	mov	sp, r7
 80042aa:	bd80      	pop	{r7, pc}
 80042ac:	24000790 	.word	0x24000790
 80042b0:	40002000 	.word	0x40002000

080042b4 <MX_TIM15_Init>:
/* TIM15 init function */
void MX_TIM15_Init(void)
{
 80042b4:	b580      	push	{r7, lr}
 80042b6:	b088      	sub	sp, #32
 80042b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80042ba:	f107 0310 	add.w	r3, r7, #16
 80042be:	2200      	movs	r2, #0
 80042c0:	601a      	str	r2, [r3, #0]
 80042c2:	605a      	str	r2, [r3, #4]
 80042c4:	609a      	str	r2, [r3, #8]
 80042c6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80042c8:	1d3b      	adds	r3, r7, #4
 80042ca:	2200      	movs	r2, #0
 80042cc:	601a      	str	r2, [r3, #0]
 80042ce:	605a      	str	r2, [r3, #4]
 80042d0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 80042d2:	4b1f      	ldr	r3, [pc, #124]	; (8004350 <MX_TIM15_Init+0x9c>)
 80042d4:	4a1f      	ldr	r2, [pc, #124]	; (8004354 <MX_TIM15_Init+0xa0>)
 80042d6:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 0;
 80042d8:	4b1d      	ldr	r3, [pc, #116]	; (8004350 <MX_TIM15_Init+0x9c>)
 80042da:	2200      	movs	r2, #0
 80042dc:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 80042de:	4b1c      	ldr	r3, [pc, #112]	; (8004350 <MX_TIM15_Init+0x9c>)
 80042e0:	2200      	movs	r2, #0
 80042e2:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 64000;
 80042e4:	4b1a      	ldr	r3, [pc, #104]	; (8004350 <MX_TIM15_Init+0x9c>)
 80042e6:	f44f 427a 	mov.w	r2, #64000	; 0xfa00
 80042ea:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80042ec:	4b18      	ldr	r3, [pc, #96]	; (8004350 <MX_TIM15_Init+0x9c>)
 80042ee:	2200      	movs	r2, #0
 80042f0:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 80042f2:	4b17      	ldr	r3, [pc, #92]	; (8004350 <MX_TIM15_Init+0x9c>)
 80042f4:	2200      	movs	r2, #0
 80042f6:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80042f8:	4b15      	ldr	r3, [pc, #84]	; (8004350 <MX_TIM15_Init+0x9c>)
 80042fa:	2200      	movs	r2, #0
 80042fc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 80042fe:	4814      	ldr	r0, [pc, #80]	; (8004350 <MX_TIM15_Init+0x9c>)
 8004300:	f005 fe2c 	bl	8009f5c <HAL_TIM_Base_Init>
 8004304:	4603      	mov	r3, r0
 8004306:	2b00      	cmp	r3, #0
 8004308:	d001      	beq.n	800430e <MX_TIM15_Init+0x5a>
  {
    Error_Handler();
 800430a:	f7fe fc8d 	bl	8002c28 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800430e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004312:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 8004314:	f107 0310 	add.w	r3, r7, #16
 8004318:	4619      	mov	r1, r3
 800431a:	480d      	ldr	r0, [pc, #52]	; (8004350 <MX_TIM15_Init+0x9c>)
 800431c:	f006 feac 	bl	800b078 <HAL_TIM_ConfigClockSource>
 8004320:	4603      	mov	r3, r0
 8004322:	2b00      	cmp	r3, #0
 8004324:	d001      	beq.n	800432a <MX_TIM15_Init+0x76>
  {
    Error_Handler();
 8004326:	f7fe fc7f 	bl	8002c28 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800432a:	2300      	movs	r3, #0
 800432c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800432e:	2300      	movs	r3, #0
 8004330:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8004332:	1d3b      	adds	r3, r7, #4
 8004334:	4619      	mov	r1, r3
 8004336:	4806      	ldr	r0, [pc, #24]	; (8004350 <MX_TIM15_Init+0x9c>)
 8004338:	f007 fd12 	bl	800bd60 <HAL_TIMEx_MasterConfigSynchronization>
 800433c:	4603      	mov	r3, r0
 800433e:	2b00      	cmp	r3, #0
 8004340:	d001      	beq.n	8004346 <MX_TIM15_Init+0x92>
  {
    Error_Handler();
 8004342:	f7fe fc71 	bl	8002c28 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */

}
 8004346:	bf00      	nop
 8004348:	3720      	adds	r7, #32
 800434a:	46bd      	mov	sp, r7
 800434c:	bd80      	pop	{r7, pc}
 800434e:	bf00      	nop
 8004350:	240007dc 	.word	0x240007dc
 8004354:	40014000 	.word	0x40014000

08004358 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8004358:	b580      	push	{r7, lr}
 800435a:	b092      	sub	sp, #72	; 0x48
 800435c:	af00      	add	r7, sp, #0
 800435e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004360:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8004364:	2200      	movs	r2, #0
 8004366:	601a      	str	r2, [r3, #0]
 8004368:	605a      	str	r2, [r3, #4]
 800436a:	609a      	str	r2, [r3, #8]
 800436c:	60da      	str	r2, [r3, #12]
 800436e:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM2)
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004378:	d136      	bne.n	80043e8 <HAL_TIM_Base_MspInit+0x90>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800437a:	4b92      	ldr	r3, [pc, #584]	; (80045c4 <HAL_TIM_Base_MspInit+0x26c>)
 800437c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004380:	4a90      	ldr	r2, [pc, #576]	; (80045c4 <HAL_TIM_Base_MspInit+0x26c>)
 8004382:	f043 0301 	orr.w	r3, r3, #1
 8004386:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800438a:	4b8e      	ldr	r3, [pc, #568]	; (80045c4 <HAL_TIM_Base_MspInit+0x26c>)
 800438c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004390:	f003 0301 	and.w	r3, r3, #1
 8004394:	633b      	str	r3, [r7, #48]	; 0x30
 8004396:	6b3b      	ldr	r3, [r7, #48]	; 0x30

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004398:	4b8a      	ldr	r3, [pc, #552]	; (80045c4 <HAL_TIM_Base_MspInit+0x26c>)
 800439a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800439e:	4a89      	ldr	r2, [pc, #548]	; (80045c4 <HAL_TIM_Base_MspInit+0x26c>)
 80043a0:	f043 0301 	orr.w	r3, r3, #1
 80043a4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80043a8:	4b86      	ldr	r3, [pc, #536]	; (80045c4 <HAL_TIM_Base_MspInit+0x26c>)
 80043aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80043ae:	f003 0301 	and.w	r3, r3, #1
 80043b2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80043b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = stepFeedback1_Pin;
 80043b6:	2301      	movs	r3, #1
 80043b8:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80043ba:	2302      	movs	r3, #2
 80043bc:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80043be:	2300      	movs	r3, #0
 80043c0:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80043c2:	2300      	movs	r3, #0
 80043c4:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80043c6:	2301      	movs	r3, #1
 80043c8:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(stepFeedback1_GPIO_Port, &GPIO_InitStruct);
 80043ca:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80043ce:	4619      	mov	r1, r3
 80043d0:	487d      	ldr	r0, [pc, #500]	; (80045c8 <HAL_TIM_Base_MspInit+0x270>)
 80043d2:	f003 f86b 	bl	80074ac <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 1, 0);
 80043d6:	2200      	movs	r2, #0
 80043d8:	2101      	movs	r1, #1
 80043da:	201c      	movs	r0, #28
 80043dc:	f002 fabf 	bl	800695e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80043e0:	201c      	movs	r0, #28
 80043e2:	f002 fad6 	bl	8006992 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM15_IRQn);
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }
}
 80043e6:	e0e8      	b.n	80045ba <HAL_TIM_Base_MspInit+0x262>
  else if(tim_baseHandle->Instance==TIM3)
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	4a77      	ldr	r2, [pc, #476]	; (80045cc <HAL_TIM_Base_MspInit+0x274>)
 80043ee:	4293      	cmp	r3, r2
 80043f0:	d136      	bne.n	8004460 <HAL_TIM_Base_MspInit+0x108>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80043f2:	4b74      	ldr	r3, [pc, #464]	; (80045c4 <HAL_TIM_Base_MspInit+0x26c>)
 80043f4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80043f8:	4a72      	ldr	r2, [pc, #456]	; (80045c4 <HAL_TIM_Base_MspInit+0x26c>)
 80043fa:	f043 0302 	orr.w	r3, r3, #2
 80043fe:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8004402:	4b70      	ldr	r3, [pc, #448]	; (80045c4 <HAL_TIM_Base_MspInit+0x26c>)
 8004404:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004408:	f003 0302 	and.w	r3, r3, #2
 800440c:	62bb      	str	r3, [r7, #40]	; 0x28
 800440e:	6abb      	ldr	r3, [r7, #40]	; 0x28
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004410:	4b6c      	ldr	r3, [pc, #432]	; (80045c4 <HAL_TIM_Base_MspInit+0x26c>)
 8004412:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004416:	4a6b      	ldr	r2, [pc, #428]	; (80045c4 <HAL_TIM_Base_MspInit+0x26c>)
 8004418:	f043 0301 	orr.w	r3, r3, #1
 800441c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004420:	4b68      	ldr	r3, [pc, #416]	; (80045c4 <HAL_TIM_Base_MspInit+0x26c>)
 8004422:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004426:	f003 0301 	and.w	r3, r3, #1
 800442a:	627b      	str	r3, [r7, #36]	; 0x24
 800442c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pin = stepFeedback2_Pin;
 800442e:	2340      	movs	r3, #64	; 0x40
 8004430:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004432:	2302      	movs	r3, #2
 8004434:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004436:	2300      	movs	r3, #0
 8004438:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800443a:	2300      	movs	r3, #0
 800443c:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800443e:	2302      	movs	r3, #2
 8004440:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(stepFeedback2_GPIO_Port, &GPIO_InitStruct);
 8004442:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8004446:	4619      	mov	r1, r3
 8004448:	485f      	ldr	r0, [pc, #380]	; (80045c8 <HAL_TIM_Base_MspInit+0x270>)
 800444a:	f003 f82f 	bl	80074ac <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM3_IRQn, 1, 0);
 800444e:	2200      	movs	r2, #0
 8004450:	2101      	movs	r1, #1
 8004452:	201d      	movs	r0, #29
 8004454:	f002 fa83 	bl	800695e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8004458:	201d      	movs	r0, #29
 800445a:	f002 fa9a 	bl	8006992 <HAL_NVIC_EnableIRQ>
}
 800445e:	e0ac      	b.n	80045ba <HAL_TIM_Base_MspInit+0x262>
  else if(tim_baseHandle->Instance==TIM4)
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	4a5a      	ldr	r2, [pc, #360]	; (80045d0 <HAL_TIM_Base_MspInit+0x278>)
 8004466:	4293      	cmp	r3, r2
 8004468:	d137      	bne.n	80044da <HAL_TIM_Base_MspInit+0x182>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800446a:	4b56      	ldr	r3, [pc, #344]	; (80045c4 <HAL_TIM_Base_MspInit+0x26c>)
 800446c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004470:	4a54      	ldr	r2, [pc, #336]	; (80045c4 <HAL_TIM_Base_MspInit+0x26c>)
 8004472:	f043 0304 	orr.w	r3, r3, #4
 8004476:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800447a:	4b52      	ldr	r3, [pc, #328]	; (80045c4 <HAL_TIM_Base_MspInit+0x26c>)
 800447c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004480:	f003 0304 	and.w	r3, r3, #4
 8004484:	623b      	str	r3, [r7, #32]
 8004486:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8004488:	4b4e      	ldr	r3, [pc, #312]	; (80045c4 <HAL_TIM_Base_MspInit+0x26c>)
 800448a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800448e:	4a4d      	ldr	r2, [pc, #308]	; (80045c4 <HAL_TIM_Base_MspInit+0x26c>)
 8004490:	f043 0308 	orr.w	r3, r3, #8
 8004494:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004498:	4b4a      	ldr	r3, [pc, #296]	; (80045c4 <HAL_TIM_Base_MspInit+0x26c>)
 800449a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800449e:	f003 0308 	and.w	r3, r3, #8
 80044a2:	61fb      	str	r3, [r7, #28]
 80044a4:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = stepFeedback3_Pin;
 80044a6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80044aa:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80044ac:	2302      	movs	r3, #2
 80044ae:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80044b0:	2300      	movs	r3, #0
 80044b2:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80044b4:	2300      	movs	r3, #0
 80044b6:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80044b8:	2302      	movs	r3, #2
 80044ba:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(stepFeedback3_GPIO_Port, &GPIO_InitStruct);
 80044bc:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80044c0:	4619      	mov	r1, r3
 80044c2:	4844      	ldr	r0, [pc, #272]	; (80045d4 <HAL_TIM_Base_MspInit+0x27c>)
 80044c4:	f002 fff2 	bl	80074ac <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 1, 0);
 80044c8:	2200      	movs	r2, #0
 80044ca:	2101      	movs	r1, #1
 80044cc:	201e      	movs	r0, #30
 80044ce:	f002 fa46 	bl	800695e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80044d2:	201e      	movs	r0, #30
 80044d4:	f002 fa5d 	bl	8006992 <HAL_NVIC_EnableIRQ>
}
 80044d8:	e06f      	b.n	80045ba <HAL_TIM_Base_MspInit+0x262>
  else if(tim_baseHandle->Instance==TIM5)
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	4a3e      	ldr	r2, [pc, #248]	; (80045d8 <HAL_TIM_Base_MspInit+0x280>)
 80044e0:	4293      	cmp	r3, r2
 80044e2:	d10f      	bne.n	8004504 <HAL_TIM_Base_MspInit+0x1ac>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80044e4:	4b37      	ldr	r3, [pc, #220]	; (80045c4 <HAL_TIM_Base_MspInit+0x26c>)
 80044e6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80044ea:	4a36      	ldr	r2, [pc, #216]	; (80045c4 <HAL_TIM_Base_MspInit+0x26c>)
 80044ec:	f043 0308 	orr.w	r3, r3, #8
 80044f0:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80044f4:	4b33      	ldr	r3, [pc, #204]	; (80045c4 <HAL_TIM_Base_MspInit+0x26c>)
 80044f6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80044fa:	f003 0308 	and.w	r3, r3, #8
 80044fe:	61bb      	str	r3, [r7, #24]
 8004500:	69bb      	ldr	r3, [r7, #24]
}
 8004502:	e05a      	b.n	80045ba <HAL_TIM_Base_MspInit+0x262>
  else if(tim_baseHandle->Instance==TIM12)
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	4a34      	ldr	r2, [pc, #208]	; (80045dc <HAL_TIM_Base_MspInit+0x284>)
 800450a:	4293      	cmp	r3, r2
 800450c:	d10f      	bne.n	800452e <HAL_TIM_Base_MspInit+0x1d6>
    __HAL_RCC_TIM12_CLK_ENABLE();
 800450e:	4b2d      	ldr	r3, [pc, #180]	; (80045c4 <HAL_TIM_Base_MspInit+0x26c>)
 8004510:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004514:	4a2b      	ldr	r2, [pc, #172]	; (80045c4 <HAL_TIM_Base_MspInit+0x26c>)
 8004516:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800451a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800451e:	4b29      	ldr	r3, [pc, #164]	; (80045c4 <HAL_TIM_Base_MspInit+0x26c>)
 8004520:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004524:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004528:	617b      	str	r3, [r7, #20]
 800452a:	697b      	ldr	r3, [r7, #20]
}
 800452c:	e045      	b.n	80045ba <HAL_TIM_Base_MspInit+0x262>
  else if(tim_baseHandle->Instance==TIM13)
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	4a2b      	ldr	r2, [pc, #172]	; (80045e0 <HAL_TIM_Base_MspInit+0x288>)
 8004534:	4293      	cmp	r3, r2
 8004536:	d10f      	bne.n	8004558 <HAL_TIM_Base_MspInit+0x200>
    __HAL_RCC_TIM13_CLK_ENABLE();
 8004538:	4b22      	ldr	r3, [pc, #136]	; (80045c4 <HAL_TIM_Base_MspInit+0x26c>)
 800453a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800453e:	4a21      	ldr	r2, [pc, #132]	; (80045c4 <HAL_TIM_Base_MspInit+0x26c>)
 8004540:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004544:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8004548:	4b1e      	ldr	r3, [pc, #120]	; (80045c4 <HAL_TIM_Base_MspInit+0x26c>)
 800454a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800454e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004552:	613b      	str	r3, [r7, #16]
 8004554:	693b      	ldr	r3, [r7, #16]
}
 8004556:	e030      	b.n	80045ba <HAL_TIM_Base_MspInit+0x262>
  else if(tim_baseHandle->Instance==TIM14)
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	4a21      	ldr	r2, [pc, #132]	; (80045e4 <HAL_TIM_Base_MspInit+0x28c>)
 800455e:	4293      	cmp	r3, r2
 8004560:	d10f      	bne.n	8004582 <HAL_TIM_Base_MspInit+0x22a>
    __HAL_RCC_TIM14_CLK_ENABLE();
 8004562:	4b18      	ldr	r3, [pc, #96]	; (80045c4 <HAL_TIM_Base_MspInit+0x26c>)
 8004564:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004568:	4a16      	ldr	r2, [pc, #88]	; (80045c4 <HAL_TIM_Base_MspInit+0x26c>)
 800456a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800456e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8004572:	4b14      	ldr	r3, [pc, #80]	; (80045c4 <HAL_TIM_Base_MspInit+0x26c>)
 8004574:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004578:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800457c:	60fb      	str	r3, [r7, #12]
 800457e:	68fb      	ldr	r3, [r7, #12]
}
 8004580:	e01b      	b.n	80045ba <HAL_TIM_Base_MspInit+0x262>
  else if(tim_baseHandle->Instance==TIM15)
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	4a18      	ldr	r2, [pc, #96]	; (80045e8 <HAL_TIM_Base_MspInit+0x290>)
 8004588:	4293      	cmp	r3, r2
 800458a:	d116      	bne.n	80045ba <HAL_TIM_Base_MspInit+0x262>
    __HAL_RCC_TIM15_CLK_ENABLE();
 800458c:	4b0d      	ldr	r3, [pc, #52]	; (80045c4 <HAL_TIM_Base_MspInit+0x26c>)
 800458e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004592:	4a0c      	ldr	r2, [pc, #48]	; (80045c4 <HAL_TIM_Base_MspInit+0x26c>)
 8004594:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004598:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800459c:	4b09      	ldr	r3, [pc, #36]	; (80045c4 <HAL_TIM_Base_MspInit+0x26c>)
 800459e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80045a2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80045a6:	60bb      	str	r3, [r7, #8]
 80045a8:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM15_IRQn, 1, 0);
 80045aa:	2200      	movs	r2, #0
 80045ac:	2101      	movs	r1, #1
 80045ae:	2074      	movs	r0, #116	; 0x74
 80045b0:	f002 f9d5 	bl	800695e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM15_IRQn);
 80045b4:	2074      	movs	r0, #116	; 0x74
 80045b6:	f002 f9ec 	bl	8006992 <HAL_NVIC_EnableIRQ>
}
 80045ba:	bf00      	nop
 80045bc:	3748      	adds	r7, #72	; 0x48
 80045be:	46bd      	mov	sp, r7
 80045c0:	bd80      	pop	{r7, pc}
 80045c2:	bf00      	nop
 80045c4:	58024400 	.word	0x58024400
 80045c8:	58020000 	.word	0x58020000
 80045cc:	40000400 	.word	0x40000400
 80045d0:	40000800 	.word	0x40000800
 80045d4:	58020c00 	.word	0x58020c00
 80045d8:	40000c00 	.word	0x40000c00
 80045dc:	40001800 	.word	0x40001800
 80045e0:	40001c00 	.word	0x40001c00
 80045e4:	40002000 	.word	0x40002000
 80045e8:	40014000 	.word	0x40014000

080045ec <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80045ec:	b580      	push	{r7, lr}
 80045ee:	b08a      	sub	sp, #40	; 0x28
 80045f0:	af00      	add	r7, sp, #0
 80045f2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80045f4:	f107 0314 	add.w	r3, r7, #20
 80045f8:	2200      	movs	r2, #0
 80045fa:	601a      	str	r2, [r3, #0]
 80045fc:	605a      	str	r2, [r3, #4]
 80045fe:	609a      	str	r2, [r3, #8]
 8004600:	60da      	str	r2, [r3, #12]
 8004602:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM12)
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	4a39      	ldr	r2, [pc, #228]	; (80046f0 <HAL_TIM_MspPostInit+0x104>)
 800460a:	4293      	cmp	r3, r2
 800460c:	d120      	bne.n	8004650 <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM12_MspPostInit 0 */

  /* USER CODE END TIM12_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800460e:	4b39      	ldr	r3, [pc, #228]	; (80046f4 <HAL_TIM_MspPostInit+0x108>)
 8004610:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004614:	4a37      	ldr	r2, [pc, #220]	; (80046f4 <HAL_TIM_MspPostInit+0x108>)
 8004616:	f043 0302 	orr.w	r3, r3, #2
 800461a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800461e:	4b35      	ldr	r3, [pc, #212]	; (80046f4 <HAL_TIM_MspPostInit+0x108>)
 8004620:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004624:	f003 0302 	and.w	r3, r3, #2
 8004628:	613b      	str	r3, [r7, #16]
 800462a:	693b      	ldr	r3, [r7, #16]
    /**TIM12 GPIO Configuration
    PB14     ------> TIM12_CH1
    */
    GPIO_InitStruct.Pin = S_PulsoPaP1_Pin;
 800462c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004630:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004632:	2302      	movs	r3, #2
 8004634:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004636:	2300      	movs	r3, #0
 8004638:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800463a:	2300      	movs	r3, #0
 800463c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM12;
 800463e:	2302      	movs	r3, #2
 8004640:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(S_PulsoPaP1_GPIO_Port, &GPIO_InitStruct);
 8004642:	f107 0314 	add.w	r3, r7, #20
 8004646:	4619      	mov	r1, r3
 8004648:	482b      	ldr	r0, [pc, #172]	; (80046f8 <HAL_TIM_MspPostInit+0x10c>)
 800464a:	f002 ff2f 	bl	80074ac <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM14_MspPostInit 1 */

  /* USER CODE END TIM14_MspPostInit 1 */
  }

}
 800464e:	e04a      	b.n	80046e6 <HAL_TIM_MspPostInit+0xfa>
  else if(timHandle->Instance==TIM13)
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	4a29      	ldr	r2, [pc, #164]	; (80046fc <HAL_TIM_MspPostInit+0x110>)
 8004656:	4293      	cmp	r3, r2
 8004658:	d120      	bne.n	800469c <HAL_TIM_MspPostInit+0xb0>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800465a:	4b26      	ldr	r3, [pc, #152]	; (80046f4 <HAL_TIM_MspPostInit+0x108>)
 800465c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004660:	4a24      	ldr	r2, [pc, #144]	; (80046f4 <HAL_TIM_MspPostInit+0x108>)
 8004662:	f043 0320 	orr.w	r3, r3, #32
 8004666:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800466a:	4b22      	ldr	r3, [pc, #136]	; (80046f4 <HAL_TIM_MspPostInit+0x108>)
 800466c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004670:	f003 0320 	and.w	r3, r3, #32
 8004674:	60fb      	str	r3, [r7, #12]
 8004676:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = S_PulsoPaP2_Pin;
 8004678:	f44f 7380 	mov.w	r3, #256	; 0x100
 800467c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800467e:	2302      	movs	r3, #2
 8004680:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004682:	2300      	movs	r3, #0
 8004684:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004686:	2300      	movs	r3, #0
 8004688:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM13;
 800468a:	2309      	movs	r3, #9
 800468c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(S_PulsoPaP2_GPIO_Port, &GPIO_InitStruct);
 800468e:	f107 0314 	add.w	r3, r7, #20
 8004692:	4619      	mov	r1, r3
 8004694:	481a      	ldr	r0, [pc, #104]	; (8004700 <HAL_TIM_MspPostInit+0x114>)
 8004696:	f002 ff09 	bl	80074ac <HAL_GPIO_Init>
}
 800469a:	e024      	b.n	80046e6 <HAL_TIM_MspPostInit+0xfa>
  else if(timHandle->Instance==TIM14)
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	4a18      	ldr	r2, [pc, #96]	; (8004704 <HAL_TIM_MspPostInit+0x118>)
 80046a2:	4293      	cmp	r3, r2
 80046a4:	d11f      	bne.n	80046e6 <HAL_TIM_MspPostInit+0xfa>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80046a6:	4b13      	ldr	r3, [pc, #76]	; (80046f4 <HAL_TIM_MspPostInit+0x108>)
 80046a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80046ac:	4a11      	ldr	r2, [pc, #68]	; (80046f4 <HAL_TIM_MspPostInit+0x108>)
 80046ae:	f043 0320 	orr.w	r3, r3, #32
 80046b2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80046b6:	4b0f      	ldr	r3, [pc, #60]	; (80046f4 <HAL_TIM_MspPostInit+0x108>)
 80046b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80046bc:	f003 0320 	and.w	r3, r3, #32
 80046c0:	60bb      	str	r3, [r7, #8]
 80046c2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = S_PulsoPaP3_Pin;
 80046c4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80046c8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80046ca:	2302      	movs	r3, #2
 80046cc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80046ce:	2300      	movs	r3, #0
 80046d0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80046d2:	2300      	movs	r3, #0
 80046d4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM14;
 80046d6:	2309      	movs	r3, #9
 80046d8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(S_PulsoPaP3_GPIO_Port, &GPIO_InitStruct);
 80046da:	f107 0314 	add.w	r3, r7, #20
 80046de:	4619      	mov	r1, r3
 80046e0:	4807      	ldr	r0, [pc, #28]	; (8004700 <HAL_TIM_MspPostInit+0x114>)
 80046e2:	f002 fee3 	bl	80074ac <HAL_GPIO_Init>
}
 80046e6:	bf00      	nop
 80046e8:	3728      	adds	r7, #40	; 0x28
 80046ea:	46bd      	mov	sp, r7
 80046ec:	bd80      	pop	{r7, pc}
 80046ee:	bf00      	nop
 80046f0:	40001800 	.word	0x40001800
 80046f4:	58024400 	.word	0x58024400
 80046f8:	58020400 	.word	0x58020400
 80046fc:	40001c00 	.word	0x40001c00
 8004700:	58021400 	.word	0x58021400
 8004704:	40002000 	.word	0x40002000

08004708 <get_Straj>:
double vlim;
double T,Ta,Td,Tv,Tj1,Tj2,Tj,delta;
double qi,qf;


double get_Straj(double t,double _qi, double _qf ,double *params){
 8004708:	b580      	push	{r7, lr}
 800470a:	ed2d 8b06 	vpush	{d8-d10}
 800470e:	b088      	sub	sp, #32
 8004710:	af00      	add	r7, sp, #0
 8004712:	ed87 0b06 	vstr	d0, [r7, #24]
 8004716:	ed87 1b04 	vstr	d1, [r7, #16]
 800471a:	ed87 2b02 	vstr	d2, [r7, #8]
 800471e:	6078      	str	r0, [r7, #4]

	Tj1 = params[0];
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004726:	495f      	ldr	r1, [pc, #380]	; (80048a4 <get_Straj+0x19c>)
 8004728:	e9c1 2300 	strd	r2, r3, [r1]
	Tj2 = params[1];
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8004732:	495d      	ldr	r1, [pc, #372]	; (80048a8 <get_Straj+0x1a0>)
 8004734:	e9c1 2300 	strd	r2, r3, [r1]
	Tj = params[2];
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800473e:	495b      	ldr	r1, [pc, #364]	; (80048ac <get_Straj+0x1a4>)
 8004740:	e9c1 2300 	strd	r2, r3, [r1]
	Ta = params[3];
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 800474a:	4959      	ldr	r1, [pc, #356]	; (80048b0 <get_Straj+0x1a8>)
 800474c:	e9c1 2300 	strd	r2, r3, [r1]
	Td = params[4];
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8004756:	4957      	ldr	r1, [pc, #348]	; (80048b4 <get_Straj+0x1ac>)
 8004758:	e9c1 2300 	strd	r2, r3, [r1]
	Tv = params[5];
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8004762:	4955      	ldr	r1, [pc, #340]	; (80048b8 <get_Straj+0x1b0>)
 8004764:	e9c1 2300 	strd	r2, r3, [r1]
	T = params[6];
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 800476e:	4953      	ldr	r1, [pc, #332]	; (80048bc <get_Straj+0x1b4>)
 8004770:	e9c1 2300 	strd	r2, r3, [r1]

	qi=_qi;
 8004774:	4952      	ldr	r1, [pc, #328]	; (80048c0 <get_Straj+0x1b8>)
 8004776:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800477a:	e9c1 2300 	strd	r2, r3, [r1]
	qf=_qf;
 800477e:	4951      	ldr	r1, [pc, #324]	; (80048c4 <get_Straj+0x1bc>)
 8004780:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004784:	e9c1 2300 	strd	r2, r3, [r1]

    if (qf < qi){
 8004788:	4b4e      	ldr	r3, [pc, #312]	; (80048c4 <get_Straj+0x1bc>)
 800478a:	ed93 6b00 	vldr	d6, [r3]
 800478e:	4b4c      	ldr	r3, [pc, #304]	; (80048c0 <get_Straj+0x1b8>)
 8004790:	ed93 7b00 	vldr	d7, [r3]
 8004794:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8004798:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800479c:	f140 80ac 	bpl.w	80048f8 <get_Straj+0x1f0>

    flagInv = true;
 80047a0:	4b49      	ldr	r3, [pc, #292]	; (80048c8 <get_Straj+0x1c0>)
 80047a2:	2201      	movs	r2, #1
 80047a4:	701a      	strb	r2, [r3, #0]

    qi = -qi;
 80047a6:	4b46      	ldr	r3, [pc, #280]	; (80048c0 <get_Straj+0x1b8>)
 80047a8:	ed93 7b00 	vldr	d7, [r3]
 80047ac:	eeb1 7b47 	vneg.f64	d7, d7
 80047b0:	4b43      	ldr	r3, [pc, #268]	; (80048c0 <get_Straj+0x1b8>)
 80047b2:	ed83 7b00 	vstr	d7, [r3]
    qf = -qf;
 80047b6:	4b43      	ldr	r3, [pc, #268]	; (80048c4 <get_Straj+0x1bc>)
 80047b8:	ed93 7b00 	vldr	d7, [r3]
 80047bc:	eeb1 7b47 	vneg.f64	d7, d7
 80047c0:	4b40      	ldr	r3, [pc, #256]	; (80048c4 <get_Straj+0x1bc>)
 80047c2:	ed83 7b00 	vstr	d7, [r3]
    vi = -vi;
 80047c6:	4b41      	ldr	r3, [pc, #260]	; (80048cc <get_Straj+0x1c4>)
 80047c8:	ed93 7b00 	vldr	d7, [r3]
 80047cc:	eeb1 7b47 	vneg.f64	d7, d7
 80047d0:	4b3e      	ldr	r3, [pc, #248]	; (80048cc <get_Straj+0x1c4>)
 80047d2:	ed83 7b00 	vstr	d7, [r3]
    vf = -vf;
 80047d6:	4b3e      	ldr	r3, [pc, #248]	; (80048d0 <get_Straj+0x1c8>)
 80047d8:	ed93 7b00 	vldr	d7, [r3]
 80047dc:	eeb1 7b47 	vneg.f64	d7, d7
 80047e0:	4b3b      	ldr	r3, [pc, #236]	; (80048d0 <get_Straj+0x1c8>)
 80047e2:	ed83 7b00 	vstr	d7, [r3]

    vmax = -vmin;
 80047e6:	4b3b      	ldr	r3, [pc, #236]	; (80048d4 <get_Straj+0x1cc>)
 80047e8:	ed93 7b00 	vldr	d7, [r3]
 80047ec:	eeb1 7b47 	vneg.f64	d7, d7
 80047f0:	4b39      	ldr	r3, [pc, #228]	; (80048d8 <get_Straj+0x1d0>)
 80047f2:	ed83 7b00 	vstr	d7, [r3]
    vmin = -vmax;
 80047f6:	4b38      	ldr	r3, [pc, #224]	; (80048d8 <get_Straj+0x1d0>)
 80047f8:	ed93 7b00 	vldr	d7, [r3]
 80047fc:	eeb1 7b47 	vneg.f64	d7, d7
 8004800:	4b34      	ldr	r3, [pc, #208]	; (80048d4 <get_Straj+0x1cc>)
 8004802:	ed83 7b00 	vstr	d7, [r3]
    amax = -amin;
 8004806:	4b35      	ldr	r3, [pc, #212]	; (80048dc <get_Straj+0x1d4>)
 8004808:	ed93 7b00 	vldr	d7, [r3]
 800480c:	eeb1 7b47 	vneg.f64	d7, d7
 8004810:	4b33      	ldr	r3, [pc, #204]	; (80048e0 <get_Straj+0x1d8>)
 8004812:	ed83 7b00 	vstr	d7, [r3]
    amin = -amax;
 8004816:	4b32      	ldr	r3, [pc, #200]	; (80048e0 <get_Straj+0x1d8>)
 8004818:	ed93 7b00 	vldr	d7, [r3]
 800481c:	eeb1 7b47 	vneg.f64	d7, d7
 8004820:	4b2e      	ldr	r3, [pc, #184]	; (80048dc <get_Straj+0x1d4>)
 8004822:	ed83 7b00 	vstr	d7, [r3]
    jmax = -jmin;
 8004826:	4b2f      	ldr	r3, [pc, #188]	; (80048e4 <get_Straj+0x1dc>)
 8004828:	ed93 7b00 	vldr	d7, [r3]
 800482c:	eeb1 7b47 	vneg.f64	d7, d7
 8004830:	4b2d      	ldr	r3, [pc, #180]	; (80048e8 <get_Straj+0x1e0>)
 8004832:	ed83 7b00 	vstr	d7, [r3]
    jmin = -jmax;
 8004836:	4b2c      	ldr	r3, [pc, #176]	; (80048e8 <get_Straj+0x1e0>)
 8004838:	ed93 7b00 	vldr	d7, [r3]
 800483c:	eeb1 7b47 	vneg.f64	d7, d7
 8004840:	4b28      	ldr	r3, [pc, #160]	; (80048e4 <get_Straj+0x1dc>)
 8004842:	ed83 7b00 	vstr	d7, [r3]

    alima = jmax*Tj1;
 8004846:	4b28      	ldr	r3, [pc, #160]	; (80048e8 <get_Straj+0x1e0>)
 8004848:	ed93 6b00 	vldr	d6, [r3]
 800484c:	4b15      	ldr	r3, [pc, #84]	; (80048a4 <get_Straj+0x19c>)
 800484e:	ed93 7b00 	vldr	d7, [r3]
 8004852:	ee26 7b07 	vmul.f64	d7, d6, d7
 8004856:	4b25      	ldr	r3, [pc, #148]	; (80048ec <get_Straj+0x1e4>)
 8004858:	ed83 7b00 	vstr	d7, [r3]
    alimd = -jmax*Tj2;
 800485c:	4b22      	ldr	r3, [pc, #136]	; (80048e8 <get_Straj+0x1e0>)
 800485e:	ed93 7b00 	vldr	d7, [r3]
 8004862:	eeb1 6b47 	vneg.f64	d6, d7
 8004866:	4b10      	ldr	r3, [pc, #64]	; (80048a8 <get_Straj+0x1a0>)
 8004868:	ed93 7b00 	vldr	d7, [r3]
 800486c:	ee26 7b07 	vmul.f64	d7, d6, d7
 8004870:	4b1f      	ldr	r3, [pc, #124]	; (80048f0 <get_Straj+0x1e8>)
 8004872:	ed83 7b00 	vstr	d7, [r3]
    vlim = vi+(Ta-Tj1)*alima;
 8004876:	4b0e      	ldr	r3, [pc, #56]	; (80048b0 <get_Straj+0x1a8>)
 8004878:	ed93 6b00 	vldr	d6, [r3]
 800487c:	4b09      	ldr	r3, [pc, #36]	; (80048a4 <get_Straj+0x19c>)
 800487e:	ed93 7b00 	vldr	d7, [r3]
 8004882:	ee36 6b47 	vsub.f64	d6, d6, d7
 8004886:	4b19      	ldr	r3, [pc, #100]	; (80048ec <get_Straj+0x1e4>)
 8004888:	ed93 7b00 	vldr	d7, [r3]
 800488c:	ee26 6b07 	vmul.f64	d6, d6, d7
 8004890:	4b0e      	ldr	r3, [pc, #56]	; (80048cc <get_Straj+0x1c4>)
 8004892:	ed93 7b00 	vldr	d7, [r3]
 8004896:	ee36 7b07 	vadd.f64	d7, d6, d7
 800489a:	4b16      	ldr	r3, [pc, #88]	; (80048f4 <get_Straj+0x1ec>)
 800489c:	ed83 7b00 	vstr	d7, [r3]
 80048a0:	e06f      	b.n	8004982 <get_Straj+0x27a>
 80048a2:	bf00      	nop
 80048a4:	240008b0 	.word	0x240008b0
 80048a8:	240008b8 	.word	0x240008b8
 80048ac:	240008c0 	.word	0x240008c0
 80048b0:	24000898 	.word	0x24000898
 80048b4:	240008a0 	.word	0x240008a0
 80048b8:	240008a8 	.word	0x240008a8
 80048bc:	24000890 	.word	0x24000890
 80048c0:	240008d0 	.word	0x240008d0
 80048c4:	240008d8 	.word	0x240008d8
 80048c8:	24000870 	.word	0x24000870
 80048cc:	24000018 	.word	0x24000018
 80048d0:	24000490 	.word	0x24000490
 80048d4:	24000488 	.word	0x24000488
 80048d8:	24000010 	.word	0x24000010
 80048dc:	24000498 	.word	0x24000498
 80048e0:	24000020 	.word	0x24000020
 80048e4:	24000480 	.word	0x24000480
 80048e8:	24000008 	.word	0x24000008
 80048ec:	24000878 	.word	0x24000878
 80048f0:	24000880 	.word	0x24000880
 80048f4:	24000888 	.word	0x24000888

    }else{
        jmin = -jmax;
 80048f8:	4bbc      	ldr	r3, [pc, #752]	; (8004bec <get_Straj+0x4e4>)
 80048fa:	ed93 7b00 	vldr	d7, [r3]
 80048fe:	eeb1 7b47 	vneg.f64	d7, d7
 8004902:	4bbb      	ldr	r3, [pc, #748]	; (8004bf0 <get_Straj+0x4e8>)
 8004904:	ed83 7b00 	vstr	d7, [r3]
        amin = -amax;
 8004908:	4bba      	ldr	r3, [pc, #744]	; (8004bf4 <get_Straj+0x4ec>)
 800490a:	ed93 7b00 	vldr	d7, [r3]
 800490e:	eeb1 7b47 	vneg.f64	d7, d7
 8004912:	4bb9      	ldr	r3, [pc, #740]	; (8004bf8 <get_Straj+0x4f0>)
 8004914:	ed83 7b00 	vstr	d7, [r3]
        vmin = -vmax;
 8004918:	4bb8      	ldr	r3, [pc, #736]	; (8004bfc <get_Straj+0x4f4>)
 800491a:	ed93 7b00 	vldr	d7, [r3]
 800491e:	eeb1 7b47 	vneg.f64	d7, d7
 8004922:	4bb7      	ldr	r3, [pc, #732]	; (8004c00 <get_Straj+0x4f8>)
 8004924:	ed83 7b00 	vstr	d7, [r3]

        alima = jmax*Tj1;
 8004928:	4bb0      	ldr	r3, [pc, #704]	; (8004bec <get_Straj+0x4e4>)
 800492a:	ed93 6b00 	vldr	d6, [r3]
 800492e:	4bb5      	ldr	r3, [pc, #724]	; (8004c04 <get_Straj+0x4fc>)
 8004930:	ed93 7b00 	vldr	d7, [r3]
 8004934:	ee26 7b07 	vmul.f64	d7, d6, d7
 8004938:	4bb3      	ldr	r3, [pc, #716]	; (8004c08 <get_Straj+0x500>)
 800493a:	ed83 7b00 	vstr	d7, [r3]
        alimd = -jmax*Tj2;
 800493e:	4bab      	ldr	r3, [pc, #684]	; (8004bec <get_Straj+0x4e4>)
 8004940:	ed93 7b00 	vldr	d7, [r3]
 8004944:	eeb1 6b47 	vneg.f64	d6, d7
 8004948:	4bb0      	ldr	r3, [pc, #704]	; (8004c0c <get_Straj+0x504>)
 800494a:	ed93 7b00 	vldr	d7, [r3]
 800494e:	ee26 7b07 	vmul.f64	d7, d6, d7
 8004952:	4baf      	ldr	r3, [pc, #700]	; (8004c10 <get_Straj+0x508>)
 8004954:	ed83 7b00 	vstr	d7, [r3]
        vlim = vi+(Ta-Tj1)*alima;
 8004958:	4bae      	ldr	r3, [pc, #696]	; (8004c14 <get_Straj+0x50c>)
 800495a:	ed93 6b00 	vldr	d6, [r3]
 800495e:	4ba9      	ldr	r3, [pc, #676]	; (8004c04 <get_Straj+0x4fc>)
 8004960:	ed93 7b00 	vldr	d7, [r3]
 8004964:	ee36 6b47 	vsub.f64	d6, d6, d7
 8004968:	4ba7      	ldr	r3, [pc, #668]	; (8004c08 <get_Straj+0x500>)
 800496a:	ed93 7b00 	vldr	d7, [r3]
 800496e:	ee26 6b07 	vmul.f64	d6, d6, d7
 8004972:	4ba9      	ldr	r3, [pc, #676]	; (8004c18 <get_Straj+0x510>)
 8004974:	ed93 7b00 	vldr	d7, [r3]
 8004978:	ee36 7b07 	vadd.f64	d7, d6, d7
 800497c:	4ba7      	ldr	r3, [pc, #668]	; (8004c1c <get_Straj+0x514>)
 800497e:	ed83 7b00 	vstr	d7, [r3]
    }


    //#Acceleration phase

    if (t>=0 && t<=Tj1){               //a) [0,Tj1]
 8004982:	ed97 7b06 	vldr	d7, [r7, #24]
 8004986:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800498a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800498e:	db7e      	blt.n	8004a8e <get_Straj+0x386>
 8004990:	4b9c      	ldr	r3, [pc, #624]	; (8004c04 <get_Straj+0x4fc>)
 8004992:	ed93 7b00 	vldr	d7, [r3]
 8004996:	ed97 6b06 	vldr	d6, [r7, #24]
 800499a:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800499e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80049a2:	d874      	bhi.n	8004a8e <get_Straj+0x386>
        //printf("tramo1\n");
        q = qi+vi*t+jmax*pow(t,3)/6;
 80049a4:	4b9c      	ldr	r3, [pc, #624]	; (8004c18 <get_Straj+0x510>)
 80049a6:	ed93 6b00 	vldr	d6, [r3]
 80049aa:	ed97 7b06 	vldr	d7, [r7, #24]
 80049ae:	ee26 6b07 	vmul.f64	d6, d6, d7
 80049b2:	4b9b      	ldr	r3, [pc, #620]	; (8004c20 <get_Straj+0x518>)
 80049b4:	ed93 7b00 	vldr	d7, [r3]
 80049b8:	ee36 8b07 	vadd.f64	d8, d6, d7
 80049bc:	eeb0 1b08 	vmov.f64	d1, #8	; 0x40400000  3.0
 80049c0:	ed97 0b06 	vldr	d0, [r7, #24]
 80049c4:	f00c ffb8 	bl	8011938 <pow>
 80049c8:	eeb0 6b40 	vmov.f64	d6, d0
 80049cc:	4b87      	ldr	r3, [pc, #540]	; (8004bec <get_Straj+0x4e4>)
 80049ce:	ed93 7b00 	vldr	d7, [r3]
 80049d2:	ee26 6b07 	vmul.f64	d6, d6, d7
 80049d6:	eeb1 5b08 	vmov.f64	d5, #24	; 0x40c00000  6.0
 80049da:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80049de:	ee38 7b07 	vadd.f64	d7, d8, d7
 80049e2:	4b90      	ldr	r3, [pc, #576]	; (8004c24 <get_Straj+0x51c>)
 80049e4:	ed83 7b00 	vstr	d7, [r3]
        qd = vi+jmax*pow(t,2)/2;
 80049e8:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 80049ec:	ed97 0b06 	vldr	d0, [r7, #24]
 80049f0:	f00c ffa2 	bl	8011938 <pow>
 80049f4:	eeb0 6b40 	vmov.f64	d6, d0
 80049f8:	4b7c      	ldr	r3, [pc, #496]	; (8004bec <get_Straj+0x4e4>)
 80049fa:	ed93 7b00 	vldr	d7, [r3]
 80049fe:	ee26 7b07 	vmul.f64	d7, d6, d7
 8004a02:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8004a06:	ee87 6b05 	vdiv.f64	d6, d7, d5
 8004a0a:	4b83      	ldr	r3, [pc, #524]	; (8004c18 <get_Straj+0x510>)
 8004a0c:	ed93 7b00 	vldr	d7, [r3]
 8004a10:	ee36 7b07 	vadd.f64	d7, d6, d7
 8004a14:	4b84      	ldr	r3, [pc, #528]	; (8004c28 <get_Straj+0x520>)
 8004a16:	ed83 7b00 	vstr	d7, [r3]
        qdd = jmax*t;
 8004a1a:	4b74      	ldr	r3, [pc, #464]	; (8004bec <get_Straj+0x4e4>)
 8004a1c:	ed93 6b00 	vldr	d6, [r3]
 8004a20:	ed97 7b06 	vldr	d7, [r7, #24]
 8004a24:	ee26 7b07 	vmul.f64	d7, d6, d7
 8004a28:	4b80      	ldr	r3, [pc, #512]	; (8004c2c <get_Straj+0x524>)
 8004a2a:	ed83 7b00 	vstr	d7, [r3]
        qddd = jmax;
 8004a2e:	4b6f      	ldr	r3, [pc, #444]	; (8004bec <get_Straj+0x4e4>)
 8004a30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a34:	497e      	ldr	r1, [pc, #504]	; (8004c30 <get_Straj+0x528>)
 8004a36:	e9c1 2300 	strd	r2, r3, [r1]
        if (flagInv){
 8004a3a:	4b7e      	ldr	r3, [pc, #504]	; (8004c34 <get_Straj+0x52c>)
 8004a3c:	781b      	ldrb	r3, [r3, #0]
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	f000 84fb 	beq.w	800543a <get_Straj+0xd32>
            q=-q; qd=-qd; qdd=-qdd; qddd=-qddd;
 8004a44:	4b77      	ldr	r3, [pc, #476]	; (8004c24 <get_Straj+0x51c>)
 8004a46:	ed93 7b00 	vldr	d7, [r3]
 8004a4a:	eeb1 7b47 	vneg.f64	d7, d7
 8004a4e:	4b75      	ldr	r3, [pc, #468]	; (8004c24 <get_Straj+0x51c>)
 8004a50:	ed83 7b00 	vstr	d7, [r3]
 8004a54:	4b74      	ldr	r3, [pc, #464]	; (8004c28 <get_Straj+0x520>)
 8004a56:	ed93 7b00 	vldr	d7, [r3]
 8004a5a:	eeb1 7b47 	vneg.f64	d7, d7
 8004a5e:	4b72      	ldr	r3, [pc, #456]	; (8004c28 <get_Straj+0x520>)
 8004a60:	ed83 7b00 	vstr	d7, [r3]
 8004a64:	4b71      	ldr	r3, [pc, #452]	; (8004c2c <get_Straj+0x524>)
 8004a66:	ed93 7b00 	vldr	d7, [r3]
 8004a6a:	eeb1 7b47 	vneg.f64	d7, d7
 8004a6e:	4b6f      	ldr	r3, [pc, #444]	; (8004c2c <get_Straj+0x524>)
 8004a70:	ed83 7b00 	vstr	d7, [r3]
 8004a74:	4b6e      	ldr	r3, [pc, #440]	; (8004c30 <get_Straj+0x528>)
 8004a76:	ed93 7b00 	vldr	d7, [r3]
 8004a7a:	eeb1 7b47 	vneg.f64	d7, d7
 8004a7e:	4b6c      	ldr	r3, [pc, #432]	; (8004c30 <get_Straj+0x528>)
 8004a80:	ed83 7b00 	vstr	d7, [r3]
            flagInv = false;
 8004a84:	4b6b      	ldr	r3, [pc, #428]	; (8004c34 <get_Straj+0x52c>)
 8004a86:	2200      	movs	r2, #0
 8004a88:	701a      	strb	r2, [r3, #0]
        if (flagInv){
 8004a8a:	f000 bcd6 	b.w	800543a <get_Straj+0xd32>
        }

    } else if (t>Tj1 && t<=Ta-Tj1){   //b) [Tj1,Ta-Tj1]
 8004a8e:	4b5d      	ldr	r3, [pc, #372]	; (8004c04 <get_Straj+0x4fc>)
 8004a90:	ed93 7b00 	vldr	d7, [r3]
 8004a94:	ed97 6b06 	vldr	d6, [r7, #24]
 8004a98:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8004a9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004aa0:	f340 80ca 	ble.w	8004c38 <get_Straj+0x530>
 8004aa4:	4b5b      	ldr	r3, [pc, #364]	; (8004c14 <get_Straj+0x50c>)
 8004aa6:	ed93 6b00 	vldr	d6, [r3]
 8004aaa:	4b56      	ldr	r3, [pc, #344]	; (8004c04 <get_Straj+0x4fc>)
 8004aac:	ed93 7b00 	vldr	d7, [r3]
 8004ab0:	ee36 7b47 	vsub.f64	d7, d6, d7
 8004ab4:	ed97 6b06 	vldr	d6, [r7, #24]
 8004ab8:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8004abc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004ac0:	f200 80ba 	bhi.w	8004c38 <get_Straj+0x530>
        //printf("tramo2\n");
        q = qi+vi*t+(alima/6)*(3*pow(t,2)-3*Tj1*t+pow(Tj1,2));
 8004ac4:	4b54      	ldr	r3, [pc, #336]	; (8004c18 <get_Straj+0x510>)
 8004ac6:	ed93 6b00 	vldr	d6, [r3]
 8004aca:	ed97 7b06 	vldr	d7, [r7, #24]
 8004ace:	ee26 6b07 	vmul.f64	d6, d6, d7
 8004ad2:	4b53      	ldr	r3, [pc, #332]	; (8004c20 <get_Straj+0x518>)
 8004ad4:	ed93 7b00 	vldr	d7, [r3]
 8004ad8:	ee36 8b07 	vadd.f64	d8, d6, d7
 8004adc:	4b4a      	ldr	r3, [pc, #296]	; (8004c08 <get_Straj+0x500>)
 8004ade:	ed93 7b00 	vldr	d7, [r3]
 8004ae2:	eeb1 6b08 	vmov.f64	d6, #24	; 0x40c00000  6.0
 8004ae6:	ee87 9b06 	vdiv.f64	d9, d7, d6
 8004aea:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8004aee:	ed97 0b06 	vldr	d0, [r7, #24]
 8004af2:	f00c ff21 	bl	8011938 <pow>
 8004af6:	eeb0 7b40 	vmov.f64	d7, d0
 8004afa:	eeb0 6b08 	vmov.f64	d6, #8	; 0x40400000  3.0
 8004afe:	ee27 6b06 	vmul.f64	d6, d7, d6
 8004b02:	4b40      	ldr	r3, [pc, #256]	; (8004c04 <get_Straj+0x4fc>)
 8004b04:	ed93 7b00 	vldr	d7, [r3]
 8004b08:	eeb0 5b08 	vmov.f64	d5, #8	; 0x40400000  3.0
 8004b0c:	ee27 5b05 	vmul.f64	d5, d7, d5
 8004b10:	ed97 7b06 	vldr	d7, [r7, #24]
 8004b14:	ee25 7b07 	vmul.f64	d7, d5, d7
 8004b18:	ee36 ab47 	vsub.f64	d10, d6, d7
 8004b1c:	4b39      	ldr	r3, [pc, #228]	; (8004c04 <get_Straj+0x4fc>)
 8004b1e:	ed93 7b00 	vldr	d7, [r3]
 8004b22:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8004b26:	eeb0 0b47 	vmov.f64	d0, d7
 8004b2a:	f00c ff05 	bl	8011938 <pow>
 8004b2e:	eeb0 7b40 	vmov.f64	d7, d0
 8004b32:	ee3a 7b07 	vadd.f64	d7, d10, d7
 8004b36:	ee29 7b07 	vmul.f64	d7, d9, d7
 8004b3a:	ee38 7b07 	vadd.f64	d7, d8, d7
 8004b3e:	4b39      	ldr	r3, [pc, #228]	; (8004c24 <get_Straj+0x51c>)
 8004b40:	ed83 7b00 	vstr	d7, [r3]
        qd = vi+amax*(t-Tj1/2);
 8004b44:	4b2f      	ldr	r3, [pc, #188]	; (8004c04 <get_Straj+0x4fc>)
 8004b46:	ed93 6b00 	vldr	d6, [r3]
 8004b4a:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8004b4e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8004b52:	ed97 6b06 	vldr	d6, [r7, #24]
 8004b56:	ee36 6b47 	vsub.f64	d6, d6, d7
 8004b5a:	4b26      	ldr	r3, [pc, #152]	; (8004bf4 <get_Straj+0x4ec>)
 8004b5c:	ed93 7b00 	vldr	d7, [r3]
 8004b60:	ee26 6b07 	vmul.f64	d6, d6, d7
 8004b64:	4b2c      	ldr	r3, [pc, #176]	; (8004c18 <get_Straj+0x510>)
 8004b66:	ed93 7b00 	vldr	d7, [r3]
 8004b6a:	ee36 7b07 	vadd.f64	d7, d6, d7
 8004b6e:	4b2e      	ldr	r3, [pc, #184]	; (8004c28 <get_Straj+0x520>)
 8004b70:	ed83 7b00 	vstr	d7, [r3]
        qdd = jmax*Tj1;
 8004b74:	4b1d      	ldr	r3, [pc, #116]	; (8004bec <get_Straj+0x4e4>)
 8004b76:	ed93 6b00 	vldr	d6, [r3]
 8004b7a:	4b22      	ldr	r3, [pc, #136]	; (8004c04 <get_Straj+0x4fc>)
 8004b7c:	ed93 7b00 	vldr	d7, [r3]
 8004b80:	ee26 7b07 	vmul.f64	d7, d6, d7
 8004b84:	4b29      	ldr	r3, [pc, #164]	; (8004c2c <get_Straj+0x524>)
 8004b86:	ed83 7b00 	vstr	d7, [r3]
        qddd = 0;
 8004b8a:	4929      	ldr	r1, [pc, #164]	; (8004c30 <get_Straj+0x528>)
 8004b8c:	f04f 0200 	mov.w	r2, #0
 8004b90:	f04f 0300 	mov.w	r3, #0
 8004b94:	e9c1 2300 	strd	r2, r3, [r1]

        if (flagInv){
 8004b98:	4b26      	ldr	r3, [pc, #152]	; (8004c34 <get_Straj+0x52c>)
 8004b9a:	781b      	ldrb	r3, [r3, #0]
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	f000 844c 	beq.w	800543a <get_Straj+0xd32>
            q=-q; qd=-qd; qdd=-qdd; qddd=-qddd;
 8004ba2:	4b20      	ldr	r3, [pc, #128]	; (8004c24 <get_Straj+0x51c>)
 8004ba4:	ed93 7b00 	vldr	d7, [r3]
 8004ba8:	eeb1 7b47 	vneg.f64	d7, d7
 8004bac:	4b1d      	ldr	r3, [pc, #116]	; (8004c24 <get_Straj+0x51c>)
 8004bae:	ed83 7b00 	vstr	d7, [r3]
 8004bb2:	4b1d      	ldr	r3, [pc, #116]	; (8004c28 <get_Straj+0x520>)
 8004bb4:	ed93 7b00 	vldr	d7, [r3]
 8004bb8:	eeb1 7b47 	vneg.f64	d7, d7
 8004bbc:	4b1a      	ldr	r3, [pc, #104]	; (8004c28 <get_Straj+0x520>)
 8004bbe:	ed83 7b00 	vstr	d7, [r3]
 8004bc2:	4b1a      	ldr	r3, [pc, #104]	; (8004c2c <get_Straj+0x524>)
 8004bc4:	ed93 7b00 	vldr	d7, [r3]
 8004bc8:	eeb1 7b47 	vneg.f64	d7, d7
 8004bcc:	4b17      	ldr	r3, [pc, #92]	; (8004c2c <get_Straj+0x524>)
 8004bce:	ed83 7b00 	vstr	d7, [r3]
 8004bd2:	4b17      	ldr	r3, [pc, #92]	; (8004c30 <get_Straj+0x528>)
 8004bd4:	ed93 7b00 	vldr	d7, [r3]
 8004bd8:	eeb1 7b47 	vneg.f64	d7, d7
 8004bdc:	4b14      	ldr	r3, [pc, #80]	; (8004c30 <get_Straj+0x528>)
 8004bde:	ed83 7b00 	vstr	d7, [r3]
            flagInv = false;
 8004be2:	4b14      	ldr	r3, [pc, #80]	; (8004c34 <get_Straj+0x52c>)
 8004be4:	2200      	movs	r2, #0
 8004be6:	701a      	strb	r2, [r3, #0]
        if (flagInv){
 8004be8:	f000 bc27 	b.w	800543a <get_Straj+0xd32>
 8004bec:	24000008 	.word	0x24000008
 8004bf0:	24000480 	.word	0x24000480
 8004bf4:	24000020 	.word	0x24000020
 8004bf8:	24000498 	.word	0x24000498
 8004bfc:	24000010 	.word	0x24000010
 8004c00:	24000488 	.word	0x24000488
 8004c04:	240008b0 	.word	0x240008b0
 8004c08:	24000878 	.word	0x24000878
 8004c0c:	240008b8 	.word	0x240008b8
 8004c10:	24000880 	.word	0x24000880
 8004c14:	24000898 	.word	0x24000898
 8004c18:	24000018 	.word	0x24000018
 8004c1c:	24000888 	.word	0x24000888
 8004c20:	240008d0 	.word	0x240008d0
 8004c24:	24000460 	.word	0x24000460
 8004c28:	24000468 	.word	0x24000468
 8004c2c:	24000470 	.word	0x24000470
 8004c30:	24000478 	.word	0x24000478
 8004c34:	24000870 	.word	0x24000870
        }

    } else if (t>Ta-Tj1 && t<=Ta){    //c) [Ta-Tj1,Ta]
 8004c38:	4b9c      	ldr	r3, [pc, #624]	; (8004eac <get_Straj+0x7a4>)
 8004c3a:	ed93 6b00 	vldr	d6, [r3]
 8004c3e:	4b9c      	ldr	r3, [pc, #624]	; (8004eb0 <get_Straj+0x7a8>)
 8004c40:	ed93 7b00 	vldr	d7, [r3]
 8004c44:	ee36 7b47 	vsub.f64	d7, d6, d7
 8004c48:	ed97 6b06 	vldr	d6, [r7, #24]
 8004c4c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8004c50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c54:	f340 80ac 	ble.w	8004db0 <get_Straj+0x6a8>
 8004c58:	4b94      	ldr	r3, [pc, #592]	; (8004eac <get_Straj+0x7a4>)
 8004c5a:	ed93 7b00 	vldr	d7, [r3]
 8004c5e:	ed97 6b06 	vldr	d6, [r7, #24]
 8004c62:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8004c66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c6a:	f200 80a1 	bhi.w	8004db0 <get_Straj+0x6a8>
        //printf("tramo3\n");
        q = qi+(vlim+vi)*Ta/2-vlim*(Ta-t)-jmin*pow(Ta-t,3)/6;
 8004c6e:	4b91      	ldr	r3, [pc, #580]	; (8004eb4 <get_Straj+0x7ac>)
 8004c70:	ed93 6b00 	vldr	d6, [r3]
 8004c74:	4b90      	ldr	r3, [pc, #576]	; (8004eb8 <get_Straj+0x7b0>)
 8004c76:	ed93 7b00 	vldr	d7, [r3]
 8004c7a:	ee36 6b07 	vadd.f64	d6, d6, d7
 8004c7e:	4b8b      	ldr	r3, [pc, #556]	; (8004eac <get_Straj+0x7a4>)
 8004c80:	ed93 7b00 	vldr	d7, [r3]
 8004c84:	ee26 7b07 	vmul.f64	d7, d6, d7
 8004c88:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8004c8c:	ee87 6b05 	vdiv.f64	d6, d7, d5
 8004c90:	4b8a      	ldr	r3, [pc, #552]	; (8004ebc <get_Straj+0x7b4>)
 8004c92:	ed93 7b00 	vldr	d7, [r3]
 8004c96:	ee36 6b07 	vadd.f64	d6, d6, d7
 8004c9a:	4b84      	ldr	r3, [pc, #528]	; (8004eac <get_Straj+0x7a4>)
 8004c9c:	ed93 5b00 	vldr	d5, [r3]
 8004ca0:	ed97 7b06 	vldr	d7, [r7, #24]
 8004ca4:	ee35 5b47 	vsub.f64	d5, d5, d7
 8004ca8:	4b82      	ldr	r3, [pc, #520]	; (8004eb4 <get_Straj+0x7ac>)
 8004caa:	ed93 7b00 	vldr	d7, [r3]
 8004cae:	ee25 7b07 	vmul.f64	d7, d5, d7
 8004cb2:	ee36 8b47 	vsub.f64	d8, d6, d7
 8004cb6:	4b7d      	ldr	r3, [pc, #500]	; (8004eac <get_Straj+0x7a4>)
 8004cb8:	ed93 6b00 	vldr	d6, [r3]
 8004cbc:	ed97 7b06 	vldr	d7, [r7, #24]
 8004cc0:	ee36 7b47 	vsub.f64	d7, d6, d7
 8004cc4:	eeb0 1b08 	vmov.f64	d1, #8	; 0x40400000  3.0
 8004cc8:	eeb0 0b47 	vmov.f64	d0, d7
 8004ccc:	f00c fe34 	bl	8011938 <pow>
 8004cd0:	eeb0 6b40 	vmov.f64	d6, d0
 8004cd4:	4b7a      	ldr	r3, [pc, #488]	; (8004ec0 <get_Straj+0x7b8>)
 8004cd6:	ed93 7b00 	vldr	d7, [r3]
 8004cda:	ee26 6b07 	vmul.f64	d6, d6, d7
 8004cde:	eeb1 5b08 	vmov.f64	d5, #24	; 0x40c00000  6.0
 8004ce2:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8004ce6:	ee38 7b47 	vsub.f64	d7, d8, d7
 8004cea:	4b76      	ldr	r3, [pc, #472]	; (8004ec4 <get_Straj+0x7bc>)
 8004cec:	ed83 7b00 	vstr	d7, [r3]
        qd = vmax+jmin*pow(Ta-t,2)/2;
 8004cf0:	4b6e      	ldr	r3, [pc, #440]	; (8004eac <get_Straj+0x7a4>)
 8004cf2:	ed93 6b00 	vldr	d6, [r3]
 8004cf6:	ed97 7b06 	vldr	d7, [r7, #24]
 8004cfa:	ee36 7b47 	vsub.f64	d7, d6, d7
 8004cfe:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8004d02:	eeb0 0b47 	vmov.f64	d0, d7
 8004d06:	f00c fe17 	bl	8011938 <pow>
 8004d0a:	eeb0 6b40 	vmov.f64	d6, d0
 8004d0e:	4b6c      	ldr	r3, [pc, #432]	; (8004ec0 <get_Straj+0x7b8>)
 8004d10:	ed93 7b00 	vldr	d7, [r3]
 8004d14:	ee26 7b07 	vmul.f64	d7, d6, d7
 8004d18:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8004d1c:	ee87 6b05 	vdiv.f64	d6, d7, d5
 8004d20:	4b69      	ldr	r3, [pc, #420]	; (8004ec8 <get_Straj+0x7c0>)
 8004d22:	ed93 7b00 	vldr	d7, [r3]
 8004d26:	ee36 7b07 	vadd.f64	d7, d6, d7
 8004d2a:	4b68      	ldr	r3, [pc, #416]	; (8004ecc <get_Straj+0x7c4>)
 8004d2c:	ed83 7b00 	vstr	d7, [r3]
        qdd = -jmin*(Ta-t);
 8004d30:	4b63      	ldr	r3, [pc, #396]	; (8004ec0 <get_Straj+0x7b8>)
 8004d32:	ed93 7b00 	vldr	d7, [r3]
 8004d36:	eeb1 6b47 	vneg.f64	d6, d7
 8004d3a:	4b5c      	ldr	r3, [pc, #368]	; (8004eac <get_Straj+0x7a4>)
 8004d3c:	ed93 5b00 	vldr	d5, [r3]
 8004d40:	ed97 7b06 	vldr	d7, [r7, #24]
 8004d44:	ee35 7b47 	vsub.f64	d7, d5, d7
 8004d48:	ee26 7b07 	vmul.f64	d7, d6, d7
 8004d4c:	4b60      	ldr	r3, [pc, #384]	; (8004ed0 <get_Straj+0x7c8>)
 8004d4e:	ed83 7b00 	vstr	d7, [r3]
        qddd = jmin;
 8004d52:	4b5b      	ldr	r3, [pc, #364]	; (8004ec0 <get_Straj+0x7b8>)
 8004d54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d58:	495e      	ldr	r1, [pc, #376]	; (8004ed4 <get_Straj+0x7cc>)
 8004d5a:	e9c1 2300 	strd	r2, r3, [r1]
        if (flagInv){
 8004d5e:	4b5e      	ldr	r3, [pc, #376]	; (8004ed8 <get_Straj+0x7d0>)
 8004d60:	781b      	ldrb	r3, [r3, #0]
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	f000 8369 	beq.w	800543a <get_Straj+0xd32>
            q=-q; qd=-qd; qdd=-qdd; qddd=-qddd;
 8004d68:	4b56      	ldr	r3, [pc, #344]	; (8004ec4 <get_Straj+0x7bc>)
 8004d6a:	ed93 7b00 	vldr	d7, [r3]
 8004d6e:	eeb1 7b47 	vneg.f64	d7, d7
 8004d72:	4b54      	ldr	r3, [pc, #336]	; (8004ec4 <get_Straj+0x7bc>)
 8004d74:	ed83 7b00 	vstr	d7, [r3]
 8004d78:	4b54      	ldr	r3, [pc, #336]	; (8004ecc <get_Straj+0x7c4>)
 8004d7a:	ed93 7b00 	vldr	d7, [r3]
 8004d7e:	eeb1 7b47 	vneg.f64	d7, d7
 8004d82:	4b52      	ldr	r3, [pc, #328]	; (8004ecc <get_Straj+0x7c4>)
 8004d84:	ed83 7b00 	vstr	d7, [r3]
 8004d88:	4b51      	ldr	r3, [pc, #324]	; (8004ed0 <get_Straj+0x7c8>)
 8004d8a:	ed93 7b00 	vldr	d7, [r3]
 8004d8e:	eeb1 7b47 	vneg.f64	d7, d7
 8004d92:	4b4f      	ldr	r3, [pc, #316]	; (8004ed0 <get_Straj+0x7c8>)
 8004d94:	ed83 7b00 	vstr	d7, [r3]
 8004d98:	4b4e      	ldr	r3, [pc, #312]	; (8004ed4 <get_Straj+0x7cc>)
 8004d9a:	ed93 7b00 	vldr	d7, [r3]
 8004d9e:	eeb1 7b47 	vneg.f64	d7, d7
 8004da2:	4b4c      	ldr	r3, [pc, #304]	; (8004ed4 <get_Straj+0x7cc>)
 8004da4:	ed83 7b00 	vstr	d7, [r3]
            flagInv = false;
 8004da8:	4b4b      	ldr	r3, [pc, #300]	; (8004ed8 <get_Straj+0x7d0>)
 8004daa:	2200      	movs	r2, #0
 8004dac:	701a      	strb	r2, [r3, #0]
        if (flagInv){
 8004dae:	e344      	b.n	800543a <get_Straj+0xd32>
        }
    }

    /*-------------Constant phase ----------------*/
    else if (t>Ta && t<=Ta+Tv){
 8004db0:	4b3e      	ldr	r3, [pc, #248]	; (8004eac <get_Straj+0x7a4>)
 8004db2:	ed93 7b00 	vldr	d7, [r3]
 8004db6:	ed97 6b06 	vldr	d6, [r7, #24]
 8004dba:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8004dbe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004dc2:	f340 808d 	ble.w	8004ee0 <get_Straj+0x7d8>
 8004dc6:	4b39      	ldr	r3, [pc, #228]	; (8004eac <get_Straj+0x7a4>)
 8004dc8:	ed93 6b00 	vldr	d6, [r3]
 8004dcc:	4b43      	ldr	r3, [pc, #268]	; (8004edc <get_Straj+0x7d4>)
 8004dce:	ed93 7b00 	vldr	d7, [r3]
 8004dd2:	ee36 7b07 	vadd.f64	d7, d6, d7
 8004dd6:	ed97 6b06 	vldr	d6, [r7, #24]
 8004dda:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8004dde:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004de2:	d87d      	bhi.n	8004ee0 <get_Straj+0x7d8>
        //printf("tramo4\n");
        q = qi+(vlim+vi)*Ta/2+vlim*(t-Ta);
 8004de4:	4b33      	ldr	r3, [pc, #204]	; (8004eb4 <get_Straj+0x7ac>)
 8004de6:	ed93 6b00 	vldr	d6, [r3]
 8004dea:	4b33      	ldr	r3, [pc, #204]	; (8004eb8 <get_Straj+0x7b0>)
 8004dec:	ed93 7b00 	vldr	d7, [r3]
 8004df0:	ee36 6b07 	vadd.f64	d6, d6, d7
 8004df4:	4b2d      	ldr	r3, [pc, #180]	; (8004eac <get_Straj+0x7a4>)
 8004df6:	ed93 7b00 	vldr	d7, [r3]
 8004dfa:	ee26 7b07 	vmul.f64	d7, d6, d7
 8004dfe:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8004e02:	ee87 6b05 	vdiv.f64	d6, d7, d5
 8004e06:	4b2d      	ldr	r3, [pc, #180]	; (8004ebc <get_Straj+0x7b4>)
 8004e08:	ed93 7b00 	vldr	d7, [r3]
 8004e0c:	ee36 6b07 	vadd.f64	d6, d6, d7
 8004e10:	4b26      	ldr	r3, [pc, #152]	; (8004eac <get_Straj+0x7a4>)
 8004e12:	ed93 7b00 	vldr	d7, [r3]
 8004e16:	ed97 5b06 	vldr	d5, [r7, #24]
 8004e1a:	ee35 5b47 	vsub.f64	d5, d5, d7
 8004e1e:	4b25      	ldr	r3, [pc, #148]	; (8004eb4 <get_Straj+0x7ac>)
 8004e20:	ed93 7b00 	vldr	d7, [r3]
 8004e24:	ee25 7b07 	vmul.f64	d7, d5, d7
 8004e28:	ee36 7b07 	vadd.f64	d7, d6, d7
 8004e2c:	4b25      	ldr	r3, [pc, #148]	; (8004ec4 <get_Straj+0x7bc>)
 8004e2e:	ed83 7b00 	vstr	d7, [r3]
        qd = vmax;
 8004e32:	4b25      	ldr	r3, [pc, #148]	; (8004ec8 <get_Straj+0x7c0>)
 8004e34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e38:	4924      	ldr	r1, [pc, #144]	; (8004ecc <get_Straj+0x7c4>)
 8004e3a:	e9c1 2300 	strd	r2, r3, [r1]
        qdd = 0;
 8004e3e:	4924      	ldr	r1, [pc, #144]	; (8004ed0 <get_Straj+0x7c8>)
 8004e40:	f04f 0200 	mov.w	r2, #0
 8004e44:	f04f 0300 	mov.w	r3, #0
 8004e48:	e9c1 2300 	strd	r2, r3, [r1]
        qddd = 0;
 8004e4c:	4921      	ldr	r1, [pc, #132]	; (8004ed4 <get_Straj+0x7cc>)
 8004e4e:	f04f 0200 	mov.w	r2, #0
 8004e52:	f04f 0300 	mov.w	r3, #0
 8004e56:	e9c1 2300 	strd	r2, r3, [r1]
        if (flagInv){
 8004e5a:	4b1f      	ldr	r3, [pc, #124]	; (8004ed8 <get_Straj+0x7d0>)
 8004e5c:	781b      	ldrb	r3, [r3, #0]
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	f000 82eb 	beq.w	800543a <get_Straj+0xd32>
            q=-q; qd=-qd; qdd=-qdd; qddd=-qddd;
 8004e64:	4b17      	ldr	r3, [pc, #92]	; (8004ec4 <get_Straj+0x7bc>)
 8004e66:	ed93 7b00 	vldr	d7, [r3]
 8004e6a:	eeb1 7b47 	vneg.f64	d7, d7
 8004e6e:	4b15      	ldr	r3, [pc, #84]	; (8004ec4 <get_Straj+0x7bc>)
 8004e70:	ed83 7b00 	vstr	d7, [r3]
 8004e74:	4b15      	ldr	r3, [pc, #84]	; (8004ecc <get_Straj+0x7c4>)
 8004e76:	ed93 7b00 	vldr	d7, [r3]
 8004e7a:	eeb1 7b47 	vneg.f64	d7, d7
 8004e7e:	4b13      	ldr	r3, [pc, #76]	; (8004ecc <get_Straj+0x7c4>)
 8004e80:	ed83 7b00 	vstr	d7, [r3]
 8004e84:	4b12      	ldr	r3, [pc, #72]	; (8004ed0 <get_Straj+0x7c8>)
 8004e86:	ed93 7b00 	vldr	d7, [r3]
 8004e8a:	eeb1 7b47 	vneg.f64	d7, d7
 8004e8e:	4b10      	ldr	r3, [pc, #64]	; (8004ed0 <get_Straj+0x7c8>)
 8004e90:	ed83 7b00 	vstr	d7, [r3]
 8004e94:	4b0f      	ldr	r3, [pc, #60]	; (8004ed4 <get_Straj+0x7cc>)
 8004e96:	ed93 7b00 	vldr	d7, [r3]
 8004e9a:	eeb1 7b47 	vneg.f64	d7, d7
 8004e9e:	4b0d      	ldr	r3, [pc, #52]	; (8004ed4 <get_Straj+0x7cc>)
 8004ea0:	ed83 7b00 	vstr	d7, [r3]
            flagInv = false;
 8004ea4:	4b0c      	ldr	r3, [pc, #48]	; (8004ed8 <get_Straj+0x7d0>)
 8004ea6:	2200      	movs	r2, #0
 8004ea8:	701a      	strb	r2, [r3, #0]
        if (flagInv){
 8004eaa:	e2c6      	b.n	800543a <get_Straj+0xd32>
 8004eac:	24000898 	.word	0x24000898
 8004eb0:	240008b0 	.word	0x240008b0
 8004eb4:	24000888 	.word	0x24000888
 8004eb8:	24000018 	.word	0x24000018
 8004ebc:	240008d0 	.word	0x240008d0
 8004ec0:	24000480 	.word	0x24000480
 8004ec4:	24000460 	.word	0x24000460
 8004ec8:	24000010 	.word	0x24000010
 8004ecc:	24000468 	.word	0x24000468
 8004ed0:	24000470 	.word	0x24000470
 8004ed4:	24000478 	.word	0x24000478
 8004ed8:	24000870 	.word	0x24000870
 8004edc:	240008a8 	.word	0x240008a8
        }
    }
    /*-------------Dese phase ----------------*/

    else if (t>=T-Td && t<=T-Td+Tj2){
 8004ee0:	4b6c      	ldr	r3, [pc, #432]	; (8005094 <get_Straj+0x98c>)
 8004ee2:	ed93 6b00 	vldr	d6, [r3]
 8004ee6:	4b6c      	ldr	r3, [pc, #432]	; (8005098 <get_Straj+0x990>)
 8004ee8:	ed93 7b00 	vldr	d7, [r3]
 8004eec:	ee36 7b47 	vsub.f64	d7, d6, d7
 8004ef0:	ed97 6b06 	vldr	d6, [r7, #24]
 8004ef4:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8004ef8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004efc:	f2c0 80e4 	blt.w	80050c8 <get_Straj+0x9c0>
 8004f00:	4b64      	ldr	r3, [pc, #400]	; (8005094 <get_Straj+0x98c>)
 8004f02:	ed93 6b00 	vldr	d6, [r3]
 8004f06:	4b64      	ldr	r3, [pc, #400]	; (8005098 <get_Straj+0x990>)
 8004f08:	ed93 7b00 	vldr	d7, [r3]
 8004f0c:	ee36 6b47 	vsub.f64	d6, d6, d7
 8004f10:	4b62      	ldr	r3, [pc, #392]	; (800509c <get_Straj+0x994>)
 8004f12:	ed93 7b00 	vldr	d7, [r3]
 8004f16:	ee36 7b07 	vadd.f64	d7, d6, d7
 8004f1a:	ed97 6b06 	vldr	d6, [r7, #24]
 8004f1e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8004f22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f26:	f200 80cf 	bhi.w	80050c8 <get_Straj+0x9c0>
        //printf("tramo5\n");
        q=qf-(vlim+vf)*Td/2+vlim*(t-T+Td)-jmax*(pow(t-T+Td,3)/6);
 8004f2a:	4b5d      	ldr	r3, [pc, #372]	; (80050a0 <get_Straj+0x998>)
 8004f2c:	ed93 6b00 	vldr	d6, [r3]
 8004f30:	4b5c      	ldr	r3, [pc, #368]	; (80050a4 <get_Straj+0x99c>)
 8004f32:	ed93 5b00 	vldr	d5, [r3]
 8004f36:	4b5c      	ldr	r3, [pc, #368]	; (80050a8 <get_Straj+0x9a0>)
 8004f38:	ed93 7b00 	vldr	d7, [r3]
 8004f3c:	ee35 5b07 	vadd.f64	d5, d5, d7
 8004f40:	4b55      	ldr	r3, [pc, #340]	; (8005098 <get_Straj+0x990>)
 8004f42:	ed93 7b00 	vldr	d7, [r3]
 8004f46:	ee25 5b07 	vmul.f64	d5, d5, d7
 8004f4a:	eeb0 4b00 	vmov.f64	d4, #0	; 0x40000000  2.0
 8004f4e:	ee85 7b04 	vdiv.f64	d7, d5, d4
 8004f52:	ee36 6b47 	vsub.f64	d6, d6, d7
 8004f56:	4b4f      	ldr	r3, [pc, #316]	; (8005094 <get_Straj+0x98c>)
 8004f58:	ed93 7b00 	vldr	d7, [r3]
 8004f5c:	ed97 5b06 	vldr	d5, [r7, #24]
 8004f60:	ee35 5b47 	vsub.f64	d5, d5, d7
 8004f64:	4b4c      	ldr	r3, [pc, #304]	; (8005098 <get_Straj+0x990>)
 8004f66:	ed93 7b00 	vldr	d7, [r3]
 8004f6a:	ee35 5b07 	vadd.f64	d5, d5, d7
 8004f6e:	4b4d      	ldr	r3, [pc, #308]	; (80050a4 <get_Straj+0x99c>)
 8004f70:	ed93 7b00 	vldr	d7, [r3]
 8004f74:	ee25 7b07 	vmul.f64	d7, d5, d7
 8004f78:	ee36 8b07 	vadd.f64	d8, d6, d7
 8004f7c:	4b45      	ldr	r3, [pc, #276]	; (8005094 <get_Straj+0x98c>)
 8004f7e:	ed93 7b00 	vldr	d7, [r3]
 8004f82:	ed97 6b06 	vldr	d6, [r7, #24]
 8004f86:	ee36 6b47 	vsub.f64	d6, d6, d7
 8004f8a:	4b43      	ldr	r3, [pc, #268]	; (8005098 <get_Straj+0x990>)
 8004f8c:	ed93 7b00 	vldr	d7, [r3]
 8004f90:	ee36 7b07 	vadd.f64	d7, d6, d7
 8004f94:	eeb0 1b08 	vmov.f64	d1, #8	; 0x40400000  3.0
 8004f98:	eeb0 0b47 	vmov.f64	d0, d7
 8004f9c:	f00c fccc 	bl	8011938 <pow>
 8004fa0:	eeb0 7b40 	vmov.f64	d7, d0
 8004fa4:	eeb1 5b08 	vmov.f64	d5, #24	; 0x40c00000  6.0
 8004fa8:	ee87 6b05 	vdiv.f64	d6, d7, d5
 8004fac:	4b3f      	ldr	r3, [pc, #252]	; (80050ac <get_Straj+0x9a4>)
 8004fae:	ed93 7b00 	vldr	d7, [r3]
 8004fb2:	ee26 7b07 	vmul.f64	d7, d6, d7
 8004fb6:	ee38 7b47 	vsub.f64	d7, d8, d7
 8004fba:	4b3d      	ldr	r3, [pc, #244]	; (80050b0 <get_Straj+0x9a8>)
 8004fbc:	ed83 7b00 	vstr	d7, [r3]
        qd=vlim-jmax*(pow(t-T+Td,2)/2);
 8004fc0:	4b38      	ldr	r3, [pc, #224]	; (80050a4 <get_Straj+0x99c>)
 8004fc2:	ed93 8b00 	vldr	d8, [r3]
 8004fc6:	4b33      	ldr	r3, [pc, #204]	; (8005094 <get_Straj+0x98c>)
 8004fc8:	ed93 7b00 	vldr	d7, [r3]
 8004fcc:	ed97 6b06 	vldr	d6, [r7, #24]
 8004fd0:	ee36 6b47 	vsub.f64	d6, d6, d7
 8004fd4:	4b30      	ldr	r3, [pc, #192]	; (8005098 <get_Straj+0x990>)
 8004fd6:	ed93 7b00 	vldr	d7, [r3]
 8004fda:	ee36 7b07 	vadd.f64	d7, d6, d7
 8004fde:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8004fe2:	eeb0 0b47 	vmov.f64	d0, d7
 8004fe6:	f00c fca7 	bl	8011938 <pow>
 8004fea:	eeb0 7b40 	vmov.f64	d7, d0
 8004fee:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8004ff2:	ee87 6b05 	vdiv.f64	d6, d7, d5
 8004ff6:	4b2d      	ldr	r3, [pc, #180]	; (80050ac <get_Straj+0x9a4>)
 8004ff8:	ed93 7b00 	vldr	d7, [r3]
 8004ffc:	ee26 7b07 	vmul.f64	d7, d6, d7
 8005000:	ee38 7b47 	vsub.f64	d7, d8, d7
 8005004:	4b2b      	ldr	r3, [pc, #172]	; (80050b4 <get_Straj+0x9ac>)
 8005006:	ed83 7b00 	vstr	d7, [r3]
        qdd=-jmax*(t-T+Td);
 800500a:	4b28      	ldr	r3, [pc, #160]	; (80050ac <get_Straj+0x9a4>)
 800500c:	ed93 7b00 	vldr	d7, [r3]
 8005010:	eeb1 6b47 	vneg.f64	d6, d7
 8005014:	4b1f      	ldr	r3, [pc, #124]	; (8005094 <get_Straj+0x98c>)
 8005016:	ed93 7b00 	vldr	d7, [r3]
 800501a:	ed97 5b06 	vldr	d5, [r7, #24]
 800501e:	ee35 5b47 	vsub.f64	d5, d5, d7
 8005022:	4b1d      	ldr	r3, [pc, #116]	; (8005098 <get_Straj+0x990>)
 8005024:	ed93 7b00 	vldr	d7, [r3]
 8005028:	ee35 7b07 	vadd.f64	d7, d5, d7
 800502c:	ee26 7b07 	vmul.f64	d7, d6, d7
 8005030:	4b21      	ldr	r3, [pc, #132]	; (80050b8 <get_Straj+0x9b0>)
 8005032:	ed83 7b00 	vstr	d7, [r3]
        qddd=jmin;
 8005036:	4b21      	ldr	r3, [pc, #132]	; (80050bc <get_Straj+0x9b4>)
 8005038:	e9d3 2300 	ldrd	r2, r3, [r3]
 800503c:	4920      	ldr	r1, [pc, #128]	; (80050c0 <get_Straj+0x9b8>)
 800503e:	e9c1 2300 	strd	r2, r3, [r1]
        if (flagInv){
 8005042:	4b20      	ldr	r3, [pc, #128]	; (80050c4 <get_Straj+0x9bc>)
 8005044:	781b      	ldrb	r3, [r3, #0]
 8005046:	2b00      	cmp	r3, #0
 8005048:	f000 81f7 	beq.w	800543a <get_Straj+0xd32>
            q=-q; qd=-qd; qdd=-qdd; qddd=-qddd;
 800504c:	4b18      	ldr	r3, [pc, #96]	; (80050b0 <get_Straj+0x9a8>)
 800504e:	ed93 7b00 	vldr	d7, [r3]
 8005052:	eeb1 7b47 	vneg.f64	d7, d7
 8005056:	4b16      	ldr	r3, [pc, #88]	; (80050b0 <get_Straj+0x9a8>)
 8005058:	ed83 7b00 	vstr	d7, [r3]
 800505c:	4b15      	ldr	r3, [pc, #84]	; (80050b4 <get_Straj+0x9ac>)
 800505e:	ed93 7b00 	vldr	d7, [r3]
 8005062:	eeb1 7b47 	vneg.f64	d7, d7
 8005066:	4b13      	ldr	r3, [pc, #76]	; (80050b4 <get_Straj+0x9ac>)
 8005068:	ed83 7b00 	vstr	d7, [r3]
 800506c:	4b12      	ldr	r3, [pc, #72]	; (80050b8 <get_Straj+0x9b0>)
 800506e:	ed93 7b00 	vldr	d7, [r3]
 8005072:	eeb1 7b47 	vneg.f64	d7, d7
 8005076:	4b10      	ldr	r3, [pc, #64]	; (80050b8 <get_Straj+0x9b0>)
 8005078:	ed83 7b00 	vstr	d7, [r3]
 800507c:	4b10      	ldr	r3, [pc, #64]	; (80050c0 <get_Straj+0x9b8>)
 800507e:	ed93 7b00 	vldr	d7, [r3]
 8005082:	eeb1 7b47 	vneg.f64	d7, d7
 8005086:	4b0e      	ldr	r3, [pc, #56]	; (80050c0 <get_Straj+0x9b8>)
 8005088:	ed83 7b00 	vstr	d7, [r3]
            flagInv = false;
 800508c:	4b0d      	ldr	r3, [pc, #52]	; (80050c4 <get_Straj+0x9bc>)
 800508e:	2200      	movs	r2, #0
 8005090:	701a      	strb	r2, [r3, #0]
        if (flagInv){
 8005092:	e1d2      	b.n	800543a <get_Straj+0xd32>
 8005094:	24000890 	.word	0x24000890
 8005098:	240008a0 	.word	0x240008a0
 800509c:	240008b8 	.word	0x240008b8
 80050a0:	240008d8 	.word	0x240008d8
 80050a4:	24000888 	.word	0x24000888
 80050a8:	24000490 	.word	0x24000490
 80050ac:	24000008 	.word	0x24000008
 80050b0:	24000460 	.word	0x24000460
 80050b4:	24000468 	.word	0x24000468
 80050b8:	24000470 	.word	0x24000470
 80050bc:	24000480 	.word	0x24000480
 80050c0:	24000478 	.word	0x24000478
 80050c4:	24000870 	.word	0x24000870
        }
    } else if (t>T-Td+Tj2 && t<=T-Tj2){
 80050c8:	4b7b      	ldr	r3, [pc, #492]	; (80052b8 <get_Straj+0xbb0>)
 80050ca:	ed93 6b00 	vldr	d6, [r3]
 80050ce:	4b7b      	ldr	r3, [pc, #492]	; (80052bc <get_Straj+0xbb4>)
 80050d0:	ed93 7b00 	vldr	d7, [r3]
 80050d4:	ee36 6b47 	vsub.f64	d6, d6, d7
 80050d8:	4b79      	ldr	r3, [pc, #484]	; (80052c0 <get_Straj+0xbb8>)
 80050da:	ed93 7b00 	vldr	d7, [r3]
 80050de:	ee36 7b07 	vadd.f64	d7, d6, d7
 80050e2:	ed97 6b06 	vldr	d6, [r7, #24]
 80050e6:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80050ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80050ee:	f340 80fd 	ble.w	80052ec <get_Straj+0xbe4>
 80050f2:	4b71      	ldr	r3, [pc, #452]	; (80052b8 <get_Straj+0xbb0>)
 80050f4:	ed93 6b00 	vldr	d6, [r3]
 80050f8:	4b71      	ldr	r3, [pc, #452]	; (80052c0 <get_Straj+0xbb8>)
 80050fa:	ed93 7b00 	vldr	d7, [r3]
 80050fe:	ee36 7b47 	vsub.f64	d7, d6, d7
 8005102:	ed97 6b06 	vldr	d6, [r7, #24]
 8005106:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800510a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800510e:	f200 80ed 	bhi.w	80052ec <get_Straj+0xbe4>
        //printf("tramo6\n");
        q=qf-(vlim+vf)*Td/2+vlim*(t-T+Td)+(alimd/6)*(3*pow(t-T+Td,2)-3*Tj2*(t-T+Td)+pow(Tj2,2));
 8005112:	4b6c      	ldr	r3, [pc, #432]	; (80052c4 <get_Straj+0xbbc>)
 8005114:	ed93 6b00 	vldr	d6, [r3]
 8005118:	4b6b      	ldr	r3, [pc, #428]	; (80052c8 <get_Straj+0xbc0>)
 800511a:	ed93 5b00 	vldr	d5, [r3]
 800511e:	4b6b      	ldr	r3, [pc, #428]	; (80052cc <get_Straj+0xbc4>)
 8005120:	ed93 7b00 	vldr	d7, [r3]
 8005124:	ee35 5b07 	vadd.f64	d5, d5, d7
 8005128:	4b64      	ldr	r3, [pc, #400]	; (80052bc <get_Straj+0xbb4>)
 800512a:	ed93 7b00 	vldr	d7, [r3]
 800512e:	ee25 5b07 	vmul.f64	d5, d5, d7
 8005132:	eeb0 4b00 	vmov.f64	d4, #0	; 0x40000000  2.0
 8005136:	ee85 7b04 	vdiv.f64	d7, d5, d4
 800513a:	ee36 6b47 	vsub.f64	d6, d6, d7
 800513e:	4b5e      	ldr	r3, [pc, #376]	; (80052b8 <get_Straj+0xbb0>)
 8005140:	ed93 7b00 	vldr	d7, [r3]
 8005144:	ed97 5b06 	vldr	d5, [r7, #24]
 8005148:	ee35 5b47 	vsub.f64	d5, d5, d7
 800514c:	4b5b      	ldr	r3, [pc, #364]	; (80052bc <get_Straj+0xbb4>)
 800514e:	ed93 7b00 	vldr	d7, [r3]
 8005152:	ee35 5b07 	vadd.f64	d5, d5, d7
 8005156:	4b5c      	ldr	r3, [pc, #368]	; (80052c8 <get_Straj+0xbc0>)
 8005158:	ed93 7b00 	vldr	d7, [r3]
 800515c:	ee25 7b07 	vmul.f64	d7, d5, d7
 8005160:	ee36 8b07 	vadd.f64	d8, d6, d7
 8005164:	4b5a      	ldr	r3, [pc, #360]	; (80052d0 <get_Straj+0xbc8>)
 8005166:	ed93 7b00 	vldr	d7, [r3]
 800516a:	eeb1 6b08 	vmov.f64	d6, #24	; 0x40c00000  6.0
 800516e:	ee87 9b06 	vdiv.f64	d9, d7, d6
 8005172:	4b51      	ldr	r3, [pc, #324]	; (80052b8 <get_Straj+0xbb0>)
 8005174:	ed93 7b00 	vldr	d7, [r3]
 8005178:	ed97 6b06 	vldr	d6, [r7, #24]
 800517c:	ee36 6b47 	vsub.f64	d6, d6, d7
 8005180:	4b4e      	ldr	r3, [pc, #312]	; (80052bc <get_Straj+0xbb4>)
 8005182:	ed93 7b00 	vldr	d7, [r3]
 8005186:	ee36 7b07 	vadd.f64	d7, d6, d7
 800518a:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 800518e:	eeb0 0b47 	vmov.f64	d0, d7
 8005192:	f00c fbd1 	bl	8011938 <pow>
 8005196:	eeb0 7b40 	vmov.f64	d7, d0
 800519a:	eeb0 6b08 	vmov.f64	d6, #8	; 0x40400000  3.0
 800519e:	ee27 6b06 	vmul.f64	d6, d7, d6
 80051a2:	4b47      	ldr	r3, [pc, #284]	; (80052c0 <get_Straj+0xbb8>)
 80051a4:	ed93 7b00 	vldr	d7, [r3]
 80051a8:	eeb0 5b08 	vmov.f64	d5, #8	; 0x40400000  3.0
 80051ac:	ee27 5b05 	vmul.f64	d5, d7, d5
 80051b0:	4b41      	ldr	r3, [pc, #260]	; (80052b8 <get_Straj+0xbb0>)
 80051b2:	ed93 7b00 	vldr	d7, [r3]
 80051b6:	ed97 4b06 	vldr	d4, [r7, #24]
 80051ba:	ee34 4b47 	vsub.f64	d4, d4, d7
 80051be:	4b3f      	ldr	r3, [pc, #252]	; (80052bc <get_Straj+0xbb4>)
 80051c0:	ed93 7b00 	vldr	d7, [r3]
 80051c4:	ee34 7b07 	vadd.f64	d7, d4, d7
 80051c8:	ee25 7b07 	vmul.f64	d7, d5, d7
 80051cc:	ee36 ab47 	vsub.f64	d10, d6, d7
 80051d0:	4b3b      	ldr	r3, [pc, #236]	; (80052c0 <get_Straj+0xbb8>)
 80051d2:	ed93 7b00 	vldr	d7, [r3]
 80051d6:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 80051da:	eeb0 0b47 	vmov.f64	d0, d7
 80051de:	f00c fbab 	bl	8011938 <pow>
 80051e2:	eeb0 7b40 	vmov.f64	d7, d0
 80051e6:	ee3a 7b07 	vadd.f64	d7, d10, d7
 80051ea:	ee29 7b07 	vmul.f64	d7, d9, d7
 80051ee:	ee38 7b07 	vadd.f64	d7, d8, d7
 80051f2:	4b38      	ldr	r3, [pc, #224]	; (80052d4 <get_Straj+0xbcc>)
 80051f4:	ed83 7b00 	vstr	d7, [r3]
        qd=vlim+alimd*(t-T+Td-Tj2/2);
 80051f8:	4b2f      	ldr	r3, [pc, #188]	; (80052b8 <get_Straj+0xbb0>)
 80051fa:	ed93 7b00 	vldr	d7, [r3]
 80051fe:	ed97 6b06 	vldr	d6, [r7, #24]
 8005202:	ee36 6b47 	vsub.f64	d6, d6, d7
 8005206:	4b2d      	ldr	r3, [pc, #180]	; (80052bc <get_Straj+0xbb4>)
 8005208:	ed93 7b00 	vldr	d7, [r3]
 800520c:	ee36 6b07 	vadd.f64	d6, d6, d7
 8005210:	4b2b      	ldr	r3, [pc, #172]	; (80052c0 <get_Straj+0xbb8>)
 8005212:	ed93 5b00 	vldr	d5, [r3]
 8005216:	eeb0 4b00 	vmov.f64	d4, #0	; 0x40000000  2.0
 800521a:	ee85 7b04 	vdiv.f64	d7, d5, d4
 800521e:	ee36 6b47 	vsub.f64	d6, d6, d7
 8005222:	4b2b      	ldr	r3, [pc, #172]	; (80052d0 <get_Straj+0xbc8>)
 8005224:	ed93 7b00 	vldr	d7, [r3]
 8005228:	ee26 6b07 	vmul.f64	d6, d6, d7
 800522c:	4b26      	ldr	r3, [pc, #152]	; (80052c8 <get_Straj+0xbc0>)
 800522e:	ed93 7b00 	vldr	d7, [r3]
 8005232:	ee36 7b07 	vadd.f64	d7, d6, d7
 8005236:	4b28      	ldr	r3, [pc, #160]	; (80052d8 <get_Straj+0xbd0>)
 8005238:	ed83 7b00 	vstr	d7, [r3]
        qdd = -jmax*Tj2;
 800523c:	4b27      	ldr	r3, [pc, #156]	; (80052dc <get_Straj+0xbd4>)
 800523e:	ed93 7b00 	vldr	d7, [r3]
 8005242:	eeb1 6b47 	vneg.f64	d6, d7
 8005246:	4b1e      	ldr	r3, [pc, #120]	; (80052c0 <get_Straj+0xbb8>)
 8005248:	ed93 7b00 	vldr	d7, [r3]
 800524c:	ee26 7b07 	vmul.f64	d7, d6, d7
 8005250:	4b23      	ldr	r3, [pc, #140]	; (80052e0 <get_Straj+0xbd8>)
 8005252:	ed83 7b00 	vstr	d7, [r3]
        qddd = 0;
 8005256:	4923      	ldr	r1, [pc, #140]	; (80052e4 <get_Straj+0xbdc>)
 8005258:	f04f 0200 	mov.w	r2, #0
 800525c:	f04f 0300 	mov.w	r3, #0
 8005260:	e9c1 2300 	strd	r2, r3, [r1]
        if (flagInv){
 8005264:	4b20      	ldr	r3, [pc, #128]	; (80052e8 <get_Straj+0xbe0>)
 8005266:	781b      	ldrb	r3, [r3, #0]
 8005268:	2b00      	cmp	r3, #0
 800526a:	f000 80e6 	beq.w	800543a <get_Straj+0xd32>
            q=-q; qd=-qd; qdd=-qdd; qddd=-qddd;
 800526e:	4b19      	ldr	r3, [pc, #100]	; (80052d4 <get_Straj+0xbcc>)
 8005270:	ed93 7b00 	vldr	d7, [r3]
 8005274:	eeb1 7b47 	vneg.f64	d7, d7
 8005278:	4b16      	ldr	r3, [pc, #88]	; (80052d4 <get_Straj+0xbcc>)
 800527a:	ed83 7b00 	vstr	d7, [r3]
 800527e:	4b16      	ldr	r3, [pc, #88]	; (80052d8 <get_Straj+0xbd0>)
 8005280:	ed93 7b00 	vldr	d7, [r3]
 8005284:	eeb1 7b47 	vneg.f64	d7, d7
 8005288:	4b13      	ldr	r3, [pc, #76]	; (80052d8 <get_Straj+0xbd0>)
 800528a:	ed83 7b00 	vstr	d7, [r3]
 800528e:	4b14      	ldr	r3, [pc, #80]	; (80052e0 <get_Straj+0xbd8>)
 8005290:	ed93 7b00 	vldr	d7, [r3]
 8005294:	eeb1 7b47 	vneg.f64	d7, d7
 8005298:	4b11      	ldr	r3, [pc, #68]	; (80052e0 <get_Straj+0xbd8>)
 800529a:	ed83 7b00 	vstr	d7, [r3]
 800529e:	4b11      	ldr	r3, [pc, #68]	; (80052e4 <get_Straj+0xbdc>)
 80052a0:	ed93 7b00 	vldr	d7, [r3]
 80052a4:	eeb1 7b47 	vneg.f64	d7, d7
 80052a8:	4b0e      	ldr	r3, [pc, #56]	; (80052e4 <get_Straj+0xbdc>)
 80052aa:	ed83 7b00 	vstr	d7, [r3]
            flagInv = false;
 80052ae:	4b0e      	ldr	r3, [pc, #56]	; (80052e8 <get_Straj+0xbe0>)
 80052b0:	2200      	movs	r2, #0
 80052b2:	701a      	strb	r2, [r3, #0]
        if (flagInv){
 80052b4:	e0c1      	b.n	800543a <get_Straj+0xd32>
 80052b6:	bf00      	nop
 80052b8:	24000890 	.word	0x24000890
 80052bc:	240008a0 	.word	0x240008a0
 80052c0:	240008b8 	.word	0x240008b8
 80052c4:	240008d8 	.word	0x240008d8
 80052c8:	24000888 	.word	0x24000888
 80052cc:	24000490 	.word	0x24000490
 80052d0:	24000880 	.word	0x24000880
 80052d4:	24000460 	.word	0x24000460
 80052d8:	24000468 	.word	0x24000468
 80052dc:	24000008 	.word	0x24000008
 80052e0:	24000470 	.word	0x24000470
 80052e4:	24000478 	.word	0x24000478
 80052e8:	24000870 	.word	0x24000870
        }

    } else if (t>T-Tj2 && t<=T){
 80052ec:	4b59      	ldr	r3, [pc, #356]	; (8005454 <get_Straj+0xd4c>)
 80052ee:	ed93 6b00 	vldr	d6, [r3]
 80052f2:	4b59      	ldr	r3, [pc, #356]	; (8005458 <get_Straj+0xd50>)
 80052f4:	ed93 7b00 	vldr	d7, [r3]
 80052f8:	ee36 7b47 	vsub.f64	d7, d6, d7
 80052fc:	ed97 6b06 	vldr	d6, [r7, #24]
 8005300:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8005304:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005308:	f340 8097 	ble.w	800543a <get_Straj+0xd32>
 800530c:	4b51      	ldr	r3, [pc, #324]	; (8005454 <get_Straj+0xd4c>)
 800530e:	ed93 7b00 	vldr	d7, [r3]
 8005312:	ed97 6b06 	vldr	d6, [r7, #24]
 8005316:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800531a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800531e:	f200 808c 	bhi.w	800543a <get_Straj+0xd32>
        //printf("tramo7\n");
        q = qf-vf*(T-t)-jmax*(pow(T-t,3)/6);
 8005322:	4b4e      	ldr	r3, [pc, #312]	; (800545c <get_Straj+0xd54>)
 8005324:	ed93 6b00 	vldr	d6, [r3]
 8005328:	4b4a      	ldr	r3, [pc, #296]	; (8005454 <get_Straj+0xd4c>)
 800532a:	ed93 5b00 	vldr	d5, [r3]
 800532e:	ed97 7b06 	vldr	d7, [r7, #24]
 8005332:	ee35 5b47 	vsub.f64	d5, d5, d7
 8005336:	4b4a      	ldr	r3, [pc, #296]	; (8005460 <get_Straj+0xd58>)
 8005338:	ed93 7b00 	vldr	d7, [r3]
 800533c:	ee25 7b07 	vmul.f64	d7, d5, d7
 8005340:	ee36 8b47 	vsub.f64	d8, d6, d7
 8005344:	4b43      	ldr	r3, [pc, #268]	; (8005454 <get_Straj+0xd4c>)
 8005346:	ed93 6b00 	vldr	d6, [r3]
 800534a:	ed97 7b06 	vldr	d7, [r7, #24]
 800534e:	ee36 7b47 	vsub.f64	d7, d6, d7
 8005352:	eeb0 1b08 	vmov.f64	d1, #8	; 0x40400000  3.0
 8005356:	eeb0 0b47 	vmov.f64	d0, d7
 800535a:	f00c faed 	bl	8011938 <pow>
 800535e:	eeb0 7b40 	vmov.f64	d7, d0
 8005362:	eeb1 5b08 	vmov.f64	d5, #24	; 0x40c00000  6.0
 8005366:	ee87 6b05 	vdiv.f64	d6, d7, d5
 800536a:	4b3e      	ldr	r3, [pc, #248]	; (8005464 <get_Straj+0xd5c>)
 800536c:	ed93 7b00 	vldr	d7, [r3]
 8005370:	ee26 7b07 	vmul.f64	d7, d6, d7
 8005374:	ee38 7b47 	vsub.f64	d7, d8, d7
 8005378:	4b3b      	ldr	r3, [pc, #236]	; (8005468 <get_Straj+0xd60>)
 800537a:	ed83 7b00 	vstr	d7, [r3]
        qd = vf+jmax*(pow(T-t,2))/2;
 800537e:	4b35      	ldr	r3, [pc, #212]	; (8005454 <get_Straj+0xd4c>)
 8005380:	ed93 6b00 	vldr	d6, [r3]
 8005384:	ed97 7b06 	vldr	d7, [r7, #24]
 8005388:	ee36 7b47 	vsub.f64	d7, d6, d7
 800538c:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8005390:	eeb0 0b47 	vmov.f64	d0, d7
 8005394:	f00c fad0 	bl	8011938 <pow>
 8005398:	eeb0 6b40 	vmov.f64	d6, d0
 800539c:	4b31      	ldr	r3, [pc, #196]	; (8005464 <get_Straj+0xd5c>)
 800539e:	ed93 7b00 	vldr	d7, [r3]
 80053a2:	ee26 7b07 	vmul.f64	d7, d6, d7
 80053a6:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 80053aa:	ee87 6b05 	vdiv.f64	d6, d7, d5
 80053ae:	4b2c      	ldr	r3, [pc, #176]	; (8005460 <get_Straj+0xd58>)
 80053b0:	ed93 7b00 	vldr	d7, [r3]
 80053b4:	ee36 7b07 	vadd.f64	d7, d6, d7
 80053b8:	4b2c      	ldr	r3, [pc, #176]	; (800546c <get_Straj+0xd64>)
 80053ba:	ed83 7b00 	vstr	d7, [r3]
        qdd = -jmax*(T-t);
 80053be:	4b29      	ldr	r3, [pc, #164]	; (8005464 <get_Straj+0xd5c>)
 80053c0:	ed93 7b00 	vldr	d7, [r3]
 80053c4:	eeb1 6b47 	vneg.f64	d6, d7
 80053c8:	4b22      	ldr	r3, [pc, #136]	; (8005454 <get_Straj+0xd4c>)
 80053ca:	ed93 5b00 	vldr	d5, [r3]
 80053ce:	ed97 7b06 	vldr	d7, [r7, #24]
 80053d2:	ee35 7b47 	vsub.f64	d7, d5, d7
 80053d6:	ee26 7b07 	vmul.f64	d7, d6, d7
 80053da:	4b25      	ldr	r3, [pc, #148]	; (8005470 <get_Straj+0xd68>)
 80053dc:	ed83 7b00 	vstr	d7, [r3]
        qddd = jmax;
 80053e0:	4b20      	ldr	r3, [pc, #128]	; (8005464 <get_Straj+0xd5c>)
 80053e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053e6:	4923      	ldr	r1, [pc, #140]	; (8005474 <get_Straj+0xd6c>)
 80053e8:	e9c1 2300 	strd	r2, r3, [r1]
        if (flagInv){
 80053ec:	4b22      	ldr	r3, [pc, #136]	; (8005478 <get_Straj+0xd70>)
 80053ee:	781b      	ldrb	r3, [r3, #0]
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d022      	beq.n	800543a <get_Straj+0xd32>
            //printf("inv tramo7\n");
            q=-q; qd=-qd; qdd=-qdd; qddd=-qddd;
 80053f4:	4b1c      	ldr	r3, [pc, #112]	; (8005468 <get_Straj+0xd60>)
 80053f6:	ed93 7b00 	vldr	d7, [r3]
 80053fa:	eeb1 7b47 	vneg.f64	d7, d7
 80053fe:	4b1a      	ldr	r3, [pc, #104]	; (8005468 <get_Straj+0xd60>)
 8005400:	ed83 7b00 	vstr	d7, [r3]
 8005404:	4b19      	ldr	r3, [pc, #100]	; (800546c <get_Straj+0xd64>)
 8005406:	ed93 7b00 	vldr	d7, [r3]
 800540a:	eeb1 7b47 	vneg.f64	d7, d7
 800540e:	4b17      	ldr	r3, [pc, #92]	; (800546c <get_Straj+0xd64>)
 8005410:	ed83 7b00 	vstr	d7, [r3]
 8005414:	4b16      	ldr	r3, [pc, #88]	; (8005470 <get_Straj+0xd68>)
 8005416:	ed93 7b00 	vldr	d7, [r3]
 800541a:	eeb1 7b47 	vneg.f64	d7, d7
 800541e:	4b14      	ldr	r3, [pc, #80]	; (8005470 <get_Straj+0xd68>)
 8005420:	ed83 7b00 	vstr	d7, [r3]
 8005424:	4b13      	ldr	r3, [pc, #76]	; (8005474 <get_Straj+0xd6c>)
 8005426:	ed93 7b00 	vldr	d7, [r3]
 800542a:	eeb1 7b47 	vneg.f64	d7, d7
 800542e:	4b11      	ldr	r3, [pc, #68]	; (8005474 <get_Straj+0xd6c>)
 8005430:	ed83 7b00 	vstr	d7, [r3]
            flagInv = false;
 8005434:	4b10      	ldr	r3, [pc, #64]	; (8005478 <get_Straj+0xd70>)
 8005436:	2200      	movs	r2, #0
 8005438:	701a      	strb	r2, [r3, #0]
        }
    }


    return qd;
 800543a:	4b0c      	ldr	r3, [pc, #48]	; (800546c <get_Straj+0xd64>)
 800543c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005440:	ec43 2b17 	vmov	d7, r2, r3
}
 8005444:	eeb0 0b47 	vmov.f64	d0, d7
 8005448:	3720      	adds	r7, #32
 800544a:	46bd      	mov	sp, r7
 800544c:	ecbd 8b06 	vpop	{d8-d10}
 8005450:	bd80      	pop	{r7, pc}
 8005452:	bf00      	nop
 8005454:	24000890 	.word	0x24000890
 8005458:	240008b8 	.word	0x240008b8
 800545c:	240008d8 	.word	0x240008d8
 8005460:	24000490 	.word	0x24000490
 8005464:	24000008 	.word	0x24000008
 8005468:	24000460 	.word	0x24000460
 800546c:	24000468 	.word	0x24000468
 8005470:	24000470 	.word	0x24000470
 8005474:	24000478 	.word	0x24000478
 8005478:	24000870 	.word	0x24000870
 800547c:	00000000 	.word	0x00000000

08005480 <update_ScurveTraj>:


void update_ScurveTraj(double _qi ,double _qf, double vi,double vf ,double vmax,double amax,double jmax, double *params){
 8005480:	b580      	push	{r7, lr}
 8005482:	ed2d 8b04 	vpush	{d8-d9}
 8005486:	b092      	sub	sp, #72	; 0x48
 8005488:	af00      	add	r7, sp, #0
 800548a:	ed87 0b0e 	vstr	d0, [r7, #56]	; 0x38
 800548e:	ed87 1b0c 	vstr	d1, [r7, #48]	; 0x30
 8005492:	ed87 2b0a 	vstr	d2, [r7, #40]	; 0x28
 8005496:	ed87 3b08 	vstr	d3, [r7, #32]
 800549a:	ed87 4b06 	vstr	d4, [r7, #24]
 800549e:	ed87 5b04 	vstr	d5, [r7, #16]
 80054a2:	ed87 6b02 	vstr	d6, [r7, #8]
 80054a6:	6078      	str	r0, [r7, #4]

	jmin = -jmax;
 80054a8:	ed97 7b02 	vldr	d7, [r7, #8]
 80054ac:	eeb1 7b47 	vneg.f64	d7, d7
 80054b0:	4b9e      	ldr	r3, [pc, #632]	; (800572c <update_ScurveTraj+0x2ac>)
 80054b2:	ed83 7b00 	vstr	d7, [r3]
	amin = -amax;
 80054b6:	ed97 7b04 	vldr	d7, [r7, #16]
 80054ba:	eeb1 7b47 	vneg.f64	d7, d7
 80054be:	4b9c      	ldr	r3, [pc, #624]	; (8005730 <update_ScurveTraj+0x2b0>)
 80054c0:	ed83 7b00 	vstr	d7, [r3]
	vmin = -vmax;
 80054c4:	ed97 7b06 	vldr	d7, [r7, #24]
 80054c8:	eeb1 7b47 	vneg.f64	d7, d7
 80054cc:	4b99      	ldr	r3, [pc, #612]	; (8005734 <update_ScurveTraj+0x2b4>)
 80054ce:	ed83 7b00 	vstr	d7, [r3]
	qi=_qi;
 80054d2:	4999      	ldr	r1, [pc, #612]	; (8005738 <update_ScurveTraj+0x2b8>)
 80054d4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80054d8:	e9c1 2300 	strd	r2, r3, [r1]
	qf=_qf;
 80054dc:	4997      	ldr	r1, [pc, #604]	; (800573c <update_ScurveTraj+0x2bc>)
 80054de:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80054e2:	e9c1 2300 	strd	r2, r3, [r1]

	if (qf < qi){
 80054e6:	4b95      	ldr	r3, [pc, #596]	; (800573c <update_ScurveTraj+0x2bc>)
 80054e8:	ed93 6b00 	vldr	d6, [r3]
 80054ec:	4b92      	ldr	r3, [pc, #584]	; (8005738 <update_ScurveTraj+0x2b8>)
 80054ee:	ed93 7b00 	vldr	d7, [r3]
 80054f2:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80054f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80054fa:	d548      	bpl.n	800558e <update_ScurveTraj+0x10e>

		flagInv = true;
 80054fc:	4b90      	ldr	r3, [pc, #576]	; (8005740 <update_ScurveTraj+0x2c0>)
 80054fe:	2201      	movs	r2, #1
 8005500:	701a      	strb	r2, [r3, #0]

		qi = -qi;
 8005502:	4b8d      	ldr	r3, [pc, #564]	; (8005738 <update_ScurveTraj+0x2b8>)
 8005504:	ed93 7b00 	vldr	d7, [r3]
 8005508:	eeb1 7b47 	vneg.f64	d7, d7
 800550c:	4b8a      	ldr	r3, [pc, #552]	; (8005738 <update_ScurveTraj+0x2b8>)
 800550e:	ed83 7b00 	vstr	d7, [r3]
		qf = -qf;
 8005512:	4b8a      	ldr	r3, [pc, #552]	; (800573c <update_ScurveTraj+0x2bc>)
 8005514:	ed93 7b00 	vldr	d7, [r3]
 8005518:	eeb1 7b47 	vneg.f64	d7, d7
 800551c:	4b87      	ldr	r3, [pc, #540]	; (800573c <update_ScurveTraj+0x2bc>)
 800551e:	ed83 7b00 	vstr	d7, [r3]
		vi = -vi;
 8005522:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 8005526:	eeb1 7b47 	vneg.f64	d7, d7
 800552a:	ed87 7b0a 	vstr	d7, [r7, #40]	; 0x28
		vf = -vf;
 800552e:	ed97 7b08 	vldr	d7, [r7, #32]
 8005532:	eeb1 7b47 	vneg.f64	d7, d7
 8005536:	ed87 7b08 	vstr	d7, [r7, #32]

		vmax = -vmin;
 800553a:	4b7e      	ldr	r3, [pc, #504]	; (8005734 <update_ScurveTraj+0x2b4>)
 800553c:	ed93 7b00 	vldr	d7, [r3]
 8005540:	eeb1 7b47 	vneg.f64	d7, d7
 8005544:	ed87 7b06 	vstr	d7, [r7, #24]
		vmin = -vmax;
 8005548:	ed97 7b06 	vldr	d7, [r7, #24]
 800554c:	eeb1 7b47 	vneg.f64	d7, d7
 8005550:	4b78      	ldr	r3, [pc, #480]	; (8005734 <update_ScurveTraj+0x2b4>)
 8005552:	ed83 7b00 	vstr	d7, [r3]
		amax = -amin;
 8005556:	4b76      	ldr	r3, [pc, #472]	; (8005730 <update_ScurveTraj+0x2b0>)
 8005558:	ed93 7b00 	vldr	d7, [r3]
 800555c:	eeb1 7b47 	vneg.f64	d7, d7
 8005560:	ed87 7b04 	vstr	d7, [r7, #16]
		amin = -amax;
 8005564:	ed97 7b04 	vldr	d7, [r7, #16]
 8005568:	eeb1 7b47 	vneg.f64	d7, d7
 800556c:	4b70      	ldr	r3, [pc, #448]	; (8005730 <update_ScurveTraj+0x2b0>)
 800556e:	ed83 7b00 	vstr	d7, [r3]
		jmax = -jmin;
 8005572:	4b6e      	ldr	r3, [pc, #440]	; (800572c <update_ScurveTraj+0x2ac>)
 8005574:	ed93 7b00 	vldr	d7, [r3]
 8005578:	eeb1 7b47 	vneg.f64	d7, d7
 800557c:	ed87 7b02 	vstr	d7, [r7, #8]
		jmin = -jmax;
 8005580:	ed97 7b02 	vldr	d7, [r7, #8]
 8005584:	eeb1 7b47 	vneg.f64	d7, d7
 8005588:	4b68      	ldr	r3, [pc, #416]	; (800572c <update_ScurveTraj+0x2ac>)
 800558a:	ed83 7b00 	vstr	d7, [r3]

	}

	volatile float Tjaux = MIN(sqrt(fabs(vf-vi)/jmax),amax/jmax);
 800558e:	ed97 6b08 	vldr	d6, [r7, #32]
 8005592:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 8005596:	ee36 7b47 	vsub.f64	d7, d6, d7
 800559a:	eeb0 6bc7 	vabs.f64	d6, d7
 800559e:	ed97 7b02 	vldr	d7, [r7, #8]
 80055a2:	ee86 5b07 	vdiv.f64	d5, d6, d7
 80055a6:	eeb0 0b45 	vmov.f64	d0, d5
 80055aa:	f00c fc45 	bl	8011e38 <sqrt>
 80055ae:	eeb0 4b40 	vmov.f64	d4, d0
 80055b2:	ed97 5b04 	vldr	d5, [r7, #16]
 80055b6:	ed97 6b02 	vldr	d6, [r7, #8]
 80055ba:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80055be:	eeb4 4bc7 	vcmpe.f64	d4, d7
 80055c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80055c6:	d512      	bpl.n	80055ee <update_ScurveTraj+0x16e>
 80055c8:	ed97 6b08 	vldr	d6, [r7, #32]
 80055cc:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 80055d0:	ee36 7b47 	vsub.f64	d7, d6, d7
 80055d4:	eeb0 6bc7 	vabs.f64	d6, d7
 80055d8:	ed97 7b02 	vldr	d7, [r7, #8]
 80055dc:	ee86 5b07 	vdiv.f64	d5, d6, d7
 80055e0:	eeb0 0b45 	vmov.f64	d0, d5
 80055e4:	f00c fc28 	bl	8011e38 <sqrt>
 80055e8:	eeb0 7b40 	vmov.f64	d7, d0
 80055ec:	e005      	b.n	80055fa <update_ScurveTraj+0x17a>
 80055ee:	ed97 5b04 	vldr	d5, [r7, #16]
 80055f2:	ed97 6b02 	vldr	d6, [r7, #8]
 80055f6:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80055fa:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80055fe:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44


	if (Tjaux<amax/jmax){
 8005602:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8005606:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 800560a:	ed97 4b04 	vldr	d4, [r7, #16]
 800560e:	ed97 5b02 	vldr	d5, [r7, #8]
 8005612:	ee84 7b05 	vdiv.f64	d7, d4, d5
 8005616:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800561a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800561e:	d400      	bmi.n	8005622 <update_ScurveTraj+0x1a2>
		//if (qf-qi > Tjaux*(vi+vf)) {printf("the trajectory is feasible \n");}
		//else {printf("the trajectory is NOT \n");}
	}
	else if (Tjaux == amax/jmax){
 8005620:	6c7b      	ldr	r3, [r7, #68]	; 0x44
		//if (qf-qi > 0.5*(vi+vf)*(Tjaux+fabs(vi+vf)/amax)) {printf("the trajectory is feasible\n");}
		//else {printf("the trajectory is NOT feasible\n");}
	}
	//Phase 1: acceleration
	if ((vmax-vi)*jmax < pow(amax,2)){
 8005622:	ed97 6b06 	vldr	d6, [r7, #24]
 8005626:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 800562a:	ee36 6b47 	vsub.f64	d6, d6, d7
 800562e:	ed97 7b02 	vldr	d7, [r7, #8]
 8005632:	ee26 8b07 	vmul.f64	d8, d6, d7
 8005636:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 800563a:	ed97 0b04 	vldr	d0, [r7, #16]
 800563e:	f00c f97b 	bl	8011938 <pow>
 8005642:	eeb0 7b40 	vmov.f64	d7, d0
 8005646:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800564a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800564e:	d51d      	bpl.n	800568c <update_ScurveTraj+0x20c>
		//printf("amax is NOT reached\n");

		Tj1=sqrt(fabs(vmax-vi)/jmax);
 8005650:	ed97 6b06 	vldr	d6, [r7, #24]
 8005654:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 8005658:	ee36 7b47 	vsub.f64	d7, d6, d7
 800565c:	eeb0 6bc7 	vabs.f64	d6, d7
 8005660:	ed97 7b02 	vldr	d7, [r7, #8]
 8005664:	ee86 5b07 	vdiv.f64	d5, d6, d7
 8005668:	eeb0 0b45 	vmov.f64	d0, d5
 800566c:	f00c fbe4 	bl	8011e38 <sqrt>
 8005670:	eeb0 7b40 	vmov.f64	d7, d0
 8005674:	4b33      	ldr	r3, [pc, #204]	; (8005744 <update_ScurveTraj+0x2c4>)
 8005676:	ed83 7b00 	vstr	d7, [r3]
		Ta=Tj1*2;
 800567a:	4b32      	ldr	r3, [pc, #200]	; (8005744 <update_ScurveTraj+0x2c4>)
 800567c:	ed93 7b00 	vldr	d7, [r3]
 8005680:	ee37 7b07 	vadd.f64	d7, d7, d7
 8005684:	4b30      	ldr	r3, [pc, #192]	; (8005748 <update_ScurveTraj+0x2c8>)
 8005686:	ed83 7b00 	vstr	d7, [r3]
 800568a:	e01a      	b.n	80056c2 <update_ScurveTraj+0x242>
	}
	else{
		//printf("amax is reached\n");
		Tj1=amax/jmax;
 800568c:	ed97 5b04 	vldr	d5, [r7, #16]
 8005690:	ed97 6b02 	vldr	d6, [r7, #8]
 8005694:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8005698:	4b2a      	ldr	r3, [pc, #168]	; (8005744 <update_ScurveTraj+0x2c4>)
 800569a:	ed83 7b00 	vstr	d7, [r3]
		Ta=Tj1+(vmax-vi)/amax;
 800569e:	ed97 6b06 	vldr	d6, [r7, #24]
 80056a2:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 80056a6:	ee36 5b47 	vsub.f64	d5, d6, d7
 80056aa:	ed97 7b04 	vldr	d7, [r7, #16]
 80056ae:	ee85 6b07 	vdiv.f64	d6, d5, d7
 80056b2:	4b24      	ldr	r3, [pc, #144]	; (8005744 <update_ScurveTraj+0x2c4>)
 80056b4:	ed93 7b00 	vldr	d7, [r3]
 80056b8:	ee36 7b07 	vadd.f64	d7, d6, d7
 80056bc:	4b22      	ldr	r3, [pc, #136]	; (8005748 <update_ScurveTraj+0x2c8>)
 80056be:	ed83 7b00 	vstr	d7, [r3]
	}

	//Phase 3: Desacceleration


	if ((vmax-vf)*jmax < pow(amax,2)){
 80056c2:	ed97 6b06 	vldr	d6, [r7, #24]
 80056c6:	ed97 7b08 	vldr	d7, [r7, #32]
 80056ca:	ee36 6b47 	vsub.f64	d6, d6, d7
 80056ce:	ed97 7b02 	vldr	d7, [r7, #8]
 80056d2:	ee26 8b07 	vmul.f64	d8, d6, d7
 80056d6:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 80056da:	ed97 0b04 	vldr	d0, [r7, #16]
 80056de:	f00c f92b 	bl	8011938 <pow>
 80056e2:	eeb0 7b40 	vmov.f64	d7, d0
 80056e6:	eeb4 8bc7 	vcmpe.f64	d8, d7
 80056ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80056ee:	d531      	bpl.n	8005754 <update_ScurveTraj+0x2d4>
		//printf("amin is NOT reached\n");

		Tj2=sqrt(fabs(vmax-vf)/jmax);
 80056f0:	ed97 6b06 	vldr	d6, [r7, #24]
 80056f4:	ed97 7b08 	vldr	d7, [r7, #32]
 80056f8:	ee36 7b47 	vsub.f64	d7, d6, d7
 80056fc:	eeb0 6bc7 	vabs.f64	d6, d7
 8005700:	ed97 7b02 	vldr	d7, [r7, #8]
 8005704:	ee86 5b07 	vdiv.f64	d5, d6, d7
 8005708:	eeb0 0b45 	vmov.f64	d0, d5
 800570c:	f00c fb94 	bl	8011e38 <sqrt>
 8005710:	eeb0 7b40 	vmov.f64	d7, d0
 8005714:	4b0d      	ldr	r3, [pc, #52]	; (800574c <update_ScurveTraj+0x2cc>)
 8005716:	ed83 7b00 	vstr	d7, [r3]
		Td=Tj2*2;
 800571a:	4b0c      	ldr	r3, [pc, #48]	; (800574c <update_ScurveTraj+0x2cc>)
 800571c:	ed93 7b00 	vldr	d7, [r3]
 8005720:	ee37 7b07 	vadd.f64	d7, d7, d7
 8005724:	4b0a      	ldr	r3, [pc, #40]	; (8005750 <update_ScurveTraj+0x2d0>)
 8005726:	ed83 7b00 	vstr	d7, [r3]
 800572a:	e02e      	b.n	800578a <update_ScurveTraj+0x30a>
 800572c:	24000480 	.word	0x24000480
 8005730:	24000498 	.word	0x24000498
 8005734:	24000488 	.word	0x24000488
 8005738:	240008d0 	.word	0x240008d0
 800573c:	240008d8 	.word	0x240008d8
 8005740:	24000870 	.word	0x24000870
 8005744:	240008b0 	.word	0x240008b0
 8005748:	24000898 	.word	0x24000898
 800574c:	240008b8 	.word	0x240008b8
 8005750:	240008a0 	.word	0x240008a0
	}
	else{
		//printf("amin is reached\n");
		Tj2=amax/jmax;
 8005754:	ed97 5b04 	vldr	d5, [r7, #16]
 8005758:	ed97 6b02 	vldr	d6, [r7, #8]
 800575c:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8005760:	4b95      	ldr	r3, [pc, #596]	; (80059b8 <update_ScurveTraj+0x538>)
 8005762:	ed83 7b00 	vstr	d7, [r3]
		Td=Tj2+(vmax-vf)/amax;
 8005766:	ed97 6b06 	vldr	d6, [r7, #24]
 800576a:	ed97 7b08 	vldr	d7, [r7, #32]
 800576e:	ee36 5b47 	vsub.f64	d5, d6, d7
 8005772:	ed97 7b04 	vldr	d7, [r7, #16]
 8005776:	ee85 6b07 	vdiv.f64	d6, d5, d7
 800577a:	4b8f      	ldr	r3, [pc, #572]	; (80059b8 <update_ScurveTraj+0x538>)
 800577c:	ed93 7b00 	vldr	d7, [r3]
 8005780:	ee36 7b07 	vadd.f64	d7, d6, d7
 8005784:	4b8d      	ldr	r3, [pc, #564]	; (80059bc <update_ScurveTraj+0x53c>)
 8005786:	ed83 7b00 	vstr	d7, [r3]
	}


	Tv = (qf-qi)/vmax - (Ta/2)*(1+(vi/vmax))-(Td/2)*(1+(vf/vmax));
 800578a:	4b8d      	ldr	r3, [pc, #564]	; (80059c0 <update_ScurveTraj+0x540>)
 800578c:	ed93 6b00 	vldr	d6, [r3]
 8005790:	4b8c      	ldr	r3, [pc, #560]	; (80059c4 <update_ScurveTraj+0x544>)
 8005792:	ed93 7b00 	vldr	d7, [r3]
 8005796:	ee36 5b47 	vsub.f64	d5, d6, d7
 800579a:	ed97 7b06 	vldr	d7, [r7, #24]
 800579e:	ee85 6b07 	vdiv.f64	d6, d5, d7
 80057a2:	4b89      	ldr	r3, [pc, #548]	; (80059c8 <update_ScurveTraj+0x548>)
 80057a4:	ed93 7b00 	vldr	d7, [r3]
 80057a8:	eeb0 4b00 	vmov.f64	d4, #0	; 0x40000000  2.0
 80057ac:	ee87 5b04 	vdiv.f64	d5, d7, d4
 80057b0:	ed97 3b0a 	vldr	d3, [r7, #40]	; 0x28
 80057b4:	ed97 4b06 	vldr	d4, [r7, #24]
 80057b8:	ee83 7b04 	vdiv.f64	d7, d3, d4
 80057bc:	eeb7 4b00 	vmov.f64	d4, #112	; 0x3f800000  1.0
 80057c0:	ee37 7b04 	vadd.f64	d7, d7, d4
 80057c4:	ee25 7b07 	vmul.f64	d7, d5, d7
 80057c8:	ee36 6b47 	vsub.f64	d6, d6, d7
 80057cc:	4b7b      	ldr	r3, [pc, #492]	; (80059bc <update_ScurveTraj+0x53c>)
 80057ce:	ed93 7b00 	vldr	d7, [r3]
 80057d2:	eeb0 4b00 	vmov.f64	d4, #0	; 0x40000000  2.0
 80057d6:	ee87 5b04 	vdiv.f64	d5, d7, d4
 80057da:	ed97 3b08 	vldr	d3, [r7, #32]
 80057de:	ed97 4b06 	vldr	d4, [r7, #24]
 80057e2:	ee83 7b04 	vdiv.f64	d7, d3, d4
 80057e6:	eeb7 4b00 	vmov.f64	d4, #112	; 0x3f800000  1.0
 80057ea:	ee37 7b04 	vadd.f64	d7, d7, d4
 80057ee:	ee25 7b07 	vmul.f64	d7, d5, d7
 80057f2:	ee36 7b47 	vsub.f64	d7, d6, d7
 80057f6:	4b75      	ldr	r3, [pc, #468]	; (80059cc <update_ScurveTraj+0x54c>)
 80057f8:	ed83 7b00 	vstr	d7, [r3]

	if (Tv>0){
 80057fc:	4b73      	ldr	r3, [pc, #460]	; (80059cc <update_ScurveTraj+0x54c>)
 80057fe:	ed93 7b00 	vldr	d7, [r3]
 8005802:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8005806:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800580a:	f300 82d5 	bgt.w	8005db8 <update_ScurveTraj+0x938>
		//printf("the max velocity is reached\n");
	}
	else{
		//printf("CASE 2\n");
		//printf("In this case vmax is NOT reached, so Tv=0\n");
		Tj1=amax/jmax;
 800580e:	ed97 5b04 	vldr	d5, [r7, #16]
 8005812:	ed97 6b02 	vldr	d6, [r7, #8]
 8005816:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800581a:	4b6d      	ldr	r3, [pc, #436]	; (80059d0 <update_ScurveTraj+0x550>)
 800581c:	ed83 7b00 	vstr	d7, [r3]
		Tj2=Tj1;
 8005820:	4b6b      	ldr	r3, [pc, #428]	; (80059d0 <update_ScurveTraj+0x550>)
 8005822:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005826:	4964      	ldr	r1, [pc, #400]	; (80059b8 <update_ScurveTraj+0x538>)
 8005828:	e9c1 2300 	strd	r2, r3, [r1]
		Tj=Tj1;
 800582c:	4b68      	ldr	r3, [pc, #416]	; (80059d0 <update_ScurveTraj+0x550>)
 800582e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005832:	4968      	ldr	r1, [pc, #416]	; (80059d4 <update_ScurveTraj+0x554>)
 8005834:	e9c1 2300 	strd	r2, r3, [r1]
		delta = (pow(amax,4)/pow(jmax,2))+2*(pow(vi,2)+pow(vf,2))+amax*(4*(qf-qi)-2*(amax/jmax)*(vi+vf));
 8005838:	eeb1 1b00 	vmov.f64	d1, #16	; 0x40800000  4.0
 800583c:	ed97 0b04 	vldr	d0, [r7, #16]
 8005840:	f00c f87a 	bl	8011938 <pow>
 8005844:	eeb0 9b40 	vmov.f64	d9, d0
 8005848:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 800584c:	ed97 0b02 	vldr	d0, [r7, #8]
 8005850:	f00c f872 	bl	8011938 <pow>
 8005854:	eeb0 7b40 	vmov.f64	d7, d0
 8005858:	ee89 8b07 	vdiv.f64	d8, d9, d7
 800585c:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8005860:	ed97 0b0a 	vldr	d0, [r7, #40]	; 0x28
 8005864:	f00c f868 	bl	8011938 <pow>
 8005868:	eeb0 9b40 	vmov.f64	d9, d0
 800586c:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8005870:	ed97 0b08 	vldr	d0, [r7, #32]
 8005874:	f00c f860 	bl	8011938 <pow>
 8005878:	eeb0 7b40 	vmov.f64	d7, d0
 800587c:	ee39 7b07 	vadd.f64	d7, d9, d7
 8005880:	ee37 7b07 	vadd.f64	d7, d7, d7
 8005884:	ee38 6b07 	vadd.f64	d6, d8, d7
 8005888:	4b4d      	ldr	r3, [pc, #308]	; (80059c0 <update_ScurveTraj+0x540>)
 800588a:	ed93 5b00 	vldr	d5, [r3]
 800588e:	4b4d      	ldr	r3, [pc, #308]	; (80059c4 <update_ScurveTraj+0x544>)
 8005890:	ed93 7b00 	vldr	d7, [r3]
 8005894:	ee35 7b47 	vsub.f64	d7, d5, d7
 8005898:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 800589c:	ee27 5b05 	vmul.f64	d5, d7, d5
 80058a0:	ed97 3b04 	vldr	d3, [r7, #16]
 80058a4:	ed97 4b02 	vldr	d4, [r7, #8]
 80058a8:	ee83 7b04 	vdiv.f64	d7, d3, d4
 80058ac:	ee37 4b07 	vadd.f64	d4, d7, d7
 80058b0:	ed97 3b0a 	vldr	d3, [r7, #40]	; 0x28
 80058b4:	ed97 7b08 	vldr	d7, [r7, #32]
 80058b8:	ee33 7b07 	vadd.f64	d7, d3, d7
 80058bc:	ee24 7b07 	vmul.f64	d7, d4, d7
 80058c0:	ee35 5b47 	vsub.f64	d5, d5, d7
 80058c4:	ed97 7b04 	vldr	d7, [r7, #16]
 80058c8:	ee25 7b07 	vmul.f64	d7, d5, d7
 80058cc:	ee36 7b07 	vadd.f64	d7, d6, d7
 80058d0:	4b41      	ldr	r3, [pc, #260]	; (80059d8 <update_ScurveTraj+0x558>)
 80058d2:	ed83 7b00 	vstr	d7, [r3]
		Ta=((pow(amax,2)/jmax)-2*vi+sqrt(delta))/(2*amax);
 80058d6:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 80058da:	ed97 0b04 	vldr	d0, [r7, #16]
 80058de:	f00c f82b 	bl	8011938 <pow>
 80058e2:	eeb0 5b40 	vmov.f64	d5, d0
 80058e6:	ed97 7b02 	vldr	d7, [r7, #8]
 80058ea:	ee85 6b07 	vdiv.f64	d6, d5, d7
 80058ee:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 80058f2:	ee37 7b07 	vadd.f64	d7, d7, d7
 80058f6:	ee36 8b47 	vsub.f64	d8, d6, d7
 80058fa:	4b37      	ldr	r3, [pc, #220]	; (80059d8 <update_ScurveTraj+0x558>)
 80058fc:	ed93 7b00 	vldr	d7, [r3]
 8005900:	eeb0 0b47 	vmov.f64	d0, d7
 8005904:	f00c fa98 	bl	8011e38 <sqrt>
 8005908:	eeb0 7b40 	vmov.f64	d7, d0
 800590c:	ee38 5b07 	vadd.f64	d5, d8, d7
 8005910:	ed97 7b04 	vldr	d7, [r7, #16]
 8005914:	ee37 6b07 	vadd.f64	d6, d7, d7
 8005918:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800591c:	4b2a      	ldr	r3, [pc, #168]	; (80059c8 <update_ScurveTraj+0x548>)
 800591e:	ed83 7b00 	vstr	d7, [r3]
		Td=((pow(amax,2)/jmax)-2*vf+sqrt(delta))/(2*amax);
 8005922:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8005926:	ed97 0b04 	vldr	d0, [r7, #16]
 800592a:	f00c f805 	bl	8011938 <pow>
 800592e:	eeb0 5b40 	vmov.f64	d5, d0
 8005932:	ed97 7b02 	vldr	d7, [r7, #8]
 8005936:	ee85 6b07 	vdiv.f64	d6, d5, d7
 800593a:	ed97 7b08 	vldr	d7, [r7, #32]
 800593e:	ee37 7b07 	vadd.f64	d7, d7, d7
 8005942:	ee36 8b47 	vsub.f64	d8, d6, d7
 8005946:	4b24      	ldr	r3, [pc, #144]	; (80059d8 <update_ScurveTraj+0x558>)
 8005948:	ed93 7b00 	vldr	d7, [r3]
 800594c:	eeb0 0b47 	vmov.f64	d0, d7
 8005950:	f00c fa72 	bl	8011e38 <sqrt>
 8005954:	eeb0 7b40 	vmov.f64	d7, d0
 8005958:	ee38 5b07 	vadd.f64	d5, d8, d7
 800595c:	ed97 7b04 	vldr	d7, [r7, #16]
 8005960:	ee37 6b07 	vadd.f64	d6, d7, d7
 8005964:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8005968:	4b14      	ldr	r3, [pc, #80]	; (80059bc <update_ScurveTraj+0x53c>)
 800596a:	ed83 7b00 	vstr	d7, [r3]
		Tv=0;
 800596e:	4917      	ldr	r1, [pc, #92]	; (80059cc <update_ScurveTraj+0x54c>)
 8005970:	f04f 0200 	mov.w	r2, #0
 8005974:	f04f 0300 	mov.w	r3, #0
 8005978:	e9c1 2300 	strd	r2, r3, [r1]


		if (Ta<2*Tj || Td<2*Tj){
 800597c:	4b15      	ldr	r3, [pc, #84]	; (80059d4 <update_ScurveTraj+0x554>)
 800597e:	ed93 7b00 	vldr	d7, [r3]
 8005982:	ee37 6b07 	vadd.f64	d6, d7, d7
 8005986:	4b10      	ldr	r3, [pc, #64]	; (80059c8 <update_ScurveTraj+0x548>)
 8005988:	ed93 7b00 	vldr	d7, [r3]
 800598c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8005990:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005994:	f300 81e4 	bgt.w	8005d60 <update_ScurveTraj+0x8e0>
 8005998:	4b0e      	ldr	r3, [pc, #56]	; (80059d4 <update_ScurveTraj+0x554>)
 800599a:	ed93 7b00 	vldr	d7, [r3]
 800599e:	ee37 6b07 	vadd.f64	d6, d7, d7
 80059a2:	4b06      	ldr	r3, [pc, #24]	; (80059bc <update_ScurveTraj+0x53c>)
 80059a4:	ed93 7b00 	vldr	d7, [r3]
 80059a8:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80059ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80059b0:	f340 8202 	ble.w	8005db8 <update_ScurveTraj+0x938>
			//printf("entre\n");
			while (!(Ta>2*Tj && Td>2*Tj)){
 80059b4:	e1d4      	b.n	8005d60 <update_ScurveTraj+0x8e0>
 80059b6:	bf00      	nop
 80059b8:	240008b8 	.word	0x240008b8
 80059bc:	240008a0 	.word	0x240008a0
 80059c0:	240008d8 	.word	0x240008d8
 80059c4:	240008d0 	.word	0x240008d0
 80059c8:	24000898 	.word	0x24000898
 80059cc:	240008a8 	.word	0x240008a8
 80059d0:	240008b0 	.word	0x240008b0
 80059d4:	240008c0 	.word	0x240008c0
 80059d8:	240008c8 	.word	0x240008c8

				amax=amax*0.99;
 80059dc:	ed97 7b04 	vldr	d7, [r7, #16]
 80059e0:	ed9f 6bd5 	vldr	d6, [pc, #852]	; 8005d38 <update_ScurveTraj+0x8b8>
 80059e4:	ee27 7b06 	vmul.f64	d7, d7, d6
 80059e8:	ed87 7b04 	vstr	d7, [r7, #16]
				Tj=amax/jmax;
 80059ec:	ed97 5b04 	vldr	d5, [r7, #16]
 80059f0:	ed97 6b02 	vldr	d6, [r7, #8]
 80059f4:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80059f8:	4bd1      	ldr	r3, [pc, #836]	; (8005d40 <update_ScurveTraj+0x8c0>)
 80059fa:	ed83 7b00 	vstr	d7, [r3]
				delta = (pow(amax,4)/pow(jmax,2))+2*(pow(vi,2)+pow(vf,2))+amax*(4*(qf-qi)-2*(amax/jmax)*(vi+vf));
 80059fe:	eeb1 1b00 	vmov.f64	d1, #16	; 0x40800000  4.0
 8005a02:	ed97 0b04 	vldr	d0, [r7, #16]
 8005a06:	f00b ff97 	bl	8011938 <pow>
 8005a0a:	eeb0 9b40 	vmov.f64	d9, d0
 8005a0e:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8005a12:	ed97 0b02 	vldr	d0, [r7, #8]
 8005a16:	f00b ff8f 	bl	8011938 <pow>
 8005a1a:	eeb0 7b40 	vmov.f64	d7, d0
 8005a1e:	ee89 8b07 	vdiv.f64	d8, d9, d7
 8005a22:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8005a26:	ed97 0b0a 	vldr	d0, [r7, #40]	; 0x28
 8005a2a:	f00b ff85 	bl	8011938 <pow>
 8005a2e:	eeb0 9b40 	vmov.f64	d9, d0
 8005a32:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8005a36:	ed97 0b08 	vldr	d0, [r7, #32]
 8005a3a:	f00b ff7d 	bl	8011938 <pow>
 8005a3e:	eeb0 7b40 	vmov.f64	d7, d0
 8005a42:	ee39 7b07 	vadd.f64	d7, d9, d7
 8005a46:	ee37 7b07 	vadd.f64	d7, d7, d7
 8005a4a:	ee38 6b07 	vadd.f64	d6, d8, d7
 8005a4e:	4bbd      	ldr	r3, [pc, #756]	; (8005d44 <update_ScurveTraj+0x8c4>)
 8005a50:	ed93 5b00 	vldr	d5, [r3]
 8005a54:	4bbc      	ldr	r3, [pc, #752]	; (8005d48 <update_ScurveTraj+0x8c8>)
 8005a56:	ed93 7b00 	vldr	d7, [r3]
 8005a5a:	ee35 7b47 	vsub.f64	d7, d5, d7
 8005a5e:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 8005a62:	ee27 5b05 	vmul.f64	d5, d7, d5
 8005a66:	ed97 3b04 	vldr	d3, [r7, #16]
 8005a6a:	ed97 4b02 	vldr	d4, [r7, #8]
 8005a6e:	ee83 7b04 	vdiv.f64	d7, d3, d4
 8005a72:	ee37 4b07 	vadd.f64	d4, d7, d7
 8005a76:	ed97 3b0a 	vldr	d3, [r7, #40]	; 0x28
 8005a7a:	ed97 7b08 	vldr	d7, [r7, #32]
 8005a7e:	ee33 7b07 	vadd.f64	d7, d3, d7
 8005a82:	ee24 7b07 	vmul.f64	d7, d4, d7
 8005a86:	ee35 5b47 	vsub.f64	d5, d5, d7
 8005a8a:	ed97 7b04 	vldr	d7, [r7, #16]
 8005a8e:	ee25 7b07 	vmul.f64	d7, d5, d7
 8005a92:	ee36 7b07 	vadd.f64	d7, d6, d7
 8005a96:	4bad      	ldr	r3, [pc, #692]	; (8005d4c <update_ScurveTraj+0x8cc>)
 8005a98:	ed83 7b00 	vstr	d7, [r3]
				Ta=((pow(amax,2)/jmax)-2*vi+sqrt(delta))/(2*amax);
 8005a9c:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8005aa0:	ed97 0b04 	vldr	d0, [r7, #16]
 8005aa4:	f00b ff48 	bl	8011938 <pow>
 8005aa8:	eeb0 5b40 	vmov.f64	d5, d0
 8005aac:	ed97 7b02 	vldr	d7, [r7, #8]
 8005ab0:	ee85 6b07 	vdiv.f64	d6, d5, d7
 8005ab4:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 8005ab8:	ee37 7b07 	vadd.f64	d7, d7, d7
 8005abc:	ee36 8b47 	vsub.f64	d8, d6, d7
 8005ac0:	4ba2      	ldr	r3, [pc, #648]	; (8005d4c <update_ScurveTraj+0x8cc>)
 8005ac2:	ed93 7b00 	vldr	d7, [r3]
 8005ac6:	eeb0 0b47 	vmov.f64	d0, d7
 8005aca:	f00c f9b5 	bl	8011e38 <sqrt>
 8005ace:	eeb0 7b40 	vmov.f64	d7, d0
 8005ad2:	ee38 5b07 	vadd.f64	d5, d8, d7
 8005ad6:	ed97 7b04 	vldr	d7, [r7, #16]
 8005ada:	ee37 6b07 	vadd.f64	d6, d7, d7
 8005ade:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8005ae2:	4b9b      	ldr	r3, [pc, #620]	; (8005d50 <update_ScurveTraj+0x8d0>)
 8005ae4:	ed83 7b00 	vstr	d7, [r3]
				Td=((pow(amax,2)/jmax)-2*vf+sqrt(delta))/(2*amax);
 8005ae8:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8005aec:	ed97 0b04 	vldr	d0, [r7, #16]
 8005af0:	f00b ff22 	bl	8011938 <pow>
 8005af4:	eeb0 5b40 	vmov.f64	d5, d0
 8005af8:	ed97 7b02 	vldr	d7, [r7, #8]
 8005afc:	ee85 6b07 	vdiv.f64	d6, d5, d7
 8005b00:	ed97 7b08 	vldr	d7, [r7, #32]
 8005b04:	ee37 7b07 	vadd.f64	d7, d7, d7
 8005b08:	ee36 8b47 	vsub.f64	d8, d6, d7
 8005b0c:	4b8f      	ldr	r3, [pc, #572]	; (8005d4c <update_ScurveTraj+0x8cc>)
 8005b0e:	ed93 7b00 	vldr	d7, [r3]
 8005b12:	eeb0 0b47 	vmov.f64	d0, d7
 8005b16:	f00c f98f 	bl	8011e38 <sqrt>
 8005b1a:	eeb0 7b40 	vmov.f64	d7, d0
 8005b1e:	ee38 5b07 	vadd.f64	d5, d8, d7
 8005b22:	ed97 7b04 	vldr	d7, [r7, #16]
 8005b26:	ee37 6b07 	vadd.f64	d6, d7, d7
 8005b2a:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8005b2e:	4b89      	ldr	r3, [pc, #548]	; (8005d54 <update_ScurveTraj+0x8d4>)
 8005b30:	ed83 7b00 	vstr	d7, [r3]

				//print(f'{i}',amax)


				if (Ta<0){
 8005b34:	4b86      	ldr	r3, [pc, #536]	; (8005d50 <update_ScurveTraj+0x8d0>)
 8005b36:	ed93 7b00 	vldr	d7, [r3]
 8005b3a:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8005b3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005b42:	d576      	bpl.n	8005c32 <update_ScurveTraj+0x7b2>
					Ta=0;
 8005b44:	4982      	ldr	r1, [pc, #520]	; (8005d50 <update_ScurveTraj+0x8d0>)
 8005b46:	f04f 0200 	mov.w	r2, #0
 8005b4a:	f04f 0300 	mov.w	r3, #0
 8005b4e:	e9c1 2300 	strd	r2, r3, [r1]
					Tj1=0;
 8005b52:	4981      	ldr	r1, [pc, #516]	; (8005d58 <update_ScurveTraj+0x8d8>)
 8005b54:	f04f 0200 	mov.w	r2, #0
 8005b58:	f04f 0300 	mov.w	r3, #0
 8005b5c:	e9c1 2300 	strd	r2, r3, [r1]
					Td=2*((qf-qi)/(vf+vi));
 8005b60:	4b78      	ldr	r3, [pc, #480]	; (8005d44 <update_ScurveTraj+0x8c4>)
 8005b62:	ed93 6b00 	vldr	d6, [r3]
 8005b66:	4b78      	ldr	r3, [pc, #480]	; (8005d48 <update_ScurveTraj+0x8c8>)
 8005b68:	ed93 7b00 	vldr	d7, [r3]
 8005b6c:	ee36 5b47 	vsub.f64	d5, d6, d7
 8005b70:	ed97 6b08 	vldr	d6, [r7, #32]
 8005b74:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 8005b78:	ee36 6b07 	vadd.f64	d6, d6, d7
 8005b7c:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8005b80:	ee37 7b07 	vadd.f64	d7, d7, d7
 8005b84:	4b73      	ldr	r3, [pc, #460]	; (8005d54 <update_ScurveTraj+0x8d4>)
 8005b86:	ed83 7b00 	vstr	d7, [r3]
					Tj2=(jmax*(qf-qi)-sqrt(jmax*(jmax*(pow(qf-qi,2))+pow(vf+vi,2)*(vf-vi))))/(jmax*(vf+vi));
 8005b8a:	4b6e      	ldr	r3, [pc, #440]	; (8005d44 <update_ScurveTraj+0x8c4>)
 8005b8c:	ed93 6b00 	vldr	d6, [r3]
 8005b90:	4b6d      	ldr	r3, [pc, #436]	; (8005d48 <update_ScurveTraj+0x8c8>)
 8005b92:	ed93 7b00 	vldr	d7, [r3]
 8005b96:	ee36 6b47 	vsub.f64	d6, d6, d7
 8005b9a:	ed97 7b02 	vldr	d7, [r7, #8]
 8005b9e:	ee26 8b07 	vmul.f64	d8, d6, d7
 8005ba2:	4b68      	ldr	r3, [pc, #416]	; (8005d44 <update_ScurveTraj+0x8c4>)
 8005ba4:	ed93 6b00 	vldr	d6, [r3]
 8005ba8:	4b67      	ldr	r3, [pc, #412]	; (8005d48 <update_ScurveTraj+0x8c8>)
 8005baa:	ed93 7b00 	vldr	d7, [r3]
 8005bae:	ee36 7b47 	vsub.f64	d7, d6, d7
 8005bb2:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8005bb6:	eeb0 0b47 	vmov.f64	d0, d7
 8005bba:	f00b febd 	bl	8011938 <pow>
 8005bbe:	eeb0 6b40 	vmov.f64	d6, d0
 8005bc2:	ed97 7b02 	vldr	d7, [r7, #8]
 8005bc6:	ee26 9b07 	vmul.f64	d9, d6, d7
 8005bca:	ed97 6b08 	vldr	d6, [r7, #32]
 8005bce:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 8005bd2:	ee36 7b07 	vadd.f64	d7, d6, d7
 8005bd6:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8005bda:	eeb0 0b47 	vmov.f64	d0, d7
 8005bde:	f00b feab 	bl	8011938 <pow>
 8005be2:	eeb0 5b40 	vmov.f64	d5, d0
 8005be6:	ed97 6b08 	vldr	d6, [r7, #32]
 8005bea:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 8005bee:	ee36 7b47 	vsub.f64	d7, d6, d7
 8005bf2:	ee25 7b07 	vmul.f64	d7, d5, d7
 8005bf6:	ee39 6b07 	vadd.f64	d6, d9, d7
 8005bfa:	ed97 7b02 	vldr	d7, [r7, #8]
 8005bfe:	ee26 7b07 	vmul.f64	d7, d6, d7
 8005c02:	eeb0 0b47 	vmov.f64	d0, d7
 8005c06:	f00c f917 	bl	8011e38 <sqrt>
 8005c0a:	eeb0 7b40 	vmov.f64	d7, d0
 8005c0e:	ee38 5b47 	vsub.f64	d5, d8, d7
 8005c12:	ed97 6b08 	vldr	d6, [r7, #32]
 8005c16:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 8005c1a:	ee36 6b07 	vadd.f64	d6, d6, d7
 8005c1e:	ed97 7b02 	vldr	d7, [r7, #8]
 8005c22:	ee26 6b07 	vmul.f64	d6, d6, d7
 8005c26:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8005c2a:	4b4c      	ldr	r3, [pc, #304]	; (8005d5c <update_ScurveTraj+0x8dc>)
 8005c2c:	ed83 7b00 	vstr	d7, [r3]
					break;
 8005c30:	e0c2      	b.n	8005db8 <update_ScurveTraj+0x938>
				}
				if (Td<0){
 8005c32:	4b48      	ldr	r3, [pc, #288]	; (8005d54 <update_ScurveTraj+0x8d4>)
 8005c34:	ed93 7b00 	vldr	d7, [r3]
 8005c38:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8005c3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005c40:	d400      	bmi.n	8005c44 <update_ScurveTraj+0x7c4>
 8005c42:	e08d      	b.n	8005d60 <update_ScurveTraj+0x8e0>
					Td=0;
 8005c44:	4943      	ldr	r1, [pc, #268]	; (8005d54 <update_ScurveTraj+0x8d4>)
 8005c46:	f04f 0200 	mov.w	r2, #0
 8005c4a:	f04f 0300 	mov.w	r3, #0
 8005c4e:	e9c1 2300 	strd	r2, r3, [r1]
					Ta=2*((qf-qi)/(vf+vi));
 8005c52:	4b3c      	ldr	r3, [pc, #240]	; (8005d44 <update_ScurveTraj+0x8c4>)
 8005c54:	ed93 6b00 	vldr	d6, [r3]
 8005c58:	4b3b      	ldr	r3, [pc, #236]	; (8005d48 <update_ScurveTraj+0x8c8>)
 8005c5a:	ed93 7b00 	vldr	d7, [r3]
 8005c5e:	ee36 5b47 	vsub.f64	d5, d6, d7
 8005c62:	ed97 6b08 	vldr	d6, [r7, #32]
 8005c66:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 8005c6a:	ee36 6b07 	vadd.f64	d6, d6, d7
 8005c6e:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8005c72:	ee37 7b07 	vadd.f64	d7, d7, d7
 8005c76:	4b36      	ldr	r3, [pc, #216]	; (8005d50 <update_ScurveTraj+0x8d0>)
 8005c78:	ed83 7b00 	vstr	d7, [r3]
					Tj1=(jmax*(qf-qi)-sqrt(jmax*(jmax*(pow(qf-qi,2))-pow(vf+vi,2)*(vf-vi))))/(jmax*(vf+vi));
 8005c7c:	4b31      	ldr	r3, [pc, #196]	; (8005d44 <update_ScurveTraj+0x8c4>)
 8005c7e:	ed93 6b00 	vldr	d6, [r3]
 8005c82:	4b31      	ldr	r3, [pc, #196]	; (8005d48 <update_ScurveTraj+0x8c8>)
 8005c84:	ed93 7b00 	vldr	d7, [r3]
 8005c88:	ee36 6b47 	vsub.f64	d6, d6, d7
 8005c8c:	ed97 7b02 	vldr	d7, [r7, #8]
 8005c90:	ee26 8b07 	vmul.f64	d8, d6, d7
 8005c94:	4b2b      	ldr	r3, [pc, #172]	; (8005d44 <update_ScurveTraj+0x8c4>)
 8005c96:	ed93 6b00 	vldr	d6, [r3]
 8005c9a:	4b2b      	ldr	r3, [pc, #172]	; (8005d48 <update_ScurveTraj+0x8c8>)
 8005c9c:	ed93 7b00 	vldr	d7, [r3]
 8005ca0:	ee36 7b47 	vsub.f64	d7, d6, d7
 8005ca4:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8005ca8:	eeb0 0b47 	vmov.f64	d0, d7
 8005cac:	f00b fe44 	bl	8011938 <pow>
 8005cb0:	eeb0 6b40 	vmov.f64	d6, d0
 8005cb4:	ed97 7b02 	vldr	d7, [r7, #8]
 8005cb8:	ee26 9b07 	vmul.f64	d9, d6, d7
 8005cbc:	ed97 6b08 	vldr	d6, [r7, #32]
 8005cc0:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 8005cc4:	ee36 7b07 	vadd.f64	d7, d6, d7
 8005cc8:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8005ccc:	eeb0 0b47 	vmov.f64	d0, d7
 8005cd0:	f00b fe32 	bl	8011938 <pow>
 8005cd4:	eeb0 5b40 	vmov.f64	d5, d0
 8005cd8:	ed97 6b08 	vldr	d6, [r7, #32]
 8005cdc:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 8005ce0:	ee36 7b47 	vsub.f64	d7, d6, d7
 8005ce4:	ee25 7b07 	vmul.f64	d7, d5, d7
 8005ce8:	ee39 6b47 	vsub.f64	d6, d9, d7
 8005cec:	ed97 7b02 	vldr	d7, [r7, #8]
 8005cf0:	ee26 7b07 	vmul.f64	d7, d6, d7
 8005cf4:	eeb0 0b47 	vmov.f64	d0, d7
 8005cf8:	f00c f89e 	bl	8011e38 <sqrt>
 8005cfc:	eeb0 7b40 	vmov.f64	d7, d0
 8005d00:	ee38 5b47 	vsub.f64	d5, d8, d7
 8005d04:	ed97 6b08 	vldr	d6, [r7, #32]
 8005d08:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 8005d0c:	ee36 6b07 	vadd.f64	d6, d6, d7
 8005d10:	ed97 7b02 	vldr	d7, [r7, #8]
 8005d14:	ee26 6b07 	vmul.f64	d6, d6, d7
 8005d18:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8005d1c:	4b0e      	ldr	r3, [pc, #56]	; (8005d58 <update_ScurveTraj+0x8d8>)
 8005d1e:	ed83 7b00 	vstr	d7, [r3]
					Tj2=0;
 8005d22:	490e      	ldr	r1, [pc, #56]	; (8005d5c <update_ScurveTraj+0x8dc>)
 8005d24:	f04f 0200 	mov.w	r2, #0
 8005d28:	f04f 0300 	mov.w	r3, #0
 8005d2c:	e9c1 2300 	strd	r2, r3, [r1]
					break;
 8005d30:	e042      	b.n	8005db8 <update_ScurveTraj+0x938>
 8005d32:	bf00      	nop
 8005d34:	f3af 8000 	nop.w
 8005d38:	7ae147ae 	.word	0x7ae147ae
 8005d3c:	3fefae14 	.word	0x3fefae14
 8005d40:	240008c0 	.word	0x240008c0
 8005d44:	240008d8 	.word	0x240008d8
 8005d48:	240008d0 	.word	0x240008d0
 8005d4c:	240008c8 	.word	0x240008c8
 8005d50:	24000898 	.word	0x24000898
 8005d54:	240008a0 	.word	0x240008a0
 8005d58:	240008b0 	.word	0x240008b0
 8005d5c:	240008b8 	.word	0x240008b8
			while (!(Ta>2*Tj && Td>2*Tj)){
 8005d60:	4b33      	ldr	r3, [pc, #204]	; (8005e30 <update_ScurveTraj+0x9b0>)
 8005d62:	ed93 7b00 	vldr	d7, [r3]
 8005d66:	ee37 6b07 	vadd.f64	d6, d7, d7
 8005d6a:	4b32      	ldr	r3, [pc, #200]	; (8005e34 <update_ScurveTraj+0x9b4>)
 8005d6c:	ed93 7b00 	vldr	d7, [r3]
 8005d70:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8005d74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005d78:	bf4c      	ite	mi
 8005d7a:	2301      	movmi	r3, #1
 8005d7c:	2300      	movpl	r3, #0
 8005d7e:	b2db      	uxtb	r3, r3
 8005d80:	f083 0301 	eor.w	r3, r3, #1
 8005d84:	b2db      	uxtb	r3, r3
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	f47f ae28 	bne.w	80059dc <update_ScurveTraj+0x55c>
 8005d8c:	4b28      	ldr	r3, [pc, #160]	; (8005e30 <update_ScurveTraj+0x9b0>)
 8005d8e:	ed93 7b00 	vldr	d7, [r3]
 8005d92:	ee37 6b07 	vadd.f64	d6, d7, d7
 8005d96:	4b28      	ldr	r3, [pc, #160]	; (8005e38 <update_ScurveTraj+0x9b8>)
 8005d98:	ed93 7b00 	vldr	d7, [r3]
 8005d9c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8005da0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005da4:	bf4c      	ite	mi
 8005da6:	2301      	movmi	r3, #1
 8005da8:	2300      	movpl	r3, #0
 8005daa:	b2db      	uxtb	r3, r3
 8005dac:	f083 0301 	eor.w	r3, r3, #1
 8005db0:	b2db      	uxtb	r3, r3
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	f47f ae12 	bne.w	80059dc <update_ScurveTraj+0x55c>
				}
			}
		}
	}

	*(params)=Tj1;
 8005db8:	4b20      	ldr	r3, [pc, #128]	; (8005e3c <update_ScurveTraj+0x9bc>)
 8005dba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005dbe:	6879      	ldr	r1, [r7, #4]
 8005dc0:	e9c1 2300 	strd	r2, r3, [r1]
	*(params+1)=Tj2;
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	f103 0108 	add.w	r1, r3, #8
 8005dca:	4b1d      	ldr	r3, [pc, #116]	; (8005e40 <update_ScurveTraj+0x9c0>)
 8005dcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005dd0:	e9c1 2300 	strd	r2, r3, [r1]
	*(params+2)=Tj;
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	f103 0110 	add.w	r1, r3, #16
 8005dda:	4b15      	ldr	r3, [pc, #84]	; (8005e30 <update_ScurveTraj+0x9b0>)
 8005ddc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005de0:	e9c1 2300 	strd	r2, r3, [r1]
	*(params+3)=Ta;
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	f103 0118 	add.w	r1, r3, #24
 8005dea:	4b12      	ldr	r3, [pc, #72]	; (8005e34 <update_ScurveTraj+0x9b4>)
 8005dec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005df0:	e9c1 2300 	strd	r2, r3, [r1]
	*(params+4)=Td;
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	f103 0120 	add.w	r1, r3, #32
 8005dfa:	4b0f      	ldr	r3, [pc, #60]	; (8005e38 <update_ScurveTraj+0x9b8>)
 8005dfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e00:	e9c1 2300 	strd	r2, r3, [r1]
	*(params+5)=Tv;
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	f103 0128 	add.w	r1, r3, #40	; 0x28
 8005e0a:	4b0e      	ldr	r3, [pc, #56]	; (8005e44 <update_ScurveTraj+0x9c4>)
 8005e0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e10:	e9c1 2300 	strd	r2, r3, [r1]
	*(params+6)=T;
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8005e1a:	4b0b      	ldr	r3, [pc, #44]	; (8005e48 <update_ScurveTraj+0x9c8>)
 8005e1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e20:	e9c1 2300 	strd	r2, r3, [r1]

}
 8005e24:	bf00      	nop
 8005e26:	3748      	adds	r7, #72	; 0x48
 8005e28:	46bd      	mov	sp, r7
 8005e2a:	ecbd 8b04 	vpop	{d8-d9}
 8005e2e:	bd80      	pop	{r7, pc}
 8005e30:	240008c0 	.word	0x240008c0
 8005e34:	24000898 	.word	0x24000898
 8005e38:	240008a0 	.word	0x240008a0
 8005e3c:	240008b0 	.word	0x240008b0
 8005e40:	240008b8 	.word	0x240008b8
 8005e44:	240008a8 	.word	0x240008a8
 8005e48:	24000890 	.word	0x24000890
 8005e4c:	00000000 	.word	0x00000000

08005e50 <setProfilTimer>:


void setProfilTimer(void){
 8005e50:	b480      	push	{r7}
 8005e52:	b083      	sub	sp, #12
 8005e54:	af00      	add	r7, sp, #0

	motor1.rpm = motor1.omega * RADs_TO_RPM;
 8005e56:	4bb8      	ldr	r3, [pc, #736]	; (8006138 <setProfilTimer+0x2e8>)
 8005e58:	ed93 7b02 	vldr	d7, [r3, #8]
 8005e5c:	ed9f 6bae 	vldr	d6, [pc, #696]	; 8006118 <setProfilTimer+0x2c8>
 8005e60:	ee27 7b06 	vmul.f64	d7, d7, d6
 8005e64:	4bb4      	ldr	r3, [pc, #720]	; (8006138 <setProfilTimer+0x2e8>)
 8005e66:	ed83 7b04 	vstr	d7, [r3, #16]
	motor2.rpm = motor2.omega * RADs_TO_RPM;
 8005e6a:	4bb4      	ldr	r3, [pc, #720]	; (800613c <setProfilTimer+0x2ec>)
 8005e6c:	ed93 7b02 	vldr	d7, [r3, #8]
 8005e70:	ed9f 6ba9 	vldr	d6, [pc, #676]	; 8006118 <setProfilTimer+0x2c8>
 8005e74:	ee27 7b06 	vmul.f64	d7, d7, d6
 8005e78:	4bb0      	ldr	r3, [pc, #704]	; (800613c <setProfilTimer+0x2ec>)
 8005e7a:	ed83 7b04 	vstr	d7, [r3, #16]
	motor3.rpm = motor3.omega * RADs_TO_RPM;
 8005e7e:	4bb0      	ldr	r3, [pc, #704]	; (8006140 <setProfilTimer+0x2f0>)
 8005e80:	ed93 7b02 	vldr	d7, [r3, #8]
 8005e84:	ed9f 6ba4 	vldr	d6, [pc, #656]	; 8006118 <setProfilTimer+0x2c8>
 8005e88:	ee27 7b06 	vmul.f64	d7, d7, d6
 8005e8c:	4bac      	ldr	r3, [pc, #688]	; (8006140 <setProfilTimer+0x2f0>)
 8005e8e:	ed83 7b04 	vstr	d7, [r3, #16]


    period[0] = COUNTERPERIOD(motor1.rpm);
 8005e92:	4bac      	ldr	r3, [pc, #688]	; (8006144 <setProfilTimer+0x2f4>)
 8005e94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e96:	ee07 3a90 	vmov	s15, r3
 8005e9a:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8005e9e:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8005ea2:	ee37 7b06 	vadd.f64	d7, d7, d6
 8005ea6:	ed9f 5b9e 	vldr	d5, [pc, #632]	; 8006120 <setProfilTimer+0x2d0>
 8005eaa:	ee85 6b07 	vdiv.f64	d6, d5, d7
 8005eae:	4ba2      	ldr	r3, [pc, #648]	; (8006138 <setProfilTimer+0x2e8>)
 8005eb0:	ed93 7b04 	vldr	d7, [r3, #16]
 8005eb4:	ed9f 5b9c 	vldr	d5, [pc, #624]	; 8006128 <setProfilTimer+0x2d8>
 8005eb8:	ee27 5b05 	vmul.f64	d5, d7, d5
 8005ebc:	ed9f 4b9c 	vldr	d4, [pc, #624]	; 8006130 <setProfilTimer+0x2e0>
 8005ec0:	ee84 7b05 	vdiv.f64	d7, d4, d5
 8005ec4:	ee26 7b07 	vmul.f64	d7, d6, d7
 8005ec8:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8005ecc:	ee37 7b46 	vsub.f64	d7, d7, d6
 8005ed0:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8005ed4:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8005ed8:	4b9b      	ldr	r3, [pc, #620]	; (8006148 <setProfilTimer+0x2f8>)
 8005eda:	ed83 7b00 	vstr	d7, [r3]
    period[1] = COUNTERPERIOD(motor2.rpm);
 8005ede:	4b99      	ldr	r3, [pc, #612]	; (8006144 <setProfilTimer+0x2f4>)
 8005ee0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ee2:	ee07 3a90 	vmov	s15, r3
 8005ee6:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8005eea:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8005eee:	ee37 7b06 	vadd.f64	d7, d7, d6
 8005ef2:	ed9f 5b8b 	vldr	d5, [pc, #556]	; 8006120 <setProfilTimer+0x2d0>
 8005ef6:	ee85 6b07 	vdiv.f64	d6, d5, d7
 8005efa:	4b90      	ldr	r3, [pc, #576]	; (800613c <setProfilTimer+0x2ec>)
 8005efc:	ed93 7b04 	vldr	d7, [r3, #16]
 8005f00:	ed9f 5b89 	vldr	d5, [pc, #548]	; 8006128 <setProfilTimer+0x2d8>
 8005f04:	ee27 5b05 	vmul.f64	d5, d7, d5
 8005f08:	ed9f 4b89 	vldr	d4, [pc, #548]	; 8006130 <setProfilTimer+0x2e0>
 8005f0c:	ee84 7b05 	vdiv.f64	d7, d4, d5
 8005f10:	ee26 7b07 	vmul.f64	d7, d6, d7
 8005f14:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8005f18:	ee37 7b46 	vsub.f64	d7, d7, d6
 8005f1c:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8005f20:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8005f24:	4b88      	ldr	r3, [pc, #544]	; (8006148 <setProfilTimer+0x2f8>)
 8005f26:	ed83 7b02 	vstr	d7, [r3, #8]
    period[3] = COUNTERPERIOD(motor3.rpm);
 8005f2a:	4b86      	ldr	r3, [pc, #536]	; (8006144 <setProfilTimer+0x2f4>)
 8005f2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f2e:	ee07 3a90 	vmov	s15, r3
 8005f32:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8005f36:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8005f3a:	ee37 7b06 	vadd.f64	d7, d7, d6
 8005f3e:	ed9f 5b78 	vldr	d5, [pc, #480]	; 8006120 <setProfilTimer+0x2d0>
 8005f42:	ee85 6b07 	vdiv.f64	d6, d5, d7
 8005f46:	4b7e      	ldr	r3, [pc, #504]	; (8006140 <setProfilTimer+0x2f0>)
 8005f48:	ed93 7b04 	vldr	d7, [r3, #16]
 8005f4c:	ed9f 5b76 	vldr	d5, [pc, #472]	; 8006128 <setProfilTimer+0x2d8>
 8005f50:	ee27 5b05 	vmul.f64	d5, d7, d5
 8005f54:	ed9f 4b76 	vldr	d4, [pc, #472]	; 8006130 <setProfilTimer+0x2e0>
 8005f58:	ee84 7b05 	vdiv.f64	d7, d4, d5
 8005f5c:	ee26 7b07 	vmul.f64	d7, d6, d7
 8005f60:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8005f64:	ee37 7b46 	vsub.f64	d7, d7, d6
 8005f68:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8005f6c:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8005f70:	4b75      	ldr	r3, [pc, #468]	; (8006148 <setProfilTimer+0x2f8>)
 8005f72:	ed83 7b06 	vstr	d7, [r3, #24]

	// Calculo el error por casteo a int, y cuando supero la unidad, lo compenzo

	for (int i = 0; i < 3; i++) {
 8005f76:	2300      	movs	r3, #0
 8005f78:	607b      	str	r3, [r7, #4]
 8005f7a:	e05b      	b.n	8006034 <setProfilTimer+0x1e4>
		periodError[i] = period[i] - (double)((int32_t) period[i]);
 8005f7c:	4a72      	ldr	r2, [pc, #456]	; (8006148 <setProfilTimer+0x2f8>)
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	00db      	lsls	r3, r3, #3
 8005f82:	4413      	add	r3, r2
 8005f84:	ed93 6b00 	vldr	d6, [r3]
 8005f88:	4a6f      	ldr	r2, [pc, #444]	; (8006148 <setProfilTimer+0x2f8>)
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	00db      	lsls	r3, r3, #3
 8005f8e:	4413      	add	r3, r2
 8005f90:	ed93 7b00 	vldr	d7, [r3]
 8005f94:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8005f98:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8005f9c:	ee36 7b47 	vsub.f64	d7, d6, d7
 8005fa0:	4a6a      	ldr	r2, [pc, #424]	; (800614c <setProfilTimer+0x2fc>)
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	00db      	lsls	r3, r3, #3
 8005fa6:	4413      	add	r3, r2
 8005fa8:	ed83 7b00 	vstr	d7, [r3]
		accumulatedError[i] += periodError[i];
 8005fac:	4a68      	ldr	r2, [pc, #416]	; (8006150 <setProfilTimer+0x300>)
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	00db      	lsls	r3, r3, #3
 8005fb2:	4413      	add	r3, r2
 8005fb4:	ed93 6b00 	vldr	d6, [r3]
 8005fb8:	4a64      	ldr	r2, [pc, #400]	; (800614c <setProfilTimer+0x2fc>)
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	00db      	lsls	r3, r3, #3
 8005fbe:	4413      	add	r3, r2
 8005fc0:	ed93 7b00 	vldr	d7, [r3]
 8005fc4:	ee36 7b07 	vadd.f64	d7, d6, d7
 8005fc8:	4a61      	ldr	r2, [pc, #388]	; (8006150 <setProfilTimer+0x300>)
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	00db      	lsls	r3, r3, #3
 8005fce:	4413      	add	r3, r2
 8005fd0:	ed83 7b00 	vstr	d7, [r3]
		if (accumulatedError[i] > 1) {
 8005fd4:	4a5e      	ldr	r2, [pc, #376]	; (8006150 <setProfilTimer+0x300>)
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	00db      	lsls	r3, r3, #3
 8005fda:	4413      	add	r3, r2
 8005fdc:	ed93 7b00 	vldr	d7, [r3]
 8005fe0:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8005fe4:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8005fe8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005fec:	dd1f      	ble.n	800602e <setProfilTimer+0x1de>
			period[i] += 1;
 8005fee:	4a56      	ldr	r2, [pc, #344]	; (8006148 <setProfilTimer+0x2f8>)
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	00db      	lsls	r3, r3, #3
 8005ff4:	4413      	add	r3, r2
 8005ff6:	ed93 7b00 	vldr	d7, [r3]
 8005ffa:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8005ffe:	ee37 7b06 	vadd.f64	d7, d7, d6
 8006002:	4a51      	ldr	r2, [pc, #324]	; (8006148 <setProfilTimer+0x2f8>)
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	00db      	lsls	r3, r3, #3
 8006008:	4413      	add	r3, r2
 800600a:	ed83 7b00 	vstr	d7, [r3]
			accumulatedError[i] -=  1;
 800600e:	4a50      	ldr	r2, [pc, #320]	; (8006150 <setProfilTimer+0x300>)
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	00db      	lsls	r3, r3, #3
 8006014:	4413      	add	r3, r2
 8006016:	ed93 7b00 	vldr	d7, [r3]
 800601a:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800601e:	ee37 7b46 	vsub.f64	d7, d7, d6
 8006022:	4a4b      	ldr	r2, [pc, #300]	; (8006150 <setProfilTimer+0x300>)
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	00db      	lsls	r3, r3, #3
 8006028:	4413      	add	r3, r2
 800602a:	ed83 7b00 	vstr	d7, [r3]
	for (int i = 0; i < 3; i++) {
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	3301      	adds	r3, #1
 8006032:	607b      	str	r3, [r7, #4]
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	2b02      	cmp	r3, #2
 8006038:	dda0      	ble.n	8005f7c <setProfilTimer+0x12c>
		}
	}

    //Escritura del registro ARR
    __HAL_TIM_SET_AUTORELOAD(&htim12,period[0]);
 800603a:	4b43      	ldr	r3, [pc, #268]	; (8006148 <setProfilTimer+0x2f8>)
 800603c:	ed93 7b00 	vldr	d7, [r3]
 8006040:	4b44      	ldr	r3, [pc, #272]	; (8006154 <setProfilTimer+0x304>)
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8006048:	ee17 2a90 	vmov	r2, s15
 800604c:	62da      	str	r2, [r3, #44]	; 0x2c
 800604e:	4b3e      	ldr	r3, [pc, #248]	; (8006148 <setProfilTimer+0x2f8>)
 8006050:	ed93 7b00 	vldr	d7, [r3]
 8006054:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8006058:	ee17 2a90 	vmov	r2, s15
 800605c:	4b3d      	ldr	r3, [pc, #244]	; (8006154 <setProfilTimer+0x304>)
 800605e:	60da      	str	r2, [r3, #12]
	__HAL_TIM_SET_AUTORELOAD(&htim13,period[1]);
 8006060:	4b39      	ldr	r3, [pc, #228]	; (8006148 <setProfilTimer+0x2f8>)
 8006062:	ed93 7b02 	vldr	d7, [r3, #8]
 8006066:	4b3c      	ldr	r3, [pc, #240]	; (8006158 <setProfilTimer+0x308>)
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800606e:	ee17 2a90 	vmov	r2, s15
 8006072:	62da      	str	r2, [r3, #44]	; 0x2c
 8006074:	4b34      	ldr	r3, [pc, #208]	; (8006148 <setProfilTimer+0x2f8>)
 8006076:	ed93 7b02 	vldr	d7, [r3, #8]
 800607a:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800607e:	ee17 2a90 	vmov	r2, s15
 8006082:	4b35      	ldr	r3, [pc, #212]	; (8006158 <setProfilTimer+0x308>)
 8006084:	60da      	str	r2, [r3, #12]
	__HAL_TIM_SET_AUTORELOAD(&htim14,period[3]);
 8006086:	4b30      	ldr	r3, [pc, #192]	; (8006148 <setProfilTimer+0x2f8>)
 8006088:	ed93 7b06 	vldr	d7, [r3, #24]
 800608c:	4b33      	ldr	r3, [pc, #204]	; (800615c <setProfilTimer+0x30c>)
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8006094:	ee17 2a90 	vmov	r2, s15
 8006098:	62da      	str	r2, [r3, #44]	; 0x2c
 800609a:	4b2b      	ldr	r3, [pc, #172]	; (8006148 <setProfilTimer+0x2f8>)
 800609c:	ed93 7b06 	vldr	d7, [r3, #24]
 80060a0:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80060a4:	ee17 2a90 	vmov	r2, s15
 80060a8:	4b2c      	ldr	r3, [pc, #176]	; (800615c <setProfilTimer+0x30c>)
 80060aa:	60da      	str	r2, [r3, #12]

	TIM12->CCR1 = (uint32_t)((double)(TIM12->ARR) / 2.0);
 80060ac:	4b25      	ldr	r3, [pc, #148]	; (8006144 <setProfilTimer+0x2f4>)
 80060ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060b0:	ee07 3a90 	vmov	s15, r3
 80060b4:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 80060b8:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 80060bc:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80060c0:	4b20      	ldr	r3, [pc, #128]	; (8006144 <setProfilTimer+0x2f4>)
 80060c2:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80060c6:	ee17 2a90 	vmov	r2, s15
 80060ca:	635a      	str	r2, [r3, #52]	; 0x34
	TIM13->CCR1 = (uint32_t)((double)(TIM13->ARR) / 2.0);
 80060cc:	4b24      	ldr	r3, [pc, #144]	; (8006160 <setProfilTimer+0x310>)
 80060ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060d0:	ee07 3a90 	vmov	s15, r3
 80060d4:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 80060d8:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 80060dc:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80060e0:	4b1f      	ldr	r3, [pc, #124]	; (8006160 <setProfilTimer+0x310>)
 80060e2:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80060e6:	ee17 2a90 	vmov	r2, s15
 80060ea:	635a      	str	r2, [r3, #52]	; 0x34
	TIM14->CCR1 = (uint32_t)((double)(TIM14->ARR) / 2.0);
 80060ec:	4b1d      	ldr	r3, [pc, #116]	; (8006164 <setProfilTimer+0x314>)
 80060ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060f0:	ee07 3a90 	vmov	s15, r3
 80060f4:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 80060f8:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 80060fc:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8006100:	4b18      	ldr	r3, [pc, #96]	; (8006164 <setProfilTimer+0x314>)
 8006102:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8006106:	ee17 2a90 	vmov	r2, s15
 800610a:	635a      	str	r2, [r3, #52]	; 0x34


}
 800610c:	bf00      	nop
 800610e:	370c      	adds	r7, #12
 8006110:	46bd      	mov	sp, r7
 8006112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006116:	4770      	bx	lr
 8006118:	66ed2a99 	.word	0x66ed2a99
 800611c:	4023193d 	.word	0x4023193d
 8006120:	00000000 	.word	0x00000000
 8006124:	418e8480 	.word	0x418e8480
 8006128:	00000000 	.word	0x00000000
 800612c:	40bf4000 	.word	0x40bf4000
 8006130:	00000000 	.word	0x00000000
 8006134:	404e0000 	.word	0x404e0000
 8006138:	24000370 	.word	0x24000370
 800613c:	240003b8 	.word	0x240003b8
 8006140:	24000400 	.word	0x24000400
 8006144:	40001800 	.word	0x40001800
 8006148:	24000828 	.word	0x24000828
 800614c:	24000858 	.word	0x24000858
 8006150:	24000840 	.word	0x24000840
 8006154:	240006f8 	.word	0x240006f8
 8006158:	24000744 	.word	0x24000744
 800615c:	24000790 	.word	0x24000790
 8006160:	40001c00 	.word	0x40001c00
 8006164:	40002000 	.word	0x40002000

08006168 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart3;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8006168:	b580      	push	{r7, lr}
 800616a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800616c:	4b22      	ldr	r3, [pc, #136]	; (80061f8 <MX_USART1_UART_Init+0x90>)
 800616e:	4a23      	ldr	r2, [pc, #140]	; (80061fc <MX_USART1_UART_Init+0x94>)
 8006170:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8006172:	4b21      	ldr	r3, [pc, #132]	; (80061f8 <MX_USART1_UART_Init+0x90>)
 8006174:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8006178:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800617a:	4b1f      	ldr	r3, [pc, #124]	; (80061f8 <MX_USART1_UART_Init+0x90>)
 800617c:	2200      	movs	r2, #0
 800617e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8006180:	4b1d      	ldr	r3, [pc, #116]	; (80061f8 <MX_USART1_UART_Init+0x90>)
 8006182:	2200      	movs	r2, #0
 8006184:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8006186:	4b1c      	ldr	r3, [pc, #112]	; (80061f8 <MX_USART1_UART_Init+0x90>)
 8006188:	2200      	movs	r2, #0
 800618a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800618c:	4b1a      	ldr	r3, [pc, #104]	; (80061f8 <MX_USART1_UART_Init+0x90>)
 800618e:	220c      	movs	r2, #12
 8006190:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8006192:	4b19      	ldr	r3, [pc, #100]	; (80061f8 <MX_USART1_UART_Init+0x90>)
 8006194:	2200      	movs	r2, #0
 8006196:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8006198:	4b17      	ldr	r3, [pc, #92]	; (80061f8 <MX_USART1_UART_Init+0x90>)
 800619a:	2200      	movs	r2, #0
 800619c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800619e:	4b16      	ldr	r3, [pc, #88]	; (80061f8 <MX_USART1_UART_Init+0x90>)
 80061a0:	2200      	movs	r2, #0
 80061a2:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80061a4:	4b14      	ldr	r3, [pc, #80]	; (80061f8 <MX_USART1_UART_Init+0x90>)
 80061a6:	2200      	movs	r2, #0
 80061a8:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80061aa:	4b13      	ldr	r3, [pc, #76]	; (80061f8 <MX_USART1_UART_Init+0x90>)
 80061ac:	2200      	movs	r2, #0
 80061ae:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80061b0:	4811      	ldr	r0, [pc, #68]	; (80061f8 <MX_USART1_UART_Init+0x90>)
 80061b2:	f005 fe81 	bl	800beb8 <HAL_UART_Init>
 80061b6:	4603      	mov	r3, r0
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d001      	beq.n	80061c0 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80061bc:	f7fc fd34 	bl	8002c28 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80061c0:	2100      	movs	r1, #0
 80061c2:	480d      	ldr	r0, [pc, #52]	; (80061f8 <MX_USART1_UART_Init+0x90>)
 80061c4:	f008 f90b 	bl	800e3de <HAL_UARTEx_SetTxFifoThreshold>
 80061c8:	4603      	mov	r3, r0
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d001      	beq.n	80061d2 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80061ce:	f7fc fd2b 	bl	8002c28 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80061d2:	2100      	movs	r1, #0
 80061d4:	4808      	ldr	r0, [pc, #32]	; (80061f8 <MX_USART1_UART_Init+0x90>)
 80061d6:	f008 f940 	bl	800e45a <HAL_UARTEx_SetRxFifoThreshold>
 80061da:	4603      	mov	r3, r0
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d001      	beq.n	80061e4 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 80061e0:	f7fc fd22 	bl	8002c28 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80061e4:	4804      	ldr	r0, [pc, #16]	; (80061f8 <MX_USART1_UART_Init+0x90>)
 80061e6:	f008 f8c1 	bl	800e36c <HAL_UARTEx_DisableFifoMode>
 80061ea:	4603      	mov	r3, r0
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d001      	beq.n	80061f4 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 80061f0:	f7fc fd1a 	bl	8002c28 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80061f4:	bf00      	nop
 80061f6:	bd80      	pop	{r7, pc}
 80061f8:	240008e0 	.word	0x240008e0
 80061fc:	40011000 	.word	0x40011000

08006200 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8006200:	b580      	push	{r7, lr}
 8006202:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8006204:	4b22      	ldr	r3, [pc, #136]	; (8006290 <MX_USART2_UART_Init+0x90>)
 8006206:	4a23      	ldr	r2, [pc, #140]	; (8006294 <MX_USART2_UART_Init+0x94>)
 8006208:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 800620a:	4b21      	ldr	r3, [pc, #132]	; (8006290 <MX_USART2_UART_Init+0x90>)
 800620c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8006210:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8006212:	4b1f      	ldr	r3, [pc, #124]	; (8006290 <MX_USART2_UART_Init+0x90>)
 8006214:	2200      	movs	r2, #0
 8006216:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8006218:	4b1d      	ldr	r3, [pc, #116]	; (8006290 <MX_USART2_UART_Init+0x90>)
 800621a:	2200      	movs	r2, #0
 800621c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800621e:	4b1c      	ldr	r3, [pc, #112]	; (8006290 <MX_USART2_UART_Init+0x90>)
 8006220:	2200      	movs	r2, #0
 8006222:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8006224:	4b1a      	ldr	r3, [pc, #104]	; (8006290 <MX_USART2_UART_Init+0x90>)
 8006226:	220c      	movs	r2, #12
 8006228:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800622a:	4b19      	ldr	r3, [pc, #100]	; (8006290 <MX_USART2_UART_Init+0x90>)
 800622c:	2200      	movs	r2, #0
 800622e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8006230:	4b17      	ldr	r3, [pc, #92]	; (8006290 <MX_USART2_UART_Init+0x90>)
 8006232:	2200      	movs	r2, #0
 8006234:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8006236:	4b16      	ldr	r3, [pc, #88]	; (8006290 <MX_USART2_UART_Init+0x90>)
 8006238:	2200      	movs	r2, #0
 800623a:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800623c:	4b14      	ldr	r3, [pc, #80]	; (8006290 <MX_USART2_UART_Init+0x90>)
 800623e:	2200      	movs	r2, #0
 8006240:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8006242:	4b13      	ldr	r3, [pc, #76]	; (8006290 <MX_USART2_UART_Init+0x90>)
 8006244:	2200      	movs	r2, #0
 8006246:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8006248:	4811      	ldr	r0, [pc, #68]	; (8006290 <MX_USART2_UART_Init+0x90>)
 800624a:	f005 fe35 	bl	800beb8 <HAL_UART_Init>
 800624e:	4603      	mov	r3, r0
 8006250:	2b00      	cmp	r3, #0
 8006252:	d001      	beq.n	8006258 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8006254:	f7fc fce8 	bl	8002c28 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8006258:	2100      	movs	r1, #0
 800625a:	480d      	ldr	r0, [pc, #52]	; (8006290 <MX_USART2_UART_Init+0x90>)
 800625c:	f008 f8bf 	bl	800e3de <HAL_UARTEx_SetTxFifoThreshold>
 8006260:	4603      	mov	r3, r0
 8006262:	2b00      	cmp	r3, #0
 8006264:	d001      	beq.n	800626a <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8006266:	f7fc fcdf 	bl	8002c28 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800626a:	2100      	movs	r1, #0
 800626c:	4808      	ldr	r0, [pc, #32]	; (8006290 <MX_USART2_UART_Init+0x90>)
 800626e:	f008 f8f4 	bl	800e45a <HAL_UARTEx_SetRxFifoThreshold>
 8006272:	4603      	mov	r3, r0
 8006274:	2b00      	cmp	r3, #0
 8006276:	d001      	beq.n	800627c <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8006278:	f7fc fcd6 	bl	8002c28 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 800627c:	4804      	ldr	r0, [pc, #16]	; (8006290 <MX_USART2_UART_Init+0x90>)
 800627e:	f008 f875 	bl	800e36c <HAL_UARTEx_DisableFifoMode>
 8006282:	4603      	mov	r3, r0
 8006284:	2b00      	cmp	r3, #0
 8006286:	d001      	beq.n	800628c <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8006288:	f7fc fcce 	bl	8002c28 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800628c:	bf00      	nop
 800628e:	bd80      	pop	{r7, pc}
 8006290:	24000970 	.word	0x24000970
 8006294:	40004400 	.word	0x40004400

08006298 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8006298:	b580      	push	{r7, lr}
 800629a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800629c:	4b22      	ldr	r3, [pc, #136]	; (8006328 <MX_USART3_UART_Init+0x90>)
 800629e:	4a23      	ldr	r2, [pc, #140]	; (800632c <MX_USART3_UART_Init+0x94>)
 80062a0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 80062a2:	4b21      	ldr	r3, [pc, #132]	; (8006328 <MX_USART3_UART_Init+0x90>)
 80062a4:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80062a8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80062aa:	4b1f      	ldr	r3, [pc, #124]	; (8006328 <MX_USART3_UART_Init+0x90>)
 80062ac:	2200      	movs	r2, #0
 80062ae:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80062b0:	4b1d      	ldr	r3, [pc, #116]	; (8006328 <MX_USART3_UART_Init+0x90>)
 80062b2:	2200      	movs	r2, #0
 80062b4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80062b6:	4b1c      	ldr	r3, [pc, #112]	; (8006328 <MX_USART3_UART_Init+0x90>)
 80062b8:	2200      	movs	r2, #0
 80062ba:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80062bc:	4b1a      	ldr	r3, [pc, #104]	; (8006328 <MX_USART3_UART_Init+0x90>)
 80062be:	220c      	movs	r2, #12
 80062c0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80062c2:	4b19      	ldr	r3, [pc, #100]	; (8006328 <MX_USART3_UART_Init+0x90>)
 80062c4:	2200      	movs	r2, #0
 80062c6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80062c8:	4b17      	ldr	r3, [pc, #92]	; (8006328 <MX_USART3_UART_Init+0x90>)
 80062ca:	2200      	movs	r2, #0
 80062cc:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80062ce:	4b16      	ldr	r3, [pc, #88]	; (8006328 <MX_USART3_UART_Init+0x90>)
 80062d0:	2200      	movs	r2, #0
 80062d2:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80062d4:	4b14      	ldr	r3, [pc, #80]	; (8006328 <MX_USART3_UART_Init+0x90>)
 80062d6:	2200      	movs	r2, #0
 80062d8:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80062da:	4b13      	ldr	r3, [pc, #76]	; (8006328 <MX_USART3_UART_Init+0x90>)
 80062dc:	2200      	movs	r2, #0
 80062de:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80062e0:	4811      	ldr	r0, [pc, #68]	; (8006328 <MX_USART3_UART_Init+0x90>)
 80062e2:	f005 fde9 	bl	800beb8 <HAL_UART_Init>
 80062e6:	4603      	mov	r3, r0
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d001      	beq.n	80062f0 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 80062ec:	f7fc fc9c 	bl	8002c28 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80062f0:	2100      	movs	r1, #0
 80062f2:	480d      	ldr	r0, [pc, #52]	; (8006328 <MX_USART3_UART_Init+0x90>)
 80062f4:	f008 f873 	bl	800e3de <HAL_UARTEx_SetTxFifoThreshold>
 80062f8:	4603      	mov	r3, r0
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d001      	beq.n	8006302 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 80062fe:	f7fc fc93 	bl	8002c28 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8006302:	2100      	movs	r1, #0
 8006304:	4808      	ldr	r0, [pc, #32]	; (8006328 <MX_USART3_UART_Init+0x90>)
 8006306:	f008 f8a8 	bl	800e45a <HAL_UARTEx_SetRxFifoThreshold>
 800630a:	4603      	mov	r3, r0
 800630c:	2b00      	cmp	r3, #0
 800630e:	d001      	beq.n	8006314 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8006310:	f7fc fc8a 	bl	8002c28 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8006314:	4804      	ldr	r0, [pc, #16]	; (8006328 <MX_USART3_UART_Init+0x90>)
 8006316:	f008 f829 	bl	800e36c <HAL_UARTEx_DisableFifoMode>
 800631a:	4603      	mov	r3, r0
 800631c:	2b00      	cmp	r3, #0
 800631e:	d001      	beq.n	8006324 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8006320:	f7fc fc82 	bl	8002c28 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8006324:	bf00      	nop
 8006326:	bd80      	pop	{r7, pc}
 8006328:	24000a00 	.word	0x24000a00
 800632c:	40004800 	.word	0x40004800

08006330 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8006330:	b580      	push	{r7, lr}
 8006332:	b0be      	sub	sp, #248	; 0xf8
 8006334:	af00      	add	r7, sp, #0
 8006336:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006338:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800633c:	2200      	movs	r2, #0
 800633e:	601a      	str	r2, [r3, #0]
 8006340:	605a      	str	r2, [r3, #4]
 8006342:	609a      	str	r2, [r3, #8]
 8006344:	60da      	str	r2, [r3, #12]
 8006346:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8006348:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800634c:	22bc      	movs	r2, #188	; 0xbc
 800634e:	2100      	movs	r1, #0
 8006350:	4618      	mov	r0, r3
 8006352:	f008 fda1 	bl	800ee98 <memset>
  if(uartHandle->Instance==USART1)
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	4a84      	ldr	r2, [pc, #528]	; (800656c <HAL_UART_MspInit+0x23c>)
 800635c:	4293      	cmp	r3, r2
 800635e:	d168      	bne.n	8006432 <HAL_UART_MspInit+0x102>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8006360:	2301      	movs	r3, #1
 8006362:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 8006364:	2300      	movs	r3, #0
 8006366:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800636a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800636e:	4618      	mov	r0, r3
 8006370:	f002 fa8c 	bl	800888c <HAL_RCCEx_PeriphCLKConfig>
 8006374:	4603      	mov	r3, r0
 8006376:	2b00      	cmp	r3, #0
 8006378:	d001      	beq.n	800637e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800637a:	f7fc fc55 	bl	8002c28 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800637e:	4b7c      	ldr	r3, [pc, #496]	; (8006570 <HAL_UART_MspInit+0x240>)
 8006380:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006384:	4a7a      	ldr	r2, [pc, #488]	; (8006570 <HAL_UART_MspInit+0x240>)
 8006386:	f043 0310 	orr.w	r3, r3, #16
 800638a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800638e:	4b78      	ldr	r3, [pc, #480]	; (8006570 <HAL_UART_MspInit+0x240>)
 8006390:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006394:	f003 0310 	and.w	r3, r3, #16
 8006398:	627b      	str	r3, [r7, #36]	; 0x24
 800639a:	6a7b      	ldr	r3, [r7, #36]	; 0x24

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800639c:	4b74      	ldr	r3, [pc, #464]	; (8006570 <HAL_UART_MspInit+0x240>)
 800639e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80063a2:	4a73      	ldr	r2, [pc, #460]	; (8006570 <HAL_UART_MspInit+0x240>)
 80063a4:	f043 0302 	orr.w	r3, r3, #2
 80063a8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80063ac:	4b70      	ldr	r3, [pc, #448]	; (8006570 <HAL_UART_MspInit+0x240>)
 80063ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80063b2:	f003 0302 	and.w	r3, r3, #2
 80063b6:	623b      	str	r3, [r7, #32]
 80063b8:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80063ba:	4b6d      	ldr	r3, [pc, #436]	; (8006570 <HAL_UART_MspInit+0x240>)
 80063bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80063c0:	4a6b      	ldr	r2, [pc, #428]	; (8006570 <HAL_UART_MspInit+0x240>)
 80063c2:	f043 0301 	orr.w	r3, r3, #1
 80063c6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80063ca:	4b69      	ldr	r3, [pc, #420]	; (8006570 <HAL_UART_MspInit+0x240>)
 80063cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80063d0:	f003 0301 	and.w	r3, r3, #1
 80063d4:	61fb      	str	r3, [r7, #28]
 80063d6:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration
    PB15     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = Jetson_RX_Pin;
 80063d8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80063dc:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80063e0:	2302      	movs	r3, #2
 80063e2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80063e6:	2300      	movs	r3, #0
 80063e8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80063ec:	2300      	movs	r3, #0
 80063ee:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 80063f2:	2304      	movs	r3, #4
 80063f4:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(Jetson_RX_GPIO_Port, &GPIO_InitStruct);
 80063f8:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80063fc:	4619      	mov	r1, r3
 80063fe:	485d      	ldr	r0, [pc, #372]	; (8006574 <HAL_UART_MspInit+0x244>)
 8006400:	f001 f854 	bl	80074ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = Jetson_TX_Pin;
 8006404:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006408:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800640c:	2302      	movs	r3, #2
 800640e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006412:	2300      	movs	r3, #0
 8006414:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006418:	2300      	movs	r3, #0
 800641a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800641e:	2307      	movs	r3, #7
 8006420:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(Jetson_TX_GPIO_Port, &GPIO_InitStruct);
 8006424:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8006428:	4619      	mov	r1, r3
 800642a:	4853      	ldr	r0, [pc, #332]	; (8006578 <HAL_UART_MspInit+0x248>)
 800642c:	f001 f83e 	bl	80074ac <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8006430:	e097      	b.n	8006562 <HAL_UART_MspInit+0x232>
  else if(uartHandle->Instance==USART2)
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	4a51      	ldr	r2, [pc, #324]	; (800657c <HAL_UART_MspInit+0x24c>)
 8006438:	4293      	cmp	r3, r2
 800643a:	d142      	bne.n	80064c2 <HAL_UART_MspInit+0x192>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800643c:	2302      	movs	r3, #2
 800643e:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8006440:	2300      	movs	r3, #0
 8006442:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8006446:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800644a:	4618      	mov	r0, r3
 800644c:	f002 fa1e 	bl	800888c <HAL_RCCEx_PeriphCLKConfig>
 8006450:	4603      	mov	r3, r0
 8006452:	2b00      	cmp	r3, #0
 8006454:	d001      	beq.n	800645a <HAL_UART_MspInit+0x12a>
      Error_Handler();
 8006456:	f7fc fbe7 	bl	8002c28 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 800645a:	4b45      	ldr	r3, [pc, #276]	; (8006570 <HAL_UART_MspInit+0x240>)
 800645c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006460:	4a43      	ldr	r2, [pc, #268]	; (8006570 <HAL_UART_MspInit+0x240>)
 8006462:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006466:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800646a:	4b41      	ldr	r3, [pc, #260]	; (8006570 <HAL_UART_MspInit+0x240>)
 800646c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006470:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006474:	61bb      	str	r3, [r7, #24]
 8006476:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006478:	4b3d      	ldr	r3, [pc, #244]	; (8006570 <HAL_UART_MspInit+0x240>)
 800647a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800647e:	4a3c      	ldr	r2, [pc, #240]	; (8006570 <HAL_UART_MspInit+0x240>)
 8006480:	f043 0301 	orr.w	r3, r3, #1
 8006484:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8006488:	4b39      	ldr	r3, [pc, #228]	; (8006570 <HAL_UART_MspInit+0x240>)
 800648a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800648e:	f003 0301 	and.w	r3, r3, #1
 8006492:	617b      	str	r3, [r7, #20]
 8006494:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = NucleoF4_RX_Pin|NucleoF4_TX_Pin;
 8006496:	230c      	movs	r3, #12
 8006498:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800649c:	2302      	movs	r3, #2
 800649e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80064a2:	2300      	movs	r3, #0
 80064a4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80064a8:	2300      	movs	r3, #0
 80064aa:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80064ae:	2307      	movs	r3, #7
 80064b0:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80064b4:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80064b8:	4619      	mov	r1, r3
 80064ba:	482f      	ldr	r0, [pc, #188]	; (8006578 <HAL_UART_MspInit+0x248>)
 80064bc:	f000 fff6 	bl	80074ac <HAL_GPIO_Init>
}
 80064c0:	e04f      	b.n	8006562 <HAL_UART_MspInit+0x232>
  else if(uartHandle->Instance==USART3)
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	4a2e      	ldr	r2, [pc, #184]	; (8006580 <HAL_UART_MspInit+0x250>)
 80064c8:	4293      	cmp	r3, r2
 80064ca:	d14a      	bne.n	8006562 <HAL_UART_MspInit+0x232>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80064cc:	2302      	movs	r3, #2
 80064ce:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80064d0:	2300      	movs	r3, #0
 80064d2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80064d6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80064da:	4618      	mov	r0, r3
 80064dc:	f002 f9d6 	bl	800888c <HAL_RCCEx_PeriphCLKConfig>
 80064e0:	4603      	mov	r3, r0
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d001      	beq.n	80064ea <HAL_UART_MspInit+0x1ba>
      Error_Handler();
 80064e6:	f7fc fb9f 	bl	8002c28 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 80064ea:	4b21      	ldr	r3, [pc, #132]	; (8006570 <HAL_UART_MspInit+0x240>)
 80064ec:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80064f0:	4a1f      	ldr	r2, [pc, #124]	; (8006570 <HAL_UART_MspInit+0x240>)
 80064f2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80064f6:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80064fa:	4b1d      	ldr	r3, [pc, #116]	; (8006570 <HAL_UART_MspInit+0x240>)
 80064fc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006500:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006504:	613b      	str	r3, [r7, #16]
 8006506:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8006508:	4b19      	ldr	r3, [pc, #100]	; (8006570 <HAL_UART_MspInit+0x240>)
 800650a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800650e:	4a18      	ldr	r2, [pc, #96]	; (8006570 <HAL_UART_MspInit+0x240>)
 8006510:	f043 0308 	orr.w	r3, r3, #8
 8006514:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8006518:	4b15      	ldr	r3, [pc, #84]	; (8006570 <HAL_UART_MspInit+0x240>)
 800651a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800651e:	f003 0308 	and.w	r3, r3, #8
 8006522:	60fb      	str	r3, [r7, #12]
 8006524:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = STLINK_TX_Pin|STLINK_RX_Pin;
 8006526:	f44f 7340 	mov.w	r3, #768	; 0x300
 800652a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800652e:	2302      	movs	r3, #2
 8006530:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006534:	2300      	movs	r3, #0
 8006536:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800653a:	2300      	movs	r3, #0
 800653c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8006540:	2307      	movs	r3, #7
 8006542:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006546:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800654a:	4619      	mov	r1, r3
 800654c:	480d      	ldr	r0, [pc, #52]	; (8006584 <HAL_UART_MspInit+0x254>)
 800654e:	f000 ffad 	bl	80074ac <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 1, 1);
 8006552:	2201      	movs	r2, #1
 8006554:	2101      	movs	r1, #1
 8006556:	2027      	movs	r0, #39	; 0x27
 8006558:	f000 fa01 	bl	800695e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800655c:	2027      	movs	r0, #39	; 0x27
 800655e:	f000 fa18 	bl	8006992 <HAL_NVIC_EnableIRQ>
}
 8006562:	bf00      	nop
 8006564:	37f8      	adds	r7, #248	; 0xf8
 8006566:	46bd      	mov	sp, r7
 8006568:	bd80      	pop	{r7, pc}
 800656a:	bf00      	nop
 800656c:	40011000 	.word	0x40011000
 8006570:	58024400 	.word	0x58024400
 8006574:	58020400 	.word	0x58020400
 8006578:	58020000 	.word	0x58020000
 800657c:	40004400 	.word	0x40004400
 8006580:	40004800 	.word	0x40004800
 8006584:	58020c00 	.word	0x58020c00

08006588 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8006588:	f8df d034 	ldr.w	sp, [pc, #52]	; 80065c0 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800658c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800658e:	e003      	b.n	8006598 <LoopCopyDataInit>

08006590 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8006590:	4b0c      	ldr	r3, [pc, #48]	; (80065c4 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8006592:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8006594:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8006596:	3104      	adds	r1, #4

08006598 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8006598:	480b      	ldr	r0, [pc, #44]	; (80065c8 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800659a:	4b0c      	ldr	r3, [pc, #48]	; (80065cc <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800659c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800659e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80065a0:	d3f6      	bcc.n	8006590 <CopyDataInit>
  ldr  r2, =_sbss
 80065a2:	4a0b      	ldr	r2, [pc, #44]	; (80065d0 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80065a4:	e002      	b.n	80065ac <LoopFillZerobss>

080065a6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80065a6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80065a8:	f842 3b04 	str.w	r3, [r2], #4

080065ac <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80065ac:	4b09      	ldr	r3, [pc, #36]	; (80065d4 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80065ae:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80065b0:	d3f9      	bcc.n	80065a6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80065b2:	f7fd fb81 	bl	8003cb8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80065b6:	f008 fbd3 	bl	800ed60 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80065ba:	f7fc f80f 	bl	80025dc <main>
  bx  lr    
 80065be:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80065c0:	24080000 	.word	0x24080000
  ldr  r3, =_sidata
 80065c4:	08013f70 	.word	0x08013f70
  ldr  r0, =_sdata
 80065c8:	24000000 	.word	0x24000000
  ldr  r3, =_edata
 80065cc:	2400025c 	.word	0x2400025c
  ldr  r2, =_sbss
 80065d0:	24000260 	.word	0x24000260
  ldr  r3, = _ebss
 80065d4:	24000aa4 	.word	0x24000aa4

080065d8 <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80065d8:	e7fe      	b.n	80065d8 <ADC3_IRQHandler>
	...

080065dc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80065dc:	b580      	push	{r7, lr}
 80065de:	b082      	sub	sp, #8
 80065e0:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80065e2:	2003      	movs	r0, #3
 80065e4:	f000 f9b0 	bl	8006948 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80065e8:	f001 ff7a 	bl	80084e0 <HAL_RCC_GetSysClockFreq>
 80065ec:	4602      	mov	r2, r0
 80065ee:	4b15      	ldr	r3, [pc, #84]	; (8006644 <HAL_Init+0x68>)
 80065f0:	699b      	ldr	r3, [r3, #24]
 80065f2:	0a1b      	lsrs	r3, r3, #8
 80065f4:	f003 030f 	and.w	r3, r3, #15
 80065f8:	4913      	ldr	r1, [pc, #76]	; (8006648 <HAL_Init+0x6c>)
 80065fa:	5ccb      	ldrb	r3, [r1, r3]
 80065fc:	f003 031f 	and.w	r3, r3, #31
 8006600:	fa22 f303 	lsr.w	r3, r2, r3
 8006604:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006606:	4b0f      	ldr	r3, [pc, #60]	; (8006644 <HAL_Init+0x68>)
 8006608:	699b      	ldr	r3, [r3, #24]
 800660a:	f003 030f 	and.w	r3, r3, #15
 800660e:	4a0e      	ldr	r2, [pc, #56]	; (8006648 <HAL_Init+0x6c>)
 8006610:	5cd3      	ldrb	r3, [r2, r3]
 8006612:	f003 031f 	and.w	r3, r3, #31
 8006616:	687a      	ldr	r2, [r7, #4]
 8006618:	fa22 f303 	lsr.w	r3, r2, r3
 800661c:	4a0b      	ldr	r2, [pc, #44]	; (800664c <HAL_Init+0x70>)
 800661e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006620:	4a0b      	ldr	r2, [pc, #44]	; (8006650 <HAL_Init+0x74>)
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8006626:	2000      	movs	r0, #0
 8006628:	f000 f814 	bl	8006654 <HAL_InitTick>
 800662c:	4603      	mov	r3, r0
 800662e:	2b00      	cmp	r3, #0
 8006630:	d001      	beq.n	8006636 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8006632:	2301      	movs	r3, #1
 8006634:	e002      	b.n	800663c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8006636:	f7fd f9af 	bl	8003998 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800663a:	2300      	movs	r3, #0
}
 800663c:	4618      	mov	r0, r3
 800663e:	3708      	adds	r7, #8
 8006640:	46bd      	mov	sp, r7
 8006642:	bd80      	pop	{r7, pc}
 8006644:	58024400 	.word	0x58024400
 8006648:	0801223c 	.word	0x0801223c
 800664c:	2400007c 	.word	0x2400007c
 8006650:	24000078 	.word	0x24000078

08006654 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8006654:	b580      	push	{r7, lr}
 8006656:	b082      	sub	sp, #8
 8006658:	af00      	add	r7, sp, #0
 800665a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 800665c:	4b15      	ldr	r3, [pc, #84]	; (80066b4 <HAL_InitTick+0x60>)
 800665e:	781b      	ldrb	r3, [r3, #0]
 8006660:	2b00      	cmp	r3, #0
 8006662:	d101      	bne.n	8006668 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8006664:	2301      	movs	r3, #1
 8006666:	e021      	b.n	80066ac <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8006668:	4b13      	ldr	r3, [pc, #76]	; (80066b8 <HAL_InitTick+0x64>)
 800666a:	681a      	ldr	r2, [r3, #0]
 800666c:	4b11      	ldr	r3, [pc, #68]	; (80066b4 <HAL_InitTick+0x60>)
 800666e:	781b      	ldrb	r3, [r3, #0]
 8006670:	4619      	mov	r1, r3
 8006672:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006676:	fbb3 f3f1 	udiv	r3, r3, r1
 800667a:	fbb2 f3f3 	udiv	r3, r2, r3
 800667e:	4618      	mov	r0, r3
 8006680:	f000 f9a3 	bl	80069ca <HAL_SYSTICK_Config>
 8006684:	4603      	mov	r3, r0
 8006686:	2b00      	cmp	r3, #0
 8006688:	d001      	beq.n	800668e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800668a:	2301      	movs	r3, #1
 800668c:	e00e      	b.n	80066ac <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	2b0f      	cmp	r3, #15
 8006692:	d80a      	bhi.n	80066aa <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8006694:	2200      	movs	r2, #0
 8006696:	6879      	ldr	r1, [r7, #4]
 8006698:	f04f 30ff 	mov.w	r0, #4294967295
 800669c:	f000 f95f 	bl	800695e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80066a0:	4a06      	ldr	r2, [pc, #24]	; (80066bc <HAL_InitTick+0x68>)
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80066a6:	2300      	movs	r3, #0
 80066a8:	e000      	b.n	80066ac <HAL_InitTick+0x58>
    return HAL_ERROR;
 80066aa:	2301      	movs	r3, #1
}
 80066ac:	4618      	mov	r0, r3
 80066ae:	3708      	adds	r7, #8
 80066b0:	46bd      	mov	sp, r7
 80066b2:	bd80      	pop	{r7, pc}
 80066b4:	24000084 	.word	0x24000084
 80066b8:	24000078 	.word	0x24000078
 80066bc:	24000080 	.word	0x24000080

080066c0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80066c0:	b480      	push	{r7}
 80066c2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80066c4:	4b06      	ldr	r3, [pc, #24]	; (80066e0 <HAL_IncTick+0x20>)
 80066c6:	781b      	ldrb	r3, [r3, #0]
 80066c8:	461a      	mov	r2, r3
 80066ca:	4b06      	ldr	r3, [pc, #24]	; (80066e4 <HAL_IncTick+0x24>)
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	4413      	add	r3, r2
 80066d0:	4a04      	ldr	r2, [pc, #16]	; (80066e4 <HAL_IncTick+0x24>)
 80066d2:	6013      	str	r3, [r2, #0]
}
 80066d4:	bf00      	nop
 80066d6:	46bd      	mov	sp, r7
 80066d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066dc:	4770      	bx	lr
 80066de:	bf00      	nop
 80066e0:	24000084 	.word	0x24000084
 80066e4:	24000a90 	.word	0x24000a90

080066e8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80066e8:	b480      	push	{r7}
 80066ea:	af00      	add	r7, sp, #0
  return uwTick;
 80066ec:	4b03      	ldr	r3, [pc, #12]	; (80066fc <HAL_GetTick+0x14>)
 80066ee:	681b      	ldr	r3, [r3, #0]
}
 80066f0:	4618      	mov	r0, r3
 80066f2:	46bd      	mov	sp, r7
 80066f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066f8:	4770      	bx	lr
 80066fa:	bf00      	nop
 80066fc:	24000a90 	.word	0x24000a90

08006700 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8006700:	b580      	push	{r7, lr}
 8006702:	b084      	sub	sp, #16
 8006704:	af00      	add	r7, sp, #0
 8006706:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8006708:	f7ff ffee 	bl	80066e8 <HAL_GetTick>
 800670c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006718:	d005      	beq.n	8006726 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800671a:	4b0a      	ldr	r3, [pc, #40]	; (8006744 <HAL_Delay+0x44>)
 800671c:	781b      	ldrb	r3, [r3, #0]
 800671e:	461a      	mov	r2, r3
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	4413      	add	r3, r2
 8006724:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8006726:	bf00      	nop
 8006728:	f7ff ffde 	bl	80066e8 <HAL_GetTick>
 800672c:	4602      	mov	r2, r0
 800672e:	68bb      	ldr	r3, [r7, #8]
 8006730:	1ad3      	subs	r3, r2, r3
 8006732:	68fa      	ldr	r2, [r7, #12]
 8006734:	429a      	cmp	r2, r3
 8006736:	d8f7      	bhi.n	8006728 <HAL_Delay+0x28>
  {
  }
}
 8006738:	bf00      	nop
 800673a:	bf00      	nop
 800673c:	3710      	adds	r7, #16
 800673e:	46bd      	mov	sp, r7
 8006740:	bd80      	pop	{r7, pc}
 8006742:	bf00      	nop
 8006744:	24000084 	.word	0x24000084

08006748 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8006748:	b480      	push	{r7}
 800674a:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 800674c:	4b03      	ldr	r3, [pc, #12]	; (800675c <HAL_GetREVID+0x14>)
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	0c1b      	lsrs	r3, r3, #16
}
 8006752:	4618      	mov	r0, r3
 8006754:	46bd      	mov	sp, r7
 8006756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800675a:	4770      	bx	lr
 800675c:	5c001000 	.word	0x5c001000

08006760 <__NVIC_SetPriorityGrouping>:
{
 8006760:	b480      	push	{r7}
 8006762:	b085      	sub	sp, #20
 8006764:	af00      	add	r7, sp, #0
 8006766:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	f003 0307 	and.w	r3, r3, #7
 800676e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006770:	4b0b      	ldr	r3, [pc, #44]	; (80067a0 <__NVIC_SetPriorityGrouping+0x40>)
 8006772:	68db      	ldr	r3, [r3, #12]
 8006774:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006776:	68ba      	ldr	r2, [r7, #8]
 8006778:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800677c:	4013      	ands	r3, r2
 800677e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006784:	68bb      	ldr	r3, [r7, #8]
 8006786:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8006788:	4b06      	ldr	r3, [pc, #24]	; (80067a4 <__NVIC_SetPriorityGrouping+0x44>)
 800678a:	4313      	orrs	r3, r2
 800678c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800678e:	4a04      	ldr	r2, [pc, #16]	; (80067a0 <__NVIC_SetPriorityGrouping+0x40>)
 8006790:	68bb      	ldr	r3, [r7, #8]
 8006792:	60d3      	str	r3, [r2, #12]
}
 8006794:	bf00      	nop
 8006796:	3714      	adds	r7, #20
 8006798:	46bd      	mov	sp, r7
 800679a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800679e:	4770      	bx	lr
 80067a0:	e000ed00 	.word	0xe000ed00
 80067a4:	05fa0000 	.word	0x05fa0000

080067a8 <__NVIC_GetPriorityGrouping>:
{
 80067a8:	b480      	push	{r7}
 80067aa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80067ac:	4b04      	ldr	r3, [pc, #16]	; (80067c0 <__NVIC_GetPriorityGrouping+0x18>)
 80067ae:	68db      	ldr	r3, [r3, #12]
 80067b0:	0a1b      	lsrs	r3, r3, #8
 80067b2:	f003 0307 	and.w	r3, r3, #7
}
 80067b6:	4618      	mov	r0, r3
 80067b8:	46bd      	mov	sp, r7
 80067ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067be:	4770      	bx	lr
 80067c0:	e000ed00 	.word	0xe000ed00

080067c4 <__NVIC_EnableIRQ>:
{
 80067c4:	b480      	push	{r7}
 80067c6:	b083      	sub	sp, #12
 80067c8:	af00      	add	r7, sp, #0
 80067ca:	4603      	mov	r3, r0
 80067cc:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80067ce:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	db0b      	blt.n	80067ee <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80067d6:	88fb      	ldrh	r3, [r7, #6]
 80067d8:	f003 021f 	and.w	r2, r3, #31
 80067dc:	4907      	ldr	r1, [pc, #28]	; (80067fc <__NVIC_EnableIRQ+0x38>)
 80067de:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80067e2:	095b      	lsrs	r3, r3, #5
 80067e4:	2001      	movs	r0, #1
 80067e6:	fa00 f202 	lsl.w	r2, r0, r2
 80067ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80067ee:	bf00      	nop
 80067f0:	370c      	adds	r7, #12
 80067f2:	46bd      	mov	sp, r7
 80067f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067f8:	4770      	bx	lr
 80067fa:	bf00      	nop
 80067fc:	e000e100 	.word	0xe000e100

08006800 <__NVIC_DisableIRQ>:
{
 8006800:	b480      	push	{r7}
 8006802:	b083      	sub	sp, #12
 8006804:	af00      	add	r7, sp, #0
 8006806:	4603      	mov	r3, r0
 8006808:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800680a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800680e:	2b00      	cmp	r3, #0
 8006810:	db12      	blt.n	8006838 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006812:	88fb      	ldrh	r3, [r7, #6]
 8006814:	f003 021f 	and.w	r2, r3, #31
 8006818:	490a      	ldr	r1, [pc, #40]	; (8006844 <__NVIC_DisableIRQ+0x44>)
 800681a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800681e:	095b      	lsrs	r3, r3, #5
 8006820:	2001      	movs	r0, #1
 8006822:	fa00 f202 	lsl.w	r2, r0, r2
 8006826:	3320      	adds	r3, #32
 8006828:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 800682c:	f3bf 8f4f 	dsb	sy
}
 8006830:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8006832:	f3bf 8f6f 	isb	sy
}
 8006836:	bf00      	nop
}
 8006838:	bf00      	nop
 800683a:	370c      	adds	r7, #12
 800683c:	46bd      	mov	sp, r7
 800683e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006842:	4770      	bx	lr
 8006844:	e000e100 	.word	0xe000e100

08006848 <__NVIC_SetPriority>:
{
 8006848:	b480      	push	{r7}
 800684a:	b083      	sub	sp, #12
 800684c:	af00      	add	r7, sp, #0
 800684e:	4603      	mov	r3, r0
 8006850:	6039      	str	r1, [r7, #0]
 8006852:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8006854:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006858:	2b00      	cmp	r3, #0
 800685a:	db0a      	blt.n	8006872 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800685c:	683b      	ldr	r3, [r7, #0]
 800685e:	b2da      	uxtb	r2, r3
 8006860:	490c      	ldr	r1, [pc, #48]	; (8006894 <__NVIC_SetPriority+0x4c>)
 8006862:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006866:	0112      	lsls	r2, r2, #4
 8006868:	b2d2      	uxtb	r2, r2
 800686a:	440b      	add	r3, r1
 800686c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8006870:	e00a      	b.n	8006888 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006872:	683b      	ldr	r3, [r7, #0]
 8006874:	b2da      	uxtb	r2, r3
 8006876:	4908      	ldr	r1, [pc, #32]	; (8006898 <__NVIC_SetPriority+0x50>)
 8006878:	88fb      	ldrh	r3, [r7, #6]
 800687a:	f003 030f 	and.w	r3, r3, #15
 800687e:	3b04      	subs	r3, #4
 8006880:	0112      	lsls	r2, r2, #4
 8006882:	b2d2      	uxtb	r2, r2
 8006884:	440b      	add	r3, r1
 8006886:	761a      	strb	r2, [r3, #24]
}
 8006888:	bf00      	nop
 800688a:	370c      	adds	r7, #12
 800688c:	46bd      	mov	sp, r7
 800688e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006892:	4770      	bx	lr
 8006894:	e000e100 	.word	0xe000e100
 8006898:	e000ed00 	.word	0xe000ed00

0800689c <NVIC_EncodePriority>:
{
 800689c:	b480      	push	{r7}
 800689e:	b089      	sub	sp, #36	; 0x24
 80068a0:	af00      	add	r7, sp, #0
 80068a2:	60f8      	str	r0, [r7, #12]
 80068a4:	60b9      	str	r1, [r7, #8]
 80068a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	f003 0307 	and.w	r3, r3, #7
 80068ae:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80068b0:	69fb      	ldr	r3, [r7, #28]
 80068b2:	f1c3 0307 	rsb	r3, r3, #7
 80068b6:	2b04      	cmp	r3, #4
 80068b8:	bf28      	it	cs
 80068ba:	2304      	movcs	r3, #4
 80068bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80068be:	69fb      	ldr	r3, [r7, #28]
 80068c0:	3304      	adds	r3, #4
 80068c2:	2b06      	cmp	r3, #6
 80068c4:	d902      	bls.n	80068cc <NVIC_EncodePriority+0x30>
 80068c6:	69fb      	ldr	r3, [r7, #28]
 80068c8:	3b03      	subs	r3, #3
 80068ca:	e000      	b.n	80068ce <NVIC_EncodePriority+0x32>
 80068cc:	2300      	movs	r3, #0
 80068ce:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80068d0:	f04f 32ff 	mov.w	r2, #4294967295
 80068d4:	69bb      	ldr	r3, [r7, #24]
 80068d6:	fa02 f303 	lsl.w	r3, r2, r3
 80068da:	43da      	mvns	r2, r3
 80068dc:	68bb      	ldr	r3, [r7, #8]
 80068de:	401a      	ands	r2, r3
 80068e0:	697b      	ldr	r3, [r7, #20]
 80068e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80068e4:	f04f 31ff 	mov.w	r1, #4294967295
 80068e8:	697b      	ldr	r3, [r7, #20]
 80068ea:	fa01 f303 	lsl.w	r3, r1, r3
 80068ee:	43d9      	mvns	r1, r3
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80068f4:	4313      	orrs	r3, r2
}
 80068f6:	4618      	mov	r0, r3
 80068f8:	3724      	adds	r7, #36	; 0x24
 80068fa:	46bd      	mov	sp, r7
 80068fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006900:	4770      	bx	lr
	...

08006904 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8006904:	b580      	push	{r7, lr}
 8006906:	b082      	sub	sp, #8
 8006908:	af00      	add	r7, sp, #0
 800690a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	3b01      	subs	r3, #1
 8006910:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006914:	d301      	bcc.n	800691a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8006916:	2301      	movs	r3, #1
 8006918:	e00f      	b.n	800693a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800691a:	4a0a      	ldr	r2, [pc, #40]	; (8006944 <SysTick_Config+0x40>)
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	3b01      	subs	r3, #1
 8006920:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8006922:	210f      	movs	r1, #15
 8006924:	f04f 30ff 	mov.w	r0, #4294967295
 8006928:	f7ff ff8e 	bl	8006848 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800692c:	4b05      	ldr	r3, [pc, #20]	; (8006944 <SysTick_Config+0x40>)
 800692e:	2200      	movs	r2, #0
 8006930:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006932:	4b04      	ldr	r3, [pc, #16]	; (8006944 <SysTick_Config+0x40>)
 8006934:	2207      	movs	r2, #7
 8006936:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006938:	2300      	movs	r3, #0
}
 800693a:	4618      	mov	r0, r3
 800693c:	3708      	adds	r7, #8
 800693e:	46bd      	mov	sp, r7
 8006940:	bd80      	pop	{r7, pc}
 8006942:	bf00      	nop
 8006944:	e000e010 	.word	0xe000e010

08006948 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006948:	b580      	push	{r7, lr}
 800694a:	b082      	sub	sp, #8
 800694c:	af00      	add	r7, sp, #0
 800694e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006950:	6878      	ldr	r0, [r7, #4]
 8006952:	f7ff ff05 	bl	8006760 <__NVIC_SetPriorityGrouping>
}
 8006956:	bf00      	nop
 8006958:	3708      	adds	r7, #8
 800695a:	46bd      	mov	sp, r7
 800695c:	bd80      	pop	{r7, pc}

0800695e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800695e:	b580      	push	{r7, lr}
 8006960:	b086      	sub	sp, #24
 8006962:	af00      	add	r7, sp, #0
 8006964:	4603      	mov	r3, r0
 8006966:	60b9      	str	r1, [r7, #8]
 8006968:	607a      	str	r2, [r7, #4]
 800696a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800696c:	f7ff ff1c 	bl	80067a8 <__NVIC_GetPriorityGrouping>
 8006970:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006972:	687a      	ldr	r2, [r7, #4]
 8006974:	68b9      	ldr	r1, [r7, #8]
 8006976:	6978      	ldr	r0, [r7, #20]
 8006978:	f7ff ff90 	bl	800689c <NVIC_EncodePriority>
 800697c:	4602      	mov	r2, r0
 800697e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8006982:	4611      	mov	r1, r2
 8006984:	4618      	mov	r0, r3
 8006986:	f7ff ff5f 	bl	8006848 <__NVIC_SetPriority>
}
 800698a:	bf00      	nop
 800698c:	3718      	adds	r7, #24
 800698e:	46bd      	mov	sp, r7
 8006990:	bd80      	pop	{r7, pc}

08006992 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006992:	b580      	push	{r7, lr}
 8006994:	b082      	sub	sp, #8
 8006996:	af00      	add	r7, sp, #0
 8006998:	4603      	mov	r3, r0
 800699a:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800699c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80069a0:	4618      	mov	r0, r3
 80069a2:	f7ff ff0f 	bl	80067c4 <__NVIC_EnableIRQ>
}
 80069a6:	bf00      	nop
 80069a8:	3708      	adds	r7, #8
 80069aa:	46bd      	mov	sp, r7
 80069ac:	bd80      	pop	{r7, pc}

080069ae <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80069ae:	b580      	push	{r7, lr}
 80069b0:	b082      	sub	sp, #8
 80069b2:	af00      	add	r7, sp, #0
 80069b4:	4603      	mov	r3, r0
 80069b6:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80069b8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80069bc:	4618      	mov	r0, r3
 80069be:	f7ff ff1f 	bl	8006800 <__NVIC_DisableIRQ>
}
 80069c2:	bf00      	nop
 80069c4:	3708      	adds	r7, #8
 80069c6:	46bd      	mov	sp, r7
 80069c8:	bd80      	pop	{r7, pc}

080069ca <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80069ca:	b580      	push	{r7, lr}
 80069cc:	b082      	sub	sp, #8
 80069ce:	af00      	add	r7, sp, #0
 80069d0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80069d2:	6878      	ldr	r0, [r7, #4]
 80069d4:	f7ff ff96 	bl	8006904 <SysTick_Config>
 80069d8:	4603      	mov	r3, r0
}
 80069da:	4618      	mov	r0, r3
 80069dc:	3708      	adds	r7, #8
 80069de:	46bd      	mov	sp, r7
 80069e0:	bd80      	pop	{r7, pc}
	...

080069e4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80069e4:	b580      	push	{r7, lr}
 80069e6:	b086      	sub	sp, #24
 80069e8:	af00      	add	r7, sp, #0
 80069ea:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 80069ec:	f7ff fe7c 	bl	80066e8 <HAL_GetTick>
 80069f0:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d101      	bne.n	80069fc <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 80069f8:	2301      	movs	r3, #1
 80069fa:	e2dc      	b.n	8006fb6 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006a02:	b2db      	uxtb	r3, r3
 8006a04:	2b02      	cmp	r3, #2
 8006a06:	d008      	beq.n	8006a1a <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	2280      	movs	r2, #128	; 0x80
 8006a0c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	2200      	movs	r2, #0
 8006a12:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 8006a16:	2301      	movs	r3, #1
 8006a18:	e2cd      	b.n	8006fb6 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	4a76      	ldr	r2, [pc, #472]	; (8006bf8 <HAL_DMA_Abort+0x214>)
 8006a20:	4293      	cmp	r3, r2
 8006a22:	d04a      	beq.n	8006aba <HAL_DMA_Abort+0xd6>
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	4a74      	ldr	r2, [pc, #464]	; (8006bfc <HAL_DMA_Abort+0x218>)
 8006a2a:	4293      	cmp	r3, r2
 8006a2c:	d045      	beq.n	8006aba <HAL_DMA_Abort+0xd6>
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	4a73      	ldr	r2, [pc, #460]	; (8006c00 <HAL_DMA_Abort+0x21c>)
 8006a34:	4293      	cmp	r3, r2
 8006a36:	d040      	beq.n	8006aba <HAL_DMA_Abort+0xd6>
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	4a71      	ldr	r2, [pc, #452]	; (8006c04 <HAL_DMA_Abort+0x220>)
 8006a3e:	4293      	cmp	r3, r2
 8006a40:	d03b      	beq.n	8006aba <HAL_DMA_Abort+0xd6>
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	4a70      	ldr	r2, [pc, #448]	; (8006c08 <HAL_DMA_Abort+0x224>)
 8006a48:	4293      	cmp	r3, r2
 8006a4a:	d036      	beq.n	8006aba <HAL_DMA_Abort+0xd6>
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	4a6e      	ldr	r2, [pc, #440]	; (8006c0c <HAL_DMA_Abort+0x228>)
 8006a52:	4293      	cmp	r3, r2
 8006a54:	d031      	beq.n	8006aba <HAL_DMA_Abort+0xd6>
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	4a6d      	ldr	r2, [pc, #436]	; (8006c10 <HAL_DMA_Abort+0x22c>)
 8006a5c:	4293      	cmp	r3, r2
 8006a5e:	d02c      	beq.n	8006aba <HAL_DMA_Abort+0xd6>
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	4a6b      	ldr	r2, [pc, #428]	; (8006c14 <HAL_DMA_Abort+0x230>)
 8006a66:	4293      	cmp	r3, r2
 8006a68:	d027      	beq.n	8006aba <HAL_DMA_Abort+0xd6>
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	4a6a      	ldr	r2, [pc, #424]	; (8006c18 <HAL_DMA_Abort+0x234>)
 8006a70:	4293      	cmp	r3, r2
 8006a72:	d022      	beq.n	8006aba <HAL_DMA_Abort+0xd6>
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	4a68      	ldr	r2, [pc, #416]	; (8006c1c <HAL_DMA_Abort+0x238>)
 8006a7a:	4293      	cmp	r3, r2
 8006a7c:	d01d      	beq.n	8006aba <HAL_DMA_Abort+0xd6>
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	4a67      	ldr	r2, [pc, #412]	; (8006c20 <HAL_DMA_Abort+0x23c>)
 8006a84:	4293      	cmp	r3, r2
 8006a86:	d018      	beq.n	8006aba <HAL_DMA_Abort+0xd6>
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	4a65      	ldr	r2, [pc, #404]	; (8006c24 <HAL_DMA_Abort+0x240>)
 8006a8e:	4293      	cmp	r3, r2
 8006a90:	d013      	beq.n	8006aba <HAL_DMA_Abort+0xd6>
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	4a64      	ldr	r2, [pc, #400]	; (8006c28 <HAL_DMA_Abort+0x244>)
 8006a98:	4293      	cmp	r3, r2
 8006a9a:	d00e      	beq.n	8006aba <HAL_DMA_Abort+0xd6>
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	4a62      	ldr	r2, [pc, #392]	; (8006c2c <HAL_DMA_Abort+0x248>)
 8006aa2:	4293      	cmp	r3, r2
 8006aa4:	d009      	beq.n	8006aba <HAL_DMA_Abort+0xd6>
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	4a61      	ldr	r2, [pc, #388]	; (8006c30 <HAL_DMA_Abort+0x24c>)
 8006aac:	4293      	cmp	r3, r2
 8006aae:	d004      	beq.n	8006aba <HAL_DMA_Abort+0xd6>
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	4a5f      	ldr	r2, [pc, #380]	; (8006c34 <HAL_DMA_Abort+0x250>)
 8006ab6:	4293      	cmp	r3, r2
 8006ab8:	d101      	bne.n	8006abe <HAL_DMA_Abort+0xda>
 8006aba:	2301      	movs	r3, #1
 8006abc:	e000      	b.n	8006ac0 <HAL_DMA_Abort+0xdc>
 8006abe:	2300      	movs	r3, #0
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d013      	beq.n	8006aec <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	681a      	ldr	r2, [r3, #0]
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	f022 021e 	bic.w	r2, r2, #30
 8006ad2:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	695a      	ldr	r2, [r3, #20]
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006ae2:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	617b      	str	r3, [r7, #20]
 8006aea:	e00a      	b.n	8006b02 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	681a      	ldr	r2, [r3, #0]
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	f022 020e 	bic.w	r2, r2, #14
 8006afa:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	4a3c      	ldr	r2, [pc, #240]	; (8006bf8 <HAL_DMA_Abort+0x214>)
 8006b08:	4293      	cmp	r3, r2
 8006b0a:	d072      	beq.n	8006bf2 <HAL_DMA_Abort+0x20e>
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	4a3a      	ldr	r2, [pc, #232]	; (8006bfc <HAL_DMA_Abort+0x218>)
 8006b12:	4293      	cmp	r3, r2
 8006b14:	d06d      	beq.n	8006bf2 <HAL_DMA_Abort+0x20e>
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	4a39      	ldr	r2, [pc, #228]	; (8006c00 <HAL_DMA_Abort+0x21c>)
 8006b1c:	4293      	cmp	r3, r2
 8006b1e:	d068      	beq.n	8006bf2 <HAL_DMA_Abort+0x20e>
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	4a37      	ldr	r2, [pc, #220]	; (8006c04 <HAL_DMA_Abort+0x220>)
 8006b26:	4293      	cmp	r3, r2
 8006b28:	d063      	beq.n	8006bf2 <HAL_DMA_Abort+0x20e>
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	4a36      	ldr	r2, [pc, #216]	; (8006c08 <HAL_DMA_Abort+0x224>)
 8006b30:	4293      	cmp	r3, r2
 8006b32:	d05e      	beq.n	8006bf2 <HAL_DMA_Abort+0x20e>
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	4a34      	ldr	r2, [pc, #208]	; (8006c0c <HAL_DMA_Abort+0x228>)
 8006b3a:	4293      	cmp	r3, r2
 8006b3c:	d059      	beq.n	8006bf2 <HAL_DMA_Abort+0x20e>
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	4a33      	ldr	r2, [pc, #204]	; (8006c10 <HAL_DMA_Abort+0x22c>)
 8006b44:	4293      	cmp	r3, r2
 8006b46:	d054      	beq.n	8006bf2 <HAL_DMA_Abort+0x20e>
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	4a31      	ldr	r2, [pc, #196]	; (8006c14 <HAL_DMA_Abort+0x230>)
 8006b4e:	4293      	cmp	r3, r2
 8006b50:	d04f      	beq.n	8006bf2 <HAL_DMA_Abort+0x20e>
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	4a30      	ldr	r2, [pc, #192]	; (8006c18 <HAL_DMA_Abort+0x234>)
 8006b58:	4293      	cmp	r3, r2
 8006b5a:	d04a      	beq.n	8006bf2 <HAL_DMA_Abort+0x20e>
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	4a2e      	ldr	r2, [pc, #184]	; (8006c1c <HAL_DMA_Abort+0x238>)
 8006b62:	4293      	cmp	r3, r2
 8006b64:	d045      	beq.n	8006bf2 <HAL_DMA_Abort+0x20e>
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	4a2d      	ldr	r2, [pc, #180]	; (8006c20 <HAL_DMA_Abort+0x23c>)
 8006b6c:	4293      	cmp	r3, r2
 8006b6e:	d040      	beq.n	8006bf2 <HAL_DMA_Abort+0x20e>
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	4a2b      	ldr	r2, [pc, #172]	; (8006c24 <HAL_DMA_Abort+0x240>)
 8006b76:	4293      	cmp	r3, r2
 8006b78:	d03b      	beq.n	8006bf2 <HAL_DMA_Abort+0x20e>
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	4a2a      	ldr	r2, [pc, #168]	; (8006c28 <HAL_DMA_Abort+0x244>)
 8006b80:	4293      	cmp	r3, r2
 8006b82:	d036      	beq.n	8006bf2 <HAL_DMA_Abort+0x20e>
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	4a28      	ldr	r2, [pc, #160]	; (8006c2c <HAL_DMA_Abort+0x248>)
 8006b8a:	4293      	cmp	r3, r2
 8006b8c:	d031      	beq.n	8006bf2 <HAL_DMA_Abort+0x20e>
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	4a27      	ldr	r2, [pc, #156]	; (8006c30 <HAL_DMA_Abort+0x24c>)
 8006b94:	4293      	cmp	r3, r2
 8006b96:	d02c      	beq.n	8006bf2 <HAL_DMA_Abort+0x20e>
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	4a25      	ldr	r2, [pc, #148]	; (8006c34 <HAL_DMA_Abort+0x250>)
 8006b9e:	4293      	cmp	r3, r2
 8006ba0:	d027      	beq.n	8006bf2 <HAL_DMA_Abort+0x20e>
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	4a24      	ldr	r2, [pc, #144]	; (8006c38 <HAL_DMA_Abort+0x254>)
 8006ba8:	4293      	cmp	r3, r2
 8006baa:	d022      	beq.n	8006bf2 <HAL_DMA_Abort+0x20e>
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	4a22      	ldr	r2, [pc, #136]	; (8006c3c <HAL_DMA_Abort+0x258>)
 8006bb2:	4293      	cmp	r3, r2
 8006bb4:	d01d      	beq.n	8006bf2 <HAL_DMA_Abort+0x20e>
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	4a21      	ldr	r2, [pc, #132]	; (8006c40 <HAL_DMA_Abort+0x25c>)
 8006bbc:	4293      	cmp	r3, r2
 8006bbe:	d018      	beq.n	8006bf2 <HAL_DMA_Abort+0x20e>
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	4a1f      	ldr	r2, [pc, #124]	; (8006c44 <HAL_DMA_Abort+0x260>)
 8006bc6:	4293      	cmp	r3, r2
 8006bc8:	d013      	beq.n	8006bf2 <HAL_DMA_Abort+0x20e>
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	4a1e      	ldr	r2, [pc, #120]	; (8006c48 <HAL_DMA_Abort+0x264>)
 8006bd0:	4293      	cmp	r3, r2
 8006bd2:	d00e      	beq.n	8006bf2 <HAL_DMA_Abort+0x20e>
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	4a1c      	ldr	r2, [pc, #112]	; (8006c4c <HAL_DMA_Abort+0x268>)
 8006bda:	4293      	cmp	r3, r2
 8006bdc:	d009      	beq.n	8006bf2 <HAL_DMA_Abort+0x20e>
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	4a1b      	ldr	r2, [pc, #108]	; (8006c50 <HAL_DMA_Abort+0x26c>)
 8006be4:	4293      	cmp	r3, r2
 8006be6:	d004      	beq.n	8006bf2 <HAL_DMA_Abort+0x20e>
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	4a19      	ldr	r2, [pc, #100]	; (8006c54 <HAL_DMA_Abort+0x270>)
 8006bee:	4293      	cmp	r3, r2
 8006bf0:	d132      	bne.n	8006c58 <HAL_DMA_Abort+0x274>
 8006bf2:	2301      	movs	r3, #1
 8006bf4:	e031      	b.n	8006c5a <HAL_DMA_Abort+0x276>
 8006bf6:	bf00      	nop
 8006bf8:	40020010 	.word	0x40020010
 8006bfc:	40020028 	.word	0x40020028
 8006c00:	40020040 	.word	0x40020040
 8006c04:	40020058 	.word	0x40020058
 8006c08:	40020070 	.word	0x40020070
 8006c0c:	40020088 	.word	0x40020088
 8006c10:	400200a0 	.word	0x400200a0
 8006c14:	400200b8 	.word	0x400200b8
 8006c18:	40020410 	.word	0x40020410
 8006c1c:	40020428 	.word	0x40020428
 8006c20:	40020440 	.word	0x40020440
 8006c24:	40020458 	.word	0x40020458
 8006c28:	40020470 	.word	0x40020470
 8006c2c:	40020488 	.word	0x40020488
 8006c30:	400204a0 	.word	0x400204a0
 8006c34:	400204b8 	.word	0x400204b8
 8006c38:	58025408 	.word	0x58025408
 8006c3c:	5802541c 	.word	0x5802541c
 8006c40:	58025430 	.word	0x58025430
 8006c44:	58025444 	.word	0x58025444
 8006c48:	58025458 	.word	0x58025458
 8006c4c:	5802546c 	.word	0x5802546c
 8006c50:	58025480 	.word	0x58025480
 8006c54:	58025494 	.word	0x58025494
 8006c58:	2300      	movs	r3, #0
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d007      	beq.n	8006c6e <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006c62:	681a      	ldr	r2, [r3, #0]
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006c68:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006c6c:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	4a6d      	ldr	r2, [pc, #436]	; (8006e28 <HAL_DMA_Abort+0x444>)
 8006c74:	4293      	cmp	r3, r2
 8006c76:	d04a      	beq.n	8006d0e <HAL_DMA_Abort+0x32a>
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	4a6b      	ldr	r2, [pc, #428]	; (8006e2c <HAL_DMA_Abort+0x448>)
 8006c7e:	4293      	cmp	r3, r2
 8006c80:	d045      	beq.n	8006d0e <HAL_DMA_Abort+0x32a>
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	4a6a      	ldr	r2, [pc, #424]	; (8006e30 <HAL_DMA_Abort+0x44c>)
 8006c88:	4293      	cmp	r3, r2
 8006c8a:	d040      	beq.n	8006d0e <HAL_DMA_Abort+0x32a>
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	4a68      	ldr	r2, [pc, #416]	; (8006e34 <HAL_DMA_Abort+0x450>)
 8006c92:	4293      	cmp	r3, r2
 8006c94:	d03b      	beq.n	8006d0e <HAL_DMA_Abort+0x32a>
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	4a67      	ldr	r2, [pc, #412]	; (8006e38 <HAL_DMA_Abort+0x454>)
 8006c9c:	4293      	cmp	r3, r2
 8006c9e:	d036      	beq.n	8006d0e <HAL_DMA_Abort+0x32a>
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	4a65      	ldr	r2, [pc, #404]	; (8006e3c <HAL_DMA_Abort+0x458>)
 8006ca6:	4293      	cmp	r3, r2
 8006ca8:	d031      	beq.n	8006d0e <HAL_DMA_Abort+0x32a>
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	4a64      	ldr	r2, [pc, #400]	; (8006e40 <HAL_DMA_Abort+0x45c>)
 8006cb0:	4293      	cmp	r3, r2
 8006cb2:	d02c      	beq.n	8006d0e <HAL_DMA_Abort+0x32a>
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	4a62      	ldr	r2, [pc, #392]	; (8006e44 <HAL_DMA_Abort+0x460>)
 8006cba:	4293      	cmp	r3, r2
 8006cbc:	d027      	beq.n	8006d0e <HAL_DMA_Abort+0x32a>
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	4a61      	ldr	r2, [pc, #388]	; (8006e48 <HAL_DMA_Abort+0x464>)
 8006cc4:	4293      	cmp	r3, r2
 8006cc6:	d022      	beq.n	8006d0e <HAL_DMA_Abort+0x32a>
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	4a5f      	ldr	r2, [pc, #380]	; (8006e4c <HAL_DMA_Abort+0x468>)
 8006cce:	4293      	cmp	r3, r2
 8006cd0:	d01d      	beq.n	8006d0e <HAL_DMA_Abort+0x32a>
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	4a5e      	ldr	r2, [pc, #376]	; (8006e50 <HAL_DMA_Abort+0x46c>)
 8006cd8:	4293      	cmp	r3, r2
 8006cda:	d018      	beq.n	8006d0e <HAL_DMA_Abort+0x32a>
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	4a5c      	ldr	r2, [pc, #368]	; (8006e54 <HAL_DMA_Abort+0x470>)
 8006ce2:	4293      	cmp	r3, r2
 8006ce4:	d013      	beq.n	8006d0e <HAL_DMA_Abort+0x32a>
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	4a5b      	ldr	r2, [pc, #364]	; (8006e58 <HAL_DMA_Abort+0x474>)
 8006cec:	4293      	cmp	r3, r2
 8006cee:	d00e      	beq.n	8006d0e <HAL_DMA_Abort+0x32a>
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	4a59      	ldr	r2, [pc, #356]	; (8006e5c <HAL_DMA_Abort+0x478>)
 8006cf6:	4293      	cmp	r3, r2
 8006cf8:	d009      	beq.n	8006d0e <HAL_DMA_Abort+0x32a>
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	4a58      	ldr	r2, [pc, #352]	; (8006e60 <HAL_DMA_Abort+0x47c>)
 8006d00:	4293      	cmp	r3, r2
 8006d02:	d004      	beq.n	8006d0e <HAL_DMA_Abort+0x32a>
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	4a56      	ldr	r2, [pc, #344]	; (8006e64 <HAL_DMA_Abort+0x480>)
 8006d0a:	4293      	cmp	r3, r2
 8006d0c:	d108      	bne.n	8006d20 <HAL_DMA_Abort+0x33c>
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	681a      	ldr	r2, [r3, #0]
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	f022 0201 	bic.w	r2, r2, #1
 8006d1c:	601a      	str	r2, [r3, #0]
 8006d1e:	e007      	b.n	8006d30 <HAL_DMA_Abort+0x34c>
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	681a      	ldr	r2, [r3, #0]
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	f022 0201 	bic.w	r2, r2, #1
 8006d2e:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8006d30:	e013      	b.n	8006d5a <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8006d32:	f7ff fcd9 	bl	80066e8 <HAL_GetTick>
 8006d36:	4602      	mov	r2, r0
 8006d38:	693b      	ldr	r3, [r7, #16]
 8006d3a:	1ad3      	subs	r3, r2, r3
 8006d3c:	2b05      	cmp	r3, #5
 8006d3e:	d90c      	bls.n	8006d5a <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	2220      	movs	r2, #32
 8006d44:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	2203      	movs	r2, #3
 8006d4a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	2200      	movs	r2, #0
 8006d52:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 8006d56:	2301      	movs	r3, #1
 8006d58:	e12d      	b.n	8006fb6 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8006d5a:	697b      	ldr	r3, [r7, #20]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	f003 0301 	and.w	r3, r3, #1
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d1e5      	bne.n	8006d32 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	4a2f      	ldr	r2, [pc, #188]	; (8006e28 <HAL_DMA_Abort+0x444>)
 8006d6c:	4293      	cmp	r3, r2
 8006d6e:	d04a      	beq.n	8006e06 <HAL_DMA_Abort+0x422>
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	4a2d      	ldr	r2, [pc, #180]	; (8006e2c <HAL_DMA_Abort+0x448>)
 8006d76:	4293      	cmp	r3, r2
 8006d78:	d045      	beq.n	8006e06 <HAL_DMA_Abort+0x422>
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	4a2c      	ldr	r2, [pc, #176]	; (8006e30 <HAL_DMA_Abort+0x44c>)
 8006d80:	4293      	cmp	r3, r2
 8006d82:	d040      	beq.n	8006e06 <HAL_DMA_Abort+0x422>
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	4a2a      	ldr	r2, [pc, #168]	; (8006e34 <HAL_DMA_Abort+0x450>)
 8006d8a:	4293      	cmp	r3, r2
 8006d8c:	d03b      	beq.n	8006e06 <HAL_DMA_Abort+0x422>
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	4a29      	ldr	r2, [pc, #164]	; (8006e38 <HAL_DMA_Abort+0x454>)
 8006d94:	4293      	cmp	r3, r2
 8006d96:	d036      	beq.n	8006e06 <HAL_DMA_Abort+0x422>
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	4a27      	ldr	r2, [pc, #156]	; (8006e3c <HAL_DMA_Abort+0x458>)
 8006d9e:	4293      	cmp	r3, r2
 8006da0:	d031      	beq.n	8006e06 <HAL_DMA_Abort+0x422>
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	4a26      	ldr	r2, [pc, #152]	; (8006e40 <HAL_DMA_Abort+0x45c>)
 8006da8:	4293      	cmp	r3, r2
 8006daa:	d02c      	beq.n	8006e06 <HAL_DMA_Abort+0x422>
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	4a24      	ldr	r2, [pc, #144]	; (8006e44 <HAL_DMA_Abort+0x460>)
 8006db2:	4293      	cmp	r3, r2
 8006db4:	d027      	beq.n	8006e06 <HAL_DMA_Abort+0x422>
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	4a23      	ldr	r2, [pc, #140]	; (8006e48 <HAL_DMA_Abort+0x464>)
 8006dbc:	4293      	cmp	r3, r2
 8006dbe:	d022      	beq.n	8006e06 <HAL_DMA_Abort+0x422>
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	4a21      	ldr	r2, [pc, #132]	; (8006e4c <HAL_DMA_Abort+0x468>)
 8006dc6:	4293      	cmp	r3, r2
 8006dc8:	d01d      	beq.n	8006e06 <HAL_DMA_Abort+0x422>
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	4a20      	ldr	r2, [pc, #128]	; (8006e50 <HAL_DMA_Abort+0x46c>)
 8006dd0:	4293      	cmp	r3, r2
 8006dd2:	d018      	beq.n	8006e06 <HAL_DMA_Abort+0x422>
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	4a1e      	ldr	r2, [pc, #120]	; (8006e54 <HAL_DMA_Abort+0x470>)
 8006dda:	4293      	cmp	r3, r2
 8006ddc:	d013      	beq.n	8006e06 <HAL_DMA_Abort+0x422>
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	4a1d      	ldr	r2, [pc, #116]	; (8006e58 <HAL_DMA_Abort+0x474>)
 8006de4:	4293      	cmp	r3, r2
 8006de6:	d00e      	beq.n	8006e06 <HAL_DMA_Abort+0x422>
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	4a1b      	ldr	r2, [pc, #108]	; (8006e5c <HAL_DMA_Abort+0x478>)
 8006dee:	4293      	cmp	r3, r2
 8006df0:	d009      	beq.n	8006e06 <HAL_DMA_Abort+0x422>
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	4a1a      	ldr	r2, [pc, #104]	; (8006e60 <HAL_DMA_Abort+0x47c>)
 8006df8:	4293      	cmp	r3, r2
 8006dfa:	d004      	beq.n	8006e06 <HAL_DMA_Abort+0x422>
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	4a18      	ldr	r2, [pc, #96]	; (8006e64 <HAL_DMA_Abort+0x480>)
 8006e02:	4293      	cmp	r3, r2
 8006e04:	d101      	bne.n	8006e0a <HAL_DMA_Abort+0x426>
 8006e06:	2301      	movs	r3, #1
 8006e08:	e000      	b.n	8006e0c <HAL_DMA_Abort+0x428>
 8006e0a:	2300      	movs	r3, #0
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	d02b      	beq.n	8006e68 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006e14:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006e1a:	f003 031f 	and.w	r3, r3, #31
 8006e1e:	223f      	movs	r2, #63	; 0x3f
 8006e20:	409a      	lsls	r2, r3
 8006e22:	68bb      	ldr	r3, [r7, #8]
 8006e24:	609a      	str	r2, [r3, #8]
 8006e26:	e02a      	b.n	8006e7e <HAL_DMA_Abort+0x49a>
 8006e28:	40020010 	.word	0x40020010
 8006e2c:	40020028 	.word	0x40020028
 8006e30:	40020040 	.word	0x40020040
 8006e34:	40020058 	.word	0x40020058
 8006e38:	40020070 	.word	0x40020070
 8006e3c:	40020088 	.word	0x40020088
 8006e40:	400200a0 	.word	0x400200a0
 8006e44:	400200b8 	.word	0x400200b8
 8006e48:	40020410 	.word	0x40020410
 8006e4c:	40020428 	.word	0x40020428
 8006e50:	40020440 	.word	0x40020440
 8006e54:	40020458 	.word	0x40020458
 8006e58:	40020470 	.word	0x40020470
 8006e5c:	40020488 	.word	0x40020488
 8006e60:	400204a0 	.word	0x400204a0
 8006e64:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006e6c:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006e72:	f003 031f 	and.w	r3, r3, #31
 8006e76:	2201      	movs	r2, #1
 8006e78:	409a      	lsls	r2, r3
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	4a4f      	ldr	r2, [pc, #316]	; (8006fc0 <HAL_DMA_Abort+0x5dc>)
 8006e84:	4293      	cmp	r3, r2
 8006e86:	d072      	beq.n	8006f6e <HAL_DMA_Abort+0x58a>
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	4a4d      	ldr	r2, [pc, #308]	; (8006fc4 <HAL_DMA_Abort+0x5e0>)
 8006e8e:	4293      	cmp	r3, r2
 8006e90:	d06d      	beq.n	8006f6e <HAL_DMA_Abort+0x58a>
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	4a4c      	ldr	r2, [pc, #304]	; (8006fc8 <HAL_DMA_Abort+0x5e4>)
 8006e98:	4293      	cmp	r3, r2
 8006e9a:	d068      	beq.n	8006f6e <HAL_DMA_Abort+0x58a>
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	4a4a      	ldr	r2, [pc, #296]	; (8006fcc <HAL_DMA_Abort+0x5e8>)
 8006ea2:	4293      	cmp	r3, r2
 8006ea4:	d063      	beq.n	8006f6e <HAL_DMA_Abort+0x58a>
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	4a49      	ldr	r2, [pc, #292]	; (8006fd0 <HAL_DMA_Abort+0x5ec>)
 8006eac:	4293      	cmp	r3, r2
 8006eae:	d05e      	beq.n	8006f6e <HAL_DMA_Abort+0x58a>
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	4a47      	ldr	r2, [pc, #284]	; (8006fd4 <HAL_DMA_Abort+0x5f0>)
 8006eb6:	4293      	cmp	r3, r2
 8006eb8:	d059      	beq.n	8006f6e <HAL_DMA_Abort+0x58a>
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	4a46      	ldr	r2, [pc, #280]	; (8006fd8 <HAL_DMA_Abort+0x5f4>)
 8006ec0:	4293      	cmp	r3, r2
 8006ec2:	d054      	beq.n	8006f6e <HAL_DMA_Abort+0x58a>
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	4a44      	ldr	r2, [pc, #272]	; (8006fdc <HAL_DMA_Abort+0x5f8>)
 8006eca:	4293      	cmp	r3, r2
 8006ecc:	d04f      	beq.n	8006f6e <HAL_DMA_Abort+0x58a>
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	4a43      	ldr	r2, [pc, #268]	; (8006fe0 <HAL_DMA_Abort+0x5fc>)
 8006ed4:	4293      	cmp	r3, r2
 8006ed6:	d04a      	beq.n	8006f6e <HAL_DMA_Abort+0x58a>
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	4a41      	ldr	r2, [pc, #260]	; (8006fe4 <HAL_DMA_Abort+0x600>)
 8006ede:	4293      	cmp	r3, r2
 8006ee0:	d045      	beq.n	8006f6e <HAL_DMA_Abort+0x58a>
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	4a40      	ldr	r2, [pc, #256]	; (8006fe8 <HAL_DMA_Abort+0x604>)
 8006ee8:	4293      	cmp	r3, r2
 8006eea:	d040      	beq.n	8006f6e <HAL_DMA_Abort+0x58a>
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	4a3e      	ldr	r2, [pc, #248]	; (8006fec <HAL_DMA_Abort+0x608>)
 8006ef2:	4293      	cmp	r3, r2
 8006ef4:	d03b      	beq.n	8006f6e <HAL_DMA_Abort+0x58a>
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	4a3d      	ldr	r2, [pc, #244]	; (8006ff0 <HAL_DMA_Abort+0x60c>)
 8006efc:	4293      	cmp	r3, r2
 8006efe:	d036      	beq.n	8006f6e <HAL_DMA_Abort+0x58a>
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	4a3b      	ldr	r2, [pc, #236]	; (8006ff4 <HAL_DMA_Abort+0x610>)
 8006f06:	4293      	cmp	r3, r2
 8006f08:	d031      	beq.n	8006f6e <HAL_DMA_Abort+0x58a>
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	4a3a      	ldr	r2, [pc, #232]	; (8006ff8 <HAL_DMA_Abort+0x614>)
 8006f10:	4293      	cmp	r3, r2
 8006f12:	d02c      	beq.n	8006f6e <HAL_DMA_Abort+0x58a>
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	4a38      	ldr	r2, [pc, #224]	; (8006ffc <HAL_DMA_Abort+0x618>)
 8006f1a:	4293      	cmp	r3, r2
 8006f1c:	d027      	beq.n	8006f6e <HAL_DMA_Abort+0x58a>
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	4a37      	ldr	r2, [pc, #220]	; (8007000 <HAL_DMA_Abort+0x61c>)
 8006f24:	4293      	cmp	r3, r2
 8006f26:	d022      	beq.n	8006f6e <HAL_DMA_Abort+0x58a>
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	4a35      	ldr	r2, [pc, #212]	; (8007004 <HAL_DMA_Abort+0x620>)
 8006f2e:	4293      	cmp	r3, r2
 8006f30:	d01d      	beq.n	8006f6e <HAL_DMA_Abort+0x58a>
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	4a34      	ldr	r2, [pc, #208]	; (8007008 <HAL_DMA_Abort+0x624>)
 8006f38:	4293      	cmp	r3, r2
 8006f3a:	d018      	beq.n	8006f6e <HAL_DMA_Abort+0x58a>
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	4a32      	ldr	r2, [pc, #200]	; (800700c <HAL_DMA_Abort+0x628>)
 8006f42:	4293      	cmp	r3, r2
 8006f44:	d013      	beq.n	8006f6e <HAL_DMA_Abort+0x58a>
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	4a31      	ldr	r2, [pc, #196]	; (8007010 <HAL_DMA_Abort+0x62c>)
 8006f4c:	4293      	cmp	r3, r2
 8006f4e:	d00e      	beq.n	8006f6e <HAL_DMA_Abort+0x58a>
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	4a2f      	ldr	r2, [pc, #188]	; (8007014 <HAL_DMA_Abort+0x630>)
 8006f56:	4293      	cmp	r3, r2
 8006f58:	d009      	beq.n	8006f6e <HAL_DMA_Abort+0x58a>
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	4a2e      	ldr	r2, [pc, #184]	; (8007018 <HAL_DMA_Abort+0x634>)
 8006f60:	4293      	cmp	r3, r2
 8006f62:	d004      	beq.n	8006f6e <HAL_DMA_Abort+0x58a>
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	4a2c      	ldr	r2, [pc, #176]	; (800701c <HAL_DMA_Abort+0x638>)
 8006f6a:	4293      	cmp	r3, r2
 8006f6c:	d101      	bne.n	8006f72 <HAL_DMA_Abort+0x58e>
 8006f6e:	2301      	movs	r3, #1
 8006f70:	e000      	b.n	8006f74 <HAL_DMA_Abort+0x590>
 8006f72:	2300      	movs	r3, #0
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	d015      	beq.n	8006fa4 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006f7c:	687a      	ldr	r2, [r7, #4]
 8006f7e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8006f80:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	d00c      	beq.n	8006fa4 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006f8e:	681a      	ldr	r2, [r3, #0]
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006f94:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006f98:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f9e:	687a      	ldr	r2, [r7, #4]
 8006fa0:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8006fa2:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	2201      	movs	r2, #1
 8006fa8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	2200      	movs	r2, #0
 8006fb0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 8006fb4:	2300      	movs	r3, #0
}
 8006fb6:	4618      	mov	r0, r3
 8006fb8:	3718      	adds	r7, #24
 8006fba:	46bd      	mov	sp, r7
 8006fbc:	bd80      	pop	{r7, pc}
 8006fbe:	bf00      	nop
 8006fc0:	40020010 	.word	0x40020010
 8006fc4:	40020028 	.word	0x40020028
 8006fc8:	40020040 	.word	0x40020040
 8006fcc:	40020058 	.word	0x40020058
 8006fd0:	40020070 	.word	0x40020070
 8006fd4:	40020088 	.word	0x40020088
 8006fd8:	400200a0 	.word	0x400200a0
 8006fdc:	400200b8 	.word	0x400200b8
 8006fe0:	40020410 	.word	0x40020410
 8006fe4:	40020428 	.word	0x40020428
 8006fe8:	40020440 	.word	0x40020440
 8006fec:	40020458 	.word	0x40020458
 8006ff0:	40020470 	.word	0x40020470
 8006ff4:	40020488 	.word	0x40020488
 8006ff8:	400204a0 	.word	0x400204a0
 8006ffc:	400204b8 	.word	0x400204b8
 8007000:	58025408 	.word	0x58025408
 8007004:	5802541c 	.word	0x5802541c
 8007008:	58025430 	.word	0x58025430
 800700c:	58025444 	.word	0x58025444
 8007010:	58025458 	.word	0x58025458
 8007014:	5802546c 	.word	0x5802546c
 8007018:	58025480 	.word	0x58025480
 800701c:	58025494 	.word	0x58025494

08007020 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8007020:	b580      	push	{r7, lr}
 8007022:	b084      	sub	sp, #16
 8007024:	af00      	add	r7, sp, #0
 8007026:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	2b00      	cmp	r3, #0
 800702c:	d101      	bne.n	8007032 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 800702e:	2301      	movs	r3, #1
 8007030:	e237      	b.n	80074a2 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007038:	b2db      	uxtb	r3, r3
 800703a:	2b02      	cmp	r3, #2
 800703c:	d004      	beq.n	8007048 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	2280      	movs	r2, #128	; 0x80
 8007042:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8007044:	2301      	movs	r3, #1
 8007046:	e22c      	b.n	80074a2 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	4a5c      	ldr	r2, [pc, #368]	; (80071c0 <HAL_DMA_Abort_IT+0x1a0>)
 800704e:	4293      	cmp	r3, r2
 8007050:	d04a      	beq.n	80070e8 <HAL_DMA_Abort_IT+0xc8>
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	4a5b      	ldr	r2, [pc, #364]	; (80071c4 <HAL_DMA_Abort_IT+0x1a4>)
 8007058:	4293      	cmp	r3, r2
 800705a:	d045      	beq.n	80070e8 <HAL_DMA_Abort_IT+0xc8>
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	4a59      	ldr	r2, [pc, #356]	; (80071c8 <HAL_DMA_Abort_IT+0x1a8>)
 8007062:	4293      	cmp	r3, r2
 8007064:	d040      	beq.n	80070e8 <HAL_DMA_Abort_IT+0xc8>
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	4a58      	ldr	r2, [pc, #352]	; (80071cc <HAL_DMA_Abort_IT+0x1ac>)
 800706c:	4293      	cmp	r3, r2
 800706e:	d03b      	beq.n	80070e8 <HAL_DMA_Abort_IT+0xc8>
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	4a56      	ldr	r2, [pc, #344]	; (80071d0 <HAL_DMA_Abort_IT+0x1b0>)
 8007076:	4293      	cmp	r3, r2
 8007078:	d036      	beq.n	80070e8 <HAL_DMA_Abort_IT+0xc8>
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	4a55      	ldr	r2, [pc, #340]	; (80071d4 <HAL_DMA_Abort_IT+0x1b4>)
 8007080:	4293      	cmp	r3, r2
 8007082:	d031      	beq.n	80070e8 <HAL_DMA_Abort_IT+0xc8>
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	4a53      	ldr	r2, [pc, #332]	; (80071d8 <HAL_DMA_Abort_IT+0x1b8>)
 800708a:	4293      	cmp	r3, r2
 800708c:	d02c      	beq.n	80070e8 <HAL_DMA_Abort_IT+0xc8>
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	4a52      	ldr	r2, [pc, #328]	; (80071dc <HAL_DMA_Abort_IT+0x1bc>)
 8007094:	4293      	cmp	r3, r2
 8007096:	d027      	beq.n	80070e8 <HAL_DMA_Abort_IT+0xc8>
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	4a50      	ldr	r2, [pc, #320]	; (80071e0 <HAL_DMA_Abort_IT+0x1c0>)
 800709e:	4293      	cmp	r3, r2
 80070a0:	d022      	beq.n	80070e8 <HAL_DMA_Abort_IT+0xc8>
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	4a4f      	ldr	r2, [pc, #316]	; (80071e4 <HAL_DMA_Abort_IT+0x1c4>)
 80070a8:	4293      	cmp	r3, r2
 80070aa:	d01d      	beq.n	80070e8 <HAL_DMA_Abort_IT+0xc8>
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	4a4d      	ldr	r2, [pc, #308]	; (80071e8 <HAL_DMA_Abort_IT+0x1c8>)
 80070b2:	4293      	cmp	r3, r2
 80070b4:	d018      	beq.n	80070e8 <HAL_DMA_Abort_IT+0xc8>
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	4a4c      	ldr	r2, [pc, #304]	; (80071ec <HAL_DMA_Abort_IT+0x1cc>)
 80070bc:	4293      	cmp	r3, r2
 80070be:	d013      	beq.n	80070e8 <HAL_DMA_Abort_IT+0xc8>
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	4a4a      	ldr	r2, [pc, #296]	; (80071f0 <HAL_DMA_Abort_IT+0x1d0>)
 80070c6:	4293      	cmp	r3, r2
 80070c8:	d00e      	beq.n	80070e8 <HAL_DMA_Abort_IT+0xc8>
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	4a49      	ldr	r2, [pc, #292]	; (80071f4 <HAL_DMA_Abort_IT+0x1d4>)
 80070d0:	4293      	cmp	r3, r2
 80070d2:	d009      	beq.n	80070e8 <HAL_DMA_Abort_IT+0xc8>
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	4a47      	ldr	r2, [pc, #284]	; (80071f8 <HAL_DMA_Abort_IT+0x1d8>)
 80070da:	4293      	cmp	r3, r2
 80070dc:	d004      	beq.n	80070e8 <HAL_DMA_Abort_IT+0xc8>
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	4a46      	ldr	r2, [pc, #280]	; (80071fc <HAL_DMA_Abort_IT+0x1dc>)
 80070e4:	4293      	cmp	r3, r2
 80070e6:	d101      	bne.n	80070ec <HAL_DMA_Abort_IT+0xcc>
 80070e8:	2301      	movs	r3, #1
 80070ea:	e000      	b.n	80070ee <HAL_DMA_Abort_IT+0xce>
 80070ec:	2300      	movs	r3, #0
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	f000 8086 	beq.w	8007200 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	2204      	movs	r2, #4
 80070f8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	4a2f      	ldr	r2, [pc, #188]	; (80071c0 <HAL_DMA_Abort_IT+0x1a0>)
 8007102:	4293      	cmp	r3, r2
 8007104:	d04a      	beq.n	800719c <HAL_DMA_Abort_IT+0x17c>
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	4a2e      	ldr	r2, [pc, #184]	; (80071c4 <HAL_DMA_Abort_IT+0x1a4>)
 800710c:	4293      	cmp	r3, r2
 800710e:	d045      	beq.n	800719c <HAL_DMA_Abort_IT+0x17c>
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	4a2c      	ldr	r2, [pc, #176]	; (80071c8 <HAL_DMA_Abort_IT+0x1a8>)
 8007116:	4293      	cmp	r3, r2
 8007118:	d040      	beq.n	800719c <HAL_DMA_Abort_IT+0x17c>
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	4a2b      	ldr	r2, [pc, #172]	; (80071cc <HAL_DMA_Abort_IT+0x1ac>)
 8007120:	4293      	cmp	r3, r2
 8007122:	d03b      	beq.n	800719c <HAL_DMA_Abort_IT+0x17c>
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	4a29      	ldr	r2, [pc, #164]	; (80071d0 <HAL_DMA_Abort_IT+0x1b0>)
 800712a:	4293      	cmp	r3, r2
 800712c:	d036      	beq.n	800719c <HAL_DMA_Abort_IT+0x17c>
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	4a28      	ldr	r2, [pc, #160]	; (80071d4 <HAL_DMA_Abort_IT+0x1b4>)
 8007134:	4293      	cmp	r3, r2
 8007136:	d031      	beq.n	800719c <HAL_DMA_Abort_IT+0x17c>
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	4a26      	ldr	r2, [pc, #152]	; (80071d8 <HAL_DMA_Abort_IT+0x1b8>)
 800713e:	4293      	cmp	r3, r2
 8007140:	d02c      	beq.n	800719c <HAL_DMA_Abort_IT+0x17c>
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	4a25      	ldr	r2, [pc, #148]	; (80071dc <HAL_DMA_Abort_IT+0x1bc>)
 8007148:	4293      	cmp	r3, r2
 800714a:	d027      	beq.n	800719c <HAL_DMA_Abort_IT+0x17c>
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	4a23      	ldr	r2, [pc, #140]	; (80071e0 <HAL_DMA_Abort_IT+0x1c0>)
 8007152:	4293      	cmp	r3, r2
 8007154:	d022      	beq.n	800719c <HAL_DMA_Abort_IT+0x17c>
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	4a22      	ldr	r2, [pc, #136]	; (80071e4 <HAL_DMA_Abort_IT+0x1c4>)
 800715c:	4293      	cmp	r3, r2
 800715e:	d01d      	beq.n	800719c <HAL_DMA_Abort_IT+0x17c>
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	4a20      	ldr	r2, [pc, #128]	; (80071e8 <HAL_DMA_Abort_IT+0x1c8>)
 8007166:	4293      	cmp	r3, r2
 8007168:	d018      	beq.n	800719c <HAL_DMA_Abort_IT+0x17c>
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	4a1f      	ldr	r2, [pc, #124]	; (80071ec <HAL_DMA_Abort_IT+0x1cc>)
 8007170:	4293      	cmp	r3, r2
 8007172:	d013      	beq.n	800719c <HAL_DMA_Abort_IT+0x17c>
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	4a1d      	ldr	r2, [pc, #116]	; (80071f0 <HAL_DMA_Abort_IT+0x1d0>)
 800717a:	4293      	cmp	r3, r2
 800717c:	d00e      	beq.n	800719c <HAL_DMA_Abort_IT+0x17c>
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	4a1c      	ldr	r2, [pc, #112]	; (80071f4 <HAL_DMA_Abort_IT+0x1d4>)
 8007184:	4293      	cmp	r3, r2
 8007186:	d009      	beq.n	800719c <HAL_DMA_Abort_IT+0x17c>
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	4a1a      	ldr	r2, [pc, #104]	; (80071f8 <HAL_DMA_Abort_IT+0x1d8>)
 800718e:	4293      	cmp	r3, r2
 8007190:	d004      	beq.n	800719c <HAL_DMA_Abort_IT+0x17c>
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	4a19      	ldr	r2, [pc, #100]	; (80071fc <HAL_DMA_Abort_IT+0x1dc>)
 8007198:	4293      	cmp	r3, r2
 800719a:	d108      	bne.n	80071ae <HAL_DMA_Abort_IT+0x18e>
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	681a      	ldr	r2, [r3, #0]
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	f022 0201 	bic.w	r2, r2, #1
 80071aa:	601a      	str	r2, [r3, #0]
 80071ac:	e178      	b.n	80074a0 <HAL_DMA_Abort_IT+0x480>
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	681a      	ldr	r2, [r3, #0]
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	f022 0201 	bic.w	r2, r2, #1
 80071bc:	601a      	str	r2, [r3, #0]
 80071be:	e16f      	b.n	80074a0 <HAL_DMA_Abort_IT+0x480>
 80071c0:	40020010 	.word	0x40020010
 80071c4:	40020028 	.word	0x40020028
 80071c8:	40020040 	.word	0x40020040
 80071cc:	40020058 	.word	0x40020058
 80071d0:	40020070 	.word	0x40020070
 80071d4:	40020088 	.word	0x40020088
 80071d8:	400200a0 	.word	0x400200a0
 80071dc:	400200b8 	.word	0x400200b8
 80071e0:	40020410 	.word	0x40020410
 80071e4:	40020428 	.word	0x40020428
 80071e8:	40020440 	.word	0x40020440
 80071ec:	40020458 	.word	0x40020458
 80071f0:	40020470 	.word	0x40020470
 80071f4:	40020488 	.word	0x40020488
 80071f8:	400204a0 	.word	0x400204a0
 80071fc:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	681a      	ldr	r2, [r3, #0]
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	f022 020e 	bic.w	r2, r2, #14
 800720e:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	4a6c      	ldr	r2, [pc, #432]	; (80073c8 <HAL_DMA_Abort_IT+0x3a8>)
 8007216:	4293      	cmp	r3, r2
 8007218:	d04a      	beq.n	80072b0 <HAL_DMA_Abort_IT+0x290>
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	4a6b      	ldr	r2, [pc, #428]	; (80073cc <HAL_DMA_Abort_IT+0x3ac>)
 8007220:	4293      	cmp	r3, r2
 8007222:	d045      	beq.n	80072b0 <HAL_DMA_Abort_IT+0x290>
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	4a69      	ldr	r2, [pc, #420]	; (80073d0 <HAL_DMA_Abort_IT+0x3b0>)
 800722a:	4293      	cmp	r3, r2
 800722c:	d040      	beq.n	80072b0 <HAL_DMA_Abort_IT+0x290>
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	4a68      	ldr	r2, [pc, #416]	; (80073d4 <HAL_DMA_Abort_IT+0x3b4>)
 8007234:	4293      	cmp	r3, r2
 8007236:	d03b      	beq.n	80072b0 <HAL_DMA_Abort_IT+0x290>
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	4a66      	ldr	r2, [pc, #408]	; (80073d8 <HAL_DMA_Abort_IT+0x3b8>)
 800723e:	4293      	cmp	r3, r2
 8007240:	d036      	beq.n	80072b0 <HAL_DMA_Abort_IT+0x290>
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	4a65      	ldr	r2, [pc, #404]	; (80073dc <HAL_DMA_Abort_IT+0x3bc>)
 8007248:	4293      	cmp	r3, r2
 800724a:	d031      	beq.n	80072b0 <HAL_DMA_Abort_IT+0x290>
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	4a63      	ldr	r2, [pc, #396]	; (80073e0 <HAL_DMA_Abort_IT+0x3c0>)
 8007252:	4293      	cmp	r3, r2
 8007254:	d02c      	beq.n	80072b0 <HAL_DMA_Abort_IT+0x290>
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	4a62      	ldr	r2, [pc, #392]	; (80073e4 <HAL_DMA_Abort_IT+0x3c4>)
 800725c:	4293      	cmp	r3, r2
 800725e:	d027      	beq.n	80072b0 <HAL_DMA_Abort_IT+0x290>
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	4a60      	ldr	r2, [pc, #384]	; (80073e8 <HAL_DMA_Abort_IT+0x3c8>)
 8007266:	4293      	cmp	r3, r2
 8007268:	d022      	beq.n	80072b0 <HAL_DMA_Abort_IT+0x290>
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	4a5f      	ldr	r2, [pc, #380]	; (80073ec <HAL_DMA_Abort_IT+0x3cc>)
 8007270:	4293      	cmp	r3, r2
 8007272:	d01d      	beq.n	80072b0 <HAL_DMA_Abort_IT+0x290>
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	4a5d      	ldr	r2, [pc, #372]	; (80073f0 <HAL_DMA_Abort_IT+0x3d0>)
 800727a:	4293      	cmp	r3, r2
 800727c:	d018      	beq.n	80072b0 <HAL_DMA_Abort_IT+0x290>
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	4a5c      	ldr	r2, [pc, #368]	; (80073f4 <HAL_DMA_Abort_IT+0x3d4>)
 8007284:	4293      	cmp	r3, r2
 8007286:	d013      	beq.n	80072b0 <HAL_DMA_Abort_IT+0x290>
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	4a5a      	ldr	r2, [pc, #360]	; (80073f8 <HAL_DMA_Abort_IT+0x3d8>)
 800728e:	4293      	cmp	r3, r2
 8007290:	d00e      	beq.n	80072b0 <HAL_DMA_Abort_IT+0x290>
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	4a59      	ldr	r2, [pc, #356]	; (80073fc <HAL_DMA_Abort_IT+0x3dc>)
 8007298:	4293      	cmp	r3, r2
 800729a:	d009      	beq.n	80072b0 <HAL_DMA_Abort_IT+0x290>
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	4a57      	ldr	r2, [pc, #348]	; (8007400 <HAL_DMA_Abort_IT+0x3e0>)
 80072a2:	4293      	cmp	r3, r2
 80072a4:	d004      	beq.n	80072b0 <HAL_DMA_Abort_IT+0x290>
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	4a56      	ldr	r2, [pc, #344]	; (8007404 <HAL_DMA_Abort_IT+0x3e4>)
 80072ac:	4293      	cmp	r3, r2
 80072ae:	d108      	bne.n	80072c2 <HAL_DMA_Abort_IT+0x2a2>
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	681a      	ldr	r2, [r3, #0]
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	f022 0201 	bic.w	r2, r2, #1
 80072be:	601a      	str	r2, [r3, #0]
 80072c0:	e007      	b.n	80072d2 <HAL_DMA_Abort_IT+0x2b2>
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	681a      	ldr	r2, [r3, #0]
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	f022 0201 	bic.w	r2, r2, #1
 80072d0:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	4a3c      	ldr	r2, [pc, #240]	; (80073c8 <HAL_DMA_Abort_IT+0x3a8>)
 80072d8:	4293      	cmp	r3, r2
 80072da:	d072      	beq.n	80073c2 <HAL_DMA_Abort_IT+0x3a2>
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	4a3a      	ldr	r2, [pc, #232]	; (80073cc <HAL_DMA_Abort_IT+0x3ac>)
 80072e2:	4293      	cmp	r3, r2
 80072e4:	d06d      	beq.n	80073c2 <HAL_DMA_Abort_IT+0x3a2>
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	4a39      	ldr	r2, [pc, #228]	; (80073d0 <HAL_DMA_Abort_IT+0x3b0>)
 80072ec:	4293      	cmp	r3, r2
 80072ee:	d068      	beq.n	80073c2 <HAL_DMA_Abort_IT+0x3a2>
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	4a37      	ldr	r2, [pc, #220]	; (80073d4 <HAL_DMA_Abort_IT+0x3b4>)
 80072f6:	4293      	cmp	r3, r2
 80072f8:	d063      	beq.n	80073c2 <HAL_DMA_Abort_IT+0x3a2>
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	4a36      	ldr	r2, [pc, #216]	; (80073d8 <HAL_DMA_Abort_IT+0x3b8>)
 8007300:	4293      	cmp	r3, r2
 8007302:	d05e      	beq.n	80073c2 <HAL_DMA_Abort_IT+0x3a2>
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	4a34      	ldr	r2, [pc, #208]	; (80073dc <HAL_DMA_Abort_IT+0x3bc>)
 800730a:	4293      	cmp	r3, r2
 800730c:	d059      	beq.n	80073c2 <HAL_DMA_Abort_IT+0x3a2>
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	4a33      	ldr	r2, [pc, #204]	; (80073e0 <HAL_DMA_Abort_IT+0x3c0>)
 8007314:	4293      	cmp	r3, r2
 8007316:	d054      	beq.n	80073c2 <HAL_DMA_Abort_IT+0x3a2>
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	4a31      	ldr	r2, [pc, #196]	; (80073e4 <HAL_DMA_Abort_IT+0x3c4>)
 800731e:	4293      	cmp	r3, r2
 8007320:	d04f      	beq.n	80073c2 <HAL_DMA_Abort_IT+0x3a2>
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	4a30      	ldr	r2, [pc, #192]	; (80073e8 <HAL_DMA_Abort_IT+0x3c8>)
 8007328:	4293      	cmp	r3, r2
 800732a:	d04a      	beq.n	80073c2 <HAL_DMA_Abort_IT+0x3a2>
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	4a2e      	ldr	r2, [pc, #184]	; (80073ec <HAL_DMA_Abort_IT+0x3cc>)
 8007332:	4293      	cmp	r3, r2
 8007334:	d045      	beq.n	80073c2 <HAL_DMA_Abort_IT+0x3a2>
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	4a2d      	ldr	r2, [pc, #180]	; (80073f0 <HAL_DMA_Abort_IT+0x3d0>)
 800733c:	4293      	cmp	r3, r2
 800733e:	d040      	beq.n	80073c2 <HAL_DMA_Abort_IT+0x3a2>
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	4a2b      	ldr	r2, [pc, #172]	; (80073f4 <HAL_DMA_Abort_IT+0x3d4>)
 8007346:	4293      	cmp	r3, r2
 8007348:	d03b      	beq.n	80073c2 <HAL_DMA_Abort_IT+0x3a2>
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	4a2a      	ldr	r2, [pc, #168]	; (80073f8 <HAL_DMA_Abort_IT+0x3d8>)
 8007350:	4293      	cmp	r3, r2
 8007352:	d036      	beq.n	80073c2 <HAL_DMA_Abort_IT+0x3a2>
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	4a28      	ldr	r2, [pc, #160]	; (80073fc <HAL_DMA_Abort_IT+0x3dc>)
 800735a:	4293      	cmp	r3, r2
 800735c:	d031      	beq.n	80073c2 <HAL_DMA_Abort_IT+0x3a2>
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	4a27      	ldr	r2, [pc, #156]	; (8007400 <HAL_DMA_Abort_IT+0x3e0>)
 8007364:	4293      	cmp	r3, r2
 8007366:	d02c      	beq.n	80073c2 <HAL_DMA_Abort_IT+0x3a2>
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	4a25      	ldr	r2, [pc, #148]	; (8007404 <HAL_DMA_Abort_IT+0x3e4>)
 800736e:	4293      	cmp	r3, r2
 8007370:	d027      	beq.n	80073c2 <HAL_DMA_Abort_IT+0x3a2>
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	4a24      	ldr	r2, [pc, #144]	; (8007408 <HAL_DMA_Abort_IT+0x3e8>)
 8007378:	4293      	cmp	r3, r2
 800737a:	d022      	beq.n	80073c2 <HAL_DMA_Abort_IT+0x3a2>
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	4a22      	ldr	r2, [pc, #136]	; (800740c <HAL_DMA_Abort_IT+0x3ec>)
 8007382:	4293      	cmp	r3, r2
 8007384:	d01d      	beq.n	80073c2 <HAL_DMA_Abort_IT+0x3a2>
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	4a21      	ldr	r2, [pc, #132]	; (8007410 <HAL_DMA_Abort_IT+0x3f0>)
 800738c:	4293      	cmp	r3, r2
 800738e:	d018      	beq.n	80073c2 <HAL_DMA_Abort_IT+0x3a2>
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	4a1f      	ldr	r2, [pc, #124]	; (8007414 <HAL_DMA_Abort_IT+0x3f4>)
 8007396:	4293      	cmp	r3, r2
 8007398:	d013      	beq.n	80073c2 <HAL_DMA_Abort_IT+0x3a2>
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	4a1e      	ldr	r2, [pc, #120]	; (8007418 <HAL_DMA_Abort_IT+0x3f8>)
 80073a0:	4293      	cmp	r3, r2
 80073a2:	d00e      	beq.n	80073c2 <HAL_DMA_Abort_IT+0x3a2>
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	4a1c      	ldr	r2, [pc, #112]	; (800741c <HAL_DMA_Abort_IT+0x3fc>)
 80073aa:	4293      	cmp	r3, r2
 80073ac:	d009      	beq.n	80073c2 <HAL_DMA_Abort_IT+0x3a2>
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	4a1b      	ldr	r2, [pc, #108]	; (8007420 <HAL_DMA_Abort_IT+0x400>)
 80073b4:	4293      	cmp	r3, r2
 80073b6:	d004      	beq.n	80073c2 <HAL_DMA_Abort_IT+0x3a2>
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	4a19      	ldr	r2, [pc, #100]	; (8007424 <HAL_DMA_Abort_IT+0x404>)
 80073be:	4293      	cmp	r3, r2
 80073c0:	d132      	bne.n	8007428 <HAL_DMA_Abort_IT+0x408>
 80073c2:	2301      	movs	r3, #1
 80073c4:	e031      	b.n	800742a <HAL_DMA_Abort_IT+0x40a>
 80073c6:	bf00      	nop
 80073c8:	40020010 	.word	0x40020010
 80073cc:	40020028 	.word	0x40020028
 80073d0:	40020040 	.word	0x40020040
 80073d4:	40020058 	.word	0x40020058
 80073d8:	40020070 	.word	0x40020070
 80073dc:	40020088 	.word	0x40020088
 80073e0:	400200a0 	.word	0x400200a0
 80073e4:	400200b8 	.word	0x400200b8
 80073e8:	40020410 	.word	0x40020410
 80073ec:	40020428 	.word	0x40020428
 80073f0:	40020440 	.word	0x40020440
 80073f4:	40020458 	.word	0x40020458
 80073f8:	40020470 	.word	0x40020470
 80073fc:	40020488 	.word	0x40020488
 8007400:	400204a0 	.word	0x400204a0
 8007404:	400204b8 	.word	0x400204b8
 8007408:	58025408 	.word	0x58025408
 800740c:	5802541c 	.word	0x5802541c
 8007410:	58025430 	.word	0x58025430
 8007414:	58025444 	.word	0x58025444
 8007418:	58025458 	.word	0x58025458
 800741c:	5802546c 	.word	0x5802546c
 8007420:	58025480 	.word	0x58025480
 8007424:	58025494 	.word	0x58025494
 8007428:	2300      	movs	r3, #0
 800742a:	2b00      	cmp	r3, #0
 800742c:	d028      	beq.n	8007480 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007432:	681a      	ldr	r2, [r3, #0]
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007438:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800743c:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007442:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007448:	f003 031f 	and.w	r3, r3, #31
 800744c:	2201      	movs	r2, #1
 800744e:	409a      	lsls	r2, r3
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007458:	687a      	ldr	r2, [r7, #4]
 800745a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800745c:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007462:	2b00      	cmp	r3, #0
 8007464:	d00c      	beq.n	8007480 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800746a:	681a      	ldr	r2, [r3, #0]
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007470:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007474:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800747a:	687a      	ldr	r2, [r7, #4]
 800747c:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800747e:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	2201      	movs	r2, #1
 8007484:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	2200      	movs	r2, #0
 800748c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007494:	2b00      	cmp	r3, #0
 8007496:	d003      	beq.n	80074a0 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800749c:	6878      	ldr	r0, [r7, #4]
 800749e:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 80074a0:	2300      	movs	r3, #0
}
 80074a2:	4618      	mov	r0, r3
 80074a4:	3710      	adds	r7, #16
 80074a6:	46bd      	mov	sp, r7
 80074a8:	bd80      	pop	{r7, pc}
 80074aa:	bf00      	nop

080074ac <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80074ac:	b480      	push	{r7}
 80074ae:	b089      	sub	sp, #36	; 0x24
 80074b0:	af00      	add	r7, sp, #0
 80074b2:	6078      	str	r0, [r7, #4]
 80074b4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80074b6:	2300      	movs	r3, #0
 80074b8:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80074ba:	4b89      	ldr	r3, [pc, #548]	; (80076e0 <HAL_GPIO_Init+0x234>)
 80074bc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80074be:	e194      	b.n	80077ea <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80074c0:	683b      	ldr	r3, [r7, #0]
 80074c2:	681a      	ldr	r2, [r3, #0]
 80074c4:	2101      	movs	r1, #1
 80074c6:	69fb      	ldr	r3, [r7, #28]
 80074c8:	fa01 f303 	lsl.w	r3, r1, r3
 80074cc:	4013      	ands	r3, r2
 80074ce:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80074d0:	693b      	ldr	r3, [r7, #16]
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	f000 8186 	beq.w	80077e4 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80074d8:	683b      	ldr	r3, [r7, #0]
 80074da:	685b      	ldr	r3, [r3, #4]
 80074dc:	f003 0303 	and.w	r3, r3, #3
 80074e0:	2b01      	cmp	r3, #1
 80074e2:	d005      	beq.n	80074f0 <HAL_GPIO_Init+0x44>
 80074e4:	683b      	ldr	r3, [r7, #0]
 80074e6:	685b      	ldr	r3, [r3, #4]
 80074e8:	f003 0303 	and.w	r3, r3, #3
 80074ec:	2b02      	cmp	r3, #2
 80074ee:	d130      	bne.n	8007552 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	689b      	ldr	r3, [r3, #8]
 80074f4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80074f6:	69fb      	ldr	r3, [r7, #28]
 80074f8:	005b      	lsls	r3, r3, #1
 80074fa:	2203      	movs	r2, #3
 80074fc:	fa02 f303 	lsl.w	r3, r2, r3
 8007500:	43db      	mvns	r3, r3
 8007502:	69ba      	ldr	r2, [r7, #24]
 8007504:	4013      	ands	r3, r2
 8007506:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8007508:	683b      	ldr	r3, [r7, #0]
 800750a:	68da      	ldr	r2, [r3, #12]
 800750c:	69fb      	ldr	r3, [r7, #28]
 800750e:	005b      	lsls	r3, r3, #1
 8007510:	fa02 f303 	lsl.w	r3, r2, r3
 8007514:	69ba      	ldr	r2, [r7, #24]
 8007516:	4313      	orrs	r3, r2
 8007518:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	69ba      	ldr	r2, [r7, #24]
 800751e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	685b      	ldr	r3, [r3, #4]
 8007524:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8007526:	2201      	movs	r2, #1
 8007528:	69fb      	ldr	r3, [r7, #28]
 800752a:	fa02 f303 	lsl.w	r3, r2, r3
 800752e:	43db      	mvns	r3, r3
 8007530:	69ba      	ldr	r2, [r7, #24]
 8007532:	4013      	ands	r3, r2
 8007534:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8007536:	683b      	ldr	r3, [r7, #0]
 8007538:	685b      	ldr	r3, [r3, #4]
 800753a:	091b      	lsrs	r3, r3, #4
 800753c:	f003 0201 	and.w	r2, r3, #1
 8007540:	69fb      	ldr	r3, [r7, #28]
 8007542:	fa02 f303 	lsl.w	r3, r2, r3
 8007546:	69ba      	ldr	r2, [r7, #24]
 8007548:	4313      	orrs	r3, r2
 800754a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	69ba      	ldr	r2, [r7, #24]
 8007550:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8007552:	683b      	ldr	r3, [r7, #0]
 8007554:	685b      	ldr	r3, [r3, #4]
 8007556:	f003 0303 	and.w	r3, r3, #3
 800755a:	2b03      	cmp	r3, #3
 800755c:	d017      	beq.n	800758e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	68db      	ldr	r3, [r3, #12]
 8007562:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8007564:	69fb      	ldr	r3, [r7, #28]
 8007566:	005b      	lsls	r3, r3, #1
 8007568:	2203      	movs	r2, #3
 800756a:	fa02 f303 	lsl.w	r3, r2, r3
 800756e:	43db      	mvns	r3, r3
 8007570:	69ba      	ldr	r2, [r7, #24]
 8007572:	4013      	ands	r3, r2
 8007574:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007576:	683b      	ldr	r3, [r7, #0]
 8007578:	689a      	ldr	r2, [r3, #8]
 800757a:	69fb      	ldr	r3, [r7, #28]
 800757c:	005b      	lsls	r3, r3, #1
 800757e:	fa02 f303 	lsl.w	r3, r2, r3
 8007582:	69ba      	ldr	r2, [r7, #24]
 8007584:	4313      	orrs	r3, r2
 8007586:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	69ba      	ldr	r2, [r7, #24]
 800758c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800758e:	683b      	ldr	r3, [r7, #0]
 8007590:	685b      	ldr	r3, [r3, #4]
 8007592:	f003 0303 	and.w	r3, r3, #3
 8007596:	2b02      	cmp	r3, #2
 8007598:	d123      	bne.n	80075e2 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800759a:	69fb      	ldr	r3, [r7, #28]
 800759c:	08da      	lsrs	r2, r3, #3
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	3208      	adds	r2, #8
 80075a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80075a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80075a8:	69fb      	ldr	r3, [r7, #28]
 80075aa:	f003 0307 	and.w	r3, r3, #7
 80075ae:	009b      	lsls	r3, r3, #2
 80075b0:	220f      	movs	r2, #15
 80075b2:	fa02 f303 	lsl.w	r3, r2, r3
 80075b6:	43db      	mvns	r3, r3
 80075b8:	69ba      	ldr	r2, [r7, #24]
 80075ba:	4013      	ands	r3, r2
 80075bc:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80075be:	683b      	ldr	r3, [r7, #0]
 80075c0:	691a      	ldr	r2, [r3, #16]
 80075c2:	69fb      	ldr	r3, [r7, #28]
 80075c4:	f003 0307 	and.w	r3, r3, #7
 80075c8:	009b      	lsls	r3, r3, #2
 80075ca:	fa02 f303 	lsl.w	r3, r2, r3
 80075ce:	69ba      	ldr	r2, [r7, #24]
 80075d0:	4313      	orrs	r3, r2
 80075d2:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80075d4:	69fb      	ldr	r3, [r7, #28]
 80075d6:	08da      	lsrs	r2, r3, #3
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	3208      	adds	r2, #8
 80075dc:	69b9      	ldr	r1, [r7, #24]
 80075de:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80075e8:	69fb      	ldr	r3, [r7, #28]
 80075ea:	005b      	lsls	r3, r3, #1
 80075ec:	2203      	movs	r2, #3
 80075ee:	fa02 f303 	lsl.w	r3, r2, r3
 80075f2:	43db      	mvns	r3, r3
 80075f4:	69ba      	ldr	r2, [r7, #24]
 80075f6:	4013      	ands	r3, r2
 80075f8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80075fa:	683b      	ldr	r3, [r7, #0]
 80075fc:	685b      	ldr	r3, [r3, #4]
 80075fe:	f003 0203 	and.w	r2, r3, #3
 8007602:	69fb      	ldr	r3, [r7, #28]
 8007604:	005b      	lsls	r3, r3, #1
 8007606:	fa02 f303 	lsl.w	r3, r2, r3
 800760a:	69ba      	ldr	r2, [r7, #24]
 800760c:	4313      	orrs	r3, r2
 800760e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	69ba      	ldr	r2, [r7, #24]
 8007614:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8007616:	683b      	ldr	r3, [r7, #0]
 8007618:	685b      	ldr	r3, [r3, #4]
 800761a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800761e:	2b00      	cmp	r3, #0
 8007620:	f000 80e0 	beq.w	80077e4 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007624:	4b2f      	ldr	r3, [pc, #188]	; (80076e4 <HAL_GPIO_Init+0x238>)
 8007626:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800762a:	4a2e      	ldr	r2, [pc, #184]	; (80076e4 <HAL_GPIO_Init+0x238>)
 800762c:	f043 0302 	orr.w	r3, r3, #2
 8007630:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8007634:	4b2b      	ldr	r3, [pc, #172]	; (80076e4 <HAL_GPIO_Init+0x238>)
 8007636:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800763a:	f003 0302 	and.w	r3, r3, #2
 800763e:	60fb      	str	r3, [r7, #12]
 8007640:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8007642:	4a29      	ldr	r2, [pc, #164]	; (80076e8 <HAL_GPIO_Init+0x23c>)
 8007644:	69fb      	ldr	r3, [r7, #28]
 8007646:	089b      	lsrs	r3, r3, #2
 8007648:	3302      	adds	r3, #2
 800764a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800764e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8007650:	69fb      	ldr	r3, [r7, #28]
 8007652:	f003 0303 	and.w	r3, r3, #3
 8007656:	009b      	lsls	r3, r3, #2
 8007658:	220f      	movs	r2, #15
 800765a:	fa02 f303 	lsl.w	r3, r2, r3
 800765e:	43db      	mvns	r3, r3
 8007660:	69ba      	ldr	r2, [r7, #24]
 8007662:	4013      	ands	r3, r2
 8007664:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	4a20      	ldr	r2, [pc, #128]	; (80076ec <HAL_GPIO_Init+0x240>)
 800766a:	4293      	cmp	r3, r2
 800766c:	d052      	beq.n	8007714 <HAL_GPIO_Init+0x268>
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	4a1f      	ldr	r2, [pc, #124]	; (80076f0 <HAL_GPIO_Init+0x244>)
 8007672:	4293      	cmp	r3, r2
 8007674:	d031      	beq.n	80076da <HAL_GPIO_Init+0x22e>
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	4a1e      	ldr	r2, [pc, #120]	; (80076f4 <HAL_GPIO_Init+0x248>)
 800767a:	4293      	cmp	r3, r2
 800767c:	d02b      	beq.n	80076d6 <HAL_GPIO_Init+0x22a>
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	4a1d      	ldr	r2, [pc, #116]	; (80076f8 <HAL_GPIO_Init+0x24c>)
 8007682:	4293      	cmp	r3, r2
 8007684:	d025      	beq.n	80076d2 <HAL_GPIO_Init+0x226>
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	4a1c      	ldr	r2, [pc, #112]	; (80076fc <HAL_GPIO_Init+0x250>)
 800768a:	4293      	cmp	r3, r2
 800768c:	d01f      	beq.n	80076ce <HAL_GPIO_Init+0x222>
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	4a1b      	ldr	r2, [pc, #108]	; (8007700 <HAL_GPIO_Init+0x254>)
 8007692:	4293      	cmp	r3, r2
 8007694:	d019      	beq.n	80076ca <HAL_GPIO_Init+0x21e>
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	4a1a      	ldr	r2, [pc, #104]	; (8007704 <HAL_GPIO_Init+0x258>)
 800769a:	4293      	cmp	r3, r2
 800769c:	d013      	beq.n	80076c6 <HAL_GPIO_Init+0x21a>
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	4a19      	ldr	r2, [pc, #100]	; (8007708 <HAL_GPIO_Init+0x25c>)
 80076a2:	4293      	cmp	r3, r2
 80076a4:	d00d      	beq.n	80076c2 <HAL_GPIO_Init+0x216>
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	4a18      	ldr	r2, [pc, #96]	; (800770c <HAL_GPIO_Init+0x260>)
 80076aa:	4293      	cmp	r3, r2
 80076ac:	d007      	beq.n	80076be <HAL_GPIO_Init+0x212>
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	4a17      	ldr	r2, [pc, #92]	; (8007710 <HAL_GPIO_Init+0x264>)
 80076b2:	4293      	cmp	r3, r2
 80076b4:	d101      	bne.n	80076ba <HAL_GPIO_Init+0x20e>
 80076b6:	2309      	movs	r3, #9
 80076b8:	e02d      	b.n	8007716 <HAL_GPIO_Init+0x26a>
 80076ba:	230a      	movs	r3, #10
 80076bc:	e02b      	b.n	8007716 <HAL_GPIO_Init+0x26a>
 80076be:	2308      	movs	r3, #8
 80076c0:	e029      	b.n	8007716 <HAL_GPIO_Init+0x26a>
 80076c2:	2307      	movs	r3, #7
 80076c4:	e027      	b.n	8007716 <HAL_GPIO_Init+0x26a>
 80076c6:	2306      	movs	r3, #6
 80076c8:	e025      	b.n	8007716 <HAL_GPIO_Init+0x26a>
 80076ca:	2305      	movs	r3, #5
 80076cc:	e023      	b.n	8007716 <HAL_GPIO_Init+0x26a>
 80076ce:	2304      	movs	r3, #4
 80076d0:	e021      	b.n	8007716 <HAL_GPIO_Init+0x26a>
 80076d2:	2303      	movs	r3, #3
 80076d4:	e01f      	b.n	8007716 <HAL_GPIO_Init+0x26a>
 80076d6:	2302      	movs	r3, #2
 80076d8:	e01d      	b.n	8007716 <HAL_GPIO_Init+0x26a>
 80076da:	2301      	movs	r3, #1
 80076dc:	e01b      	b.n	8007716 <HAL_GPIO_Init+0x26a>
 80076de:	bf00      	nop
 80076e0:	58000080 	.word	0x58000080
 80076e4:	58024400 	.word	0x58024400
 80076e8:	58000400 	.word	0x58000400
 80076ec:	58020000 	.word	0x58020000
 80076f0:	58020400 	.word	0x58020400
 80076f4:	58020800 	.word	0x58020800
 80076f8:	58020c00 	.word	0x58020c00
 80076fc:	58021000 	.word	0x58021000
 8007700:	58021400 	.word	0x58021400
 8007704:	58021800 	.word	0x58021800
 8007708:	58021c00 	.word	0x58021c00
 800770c:	58022000 	.word	0x58022000
 8007710:	58022400 	.word	0x58022400
 8007714:	2300      	movs	r3, #0
 8007716:	69fa      	ldr	r2, [r7, #28]
 8007718:	f002 0203 	and.w	r2, r2, #3
 800771c:	0092      	lsls	r2, r2, #2
 800771e:	4093      	lsls	r3, r2
 8007720:	69ba      	ldr	r2, [r7, #24]
 8007722:	4313      	orrs	r3, r2
 8007724:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8007726:	4938      	ldr	r1, [pc, #224]	; (8007808 <HAL_GPIO_Init+0x35c>)
 8007728:	69fb      	ldr	r3, [r7, #28]
 800772a:	089b      	lsrs	r3, r3, #2
 800772c:	3302      	adds	r3, #2
 800772e:	69ba      	ldr	r2, [r7, #24]
 8007730:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8007734:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800773c:	693b      	ldr	r3, [r7, #16]
 800773e:	43db      	mvns	r3, r3
 8007740:	69ba      	ldr	r2, [r7, #24]
 8007742:	4013      	ands	r3, r2
 8007744:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8007746:	683b      	ldr	r3, [r7, #0]
 8007748:	685b      	ldr	r3, [r3, #4]
 800774a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800774e:	2b00      	cmp	r3, #0
 8007750:	d003      	beq.n	800775a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8007752:	69ba      	ldr	r2, [r7, #24]
 8007754:	693b      	ldr	r3, [r7, #16]
 8007756:	4313      	orrs	r3, r2
 8007758:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800775a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800775e:	69bb      	ldr	r3, [r7, #24]
 8007760:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8007762:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007766:	685b      	ldr	r3, [r3, #4]
 8007768:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800776a:	693b      	ldr	r3, [r7, #16]
 800776c:	43db      	mvns	r3, r3
 800776e:	69ba      	ldr	r2, [r7, #24]
 8007770:	4013      	ands	r3, r2
 8007772:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8007774:	683b      	ldr	r3, [r7, #0]
 8007776:	685b      	ldr	r3, [r3, #4]
 8007778:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800777c:	2b00      	cmp	r3, #0
 800777e:	d003      	beq.n	8007788 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8007780:	69ba      	ldr	r2, [r7, #24]
 8007782:	693b      	ldr	r3, [r7, #16]
 8007784:	4313      	orrs	r3, r2
 8007786:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8007788:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800778c:	69bb      	ldr	r3, [r7, #24]
 800778e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8007790:	697b      	ldr	r3, [r7, #20]
 8007792:	685b      	ldr	r3, [r3, #4]
 8007794:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007796:	693b      	ldr	r3, [r7, #16]
 8007798:	43db      	mvns	r3, r3
 800779a:	69ba      	ldr	r2, [r7, #24]
 800779c:	4013      	ands	r3, r2
 800779e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80077a0:	683b      	ldr	r3, [r7, #0]
 80077a2:	685b      	ldr	r3, [r3, #4]
 80077a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80077a8:	2b00      	cmp	r3, #0
 80077aa:	d003      	beq.n	80077b4 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80077ac:	69ba      	ldr	r2, [r7, #24]
 80077ae:	693b      	ldr	r3, [r7, #16]
 80077b0:	4313      	orrs	r3, r2
 80077b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80077b4:	697b      	ldr	r3, [r7, #20]
 80077b6:	69ba      	ldr	r2, [r7, #24]
 80077b8:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80077ba:	697b      	ldr	r3, [r7, #20]
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80077c0:	693b      	ldr	r3, [r7, #16]
 80077c2:	43db      	mvns	r3, r3
 80077c4:	69ba      	ldr	r2, [r7, #24]
 80077c6:	4013      	ands	r3, r2
 80077c8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80077ca:	683b      	ldr	r3, [r7, #0]
 80077cc:	685b      	ldr	r3, [r3, #4]
 80077ce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	d003      	beq.n	80077de <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80077d6:	69ba      	ldr	r2, [r7, #24]
 80077d8:	693b      	ldr	r3, [r7, #16]
 80077da:	4313      	orrs	r3, r2
 80077dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80077de:	697b      	ldr	r3, [r7, #20]
 80077e0:	69ba      	ldr	r2, [r7, #24]
 80077e2:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80077e4:	69fb      	ldr	r3, [r7, #28]
 80077e6:	3301      	adds	r3, #1
 80077e8:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80077ea:	683b      	ldr	r3, [r7, #0]
 80077ec:	681a      	ldr	r2, [r3, #0]
 80077ee:	69fb      	ldr	r3, [r7, #28]
 80077f0:	fa22 f303 	lsr.w	r3, r2, r3
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	f47f ae63 	bne.w	80074c0 <HAL_GPIO_Init+0x14>
  }
}
 80077fa:	bf00      	nop
 80077fc:	bf00      	nop
 80077fe:	3724      	adds	r7, #36	; 0x24
 8007800:	46bd      	mov	sp, r7
 8007802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007806:	4770      	bx	lr
 8007808:	58000400 	.word	0x58000400

0800780c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800780c:	b480      	push	{r7}
 800780e:	b085      	sub	sp, #20
 8007810:	af00      	add	r7, sp, #0
 8007812:	6078      	str	r0, [r7, #4]
 8007814:	460b      	mov	r3, r1
 8007816:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	691a      	ldr	r2, [r3, #16]
 800781c:	887b      	ldrh	r3, [r7, #2]
 800781e:	4013      	ands	r3, r2
 8007820:	2b00      	cmp	r3, #0
 8007822:	d002      	beq.n	800782a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8007824:	2301      	movs	r3, #1
 8007826:	73fb      	strb	r3, [r7, #15]
 8007828:	e001      	b.n	800782e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800782a:	2300      	movs	r3, #0
 800782c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800782e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007830:	4618      	mov	r0, r3
 8007832:	3714      	adds	r7, #20
 8007834:	46bd      	mov	sp, r7
 8007836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800783a:	4770      	bx	lr

0800783c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800783c:	b480      	push	{r7}
 800783e:	b083      	sub	sp, #12
 8007840:	af00      	add	r7, sp, #0
 8007842:	6078      	str	r0, [r7, #4]
 8007844:	460b      	mov	r3, r1
 8007846:	807b      	strh	r3, [r7, #2]
 8007848:	4613      	mov	r3, r2
 800784a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800784c:	787b      	ldrb	r3, [r7, #1]
 800784e:	2b00      	cmp	r3, #0
 8007850:	d003      	beq.n	800785a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8007852:	887a      	ldrh	r2, [r7, #2]
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8007858:	e003      	b.n	8007862 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800785a:	887b      	ldrh	r3, [r7, #2]
 800785c:	041a      	lsls	r2, r3, #16
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	619a      	str	r2, [r3, #24]
}
 8007862:	bf00      	nop
 8007864:	370c      	adds	r7, #12
 8007866:	46bd      	mov	sp, r7
 8007868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800786c:	4770      	bx	lr

0800786e <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800786e:	b580      	push	{r7, lr}
 8007870:	b082      	sub	sp, #8
 8007872:	af00      	add	r7, sp, #0
 8007874:	4603      	mov	r3, r0
 8007876:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 8007878:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800787c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8007880:	88fb      	ldrh	r3, [r7, #6]
 8007882:	4013      	ands	r3, r2
 8007884:	2b00      	cmp	r3, #0
 8007886:	d008      	beq.n	800789a <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8007888:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800788c:	88fb      	ldrh	r3, [r7, #6]
 800788e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8007892:	88fb      	ldrh	r3, [r7, #6]
 8007894:	4618      	mov	r0, r3
 8007896:	f7fa ff41 	bl	800271c <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 800789a:	bf00      	nop
 800789c:	3708      	adds	r7, #8
 800789e:	46bd      	mov	sp, r7
 80078a0:	bd80      	pop	{r7, pc}
	...

080078a4 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80078a4:	b580      	push	{r7, lr}
 80078a6:	b084      	sub	sp, #16
 80078a8:	af00      	add	r7, sp, #0
 80078aa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80078ac:	4b19      	ldr	r3, [pc, #100]	; (8007914 <HAL_PWREx_ConfigSupply+0x70>)
 80078ae:	68db      	ldr	r3, [r3, #12]
 80078b0:	f003 0304 	and.w	r3, r3, #4
 80078b4:	2b04      	cmp	r3, #4
 80078b6:	d00a      	beq.n	80078ce <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80078b8:	4b16      	ldr	r3, [pc, #88]	; (8007914 <HAL_PWREx_ConfigSupply+0x70>)
 80078ba:	68db      	ldr	r3, [r3, #12]
 80078bc:	f003 0307 	and.w	r3, r3, #7
 80078c0:	687a      	ldr	r2, [r7, #4]
 80078c2:	429a      	cmp	r2, r3
 80078c4:	d001      	beq.n	80078ca <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80078c6:	2301      	movs	r3, #1
 80078c8:	e01f      	b.n	800790a <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80078ca:	2300      	movs	r3, #0
 80078cc:	e01d      	b.n	800790a <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80078ce:	4b11      	ldr	r3, [pc, #68]	; (8007914 <HAL_PWREx_ConfigSupply+0x70>)
 80078d0:	68db      	ldr	r3, [r3, #12]
 80078d2:	f023 0207 	bic.w	r2, r3, #7
 80078d6:	490f      	ldr	r1, [pc, #60]	; (8007914 <HAL_PWREx_ConfigSupply+0x70>)
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	4313      	orrs	r3, r2
 80078dc:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80078de:	f7fe ff03 	bl	80066e8 <HAL_GetTick>
 80078e2:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80078e4:	e009      	b.n	80078fa <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80078e6:	f7fe feff 	bl	80066e8 <HAL_GetTick>
 80078ea:	4602      	mov	r2, r0
 80078ec:	68fb      	ldr	r3, [r7, #12]
 80078ee:	1ad3      	subs	r3, r2, r3
 80078f0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80078f4:	d901      	bls.n	80078fa <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80078f6:	2301      	movs	r3, #1
 80078f8:	e007      	b.n	800790a <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80078fa:	4b06      	ldr	r3, [pc, #24]	; (8007914 <HAL_PWREx_ConfigSupply+0x70>)
 80078fc:	685b      	ldr	r3, [r3, #4]
 80078fe:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007902:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007906:	d1ee      	bne.n	80078e6 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8007908:	2300      	movs	r3, #0
}
 800790a:	4618      	mov	r0, r3
 800790c:	3710      	adds	r7, #16
 800790e:	46bd      	mov	sp, r7
 8007910:	bd80      	pop	{r7, pc}
 8007912:	bf00      	nop
 8007914:	58024800 	.word	0x58024800

08007918 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007918:	b580      	push	{r7, lr}
 800791a:	b08c      	sub	sp, #48	; 0x30
 800791c:	af00      	add	r7, sp, #0
 800791e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	2b00      	cmp	r3, #0
 8007924:	d102      	bne.n	800792c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8007926:	2301      	movs	r3, #1
 8007928:	f000 bc1d 	b.w	8008166 <HAL_RCC_OscConfig+0x84e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	f003 0301 	and.w	r3, r3, #1
 8007934:	2b00      	cmp	r3, #0
 8007936:	f000 8087 	beq.w	8007a48 <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800793a:	4b99      	ldr	r3, [pc, #612]	; (8007ba0 <HAL_RCC_OscConfig+0x288>)
 800793c:	691b      	ldr	r3, [r3, #16]
 800793e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007942:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007944:	4b96      	ldr	r3, [pc, #600]	; (8007ba0 <HAL_RCC_OscConfig+0x288>)
 8007946:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007948:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800794a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800794c:	2b10      	cmp	r3, #16
 800794e:	d007      	beq.n	8007960 <HAL_RCC_OscConfig+0x48>
 8007950:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007952:	2b18      	cmp	r3, #24
 8007954:	d110      	bne.n	8007978 <HAL_RCC_OscConfig+0x60>
 8007956:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007958:	f003 0303 	and.w	r3, r3, #3
 800795c:	2b02      	cmp	r3, #2
 800795e:	d10b      	bne.n	8007978 <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007960:	4b8f      	ldr	r3, [pc, #572]	; (8007ba0 <HAL_RCC_OscConfig+0x288>)
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007968:	2b00      	cmp	r3, #0
 800796a:	d06c      	beq.n	8007a46 <HAL_RCC_OscConfig+0x12e>
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	685b      	ldr	r3, [r3, #4]
 8007970:	2b00      	cmp	r3, #0
 8007972:	d168      	bne.n	8007a46 <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 8007974:	2301      	movs	r3, #1
 8007976:	e3f6      	b.n	8008166 <HAL_RCC_OscConfig+0x84e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	685b      	ldr	r3, [r3, #4]
 800797c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007980:	d106      	bne.n	8007990 <HAL_RCC_OscConfig+0x78>
 8007982:	4b87      	ldr	r3, [pc, #540]	; (8007ba0 <HAL_RCC_OscConfig+0x288>)
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	4a86      	ldr	r2, [pc, #536]	; (8007ba0 <HAL_RCC_OscConfig+0x288>)
 8007988:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800798c:	6013      	str	r3, [r2, #0]
 800798e:	e02e      	b.n	80079ee <HAL_RCC_OscConfig+0xd6>
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	685b      	ldr	r3, [r3, #4]
 8007994:	2b00      	cmp	r3, #0
 8007996:	d10c      	bne.n	80079b2 <HAL_RCC_OscConfig+0x9a>
 8007998:	4b81      	ldr	r3, [pc, #516]	; (8007ba0 <HAL_RCC_OscConfig+0x288>)
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	4a80      	ldr	r2, [pc, #512]	; (8007ba0 <HAL_RCC_OscConfig+0x288>)
 800799e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80079a2:	6013      	str	r3, [r2, #0]
 80079a4:	4b7e      	ldr	r3, [pc, #504]	; (8007ba0 <HAL_RCC_OscConfig+0x288>)
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	4a7d      	ldr	r2, [pc, #500]	; (8007ba0 <HAL_RCC_OscConfig+0x288>)
 80079aa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80079ae:	6013      	str	r3, [r2, #0]
 80079b0:	e01d      	b.n	80079ee <HAL_RCC_OscConfig+0xd6>
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	685b      	ldr	r3, [r3, #4]
 80079b6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80079ba:	d10c      	bne.n	80079d6 <HAL_RCC_OscConfig+0xbe>
 80079bc:	4b78      	ldr	r3, [pc, #480]	; (8007ba0 <HAL_RCC_OscConfig+0x288>)
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	4a77      	ldr	r2, [pc, #476]	; (8007ba0 <HAL_RCC_OscConfig+0x288>)
 80079c2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80079c6:	6013      	str	r3, [r2, #0]
 80079c8:	4b75      	ldr	r3, [pc, #468]	; (8007ba0 <HAL_RCC_OscConfig+0x288>)
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	4a74      	ldr	r2, [pc, #464]	; (8007ba0 <HAL_RCC_OscConfig+0x288>)
 80079ce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80079d2:	6013      	str	r3, [r2, #0]
 80079d4:	e00b      	b.n	80079ee <HAL_RCC_OscConfig+0xd6>
 80079d6:	4b72      	ldr	r3, [pc, #456]	; (8007ba0 <HAL_RCC_OscConfig+0x288>)
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	4a71      	ldr	r2, [pc, #452]	; (8007ba0 <HAL_RCC_OscConfig+0x288>)
 80079dc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80079e0:	6013      	str	r3, [r2, #0]
 80079e2:	4b6f      	ldr	r3, [pc, #444]	; (8007ba0 <HAL_RCC_OscConfig+0x288>)
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	4a6e      	ldr	r2, [pc, #440]	; (8007ba0 <HAL_RCC_OscConfig+0x288>)
 80079e8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80079ec:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	685b      	ldr	r3, [r3, #4]
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	d013      	beq.n	8007a1e <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80079f6:	f7fe fe77 	bl	80066e8 <HAL_GetTick>
 80079fa:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80079fc:	e008      	b.n	8007a10 <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80079fe:	f7fe fe73 	bl	80066e8 <HAL_GetTick>
 8007a02:	4602      	mov	r2, r0
 8007a04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a06:	1ad3      	subs	r3, r2, r3
 8007a08:	2b64      	cmp	r3, #100	; 0x64
 8007a0a:	d901      	bls.n	8007a10 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8007a0c:	2303      	movs	r3, #3
 8007a0e:	e3aa      	b.n	8008166 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007a10:	4b63      	ldr	r3, [pc, #396]	; (8007ba0 <HAL_RCC_OscConfig+0x288>)
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007a18:	2b00      	cmp	r3, #0
 8007a1a:	d0f0      	beq.n	80079fe <HAL_RCC_OscConfig+0xe6>
 8007a1c:	e014      	b.n	8007a48 <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007a1e:	f7fe fe63 	bl	80066e8 <HAL_GetTick>
 8007a22:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8007a24:	e008      	b.n	8007a38 <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007a26:	f7fe fe5f 	bl	80066e8 <HAL_GetTick>
 8007a2a:	4602      	mov	r2, r0
 8007a2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a2e:	1ad3      	subs	r3, r2, r3
 8007a30:	2b64      	cmp	r3, #100	; 0x64
 8007a32:	d901      	bls.n	8007a38 <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 8007a34:	2303      	movs	r3, #3
 8007a36:	e396      	b.n	8008166 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8007a38:	4b59      	ldr	r3, [pc, #356]	; (8007ba0 <HAL_RCC_OscConfig+0x288>)
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007a40:	2b00      	cmp	r3, #0
 8007a42:	d1f0      	bne.n	8007a26 <HAL_RCC_OscConfig+0x10e>
 8007a44:	e000      	b.n	8007a48 <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007a46:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	f003 0302 	and.w	r3, r3, #2
 8007a50:	2b00      	cmp	r3, #0
 8007a52:	f000 80cb 	beq.w	8007bec <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007a56:	4b52      	ldr	r3, [pc, #328]	; (8007ba0 <HAL_RCC_OscConfig+0x288>)
 8007a58:	691b      	ldr	r3, [r3, #16]
 8007a5a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007a5e:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007a60:	4b4f      	ldr	r3, [pc, #316]	; (8007ba0 <HAL_RCC_OscConfig+0x288>)
 8007a62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a64:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8007a66:	6a3b      	ldr	r3, [r7, #32]
 8007a68:	2b00      	cmp	r3, #0
 8007a6a:	d007      	beq.n	8007a7c <HAL_RCC_OscConfig+0x164>
 8007a6c:	6a3b      	ldr	r3, [r7, #32]
 8007a6e:	2b18      	cmp	r3, #24
 8007a70:	d156      	bne.n	8007b20 <HAL_RCC_OscConfig+0x208>
 8007a72:	69fb      	ldr	r3, [r7, #28]
 8007a74:	f003 0303 	and.w	r3, r3, #3
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	d151      	bne.n	8007b20 <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007a7c:	4b48      	ldr	r3, [pc, #288]	; (8007ba0 <HAL_RCC_OscConfig+0x288>)
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	f003 0304 	and.w	r3, r3, #4
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	d005      	beq.n	8007a94 <HAL_RCC_OscConfig+0x17c>
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	68db      	ldr	r3, [r3, #12]
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	d101      	bne.n	8007a94 <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 8007a90:	2301      	movs	r3, #1
 8007a92:	e368      	b.n	8008166 <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8007a94:	4b42      	ldr	r3, [pc, #264]	; (8007ba0 <HAL_RCC_OscConfig+0x288>)
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	f023 0219 	bic.w	r2, r3, #25
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	68db      	ldr	r3, [r3, #12]
 8007aa0:	493f      	ldr	r1, [pc, #252]	; (8007ba0 <HAL_RCC_OscConfig+0x288>)
 8007aa2:	4313      	orrs	r3, r2
 8007aa4:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8007aa6:	f7fe fe1f 	bl	80066e8 <HAL_GetTick>
 8007aaa:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007aac:	e008      	b.n	8007ac0 <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007aae:	f7fe fe1b 	bl	80066e8 <HAL_GetTick>
 8007ab2:	4602      	mov	r2, r0
 8007ab4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ab6:	1ad3      	subs	r3, r2, r3
 8007ab8:	2b02      	cmp	r3, #2
 8007aba:	d901      	bls.n	8007ac0 <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 8007abc:	2303      	movs	r3, #3
 8007abe:	e352      	b.n	8008166 <HAL_RCC_OscConfig+0x84e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007ac0:	4b37      	ldr	r3, [pc, #220]	; (8007ba0 <HAL_RCC_OscConfig+0x288>)
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	f003 0304 	and.w	r3, r3, #4
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	d0f0      	beq.n	8007aae <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007acc:	f7fe fe3c 	bl	8006748 <HAL_GetREVID>
 8007ad0:	4603      	mov	r3, r0
 8007ad2:	f241 0203 	movw	r2, #4099	; 0x1003
 8007ad6:	4293      	cmp	r3, r2
 8007ad8:	d817      	bhi.n	8007b0a <HAL_RCC_OscConfig+0x1f2>
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	691b      	ldr	r3, [r3, #16]
 8007ade:	2b40      	cmp	r3, #64	; 0x40
 8007ae0:	d108      	bne.n	8007af4 <HAL_RCC_OscConfig+0x1dc>
 8007ae2:	4b2f      	ldr	r3, [pc, #188]	; (8007ba0 <HAL_RCC_OscConfig+0x288>)
 8007ae4:	685b      	ldr	r3, [r3, #4]
 8007ae6:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8007aea:	4a2d      	ldr	r2, [pc, #180]	; (8007ba0 <HAL_RCC_OscConfig+0x288>)
 8007aec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007af0:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007af2:	e07b      	b.n	8007bec <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007af4:	4b2a      	ldr	r3, [pc, #168]	; (8007ba0 <HAL_RCC_OscConfig+0x288>)
 8007af6:	685b      	ldr	r3, [r3, #4]
 8007af8:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	691b      	ldr	r3, [r3, #16]
 8007b00:	031b      	lsls	r3, r3, #12
 8007b02:	4927      	ldr	r1, [pc, #156]	; (8007ba0 <HAL_RCC_OscConfig+0x288>)
 8007b04:	4313      	orrs	r3, r2
 8007b06:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007b08:	e070      	b.n	8007bec <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007b0a:	4b25      	ldr	r3, [pc, #148]	; (8007ba0 <HAL_RCC_OscConfig+0x288>)
 8007b0c:	685b      	ldr	r3, [r3, #4]
 8007b0e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	691b      	ldr	r3, [r3, #16]
 8007b16:	061b      	lsls	r3, r3, #24
 8007b18:	4921      	ldr	r1, [pc, #132]	; (8007ba0 <HAL_RCC_OscConfig+0x288>)
 8007b1a:	4313      	orrs	r3, r2
 8007b1c:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007b1e:	e065      	b.n	8007bec <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	68db      	ldr	r3, [r3, #12]
 8007b24:	2b00      	cmp	r3, #0
 8007b26:	d048      	beq.n	8007bba <HAL_RCC_OscConfig+0x2a2>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8007b28:	4b1d      	ldr	r3, [pc, #116]	; (8007ba0 <HAL_RCC_OscConfig+0x288>)
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	f023 0219 	bic.w	r2, r3, #25
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	68db      	ldr	r3, [r3, #12]
 8007b34:	491a      	ldr	r1, [pc, #104]	; (8007ba0 <HAL_RCC_OscConfig+0x288>)
 8007b36:	4313      	orrs	r3, r2
 8007b38:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007b3a:	f7fe fdd5 	bl	80066e8 <HAL_GetTick>
 8007b3e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007b40:	e008      	b.n	8007b54 <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007b42:	f7fe fdd1 	bl	80066e8 <HAL_GetTick>
 8007b46:	4602      	mov	r2, r0
 8007b48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b4a:	1ad3      	subs	r3, r2, r3
 8007b4c:	2b02      	cmp	r3, #2
 8007b4e:	d901      	bls.n	8007b54 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 8007b50:	2303      	movs	r3, #3
 8007b52:	e308      	b.n	8008166 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007b54:	4b12      	ldr	r3, [pc, #72]	; (8007ba0 <HAL_RCC_OscConfig+0x288>)
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	f003 0304 	and.w	r3, r3, #4
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	d0f0      	beq.n	8007b42 <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007b60:	f7fe fdf2 	bl	8006748 <HAL_GetREVID>
 8007b64:	4603      	mov	r3, r0
 8007b66:	f241 0203 	movw	r2, #4099	; 0x1003
 8007b6a:	4293      	cmp	r3, r2
 8007b6c:	d81a      	bhi.n	8007ba4 <HAL_RCC_OscConfig+0x28c>
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	691b      	ldr	r3, [r3, #16]
 8007b72:	2b40      	cmp	r3, #64	; 0x40
 8007b74:	d108      	bne.n	8007b88 <HAL_RCC_OscConfig+0x270>
 8007b76:	4b0a      	ldr	r3, [pc, #40]	; (8007ba0 <HAL_RCC_OscConfig+0x288>)
 8007b78:	685b      	ldr	r3, [r3, #4]
 8007b7a:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8007b7e:	4a08      	ldr	r2, [pc, #32]	; (8007ba0 <HAL_RCC_OscConfig+0x288>)
 8007b80:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007b84:	6053      	str	r3, [r2, #4]
 8007b86:	e031      	b.n	8007bec <HAL_RCC_OscConfig+0x2d4>
 8007b88:	4b05      	ldr	r3, [pc, #20]	; (8007ba0 <HAL_RCC_OscConfig+0x288>)
 8007b8a:	685b      	ldr	r3, [r3, #4]
 8007b8c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	691b      	ldr	r3, [r3, #16]
 8007b94:	031b      	lsls	r3, r3, #12
 8007b96:	4902      	ldr	r1, [pc, #8]	; (8007ba0 <HAL_RCC_OscConfig+0x288>)
 8007b98:	4313      	orrs	r3, r2
 8007b9a:	604b      	str	r3, [r1, #4]
 8007b9c:	e026      	b.n	8007bec <HAL_RCC_OscConfig+0x2d4>
 8007b9e:	bf00      	nop
 8007ba0:	58024400 	.word	0x58024400
 8007ba4:	4b9a      	ldr	r3, [pc, #616]	; (8007e10 <HAL_RCC_OscConfig+0x4f8>)
 8007ba6:	685b      	ldr	r3, [r3, #4]
 8007ba8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	691b      	ldr	r3, [r3, #16]
 8007bb0:	061b      	lsls	r3, r3, #24
 8007bb2:	4997      	ldr	r1, [pc, #604]	; (8007e10 <HAL_RCC_OscConfig+0x4f8>)
 8007bb4:	4313      	orrs	r3, r2
 8007bb6:	604b      	str	r3, [r1, #4]
 8007bb8:	e018      	b.n	8007bec <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007bba:	4b95      	ldr	r3, [pc, #596]	; (8007e10 <HAL_RCC_OscConfig+0x4f8>)
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	4a94      	ldr	r2, [pc, #592]	; (8007e10 <HAL_RCC_OscConfig+0x4f8>)
 8007bc0:	f023 0301 	bic.w	r3, r3, #1
 8007bc4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007bc6:	f7fe fd8f 	bl	80066e8 <HAL_GetTick>
 8007bca:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8007bcc:	e008      	b.n	8007be0 <HAL_RCC_OscConfig+0x2c8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007bce:	f7fe fd8b 	bl	80066e8 <HAL_GetTick>
 8007bd2:	4602      	mov	r2, r0
 8007bd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bd6:	1ad3      	subs	r3, r2, r3
 8007bd8:	2b02      	cmp	r3, #2
 8007bda:	d901      	bls.n	8007be0 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8007bdc:	2303      	movs	r3, #3
 8007bde:	e2c2      	b.n	8008166 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8007be0:	4b8b      	ldr	r3, [pc, #556]	; (8007e10 <HAL_RCC_OscConfig+0x4f8>)
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	f003 0304 	and.w	r3, r3, #4
 8007be8:	2b00      	cmp	r3, #0
 8007bea:	d1f0      	bne.n	8007bce <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	f003 0310 	and.w	r3, r3, #16
 8007bf4:	2b00      	cmp	r3, #0
 8007bf6:	f000 80a9 	beq.w	8007d4c <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007bfa:	4b85      	ldr	r3, [pc, #532]	; (8007e10 <HAL_RCC_OscConfig+0x4f8>)
 8007bfc:	691b      	ldr	r3, [r3, #16]
 8007bfe:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007c02:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007c04:	4b82      	ldr	r3, [pc, #520]	; (8007e10 <HAL_RCC_OscConfig+0x4f8>)
 8007c06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c08:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8007c0a:	69bb      	ldr	r3, [r7, #24]
 8007c0c:	2b08      	cmp	r3, #8
 8007c0e:	d007      	beq.n	8007c20 <HAL_RCC_OscConfig+0x308>
 8007c10:	69bb      	ldr	r3, [r7, #24]
 8007c12:	2b18      	cmp	r3, #24
 8007c14:	d13a      	bne.n	8007c8c <HAL_RCC_OscConfig+0x374>
 8007c16:	697b      	ldr	r3, [r7, #20]
 8007c18:	f003 0303 	and.w	r3, r3, #3
 8007c1c:	2b01      	cmp	r3, #1
 8007c1e:	d135      	bne.n	8007c8c <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007c20:	4b7b      	ldr	r3, [pc, #492]	; (8007e10 <HAL_RCC_OscConfig+0x4f8>)
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007c28:	2b00      	cmp	r3, #0
 8007c2a:	d005      	beq.n	8007c38 <HAL_RCC_OscConfig+0x320>
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	69db      	ldr	r3, [r3, #28]
 8007c30:	2b80      	cmp	r3, #128	; 0x80
 8007c32:	d001      	beq.n	8007c38 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8007c34:	2301      	movs	r3, #1
 8007c36:	e296      	b.n	8008166 <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007c38:	f7fe fd86 	bl	8006748 <HAL_GetREVID>
 8007c3c:	4603      	mov	r3, r0
 8007c3e:	f241 0203 	movw	r2, #4099	; 0x1003
 8007c42:	4293      	cmp	r3, r2
 8007c44:	d817      	bhi.n	8007c76 <HAL_RCC_OscConfig+0x35e>
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	6a1b      	ldr	r3, [r3, #32]
 8007c4a:	2b20      	cmp	r3, #32
 8007c4c:	d108      	bne.n	8007c60 <HAL_RCC_OscConfig+0x348>
 8007c4e:	4b70      	ldr	r3, [pc, #448]	; (8007e10 <HAL_RCC_OscConfig+0x4f8>)
 8007c50:	685b      	ldr	r3, [r3, #4]
 8007c52:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8007c56:	4a6e      	ldr	r2, [pc, #440]	; (8007e10 <HAL_RCC_OscConfig+0x4f8>)
 8007c58:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007c5c:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007c5e:	e075      	b.n	8007d4c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007c60:	4b6b      	ldr	r3, [pc, #428]	; (8007e10 <HAL_RCC_OscConfig+0x4f8>)
 8007c62:	685b      	ldr	r3, [r3, #4]
 8007c64:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	6a1b      	ldr	r3, [r3, #32]
 8007c6c:	069b      	lsls	r3, r3, #26
 8007c6e:	4968      	ldr	r1, [pc, #416]	; (8007e10 <HAL_RCC_OscConfig+0x4f8>)
 8007c70:	4313      	orrs	r3, r2
 8007c72:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007c74:	e06a      	b.n	8007d4c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007c76:	4b66      	ldr	r3, [pc, #408]	; (8007e10 <HAL_RCC_OscConfig+0x4f8>)
 8007c78:	68db      	ldr	r3, [r3, #12]
 8007c7a:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	6a1b      	ldr	r3, [r3, #32]
 8007c82:	061b      	lsls	r3, r3, #24
 8007c84:	4962      	ldr	r1, [pc, #392]	; (8007e10 <HAL_RCC_OscConfig+0x4f8>)
 8007c86:	4313      	orrs	r3, r2
 8007c88:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007c8a:	e05f      	b.n	8007d4c <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	69db      	ldr	r3, [r3, #28]
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	d042      	beq.n	8007d1a <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8007c94:	4b5e      	ldr	r3, [pc, #376]	; (8007e10 <HAL_RCC_OscConfig+0x4f8>)
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	4a5d      	ldr	r2, [pc, #372]	; (8007e10 <HAL_RCC_OscConfig+0x4f8>)
 8007c9a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007c9e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007ca0:	f7fe fd22 	bl	80066e8 <HAL_GetTick>
 8007ca4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007ca6:	e008      	b.n	8007cba <HAL_RCC_OscConfig+0x3a2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8007ca8:	f7fe fd1e 	bl	80066e8 <HAL_GetTick>
 8007cac:	4602      	mov	r2, r0
 8007cae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cb0:	1ad3      	subs	r3, r2, r3
 8007cb2:	2b02      	cmp	r3, #2
 8007cb4:	d901      	bls.n	8007cba <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8007cb6:	2303      	movs	r3, #3
 8007cb8:	e255      	b.n	8008166 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007cba:	4b55      	ldr	r3, [pc, #340]	; (8007e10 <HAL_RCC_OscConfig+0x4f8>)
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	d0f0      	beq.n	8007ca8 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007cc6:	f7fe fd3f 	bl	8006748 <HAL_GetREVID>
 8007cca:	4603      	mov	r3, r0
 8007ccc:	f241 0203 	movw	r2, #4099	; 0x1003
 8007cd0:	4293      	cmp	r3, r2
 8007cd2:	d817      	bhi.n	8007d04 <HAL_RCC_OscConfig+0x3ec>
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	6a1b      	ldr	r3, [r3, #32]
 8007cd8:	2b20      	cmp	r3, #32
 8007cda:	d108      	bne.n	8007cee <HAL_RCC_OscConfig+0x3d6>
 8007cdc:	4b4c      	ldr	r3, [pc, #304]	; (8007e10 <HAL_RCC_OscConfig+0x4f8>)
 8007cde:	685b      	ldr	r3, [r3, #4]
 8007ce0:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8007ce4:	4a4a      	ldr	r2, [pc, #296]	; (8007e10 <HAL_RCC_OscConfig+0x4f8>)
 8007ce6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007cea:	6053      	str	r3, [r2, #4]
 8007cec:	e02e      	b.n	8007d4c <HAL_RCC_OscConfig+0x434>
 8007cee:	4b48      	ldr	r3, [pc, #288]	; (8007e10 <HAL_RCC_OscConfig+0x4f8>)
 8007cf0:	685b      	ldr	r3, [r3, #4]
 8007cf2:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	6a1b      	ldr	r3, [r3, #32]
 8007cfa:	069b      	lsls	r3, r3, #26
 8007cfc:	4944      	ldr	r1, [pc, #272]	; (8007e10 <HAL_RCC_OscConfig+0x4f8>)
 8007cfe:	4313      	orrs	r3, r2
 8007d00:	604b      	str	r3, [r1, #4]
 8007d02:	e023      	b.n	8007d4c <HAL_RCC_OscConfig+0x434>
 8007d04:	4b42      	ldr	r3, [pc, #264]	; (8007e10 <HAL_RCC_OscConfig+0x4f8>)
 8007d06:	68db      	ldr	r3, [r3, #12]
 8007d08:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	6a1b      	ldr	r3, [r3, #32]
 8007d10:	061b      	lsls	r3, r3, #24
 8007d12:	493f      	ldr	r1, [pc, #252]	; (8007e10 <HAL_RCC_OscConfig+0x4f8>)
 8007d14:	4313      	orrs	r3, r2
 8007d16:	60cb      	str	r3, [r1, #12]
 8007d18:	e018      	b.n	8007d4c <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8007d1a:	4b3d      	ldr	r3, [pc, #244]	; (8007e10 <HAL_RCC_OscConfig+0x4f8>)
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	4a3c      	ldr	r2, [pc, #240]	; (8007e10 <HAL_RCC_OscConfig+0x4f8>)
 8007d20:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007d24:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007d26:	f7fe fcdf 	bl	80066e8 <HAL_GetTick>
 8007d2a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8007d2c:	e008      	b.n	8007d40 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8007d2e:	f7fe fcdb 	bl	80066e8 <HAL_GetTick>
 8007d32:	4602      	mov	r2, r0
 8007d34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d36:	1ad3      	subs	r3, r2, r3
 8007d38:	2b02      	cmp	r3, #2
 8007d3a:	d901      	bls.n	8007d40 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8007d3c:	2303      	movs	r3, #3
 8007d3e:	e212      	b.n	8008166 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8007d40:	4b33      	ldr	r3, [pc, #204]	; (8007e10 <HAL_RCC_OscConfig+0x4f8>)
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	d1f0      	bne.n	8007d2e <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	f003 0308 	and.w	r3, r3, #8
 8007d54:	2b00      	cmp	r3, #0
 8007d56:	d036      	beq.n	8007dc6 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	695b      	ldr	r3, [r3, #20]
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	d019      	beq.n	8007d94 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007d60:	4b2b      	ldr	r3, [pc, #172]	; (8007e10 <HAL_RCC_OscConfig+0x4f8>)
 8007d62:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007d64:	4a2a      	ldr	r2, [pc, #168]	; (8007e10 <HAL_RCC_OscConfig+0x4f8>)
 8007d66:	f043 0301 	orr.w	r3, r3, #1
 8007d6a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007d6c:	f7fe fcbc 	bl	80066e8 <HAL_GetTick>
 8007d70:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8007d72:	e008      	b.n	8007d86 <HAL_RCC_OscConfig+0x46e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007d74:	f7fe fcb8 	bl	80066e8 <HAL_GetTick>
 8007d78:	4602      	mov	r2, r0
 8007d7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d7c:	1ad3      	subs	r3, r2, r3
 8007d7e:	2b02      	cmp	r3, #2
 8007d80:	d901      	bls.n	8007d86 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8007d82:	2303      	movs	r3, #3
 8007d84:	e1ef      	b.n	8008166 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8007d86:	4b22      	ldr	r3, [pc, #136]	; (8007e10 <HAL_RCC_OscConfig+0x4f8>)
 8007d88:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007d8a:	f003 0302 	and.w	r3, r3, #2
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	d0f0      	beq.n	8007d74 <HAL_RCC_OscConfig+0x45c>
 8007d92:	e018      	b.n	8007dc6 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007d94:	4b1e      	ldr	r3, [pc, #120]	; (8007e10 <HAL_RCC_OscConfig+0x4f8>)
 8007d96:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007d98:	4a1d      	ldr	r2, [pc, #116]	; (8007e10 <HAL_RCC_OscConfig+0x4f8>)
 8007d9a:	f023 0301 	bic.w	r3, r3, #1
 8007d9e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007da0:	f7fe fca2 	bl	80066e8 <HAL_GetTick>
 8007da4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8007da6:	e008      	b.n	8007dba <HAL_RCC_OscConfig+0x4a2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007da8:	f7fe fc9e 	bl	80066e8 <HAL_GetTick>
 8007dac:	4602      	mov	r2, r0
 8007dae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007db0:	1ad3      	subs	r3, r2, r3
 8007db2:	2b02      	cmp	r3, #2
 8007db4:	d901      	bls.n	8007dba <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8007db6:	2303      	movs	r3, #3
 8007db8:	e1d5      	b.n	8008166 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8007dba:	4b15      	ldr	r3, [pc, #84]	; (8007e10 <HAL_RCC_OscConfig+0x4f8>)
 8007dbc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007dbe:	f003 0302 	and.w	r3, r3, #2
 8007dc2:	2b00      	cmp	r3, #0
 8007dc4:	d1f0      	bne.n	8007da8 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	f003 0320 	and.w	r3, r3, #32
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	d039      	beq.n	8007e46 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	699b      	ldr	r3, [r3, #24]
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	d01c      	beq.n	8007e14 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8007dda:	4b0d      	ldr	r3, [pc, #52]	; (8007e10 <HAL_RCC_OscConfig+0x4f8>)
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	4a0c      	ldr	r2, [pc, #48]	; (8007e10 <HAL_RCC_OscConfig+0x4f8>)
 8007de0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8007de4:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8007de6:	f7fe fc7f 	bl	80066e8 <HAL_GetTick>
 8007dea:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8007dec:	e008      	b.n	8007e00 <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8007dee:	f7fe fc7b 	bl	80066e8 <HAL_GetTick>
 8007df2:	4602      	mov	r2, r0
 8007df4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007df6:	1ad3      	subs	r3, r2, r3
 8007df8:	2b02      	cmp	r3, #2
 8007dfa:	d901      	bls.n	8007e00 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8007dfc:	2303      	movs	r3, #3
 8007dfe:	e1b2      	b.n	8008166 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8007e00:	4b03      	ldr	r3, [pc, #12]	; (8007e10 <HAL_RCC_OscConfig+0x4f8>)
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007e08:	2b00      	cmp	r3, #0
 8007e0a:	d0f0      	beq.n	8007dee <HAL_RCC_OscConfig+0x4d6>
 8007e0c:	e01b      	b.n	8007e46 <HAL_RCC_OscConfig+0x52e>
 8007e0e:	bf00      	nop
 8007e10:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8007e14:	4b9b      	ldr	r3, [pc, #620]	; (8008084 <HAL_RCC_OscConfig+0x76c>)
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	4a9a      	ldr	r2, [pc, #616]	; (8008084 <HAL_RCC_OscConfig+0x76c>)
 8007e1a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007e1e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8007e20:	f7fe fc62 	bl	80066e8 <HAL_GetTick>
 8007e24:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8007e26:	e008      	b.n	8007e3a <HAL_RCC_OscConfig+0x522>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8007e28:	f7fe fc5e 	bl	80066e8 <HAL_GetTick>
 8007e2c:	4602      	mov	r2, r0
 8007e2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e30:	1ad3      	subs	r3, r2, r3
 8007e32:	2b02      	cmp	r3, #2
 8007e34:	d901      	bls.n	8007e3a <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8007e36:	2303      	movs	r3, #3
 8007e38:	e195      	b.n	8008166 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8007e3a:	4b92      	ldr	r3, [pc, #584]	; (8008084 <HAL_RCC_OscConfig+0x76c>)
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007e42:	2b00      	cmp	r3, #0
 8007e44:	d1f0      	bne.n	8007e28 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	f003 0304 	and.w	r3, r3, #4
 8007e4e:	2b00      	cmp	r3, #0
 8007e50:	f000 8081 	beq.w	8007f56 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8007e54:	4b8c      	ldr	r3, [pc, #560]	; (8008088 <HAL_RCC_OscConfig+0x770>)
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	4a8b      	ldr	r2, [pc, #556]	; (8008088 <HAL_RCC_OscConfig+0x770>)
 8007e5a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007e5e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007e60:	f7fe fc42 	bl	80066e8 <HAL_GetTick>
 8007e64:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007e66:	e008      	b.n	8007e7a <HAL_RCC_OscConfig+0x562>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8007e68:	f7fe fc3e 	bl	80066e8 <HAL_GetTick>
 8007e6c:	4602      	mov	r2, r0
 8007e6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e70:	1ad3      	subs	r3, r2, r3
 8007e72:	2b64      	cmp	r3, #100	; 0x64
 8007e74:	d901      	bls.n	8007e7a <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8007e76:	2303      	movs	r3, #3
 8007e78:	e175      	b.n	8008166 <HAL_RCC_OscConfig+0x84e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007e7a:	4b83      	ldr	r3, [pc, #524]	; (8008088 <HAL_RCC_OscConfig+0x770>)
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	d0f0      	beq.n	8007e68 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	689b      	ldr	r3, [r3, #8]
 8007e8a:	2b01      	cmp	r3, #1
 8007e8c:	d106      	bne.n	8007e9c <HAL_RCC_OscConfig+0x584>
 8007e8e:	4b7d      	ldr	r3, [pc, #500]	; (8008084 <HAL_RCC_OscConfig+0x76c>)
 8007e90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007e92:	4a7c      	ldr	r2, [pc, #496]	; (8008084 <HAL_RCC_OscConfig+0x76c>)
 8007e94:	f043 0301 	orr.w	r3, r3, #1
 8007e98:	6713      	str	r3, [r2, #112]	; 0x70
 8007e9a:	e02d      	b.n	8007ef8 <HAL_RCC_OscConfig+0x5e0>
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	689b      	ldr	r3, [r3, #8]
 8007ea0:	2b00      	cmp	r3, #0
 8007ea2:	d10c      	bne.n	8007ebe <HAL_RCC_OscConfig+0x5a6>
 8007ea4:	4b77      	ldr	r3, [pc, #476]	; (8008084 <HAL_RCC_OscConfig+0x76c>)
 8007ea6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007ea8:	4a76      	ldr	r2, [pc, #472]	; (8008084 <HAL_RCC_OscConfig+0x76c>)
 8007eaa:	f023 0301 	bic.w	r3, r3, #1
 8007eae:	6713      	str	r3, [r2, #112]	; 0x70
 8007eb0:	4b74      	ldr	r3, [pc, #464]	; (8008084 <HAL_RCC_OscConfig+0x76c>)
 8007eb2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007eb4:	4a73      	ldr	r2, [pc, #460]	; (8008084 <HAL_RCC_OscConfig+0x76c>)
 8007eb6:	f023 0304 	bic.w	r3, r3, #4
 8007eba:	6713      	str	r3, [r2, #112]	; 0x70
 8007ebc:	e01c      	b.n	8007ef8 <HAL_RCC_OscConfig+0x5e0>
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	689b      	ldr	r3, [r3, #8]
 8007ec2:	2b05      	cmp	r3, #5
 8007ec4:	d10c      	bne.n	8007ee0 <HAL_RCC_OscConfig+0x5c8>
 8007ec6:	4b6f      	ldr	r3, [pc, #444]	; (8008084 <HAL_RCC_OscConfig+0x76c>)
 8007ec8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007eca:	4a6e      	ldr	r2, [pc, #440]	; (8008084 <HAL_RCC_OscConfig+0x76c>)
 8007ecc:	f043 0304 	orr.w	r3, r3, #4
 8007ed0:	6713      	str	r3, [r2, #112]	; 0x70
 8007ed2:	4b6c      	ldr	r3, [pc, #432]	; (8008084 <HAL_RCC_OscConfig+0x76c>)
 8007ed4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007ed6:	4a6b      	ldr	r2, [pc, #428]	; (8008084 <HAL_RCC_OscConfig+0x76c>)
 8007ed8:	f043 0301 	orr.w	r3, r3, #1
 8007edc:	6713      	str	r3, [r2, #112]	; 0x70
 8007ede:	e00b      	b.n	8007ef8 <HAL_RCC_OscConfig+0x5e0>
 8007ee0:	4b68      	ldr	r3, [pc, #416]	; (8008084 <HAL_RCC_OscConfig+0x76c>)
 8007ee2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007ee4:	4a67      	ldr	r2, [pc, #412]	; (8008084 <HAL_RCC_OscConfig+0x76c>)
 8007ee6:	f023 0301 	bic.w	r3, r3, #1
 8007eea:	6713      	str	r3, [r2, #112]	; 0x70
 8007eec:	4b65      	ldr	r3, [pc, #404]	; (8008084 <HAL_RCC_OscConfig+0x76c>)
 8007eee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007ef0:	4a64      	ldr	r2, [pc, #400]	; (8008084 <HAL_RCC_OscConfig+0x76c>)
 8007ef2:	f023 0304 	bic.w	r3, r3, #4
 8007ef6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	689b      	ldr	r3, [r3, #8]
 8007efc:	2b00      	cmp	r3, #0
 8007efe:	d015      	beq.n	8007f2c <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007f00:	f7fe fbf2 	bl	80066e8 <HAL_GetTick>
 8007f04:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007f06:	e00a      	b.n	8007f1e <HAL_RCC_OscConfig+0x606>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007f08:	f7fe fbee 	bl	80066e8 <HAL_GetTick>
 8007f0c:	4602      	mov	r2, r0
 8007f0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f10:	1ad3      	subs	r3, r2, r3
 8007f12:	f241 3288 	movw	r2, #5000	; 0x1388
 8007f16:	4293      	cmp	r3, r2
 8007f18:	d901      	bls.n	8007f1e <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8007f1a:	2303      	movs	r3, #3
 8007f1c:	e123      	b.n	8008166 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007f1e:	4b59      	ldr	r3, [pc, #356]	; (8008084 <HAL_RCC_OscConfig+0x76c>)
 8007f20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007f22:	f003 0302 	and.w	r3, r3, #2
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	d0ee      	beq.n	8007f08 <HAL_RCC_OscConfig+0x5f0>
 8007f2a:	e014      	b.n	8007f56 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007f2c:	f7fe fbdc 	bl	80066e8 <HAL_GetTick>
 8007f30:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8007f32:	e00a      	b.n	8007f4a <HAL_RCC_OscConfig+0x632>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007f34:	f7fe fbd8 	bl	80066e8 <HAL_GetTick>
 8007f38:	4602      	mov	r2, r0
 8007f3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f3c:	1ad3      	subs	r3, r2, r3
 8007f3e:	f241 3288 	movw	r2, #5000	; 0x1388
 8007f42:	4293      	cmp	r3, r2
 8007f44:	d901      	bls.n	8007f4a <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8007f46:	2303      	movs	r3, #3
 8007f48:	e10d      	b.n	8008166 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8007f4a:	4b4e      	ldr	r3, [pc, #312]	; (8008084 <HAL_RCC_OscConfig+0x76c>)
 8007f4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007f4e:	f003 0302 	and.w	r3, r3, #2
 8007f52:	2b00      	cmp	r3, #0
 8007f54:	d1ee      	bne.n	8007f34 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	f000 8102 	beq.w	8008164 <HAL_RCC_OscConfig+0x84c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8007f60:	4b48      	ldr	r3, [pc, #288]	; (8008084 <HAL_RCC_OscConfig+0x76c>)
 8007f62:	691b      	ldr	r3, [r3, #16]
 8007f64:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007f68:	2b18      	cmp	r3, #24
 8007f6a:	f000 80bd 	beq.w	80080e8 <HAL_RCC_OscConfig+0x7d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f72:	2b02      	cmp	r3, #2
 8007f74:	f040 809e 	bne.w	80080b4 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007f78:	4b42      	ldr	r3, [pc, #264]	; (8008084 <HAL_RCC_OscConfig+0x76c>)
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	4a41      	ldr	r2, [pc, #260]	; (8008084 <HAL_RCC_OscConfig+0x76c>)
 8007f7e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007f82:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007f84:	f7fe fbb0 	bl	80066e8 <HAL_GetTick>
 8007f88:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007f8a:	e008      	b.n	8007f9e <HAL_RCC_OscConfig+0x686>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007f8c:	f7fe fbac 	bl	80066e8 <HAL_GetTick>
 8007f90:	4602      	mov	r2, r0
 8007f92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f94:	1ad3      	subs	r3, r2, r3
 8007f96:	2b02      	cmp	r3, #2
 8007f98:	d901      	bls.n	8007f9e <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8007f9a:	2303      	movs	r3, #3
 8007f9c:	e0e3      	b.n	8008166 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007f9e:	4b39      	ldr	r3, [pc, #228]	; (8008084 <HAL_RCC_OscConfig+0x76c>)
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007fa6:	2b00      	cmp	r3, #0
 8007fa8:	d1f0      	bne.n	8007f8c <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007faa:	4b36      	ldr	r3, [pc, #216]	; (8008084 <HAL_RCC_OscConfig+0x76c>)
 8007fac:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007fae:	4b37      	ldr	r3, [pc, #220]	; (800808c <HAL_RCC_OscConfig+0x774>)
 8007fb0:	4013      	ands	r3, r2
 8007fb2:	687a      	ldr	r2, [r7, #4]
 8007fb4:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8007fb6:	687a      	ldr	r2, [r7, #4]
 8007fb8:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8007fba:	0112      	lsls	r2, r2, #4
 8007fbc:	430a      	orrs	r2, r1
 8007fbe:	4931      	ldr	r1, [pc, #196]	; (8008084 <HAL_RCC_OscConfig+0x76c>)
 8007fc0:	4313      	orrs	r3, r2
 8007fc2:	628b      	str	r3, [r1, #40]	; 0x28
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007fc8:	3b01      	subs	r3, #1
 8007fca:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007fd2:	3b01      	subs	r3, #1
 8007fd4:	025b      	lsls	r3, r3, #9
 8007fd6:	b29b      	uxth	r3, r3
 8007fd8:	431a      	orrs	r2, r3
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007fde:	3b01      	subs	r3, #1
 8007fe0:	041b      	lsls	r3, r3, #16
 8007fe2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8007fe6:	431a      	orrs	r2, r3
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007fec:	3b01      	subs	r3, #1
 8007fee:	061b      	lsls	r3, r3, #24
 8007ff0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8007ff4:	4923      	ldr	r1, [pc, #140]	; (8008084 <HAL_RCC_OscConfig+0x76c>)
 8007ff6:	4313      	orrs	r3, r2
 8007ff8:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8007ffa:	4b22      	ldr	r3, [pc, #136]	; (8008084 <HAL_RCC_OscConfig+0x76c>)
 8007ffc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ffe:	4a21      	ldr	r2, [pc, #132]	; (8008084 <HAL_RCC_OscConfig+0x76c>)
 8008000:	f023 0301 	bic.w	r3, r3, #1
 8008004:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8008006:	4b1f      	ldr	r3, [pc, #124]	; (8008084 <HAL_RCC_OscConfig+0x76c>)
 8008008:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800800a:	4b21      	ldr	r3, [pc, #132]	; (8008090 <HAL_RCC_OscConfig+0x778>)
 800800c:	4013      	ands	r3, r2
 800800e:	687a      	ldr	r2, [r7, #4]
 8008010:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8008012:	00d2      	lsls	r2, r2, #3
 8008014:	491b      	ldr	r1, [pc, #108]	; (8008084 <HAL_RCC_OscConfig+0x76c>)
 8008016:	4313      	orrs	r3, r2
 8008018:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800801a:	4b1a      	ldr	r3, [pc, #104]	; (8008084 <HAL_RCC_OscConfig+0x76c>)
 800801c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800801e:	f023 020c 	bic.w	r2, r3, #12
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008026:	4917      	ldr	r1, [pc, #92]	; (8008084 <HAL_RCC_OscConfig+0x76c>)
 8008028:	4313      	orrs	r3, r2
 800802a:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800802c:	4b15      	ldr	r3, [pc, #84]	; (8008084 <HAL_RCC_OscConfig+0x76c>)
 800802e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008030:	f023 0202 	bic.w	r2, r3, #2
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008038:	4912      	ldr	r1, [pc, #72]	; (8008084 <HAL_RCC_OscConfig+0x76c>)
 800803a:	4313      	orrs	r3, r2
 800803c:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800803e:	4b11      	ldr	r3, [pc, #68]	; (8008084 <HAL_RCC_OscConfig+0x76c>)
 8008040:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008042:	4a10      	ldr	r2, [pc, #64]	; (8008084 <HAL_RCC_OscConfig+0x76c>)
 8008044:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008048:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800804a:	4b0e      	ldr	r3, [pc, #56]	; (8008084 <HAL_RCC_OscConfig+0x76c>)
 800804c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800804e:	4a0d      	ldr	r2, [pc, #52]	; (8008084 <HAL_RCC_OscConfig+0x76c>)
 8008050:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008054:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8008056:	4b0b      	ldr	r3, [pc, #44]	; (8008084 <HAL_RCC_OscConfig+0x76c>)
 8008058:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800805a:	4a0a      	ldr	r2, [pc, #40]	; (8008084 <HAL_RCC_OscConfig+0x76c>)
 800805c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008060:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8008062:	4b08      	ldr	r3, [pc, #32]	; (8008084 <HAL_RCC_OscConfig+0x76c>)
 8008064:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008066:	4a07      	ldr	r2, [pc, #28]	; (8008084 <HAL_RCC_OscConfig+0x76c>)
 8008068:	f043 0301 	orr.w	r3, r3, #1
 800806c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800806e:	4b05      	ldr	r3, [pc, #20]	; (8008084 <HAL_RCC_OscConfig+0x76c>)
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	4a04      	ldr	r2, [pc, #16]	; (8008084 <HAL_RCC_OscConfig+0x76c>)
 8008074:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008078:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800807a:	f7fe fb35 	bl	80066e8 <HAL_GetTick>
 800807e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008080:	e011      	b.n	80080a6 <HAL_RCC_OscConfig+0x78e>
 8008082:	bf00      	nop
 8008084:	58024400 	.word	0x58024400
 8008088:	58024800 	.word	0x58024800
 800808c:	fffffc0c 	.word	0xfffffc0c
 8008090:	ffff0007 	.word	0xffff0007
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008094:	f7fe fb28 	bl	80066e8 <HAL_GetTick>
 8008098:	4602      	mov	r2, r0
 800809a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800809c:	1ad3      	subs	r3, r2, r3
 800809e:	2b02      	cmp	r3, #2
 80080a0:	d901      	bls.n	80080a6 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 80080a2:	2303      	movs	r3, #3
 80080a4:	e05f      	b.n	8008166 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80080a6:	4b32      	ldr	r3, [pc, #200]	; (8008170 <HAL_RCC_OscConfig+0x858>)
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	d0f0      	beq.n	8008094 <HAL_RCC_OscConfig+0x77c>
 80080b2:	e057      	b.n	8008164 <HAL_RCC_OscConfig+0x84c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80080b4:	4b2e      	ldr	r3, [pc, #184]	; (8008170 <HAL_RCC_OscConfig+0x858>)
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	4a2d      	ldr	r2, [pc, #180]	; (8008170 <HAL_RCC_OscConfig+0x858>)
 80080ba:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80080be:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80080c0:	f7fe fb12 	bl	80066e8 <HAL_GetTick>
 80080c4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80080c6:	e008      	b.n	80080da <HAL_RCC_OscConfig+0x7c2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80080c8:	f7fe fb0e 	bl	80066e8 <HAL_GetTick>
 80080cc:	4602      	mov	r2, r0
 80080ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080d0:	1ad3      	subs	r3, r2, r3
 80080d2:	2b02      	cmp	r3, #2
 80080d4:	d901      	bls.n	80080da <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 80080d6:	2303      	movs	r3, #3
 80080d8:	e045      	b.n	8008166 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80080da:	4b25      	ldr	r3, [pc, #148]	; (8008170 <HAL_RCC_OscConfig+0x858>)
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80080e2:	2b00      	cmp	r3, #0
 80080e4:	d1f0      	bne.n	80080c8 <HAL_RCC_OscConfig+0x7b0>
 80080e6:	e03d      	b.n	8008164 <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80080e8:	4b21      	ldr	r3, [pc, #132]	; (8008170 <HAL_RCC_OscConfig+0x858>)
 80080ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80080ec:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80080ee:	4b20      	ldr	r3, [pc, #128]	; (8008170 <HAL_RCC_OscConfig+0x858>)
 80080f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80080f2:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080f8:	2b01      	cmp	r3, #1
 80080fa:	d031      	beq.n	8008160 <HAL_RCC_OscConfig+0x848>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80080fc:	693b      	ldr	r3, [r7, #16]
 80080fe:	f003 0203 	and.w	r2, r3, #3
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008106:	429a      	cmp	r2, r3
 8008108:	d12a      	bne.n	8008160 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800810a:	693b      	ldr	r3, [r7, #16]
 800810c:	091b      	lsrs	r3, r3, #4
 800810e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008116:	429a      	cmp	r2, r3
 8008118:	d122      	bne.n	8008160 <HAL_RCC_OscConfig+0x848>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800811a:	68fb      	ldr	r3, [r7, #12]
 800811c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008124:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8008126:	429a      	cmp	r2, r3
 8008128:	d11a      	bne.n	8008160 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800812a:	68fb      	ldr	r3, [r7, #12]
 800812c:	0a5b      	lsrs	r3, r3, #9
 800812e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008136:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8008138:	429a      	cmp	r2, r3
 800813a:	d111      	bne.n	8008160 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800813c:	68fb      	ldr	r3, [r7, #12]
 800813e:	0c1b      	lsrs	r3, r3, #16
 8008140:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008148:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800814a:	429a      	cmp	r2, r3
 800814c:	d108      	bne.n	8008160 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800814e:	68fb      	ldr	r3, [r7, #12]
 8008150:	0e1b      	lsrs	r3, r3, #24
 8008152:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800815a:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800815c:	429a      	cmp	r2, r3
 800815e:	d001      	beq.n	8008164 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8008160:	2301      	movs	r3, #1
 8008162:	e000      	b.n	8008166 <HAL_RCC_OscConfig+0x84e>
      }
    }
  }
  return HAL_OK;
 8008164:	2300      	movs	r3, #0
}
 8008166:	4618      	mov	r0, r3
 8008168:	3730      	adds	r7, #48	; 0x30
 800816a:	46bd      	mov	sp, r7
 800816c:	bd80      	pop	{r7, pc}
 800816e:	bf00      	nop
 8008170:	58024400 	.word	0x58024400

08008174 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008174:	b580      	push	{r7, lr}
 8008176:	b086      	sub	sp, #24
 8008178:	af00      	add	r7, sp, #0
 800817a:	6078      	str	r0, [r7, #4]
 800817c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	2b00      	cmp	r3, #0
 8008182:	d101      	bne.n	8008188 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008184:	2301      	movs	r3, #1
 8008186:	e19c      	b.n	80084c2 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8008188:	4b8a      	ldr	r3, [pc, #552]	; (80083b4 <HAL_RCC_ClockConfig+0x240>)
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	f003 030f 	and.w	r3, r3, #15
 8008190:	683a      	ldr	r2, [r7, #0]
 8008192:	429a      	cmp	r2, r3
 8008194:	d910      	bls.n	80081b8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008196:	4b87      	ldr	r3, [pc, #540]	; (80083b4 <HAL_RCC_ClockConfig+0x240>)
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	f023 020f 	bic.w	r2, r3, #15
 800819e:	4985      	ldr	r1, [pc, #532]	; (80083b4 <HAL_RCC_ClockConfig+0x240>)
 80081a0:	683b      	ldr	r3, [r7, #0]
 80081a2:	4313      	orrs	r3, r2
 80081a4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80081a6:	4b83      	ldr	r3, [pc, #524]	; (80083b4 <HAL_RCC_ClockConfig+0x240>)
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	f003 030f 	and.w	r3, r3, #15
 80081ae:	683a      	ldr	r2, [r7, #0]
 80081b0:	429a      	cmp	r2, r3
 80081b2:	d001      	beq.n	80081b8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80081b4:	2301      	movs	r3, #1
 80081b6:	e184      	b.n	80084c2 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	f003 0304 	and.w	r3, r3, #4
 80081c0:	2b00      	cmp	r3, #0
 80081c2:	d010      	beq.n	80081e6 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	691a      	ldr	r2, [r3, #16]
 80081c8:	4b7b      	ldr	r3, [pc, #492]	; (80083b8 <HAL_RCC_ClockConfig+0x244>)
 80081ca:	699b      	ldr	r3, [r3, #24]
 80081cc:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80081d0:	429a      	cmp	r2, r3
 80081d2:	d908      	bls.n	80081e6 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80081d4:	4b78      	ldr	r3, [pc, #480]	; (80083b8 <HAL_RCC_ClockConfig+0x244>)
 80081d6:	699b      	ldr	r3, [r3, #24]
 80081d8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	691b      	ldr	r3, [r3, #16]
 80081e0:	4975      	ldr	r1, [pc, #468]	; (80083b8 <HAL_RCC_ClockConfig+0x244>)
 80081e2:	4313      	orrs	r3, r2
 80081e4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	f003 0308 	and.w	r3, r3, #8
 80081ee:	2b00      	cmp	r3, #0
 80081f0:	d010      	beq.n	8008214 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	695a      	ldr	r2, [r3, #20]
 80081f6:	4b70      	ldr	r3, [pc, #448]	; (80083b8 <HAL_RCC_ClockConfig+0x244>)
 80081f8:	69db      	ldr	r3, [r3, #28]
 80081fa:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80081fe:	429a      	cmp	r2, r3
 8008200:	d908      	bls.n	8008214 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8008202:	4b6d      	ldr	r3, [pc, #436]	; (80083b8 <HAL_RCC_ClockConfig+0x244>)
 8008204:	69db      	ldr	r3, [r3, #28]
 8008206:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	695b      	ldr	r3, [r3, #20]
 800820e:	496a      	ldr	r1, [pc, #424]	; (80083b8 <HAL_RCC_ClockConfig+0x244>)
 8008210:	4313      	orrs	r3, r2
 8008212:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	f003 0310 	and.w	r3, r3, #16
 800821c:	2b00      	cmp	r3, #0
 800821e:	d010      	beq.n	8008242 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	699a      	ldr	r2, [r3, #24]
 8008224:	4b64      	ldr	r3, [pc, #400]	; (80083b8 <HAL_RCC_ClockConfig+0x244>)
 8008226:	69db      	ldr	r3, [r3, #28]
 8008228:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800822c:	429a      	cmp	r2, r3
 800822e:	d908      	bls.n	8008242 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8008230:	4b61      	ldr	r3, [pc, #388]	; (80083b8 <HAL_RCC_ClockConfig+0x244>)
 8008232:	69db      	ldr	r3, [r3, #28]
 8008234:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	699b      	ldr	r3, [r3, #24]
 800823c:	495e      	ldr	r1, [pc, #376]	; (80083b8 <HAL_RCC_ClockConfig+0x244>)
 800823e:	4313      	orrs	r3, r2
 8008240:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	f003 0320 	and.w	r3, r3, #32
 800824a:	2b00      	cmp	r3, #0
 800824c:	d010      	beq.n	8008270 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	69da      	ldr	r2, [r3, #28]
 8008252:	4b59      	ldr	r3, [pc, #356]	; (80083b8 <HAL_RCC_ClockConfig+0x244>)
 8008254:	6a1b      	ldr	r3, [r3, #32]
 8008256:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800825a:	429a      	cmp	r2, r3
 800825c:	d908      	bls.n	8008270 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800825e:	4b56      	ldr	r3, [pc, #344]	; (80083b8 <HAL_RCC_ClockConfig+0x244>)
 8008260:	6a1b      	ldr	r3, [r3, #32]
 8008262:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	69db      	ldr	r3, [r3, #28]
 800826a:	4953      	ldr	r1, [pc, #332]	; (80083b8 <HAL_RCC_ClockConfig+0x244>)
 800826c:	4313      	orrs	r3, r2
 800826e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	f003 0302 	and.w	r3, r3, #2
 8008278:	2b00      	cmp	r3, #0
 800827a:	d010      	beq.n	800829e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	68da      	ldr	r2, [r3, #12]
 8008280:	4b4d      	ldr	r3, [pc, #308]	; (80083b8 <HAL_RCC_ClockConfig+0x244>)
 8008282:	699b      	ldr	r3, [r3, #24]
 8008284:	f003 030f 	and.w	r3, r3, #15
 8008288:	429a      	cmp	r2, r3
 800828a:	d908      	bls.n	800829e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800828c:	4b4a      	ldr	r3, [pc, #296]	; (80083b8 <HAL_RCC_ClockConfig+0x244>)
 800828e:	699b      	ldr	r3, [r3, #24]
 8008290:	f023 020f 	bic.w	r2, r3, #15
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	68db      	ldr	r3, [r3, #12]
 8008298:	4947      	ldr	r1, [pc, #284]	; (80083b8 <HAL_RCC_ClockConfig+0x244>)
 800829a:	4313      	orrs	r3, r2
 800829c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	f003 0301 	and.w	r3, r3, #1
 80082a6:	2b00      	cmp	r3, #0
 80082a8:	d055      	beq.n	8008356 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80082aa:	4b43      	ldr	r3, [pc, #268]	; (80083b8 <HAL_RCC_ClockConfig+0x244>)
 80082ac:	699b      	ldr	r3, [r3, #24]
 80082ae:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	689b      	ldr	r3, [r3, #8]
 80082b6:	4940      	ldr	r1, [pc, #256]	; (80083b8 <HAL_RCC_ClockConfig+0x244>)
 80082b8:	4313      	orrs	r3, r2
 80082ba:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	685b      	ldr	r3, [r3, #4]
 80082c0:	2b02      	cmp	r3, #2
 80082c2:	d107      	bne.n	80082d4 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80082c4:	4b3c      	ldr	r3, [pc, #240]	; (80083b8 <HAL_RCC_ClockConfig+0x244>)
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80082cc:	2b00      	cmp	r3, #0
 80082ce:	d121      	bne.n	8008314 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80082d0:	2301      	movs	r3, #1
 80082d2:	e0f6      	b.n	80084c2 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	685b      	ldr	r3, [r3, #4]
 80082d8:	2b03      	cmp	r3, #3
 80082da:	d107      	bne.n	80082ec <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80082dc:	4b36      	ldr	r3, [pc, #216]	; (80083b8 <HAL_RCC_ClockConfig+0x244>)
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80082e4:	2b00      	cmp	r3, #0
 80082e6:	d115      	bne.n	8008314 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80082e8:	2301      	movs	r3, #1
 80082ea:	e0ea      	b.n	80084c2 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	685b      	ldr	r3, [r3, #4]
 80082f0:	2b01      	cmp	r3, #1
 80082f2:	d107      	bne.n	8008304 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80082f4:	4b30      	ldr	r3, [pc, #192]	; (80083b8 <HAL_RCC_ClockConfig+0x244>)
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80082fc:	2b00      	cmp	r3, #0
 80082fe:	d109      	bne.n	8008314 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8008300:	2301      	movs	r3, #1
 8008302:	e0de      	b.n	80084c2 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008304:	4b2c      	ldr	r3, [pc, #176]	; (80083b8 <HAL_RCC_ClockConfig+0x244>)
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	f003 0304 	and.w	r3, r3, #4
 800830c:	2b00      	cmp	r3, #0
 800830e:	d101      	bne.n	8008314 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8008310:	2301      	movs	r3, #1
 8008312:	e0d6      	b.n	80084c2 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8008314:	4b28      	ldr	r3, [pc, #160]	; (80083b8 <HAL_RCC_ClockConfig+0x244>)
 8008316:	691b      	ldr	r3, [r3, #16]
 8008318:	f023 0207 	bic.w	r2, r3, #7
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	685b      	ldr	r3, [r3, #4]
 8008320:	4925      	ldr	r1, [pc, #148]	; (80083b8 <HAL_RCC_ClockConfig+0x244>)
 8008322:	4313      	orrs	r3, r2
 8008324:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008326:	f7fe f9df 	bl	80066e8 <HAL_GetTick>
 800832a:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800832c:	e00a      	b.n	8008344 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800832e:	f7fe f9db 	bl	80066e8 <HAL_GetTick>
 8008332:	4602      	mov	r2, r0
 8008334:	697b      	ldr	r3, [r7, #20]
 8008336:	1ad3      	subs	r3, r2, r3
 8008338:	f241 3288 	movw	r2, #5000	; 0x1388
 800833c:	4293      	cmp	r3, r2
 800833e:	d901      	bls.n	8008344 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8008340:	2303      	movs	r3, #3
 8008342:	e0be      	b.n	80084c2 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008344:	4b1c      	ldr	r3, [pc, #112]	; (80083b8 <HAL_RCC_ClockConfig+0x244>)
 8008346:	691b      	ldr	r3, [r3, #16]
 8008348:	f003 0238 	and.w	r2, r3, #56	; 0x38
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	685b      	ldr	r3, [r3, #4]
 8008350:	00db      	lsls	r3, r3, #3
 8008352:	429a      	cmp	r2, r3
 8008354:	d1eb      	bne.n	800832e <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	f003 0302 	and.w	r3, r3, #2
 800835e:	2b00      	cmp	r3, #0
 8008360:	d010      	beq.n	8008384 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	68da      	ldr	r2, [r3, #12]
 8008366:	4b14      	ldr	r3, [pc, #80]	; (80083b8 <HAL_RCC_ClockConfig+0x244>)
 8008368:	699b      	ldr	r3, [r3, #24]
 800836a:	f003 030f 	and.w	r3, r3, #15
 800836e:	429a      	cmp	r2, r3
 8008370:	d208      	bcs.n	8008384 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008372:	4b11      	ldr	r3, [pc, #68]	; (80083b8 <HAL_RCC_ClockConfig+0x244>)
 8008374:	699b      	ldr	r3, [r3, #24]
 8008376:	f023 020f 	bic.w	r2, r3, #15
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	68db      	ldr	r3, [r3, #12]
 800837e:	490e      	ldr	r1, [pc, #56]	; (80083b8 <HAL_RCC_ClockConfig+0x244>)
 8008380:	4313      	orrs	r3, r2
 8008382:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8008384:	4b0b      	ldr	r3, [pc, #44]	; (80083b4 <HAL_RCC_ClockConfig+0x240>)
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	f003 030f 	and.w	r3, r3, #15
 800838c:	683a      	ldr	r2, [r7, #0]
 800838e:	429a      	cmp	r2, r3
 8008390:	d214      	bcs.n	80083bc <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008392:	4b08      	ldr	r3, [pc, #32]	; (80083b4 <HAL_RCC_ClockConfig+0x240>)
 8008394:	681b      	ldr	r3, [r3, #0]
 8008396:	f023 020f 	bic.w	r2, r3, #15
 800839a:	4906      	ldr	r1, [pc, #24]	; (80083b4 <HAL_RCC_ClockConfig+0x240>)
 800839c:	683b      	ldr	r3, [r7, #0]
 800839e:	4313      	orrs	r3, r2
 80083a0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80083a2:	4b04      	ldr	r3, [pc, #16]	; (80083b4 <HAL_RCC_ClockConfig+0x240>)
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	f003 030f 	and.w	r3, r3, #15
 80083aa:	683a      	ldr	r2, [r7, #0]
 80083ac:	429a      	cmp	r2, r3
 80083ae:	d005      	beq.n	80083bc <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80083b0:	2301      	movs	r3, #1
 80083b2:	e086      	b.n	80084c2 <HAL_RCC_ClockConfig+0x34e>
 80083b4:	52002000 	.word	0x52002000
 80083b8:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	f003 0304 	and.w	r3, r3, #4
 80083c4:	2b00      	cmp	r3, #0
 80083c6:	d010      	beq.n	80083ea <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	691a      	ldr	r2, [r3, #16]
 80083cc:	4b3f      	ldr	r3, [pc, #252]	; (80084cc <HAL_RCC_ClockConfig+0x358>)
 80083ce:	699b      	ldr	r3, [r3, #24]
 80083d0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80083d4:	429a      	cmp	r2, r3
 80083d6:	d208      	bcs.n	80083ea <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80083d8:	4b3c      	ldr	r3, [pc, #240]	; (80084cc <HAL_RCC_ClockConfig+0x358>)
 80083da:	699b      	ldr	r3, [r3, #24]
 80083dc:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	691b      	ldr	r3, [r3, #16]
 80083e4:	4939      	ldr	r1, [pc, #228]	; (80084cc <HAL_RCC_ClockConfig+0x358>)
 80083e6:	4313      	orrs	r3, r2
 80083e8:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	f003 0308 	and.w	r3, r3, #8
 80083f2:	2b00      	cmp	r3, #0
 80083f4:	d010      	beq.n	8008418 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	695a      	ldr	r2, [r3, #20]
 80083fa:	4b34      	ldr	r3, [pc, #208]	; (80084cc <HAL_RCC_ClockConfig+0x358>)
 80083fc:	69db      	ldr	r3, [r3, #28]
 80083fe:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008402:	429a      	cmp	r2, r3
 8008404:	d208      	bcs.n	8008418 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8008406:	4b31      	ldr	r3, [pc, #196]	; (80084cc <HAL_RCC_ClockConfig+0x358>)
 8008408:	69db      	ldr	r3, [r3, #28]
 800840a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	695b      	ldr	r3, [r3, #20]
 8008412:	492e      	ldr	r1, [pc, #184]	; (80084cc <HAL_RCC_ClockConfig+0x358>)
 8008414:	4313      	orrs	r3, r2
 8008416:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	f003 0310 	and.w	r3, r3, #16
 8008420:	2b00      	cmp	r3, #0
 8008422:	d010      	beq.n	8008446 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	699a      	ldr	r2, [r3, #24]
 8008428:	4b28      	ldr	r3, [pc, #160]	; (80084cc <HAL_RCC_ClockConfig+0x358>)
 800842a:	69db      	ldr	r3, [r3, #28]
 800842c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008430:	429a      	cmp	r2, r3
 8008432:	d208      	bcs.n	8008446 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8008434:	4b25      	ldr	r3, [pc, #148]	; (80084cc <HAL_RCC_ClockConfig+0x358>)
 8008436:	69db      	ldr	r3, [r3, #28]
 8008438:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	699b      	ldr	r3, [r3, #24]
 8008440:	4922      	ldr	r1, [pc, #136]	; (80084cc <HAL_RCC_ClockConfig+0x358>)
 8008442:	4313      	orrs	r3, r2
 8008444:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	681b      	ldr	r3, [r3, #0]
 800844a:	f003 0320 	and.w	r3, r3, #32
 800844e:	2b00      	cmp	r3, #0
 8008450:	d010      	beq.n	8008474 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	69da      	ldr	r2, [r3, #28]
 8008456:	4b1d      	ldr	r3, [pc, #116]	; (80084cc <HAL_RCC_ClockConfig+0x358>)
 8008458:	6a1b      	ldr	r3, [r3, #32]
 800845a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800845e:	429a      	cmp	r2, r3
 8008460:	d208      	bcs.n	8008474 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8008462:	4b1a      	ldr	r3, [pc, #104]	; (80084cc <HAL_RCC_ClockConfig+0x358>)
 8008464:	6a1b      	ldr	r3, [r3, #32]
 8008466:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	69db      	ldr	r3, [r3, #28]
 800846e:	4917      	ldr	r1, [pc, #92]	; (80084cc <HAL_RCC_ClockConfig+0x358>)
 8008470:	4313      	orrs	r3, r2
 8008472:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8008474:	f000 f834 	bl	80084e0 <HAL_RCC_GetSysClockFreq>
 8008478:	4602      	mov	r2, r0
 800847a:	4b14      	ldr	r3, [pc, #80]	; (80084cc <HAL_RCC_ClockConfig+0x358>)
 800847c:	699b      	ldr	r3, [r3, #24]
 800847e:	0a1b      	lsrs	r3, r3, #8
 8008480:	f003 030f 	and.w	r3, r3, #15
 8008484:	4912      	ldr	r1, [pc, #72]	; (80084d0 <HAL_RCC_ClockConfig+0x35c>)
 8008486:	5ccb      	ldrb	r3, [r1, r3]
 8008488:	f003 031f 	and.w	r3, r3, #31
 800848c:	fa22 f303 	lsr.w	r3, r2, r3
 8008490:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8008492:	4b0e      	ldr	r3, [pc, #56]	; (80084cc <HAL_RCC_ClockConfig+0x358>)
 8008494:	699b      	ldr	r3, [r3, #24]
 8008496:	f003 030f 	and.w	r3, r3, #15
 800849a:	4a0d      	ldr	r2, [pc, #52]	; (80084d0 <HAL_RCC_ClockConfig+0x35c>)
 800849c:	5cd3      	ldrb	r3, [r2, r3]
 800849e:	f003 031f 	and.w	r3, r3, #31
 80084a2:	693a      	ldr	r2, [r7, #16]
 80084a4:	fa22 f303 	lsr.w	r3, r2, r3
 80084a8:	4a0a      	ldr	r2, [pc, #40]	; (80084d4 <HAL_RCC_ClockConfig+0x360>)
 80084aa:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80084ac:	4a0a      	ldr	r2, [pc, #40]	; (80084d8 <HAL_RCC_ClockConfig+0x364>)
 80084ae:	693b      	ldr	r3, [r7, #16]
 80084b0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 80084b2:	4b0a      	ldr	r3, [pc, #40]	; (80084dc <HAL_RCC_ClockConfig+0x368>)
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	4618      	mov	r0, r3
 80084b8:	f7fe f8cc 	bl	8006654 <HAL_InitTick>
 80084bc:	4603      	mov	r3, r0
 80084be:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80084c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80084c2:	4618      	mov	r0, r3
 80084c4:	3718      	adds	r7, #24
 80084c6:	46bd      	mov	sp, r7
 80084c8:	bd80      	pop	{r7, pc}
 80084ca:	bf00      	nop
 80084cc:	58024400 	.word	0x58024400
 80084d0:	0801223c 	.word	0x0801223c
 80084d4:	2400007c 	.word	0x2400007c
 80084d8:	24000078 	.word	0x24000078
 80084dc:	24000080 	.word	0x24000080

080084e0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80084e0:	b480      	push	{r7}
 80084e2:	b089      	sub	sp, #36	; 0x24
 80084e4:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80084e6:	4bb3      	ldr	r3, [pc, #716]	; (80087b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80084e8:	691b      	ldr	r3, [r3, #16]
 80084ea:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80084ee:	2b18      	cmp	r3, #24
 80084f0:	f200 8155 	bhi.w	800879e <HAL_RCC_GetSysClockFreq+0x2be>
 80084f4:	a201      	add	r2, pc, #4	; (adr r2, 80084fc <HAL_RCC_GetSysClockFreq+0x1c>)
 80084f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084fa:	bf00      	nop
 80084fc:	08008561 	.word	0x08008561
 8008500:	0800879f 	.word	0x0800879f
 8008504:	0800879f 	.word	0x0800879f
 8008508:	0800879f 	.word	0x0800879f
 800850c:	0800879f 	.word	0x0800879f
 8008510:	0800879f 	.word	0x0800879f
 8008514:	0800879f 	.word	0x0800879f
 8008518:	0800879f 	.word	0x0800879f
 800851c:	08008587 	.word	0x08008587
 8008520:	0800879f 	.word	0x0800879f
 8008524:	0800879f 	.word	0x0800879f
 8008528:	0800879f 	.word	0x0800879f
 800852c:	0800879f 	.word	0x0800879f
 8008530:	0800879f 	.word	0x0800879f
 8008534:	0800879f 	.word	0x0800879f
 8008538:	0800879f 	.word	0x0800879f
 800853c:	0800858d 	.word	0x0800858d
 8008540:	0800879f 	.word	0x0800879f
 8008544:	0800879f 	.word	0x0800879f
 8008548:	0800879f 	.word	0x0800879f
 800854c:	0800879f 	.word	0x0800879f
 8008550:	0800879f 	.word	0x0800879f
 8008554:	0800879f 	.word	0x0800879f
 8008558:	0800879f 	.word	0x0800879f
 800855c:	08008593 	.word	0x08008593
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008560:	4b94      	ldr	r3, [pc, #592]	; (80087b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	f003 0320 	and.w	r3, r3, #32
 8008568:	2b00      	cmp	r3, #0
 800856a:	d009      	beq.n	8008580 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800856c:	4b91      	ldr	r3, [pc, #580]	; (80087b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	08db      	lsrs	r3, r3, #3
 8008572:	f003 0303 	and.w	r3, r3, #3
 8008576:	4a90      	ldr	r2, [pc, #576]	; (80087b8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8008578:	fa22 f303 	lsr.w	r3, r2, r3
 800857c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 800857e:	e111      	b.n	80087a4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8008580:	4b8d      	ldr	r3, [pc, #564]	; (80087b8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8008582:	61bb      	str	r3, [r7, #24]
    break;
 8008584:	e10e      	b.n	80087a4 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8008586:	4b8d      	ldr	r3, [pc, #564]	; (80087bc <HAL_RCC_GetSysClockFreq+0x2dc>)
 8008588:	61bb      	str	r3, [r7, #24]
    break;
 800858a:	e10b      	b.n	80087a4 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 800858c:	4b8c      	ldr	r3, [pc, #560]	; (80087c0 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800858e:	61bb      	str	r3, [r7, #24]
    break;
 8008590:	e108      	b.n	80087a4 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008592:	4b88      	ldr	r3, [pc, #544]	; (80087b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008594:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008596:	f003 0303 	and.w	r3, r3, #3
 800859a:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 800859c:	4b85      	ldr	r3, [pc, #532]	; (80087b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800859e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80085a0:	091b      	lsrs	r3, r3, #4
 80085a2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80085a6:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 80085a8:	4b82      	ldr	r3, [pc, #520]	; (80087b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80085aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085ac:	f003 0301 	and.w	r3, r3, #1
 80085b0:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80085b2:	4b80      	ldr	r3, [pc, #512]	; (80087b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80085b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80085b6:	08db      	lsrs	r3, r3, #3
 80085b8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80085bc:	68fa      	ldr	r2, [r7, #12]
 80085be:	fb02 f303 	mul.w	r3, r2, r3
 80085c2:	ee07 3a90 	vmov	s15, r3
 80085c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80085ca:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 80085ce:	693b      	ldr	r3, [r7, #16]
 80085d0:	2b00      	cmp	r3, #0
 80085d2:	f000 80e1 	beq.w	8008798 <HAL_RCC_GetSysClockFreq+0x2b8>
 80085d6:	697b      	ldr	r3, [r7, #20]
 80085d8:	2b02      	cmp	r3, #2
 80085da:	f000 8083 	beq.w	80086e4 <HAL_RCC_GetSysClockFreq+0x204>
 80085de:	697b      	ldr	r3, [r7, #20]
 80085e0:	2b02      	cmp	r3, #2
 80085e2:	f200 80a1 	bhi.w	8008728 <HAL_RCC_GetSysClockFreq+0x248>
 80085e6:	697b      	ldr	r3, [r7, #20]
 80085e8:	2b00      	cmp	r3, #0
 80085ea:	d003      	beq.n	80085f4 <HAL_RCC_GetSysClockFreq+0x114>
 80085ec:	697b      	ldr	r3, [r7, #20]
 80085ee:	2b01      	cmp	r3, #1
 80085f0:	d056      	beq.n	80086a0 <HAL_RCC_GetSysClockFreq+0x1c0>
 80085f2:	e099      	b.n	8008728 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80085f4:	4b6f      	ldr	r3, [pc, #444]	; (80087b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	f003 0320 	and.w	r3, r3, #32
 80085fc:	2b00      	cmp	r3, #0
 80085fe:	d02d      	beq.n	800865c <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008600:	4b6c      	ldr	r3, [pc, #432]	; (80087b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	08db      	lsrs	r3, r3, #3
 8008606:	f003 0303 	and.w	r3, r3, #3
 800860a:	4a6b      	ldr	r2, [pc, #428]	; (80087b8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800860c:	fa22 f303 	lsr.w	r3, r2, r3
 8008610:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	ee07 3a90 	vmov	s15, r3
 8008618:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800861c:	693b      	ldr	r3, [r7, #16]
 800861e:	ee07 3a90 	vmov	s15, r3
 8008622:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008626:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800862a:	4b62      	ldr	r3, [pc, #392]	; (80087b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800862c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800862e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008632:	ee07 3a90 	vmov	s15, r3
 8008636:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800863a:	ed97 6a02 	vldr	s12, [r7, #8]
 800863e:	eddf 5a61 	vldr	s11, [pc, #388]	; 80087c4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008642:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008646:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800864a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800864e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008652:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008656:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 800865a:	e087      	b.n	800876c <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800865c:	693b      	ldr	r3, [r7, #16]
 800865e:	ee07 3a90 	vmov	s15, r3
 8008662:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008666:	eddf 6a58 	vldr	s13, [pc, #352]	; 80087c8 <HAL_RCC_GetSysClockFreq+0x2e8>
 800866a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800866e:	4b51      	ldr	r3, [pc, #324]	; (80087b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008670:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008672:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008676:	ee07 3a90 	vmov	s15, r3
 800867a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800867e:	ed97 6a02 	vldr	s12, [r7, #8]
 8008682:	eddf 5a50 	vldr	s11, [pc, #320]	; 80087c4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008686:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800868a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800868e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008692:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008696:	ee67 7a27 	vmul.f32	s15, s14, s15
 800869a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800869e:	e065      	b.n	800876c <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80086a0:	693b      	ldr	r3, [r7, #16]
 80086a2:	ee07 3a90 	vmov	s15, r3
 80086a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80086aa:	eddf 6a48 	vldr	s13, [pc, #288]	; 80087cc <HAL_RCC_GetSysClockFreq+0x2ec>
 80086ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80086b2:	4b40      	ldr	r3, [pc, #256]	; (80087b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80086b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80086b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80086ba:	ee07 3a90 	vmov	s15, r3
 80086be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80086c2:	ed97 6a02 	vldr	s12, [r7, #8]
 80086c6:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80087c4 <HAL_RCC_GetSysClockFreq+0x2e4>
 80086ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80086ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80086d2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80086d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80086da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80086de:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80086e2:	e043      	b.n	800876c <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80086e4:	693b      	ldr	r3, [r7, #16]
 80086e6:	ee07 3a90 	vmov	s15, r3
 80086ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80086ee:	eddf 6a38 	vldr	s13, [pc, #224]	; 80087d0 <HAL_RCC_GetSysClockFreq+0x2f0>
 80086f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80086f6:	4b2f      	ldr	r3, [pc, #188]	; (80087b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80086f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80086fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80086fe:	ee07 3a90 	vmov	s15, r3
 8008702:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008706:	ed97 6a02 	vldr	s12, [r7, #8]
 800870a:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80087c4 <HAL_RCC_GetSysClockFreq+0x2e4>
 800870e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008712:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008716:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800871a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800871e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008722:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008726:	e021      	b.n	800876c <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008728:	693b      	ldr	r3, [r7, #16]
 800872a:	ee07 3a90 	vmov	s15, r3
 800872e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008732:	eddf 6a26 	vldr	s13, [pc, #152]	; 80087cc <HAL_RCC_GetSysClockFreq+0x2ec>
 8008736:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800873a:	4b1e      	ldr	r3, [pc, #120]	; (80087b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800873c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800873e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008742:	ee07 3a90 	vmov	s15, r3
 8008746:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800874a:	ed97 6a02 	vldr	s12, [r7, #8]
 800874e:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80087c4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008752:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008756:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800875a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800875e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008762:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008766:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800876a:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 800876c:	4b11      	ldr	r3, [pc, #68]	; (80087b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800876e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008770:	0a5b      	lsrs	r3, r3, #9
 8008772:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008776:	3301      	adds	r3, #1
 8008778:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 800877a:	683b      	ldr	r3, [r7, #0]
 800877c:	ee07 3a90 	vmov	s15, r3
 8008780:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8008784:	edd7 6a07 	vldr	s13, [r7, #28]
 8008788:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800878c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008790:	ee17 3a90 	vmov	r3, s15
 8008794:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8008796:	e005      	b.n	80087a4 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8008798:	2300      	movs	r3, #0
 800879a:	61bb      	str	r3, [r7, #24]
    break;
 800879c:	e002      	b.n	80087a4 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 800879e:	4b07      	ldr	r3, [pc, #28]	; (80087bc <HAL_RCC_GetSysClockFreq+0x2dc>)
 80087a0:	61bb      	str	r3, [r7, #24]
    break;
 80087a2:	bf00      	nop
  }

  return sysclockfreq;
 80087a4:	69bb      	ldr	r3, [r7, #24]
}
 80087a6:	4618      	mov	r0, r3
 80087a8:	3724      	adds	r7, #36	; 0x24
 80087aa:	46bd      	mov	sp, r7
 80087ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087b0:	4770      	bx	lr
 80087b2:	bf00      	nop
 80087b4:	58024400 	.word	0x58024400
 80087b8:	03d09000 	.word	0x03d09000
 80087bc:	003d0900 	.word	0x003d0900
 80087c0:	017d7840 	.word	0x017d7840
 80087c4:	46000000 	.word	0x46000000
 80087c8:	4c742400 	.word	0x4c742400
 80087cc:	4a742400 	.word	0x4a742400
 80087d0:	4bbebc20 	.word	0x4bbebc20

080087d4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80087d4:	b580      	push	{r7, lr}
 80087d6:	b082      	sub	sp, #8
 80087d8:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80087da:	f7ff fe81 	bl	80084e0 <HAL_RCC_GetSysClockFreq>
 80087de:	4602      	mov	r2, r0
 80087e0:	4b10      	ldr	r3, [pc, #64]	; (8008824 <HAL_RCC_GetHCLKFreq+0x50>)
 80087e2:	699b      	ldr	r3, [r3, #24]
 80087e4:	0a1b      	lsrs	r3, r3, #8
 80087e6:	f003 030f 	and.w	r3, r3, #15
 80087ea:	490f      	ldr	r1, [pc, #60]	; (8008828 <HAL_RCC_GetHCLKFreq+0x54>)
 80087ec:	5ccb      	ldrb	r3, [r1, r3]
 80087ee:	f003 031f 	and.w	r3, r3, #31
 80087f2:	fa22 f303 	lsr.w	r3, r2, r3
 80087f6:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80087f8:	4b0a      	ldr	r3, [pc, #40]	; (8008824 <HAL_RCC_GetHCLKFreq+0x50>)
 80087fa:	699b      	ldr	r3, [r3, #24]
 80087fc:	f003 030f 	and.w	r3, r3, #15
 8008800:	4a09      	ldr	r2, [pc, #36]	; (8008828 <HAL_RCC_GetHCLKFreq+0x54>)
 8008802:	5cd3      	ldrb	r3, [r2, r3]
 8008804:	f003 031f 	and.w	r3, r3, #31
 8008808:	687a      	ldr	r2, [r7, #4]
 800880a:	fa22 f303 	lsr.w	r3, r2, r3
 800880e:	4a07      	ldr	r2, [pc, #28]	; (800882c <HAL_RCC_GetHCLKFreq+0x58>)
 8008810:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8008812:	4a07      	ldr	r2, [pc, #28]	; (8008830 <HAL_RCC_GetHCLKFreq+0x5c>)
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8008818:	4b04      	ldr	r3, [pc, #16]	; (800882c <HAL_RCC_GetHCLKFreq+0x58>)
 800881a:	681b      	ldr	r3, [r3, #0]
}
 800881c:	4618      	mov	r0, r3
 800881e:	3708      	adds	r7, #8
 8008820:	46bd      	mov	sp, r7
 8008822:	bd80      	pop	{r7, pc}
 8008824:	58024400 	.word	0x58024400
 8008828:	0801223c 	.word	0x0801223c
 800882c:	2400007c 	.word	0x2400007c
 8008830:	24000078 	.word	0x24000078

08008834 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008834:	b580      	push	{r7, lr}
 8008836:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8008838:	f7ff ffcc 	bl	80087d4 <HAL_RCC_GetHCLKFreq>
 800883c:	4602      	mov	r2, r0
 800883e:	4b06      	ldr	r3, [pc, #24]	; (8008858 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008840:	69db      	ldr	r3, [r3, #28]
 8008842:	091b      	lsrs	r3, r3, #4
 8008844:	f003 0307 	and.w	r3, r3, #7
 8008848:	4904      	ldr	r1, [pc, #16]	; (800885c <HAL_RCC_GetPCLK1Freq+0x28>)
 800884a:	5ccb      	ldrb	r3, [r1, r3]
 800884c:	f003 031f 	and.w	r3, r3, #31
 8008850:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8008854:	4618      	mov	r0, r3
 8008856:	bd80      	pop	{r7, pc}
 8008858:	58024400 	.word	0x58024400
 800885c:	0801223c 	.word	0x0801223c

08008860 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008860:	b580      	push	{r7, lr}
 8008862:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8008864:	f7ff ffb6 	bl	80087d4 <HAL_RCC_GetHCLKFreq>
 8008868:	4602      	mov	r2, r0
 800886a:	4b06      	ldr	r3, [pc, #24]	; (8008884 <HAL_RCC_GetPCLK2Freq+0x24>)
 800886c:	69db      	ldr	r3, [r3, #28]
 800886e:	0a1b      	lsrs	r3, r3, #8
 8008870:	f003 0307 	and.w	r3, r3, #7
 8008874:	4904      	ldr	r1, [pc, #16]	; (8008888 <HAL_RCC_GetPCLK2Freq+0x28>)
 8008876:	5ccb      	ldrb	r3, [r1, r3]
 8008878:	f003 031f 	and.w	r3, r3, #31
 800887c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8008880:	4618      	mov	r0, r3
 8008882:	bd80      	pop	{r7, pc}
 8008884:	58024400 	.word	0x58024400
 8008888:	0801223c 	.word	0x0801223c

0800888c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800888c:	b580      	push	{r7, lr}
 800888e:	b086      	sub	sp, #24
 8008890:	af00      	add	r7, sp, #0
 8008892:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8008894:	2300      	movs	r3, #0
 8008896:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8008898:	2300      	movs	r3, #0
 800889a:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80088a4:	2b00      	cmp	r3, #0
 80088a6:	d03f      	beq.n	8008928 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80088ac:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80088b0:	d02a      	beq.n	8008908 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80088b2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80088b6:	d824      	bhi.n	8008902 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80088b8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80088bc:	d018      	beq.n	80088f0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80088be:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80088c2:	d81e      	bhi.n	8008902 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80088c4:	2b00      	cmp	r3, #0
 80088c6:	d003      	beq.n	80088d0 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80088c8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80088cc:	d007      	beq.n	80088de <HAL_RCCEx_PeriphCLKConfig+0x52>
 80088ce:	e018      	b.n	8008902 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80088d0:	4ba3      	ldr	r3, [pc, #652]	; (8008b60 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80088d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088d4:	4aa2      	ldr	r2, [pc, #648]	; (8008b60 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80088d6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80088da:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80088dc:	e015      	b.n	800890a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	3304      	adds	r3, #4
 80088e2:	2102      	movs	r1, #2
 80088e4:	4618      	mov	r0, r3
 80088e6:	f001 f9d5 	bl	8009c94 <RCCEx_PLL2_Config>
 80088ea:	4603      	mov	r3, r0
 80088ec:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80088ee:	e00c      	b.n	800890a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	3324      	adds	r3, #36	; 0x24
 80088f4:	2102      	movs	r1, #2
 80088f6:	4618      	mov	r0, r3
 80088f8:	f001 fa7e 	bl	8009df8 <RCCEx_PLL3_Config>
 80088fc:	4603      	mov	r3, r0
 80088fe:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8008900:	e003      	b.n	800890a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008902:	2301      	movs	r3, #1
 8008904:	75fb      	strb	r3, [r7, #23]
      break;
 8008906:	e000      	b.n	800890a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8008908:	bf00      	nop
    }

    if(ret == HAL_OK)
 800890a:	7dfb      	ldrb	r3, [r7, #23]
 800890c:	2b00      	cmp	r3, #0
 800890e:	d109      	bne.n	8008924 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8008910:	4b93      	ldr	r3, [pc, #588]	; (8008b60 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8008912:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008914:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800891c:	4990      	ldr	r1, [pc, #576]	; (8008b60 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800891e:	4313      	orrs	r3, r2
 8008920:	650b      	str	r3, [r1, #80]	; 0x50
 8008922:	e001      	b.n	8008928 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008924:	7dfb      	ldrb	r3, [r7, #23]
 8008926:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008930:	2b00      	cmp	r3, #0
 8008932:	d03d      	beq.n	80089b0 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008938:	2b04      	cmp	r3, #4
 800893a:	d826      	bhi.n	800898a <HAL_RCCEx_PeriphCLKConfig+0xfe>
 800893c:	a201      	add	r2, pc, #4	; (adr r2, 8008944 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 800893e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008942:	bf00      	nop
 8008944:	08008959 	.word	0x08008959
 8008948:	08008967 	.word	0x08008967
 800894c:	08008979 	.word	0x08008979
 8008950:	08008991 	.word	0x08008991
 8008954:	08008991 	.word	0x08008991
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008958:	4b81      	ldr	r3, [pc, #516]	; (8008b60 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800895a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800895c:	4a80      	ldr	r2, [pc, #512]	; (8008b60 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800895e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008962:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8008964:	e015      	b.n	8008992 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	3304      	adds	r3, #4
 800896a:	2100      	movs	r1, #0
 800896c:	4618      	mov	r0, r3
 800896e:	f001 f991 	bl	8009c94 <RCCEx_PLL2_Config>
 8008972:	4603      	mov	r3, r0
 8008974:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8008976:	e00c      	b.n	8008992 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	3324      	adds	r3, #36	; 0x24
 800897c:	2100      	movs	r1, #0
 800897e:	4618      	mov	r0, r3
 8008980:	f001 fa3a 	bl	8009df8 <RCCEx_PLL3_Config>
 8008984:	4603      	mov	r3, r0
 8008986:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8008988:	e003      	b.n	8008992 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800898a:	2301      	movs	r3, #1
 800898c:	75fb      	strb	r3, [r7, #23]
      break;
 800898e:	e000      	b.n	8008992 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8008990:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008992:	7dfb      	ldrb	r3, [r7, #23]
 8008994:	2b00      	cmp	r3, #0
 8008996:	d109      	bne.n	80089ac <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8008998:	4b71      	ldr	r3, [pc, #452]	; (8008b60 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800899a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800899c:	f023 0207 	bic.w	r2, r3, #7
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80089a4:	496e      	ldr	r1, [pc, #440]	; (8008b60 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80089a6:	4313      	orrs	r3, r2
 80089a8:	650b      	str	r3, [r1, #80]	; 0x50
 80089aa:	e001      	b.n	80089b0 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80089ac:	7dfb      	ldrb	r3, [r7, #23]
 80089ae:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80089b8:	2b00      	cmp	r3, #0
 80089ba:	d042      	beq.n	8008a42 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80089c0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80089c4:	d02b      	beq.n	8008a1e <HAL_RCCEx_PeriphCLKConfig+0x192>
 80089c6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80089ca:	d825      	bhi.n	8008a18 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 80089cc:	2bc0      	cmp	r3, #192	; 0xc0
 80089ce:	d028      	beq.n	8008a22 <HAL_RCCEx_PeriphCLKConfig+0x196>
 80089d0:	2bc0      	cmp	r3, #192	; 0xc0
 80089d2:	d821      	bhi.n	8008a18 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 80089d4:	2b80      	cmp	r3, #128	; 0x80
 80089d6:	d016      	beq.n	8008a06 <HAL_RCCEx_PeriphCLKConfig+0x17a>
 80089d8:	2b80      	cmp	r3, #128	; 0x80
 80089da:	d81d      	bhi.n	8008a18 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 80089dc:	2b00      	cmp	r3, #0
 80089de:	d002      	beq.n	80089e6 <HAL_RCCEx_PeriphCLKConfig+0x15a>
 80089e0:	2b40      	cmp	r3, #64	; 0x40
 80089e2:	d007      	beq.n	80089f4 <HAL_RCCEx_PeriphCLKConfig+0x168>
 80089e4:	e018      	b.n	8008a18 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80089e6:	4b5e      	ldr	r3, [pc, #376]	; (8008b60 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80089e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089ea:	4a5d      	ldr	r2, [pc, #372]	; (8008b60 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80089ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80089f0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80089f2:	e017      	b.n	8008a24 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	3304      	adds	r3, #4
 80089f8:	2100      	movs	r1, #0
 80089fa:	4618      	mov	r0, r3
 80089fc:	f001 f94a 	bl	8009c94 <RCCEx_PLL2_Config>
 8008a00:	4603      	mov	r3, r0
 8008a02:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8008a04:	e00e      	b.n	8008a24 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	3324      	adds	r3, #36	; 0x24
 8008a0a:	2100      	movs	r1, #0
 8008a0c:	4618      	mov	r0, r3
 8008a0e:	f001 f9f3 	bl	8009df8 <RCCEx_PLL3_Config>
 8008a12:	4603      	mov	r3, r0
 8008a14:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8008a16:	e005      	b.n	8008a24 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008a18:	2301      	movs	r3, #1
 8008a1a:	75fb      	strb	r3, [r7, #23]
      break;
 8008a1c:	e002      	b.n	8008a24 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8008a1e:	bf00      	nop
 8008a20:	e000      	b.n	8008a24 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8008a22:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008a24:	7dfb      	ldrb	r3, [r7, #23]
 8008a26:	2b00      	cmp	r3, #0
 8008a28:	d109      	bne.n	8008a3e <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8008a2a:	4b4d      	ldr	r3, [pc, #308]	; (8008b60 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8008a2c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008a2e:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008a36:	494a      	ldr	r1, [pc, #296]	; (8008b60 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8008a38:	4313      	orrs	r3, r2
 8008a3a:	650b      	str	r3, [r1, #80]	; 0x50
 8008a3c:	e001      	b.n	8008a42 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008a3e:	7dfb      	ldrb	r3, [r7, #23]
 8008a40:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	681b      	ldr	r3, [r3, #0]
 8008a46:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008a4a:	2b00      	cmp	r3, #0
 8008a4c:	d049      	beq.n	8008ae2 <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8008a54:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008a58:	d030      	beq.n	8008abc <HAL_RCCEx_PeriphCLKConfig+0x230>
 8008a5a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008a5e:	d82a      	bhi.n	8008ab6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8008a60:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8008a64:	d02c      	beq.n	8008ac0 <HAL_RCCEx_PeriphCLKConfig+0x234>
 8008a66:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8008a6a:	d824      	bhi.n	8008ab6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8008a6c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008a70:	d018      	beq.n	8008aa4 <HAL_RCCEx_PeriphCLKConfig+0x218>
 8008a72:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008a76:	d81e      	bhi.n	8008ab6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8008a78:	2b00      	cmp	r3, #0
 8008a7a:	d003      	beq.n	8008a84 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8008a7c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008a80:	d007      	beq.n	8008a92 <HAL_RCCEx_PeriphCLKConfig+0x206>
 8008a82:	e018      	b.n	8008ab6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008a84:	4b36      	ldr	r3, [pc, #216]	; (8008b60 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8008a86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a88:	4a35      	ldr	r2, [pc, #212]	; (8008b60 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8008a8a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008a8e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8008a90:	e017      	b.n	8008ac2 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	3304      	adds	r3, #4
 8008a96:	2100      	movs	r1, #0
 8008a98:	4618      	mov	r0, r3
 8008a9a:	f001 f8fb 	bl	8009c94 <RCCEx_PLL2_Config>
 8008a9e:	4603      	mov	r3, r0
 8008aa0:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8008aa2:	e00e      	b.n	8008ac2 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	3324      	adds	r3, #36	; 0x24
 8008aa8:	2100      	movs	r1, #0
 8008aaa:	4618      	mov	r0, r3
 8008aac:	f001 f9a4 	bl	8009df8 <RCCEx_PLL3_Config>
 8008ab0:	4603      	mov	r3, r0
 8008ab2:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8008ab4:	e005      	b.n	8008ac2 <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8008ab6:	2301      	movs	r3, #1
 8008ab8:	75fb      	strb	r3, [r7, #23]
      break;
 8008aba:	e002      	b.n	8008ac2 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8008abc:	bf00      	nop
 8008abe:	e000      	b.n	8008ac2 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8008ac0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008ac2:	7dfb      	ldrb	r3, [r7, #23]
 8008ac4:	2b00      	cmp	r3, #0
 8008ac6:	d10a      	bne.n	8008ade <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8008ac8:	4b25      	ldr	r3, [pc, #148]	; (8008b60 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8008aca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008acc:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8008ad6:	4922      	ldr	r1, [pc, #136]	; (8008b60 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8008ad8:	4313      	orrs	r3, r2
 8008ada:	658b      	str	r3, [r1, #88]	; 0x58
 8008adc:	e001      	b.n	8008ae2 <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008ade:	7dfb      	ldrb	r3, [r7, #23]
 8008ae0:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	681b      	ldr	r3, [r3, #0]
 8008ae6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008aea:	2b00      	cmp	r3, #0
 8008aec:	d04b      	beq.n	8008b86 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8008af4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008af8:	d030      	beq.n	8008b5c <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8008afa:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008afe:	d82a      	bhi.n	8008b56 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8008b00:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8008b04:	d02e      	beq.n	8008b64 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 8008b06:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8008b0a:	d824      	bhi.n	8008b56 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8008b0c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008b10:	d018      	beq.n	8008b44 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8008b12:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008b16:	d81e      	bhi.n	8008b56 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8008b18:	2b00      	cmp	r3, #0
 8008b1a:	d003      	beq.n	8008b24 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8008b1c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008b20:	d007      	beq.n	8008b32 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8008b22:	e018      	b.n	8008b56 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008b24:	4b0e      	ldr	r3, [pc, #56]	; (8008b60 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8008b26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b28:	4a0d      	ldr	r2, [pc, #52]	; (8008b60 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8008b2a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008b2e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8008b30:	e019      	b.n	8008b66 <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	3304      	adds	r3, #4
 8008b36:	2100      	movs	r1, #0
 8008b38:	4618      	mov	r0, r3
 8008b3a:	f001 f8ab 	bl	8009c94 <RCCEx_PLL2_Config>
 8008b3e:	4603      	mov	r3, r0
 8008b40:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8008b42:	e010      	b.n	8008b66 <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	3324      	adds	r3, #36	; 0x24
 8008b48:	2100      	movs	r1, #0
 8008b4a:	4618      	mov	r0, r3
 8008b4c:	f001 f954 	bl	8009df8 <RCCEx_PLL3_Config>
 8008b50:	4603      	mov	r3, r0
 8008b52:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8008b54:	e007      	b.n	8008b66 <HAL_RCCEx_PeriphCLKConfig+0x2da>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8008b56:	2301      	movs	r3, #1
 8008b58:	75fb      	strb	r3, [r7, #23]
      break;
 8008b5a:	e004      	b.n	8008b66 <HAL_RCCEx_PeriphCLKConfig+0x2da>
      break;
 8008b5c:	bf00      	nop
 8008b5e:	e002      	b.n	8008b66 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8008b60:	58024400 	.word	0x58024400
      break;
 8008b64:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008b66:	7dfb      	ldrb	r3, [r7, #23]
 8008b68:	2b00      	cmp	r3, #0
 8008b6a:	d10a      	bne.n	8008b82 <HAL_RCCEx_PeriphCLKConfig+0x2f6>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8008b6c:	4b99      	ldr	r3, [pc, #612]	; (8008dd4 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8008b6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008b70:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8008b7a:	4996      	ldr	r1, [pc, #600]	; (8008dd4 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8008b7c:	4313      	orrs	r3, r2
 8008b7e:	658b      	str	r3, [r1, #88]	; 0x58
 8008b80:	e001      	b.n	8008b86 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008b82:	7dfb      	ldrb	r3, [r7, #23]
 8008b84:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	681b      	ldr	r3, [r3, #0]
 8008b8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008b8e:	2b00      	cmp	r3, #0
 8008b90:	d032      	beq.n	8008bf8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008b96:	2b30      	cmp	r3, #48	; 0x30
 8008b98:	d01c      	beq.n	8008bd4 <HAL_RCCEx_PeriphCLKConfig+0x348>
 8008b9a:	2b30      	cmp	r3, #48	; 0x30
 8008b9c:	d817      	bhi.n	8008bce <HAL_RCCEx_PeriphCLKConfig+0x342>
 8008b9e:	2b20      	cmp	r3, #32
 8008ba0:	d00c      	beq.n	8008bbc <HAL_RCCEx_PeriphCLKConfig+0x330>
 8008ba2:	2b20      	cmp	r3, #32
 8008ba4:	d813      	bhi.n	8008bce <HAL_RCCEx_PeriphCLKConfig+0x342>
 8008ba6:	2b00      	cmp	r3, #0
 8008ba8:	d016      	beq.n	8008bd8 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 8008baa:	2b10      	cmp	r3, #16
 8008bac:	d10f      	bne.n	8008bce <HAL_RCCEx_PeriphCLKConfig+0x342>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008bae:	4b89      	ldr	r3, [pc, #548]	; (8008dd4 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8008bb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008bb2:	4a88      	ldr	r2, [pc, #544]	; (8008dd4 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8008bb4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008bb8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8008bba:	e00e      	b.n	8008bda <HAL_RCCEx_PeriphCLKConfig+0x34e>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	3304      	adds	r3, #4
 8008bc0:	2102      	movs	r1, #2
 8008bc2:	4618      	mov	r0, r3
 8008bc4:	f001 f866 	bl	8009c94 <RCCEx_PLL2_Config>
 8008bc8:	4603      	mov	r3, r0
 8008bca:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8008bcc:	e005      	b.n	8008bda <HAL_RCCEx_PeriphCLKConfig+0x34e>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8008bce:	2301      	movs	r3, #1
 8008bd0:	75fb      	strb	r3, [r7, #23]
      break;
 8008bd2:	e002      	b.n	8008bda <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8008bd4:	bf00      	nop
 8008bd6:	e000      	b.n	8008bda <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8008bd8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008bda:	7dfb      	ldrb	r3, [r7, #23]
 8008bdc:	2b00      	cmp	r3, #0
 8008bde:	d109      	bne.n	8008bf4 <HAL_RCCEx_PeriphCLKConfig+0x368>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8008be0:	4b7c      	ldr	r3, [pc, #496]	; (8008dd4 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8008be2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008be4:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008bec:	4979      	ldr	r1, [pc, #484]	; (8008dd4 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8008bee:	4313      	orrs	r3, r2
 8008bf0:	64cb      	str	r3, [r1, #76]	; 0x4c
 8008bf2:	e001      	b.n	8008bf8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008bf4:	7dfb      	ldrb	r3, [r7, #23]
 8008bf6:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	681b      	ldr	r3, [r3, #0]
 8008bfc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008c00:	2b00      	cmp	r3, #0
 8008c02:	d047      	beq.n	8008c94 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008c08:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008c0c:	d030      	beq.n	8008c70 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8008c0e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008c12:	d82a      	bhi.n	8008c6a <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8008c14:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008c18:	d02c      	beq.n	8008c74 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8008c1a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008c1e:	d824      	bhi.n	8008c6a <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8008c20:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008c24:	d018      	beq.n	8008c58 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 8008c26:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008c2a:	d81e      	bhi.n	8008c6a <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8008c2c:	2b00      	cmp	r3, #0
 8008c2e:	d003      	beq.n	8008c38 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 8008c30:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008c34:	d007      	beq.n	8008c46 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 8008c36:	e018      	b.n	8008c6a <HAL_RCCEx_PeriphCLKConfig+0x3de>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008c38:	4b66      	ldr	r3, [pc, #408]	; (8008dd4 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8008c3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c3c:	4a65      	ldr	r2, [pc, #404]	; (8008dd4 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8008c3e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008c42:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8008c44:	e017      	b.n	8008c76 <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	3304      	adds	r3, #4
 8008c4a:	2100      	movs	r1, #0
 8008c4c:	4618      	mov	r0, r3
 8008c4e:	f001 f821 	bl	8009c94 <RCCEx_PLL2_Config>
 8008c52:	4603      	mov	r3, r0
 8008c54:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8008c56:	e00e      	b.n	8008c76 <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	3324      	adds	r3, #36	; 0x24
 8008c5c:	2100      	movs	r1, #0
 8008c5e:	4618      	mov	r0, r3
 8008c60:	f001 f8ca 	bl	8009df8 <RCCEx_PLL3_Config>
 8008c64:	4603      	mov	r3, r0
 8008c66:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8008c68:	e005      	b.n	8008c76 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008c6a:	2301      	movs	r3, #1
 8008c6c:	75fb      	strb	r3, [r7, #23]
      break;
 8008c6e:	e002      	b.n	8008c76 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8008c70:	bf00      	nop
 8008c72:	e000      	b.n	8008c76 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8008c74:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008c76:	7dfb      	ldrb	r3, [r7, #23]
 8008c78:	2b00      	cmp	r3, #0
 8008c7a:	d109      	bne.n	8008c90 <HAL_RCCEx_PeriphCLKConfig+0x404>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8008c7c:	4b55      	ldr	r3, [pc, #340]	; (8008dd4 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8008c7e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008c80:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008c88:	4952      	ldr	r1, [pc, #328]	; (8008dd4 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8008c8a:	4313      	orrs	r3, r2
 8008c8c:	650b      	str	r3, [r1, #80]	; 0x50
 8008c8e:	e001      	b.n	8008c94 <HAL_RCCEx_PeriphCLKConfig+0x408>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008c90:	7dfb      	ldrb	r3, [r7, #23]
 8008c92:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	681b      	ldr	r3, [r3, #0]
 8008c98:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008c9c:	2b00      	cmp	r3, #0
 8008c9e:	d049      	beq.n	8008d34 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008ca4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008ca8:	d02e      	beq.n	8008d08 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8008caa:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008cae:	d828      	bhi.n	8008d02 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8008cb0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008cb4:	d02a      	beq.n	8008d0c <HAL_RCCEx_PeriphCLKConfig+0x480>
 8008cb6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008cba:	d822      	bhi.n	8008d02 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8008cbc:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8008cc0:	d026      	beq.n	8008d10 <HAL_RCCEx_PeriphCLKConfig+0x484>
 8008cc2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8008cc6:	d81c      	bhi.n	8008d02 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8008cc8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008ccc:	d010      	beq.n	8008cf0 <HAL_RCCEx_PeriphCLKConfig+0x464>
 8008cce:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008cd2:	d816      	bhi.n	8008d02 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8008cd4:	2b00      	cmp	r3, #0
 8008cd6:	d01d      	beq.n	8008d14 <HAL_RCCEx_PeriphCLKConfig+0x488>
 8008cd8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008cdc:	d111      	bne.n	8008d02 <HAL_RCCEx_PeriphCLKConfig+0x476>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	3304      	adds	r3, #4
 8008ce2:	2101      	movs	r1, #1
 8008ce4:	4618      	mov	r0, r3
 8008ce6:	f000 ffd5 	bl	8009c94 <RCCEx_PLL2_Config>
 8008cea:	4603      	mov	r3, r0
 8008cec:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8008cee:	e012      	b.n	8008d16 <HAL_RCCEx_PeriphCLKConfig+0x48a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	3324      	adds	r3, #36	; 0x24
 8008cf4:	2101      	movs	r1, #1
 8008cf6:	4618      	mov	r0, r3
 8008cf8:	f001 f87e 	bl	8009df8 <RCCEx_PLL3_Config>
 8008cfc:	4603      	mov	r3, r0
 8008cfe:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8008d00:	e009      	b.n	8008d16 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008d02:	2301      	movs	r3, #1
 8008d04:	75fb      	strb	r3, [r7, #23]
      break;
 8008d06:	e006      	b.n	8008d16 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8008d08:	bf00      	nop
 8008d0a:	e004      	b.n	8008d16 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8008d0c:	bf00      	nop
 8008d0e:	e002      	b.n	8008d16 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8008d10:	bf00      	nop
 8008d12:	e000      	b.n	8008d16 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8008d14:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008d16:	7dfb      	ldrb	r3, [r7, #23]
 8008d18:	2b00      	cmp	r3, #0
 8008d1a:	d109      	bne.n	8008d30 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8008d1c:	4b2d      	ldr	r3, [pc, #180]	; (8008dd4 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8008d1e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008d20:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008d28:	492a      	ldr	r1, [pc, #168]	; (8008dd4 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8008d2a:	4313      	orrs	r3, r2
 8008d2c:	650b      	str	r3, [r1, #80]	; 0x50
 8008d2e:	e001      	b.n	8008d34 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008d30:	7dfb      	ldrb	r3, [r7, #23]
 8008d32:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	681b      	ldr	r3, [r3, #0]
 8008d38:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008d3c:	2b00      	cmp	r3, #0
 8008d3e:	d04d      	beq.n	8008ddc <HAL_RCCEx_PeriphCLKConfig+0x550>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8008d46:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008d4a:	d02e      	beq.n	8008daa <HAL_RCCEx_PeriphCLKConfig+0x51e>
 8008d4c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008d50:	d828      	bhi.n	8008da4 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8008d52:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008d56:	d02a      	beq.n	8008dae <HAL_RCCEx_PeriphCLKConfig+0x522>
 8008d58:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008d5c:	d822      	bhi.n	8008da4 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8008d5e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008d62:	d026      	beq.n	8008db2 <HAL_RCCEx_PeriphCLKConfig+0x526>
 8008d64:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008d68:	d81c      	bhi.n	8008da4 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8008d6a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008d6e:	d010      	beq.n	8008d92 <HAL_RCCEx_PeriphCLKConfig+0x506>
 8008d70:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008d74:	d816      	bhi.n	8008da4 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8008d76:	2b00      	cmp	r3, #0
 8008d78:	d01d      	beq.n	8008db6 <HAL_RCCEx_PeriphCLKConfig+0x52a>
 8008d7a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008d7e:	d111      	bne.n	8008da4 <HAL_RCCEx_PeriphCLKConfig+0x518>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	3304      	adds	r3, #4
 8008d84:	2101      	movs	r1, #1
 8008d86:	4618      	mov	r0, r3
 8008d88:	f000 ff84 	bl	8009c94 <RCCEx_PLL2_Config>
 8008d8c:	4603      	mov	r3, r0
 8008d8e:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8008d90:	e012      	b.n	8008db8 <HAL_RCCEx_PeriphCLKConfig+0x52c>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	3324      	adds	r3, #36	; 0x24
 8008d96:	2101      	movs	r1, #1
 8008d98:	4618      	mov	r0, r3
 8008d9a:	f001 f82d 	bl	8009df8 <RCCEx_PLL3_Config>
 8008d9e:	4603      	mov	r3, r0
 8008da0:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8008da2:	e009      	b.n	8008db8 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8008da4:	2301      	movs	r3, #1
 8008da6:	75fb      	strb	r3, [r7, #23]
      break;
 8008da8:	e006      	b.n	8008db8 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8008daa:	bf00      	nop
 8008dac:	e004      	b.n	8008db8 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8008dae:	bf00      	nop
 8008db0:	e002      	b.n	8008db8 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8008db2:	bf00      	nop
 8008db4:	e000      	b.n	8008db8 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8008db6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008db8:	7dfb      	ldrb	r3, [r7, #23]
 8008dba:	2b00      	cmp	r3, #0
 8008dbc:	d10c      	bne.n	8008dd8 <HAL_RCCEx_PeriphCLKConfig+0x54c>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8008dbe:	4b05      	ldr	r3, [pc, #20]	; (8008dd4 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8008dc0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008dc2:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8008dcc:	4901      	ldr	r1, [pc, #4]	; (8008dd4 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8008dce:	4313      	orrs	r3, r2
 8008dd0:	658b      	str	r3, [r1, #88]	; 0x58
 8008dd2:	e003      	b.n	8008ddc <HAL_RCCEx_PeriphCLKConfig+0x550>
 8008dd4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008dd8:	7dfb      	ldrb	r3, [r7, #23]
 8008dda:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	681b      	ldr	r3, [r3, #0]
 8008de0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008de4:	2b00      	cmp	r3, #0
 8008de6:	d02f      	beq.n	8008e48 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008dec:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008df0:	d00e      	beq.n	8008e10 <HAL_RCCEx_PeriphCLKConfig+0x584>
 8008df2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008df6:	d814      	bhi.n	8008e22 <HAL_RCCEx_PeriphCLKConfig+0x596>
 8008df8:	2b00      	cmp	r3, #0
 8008dfa:	d015      	beq.n	8008e28 <HAL_RCCEx_PeriphCLKConfig+0x59c>
 8008dfc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008e00:	d10f      	bne.n	8008e22 <HAL_RCCEx_PeriphCLKConfig+0x596>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008e02:	4baf      	ldr	r3, [pc, #700]	; (80090c0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8008e04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e06:	4aae      	ldr	r2, [pc, #696]	; (80090c0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8008e08:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008e0c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8008e0e:	e00c      	b.n	8008e2a <HAL_RCCEx_PeriphCLKConfig+0x59e>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	3304      	adds	r3, #4
 8008e14:	2101      	movs	r1, #1
 8008e16:	4618      	mov	r0, r3
 8008e18:	f000 ff3c 	bl	8009c94 <RCCEx_PLL2_Config>
 8008e1c:	4603      	mov	r3, r0
 8008e1e:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8008e20:	e003      	b.n	8008e2a <HAL_RCCEx_PeriphCLKConfig+0x59e>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008e22:	2301      	movs	r3, #1
 8008e24:	75fb      	strb	r3, [r7, #23]
      break;
 8008e26:	e000      	b.n	8008e2a <HAL_RCCEx_PeriphCLKConfig+0x59e>
      break;
 8008e28:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008e2a:	7dfb      	ldrb	r3, [r7, #23]
 8008e2c:	2b00      	cmp	r3, #0
 8008e2e:	d109      	bne.n	8008e44 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8008e30:	4ba3      	ldr	r3, [pc, #652]	; (80090c0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8008e32:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008e34:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008e3c:	49a0      	ldr	r1, [pc, #640]	; (80090c0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8008e3e:	4313      	orrs	r3, r2
 8008e40:	650b      	str	r3, [r1, #80]	; 0x50
 8008e42:	e001      	b.n	8008e48 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008e44:	7dfb      	ldrb	r3, [r7, #23]
 8008e46:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	681b      	ldr	r3, [r3, #0]
 8008e4c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008e50:	2b00      	cmp	r3, #0
 8008e52:	d032      	beq.n	8008eba <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008e58:	2b03      	cmp	r3, #3
 8008e5a:	d81b      	bhi.n	8008e94 <HAL_RCCEx_PeriphCLKConfig+0x608>
 8008e5c:	a201      	add	r2, pc, #4	; (adr r2, 8008e64 <HAL_RCCEx_PeriphCLKConfig+0x5d8>)
 8008e5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e62:	bf00      	nop
 8008e64:	08008e9b 	.word	0x08008e9b
 8008e68:	08008e75 	.word	0x08008e75
 8008e6c:	08008e83 	.word	0x08008e83
 8008e70:	08008e9b 	.word	0x08008e9b
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008e74:	4b92      	ldr	r3, [pc, #584]	; (80090c0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8008e76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e78:	4a91      	ldr	r2, [pc, #580]	; (80090c0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8008e7a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008e7e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8008e80:	e00c      	b.n	8008e9c <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	3304      	adds	r3, #4
 8008e86:	2102      	movs	r1, #2
 8008e88:	4618      	mov	r0, r3
 8008e8a:	f000 ff03 	bl	8009c94 <RCCEx_PLL2_Config>
 8008e8e:	4603      	mov	r3, r0
 8008e90:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8008e92:	e003      	b.n	8008e9c <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8008e94:	2301      	movs	r3, #1
 8008e96:	75fb      	strb	r3, [r7, #23]
      break;
 8008e98:	e000      	b.n	8008e9c <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 8008e9a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008e9c:	7dfb      	ldrb	r3, [r7, #23]
 8008e9e:	2b00      	cmp	r3, #0
 8008ea0:	d109      	bne.n	8008eb6 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8008ea2:	4b87      	ldr	r3, [pc, #540]	; (80090c0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8008ea4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008ea6:	f023 0203 	bic.w	r2, r3, #3
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008eae:	4984      	ldr	r1, [pc, #528]	; (80090c0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8008eb0:	4313      	orrs	r3, r2
 8008eb2:	64cb      	str	r3, [r1, #76]	; 0x4c
 8008eb4:	e001      	b.n	8008eba <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008eb6:	7dfb      	ldrb	r3, [r7, #23]
 8008eb8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	681b      	ldr	r3, [r3, #0]
 8008ebe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008ec2:	2b00      	cmp	r3, #0
 8008ec4:	f000 8086 	beq.w	8008fd4 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008ec8:	4b7e      	ldr	r3, [pc, #504]	; (80090c4 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8008eca:	681b      	ldr	r3, [r3, #0]
 8008ecc:	4a7d      	ldr	r2, [pc, #500]	; (80090c4 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8008ece:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008ed2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8008ed4:	f7fd fc08 	bl	80066e8 <HAL_GetTick>
 8008ed8:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008eda:	e009      	b.n	8008ef0 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008edc:	f7fd fc04 	bl	80066e8 <HAL_GetTick>
 8008ee0:	4602      	mov	r2, r0
 8008ee2:	693b      	ldr	r3, [r7, #16]
 8008ee4:	1ad3      	subs	r3, r2, r3
 8008ee6:	2b64      	cmp	r3, #100	; 0x64
 8008ee8:	d902      	bls.n	8008ef0 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 8008eea:	2303      	movs	r3, #3
 8008eec:	75fb      	strb	r3, [r7, #23]
        break;
 8008eee:	e005      	b.n	8008efc <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008ef0:	4b74      	ldr	r3, [pc, #464]	; (80090c4 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8008ef2:	681b      	ldr	r3, [r3, #0]
 8008ef4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008ef8:	2b00      	cmp	r3, #0
 8008efa:	d0ef      	beq.n	8008edc <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8008efc:	7dfb      	ldrb	r3, [r7, #23]
 8008efe:	2b00      	cmp	r3, #0
 8008f00:	d166      	bne.n	8008fd0 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8008f02:	4b6f      	ldr	r3, [pc, #444]	; (80090c0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8008f04:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008f0c:	4053      	eors	r3, r2
 8008f0e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008f12:	2b00      	cmp	r3, #0
 8008f14:	d013      	beq.n	8008f3e <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8008f16:	4b6a      	ldr	r3, [pc, #424]	; (80090c0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8008f18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008f1a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008f1e:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8008f20:	4b67      	ldr	r3, [pc, #412]	; (80090c0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8008f22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008f24:	4a66      	ldr	r2, [pc, #408]	; (80090c0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8008f26:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008f2a:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8008f2c:	4b64      	ldr	r3, [pc, #400]	; (80090c0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8008f2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008f30:	4a63      	ldr	r2, [pc, #396]	; (80090c0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8008f32:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008f36:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8008f38:	4a61      	ldr	r2, [pc, #388]	; (80090c0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8008f3a:	68fb      	ldr	r3, [r7, #12]
 8008f3c:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008f44:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008f48:	d115      	bne.n	8008f76 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008f4a:	f7fd fbcd 	bl	80066e8 <HAL_GetTick>
 8008f4e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008f50:	e00b      	b.n	8008f6a <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008f52:	f7fd fbc9 	bl	80066e8 <HAL_GetTick>
 8008f56:	4602      	mov	r2, r0
 8008f58:	693b      	ldr	r3, [r7, #16]
 8008f5a:	1ad3      	subs	r3, r2, r3
 8008f5c:	f241 3288 	movw	r2, #5000	; 0x1388
 8008f60:	4293      	cmp	r3, r2
 8008f62:	d902      	bls.n	8008f6a <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8008f64:	2303      	movs	r3, #3
 8008f66:	75fb      	strb	r3, [r7, #23]
            break;
 8008f68:	e005      	b.n	8008f76 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008f6a:	4b55      	ldr	r3, [pc, #340]	; (80090c0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8008f6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008f6e:	f003 0302 	and.w	r3, r3, #2
 8008f72:	2b00      	cmp	r3, #0
 8008f74:	d0ed      	beq.n	8008f52 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 8008f76:	7dfb      	ldrb	r3, [r7, #23]
 8008f78:	2b00      	cmp	r3, #0
 8008f7a:	d126      	bne.n	8008fca <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008f82:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008f86:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008f8a:	d10d      	bne.n	8008fa8 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 8008f8c:	4b4c      	ldr	r3, [pc, #304]	; (80090c0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8008f8e:	691b      	ldr	r3, [r3, #16]
 8008f90:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008f9a:	0919      	lsrs	r1, r3, #4
 8008f9c:	4b4a      	ldr	r3, [pc, #296]	; (80090c8 <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 8008f9e:	400b      	ands	r3, r1
 8008fa0:	4947      	ldr	r1, [pc, #284]	; (80090c0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8008fa2:	4313      	orrs	r3, r2
 8008fa4:	610b      	str	r3, [r1, #16]
 8008fa6:	e005      	b.n	8008fb4 <HAL_RCCEx_PeriphCLKConfig+0x728>
 8008fa8:	4b45      	ldr	r3, [pc, #276]	; (80090c0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8008faa:	691b      	ldr	r3, [r3, #16]
 8008fac:	4a44      	ldr	r2, [pc, #272]	; (80090c0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8008fae:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8008fb2:	6113      	str	r3, [r2, #16]
 8008fb4:	4b42      	ldr	r3, [pc, #264]	; (80090c0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8008fb6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008fbe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008fc2:	493f      	ldr	r1, [pc, #252]	; (80090c0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8008fc4:	4313      	orrs	r3, r2
 8008fc6:	670b      	str	r3, [r1, #112]	; 0x70
 8008fc8:	e004      	b.n	8008fd4 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8008fca:	7dfb      	ldrb	r3, [r7, #23]
 8008fcc:	75bb      	strb	r3, [r7, #22]
 8008fce:	e001      	b.n	8008fd4 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008fd0:	7dfb      	ldrb	r3, [r7, #23]
 8008fd2:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	681b      	ldr	r3, [r3, #0]
 8008fd8:	f003 0301 	and.w	r3, r3, #1
 8008fdc:	2b00      	cmp	r3, #0
 8008fde:	f000 8085 	beq.w	80090ec <HAL_RCCEx_PeriphCLKConfig+0x860>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008fe6:	2b28      	cmp	r3, #40	; 0x28
 8008fe8:	d866      	bhi.n	80090b8 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 8008fea:	a201      	add	r2, pc, #4	; (adr r2, 8008ff0 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 8008fec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ff0:	080090cd 	.word	0x080090cd
 8008ff4:	080090b9 	.word	0x080090b9
 8008ff8:	080090b9 	.word	0x080090b9
 8008ffc:	080090b9 	.word	0x080090b9
 8009000:	080090b9 	.word	0x080090b9
 8009004:	080090b9 	.word	0x080090b9
 8009008:	080090b9 	.word	0x080090b9
 800900c:	080090b9 	.word	0x080090b9
 8009010:	08009095 	.word	0x08009095
 8009014:	080090b9 	.word	0x080090b9
 8009018:	080090b9 	.word	0x080090b9
 800901c:	080090b9 	.word	0x080090b9
 8009020:	080090b9 	.word	0x080090b9
 8009024:	080090b9 	.word	0x080090b9
 8009028:	080090b9 	.word	0x080090b9
 800902c:	080090b9 	.word	0x080090b9
 8009030:	080090a7 	.word	0x080090a7
 8009034:	080090b9 	.word	0x080090b9
 8009038:	080090b9 	.word	0x080090b9
 800903c:	080090b9 	.word	0x080090b9
 8009040:	080090b9 	.word	0x080090b9
 8009044:	080090b9 	.word	0x080090b9
 8009048:	080090b9 	.word	0x080090b9
 800904c:	080090b9 	.word	0x080090b9
 8009050:	080090cd 	.word	0x080090cd
 8009054:	080090b9 	.word	0x080090b9
 8009058:	080090b9 	.word	0x080090b9
 800905c:	080090b9 	.word	0x080090b9
 8009060:	080090b9 	.word	0x080090b9
 8009064:	080090b9 	.word	0x080090b9
 8009068:	080090b9 	.word	0x080090b9
 800906c:	080090b9 	.word	0x080090b9
 8009070:	080090cd 	.word	0x080090cd
 8009074:	080090b9 	.word	0x080090b9
 8009078:	080090b9 	.word	0x080090b9
 800907c:	080090b9 	.word	0x080090b9
 8009080:	080090b9 	.word	0x080090b9
 8009084:	080090b9 	.word	0x080090b9
 8009088:	080090b9 	.word	0x080090b9
 800908c:	080090b9 	.word	0x080090b9
 8009090:	080090cd 	.word	0x080090cd
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	3304      	adds	r3, #4
 8009098:	2101      	movs	r1, #1
 800909a:	4618      	mov	r0, r3
 800909c:	f000 fdfa 	bl	8009c94 <RCCEx_PLL2_Config>
 80090a0:	4603      	mov	r3, r0
 80090a2:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80090a4:	e013      	b.n	80090ce <HAL_RCCEx_PeriphCLKConfig+0x842>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	3324      	adds	r3, #36	; 0x24
 80090aa:	2101      	movs	r1, #1
 80090ac:	4618      	mov	r0, r3
 80090ae:	f000 fea3 	bl	8009df8 <RCCEx_PLL3_Config>
 80090b2:	4603      	mov	r3, r0
 80090b4:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80090b6:	e00a      	b.n	80090ce <HAL_RCCEx_PeriphCLKConfig+0x842>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80090b8:	2301      	movs	r3, #1
 80090ba:	75fb      	strb	r3, [r7, #23]
      break;
 80090bc:	e007      	b.n	80090ce <HAL_RCCEx_PeriphCLKConfig+0x842>
 80090be:	bf00      	nop
 80090c0:	58024400 	.word	0x58024400
 80090c4:	58024800 	.word	0x58024800
 80090c8:	00ffffcf 	.word	0x00ffffcf
      break;
 80090cc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80090ce:	7dfb      	ldrb	r3, [r7, #23]
 80090d0:	2b00      	cmp	r3, #0
 80090d2:	d109      	bne.n	80090e8 <HAL_RCCEx_PeriphCLKConfig+0x85c>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80090d4:	4b96      	ldr	r3, [pc, #600]	; (8009330 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80090d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80090d8:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80090e0:	4993      	ldr	r1, [pc, #588]	; (8009330 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80090e2:	4313      	orrs	r3, r2
 80090e4:	654b      	str	r3, [r1, #84]	; 0x54
 80090e6:	e001      	b.n	80090ec <HAL_RCCEx_PeriphCLKConfig+0x860>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80090e8:	7dfb      	ldrb	r3, [r7, #23]
 80090ea:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	681b      	ldr	r3, [r3, #0]
 80090f0:	f003 0302 	and.w	r3, r3, #2
 80090f4:	2b00      	cmp	r3, #0
 80090f6:	d038      	beq.n	800916a <HAL_RCCEx_PeriphCLKConfig+0x8de>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80090fc:	2b05      	cmp	r3, #5
 80090fe:	d821      	bhi.n	8009144 <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 8009100:	a201      	add	r2, pc, #4	; (adr r2, 8009108 <HAL_RCCEx_PeriphCLKConfig+0x87c>)
 8009102:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009106:	bf00      	nop
 8009108:	0800914b 	.word	0x0800914b
 800910c:	08009121 	.word	0x08009121
 8009110:	08009133 	.word	0x08009133
 8009114:	0800914b 	.word	0x0800914b
 8009118:	0800914b 	.word	0x0800914b
 800911c:	0800914b 	.word	0x0800914b
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	3304      	adds	r3, #4
 8009124:	2101      	movs	r1, #1
 8009126:	4618      	mov	r0, r3
 8009128:	f000 fdb4 	bl	8009c94 <RCCEx_PLL2_Config>
 800912c:	4603      	mov	r3, r0
 800912e:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8009130:	e00c      	b.n	800914c <HAL_RCCEx_PeriphCLKConfig+0x8c0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	3324      	adds	r3, #36	; 0x24
 8009136:	2101      	movs	r1, #1
 8009138:	4618      	mov	r0, r3
 800913a:	f000 fe5d 	bl	8009df8 <RCCEx_PLL3_Config>
 800913e:	4603      	mov	r3, r0
 8009140:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8009142:	e003      	b.n	800914c <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009144:	2301      	movs	r3, #1
 8009146:	75fb      	strb	r3, [r7, #23]
      break;
 8009148:	e000      	b.n	800914c <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      break;
 800914a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800914c:	7dfb      	ldrb	r3, [r7, #23]
 800914e:	2b00      	cmp	r3, #0
 8009150:	d109      	bne.n	8009166 <HAL_RCCEx_PeriphCLKConfig+0x8da>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8009152:	4b77      	ldr	r3, [pc, #476]	; (8009330 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8009154:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009156:	f023 0207 	bic.w	r2, r3, #7
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800915e:	4974      	ldr	r1, [pc, #464]	; (8009330 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8009160:	4313      	orrs	r3, r2
 8009162:	654b      	str	r3, [r1, #84]	; 0x54
 8009164:	e001      	b.n	800916a <HAL_RCCEx_PeriphCLKConfig+0x8de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009166:	7dfb      	ldrb	r3, [r7, #23]
 8009168:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	681b      	ldr	r3, [r3, #0]
 800916e:	f003 0304 	and.w	r3, r3, #4
 8009172:	2b00      	cmp	r3, #0
 8009174:	d03a      	beq.n	80091ec <HAL_RCCEx_PeriphCLKConfig+0x960>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800917c:	2b05      	cmp	r3, #5
 800917e:	d821      	bhi.n	80091c4 <HAL_RCCEx_PeriphCLKConfig+0x938>
 8009180:	a201      	add	r2, pc, #4	; (adr r2, 8009188 <HAL_RCCEx_PeriphCLKConfig+0x8fc>)
 8009182:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009186:	bf00      	nop
 8009188:	080091cb 	.word	0x080091cb
 800918c:	080091a1 	.word	0x080091a1
 8009190:	080091b3 	.word	0x080091b3
 8009194:	080091cb 	.word	0x080091cb
 8009198:	080091cb 	.word	0x080091cb
 800919c:	080091cb 	.word	0x080091cb
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	3304      	adds	r3, #4
 80091a4:	2101      	movs	r1, #1
 80091a6:	4618      	mov	r0, r3
 80091a8:	f000 fd74 	bl	8009c94 <RCCEx_PLL2_Config>
 80091ac:	4603      	mov	r3, r0
 80091ae:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80091b0:	e00c      	b.n	80091cc <HAL_RCCEx_PeriphCLKConfig+0x940>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	3324      	adds	r3, #36	; 0x24
 80091b6:	2101      	movs	r1, #1
 80091b8:	4618      	mov	r0, r3
 80091ba:	f000 fe1d 	bl	8009df8 <RCCEx_PLL3_Config>
 80091be:	4603      	mov	r3, r0
 80091c0:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80091c2:	e003      	b.n	80091cc <HAL_RCCEx_PeriphCLKConfig+0x940>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80091c4:	2301      	movs	r3, #1
 80091c6:	75fb      	strb	r3, [r7, #23]
      break;
 80091c8:	e000      	b.n	80091cc <HAL_RCCEx_PeriphCLKConfig+0x940>
      break;
 80091ca:	bf00      	nop
    }

    if(ret == HAL_OK)
 80091cc:	7dfb      	ldrb	r3, [r7, #23]
 80091ce:	2b00      	cmp	r3, #0
 80091d0:	d10a      	bne.n	80091e8 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80091d2:	4b57      	ldr	r3, [pc, #348]	; (8009330 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80091d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80091d6:	f023 0207 	bic.w	r2, r3, #7
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80091e0:	4953      	ldr	r1, [pc, #332]	; (8009330 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80091e2:	4313      	orrs	r3, r2
 80091e4:	658b      	str	r3, [r1, #88]	; 0x58
 80091e6:	e001      	b.n	80091ec <HAL_RCCEx_PeriphCLKConfig+0x960>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80091e8:	7dfb      	ldrb	r3, [r7, #23]
 80091ea:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	681b      	ldr	r3, [r3, #0]
 80091f0:	f003 0320 	and.w	r3, r3, #32
 80091f4:	2b00      	cmp	r3, #0
 80091f6:	d04b      	beq.n	8009290 <HAL_RCCEx_PeriphCLKConfig+0xa04>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80091fe:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009202:	d02e      	beq.n	8009262 <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8009204:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009208:	d828      	bhi.n	800925c <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 800920a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800920e:	d02a      	beq.n	8009266 <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8009210:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009214:	d822      	bhi.n	800925c <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8009216:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800921a:	d026      	beq.n	800926a <HAL_RCCEx_PeriphCLKConfig+0x9de>
 800921c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009220:	d81c      	bhi.n	800925c <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8009222:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009226:	d010      	beq.n	800924a <HAL_RCCEx_PeriphCLKConfig+0x9be>
 8009228:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800922c:	d816      	bhi.n	800925c <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 800922e:	2b00      	cmp	r3, #0
 8009230:	d01d      	beq.n	800926e <HAL_RCCEx_PeriphCLKConfig+0x9e2>
 8009232:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009236:	d111      	bne.n	800925c <HAL_RCCEx_PeriphCLKConfig+0x9d0>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	3304      	adds	r3, #4
 800923c:	2100      	movs	r1, #0
 800923e:	4618      	mov	r0, r3
 8009240:	f000 fd28 	bl	8009c94 <RCCEx_PLL2_Config>
 8009244:	4603      	mov	r3, r0
 8009246:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8009248:	e012      	b.n	8009270 <HAL_RCCEx_PeriphCLKConfig+0x9e4>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	3324      	adds	r3, #36	; 0x24
 800924e:	2102      	movs	r1, #2
 8009250:	4618      	mov	r0, r3
 8009252:	f000 fdd1 	bl	8009df8 <RCCEx_PLL3_Config>
 8009256:	4603      	mov	r3, r0
 8009258:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800925a:	e009      	b.n	8009270 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800925c:	2301      	movs	r3, #1
 800925e:	75fb      	strb	r3, [r7, #23]
      break;
 8009260:	e006      	b.n	8009270 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8009262:	bf00      	nop
 8009264:	e004      	b.n	8009270 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8009266:	bf00      	nop
 8009268:	e002      	b.n	8009270 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 800926a:	bf00      	nop
 800926c:	e000      	b.n	8009270 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 800926e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009270:	7dfb      	ldrb	r3, [r7, #23]
 8009272:	2b00      	cmp	r3, #0
 8009274:	d10a      	bne.n	800928c <HAL_RCCEx_PeriphCLKConfig+0xa00>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8009276:	4b2e      	ldr	r3, [pc, #184]	; (8009330 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8009278:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800927a:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009284:	492a      	ldr	r1, [pc, #168]	; (8009330 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8009286:	4313      	orrs	r3, r2
 8009288:	654b      	str	r3, [r1, #84]	; 0x54
 800928a:	e001      	b.n	8009290 <HAL_RCCEx_PeriphCLKConfig+0xa04>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800928c:	7dfb      	ldrb	r3, [r7, #23]
 800928e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	681b      	ldr	r3, [r3, #0]
 8009294:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009298:	2b00      	cmp	r3, #0
 800929a:	d04d      	beq.n	8009338 <HAL_RCCEx_PeriphCLKConfig+0xaac>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80092a2:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80092a6:	d02e      	beq.n	8009306 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 80092a8:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80092ac:	d828      	bhi.n	8009300 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 80092ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80092b2:	d02a      	beq.n	800930a <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 80092b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80092b8:	d822      	bhi.n	8009300 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 80092ba:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80092be:	d026      	beq.n	800930e <HAL_RCCEx_PeriphCLKConfig+0xa82>
 80092c0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80092c4:	d81c      	bhi.n	8009300 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 80092c6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80092ca:	d010      	beq.n	80092ee <HAL_RCCEx_PeriphCLKConfig+0xa62>
 80092cc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80092d0:	d816      	bhi.n	8009300 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 80092d2:	2b00      	cmp	r3, #0
 80092d4:	d01d      	beq.n	8009312 <HAL_RCCEx_PeriphCLKConfig+0xa86>
 80092d6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80092da:	d111      	bne.n	8009300 <HAL_RCCEx_PeriphCLKConfig+0xa74>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	3304      	adds	r3, #4
 80092e0:	2100      	movs	r1, #0
 80092e2:	4618      	mov	r0, r3
 80092e4:	f000 fcd6 	bl	8009c94 <RCCEx_PLL2_Config>
 80092e8:	4603      	mov	r3, r0
 80092ea:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80092ec:	e012      	b.n	8009314 <HAL_RCCEx_PeriphCLKConfig+0xa88>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	3324      	adds	r3, #36	; 0x24
 80092f2:	2102      	movs	r1, #2
 80092f4:	4618      	mov	r0, r3
 80092f6:	f000 fd7f 	bl	8009df8 <RCCEx_PLL3_Config>
 80092fa:	4603      	mov	r3, r0
 80092fc:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80092fe:	e009      	b.n	8009314 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009300:	2301      	movs	r3, #1
 8009302:	75fb      	strb	r3, [r7, #23]
      break;
 8009304:	e006      	b.n	8009314 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8009306:	bf00      	nop
 8009308:	e004      	b.n	8009314 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 800930a:	bf00      	nop
 800930c:	e002      	b.n	8009314 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 800930e:	bf00      	nop
 8009310:	e000      	b.n	8009314 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8009312:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009314:	7dfb      	ldrb	r3, [r7, #23]
 8009316:	2b00      	cmp	r3, #0
 8009318:	d10c      	bne.n	8009334 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800931a:	4b05      	ldr	r3, [pc, #20]	; (8009330 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800931c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800931e:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8009328:	4901      	ldr	r1, [pc, #4]	; (8009330 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800932a:	4313      	orrs	r3, r2
 800932c:	658b      	str	r3, [r1, #88]	; 0x58
 800932e:	e003      	b.n	8009338 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 8009330:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009334:	7dfb      	ldrb	r3, [r7, #23]
 8009336:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	681b      	ldr	r3, [r3, #0]
 800933c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009340:	2b00      	cmp	r3, #0
 8009342:	d04b      	beq.n	80093dc <HAL_RCCEx_PeriphCLKConfig+0xb50>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800934a:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800934e:	d02e      	beq.n	80093ae <HAL_RCCEx_PeriphCLKConfig+0xb22>
 8009350:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8009354:	d828      	bhi.n	80093a8 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8009356:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800935a:	d02a      	beq.n	80093b2 <HAL_RCCEx_PeriphCLKConfig+0xb26>
 800935c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009360:	d822      	bhi.n	80093a8 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8009362:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8009366:	d026      	beq.n	80093b6 <HAL_RCCEx_PeriphCLKConfig+0xb2a>
 8009368:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800936c:	d81c      	bhi.n	80093a8 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 800936e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009372:	d010      	beq.n	8009396 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 8009374:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009378:	d816      	bhi.n	80093a8 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 800937a:	2b00      	cmp	r3, #0
 800937c:	d01d      	beq.n	80093ba <HAL_RCCEx_PeriphCLKConfig+0xb2e>
 800937e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009382:	d111      	bne.n	80093a8 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	3304      	adds	r3, #4
 8009388:	2100      	movs	r1, #0
 800938a:	4618      	mov	r0, r3
 800938c:	f000 fc82 	bl	8009c94 <RCCEx_PLL2_Config>
 8009390:	4603      	mov	r3, r0
 8009392:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8009394:	e012      	b.n	80093bc <HAL_RCCEx_PeriphCLKConfig+0xb30>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	3324      	adds	r3, #36	; 0x24
 800939a:	2102      	movs	r1, #2
 800939c:	4618      	mov	r0, r3
 800939e:	f000 fd2b 	bl	8009df8 <RCCEx_PLL3_Config>
 80093a2:	4603      	mov	r3, r0
 80093a4:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80093a6:	e009      	b.n	80093bc <HAL_RCCEx_PeriphCLKConfig+0xb30>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80093a8:	2301      	movs	r3, #1
 80093aa:	75fb      	strb	r3, [r7, #23]
      break;
 80093ac:	e006      	b.n	80093bc <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 80093ae:	bf00      	nop
 80093b0:	e004      	b.n	80093bc <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 80093b2:	bf00      	nop
 80093b4:	e002      	b.n	80093bc <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 80093b6:	bf00      	nop
 80093b8:	e000      	b.n	80093bc <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 80093ba:	bf00      	nop
    }

    if(ret == HAL_OK)
 80093bc:	7dfb      	ldrb	r3, [r7, #23]
 80093be:	2b00      	cmp	r3, #0
 80093c0:	d10a      	bne.n	80093d8 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80093c2:	4b9d      	ldr	r3, [pc, #628]	; (8009638 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80093c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80093c6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80093d0:	4999      	ldr	r1, [pc, #612]	; (8009638 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80093d2:	4313      	orrs	r3, r2
 80093d4:	658b      	str	r3, [r1, #88]	; 0x58
 80093d6:	e001      	b.n	80093dc <HAL_RCCEx_PeriphCLKConfig+0xb50>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80093d8:	7dfb      	ldrb	r3, [r7, #23]
 80093da:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	681b      	ldr	r3, [r3, #0]
 80093e0:	f003 0308 	and.w	r3, r3, #8
 80093e4:	2b00      	cmp	r3, #0
 80093e6:	d01a      	beq.n	800941e <HAL_RCCEx_PeriphCLKConfig+0xb92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80093ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80093f2:	d10a      	bne.n	800940a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	3324      	adds	r3, #36	; 0x24
 80093f8:	2102      	movs	r1, #2
 80093fa:	4618      	mov	r0, r3
 80093fc:	f000 fcfc 	bl	8009df8 <RCCEx_PLL3_Config>
 8009400:	4603      	mov	r3, r0
 8009402:	2b00      	cmp	r3, #0
 8009404:	d001      	beq.n	800940a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        {
          status = HAL_ERROR;
 8009406:	2301      	movs	r3, #1
 8009408:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800940a:	4b8b      	ldr	r3, [pc, #556]	; (8009638 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800940c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800940e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009418:	4987      	ldr	r1, [pc, #540]	; (8009638 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800941a:	4313      	orrs	r3, r2
 800941c:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	681b      	ldr	r3, [r3, #0]
 8009422:	f003 0310 	and.w	r3, r3, #16
 8009426:	2b00      	cmp	r3, #0
 8009428:	d01a      	beq.n	8009460 <HAL_RCCEx_PeriphCLKConfig+0xbd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009430:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009434:	d10a      	bne.n	800944c <HAL_RCCEx_PeriphCLKConfig+0xbc0>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	3324      	adds	r3, #36	; 0x24
 800943a:	2102      	movs	r1, #2
 800943c:	4618      	mov	r0, r3
 800943e:	f000 fcdb 	bl	8009df8 <RCCEx_PLL3_Config>
 8009442:	4603      	mov	r3, r0
 8009444:	2b00      	cmp	r3, #0
 8009446:	d001      	beq.n	800944c <HAL_RCCEx_PeriphCLKConfig+0xbc0>
      {
        status = HAL_ERROR;
 8009448:	2301      	movs	r3, #1
 800944a:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800944c:	4b7a      	ldr	r3, [pc, #488]	; (8009638 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800944e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009450:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800945a:	4977      	ldr	r1, [pc, #476]	; (8009638 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800945c:	4313      	orrs	r3, r2
 800945e:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	681b      	ldr	r3, [r3, #0]
 8009464:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8009468:	2b00      	cmp	r3, #0
 800946a:	d034      	beq.n	80094d6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {
    switch(PeriphClkInit->AdcClockSelection)
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8009472:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009476:	d01d      	beq.n	80094b4 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 8009478:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800947c:	d817      	bhi.n	80094ae <HAL_RCCEx_PeriphCLKConfig+0xc22>
 800947e:	2b00      	cmp	r3, #0
 8009480:	d003      	beq.n	800948a <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 8009482:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009486:	d009      	beq.n	800949c <HAL_RCCEx_PeriphCLKConfig+0xc10>
 8009488:	e011      	b.n	80094ae <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	3304      	adds	r3, #4
 800948e:	2100      	movs	r1, #0
 8009490:	4618      	mov	r0, r3
 8009492:	f000 fbff 	bl	8009c94 <RCCEx_PLL2_Config>
 8009496:	4603      	mov	r3, r0
 8009498:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800949a:	e00c      	b.n	80094b6 <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	3324      	adds	r3, #36	; 0x24
 80094a0:	2102      	movs	r1, #2
 80094a2:	4618      	mov	r0, r3
 80094a4:	f000 fca8 	bl	8009df8 <RCCEx_PLL3_Config>
 80094a8:	4603      	mov	r3, r0
 80094aa:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80094ac:	e003      	b.n	80094b6 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80094ae:	2301      	movs	r3, #1
 80094b0:	75fb      	strb	r3, [r7, #23]
      break;
 80094b2:	e000      	b.n	80094b6 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 80094b4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80094b6:	7dfb      	ldrb	r3, [r7, #23]
 80094b8:	2b00      	cmp	r3, #0
 80094ba:	d10a      	bne.n	80094d2 <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80094bc:	4b5e      	ldr	r3, [pc, #376]	; (8009638 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80094be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80094c0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80094ca:	495b      	ldr	r1, [pc, #364]	; (8009638 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80094cc:	4313      	orrs	r3, r2
 80094ce:	658b      	str	r3, [r1, #88]	; 0x58
 80094d0:	e001      	b.n	80094d6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80094d2:	7dfb      	ldrb	r3, [r7, #23]
 80094d4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	681b      	ldr	r3, [r3, #0]
 80094da:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80094de:	2b00      	cmp	r3, #0
 80094e0:	d033      	beq.n	800954a <HAL_RCCEx_PeriphCLKConfig+0xcbe>
  {

    switch(PeriphClkInit->UsbClockSelection)
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80094e8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80094ec:	d01c      	beq.n	8009528 <HAL_RCCEx_PeriphCLKConfig+0xc9c>
 80094ee:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80094f2:	d816      	bhi.n	8009522 <HAL_RCCEx_PeriphCLKConfig+0xc96>
 80094f4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80094f8:	d003      	beq.n	8009502 <HAL_RCCEx_PeriphCLKConfig+0xc76>
 80094fa:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80094fe:	d007      	beq.n	8009510 <HAL_RCCEx_PeriphCLKConfig+0xc84>
 8009500:	e00f      	b.n	8009522 <HAL_RCCEx_PeriphCLKConfig+0xc96>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009502:	4b4d      	ldr	r3, [pc, #308]	; (8009638 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009504:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009506:	4a4c      	ldr	r2, [pc, #304]	; (8009638 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009508:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800950c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 800950e:	e00c      	b.n	800952a <HAL_RCCEx_PeriphCLKConfig+0xc9e>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	3324      	adds	r3, #36	; 0x24
 8009514:	2101      	movs	r1, #1
 8009516:	4618      	mov	r0, r3
 8009518:	f000 fc6e 	bl	8009df8 <RCCEx_PLL3_Config>
 800951c:	4603      	mov	r3, r0
 800951e:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8009520:	e003      	b.n	800952a <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009522:	2301      	movs	r3, #1
 8009524:	75fb      	strb	r3, [r7, #23]
      break;
 8009526:	e000      	b.n	800952a <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      break;
 8009528:	bf00      	nop
    }

    if(ret == HAL_OK)
 800952a:	7dfb      	ldrb	r3, [r7, #23]
 800952c:	2b00      	cmp	r3, #0
 800952e:	d10a      	bne.n	8009546 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8009530:	4b41      	ldr	r3, [pc, #260]	; (8009638 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009532:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009534:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800953e:	493e      	ldr	r1, [pc, #248]	; (8009638 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009540:	4313      	orrs	r3, r2
 8009542:	654b      	str	r3, [r1, #84]	; 0x54
 8009544:	e001      	b.n	800954a <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009546:	7dfb      	ldrb	r3, [r7, #23]
 8009548:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	681b      	ldr	r3, [r3, #0]
 800954e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009552:	2b00      	cmp	r3, #0
 8009554:	d029      	beq.n	80095aa <HAL_RCCEx_PeriphCLKConfig+0xd1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800955a:	2b00      	cmp	r3, #0
 800955c:	d003      	beq.n	8009566 <HAL_RCCEx_PeriphCLKConfig+0xcda>
 800955e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009562:	d007      	beq.n	8009574 <HAL_RCCEx_PeriphCLKConfig+0xce8>
 8009564:	e00f      	b.n	8009586 <HAL_RCCEx_PeriphCLKConfig+0xcfa>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009566:	4b34      	ldr	r3, [pc, #208]	; (8009638 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009568:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800956a:	4a33      	ldr	r2, [pc, #204]	; (8009638 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800956c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009570:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8009572:	e00b      	b.n	800958c <HAL_RCCEx_PeriphCLKConfig+0xd00>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	3304      	adds	r3, #4
 8009578:	2102      	movs	r1, #2
 800957a:	4618      	mov	r0, r3
 800957c:	f000 fb8a 	bl	8009c94 <RCCEx_PLL2_Config>
 8009580:	4603      	mov	r3, r0
 8009582:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8009584:	e002      	b.n	800958c <HAL_RCCEx_PeriphCLKConfig+0xd00>

    default:
      ret = HAL_ERROR;
 8009586:	2301      	movs	r3, #1
 8009588:	75fb      	strb	r3, [r7, #23]
      break;
 800958a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800958c:	7dfb      	ldrb	r3, [r7, #23]
 800958e:	2b00      	cmp	r3, #0
 8009590:	d109      	bne.n	80095a6 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8009592:	4b29      	ldr	r3, [pc, #164]	; (8009638 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009594:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009596:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800959e:	4926      	ldr	r1, [pc, #152]	; (8009638 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80095a0:	4313      	orrs	r3, r2
 80095a2:	64cb      	str	r3, [r1, #76]	; 0x4c
 80095a4:	e001      	b.n	80095aa <HAL_RCCEx_PeriphCLKConfig+0xd1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80095a6:	7dfb      	ldrb	r3, [r7, #23]
 80095a8:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	681b      	ldr	r3, [r3, #0]
 80095ae:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80095b2:	2b00      	cmp	r3, #0
 80095b4:	d00a      	beq.n	80095cc <HAL_RCCEx_PeriphCLKConfig+0xd40>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	3324      	adds	r3, #36	; 0x24
 80095ba:	2102      	movs	r1, #2
 80095bc:	4618      	mov	r0, r3
 80095be:	f000 fc1b 	bl	8009df8 <RCCEx_PLL3_Config>
 80095c2:	4603      	mov	r3, r0
 80095c4:	2b00      	cmp	r3, #0
 80095c6:	d001      	beq.n	80095cc <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      status=HAL_ERROR;
 80095c8:	2301      	movs	r3, #1
 80095ca:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	681b      	ldr	r3, [r3, #0]
 80095d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80095d4:	2b00      	cmp	r3, #0
 80095d6:	d033      	beq.n	8009640 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
  {

    switch(PeriphClkInit->RngClockSelection)
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80095dc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80095e0:	d017      	beq.n	8009612 <HAL_RCCEx_PeriphCLKConfig+0xd86>
 80095e2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80095e6:	d811      	bhi.n	800960c <HAL_RCCEx_PeriphCLKConfig+0xd80>
 80095e8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80095ec:	d013      	beq.n	8009616 <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 80095ee:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80095f2:	d80b      	bhi.n	800960c <HAL_RCCEx_PeriphCLKConfig+0xd80>
 80095f4:	2b00      	cmp	r3, #0
 80095f6:	d010      	beq.n	800961a <HAL_RCCEx_PeriphCLKConfig+0xd8e>
 80095f8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80095fc:	d106      	bne.n	800960c <HAL_RCCEx_PeriphCLKConfig+0xd80>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80095fe:	4b0e      	ldr	r3, [pc, #56]	; (8009638 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009600:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009602:	4a0d      	ldr	r2, [pc, #52]	; (8009638 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009604:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009608:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 800960a:	e007      	b.n	800961c <HAL_RCCEx_PeriphCLKConfig+0xd90>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800960c:	2301      	movs	r3, #1
 800960e:	75fb      	strb	r3, [r7, #23]
      break;
 8009610:	e004      	b.n	800961c <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8009612:	bf00      	nop
 8009614:	e002      	b.n	800961c <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8009616:	bf00      	nop
 8009618:	e000      	b.n	800961c <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 800961a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800961c:	7dfb      	ldrb	r3, [r7, #23]
 800961e:	2b00      	cmp	r3, #0
 8009620:	d10c      	bne.n	800963c <HAL_RCCEx_PeriphCLKConfig+0xdb0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8009622:	4b05      	ldr	r3, [pc, #20]	; (8009638 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009624:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009626:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800962e:	4902      	ldr	r1, [pc, #8]	; (8009638 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009630:	4313      	orrs	r3, r2
 8009632:	654b      	str	r3, [r1, #84]	; 0x54
 8009634:	e004      	b.n	8009640 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
 8009636:	bf00      	nop
 8009638:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800963c:	7dfb      	ldrb	r3, [r7, #23]
 800963e:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	681b      	ldr	r3, [r3, #0]
 8009644:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009648:	2b00      	cmp	r3, #0
 800964a:	d008      	beq.n	800965e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800964c:	4b31      	ldr	r3, [pc, #196]	; (8009714 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800964e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009650:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009658:	492e      	ldr	r1, [pc, #184]	; (8009714 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800965a:	4313      	orrs	r3, r2
 800965c:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	681b      	ldr	r3, [r3, #0]
 8009662:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009666:	2b00      	cmp	r3, #0
 8009668:	d009      	beq.n	800967e <HAL_RCCEx_PeriphCLKConfig+0xdf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800966a:	4b2a      	ldr	r3, [pc, #168]	; (8009714 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800966c:	691b      	ldr	r3, [r3, #16]
 800966e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8009678:	4926      	ldr	r1, [pc, #152]	; (8009714 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800967a:	4313      	orrs	r3, r2
 800967c:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	681b      	ldr	r3, [r3, #0]
 8009682:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009686:	2b00      	cmp	r3, #0
 8009688:	d008      	beq.n	800969c <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800968a:	4b22      	ldr	r3, [pc, #136]	; (8009714 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800968c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800968e:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009696:	491f      	ldr	r1, [pc, #124]	; (8009714 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8009698:	4313      	orrs	r3, r2
 800969a:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	681b      	ldr	r3, [r3, #0]
 80096a0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80096a4:	2b00      	cmp	r3, #0
 80096a6:	d00d      	beq.n	80096c4 <HAL_RCCEx_PeriphCLKConfig+0xe38>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80096a8:	4b1a      	ldr	r3, [pc, #104]	; (8009714 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80096aa:	691b      	ldr	r3, [r3, #16]
 80096ac:	4a19      	ldr	r2, [pc, #100]	; (8009714 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80096ae:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80096b2:	6113      	str	r3, [r2, #16]
 80096b4:	4b17      	ldr	r3, [pc, #92]	; (8009714 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80096b6:	691a      	ldr	r2, [r3, #16]
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80096be:	4915      	ldr	r1, [pc, #84]	; (8009714 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80096c0:	4313      	orrs	r3, r2
 80096c2:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	681b      	ldr	r3, [r3, #0]
 80096c8:	2b00      	cmp	r3, #0
 80096ca:	da08      	bge.n	80096de <HAL_RCCEx_PeriphCLKConfig+0xe52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80096cc:	4b11      	ldr	r3, [pc, #68]	; (8009714 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80096ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80096d0:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80096d8:	490e      	ldr	r1, [pc, #56]	; (8009714 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80096da:	4313      	orrs	r3, r2
 80096dc:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	681b      	ldr	r3, [r3, #0]
 80096e2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80096e6:	2b00      	cmp	r3, #0
 80096e8:	d009      	beq.n	80096fe <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80096ea:	4b0a      	ldr	r3, [pc, #40]	; (8009714 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80096ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80096ee:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80096f8:	4906      	ldr	r1, [pc, #24]	; (8009714 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80096fa:	4313      	orrs	r3, r2
 80096fc:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 80096fe:	7dbb      	ldrb	r3, [r7, #22]
 8009700:	2b00      	cmp	r3, #0
 8009702:	d101      	bne.n	8009708 <HAL_RCCEx_PeriphCLKConfig+0xe7c>
  {
    return HAL_OK;
 8009704:	2300      	movs	r3, #0
 8009706:	e000      	b.n	800970a <HAL_RCCEx_PeriphCLKConfig+0xe7e>
  }
  return HAL_ERROR;
 8009708:	2301      	movs	r3, #1
}
 800970a:	4618      	mov	r0, r3
 800970c:	3718      	adds	r7, #24
 800970e:	46bd      	mov	sp, r7
 8009710:	bd80      	pop	{r7, pc}
 8009712:	bf00      	nop
 8009714:	58024400 	.word	0x58024400

08009718 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8009718:	b580      	push	{r7, lr}
 800971a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800971c:	f7ff f85a 	bl	80087d4 <HAL_RCC_GetHCLKFreq>
 8009720:	4602      	mov	r2, r0
 8009722:	4b06      	ldr	r3, [pc, #24]	; (800973c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8009724:	6a1b      	ldr	r3, [r3, #32]
 8009726:	091b      	lsrs	r3, r3, #4
 8009728:	f003 0307 	and.w	r3, r3, #7
 800972c:	4904      	ldr	r1, [pc, #16]	; (8009740 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800972e:	5ccb      	ldrb	r3, [r1, r3]
 8009730:	f003 031f 	and.w	r3, r3, #31
 8009734:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8009738:	4618      	mov	r0, r3
 800973a:	bd80      	pop	{r7, pc}
 800973c:	58024400 	.word	0x58024400
 8009740:	0801223c 	.word	0x0801223c

08009744 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8009744:	b480      	push	{r7}
 8009746:	b089      	sub	sp, #36	; 0x24
 8009748:	af00      	add	r7, sp, #0
 800974a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800974c:	4ba1      	ldr	r3, [pc, #644]	; (80099d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800974e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009750:	f003 0303 	and.w	r3, r3, #3
 8009754:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8009756:	4b9f      	ldr	r3, [pc, #636]	; (80099d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009758:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800975a:	0b1b      	lsrs	r3, r3, #12
 800975c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009760:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8009762:	4b9c      	ldr	r3, [pc, #624]	; (80099d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009764:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009766:	091b      	lsrs	r3, r3, #4
 8009768:	f003 0301 	and.w	r3, r3, #1
 800976c:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800976e:	4b99      	ldr	r3, [pc, #612]	; (80099d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009770:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009772:	08db      	lsrs	r3, r3, #3
 8009774:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009778:	693a      	ldr	r2, [r7, #16]
 800977a:	fb02 f303 	mul.w	r3, r2, r3
 800977e:	ee07 3a90 	vmov	s15, r3
 8009782:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009786:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800978a:	697b      	ldr	r3, [r7, #20]
 800978c:	2b00      	cmp	r3, #0
 800978e:	f000 8111 	beq.w	80099b4 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8009792:	69bb      	ldr	r3, [r7, #24]
 8009794:	2b02      	cmp	r3, #2
 8009796:	f000 8083 	beq.w	80098a0 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800979a:	69bb      	ldr	r3, [r7, #24]
 800979c:	2b02      	cmp	r3, #2
 800979e:	f200 80a1 	bhi.w	80098e4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80097a2:	69bb      	ldr	r3, [r7, #24]
 80097a4:	2b00      	cmp	r3, #0
 80097a6:	d003      	beq.n	80097b0 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80097a8:	69bb      	ldr	r3, [r7, #24]
 80097aa:	2b01      	cmp	r3, #1
 80097ac:	d056      	beq.n	800985c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80097ae:	e099      	b.n	80098e4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80097b0:	4b88      	ldr	r3, [pc, #544]	; (80099d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80097b2:	681b      	ldr	r3, [r3, #0]
 80097b4:	f003 0320 	and.w	r3, r3, #32
 80097b8:	2b00      	cmp	r3, #0
 80097ba:	d02d      	beq.n	8009818 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80097bc:	4b85      	ldr	r3, [pc, #532]	; (80099d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80097be:	681b      	ldr	r3, [r3, #0]
 80097c0:	08db      	lsrs	r3, r3, #3
 80097c2:	f003 0303 	and.w	r3, r3, #3
 80097c6:	4a84      	ldr	r2, [pc, #528]	; (80099d8 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80097c8:	fa22 f303 	lsr.w	r3, r2, r3
 80097cc:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80097ce:	68bb      	ldr	r3, [r7, #8]
 80097d0:	ee07 3a90 	vmov	s15, r3
 80097d4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80097d8:	697b      	ldr	r3, [r7, #20]
 80097da:	ee07 3a90 	vmov	s15, r3
 80097de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80097e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80097e6:	4b7b      	ldr	r3, [pc, #492]	; (80099d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80097e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80097ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80097ee:	ee07 3a90 	vmov	s15, r3
 80097f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80097f6:	ed97 6a03 	vldr	s12, [r7, #12]
 80097fa:	eddf 5a78 	vldr	s11, [pc, #480]	; 80099dc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80097fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009802:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009806:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800980a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800980e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009812:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8009816:	e087      	b.n	8009928 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8009818:	697b      	ldr	r3, [r7, #20]
 800981a:	ee07 3a90 	vmov	s15, r3
 800981e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009822:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80099e0 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8009826:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800982a:	4b6a      	ldr	r3, [pc, #424]	; (80099d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800982c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800982e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009832:	ee07 3a90 	vmov	s15, r3
 8009836:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800983a:	ed97 6a03 	vldr	s12, [r7, #12]
 800983e:	eddf 5a67 	vldr	s11, [pc, #412]	; 80099dc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009842:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009846:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800984a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800984e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009852:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009856:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800985a:	e065      	b.n	8009928 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800985c:	697b      	ldr	r3, [r7, #20]
 800985e:	ee07 3a90 	vmov	s15, r3
 8009862:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009866:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80099e4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800986a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800986e:	4b59      	ldr	r3, [pc, #356]	; (80099d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009870:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009872:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009876:	ee07 3a90 	vmov	s15, r3
 800987a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800987e:	ed97 6a03 	vldr	s12, [r7, #12]
 8009882:	eddf 5a56 	vldr	s11, [pc, #344]	; 80099dc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009886:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800988a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800988e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009892:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009896:	ee67 7a27 	vmul.f32	s15, s14, s15
 800989a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800989e:	e043      	b.n	8009928 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80098a0:	697b      	ldr	r3, [r7, #20]
 80098a2:	ee07 3a90 	vmov	s15, r3
 80098a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80098aa:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80099e8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80098ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80098b2:	4b48      	ldr	r3, [pc, #288]	; (80099d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80098b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80098b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80098ba:	ee07 3a90 	vmov	s15, r3
 80098be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80098c2:	ed97 6a03 	vldr	s12, [r7, #12]
 80098c6:	eddf 5a45 	vldr	s11, [pc, #276]	; 80099dc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80098ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80098ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80098d2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80098d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80098da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80098de:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80098e2:	e021      	b.n	8009928 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80098e4:	697b      	ldr	r3, [r7, #20]
 80098e6:	ee07 3a90 	vmov	s15, r3
 80098ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80098ee:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80099e4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80098f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80098f6:	4b37      	ldr	r3, [pc, #220]	; (80099d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80098f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80098fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80098fe:	ee07 3a90 	vmov	s15, r3
 8009902:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009906:	ed97 6a03 	vldr	s12, [r7, #12]
 800990a:	eddf 5a34 	vldr	s11, [pc, #208]	; 80099dc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800990e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009912:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009916:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800991a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800991e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009922:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009926:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8009928:	4b2a      	ldr	r3, [pc, #168]	; (80099d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800992a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800992c:	0a5b      	lsrs	r3, r3, #9
 800992e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009932:	ee07 3a90 	vmov	s15, r3
 8009936:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800993a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800993e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009942:	edd7 6a07 	vldr	s13, [r7, #28]
 8009946:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800994a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800994e:	ee17 2a90 	vmov	r2, s15
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8009956:	4b1f      	ldr	r3, [pc, #124]	; (80099d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009958:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800995a:	0c1b      	lsrs	r3, r3, #16
 800995c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009960:	ee07 3a90 	vmov	s15, r3
 8009964:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009968:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800996c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009970:	edd7 6a07 	vldr	s13, [r7, #28]
 8009974:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009978:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800997c:	ee17 2a90 	vmov	r2, s15
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8009984:	4b13      	ldr	r3, [pc, #76]	; (80099d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009986:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009988:	0e1b      	lsrs	r3, r3, #24
 800998a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800998e:	ee07 3a90 	vmov	s15, r3
 8009992:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009996:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800999a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800999e:	edd7 6a07 	vldr	s13, [r7, #28]
 80099a2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80099a6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80099aa:	ee17 2a90 	vmov	r2, s15
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80099b2:	e008      	b.n	80099c6 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	2200      	movs	r2, #0
 80099b8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	2200      	movs	r2, #0
 80099be:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	2200      	movs	r2, #0
 80099c4:	609a      	str	r2, [r3, #8]
}
 80099c6:	bf00      	nop
 80099c8:	3724      	adds	r7, #36	; 0x24
 80099ca:	46bd      	mov	sp, r7
 80099cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099d0:	4770      	bx	lr
 80099d2:	bf00      	nop
 80099d4:	58024400 	.word	0x58024400
 80099d8:	03d09000 	.word	0x03d09000
 80099dc:	46000000 	.word	0x46000000
 80099e0:	4c742400 	.word	0x4c742400
 80099e4:	4a742400 	.word	0x4a742400
 80099e8:	4bbebc20 	.word	0x4bbebc20

080099ec <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 80099ec:	b480      	push	{r7}
 80099ee:	b089      	sub	sp, #36	; 0x24
 80099f0:	af00      	add	r7, sp, #0
 80099f2:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80099f4:	4ba1      	ldr	r3, [pc, #644]	; (8009c7c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80099f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80099f8:	f003 0303 	and.w	r3, r3, #3
 80099fc:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 80099fe:	4b9f      	ldr	r3, [pc, #636]	; (8009c7c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009a00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009a02:	0d1b      	lsrs	r3, r3, #20
 8009a04:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009a08:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8009a0a:	4b9c      	ldr	r3, [pc, #624]	; (8009c7c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009a0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a0e:	0a1b      	lsrs	r3, r3, #8
 8009a10:	f003 0301 	and.w	r3, r3, #1
 8009a14:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8009a16:	4b99      	ldr	r3, [pc, #612]	; (8009c7c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009a18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009a1a:	08db      	lsrs	r3, r3, #3
 8009a1c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009a20:	693a      	ldr	r2, [r7, #16]
 8009a22:	fb02 f303 	mul.w	r3, r2, r3
 8009a26:	ee07 3a90 	vmov	s15, r3
 8009a2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009a2e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8009a32:	697b      	ldr	r3, [r7, #20]
 8009a34:	2b00      	cmp	r3, #0
 8009a36:	f000 8111 	beq.w	8009c5c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8009a3a:	69bb      	ldr	r3, [r7, #24]
 8009a3c:	2b02      	cmp	r3, #2
 8009a3e:	f000 8083 	beq.w	8009b48 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8009a42:	69bb      	ldr	r3, [r7, #24]
 8009a44:	2b02      	cmp	r3, #2
 8009a46:	f200 80a1 	bhi.w	8009b8c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8009a4a:	69bb      	ldr	r3, [r7, #24]
 8009a4c:	2b00      	cmp	r3, #0
 8009a4e:	d003      	beq.n	8009a58 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8009a50:	69bb      	ldr	r3, [r7, #24]
 8009a52:	2b01      	cmp	r3, #1
 8009a54:	d056      	beq.n	8009b04 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8009a56:	e099      	b.n	8009b8c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009a58:	4b88      	ldr	r3, [pc, #544]	; (8009c7c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009a5a:	681b      	ldr	r3, [r3, #0]
 8009a5c:	f003 0320 	and.w	r3, r3, #32
 8009a60:	2b00      	cmp	r3, #0
 8009a62:	d02d      	beq.n	8009ac0 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009a64:	4b85      	ldr	r3, [pc, #532]	; (8009c7c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009a66:	681b      	ldr	r3, [r3, #0]
 8009a68:	08db      	lsrs	r3, r3, #3
 8009a6a:	f003 0303 	and.w	r3, r3, #3
 8009a6e:	4a84      	ldr	r2, [pc, #528]	; (8009c80 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8009a70:	fa22 f303 	lsr.w	r3, r2, r3
 8009a74:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009a76:	68bb      	ldr	r3, [r7, #8]
 8009a78:	ee07 3a90 	vmov	s15, r3
 8009a7c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009a80:	697b      	ldr	r3, [r7, #20]
 8009a82:	ee07 3a90 	vmov	s15, r3
 8009a86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009a8a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009a8e:	4b7b      	ldr	r3, [pc, #492]	; (8009c7c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009a90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a92:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009a96:	ee07 3a90 	vmov	s15, r3
 8009a9a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009a9e:	ed97 6a03 	vldr	s12, [r7, #12]
 8009aa2:	eddf 5a78 	vldr	s11, [pc, #480]	; 8009c84 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009aa6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009aaa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009aae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009ab2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009ab6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009aba:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8009abe:	e087      	b.n	8009bd0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009ac0:	697b      	ldr	r3, [r7, #20]
 8009ac2:	ee07 3a90 	vmov	s15, r3
 8009ac6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009aca:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8009c88 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8009ace:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009ad2:	4b6a      	ldr	r3, [pc, #424]	; (8009c7c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009ad4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ad6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009ada:	ee07 3a90 	vmov	s15, r3
 8009ade:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009ae2:	ed97 6a03 	vldr	s12, [r7, #12]
 8009ae6:	eddf 5a67 	vldr	s11, [pc, #412]	; 8009c84 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009aea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009aee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009af2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009af6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009afa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009afe:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009b02:	e065      	b.n	8009bd0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009b04:	697b      	ldr	r3, [r7, #20]
 8009b06:	ee07 3a90 	vmov	s15, r3
 8009b0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009b0e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8009c8c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8009b12:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009b16:	4b59      	ldr	r3, [pc, #356]	; (8009c7c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009b18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b1a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009b1e:	ee07 3a90 	vmov	s15, r3
 8009b22:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009b26:	ed97 6a03 	vldr	s12, [r7, #12]
 8009b2a:	eddf 5a56 	vldr	s11, [pc, #344]	; 8009c84 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009b2e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009b32:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009b36:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009b3a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009b3e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009b42:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009b46:	e043      	b.n	8009bd0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009b48:	697b      	ldr	r3, [r7, #20]
 8009b4a:	ee07 3a90 	vmov	s15, r3
 8009b4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009b52:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8009c90 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8009b56:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009b5a:	4b48      	ldr	r3, [pc, #288]	; (8009c7c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009b5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b5e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009b62:	ee07 3a90 	vmov	s15, r3
 8009b66:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009b6a:	ed97 6a03 	vldr	s12, [r7, #12]
 8009b6e:	eddf 5a45 	vldr	s11, [pc, #276]	; 8009c84 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009b72:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009b76:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009b7a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009b7e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009b82:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009b86:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009b8a:	e021      	b.n	8009bd0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009b8c:	697b      	ldr	r3, [r7, #20]
 8009b8e:	ee07 3a90 	vmov	s15, r3
 8009b92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009b96:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8009c8c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8009b9a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009b9e:	4b37      	ldr	r3, [pc, #220]	; (8009c7c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009ba0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ba2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009ba6:	ee07 3a90 	vmov	s15, r3
 8009baa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009bae:	ed97 6a03 	vldr	s12, [r7, #12]
 8009bb2:	eddf 5a34 	vldr	s11, [pc, #208]	; 8009c84 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009bb6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009bba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009bbe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009bc2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009bc6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009bca:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009bce:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8009bd0:	4b2a      	ldr	r3, [pc, #168]	; (8009c7c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009bd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009bd4:	0a5b      	lsrs	r3, r3, #9
 8009bd6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009bda:	ee07 3a90 	vmov	s15, r3
 8009bde:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009be2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009be6:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009bea:	edd7 6a07 	vldr	s13, [r7, #28]
 8009bee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009bf2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009bf6:	ee17 2a90 	vmov	r2, s15
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8009bfe:	4b1f      	ldr	r3, [pc, #124]	; (8009c7c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009c00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c02:	0c1b      	lsrs	r3, r3, #16
 8009c04:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009c08:	ee07 3a90 	vmov	s15, r3
 8009c0c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009c10:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009c14:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009c18:	edd7 6a07 	vldr	s13, [r7, #28]
 8009c1c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009c20:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009c24:	ee17 2a90 	vmov	r2, s15
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8009c2c:	4b13      	ldr	r3, [pc, #76]	; (8009c7c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009c2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c30:	0e1b      	lsrs	r3, r3, #24
 8009c32:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009c36:	ee07 3a90 	vmov	s15, r3
 8009c3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009c3e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009c42:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009c46:	edd7 6a07 	vldr	s13, [r7, #28]
 8009c4a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009c4e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009c52:	ee17 2a90 	vmov	r2, s15
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8009c5a:	e008      	b.n	8009c6e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	2200      	movs	r2, #0
 8009c60:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	2200      	movs	r2, #0
 8009c66:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	2200      	movs	r2, #0
 8009c6c:	609a      	str	r2, [r3, #8]
}
 8009c6e:	bf00      	nop
 8009c70:	3724      	adds	r7, #36	; 0x24
 8009c72:	46bd      	mov	sp, r7
 8009c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c78:	4770      	bx	lr
 8009c7a:	bf00      	nop
 8009c7c:	58024400 	.word	0x58024400
 8009c80:	03d09000 	.word	0x03d09000
 8009c84:	46000000 	.word	0x46000000
 8009c88:	4c742400 	.word	0x4c742400
 8009c8c:	4a742400 	.word	0x4a742400
 8009c90:	4bbebc20 	.word	0x4bbebc20

08009c94 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8009c94:	b580      	push	{r7, lr}
 8009c96:	b084      	sub	sp, #16
 8009c98:	af00      	add	r7, sp, #0
 8009c9a:	6078      	str	r0, [r7, #4]
 8009c9c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009c9e:	2300      	movs	r3, #0
 8009ca0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8009ca2:	4b53      	ldr	r3, [pc, #332]	; (8009df0 <RCCEx_PLL2_Config+0x15c>)
 8009ca4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009ca6:	f003 0303 	and.w	r3, r3, #3
 8009caa:	2b03      	cmp	r3, #3
 8009cac:	d101      	bne.n	8009cb2 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8009cae:	2301      	movs	r3, #1
 8009cb0:	e099      	b.n	8009de6 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8009cb2:	4b4f      	ldr	r3, [pc, #316]	; (8009df0 <RCCEx_PLL2_Config+0x15c>)
 8009cb4:	681b      	ldr	r3, [r3, #0]
 8009cb6:	4a4e      	ldr	r2, [pc, #312]	; (8009df0 <RCCEx_PLL2_Config+0x15c>)
 8009cb8:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8009cbc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009cbe:	f7fc fd13 	bl	80066e8 <HAL_GetTick>
 8009cc2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8009cc4:	e008      	b.n	8009cd8 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8009cc6:	f7fc fd0f 	bl	80066e8 <HAL_GetTick>
 8009cca:	4602      	mov	r2, r0
 8009ccc:	68bb      	ldr	r3, [r7, #8]
 8009cce:	1ad3      	subs	r3, r2, r3
 8009cd0:	2b02      	cmp	r3, #2
 8009cd2:	d901      	bls.n	8009cd8 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8009cd4:	2303      	movs	r3, #3
 8009cd6:	e086      	b.n	8009de6 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8009cd8:	4b45      	ldr	r3, [pc, #276]	; (8009df0 <RCCEx_PLL2_Config+0x15c>)
 8009cda:	681b      	ldr	r3, [r3, #0]
 8009cdc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009ce0:	2b00      	cmp	r3, #0
 8009ce2:	d1f0      	bne.n	8009cc6 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8009ce4:	4b42      	ldr	r3, [pc, #264]	; (8009df0 <RCCEx_PLL2_Config+0x15c>)
 8009ce6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009ce8:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	681b      	ldr	r3, [r3, #0]
 8009cf0:	031b      	lsls	r3, r3, #12
 8009cf2:	493f      	ldr	r1, [pc, #252]	; (8009df0 <RCCEx_PLL2_Config+0x15c>)
 8009cf4:	4313      	orrs	r3, r2
 8009cf6:	628b      	str	r3, [r1, #40]	; 0x28
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	685b      	ldr	r3, [r3, #4]
 8009cfc:	3b01      	subs	r3, #1
 8009cfe:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	689b      	ldr	r3, [r3, #8]
 8009d06:	3b01      	subs	r3, #1
 8009d08:	025b      	lsls	r3, r3, #9
 8009d0a:	b29b      	uxth	r3, r3
 8009d0c:	431a      	orrs	r2, r3
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	68db      	ldr	r3, [r3, #12]
 8009d12:	3b01      	subs	r3, #1
 8009d14:	041b      	lsls	r3, r3, #16
 8009d16:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8009d1a:	431a      	orrs	r2, r3
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	691b      	ldr	r3, [r3, #16]
 8009d20:	3b01      	subs	r3, #1
 8009d22:	061b      	lsls	r3, r3, #24
 8009d24:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8009d28:	4931      	ldr	r1, [pc, #196]	; (8009df0 <RCCEx_PLL2_Config+0x15c>)
 8009d2a:	4313      	orrs	r3, r2
 8009d2c:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8009d2e:	4b30      	ldr	r3, [pc, #192]	; (8009df0 <RCCEx_PLL2_Config+0x15c>)
 8009d30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d32:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	695b      	ldr	r3, [r3, #20]
 8009d3a:	492d      	ldr	r1, [pc, #180]	; (8009df0 <RCCEx_PLL2_Config+0x15c>)
 8009d3c:	4313      	orrs	r3, r2
 8009d3e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8009d40:	4b2b      	ldr	r3, [pc, #172]	; (8009df0 <RCCEx_PLL2_Config+0x15c>)
 8009d42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d44:	f023 0220 	bic.w	r2, r3, #32
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	699b      	ldr	r3, [r3, #24]
 8009d4c:	4928      	ldr	r1, [pc, #160]	; (8009df0 <RCCEx_PLL2_Config+0x15c>)
 8009d4e:	4313      	orrs	r3, r2
 8009d50:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8009d52:	4b27      	ldr	r3, [pc, #156]	; (8009df0 <RCCEx_PLL2_Config+0x15c>)
 8009d54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d56:	4a26      	ldr	r2, [pc, #152]	; (8009df0 <RCCEx_PLL2_Config+0x15c>)
 8009d58:	f023 0310 	bic.w	r3, r3, #16
 8009d5c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8009d5e:	4b24      	ldr	r3, [pc, #144]	; (8009df0 <RCCEx_PLL2_Config+0x15c>)
 8009d60:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009d62:	4b24      	ldr	r3, [pc, #144]	; (8009df4 <RCCEx_PLL2_Config+0x160>)
 8009d64:	4013      	ands	r3, r2
 8009d66:	687a      	ldr	r2, [r7, #4]
 8009d68:	69d2      	ldr	r2, [r2, #28]
 8009d6a:	00d2      	lsls	r2, r2, #3
 8009d6c:	4920      	ldr	r1, [pc, #128]	; (8009df0 <RCCEx_PLL2_Config+0x15c>)
 8009d6e:	4313      	orrs	r3, r2
 8009d70:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8009d72:	4b1f      	ldr	r3, [pc, #124]	; (8009df0 <RCCEx_PLL2_Config+0x15c>)
 8009d74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d76:	4a1e      	ldr	r2, [pc, #120]	; (8009df0 <RCCEx_PLL2_Config+0x15c>)
 8009d78:	f043 0310 	orr.w	r3, r3, #16
 8009d7c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8009d7e:	683b      	ldr	r3, [r7, #0]
 8009d80:	2b00      	cmp	r3, #0
 8009d82:	d106      	bne.n	8009d92 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8009d84:	4b1a      	ldr	r3, [pc, #104]	; (8009df0 <RCCEx_PLL2_Config+0x15c>)
 8009d86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d88:	4a19      	ldr	r2, [pc, #100]	; (8009df0 <RCCEx_PLL2_Config+0x15c>)
 8009d8a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009d8e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009d90:	e00f      	b.n	8009db2 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8009d92:	683b      	ldr	r3, [r7, #0]
 8009d94:	2b01      	cmp	r3, #1
 8009d96:	d106      	bne.n	8009da6 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8009d98:	4b15      	ldr	r3, [pc, #84]	; (8009df0 <RCCEx_PLL2_Config+0x15c>)
 8009d9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d9c:	4a14      	ldr	r2, [pc, #80]	; (8009df0 <RCCEx_PLL2_Config+0x15c>)
 8009d9e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009da2:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009da4:	e005      	b.n	8009db2 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8009da6:	4b12      	ldr	r3, [pc, #72]	; (8009df0 <RCCEx_PLL2_Config+0x15c>)
 8009da8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009daa:	4a11      	ldr	r2, [pc, #68]	; (8009df0 <RCCEx_PLL2_Config+0x15c>)
 8009dac:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8009db0:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8009db2:	4b0f      	ldr	r3, [pc, #60]	; (8009df0 <RCCEx_PLL2_Config+0x15c>)
 8009db4:	681b      	ldr	r3, [r3, #0]
 8009db6:	4a0e      	ldr	r2, [pc, #56]	; (8009df0 <RCCEx_PLL2_Config+0x15c>)
 8009db8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8009dbc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009dbe:	f7fc fc93 	bl	80066e8 <HAL_GetTick>
 8009dc2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8009dc4:	e008      	b.n	8009dd8 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8009dc6:	f7fc fc8f 	bl	80066e8 <HAL_GetTick>
 8009dca:	4602      	mov	r2, r0
 8009dcc:	68bb      	ldr	r3, [r7, #8]
 8009dce:	1ad3      	subs	r3, r2, r3
 8009dd0:	2b02      	cmp	r3, #2
 8009dd2:	d901      	bls.n	8009dd8 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8009dd4:	2303      	movs	r3, #3
 8009dd6:	e006      	b.n	8009de6 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8009dd8:	4b05      	ldr	r3, [pc, #20]	; (8009df0 <RCCEx_PLL2_Config+0x15c>)
 8009dda:	681b      	ldr	r3, [r3, #0]
 8009ddc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009de0:	2b00      	cmp	r3, #0
 8009de2:	d0f0      	beq.n	8009dc6 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8009de4:	7bfb      	ldrb	r3, [r7, #15]
}
 8009de6:	4618      	mov	r0, r3
 8009de8:	3710      	adds	r7, #16
 8009dea:	46bd      	mov	sp, r7
 8009dec:	bd80      	pop	{r7, pc}
 8009dee:	bf00      	nop
 8009df0:	58024400 	.word	0x58024400
 8009df4:	ffff0007 	.word	0xffff0007

08009df8 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8009df8:	b580      	push	{r7, lr}
 8009dfa:	b084      	sub	sp, #16
 8009dfc:	af00      	add	r7, sp, #0
 8009dfe:	6078      	str	r0, [r7, #4]
 8009e00:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009e02:	2300      	movs	r3, #0
 8009e04:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8009e06:	4b53      	ldr	r3, [pc, #332]	; (8009f54 <RCCEx_PLL3_Config+0x15c>)
 8009e08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009e0a:	f003 0303 	and.w	r3, r3, #3
 8009e0e:	2b03      	cmp	r3, #3
 8009e10:	d101      	bne.n	8009e16 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8009e12:	2301      	movs	r3, #1
 8009e14:	e099      	b.n	8009f4a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8009e16:	4b4f      	ldr	r3, [pc, #316]	; (8009f54 <RCCEx_PLL3_Config+0x15c>)
 8009e18:	681b      	ldr	r3, [r3, #0]
 8009e1a:	4a4e      	ldr	r2, [pc, #312]	; (8009f54 <RCCEx_PLL3_Config+0x15c>)
 8009e1c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009e20:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009e22:	f7fc fc61 	bl	80066e8 <HAL_GetTick>
 8009e26:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009e28:	e008      	b.n	8009e3c <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8009e2a:	f7fc fc5d 	bl	80066e8 <HAL_GetTick>
 8009e2e:	4602      	mov	r2, r0
 8009e30:	68bb      	ldr	r3, [r7, #8]
 8009e32:	1ad3      	subs	r3, r2, r3
 8009e34:	2b02      	cmp	r3, #2
 8009e36:	d901      	bls.n	8009e3c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8009e38:	2303      	movs	r3, #3
 8009e3a:	e086      	b.n	8009f4a <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009e3c:	4b45      	ldr	r3, [pc, #276]	; (8009f54 <RCCEx_PLL3_Config+0x15c>)
 8009e3e:	681b      	ldr	r3, [r3, #0]
 8009e40:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009e44:	2b00      	cmp	r3, #0
 8009e46:	d1f0      	bne.n	8009e2a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8009e48:	4b42      	ldr	r3, [pc, #264]	; (8009f54 <RCCEx_PLL3_Config+0x15c>)
 8009e4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009e4c:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	681b      	ldr	r3, [r3, #0]
 8009e54:	051b      	lsls	r3, r3, #20
 8009e56:	493f      	ldr	r1, [pc, #252]	; (8009f54 <RCCEx_PLL3_Config+0x15c>)
 8009e58:	4313      	orrs	r3, r2
 8009e5a:	628b      	str	r3, [r1, #40]	; 0x28
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	685b      	ldr	r3, [r3, #4]
 8009e60:	3b01      	subs	r3, #1
 8009e62:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	689b      	ldr	r3, [r3, #8]
 8009e6a:	3b01      	subs	r3, #1
 8009e6c:	025b      	lsls	r3, r3, #9
 8009e6e:	b29b      	uxth	r3, r3
 8009e70:	431a      	orrs	r2, r3
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	68db      	ldr	r3, [r3, #12]
 8009e76:	3b01      	subs	r3, #1
 8009e78:	041b      	lsls	r3, r3, #16
 8009e7a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8009e7e:	431a      	orrs	r2, r3
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	691b      	ldr	r3, [r3, #16]
 8009e84:	3b01      	subs	r3, #1
 8009e86:	061b      	lsls	r3, r3, #24
 8009e88:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8009e8c:	4931      	ldr	r1, [pc, #196]	; (8009f54 <RCCEx_PLL3_Config+0x15c>)
 8009e8e:	4313      	orrs	r3, r2
 8009e90:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8009e92:	4b30      	ldr	r3, [pc, #192]	; (8009f54 <RCCEx_PLL3_Config+0x15c>)
 8009e94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e96:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	695b      	ldr	r3, [r3, #20]
 8009e9e:	492d      	ldr	r1, [pc, #180]	; (8009f54 <RCCEx_PLL3_Config+0x15c>)
 8009ea0:	4313      	orrs	r3, r2
 8009ea2:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8009ea4:	4b2b      	ldr	r3, [pc, #172]	; (8009f54 <RCCEx_PLL3_Config+0x15c>)
 8009ea6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ea8:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	699b      	ldr	r3, [r3, #24]
 8009eb0:	4928      	ldr	r1, [pc, #160]	; (8009f54 <RCCEx_PLL3_Config+0x15c>)
 8009eb2:	4313      	orrs	r3, r2
 8009eb4:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8009eb6:	4b27      	ldr	r3, [pc, #156]	; (8009f54 <RCCEx_PLL3_Config+0x15c>)
 8009eb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009eba:	4a26      	ldr	r2, [pc, #152]	; (8009f54 <RCCEx_PLL3_Config+0x15c>)
 8009ebc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009ec0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8009ec2:	4b24      	ldr	r3, [pc, #144]	; (8009f54 <RCCEx_PLL3_Config+0x15c>)
 8009ec4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009ec6:	4b24      	ldr	r3, [pc, #144]	; (8009f58 <RCCEx_PLL3_Config+0x160>)
 8009ec8:	4013      	ands	r3, r2
 8009eca:	687a      	ldr	r2, [r7, #4]
 8009ecc:	69d2      	ldr	r2, [r2, #28]
 8009ece:	00d2      	lsls	r2, r2, #3
 8009ed0:	4920      	ldr	r1, [pc, #128]	; (8009f54 <RCCEx_PLL3_Config+0x15c>)
 8009ed2:	4313      	orrs	r3, r2
 8009ed4:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8009ed6:	4b1f      	ldr	r3, [pc, #124]	; (8009f54 <RCCEx_PLL3_Config+0x15c>)
 8009ed8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009eda:	4a1e      	ldr	r2, [pc, #120]	; (8009f54 <RCCEx_PLL3_Config+0x15c>)
 8009edc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009ee0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8009ee2:	683b      	ldr	r3, [r7, #0]
 8009ee4:	2b00      	cmp	r3, #0
 8009ee6:	d106      	bne.n	8009ef6 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8009ee8:	4b1a      	ldr	r3, [pc, #104]	; (8009f54 <RCCEx_PLL3_Config+0x15c>)
 8009eea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009eec:	4a19      	ldr	r2, [pc, #100]	; (8009f54 <RCCEx_PLL3_Config+0x15c>)
 8009eee:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8009ef2:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009ef4:	e00f      	b.n	8009f16 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8009ef6:	683b      	ldr	r3, [r7, #0]
 8009ef8:	2b01      	cmp	r3, #1
 8009efa:	d106      	bne.n	8009f0a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8009efc:	4b15      	ldr	r3, [pc, #84]	; (8009f54 <RCCEx_PLL3_Config+0x15c>)
 8009efe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f00:	4a14      	ldr	r2, [pc, #80]	; (8009f54 <RCCEx_PLL3_Config+0x15c>)
 8009f02:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8009f06:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009f08:	e005      	b.n	8009f16 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8009f0a:	4b12      	ldr	r3, [pc, #72]	; (8009f54 <RCCEx_PLL3_Config+0x15c>)
 8009f0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f0e:	4a11      	ldr	r2, [pc, #68]	; (8009f54 <RCCEx_PLL3_Config+0x15c>)
 8009f10:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009f14:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8009f16:	4b0f      	ldr	r3, [pc, #60]	; (8009f54 <RCCEx_PLL3_Config+0x15c>)
 8009f18:	681b      	ldr	r3, [r3, #0]
 8009f1a:	4a0e      	ldr	r2, [pc, #56]	; (8009f54 <RCCEx_PLL3_Config+0x15c>)
 8009f1c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009f20:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009f22:	f7fc fbe1 	bl	80066e8 <HAL_GetTick>
 8009f26:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009f28:	e008      	b.n	8009f3c <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8009f2a:	f7fc fbdd 	bl	80066e8 <HAL_GetTick>
 8009f2e:	4602      	mov	r2, r0
 8009f30:	68bb      	ldr	r3, [r7, #8]
 8009f32:	1ad3      	subs	r3, r2, r3
 8009f34:	2b02      	cmp	r3, #2
 8009f36:	d901      	bls.n	8009f3c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8009f38:	2303      	movs	r3, #3
 8009f3a:	e006      	b.n	8009f4a <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009f3c:	4b05      	ldr	r3, [pc, #20]	; (8009f54 <RCCEx_PLL3_Config+0x15c>)
 8009f3e:	681b      	ldr	r3, [r3, #0]
 8009f40:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009f44:	2b00      	cmp	r3, #0
 8009f46:	d0f0      	beq.n	8009f2a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8009f48:	7bfb      	ldrb	r3, [r7, #15]
}
 8009f4a:	4618      	mov	r0, r3
 8009f4c:	3710      	adds	r7, #16
 8009f4e:	46bd      	mov	sp, r7
 8009f50:	bd80      	pop	{r7, pc}
 8009f52:	bf00      	nop
 8009f54:	58024400 	.word	0x58024400
 8009f58:	ffff0007 	.word	0xffff0007

08009f5c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009f5c:	b580      	push	{r7, lr}
 8009f5e:	b082      	sub	sp, #8
 8009f60:	af00      	add	r7, sp, #0
 8009f62:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	2b00      	cmp	r3, #0
 8009f68:	d101      	bne.n	8009f6e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009f6a:	2301      	movs	r3, #1
 8009f6c:	e049      	b.n	800a002 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009f74:	b2db      	uxtb	r3, r3
 8009f76:	2b00      	cmp	r3, #0
 8009f78:	d106      	bne.n	8009f88 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	2200      	movs	r2, #0
 8009f7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009f82:	6878      	ldr	r0, [r7, #4]
 8009f84:	f7fa f9e8 	bl	8004358 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	2202      	movs	r2, #2
 8009f8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	681a      	ldr	r2, [r3, #0]
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	3304      	adds	r3, #4
 8009f98:	4619      	mov	r1, r3
 8009f9a:	4610      	mov	r0, r2
 8009f9c:	f001 f982 	bl	800b2a4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	2201      	movs	r2, #1
 8009fa4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	2201      	movs	r2, #1
 8009fac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	2201      	movs	r2, #1
 8009fb4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	2201      	movs	r2, #1
 8009fbc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	2201      	movs	r2, #1
 8009fc4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	2201      	movs	r2, #1
 8009fcc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	2201      	movs	r2, #1
 8009fd4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	2201      	movs	r2, #1
 8009fdc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	2201      	movs	r2, #1
 8009fe4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	2201      	movs	r2, #1
 8009fec:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	2201      	movs	r2, #1
 8009ff4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	2201      	movs	r2, #1
 8009ffc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a000:	2300      	movs	r3, #0
}
 800a002:	4618      	mov	r0, r3
 800a004:	3708      	adds	r7, #8
 800a006:	46bd      	mov	sp, r7
 800a008:	bd80      	pop	{r7, pc}
	...

0800a00c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800a00c:	b480      	push	{r7}
 800a00e:	b085      	sub	sp, #20
 800a010:	af00      	add	r7, sp, #0
 800a012:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a01a:	b2db      	uxtb	r3, r3
 800a01c:	2b01      	cmp	r3, #1
 800a01e:	d001      	beq.n	800a024 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800a020:	2301      	movs	r3, #1
 800a022:	e04c      	b.n	800a0be <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	2202      	movs	r2, #2
 800a028:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	681b      	ldr	r3, [r3, #0]
 800a030:	4a26      	ldr	r2, [pc, #152]	; (800a0cc <HAL_TIM_Base_Start+0xc0>)
 800a032:	4293      	cmp	r3, r2
 800a034:	d022      	beq.n	800a07c <HAL_TIM_Base_Start+0x70>
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	681b      	ldr	r3, [r3, #0]
 800a03a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a03e:	d01d      	beq.n	800a07c <HAL_TIM_Base_Start+0x70>
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	681b      	ldr	r3, [r3, #0]
 800a044:	4a22      	ldr	r2, [pc, #136]	; (800a0d0 <HAL_TIM_Base_Start+0xc4>)
 800a046:	4293      	cmp	r3, r2
 800a048:	d018      	beq.n	800a07c <HAL_TIM_Base_Start+0x70>
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	681b      	ldr	r3, [r3, #0]
 800a04e:	4a21      	ldr	r2, [pc, #132]	; (800a0d4 <HAL_TIM_Base_Start+0xc8>)
 800a050:	4293      	cmp	r3, r2
 800a052:	d013      	beq.n	800a07c <HAL_TIM_Base_Start+0x70>
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	681b      	ldr	r3, [r3, #0]
 800a058:	4a1f      	ldr	r2, [pc, #124]	; (800a0d8 <HAL_TIM_Base_Start+0xcc>)
 800a05a:	4293      	cmp	r3, r2
 800a05c:	d00e      	beq.n	800a07c <HAL_TIM_Base_Start+0x70>
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	681b      	ldr	r3, [r3, #0]
 800a062:	4a1e      	ldr	r2, [pc, #120]	; (800a0dc <HAL_TIM_Base_Start+0xd0>)
 800a064:	4293      	cmp	r3, r2
 800a066:	d009      	beq.n	800a07c <HAL_TIM_Base_Start+0x70>
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	681b      	ldr	r3, [r3, #0]
 800a06c:	4a1c      	ldr	r2, [pc, #112]	; (800a0e0 <HAL_TIM_Base_Start+0xd4>)
 800a06e:	4293      	cmp	r3, r2
 800a070:	d004      	beq.n	800a07c <HAL_TIM_Base_Start+0x70>
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	681b      	ldr	r3, [r3, #0]
 800a076:	4a1b      	ldr	r2, [pc, #108]	; (800a0e4 <HAL_TIM_Base_Start+0xd8>)
 800a078:	4293      	cmp	r3, r2
 800a07a:	d115      	bne.n	800a0a8 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	681b      	ldr	r3, [r3, #0]
 800a080:	689a      	ldr	r2, [r3, #8]
 800a082:	4b19      	ldr	r3, [pc, #100]	; (800a0e8 <HAL_TIM_Base_Start+0xdc>)
 800a084:	4013      	ands	r3, r2
 800a086:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a088:	68fb      	ldr	r3, [r7, #12]
 800a08a:	2b06      	cmp	r3, #6
 800a08c:	d015      	beq.n	800a0ba <HAL_TIM_Base_Start+0xae>
 800a08e:	68fb      	ldr	r3, [r7, #12]
 800a090:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a094:	d011      	beq.n	800a0ba <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	681b      	ldr	r3, [r3, #0]
 800a09a:	681a      	ldr	r2, [r3, #0]
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	681b      	ldr	r3, [r3, #0]
 800a0a0:	f042 0201 	orr.w	r2, r2, #1
 800a0a4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a0a6:	e008      	b.n	800a0ba <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	681b      	ldr	r3, [r3, #0]
 800a0ac:	681a      	ldr	r2, [r3, #0]
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	681b      	ldr	r3, [r3, #0]
 800a0b2:	f042 0201 	orr.w	r2, r2, #1
 800a0b6:	601a      	str	r2, [r3, #0]
 800a0b8:	e000      	b.n	800a0bc <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a0ba:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800a0bc:	2300      	movs	r3, #0
}
 800a0be:	4618      	mov	r0, r3
 800a0c0:	3714      	adds	r7, #20
 800a0c2:	46bd      	mov	sp, r7
 800a0c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0c8:	4770      	bx	lr
 800a0ca:	bf00      	nop
 800a0cc:	40010000 	.word	0x40010000
 800a0d0:	40000400 	.word	0x40000400
 800a0d4:	40000800 	.word	0x40000800
 800a0d8:	40000c00 	.word	0x40000c00
 800a0dc:	40010400 	.word	0x40010400
 800a0e0:	40001800 	.word	0x40001800
 800a0e4:	40014000 	.word	0x40014000
 800a0e8:	00010007 	.word	0x00010007

0800a0ec <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 800a0ec:	b480      	push	{r7}
 800a0ee:	b083      	sub	sp, #12
 800a0f0:	af00      	add	r7, sp, #0
 800a0f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	681b      	ldr	r3, [r3, #0]
 800a0f8:	6a1a      	ldr	r2, [r3, #32]
 800a0fa:	f241 1311 	movw	r3, #4369	; 0x1111
 800a0fe:	4013      	ands	r3, r2
 800a100:	2b00      	cmp	r3, #0
 800a102:	d10f      	bne.n	800a124 <HAL_TIM_Base_Stop+0x38>
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	681b      	ldr	r3, [r3, #0]
 800a108:	6a1a      	ldr	r2, [r3, #32]
 800a10a:	f240 4344 	movw	r3, #1092	; 0x444
 800a10e:	4013      	ands	r3, r2
 800a110:	2b00      	cmp	r3, #0
 800a112:	d107      	bne.n	800a124 <HAL_TIM_Base_Stop+0x38>
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	681b      	ldr	r3, [r3, #0]
 800a118:	681a      	ldr	r2, [r3, #0]
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	681b      	ldr	r3, [r3, #0]
 800a11e:	f022 0201 	bic.w	r2, r2, #1
 800a122:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	2201      	movs	r2, #1
 800a128:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800a12c:	2300      	movs	r3, #0
}
 800a12e:	4618      	mov	r0, r3
 800a130:	370c      	adds	r7, #12
 800a132:	46bd      	mov	sp, r7
 800a134:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a138:	4770      	bx	lr
	...

0800a13c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800a13c:	b480      	push	{r7}
 800a13e:	b085      	sub	sp, #20
 800a140:	af00      	add	r7, sp, #0
 800a142:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a14a:	b2db      	uxtb	r3, r3
 800a14c:	2b01      	cmp	r3, #1
 800a14e:	d001      	beq.n	800a154 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800a150:	2301      	movs	r3, #1
 800a152:	e054      	b.n	800a1fe <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	2202      	movs	r2, #2
 800a158:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	681b      	ldr	r3, [r3, #0]
 800a160:	68da      	ldr	r2, [r3, #12]
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	681b      	ldr	r3, [r3, #0]
 800a166:	f042 0201 	orr.w	r2, r2, #1
 800a16a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	681b      	ldr	r3, [r3, #0]
 800a170:	4a26      	ldr	r2, [pc, #152]	; (800a20c <HAL_TIM_Base_Start_IT+0xd0>)
 800a172:	4293      	cmp	r3, r2
 800a174:	d022      	beq.n	800a1bc <HAL_TIM_Base_Start_IT+0x80>
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	681b      	ldr	r3, [r3, #0]
 800a17a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a17e:	d01d      	beq.n	800a1bc <HAL_TIM_Base_Start_IT+0x80>
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	681b      	ldr	r3, [r3, #0]
 800a184:	4a22      	ldr	r2, [pc, #136]	; (800a210 <HAL_TIM_Base_Start_IT+0xd4>)
 800a186:	4293      	cmp	r3, r2
 800a188:	d018      	beq.n	800a1bc <HAL_TIM_Base_Start_IT+0x80>
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	681b      	ldr	r3, [r3, #0]
 800a18e:	4a21      	ldr	r2, [pc, #132]	; (800a214 <HAL_TIM_Base_Start_IT+0xd8>)
 800a190:	4293      	cmp	r3, r2
 800a192:	d013      	beq.n	800a1bc <HAL_TIM_Base_Start_IT+0x80>
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	681b      	ldr	r3, [r3, #0]
 800a198:	4a1f      	ldr	r2, [pc, #124]	; (800a218 <HAL_TIM_Base_Start_IT+0xdc>)
 800a19a:	4293      	cmp	r3, r2
 800a19c:	d00e      	beq.n	800a1bc <HAL_TIM_Base_Start_IT+0x80>
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	681b      	ldr	r3, [r3, #0]
 800a1a2:	4a1e      	ldr	r2, [pc, #120]	; (800a21c <HAL_TIM_Base_Start_IT+0xe0>)
 800a1a4:	4293      	cmp	r3, r2
 800a1a6:	d009      	beq.n	800a1bc <HAL_TIM_Base_Start_IT+0x80>
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	681b      	ldr	r3, [r3, #0]
 800a1ac:	4a1c      	ldr	r2, [pc, #112]	; (800a220 <HAL_TIM_Base_Start_IT+0xe4>)
 800a1ae:	4293      	cmp	r3, r2
 800a1b0:	d004      	beq.n	800a1bc <HAL_TIM_Base_Start_IT+0x80>
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	681b      	ldr	r3, [r3, #0]
 800a1b6:	4a1b      	ldr	r2, [pc, #108]	; (800a224 <HAL_TIM_Base_Start_IT+0xe8>)
 800a1b8:	4293      	cmp	r3, r2
 800a1ba:	d115      	bne.n	800a1e8 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	681b      	ldr	r3, [r3, #0]
 800a1c0:	689a      	ldr	r2, [r3, #8]
 800a1c2:	4b19      	ldr	r3, [pc, #100]	; (800a228 <HAL_TIM_Base_Start_IT+0xec>)
 800a1c4:	4013      	ands	r3, r2
 800a1c6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a1c8:	68fb      	ldr	r3, [r7, #12]
 800a1ca:	2b06      	cmp	r3, #6
 800a1cc:	d015      	beq.n	800a1fa <HAL_TIM_Base_Start_IT+0xbe>
 800a1ce:	68fb      	ldr	r3, [r7, #12]
 800a1d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a1d4:	d011      	beq.n	800a1fa <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	681b      	ldr	r3, [r3, #0]
 800a1da:	681a      	ldr	r2, [r3, #0]
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	681b      	ldr	r3, [r3, #0]
 800a1e0:	f042 0201 	orr.w	r2, r2, #1
 800a1e4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a1e6:	e008      	b.n	800a1fa <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	681b      	ldr	r3, [r3, #0]
 800a1ec:	681a      	ldr	r2, [r3, #0]
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	681b      	ldr	r3, [r3, #0]
 800a1f2:	f042 0201 	orr.w	r2, r2, #1
 800a1f6:	601a      	str	r2, [r3, #0]
 800a1f8:	e000      	b.n	800a1fc <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a1fa:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800a1fc:	2300      	movs	r3, #0
}
 800a1fe:	4618      	mov	r0, r3
 800a200:	3714      	adds	r7, #20
 800a202:	46bd      	mov	sp, r7
 800a204:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a208:	4770      	bx	lr
 800a20a:	bf00      	nop
 800a20c:	40010000 	.word	0x40010000
 800a210:	40000400 	.word	0x40000400
 800a214:	40000800 	.word	0x40000800
 800a218:	40000c00 	.word	0x40000c00
 800a21c:	40010400 	.word	0x40010400
 800a220:	40001800 	.word	0x40001800
 800a224:	40014000 	.word	0x40014000
 800a228:	00010007 	.word	0x00010007

0800a22c <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800a22c:	b480      	push	{r7}
 800a22e:	b083      	sub	sp, #12
 800a230:	af00      	add	r7, sp, #0
 800a232:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	681b      	ldr	r3, [r3, #0]
 800a238:	68da      	ldr	r2, [r3, #12]
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	681b      	ldr	r3, [r3, #0]
 800a23e:	f022 0201 	bic.w	r2, r2, #1
 800a242:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	681b      	ldr	r3, [r3, #0]
 800a248:	6a1a      	ldr	r2, [r3, #32]
 800a24a:	f241 1311 	movw	r3, #4369	; 0x1111
 800a24e:	4013      	ands	r3, r2
 800a250:	2b00      	cmp	r3, #0
 800a252:	d10f      	bne.n	800a274 <HAL_TIM_Base_Stop_IT+0x48>
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	681b      	ldr	r3, [r3, #0]
 800a258:	6a1a      	ldr	r2, [r3, #32]
 800a25a:	f240 4344 	movw	r3, #1092	; 0x444
 800a25e:	4013      	ands	r3, r2
 800a260:	2b00      	cmp	r3, #0
 800a262:	d107      	bne.n	800a274 <HAL_TIM_Base_Stop_IT+0x48>
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	681b      	ldr	r3, [r3, #0]
 800a268:	681a      	ldr	r2, [r3, #0]
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	681b      	ldr	r3, [r3, #0]
 800a26e:	f022 0201 	bic.w	r2, r2, #1
 800a272:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	2201      	movs	r2, #1
 800a278:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800a27c:	2300      	movs	r3, #0
}
 800a27e:	4618      	mov	r0, r3
 800a280:	370c      	adds	r7, #12
 800a282:	46bd      	mov	sp, r7
 800a284:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a288:	4770      	bx	lr

0800a28a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800a28a:	b580      	push	{r7, lr}
 800a28c:	b082      	sub	sp, #8
 800a28e:	af00      	add	r7, sp, #0
 800a290:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	2b00      	cmp	r3, #0
 800a296:	d101      	bne.n	800a29c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800a298:	2301      	movs	r3, #1
 800a29a:	e049      	b.n	800a330 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a2a2:	b2db      	uxtb	r3, r3
 800a2a4:	2b00      	cmp	r3, #0
 800a2a6:	d106      	bne.n	800a2b6 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	2200      	movs	r2, #0
 800a2ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800a2b0:	6878      	ldr	r0, [r7, #4]
 800a2b2:	f000 f841 	bl	800a338 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	2202      	movs	r2, #2
 800a2ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	681a      	ldr	r2, [r3, #0]
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	3304      	adds	r3, #4
 800a2c6:	4619      	mov	r1, r3
 800a2c8:	4610      	mov	r0, r2
 800a2ca:	f000 ffeb 	bl	800b2a4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	2201      	movs	r2, #1
 800a2d2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	2201      	movs	r2, #1
 800a2da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	2201      	movs	r2, #1
 800a2e2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	2201      	movs	r2, #1
 800a2ea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	2201      	movs	r2, #1
 800a2f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a2f6:	687b      	ldr	r3, [r7, #4]
 800a2f8:	2201      	movs	r2, #1
 800a2fa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	2201      	movs	r2, #1
 800a302:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	2201      	movs	r2, #1
 800a30a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	2201      	movs	r2, #1
 800a312:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	2201      	movs	r2, #1
 800a31a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	2201      	movs	r2, #1
 800a322:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	2201      	movs	r2, #1
 800a32a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a32e:	2300      	movs	r3, #0
}
 800a330:	4618      	mov	r0, r3
 800a332:	3708      	adds	r7, #8
 800a334:	46bd      	mov	sp, r7
 800a336:	bd80      	pop	{r7, pc}

0800a338 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800a338:	b480      	push	{r7}
 800a33a:	b083      	sub	sp, #12
 800a33c:	af00      	add	r7, sp, #0
 800a33e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800a340:	bf00      	nop
 800a342:	370c      	adds	r7, #12
 800a344:	46bd      	mov	sp, r7
 800a346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a34a:	4770      	bx	lr

0800a34c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800a34c:	b580      	push	{r7, lr}
 800a34e:	b084      	sub	sp, #16
 800a350:	af00      	add	r7, sp, #0
 800a352:	6078      	str	r0, [r7, #4]
 800a354:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800a356:	683b      	ldr	r3, [r7, #0]
 800a358:	2b00      	cmp	r3, #0
 800a35a:	d109      	bne.n	800a370 <HAL_TIM_PWM_Start+0x24>
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a362:	b2db      	uxtb	r3, r3
 800a364:	2b01      	cmp	r3, #1
 800a366:	bf14      	ite	ne
 800a368:	2301      	movne	r3, #1
 800a36a:	2300      	moveq	r3, #0
 800a36c:	b2db      	uxtb	r3, r3
 800a36e:	e03c      	b.n	800a3ea <HAL_TIM_PWM_Start+0x9e>
 800a370:	683b      	ldr	r3, [r7, #0]
 800a372:	2b04      	cmp	r3, #4
 800a374:	d109      	bne.n	800a38a <HAL_TIM_PWM_Start+0x3e>
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800a37c:	b2db      	uxtb	r3, r3
 800a37e:	2b01      	cmp	r3, #1
 800a380:	bf14      	ite	ne
 800a382:	2301      	movne	r3, #1
 800a384:	2300      	moveq	r3, #0
 800a386:	b2db      	uxtb	r3, r3
 800a388:	e02f      	b.n	800a3ea <HAL_TIM_PWM_Start+0x9e>
 800a38a:	683b      	ldr	r3, [r7, #0]
 800a38c:	2b08      	cmp	r3, #8
 800a38e:	d109      	bne.n	800a3a4 <HAL_TIM_PWM_Start+0x58>
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800a396:	b2db      	uxtb	r3, r3
 800a398:	2b01      	cmp	r3, #1
 800a39a:	bf14      	ite	ne
 800a39c:	2301      	movne	r3, #1
 800a39e:	2300      	moveq	r3, #0
 800a3a0:	b2db      	uxtb	r3, r3
 800a3a2:	e022      	b.n	800a3ea <HAL_TIM_PWM_Start+0x9e>
 800a3a4:	683b      	ldr	r3, [r7, #0]
 800a3a6:	2b0c      	cmp	r3, #12
 800a3a8:	d109      	bne.n	800a3be <HAL_TIM_PWM_Start+0x72>
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a3b0:	b2db      	uxtb	r3, r3
 800a3b2:	2b01      	cmp	r3, #1
 800a3b4:	bf14      	ite	ne
 800a3b6:	2301      	movne	r3, #1
 800a3b8:	2300      	moveq	r3, #0
 800a3ba:	b2db      	uxtb	r3, r3
 800a3bc:	e015      	b.n	800a3ea <HAL_TIM_PWM_Start+0x9e>
 800a3be:	683b      	ldr	r3, [r7, #0]
 800a3c0:	2b10      	cmp	r3, #16
 800a3c2:	d109      	bne.n	800a3d8 <HAL_TIM_PWM_Start+0x8c>
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800a3ca:	b2db      	uxtb	r3, r3
 800a3cc:	2b01      	cmp	r3, #1
 800a3ce:	bf14      	ite	ne
 800a3d0:	2301      	movne	r3, #1
 800a3d2:	2300      	moveq	r3, #0
 800a3d4:	b2db      	uxtb	r3, r3
 800a3d6:	e008      	b.n	800a3ea <HAL_TIM_PWM_Start+0x9e>
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800a3de:	b2db      	uxtb	r3, r3
 800a3e0:	2b01      	cmp	r3, #1
 800a3e2:	bf14      	ite	ne
 800a3e4:	2301      	movne	r3, #1
 800a3e6:	2300      	moveq	r3, #0
 800a3e8:	b2db      	uxtb	r3, r3
 800a3ea:	2b00      	cmp	r3, #0
 800a3ec:	d001      	beq.n	800a3f2 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800a3ee:	2301      	movs	r3, #1
 800a3f0:	e0a1      	b.n	800a536 <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800a3f2:	683b      	ldr	r3, [r7, #0]
 800a3f4:	2b00      	cmp	r3, #0
 800a3f6:	d104      	bne.n	800a402 <HAL_TIM_PWM_Start+0xb6>
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	2202      	movs	r2, #2
 800a3fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a400:	e023      	b.n	800a44a <HAL_TIM_PWM_Start+0xfe>
 800a402:	683b      	ldr	r3, [r7, #0]
 800a404:	2b04      	cmp	r3, #4
 800a406:	d104      	bne.n	800a412 <HAL_TIM_PWM_Start+0xc6>
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	2202      	movs	r2, #2
 800a40c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a410:	e01b      	b.n	800a44a <HAL_TIM_PWM_Start+0xfe>
 800a412:	683b      	ldr	r3, [r7, #0]
 800a414:	2b08      	cmp	r3, #8
 800a416:	d104      	bne.n	800a422 <HAL_TIM_PWM_Start+0xd6>
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	2202      	movs	r2, #2
 800a41c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a420:	e013      	b.n	800a44a <HAL_TIM_PWM_Start+0xfe>
 800a422:	683b      	ldr	r3, [r7, #0]
 800a424:	2b0c      	cmp	r3, #12
 800a426:	d104      	bne.n	800a432 <HAL_TIM_PWM_Start+0xe6>
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	2202      	movs	r2, #2
 800a42c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a430:	e00b      	b.n	800a44a <HAL_TIM_PWM_Start+0xfe>
 800a432:	683b      	ldr	r3, [r7, #0]
 800a434:	2b10      	cmp	r3, #16
 800a436:	d104      	bne.n	800a442 <HAL_TIM_PWM_Start+0xf6>
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	2202      	movs	r2, #2
 800a43c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a440:	e003      	b.n	800a44a <HAL_TIM_PWM_Start+0xfe>
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	2202      	movs	r2, #2
 800a446:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	681b      	ldr	r3, [r3, #0]
 800a44e:	2201      	movs	r2, #1
 800a450:	6839      	ldr	r1, [r7, #0]
 800a452:	4618      	mov	r0, r3
 800a454:	f001 fc5e 	bl	800bd14 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	681b      	ldr	r3, [r3, #0]
 800a45c:	4a38      	ldr	r2, [pc, #224]	; (800a540 <HAL_TIM_PWM_Start+0x1f4>)
 800a45e:	4293      	cmp	r3, r2
 800a460:	d013      	beq.n	800a48a <HAL_TIM_PWM_Start+0x13e>
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	681b      	ldr	r3, [r3, #0]
 800a466:	4a37      	ldr	r2, [pc, #220]	; (800a544 <HAL_TIM_PWM_Start+0x1f8>)
 800a468:	4293      	cmp	r3, r2
 800a46a:	d00e      	beq.n	800a48a <HAL_TIM_PWM_Start+0x13e>
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	681b      	ldr	r3, [r3, #0]
 800a470:	4a35      	ldr	r2, [pc, #212]	; (800a548 <HAL_TIM_PWM_Start+0x1fc>)
 800a472:	4293      	cmp	r3, r2
 800a474:	d009      	beq.n	800a48a <HAL_TIM_PWM_Start+0x13e>
 800a476:	687b      	ldr	r3, [r7, #4]
 800a478:	681b      	ldr	r3, [r3, #0]
 800a47a:	4a34      	ldr	r2, [pc, #208]	; (800a54c <HAL_TIM_PWM_Start+0x200>)
 800a47c:	4293      	cmp	r3, r2
 800a47e:	d004      	beq.n	800a48a <HAL_TIM_PWM_Start+0x13e>
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	681b      	ldr	r3, [r3, #0]
 800a484:	4a32      	ldr	r2, [pc, #200]	; (800a550 <HAL_TIM_PWM_Start+0x204>)
 800a486:	4293      	cmp	r3, r2
 800a488:	d101      	bne.n	800a48e <HAL_TIM_PWM_Start+0x142>
 800a48a:	2301      	movs	r3, #1
 800a48c:	e000      	b.n	800a490 <HAL_TIM_PWM_Start+0x144>
 800a48e:	2300      	movs	r3, #0
 800a490:	2b00      	cmp	r3, #0
 800a492:	d007      	beq.n	800a4a4 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	681b      	ldr	r3, [r3, #0]
 800a498:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	681b      	ldr	r3, [r3, #0]
 800a49e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800a4a2:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	681b      	ldr	r3, [r3, #0]
 800a4a8:	4a25      	ldr	r2, [pc, #148]	; (800a540 <HAL_TIM_PWM_Start+0x1f4>)
 800a4aa:	4293      	cmp	r3, r2
 800a4ac:	d022      	beq.n	800a4f4 <HAL_TIM_PWM_Start+0x1a8>
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	681b      	ldr	r3, [r3, #0]
 800a4b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a4b6:	d01d      	beq.n	800a4f4 <HAL_TIM_PWM_Start+0x1a8>
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	681b      	ldr	r3, [r3, #0]
 800a4bc:	4a25      	ldr	r2, [pc, #148]	; (800a554 <HAL_TIM_PWM_Start+0x208>)
 800a4be:	4293      	cmp	r3, r2
 800a4c0:	d018      	beq.n	800a4f4 <HAL_TIM_PWM_Start+0x1a8>
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	681b      	ldr	r3, [r3, #0]
 800a4c6:	4a24      	ldr	r2, [pc, #144]	; (800a558 <HAL_TIM_PWM_Start+0x20c>)
 800a4c8:	4293      	cmp	r3, r2
 800a4ca:	d013      	beq.n	800a4f4 <HAL_TIM_PWM_Start+0x1a8>
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	681b      	ldr	r3, [r3, #0]
 800a4d0:	4a22      	ldr	r2, [pc, #136]	; (800a55c <HAL_TIM_PWM_Start+0x210>)
 800a4d2:	4293      	cmp	r3, r2
 800a4d4:	d00e      	beq.n	800a4f4 <HAL_TIM_PWM_Start+0x1a8>
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	681b      	ldr	r3, [r3, #0]
 800a4da:	4a1a      	ldr	r2, [pc, #104]	; (800a544 <HAL_TIM_PWM_Start+0x1f8>)
 800a4dc:	4293      	cmp	r3, r2
 800a4de:	d009      	beq.n	800a4f4 <HAL_TIM_PWM_Start+0x1a8>
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	681b      	ldr	r3, [r3, #0]
 800a4e4:	4a1e      	ldr	r2, [pc, #120]	; (800a560 <HAL_TIM_PWM_Start+0x214>)
 800a4e6:	4293      	cmp	r3, r2
 800a4e8:	d004      	beq.n	800a4f4 <HAL_TIM_PWM_Start+0x1a8>
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	681b      	ldr	r3, [r3, #0]
 800a4ee:	4a16      	ldr	r2, [pc, #88]	; (800a548 <HAL_TIM_PWM_Start+0x1fc>)
 800a4f0:	4293      	cmp	r3, r2
 800a4f2:	d115      	bne.n	800a520 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	681b      	ldr	r3, [r3, #0]
 800a4f8:	689a      	ldr	r2, [r3, #8]
 800a4fa:	4b1a      	ldr	r3, [pc, #104]	; (800a564 <HAL_TIM_PWM_Start+0x218>)
 800a4fc:	4013      	ands	r3, r2
 800a4fe:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a500:	68fb      	ldr	r3, [r7, #12]
 800a502:	2b06      	cmp	r3, #6
 800a504:	d015      	beq.n	800a532 <HAL_TIM_PWM_Start+0x1e6>
 800a506:	68fb      	ldr	r3, [r7, #12]
 800a508:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a50c:	d011      	beq.n	800a532 <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	681b      	ldr	r3, [r3, #0]
 800a512:	681a      	ldr	r2, [r3, #0]
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	681b      	ldr	r3, [r3, #0]
 800a518:	f042 0201 	orr.w	r2, r2, #1
 800a51c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a51e:	e008      	b.n	800a532 <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	681b      	ldr	r3, [r3, #0]
 800a524:	681a      	ldr	r2, [r3, #0]
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	681b      	ldr	r3, [r3, #0]
 800a52a:	f042 0201 	orr.w	r2, r2, #1
 800a52e:	601a      	str	r2, [r3, #0]
 800a530:	e000      	b.n	800a534 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a532:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800a534:	2300      	movs	r3, #0
}
 800a536:	4618      	mov	r0, r3
 800a538:	3710      	adds	r7, #16
 800a53a:	46bd      	mov	sp, r7
 800a53c:	bd80      	pop	{r7, pc}
 800a53e:	bf00      	nop
 800a540:	40010000 	.word	0x40010000
 800a544:	40010400 	.word	0x40010400
 800a548:	40014000 	.word	0x40014000
 800a54c:	40014400 	.word	0x40014400
 800a550:	40014800 	.word	0x40014800
 800a554:	40000400 	.word	0x40000400
 800a558:	40000800 	.word	0x40000800
 800a55c:	40000c00 	.word	0x40000c00
 800a560:	40001800 	.word	0x40001800
 800a564:	00010007 	.word	0x00010007

0800a568 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800a568:	b580      	push	{r7, lr}
 800a56a:	b082      	sub	sp, #8
 800a56c:	af00      	add	r7, sp, #0
 800a56e:	6078      	str	r0, [r7, #4]
 800a570:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	681b      	ldr	r3, [r3, #0]
 800a576:	2200      	movs	r2, #0
 800a578:	6839      	ldr	r1, [r7, #0]
 800a57a:	4618      	mov	r0, r3
 800a57c:	f001 fbca 	bl	800bd14 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	681b      	ldr	r3, [r3, #0]
 800a584:	4a3e      	ldr	r2, [pc, #248]	; (800a680 <HAL_TIM_PWM_Stop+0x118>)
 800a586:	4293      	cmp	r3, r2
 800a588:	d013      	beq.n	800a5b2 <HAL_TIM_PWM_Stop+0x4a>
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	681b      	ldr	r3, [r3, #0]
 800a58e:	4a3d      	ldr	r2, [pc, #244]	; (800a684 <HAL_TIM_PWM_Stop+0x11c>)
 800a590:	4293      	cmp	r3, r2
 800a592:	d00e      	beq.n	800a5b2 <HAL_TIM_PWM_Stop+0x4a>
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	681b      	ldr	r3, [r3, #0]
 800a598:	4a3b      	ldr	r2, [pc, #236]	; (800a688 <HAL_TIM_PWM_Stop+0x120>)
 800a59a:	4293      	cmp	r3, r2
 800a59c:	d009      	beq.n	800a5b2 <HAL_TIM_PWM_Stop+0x4a>
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	681b      	ldr	r3, [r3, #0]
 800a5a2:	4a3a      	ldr	r2, [pc, #232]	; (800a68c <HAL_TIM_PWM_Stop+0x124>)
 800a5a4:	4293      	cmp	r3, r2
 800a5a6:	d004      	beq.n	800a5b2 <HAL_TIM_PWM_Stop+0x4a>
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	681b      	ldr	r3, [r3, #0]
 800a5ac:	4a38      	ldr	r2, [pc, #224]	; (800a690 <HAL_TIM_PWM_Stop+0x128>)
 800a5ae:	4293      	cmp	r3, r2
 800a5b0:	d101      	bne.n	800a5b6 <HAL_TIM_PWM_Stop+0x4e>
 800a5b2:	2301      	movs	r3, #1
 800a5b4:	e000      	b.n	800a5b8 <HAL_TIM_PWM_Stop+0x50>
 800a5b6:	2300      	movs	r3, #0
 800a5b8:	2b00      	cmp	r3, #0
 800a5ba:	d017      	beq.n	800a5ec <HAL_TIM_PWM_Stop+0x84>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	681b      	ldr	r3, [r3, #0]
 800a5c0:	6a1a      	ldr	r2, [r3, #32]
 800a5c2:	f241 1311 	movw	r3, #4369	; 0x1111
 800a5c6:	4013      	ands	r3, r2
 800a5c8:	2b00      	cmp	r3, #0
 800a5ca:	d10f      	bne.n	800a5ec <HAL_TIM_PWM_Stop+0x84>
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	681b      	ldr	r3, [r3, #0]
 800a5d0:	6a1a      	ldr	r2, [r3, #32]
 800a5d2:	f240 4344 	movw	r3, #1092	; 0x444
 800a5d6:	4013      	ands	r3, r2
 800a5d8:	2b00      	cmp	r3, #0
 800a5da:	d107      	bne.n	800a5ec <HAL_TIM_PWM_Stop+0x84>
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	681b      	ldr	r3, [r3, #0]
 800a5e0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	681b      	ldr	r3, [r3, #0]
 800a5e6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800a5ea:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	681b      	ldr	r3, [r3, #0]
 800a5f0:	6a1a      	ldr	r2, [r3, #32]
 800a5f2:	f241 1311 	movw	r3, #4369	; 0x1111
 800a5f6:	4013      	ands	r3, r2
 800a5f8:	2b00      	cmp	r3, #0
 800a5fa:	d10f      	bne.n	800a61c <HAL_TIM_PWM_Stop+0xb4>
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	681b      	ldr	r3, [r3, #0]
 800a600:	6a1a      	ldr	r2, [r3, #32]
 800a602:	f240 4344 	movw	r3, #1092	; 0x444
 800a606:	4013      	ands	r3, r2
 800a608:	2b00      	cmp	r3, #0
 800a60a:	d107      	bne.n	800a61c <HAL_TIM_PWM_Stop+0xb4>
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	681b      	ldr	r3, [r3, #0]
 800a610:	681a      	ldr	r2, [r3, #0]
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	681b      	ldr	r3, [r3, #0]
 800a616:	f022 0201 	bic.w	r2, r2, #1
 800a61a:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800a61c:	683b      	ldr	r3, [r7, #0]
 800a61e:	2b00      	cmp	r3, #0
 800a620:	d104      	bne.n	800a62c <HAL_TIM_PWM_Stop+0xc4>
 800a622:	687b      	ldr	r3, [r7, #4]
 800a624:	2201      	movs	r2, #1
 800a626:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a62a:	e023      	b.n	800a674 <HAL_TIM_PWM_Stop+0x10c>
 800a62c:	683b      	ldr	r3, [r7, #0]
 800a62e:	2b04      	cmp	r3, #4
 800a630:	d104      	bne.n	800a63c <HAL_TIM_PWM_Stop+0xd4>
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	2201      	movs	r2, #1
 800a636:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a63a:	e01b      	b.n	800a674 <HAL_TIM_PWM_Stop+0x10c>
 800a63c:	683b      	ldr	r3, [r7, #0]
 800a63e:	2b08      	cmp	r3, #8
 800a640:	d104      	bne.n	800a64c <HAL_TIM_PWM_Stop+0xe4>
 800a642:	687b      	ldr	r3, [r7, #4]
 800a644:	2201      	movs	r2, #1
 800a646:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a64a:	e013      	b.n	800a674 <HAL_TIM_PWM_Stop+0x10c>
 800a64c:	683b      	ldr	r3, [r7, #0]
 800a64e:	2b0c      	cmp	r3, #12
 800a650:	d104      	bne.n	800a65c <HAL_TIM_PWM_Stop+0xf4>
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	2201      	movs	r2, #1
 800a656:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a65a:	e00b      	b.n	800a674 <HAL_TIM_PWM_Stop+0x10c>
 800a65c:	683b      	ldr	r3, [r7, #0]
 800a65e:	2b10      	cmp	r3, #16
 800a660:	d104      	bne.n	800a66c <HAL_TIM_PWM_Stop+0x104>
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	2201      	movs	r2, #1
 800a666:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a66a:	e003      	b.n	800a674 <HAL_TIM_PWM_Stop+0x10c>
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	2201      	movs	r2, #1
 800a670:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Return function status */
  return HAL_OK;
 800a674:	2300      	movs	r3, #0
}
 800a676:	4618      	mov	r0, r3
 800a678:	3708      	adds	r7, #8
 800a67a:	46bd      	mov	sp, r7
 800a67c:	bd80      	pop	{r7, pc}
 800a67e:	bf00      	nop
 800a680:	40010000 	.word	0x40010000
 800a684:	40010400 	.word	0x40010400
 800a688:	40014000 	.word	0x40014000
 800a68c:	40014400 	.word	0x40014400
 800a690:	40014800 	.word	0x40014800

0800a694 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 800a694:	b580      	push	{r7, lr}
 800a696:	b082      	sub	sp, #8
 800a698:	af00      	add	r7, sp, #0
 800a69a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	2b00      	cmp	r3, #0
 800a6a0:	d101      	bne.n	800a6a6 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800a6a2:	2301      	movs	r3, #1
 800a6a4:	e049      	b.n	800a73a <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a6a6:	687b      	ldr	r3, [r7, #4]
 800a6a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a6ac:	b2db      	uxtb	r3, r3
 800a6ae:	2b00      	cmp	r3, #0
 800a6b0:	d106      	bne.n	800a6c0 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a6b2:	687b      	ldr	r3, [r7, #4]
 800a6b4:	2200      	movs	r2, #0
 800a6b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800a6ba:	6878      	ldr	r0, [r7, #4]
 800a6bc:	f000 f841 	bl	800a742 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	2202      	movs	r2, #2
 800a6c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	681a      	ldr	r2, [r3, #0]
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	3304      	adds	r3, #4
 800a6d0:	4619      	mov	r1, r3
 800a6d2:	4610      	mov	r0, r2
 800a6d4:	f000 fde6 	bl	800b2a4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	2201      	movs	r2, #1
 800a6dc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a6e0:	687b      	ldr	r3, [r7, #4]
 800a6e2:	2201      	movs	r2, #1
 800a6e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	2201      	movs	r2, #1
 800a6ec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	2201      	movs	r2, #1
 800a6f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	2201      	movs	r2, #1
 800a6fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	2201      	movs	r2, #1
 800a704:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	2201      	movs	r2, #1
 800a70c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	2201      	movs	r2, #1
 800a714:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	2201      	movs	r2, #1
 800a71c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	2201      	movs	r2, #1
 800a724:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	2201      	movs	r2, #1
 800a72c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	2201      	movs	r2, #1
 800a734:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a738:	2300      	movs	r3, #0
}
 800a73a:	4618      	mov	r0, r3
 800a73c:	3708      	adds	r7, #8
 800a73e:	46bd      	mov	sp, r7
 800a740:	bd80      	pop	{r7, pc}

0800a742 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 800a742:	b480      	push	{r7}
 800a744:	b083      	sub	sp, #12
 800a746:	af00      	add	r7, sp, #0
 800a748:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 800a74a:	bf00      	nop
 800a74c:	370c      	adds	r7, #12
 800a74e:	46bd      	mov	sp, r7
 800a750:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a754:	4770      	bx	lr

0800a756 <HAL_TIM_IC_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800a756:	b580      	push	{r7, lr}
 800a758:	b082      	sub	sp, #8
 800a75a:	af00      	add	r7, sp, #0
 800a75c:	6078      	str	r0, [r7, #4]
 800a75e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	681b      	ldr	r3, [r3, #0]
 800a764:	2200      	movs	r2, #0
 800a766:	6839      	ldr	r1, [r7, #0]
 800a768:	4618      	mov	r0, r3
 800a76a:	f001 fad3 	bl	800bd14 <TIM_CCxChannelCmd>

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800a76e:	687b      	ldr	r3, [r7, #4]
 800a770:	681b      	ldr	r3, [r3, #0]
 800a772:	6a1a      	ldr	r2, [r3, #32]
 800a774:	f241 1311 	movw	r3, #4369	; 0x1111
 800a778:	4013      	ands	r3, r2
 800a77a:	2b00      	cmp	r3, #0
 800a77c:	d10f      	bne.n	800a79e <HAL_TIM_IC_Stop+0x48>
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	681b      	ldr	r3, [r3, #0]
 800a782:	6a1a      	ldr	r2, [r3, #32]
 800a784:	f240 4344 	movw	r3, #1092	; 0x444
 800a788:	4013      	ands	r3, r2
 800a78a:	2b00      	cmp	r3, #0
 800a78c:	d107      	bne.n	800a79e <HAL_TIM_IC_Stop+0x48>
 800a78e:	687b      	ldr	r3, [r7, #4]
 800a790:	681b      	ldr	r3, [r3, #0]
 800a792:	681a      	ldr	r2, [r3, #0]
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	681b      	ldr	r3, [r3, #0]
 800a798:	f022 0201 	bic.w	r2, r2, #1
 800a79c:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800a79e:	683b      	ldr	r3, [r7, #0]
 800a7a0:	2b00      	cmp	r3, #0
 800a7a2:	d104      	bne.n	800a7ae <HAL_TIM_IC_Stop+0x58>
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	2201      	movs	r2, #1
 800a7a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a7ac:	e023      	b.n	800a7f6 <HAL_TIM_IC_Stop+0xa0>
 800a7ae:	683b      	ldr	r3, [r7, #0]
 800a7b0:	2b04      	cmp	r3, #4
 800a7b2:	d104      	bne.n	800a7be <HAL_TIM_IC_Stop+0x68>
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	2201      	movs	r2, #1
 800a7b8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a7bc:	e01b      	b.n	800a7f6 <HAL_TIM_IC_Stop+0xa0>
 800a7be:	683b      	ldr	r3, [r7, #0]
 800a7c0:	2b08      	cmp	r3, #8
 800a7c2:	d104      	bne.n	800a7ce <HAL_TIM_IC_Stop+0x78>
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	2201      	movs	r2, #1
 800a7c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a7cc:	e013      	b.n	800a7f6 <HAL_TIM_IC_Stop+0xa0>
 800a7ce:	683b      	ldr	r3, [r7, #0]
 800a7d0:	2b0c      	cmp	r3, #12
 800a7d2:	d104      	bne.n	800a7de <HAL_TIM_IC_Stop+0x88>
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	2201      	movs	r2, #1
 800a7d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a7dc:	e00b      	b.n	800a7f6 <HAL_TIM_IC_Stop+0xa0>
 800a7de:	683b      	ldr	r3, [r7, #0]
 800a7e0:	2b10      	cmp	r3, #16
 800a7e2:	d104      	bne.n	800a7ee <HAL_TIM_IC_Stop+0x98>
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	2201      	movs	r2, #1
 800a7e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a7ec:	e003      	b.n	800a7f6 <HAL_TIM_IC_Stop+0xa0>
 800a7ee:	687b      	ldr	r3, [r7, #4]
 800a7f0:	2201      	movs	r2, #1
 800a7f2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800a7f6:	683b      	ldr	r3, [r7, #0]
 800a7f8:	2b00      	cmp	r3, #0
 800a7fa:	d104      	bne.n	800a806 <HAL_TIM_IC_Stop+0xb0>
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	2201      	movs	r2, #1
 800a800:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a804:	e013      	b.n	800a82e <HAL_TIM_IC_Stop+0xd8>
 800a806:	683b      	ldr	r3, [r7, #0]
 800a808:	2b04      	cmp	r3, #4
 800a80a:	d104      	bne.n	800a816 <HAL_TIM_IC_Stop+0xc0>
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	2201      	movs	r2, #1
 800a810:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a814:	e00b      	b.n	800a82e <HAL_TIM_IC_Stop+0xd8>
 800a816:	683b      	ldr	r3, [r7, #0]
 800a818:	2b08      	cmp	r3, #8
 800a81a:	d104      	bne.n	800a826 <HAL_TIM_IC_Stop+0xd0>
 800a81c:	687b      	ldr	r3, [r7, #4]
 800a81e:	2201      	movs	r2, #1
 800a820:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800a824:	e003      	b.n	800a82e <HAL_TIM_IC_Stop+0xd8>
 800a826:	687b      	ldr	r3, [r7, #4]
 800a828:	2201      	movs	r2, #1
 800a82a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Return function status */
  return HAL_OK;
 800a82e:	2300      	movs	r3, #0
}
 800a830:	4618      	mov	r0, r3
 800a832:	3708      	adds	r7, #8
 800a834:	46bd      	mov	sp, r7
 800a836:	bd80      	pop	{r7, pc}

0800a838 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800a838:	b580      	push	{r7, lr}
 800a83a:	b084      	sub	sp, #16
 800a83c:	af00      	add	r7, sp, #0
 800a83e:	6078      	str	r0, [r7, #4]
 800a840:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a842:	2300      	movs	r3, #0
 800a844:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800a846:	683b      	ldr	r3, [r7, #0]
 800a848:	2b00      	cmp	r3, #0
 800a84a:	d104      	bne.n	800a856 <HAL_TIM_IC_Start_IT+0x1e>
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a852:	b2db      	uxtb	r3, r3
 800a854:	e023      	b.n	800a89e <HAL_TIM_IC_Start_IT+0x66>
 800a856:	683b      	ldr	r3, [r7, #0]
 800a858:	2b04      	cmp	r3, #4
 800a85a:	d104      	bne.n	800a866 <HAL_TIM_IC_Start_IT+0x2e>
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800a862:	b2db      	uxtb	r3, r3
 800a864:	e01b      	b.n	800a89e <HAL_TIM_IC_Start_IT+0x66>
 800a866:	683b      	ldr	r3, [r7, #0]
 800a868:	2b08      	cmp	r3, #8
 800a86a:	d104      	bne.n	800a876 <HAL_TIM_IC_Start_IT+0x3e>
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800a872:	b2db      	uxtb	r3, r3
 800a874:	e013      	b.n	800a89e <HAL_TIM_IC_Start_IT+0x66>
 800a876:	683b      	ldr	r3, [r7, #0]
 800a878:	2b0c      	cmp	r3, #12
 800a87a:	d104      	bne.n	800a886 <HAL_TIM_IC_Start_IT+0x4e>
 800a87c:	687b      	ldr	r3, [r7, #4]
 800a87e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a882:	b2db      	uxtb	r3, r3
 800a884:	e00b      	b.n	800a89e <HAL_TIM_IC_Start_IT+0x66>
 800a886:	683b      	ldr	r3, [r7, #0]
 800a888:	2b10      	cmp	r3, #16
 800a88a:	d104      	bne.n	800a896 <HAL_TIM_IC_Start_IT+0x5e>
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800a892:	b2db      	uxtb	r3, r3
 800a894:	e003      	b.n	800a89e <HAL_TIM_IC_Start_IT+0x66>
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800a89c:	b2db      	uxtb	r3, r3
 800a89e:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 800a8a0:	683b      	ldr	r3, [r7, #0]
 800a8a2:	2b00      	cmp	r3, #0
 800a8a4:	d104      	bne.n	800a8b0 <HAL_TIM_IC_Start_IT+0x78>
 800a8a6:	687b      	ldr	r3, [r7, #4]
 800a8a8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a8ac:	b2db      	uxtb	r3, r3
 800a8ae:	e013      	b.n	800a8d8 <HAL_TIM_IC_Start_IT+0xa0>
 800a8b0:	683b      	ldr	r3, [r7, #0]
 800a8b2:	2b04      	cmp	r3, #4
 800a8b4:	d104      	bne.n	800a8c0 <HAL_TIM_IC_Start_IT+0x88>
 800a8b6:	687b      	ldr	r3, [r7, #4]
 800a8b8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a8bc:	b2db      	uxtb	r3, r3
 800a8be:	e00b      	b.n	800a8d8 <HAL_TIM_IC_Start_IT+0xa0>
 800a8c0:	683b      	ldr	r3, [r7, #0]
 800a8c2:	2b08      	cmp	r3, #8
 800a8c4:	d104      	bne.n	800a8d0 <HAL_TIM_IC_Start_IT+0x98>
 800a8c6:	687b      	ldr	r3, [r7, #4]
 800a8c8:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800a8cc:	b2db      	uxtb	r3, r3
 800a8ce:	e003      	b.n	800a8d8 <HAL_TIM_IC_Start_IT+0xa0>
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 800a8d6:	b2db      	uxtb	r3, r3
 800a8d8:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 800a8da:	7bbb      	ldrb	r3, [r7, #14]
 800a8dc:	2b01      	cmp	r3, #1
 800a8de:	d102      	bne.n	800a8e6 <HAL_TIM_IC_Start_IT+0xae>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 800a8e0:	7b7b      	ldrb	r3, [r7, #13]
 800a8e2:	2b01      	cmp	r3, #1
 800a8e4:	d001      	beq.n	800a8ea <HAL_TIM_IC_Start_IT+0xb2>
  {
    return HAL_ERROR;
 800a8e6:	2301      	movs	r3, #1
 800a8e8:	e0e2      	b.n	800aab0 <HAL_TIM_IC_Start_IT+0x278>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800a8ea:	683b      	ldr	r3, [r7, #0]
 800a8ec:	2b00      	cmp	r3, #0
 800a8ee:	d104      	bne.n	800a8fa <HAL_TIM_IC_Start_IT+0xc2>
 800a8f0:	687b      	ldr	r3, [r7, #4]
 800a8f2:	2202      	movs	r2, #2
 800a8f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a8f8:	e023      	b.n	800a942 <HAL_TIM_IC_Start_IT+0x10a>
 800a8fa:	683b      	ldr	r3, [r7, #0]
 800a8fc:	2b04      	cmp	r3, #4
 800a8fe:	d104      	bne.n	800a90a <HAL_TIM_IC_Start_IT+0xd2>
 800a900:	687b      	ldr	r3, [r7, #4]
 800a902:	2202      	movs	r2, #2
 800a904:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a908:	e01b      	b.n	800a942 <HAL_TIM_IC_Start_IT+0x10a>
 800a90a:	683b      	ldr	r3, [r7, #0]
 800a90c:	2b08      	cmp	r3, #8
 800a90e:	d104      	bne.n	800a91a <HAL_TIM_IC_Start_IT+0xe2>
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	2202      	movs	r2, #2
 800a914:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a918:	e013      	b.n	800a942 <HAL_TIM_IC_Start_IT+0x10a>
 800a91a:	683b      	ldr	r3, [r7, #0]
 800a91c:	2b0c      	cmp	r3, #12
 800a91e:	d104      	bne.n	800a92a <HAL_TIM_IC_Start_IT+0xf2>
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	2202      	movs	r2, #2
 800a924:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a928:	e00b      	b.n	800a942 <HAL_TIM_IC_Start_IT+0x10a>
 800a92a:	683b      	ldr	r3, [r7, #0]
 800a92c:	2b10      	cmp	r3, #16
 800a92e:	d104      	bne.n	800a93a <HAL_TIM_IC_Start_IT+0x102>
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	2202      	movs	r2, #2
 800a934:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a938:	e003      	b.n	800a942 <HAL_TIM_IC_Start_IT+0x10a>
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	2202      	movs	r2, #2
 800a93e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800a942:	683b      	ldr	r3, [r7, #0]
 800a944:	2b00      	cmp	r3, #0
 800a946:	d104      	bne.n	800a952 <HAL_TIM_IC_Start_IT+0x11a>
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	2202      	movs	r2, #2
 800a94c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a950:	e013      	b.n	800a97a <HAL_TIM_IC_Start_IT+0x142>
 800a952:	683b      	ldr	r3, [r7, #0]
 800a954:	2b04      	cmp	r3, #4
 800a956:	d104      	bne.n	800a962 <HAL_TIM_IC_Start_IT+0x12a>
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	2202      	movs	r2, #2
 800a95c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a960:	e00b      	b.n	800a97a <HAL_TIM_IC_Start_IT+0x142>
 800a962:	683b      	ldr	r3, [r7, #0]
 800a964:	2b08      	cmp	r3, #8
 800a966:	d104      	bne.n	800a972 <HAL_TIM_IC_Start_IT+0x13a>
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	2202      	movs	r2, #2
 800a96c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800a970:	e003      	b.n	800a97a <HAL_TIM_IC_Start_IT+0x142>
 800a972:	687b      	ldr	r3, [r7, #4]
 800a974:	2202      	movs	r2, #2
 800a976:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  switch (Channel)
 800a97a:	683b      	ldr	r3, [r7, #0]
 800a97c:	2b0c      	cmp	r3, #12
 800a97e:	d841      	bhi.n	800aa04 <HAL_TIM_IC_Start_IT+0x1cc>
 800a980:	a201      	add	r2, pc, #4	; (adr r2, 800a988 <HAL_TIM_IC_Start_IT+0x150>)
 800a982:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a986:	bf00      	nop
 800a988:	0800a9bd 	.word	0x0800a9bd
 800a98c:	0800aa05 	.word	0x0800aa05
 800a990:	0800aa05 	.word	0x0800aa05
 800a994:	0800aa05 	.word	0x0800aa05
 800a998:	0800a9cf 	.word	0x0800a9cf
 800a99c:	0800aa05 	.word	0x0800aa05
 800a9a0:	0800aa05 	.word	0x0800aa05
 800a9a4:	0800aa05 	.word	0x0800aa05
 800a9a8:	0800a9e1 	.word	0x0800a9e1
 800a9ac:	0800aa05 	.word	0x0800aa05
 800a9b0:	0800aa05 	.word	0x0800aa05
 800a9b4:	0800aa05 	.word	0x0800aa05
 800a9b8:	0800a9f3 	.word	0x0800a9f3
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	681b      	ldr	r3, [r3, #0]
 800a9c0:	68da      	ldr	r2, [r3, #12]
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	681b      	ldr	r3, [r3, #0]
 800a9c6:	f042 0202 	orr.w	r2, r2, #2
 800a9ca:	60da      	str	r2, [r3, #12]
      break;
 800a9cc:	e01d      	b.n	800aa0a <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800a9ce:	687b      	ldr	r3, [r7, #4]
 800a9d0:	681b      	ldr	r3, [r3, #0]
 800a9d2:	68da      	ldr	r2, [r3, #12]
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	681b      	ldr	r3, [r3, #0]
 800a9d8:	f042 0204 	orr.w	r2, r2, #4
 800a9dc:	60da      	str	r2, [r3, #12]
      break;
 800a9de:	e014      	b.n	800aa0a <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800a9e0:	687b      	ldr	r3, [r7, #4]
 800a9e2:	681b      	ldr	r3, [r3, #0]
 800a9e4:	68da      	ldr	r2, [r3, #12]
 800a9e6:	687b      	ldr	r3, [r7, #4]
 800a9e8:	681b      	ldr	r3, [r3, #0]
 800a9ea:	f042 0208 	orr.w	r2, r2, #8
 800a9ee:	60da      	str	r2, [r3, #12]
      break;
 800a9f0:	e00b      	b.n	800aa0a <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	681b      	ldr	r3, [r3, #0]
 800a9f6:	68da      	ldr	r2, [r3, #12]
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	681b      	ldr	r3, [r3, #0]
 800a9fc:	f042 0210 	orr.w	r2, r2, #16
 800aa00:	60da      	str	r2, [r3, #12]
      break;
 800aa02:	e002      	b.n	800aa0a <HAL_TIM_IC_Start_IT+0x1d2>
    }

    default:
      status = HAL_ERROR;
 800aa04:	2301      	movs	r3, #1
 800aa06:	73fb      	strb	r3, [r7, #15]
      break;
 800aa08:	bf00      	nop
  }

  if (status == HAL_OK)
 800aa0a:	7bfb      	ldrb	r3, [r7, #15]
 800aa0c:	2b00      	cmp	r3, #0
 800aa0e:	d14e      	bne.n	800aaae <HAL_TIM_IC_Start_IT+0x276>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800aa10:	687b      	ldr	r3, [r7, #4]
 800aa12:	681b      	ldr	r3, [r3, #0]
 800aa14:	2201      	movs	r2, #1
 800aa16:	6839      	ldr	r1, [r7, #0]
 800aa18:	4618      	mov	r0, r3
 800aa1a:	f001 f97b 	bl	800bd14 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	681b      	ldr	r3, [r3, #0]
 800aa22:	4a25      	ldr	r2, [pc, #148]	; (800aab8 <HAL_TIM_IC_Start_IT+0x280>)
 800aa24:	4293      	cmp	r3, r2
 800aa26:	d022      	beq.n	800aa6e <HAL_TIM_IC_Start_IT+0x236>
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	681b      	ldr	r3, [r3, #0]
 800aa2c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800aa30:	d01d      	beq.n	800aa6e <HAL_TIM_IC_Start_IT+0x236>
 800aa32:	687b      	ldr	r3, [r7, #4]
 800aa34:	681b      	ldr	r3, [r3, #0]
 800aa36:	4a21      	ldr	r2, [pc, #132]	; (800aabc <HAL_TIM_IC_Start_IT+0x284>)
 800aa38:	4293      	cmp	r3, r2
 800aa3a:	d018      	beq.n	800aa6e <HAL_TIM_IC_Start_IT+0x236>
 800aa3c:	687b      	ldr	r3, [r7, #4]
 800aa3e:	681b      	ldr	r3, [r3, #0]
 800aa40:	4a1f      	ldr	r2, [pc, #124]	; (800aac0 <HAL_TIM_IC_Start_IT+0x288>)
 800aa42:	4293      	cmp	r3, r2
 800aa44:	d013      	beq.n	800aa6e <HAL_TIM_IC_Start_IT+0x236>
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	681b      	ldr	r3, [r3, #0]
 800aa4a:	4a1e      	ldr	r2, [pc, #120]	; (800aac4 <HAL_TIM_IC_Start_IT+0x28c>)
 800aa4c:	4293      	cmp	r3, r2
 800aa4e:	d00e      	beq.n	800aa6e <HAL_TIM_IC_Start_IT+0x236>
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	681b      	ldr	r3, [r3, #0]
 800aa54:	4a1c      	ldr	r2, [pc, #112]	; (800aac8 <HAL_TIM_IC_Start_IT+0x290>)
 800aa56:	4293      	cmp	r3, r2
 800aa58:	d009      	beq.n	800aa6e <HAL_TIM_IC_Start_IT+0x236>
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	681b      	ldr	r3, [r3, #0]
 800aa5e:	4a1b      	ldr	r2, [pc, #108]	; (800aacc <HAL_TIM_IC_Start_IT+0x294>)
 800aa60:	4293      	cmp	r3, r2
 800aa62:	d004      	beq.n	800aa6e <HAL_TIM_IC_Start_IT+0x236>
 800aa64:	687b      	ldr	r3, [r7, #4]
 800aa66:	681b      	ldr	r3, [r3, #0]
 800aa68:	4a19      	ldr	r2, [pc, #100]	; (800aad0 <HAL_TIM_IC_Start_IT+0x298>)
 800aa6a:	4293      	cmp	r3, r2
 800aa6c:	d115      	bne.n	800aa9a <HAL_TIM_IC_Start_IT+0x262>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800aa6e:	687b      	ldr	r3, [r7, #4]
 800aa70:	681b      	ldr	r3, [r3, #0]
 800aa72:	689a      	ldr	r2, [r3, #8]
 800aa74:	4b17      	ldr	r3, [pc, #92]	; (800aad4 <HAL_TIM_IC_Start_IT+0x29c>)
 800aa76:	4013      	ands	r3, r2
 800aa78:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800aa7a:	68bb      	ldr	r3, [r7, #8]
 800aa7c:	2b06      	cmp	r3, #6
 800aa7e:	d015      	beq.n	800aaac <HAL_TIM_IC_Start_IT+0x274>
 800aa80:	68bb      	ldr	r3, [r7, #8]
 800aa82:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800aa86:	d011      	beq.n	800aaac <HAL_TIM_IC_Start_IT+0x274>
      {
        __HAL_TIM_ENABLE(htim);
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	681b      	ldr	r3, [r3, #0]
 800aa8c:	681a      	ldr	r2, [r3, #0]
 800aa8e:	687b      	ldr	r3, [r7, #4]
 800aa90:	681b      	ldr	r3, [r3, #0]
 800aa92:	f042 0201 	orr.w	r2, r2, #1
 800aa96:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800aa98:	e008      	b.n	800aaac <HAL_TIM_IC_Start_IT+0x274>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	681b      	ldr	r3, [r3, #0]
 800aa9e:	681a      	ldr	r2, [r3, #0]
 800aaa0:	687b      	ldr	r3, [r7, #4]
 800aaa2:	681b      	ldr	r3, [r3, #0]
 800aaa4:	f042 0201 	orr.w	r2, r2, #1
 800aaa8:	601a      	str	r2, [r3, #0]
 800aaaa:	e000      	b.n	800aaae <HAL_TIM_IC_Start_IT+0x276>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800aaac:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 800aaae:	7bfb      	ldrb	r3, [r7, #15]
}
 800aab0:	4618      	mov	r0, r3
 800aab2:	3710      	adds	r7, #16
 800aab4:	46bd      	mov	sp, r7
 800aab6:	bd80      	pop	{r7, pc}
 800aab8:	40010000 	.word	0x40010000
 800aabc:	40000400 	.word	0x40000400
 800aac0:	40000800 	.word	0x40000800
 800aac4:	40000c00 	.word	0x40000c00
 800aac8:	40010400 	.word	0x40010400
 800aacc:	40001800 	.word	0x40001800
 800aad0:	40014000 	.word	0x40014000
 800aad4:	00010007 	.word	0x00010007

0800aad8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800aad8:	b580      	push	{r7, lr}
 800aada:	b082      	sub	sp, #8
 800aadc:	af00      	add	r7, sp, #0
 800aade:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800aae0:	687b      	ldr	r3, [r7, #4]
 800aae2:	681b      	ldr	r3, [r3, #0]
 800aae4:	691b      	ldr	r3, [r3, #16]
 800aae6:	f003 0302 	and.w	r3, r3, #2
 800aaea:	2b02      	cmp	r3, #2
 800aaec:	d122      	bne.n	800ab34 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	681b      	ldr	r3, [r3, #0]
 800aaf2:	68db      	ldr	r3, [r3, #12]
 800aaf4:	f003 0302 	and.w	r3, r3, #2
 800aaf8:	2b02      	cmp	r3, #2
 800aafa:	d11b      	bne.n	800ab34 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800aafc:	687b      	ldr	r3, [r7, #4]
 800aafe:	681b      	ldr	r3, [r3, #0]
 800ab00:	f06f 0202 	mvn.w	r2, #2
 800ab04:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800ab06:	687b      	ldr	r3, [r7, #4]
 800ab08:	2201      	movs	r2, #1
 800ab0a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	681b      	ldr	r3, [r3, #0]
 800ab10:	699b      	ldr	r3, [r3, #24]
 800ab12:	f003 0303 	and.w	r3, r3, #3
 800ab16:	2b00      	cmp	r3, #0
 800ab18:	d003      	beq.n	800ab22 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800ab1a:	6878      	ldr	r0, [r7, #4]
 800ab1c:	f7f7 fff6 	bl	8002b0c <HAL_TIM_IC_CaptureCallback>
 800ab20:	e005      	b.n	800ab2e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800ab22:	6878      	ldr	r0, [r7, #4]
 800ab24:	f000 fba0 	bl	800b268 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ab28:	6878      	ldr	r0, [r7, #4]
 800ab2a:	f000 fba7 	bl	800b27c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ab2e:	687b      	ldr	r3, [r7, #4]
 800ab30:	2200      	movs	r2, #0
 800ab32:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800ab34:	687b      	ldr	r3, [r7, #4]
 800ab36:	681b      	ldr	r3, [r3, #0]
 800ab38:	691b      	ldr	r3, [r3, #16]
 800ab3a:	f003 0304 	and.w	r3, r3, #4
 800ab3e:	2b04      	cmp	r3, #4
 800ab40:	d122      	bne.n	800ab88 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800ab42:	687b      	ldr	r3, [r7, #4]
 800ab44:	681b      	ldr	r3, [r3, #0]
 800ab46:	68db      	ldr	r3, [r3, #12]
 800ab48:	f003 0304 	and.w	r3, r3, #4
 800ab4c:	2b04      	cmp	r3, #4
 800ab4e:	d11b      	bne.n	800ab88 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800ab50:	687b      	ldr	r3, [r7, #4]
 800ab52:	681b      	ldr	r3, [r3, #0]
 800ab54:	f06f 0204 	mvn.w	r2, #4
 800ab58:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800ab5a:	687b      	ldr	r3, [r7, #4]
 800ab5c:	2202      	movs	r2, #2
 800ab5e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800ab60:	687b      	ldr	r3, [r7, #4]
 800ab62:	681b      	ldr	r3, [r3, #0]
 800ab64:	699b      	ldr	r3, [r3, #24]
 800ab66:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ab6a:	2b00      	cmp	r3, #0
 800ab6c:	d003      	beq.n	800ab76 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ab6e:	6878      	ldr	r0, [r7, #4]
 800ab70:	f7f7 ffcc 	bl	8002b0c <HAL_TIM_IC_CaptureCallback>
 800ab74:	e005      	b.n	800ab82 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ab76:	6878      	ldr	r0, [r7, #4]
 800ab78:	f000 fb76 	bl	800b268 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ab7c:	6878      	ldr	r0, [r7, #4]
 800ab7e:	f000 fb7d 	bl	800b27c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ab82:	687b      	ldr	r3, [r7, #4]
 800ab84:	2200      	movs	r2, #0
 800ab86:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	681b      	ldr	r3, [r3, #0]
 800ab8c:	691b      	ldr	r3, [r3, #16]
 800ab8e:	f003 0308 	and.w	r3, r3, #8
 800ab92:	2b08      	cmp	r3, #8
 800ab94:	d122      	bne.n	800abdc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800ab96:	687b      	ldr	r3, [r7, #4]
 800ab98:	681b      	ldr	r3, [r3, #0]
 800ab9a:	68db      	ldr	r3, [r3, #12]
 800ab9c:	f003 0308 	and.w	r3, r3, #8
 800aba0:	2b08      	cmp	r3, #8
 800aba2:	d11b      	bne.n	800abdc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	681b      	ldr	r3, [r3, #0]
 800aba8:	f06f 0208 	mvn.w	r2, #8
 800abac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800abae:	687b      	ldr	r3, [r7, #4]
 800abb0:	2204      	movs	r2, #4
 800abb2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	681b      	ldr	r3, [r3, #0]
 800abb8:	69db      	ldr	r3, [r3, #28]
 800abba:	f003 0303 	and.w	r3, r3, #3
 800abbe:	2b00      	cmp	r3, #0
 800abc0:	d003      	beq.n	800abca <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800abc2:	6878      	ldr	r0, [r7, #4]
 800abc4:	f7f7 ffa2 	bl	8002b0c <HAL_TIM_IC_CaptureCallback>
 800abc8:	e005      	b.n	800abd6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800abca:	6878      	ldr	r0, [r7, #4]
 800abcc:	f000 fb4c 	bl	800b268 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800abd0:	6878      	ldr	r0, [r7, #4]
 800abd2:	f000 fb53 	bl	800b27c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800abd6:	687b      	ldr	r3, [r7, #4]
 800abd8:	2200      	movs	r2, #0
 800abda:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800abdc:	687b      	ldr	r3, [r7, #4]
 800abde:	681b      	ldr	r3, [r3, #0]
 800abe0:	691b      	ldr	r3, [r3, #16]
 800abe2:	f003 0310 	and.w	r3, r3, #16
 800abe6:	2b10      	cmp	r3, #16
 800abe8:	d122      	bne.n	800ac30 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	681b      	ldr	r3, [r3, #0]
 800abee:	68db      	ldr	r3, [r3, #12]
 800abf0:	f003 0310 	and.w	r3, r3, #16
 800abf4:	2b10      	cmp	r3, #16
 800abf6:	d11b      	bne.n	800ac30 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800abf8:	687b      	ldr	r3, [r7, #4]
 800abfa:	681b      	ldr	r3, [r3, #0]
 800abfc:	f06f 0210 	mvn.w	r2, #16
 800ac00:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800ac02:	687b      	ldr	r3, [r7, #4]
 800ac04:	2208      	movs	r2, #8
 800ac06:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	681b      	ldr	r3, [r3, #0]
 800ac0c:	69db      	ldr	r3, [r3, #28]
 800ac0e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ac12:	2b00      	cmp	r3, #0
 800ac14:	d003      	beq.n	800ac1e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ac16:	6878      	ldr	r0, [r7, #4]
 800ac18:	f7f7 ff78 	bl	8002b0c <HAL_TIM_IC_CaptureCallback>
 800ac1c:	e005      	b.n	800ac2a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ac1e:	6878      	ldr	r0, [r7, #4]
 800ac20:	f000 fb22 	bl	800b268 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ac24:	6878      	ldr	r0, [r7, #4]
 800ac26:	f000 fb29 	bl	800b27c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ac2a:	687b      	ldr	r3, [r7, #4]
 800ac2c:	2200      	movs	r2, #0
 800ac2e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800ac30:	687b      	ldr	r3, [r7, #4]
 800ac32:	681b      	ldr	r3, [r3, #0]
 800ac34:	691b      	ldr	r3, [r3, #16]
 800ac36:	f003 0301 	and.w	r3, r3, #1
 800ac3a:	2b01      	cmp	r3, #1
 800ac3c:	d10e      	bne.n	800ac5c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800ac3e:	687b      	ldr	r3, [r7, #4]
 800ac40:	681b      	ldr	r3, [r3, #0]
 800ac42:	68db      	ldr	r3, [r3, #12]
 800ac44:	f003 0301 	and.w	r3, r3, #1
 800ac48:	2b01      	cmp	r3, #1
 800ac4a:	d107      	bne.n	800ac5c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	681b      	ldr	r3, [r3, #0]
 800ac50:	f06f 0201 	mvn.w	r2, #1
 800ac54:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800ac56:	6878      	ldr	r0, [r7, #4]
 800ac58:	f7f7 ffaa 	bl	8002bb0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	681b      	ldr	r3, [r3, #0]
 800ac60:	691b      	ldr	r3, [r3, #16]
 800ac62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ac66:	2b80      	cmp	r3, #128	; 0x80
 800ac68:	d10e      	bne.n	800ac88 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	681b      	ldr	r3, [r3, #0]
 800ac6e:	68db      	ldr	r3, [r3, #12]
 800ac70:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ac74:	2b80      	cmp	r3, #128	; 0x80
 800ac76:	d107      	bne.n	800ac88 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	681b      	ldr	r3, [r3, #0]
 800ac7c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800ac80:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800ac82:	6878      	ldr	r0, [r7, #4]
 800ac84:	f001 f904 	bl	800be90 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800ac88:	687b      	ldr	r3, [r7, #4]
 800ac8a:	681b      	ldr	r3, [r3, #0]
 800ac8c:	691b      	ldr	r3, [r3, #16]
 800ac8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ac92:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ac96:	d10e      	bne.n	800acb6 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	681b      	ldr	r3, [r3, #0]
 800ac9c:	68db      	ldr	r3, [r3, #12]
 800ac9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800aca2:	2b80      	cmp	r3, #128	; 0x80
 800aca4:	d107      	bne.n	800acb6 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800aca6:	687b      	ldr	r3, [r7, #4]
 800aca8:	681b      	ldr	r3, [r3, #0]
 800acaa:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800acae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800acb0:	6878      	ldr	r0, [r7, #4]
 800acb2:	f001 f8f7 	bl	800bea4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800acb6:	687b      	ldr	r3, [r7, #4]
 800acb8:	681b      	ldr	r3, [r3, #0]
 800acba:	691b      	ldr	r3, [r3, #16]
 800acbc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800acc0:	2b40      	cmp	r3, #64	; 0x40
 800acc2:	d10e      	bne.n	800ace2 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800acc4:	687b      	ldr	r3, [r7, #4]
 800acc6:	681b      	ldr	r3, [r3, #0]
 800acc8:	68db      	ldr	r3, [r3, #12]
 800acca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800acce:	2b40      	cmp	r3, #64	; 0x40
 800acd0:	d107      	bne.n	800ace2 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800acd2:	687b      	ldr	r3, [r7, #4]
 800acd4:	681b      	ldr	r3, [r3, #0]
 800acd6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800acda:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800acdc:	6878      	ldr	r0, [r7, #4]
 800acde:	f000 fad7 	bl	800b290 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800ace2:	687b      	ldr	r3, [r7, #4]
 800ace4:	681b      	ldr	r3, [r3, #0]
 800ace6:	691b      	ldr	r3, [r3, #16]
 800ace8:	f003 0320 	and.w	r3, r3, #32
 800acec:	2b20      	cmp	r3, #32
 800acee:	d10e      	bne.n	800ad0e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800acf0:	687b      	ldr	r3, [r7, #4]
 800acf2:	681b      	ldr	r3, [r3, #0]
 800acf4:	68db      	ldr	r3, [r3, #12]
 800acf6:	f003 0320 	and.w	r3, r3, #32
 800acfa:	2b20      	cmp	r3, #32
 800acfc:	d107      	bne.n	800ad0e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800acfe:	687b      	ldr	r3, [r7, #4]
 800ad00:	681b      	ldr	r3, [r3, #0]
 800ad02:	f06f 0220 	mvn.w	r2, #32
 800ad06:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800ad08:	6878      	ldr	r0, [r7, #4]
 800ad0a:	f001 f8b7 	bl	800be7c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800ad0e:	bf00      	nop
 800ad10:	3708      	adds	r7, #8
 800ad12:	46bd      	mov	sp, r7
 800ad14:	bd80      	pop	{r7, pc}

0800ad16 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 800ad16:	b580      	push	{r7, lr}
 800ad18:	b086      	sub	sp, #24
 800ad1a:	af00      	add	r7, sp, #0
 800ad1c:	60f8      	str	r0, [r7, #12]
 800ad1e:	60b9      	str	r1, [r7, #8]
 800ad20:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800ad22:	2300      	movs	r3, #0
 800ad24:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 800ad26:	68fb      	ldr	r3, [r7, #12]
 800ad28:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ad2c:	2b01      	cmp	r3, #1
 800ad2e:	d101      	bne.n	800ad34 <HAL_TIM_IC_ConfigChannel+0x1e>
 800ad30:	2302      	movs	r3, #2
 800ad32:	e088      	b.n	800ae46 <HAL_TIM_IC_ConfigChannel+0x130>
 800ad34:	68fb      	ldr	r3, [r7, #12]
 800ad36:	2201      	movs	r2, #1
 800ad38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 800ad3c:	687b      	ldr	r3, [r7, #4]
 800ad3e:	2b00      	cmp	r3, #0
 800ad40:	d11b      	bne.n	800ad7a <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 800ad42:	68fb      	ldr	r3, [r7, #12]
 800ad44:	6818      	ldr	r0, [r3, #0]
 800ad46:	68bb      	ldr	r3, [r7, #8]
 800ad48:	6819      	ldr	r1, [r3, #0]
 800ad4a:	68bb      	ldr	r3, [r7, #8]
 800ad4c:	685a      	ldr	r2, [r3, #4]
 800ad4e:	68bb      	ldr	r3, [r7, #8]
 800ad50:	68db      	ldr	r3, [r3, #12]
 800ad52:	f000 fe17 	bl	800b984 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800ad56:	68fb      	ldr	r3, [r7, #12]
 800ad58:	681b      	ldr	r3, [r3, #0]
 800ad5a:	699a      	ldr	r2, [r3, #24]
 800ad5c:	68fb      	ldr	r3, [r7, #12]
 800ad5e:	681b      	ldr	r3, [r3, #0]
 800ad60:	f022 020c 	bic.w	r2, r2, #12
 800ad64:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800ad66:	68fb      	ldr	r3, [r7, #12]
 800ad68:	681b      	ldr	r3, [r3, #0]
 800ad6a:	6999      	ldr	r1, [r3, #24]
 800ad6c:	68bb      	ldr	r3, [r7, #8]
 800ad6e:	689a      	ldr	r2, [r3, #8]
 800ad70:	68fb      	ldr	r3, [r7, #12]
 800ad72:	681b      	ldr	r3, [r3, #0]
 800ad74:	430a      	orrs	r2, r1
 800ad76:	619a      	str	r2, [r3, #24]
 800ad78:	e060      	b.n	800ae3c <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 800ad7a:	687b      	ldr	r3, [r7, #4]
 800ad7c:	2b04      	cmp	r3, #4
 800ad7e:	d11c      	bne.n	800adba <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800ad80:	68fb      	ldr	r3, [r7, #12]
 800ad82:	6818      	ldr	r0, [r3, #0]
 800ad84:	68bb      	ldr	r3, [r7, #8]
 800ad86:	6819      	ldr	r1, [r3, #0]
 800ad88:	68bb      	ldr	r3, [r7, #8]
 800ad8a:	685a      	ldr	r2, [r3, #4]
 800ad8c:	68bb      	ldr	r3, [r7, #8]
 800ad8e:	68db      	ldr	r3, [r3, #12]
 800ad90:	f000 fe9b 	bl	800baca <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800ad94:	68fb      	ldr	r3, [r7, #12]
 800ad96:	681b      	ldr	r3, [r3, #0]
 800ad98:	699a      	ldr	r2, [r3, #24]
 800ad9a:	68fb      	ldr	r3, [r7, #12]
 800ad9c:	681b      	ldr	r3, [r3, #0]
 800ad9e:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800ada2:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800ada4:	68fb      	ldr	r3, [r7, #12]
 800ada6:	681b      	ldr	r3, [r3, #0]
 800ada8:	6999      	ldr	r1, [r3, #24]
 800adaa:	68bb      	ldr	r3, [r7, #8]
 800adac:	689b      	ldr	r3, [r3, #8]
 800adae:	021a      	lsls	r2, r3, #8
 800adb0:	68fb      	ldr	r3, [r7, #12]
 800adb2:	681b      	ldr	r3, [r3, #0]
 800adb4:	430a      	orrs	r2, r1
 800adb6:	619a      	str	r2, [r3, #24]
 800adb8:	e040      	b.n	800ae3c <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 800adba:	687b      	ldr	r3, [r7, #4]
 800adbc:	2b08      	cmp	r3, #8
 800adbe:	d11b      	bne.n	800adf8 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800adc0:	68fb      	ldr	r3, [r7, #12]
 800adc2:	6818      	ldr	r0, [r3, #0]
 800adc4:	68bb      	ldr	r3, [r7, #8]
 800adc6:	6819      	ldr	r1, [r3, #0]
 800adc8:	68bb      	ldr	r3, [r7, #8]
 800adca:	685a      	ldr	r2, [r3, #4]
 800adcc:	68bb      	ldr	r3, [r7, #8]
 800adce:	68db      	ldr	r3, [r3, #12]
 800add0:	f000 fee8 	bl	800bba4 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800add4:	68fb      	ldr	r3, [r7, #12]
 800add6:	681b      	ldr	r3, [r3, #0]
 800add8:	69da      	ldr	r2, [r3, #28]
 800adda:	68fb      	ldr	r3, [r7, #12]
 800addc:	681b      	ldr	r3, [r3, #0]
 800adde:	f022 020c 	bic.w	r2, r2, #12
 800ade2:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800ade4:	68fb      	ldr	r3, [r7, #12]
 800ade6:	681b      	ldr	r3, [r3, #0]
 800ade8:	69d9      	ldr	r1, [r3, #28]
 800adea:	68bb      	ldr	r3, [r7, #8]
 800adec:	689a      	ldr	r2, [r3, #8]
 800adee:	68fb      	ldr	r3, [r7, #12]
 800adf0:	681b      	ldr	r3, [r3, #0]
 800adf2:	430a      	orrs	r2, r1
 800adf4:	61da      	str	r2, [r3, #28]
 800adf6:	e021      	b.n	800ae3c <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 800adf8:	687b      	ldr	r3, [r7, #4]
 800adfa:	2b0c      	cmp	r3, #12
 800adfc:	d11c      	bne.n	800ae38 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 800adfe:	68fb      	ldr	r3, [r7, #12]
 800ae00:	6818      	ldr	r0, [r3, #0]
 800ae02:	68bb      	ldr	r3, [r7, #8]
 800ae04:	6819      	ldr	r1, [r3, #0]
 800ae06:	68bb      	ldr	r3, [r7, #8]
 800ae08:	685a      	ldr	r2, [r3, #4]
 800ae0a:	68bb      	ldr	r3, [r7, #8]
 800ae0c:	68db      	ldr	r3, [r3, #12]
 800ae0e:	f000 ff05 	bl	800bc1c <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800ae12:	68fb      	ldr	r3, [r7, #12]
 800ae14:	681b      	ldr	r3, [r3, #0]
 800ae16:	69da      	ldr	r2, [r3, #28]
 800ae18:	68fb      	ldr	r3, [r7, #12]
 800ae1a:	681b      	ldr	r3, [r3, #0]
 800ae1c:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800ae20:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800ae22:	68fb      	ldr	r3, [r7, #12]
 800ae24:	681b      	ldr	r3, [r3, #0]
 800ae26:	69d9      	ldr	r1, [r3, #28]
 800ae28:	68bb      	ldr	r3, [r7, #8]
 800ae2a:	689b      	ldr	r3, [r3, #8]
 800ae2c:	021a      	lsls	r2, r3, #8
 800ae2e:	68fb      	ldr	r3, [r7, #12]
 800ae30:	681b      	ldr	r3, [r3, #0]
 800ae32:	430a      	orrs	r2, r1
 800ae34:	61da      	str	r2, [r3, #28]
 800ae36:	e001      	b.n	800ae3c <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 800ae38:	2301      	movs	r3, #1
 800ae3a:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 800ae3c:	68fb      	ldr	r3, [r7, #12]
 800ae3e:	2200      	movs	r2, #0
 800ae40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800ae44:	7dfb      	ldrb	r3, [r7, #23]
}
 800ae46:	4618      	mov	r0, r3
 800ae48:	3718      	adds	r7, #24
 800ae4a:	46bd      	mov	sp, r7
 800ae4c:	bd80      	pop	{r7, pc}
	...

0800ae50 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800ae50:	b580      	push	{r7, lr}
 800ae52:	b086      	sub	sp, #24
 800ae54:	af00      	add	r7, sp, #0
 800ae56:	60f8      	str	r0, [r7, #12]
 800ae58:	60b9      	str	r1, [r7, #8]
 800ae5a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800ae5c:	2300      	movs	r3, #0
 800ae5e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800ae60:	68fb      	ldr	r3, [r7, #12]
 800ae62:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ae66:	2b01      	cmp	r3, #1
 800ae68:	d101      	bne.n	800ae6e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800ae6a:	2302      	movs	r3, #2
 800ae6c:	e0ff      	b.n	800b06e <HAL_TIM_PWM_ConfigChannel+0x21e>
 800ae6e:	68fb      	ldr	r3, [r7, #12]
 800ae70:	2201      	movs	r2, #1
 800ae72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800ae76:	687b      	ldr	r3, [r7, #4]
 800ae78:	2b14      	cmp	r3, #20
 800ae7a:	f200 80f0 	bhi.w	800b05e <HAL_TIM_PWM_ConfigChannel+0x20e>
 800ae7e:	a201      	add	r2, pc, #4	; (adr r2, 800ae84 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800ae80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ae84:	0800aed9 	.word	0x0800aed9
 800ae88:	0800b05f 	.word	0x0800b05f
 800ae8c:	0800b05f 	.word	0x0800b05f
 800ae90:	0800b05f 	.word	0x0800b05f
 800ae94:	0800af19 	.word	0x0800af19
 800ae98:	0800b05f 	.word	0x0800b05f
 800ae9c:	0800b05f 	.word	0x0800b05f
 800aea0:	0800b05f 	.word	0x0800b05f
 800aea4:	0800af5b 	.word	0x0800af5b
 800aea8:	0800b05f 	.word	0x0800b05f
 800aeac:	0800b05f 	.word	0x0800b05f
 800aeb0:	0800b05f 	.word	0x0800b05f
 800aeb4:	0800af9b 	.word	0x0800af9b
 800aeb8:	0800b05f 	.word	0x0800b05f
 800aebc:	0800b05f 	.word	0x0800b05f
 800aec0:	0800b05f 	.word	0x0800b05f
 800aec4:	0800afdd 	.word	0x0800afdd
 800aec8:	0800b05f 	.word	0x0800b05f
 800aecc:	0800b05f 	.word	0x0800b05f
 800aed0:	0800b05f 	.word	0x0800b05f
 800aed4:	0800b01d 	.word	0x0800b01d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800aed8:	68fb      	ldr	r3, [r7, #12]
 800aeda:	681b      	ldr	r3, [r3, #0]
 800aedc:	68b9      	ldr	r1, [r7, #8]
 800aede:	4618      	mov	r0, r3
 800aee0:	f000 fa7a 	bl	800b3d8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800aee4:	68fb      	ldr	r3, [r7, #12]
 800aee6:	681b      	ldr	r3, [r3, #0]
 800aee8:	699a      	ldr	r2, [r3, #24]
 800aeea:	68fb      	ldr	r3, [r7, #12]
 800aeec:	681b      	ldr	r3, [r3, #0]
 800aeee:	f042 0208 	orr.w	r2, r2, #8
 800aef2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800aef4:	68fb      	ldr	r3, [r7, #12]
 800aef6:	681b      	ldr	r3, [r3, #0]
 800aef8:	699a      	ldr	r2, [r3, #24]
 800aefa:	68fb      	ldr	r3, [r7, #12]
 800aefc:	681b      	ldr	r3, [r3, #0]
 800aefe:	f022 0204 	bic.w	r2, r2, #4
 800af02:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800af04:	68fb      	ldr	r3, [r7, #12]
 800af06:	681b      	ldr	r3, [r3, #0]
 800af08:	6999      	ldr	r1, [r3, #24]
 800af0a:	68bb      	ldr	r3, [r7, #8]
 800af0c:	691a      	ldr	r2, [r3, #16]
 800af0e:	68fb      	ldr	r3, [r7, #12]
 800af10:	681b      	ldr	r3, [r3, #0]
 800af12:	430a      	orrs	r2, r1
 800af14:	619a      	str	r2, [r3, #24]
      break;
 800af16:	e0a5      	b.n	800b064 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800af18:	68fb      	ldr	r3, [r7, #12]
 800af1a:	681b      	ldr	r3, [r3, #0]
 800af1c:	68b9      	ldr	r1, [r7, #8]
 800af1e:	4618      	mov	r0, r3
 800af20:	f000 faea 	bl	800b4f8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800af24:	68fb      	ldr	r3, [r7, #12]
 800af26:	681b      	ldr	r3, [r3, #0]
 800af28:	699a      	ldr	r2, [r3, #24]
 800af2a:	68fb      	ldr	r3, [r7, #12]
 800af2c:	681b      	ldr	r3, [r3, #0]
 800af2e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800af32:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800af34:	68fb      	ldr	r3, [r7, #12]
 800af36:	681b      	ldr	r3, [r3, #0]
 800af38:	699a      	ldr	r2, [r3, #24]
 800af3a:	68fb      	ldr	r3, [r7, #12]
 800af3c:	681b      	ldr	r3, [r3, #0]
 800af3e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800af42:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800af44:	68fb      	ldr	r3, [r7, #12]
 800af46:	681b      	ldr	r3, [r3, #0]
 800af48:	6999      	ldr	r1, [r3, #24]
 800af4a:	68bb      	ldr	r3, [r7, #8]
 800af4c:	691b      	ldr	r3, [r3, #16]
 800af4e:	021a      	lsls	r2, r3, #8
 800af50:	68fb      	ldr	r3, [r7, #12]
 800af52:	681b      	ldr	r3, [r3, #0]
 800af54:	430a      	orrs	r2, r1
 800af56:	619a      	str	r2, [r3, #24]
      break;
 800af58:	e084      	b.n	800b064 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800af5a:	68fb      	ldr	r3, [r7, #12]
 800af5c:	681b      	ldr	r3, [r3, #0]
 800af5e:	68b9      	ldr	r1, [r7, #8]
 800af60:	4618      	mov	r0, r3
 800af62:	f000 fb53 	bl	800b60c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800af66:	68fb      	ldr	r3, [r7, #12]
 800af68:	681b      	ldr	r3, [r3, #0]
 800af6a:	69da      	ldr	r2, [r3, #28]
 800af6c:	68fb      	ldr	r3, [r7, #12]
 800af6e:	681b      	ldr	r3, [r3, #0]
 800af70:	f042 0208 	orr.w	r2, r2, #8
 800af74:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800af76:	68fb      	ldr	r3, [r7, #12]
 800af78:	681b      	ldr	r3, [r3, #0]
 800af7a:	69da      	ldr	r2, [r3, #28]
 800af7c:	68fb      	ldr	r3, [r7, #12]
 800af7e:	681b      	ldr	r3, [r3, #0]
 800af80:	f022 0204 	bic.w	r2, r2, #4
 800af84:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800af86:	68fb      	ldr	r3, [r7, #12]
 800af88:	681b      	ldr	r3, [r3, #0]
 800af8a:	69d9      	ldr	r1, [r3, #28]
 800af8c:	68bb      	ldr	r3, [r7, #8]
 800af8e:	691a      	ldr	r2, [r3, #16]
 800af90:	68fb      	ldr	r3, [r7, #12]
 800af92:	681b      	ldr	r3, [r3, #0]
 800af94:	430a      	orrs	r2, r1
 800af96:	61da      	str	r2, [r3, #28]
      break;
 800af98:	e064      	b.n	800b064 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800af9a:	68fb      	ldr	r3, [r7, #12]
 800af9c:	681b      	ldr	r3, [r3, #0]
 800af9e:	68b9      	ldr	r1, [r7, #8]
 800afa0:	4618      	mov	r0, r3
 800afa2:	f000 fbbb 	bl	800b71c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800afa6:	68fb      	ldr	r3, [r7, #12]
 800afa8:	681b      	ldr	r3, [r3, #0]
 800afaa:	69da      	ldr	r2, [r3, #28]
 800afac:	68fb      	ldr	r3, [r7, #12]
 800afae:	681b      	ldr	r3, [r3, #0]
 800afb0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800afb4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800afb6:	68fb      	ldr	r3, [r7, #12]
 800afb8:	681b      	ldr	r3, [r3, #0]
 800afba:	69da      	ldr	r2, [r3, #28]
 800afbc:	68fb      	ldr	r3, [r7, #12]
 800afbe:	681b      	ldr	r3, [r3, #0]
 800afc0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800afc4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800afc6:	68fb      	ldr	r3, [r7, #12]
 800afc8:	681b      	ldr	r3, [r3, #0]
 800afca:	69d9      	ldr	r1, [r3, #28]
 800afcc:	68bb      	ldr	r3, [r7, #8]
 800afce:	691b      	ldr	r3, [r3, #16]
 800afd0:	021a      	lsls	r2, r3, #8
 800afd2:	68fb      	ldr	r3, [r7, #12]
 800afd4:	681b      	ldr	r3, [r3, #0]
 800afd6:	430a      	orrs	r2, r1
 800afd8:	61da      	str	r2, [r3, #28]
      break;
 800afda:	e043      	b.n	800b064 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800afdc:	68fb      	ldr	r3, [r7, #12]
 800afde:	681b      	ldr	r3, [r3, #0]
 800afe0:	68b9      	ldr	r1, [r7, #8]
 800afe2:	4618      	mov	r0, r3
 800afe4:	f000 fc04 	bl	800b7f0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800afe8:	68fb      	ldr	r3, [r7, #12]
 800afea:	681b      	ldr	r3, [r3, #0]
 800afec:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800afee:	68fb      	ldr	r3, [r7, #12]
 800aff0:	681b      	ldr	r3, [r3, #0]
 800aff2:	f042 0208 	orr.w	r2, r2, #8
 800aff6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800aff8:	68fb      	ldr	r3, [r7, #12]
 800affa:	681b      	ldr	r3, [r3, #0]
 800affc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800affe:	68fb      	ldr	r3, [r7, #12]
 800b000:	681b      	ldr	r3, [r3, #0]
 800b002:	f022 0204 	bic.w	r2, r2, #4
 800b006:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800b008:	68fb      	ldr	r3, [r7, #12]
 800b00a:	681b      	ldr	r3, [r3, #0]
 800b00c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800b00e:	68bb      	ldr	r3, [r7, #8]
 800b010:	691a      	ldr	r2, [r3, #16]
 800b012:	68fb      	ldr	r3, [r7, #12]
 800b014:	681b      	ldr	r3, [r3, #0]
 800b016:	430a      	orrs	r2, r1
 800b018:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800b01a:	e023      	b.n	800b064 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800b01c:	68fb      	ldr	r3, [r7, #12]
 800b01e:	681b      	ldr	r3, [r3, #0]
 800b020:	68b9      	ldr	r1, [r7, #8]
 800b022:	4618      	mov	r0, r3
 800b024:	f000 fc48 	bl	800b8b8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800b028:	68fb      	ldr	r3, [r7, #12]
 800b02a:	681b      	ldr	r3, [r3, #0]
 800b02c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b02e:	68fb      	ldr	r3, [r7, #12]
 800b030:	681b      	ldr	r3, [r3, #0]
 800b032:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b036:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800b038:	68fb      	ldr	r3, [r7, #12]
 800b03a:	681b      	ldr	r3, [r3, #0]
 800b03c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b03e:	68fb      	ldr	r3, [r7, #12]
 800b040:	681b      	ldr	r3, [r3, #0]
 800b042:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b046:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800b048:	68fb      	ldr	r3, [r7, #12]
 800b04a:	681b      	ldr	r3, [r3, #0]
 800b04c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800b04e:	68bb      	ldr	r3, [r7, #8]
 800b050:	691b      	ldr	r3, [r3, #16]
 800b052:	021a      	lsls	r2, r3, #8
 800b054:	68fb      	ldr	r3, [r7, #12]
 800b056:	681b      	ldr	r3, [r3, #0]
 800b058:	430a      	orrs	r2, r1
 800b05a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800b05c:	e002      	b.n	800b064 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800b05e:	2301      	movs	r3, #1
 800b060:	75fb      	strb	r3, [r7, #23]
      break;
 800b062:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800b064:	68fb      	ldr	r3, [r7, #12]
 800b066:	2200      	movs	r2, #0
 800b068:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800b06c:	7dfb      	ldrb	r3, [r7, #23]
}
 800b06e:	4618      	mov	r0, r3
 800b070:	3718      	adds	r7, #24
 800b072:	46bd      	mov	sp, r7
 800b074:	bd80      	pop	{r7, pc}
 800b076:	bf00      	nop

0800b078 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800b078:	b580      	push	{r7, lr}
 800b07a:	b084      	sub	sp, #16
 800b07c:	af00      	add	r7, sp, #0
 800b07e:	6078      	str	r0, [r7, #4]
 800b080:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800b082:	2300      	movs	r3, #0
 800b084:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800b086:	687b      	ldr	r3, [r7, #4]
 800b088:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b08c:	2b01      	cmp	r3, #1
 800b08e:	d101      	bne.n	800b094 <HAL_TIM_ConfigClockSource+0x1c>
 800b090:	2302      	movs	r3, #2
 800b092:	e0dc      	b.n	800b24e <HAL_TIM_ConfigClockSource+0x1d6>
 800b094:	687b      	ldr	r3, [r7, #4]
 800b096:	2201      	movs	r2, #1
 800b098:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800b09c:	687b      	ldr	r3, [r7, #4]
 800b09e:	2202      	movs	r2, #2
 800b0a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800b0a4:	687b      	ldr	r3, [r7, #4]
 800b0a6:	681b      	ldr	r3, [r3, #0]
 800b0a8:	689b      	ldr	r3, [r3, #8]
 800b0aa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800b0ac:	68ba      	ldr	r2, [r7, #8]
 800b0ae:	4b6a      	ldr	r3, [pc, #424]	; (800b258 <HAL_TIM_ConfigClockSource+0x1e0>)
 800b0b0:	4013      	ands	r3, r2
 800b0b2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b0b4:	68bb      	ldr	r3, [r7, #8]
 800b0b6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800b0ba:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800b0bc:	687b      	ldr	r3, [r7, #4]
 800b0be:	681b      	ldr	r3, [r3, #0]
 800b0c0:	68ba      	ldr	r2, [r7, #8]
 800b0c2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800b0c4:	683b      	ldr	r3, [r7, #0]
 800b0c6:	681b      	ldr	r3, [r3, #0]
 800b0c8:	4a64      	ldr	r2, [pc, #400]	; (800b25c <HAL_TIM_ConfigClockSource+0x1e4>)
 800b0ca:	4293      	cmp	r3, r2
 800b0cc:	f000 80a9 	beq.w	800b222 <HAL_TIM_ConfigClockSource+0x1aa>
 800b0d0:	4a62      	ldr	r2, [pc, #392]	; (800b25c <HAL_TIM_ConfigClockSource+0x1e4>)
 800b0d2:	4293      	cmp	r3, r2
 800b0d4:	f200 80ae 	bhi.w	800b234 <HAL_TIM_ConfigClockSource+0x1bc>
 800b0d8:	4a61      	ldr	r2, [pc, #388]	; (800b260 <HAL_TIM_ConfigClockSource+0x1e8>)
 800b0da:	4293      	cmp	r3, r2
 800b0dc:	f000 80a1 	beq.w	800b222 <HAL_TIM_ConfigClockSource+0x1aa>
 800b0e0:	4a5f      	ldr	r2, [pc, #380]	; (800b260 <HAL_TIM_ConfigClockSource+0x1e8>)
 800b0e2:	4293      	cmp	r3, r2
 800b0e4:	f200 80a6 	bhi.w	800b234 <HAL_TIM_ConfigClockSource+0x1bc>
 800b0e8:	4a5e      	ldr	r2, [pc, #376]	; (800b264 <HAL_TIM_ConfigClockSource+0x1ec>)
 800b0ea:	4293      	cmp	r3, r2
 800b0ec:	f000 8099 	beq.w	800b222 <HAL_TIM_ConfigClockSource+0x1aa>
 800b0f0:	4a5c      	ldr	r2, [pc, #368]	; (800b264 <HAL_TIM_ConfigClockSource+0x1ec>)
 800b0f2:	4293      	cmp	r3, r2
 800b0f4:	f200 809e 	bhi.w	800b234 <HAL_TIM_ConfigClockSource+0x1bc>
 800b0f8:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800b0fc:	f000 8091 	beq.w	800b222 <HAL_TIM_ConfigClockSource+0x1aa>
 800b100:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800b104:	f200 8096 	bhi.w	800b234 <HAL_TIM_ConfigClockSource+0x1bc>
 800b108:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b10c:	f000 8089 	beq.w	800b222 <HAL_TIM_ConfigClockSource+0x1aa>
 800b110:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b114:	f200 808e 	bhi.w	800b234 <HAL_TIM_ConfigClockSource+0x1bc>
 800b118:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b11c:	d03e      	beq.n	800b19c <HAL_TIM_ConfigClockSource+0x124>
 800b11e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b122:	f200 8087 	bhi.w	800b234 <HAL_TIM_ConfigClockSource+0x1bc>
 800b126:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b12a:	f000 8086 	beq.w	800b23a <HAL_TIM_ConfigClockSource+0x1c2>
 800b12e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b132:	d87f      	bhi.n	800b234 <HAL_TIM_ConfigClockSource+0x1bc>
 800b134:	2b70      	cmp	r3, #112	; 0x70
 800b136:	d01a      	beq.n	800b16e <HAL_TIM_ConfigClockSource+0xf6>
 800b138:	2b70      	cmp	r3, #112	; 0x70
 800b13a:	d87b      	bhi.n	800b234 <HAL_TIM_ConfigClockSource+0x1bc>
 800b13c:	2b60      	cmp	r3, #96	; 0x60
 800b13e:	d050      	beq.n	800b1e2 <HAL_TIM_ConfigClockSource+0x16a>
 800b140:	2b60      	cmp	r3, #96	; 0x60
 800b142:	d877      	bhi.n	800b234 <HAL_TIM_ConfigClockSource+0x1bc>
 800b144:	2b50      	cmp	r3, #80	; 0x50
 800b146:	d03c      	beq.n	800b1c2 <HAL_TIM_ConfigClockSource+0x14a>
 800b148:	2b50      	cmp	r3, #80	; 0x50
 800b14a:	d873      	bhi.n	800b234 <HAL_TIM_ConfigClockSource+0x1bc>
 800b14c:	2b40      	cmp	r3, #64	; 0x40
 800b14e:	d058      	beq.n	800b202 <HAL_TIM_ConfigClockSource+0x18a>
 800b150:	2b40      	cmp	r3, #64	; 0x40
 800b152:	d86f      	bhi.n	800b234 <HAL_TIM_ConfigClockSource+0x1bc>
 800b154:	2b30      	cmp	r3, #48	; 0x30
 800b156:	d064      	beq.n	800b222 <HAL_TIM_ConfigClockSource+0x1aa>
 800b158:	2b30      	cmp	r3, #48	; 0x30
 800b15a:	d86b      	bhi.n	800b234 <HAL_TIM_ConfigClockSource+0x1bc>
 800b15c:	2b20      	cmp	r3, #32
 800b15e:	d060      	beq.n	800b222 <HAL_TIM_ConfigClockSource+0x1aa>
 800b160:	2b20      	cmp	r3, #32
 800b162:	d867      	bhi.n	800b234 <HAL_TIM_ConfigClockSource+0x1bc>
 800b164:	2b00      	cmp	r3, #0
 800b166:	d05c      	beq.n	800b222 <HAL_TIM_ConfigClockSource+0x1aa>
 800b168:	2b10      	cmp	r3, #16
 800b16a:	d05a      	beq.n	800b222 <HAL_TIM_ConfigClockSource+0x1aa>
 800b16c:	e062      	b.n	800b234 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b16e:	687b      	ldr	r3, [r7, #4]
 800b170:	6818      	ldr	r0, [r3, #0]
 800b172:	683b      	ldr	r3, [r7, #0]
 800b174:	6899      	ldr	r1, [r3, #8]
 800b176:	683b      	ldr	r3, [r7, #0]
 800b178:	685a      	ldr	r2, [r3, #4]
 800b17a:	683b      	ldr	r3, [r7, #0]
 800b17c:	68db      	ldr	r3, [r3, #12]
 800b17e:	f000 fda9 	bl	800bcd4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800b182:	687b      	ldr	r3, [r7, #4]
 800b184:	681b      	ldr	r3, [r3, #0]
 800b186:	689b      	ldr	r3, [r3, #8]
 800b188:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800b18a:	68bb      	ldr	r3, [r7, #8]
 800b18c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800b190:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800b192:	687b      	ldr	r3, [r7, #4]
 800b194:	681b      	ldr	r3, [r3, #0]
 800b196:	68ba      	ldr	r2, [r7, #8]
 800b198:	609a      	str	r2, [r3, #8]
      break;
 800b19a:	e04f      	b.n	800b23c <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b19c:	687b      	ldr	r3, [r7, #4]
 800b19e:	6818      	ldr	r0, [r3, #0]
 800b1a0:	683b      	ldr	r3, [r7, #0]
 800b1a2:	6899      	ldr	r1, [r3, #8]
 800b1a4:	683b      	ldr	r3, [r7, #0]
 800b1a6:	685a      	ldr	r2, [r3, #4]
 800b1a8:	683b      	ldr	r3, [r7, #0]
 800b1aa:	68db      	ldr	r3, [r3, #12]
 800b1ac:	f000 fd92 	bl	800bcd4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800b1b0:	687b      	ldr	r3, [r7, #4]
 800b1b2:	681b      	ldr	r3, [r3, #0]
 800b1b4:	689a      	ldr	r2, [r3, #8]
 800b1b6:	687b      	ldr	r3, [r7, #4]
 800b1b8:	681b      	ldr	r3, [r3, #0]
 800b1ba:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800b1be:	609a      	str	r2, [r3, #8]
      break;
 800b1c0:	e03c      	b.n	800b23c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b1c2:	687b      	ldr	r3, [r7, #4]
 800b1c4:	6818      	ldr	r0, [r3, #0]
 800b1c6:	683b      	ldr	r3, [r7, #0]
 800b1c8:	6859      	ldr	r1, [r3, #4]
 800b1ca:	683b      	ldr	r3, [r7, #0]
 800b1cc:	68db      	ldr	r3, [r3, #12]
 800b1ce:	461a      	mov	r2, r3
 800b1d0:	f000 fc4c 	bl	800ba6c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800b1d4:	687b      	ldr	r3, [r7, #4]
 800b1d6:	681b      	ldr	r3, [r3, #0]
 800b1d8:	2150      	movs	r1, #80	; 0x50
 800b1da:	4618      	mov	r0, r3
 800b1dc:	f000 fd5c 	bl	800bc98 <TIM_ITRx_SetConfig>
      break;
 800b1e0:	e02c      	b.n	800b23c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800b1e2:	687b      	ldr	r3, [r7, #4]
 800b1e4:	6818      	ldr	r0, [r3, #0]
 800b1e6:	683b      	ldr	r3, [r7, #0]
 800b1e8:	6859      	ldr	r1, [r3, #4]
 800b1ea:	683b      	ldr	r3, [r7, #0]
 800b1ec:	68db      	ldr	r3, [r3, #12]
 800b1ee:	461a      	mov	r2, r3
 800b1f0:	f000 fca8 	bl	800bb44 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800b1f4:	687b      	ldr	r3, [r7, #4]
 800b1f6:	681b      	ldr	r3, [r3, #0]
 800b1f8:	2160      	movs	r1, #96	; 0x60
 800b1fa:	4618      	mov	r0, r3
 800b1fc:	f000 fd4c 	bl	800bc98 <TIM_ITRx_SetConfig>
      break;
 800b200:	e01c      	b.n	800b23c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b202:	687b      	ldr	r3, [r7, #4]
 800b204:	6818      	ldr	r0, [r3, #0]
 800b206:	683b      	ldr	r3, [r7, #0]
 800b208:	6859      	ldr	r1, [r3, #4]
 800b20a:	683b      	ldr	r3, [r7, #0]
 800b20c:	68db      	ldr	r3, [r3, #12]
 800b20e:	461a      	mov	r2, r3
 800b210:	f000 fc2c 	bl	800ba6c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800b214:	687b      	ldr	r3, [r7, #4]
 800b216:	681b      	ldr	r3, [r3, #0]
 800b218:	2140      	movs	r1, #64	; 0x40
 800b21a:	4618      	mov	r0, r3
 800b21c:	f000 fd3c 	bl	800bc98 <TIM_ITRx_SetConfig>
      break;
 800b220:	e00c      	b.n	800b23c <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800b222:	687b      	ldr	r3, [r7, #4]
 800b224:	681a      	ldr	r2, [r3, #0]
 800b226:	683b      	ldr	r3, [r7, #0]
 800b228:	681b      	ldr	r3, [r3, #0]
 800b22a:	4619      	mov	r1, r3
 800b22c:	4610      	mov	r0, r2
 800b22e:	f000 fd33 	bl	800bc98 <TIM_ITRx_SetConfig>
      break;
 800b232:	e003      	b.n	800b23c <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800b234:	2301      	movs	r3, #1
 800b236:	73fb      	strb	r3, [r7, #15]
      break;
 800b238:	e000      	b.n	800b23c <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800b23a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800b23c:	687b      	ldr	r3, [r7, #4]
 800b23e:	2201      	movs	r2, #1
 800b240:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b244:	687b      	ldr	r3, [r7, #4]
 800b246:	2200      	movs	r2, #0
 800b248:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800b24c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b24e:	4618      	mov	r0, r3
 800b250:	3710      	adds	r7, #16
 800b252:	46bd      	mov	sp, r7
 800b254:	bd80      	pop	{r7, pc}
 800b256:	bf00      	nop
 800b258:	ffceff88 	.word	0xffceff88
 800b25c:	00100040 	.word	0x00100040
 800b260:	00100030 	.word	0x00100030
 800b264:	00100020 	.word	0x00100020

0800b268 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800b268:	b480      	push	{r7}
 800b26a:	b083      	sub	sp, #12
 800b26c:	af00      	add	r7, sp, #0
 800b26e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800b270:	bf00      	nop
 800b272:	370c      	adds	r7, #12
 800b274:	46bd      	mov	sp, r7
 800b276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b27a:	4770      	bx	lr

0800b27c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800b27c:	b480      	push	{r7}
 800b27e:	b083      	sub	sp, #12
 800b280:	af00      	add	r7, sp, #0
 800b282:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800b284:	bf00      	nop
 800b286:	370c      	adds	r7, #12
 800b288:	46bd      	mov	sp, r7
 800b28a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b28e:	4770      	bx	lr

0800b290 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800b290:	b480      	push	{r7}
 800b292:	b083      	sub	sp, #12
 800b294:	af00      	add	r7, sp, #0
 800b296:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800b298:	bf00      	nop
 800b29a:	370c      	adds	r7, #12
 800b29c:	46bd      	mov	sp, r7
 800b29e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2a2:	4770      	bx	lr

0800b2a4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800b2a4:	b480      	push	{r7}
 800b2a6:	b085      	sub	sp, #20
 800b2a8:	af00      	add	r7, sp, #0
 800b2aa:	6078      	str	r0, [r7, #4]
 800b2ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800b2ae:	687b      	ldr	r3, [r7, #4]
 800b2b0:	681b      	ldr	r3, [r3, #0]
 800b2b2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b2b4:	687b      	ldr	r3, [r7, #4]
 800b2b6:	4a40      	ldr	r2, [pc, #256]	; (800b3b8 <TIM_Base_SetConfig+0x114>)
 800b2b8:	4293      	cmp	r3, r2
 800b2ba:	d013      	beq.n	800b2e4 <TIM_Base_SetConfig+0x40>
 800b2bc:	687b      	ldr	r3, [r7, #4]
 800b2be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b2c2:	d00f      	beq.n	800b2e4 <TIM_Base_SetConfig+0x40>
 800b2c4:	687b      	ldr	r3, [r7, #4]
 800b2c6:	4a3d      	ldr	r2, [pc, #244]	; (800b3bc <TIM_Base_SetConfig+0x118>)
 800b2c8:	4293      	cmp	r3, r2
 800b2ca:	d00b      	beq.n	800b2e4 <TIM_Base_SetConfig+0x40>
 800b2cc:	687b      	ldr	r3, [r7, #4]
 800b2ce:	4a3c      	ldr	r2, [pc, #240]	; (800b3c0 <TIM_Base_SetConfig+0x11c>)
 800b2d0:	4293      	cmp	r3, r2
 800b2d2:	d007      	beq.n	800b2e4 <TIM_Base_SetConfig+0x40>
 800b2d4:	687b      	ldr	r3, [r7, #4]
 800b2d6:	4a3b      	ldr	r2, [pc, #236]	; (800b3c4 <TIM_Base_SetConfig+0x120>)
 800b2d8:	4293      	cmp	r3, r2
 800b2da:	d003      	beq.n	800b2e4 <TIM_Base_SetConfig+0x40>
 800b2dc:	687b      	ldr	r3, [r7, #4]
 800b2de:	4a3a      	ldr	r2, [pc, #232]	; (800b3c8 <TIM_Base_SetConfig+0x124>)
 800b2e0:	4293      	cmp	r3, r2
 800b2e2:	d108      	bne.n	800b2f6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800b2e4:	68fb      	ldr	r3, [r7, #12]
 800b2e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b2ea:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800b2ec:	683b      	ldr	r3, [r7, #0]
 800b2ee:	685b      	ldr	r3, [r3, #4]
 800b2f0:	68fa      	ldr	r2, [r7, #12]
 800b2f2:	4313      	orrs	r3, r2
 800b2f4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800b2f6:	687b      	ldr	r3, [r7, #4]
 800b2f8:	4a2f      	ldr	r2, [pc, #188]	; (800b3b8 <TIM_Base_SetConfig+0x114>)
 800b2fa:	4293      	cmp	r3, r2
 800b2fc:	d01f      	beq.n	800b33e <TIM_Base_SetConfig+0x9a>
 800b2fe:	687b      	ldr	r3, [r7, #4]
 800b300:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b304:	d01b      	beq.n	800b33e <TIM_Base_SetConfig+0x9a>
 800b306:	687b      	ldr	r3, [r7, #4]
 800b308:	4a2c      	ldr	r2, [pc, #176]	; (800b3bc <TIM_Base_SetConfig+0x118>)
 800b30a:	4293      	cmp	r3, r2
 800b30c:	d017      	beq.n	800b33e <TIM_Base_SetConfig+0x9a>
 800b30e:	687b      	ldr	r3, [r7, #4]
 800b310:	4a2b      	ldr	r2, [pc, #172]	; (800b3c0 <TIM_Base_SetConfig+0x11c>)
 800b312:	4293      	cmp	r3, r2
 800b314:	d013      	beq.n	800b33e <TIM_Base_SetConfig+0x9a>
 800b316:	687b      	ldr	r3, [r7, #4]
 800b318:	4a2a      	ldr	r2, [pc, #168]	; (800b3c4 <TIM_Base_SetConfig+0x120>)
 800b31a:	4293      	cmp	r3, r2
 800b31c:	d00f      	beq.n	800b33e <TIM_Base_SetConfig+0x9a>
 800b31e:	687b      	ldr	r3, [r7, #4]
 800b320:	4a29      	ldr	r2, [pc, #164]	; (800b3c8 <TIM_Base_SetConfig+0x124>)
 800b322:	4293      	cmp	r3, r2
 800b324:	d00b      	beq.n	800b33e <TIM_Base_SetConfig+0x9a>
 800b326:	687b      	ldr	r3, [r7, #4]
 800b328:	4a28      	ldr	r2, [pc, #160]	; (800b3cc <TIM_Base_SetConfig+0x128>)
 800b32a:	4293      	cmp	r3, r2
 800b32c:	d007      	beq.n	800b33e <TIM_Base_SetConfig+0x9a>
 800b32e:	687b      	ldr	r3, [r7, #4]
 800b330:	4a27      	ldr	r2, [pc, #156]	; (800b3d0 <TIM_Base_SetConfig+0x12c>)
 800b332:	4293      	cmp	r3, r2
 800b334:	d003      	beq.n	800b33e <TIM_Base_SetConfig+0x9a>
 800b336:	687b      	ldr	r3, [r7, #4]
 800b338:	4a26      	ldr	r2, [pc, #152]	; (800b3d4 <TIM_Base_SetConfig+0x130>)
 800b33a:	4293      	cmp	r3, r2
 800b33c:	d108      	bne.n	800b350 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800b33e:	68fb      	ldr	r3, [r7, #12]
 800b340:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b344:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800b346:	683b      	ldr	r3, [r7, #0]
 800b348:	68db      	ldr	r3, [r3, #12]
 800b34a:	68fa      	ldr	r2, [r7, #12]
 800b34c:	4313      	orrs	r3, r2
 800b34e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800b350:	68fb      	ldr	r3, [r7, #12]
 800b352:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800b356:	683b      	ldr	r3, [r7, #0]
 800b358:	695b      	ldr	r3, [r3, #20]
 800b35a:	4313      	orrs	r3, r2
 800b35c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800b35e:	687b      	ldr	r3, [r7, #4]
 800b360:	68fa      	ldr	r2, [r7, #12]
 800b362:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800b364:	683b      	ldr	r3, [r7, #0]
 800b366:	689a      	ldr	r2, [r3, #8]
 800b368:	687b      	ldr	r3, [r7, #4]
 800b36a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800b36c:	683b      	ldr	r3, [r7, #0]
 800b36e:	681a      	ldr	r2, [r3, #0]
 800b370:	687b      	ldr	r3, [r7, #4]
 800b372:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800b374:	687b      	ldr	r3, [r7, #4]
 800b376:	4a10      	ldr	r2, [pc, #64]	; (800b3b8 <TIM_Base_SetConfig+0x114>)
 800b378:	4293      	cmp	r3, r2
 800b37a:	d00f      	beq.n	800b39c <TIM_Base_SetConfig+0xf8>
 800b37c:	687b      	ldr	r3, [r7, #4]
 800b37e:	4a12      	ldr	r2, [pc, #72]	; (800b3c8 <TIM_Base_SetConfig+0x124>)
 800b380:	4293      	cmp	r3, r2
 800b382:	d00b      	beq.n	800b39c <TIM_Base_SetConfig+0xf8>
 800b384:	687b      	ldr	r3, [r7, #4]
 800b386:	4a11      	ldr	r2, [pc, #68]	; (800b3cc <TIM_Base_SetConfig+0x128>)
 800b388:	4293      	cmp	r3, r2
 800b38a:	d007      	beq.n	800b39c <TIM_Base_SetConfig+0xf8>
 800b38c:	687b      	ldr	r3, [r7, #4]
 800b38e:	4a10      	ldr	r2, [pc, #64]	; (800b3d0 <TIM_Base_SetConfig+0x12c>)
 800b390:	4293      	cmp	r3, r2
 800b392:	d003      	beq.n	800b39c <TIM_Base_SetConfig+0xf8>
 800b394:	687b      	ldr	r3, [r7, #4]
 800b396:	4a0f      	ldr	r2, [pc, #60]	; (800b3d4 <TIM_Base_SetConfig+0x130>)
 800b398:	4293      	cmp	r3, r2
 800b39a:	d103      	bne.n	800b3a4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800b39c:	683b      	ldr	r3, [r7, #0]
 800b39e:	691a      	ldr	r2, [r3, #16]
 800b3a0:	687b      	ldr	r3, [r7, #4]
 800b3a2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800b3a4:	687b      	ldr	r3, [r7, #4]
 800b3a6:	2201      	movs	r2, #1
 800b3a8:	615a      	str	r2, [r3, #20]
}
 800b3aa:	bf00      	nop
 800b3ac:	3714      	adds	r7, #20
 800b3ae:	46bd      	mov	sp, r7
 800b3b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3b4:	4770      	bx	lr
 800b3b6:	bf00      	nop
 800b3b8:	40010000 	.word	0x40010000
 800b3bc:	40000400 	.word	0x40000400
 800b3c0:	40000800 	.word	0x40000800
 800b3c4:	40000c00 	.word	0x40000c00
 800b3c8:	40010400 	.word	0x40010400
 800b3cc:	40014000 	.word	0x40014000
 800b3d0:	40014400 	.word	0x40014400
 800b3d4:	40014800 	.word	0x40014800

0800b3d8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b3d8:	b480      	push	{r7}
 800b3da:	b087      	sub	sp, #28
 800b3dc:	af00      	add	r7, sp, #0
 800b3de:	6078      	str	r0, [r7, #4]
 800b3e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b3e2:	687b      	ldr	r3, [r7, #4]
 800b3e4:	6a1b      	ldr	r3, [r3, #32]
 800b3e6:	f023 0201 	bic.w	r2, r3, #1
 800b3ea:	687b      	ldr	r3, [r7, #4]
 800b3ec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b3ee:	687b      	ldr	r3, [r7, #4]
 800b3f0:	6a1b      	ldr	r3, [r3, #32]
 800b3f2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b3f4:	687b      	ldr	r3, [r7, #4]
 800b3f6:	685b      	ldr	r3, [r3, #4]
 800b3f8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b3fa:	687b      	ldr	r3, [r7, #4]
 800b3fc:	699b      	ldr	r3, [r3, #24]
 800b3fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800b400:	68fa      	ldr	r2, [r7, #12]
 800b402:	4b37      	ldr	r3, [pc, #220]	; (800b4e0 <TIM_OC1_SetConfig+0x108>)
 800b404:	4013      	ands	r3, r2
 800b406:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800b408:	68fb      	ldr	r3, [r7, #12]
 800b40a:	f023 0303 	bic.w	r3, r3, #3
 800b40e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b410:	683b      	ldr	r3, [r7, #0]
 800b412:	681b      	ldr	r3, [r3, #0]
 800b414:	68fa      	ldr	r2, [r7, #12]
 800b416:	4313      	orrs	r3, r2
 800b418:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800b41a:	697b      	ldr	r3, [r7, #20]
 800b41c:	f023 0302 	bic.w	r3, r3, #2
 800b420:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800b422:	683b      	ldr	r3, [r7, #0]
 800b424:	689b      	ldr	r3, [r3, #8]
 800b426:	697a      	ldr	r2, [r7, #20]
 800b428:	4313      	orrs	r3, r2
 800b42a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800b42c:	687b      	ldr	r3, [r7, #4]
 800b42e:	4a2d      	ldr	r2, [pc, #180]	; (800b4e4 <TIM_OC1_SetConfig+0x10c>)
 800b430:	4293      	cmp	r3, r2
 800b432:	d00f      	beq.n	800b454 <TIM_OC1_SetConfig+0x7c>
 800b434:	687b      	ldr	r3, [r7, #4]
 800b436:	4a2c      	ldr	r2, [pc, #176]	; (800b4e8 <TIM_OC1_SetConfig+0x110>)
 800b438:	4293      	cmp	r3, r2
 800b43a:	d00b      	beq.n	800b454 <TIM_OC1_SetConfig+0x7c>
 800b43c:	687b      	ldr	r3, [r7, #4]
 800b43e:	4a2b      	ldr	r2, [pc, #172]	; (800b4ec <TIM_OC1_SetConfig+0x114>)
 800b440:	4293      	cmp	r3, r2
 800b442:	d007      	beq.n	800b454 <TIM_OC1_SetConfig+0x7c>
 800b444:	687b      	ldr	r3, [r7, #4]
 800b446:	4a2a      	ldr	r2, [pc, #168]	; (800b4f0 <TIM_OC1_SetConfig+0x118>)
 800b448:	4293      	cmp	r3, r2
 800b44a:	d003      	beq.n	800b454 <TIM_OC1_SetConfig+0x7c>
 800b44c:	687b      	ldr	r3, [r7, #4]
 800b44e:	4a29      	ldr	r2, [pc, #164]	; (800b4f4 <TIM_OC1_SetConfig+0x11c>)
 800b450:	4293      	cmp	r3, r2
 800b452:	d10c      	bne.n	800b46e <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800b454:	697b      	ldr	r3, [r7, #20]
 800b456:	f023 0308 	bic.w	r3, r3, #8
 800b45a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800b45c:	683b      	ldr	r3, [r7, #0]
 800b45e:	68db      	ldr	r3, [r3, #12]
 800b460:	697a      	ldr	r2, [r7, #20]
 800b462:	4313      	orrs	r3, r2
 800b464:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800b466:	697b      	ldr	r3, [r7, #20]
 800b468:	f023 0304 	bic.w	r3, r3, #4
 800b46c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b46e:	687b      	ldr	r3, [r7, #4]
 800b470:	4a1c      	ldr	r2, [pc, #112]	; (800b4e4 <TIM_OC1_SetConfig+0x10c>)
 800b472:	4293      	cmp	r3, r2
 800b474:	d00f      	beq.n	800b496 <TIM_OC1_SetConfig+0xbe>
 800b476:	687b      	ldr	r3, [r7, #4]
 800b478:	4a1b      	ldr	r2, [pc, #108]	; (800b4e8 <TIM_OC1_SetConfig+0x110>)
 800b47a:	4293      	cmp	r3, r2
 800b47c:	d00b      	beq.n	800b496 <TIM_OC1_SetConfig+0xbe>
 800b47e:	687b      	ldr	r3, [r7, #4]
 800b480:	4a1a      	ldr	r2, [pc, #104]	; (800b4ec <TIM_OC1_SetConfig+0x114>)
 800b482:	4293      	cmp	r3, r2
 800b484:	d007      	beq.n	800b496 <TIM_OC1_SetConfig+0xbe>
 800b486:	687b      	ldr	r3, [r7, #4]
 800b488:	4a19      	ldr	r2, [pc, #100]	; (800b4f0 <TIM_OC1_SetConfig+0x118>)
 800b48a:	4293      	cmp	r3, r2
 800b48c:	d003      	beq.n	800b496 <TIM_OC1_SetConfig+0xbe>
 800b48e:	687b      	ldr	r3, [r7, #4]
 800b490:	4a18      	ldr	r2, [pc, #96]	; (800b4f4 <TIM_OC1_SetConfig+0x11c>)
 800b492:	4293      	cmp	r3, r2
 800b494:	d111      	bne.n	800b4ba <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800b496:	693b      	ldr	r3, [r7, #16]
 800b498:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b49c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800b49e:	693b      	ldr	r3, [r7, #16]
 800b4a0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800b4a4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800b4a6:	683b      	ldr	r3, [r7, #0]
 800b4a8:	695b      	ldr	r3, [r3, #20]
 800b4aa:	693a      	ldr	r2, [r7, #16]
 800b4ac:	4313      	orrs	r3, r2
 800b4ae:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800b4b0:	683b      	ldr	r3, [r7, #0]
 800b4b2:	699b      	ldr	r3, [r3, #24]
 800b4b4:	693a      	ldr	r2, [r7, #16]
 800b4b6:	4313      	orrs	r3, r2
 800b4b8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b4ba:	687b      	ldr	r3, [r7, #4]
 800b4bc:	693a      	ldr	r2, [r7, #16]
 800b4be:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b4c0:	687b      	ldr	r3, [r7, #4]
 800b4c2:	68fa      	ldr	r2, [r7, #12]
 800b4c4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800b4c6:	683b      	ldr	r3, [r7, #0]
 800b4c8:	685a      	ldr	r2, [r3, #4]
 800b4ca:	687b      	ldr	r3, [r7, #4]
 800b4cc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b4ce:	687b      	ldr	r3, [r7, #4]
 800b4d0:	697a      	ldr	r2, [r7, #20]
 800b4d2:	621a      	str	r2, [r3, #32]
}
 800b4d4:	bf00      	nop
 800b4d6:	371c      	adds	r7, #28
 800b4d8:	46bd      	mov	sp, r7
 800b4da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4de:	4770      	bx	lr
 800b4e0:	fffeff8f 	.word	0xfffeff8f
 800b4e4:	40010000 	.word	0x40010000
 800b4e8:	40010400 	.word	0x40010400
 800b4ec:	40014000 	.word	0x40014000
 800b4f0:	40014400 	.word	0x40014400
 800b4f4:	40014800 	.word	0x40014800

0800b4f8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b4f8:	b480      	push	{r7}
 800b4fa:	b087      	sub	sp, #28
 800b4fc:	af00      	add	r7, sp, #0
 800b4fe:	6078      	str	r0, [r7, #4]
 800b500:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b502:	687b      	ldr	r3, [r7, #4]
 800b504:	6a1b      	ldr	r3, [r3, #32]
 800b506:	f023 0210 	bic.w	r2, r3, #16
 800b50a:	687b      	ldr	r3, [r7, #4]
 800b50c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b50e:	687b      	ldr	r3, [r7, #4]
 800b510:	6a1b      	ldr	r3, [r3, #32]
 800b512:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b514:	687b      	ldr	r3, [r7, #4]
 800b516:	685b      	ldr	r3, [r3, #4]
 800b518:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b51a:	687b      	ldr	r3, [r7, #4]
 800b51c:	699b      	ldr	r3, [r3, #24]
 800b51e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800b520:	68fa      	ldr	r2, [r7, #12]
 800b522:	4b34      	ldr	r3, [pc, #208]	; (800b5f4 <TIM_OC2_SetConfig+0xfc>)
 800b524:	4013      	ands	r3, r2
 800b526:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800b528:	68fb      	ldr	r3, [r7, #12]
 800b52a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b52e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b530:	683b      	ldr	r3, [r7, #0]
 800b532:	681b      	ldr	r3, [r3, #0]
 800b534:	021b      	lsls	r3, r3, #8
 800b536:	68fa      	ldr	r2, [r7, #12]
 800b538:	4313      	orrs	r3, r2
 800b53a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800b53c:	697b      	ldr	r3, [r7, #20]
 800b53e:	f023 0320 	bic.w	r3, r3, #32
 800b542:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800b544:	683b      	ldr	r3, [r7, #0]
 800b546:	689b      	ldr	r3, [r3, #8]
 800b548:	011b      	lsls	r3, r3, #4
 800b54a:	697a      	ldr	r2, [r7, #20]
 800b54c:	4313      	orrs	r3, r2
 800b54e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800b550:	687b      	ldr	r3, [r7, #4]
 800b552:	4a29      	ldr	r2, [pc, #164]	; (800b5f8 <TIM_OC2_SetConfig+0x100>)
 800b554:	4293      	cmp	r3, r2
 800b556:	d003      	beq.n	800b560 <TIM_OC2_SetConfig+0x68>
 800b558:	687b      	ldr	r3, [r7, #4]
 800b55a:	4a28      	ldr	r2, [pc, #160]	; (800b5fc <TIM_OC2_SetConfig+0x104>)
 800b55c:	4293      	cmp	r3, r2
 800b55e:	d10d      	bne.n	800b57c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800b560:	697b      	ldr	r3, [r7, #20]
 800b562:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b566:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800b568:	683b      	ldr	r3, [r7, #0]
 800b56a:	68db      	ldr	r3, [r3, #12]
 800b56c:	011b      	lsls	r3, r3, #4
 800b56e:	697a      	ldr	r2, [r7, #20]
 800b570:	4313      	orrs	r3, r2
 800b572:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800b574:	697b      	ldr	r3, [r7, #20]
 800b576:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b57a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b57c:	687b      	ldr	r3, [r7, #4]
 800b57e:	4a1e      	ldr	r2, [pc, #120]	; (800b5f8 <TIM_OC2_SetConfig+0x100>)
 800b580:	4293      	cmp	r3, r2
 800b582:	d00f      	beq.n	800b5a4 <TIM_OC2_SetConfig+0xac>
 800b584:	687b      	ldr	r3, [r7, #4]
 800b586:	4a1d      	ldr	r2, [pc, #116]	; (800b5fc <TIM_OC2_SetConfig+0x104>)
 800b588:	4293      	cmp	r3, r2
 800b58a:	d00b      	beq.n	800b5a4 <TIM_OC2_SetConfig+0xac>
 800b58c:	687b      	ldr	r3, [r7, #4]
 800b58e:	4a1c      	ldr	r2, [pc, #112]	; (800b600 <TIM_OC2_SetConfig+0x108>)
 800b590:	4293      	cmp	r3, r2
 800b592:	d007      	beq.n	800b5a4 <TIM_OC2_SetConfig+0xac>
 800b594:	687b      	ldr	r3, [r7, #4]
 800b596:	4a1b      	ldr	r2, [pc, #108]	; (800b604 <TIM_OC2_SetConfig+0x10c>)
 800b598:	4293      	cmp	r3, r2
 800b59a:	d003      	beq.n	800b5a4 <TIM_OC2_SetConfig+0xac>
 800b59c:	687b      	ldr	r3, [r7, #4]
 800b59e:	4a1a      	ldr	r2, [pc, #104]	; (800b608 <TIM_OC2_SetConfig+0x110>)
 800b5a0:	4293      	cmp	r3, r2
 800b5a2:	d113      	bne.n	800b5cc <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800b5a4:	693b      	ldr	r3, [r7, #16]
 800b5a6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800b5aa:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800b5ac:	693b      	ldr	r3, [r7, #16]
 800b5ae:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800b5b2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800b5b4:	683b      	ldr	r3, [r7, #0]
 800b5b6:	695b      	ldr	r3, [r3, #20]
 800b5b8:	009b      	lsls	r3, r3, #2
 800b5ba:	693a      	ldr	r2, [r7, #16]
 800b5bc:	4313      	orrs	r3, r2
 800b5be:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800b5c0:	683b      	ldr	r3, [r7, #0]
 800b5c2:	699b      	ldr	r3, [r3, #24]
 800b5c4:	009b      	lsls	r3, r3, #2
 800b5c6:	693a      	ldr	r2, [r7, #16]
 800b5c8:	4313      	orrs	r3, r2
 800b5ca:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b5cc:	687b      	ldr	r3, [r7, #4]
 800b5ce:	693a      	ldr	r2, [r7, #16]
 800b5d0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b5d2:	687b      	ldr	r3, [r7, #4]
 800b5d4:	68fa      	ldr	r2, [r7, #12]
 800b5d6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800b5d8:	683b      	ldr	r3, [r7, #0]
 800b5da:	685a      	ldr	r2, [r3, #4]
 800b5dc:	687b      	ldr	r3, [r7, #4]
 800b5de:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b5e0:	687b      	ldr	r3, [r7, #4]
 800b5e2:	697a      	ldr	r2, [r7, #20]
 800b5e4:	621a      	str	r2, [r3, #32]
}
 800b5e6:	bf00      	nop
 800b5e8:	371c      	adds	r7, #28
 800b5ea:	46bd      	mov	sp, r7
 800b5ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5f0:	4770      	bx	lr
 800b5f2:	bf00      	nop
 800b5f4:	feff8fff 	.word	0xfeff8fff
 800b5f8:	40010000 	.word	0x40010000
 800b5fc:	40010400 	.word	0x40010400
 800b600:	40014000 	.word	0x40014000
 800b604:	40014400 	.word	0x40014400
 800b608:	40014800 	.word	0x40014800

0800b60c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b60c:	b480      	push	{r7}
 800b60e:	b087      	sub	sp, #28
 800b610:	af00      	add	r7, sp, #0
 800b612:	6078      	str	r0, [r7, #4]
 800b614:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800b616:	687b      	ldr	r3, [r7, #4]
 800b618:	6a1b      	ldr	r3, [r3, #32]
 800b61a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800b61e:	687b      	ldr	r3, [r7, #4]
 800b620:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b622:	687b      	ldr	r3, [r7, #4]
 800b624:	6a1b      	ldr	r3, [r3, #32]
 800b626:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b628:	687b      	ldr	r3, [r7, #4]
 800b62a:	685b      	ldr	r3, [r3, #4]
 800b62c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b62e:	687b      	ldr	r3, [r7, #4]
 800b630:	69db      	ldr	r3, [r3, #28]
 800b632:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800b634:	68fa      	ldr	r2, [r7, #12]
 800b636:	4b33      	ldr	r3, [pc, #204]	; (800b704 <TIM_OC3_SetConfig+0xf8>)
 800b638:	4013      	ands	r3, r2
 800b63a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800b63c:	68fb      	ldr	r3, [r7, #12]
 800b63e:	f023 0303 	bic.w	r3, r3, #3
 800b642:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b644:	683b      	ldr	r3, [r7, #0]
 800b646:	681b      	ldr	r3, [r3, #0]
 800b648:	68fa      	ldr	r2, [r7, #12]
 800b64a:	4313      	orrs	r3, r2
 800b64c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800b64e:	697b      	ldr	r3, [r7, #20]
 800b650:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800b654:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800b656:	683b      	ldr	r3, [r7, #0]
 800b658:	689b      	ldr	r3, [r3, #8]
 800b65a:	021b      	lsls	r3, r3, #8
 800b65c:	697a      	ldr	r2, [r7, #20]
 800b65e:	4313      	orrs	r3, r2
 800b660:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800b662:	687b      	ldr	r3, [r7, #4]
 800b664:	4a28      	ldr	r2, [pc, #160]	; (800b708 <TIM_OC3_SetConfig+0xfc>)
 800b666:	4293      	cmp	r3, r2
 800b668:	d003      	beq.n	800b672 <TIM_OC3_SetConfig+0x66>
 800b66a:	687b      	ldr	r3, [r7, #4]
 800b66c:	4a27      	ldr	r2, [pc, #156]	; (800b70c <TIM_OC3_SetConfig+0x100>)
 800b66e:	4293      	cmp	r3, r2
 800b670:	d10d      	bne.n	800b68e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800b672:	697b      	ldr	r3, [r7, #20]
 800b674:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800b678:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800b67a:	683b      	ldr	r3, [r7, #0]
 800b67c:	68db      	ldr	r3, [r3, #12]
 800b67e:	021b      	lsls	r3, r3, #8
 800b680:	697a      	ldr	r2, [r7, #20]
 800b682:	4313      	orrs	r3, r2
 800b684:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800b686:	697b      	ldr	r3, [r7, #20]
 800b688:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800b68c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b68e:	687b      	ldr	r3, [r7, #4]
 800b690:	4a1d      	ldr	r2, [pc, #116]	; (800b708 <TIM_OC3_SetConfig+0xfc>)
 800b692:	4293      	cmp	r3, r2
 800b694:	d00f      	beq.n	800b6b6 <TIM_OC3_SetConfig+0xaa>
 800b696:	687b      	ldr	r3, [r7, #4]
 800b698:	4a1c      	ldr	r2, [pc, #112]	; (800b70c <TIM_OC3_SetConfig+0x100>)
 800b69a:	4293      	cmp	r3, r2
 800b69c:	d00b      	beq.n	800b6b6 <TIM_OC3_SetConfig+0xaa>
 800b69e:	687b      	ldr	r3, [r7, #4]
 800b6a0:	4a1b      	ldr	r2, [pc, #108]	; (800b710 <TIM_OC3_SetConfig+0x104>)
 800b6a2:	4293      	cmp	r3, r2
 800b6a4:	d007      	beq.n	800b6b6 <TIM_OC3_SetConfig+0xaa>
 800b6a6:	687b      	ldr	r3, [r7, #4]
 800b6a8:	4a1a      	ldr	r2, [pc, #104]	; (800b714 <TIM_OC3_SetConfig+0x108>)
 800b6aa:	4293      	cmp	r3, r2
 800b6ac:	d003      	beq.n	800b6b6 <TIM_OC3_SetConfig+0xaa>
 800b6ae:	687b      	ldr	r3, [r7, #4]
 800b6b0:	4a19      	ldr	r2, [pc, #100]	; (800b718 <TIM_OC3_SetConfig+0x10c>)
 800b6b2:	4293      	cmp	r3, r2
 800b6b4:	d113      	bne.n	800b6de <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800b6b6:	693b      	ldr	r3, [r7, #16]
 800b6b8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b6bc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800b6be:	693b      	ldr	r3, [r7, #16]
 800b6c0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800b6c4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800b6c6:	683b      	ldr	r3, [r7, #0]
 800b6c8:	695b      	ldr	r3, [r3, #20]
 800b6ca:	011b      	lsls	r3, r3, #4
 800b6cc:	693a      	ldr	r2, [r7, #16]
 800b6ce:	4313      	orrs	r3, r2
 800b6d0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800b6d2:	683b      	ldr	r3, [r7, #0]
 800b6d4:	699b      	ldr	r3, [r3, #24]
 800b6d6:	011b      	lsls	r3, r3, #4
 800b6d8:	693a      	ldr	r2, [r7, #16]
 800b6da:	4313      	orrs	r3, r2
 800b6dc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b6de:	687b      	ldr	r3, [r7, #4]
 800b6e0:	693a      	ldr	r2, [r7, #16]
 800b6e2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b6e4:	687b      	ldr	r3, [r7, #4]
 800b6e6:	68fa      	ldr	r2, [r7, #12]
 800b6e8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800b6ea:	683b      	ldr	r3, [r7, #0]
 800b6ec:	685a      	ldr	r2, [r3, #4]
 800b6ee:	687b      	ldr	r3, [r7, #4]
 800b6f0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b6f2:	687b      	ldr	r3, [r7, #4]
 800b6f4:	697a      	ldr	r2, [r7, #20]
 800b6f6:	621a      	str	r2, [r3, #32]
}
 800b6f8:	bf00      	nop
 800b6fa:	371c      	adds	r7, #28
 800b6fc:	46bd      	mov	sp, r7
 800b6fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b702:	4770      	bx	lr
 800b704:	fffeff8f 	.word	0xfffeff8f
 800b708:	40010000 	.word	0x40010000
 800b70c:	40010400 	.word	0x40010400
 800b710:	40014000 	.word	0x40014000
 800b714:	40014400 	.word	0x40014400
 800b718:	40014800 	.word	0x40014800

0800b71c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b71c:	b480      	push	{r7}
 800b71e:	b087      	sub	sp, #28
 800b720:	af00      	add	r7, sp, #0
 800b722:	6078      	str	r0, [r7, #4]
 800b724:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800b726:	687b      	ldr	r3, [r7, #4]
 800b728:	6a1b      	ldr	r3, [r3, #32]
 800b72a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800b72e:	687b      	ldr	r3, [r7, #4]
 800b730:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b732:	687b      	ldr	r3, [r7, #4]
 800b734:	6a1b      	ldr	r3, [r3, #32]
 800b736:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b738:	687b      	ldr	r3, [r7, #4]
 800b73a:	685b      	ldr	r3, [r3, #4]
 800b73c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b73e:	687b      	ldr	r3, [r7, #4]
 800b740:	69db      	ldr	r3, [r3, #28]
 800b742:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800b744:	68fa      	ldr	r2, [r7, #12]
 800b746:	4b24      	ldr	r3, [pc, #144]	; (800b7d8 <TIM_OC4_SetConfig+0xbc>)
 800b748:	4013      	ands	r3, r2
 800b74a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800b74c:	68fb      	ldr	r3, [r7, #12]
 800b74e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b752:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b754:	683b      	ldr	r3, [r7, #0]
 800b756:	681b      	ldr	r3, [r3, #0]
 800b758:	021b      	lsls	r3, r3, #8
 800b75a:	68fa      	ldr	r2, [r7, #12]
 800b75c:	4313      	orrs	r3, r2
 800b75e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800b760:	693b      	ldr	r3, [r7, #16]
 800b762:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800b766:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800b768:	683b      	ldr	r3, [r7, #0]
 800b76a:	689b      	ldr	r3, [r3, #8]
 800b76c:	031b      	lsls	r3, r3, #12
 800b76e:	693a      	ldr	r2, [r7, #16]
 800b770:	4313      	orrs	r3, r2
 800b772:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b774:	687b      	ldr	r3, [r7, #4]
 800b776:	4a19      	ldr	r2, [pc, #100]	; (800b7dc <TIM_OC4_SetConfig+0xc0>)
 800b778:	4293      	cmp	r3, r2
 800b77a:	d00f      	beq.n	800b79c <TIM_OC4_SetConfig+0x80>
 800b77c:	687b      	ldr	r3, [r7, #4]
 800b77e:	4a18      	ldr	r2, [pc, #96]	; (800b7e0 <TIM_OC4_SetConfig+0xc4>)
 800b780:	4293      	cmp	r3, r2
 800b782:	d00b      	beq.n	800b79c <TIM_OC4_SetConfig+0x80>
 800b784:	687b      	ldr	r3, [r7, #4]
 800b786:	4a17      	ldr	r2, [pc, #92]	; (800b7e4 <TIM_OC4_SetConfig+0xc8>)
 800b788:	4293      	cmp	r3, r2
 800b78a:	d007      	beq.n	800b79c <TIM_OC4_SetConfig+0x80>
 800b78c:	687b      	ldr	r3, [r7, #4]
 800b78e:	4a16      	ldr	r2, [pc, #88]	; (800b7e8 <TIM_OC4_SetConfig+0xcc>)
 800b790:	4293      	cmp	r3, r2
 800b792:	d003      	beq.n	800b79c <TIM_OC4_SetConfig+0x80>
 800b794:	687b      	ldr	r3, [r7, #4]
 800b796:	4a15      	ldr	r2, [pc, #84]	; (800b7ec <TIM_OC4_SetConfig+0xd0>)
 800b798:	4293      	cmp	r3, r2
 800b79a:	d109      	bne.n	800b7b0 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800b79c:	697b      	ldr	r3, [r7, #20]
 800b79e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b7a2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800b7a4:	683b      	ldr	r3, [r7, #0]
 800b7a6:	695b      	ldr	r3, [r3, #20]
 800b7a8:	019b      	lsls	r3, r3, #6
 800b7aa:	697a      	ldr	r2, [r7, #20]
 800b7ac:	4313      	orrs	r3, r2
 800b7ae:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b7b0:	687b      	ldr	r3, [r7, #4]
 800b7b2:	697a      	ldr	r2, [r7, #20]
 800b7b4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b7b6:	687b      	ldr	r3, [r7, #4]
 800b7b8:	68fa      	ldr	r2, [r7, #12]
 800b7ba:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800b7bc:	683b      	ldr	r3, [r7, #0]
 800b7be:	685a      	ldr	r2, [r3, #4]
 800b7c0:	687b      	ldr	r3, [r7, #4]
 800b7c2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b7c4:	687b      	ldr	r3, [r7, #4]
 800b7c6:	693a      	ldr	r2, [r7, #16]
 800b7c8:	621a      	str	r2, [r3, #32]
}
 800b7ca:	bf00      	nop
 800b7cc:	371c      	adds	r7, #28
 800b7ce:	46bd      	mov	sp, r7
 800b7d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7d4:	4770      	bx	lr
 800b7d6:	bf00      	nop
 800b7d8:	feff8fff 	.word	0xfeff8fff
 800b7dc:	40010000 	.word	0x40010000
 800b7e0:	40010400 	.word	0x40010400
 800b7e4:	40014000 	.word	0x40014000
 800b7e8:	40014400 	.word	0x40014400
 800b7ec:	40014800 	.word	0x40014800

0800b7f0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800b7f0:	b480      	push	{r7}
 800b7f2:	b087      	sub	sp, #28
 800b7f4:	af00      	add	r7, sp, #0
 800b7f6:	6078      	str	r0, [r7, #4]
 800b7f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800b7fa:	687b      	ldr	r3, [r7, #4]
 800b7fc:	6a1b      	ldr	r3, [r3, #32]
 800b7fe:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800b802:	687b      	ldr	r3, [r7, #4]
 800b804:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b806:	687b      	ldr	r3, [r7, #4]
 800b808:	6a1b      	ldr	r3, [r3, #32]
 800b80a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b80c:	687b      	ldr	r3, [r7, #4]
 800b80e:	685b      	ldr	r3, [r3, #4]
 800b810:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800b812:	687b      	ldr	r3, [r7, #4]
 800b814:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b816:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800b818:	68fa      	ldr	r2, [r7, #12]
 800b81a:	4b21      	ldr	r3, [pc, #132]	; (800b8a0 <TIM_OC5_SetConfig+0xb0>)
 800b81c:	4013      	ands	r3, r2
 800b81e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b820:	683b      	ldr	r3, [r7, #0]
 800b822:	681b      	ldr	r3, [r3, #0]
 800b824:	68fa      	ldr	r2, [r7, #12]
 800b826:	4313      	orrs	r3, r2
 800b828:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800b82a:	693b      	ldr	r3, [r7, #16]
 800b82c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800b830:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800b832:	683b      	ldr	r3, [r7, #0]
 800b834:	689b      	ldr	r3, [r3, #8]
 800b836:	041b      	lsls	r3, r3, #16
 800b838:	693a      	ldr	r2, [r7, #16]
 800b83a:	4313      	orrs	r3, r2
 800b83c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b83e:	687b      	ldr	r3, [r7, #4]
 800b840:	4a18      	ldr	r2, [pc, #96]	; (800b8a4 <TIM_OC5_SetConfig+0xb4>)
 800b842:	4293      	cmp	r3, r2
 800b844:	d00f      	beq.n	800b866 <TIM_OC5_SetConfig+0x76>
 800b846:	687b      	ldr	r3, [r7, #4]
 800b848:	4a17      	ldr	r2, [pc, #92]	; (800b8a8 <TIM_OC5_SetConfig+0xb8>)
 800b84a:	4293      	cmp	r3, r2
 800b84c:	d00b      	beq.n	800b866 <TIM_OC5_SetConfig+0x76>
 800b84e:	687b      	ldr	r3, [r7, #4]
 800b850:	4a16      	ldr	r2, [pc, #88]	; (800b8ac <TIM_OC5_SetConfig+0xbc>)
 800b852:	4293      	cmp	r3, r2
 800b854:	d007      	beq.n	800b866 <TIM_OC5_SetConfig+0x76>
 800b856:	687b      	ldr	r3, [r7, #4]
 800b858:	4a15      	ldr	r2, [pc, #84]	; (800b8b0 <TIM_OC5_SetConfig+0xc0>)
 800b85a:	4293      	cmp	r3, r2
 800b85c:	d003      	beq.n	800b866 <TIM_OC5_SetConfig+0x76>
 800b85e:	687b      	ldr	r3, [r7, #4]
 800b860:	4a14      	ldr	r2, [pc, #80]	; (800b8b4 <TIM_OC5_SetConfig+0xc4>)
 800b862:	4293      	cmp	r3, r2
 800b864:	d109      	bne.n	800b87a <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800b866:	697b      	ldr	r3, [r7, #20]
 800b868:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b86c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800b86e:	683b      	ldr	r3, [r7, #0]
 800b870:	695b      	ldr	r3, [r3, #20]
 800b872:	021b      	lsls	r3, r3, #8
 800b874:	697a      	ldr	r2, [r7, #20]
 800b876:	4313      	orrs	r3, r2
 800b878:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b87a:	687b      	ldr	r3, [r7, #4]
 800b87c:	697a      	ldr	r2, [r7, #20]
 800b87e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800b880:	687b      	ldr	r3, [r7, #4]
 800b882:	68fa      	ldr	r2, [r7, #12]
 800b884:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800b886:	683b      	ldr	r3, [r7, #0]
 800b888:	685a      	ldr	r2, [r3, #4]
 800b88a:	687b      	ldr	r3, [r7, #4]
 800b88c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b88e:	687b      	ldr	r3, [r7, #4]
 800b890:	693a      	ldr	r2, [r7, #16]
 800b892:	621a      	str	r2, [r3, #32]
}
 800b894:	bf00      	nop
 800b896:	371c      	adds	r7, #28
 800b898:	46bd      	mov	sp, r7
 800b89a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b89e:	4770      	bx	lr
 800b8a0:	fffeff8f 	.word	0xfffeff8f
 800b8a4:	40010000 	.word	0x40010000
 800b8a8:	40010400 	.word	0x40010400
 800b8ac:	40014000 	.word	0x40014000
 800b8b0:	40014400 	.word	0x40014400
 800b8b4:	40014800 	.word	0x40014800

0800b8b8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800b8b8:	b480      	push	{r7}
 800b8ba:	b087      	sub	sp, #28
 800b8bc:	af00      	add	r7, sp, #0
 800b8be:	6078      	str	r0, [r7, #4]
 800b8c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800b8c2:	687b      	ldr	r3, [r7, #4]
 800b8c4:	6a1b      	ldr	r3, [r3, #32]
 800b8c6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800b8ca:	687b      	ldr	r3, [r7, #4]
 800b8cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b8ce:	687b      	ldr	r3, [r7, #4]
 800b8d0:	6a1b      	ldr	r3, [r3, #32]
 800b8d2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b8d4:	687b      	ldr	r3, [r7, #4]
 800b8d6:	685b      	ldr	r3, [r3, #4]
 800b8d8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800b8da:	687b      	ldr	r3, [r7, #4]
 800b8dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b8de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800b8e0:	68fa      	ldr	r2, [r7, #12]
 800b8e2:	4b22      	ldr	r3, [pc, #136]	; (800b96c <TIM_OC6_SetConfig+0xb4>)
 800b8e4:	4013      	ands	r3, r2
 800b8e6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b8e8:	683b      	ldr	r3, [r7, #0]
 800b8ea:	681b      	ldr	r3, [r3, #0]
 800b8ec:	021b      	lsls	r3, r3, #8
 800b8ee:	68fa      	ldr	r2, [r7, #12]
 800b8f0:	4313      	orrs	r3, r2
 800b8f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800b8f4:	693b      	ldr	r3, [r7, #16]
 800b8f6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800b8fa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800b8fc:	683b      	ldr	r3, [r7, #0]
 800b8fe:	689b      	ldr	r3, [r3, #8]
 800b900:	051b      	lsls	r3, r3, #20
 800b902:	693a      	ldr	r2, [r7, #16]
 800b904:	4313      	orrs	r3, r2
 800b906:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b908:	687b      	ldr	r3, [r7, #4]
 800b90a:	4a19      	ldr	r2, [pc, #100]	; (800b970 <TIM_OC6_SetConfig+0xb8>)
 800b90c:	4293      	cmp	r3, r2
 800b90e:	d00f      	beq.n	800b930 <TIM_OC6_SetConfig+0x78>
 800b910:	687b      	ldr	r3, [r7, #4]
 800b912:	4a18      	ldr	r2, [pc, #96]	; (800b974 <TIM_OC6_SetConfig+0xbc>)
 800b914:	4293      	cmp	r3, r2
 800b916:	d00b      	beq.n	800b930 <TIM_OC6_SetConfig+0x78>
 800b918:	687b      	ldr	r3, [r7, #4]
 800b91a:	4a17      	ldr	r2, [pc, #92]	; (800b978 <TIM_OC6_SetConfig+0xc0>)
 800b91c:	4293      	cmp	r3, r2
 800b91e:	d007      	beq.n	800b930 <TIM_OC6_SetConfig+0x78>
 800b920:	687b      	ldr	r3, [r7, #4]
 800b922:	4a16      	ldr	r2, [pc, #88]	; (800b97c <TIM_OC6_SetConfig+0xc4>)
 800b924:	4293      	cmp	r3, r2
 800b926:	d003      	beq.n	800b930 <TIM_OC6_SetConfig+0x78>
 800b928:	687b      	ldr	r3, [r7, #4]
 800b92a:	4a15      	ldr	r2, [pc, #84]	; (800b980 <TIM_OC6_SetConfig+0xc8>)
 800b92c:	4293      	cmp	r3, r2
 800b92e:	d109      	bne.n	800b944 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800b930:	697b      	ldr	r3, [r7, #20]
 800b932:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800b936:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800b938:	683b      	ldr	r3, [r7, #0]
 800b93a:	695b      	ldr	r3, [r3, #20]
 800b93c:	029b      	lsls	r3, r3, #10
 800b93e:	697a      	ldr	r2, [r7, #20]
 800b940:	4313      	orrs	r3, r2
 800b942:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b944:	687b      	ldr	r3, [r7, #4]
 800b946:	697a      	ldr	r2, [r7, #20]
 800b948:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800b94a:	687b      	ldr	r3, [r7, #4]
 800b94c:	68fa      	ldr	r2, [r7, #12]
 800b94e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800b950:	683b      	ldr	r3, [r7, #0]
 800b952:	685a      	ldr	r2, [r3, #4]
 800b954:	687b      	ldr	r3, [r7, #4]
 800b956:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b958:	687b      	ldr	r3, [r7, #4]
 800b95a:	693a      	ldr	r2, [r7, #16]
 800b95c:	621a      	str	r2, [r3, #32]
}
 800b95e:	bf00      	nop
 800b960:	371c      	adds	r7, #28
 800b962:	46bd      	mov	sp, r7
 800b964:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b968:	4770      	bx	lr
 800b96a:	bf00      	nop
 800b96c:	feff8fff 	.word	0xfeff8fff
 800b970:	40010000 	.word	0x40010000
 800b974:	40010400 	.word	0x40010400
 800b978:	40014000 	.word	0x40014000
 800b97c:	40014400 	.word	0x40014400
 800b980:	40014800 	.word	0x40014800

0800b984 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800b984:	b480      	push	{r7}
 800b986:	b087      	sub	sp, #28
 800b988:	af00      	add	r7, sp, #0
 800b98a:	60f8      	str	r0, [r7, #12]
 800b98c:	60b9      	str	r1, [r7, #8]
 800b98e:	607a      	str	r2, [r7, #4]
 800b990:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b992:	68fb      	ldr	r3, [r7, #12]
 800b994:	6a1b      	ldr	r3, [r3, #32]
 800b996:	f023 0201 	bic.w	r2, r3, #1
 800b99a:	68fb      	ldr	r3, [r7, #12]
 800b99c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b99e:	68fb      	ldr	r3, [r7, #12]
 800b9a0:	699b      	ldr	r3, [r3, #24]
 800b9a2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800b9a4:	68fb      	ldr	r3, [r7, #12]
 800b9a6:	6a1b      	ldr	r3, [r3, #32]
 800b9a8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800b9aa:	68fb      	ldr	r3, [r7, #12]
 800b9ac:	4a28      	ldr	r2, [pc, #160]	; (800ba50 <TIM_TI1_SetConfig+0xcc>)
 800b9ae:	4293      	cmp	r3, r2
 800b9b0:	d01b      	beq.n	800b9ea <TIM_TI1_SetConfig+0x66>
 800b9b2:	68fb      	ldr	r3, [r7, #12]
 800b9b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b9b8:	d017      	beq.n	800b9ea <TIM_TI1_SetConfig+0x66>
 800b9ba:	68fb      	ldr	r3, [r7, #12]
 800b9bc:	4a25      	ldr	r2, [pc, #148]	; (800ba54 <TIM_TI1_SetConfig+0xd0>)
 800b9be:	4293      	cmp	r3, r2
 800b9c0:	d013      	beq.n	800b9ea <TIM_TI1_SetConfig+0x66>
 800b9c2:	68fb      	ldr	r3, [r7, #12]
 800b9c4:	4a24      	ldr	r2, [pc, #144]	; (800ba58 <TIM_TI1_SetConfig+0xd4>)
 800b9c6:	4293      	cmp	r3, r2
 800b9c8:	d00f      	beq.n	800b9ea <TIM_TI1_SetConfig+0x66>
 800b9ca:	68fb      	ldr	r3, [r7, #12]
 800b9cc:	4a23      	ldr	r2, [pc, #140]	; (800ba5c <TIM_TI1_SetConfig+0xd8>)
 800b9ce:	4293      	cmp	r3, r2
 800b9d0:	d00b      	beq.n	800b9ea <TIM_TI1_SetConfig+0x66>
 800b9d2:	68fb      	ldr	r3, [r7, #12]
 800b9d4:	4a22      	ldr	r2, [pc, #136]	; (800ba60 <TIM_TI1_SetConfig+0xdc>)
 800b9d6:	4293      	cmp	r3, r2
 800b9d8:	d007      	beq.n	800b9ea <TIM_TI1_SetConfig+0x66>
 800b9da:	68fb      	ldr	r3, [r7, #12]
 800b9dc:	4a21      	ldr	r2, [pc, #132]	; (800ba64 <TIM_TI1_SetConfig+0xe0>)
 800b9de:	4293      	cmp	r3, r2
 800b9e0:	d003      	beq.n	800b9ea <TIM_TI1_SetConfig+0x66>
 800b9e2:	68fb      	ldr	r3, [r7, #12]
 800b9e4:	4a20      	ldr	r2, [pc, #128]	; (800ba68 <TIM_TI1_SetConfig+0xe4>)
 800b9e6:	4293      	cmp	r3, r2
 800b9e8:	d101      	bne.n	800b9ee <TIM_TI1_SetConfig+0x6a>
 800b9ea:	2301      	movs	r3, #1
 800b9ec:	e000      	b.n	800b9f0 <TIM_TI1_SetConfig+0x6c>
 800b9ee:	2300      	movs	r3, #0
 800b9f0:	2b00      	cmp	r3, #0
 800b9f2:	d008      	beq.n	800ba06 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800b9f4:	697b      	ldr	r3, [r7, #20]
 800b9f6:	f023 0303 	bic.w	r3, r3, #3
 800b9fa:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800b9fc:	697a      	ldr	r2, [r7, #20]
 800b9fe:	687b      	ldr	r3, [r7, #4]
 800ba00:	4313      	orrs	r3, r2
 800ba02:	617b      	str	r3, [r7, #20]
 800ba04:	e003      	b.n	800ba0e <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800ba06:	697b      	ldr	r3, [r7, #20]
 800ba08:	f043 0301 	orr.w	r3, r3, #1
 800ba0c:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800ba0e:	697b      	ldr	r3, [r7, #20]
 800ba10:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800ba14:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800ba16:	683b      	ldr	r3, [r7, #0]
 800ba18:	011b      	lsls	r3, r3, #4
 800ba1a:	b2db      	uxtb	r3, r3
 800ba1c:	697a      	ldr	r2, [r7, #20]
 800ba1e:	4313      	orrs	r3, r2
 800ba20:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800ba22:	693b      	ldr	r3, [r7, #16]
 800ba24:	f023 030a 	bic.w	r3, r3, #10
 800ba28:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800ba2a:	68bb      	ldr	r3, [r7, #8]
 800ba2c:	f003 030a 	and.w	r3, r3, #10
 800ba30:	693a      	ldr	r2, [r7, #16]
 800ba32:	4313      	orrs	r3, r2
 800ba34:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800ba36:	68fb      	ldr	r3, [r7, #12]
 800ba38:	697a      	ldr	r2, [r7, #20]
 800ba3a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800ba3c:	68fb      	ldr	r3, [r7, #12]
 800ba3e:	693a      	ldr	r2, [r7, #16]
 800ba40:	621a      	str	r2, [r3, #32]
}
 800ba42:	bf00      	nop
 800ba44:	371c      	adds	r7, #28
 800ba46:	46bd      	mov	sp, r7
 800ba48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba4c:	4770      	bx	lr
 800ba4e:	bf00      	nop
 800ba50:	40010000 	.word	0x40010000
 800ba54:	40000400 	.word	0x40000400
 800ba58:	40000800 	.word	0x40000800
 800ba5c:	40000c00 	.word	0x40000c00
 800ba60:	40010400 	.word	0x40010400
 800ba64:	40001800 	.word	0x40001800
 800ba68:	40014000 	.word	0x40014000

0800ba6c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800ba6c:	b480      	push	{r7}
 800ba6e:	b087      	sub	sp, #28
 800ba70:	af00      	add	r7, sp, #0
 800ba72:	60f8      	str	r0, [r7, #12]
 800ba74:	60b9      	str	r1, [r7, #8]
 800ba76:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800ba78:	68fb      	ldr	r3, [r7, #12]
 800ba7a:	6a1b      	ldr	r3, [r3, #32]
 800ba7c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800ba7e:	68fb      	ldr	r3, [r7, #12]
 800ba80:	6a1b      	ldr	r3, [r3, #32]
 800ba82:	f023 0201 	bic.w	r2, r3, #1
 800ba86:	68fb      	ldr	r3, [r7, #12]
 800ba88:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ba8a:	68fb      	ldr	r3, [r7, #12]
 800ba8c:	699b      	ldr	r3, [r3, #24]
 800ba8e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800ba90:	693b      	ldr	r3, [r7, #16]
 800ba92:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800ba96:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800ba98:	687b      	ldr	r3, [r7, #4]
 800ba9a:	011b      	lsls	r3, r3, #4
 800ba9c:	693a      	ldr	r2, [r7, #16]
 800ba9e:	4313      	orrs	r3, r2
 800baa0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800baa2:	697b      	ldr	r3, [r7, #20]
 800baa4:	f023 030a 	bic.w	r3, r3, #10
 800baa8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800baaa:	697a      	ldr	r2, [r7, #20]
 800baac:	68bb      	ldr	r3, [r7, #8]
 800baae:	4313      	orrs	r3, r2
 800bab0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800bab2:	68fb      	ldr	r3, [r7, #12]
 800bab4:	693a      	ldr	r2, [r7, #16]
 800bab6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800bab8:	68fb      	ldr	r3, [r7, #12]
 800baba:	697a      	ldr	r2, [r7, #20]
 800babc:	621a      	str	r2, [r3, #32]
}
 800babe:	bf00      	nop
 800bac0:	371c      	adds	r7, #28
 800bac2:	46bd      	mov	sp, r7
 800bac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bac8:	4770      	bx	lr

0800baca <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800baca:	b480      	push	{r7}
 800bacc:	b087      	sub	sp, #28
 800bace:	af00      	add	r7, sp, #0
 800bad0:	60f8      	str	r0, [r7, #12]
 800bad2:	60b9      	str	r1, [r7, #8]
 800bad4:	607a      	str	r2, [r7, #4]
 800bad6:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800bad8:	68fb      	ldr	r3, [r7, #12]
 800bada:	6a1b      	ldr	r3, [r3, #32]
 800badc:	f023 0210 	bic.w	r2, r3, #16
 800bae0:	68fb      	ldr	r3, [r7, #12]
 800bae2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800bae4:	68fb      	ldr	r3, [r7, #12]
 800bae6:	699b      	ldr	r3, [r3, #24]
 800bae8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800baea:	68fb      	ldr	r3, [r7, #12]
 800baec:	6a1b      	ldr	r3, [r3, #32]
 800baee:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800baf0:	697b      	ldr	r3, [r7, #20]
 800baf2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800baf6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800baf8:	687b      	ldr	r3, [r7, #4]
 800bafa:	021b      	lsls	r3, r3, #8
 800bafc:	697a      	ldr	r2, [r7, #20]
 800bafe:	4313      	orrs	r3, r2
 800bb00:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800bb02:	697b      	ldr	r3, [r7, #20]
 800bb04:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800bb08:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800bb0a:	683b      	ldr	r3, [r7, #0]
 800bb0c:	031b      	lsls	r3, r3, #12
 800bb0e:	b29b      	uxth	r3, r3
 800bb10:	697a      	ldr	r2, [r7, #20]
 800bb12:	4313      	orrs	r3, r2
 800bb14:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800bb16:	693b      	ldr	r3, [r7, #16]
 800bb18:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800bb1c:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800bb1e:	68bb      	ldr	r3, [r7, #8]
 800bb20:	011b      	lsls	r3, r3, #4
 800bb22:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800bb26:	693a      	ldr	r2, [r7, #16]
 800bb28:	4313      	orrs	r3, r2
 800bb2a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800bb2c:	68fb      	ldr	r3, [r7, #12]
 800bb2e:	697a      	ldr	r2, [r7, #20]
 800bb30:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800bb32:	68fb      	ldr	r3, [r7, #12]
 800bb34:	693a      	ldr	r2, [r7, #16]
 800bb36:	621a      	str	r2, [r3, #32]
}
 800bb38:	bf00      	nop
 800bb3a:	371c      	adds	r7, #28
 800bb3c:	46bd      	mov	sp, r7
 800bb3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb42:	4770      	bx	lr

0800bb44 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800bb44:	b480      	push	{r7}
 800bb46:	b087      	sub	sp, #28
 800bb48:	af00      	add	r7, sp, #0
 800bb4a:	60f8      	str	r0, [r7, #12]
 800bb4c:	60b9      	str	r1, [r7, #8]
 800bb4e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800bb50:	68fb      	ldr	r3, [r7, #12]
 800bb52:	6a1b      	ldr	r3, [r3, #32]
 800bb54:	f023 0210 	bic.w	r2, r3, #16
 800bb58:	68fb      	ldr	r3, [r7, #12]
 800bb5a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800bb5c:	68fb      	ldr	r3, [r7, #12]
 800bb5e:	699b      	ldr	r3, [r3, #24]
 800bb60:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800bb62:	68fb      	ldr	r3, [r7, #12]
 800bb64:	6a1b      	ldr	r3, [r3, #32]
 800bb66:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800bb68:	697b      	ldr	r3, [r7, #20]
 800bb6a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800bb6e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800bb70:	687b      	ldr	r3, [r7, #4]
 800bb72:	031b      	lsls	r3, r3, #12
 800bb74:	697a      	ldr	r2, [r7, #20]
 800bb76:	4313      	orrs	r3, r2
 800bb78:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800bb7a:	693b      	ldr	r3, [r7, #16]
 800bb7c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800bb80:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800bb82:	68bb      	ldr	r3, [r7, #8]
 800bb84:	011b      	lsls	r3, r3, #4
 800bb86:	693a      	ldr	r2, [r7, #16]
 800bb88:	4313      	orrs	r3, r2
 800bb8a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800bb8c:	68fb      	ldr	r3, [r7, #12]
 800bb8e:	697a      	ldr	r2, [r7, #20]
 800bb90:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800bb92:	68fb      	ldr	r3, [r7, #12]
 800bb94:	693a      	ldr	r2, [r7, #16]
 800bb96:	621a      	str	r2, [r3, #32]
}
 800bb98:	bf00      	nop
 800bb9a:	371c      	adds	r7, #28
 800bb9c:	46bd      	mov	sp, r7
 800bb9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bba2:	4770      	bx	lr

0800bba4 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800bba4:	b480      	push	{r7}
 800bba6:	b087      	sub	sp, #28
 800bba8:	af00      	add	r7, sp, #0
 800bbaa:	60f8      	str	r0, [r7, #12]
 800bbac:	60b9      	str	r1, [r7, #8]
 800bbae:	607a      	str	r2, [r7, #4]
 800bbb0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800bbb2:	68fb      	ldr	r3, [r7, #12]
 800bbb4:	6a1b      	ldr	r3, [r3, #32]
 800bbb6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800bbba:	68fb      	ldr	r3, [r7, #12]
 800bbbc:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800bbbe:	68fb      	ldr	r3, [r7, #12]
 800bbc0:	69db      	ldr	r3, [r3, #28]
 800bbc2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800bbc4:	68fb      	ldr	r3, [r7, #12]
 800bbc6:	6a1b      	ldr	r3, [r3, #32]
 800bbc8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800bbca:	697b      	ldr	r3, [r7, #20]
 800bbcc:	f023 0303 	bic.w	r3, r3, #3
 800bbd0:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 800bbd2:	697a      	ldr	r2, [r7, #20]
 800bbd4:	687b      	ldr	r3, [r7, #4]
 800bbd6:	4313      	orrs	r3, r2
 800bbd8:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800bbda:	697b      	ldr	r3, [r7, #20]
 800bbdc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800bbe0:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800bbe2:	683b      	ldr	r3, [r7, #0]
 800bbe4:	011b      	lsls	r3, r3, #4
 800bbe6:	b2db      	uxtb	r3, r3
 800bbe8:	697a      	ldr	r2, [r7, #20]
 800bbea:	4313      	orrs	r3, r2
 800bbec:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800bbee:	693b      	ldr	r3, [r7, #16]
 800bbf0:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 800bbf4:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800bbf6:	68bb      	ldr	r3, [r7, #8]
 800bbf8:	021b      	lsls	r3, r3, #8
 800bbfa:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 800bbfe:	693a      	ldr	r2, [r7, #16]
 800bc00:	4313      	orrs	r3, r2
 800bc02:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800bc04:	68fb      	ldr	r3, [r7, #12]
 800bc06:	697a      	ldr	r2, [r7, #20]
 800bc08:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800bc0a:	68fb      	ldr	r3, [r7, #12]
 800bc0c:	693a      	ldr	r2, [r7, #16]
 800bc0e:	621a      	str	r2, [r3, #32]
}
 800bc10:	bf00      	nop
 800bc12:	371c      	adds	r7, #28
 800bc14:	46bd      	mov	sp, r7
 800bc16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc1a:	4770      	bx	lr

0800bc1c <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800bc1c:	b480      	push	{r7}
 800bc1e:	b087      	sub	sp, #28
 800bc20:	af00      	add	r7, sp, #0
 800bc22:	60f8      	str	r0, [r7, #12]
 800bc24:	60b9      	str	r1, [r7, #8]
 800bc26:	607a      	str	r2, [r7, #4]
 800bc28:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800bc2a:	68fb      	ldr	r3, [r7, #12]
 800bc2c:	6a1b      	ldr	r3, [r3, #32]
 800bc2e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800bc32:	68fb      	ldr	r3, [r7, #12]
 800bc34:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800bc36:	68fb      	ldr	r3, [r7, #12]
 800bc38:	69db      	ldr	r3, [r3, #28]
 800bc3a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800bc3c:	68fb      	ldr	r3, [r7, #12]
 800bc3e:	6a1b      	ldr	r3, [r3, #32]
 800bc40:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800bc42:	697b      	ldr	r3, [r7, #20]
 800bc44:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800bc48:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800bc4a:	687b      	ldr	r3, [r7, #4]
 800bc4c:	021b      	lsls	r3, r3, #8
 800bc4e:	697a      	ldr	r2, [r7, #20]
 800bc50:	4313      	orrs	r3, r2
 800bc52:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800bc54:	697b      	ldr	r3, [r7, #20]
 800bc56:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800bc5a:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800bc5c:	683b      	ldr	r3, [r7, #0]
 800bc5e:	031b      	lsls	r3, r3, #12
 800bc60:	b29b      	uxth	r3, r3
 800bc62:	697a      	ldr	r2, [r7, #20]
 800bc64:	4313      	orrs	r3, r2
 800bc66:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800bc68:	693b      	ldr	r3, [r7, #16]
 800bc6a:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 800bc6e:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800bc70:	68bb      	ldr	r3, [r7, #8]
 800bc72:	031b      	lsls	r3, r3, #12
 800bc74:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 800bc78:	693a      	ldr	r2, [r7, #16]
 800bc7a:	4313      	orrs	r3, r2
 800bc7c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800bc7e:	68fb      	ldr	r3, [r7, #12]
 800bc80:	697a      	ldr	r2, [r7, #20]
 800bc82:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800bc84:	68fb      	ldr	r3, [r7, #12]
 800bc86:	693a      	ldr	r2, [r7, #16]
 800bc88:	621a      	str	r2, [r3, #32]
}
 800bc8a:	bf00      	nop
 800bc8c:	371c      	adds	r7, #28
 800bc8e:	46bd      	mov	sp, r7
 800bc90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc94:	4770      	bx	lr
	...

0800bc98 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800bc98:	b480      	push	{r7}
 800bc9a:	b085      	sub	sp, #20
 800bc9c:	af00      	add	r7, sp, #0
 800bc9e:	6078      	str	r0, [r7, #4]
 800bca0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800bca2:	687b      	ldr	r3, [r7, #4]
 800bca4:	689b      	ldr	r3, [r3, #8]
 800bca6:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800bca8:	68fa      	ldr	r2, [r7, #12]
 800bcaa:	4b09      	ldr	r3, [pc, #36]	; (800bcd0 <TIM_ITRx_SetConfig+0x38>)
 800bcac:	4013      	ands	r3, r2
 800bcae:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800bcb0:	683a      	ldr	r2, [r7, #0]
 800bcb2:	68fb      	ldr	r3, [r7, #12]
 800bcb4:	4313      	orrs	r3, r2
 800bcb6:	f043 0307 	orr.w	r3, r3, #7
 800bcba:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800bcbc:	687b      	ldr	r3, [r7, #4]
 800bcbe:	68fa      	ldr	r2, [r7, #12]
 800bcc0:	609a      	str	r2, [r3, #8]
}
 800bcc2:	bf00      	nop
 800bcc4:	3714      	adds	r7, #20
 800bcc6:	46bd      	mov	sp, r7
 800bcc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bccc:	4770      	bx	lr
 800bcce:	bf00      	nop
 800bcd0:	ffcfff8f 	.word	0xffcfff8f

0800bcd4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800bcd4:	b480      	push	{r7}
 800bcd6:	b087      	sub	sp, #28
 800bcd8:	af00      	add	r7, sp, #0
 800bcda:	60f8      	str	r0, [r7, #12]
 800bcdc:	60b9      	str	r1, [r7, #8]
 800bcde:	607a      	str	r2, [r7, #4]
 800bce0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800bce2:	68fb      	ldr	r3, [r7, #12]
 800bce4:	689b      	ldr	r3, [r3, #8]
 800bce6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800bce8:	697b      	ldr	r3, [r7, #20]
 800bcea:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800bcee:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800bcf0:	683b      	ldr	r3, [r7, #0]
 800bcf2:	021a      	lsls	r2, r3, #8
 800bcf4:	687b      	ldr	r3, [r7, #4]
 800bcf6:	431a      	orrs	r2, r3
 800bcf8:	68bb      	ldr	r3, [r7, #8]
 800bcfa:	4313      	orrs	r3, r2
 800bcfc:	697a      	ldr	r2, [r7, #20]
 800bcfe:	4313      	orrs	r3, r2
 800bd00:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800bd02:	68fb      	ldr	r3, [r7, #12]
 800bd04:	697a      	ldr	r2, [r7, #20]
 800bd06:	609a      	str	r2, [r3, #8]
}
 800bd08:	bf00      	nop
 800bd0a:	371c      	adds	r7, #28
 800bd0c:	46bd      	mov	sp, r7
 800bd0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd12:	4770      	bx	lr

0800bd14 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800bd14:	b480      	push	{r7}
 800bd16:	b087      	sub	sp, #28
 800bd18:	af00      	add	r7, sp, #0
 800bd1a:	60f8      	str	r0, [r7, #12]
 800bd1c:	60b9      	str	r1, [r7, #8]
 800bd1e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800bd20:	68bb      	ldr	r3, [r7, #8]
 800bd22:	f003 031f 	and.w	r3, r3, #31
 800bd26:	2201      	movs	r2, #1
 800bd28:	fa02 f303 	lsl.w	r3, r2, r3
 800bd2c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800bd2e:	68fb      	ldr	r3, [r7, #12]
 800bd30:	6a1a      	ldr	r2, [r3, #32]
 800bd32:	697b      	ldr	r3, [r7, #20]
 800bd34:	43db      	mvns	r3, r3
 800bd36:	401a      	ands	r2, r3
 800bd38:	68fb      	ldr	r3, [r7, #12]
 800bd3a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800bd3c:	68fb      	ldr	r3, [r7, #12]
 800bd3e:	6a1a      	ldr	r2, [r3, #32]
 800bd40:	68bb      	ldr	r3, [r7, #8]
 800bd42:	f003 031f 	and.w	r3, r3, #31
 800bd46:	6879      	ldr	r1, [r7, #4]
 800bd48:	fa01 f303 	lsl.w	r3, r1, r3
 800bd4c:	431a      	orrs	r2, r3
 800bd4e:	68fb      	ldr	r3, [r7, #12]
 800bd50:	621a      	str	r2, [r3, #32]
}
 800bd52:	bf00      	nop
 800bd54:	371c      	adds	r7, #28
 800bd56:	46bd      	mov	sp, r7
 800bd58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd5c:	4770      	bx	lr
	...

0800bd60 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800bd60:	b480      	push	{r7}
 800bd62:	b085      	sub	sp, #20
 800bd64:	af00      	add	r7, sp, #0
 800bd66:	6078      	str	r0, [r7, #4]
 800bd68:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800bd6a:	687b      	ldr	r3, [r7, #4]
 800bd6c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800bd70:	2b01      	cmp	r3, #1
 800bd72:	d101      	bne.n	800bd78 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800bd74:	2302      	movs	r3, #2
 800bd76:	e06d      	b.n	800be54 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800bd78:	687b      	ldr	r3, [r7, #4]
 800bd7a:	2201      	movs	r2, #1
 800bd7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bd80:	687b      	ldr	r3, [r7, #4]
 800bd82:	2202      	movs	r2, #2
 800bd84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800bd88:	687b      	ldr	r3, [r7, #4]
 800bd8a:	681b      	ldr	r3, [r3, #0]
 800bd8c:	685b      	ldr	r3, [r3, #4]
 800bd8e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800bd90:	687b      	ldr	r3, [r7, #4]
 800bd92:	681b      	ldr	r3, [r3, #0]
 800bd94:	689b      	ldr	r3, [r3, #8]
 800bd96:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800bd98:	687b      	ldr	r3, [r7, #4]
 800bd9a:	681b      	ldr	r3, [r3, #0]
 800bd9c:	4a30      	ldr	r2, [pc, #192]	; (800be60 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800bd9e:	4293      	cmp	r3, r2
 800bda0:	d004      	beq.n	800bdac <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800bda2:	687b      	ldr	r3, [r7, #4]
 800bda4:	681b      	ldr	r3, [r3, #0]
 800bda6:	4a2f      	ldr	r2, [pc, #188]	; (800be64 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800bda8:	4293      	cmp	r3, r2
 800bdaa:	d108      	bne.n	800bdbe <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800bdac:	68fb      	ldr	r3, [r7, #12]
 800bdae:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800bdb2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800bdb4:	683b      	ldr	r3, [r7, #0]
 800bdb6:	685b      	ldr	r3, [r3, #4]
 800bdb8:	68fa      	ldr	r2, [r7, #12]
 800bdba:	4313      	orrs	r3, r2
 800bdbc:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800bdbe:	68fb      	ldr	r3, [r7, #12]
 800bdc0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bdc4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800bdc6:	683b      	ldr	r3, [r7, #0]
 800bdc8:	681b      	ldr	r3, [r3, #0]
 800bdca:	68fa      	ldr	r2, [r7, #12]
 800bdcc:	4313      	orrs	r3, r2
 800bdce:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800bdd0:	687b      	ldr	r3, [r7, #4]
 800bdd2:	681b      	ldr	r3, [r3, #0]
 800bdd4:	68fa      	ldr	r2, [r7, #12]
 800bdd6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800bdd8:	687b      	ldr	r3, [r7, #4]
 800bdda:	681b      	ldr	r3, [r3, #0]
 800bddc:	4a20      	ldr	r2, [pc, #128]	; (800be60 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800bdde:	4293      	cmp	r3, r2
 800bde0:	d022      	beq.n	800be28 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800bde2:	687b      	ldr	r3, [r7, #4]
 800bde4:	681b      	ldr	r3, [r3, #0]
 800bde6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bdea:	d01d      	beq.n	800be28 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800bdec:	687b      	ldr	r3, [r7, #4]
 800bdee:	681b      	ldr	r3, [r3, #0]
 800bdf0:	4a1d      	ldr	r2, [pc, #116]	; (800be68 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800bdf2:	4293      	cmp	r3, r2
 800bdf4:	d018      	beq.n	800be28 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800bdf6:	687b      	ldr	r3, [r7, #4]
 800bdf8:	681b      	ldr	r3, [r3, #0]
 800bdfa:	4a1c      	ldr	r2, [pc, #112]	; (800be6c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800bdfc:	4293      	cmp	r3, r2
 800bdfe:	d013      	beq.n	800be28 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800be00:	687b      	ldr	r3, [r7, #4]
 800be02:	681b      	ldr	r3, [r3, #0]
 800be04:	4a1a      	ldr	r2, [pc, #104]	; (800be70 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800be06:	4293      	cmp	r3, r2
 800be08:	d00e      	beq.n	800be28 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800be0a:	687b      	ldr	r3, [r7, #4]
 800be0c:	681b      	ldr	r3, [r3, #0]
 800be0e:	4a15      	ldr	r2, [pc, #84]	; (800be64 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800be10:	4293      	cmp	r3, r2
 800be12:	d009      	beq.n	800be28 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800be14:	687b      	ldr	r3, [r7, #4]
 800be16:	681b      	ldr	r3, [r3, #0]
 800be18:	4a16      	ldr	r2, [pc, #88]	; (800be74 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800be1a:	4293      	cmp	r3, r2
 800be1c:	d004      	beq.n	800be28 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800be1e:	687b      	ldr	r3, [r7, #4]
 800be20:	681b      	ldr	r3, [r3, #0]
 800be22:	4a15      	ldr	r2, [pc, #84]	; (800be78 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800be24:	4293      	cmp	r3, r2
 800be26:	d10c      	bne.n	800be42 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800be28:	68bb      	ldr	r3, [r7, #8]
 800be2a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800be2e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800be30:	683b      	ldr	r3, [r7, #0]
 800be32:	689b      	ldr	r3, [r3, #8]
 800be34:	68ba      	ldr	r2, [r7, #8]
 800be36:	4313      	orrs	r3, r2
 800be38:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800be3a:	687b      	ldr	r3, [r7, #4]
 800be3c:	681b      	ldr	r3, [r3, #0]
 800be3e:	68ba      	ldr	r2, [r7, #8]
 800be40:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800be42:	687b      	ldr	r3, [r7, #4]
 800be44:	2201      	movs	r2, #1
 800be46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800be4a:	687b      	ldr	r3, [r7, #4]
 800be4c:	2200      	movs	r2, #0
 800be4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800be52:	2300      	movs	r3, #0
}
 800be54:	4618      	mov	r0, r3
 800be56:	3714      	adds	r7, #20
 800be58:	46bd      	mov	sp, r7
 800be5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be5e:	4770      	bx	lr
 800be60:	40010000 	.word	0x40010000
 800be64:	40010400 	.word	0x40010400
 800be68:	40000400 	.word	0x40000400
 800be6c:	40000800 	.word	0x40000800
 800be70:	40000c00 	.word	0x40000c00
 800be74:	40001800 	.word	0x40001800
 800be78:	40014000 	.word	0x40014000

0800be7c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800be7c:	b480      	push	{r7}
 800be7e:	b083      	sub	sp, #12
 800be80:	af00      	add	r7, sp, #0
 800be82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800be84:	bf00      	nop
 800be86:	370c      	adds	r7, #12
 800be88:	46bd      	mov	sp, r7
 800be8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be8e:	4770      	bx	lr

0800be90 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800be90:	b480      	push	{r7}
 800be92:	b083      	sub	sp, #12
 800be94:	af00      	add	r7, sp, #0
 800be96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800be98:	bf00      	nop
 800be9a:	370c      	adds	r7, #12
 800be9c:	46bd      	mov	sp, r7
 800be9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bea2:	4770      	bx	lr

0800bea4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800bea4:	b480      	push	{r7}
 800bea6:	b083      	sub	sp, #12
 800bea8:	af00      	add	r7, sp, #0
 800beaa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800beac:	bf00      	nop
 800beae:	370c      	adds	r7, #12
 800beb0:	46bd      	mov	sp, r7
 800beb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800beb6:	4770      	bx	lr

0800beb8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800beb8:	b580      	push	{r7, lr}
 800beba:	b082      	sub	sp, #8
 800bebc:	af00      	add	r7, sp, #0
 800bebe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800bec0:	687b      	ldr	r3, [r7, #4]
 800bec2:	2b00      	cmp	r3, #0
 800bec4:	d101      	bne.n	800beca <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800bec6:	2301      	movs	r3, #1
 800bec8:	e042      	b.n	800bf50 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800beca:	687b      	ldr	r3, [r7, #4]
 800becc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bed0:	2b00      	cmp	r3, #0
 800bed2:	d106      	bne.n	800bee2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800bed4:	687b      	ldr	r3, [r7, #4]
 800bed6:	2200      	movs	r2, #0
 800bed8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800bedc:	6878      	ldr	r0, [r7, #4]
 800bede:	f7fa fa27 	bl	8006330 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800bee2:	687b      	ldr	r3, [r7, #4]
 800bee4:	2224      	movs	r2, #36	; 0x24
 800bee6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800beea:	687b      	ldr	r3, [r7, #4]
 800beec:	681b      	ldr	r3, [r3, #0]
 800beee:	681a      	ldr	r2, [r3, #0]
 800bef0:	687b      	ldr	r3, [r7, #4]
 800bef2:	681b      	ldr	r3, [r3, #0]
 800bef4:	f022 0201 	bic.w	r2, r2, #1
 800bef8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800befa:	6878      	ldr	r0, [r7, #4]
 800befc:	f000 fccc 	bl	800c898 <UART_SetConfig>
 800bf00:	4603      	mov	r3, r0
 800bf02:	2b01      	cmp	r3, #1
 800bf04:	d101      	bne.n	800bf0a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800bf06:	2301      	movs	r3, #1
 800bf08:	e022      	b.n	800bf50 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800bf0a:	687b      	ldr	r3, [r7, #4]
 800bf0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bf0e:	2b00      	cmp	r3, #0
 800bf10:	d002      	beq.n	800bf18 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800bf12:	6878      	ldr	r0, [r7, #4]
 800bf14:	f001 fa28 	bl	800d368 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800bf18:	687b      	ldr	r3, [r7, #4]
 800bf1a:	681b      	ldr	r3, [r3, #0]
 800bf1c:	685a      	ldr	r2, [r3, #4]
 800bf1e:	687b      	ldr	r3, [r7, #4]
 800bf20:	681b      	ldr	r3, [r3, #0]
 800bf22:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800bf26:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800bf28:	687b      	ldr	r3, [r7, #4]
 800bf2a:	681b      	ldr	r3, [r3, #0]
 800bf2c:	689a      	ldr	r2, [r3, #8]
 800bf2e:	687b      	ldr	r3, [r7, #4]
 800bf30:	681b      	ldr	r3, [r3, #0]
 800bf32:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800bf36:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800bf38:	687b      	ldr	r3, [r7, #4]
 800bf3a:	681b      	ldr	r3, [r3, #0]
 800bf3c:	681a      	ldr	r2, [r3, #0]
 800bf3e:	687b      	ldr	r3, [r7, #4]
 800bf40:	681b      	ldr	r3, [r3, #0]
 800bf42:	f042 0201 	orr.w	r2, r2, #1
 800bf46:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800bf48:	6878      	ldr	r0, [r7, #4]
 800bf4a:	f001 faaf 	bl	800d4ac <UART_CheckIdleState>
 800bf4e:	4603      	mov	r3, r0
}
 800bf50:	4618      	mov	r0, r3
 800bf52:	3708      	adds	r7, #8
 800bf54:	46bd      	mov	sp, r7
 800bf56:	bd80      	pop	{r7, pc}

0800bf58 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800bf58:	b580      	push	{r7, lr}
 800bf5a:	b08a      	sub	sp, #40	; 0x28
 800bf5c:	af02      	add	r7, sp, #8
 800bf5e:	60f8      	str	r0, [r7, #12]
 800bf60:	60b9      	str	r1, [r7, #8]
 800bf62:	603b      	str	r3, [r7, #0]
 800bf64:	4613      	mov	r3, r2
 800bf66:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800bf68:	68fb      	ldr	r3, [r7, #12]
 800bf6a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bf6e:	2b20      	cmp	r3, #32
 800bf70:	f040 8083 	bne.w	800c07a <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 800bf74:	68bb      	ldr	r3, [r7, #8]
 800bf76:	2b00      	cmp	r3, #0
 800bf78:	d002      	beq.n	800bf80 <HAL_UART_Transmit+0x28>
 800bf7a:	88fb      	ldrh	r3, [r7, #6]
 800bf7c:	2b00      	cmp	r3, #0
 800bf7e:	d101      	bne.n	800bf84 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800bf80:	2301      	movs	r3, #1
 800bf82:	e07b      	b.n	800c07c <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 800bf84:	68fb      	ldr	r3, [r7, #12]
 800bf86:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800bf8a:	2b01      	cmp	r3, #1
 800bf8c:	d101      	bne.n	800bf92 <HAL_UART_Transmit+0x3a>
 800bf8e:	2302      	movs	r3, #2
 800bf90:	e074      	b.n	800c07c <HAL_UART_Transmit+0x124>
 800bf92:	68fb      	ldr	r3, [r7, #12]
 800bf94:	2201      	movs	r2, #1
 800bf96:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bf9a:	68fb      	ldr	r3, [r7, #12]
 800bf9c:	2200      	movs	r2, #0
 800bf9e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800bfa2:	68fb      	ldr	r3, [r7, #12]
 800bfa4:	2221      	movs	r2, #33	; 0x21
 800bfa6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800bfaa:	f7fa fb9d 	bl	80066e8 <HAL_GetTick>
 800bfae:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800bfb0:	68fb      	ldr	r3, [r7, #12]
 800bfb2:	88fa      	ldrh	r2, [r7, #6]
 800bfb4:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800bfb8:	68fb      	ldr	r3, [r7, #12]
 800bfba:	88fa      	ldrh	r2, [r7, #6]
 800bfbc:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800bfc0:	68fb      	ldr	r3, [r7, #12]
 800bfc2:	689b      	ldr	r3, [r3, #8]
 800bfc4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bfc8:	d108      	bne.n	800bfdc <HAL_UART_Transmit+0x84>
 800bfca:	68fb      	ldr	r3, [r7, #12]
 800bfcc:	691b      	ldr	r3, [r3, #16]
 800bfce:	2b00      	cmp	r3, #0
 800bfd0:	d104      	bne.n	800bfdc <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 800bfd2:	2300      	movs	r3, #0
 800bfd4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800bfd6:	68bb      	ldr	r3, [r7, #8]
 800bfd8:	61bb      	str	r3, [r7, #24]
 800bfda:	e003      	b.n	800bfe4 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 800bfdc:	68bb      	ldr	r3, [r7, #8]
 800bfde:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800bfe0:	2300      	movs	r3, #0
 800bfe2:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800bfe4:	68fb      	ldr	r3, [r7, #12]
 800bfe6:	2200      	movs	r2, #0
 800bfe8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 800bfec:	e02c      	b.n	800c048 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800bfee:	683b      	ldr	r3, [r7, #0]
 800bff0:	9300      	str	r3, [sp, #0]
 800bff2:	697b      	ldr	r3, [r7, #20]
 800bff4:	2200      	movs	r2, #0
 800bff6:	2180      	movs	r1, #128	; 0x80
 800bff8:	68f8      	ldr	r0, [r7, #12]
 800bffa:	f001 faa2 	bl	800d542 <UART_WaitOnFlagUntilTimeout>
 800bffe:	4603      	mov	r3, r0
 800c000:	2b00      	cmp	r3, #0
 800c002:	d001      	beq.n	800c008 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 800c004:	2303      	movs	r3, #3
 800c006:	e039      	b.n	800c07c <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 800c008:	69fb      	ldr	r3, [r7, #28]
 800c00a:	2b00      	cmp	r3, #0
 800c00c:	d10b      	bne.n	800c026 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800c00e:	69bb      	ldr	r3, [r7, #24]
 800c010:	881b      	ldrh	r3, [r3, #0]
 800c012:	461a      	mov	r2, r3
 800c014:	68fb      	ldr	r3, [r7, #12]
 800c016:	681b      	ldr	r3, [r3, #0]
 800c018:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800c01c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800c01e:	69bb      	ldr	r3, [r7, #24]
 800c020:	3302      	adds	r3, #2
 800c022:	61bb      	str	r3, [r7, #24]
 800c024:	e007      	b.n	800c036 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800c026:	69fb      	ldr	r3, [r7, #28]
 800c028:	781a      	ldrb	r2, [r3, #0]
 800c02a:	68fb      	ldr	r3, [r7, #12]
 800c02c:	681b      	ldr	r3, [r3, #0]
 800c02e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800c030:	69fb      	ldr	r3, [r7, #28]
 800c032:	3301      	adds	r3, #1
 800c034:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800c036:	68fb      	ldr	r3, [r7, #12]
 800c038:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800c03c:	b29b      	uxth	r3, r3
 800c03e:	3b01      	subs	r3, #1
 800c040:	b29a      	uxth	r2, r3
 800c042:	68fb      	ldr	r3, [r7, #12]
 800c044:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800c048:	68fb      	ldr	r3, [r7, #12]
 800c04a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800c04e:	b29b      	uxth	r3, r3
 800c050:	2b00      	cmp	r3, #0
 800c052:	d1cc      	bne.n	800bfee <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800c054:	683b      	ldr	r3, [r7, #0]
 800c056:	9300      	str	r3, [sp, #0]
 800c058:	697b      	ldr	r3, [r7, #20]
 800c05a:	2200      	movs	r2, #0
 800c05c:	2140      	movs	r1, #64	; 0x40
 800c05e:	68f8      	ldr	r0, [r7, #12]
 800c060:	f001 fa6f 	bl	800d542 <UART_WaitOnFlagUntilTimeout>
 800c064:	4603      	mov	r3, r0
 800c066:	2b00      	cmp	r3, #0
 800c068:	d001      	beq.n	800c06e <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 800c06a:	2303      	movs	r3, #3
 800c06c:	e006      	b.n	800c07c <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800c06e:	68fb      	ldr	r3, [r7, #12]
 800c070:	2220      	movs	r2, #32
 800c072:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 800c076:	2300      	movs	r3, #0
 800c078:	e000      	b.n	800c07c <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 800c07a:	2302      	movs	r3, #2
  }
}
 800c07c:	4618      	mov	r0, r3
 800c07e:	3720      	adds	r7, #32
 800c080:	46bd      	mov	sp, r7
 800c082:	bd80      	pop	{r7, pc}

0800c084 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800c084:	b580      	push	{r7, lr}
 800c086:	b08a      	sub	sp, #40	; 0x28
 800c088:	af00      	add	r7, sp, #0
 800c08a:	60f8      	str	r0, [r7, #12]
 800c08c:	60b9      	str	r1, [r7, #8]
 800c08e:	4613      	mov	r3, r2
 800c090:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800c092:	68fb      	ldr	r3, [r7, #12]
 800c094:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c098:	2b20      	cmp	r3, #32
 800c09a:	d142      	bne.n	800c122 <HAL_UART_Receive_IT+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 800c09c:	68bb      	ldr	r3, [r7, #8]
 800c09e:	2b00      	cmp	r3, #0
 800c0a0:	d002      	beq.n	800c0a8 <HAL_UART_Receive_IT+0x24>
 800c0a2:	88fb      	ldrh	r3, [r7, #6]
 800c0a4:	2b00      	cmp	r3, #0
 800c0a6:	d101      	bne.n	800c0ac <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800c0a8:	2301      	movs	r3, #1
 800c0aa:	e03b      	b.n	800c124 <HAL_UART_Receive_IT+0xa0>
    }

    __HAL_LOCK(huart);
 800c0ac:	68fb      	ldr	r3, [r7, #12]
 800c0ae:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800c0b2:	2b01      	cmp	r3, #1
 800c0b4:	d101      	bne.n	800c0ba <HAL_UART_Receive_IT+0x36>
 800c0b6:	2302      	movs	r3, #2
 800c0b8:	e034      	b.n	800c124 <HAL_UART_Receive_IT+0xa0>
 800c0ba:	68fb      	ldr	r3, [r7, #12]
 800c0bc:	2201      	movs	r2, #1
 800c0be:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c0c2:	68fb      	ldr	r3, [r7, #12]
 800c0c4:	2200      	movs	r2, #0
 800c0c6:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800c0c8:	68fb      	ldr	r3, [r7, #12]
 800c0ca:	681b      	ldr	r3, [r3, #0]
 800c0cc:	4a17      	ldr	r2, [pc, #92]	; (800c12c <HAL_UART_Receive_IT+0xa8>)
 800c0ce:	4293      	cmp	r3, r2
 800c0d0:	d01f      	beq.n	800c112 <HAL_UART_Receive_IT+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800c0d2:	68fb      	ldr	r3, [r7, #12]
 800c0d4:	681b      	ldr	r3, [r3, #0]
 800c0d6:	685b      	ldr	r3, [r3, #4]
 800c0d8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c0dc:	2b00      	cmp	r3, #0
 800c0de:	d018      	beq.n	800c112 <HAL_UART_Receive_IT+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800c0e0:	68fb      	ldr	r3, [r7, #12]
 800c0e2:	681b      	ldr	r3, [r3, #0]
 800c0e4:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c0e6:	697b      	ldr	r3, [r7, #20]
 800c0e8:	e853 3f00 	ldrex	r3, [r3]
 800c0ec:	613b      	str	r3, [r7, #16]
   return(result);
 800c0ee:	693b      	ldr	r3, [r7, #16]
 800c0f0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800c0f4:	627b      	str	r3, [r7, #36]	; 0x24
 800c0f6:	68fb      	ldr	r3, [r7, #12]
 800c0f8:	681b      	ldr	r3, [r3, #0]
 800c0fa:	461a      	mov	r2, r3
 800c0fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c0fe:	623b      	str	r3, [r7, #32]
 800c100:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c102:	69f9      	ldr	r1, [r7, #28]
 800c104:	6a3a      	ldr	r2, [r7, #32]
 800c106:	e841 2300 	strex	r3, r2, [r1]
 800c10a:	61bb      	str	r3, [r7, #24]
   return(result);
 800c10c:	69bb      	ldr	r3, [r7, #24]
 800c10e:	2b00      	cmp	r3, #0
 800c110:	d1e6      	bne.n	800c0e0 <HAL_UART_Receive_IT+0x5c>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800c112:	88fb      	ldrh	r3, [r7, #6]
 800c114:	461a      	mov	r2, r3
 800c116:	68b9      	ldr	r1, [r7, #8]
 800c118:	68f8      	ldr	r0, [r7, #12]
 800c11a:	f001 fadb 	bl	800d6d4 <UART_Start_Receive_IT>
 800c11e:	4603      	mov	r3, r0
 800c120:	e000      	b.n	800c124 <HAL_UART_Receive_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800c122:	2302      	movs	r3, #2
  }
}
 800c124:	4618      	mov	r0, r3
 800c126:	3728      	adds	r7, #40	; 0x28
 800c128:	46bd      	mov	sp, r7
 800c12a:	bd80      	pop	{r7, pc}
 800c12c:	58000c00 	.word	0x58000c00

0800c130 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800c130:	b580      	push	{r7, lr}
 800c132:	b0ba      	sub	sp, #232	; 0xe8
 800c134:	af00      	add	r7, sp, #0
 800c136:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800c138:	687b      	ldr	r3, [r7, #4]
 800c13a:	681b      	ldr	r3, [r3, #0]
 800c13c:	69db      	ldr	r3, [r3, #28]
 800c13e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800c142:	687b      	ldr	r3, [r7, #4]
 800c144:	681b      	ldr	r3, [r3, #0]
 800c146:	681b      	ldr	r3, [r3, #0]
 800c148:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800c14c:	687b      	ldr	r3, [r7, #4]
 800c14e:	681b      	ldr	r3, [r3, #0]
 800c150:	689b      	ldr	r3, [r3, #8]
 800c152:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800c156:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800c15a:	f640 030f 	movw	r3, #2063	; 0x80f
 800c15e:	4013      	ands	r3, r2
 800c160:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800c164:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800c168:	2b00      	cmp	r3, #0
 800c16a:	d11b      	bne.n	800c1a4 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800c16c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c170:	f003 0320 	and.w	r3, r3, #32
 800c174:	2b00      	cmp	r3, #0
 800c176:	d015      	beq.n	800c1a4 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800c178:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c17c:	f003 0320 	and.w	r3, r3, #32
 800c180:	2b00      	cmp	r3, #0
 800c182:	d105      	bne.n	800c190 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800c184:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c188:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c18c:	2b00      	cmp	r3, #0
 800c18e:	d009      	beq.n	800c1a4 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800c190:	687b      	ldr	r3, [r7, #4]
 800c192:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c194:	2b00      	cmp	r3, #0
 800c196:	f000 835a 	beq.w	800c84e <HAL_UART_IRQHandler+0x71e>
      {
        huart->RxISR(huart);
 800c19a:	687b      	ldr	r3, [r7, #4]
 800c19c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c19e:	6878      	ldr	r0, [r7, #4]
 800c1a0:	4798      	blx	r3
      }
      return;
 800c1a2:	e354      	b.n	800c84e <HAL_UART_IRQHandler+0x71e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800c1a4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800c1a8:	2b00      	cmp	r3, #0
 800c1aa:	f000 811f 	beq.w	800c3ec <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800c1ae:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800c1b2:	4b8b      	ldr	r3, [pc, #556]	; (800c3e0 <HAL_UART_IRQHandler+0x2b0>)
 800c1b4:	4013      	ands	r3, r2
 800c1b6:	2b00      	cmp	r3, #0
 800c1b8:	d106      	bne.n	800c1c8 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800c1ba:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800c1be:	4b89      	ldr	r3, [pc, #548]	; (800c3e4 <HAL_UART_IRQHandler+0x2b4>)
 800c1c0:	4013      	ands	r3, r2
 800c1c2:	2b00      	cmp	r3, #0
 800c1c4:	f000 8112 	beq.w	800c3ec <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800c1c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c1cc:	f003 0301 	and.w	r3, r3, #1
 800c1d0:	2b00      	cmp	r3, #0
 800c1d2:	d011      	beq.n	800c1f8 <HAL_UART_IRQHandler+0xc8>
 800c1d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c1d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c1dc:	2b00      	cmp	r3, #0
 800c1de:	d00b      	beq.n	800c1f8 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800c1e0:	687b      	ldr	r3, [r7, #4]
 800c1e2:	681b      	ldr	r3, [r3, #0]
 800c1e4:	2201      	movs	r2, #1
 800c1e6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800c1e8:	687b      	ldr	r3, [r7, #4]
 800c1ea:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c1ee:	f043 0201 	orr.w	r2, r3, #1
 800c1f2:	687b      	ldr	r3, [r7, #4]
 800c1f4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c1f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c1fc:	f003 0302 	and.w	r3, r3, #2
 800c200:	2b00      	cmp	r3, #0
 800c202:	d011      	beq.n	800c228 <HAL_UART_IRQHandler+0xf8>
 800c204:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c208:	f003 0301 	and.w	r3, r3, #1
 800c20c:	2b00      	cmp	r3, #0
 800c20e:	d00b      	beq.n	800c228 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800c210:	687b      	ldr	r3, [r7, #4]
 800c212:	681b      	ldr	r3, [r3, #0]
 800c214:	2202      	movs	r2, #2
 800c216:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800c218:	687b      	ldr	r3, [r7, #4]
 800c21a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c21e:	f043 0204 	orr.w	r2, r3, #4
 800c222:	687b      	ldr	r3, [r7, #4]
 800c224:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c228:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c22c:	f003 0304 	and.w	r3, r3, #4
 800c230:	2b00      	cmp	r3, #0
 800c232:	d011      	beq.n	800c258 <HAL_UART_IRQHandler+0x128>
 800c234:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c238:	f003 0301 	and.w	r3, r3, #1
 800c23c:	2b00      	cmp	r3, #0
 800c23e:	d00b      	beq.n	800c258 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800c240:	687b      	ldr	r3, [r7, #4]
 800c242:	681b      	ldr	r3, [r3, #0]
 800c244:	2204      	movs	r2, #4
 800c246:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800c248:	687b      	ldr	r3, [r7, #4]
 800c24a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c24e:	f043 0202 	orr.w	r2, r3, #2
 800c252:	687b      	ldr	r3, [r7, #4]
 800c254:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800c258:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c25c:	f003 0308 	and.w	r3, r3, #8
 800c260:	2b00      	cmp	r3, #0
 800c262:	d017      	beq.n	800c294 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800c264:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c268:	f003 0320 	and.w	r3, r3, #32
 800c26c:	2b00      	cmp	r3, #0
 800c26e:	d105      	bne.n	800c27c <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800c270:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800c274:	4b5a      	ldr	r3, [pc, #360]	; (800c3e0 <HAL_UART_IRQHandler+0x2b0>)
 800c276:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800c278:	2b00      	cmp	r3, #0
 800c27a:	d00b      	beq.n	800c294 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800c27c:	687b      	ldr	r3, [r7, #4]
 800c27e:	681b      	ldr	r3, [r3, #0]
 800c280:	2208      	movs	r2, #8
 800c282:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800c284:	687b      	ldr	r3, [r7, #4]
 800c286:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c28a:	f043 0208 	orr.w	r2, r3, #8
 800c28e:	687b      	ldr	r3, [r7, #4]
 800c290:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800c294:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c298:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800c29c:	2b00      	cmp	r3, #0
 800c29e:	d012      	beq.n	800c2c6 <HAL_UART_IRQHandler+0x196>
 800c2a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c2a4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800c2a8:	2b00      	cmp	r3, #0
 800c2aa:	d00c      	beq.n	800c2c6 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800c2ac:	687b      	ldr	r3, [r7, #4]
 800c2ae:	681b      	ldr	r3, [r3, #0]
 800c2b0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800c2b4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800c2b6:	687b      	ldr	r3, [r7, #4]
 800c2b8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c2bc:	f043 0220 	orr.w	r2, r3, #32
 800c2c0:	687b      	ldr	r3, [r7, #4]
 800c2c2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800c2c6:	687b      	ldr	r3, [r7, #4]
 800c2c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c2cc:	2b00      	cmp	r3, #0
 800c2ce:	f000 82c0 	beq.w	800c852 <HAL_UART_IRQHandler+0x722>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800c2d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c2d6:	f003 0320 	and.w	r3, r3, #32
 800c2da:	2b00      	cmp	r3, #0
 800c2dc:	d013      	beq.n	800c306 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800c2de:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c2e2:	f003 0320 	and.w	r3, r3, #32
 800c2e6:	2b00      	cmp	r3, #0
 800c2e8:	d105      	bne.n	800c2f6 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800c2ea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c2ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c2f2:	2b00      	cmp	r3, #0
 800c2f4:	d007      	beq.n	800c306 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800c2f6:	687b      	ldr	r3, [r7, #4]
 800c2f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c2fa:	2b00      	cmp	r3, #0
 800c2fc:	d003      	beq.n	800c306 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800c2fe:	687b      	ldr	r3, [r7, #4]
 800c300:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c302:	6878      	ldr	r0, [r7, #4]
 800c304:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800c306:	687b      	ldr	r3, [r7, #4]
 800c308:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c30c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800c310:	687b      	ldr	r3, [r7, #4]
 800c312:	681b      	ldr	r3, [r3, #0]
 800c314:	689b      	ldr	r3, [r3, #8]
 800c316:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c31a:	2b40      	cmp	r3, #64	; 0x40
 800c31c:	d005      	beq.n	800c32a <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800c31e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800c322:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800c326:	2b00      	cmp	r3, #0
 800c328:	d04f      	beq.n	800c3ca <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800c32a:	6878      	ldr	r0, [r7, #4]
 800c32c:	f001 fafc 	bl	800d928 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c330:	687b      	ldr	r3, [r7, #4]
 800c332:	681b      	ldr	r3, [r3, #0]
 800c334:	689b      	ldr	r3, [r3, #8]
 800c336:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c33a:	2b40      	cmp	r3, #64	; 0x40
 800c33c:	d141      	bne.n	800c3c2 <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c33e:	687b      	ldr	r3, [r7, #4]
 800c340:	681b      	ldr	r3, [r3, #0]
 800c342:	3308      	adds	r3, #8
 800c344:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c348:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800c34c:	e853 3f00 	ldrex	r3, [r3]
 800c350:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800c354:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800c358:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c35c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800c360:	687b      	ldr	r3, [r7, #4]
 800c362:	681b      	ldr	r3, [r3, #0]
 800c364:	3308      	adds	r3, #8
 800c366:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800c36a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800c36e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c372:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800c376:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800c37a:	e841 2300 	strex	r3, r2, [r1]
 800c37e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800c382:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800c386:	2b00      	cmp	r3, #0
 800c388:	d1d9      	bne.n	800c33e <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800c38a:	687b      	ldr	r3, [r7, #4]
 800c38c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c38e:	2b00      	cmp	r3, #0
 800c390:	d013      	beq.n	800c3ba <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800c392:	687b      	ldr	r3, [r7, #4]
 800c394:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c396:	4a14      	ldr	r2, [pc, #80]	; (800c3e8 <HAL_UART_IRQHandler+0x2b8>)
 800c398:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800c39a:	687b      	ldr	r3, [r7, #4]
 800c39c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c39e:	4618      	mov	r0, r3
 800c3a0:	f7fa fe3e 	bl	8007020 <HAL_DMA_Abort_IT>
 800c3a4:	4603      	mov	r3, r0
 800c3a6:	2b00      	cmp	r3, #0
 800c3a8:	d017      	beq.n	800c3da <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800c3aa:	687b      	ldr	r3, [r7, #4]
 800c3ac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c3ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c3b0:	687a      	ldr	r2, [r7, #4]
 800c3b2:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 800c3b4:	4610      	mov	r0, r2
 800c3b6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c3b8:	e00f      	b.n	800c3da <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800c3ba:	6878      	ldr	r0, [r7, #4]
 800c3bc:	f000 fa56 	bl	800c86c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c3c0:	e00b      	b.n	800c3da <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800c3c2:	6878      	ldr	r0, [r7, #4]
 800c3c4:	f000 fa52 	bl	800c86c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c3c8:	e007      	b.n	800c3da <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800c3ca:	6878      	ldr	r0, [r7, #4]
 800c3cc:	f000 fa4e 	bl	800c86c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c3d0:	687b      	ldr	r3, [r7, #4]
 800c3d2:	2200      	movs	r2, #0
 800c3d4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 800c3d8:	e23b      	b.n	800c852 <HAL_UART_IRQHandler+0x722>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c3da:	bf00      	nop
    return;
 800c3dc:	e239      	b.n	800c852 <HAL_UART_IRQHandler+0x722>
 800c3de:	bf00      	nop
 800c3e0:	10000001 	.word	0x10000001
 800c3e4:	04000120 	.word	0x04000120
 800c3e8:	0800d9f5 	.word	0x0800d9f5

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c3ec:	687b      	ldr	r3, [r7, #4]
 800c3ee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c3f0:	2b01      	cmp	r3, #1
 800c3f2:	f040 81ce 	bne.w	800c792 <HAL_UART_IRQHandler+0x662>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800c3f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c3fa:	f003 0310 	and.w	r3, r3, #16
 800c3fe:	2b00      	cmp	r3, #0
 800c400:	f000 81c7 	beq.w	800c792 <HAL_UART_IRQHandler+0x662>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800c404:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c408:	f003 0310 	and.w	r3, r3, #16
 800c40c:	2b00      	cmp	r3, #0
 800c40e:	f000 81c0 	beq.w	800c792 <HAL_UART_IRQHandler+0x662>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800c412:	687b      	ldr	r3, [r7, #4]
 800c414:	681b      	ldr	r3, [r3, #0]
 800c416:	2210      	movs	r2, #16
 800c418:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c41a:	687b      	ldr	r3, [r7, #4]
 800c41c:	681b      	ldr	r3, [r3, #0]
 800c41e:	689b      	ldr	r3, [r3, #8]
 800c420:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c424:	2b40      	cmp	r3, #64	; 0x40
 800c426:	f040 813b 	bne.w	800c6a0 <HAL_UART_IRQHandler+0x570>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800c42a:	687b      	ldr	r3, [r7, #4]
 800c42c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c42e:	681b      	ldr	r3, [r3, #0]
 800c430:	4a8b      	ldr	r2, [pc, #556]	; (800c660 <HAL_UART_IRQHandler+0x530>)
 800c432:	4293      	cmp	r3, r2
 800c434:	d059      	beq.n	800c4ea <HAL_UART_IRQHandler+0x3ba>
 800c436:	687b      	ldr	r3, [r7, #4]
 800c438:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c43a:	681b      	ldr	r3, [r3, #0]
 800c43c:	4a89      	ldr	r2, [pc, #548]	; (800c664 <HAL_UART_IRQHandler+0x534>)
 800c43e:	4293      	cmp	r3, r2
 800c440:	d053      	beq.n	800c4ea <HAL_UART_IRQHandler+0x3ba>
 800c442:	687b      	ldr	r3, [r7, #4]
 800c444:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c446:	681b      	ldr	r3, [r3, #0]
 800c448:	4a87      	ldr	r2, [pc, #540]	; (800c668 <HAL_UART_IRQHandler+0x538>)
 800c44a:	4293      	cmp	r3, r2
 800c44c:	d04d      	beq.n	800c4ea <HAL_UART_IRQHandler+0x3ba>
 800c44e:	687b      	ldr	r3, [r7, #4]
 800c450:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c452:	681b      	ldr	r3, [r3, #0]
 800c454:	4a85      	ldr	r2, [pc, #532]	; (800c66c <HAL_UART_IRQHandler+0x53c>)
 800c456:	4293      	cmp	r3, r2
 800c458:	d047      	beq.n	800c4ea <HAL_UART_IRQHandler+0x3ba>
 800c45a:	687b      	ldr	r3, [r7, #4]
 800c45c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c45e:	681b      	ldr	r3, [r3, #0]
 800c460:	4a83      	ldr	r2, [pc, #524]	; (800c670 <HAL_UART_IRQHandler+0x540>)
 800c462:	4293      	cmp	r3, r2
 800c464:	d041      	beq.n	800c4ea <HAL_UART_IRQHandler+0x3ba>
 800c466:	687b      	ldr	r3, [r7, #4]
 800c468:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c46a:	681b      	ldr	r3, [r3, #0]
 800c46c:	4a81      	ldr	r2, [pc, #516]	; (800c674 <HAL_UART_IRQHandler+0x544>)
 800c46e:	4293      	cmp	r3, r2
 800c470:	d03b      	beq.n	800c4ea <HAL_UART_IRQHandler+0x3ba>
 800c472:	687b      	ldr	r3, [r7, #4]
 800c474:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c476:	681b      	ldr	r3, [r3, #0]
 800c478:	4a7f      	ldr	r2, [pc, #508]	; (800c678 <HAL_UART_IRQHandler+0x548>)
 800c47a:	4293      	cmp	r3, r2
 800c47c:	d035      	beq.n	800c4ea <HAL_UART_IRQHandler+0x3ba>
 800c47e:	687b      	ldr	r3, [r7, #4]
 800c480:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c482:	681b      	ldr	r3, [r3, #0]
 800c484:	4a7d      	ldr	r2, [pc, #500]	; (800c67c <HAL_UART_IRQHandler+0x54c>)
 800c486:	4293      	cmp	r3, r2
 800c488:	d02f      	beq.n	800c4ea <HAL_UART_IRQHandler+0x3ba>
 800c48a:	687b      	ldr	r3, [r7, #4]
 800c48c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c48e:	681b      	ldr	r3, [r3, #0]
 800c490:	4a7b      	ldr	r2, [pc, #492]	; (800c680 <HAL_UART_IRQHandler+0x550>)
 800c492:	4293      	cmp	r3, r2
 800c494:	d029      	beq.n	800c4ea <HAL_UART_IRQHandler+0x3ba>
 800c496:	687b      	ldr	r3, [r7, #4]
 800c498:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c49a:	681b      	ldr	r3, [r3, #0]
 800c49c:	4a79      	ldr	r2, [pc, #484]	; (800c684 <HAL_UART_IRQHandler+0x554>)
 800c49e:	4293      	cmp	r3, r2
 800c4a0:	d023      	beq.n	800c4ea <HAL_UART_IRQHandler+0x3ba>
 800c4a2:	687b      	ldr	r3, [r7, #4]
 800c4a4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c4a6:	681b      	ldr	r3, [r3, #0]
 800c4a8:	4a77      	ldr	r2, [pc, #476]	; (800c688 <HAL_UART_IRQHandler+0x558>)
 800c4aa:	4293      	cmp	r3, r2
 800c4ac:	d01d      	beq.n	800c4ea <HAL_UART_IRQHandler+0x3ba>
 800c4ae:	687b      	ldr	r3, [r7, #4]
 800c4b0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c4b2:	681b      	ldr	r3, [r3, #0]
 800c4b4:	4a75      	ldr	r2, [pc, #468]	; (800c68c <HAL_UART_IRQHandler+0x55c>)
 800c4b6:	4293      	cmp	r3, r2
 800c4b8:	d017      	beq.n	800c4ea <HAL_UART_IRQHandler+0x3ba>
 800c4ba:	687b      	ldr	r3, [r7, #4]
 800c4bc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c4be:	681b      	ldr	r3, [r3, #0]
 800c4c0:	4a73      	ldr	r2, [pc, #460]	; (800c690 <HAL_UART_IRQHandler+0x560>)
 800c4c2:	4293      	cmp	r3, r2
 800c4c4:	d011      	beq.n	800c4ea <HAL_UART_IRQHandler+0x3ba>
 800c4c6:	687b      	ldr	r3, [r7, #4]
 800c4c8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c4ca:	681b      	ldr	r3, [r3, #0]
 800c4cc:	4a71      	ldr	r2, [pc, #452]	; (800c694 <HAL_UART_IRQHandler+0x564>)
 800c4ce:	4293      	cmp	r3, r2
 800c4d0:	d00b      	beq.n	800c4ea <HAL_UART_IRQHandler+0x3ba>
 800c4d2:	687b      	ldr	r3, [r7, #4]
 800c4d4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c4d6:	681b      	ldr	r3, [r3, #0]
 800c4d8:	4a6f      	ldr	r2, [pc, #444]	; (800c698 <HAL_UART_IRQHandler+0x568>)
 800c4da:	4293      	cmp	r3, r2
 800c4dc:	d005      	beq.n	800c4ea <HAL_UART_IRQHandler+0x3ba>
 800c4de:	687b      	ldr	r3, [r7, #4]
 800c4e0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c4e2:	681b      	ldr	r3, [r3, #0]
 800c4e4:	4a6d      	ldr	r2, [pc, #436]	; (800c69c <HAL_UART_IRQHandler+0x56c>)
 800c4e6:	4293      	cmp	r3, r2
 800c4e8:	d105      	bne.n	800c4f6 <HAL_UART_IRQHandler+0x3c6>
 800c4ea:	687b      	ldr	r3, [r7, #4]
 800c4ec:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c4ee:	681b      	ldr	r3, [r3, #0]
 800c4f0:	685b      	ldr	r3, [r3, #4]
 800c4f2:	b29b      	uxth	r3, r3
 800c4f4:	e004      	b.n	800c500 <HAL_UART_IRQHandler+0x3d0>
 800c4f6:	687b      	ldr	r3, [r7, #4]
 800c4f8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c4fa:	681b      	ldr	r3, [r3, #0]
 800c4fc:	685b      	ldr	r3, [r3, #4]
 800c4fe:	b29b      	uxth	r3, r3
 800c500:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800c504:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800c508:	2b00      	cmp	r3, #0
 800c50a:	f000 81a4 	beq.w	800c856 <HAL_UART_IRQHandler+0x726>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800c50e:	687b      	ldr	r3, [r7, #4]
 800c510:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800c514:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800c518:	429a      	cmp	r2, r3
 800c51a:	f080 819c 	bcs.w	800c856 <HAL_UART_IRQHandler+0x726>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800c51e:	687b      	ldr	r3, [r7, #4]
 800c520:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800c524:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800c528:	687b      	ldr	r3, [r7, #4]
 800c52a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c52c:	69db      	ldr	r3, [r3, #28]
 800c52e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c532:	f000 8086 	beq.w	800c642 <HAL_UART_IRQHandler+0x512>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c536:	687b      	ldr	r3, [r7, #4]
 800c538:	681b      	ldr	r3, [r3, #0]
 800c53a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c53e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800c542:	e853 3f00 	ldrex	r3, [r3]
 800c546:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800c54a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800c54e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c552:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800c556:	687b      	ldr	r3, [r7, #4]
 800c558:	681b      	ldr	r3, [r3, #0]
 800c55a:	461a      	mov	r2, r3
 800c55c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800c560:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800c564:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c568:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800c56c:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800c570:	e841 2300 	strex	r3, r2, [r1]
 800c574:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800c578:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800c57c:	2b00      	cmp	r3, #0
 800c57e:	d1da      	bne.n	800c536 <HAL_UART_IRQHandler+0x406>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c580:	687b      	ldr	r3, [r7, #4]
 800c582:	681b      	ldr	r3, [r3, #0]
 800c584:	3308      	adds	r3, #8
 800c586:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c588:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c58a:	e853 3f00 	ldrex	r3, [r3]
 800c58e:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800c590:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800c592:	f023 0301 	bic.w	r3, r3, #1
 800c596:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800c59a:	687b      	ldr	r3, [r7, #4]
 800c59c:	681b      	ldr	r3, [r3, #0]
 800c59e:	3308      	adds	r3, #8
 800c5a0:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800c5a4:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800c5a8:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c5aa:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800c5ac:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800c5b0:	e841 2300 	strex	r3, r2, [r1]
 800c5b4:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800c5b6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c5b8:	2b00      	cmp	r3, #0
 800c5ba:	d1e1      	bne.n	800c580 <HAL_UART_IRQHandler+0x450>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c5bc:	687b      	ldr	r3, [r7, #4]
 800c5be:	681b      	ldr	r3, [r3, #0]
 800c5c0:	3308      	adds	r3, #8
 800c5c2:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c5c4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c5c6:	e853 3f00 	ldrex	r3, [r3]
 800c5ca:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800c5cc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c5ce:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c5d2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800c5d6:	687b      	ldr	r3, [r7, #4]
 800c5d8:	681b      	ldr	r3, [r3, #0]
 800c5da:	3308      	adds	r3, #8
 800c5dc:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800c5e0:	66fa      	str	r2, [r7, #108]	; 0x6c
 800c5e2:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c5e4:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800c5e6:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800c5e8:	e841 2300 	strex	r3, r2, [r1]
 800c5ec:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800c5ee:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c5f0:	2b00      	cmp	r3, #0
 800c5f2:	d1e3      	bne.n	800c5bc <HAL_UART_IRQHandler+0x48c>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800c5f4:	687b      	ldr	r3, [r7, #4]
 800c5f6:	2220      	movs	r2, #32
 800c5f8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c5fc:	687b      	ldr	r3, [r7, #4]
 800c5fe:	2200      	movs	r2, #0
 800c600:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c602:	687b      	ldr	r3, [r7, #4]
 800c604:	681b      	ldr	r3, [r3, #0]
 800c606:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c608:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c60a:	e853 3f00 	ldrex	r3, [r3]
 800c60e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800c610:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c612:	f023 0310 	bic.w	r3, r3, #16
 800c616:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800c61a:	687b      	ldr	r3, [r7, #4]
 800c61c:	681b      	ldr	r3, [r3, #0]
 800c61e:	461a      	mov	r2, r3
 800c620:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800c624:	65bb      	str	r3, [r7, #88]	; 0x58
 800c626:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c628:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800c62a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800c62c:	e841 2300 	strex	r3, r2, [r1]
 800c630:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800c632:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c634:	2b00      	cmp	r3, #0
 800c636:	d1e4      	bne.n	800c602 <HAL_UART_IRQHandler+0x4d2>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800c638:	687b      	ldr	r3, [r7, #4]
 800c63a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c63c:	4618      	mov	r0, r3
 800c63e:	f7fa f9d1 	bl	80069e4 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800c642:	687b      	ldr	r3, [r7, #4]
 800c644:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800c648:	687b      	ldr	r3, [r7, #4]
 800c64a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c64e:	b29b      	uxth	r3, r3
 800c650:	1ad3      	subs	r3, r2, r3
 800c652:	b29b      	uxth	r3, r3
 800c654:	4619      	mov	r1, r3
 800c656:	6878      	ldr	r0, [r7, #4]
 800c658:	f000 f912 	bl	800c880 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800c65c:	e0fb      	b.n	800c856 <HAL_UART_IRQHandler+0x726>
 800c65e:	bf00      	nop
 800c660:	40020010 	.word	0x40020010
 800c664:	40020028 	.word	0x40020028
 800c668:	40020040 	.word	0x40020040
 800c66c:	40020058 	.word	0x40020058
 800c670:	40020070 	.word	0x40020070
 800c674:	40020088 	.word	0x40020088
 800c678:	400200a0 	.word	0x400200a0
 800c67c:	400200b8 	.word	0x400200b8
 800c680:	40020410 	.word	0x40020410
 800c684:	40020428 	.word	0x40020428
 800c688:	40020440 	.word	0x40020440
 800c68c:	40020458 	.word	0x40020458
 800c690:	40020470 	.word	0x40020470
 800c694:	40020488 	.word	0x40020488
 800c698:	400204a0 	.word	0x400204a0
 800c69c:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800c6a0:	687b      	ldr	r3, [r7, #4]
 800c6a2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800c6a6:	687b      	ldr	r3, [r7, #4]
 800c6a8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c6ac:	b29b      	uxth	r3, r3
 800c6ae:	1ad3      	subs	r3, r2, r3
 800c6b0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800c6b4:	687b      	ldr	r3, [r7, #4]
 800c6b6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c6ba:	b29b      	uxth	r3, r3
 800c6bc:	2b00      	cmp	r3, #0
 800c6be:	f000 80cc 	beq.w	800c85a <HAL_UART_IRQHandler+0x72a>
          && (nb_rx_data > 0U))
 800c6c2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800c6c6:	2b00      	cmp	r3, #0
 800c6c8:	f000 80c7 	beq.w	800c85a <HAL_UART_IRQHandler+0x72a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c6cc:	687b      	ldr	r3, [r7, #4]
 800c6ce:	681b      	ldr	r3, [r3, #0]
 800c6d0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c6d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c6d4:	e853 3f00 	ldrex	r3, [r3]
 800c6d8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800c6da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c6dc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800c6e0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800c6e4:	687b      	ldr	r3, [r7, #4]
 800c6e6:	681b      	ldr	r3, [r3, #0]
 800c6e8:	461a      	mov	r2, r3
 800c6ea:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800c6ee:	647b      	str	r3, [r7, #68]	; 0x44
 800c6f0:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c6f2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800c6f4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c6f6:	e841 2300 	strex	r3, r2, [r1]
 800c6fa:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800c6fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c6fe:	2b00      	cmp	r3, #0
 800c700:	d1e4      	bne.n	800c6cc <HAL_UART_IRQHandler+0x59c>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800c702:	687b      	ldr	r3, [r7, #4]
 800c704:	681b      	ldr	r3, [r3, #0]
 800c706:	3308      	adds	r3, #8
 800c708:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c70a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c70c:	e853 3f00 	ldrex	r3, [r3]
 800c710:	623b      	str	r3, [r7, #32]
   return(result);
 800c712:	6a3a      	ldr	r2, [r7, #32]
 800c714:	4b54      	ldr	r3, [pc, #336]	; (800c868 <HAL_UART_IRQHandler+0x738>)
 800c716:	4013      	ands	r3, r2
 800c718:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800c71c:	687b      	ldr	r3, [r7, #4]
 800c71e:	681b      	ldr	r3, [r3, #0]
 800c720:	3308      	adds	r3, #8
 800c722:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800c726:	633a      	str	r2, [r7, #48]	; 0x30
 800c728:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c72a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c72c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c72e:	e841 2300 	strex	r3, r2, [r1]
 800c732:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800c734:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c736:	2b00      	cmp	r3, #0
 800c738:	d1e3      	bne.n	800c702 <HAL_UART_IRQHandler+0x5d2>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800c73a:	687b      	ldr	r3, [r7, #4]
 800c73c:	2220      	movs	r2, #32
 800c73e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c742:	687b      	ldr	r3, [r7, #4]
 800c744:	2200      	movs	r2, #0
 800c746:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800c748:	687b      	ldr	r3, [r7, #4]
 800c74a:	2200      	movs	r2, #0
 800c74c:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c74e:	687b      	ldr	r3, [r7, #4]
 800c750:	681b      	ldr	r3, [r3, #0]
 800c752:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c754:	693b      	ldr	r3, [r7, #16]
 800c756:	e853 3f00 	ldrex	r3, [r3]
 800c75a:	60fb      	str	r3, [r7, #12]
   return(result);
 800c75c:	68fb      	ldr	r3, [r7, #12]
 800c75e:	f023 0310 	bic.w	r3, r3, #16
 800c762:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800c766:	687b      	ldr	r3, [r7, #4]
 800c768:	681b      	ldr	r3, [r3, #0]
 800c76a:	461a      	mov	r2, r3
 800c76c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800c770:	61fb      	str	r3, [r7, #28]
 800c772:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c774:	69b9      	ldr	r1, [r7, #24]
 800c776:	69fa      	ldr	r2, [r7, #28]
 800c778:	e841 2300 	strex	r3, r2, [r1]
 800c77c:	617b      	str	r3, [r7, #20]
   return(result);
 800c77e:	697b      	ldr	r3, [r7, #20]
 800c780:	2b00      	cmp	r3, #0
 800c782:	d1e4      	bne.n	800c74e <HAL_UART_IRQHandler+0x61e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800c784:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800c788:	4619      	mov	r1, r3
 800c78a:	6878      	ldr	r0, [r7, #4]
 800c78c:	f000 f878 	bl	800c880 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800c790:	e063      	b.n	800c85a <HAL_UART_IRQHandler+0x72a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800c792:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c796:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800c79a:	2b00      	cmp	r3, #0
 800c79c:	d00e      	beq.n	800c7bc <HAL_UART_IRQHandler+0x68c>
 800c79e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c7a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c7a6:	2b00      	cmp	r3, #0
 800c7a8:	d008      	beq.n	800c7bc <HAL_UART_IRQHandler+0x68c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800c7aa:	687b      	ldr	r3, [r7, #4]
 800c7ac:	681b      	ldr	r3, [r3, #0]
 800c7ae:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800c7b2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800c7b4:	6878      	ldr	r0, [r7, #4]
 800c7b6:	f001 fdbb 	bl	800e330 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800c7ba:	e051      	b.n	800c860 <HAL_UART_IRQHandler+0x730>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800c7bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c7c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c7c4:	2b00      	cmp	r3, #0
 800c7c6:	d014      	beq.n	800c7f2 <HAL_UART_IRQHandler+0x6c2>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800c7c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c7cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c7d0:	2b00      	cmp	r3, #0
 800c7d2:	d105      	bne.n	800c7e0 <HAL_UART_IRQHandler+0x6b0>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800c7d4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c7d8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c7dc:	2b00      	cmp	r3, #0
 800c7de:	d008      	beq.n	800c7f2 <HAL_UART_IRQHandler+0x6c2>
  {
    if (huart->TxISR != NULL)
 800c7e0:	687b      	ldr	r3, [r7, #4]
 800c7e2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c7e4:	2b00      	cmp	r3, #0
 800c7e6:	d03a      	beq.n	800c85e <HAL_UART_IRQHandler+0x72e>
    {
      huart->TxISR(huart);
 800c7e8:	687b      	ldr	r3, [r7, #4]
 800c7ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c7ec:	6878      	ldr	r0, [r7, #4]
 800c7ee:	4798      	blx	r3
    }
    return;
 800c7f0:	e035      	b.n	800c85e <HAL_UART_IRQHandler+0x72e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800c7f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c7f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c7fa:	2b00      	cmp	r3, #0
 800c7fc:	d009      	beq.n	800c812 <HAL_UART_IRQHandler+0x6e2>
 800c7fe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c802:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c806:	2b00      	cmp	r3, #0
 800c808:	d003      	beq.n	800c812 <HAL_UART_IRQHandler+0x6e2>
  {
    UART_EndTransmit_IT(huart);
 800c80a:	6878      	ldr	r0, [r7, #4]
 800c80c:	f001 f908 	bl	800da20 <UART_EndTransmit_IT>
    return;
 800c810:	e026      	b.n	800c860 <HAL_UART_IRQHandler+0x730>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800c812:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c816:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c81a:	2b00      	cmp	r3, #0
 800c81c:	d009      	beq.n	800c832 <HAL_UART_IRQHandler+0x702>
 800c81e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c822:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800c826:	2b00      	cmp	r3, #0
 800c828:	d003      	beq.n	800c832 <HAL_UART_IRQHandler+0x702>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800c82a:	6878      	ldr	r0, [r7, #4]
 800c82c:	f001 fd94 	bl	800e358 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800c830:	e016      	b.n	800c860 <HAL_UART_IRQHandler+0x730>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800c832:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c836:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800c83a:	2b00      	cmp	r3, #0
 800c83c:	d010      	beq.n	800c860 <HAL_UART_IRQHandler+0x730>
 800c83e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c842:	2b00      	cmp	r3, #0
 800c844:	da0c      	bge.n	800c860 <HAL_UART_IRQHandler+0x730>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800c846:	6878      	ldr	r0, [r7, #4]
 800c848:	f001 fd7c 	bl	800e344 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800c84c:	e008      	b.n	800c860 <HAL_UART_IRQHandler+0x730>
      return;
 800c84e:	bf00      	nop
 800c850:	e006      	b.n	800c860 <HAL_UART_IRQHandler+0x730>
    return;
 800c852:	bf00      	nop
 800c854:	e004      	b.n	800c860 <HAL_UART_IRQHandler+0x730>
      return;
 800c856:	bf00      	nop
 800c858:	e002      	b.n	800c860 <HAL_UART_IRQHandler+0x730>
      return;
 800c85a:	bf00      	nop
 800c85c:	e000      	b.n	800c860 <HAL_UART_IRQHandler+0x730>
    return;
 800c85e:	bf00      	nop
  }
}
 800c860:	37e8      	adds	r7, #232	; 0xe8
 800c862:	46bd      	mov	sp, r7
 800c864:	bd80      	pop	{r7, pc}
 800c866:	bf00      	nop
 800c868:	effffffe 	.word	0xeffffffe

0800c86c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800c86c:	b480      	push	{r7}
 800c86e:	b083      	sub	sp, #12
 800c870:	af00      	add	r7, sp, #0
 800c872:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800c874:	bf00      	nop
 800c876:	370c      	adds	r7, #12
 800c878:	46bd      	mov	sp, r7
 800c87a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c87e:	4770      	bx	lr

0800c880 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800c880:	b480      	push	{r7}
 800c882:	b083      	sub	sp, #12
 800c884:	af00      	add	r7, sp, #0
 800c886:	6078      	str	r0, [r7, #4]
 800c888:	460b      	mov	r3, r1
 800c88a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800c88c:	bf00      	nop
 800c88e:	370c      	adds	r7, #12
 800c890:	46bd      	mov	sp, r7
 800c892:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c896:	4770      	bx	lr

0800c898 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800c898:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800c89c:	b092      	sub	sp, #72	; 0x48
 800c89e:	af00      	add	r7, sp, #0
 800c8a0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800c8a2:	2300      	movs	r3, #0
 800c8a4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800c8a8:	697b      	ldr	r3, [r7, #20]
 800c8aa:	689a      	ldr	r2, [r3, #8]
 800c8ac:	697b      	ldr	r3, [r7, #20]
 800c8ae:	691b      	ldr	r3, [r3, #16]
 800c8b0:	431a      	orrs	r2, r3
 800c8b2:	697b      	ldr	r3, [r7, #20]
 800c8b4:	695b      	ldr	r3, [r3, #20]
 800c8b6:	431a      	orrs	r2, r3
 800c8b8:	697b      	ldr	r3, [r7, #20]
 800c8ba:	69db      	ldr	r3, [r3, #28]
 800c8bc:	4313      	orrs	r3, r2
 800c8be:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800c8c0:	697b      	ldr	r3, [r7, #20]
 800c8c2:	681b      	ldr	r3, [r3, #0]
 800c8c4:	681a      	ldr	r2, [r3, #0]
 800c8c6:	4bbe      	ldr	r3, [pc, #760]	; (800cbc0 <UART_SetConfig+0x328>)
 800c8c8:	4013      	ands	r3, r2
 800c8ca:	697a      	ldr	r2, [r7, #20]
 800c8cc:	6812      	ldr	r2, [r2, #0]
 800c8ce:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800c8d0:	430b      	orrs	r3, r1
 800c8d2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800c8d4:	697b      	ldr	r3, [r7, #20]
 800c8d6:	681b      	ldr	r3, [r3, #0]
 800c8d8:	685b      	ldr	r3, [r3, #4]
 800c8da:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800c8de:	697b      	ldr	r3, [r7, #20]
 800c8e0:	68da      	ldr	r2, [r3, #12]
 800c8e2:	697b      	ldr	r3, [r7, #20]
 800c8e4:	681b      	ldr	r3, [r3, #0]
 800c8e6:	430a      	orrs	r2, r1
 800c8e8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800c8ea:	697b      	ldr	r3, [r7, #20]
 800c8ec:	699b      	ldr	r3, [r3, #24]
 800c8ee:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800c8f0:	697b      	ldr	r3, [r7, #20]
 800c8f2:	681b      	ldr	r3, [r3, #0]
 800c8f4:	4ab3      	ldr	r2, [pc, #716]	; (800cbc4 <UART_SetConfig+0x32c>)
 800c8f6:	4293      	cmp	r3, r2
 800c8f8:	d004      	beq.n	800c904 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800c8fa:	697b      	ldr	r3, [r7, #20]
 800c8fc:	6a1b      	ldr	r3, [r3, #32]
 800c8fe:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c900:	4313      	orrs	r3, r2
 800c902:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800c904:	697b      	ldr	r3, [r7, #20]
 800c906:	681b      	ldr	r3, [r3, #0]
 800c908:	689a      	ldr	r2, [r3, #8]
 800c90a:	4baf      	ldr	r3, [pc, #700]	; (800cbc8 <UART_SetConfig+0x330>)
 800c90c:	4013      	ands	r3, r2
 800c90e:	697a      	ldr	r2, [r7, #20]
 800c910:	6812      	ldr	r2, [r2, #0]
 800c912:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800c914:	430b      	orrs	r3, r1
 800c916:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800c918:	697b      	ldr	r3, [r7, #20]
 800c91a:	681b      	ldr	r3, [r3, #0]
 800c91c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c91e:	f023 010f 	bic.w	r1, r3, #15
 800c922:	697b      	ldr	r3, [r7, #20]
 800c924:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c926:	697b      	ldr	r3, [r7, #20]
 800c928:	681b      	ldr	r3, [r3, #0]
 800c92a:	430a      	orrs	r2, r1
 800c92c:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800c92e:	697b      	ldr	r3, [r7, #20]
 800c930:	681b      	ldr	r3, [r3, #0]
 800c932:	4aa6      	ldr	r2, [pc, #664]	; (800cbcc <UART_SetConfig+0x334>)
 800c934:	4293      	cmp	r3, r2
 800c936:	d177      	bne.n	800ca28 <UART_SetConfig+0x190>
 800c938:	4ba5      	ldr	r3, [pc, #660]	; (800cbd0 <UART_SetConfig+0x338>)
 800c93a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c93c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800c940:	2b28      	cmp	r3, #40	; 0x28
 800c942:	d86d      	bhi.n	800ca20 <UART_SetConfig+0x188>
 800c944:	a201      	add	r2, pc, #4	; (adr r2, 800c94c <UART_SetConfig+0xb4>)
 800c946:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c94a:	bf00      	nop
 800c94c:	0800c9f1 	.word	0x0800c9f1
 800c950:	0800ca21 	.word	0x0800ca21
 800c954:	0800ca21 	.word	0x0800ca21
 800c958:	0800ca21 	.word	0x0800ca21
 800c95c:	0800ca21 	.word	0x0800ca21
 800c960:	0800ca21 	.word	0x0800ca21
 800c964:	0800ca21 	.word	0x0800ca21
 800c968:	0800ca21 	.word	0x0800ca21
 800c96c:	0800c9f9 	.word	0x0800c9f9
 800c970:	0800ca21 	.word	0x0800ca21
 800c974:	0800ca21 	.word	0x0800ca21
 800c978:	0800ca21 	.word	0x0800ca21
 800c97c:	0800ca21 	.word	0x0800ca21
 800c980:	0800ca21 	.word	0x0800ca21
 800c984:	0800ca21 	.word	0x0800ca21
 800c988:	0800ca21 	.word	0x0800ca21
 800c98c:	0800ca01 	.word	0x0800ca01
 800c990:	0800ca21 	.word	0x0800ca21
 800c994:	0800ca21 	.word	0x0800ca21
 800c998:	0800ca21 	.word	0x0800ca21
 800c99c:	0800ca21 	.word	0x0800ca21
 800c9a0:	0800ca21 	.word	0x0800ca21
 800c9a4:	0800ca21 	.word	0x0800ca21
 800c9a8:	0800ca21 	.word	0x0800ca21
 800c9ac:	0800ca09 	.word	0x0800ca09
 800c9b0:	0800ca21 	.word	0x0800ca21
 800c9b4:	0800ca21 	.word	0x0800ca21
 800c9b8:	0800ca21 	.word	0x0800ca21
 800c9bc:	0800ca21 	.word	0x0800ca21
 800c9c0:	0800ca21 	.word	0x0800ca21
 800c9c4:	0800ca21 	.word	0x0800ca21
 800c9c8:	0800ca21 	.word	0x0800ca21
 800c9cc:	0800ca11 	.word	0x0800ca11
 800c9d0:	0800ca21 	.word	0x0800ca21
 800c9d4:	0800ca21 	.word	0x0800ca21
 800c9d8:	0800ca21 	.word	0x0800ca21
 800c9dc:	0800ca21 	.word	0x0800ca21
 800c9e0:	0800ca21 	.word	0x0800ca21
 800c9e4:	0800ca21 	.word	0x0800ca21
 800c9e8:	0800ca21 	.word	0x0800ca21
 800c9ec:	0800ca19 	.word	0x0800ca19
 800c9f0:	2301      	movs	r3, #1
 800c9f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c9f6:	e222      	b.n	800ce3e <UART_SetConfig+0x5a6>
 800c9f8:	2304      	movs	r3, #4
 800c9fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c9fe:	e21e      	b.n	800ce3e <UART_SetConfig+0x5a6>
 800ca00:	2308      	movs	r3, #8
 800ca02:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ca06:	e21a      	b.n	800ce3e <UART_SetConfig+0x5a6>
 800ca08:	2310      	movs	r3, #16
 800ca0a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ca0e:	e216      	b.n	800ce3e <UART_SetConfig+0x5a6>
 800ca10:	2320      	movs	r3, #32
 800ca12:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ca16:	e212      	b.n	800ce3e <UART_SetConfig+0x5a6>
 800ca18:	2340      	movs	r3, #64	; 0x40
 800ca1a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ca1e:	e20e      	b.n	800ce3e <UART_SetConfig+0x5a6>
 800ca20:	2380      	movs	r3, #128	; 0x80
 800ca22:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ca26:	e20a      	b.n	800ce3e <UART_SetConfig+0x5a6>
 800ca28:	697b      	ldr	r3, [r7, #20]
 800ca2a:	681b      	ldr	r3, [r3, #0]
 800ca2c:	4a69      	ldr	r2, [pc, #420]	; (800cbd4 <UART_SetConfig+0x33c>)
 800ca2e:	4293      	cmp	r3, r2
 800ca30:	d130      	bne.n	800ca94 <UART_SetConfig+0x1fc>
 800ca32:	4b67      	ldr	r3, [pc, #412]	; (800cbd0 <UART_SetConfig+0x338>)
 800ca34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ca36:	f003 0307 	and.w	r3, r3, #7
 800ca3a:	2b05      	cmp	r3, #5
 800ca3c:	d826      	bhi.n	800ca8c <UART_SetConfig+0x1f4>
 800ca3e:	a201      	add	r2, pc, #4	; (adr r2, 800ca44 <UART_SetConfig+0x1ac>)
 800ca40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ca44:	0800ca5d 	.word	0x0800ca5d
 800ca48:	0800ca65 	.word	0x0800ca65
 800ca4c:	0800ca6d 	.word	0x0800ca6d
 800ca50:	0800ca75 	.word	0x0800ca75
 800ca54:	0800ca7d 	.word	0x0800ca7d
 800ca58:	0800ca85 	.word	0x0800ca85
 800ca5c:	2300      	movs	r3, #0
 800ca5e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ca62:	e1ec      	b.n	800ce3e <UART_SetConfig+0x5a6>
 800ca64:	2304      	movs	r3, #4
 800ca66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ca6a:	e1e8      	b.n	800ce3e <UART_SetConfig+0x5a6>
 800ca6c:	2308      	movs	r3, #8
 800ca6e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ca72:	e1e4      	b.n	800ce3e <UART_SetConfig+0x5a6>
 800ca74:	2310      	movs	r3, #16
 800ca76:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ca7a:	e1e0      	b.n	800ce3e <UART_SetConfig+0x5a6>
 800ca7c:	2320      	movs	r3, #32
 800ca7e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ca82:	e1dc      	b.n	800ce3e <UART_SetConfig+0x5a6>
 800ca84:	2340      	movs	r3, #64	; 0x40
 800ca86:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ca8a:	e1d8      	b.n	800ce3e <UART_SetConfig+0x5a6>
 800ca8c:	2380      	movs	r3, #128	; 0x80
 800ca8e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ca92:	e1d4      	b.n	800ce3e <UART_SetConfig+0x5a6>
 800ca94:	697b      	ldr	r3, [r7, #20]
 800ca96:	681b      	ldr	r3, [r3, #0]
 800ca98:	4a4f      	ldr	r2, [pc, #316]	; (800cbd8 <UART_SetConfig+0x340>)
 800ca9a:	4293      	cmp	r3, r2
 800ca9c:	d130      	bne.n	800cb00 <UART_SetConfig+0x268>
 800ca9e:	4b4c      	ldr	r3, [pc, #304]	; (800cbd0 <UART_SetConfig+0x338>)
 800caa0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800caa2:	f003 0307 	and.w	r3, r3, #7
 800caa6:	2b05      	cmp	r3, #5
 800caa8:	d826      	bhi.n	800caf8 <UART_SetConfig+0x260>
 800caaa:	a201      	add	r2, pc, #4	; (adr r2, 800cab0 <UART_SetConfig+0x218>)
 800caac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cab0:	0800cac9 	.word	0x0800cac9
 800cab4:	0800cad1 	.word	0x0800cad1
 800cab8:	0800cad9 	.word	0x0800cad9
 800cabc:	0800cae1 	.word	0x0800cae1
 800cac0:	0800cae9 	.word	0x0800cae9
 800cac4:	0800caf1 	.word	0x0800caf1
 800cac8:	2300      	movs	r3, #0
 800caca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cace:	e1b6      	b.n	800ce3e <UART_SetConfig+0x5a6>
 800cad0:	2304      	movs	r3, #4
 800cad2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cad6:	e1b2      	b.n	800ce3e <UART_SetConfig+0x5a6>
 800cad8:	2308      	movs	r3, #8
 800cada:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cade:	e1ae      	b.n	800ce3e <UART_SetConfig+0x5a6>
 800cae0:	2310      	movs	r3, #16
 800cae2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cae6:	e1aa      	b.n	800ce3e <UART_SetConfig+0x5a6>
 800cae8:	2320      	movs	r3, #32
 800caea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800caee:	e1a6      	b.n	800ce3e <UART_SetConfig+0x5a6>
 800caf0:	2340      	movs	r3, #64	; 0x40
 800caf2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800caf6:	e1a2      	b.n	800ce3e <UART_SetConfig+0x5a6>
 800caf8:	2380      	movs	r3, #128	; 0x80
 800cafa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cafe:	e19e      	b.n	800ce3e <UART_SetConfig+0x5a6>
 800cb00:	697b      	ldr	r3, [r7, #20]
 800cb02:	681b      	ldr	r3, [r3, #0]
 800cb04:	4a35      	ldr	r2, [pc, #212]	; (800cbdc <UART_SetConfig+0x344>)
 800cb06:	4293      	cmp	r3, r2
 800cb08:	d130      	bne.n	800cb6c <UART_SetConfig+0x2d4>
 800cb0a:	4b31      	ldr	r3, [pc, #196]	; (800cbd0 <UART_SetConfig+0x338>)
 800cb0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cb0e:	f003 0307 	and.w	r3, r3, #7
 800cb12:	2b05      	cmp	r3, #5
 800cb14:	d826      	bhi.n	800cb64 <UART_SetConfig+0x2cc>
 800cb16:	a201      	add	r2, pc, #4	; (adr r2, 800cb1c <UART_SetConfig+0x284>)
 800cb18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cb1c:	0800cb35 	.word	0x0800cb35
 800cb20:	0800cb3d 	.word	0x0800cb3d
 800cb24:	0800cb45 	.word	0x0800cb45
 800cb28:	0800cb4d 	.word	0x0800cb4d
 800cb2c:	0800cb55 	.word	0x0800cb55
 800cb30:	0800cb5d 	.word	0x0800cb5d
 800cb34:	2300      	movs	r3, #0
 800cb36:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cb3a:	e180      	b.n	800ce3e <UART_SetConfig+0x5a6>
 800cb3c:	2304      	movs	r3, #4
 800cb3e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cb42:	e17c      	b.n	800ce3e <UART_SetConfig+0x5a6>
 800cb44:	2308      	movs	r3, #8
 800cb46:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cb4a:	e178      	b.n	800ce3e <UART_SetConfig+0x5a6>
 800cb4c:	2310      	movs	r3, #16
 800cb4e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cb52:	e174      	b.n	800ce3e <UART_SetConfig+0x5a6>
 800cb54:	2320      	movs	r3, #32
 800cb56:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cb5a:	e170      	b.n	800ce3e <UART_SetConfig+0x5a6>
 800cb5c:	2340      	movs	r3, #64	; 0x40
 800cb5e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cb62:	e16c      	b.n	800ce3e <UART_SetConfig+0x5a6>
 800cb64:	2380      	movs	r3, #128	; 0x80
 800cb66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cb6a:	e168      	b.n	800ce3e <UART_SetConfig+0x5a6>
 800cb6c:	697b      	ldr	r3, [r7, #20]
 800cb6e:	681b      	ldr	r3, [r3, #0]
 800cb70:	4a1b      	ldr	r2, [pc, #108]	; (800cbe0 <UART_SetConfig+0x348>)
 800cb72:	4293      	cmp	r3, r2
 800cb74:	d142      	bne.n	800cbfc <UART_SetConfig+0x364>
 800cb76:	4b16      	ldr	r3, [pc, #88]	; (800cbd0 <UART_SetConfig+0x338>)
 800cb78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cb7a:	f003 0307 	and.w	r3, r3, #7
 800cb7e:	2b05      	cmp	r3, #5
 800cb80:	d838      	bhi.n	800cbf4 <UART_SetConfig+0x35c>
 800cb82:	a201      	add	r2, pc, #4	; (adr r2, 800cb88 <UART_SetConfig+0x2f0>)
 800cb84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cb88:	0800cba1 	.word	0x0800cba1
 800cb8c:	0800cba9 	.word	0x0800cba9
 800cb90:	0800cbb1 	.word	0x0800cbb1
 800cb94:	0800cbb9 	.word	0x0800cbb9
 800cb98:	0800cbe5 	.word	0x0800cbe5
 800cb9c:	0800cbed 	.word	0x0800cbed
 800cba0:	2300      	movs	r3, #0
 800cba2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cba6:	e14a      	b.n	800ce3e <UART_SetConfig+0x5a6>
 800cba8:	2304      	movs	r3, #4
 800cbaa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cbae:	e146      	b.n	800ce3e <UART_SetConfig+0x5a6>
 800cbb0:	2308      	movs	r3, #8
 800cbb2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cbb6:	e142      	b.n	800ce3e <UART_SetConfig+0x5a6>
 800cbb8:	2310      	movs	r3, #16
 800cbba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cbbe:	e13e      	b.n	800ce3e <UART_SetConfig+0x5a6>
 800cbc0:	cfff69f3 	.word	0xcfff69f3
 800cbc4:	58000c00 	.word	0x58000c00
 800cbc8:	11fff4ff 	.word	0x11fff4ff
 800cbcc:	40011000 	.word	0x40011000
 800cbd0:	58024400 	.word	0x58024400
 800cbd4:	40004400 	.word	0x40004400
 800cbd8:	40004800 	.word	0x40004800
 800cbdc:	40004c00 	.word	0x40004c00
 800cbe0:	40005000 	.word	0x40005000
 800cbe4:	2320      	movs	r3, #32
 800cbe6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cbea:	e128      	b.n	800ce3e <UART_SetConfig+0x5a6>
 800cbec:	2340      	movs	r3, #64	; 0x40
 800cbee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cbf2:	e124      	b.n	800ce3e <UART_SetConfig+0x5a6>
 800cbf4:	2380      	movs	r3, #128	; 0x80
 800cbf6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cbfa:	e120      	b.n	800ce3e <UART_SetConfig+0x5a6>
 800cbfc:	697b      	ldr	r3, [r7, #20]
 800cbfe:	681b      	ldr	r3, [r3, #0]
 800cc00:	4acb      	ldr	r2, [pc, #812]	; (800cf30 <UART_SetConfig+0x698>)
 800cc02:	4293      	cmp	r3, r2
 800cc04:	d176      	bne.n	800ccf4 <UART_SetConfig+0x45c>
 800cc06:	4bcb      	ldr	r3, [pc, #812]	; (800cf34 <UART_SetConfig+0x69c>)
 800cc08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cc0a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800cc0e:	2b28      	cmp	r3, #40	; 0x28
 800cc10:	d86c      	bhi.n	800ccec <UART_SetConfig+0x454>
 800cc12:	a201      	add	r2, pc, #4	; (adr r2, 800cc18 <UART_SetConfig+0x380>)
 800cc14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cc18:	0800ccbd 	.word	0x0800ccbd
 800cc1c:	0800cced 	.word	0x0800cced
 800cc20:	0800cced 	.word	0x0800cced
 800cc24:	0800cced 	.word	0x0800cced
 800cc28:	0800cced 	.word	0x0800cced
 800cc2c:	0800cced 	.word	0x0800cced
 800cc30:	0800cced 	.word	0x0800cced
 800cc34:	0800cced 	.word	0x0800cced
 800cc38:	0800ccc5 	.word	0x0800ccc5
 800cc3c:	0800cced 	.word	0x0800cced
 800cc40:	0800cced 	.word	0x0800cced
 800cc44:	0800cced 	.word	0x0800cced
 800cc48:	0800cced 	.word	0x0800cced
 800cc4c:	0800cced 	.word	0x0800cced
 800cc50:	0800cced 	.word	0x0800cced
 800cc54:	0800cced 	.word	0x0800cced
 800cc58:	0800cccd 	.word	0x0800cccd
 800cc5c:	0800cced 	.word	0x0800cced
 800cc60:	0800cced 	.word	0x0800cced
 800cc64:	0800cced 	.word	0x0800cced
 800cc68:	0800cced 	.word	0x0800cced
 800cc6c:	0800cced 	.word	0x0800cced
 800cc70:	0800cced 	.word	0x0800cced
 800cc74:	0800cced 	.word	0x0800cced
 800cc78:	0800ccd5 	.word	0x0800ccd5
 800cc7c:	0800cced 	.word	0x0800cced
 800cc80:	0800cced 	.word	0x0800cced
 800cc84:	0800cced 	.word	0x0800cced
 800cc88:	0800cced 	.word	0x0800cced
 800cc8c:	0800cced 	.word	0x0800cced
 800cc90:	0800cced 	.word	0x0800cced
 800cc94:	0800cced 	.word	0x0800cced
 800cc98:	0800ccdd 	.word	0x0800ccdd
 800cc9c:	0800cced 	.word	0x0800cced
 800cca0:	0800cced 	.word	0x0800cced
 800cca4:	0800cced 	.word	0x0800cced
 800cca8:	0800cced 	.word	0x0800cced
 800ccac:	0800cced 	.word	0x0800cced
 800ccb0:	0800cced 	.word	0x0800cced
 800ccb4:	0800cced 	.word	0x0800cced
 800ccb8:	0800cce5 	.word	0x0800cce5
 800ccbc:	2301      	movs	r3, #1
 800ccbe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ccc2:	e0bc      	b.n	800ce3e <UART_SetConfig+0x5a6>
 800ccc4:	2304      	movs	r3, #4
 800ccc6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ccca:	e0b8      	b.n	800ce3e <UART_SetConfig+0x5a6>
 800cccc:	2308      	movs	r3, #8
 800ccce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ccd2:	e0b4      	b.n	800ce3e <UART_SetConfig+0x5a6>
 800ccd4:	2310      	movs	r3, #16
 800ccd6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ccda:	e0b0      	b.n	800ce3e <UART_SetConfig+0x5a6>
 800ccdc:	2320      	movs	r3, #32
 800ccde:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cce2:	e0ac      	b.n	800ce3e <UART_SetConfig+0x5a6>
 800cce4:	2340      	movs	r3, #64	; 0x40
 800cce6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ccea:	e0a8      	b.n	800ce3e <UART_SetConfig+0x5a6>
 800ccec:	2380      	movs	r3, #128	; 0x80
 800ccee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ccf2:	e0a4      	b.n	800ce3e <UART_SetConfig+0x5a6>
 800ccf4:	697b      	ldr	r3, [r7, #20]
 800ccf6:	681b      	ldr	r3, [r3, #0]
 800ccf8:	4a8f      	ldr	r2, [pc, #572]	; (800cf38 <UART_SetConfig+0x6a0>)
 800ccfa:	4293      	cmp	r3, r2
 800ccfc:	d130      	bne.n	800cd60 <UART_SetConfig+0x4c8>
 800ccfe:	4b8d      	ldr	r3, [pc, #564]	; (800cf34 <UART_SetConfig+0x69c>)
 800cd00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cd02:	f003 0307 	and.w	r3, r3, #7
 800cd06:	2b05      	cmp	r3, #5
 800cd08:	d826      	bhi.n	800cd58 <UART_SetConfig+0x4c0>
 800cd0a:	a201      	add	r2, pc, #4	; (adr r2, 800cd10 <UART_SetConfig+0x478>)
 800cd0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cd10:	0800cd29 	.word	0x0800cd29
 800cd14:	0800cd31 	.word	0x0800cd31
 800cd18:	0800cd39 	.word	0x0800cd39
 800cd1c:	0800cd41 	.word	0x0800cd41
 800cd20:	0800cd49 	.word	0x0800cd49
 800cd24:	0800cd51 	.word	0x0800cd51
 800cd28:	2300      	movs	r3, #0
 800cd2a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cd2e:	e086      	b.n	800ce3e <UART_SetConfig+0x5a6>
 800cd30:	2304      	movs	r3, #4
 800cd32:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cd36:	e082      	b.n	800ce3e <UART_SetConfig+0x5a6>
 800cd38:	2308      	movs	r3, #8
 800cd3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cd3e:	e07e      	b.n	800ce3e <UART_SetConfig+0x5a6>
 800cd40:	2310      	movs	r3, #16
 800cd42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cd46:	e07a      	b.n	800ce3e <UART_SetConfig+0x5a6>
 800cd48:	2320      	movs	r3, #32
 800cd4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cd4e:	e076      	b.n	800ce3e <UART_SetConfig+0x5a6>
 800cd50:	2340      	movs	r3, #64	; 0x40
 800cd52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cd56:	e072      	b.n	800ce3e <UART_SetConfig+0x5a6>
 800cd58:	2380      	movs	r3, #128	; 0x80
 800cd5a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cd5e:	e06e      	b.n	800ce3e <UART_SetConfig+0x5a6>
 800cd60:	697b      	ldr	r3, [r7, #20]
 800cd62:	681b      	ldr	r3, [r3, #0]
 800cd64:	4a75      	ldr	r2, [pc, #468]	; (800cf3c <UART_SetConfig+0x6a4>)
 800cd66:	4293      	cmp	r3, r2
 800cd68:	d130      	bne.n	800cdcc <UART_SetConfig+0x534>
 800cd6a:	4b72      	ldr	r3, [pc, #456]	; (800cf34 <UART_SetConfig+0x69c>)
 800cd6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cd6e:	f003 0307 	and.w	r3, r3, #7
 800cd72:	2b05      	cmp	r3, #5
 800cd74:	d826      	bhi.n	800cdc4 <UART_SetConfig+0x52c>
 800cd76:	a201      	add	r2, pc, #4	; (adr r2, 800cd7c <UART_SetConfig+0x4e4>)
 800cd78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cd7c:	0800cd95 	.word	0x0800cd95
 800cd80:	0800cd9d 	.word	0x0800cd9d
 800cd84:	0800cda5 	.word	0x0800cda5
 800cd88:	0800cdad 	.word	0x0800cdad
 800cd8c:	0800cdb5 	.word	0x0800cdb5
 800cd90:	0800cdbd 	.word	0x0800cdbd
 800cd94:	2300      	movs	r3, #0
 800cd96:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cd9a:	e050      	b.n	800ce3e <UART_SetConfig+0x5a6>
 800cd9c:	2304      	movs	r3, #4
 800cd9e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cda2:	e04c      	b.n	800ce3e <UART_SetConfig+0x5a6>
 800cda4:	2308      	movs	r3, #8
 800cda6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cdaa:	e048      	b.n	800ce3e <UART_SetConfig+0x5a6>
 800cdac:	2310      	movs	r3, #16
 800cdae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cdb2:	e044      	b.n	800ce3e <UART_SetConfig+0x5a6>
 800cdb4:	2320      	movs	r3, #32
 800cdb6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cdba:	e040      	b.n	800ce3e <UART_SetConfig+0x5a6>
 800cdbc:	2340      	movs	r3, #64	; 0x40
 800cdbe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cdc2:	e03c      	b.n	800ce3e <UART_SetConfig+0x5a6>
 800cdc4:	2380      	movs	r3, #128	; 0x80
 800cdc6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cdca:	e038      	b.n	800ce3e <UART_SetConfig+0x5a6>
 800cdcc:	697b      	ldr	r3, [r7, #20]
 800cdce:	681b      	ldr	r3, [r3, #0]
 800cdd0:	4a5b      	ldr	r2, [pc, #364]	; (800cf40 <UART_SetConfig+0x6a8>)
 800cdd2:	4293      	cmp	r3, r2
 800cdd4:	d130      	bne.n	800ce38 <UART_SetConfig+0x5a0>
 800cdd6:	4b57      	ldr	r3, [pc, #348]	; (800cf34 <UART_SetConfig+0x69c>)
 800cdd8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cdda:	f003 0307 	and.w	r3, r3, #7
 800cdde:	2b05      	cmp	r3, #5
 800cde0:	d826      	bhi.n	800ce30 <UART_SetConfig+0x598>
 800cde2:	a201      	add	r2, pc, #4	; (adr r2, 800cde8 <UART_SetConfig+0x550>)
 800cde4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cde8:	0800ce01 	.word	0x0800ce01
 800cdec:	0800ce09 	.word	0x0800ce09
 800cdf0:	0800ce11 	.word	0x0800ce11
 800cdf4:	0800ce19 	.word	0x0800ce19
 800cdf8:	0800ce21 	.word	0x0800ce21
 800cdfc:	0800ce29 	.word	0x0800ce29
 800ce00:	2302      	movs	r3, #2
 800ce02:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ce06:	e01a      	b.n	800ce3e <UART_SetConfig+0x5a6>
 800ce08:	2304      	movs	r3, #4
 800ce0a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ce0e:	e016      	b.n	800ce3e <UART_SetConfig+0x5a6>
 800ce10:	2308      	movs	r3, #8
 800ce12:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ce16:	e012      	b.n	800ce3e <UART_SetConfig+0x5a6>
 800ce18:	2310      	movs	r3, #16
 800ce1a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ce1e:	e00e      	b.n	800ce3e <UART_SetConfig+0x5a6>
 800ce20:	2320      	movs	r3, #32
 800ce22:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ce26:	e00a      	b.n	800ce3e <UART_SetConfig+0x5a6>
 800ce28:	2340      	movs	r3, #64	; 0x40
 800ce2a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ce2e:	e006      	b.n	800ce3e <UART_SetConfig+0x5a6>
 800ce30:	2380      	movs	r3, #128	; 0x80
 800ce32:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ce36:	e002      	b.n	800ce3e <UART_SetConfig+0x5a6>
 800ce38:	2380      	movs	r3, #128	; 0x80
 800ce3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800ce3e:	697b      	ldr	r3, [r7, #20]
 800ce40:	681b      	ldr	r3, [r3, #0]
 800ce42:	4a3f      	ldr	r2, [pc, #252]	; (800cf40 <UART_SetConfig+0x6a8>)
 800ce44:	4293      	cmp	r3, r2
 800ce46:	f040 80f8 	bne.w	800d03a <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800ce4a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800ce4e:	2b20      	cmp	r3, #32
 800ce50:	dc46      	bgt.n	800cee0 <UART_SetConfig+0x648>
 800ce52:	2b02      	cmp	r3, #2
 800ce54:	f2c0 8082 	blt.w	800cf5c <UART_SetConfig+0x6c4>
 800ce58:	3b02      	subs	r3, #2
 800ce5a:	2b1e      	cmp	r3, #30
 800ce5c:	d87e      	bhi.n	800cf5c <UART_SetConfig+0x6c4>
 800ce5e:	a201      	add	r2, pc, #4	; (adr r2, 800ce64 <UART_SetConfig+0x5cc>)
 800ce60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ce64:	0800cee7 	.word	0x0800cee7
 800ce68:	0800cf5d 	.word	0x0800cf5d
 800ce6c:	0800ceef 	.word	0x0800ceef
 800ce70:	0800cf5d 	.word	0x0800cf5d
 800ce74:	0800cf5d 	.word	0x0800cf5d
 800ce78:	0800cf5d 	.word	0x0800cf5d
 800ce7c:	0800ceff 	.word	0x0800ceff
 800ce80:	0800cf5d 	.word	0x0800cf5d
 800ce84:	0800cf5d 	.word	0x0800cf5d
 800ce88:	0800cf5d 	.word	0x0800cf5d
 800ce8c:	0800cf5d 	.word	0x0800cf5d
 800ce90:	0800cf5d 	.word	0x0800cf5d
 800ce94:	0800cf5d 	.word	0x0800cf5d
 800ce98:	0800cf5d 	.word	0x0800cf5d
 800ce9c:	0800cf0f 	.word	0x0800cf0f
 800cea0:	0800cf5d 	.word	0x0800cf5d
 800cea4:	0800cf5d 	.word	0x0800cf5d
 800cea8:	0800cf5d 	.word	0x0800cf5d
 800ceac:	0800cf5d 	.word	0x0800cf5d
 800ceb0:	0800cf5d 	.word	0x0800cf5d
 800ceb4:	0800cf5d 	.word	0x0800cf5d
 800ceb8:	0800cf5d 	.word	0x0800cf5d
 800cebc:	0800cf5d 	.word	0x0800cf5d
 800cec0:	0800cf5d 	.word	0x0800cf5d
 800cec4:	0800cf5d 	.word	0x0800cf5d
 800cec8:	0800cf5d 	.word	0x0800cf5d
 800cecc:	0800cf5d 	.word	0x0800cf5d
 800ced0:	0800cf5d 	.word	0x0800cf5d
 800ced4:	0800cf5d 	.word	0x0800cf5d
 800ced8:	0800cf5d 	.word	0x0800cf5d
 800cedc:	0800cf4f 	.word	0x0800cf4f
 800cee0:	2b40      	cmp	r3, #64	; 0x40
 800cee2:	d037      	beq.n	800cf54 <UART_SetConfig+0x6bc>
 800cee4:	e03a      	b.n	800cf5c <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800cee6:	f7fc fc17 	bl	8009718 <HAL_RCCEx_GetD3PCLK1Freq>
 800ceea:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800ceec:	e03c      	b.n	800cf68 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ceee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800cef2:	4618      	mov	r0, r3
 800cef4:	f7fc fc26 	bl	8009744 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800cef8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cefa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cefc:	e034      	b.n	800cf68 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800cefe:	f107 0318 	add.w	r3, r7, #24
 800cf02:	4618      	mov	r0, r3
 800cf04:	f7fc fd72 	bl	80099ec <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800cf08:	69fb      	ldr	r3, [r7, #28]
 800cf0a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cf0c:	e02c      	b.n	800cf68 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800cf0e:	4b09      	ldr	r3, [pc, #36]	; (800cf34 <UART_SetConfig+0x69c>)
 800cf10:	681b      	ldr	r3, [r3, #0]
 800cf12:	f003 0320 	and.w	r3, r3, #32
 800cf16:	2b00      	cmp	r3, #0
 800cf18:	d016      	beq.n	800cf48 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800cf1a:	4b06      	ldr	r3, [pc, #24]	; (800cf34 <UART_SetConfig+0x69c>)
 800cf1c:	681b      	ldr	r3, [r3, #0]
 800cf1e:	08db      	lsrs	r3, r3, #3
 800cf20:	f003 0303 	and.w	r3, r3, #3
 800cf24:	4a07      	ldr	r2, [pc, #28]	; (800cf44 <UART_SetConfig+0x6ac>)
 800cf26:	fa22 f303 	lsr.w	r3, r2, r3
 800cf2a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800cf2c:	e01c      	b.n	800cf68 <UART_SetConfig+0x6d0>
 800cf2e:	bf00      	nop
 800cf30:	40011400 	.word	0x40011400
 800cf34:	58024400 	.word	0x58024400
 800cf38:	40007800 	.word	0x40007800
 800cf3c:	40007c00 	.word	0x40007c00
 800cf40:	58000c00 	.word	0x58000c00
 800cf44:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800cf48:	4b9d      	ldr	r3, [pc, #628]	; (800d1c0 <UART_SetConfig+0x928>)
 800cf4a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cf4c:	e00c      	b.n	800cf68 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800cf4e:	4b9d      	ldr	r3, [pc, #628]	; (800d1c4 <UART_SetConfig+0x92c>)
 800cf50:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cf52:	e009      	b.n	800cf68 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800cf54:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800cf58:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cf5a:	e005      	b.n	800cf68 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800cf5c:	2300      	movs	r3, #0
 800cf5e:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800cf60:	2301      	movs	r3, #1
 800cf62:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800cf66:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800cf68:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cf6a:	2b00      	cmp	r3, #0
 800cf6c:	f000 81de 	beq.w	800d32c <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800cf70:	697b      	ldr	r3, [r7, #20]
 800cf72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cf74:	4a94      	ldr	r2, [pc, #592]	; (800d1c8 <UART_SetConfig+0x930>)
 800cf76:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800cf7a:	461a      	mov	r2, r3
 800cf7c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cf7e:	fbb3 f3f2 	udiv	r3, r3, r2
 800cf82:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800cf84:	697b      	ldr	r3, [r7, #20]
 800cf86:	685a      	ldr	r2, [r3, #4]
 800cf88:	4613      	mov	r3, r2
 800cf8a:	005b      	lsls	r3, r3, #1
 800cf8c:	4413      	add	r3, r2
 800cf8e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cf90:	429a      	cmp	r2, r3
 800cf92:	d305      	bcc.n	800cfa0 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800cf94:	697b      	ldr	r3, [r7, #20]
 800cf96:	685b      	ldr	r3, [r3, #4]
 800cf98:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800cf9a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cf9c:	429a      	cmp	r2, r3
 800cf9e:	d903      	bls.n	800cfa8 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800cfa0:	2301      	movs	r3, #1
 800cfa2:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800cfa6:	e1c1      	b.n	800d32c <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800cfa8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cfaa:	2200      	movs	r2, #0
 800cfac:	60bb      	str	r3, [r7, #8]
 800cfae:	60fa      	str	r2, [r7, #12]
 800cfb0:	697b      	ldr	r3, [r7, #20]
 800cfb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cfb4:	4a84      	ldr	r2, [pc, #528]	; (800d1c8 <UART_SetConfig+0x930>)
 800cfb6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800cfba:	b29b      	uxth	r3, r3
 800cfbc:	2200      	movs	r2, #0
 800cfbe:	603b      	str	r3, [r7, #0]
 800cfc0:	607a      	str	r2, [r7, #4]
 800cfc2:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cfc6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800cfca:	f7f3 fb9d 	bl	8000708 <__aeabi_uldivmod>
 800cfce:	4602      	mov	r2, r0
 800cfd0:	460b      	mov	r3, r1
 800cfd2:	4610      	mov	r0, r2
 800cfd4:	4619      	mov	r1, r3
 800cfd6:	f04f 0200 	mov.w	r2, #0
 800cfda:	f04f 0300 	mov.w	r3, #0
 800cfde:	020b      	lsls	r3, r1, #8
 800cfe0:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800cfe4:	0202      	lsls	r2, r0, #8
 800cfe6:	6979      	ldr	r1, [r7, #20]
 800cfe8:	6849      	ldr	r1, [r1, #4]
 800cfea:	0849      	lsrs	r1, r1, #1
 800cfec:	2000      	movs	r0, #0
 800cfee:	460c      	mov	r4, r1
 800cff0:	4605      	mov	r5, r0
 800cff2:	eb12 0804 	adds.w	r8, r2, r4
 800cff6:	eb43 0905 	adc.w	r9, r3, r5
 800cffa:	697b      	ldr	r3, [r7, #20]
 800cffc:	685b      	ldr	r3, [r3, #4]
 800cffe:	2200      	movs	r2, #0
 800d000:	469a      	mov	sl, r3
 800d002:	4693      	mov	fp, r2
 800d004:	4652      	mov	r2, sl
 800d006:	465b      	mov	r3, fp
 800d008:	4640      	mov	r0, r8
 800d00a:	4649      	mov	r1, r9
 800d00c:	f7f3 fb7c 	bl	8000708 <__aeabi_uldivmod>
 800d010:	4602      	mov	r2, r0
 800d012:	460b      	mov	r3, r1
 800d014:	4613      	mov	r3, r2
 800d016:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800d018:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d01a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800d01e:	d308      	bcc.n	800d032 <UART_SetConfig+0x79a>
 800d020:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d022:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d026:	d204      	bcs.n	800d032 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800d028:	697b      	ldr	r3, [r7, #20]
 800d02a:	681b      	ldr	r3, [r3, #0]
 800d02c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d02e:	60da      	str	r2, [r3, #12]
 800d030:	e17c      	b.n	800d32c <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800d032:	2301      	movs	r3, #1
 800d034:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800d038:	e178      	b.n	800d32c <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800d03a:	697b      	ldr	r3, [r7, #20]
 800d03c:	69db      	ldr	r3, [r3, #28]
 800d03e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d042:	f040 80c5 	bne.w	800d1d0 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800d046:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800d04a:	2b20      	cmp	r3, #32
 800d04c:	dc48      	bgt.n	800d0e0 <UART_SetConfig+0x848>
 800d04e:	2b00      	cmp	r3, #0
 800d050:	db7b      	blt.n	800d14a <UART_SetConfig+0x8b2>
 800d052:	2b20      	cmp	r3, #32
 800d054:	d879      	bhi.n	800d14a <UART_SetConfig+0x8b2>
 800d056:	a201      	add	r2, pc, #4	; (adr r2, 800d05c <UART_SetConfig+0x7c4>)
 800d058:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d05c:	0800d0e7 	.word	0x0800d0e7
 800d060:	0800d0ef 	.word	0x0800d0ef
 800d064:	0800d14b 	.word	0x0800d14b
 800d068:	0800d14b 	.word	0x0800d14b
 800d06c:	0800d0f7 	.word	0x0800d0f7
 800d070:	0800d14b 	.word	0x0800d14b
 800d074:	0800d14b 	.word	0x0800d14b
 800d078:	0800d14b 	.word	0x0800d14b
 800d07c:	0800d107 	.word	0x0800d107
 800d080:	0800d14b 	.word	0x0800d14b
 800d084:	0800d14b 	.word	0x0800d14b
 800d088:	0800d14b 	.word	0x0800d14b
 800d08c:	0800d14b 	.word	0x0800d14b
 800d090:	0800d14b 	.word	0x0800d14b
 800d094:	0800d14b 	.word	0x0800d14b
 800d098:	0800d14b 	.word	0x0800d14b
 800d09c:	0800d117 	.word	0x0800d117
 800d0a0:	0800d14b 	.word	0x0800d14b
 800d0a4:	0800d14b 	.word	0x0800d14b
 800d0a8:	0800d14b 	.word	0x0800d14b
 800d0ac:	0800d14b 	.word	0x0800d14b
 800d0b0:	0800d14b 	.word	0x0800d14b
 800d0b4:	0800d14b 	.word	0x0800d14b
 800d0b8:	0800d14b 	.word	0x0800d14b
 800d0bc:	0800d14b 	.word	0x0800d14b
 800d0c0:	0800d14b 	.word	0x0800d14b
 800d0c4:	0800d14b 	.word	0x0800d14b
 800d0c8:	0800d14b 	.word	0x0800d14b
 800d0cc:	0800d14b 	.word	0x0800d14b
 800d0d0:	0800d14b 	.word	0x0800d14b
 800d0d4:	0800d14b 	.word	0x0800d14b
 800d0d8:	0800d14b 	.word	0x0800d14b
 800d0dc:	0800d13d 	.word	0x0800d13d
 800d0e0:	2b40      	cmp	r3, #64	; 0x40
 800d0e2:	d02e      	beq.n	800d142 <UART_SetConfig+0x8aa>
 800d0e4:	e031      	b.n	800d14a <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800d0e6:	f7fb fba5 	bl	8008834 <HAL_RCC_GetPCLK1Freq>
 800d0ea:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800d0ec:	e033      	b.n	800d156 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800d0ee:	f7fb fbb7 	bl	8008860 <HAL_RCC_GetPCLK2Freq>
 800d0f2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800d0f4:	e02f      	b.n	800d156 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d0f6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800d0fa:	4618      	mov	r0, r3
 800d0fc:	f7fc fb22 	bl	8009744 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800d100:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d102:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d104:	e027      	b.n	800d156 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d106:	f107 0318 	add.w	r3, r7, #24
 800d10a:	4618      	mov	r0, r3
 800d10c:	f7fc fc6e 	bl	80099ec <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800d110:	69fb      	ldr	r3, [r7, #28]
 800d112:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d114:	e01f      	b.n	800d156 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d116:	4b2d      	ldr	r3, [pc, #180]	; (800d1cc <UART_SetConfig+0x934>)
 800d118:	681b      	ldr	r3, [r3, #0]
 800d11a:	f003 0320 	and.w	r3, r3, #32
 800d11e:	2b00      	cmp	r3, #0
 800d120:	d009      	beq.n	800d136 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800d122:	4b2a      	ldr	r3, [pc, #168]	; (800d1cc <UART_SetConfig+0x934>)
 800d124:	681b      	ldr	r3, [r3, #0]
 800d126:	08db      	lsrs	r3, r3, #3
 800d128:	f003 0303 	and.w	r3, r3, #3
 800d12c:	4a24      	ldr	r2, [pc, #144]	; (800d1c0 <UART_SetConfig+0x928>)
 800d12e:	fa22 f303 	lsr.w	r3, r2, r3
 800d132:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800d134:	e00f      	b.n	800d156 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800d136:	4b22      	ldr	r3, [pc, #136]	; (800d1c0 <UART_SetConfig+0x928>)
 800d138:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d13a:	e00c      	b.n	800d156 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800d13c:	4b21      	ldr	r3, [pc, #132]	; (800d1c4 <UART_SetConfig+0x92c>)
 800d13e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d140:	e009      	b.n	800d156 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d142:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800d146:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d148:	e005      	b.n	800d156 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800d14a:	2300      	movs	r3, #0
 800d14c:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800d14e:	2301      	movs	r3, #1
 800d150:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800d154:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800d156:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d158:	2b00      	cmp	r3, #0
 800d15a:	f000 80e7 	beq.w	800d32c <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d15e:	697b      	ldr	r3, [r7, #20]
 800d160:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d162:	4a19      	ldr	r2, [pc, #100]	; (800d1c8 <UART_SetConfig+0x930>)
 800d164:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d168:	461a      	mov	r2, r3
 800d16a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d16c:	fbb3 f3f2 	udiv	r3, r3, r2
 800d170:	005a      	lsls	r2, r3, #1
 800d172:	697b      	ldr	r3, [r7, #20]
 800d174:	685b      	ldr	r3, [r3, #4]
 800d176:	085b      	lsrs	r3, r3, #1
 800d178:	441a      	add	r2, r3
 800d17a:	697b      	ldr	r3, [r7, #20]
 800d17c:	685b      	ldr	r3, [r3, #4]
 800d17e:	fbb2 f3f3 	udiv	r3, r2, r3
 800d182:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800d184:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d186:	2b0f      	cmp	r3, #15
 800d188:	d916      	bls.n	800d1b8 <UART_SetConfig+0x920>
 800d18a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d18c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d190:	d212      	bcs.n	800d1b8 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800d192:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d194:	b29b      	uxth	r3, r3
 800d196:	f023 030f 	bic.w	r3, r3, #15
 800d19a:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800d19c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d19e:	085b      	lsrs	r3, r3, #1
 800d1a0:	b29b      	uxth	r3, r3
 800d1a2:	f003 0307 	and.w	r3, r3, #7
 800d1a6:	b29a      	uxth	r2, r3
 800d1a8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800d1aa:	4313      	orrs	r3, r2
 800d1ac:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800d1ae:	697b      	ldr	r3, [r7, #20]
 800d1b0:	681b      	ldr	r3, [r3, #0]
 800d1b2:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800d1b4:	60da      	str	r2, [r3, #12]
 800d1b6:	e0b9      	b.n	800d32c <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800d1b8:	2301      	movs	r3, #1
 800d1ba:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800d1be:	e0b5      	b.n	800d32c <UART_SetConfig+0xa94>
 800d1c0:	03d09000 	.word	0x03d09000
 800d1c4:	003d0900 	.word	0x003d0900
 800d1c8:	0801224c 	.word	0x0801224c
 800d1cc:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800d1d0:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800d1d4:	2b20      	cmp	r3, #32
 800d1d6:	dc49      	bgt.n	800d26c <UART_SetConfig+0x9d4>
 800d1d8:	2b00      	cmp	r3, #0
 800d1da:	db7c      	blt.n	800d2d6 <UART_SetConfig+0xa3e>
 800d1dc:	2b20      	cmp	r3, #32
 800d1de:	d87a      	bhi.n	800d2d6 <UART_SetConfig+0xa3e>
 800d1e0:	a201      	add	r2, pc, #4	; (adr r2, 800d1e8 <UART_SetConfig+0x950>)
 800d1e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d1e6:	bf00      	nop
 800d1e8:	0800d273 	.word	0x0800d273
 800d1ec:	0800d27b 	.word	0x0800d27b
 800d1f0:	0800d2d7 	.word	0x0800d2d7
 800d1f4:	0800d2d7 	.word	0x0800d2d7
 800d1f8:	0800d283 	.word	0x0800d283
 800d1fc:	0800d2d7 	.word	0x0800d2d7
 800d200:	0800d2d7 	.word	0x0800d2d7
 800d204:	0800d2d7 	.word	0x0800d2d7
 800d208:	0800d293 	.word	0x0800d293
 800d20c:	0800d2d7 	.word	0x0800d2d7
 800d210:	0800d2d7 	.word	0x0800d2d7
 800d214:	0800d2d7 	.word	0x0800d2d7
 800d218:	0800d2d7 	.word	0x0800d2d7
 800d21c:	0800d2d7 	.word	0x0800d2d7
 800d220:	0800d2d7 	.word	0x0800d2d7
 800d224:	0800d2d7 	.word	0x0800d2d7
 800d228:	0800d2a3 	.word	0x0800d2a3
 800d22c:	0800d2d7 	.word	0x0800d2d7
 800d230:	0800d2d7 	.word	0x0800d2d7
 800d234:	0800d2d7 	.word	0x0800d2d7
 800d238:	0800d2d7 	.word	0x0800d2d7
 800d23c:	0800d2d7 	.word	0x0800d2d7
 800d240:	0800d2d7 	.word	0x0800d2d7
 800d244:	0800d2d7 	.word	0x0800d2d7
 800d248:	0800d2d7 	.word	0x0800d2d7
 800d24c:	0800d2d7 	.word	0x0800d2d7
 800d250:	0800d2d7 	.word	0x0800d2d7
 800d254:	0800d2d7 	.word	0x0800d2d7
 800d258:	0800d2d7 	.word	0x0800d2d7
 800d25c:	0800d2d7 	.word	0x0800d2d7
 800d260:	0800d2d7 	.word	0x0800d2d7
 800d264:	0800d2d7 	.word	0x0800d2d7
 800d268:	0800d2c9 	.word	0x0800d2c9
 800d26c:	2b40      	cmp	r3, #64	; 0x40
 800d26e:	d02e      	beq.n	800d2ce <UART_SetConfig+0xa36>
 800d270:	e031      	b.n	800d2d6 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800d272:	f7fb fadf 	bl	8008834 <HAL_RCC_GetPCLK1Freq>
 800d276:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800d278:	e033      	b.n	800d2e2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800d27a:	f7fb faf1 	bl	8008860 <HAL_RCC_GetPCLK2Freq>
 800d27e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800d280:	e02f      	b.n	800d2e2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d282:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800d286:	4618      	mov	r0, r3
 800d288:	f7fc fa5c 	bl	8009744 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800d28c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d28e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d290:	e027      	b.n	800d2e2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d292:	f107 0318 	add.w	r3, r7, #24
 800d296:	4618      	mov	r0, r3
 800d298:	f7fc fba8 	bl	80099ec <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800d29c:	69fb      	ldr	r3, [r7, #28]
 800d29e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d2a0:	e01f      	b.n	800d2e2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d2a2:	4b2d      	ldr	r3, [pc, #180]	; (800d358 <UART_SetConfig+0xac0>)
 800d2a4:	681b      	ldr	r3, [r3, #0]
 800d2a6:	f003 0320 	and.w	r3, r3, #32
 800d2aa:	2b00      	cmp	r3, #0
 800d2ac:	d009      	beq.n	800d2c2 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800d2ae:	4b2a      	ldr	r3, [pc, #168]	; (800d358 <UART_SetConfig+0xac0>)
 800d2b0:	681b      	ldr	r3, [r3, #0]
 800d2b2:	08db      	lsrs	r3, r3, #3
 800d2b4:	f003 0303 	and.w	r3, r3, #3
 800d2b8:	4a28      	ldr	r2, [pc, #160]	; (800d35c <UART_SetConfig+0xac4>)
 800d2ba:	fa22 f303 	lsr.w	r3, r2, r3
 800d2be:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800d2c0:	e00f      	b.n	800d2e2 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800d2c2:	4b26      	ldr	r3, [pc, #152]	; (800d35c <UART_SetConfig+0xac4>)
 800d2c4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d2c6:	e00c      	b.n	800d2e2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800d2c8:	4b25      	ldr	r3, [pc, #148]	; (800d360 <UART_SetConfig+0xac8>)
 800d2ca:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d2cc:	e009      	b.n	800d2e2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d2ce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800d2d2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d2d4:	e005      	b.n	800d2e2 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800d2d6:	2300      	movs	r3, #0
 800d2d8:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800d2da:	2301      	movs	r3, #1
 800d2dc:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800d2e0:	bf00      	nop
    }

    if (pclk != 0U)
 800d2e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d2e4:	2b00      	cmp	r3, #0
 800d2e6:	d021      	beq.n	800d32c <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d2e8:	697b      	ldr	r3, [r7, #20]
 800d2ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d2ec:	4a1d      	ldr	r2, [pc, #116]	; (800d364 <UART_SetConfig+0xacc>)
 800d2ee:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d2f2:	461a      	mov	r2, r3
 800d2f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d2f6:	fbb3 f2f2 	udiv	r2, r3, r2
 800d2fa:	697b      	ldr	r3, [r7, #20]
 800d2fc:	685b      	ldr	r3, [r3, #4]
 800d2fe:	085b      	lsrs	r3, r3, #1
 800d300:	441a      	add	r2, r3
 800d302:	697b      	ldr	r3, [r7, #20]
 800d304:	685b      	ldr	r3, [r3, #4]
 800d306:	fbb2 f3f3 	udiv	r3, r2, r3
 800d30a:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800d30c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d30e:	2b0f      	cmp	r3, #15
 800d310:	d909      	bls.n	800d326 <UART_SetConfig+0xa8e>
 800d312:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d314:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d318:	d205      	bcs.n	800d326 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800d31a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d31c:	b29a      	uxth	r2, r3
 800d31e:	697b      	ldr	r3, [r7, #20]
 800d320:	681b      	ldr	r3, [r3, #0]
 800d322:	60da      	str	r2, [r3, #12]
 800d324:	e002      	b.n	800d32c <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800d326:	2301      	movs	r3, #1
 800d328:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800d32c:	697b      	ldr	r3, [r7, #20]
 800d32e:	2201      	movs	r2, #1
 800d330:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800d334:	697b      	ldr	r3, [r7, #20]
 800d336:	2201      	movs	r2, #1
 800d338:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800d33c:	697b      	ldr	r3, [r7, #20]
 800d33e:	2200      	movs	r2, #0
 800d340:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800d342:	697b      	ldr	r3, [r7, #20]
 800d344:	2200      	movs	r2, #0
 800d346:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800d348:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800d34c:	4618      	mov	r0, r3
 800d34e:	3748      	adds	r7, #72	; 0x48
 800d350:	46bd      	mov	sp, r7
 800d352:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800d356:	bf00      	nop
 800d358:	58024400 	.word	0x58024400
 800d35c:	03d09000 	.word	0x03d09000
 800d360:	003d0900 	.word	0x003d0900
 800d364:	0801224c 	.word	0x0801224c

0800d368 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800d368:	b480      	push	{r7}
 800d36a:	b083      	sub	sp, #12
 800d36c:	af00      	add	r7, sp, #0
 800d36e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800d370:	687b      	ldr	r3, [r7, #4]
 800d372:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d374:	f003 0301 	and.w	r3, r3, #1
 800d378:	2b00      	cmp	r3, #0
 800d37a:	d00a      	beq.n	800d392 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800d37c:	687b      	ldr	r3, [r7, #4]
 800d37e:	681b      	ldr	r3, [r3, #0]
 800d380:	685b      	ldr	r3, [r3, #4]
 800d382:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800d386:	687b      	ldr	r3, [r7, #4]
 800d388:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d38a:	687b      	ldr	r3, [r7, #4]
 800d38c:	681b      	ldr	r3, [r3, #0]
 800d38e:	430a      	orrs	r2, r1
 800d390:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800d392:	687b      	ldr	r3, [r7, #4]
 800d394:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d396:	f003 0302 	and.w	r3, r3, #2
 800d39a:	2b00      	cmp	r3, #0
 800d39c:	d00a      	beq.n	800d3b4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800d39e:	687b      	ldr	r3, [r7, #4]
 800d3a0:	681b      	ldr	r3, [r3, #0]
 800d3a2:	685b      	ldr	r3, [r3, #4]
 800d3a4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800d3a8:	687b      	ldr	r3, [r7, #4]
 800d3aa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d3ac:	687b      	ldr	r3, [r7, #4]
 800d3ae:	681b      	ldr	r3, [r3, #0]
 800d3b0:	430a      	orrs	r2, r1
 800d3b2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800d3b4:	687b      	ldr	r3, [r7, #4]
 800d3b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d3b8:	f003 0304 	and.w	r3, r3, #4
 800d3bc:	2b00      	cmp	r3, #0
 800d3be:	d00a      	beq.n	800d3d6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800d3c0:	687b      	ldr	r3, [r7, #4]
 800d3c2:	681b      	ldr	r3, [r3, #0]
 800d3c4:	685b      	ldr	r3, [r3, #4]
 800d3c6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800d3ca:	687b      	ldr	r3, [r7, #4]
 800d3cc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d3ce:	687b      	ldr	r3, [r7, #4]
 800d3d0:	681b      	ldr	r3, [r3, #0]
 800d3d2:	430a      	orrs	r2, r1
 800d3d4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800d3d6:	687b      	ldr	r3, [r7, #4]
 800d3d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d3da:	f003 0308 	and.w	r3, r3, #8
 800d3de:	2b00      	cmp	r3, #0
 800d3e0:	d00a      	beq.n	800d3f8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800d3e2:	687b      	ldr	r3, [r7, #4]
 800d3e4:	681b      	ldr	r3, [r3, #0]
 800d3e6:	685b      	ldr	r3, [r3, #4]
 800d3e8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800d3ec:	687b      	ldr	r3, [r7, #4]
 800d3ee:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d3f0:	687b      	ldr	r3, [r7, #4]
 800d3f2:	681b      	ldr	r3, [r3, #0]
 800d3f4:	430a      	orrs	r2, r1
 800d3f6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800d3f8:	687b      	ldr	r3, [r7, #4]
 800d3fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d3fc:	f003 0310 	and.w	r3, r3, #16
 800d400:	2b00      	cmp	r3, #0
 800d402:	d00a      	beq.n	800d41a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800d404:	687b      	ldr	r3, [r7, #4]
 800d406:	681b      	ldr	r3, [r3, #0]
 800d408:	689b      	ldr	r3, [r3, #8]
 800d40a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800d40e:	687b      	ldr	r3, [r7, #4]
 800d410:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d412:	687b      	ldr	r3, [r7, #4]
 800d414:	681b      	ldr	r3, [r3, #0]
 800d416:	430a      	orrs	r2, r1
 800d418:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800d41a:	687b      	ldr	r3, [r7, #4]
 800d41c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d41e:	f003 0320 	and.w	r3, r3, #32
 800d422:	2b00      	cmp	r3, #0
 800d424:	d00a      	beq.n	800d43c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800d426:	687b      	ldr	r3, [r7, #4]
 800d428:	681b      	ldr	r3, [r3, #0]
 800d42a:	689b      	ldr	r3, [r3, #8]
 800d42c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800d430:	687b      	ldr	r3, [r7, #4]
 800d432:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800d434:	687b      	ldr	r3, [r7, #4]
 800d436:	681b      	ldr	r3, [r3, #0]
 800d438:	430a      	orrs	r2, r1
 800d43a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800d43c:	687b      	ldr	r3, [r7, #4]
 800d43e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d440:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d444:	2b00      	cmp	r3, #0
 800d446:	d01a      	beq.n	800d47e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800d448:	687b      	ldr	r3, [r7, #4]
 800d44a:	681b      	ldr	r3, [r3, #0]
 800d44c:	685b      	ldr	r3, [r3, #4]
 800d44e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800d452:	687b      	ldr	r3, [r7, #4]
 800d454:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d456:	687b      	ldr	r3, [r7, #4]
 800d458:	681b      	ldr	r3, [r3, #0]
 800d45a:	430a      	orrs	r2, r1
 800d45c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800d45e:	687b      	ldr	r3, [r7, #4]
 800d460:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d462:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d466:	d10a      	bne.n	800d47e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800d468:	687b      	ldr	r3, [r7, #4]
 800d46a:	681b      	ldr	r3, [r3, #0]
 800d46c:	685b      	ldr	r3, [r3, #4]
 800d46e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800d472:	687b      	ldr	r3, [r7, #4]
 800d474:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800d476:	687b      	ldr	r3, [r7, #4]
 800d478:	681b      	ldr	r3, [r3, #0]
 800d47a:	430a      	orrs	r2, r1
 800d47c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800d47e:	687b      	ldr	r3, [r7, #4]
 800d480:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d482:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d486:	2b00      	cmp	r3, #0
 800d488:	d00a      	beq.n	800d4a0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800d48a:	687b      	ldr	r3, [r7, #4]
 800d48c:	681b      	ldr	r3, [r3, #0]
 800d48e:	685b      	ldr	r3, [r3, #4]
 800d490:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800d494:	687b      	ldr	r3, [r7, #4]
 800d496:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800d498:	687b      	ldr	r3, [r7, #4]
 800d49a:	681b      	ldr	r3, [r3, #0]
 800d49c:	430a      	orrs	r2, r1
 800d49e:	605a      	str	r2, [r3, #4]
  }
}
 800d4a0:	bf00      	nop
 800d4a2:	370c      	adds	r7, #12
 800d4a4:	46bd      	mov	sp, r7
 800d4a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4aa:	4770      	bx	lr

0800d4ac <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800d4ac:	b580      	push	{r7, lr}
 800d4ae:	b086      	sub	sp, #24
 800d4b0:	af02      	add	r7, sp, #8
 800d4b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d4b4:	687b      	ldr	r3, [r7, #4]
 800d4b6:	2200      	movs	r2, #0
 800d4b8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800d4bc:	f7f9 f914 	bl	80066e8 <HAL_GetTick>
 800d4c0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800d4c2:	687b      	ldr	r3, [r7, #4]
 800d4c4:	681b      	ldr	r3, [r3, #0]
 800d4c6:	681b      	ldr	r3, [r3, #0]
 800d4c8:	f003 0308 	and.w	r3, r3, #8
 800d4cc:	2b08      	cmp	r3, #8
 800d4ce:	d10e      	bne.n	800d4ee <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800d4d0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800d4d4:	9300      	str	r3, [sp, #0]
 800d4d6:	68fb      	ldr	r3, [r7, #12]
 800d4d8:	2200      	movs	r2, #0
 800d4da:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800d4de:	6878      	ldr	r0, [r7, #4]
 800d4e0:	f000 f82f 	bl	800d542 <UART_WaitOnFlagUntilTimeout>
 800d4e4:	4603      	mov	r3, r0
 800d4e6:	2b00      	cmp	r3, #0
 800d4e8:	d001      	beq.n	800d4ee <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800d4ea:	2303      	movs	r3, #3
 800d4ec:	e025      	b.n	800d53a <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800d4ee:	687b      	ldr	r3, [r7, #4]
 800d4f0:	681b      	ldr	r3, [r3, #0]
 800d4f2:	681b      	ldr	r3, [r3, #0]
 800d4f4:	f003 0304 	and.w	r3, r3, #4
 800d4f8:	2b04      	cmp	r3, #4
 800d4fa:	d10e      	bne.n	800d51a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800d4fc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800d500:	9300      	str	r3, [sp, #0]
 800d502:	68fb      	ldr	r3, [r7, #12]
 800d504:	2200      	movs	r2, #0
 800d506:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800d50a:	6878      	ldr	r0, [r7, #4]
 800d50c:	f000 f819 	bl	800d542 <UART_WaitOnFlagUntilTimeout>
 800d510:	4603      	mov	r3, r0
 800d512:	2b00      	cmp	r3, #0
 800d514:	d001      	beq.n	800d51a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800d516:	2303      	movs	r3, #3
 800d518:	e00f      	b.n	800d53a <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800d51a:	687b      	ldr	r3, [r7, #4]
 800d51c:	2220      	movs	r2, #32
 800d51e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800d522:	687b      	ldr	r3, [r7, #4]
 800d524:	2220      	movs	r2, #32
 800d526:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d52a:	687b      	ldr	r3, [r7, #4]
 800d52c:	2200      	movs	r2, #0
 800d52e:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800d530:	687b      	ldr	r3, [r7, #4]
 800d532:	2200      	movs	r2, #0
 800d534:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800d538:	2300      	movs	r3, #0
}
 800d53a:	4618      	mov	r0, r3
 800d53c:	3710      	adds	r7, #16
 800d53e:	46bd      	mov	sp, r7
 800d540:	bd80      	pop	{r7, pc}

0800d542 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800d542:	b580      	push	{r7, lr}
 800d544:	b09c      	sub	sp, #112	; 0x70
 800d546:	af00      	add	r7, sp, #0
 800d548:	60f8      	str	r0, [r7, #12]
 800d54a:	60b9      	str	r1, [r7, #8]
 800d54c:	603b      	str	r3, [r7, #0]
 800d54e:	4613      	mov	r3, r2
 800d550:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d552:	e0a9      	b.n	800d6a8 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800d554:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d556:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d55a:	f000 80a5 	beq.w	800d6a8 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d55e:	f7f9 f8c3 	bl	80066e8 <HAL_GetTick>
 800d562:	4602      	mov	r2, r0
 800d564:	683b      	ldr	r3, [r7, #0]
 800d566:	1ad3      	subs	r3, r2, r3
 800d568:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800d56a:	429a      	cmp	r2, r3
 800d56c:	d302      	bcc.n	800d574 <UART_WaitOnFlagUntilTimeout+0x32>
 800d56e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d570:	2b00      	cmp	r3, #0
 800d572:	d140      	bne.n	800d5f6 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800d574:	68fb      	ldr	r3, [r7, #12]
 800d576:	681b      	ldr	r3, [r3, #0]
 800d578:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d57a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d57c:	e853 3f00 	ldrex	r3, [r3]
 800d580:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800d582:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d584:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800d588:	667b      	str	r3, [r7, #100]	; 0x64
 800d58a:	68fb      	ldr	r3, [r7, #12]
 800d58c:	681b      	ldr	r3, [r3, #0]
 800d58e:	461a      	mov	r2, r3
 800d590:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d592:	65fb      	str	r3, [r7, #92]	; 0x5c
 800d594:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d596:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800d598:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800d59a:	e841 2300 	strex	r3, r2, [r1]
 800d59e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800d5a0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d5a2:	2b00      	cmp	r3, #0
 800d5a4:	d1e6      	bne.n	800d574 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d5a6:	68fb      	ldr	r3, [r7, #12]
 800d5a8:	681b      	ldr	r3, [r3, #0]
 800d5aa:	3308      	adds	r3, #8
 800d5ac:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d5ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d5b0:	e853 3f00 	ldrex	r3, [r3]
 800d5b4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800d5b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d5b8:	f023 0301 	bic.w	r3, r3, #1
 800d5bc:	663b      	str	r3, [r7, #96]	; 0x60
 800d5be:	68fb      	ldr	r3, [r7, #12]
 800d5c0:	681b      	ldr	r3, [r3, #0]
 800d5c2:	3308      	adds	r3, #8
 800d5c4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800d5c6:	64ba      	str	r2, [r7, #72]	; 0x48
 800d5c8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d5ca:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800d5cc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d5ce:	e841 2300 	strex	r3, r2, [r1]
 800d5d2:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800d5d4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d5d6:	2b00      	cmp	r3, #0
 800d5d8:	d1e5      	bne.n	800d5a6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800d5da:	68fb      	ldr	r3, [r7, #12]
 800d5dc:	2220      	movs	r2, #32
 800d5de:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800d5e2:	68fb      	ldr	r3, [r7, #12]
 800d5e4:	2220      	movs	r2, #32
 800d5e6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800d5ea:	68fb      	ldr	r3, [r7, #12]
 800d5ec:	2200      	movs	r2, #0
 800d5ee:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800d5f2:	2303      	movs	r3, #3
 800d5f4:	e069      	b.n	800d6ca <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800d5f6:	68fb      	ldr	r3, [r7, #12]
 800d5f8:	681b      	ldr	r3, [r3, #0]
 800d5fa:	681b      	ldr	r3, [r3, #0]
 800d5fc:	f003 0304 	and.w	r3, r3, #4
 800d600:	2b00      	cmp	r3, #0
 800d602:	d051      	beq.n	800d6a8 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800d604:	68fb      	ldr	r3, [r7, #12]
 800d606:	681b      	ldr	r3, [r3, #0]
 800d608:	69db      	ldr	r3, [r3, #28]
 800d60a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800d60e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800d612:	d149      	bne.n	800d6a8 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800d614:	68fb      	ldr	r3, [r7, #12]
 800d616:	681b      	ldr	r3, [r3, #0]
 800d618:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800d61c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800d61e:	68fb      	ldr	r3, [r7, #12]
 800d620:	681b      	ldr	r3, [r3, #0]
 800d622:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d624:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d626:	e853 3f00 	ldrex	r3, [r3]
 800d62a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800d62c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d62e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800d632:	66fb      	str	r3, [r7, #108]	; 0x6c
 800d634:	68fb      	ldr	r3, [r7, #12]
 800d636:	681b      	ldr	r3, [r3, #0]
 800d638:	461a      	mov	r2, r3
 800d63a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d63c:	637b      	str	r3, [r7, #52]	; 0x34
 800d63e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d640:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800d642:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d644:	e841 2300 	strex	r3, r2, [r1]
 800d648:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800d64a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d64c:	2b00      	cmp	r3, #0
 800d64e:	d1e6      	bne.n	800d61e <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d650:	68fb      	ldr	r3, [r7, #12]
 800d652:	681b      	ldr	r3, [r3, #0]
 800d654:	3308      	adds	r3, #8
 800d656:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d658:	697b      	ldr	r3, [r7, #20]
 800d65a:	e853 3f00 	ldrex	r3, [r3]
 800d65e:	613b      	str	r3, [r7, #16]
   return(result);
 800d660:	693b      	ldr	r3, [r7, #16]
 800d662:	f023 0301 	bic.w	r3, r3, #1
 800d666:	66bb      	str	r3, [r7, #104]	; 0x68
 800d668:	68fb      	ldr	r3, [r7, #12]
 800d66a:	681b      	ldr	r3, [r3, #0]
 800d66c:	3308      	adds	r3, #8
 800d66e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800d670:	623a      	str	r2, [r7, #32]
 800d672:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d674:	69f9      	ldr	r1, [r7, #28]
 800d676:	6a3a      	ldr	r2, [r7, #32]
 800d678:	e841 2300 	strex	r3, r2, [r1]
 800d67c:	61bb      	str	r3, [r7, #24]
   return(result);
 800d67e:	69bb      	ldr	r3, [r7, #24]
 800d680:	2b00      	cmp	r3, #0
 800d682:	d1e5      	bne.n	800d650 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800d684:	68fb      	ldr	r3, [r7, #12]
 800d686:	2220      	movs	r2, #32
 800d688:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800d68c:	68fb      	ldr	r3, [r7, #12]
 800d68e:	2220      	movs	r2, #32
 800d690:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800d694:	68fb      	ldr	r3, [r7, #12]
 800d696:	2220      	movs	r2, #32
 800d698:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800d69c:	68fb      	ldr	r3, [r7, #12]
 800d69e:	2200      	movs	r2, #0
 800d6a0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800d6a4:	2303      	movs	r3, #3
 800d6a6:	e010      	b.n	800d6ca <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d6a8:	68fb      	ldr	r3, [r7, #12]
 800d6aa:	681b      	ldr	r3, [r3, #0]
 800d6ac:	69da      	ldr	r2, [r3, #28]
 800d6ae:	68bb      	ldr	r3, [r7, #8]
 800d6b0:	4013      	ands	r3, r2
 800d6b2:	68ba      	ldr	r2, [r7, #8]
 800d6b4:	429a      	cmp	r2, r3
 800d6b6:	bf0c      	ite	eq
 800d6b8:	2301      	moveq	r3, #1
 800d6ba:	2300      	movne	r3, #0
 800d6bc:	b2db      	uxtb	r3, r3
 800d6be:	461a      	mov	r2, r3
 800d6c0:	79fb      	ldrb	r3, [r7, #7]
 800d6c2:	429a      	cmp	r2, r3
 800d6c4:	f43f af46 	beq.w	800d554 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800d6c8:	2300      	movs	r3, #0
}
 800d6ca:	4618      	mov	r0, r3
 800d6cc:	3770      	adds	r7, #112	; 0x70
 800d6ce:	46bd      	mov	sp, r7
 800d6d0:	bd80      	pop	{r7, pc}
	...

0800d6d4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800d6d4:	b480      	push	{r7}
 800d6d6:	b0a3      	sub	sp, #140	; 0x8c
 800d6d8:	af00      	add	r7, sp, #0
 800d6da:	60f8      	str	r0, [r7, #12]
 800d6dc:	60b9      	str	r1, [r7, #8]
 800d6de:	4613      	mov	r3, r2
 800d6e0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800d6e2:	68fb      	ldr	r3, [r7, #12]
 800d6e4:	68ba      	ldr	r2, [r7, #8]
 800d6e6:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 800d6e8:	68fb      	ldr	r3, [r7, #12]
 800d6ea:	88fa      	ldrh	r2, [r7, #6]
 800d6ec:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 800d6f0:	68fb      	ldr	r3, [r7, #12]
 800d6f2:	88fa      	ldrh	r2, [r7, #6]
 800d6f4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 800d6f8:	68fb      	ldr	r3, [r7, #12]
 800d6fa:	2200      	movs	r2, #0
 800d6fc:	671a      	str	r2, [r3, #112]	; 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800d6fe:	68fb      	ldr	r3, [r7, #12]
 800d700:	689b      	ldr	r3, [r3, #8]
 800d702:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d706:	d10e      	bne.n	800d726 <UART_Start_Receive_IT+0x52>
 800d708:	68fb      	ldr	r3, [r7, #12]
 800d70a:	691b      	ldr	r3, [r3, #16]
 800d70c:	2b00      	cmp	r3, #0
 800d70e:	d105      	bne.n	800d71c <UART_Start_Receive_IT+0x48>
 800d710:	68fb      	ldr	r3, [r7, #12]
 800d712:	f240 12ff 	movw	r2, #511	; 0x1ff
 800d716:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800d71a:	e02d      	b.n	800d778 <UART_Start_Receive_IT+0xa4>
 800d71c:	68fb      	ldr	r3, [r7, #12]
 800d71e:	22ff      	movs	r2, #255	; 0xff
 800d720:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800d724:	e028      	b.n	800d778 <UART_Start_Receive_IT+0xa4>
 800d726:	68fb      	ldr	r3, [r7, #12]
 800d728:	689b      	ldr	r3, [r3, #8]
 800d72a:	2b00      	cmp	r3, #0
 800d72c:	d10d      	bne.n	800d74a <UART_Start_Receive_IT+0x76>
 800d72e:	68fb      	ldr	r3, [r7, #12]
 800d730:	691b      	ldr	r3, [r3, #16]
 800d732:	2b00      	cmp	r3, #0
 800d734:	d104      	bne.n	800d740 <UART_Start_Receive_IT+0x6c>
 800d736:	68fb      	ldr	r3, [r7, #12]
 800d738:	22ff      	movs	r2, #255	; 0xff
 800d73a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800d73e:	e01b      	b.n	800d778 <UART_Start_Receive_IT+0xa4>
 800d740:	68fb      	ldr	r3, [r7, #12]
 800d742:	227f      	movs	r2, #127	; 0x7f
 800d744:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800d748:	e016      	b.n	800d778 <UART_Start_Receive_IT+0xa4>
 800d74a:	68fb      	ldr	r3, [r7, #12]
 800d74c:	689b      	ldr	r3, [r3, #8]
 800d74e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800d752:	d10d      	bne.n	800d770 <UART_Start_Receive_IT+0x9c>
 800d754:	68fb      	ldr	r3, [r7, #12]
 800d756:	691b      	ldr	r3, [r3, #16]
 800d758:	2b00      	cmp	r3, #0
 800d75a:	d104      	bne.n	800d766 <UART_Start_Receive_IT+0x92>
 800d75c:	68fb      	ldr	r3, [r7, #12]
 800d75e:	227f      	movs	r2, #127	; 0x7f
 800d760:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800d764:	e008      	b.n	800d778 <UART_Start_Receive_IT+0xa4>
 800d766:	68fb      	ldr	r3, [r7, #12]
 800d768:	223f      	movs	r2, #63	; 0x3f
 800d76a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800d76e:	e003      	b.n	800d778 <UART_Start_Receive_IT+0xa4>
 800d770:	68fb      	ldr	r3, [r7, #12]
 800d772:	2200      	movs	r2, #0
 800d774:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d778:	68fb      	ldr	r3, [r7, #12]
 800d77a:	2200      	movs	r2, #0
 800d77c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800d780:	68fb      	ldr	r3, [r7, #12]
 800d782:	2222      	movs	r2, #34	; 0x22
 800d784:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d788:	68fb      	ldr	r3, [r7, #12]
 800d78a:	681b      	ldr	r3, [r3, #0]
 800d78c:	3308      	adds	r3, #8
 800d78e:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d790:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d792:	e853 3f00 	ldrex	r3, [r3]
 800d796:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 800d798:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d79a:	f043 0301 	orr.w	r3, r3, #1
 800d79e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800d7a2:	68fb      	ldr	r3, [r7, #12]
 800d7a4:	681b      	ldr	r3, [r3, #0]
 800d7a6:	3308      	adds	r3, #8
 800d7a8:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800d7ac:	673a      	str	r2, [r7, #112]	; 0x70
 800d7ae:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d7b0:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800d7b2:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800d7b4:	e841 2300 	strex	r3, r2, [r1]
 800d7b8:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 800d7ba:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800d7bc:	2b00      	cmp	r3, #0
 800d7be:	d1e3      	bne.n	800d788 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800d7c0:	68fb      	ldr	r3, [r7, #12]
 800d7c2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d7c4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800d7c8:	d153      	bne.n	800d872 <UART_Start_Receive_IT+0x19e>
 800d7ca:	68fb      	ldr	r3, [r7, #12]
 800d7cc:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800d7d0:	88fa      	ldrh	r2, [r7, #6]
 800d7d2:	429a      	cmp	r2, r3
 800d7d4:	d34d      	bcc.n	800d872 <UART_Start_Receive_IT+0x19e>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800d7d6:	68fb      	ldr	r3, [r7, #12]
 800d7d8:	689b      	ldr	r3, [r3, #8]
 800d7da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d7de:	d107      	bne.n	800d7f0 <UART_Start_Receive_IT+0x11c>
 800d7e0:	68fb      	ldr	r3, [r7, #12]
 800d7e2:	691b      	ldr	r3, [r3, #16]
 800d7e4:	2b00      	cmp	r3, #0
 800d7e6:	d103      	bne.n	800d7f0 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800d7e8:	68fb      	ldr	r3, [r7, #12]
 800d7ea:	4a4b      	ldr	r2, [pc, #300]	; (800d918 <UART_Start_Receive_IT+0x244>)
 800d7ec:	671a      	str	r2, [r3, #112]	; 0x70
 800d7ee:	e002      	b.n	800d7f6 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800d7f0:	68fb      	ldr	r3, [r7, #12]
 800d7f2:	4a4a      	ldr	r2, [pc, #296]	; (800d91c <UART_Start_Receive_IT+0x248>)
 800d7f4:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 800d7f6:	68fb      	ldr	r3, [r7, #12]
 800d7f8:	2200      	movs	r2, #0
 800d7fa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800d7fe:	68fb      	ldr	r3, [r7, #12]
 800d800:	691b      	ldr	r3, [r3, #16]
 800d802:	2b00      	cmp	r3, #0
 800d804:	d01a      	beq.n	800d83c <UART_Start_Receive_IT+0x168>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800d806:	68fb      	ldr	r3, [r7, #12]
 800d808:	681b      	ldr	r3, [r3, #0]
 800d80a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d80c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d80e:	e853 3f00 	ldrex	r3, [r3]
 800d812:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800d814:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d816:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d81a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800d81e:	68fb      	ldr	r3, [r7, #12]
 800d820:	681b      	ldr	r3, [r3, #0]
 800d822:	461a      	mov	r2, r3
 800d824:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800d828:	65fb      	str	r3, [r7, #92]	; 0x5c
 800d82a:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d82c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800d82e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800d830:	e841 2300 	strex	r3, r2, [r1]
 800d834:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800d836:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d838:	2b00      	cmp	r3, #0
 800d83a:	d1e4      	bne.n	800d806 <UART_Start_Receive_IT+0x132>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800d83c:	68fb      	ldr	r3, [r7, #12]
 800d83e:	681b      	ldr	r3, [r3, #0]
 800d840:	3308      	adds	r3, #8
 800d842:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d844:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d846:	e853 3f00 	ldrex	r3, [r3]
 800d84a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800d84c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d84e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d852:	67fb      	str	r3, [r7, #124]	; 0x7c
 800d854:	68fb      	ldr	r3, [r7, #12]
 800d856:	681b      	ldr	r3, [r3, #0]
 800d858:	3308      	adds	r3, #8
 800d85a:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800d85c:	64ba      	str	r2, [r7, #72]	; 0x48
 800d85e:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d860:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800d862:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d864:	e841 2300 	strex	r3, r2, [r1]
 800d868:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800d86a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d86c:	2b00      	cmp	r3, #0
 800d86e:	d1e5      	bne.n	800d83c <UART_Start_Receive_IT+0x168>
 800d870:	e04a      	b.n	800d908 <UART_Start_Receive_IT+0x234>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800d872:	68fb      	ldr	r3, [r7, #12]
 800d874:	689b      	ldr	r3, [r3, #8]
 800d876:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d87a:	d107      	bne.n	800d88c <UART_Start_Receive_IT+0x1b8>
 800d87c:	68fb      	ldr	r3, [r7, #12]
 800d87e:	691b      	ldr	r3, [r3, #16]
 800d880:	2b00      	cmp	r3, #0
 800d882:	d103      	bne.n	800d88c <UART_Start_Receive_IT+0x1b8>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800d884:	68fb      	ldr	r3, [r7, #12]
 800d886:	4a26      	ldr	r2, [pc, #152]	; (800d920 <UART_Start_Receive_IT+0x24c>)
 800d888:	671a      	str	r2, [r3, #112]	; 0x70
 800d88a:	e002      	b.n	800d892 <UART_Start_Receive_IT+0x1be>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800d88c:	68fb      	ldr	r3, [r7, #12]
 800d88e:	4a25      	ldr	r2, [pc, #148]	; (800d924 <UART_Start_Receive_IT+0x250>)
 800d890:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 800d892:	68fb      	ldr	r3, [r7, #12]
 800d894:	2200      	movs	r2, #0
 800d896:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800d89a:	68fb      	ldr	r3, [r7, #12]
 800d89c:	691b      	ldr	r3, [r3, #16]
 800d89e:	2b00      	cmp	r3, #0
 800d8a0:	d019      	beq.n	800d8d6 <UART_Start_Receive_IT+0x202>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800d8a2:	68fb      	ldr	r3, [r7, #12]
 800d8a4:	681b      	ldr	r3, [r3, #0]
 800d8a6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d8a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d8aa:	e853 3f00 	ldrex	r3, [r3]
 800d8ae:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800d8b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d8b2:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800d8b6:	677b      	str	r3, [r7, #116]	; 0x74
 800d8b8:	68fb      	ldr	r3, [r7, #12]
 800d8ba:	681b      	ldr	r3, [r3, #0]
 800d8bc:	461a      	mov	r2, r3
 800d8be:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d8c0:	637b      	str	r3, [r7, #52]	; 0x34
 800d8c2:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d8c4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800d8c6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d8c8:	e841 2300 	strex	r3, r2, [r1]
 800d8cc:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800d8ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d8d0:	2b00      	cmp	r3, #0
 800d8d2:	d1e6      	bne.n	800d8a2 <UART_Start_Receive_IT+0x1ce>
 800d8d4:	e018      	b.n	800d908 <UART_Start_Receive_IT+0x234>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800d8d6:	68fb      	ldr	r3, [r7, #12]
 800d8d8:	681b      	ldr	r3, [r3, #0]
 800d8da:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d8dc:	697b      	ldr	r3, [r7, #20]
 800d8de:	e853 3f00 	ldrex	r3, [r3]
 800d8e2:	613b      	str	r3, [r7, #16]
   return(result);
 800d8e4:	693b      	ldr	r3, [r7, #16]
 800d8e6:	f043 0320 	orr.w	r3, r3, #32
 800d8ea:	67bb      	str	r3, [r7, #120]	; 0x78
 800d8ec:	68fb      	ldr	r3, [r7, #12]
 800d8ee:	681b      	ldr	r3, [r3, #0]
 800d8f0:	461a      	mov	r2, r3
 800d8f2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d8f4:	623b      	str	r3, [r7, #32]
 800d8f6:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d8f8:	69f9      	ldr	r1, [r7, #28]
 800d8fa:	6a3a      	ldr	r2, [r7, #32]
 800d8fc:	e841 2300 	strex	r3, r2, [r1]
 800d900:	61bb      	str	r3, [r7, #24]
   return(result);
 800d902:	69bb      	ldr	r3, [r7, #24]
 800d904:	2b00      	cmp	r3, #0
 800d906:	d1e6      	bne.n	800d8d6 <UART_Start_Receive_IT+0x202>
    }
  }
  return HAL_OK;
 800d908:	2300      	movs	r3, #0
}
 800d90a:	4618      	mov	r0, r3
 800d90c:	378c      	adds	r7, #140	; 0x8c
 800d90e:	46bd      	mov	sp, r7
 800d910:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d914:	4770      	bx	lr
 800d916:	bf00      	nop
 800d918:	0800e031 	.word	0x0800e031
 800d91c:	0800dd39 	.word	0x0800dd39
 800d920:	0800dbd7 	.word	0x0800dbd7
 800d924:	0800da77 	.word	0x0800da77

0800d928 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800d928:	b480      	push	{r7}
 800d92a:	b095      	sub	sp, #84	; 0x54
 800d92c:	af00      	add	r7, sp, #0
 800d92e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800d930:	687b      	ldr	r3, [r7, #4]
 800d932:	681b      	ldr	r3, [r3, #0]
 800d934:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d936:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d938:	e853 3f00 	ldrex	r3, [r3]
 800d93c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800d93e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d940:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800d944:	64fb      	str	r3, [r7, #76]	; 0x4c
 800d946:	687b      	ldr	r3, [r7, #4]
 800d948:	681b      	ldr	r3, [r3, #0]
 800d94a:	461a      	mov	r2, r3
 800d94c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d94e:	643b      	str	r3, [r7, #64]	; 0x40
 800d950:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d952:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800d954:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800d956:	e841 2300 	strex	r3, r2, [r1]
 800d95a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800d95c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d95e:	2b00      	cmp	r3, #0
 800d960:	d1e6      	bne.n	800d930 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800d962:	687b      	ldr	r3, [r7, #4]
 800d964:	681b      	ldr	r3, [r3, #0]
 800d966:	3308      	adds	r3, #8
 800d968:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d96a:	6a3b      	ldr	r3, [r7, #32]
 800d96c:	e853 3f00 	ldrex	r3, [r3]
 800d970:	61fb      	str	r3, [r7, #28]
   return(result);
 800d972:	69fa      	ldr	r2, [r7, #28]
 800d974:	4b1e      	ldr	r3, [pc, #120]	; (800d9f0 <UART_EndRxTransfer+0xc8>)
 800d976:	4013      	ands	r3, r2
 800d978:	64bb      	str	r3, [r7, #72]	; 0x48
 800d97a:	687b      	ldr	r3, [r7, #4]
 800d97c:	681b      	ldr	r3, [r3, #0]
 800d97e:	3308      	adds	r3, #8
 800d980:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d982:	62fa      	str	r2, [r7, #44]	; 0x2c
 800d984:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d986:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d988:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d98a:	e841 2300 	strex	r3, r2, [r1]
 800d98e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800d990:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d992:	2b00      	cmp	r3, #0
 800d994:	d1e5      	bne.n	800d962 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d996:	687b      	ldr	r3, [r7, #4]
 800d998:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d99a:	2b01      	cmp	r3, #1
 800d99c:	d118      	bne.n	800d9d0 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d99e:	687b      	ldr	r3, [r7, #4]
 800d9a0:	681b      	ldr	r3, [r3, #0]
 800d9a2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d9a4:	68fb      	ldr	r3, [r7, #12]
 800d9a6:	e853 3f00 	ldrex	r3, [r3]
 800d9aa:	60bb      	str	r3, [r7, #8]
   return(result);
 800d9ac:	68bb      	ldr	r3, [r7, #8]
 800d9ae:	f023 0310 	bic.w	r3, r3, #16
 800d9b2:	647b      	str	r3, [r7, #68]	; 0x44
 800d9b4:	687b      	ldr	r3, [r7, #4]
 800d9b6:	681b      	ldr	r3, [r3, #0]
 800d9b8:	461a      	mov	r2, r3
 800d9ba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d9bc:	61bb      	str	r3, [r7, #24]
 800d9be:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d9c0:	6979      	ldr	r1, [r7, #20]
 800d9c2:	69ba      	ldr	r2, [r7, #24]
 800d9c4:	e841 2300 	strex	r3, r2, [r1]
 800d9c8:	613b      	str	r3, [r7, #16]
   return(result);
 800d9ca:	693b      	ldr	r3, [r7, #16]
 800d9cc:	2b00      	cmp	r3, #0
 800d9ce:	d1e6      	bne.n	800d99e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800d9d0:	687b      	ldr	r3, [r7, #4]
 800d9d2:	2220      	movs	r2, #32
 800d9d4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d9d8:	687b      	ldr	r3, [r7, #4]
 800d9da:	2200      	movs	r2, #0
 800d9dc:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800d9de:	687b      	ldr	r3, [r7, #4]
 800d9e0:	2200      	movs	r2, #0
 800d9e2:	671a      	str	r2, [r3, #112]	; 0x70
}
 800d9e4:	bf00      	nop
 800d9e6:	3754      	adds	r7, #84	; 0x54
 800d9e8:	46bd      	mov	sp, r7
 800d9ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9ee:	4770      	bx	lr
 800d9f0:	effffffe 	.word	0xeffffffe

0800d9f4 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800d9f4:	b580      	push	{r7, lr}
 800d9f6:	b084      	sub	sp, #16
 800d9f8:	af00      	add	r7, sp, #0
 800d9fa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800d9fc:	687b      	ldr	r3, [r7, #4]
 800d9fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800da00:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800da02:	68fb      	ldr	r3, [r7, #12]
 800da04:	2200      	movs	r2, #0
 800da06:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800da0a:	68fb      	ldr	r3, [r7, #12]
 800da0c:	2200      	movs	r2, #0
 800da0e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800da12:	68f8      	ldr	r0, [r7, #12]
 800da14:	f7fe ff2a 	bl	800c86c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800da18:	bf00      	nop
 800da1a:	3710      	adds	r7, #16
 800da1c:	46bd      	mov	sp, r7
 800da1e:	bd80      	pop	{r7, pc}

0800da20 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800da20:	b580      	push	{r7, lr}
 800da22:	b088      	sub	sp, #32
 800da24:	af00      	add	r7, sp, #0
 800da26:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800da28:	687b      	ldr	r3, [r7, #4]
 800da2a:	681b      	ldr	r3, [r3, #0]
 800da2c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800da2e:	68fb      	ldr	r3, [r7, #12]
 800da30:	e853 3f00 	ldrex	r3, [r3]
 800da34:	60bb      	str	r3, [r7, #8]
   return(result);
 800da36:	68bb      	ldr	r3, [r7, #8]
 800da38:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800da3c:	61fb      	str	r3, [r7, #28]
 800da3e:	687b      	ldr	r3, [r7, #4]
 800da40:	681b      	ldr	r3, [r3, #0]
 800da42:	461a      	mov	r2, r3
 800da44:	69fb      	ldr	r3, [r7, #28]
 800da46:	61bb      	str	r3, [r7, #24]
 800da48:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800da4a:	6979      	ldr	r1, [r7, #20]
 800da4c:	69ba      	ldr	r2, [r7, #24]
 800da4e:	e841 2300 	strex	r3, r2, [r1]
 800da52:	613b      	str	r3, [r7, #16]
   return(result);
 800da54:	693b      	ldr	r3, [r7, #16]
 800da56:	2b00      	cmp	r3, #0
 800da58:	d1e6      	bne.n	800da28 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800da5a:	687b      	ldr	r3, [r7, #4]
 800da5c:	2220      	movs	r2, #32
 800da5e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800da62:	687b      	ldr	r3, [r7, #4]
 800da64:	2200      	movs	r2, #0
 800da66:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800da68:	6878      	ldr	r0, [r7, #4]
 800da6a:	f7f5 f843 	bl	8002af4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800da6e:	bf00      	nop
 800da70:	3720      	adds	r7, #32
 800da72:	46bd      	mov	sp, r7
 800da74:	bd80      	pop	{r7, pc}

0800da76 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800da76:	b580      	push	{r7, lr}
 800da78:	b096      	sub	sp, #88	; 0x58
 800da7a:	af00      	add	r7, sp, #0
 800da7c:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800da7e:	687b      	ldr	r3, [r7, #4]
 800da80:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800da84:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800da88:	687b      	ldr	r3, [r7, #4]
 800da8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800da8e:	2b22      	cmp	r3, #34	; 0x22
 800da90:	f040 8095 	bne.w	800dbbe <UART_RxISR_8BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800da94:	687b      	ldr	r3, [r7, #4]
 800da96:	681b      	ldr	r3, [r3, #0]
 800da98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800da9a:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800da9e:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 800daa2:	b2d9      	uxtb	r1, r3
 800daa4:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800daa8:	b2da      	uxtb	r2, r3
 800daaa:	687b      	ldr	r3, [r7, #4]
 800daac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800daae:	400a      	ands	r2, r1
 800dab0:	b2d2      	uxtb	r2, r2
 800dab2:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800dab4:	687b      	ldr	r3, [r7, #4]
 800dab6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800dab8:	1c5a      	adds	r2, r3, #1
 800daba:	687b      	ldr	r3, [r7, #4]
 800dabc:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800dabe:	687b      	ldr	r3, [r7, #4]
 800dac0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800dac4:	b29b      	uxth	r3, r3
 800dac6:	3b01      	subs	r3, #1
 800dac8:	b29a      	uxth	r2, r3
 800daca:	687b      	ldr	r3, [r7, #4]
 800dacc:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800dad0:	687b      	ldr	r3, [r7, #4]
 800dad2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800dad6:	b29b      	uxth	r3, r3
 800dad8:	2b00      	cmp	r3, #0
 800dada:	d178      	bne.n	800dbce <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800dadc:	687b      	ldr	r3, [r7, #4]
 800dade:	681b      	ldr	r3, [r3, #0]
 800dae0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dae2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dae4:	e853 3f00 	ldrex	r3, [r3]
 800dae8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800daea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800daec:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800daf0:	653b      	str	r3, [r7, #80]	; 0x50
 800daf2:	687b      	ldr	r3, [r7, #4]
 800daf4:	681b      	ldr	r3, [r3, #0]
 800daf6:	461a      	mov	r2, r3
 800daf8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800dafa:	647b      	str	r3, [r7, #68]	; 0x44
 800dafc:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dafe:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800db00:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800db02:	e841 2300 	strex	r3, r2, [r1]
 800db06:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800db08:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800db0a:	2b00      	cmp	r3, #0
 800db0c:	d1e6      	bne.n	800dadc <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800db0e:	687b      	ldr	r3, [r7, #4]
 800db10:	681b      	ldr	r3, [r3, #0]
 800db12:	3308      	adds	r3, #8
 800db14:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800db16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db18:	e853 3f00 	ldrex	r3, [r3]
 800db1c:	623b      	str	r3, [r7, #32]
   return(result);
 800db1e:	6a3b      	ldr	r3, [r7, #32]
 800db20:	f023 0301 	bic.w	r3, r3, #1
 800db24:	64fb      	str	r3, [r7, #76]	; 0x4c
 800db26:	687b      	ldr	r3, [r7, #4]
 800db28:	681b      	ldr	r3, [r3, #0]
 800db2a:	3308      	adds	r3, #8
 800db2c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800db2e:	633a      	str	r2, [r7, #48]	; 0x30
 800db30:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800db32:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800db34:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800db36:	e841 2300 	strex	r3, r2, [r1]
 800db3a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800db3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800db3e:	2b00      	cmp	r3, #0
 800db40:	d1e5      	bne.n	800db0e <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800db42:	687b      	ldr	r3, [r7, #4]
 800db44:	2220      	movs	r2, #32
 800db46:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800db4a:	687b      	ldr	r3, [r7, #4]
 800db4c:	2200      	movs	r2, #0
 800db4e:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800db50:	687b      	ldr	r3, [r7, #4]
 800db52:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800db54:	2b01      	cmp	r3, #1
 800db56:	d12e      	bne.n	800dbb6 <UART_RxISR_8BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800db58:	687b      	ldr	r3, [r7, #4]
 800db5a:	2200      	movs	r2, #0
 800db5c:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800db5e:	687b      	ldr	r3, [r7, #4]
 800db60:	681b      	ldr	r3, [r3, #0]
 800db62:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800db64:	693b      	ldr	r3, [r7, #16]
 800db66:	e853 3f00 	ldrex	r3, [r3]
 800db6a:	60fb      	str	r3, [r7, #12]
   return(result);
 800db6c:	68fb      	ldr	r3, [r7, #12]
 800db6e:	f023 0310 	bic.w	r3, r3, #16
 800db72:	64bb      	str	r3, [r7, #72]	; 0x48
 800db74:	687b      	ldr	r3, [r7, #4]
 800db76:	681b      	ldr	r3, [r3, #0]
 800db78:	461a      	mov	r2, r3
 800db7a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800db7c:	61fb      	str	r3, [r7, #28]
 800db7e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800db80:	69b9      	ldr	r1, [r7, #24]
 800db82:	69fa      	ldr	r2, [r7, #28]
 800db84:	e841 2300 	strex	r3, r2, [r1]
 800db88:	617b      	str	r3, [r7, #20]
   return(result);
 800db8a:	697b      	ldr	r3, [r7, #20]
 800db8c:	2b00      	cmp	r3, #0
 800db8e:	d1e6      	bne.n	800db5e <UART_RxISR_8BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800db90:	687b      	ldr	r3, [r7, #4]
 800db92:	681b      	ldr	r3, [r3, #0]
 800db94:	69db      	ldr	r3, [r3, #28]
 800db96:	f003 0310 	and.w	r3, r3, #16
 800db9a:	2b10      	cmp	r3, #16
 800db9c:	d103      	bne.n	800dba6 <UART_RxISR_8BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800db9e:	687b      	ldr	r3, [r7, #4]
 800dba0:	681b      	ldr	r3, [r3, #0]
 800dba2:	2210      	movs	r2, #16
 800dba4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800dba6:	687b      	ldr	r3, [r7, #4]
 800dba8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800dbac:	4619      	mov	r1, r3
 800dbae:	6878      	ldr	r0, [r7, #4]
 800dbb0:	f7fe fe66 	bl	800c880 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800dbb4:	e00b      	b.n	800dbce <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 800dbb6:	6878      	ldr	r0, [r7, #4]
 800dbb8:	f7f4 ff28 	bl	8002a0c <HAL_UART_RxCpltCallback>
}
 800dbbc:	e007      	b.n	800dbce <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800dbbe:	687b      	ldr	r3, [r7, #4]
 800dbc0:	681b      	ldr	r3, [r3, #0]
 800dbc2:	699a      	ldr	r2, [r3, #24]
 800dbc4:	687b      	ldr	r3, [r7, #4]
 800dbc6:	681b      	ldr	r3, [r3, #0]
 800dbc8:	f042 0208 	orr.w	r2, r2, #8
 800dbcc:	619a      	str	r2, [r3, #24]
}
 800dbce:	bf00      	nop
 800dbd0:	3758      	adds	r7, #88	; 0x58
 800dbd2:	46bd      	mov	sp, r7
 800dbd4:	bd80      	pop	{r7, pc}

0800dbd6 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800dbd6:	b580      	push	{r7, lr}
 800dbd8:	b096      	sub	sp, #88	; 0x58
 800dbda:	af00      	add	r7, sp, #0
 800dbdc:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800dbde:	687b      	ldr	r3, [r7, #4]
 800dbe0:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800dbe4:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800dbe8:	687b      	ldr	r3, [r7, #4]
 800dbea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800dbee:	2b22      	cmp	r3, #34	; 0x22
 800dbf0:	f040 8095 	bne.w	800dd1e <UART_RxISR_16BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800dbf4:	687b      	ldr	r3, [r7, #4]
 800dbf6:	681b      	ldr	r3, [r3, #0]
 800dbf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dbfa:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800dbfe:	687b      	ldr	r3, [r7, #4]
 800dc00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800dc02:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 800dc04:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 800dc08:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800dc0c:	4013      	ands	r3, r2
 800dc0e:	b29a      	uxth	r2, r3
 800dc10:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800dc12:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800dc14:	687b      	ldr	r3, [r7, #4]
 800dc16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800dc18:	1c9a      	adds	r2, r3, #2
 800dc1a:	687b      	ldr	r3, [r7, #4]
 800dc1c:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800dc1e:	687b      	ldr	r3, [r7, #4]
 800dc20:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800dc24:	b29b      	uxth	r3, r3
 800dc26:	3b01      	subs	r3, #1
 800dc28:	b29a      	uxth	r2, r3
 800dc2a:	687b      	ldr	r3, [r7, #4]
 800dc2c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800dc30:	687b      	ldr	r3, [r7, #4]
 800dc32:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800dc36:	b29b      	uxth	r3, r3
 800dc38:	2b00      	cmp	r3, #0
 800dc3a:	d178      	bne.n	800dd2e <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800dc3c:	687b      	ldr	r3, [r7, #4]
 800dc3e:	681b      	ldr	r3, [r3, #0]
 800dc40:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dc42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dc44:	e853 3f00 	ldrex	r3, [r3]
 800dc48:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800dc4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc4c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800dc50:	64fb      	str	r3, [r7, #76]	; 0x4c
 800dc52:	687b      	ldr	r3, [r7, #4]
 800dc54:	681b      	ldr	r3, [r3, #0]
 800dc56:	461a      	mov	r2, r3
 800dc58:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dc5a:	643b      	str	r3, [r7, #64]	; 0x40
 800dc5c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dc5e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800dc60:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800dc62:	e841 2300 	strex	r3, r2, [r1]
 800dc66:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800dc68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dc6a:	2b00      	cmp	r3, #0
 800dc6c:	d1e6      	bne.n	800dc3c <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800dc6e:	687b      	ldr	r3, [r7, #4]
 800dc70:	681b      	ldr	r3, [r3, #0]
 800dc72:	3308      	adds	r3, #8
 800dc74:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dc76:	6a3b      	ldr	r3, [r7, #32]
 800dc78:	e853 3f00 	ldrex	r3, [r3]
 800dc7c:	61fb      	str	r3, [r7, #28]
   return(result);
 800dc7e:	69fb      	ldr	r3, [r7, #28]
 800dc80:	f023 0301 	bic.w	r3, r3, #1
 800dc84:	64bb      	str	r3, [r7, #72]	; 0x48
 800dc86:	687b      	ldr	r3, [r7, #4]
 800dc88:	681b      	ldr	r3, [r3, #0]
 800dc8a:	3308      	adds	r3, #8
 800dc8c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800dc8e:	62fa      	str	r2, [r7, #44]	; 0x2c
 800dc90:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dc92:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800dc94:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800dc96:	e841 2300 	strex	r3, r2, [r1]
 800dc9a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800dc9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc9e:	2b00      	cmp	r3, #0
 800dca0:	d1e5      	bne.n	800dc6e <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800dca2:	687b      	ldr	r3, [r7, #4]
 800dca4:	2220      	movs	r2, #32
 800dca6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800dcaa:	687b      	ldr	r3, [r7, #4]
 800dcac:	2200      	movs	r2, #0
 800dcae:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800dcb0:	687b      	ldr	r3, [r7, #4]
 800dcb2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dcb4:	2b01      	cmp	r3, #1
 800dcb6:	d12e      	bne.n	800dd16 <UART_RxISR_16BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800dcb8:	687b      	ldr	r3, [r7, #4]
 800dcba:	2200      	movs	r2, #0
 800dcbc:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800dcbe:	687b      	ldr	r3, [r7, #4]
 800dcc0:	681b      	ldr	r3, [r3, #0]
 800dcc2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dcc4:	68fb      	ldr	r3, [r7, #12]
 800dcc6:	e853 3f00 	ldrex	r3, [r3]
 800dcca:	60bb      	str	r3, [r7, #8]
   return(result);
 800dccc:	68bb      	ldr	r3, [r7, #8]
 800dcce:	f023 0310 	bic.w	r3, r3, #16
 800dcd2:	647b      	str	r3, [r7, #68]	; 0x44
 800dcd4:	687b      	ldr	r3, [r7, #4]
 800dcd6:	681b      	ldr	r3, [r3, #0]
 800dcd8:	461a      	mov	r2, r3
 800dcda:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800dcdc:	61bb      	str	r3, [r7, #24]
 800dcde:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dce0:	6979      	ldr	r1, [r7, #20]
 800dce2:	69ba      	ldr	r2, [r7, #24]
 800dce4:	e841 2300 	strex	r3, r2, [r1]
 800dce8:	613b      	str	r3, [r7, #16]
   return(result);
 800dcea:	693b      	ldr	r3, [r7, #16]
 800dcec:	2b00      	cmp	r3, #0
 800dcee:	d1e6      	bne.n	800dcbe <UART_RxISR_16BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800dcf0:	687b      	ldr	r3, [r7, #4]
 800dcf2:	681b      	ldr	r3, [r3, #0]
 800dcf4:	69db      	ldr	r3, [r3, #28]
 800dcf6:	f003 0310 	and.w	r3, r3, #16
 800dcfa:	2b10      	cmp	r3, #16
 800dcfc:	d103      	bne.n	800dd06 <UART_RxISR_16BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800dcfe:	687b      	ldr	r3, [r7, #4]
 800dd00:	681b      	ldr	r3, [r3, #0]
 800dd02:	2210      	movs	r2, #16
 800dd04:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800dd06:	687b      	ldr	r3, [r7, #4]
 800dd08:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800dd0c:	4619      	mov	r1, r3
 800dd0e:	6878      	ldr	r0, [r7, #4]
 800dd10:	f7fe fdb6 	bl	800c880 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800dd14:	e00b      	b.n	800dd2e <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 800dd16:	6878      	ldr	r0, [r7, #4]
 800dd18:	f7f4 fe78 	bl	8002a0c <HAL_UART_RxCpltCallback>
}
 800dd1c:	e007      	b.n	800dd2e <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800dd1e:	687b      	ldr	r3, [r7, #4]
 800dd20:	681b      	ldr	r3, [r3, #0]
 800dd22:	699a      	ldr	r2, [r3, #24]
 800dd24:	687b      	ldr	r3, [r7, #4]
 800dd26:	681b      	ldr	r3, [r3, #0]
 800dd28:	f042 0208 	orr.w	r2, r2, #8
 800dd2c:	619a      	str	r2, [r3, #24]
}
 800dd2e:	bf00      	nop
 800dd30:	3758      	adds	r7, #88	; 0x58
 800dd32:	46bd      	mov	sp, r7
 800dd34:	bd80      	pop	{r7, pc}
	...

0800dd38 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800dd38:	b580      	push	{r7, lr}
 800dd3a:	b0a6      	sub	sp, #152	; 0x98
 800dd3c:	af00      	add	r7, sp, #0
 800dd3e:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800dd40:	687b      	ldr	r3, [r7, #4]
 800dd42:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800dd46:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800dd4a:	687b      	ldr	r3, [r7, #4]
 800dd4c:	681b      	ldr	r3, [r3, #0]
 800dd4e:	69db      	ldr	r3, [r3, #28]
 800dd50:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800dd54:	687b      	ldr	r3, [r7, #4]
 800dd56:	681b      	ldr	r3, [r3, #0]
 800dd58:	681b      	ldr	r3, [r3, #0]
 800dd5a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800dd5e:	687b      	ldr	r3, [r7, #4]
 800dd60:	681b      	ldr	r3, [r3, #0]
 800dd62:	689b      	ldr	r3, [r3, #8]
 800dd64:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800dd68:	687b      	ldr	r3, [r7, #4]
 800dd6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800dd6e:	2b22      	cmp	r3, #34	; 0x22
 800dd70:	f040 814d 	bne.w	800e00e <UART_RxISR_8BIT_FIFOEN+0x2d6>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800dd74:	687b      	ldr	r3, [r7, #4]
 800dd76:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800dd7a:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800dd7e:	e0f4      	b.n	800df6a <UART_RxISR_8BIT_FIFOEN+0x232>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800dd80:	687b      	ldr	r3, [r7, #4]
 800dd82:	681b      	ldr	r3, [r3, #0]
 800dd84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dd86:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800dd8a:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 800dd8e:	b2d9      	uxtb	r1, r3
 800dd90:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 800dd94:	b2da      	uxtb	r2, r3
 800dd96:	687b      	ldr	r3, [r7, #4]
 800dd98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800dd9a:	400a      	ands	r2, r1
 800dd9c:	b2d2      	uxtb	r2, r2
 800dd9e:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800dda0:	687b      	ldr	r3, [r7, #4]
 800dda2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800dda4:	1c5a      	adds	r2, r3, #1
 800dda6:	687b      	ldr	r3, [r7, #4]
 800dda8:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800ddaa:	687b      	ldr	r3, [r7, #4]
 800ddac:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800ddb0:	b29b      	uxth	r3, r3
 800ddb2:	3b01      	subs	r3, #1
 800ddb4:	b29a      	uxth	r2, r3
 800ddb6:	687b      	ldr	r3, [r7, #4]
 800ddb8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800ddbc:	687b      	ldr	r3, [r7, #4]
 800ddbe:	681b      	ldr	r3, [r3, #0]
 800ddc0:	69db      	ldr	r3, [r3, #28]
 800ddc2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800ddc6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800ddca:	f003 0307 	and.w	r3, r3, #7
 800ddce:	2b00      	cmp	r3, #0
 800ddd0:	d053      	beq.n	800de7a <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800ddd2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800ddd6:	f003 0301 	and.w	r3, r3, #1
 800ddda:	2b00      	cmp	r3, #0
 800dddc:	d011      	beq.n	800de02 <UART_RxISR_8BIT_FIFOEN+0xca>
 800ddde:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800dde2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800dde6:	2b00      	cmp	r3, #0
 800dde8:	d00b      	beq.n	800de02 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800ddea:	687b      	ldr	r3, [r7, #4]
 800ddec:	681b      	ldr	r3, [r3, #0]
 800ddee:	2201      	movs	r2, #1
 800ddf0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800ddf2:	687b      	ldr	r3, [r7, #4]
 800ddf4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ddf8:	f043 0201 	orr.w	r2, r3, #1
 800ddfc:	687b      	ldr	r3, [r7, #4]
 800ddfe:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800de02:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800de06:	f003 0302 	and.w	r3, r3, #2
 800de0a:	2b00      	cmp	r3, #0
 800de0c:	d011      	beq.n	800de32 <UART_RxISR_8BIT_FIFOEN+0xfa>
 800de0e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800de12:	f003 0301 	and.w	r3, r3, #1
 800de16:	2b00      	cmp	r3, #0
 800de18:	d00b      	beq.n	800de32 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800de1a:	687b      	ldr	r3, [r7, #4]
 800de1c:	681b      	ldr	r3, [r3, #0]
 800de1e:	2202      	movs	r2, #2
 800de20:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800de22:	687b      	ldr	r3, [r7, #4]
 800de24:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800de28:	f043 0204 	orr.w	r2, r3, #4
 800de2c:	687b      	ldr	r3, [r7, #4]
 800de2e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800de32:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800de36:	f003 0304 	and.w	r3, r3, #4
 800de3a:	2b00      	cmp	r3, #0
 800de3c:	d011      	beq.n	800de62 <UART_RxISR_8BIT_FIFOEN+0x12a>
 800de3e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800de42:	f003 0301 	and.w	r3, r3, #1
 800de46:	2b00      	cmp	r3, #0
 800de48:	d00b      	beq.n	800de62 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800de4a:	687b      	ldr	r3, [r7, #4]
 800de4c:	681b      	ldr	r3, [r3, #0]
 800de4e:	2204      	movs	r2, #4
 800de50:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800de52:	687b      	ldr	r3, [r7, #4]
 800de54:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800de58:	f043 0202 	orr.w	r2, r3, #2
 800de5c:	687b      	ldr	r3, [r7, #4]
 800de5e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800de62:	687b      	ldr	r3, [r7, #4]
 800de64:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800de68:	2b00      	cmp	r3, #0
 800de6a:	d006      	beq.n	800de7a <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800de6c:	6878      	ldr	r0, [r7, #4]
 800de6e:	f7fe fcfd 	bl	800c86c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800de72:	687b      	ldr	r3, [r7, #4]
 800de74:	2200      	movs	r2, #0
 800de76:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 800de7a:	687b      	ldr	r3, [r7, #4]
 800de7c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800de80:	b29b      	uxth	r3, r3
 800de82:	2b00      	cmp	r3, #0
 800de84:	d171      	bne.n	800df6a <UART_RxISR_8BIT_FIFOEN+0x232>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800de86:	687b      	ldr	r3, [r7, #4]
 800de88:	681b      	ldr	r3, [r3, #0]
 800de8a:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800de8c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800de8e:	e853 3f00 	ldrex	r3, [r3]
 800de92:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 800de94:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800de96:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800de9a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800de9e:	687b      	ldr	r3, [r7, #4]
 800dea0:	681b      	ldr	r3, [r3, #0]
 800dea2:	461a      	mov	r2, r3
 800dea4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800dea8:	66bb      	str	r3, [r7, #104]	; 0x68
 800deaa:	667a      	str	r2, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800deac:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800deae:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800deb0:	e841 2300 	strex	r3, r2, [r1]
 800deb4:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 800deb6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800deb8:	2b00      	cmp	r3, #0
 800deba:	d1e4      	bne.n	800de86 <UART_RxISR_8BIT_FIFOEN+0x14e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800debc:	687b      	ldr	r3, [r7, #4]
 800debe:	681b      	ldr	r3, [r3, #0]
 800dec0:	3308      	adds	r3, #8
 800dec2:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dec4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800dec6:	e853 3f00 	ldrex	r3, [r3]
 800deca:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800decc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800dece:	4b56      	ldr	r3, [pc, #344]	; (800e028 <UART_RxISR_8BIT_FIFOEN+0x2f0>)
 800ded0:	4013      	ands	r3, r2
 800ded2:	67fb      	str	r3, [r7, #124]	; 0x7c
 800ded4:	687b      	ldr	r3, [r7, #4]
 800ded6:	681b      	ldr	r3, [r3, #0]
 800ded8:	3308      	adds	r3, #8
 800deda:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800dedc:	657a      	str	r2, [r7, #84]	; 0x54
 800dede:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dee0:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800dee2:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800dee4:	e841 2300 	strex	r3, r2, [r1]
 800dee8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800deea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800deec:	2b00      	cmp	r3, #0
 800deee:	d1e5      	bne.n	800debc <UART_RxISR_8BIT_FIFOEN+0x184>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800def0:	687b      	ldr	r3, [r7, #4]
 800def2:	2220      	movs	r2, #32
 800def4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800def8:	687b      	ldr	r3, [r7, #4]
 800defa:	2200      	movs	r2, #0
 800defc:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800defe:	687b      	ldr	r3, [r7, #4]
 800df00:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800df02:	2b01      	cmp	r3, #1
 800df04:	d12e      	bne.n	800df64 <UART_RxISR_8BIT_FIFOEN+0x22c>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800df06:	687b      	ldr	r3, [r7, #4]
 800df08:	2200      	movs	r2, #0
 800df0a:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800df0c:	687b      	ldr	r3, [r7, #4]
 800df0e:	681b      	ldr	r3, [r3, #0]
 800df10:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800df12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800df14:	e853 3f00 	ldrex	r3, [r3]
 800df18:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800df1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800df1c:	f023 0310 	bic.w	r3, r3, #16
 800df20:	67bb      	str	r3, [r7, #120]	; 0x78
 800df22:	687b      	ldr	r3, [r7, #4]
 800df24:	681b      	ldr	r3, [r3, #0]
 800df26:	461a      	mov	r2, r3
 800df28:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800df2a:	643b      	str	r3, [r7, #64]	; 0x40
 800df2c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800df2e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800df30:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800df32:	e841 2300 	strex	r3, r2, [r1]
 800df36:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800df38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800df3a:	2b00      	cmp	r3, #0
 800df3c:	d1e6      	bne.n	800df0c <UART_RxISR_8BIT_FIFOEN+0x1d4>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800df3e:	687b      	ldr	r3, [r7, #4]
 800df40:	681b      	ldr	r3, [r3, #0]
 800df42:	69db      	ldr	r3, [r3, #28]
 800df44:	f003 0310 	and.w	r3, r3, #16
 800df48:	2b10      	cmp	r3, #16
 800df4a:	d103      	bne.n	800df54 <UART_RxISR_8BIT_FIFOEN+0x21c>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800df4c:	687b      	ldr	r3, [r7, #4]
 800df4e:	681b      	ldr	r3, [r3, #0]
 800df50:	2210      	movs	r2, #16
 800df52:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800df54:	687b      	ldr	r3, [r7, #4]
 800df56:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800df5a:	4619      	mov	r1, r3
 800df5c:	6878      	ldr	r0, [r7, #4]
 800df5e:	f7fe fc8f 	bl	800c880 <HAL_UARTEx_RxEventCallback>
 800df62:	e002      	b.n	800df6a <UART_RxISR_8BIT_FIFOEN+0x232>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800df64:	6878      	ldr	r0, [r7, #4]
 800df66:	f7f4 fd51 	bl	8002a0c <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800df6a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800df6e:	2b00      	cmp	r3, #0
 800df70:	d006      	beq.n	800df80 <UART_RxISR_8BIT_FIFOEN+0x248>
 800df72:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800df76:	f003 0320 	and.w	r3, r3, #32
 800df7a:	2b00      	cmp	r3, #0
 800df7c:	f47f af00 	bne.w	800dd80 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800df80:	687b      	ldr	r3, [r7, #4]
 800df82:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800df86:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800df8a:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 800df8e:	2b00      	cmp	r3, #0
 800df90:	d045      	beq.n	800e01e <UART_RxISR_8BIT_FIFOEN+0x2e6>
 800df92:	687b      	ldr	r3, [r7, #4]
 800df94:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800df98:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800df9c:	429a      	cmp	r2, r3
 800df9e:	d23e      	bcs.n	800e01e <UART_RxISR_8BIT_FIFOEN+0x2e6>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800dfa0:	687b      	ldr	r3, [r7, #4]
 800dfa2:	681b      	ldr	r3, [r3, #0]
 800dfa4:	3308      	adds	r3, #8
 800dfa6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dfa8:	6a3b      	ldr	r3, [r7, #32]
 800dfaa:	e853 3f00 	ldrex	r3, [r3]
 800dfae:	61fb      	str	r3, [r7, #28]
   return(result);
 800dfb0:	69fb      	ldr	r3, [r7, #28]
 800dfb2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800dfb6:	673b      	str	r3, [r7, #112]	; 0x70
 800dfb8:	687b      	ldr	r3, [r7, #4]
 800dfba:	681b      	ldr	r3, [r3, #0]
 800dfbc:	3308      	adds	r3, #8
 800dfbe:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800dfc0:	62fa      	str	r2, [r7, #44]	; 0x2c
 800dfc2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dfc4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800dfc6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800dfc8:	e841 2300 	strex	r3, r2, [r1]
 800dfcc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800dfce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dfd0:	2b00      	cmp	r3, #0
 800dfd2:	d1e5      	bne.n	800dfa0 <UART_RxISR_8BIT_FIFOEN+0x268>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800dfd4:	687b      	ldr	r3, [r7, #4]
 800dfd6:	4a15      	ldr	r2, [pc, #84]	; (800e02c <UART_RxISR_8BIT_FIFOEN+0x2f4>)
 800dfd8:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800dfda:	687b      	ldr	r3, [r7, #4]
 800dfdc:	681b      	ldr	r3, [r3, #0]
 800dfde:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dfe0:	68fb      	ldr	r3, [r7, #12]
 800dfe2:	e853 3f00 	ldrex	r3, [r3]
 800dfe6:	60bb      	str	r3, [r7, #8]
   return(result);
 800dfe8:	68bb      	ldr	r3, [r7, #8]
 800dfea:	f043 0320 	orr.w	r3, r3, #32
 800dfee:	66fb      	str	r3, [r7, #108]	; 0x6c
 800dff0:	687b      	ldr	r3, [r7, #4]
 800dff2:	681b      	ldr	r3, [r3, #0]
 800dff4:	461a      	mov	r2, r3
 800dff6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800dff8:	61bb      	str	r3, [r7, #24]
 800dffa:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dffc:	6979      	ldr	r1, [r7, #20]
 800dffe:	69ba      	ldr	r2, [r7, #24]
 800e000:	e841 2300 	strex	r3, r2, [r1]
 800e004:	613b      	str	r3, [r7, #16]
   return(result);
 800e006:	693b      	ldr	r3, [r7, #16]
 800e008:	2b00      	cmp	r3, #0
 800e00a:	d1e6      	bne.n	800dfda <UART_RxISR_8BIT_FIFOEN+0x2a2>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800e00c:	e007      	b.n	800e01e <UART_RxISR_8BIT_FIFOEN+0x2e6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800e00e:	687b      	ldr	r3, [r7, #4]
 800e010:	681b      	ldr	r3, [r3, #0]
 800e012:	699a      	ldr	r2, [r3, #24]
 800e014:	687b      	ldr	r3, [r7, #4]
 800e016:	681b      	ldr	r3, [r3, #0]
 800e018:	f042 0208 	orr.w	r2, r2, #8
 800e01c:	619a      	str	r2, [r3, #24]
}
 800e01e:	bf00      	nop
 800e020:	3798      	adds	r7, #152	; 0x98
 800e022:	46bd      	mov	sp, r7
 800e024:	bd80      	pop	{r7, pc}
 800e026:	bf00      	nop
 800e028:	effffffe 	.word	0xeffffffe
 800e02c:	0800da77 	.word	0x0800da77

0800e030 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800e030:	b580      	push	{r7, lr}
 800e032:	b0a8      	sub	sp, #160	; 0xa0
 800e034:	af00      	add	r7, sp, #0
 800e036:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800e038:	687b      	ldr	r3, [r7, #4]
 800e03a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800e03e:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800e042:	687b      	ldr	r3, [r7, #4]
 800e044:	681b      	ldr	r3, [r3, #0]
 800e046:	69db      	ldr	r3, [r3, #28]
 800e048:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800e04c:	687b      	ldr	r3, [r7, #4]
 800e04e:	681b      	ldr	r3, [r3, #0]
 800e050:	681b      	ldr	r3, [r3, #0]
 800e052:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800e056:	687b      	ldr	r3, [r7, #4]
 800e058:	681b      	ldr	r3, [r3, #0]
 800e05a:	689b      	ldr	r3, [r3, #8]
 800e05c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800e060:	687b      	ldr	r3, [r7, #4]
 800e062:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e066:	2b22      	cmp	r3, #34	; 0x22
 800e068:	f040 8151 	bne.w	800e30e <UART_RxISR_16BIT_FIFOEN+0x2de>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800e06c:	687b      	ldr	r3, [r7, #4]
 800e06e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800e072:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800e076:	e0f8      	b.n	800e26a <UART_RxISR_16BIT_FIFOEN+0x23a>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800e078:	687b      	ldr	r3, [r7, #4]
 800e07a:	681b      	ldr	r3, [r3, #0]
 800e07c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e07e:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800e082:	687b      	ldr	r3, [r7, #4]
 800e084:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e086:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      *tmp = (uint16_t)(uhdata & uhMask);
 800e08a:	f8b7 208c 	ldrh.w	r2, [r7, #140]	; 0x8c
 800e08e:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 800e092:	4013      	ands	r3, r2
 800e094:	b29a      	uxth	r2, r3
 800e096:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800e09a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800e09c:	687b      	ldr	r3, [r7, #4]
 800e09e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e0a0:	1c9a      	adds	r2, r3, #2
 800e0a2:	687b      	ldr	r3, [r7, #4]
 800e0a4:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800e0a6:	687b      	ldr	r3, [r7, #4]
 800e0a8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800e0ac:	b29b      	uxth	r3, r3
 800e0ae:	3b01      	subs	r3, #1
 800e0b0:	b29a      	uxth	r2, r3
 800e0b2:	687b      	ldr	r3, [r7, #4]
 800e0b4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800e0b8:	687b      	ldr	r3, [r7, #4]
 800e0ba:	681b      	ldr	r3, [r3, #0]
 800e0bc:	69db      	ldr	r3, [r3, #28]
 800e0be:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800e0c2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800e0c6:	f003 0307 	and.w	r3, r3, #7
 800e0ca:	2b00      	cmp	r3, #0
 800e0cc:	d053      	beq.n	800e176 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800e0ce:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800e0d2:	f003 0301 	and.w	r3, r3, #1
 800e0d6:	2b00      	cmp	r3, #0
 800e0d8:	d011      	beq.n	800e0fe <UART_RxISR_16BIT_FIFOEN+0xce>
 800e0da:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800e0de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e0e2:	2b00      	cmp	r3, #0
 800e0e4:	d00b      	beq.n	800e0fe <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800e0e6:	687b      	ldr	r3, [r7, #4]
 800e0e8:	681b      	ldr	r3, [r3, #0]
 800e0ea:	2201      	movs	r2, #1
 800e0ec:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800e0ee:	687b      	ldr	r3, [r7, #4]
 800e0f0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e0f4:	f043 0201 	orr.w	r2, r3, #1
 800e0f8:	687b      	ldr	r3, [r7, #4]
 800e0fa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800e0fe:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800e102:	f003 0302 	and.w	r3, r3, #2
 800e106:	2b00      	cmp	r3, #0
 800e108:	d011      	beq.n	800e12e <UART_RxISR_16BIT_FIFOEN+0xfe>
 800e10a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800e10e:	f003 0301 	and.w	r3, r3, #1
 800e112:	2b00      	cmp	r3, #0
 800e114:	d00b      	beq.n	800e12e <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800e116:	687b      	ldr	r3, [r7, #4]
 800e118:	681b      	ldr	r3, [r3, #0]
 800e11a:	2202      	movs	r2, #2
 800e11c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800e11e:	687b      	ldr	r3, [r7, #4]
 800e120:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e124:	f043 0204 	orr.w	r2, r3, #4
 800e128:	687b      	ldr	r3, [r7, #4]
 800e12a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800e12e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800e132:	f003 0304 	and.w	r3, r3, #4
 800e136:	2b00      	cmp	r3, #0
 800e138:	d011      	beq.n	800e15e <UART_RxISR_16BIT_FIFOEN+0x12e>
 800e13a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800e13e:	f003 0301 	and.w	r3, r3, #1
 800e142:	2b00      	cmp	r3, #0
 800e144:	d00b      	beq.n	800e15e <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800e146:	687b      	ldr	r3, [r7, #4]
 800e148:	681b      	ldr	r3, [r3, #0]
 800e14a:	2204      	movs	r2, #4
 800e14c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800e14e:	687b      	ldr	r3, [r7, #4]
 800e150:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e154:	f043 0202 	orr.w	r2, r3, #2
 800e158:	687b      	ldr	r3, [r7, #4]
 800e15a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800e15e:	687b      	ldr	r3, [r7, #4]
 800e160:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e164:	2b00      	cmp	r3, #0
 800e166:	d006      	beq.n	800e176 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800e168:	6878      	ldr	r0, [r7, #4]
 800e16a:	f7fe fb7f 	bl	800c86c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e16e:	687b      	ldr	r3, [r7, #4]
 800e170:	2200      	movs	r2, #0
 800e172:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 800e176:	687b      	ldr	r3, [r7, #4]
 800e178:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800e17c:	b29b      	uxth	r3, r3
 800e17e:	2b00      	cmp	r3, #0
 800e180:	d173      	bne.n	800e26a <UART_RxISR_16BIT_FIFOEN+0x23a>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800e182:	687b      	ldr	r3, [r7, #4]
 800e184:	681b      	ldr	r3, [r3, #0]
 800e186:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e188:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e18a:	e853 3f00 	ldrex	r3, [r3]
 800e18e:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800e190:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e192:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800e196:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800e19a:	687b      	ldr	r3, [r7, #4]
 800e19c:	681b      	ldr	r3, [r3, #0]
 800e19e:	461a      	mov	r2, r3
 800e1a0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800e1a4:	66fb      	str	r3, [r7, #108]	; 0x6c
 800e1a6:	66ba      	str	r2, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e1a8:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800e1aa:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800e1ac:	e841 2300 	strex	r3, r2, [r1]
 800e1b0:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800e1b2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e1b4:	2b00      	cmp	r3, #0
 800e1b6:	d1e4      	bne.n	800e182 <UART_RxISR_16BIT_FIFOEN+0x152>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800e1b8:	687b      	ldr	r3, [r7, #4]
 800e1ba:	681b      	ldr	r3, [r3, #0]
 800e1bc:	3308      	adds	r3, #8
 800e1be:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e1c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e1c2:	e853 3f00 	ldrex	r3, [r3]
 800e1c6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800e1c8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e1ca:	4b57      	ldr	r3, [pc, #348]	; (800e328 <UART_RxISR_16BIT_FIFOEN+0x2f8>)
 800e1cc:	4013      	ands	r3, r2
 800e1ce:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800e1d2:	687b      	ldr	r3, [r7, #4]
 800e1d4:	681b      	ldr	r3, [r3, #0]
 800e1d6:	3308      	adds	r3, #8
 800e1d8:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800e1dc:	65ba      	str	r2, [r7, #88]	; 0x58
 800e1de:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e1e0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800e1e2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800e1e4:	e841 2300 	strex	r3, r2, [r1]
 800e1e8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800e1ea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e1ec:	2b00      	cmp	r3, #0
 800e1ee:	d1e3      	bne.n	800e1b8 <UART_RxISR_16BIT_FIFOEN+0x188>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800e1f0:	687b      	ldr	r3, [r7, #4]
 800e1f2:	2220      	movs	r2, #32
 800e1f4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800e1f8:	687b      	ldr	r3, [r7, #4]
 800e1fa:	2200      	movs	r2, #0
 800e1fc:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e1fe:	687b      	ldr	r3, [r7, #4]
 800e200:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e202:	2b01      	cmp	r3, #1
 800e204:	d12e      	bne.n	800e264 <UART_RxISR_16BIT_FIFOEN+0x234>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e206:	687b      	ldr	r3, [r7, #4]
 800e208:	2200      	movs	r2, #0
 800e20a:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e20c:	687b      	ldr	r3, [r7, #4]
 800e20e:	681b      	ldr	r3, [r3, #0]
 800e210:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e212:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e214:	e853 3f00 	ldrex	r3, [r3]
 800e218:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800e21a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e21c:	f023 0310 	bic.w	r3, r3, #16
 800e220:	67fb      	str	r3, [r7, #124]	; 0x7c
 800e222:	687b      	ldr	r3, [r7, #4]
 800e224:	681b      	ldr	r3, [r3, #0]
 800e226:	461a      	mov	r2, r3
 800e228:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800e22a:	647b      	str	r3, [r7, #68]	; 0x44
 800e22c:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e22e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800e230:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e232:	e841 2300 	strex	r3, r2, [r1]
 800e236:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800e238:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e23a:	2b00      	cmp	r3, #0
 800e23c:	d1e6      	bne.n	800e20c <UART_RxISR_16BIT_FIFOEN+0x1dc>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800e23e:	687b      	ldr	r3, [r7, #4]
 800e240:	681b      	ldr	r3, [r3, #0]
 800e242:	69db      	ldr	r3, [r3, #28]
 800e244:	f003 0310 	and.w	r3, r3, #16
 800e248:	2b10      	cmp	r3, #16
 800e24a:	d103      	bne.n	800e254 <UART_RxISR_16BIT_FIFOEN+0x224>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800e24c:	687b      	ldr	r3, [r7, #4]
 800e24e:	681b      	ldr	r3, [r3, #0]
 800e250:	2210      	movs	r2, #16
 800e252:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800e254:	687b      	ldr	r3, [r7, #4]
 800e256:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800e25a:	4619      	mov	r1, r3
 800e25c:	6878      	ldr	r0, [r7, #4]
 800e25e:	f7fe fb0f 	bl	800c880 <HAL_UARTEx_RxEventCallback>
 800e262:	e002      	b.n	800e26a <UART_RxISR_16BIT_FIFOEN+0x23a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800e264:	6878      	ldr	r0, [r7, #4]
 800e266:	f7f4 fbd1 	bl	8002a0c <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800e26a:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 800e26e:	2b00      	cmp	r3, #0
 800e270:	d006      	beq.n	800e280 <UART_RxISR_16BIT_FIFOEN+0x250>
 800e272:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800e276:	f003 0320 	and.w	r3, r3, #32
 800e27a:	2b00      	cmp	r3, #0
 800e27c:	f47f aefc 	bne.w	800e078 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800e280:	687b      	ldr	r3, [r7, #4]
 800e282:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800e286:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800e28a:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 800e28e:	2b00      	cmp	r3, #0
 800e290:	d045      	beq.n	800e31e <UART_RxISR_16BIT_FIFOEN+0x2ee>
 800e292:	687b      	ldr	r3, [r7, #4]
 800e294:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800e298:	f8b7 207a 	ldrh.w	r2, [r7, #122]	; 0x7a
 800e29c:	429a      	cmp	r2, r3
 800e29e:	d23e      	bcs.n	800e31e <UART_RxISR_16BIT_FIFOEN+0x2ee>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800e2a0:	687b      	ldr	r3, [r7, #4]
 800e2a2:	681b      	ldr	r3, [r3, #0]
 800e2a4:	3308      	adds	r3, #8
 800e2a6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e2a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e2aa:	e853 3f00 	ldrex	r3, [r3]
 800e2ae:	623b      	str	r3, [r7, #32]
   return(result);
 800e2b0:	6a3b      	ldr	r3, [r7, #32]
 800e2b2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800e2b6:	677b      	str	r3, [r7, #116]	; 0x74
 800e2b8:	687b      	ldr	r3, [r7, #4]
 800e2ba:	681b      	ldr	r3, [r3, #0]
 800e2bc:	3308      	adds	r3, #8
 800e2be:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800e2c0:	633a      	str	r2, [r7, #48]	; 0x30
 800e2c2:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e2c4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800e2c6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e2c8:	e841 2300 	strex	r3, r2, [r1]
 800e2cc:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800e2ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e2d0:	2b00      	cmp	r3, #0
 800e2d2:	d1e5      	bne.n	800e2a0 <UART_RxISR_16BIT_FIFOEN+0x270>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800e2d4:	687b      	ldr	r3, [r7, #4]
 800e2d6:	4a15      	ldr	r2, [pc, #84]	; (800e32c <UART_RxISR_16BIT_FIFOEN+0x2fc>)
 800e2d8:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800e2da:	687b      	ldr	r3, [r7, #4]
 800e2dc:	681b      	ldr	r3, [r3, #0]
 800e2de:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e2e0:	693b      	ldr	r3, [r7, #16]
 800e2e2:	e853 3f00 	ldrex	r3, [r3]
 800e2e6:	60fb      	str	r3, [r7, #12]
   return(result);
 800e2e8:	68fb      	ldr	r3, [r7, #12]
 800e2ea:	f043 0320 	orr.w	r3, r3, #32
 800e2ee:	673b      	str	r3, [r7, #112]	; 0x70
 800e2f0:	687b      	ldr	r3, [r7, #4]
 800e2f2:	681b      	ldr	r3, [r3, #0]
 800e2f4:	461a      	mov	r2, r3
 800e2f6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800e2f8:	61fb      	str	r3, [r7, #28]
 800e2fa:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e2fc:	69b9      	ldr	r1, [r7, #24]
 800e2fe:	69fa      	ldr	r2, [r7, #28]
 800e300:	e841 2300 	strex	r3, r2, [r1]
 800e304:	617b      	str	r3, [r7, #20]
   return(result);
 800e306:	697b      	ldr	r3, [r7, #20]
 800e308:	2b00      	cmp	r3, #0
 800e30a:	d1e6      	bne.n	800e2da <UART_RxISR_16BIT_FIFOEN+0x2aa>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800e30c:	e007      	b.n	800e31e <UART_RxISR_16BIT_FIFOEN+0x2ee>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800e30e:	687b      	ldr	r3, [r7, #4]
 800e310:	681b      	ldr	r3, [r3, #0]
 800e312:	699a      	ldr	r2, [r3, #24]
 800e314:	687b      	ldr	r3, [r7, #4]
 800e316:	681b      	ldr	r3, [r3, #0]
 800e318:	f042 0208 	orr.w	r2, r2, #8
 800e31c:	619a      	str	r2, [r3, #24]
}
 800e31e:	bf00      	nop
 800e320:	37a0      	adds	r7, #160	; 0xa0
 800e322:	46bd      	mov	sp, r7
 800e324:	bd80      	pop	{r7, pc}
 800e326:	bf00      	nop
 800e328:	effffffe 	.word	0xeffffffe
 800e32c:	0800dbd7 	.word	0x0800dbd7

0800e330 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800e330:	b480      	push	{r7}
 800e332:	b083      	sub	sp, #12
 800e334:	af00      	add	r7, sp, #0
 800e336:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800e338:	bf00      	nop
 800e33a:	370c      	adds	r7, #12
 800e33c:	46bd      	mov	sp, r7
 800e33e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e342:	4770      	bx	lr

0800e344 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800e344:	b480      	push	{r7}
 800e346:	b083      	sub	sp, #12
 800e348:	af00      	add	r7, sp, #0
 800e34a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800e34c:	bf00      	nop
 800e34e:	370c      	adds	r7, #12
 800e350:	46bd      	mov	sp, r7
 800e352:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e356:	4770      	bx	lr

0800e358 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800e358:	b480      	push	{r7}
 800e35a:	b083      	sub	sp, #12
 800e35c:	af00      	add	r7, sp, #0
 800e35e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800e360:	bf00      	nop
 800e362:	370c      	adds	r7, #12
 800e364:	46bd      	mov	sp, r7
 800e366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e36a:	4770      	bx	lr

0800e36c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800e36c:	b480      	push	{r7}
 800e36e:	b085      	sub	sp, #20
 800e370:	af00      	add	r7, sp, #0
 800e372:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800e374:	687b      	ldr	r3, [r7, #4]
 800e376:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800e37a:	2b01      	cmp	r3, #1
 800e37c:	d101      	bne.n	800e382 <HAL_UARTEx_DisableFifoMode+0x16>
 800e37e:	2302      	movs	r3, #2
 800e380:	e027      	b.n	800e3d2 <HAL_UARTEx_DisableFifoMode+0x66>
 800e382:	687b      	ldr	r3, [r7, #4]
 800e384:	2201      	movs	r2, #1
 800e386:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800e38a:	687b      	ldr	r3, [r7, #4]
 800e38c:	2224      	movs	r2, #36	; 0x24
 800e38e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800e392:	687b      	ldr	r3, [r7, #4]
 800e394:	681b      	ldr	r3, [r3, #0]
 800e396:	681b      	ldr	r3, [r3, #0]
 800e398:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800e39a:	687b      	ldr	r3, [r7, #4]
 800e39c:	681b      	ldr	r3, [r3, #0]
 800e39e:	681a      	ldr	r2, [r3, #0]
 800e3a0:	687b      	ldr	r3, [r7, #4]
 800e3a2:	681b      	ldr	r3, [r3, #0]
 800e3a4:	f022 0201 	bic.w	r2, r2, #1
 800e3a8:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800e3aa:	68fb      	ldr	r3, [r7, #12]
 800e3ac:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800e3b0:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800e3b2:	687b      	ldr	r3, [r7, #4]
 800e3b4:	2200      	movs	r2, #0
 800e3b6:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800e3b8:	687b      	ldr	r3, [r7, #4]
 800e3ba:	681b      	ldr	r3, [r3, #0]
 800e3bc:	68fa      	ldr	r2, [r7, #12]
 800e3be:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800e3c0:	687b      	ldr	r3, [r7, #4]
 800e3c2:	2220      	movs	r2, #32
 800e3c4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800e3c8:	687b      	ldr	r3, [r7, #4]
 800e3ca:	2200      	movs	r2, #0
 800e3cc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800e3d0:	2300      	movs	r3, #0
}
 800e3d2:	4618      	mov	r0, r3
 800e3d4:	3714      	adds	r7, #20
 800e3d6:	46bd      	mov	sp, r7
 800e3d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3dc:	4770      	bx	lr

0800e3de <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800e3de:	b580      	push	{r7, lr}
 800e3e0:	b084      	sub	sp, #16
 800e3e2:	af00      	add	r7, sp, #0
 800e3e4:	6078      	str	r0, [r7, #4]
 800e3e6:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800e3e8:	687b      	ldr	r3, [r7, #4]
 800e3ea:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800e3ee:	2b01      	cmp	r3, #1
 800e3f0:	d101      	bne.n	800e3f6 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800e3f2:	2302      	movs	r3, #2
 800e3f4:	e02d      	b.n	800e452 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800e3f6:	687b      	ldr	r3, [r7, #4]
 800e3f8:	2201      	movs	r2, #1
 800e3fa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800e3fe:	687b      	ldr	r3, [r7, #4]
 800e400:	2224      	movs	r2, #36	; 0x24
 800e402:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800e406:	687b      	ldr	r3, [r7, #4]
 800e408:	681b      	ldr	r3, [r3, #0]
 800e40a:	681b      	ldr	r3, [r3, #0]
 800e40c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800e40e:	687b      	ldr	r3, [r7, #4]
 800e410:	681b      	ldr	r3, [r3, #0]
 800e412:	681a      	ldr	r2, [r3, #0]
 800e414:	687b      	ldr	r3, [r7, #4]
 800e416:	681b      	ldr	r3, [r3, #0]
 800e418:	f022 0201 	bic.w	r2, r2, #1
 800e41c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800e41e:	687b      	ldr	r3, [r7, #4]
 800e420:	681b      	ldr	r3, [r3, #0]
 800e422:	689b      	ldr	r3, [r3, #8]
 800e424:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800e428:	687b      	ldr	r3, [r7, #4]
 800e42a:	681b      	ldr	r3, [r3, #0]
 800e42c:	683a      	ldr	r2, [r7, #0]
 800e42e:	430a      	orrs	r2, r1
 800e430:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800e432:	6878      	ldr	r0, [r7, #4]
 800e434:	f000 f850 	bl	800e4d8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800e438:	687b      	ldr	r3, [r7, #4]
 800e43a:	681b      	ldr	r3, [r3, #0]
 800e43c:	68fa      	ldr	r2, [r7, #12]
 800e43e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800e440:	687b      	ldr	r3, [r7, #4]
 800e442:	2220      	movs	r2, #32
 800e444:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800e448:	687b      	ldr	r3, [r7, #4]
 800e44a:	2200      	movs	r2, #0
 800e44c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800e450:	2300      	movs	r3, #0
}
 800e452:	4618      	mov	r0, r3
 800e454:	3710      	adds	r7, #16
 800e456:	46bd      	mov	sp, r7
 800e458:	bd80      	pop	{r7, pc}

0800e45a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800e45a:	b580      	push	{r7, lr}
 800e45c:	b084      	sub	sp, #16
 800e45e:	af00      	add	r7, sp, #0
 800e460:	6078      	str	r0, [r7, #4]
 800e462:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800e464:	687b      	ldr	r3, [r7, #4]
 800e466:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800e46a:	2b01      	cmp	r3, #1
 800e46c:	d101      	bne.n	800e472 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800e46e:	2302      	movs	r3, #2
 800e470:	e02d      	b.n	800e4ce <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800e472:	687b      	ldr	r3, [r7, #4]
 800e474:	2201      	movs	r2, #1
 800e476:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800e47a:	687b      	ldr	r3, [r7, #4]
 800e47c:	2224      	movs	r2, #36	; 0x24
 800e47e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800e482:	687b      	ldr	r3, [r7, #4]
 800e484:	681b      	ldr	r3, [r3, #0]
 800e486:	681b      	ldr	r3, [r3, #0]
 800e488:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800e48a:	687b      	ldr	r3, [r7, #4]
 800e48c:	681b      	ldr	r3, [r3, #0]
 800e48e:	681a      	ldr	r2, [r3, #0]
 800e490:	687b      	ldr	r3, [r7, #4]
 800e492:	681b      	ldr	r3, [r3, #0]
 800e494:	f022 0201 	bic.w	r2, r2, #1
 800e498:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800e49a:	687b      	ldr	r3, [r7, #4]
 800e49c:	681b      	ldr	r3, [r3, #0]
 800e49e:	689b      	ldr	r3, [r3, #8]
 800e4a0:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800e4a4:	687b      	ldr	r3, [r7, #4]
 800e4a6:	681b      	ldr	r3, [r3, #0]
 800e4a8:	683a      	ldr	r2, [r7, #0]
 800e4aa:	430a      	orrs	r2, r1
 800e4ac:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800e4ae:	6878      	ldr	r0, [r7, #4]
 800e4b0:	f000 f812 	bl	800e4d8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800e4b4:	687b      	ldr	r3, [r7, #4]
 800e4b6:	681b      	ldr	r3, [r3, #0]
 800e4b8:	68fa      	ldr	r2, [r7, #12]
 800e4ba:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800e4bc:	687b      	ldr	r3, [r7, #4]
 800e4be:	2220      	movs	r2, #32
 800e4c0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800e4c4:	687b      	ldr	r3, [r7, #4]
 800e4c6:	2200      	movs	r2, #0
 800e4c8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800e4cc:	2300      	movs	r3, #0
}
 800e4ce:	4618      	mov	r0, r3
 800e4d0:	3710      	adds	r7, #16
 800e4d2:	46bd      	mov	sp, r7
 800e4d4:	bd80      	pop	{r7, pc}
	...

0800e4d8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800e4d8:	b480      	push	{r7}
 800e4da:	b085      	sub	sp, #20
 800e4dc:	af00      	add	r7, sp, #0
 800e4de:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800e4e0:	687b      	ldr	r3, [r7, #4]
 800e4e2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e4e4:	2b00      	cmp	r3, #0
 800e4e6:	d108      	bne.n	800e4fa <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800e4e8:	687b      	ldr	r3, [r7, #4]
 800e4ea:	2201      	movs	r2, #1
 800e4ec:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800e4f0:	687b      	ldr	r3, [r7, #4]
 800e4f2:	2201      	movs	r2, #1
 800e4f4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800e4f8:	e031      	b.n	800e55e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800e4fa:	2310      	movs	r3, #16
 800e4fc:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800e4fe:	2310      	movs	r3, #16
 800e500:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800e502:	687b      	ldr	r3, [r7, #4]
 800e504:	681b      	ldr	r3, [r3, #0]
 800e506:	689b      	ldr	r3, [r3, #8]
 800e508:	0e5b      	lsrs	r3, r3, #25
 800e50a:	b2db      	uxtb	r3, r3
 800e50c:	f003 0307 	and.w	r3, r3, #7
 800e510:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800e512:	687b      	ldr	r3, [r7, #4]
 800e514:	681b      	ldr	r3, [r3, #0]
 800e516:	689b      	ldr	r3, [r3, #8]
 800e518:	0f5b      	lsrs	r3, r3, #29
 800e51a:	b2db      	uxtb	r3, r3
 800e51c:	f003 0307 	and.w	r3, r3, #7
 800e520:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800e522:	7bbb      	ldrb	r3, [r7, #14]
 800e524:	7b3a      	ldrb	r2, [r7, #12]
 800e526:	4911      	ldr	r1, [pc, #68]	; (800e56c <UARTEx_SetNbDataToProcess+0x94>)
 800e528:	5c8a      	ldrb	r2, [r1, r2]
 800e52a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800e52e:	7b3a      	ldrb	r2, [r7, #12]
 800e530:	490f      	ldr	r1, [pc, #60]	; (800e570 <UARTEx_SetNbDataToProcess+0x98>)
 800e532:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800e534:	fb93 f3f2 	sdiv	r3, r3, r2
 800e538:	b29a      	uxth	r2, r3
 800e53a:	687b      	ldr	r3, [r7, #4]
 800e53c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800e540:	7bfb      	ldrb	r3, [r7, #15]
 800e542:	7b7a      	ldrb	r2, [r7, #13]
 800e544:	4909      	ldr	r1, [pc, #36]	; (800e56c <UARTEx_SetNbDataToProcess+0x94>)
 800e546:	5c8a      	ldrb	r2, [r1, r2]
 800e548:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800e54c:	7b7a      	ldrb	r2, [r7, #13]
 800e54e:	4908      	ldr	r1, [pc, #32]	; (800e570 <UARTEx_SetNbDataToProcess+0x98>)
 800e550:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800e552:	fb93 f3f2 	sdiv	r3, r3, r2
 800e556:	b29a      	uxth	r2, r3
 800e558:	687b      	ldr	r3, [r7, #4]
 800e55a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800e55e:	bf00      	nop
 800e560:	3714      	adds	r7, #20
 800e562:	46bd      	mov	sp, r7
 800e564:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e568:	4770      	bx	lr
 800e56a:	bf00      	nop
 800e56c:	08012264 	.word	0x08012264
 800e570:	0801226c 	.word	0x0801226c

0800e574 <__errno>:
 800e574:	4b01      	ldr	r3, [pc, #4]	; (800e57c <__errno+0x8>)
 800e576:	6818      	ldr	r0, [r3, #0]
 800e578:	4770      	bx	lr
 800e57a:	bf00      	nop
 800e57c:	24000088 	.word	0x24000088

0800e580 <_fclose_r>:
 800e580:	b570      	push	{r4, r5, r6, lr}
 800e582:	4605      	mov	r5, r0
 800e584:	460c      	mov	r4, r1
 800e586:	b911      	cbnz	r1, 800e58e <_fclose_r+0xe>
 800e588:	2600      	movs	r6, #0
 800e58a:	4630      	mov	r0, r6
 800e58c:	bd70      	pop	{r4, r5, r6, pc}
 800e58e:	b118      	cbz	r0, 800e598 <_fclose_r+0x18>
 800e590:	6983      	ldr	r3, [r0, #24]
 800e592:	b90b      	cbnz	r3, 800e598 <_fclose_r+0x18>
 800e594:	f000 fa18 	bl	800e9c8 <__sinit>
 800e598:	4b2c      	ldr	r3, [pc, #176]	; (800e64c <_fclose_r+0xcc>)
 800e59a:	429c      	cmp	r4, r3
 800e59c:	d114      	bne.n	800e5c8 <_fclose_r+0x48>
 800e59e:	686c      	ldr	r4, [r5, #4]
 800e5a0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e5a2:	07d8      	lsls	r0, r3, #31
 800e5a4:	d405      	bmi.n	800e5b2 <_fclose_r+0x32>
 800e5a6:	89a3      	ldrh	r3, [r4, #12]
 800e5a8:	0599      	lsls	r1, r3, #22
 800e5aa:	d402      	bmi.n	800e5b2 <_fclose_r+0x32>
 800e5ac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e5ae:	f000 fbfd 	bl	800edac <__retarget_lock_acquire_recursive>
 800e5b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e5b6:	b98b      	cbnz	r3, 800e5dc <_fclose_r+0x5c>
 800e5b8:	6e66      	ldr	r6, [r4, #100]	; 0x64
 800e5ba:	f016 0601 	ands.w	r6, r6, #1
 800e5be:	d1e3      	bne.n	800e588 <_fclose_r+0x8>
 800e5c0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e5c2:	f000 fbf4 	bl	800edae <__retarget_lock_release_recursive>
 800e5c6:	e7e0      	b.n	800e58a <_fclose_r+0xa>
 800e5c8:	4b21      	ldr	r3, [pc, #132]	; (800e650 <_fclose_r+0xd0>)
 800e5ca:	429c      	cmp	r4, r3
 800e5cc:	d101      	bne.n	800e5d2 <_fclose_r+0x52>
 800e5ce:	68ac      	ldr	r4, [r5, #8]
 800e5d0:	e7e6      	b.n	800e5a0 <_fclose_r+0x20>
 800e5d2:	4b20      	ldr	r3, [pc, #128]	; (800e654 <_fclose_r+0xd4>)
 800e5d4:	429c      	cmp	r4, r3
 800e5d6:	bf08      	it	eq
 800e5d8:	68ec      	ldreq	r4, [r5, #12]
 800e5da:	e7e1      	b.n	800e5a0 <_fclose_r+0x20>
 800e5dc:	4621      	mov	r1, r4
 800e5de:	4628      	mov	r0, r5
 800e5e0:	f000 f842 	bl	800e668 <__sflush_r>
 800e5e4:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800e5e6:	4606      	mov	r6, r0
 800e5e8:	b133      	cbz	r3, 800e5f8 <_fclose_r+0x78>
 800e5ea:	6a21      	ldr	r1, [r4, #32]
 800e5ec:	4628      	mov	r0, r5
 800e5ee:	4798      	blx	r3
 800e5f0:	2800      	cmp	r0, #0
 800e5f2:	bfb8      	it	lt
 800e5f4:	f04f 36ff 	movlt.w	r6, #4294967295
 800e5f8:	89a3      	ldrh	r3, [r4, #12]
 800e5fa:	061a      	lsls	r2, r3, #24
 800e5fc:	d503      	bpl.n	800e606 <_fclose_r+0x86>
 800e5fe:	6921      	ldr	r1, [r4, #16]
 800e600:	4628      	mov	r0, r5
 800e602:	f000 fc51 	bl	800eea8 <_free_r>
 800e606:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e608:	b141      	cbz	r1, 800e61c <_fclose_r+0x9c>
 800e60a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e60e:	4299      	cmp	r1, r3
 800e610:	d002      	beq.n	800e618 <_fclose_r+0x98>
 800e612:	4628      	mov	r0, r5
 800e614:	f000 fc48 	bl	800eea8 <_free_r>
 800e618:	2300      	movs	r3, #0
 800e61a:	6363      	str	r3, [r4, #52]	; 0x34
 800e61c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800e61e:	b121      	cbz	r1, 800e62a <_fclose_r+0xaa>
 800e620:	4628      	mov	r0, r5
 800e622:	f000 fc41 	bl	800eea8 <_free_r>
 800e626:	2300      	movs	r3, #0
 800e628:	64a3      	str	r3, [r4, #72]	; 0x48
 800e62a:	f000 f9b5 	bl	800e998 <__sfp_lock_acquire>
 800e62e:	2300      	movs	r3, #0
 800e630:	81a3      	strh	r3, [r4, #12]
 800e632:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e634:	07db      	lsls	r3, r3, #31
 800e636:	d402      	bmi.n	800e63e <_fclose_r+0xbe>
 800e638:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e63a:	f000 fbb8 	bl	800edae <__retarget_lock_release_recursive>
 800e63e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e640:	f000 fbb3 	bl	800edaa <__retarget_lock_close_recursive>
 800e644:	f000 f9ae 	bl	800e9a4 <__sfp_lock_release>
 800e648:	e79f      	b.n	800e58a <_fclose_r+0xa>
 800e64a:	bf00      	nop
 800e64c:	08012294 	.word	0x08012294
 800e650:	080122b4 	.word	0x080122b4
 800e654:	08012274 	.word	0x08012274

0800e658 <fclose>:
 800e658:	4b02      	ldr	r3, [pc, #8]	; (800e664 <fclose+0xc>)
 800e65a:	4601      	mov	r1, r0
 800e65c:	6818      	ldr	r0, [r3, #0]
 800e65e:	f7ff bf8f 	b.w	800e580 <_fclose_r>
 800e662:	bf00      	nop
 800e664:	24000088 	.word	0x24000088

0800e668 <__sflush_r>:
 800e668:	898a      	ldrh	r2, [r1, #12]
 800e66a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e66e:	4605      	mov	r5, r0
 800e670:	0710      	lsls	r0, r2, #28
 800e672:	460c      	mov	r4, r1
 800e674:	d458      	bmi.n	800e728 <__sflush_r+0xc0>
 800e676:	684b      	ldr	r3, [r1, #4]
 800e678:	2b00      	cmp	r3, #0
 800e67a:	dc05      	bgt.n	800e688 <__sflush_r+0x20>
 800e67c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800e67e:	2b00      	cmp	r3, #0
 800e680:	dc02      	bgt.n	800e688 <__sflush_r+0x20>
 800e682:	2000      	movs	r0, #0
 800e684:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e688:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e68a:	2e00      	cmp	r6, #0
 800e68c:	d0f9      	beq.n	800e682 <__sflush_r+0x1a>
 800e68e:	2300      	movs	r3, #0
 800e690:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800e694:	682f      	ldr	r7, [r5, #0]
 800e696:	602b      	str	r3, [r5, #0]
 800e698:	d032      	beq.n	800e700 <__sflush_r+0x98>
 800e69a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800e69c:	89a3      	ldrh	r3, [r4, #12]
 800e69e:	075a      	lsls	r2, r3, #29
 800e6a0:	d505      	bpl.n	800e6ae <__sflush_r+0x46>
 800e6a2:	6863      	ldr	r3, [r4, #4]
 800e6a4:	1ac0      	subs	r0, r0, r3
 800e6a6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800e6a8:	b10b      	cbz	r3, 800e6ae <__sflush_r+0x46>
 800e6aa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800e6ac:	1ac0      	subs	r0, r0, r3
 800e6ae:	2300      	movs	r3, #0
 800e6b0:	4602      	mov	r2, r0
 800e6b2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e6b4:	6a21      	ldr	r1, [r4, #32]
 800e6b6:	4628      	mov	r0, r5
 800e6b8:	47b0      	blx	r6
 800e6ba:	1c43      	adds	r3, r0, #1
 800e6bc:	89a3      	ldrh	r3, [r4, #12]
 800e6be:	d106      	bne.n	800e6ce <__sflush_r+0x66>
 800e6c0:	6829      	ldr	r1, [r5, #0]
 800e6c2:	291d      	cmp	r1, #29
 800e6c4:	d82c      	bhi.n	800e720 <__sflush_r+0xb8>
 800e6c6:	4a2a      	ldr	r2, [pc, #168]	; (800e770 <__sflush_r+0x108>)
 800e6c8:	40ca      	lsrs	r2, r1
 800e6ca:	07d6      	lsls	r6, r2, #31
 800e6cc:	d528      	bpl.n	800e720 <__sflush_r+0xb8>
 800e6ce:	2200      	movs	r2, #0
 800e6d0:	6062      	str	r2, [r4, #4]
 800e6d2:	04d9      	lsls	r1, r3, #19
 800e6d4:	6922      	ldr	r2, [r4, #16]
 800e6d6:	6022      	str	r2, [r4, #0]
 800e6d8:	d504      	bpl.n	800e6e4 <__sflush_r+0x7c>
 800e6da:	1c42      	adds	r2, r0, #1
 800e6dc:	d101      	bne.n	800e6e2 <__sflush_r+0x7a>
 800e6de:	682b      	ldr	r3, [r5, #0]
 800e6e0:	b903      	cbnz	r3, 800e6e4 <__sflush_r+0x7c>
 800e6e2:	6560      	str	r0, [r4, #84]	; 0x54
 800e6e4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e6e6:	602f      	str	r7, [r5, #0]
 800e6e8:	2900      	cmp	r1, #0
 800e6ea:	d0ca      	beq.n	800e682 <__sflush_r+0x1a>
 800e6ec:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e6f0:	4299      	cmp	r1, r3
 800e6f2:	d002      	beq.n	800e6fa <__sflush_r+0x92>
 800e6f4:	4628      	mov	r0, r5
 800e6f6:	f000 fbd7 	bl	800eea8 <_free_r>
 800e6fa:	2000      	movs	r0, #0
 800e6fc:	6360      	str	r0, [r4, #52]	; 0x34
 800e6fe:	e7c1      	b.n	800e684 <__sflush_r+0x1c>
 800e700:	6a21      	ldr	r1, [r4, #32]
 800e702:	2301      	movs	r3, #1
 800e704:	4628      	mov	r0, r5
 800e706:	47b0      	blx	r6
 800e708:	1c41      	adds	r1, r0, #1
 800e70a:	d1c7      	bne.n	800e69c <__sflush_r+0x34>
 800e70c:	682b      	ldr	r3, [r5, #0]
 800e70e:	2b00      	cmp	r3, #0
 800e710:	d0c4      	beq.n	800e69c <__sflush_r+0x34>
 800e712:	2b1d      	cmp	r3, #29
 800e714:	d001      	beq.n	800e71a <__sflush_r+0xb2>
 800e716:	2b16      	cmp	r3, #22
 800e718:	d101      	bne.n	800e71e <__sflush_r+0xb6>
 800e71a:	602f      	str	r7, [r5, #0]
 800e71c:	e7b1      	b.n	800e682 <__sflush_r+0x1a>
 800e71e:	89a3      	ldrh	r3, [r4, #12]
 800e720:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e724:	81a3      	strh	r3, [r4, #12]
 800e726:	e7ad      	b.n	800e684 <__sflush_r+0x1c>
 800e728:	690f      	ldr	r7, [r1, #16]
 800e72a:	2f00      	cmp	r7, #0
 800e72c:	d0a9      	beq.n	800e682 <__sflush_r+0x1a>
 800e72e:	0793      	lsls	r3, r2, #30
 800e730:	680e      	ldr	r6, [r1, #0]
 800e732:	bf08      	it	eq
 800e734:	694b      	ldreq	r3, [r1, #20]
 800e736:	600f      	str	r7, [r1, #0]
 800e738:	bf18      	it	ne
 800e73a:	2300      	movne	r3, #0
 800e73c:	eba6 0807 	sub.w	r8, r6, r7
 800e740:	608b      	str	r3, [r1, #8]
 800e742:	f1b8 0f00 	cmp.w	r8, #0
 800e746:	dd9c      	ble.n	800e682 <__sflush_r+0x1a>
 800e748:	6a21      	ldr	r1, [r4, #32]
 800e74a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800e74c:	4643      	mov	r3, r8
 800e74e:	463a      	mov	r2, r7
 800e750:	4628      	mov	r0, r5
 800e752:	47b0      	blx	r6
 800e754:	2800      	cmp	r0, #0
 800e756:	dc06      	bgt.n	800e766 <__sflush_r+0xfe>
 800e758:	89a3      	ldrh	r3, [r4, #12]
 800e75a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e75e:	81a3      	strh	r3, [r4, #12]
 800e760:	f04f 30ff 	mov.w	r0, #4294967295
 800e764:	e78e      	b.n	800e684 <__sflush_r+0x1c>
 800e766:	4407      	add	r7, r0
 800e768:	eba8 0800 	sub.w	r8, r8, r0
 800e76c:	e7e9      	b.n	800e742 <__sflush_r+0xda>
 800e76e:	bf00      	nop
 800e770:	20400001 	.word	0x20400001

0800e774 <_fflush_r>:
 800e774:	b538      	push	{r3, r4, r5, lr}
 800e776:	690b      	ldr	r3, [r1, #16]
 800e778:	4605      	mov	r5, r0
 800e77a:	460c      	mov	r4, r1
 800e77c:	b913      	cbnz	r3, 800e784 <_fflush_r+0x10>
 800e77e:	2500      	movs	r5, #0
 800e780:	4628      	mov	r0, r5
 800e782:	bd38      	pop	{r3, r4, r5, pc}
 800e784:	b118      	cbz	r0, 800e78e <_fflush_r+0x1a>
 800e786:	6983      	ldr	r3, [r0, #24]
 800e788:	b90b      	cbnz	r3, 800e78e <_fflush_r+0x1a>
 800e78a:	f000 f91d 	bl	800e9c8 <__sinit>
 800e78e:	4b14      	ldr	r3, [pc, #80]	; (800e7e0 <_fflush_r+0x6c>)
 800e790:	429c      	cmp	r4, r3
 800e792:	d11b      	bne.n	800e7cc <_fflush_r+0x58>
 800e794:	686c      	ldr	r4, [r5, #4]
 800e796:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e79a:	2b00      	cmp	r3, #0
 800e79c:	d0ef      	beq.n	800e77e <_fflush_r+0xa>
 800e79e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800e7a0:	07d0      	lsls	r0, r2, #31
 800e7a2:	d404      	bmi.n	800e7ae <_fflush_r+0x3a>
 800e7a4:	0599      	lsls	r1, r3, #22
 800e7a6:	d402      	bmi.n	800e7ae <_fflush_r+0x3a>
 800e7a8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e7aa:	f000 faff 	bl	800edac <__retarget_lock_acquire_recursive>
 800e7ae:	4628      	mov	r0, r5
 800e7b0:	4621      	mov	r1, r4
 800e7b2:	f7ff ff59 	bl	800e668 <__sflush_r>
 800e7b6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e7b8:	07da      	lsls	r2, r3, #31
 800e7ba:	4605      	mov	r5, r0
 800e7bc:	d4e0      	bmi.n	800e780 <_fflush_r+0xc>
 800e7be:	89a3      	ldrh	r3, [r4, #12]
 800e7c0:	059b      	lsls	r3, r3, #22
 800e7c2:	d4dd      	bmi.n	800e780 <_fflush_r+0xc>
 800e7c4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e7c6:	f000 faf2 	bl	800edae <__retarget_lock_release_recursive>
 800e7ca:	e7d9      	b.n	800e780 <_fflush_r+0xc>
 800e7cc:	4b05      	ldr	r3, [pc, #20]	; (800e7e4 <_fflush_r+0x70>)
 800e7ce:	429c      	cmp	r4, r3
 800e7d0:	d101      	bne.n	800e7d6 <_fflush_r+0x62>
 800e7d2:	68ac      	ldr	r4, [r5, #8]
 800e7d4:	e7df      	b.n	800e796 <_fflush_r+0x22>
 800e7d6:	4b04      	ldr	r3, [pc, #16]	; (800e7e8 <_fflush_r+0x74>)
 800e7d8:	429c      	cmp	r4, r3
 800e7da:	bf08      	it	eq
 800e7dc:	68ec      	ldreq	r4, [r5, #12]
 800e7de:	e7da      	b.n	800e796 <_fflush_r+0x22>
 800e7e0:	08012294 	.word	0x08012294
 800e7e4:	080122b4 	.word	0x080122b4
 800e7e8:	08012274 	.word	0x08012274

0800e7ec <fflush>:
 800e7ec:	4601      	mov	r1, r0
 800e7ee:	b920      	cbnz	r0, 800e7fa <fflush+0xe>
 800e7f0:	4b04      	ldr	r3, [pc, #16]	; (800e804 <fflush+0x18>)
 800e7f2:	4905      	ldr	r1, [pc, #20]	; (800e808 <fflush+0x1c>)
 800e7f4:	6818      	ldr	r0, [r3, #0]
 800e7f6:	f000 ba94 	b.w	800ed22 <_fwalk_reent>
 800e7fa:	4b04      	ldr	r3, [pc, #16]	; (800e80c <fflush+0x20>)
 800e7fc:	6818      	ldr	r0, [r3, #0]
 800e7fe:	f7ff bfb9 	b.w	800e774 <_fflush_r>
 800e802:	bf00      	nop
 800e804:	080122d4 	.word	0x080122d4
 800e808:	0800e775 	.word	0x0800e775
 800e80c:	24000088 	.word	0x24000088

0800e810 <_fgets_r>:
 800e810:	2a01      	cmp	r2, #1
 800e812:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e816:	4680      	mov	r8, r0
 800e818:	460d      	mov	r5, r1
 800e81a:	4617      	mov	r7, r2
 800e81c:	461c      	mov	r4, r3
 800e81e:	dc03      	bgt.n	800e828 <_fgets_r+0x18>
 800e820:	2500      	movs	r5, #0
 800e822:	4628      	mov	r0, r5
 800e824:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e828:	b118      	cbz	r0, 800e832 <_fgets_r+0x22>
 800e82a:	6983      	ldr	r3, [r0, #24]
 800e82c:	b90b      	cbnz	r3, 800e832 <_fgets_r+0x22>
 800e82e:	f000 f8cb 	bl	800e9c8 <__sinit>
 800e832:	4b31      	ldr	r3, [pc, #196]	; (800e8f8 <_fgets_r+0xe8>)
 800e834:	429c      	cmp	r4, r3
 800e836:	d120      	bne.n	800e87a <_fgets_r+0x6a>
 800e838:	f8d8 4004 	ldr.w	r4, [r8, #4]
 800e83c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e83e:	07de      	lsls	r6, r3, #31
 800e840:	d405      	bmi.n	800e84e <_fgets_r+0x3e>
 800e842:	89a3      	ldrh	r3, [r4, #12]
 800e844:	0598      	lsls	r0, r3, #22
 800e846:	d402      	bmi.n	800e84e <_fgets_r+0x3e>
 800e848:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e84a:	f000 faaf 	bl	800edac <__retarget_lock_acquire_recursive>
 800e84e:	3f01      	subs	r7, #1
 800e850:	46a9      	mov	r9, r5
 800e852:	6866      	ldr	r6, [r4, #4]
 800e854:	b9f6      	cbnz	r6, 800e894 <_fgets_r+0x84>
 800e856:	4621      	mov	r1, r4
 800e858:	4640      	mov	r0, r8
 800e85a:	f000 fc21 	bl	800f0a0 <__srefill_r>
 800e85e:	b1c0      	cbz	r0, 800e892 <_fgets_r+0x82>
 800e860:	45a9      	cmp	r9, r5
 800e862:	d145      	bne.n	800e8f0 <_fgets_r+0xe0>
 800e864:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e866:	07d9      	lsls	r1, r3, #31
 800e868:	d4da      	bmi.n	800e820 <_fgets_r+0x10>
 800e86a:	89a5      	ldrh	r5, [r4, #12]
 800e86c:	f415 7500 	ands.w	r5, r5, #512	; 0x200
 800e870:	d1d6      	bne.n	800e820 <_fgets_r+0x10>
 800e872:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e874:	f000 fa9b 	bl	800edae <__retarget_lock_release_recursive>
 800e878:	e7d3      	b.n	800e822 <_fgets_r+0x12>
 800e87a:	4b20      	ldr	r3, [pc, #128]	; (800e8fc <_fgets_r+0xec>)
 800e87c:	429c      	cmp	r4, r3
 800e87e:	d102      	bne.n	800e886 <_fgets_r+0x76>
 800e880:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800e884:	e7da      	b.n	800e83c <_fgets_r+0x2c>
 800e886:	4b1e      	ldr	r3, [pc, #120]	; (800e900 <_fgets_r+0xf0>)
 800e888:	429c      	cmp	r4, r3
 800e88a:	bf08      	it	eq
 800e88c:	f8d8 400c 	ldreq.w	r4, [r8, #12]
 800e890:	e7d4      	b.n	800e83c <_fgets_r+0x2c>
 800e892:	6866      	ldr	r6, [r4, #4]
 800e894:	f8d4 a000 	ldr.w	sl, [r4]
 800e898:	42be      	cmp	r6, r7
 800e89a:	bf28      	it	cs
 800e89c:	463e      	movcs	r6, r7
 800e89e:	4632      	mov	r2, r6
 800e8a0:	210a      	movs	r1, #10
 800e8a2:	4650      	mov	r0, sl
 800e8a4:	f7f1 fd1c 	bl	80002e0 <memchr>
 800e8a8:	6863      	ldr	r3, [r4, #4]
 800e8aa:	b1a0      	cbz	r0, 800e8d6 <_fgets_r+0xc6>
 800e8ac:	3001      	adds	r0, #1
 800e8ae:	eba0 060a 	sub.w	r6, r0, sl
 800e8b2:	1b9b      	subs	r3, r3, r6
 800e8b4:	e9c4 0300 	strd	r0, r3, [r4]
 800e8b8:	4632      	mov	r2, r6
 800e8ba:	4651      	mov	r1, sl
 800e8bc:	4648      	mov	r0, r9
 800e8be:	f000 fadd 	bl	800ee7c <memcpy>
 800e8c2:	2300      	movs	r3, #0
 800e8c4:	f809 3006 	strb.w	r3, [r9, r6]
 800e8c8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e8ca:	07da      	lsls	r2, r3, #31
 800e8cc:	d4a9      	bmi.n	800e822 <_fgets_r+0x12>
 800e8ce:	89a3      	ldrh	r3, [r4, #12]
 800e8d0:	059b      	lsls	r3, r3, #22
 800e8d2:	d4a6      	bmi.n	800e822 <_fgets_r+0x12>
 800e8d4:	e7cd      	b.n	800e872 <_fgets_r+0x62>
 800e8d6:	1b9b      	subs	r3, r3, r6
 800e8d8:	6063      	str	r3, [r4, #4]
 800e8da:	6823      	ldr	r3, [r4, #0]
 800e8dc:	4433      	add	r3, r6
 800e8de:	4648      	mov	r0, r9
 800e8e0:	6023      	str	r3, [r4, #0]
 800e8e2:	4632      	mov	r2, r6
 800e8e4:	4651      	mov	r1, sl
 800e8e6:	f000 fac9 	bl	800ee7c <memcpy>
 800e8ea:	1bbf      	subs	r7, r7, r6
 800e8ec:	44b1      	add	r9, r6
 800e8ee:	d1b0      	bne.n	800e852 <_fgets_r+0x42>
 800e8f0:	2300      	movs	r3, #0
 800e8f2:	f889 3000 	strb.w	r3, [r9]
 800e8f6:	e7e7      	b.n	800e8c8 <_fgets_r+0xb8>
 800e8f8:	08012294 	.word	0x08012294
 800e8fc:	080122b4 	.word	0x080122b4
 800e900:	08012274 	.word	0x08012274

0800e904 <fgets>:
 800e904:	4613      	mov	r3, r2
 800e906:	460a      	mov	r2, r1
 800e908:	4601      	mov	r1, r0
 800e90a:	4802      	ldr	r0, [pc, #8]	; (800e914 <fgets+0x10>)
 800e90c:	6800      	ldr	r0, [r0, #0]
 800e90e:	f7ff bf7f 	b.w	800e810 <_fgets_r>
 800e912:	bf00      	nop
 800e914:	24000088 	.word	0x24000088

0800e918 <std>:
 800e918:	2300      	movs	r3, #0
 800e91a:	b510      	push	{r4, lr}
 800e91c:	4604      	mov	r4, r0
 800e91e:	e9c0 3300 	strd	r3, r3, [r0]
 800e922:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800e926:	6083      	str	r3, [r0, #8]
 800e928:	8181      	strh	r1, [r0, #12]
 800e92a:	6643      	str	r3, [r0, #100]	; 0x64
 800e92c:	81c2      	strh	r2, [r0, #14]
 800e92e:	6183      	str	r3, [r0, #24]
 800e930:	4619      	mov	r1, r3
 800e932:	2208      	movs	r2, #8
 800e934:	305c      	adds	r0, #92	; 0x5c
 800e936:	f000 faaf 	bl	800ee98 <memset>
 800e93a:	4b05      	ldr	r3, [pc, #20]	; (800e950 <std+0x38>)
 800e93c:	6263      	str	r3, [r4, #36]	; 0x24
 800e93e:	4b05      	ldr	r3, [pc, #20]	; (800e954 <std+0x3c>)
 800e940:	62a3      	str	r3, [r4, #40]	; 0x28
 800e942:	4b05      	ldr	r3, [pc, #20]	; (800e958 <std+0x40>)
 800e944:	62e3      	str	r3, [r4, #44]	; 0x2c
 800e946:	4b05      	ldr	r3, [pc, #20]	; (800e95c <std+0x44>)
 800e948:	6224      	str	r4, [r4, #32]
 800e94a:	6323      	str	r3, [r4, #48]	; 0x30
 800e94c:	bd10      	pop	{r4, pc}
 800e94e:	bf00      	nop
 800e950:	0800f1d5 	.word	0x0800f1d5
 800e954:	0800f1f7 	.word	0x0800f1f7
 800e958:	0800f22f 	.word	0x0800f22f
 800e95c:	0800f253 	.word	0x0800f253

0800e960 <_cleanup_r>:
 800e960:	4901      	ldr	r1, [pc, #4]	; (800e968 <_cleanup_r+0x8>)
 800e962:	f000 b9de 	b.w	800ed22 <_fwalk_reent>
 800e966:	bf00      	nop
 800e968:	0800e775 	.word	0x0800e775

0800e96c <__sfmoreglue>:
 800e96c:	b570      	push	{r4, r5, r6, lr}
 800e96e:	2268      	movs	r2, #104	; 0x68
 800e970:	1e4d      	subs	r5, r1, #1
 800e972:	4355      	muls	r5, r2
 800e974:	460e      	mov	r6, r1
 800e976:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800e97a:	f000 fb01 	bl	800ef80 <_malloc_r>
 800e97e:	4604      	mov	r4, r0
 800e980:	b140      	cbz	r0, 800e994 <__sfmoreglue+0x28>
 800e982:	2100      	movs	r1, #0
 800e984:	e9c0 1600 	strd	r1, r6, [r0]
 800e988:	300c      	adds	r0, #12
 800e98a:	60a0      	str	r0, [r4, #8]
 800e98c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800e990:	f000 fa82 	bl	800ee98 <memset>
 800e994:	4620      	mov	r0, r4
 800e996:	bd70      	pop	{r4, r5, r6, pc}

0800e998 <__sfp_lock_acquire>:
 800e998:	4801      	ldr	r0, [pc, #4]	; (800e9a0 <__sfp_lock_acquire+0x8>)
 800e99a:	f000 ba07 	b.w	800edac <__retarget_lock_acquire_recursive>
 800e99e:	bf00      	nop
 800e9a0:	24000a95 	.word	0x24000a95

0800e9a4 <__sfp_lock_release>:
 800e9a4:	4801      	ldr	r0, [pc, #4]	; (800e9ac <__sfp_lock_release+0x8>)
 800e9a6:	f000 ba02 	b.w	800edae <__retarget_lock_release_recursive>
 800e9aa:	bf00      	nop
 800e9ac:	24000a95 	.word	0x24000a95

0800e9b0 <__sinit_lock_acquire>:
 800e9b0:	4801      	ldr	r0, [pc, #4]	; (800e9b8 <__sinit_lock_acquire+0x8>)
 800e9b2:	f000 b9fb 	b.w	800edac <__retarget_lock_acquire_recursive>
 800e9b6:	bf00      	nop
 800e9b8:	24000a96 	.word	0x24000a96

0800e9bc <__sinit_lock_release>:
 800e9bc:	4801      	ldr	r0, [pc, #4]	; (800e9c4 <__sinit_lock_release+0x8>)
 800e9be:	f000 b9f6 	b.w	800edae <__retarget_lock_release_recursive>
 800e9c2:	bf00      	nop
 800e9c4:	24000a96 	.word	0x24000a96

0800e9c8 <__sinit>:
 800e9c8:	b510      	push	{r4, lr}
 800e9ca:	4604      	mov	r4, r0
 800e9cc:	f7ff fff0 	bl	800e9b0 <__sinit_lock_acquire>
 800e9d0:	69a3      	ldr	r3, [r4, #24]
 800e9d2:	b11b      	cbz	r3, 800e9dc <__sinit+0x14>
 800e9d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e9d8:	f7ff bff0 	b.w	800e9bc <__sinit_lock_release>
 800e9dc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800e9e0:	6523      	str	r3, [r4, #80]	; 0x50
 800e9e2:	4b13      	ldr	r3, [pc, #76]	; (800ea30 <__sinit+0x68>)
 800e9e4:	4a13      	ldr	r2, [pc, #76]	; (800ea34 <__sinit+0x6c>)
 800e9e6:	681b      	ldr	r3, [r3, #0]
 800e9e8:	62a2      	str	r2, [r4, #40]	; 0x28
 800e9ea:	42a3      	cmp	r3, r4
 800e9ec:	bf04      	itt	eq
 800e9ee:	2301      	moveq	r3, #1
 800e9f0:	61a3      	streq	r3, [r4, #24]
 800e9f2:	4620      	mov	r0, r4
 800e9f4:	f000 f820 	bl	800ea38 <__sfp>
 800e9f8:	6060      	str	r0, [r4, #4]
 800e9fa:	4620      	mov	r0, r4
 800e9fc:	f000 f81c 	bl	800ea38 <__sfp>
 800ea00:	60a0      	str	r0, [r4, #8]
 800ea02:	4620      	mov	r0, r4
 800ea04:	f000 f818 	bl	800ea38 <__sfp>
 800ea08:	2200      	movs	r2, #0
 800ea0a:	60e0      	str	r0, [r4, #12]
 800ea0c:	2104      	movs	r1, #4
 800ea0e:	6860      	ldr	r0, [r4, #4]
 800ea10:	f7ff ff82 	bl	800e918 <std>
 800ea14:	68a0      	ldr	r0, [r4, #8]
 800ea16:	2201      	movs	r2, #1
 800ea18:	2109      	movs	r1, #9
 800ea1a:	f7ff ff7d 	bl	800e918 <std>
 800ea1e:	68e0      	ldr	r0, [r4, #12]
 800ea20:	2202      	movs	r2, #2
 800ea22:	2112      	movs	r1, #18
 800ea24:	f7ff ff78 	bl	800e918 <std>
 800ea28:	2301      	movs	r3, #1
 800ea2a:	61a3      	str	r3, [r4, #24]
 800ea2c:	e7d2      	b.n	800e9d4 <__sinit+0xc>
 800ea2e:	bf00      	nop
 800ea30:	080122d4 	.word	0x080122d4
 800ea34:	0800e961 	.word	0x0800e961

0800ea38 <__sfp>:
 800ea38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ea3a:	4607      	mov	r7, r0
 800ea3c:	f7ff ffac 	bl	800e998 <__sfp_lock_acquire>
 800ea40:	4b1e      	ldr	r3, [pc, #120]	; (800eabc <__sfp+0x84>)
 800ea42:	681e      	ldr	r6, [r3, #0]
 800ea44:	69b3      	ldr	r3, [r6, #24]
 800ea46:	b913      	cbnz	r3, 800ea4e <__sfp+0x16>
 800ea48:	4630      	mov	r0, r6
 800ea4a:	f7ff ffbd 	bl	800e9c8 <__sinit>
 800ea4e:	3648      	adds	r6, #72	; 0x48
 800ea50:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800ea54:	3b01      	subs	r3, #1
 800ea56:	d503      	bpl.n	800ea60 <__sfp+0x28>
 800ea58:	6833      	ldr	r3, [r6, #0]
 800ea5a:	b30b      	cbz	r3, 800eaa0 <__sfp+0x68>
 800ea5c:	6836      	ldr	r6, [r6, #0]
 800ea5e:	e7f7      	b.n	800ea50 <__sfp+0x18>
 800ea60:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800ea64:	b9d5      	cbnz	r5, 800ea9c <__sfp+0x64>
 800ea66:	4b16      	ldr	r3, [pc, #88]	; (800eac0 <__sfp+0x88>)
 800ea68:	60e3      	str	r3, [r4, #12]
 800ea6a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800ea6e:	6665      	str	r5, [r4, #100]	; 0x64
 800ea70:	f000 f99a 	bl	800eda8 <__retarget_lock_init_recursive>
 800ea74:	f7ff ff96 	bl	800e9a4 <__sfp_lock_release>
 800ea78:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800ea7c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800ea80:	6025      	str	r5, [r4, #0]
 800ea82:	61a5      	str	r5, [r4, #24]
 800ea84:	2208      	movs	r2, #8
 800ea86:	4629      	mov	r1, r5
 800ea88:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800ea8c:	f000 fa04 	bl	800ee98 <memset>
 800ea90:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800ea94:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800ea98:	4620      	mov	r0, r4
 800ea9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ea9c:	3468      	adds	r4, #104	; 0x68
 800ea9e:	e7d9      	b.n	800ea54 <__sfp+0x1c>
 800eaa0:	2104      	movs	r1, #4
 800eaa2:	4638      	mov	r0, r7
 800eaa4:	f7ff ff62 	bl	800e96c <__sfmoreglue>
 800eaa8:	4604      	mov	r4, r0
 800eaaa:	6030      	str	r0, [r6, #0]
 800eaac:	2800      	cmp	r0, #0
 800eaae:	d1d5      	bne.n	800ea5c <__sfp+0x24>
 800eab0:	f7ff ff78 	bl	800e9a4 <__sfp_lock_release>
 800eab4:	230c      	movs	r3, #12
 800eab6:	603b      	str	r3, [r7, #0]
 800eab8:	e7ee      	b.n	800ea98 <__sfp+0x60>
 800eaba:	bf00      	nop
 800eabc:	080122d4 	.word	0x080122d4
 800eac0:	ffff0001 	.word	0xffff0001

0800eac4 <_fopen_r>:
 800eac4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800eac6:	460f      	mov	r7, r1
 800eac8:	4611      	mov	r1, r2
 800eaca:	aa01      	add	r2, sp, #4
 800eacc:	4605      	mov	r5, r0
 800eace:	f001 f9c3 	bl	800fe58 <__sflags>
 800ead2:	4606      	mov	r6, r0
 800ead4:	b918      	cbnz	r0, 800eade <_fopen_r+0x1a>
 800ead6:	2400      	movs	r4, #0
 800ead8:	4620      	mov	r0, r4
 800eada:	b003      	add	sp, #12
 800eadc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800eade:	4628      	mov	r0, r5
 800eae0:	f7ff ffaa 	bl	800ea38 <__sfp>
 800eae4:	4604      	mov	r4, r0
 800eae6:	2800      	cmp	r0, #0
 800eae8:	d0f5      	beq.n	800ead6 <_fopen_r+0x12>
 800eaea:	4639      	mov	r1, r7
 800eaec:	9a01      	ldr	r2, [sp, #4]
 800eaee:	f44f 73db 	mov.w	r3, #438	; 0x1b6
 800eaf2:	4628      	mov	r0, r5
 800eaf4:	f000 fab8 	bl	800f068 <_open_r>
 800eaf8:	1e07      	subs	r7, r0, #0
 800eafa:	da09      	bge.n	800eb10 <_fopen_r+0x4c>
 800eafc:	2500      	movs	r5, #0
 800eafe:	f7ff ff4b 	bl	800e998 <__sfp_lock_acquire>
 800eb02:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800eb04:	81a5      	strh	r5, [r4, #12]
 800eb06:	f000 f950 	bl	800edaa <__retarget_lock_close_recursive>
 800eb0a:	f7ff ff4b 	bl	800e9a4 <__sfp_lock_release>
 800eb0e:	e7e2      	b.n	800ead6 <_fopen_r+0x12>
 800eb10:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800eb12:	07db      	lsls	r3, r3, #31
 800eb14:	d405      	bmi.n	800eb22 <_fopen_r+0x5e>
 800eb16:	89a3      	ldrh	r3, [r4, #12]
 800eb18:	0598      	lsls	r0, r3, #22
 800eb1a:	d402      	bmi.n	800eb22 <_fopen_r+0x5e>
 800eb1c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800eb1e:	f000 f945 	bl	800edac <__retarget_lock_acquire_recursive>
 800eb22:	4b0e      	ldr	r3, [pc, #56]	; (800eb5c <_fopen_r+0x98>)
 800eb24:	6263      	str	r3, [r4, #36]	; 0x24
 800eb26:	4b0e      	ldr	r3, [pc, #56]	; (800eb60 <_fopen_r+0x9c>)
 800eb28:	62a3      	str	r3, [r4, #40]	; 0x28
 800eb2a:	4b0e      	ldr	r3, [pc, #56]	; (800eb64 <_fopen_r+0xa0>)
 800eb2c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800eb2e:	05f1      	lsls	r1, r6, #23
 800eb30:	4b0d      	ldr	r3, [pc, #52]	; (800eb68 <_fopen_r+0xa4>)
 800eb32:	81e7      	strh	r7, [r4, #14]
 800eb34:	81a6      	strh	r6, [r4, #12]
 800eb36:	6224      	str	r4, [r4, #32]
 800eb38:	6323      	str	r3, [r4, #48]	; 0x30
 800eb3a:	d505      	bpl.n	800eb48 <_fopen_r+0x84>
 800eb3c:	2302      	movs	r3, #2
 800eb3e:	2200      	movs	r2, #0
 800eb40:	4621      	mov	r1, r4
 800eb42:	4628      	mov	r0, r5
 800eb44:	f000 f81a 	bl	800eb7c <_fseek_r>
 800eb48:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800eb4a:	07da      	lsls	r2, r3, #31
 800eb4c:	d4c4      	bmi.n	800ead8 <_fopen_r+0x14>
 800eb4e:	89a3      	ldrh	r3, [r4, #12]
 800eb50:	059b      	lsls	r3, r3, #22
 800eb52:	d4c1      	bmi.n	800ead8 <_fopen_r+0x14>
 800eb54:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800eb56:	f000 f92a 	bl	800edae <__retarget_lock_release_recursive>
 800eb5a:	e7bd      	b.n	800ead8 <_fopen_r+0x14>
 800eb5c:	0800f1d5 	.word	0x0800f1d5
 800eb60:	0800f1f7 	.word	0x0800f1f7
 800eb64:	0800f22f 	.word	0x0800f22f
 800eb68:	0800f253 	.word	0x0800f253

0800eb6c <fopen>:
 800eb6c:	4b02      	ldr	r3, [pc, #8]	; (800eb78 <fopen+0xc>)
 800eb6e:	460a      	mov	r2, r1
 800eb70:	4601      	mov	r1, r0
 800eb72:	6818      	ldr	r0, [r3, #0]
 800eb74:	f7ff bfa6 	b.w	800eac4 <_fopen_r>
 800eb78:	24000088 	.word	0x24000088

0800eb7c <_fseek_r>:
 800eb7c:	f000 b800 	b.w	800eb80 <_fseeko_r>

0800eb80 <_fseeko_r>:
 800eb80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800eb84:	460c      	mov	r4, r1
 800eb86:	4617      	mov	r7, r2
 800eb88:	461d      	mov	r5, r3
 800eb8a:	4606      	mov	r6, r0
 800eb8c:	b118      	cbz	r0, 800eb96 <_fseeko_r+0x16>
 800eb8e:	6983      	ldr	r3, [r0, #24]
 800eb90:	b90b      	cbnz	r3, 800eb96 <_fseeko_r+0x16>
 800eb92:	f7ff ff19 	bl	800e9c8 <__sinit>
 800eb96:	4b51      	ldr	r3, [pc, #324]	; (800ecdc <_fseeko_r+0x15c>)
 800eb98:	429c      	cmp	r4, r3
 800eb9a:	d122      	bne.n	800ebe2 <_fseeko_r+0x62>
 800eb9c:	6874      	ldr	r4, [r6, #4]
 800eb9e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800eba0:	07d9      	lsls	r1, r3, #31
 800eba2:	d405      	bmi.n	800ebb0 <_fseeko_r+0x30>
 800eba4:	89a3      	ldrh	r3, [r4, #12]
 800eba6:	059a      	lsls	r2, r3, #22
 800eba8:	d402      	bmi.n	800ebb0 <_fseeko_r+0x30>
 800ebaa:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ebac:	f000 f8fe 	bl	800edac <__retarget_lock_acquire_recursive>
 800ebb0:	89a3      	ldrh	r3, [r4, #12]
 800ebb2:	f403 7384 	and.w	r3, r3, #264	; 0x108
 800ebb6:	f5b3 7f84 	cmp.w	r3, #264	; 0x108
 800ebba:	d103      	bne.n	800ebc4 <_fseeko_r+0x44>
 800ebbc:	4621      	mov	r1, r4
 800ebbe:	4630      	mov	r0, r6
 800ebc0:	f7ff fdd8 	bl	800e774 <_fflush_r>
 800ebc4:	f8d4 802c 	ldr.w	r8, [r4, #44]	; 0x2c
 800ebc8:	f1b8 0f00 	cmp.w	r8, #0
 800ebcc:	d113      	bne.n	800ebf6 <_fseeko_r+0x76>
 800ebce:	231d      	movs	r3, #29
 800ebd0:	6033      	str	r3, [r6, #0]
 800ebd2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ebd4:	07d9      	lsls	r1, r3, #31
 800ebd6:	d578      	bpl.n	800ecca <_fseeko_r+0x14a>
 800ebd8:	f04f 35ff 	mov.w	r5, #4294967295
 800ebdc:	4628      	mov	r0, r5
 800ebde:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ebe2:	4b3f      	ldr	r3, [pc, #252]	; (800ece0 <_fseeko_r+0x160>)
 800ebe4:	429c      	cmp	r4, r3
 800ebe6:	d101      	bne.n	800ebec <_fseeko_r+0x6c>
 800ebe8:	68b4      	ldr	r4, [r6, #8]
 800ebea:	e7d8      	b.n	800eb9e <_fseeko_r+0x1e>
 800ebec:	4b3d      	ldr	r3, [pc, #244]	; (800ece4 <_fseeko_r+0x164>)
 800ebee:	429c      	cmp	r4, r3
 800ebf0:	bf08      	it	eq
 800ebf2:	68f4      	ldreq	r4, [r6, #12]
 800ebf4:	e7d3      	b.n	800eb9e <_fseeko_r+0x1e>
 800ebf6:	2d01      	cmp	r5, #1
 800ebf8:	d036      	beq.n	800ec68 <_fseeko_r+0xe8>
 800ebfa:	f035 0302 	bics.w	r3, r5, #2
 800ebfe:	d162      	bne.n	800ecc6 <_fseeko_r+0x146>
 800ec00:	6923      	ldr	r3, [r4, #16]
 800ec02:	b91b      	cbnz	r3, 800ec0c <_fseeko_r+0x8c>
 800ec04:	4621      	mov	r1, r4
 800ec06:	4630      	mov	r0, r6
 800ec08:	f000 f8f8 	bl	800edfc <__smakebuf_r>
 800ec0c:	4621      	mov	r1, r4
 800ec0e:	4630      	mov	r0, r6
 800ec10:	f7ff fdb0 	bl	800e774 <_fflush_r>
 800ec14:	2800      	cmp	r0, #0
 800ec16:	d1dc      	bne.n	800ebd2 <_fseeko_r+0x52>
 800ec18:	6a21      	ldr	r1, [r4, #32]
 800ec1a:	462b      	mov	r3, r5
 800ec1c:	463a      	mov	r2, r7
 800ec1e:	4630      	mov	r0, r6
 800ec20:	47c0      	blx	r8
 800ec22:	3001      	adds	r0, #1
 800ec24:	d0d5      	beq.n	800ebd2 <_fseeko_r+0x52>
 800ec26:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ec28:	b141      	cbz	r1, 800ec3c <_fseeko_r+0xbc>
 800ec2a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ec2e:	4299      	cmp	r1, r3
 800ec30:	d002      	beq.n	800ec38 <_fseeko_r+0xb8>
 800ec32:	4630      	mov	r0, r6
 800ec34:	f000 f938 	bl	800eea8 <_free_r>
 800ec38:	2300      	movs	r3, #0
 800ec3a:	6363      	str	r3, [r4, #52]	; 0x34
 800ec3c:	6923      	ldr	r3, [r4, #16]
 800ec3e:	6023      	str	r3, [r4, #0]
 800ec40:	89a3      	ldrh	r3, [r4, #12]
 800ec42:	2600      	movs	r6, #0
 800ec44:	f423 6302 	bic.w	r3, r3, #2080	; 0x820
 800ec48:	6066      	str	r6, [r4, #4]
 800ec4a:	81a3      	strh	r3, [r4, #12]
 800ec4c:	2208      	movs	r2, #8
 800ec4e:	4631      	mov	r1, r6
 800ec50:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800ec54:	f000 f920 	bl	800ee98 <memset>
 800ec58:	6e65      	ldr	r5, [r4, #100]	; 0x64
 800ec5a:	f015 0501 	ands.w	r5, r5, #1
 800ec5e:	d13b      	bne.n	800ecd8 <_fseeko_r+0x158>
 800ec60:	89a3      	ldrh	r3, [r4, #12]
 800ec62:	059b      	lsls	r3, r3, #22
 800ec64:	d4ba      	bmi.n	800ebdc <_fseeko_r+0x5c>
 800ec66:	e021      	b.n	800ecac <_fseeko_r+0x12c>
 800ec68:	4621      	mov	r1, r4
 800ec6a:	4630      	mov	r0, r6
 800ec6c:	f7ff fd82 	bl	800e774 <_fflush_r>
 800ec70:	89a2      	ldrh	r2, [r4, #12]
 800ec72:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800ec76:	d00c      	beq.n	800ec92 <_fseeko_r+0x112>
 800ec78:	6d65      	ldr	r5, [r4, #84]	; 0x54
 800ec7a:	89a3      	ldrh	r3, [r4, #12]
 800ec7c:	075a      	lsls	r2, r3, #29
 800ec7e:	d519      	bpl.n	800ecb4 <_fseeko_r+0x134>
 800ec80:	6863      	ldr	r3, [r4, #4]
 800ec82:	1aed      	subs	r5, r5, r3
 800ec84:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ec86:	b10b      	cbz	r3, 800ec8c <_fseeko_r+0x10c>
 800ec88:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800ec8a:	1aed      	subs	r5, r5, r3
 800ec8c:	442f      	add	r7, r5
 800ec8e:	2500      	movs	r5, #0
 800ec90:	e7b6      	b.n	800ec00 <_fseeko_r+0x80>
 800ec92:	462b      	mov	r3, r5
 800ec94:	6a21      	ldr	r1, [r4, #32]
 800ec96:	4630      	mov	r0, r6
 800ec98:	47c0      	blx	r8
 800ec9a:	1c43      	adds	r3, r0, #1
 800ec9c:	4605      	mov	r5, r0
 800ec9e:	d1ec      	bne.n	800ec7a <_fseeko_r+0xfa>
 800eca0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800eca2:	07d8      	lsls	r0, r3, #31
 800eca4:	d498      	bmi.n	800ebd8 <_fseeko_r+0x58>
 800eca6:	89a3      	ldrh	r3, [r4, #12]
 800eca8:	0599      	lsls	r1, r3, #22
 800ecaa:	d495      	bmi.n	800ebd8 <_fseeko_r+0x58>
 800ecac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ecae:	f000 f87e 	bl	800edae <__retarget_lock_release_recursive>
 800ecb2:	e793      	b.n	800ebdc <_fseeko_r+0x5c>
 800ecb4:	0718      	lsls	r0, r3, #28
 800ecb6:	d5e9      	bpl.n	800ec8c <_fseeko_r+0x10c>
 800ecb8:	6823      	ldr	r3, [r4, #0]
 800ecba:	6922      	ldr	r2, [r4, #16]
 800ecbc:	2b00      	cmp	r3, #0
 800ecbe:	d0e5      	beq.n	800ec8c <_fseeko_r+0x10c>
 800ecc0:	1a9b      	subs	r3, r3, r2
 800ecc2:	441d      	add	r5, r3
 800ecc4:	e7e2      	b.n	800ec8c <_fseeko_r+0x10c>
 800ecc6:	2316      	movs	r3, #22
 800ecc8:	e782      	b.n	800ebd0 <_fseeko_r+0x50>
 800ecca:	89a3      	ldrh	r3, [r4, #12]
 800eccc:	059a      	lsls	r2, r3, #22
 800ecce:	d483      	bmi.n	800ebd8 <_fseeko_r+0x58>
 800ecd0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ecd2:	f000 f86c 	bl	800edae <__retarget_lock_release_recursive>
 800ecd6:	e77f      	b.n	800ebd8 <_fseeko_r+0x58>
 800ecd8:	4635      	mov	r5, r6
 800ecda:	e77f      	b.n	800ebdc <_fseeko_r+0x5c>
 800ecdc:	08012294 	.word	0x08012294
 800ece0:	080122b4 	.word	0x080122b4
 800ece4:	08012274 	.word	0x08012274

0800ece8 <_fwalk>:
 800ece8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ecec:	460f      	mov	r7, r1
 800ecee:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800ecf2:	2600      	movs	r6, #0
 800ecf4:	e9d4 8501 	ldrd	r8, r5, [r4, #4]
 800ecf8:	f1b8 0801 	subs.w	r8, r8, #1
 800ecfc:	d505      	bpl.n	800ed0a <_fwalk+0x22>
 800ecfe:	6824      	ldr	r4, [r4, #0]
 800ed00:	2c00      	cmp	r4, #0
 800ed02:	d1f7      	bne.n	800ecf4 <_fwalk+0xc>
 800ed04:	4630      	mov	r0, r6
 800ed06:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ed0a:	89ab      	ldrh	r3, [r5, #12]
 800ed0c:	2b01      	cmp	r3, #1
 800ed0e:	d906      	bls.n	800ed1e <_fwalk+0x36>
 800ed10:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ed14:	3301      	adds	r3, #1
 800ed16:	d002      	beq.n	800ed1e <_fwalk+0x36>
 800ed18:	4628      	mov	r0, r5
 800ed1a:	47b8      	blx	r7
 800ed1c:	4306      	orrs	r6, r0
 800ed1e:	3568      	adds	r5, #104	; 0x68
 800ed20:	e7ea      	b.n	800ecf8 <_fwalk+0x10>

0800ed22 <_fwalk_reent>:
 800ed22:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ed26:	4606      	mov	r6, r0
 800ed28:	4688      	mov	r8, r1
 800ed2a:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800ed2e:	2700      	movs	r7, #0
 800ed30:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ed34:	f1b9 0901 	subs.w	r9, r9, #1
 800ed38:	d505      	bpl.n	800ed46 <_fwalk_reent+0x24>
 800ed3a:	6824      	ldr	r4, [r4, #0]
 800ed3c:	2c00      	cmp	r4, #0
 800ed3e:	d1f7      	bne.n	800ed30 <_fwalk_reent+0xe>
 800ed40:	4638      	mov	r0, r7
 800ed42:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ed46:	89ab      	ldrh	r3, [r5, #12]
 800ed48:	2b01      	cmp	r3, #1
 800ed4a:	d907      	bls.n	800ed5c <_fwalk_reent+0x3a>
 800ed4c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ed50:	3301      	adds	r3, #1
 800ed52:	d003      	beq.n	800ed5c <_fwalk_reent+0x3a>
 800ed54:	4629      	mov	r1, r5
 800ed56:	4630      	mov	r0, r6
 800ed58:	47c0      	blx	r8
 800ed5a:	4307      	orrs	r7, r0
 800ed5c:	3568      	adds	r5, #104	; 0x68
 800ed5e:	e7e9      	b.n	800ed34 <_fwalk_reent+0x12>

0800ed60 <__libc_init_array>:
 800ed60:	b570      	push	{r4, r5, r6, lr}
 800ed62:	4d0d      	ldr	r5, [pc, #52]	; (800ed98 <__libc_init_array+0x38>)
 800ed64:	4c0d      	ldr	r4, [pc, #52]	; (800ed9c <__libc_init_array+0x3c>)
 800ed66:	1b64      	subs	r4, r4, r5
 800ed68:	10a4      	asrs	r4, r4, #2
 800ed6a:	2600      	movs	r6, #0
 800ed6c:	42a6      	cmp	r6, r4
 800ed6e:	d109      	bne.n	800ed84 <__libc_init_array+0x24>
 800ed70:	4d0b      	ldr	r5, [pc, #44]	; (800eda0 <__libc_init_array+0x40>)
 800ed72:	4c0c      	ldr	r4, [pc, #48]	; (800eda4 <__libc_init_array+0x44>)
 800ed74:	f003 fa0e 	bl	8012194 <_init>
 800ed78:	1b64      	subs	r4, r4, r5
 800ed7a:	10a4      	asrs	r4, r4, #2
 800ed7c:	2600      	movs	r6, #0
 800ed7e:	42a6      	cmp	r6, r4
 800ed80:	d105      	bne.n	800ed8e <__libc_init_array+0x2e>
 800ed82:	bd70      	pop	{r4, r5, r6, pc}
 800ed84:	f855 3b04 	ldr.w	r3, [r5], #4
 800ed88:	4798      	blx	r3
 800ed8a:	3601      	adds	r6, #1
 800ed8c:	e7ee      	b.n	800ed6c <__libc_init_array+0xc>
 800ed8e:	f855 3b04 	ldr.w	r3, [r5], #4
 800ed92:	4798      	blx	r3
 800ed94:	3601      	adds	r6, #1
 800ed96:	e7f2      	b.n	800ed7e <__libc_init_array+0x1e>
 800ed98:	08013f68 	.word	0x08013f68
 800ed9c:	08013f68 	.word	0x08013f68
 800eda0:	08013f68 	.word	0x08013f68
 800eda4:	08013f6c 	.word	0x08013f6c

0800eda8 <__retarget_lock_init_recursive>:
 800eda8:	4770      	bx	lr

0800edaa <__retarget_lock_close_recursive>:
 800edaa:	4770      	bx	lr

0800edac <__retarget_lock_acquire_recursive>:
 800edac:	4770      	bx	lr

0800edae <__retarget_lock_release_recursive>:
 800edae:	4770      	bx	lr

0800edb0 <__swhatbuf_r>:
 800edb0:	b570      	push	{r4, r5, r6, lr}
 800edb2:	460e      	mov	r6, r1
 800edb4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800edb8:	2900      	cmp	r1, #0
 800edba:	b096      	sub	sp, #88	; 0x58
 800edbc:	4614      	mov	r4, r2
 800edbe:	461d      	mov	r5, r3
 800edc0:	da08      	bge.n	800edd4 <__swhatbuf_r+0x24>
 800edc2:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800edc6:	2200      	movs	r2, #0
 800edc8:	602a      	str	r2, [r5, #0]
 800edca:	061a      	lsls	r2, r3, #24
 800edcc:	d410      	bmi.n	800edf0 <__swhatbuf_r+0x40>
 800edce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800edd2:	e00e      	b.n	800edf2 <__swhatbuf_r+0x42>
 800edd4:	466a      	mov	r2, sp
 800edd6:	f001 f875 	bl	800fec4 <_fstat_r>
 800edda:	2800      	cmp	r0, #0
 800eddc:	dbf1      	blt.n	800edc2 <__swhatbuf_r+0x12>
 800edde:	9a01      	ldr	r2, [sp, #4]
 800ede0:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800ede4:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800ede8:	425a      	negs	r2, r3
 800edea:	415a      	adcs	r2, r3
 800edec:	602a      	str	r2, [r5, #0]
 800edee:	e7ee      	b.n	800edce <__swhatbuf_r+0x1e>
 800edf0:	2340      	movs	r3, #64	; 0x40
 800edf2:	2000      	movs	r0, #0
 800edf4:	6023      	str	r3, [r4, #0]
 800edf6:	b016      	add	sp, #88	; 0x58
 800edf8:	bd70      	pop	{r4, r5, r6, pc}
	...

0800edfc <__smakebuf_r>:
 800edfc:	898b      	ldrh	r3, [r1, #12]
 800edfe:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800ee00:	079d      	lsls	r5, r3, #30
 800ee02:	4606      	mov	r6, r0
 800ee04:	460c      	mov	r4, r1
 800ee06:	d507      	bpl.n	800ee18 <__smakebuf_r+0x1c>
 800ee08:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800ee0c:	6023      	str	r3, [r4, #0]
 800ee0e:	6123      	str	r3, [r4, #16]
 800ee10:	2301      	movs	r3, #1
 800ee12:	6163      	str	r3, [r4, #20]
 800ee14:	b002      	add	sp, #8
 800ee16:	bd70      	pop	{r4, r5, r6, pc}
 800ee18:	ab01      	add	r3, sp, #4
 800ee1a:	466a      	mov	r2, sp
 800ee1c:	f7ff ffc8 	bl	800edb0 <__swhatbuf_r>
 800ee20:	9900      	ldr	r1, [sp, #0]
 800ee22:	4605      	mov	r5, r0
 800ee24:	4630      	mov	r0, r6
 800ee26:	f000 f8ab 	bl	800ef80 <_malloc_r>
 800ee2a:	b948      	cbnz	r0, 800ee40 <__smakebuf_r+0x44>
 800ee2c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ee30:	059a      	lsls	r2, r3, #22
 800ee32:	d4ef      	bmi.n	800ee14 <__smakebuf_r+0x18>
 800ee34:	f023 0303 	bic.w	r3, r3, #3
 800ee38:	f043 0302 	orr.w	r3, r3, #2
 800ee3c:	81a3      	strh	r3, [r4, #12]
 800ee3e:	e7e3      	b.n	800ee08 <__smakebuf_r+0xc>
 800ee40:	4b0d      	ldr	r3, [pc, #52]	; (800ee78 <__smakebuf_r+0x7c>)
 800ee42:	62b3      	str	r3, [r6, #40]	; 0x28
 800ee44:	89a3      	ldrh	r3, [r4, #12]
 800ee46:	6020      	str	r0, [r4, #0]
 800ee48:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ee4c:	81a3      	strh	r3, [r4, #12]
 800ee4e:	9b00      	ldr	r3, [sp, #0]
 800ee50:	6163      	str	r3, [r4, #20]
 800ee52:	9b01      	ldr	r3, [sp, #4]
 800ee54:	6120      	str	r0, [r4, #16]
 800ee56:	b15b      	cbz	r3, 800ee70 <__smakebuf_r+0x74>
 800ee58:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ee5c:	4630      	mov	r0, r6
 800ee5e:	f001 fbb3 	bl	80105c8 <_isatty_r>
 800ee62:	b128      	cbz	r0, 800ee70 <__smakebuf_r+0x74>
 800ee64:	89a3      	ldrh	r3, [r4, #12]
 800ee66:	f023 0303 	bic.w	r3, r3, #3
 800ee6a:	f043 0301 	orr.w	r3, r3, #1
 800ee6e:	81a3      	strh	r3, [r4, #12]
 800ee70:	89a0      	ldrh	r0, [r4, #12]
 800ee72:	4305      	orrs	r5, r0
 800ee74:	81a5      	strh	r5, [r4, #12]
 800ee76:	e7cd      	b.n	800ee14 <__smakebuf_r+0x18>
 800ee78:	0800e961 	.word	0x0800e961

0800ee7c <memcpy>:
 800ee7c:	440a      	add	r2, r1
 800ee7e:	4291      	cmp	r1, r2
 800ee80:	f100 33ff 	add.w	r3, r0, #4294967295
 800ee84:	d100      	bne.n	800ee88 <memcpy+0xc>
 800ee86:	4770      	bx	lr
 800ee88:	b510      	push	{r4, lr}
 800ee8a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ee8e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ee92:	4291      	cmp	r1, r2
 800ee94:	d1f9      	bne.n	800ee8a <memcpy+0xe>
 800ee96:	bd10      	pop	{r4, pc}

0800ee98 <memset>:
 800ee98:	4402      	add	r2, r0
 800ee9a:	4603      	mov	r3, r0
 800ee9c:	4293      	cmp	r3, r2
 800ee9e:	d100      	bne.n	800eea2 <memset+0xa>
 800eea0:	4770      	bx	lr
 800eea2:	f803 1b01 	strb.w	r1, [r3], #1
 800eea6:	e7f9      	b.n	800ee9c <memset+0x4>

0800eea8 <_free_r>:
 800eea8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800eeaa:	2900      	cmp	r1, #0
 800eeac:	d044      	beq.n	800ef38 <_free_r+0x90>
 800eeae:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800eeb2:	9001      	str	r0, [sp, #4]
 800eeb4:	2b00      	cmp	r3, #0
 800eeb6:	f1a1 0404 	sub.w	r4, r1, #4
 800eeba:	bfb8      	it	lt
 800eebc:	18e4      	addlt	r4, r4, r3
 800eebe:	f001 fbb7 	bl	8010630 <__malloc_lock>
 800eec2:	4a1e      	ldr	r2, [pc, #120]	; (800ef3c <_free_r+0x94>)
 800eec4:	9801      	ldr	r0, [sp, #4]
 800eec6:	6813      	ldr	r3, [r2, #0]
 800eec8:	b933      	cbnz	r3, 800eed8 <_free_r+0x30>
 800eeca:	6063      	str	r3, [r4, #4]
 800eecc:	6014      	str	r4, [r2, #0]
 800eece:	b003      	add	sp, #12
 800eed0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800eed4:	f001 bbb2 	b.w	801063c <__malloc_unlock>
 800eed8:	42a3      	cmp	r3, r4
 800eeda:	d908      	bls.n	800eeee <_free_r+0x46>
 800eedc:	6825      	ldr	r5, [r4, #0]
 800eede:	1961      	adds	r1, r4, r5
 800eee0:	428b      	cmp	r3, r1
 800eee2:	bf01      	itttt	eq
 800eee4:	6819      	ldreq	r1, [r3, #0]
 800eee6:	685b      	ldreq	r3, [r3, #4]
 800eee8:	1949      	addeq	r1, r1, r5
 800eeea:	6021      	streq	r1, [r4, #0]
 800eeec:	e7ed      	b.n	800eeca <_free_r+0x22>
 800eeee:	461a      	mov	r2, r3
 800eef0:	685b      	ldr	r3, [r3, #4]
 800eef2:	b10b      	cbz	r3, 800eef8 <_free_r+0x50>
 800eef4:	42a3      	cmp	r3, r4
 800eef6:	d9fa      	bls.n	800eeee <_free_r+0x46>
 800eef8:	6811      	ldr	r1, [r2, #0]
 800eefa:	1855      	adds	r5, r2, r1
 800eefc:	42a5      	cmp	r5, r4
 800eefe:	d10b      	bne.n	800ef18 <_free_r+0x70>
 800ef00:	6824      	ldr	r4, [r4, #0]
 800ef02:	4421      	add	r1, r4
 800ef04:	1854      	adds	r4, r2, r1
 800ef06:	42a3      	cmp	r3, r4
 800ef08:	6011      	str	r1, [r2, #0]
 800ef0a:	d1e0      	bne.n	800eece <_free_r+0x26>
 800ef0c:	681c      	ldr	r4, [r3, #0]
 800ef0e:	685b      	ldr	r3, [r3, #4]
 800ef10:	6053      	str	r3, [r2, #4]
 800ef12:	4421      	add	r1, r4
 800ef14:	6011      	str	r1, [r2, #0]
 800ef16:	e7da      	b.n	800eece <_free_r+0x26>
 800ef18:	d902      	bls.n	800ef20 <_free_r+0x78>
 800ef1a:	230c      	movs	r3, #12
 800ef1c:	6003      	str	r3, [r0, #0]
 800ef1e:	e7d6      	b.n	800eece <_free_r+0x26>
 800ef20:	6825      	ldr	r5, [r4, #0]
 800ef22:	1961      	adds	r1, r4, r5
 800ef24:	428b      	cmp	r3, r1
 800ef26:	bf04      	itt	eq
 800ef28:	6819      	ldreq	r1, [r3, #0]
 800ef2a:	685b      	ldreq	r3, [r3, #4]
 800ef2c:	6063      	str	r3, [r4, #4]
 800ef2e:	bf04      	itt	eq
 800ef30:	1949      	addeq	r1, r1, r5
 800ef32:	6021      	streq	r1, [r4, #0]
 800ef34:	6054      	str	r4, [r2, #4]
 800ef36:	e7ca      	b.n	800eece <_free_r+0x26>
 800ef38:	b003      	add	sp, #12
 800ef3a:	bd30      	pop	{r4, r5, pc}
 800ef3c:	24000a98 	.word	0x24000a98

0800ef40 <sbrk_aligned>:
 800ef40:	b570      	push	{r4, r5, r6, lr}
 800ef42:	4e0e      	ldr	r6, [pc, #56]	; (800ef7c <sbrk_aligned+0x3c>)
 800ef44:	460c      	mov	r4, r1
 800ef46:	6831      	ldr	r1, [r6, #0]
 800ef48:	4605      	mov	r5, r0
 800ef4a:	b911      	cbnz	r1, 800ef52 <sbrk_aligned+0x12>
 800ef4c:	f000 f932 	bl	800f1b4 <_sbrk_r>
 800ef50:	6030      	str	r0, [r6, #0]
 800ef52:	4621      	mov	r1, r4
 800ef54:	4628      	mov	r0, r5
 800ef56:	f000 f92d 	bl	800f1b4 <_sbrk_r>
 800ef5a:	1c43      	adds	r3, r0, #1
 800ef5c:	d00a      	beq.n	800ef74 <sbrk_aligned+0x34>
 800ef5e:	1cc4      	adds	r4, r0, #3
 800ef60:	f024 0403 	bic.w	r4, r4, #3
 800ef64:	42a0      	cmp	r0, r4
 800ef66:	d007      	beq.n	800ef78 <sbrk_aligned+0x38>
 800ef68:	1a21      	subs	r1, r4, r0
 800ef6a:	4628      	mov	r0, r5
 800ef6c:	f000 f922 	bl	800f1b4 <_sbrk_r>
 800ef70:	3001      	adds	r0, #1
 800ef72:	d101      	bne.n	800ef78 <sbrk_aligned+0x38>
 800ef74:	f04f 34ff 	mov.w	r4, #4294967295
 800ef78:	4620      	mov	r0, r4
 800ef7a:	bd70      	pop	{r4, r5, r6, pc}
 800ef7c:	24000a9c 	.word	0x24000a9c

0800ef80 <_malloc_r>:
 800ef80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ef84:	1ccd      	adds	r5, r1, #3
 800ef86:	f025 0503 	bic.w	r5, r5, #3
 800ef8a:	3508      	adds	r5, #8
 800ef8c:	2d0c      	cmp	r5, #12
 800ef8e:	bf38      	it	cc
 800ef90:	250c      	movcc	r5, #12
 800ef92:	2d00      	cmp	r5, #0
 800ef94:	4607      	mov	r7, r0
 800ef96:	db01      	blt.n	800ef9c <_malloc_r+0x1c>
 800ef98:	42a9      	cmp	r1, r5
 800ef9a:	d905      	bls.n	800efa8 <_malloc_r+0x28>
 800ef9c:	230c      	movs	r3, #12
 800ef9e:	603b      	str	r3, [r7, #0]
 800efa0:	2600      	movs	r6, #0
 800efa2:	4630      	mov	r0, r6
 800efa4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800efa8:	4e2e      	ldr	r6, [pc, #184]	; (800f064 <_malloc_r+0xe4>)
 800efaa:	f001 fb41 	bl	8010630 <__malloc_lock>
 800efae:	6833      	ldr	r3, [r6, #0]
 800efb0:	461c      	mov	r4, r3
 800efb2:	bb34      	cbnz	r4, 800f002 <_malloc_r+0x82>
 800efb4:	4629      	mov	r1, r5
 800efb6:	4638      	mov	r0, r7
 800efb8:	f7ff ffc2 	bl	800ef40 <sbrk_aligned>
 800efbc:	1c43      	adds	r3, r0, #1
 800efbe:	4604      	mov	r4, r0
 800efc0:	d14d      	bne.n	800f05e <_malloc_r+0xde>
 800efc2:	6834      	ldr	r4, [r6, #0]
 800efc4:	4626      	mov	r6, r4
 800efc6:	2e00      	cmp	r6, #0
 800efc8:	d140      	bne.n	800f04c <_malloc_r+0xcc>
 800efca:	6823      	ldr	r3, [r4, #0]
 800efcc:	4631      	mov	r1, r6
 800efce:	4638      	mov	r0, r7
 800efd0:	eb04 0803 	add.w	r8, r4, r3
 800efd4:	f000 f8ee 	bl	800f1b4 <_sbrk_r>
 800efd8:	4580      	cmp	r8, r0
 800efda:	d13a      	bne.n	800f052 <_malloc_r+0xd2>
 800efdc:	6821      	ldr	r1, [r4, #0]
 800efde:	3503      	adds	r5, #3
 800efe0:	1a6d      	subs	r5, r5, r1
 800efe2:	f025 0503 	bic.w	r5, r5, #3
 800efe6:	3508      	adds	r5, #8
 800efe8:	2d0c      	cmp	r5, #12
 800efea:	bf38      	it	cc
 800efec:	250c      	movcc	r5, #12
 800efee:	4629      	mov	r1, r5
 800eff0:	4638      	mov	r0, r7
 800eff2:	f7ff ffa5 	bl	800ef40 <sbrk_aligned>
 800eff6:	3001      	adds	r0, #1
 800eff8:	d02b      	beq.n	800f052 <_malloc_r+0xd2>
 800effa:	6823      	ldr	r3, [r4, #0]
 800effc:	442b      	add	r3, r5
 800effe:	6023      	str	r3, [r4, #0]
 800f000:	e00e      	b.n	800f020 <_malloc_r+0xa0>
 800f002:	6822      	ldr	r2, [r4, #0]
 800f004:	1b52      	subs	r2, r2, r5
 800f006:	d41e      	bmi.n	800f046 <_malloc_r+0xc6>
 800f008:	2a0b      	cmp	r2, #11
 800f00a:	d916      	bls.n	800f03a <_malloc_r+0xba>
 800f00c:	1961      	adds	r1, r4, r5
 800f00e:	42a3      	cmp	r3, r4
 800f010:	6025      	str	r5, [r4, #0]
 800f012:	bf18      	it	ne
 800f014:	6059      	strne	r1, [r3, #4]
 800f016:	6863      	ldr	r3, [r4, #4]
 800f018:	bf08      	it	eq
 800f01a:	6031      	streq	r1, [r6, #0]
 800f01c:	5162      	str	r2, [r4, r5]
 800f01e:	604b      	str	r3, [r1, #4]
 800f020:	4638      	mov	r0, r7
 800f022:	f104 060b 	add.w	r6, r4, #11
 800f026:	f001 fb09 	bl	801063c <__malloc_unlock>
 800f02a:	f026 0607 	bic.w	r6, r6, #7
 800f02e:	1d23      	adds	r3, r4, #4
 800f030:	1af2      	subs	r2, r6, r3
 800f032:	d0b6      	beq.n	800efa2 <_malloc_r+0x22>
 800f034:	1b9b      	subs	r3, r3, r6
 800f036:	50a3      	str	r3, [r4, r2]
 800f038:	e7b3      	b.n	800efa2 <_malloc_r+0x22>
 800f03a:	6862      	ldr	r2, [r4, #4]
 800f03c:	42a3      	cmp	r3, r4
 800f03e:	bf0c      	ite	eq
 800f040:	6032      	streq	r2, [r6, #0]
 800f042:	605a      	strne	r2, [r3, #4]
 800f044:	e7ec      	b.n	800f020 <_malloc_r+0xa0>
 800f046:	4623      	mov	r3, r4
 800f048:	6864      	ldr	r4, [r4, #4]
 800f04a:	e7b2      	b.n	800efb2 <_malloc_r+0x32>
 800f04c:	4634      	mov	r4, r6
 800f04e:	6876      	ldr	r6, [r6, #4]
 800f050:	e7b9      	b.n	800efc6 <_malloc_r+0x46>
 800f052:	230c      	movs	r3, #12
 800f054:	603b      	str	r3, [r7, #0]
 800f056:	4638      	mov	r0, r7
 800f058:	f001 faf0 	bl	801063c <__malloc_unlock>
 800f05c:	e7a1      	b.n	800efa2 <_malloc_r+0x22>
 800f05e:	6025      	str	r5, [r4, #0]
 800f060:	e7de      	b.n	800f020 <_malloc_r+0xa0>
 800f062:	bf00      	nop
 800f064:	24000a98 	.word	0x24000a98

0800f068 <_open_r>:
 800f068:	b538      	push	{r3, r4, r5, lr}
 800f06a:	4d07      	ldr	r5, [pc, #28]	; (800f088 <_open_r+0x20>)
 800f06c:	4604      	mov	r4, r0
 800f06e:	4608      	mov	r0, r1
 800f070:	4611      	mov	r1, r2
 800f072:	2200      	movs	r2, #0
 800f074:	602a      	str	r2, [r5, #0]
 800f076:	461a      	mov	r2, r3
 800f078:	f7f4 fde3 	bl	8003c42 <_open>
 800f07c:	1c43      	adds	r3, r0, #1
 800f07e:	d102      	bne.n	800f086 <_open_r+0x1e>
 800f080:	682b      	ldr	r3, [r5, #0]
 800f082:	b103      	cbz	r3, 800f086 <_open_r+0x1e>
 800f084:	6023      	str	r3, [r4, #0]
 800f086:	bd38      	pop	{r3, r4, r5, pc}
 800f088:	24000aa0 	.word	0x24000aa0

0800f08c <lflush>:
 800f08c:	8983      	ldrh	r3, [r0, #12]
 800f08e:	f003 0309 	and.w	r3, r3, #9
 800f092:	2b09      	cmp	r3, #9
 800f094:	d101      	bne.n	800f09a <lflush+0xe>
 800f096:	f7ff bba9 	b.w	800e7ec <fflush>
 800f09a:	2000      	movs	r0, #0
 800f09c:	4770      	bx	lr
	...

0800f0a0 <__srefill_r>:
 800f0a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f0a2:	460c      	mov	r4, r1
 800f0a4:	4605      	mov	r5, r0
 800f0a6:	b118      	cbz	r0, 800f0b0 <__srefill_r+0x10>
 800f0a8:	6983      	ldr	r3, [r0, #24]
 800f0aa:	b90b      	cbnz	r3, 800f0b0 <__srefill_r+0x10>
 800f0ac:	f7ff fc8c 	bl	800e9c8 <__sinit>
 800f0b0:	4b3b      	ldr	r3, [pc, #236]	; (800f1a0 <__srefill_r+0x100>)
 800f0b2:	429c      	cmp	r4, r3
 800f0b4:	d10a      	bne.n	800f0cc <__srefill_r+0x2c>
 800f0b6:	686c      	ldr	r4, [r5, #4]
 800f0b8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800f0bc:	2300      	movs	r3, #0
 800f0be:	6063      	str	r3, [r4, #4]
 800f0c0:	89a3      	ldrh	r3, [r4, #12]
 800f0c2:	069e      	lsls	r6, r3, #26
 800f0c4:	d50c      	bpl.n	800f0e0 <__srefill_r+0x40>
 800f0c6:	f04f 30ff 	mov.w	r0, #4294967295
 800f0ca:	e066      	b.n	800f19a <__srefill_r+0xfa>
 800f0cc:	4b35      	ldr	r3, [pc, #212]	; (800f1a4 <__srefill_r+0x104>)
 800f0ce:	429c      	cmp	r4, r3
 800f0d0:	d101      	bne.n	800f0d6 <__srefill_r+0x36>
 800f0d2:	68ac      	ldr	r4, [r5, #8]
 800f0d4:	e7f0      	b.n	800f0b8 <__srefill_r+0x18>
 800f0d6:	4b34      	ldr	r3, [pc, #208]	; (800f1a8 <__srefill_r+0x108>)
 800f0d8:	429c      	cmp	r4, r3
 800f0da:	bf08      	it	eq
 800f0dc:	68ec      	ldreq	r4, [r5, #12]
 800f0de:	e7eb      	b.n	800f0b8 <__srefill_r+0x18>
 800f0e0:	0758      	lsls	r0, r3, #29
 800f0e2:	d448      	bmi.n	800f176 <__srefill_r+0xd6>
 800f0e4:	06d9      	lsls	r1, r3, #27
 800f0e6:	d405      	bmi.n	800f0f4 <__srefill_r+0x54>
 800f0e8:	2309      	movs	r3, #9
 800f0ea:	602b      	str	r3, [r5, #0]
 800f0ec:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800f0f0:	81a3      	strh	r3, [r4, #12]
 800f0f2:	e7e8      	b.n	800f0c6 <__srefill_r+0x26>
 800f0f4:	071a      	lsls	r2, r3, #28
 800f0f6:	d50b      	bpl.n	800f110 <__srefill_r+0x70>
 800f0f8:	4621      	mov	r1, r4
 800f0fa:	4628      	mov	r0, r5
 800f0fc:	f7ff fb3a 	bl	800e774 <_fflush_r>
 800f100:	2800      	cmp	r0, #0
 800f102:	d1e0      	bne.n	800f0c6 <__srefill_r+0x26>
 800f104:	89a3      	ldrh	r3, [r4, #12]
 800f106:	60a0      	str	r0, [r4, #8]
 800f108:	f023 0308 	bic.w	r3, r3, #8
 800f10c:	81a3      	strh	r3, [r4, #12]
 800f10e:	61a0      	str	r0, [r4, #24]
 800f110:	89a3      	ldrh	r3, [r4, #12]
 800f112:	f043 0304 	orr.w	r3, r3, #4
 800f116:	81a3      	strh	r3, [r4, #12]
 800f118:	6923      	ldr	r3, [r4, #16]
 800f11a:	b91b      	cbnz	r3, 800f124 <__srefill_r+0x84>
 800f11c:	4621      	mov	r1, r4
 800f11e:	4628      	mov	r0, r5
 800f120:	f7ff fe6c 	bl	800edfc <__smakebuf_r>
 800f124:	89a6      	ldrh	r6, [r4, #12]
 800f126:	f9b4 700c 	ldrsh.w	r7, [r4, #12]
 800f12a:	07b3      	lsls	r3, r6, #30
 800f12c:	d00f      	beq.n	800f14e <__srefill_r+0xae>
 800f12e:	2301      	movs	r3, #1
 800f130:	81a3      	strh	r3, [r4, #12]
 800f132:	4b1e      	ldr	r3, [pc, #120]	; (800f1ac <__srefill_r+0x10c>)
 800f134:	491e      	ldr	r1, [pc, #120]	; (800f1b0 <__srefill_r+0x110>)
 800f136:	6818      	ldr	r0, [r3, #0]
 800f138:	f006 0609 	and.w	r6, r6, #9
 800f13c:	f7ff fdd4 	bl	800ece8 <_fwalk>
 800f140:	2e09      	cmp	r6, #9
 800f142:	81a7      	strh	r7, [r4, #12]
 800f144:	d103      	bne.n	800f14e <__srefill_r+0xae>
 800f146:	4621      	mov	r1, r4
 800f148:	4628      	mov	r0, r5
 800f14a:	f7ff fa8d 	bl	800e668 <__sflush_r>
 800f14e:	6922      	ldr	r2, [r4, #16]
 800f150:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800f152:	6963      	ldr	r3, [r4, #20]
 800f154:	6a21      	ldr	r1, [r4, #32]
 800f156:	6022      	str	r2, [r4, #0]
 800f158:	4628      	mov	r0, r5
 800f15a:	47b0      	blx	r6
 800f15c:	2800      	cmp	r0, #0
 800f15e:	6060      	str	r0, [r4, #4]
 800f160:	dc1c      	bgt.n	800f19c <__srefill_r+0xfc>
 800f162:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f166:	bf17      	itett	ne
 800f168:	2200      	movne	r2, #0
 800f16a:	f043 0320 	orreq.w	r3, r3, #32
 800f16e:	6062      	strne	r2, [r4, #4]
 800f170:	f043 0340 	orrne.w	r3, r3, #64	; 0x40
 800f174:	e7bc      	b.n	800f0f0 <__srefill_r+0x50>
 800f176:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f178:	2900      	cmp	r1, #0
 800f17a:	d0cd      	beq.n	800f118 <__srefill_r+0x78>
 800f17c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f180:	4299      	cmp	r1, r3
 800f182:	d002      	beq.n	800f18a <__srefill_r+0xea>
 800f184:	4628      	mov	r0, r5
 800f186:	f7ff fe8f 	bl	800eea8 <_free_r>
 800f18a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800f18c:	6063      	str	r3, [r4, #4]
 800f18e:	2000      	movs	r0, #0
 800f190:	6360      	str	r0, [r4, #52]	; 0x34
 800f192:	2b00      	cmp	r3, #0
 800f194:	d0c0      	beq.n	800f118 <__srefill_r+0x78>
 800f196:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800f198:	6023      	str	r3, [r4, #0]
 800f19a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f19c:	2000      	movs	r0, #0
 800f19e:	e7fc      	b.n	800f19a <__srefill_r+0xfa>
 800f1a0:	08012294 	.word	0x08012294
 800f1a4:	080122b4 	.word	0x080122b4
 800f1a8:	08012274 	.word	0x08012274
 800f1ac:	080122d4 	.word	0x080122d4
 800f1b0:	0800f08d 	.word	0x0800f08d

0800f1b4 <_sbrk_r>:
 800f1b4:	b538      	push	{r3, r4, r5, lr}
 800f1b6:	4d06      	ldr	r5, [pc, #24]	; (800f1d0 <_sbrk_r+0x1c>)
 800f1b8:	2300      	movs	r3, #0
 800f1ba:	4604      	mov	r4, r0
 800f1bc:	4608      	mov	r0, r1
 800f1be:	602b      	str	r3, [r5, #0]
 800f1c0:	f7f4 fd4e 	bl	8003c60 <_sbrk>
 800f1c4:	1c43      	adds	r3, r0, #1
 800f1c6:	d102      	bne.n	800f1ce <_sbrk_r+0x1a>
 800f1c8:	682b      	ldr	r3, [r5, #0]
 800f1ca:	b103      	cbz	r3, 800f1ce <_sbrk_r+0x1a>
 800f1cc:	6023      	str	r3, [r4, #0]
 800f1ce:	bd38      	pop	{r3, r4, r5, pc}
 800f1d0:	24000aa0 	.word	0x24000aa0

0800f1d4 <__sread>:
 800f1d4:	b510      	push	{r4, lr}
 800f1d6:	460c      	mov	r4, r1
 800f1d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f1dc:	f001 ff08 	bl	8010ff0 <_read_r>
 800f1e0:	2800      	cmp	r0, #0
 800f1e2:	bfab      	itete	ge
 800f1e4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800f1e6:	89a3      	ldrhlt	r3, [r4, #12]
 800f1e8:	181b      	addge	r3, r3, r0
 800f1ea:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800f1ee:	bfac      	ite	ge
 800f1f0:	6563      	strge	r3, [r4, #84]	; 0x54
 800f1f2:	81a3      	strhlt	r3, [r4, #12]
 800f1f4:	bd10      	pop	{r4, pc}

0800f1f6 <__swrite>:
 800f1f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f1fa:	461f      	mov	r7, r3
 800f1fc:	898b      	ldrh	r3, [r1, #12]
 800f1fe:	05db      	lsls	r3, r3, #23
 800f200:	4605      	mov	r5, r0
 800f202:	460c      	mov	r4, r1
 800f204:	4616      	mov	r6, r2
 800f206:	d505      	bpl.n	800f214 <__swrite+0x1e>
 800f208:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f20c:	2302      	movs	r3, #2
 800f20e:	2200      	movs	r2, #0
 800f210:	f001 f9ea 	bl	80105e8 <_lseek_r>
 800f214:	89a3      	ldrh	r3, [r4, #12]
 800f216:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f21a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800f21e:	81a3      	strh	r3, [r4, #12]
 800f220:	4632      	mov	r2, r6
 800f222:	463b      	mov	r3, r7
 800f224:	4628      	mov	r0, r5
 800f226:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f22a:	f000 bdf3 	b.w	800fe14 <_write_r>

0800f22e <__sseek>:
 800f22e:	b510      	push	{r4, lr}
 800f230:	460c      	mov	r4, r1
 800f232:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f236:	f001 f9d7 	bl	80105e8 <_lseek_r>
 800f23a:	1c43      	adds	r3, r0, #1
 800f23c:	89a3      	ldrh	r3, [r4, #12]
 800f23e:	bf15      	itete	ne
 800f240:	6560      	strne	r0, [r4, #84]	; 0x54
 800f242:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800f246:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800f24a:	81a3      	strheq	r3, [r4, #12]
 800f24c:	bf18      	it	ne
 800f24e:	81a3      	strhne	r3, [r4, #12]
 800f250:	bd10      	pop	{r4, pc}

0800f252 <__sclose>:
 800f252:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f256:	f000 bdef 	b.w	800fe38 <_close_r>

0800f25a <sulp>:
 800f25a:	b570      	push	{r4, r5, r6, lr}
 800f25c:	4604      	mov	r4, r0
 800f25e:	460d      	mov	r5, r1
 800f260:	4616      	mov	r6, r2
 800f262:	ec45 4b10 	vmov	d0, r4, r5
 800f266:	f001 fd61 	bl	8010d2c <__ulp>
 800f26a:	b17e      	cbz	r6, 800f28c <sulp+0x32>
 800f26c:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800f270:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800f274:	2b00      	cmp	r3, #0
 800f276:	dd09      	ble.n	800f28c <sulp+0x32>
 800f278:	051b      	lsls	r3, r3, #20
 800f27a:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
 800f27e:	2000      	movs	r0, #0
 800f280:	f501 1140 	add.w	r1, r1, #3145728	; 0x300000
 800f284:	ec41 0b17 	vmov	d7, r0, r1
 800f288:	ee20 0b07 	vmul.f64	d0, d0, d7
 800f28c:	bd70      	pop	{r4, r5, r6, pc}
	...

0800f290 <_strtod_l>:
 800f290:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f294:	ed2d 8b0e 	vpush	{d8-d14}
 800f298:	b097      	sub	sp, #92	; 0x5c
 800f29a:	461f      	mov	r7, r3
 800f29c:	2300      	movs	r3, #0
 800f29e:	9312      	str	r3, [sp, #72]	; 0x48
 800f2a0:	4ba1      	ldr	r3, [pc, #644]	; (800f528 <_strtod_l+0x298>)
 800f2a2:	920d      	str	r2, [sp, #52]	; 0x34
 800f2a4:	681b      	ldr	r3, [r3, #0]
 800f2a6:	9307      	str	r3, [sp, #28]
 800f2a8:	4604      	mov	r4, r0
 800f2aa:	4618      	mov	r0, r3
 800f2ac:	468b      	mov	fp, r1
 800f2ae:	f7f1 f867 	bl	8000380 <strlen>
 800f2b2:	f04f 0800 	mov.w	r8, #0
 800f2b6:	4605      	mov	r5, r0
 800f2b8:	f04f 0900 	mov.w	r9, #0
 800f2bc:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
 800f2c0:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800f2c2:	7813      	ldrb	r3, [r2, #0]
 800f2c4:	2b2b      	cmp	r3, #43	; 0x2b
 800f2c6:	d04d      	beq.n	800f364 <_strtod_l+0xd4>
 800f2c8:	d83a      	bhi.n	800f340 <_strtod_l+0xb0>
 800f2ca:	2b0d      	cmp	r3, #13
 800f2cc:	d833      	bhi.n	800f336 <_strtod_l+0xa6>
 800f2ce:	2b08      	cmp	r3, #8
 800f2d0:	d833      	bhi.n	800f33a <_strtod_l+0xaa>
 800f2d2:	2b00      	cmp	r3, #0
 800f2d4:	d03d      	beq.n	800f352 <_strtod_l+0xc2>
 800f2d6:	2300      	movs	r3, #0
 800f2d8:	9308      	str	r3, [sp, #32]
 800f2da:	9e11      	ldr	r6, [sp, #68]	; 0x44
 800f2dc:	7833      	ldrb	r3, [r6, #0]
 800f2de:	2b30      	cmp	r3, #48	; 0x30
 800f2e0:	f040 80b0 	bne.w	800f444 <_strtod_l+0x1b4>
 800f2e4:	7873      	ldrb	r3, [r6, #1]
 800f2e6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800f2ea:	2b58      	cmp	r3, #88	; 0x58
 800f2ec:	d167      	bne.n	800f3be <_strtod_l+0x12e>
 800f2ee:	9b08      	ldr	r3, [sp, #32]
 800f2f0:	9301      	str	r3, [sp, #4]
 800f2f2:	ab12      	add	r3, sp, #72	; 0x48
 800f2f4:	9702      	str	r7, [sp, #8]
 800f2f6:	9300      	str	r3, [sp, #0]
 800f2f8:	4a8c      	ldr	r2, [pc, #560]	; (800f52c <_strtod_l+0x29c>)
 800f2fa:	ab13      	add	r3, sp, #76	; 0x4c
 800f2fc:	a911      	add	r1, sp, #68	; 0x44
 800f2fe:	4620      	mov	r0, r4
 800f300:	f000 fe5a 	bl	800ffb8 <__gethex>
 800f304:	f010 0507 	ands.w	r5, r0, #7
 800f308:	4607      	mov	r7, r0
 800f30a:	d005      	beq.n	800f318 <_strtod_l+0x88>
 800f30c:	2d06      	cmp	r5, #6
 800f30e:	d12b      	bne.n	800f368 <_strtod_l+0xd8>
 800f310:	3601      	adds	r6, #1
 800f312:	2300      	movs	r3, #0
 800f314:	9611      	str	r6, [sp, #68]	; 0x44
 800f316:	9308      	str	r3, [sp, #32]
 800f318:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f31a:	2b00      	cmp	r3, #0
 800f31c:	f040 854e 	bne.w	800fdbc <_strtod_l+0xb2c>
 800f320:	9b08      	ldr	r3, [sp, #32]
 800f322:	b1e3      	cbz	r3, 800f35e <_strtod_l+0xce>
 800f324:	ec49 8b17 	vmov	d7, r8, r9
 800f328:	eeb1 0b47 	vneg.f64	d0, d7
 800f32c:	b017      	add	sp, #92	; 0x5c
 800f32e:	ecbd 8b0e 	vpop	{d8-d14}
 800f332:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f336:	2b20      	cmp	r3, #32
 800f338:	d1cd      	bne.n	800f2d6 <_strtod_l+0x46>
 800f33a:	3201      	adds	r2, #1
 800f33c:	9211      	str	r2, [sp, #68]	; 0x44
 800f33e:	e7bf      	b.n	800f2c0 <_strtod_l+0x30>
 800f340:	2b2d      	cmp	r3, #45	; 0x2d
 800f342:	d1c8      	bne.n	800f2d6 <_strtod_l+0x46>
 800f344:	2301      	movs	r3, #1
 800f346:	9308      	str	r3, [sp, #32]
 800f348:	1c53      	adds	r3, r2, #1
 800f34a:	9311      	str	r3, [sp, #68]	; 0x44
 800f34c:	7853      	ldrb	r3, [r2, #1]
 800f34e:	2b00      	cmp	r3, #0
 800f350:	d1c3      	bne.n	800f2da <_strtod_l+0x4a>
 800f352:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f354:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
 800f358:	2b00      	cmp	r3, #0
 800f35a:	f040 852d 	bne.w	800fdb8 <_strtod_l+0xb28>
 800f35e:	ec49 8b10 	vmov	d0, r8, r9
 800f362:	e7e3      	b.n	800f32c <_strtod_l+0x9c>
 800f364:	2300      	movs	r3, #0
 800f366:	e7ee      	b.n	800f346 <_strtod_l+0xb6>
 800f368:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800f36a:	b13a      	cbz	r2, 800f37c <_strtod_l+0xec>
 800f36c:	2135      	movs	r1, #53	; 0x35
 800f36e:	a814      	add	r0, sp, #80	; 0x50
 800f370:	f001 fde4 	bl	8010f3c <__copybits>
 800f374:	9912      	ldr	r1, [sp, #72]	; 0x48
 800f376:	4620      	mov	r0, r4
 800f378:	f001 f9a6 	bl	80106c8 <_Bfree>
 800f37c:	3d01      	subs	r5, #1
 800f37e:	2d04      	cmp	r5, #4
 800f380:	d806      	bhi.n	800f390 <_strtod_l+0x100>
 800f382:	e8df f005 	tbb	[pc, r5]
 800f386:	030a      	.short	0x030a
 800f388:	1714      	.short	0x1714
 800f38a:	0a          	.byte	0x0a
 800f38b:	00          	.byte	0x00
 800f38c:	e9dd 8914 	ldrd	r8, r9, [sp, #80]	; 0x50
 800f390:	073f      	lsls	r7, r7, #28
 800f392:	d5c1      	bpl.n	800f318 <_strtod_l+0x88>
 800f394:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 800f398:	e7be      	b.n	800f318 <_strtod_l+0x88>
 800f39a:	e9dd 8314 	ldrd	r8, r3, [sp, #80]	; 0x50
 800f39e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800f3a0:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800f3a4:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800f3a8:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 800f3ac:	e7f0      	b.n	800f390 <_strtod_l+0x100>
 800f3ae:	f8df 9180 	ldr.w	r9, [pc, #384]	; 800f530 <_strtod_l+0x2a0>
 800f3b2:	e7ed      	b.n	800f390 <_strtod_l+0x100>
 800f3b4:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 800f3b8:	f04f 38ff 	mov.w	r8, #4294967295
 800f3bc:	e7e8      	b.n	800f390 <_strtod_l+0x100>
 800f3be:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800f3c0:	1c5a      	adds	r2, r3, #1
 800f3c2:	9211      	str	r2, [sp, #68]	; 0x44
 800f3c4:	785b      	ldrb	r3, [r3, #1]
 800f3c6:	2b30      	cmp	r3, #48	; 0x30
 800f3c8:	d0f9      	beq.n	800f3be <_strtod_l+0x12e>
 800f3ca:	2b00      	cmp	r3, #0
 800f3cc:	d0a4      	beq.n	800f318 <_strtod_l+0x88>
 800f3ce:	2301      	movs	r3, #1
 800f3d0:	f04f 0a00 	mov.w	sl, #0
 800f3d4:	9304      	str	r3, [sp, #16]
 800f3d6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800f3d8:	930a      	str	r3, [sp, #40]	; 0x28
 800f3da:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 800f3de:	f8cd a018 	str.w	sl, [sp, #24]
 800f3e2:	220a      	movs	r2, #10
 800f3e4:	9811      	ldr	r0, [sp, #68]	; 0x44
 800f3e6:	7807      	ldrb	r7, [r0, #0]
 800f3e8:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 800f3ec:	b2d9      	uxtb	r1, r3
 800f3ee:	2909      	cmp	r1, #9
 800f3f0:	d92a      	bls.n	800f448 <_strtod_l+0x1b8>
 800f3f2:	9907      	ldr	r1, [sp, #28]
 800f3f4:	462a      	mov	r2, r5
 800f3f6:	f001 fe17 	bl	8011028 <strncmp>
 800f3fa:	2800      	cmp	r0, #0
 800f3fc:	d033      	beq.n	800f466 <_strtod_l+0x1d6>
 800f3fe:	2000      	movs	r0, #0
 800f400:	9b06      	ldr	r3, [sp, #24]
 800f402:	463a      	mov	r2, r7
 800f404:	4601      	mov	r1, r0
 800f406:	4607      	mov	r7, r0
 800f408:	2a65      	cmp	r2, #101	; 0x65
 800f40a:	d001      	beq.n	800f410 <_strtod_l+0x180>
 800f40c:	2a45      	cmp	r2, #69	; 0x45
 800f40e:	d117      	bne.n	800f440 <_strtod_l+0x1b0>
 800f410:	b91b      	cbnz	r3, 800f41a <_strtod_l+0x18a>
 800f412:	9b04      	ldr	r3, [sp, #16]
 800f414:	4303      	orrs	r3, r0
 800f416:	d09c      	beq.n	800f352 <_strtod_l+0xc2>
 800f418:	2300      	movs	r3, #0
 800f41a:	f8dd b044 	ldr.w	fp, [sp, #68]	; 0x44
 800f41e:	f10b 0201 	add.w	r2, fp, #1
 800f422:	9211      	str	r2, [sp, #68]	; 0x44
 800f424:	f89b 2001 	ldrb.w	r2, [fp, #1]
 800f428:	2a2b      	cmp	r2, #43	; 0x2b
 800f42a:	d071      	beq.n	800f510 <_strtod_l+0x280>
 800f42c:	2a2d      	cmp	r2, #45	; 0x2d
 800f42e:	d077      	beq.n	800f520 <_strtod_l+0x290>
 800f430:	f04f 0e00 	mov.w	lr, #0
 800f434:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 800f438:	2d09      	cmp	r5, #9
 800f43a:	d97f      	bls.n	800f53c <_strtod_l+0x2ac>
 800f43c:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
 800f440:	2500      	movs	r5, #0
 800f442:	e09b      	b.n	800f57c <_strtod_l+0x2ec>
 800f444:	2300      	movs	r3, #0
 800f446:	e7c3      	b.n	800f3d0 <_strtod_l+0x140>
 800f448:	9906      	ldr	r1, [sp, #24]
 800f44a:	2908      	cmp	r1, #8
 800f44c:	bfdd      	ittte	le
 800f44e:	9909      	ldrle	r1, [sp, #36]	; 0x24
 800f450:	fb02 3301 	mlale	r3, r2, r1, r3
 800f454:	9309      	strle	r3, [sp, #36]	; 0x24
 800f456:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 800f45a:	9b06      	ldr	r3, [sp, #24]
 800f45c:	3001      	adds	r0, #1
 800f45e:	3301      	adds	r3, #1
 800f460:	9306      	str	r3, [sp, #24]
 800f462:	9011      	str	r0, [sp, #68]	; 0x44
 800f464:	e7be      	b.n	800f3e4 <_strtod_l+0x154>
 800f466:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800f468:	195a      	adds	r2, r3, r5
 800f46a:	9211      	str	r2, [sp, #68]	; 0x44
 800f46c:	5d5a      	ldrb	r2, [r3, r5]
 800f46e:	9b06      	ldr	r3, [sp, #24]
 800f470:	b3a3      	cbz	r3, 800f4dc <_strtod_l+0x24c>
 800f472:	4607      	mov	r7, r0
 800f474:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800f478:	2909      	cmp	r1, #9
 800f47a:	d912      	bls.n	800f4a2 <_strtod_l+0x212>
 800f47c:	2101      	movs	r1, #1
 800f47e:	e7c3      	b.n	800f408 <_strtod_l+0x178>
 800f480:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800f482:	1c5a      	adds	r2, r3, #1
 800f484:	9211      	str	r2, [sp, #68]	; 0x44
 800f486:	785a      	ldrb	r2, [r3, #1]
 800f488:	3001      	adds	r0, #1
 800f48a:	2a30      	cmp	r2, #48	; 0x30
 800f48c:	d0f8      	beq.n	800f480 <_strtod_l+0x1f0>
 800f48e:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800f492:	2b08      	cmp	r3, #8
 800f494:	f200 8497 	bhi.w	800fdc6 <_strtod_l+0xb36>
 800f498:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800f49a:	930a      	str	r3, [sp, #40]	; 0x28
 800f49c:	4607      	mov	r7, r0
 800f49e:	2000      	movs	r0, #0
 800f4a0:	4603      	mov	r3, r0
 800f4a2:	3a30      	subs	r2, #48	; 0x30
 800f4a4:	f100 0101 	add.w	r1, r0, #1
 800f4a8:	d012      	beq.n	800f4d0 <_strtod_l+0x240>
 800f4aa:	440f      	add	r7, r1
 800f4ac:	eb00 0c03 	add.w	ip, r0, r3
 800f4b0:	4619      	mov	r1, r3
 800f4b2:	250a      	movs	r5, #10
 800f4b4:	4561      	cmp	r1, ip
 800f4b6:	d113      	bne.n	800f4e0 <_strtod_l+0x250>
 800f4b8:	1819      	adds	r1, r3, r0
 800f4ba:	2908      	cmp	r1, #8
 800f4bc:	f103 0301 	add.w	r3, r3, #1
 800f4c0:	4403      	add	r3, r0
 800f4c2:	dc1c      	bgt.n	800f4fe <_strtod_l+0x26e>
 800f4c4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f4c6:	210a      	movs	r1, #10
 800f4c8:	fb01 2200 	mla	r2, r1, r0, r2
 800f4cc:	9209      	str	r2, [sp, #36]	; 0x24
 800f4ce:	2100      	movs	r1, #0
 800f4d0:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800f4d2:	1c50      	adds	r0, r2, #1
 800f4d4:	9011      	str	r0, [sp, #68]	; 0x44
 800f4d6:	7852      	ldrb	r2, [r2, #1]
 800f4d8:	4608      	mov	r0, r1
 800f4da:	e7cb      	b.n	800f474 <_strtod_l+0x1e4>
 800f4dc:	9806      	ldr	r0, [sp, #24]
 800f4de:	e7d4      	b.n	800f48a <_strtod_l+0x1fa>
 800f4e0:	2908      	cmp	r1, #8
 800f4e2:	dc04      	bgt.n	800f4ee <_strtod_l+0x25e>
 800f4e4:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800f4e6:	436e      	muls	r6, r5
 800f4e8:	9609      	str	r6, [sp, #36]	; 0x24
 800f4ea:	3101      	adds	r1, #1
 800f4ec:	e7e2      	b.n	800f4b4 <_strtod_l+0x224>
 800f4ee:	f101 0e01 	add.w	lr, r1, #1
 800f4f2:	f1be 0f10 	cmp.w	lr, #16
 800f4f6:	bfd8      	it	le
 800f4f8:	fb05 fa0a 	mulle.w	sl, r5, sl
 800f4fc:	e7f5      	b.n	800f4ea <_strtod_l+0x25a>
 800f4fe:	2b10      	cmp	r3, #16
 800f500:	bfdc      	itt	le
 800f502:	210a      	movle	r1, #10
 800f504:	fb01 2a0a 	mlale	sl, r1, sl, r2
 800f508:	e7e1      	b.n	800f4ce <_strtod_l+0x23e>
 800f50a:	2700      	movs	r7, #0
 800f50c:	2101      	movs	r1, #1
 800f50e:	e780      	b.n	800f412 <_strtod_l+0x182>
 800f510:	f04f 0e00 	mov.w	lr, #0
 800f514:	f10b 0202 	add.w	r2, fp, #2
 800f518:	9211      	str	r2, [sp, #68]	; 0x44
 800f51a:	f89b 2002 	ldrb.w	r2, [fp, #2]
 800f51e:	e789      	b.n	800f434 <_strtod_l+0x1a4>
 800f520:	f04f 0e01 	mov.w	lr, #1
 800f524:	e7f6      	b.n	800f514 <_strtod_l+0x284>
 800f526:	bf00      	nop
 800f528:	080123b0 	.word	0x080123b0
 800f52c:	080122e4 	.word	0x080122e4
 800f530:	7ff00000 	.word	0x7ff00000
 800f534:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800f536:	1c55      	adds	r5, r2, #1
 800f538:	9511      	str	r5, [sp, #68]	; 0x44
 800f53a:	7852      	ldrb	r2, [r2, #1]
 800f53c:	2a30      	cmp	r2, #48	; 0x30
 800f53e:	d0f9      	beq.n	800f534 <_strtod_l+0x2a4>
 800f540:	f1a2 0531 	sub.w	r5, r2, #49	; 0x31
 800f544:	2d08      	cmp	r5, #8
 800f546:	f63f af7b 	bhi.w	800f440 <_strtod_l+0x1b0>
 800f54a:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 800f54e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800f550:	9207      	str	r2, [sp, #28]
 800f552:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800f554:	1c55      	adds	r5, r2, #1
 800f556:	9511      	str	r5, [sp, #68]	; 0x44
 800f558:	7852      	ldrb	r2, [r2, #1]
 800f55a:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 800f55e:	2e09      	cmp	r6, #9
 800f560:	d937      	bls.n	800f5d2 <_strtod_l+0x342>
 800f562:	9e07      	ldr	r6, [sp, #28]
 800f564:	1bad      	subs	r5, r5, r6
 800f566:	2d08      	cmp	r5, #8
 800f568:	f644 651f 	movw	r5, #19999	; 0x4e1f
 800f56c:	dc02      	bgt.n	800f574 <_strtod_l+0x2e4>
 800f56e:	4565      	cmp	r5, ip
 800f570:	bfa8      	it	ge
 800f572:	4665      	movge	r5, ip
 800f574:	f1be 0f00 	cmp.w	lr, #0
 800f578:	d000      	beq.n	800f57c <_strtod_l+0x2ec>
 800f57a:	426d      	negs	r5, r5
 800f57c:	2b00      	cmp	r3, #0
 800f57e:	d14d      	bne.n	800f61c <_strtod_l+0x38c>
 800f580:	9b04      	ldr	r3, [sp, #16]
 800f582:	4303      	orrs	r3, r0
 800f584:	f47f aec8 	bne.w	800f318 <_strtod_l+0x88>
 800f588:	2900      	cmp	r1, #0
 800f58a:	f47f aee2 	bne.w	800f352 <_strtod_l+0xc2>
 800f58e:	2a69      	cmp	r2, #105	; 0x69
 800f590:	d027      	beq.n	800f5e2 <_strtod_l+0x352>
 800f592:	dc24      	bgt.n	800f5de <_strtod_l+0x34e>
 800f594:	2a49      	cmp	r2, #73	; 0x49
 800f596:	d024      	beq.n	800f5e2 <_strtod_l+0x352>
 800f598:	2a4e      	cmp	r2, #78	; 0x4e
 800f59a:	f47f aeda 	bne.w	800f352 <_strtod_l+0xc2>
 800f59e:	4996      	ldr	r1, [pc, #600]	; (800f7f8 <_strtod_l+0x568>)
 800f5a0:	a811      	add	r0, sp, #68	; 0x44
 800f5a2:	f000 ff61 	bl	8010468 <__match>
 800f5a6:	2800      	cmp	r0, #0
 800f5a8:	f43f aed3 	beq.w	800f352 <_strtod_l+0xc2>
 800f5ac:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800f5ae:	781b      	ldrb	r3, [r3, #0]
 800f5b0:	2b28      	cmp	r3, #40	; 0x28
 800f5b2:	d12d      	bne.n	800f610 <_strtod_l+0x380>
 800f5b4:	4991      	ldr	r1, [pc, #580]	; (800f7fc <_strtod_l+0x56c>)
 800f5b6:	aa14      	add	r2, sp, #80	; 0x50
 800f5b8:	a811      	add	r0, sp, #68	; 0x44
 800f5ba:	f000 ff69 	bl	8010490 <__hexnan>
 800f5be:	2805      	cmp	r0, #5
 800f5c0:	d126      	bne.n	800f610 <_strtod_l+0x380>
 800f5c2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800f5c4:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 800f5c8:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 800f5cc:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 800f5d0:	e6a2      	b.n	800f318 <_strtod_l+0x88>
 800f5d2:	250a      	movs	r5, #10
 800f5d4:	fb05 250c 	mla	r5, r5, ip, r2
 800f5d8:	f1a5 0c30 	sub.w	ip, r5, #48	; 0x30
 800f5dc:	e7b9      	b.n	800f552 <_strtod_l+0x2c2>
 800f5de:	2a6e      	cmp	r2, #110	; 0x6e
 800f5e0:	e7db      	b.n	800f59a <_strtod_l+0x30a>
 800f5e2:	4987      	ldr	r1, [pc, #540]	; (800f800 <_strtod_l+0x570>)
 800f5e4:	a811      	add	r0, sp, #68	; 0x44
 800f5e6:	f000 ff3f 	bl	8010468 <__match>
 800f5ea:	2800      	cmp	r0, #0
 800f5ec:	f43f aeb1 	beq.w	800f352 <_strtod_l+0xc2>
 800f5f0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800f5f2:	4984      	ldr	r1, [pc, #528]	; (800f804 <_strtod_l+0x574>)
 800f5f4:	3b01      	subs	r3, #1
 800f5f6:	a811      	add	r0, sp, #68	; 0x44
 800f5f8:	9311      	str	r3, [sp, #68]	; 0x44
 800f5fa:	f000 ff35 	bl	8010468 <__match>
 800f5fe:	b910      	cbnz	r0, 800f606 <_strtod_l+0x376>
 800f600:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800f602:	3301      	adds	r3, #1
 800f604:	9311      	str	r3, [sp, #68]	; 0x44
 800f606:	f8df 9210 	ldr.w	r9, [pc, #528]	; 800f818 <_strtod_l+0x588>
 800f60a:	f04f 0800 	mov.w	r8, #0
 800f60e:	e683      	b.n	800f318 <_strtod_l+0x88>
 800f610:	487d      	ldr	r0, [pc, #500]	; (800f808 <_strtod_l+0x578>)
 800f612:	f001 fd01 	bl	8011018 <nan>
 800f616:	ec59 8b10 	vmov	r8, r9, d0
 800f61a:	e67d      	b.n	800f318 <_strtod_l+0x88>
 800f61c:	1bea      	subs	r2, r5, r7
 800f61e:	eddd 7a09 	vldr	s15, [sp, #36]	; 0x24
 800f622:	9207      	str	r2, [sp, #28]
 800f624:	9a06      	ldr	r2, [sp, #24]
 800f626:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800f62a:	2a00      	cmp	r2, #0
 800f62c:	bf08      	it	eq
 800f62e:	461a      	moveq	r2, r3
 800f630:	2b10      	cmp	r3, #16
 800f632:	9206      	str	r2, [sp, #24]
 800f634:	461a      	mov	r2, r3
 800f636:	bfa8      	it	ge
 800f638:	2210      	movge	r2, #16
 800f63a:	2b09      	cmp	r3, #9
 800f63c:	ec59 8b17 	vmov	r8, r9, d7
 800f640:	dd0c      	ble.n	800f65c <_strtod_l+0x3cc>
 800f642:	4972      	ldr	r1, [pc, #456]	; (800f80c <_strtod_l+0x57c>)
 800f644:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 800f648:	ed11 5b12 	vldr	d5, [r1, #-72]	; 0xffffffb8
 800f64c:	ee06 aa90 	vmov	s13, sl
 800f650:	eeb8 6b66 	vcvt.f64.u32	d6, s13
 800f654:	eea7 6b05 	vfma.f64	d6, d7, d5
 800f658:	ec59 8b16 	vmov	r8, r9, d6
 800f65c:	2b0f      	cmp	r3, #15
 800f65e:	dc36      	bgt.n	800f6ce <_strtod_l+0x43e>
 800f660:	9907      	ldr	r1, [sp, #28]
 800f662:	2900      	cmp	r1, #0
 800f664:	f43f ae58 	beq.w	800f318 <_strtod_l+0x88>
 800f668:	dd23      	ble.n	800f6b2 <_strtod_l+0x422>
 800f66a:	2916      	cmp	r1, #22
 800f66c:	dc0b      	bgt.n	800f686 <_strtod_l+0x3f6>
 800f66e:	4b67      	ldr	r3, [pc, #412]	; (800f80c <_strtod_l+0x57c>)
 800f670:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 800f674:	ed93 7b00 	vldr	d7, [r3]
 800f678:	ec49 8b16 	vmov	d6, r8, r9
 800f67c:	ee27 7b06 	vmul.f64	d7, d7, d6
 800f680:	ec59 8b17 	vmov	r8, r9, d7
 800f684:	e648      	b.n	800f318 <_strtod_l+0x88>
 800f686:	9807      	ldr	r0, [sp, #28]
 800f688:	f1c3 0125 	rsb	r1, r3, #37	; 0x25
 800f68c:	4281      	cmp	r1, r0
 800f68e:	db1e      	blt.n	800f6ce <_strtod_l+0x43e>
 800f690:	4a5e      	ldr	r2, [pc, #376]	; (800f80c <_strtod_l+0x57c>)
 800f692:	f1c3 030f 	rsb	r3, r3, #15
 800f696:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 800f69a:	ed91 7b00 	vldr	d7, [r1]
 800f69e:	ec49 8b16 	vmov	d6, r8, r9
 800f6a2:	1ac3      	subs	r3, r0, r3
 800f6a4:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 800f6a8:	ee27 7b06 	vmul.f64	d7, d7, d6
 800f6ac:	ed92 6b00 	vldr	d6, [r2]
 800f6b0:	e7e4      	b.n	800f67c <_strtod_l+0x3ec>
 800f6b2:	9907      	ldr	r1, [sp, #28]
 800f6b4:	3116      	adds	r1, #22
 800f6b6:	db0a      	blt.n	800f6ce <_strtod_l+0x43e>
 800f6b8:	4b54      	ldr	r3, [pc, #336]	; (800f80c <_strtod_l+0x57c>)
 800f6ba:	1b7d      	subs	r5, r7, r5
 800f6bc:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800f6c0:	ed95 7b00 	vldr	d7, [r5]
 800f6c4:	ec49 8b16 	vmov	d6, r8, r9
 800f6c8:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800f6cc:	e7d8      	b.n	800f680 <_strtod_l+0x3f0>
 800f6ce:	9907      	ldr	r1, [sp, #28]
 800f6d0:	1a9a      	subs	r2, r3, r2
 800f6d2:	440a      	add	r2, r1
 800f6d4:	2a00      	cmp	r2, #0
 800f6d6:	dd6f      	ble.n	800f7b8 <_strtod_l+0x528>
 800f6d8:	f012 000f 	ands.w	r0, r2, #15
 800f6dc:	d00a      	beq.n	800f6f4 <_strtod_l+0x464>
 800f6de:	494b      	ldr	r1, [pc, #300]	; (800f80c <_strtod_l+0x57c>)
 800f6e0:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 800f6e4:	ed91 7b00 	vldr	d7, [r1]
 800f6e8:	ec49 8b16 	vmov	d6, r8, r9
 800f6ec:	ee27 7b06 	vmul.f64	d7, d7, d6
 800f6f0:	ec59 8b17 	vmov	r8, r9, d7
 800f6f4:	f032 020f 	bics.w	r2, r2, #15
 800f6f8:	d04f      	beq.n	800f79a <_strtod_l+0x50a>
 800f6fa:	f5b2 7f9a 	cmp.w	r2, #308	; 0x134
 800f6fe:	dd22      	ble.n	800f746 <_strtod_l+0x4b6>
 800f700:	2500      	movs	r5, #0
 800f702:	462e      	mov	r6, r5
 800f704:	9506      	str	r5, [sp, #24]
 800f706:	462f      	mov	r7, r5
 800f708:	2322      	movs	r3, #34	; 0x22
 800f70a:	f8df 910c 	ldr.w	r9, [pc, #268]	; 800f818 <_strtod_l+0x588>
 800f70e:	6023      	str	r3, [r4, #0]
 800f710:	f04f 0800 	mov.w	r8, #0
 800f714:	9b06      	ldr	r3, [sp, #24]
 800f716:	2b00      	cmp	r3, #0
 800f718:	f43f adfe 	beq.w	800f318 <_strtod_l+0x88>
 800f71c:	9912      	ldr	r1, [sp, #72]	; 0x48
 800f71e:	4620      	mov	r0, r4
 800f720:	f000 ffd2 	bl	80106c8 <_Bfree>
 800f724:	4639      	mov	r1, r7
 800f726:	4620      	mov	r0, r4
 800f728:	f000 ffce 	bl	80106c8 <_Bfree>
 800f72c:	4631      	mov	r1, r6
 800f72e:	4620      	mov	r0, r4
 800f730:	f000 ffca 	bl	80106c8 <_Bfree>
 800f734:	9906      	ldr	r1, [sp, #24]
 800f736:	4620      	mov	r0, r4
 800f738:	f000 ffc6 	bl	80106c8 <_Bfree>
 800f73c:	4629      	mov	r1, r5
 800f73e:	4620      	mov	r0, r4
 800f740:	f000 ffc2 	bl	80106c8 <_Bfree>
 800f744:	e5e8      	b.n	800f318 <_strtod_l+0x88>
 800f746:	2000      	movs	r0, #0
 800f748:	ec49 8b17 	vmov	d7, r8, r9
 800f74c:	f8df c0c0 	ldr.w	ip, [pc, #192]	; 800f810 <_strtod_l+0x580>
 800f750:	1112      	asrs	r2, r2, #4
 800f752:	4601      	mov	r1, r0
 800f754:	2a01      	cmp	r2, #1
 800f756:	dc23      	bgt.n	800f7a0 <_strtod_l+0x510>
 800f758:	b108      	cbz	r0, 800f75e <_strtod_l+0x4ce>
 800f75a:	ec59 8b17 	vmov	r8, r9, d7
 800f75e:	4a2c      	ldr	r2, [pc, #176]	; (800f810 <_strtod_l+0x580>)
 800f760:	482c      	ldr	r0, [pc, #176]	; (800f814 <_strtod_l+0x584>)
 800f762:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800f766:	ed92 7b00 	vldr	d7, [r2]
 800f76a:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 800f76e:	ec49 8b16 	vmov	d6, r8, r9
 800f772:	4a29      	ldr	r2, [pc, #164]	; (800f818 <_strtod_l+0x588>)
 800f774:	ee27 7b06 	vmul.f64	d7, d7, d6
 800f778:	ee17 1a90 	vmov	r1, s15
 800f77c:	400a      	ands	r2, r1
 800f77e:	4282      	cmp	r2, r0
 800f780:	ec59 8b17 	vmov	r8, r9, d7
 800f784:	d8bc      	bhi.n	800f700 <_strtod_l+0x470>
 800f786:	f5a0 1080 	sub.w	r0, r0, #1048576	; 0x100000
 800f78a:	4282      	cmp	r2, r0
 800f78c:	bf86      	itte	hi
 800f78e:	f8df 908c 	ldrhi.w	r9, [pc, #140]	; 800f81c <_strtod_l+0x58c>
 800f792:	f04f 38ff 	movhi.w	r8, #4294967295
 800f796:	f101 7954 	addls.w	r9, r1, #55574528	; 0x3500000
 800f79a:	2200      	movs	r2, #0
 800f79c:	9204      	str	r2, [sp, #16]
 800f79e:	e078      	b.n	800f892 <_strtod_l+0x602>
 800f7a0:	07d6      	lsls	r6, r2, #31
 800f7a2:	d504      	bpl.n	800f7ae <_strtod_l+0x51e>
 800f7a4:	ed9c 6b00 	vldr	d6, [ip]
 800f7a8:	2001      	movs	r0, #1
 800f7aa:	ee27 7b06 	vmul.f64	d7, d7, d6
 800f7ae:	3101      	adds	r1, #1
 800f7b0:	1052      	asrs	r2, r2, #1
 800f7b2:	f10c 0c08 	add.w	ip, ip, #8
 800f7b6:	e7cd      	b.n	800f754 <_strtod_l+0x4c4>
 800f7b8:	d0ef      	beq.n	800f79a <_strtod_l+0x50a>
 800f7ba:	4252      	negs	r2, r2
 800f7bc:	f012 000f 	ands.w	r0, r2, #15
 800f7c0:	d00a      	beq.n	800f7d8 <_strtod_l+0x548>
 800f7c2:	4912      	ldr	r1, [pc, #72]	; (800f80c <_strtod_l+0x57c>)
 800f7c4:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 800f7c8:	ed91 7b00 	vldr	d7, [r1]
 800f7cc:	ec49 8b16 	vmov	d6, r8, r9
 800f7d0:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800f7d4:	ec59 8b17 	vmov	r8, r9, d7
 800f7d8:	1112      	asrs	r2, r2, #4
 800f7da:	d0de      	beq.n	800f79a <_strtod_l+0x50a>
 800f7dc:	2a1f      	cmp	r2, #31
 800f7de:	dd1f      	ble.n	800f820 <_strtod_l+0x590>
 800f7e0:	2500      	movs	r5, #0
 800f7e2:	462e      	mov	r6, r5
 800f7e4:	9506      	str	r5, [sp, #24]
 800f7e6:	462f      	mov	r7, r5
 800f7e8:	2322      	movs	r3, #34	; 0x22
 800f7ea:	f04f 0800 	mov.w	r8, #0
 800f7ee:	f04f 0900 	mov.w	r9, #0
 800f7f2:	6023      	str	r3, [r4, #0]
 800f7f4:	e78e      	b.n	800f714 <_strtod_l+0x484>
 800f7f6:	bf00      	nop
 800f7f8:	080122e1 	.word	0x080122e1
 800f7fc:	080122f8 	.word	0x080122f8
 800f800:	080122d8 	.word	0x080122d8
 800f804:	080122db 	.word	0x080122db
 800f808:	0801256f 	.word	0x0801256f
 800f80c:	08012460 	.word	0x08012460
 800f810:	08012438 	.word	0x08012438
 800f814:	7ca00000 	.word	0x7ca00000
 800f818:	7ff00000 	.word	0x7ff00000
 800f81c:	7fefffff 	.word	0x7fefffff
 800f820:	f012 0110 	ands.w	r1, r2, #16
 800f824:	bf18      	it	ne
 800f826:	216a      	movne	r1, #106	; 0x6a
 800f828:	9104      	str	r1, [sp, #16]
 800f82a:	ec49 8b17 	vmov	d7, r8, r9
 800f82e:	49be      	ldr	r1, [pc, #760]	; (800fb28 <_strtod_l+0x898>)
 800f830:	2000      	movs	r0, #0
 800f832:	07d6      	lsls	r6, r2, #31
 800f834:	d504      	bpl.n	800f840 <_strtod_l+0x5b0>
 800f836:	ed91 6b00 	vldr	d6, [r1]
 800f83a:	2001      	movs	r0, #1
 800f83c:	ee27 7b06 	vmul.f64	d7, d7, d6
 800f840:	1052      	asrs	r2, r2, #1
 800f842:	f101 0108 	add.w	r1, r1, #8
 800f846:	d1f4      	bne.n	800f832 <_strtod_l+0x5a2>
 800f848:	b108      	cbz	r0, 800f84e <_strtod_l+0x5be>
 800f84a:	ec59 8b17 	vmov	r8, r9, d7
 800f84e:	9a04      	ldr	r2, [sp, #16]
 800f850:	b1c2      	cbz	r2, 800f884 <_strtod_l+0x5f4>
 800f852:	f3c9 510a 	ubfx	r1, r9, #20, #11
 800f856:	f1c1 026b 	rsb	r2, r1, #107	; 0x6b
 800f85a:	2a00      	cmp	r2, #0
 800f85c:	4648      	mov	r0, r9
 800f85e:	dd11      	ble.n	800f884 <_strtod_l+0x5f4>
 800f860:	2a1f      	cmp	r2, #31
 800f862:	f340 812e 	ble.w	800fac2 <_strtod_l+0x832>
 800f866:	2a34      	cmp	r2, #52	; 0x34
 800f868:	bfde      	ittt	le
 800f86a:	f1c1 014b 	rsble	r1, r1, #75	; 0x4b
 800f86e:	f04f 32ff 	movle.w	r2, #4294967295
 800f872:	fa02 f101 	lslle.w	r1, r2, r1
 800f876:	f04f 0800 	mov.w	r8, #0
 800f87a:	bfcc      	ite	gt
 800f87c:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 800f880:	ea01 0900 	andle.w	r9, r1, r0
 800f884:	ec49 8b17 	vmov	d7, r8, r9
 800f888:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800f88c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f890:	d0a6      	beq.n	800f7e0 <_strtod_l+0x550>
 800f892:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f894:	9200      	str	r2, [sp, #0]
 800f896:	990a      	ldr	r1, [sp, #40]	; 0x28
 800f898:	9a06      	ldr	r2, [sp, #24]
 800f89a:	4620      	mov	r0, r4
 800f89c:	f000 ff7c 	bl	8010798 <__s2b>
 800f8a0:	9006      	str	r0, [sp, #24]
 800f8a2:	2800      	cmp	r0, #0
 800f8a4:	f43f af2c 	beq.w	800f700 <_strtod_l+0x470>
 800f8a8:	9b07      	ldr	r3, [sp, #28]
 800f8aa:	1b7d      	subs	r5, r7, r5
 800f8ac:	2b00      	cmp	r3, #0
 800f8ae:	bfb4      	ite	lt
 800f8b0:	462b      	movlt	r3, r5
 800f8b2:	2300      	movge	r3, #0
 800f8b4:	9309      	str	r3, [sp, #36]	; 0x24
 800f8b6:	9b07      	ldr	r3, [sp, #28]
 800f8b8:	ed9f 9b93 	vldr	d9, [pc, #588]	; 800fb08 <_strtod_l+0x878>
 800f8bc:	ed9f ab94 	vldr	d10, [pc, #592]	; 800fb10 <_strtod_l+0x880>
 800f8c0:	ed9f bb95 	vldr	d11, [pc, #596]	; 800fb18 <_strtod_l+0x888>
 800f8c4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800f8c8:	2500      	movs	r5, #0
 800f8ca:	930c      	str	r3, [sp, #48]	; 0x30
 800f8cc:	462e      	mov	r6, r5
 800f8ce:	9b06      	ldr	r3, [sp, #24]
 800f8d0:	4620      	mov	r0, r4
 800f8d2:	6859      	ldr	r1, [r3, #4]
 800f8d4:	f000 feb8 	bl	8010648 <_Balloc>
 800f8d8:	4607      	mov	r7, r0
 800f8da:	2800      	cmp	r0, #0
 800f8dc:	f43f af14 	beq.w	800f708 <_strtod_l+0x478>
 800f8e0:	9b06      	ldr	r3, [sp, #24]
 800f8e2:	691a      	ldr	r2, [r3, #16]
 800f8e4:	3202      	adds	r2, #2
 800f8e6:	f103 010c 	add.w	r1, r3, #12
 800f8ea:	0092      	lsls	r2, r2, #2
 800f8ec:	300c      	adds	r0, #12
 800f8ee:	f7ff fac5 	bl	800ee7c <memcpy>
 800f8f2:	ec49 8b10 	vmov	d0, r8, r9
 800f8f6:	aa14      	add	r2, sp, #80	; 0x50
 800f8f8:	a913      	add	r1, sp, #76	; 0x4c
 800f8fa:	4620      	mov	r0, r4
 800f8fc:	f001 fa92 	bl	8010e24 <__d2b>
 800f900:	ec49 8b18 	vmov	d8, r8, r9
 800f904:	9012      	str	r0, [sp, #72]	; 0x48
 800f906:	2800      	cmp	r0, #0
 800f908:	f43f aefe 	beq.w	800f708 <_strtod_l+0x478>
 800f90c:	2101      	movs	r1, #1
 800f90e:	4620      	mov	r0, r4
 800f910:	f000 ffdc 	bl	80108cc <__i2b>
 800f914:	4606      	mov	r6, r0
 800f916:	2800      	cmp	r0, #0
 800f918:	f43f aef6 	beq.w	800f708 <_strtod_l+0x478>
 800f91c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800f91e:	9914      	ldr	r1, [sp, #80]	; 0x50
 800f920:	2b00      	cmp	r3, #0
 800f922:	bfab      	itete	ge
 800f924:	9a09      	ldrge	r2, [sp, #36]	; 0x24
 800f926:	9a0c      	ldrlt	r2, [sp, #48]	; 0x30
 800f928:	f8dd a030 	ldrge.w	sl, [sp, #48]	; 0x30
 800f92c:	f8dd b024 	ldrlt.w	fp, [sp, #36]	; 0x24
 800f930:	bfac      	ite	ge
 800f932:	eb03 0b02 	addge.w	fp, r3, r2
 800f936:	eba2 0a03 	sublt.w	sl, r2, r3
 800f93a:	9a04      	ldr	r2, [sp, #16]
 800f93c:	1a9b      	subs	r3, r3, r2
 800f93e:	440b      	add	r3, r1
 800f940:	4a7a      	ldr	r2, [pc, #488]	; (800fb2c <_strtod_l+0x89c>)
 800f942:	3b01      	subs	r3, #1
 800f944:	4293      	cmp	r3, r2
 800f946:	f1c1 0136 	rsb	r1, r1, #54	; 0x36
 800f94a:	f280 80cd 	bge.w	800fae8 <_strtod_l+0x858>
 800f94e:	1ad2      	subs	r2, r2, r3
 800f950:	2a1f      	cmp	r2, #31
 800f952:	eba1 0102 	sub.w	r1, r1, r2
 800f956:	f04f 0001 	mov.w	r0, #1
 800f95a:	f300 80b9 	bgt.w	800fad0 <_strtod_l+0x840>
 800f95e:	fa00 f302 	lsl.w	r3, r0, r2
 800f962:	930b      	str	r3, [sp, #44]	; 0x2c
 800f964:	2300      	movs	r3, #0
 800f966:	930a      	str	r3, [sp, #40]	; 0x28
 800f968:	eb0b 0301 	add.w	r3, fp, r1
 800f96c:	9a04      	ldr	r2, [sp, #16]
 800f96e:	459b      	cmp	fp, r3
 800f970:	448a      	add	sl, r1
 800f972:	4492      	add	sl, r2
 800f974:	465a      	mov	r2, fp
 800f976:	bfa8      	it	ge
 800f978:	461a      	movge	r2, r3
 800f97a:	4552      	cmp	r2, sl
 800f97c:	bfa8      	it	ge
 800f97e:	4652      	movge	r2, sl
 800f980:	2a00      	cmp	r2, #0
 800f982:	bfc2      	ittt	gt
 800f984:	1a9b      	subgt	r3, r3, r2
 800f986:	ebaa 0a02 	subgt.w	sl, sl, r2
 800f98a:	ebab 0b02 	subgt.w	fp, fp, r2
 800f98e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f990:	2a00      	cmp	r2, #0
 800f992:	dd18      	ble.n	800f9c6 <_strtod_l+0x736>
 800f994:	4631      	mov	r1, r6
 800f996:	4620      	mov	r0, r4
 800f998:	930f      	str	r3, [sp, #60]	; 0x3c
 800f99a:	f001 f857 	bl	8010a4c <__pow5mult>
 800f99e:	4606      	mov	r6, r0
 800f9a0:	2800      	cmp	r0, #0
 800f9a2:	f43f aeb1 	beq.w	800f708 <_strtod_l+0x478>
 800f9a6:	4601      	mov	r1, r0
 800f9a8:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800f9aa:	4620      	mov	r0, r4
 800f9ac:	f000 ffa4 	bl	80108f8 <__multiply>
 800f9b0:	900e      	str	r0, [sp, #56]	; 0x38
 800f9b2:	2800      	cmp	r0, #0
 800f9b4:	f43f aea8 	beq.w	800f708 <_strtod_l+0x478>
 800f9b8:	9912      	ldr	r1, [sp, #72]	; 0x48
 800f9ba:	4620      	mov	r0, r4
 800f9bc:	f000 fe84 	bl	80106c8 <_Bfree>
 800f9c0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800f9c2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800f9c4:	9212      	str	r2, [sp, #72]	; 0x48
 800f9c6:	2b00      	cmp	r3, #0
 800f9c8:	f300 8093 	bgt.w	800faf2 <_strtod_l+0x862>
 800f9cc:	9b07      	ldr	r3, [sp, #28]
 800f9ce:	2b00      	cmp	r3, #0
 800f9d0:	dd08      	ble.n	800f9e4 <_strtod_l+0x754>
 800f9d2:	4639      	mov	r1, r7
 800f9d4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800f9d6:	4620      	mov	r0, r4
 800f9d8:	f001 f838 	bl	8010a4c <__pow5mult>
 800f9dc:	4607      	mov	r7, r0
 800f9de:	2800      	cmp	r0, #0
 800f9e0:	f43f ae92 	beq.w	800f708 <_strtod_l+0x478>
 800f9e4:	f1ba 0f00 	cmp.w	sl, #0
 800f9e8:	dd08      	ble.n	800f9fc <_strtod_l+0x76c>
 800f9ea:	4639      	mov	r1, r7
 800f9ec:	4652      	mov	r2, sl
 800f9ee:	4620      	mov	r0, r4
 800f9f0:	f001 f886 	bl	8010b00 <__lshift>
 800f9f4:	4607      	mov	r7, r0
 800f9f6:	2800      	cmp	r0, #0
 800f9f8:	f43f ae86 	beq.w	800f708 <_strtod_l+0x478>
 800f9fc:	f1bb 0f00 	cmp.w	fp, #0
 800fa00:	dd08      	ble.n	800fa14 <_strtod_l+0x784>
 800fa02:	4631      	mov	r1, r6
 800fa04:	465a      	mov	r2, fp
 800fa06:	4620      	mov	r0, r4
 800fa08:	f001 f87a 	bl	8010b00 <__lshift>
 800fa0c:	4606      	mov	r6, r0
 800fa0e:	2800      	cmp	r0, #0
 800fa10:	f43f ae7a 	beq.w	800f708 <_strtod_l+0x478>
 800fa14:	9912      	ldr	r1, [sp, #72]	; 0x48
 800fa16:	463a      	mov	r2, r7
 800fa18:	4620      	mov	r0, r4
 800fa1a:	f001 f8fd 	bl	8010c18 <__mdiff>
 800fa1e:	4605      	mov	r5, r0
 800fa20:	2800      	cmp	r0, #0
 800fa22:	f43f ae71 	beq.w	800f708 <_strtod_l+0x478>
 800fa26:	2300      	movs	r3, #0
 800fa28:	f8d0 a00c 	ldr.w	sl, [r0, #12]
 800fa2c:	60c3      	str	r3, [r0, #12]
 800fa2e:	4631      	mov	r1, r6
 800fa30:	f001 f8d6 	bl	8010be0 <__mcmp>
 800fa34:	2800      	cmp	r0, #0
 800fa36:	da7d      	bge.n	800fb34 <_strtod_l+0x8a4>
 800fa38:	ea5a 0308 	orrs.w	r3, sl, r8
 800fa3c:	f040 80a3 	bne.w	800fb86 <_strtod_l+0x8f6>
 800fa40:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800fa44:	2b00      	cmp	r3, #0
 800fa46:	f040 809e 	bne.w	800fb86 <_strtod_l+0x8f6>
 800fa4a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800fa4e:	0d1b      	lsrs	r3, r3, #20
 800fa50:	051b      	lsls	r3, r3, #20
 800fa52:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800fa56:	f240 8096 	bls.w	800fb86 <_strtod_l+0x8f6>
 800fa5a:	696b      	ldr	r3, [r5, #20]
 800fa5c:	b91b      	cbnz	r3, 800fa66 <_strtod_l+0x7d6>
 800fa5e:	692b      	ldr	r3, [r5, #16]
 800fa60:	2b01      	cmp	r3, #1
 800fa62:	f340 8090 	ble.w	800fb86 <_strtod_l+0x8f6>
 800fa66:	4629      	mov	r1, r5
 800fa68:	2201      	movs	r2, #1
 800fa6a:	4620      	mov	r0, r4
 800fa6c:	f001 f848 	bl	8010b00 <__lshift>
 800fa70:	4631      	mov	r1, r6
 800fa72:	4605      	mov	r5, r0
 800fa74:	f001 f8b4 	bl	8010be0 <__mcmp>
 800fa78:	2800      	cmp	r0, #0
 800fa7a:	f340 8084 	ble.w	800fb86 <_strtod_l+0x8f6>
 800fa7e:	9904      	ldr	r1, [sp, #16]
 800fa80:	4a2b      	ldr	r2, [pc, #172]	; (800fb30 <_strtod_l+0x8a0>)
 800fa82:	464b      	mov	r3, r9
 800fa84:	2900      	cmp	r1, #0
 800fa86:	f000 809d 	beq.w	800fbc4 <_strtod_l+0x934>
 800fa8a:	ea02 0109 	and.w	r1, r2, r9
 800fa8e:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800fa92:	f300 8097 	bgt.w	800fbc4 <_strtod_l+0x934>
 800fa96:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800fa9a:	f77f aea5 	ble.w	800f7e8 <_strtod_l+0x558>
 800fa9e:	ed9f 7b20 	vldr	d7, [pc, #128]	; 800fb20 <_strtod_l+0x890>
 800faa2:	ec49 8b16 	vmov	d6, r8, r9
 800faa6:	ee26 7b07 	vmul.f64	d7, d6, d7
 800faaa:	ed8d 7b04 	vstr	d7, [sp, #16]
 800faae:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
 800fab2:	4313      	orrs	r3, r2
 800fab4:	bf08      	it	eq
 800fab6:	2322      	moveq	r3, #34	; 0x22
 800fab8:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800fabc:	bf08      	it	eq
 800fabe:	6023      	streq	r3, [r4, #0]
 800fac0:	e62c      	b.n	800f71c <_strtod_l+0x48c>
 800fac2:	f04f 31ff 	mov.w	r1, #4294967295
 800fac6:	fa01 f202 	lsl.w	r2, r1, r2
 800faca:	ea02 0808 	and.w	r8, r2, r8
 800face:	e6d9      	b.n	800f884 <_strtod_l+0x5f4>
 800fad0:	f1c3 437f 	rsb	r3, r3, #4278190080	; 0xff000000
 800fad4:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
 800fad8:	f503 437b 	add.w	r3, r3, #64256	; 0xfb00
 800fadc:	33e2      	adds	r3, #226	; 0xe2
 800fade:	fa00 f303 	lsl.w	r3, r0, r3
 800fae2:	e9cd 300a 	strd	r3, r0, [sp, #40]	; 0x28
 800fae6:	e73f      	b.n	800f968 <_strtod_l+0x6d8>
 800fae8:	2200      	movs	r2, #0
 800faea:	2301      	movs	r3, #1
 800faec:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800faf0:	e73a      	b.n	800f968 <_strtod_l+0x6d8>
 800faf2:	9912      	ldr	r1, [sp, #72]	; 0x48
 800faf4:	461a      	mov	r2, r3
 800faf6:	4620      	mov	r0, r4
 800faf8:	f001 f802 	bl	8010b00 <__lshift>
 800fafc:	9012      	str	r0, [sp, #72]	; 0x48
 800fafe:	2800      	cmp	r0, #0
 800fb00:	f47f af64 	bne.w	800f9cc <_strtod_l+0x73c>
 800fb04:	e600      	b.n	800f708 <_strtod_l+0x478>
 800fb06:	bf00      	nop
 800fb08:	94a03595 	.word	0x94a03595
 800fb0c:	3fcfffff 	.word	0x3fcfffff
 800fb10:	94a03595 	.word	0x94a03595
 800fb14:	3fdfffff 	.word	0x3fdfffff
 800fb18:	35afe535 	.word	0x35afe535
 800fb1c:	3fe00000 	.word	0x3fe00000
 800fb20:	00000000 	.word	0x00000000
 800fb24:	39500000 	.word	0x39500000
 800fb28:	08012310 	.word	0x08012310
 800fb2c:	fffffc02 	.word	0xfffffc02
 800fb30:	7ff00000 	.word	0x7ff00000
 800fb34:	46cb      	mov	fp, r9
 800fb36:	d15f      	bne.n	800fbf8 <_strtod_l+0x968>
 800fb38:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800fb3c:	f1ba 0f00 	cmp.w	sl, #0
 800fb40:	d02a      	beq.n	800fb98 <_strtod_l+0x908>
 800fb42:	4aa7      	ldr	r2, [pc, #668]	; (800fde0 <_strtod_l+0xb50>)
 800fb44:	4293      	cmp	r3, r2
 800fb46:	d12b      	bne.n	800fba0 <_strtod_l+0x910>
 800fb48:	9b04      	ldr	r3, [sp, #16]
 800fb4a:	4642      	mov	r2, r8
 800fb4c:	b1fb      	cbz	r3, 800fb8e <_strtod_l+0x8fe>
 800fb4e:	4ba5      	ldr	r3, [pc, #660]	; (800fde4 <_strtod_l+0xb54>)
 800fb50:	ea09 0303 	and.w	r3, r9, r3
 800fb54:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800fb58:	f04f 31ff 	mov.w	r1, #4294967295
 800fb5c:	d81a      	bhi.n	800fb94 <_strtod_l+0x904>
 800fb5e:	0d1b      	lsrs	r3, r3, #20
 800fb60:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800fb64:	fa01 f303 	lsl.w	r3, r1, r3
 800fb68:	429a      	cmp	r2, r3
 800fb6a:	d119      	bne.n	800fba0 <_strtod_l+0x910>
 800fb6c:	4b9e      	ldr	r3, [pc, #632]	; (800fde8 <_strtod_l+0xb58>)
 800fb6e:	459b      	cmp	fp, r3
 800fb70:	d102      	bne.n	800fb78 <_strtod_l+0x8e8>
 800fb72:	3201      	adds	r2, #1
 800fb74:	f43f adc8 	beq.w	800f708 <_strtod_l+0x478>
 800fb78:	4b9a      	ldr	r3, [pc, #616]	; (800fde4 <_strtod_l+0xb54>)
 800fb7a:	ea0b 0303 	and.w	r3, fp, r3
 800fb7e:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 800fb82:	f04f 0800 	mov.w	r8, #0
 800fb86:	9b04      	ldr	r3, [sp, #16]
 800fb88:	2b00      	cmp	r3, #0
 800fb8a:	d188      	bne.n	800fa9e <_strtod_l+0x80e>
 800fb8c:	e5c6      	b.n	800f71c <_strtod_l+0x48c>
 800fb8e:	f04f 33ff 	mov.w	r3, #4294967295
 800fb92:	e7e9      	b.n	800fb68 <_strtod_l+0x8d8>
 800fb94:	460b      	mov	r3, r1
 800fb96:	e7e7      	b.n	800fb68 <_strtod_l+0x8d8>
 800fb98:	ea53 0308 	orrs.w	r3, r3, r8
 800fb9c:	f43f af6f 	beq.w	800fa7e <_strtod_l+0x7ee>
 800fba0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800fba2:	b1cb      	cbz	r3, 800fbd8 <_strtod_l+0x948>
 800fba4:	ea13 0f0b 	tst.w	r3, fp
 800fba8:	d0ed      	beq.n	800fb86 <_strtod_l+0x8f6>
 800fbaa:	9a04      	ldr	r2, [sp, #16]
 800fbac:	4640      	mov	r0, r8
 800fbae:	4649      	mov	r1, r9
 800fbb0:	f1ba 0f00 	cmp.w	sl, #0
 800fbb4:	d014      	beq.n	800fbe0 <_strtod_l+0x950>
 800fbb6:	f7ff fb50 	bl	800f25a <sulp>
 800fbba:	ee38 7b00 	vadd.f64	d7, d8, d0
 800fbbe:	ec59 8b17 	vmov	r8, r9, d7
 800fbc2:	e7e0      	b.n	800fb86 <_strtod_l+0x8f6>
 800fbc4:	4013      	ands	r3, r2
 800fbc6:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800fbca:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 800fbce:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 800fbd2:	f04f 38ff 	mov.w	r8, #4294967295
 800fbd6:	e7d6      	b.n	800fb86 <_strtod_l+0x8f6>
 800fbd8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800fbda:	ea13 0f08 	tst.w	r3, r8
 800fbde:	e7e3      	b.n	800fba8 <_strtod_l+0x918>
 800fbe0:	f7ff fb3b 	bl	800f25a <sulp>
 800fbe4:	ee38 0b40 	vsub.f64	d0, d8, d0
 800fbe8:	eeb5 0b40 	vcmp.f64	d0, #0.0
 800fbec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fbf0:	ec59 8b10 	vmov	r8, r9, d0
 800fbf4:	d1c7      	bne.n	800fb86 <_strtod_l+0x8f6>
 800fbf6:	e5f7      	b.n	800f7e8 <_strtod_l+0x558>
 800fbf8:	4631      	mov	r1, r6
 800fbfa:	4628      	mov	r0, r5
 800fbfc:	f001 f96e 	bl	8010edc <__ratio>
 800fc00:	eeb0 7b00 	vmov.f64	d7, #0	; 0x40000000  2.0
 800fc04:	eeb4 0bc7 	vcmpe.f64	d0, d7
 800fc08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fc0c:	d865      	bhi.n	800fcda <_strtod_l+0xa4a>
 800fc0e:	f1ba 0f00 	cmp.w	sl, #0
 800fc12:	d042      	beq.n	800fc9a <_strtod_l+0xa0a>
 800fc14:	4b75      	ldr	r3, [pc, #468]	; (800fdec <_strtod_l+0xb5c>)
 800fc16:	2200      	movs	r2, #0
 800fc18:	eeb7 db00 	vmov.f64	d13, #112	; 0x3f800000  1.0
 800fc1c:	4871      	ldr	r0, [pc, #452]	; (800fde4 <_strtod_l+0xb54>)
 800fc1e:	f8df c1d8 	ldr.w	ip, [pc, #472]	; 800fdf8 <_strtod_l+0xb68>
 800fc22:	ea0b 0100 	and.w	r1, fp, r0
 800fc26:	4561      	cmp	r1, ip
 800fc28:	f040 808e 	bne.w	800fd48 <_strtod_l+0xab8>
 800fc2c:	f1ab 7954 	sub.w	r9, fp, #55574528	; 0x3500000
 800fc30:	ec49 8b10 	vmov	d0, r8, r9
 800fc34:	ec43 2b1c 	vmov	d12, r2, r3
 800fc38:	910a      	str	r1, [sp, #40]	; 0x28
 800fc3a:	f001 f877 	bl	8010d2c <__ulp>
 800fc3e:	ec49 8b1e 	vmov	d14, r8, r9
 800fc42:	4868      	ldr	r0, [pc, #416]	; (800fde4 <_strtod_l+0xb54>)
 800fc44:	eeac eb00 	vfma.f64	d14, d12, d0
 800fc48:	ee1e 3a90 	vmov	r3, s29
 800fc4c:	4a68      	ldr	r2, [pc, #416]	; (800fdf0 <_strtod_l+0xb60>)
 800fc4e:	990a      	ldr	r1, [sp, #40]	; 0x28
 800fc50:	4018      	ands	r0, r3
 800fc52:	4290      	cmp	r0, r2
 800fc54:	ec59 8b1e 	vmov	r8, r9, d14
 800fc58:	d94e      	bls.n	800fcf8 <_strtod_l+0xa68>
 800fc5a:	ee18 3a90 	vmov	r3, s17
 800fc5e:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800fc62:	4293      	cmp	r3, r2
 800fc64:	d104      	bne.n	800fc70 <_strtod_l+0x9e0>
 800fc66:	ee18 3a10 	vmov	r3, s16
 800fc6a:	3301      	adds	r3, #1
 800fc6c:	f43f ad4c 	beq.w	800f708 <_strtod_l+0x478>
 800fc70:	f8df 9174 	ldr.w	r9, [pc, #372]	; 800fde8 <_strtod_l+0xb58>
 800fc74:	f04f 38ff 	mov.w	r8, #4294967295
 800fc78:	9912      	ldr	r1, [sp, #72]	; 0x48
 800fc7a:	4620      	mov	r0, r4
 800fc7c:	f000 fd24 	bl	80106c8 <_Bfree>
 800fc80:	4639      	mov	r1, r7
 800fc82:	4620      	mov	r0, r4
 800fc84:	f000 fd20 	bl	80106c8 <_Bfree>
 800fc88:	4631      	mov	r1, r6
 800fc8a:	4620      	mov	r0, r4
 800fc8c:	f000 fd1c 	bl	80106c8 <_Bfree>
 800fc90:	4629      	mov	r1, r5
 800fc92:	4620      	mov	r0, r4
 800fc94:	f000 fd18 	bl	80106c8 <_Bfree>
 800fc98:	e619      	b.n	800f8ce <_strtod_l+0x63e>
 800fc9a:	f1b8 0f00 	cmp.w	r8, #0
 800fc9e:	d112      	bne.n	800fcc6 <_strtod_l+0xa36>
 800fca0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800fca4:	b9b3      	cbnz	r3, 800fcd4 <_strtod_l+0xa44>
 800fca6:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 800fcaa:	eeb4 0bc7 	vcmpe.f64	d0, d7
 800fcae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fcb2:	eeb6 db00 	vmov.f64	d13, #96	; 0x3f000000  0.5
 800fcb6:	bf58      	it	pl
 800fcb8:	ee20 db0d 	vmulpl.f64	d13, d0, d13
 800fcbc:	eeb1 7b4d 	vneg.f64	d7, d13
 800fcc0:	ec53 2b17 	vmov	r2, r3, d7
 800fcc4:	e7aa      	b.n	800fc1c <_strtod_l+0x98c>
 800fcc6:	f1b8 0f01 	cmp.w	r8, #1
 800fcca:	d103      	bne.n	800fcd4 <_strtod_l+0xa44>
 800fccc:	f1b9 0f00 	cmp.w	r9, #0
 800fcd0:	f43f ad8a 	beq.w	800f7e8 <_strtod_l+0x558>
 800fcd4:	4b47      	ldr	r3, [pc, #284]	; (800fdf4 <_strtod_l+0xb64>)
 800fcd6:	2200      	movs	r2, #0
 800fcd8:	e79e      	b.n	800fc18 <_strtod_l+0x988>
 800fcda:	eeb6 db00 	vmov.f64	d13, #96	; 0x3f000000  0.5
 800fcde:	ee20 db0d 	vmul.f64	d13, d0, d13
 800fce2:	f1ba 0f00 	cmp.w	sl, #0
 800fce6:	d104      	bne.n	800fcf2 <_strtod_l+0xa62>
 800fce8:	eeb1 7b4d 	vneg.f64	d7, d13
 800fcec:	ec53 2b17 	vmov	r2, r3, d7
 800fcf0:	e794      	b.n	800fc1c <_strtod_l+0x98c>
 800fcf2:	eeb0 7b4d 	vmov.f64	d7, d13
 800fcf6:	e7f9      	b.n	800fcec <_strtod_l+0xa5c>
 800fcf8:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 800fcfc:	9b04      	ldr	r3, [sp, #16]
 800fcfe:	2b00      	cmp	r3, #0
 800fd00:	d1ba      	bne.n	800fc78 <_strtod_l+0x9e8>
 800fd02:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800fd06:	0d1b      	lsrs	r3, r3, #20
 800fd08:	051b      	lsls	r3, r3, #20
 800fd0a:	4299      	cmp	r1, r3
 800fd0c:	d1b4      	bne.n	800fc78 <_strtod_l+0x9e8>
 800fd0e:	ec51 0b1d 	vmov	r0, r1, d13
 800fd12:	f7f0 fd11 	bl	8000738 <__aeabi_d2lz>
 800fd16:	f7f0 fcc9 	bl	80006ac <__aeabi_l2d>
 800fd1a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800fd1e:	ec41 0b17 	vmov	d7, r0, r1
 800fd22:	ea43 0308 	orr.w	r3, r3, r8
 800fd26:	ea53 030a 	orrs.w	r3, r3, sl
 800fd2a:	ee3d db47 	vsub.f64	d13, d13, d7
 800fd2e:	d03c      	beq.n	800fdaa <_strtod_l+0xb1a>
 800fd30:	eeb4 dbca 	vcmpe.f64	d13, d10
 800fd34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fd38:	f53f acf0 	bmi.w	800f71c <_strtod_l+0x48c>
 800fd3c:	eeb4 dbcb 	vcmpe.f64	d13, d11
 800fd40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fd44:	dd98      	ble.n	800fc78 <_strtod_l+0x9e8>
 800fd46:	e4e9      	b.n	800f71c <_strtod_l+0x48c>
 800fd48:	9804      	ldr	r0, [sp, #16]
 800fd4a:	b1f0      	cbz	r0, 800fd8a <_strtod_l+0xafa>
 800fd4c:	f1b1 6fd4 	cmp.w	r1, #111149056	; 0x6a00000
 800fd50:	d81b      	bhi.n	800fd8a <_strtod_l+0xafa>
 800fd52:	ed9f 7b21 	vldr	d7, [pc, #132]	; 800fdd8 <_strtod_l+0xb48>
 800fd56:	eeb4 dbc7 	vcmpe.f64	d13, d7
 800fd5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fd5e:	d811      	bhi.n	800fd84 <_strtod_l+0xaf4>
 800fd60:	eebc dbcd 	vcvt.u32.f64	s26, d13
 800fd64:	ee1d 3a10 	vmov	r3, s26
 800fd68:	2b01      	cmp	r3, #1
 800fd6a:	bf38      	it	cc
 800fd6c:	2301      	movcc	r3, #1
 800fd6e:	ee0d 3a10 	vmov	s26, r3
 800fd72:	eeb8 db4d 	vcvt.f64.u32	d13, s26
 800fd76:	f1ba 0f00 	cmp.w	sl, #0
 800fd7a:	d113      	bne.n	800fda4 <_strtod_l+0xb14>
 800fd7c:	eeb1 7b4d 	vneg.f64	d7, d13
 800fd80:	ec53 2b17 	vmov	r2, r3, d7
 800fd84:	f103 60d6 	add.w	r0, r3, #112197632	; 0x6b00000
 800fd88:	1a43      	subs	r3, r0, r1
 800fd8a:	eeb0 0b48 	vmov.f64	d0, d8
 800fd8e:	ec43 2b1c 	vmov	d12, r2, r3
 800fd92:	910a      	str	r1, [sp, #40]	; 0x28
 800fd94:	f000 ffca 	bl	8010d2c <__ulp>
 800fd98:	990a      	ldr	r1, [sp, #40]	; 0x28
 800fd9a:	eeac 8b00 	vfma.f64	d8, d12, d0
 800fd9e:	ec59 8b18 	vmov	r8, r9, d8
 800fda2:	e7ab      	b.n	800fcfc <_strtod_l+0xa6c>
 800fda4:	eeb0 7b4d 	vmov.f64	d7, d13
 800fda8:	e7ea      	b.n	800fd80 <_strtod_l+0xaf0>
 800fdaa:	eeb4 dbc9 	vcmpe.f64	d13, d9
 800fdae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fdb2:	f57f af61 	bpl.w	800fc78 <_strtod_l+0x9e8>
 800fdb6:	e4b1      	b.n	800f71c <_strtod_l+0x48c>
 800fdb8:	2300      	movs	r3, #0
 800fdba:	9308      	str	r3, [sp, #32]
 800fdbc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800fdbe:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800fdc0:	6013      	str	r3, [r2, #0]
 800fdc2:	f7ff baad 	b.w	800f320 <_strtod_l+0x90>
 800fdc6:	2a65      	cmp	r2, #101	; 0x65
 800fdc8:	f43f ab9f 	beq.w	800f50a <_strtod_l+0x27a>
 800fdcc:	2a45      	cmp	r2, #69	; 0x45
 800fdce:	f43f ab9c 	beq.w	800f50a <_strtod_l+0x27a>
 800fdd2:	2101      	movs	r1, #1
 800fdd4:	f7ff bbd4 	b.w	800f580 <_strtod_l+0x2f0>
 800fdd8:	ffc00000 	.word	0xffc00000
 800fddc:	41dfffff 	.word	0x41dfffff
 800fde0:	000fffff 	.word	0x000fffff
 800fde4:	7ff00000 	.word	0x7ff00000
 800fde8:	7fefffff 	.word	0x7fefffff
 800fdec:	3ff00000 	.word	0x3ff00000
 800fdf0:	7c9fffff 	.word	0x7c9fffff
 800fdf4:	bff00000 	.word	0xbff00000
 800fdf8:	7fe00000 	.word	0x7fe00000

0800fdfc <strtod>:
 800fdfc:	460a      	mov	r2, r1
 800fdfe:	4601      	mov	r1, r0
 800fe00:	4802      	ldr	r0, [pc, #8]	; (800fe0c <strtod+0x10>)
 800fe02:	4b03      	ldr	r3, [pc, #12]	; (800fe10 <strtod+0x14>)
 800fe04:	6800      	ldr	r0, [r0, #0]
 800fe06:	f7ff ba43 	b.w	800f290 <_strtod_l>
 800fe0a:	bf00      	nop
 800fe0c:	24000088 	.word	0x24000088
 800fe10:	240000f0 	.word	0x240000f0

0800fe14 <_write_r>:
 800fe14:	b538      	push	{r3, r4, r5, lr}
 800fe16:	4d07      	ldr	r5, [pc, #28]	; (800fe34 <_write_r+0x20>)
 800fe18:	4604      	mov	r4, r0
 800fe1a:	4608      	mov	r0, r1
 800fe1c:	4611      	mov	r1, r2
 800fe1e:	2200      	movs	r2, #0
 800fe20:	602a      	str	r2, [r5, #0]
 800fe22:	461a      	mov	r2, r3
 800fe24:	f7f3 febd 	bl	8003ba2 <_write>
 800fe28:	1c43      	adds	r3, r0, #1
 800fe2a:	d102      	bne.n	800fe32 <_write_r+0x1e>
 800fe2c:	682b      	ldr	r3, [r5, #0]
 800fe2e:	b103      	cbz	r3, 800fe32 <_write_r+0x1e>
 800fe30:	6023      	str	r3, [r4, #0]
 800fe32:	bd38      	pop	{r3, r4, r5, pc}
 800fe34:	24000aa0 	.word	0x24000aa0

0800fe38 <_close_r>:
 800fe38:	b538      	push	{r3, r4, r5, lr}
 800fe3a:	4d06      	ldr	r5, [pc, #24]	; (800fe54 <_close_r+0x1c>)
 800fe3c:	2300      	movs	r3, #0
 800fe3e:	4604      	mov	r4, r0
 800fe40:	4608      	mov	r0, r1
 800fe42:	602b      	str	r3, [r5, #0]
 800fe44:	f7f3 fec9 	bl	8003bda <_close>
 800fe48:	1c43      	adds	r3, r0, #1
 800fe4a:	d102      	bne.n	800fe52 <_close_r+0x1a>
 800fe4c:	682b      	ldr	r3, [r5, #0]
 800fe4e:	b103      	cbz	r3, 800fe52 <_close_r+0x1a>
 800fe50:	6023      	str	r3, [r4, #0]
 800fe52:	bd38      	pop	{r3, r4, r5, pc}
 800fe54:	24000aa0 	.word	0x24000aa0

0800fe58 <__sflags>:
 800fe58:	780b      	ldrb	r3, [r1, #0]
 800fe5a:	2b72      	cmp	r3, #114	; 0x72
 800fe5c:	b530      	push	{r4, r5, lr}
 800fe5e:	d022      	beq.n	800fea6 <__sflags+0x4e>
 800fe60:	2b77      	cmp	r3, #119	; 0x77
 800fe62:	d024      	beq.n	800feae <__sflags+0x56>
 800fe64:	2b61      	cmp	r3, #97	; 0x61
 800fe66:	d027      	beq.n	800feb8 <__sflags+0x60>
 800fe68:	2316      	movs	r3, #22
 800fe6a:	6003      	str	r3, [r0, #0]
 800fe6c:	2000      	movs	r0, #0
 800fe6e:	bd30      	pop	{r4, r5, pc}
 800fe70:	2d62      	cmp	r5, #98	; 0x62
 800fe72:	d012      	beq.n	800fe9a <__sflags+0x42>
 800fe74:	2d78      	cmp	r5, #120	; 0x78
 800fe76:	d013      	beq.n	800fea0 <__sflags+0x48>
 800fe78:	2d2b      	cmp	r5, #43	; 0x2b
 800fe7a:	d107      	bne.n	800fe8c <__sflags+0x34>
 800fe7c:	f020 001c 	bic.w	r0, r0, #28
 800fe80:	f023 0303 	bic.w	r3, r3, #3
 800fe84:	f040 0010 	orr.w	r0, r0, #16
 800fe88:	f043 0302 	orr.w	r3, r3, #2
 800fe8c:	f811 5f01 	ldrb.w	r5, [r1, #1]!
 800fe90:	2d00      	cmp	r5, #0
 800fe92:	d1ed      	bne.n	800fe70 <__sflags+0x18>
 800fe94:	4323      	orrs	r3, r4
 800fe96:	6013      	str	r3, [r2, #0]
 800fe98:	e7e9      	b.n	800fe6e <__sflags+0x16>
 800fe9a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800fe9e:	e7f5      	b.n	800fe8c <__sflags+0x34>
 800fea0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800fea4:	e7f2      	b.n	800fe8c <__sflags+0x34>
 800fea6:	2400      	movs	r4, #0
 800fea8:	4623      	mov	r3, r4
 800feaa:	2004      	movs	r0, #4
 800feac:	e7ee      	b.n	800fe8c <__sflags+0x34>
 800feae:	f44f 64c0 	mov.w	r4, #1536	; 0x600
 800feb2:	2301      	movs	r3, #1
 800feb4:	2008      	movs	r0, #8
 800feb6:	e7e9      	b.n	800fe8c <__sflags+0x34>
 800feb8:	f44f 7402 	mov.w	r4, #520	; 0x208
 800febc:	2301      	movs	r3, #1
 800febe:	f44f 7084 	mov.w	r0, #264	; 0x108
 800fec2:	e7e3      	b.n	800fe8c <__sflags+0x34>

0800fec4 <_fstat_r>:
 800fec4:	b538      	push	{r3, r4, r5, lr}
 800fec6:	4d07      	ldr	r5, [pc, #28]	; (800fee4 <_fstat_r+0x20>)
 800fec8:	2300      	movs	r3, #0
 800feca:	4604      	mov	r4, r0
 800fecc:	4608      	mov	r0, r1
 800fece:	4611      	mov	r1, r2
 800fed0:	602b      	str	r3, [r5, #0]
 800fed2:	f7f3 fe8e 	bl	8003bf2 <_fstat>
 800fed6:	1c43      	adds	r3, r0, #1
 800fed8:	d102      	bne.n	800fee0 <_fstat_r+0x1c>
 800feda:	682b      	ldr	r3, [r5, #0]
 800fedc:	b103      	cbz	r3, 800fee0 <_fstat_r+0x1c>
 800fede:	6023      	str	r3, [r4, #0]
 800fee0:	bd38      	pop	{r3, r4, r5, pc}
 800fee2:	bf00      	nop
 800fee4:	24000aa0 	.word	0x24000aa0

0800fee8 <rshift>:
 800fee8:	6903      	ldr	r3, [r0, #16]
 800feea:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800feee:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800fef2:	ea4f 1261 	mov.w	r2, r1, asr #5
 800fef6:	f100 0414 	add.w	r4, r0, #20
 800fefa:	dd45      	ble.n	800ff88 <rshift+0xa0>
 800fefc:	f011 011f 	ands.w	r1, r1, #31
 800ff00:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800ff04:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800ff08:	d10c      	bne.n	800ff24 <rshift+0x3c>
 800ff0a:	f100 0710 	add.w	r7, r0, #16
 800ff0e:	4629      	mov	r1, r5
 800ff10:	42b1      	cmp	r1, r6
 800ff12:	d334      	bcc.n	800ff7e <rshift+0x96>
 800ff14:	1a9b      	subs	r3, r3, r2
 800ff16:	009b      	lsls	r3, r3, #2
 800ff18:	1eea      	subs	r2, r5, #3
 800ff1a:	4296      	cmp	r6, r2
 800ff1c:	bf38      	it	cc
 800ff1e:	2300      	movcc	r3, #0
 800ff20:	4423      	add	r3, r4
 800ff22:	e015      	b.n	800ff50 <rshift+0x68>
 800ff24:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800ff28:	f1c1 0820 	rsb	r8, r1, #32
 800ff2c:	40cf      	lsrs	r7, r1
 800ff2e:	f105 0e04 	add.w	lr, r5, #4
 800ff32:	46a1      	mov	r9, r4
 800ff34:	4576      	cmp	r6, lr
 800ff36:	46f4      	mov	ip, lr
 800ff38:	d815      	bhi.n	800ff66 <rshift+0x7e>
 800ff3a:	1a9a      	subs	r2, r3, r2
 800ff3c:	0092      	lsls	r2, r2, #2
 800ff3e:	3a04      	subs	r2, #4
 800ff40:	3501      	adds	r5, #1
 800ff42:	42ae      	cmp	r6, r5
 800ff44:	bf38      	it	cc
 800ff46:	2200      	movcc	r2, #0
 800ff48:	18a3      	adds	r3, r4, r2
 800ff4a:	50a7      	str	r7, [r4, r2]
 800ff4c:	b107      	cbz	r7, 800ff50 <rshift+0x68>
 800ff4e:	3304      	adds	r3, #4
 800ff50:	1b1a      	subs	r2, r3, r4
 800ff52:	42a3      	cmp	r3, r4
 800ff54:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800ff58:	bf08      	it	eq
 800ff5a:	2300      	moveq	r3, #0
 800ff5c:	6102      	str	r2, [r0, #16]
 800ff5e:	bf08      	it	eq
 800ff60:	6143      	streq	r3, [r0, #20]
 800ff62:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ff66:	f8dc c000 	ldr.w	ip, [ip]
 800ff6a:	fa0c fc08 	lsl.w	ip, ip, r8
 800ff6e:	ea4c 0707 	orr.w	r7, ip, r7
 800ff72:	f849 7b04 	str.w	r7, [r9], #4
 800ff76:	f85e 7b04 	ldr.w	r7, [lr], #4
 800ff7a:	40cf      	lsrs	r7, r1
 800ff7c:	e7da      	b.n	800ff34 <rshift+0x4c>
 800ff7e:	f851 cb04 	ldr.w	ip, [r1], #4
 800ff82:	f847 cf04 	str.w	ip, [r7, #4]!
 800ff86:	e7c3      	b.n	800ff10 <rshift+0x28>
 800ff88:	4623      	mov	r3, r4
 800ff8a:	e7e1      	b.n	800ff50 <rshift+0x68>

0800ff8c <__hexdig_fun>:
 800ff8c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800ff90:	2b09      	cmp	r3, #9
 800ff92:	d802      	bhi.n	800ff9a <__hexdig_fun+0xe>
 800ff94:	3820      	subs	r0, #32
 800ff96:	b2c0      	uxtb	r0, r0
 800ff98:	4770      	bx	lr
 800ff9a:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800ff9e:	2b05      	cmp	r3, #5
 800ffa0:	d801      	bhi.n	800ffa6 <__hexdig_fun+0x1a>
 800ffa2:	3847      	subs	r0, #71	; 0x47
 800ffa4:	e7f7      	b.n	800ff96 <__hexdig_fun+0xa>
 800ffa6:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800ffaa:	2b05      	cmp	r3, #5
 800ffac:	d801      	bhi.n	800ffb2 <__hexdig_fun+0x26>
 800ffae:	3827      	subs	r0, #39	; 0x27
 800ffb0:	e7f1      	b.n	800ff96 <__hexdig_fun+0xa>
 800ffb2:	2000      	movs	r0, #0
 800ffb4:	4770      	bx	lr
	...

0800ffb8 <__gethex>:
 800ffb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ffbc:	ed2d 8b02 	vpush	{d8}
 800ffc0:	b089      	sub	sp, #36	; 0x24
 800ffc2:	ee08 0a10 	vmov	s16, r0
 800ffc6:	9304      	str	r3, [sp, #16]
 800ffc8:	4bb4      	ldr	r3, [pc, #720]	; (801029c <__gethex+0x2e4>)
 800ffca:	681b      	ldr	r3, [r3, #0]
 800ffcc:	9301      	str	r3, [sp, #4]
 800ffce:	4618      	mov	r0, r3
 800ffd0:	468b      	mov	fp, r1
 800ffd2:	4690      	mov	r8, r2
 800ffd4:	f7f0 f9d4 	bl	8000380 <strlen>
 800ffd8:	9b01      	ldr	r3, [sp, #4]
 800ffda:	f8db 2000 	ldr.w	r2, [fp]
 800ffde:	4403      	add	r3, r0
 800ffe0:	4682      	mov	sl, r0
 800ffe2:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800ffe6:	9305      	str	r3, [sp, #20]
 800ffe8:	1c93      	adds	r3, r2, #2
 800ffea:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800ffee:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800fff2:	32fe      	adds	r2, #254	; 0xfe
 800fff4:	18d1      	adds	r1, r2, r3
 800fff6:	461f      	mov	r7, r3
 800fff8:	f813 0b01 	ldrb.w	r0, [r3], #1
 800fffc:	9100      	str	r1, [sp, #0]
 800fffe:	2830      	cmp	r0, #48	; 0x30
 8010000:	d0f8      	beq.n	800fff4 <__gethex+0x3c>
 8010002:	f7ff ffc3 	bl	800ff8c <__hexdig_fun>
 8010006:	4604      	mov	r4, r0
 8010008:	2800      	cmp	r0, #0
 801000a:	d13a      	bne.n	8010082 <__gethex+0xca>
 801000c:	9901      	ldr	r1, [sp, #4]
 801000e:	4652      	mov	r2, sl
 8010010:	4638      	mov	r0, r7
 8010012:	f001 f809 	bl	8011028 <strncmp>
 8010016:	4605      	mov	r5, r0
 8010018:	2800      	cmp	r0, #0
 801001a:	d168      	bne.n	80100ee <__gethex+0x136>
 801001c:	f817 000a 	ldrb.w	r0, [r7, sl]
 8010020:	eb07 060a 	add.w	r6, r7, sl
 8010024:	f7ff ffb2 	bl	800ff8c <__hexdig_fun>
 8010028:	2800      	cmp	r0, #0
 801002a:	d062      	beq.n	80100f2 <__gethex+0x13a>
 801002c:	4633      	mov	r3, r6
 801002e:	7818      	ldrb	r0, [r3, #0]
 8010030:	2830      	cmp	r0, #48	; 0x30
 8010032:	461f      	mov	r7, r3
 8010034:	f103 0301 	add.w	r3, r3, #1
 8010038:	d0f9      	beq.n	801002e <__gethex+0x76>
 801003a:	f7ff ffa7 	bl	800ff8c <__hexdig_fun>
 801003e:	2301      	movs	r3, #1
 8010040:	fab0 f480 	clz	r4, r0
 8010044:	0964      	lsrs	r4, r4, #5
 8010046:	4635      	mov	r5, r6
 8010048:	9300      	str	r3, [sp, #0]
 801004a:	463a      	mov	r2, r7
 801004c:	4616      	mov	r6, r2
 801004e:	3201      	adds	r2, #1
 8010050:	7830      	ldrb	r0, [r6, #0]
 8010052:	f7ff ff9b 	bl	800ff8c <__hexdig_fun>
 8010056:	2800      	cmp	r0, #0
 8010058:	d1f8      	bne.n	801004c <__gethex+0x94>
 801005a:	9901      	ldr	r1, [sp, #4]
 801005c:	4652      	mov	r2, sl
 801005e:	4630      	mov	r0, r6
 8010060:	f000 ffe2 	bl	8011028 <strncmp>
 8010064:	b980      	cbnz	r0, 8010088 <__gethex+0xd0>
 8010066:	b94d      	cbnz	r5, 801007c <__gethex+0xc4>
 8010068:	eb06 050a 	add.w	r5, r6, sl
 801006c:	462a      	mov	r2, r5
 801006e:	4616      	mov	r6, r2
 8010070:	3201      	adds	r2, #1
 8010072:	7830      	ldrb	r0, [r6, #0]
 8010074:	f7ff ff8a 	bl	800ff8c <__hexdig_fun>
 8010078:	2800      	cmp	r0, #0
 801007a:	d1f8      	bne.n	801006e <__gethex+0xb6>
 801007c:	1bad      	subs	r5, r5, r6
 801007e:	00ad      	lsls	r5, r5, #2
 8010080:	e004      	b.n	801008c <__gethex+0xd4>
 8010082:	2400      	movs	r4, #0
 8010084:	4625      	mov	r5, r4
 8010086:	e7e0      	b.n	801004a <__gethex+0x92>
 8010088:	2d00      	cmp	r5, #0
 801008a:	d1f7      	bne.n	801007c <__gethex+0xc4>
 801008c:	7833      	ldrb	r3, [r6, #0]
 801008e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8010092:	2b50      	cmp	r3, #80	; 0x50
 8010094:	d13b      	bne.n	801010e <__gethex+0x156>
 8010096:	7873      	ldrb	r3, [r6, #1]
 8010098:	2b2b      	cmp	r3, #43	; 0x2b
 801009a:	d02c      	beq.n	80100f6 <__gethex+0x13e>
 801009c:	2b2d      	cmp	r3, #45	; 0x2d
 801009e:	d02e      	beq.n	80100fe <__gethex+0x146>
 80100a0:	1c71      	adds	r1, r6, #1
 80100a2:	f04f 0900 	mov.w	r9, #0
 80100a6:	7808      	ldrb	r0, [r1, #0]
 80100a8:	f7ff ff70 	bl	800ff8c <__hexdig_fun>
 80100ac:	1e43      	subs	r3, r0, #1
 80100ae:	b2db      	uxtb	r3, r3
 80100b0:	2b18      	cmp	r3, #24
 80100b2:	d82c      	bhi.n	801010e <__gethex+0x156>
 80100b4:	f1a0 0210 	sub.w	r2, r0, #16
 80100b8:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80100bc:	f7ff ff66 	bl	800ff8c <__hexdig_fun>
 80100c0:	1e43      	subs	r3, r0, #1
 80100c2:	b2db      	uxtb	r3, r3
 80100c4:	2b18      	cmp	r3, #24
 80100c6:	d91d      	bls.n	8010104 <__gethex+0x14c>
 80100c8:	f1b9 0f00 	cmp.w	r9, #0
 80100cc:	d000      	beq.n	80100d0 <__gethex+0x118>
 80100ce:	4252      	negs	r2, r2
 80100d0:	4415      	add	r5, r2
 80100d2:	f8cb 1000 	str.w	r1, [fp]
 80100d6:	b1e4      	cbz	r4, 8010112 <__gethex+0x15a>
 80100d8:	9b00      	ldr	r3, [sp, #0]
 80100da:	2b00      	cmp	r3, #0
 80100dc:	bf14      	ite	ne
 80100de:	2700      	movne	r7, #0
 80100e0:	2706      	moveq	r7, #6
 80100e2:	4638      	mov	r0, r7
 80100e4:	b009      	add	sp, #36	; 0x24
 80100e6:	ecbd 8b02 	vpop	{d8}
 80100ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80100ee:	463e      	mov	r6, r7
 80100f0:	4625      	mov	r5, r4
 80100f2:	2401      	movs	r4, #1
 80100f4:	e7ca      	b.n	801008c <__gethex+0xd4>
 80100f6:	f04f 0900 	mov.w	r9, #0
 80100fa:	1cb1      	adds	r1, r6, #2
 80100fc:	e7d3      	b.n	80100a6 <__gethex+0xee>
 80100fe:	f04f 0901 	mov.w	r9, #1
 8010102:	e7fa      	b.n	80100fa <__gethex+0x142>
 8010104:	230a      	movs	r3, #10
 8010106:	fb03 0202 	mla	r2, r3, r2, r0
 801010a:	3a10      	subs	r2, #16
 801010c:	e7d4      	b.n	80100b8 <__gethex+0x100>
 801010e:	4631      	mov	r1, r6
 8010110:	e7df      	b.n	80100d2 <__gethex+0x11a>
 8010112:	1bf3      	subs	r3, r6, r7
 8010114:	3b01      	subs	r3, #1
 8010116:	4621      	mov	r1, r4
 8010118:	2b07      	cmp	r3, #7
 801011a:	dc0b      	bgt.n	8010134 <__gethex+0x17c>
 801011c:	ee18 0a10 	vmov	r0, s16
 8010120:	f000 fa92 	bl	8010648 <_Balloc>
 8010124:	4604      	mov	r4, r0
 8010126:	b940      	cbnz	r0, 801013a <__gethex+0x182>
 8010128:	4b5d      	ldr	r3, [pc, #372]	; (80102a0 <__gethex+0x2e8>)
 801012a:	4602      	mov	r2, r0
 801012c:	21de      	movs	r1, #222	; 0xde
 801012e:	485d      	ldr	r0, [pc, #372]	; (80102a4 <__gethex+0x2ec>)
 8010130:	f000 ff9c 	bl	801106c <__assert_func>
 8010134:	3101      	adds	r1, #1
 8010136:	105b      	asrs	r3, r3, #1
 8010138:	e7ee      	b.n	8010118 <__gethex+0x160>
 801013a:	f100 0914 	add.w	r9, r0, #20
 801013e:	f04f 0b00 	mov.w	fp, #0
 8010142:	f1ca 0301 	rsb	r3, sl, #1
 8010146:	f8cd 9008 	str.w	r9, [sp, #8]
 801014a:	f8cd b000 	str.w	fp, [sp]
 801014e:	9306      	str	r3, [sp, #24]
 8010150:	42b7      	cmp	r7, r6
 8010152:	d340      	bcc.n	80101d6 <__gethex+0x21e>
 8010154:	9802      	ldr	r0, [sp, #8]
 8010156:	9b00      	ldr	r3, [sp, #0]
 8010158:	f840 3b04 	str.w	r3, [r0], #4
 801015c:	eba0 0009 	sub.w	r0, r0, r9
 8010160:	1080      	asrs	r0, r0, #2
 8010162:	0146      	lsls	r6, r0, #5
 8010164:	6120      	str	r0, [r4, #16]
 8010166:	4618      	mov	r0, r3
 8010168:	f000 fb60 	bl	801082c <__hi0bits>
 801016c:	1a30      	subs	r0, r6, r0
 801016e:	f8d8 6000 	ldr.w	r6, [r8]
 8010172:	42b0      	cmp	r0, r6
 8010174:	dd63      	ble.n	801023e <__gethex+0x286>
 8010176:	1b87      	subs	r7, r0, r6
 8010178:	4639      	mov	r1, r7
 801017a:	4620      	mov	r0, r4
 801017c:	f000 ff01 	bl	8010f82 <__any_on>
 8010180:	4682      	mov	sl, r0
 8010182:	b1a8      	cbz	r0, 80101b0 <__gethex+0x1f8>
 8010184:	1e7b      	subs	r3, r7, #1
 8010186:	1159      	asrs	r1, r3, #5
 8010188:	f003 021f 	and.w	r2, r3, #31
 801018c:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8010190:	f04f 0a01 	mov.w	sl, #1
 8010194:	fa0a f202 	lsl.w	r2, sl, r2
 8010198:	420a      	tst	r2, r1
 801019a:	d009      	beq.n	80101b0 <__gethex+0x1f8>
 801019c:	4553      	cmp	r3, sl
 801019e:	dd05      	ble.n	80101ac <__gethex+0x1f4>
 80101a0:	1eb9      	subs	r1, r7, #2
 80101a2:	4620      	mov	r0, r4
 80101a4:	f000 feed 	bl	8010f82 <__any_on>
 80101a8:	2800      	cmp	r0, #0
 80101aa:	d145      	bne.n	8010238 <__gethex+0x280>
 80101ac:	f04f 0a02 	mov.w	sl, #2
 80101b0:	4639      	mov	r1, r7
 80101b2:	4620      	mov	r0, r4
 80101b4:	f7ff fe98 	bl	800fee8 <rshift>
 80101b8:	443d      	add	r5, r7
 80101ba:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80101be:	42ab      	cmp	r3, r5
 80101c0:	da4c      	bge.n	801025c <__gethex+0x2a4>
 80101c2:	ee18 0a10 	vmov	r0, s16
 80101c6:	4621      	mov	r1, r4
 80101c8:	f000 fa7e 	bl	80106c8 <_Bfree>
 80101cc:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80101ce:	2300      	movs	r3, #0
 80101d0:	6013      	str	r3, [r2, #0]
 80101d2:	27a3      	movs	r7, #163	; 0xa3
 80101d4:	e785      	b.n	80100e2 <__gethex+0x12a>
 80101d6:	1e73      	subs	r3, r6, #1
 80101d8:	9a05      	ldr	r2, [sp, #20]
 80101da:	9303      	str	r3, [sp, #12]
 80101dc:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80101e0:	4293      	cmp	r3, r2
 80101e2:	d019      	beq.n	8010218 <__gethex+0x260>
 80101e4:	f1bb 0f20 	cmp.w	fp, #32
 80101e8:	d107      	bne.n	80101fa <__gethex+0x242>
 80101ea:	9b02      	ldr	r3, [sp, #8]
 80101ec:	9a00      	ldr	r2, [sp, #0]
 80101ee:	f843 2b04 	str.w	r2, [r3], #4
 80101f2:	9302      	str	r3, [sp, #8]
 80101f4:	2300      	movs	r3, #0
 80101f6:	9300      	str	r3, [sp, #0]
 80101f8:	469b      	mov	fp, r3
 80101fa:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 80101fe:	f7ff fec5 	bl	800ff8c <__hexdig_fun>
 8010202:	9b00      	ldr	r3, [sp, #0]
 8010204:	f000 000f 	and.w	r0, r0, #15
 8010208:	fa00 f00b 	lsl.w	r0, r0, fp
 801020c:	4303      	orrs	r3, r0
 801020e:	9300      	str	r3, [sp, #0]
 8010210:	f10b 0b04 	add.w	fp, fp, #4
 8010214:	9b03      	ldr	r3, [sp, #12]
 8010216:	e00d      	b.n	8010234 <__gethex+0x27c>
 8010218:	9b03      	ldr	r3, [sp, #12]
 801021a:	9a06      	ldr	r2, [sp, #24]
 801021c:	4413      	add	r3, r2
 801021e:	42bb      	cmp	r3, r7
 8010220:	d3e0      	bcc.n	80101e4 <__gethex+0x22c>
 8010222:	4618      	mov	r0, r3
 8010224:	9901      	ldr	r1, [sp, #4]
 8010226:	9307      	str	r3, [sp, #28]
 8010228:	4652      	mov	r2, sl
 801022a:	f000 fefd 	bl	8011028 <strncmp>
 801022e:	9b07      	ldr	r3, [sp, #28]
 8010230:	2800      	cmp	r0, #0
 8010232:	d1d7      	bne.n	80101e4 <__gethex+0x22c>
 8010234:	461e      	mov	r6, r3
 8010236:	e78b      	b.n	8010150 <__gethex+0x198>
 8010238:	f04f 0a03 	mov.w	sl, #3
 801023c:	e7b8      	b.n	80101b0 <__gethex+0x1f8>
 801023e:	da0a      	bge.n	8010256 <__gethex+0x29e>
 8010240:	1a37      	subs	r7, r6, r0
 8010242:	4621      	mov	r1, r4
 8010244:	ee18 0a10 	vmov	r0, s16
 8010248:	463a      	mov	r2, r7
 801024a:	f000 fc59 	bl	8010b00 <__lshift>
 801024e:	1bed      	subs	r5, r5, r7
 8010250:	4604      	mov	r4, r0
 8010252:	f100 0914 	add.w	r9, r0, #20
 8010256:	f04f 0a00 	mov.w	sl, #0
 801025a:	e7ae      	b.n	80101ba <__gethex+0x202>
 801025c:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8010260:	42a8      	cmp	r0, r5
 8010262:	dd72      	ble.n	801034a <__gethex+0x392>
 8010264:	1b45      	subs	r5, r0, r5
 8010266:	42ae      	cmp	r6, r5
 8010268:	dc36      	bgt.n	80102d8 <__gethex+0x320>
 801026a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801026e:	2b02      	cmp	r3, #2
 8010270:	d02a      	beq.n	80102c8 <__gethex+0x310>
 8010272:	2b03      	cmp	r3, #3
 8010274:	d02c      	beq.n	80102d0 <__gethex+0x318>
 8010276:	2b01      	cmp	r3, #1
 8010278:	d11c      	bne.n	80102b4 <__gethex+0x2fc>
 801027a:	42ae      	cmp	r6, r5
 801027c:	d11a      	bne.n	80102b4 <__gethex+0x2fc>
 801027e:	2e01      	cmp	r6, #1
 8010280:	d112      	bne.n	80102a8 <__gethex+0x2f0>
 8010282:	9a04      	ldr	r2, [sp, #16]
 8010284:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8010288:	6013      	str	r3, [r2, #0]
 801028a:	2301      	movs	r3, #1
 801028c:	6123      	str	r3, [r4, #16]
 801028e:	f8c9 3000 	str.w	r3, [r9]
 8010292:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8010294:	2762      	movs	r7, #98	; 0x62
 8010296:	601c      	str	r4, [r3, #0]
 8010298:	e723      	b.n	80100e2 <__gethex+0x12a>
 801029a:	bf00      	nop
 801029c:	080123b0 	.word	0x080123b0
 80102a0:	08012338 	.word	0x08012338
 80102a4:	08012349 	.word	0x08012349
 80102a8:	1e71      	subs	r1, r6, #1
 80102aa:	4620      	mov	r0, r4
 80102ac:	f000 fe69 	bl	8010f82 <__any_on>
 80102b0:	2800      	cmp	r0, #0
 80102b2:	d1e6      	bne.n	8010282 <__gethex+0x2ca>
 80102b4:	ee18 0a10 	vmov	r0, s16
 80102b8:	4621      	mov	r1, r4
 80102ba:	f000 fa05 	bl	80106c8 <_Bfree>
 80102be:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80102c0:	2300      	movs	r3, #0
 80102c2:	6013      	str	r3, [r2, #0]
 80102c4:	2750      	movs	r7, #80	; 0x50
 80102c6:	e70c      	b.n	80100e2 <__gethex+0x12a>
 80102c8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80102ca:	2b00      	cmp	r3, #0
 80102cc:	d1f2      	bne.n	80102b4 <__gethex+0x2fc>
 80102ce:	e7d8      	b.n	8010282 <__gethex+0x2ca>
 80102d0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80102d2:	2b00      	cmp	r3, #0
 80102d4:	d1d5      	bne.n	8010282 <__gethex+0x2ca>
 80102d6:	e7ed      	b.n	80102b4 <__gethex+0x2fc>
 80102d8:	1e6f      	subs	r7, r5, #1
 80102da:	f1ba 0f00 	cmp.w	sl, #0
 80102de:	d131      	bne.n	8010344 <__gethex+0x38c>
 80102e0:	b127      	cbz	r7, 80102ec <__gethex+0x334>
 80102e2:	4639      	mov	r1, r7
 80102e4:	4620      	mov	r0, r4
 80102e6:	f000 fe4c 	bl	8010f82 <__any_on>
 80102ea:	4682      	mov	sl, r0
 80102ec:	117b      	asrs	r3, r7, #5
 80102ee:	2101      	movs	r1, #1
 80102f0:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 80102f4:	f007 071f 	and.w	r7, r7, #31
 80102f8:	fa01 f707 	lsl.w	r7, r1, r7
 80102fc:	421f      	tst	r7, r3
 80102fe:	4629      	mov	r1, r5
 8010300:	4620      	mov	r0, r4
 8010302:	bf18      	it	ne
 8010304:	f04a 0a02 	orrne.w	sl, sl, #2
 8010308:	1b76      	subs	r6, r6, r5
 801030a:	f7ff fded 	bl	800fee8 <rshift>
 801030e:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8010312:	2702      	movs	r7, #2
 8010314:	f1ba 0f00 	cmp.w	sl, #0
 8010318:	d048      	beq.n	80103ac <__gethex+0x3f4>
 801031a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801031e:	2b02      	cmp	r3, #2
 8010320:	d015      	beq.n	801034e <__gethex+0x396>
 8010322:	2b03      	cmp	r3, #3
 8010324:	d017      	beq.n	8010356 <__gethex+0x39e>
 8010326:	2b01      	cmp	r3, #1
 8010328:	d109      	bne.n	801033e <__gethex+0x386>
 801032a:	f01a 0f02 	tst.w	sl, #2
 801032e:	d006      	beq.n	801033e <__gethex+0x386>
 8010330:	f8d9 0000 	ldr.w	r0, [r9]
 8010334:	ea4a 0a00 	orr.w	sl, sl, r0
 8010338:	f01a 0f01 	tst.w	sl, #1
 801033c:	d10e      	bne.n	801035c <__gethex+0x3a4>
 801033e:	f047 0710 	orr.w	r7, r7, #16
 8010342:	e033      	b.n	80103ac <__gethex+0x3f4>
 8010344:	f04f 0a01 	mov.w	sl, #1
 8010348:	e7d0      	b.n	80102ec <__gethex+0x334>
 801034a:	2701      	movs	r7, #1
 801034c:	e7e2      	b.n	8010314 <__gethex+0x35c>
 801034e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8010350:	f1c3 0301 	rsb	r3, r3, #1
 8010354:	9315      	str	r3, [sp, #84]	; 0x54
 8010356:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8010358:	2b00      	cmp	r3, #0
 801035a:	d0f0      	beq.n	801033e <__gethex+0x386>
 801035c:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8010360:	f104 0314 	add.w	r3, r4, #20
 8010364:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8010368:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 801036c:	f04f 0c00 	mov.w	ip, #0
 8010370:	4618      	mov	r0, r3
 8010372:	f853 2b04 	ldr.w	r2, [r3], #4
 8010376:	f1b2 3fff 	cmp.w	r2, #4294967295
 801037a:	d01c      	beq.n	80103b6 <__gethex+0x3fe>
 801037c:	3201      	adds	r2, #1
 801037e:	6002      	str	r2, [r0, #0]
 8010380:	2f02      	cmp	r7, #2
 8010382:	f104 0314 	add.w	r3, r4, #20
 8010386:	d13f      	bne.n	8010408 <__gethex+0x450>
 8010388:	f8d8 2000 	ldr.w	r2, [r8]
 801038c:	3a01      	subs	r2, #1
 801038e:	42b2      	cmp	r2, r6
 8010390:	d10a      	bne.n	80103a8 <__gethex+0x3f0>
 8010392:	1171      	asrs	r1, r6, #5
 8010394:	2201      	movs	r2, #1
 8010396:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801039a:	f006 061f 	and.w	r6, r6, #31
 801039e:	fa02 f606 	lsl.w	r6, r2, r6
 80103a2:	421e      	tst	r6, r3
 80103a4:	bf18      	it	ne
 80103a6:	4617      	movne	r7, r2
 80103a8:	f047 0720 	orr.w	r7, r7, #32
 80103ac:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80103ae:	601c      	str	r4, [r3, #0]
 80103b0:	9b04      	ldr	r3, [sp, #16]
 80103b2:	601d      	str	r5, [r3, #0]
 80103b4:	e695      	b.n	80100e2 <__gethex+0x12a>
 80103b6:	4299      	cmp	r1, r3
 80103b8:	f843 cc04 	str.w	ip, [r3, #-4]
 80103bc:	d8d8      	bhi.n	8010370 <__gethex+0x3b8>
 80103be:	68a3      	ldr	r3, [r4, #8]
 80103c0:	459b      	cmp	fp, r3
 80103c2:	db19      	blt.n	80103f8 <__gethex+0x440>
 80103c4:	6861      	ldr	r1, [r4, #4]
 80103c6:	ee18 0a10 	vmov	r0, s16
 80103ca:	3101      	adds	r1, #1
 80103cc:	f000 f93c 	bl	8010648 <_Balloc>
 80103d0:	4681      	mov	r9, r0
 80103d2:	b918      	cbnz	r0, 80103dc <__gethex+0x424>
 80103d4:	4b1a      	ldr	r3, [pc, #104]	; (8010440 <__gethex+0x488>)
 80103d6:	4602      	mov	r2, r0
 80103d8:	2184      	movs	r1, #132	; 0x84
 80103da:	e6a8      	b.n	801012e <__gethex+0x176>
 80103dc:	6922      	ldr	r2, [r4, #16]
 80103de:	3202      	adds	r2, #2
 80103e0:	f104 010c 	add.w	r1, r4, #12
 80103e4:	0092      	lsls	r2, r2, #2
 80103e6:	300c      	adds	r0, #12
 80103e8:	f7fe fd48 	bl	800ee7c <memcpy>
 80103ec:	4621      	mov	r1, r4
 80103ee:	ee18 0a10 	vmov	r0, s16
 80103f2:	f000 f969 	bl	80106c8 <_Bfree>
 80103f6:	464c      	mov	r4, r9
 80103f8:	6923      	ldr	r3, [r4, #16]
 80103fa:	1c5a      	adds	r2, r3, #1
 80103fc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8010400:	6122      	str	r2, [r4, #16]
 8010402:	2201      	movs	r2, #1
 8010404:	615a      	str	r2, [r3, #20]
 8010406:	e7bb      	b.n	8010380 <__gethex+0x3c8>
 8010408:	6922      	ldr	r2, [r4, #16]
 801040a:	455a      	cmp	r2, fp
 801040c:	dd0b      	ble.n	8010426 <__gethex+0x46e>
 801040e:	2101      	movs	r1, #1
 8010410:	4620      	mov	r0, r4
 8010412:	f7ff fd69 	bl	800fee8 <rshift>
 8010416:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801041a:	3501      	adds	r5, #1
 801041c:	42ab      	cmp	r3, r5
 801041e:	f6ff aed0 	blt.w	80101c2 <__gethex+0x20a>
 8010422:	2701      	movs	r7, #1
 8010424:	e7c0      	b.n	80103a8 <__gethex+0x3f0>
 8010426:	f016 061f 	ands.w	r6, r6, #31
 801042a:	d0fa      	beq.n	8010422 <__gethex+0x46a>
 801042c:	4453      	add	r3, sl
 801042e:	f1c6 0620 	rsb	r6, r6, #32
 8010432:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8010436:	f000 f9f9 	bl	801082c <__hi0bits>
 801043a:	42b0      	cmp	r0, r6
 801043c:	dbe7      	blt.n	801040e <__gethex+0x456>
 801043e:	e7f0      	b.n	8010422 <__gethex+0x46a>
 8010440:	08012338 	.word	0x08012338

08010444 <L_shift>:
 8010444:	f1c2 0208 	rsb	r2, r2, #8
 8010448:	0092      	lsls	r2, r2, #2
 801044a:	b570      	push	{r4, r5, r6, lr}
 801044c:	f1c2 0620 	rsb	r6, r2, #32
 8010450:	6843      	ldr	r3, [r0, #4]
 8010452:	6804      	ldr	r4, [r0, #0]
 8010454:	fa03 f506 	lsl.w	r5, r3, r6
 8010458:	432c      	orrs	r4, r5
 801045a:	40d3      	lsrs	r3, r2
 801045c:	6004      	str	r4, [r0, #0]
 801045e:	f840 3f04 	str.w	r3, [r0, #4]!
 8010462:	4288      	cmp	r0, r1
 8010464:	d3f4      	bcc.n	8010450 <L_shift+0xc>
 8010466:	bd70      	pop	{r4, r5, r6, pc}

08010468 <__match>:
 8010468:	b530      	push	{r4, r5, lr}
 801046a:	6803      	ldr	r3, [r0, #0]
 801046c:	3301      	adds	r3, #1
 801046e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010472:	b914      	cbnz	r4, 801047a <__match+0x12>
 8010474:	6003      	str	r3, [r0, #0]
 8010476:	2001      	movs	r0, #1
 8010478:	bd30      	pop	{r4, r5, pc}
 801047a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801047e:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8010482:	2d19      	cmp	r5, #25
 8010484:	bf98      	it	ls
 8010486:	3220      	addls	r2, #32
 8010488:	42a2      	cmp	r2, r4
 801048a:	d0f0      	beq.n	801046e <__match+0x6>
 801048c:	2000      	movs	r0, #0
 801048e:	e7f3      	b.n	8010478 <__match+0x10>

08010490 <__hexnan>:
 8010490:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010494:	680b      	ldr	r3, [r1, #0]
 8010496:	115e      	asrs	r6, r3, #5
 8010498:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 801049c:	f013 031f 	ands.w	r3, r3, #31
 80104a0:	b087      	sub	sp, #28
 80104a2:	bf18      	it	ne
 80104a4:	3604      	addne	r6, #4
 80104a6:	2500      	movs	r5, #0
 80104a8:	1f37      	subs	r7, r6, #4
 80104aa:	4690      	mov	r8, r2
 80104ac:	6802      	ldr	r2, [r0, #0]
 80104ae:	9301      	str	r3, [sp, #4]
 80104b0:	4682      	mov	sl, r0
 80104b2:	f846 5c04 	str.w	r5, [r6, #-4]
 80104b6:	46b9      	mov	r9, r7
 80104b8:	463c      	mov	r4, r7
 80104ba:	9502      	str	r5, [sp, #8]
 80104bc:	46ab      	mov	fp, r5
 80104be:	7851      	ldrb	r1, [r2, #1]
 80104c0:	1c53      	adds	r3, r2, #1
 80104c2:	9303      	str	r3, [sp, #12]
 80104c4:	b341      	cbz	r1, 8010518 <__hexnan+0x88>
 80104c6:	4608      	mov	r0, r1
 80104c8:	9205      	str	r2, [sp, #20]
 80104ca:	9104      	str	r1, [sp, #16]
 80104cc:	f7ff fd5e 	bl	800ff8c <__hexdig_fun>
 80104d0:	2800      	cmp	r0, #0
 80104d2:	d14f      	bne.n	8010574 <__hexnan+0xe4>
 80104d4:	9904      	ldr	r1, [sp, #16]
 80104d6:	9a05      	ldr	r2, [sp, #20]
 80104d8:	2920      	cmp	r1, #32
 80104da:	d818      	bhi.n	801050e <__hexnan+0x7e>
 80104dc:	9b02      	ldr	r3, [sp, #8]
 80104de:	459b      	cmp	fp, r3
 80104e0:	dd13      	ble.n	801050a <__hexnan+0x7a>
 80104e2:	454c      	cmp	r4, r9
 80104e4:	d206      	bcs.n	80104f4 <__hexnan+0x64>
 80104e6:	2d07      	cmp	r5, #7
 80104e8:	dc04      	bgt.n	80104f4 <__hexnan+0x64>
 80104ea:	462a      	mov	r2, r5
 80104ec:	4649      	mov	r1, r9
 80104ee:	4620      	mov	r0, r4
 80104f0:	f7ff ffa8 	bl	8010444 <L_shift>
 80104f4:	4544      	cmp	r4, r8
 80104f6:	d950      	bls.n	801059a <__hexnan+0x10a>
 80104f8:	2300      	movs	r3, #0
 80104fa:	f1a4 0904 	sub.w	r9, r4, #4
 80104fe:	f844 3c04 	str.w	r3, [r4, #-4]
 8010502:	f8cd b008 	str.w	fp, [sp, #8]
 8010506:	464c      	mov	r4, r9
 8010508:	461d      	mov	r5, r3
 801050a:	9a03      	ldr	r2, [sp, #12]
 801050c:	e7d7      	b.n	80104be <__hexnan+0x2e>
 801050e:	2929      	cmp	r1, #41	; 0x29
 8010510:	d156      	bne.n	80105c0 <__hexnan+0x130>
 8010512:	3202      	adds	r2, #2
 8010514:	f8ca 2000 	str.w	r2, [sl]
 8010518:	f1bb 0f00 	cmp.w	fp, #0
 801051c:	d050      	beq.n	80105c0 <__hexnan+0x130>
 801051e:	454c      	cmp	r4, r9
 8010520:	d206      	bcs.n	8010530 <__hexnan+0xa0>
 8010522:	2d07      	cmp	r5, #7
 8010524:	dc04      	bgt.n	8010530 <__hexnan+0xa0>
 8010526:	462a      	mov	r2, r5
 8010528:	4649      	mov	r1, r9
 801052a:	4620      	mov	r0, r4
 801052c:	f7ff ff8a 	bl	8010444 <L_shift>
 8010530:	4544      	cmp	r4, r8
 8010532:	d934      	bls.n	801059e <__hexnan+0x10e>
 8010534:	f1a8 0204 	sub.w	r2, r8, #4
 8010538:	4623      	mov	r3, r4
 801053a:	f853 1b04 	ldr.w	r1, [r3], #4
 801053e:	f842 1f04 	str.w	r1, [r2, #4]!
 8010542:	429f      	cmp	r7, r3
 8010544:	d2f9      	bcs.n	801053a <__hexnan+0xaa>
 8010546:	1b3b      	subs	r3, r7, r4
 8010548:	f023 0303 	bic.w	r3, r3, #3
 801054c:	3304      	adds	r3, #4
 801054e:	3401      	adds	r4, #1
 8010550:	3e03      	subs	r6, #3
 8010552:	42b4      	cmp	r4, r6
 8010554:	bf88      	it	hi
 8010556:	2304      	movhi	r3, #4
 8010558:	4443      	add	r3, r8
 801055a:	2200      	movs	r2, #0
 801055c:	f843 2b04 	str.w	r2, [r3], #4
 8010560:	429f      	cmp	r7, r3
 8010562:	d2fb      	bcs.n	801055c <__hexnan+0xcc>
 8010564:	683b      	ldr	r3, [r7, #0]
 8010566:	b91b      	cbnz	r3, 8010570 <__hexnan+0xe0>
 8010568:	4547      	cmp	r7, r8
 801056a:	d127      	bne.n	80105bc <__hexnan+0x12c>
 801056c:	2301      	movs	r3, #1
 801056e:	603b      	str	r3, [r7, #0]
 8010570:	2005      	movs	r0, #5
 8010572:	e026      	b.n	80105c2 <__hexnan+0x132>
 8010574:	3501      	adds	r5, #1
 8010576:	2d08      	cmp	r5, #8
 8010578:	f10b 0b01 	add.w	fp, fp, #1
 801057c:	dd06      	ble.n	801058c <__hexnan+0xfc>
 801057e:	4544      	cmp	r4, r8
 8010580:	d9c3      	bls.n	801050a <__hexnan+0x7a>
 8010582:	2300      	movs	r3, #0
 8010584:	f844 3c04 	str.w	r3, [r4, #-4]
 8010588:	2501      	movs	r5, #1
 801058a:	3c04      	subs	r4, #4
 801058c:	6822      	ldr	r2, [r4, #0]
 801058e:	f000 000f 	and.w	r0, r0, #15
 8010592:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8010596:	6022      	str	r2, [r4, #0]
 8010598:	e7b7      	b.n	801050a <__hexnan+0x7a>
 801059a:	2508      	movs	r5, #8
 801059c:	e7b5      	b.n	801050a <__hexnan+0x7a>
 801059e:	9b01      	ldr	r3, [sp, #4]
 80105a0:	2b00      	cmp	r3, #0
 80105a2:	d0df      	beq.n	8010564 <__hexnan+0xd4>
 80105a4:	f04f 32ff 	mov.w	r2, #4294967295
 80105a8:	f1c3 0320 	rsb	r3, r3, #32
 80105ac:	fa22 f303 	lsr.w	r3, r2, r3
 80105b0:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80105b4:	401a      	ands	r2, r3
 80105b6:	f846 2c04 	str.w	r2, [r6, #-4]
 80105ba:	e7d3      	b.n	8010564 <__hexnan+0xd4>
 80105bc:	3f04      	subs	r7, #4
 80105be:	e7d1      	b.n	8010564 <__hexnan+0xd4>
 80105c0:	2004      	movs	r0, #4
 80105c2:	b007      	add	sp, #28
 80105c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080105c8 <_isatty_r>:
 80105c8:	b538      	push	{r3, r4, r5, lr}
 80105ca:	4d06      	ldr	r5, [pc, #24]	; (80105e4 <_isatty_r+0x1c>)
 80105cc:	2300      	movs	r3, #0
 80105ce:	4604      	mov	r4, r0
 80105d0:	4608      	mov	r0, r1
 80105d2:	602b      	str	r3, [r5, #0]
 80105d4:	f7f3 fb1d 	bl	8003c12 <_isatty>
 80105d8:	1c43      	adds	r3, r0, #1
 80105da:	d102      	bne.n	80105e2 <_isatty_r+0x1a>
 80105dc:	682b      	ldr	r3, [r5, #0]
 80105de:	b103      	cbz	r3, 80105e2 <_isatty_r+0x1a>
 80105e0:	6023      	str	r3, [r4, #0]
 80105e2:	bd38      	pop	{r3, r4, r5, pc}
 80105e4:	24000aa0 	.word	0x24000aa0

080105e8 <_lseek_r>:
 80105e8:	b538      	push	{r3, r4, r5, lr}
 80105ea:	4d07      	ldr	r5, [pc, #28]	; (8010608 <_lseek_r+0x20>)
 80105ec:	4604      	mov	r4, r0
 80105ee:	4608      	mov	r0, r1
 80105f0:	4611      	mov	r1, r2
 80105f2:	2200      	movs	r2, #0
 80105f4:	602a      	str	r2, [r5, #0]
 80105f6:	461a      	mov	r2, r3
 80105f8:	f7f3 fb16 	bl	8003c28 <_lseek>
 80105fc:	1c43      	adds	r3, r0, #1
 80105fe:	d102      	bne.n	8010606 <_lseek_r+0x1e>
 8010600:	682b      	ldr	r3, [r5, #0]
 8010602:	b103      	cbz	r3, 8010606 <_lseek_r+0x1e>
 8010604:	6023      	str	r3, [r4, #0]
 8010606:	bd38      	pop	{r3, r4, r5, pc}
 8010608:	24000aa0 	.word	0x24000aa0

0801060c <__ascii_mbtowc>:
 801060c:	b082      	sub	sp, #8
 801060e:	b901      	cbnz	r1, 8010612 <__ascii_mbtowc+0x6>
 8010610:	a901      	add	r1, sp, #4
 8010612:	b142      	cbz	r2, 8010626 <__ascii_mbtowc+0x1a>
 8010614:	b14b      	cbz	r3, 801062a <__ascii_mbtowc+0x1e>
 8010616:	7813      	ldrb	r3, [r2, #0]
 8010618:	600b      	str	r3, [r1, #0]
 801061a:	7812      	ldrb	r2, [r2, #0]
 801061c:	1e10      	subs	r0, r2, #0
 801061e:	bf18      	it	ne
 8010620:	2001      	movne	r0, #1
 8010622:	b002      	add	sp, #8
 8010624:	4770      	bx	lr
 8010626:	4610      	mov	r0, r2
 8010628:	e7fb      	b.n	8010622 <__ascii_mbtowc+0x16>
 801062a:	f06f 0001 	mvn.w	r0, #1
 801062e:	e7f8      	b.n	8010622 <__ascii_mbtowc+0x16>

08010630 <__malloc_lock>:
 8010630:	4801      	ldr	r0, [pc, #4]	; (8010638 <__malloc_lock+0x8>)
 8010632:	f7fe bbbb 	b.w	800edac <__retarget_lock_acquire_recursive>
 8010636:	bf00      	nop
 8010638:	24000a94 	.word	0x24000a94

0801063c <__malloc_unlock>:
 801063c:	4801      	ldr	r0, [pc, #4]	; (8010644 <__malloc_unlock+0x8>)
 801063e:	f7fe bbb6 	b.w	800edae <__retarget_lock_release_recursive>
 8010642:	bf00      	nop
 8010644:	24000a94 	.word	0x24000a94

08010648 <_Balloc>:
 8010648:	b570      	push	{r4, r5, r6, lr}
 801064a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 801064c:	4604      	mov	r4, r0
 801064e:	460d      	mov	r5, r1
 8010650:	b976      	cbnz	r6, 8010670 <_Balloc+0x28>
 8010652:	2010      	movs	r0, #16
 8010654:	f000 fd3a 	bl	80110cc <malloc>
 8010658:	4602      	mov	r2, r0
 801065a:	6260      	str	r0, [r4, #36]	; 0x24
 801065c:	b920      	cbnz	r0, 8010668 <_Balloc+0x20>
 801065e:	4b18      	ldr	r3, [pc, #96]	; (80106c0 <_Balloc+0x78>)
 8010660:	4818      	ldr	r0, [pc, #96]	; (80106c4 <_Balloc+0x7c>)
 8010662:	2166      	movs	r1, #102	; 0x66
 8010664:	f000 fd02 	bl	801106c <__assert_func>
 8010668:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801066c:	6006      	str	r6, [r0, #0]
 801066e:	60c6      	str	r6, [r0, #12]
 8010670:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8010672:	68f3      	ldr	r3, [r6, #12]
 8010674:	b183      	cbz	r3, 8010698 <_Balloc+0x50>
 8010676:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010678:	68db      	ldr	r3, [r3, #12]
 801067a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801067e:	b9b8      	cbnz	r0, 80106b0 <_Balloc+0x68>
 8010680:	2101      	movs	r1, #1
 8010682:	fa01 f605 	lsl.w	r6, r1, r5
 8010686:	1d72      	adds	r2, r6, #5
 8010688:	0092      	lsls	r2, r2, #2
 801068a:	4620      	mov	r0, r4
 801068c:	f000 fc9a 	bl	8010fc4 <_calloc_r>
 8010690:	b160      	cbz	r0, 80106ac <_Balloc+0x64>
 8010692:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8010696:	e00e      	b.n	80106b6 <_Balloc+0x6e>
 8010698:	2221      	movs	r2, #33	; 0x21
 801069a:	2104      	movs	r1, #4
 801069c:	4620      	mov	r0, r4
 801069e:	f000 fc91 	bl	8010fc4 <_calloc_r>
 80106a2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80106a4:	60f0      	str	r0, [r6, #12]
 80106a6:	68db      	ldr	r3, [r3, #12]
 80106a8:	2b00      	cmp	r3, #0
 80106aa:	d1e4      	bne.n	8010676 <_Balloc+0x2e>
 80106ac:	2000      	movs	r0, #0
 80106ae:	bd70      	pop	{r4, r5, r6, pc}
 80106b0:	6802      	ldr	r2, [r0, #0]
 80106b2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80106b6:	2300      	movs	r3, #0
 80106b8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80106bc:	e7f7      	b.n	80106ae <_Balloc+0x66>
 80106be:	bf00      	nop
 80106c0:	080123c4 	.word	0x080123c4
 80106c4:	080123db 	.word	0x080123db

080106c8 <_Bfree>:
 80106c8:	b570      	push	{r4, r5, r6, lr}
 80106ca:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80106cc:	4605      	mov	r5, r0
 80106ce:	460c      	mov	r4, r1
 80106d0:	b976      	cbnz	r6, 80106f0 <_Bfree+0x28>
 80106d2:	2010      	movs	r0, #16
 80106d4:	f000 fcfa 	bl	80110cc <malloc>
 80106d8:	4602      	mov	r2, r0
 80106da:	6268      	str	r0, [r5, #36]	; 0x24
 80106dc:	b920      	cbnz	r0, 80106e8 <_Bfree+0x20>
 80106de:	4b09      	ldr	r3, [pc, #36]	; (8010704 <_Bfree+0x3c>)
 80106e0:	4809      	ldr	r0, [pc, #36]	; (8010708 <_Bfree+0x40>)
 80106e2:	218a      	movs	r1, #138	; 0x8a
 80106e4:	f000 fcc2 	bl	801106c <__assert_func>
 80106e8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80106ec:	6006      	str	r6, [r0, #0]
 80106ee:	60c6      	str	r6, [r0, #12]
 80106f0:	b13c      	cbz	r4, 8010702 <_Bfree+0x3a>
 80106f2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80106f4:	6862      	ldr	r2, [r4, #4]
 80106f6:	68db      	ldr	r3, [r3, #12]
 80106f8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80106fc:	6021      	str	r1, [r4, #0]
 80106fe:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8010702:	bd70      	pop	{r4, r5, r6, pc}
 8010704:	080123c4 	.word	0x080123c4
 8010708:	080123db 	.word	0x080123db

0801070c <__multadd>:
 801070c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010710:	690d      	ldr	r5, [r1, #16]
 8010712:	4607      	mov	r7, r0
 8010714:	460c      	mov	r4, r1
 8010716:	461e      	mov	r6, r3
 8010718:	f101 0c14 	add.w	ip, r1, #20
 801071c:	2000      	movs	r0, #0
 801071e:	f8dc 3000 	ldr.w	r3, [ip]
 8010722:	b299      	uxth	r1, r3
 8010724:	fb02 6101 	mla	r1, r2, r1, r6
 8010728:	0c1e      	lsrs	r6, r3, #16
 801072a:	0c0b      	lsrs	r3, r1, #16
 801072c:	fb02 3306 	mla	r3, r2, r6, r3
 8010730:	b289      	uxth	r1, r1
 8010732:	3001      	adds	r0, #1
 8010734:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8010738:	4285      	cmp	r5, r0
 801073a:	f84c 1b04 	str.w	r1, [ip], #4
 801073e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8010742:	dcec      	bgt.n	801071e <__multadd+0x12>
 8010744:	b30e      	cbz	r6, 801078a <__multadd+0x7e>
 8010746:	68a3      	ldr	r3, [r4, #8]
 8010748:	42ab      	cmp	r3, r5
 801074a:	dc19      	bgt.n	8010780 <__multadd+0x74>
 801074c:	6861      	ldr	r1, [r4, #4]
 801074e:	4638      	mov	r0, r7
 8010750:	3101      	adds	r1, #1
 8010752:	f7ff ff79 	bl	8010648 <_Balloc>
 8010756:	4680      	mov	r8, r0
 8010758:	b928      	cbnz	r0, 8010766 <__multadd+0x5a>
 801075a:	4602      	mov	r2, r0
 801075c:	4b0c      	ldr	r3, [pc, #48]	; (8010790 <__multadd+0x84>)
 801075e:	480d      	ldr	r0, [pc, #52]	; (8010794 <__multadd+0x88>)
 8010760:	21b5      	movs	r1, #181	; 0xb5
 8010762:	f000 fc83 	bl	801106c <__assert_func>
 8010766:	6922      	ldr	r2, [r4, #16]
 8010768:	3202      	adds	r2, #2
 801076a:	f104 010c 	add.w	r1, r4, #12
 801076e:	0092      	lsls	r2, r2, #2
 8010770:	300c      	adds	r0, #12
 8010772:	f7fe fb83 	bl	800ee7c <memcpy>
 8010776:	4621      	mov	r1, r4
 8010778:	4638      	mov	r0, r7
 801077a:	f7ff ffa5 	bl	80106c8 <_Bfree>
 801077e:	4644      	mov	r4, r8
 8010780:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8010784:	3501      	adds	r5, #1
 8010786:	615e      	str	r6, [r3, #20]
 8010788:	6125      	str	r5, [r4, #16]
 801078a:	4620      	mov	r0, r4
 801078c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010790:	08012338 	.word	0x08012338
 8010794:	080123db 	.word	0x080123db

08010798 <__s2b>:
 8010798:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801079c:	460c      	mov	r4, r1
 801079e:	4615      	mov	r5, r2
 80107a0:	461f      	mov	r7, r3
 80107a2:	2209      	movs	r2, #9
 80107a4:	3308      	adds	r3, #8
 80107a6:	4606      	mov	r6, r0
 80107a8:	fb93 f3f2 	sdiv	r3, r3, r2
 80107ac:	2100      	movs	r1, #0
 80107ae:	2201      	movs	r2, #1
 80107b0:	429a      	cmp	r2, r3
 80107b2:	db09      	blt.n	80107c8 <__s2b+0x30>
 80107b4:	4630      	mov	r0, r6
 80107b6:	f7ff ff47 	bl	8010648 <_Balloc>
 80107ba:	b940      	cbnz	r0, 80107ce <__s2b+0x36>
 80107bc:	4602      	mov	r2, r0
 80107be:	4b19      	ldr	r3, [pc, #100]	; (8010824 <__s2b+0x8c>)
 80107c0:	4819      	ldr	r0, [pc, #100]	; (8010828 <__s2b+0x90>)
 80107c2:	21ce      	movs	r1, #206	; 0xce
 80107c4:	f000 fc52 	bl	801106c <__assert_func>
 80107c8:	0052      	lsls	r2, r2, #1
 80107ca:	3101      	adds	r1, #1
 80107cc:	e7f0      	b.n	80107b0 <__s2b+0x18>
 80107ce:	9b08      	ldr	r3, [sp, #32]
 80107d0:	6143      	str	r3, [r0, #20]
 80107d2:	2d09      	cmp	r5, #9
 80107d4:	f04f 0301 	mov.w	r3, #1
 80107d8:	6103      	str	r3, [r0, #16]
 80107da:	dd16      	ble.n	801080a <__s2b+0x72>
 80107dc:	f104 0909 	add.w	r9, r4, #9
 80107e0:	46c8      	mov	r8, r9
 80107e2:	442c      	add	r4, r5
 80107e4:	f818 3b01 	ldrb.w	r3, [r8], #1
 80107e8:	4601      	mov	r1, r0
 80107ea:	3b30      	subs	r3, #48	; 0x30
 80107ec:	220a      	movs	r2, #10
 80107ee:	4630      	mov	r0, r6
 80107f0:	f7ff ff8c 	bl	801070c <__multadd>
 80107f4:	45a0      	cmp	r8, r4
 80107f6:	d1f5      	bne.n	80107e4 <__s2b+0x4c>
 80107f8:	f1a5 0408 	sub.w	r4, r5, #8
 80107fc:	444c      	add	r4, r9
 80107fe:	1b2d      	subs	r5, r5, r4
 8010800:	1963      	adds	r3, r4, r5
 8010802:	42bb      	cmp	r3, r7
 8010804:	db04      	blt.n	8010810 <__s2b+0x78>
 8010806:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801080a:	340a      	adds	r4, #10
 801080c:	2509      	movs	r5, #9
 801080e:	e7f6      	b.n	80107fe <__s2b+0x66>
 8010810:	f814 3b01 	ldrb.w	r3, [r4], #1
 8010814:	4601      	mov	r1, r0
 8010816:	3b30      	subs	r3, #48	; 0x30
 8010818:	220a      	movs	r2, #10
 801081a:	4630      	mov	r0, r6
 801081c:	f7ff ff76 	bl	801070c <__multadd>
 8010820:	e7ee      	b.n	8010800 <__s2b+0x68>
 8010822:	bf00      	nop
 8010824:	08012338 	.word	0x08012338
 8010828:	080123db 	.word	0x080123db

0801082c <__hi0bits>:
 801082c:	0c03      	lsrs	r3, r0, #16
 801082e:	041b      	lsls	r3, r3, #16
 8010830:	b9d3      	cbnz	r3, 8010868 <__hi0bits+0x3c>
 8010832:	0400      	lsls	r0, r0, #16
 8010834:	2310      	movs	r3, #16
 8010836:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 801083a:	bf04      	itt	eq
 801083c:	0200      	lsleq	r0, r0, #8
 801083e:	3308      	addeq	r3, #8
 8010840:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8010844:	bf04      	itt	eq
 8010846:	0100      	lsleq	r0, r0, #4
 8010848:	3304      	addeq	r3, #4
 801084a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 801084e:	bf04      	itt	eq
 8010850:	0080      	lsleq	r0, r0, #2
 8010852:	3302      	addeq	r3, #2
 8010854:	2800      	cmp	r0, #0
 8010856:	db05      	blt.n	8010864 <__hi0bits+0x38>
 8010858:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 801085c:	f103 0301 	add.w	r3, r3, #1
 8010860:	bf08      	it	eq
 8010862:	2320      	moveq	r3, #32
 8010864:	4618      	mov	r0, r3
 8010866:	4770      	bx	lr
 8010868:	2300      	movs	r3, #0
 801086a:	e7e4      	b.n	8010836 <__hi0bits+0xa>

0801086c <__lo0bits>:
 801086c:	6803      	ldr	r3, [r0, #0]
 801086e:	f013 0207 	ands.w	r2, r3, #7
 8010872:	4601      	mov	r1, r0
 8010874:	d00b      	beq.n	801088e <__lo0bits+0x22>
 8010876:	07da      	lsls	r2, r3, #31
 8010878:	d423      	bmi.n	80108c2 <__lo0bits+0x56>
 801087a:	0798      	lsls	r0, r3, #30
 801087c:	bf49      	itett	mi
 801087e:	085b      	lsrmi	r3, r3, #1
 8010880:	089b      	lsrpl	r3, r3, #2
 8010882:	2001      	movmi	r0, #1
 8010884:	600b      	strmi	r3, [r1, #0]
 8010886:	bf5c      	itt	pl
 8010888:	600b      	strpl	r3, [r1, #0]
 801088a:	2002      	movpl	r0, #2
 801088c:	4770      	bx	lr
 801088e:	b298      	uxth	r0, r3
 8010890:	b9a8      	cbnz	r0, 80108be <__lo0bits+0x52>
 8010892:	0c1b      	lsrs	r3, r3, #16
 8010894:	2010      	movs	r0, #16
 8010896:	b2da      	uxtb	r2, r3
 8010898:	b90a      	cbnz	r2, 801089e <__lo0bits+0x32>
 801089a:	3008      	adds	r0, #8
 801089c:	0a1b      	lsrs	r3, r3, #8
 801089e:	071a      	lsls	r2, r3, #28
 80108a0:	bf04      	itt	eq
 80108a2:	091b      	lsreq	r3, r3, #4
 80108a4:	3004      	addeq	r0, #4
 80108a6:	079a      	lsls	r2, r3, #30
 80108a8:	bf04      	itt	eq
 80108aa:	089b      	lsreq	r3, r3, #2
 80108ac:	3002      	addeq	r0, #2
 80108ae:	07da      	lsls	r2, r3, #31
 80108b0:	d403      	bmi.n	80108ba <__lo0bits+0x4e>
 80108b2:	085b      	lsrs	r3, r3, #1
 80108b4:	f100 0001 	add.w	r0, r0, #1
 80108b8:	d005      	beq.n	80108c6 <__lo0bits+0x5a>
 80108ba:	600b      	str	r3, [r1, #0]
 80108bc:	4770      	bx	lr
 80108be:	4610      	mov	r0, r2
 80108c0:	e7e9      	b.n	8010896 <__lo0bits+0x2a>
 80108c2:	2000      	movs	r0, #0
 80108c4:	4770      	bx	lr
 80108c6:	2020      	movs	r0, #32
 80108c8:	4770      	bx	lr
	...

080108cc <__i2b>:
 80108cc:	b510      	push	{r4, lr}
 80108ce:	460c      	mov	r4, r1
 80108d0:	2101      	movs	r1, #1
 80108d2:	f7ff feb9 	bl	8010648 <_Balloc>
 80108d6:	4602      	mov	r2, r0
 80108d8:	b928      	cbnz	r0, 80108e6 <__i2b+0x1a>
 80108da:	4b05      	ldr	r3, [pc, #20]	; (80108f0 <__i2b+0x24>)
 80108dc:	4805      	ldr	r0, [pc, #20]	; (80108f4 <__i2b+0x28>)
 80108de:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80108e2:	f000 fbc3 	bl	801106c <__assert_func>
 80108e6:	2301      	movs	r3, #1
 80108e8:	6144      	str	r4, [r0, #20]
 80108ea:	6103      	str	r3, [r0, #16]
 80108ec:	bd10      	pop	{r4, pc}
 80108ee:	bf00      	nop
 80108f0:	08012338 	.word	0x08012338
 80108f4:	080123db 	.word	0x080123db

080108f8 <__multiply>:
 80108f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80108fc:	4691      	mov	r9, r2
 80108fe:	690a      	ldr	r2, [r1, #16]
 8010900:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8010904:	429a      	cmp	r2, r3
 8010906:	bfb8      	it	lt
 8010908:	460b      	movlt	r3, r1
 801090a:	460c      	mov	r4, r1
 801090c:	bfbc      	itt	lt
 801090e:	464c      	movlt	r4, r9
 8010910:	4699      	movlt	r9, r3
 8010912:	6927      	ldr	r7, [r4, #16]
 8010914:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8010918:	68a3      	ldr	r3, [r4, #8]
 801091a:	6861      	ldr	r1, [r4, #4]
 801091c:	eb07 060a 	add.w	r6, r7, sl
 8010920:	42b3      	cmp	r3, r6
 8010922:	b085      	sub	sp, #20
 8010924:	bfb8      	it	lt
 8010926:	3101      	addlt	r1, #1
 8010928:	f7ff fe8e 	bl	8010648 <_Balloc>
 801092c:	b930      	cbnz	r0, 801093c <__multiply+0x44>
 801092e:	4602      	mov	r2, r0
 8010930:	4b44      	ldr	r3, [pc, #272]	; (8010a44 <__multiply+0x14c>)
 8010932:	4845      	ldr	r0, [pc, #276]	; (8010a48 <__multiply+0x150>)
 8010934:	f240 115d 	movw	r1, #349	; 0x15d
 8010938:	f000 fb98 	bl	801106c <__assert_func>
 801093c:	f100 0514 	add.w	r5, r0, #20
 8010940:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8010944:	462b      	mov	r3, r5
 8010946:	2200      	movs	r2, #0
 8010948:	4543      	cmp	r3, r8
 801094a:	d321      	bcc.n	8010990 <__multiply+0x98>
 801094c:	f104 0314 	add.w	r3, r4, #20
 8010950:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8010954:	f109 0314 	add.w	r3, r9, #20
 8010958:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 801095c:	9202      	str	r2, [sp, #8]
 801095e:	1b3a      	subs	r2, r7, r4
 8010960:	3a15      	subs	r2, #21
 8010962:	f022 0203 	bic.w	r2, r2, #3
 8010966:	3204      	adds	r2, #4
 8010968:	f104 0115 	add.w	r1, r4, #21
 801096c:	428f      	cmp	r7, r1
 801096e:	bf38      	it	cc
 8010970:	2204      	movcc	r2, #4
 8010972:	9201      	str	r2, [sp, #4]
 8010974:	9a02      	ldr	r2, [sp, #8]
 8010976:	9303      	str	r3, [sp, #12]
 8010978:	429a      	cmp	r2, r3
 801097a:	d80c      	bhi.n	8010996 <__multiply+0x9e>
 801097c:	2e00      	cmp	r6, #0
 801097e:	dd03      	ble.n	8010988 <__multiply+0x90>
 8010980:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8010984:	2b00      	cmp	r3, #0
 8010986:	d05a      	beq.n	8010a3e <__multiply+0x146>
 8010988:	6106      	str	r6, [r0, #16]
 801098a:	b005      	add	sp, #20
 801098c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010990:	f843 2b04 	str.w	r2, [r3], #4
 8010994:	e7d8      	b.n	8010948 <__multiply+0x50>
 8010996:	f8b3 a000 	ldrh.w	sl, [r3]
 801099a:	f1ba 0f00 	cmp.w	sl, #0
 801099e:	d024      	beq.n	80109ea <__multiply+0xf2>
 80109a0:	f104 0e14 	add.w	lr, r4, #20
 80109a4:	46a9      	mov	r9, r5
 80109a6:	f04f 0c00 	mov.w	ip, #0
 80109aa:	f85e 2b04 	ldr.w	r2, [lr], #4
 80109ae:	f8d9 1000 	ldr.w	r1, [r9]
 80109b2:	fa1f fb82 	uxth.w	fp, r2
 80109b6:	b289      	uxth	r1, r1
 80109b8:	fb0a 110b 	mla	r1, sl, fp, r1
 80109bc:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80109c0:	f8d9 2000 	ldr.w	r2, [r9]
 80109c4:	4461      	add	r1, ip
 80109c6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80109ca:	fb0a c20b 	mla	r2, sl, fp, ip
 80109ce:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80109d2:	b289      	uxth	r1, r1
 80109d4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80109d8:	4577      	cmp	r7, lr
 80109da:	f849 1b04 	str.w	r1, [r9], #4
 80109de:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80109e2:	d8e2      	bhi.n	80109aa <__multiply+0xb2>
 80109e4:	9a01      	ldr	r2, [sp, #4]
 80109e6:	f845 c002 	str.w	ip, [r5, r2]
 80109ea:	9a03      	ldr	r2, [sp, #12]
 80109ec:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80109f0:	3304      	adds	r3, #4
 80109f2:	f1b9 0f00 	cmp.w	r9, #0
 80109f6:	d020      	beq.n	8010a3a <__multiply+0x142>
 80109f8:	6829      	ldr	r1, [r5, #0]
 80109fa:	f104 0c14 	add.w	ip, r4, #20
 80109fe:	46ae      	mov	lr, r5
 8010a00:	f04f 0a00 	mov.w	sl, #0
 8010a04:	f8bc b000 	ldrh.w	fp, [ip]
 8010a08:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8010a0c:	fb09 220b 	mla	r2, r9, fp, r2
 8010a10:	4492      	add	sl, r2
 8010a12:	b289      	uxth	r1, r1
 8010a14:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8010a18:	f84e 1b04 	str.w	r1, [lr], #4
 8010a1c:	f85c 2b04 	ldr.w	r2, [ip], #4
 8010a20:	f8be 1000 	ldrh.w	r1, [lr]
 8010a24:	0c12      	lsrs	r2, r2, #16
 8010a26:	fb09 1102 	mla	r1, r9, r2, r1
 8010a2a:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8010a2e:	4567      	cmp	r7, ip
 8010a30:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8010a34:	d8e6      	bhi.n	8010a04 <__multiply+0x10c>
 8010a36:	9a01      	ldr	r2, [sp, #4]
 8010a38:	50a9      	str	r1, [r5, r2]
 8010a3a:	3504      	adds	r5, #4
 8010a3c:	e79a      	b.n	8010974 <__multiply+0x7c>
 8010a3e:	3e01      	subs	r6, #1
 8010a40:	e79c      	b.n	801097c <__multiply+0x84>
 8010a42:	bf00      	nop
 8010a44:	08012338 	.word	0x08012338
 8010a48:	080123db 	.word	0x080123db

08010a4c <__pow5mult>:
 8010a4c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010a50:	4615      	mov	r5, r2
 8010a52:	f012 0203 	ands.w	r2, r2, #3
 8010a56:	4606      	mov	r6, r0
 8010a58:	460f      	mov	r7, r1
 8010a5a:	d007      	beq.n	8010a6c <__pow5mult+0x20>
 8010a5c:	4c25      	ldr	r4, [pc, #148]	; (8010af4 <__pow5mult+0xa8>)
 8010a5e:	3a01      	subs	r2, #1
 8010a60:	2300      	movs	r3, #0
 8010a62:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8010a66:	f7ff fe51 	bl	801070c <__multadd>
 8010a6a:	4607      	mov	r7, r0
 8010a6c:	10ad      	asrs	r5, r5, #2
 8010a6e:	d03d      	beq.n	8010aec <__pow5mult+0xa0>
 8010a70:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8010a72:	b97c      	cbnz	r4, 8010a94 <__pow5mult+0x48>
 8010a74:	2010      	movs	r0, #16
 8010a76:	f000 fb29 	bl	80110cc <malloc>
 8010a7a:	4602      	mov	r2, r0
 8010a7c:	6270      	str	r0, [r6, #36]	; 0x24
 8010a7e:	b928      	cbnz	r0, 8010a8c <__pow5mult+0x40>
 8010a80:	4b1d      	ldr	r3, [pc, #116]	; (8010af8 <__pow5mult+0xac>)
 8010a82:	481e      	ldr	r0, [pc, #120]	; (8010afc <__pow5mult+0xb0>)
 8010a84:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8010a88:	f000 faf0 	bl	801106c <__assert_func>
 8010a8c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8010a90:	6004      	str	r4, [r0, #0]
 8010a92:	60c4      	str	r4, [r0, #12]
 8010a94:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8010a98:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8010a9c:	b94c      	cbnz	r4, 8010ab2 <__pow5mult+0x66>
 8010a9e:	f240 2171 	movw	r1, #625	; 0x271
 8010aa2:	4630      	mov	r0, r6
 8010aa4:	f7ff ff12 	bl	80108cc <__i2b>
 8010aa8:	2300      	movs	r3, #0
 8010aaa:	f8c8 0008 	str.w	r0, [r8, #8]
 8010aae:	4604      	mov	r4, r0
 8010ab0:	6003      	str	r3, [r0, #0]
 8010ab2:	f04f 0900 	mov.w	r9, #0
 8010ab6:	07eb      	lsls	r3, r5, #31
 8010ab8:	d50a      	bpl.n	8010ad0 <__pow5mult+0x84>
 8010aba:	4639      	mov	r1, r7
 8010abc:	4622      	mov	r2, r4
 8010abe:	4630      	mov	r0, r6
 8010ac0:	f7ff ff1a 	bl	80108f8 <__multiply>
 8010ac4:	4639      	mov	r1, r7
 8010ac6:	4680      	mov	r8, r0
 8010ac8:	4630      	mov	r0, r6
 8010aca:	f7ff fdfd 	bl	80106c8 <_Bfree>
 8010ace:	4647      	mov	r7, r8
 8010ad0:	106d      	asrs	r5, r5, #1
 8010ad2:	d00b      	beq.n	8010aec <__pow5mult+0xa0>
 8010ad4:	6820      	ldr	r0, [r4, #0]
 8010ad6:	b938      	cbnz	r0, 8010ae8 <__pow5mult+0x9c>
 8010ad8:	4622      	mov	r2, r4
 8010ada:	4621      	mov	r1, r4
 8010adc:	4630      	mov	r0, r6
 8010ade:	f7ff ff0b 	bl	80108f8 <__multiply>
 8010ae2:	6020      	str	r0, [r4, #0]
 8010ae4:	f8c0 9000 	str.w	r9, [r0]
 8010ae8:	4604      	mov	r4, r0
 8010aea:	e7e4      	b.n	8010ab6 <__pow5mult+0x6a>
 8010aec:	4638      	mov	r0, r7
 8010aee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010af2:	bf00      	nop
 8010af4:	08012528 	.word	0x08012528
 8010af8:	080123c4 	.word	0x080123c4
 8010afc:	080123db 	.word	0x080123db

08010b00 <__lshift>:
 8010b00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010b04:	460c      	mov	r4, r1
 8010b06:	6849      	ldr	r1, [r1, #4]
 8010b08:	6923      	ldr	r3, [r4, #16]
 8010b0a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8010b0e:	68a3      	ldr	r3, [r4, #8]
 8010b10:	4607      	mov	r7, r0
 8010b12:	4691      	mov	r9, r2
 8010b14:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8010b18:	f108 0601 	add.w	r6, r8, #1
 8010b1c:	42b3      	cmp	r3, r6
 8010b1e:	db0b      	blt.n	8010b38 <__lshift+0x38>
 8010b20:	4638      	mov	r0, r7
 8010b22:	f7ff fd91 	bl	8010648 <_Balloc>
 8010b26:	4605      	mov	r5, r0
 8010b28:	b948      	cbnz	r0, 8010b3e <__lshift+0x3e>
 8010b2a:	4602      	mov	r2, r0
 8010b2c:	4b2a      	ldr	r3, [pc, #168]	; (8010bd8 <__lshift+0xd8>)
 8010b2e:	482b      	ldr	r0, [pc, #172]	; (8010bdc <__lshift+0xdc>)
 8010b30:	f240 11d9 	movw	r1, #473	; 0x1d9
 8010b34:	f000 fa9a 	bl	801106c <__assert_func>
 8010b38:	3101      	adds	r1, #1
 8010b3a:	005b      	lsls	r3, r3, #1
 8010b3c:	e7ee      	b.n	8010b1c <__lshift+0x1c>
 8010b3e:	2300      	movs	r3, #0
 8010b40:	f100 0114 	add.w	r1, r0, #20
 8010b44:	f100 0210 	add.w	r2, r0, #16
 8010b48:	4618      	mov	r0, r3
 8010b4a:	4553      	cmp	r3, sl
 8010b4c:	db37      	blt.n	8010bbe <__lshift+0xbe>
 8010b4e:	6920      	ldr	r0, [r4, #16]
 8010b50:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8010b54:	f104 0314 	add.w	r3, r4, #20
 8010b58:	f019 091f 	ands.w	r9, r9, #31
 8010b5c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8010b60:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8010b64:	d02f      	beq.n	8010bc6 <__lshift+0xc6>
 8010b66:	f1c9 0e20 	rsb	lr, r9, #32
 8010b6a:	468a      	mov	sl, r1
 8010b6c:	f04f 0c00 	mov.w	ip, #0
 8010b70:	681a      	ldr	r2, [r3, #0]
 8010b72:	fa02 f209 	lsl.w	r2, r2, r9
 8010b76:	ea42 020c 	orr.w	r2, r2, ip
 8010b7a:	f84a 2b04 	str.w	r2, [sl], #4
 8010b7e:	f853 2b04 	ldr.w	r2, [r3], #4
 8010b82:	4298      	cmp	r0, r3
 8010b84:	fa22 fc0e 	lsr.w	ip, r2, lr
 8010b88:	d8f2      	bhi.n	8010b70 <__lshift+0x70>
 8010b8a:	1b03      	subs	r3, r0, r4
 8010b8c:	3b15      	subs	r3, #21
 8010b8e:	f023 0303 	bic.w	r3, r3, #3
 8010b92:	3304      	adds	r3, #4
 8010b94:	f104 0215 	add.w	r2, r4, #21
 8010b98:	4290      	cmp	r0, r2
 8010b9a:	bf38      	it	cc
 8010b9c:	2304      	movcc	r3, #4
 8010b9e:	f841 c003 	str.w	ip, [r1, r3]
 8010ba2:	f1bc 0f00 	cmp.w	ip, #0
 8010ba6:	d001      	beq.n	8010bac <__lshift+0xac>
 8010ba8:	f108 0602 	add.w	r6, r8, #2
 8010bac:	3e01      	subs	r6, #1
 8010bae:	4638      	mov	r0, r7
 8010bb0:	612e      	str	r6, [r5, #16]
 8010bb2:	4621      	mov	r1, r4
 8010bb4:	f7ff fd88 	bl	80106c8 <_Bfree>
 8010bb8:	4628      	mov	r0, r5
 8010bba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010bbe:	f842 0f04 	str.w	r0, [r2, #4]!
 8010bc2:	3301      	adds	r3, #1
 8010bc4:	e7c1      	b.n	8010b4a <__lshift+0x4a>
 8010bc6:	3904      	subs	r1, #4
 8010bc8:	f853 2b04 	ldr.w	r2, [r3], #4
 8010bcc:	f841 2f04 	str.w	r2, [r1, #4]!
 8010bd0:	4298      	cmp	r0, r3
 8010bd2:	d8f9      	bhi.n	8010bc8 <__lshift+0xc8>
 8010bd4:	e7ea      	b.n	8010bac <__lshift+0xac>
 8010bd6:	bf00      	nop
 8010bd8:	08012338 	.word	0x08012338
 8010bdc:	080123db 	.word	0x080123db

08010be0 <__mcmp>:
 8010be0:	b530      	push	{r4, r5, lr}
 8010be2:	6902      	ldr	r2, [r0, #16]
 8010be4:	690c      	ldr	r4, [r1, #16]
 8010be6:	1b12      	subs	r2, r2, r4
 8010be8:	d10e      	bne.n	8010c08 <__mcmp+0x28>
 8010bea:	f100 0314 	add.w	r3, r0, #20
 8010bee:	3114      	adds	r1, #20
 8010bf0:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8010bf4:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8010bf8:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8010bfc:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8010c00:	42a5      	cmp	r5, r4
 8010c02:	d003      	beq.n	8010c0c <__mcmp+0x2c>
 8010c04:	d305      	bcc.n	8010c12 <__mcmp+0x32>
 8010c06:	2201      	movs	r2, #1
 8010c08:	4610      	mov	r0, r2
 8010c0a:	bd30      	pop	{r4, r5, pc}
 8010c0c:	4283      	cmp	r3, r0
 8010c0e:	d3f3      	bcc.n	8010bf8 <__mcmp+0x18>
 8010c10:	e7fa      	b.n	8010c08 <__mcmp+0x28>
 8010c12:	f04f 32ff 	mov.w	r2, #4294967295
 8010c16:	e7f7      	b.n	8010c08 <__mcmp+0x28>

08010c18 <__mdiff>:
 8010c18:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010c1c:	460c      	mov	r4, r1
 8010c1e:	4606      	mov	r6, r0
 8010c20:	4611      	mov	r1, r2
 8010c22:	4620      	mov	r0, r4
 8010c24:	4690      	mov	r8, r2
 8010c26:	f7ff ffdb 	bl	8010be0 <__mcmp>
 8010c2a:	1e05      	subs	r5, r0, #0
 8010c2c:	d110      	bne.n	8010c50 <__mdiff+0x38>
 8010c2e:	4629      	mov	r1, r5
 8010c30:	4630      	mov	r0, r6
 8010c32:	f7ff fd09 	bl	8010648 <_Balloc>
 8010c36:	b930      	cbnz	r0, 8010c46 <__mdiff+0x2e>
 8010c38:	4b3a      	ldr	r3, [pc, #232]	; (8010d24 <__mdiff+0x10c>)
 8010c3a:	4602      	mov	r2, r0
 8010c3c:	f240 2132 	movw	r1, #562	; 0x232
 8010c40:	4839      	ldr	r0, [pc, #228]	; (8010d28 <__mdiff+0x110>)
 8010c42:	f000 fa13 	bl	801106c <__assert_func>
 8010c46:	2301      	movs	r3, #1
 8010c48:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8010c4c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010c50:	bfa4      	itt	ge
 8010c52:	4643      	movge	r3, r8
 8010c54:	46a0      	movge	r8, r4
 8010c56:	4630      	mov	r0, r6
 8010c58:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8010c5c:	bfa6      	itte	ge
 8010c5e:	461c      	movge	r4, r3
 8010c60:	2500      	movge	r5, #0
 8010c62:	2501      	movlt	r5, #1
 8010c64:	f7ff fcf0 	bl	8010648 <_Balloc>
 8010c68:	b920      	cbnz	r0, 8010c74 <__mdiff+0x5c>
 8010c6a:	4b2e      	ldr	r3, [pc, #184]	; (8010d24 <__mdiff+0x10c>)
 8010c6c:	4602      	mov	r2, r0
 8010c6e:	f44f 7110 	mov.w	r1, #576	; 0x240
 8010c72:	e7e5      	b.n	8010c40 <__mdiff+0x28>
 8010c74:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8010c78:	6926      	ldr	r6, [r4, #16]
 8010c7a:	60c5      	str	r5, [r0, #12]
 8010c7c:	f104 0914 	add.w	r9, r4, #20
 8010c80:	f108 0514 	add.w	r5, r8, #20
 8010c84:	f100 0e14 	add.w	lr, r0, #20
 8010c88:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8010c8c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8010c90:	f108 0210 	add.w	r2, r8, #16
 8010c94:	46f2      	mov	sl, lr
 8010c96:	2100      	movs	r1, #0
 8010c98:	f859 3b04 	ldr.w	r3, [r9], #4
 8010c9c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8010ca0:	fa1f f883 	uxth.w	r8, r3
 8010ca4:	fa11 f18b 	uxtah	r1, r1, fp
 8010ca8:	0c1b      	lsrs	r3, r3, #16
 8010caa:	eba1 0808 	sub.w	r8, r1, r8
 8010cae:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8010cb2:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8010cb6:	fa1f f888 	uxth.w	r8, r8
 8010cba:	1419      	asrs	r1, r3, #16
 8010cbc:	454e      	cmp	r6, r9
 8010cbe:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8010cc2:	f84a 3b04 	str.w	r3, [sl], #4
 8010cc6:	d8e7      	bhi.n	8010c98 <__mdiff+0x80>
 8010cc8:	1b33      	subs	r3, r6, r4
 8010cca:	3b15      	subs	r3, #21
 8010ccc:	f023 0303 	bic.w	r3, r3, #3
 8010cd0:	3304      	adds	r3, #4
 8010cd2:	3415      	adds	r4, #21
 8010cd4:	42a6      	cmp	r6, r4
 8010cd6:	bf38      	it	cc
 8010cd8:	2304      	movcc	r3, #4
 8010cda:	441d      	add	r5, r3
 8010cdc:	4473      	add	r3, lr
 8010cde:	469e      	mov	lr, r3
 8010ce0:	462e      	mov	r6, r5
 8010ce2:	4566      	cmp	r6, ip
 8010ce4:	d30e      	bcc.n	8010d04 <__mdiff+0xec>
 8010ce6:	f10c 0203 	add.w	r2, ip, #3
 8010cea:	1b52      	subs	r2, r2, r5
 8010cec:	f022 0203 	bic.w	r2, r2, #3
 8010cf0:	3d03      	subs	r5, #3
 8010cf2:	45ac      	cmp	ip, r5
 8010cf4:	bf38      	it	cc
 8010cf6:	2200      	movcc	r2, #0
 8010cf8:	441a      	add	r2, r3
 8010cfa:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8010cfe:	b17b      	cbz	r3, 8010d20 <__mdiff+0x108>
 8010d00:	6107      	str	r7, [r0, #16]
 8010d02:	e7a3      	b.n	8010c4c <__mdiff+0x34>
 8010d04:	f856 8b04 	ldr.w	r8, [r6], #4
 8010d08:	fa11 f288 	uxtah	r2, r1, r8
 8010d0c:	1414      	asrs	r4, r2, #16
 8010d0e:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8010d12:	b292      	uxth	r2, r2
 8010d14:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8010d18:	f84e 2b04 	str.w	r2, [lr], #4
 8010d1c:	1421      	asrs	r1, r4, #16
 8010d1e:	e7e0      	b.n	8010ce2 <__mdiff+0xca>
 8010d20:	3f01      	subs	r7, #1
 8010d22:	e7ea      	b.n	8010cfa <__mdiff+0xe2>
 8010d24:	08012338 	.word	0x08012338
 8010d28:	080123db 	.word	0x080123db

08010d2c <__ulp>:
 8010d2c:	b082      	sub	sp, #8
 8010d2e:	ed8d 0b00 	vstr	d0, [sp]
 8010d32:	9b01      	ldr	r3, [sp, #4]
 8010d34:	4912      	ldr	r1, [pc, #72]	; (8010d80 <__ulp+0x54>)
 8010d36:	4019      	ands	r1, r3
 8010d38:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 8010d3c:	2900      	cmp	r1, #0
 8010d3e:	dd05      	ble.n	8010d4c <__ulp+0x20>
 8010d40:	2200      	movs	r2, #0
 8010d42:	460b      	mov	r3, r1
 8010d44:	ec43 2b10 	vmov	d0, r2, r3
 8010d48:	b002      	add	sp, #8
 8010d4a:	4770      	bx	lr
 8010d4c:	4249      	negs	r1, r1
 8010d4e:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 8010d52:	ea4f 5021 	mov.w	r0, r1, asr #20
 8010d56:	f04f 0200 	mov.w	r2, #0
 8010d5a:	f04f 0300 	mov.w	r3, #0
 8010d5e:	da04      	bge.n	8010d6a <__ulp+0x3e>
 8010d60:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8010d64:	fa41 f300 	asr.w	r3, r1, r0
 8010d68:	e7ec      	b.n	8010d44 <__ulp+0x18>
 8010d6a:	f1a0 0114 	sub.w	r1, r0, #20
 8010d6e:	291e      	cmp	r1, #30
 8010d70:	bfda      	itte	le
 8010d72:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 8010d76:	fa20 f101 	lsrle.w	r1, r0, r1
 8010d7a:	2101      	movgt	r1, #1
 8010d7c:	460a      	mov	r2, r1
 8010d7e:	e7e1      	b.n	8010d44 <__ulp+0x18>
 8010d80:	7ff00000 	.word	0x7ff00000

08010d84 <__b2d>:
 8010d84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010d86:	6905      	ldr	r5, [r0, #16]
 8010d88:	f100 0714 	add.w	r7, r0, #20
 8010d8c:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8010d90:	1f2e      	subs	r6, r5, #4
 8010d92:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8010d96:	4620      	mov	r0, r4
 8010d98:	f7ff fd48 	bl	801082c <__hi0bits>
 8010d9c:	f1c0 0320 	rsb	r3, r0, #32
 8010da0:	280a      	cmp	r0, #10
 8010da2:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8010e20 <__b2d+0x9c>
 8010da6:	600b      	str	r3, [r1, #0]
 8010da8:	dc14      	bgt.n	8010dd4 <__b2d+0x50>
 8010daa:	f1c0 0e0b 	rsb	lr, r0, #11
 8010dae:	fa24 f10e 	lsr.w	r1, r4, lr
 8010db2:	42b7      	cmp	r7, r6
 8010db4:	ea41 030c 	orr.w	r3, r1, ip
 8010db8:	bf34      	ite	cc
 8010dba:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8010dbe:	2100      	movcs	r1, #0
 8010dc0:	3015      	adds	r0, #21
 8010dc2:	fa04 f000 	lsl.w	r0, r4, r0
 8010dc6:	fa21 f10e 	lsr.w	r1, r1, lr
 8010dca:	ea40 0201 	orr.w	r2, r0, r1
 8010dce:	ec43 2b10 	vmov	d0, r2, r3
 8010dd2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010dd4:	42b7      	cmp	r7, r6
 8010dd6:	bf3a      	itte	cc
 8010dd8:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8010ddc:	f1a5 0608 	subcc.w	r6, r5, #8
 8010de0:	2100      	movcs	r1, #0
 8010de2:	380b      	subs	r0, #11
 8010de4:	d017      	beq.n	8010e16 <__b2d+0x92>
 8010de6:	f1c0 0c20 	rsb	ip, r0, #32
 8010dea:	fa04 f500 	lsl.w	r5, r4, r0
 8010dee:	42be      	cmp	r6, r7
 8010df0:	fa21 f40c 	lsr.w	r4, r1, ip
 8010df4:	ea45 0504 	orr.w	r5, r5, r4
 8010df8:	bf8c      	ite	hi
 8010dfa:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8010dfe:	2400      	movls	r4, #0
 8010e00:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 8010e04:	fa01 f000 	lsl.w	r0, r1, r0
 8010e08:	fa24 f40c 	lsr.w	r4, r4, ip
 8010e0c:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8010e10:	ea40 0204 	orr.w	r2, r0, r4
 8010e14:	e7db      	b.n	8010dce <__b2d+0x4a>
 8010e16:	ea44 030c 	orr.w	r3, r4, ip
 8010e1a:	460a      	mov	r2, r1
 8010e1c:	e7d7      	b.n	8010dce <__b2d+0x4a>
 8010e1e:	bf00      	nop
 8010e20:	3ff00000 	.word	0x3ff00000

08010e24 <__d2b>:
 8010e24:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8010e28:	4689      	mov	r9, r1
 8010e2a:	2101      	movs	r1, #1
 8010e2c:	ec57 6b10 	vmov	r6, r7, d0
 8010e30:	4690      	mov	r8, r2
 8010e32:	f7ff fc09 	bl	8010648 <_Balloc>
 8010e36:	4604      	mov	r4, r0
 8010e38:	b930      	cbnz	r0, 8010e48 <__d2b+0x24>
 8010e3a:	4602      	mov	r2, r0
 8010e3c:	4b25      	ldr	r3, [pc, #148]	; (8010ed4 <__d2b+0xb0>)
 8010e3e:	4826      	ldr	r0, [pc, #152]	; (8010ed8 <__d2b+0xb4>)
 8010e40:	f240 310a 	movw	r1, #778	; 0x30a
 8010e44:	f000 f912 	bl	801106c <__assert_func>
 8010e48:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8010e4c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8010e50:	bb35      	cbnz	r5, 8010ea0 <__d2b+0x7c>
 8010e52:	2e00      	cmp	r6, #0
 8010e54:	9301      	str	r3, [sp, #4]
 8010e56:	d028      	beq.n	8010eaa <__d2b+0x86>
 8010e58:	4668      	mov	r0, sp
 8010e5a:	9600      	str	r6, [sp, #0]
 8010e5c:	f7ff fd06 	bl	801086c <__lo0bits>
 8010e60:	9900      	ldr	r1, [sp, #0]
 8010e62:	b300      	cbz	r0, 8010ea6 <__d2b+0x82>
 8010e64:	9a01      	ldr	r2, [sp, #4]
 8010e66:	f1c0 0320 	rsb	r3, r0, #32
 8010e6a:	fa02 f303 	lsl.w	r3, r2, r3
 8010e6e:	430b      	orrs	r3, r1
 8010e70:	40c2      	lsrs	r2, r0
 8010e72:	6163      	str	r3, [r4, #20]
 8010e74:	9201      	str	r2, [sp, #4]
 8010e76:	9b01      	ldr	r3, [sp, #4]
 8010e78:	61a3      	str	r3, [r4, #24]
 8010e7a:	2b00      	cmp	r3, #0
 8010e7c:	bf14      	ite	ne
 8010e7e:	2202      	movne	r2, #2
 8010e80:	2201      	moveq	r2, #1
 8010e82:	6122      	str	r2, [r4, #16]
 8010e84:	b1d5      	cbz	r5, 8010ebc <__d2b+0x98>
 8010e86:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8010e8a:	4405      	add	r5, r0
 8010e8c:	f8c9 5000 	str.w	r5, [r9]
 8010e90:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8010e94:	f8c8 0000 	str.w	r0, [r8]
 8010e98:	4620      	mov	r0, r4
 8010e9a:	b003      	add	sp, #12
 8010e9c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010ea0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8010ea4:	e7d5      	b.n	8010e52 <__d2b+0x2e>
 8010ea6:	6161      	str	r1, [r4, #20]
 8010ea8:	e7e5      	b.n	8010e76 <__d2b+0x52>
 8010eaa:	a801      	add	r0, sp, #4
 8010eac:	f7ff fcde 	bl	801086c <__lo0bits>
 8010eb0:	9b01      	ldr	r3, [sp, #4]
 8010eb2:	6163      	str	r3, [r4, #20]
 8010eb4:	2201      	movs	r2, #1
 8010eb6:	6122      	str	r2, [r4, #16]
 8010eb8:	3020      	adds	r0, #32
 8010eba:	e7e3      	b.n	8010e84 <__d2b+0x60>
 8010ebc:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8010ec0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8010ec4:	f8c9 0000 	str.w	r0, [r9]
 8010ec8:	6918      	ldr	r0, [r3, #16]
 8010eca:	f7ff fcaf 	bl	801082c <__hi0bits>
 8010ece:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8010ed2:	e7df      	b.n	8010e94 <__d2b+0x70>
 8010ed4:	08012338 	.word	0x08012338
 8010ed8:	080123db 	.word	0x080123db

08010edc <__ratio>:
 8010edc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010ee0:	4688      	mov	r8, r1
 8010ee2:	4669      	mov	r1, sp
 8010ee4:	4681      	mov	r9, r0
 8010ee6:	f7ff ff4d 	bl	8010d84 <__b2d>
 8010eea:	a901      	add	r1, sp, #4
 8010eec:	4640      	mov	r0, r8
 8010eee:	ec55 4b10 	vmov	r4, r5, d0
 8010ef2:	ee10 aa10 	vmov	sl, s0
 8010ef6:	f7ff ff45 	bl	8010d84 <__b2d>
 8010efa:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8010efe:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8010f02:	1a59      	subs	r1, r3, r1
 8010f04:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010f08:	1ad3      	subs	r3, r2, r3
 8010f0a:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8010f0e:	ec57 6b10 	vmov	r6, r7, d0
 8010f12:	2b00      	cmp	r3, #0
 8010f14:	bfd6      	itet	le
 8010f16:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8010f1a:	462a      	movgt	r2, r5
 8010f1c:	463a      	movle	r2, r7
 8010f1e:	46ab      	mov	fp, r5
 8010f20:	bfd6      	itet	le
 8010f22:	eb02 5303 	addle.w	r3, r2, r3, lsl #20
 8010f26:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 8010f2a:	ee00 3a90 	vmovle	s1, r3
 8010f2e:	ec4b ab17 	vmov	d7, sl, fp
 8010f32:	ee87 0b00 	vdiv.f64	d0, d7, d0
 8010f36:	b003      	add	sp, #12
 8010f38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08010f3c <__copybits>:
 8010f3c:	3901      	subs	r1, #1
 8010f3e:	b570      	push	{r4, r5, r6, lr}
 8010f40:	1149      	asrs	r1, r1, #5
 8010f42:	6914      	ldr	r4, [r2, #16]
 8010f44:	3101      	adds	r1, #1
 8010f46:	f102 0314 	add.w	r3, r2, #20
 8010f4a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8010f4e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8010f52:	1f05      	subs	r5, r0, #4
 8010f54:	42a3      	cmp	r3, r4
 8010f56:	d30c      	bcc.n	8010f72 <__copybits+0x36>
 8010f58:	1aa3      	subs	r3, r4, r2
 8010f5a:	3b11      	subs	r3, #17
 8010f5c:	f023 0303 	bic.w	r3, r3, #3
 8010f60:	3211      	adds	r2, #17
 8010f62:	42a2      	cmp	r2, r4
 8010f64:	bf88      	it	hi
 8010f66:	2300      	movhi	r3, #0
 8010f68:	4418      	add	r0, r3
 8010f6a:	2300      	movs	r3, #0
 8010f6c:	4288      	cmp	r0, r1
 8010f6e:	d305      	bcc.n	8010f7c <__copybits+0x40>
 8010f70:	bd70      	pop	{r4, r5, r6, pc}
 8010f72:	f853 6b04 	ldr.w	r6, [r3], #4
 8010f76:	f845 6f04 	str.w	r6, [r5, #4]!
 8010f7a:	e7eb      	b.n	8010f54 <__copybits+0x18>
 8010f7c:	f840 3b04 	str.w	r3, [r0], #4
 8010f80:	e7f4      	b.n	8010f6c <__copybits+0x30>

08010f82 <__any_on>:
 8010f82:	f100 0214 	add.w	r2, r0, #20
 8010f86:	6900      	ldr	r0, [r0, #16]
 8010f88:	114b      	asrs	r3, r1, #5
 8010f8a:	4298      	cmp	r0, r3
 8010f8c:	b510      	push	{r4, lr}
 8010f8e:	db11      	blt.n	8010fb4 <__any_on+0x32>
 8010f90:	dd0a      	ble.n	8010fa8 <__any_on+0x26>
 8010f92:	f011 011f 	ands.w	r1, r1, #31
 8010f96:	d007      	beq.n	8010fa8 <__any_on+0x26>
 8010f98:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8010f9c:	fa24 f001 	lsr.w	r0, r4, r1
 8010fa0:	fa00 f101 	lsl.w	r1, r0, r1
 8010fa4:	428c      	cmp	r4, r1
 8010fa6:	d10b      	bne.n	8010fc0 <__any_on+0x3e>
 8010fa8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8010fac:	4293      	cmp	r3, r2
 8010fae:	d803      	bhi.n	8010fb8 <__any_on+0x36>
 8010fb0:	2000      	movs	r0, #0
 8010fb2:	bd10      	pop	{r4, pc}
 8010fb4:	4603      	mov	r3, r0
 8010fb6:	e7f7      	b.n	8010fa8 <__any_on+0x26>
 8010fb8:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8010fbc:	2900      	cmp	r1, #0
 8010fbe:	d0f5      	beq.n	8010fac <__any_on+0x2a>
 8010fc0:	2001      	movs	r0, #1
 8010fc2:	e7f6      	b.n	8010fb2 <__any_on+0x30>

08010fc4 <_calloc_r>:
 8010fc4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8010fc6:	fba1 2402 	umull	r2, r4, r1, r2
 8010fca:	b94c      	cbnz	r4, 8010fe0 <_calloc_r+0x1c>
 8010fcc:	4611      	mov	r1, r2
 8010fce:	9201      	str	r2, [sp, #4]
 8010fd0:	f7fd ffd6 	bl	800ef80 <_malloc_r>
 8010fd4:	9a01      	ldr	r2, [sp, #4]
 8010fd6:	4605      	mov	r5, r0
 8010fd8:	b930      	cbnz	r0, 8010fe8 <_calloc_r+0x24>
 8010fda:	4628      	mov	r0, r5
 8010fdc:	b003      	add	sp, #12
 8010fde:	bd30      	pop	{r4, r5, pc}
 8010fe0:	220c      	movs	r2, #12
 8010fe2:	6002      	str	r2, [r0, #0]
 8010fe4:	2500      	movs	r5, #0
 8010fe6:	e7f8      	b.n	8010fda <_calloc_r+0x16>
 8010fe8:	4621      	mov	r1, r4
 8010fea:	f7fd ff55 	bl	800ee98 <memset>
 8010fee:	e7f4      	b.n	8010fda <_calloc_r+0x16>

08010ff0 <_read_r>:
 8010ff0:	b538      	push	{r3, r4, r5, lr}
 8010ff2:	4d07      	ldr	r5, [pc, #28]	; (8011010 <_read_r+0x20>)
 8010ff4:	4604      	mov	r4, r0
 8010ff6:	4608      	mov	r0, r1
 8010ff8:	4611      	mov	r1, r2
 8010ffa:	2200      	movs	r2, #0
 8010ffc:	602a      	str	r2, [r5, #0]
 8010ffe:	461a      	mov	r2, r3
 8011000:	f7f2 fdb2 	bl	8003b68 <_read>
 8011004:	1c43      	adds	r3, r0, #1
 8011006:	d102      	bne.n	801100e <_read_r+0x1e>
 8011008:	682b      	ldr	r3, [r5, #0]
 801100a:	b103      	cbz	r3, 801100e <_read_r+0x1e>
 801100c:	6023      	str	r3, [r4, #0]
 801100e:	bd38      	pop	{r3, r4, r5, pc}
 8011010:	24000aa0 	.word	0x24000aa0
 8011014:	00000000 	.word	0x00000000

08011018 <nan>:
 8011018:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8011020 <nan+0x8>
 801101c:	4770      	bx	lr
 801101e:	bf00      	nop
 8011020:	00000000 	.word	0x00000000
 8011024:	7ff80000 	.word	0x7ff80000

08011028 <strncmp>:
 8011028:	b510      	push	{r4, lr}
 801102a:	b17a      	cbz	r2, 801104c <strncmp+0x24>
 801102c:	4603      	mov	r3, r0
 801102e:	3901      	subs	r1, #1
 8011030:	1884      	adds	r4, r0, r2
 8011032:	f813 0b01 	ldrb.w	r0, [r3], #1
 8011036:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 801103a:	4290      	cmp	r0, r2
 801103c:	d101      	bne.n	8011042 <strncmp+0x1a>
 801103e:	42a3      	cmp	r3, r4
 8011040:	d101      	bne.n	8011046 <strncmp+0x1e>
 8011042:	1a80      	subs	r0, r0, r2
 8011044:	bd10      	pop	{r4, pc}
 8011046:	2800      	cmp	r0, #0
 8011048:	d1f3      	bne.n	8011032 <strncmp+0xa>
 801104a:	e7fa      	b.n	8011042 <strncmp+0x1a>
 801104c:	4610      	mov	r0, r2
 801104e:	e7f9      	b.n	8011044 <strncmp+0x1c>

08011050 <__ascii_wctomb>:
 8011050:	b149      	cbz	r1, 8011066 <__ascii_wctomb+0x16>
 8011052:	2aff      	cmp	r2, #255	; 0xff
 8011054:	bf85      	ittet	hi
 8011056:	238a      	movhi	r3, #138	; 0x8a
 8011058:	6003      	strhi	r3, [r0, #0]
 801105a:	700a      	strbls	r2, [r1, #0]
 801105c:	f04f 30ff 	movhi.w	r0, #4294967295
 8011060:	bf98      	it	ls
 8011062:	2001      	movls	r0, #1
 8011064:	4770      	bx	lr
 8011066:	4608      	mov	r0, r1
 8011068:	4770      	bx	lr
	...

0801106c <__assert_func>:
 801106c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801106e:	4614      	mov	r4, r2
 8011070:	461a      	mov	r2, r3
 8011072:	4b09      	ldr	r3, [pc, #36]	; (8011098 <__assert_func+0x2c>)
 8011074:	681b      	ldr	r3, [r3, #0]
 8011076:	4605      	mov	r5, r0
 8011078:	68d8      	ldr	r0, [r3, #12]
 801107a:	b14c      	cbz	r4, 8011090 <__assert_func+0x24>
 801107c:	4b07      	ldr	r3, [pc, #28]	; (801109c <__assert_func+0x30>)
 801107e:	9100      	str	r1, [sp, #0]
 8011080:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8011084:	4906      	ldr	r1, [pc, #24]	; (80110a0 <__assert_func+0x34>)
 8011086:	462b      	mov	r3, r5
 8011088:	f000 f80e 	bl	80110a8 <fiprintf>
 801108c:	f000 fbd4 	bl	8011838 <abort>
 8011090:	4b04      	ldr	r3, [pc, #16]	; (80110a4 <__assert_func+0x38>)
 8011092:	461c      	mov	r4, r3
 8011094:	e7f3      	b.n	801107e <__assert_func+0x12>
 8011096:	bf00      	nop
 8011098:	24000088 	.word	0x24000088
 801109c:	08012534 	.word	0x08012534
 80110a0:	08012541 	.word	0x08012541
 80110a4:	0801256f 	.word	0x0801256f

080110a8 <fiprintf>:
 80110a8:	b40e      	push	{r1, r2, r3}
 80110aa:	b503      	push	{r0, r1, lr}
 80110ac:	4601      	mov	r1, r0
 80110ae:	ab03      	add	r3, sp, #12
 80110b0:	4805      	ldr	r0, [pc, #20]	; (80110c8 <fiprintf+0x20>)
 80110b2:	f853 2b04 	ldr.w	r2, [r3], #4
 80110b6:	6800      	ldr	r0, [r0, #0]
 80110b8:	9301      	str	r3, [sp, #4]
 80110ba:	f000 f839 	bl	8011130 <_vfiprintf_r>
 80110be:	b002      	add	sp, #8
 80110c0:	f85d eb04 	ldr.w	lr, [sp], #4
 80110c4:	b003      	add	sp, #12
 80110c6:	4770      	bx	lr
 80110c8:	24000088 	.word	0x24000088

080110cc <malloc>:
 80110cc:	4b02      	ldr	r3, [pc, #8]	; (80110d8 <malloc+0xc>)
 80110ce:	4601      	mov	r1, r0
 80110d0:	6818      	ldr	r0, [r3, #0]
 80110d2:	f7fd bf55 	b.w	800ef80 <_malloc_r>
 80110d6:	bf00      	nop
 80110d8:	24000088 	.word	0x24000088

080110dc <__sfputc_r>:
 80110dc:	6893      	ldr	r3, [r2, #8]
 80110de:	3b01      	subs	r3, #1
 80110e0:	2b00      	cmp	r3, #0
 80110e2:	b410      	push	{r4}
 80110e4:	6093      	str	r3, [r2, #8]
 80110e6:	da08      	bge.n	80110fa <__sfputc_r+0x1e>
 80110e8:	6994      	ldr	r4, [r2, #24]
 80110ea:	42a3      	cmp	r3, r4
 80110ec:	db01      	blt.n	80110f2 <__sfputc_r+0x16>
 80110ee:	290a      	cmp	r1, #10
 80110f0:	d103      	bne.n	80110fa <__sfputc_r+0x1e>
 80110f2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80110f6:	f000 badf 	b.w	80116b8 <__swbuf_r>
 80110fa:	6813      	ldr	r3, [r2, #0]
 80110fc:	1c58      	adds	r0, r3, #1
 80110fe:	6010      	str	r0, [r2, #0]
 8011100:	7019      	strb	r1, [r3, #0]
 8011102:	4608      	mov	r0, r1
 8011104:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011108:	4770      	bx	lr

0801110a <__sfputs_r>:
 801110a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801110c:	4606      	mov	r6, r0
 801110e:	460f      	mov	r7, r1
 8011110:	4614      	mov	r4, r2
 8011112:	18d5      	adds	r5, r2, r3
 8011114:	42ac      	cmp	r4, r5
 8011116:	d101      	bne.n	801111c <__sfputs_r+0x12>
 8011118:	2000      	movs	r0, #0
 801111a:	e007      	b.n	801112c <__sfputs_r+0x22>
 801111c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011120:	463a      	mov	r2, r7
 8011122:	4630      	mov	r0, r6
 8011124:	f7ff ffda 	bl	80110dc <__sfputc_r>
 8011128:	1c43      	adds	r3, r0, #1
 801112a:	d1f3      	bne.n	8011114 <__sfputs_r+0xa>
 801112c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08011130 <_vfiprintf_r>:
 8011130:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011134:	460d      	mov	r5, r1
 8011136:	b09d      	sub	sp, #116	; 0x74
 8011138:	4614      	mov	r4, r2
 801113a:	4698      	mov	r8, r3
 801113c:	4606      	mov	r6, r0
 801113e:	b118      	cbz	r0, 8011148 <_vfiprintf_r+0x18>
 8011140:	6983      	ldr	r3, [r0, #24]
 8011142:	b90b      	cbnz	r3, 8011148 <_vfiprintf_r+0x18>
 8011144:	f7fd fc40 	bl	800e9c8 <__sinit>
 8011148:	4b89      	ldr	r3, [pc, #548]	; (8011370 <_vfiprintf_r+0x240>)
 801114a:	429d      	cmp	r5, r3
 801114c:	d11b      	bne.n	8011186 <_vfiprintf_r+0x56>
 801114e:	6875      	ldr	r5, [r6, #4]
 8011150:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8011152:	07d9      	lsls	r1, r3, #31
 8011154:	d405      	bmi.n	8011162 <_vfiprintf_r+0x32>
 8011156:	89ab      	ldrh	r3, [r5, #12]
 8011158:	059a      	lsls	r2, r3, #22
 801115a:	d402      	bmi.n	8011162 <_vfiprintf_r+0x32>
 801115c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801115e:	f7fd fe25 	bl	800edac <__retarget_lock_acquire_recursive>
 8011162:	89ab      	ldrh	r3, [r5, #12]
 8011164:	071b      	lsls	r3, r3, #28
 8011166:	d501      	bpl.n	801116c <_vfiprintf_r+0x3c>
 8011168:	692b      	ldr	r3, [r5, #16]
 801116a:	b9eb      	cbnz	r3, 80111a8 <_vfiprintf_r+0x78>
 801116c:	4629      	mov	r1, r5
 801116e:	4630      	mov	r0, r6
 8011170:	f000 faf4 	bl	801175c <__swsetup_r>
 8011174:	b1c0      	cbz	r0, 80111a8 <_vfiprintf_r+0x78>
 8011176:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8011178:	07dc      	lsls	r4, r3, #31
 801117a:	d50e      	bpl.n	801119a <_vfiprintf_r+0x6a>
 801117c:	f04f 30ff 	mov.w	r0, #4294967295
 8011180:	b01d      	add	sp, #116	; 0x74
 8011182:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011186:	4b7b      	ldr	r3, [pc, #492]	; (8011374 <_vfiprintf_r+0x244>)
 8011188:	429d      	cmp	r5, r3
 801118a:	d101      	bne.n	8011190 <_vfiprintf_r+0x60>
 801118c:	68b5      	ldr	r5, [r6, #8]
 801118e:	e7df      	b.n	8011150 <_vfiprintf_r+0x20>
 8011190:	4b79      	ldr	r3, [pc, #484]	; (8011378 <_vfiprintf_r+0x248>)
 8011192:	429d      	cmp	r5, r3
 8011194:	bf08      	it	eq
 8011196:	68f5      	ldreq	r5, [r6, #12]
 8011198:	e7da      	b.n	8011150 <_vfiprintf_r+0x20>
 801119a:	89ab      	ldrh	r3, [r5, #12]
 801119c:	0598      	lsls	r0, r3, #22
 801119e:	d4ed      	bmi.n	801117c <_vfiprintf_r+0x4c>
 80111a0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80111a2:	f7fd fe04 	bl	800edae <__retarget_lock_release_recursive>
 80111a6:	e7e9      	b.n	801117c <_vfiprintf_r+0x4c>
 80111a8:	2300      	movs	r3, #0
 80111aa:	9309      	str	r3, [sp, #36]	; 0x24
 80111ac:	2320      	movs	r3, #32
 80111ae:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80111b2:	f8cd 800c 	str.w	r8, [sp, #12]
 80111b6:	2330      	movs	r3, #48	; 0x30
 80111b8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 801137c <_vfiprintf_r+0x24c>
 80111bc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80111c0:	f04f 0901 	mov.w	r9, #1
 80111c4:	4623      	mov	r3, r4
 80111c6:	469a      	mov	sl, r3
 80111c8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80111cc:	b10a      	cbz	r2, 80111d2 <_vfiprintf_r+0xa2>
 80111ce:	2a25      	cmp	r2, #37	; 0x25
 80111d0:	d1f9      	bne.n	80111c6 <_vfiprintf_r+0x96>
 80111d2:	ebba 0b04 	subs.w	fp, sl, r4
 80111d6:	d00b      	beq.n	80111f0 <_vfiprintf_r+0xc0>
 80111d8:	465b      	mov	r3, fp
 80111da:	4622      	mov	r2, r4
 80111dc:	4629      	mov	r1, r5
 80111de:	4630      	mov	r0, r6
 80111e0:	f7ff ff93 	bl	801110a <__sfputs_r>
 80111e4:	3001      	adds	r0, #1
 80111e6:	f000 80aa 	beq.w	801133e <_vfiprintf_r+0x20e>
 80111ea:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80111ec:	445a      	add	r2, fp
 80111ee:	9209      	str	r2, [sp, #36]	; 0x24
 80111f0:	f89a 3000 	ldrb.w	r3, [sl]
 80111f4:	2b00      	cmp	r3, #0
 80111f6:	f000 80a2 	beq.w	801133e <_vfiprintf_r+0x20e>
 80111fa:	2300      	movs	r3, #0
 80111fc:	f04f 32ff 	mov.w	r2, #4294967295
 8011200:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011204:	f10a 0a01 	add.w	sl, sl, #1
 8011208:	9304      	str	r3, [sp, #16]
 801120a:	9307      	str	r3, [sp, #28]
 801120c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8011210:	931a      	str	r3, [sp, #104]	; 0x68
 8011212:	4654      	mov	r4, sl
 8011214:	2205      	movs	r2, #5
 8011216:	f814 1b01 	ldrb.w	r1, [r4], #1
 801121a:	4858      	ldr	r0, [pc, #352]	; (801137c <_vfiprintf_r+0x24c>)
 801121c:	f7ef f860 	bl	80002e0 <memchr>
 8011220:	9a04      	ldr	r2, [sp, #16]
 8011222:	b9d8      	cbnz	r0, 801125c <_vfiprintf_r+0x12c>
 8011224:	06d1      	lsls	r1, r2, #27
 8011226:	bf44      	itt	mi
 8011228:	2320      	movmi	r3, #32
 801122a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801122e:	0713      	lsls	r3, r2, #28
 8011230:	bf44      	itt	mi
 8011232:	232b      	movmi	r3, #43	; 0x2b
 8011234:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011238:	f89a 3000 	ldrb.w	r3, [sl]
 801123c:	2b2a      	cmp	r3, #42	; 0x2a
 801123e:	d015      	beq.n	801126c <_vfiprintf_r+0x13c>
 8011240:	9a07      	ldr	r2, [sp, #28]
 8011242:	4654      	mov	r4, sl
 8011244:	2000      	movs	r0, #0
 8011246:	f04f 0c0a 	mov.w	ip, #10
 801124a:	4621      	mov	r1, r4
 801124c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011250:	3b30      	subs	r3, #48	; 0x30
 8011252:	2b09      	cmp	r3, #9
 8011254:	d94e      	bls.n	80112f4 <_vfiprintf_r+0x1c4>
 8011256:	b1b0      	cbz	r0, 8011286 <_vfiprintf_r+0x156>
 8011258:	9207      	str	r2, [sp, #28]
 801125a:	e014      	b.n	8011286 <_vfiprintf_r+0x156>
 801125c:	eba0 0308 	sub.w	r3, r0, r8
 8011260:	fa09 f303 	lsl.w	r3, r9, r3
 8011264:	4313      	orrs	r3, r2
 8011266:	9304      	str	r3, [sp, #16]
 8011268:	46a2      	mov	sl, r4
 801126a:	e7d2      	b.n	8011212 <_vfiprintf_r+0xe2>
 801126c:	9b03      	ldr	r3, [sp, #12]
 801126e:	1d19      	adds	r1, r3, #4
 8011270:	681b      	ldr	r3, [r3, #0]
 8011272:	9103      	str	r1, [sp, #12]
 8011274:	2b00      	cmp	r3, #0
 8011276:	bfbb      	ittet	lt
 8011278:	425b      	neglt	r3, r3
 801127a:	f042 0202 	orrlt.w	r2, r2, #2
 801127e:	9307      	strge	r3, [sp, #28]
 8011280:	9307      	strlt	r3, [sp, #28]
 8011282:	bfb8      	it	lt
 8011284:	9204      	strlt	r2, [sp, #16]
 8011286:	7823      	ldrb	r3, [r4, #0]
 8011288:	2b2e      	cmp	r3, #46	; 0x2e
 801128a:	d10c      	bne.n	80112a6 <_vfiprintf_r+0x176>
 801128c:	7863      	ldrb	r3, [r4, #1]
 801128e:	2b2a      	cmp	r3, #42	; 0x2a
 8011290:	d135      	bne.n	80112fe <_vfiprintf_r+0x1ce>
 8011292:	9b03      	ldr	r3, [sp, #12]
 8011294:	1d1a      	adds	r2, r3, #4
 8011296:	681b      	ldr	r3, [r3, #0]
 8011298:	9203      	str	r2, [sp, #12]
 801129a:	2b00      	cmp	r3, #0
 801129c:	bfb8      	it	lt
 801129e:	f04f 33ff 	movlt.w	r3, #4294967295
 80112a2:	3402      	adds	r4, #2
 80112a4:	9305      	str	r3, [sp, #20]
 80112a6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 801138c <_vfiprintf_r+0x25c>
 80112aa:	7821      	ldrb	r1, [r4, #0]
 80112ac:	2203      	movs	r2, #3
 80112ae:	4650      	mov	r0, sl
 80112b0:	f7ef f816 	bl	80002e0 <memchr>
 80112b4:	b140      	cbz	r0, 80112c8 <_vfiprintf_r+0x198>
 80112b6:	2340      	movs	r3, #64	; 0x40
 80112b8:	eba0 000a 	sub.w	r0, r0, sl
 80112bc:	fa03 f000 	lsl.w	r0, r3, r0
 80112c0:	9b04      	ldr	r3, [sp, #16]
 80112c2:	4303      	orrs	r3, r0
 80112c4:	3401      	adds	r4, #1
 80112c6:	9304      	str	r3, [sp, #16]
 80112c8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80112cc:	482c      	ldr	r0, [pc, #176]	; (8011380 <_vfiprintf_r+0x250>)
 80112ce:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80112d2:	2206      	movs	r2, #6
 80112d4:	f7ef f804 	bl	80002e0 <memchr>
 80112d8:	2800      	cmp	r0, #0
 80112da:	d03f      	beq.n	801135c <_vfiprintf_r+0x22c>
 80112dc:	4b29      	ldr	r3, [pc, #164]	; (8011384 <_vfiprintf_r+0x254>)
 80112de:	bb1b      	cbnz	r3, 8011328 <_vfiprintf_r+0x1f8>
 80112e0:	9b03      	ldr	r3, [sp, #12]
 80112e2:	3307      	adds	r3, #7
 80112e4:	f023 0307 	bic.w	r3, r3, #7
 80112e8:	3308      	adds	r3, #8
 80112ea:	9303      	str	r3, [sp, #12]
 80112ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80112ee:	443b      	add	r3, r7
 80112f0:	9309      	str	r3, [sp, #36]	; 0x24
 80112f2:	e767      	b.n	80111c4 <_vfiprintf_r+0x94>
 80112f4:	fb0c 3202 	mla	r2, ip, r2, r3
 80112f8:	460c      	mov	r4, r1
 80112fa:	2001      	movs	r0, #1
 80112fc:	e7a5      	b.n	801124a <_vfiprintf_r+0x11a>
 80112fe:	2300      	movs	r3, #0
 8011300:	3401      	adds	r4, #1
 8011302:	9305      	str	r3, [sp, #20]
 8011304:	4619      	mov	r1, r3
 8011306:	f04f 0c0a 	mov.w	ip, #10
 801130a:	4620      	mov	r0, r4
 801130c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011310:	3a30      	subs	r2, #48	; 0x30
 8011312:	2a09      	cmp	r2, #9
 8011314:	d903      	bls.n	801131e <_vfiprintf_r+0x1ee>
 8011316:	2b00      	cmp	r3, #0
 8011318:	d0c5      	beq.n	80112a6 <_vfiprintf_r+0x176>
 801131a:	9105      	str	r1, [sp, #20]
 801131c:	e7c3      	b.n	80112a6 <_vfiprintf_r+0x176>
 801131e:	fb0c 2101 	mla	r1, ip, r1, r2
 8011322:	4604      	mov	r4, r0
 8011324:	2301      	movs	r3, #1
 8011326:	e7f0      	b.n	801130a <_vfiprintf_r+0x1da>
 8011328:	ab03      	add	r3, sp, #12
 801132a:	9300      	str	r3, [sp, #0]
 801132c:	462a      	mov	r2, r5
 801132e:	4b16      	ldr	r3, [pc, #88]	; (8011388 <_vfiprintf_r+0x258>)
 8011330:	a904      	add	r1, sp, #16
 8011332:	4630      	mov	r0, r6
 8011334:	f3af 8000 	nop.w
 8011338:	4607      	mov	r7, r0
 801133a:	1c78      	adds	r0, r7, #1
 801133c:	d1d6      	bne.n	80112ec <_vfiprintf_r+0x1bc>
 801133e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8011340:	07d9      	lsls	r1, r3, #31
 8011342:	d405      	bmi.n	8011350 <_vfiprintf_r+0x220>
 8011344:	89ab      	ldrh	r3, [r5, #12]
 8011346:	059a      	lsls	r2, r3, #22
 8011348:	d402      	bmi.n	8011350 <_vfiprintf_r+0x220>
 801134a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801134c:	f7fd fd2f 	bl	800edae <__retarget_lock_release_recursive>
 8011350:	89ab      	ldrh	r3, [r5, #12]
 8011352:	065b      	lsls	r3, r3, #25
 8011354:	f53f af12 	bmi.w	801117c <_vfiprintf_r+0x4c>
 8011358:	9809      	ldr	r0, [sp, #36]	; 0x24
 801135a:	e711      	b.n	8011180 <_vfiprintf_r+0x50>
 801135c:	ab03      	add	r3, sp, #12
 801135e:	9300      	str	r3, [sp, #0]
 8011360:	462a      	mov	r2, r5
 8011362:	4b09      	ldr	r3, [pc, #36]	; (8011388 <_vfiprintf_r+0x258>)
 8011364:	a904      	add	r1, sp, #16
 8011366:	4630      	mov	r0, r6
 8011368:	f000 f880 	bl	801146c <_printf_i>
 801136c:	e7e4      	b.n	8011338 <_vfiprintf_r+0x208>
 801136e:	bf00      	nop
 8011370:	08012294 	.word	0x08012294
 8011374:	080122b4 	.word	0x080122b4
 8011378:	08012274 	.word	0x08012274
 801137c:	08012671 	.word	0x08012671
 8011380:	0801267b 	.word	0x0801267b
 8011384:	00000000 	.word	0x00000000
 8011388:	0801110b 	.word	0x0801110b
 801138c:	08012677 	.word	0x08012677

08011390 <_printf_common>:
 8011390:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011394:	4616      	mov	r6, r2
 8011396:	4699      	mov	r9, r3
 8011398:	688a      	ldr	r2, [r1, #8]
 801139a:	690b      	ldr	r3, [r1, #16]
 801139c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80113a0:	4293      	cmp	r3, r2
 80113a2:	bfb8      	it	lt
 80113a4:	4613      	movlt	r3, r2
 80113a6:	6033      	str	r3, [r6, #0]
 80113a8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80113ac:	4607      	mov	r7, r0
 80113ae:	460c      	mov	r4, r1
 80113b0:	b10a      	cbz	r2, 80113b6 <_printf_common+0x26>
 80113b2:	3301      	adds	r3, #1
 80113b4:	6033      	str	r3, [r6, #0]
 80113b6:	6823      	ldr	r3, [r4, #0]
 80113b8:	0699      	lsls	r1, r3, #26
 80113ba:	bf42      	ittt	mi
 80113bc:	6833      	ldrmi	r3, [r6, #0]
 80113be:	3302      	addmi	r3, #2
 80113c0:	6033      	strmi	r3, [r6, #0]
 80113c2:	6825      	ldr	r5, [r4, #0]
 80113c4:	f015 0506 	ands.w	r5, r5, #6
 80113c8:	d106      	bne.n	80113d8 <_printf_common+0x48>
 80113ca:	f104 0a19 	add.w	sl, r4, #25
 80113ce:	68e3      	ldr	r3, [r4, #12]
 80113d0:	6832      	ldr	r2, [r6, #0]
 80113d2:	1a9b      	subs	r3, r3, r2
 80113d4:	42ab      	cmp	r3, r5
 80113d6:	dc26      	bgt.n	8011426 <_printf_common+0x96>
 80113d8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80113dc:	1e13      	subs	r3, r2, #0
 80113de:	6822      	ldr	r2, [r4, #0]
 80113e0:	bf18      	it	ne
 80113e2:	2301      	movne	r3, #1
 80113e4:	0692      	lsls	r2, r2, #26
 80113e6:	d42b      	bmi.n	8011440 <_printf_common+0xb0>
 80113e8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80113ec:	4649      	mov	r1, r9
 80113ee:	4638      	mov	r0, r7
 80113f0:	47c0      	blx	r8
 80113f2:	3001      	adds	r0, #1
 80113f4:	d01e      	beq.n	8011434 <_printf_common+0xa4>
 80113f6:	6823      	ldr	r3, [r4, #0]
 80113f8:	68e5      	ldr	r5, [r4, #12]
 80113fa:	6832      	ldr	r2, [r6, #0]
 80113fc:	f003 0306 	and.w	r3, r3, #6
 8011400:	2b04      	cmp	r3, #4
 8011402:	bf08      	it	eq
 8011404:	1aad      	subeq	r5, r5, r2
 8011406:	68a3      	ldr	r3, [r4, #8]
 8011408:	6922      	ldr	r2, [r4, #16]
 801140a:	bf0c      	ite	eq
 801140c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8011410:	2500      	movne	r5, #0
 8011412:	4293      	cmp	r3, r2
 8011414:	bfc4      	itt	gt
 8011416:	1a9b      	subgt	r3, r3, r2
 8011418:	18ed      	addgt	r5, r5, r3
 801141a:	2600      	movs	r6, #0
 801141c:	341a      	adds	r4, #26
 801141e:	42b5      	cmp	r5, r6
 8011420:	d11a      	bne.n	8011458 <_printf_common+0xc8>
 8011422:	2000      	movs	r0, #0
 8011424:	e008      	b.n	8011438 <_printf_common+0xa8>
 8011426:	2301      	movs	r3, #1
 8011428:	4652      	mov	r2, sl
 801142a:	4649      	mov	r1, r9
 801142c:	4638      	mov	r0, r7
 801142e:	47c0      	blx	r8
 8011430:	3001      	adds	r0, #1
 8011432:	d103      	bne.n	801143c <_printf_common+0xac>
 8011434:	f04f 30ff 	mov.w	r0, #4294967295
 8011438:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801143c:	3501      	adds	r5, #1
 801143e:	e7c6      	b.n	80113ce <_printf_common+0x3e>
 8011440:	18e1      	adds	r1, r4, r3
 8011442:	1c5a      	adds	r2, r3, #1
 8011444:	2030      	movs	r0, #48	; 0x30
 8011446:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801144a:	4422      	add	r2, r4
 801144c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8011450:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8011454:	3302      	adds	r3, #2
 8011456:	e7c7      	b.n	80113e8 <_printf_common+0x58>
 8011458:	2301      	movs	r3, #1
 801145a:	4622      	mov	r2, r4
 801145c:	4649      	mov	r1, r9
 801145e:	4638      	mov	r0, r7
 8011460:	47c0      	blx	r8
 8011462:	3001      	adds	r0, #1
 8011464:	d0e6      	beq.n	8011434 <_printf_common+0xa4>
 8011466:	3601      	adds	r6, #1
 8011468:	e7d9      	b.n	801141e <_printf_common+0x8e>
	...

0801146c <_printf_i>:
 801146c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8011470:	7e0f      	ldrb	r7, [r1, #24]
 8011472:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8011474:	2f78      	cmp	r7, #120	; 0x78
 8011476:	4691      	mov	r9, r2
 8011478:	4680      	mov	r8, r0
 801147a:	460c      	mov	r4, r1
 801147c:	469a      	mov	sl, r3
 801147e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8011482:	d807      	bhi.n	8011494 <_printf_i+0x28>
 8011484:	2f62      	cmp	r7, #98	; 0x62
 8011486:	d80a      	bhi.n	801149e <_printf_i+0x32>
 8011488:	2f00      	cmp	r7, #0
 801148a:	f000 80d8 	beq.w	801163e <_printf_i+0x1d2>
 801148e:	2f58      	cmp	r7, #88	; 0x58
 8011490:	f000 80a3 	beq.w	80115da <_printf_i+0x16e>
 8011494:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8011498:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801149c:	e03a      	b.n	8011514 <_printf_i+0xa8>
 801149e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80114a2:	2b15      	cmp	r3, #21
 80114a4:	d8f6      	bhi.n	8011494 <_printf_i+0x28>
 80114a6:	a101      	add	r1, pc, #4	; (adr r1, 80114ac <_printf_i+0x40>)
 80114a8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80114ac:	08011505 	.word	0x08011505
 80114b0:	08011519 	.word	0x08011519
 80114b4:	08011495 	.word	0x08011495
 80114b8:	08011495 	.word	0x08011495
 80114bc:	08011495 	.word	0x08011495
 80114c0:	08011495 	.word	0x08011495
 80114c4:	08011519 	.word	0x08011519
 80114c8:	08011495 	.word	0x08011495
 80114cc:	08011495 	.word	0x08011495
 80114d0:	08011495 	.word	0x08011495
 80114d4:	08011495 	.word	0x08011495
 80114d8:	08011625 	.word	0x08011625
 80114dc:	08011549 	.word	0x08011549
 80114e0:	08011607 	.word	0x08011607
 80114e4:	08011495 	.word	0x08011495
 80114e8:	08011495 	.word	0x08011495
 80114ec:	08011647 	.word	0x08011647
 80114f0:	08011495 	.word	0x08011495
 80114f4:	08011549 	.word	0x08011549
 80114f8:	08011495 	.word	0x08011495
 80114fc:	08011495 	.word	0x08011495
 8011500:	0801160f 	.word	0x0801160f
 8011504:	682b      	ldr	r3, [r5, #0]
 8011506:	1d1a      	adds	r2, r3, #4
 8011508:	681b      	ldr	r3, [r3, #0]
 801150a:	602a      	str	r2, [r5, #0]
 801150c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8011510:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8011514:	2301      	movs	r3, #1
 8011516:	e0a3      	b.n	8011660 <_printf_i+0x1f4>
 8011518:	6820      	ldr	r0, [r4, #0]
 801151a:	6829      	ldr	r1, [r5, #0]
 801151c:	0606      	lsls	r6, r0, #24
 801151e:	f101 0304 	add.w	r3, r1, #4
 8011522:	d50a      	bpl.n	801153a <_printf_i+0xce>
 8011524:	680e      	ldr	r6, [r1, #0]
 8011526:	602b      	str	r3, [r5, #0]
 8011528:	2e00      	cmp	r6, #0
 801152a:	da03      	bge.n	8011534 <_printf_i+0xc8>
 801152c:	232d      	movs	r3, #45	; 0x2d
 801152e:	4276      	negs	r6, r6
 8011530:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8011534:	485e      	ldr	r0, [pc, #376]	; (80116b0 <_printf_i+0x244>)
 8011536:	230a      	movs	r3, #10
 8011538:	e019      	b.n	801156e <_printf_i+0x102>
 801153a:	680e      	ldr	r6, [r1, #0]
 801153c:	602b      	str	r3, [r5, #0]
 801153e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8011542:	bf18      	it	ne
 8011544:	b236      	sxthne	r6, r6
 8011546:	e7ef      	b.n	8011528 <_printf_i+0xbc>
 8011548:	682b      	ldr	r3, [r5, #0]
 801154a:	6820      	ldr	r0, [r4, #0]
 801154c:	1d19      	adds	r1, r3, #4
 801154e:	6029      	str	r1, [r5, #0]
 8011550:	0601      	lsls	r1, r0, #24
 8011552:	d501      	bpl.n	8011558 <_printf_i+0xec>
 8011554:	681e      	ldr	r6, [r3, #0]
 8011556:	e002      	b.n	801155e <_printf_i+0xf2>
 8011558:	0646      	lsls	r6, r0, #25
 801155a:	d5fb      	bpl.n	8011554 <_printf_i+0xe8>
 801155c:	881e      	ldrh	r6, [r3, #0]
 801155e:	4854      	ldr	r0, [pc, #336]	; (80116b0 <_printf_i+0x244>)
 8011560:	2f6f      	cmp	r7, #111	; 0x6f
 8011562:	bf0c      	ite	eq
 8011564:	2308      	moveq	r3, #8
 8011566:	230a      	movne	r3, #10
 8011568:	2100      	movs	r1, #0
 801156a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801156e:	6865      	ldr	r5, [r4, #4]
 8011570:	60a5      	str	r5, [r4, #8]
 8011572:	2d00      	cmp	r5, #0
 8011574:	bfa2      	ittt	ge
 8011576:	6821      	ldrge	r1, [r4, #0]
 8011578:	f021 0104 	bicge.w	r1, r1, #4
 801157c:	6021      	strge	r1, [r4, #0]
 801157e:	b90e      	cbnz	r6, 8011584 <_printf_i+0x118>
 8011580:	2d00      	cmp	r5, #0
 8011582:	d04d      	beq.n	8011620 <_printf_i+0x1b4>
 8011584:	4615      	mov	r5, r2
 8011586:	fbb6 f1f3 	udiv	r1, r6, r3
 801158a:	fb03 6711 	mls	r7, r3, r1, r6
 801158e:	5dc7      	ldrb	r7, [r0, r7]
 8011590:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8011594:	4637      	mov	r7, r6
 8011596:	42bb      	cmp	r3, r7
 8011598:	460e      	mov	r6, r1
 801159a:	d9f4      	bls.n	8011586 <_printf_i+0x11a>
 801159c:	2b08      	cmp	r3, #8
 801159e:	d10b      	bne.n	80115b8 <_printf_i+0x14c>
 80115a0:	6823      	ldr	r3, [r4, #0]
 80115a2:	07de      	lsls	r6, r3, #31
 80115a4:	d508      	bpl.n	80115b8 <_printf_i+0x14c>
 80115a6:	6923      	ldr	r3, [r4, #16]
 80115a8:	6861      	ldr	r1, [r4, #4]
 80115aa:	4299      	cmp	r1, r3
 80115ac:	bfde      	ittt	le
 80115ae:	2330      	movle	r3, #48	; 0x30
 80115b0:	f805 3c01 	strble.w	r3, [r5, #-1]
 80115b4:	f105 35ff 	addle.w	r5, r5, #4294967295
 80115b8:	1b52      	subs	r2, r2, r5
 80115ba:	6122      	str	r2, [r4, #16]
 80115bc:	f8cd a000 	str.w	sl, [sp]
 80115c0:	464b      	mov	r3, r9
 80115c2:	aa03      	add	r2, sp, #12
 80115c4:	4621      	mov	r1, r4
 80115c6:	4640      	mov	r0, r8
 80115c8:	f7ff fee2 	bl	8011390 <_printf_common>
 80115cc:	3001      	adds	r0, #1
 80115ce:	d14c      	bne.n	801166a <_printf_i+0x1fe>
 80115d0:	f04f 30ff 	mov.w	r0, #4294967295
 80115d4:	b004      	add	sp, #16
 80115d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80115da:	4835      	ldr	r0, [pc, #212]	; (80116b0 <_printf_i+0x244>)
 80115dc:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80115e0:	6829      	ldr	r1, [r5, #0]
 80115e2:	6823      	ldr	r3, [r4, #0]
 80115e4:	f851 6b04 	ldr.w	r6, [r1], #4
 80115e8:	6029      	str	r1, [r5, #0]
 80115ea:	061d      	lsls	r5, r3, #24
 80115ec:	d514      	bpl.n	8011618 <_printf_i+0x1ac>
 80115ee:	07df      	lsls	r7, r3, #31
 80115f0:	bf44      	itt	mi
 80115f2:	f043 0320 	orrmi.w	r3, r3, #32
 80115f6:	6023      	strmi	r3, [r4, #0]
 80115f8:	b91e      	cbnz	r6, 8011602 <_printf_i+0x196>
 80115fa:	6823      	ldr	r3, [r4, #0]
 80115fc:	f023 0320 	bic.w	r3, r3, #32
 8011600:	6023      	str	r3, [r4, #0]
 8011602:	2310      	movs	r3, #16
 8011604:	e7b0      	b.n	8011568 <_printf_i+0xfc>
 8011606:	6823      	ldr	r3, [r4, #0]
 8011608:	f043 0320 	orr.w	r3, r3, #32
 801160c:	6023      	str	r3, [r4, #0]
 801160e:	2378      	movs	r3, #120	; 0x78
 8011610:	4828      	ldr	r0, [pc, #160]	; (80116b4 <_printf_i+0x248>)
 8011612:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8011616:	e7e3      	b.n	80115e0 <_printf_i+0x174>
 8011618:	0659      	lsls	r1, r3, #25
 801161a:	bf48      	it	mi
 801161c:	b2b6      	uxthmi	r6, r6
 801161e:	e7e6      	b.n	80115ee <_printf_i+0x182>
 8011620:	4615      	mov	r5, r2
 8011622:	e7bb      	b.n	801159c <_printf_i+0x130>
 8011624:	682b      	ldr	r3, [r5, #0]
 8011626:	6826      	ldr	r6, [r4, #0]
 8011628:	6961      	ldr	r1, [r4, #20]
 801162a:	1d18      	adds	r0, r3, #4
 801162c:	6028      	str	r0, [r5, #0]
 801162e:	0635      	lsls	r5, r6, #24
 8011630:	681b      	ldr	r3, [r3, #0]
 8011632:	d501      	bpl.n	8011638 <_printf_i+0x1cc>
 8011634:	6019      	str	r1, [r3, #0]
 8011636:	e002      	b.n	801163e <_printf_i+0x1d2>
 8011638:	0670      	lsls	r0, r6, #25
 801163a:	d5fb      	bpl.n	8011634 <_printf_i+0x1c8>
 801163c:	8019      	strh	r1, [r3, #0]
 801163e:	2300      	movs	r3, #0
 8011640:	6123      	str	r3, [r4, #16]
 8011642:	4615      	mov	r5, r2
 8011644:	e7ba      	b.n	80115bc <_printf_i+0x150>
 8011646:	682b      	ldr	r3, [r5, #0]
 8011648:	1d1a      	adds	r2, r3, #4
 801164a:	602a      	str	r2, [r5, #0]
 801164c:	681d      	ldr	r5, [r3, #0]
 801164e:	6862      	ldr	r2, [r4, #4]
 8011650:	2100      	movs	r1, #0
 8011652:	4628      	mov	r0, r5
 8011654:	f7ee fe44 	bl	80002e0 <memchr>
 8011658:	b108      	cbz	r0, 801165e <_printf_i+0x1f2>
 801165a:	1b40      	subs	r0, r0, r5
 801165c:	6060      	str	r0, [r4, #4]
 801165e:	6863      	ldr	r3, [r4, #4]
 8011660:	6123      	str	r3, [r4, #16]
 8011662:	2300      	movs	r3, #0
 8011664:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8011668:	e7a8      	b.n	80115bc <_printf_i+0x150>
 801166a:	6923      	ldr	r3, [r4, #16]
 801166c:	462a      	mov	r2, r5
 801166e:	4649      	mov	r1, r9
 8011670:	4640      	mov	r0, r8
 8011672:	47d0      	blx	sl
 8011674:	3001      	adds	r0, #1
 8011676:	d0ab      	beq.n	80115d0 <_printf_i+0x164>
 8011678:	6823      	ldr	r3, [r4, #0]
 801167a:	079b      	lsls	r3, r3, #30
 801167c:	d413      	bmi.n	80116a6 <_printf_i+0x23a>
 801167e:	68e0      	ldr	r0, [r4, #12]
 8011680:	9b03      	ldr	r3, [sp, #12]
 8011682:	4298      	cmp	r0, r3
 8011684:	bfb8      	it	lt
 8011686:	4618      	movlt	r0, r3
 8011688:	e7a4      	b.n	80115d4 <_printf_i+0x168>
 801168a:	2301      	movs	r3, #1
 801168c:	4632      	mov	r2, r6
 801168e:	4649      	mov	r1, r9
 8011690:	4640      	mov	r0, r8
 8011692:	47d0      	blx	sl
 8011694:	3001      	adds	r0, #1
 8011696:	d09b      	beq.n	80115d0 <_printf_i+0x164>
 8011698:	3501      	adds	r5, #1
 801169a:	68e3      	ldr	r3, [r4, #12]
 801169c:	9903      	ldr	r1, [sp, #12]
 801169e:	1a5b      	subs	r3, r3, r1
 80116a0:	42ab      	cmp	r3, r5
 80116a2:	dcf2      	bgt.n	801168a <_printf_i+0x21e>
 80116a4:	e7eb      	b.n	801167e <_printf_i+0x212>
 80116a6:	2500      	movs	r5, #0
 80116a8:	f104 0619 	add.w	r6, r4, #25
 80116ac:	e7f5      	b.n	801169a <_printf_i+0x22e>
 80116ae:	bf00      	nop
 80116b0:	08012682 	.word	0x08012682
 80116b4:	08012693 	.word	0x08012693

080116b8 <__swbuf_r>:
 80116b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80116ba:	460e      	mov	r6, r1
 80116bc:	4614      	mov	r4, r2
 80116be:	4605      	mov	r5, r0
 80116c0:	b118      	cbz	r0, 80116ca <__swbuf_r+0x12>
 80116c2:	6983      	ldr	r3, [r0, #24]
 80116c4:	b90b      	cbnz	r3, 80116ca <__swbuf_r+0x12>
 80116c6:	f7fd f97f 	bl	800e9c8 <__sinit>
 80116ca:	4b21      	ldr	r3, [pc, #132]	; (8011750 <__swbuf_r+0x98>)
 80116cc:	429c      	cmp	r4, r3
 80116ce:	d12b      	bne.n	8011728 <__swbuf_r+0x70>
 80116d0:	686c      	ldr	r4, [r5, #4]
 80116d2:	69a3      	ldr	r3, [r4, #24]
 80116d4:	60a3      	str	r3, [r4, #8]
 80116d6:	89a3      	ldrh	r3, [r4, #12]
 80116d8:	071a      	lsls	r2, r3, #28
 80116da:	d52f      	bpl.n	801173c <__swbuf_r+0x84>
 80116dc:	6923      	ldr	r3, [r4, #16]
 80116de:	b36b      	cbz	r3, 801173c <__swbuf_r+0x84>
 80116e0:	6923      	ldr	r3, [r4, #16]
 80116e2:	6820      	ldr	r0, [r4, #0]
 80116e4:	1ac0      	subs	r0, r0, r3
 80116e6:	6963      	ldr	r3, [r4, #20]
 80116e8:	b2f6      	uxtb	r6, r6
 80116ea:	4283      	cmp	r3, r0
 80116ec:	4637      	mov	r7, r6
 80116ee:	dc04      	bgt.n	80116fa <__swbuf_r+0x42>
 80116f0:	4621      	mov	r1, r4
 80116f2:	4628      	mov	r0, r5
 80116f4:	f7fd f83e 	bl	800e774 <_fflush_r>
 80116f8:	bb30      	cbnz	r0, 8011748 <__swbuf_r+0x90>
 80116fa:	68a3      	ldr	r3, [r4, #8]
 80116fc:	3b01      	subs	r3, #1
 80116fe:	60a3      	str	r3, [r4, #8]
 8011700:	6823      	ldr	r3, [r4, #0]
 8011702:	1c5a      	adds	r2, r3, #1
 8011704:	6022      	str	r2, [r4, #0]
 8011706:	701e      	strb	r6, [r3, #0]
 8011708:	6963      	ldr	r3, [r4, #20]
 801170a:	3001      	adds	r0, #1
 801170c:	4283      	cmp	r3, r0
 801170e:	d004      	beq.n	801171a <__swbuf_r+0x62>
 8011710:	89a3      	ldrh	r3, [r4, #12]
 8011712:	07db      	lsls	r3, r3, #31
 8011714:	d506      	bpl.n	8011724 <__swbuf_r+0x6c>
 8011716:	2e0a      	cmp	r6, #10
 8011718:	d104      	bne.n	8011724 <__swbuf_r+0x6c>
 801171a:	4621      	mov	r1, r4
 801171c:	4628      	mov	r0, r5
 801171e:	f7fd f829 	bl	800e774 <_fflush_r>
 8011722:	b988      	cbnz	r0, 8011748 <__swbuf_r+0x90>
 8011724:	4638      	mov	r0, r7
 8011726:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011728:	4b0a      	ldr	r3, [pc, #40]	; (8011754 <__swbuf_r+0x9c>)
 801172a:	429c      	cmp	r4, r3
 801172c:	d101      	bne.n	8011732 <__swbuf_r+0x7a>
 801172e:	68ac      	ldr	r4, [r5, #8]
 8011730:	e7cf      	b.n	80116d2 <__swbuf_r+0x1a>
 8011732:	4b09      	ldr	r3, [pc, #36]	; (8011758 <__swbuf_r+0xa0>)
 8011734:	429c      	cmp	r4, r3
 8011736:	bf08      	it	eq
 8011738:	68ec      	ldreq	r4, [r5, #12]
 801173a:	e7ca      	b.n	80116d2 <__swbuf_r+0x1a>
 801173c:	4621      	mov	r1, r4
 801173e:	4628      	mov	r0, r5
 8011740:	f000 f80c 	bl	801175c <__swsetup_r>
 8011744:	2800      	cmp	r0, #0
 8011746:	d0cb      	beq.n	80116e0 <__swbuf_r+0x28>
 8011748:	f04f 37ff 	mov.w	r7, #4294967295
 801174c:	e7ea      	b.n	8011724 <__swbuf_r+0x6c>
 801174e:	bf00      	nop
 8011750:	08012294 	.word	0x08012294
 8011754:	080122b4 	.word	0x080122b4
 8011758:	08012274 	.word	0x08012274

0801175c <__swsetup_r>:
 801175c:	4b32      	ldr	r3, [pc, #200]	; (8011828 <__swsetup_r+0xcc>)
 801175e:	b570      	push	{r4, r5, r6, lr}
 8011760:	681d      	ldr	r5, [r3, #0]
 8011762:	4606      	mov	r6, r0
 8011764:	460c      	mov	r4, r1
 8011766:	b125      	cbz	r5, 8011772 <__swsetup_r+0x16>
 8011768:	69ab      	ldr	r3, [r5, #24]
 801176a:	b913      	cbnz	r3, 8011772 <__swsetup_r+0x16>
 801176c:	4628      	mov	r0, r5
 801176e:	f7fd f92b 	bl	800e9c8 <__sinit>
 8011772:	4b2e      	ldr	r3, [pc, #184]	; (801182c <__swsetup_r+0xd0>)
 8011774:	429c      	cmp	r4, r3
 8011776:	d10f      	bne.n	8011798 <__swsetup_r+0x3c>
 8011778:	686c      	ldr	r4, [r5, #4]
 801177a:	89a3      	ldrh	r3, [r4, #12]
 801177c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8011780:	0719      	lsls	r1, r3, #28
 8011782:	d42c      	bmi.n	80117de <__swsetup_r+0x82>
 8011784:	06dd      	lsls	r5, r3, #27
 8011786:	d411      	bmi.n	80117ac <__swsetup_r+0x50>
 8011788:	2309      	movs	r3, #9
 801178a:	6033      	str	r3, [r6, #0]
 801178c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8011790:	81a3      	strh	r3, [r4, #12]
 8011792:	f04f 30ff 	mov.w	r0, #4294967295
 8011796:	e03e      	b.n	8011816 <__swsetup_r+0xba>
 8011798:	4b25      	ldr	r3, [pc, #148]	; (8011830 <__swsetup_r+0xd4>)
 801179a:	429c      	cmp	r4, r3
 801179c:	d101      	bne.n	80117a2 <__swsetup_r+0x46>
 801179e:	68ac      	ldr	r4, [r5, #8]
 80117a0:	e7eb      	b.n	801177a <__swsetup_r+0x1e>
 80117a2:	4b24      	ldr	r3, [pc, #144]	; (8011834 <__swsetup_r+0xd8>)
 80117a4:	429c      	cmp	r4, r3
 80117a6:	bf08      	it	eq
 80117a8:	68ec      	ldreq	r4, [r5, #12]
 80117aa:	e7e6      	b.n	801177a <__swsetup_r+0x1e>
 80117ac:	0758      	lsls	r0, r3, #29
 80117ae:	d512      	bpl.n	80117d6 <__swsetup_r+0x7a>
 80117b0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80117b2:	b141      	cbz	r1, 80117c6 <__swsetup_r+0x6a>
 80117b4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80117b8:	4299      	cmp	r1, r3
 80117ba:	d002      	beq.n	80117c2 <__swsetup_r+0x66>
 80117bc:	4630      	mov	r0, r6
 80117be:	f7fd fb73 	bl	800eea8 <_free_r>
 80117c2:	2300      	movs	r3, #0
 80117c4:	6363      	str	r3, [r4, #52]	; 0x34
 80117c6:	89a3      	ldrh	r3, [r4, #12]
 80117c8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80117cc:	81a3      	strh	r3, [r4, #12]
 80117ce:	2300      	movs	r3, #0
 80117d0:	6063      	str	r3, [r4, #4]
 80117d2:	6923      	ldr	r3, [r4, #16]
 80117d4:	6023      	str	r3, [r4, #0]
 80117d6:	89a3      	ldrh	r3, [r4, #12]
 80117d8:	f043 0308 	orr.w	r3, r3, #8
 80117dc:	81a3      	strh	r3, [r4, #12]
 80117de:	6923      	ldr	r3, [r4, #16]
 80117e0:	b94b      	cbnz	r3, 80117f6 <__swsetup_r+0x9a>
 80117e2:	89a3      	ldrh	r3, [r4, #12]
 80117e4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80117e8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80117ec:	d003      	beq.n	80117f6 <__swsetup_r+0x9a>
 80117ee:	4621      	mov	r1, r4
 80117f0:	4630      	mov	r0, r6
 80117f2:	f7fd fb03 	bl	800edfc <__smakebuf_r>
 80117f6:	89a0      	ldrh	r0, [r4, #12]
 80117f8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80117fc:	f010 0301 	ands.w	r3, r0, #1
 8011800:	d00a      	beq.n	8011818 <__swsetup_r+0xbc>
 8011802:	2300      	movs	r3, #0
 8011804:	60a3      	str	r3, [r4, #8]
 8011806:	6963      	ldr	r3, [r4, #20]
 8011808:	425b      	negs	r3, r3
 801180a:	61a3      	str	r3, [r4, #24]
 801180c:	6923      	ldr	r3, [r4, #16]
 801180e:	b943      	cbnz	r3, 8011822 <__swsetup_r+0xc6>
 8011810:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8011814:	d1ba      	bne.n	801178c <__swsetup_r+0x30>
 8011816:	bd70      	pop	{r4, r5, r6, pc}
 8011818:	0781      	lsls	r1, r0, #30
 801181a:	bf58      	it	pl
 801181c:	6963      	ldrpl	r3, [r4, #20]
 801181e:	60a3      	str	r3, [r4, #8]
 8011820:	e7f4      	b.n	801180c <__swsetup_r+0xb0>
 8011822:	2000      	movs	r0, #0
 8011824:	e7f7      	b.n	8011816 <__swsetup_r+0xba>
 8011826:	bf00      	nop
 8011828:	24000088 	.word	0x24000088
 801182c:	08012294 	.word	0x08012294
 8011830:	080122b4 	.word	0x080122b4
 8011834:	08012274 	.word	0x08012274

08011838 <abort>:
 8011838:	b508      	push	{r3, lr}
 801183a:	2006      	movs	r0, #6
 801183c:	f000 f82c 	bl	8011898 <raise>
 8011840:	2001      	movs	r0, #1
 8011842:	f7f2 f987 	bl	8003b54 <_exit>

08011846 <_raise_r>:
 8011846:	291f      	cmp	r1, #31
 8011848:	b538      	push	{r3, r4, r5, lr}
 801184a:	4604      	mov	r4, r0
 801184c:	460d      	mov	r5, r1
 801184e:	d904      	bls.n	801185a <_raise_r+0x14>
 8011850:	2316      	movs	r3, #22
 8011852:	6003      	str	r3, [r0, #0]
 8011854:	f04f 30ff 	mov.w	r0, #4294967295
 8011858:	bd38      	pop	{r3, r4, r5, pc}
 801185a:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801185c:	b112      	cbz	r2, 8011864 <_raise_r+0x1e>
 801185e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8011862:	b94b      	cbnz	r3, 8011878 <_raise_r+0x32>
 8011864:	4620      	mov	r0, r4
 8011866:	f000 f831 	bl	80118cc <_getpid_r>
 801186a:	462a      	mov	r2, r5
 801186c:	4601      	mov	r1, r0
 801186e:	4620      	mov	r0, r4
 8011870:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011874:	f000 b818 	b.w	80118a8 <_kill_r>
 8011878:	2b01      	cmp	r3, #1
 801187a:	d00a      	beq.n	8011892 <_raise_r+0x4c>
 801187c:	1c59      	adds	r1, r3, #1
 801187e:	d103      	bne.n	8011888 <_raise_r+0x42>
 8011880:	2316      	movs	r3, #22
 8011882:	6003      	str	r3, [r0, #0]
 8011884:	2001      	movs	r0, #1
 8011886:	e7e7      	b.n	8011858 <_raise_r+0x12>
 8011888:	2400      	movs	r4, #0
 801188a:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801188e:	4628      	mov	r0, r5
 8011890:	4798      	blx	r3
 8011892:	2000      	movs	r0, #0
 8011894:	e7e0      	b.n	8011858 <_raise_r+0x12>
	...

08011898 <raise>:
 8011898:	4b02      	ldr	r3, [pc, #8]	; (80118a4 <raise+0xc>)
 801189a:	4601      	mov	r1, r0
 801189c:	6818      	ldr	r0, [r3, #0]
 801189e:	f7ff bfd2 	b.w	8011846 <_raise_r>
 80118a2:	bf00      	nop
 80118a4:	24000088 	.word	0x24000088

080118a8 <_kill_r>:
 80118a8:	b538      	push	{r3, r4, r5, lr}
 80118aa:	4d07      	ldr	r5, [pc, #28]	; (80118c8 <_kill_r+0x20>)
 80118ac:	2300      	movs	r3, #0
 80118ae:	4604      	mov	r4, r0
 80118b0:	4608      	mov	r0, r1
 80118b2:	4611      	mov	r1, r2
 80118b4:	602b      	str	r3, [r5, #0]
 80118b6:	f7f2 f93d 	bl	8003b34 <_kill>
 80118ba:	1c43      	adds	r3, r0, #1
 80118bc:	d102      	bne.n	80118c4 <_kill_r+0x1c>
 80118be:	682b      	ldr	r3, [r5, #0]
 80118c0:	b103      	cbz	r3, 80118c4 <_kill_r+0x1c>
 80118c2:	6023      	str	r3, [r4, #0]
 80118c4:	bd38      	pop	{r3, r4, r5, pc}
 80118c6:	bf00      	nop
 80118c8:	24000aa0 	.word	0x24000aa0

080118cc <_getpid_r>:
 80118cc:	f7f2 b92a 	b.w	8003b24 <_getpid>

080118d0 <checkint>:
 80118d0:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80118d4:	f240 33fe 	movw	r3, #1022	; 0x3fe
 80118d8:	429a      	cmp	r2, r3
 80118da:	b570      	push	{r4, r5, r6, lr}
 80118dc:	dd2a      	ble.n	8011934 <checkint+0x64>
 80118de:	f240 4333 	movw	r3, #1075	; 0x433
 80118e2:	429a      	cmp	r2, r3
 80118e4:	dc24      	bgt.n	8011930 <checkint+0x60>
 80118e6:	1a9b      	subs	r3, r3, r2
 80118e8:	f1a3 0620 	sub.w	r6, r3, #32
 80118ec:	f04f 32ff 	mov.w	r2, #4294967295
 80118f0:	fa02 f403 	lsl.w	r4, r2, r3
 80118f4:	fa02 f606 	lsl.w	r6, r2, r6
 80118f8:	f1c3 0520 	rsb	r5, r3, #32
 80118fc:	fa22 f505 	lsr.w	r5, r2, r5
 8011900:	4334      	orrs	r4, r6
 8011902:	432c      	orrs	r4, r5
 8011904:	409a      	lsls	r2, r3
 8011906:	ea20 0202 	bic.w	r2, r0, r2
 801190a:	ea21 0404 	bic.w	r4, r1, r4
 801190e:	4322      	orrs	r2, r4
 8011910:	f1a3 0420 	sub.w	r4, r3, #32
 8011914:	f1c3 0220 	rsb	r2, r3, #32
 8011918:	d10c      	bne.n	8011934 <checkint+0x64>
 801191a:	40d8      	lsrs	r0, r3
 801191c:	fa01 f302 	lsl.w	r3, r1, r2
 8011920:	4318      	orrs	r0, r3
 8011922:	40e1      	lsrs	r1, r4
 8011924:	4308      	orrs	r0, r1
 8011926:	f000 0001 	and.w	r0, r0, #1
 801192a:	f1d0 0002 	rsbs	r0, r0, #2
 801192e:	bd70      	pop	{r4, r5, r6, pc}
 8011930:	2002      	movs	r0, #2
 8011932:	e7fc      	b.n	801192e <checkint+0x5e>
 8011934:	2000      	movs	r0, #0
 8011936:	e7fa      	b.n	801192e <checkint+0x5e>

08011938 <pow>:
 8011938:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801193c:	ee10 4a90 	vmov	r4, s1
 8011940:	ed2d 8b0a 	vpush	{d8-d12}
 8011944:	ea4f 5a14 	mov.w	sl, r4, lsr #20
 8011948:	ee11 7a90 	vmov	r7, s3
 801194c:	f10a 32ff 	add.w	r2, sl, #4294967295
 8011950:	f240 73fd 	movw	r3, #2045	; 0x7fd
 8011954:	429a      	cmp	r2, r3
 8011956:	ee10 6a10 	vmov	r6, s0
 801195a:	ee11 0a10 	vmov	r0, s2
 801195e:	b086      	sub	sp, #24
 8011960:	46d4      	mov	ip, sl
 8011962:	ea4f 5517 	mov.w	r5, r7, lsr #20
 8011966:	d806      	bhi.n	8011976 <pow+0x3e>
 8011968:	f3c5 030a 	ubfx	r3, r5, #0, #11
 801196c:	f2a3 33be 	subw	r3, r3, #958	; 0x3be
 8011970:	2b7f      	cmp	r3, #127	; 0x7f
 8011972:	f240 8156 	bls.w	8011c22 <pow+0x2ea>
 8011976:	1802      	adds	r2, r0, r0
 8011978:	eb47 0107 	adc.w	r1, r7, r7
 801197c:	f06f 0e01 	mvn.w	lr, #1
 8011980:	f112 39ff 	adds.w	r9, r2, #4294967295
 8011984:	f141 38ff 	adc.w	r8, r1, #4294967295
 8011988:	f46f 1300 	mvn.w	r3, #2097152	; 0x200000
 801198c:	45ce      	cmp	lr, r9
 801198e:	eb73 0808 	sbcs.w	r8, r3, r8
 8011992:	d23f      	bcs.n	8011a14 <pow+0xdc>
 8011994:	ea52 0301 	orrs.w	r3, r2, r1
 8011998:	f04f 0300 	mov.w	r3, #0
 801199c:	d10c      	bne.n	80119b8 <pow+0x80>
 801199e:	19b6      	adds	r6, r6, r6
 80119a0:	f484 2400 	eor.w	r4, r4, #524288	; 0x80000
 80119a4:	4164      	adcs	r4, r4
 80119a6:	42b3      	cmp	r3, r6
 80119a8:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80119ac:	41a3      	sbcs	r3, r4
 80119ae:	f0c0 808c 	bcc.w	8011aca <pow+0x192>
 80119b2:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 80119b6:	e028      	b.n	8011a0a <pow+0xd2>
 80119b8:	4da3      	ldr	r5, [pc, #652]	; (8011c48 <pow+0x310>)
 80119ba:	42ac      	cmp	r4, r5
 80119bc:	bf08      	it	eq
 80119be:	429e      	cmpeq	r6, r3
 80119c0:	d107      	bne.n	80119d2 <pow+0x9a>
 80119c2:	1800      	adds	r0, r0, r0
 80119c4:	f487 2700 	eor.w	r7, r7, #524288	; 0x80000
 80119c8:	417f      	adcs	r7, r7
 80119ca:	4283      	cmp	r3, r0
 80119cc:	4b9f      	ldr	r3, [pc, #636]	; (8011c4c <pow+0x314>)
 80119ce:	41bb      	sbcs	r3, r7
 80119d0:	e7ed      	b.n	80119ae <pow+0x76>
 80119d2:	19b6      	adds	r6, r6, r6
 80119d4:	489e      	ldr	r0, [pc, #632]	; (8011c50 <pow+0x318>)
 80119d6:	4164      	adcs	r4, r4
 80119d8:	42b3      	cmp	r3, r6
 80119da:	eb70 0504 	sbcs.w	r5, r0, r4
 80119de:	d374      	bcc.n	8011aca <pow+0x192>
 80119e0:	4281      	cmp	r1, r0
 80119e2:	bf08      	it	eq
 80119e4:	429a      	cmpeq	r2, r3
 80119e6:	d170      	bne.n	8011aca <pow+0x192>
 80119e8:	4a9a      	ldr	r2, [pc, #616]	; (8011c54 <pow+0x31c>)
 80119ea:	4294      	cmp	r4, r2
 80119ec:	bf08      	it	eq
 80119ee:	429e      	cmpeq	r6, r3
 80119f0:	d0df      	beq.n	80119b2 <pow+0x7a>
 80119f2:	4294      	cmp	r4, r2
 80119f4:	ea6f 0707 	mvn.w	r7, r7
 80119f8:	bf34      	ite	cc
 80119fa:	2400      	movcc	r4, #0
 80119fc:	2401      	movcs	r4, #1
 80119fe:	0fff      	lsrs	r7, r7, #31
 8011a00:	42bc      	cmp	r4, r7
 8011a02:	f040 81d9 	bne.w	8011db8 <pow+0x480>
 8011a06:	ee21 0b01 	vmul.f64	d0, d1, d1
 8011a0a:	b006      	add	sp, #24
 8011a0c:	ecbd 8b0a 	vpop	{d8-d12}
 8011a10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011a14:	eb16 0806 	adds.w	r8, r6, r6
 8011a18:	eb44 0904 	adc.w	r9, r4, r4
 8011a1c:	f118 31ff 	adds.w	r1, r8, #4294967295
 8011a20:	f169 0200 	sbc.w	r2, r9, #0
 8011a24:	458e      	cmp	lr, r1
 8011a26:	4193      	sbcs	r3, r2
 8011a28:	d223      	bcs.n	8011a72 <pow+0x13a>
 8011a2a:	ee20 0b00 	vmul.f64	d0, d0, d0
 8011a2e:	2c00      	cmp	r4, #0
 8011a30:	da12      	bge.n	8011a58 <pow+0x120>
 8011a32:	4639      	mov	r1, r7
 8011a34:	f7ff ff4c 	bl	80118d0 <checkint>
 8011a38:	2801      	cmp	r0, #1
 8011a3a:	d10d      	bne.n	8011a58 <pow+0x120>
 8011a3c:	eeb1 0b40 	vneg.f64	d0, d0
 8011a40:	ea58 0309 	orrs.w	r3, r8, r9
 8011a44:	d10a      	bne.n	8011a5c <pow+0x124>
 8011a46:	2f00      	cmp	r7, #0
 8011a48:	dadf      	bge.n	8011a0a <pow+0xd2>
 8011a4a:	b006      	add	sp, #24
 8011a4c:	ecbd 8b0a 	vpop	{d8-d12}
 8011a50:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011a54:	f000 bb50 	b.w	80120f8 <__math_divzero>
 8011a58:	2000      	movs	r0, #0
 8011a5a:	e7f1      	b.n	8011a40 <pow+0x108>
 8011a5c:	2f00      	cmp	r7, #0
 8011a5e:	dad4      	bge.n	8011a0a <pow+0xd2>
 8011a60:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8011a64:	ee86 7b00 	vdiv.f64	d7, d6, d0
 8011a68:	ed8d 7b00 	vstr	d7, [sp]
 8011a6c:	ed9d 0b00 	vldr	d0, [sp]
 8011a70:	e7cb      	b.n	8011a0a <pow+0xd2>
 8011a72:	2c00      	cmp	r4, #0
 8011a74:	da2c      	bge.n	8011ad0 <pow+0x198>
 8011a76:	4639      	mov	r1, r7
 8011a78:	f7ff ff2a 	bl	80118d0 <checkint>
 8011a7c:	b930      	cbnz	r0, 8011a8c <pow+0x154>
 8011a7e:	b006      	add	sp, #24
 8011a80:	ecbd 8b0a 	vpop	{d8-d12}
 8011a84:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011a88:	f000 bb4e 	b.w	8012128 <__math_invalid>
 8011a8c:	2801      	cmp	r0, #1
 8011a8e:	bf14      	ite	ne
 8011a90:	2000      	movne	r0, #0
 8011a92:	f44f 2080 	moveq.w	r0, #262144	; 0x40000
 8011a96:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 8011a9a:	f3ca 0c0a 	ubfx	ip, sl, #0, #11
 8011a9e:	f3c5 020a 	ubfx	r2, r5, #0, #11
 8011aa2:	f2a2 33be 	subw	r3, r2, #958	; 0x3be
 8011aa6:	2b7f      	cmp	r3, #127	; 0x7f
 8011aa8:	d92d      	bls.n	8011b06 <pow+0x1ce>
 8011aaa:	4b67      	ldr	r3, [pc, #412]	; (8011c48 <pow+0x310>)
 8011aac:	2000      	movs	r0, #0
 8011aae:	429c      	cmp	r4, r3
 8011ab0:	bf08      	it	eq
 8011ab2:	4286      	cmpeq	r6, r0
 8011ab4:	f43f af7d 	beq.w	80119b2 <pow+0x7a>
 8011ab8:	f240 31bd 	movw	r1, #957	; 0x3bd
 8011abc:	428a      	cmp	r2, r1
 8011abe:	d80c      	bhi.n	8011ada <pow+0x1a2>
 8011ac0:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 8011ac4:	42b0      	cmp	r0, r6
 8011ac6:	41a3      	sbcs	r3, r4
 8011ac8:	d204      	bcs.n	8011ad4 <pow+0x19c>
 8011aca:	ee31 0b00 	vadd.f64	d0, d1, d0
 8011ace:	e79c      	b.n	8011a0a <pow+0xd2>
 8011ad0:	2000      	movs	r0, #0
 8011ad2:	e7e4      	b.n	8011a9e <pow+0x166>
 8011ad4:	ee30 0b41 	vsub.f64	d0, d0, d1
 8011ad8:	e797      	b.n	8011a0a <pow+0xd2>
 8011ada:	2e01      	cmp	r6, #1
 8011adc:	eb74 0303 	sbcs.w	r3, r4, r3
 8011ae0:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8011ae4:	bf34      	ite	cc
 8011ae6:	2301      	movcc	r3, #1
 8011ae8:	2300      	movcs	r3, #0
 8011aea:	4295      	cmp	r5, r2
 8011aec:	bf8c      	ite	hi
 8011aee:	2500      	movhi	r5, #0
 8011af0:	2501      	movls	r5, #1
 8011af2:	42ab      	cmp	r3, r5
 8011af4:	f000 809d 	beq.w	8011c32 <pow+0x2fa>
 8011af8:	b006      	add	sp, #24
 8011afa:	ecbd 8b0a 	vpop	{d8-d12}
 8011afe:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011b02:	f000 baf1 	b.w	80120e8 <__math_oflow>
 8011b06:	f1bc 0f00 	cmp.w	ip, #0
 8011b0a:	d10b      	bne.n	8011b24 <pow+0x1ec>
 8011b0c:	ed9f 7b4c 	vldr	d7, [pc, #304]	; 8011c40 <pow+0x308>
 8011b10:	ee20 7b07 	vmul.f64	d7, d0, d7
 8011b14:	ec53 2b17 	vmov	r2, r3, d7
 8011b18:	ee17 6a10 	vmov	r6, s14
 8011b1c:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 8011b20:	f1a4 7450 	sub.w	r4, r4, #54525952	; 0x3400000
 8011b24:	4b4c      	ldr	r3, [pc, #304]	; (8011c58 <pow+0x320>)
 8011b26:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 8011b2a:	4423      	add	r3, r4
 8011b2c:	f3c3 3246 	ubfx	r2, r3, #13, #7
 8011b30:	1519      	asrs	r1, r3, #20
 8011b32:	0d1b      	lsrs	r3, r3, #20
 8011b34:	051b      	lsls	r3, r3, #20
 8011b36:	eba4 0903 	sub.w	r9, r4, r3
 8011b3a:	4b48      	ldr	r3, [pc, #288]	; (8011c5c <pow+0x324>)
 8011b3c:	ee04 1a10 	vmov	s8, r1
 8011b40:	eb03 1142 	add.w	r1, r3, r2, lsl #5
 8011b44:	f1b6 0800 	subs.w	r8, r6, #0
 8011b48:	ed91 7b12 	vldr	d7, [r1, #72]	; 0x48
 8011b4c:	ec49 8b15 	vmov	d5, r8, r9
 8011b50:	ed91 2b16 	vldr	d2, [r1, #88]	; 0x58
 8011b54:	eea5 6b07 	vfma.f64	d6, d5, d7
 8011b58:	ed93 7b00 	vldr	d7, [r3]
 8011b5c:	ed93 5b02 	vldr	d5, [r3, #8]
 8011b60:	eeb8 4bc4 	vcvt.f64.s32	d4, s8
 8011b64:	eea4 2b07 	vfma.f64	d2, d4, d7
 8011b68:	ed91 7b18 	vldr	d7, [r1, #96]	; 0x60
 8011b6c:	ee36 ab02 	vadd.f64	d10, d6, d2
 8011b70:	ee32 2b4a 	vsub.f64	d2, d2, d10
 8011b74:	eea4 7b05 	vfma.f64	d7, d4, d5
 8011b78:	ed93 5b04 	vldr	d5, [r3, #16]
 8011b7c:	ee32 2b06 	vadd.f64	d2, d2, d6
 8011b80:	ee37 7b02 	vadd.f64	d7, d7, d2
 8011b84:	ee26 5b05 	vmul.f64	d5, d6, d5
 8011b88:	ed93 4b08 	vldr	d4, [r3, #32]
 8011b8c:	ee26 0b05 	vmul.f64	d0, d6, d5
 8011b90:	eeb0 9b40 	vmov.f64	d9, d0
 8011b94:	ee95 9b06 	vfnms.f64	d9, d5, d6
 8011b98:	ed93 5b06 	vldr	d5, [r3, #24]
 8011b9c:	ee3a 8b00 	vadd.f64	d8, d10, d0
 8011ba0:	ee26 bb00 	vmul.f64	d11, d6, d0
 8011ba4:	ed93 3b0c 	vldr	d3, [r3, #48]	; 0x30
 8011ba8:	eea6 5b04 	vfma.f64	d5, d6, d4
 8011bac:	ee3a ab48 	vsub.f64	d10, d10, d8
 8011bb0:	ed93 4b0a 	vldr	d4, [r3, #40]	; 0x28
 8011bb4:	ee37 9b09 	vadd.f64	d9, d7, d9
 8011bb8:	ee3a ab00 	vadd.f64	d10, d10, d0
 8011bbc:	eea6 4b03 	vfma.f64	d4, d6, d3
 8011bc0:	ed93 cb10 	vldr	d12, [r3, #64]	; 0x40
 8011bc4:	ee39 ab0a 	vadd.f64	d10, d9, d10
 8011bc8:	ed93 3b0e 	vldr	d3, [r3, #56]	; 0x38
 8011bcc:	eea6 3b0c 	vfma.f64	d3, d6, d12
 8011bd0:	eea0 4b03 	vfma.f64	d4, d0, d3
 8011bd4:	eea0 5b04 	vfma.f64	d5, d0, d4
 8011bd8:	eeab ab05 	vfma.f64	d10, d11, d5
 8011bdc:	ee38 6b0a 	vadd.f64	d6, d8, d10
 8011be0:	ee21 7b06 	vmul.f64	d7, d1, d6
 8011be4:	ee17 3a90 	vmov	r3, s15
 8011be8:	eeb0 5b47 	vmov.f64	d5, d7
 8011bec:	f3c3 560a 	ubfx	r6, r3, #20, #11
 8011bf0:	f46f 7272 	mvn.w	r2, #968	; 0x3c8
 8011bf4:	18b2      	adds	r2, r6, r2
 8011bf6:	2a3e      	cmp	r2, #62	; 0x3e
 8011bf8:	ee91 5b06 	vfnms.f64	d5, d1, d6
 8011bfc:	ee38 8b46 	vsub.f64	d8, d8, d6
 8011c00:	ee38 ab0a 	vadd.f64	d10, d8, d10
 8011c04:	eea1 5b0a 	vfma.f64	d5, d1, d10
 8011c08:	d92b      	bls.n	8011c62 <pow+0x32a>
 8011c0a:	2a00      	cmp	r2, #0
 8011c0c:	da0b      	bge.n	8011c26 <pow+0x2ee>
 8011c0e:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 8011c12:	ee37 0b00 	vadd.f64	d0, d7, d0
 8011c16:	2800      	cmp	r0, #0
 8011c18:	f43f aef7 	beq.w	8011a0a <pow+0xd2>
 8011c1c:	eeb1 0b40 	vneg.f64	d0, d0
 8011c20:	e6f3      	b.n	8011a0a <pow+0xd2>
 8011c22:	2000      	movs	r0, #0
 8011c24:	e77e      	b.n	8011b24 <pow+0x1ec>
 8011c26:	f5b6 6f81 	cmp.w	r6, #1032	; 0x408
 8011c2a:	d919      	bls.n	8011c60 <pow+0x328>
 8011c2c:	2b00      	cmp	r3, #0
 8011c2e:	f6bf af63 	bge.w	8011af8 <pow+0x1c0>
 8011c32:	b006      	add	sp, #24
 8011c34:	ecbd 8b0a 	vpop	{d8-d12}
 8011c38:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011c3c:	f000 ba4c 	b.w	80120d8 <__math_uflow>
 8011c40:	00000000 	.word	0x00000000
 8011c44:	43300000 	.word	0x43300000
 8011c48:	3ff00000 	.word	0x3ff00000
 8011c4c:	fff00000 	.word	0xfff00000
 8011c50:	ffe00000 	.word	0xffe00000
 8011c54:	7fe00000 	.word	0x7fe00000
 8011c58:	c0196aab 	.word	0xc0196aab
 8011c5c:	080126a8 	.word	0x080126a8
 8011c60:	2600      	movs	r6, #0
 8011c62:	495d      	ldr	r1, [pc, #372]	; (8011dd8 <pow+0x4a0>)
 8011c64:	ed91 4b02 	vldr	d4, [r1, #8]
 8011c68:	ed91 3b00 	vldr	d3, [r1]
 8011c6c:	eeb0 6b44 	vmov.f64	d6, d4
 8011c70:	eea7 6b03 	vfma.f64	d6, d7, d3
 8011c74:	ee16 5a10 	vmov	r5, s12
 8011c78:	ee36 6b44 	vsub.f64	d6, d6, d4
 8011c7c:	ed91 4b04 	vldr	d4, [r1, #16]
 8011c80:	f005 037f 	and.w	r3, r5, #127	; 0x7f
 8011c84:	eea6 7b04 	vfma.f64	d7, d6, d4
 8011c88:	eeb0 0b47 	vmov.f64	d0, d7
 8011c8c:	ed91 7b06 	vldr	d7, [r1, #24]
 8011c90:	18dc      	adds	r4, r3, r3
 8011c92:	f104 030f 	add.w	r3, r4, #15
 8011c96:	eb01 04c4 	add.w	r4, r1, r4, lsl #3
 8011c9a:	eea6 0b07 	vfma.f64	d0, d6, d7
 8011c9e:	ed91 4b0a 	vldr	d4, [r1, #40]	; 0x28
 8011ca2:	ee35 0b00 	vadd.f64	d0, d5, d0
 8011ca6:	ee20 6b00 	vmul.f64	d6, d0, d0
 8011caa:	ed94 7b1c 	vldr	d7, [r4, #112]	; 0x70
 8011cae:	ed91 5b08 	vldr	d5, [r1, #32]
 8011cb2:	ee30 7b07 	vadd.f64	d7, d0, d7
 8011cb6:	eb01 02c3 	add.w	r2, r1, r3, lsl #3
 8011cba:	eea0 5b04 	vfma.f64	d5, d0, d4
 8011cbe:	ed91 4b0e 	vldr	d4, [r1, #56]	; 0x38
 8011cc2:	eea6 7b05 	vfma.f64	d7, d6, d5
 8011cc6:	ee26 6b06 	vmul.f64	d6, d6, d6
 8011cca:	ed91 5b0c 	vldr	d5, [r1, #48]	; 0x30
 8011cce:	f851 c033 	ldr.w	ip, [r1, r3, lsl #3]
 8011cd2:	f8d2 e004 	ldr.w	lr, [r2, #4]
 8011cd6:	eea0 5b04 	vfma.f64	d5, d0, d4
 8011cda:	1940      	adds	r0, r0, r5
 8011cdc:	2700      	movs	r7, #0
 8011cde:	eb17 020c 	adds.w	r2, r7, ip
 8011ce2:	eb0e 3340 	add.w	r3, lr, r0, lsl #13
 8011ce6:	eea6 7b05 	vfma.f64	d7, d6, d5
 8011cea:	2e00      	cmp	r6, #0
 8011cec:	d15f      	bne.n	8011dae <pow+0x476>
 8011cee:	42bd      	cmp	r5, r7
 8011cf0:	db13      	blt.n	8011d1a <pow+0x3e2>
 8011cf2:	f103 4140 	add.w	r1, r3, #3221225472	; 0xc0000000
 8011cf6:	f501 0170 	add.w	r1, r1, #15728640	; 0xf00000
 8011cfa:	4610      	mov	r0, r2
 8011cfc:	ec41 0b10 	vmov	d0, r0, r1
 8011d00:	eea7 0b00 	vfma.f64	d0, d7, d0
 8011d04:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 8011dc0 <pow+0x488>
 8011d08:	ee20 0b07 	vmul.f64	d0, d0, d7
 8011d0c:	b006      	add	sp, #24
 8011d0e:	ecbd 8b0a 	vpop	{d8-d12}
 8011d12:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011d16:	f000 ba1f 	b.w	8012158 <__math_check_oflow>
 8011d1a:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
 8011d1e:	f501 1100 	add.w	r1, r1, #2097152	; 0x200000
 8011d22:	4610      	mov	r0, r2
 8011d24:	ec41 0b15 	vmov	d5, r0, r1
 8011d28:	eeb7 4b00 	vmov.f64	d4, #112	; 0x3f800000  1.0
 8011d2c:	ee27 6b05 	vmul.f64	d6, d7, d5
 8011d30:	ee35 7b06 	vadd.f64	d7, d5, d6
 8011d34:	eeb0 3bc7 	vabs.f64	d3, d7
 8011d38:	eeb4 3bc4 	vcmpe.f64	d3, d4
 8011d3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011d40:	ed9f 0b21 	vldr	d0, [pc, #132]	; 8011dc8 <pow+0x490>
 8011d44:	d52a      	bpl.n	8011d9c <pow+0x464>
 8011d46:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8011d4a:	ee35 5b47 	vsub.f64	d5, d5, d7
 8011d4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011d52:	eebf 3b00 	vmov.f64	d3, #240	; 0xbf800000 -1.0
 8011d56:	ee35 6b06 	vadd.f64	d6, d5, d6
 8011d5a:	bf48      	it	mi
 8011d5c:	eeb0 4b43 	vmovmi.f64	d4, d3
 8011d60:	ee37 3b04 	vadd.f64	d3, d7, d4
 8011d64:	ee34 5b43 	vsub.f64	d5, d4, d3
 8011d68:	ee35 7b07 	vadd.f64	d7, d5, d7
 8011d6c:	ee37 7b06 	vadd.f64	d7, d7, d6
 8011d70:	ee37 7b03 	vadd.f64	d7, d7, d3
 8011d74:	ee37 7b44 	vsub.f64	d7, d7, d4
 8011d78:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8011d7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011d80:	d104      	bne.n	8011d8c <pow+0x454>
 8011d82:	4632      	mov	r2, r6
 8011d84:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 8011d88:	ec43 2b17 	vmov	d7, r2, r3
 8011d8c:	ed8d 0b02 	vstr	d0, [sp, #8]
 8011d90:	ed9d 6b02 	vldr	d6, [sp, #8]
 8011d94:	ee26 6b00 	vmul.f64	d6, d6, d0
 8011d98:	ed8d 6b04 	vstr	d6, [sp, #16]
 8011d9c:	ee27 0b00 	vmul.f64	d0, d7, d0
 8011da0:	b006      	add	sp, #24
 8011da2:	ecbd 8b0a 	vpop	{d8-d12}
 8011da6:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011daa:	f000 b9cc 	b.w	8012146 <__math_check_uflow>
 8011dae:	ec43 2b10 	vmov	d0, r2, r3
 8011db2:	eea7 0b00 	vfma.f64	d0, d7, d0
 8011db6:	e628      	b.n	8011a0a <pow+0xd2>
 8011db8:	ed9f 0b05 	vldr	d0, [pc, #20]	; 8011dd0 <pow+0x498>
 8011dbc:	e625      	b.n	8011a0a <pow+0xd2>
 8011dbe:	bf00      	nop
 8011dc0:	00000000 	.word	0x00000000
 8011dc4:	7f000000 	.word	0x7f000000
 8011dc8:	00000000 	.word	0x00000000
 8011dcc:	00100000 	.word	0x00100000
	...
 8011dd8:	080136f0 	.word	0x080136f0

08011ddc <asin>:
 8011ddc:	b508      	push	{r3, lr}
 8011dde:	ed2d 8b04 	vpush	{d8-d9}
 8011de2:	eeb0 8b40 	vmov.f64	d8, d0
 8011de6:	f000 f847 	bl	8011e78 <__ieee754_asin>
 8011dea:	eeb4 8b48 	vcmp.f64	d8, d8
 8011dee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011df2:	eeb0 9b40 	vmov.f64	d9, d0
 8011df6:	d615      	bvs.n	8011e24 <asin+0x48>
 8011df8:	eeb0 0b48 	vmov.f64	d0, d8
 8011dfc:	f000 f9c0 	bl	8012180 <fabs>
 8011e00:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 8011e04:	eeb4 0bc7 	vcmpe.f64	d0, d7
 8011e08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011e0c:	dd0a      	ble.n	8011e24 <asin+0x48>
 8011e0e:	f7fc fbb1 	bl	800e574 <__errno>
 8011e12:	ecbd 8b04 	vpop	{d8-d9}
 8011e16:	2321      	movs	r3, #33	; 0x21
 8011e18:	6003      	str	r3, [r0, #0]
 8011e1a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8011e1e:	4804      	ldr	r0, [pc, #16]	; (8011e30 <asin+0x54>)
 8011e20:	f7ff b8fa 	b.w	8011018 <nan>
 8011e24:	eeb0 0b49 	vmov.f64	d0, d9
 8011e28:	ecbd 8b04 	vpop	{d8-d9}
 8011e2c:	bd08      	pop	{r3, pc}
 8011e2e:	bf00      	nop
 8011e30:	0801256f 	.word	0x0801256f
 8011e34:	00000000 	.word	0x00000000

08011e38 <sqrt>:
 8011e38:	b508      	push	{r3, lr}
 8011e3a:	ed2d 8b04 	vpush	{d8-d9}
 8011e3e:	eeb0 8b40 	vmov.f64	d8, d0
 8011e42:	f000 f927 	bl	8012094 <__ieee754_sqrt>
 8011e46:	eeb4 8b48 	vcmp.f64	d8, d8
 8011e4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011e4e:	d60c      	bvs.n	8011e6a <sqrt+0x32>
 8011e50:	ed9f 9b07 	vldr	d9, [pc, #28]	; 8011e70 <sqrt+0x38>
 8011e54:	eeb4 8bc9 	vcmpe.f64	d8, d9
 8011e58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011e5c:	d505      	bpl.n	8011e6a <sqrt+0x32>
 8011e5e:	f7fc fb89 	bl	800e574 <__errno>
 8011e62:	ee89 0b09 	vdiv.f64	d0, d9, d9
 8011e66:	2321      	movs	r3, #33	; 0x21
 8011e68:	6003      	str	r3, [r0, #0]
 8011e6a:	ecbd 8b04 	vpop	{d8-d9}
 8011e6e:	bd08      	pop	{r3, pc}
	...

08011e78 <__ieee754_asin>:
 8011e78:	b538      	push	{r3, r4, r5, lr}
 8011e7a:	ee10 5a90 	vmov	r5, s1
 8011e7e:	4b82      	ldr	r3, [pc, #520]	; (8012088 <__ieee754_asin+0x210>)
 8011e80:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 8011e84:	429c      	cmp	r4, r3
 8011e86:	ed2d 8b06 	vpush	{d8-d10}
 8011e8a:	dd19      	ble.n	8011ec0 <__ieee754_asin+0x48>
 8011e8c:	ee10 3a10 	vmov	r3, s0
 8011e90:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8011e94:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8011e98:	4323      	orrs	r3, r4
 8011e9a:	d10c      	bne.n	8011eb6 <__ieee754_asin+0x3e>
 8011e9c:	ed9f 7b5c 	vldr	d7, [pc, #368]	; 8012010 <__ieee754_asin+0x198>
 8011ea0:	ed9f 6b5d 	vldr	d6, [pc, #372]	; 8012018 <__ieee754_asin+0x1a0>
 8011ea4:	ee20 7b07 	vmul.f64	d7, d0, d7
 8011ea8:	eea0 7b06 	vfma.f64	d7, d0, d6
 8011eac:	eeb0 0b47 	vmov.f64	d0, d7
 8011eb0:	ecbd 8b06 	vpop	{d8-d10}
 8011eb4:	bd38      	pop	{r3, r4, r5, pc}
 8011eb6:	ee30 7b40 	vsub.f64	d7, d0, d0
 8011eba:	ee87 0b07 	vdiv.f64	d0, d7, d7
 8011ebe:	e7f7      	b.n	8011eb0 <__ieee754_asin+0x38>
 8011ec0:	4b72      	ldr	r3, [pc, #456]	; (801208c <__ieee754_asin+0x214>)
 8011ec2:	eeb7 9b00 	vmov.f64	d9, #112	; 0x3f800000  1.0
 8011ec6:	429c      	cmp	r4, r3
 8011ec8:	dc0b      	bgt.n	8011ee2 <__ieee754_asin+0x6a>
 8011eca:	f1b4 5f79 	cmp.w	r4, #1044381696	; 0x3e400000
 8011ece:	da52      	bge.n	8011f76 <__ieee754_asin+0xfe>
 8011ed0:	ed9f 7b53 	vldr	d7, [pc, #332]	; 8012020 <__ieee754_asin+0x1a8>
 8011ed4:	ee30 7b07 	vadd.f64	d7, d0, d7
 8011ed8:	eeb4 7bc9 	vcmpe.f64	d7, d9
 8011edc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011ee0:	dce6      	bgt.n	8011eb0 <__ieee754_asin+0x38>
 8011ee2:	eeb6 8b00 	vmov.f64	d8, #96	; 0x3f000000  0.5
 8011ee6:	f000 f94b 	bl	8012180 <fabs>
 8011eea:	ed9f 7b4f 	vldr	d7, [pc, #316]	; 8012028 <__ieee754_asin+0x1b0>
 8011eee:	ee39 0b40 	vsub.f64	d0, d9, d0
 8011ef2:	ee20 8b08 	vmul.f64	d8, d0, d8
 8011ef6:	ed9f 6b4e 	vldr	d6, [pc, #312]	; 8012030 <__ieee754_asin+0x1b8>
 8011efa:	eeb0 0b48 	vmov.f64	d0, d8
 8011efe:	eea8 6b07 	vfma.f64	d6, d8, d7
 8011f02:	ed9f 7b4d 	vldr	d7, [pc, #308]	; 8012038 <__ieee754_asin+0x1c0>
 8011f06:	eea6 7b08 	vfma.f64	d7, d6, d8
 8011f0a:	ed9f 6b4d 	vldr	d6, [pc, #308]	; 8012040 <__ieee754_asin+0x1c8>
 8011f0e:	ed9f ab4e 	vldr	d10, [pc, #312]	; 8012048 <__ieee754_asin+0x1d0>
 8011f12:	eea7 6b08 	vfma.f64	d6, d7, d8
 8011f16:	ed9f 7b4e 	vldr	d7, [pc, #312]	; 8012050 <__ieee754_asin+0x1d8>
 8011f1a:	eea6 7b08 	vfma.f64	d7, d6, d8
 8011f1e:	ed9f 6b4e 	vldr	d6, [pc, #312]	; 8012058 <__ieee754_asin+0x1e0>
 8011f22:	eea7 ab08 	vfma.f64	d10, d7, d8
 8011f26:	ee2a ab08 	vmul.f64	d10, d10, d8
 8011f2a:	ed9f 7b4d 	vldr	d7, [pc, #308]	; 8012060 <__ieee754_asin+0x1e8>
 8011f2e:	eea8 7b06 	vfma.f64	d7, d8, d6
 8011f32:	ed9f 6b4d 	vldr	d6, [pc, #308]	; 8012068 <__ieee754_asin+0x1f0>
 8011f36:	eea7 6b08 	vfma.f64	d6, d7, d8
 8011f3a:	ed9f 7b4d 	vldr	d7, [pc, #308]	; 8012070 <__ieee754_asin+0x1f8>
 8011f3e:	eea6 7b08 	vfma.f64	d7, d6, d8
 8011f42:	eea7 9b08 	vfma.f64	d9, d7, d8
 8011f46:	f000 f8a5 	bl	8012094 <__ieee754_sqrt>
 8011f4a:	ee8a 5b09 	vdiv.f64	d5, d10, d9
 8011f4e:	eeb0 4b00 	vmov.f64	d4, #0	; 0x40000000  2.0
 8011f52:	4b4f      	ldr	r3, [pc, #316]	; (8012090 <__ieee754_asin+0x218>)
 8011f54:	429c      	cmp	r4, r3
 8011f56:	dd3d      	ble.n	8011fd4 <__ieee754_asin+0x15c>
 8011f58:	eea0 0b05 	vfma.f64	d0, d0, d5
 8011f5c:	ed9f 7b46 	vldr	d7, [pc, #280]	; 8012078 <__ieee754_asin+0x200>
 8011f60:	eea0 7b04 	vfma.f64	d7, d0, d4
 8011f64:	ed9f 0b2c 	vldr	d0, [pc, #176]	; 8012018 <__ieee754_asin+0x1a0>
 8011f68:	ee30 0b47 	vsub.f64	d0, d0, d7
 8011f6c:	2d00      	cmp	r5, #0
 8011f6e:	bfd8      	it	le
 8011f70:	eeb1 0b40 	vnegle.f64	d0, d0
 8011f74:	e79c      	b.n	8011eb0 <__ieee754_asin+0x38>
 8011f76:	ed9f 5b2c 	vldr	d5, [pc, #176]	; 8012028 <__ieee754_asin+0x1b0>
 8011f7a:	ee20 7b00 	vmul.f64	d7, d0, d0
 8011f7e:	ed9f 6b2c 	vldr	d6, [pc, #176]	; 8012030 <__ieee754_asin+0x1b8>
 8011f82:	eea7 6b05 	vfma.f64	d6, d7, d5
 8011f86:	ed9f 5b2c 	vldr	d5, [pc, #176]	; 8012038 <__ieee754_asin+0x1c0>
 8011f8a:	eea6 5b07 	vfma.f64	d5, d6, d7
 8011f8e:	ed9f 6b2c 	vldr	d6, [pc, #176]	; 8012040 <__ieee754_asin+0x1c8>
 8011f92:	eea5 6b07 	vfma.f64	d6, d5, d7
 8011f96:	ed9f 5b2e 	vldr	d5, [pc, #184]	; 8012050 <__ieee754_asin+0x1d8>
 8011f9a:	eea6 5b07 	vfma.f64	d5, d6, d7
 8011f9e:	ed9f 6b2a 	vldr	d6, [pc, #168]	; 8012048 <__ieee754_asin+0x1d0>
 8011fa2:	ed9f 4b2d 	vldr	d4, [pc, #180]	; 8012058 <__ieee754_asin+0x1e0>
 8011fa6:	eea5 6b07 	vfma.f64	d6, d5, d7
 8011faa:	ee26 6b07 	vmul.f64	d6, d6, d7
 8011fae:	ed9f 5b2c 	vldr	d5, [pc, #176]	; 8012060 <__ieee754_asin+0x1e8>
 8011fb2:	eea7 5b04 	vfma.f64	d5, d7, d4
 8011fb6:	ed9f 4b2c 	vldr	d4, [pc, #176]	; 8012068 <__ieee754_asin+0x1f0>
 8011fba:	eea5 4b07 	vfma.f64	d4, d5, d7
 8011fbe:	ed9f 5b2c 	vldr	d5, [pc, #176]	; 8012070 <__ieee754_asin+0x1f8>
 8011fc2:	eea4 5b07 	vfma.f64	d5, d4, d7
 8011fc6:	eea5 9b07 	vfma.f64	d9, d5, d7
 8011fca:	ee86 7b09 	vdiv.f64	d7, d6, d9
 8011fce:	eea0 0b07 	vfma.f64	d0, d0, d7
 8011fd2:	e76d      	b.n	8011eb0 <__ieee754_asin+0x38>
 8011fd4:	ec53 2b10 	vmov	r2, r3, d0
 8011fd8:	2200      	movs	r2, #0
 8011fda:	ec43 2b16 	vmov	d6, r2, r3
 8011fde:	ee30 7b06 	vadd.f64	d7, d0, d6
 8011fe2:	eea6 8b46 	vfms.f64	d8, d6, d6
 8011fe6:	ee88 3b07 	vdiv.f64	d3, d8, d7
 8011fea:	ed9f 7b09 	vldr	d7, [pc, #36]	; 8012010 <__ieee754_asin+0x198>
 8011fee:	ee30 0b00 	vadd.f64	d0, d0, d0
 8011ff2:	eea3 7b44 	vfms.f64	d7, d3, d4
 8011ff6:	ee90 7b05 	vfnms.f64	d7, d0, d5
 8011ffa:	ed9f 5b21 	vldr	d5, [pc, #132]	; 8012080 <__ieee754_asin+0x208>
 8011ffe:	eeb0 0b45 	vmov.f64	d0, d5
 8012002:	eea6 0b44 	vfms.f64	d0, d6, d4
 8012006:	ee37 0b40 	vsub.f64	d0, d7, d0
 801200a:	ee35 0b40 	vsub.f64	d0, d5, d0
 801200e:	e7ad      	b.n	8011f6c <__ieee754_asin+0xf4>
 8012010:	33145c07 	.word	0x33145c07
 8012014:	3c91a626 	.word	0x3c91a626
 8012018:	54442d18 	.word	0x54442d18
 801201c:	3ff921fb 	.word	0x3ff921fb
 8012020:	8800759c 	.word	0x8800759c
 8012024:	7e37e43c 	.word	0x7e37e43c
 8012028:	0dfdf709 	.word	0x0dfdf709
 801202c:	3f023de1 	.word	0x3f023de1
 8012030:	7501b288 	.word	0x7501b288
 8012034:	3f49efe0 	.word	0x3f49efe0
 8012038:	b5688f3b 	.word	0xb5688f3b
 801203c:	bfa48228 	.word	0xbfa48228
 8012040:	0e884455 	.word	0x0e884455
 8012044:	3fc9c155 	.word	0x3fc9c155
 8012048:	55555555 	.word	0x55555555
 801204c:	3fc55555 	.word	0x3fc55555
 8012050:	03eb6f7d 	.word	0x03eb6f7d
 8012054:	bfd4d612 	.word	0xbfd4d612
 8012058:	b12e9282 	.word	0xb12e9282
 801205c:	3fb3b8c5 	.word	0x3fb3b8c5
 8012060:	1b8d0159 	.word	0x1b8d0159
 8012064:	bfe6066c 	.word	0xbfe6066c
 8012068:	9c598ac8 	.word	0x9c598ac8
 801206c:	40002ae5 	.word	0x40002ae5
 8012070:	1c8a2d4b 	.word	0x1c8a2d4b
 8012074:	c0033a27 	.word	0xc0033a27
 8012078:	33145c07 	.word	0x33145c07
 801207c:	bc91a626 	.word	0xbc91a626
 8012080:	54442d18 	.word	0x54442d18
 8012084:	3fe921fb 	.word	0x3fe921fb
 8012088:	3fefffff 	.word	0x3fefffff
 801208c:	3fdfffff 	.word	0x3fdfffff
 8012090:	3fef3332 	.word	0x3fef3332

08012094 <__ieee754_sqrt>:
 8012094:	eeb1 0bc0 	vsqrt.f64	d0, d0
 8012098:	4770      	bx	lr

0801209a <with_errno>:
 801209a:	b513      	push	{r0, r1, r4, lr}
 801209c:	4604      	mov	r4, r0
 801209e:	ed8d 0b00 	vstr	d0, [sp]
 80120a2:	f7fc fa67 	bl	800e574 <__errno>
 80120a6:	ed9d 0b00 	vldr	d0, [sp]
 80120aa:	6004      	str	r4, [r0, #0]
 80120ac:	b002      	add	sp, #8
 80120ae:	bd10      	pop	{r4, pc}

080120b0 <xflow>:
 80120b0:	b082      	sub	sp, #8
 80120b2:	b158      	cbz	r0, 80120cc <xflow+0x1c>
 80120b4:	eeb1 7b40 	vneg.f64	d7, d0
 80120b8:	ed8d 7b00 	vstr	d7, [sp]
 80120bc:	ed9d 7b00 	vldr	d7, [sp]
 80120c0:	2022      	movs	r0, #34	; 0x22
 80120c2:	ee20 0b07 	vmul.f64	d0, d0, d7
 80120c6:	b002      	add	sp, #8
 80120c8:	f7ff bfe7 	b.w	801209a <with_errno>
 80120cc:	eeb0 7b40 	vmov.f64	d7, d0
 80120d0:	e7f2      	b.n	80120b8 <xflow+0x8>
 80120d2:	0000      	movs	r0, r0
 80120d4:	0000      	movs	r0, r0
	...

080120d8 <__math_uflow>:
 80120d8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 80120e0 <__math_uflow+0x8>
 80120dc:	f7ff bfe8 	b.w	80120b0 <xflow>
 80120e0:	00000000 	.word	0x00000000
 80120e4:	10000000 	.word	0x10000000

080120e8 <__math_oflow>:
 80120e8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 80120f0 <__math_oflow+0x8>
 80120ec:	f7ff bfe0 	b.w	80120b0 <xflow>
 80120f0:	00000000 	.word	0x00000000
 80120f4:	70000000 	.word	0x70000000

080120f8 <__math_divzero>:
 80120f8:	b082      	sub	sp, #8
 80120fa:	2800      	cmp	r0, #0
 80120fc:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8012100:	eebf 7b00 	vmov.f64	d7, #240	; 0xbf800000 -1.0
 8012104:	fe06 7b07 	vseleq.f64	d7, d6, d7
 8012108:	ed8d 7b00 	vstr	d7, [sp]
 801210c:	ed9d 0b00 	vldr	d0, [sp]
 8012110:	ed9f 7b03 	vldr	d7, [pc, #12]	; 8012120 <__math_divzero+0x28>
 8012114:	2022      	movs	r0, #34	; 0x22
 8012116:	ee80 0b07 	vdiv.f64	d0, d0, d7
 801211a:	b002      	add	sp, #8
 801211c:	f7ff bfbd 	b.w	801209a <with_errno>
	...

08012128 <__math_invalid>:
 8012128:	eeb0 7b40 	vmov.f64	d7, d0
 801212c:	eeb4 7b47 	vcmp.f64	d7, d7
 8012130:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012134:	ee30 6b40 	vsub.f64	d6, d0, d0
 8012138:	ee86 0b06 	vdiv.f64	d0, d6, d6
 801213c:	d602      	bvs.n	8012144 <__math_invalid+0x1c>
 801213e:	2021      	movs	r0, #33	; 0x21
 8012140:	f7ff bfab 	b.w	801209a <with_errno>
 8012144:	4770      	bx	lr

08012146 <__math_check_uflow>:
 8012146:	eeb5 0b40 	vcmp.f64	d0, #0.0
 801214a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801214e:	d102      	bne.n	8012156 <__math_check_uflow+0x10>
 8012150:	2022      	movs	r0, #34	; 0x22
 8012152:	f7ff bfa2 	b.w	801209a <with_errno>
 8012156:	4770      	bx	lr

08012158 <__math_check_oflow>:
 8012158:	ed9f 6b07 	vldr	d6, [pc, #28]	; 8012178 <__math_check_oflow+0x20>
 801215c:	eeb0 7bc0 	vabs.f64	d7, d0
 8012160:	eeb4 7b46 	vcmp.f64	d7, d6
 8012164:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012168:	dd02      	ble.n	8012170 <__math_check_oflow+0x18>
 801216a:	2022      	movs	r0, #34	; 0x22
 801216c:	f7ff bf95 	b.w	801209a <with_errno>
 8012170:	4770      	bx	lr
 8012172:	bf00      	nop
 8012174:	f3af 8000 	nop.w
 8012178:	ffffffff 	.word	0xffffffff
 801217c:	7fefffff 	.word	0x7fefffff

08012180 <fabs>:
 8012180:	ec51 0b10 	vmov	r0, r1, d0
 8012184:	ee10 2a10 	vmov	r2, s0
 8012188:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801218c:	ec43 2b10 	vmov	d0, r2, r3
 8012190:	4770      	bx	lr
	...

08012194 <_init>:
 8012194:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012196:	bf00      	nop
 8012198:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801219a:	bc08      	pop	{r3}
 801219c:	469e      	mov	lr, r3
 801219e:	4770      	bx	lr

080121a0 <_fini>:
 80121a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80121a2:	bf00      	nop
 80121a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80121a6:	bc08      	pop	{r3}
 80121a8:	469e      	mov	lr, r3
 80121aa:	4770      	bx	lr
