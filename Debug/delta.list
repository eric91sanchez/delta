
delta.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00011f5c  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001db0  08012200  08012200  00022200  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08013fb0  08013fb0  00030264  2**0
                  CONTENTS
  4 .ARM          00000008  08013fb0  08013fb0  00023fb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08013fb8  08013fb8  00030264  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08013fb8  08013fb8  00023fb8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08013fbc  08013fbc  00023fbc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000264  24000000  08013fc0  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000844  24000268  08014224  00030268  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  24000aac  08014224  00030aac  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00030264  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001de26  00000000  00000000  00030292  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000036c6  00000000  00000000  0004e0b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000012d8  00000000  00000000  00051780  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001160  00000000  00000000  00052a58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00005a55  00000000  00000000  00053bb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001d61a  00000000  00000000  0005960d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00165ed9  00000000  00000000  00076c27  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001dcb00  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000062a8  00000000  00000000  001dcb50  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000268 	.word	0x24000268
 80002bc:	00000000 	.word	0x00000000
 80002c0:	080121e4 	.word	0x080121e4

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	2400026c 	.word	0x2400026c
 80002dc:	080121e4 	.word	0x080121e4

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <strlen>:
 8000380:	4603      	mov	r3, r0
 8000382:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000386:	2a00      	cmp	r2, #0
 8000388:	d1fb      	bne.n	8000382 <strlen+0x2>
 800038a:	1a18      	subs	r0, r3, r0
 800038c:	3801      	subs	r0, #1
 800038e:	4770      	bx	lr

08000390 <__aeabi_drsub>:
 8000390:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000394:	e002      	b.n	800039c <__adddf3>
 8000396:	bf00      	nop

08000398 <__aeabi_dsub>:
 8000398:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800039c <__adddf3>:
 800039c:	b530      	push	{r4, r5, lr}
 800039e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003a6:	ea94 0f05 	teq	r4, r5
 80003aa:	bf08      	it	eq
 80003ac:	ea90 0f02 	teqeq	r0, r2
 80003b0:	bf1f      	itttt	ne
 80003b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003c2:	f000 80e2 	beq.w	800058a <__adddf3+0x1ee>
 80003c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003ce:	bfb8      	it	lt
 80003d0:	426d      	neglt	r5, r5
 80003d2:	dd0c      	ble.n	80003ee <__adddf3+0x52>
 80003d4:	442c      	add	r4, r5
 80003d6:	ea80 0202 	eor.w	r2, r0, r2
 80003da:	ea81 0303 	eor.w	r3, r1, r3
 80003de:	ea82 0000 	eor.w	r0, r2, r0
 80003e2:	ea83 0101 	eor.w	r1, r3, r1
 80003e6:	ea80 0202 	eor.w	r2, r0, r2
 80003ea:	ea81 0303 	eor.w	r3, r1, r3
 80003ee:	2d36      	cmp	r5, #54	; 0x36
 80003f0:	bf88      	it	hi
 80003f2:	bd30      	pophi	{r4, r5, pc}
 80003f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80003f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80003fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000400:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000404:	d002      	beq.n	800040c <__adddf3+0x70>
 8000406:	4240      	negs	r0, r0
 8000408:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800040c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000410:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000414:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000418:	d002      	beq.n	8000420 <__adddf3+0x84>
 800041a:	4252      	negs	r2, r2
 800041c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000420:	ea94 0f05 	teq	r4, r5
 8000424:	f000 80a7 	beq.w	8000576 <__adddf3+0x1da>
 8000428:	f1a4 0401 	sub.w	r4, r4, #1
 800042c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000430:	db0d      	blt.n	800044e <__adddf3+0xb2>
 8000432:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000436:	fa22 f205 	lsr.w	r2, r2, r5
 800043a:	1880      	adds	r0, r0, r2
 800043c:	f141 0100 	adc.w	r1, r1, #0
 8000440:	fa03 f20e 	lsl.w	r2, r3, lr
 8000444:	1880      	adds	r0, r0, r2
 8000446:	fa43 f305 	asr.w	r3, r3, r5
 800044a:	4159      	adcs	r1, r3
 800044c:	e00e      	b.n	800046c <__adddf3+0xd0>
 800044e:	f1a5 0520 	sub.w	r5, r5, #32
 8000452:	f10e 0e20 	add.w	lr, lr, #32
 8000456:	2a01      	cmp	r2, #1
 8000458:	fa03 fc0e 	lsl.w	ip, r3, lr
 800045c:	bf28      	it	cs
 800045e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000462:	fa43 f305 	asr.w	r3, r3, r5
 8000466:	18c0      	adds	r0, r0, r3
 8000468:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800046c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000470:	d507      	bpl.n	8000482 <__adddf3+0xe6>
 8000472:	f04f 0e00 	mov.w	lr, #0
 8000476:	f1dc 0c00 	rsbs	ip, ip, #0
 800047a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800047e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000482:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000486:	d31b      	bcc.n	80004c0 <__adddf3+0x124>
 8000488:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800048c:	d30c      	bcc.n	80004a8 <__adddf3+0x10c>
 800048e:	0849      	lsrs	r1, r1, #1
 8000490:	ea5f 0030 	movs.w	r0, r0, rrx
 8000494:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000498:	f104 0401 	add.w	r4, r4, #1
 800049c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80004a4:	f080 809a 	bcs.w	80005dc <__adddf3+0x240>
 80004a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80004ac:	bf08      	it	eq
 80004ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004b2:	f150 0000 	adcs.w	r0, r0, #0
 80004b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004ba:	ea41 0105 	orr.w	r1, r1, r5
 80004be:	bd30      	pop	{r4, r5, pc}
 80004c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004c4:	4140      	adcs	r0, r0
 80004c6:	eb41 0101 	adc.w	r1, r1, r1
 80004ca:	3c01      	subs	r4, #1
 80004cc:	bf28      	it	cs
 80004ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80004d2:	d2e9      	bcs.n	80004a8 <__adddf3+0x10c>
 80004d4:	f091 0f00 	teq	r1, #0
 80004d8:	bf04      	itt	eq
 80004da:	4601      	moveq	r1, r0
 80004dc:	2000      	moveq	r0, #0
 80004de:	fab1 f381 	clz	r3, r1
 80004e2:	bf08      	it	eq
 80004e4:	3320      	addeq	r3, #32
 80004e6:	f1a3 030b 	sub.w	r3, r3, #11
 80004ea:	f1b3 0220 	subs.w	r2, r3, #32
 80004ee:	da0c      	bge.n	800050a <__adddf3+0x16e>
 80004f0:	320c      	adds	r2, #12
 80004f2:	dd08      	ble.n	8000506 <__adddf3+0x16a>
 80004f4:	f102 0c14 	add.w	ip, r2, #20
 80004f8:	f1c2 020c 	rsb	r2, r2, #12
 80004fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000500:	fa21 f102 	lsr.w	r1, r1, r2
 8000504:	e00c      	b.n	8000520 <__adddf3+0x184>
 8000506:	f102 0214 	add.w	r2, r2, #20
 800050a:	bfd8      	it	le
 800050c:	f1c2 0c20 	rsble	ip, r2, #32
 8000510:	fa01 f102 	lsl.w	r1, r1, r2
 8000514:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000518:	bfdc      	itt	le
 800051a:	ea41 010c 	orrle.w	r1, r1, ip
 800051e:	4090      	lslle	r0, r2
 8000520:	1ae4      	subs	r4, r4, r3
 8000522:	bfa2      	ittt	ge
 8000524:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000528:	4329      	orrge	r1, r5
 800052a:	bd30      	popge	{r4, r5, pc}
 800052c:	ea6f 0404 	mvn.w	r4, r4
 8000530:	3c1f      	subs	r4, #31
 8000532:	da1c      	bge.n	800056e <__adddf3+0x1d2>
 8000534:	340c      	adds	r4, #12
 8000536:	dc0e      	bgt.n	8000556 <__adddf3+0x1ba>
 8000538:	f104 0414 	add.w	r4, r4, #20
 800053c:	f1c4 0220 	rsb	r2, r4, #32
 8000540:	fa20 f004 	lsr.w	r0, r0, r4
 8000544:	fa01 f302 	lsl.w	r3, r1, r2
 8000548:	ea40 0003 	orr.w	r0, r0, r3
 800054c:	fa21 f304 	lsr.w	r3, r1, r4
 8000550:	ea45 0103 	orr.w	r1, r5, r3
 8000554:	bd30      	pop	{r4, r5, pc}
 8000556:	f1c4 040c 	rsb	r4, r4, #12
 800055a:	f1c4 0220 	rsb	r2, r4, #32
 800055e:	fa20 f002 	lsr.w	r0, r0, r2
 8000562:	fa01 f304 	lsl.w	r3, r1, r4
 8000566:	ea40 0003 	orr.w	r0, r0, r3
 800056a:	4629      	mov	r1, r5
 800056c:	bd30      	pop	{r4, r5, pc}
 800056e:	fa21 f004 	lsr.w	r0, r1, r4
 8000572:	4629      	mov	r1, r5
 8000574:	bd30      	pop	{r4, r5, pc}
 8000576:	f094 0f00 	teq	r4, #0
 800057a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800057e:	bf06      	itte	eq
 8000580:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000584:	3401      	addeq	r4, #1
 8000586:	3d01      	subne	r5, #1
 8000588:	e74e      	b.n	8000428 <__adddf3+0x8c>
 800058a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800058e:	bf18      	it	ne
 8000590:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000594:	d029      	beq.n	80005ea <__adddf3+0x24e>
 8000596:	ea94 0f05 	teq	r4, r5
 800059a:	bf08      	it	eq
 800059c:	ea90 0f02 	teqeq	r0, r2
 80005a0:	d005      	beq.n	80005ae <__adddf3+0x212>
 80005a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80005a6:	bf04      	itt	eq
 80005a8:	4619      	moveq	r1, r3
 80005aa:	4610      	moveq	r0, r2
 80005ac:	bd30      	pop	{r4, r5, pc}
 80005ae:	ea91 0f03 	teq	r1, r3
 80005b2:	bf1e      	ittt	ne
 80005b4:	2100      	movne	r1, #0
 80005b6:	2000      	movne	r0, #0
 80005b8:	bd30      	popne	{r4, r5, pc}
 80005ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005be:	d105      	bne.n	80005cc <__adddf3+0x230>
 80005c0:	0040      	lsls	r0, r0, #1
 80005c2:	4149      	adcs	r1, r1
 80005c4:	bf28      	it	cs
 80005c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80005ca:	bd30      	pop	{r4, r5, pc}
 80005cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80005d0:	bf3c      	itt	cc
 80005d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80005d6:	bd30      	popcc	{r4, r5, pc}
 80005d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80005e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80005e4:	f04f 0000 	mov.w	r0, #0
 80005e8:	bd30      	pop	{r4, r5, pc}
 80005ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005ee:	bf1a      	itte	ne
 80005f0:	4619      	movne	r1, r3
 80005f2:	4610      	movne	r0, r2
 80005f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80005f8:	bf1c      	itt	ne
 80005fa:	460b      	movne	r3, r1
 80005fc:	4602      	movne	r2, r0
 80005fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000602:	bf06      	itte	eq
 8000604:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000608:	ea91 0f03 	teqeq	r1, r3
 800060c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000610:	bd30      	pop	{r4, r5, pc}
 8000612:	bf00      	nop

08000614 <__aeabi_ui2d>:
 8000614:	f090 0f00 	teq	r0, #0
 8000618:	bf04      	itt	eq
 800061a:	2100      	moveq	r1, #0
 800061c:	4770      	bxeq	lr
 800061e:	b530      	push	{r4, r5, lr}
 8000620:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000624:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000628:	f04f 0500 	mov.w	r5, #0
 800062c:	f04f 0100 	mov.w	r1, #0
 8000630:	e750      	b.n	80004d4 <__adddf3+0x138>
 8000632:	bf00      	nop

08000634 <__aeabi_i2d>:
 8000634:	f090 0f00 	teq	r0, #0
 8000638:	bf04      	itt	eq
 800063a:	2100      	moveq	r1, #0
 800063c:	4770      	bxeq	lr
 800063e:	b530      	push	{r4, r5, lr}
 8000640:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000644:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000648:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800064c:	bf48      	it	mi
 800064e:	4240      	negmi	r0, r0
 8000650:	f04f 0100 	mov.w	r1, #0
 8000654:	e73e      	b.n	80004d4 <__adddf3+0x138>
 8000656:	bf00      	nop

08000658 <__aeabi_f2d>:
 8000658:	0042      	lsls	r2, r0, #1
 800065a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800065e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000662:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000666:	bf1f      	itttt	ne
 8000668:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800066c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000670:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000674:	4770      	bxne	lr
 8000676:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800067a:	bf08      	it	eq
 800067c:	4770      	bxeq	lr
 800067e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000682:	bf04      	itt	eq
 8000684:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000688:	4770      	bxeq	lr
 800068a:	b530      	push	{r4, r5, lr}
 800068c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000690:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000694:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000698:	e71c      	b.n	80004d4 <__adddf3+0x138>
 800069a:	bf00      	nop

0800069c <__aeabi_ul2d>:
 800069c:	ea50 0201 	orrs.w	r2, r0, r1
 80006a0:	bf08      	it	eq
 80006a2:	4770      	bxeq	lr
 80006a4:	b530      	push	{r4, r5, lr}
 80006a6:	f04f 0500 	mov.w	r5, #0
 80006aa:	e00a      	b.n	80006c2 <__aeabi_l2d+0x16>

080006ac <__aeabi_l2d>:
 80006ac:	ea50 0201 	orrs.w	r2, r0, r1
 80006b0:	bf08      	it	eq
 80006b2:	4770      	bxeq	lr
 80006b4:	b530      	push	{r4, r5, lr}
 80006b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80006ba:	d502      	bpl.n	80006c2 <__aeabi_l2d+0x16>
 80006bc:	4240      	negs	r0, r0
 80006be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006ce:	f43f aed8 	beq.w	8000482 <__adddf3+0xe6>
 80006d2:	f04f 0203 	mov.w	r2, #3
 80006d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006da:	bf18      	it	ne
 80006dc:	3203      	addne	r2, #3
 80006de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006e2:	bf18      	it	ne
 80006e4:	3203      	addne	r2, #3
 80006e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80006ea:	f1c2 0320 	rsb	r3, r2, #32
 80006ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80006f2:	fa20 f002 	lsr.w	r0, r0, r2
 80006f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80006fa:	ea40 000e 	orr.w	r0, r0, lr
 80006fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000702:	4414      	add	r4, r2
 8000704:	e6bd      	b.n	8000482 <__adddf3+0xe6>
 8000706:	bf00      	nop

08000708 <__aeabi_uldivmod>:
 8000708:	b953      	cbnz	r3, 8000720 <__aeabi_uldivmod+0x18>
 800070a:	b94a      	cbnz	r2, 8000720 <__aeabi_uldivmod+0x18>
 800070c:	2900      	cmp	r1, #0
 800070e:	bf08      	it	eq
 8000710:	2800      	cmpeq	r0, #0
 8000712:	bf1c      	itt	ne
 8000714:	f04f 31ff 	movne.w	r1, #4294967295
 8000718:	f04f 30ff 	movne.w	r0, #4294967295
 800071c:	f000 b9ac 	b.w	8000a78 <__aeabi_idiv0>
 8000720:	f1ad 0c08 	sub.w	ip, sp, #8
 8000724:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000728:	f000 f83e 	bl	80007a8 <__udivmoddi4>
 800072c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000730:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000734:	b004      	add	sp, #16
 8000736:	4770      	bx	lr

08000738 <__aeabi_d2lz>:
 8000738:	b508      	push	{r3, lr}
 800073a:	4602      	mov	r2, r0
 800073c:	460b      	mov	r3, r1
 800073e:	ec43 2b17 	vmov	d7, r2, r3
 8000742:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8000746:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800074a:	d403      	bmi.n	8000754 <__aeabi_d2lz+0x1c>
 800074c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8000750:	f000 b80a 	b.w	8000768 <__aeabi_d2ulz>
 8000754:	eeb1 7b47 	vneg.f64	d7, d7
 8000758:	ec51 0b17 	vmov	r0, r1, d7
 800075c:	f000 f804 	bl	8000768 <__aeabi_d2ulz>
 8000760:	4240      	negs	r0, r0
 8000762:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000766:	bd08      	pop	{r3, pc}

08000768 <__aeabi_d2ulz>:
 8000768:	ed9f 6b0b 	vldr	d6, [pc, #44]	; 8000798 <__aeabi_d2ulz+0x30>
 800076c:	ec41 0b17 	vmov	d7, r0, r1
 8000770:	ed9f 5b0b 	vldr	d5, [pc, #44]	; 80007a0 <__aeabi_d2ulz+0x38>
 8000774:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000778:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 800077c:	eeb8 4b46 	vcvt.f64.u32	d4, s12
 8000780:	eea4 7b45 	vfms.f64	d7, d4, d5
 8000784:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000788:	ee16 1a10 	vmov	r1, s12
 800078c:	ee17 0a90 	vmov	r0, s15
 8000790:	4770      	bx	lr
 8000792:	bf00      	nop
 8000794:	f3af 8000 	nop.w
 8000798:	00000000 	.word	0x00000000
 800079c:	3df00000 	.word	0x3df00000
 80007a0:	00000000 	.word	0x00000000
 80007a4:	41f00000 	.word	0x41f00000

080007a8 <__udivmoddi4>:
 80007a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80007ac:	9d08      	ldr	r5, [sp, #32]
 80007ae:	4604      	mov	r4, r0
 80007b0:	468e      	mov	lr, r1
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	d14d      	bne.n	8000852 <__udivmoddi4+0xaa>
 80007b6:	428a      	cmp	r2, r1
 80007b8:	4694      	mov	ip, r2
 80007ba:	d969      	bls.n	8000890 <__udivmoddi4+0xe8>
 80007bc:	fab2 f282 	clz	r2, r2
 80007c0:	b152      	cbz	r2, 80007d8 <__udivmoddi4+0x30>
 80007c2:	fa01 f302 	lsl.w	r3, r1, r2
 80007c6:	f1c2 0120 	rsb	r1, r2, #32
 80007ca:	fa20 f101 	lsr.w	r1, r0, r1
 80007ce:	fa0c fc02 	lsl.w	ip, ip, r2
 80007d2:	ea41 0e03 	orr.w	lr, r1, r3
 80007d6:	4094      	lsls	r4, r2
 80007d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80007dc:	0c21      	lsrs	r1, r4, #16
 80007de:	fbbe f6f8 	udiv	r6, lr, r8
 80007e2:	fa1f f78c 	uxth.w	r7, ip
 80007e6:	fb08 e316 	mls	r3, r8, r6, lr
 80007ea:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80007ee:	fb06 f107 	mul.w	r1, r6, r7
 80007f2:	4299      	cmp	r1, r3
 80007f4:	d90a      	bls.n	800080c <__udivmoddi4+0x64>
 80007f6:	eb1c 0303 	adds.w	r3, ip, r3
 80007fa:	f106 30ff 	add.w	r0, r6, #4294967295
 80007fe:	f080 811f 	bcs.w	8000a40 <__udivmoddi4+0x298>
 8000802:	4299      	cmp	r1, r3
 8000804:	f240 811c 	bls.w	8000a40 <__udivmoddi4+0x298>
 8000808:	3e02      	subs	r6, #2
 800080a:	4463      	add	r3, ip
 800080c:	1a5b      	subs	r3, r3, r1
 800080e:	b2a4      	uxth	r4, r4
 8000810:	fbb3 f0f8 	udiv	r0, r3, r8
 8000814:	fb08 3310 	mls	r3, r8, r0, r3
 8000818:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800081c:	fb00 f707 	mul.w	r7, r0, r7
 8000820:	42a7      	cmp	r7, r4
 8000822:	d90a      	bls.n	800083a <__udivmoddi4+0x92>
 8000824:	eb1c 0404 	adds.w	r4, ip, r4
 8000828:	f100 33ff 	add.w	r3, r0, #4294967295
 800082c:	f080 810a 	bcs.w	8000a44 <__udivmoddi4+0x29c>
 8000830:	42a7      	cmp	r7, r4
 8000832:	f240 8107 	bls.w	8000a44 <__udivmoddi4+0x29c>
 8000836:	4464      	add	r4, ip
 8000838:	3802      	subs	r0, #2
 800083a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800083e:	1be4      	subs	r4, r4, r7
 8000840:	2600      	movs	r6, #0
 8000842:	b11d      	cbz	r5, 800084c <__udivmoddi4+0xa4>
 8000844:	40d4      	lsrs	r4, r2
 8000846:	2300      	movs	r3, #0
 8000848:	e9c5 4300 	strd	r4, r3, [r5]
 800084c:	4631      	mov	r1, r6
 800084e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000852:	428b      	cmp	r3, r1
 8000854:	d909      	bls.n	800086a <__udivmoddi4+0xc2>
 8000856:	2d00      	cmp	r5, #0
 8000858:	f000 80ef 	beq.w	8000a3a <__udivmoddi4+0x292>
 800085c:	2600      	movs	r6, #0
 800085e:	e9c5 0100 	strd	r0, r1, [r5]
 8000862:	4630      	mov	r0, r6
 8000864:	4631      	mov	r1, r6
 8000866:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800086a:	fab3 f683 	clz	r6, r3
 800086e:	2e00      	cmp	r6, #0
 8000870:	d14a      	bne.n	8000908 <__udivmoddi4+0x160>
 8000872:	428b      	cmp	r3, r1
 8000874:	d302      	bcc.n	800087c <__udivmoddi4+0xd4>
 8000876:	4282      	cmp	r2, r0
 8000878:	f200 80f9 	bhi.w	8000a6e <__udivmoddi4+0x2c6>
 800087c:	1a84      	subs	r4, r0, r2
 800087e:	eb61 0303 	sbc.w	r3, r1, r3
 8000882:	2001      	movs	r0, #1
 8000884:	469e      	mov	lr, r3
 8000886:	2d00      	cmp	r5, #0
 8000888:	d0e0      	beq.n	800084c <__udivmoddi4+0xa4>
 800088a:	e9c5 4e00 	strd	r4, lr, [r5]
 800088e:	e7dd      	b.n	800084c <__udivmoddi4+0xa4>
 8000890:	b902      	cbnz	r2, 8000894 <__udivmoddi4+0xec>
 8000892:	deff      	udf	#255	; 0xff
 8000894:	fab2 f282 	clz	r2, r2
 8000898:	2a00      	cmp	r2, #0
 800089a:	f040 8092 	bne.w	80009c2 <__udivmoddi4+0x21a>
 800089e:	eba1 010c 	sub.w	r1, r1, ip
 80008a2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80008a6:	fa1f fe8c 	uxth.w	lr, ip
 80008aa:	2601      	movs	r6, #1
 80008ac:	0c20      	lsrs	r0, r4, #16
 80008ae:	fbb1 f3f7 	udiv	r3, r1, r7
 80008b2:	fb07 1113 	mls	r1, r7, r3, r1
 80008b6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80008ba:	fb0e f003 	mul.w	r0, lr, r3
 80008be:	4288      	cmp	r0, r1
 80008c0:	d908      	bls.n	80008d4 <__udivmoddi4+0x12c>
 80008c2:	eb1c 0101 	adds.w	r1, ip, r1
 80008c6:	f103 38ff 	add.w	r8, r3, #4294967295
 80008ca:	d202      	bcs.n	80008d2 <__udivmoddi4+0x12a>
 80008cc:	4288      	cmp	r0, r1
 80008ce:	f200 80cb 	bhi.w	8000a68 <__udivmoddi4+0x2c0>
 80008d2:	4643      	mov	r3, r8
 80008d4:	1a09      	subs	r1, r1, r0
 80008d6:	b2a4      	uxth	r4, r4
 80008d8:	fbb1 f0f7 	udiv	r0, r1, r7
 80008dc:	fb07 1110 	mls	r1, r7, r0, r1
 80008e0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80008e4:	fb0e fe00 	mul.w	lr, lr, r0
 80008e8:	45a6      	cmp	lr, r4
 80008ea:	d908      	bls.n	80008fe <__udivmoddi4+0x156>
 80008ec:	eb1c 0404 	adds.w	r4, ip, r4
 80008f0:	f100 31ff 	add.w	r1, r0, #4294967295
 80008f4:	d202      	bcs.n	80008fc <__udivmoddi4+0x154>
 80008f6:	45a6      	cmp	lr, r4
 80008f8:	f200 80bb 	bhi.w	8000a72 <__udivmoddi4+0x2ca>
 80008fc:	4608      	mov	r0, r1
 80008fe:	eba4 040e 	sub.w	r4, r4, lr
 8000902:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000906:	e79c      	b.n	8000842 <__udivmoddi4+0x9a>
 8000908:	f1c6 0720 	rsb	r7, r6, #32
 800090c:	40b3      	lsls	r3, r6
 800090e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000912:	ea4c 0c03 	orr.w	ip, ip, r3
 8000916:	fa20 f407 	lsr.w	r4, r0, r7
 800091a:	fa01 f306 	lsl.w	r3, r1, r6
 800091e:	431c      	orrs	r4, r3
 8000920:	40f9      	lsrs	r1, r7
 8000922:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000926:	fa00 f306 	lsl.w	r3, r0, r6
 800092a:	fbb1 f8f9 	udiv	r8, r1, r9
 800092e:	0c20      	lsrs	r0, r4, #16
 8000930:	fa1f fe8c 	uxth.w	lr, ip
 8000934:	fb09 1118 	mls	r1, r9, r8, r1
 8000938:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800093c:	fb08 f00e 	mul.w	r0, r8, lr
 8000940:	4288      	cmp	r0, r1
 8000942:	fa02 f206 	lsl.w	r2, r2, r6
 8000946:	d90b      	bls.n	8000960 <__udivmoddi4+0x1b8>
 8000948:	eb1c 0101 	adds.w	r1, ip, r1
 800094c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000950:	f080 8088 	bcs.w	8000a64 <__udivmoddi4+0x2bc>
 8000954:	4288      	cmp	r0, r1
 8000956:	f240 8085 	bls.w	8000a64 <__udivmoddi4+0x2bc>
 800095a:	f1a8 0802 	sub.w	r8, r8, #2
 800095e:	4461      	add	r1, ip
 8000960:	1a09      	subs	r1, r1, r0
 8000962:	b2a4      	uxth	r4, r4
 8000964:	fbb1 f0f9 	udiv	r0, r1, r9
 8000968:	fb09 1110 	mls	r1, r9, r0, r1
 800096c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000970:	fb00 fe0e 	mul.w	lr, r0, lr
 8000974:	458e      	cmp	lr, r1
 8000976:	d908      	bls.n	800098a <__udivmoddi4+0x1e2>
 8000978:	eb1c 0101 	adds.w	r1, ip, r1
 800097c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000980:	d26c      	bcs.n	8000a5c <__udivmoddi4+0x2b4>
 8000982:	458e      	cmp	lr, r1
 8000984:	d96a      	bls.n	8000a5c <__udivmoddi4+0x2b4>
 8000986:	3802      	subs	r0, #2
 8000988:	4461      	add	r1, ip
 800098a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800098e:	fba0 9402 	umull	r9, r4, r0, r2
 8000992:	eba1 010e 	sub.w	r1, r1, lr
 8000996:	42a1      	cmp	r1, r4
 8000998:	46c8      	mov	r8, r9
 800099a:	46a6      	mov	lr, r4
 800099c:	d356      	bcc.n	8000a4c <__udivmoddi4+0x2a4>
 800099e:	d053      	beq.n	8000a48 <__udivmoddi4+0x2a0>
 80009a0:	b15d      	cbz	r5, 80009ba <__udivmoddi4+0x212>
 80009a2:	ebb3 0208 	subs.w	r2, r3, r8
 80009a6:	eb61 010e 	sbc.w	r1, r1, lr
 80009aa:	fa01 f707 	lsl.w	r7, r1, r7
 80009ae:	fa22 f306 	lsr.w	r3, r2, r6
 80009b2:	40f1      	lsrs	r1, r6
 80009b4:	431f      	orrs	r7, r3
 80009b6:	e9c5 7100 	strd	r7, r1, [r5]
 80009ba:	2600      	movs	r6, #0
 80009bc:	4631      	mov	r1, r6
 80009be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80009c2:	f1c2 0320 	rsb	r3, r2, #32
 80009c6:	40d8      	lsrs	r0, r3
 80009c8:	fa0c fc02 	lsl.w	ip, ip, r2
 80009cc:	fa21 f303 	lsr.w	r3, r1, r3
 80009d0:	4091      	lsls	r1, r2
 80009d2:	4301      	orrs	r1, r0
 80009d4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80009d8:	fa1f fe8c 	uxth.w	lr, ip
 80009dc:	fbb3 f0f7 	udiv	r0, r3, r7
 80009e0:	fb07 3610 	mls	r6, r7, r0, r3
 80009e4:	0c0b      	lsrs	r3, r1, #16
 80009e6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80009ea:	fb00 f60e 	mul.w	r6, r0, lr
 80009ee:	429e      	cmp	r6, r3
 80009f0:	fa04 f402 	lsl.w	r4, r4, r2
 80009f4:	d908      	bls.n	8000a08 <__udivmoddi4+0x260>
 80009f6:	eb1c 0303 	adds.w	r3, ip, r3
 80009fa:	f100 38ff 	add.w	r8, r0, #4294967295
 80009fe:	d22f      	bcs.n	8000a60 <__udivmoddi4+0x2b8>
 8000a00:	429e      	cmp	r6, r3
 8000a02:	d92d      	bls.n	8000a60 <__udivmoddi4+0x2b8>
 8000a04:	3802      	subs	r0, #2
 8000a06:	4463      	add	r3, ip
 8000a08:	1b9b      	subs	r3, r3, r6
 8000a0a:	b289      	uxth	r1, r1
 8000a0c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000a10:	fb07 3316 	mls	r3, r7, r6, r3
 8000a14:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000a18:	fb06 f30e 	mul.w	r3, r6, lr
 8000a1c:	428b      	cmp	r3, r1
 8000a1e:	d908      	bls.n	8000a32 <__udivmoddi4+0x28a>
 8000a20:	eb1c 0101 	adds.w	r1, ip, r1
 8000a24:	f106 38ff 	add.w	r8, r6, #4294967295
 8000a28:	d216      	bcs.n	8000a58 <__udivmoddi4+0x2b0>
 8000a2a:	428b      	cmp	r3, r1
 8000a2c:	d914      	bls.n	8000a58 <__udivmoddi4+0x2b0>
 8000a2e:	3e02      	subs	r6, #2
 8000a30:	4461      	add	r1, ip
 8000a32:	1ac9      	subs	r1, r1, r3
 8000a34:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000a38:	e738      	b.n	80008ac <__udivmoddi4+0x104>
 8000a3a:	462e      	mov	r6, r5
 8000a3c:	4628      	mov	r0, r5
 8000a3e:	e705      	b.n	800084c <__udivmoddi4+0xa4>
 8000a40:	4606      	mov	r6, r0
 8000a42:	e6e3      	b.n	800080c <__udivmoddi4+0x64>
 8000a44:	4618      	mov	r0, r3
 8000a46:	e6f8      	b.n	800083a <__udivmoddi4+0x92>
 8000a48:	454b      	cmp	r3, r9
 8000a4a:	d2a9      	bcs.n	80009a0 <__udivmoddi4+0x1f8>
 8000a4c:	ebb9 0802 	subs.w	r8, r9, r2
 8000a50:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000a54:	3801      	subs	r0, #1
 8000a56:	e7a3      	b.n	80009a0 <__udivmoddi4+0x1f8>
 8000a58:	4646      	mov	r6, r8
 8000a5a:	e7ea      	b.n	8000a32 <__udivmoddi4+0x28a>
 8000a5c:	4620      	mov	r0, r4
 8000a5e:	e794      	b.n	800098a <__udivmoddi4+0x1e2>
 8000a60:	4640      	mov	r0, r8
 8000a62:	e7d1      	b.n	8000a08 <__udivmoddi4+0x260>
 8000a64:	46d0      	mov	r8, sl
 8000a66:	e77b      	b.n	8000960 <__udivmoddi4+0x1b8>
 8000a68:	3b02      	subs	r3, #2
 8000a6a:	4461      	add	r1, ip
 8000a6c:	e732      	b.n	80008d4 <__udivmoddi4+0x12c>
 8000a6e:	4630      	mov	r0, r6
 8000a70:	e709      	b.n	8000886 <__udivmoddi4+0xde>
 8000a72:	4464      	add	r4, ip
 8000a74:	3802      	subs	r0, #2
 8000a76:	e742      	b.n	80008fe <__udivmoddi4+0x156>

08000a78 <__aeabi_idiv0>:
 8000a78:	4770      	bx	lr
 8000a7a:	bf00      	nop

08000a7c <MX_GPIO_Init>:
     PH1-OSC_OUT (PH1)   ------> RCC_OSC_OUT
     PA13 (JTMS/SWDIO)   ------> DEBUG_JTMS-SWDIO
     PA14 (JTCK/SWCLK)   ------> DEBUG_JTCK-SWCLK
*/
void MX_GPIO_Init(void)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	b08e      	sub	sp, #56	; 0x38
 8000a80:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a82:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a86:	2200      	movs	r2, #0
 8000a88:	601a      	str	r2, [r3, #0]
 8000a8a:	605a      	str	r2, [r3, #4]
 8000a8c:	609a      	str	r2, [r3, #8]
 8000a8e:	60da      	str	r2, [r3, #12]
 8000a90:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000a92:	4b9c      	ldr	r3, [pc, #624]	; (8000d04 <MX_GPIO_Init+0x288>)
 8000a94:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a98:	4a9a      	ldr	r2, [pc, #616]	; (8000d04 <MX_GPIO_Init+0x288>)
 8000a9a:	f043 0310 	orr.w	r3, r3, #16
 8000a9e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000aa2:	4b98      	ldr	r3, [pc, #608]	; (8000d04 <MX_GPIO_Init+0x288>)
 8000aa4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000aa8:	f003 0310 	and.w	r3, r3, #16
 8000aac:	623b      	str	r3, [r7, #32]
 8000aae:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ab0:	4b94      	ldr	r3, [pc, #592]	; (8000d04 <MX_GPIO_Init+0x288>)
 8000ab2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ab6:	4a93      	ldr	r2, [pc, #588]	; (8000d04 <MX_GPIO_Init+0x288>)
 8000ab8:	f043 0304 	orr.w	r3, r3, #4
 8000abc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ac0:	4b90      	ldr	r3, [pc, #576]	; (8000d04 <MX_GPIO_Init+0x288>)
 8000ac2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ac6:	f003 0304 	and.w	r3, r3, #4
 8000aca:	61fb      	str	r3, [r7, #28]
 8000acc:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000ace:	4b8d      	ldr	r3, [pc, #564]	; (8000d04 <MX_GPIO_Init+0x288>)
 8000ad0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ad4:	4a8b      	ldr	r2, [pc, #556]	; (8000d04 <MX_GPIO_Init+0x288>)
 8000ad6:	f043 0320 	orr.w	r3, r3, #32
 8000ada:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ade:	4b89      	ldr	r3, [pc, #548]	; (8000d04 <MX_GPIO_Init+0x288>)
 8000ae0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ae4:	f003 0320 	and.w	r3, r3, #32
 8000ae8:	61bb      	str	r3, [r7, #24]
 8000aea:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000aec:	4b85      	ldr	r3, [pc, #532]	; (8000d04 <MX_GPIO_Init+0x288>)
 8000aee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000af2:	4a84      	ldr	r2, [pc, #528]	; (8000d04 <MX_GPIO_Init+0x288>)
 8000af4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000af8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000afc:	4b81      	ldr	r3, [pc, #516]	; (8000d04 <MX_GPIO_Init+0x288>)
 8000afe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b06:	617b      	str	r3, [r7, #20]
 8000b08:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b0a:	4b7e      	ldr	r3, [pc, #504]	; (8000d04 <MX_GPIO_Init+0x288>)
 8000b0c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b10:	4a7c      	ldr	r2, [pc, #496]	; (8000d04 <MX_GPIO_Init+0x288>)
 8000b12:	f043 0301 	orr.w	r3, r3, #1
 8000b16:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b1a:	4b7a      	ldr	r3, [pc, #488]	; (8000d04 <MX_GPIO_Init+0x288>)
 8000b1c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b20:	f003 0301 	and.w	r3, r3, #1
 8000b24:	613b      	str	r3, [r7, #16]
 8000b26:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b28:	4b76      	ldr	r3, [pc, #472]	; (8000d04 <MX_GPIO_Init+0x288>)
 8000b2a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b2e:	4a75      	ldr	r2, [pc, #468]	; (8000d04 <MX_GPIO_Init+0x288>)
 8000b30:	f043 0302 	orr.w	r3, r3, #2
 8000b34:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b38:	4b72      	ldr	r3, [pc, #456]	; (8000d04 <MX_GPIO_Init+0x288>)
 8000b3a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b3e:	f003 0302 	and.w	r3, r3, #2
 8000b42:	60fb      	str	r3, [r7, #12]
 8000b44:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b46:	4b6f      	ldr	r3, [pc, #444]	; (8000d04 <MX_GPIO_Init+0x288>)
 8000b48:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b4c:	4a6d      	ldr	r2, [pc, #436]	; (8000d04 <MX_GPIO_Init+0x288>)
 8000b4e:	f043 0308 	orr.w	r3, r3, #8
 8000b52:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b56:	4b6b      	ldr	r3, [pc, #428]	; (8000d04 <MX_GPIO_Init+0x288>)
 8000b58:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b5c:	f003 0308 	and.w	r3, r3, #8
 8000b60:	60bb      	str	r3, [r7, #8]
 8000b62:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000b64:	4b67      	ldr	r3, [pc, #412]	; (8000d04 <MX_GPIO_Init+0x288>)
 8000b66:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b6a:	4a66      	ldr	r2, [pc, #408]	; (8000d04 <MX_GPIO_Init+0x288>)
 8000b6c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000b70:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b74:	4b63      	ldr	r3, [pc, #396]	; (8000d04 <MX_GPIO_Init+0x288>)
 8000b76:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000b7e:	607b      	str	r3, [r7, #4]
 8000b80:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(relayDrivers_GPIO_Port, relayDrivers_Pin, GPIO_PIN_RESET);
 8000b82:	2200      	movs	r2, #0
 8000b84:	2108      	movs	r1, #8
 8000b86:	4860      	ldr	r0, [pc, #384]	; (8000d08 <MX_GPIO_Init+0x28c>)
 8000b88:	f006 fe80 	bl	800788c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, S_DirPaP1_Pin|S_DirPaP2_Pin|S_DirPaP3_Pin, GPIO_PIN_RESET);
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8000b92:	485e      	ldr	r0, [pc, #376]	; (8000d0c <MX_GPIO_Init+0x290>)
 8000b94:	f006 fe7a 	bl	800788c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, S_Enable_1_Pin|S_Enable_2_Pin|S_Enable_3_Pin, GPIO_PIN_RESET);
 8000b98:	2200      	movs	r2, #0
 8000b9a:	2170      	movs	r1, #112	; 0x70
 8000b9c:	485c      	ldr	r0, [pc, #368]	; (8000d10 <MX_GPIO_Init+0x294>)
 8000b9e:	f006 fe75 	bl	800788c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = E_EndStop2_Sup_Pin|E_EndStop2_Inf_Pin|faultDriver1_Pin|E_EndStop1_Sup_Pin;
 8000ba2:	238d      	movs	r3, #141	; 0x8d
 8000ba4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000ba6:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000baa:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bac:	2300      	movs	r3, #0
 8000bae:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000bb0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bb4:	4619      	mov	r1, r3
 8000bb6:	4857      	ldr	r0, [pc, #348]	; (8000d14 <MX_GPIO_Init+0x298>)
 8000bb8:	f006 fca0 	bl	80074fc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BUTTON_Pin;
 8000bbc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000bc0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000bc2:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000bc6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000bc8:	2302      	movs	r3, #2
 8000bca:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(BUTTON_GPIO_Port, &GPIO_InitStruct);
 8000bcc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bd0:	4619      	mov	r1, r3
 8000bd2:	484e      	ldr	r0, [pc, #312]	; (8000d0c <MX_GPIO_Init+0x290>)
 8000bd4:	f006 fc92 	bl	80074fc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = relayDrivers_Pin;
 8000bd8:	2308      	movs	r3, #8
 8000bda:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bdc:	2301      	movs	r3, #1
 8000bde:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be0:	2300      	movs	r3, #0
 8000be2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000be4:	2300      	movs	r3, #0
 8000be6:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(relayDrivers_GPIO_Port, &GPIO_InitStruct);
 8000be8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bec:	4619      	mov	r1, r3
 8000bee:	4846      	ldr	r0, [pc, #280]	; (8000d08 <MX_GPIO_Init+0x28c>)
 8000bf0:	f006 fc84 	bl	80074fc <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = faultDriver2_Pin|faultDriver3_Pin;
 8000bf4:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8000bf8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000bfa:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000bfe:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c00:	2300      	movs	r3, #0
 8000c02:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c04:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c08:	4619      	mov	r1, r3
 8000c0a:	4841      	ldr	r0, [pc, #260]	; (8000d10 <MX_GPIO_Init+0x294>)
 8000c0c:	f006 fc76 	bl	80074fc <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = S_DirPaP1_Pin|S_DirPaP2_Pin|S_DirPaP3_Pin;
 8000c10:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8000c14:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c16:	2301      	movs	r3, #1
 8000c18:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c1e:	2300      	movs	r3, #0
 8000c20:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c22:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c26:	4619      	mov	r1, r3
 8000c28:	4838      	ldr	r0, [pc, #224]	; (8000d0c <MX_GPIO_Init+0x290>)
 8000c2a:	f006 fc67 	bl	80074fc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = S_Enable_1_Pin;
 8000c2e:	2310      	movs	r3, #16
 8000c30:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c32:	2301      	movs	r3, #1
 8000c34:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c36:	2300      	movs	r3, #0
 8000c38:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(S_Enable_1_GPIO_Port, &GPIO_InitStruct);
 8000c3e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c42:	4619      	mov	r1, r3
 8000c44:	4832      	ldr	r0, [pc, #200]	; (8000d10 <MX_GPIO_Init+0x294>)
 8000c46:	f006 fc59 	bl	80074fc <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = S_Enable_2_Pin|S_Enable_3_Pin;
 8000c4a:	2360      	movs	r3, #96	; 0x60
 8000c4c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000c4e:	2311      	movs	r3, #17
 8000c50:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c52:	2300      	movs	r3, #0
 8000c54:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c56:	2300      	movs	r3, #0
 8000c58:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c5a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c5e:	4619      	mov	r1, r3
 8000c60:	482b      	ldr	r0, [pc, #172]	; (8000d10 <MX_GPIO_Init+0x294>)
 8000c62:	f006 fc4b 	bl	80074fc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = E_EndStop1_Inf_Pin;
 8000c66:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c6a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000c6c:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000c70:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c72:	2300      	movs	r3, #0
 8000c74:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(E_EndStop1_Inf_GPIO_Port, &GPIO_InitStruct);
 8000c76:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c7a:	4619      	mov	r1, r3
 8000c7c:	4826      	ldr	r0, [pc, #152]	; (8000d18 <MX_GPIO_Init+0x29c>)
 8000c7e:	f006 fc3d 	bl	80074fc <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = E_EndStop3_Sup_Pin|E_EndStop3_Inf_Pin;
 8000c82:	2330      	movs	r3, #48	; 0x30
 8000c84:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000c86:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000c8a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c90:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c94:	4619      	mov	r1, r3
 8000c96:	4821      	ldr	r0, [pc, #132]	; (8000d1c <MX_GPIO_Init+0x2a0>)
 8000c98:	f006 fc30 	bl	80074fc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 1, 0);
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	2101      	movs	r1, #1
 8000ca0:	2006      	movs	r0, #6
 8000ca2:	f005 fe84 	bl	80069ae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000ca6:	2006      	movs	r0, #6
 8000ca8:	f005 fe9b 	bl	80069e2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 1, 0);
 8000cac:	2200      	movs	r2, #0
 8000cae:	2101      	movs	r1, #1
 8000cb0:	2008      	movs	r0, #8
 8000cb2:	f005 fe7c 	bl	80069ae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8000cb6:	2008      	movs	r0, #8
 8000cb8:	f005 fe93 	bl	80069e2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 1, 0);
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	2101      	movs	r1, #1
 8000cc0:	2009      	movs	r0, #9
 8000cc2:	f005 fe74 	bl	80069ae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8000cc6:	2009      	movs	r0, #9
 8000cc8:	f005 fe8b 	bl	80069e2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 1, 0);
 8000ccc:	2200      	movs	r2, #0
 8000cce:	2101      	movs	r1, #1
 8000cd0:	200a      	movs	r0, #10
 8000cd2:	f005 fe6c 	bl	80069ae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8000cd6:	200a      	movs	r0, #10
 8000cd8:	f005 fe83 	bl	80069e2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 1, 0);
 8000cdc:	2200      	movs	r2, #0
 8000cde:	2101      	movs	r1, #1
 8000ce0:	2017      	movs	r0, #23
 8000ce2:	f005 fe64 	bl	80069ae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000ce6:	2017      	movs	r0, #23
 8000ce8:	f005 fe7b 	bl	80069e2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 1, 0);
 8000cec:	2200      	movs	r2, #0
 8000cee:	2101      	movs	r1, #1
 8000cf0:	2028      	movs	r0, #40	; 0x28
 8000cf2:	f005 fe5c 	bl	80069ae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000cf6:	2028      	movs	r0, #40	; 0x28
 8000cf8:	f005 fe73 	bl	80069e2 <HAL_NVIC_EnableIRQ>

}
 8000cfc:	bf00      	nop
 8000cfe:	3738      	adds	r7, #56	; 0x38
 8000d00:	46bd      	mov	sp, r7
 8000d02:	bd80      	pop	{r7, pc}
 8000d04:	58024400 	.word	0x58024400
 8000d08:	58021400 	.word	0x58021400
 8000d0c:	58020800 	.word	0x58020800
 8000d10:	58020c00 	.word	0x58020c00
 8000d14:	58021000 	.word	0x58021000
 8000d18:	58021800 	.word	0x58021800
 8000d1c:	58020400 	.word	0x58020400

08000d20 <homing>:

double rpm = 1.0;  //Valor experimental. Se encontro que es una buena velocidad para la tarea de homing
bool homAprox, homStart;


void homing(void) {
 8000d20:	b580      	push	{r7, lr}
 8000d22:	af00      	add	r7, sp, #0

	homAprox = true;
 8000d24:	4bb0      	ldr	r3, [pc, #704]	; (8000fe8 <homing+0x2c8>)
 8000d26:	2201      	movs	r2, #1
 8000d28:	701a      	strb	r2, [r3, #0]
	homStart = true;
 8000d2a:	4bb0      	ldr	r3, [pc, #704]	; (8000fec <homing+0x2cc>)
 8000d2c:	2201      	movs	r2, #1
 8000d2e:	701a      	strb	r2, [r3, #0]

    motor1.hom = false;
 8000d30:	4baf      	ldr	r3, [pc, #700]	; (8000ff0 <homing+0x2d0>)
 8000d32:	2200      	movs	r2, #0
 8000d34:	761a      	strb	r2, [r3, #24]
    motor2.hom = false;
 8000d36:	4baf      	ldr	r3, [pc, #700]	; (8000ff4 <homing+0x2d4>)
 8000d38:	2200      	movs	r2, #0
 8000d3a:	761a      	strb	r2, [r3, #24]
    motor3.hom = false;
 8000d3c:	4bae      	ldr	r3, [pc, #696]	; (8000ff8 <homing+0x2d8>)
 8000d3e:	2200      	movs	r2, #0
 8000d40:	761a      	strb	r2, [r3, #24]

    //Establecemos la direccion en sentido horario (VISTA FRONTAL DEL MOTOR)
    positive_Dir_MOTOR_1;
 8000d42:	2200      	movs	r2, #0
 8000d44:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000d48:	48ac      	ldr	r0, [pc, #688]	; (8000ffc <homing+0x2dc>)
 8000d4a:	f006 fd9f 	bl	800788c <HAL_GPIO_WritePin>
	positive_Dir_MOTOR_2;
 8000d4e:	2200      	movs	r2, #0
 8000d50:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000d54:	48a9      	ldr	r0, [pc, #676]	; (8000ffc <homing+0x2dc>)
 8000d56:	f006 fd99 	bl	800788c <HAL_GPIO_WritePin>
	positive_Dir_MOTOR_3;
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000d60:	48a6      	ldr	r0, [pc, #664]	; (8000ffc <homing+0x2dc>)
 8000d62:	f006 fd93 	bl	800788c <HAL_GPIO_WritePin>

	//Se desabilitan interrupciones externas
	HAL_NVIC_DisableIRQ(EXTI0_IRQn);	//Apago interrupcion EndStop 1 Superior
 8000d66:	2006      	movs	r0, #6
 8000d68:	f005 fe49 	bl	80069fe <HAL_NVIC_DisableIRQ>
	HAL_NVIC_DisableIRQ(EXTI1_IRQn);	//Apago interrupcion EndStop 1 Inferior
 8000d6c:	2007      	movs	r0, #7
 8000d6e:	f005 fe46 	bl	80069fe <HAL_NVIC_DisableIRQ>
	HAL_NVIC_DisableIRQ(EXTI2_IRQn);	//Apago interrupcion EndStop 2 Superior
 8000d72:	2008      	movs	r0, #8
 8000d74:	f005 fe43 	bl	80069fe <HAL_NVIC_DisableIRQ>
	HAL_NVIC_DisableIRQ(EXTI3_IRQn);	//Apago interrupcion EndStop 2 Inferior
 8000d78:	2009      	movs	r0, #9
 8000d7a:	f005 fe40 	bl	80069fe <HAL_NVIC_DisableIRQ>
	HAL_NVIC_DisableIRQ(EXTI4_IRQn);	//Apago interrupcion EndStop 3 Superior
 8000d7e:	200a      	movs	r0, #10
 8000d80:	f005 fe3d 	bl	80069fe <HAL_NVIC_DisableIRQ>
	HAL_NVIC_DisableIRQ(EXTI9_5_IRQn);	//Apago interrupcion EndStop 3 Inferior
 8000d84:	2017      	movs	r0, #23
 8000d86:	f005 fe3a 	bl	80069fe <HAL_NVIC_DisableIRQ>
	HAL_NVIC_DisableIRQ(EXTI15_10_IRQn); //Apago interrupcion faultDriver
 8000d8a:	2028      	movs	r0, #40	; 0x28
 8000d8c:	f005 fe37 	bl	80069fe <HAL_NVIC_DisableIRQ>

    //Se asegura que los motores esten detenidos
	Stop_PWM_MOTOR_1;
 8000d90:	2100      	movs	r1, #0
 8000d92:	489b      	ldr	r0, [pc, #620]	; (8001000 <homing+0x2e0>)
 8000d94:	f009 fc10 	bl	800a5b8 <HAL_TIM_PWM_Stop>
	Stop_PWM_MOTOR_2;
 8000d98:	2100      	movs	r1, #0
 8000d9a:	489a      	ldr	r0, [pc, #616]	; (8001004 <homing+0x2e4>)
 8000d9c:	f009 fc0c 	bl	800a5b8 <HAL_TIM_PWM_Stop>
	Stop_PWM_MOTOR_3;
 8000da0:	2100      	movs	r1, #0
 8000da2:	4899      	ldr	r0, [pc, #612]	; (8001008 <homing+0x2e8>)
 8000da4:	f009 fc08 	bl	800a5b8 <HAL_TIM_PWM_Stop>

	//Escritura del registro ARR de los PWM
	__HAL_TIM_SET_AUTORELOAD(&htim12,COUNTERPERIOD(rpm));
 8000da8:	4b98      	ldr	r3, [pc, #608]	; (800100c <homing+0x2ec>)
 8000daa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000dac:	ee07 3a90 	vmov	s15, r3
 8000db0:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8000db4:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8000db8:	ee37 7b06 	vadd.f64	d7, d7, d6
 8000dbc:	ed9f 5b84 	vldr	d5, [pc, #528]	; 8000fd0 <homing+0x2b0>
 8000dc0:	ee85 6b07 	vdiv.f64	d6, d5, d7
 8000dc4:	4b92      	ldr	r3, [pc, #584]	; (8001010 <homing+0x2f0>)
 8000dc6:	ed93 7b00 	vldr	d7, [r3]
 8000dca:	ed9f 5b83 	vldr	d5, [pc, #524]	; 8000fd8 <homing+0x2b8>
 8000dce:	ee27 5b05 	vmul.f64	d5, d7, d5
 8000dd2:	ed9f 4b83 	vldr	d4, [pc, #524]	; 8000fe0 <homing+0x2c0>
 8000dd6:	ee84 7b05 	vdiv.f64	d7, d4, d5
 8000dda:	ee26 7b07 	vmul.f64	d7, d6, d7
 8000dde:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8000de2:	ee37 7b46 	vsub.f64	d7, d7, d6
 8000de6:	4b86      	ldr	r3, [pc, #536]	; (8001000 <homing+0x2e0>)
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000dee:	ee17 2a90 	vmov	r2, s15
 8000df2:	62da      	str	r2, [r3, #44]	; 0x2c
 8000df4:	4b85      	ldr	r3, [pc, #532]	; (800100c <homing+0x2ec>)
 8000df6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000df8:	ee07 3a90 	vmov	s15, r3
 8000dfc:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8000e00:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8000e04:	ee37 7b06 	vadd.f64	d7, d7, d6
 8000e08:	ed9f 5b71 	vldr	d5, [pc, #452]	; 8000fd0 <homing+0x2b0>
 8000e0c:	ee85 6b07 	vdiv.f64	d6, d5, d7
 8000e10:	4b7f      	ldr	r3, [pc, #508]	; (8001010 <homing+0x2f0>)
 8000e12:	ed93 7b00 	vldr	d7, [r3]
 8000e16:	ed9f 5b70 	vldr	d5, [pc, #448]	; 8000fd8 <homing+0x2b8>
 8000e1a:	ee27 5b05 	vmul.f64	d5, d7, d5
 8000e1e:	ed9f 4b70 	vldr	d4, [pc, #448]	; 8000fe0 <homing+0x2c0>
 8000e22:	ee84 7b05 	vdiv.f64	d7, d4, d5
 8000e26:	ee26 7b07 	vmul.f64	d7, d6, d7
 8000e2a:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8000e2e:	ee37 7b46 	vsub.f64	d7, d7, d6
 8000e32:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000e36:	ee17 2a90 	vmov	r2, s15
 8000e3a:	4b71      	ldr	r3, [pc, #452]	; (8001000 <homing+0x2e0>)
 8000e3c:	60da      	str	r2, [r3, #12]
	__HAL_TIM_SET_AUTORELOAD(&htim13,COUNTERPERIOD(rpm));
 8000e3e:	4b73      	ldr	r3, [pc, #460]	; (800100c <homing+0x2ec>)
 8000e40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e42:	ee07 3a90 	vmov	s15, r3
 8000e46:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8000e4a:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8000e4e:	ee37 7b06 	vadd.f64	d7, d7, d6
 8000e52:	ed9f 5b5f 	vldr	d5, [pc, #380]	; 8000fd0 <homing+0x2b0>
 8000e56:	ee85 6b07 	vdiv.f64	d6, d5, d7
 8000e5a:	4b6d      	ldr	r3, [pc, #436]	; (8001010 <homing+0x2f0>)
 8000e5c:	ed93 7b00 	vldr	d7, [r3]
 8000e60:	ed9f 5b5d 	vldr	d5, [pc, #372]	; 8000fd8 <homing+0x2b8>
 8000e64:	ee27 5b05 	vmul.f64	d5, d7, d5
 8000e68:	ed9f 4b5d 	vldr	d4, [pc, #372]	; 8000fe0 <homing+0x2c0>
 8000e6c:	ee84 7b05 	vdiv.f64	d7, d4, d5
 8000e70:	ee26 7b07 	vmul.f64	d7, d6, d7
 8000e74:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8000e78:	ee37 7b46 	vsub.f64	d7, d7, d6
 8000e7c:	4b61      	ldr	r3, [pc, #388]	; (8001004 <homing+0x2e4>)
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000e84:	ee17 2a90 	vmov	r2, s15
 8000e88:	62da      	str	r2, [r3, #44]	; 0x2c
 8000e8a:	4b60      	ldr	r3, [pc, #384]	; (800100c <homing+0x2ec>)
 8000e8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e8e:	ee07 3a90 	vmov	s15, r3
 8000e92:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8000e96:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8000e9a:	ee37 7b06 	vadd.f64	d7, d7, d6
 8000e9e:	ed9f 5b4c 	vldr	d5, [pc, #304]	; 8000fd0 <homing+0x2b0>
 8000ea2:	ee85 6b07 	vdiv.f64	d6, d5, d7
 8000ea6:	4b5a      	ldr	r3, [pc, #360]	; (8001010 <homing+0x2f0>)
 8000ea8:	ed93 7b00 	vldr	d7, [r3]
 8000eac:	ed9f 5b4a 	vldr	d5, [pc, #296]	; 8000fd8 <homing+0x2b8>
 8000eb0:	ee27 5b05 	vmul.f64	d5, d7, d5
 8000eb4:	ed9f 4b4a 	vldr	d4, [pc, #296]	; 8000fe0 <homing+0x2c0>
 8000eb8:	ee84 7b05 	vdiv.f64	d7, d4, d5
 8000ebc:	ee26 7b07 	vmul.f64	d7, d6, d7
 8000ec0:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8000ec4:	ee37 7b46 	vsub.f64	d7, d7, d6
 8000ec8:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000ecc:	ee17 2a90 	vmov	r2, s15
 8000ed0:	4b4c      	ldr	r3, [pc, #304]	; (8001004 <homing+0x2e4>)
 8000ed2:	60da      	str	r2, [r3, #12]
	__HAL_TIM_SET_AUTORELOAD(&htim14,COUNTERPERIOD(rpm));
 8000ed4:	4b4d      	ldr	r3, [pc, #308]	; (800100c <homing+0x2ec>)
 8000ed6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ed8:	ee07 3a90 	vmov	s15, r3
 8000edc:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8000ee0:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8000ee4:	ee37 7b06 	vadd.f64	d7, d7, d6
 8000ee8:	ed9f 5b39 	vldr	d5, [pc, #228]	; 8000fd0 <homing+0x2b0>
 8000eec:	ee85 6b07 	vdiv.f64	d6, d5, d7
 8000ef0:	4b47      	ldr	r3, [pc, #284]	; (8001010 <homing+0x2f0>)
 8000ef2:	ed93 7b00 	vldr	d7, [r3]
 8000ef6:	ed9f 5b38 	vldr	d5, [pc, #224]	; 8000fd8 <homing+0x2b8>
 8000efa:	ee27 5b05 	vmul.f64	d5, d7, d5
 8000efe:	ed9f 4b38 	vldr	d4, [pc, #224]	; 8000fe0 <homing+0x2c0>
 8000f02:	ee84 7b05 	vdiv.f64	d7, d4, d5
 8000f06:	ee26 7b07 	vmul.f64	d7, d6, d7
 8000f0a:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8000f0e:	ee37 7b46 	vsub.f64	d7, d7, d6
 8000f12:	4b3d      	ldr	r3, [pc, #244]	; (8001008 <homing+0x2e8>)
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000f1a:	ee17 2a90 	vmov	r2, s15
 8000f1e:	62da      	str	r2, [r3, #44]	; 0x2c
 8000f20:	4b3a      	ldr	r3, [pc, #232]	; (800100c <homing+0x2ec>)
 8000f22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f24:	ee07 3a90 	vmov	s15, r3
 8000f28:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8000f2c:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8000f30:	ee37 7b06 	vadd.f64	d7, d7, d6
 8000f34:	ed9f 5b26 	vldr	d5, [pc, #152]	; 8000fd0 <homing+0x2b0>
 8000f38:	ee85 6b07 	vdiv.f64	d6, d5, d7
 8000f3c:	4b34      	ldr	r3, [pc, #208]	; (8001010 <homing+0x2f0>)
 8000f3e:	ed93 7b00 	vldr	d7, [r3]
 8000f42:	ed9f 5b25 	vldr	d5, [pc, #148]	; 8000fd8 <homing+0x2b8>
 8000f46:	ee27 5b05 	vmul.f64	d5, d7, d5
 8000f4a:	ed9f 4b25 	vldr	d4, [pc, #148]	; 8000fe0 <homing+0x2c0>
 8000f4e:	ee84 7b05 	vdiv.f64	d7, d4, d5
 8000f52:	ee26 7b07 	vmul.f64	d7, d6, d7
 8000f56:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8000f5a:	ee37 7b46 	vsub.f64	d7, d7, d6
 8000f5e:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000f62:	ee17 2a90 	vmov	r2, s15
 8000f66:	4b28      	ldr	r3, [pc, #160]	; (8001008 <homing+0x2e8>)
 8000f68:	60da      	str	r2, [r3, #12]

	TIM12->CCR1 = (uint32_t)((double)(TIM12->ARR) / 2.0);
 8000f6a:	4b28      	ldr	r3, [pc, #160]	; (800100c <homing+0x2ec>)
 8000f6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f6e:	ee07 3a90 	vmov	s15, r3
 8000f72:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 8000f76:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8000f7a:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000f7e:	4b23      	ldr	r3, [pc, #140]	; (800100c <homing+0x2ec>)
 8000f80:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000f84:	ee17 2a90 	vmov	r2, s15
 8000f88:	635a      	str	r2, [r3, #52]	; 0x34
	TIM13->CCR1 = (uint32_t)((double)(TIM13->ARR) / 2.0);
 8000f8a:	4b22      	ldr	r3, [pc, #136]	; (8001014 <homing+0x2f4>)
 8000f8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f8e:	ee07 3a90 	vmov	s15, r3
 8000f92:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 8000f96:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8000f9a:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000f9e:	4b1d      	ldr	r3, [pc, #116]	; (8001014 <homing+0x2f4>)
 8000fa0:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000fa4:	ee17 2a90 	vmov	r2, s15
 8000fa8:	635a      	str	r2, [r3, #52]	; 0x34
	TIM14->CCR1 = (uint32_t)((double)(TIM14->ARR) / 2.0);
 8000faa:	4b1b      	ldr	r3, [pc, #108]	; (8001018 <homing+0x2f8>)
 8000fac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000fae:	ee07 3a90 	vmov	s15, r3
 8000fb2:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 8000fb6:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8000fba:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000fbe:	4b16      	ldr	r3, [pc, #88]	; (8001018 <homing+0x2f8>)
 8000fc0:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000fc4:	ee17 2a90 	vmov	r2, s15
 8000fc8:	635a      	str	r2, [r3, #52]	; 0x34


    while(homAprox){
 8000fca:	e06f      	b.n	80010ac <homing+0x38c>
 8000fcc:	f3af 8000 	nop.w
 8000fd0:	00000000 	.word	0x00000000
 8000fd4:	418e8480 	.word	0x418e8480
 8000fd8:	00000000 	.word	0x00000000
 8000fdc:	40bf4000 	.word	0x40bf4000
 8000fe0:	00000000 	.word	0x00000000
 8000fe4:	404e0000 	.word	0x404e0000
 8000fe8:	24000284 	.word	0x24000284
 8000fec:	24000285 	.word	0x24000285
 8000ff0:	24000378 	.word	0x24000378
 8000ff4:	240003c0 	.word	0x240003c0
 8000ff8:	24000408 	.word	0x24000408
 8000ffc:	58020800 	.word	0x58020800
 8001000:	24000700 	.word	0x24000700
 8001004:	2400074c 	.word	0x2400074c
 8001008:	24000798 	.word	0x24000798
 800100c:	40001800 	.word	0x40001800
 8001010:	24000000 	.word	0x24000000
 8001014:	40001c00 	.word	0x40001c00
 8001018:	40002000 	.word	0x40002000

        Start_PWM_MOTOR_1;
 800101c:	2100      	movs	r1, #0
 800101e:	488c      	ldr	r0, [pc, #560]	; (8001250 <homing+0x530>)
 8001020:	f009 f9bc 	bl	800a39c <HAL_TIM_PWM_Start>
        Start_PWM_MOTOR_2;
 8001024:	2100      	movs	r1, #0
 8001026:	488b      	ldr	r0, [pc, #556]	; (8001254 <homing+0x534>)
 8001028:	f009 f9b8 	bl	800a39c <HAL_TIM_PWM_Start>
        Start_PWM_MOTOR_3;
 800102c:	2100      	movs	r1, #0
 800102e:	488a      	ldr	r0, [pc, #552]	; (8001258 <homing+0x538>)
 8001030:	f009 f9b4 	bl	800a39c <HAL_TIM_PWM_Start>

        if (ES1s_PRESSED || ES2s_PRESSED || ES3s_PRESSED){
 8001034:	2101      	movs	r1, #1
 8001036:	4889      	ldr	r0, [pc, #548]	; (800125c <homing+0x53c>)
 8001038:	f006 fc10 	bl	800785c <HAL_GPIO_ReadPin>
 800103c:	4603      	mov	r3, r0
 800103e:	2b00      	cmp	r3, #0
 8001040:	d00d      	beq.n	800105e <homing+0x33e>
 8001042:	2104      	movs	r1, #4
 8001044:	4885      	ldr	r0, [pc, #532]	; (800125c <homing+0x53c>)
 8001046:	f006 fc09 	bl	800785c <HAL_GPIO_ReadPin>
 800104a:	4603      	mov	r3, r0
 800104c:	2b00      	cmp	r3, #0
 800104e:	d006      	beq.n	800105e <homing+0x33e>
 8001050:	2110      	movs	r1, #16
 8001052:	4883      	ldr	r0, [pc, #524]	; (8001260 <homing+0x540>)
 8001054:	f006 fc02 	bl	800785c <HAL_GPIO_ReadPin>
 8001058:	4603      	mov	r3, r0
 800105a:	2b00      	cmp	r3, #0
 800105c:	d126      	bne.n	80010ac <homing+0x38c>
            HAL_Delay(30);
 800105e:	201e      	movs	r0, #30
 8001060:	f005 fb76 	bl	8006750 <HAL_Delay>
            if (ES1s_PRESSED || ES2s_PRESSED || ES3s_PRESSED){
 8001064:	2101      	movs	r1, #1
 8001066:	487d      	ldr	r0, [pc, #500]	; (800125c <homing+0x53c>)
 8001068:	f006 fbf8 	bl	800785c <HAL_GPIO_ReadPin>
 800106c:	4603      	mov	r3, r0
 800106e:	2b00      	cmp	r3, #0
 8001070:	d00d      	beq.n	800108e <homing+0x36e>
 8001072:	2104      	movs	r1, #4
 8001074:	4879      	ldr	r0, [pc, #484]	; (800125c <homing+0x53c>)
 8001076:	f006 fbf1 	bl	800785c <HAL_GPIO_ReadPin>
 800107a:	4603      	mov	r3, r0
 800107c:	2b00      	cmp	r3, #0
 800107e:	d006      	beq.n	800108e <homing+0x36e>
 8001080:	2110      	movs	r1, #16
 8001082:	4877      	ldr	r0, [pc, #476]	; (8001260 <homing+0x540>)
 8001084:	f006 fbea 	bl	800785c <HAL_GPIO_ReadPin>
 8001088:	4603      	mov	r3, r0
 800108a:	2b00      	cmp	r3, #0
 800108c:	d10e      	bne.n	80010ac <homing+0x38c>

                Stop_PWM_MOTOR_1;
 800108e:	2100      	movs	r1, #0
 8001090:	486f      	ldr	r0, [pc, #444]	; (8001250 <homing+0x530>)
 8001092:	f009 fa91 	bl	800a5b8 <HAL_TIM_PWM_Stop>
                Stop_PWM_MOTOR_2;
 8001096:	2100      	movs	r1, #0
 8001098:	486e      	ldr	r0, [pc, #440]	; (8001254 <homing+0x534>)
 800109a:	f009 fa8d 	bl	800a5b8 <HAL_TIM_PWM_Stop>
                Stop_PWM_MOTOR_3;
 800109e:	2100      	movs	r1, #0
 80010a0:	486d      	ldr	r0, [pc, #436]	; (8001258 <homing+0x538>)
 80010a2:	f009 fa89 	bl	800a5b8 <HAL_TIM_PWM_Stop>

                homAprox = false;
 80010a6:	4b6f      	ldr	r3, [pc, #444]	; (8001264 <homing+0x544>)
 80010a8:	2200      	movs	r2, #0
 80010aa:	701a      	strb	r2, [r3, #0]
    while(homAprox){
 80010ac:	4b6d      	ldr	r3, [pc, #436]	; (8001264 <homing+0x544>)
 80010ae:	781b      	ldrb	r3, [r3, #0]
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d1b3      	bne.n	800101c <homing+0x2fc>
        }
    }

    //-----------------------------------------------------------------------------

    while (!homFin){
 80010b4:	e141      	b.n	800133a <homing+0x61a>

        if (ES1s_PRESSED && !motor1.hom) {
 80010b6:	2101      	movs	r1, #1
 80010b8:	4868      	ldr	r0, [pc, #416]	; (800125c <homing+0x53c>)
 80010ba:	f006 fbcf 	bl	800785c <HAL_GPIO_ReadPin>
 80010be:	4603      	mov	r3, r0
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d155      	bne.n	8001170 <homing+0x450>
 80010c4:	4b68      	ldr	r3, [pc, #416]	; (8001268 <homing+0x548>)
 80010c6:	7e1b      	ldrb	r3, [r3, #24]
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d151      	bne.n	8001170 <homing+0x450>

            Stop_PWM_MOTOR_2;
 80010cc:	2100      	movs	r1, #0
 80010ce:	4861      	ldr	r0, [pc, #388]	; (8001254 <homing+0x534>)
 80010d0:	f009 fa72 	bl	800a5b8 <HAL_TIM_PWM_Stop>
            Stop_PWM_MOTOR_3;
 80010d4:	2100      	movs	r1, #0
 80010d6:	4860      	ldr	r0, [pc, #384]	; (8001258 <homing+0x538>)
 80010d8:	f009 fa6e 	bl	800a5b8 <HAL_TIM_PWM_Stop>

            HAL_Delay(30);//Delay necesario para consultar el estado del pin vinculado al ES1s
 80010dc:	201e      	movs	r0, #30
 80010de:	f005 fb37 	bl	8006750 <HAL_Delay>

            while(ES1s_PRESSED){
 80010e2:	e010      	b.n	8001106 <homing+0x3e6>

                negative_Dir_MOTOR_1;
 80010e4:	2201      	movs	r2, #1
 80010e6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80010ea:	4860      	ldr	r0, [pc, #384]	; (800126c <homing+0x54c>)
 80010ec:	f006 fbce 	bl	800788c <HAL_GPIO_WritePin>
                HAL_Delay(0.5); 							//delay cambio de dir
 80010f0:	2000      	movs	r0, #0
 80010f2:	f005 fb2d 	bl	8006750 <HAL_Delay>
                Start_PWM_MOTOR_1;
 80010f6:	2100      	movs	r1, #0
 80010f8:	4855      	ldr	r0, [pc, #340]	; (8001250 <homing+0x530>)
 80010fa:	f009 f94f 	bl	800a39c <HAL_TIM_PWM_Start>
                HAL_Delay(500); //Lo dejamos que se mueva medio segundo en la direccion descreciente
 80010fe:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001102:	f005 fb25 	bl	8006750 <HAL_Delay>
            while(ES1s_PRESSED){
 8001106:	2101      	movs	r1, #1
 8001108:	4854      	ldr	r0, [pc, #336]	; (800125c <homing+0x53c>)
 800110a:	f006 fba7 	bl	800785c <HAL_GPIO_ReadPin>
 800110e:	4603      	mov	r3, r0
 8001110:	2b00      	cmp	r3, #0
 8001112:	d0e7      	beq.n	80010e4 <homing+0x3c4>

            }

            Stop_PWM_MOTOR_1;
 8001114:	2100      	movs	r1, #0
 8001116:	484e      	ldr	r0, [pc, #312]	; (8001250 <homing+0x530>)
 8001118:	f009 fa4e 	bl	800a5b8 <HAL_TIM_PWM_Stop>
            motor1.hom=true;
 800111c:	4b52      	ldr	r3, [pc, #328]	; (8001268 <homing+0x548>)
 800111e:	2201      	movs	r2, #1
 8001120:	761a      	strb	r2, [r3, #24]
            HAL_UART_Transmit(&huart3,(uint8_t *)"F1\n", 4, 100);
 8001122:	2364      	movs	r3, #100	; 0x64
 8001124:	2204      	movs	r2, #4
 8001126:	4952      	ldr	r1, [pc, #328]	; (8001270 <homing+0x550>)
 8001128:	4852      	ldr	r0, [pc, #328]	; (8001274 <homing+0x554>)
 800112a:	f00a ff3d 	bl	800bfa8 <HAL_UART_Transmit>
            HAL_Delay(30);
 800112e:	201e      	movs	r0, #30
 8001130:	f005 fb0e 	bl	8006750 <HAL_Delay>

            if (ES2s_UNPRESSED && !motor2.hom)Start_PWM_MOTOR_2;
 8001134:	2104      	movs	r1, #4
 8001136:	4849      	ldr	r0, [pc, #292]	; (800125c <homing+0x53c>)
 8001138:	f006 fb90 	bl	800785c <HAL_GPIO_ReadPin>
 800113c:	4603      	mov	r3, r0
 800113e:	2b00      	cmp	r3, #0
 8001140:	d007      	beq.n	8001152 <homing+0x432>
 8001142:	4b4d      	ldr	r3, [pc, #308]	; (8001278 <homing+0x558>)
 8001144:	7e1b      	ldrb	r3, [r3, #24]
 8001146:	2b00      	cmp	r3, #0
 8001148:	d103      	bne.n	8001152 <homing+0x432>
 800114a:	2100      	movs	r1, #0
 800114c:	4841      	ldr	r0, [pc, #260]	; (8001254 <homing+0x534>)
 800114e:	f009 f925 	bl	800a39c <HAL_TIM_PWM_Start>
            if (ES3s_UNPRESSED && !motor3.hom)Start_PWM_MOTOR_3;
 8001152:	2110      	movs	r1, #16
 8001154:	4842      	ldr	r0, [pc, #264]	; (8001260 <homing+0x540>)
 8001156:	f006 fb81 	bl	800785c <HAL_GPIO_ReadPin>
 800115a:	4603      	mov	r3, r0
 800115c:	2b00      	cmp	r3, #0
 800115e:	d007      	beq.n	8001170 <homing+0x450>
 8001160:	4b46      	ldr	r3, [pc, #280]	; (800127c <homing+0x55c>)
 8001162:	7e1b      	ldrb	r3, [r3, #24]
 8001164:	2b00      	cmp	r3, #0
 8001166:	d103      	bne.n	8001170 <homing+0x450>
 8001168:	2100      	movs	r1, #0
 800116a:	483b      	ldr	r0, [pc, #236]	; (8001258 <homing+0x538>)
 800116c:	f009 f916 	bl	800a39c <HAL_TIM_PWM_Start>


        } // ES1s_UNPRESSED : Se dejó de presionar el FC1 sup

        if (ES2s_PRESSED && !motor2.hom){
 8001170:	2104      	movs	r1, #4
 8001172:	483a      	ldr	r0, [pc, #232]	; (800125c <homing+0x53c>)
 8001174:	f006 fb72 	bl	800785c <HAL_GPIO_ReadPin>
 8001178:	4603      	mov	r3, r0
 800117a:	2b00      	cmp	r3, #0
 800117c:	d155      	bne.n	800122a <homing+0x50a>
 800117e:	4b3e      	ldr	r3, [pc, #248]	; (8001278 <homing+0x558>)
 8001180:	7e1b      	ldrb	r3, [r3, #24]
 8001182:	2b00      	cmp	r3, #0
 8001184:	d151      	bne.n	800122a <homing+0x50a>

            Stop_PWM_MOTOR_1;
 8001186:	2100      	movs	r1, #0
 8001188:	4831      	ldr	r0, [pc, #196]	; (8001250 <homing+0x530>)
 800118a:	f009 fa15 	bl	800a5b8 <HAL_TIM_PWM_Stop>
            Stop_PWM_MOTOR_3;
 800118e:	2100      	movs	r1, #0
 8001190:	4831      	ldr	r0, [pc, #196]	; (8001258 <homing+0x538>)
 8001192:	f009 fa11 	bl	800a5b8 <HAL_TIM_PWM_Stop>

            HAL_Delay(30);//Delay necesario para consultar el estado del pin vinculado al ES2s
 8001196:	201e      	movs	r0, #30
 8001198:	f005 fada 	bl	8006750 <HAL_Delay>

            while(ES2s_PRESSED){
 800119c:	e010      	b.n	80011c0 <homing+0x4a0>

                negative_Dir_MOTOR_2;
 800119e:	2201      	movs	r2, #1
 80011a0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80011a4:	4831      	ldr	r0, [pc, #196]	; (800126c <homing+0x54c>)
 80011a6:	f006 fb71 	bl	800788c <HAL_GPIO_WritePin>
                HAL_Delay(0.5);
 80011aa:	2000      	movs	r0, #0
 80011ac:	f005 fad0 	bl	8006750 <HAL_Delay>
                Start_PWM_MOTOR_2;
 80011b0:	2100      	movs	r1, #0
 80011b2:	4828      	ldr	r0, [pc, #160]	; (8001254 <homing+0x534>)
 80011b4:	f009 f8f2 	bl	800a39c <HAL_TIM_PWM_Start>
                HAL_Delay(500);
 80011b8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80011bc:	f005 fac8 	bl	8006750 <HAL_Delay>
            while(ES2s_PRESSED){
 80011c0:	2104      	movs	r1, #4
 80011c2:	4826      	ldr	r0, [pc, #152]	; (800125c <homing+0x53c>)
 80011c4:	f006 fb4a 	bl	800785c <HAL_GPIO_ReadPin>
 80011c8:	4603      	mov	r3, r0
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d0e7      	beq.n	800119e <homing+0x47e>

            }

            Stop_PWM_MOTOR_2;
 80011ce:	2100      	movs	r1, #0
 80011d0:	4820      	ldr	r0, [pc, #128]	; (8001254 <homing+0x534>)
 80011d2:	f009 f9f1 	bl	800a5b8 <HAL_TIM_PWM_Stop>
            motor2.hom=true;
 80011d6:	4b28      	ldr	r3, [pc, #160]	; (8001278 <homing+0x558>)
 80011d8:	2201      	movs	r2, #1
 80011da:	761a      	strb	r2, [r3, #24]
            HAL_UART_Transmit(&huart3,(uint8_t *)"F2\n", 4, 100);
 80011dc:	2364      	movs	r3, #100	; 0x64
 80011de:	2204      	movs	r2, #4
 80011e0:	4927      	ldr	r1, [pc, #156]	; (8001280 <homing+0x560>)
 80011e2:	4824      	ldr	r0, [pc, #144]	; (8001274 <homing+0x554>)
 80011e4:	f00a fee0 	bl	800bfa8 <HAL_UART_Transmit>
            HAL_Delay(30);
 80011e8:	201e      	movs	r0, #30
 80011ea:	f005 fab1 	bl	8006750 <HAL_Delay>

            if (ES1s_UNPRESSED && !motor1.hom)Start_PWM_MOTOR_1;
 80011ee:	2101      	movs	r1, #1
 80011f0:	481a      	ldr	r0, [pc, #104]	; (800125c <homing+0x53c>)
 80011f2:	f006 fb33 	bl	800785c <HAL_GPIO_ReadPin>
 80011f6:	4603      	mov	r3, r0
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d007      	beq.n	800120c <homing+0x4ec>
 80011fc:	4b1a      	ldr	r3, [pc, #104]	; (8001268 <homing+0x548>)
 80011fe:	7e1b      	ldrb	r3, [r3, #24]
 8001200:	2b00      	cmp	r3, #0
 8001202:	d103      	bne.n	800120c <homing+0x4ec>
 8001204:	2100      	movs	r1, #0
 8001206:	4812      	ldr	r0, [pc, #72]	; (8001250 <homing+0x530>)
 8001208:	f009 f8c8 	bl	800a39c <HAL_TIM_PWM_Start>
            if (ES3s_UNPRESSED && !motor3.hom)Start_PWM_MOTOR_3;
 800120c:	2110      	movs	r1, #16
 800120e:	4814      	ldr	r0, [pc, #80]	; (8001260 <homing+0x540>)
 8001210:	f006 fb24 	bl	800785c <HAL_GPIO_ReadPin>
 8001214:	4603      	mov	r3, r0
 8001216:	2b00      	cmp	r3, #0
 8001218:	d007      	beq.n	800122a <homing+0x50a>
 800121a:	4b18      	ldr	r3, [pc, #96]	; (800127c <homing+0x55c>)
 800121c:	7e1b      	ldrb	r3, [r3, #24]
 800121e:	2b00      	cmp	r3, #0
 8001220:	d103      	bne.n	800122a <homing+0x50a>
 8001222:	2100      	movs	r1, #0
 8001224:	480c      	ldr	r0, [pc, #48]	; (8001258 <homing+0x538>)
 8001226:	f009 f8b9 	bl	800a39c <HAL_TIM_PWM_Start>

        }// ES2s_UNPRESSED : Se dejó de presionar el FC2 sup


        if (ES3s_PRESSED){
 800122a:	2110      	movs	r1, #16
 800122c:	480c      	ldr	r0, [pc, #48]	; (8001260 <homing+0x540>)
 800122e:	f006 fb15 	bl	800785c <HAL_GPIO_ReadPin>
 8001232:	4603      	mov	r3, r0
 8001234:	2b00      	cmp	r3, #0
 8001236:	d16b      	bne.n	8001310 <homing+0x5f0>

            Stop_PWM_MOTOR_1;
 8001238:	2100      	movs	r1, #0
 800123a:	4805      	ldr	r0, [pc, #20]	; (8001250 <homing+0x530>)
 800123c:	f009 f9bc 	bl	800a5b8 <HAL_TIM_PWM_Stop>
            Stop_PWM_MOTOR_2;
 8001240:	2100      	movs	r1, #0
 8001242:	4804      	ldr	r0, [pc, #16]	; (8001254 <homing+0x534>)
 8001244:	f009 f9b8 	bl	800a5b8 <HAL_TIM_PWM_Stop>

            HAL_Delay(30);//Delay necesario para consultar el estado del pin vinculado al ES3s
 8001248:	201e      	movs	r0, #30
 800124a:	f005 fa81 	bl	8006750 <HAL_Delay>

            while(ES3s_PRESSED){
 800124e:	e02a      	b.n	80012a6 <homing+0x586>
 8001250:	24000700 	.word	0x24000700
 8001254:	2400074c 	.word	0x2400074c
 8001258:	24000798 	.word	0x24000798
 800125c:	58021000 	.word	0x58021000
 8001260:	58020400 	.word	0x58020400
 8001264:	24000284 	.word	0x24000284
 8001268:	24000378 	.word	0x24000378
 800126c:	58020800 	.word	0x58020800
 8001270:	08012200 	.word	0x08012200
 8001274:	24000a08 	.word	0x24000a08
 8001278:	240003c0 	.word	0x240003c0
 800127c:	24000408 	.word	0x24000408
 8001280:	08012204 	.word	0x08012204

                negative_Dir_MOTOR_3;
 8001284:	2201      	movs	r2, #1
 8001286:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800128a:	4830      	ldr	r0, [pc, #192]	; (800134c <homing+0x62c>)
 800128c:	f006 fafe 	bl	800788c <HAL_GPIO_WritePin>
                HAL_Delay(0.5);
 8001290:	2000      	movs	r0, #0
 8001292:	f005 fa5d 	bl	8006750 <HAL_Delay>
                Start_PWM_MOTOR_3;
 8001296:	2100      	movs	r1, #0
 8001298:	482d      	ldr	r0, [pc, #180]	; (8001350 <homing+0x630>)
 800129a:	f009 f87f 	bl	800a39c <HAL_TIM_PWM_Start>
                HAL_Delay(500);
 800129e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80012a2:	f005 fa55 	bl	8006750 <HAL_Delay>
            while(ES3s_PRESSED){
 80012a6:	2110      	movs	r1, #16
 80012a8:	482a      	ldr	r0, [pc, #168]	; (8001354 <homing+0x634>)
 80012aa:	f006 fad7 	bl	800785c <HAL_GPIO_ReadPin>
 80012ae:	4603      	mov	r3, r0
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d0e7      	beq.n	8001284 <homing+0x564>
            }

            Stop_PWM_MOTOR_3;
 80012b4:	2100      	movs	r1, #0
 80012b6:	4826      	ldr	r0, [pc, #152]	; (8001350 <homing+0x630>)
 80012b8:	f009 f97e 	bl	800a5b8 <HAL_TIM_PWM_Stop>
            motor3.hom = true;
 80012bc:	4b26      	ldr	r3, [pc, #152]	; (8001358 <homing+0x638>)
 80012be:	2201      	movs	r2, #1
 80012c0:	761a      	strb	r2, [r3, #24]
            HAL_UART_Transmit(&huart3,(uint8_t *)"F3\n", 4, 100);
 80012c2:	2364      	movs	r3, #100	; 0x64
 80012c4:	2204      	movs	r2, #4
 80012c6:	4925      	ldr	r1, [pc, #148]	; (800135c <homing+0x63c>)
 80012c8:	4825      	ldr	r0, [pc, #148]	; (8001360 <homing+0x640>)
 80012ca:	f00a fe6d 	bl	800bfa8 <HAL_UART_Transmit>
			HAL_Delay(30);
 80012ce:	201e      	movs	r0, #30
 80012d0:	f005 fa3e 	bl	8006750 <HAL_Delay>
            if (ES1s_UNPRESSED && !motor1.hom)Start_PWM_MOTOR_1;
 80012d4:	2101      	movs	r1, #1
 80012d6:	4823      	ldr	r0, [pc, #140]	; (8001364 <homing+0x644>)
 80012d8:	f006 fac0 	bl	800785c <HAL_GPIO_ReadPin>
 80012dc:	4603      	mov	r3, r0
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d007      	beq.n	80012f2 <homing+0x5d2>
 80012e2:	4b21      	ldr	r3, [pc, #132]	; (8001368 <homing+0x648>)
 80012e4:	7e1b      	ldrb	r3, [r3, #24]
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d103      	bne.n	80012f2 <homing+0x5d2>
 80012ea:	2100      	movs	r1, #0
 80012ec:	481f      	ldr	r0, [pc, #124]	; (800136c <homing+0x64c>)
 80012ee:	f009 f855 	bl	800a39c <HAL_TIM_PWM_Start>
            if (ES2s_UNPRESSED && !motor2.hom)Start_PWM_MOTOR_2;
 80012f2:	2104      	movs	r1, #4
 80012f4:	481b      	ldr	r0, [pc, #108]	; (8001364 <homing+0x644>)
 80012f6:	f006 fab1 	bl	800785c <HAL_GPIO_ReadPin>
 80012fa:	4603      	mov	r3, r0
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d007      	beq.n	8001310 <homing+0x5f0>
 8001300:	4b1b      	ldr	r3, [pc, #108]	; (8001370 <homing+0x650>)
 8001302:	7e1b      	ldrb	r3, [r3, #24]
 8001304:	2b00      	cmp	r3, #0
 8001306:	d103      	bne.n	8001310 <homing+0x5f0>
 8001308:	2100      	movs	r1, #0
 800130a:	481a      	ldr	r0, [pc, #104]	; (8001374 <homing+0x654>)
 800130c:	f009 f846 	bl	800a39c <HAL_TIM_PWM_Start>
        }// ES3s_UNPRESSED : Se dejó de presionar el FC3 sup



        if (motor1.hom && motor2.hom && motor3.hom){
 8001310:	4b15      	ldr	r3, [pc, #84]	; (8001368 <homing+0x648>)
 8001312:	7e1b      	ldrb	r3, [r3, #24]
 8001314:	2b00      	cmp	r3, #0
 8001316:	d010      	beq.n	800133a <homing+0x61a>
 8001318:	4b15      	ldr	r3, [pc, #84]	; (8001370 <homing+0x650>)
 800131a:	7e1b      	ldrb	r3, [r3, #24]
 800131c:	2b00      	cmp	r3, #0
 800131e:	d00c      	beq.n	800133a <homing+0x61a>
 8001320:	4b0d      	ldr	r3, [pc, #52]	; (8001358 <homing+0x638>)
 8001322:	7e1b      	ldrb	r3, [r3, #24]
 8001324:	2b00      	cmp	r3, #0
 8001326:	d008      	beq.n	800133a <homing+0x61a>
        	homFin=true;
 8001328:	4b13      	ldr	r3, [pc, #76]	; (8001378 <homing+0x658>)
 800132a:	2201      	movs	r2, #1
 800132c:	701a      	strb	r2, [r3, #0]
        	HAL_UART_Transmit(&huart3,(uint8_t *)"FH\n", 4, 100);
 800132e:	2364      	movs	r3, #100	; 0x64
 8001330:	2204      	movs	r2, #4
 8001332:	4912      	ldr	r1, [pc, #72]	; (800137c <homing+0x65c>)
 8001334:	480a      	ldr	r0, [pc, #40]	; (8001360 <homing+0x640>)
 8001336:	f00a fe37 	bl	800bfa8 <HAL_UART_Transmit>
    while (!homFin){
 800133a:	4b0f      	ldr	r3, [pc, #60]	; (8001378 <homing+0x658>)
 800133c:	781b      	ldrb	r3, [r3, #0]
 800133e:	2b00      	cmp	r3, #0
 8001340:	f43f aeb9 	beq.w	80010b6 <homing+0x396>
        }
       }


    }
 8001344:	bf00      	nop
 8001346:	bf00      	nop
 8001348:	bd80      	pop	{r7, pc}
 800134a:	bf00      	nop
 800134c:	58020800 	.word	0x58020800
 8001350:	24000798 	.word	0x24000798
 8001354:	58020400 	.word	0x58020400
 8001358:	24000408 	.word	0x24000408
 800135c:	08012208 	.word	0x08012208
 8001360:	24000a08 	.word	0x24000a08
 8001364:	58021000 	.word	0x58021000
 8001368:	24000378 	.word	0x24000378
 800136c:	24000700 	.word	0x24000700
 8001370:	240003c0 	.word	0x240003c0
 8001374:	2400074c 	.word	0x2400074c
 8001378:	24000461 	.word	0x24000461
 800137c:	0801220c 	.word	0x0801220c

08001380 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8001380:	b480      	push	{r7}
 8001382:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001384:	f3bf 8f4f 	dsb	sy
}
 8001388:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800138a:	4b06      	ldr	r3, [pc, #24]	; (80013a4 <__NVIC_SystemReset+0x24>)
 800138c:	68db      	ldr	r3, [r3, #12]
 800138e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8001392:	4904      	ldr	r1, [pc, #16]	; (80013a4 <__NVIC_SystemReset+0x24>)
 8001394:	4b04      	ldr	r3, [pc, #16]	; (80013a8 <__NVIC_SystemReset+0x28>)
 8001396:	4313      	orrs	r3, r2
 8001398:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800139a:	f3bf 8f4f 	dsb	sy
}
 800139e:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 80013a0:	bf00      	nop
 80013a2:	e7fd      	b.n	80013a0 <__NVIC_SystemReset+0x20>
 80013a4:	e000ed00 	.word	0xe000ed00
 80013a8:	05fa0004 	.word	0x05fa0004

080013ac <interpretaComando>:
bool newline_detected = false;
volatile double aux;
uint8_t auxString[10];
int i,j;

void interpretaComando(void){
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b084      	sub	sp, #16
 80013b0:	af00      	add	r7, sp, #0

	switch(rx_buffer[0]){
 80013b2:	4b95      	ldr	r3, [pc, #596]	; (8001608 <interpretaComando+0x25c>)
 80013b4:	781b      	ldrb	r3, [r3, #0]
 80013b6:	3b44      	subs	r3, #68	; 0x44
 80013b8:	2b2e      	cmp	r3, #46	; 0x2e
 80013ba:	f200 8178 	bhi.w	80016ae <interpretaComando+0x302>
 80013be:	a201      	add	r2, pc, #4	; (adr r2, 80013c4 <interpretaComando+0x18>)
 80013c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013c4:	080016a1 	.word	0x080016a1
 80013c8:	080016af 	.word	0x080016af
 80013cc:	080016af 	.word	0x080016af
 80013d0:	080016af 	.word	0x080016af
 80013d4:	08001481 	.word	0x08001481
 80013d8:	080016af 	.word	0x080016af
 80013dc:	080016af 	.word	0x080016af
 80013e0:	080016af 	.word	0x080016af
 80013e4:	080016af 	.word	0x080016af
 80013e8:	080016af 	.word	0x080016af
 80013ec:	080016af 	.word	0x080016af
 80013f0:	080016af 	.word	0x080016af
 80013f4:	08001489 	.word	0x08001489
 80013f8:	080016af 	.word	0x080016af
 80013fc:	08001691 	.word	0x08001691
 8001400:	080016af 	.word	0x080016af
 8001404:	080016af 	.word	0x080016af
 8001408:	080016af 	.word	0x080016af
 800140c:	080016af 	.word	0x080016af
 8001410:	080016af 	.word	0x080016af
 8001414:	080016af 	.word	0x080016af
 8001418:	080016af 	.word	0x080016af
 800141c:	080016af 	.word	0x080016af
 8001420:	080016af 	.word	0x080016af
 8001424:	080016af 	.word	0x080016af
 8001428:	080016af 	.word	0x080016af
 800142c:	080016af 	.word	0x080016af
 8001430:	080016af 	.word	0x080016af
 8001434:	080016af 	.word	0x080016af
 8001438:	080016af 	.word	0x080016af
 800143c:	080016af 	.word	0x080016af
 8001440:	080016af 	.word	0x080016af
 8001444:	080016a1 	.word	0x080016a1
 8001448:	080016af 	.word	0x080016af
 800144c:	080016af 	.word	0x080016af
 8001450:	080016af 	.word	0x080016af
 8001454:	08001481 	.word	0x08001481
 8001458:	080016af 	.word	0x080016af
 800145c:	080016af 	.word	0x080016af
 8001460:	080016af 	.word	0x080016af
 8001464:	080016af 	.word	0x080016af
 8001468:	080016af 	.word	0x080016af
 800146c:	080016af 	.word	0x080016af
 8001470:	080016af 	.word	0x080016af
 8001474:	08001489 	.word	0x08001489
 8001478:	080016af 	.word	0x080016af
 800147c:	08001691 	.word	0x08001691


	case 'H':
	case 'h':
		state = HOME;
 8001480:	4b62      	ldr	r3, [pc, #392]	; (800160c <interpretaComando+0x260>)
 8001482:	2203      	movs	r2, #3
 8001484:	701a      	strb	r2, [r3, #0]
	break;
 8001486:	e113      	b.n	80016b0 <interpretaComando+0x304>

	case 'P':	//Formato de la trama  :Px0.1 y0.1 z-0.5(Eje, valor, espacio, Eje, valor, espacio, Eje, valor)
	case 'p':
		//TODO: VER SI SE PUEDE DEFINIR i,j como int. y asi borrar la variable flagError
		//flagErrorEndStop = 0;
		i = 1;
 8001488:	4b61      	ldr	r3, [pc, #388]	; (8001610 <interpretaComando+0x264>)
 800148a:	2201      	movs	r2, #1
 800148c:	601a      	str	r2, [r3, #0]
		j = 0;
 800148e:	4b61      	ldr	r3, [pc, #388]	; (8001614 <interpretaComando+0x268>)
 8001490:	2200      	movs	r2, #0
 8001492:	601a      	str	r2, [r3, #0]
		while(rx_buffer[i] != 0 && !newline_detected){
 8001494:	e0ed      	b.n	8001672 <interpretaComando+0x2c6>
			if(rx_buffer[i] == 'x'){
 8001496:	4b5e      	ldr	r3, [pc, #376]	; (8001610 <interpretaComando+0x264>)
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	4a5b      	ldr	r2, [pc, #364]	; (8001608 <interpretaComando+0x25c>)
 800149c:	5cd3      	ldrb	r3, [r2, r3]
 800149e:	2b78      	cmp	r3, #120	; 0x78
 80014a0:	d13b      	bne.n	800151a <interpretaComando+0x16e>
				while(rx_buffer[i+1] != ' '){			//Almacenar dato en buffer hasta que se encuentre un espacio
 80014a2:	e012      	b.n	80014ca <interpretaComando+0x11e>
					auxString[j] = rx_buffer[i+1];
 80014a4:	4b5a      	ldr	r3, [pc, #360]	; (8001610 <interpretaComando+0x264>)
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	1c5a      	adds	r2, r3, #1
 80014aa:	4b5a      	ldr	r3, [pc, #360]	; (8001614 <interpretaComando+0x268>)
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	4956      	ldr	r1, [pc, #344]	; (8001608 <interpretaComando+0x25c>)
 80014b0:	5c89      	ldrb	r1, [r1, r2]
 80014b2:	4a59      	ldr	r2, [pc, #356]	; (8001618 <interpretaComando+0x26c>)
 80014b4:	54d1      	strb	r1, [r2, r3]
					j++;
 80014b6:	4b57      	ldr	r3, [pc, #348]	; (8001614 <interpretaComando+0x268>)
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	3301      	adds	r3, #1
 80014bc:	4a55      	ldr	r2, [pc, #340]	; (8001614 <interpretaComando+0x268>)
 80014be:	6013      	str	r3, [r2, #0]
					i++;
 80014c0:	4b53      	ldr	r3, [pc, #332]	; (8001610 <interpretaComando+0x264>)
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	3301      	adds	r3, #1
 80014c6:	4a52      	ldr	r2, [pc, #328]	; (8001610 <interpretaComando+0x264>)
 80014c8:	6013      	str	r3, [r2, #0]
				while(rx_buffer[i+1] != ' '){			//Almacenar dato en buffer hasta que se encuentre un espacio
 80014ca:	4b51      	ldr	r3, [pc, #324]	; (8001610 <interpretaComando+0x264>)
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	3301      	adds	r3, #1
 80014d0:	4a4d      	ldr	r2, [pc, #308]	; (8001608 <interpretaComando+0x25c>)
 80014d2:	5cd3      	ldrb	r3, [r2, r3]
 80014d4:	2b20      	cmp	r3, #32
 80014d6:	d1e5      	bne.n	80014a4 <interpretaComando+0xf8>
				}
				Pfin.x = strtod(&auxString[0], NULL);
 80014d8:	2100      	movs	r1, #0
 80014da:	484f      	ldr	r0, [pc, #316]	; (8001618 <interpretaComando+0x26c>)
 80014dc:	f00e fcb6 	bl	800fe4c <strtod>
 80014e0:	eeb0 7b40 	vmov.f64	d7, d0
 80014e4:	4b4d      	ldr	r3, [pc, #308]	; (800161c <interpretaComando+0x270>)
 80014e6:	ed83 7b00 	vstr	d7, [r3]
				for (int k = 0; k <= 10; k++) {
 80014ea:	2300      	movs	r3, #0
 80014ec:	60fb      	str	r3, [r7, #12]
 80014ee:	e007      	b.n	8001500 <interpretaComando+0x154>
					auxString[k] = 0;
 80014f0:	4a49      	ldr	r2, [pc, #292]	; (8001618 <interpretaComando+0x26c>)
 80014f2:	68fb      	ldr	r3, [r7, #12]
 80014f4:	4413      	add	r3, r2
 80014f6:	2200      	movs	r2, #0
 80014f8:	701a      	strb	r2, [r3, #0]
				for (int k = 0; k <= 10; k++) {
 80014fa:	68fb      	ldr	r3, [r7, #12]
 80014fc:	3301      	adds	r3, #1
 80014fe:	60fb      	str	r3, [r7, #12]
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	2b0a      	cmp	r3, #10
 8001504:	ddf4      	ble.n	80014f0 <interpretaComando+0x144>
				}
				j=0;
 8001506:	4b43      	ldr	r3, [pc, #268]	; (8001614 <interpretaComando+0x268>)
 8001508:	2200      	movs	r2, #0
 800150a:	601a      	str	r2, [r3, #0]
				HAL_UART_Transmit(&huart3, (uint8_t *)"Px_ok\n", 7, 100);
 800150c:	2364      	movs	r3, #100	; 0x64
 800150e:	2207      	movs	r2, #7
 8001510:	4943      	ldr	r1, [pc, #268]	; (8001620 <interpretaComando+0x274>)
 8001512:	4844      	ldr	r0, [pc, #272]	; (8001624 <interpretaComando+0x278>)
 8001514:	f00a fd48 	bl	800bfa8 <HAL_UART_Transmit>
 8001518:	e0a6      	b.n	8001668 <interpretaComando+0x2bc>
			}
			else if(rx_buffer[i] == 'y'){
 800151a:	4b3d      	ldr	r3, [pc, #244]	; (8001610 <interpretaComando+0x264>)
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	4a3a      	ldr	r2, [pc, #232]	; (8001608 <interpretaComando+0x25c>)
 8001520:	5cd3      	ldrb	r3, [r2, r3]
 8001522:	2b79      	cmp	r3, #121	; 0x79
 8001524:	d13b      	bne.n	800159e <interpretaComando+0x1f2>
				while(rx_buffer[i+1] != ' '){			//Almacenar dato en buffer hasta que se encuentre un espacio
 8001526:	e012      	b.n	800154e <interpretaComando+0x1a2>
					auxString[j] = rx_buffer[i+1];
 8001528:	4b39      	ldr	r3, [pc, #228]	; (8001610 <interpretaComando+0x264>)
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	1c5a      	adds	r2, r3, #1
 800152e:	4b39      	ldr	r3, [pc, #228]	; (8001614 <interpretaComando+0x268>)
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	4935      	ldr	r1, [pc, #212]	; (8001608 <interpretaComando+0x25c>)
 8001534:	5c89      	ldrb	r1, [r1, r2]
 8001536:	4a38      	ldr	r2, [pc, #224]	; (8001618 <interpretaComando+0x26c>)
 8001538:	54d1      	strb	r1, [r2, r3]
					j++;
 800153a:	4b36      	ldr	r3, [pc, #216]	; (8001614 <interpretaComando+0x268>)
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	3301      	adds	r3, #1
 8001540:	4a34      	ldr	r2, [pc, #208]	; (8001614 <interpretaComando+0x268>)
 8001542:	6013      	str	r3, [r2, #0]
					i++;
 8001544:	4b32      	ldr	r3, [pc, #200]	; (8001610 <interpretaComando+0x264>)
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	3301      	adds	r3, #1
 800154a:	4a31      	ldr	r2, [pc, #196]	; (8001610 <interpretaComando+0x264>)
 800154c:	6013      	str	r3, [r2, #0]
				while(rx_buffer[i+1] != ' '){			//Almacenar dato en buffer hasta que se encuentre un espacio
 800154e:	4b30      	ldr	r3, [pc, #192]	; (8001610 <interpretaComando+0x264>)
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	3301      	adds	r3, #1
 8001554:	4a2c      	ldr	r2, [pc, #176]	; (8001608 <interpretaComando+0x25c>)
 8001556:	5cd3      	ldrb	r3, [r2, r3]
 8001558:	2b20      	cmp	r3, #32
 800155a:	d1e5      	bne.n	8001528 <interpretaComando+0x17c>
				}
				Pfin.y = strtod(&auxString[0], NULL);
 800155c:	2100      	movs	r1, #0
 800155e:	482e      	ldr	r0, [pc, #184]	; (8001618 <interpretaComando+0x26c>)
 8001560:	f00e fc74 	bl	800fe4c <strtod>
 8001564:	eeb0 7b40 	vmov.f64	d7, d0
 8001568:	4b2c      	ldr	r3, [pc, #176]	; (800161c <interpretaComando+0x270>)
 800156a:	ed83 7b02 	vstr	d7, [r3, #8]
				for (int k = 0; k <= 10; k++) {
 800156e:	2300      	movs	r3, #0
 8001570:	60bb      	str	r3, [r7, #8]
 8001572:	e007      	b.n	8001584 <interpretaComando+0x1d8>
					auxString[k] = 0;
 8001574:	4a28      	ldr	r2, [pc, #160]	; (8001618 <interpretaComando+0x26c>)
 8001576:	68bb      	ldr	r3, [r7, #8]
 8001578:	4413      	add	r3, r2
 800157a:	2200      	movs	r2, #0
 800157c:	701a      	strb	r2, [r3, #0]
				for (int k = 0; k <= 10; k++) {
 800157e:	68bb      	ldr	r3, [r7, #8]
 8001580:	3301      	adds	r3, #1
 8001582:	60bb      	str	r3, [r7, #8]
 8001584:	68bb      	ldr	r3, [r7, #8]
 8001586:	2b0a      	cmp	r3, #10
 8001588:	ddf4      	ble.n	8001574 <interpretaComando+0x1c8>
				}
				j=0;
 800158a:	4b22      	ldr	r3, [pc, #136]	; (8001614 <interpretaComando+0x268>)
 800158c:	2200      	movs	r2, #0
 800158e:	601a      	str	r2, [r3, #0]
				HAL_UART_Transmit(&huart3,(uint8_t *)"Py_ok\n", 7, 100);
 8001590:	2364      	movs	r3, #100	; 0x64
 8001592:	2207      	movs	r2, #7
 8001594:	4924      	ldr	r1, [pc, #144]	; (8001628 <interpretaComando+0x27c>)
 8001596:	4823      	ldr	r0, [pc, #140]	; (8001624 <interpretaComando+0x278>)
 8001598:	f00a fd06 	bl	800bfa8 <HAL_UART_Transmit>
 800159c:	e064      	b.n	8001668 <interpretaComando+0x2bc>
			}
			else if(rx_buffer[i] == 'z'){
 800159e:	4b1c      	ldr	r3, [pc, #112]	; (8001610 <interpretaComando+0x264>)
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	4a19      	ldr	r2, [pc, #100]	; (8001608 <interpretaComando+0x25c>)
 80015a4:	5cd3      	ldrb	r3, [r2, r3]
 80015a6:	2b7a      	cmp	r3, #122	; 0x7a
 80015a8:	d15e      	bne.n	8001668 <interpretaComando+0x2bc>
				while(rx_buffer[i+1] != '\n' && rx_buffer[i+1] != 0){			//Almacenar dato en buffer hasta que se encuentre un espacio
 80015aa:	e012      	b.n	80015d2 <interpretaComando+0x226>
					auxString[j] = rx_buffer[i+1];
 80015ac:	4b18      	ldr	r3, [pc, #96]	; (8001610 <interpretaComando+0x264>)
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	1c5a      	adds	r2, r3, #1
 80015b2:	4b18      	ldr	r3, [pc, #96]	; (8001614 <interpretaComando+0x268>)
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	4914      	ldr	r1, [pc, #80]	; (8001608 <interpretaComando+0x25c>)
 80015b8:	5c89      	ldrb	r1, [r1, r2]
 80015ba:	4a17      	ldr	r2, [pc, #92]	; (8001618 <interpretaComando+0x26c>)
 80015bc:	54d1      	strb	r1, [r2, r3]
					j++;
 80015be:	4b15      	ldr	r3, [pc, #84]	; (8001614 <interpretaComando+0x268>)
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	3301      	adds	r3, #1
 80015c4:	4a13      	ldr	r2, [pc, #76]	; (8001614 <interpretaComando+0x268>)
 80015c6:	6013      	str	r3, [r2, #0]
					i++;
 80015c8:	4b11      	ldr	r3, [pc, #68]	; (8001610 <interpretaComando+0x264>)
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	3301      	adds	r3, #1
 80015ce:	4a10      	ldr	r2, [pc, #64]	; (8001610 <interpretaComando+0x264>)
 80015d0:	6013      	str	r3, [r2, #0]
				while(rx_buffer[i+1] != '\n' && rx_buffer[i+1] != 0){			//Almacenar dato en buffer hasta que se encuentre un espacio
 80015d2:	4b0f      	ldr	r3, [pc, #60]	; (8001610 <interpretaComando+0x264>)
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	3301      	adds	r3, #1
 80015d8:	4a0b      	ldr	r2, [pc, #44]	; (8001608 <interpretaComando+0x25c>)
 80015da:	5cd3      	ldrb	r3, [r2, r3]
 80015dc:	2b0a      	cmp	r3, #10
 80015de:	d006      	beq.n	80015ee <interpretaComando+0x242>
 80015e0:	4b0b      	ldr	r3, [pc, #44]	; (8001610 <interpretaComando+0x264>)
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	3301      	adds	r3, #1
 80015e6:	4a08      	ldr	r2, [pc, #32]	; (8001608 <interpretaComando+0x25c>)
 80015e8:	5cd3      	ldrb	r3, [r2, r3]
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d1de      	bne.n	80015ac <interpretaComando+0x200>
				}
				Pfin.z = strtod(&auxString[0], NULL);
 80015ee:	2100      	movs	r1, #0
 80015f0:	4809      	ldr	r0, [pc, #36]	; (8001618 <interpretaComando+0x26c>)
 80015f2:	f00e fc2b 	bl	800fe4c <strtod>
 80015f6:	eeb0 7b40 	vmov.f64	d7, d0
 80015fa:	4b08      	ldr	r3, [pc, #32]	; (800161c <interpretaComando+0x270>)
 80015fc:	ed83 7b04 	vstr	d7, [r3, #16]
				for (int k = 0; k <= 10; k++) {
 8001600:	2300      	movs	r3, #0
 8001602:	607b      	str	r3, [r7, #4]
 8001604:	e01a      	b.n	800163c <interpretaComando+0x290>
 8001606:	bf00      	nop
 8001608:	24000584 	.word	0x24000584
 800160c:	24000460 	.word	0x24000460
 8001610:	24000294 	.word	0x24000294
 8001614:	24000298 	.word	0x24000298
 8001618:	24000288 	.word	0x24000288
 800161c:	240004c0 	.word	0x240004c0
 8001620:	08012210 	.word	0x08012210
 8001624:	24000a08 	.word	0x24000a08
 8001628:	08012218 	.word	0x08012218
					auxString[k] = 0;
 800162c:	4a22      	ldr	r2, [pc, #136]	; (80016b8 <interpretaComando+0x30c>)
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	4413      	add	r3, r2
 8001632:	2200      	movs	r2, #0
 8001634:	701a      	strb	r2, [r3, #0]
				for (int k = 0; k <= 10; k++) {
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	3301      	adds	r3, #1
 800163a:	607b      	str	r3, [r7, #4]
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	2b0a      	cmp	r3, #10
 8001640:	ddf4      	ble.n	800162c <interpretaComando+0x280>
				}
				j=0;
 8001642:	4b1e      	ldr	r3, [pc, #120]	; (80016bc <interpretaComando+0x310>)
 8001644:	2200      	movs	r2, #0
 8001646:	601a      	str	r2, [r3, #0]
				HAL_UART_Transmit(&huart3,(uint8_t *)"Pz_ok\n", 7, 100);
 8001648:	2364      	movs	r3, #100	; 0x64
 800164a:	2207      	movs	r2, #7
 800164c:	491c      	ldr	r1, [pc, #112]	; (80016c0 <interpretaComando+0x314>)
 800164e:	481d      	ldr	r0, [pc, #116]	; (80016c4 <interpretaComando+0x318>)
 8001650:	f00a fcaa 	bl	800bfa8 <HAL_UART_Transmit>
				if(rx_buffer[i+1] == '\n'){	//Detectar salto de línea
 8001654:	4b1c      	ldr	r3, [pc, #112]	; (80016c8 <interpretaComando+0x31c>)
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	3301      	adds	r3, #1
 800165a:	4a1c      	ldr	r2, [pc, #112]	; (80016cc <interpretaComando+0x320>)
 800165c:	5cd3      	ldrb	r3, [r2, r3]
 800165e:	2b0a      	cmp	r3, #10
 8001660:	d102      	bne.n	8001668 <interpretaComando+0x2bc>
				    newline_detected = true;
 8001662:	4b1b      	ldr	r3, [pc, #108]	; (80016d0 <interpretaComando+0x324>)
 8001664:	2201      	movs	r2, #1
 8001666:	701a      	strb	r2, [r3, #0]
				}
			}
			i++;
 8001668:	4b17      	ldr	r3, [pc, #92]	; (80016c8 <interpretaComando+0x31c>)
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	3301      	adds	r3, #1
 800166e:	4a16      	ldr	r2, [pc, #88]	; (80016c8 <interpretaComando+0x31c>)
 8001670:	6013      	str	r3, [r2, #0]
		while(rx_buffer[i] != 0 && !newline_detected){
 8001672:	4b15      	ldr	r3, [pc, #84]	; (80016c8 <interpretaComando+0x31c>)
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	4a15      	ldr	r2, [pc, #84]	; (80016cc <interpretaComando+0x320>)
 8001678:	5cd3      	ldrb	r3, [r2, r3]
 800167a:	2b00      	cmp	r3, #0
 800167c:	d004      	beq.n	8001688 <interpretaComando+0x2dc>
 800167e:	4b14      	ldr	r3, [pc, #80]	; (80016d0 <interpretaComando+0x324>)
 8001680:	781b      	ldrb	r3, [r3, #0]
 8001682:	2b00      	cmp	r3, #0
 8001684:	f43f af07 	beq.w	8001496 <interpretaComando+0xea>
		}

		receptionFlag = true;
 8001688:	4b12      	ldr	r3, [pc, #72]	; (80016d4 <interpretaComando+0x328>)
 800168a:	2201      	movs	r2, #1
 800168c:	701a      	strb	r2, [r3, #0]
		break;
 800168e:	e00f      	b.n	80016b0 <interpretaComando+0x304>


	case 'r':
	case 'R':
		HAL_UART_Transmit(&huart3, (uint8_t *)"Resetting...\n", 14, 100);
 8001690:	2364      	movs	r3, #100	; 0x64
 8001692:	220e      	movs	r2, #14
 8001694:	4910      	ldr	r1, [pc, #64]	; (80016d8 <interpretaComando+0x32c>)
 8001696:	480b      	ldr	r0, [pc, #44]	; (80016c4 <interpretaComando+0x318>)
 8001698:	f00a fc86 	bl	800bfa8 <HAL_UART_Transmit>
		NVIC_SystemReset();
 800169c:	f7ff fe70 	bl	8001380 <__NVIC_SystemReset>

		break;

	case 'd':
	case 'D':
		readFile = true;
 80016a0:	4b0e      	ldr	r3, [pc, #56]	; (80016dc <interpretaComando+0x330>)
 80016a2:	2201      	movs	r2, #1
 80016a4:	701a      	strb	r2, [r3, #0]
		state = DEMO;
 80016a6:	4b0e      	ldr	r3, [pc, #56]	; (80016e0 <interpretaComando+0x334>)
 80016a8:	2204      	movs	r2, #4
 80016aa:	701a      	strb	r2, [r3, #0]
		break;
 80016ac:	e000      	b.n	80016b0 <interpretaComando+0x304>

	default:break;
 80016ae:	bf00      	nop


	}

}
 80016b0:	bf00      	nop
 80016b2:	3710      	adds	r7, #16
 80016b4:	46bd      	mov	sp, r7
 80016b6:	bd80      	pop	{r7, pc}
 80016b8:	24000288 	.word	0x24000288
 80016bc:	24000298 	.word	0x24000298
 80016c0:	08012220 	.word	0x08012220
 80016c4:	24000a08 	.word	0x24000a08
 80016c8:	24000294 	.word	0x24000294
 80016cc:	24000584 	.word	0x24000584
 80016d0:	24000286 	.word	0x24000286
 80016d4:	240005a3 	.word	0x240005a3
 80016d8:	08012228 	.word	0x08012228
 80016dc:	240005a4 	.word	0x240005a4
 80016e0:	24000460 	.word	0x24000460
 80016e4:	00000000 	.word	0x00000000

080016e8 <inverseKinematic>:
double A1, B1, C1, XJ1_1, XJ1_2, YJ1_1, YJ1_2, ZJ1_1, ZJ1_2, A11, A12, A13, A14, A15;
double A2, B2, C2, XJ2_1, XJ2_2, YJ2_1, YJ2_2, ZJ2_1, ZJ2_2;
double A3, B3, C3, XJ3_1, XJ3_2, YJ3_1, YJ3_2, ZJ3_1, ZJ3_2;


void inverseKinematic(Vec3D _Pfin) {
 80016e8:	b580      	push	{r7, lr}
 80016ea:	ed2d 8b04 	vpush	{d8-d9}
 80016ee:	b086      	sub	sp, #24
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	eeb0 5b40 	vmov.f64	d5, d0
 80016f6:	eeb0 6b41 	vmov.f64	d6, d1
 80016fa:	eeb0 7b42 	vmov.f64	d7, d2
 80016fe:	ed87 5b00 	vstr	d5, [r7]
 8001702:	ed87 6b02 	vstr	d6, [r7, #8]
 8001706:	ed87 7b04 	vstr	d7, [r7, #16]

	A1 = 1.0 + pow(((-2.0  * (R + (_Pfin.y - r))) / (2 * _Pfin.z)), 2);
 800170a:	ed97 7b02 	vldr	d7, [r7, #8]
 800170e:	ed9f 6bee 	vldr	d6, [pc, #952]	; 8001ac8 <inverseKinematic+0x3e0>
 8001712:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001716:	ed9f 6bee 	vldr	d6, [pc, #952]	; 8001ad0 <inverseKinematic+0x3e8>
 800171a:	ee37 7b06 	vadd.f64	d7, d7, d6
 800171e:	eeb8 6b00 	vmov.f64	d6, #128	; 0xc0000000 -2.0
 8001722:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001726:	ed97 7b04 	vldr	d7, [r7, #16]
 800172a:	ee37 7b07 	vadd.f64	d7, d7, d7
 800172e:	ee86 5b07 	vdiv.f64	d5, d6, d7
 8001732:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8001736:	eeb0 0b45 	vmov.f64	d0, d5
 800173a:	f010 f925 	bl	8011988 <pow>
 800173e:	eeb0 7b40 	vmov.f64	d7, d0
 8001742:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8001746:	ee37 7b06 	vadd.f64	d7, d7, d6
 800174a:	4bf9      	ldr	r3, [pc, #996]	; (8001b30 <inverseKinematic+0x448>)
 800174c:	ed83 7b00 	vstr	d7, [r3]
	A2 = 4.0 + pow(((2.0 * sqrt(3.0) * R * C30 + 2.0 * R * S30 - 2.0 * sqrt(3) * (_Pfin.x + r * C30) - 2.0 * (_Pfin.y + r * S30)) / (2.0 * _Pfin.z)), 2.0);
 8001750:	ed97 7b00 	vldr	d7, [r7]
 8001754:	ed9f 6be0 	vldr	d6, [pc, #896]	; 8001ad8 <inverseKinematic+0x3f0>
 8001758:	ee37 7b06 	vadd.f64	d7, d7, d6
 800175c:	ed9f 6be0 	vldr	d6, [pc, #896]	; 8001ae0 <inverseKinematic+0x3f8>
 8001760:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001764:	ed9f 6be0 	vldr	d6, [pc, #896]	; 8001ae8 <inverseKinematic+0x400>
 8001768:	ee36 6b47 	vsub.f64	d6, d6, d7
 800176c:	ed97 7b02 	vldr	d7, [r7, #8]
 8001770:	ed9f 5bdf 	vldr	d5, [pc, #892]	; 8001af0 <inverseKinematic+0x408>
 8001774:	ee37 7b05 	vadd.f64	d7, d7, d5
 8001778:	ee37 7b07 	vadd.f64	d7, d7, d7
 800177c:	ee36 6b47 	vsub.f64	d6, d6, d7
 8001780:	ed97 7b04 	vldr	d7, [r7, #16]
 8001784:	ee37 7b07 	vadd.f64	d7, d7, d7
 8001788:	ee86 5b07 	vdiv.f64	d5, d6, d7
 800178c:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8001790:	eeb0 0b45 	vmov.f64	d0, d5
 8001794:	f010 f8f8 	bl	8011988 <pow>
 8001798:	eeb0 7b40 	vmov.f64	d7, d0
 800179c:	eeb1 6b00 	vmov.f64	d6, #16	; 0x40800000  4.0
 80017a0:	ee37 7b06 	vadd.f64	d7, d7, d6
 80017a4:	4be3      	ldr	r3, [pc, #908]	; (8001b34 <inverseKinematic+0x44c>)
 80017a6:	ed83 7b00 	vstr	d7, [r3]
	A3 = 4.0 + pow(((2.0 * sqrt(3.0) * (_Pfin.x + r * C150) - 2.0 * (_Pfin.y + r * S150) - 2.0 * sqrt(3) * R * C150 + 2.0 * R * S150) / (2.0 * _Pfin.z)), 2.0);
 80017aa:	ed97 7b00 	vldr	d7, [r7]
 80017ae:	ed9f 6bca 	vldr	d6, [pc, #808]	; 8001ad8 <inverseKinematic+0x3f0>
 80017b2:	ee37 7b46 	vsub.f64	d7, d7, d6
 80017b6:	ed9f 6bca 	vldr	d6, [pc, #808]	; 8001ae0 <inverseKinematic+0x3f8>
 80017ba:	ee27 6b06 	vmul.f64	d6, d7, d6
 80017be:	ed97 7b02 	vldr	d7, [r7, #8]
 80017c2:	ed9f 5bcb 	vldr	d5, [pc, #812]	; 8001af0 <inverseKinematic+0x408>
 80017c6:	ee37 7b05 	vadd.f64	d7, d7, d5
 80017ca:	ee37 7b07 	vadd.f64	d7, d7, d7
 80017ce:	ee36 7b47 	vsub.f64	d7, d6, d7
 80017d2:	ed9f 6bc9 	vldr	d6, [pc, #804]	; 8001af8 <inverseKinematic+0x410>
 80017d6:	ee37 7b06 	vadd.f64	d7, d7, d6
 80017da:	ed9f 6bbd 	vldr	d6, [pc, #756]	; 8001ad0 <inverseKinematic+0x3e8>
 80017de:	ee37 6b06 	vadd.f64	d6, d7, d6
 80017e2:	ed97 7b04 	vldr	d7, [r7, #16]
 80017e6:	ee37 7b07 	vadd.f64	d7, d7, d7
 80017ea:	ee86 5b07 	vdiv.f64	d5, d6, d7
 80017ee:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 80017f2:	eeb0 0b45 	vmov.f64	d0, d5
 80017f6:	f010 f8c7 	bl	8011988 <pow>
 80017fa:	eeb0 7b40 	vmov.f64	d7, d0
 80017fe:	eeb1 6b00 	vmov.f64	d6, #16	; 0x40800000  4.0
 8001802:	ee37 7b06 	vadd.f64	d7, d7, d6
 8001806:	4bcc      	ldr	r3, [pc, #816]	; (8001b38 <inverseKinematic+0x450>)
 8001808:	ed83 7b00 	vstr	d7, [r3]

	B1 = (2.0 * R) + (2.0 * ((-2.0  * (R + (_Pfin.y - r))) / (2.0 * _Pfin.z)) * ((-pow(R, 2.0) + pow(L1, 2.0) + pow((_Pfin.y - r), 2.0) + pow(_Pfin.z, 2.0) - pow(L2, 2.0) + pow(_Pfin.x, 2)) / (2 * _Pfin.z)));
 800180c:	ed97 7b02 	vldr	d7, [r7, #8]
 8001810:	ed9f 6bad 	vldr	d6, [pc, #692]	; 8001ac8 <inverseKinematic+0x3e0>
 8001814:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001818:	ed9f 6bad 	vldr	d6, [pc, #692]	; 8001ad0 <inverseKinematic+0x3e8>
 800181c:	ee37 7b06 	vadd.f64	d7, d7, d6
 8001820:	eeb8 6b00 	vmov.f64	d6, #128	; 0xc0000000 -2.0
 8001824:	ee27 5b06 	vmul.f64	d5, d7, d6
 8001828:	ed97 7b04 	vldr	d7, [r7, #16]
 800182c:	ee37 6b07 	vadd.f64	d6, d7, d7
 8001830:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8001834:	ee37 8b07 	vadd.f64	d8, d7, d7
 8001838:	ed97 7b02 	vldr	d7, [r7, #8]
 800183c:	ed9f 6ba2 	vldr	d6, [pc, #648]	; 8001ac8 <inverseKinematic+0x3e0>
 8001840:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001844:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8001848:	eeb0 0b47 	vmov.f64	d0, d7
 800184c:	f010 f89c 	bl	8011988 <pow>
 8001850:	eeb0 7b40 	vmov.f64	d7, d0
 8001854:	ed9f 6baa 	vldr	d6, [pc, #680]	; 8001b00 <inverseKinematic+0x418>
 8001858:	ee37 9b06 	vadd.f64	d9, d7, d6
 800185c:	ed97 7b04 	vldr	d7, [r7, #16]
 8001860:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8001864:	eeb0 0b47 	vmov.f64	d0, d7
 8001868:	f010 f88e 	bl	8011988 <pow>
 800186c:	eeb0 7b40 	vmov.f64	d7, d0
 8001870:	ee39 7b07 	vadd.f64	d7, d9, d7
 8001874:	ed9f 6ba4 	vldr	d6, [pc, #656]	; 8001b08 <inverseKinematic+0x420>
 8001878:	ee37 9b46 	vsub.f64	d9, d7, d6
 800187c:	ed97 7b00 	vldr	d7, [r7]
 8001880:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8001884:	eeb0 0b47 	vmov.f64	d0, d7
 8001888:	f010 f87e 	bl	8011988 <pow>
 800188c:	eeb0 7b40 	vmov.f64	d7, d0
 8001890:	ee39 5b07 	vadd.f64	d5, d9, d7
 8001894:	ed97 7b04 	vldr	d7, [r7, #16]
 8001898:	ee37 6b07 	vadd.f64	d6, d7, d7
 800189c:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80018a0:	ee28 7b07 	vmul.f64	d7, d8, d7
 80018a4:	ed9f 6b9a 	vldr	d6, [pc, #616]	; 8001b10 <inverseKinematic+0x428>
 80018a8:	ee37 7b06 	vadd.f64	d7, d7, d6
 80018ac:	4ba3      	ldr	r3, [pc, #652]	; (8001b3c <inverseKinematic+0x454>)
 80018ae:	ed83 7b00 	vstr	d7, [r3]
	B2 = -2.0 * sqrt(3) * R * C30 - 2.0 * R * S30 + 2.0 * (((2.0 * sqrt(3) * R * C30 + 2.0 * R * S30)	+ (-2 * sqrt(3) * (_Pfin.x + r * C30)	- 2.0 * (_Pfin.y + r * S30))) / (2 * _Pfin.z)) * ((-pow(R, 2) + pow(L1, 2) + pow((_Pfin.x + r * C30), 2) + pow((_Pfin.y + r * S30), 2) + pow(_Pfin.z, 2) - pow(L2, 2)) / (2 * _Pfin.z));
 80018b2:	ed97 7b00 	vldr	d7, [r7]
 80018b6:	ed9f 6b88 	vldr	d6, [pc, #544]	; 8001ad8 <inverseKinematic+0x3f0>
 80018ba:	ee37 7b06 	vadd.f64	d7, d7, d6
 80018be:	ed9f 6b96 	vldr	d6, [pc, #600]	; 8001b18 <inverseKinematic+0x430>
 80018c2:	ee27 6b06 	vmul.f64	d6, d7, d6
 80018c6:	ed97 7b02 	vldr	d7, [r7, #8]
 80018ca:	ed9f 5b89 	vldr	d5, [pc, #548]	; 8001af0 <inverseKinematic+0x408>
 80018ce:	ee37 7b05 	vadd.f64	d7, d7, d5
 80018d2:	ee37 7b07 	vadd.f64	d7, d7, d7
 80018d6:	ee36 7b47 	vsub.f64	d7, d6, d7
 80018da:	ed9f 6b83 	vldr	d6, [pc, #524]	; 8001ae8 <inverseKinematic+0x400>
 80018de:	ee37 5b06 	vadd.f64	d5, d7, d6
 80018e2:	ed97 7b04 	vldr	d7, [r7, #16]
 80018e6:	ee37 6b07 	vadd.f64	d6, d7, d7
 80018ea:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80018ee:	ee37 8b07 	vadd.f64	d8, d7, d7
 80018f2:	ed97 7b00 	vldr	d7, [r7]
 80018f6:	ed9f 6b78 	vldr	d6, [pc, #480]	; 8001ad8 <inverseKinematic+0x3f0>
 80018fa:	ee37 7b06 	vadd.f64	d7, d7, d6
 80018fe:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8001902:	eeb0 0b47 	vmov.f64	d0, d7
 8001906:	f010 f83f 	bl	8011988 <pow>
 800190a:	eeb0 7b40 	vmov.f64	d7, d0
 800190e:	ed9f 6b7c 	vldr	d6, [pc, #496]	; 8001b00 <inverseKinematic+0x418>
 8001912:	ee37 9b06 	vadd.f64	d9, d7, d6
 8001916:	ed97 7b02 	vldr	d7, [r7, #8]
 800191a:	ed9f 6b75 	vldr	d6, [pc, #468]	; 8001af0 <inverseKinematic+0x408>
 800191e:	ee37 7b06 	vadd.f64	d7, d7, d6
 8001922:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8001926:	eeb0 0b47 	vmov.f64	d0, d7
 800192a:	f010 f82d 	bl	8011988 <pow>
 800192e:	eeb0 7b40 	vmov.f64	d7, d0
 8001932:	ee39 9b07 	vadd.f64	d9, d9, d7
 8001936:	ed97 7b04 	vldr	d7, [r7, #16]
 800193a:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 800193e:	eeb0 0b47 	vmov.f64	d0, d7
 8001942:	f010 f821 	bl	8011988 <pow>
 8001946:	eeb0 7b40 	vmov.f64	d7, d0
 800194a:	ee39 7b07 	vadd.f64	d7, d9, d7
 800194e:	ed9f 6b6e 	vldr	d6, [pc, #440]	; 8001b08 <inverseKinematic+0x420>
 8001952:	ee37 5b46 	vsub.f64	d5, d7, d6
 8001956:	ed97 7b04 	vldr	d7, [r7, #16]
 800195a:	ee37 6b07 	vadd.f64	d6, d7, d7
 800195e:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8001962:	ee28 7b07 	vmul.f64	d7, d8, d7
 8001966:	ed9f 6b60 	vldr	d6, [pc, #384]	; 8001ae8 <inverseKinematic+0x400>
 800196a:	ee37 7b46 	vsub.f64	d7, d7, d6
 800196e:	4b74      	ldr	r3, [pc, #464]	; (8001b40 <inverseKinematic+0x458>)
 8001970:	ed83 7b00 	vstr	d7, [r3]
	B3 = 2.0 * sqrt(3) * R * C150 - 2.0 * R * S150 + 2.0 * ((2.0 * sqrt(3) * (_Pfin.x + r * C150) - 2.0 * (_Pfin.y + r * S150) - 2.0 * sqrt(3) * R * C150 + 2.0 * R * S150) / (2 * _Pfin.z)) * ((pow((_Pfin.x + r * C150), 2) + pow((_Pfin.y + r * S150), 2) + pow(_Pfin.z, 2) - pow(L2, 2) - pow(R, 2) + pow(L1, 2)) / (2 * _Pfin.z));
 8001974:	ed97 7b00 	vldr	d7, [r7]
 8001978:	ed9f 6b57 	vldr	d6, [pc, #348]	; 8001ad8 <inverseKinematic+0x3f0>
 800197c:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001980:	ed9f 6b57 	vldr	d6, [pc, #348]	; 8001ae0 <inverseKinematic+0x3f8>
 8001984:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001988:	ed97 7b02 	vldr	d7, [r7, #8]
 800198c:	ed9f 5b58 	vldr	d5, [pc, #352]	; 8001af0 <inverseKinematic+0x408>
 8001990:	ee37 7b05 	vadd.f64	d7, d7, d5
 8001994:	ee37 7b07 	vadd.f64	d7, d7, d7
 8001998:	ee36 7b47 	vsub.f64	d7, d6, d7
 800199c:	ed9f 6b56 	vldr	d6, [pc, #344]	; 8001af8 <inverseKinematic+0x410>
 80019a0:	ee37 7b06 	vadd.f64	d7, d7, d6
 80019a4:	ed9f 6b4a 	vldr	d6, [pc, #296]	; 8001ad0 <inverseKinematic+0x3e8>
 80019a8:	ee37 5b06 	vadd.f64	d5, d7, d6
 80019ac:	ed97 7b04 	vldr	d7, [r7, #16]
 80019b0:	ee37 6b07 	vadd.f64	d6, d7, d7
 80019b4:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80019b8:	ee37 8b07 	vadd.f64	d8, d7, d7
 80019bc:	ed97 7b00 	vldr	d7, [r7]
 80019c0:	ed9f 6b45 	vldr	d6, [pc, #276]	; 8001ad8 <inverseKinematic+0x3f0>
 80019c4:	ee37 7b46 	vsub.f64	d7, d7, d6
 80019c8:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 80019cc:	eeb0 0b47 	vmov.f64	d0, d7
 80019d0:	f00f ffda 	bl	8011988 <pow>
 80019d4:	eeb0 9b40 	vmov.f64	d9, d0
 80019d8:	ed97 7b02 	vldr	d7, [r7, #8]
 80019dc:	ed9f 6b44 	vldr	d6, [pc, #272]	; 8001af0 <inverseKinematic+0x408>
 80019e0:	ee37 7b06 	vadd.f64	d7, d7, d6
 80019e4:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 80019e8:	eeb0 0b47 	vmov.f64	d0, d7
 80019ec:	f00f ffcc 	bl	8011988 <pow>
 80019f0:	eeb0 7b40 	vmov.f64	d7, d0
 80019f4:	ee39 9b07 	vadd.f64	d9, d9, d7
 80019f8:	ed97 7b04 	vldr	d7, [r7, #16]
 80019fc:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8001a00:	eeb0 0b47 	vmov.f64	d0, d7
 8001a04:	f00f ffc0 	bl	8011988 <pow>
 8001a08:	eeb0 7b40 	vmov.f64	d7, d0
 8001a0c:	ee39 7b07 	vadd.f64	d7, d9, d7
 8001a10:	ed9f 6b3d 	vldr	d6, [pc, #244]	; 8001b08 <inverseKinematic+0x420>
 8001a14:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001a18:	ed9f 6b41 	vldr	d6, [pc, #260]	; 8001b20 <inverseKinematic+0x438>
 8001a1c:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001a20:	ed9f 6b41 	vldr	d6, [pc, #260]	; 8001b28 <inverseKinematic+0x440>
 8001a24:	ee37 5b06 	vadd.f64	d5, d7, d6
 8001a28:	ed97 7b04 	vldr	d7, [r7, #16]
 8001a2c:	ee37 6b07 	vadd.f64	d6, d7, d7
 8001a30:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8001a34:	ee28 7b07 	vmul.f64	d7, d8, d7
 8001a38:	ed9f 6b2b 	vldr	d6, [pc, #172]	; 8001ae8 <inverseKinematic+0x400>
 8001a3c:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001a40:	4b40      	ldr	r3, [pc, #256]	; (8001b44 <inverseKinematic+0x45c>)
 8001a42:	ed83 7b00 	vstr	d7, [r3]

	C1 = (pow(((pow((_Pfin.y - r), 2) + pow(_Pfin.z, 2) - pow(L2, 2) + pow(_Pfin.x, 2) - pow(R, 2) + pow(L1, 2)) / (2 * _Pfin.z)), 2) - pow(L1, 2) + pow(R, 2));
 8001a46:	ed97 7b02 	vldr	d7, [r7, #8]
 8001a4a:	ed9f 6b1f 	vldr	d6, [pc, #124]	; 8001ac8 <inverseKinematic+0x3e0>
 8001a4e:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001a52:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8001a56:	eeb0 0b47 	vmov.f64	d0, d7
 8001a5a:	f00f ff95 	bl	8011988 <pow>
 8001a5e:	eeb0 8b40 	vmov.f64	d8, d0
 8001a62:	ed97 7b04 	vldr	d7, [r7, #16]
 8001a66:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8001a6a:	eeb0 0b47 	vmov.f64	d0, d7
 8001a6e:	f00f ff8b 	bl	8011988 <pow>
 8001a72:	eeb0 7b40 	vmov.f64	d7, d0
 8001a76:	ee38 7b07 	vadd.f64	d7, d8, d7
 8001a7a:	ed9f 6b23 	vldr	d6, [pc, #140]	; 8001b08 <inverseKinematic+0x420>
 8001a7e:	ee37 8b46 	vsub.f64	d8, d7, d6
 8001a82:	ed97 7b00 	vldr	d7, [r7]
 8001a86:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8001a8a:	eeb0 0b47 	vmov.f64	d0, d7
 8001a8e:	f00f ff7b 	bl	8011988 <pow>
 8001a92:	eeb0 7b40 	vmov.f64	d7, d0
 8001a96:	ee38 7b07 	vadd.f64	d7, d8, d7
 8001a9a:	ed9f 6b21 	vldr	d6, [pc, #132]	; 8001b20 <inverseKinematic+0x438>
 8001a9e:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001aa2:	ed9f 6b21 	vldr	d6, [pc, #132]	; 8001b28 <inverseKinematic+0x440>
 8001aa6:	ee37 6b06 	vadd.f64	d6, d7, d6
 8001aaa:	ed97 7b04 	vldr	d7, [r7, #16]
 8001aae:	ee37 7b07 	vadd.f64	d7, d7, d7
 8001ab2:	ee86 5b07 	vdiv.f64	d5, d6, d7
 8001ab6:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8001aba:	eeb0 0b45 	vmov.f64	d0, d5
 8001abe:	f00f ff63 	bl	8011988 <pow>
 8001ac2:	eeb0 7b40 	vmov.f64	d7, d0
 8001ac6:	e03f      	b.n	8001b48 <inverseKinematic+0x460>
 8001ac8:	1eb851ec 	.word	0x1eb851ec
 8001acc:	3fb1eb85 	.word	0x3fb1eb85
 8001ad0:	24dd2f1b 	.word	0x24dd2f1b
 8001ad4:	3fc58106 	.word	0x3fc58106
 8001ad8:	5625749b 	.word	0x5625749b
 8001adc:	3faf09d1 	.word	0x3faf09d1
 8001ae0:	e8584caa 	.word	0xe8584caa
 8001ae4:	400bb67a 	.word	0x400bb67a
 8001ae8:	24dd2f1d 	.word	0x24dd2f1d
 8001aec:	3fe58106 	.word	0x3fe58106
 8001af0:	1eb851ec 	.word	0x1eb851ec
 8001af4:	3fa1eb85 	.word	0x3fa1eb85
 8001af8:	9ba5e356 	.word	0x9ba5e356
 8001afc:	3fe020c4 	.word	0x3fe020c4
 8001b00:	f705857e 	.word	0xf705857e
 8001b04:	3f881e03 	.word	0x3f881e03
 8001b08:	70a3d70a 	.word	0x70a3d70a
 8001b0c:	3fd70a3d 	.word	0x3fd70a3d
 8001b10:	24dd2f1b 	.word	0x24dd2f1b
 8001b14:	3fd58106 	.word	0x3fd58106
 8001b18:	e8584caa 	.word	0xe8584caa
 8001b1c:	c00bb67a 	.word	0xc00bb67a
 8001b20:	93d96639 	.word	0x93d96639
 8001b24:	3f9ce6c0 	.word	0x3f9ce6c0
 8001b28:	47ae147c 	.word	0x47ae147c
 8001b2c:	3fa47ae1 	.word	0x3fa47ae1
 8001b30:	240002a0 	.word	0x240002a0
 8001b34:	240002e8 	.word	0x240002e8
 8001b38:	24000330 	.word	0x24000330
 8001b3c:	240002a8 	.word	0x240002a8
 8001b40:	240002f0 	.word	0x240002f0
 8001b44:	24000338 	.word	0x24000338
 8001b48:	ed9f 6bdf 	vldr	d6, [pc, #892]	; 8001ec8 <inverseKinematic+0x7e0>
 8001b4c:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001b50:	ed9f 6bdf 	vldr	d6, [pc, #892]	; 8001ed0 <inverseKinematic+0x7e8>
 8001b54:	ee37 7b06 	vadd.f64	d7, d7, d6
 8001b58:	4be7      	ldr	r3, [pc, #924]	; (8001ef8 <inverseKinematic+0x810>)
 8001b5a:	ed83 7b00 	vstr	d7, [r3]
	C2 = pow(R, 2) - pow(L1, 2) + pow(((-pow(R, 2) + pow(L1, 2) + pow((_Pfin.x + r * C30), 2) + pow((_Pfin.y + r * S30), 2) + pow(_Pfin.z, 2) - pow(L2, 2)) / (2.0 * _Pfin.z)), 2.0);
 8001b5e:	ed97 7b00 	vldr	d7, [r7]
 8001b62:	ed9f 6bdd 	vldr	d6, [pc, #884]	; 8001ed8 <inverseKinematic+0x7f0>
 8001b66:	ee37 7b06 	vadd.f64	d7, d7, d6
 8001b6a:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8001b6e:	eeb0 0b47 	vmov.f64	d0, d7
 8001b72:	f00f ff09 	bl	8011988 <pow>
 8001b76:	eeb0 7b40 	vmov.f64	d7, d0
 8001b7a:	ed9f 6bd9 	vldr	d6, [pc, #868]	; 8001ee0 <inverseKinematic+0x7f8>
 8001b7e:	ee37 8b06 	vadd.f64	d8, d7, d6
 8001b82:	ed97 7b02 	vldr	d7, [r7, #8]
 8001b86:	ed9f 6bd8 	vldr	d6, [pc, #864]	; 8001ee8 <inverseKinematic+0x800>
 8001b8a:	ee37 7b06 	vadd.f64	d7, d7, d6
 8001b8e:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8001b92:	eeb0 0b47 	vmov.f64	d0, d7
 8001b96:	f00f fef7 	bl	8011988 <pow>
 8001b9a:	eeb0 7b40 	vmov.f64	d7, d0
 8001b9e:	ee38 8b07 	vadd.f64	d8, d8, d7
 8001ba2:	ed97 7b04 	vldr	d7, [r7, #16]
 8001ba6:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8001baa:	eeb0 0b47 	vmov.f64	d0, d7
 8001bae:	f00f feeb 	bl	8011988 <pow>
 8001bb2:	eeb0 7b40 	vmov.f64	d7, d0
 8001bb6:	ee38 7b07 	vadd.f64	d7, d8, d7
 8001bba:	ed9f 6bcd 	vldr	d6, [pc, #820]	; 8001ef0 <inverseKinematic+0x808>
 8001bbe:	ee37 6b46 	vsub.f64	d6, d7, d6
 8001bc2:	ed97 7b04 	vldr	d7, [r7, #16]
 8001bc6:	ee37 7b07 	vadd.f64	d7, d7, d7
 8001bca:	ee86 5b07 	vdiv.f64	d5, d6, d7
 8001bce:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8001bd2:	eeb0 0b45 	vmov.f64	d0, d5
 8001bd6:	f00f fed7 	bl	8011988 <pow>
 8001bda:	eeb0 7b40 	vmov.f64	d7, d0
 8001bde:	ed9f 6bc0 	vldr	d6, [pc, #768]	; 8001ee0 <inverseKinematic+0x7f8>
 8001be2:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001be6:	4bc5      	ldr	r3, [pc, #788]	; (8001efc <inverseKinematic+0x814>)
 8001be8:	ed83 7b00 	vstr	d7, [r3]
	C3 = pow(R, 2) - pow(L1, 2) + pow(((pow((_Pfin.x + r * C150), 2) + pow((_Pfin.y + r * S150), 2) + pow(_Pfin.z, 2) - pow(L2, 2) - pow(R, 2) + pow(L1, 2)) / (2.0 * _Pfin.z)), 2.0);
 8001bec:	ed97 7b00 	vldr	d7, [r7]
 8001bf0:	ed9f 6bb9 	vldr	d6, [pc, #740]	; 8001ed8 <inverseKinematic+0x7f0>
 8001bf4:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001bf8:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8001bfc:	eeb0 0b47 	vmov.f64	d0, d7
 8001c00:	f00f fec2 	bl	8011988 <pow>
 8001c04:	eeb0 8b40 	vmov.f64	d8, d0
 8001c08:	ed97 7b02 	vldr	d7, [r7, #8]
 8001c0c:	ed9f 6bb6 	vldr	d6, [pc, #728]	; 8001ee8 <inverseKinematic+0x800>
 8001c10:	ee37 7b06 	vadd.f64	d7, d7, d6
 8001c14:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8001c18:	eeb0 0b47 	vmov.f64	d0, d7
 8001c1c:	f00f feb4 	bl	8011988 <pow>
 8001c20:	eeb0 7b40 	vmov.f64	d7, d0
 8001c24:	ee38 8b07 	vadd.f64	d8, d8, d7
 8001c28:	ed97 7b04 	vldr	d7, [r7, #16]
 8001c2c:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8001c30:	eeb0 0b47 	vmov.f64	d0, d7
 8001c34:	f00f fea8 	bl	8011988 <pow>
 8001c38:	eeb0 7b40 	vmov.f64	d7, d0
 8001c3c:	ee38 7b07 	vadd.f64	d7, d8, d7
 8001c40:	ed9f 6bab 	vldr	d6, [pc, #684]	; 8001ef0 <inverseKinematic+0x808>
 8001c44:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001c48:	ed9f 6ba1 	vldr	d6, [pc, #644]	; 8001ed0 <inverseKinematic+0x7e8>
 8001c4c:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001c50:	ed9f 6b9d 	vldr	d6, [pc, #628]	; 8001ec8 <inverseKinematic+0x7e0>
 8001c54:	ee37 6b06 	vadd.f64	d6, d7, d6
 8001c58:	ed97 7b04 	vldr	d7, [r7, #16]
 8001c5c:	ee37 7b07 	vadd.f64	d7, d7, d7
 8001c60:	ee86 5b07 	vdiv.f64	d5, d6, d7
 8001c64:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8001c68:	eeb0 0b45 	vmov.f64	d0, d5
 8001c6c:	f00f fe8c 	bl	8011988 <pow>
 8001c70:	eeb0 7b40 	vmov.f64	d7, d0
 8001c74:	ed9f 6b9a 	vldr	d6, [pc, #616]	; 8001ee0 <inverseKinematic+0x7f8>
 8001c78:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001c7c:	4ba0      	ldr	r3, [pc, #640]	; (8001f00 <inverseKinematic+0x818>)
 8001c7e:	ed83 7b00 	vstr	d7, [r3]

	YJ1_1 = (-B1 - sqrt(pow(B1, 2) - 4 * A1 * C1)) / (2 * A1);
 8001c82:	4ba0      	ldr	r3, [pc, #640]	; (8001f04 <inverseKinematic+0x81c>)
 8001c84:	ed93 7b00 	vldr	d7, [r3]
 8001c88:	eeb1 8b47 	vneg.f64	d8, d7
 8001c8c:	4b9d      	ldr	r3, [pc, #628]	; (8001f04 <inverseKinematic+0x81c>)
 8001c8e:	ed93 7b00 	vldr	d7, [r3]
 8001c92:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8001c96:	eeb0 0b47 	vmov.f64	d0, d7
 8001c9a:	f00f fe75 	bl	8011988 <pow>
 8001c9e:	eeb0 5b40 	vmov.f64	d5, d0
 8001ca2:	4b99      	ldr	r3, [pc, #612]	; (8001f08 <inverseKinematic+0x820>)
 8001ca4:	ed93 7b00 	vldr	d7, [r3]
 8001ca8:	eeb1 6b00 	vmov.f64	d6, #16	; 0x40800000  4.0
 8001cac:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001cb0:	4b91      	ldr	r3, [pc, #580]	; (8001ef8 <inverseKinematic+0x810>)
 8001cb2:	ed93 7b00 	vldr	d7, [r3]
 8001cb6:	ee26 7b07 	vmul.f64	d7, d6, d7
 8001cba:	ee35 7b47 	vsub.f64	d7, d5, d7
 8001cbe:	eeb0 0b47 	vmov.f64	d0, d7
 8001cc2:	f010 f8e1 	bl	8011e88 <sqrt>
 8001cc6:	eeb0 7b40 	vmov.f64	d7, d0
 8001cca:	ee38 5b47 	vsub.f64	d5, d8, d7
 8001cce:	4b8e      	ldr	r3, [pc, #568]	; (8001f08 <inverseKinematic+0x820>)
 8001cd0:	ed93 7b00 	vldr	d7, [r3]
 8001cd4:	ee37 6b07 	vadd.f64	d6, d7, d7
 8001cd8:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8001cdc:	4b8b      	ldr	r3, [pc, #556]	; (8001f0c <inverseKinematic+0x824>)
 8001cde:	ed83 7b00 	vstr	d7, [r3]
	YJ1_2 = (-B1 + sqrt(pow(B1, 2) - 4 * A1 * C1)) / (2 * A1);
 8001ce2:	4b88      	ldr	r3, [pc, #544]	; (8001f04 <inverseKinematic+0x81c>)
 8001ce4:	ed93 7b00 	vldr	d7, [r3]
 8001ce8:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8001cec:	eeb0 0b47 	vmov.f64	d0, d7
 8001cf0:	f00f fe4a 	bl	8011988 <pow>
 8001cf4:	eeb0 5b40 	vmov.f64	d5, d0
 8001cf8:	4b83      	ldr	r3, [pc, #524]	; (8001f08 <inverseKinematic+0x820>)
 8001cfa:	ed93 7b00 	vldr	d7, [r3]
 8001cfe:	eeb1 6b00 	vmov.f64	d6, #16	; 0x40800000  4.0
 8001d02:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001d06:	4b7c      	ldr	r3, [pc, #496]	; (8001ef8 <inverseKinematic+0x810>)
 8001d08:	ed93 7b00 	vldr	d7, [r3]
 8001d0c:	ee26 7b07 	vmul.f64	d7, d6, d7
 8001d10:	ee35 7b47 	vsub.f64	d7, d5, d7
 8001d14:	eeb0 0b47 	vmov.f64	d0, d7
 8001d18:	f010 f8b6 	bl	8011e88 <sqrt>
 8001d1c:	eeb0 6b40 	vmov.f64	d6, d0
 8001d20:	4b78      	ldr	r3, [pc, #480]	; (8001f04 <inverseKinematic+0x81c>)
 8001d22:	ed93 7b00 	vldr	d7, [r3]
 8001d26:	ee36 5b47 	vsub.f64	d5, d6, d7
 8001d2a:	4b77      	ldr	r3, [pc, #476]	; (8001f08 <inverseKinematic+0x820>)
 8001d2c:	ed93 7b00 	vldr	d7, [r3]
 8001d30:	ee37 6b07 	vadd.f64	d6, d7, d7
 8001d34:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8001d38:	4b75      	ldr	r3, [pc, #468]	; (8001f10 <inverseKinematic+0x828>)
 8001d3a:	ed83 7b00 	vstr	d7, [r3]
	YJ2_1 = (-B2 + sqrt(pow(B2, 2) - 4 * A2 * C2)) / (2 * A2);
 8001d3e:	4b75      	ldr	r3, [pc, #468]	; (8001f14 <inverseKinematic+0x82c>)
 8001d40:	ed93 7b00 	vldr	d7, [r3]
 8001d44:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8001d48:	eeb0 0b47 	vmov.f64	d0, d7
 8001d4c:	f00f fe1c 	bl	8011988 <pow>
 8001d50:	eeb0 5b40 	vmov.f64	d5, d0
 8001d54:	4b70      	ldr	r3, [pc, #448]	; (8001f18 <inverseKinematic+0x830>)
 8001d56:	ed93 7b00 	vldr	d7, [r3]
 8001d5a:	eeb1 6b00 	vmov.f64	d6, #16	; 0x40800000  4.0
 8001d5e:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001d62:	4b66      	ldr	r3, [pc, #408]	; (8001efc <inverseKinematic+0x814>)
 8001d64:	ed93 7b00 	vldr	d7, [r3]
 8001d68:	ee26 7b07 	vmul.f64	d7, d6, d7
 8001d6c:	ee35 7b47 	vsub.f64	d7, d5, d7
 8001d70:	eeb0 0b47 	vmov.f64	d0, d7
 8001d74:	f010 f888 	bl	8011e88 <sqrt>
 8001d78:	eeb0 6b40 	vmov.f64	d6, d0
 8001d7c:	4b65      	ldr	r3, [pc, #404]	; (8001f14 <inverseKinematic+0x82c>)
 8001d7e:	ed93 7b00 	vldr	d7, [r3]
 8001d82:	ee36 5b47 	vsub.f64	d5, d6, d7
 8001d86:	4b64      	ldr	r3, [pc, #400]	; (8001f18 <inverseKinematic+0x830>)
 8001d88:	ed93 7b00 	vldr	d7, [r3]
 8001d8c:	ee37 6b07 	vadd.f64	d6, d7, d7
 8001d90:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8001d94:	4b61      	ldr	r3, [pc, #388]	; (8001f1c <inverseKinematic+0x834>)
 8001d96:	ed83 7b00 	vstr	d7, [r3]
	YJ2_2 = (-B2 - sqrt(pow(B2, 2) - 4 * A2 * C2)) / (2 * A2);
 8001d9a:	4b5e      	ldr	r3, [pc, #376]	; (8001f14 <inverseKinematic+0x82c>)
 8001d9c:	ed93 7b00 	vldr	d7, [r3]
 8001da0:	eeb1 8b47 	vneg.f64	d8, d7
 8001da4:	4b5b      	ldr	r3, [pc, #364]	; (8001f14 <inverseKinematic+0x82c>)
 8001da6:	ed93 7b00 	vldr	d7, [r3]
 8001daa:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8001dae:	eeb0 0b47 	vmov.f64	d0, d7
 8001db2:	f00f fde9 	bl	8011988 <pow>
 8001db6:	eeb0 5b40 	vmov.f64	d5, d0
 8001dba:	4b57      	ldr	r3, [pc, #348]	; (8001f18 <inverseKinematic+0x830>)
 8001dbc:	ed93 7b00 	vldr	d7, [r3]
 8001dc0:	eeb1 6b00 	vmov.f64	d6, #16	; 0x40800000  4.0
 8001dc4:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001dc8:	4b4c      	ldr	r3, [pc, #304]	; (8001efc <inverseKinematic+0x814>)
 8001dca:	ed93 7b00 	vldr	d7, [r3]
 8001dce:	ee26 7b07 	vmul.f64	d7, d6, d7
 8001dd2:	ee35 7b47 	vsub.f64	d7, d5, d7
 8001dd6:	eeb0 0b47 	vmov.f64	d0, d7
 8001dda:	f010 f855 	bl	8011e88 <sqrt>
 8001dde:	eeb0 7b40 	vmov.f64	d7, d0
 8001de2:	ee38 5b47 	vsub.f64	d5, d8, d7
 8001de6:	4b4c      	ldr	r3, [pc, #304]	; (8001f18 <inverseKinematic+0x830>)
 8001de8:	ed93 7b00 	vldr	d7, [r3]
 8001dec:	ee37 6b07 	vadd.f64	d6, d7, d7
 8001df0:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8001df4:	4b4a      	ldr	r3, [pc, #296]	; (8001f20 <inverseKinematic+0x838>)
 8001df6:	ed83 7b00 	vstr	d7, [r3]
	YJ3_1 = (-B3 + sqrt(pow(B3, 2) - 4 * A3 * C3)) / (2 * A3);
 8001dfa:	4b4a      	ldr	r3, [pc, #296]	; (8001f24 <inverseKinematic+0x83c>)
 8001dfc:	ed93 7b00 	vldr	d7, [r3]
 8001e00:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8001e04:	eeb0 0b47 	vmov.f64	d0, d7
 8001e08:	f00f fdbe 	bl	8011988 <pow>
 8001e0c:	eeb0 5b40 	vmov.f64	d5, d0
 8001e10:	4b45      	ldr	r3, [pc, #276]	; (8001f28 <inverseKinematic+0x840>)
 8001e12:	ed93 7b00 	vldr	d7, [r3]
 8001e16:	eeb1 6b00 	vmov.f64	d6, #16	; 0x40800000  4.0
 8001e1a:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001e1e:	4b38      	ldr	r3, [pc, #224]	; (8001f00 <inverseKinematic+0x818>)
 8001e20:	ed93 7b00 	vldr	d7, [r3]
 8001e24:	ee26 7b07 	vmul.f64	d7, d6, d7
 8001e28:	ee35 7b47 	vsub.f64	d7, d5, d7
 8001e2c:	eeb0 0b47 	vmov.f64	d0, d7
 8001e30:	f010 f82a 	bl	8011e88 <sqrt>
 8001e34:	eeb0 6b40 	vmov.f64	d6, d0
 8001e38:	4b3a      	ldr	r3, [pc, #232]	; (8001f24 <inverseKinematic+0x83c>)
 8001e3a:	ed93 7b00 	vldr	d7, [r3]
 8001e3e:	ee36 5b47 	vsub.f64	d5, d6, d7
 8001e42:	4b39      	ldr	r3, [pc, #228]	; (8001f28 <inverseKinematic+0x840>)
 8001e44:	ed93 7b00 	vldr	d7, [r3]
 8001e48:	ee37 6b07 	vadd.f64	d6, d7, d7
 8001e4c:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8001e50:	4b36      	ldr	r3, [pc, #216]	; (8001f2c <inverseKinematic+0x844>)
 8001e52:	ed83 7b00 	vstr	d7, [r3]
	YJ3_2 = (-B3 - sqrt(pow(B3, 2) - 4 * A3 * C3)) / (2 * A3);
 8001e56:	4b33      	ldr	r3, [pc, #204]	; (8001f24 <inverseKinematic+0x83c>)
 8001e58:	ed93 7b00 	vldr	d7, [r3]
 8001e5c:	eeb1 8b47 	vneg.f64	d8, d7
 8001e60:	4b30      	ldr	r3, [pc, #192]	; (8001f24 <inverseKinematic+0x83c>)
 8001e62:	ed93 7b00 	vldr	d7, [r3]
 8001e66:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8001e6a:	eeb0 0b47 	vmov.f64	d0, d7
 8001e6e:	f00f fd8b 	bl	8011988 <pow>
 8001e72:	eeb0 5b40 	vmov.f64	d5, d0
 8001e76:	4b2c      	ldr	r3, [pc, #176]	; (8001f28 <inverseKinematic+0x840>)
 8001e78:	ed93 7b00 	vldr	d7, [r3]
 8001e7c:	eeb1 6b00 	vmov.f64	d6, #16	; 0x40800000  4.0
 8001e80:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001e84:	4b1e      	ldr	r3, [pc, #120]	; (8001f00 <inverseKinematic+0x818>)
 8001e86:	ed93 7b00 	vldr	d7, [r3]
 8001e8a:	ee26 7b07 	vmul.f64	d7, d6, d7
 8001e8e:	ee35 7b47 	vsub.f64	d7, d5, d7
 8001e92:	eeb0 0b47 	vmov.f64	d0, d7
 8001e96:	f00f fff7 	bl	8011e88 <sqrt>
 8001e9a:	eeb0 7b40 	vmov.f64	d7, d0
 8001e9e:	ee38 5b47 	vsub.f64	d5, d8, d7
 8001ea2:	4b21      	ldr	r3, [pc, #132]	; (8001f28 <inverseKinematic+0x840>)
 8001ea4:	ed93 7b00 	vldr	d7, [r3]
 8001ea8:	ee37 6b07 	vadd.f64	d6, d7, d7
 8001eac:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8001eb0:	4b1f      	ldr	r3, [pc, #124]	; (8001f30 <inverseKinematic+0x848>)
 8001eb2:	ed83 7b00 	vstr	d7, [r3]

	XJ1_1 = 0;
 8001eb6:	491f      	ldr	r1, [pc, #124]	; (8001f34 <inverseKinematic+0x84c>)
 8001eb8:	f04f 0200 	mov.w	r2, #0
 8001ebc:	f04f 0300 	mov.w	r3, #0
 8001ec0:	e9c1 2300 	strd	r2, r3, [r1]
 8001ec4:	e038      	b.n	8001f38 <inverseKinematic+0x850>
 8001ec6:	bf00      	nop
 8001ec8:	47ae147c 	.word	0x47ae147c
 8001ecc:	3fa47ae1 	.word	0x3fa47ae1
 8001ed0:	93d96639 	.word	0x93d96639
 8001ed4:	3f9ce6c0 	.word	0x3f9ce6c0
 8001ed8:	5625749b 	.word	0x5625749b
 8001edc:	3faf09d1 	.word	0x3faf09d1
 8001ee0:	f705857e 	.word	0xf705857e
 8001ee4:	3f881e03 	.word	0x3f881e03
 8001ee8:	1eb851ec 	.word	0x1eb851ec
 8001eec:	3fa1eb85 	.word	0x3fa1eb85
 8001ef0:	70a3d70a 	.word	0x70a3d70a
 8001ef4:	3fd70a3d 	.word	0x3fd70a3d
 8001ef8:	240002b0 	.word	0x240002b0
 8001efc:	240002f8 	.word	0x240002f8
 8001f00:	24000340 	.word	0x24000340
 8001f04:	240002a8 	.word	0x240002a8
 8001f08:	240002a0 	.word	0x240002a0
 8001f0c:	240002c8 	.word	0x240002c8
 8001f10:	240002d0 	.word	0x240002d0
 8001f14:	240002f0 	.word	0x240002f0
 8001f18:	240002e8 	.word	0x240002e8
 8001f1c:	24000310 	.word	0x24000310
 8001f20:	24000318 	.word	0x24000318
 8001f24:	24000338 	.word	0x24000338
 8001f28:	24000330 	.word	0x24000330
 8001f2c:	24000358 	.word	0x24000358
 8001f30:	24000360 	.word	0x24000360
 8001f34:	240002b8 	.word	0x240002b8
	XJ1_2 = 0;
 8001f38:	49f1      	ldr	r1, [pc, #964]	; (8002300 <inverseKinematic+0xc18>)
 8001f3a:	f04f 0200 	mov.w	r2, #0
 8001f3e:	f04f 0300 	mov.w	r3, #0
 8001f42:	e9c1 2300 	strd	r2, r3, [r1]
	XJ2_1 = sqrt(3) * YJ2_1;
 8001f46:	4bef      	ldr	r3, [pc, #956]	; (8002304 <inverseKinematic+0xc1c>)
 8001f48:	ed93 7b00 	vldr	d7, [r3]
 8001f4c:	ed9f 6bd2 	vldr	d6, [pc, #840]	; 8002298 <inverseKinematic+0xbb0>
 8001f50:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001f54:	4bec      	ldr	r3, [pc, #944]	; (8002308 <inverseKinematic+0xc20>)
 8001f56:	ed83 7b00 	vstr	d7, [r3]
	XJ2_2 = sqrt(3) * YJ2_2;
 8001f5a:	4bec      	ldr	r3, [pc, #944]	; (800230c <inverseKinematic+0xc24>)
 8001f5c:	ed93 7b00 	vldr	d7, [r3]
 8001f60:	ed9f 6bcd 	vldr	d6, [pc, #820]	; 8002298 <inverseKinematic+0xbb0>
 8001f64:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001f68:	4be9      	ldr	r3, [pc, #932]	; (8002310 <inverseKinematic+0xc28>)
 8001f6a:	ed83 7b00 	vstr	d7, [r3]
	XJ3_1 = -sqrt(3) * YJ3_1;
 8001f6e:	4be9      	ldr	r3, [pc, #932]	; (8002314 <inverseKinematic+0xc2c>)
 8001f70:	ed93 7b00 	vldr	d7, [r3]
 8001f74:	ed9f 6bca 	vldr	d6, [pc, #808]	; 80022a0 <inverseKinematic+0xbb8>
 8001f78:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001f7c:	4be6      	ldr	r3, [pc, #920]	; (8002318 <inverseKinematic+0xc30>)
 8001f7e:	ed83 7b00 	vstr	d7, [r3]
	XJ3_2 = -sqrt(3) * YJ3_2;
 8001f82:	4be6      	ldr	r3, [pc, #920]	; (800231c <inverseKinematic+0xc34>)
 8001f84:	ed93 7b00 	vldr	d7, [r3]
 8001f88:	ed9f 6bc5 	vldr	d6, [pc, #788]	; 80022a0 <inverseKinematic+0xbb8>
 8001f8c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001f90:	4be3      	ldr	r3, [pc, #908]	; (8002320 <inverseKinematic+0xc38>)
 8001f92:	ed83 7b00 	vstr	d7, [r3]

	ZJ1_1 = ((YJ1_1 * ((-2 * (R + (_Pfin.y - r))) / (2 * _Pfin.z))) + ((pow((_Pfin.y - r), 2) + pow(_Pfin.z, 2) - pow(L2, 2) + pow(_Pfin.x, 2) - pow(R, 2) + pow(L1, 2)) / (2 * _Pfin.z)));
 8001f96:	ed97 7b02 	vldr	d7, [r7, #8]
 8001f9a:	ed9f 6bc3 	vldr	d6, [pc, #780]	; 80022a8 <inverseKinematic+0xbc0>
 8001f9e:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001fa2:	ed9f 6bc3 	vldr	d6, [pc, #780]	; 80022b0 <inverseKinematic+0xbc8>
 8001fa6:	ee37 7b06 	vadd.f64	d7, d7, d6
 8001faa:	eeb8 6b00 	vmov.f64	d6, #128	; 0xc0000000 -2.0
 8001fae:	ee27 5b06 	vmul.f64	d5, d7, d6
 8001fb2:	ed97 7b04 	vldr	d7, [r7, #16]
 8001fb6:	ee37 7b07 	vadd.f64	d7, d7, d7
 8001fba:	ee85 6b07 	vdiv.f64	d6, d5, d7
 8001fbe:	4bd9      	ldr	r3, [pc, #868]	; (8002324 <inverseKinematic+0xc3c>)
 8001fc0:	ed93 7b00 	vldr	d7, [r3]
 8001fc4:	ee26 8b07 	vmul.f64	d8, d6, d7
 8001fc8:	ed97 7b02 	vldr	d7, [r7, #8]
 8001fcc:	ed9f 6bb6 	vldr	d6, [pc, #728]	; 80022a8 <inverseKinematic+0xbc0>
 8001fd0:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001fd4:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8001fd8:	eeb0 0b47 	vmov.f64	d0, d7
 8001fdc:	f00f fcd4 	bl	8011988 <pow>
 8001fe0:	eeb0 9b40 	vmov.f64	d9, d0
 8001fe4:	ed97 7b04 	vldr	d7, [r7, #16]
 8001fe8:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8001fec:	eeb0 0b47 	vmov.f64	d0, d7
 8001ff0:	f00f fcca 	bl	8011988 <pow>
 8001ff4:	eeb0 7b40 	vmov.f64	d7, d0
 8001ff8:	ee39 7b07 	vadd.f64	d7, d9, d7
 8001ffc:	ed9f 6bae 	vldr	d6, [pc, #696]	; 80022b8 <inverseKinematic+0xbd0>
 8002000:	ee37 9b46 	vsub.f64	d9, d7, d6
 8002004:	ed97 7b00 	vldr	d7, [r7]
 8002008:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 800200c:	eeb0 0b47 	vmov.f64	d0, d7
 8002010:	f00f fcba 	bl	8011988 <pow>
 8002014:	eeb0 7b40 	vmov.f64	d7, d0
 8002018:	ee39 7b07 	vadd.f64	d7, d9, d7
 800201c:	ed9f 6ba8 	vldr	d6, [pc, #672]	; 80022c0 <inverseKinematic+0xbd8>
 8002020:	ee37 7b46 	vsub.f64	d7, d7, d6
 8002024:	ed9f 6ba8 	vldr	d6, [pc, #672]	; 80022c8 <inverseKinematic+0xbe0>
 8002028:	ee37 5b06 	vadd.f64	d5, d7, d6
 800202c:	ed97 7b04 	vldr	d7, [r7, #16]
 8002030:	ee37 6b07 	vadd.f64	d6, d7, d7
 8002034:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8002038:	ee38 7b07 	vadd.f64	d7, d8, d7
 800203c:	4bba      	ldr	r3, [pc, #744]	; (8002328 <inverseKinematic+0xc40>)
 800203e:	ed83 7b00 	vstr	d7, [r3]
	ZJ1_2 = ((YJ1_2 * ((-2 * (R + (_Pfin.y - r))) / (2 * _Pfin.z))) + ((pow((_Pfin.y - r), 2) + pow(_Pfin.z, 2) - pow(L2, 2) + pow(_Pfin.x, 2) - pow(R, 2) + pow(L1, 2)) / (2 * _Pfin.z)));
 8002042:	ed97 7b02 	vldr	d7, [r7, #8]
 8002046:	ed9f 6b98 	vldr	d6, [pc, #608]	; 80022a8 <inverseKinematic+0xbc0>
 800204a:	ee37 7b46 	vsub.f64	d7, d7, d6
 800204e:	ed9f 6b98 	vldr	d6, [pc, #608]	; 80022b0 <inverseKinematic+0xbc8>
 8002052:	ee37 7b06 	vadd.f64	d7, d7, d6
 8002056:	eeb8 6b00 	vmov.f64	d6, #128	; 0xc0000000 -2.0
 800205a:	ee27 5b06 	vmul.f64	d5, d7, d6
 800205e:	ed97 7b04 	vldr	d7, [r7, #16]
 8002062:	ee37 7b07 	vadd.f64	d7, d7, d7
 8002066:	ee85 6b07 	vdiv.f64	d6, d5, d7
 800206a:	4bb0      	ldr	r3, [pc, #704]	; (800232c <inverseKinematic+0xc44>)
 800206c:	ed93 7b00 	vldr	d7, [r3]
 8002070:	ee26 8b07 	vmul.f64	d8, d6, d7
 8002074:	ed97 7b02 	vldr	d7, [r7, #8]
 8002078:	ed9f 6b8b 	vldr	d6, [pc, #556]	; 80022a8 <inverseKinematic+0xbc0>
 800207c:	ee37 7b46 	vsub.f64	d7, d7, d6
 8002080:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8002084:	eeb0 0b47 	vmov.f64	d0, d7
 8002088:	f00f fc7e 	bl	8011988 <pow>
 800208c:	eeb0 9b40 	vmov.f64	d9, d0
 8002090:	ed97 7b04 	vldr	d7, [r7, #16]
 8002094:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8002098:	eeb0 0b47 	vmov.f64	d0, d7
 800209c:	f00f fc74 	bl	8011988 <pow>
 80020a0:	eeb0 7b40 	vmov.f64	d7, d0
 80020a4:	ee39 7b07 	vadd.f64	d7, d9, d7
 80020a8:	ed9f 6b83 	vldr	d6, [pc, #524]	; 80022b8 <inverseKinematic+0xbd0>
 80020ac:	ee37 9b46 	vsub.f64	d9, d7, d6
 80020b0:	ed97 7b00 	vldr	d7, [r7]
 80020b4:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 80020b8:	eeb0 0b47 	vmov.f64	d0, d7
 80020bc:	f00f fc64 	bl	8011988 <pow>
 80020c0:	eeb0 7b40 	vmov.f64	d7, d0
 80020c4:	ee39 7b07 	vadd.f64	d7, d9, d7
 80020c8:	ed9f 6b7d 	vldr	d6, [pc, #500]	; 80022c0 <inverseKinematic+0xbd8>
 80020cc:	ee37 7b46 	vsub.f64	d7, d7, d6
 80020d0:	ed9f 6b7d 	vldr	d6, [pc, #500]	; 80022c8 <inverseKinematic+0xbe0>
 80020d4:	ee37 5b06 	vadd.f64	d5, d7, d6
 80020d8:	ed97 7b04 	vldr	d7, [r7, #16]
 80020dc:	ee37 6b07 	vadd.f64	d6, d7, d7
 80020e0:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80020e4:	ee38 7b07 	vadd.f64	d7, d8, d7
 80020e8:	4b91      	ldr	r3, [pc, #580]	; (8002330 <inverseKinematic+0xc48>)
 80020ea:	ed83 7b00 	vstr	d7, [r3]
	ZJ2_1 = YJ2_1 * (((2 * sqrt(3.0) * R * C30 + 2.0 * R * S30) + (-2 * sqrt(3) * (_Pfin.x + r * C30) - 2.0 * (_Pfin.y + r * S30))) / (2 * _Pfin.z)) + ((-pow(R, 2) + pow(L1, 2) + pow((_Pfin.x + r * C30), 2) + pow((_Pfin.y + r * S30), 2) + pow(_Pfin.z, 2) - pow(L2, 2)) / (2 * _Pfin.z));
 80020ee:	ed97 7b00 	vldr	d7, [r7]
 80020f2:	ed9f 6b77 	vldr	d6, [pc, #476]	; 80022d0 <inverseKinematic+0xbe8>
 80020f6:	ee37 7b06 	vadd.f64	d7, d7, d6
 80020fa:	ed9f 6b77 	vldr	d6, [pc, #476]	; 80022d8 <inverseKinematic+0xbf0>
 80020fe:	ee27 6b06 	vmul.f64	d6, d7, d6
 8002102:	ed97 7b02 	vldr	d7, [r7, #8]
 8002106:	ed9f 5b76 	vldr	d5, [pc, #472]	; 80022e0 <inverseKinematic+0xbf8>
 800210a:	ee37 7b05 	vadd.f64	d7, d7, d5
 800210e:	ee37 7b07 	vadd.f64	d7, d7, d7
 8002112:	ee36 7b47 	vsub.f64	d7, d6, d7
 8002116:	ed9f 6b74 	vldr	d6, [pc, #464]	; 80022e8 <inverseKinematic+0xc00>
 800211a:	ee37 5b06 	vadd.f64	d5, d7, d6
 800211e:	ed97 7b04 	vldr	d7, [r7, #16]
 8002122:	ee37 7b07 	vadd.f64	d7, d7, d7
 8002126:	ee85 6b07 	vdiv.f64	d6, d5, d7
 800212a:	4b76      	ldr	r3, [pc, #472]	; (8002304 <inverseKinematic+0xc1c>)
 800212c:	ed93 7b00 	vldr	d7, [r3]
 8002130:	ee26 8b07 	vmul.f64	d8, d6, d7
 8002134:	ed97 7b00 	vldr	d7, [r7]
 8002138:	ed9f 6b65 	vldr	d6, [pc, #404]	; 80022d0 <inverseKinematic+0xbe8>
 800213c:	ee37 7b06 	vadd.f64	d7, d7, d6
 8002140:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8002144:	eeb0 0b47 	vmov.f64	d0, d7
 8002148:	f00f fc1e 	bl	8011988 <pow>
 800214c:	eeb0 7b40 	vmov.f64	d7, d0
 8002150:	ed9f 6b67 	vldr	d6, [pc, #412]	; 80022f0 <inverseKinematic+0xc08>
 8002154:	ee37 9b06 	vadd.f64	d9, d7, d6
 8002158:	ed97 7b02 	vldr	d7, [r7, #8]
 800215c:	ed9f 6b60 	vldr	d6, [pc, #384]	; 80022e0 <inverseKinematic+0xbf8>
 8002160:	ee37 7b06 	vadd.f64	d7, d7, d6
 8002164:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8002168:	eeb0 0b47 	vmov.f64	d0, d7
 800216c:	f00f fc0c 	bl	8011988 <pow>
 8002170:	eeb0 7b40 	vmov.f64	d7, d0
 8002174:	ee39 9b07 	vadd.f64	d9, d9, d7
 8002178:	ed97 7b04 	vldr	d7, [r7, #16]
 800217c:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8002180:	eeb0 0b47 	vmov.f64	d0, d7
 8002184:	f00f fc00 	bl	8011988 <pow>
 8002188:	eeb0 7b40 	vmov.f64	d7, d0
 800218c:	ee39 7b07 	vadd.f64	d7, d9, d7
 8002190:	ed9f 6b49 	vldr	d6, [pc, #292]	; 80022b8 <inverseKinematic+0xbd0>
 8002194:	ee37 5b46 	vsub.f64	d5, d7, d6
 8002198:	ed97 7b04 	vldr	d7, [r7, #16]
 800219c:	ee37 6b07 	vadd.f64	d6, d7, d7
 80021a0:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80021a4:	ee38 7b07 	vadd.f64	d7, d8, d7
 80021a8:	4b62      	ldr	r3, [pc, #392]	; (8002334 <inverseKinematic+0xc4c>)
 80021aa:	ed83 7b00 	vstr	d7, [r3]
	ZJ2_2 = YJ2_2 * (((2 * sqrt(3.0) * R * C30 + 2.0 * R * S30) + (-2 * sqrt(3) * (_Pfin.x + r * C30) - 2.0 * (_Pfin.y + r * S30))) / (2 * _Pfin.z)) + ((-pow(R, 2) + pow(L1, 2) + pow((_Pfin.x + r * C30), 2) + pow((_Pfin.y + r * S30), 2) + pow(_Pfin.z, 2) - pow(L2, 2)) / (2 * _Pfin.z));
 80021ae:	ed97 7b00 	vldr	d7, [r7]
 80021b2:	ed9f 6b47 	vldr	d6, [pc, #284]	; 80022d0 <inverseKinematic+0xbe8>
 80021b6:	ee37 7b06 	vadd.f64	d7, d7, d6
 80021ba:	ed9f 6b47 	vldr	d6, [pc, #284]	; 80022d8 <inverseKinematic+0xbf0>
 80021be:	ee27 6b06 	vmul.f64	d6, d7, d6
 80021c2:	ed97 7b02 	vldr	d7, [r7, #8]
 80021c6:	ed9f 5b46 	vldr	d5, [pc, #280]	; 80022e0 <inverseKinematic+0xbf8>
 80021ca:	ee37 7b05 	vadd.f64	d7, d7, d5
 80021ce:	ee37 7b07 	vadd.f64	d7, d7, d7
 80021d2:	ee36 7b47 	vsub.f64	d7, d6, d7
 80021d6:	ed9f 6b44 	vldr	d6, [pc, #272]	; 80022e8 <inverseKinematic+0xc00>
 80021da:	ee37 5b06 	vadd.f64	d5, d7, d6
 80021de:	ed97 7b04 	vldr	d7, [r7, #16]
 80021e2:	ee37 7b07 	vadd.f64	d7, d7, d7
 80021e6:	ee85 6b07 	vdiv.f64	d6, d5, d7
 80021ea:	4b48      	ldr	r3, [pc, #288]	; (800230c <inverseKinematic+0xc24>)
 80021ec:	ed93 7b00 	vldr	d7, [r3]
 80021f0:	ee26 8b07 	vmul.f64	d8, d6, d7
 80021f4:	ed97 7b00 	vldr	d7, [r7]
 80021f8:	ed9f 6b35 	vldr	d6, [pc, #212]	; 80022d0 <inverseKinematic+0xbe8>
 80021fc:	ee37 7b06 	vadd.f64	d7, d7, d6
 8002200:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8002204:	eeb0 0b47 	vmov.f64	d0, d7
 8002208:	f00f fbbe 	bl	8011988 <pow>
 800220c:	eeb0 7b40 	vmov.f64	d7, d0
 8002210:	ed9f 6b37 	vldr	d6, [pc, #220]	; 80022f0 <inverseKinematic+0xc08>
 8002214:	ee37 9b06 	vadd.f64	d9, d7, d6
 8002218:	ed97 7b02 	vldr	d7, [r7, #8]
 800221c:	ed9f 6b30 	vldr	d6, [pc, #192]	; 80022e0 <inverseKinematic+0xbf8>
 8002220:	ee37 7b06 	vadd.f64	d7, d7, d6
 8002224:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8002228:	eeb0 0b47 	vmov.f64	d0, d7
 800222c:	f00f fbac 	bl	8011988 <pow>
 8002230:	eeb0 7b40 	vmov.f64	d7, d0
 8002234:	ee39 9b07 	vadd.f64	d9, d9, d7
 8002238:	ed97 7b04 	vldr	d7, [r7, #16]
 800223c:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8002240:	eeb0 0b47 	vmov.f64	d0, d7
 8002244:	f00f fba0 	bl	8011988 <pow>
 8002248:	eeb0 7b40 	vmov.f64	d7, d0
 800224c:	ee39 7b07 	vadd.f64	d7, d9, d7
 8002250:	ed9f 6b19 	vldr	d6, [pc, #100]	; 80022b8 <inverseKinematic+0xbd0>
 8002254:	ee37 5b46 	vsub.f64	d5, d7, d6
 8002258:	ed97 7b04 	vldr	d7, [r7, #16]
 800225c:	ee37 6b07 	vadd.f64	d6, d7, d7
 8002260:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8002264:	ee38 7b07 	vadd.f64	d7, d8, d7
 8002268:	4b33      	ldr	r3, [pc, #204]	; (8002338 <inverseKinematic+0xc50>)
 800226a:	ed83 7b00 	vstr	d7, [r3]
	ZJ3_1 = YJ3_1 * ((2 * sqrt(3.0) * (_Pfin.x + r * C150) - 2.0 * (_Pfin.y + r * S150) - 2.0 * sqrt(3) * R * C150 + 2.0 * R * S150) / (2.0 * _Pfin.z)) + ((pow((_Pfin.x + r * C150), 2.0) + pow((_Pfin.y + r * S150), 2) + pow(_Pfin.z, 2.0) - pow(L2, 2) - pow(R, 2) + pow(L1, 2)) / (2 * _Pfin.z));
 800226e:	ed97 7b00 	vldr	d7, [r7]
 8002272:	ed9f 6b17 	vldr	d6, [pc, #92]	; 80022d0 <inverseKinematic+0xbe8>
 8002276:	ee37 7b46 	vsub.f64	d7, d7, d6
 800227a:	ed9f 6b1f 	vldr	d6, [pc, #124]	; 80022f8 <inverseKinematic+0xc10>
 800227e:	ee27 6b06 	vmul.f64	d6, d7, d6
 8002282:	ed97 7b02 	vldr	d7, [r7, #8]
 8002286:	ed9f 5b16 	vldr	d5, [pc, #88]	; 80022e0 <inverseKinematic+0xbf8>
 800228a:	ee37 7b05 	vadd.f64	d7, d7, d5
 800228e:	ee37 7b07 	vadd.f64	d7, d7, d7
 8002292:	ee36 7b47 	vsub.f64	d7, d6, d7
 8002296:	e051      	b.n	800233c <inverseKinematic+0xc54>
 8002298:	e8584caa 	.word	0xe8584caa
 800229c:	3ffbb67a 	.word	0x3ffbb67a
 80022a0:	e8584caa 	.word	0xe8584caa
 80022a4:	bffbb67a 	.word	0xbffbb67a
 80022a8:	1eb851ec 	.word	0x1eb851ec
 80022ac:	3fb1eb85 	.word	0x3fb1eb85
 80022b0:	24dd2f1b 	.word	0x24dd2f1b
 80022b4:	3fc58106 	.word	0x3fc58106
 80022b8:	70a3d70a 	.word	0x70a3d70a
 80022bc:	3fd70a3d 	.word	0x3fd70a3d
 80022c0:	93d96639 	.word	0x93d96639
 80022c4:	3f9ce6c0 	.word	0x3f9ce6c0
 80022c8:	47ae147c 	.word	0x47ae147c
 80022cc:	3fa47ae1 	.word	0x3fa47ae1
 80022d0:	5625749b 	.word	0x5625749b
 80022d4:	3faf09d1 	.word	0x3faf09d1
 80022d8:	e8584caa 	.word	0xe8584caa
 80022dc:	c00bb67a 	.word	0xc00bb67a
 80022e0:	1eb851ec 	.word	0x1eb851ec
 80022e4:	3fa1eb85 	.word	0x3fa1eb85
 80022e8:	24dd2f1d 	.word	0x24dd2f1d
 80022ec:	3fe58106 	.word	0x3fe58106
 80022f0:	f705857e 	.word	0xf705857e
 80022f4:	3f881e03 	.word	0x3f881e03
 80022f8:	e8584caa 	.word	0xe8584caa
 80022fc:	400bb67a 	.word	0x400bb67a
 8002300:	240002c0 	.word	0x240002c0
 8002304:	24000310 	.word	0x24000310
 8002308:	24000300 	.word	0x24000300
 800230c:	24000318 	.word	0x24000318
 8002310:	24000308 	.word	0x24000308
 8002314:	24000358 	.word	0x24000358
 8002318:	24000348 	.word	0x24000348
 800231c:	24000360 	.word	0x24000360
 8002320:	24000350 	.word	0x24000350
 8002324:	240002c8 	.word	0x240002c8
 8002328:	240002d8 	.word	0x240002d8
 800232c:	240002d0 	.word	0x240002d0
 8002330:	240002e0 	.word	0x240002e0
 8002334:	24000320 	.word	0x24000320
 8002338:	24000328 	.word	0x24000328
 800233c:	ed9f 6b90 	vldr	d6, [pc, #576]	; 8002580 <inverseKinematic+0xe98>
 8002340:	ee37 7b06 	vadd.f64	d7, d7, d6
 8002344:	ed9f 6b90 	vldr	d6, [pc, #576]	; 8002588 <inverseKinematic+0xea0>
 8002348:	ee37 5b06 	vadd.f64	d5, d7, d6
 800234c:	ed97 7b04 	vldr	d7, [r7, #16]
 8002350:	ee37 7b07 	vadd.f64	d7, d7, d7
 8002354:	ee85 6b07 	vdiv.f64	d6, d5, d7
 8002358:	4b9f      	ldr	r3, [pc, #636]	; (80025d8 <inverseKinematic+0xef0>)
 800235a:	ed93 7b00 	vldr	d7, [r3]
 800235e:	ee26 8b07 	vmul.f64	d8, d6, d7
 8002362:	ed97 7b00 	vldr	d7, [r7]
 8002366:	ed9f 6b8a 	vldr	d6, [pc, #552]	; 8002590 <inverseKinematic+0xea8>
 800236a:	ee37 7b46 	vsub.f64	d7, d7, d6
 800236e:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8002372:	eeb0 0b47 	vmov.f64	d0, d7
 8002376:	f00f fb07 	bl	8011988 <pow>
 800237a:	eeb0 9b40 	vmov.f64	d9, d0
 800237e:	ed97 7b02 	vldr	d7, [r7, #8]
 8002382:	ed9f 6b85 	vldr	d6, [pc, #532]	; 8002598 <inverseKinematic+0xeb0>
 8002386:	ee37 7b06 	vadd.f64	d7, d7, d6
 800238a:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 800238e:	eeb0 0b47 	vmov.f64	d0, d7
 8002392:	f00f faf9 	bl	8011988 <pow>
 8002396:	eeb0 7b40 	vmov.f64	d7, d0
 800239a:	ee39 9b07 	vadd.f64	d9, d9, d7
 800239e:	ed97 7b04 	vldr	d7, [r7, #16]
 80023a2:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 80023a6:	eeb0 0b47 	vmov.f64	d0, d7
 80023aa:	f00f faed 	bl	8011988 <pow>
 80023ae:	eeb0 7b40 	vmov.f64	d7, d0
 80023b2:	ee39 7b07 	vadd.f64	d7, d9, d7
 80023b6:	ed9f 6b7a 	vldr	d6, [pc, #488]	; 80025a0 <inverseKinematic+0xeb8>
 80023ba:	ee37 7b46 	vsub.f64	d7, d7, d6
 80023be:	ed9f 6b7a 	vldr	d6, [pc, #488]	; 80025a8 <inverseKinematic+0xec0>
 80023c2:	ee37 7b46 	vsub.f64	d7, d7, d6
 80023c6:	ed9f 6b7a 	vldr	d6, [pc, #488]	; 80025b0 <inverseKinematic+0xec8>
 80023ca:	ee37 5b06 	vadd.f64	d5, d7, d6
 80023ce:	ed97 7b04 	vldr	d7, [r7, #16]
 80023d2:	ee37 6b07 	vadd.f64	d6, d7, d7
 80023d6:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80023da:	ee38 7b07 	vadd.f64	d7, d8, d7
 80023de:	4b7f      	ldr	r3, [pc, #508]	; (80025dc <inverseKinematic+0xef4>)
 80023e0:	ed83 7b00 	vstr	d7, [r3]
	ZJ3_2 = YJ3_2 * ((2 * sqrt(3.0) * (_Pfin.x + r * C150) - 2.0 * (_Pfin.y + r * S150) - 2.0 * sqrt(3) * R * C150 + 2.0 * R * S150) / (2.0 * _Pfin.z)) + ((pow((_Pfin.x + r * C150), 2.0) + pow((_Pfin.y + r * S150), 2) + pow(_Pfin.z, 2) - pow(L2, 2) - pow(R, 2) + pow(L1, 2)) / (2 * _Pfin.z));
 80023e4:	ed97 7b00 	vldr	d7, [r7]
 80023e8:	ed9f 6b69 	vldr	d6, [pc, #420]	; 8002590 <inverseKinematic+0xea8>
 80023ec:	ee37 7b46 	vsub.f64	d7, d7, d6
 80023f0:	ed9f 6b71 	vldr	d6, [pc, #452]	; 80025b8 <inverseKinematic+0xed0>
 80023f4:	ee27 6b06 	vmul.f64	d6, d7, d6
 80023f8:	ed97 7b02 	vldr	d7, [r7, #8]
 80023fc:	ed9f 5b66 	vldr	d5, [pc, #408]	; 8002598 <inverseKinematic+0xeb0>
 8002400:	ee37 7b05 	vadd.f64	d7, d7, d5
 8002404:	ee37 7b07 	vadd.f64	d7, d7, d7
 8002408:	ee36 7b47 	vsub.f64	d7, d6, d7
 800240c:	ed9f 6b5c 	vldr	d6, [pc, #368]	; 8002580 <inverseKinematic+0xe98>
 8002410:	ee37 7b06 	vadd.f64	d7, d7, d6
 8002414:	ed9f 6b5c 	vldr	d6, [pc, #368]	; 8002588 <inverseKinematic+0xea0>
 8002418:	ee37 5b06 	vadd.f64	d5, d7, d6
 800241c:	ed97 7b04 	vldr	d7, [r7, #16]
 8002420:	ee37 7b07 	vadd.f64	d7, d7, d7
 8002424:	ee85 6b07 	vdiv.f64	d6, d5, d7
 8002428:	4b6d      	ldr	r3, [pc, #436]	; (80025e0 <inverseKinematic+0xef8>)
 800242a:	ed93 7b00 	vldr	d7, [r3]
 800242e:	ee26 8b07 	vmul.f64	d8, d6, d7
 8002432:	ed97 7b00 	vldr	d7, [r7]
 8002436:	ed9f 6b56 	vldr	d6, [pc, #344]	; 8002590 <inverseKinematic+0xea8>
 800243a:	ee37 7b46 	vsub.f64	d7, d7, d6
 800243e:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8002442:	eeb0 0b47 	vmov.f64	d0, d7
 8002446:	f00f fa9f 	bl	8011988 <pow>
 800244a:	eeb0 9b40 	vmov.f64	d9, d0
 800244e:	ed97 7b02 	vldr	d7, [r7, #8]
 8002452:	ed9f 6b51 	vldr	d6, [pc, #324]	; 8002598 <inverseKinematic+0xeb0>
 8002456:	ee37 7b06 	vadd.f64	d7, d7, d6
 800245a:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 800245e:	eeb0 0b47 	vmov.f64	d0, d7
 8002462:	f00f fa91 	bl	8011988 <pow>
 8002466:	eeb0 7b40 	vmov.f64	d7, d0
 800246a:	ee39 9b07 	vadd.f64	d9, d9, d7
 800246e:	ed97 7b04 	vldr	d7, [r7, #16]
 8002472:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8002476:	eeb0 0b47 	vmov.f64	d0, d7
 800247a:	f00f fa85 	bl	8011988 <pow>
 800247e:	eeb0 7b40 	vmov.f64	d7, d0
 8002482:	ee39 7b07 	vadd.f64	d7, d9, d7
 8002486:	ed9f 6b46 	vldr	d6, [pc, #280]	; 80025a0 <inverseKinematic+0xeb8>
 800248a:	ee37 7b46 	vsub.f64	d7, d7, d6
 800248e:	ed9f 6b46 	vldr	d6, [pc, #280]	; 80025a8 <inverseKinematic+0xec0>
 8002492:	ee37 7b46 	vsub.f64	d7, d7, d6
 8002496:	ed9f 6b46 	vldr	d6, [pc, #280]	; 80025b0 <inverseKinematic+0xec8>
 800249a:	ee37 5b06 	vadd.f64	d5, d7, d6
 800249e:	ed97 7b04 	vldr	d7, [r7, #16]
 80024a2:	ee37 6b07 	vadd.f64	d6, d7, d7
 80024a6:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80024aa:	ee38 7b07 	vadd.f64	d7, d8, d7
 80024ae:	4b4d      	ldr	r3, [pc, #308]	; (80025e4 <inverseKinematic+0xefc>)
 80024b0:	ed83 7b00 	vstr	d7, [r3]

	motor1.theta = -1.0 * asin(ZJ1_1 / L1);
 80024b4:	4b4c      	ldr	r3, [pc, #304]	; (80025e8 <inverseKinematic+0xf00>)
 80024b6:	ed93 7b00 	vldr	d7, [r3]
 80024ba:	ed9f 5b41 	vldr	d5, [pc, #260]	; 80025c0 <inverseKinematic+0xed8>
 80024be:	ee87 6b05 	vdiv.f64	d6, d7, d5
 80024c2:	eeb0 0b46 	vmov.f64	d0, d6
 80024c6:	f00f fcb1 	bl	8011e2c <asin>
 80024ca:	eeb0 7b40 	vmov.f64	d7, d0
 80024ce:	eeb1 7b47 	vneg.f64	d7, d7
 80024d2:	4b46      	ldr	r3, [pc, #280]	; (80025ec <inverseKinematic+0xf04>)
 80024d4:	ed83 7b00 	vstr	d7, [r3]
	motor1.theta = motor1.theta * RAD_TO_DEG;
 80024d8:	4b44      	ldr	r3, [pc, #272]	; (80025ec <inverseKinematic+0xf04>)
 80024da:	ed93 7b00 	vldr	d7, [r3]
 80024de:	ed9f 6b3a 	vldr	d6, [pc, #232]	; 80025c8 <inverseKinematic+0xee0>
 80024e2:	ee27 6b06 	vmul.f64	d6, d7, d6
 80024e6:	ed9f 5b3a 	vldr	d5, [pc, #232]	; 80025d0 <inverseKinematic+0xee8>
 80024ea:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80024ee:	4b3f      	ldr	r3, [pc, #252]	; (80025ec <inverseKinematic+0xf04>)
 80024f0:	ed83 7b00 	vstr	d7, [r3]
	motor2.theta = -1.0 * asin(ZJ2_1 / L1);
 80024f4:	4b3e      	ldr	r3, [pc, #248]	; (80025f0 <inverseKinematic+0xf08>)
 80024f6:	ed93 7b00 	vldr	d7, [r3]
 80024fa:	ed9f 5b31 	vldr	d5, [pc, #196]	; 80025c0 <inverseKinematic+0xed8>
 80024fe:	ee87 6b05 	vdiv.f64	d6, d7, d5
 8002502:	eeb0 0b46 	vmov.f64	d0, d6
 8002506:	f00f fc91 	bl	8011e2c <asin>
 800250a:	eeb0 7b40 	vmov.f64	d7, d0
 800250e:	eeb1 7b47 	vneg.f64	d7, d7
 8002512:	4b38      	ldr	r3, [pc, #224]	; (80025f4 <inverseKinematic+0xf0c>)
 8002514:	ed83 7b00 	vstr	d7, [r3]
	motor2.theta = motor2.theta * RAD_TO_DEG;
 8002518:	4b36      	ldr	r3, [pc, #216]	; (80025f4 <inverseKinematic+0xf0c>)
 800251a:	ed93 7b00 	vldr	d7, [r3]
 800251e:	ed9f 6b2a 	vldr	d6, [pc, #168]	; 80025c8 <inverseKinematic+0xee0>
 8002522:	ee27 6b06 	vmul.f64	d6, d7, d6
 8002526:	ed9f 5b2a 	vldr	d5, [pc, #168]	; 80025d0 <inverseKinematic+0xee8>
 800252a:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800252e:	4b31      	ldr	r3, [pc, #196]	; (80025f4 <inverseKinematic+0xf0c>)
 8002530:	ed83 7b00 	vstr	d7, [r3]
	motor3.theta = -1.0 * asin(ZJ3_1 / L1);
 8002534:	4b29      	ldr	r3, [pc, #164]	; (80025dc <inverseKinematic+0xef4>)
 8002536:	ed93 7b00 	vldr	d7, [r3]
 800253a:	ed9f 5b21 	vldr	d5, [pc, #132]	; 80025c0 <inverseKinematic+0xed8>
 800253e:	ee87 6b05 	vdiv.f64	d6, d7, d5
 8002542:	eeb0 0b46 	vmov.f64	d0, d6
 8002546:	f00f fc71 	bl	8011e2c <asin>
 800254a:	eeb0 7b40 	vmov.f64	d7, d0
 800254e:	eeb1 7b47 	vneg.f64	d7, d7
 8002552:	4b29      	ldr	r3, [pc, #164]	; (80025f8 <inverseKinematic+0xf10>)
 8002554:	ed83 7b00 	vstr	d7, [r3]
	motor3.theta = motor3.theta * RAD_TO_DEG;
 8002558:	4b27      	ldr	r3, [pc, #156]	; (80025f8 <inverseKinematic+0xf10>)
 800255a:	ed93 7b00 	vldr	d7, [r3]
 800255e:	ed9f 6b1a 	vldr	d6, [pc, #104]	; 80025c8 <inverseKinematic+0xee0>
 8002562:	ee27 6b06 	vmul.f64	d6, d7, d6
 8002566:	ed9f 5b1a 	vldr	d5, [pc, #104]	; 80025d0 <inverseKinematic+0xee8>
 800256a:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800256e:	4b22      	ldr	r3, [pc, #136]	; (80025f8 <inverseKinematic+0xf10>)
 8002570:	ed83 7b00 	vstr	d7, [r3]
}
 8002574:	bf00      	nop
 8002576:	3718      	adds	r7, #24
 8002578:	46bd      	mov	sp, r7
 800257a:	ecbd 8b04 	vpop	{d8-d9}
 800257e:	bd80      	pop	{r7, pc}
 8002580:	9ba5e356 	.word	0x9ba5e356
 8002584:	3fe020c4 	.word	0x3fe020c4
 8002588:	24dd2f1b 	.word	0x24dd2f1b
 800258c:	3fc58106 	.word	0x3fc58106
 8002590:	5625749b 	.word	0x5625749b
 8002594:	3faf09d1 	.word	0x3faf09d1
 8002598:	1eb851ec 	.word	0x1eb851ec
 800259c:	3fa1eb85 	.word	0x3fa1eb85
 80025a0:	70a3d70a 	.word	0x70a3d70a
 80025a4:	3fd70a3d 	.word	0x3fd70a3d
 80025a8:	93d96639 	.word	0x93d96639
 80025ac:	3f9ce6c0 	.word	0x3f9ce6c0
 80025b0:	47ae147c 	.word	0x47ae147c
 80025b4:	3fa47ae1 	.word	0x3fa47ae1
 80025b8:	e8584caa 	.word	0xe8584caa
 80025bc:	400bb67a 	.word	0x400bb67a
 80025c0:	9999999a 	.word	0x9999999a
 80025c4:	3fc99999 	.word	0x3fc99999
 80025c8:	00000000 	.word	0x00000000
 80025cc:	40668000 	.word	0x40668000
 80025d0:	54442eea 	.word	0x54442eea
 80025d4:	400921fb 	.word	0x400921fb
 80025d8:	24000358 	.word	0x24000358
 80025dc:	24000368 	.word	0x24000368
 80025e0:	24000360 	.word	0x24000360
 80025e4:	24000370 	.word	0x24000370
 80025e8:	240002d8 	.word	0x240002d8
 80025ec:	24000378 	.word	0x24000378
 80025f0:	24000320 	.word	0x24000320
 80025f4:	240003c0 	.word	0x240003c0
 80025f8:	24000408 	.word	0x24000408

080025fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80025fc:	b580      	push	{r7, lr}
 80025fe:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002600:	f004 f814 	bl	800662c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002604:	f000 f81c 	bl	8002640 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002608:	f7fe fa38 	bl	8000a7c <MX_GPIO_Init>
  MX_TIM2_Init();
 800260c:	f001 fbe0 	bl	8003dd0 <MX_TIM2_Init>
  MX_USART3_UART_Init();
 8002610:	f003 fe6a 	bl	80062e8 <MX_USART3_UART_Init>
  MX_TIM12_Init();
 8002614:	f001 fd7e 	bl	8004114 <MX_TIM12_Init>
  MX_TIM13_Init();
 8002618:	f001 fdde 	bl	80041d8 <MX_TIM13_Init>
  MX_TIM14_Init();
 800261c:	f001 fe28 	bl	8004270 <MX_TIM14_Init>
  MX_TIM5_Init();
 8002620:	f001 fd2a 	bl	8004078 <MX_TIM5_Init>
  MX_TIM15_Init();
 8002624:	f001 fe70 	bl	8004308 <MX_TIM15_Init>
  MX_USART2_UART_Init();
 8002628:	f003 fe12 	bl	8006250 <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 800262c:	f003 fdc4 	bl	80061b8 <MX_USART1_UART_Init>
  MX_TIM3_Init();
 8002630:	f001 fc3e 	bl	8003eb0 <MX_TIM3_Init>
  MX_TIM4_Init();
 8002634:	f001 fcae 	bl	8003f94 <MX_TIM4_Init>

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

		statesMachineLoop();
 8002638:	f000 fc16 	bl	8002e68 <statesMachineLoop>
 800263c:	e7fc      	b.n	8002638 <main+0x3c>
	...

08002640 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002640:	b580      	push	{r7, lr}
 8002642:	b09c      	sub	sp, #112	; 0x70
 8002644:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002646:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800264a:	224c      	movs	r2, #76	; 0x4c
 800264c:	2100      	movs	r1, #0
 800264e:	4618      	mov	r0, r3
 8002650:	f00c fc4a 	bl	800eee8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002654:	1d3b      	adds	r3, r7, #4
 8002656:	2220      	movs	r2, #32
 8002658:	2100      	movs	r1, #0
 800265a:	4618      	mov	r0, r3
 800265c:	f00c fc44 	bl	800eee8 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8002660:	2002      	movs	r0, #2
 8002662:	f005 f947 	bl	80078f4 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8002666:	2300      	movs	r3, #0
 8002668:	603b      	str	r3, [r7, #0]
 800266a:	4b32      	ldr	r3, [pc, #200]	; (8002734 <SystemClock_Config+0xf4>)
 800266c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800266e:	4a31      	ldr	r2, [pc, #196]	; (8002734 <SystemClock_Config+0xf4>)
 8002670:	f023 0301 	bic.w	r3, r3, #1
 8002674:	62d3      	str	r3, [r2, #44]	; 0x2c
 8002676:	4b2f      	ldr	r3, [pc, #188]	; (8002734 <SystemClock_Config+0xf4>)
 8002678:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800267a:	f003 0301 	and.w	r3, r3, #1
 800267e:	603b      	str	r3, [r7, #0]
 8002680:	4b2d      	ldr	r3, [pc, #180]	; (8002738 <SystemClock_Config+0xf8>)
 8002682:	699b      	ldr	r3, [r3, #24]
 8002684:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8002688:	4a2b      	ldr	r2, [pc, #172]	; (8002738 <SystemClock_Config+0xf8>)
 800268a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800268e:	6193      	str	r3, [r2, #24]
 8002690:	4b29      	ldr	r3, [pc, #164]	; (8002738 <SystemClock_Config+0xf8>)
 8002692:	699b      	ldr	r3, [r3, #24]
 8002694:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002698:	603b      	str	r3, [r7, #0]
 800269a:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800269c:	bf00      	nop
 800269e:	4b26      	ldr	r3, [pc, #152]	; (8002738 <SystemClock_Config+0xf8>)
 80026a0:	699b      	ldr	r3, [r3, #24]
 80026a2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80026a6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80026aa:	d1f8      	bne.n	800269e <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80026ac:	2302      	movs	r3, #2
 80026ae:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 80026b0:	2301      	movs	r3, #1
 80026b2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80026b4:	2340      	movs	r3, #64	; 0x40
 80026b6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80026b8:	2302      	movs	r3, #2
 80026ba:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80026bc:	2300      	movs	r3, #0
 80026be:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80026c0:	2304      	movs	r3, #4
 80026c2:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 16;
 80026c4:	2310      	movs	r3, #16
 80026c6:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80026c8:	2302      	movs	r3, #2
 80026ca:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80026cc:	2302      	movs	r3, #2
 80026ce:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80026d0:	2302      	movs	r3, #2
 80026d2:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80026d4:	230c      	movs	r3, #12
 80026d6:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80026d8:	2300      	movs	r3, #0
 80026da:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80026dc:	2300      	movs	r3, #0
 80026de:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80026e0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80026e4:	4618      	mov	r0, r3
 80026e6:	f005 f93f 	bl	8007968 <HAL_RCC_OscConfig>
 80026ea:	4603      	mov	r3, r0
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d001      	beq.n	80026f4 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 80026f0:	f000 faaa 	bl	8002c48 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80026f4:	233f      	movs	r3, #63	; 0x3f
 80026f6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80026f8:	2303      	movs	r3, #3
 80026fa:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80026fc:	2300      	movs	r3, #0
 80026fe:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8002700:	2308      	movs	r3, #8
 8002702:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8002704:	2300      	movs	r3, #0
 8002706:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8002708:	2340      	movs	r3, #64	; 0x40
 800270a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 800270c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002710:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8002712:	2300      	movs	r3, #0
 8002714:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8002716:	1d3b      	adds	r3, r7, #4
 8002718:	2101      	movs	r1, #1
 800271a:	4618      	mov	r0, r3
 800271c:	f005 fd52 	bl	80081c4 <HAL_RCC_ClockConfig>
 8002720:	4603      	mov	r3, r0
 8002722:	2b00      	cmp	r3, #0
 8002724:	d001      	beq.n	800272a <SystemClock_Config+0xea>
  {
    Error_Handler();
 8002726:	f000 fa8f 	bl	8002c48 <Error_Handler>
  }
}
 800272a:	bf00      	nop
 800272c:	3770      	adds	r7, #112	; 0x70
 800272e:	46bd      	mov	sp, r7
 8002730:	bd80      	pop	{r7, pc}
 8002732:	bf00      	nop
 8002734:	58000400 	.word	0x58000400
 8002738:	58024800 	.word	0x58024800

0800273c <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 800273c:	b580      	push	{r7, lr}
 800273e:	b082      	sub	sp, #8
 8002740:	af00      	add	r7, sp, #0
 8002742:	4603      	mov	r3, r0
 8002744:	80fb      	strh	r3, [r7, #6]

	test++;
 8002746:	4bab      	ldr	r3, [pc, #684]	; (80029f4 <HAL_GPIO_EXTI_Callback+0x2b8>)
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	3301      	adds	r3, #1
 800274c:	4aa9      	ldr	r2, [pc, #676]	; (80029f4 <HAL_GPIO_EXTI_Callback+0x2b8>)
 800274e:	6013      	str	r3, [r2, #0]


	switch( GPIO_Pin){
 8002750:	88fb      	ldrh	r3, [r7, #6]
 8002752:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002756:	f000 8133 	beq.w	80029c0 <HAL_GPIO_EXTI_Callback+0x284>
 800275a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800275e:	f300 8143 	bgt.w	80029e8 <HAL_GPIO_EXTI_Callback+0x2ac>
 8002762:	2b20      	cmp	r3, #32
 8002764:	dc4a      	bgt.n	80027fc <HAL_GPIO_EXTI_Callback+0xc0>
 8002766:	2b00      	cmp	r3, #0
 8002768:	f340 813e 	ble.w	80029e8 <HAL_GPIO_EXTI_Callback+0x2ac>
 800276c:	3b01      	subs	r3, #1
 800276e:	2b1f      	cmp	r3, #31
 8002770:	f200 813a 	bhi.w	80029e8 <HAL_GPIO_EXTI_Callback+0x2ac>
 8002774:	a201      	add	r2, pc, #4	; (adr r2, 800277c <HAL_GPIO_EXTI_Callback+0x40>)
 8002776:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800277a:	bf00      	nop
 800277c:	0800284f 	.word	0x0800284f
 8002780:	080029e9 	.word	0x080029e9
 8002784:	080029e9 	.word	0x080029e9
 8002788:	080028e3 	.word	0x080028e3
 800278c:	080029e9 	.word	0x080029e9
 8002790:	080029e9 	.word	0x080029e9
 8002794:	080029e9 	.word	0x080029e9
 8002798:	08002899 	.word	0x08002899
 800279c:	080029e9 	.word	0x080029e9
 80027a0:	080029e9 	.word	0x080029e9
 80027a4:	080029e9 	.word	0x080029e9
 80027a8:	080029e9 	.word	0x080029e9
 80027ac:	080029e9 	.word	0x080029e9
 80027b0:	080029e9 	.word	0x080029e9
 80027b4:	080029e9 	.word	0x080029e9
 80027b8:	08002977 	.word	0x08002977
 80027bc:	080029e9 	.word	0x080029e9
 80027c0:	080029e9 	.word	0x080029e9
 80027c4:	080029e9 	.word	0x080029e9
 80027c8:	080029e9 	.word	0x080029e9
 80027cc:	080029e9 	.word	0x080029e9
 80027d0:	080029e9 	.word	0x080029e9
 80027d4:	080029e9 	.word	0x080029e9
 80027d8:	080029e9 	.word	0x080029e9
 80027dc:	080029e9 	.word	0x080029e9
 80027e0:	080029e9 	.word	0x080029e9
 80027e4:	080029e9 	.word	0x080029e9
 80027e8:	080029e9 	.word	0x080029e9
 80027ec:	080029e9 	.word	0x080029e9
 80027f0:	080029e9 	.word	0x080029e9
 80027f4:	080029e9 	.word	0x080029e9
 80027f8:	0800292d 	.word	0x0800292d
 80027fc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002800:	f040 80f2 	bne.w	80029e8 <HAL_GPIO_EXTI_Callback+0x2ac>

		 case E_EndStop1_Inf_Pin:

			 Stop_PWM_MOTOR_1;
 8002804:	2100      	movs	r1, #0
 8002806:	487c      	ldr	r0, [pc, #496]	; (80029f8 <HAL_GPIO_EXTI_Callback+0x2bc>)
 8002808:	f007 fed6 	bl	800a5b8 <HAL_TIM_PWM_Stop>
			 Stop_PWM_MOTOR_2;
 800280c:	2100      	movs	r1, #0
 800280e:	487b      	ldr	r0, [pc, #492]	; (80029fc <HAL_GPIO_EXTI_Callback+0x2c0>)
 8002810:	f007 fed2 	bl	800a5b8 <HAL_TIM_PWM_Stop>
			 Stop_PWM_MOTOR_3;
 8002814:	2100      	movs	r1, #0
 8002816:	487a      	ldr	r0, [pc, #488]	; (8002a00 <HAL_GPIO_EXTI_Callback+0x2c4>)
 8002818:	f007 fece 	bl	800a5b8 <HAL_TIM_PWM_Stop>

			 HAL_TIM_Base_Stop_IT(&htim15);
 800281c:	4879      	ldr	r0, [pc, #484]	; (8002a04 <HAL_GPIO_EXTI_Callback+0x2c8>)
 800281e:	f007 fd2d 	bl	800a27c <HAL_TIM_Base_Stop_IT>
			 HAL_TIM_Base_Stop(&htim5);
 8002822:	4879      	ldr	r0, [pc, #484]	; (8002a08 <HAL_GPIO_EXTI_Callback+0x2cc>)
 8002824:	f007 fc8a 	bl	800a13c <HAL_TIM_Base_Stop>

			 HAL_TIM_IC_Stop(&htim2, TIM_CHANNEL_1);
 8002828:	2100      	movs	r1, #0
 800282a:	4878      	ldr	r0, [pc, #480]	; (8002a0c <HAL_GPIO_EXTI_Callback+0x2d0>)
 800282c:	f007 ffbb 	bl	800a7a6 <HAL_TIM_IC_Stop>
			 HAL_TIM_IC_Stop(&htim3, TIM_CHANNEL_1);
 8002830:	2100      	movs	r1, #0
 8002832:	4877      	ldr	r0, [pc, #476]	; (8002a10 <HAL_GPIO_EXTI_Callback+0x2d4>)
 8002834:	f007 ffb7 	bl	800a7a6 <HAL_TIM_IC_Stop>
			 HAL_TIM_IC_Stop(&htim4, TIM_CHANNEL_1);
 8002838:	2100      	movs	r1, #0
 800283a:	4876      	ldr	r0, [pc, #472]	; (8002a14 <HAL_GPIO_EXTI_Callback+0x2d8>)
 800283c:	f007 ffb3 	bl	800a7a6 <HAL_TIM_IC_Stop>

			 endStopAlarmInf = true;
 8002840:	4b75      	ldr	r3, [pc, #468]	; (8002a18 <HAL_GPIO_EXTI_Callback+0x2dc>)
 8002842:	2201      	movs	r2, #1
 8002844:	701a      	strb	r2, [r3, #0]
			 state = FAULT;
 8002846:	4b75      	ldr	r3, [pc, #468]	; (8002a1c <HAL_GPIO_EXTI_Callback+0x2e0>)
 8002848:	2205      	movs	r2, #5
 800284a:	701a      	strb	r2, [r3, #0]
			 break;
 800284c:	e0cd      	b.n	80029ea <HAL_GPIO_EXTI_Callback+0x2ae>

		 case E_EndStop1_Sup_Pin:
			 Stop_PWM_MOTOR_1;
 800284e:	2100      	movs	r1, #0
 8002850:	4869      	ldr	r0, [pc, #420]	; (80029f8 <HAL_GPIO_EXTI_Callback+0x2bc>)
 8002852:	f007 feb1 	bl	800a5b8 <HAL_TIM_PWM_Stop>
			 Stop_PWM_MOTOR_2;
 8002856:	2100      	movs	r1, #0
 8002858:	4868      	ldr	r0, [pc, #416]	; (80029fc <HAL_GPIO_EXTI_Callback+0x2c0>)
 800285a:	f007 fead 	bl	800a5b8 <HAL_TIM_PWM_Stop>
			 Stop_PWM_MOTOR_3;
 800285e:	2100      	movs	r1, #0
 8002860:	4867      	ldr	r0, [pc, #412]	; (8002a00 <HAL_GPIO_EXTI_Callback+0x2c4>)
 8002862:	f007 fea9 	bl	800a5b8 <HAL_TIM_PWM_Stop>

			 HAL_TIM_Base_Stop_IT(&htim15);
 8002866:	4867      	ldr	r0, [pc, #412]	; (8002a04 <HAL_GPIO_EXTI_Callback+0x2c8>)
 8002868:	f007 fd08 	bl	800a27c <HAL_TIM_Base_Stop_IT>
			 HAL_TIM_Base_Stop(&htim5);
 800286c:	4866      	ldr	r0, [pc, #408]	; (8002a08 <HAL_GPIO_EXTI_Callback+0x2cc>)
 800286e:	f007 fc65 	bl	800a13c <HAL_TIM_Base_Stop>

			 HAL_TIM_IC_Stop(&htim2, TIM_CHANNEL_1);
 8002872:	2100      	movs	r1, #0
 8002874:	4865      	ldr	r0, [pc, #404]	; (8002a0c <HAL_GPIO_EXTI_Callback+0x2d0>)
 8002876:	f007 ff96 	bl	800a7a6 <HAL_TIM_IC_Stop>
			 HAL_TIM_IC_Stop(&htim3, TIM_CHANNEL_1);
 800287a:	2100      	movs	r1, #0
 800287c:	4864      	ldr	r0, [pc, #400]	; (8002a10 <HAL_GPIO_EXTI_Callback+0x2d4>)
 800287e:	f007 ff92 	bl	800a7a6 <HAL_TIM_IC_Stop>
			 HAL_TIM_IC_Stop(&htim4, TIM_CHANNEL_1);
 8002882:	2100      	movs	r1, #0
 8002884:	4863      	ldr	r0, [pc, #396]	; (8002a14 <HAL_GPIO_EXTI_Callback+0x2d8>)
 8002886:	f007 ff8e 	bl	800a7a6 <HAL_TIM_IC_Stop>

			 endStopAlarmSup = true;
 800288a:	4b65      	ldr	r3, [pc, #404]	; (8002a20 <HAL_GPIO_EXTI_Callback+0x2e4>)
 800288c:	2201      	movs	r2, #1
 800288e:	701a      	strb	r2, [r3, #0]
			 state = FAULT;
 8002890:	4b62      	ldr	r3, [pc, #392]	; (8002a1c <HAL_GPIO_EXTI_Callback+0x2e0>)
 8002892:	2205      	movs	r2, #5
 8002894:	701a      	strb	r2, [r3, #0]
			 break;
 8002896:	e0a8      	b.n	80029ea <HAL_GPIO_EXTI_Callback+0x2ae>

		 case E_EndStop2_Inf_Pin:
			 Stop_PWM_MOTOR_1;
 8002898:	2100      	movs	r1, #0
 800289a:	4857      	ldr	r0, [pc, #348]	; (80029f8 <HAL_GPIO_EXTI_Callback+0x2bc>)
 800289c:	f007 fe8c 	bl	800a5b8 <HAL_TIM_PWM_Stop>
			 Stop_PWM_MOTOR_2;
 80028a0:	2100      	movs	r1, #0
 80028a2:	4856      	ldr	r0, [pc, #344]	; (80029fc <HAL_GPIO_EXTI_Callback+0x2c0>)
 80028a4:	f007 fe88 	bl	800a5b8 <HAL_TIM_PWM_Stop>
			 Stop_PWM_MOTOR_3;
 80028a8:	2100      	movs	r1, #0
 80028aa:	4855      	ldr	r0, [pc, #340]	; (8002a00 <HAL_GPIO_EXTI_Callback+0x2c4>)
 80028ac:	f007 fe84 	bl	800a5b8 <HAL_TIM_PWM_Stop>

			 HAL_TIM_Base_Stop_IT(&htim15);
 80028b0:	4854      	ldr	r0, [pc, #336]	; (8002a04 <HAL_GPIO_EXTI_Callback+0x2c8>)
 80028b2:	f007 fce3 	bl	800a27c <HAL_TIM_Base_Stop_IT>
			 HAL_TIM_Base_Stop(&htim5);
 80028b6:	4854      	ldr	r0, [pc, #336]	; (8002a08 <HAL_GPIO_EXTI_Callback+0x2cc>)
 80028b8:	f007 fc40 	bl	800a13c <HAL_TIM_Base_Stop>

			 HAL_TIM_IC_Stop(&htim2, TIM_CHANNEL_1);
 80028bc:	2100      	movs	r1, #0
 80028be:	4853      	ldr	r0, [pc, #332]	; (8002a0c <HAL_GPIO_EXTI_Callback+0x2d0>)
 80028c0:	f007 ff71 	bl	800a7a6 <HAL_TIM_IC_Stop>
			 HAL_TIM_IC_Stop(&htim3, TIM_CHANNEL_1);
 80028c4:	2100      	movs	r1, #0
 80028c6:	4852      	ldr	r0, [pc, #328]	; (8002a10 <HAL_GPIO_EXTI_Callback+0x2d4>)
 80028c8:	f007 ff6d 	bl	800a7a6 <HAL_TIM_IC_Stop>
			 HAL_TIM_IC_Stop(&htim4, TIM_CHANNEL_1);
 80028cc:	2100      	movs	r1, #0
 80028ce:	4851      	ldr	r0, [pc, #324]	; (8002a14 <HAL_GPIO_EXTI_Callback+0x2d8>)
 80028d0:	f007 ff69 	bl	800a7a6 <HAL_TIM_IC_Stop>

			 endStopAlarmInf = true;
 80028d4:	4b50      	ldr	r3, [pc, #320]	; (8002a18 <HAL_GPIO_EXTI_Callback+0x2dc>)
 80028d6:	2201      	movs	r2, #1
 80028d8:	701a      	strb	r2, [r3, #0]
			 state = FAULT;
 80028da:	4b50      	ldr	r3, [pc, #320]	; (8002a1c <HAL_GPIO_EXTI_Callback+0x2e0>)
 80028dc:	2205      	movs	r2, #5
 80028de:	701a      	strb	r2, [r3, #0]
			 break;
 80028e0:	e083      	b.n	80029ea <HAL_GPIO_EXTI_Callback+0x2ae>


		 case E_EndStop2_Sup_Pin:
			 Stop_PWM_MOTOR_1;
 80028e2:	2100      	movs	r1, #0
 80028e4:	4844      	ldr	r0, [pc, #272]	; (80029f8 <HAL_GPIO_EXTI_Callback+0x2bc>)
 80028e6:	f007 fe67 	bl	800a5b8 <HAL_TIM_PWM_Stop>
			 Stop_PWM_MOTOR_2;
 80028ea:	2100      	movs	r1, #0
 80028ec:	4843      	ldr	r0, [pc, #268]	; (80029fc <HAL_GPIO_EXTI_Callback+0x2c0>)
 80028ee:	f007 fe63 	bl	800a5b8 <HAL_TIM_PWM_Stop>
			 Stop_PWM_MOTOR_3;
 80028f2:	2100      	movs	r1, #0
 80028f4:	4842      	ldr	r0, [pc, #264]	; (8002a00 <HAL_GPIO_EXTI_Callback+0x2c4>)
 80028f6:	f007 fe5f 	bl	800a5b8 <HAL_TIM_PWM_Stop>

			 HAL_TIM_Base_Stop_IT(&htim15);
 80028fa:	4842      	ldr	r0, [pc, #264]	; (8002a04 <HAL_GPIO_EXTI_Callback+0x2c8>)
 80028fc:	f007 fcbe 	bl	800a27c <HAL_TIM_Base_Stop_IT>
			 HAL_TIM_Base_Stop(&htim5);
 8002900:	4841      	ldr	r0, [pc, #260]	; (8002a08 <HAL_GPIO_EXTI_Callback+0x2cc>)
 8002902:	f007 fc1b 	bl	800a13c <HAL_TIM_Base_Stop>

			 HAL_TIM_IC_Stop(&htim2, TIM_CHANNEL_1);
 8002906:	2100      	movs	r1, #0
 8002908:	4840      	ldr	r0, [pc, #256]	; (8002a0c <HAL_GPIO_EXTI_Callback+0x2d0>)
 800290a:	f007 ff4c 	bl	800a7a6 <HAL_TIM_IC_Stop>
			 HAL_TIM_IC_Stop(&htim3, TIM_CHANNEL_1);
 800290e:	2100      	movs	r1, #0
 8002910:	483f      	ldr	r0, [pc, #252]	; (8002a10 <HAL_GPIO_EXTI_Callback+0x2d4>)
 8002912:	f007 ff48 	bl	800a7a6 <HAL_TIM_IC_Stop>
			 HAL_TIM_IC_Stop(&htim4, TIM_CHANNEL_1);
 8002916:	2100      	movs	r1, #0
 8002918:	483e      	ldr	r0, [pc, #248]	; (8002a14 <HAL_GPIO_EXTI_Callback+0x2d8>)
 800291a:	f007 ff44 	bl	800a7a6 <HAL_TIM_IC_Stop>

			 endStopAlarmSup = true;
 800291e:	4b40      	ldr	r3, [pc, #256]	; (8002a20 <HAL_GPIO_EXTI_Callback+0x2e4>)
 8002920:	2201      	movs	r2, #1
 8002922:	701a      	strb	r2, [r3, #0]
			 state = FAULT;
 8002924:	4b3d      	ldr	r3, [pc, #244]	; (8002a1c <HAL_GPIO_EXTI_Callback+0x2e0>)
 8002926:	2205      	movs	r2, #5
 8002928:	701a      	strb	r2, [r3, #0]
			 break;
 800292a:	e05e      	b.n	80029ea <HAL_GPIO_EXTI_Callback+0x2ae>

		 case E_EndStop3_Inf_Pin:
			 Stop_PWM_MOTOR_1;
 800292c:	2100      	movs	r1, #0
 800292e:	4832      	ldr	r0, [pc, #200]	; (80029f8 <HAL_GPIO_EXTI_Callback+0x2bc>)
 8002930:	f007 fe42 	bl	800a5b8 <HAL_TIM_PWM_Stop>
			 Stop_PWM_MOTOR_2;
 8002934:	2100      	movs	r1, #0
 8002936:	4831      	ldr	r0, [pc, #196]	; (80029fc <HAL_GPIO_EXTI_Callback+0x2c0>)
 8002938:	f007 fe3e 	bl	800a5b8 <HAL_TIM_PWM_Stop>
			 Stop_PWM_MOTOR_3;
 800293c:	2100      	movs	r1, #0
 800293e:	4830      	ldr	r0, [pc, #192]	; (8002a00 <HAL_GPIO_EXTI_Callback+0x2c4>)
 8002940:	f007 fe3a 	bl	800a5b8 <HAL_TIM_PWM_Stop>

			 HAL_TIM_Base_Stop_IT(&htim15);
 8002944:	482f      	ldr	r0, [pc, #188]	; (8002a04 <HAL_GPIO_EXTI_Callback+0x2c8>)
 8002946:	f007 fc99 	bl	800a27c <HAL_TIM_Base_Stop_IT>
			 HAL_TIM_Base_Stop(&htim5);
 800294a:	482f      	ldr	r0, [pc, #188]	; (8002a08 <HAL_GPIO_EXTI_Callback+0x2cc>)
 800294c:	f007 fbf6 	bl	800a13c <HAL_TIM_Base_Stop>

			 HAL_TIM_IC_Stop(&htim2, TIM_CHANNEL_1);
 8002950:	2100      	movs	r1, #0
 8002952:	482e      	ldr	r0, [pc, #184]	; (8002a0c <HAL_GPIO_EXTI_Callback+0x2d0>)
 8002954:	f007 ff27 	bl	800a7a6 <HAL_TIM_IC_Stop>
			 HAL_TIM_IC_Stop(&htim3, TIM_CHANNEL_1);
 8002958:	2100      	movs	r1, #0
 800295a:	482d      	ldr	r0, [pc, #180]	; (8002a10 <HAL_GPIO_EXTI_Callback+0x2d4>)
 800295c:	f007 ff23 	bl	800a7a6 <HAL_TIM_IC_Stop>
			 HAL_TIM_IC_Stop(&htim4, TIM_CHANNEL_1);
 8002960:	2100      	movs	r1, #0
 8002962:	482c      	ldr	r0, [pc, #176]	; (8002a14 <HAL_GPIO_EXTI_Callback+0x2d8>)
 8002964:	f007 ff1f 	bl	800a7a6 <HAL_TIM_IC_Stop>

			 endStopAlarmInf = true;
 8002968:	4b2b      	ldr	r3, [pc, #172]	; (8002a18 <HAL_GPIO_EXTI_Callback+0x2dc>)
 800296a:	2201      	movs	r2, #1
 800296c:	701a      	strb	r2, [r3, #0]
			 state = FAULT;
 800296e:	4b2b      	ldr	r3, [pc, #172]	; (8002a1c <HAL_GPIO_EXTI_Callback+0x2e0>)
 8002970:	2205      	movs	r2, #5
 8002972:	701a      	strb	r2, [r3, #0]

			 break;
 8002974:	e039      	b.n	80029ea <HAL_GPIO_EXTI_Callback+0x2ae>

		 case E_EndStop3_Sup_Pin:
			 Stop_PWM_MOTOR_1;
 8002976:	2100      	movs	r1, #0
 8002978:	481f      	ldr	r0, [pc, #124]	; (80029f8 <HAL_GPIO_EXTI_Callback+0x2bc>)
 800297a:	f007 fe1d 	bl	800a5b8 <HAL_TIM_PWM_Stop>
			 Stop_PWM_MOTOR_2;
 800297e:	2100      	movs	r1, #0
 8002980:	481e      	ldr	r0, [pc, #120]	; (80029fc <HAL_GPIO_EXTI_Callback+0x2c0>)
 8002982:	f007 fe19 	bl	800a5b8 <HAL_TIM_PWM_Stop>
			 Stop_PWM_MOTOR_3;
 8002986:	2100      	movs	r1, #0
 8002988:	481d      	ldr	r0, [pc, #116]	; (8002a00 <HAL_GPIO_EXTI_Callback+0x2c4>)
 800298a:	f007 fe15 	bl	800a5b8 <HAL_TIM_PWM_Stop>

			 HAL_TIM_Base_Stop_IT(&htim15);
 800298e:	481d      	ldr	r0, [pc, #116]	; (8002a04 <HAL_GPIO_EXTI_Callback+0x2c8>)
 8002990:	f007 fc74 	bl	800a27c <HAL_TIM_Base_Stop_IT>
			 HAL_TIM_Base_Stop(&htim5);
 8002994:	481c      	ldr	r0, [pc, #112]	; (8002a08 <HAL_GPIO_EXTI_Callback+0x2cc>)
 8002996:	f007 fbd1 	bl	800a13c <HAL_TIM_Base_Stop>

			 HAL_TIM_IC_Stop(&htim2, TIM_CHANNEL_1);
 800299a:	2100      	movs	r1, #0
 800299c:	481b      	ldr	r0, [pc, #108]	; (8002a0c <HAL_GPIO_EXTI_Callback+0x2d0>)
 800299e:	f007 ff02 	bl	800a7a6 <HAL_TIM_IC_Stop>
			 HAL_TIM_IC_Stop(&htim3, TIM_CHANNEL_1);
 80029a2:	2100      	movs	r1, #0
 80029a4:	481a      	ldr	r0, [pc, #104]	; (8002a10 <HAL_GPIO_EXTI_Callback+0x2d4>)
 80029a6:	f007 fefe 	bl	800a7a6 <HAL_TIM_IC_Stop>
			 HAL_TIM_IC_Stop(&htim4, TIM_CHANNEL_1);
 80029aa:	2100      	movs	r1, #0
 80029ac:	4819      	ldr	r0, [pc, #100]	; (8002a14 <HAL_GPIO_EXTI_Callback+0x2d8>)
 80029ae:	f007 fefa 	bl	800a7a6 <HAL_TIM_IC_Stop>

			 endStopAlarmSup = true;
 80029b2:	4b1b      	ldr	r3, [pc, #108]	; (8002a20 <HAL_GPIO_EXTI_Callback+0x2e4>)
 80029b4:	2201      	movs	r2, #1
 80029b6:	701a      	strb	r2, [r3, #0]
			 state = FAULT;
 80029b8:	4b18      	ldr	r3, [pc, #96]	; (8002a1c <HAL_GPIO_EXTI_Callback+0x2e0>)
 80029ba:	2205      	movs	r2, #5
 80029bc:	701a      	strb	r2, [r3, #0]
			 break;
 80029be:	e014      	b.n	80029ea <HAL_GPIO_EXTI_Callback+0x2ae>

		 case BUTTON_Pin:

			 if (!endStopAlarmSup && !endStopAlarmInf && !faultDrivers){
 80029c0:	4b17      	ldr	r3, [pc, #92]	; (8002a20 <HAL_GPIO_EXTI_Callback+0x2e4>)
 80029c2:	781b      	ldrb	r3, [r3, #0]
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d10b      	bne.n	80029e0 <HAL_GPIO_EXTI_Callback+0x2a4>
 80029c8:	4b13      	ldr	r3, [pc, #76]	; (8002a18 <HAL_GPIO_EXTI_Callback+0x2dc>)
 80029ca:	781b      	ldrb	r3, [r3, #0]
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d107      	bne.n	80029e0 <HAL_GPIO_EXTI_Callback+0x2a4>
 80029d0:	4b14      	ldr	r3, [pc, #80]	; (8002a24 <HAL_GPIO_EXTI_Callback+0x2e8>)
 80029d2:	781b      	ldrb	r3, [r3, #0]
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d103      	bne.n	80029e0 <HAL_GPIO_EXTI_Callback+0x2a4>
				 continuar = false;
 80029d8:	4b13      	ldr	r3, [pc, #76]	; (8002a28 <HAL_GPIO_EXTI_Callback+0x2ec>)
 80029da:	2200      	movs	r2, #0
 80029dc:	701a      	strb	r2, [r3, #0]
			 }else{continuar = true;}

			 break;
 80029de:	e004      	b.n	80029ea <HAL_GPIO_EXTI_Callback+0x2ae>
			 }else{continuar = true;}
 80029e0:	4b11      	ldr	r3, [pc, #68]	; (8002a28 <HAL_GPIO_EXTI_Callback+0x2ec>)
 80029e2:	2201      	movs	r2, #1
 80029e4:	701a      	strb	r2, [r3, #0]
			 break;
 80029e6:	e000      	b.n	80029ea <HAL_GPIO_EXTI_Callback+0x2ae>
//			 //continuar = false;
//			 faultDrivers = true;
//			 state = FAULT;
//			 break;

		 default: break;
 80029e8:	bf00      	nop


	}


}
 80029ea:	bf00      	nop
 80029ec:	3708      	adds	r7, #8
 80029ee:	46bd      	mov	sp, r7
 80029f0:	bd80      	pop	{r7, pc}
 80029f2:	bf00      	nop
 80029f4:	2400045c 	.word	0x2400045c
 80029f8:	24000700 	.word	0x24000700
 80029fc:	2400074c 	.word	0x2400074c
 8002a00:	24000798 	.word	0x24000798
 8002a04:	240007e4 	.word	0x240007e4
 8002a08:	240006b4 	.word	0x240006b4
 8002a0c:	240005d0 	.word	0x240005d0
 8002a10:	2400061c 	.word	0x2400061c
 8002a14:	24000668 	.word	0x24000668
 8002a18:	24000465 	.word	0x24000465
 8002a1c:	24000460 	.word	0x24000460
 8002a20:	24000464 	.word	0x24000464
 8002a24:	24000467 	.word	0x24000467
 8002a28:	24000466 	.word	0x24000466

08002a2c <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8002a2c:	b580      	push	{r7, lr}
 8002a2e:	b084      	sub	sp, #16
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	6078      	str	r0, [r7, #4]

	if (huart->Instance == USART3) {
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	4a30      	ldr	r2, [pc, #192]	; (8002afc <HAL_UART_RxCpltCallback+0xd0>)
 8002a3a:	4293      	cmp	r3, r2
 8002a3c:	d14d      	bne.n	8002ada <HAL_UART_RxCpltCallback+0xae>
		char dato;
		dato = rx_data;
 8002a3e:	4b30      	ldr	r3, [pc, #192]	; (8002b00 <HAL_UART_RxCpltCallback+0xd4>)
 8002a40:	781b      	ldrb	r3, [r3, #0]
 8002a42:	73fb      	strb	r3, [r7, #15]
		switch (dato) {
 8002a44:	7bfb      	ldrb	r3, [r7, #15]
 8002a46:	2b3a      	cmp	r3, #58	; 0x3a
 8002a48:	d006      	beq.n	8002a58 <HAL_UART_RxCpltCallback+0x2c>
 8002a4a:	2b3a      	cmp	r3, #58	; 0x3a
 8002a4c:	dc36      	bgt.n	8002abc <HAL_UART_RxCpltCallback+0x90>
 8002a4e:	2b08      	cmp	r3, #8
 8002a50:	d009      	beq.n	8002a66 <HAL_UART_RxCpltCallback+0x3a>
 8002a52:	2b0d      	cmp	r3, #13
 8002a54:	d01e      	beq.n	8002a94 <HAL_UART_RxCpltCallback+0x68>
 8002a56:	e031      	b.n	8002abc <HAL_UART_RxCpltCallback+0x90>
		case ':':
			rx_index = 0;
 8002a58:	4b2a      	ldr	r3, [pc, #168]	; (8002b04 <HAL_UART_RxCpltCallback+0xd8>)
 8002a5a:	2200      	movs	r2, #0
 8002a5c:	701a      	strb	r2, [r3, #0]
			cm0 = 1;
 8002a5e:	4b2a      	ldr	r3, [pc, #168]	; (8002b08 <HAL_UART_RxCpltCallback+0xdc>)
 8002a60:	2201      	movs	r2, #1
 8002a62:	701a      	strb	r2, [r3, #0]
			break;
 8002a64:	e040      	b.n	8002ae8 <HAL_UART_RxCpltCallback+0xbc>
		case 8:
			if (rx_index > 0) {
 8002a66:	4b27      	ldr	r3, [pc, #156]	; (8002b04 <HAL_UART_RxCpltCallback+0xd8>)
 8002a68:	781b      	ldrb	r3, [r3, #0]
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d037      	beq.n	8002ade <HAL_UART_RxCpltCallback+0xb2>
				rx_index--;
 8002a6e:	4b25      	ldr	r3, [pc, #148]	; (8002b04 <HAL_UART_RxCpltCallback+0xd8>)
 8002a70:	781b      	ldrb	r3, [r3, #0]
 8002a72:	3b01      	subs	r3, #1
 8002a74:	b2da      	uxtb	r2, r3
 8002a76:	4b23      	ldr	r3, [pc, #140]	; (8002b04 <HAL_UART_RxCpltCallback+0xd8>)
 8002a78:	701a      	strb	r2, [r3, #0]
			}
			break;
 8002a7a:	e030      	b.n	8002ade <HAL_UART_RxCpltCallback+0xb2>
		case '\r':

			while (!(rx_index==30)){
				rx_buffer[rx_index]= (uint8_t) 0;
 8002a7c:	4b21      	ldr	r3, [pc, #132]	; (8002b04 <HAL_UART_RxCpltCallback+0xd8>)
 8002a7e:	781b      	ldrb	r3, [r3, #0]
 8002a80:	461a      	mov	r2, r3
 8002a82:	4b22      	ldr	r3, [pc, #136]	; (8002b0c <HAL_UART_RxCpltCallback+0xe0>)
 8002a84:	2100      	movs	r1, #0
 8002a86:	5499      	strb	r1, [r3, r2]
				rx_index++;
 8002a88:	4b1e      	ldr	r3, [pc, #120]	; (8002b04 <HAL_UART_RxCpltCallback+0xd8>)
 8002a8a:	781b      	ldrb	r3, [r3, #0]
 8002a8c:	3301      	adds	r3, #1
 8002a8e:	b2da      	uxtb	r2, r3
 8002a90:	4b1c      	ldr	r3, [pc, #112]	; (8002b04 <HAL_UART_RxCpltCallback+0xd8>)
 8002a92:	701a      	strb	r2, [r3, #0]
			while (!(rx_index==30)){
 8002a94:	4b1b      	ldr	r3, [pc, #108]	; (8002b04 <HAL_UART_RxCpltCallback+0xd8>)
 8002a96:	781b      	ldrb	r3, [r3, #0]
 8002a98:	2b1e      	cmp	r3, #30
 8002a9a:	d1ef      	bne.n	8002a7c <HAL_UART_RxCpltCallback+0x50>
			}

			if (cm0 == 1) {
 8002a9c:	4b1a      	ldr	r3, [pc, #104]	; (8002b08 <HAL_UART_RxCpltCallback+0xdc>)
 8002a9e:	781b      	ldrb	r3, [r3, #0]
 8002aa0:	2b01      	cmp	r3, #1
 8002aa2:	d11e      	bne.n	8002ae2 <HAL_UART_RxCpltCallback+0xb6>
				rx_buffer[rx_index] = 0;
 8002aa4:	4b17      	ldr	r3, [pc, #92]	; (8002b04 <HAL_UART_RxCpltCallback+0xd8>)
 8002aa6:	781b      	ldrb	r3, [r3, #0]
 8002aa8:	461a      	mov	r2, r3
 8002aaa:	4b18      	ldr	r3, [pc, #96]	; (8002b0c <HAL_UART_RxCpltCallback+0xe0>)
 8002aac:	2100      	movs	r1, #0
 8002aae:	5499      	strb	r1, [r3, r2]
				interpretaComando();
 8002ab0:	f7fe fc7c 	bl	80013ac <interpretaComando>
				cm0 = 0;
 8002ab4:	4b14      	ldr	r3, [pc, #80]	; (8002b08 <HAL_UART_RxCpltCallback+0xdc>)
 8002ab6:	2200      	movs	r2, #0
 8002ab8:	701a      	strb	r2, [r3, #0]

			}
			break;
 8002aba:	e012      	b.n	8002ae2 <HAL_UART_RxCpltCallback+0xb6>
		default:
			if (rx_index < 30) {
 8002abc:	4b11      	ldr	r3, [pc, #68]	; (8002b04 <HAL_UART_RxCpltCallback+0xd8>)
 8002abe:	781b      	ldrb	r3, [r3, #0]
 8002ac0:	2b1d      	cmp	r3, #29
 8002ac2:	d810      	bhi.n	8002ae6 <HAL_UART_RxCpltCallback+0xba>
				rx_buffer[rx_index++] = dato;
 8002ac4:	4b0f      	ldr	r3, [pc, #60]	; (8002b04 <HAL_UART_RxCpltCallback+0xd8>)
 8002ac6:	781b      	ldrb	r3, [r3, #0]
 8002ac8:	1c5a      	adds	r2, r3, #1
 8002aca:	b2d1      	uxtb	r1, r2
 8002acc:	4a0d      	ldr	r2, [pc, #52]	; (8002b04 <HAL_UART_RxCpltCallback+0xd8>)
 8002ace:	7011      	strb	r1, [r2, #0]
 8002ad0:	4619      	mov	r1, r3
 8002ad2:	4a0e      	ldr	r2, [pc, #56]	; (8002b0c <HAL_UART_RxCpltCallback+0xe0>)
 8002ad4:	7bfb      	ldrb	r3, [r7, #15]
 8002ad6:	5453      	strb	r3, [r2, r1]
			}
			break;
 8002ad8:	e005      	b.n	8002ae6 <HAL_UART_RxCpltCallback+0xba>
		}
	}
 8002ada:	bf00      	nop
 8002adc:	e004      	b.n	8002ae8 <HAL_UART_RxCpltCallback+0xbc>
			break;
 8002ade:	bf00      	nop
 8002ae0:	e002      	b.n	8002ae8 <HAL_UART_RxCpltCallback+0xbc>
			break;
 8002ae2:	bf00      	nop
 8002ae4:	e000      	b.n	8002ae8 <HAL_UART_RxCpltCallback+0xbc>
			break;
 8002ae6:	bf00      	nop
	HAL_UART_Receive_IT(&huart3, &rx_data, 1); //Receive data (one character only)
 8002ae8:	2201      	movs	r2, #1
 8002aea:	4905      	ldr	r1, [pc, #20]	; (8002b00 <HAL_UART_RxCpltCallback+0xd4>)
 8002aec:	4808      	ldr	r0, [pc, #32]	; (8002b10 <HAL_UART_RxCpltCallback+0xe4>)
 8002aee:	f009 faf1 	bl	800c0d4 <HAL_UART_Receive_IT>
}
 8002af2:	bf00      	nop
 8002af4:	3710      	adds	r7, #16
 8002af6:	46bd      	mov	sp, r7
 8002af8:	bd80      	pop	{r7, pc}
 8002afa:	bf00      	nop
 8002afc:	40004800 	.word	0x40004800
 8002b00:	240005a2 	.word	0x240005a2
 8002b04:	24000581 	.word	0x24000581
 8002b08:	24000458 	.word	0x24000458
 8002b0c:	24000584 	.word	0x24000584
 8002b10:	24000a08 	.word	0x24000a08

08002b14 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 8002b14:	b480      	push	{r7}
 8002b16:	b083      	sub	sp, #12
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	6078      	str	r0, [r7, #4]
	__NOP();
 8002b1c:	bf00      	nop
}
 8002b1e:	bf00      	nop
 8002b20:	370c      	adds	r7, #12
 8002b22:	46bd      	mov	sp, r7
 8002b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b28:	4770      	bx	lr
	...

08002b2c <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) {
 8002b2c:	b480      	push	{r7}
 8002b2e:	b083      	sub	sp, #12
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	6078      	str	r0, [r7, #4]

	if (htim->Instance == TIM2) {
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b3c:	d10f      	bne.n	8002b5e <HAL_TIM_IC_CaptureCallback+0x32>
		if (motor1.pMotor == motor1.numStep) {
 8002b3e:	4b1f      	ldr	r3, [pc, #124]	; (8002bbc <HAL_TIM_IC_CaptureCallback+0x90>)
 8002b40:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002b42:	4b1e      	ldr	r3, [pc, #120]	; (8002bbc <HAL_TIM_IC_CaptureCallback+0x90>)
 8002b44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b46:	429a      	cmp	r2, r3
 8002b48:	d103      	bne.n	8002b52 <HAL_TIM_IC_CaptureCallback+0x26>
			motor1.stepReached = true;
 8002b4a:	4b1c      	ldr	r3, [pc, #112]	; (8002bbc <HAL_TIM_IC_CaptureCallback+0x90>)
 8002b4c:	2201      	movs	r2, #1
 8002b4e:	765a      	strb	r2, [r3, #25]
			motor3.pMotor++;
		}

	}

}
 8002b50:	e02e      	b.n	8002bb0 <HAL_TIM_IC_CaptureCallback+0x84>
			motor1.pMotor++;
 8002b52:	4b1a      	ldr	r3, [pc, #104]	; (8002bbc <HAL_TIM_IC_CaptureCallback+0x90>)
 8002b54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b56:	3301      	adds	r3, #1
 8002b58:	4a18      	ldr	r2, [pc, #96]	; (8002bbc <HAL_TIM_IC_CaptureCallback+0x90>)
 8002b5a:	6413      	str	r3, [r2, #64]	; 0x40
}
 8002b5c:	e028      	b.n	8002bb0 <HAL_TIM_IC_CaptureCallback+0x84>
	}else if (htim->Instance == TIM3){
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	4a17      	ldr	r2, [pc, #92]	; (8002bc0 <HAL_TIM_IC_CaptureCallback+0x94>)
 8002b64:	4293      	cmp	r3, r2
 8002b66:	d10f      	bne.n	8002b88 <HAL_TIM_IC_CaptureCallback+0x5c>
		if (motor2.pMotor == motor2.numStep) {
 8002b68:	4b16      	ldr	r3, [pc, #88]	; (8002bc4 <HAL_TIM_IC_CaptureCallback+0x98>)
 8002b6a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002b6c:	4b15      	ldr	r3, [pc, #84]	; (8002bc4 <HAL_TIM_IC_CaptureCallback+0x98>)
 8002b6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b70:	429a      	cmp	r2, r3
 8002b72:	d103      	bne.n	8002b7c <HAL_TIM_IC_CaptureCallback+0x50>
			motor2.stepReached = true;
 8002b74:	4b13      	ldr	r3, [pc, #76]	; (8002bc4 <HAL_TIM_IC_CaptureCallback+0x98>)
 8002b76:	2201      	movs	r2, #1
 8002b78:	765a      	strb	r2, [r3, #25]
}
 8002b7a:	e019      	b.n	8002bb0 <HAL_TIM_IC_CaptureCallback+0x84>
			motor2.pMotor++;
 8002b7c:	4b11      	ldr	r3, [pc, #68]	; (8002bc4 <HAL_TIM_IC_CaptureCallback+0x98>)
 8002b7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b80:	3301      	adds	r3, #1
 8002b82:	4a10      	ldr	r2, [pc, #64]	; (8002bc4 <HAL_TIM_IC_CaptureCallback+0x98>)
 8002b84:	6413      	str	r3, [r2, #64]	; 0x40
}
 8002b86:	e013      	b.n	8002bb0 <HAL_TIM_IC_CaptureCallback+0x84>
	}else if (htim->Instance == TIM4){
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	4a0e      	ldr	r2, [pc, #56]	; (8002bc8 <HAL_TIM_IC_CaptureCallback+0x9c>)
 8002b8e:	4293      	cmp	r3, r2
 8002b90:	d10e      	bne.n	8002bb0 <HAL_TIM_IC_CaptureCallback+0x84>
		if (motor3.pMotor == motor3.numStep) {
 8002b92:	4b0e      	ldr	r3, [pc, #56]	; (8002bcc <HAL_TIM_IC_CaptureCallback+0xa0>)
 8002b94:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002b96:	4b0d      	ldr	r3, [pc, #52]	; (8002bcc <HAL_TIM_IC_CaptureCallback+0xa0>)
 8002b98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b9a:	429a      	cmp	r2, r3
 8002b9c:	d103      	bne.n	8002ba6 <HAL_TIM_IC_CaptureCallback+0x7a>
			motor3.stepReached = true;
 8002b9e:	4b0b      	ldr	r3, [pc, #44]	; (8002bcc <HAL_TIM_IC_CaptureCallback+0xa0>)
 8002ba0:	2201      	movs	r2, #1
 8002ba2:	765a      	strb	r2, [r3, #25]
}
 8002ba4:	e004      	b.n	8002bb0 <HAL_TIM_IC_CaptureCallback+0x84>
			motor3.pMotor++;
 8002ba6:	4b09      	ldr	r3, [pc, #36]	; (8002bcc <HAL_TIM_IC_CaptureCallback+0xa0>)
 8002ba8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002baa:	3301      	adds	r3, #1
 8002bac:	4a07      	ldr	r2, [pc, #28]	; (8002bcc <HAL_TIM_IC_CaptureCallback+0xa0>)
 8002bae:	6413      	str	r3, [r2, #64]	; 0x40
}
 8002bb0:	bf00      	nop
 8002bb2:	370c      	adds	r7, #12
 8002bb4:	46bd      	mov	sp, r7
 8002bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bba:	4770      	bx	lr
 8002bbc:	24000378 	.word	0x24000378
 8002bc0:	40000400 	.word	0x40000400
 8002bc4:	240003c0 	.word	0x240003c0
 8002bc8:	40000800 	.word	0x40000800
 8002bcc:	24000408 	.word	0x24000408

08002bd0 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8002bd0:	b480      	push	{r7}
 8002bd2:	b083      	sub	sp, #12
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	6078      	str	r0, [r7, #4]

	if (htim == &htim15) {  //Timer that update velocity'curve. It interrups every 10 ms
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	4a17      	ldr	r2, [pc, #92]	; (8002c38 <HAL_TIM_PeriodElapsedCallback+0x68>)
 8002bdc:	4293      	cmp	r3, r2
 8002bde:	d11f      	bne.n	8002c20 <HAL_TIM_PeriodElapsedCallback+0x50>

		if (!timeFlag) {
 8002be0:	4b16      	ldr	r3, [pc, #88]	; (8002c3c <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8002be2:	781b      	ldrb	r3, [r3, #0]
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d105      	bne.n	8002bf4 <HAL_TIM_PeriodElapsedCallback+0x24>
			timeFlag = true;
 8002be8:	4b14      	ldr	r3, [pc, #80]	; (8002c3c <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8002bea:	2201      	movs	r2, #1
 8002bec:	701a      	strb	r2, [r3, #0]
			TIM5->CNT = 0;	//We start counting from here
 8002bee:	4b14      	ldr	r3, [pc, #80]	; (8002c40 <HAL_TIM_PeriodElapsedCallback+0x70>)
 8002bf0:	2200      	movs	r2, #0
 8002bf2:	625a      	str	r2, [r3, #36]	; 0x24
		}

		time = (((double) (TIM5->CNT)) * ((double)(TIM5->PSC + 1) / FCL));
 8002bf4:	4b12      	ldr	r3, [pc, #72]	; (8002c40 <HAL_TIM_PeriodElapsedCallback+0x70>)
 8002bf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bf8:	ee07 3a90 	vmov	s15, r3
 8002bfc:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 8002c00:	4b0f      	ldr	r3, [pc, #60]	; (8002c40 <HAL_TIM_PeriodElapsedCallback+0x70>)
 8002c02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c04:	3301      	adds	r3, #1
 8002c06:	ee07 3a90 	vmov	s15, r3
 8002c0a:	eeb8 5b67 	vcvt.f64.u32	d5, s15
 8002c0e:	ed9f 4b08 	vldr	d4, [pc, #32]	; 8002c30 <HAL_TIM_PeriodElapsedCallback+0x60>
 8002c12:	ee85 7b04 	vdiv.f64	d7, d5, d4
 8002c16:	ee26 7b07 	vmul.f64	d7, d6, d7
 8002c1a:	4b0a      	ldr	r3, [pc, #40]	; (8002c44 <HAL_TIM_PeriodElapsedCallback+0x74>)
 8002c1c:	ed83 7b00 	vstr	d7, [r3]
	}
}
 8002c20:	bf00      	nop
 8002c22:	370c      	adds	r7, #12
 8002c24:	46bd      	mov	sp, r7
 8002c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c2a:	4770      	bx	lr
 8002c2c:	f3af 8000 	nop.w
 8002c30:	00000000 	.word	0x00000000
 8002c34:	418e8480 	.word	0x418e8480
 8002c38:	240007e4 	.word	0x240007e4
 8002c3c:	24000580 	.word	0x24000580
 8002c40:	40000c00 	.word	0x40000c00
 8002c44:	24000450 	.word	0x24000450

08002c48 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002c48:	b480      	push	{r7}
 8002c4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8002c4c:	bf00      	nop
 8002c4e:	46bd      	mov	sp, r7
 8002c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c54:	4770      	bx	lr
	...

08002c58 <configMotor>:
 *      Author: Santiago River
 *      Updated by: Elias Correa y Eliseo Elorga
 */
#include "motor.h"

void configMotor (Motor *motor, int i){
 8002c58:	b580      	push	{r7, lr}
 8002c5a:	b084      	sub	sp, #16
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	6078      	str	r0, [r7, #4]
 8002c60:	6039      	str	r1, [r7, #0]

    i = i-1; // Esto es ya que el usario ingresara 1,2 o 3
 8002c62:	683b      	ldr	r3, [r7, #0]
 8002c64:	3b01      	subs	r3, #1
 8002c66:	603b      	str	r3, [r7, #0]

	volatile double diffAngles;

	if (motor->theta >= motor->currentAngle) {
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	ed93 6b00 	vldr	d6, [r3]
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	ed93 7b08 	vldr	d7, [r3, #32]
 8002c74:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8002c78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c7c:	db2b      	blt.n	8002cd6 <configMotor+0x7e>

		diffAngles = motor->theta - motor->currentAngle;	//Calculo cuantos grados se tiene que mover.
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	ed93 6b00 	vldr	d6, [r3]
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	ed93 7b08 	vldr	d7, [r3, #32]
 8002c8a:	ee36 7b47 	vsub.f64	d7, d6, d7
 8002c8e:	ed87 7b02 	vstr	d7, [r7, #8]
		motor->currentAngle = motor->theta;
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c98:	6879      	ldr	r1, [r7, #4]
 8002c9a:	e9c1 2308 	strd	r2, r3, [r1, #32]
		if (i==0) negative_Dir_MOTOR_1; //Antihorario visto de frente
 8002c9e:	683b      	ldr	r3, [r7, #0]
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d105      	bne.n	8002cb0 <configMotor+0x58>
 8002ca4:	2201      	movs	r2, #1
 8002ca6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002caa:	4849      	ldr	r0, [pc, #292]	; (8002dd0 <configMotor+0x178>)
 8002cac:	f004 fdee 	bl	800788c <HAL_GPIO_WritePin>
		if (i==1) negative_Dir_MOTOR_2;
 8002cb0:	683b      	ldr	r3, [r7, #0]
 8002cb2:	2b01      	cmp	r3, #1
 8002cb4:	d105      	bne.n	8002cc2 <configMotor+0x6a>
 8002cb6:	2201      	movs	r2, #1
 8002cb8:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002cbc:	4844      	ldr	r0, [pc, #272]	; (8002dd0 <configMotor+0x178>)
 8002cbe:	f004 fde5 	bl	800788c <HAL_GPIO_WritePin>
		if (i==2) negative_Dir_MOTOR_3;
 8002cc2:	683b      	ldr	r3, [r7, #0]
 8002cc4:	2b02      	cmp	r3, #2
 8002cc6:	d131      	bne.n	8002d2c <configMotor+0xd4>
 8002cc8:	2201      	movs	r2, #1
 8002cca:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002cce:	4840      	ldr	r0, [pc, #256]	; (8002dd0 <configMotor+0x178>)
 8002cd0:	f004 fddc 	bl	800788c <HAL_GPIO_WritePin>
 8002cd4:	e02a      	b.n	8002d2c <configMotor+0xd4>

	} else {

		diffAngles = motor->currentAngle - motor->theta;	//Calculo cuantos grados se tiene que mover.
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	ed93 6b08 	vldr	d6, [r3, #32]
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	ed93 7b00 	vldr	d7, [r3]
 8002ce2:	ee36 7b47 	vsub.f64	d7, d6, d7
 8002ce6:	ed87 7b02 	vstr	d7, [r7, #8]
		motor->currentAngle = motor->theta;
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cf0:	6879      	ldr	r1, [r7, #4]
 8002cf2:	e9c1 2308 	strd	r2, r3, [r1, #32]

		if (i==0) positive_Dir_MOTOR_1; // Horario visto de frente
 8002cf6:	683b      	ldr	r3, [r7, #0]
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d105      	bne.n	8002d08 <configMotor+0xb0>
 8002cfc:	2200      	movs	r2, #0
 8002cfe:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002d02:	4833      	ldr	r0, [pc, #204]	; (8002dd0 <configMotor+0x178>)
 8002d04:	f004 fdc2 	bl	800788c <HAL_GPIO_WritePin>
		if (i==1) positive_Dir_MOTOR_2;
 8002d08:	683b      	ldr	r3, [r7, #0]
 8002d0a:	2b01      	cmp	r3, #1
 8002d0c:	d105      	bne.n	8002d1a <configMotor+0xc2>
 8002d0e:	2200      	movs	r2, #0
 8002d10:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002d14:	482e      	ldr	r0, [pc, #184]	; (8002dd0 <configMotor+0x178>)
 8002d16:	f004 fdb9 	bl	800788c <HAL_GPIO_WritePin>
		if (i==2) positive_Dir_MOTOR_3;
 8002d1a:	683b      	ldr	r3, [r7, #0]
 8002d1c:	2b02      	cmp	r3, #2
 8002d1e:	d105      	bne.n	8002d2c <configMotor+0xd4>
 8002d20:	2200      	movs	r2, #0
 8002d22:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002d26:	482a      	ldr	r0, [pc, #168]	; (8002dd0 <configMotor+0x178>)
 8002d28:	f004 fdb0 	bl	800788c <HAL_GPIO_WritePin>

	/*Calculamos el error de posicion por caseteo a "int" y cuando supera la unidad la compenzamos, para ello
	 * almacenamos el remanente de cada operacion. Cuando este remanente supera la unidad, le sumamos 1 a el numero
	 * de pasos que debe efectuar el motor */

	motor->calcStep = (diffAngles * STEPREV) / 360;
 8002d2c:	ed97 7b02 	vldr	d7, [r7, #8]
 8002d30:	ed9f 6b23 	vldr	d6, [pc, #140]	; 8002dc0 <configMotor+0x168>
 8002d34:	ee27 6b06 	vmul.f64	d6, d7, d6
 8002d38:	ed9f 5b23 	vldr	d5, [pc, #140]	; 8002dc8 <configMotor+0x170>
 8002d3c:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	ed83 7b0a 	vstr	d7, [r3, #40]	; 0x28
	motor->numStep = (uint32_t) motor->calcStep;
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	ed93 7b0a 	vldr	d7, [r3, #40]	; 0x28
 8002d4c:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8002d50:	ee17 2a90 	vmov	r2, s15
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	631a      	str	r2, [r3, #48]	; 0x30
	motor->remainder += (motor->calcStep - motor->numStep);
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	ed93 6b0e 	vldr	d6, [r3, #56]	; 0x38
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	ed93 5b0a 	vldr	d5, [r3, #40]	; 0x28
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d68:	ee07 3a90 	vmov	s15, r3
 8002d6c:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8002d70:	ee35 7b47 	vsub.f64	d7, d5, d7
 8002d74:	ee36 7b07 	vadd.f64	d7, d6, d7
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	ed83 7b0e 	vstr	d7, [r3, #56]	; 0x38
	if (motor->remainder >= 1) {
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	ed93 7b0e 	vldr	d7, [r3, #56]	; 0x38
 8002d84:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8002d88:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8002d8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d90:	da00      	bge.n	8002d94 <configMotor+0x13c>
		motor->remainder -= 1;
		motor->numStep += 1;
	}

}
 8002d92:	e00e      	b.n	8002db2 <configMotor+0x15a>
		motor->remainder -= 1;
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	ed93 7b0e 	vldr	d7, [r3, #56]	; 0x38
 8002d9a:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8002d9e:	ee37 7b46 	vsub.f64	d7, d7, d6
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	ed83 7b0e 	vstr	d7, [r3, #56]	; 0x38
		motor->numStep += 1;
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dac:	1c5a      	adds	r2, r3, #1
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	631a      	str	r2, [r3, #48]	; 0x30
}
 8002db2:	bf00      	nop
 8002db4:	3710      	adds	r7, #16
 8002db6:	46bd      	mov	sp, r7
 8002db8:	bd80      	pop	{r7, pc}
 8002dba:	bf00      	nop
 8002dbc:	f3af 8000 	nop.w
 8002dc0:	00000000 	.word	0x00000000
 8002dc4:	40bf4000 	.word	0x40bf4000
 8002dc8:	00000000 	.word	0x00000000
 8002dcc:	40768000 	.word	0x40768000
 8002dd0:	58020800 	.word	0x58020800

08002dd4 <robotInitialization>:
FILE *file;
char *filename = "archivo.txt";
char buffer[BUFFER_SIZE];
//--------------------------------------------

void robotInitialization(void){
 8002dd4:	b580      	push	{r7, lr}
 8002dd6:	af00      	add	r7, sp, #0
	* habilatamos los drivers al momento de lanzar el programa para que los motores se bloqueen. Se procedera
	* a darles una consigna pequeña de posicion en direccion horario para que los eslabones no entren en la
	* singularidad de los 90º */

	//TIMERS 12, 13 y 14 --> PWM step motors
	HAL_TIM_Base_Start(&htim12);
 8002dd8:	481b      	ldr	r0, [pc, #108]	; (8002e48 <robotInitialization+0x74>)
 8002dda:	f007 f93f 	bl	800a05c <HAL_TIM_Base_Start>
	HAL_TIM_Base_Start(&htim13);
 8002dde:	481b      	ldr	r0, [pc, #108]	; (8002e4c <robotInitialization+0x78>)
 8002de0:	f007 f93c 	bl	800a05c <HAL_TIM_Base_Start>
	HAL_TIM_Base_Start(&htim14);
 8002de4:	481a      	ldr	r0, [pc, #104]	; (8002e50 <robotInitialization+0x7c>)
 8002de6:	f007 f939 	bl	800a05c <HAL_TIM_Base_Start>

	//Enable drivers motores (0 es habilitado)
	HAL_GPIO_WritePin(S_Enable_1_GPIO_Port, S_Enable_1_Pin, GPIO_PIN_RESET);
 8002dea:	2200      	movs	r2, #0
 8002dec:	2110      	movs	r1, #16
 8002dee:	4819      	ldr	r0, [pc, #100]	; (8002e54 <robotInitialization+0x80>)
 8002df0:	f004 fd4c 	bl	800788c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S_Enable_2_GPIO_Port, S_Enable_2_Pin, GPIO_PIN_RESET);
 8002df4:	2200      	movs	r2, #0
 8002df6:	2120      	movs	r1, #32
 8002df8:	4816      	ldr	r0, [pc, #88]	; (8002e54 <robotInitialization+0x80>)
 8002dfa:	f004 fd47 	bl	800788c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S_Enable_3_GPIO_Port, S_Enable_3_Pin, GPIO_PIN_RESET);
 8002dfe:	2200      	movs	r2, #0
 8002e00:	2140      	movs	r1, #64	; 0x40
 8002e02:	4814      	ldr	r0, [pc, #80]	; (8002e54 <robotInitialization+0x80>)
 8002e04:	f004 fd42 	bl	800788c <HAL_GPIO_WritePin>

	HAL_Delay(50); //50 ms es el tiempo que la señal ENABLE en cambiar de estado
 8002e08:	2032      	movs	r0, #50	; 0x32
 8002e0a:	f003 fca1 	bl	8006750 <HAL_Delay>

	// Se estable la direccion horario por defecto
	positive_Dir_MOTOR_1;
 8002e0e:	2200      	movs	r2, #0
 8002e10:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002e14:	4810      	ldr	r0, [pc, #64]	; (8002e58 <robotInitialization+0x84>)
 8002e16:	f004 fd39 	bl	800788c <HAL_GPIO_WritePin>
	positive_Dir_MOTOR_2;
 8002e1a:	2200      	movs	r2, #0
 8002e1c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002e20:	480d      	ldr	r0, [pc, #52]	; (8002e58 <robotInitialization+0x84>)
 8002e22:	f004 fd33 	bl	800788c <HAL_GPIO_WritePin>
	positive_Dir_MOTOR_3;
 8002e26:	2200      	movs	r2, #0
 8002e28:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002e2c:	480a      	ldr	r0, [pc, #40]	; (8002e58 <robotInitialization+0x84>)
 8002e2e:	f004 fd2d 	bl	800788c <HAL_GPIO_WritePin>

	//flag paso alcanzado en falso
	motor1.stepReached = false;
 8002e32:	4b0a      	ldr	r3, [pc, #40]	; (8002e5c <robotInitialization+0x88>)
 8002e34:	2200      	movs	r2, #0
 8002e36:	765a      	strb	r2, [r3, #25]
	motor2.stepReached = false;
 8002e38:	4b09      	ldr	r3, [pc, #36]	; (8002e60 <robotInitialization+0x8c>)
 8002e3a:	2200      	movs	r2, #0
 8002e3c:	765a      	strb	r2, [r3, #25]
	motor3.stepReached = false;
 8002e3e:	4b09      	ldr	r3, [pc, #36]	; (8002e64 <robotInitialization+0x90>)
 8002e40:	2200      	movs	r2, #0
 8002e42:	765a      	strb	r2, [r3, #25]


}
 8002e44:	bf00      	nop
 8002e46:	bd80      	pop	{r7, pc}
 8002e48:	24000700 	.word	0x24000700
 8002e4c:	2400074c 	.word	0x2400074c
 8002e50:	24000798 	.word	0x24000798
 8002e54:	58020c00 	.word	0x58020c00
 8002e58:	58020800 	.word	0x58020800
 8002e5c:	24000378 	.word	0x24000378
 8002e60:	240003c0 	.word	0x240003c0
 8002e64:	24000408 	.word	0x24000408

08002e68 <statesMachineLoop>:


void statesMachineLoop(void){
 8002e68:	b580      	push	{r7, lr}
 8002e6a:	af00      	add	r7, sp, #0



	switch (state){
 8002e6c:	4b9e      	ldr	r3, [pc, #632]	; (80030e8 <statesMachineLoop+0x280>)
 8002e6e:	781b      	ldrb	r3, [r3, #0]
 8002e70:	2b05      	cmp	r3, #5
 8002e72:	f200 859c 	bhi.w	80039ae <statesMachineLoop+0xb46>
 8002e76:	a201      	add	r2, pc, #4	; (adr r2, 8002e7c <statesMachineLoop+0x14>)
 8002e78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e7c:	08002e95 	.word	0x08002e95
 8002e80:	080031f9 	.word	0x080031f9
 8002e84:	08002fa7 	.word	0x08002fa7
 8002e88:	08002ec5 	.word	0x08002ec5
 8002e8c:	08003925 	.word	0x08003925
 8002e90:	080033ad 	.word	0x080033ad

	case INIT:

		  HAL_UART_Transmit(&huart3, message, sizeof(message), 100); //Mensaje de inicializacion en curso.
 8002e94:	2364      	movs	r3, #100	; 0x64
 8002e96:	221c      	movs	r2, #28
 8002e98:	4994      	ldr	r1, [pc, #592]	; (80030ec <statesMachineLoop+0x284>)
 8002e9a:	4895      	ldr	r0, [pc, #596]	; (80030f0 <statesMachineLoop+0x288>)
 8002e9c:	f009 f884 	bl	800bfa8 <HAL_UART_Transmit>
		  HAL_UART_Receive_IT(&huart3, &rx_data, 1);
 8002ea0:	2201      	movs	r2, #1
 8002ea2:	4994      	ldr	r1, [pc, #592]	; (80030f4 <statesMachineLoop+0x28c>)
 8002ea4:	4892      	ldr	r0, [pc, #584]	; (80030f0 <statesMachineLoop+0x288>)
 8002ea6:	f009 f915 	bl	800c0d4 <HAL_UART_Receive_IT>
		  robotInitialization();
 8002eaa:	f7ff ff93 	bl	8002dd4 <robotInitialization>
		  HAL_UART_Transmit(&huart3, message1, sizeof(message1), 100); //Mensaje inidicando que el Robot esta listo para su uso
 8002eae:	2364      	movs	r3, #100	; 0x64
 8002eb0:	2227      	movs	r2, #39	; 0x27
 8002eb2:	4991      	ldr	r1, [pc, #580]	; (80030f8 <statesMachineLoop+0x290>)
 8002eb4:	488e      	ldr	r0, [pc, #568]	; (80030f0 <statesMachineLoop+0x288>)
 8002eb6:	f009 f877 	bl	800bfa8 <HAL_UART_Transmit>

		  state = READY;
 8002eba:	4b8b      	ldr	r3, [pc, #556]	; (80030e8 <statesMachineLoop+0x280>)
 8002ebc:	2201      	movs	r2, #1
 8002ebe:	701a      	strb	r2, [r3, #0]

		break;
 8002ec0:	f000 bd7c 	b.w	80039bc <statesMachineLoop+0xb54>

	case HOME:

		receptionFlag = false; //Solo para asegurarse de no saltar al estado ready con esta bandera en true
 8002ec4:	4b8d      	ldr	r3, [pc, #564]	; (80030fc <statesMachineLoop+0x294>)
 8002ec6:	2200      	movs	r2, #0
 8002ec8:	701a      	strb	r2, [r3, #0]

		homing();
 8002eca:	f7fd ff29 	bl	8000d20 <homing>

        if(homFin){
 8002ece:	4b8c      	ldr	r3, [pc, #560]	; (8003100 <statesMachineLoop+0x298>)
 8002ed0:	781b      	ldrb	r3, [r3, #0]
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	f000 856d 	beq.w	80039b2 <statesMachineLoop+0xb4a>

        	homFin = false;
 8002ed8:	4b89      	ldr	r3, [pc, #548]	; (8003100 <statesMachineLoop+0x298>)
 8002eda:	2200      	movs	r2, #0
 8002edc:	701a      	strb	r2, [r3, #0]
        	HAL_Delay(1);
 8002ede:	2001      	movs	r0, #1
 8002ee0:	f003 fc36 	bl	8006750 <HAL_Delay>

        	//Se habilitan interrupciones
        	HAL_NVIC_EnableIRQ(EXTI0_IRQn);		//Enciendo interrupcion EndStop 1 Superior
 8002ee4:	2006      	movs	r0, #6
 8002ee6:	f003 fd7c 	bl	80069e2 <HAL_NVIC_EnableIRQ>
        	HAL_NVIC_EnableIRQ(EXTI1_IRQn);		//Enciendo interrupcion EndStop 1 Inferior
 8002eea:	2007      	movs	r0, #7
 8002eec:	f003 fd79 	bl	80069e2 <HAL_NVIC_EnableIRQ>
        	HAL_NVIC_EnableIRQ(EXTI2_IRQn);		//Enciendo interrupcion EndStop 2 Superior
 8002ef0:	2008      	movs	r0, #8
 8002ef2:	f003 fd76 	bl	80069e2 <HAL_NVIC_EnableIRQ>
        	HAL_NVIC_EnableIRQ(EXTI3_IRQn);		//Enciendo interrupcion EndStop 2 Inferior
 8002ef6:	2009      	movs	r0, #9
 8002ef8:	f003 fd73 	bl	80069e2 <HAL_NVIC_EnableIRQ>
        	HAL_NVIC_EnableIRQ(EXTI4_IRQn);		//Enciendo interrupcion EndStop 3 Superior
 8002efc:	200a      	movs	r0, #10
 8002efe:	f003 fd70 	bl	80069e2 <HAL_NVIC_EnableIRQ>
        	HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);	//Enciendo interrupcion EndStop 3 Inferior
 8002f02:	2017      	movs	r0, #23
 8002f04:	f003 fd6d 	bl	80069e2 <HAL_NVIC_EnableIRQ>
        	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn); //Enciendo interrupcion faultDriver
 8002f08:	2028      	movs	r0, #40	; 0x28
 8002f0a:	f003 fd6a 	bl	80069e2 <HAL_NVIC_EnableIRQ>


        	HAL_Delay(10);
 8002f0e:	200a      	movs	r0, #10
 8002f10:	f003 fc1e 	bl	8006750 <HAL_Delay>

        	//inicializa posición
			Pini.x=0;
 8002f14:	497b      	ldr	r1, [pc, #492]	; (8003104 <statesMachineLoop+0x29c>)
 8002f16:	f04f 0200 	mov.w	r2, #0
 8002f1a:	f04f 0300 	mov.w	r3, #0
 8002f1e:	e9c1 2300 	strd	r2, r3, [r1]
			Pini.y=0;
 8002f22:	4978      	ldr	r1, [pc, #480]	; (8003104 <statesMachineLoop+0x29c>)
 8002f24:	f04f 0200 	mov.w	r2, #0
 8002f28:	f04f 0300 	mov.w	r3, #0
 8002f2c:	e9c1 2302 	strd	r2, r3, [r1, #8]
			Pini.z =-0.5208; //antes era -0.33
 8002f30:	4974      	ldr	r1, [pc, #464]	; (8003104 <statesMachineLoop+0x29c>)
 8002f32:	a36b      	add	r3, pc, #428	; (adr r3, 80030e0 <statesMachineLoop+0x278>)
 8002f34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f38:	e9c1 2304 	strd	r2, r3, [r1, #16]

			motor1.theta = 0.0;
 8002f3c:	4972      	ldr	r1, [pc, #456]	; (8003108 <statesMachineLoop+0x2a0>)
 8002f3e:	f04f 0200 	mov.w	r2, #0
 8002f42:	f04f 0300 	mov.w	r3, #0
 8002f46:	e9c1 2300 	strd	r2, r3, [r1]
			motor2.theta = 0.0;
 8002f4a:	4970      	ldr	r1, [pc, #448]	; (800310c <statesMachineLoop+0x2a4>)
 8002f4c:	f04f 0200 	mov.w	r2, #0
 8002f50:	f04f 0300 	mov.w	r3, #0
 8002f54:	e9c1 2300 	strd	r2, r3, [r1]
			motor3.theta = 0.0;
 8002f58:	496d      	ldr	r1, [pc, #436]	; (8003110 <statesMachineLoop+0x2a8>)
 8002f5a:	f04f 0200 	mov.w	r2, #0
 8002f5e:	f04f 0300 	mov.w	r3, #0
 8002f62:	e9c1 2300 	strd	r2, r3, [r1]

			motor1.currentAngle = 0.0;
 8002f66:	4968      	ldr	r1, [pc, #416]	; (8003108 <statesMachineLoop+0x2a0>)
 8002f68:	f04f 0200 	mov.w	r2, #0
 8002f6c:	f04f 0300 	mov.w	r3, #0
 8002f70:	e9c1 2308 	strd	r2, r3, [r1, #32]
			motor2.currentAngle = 0.0;
 8002f74:	4965      	ldr	r1, [pc, #404]	; (800310c <statesMachineLoop+0x2a4>)
 8002f76:	f04f 0200 	mov.w	r2, #0
 8002f7a:	f04f 0300 	mov.w	r3, #0
 8002f7e:	e9c1 2308 	strd	r2, r3, [r1, #32]
			motor3.currentAngle = 0.0;
 8002f82:	4963      	ldr	r1, [pc, #396]	; (8003110 <statesMachineLoop+0x2a8>)
 8002f84:	f04f 0200 	mov.w	r2, #0
 8002f88:	f04f 0300 	mov.w	r3, #0
 8002f8c:	e9c1 2308 	strd	r2, r3, [r1, #32]

			endStopAlarmSup=false;
 8002f90:	4b60      	ldr	r3, [pc, #384]	; (8003114 <statesMachineLoop+0x2ac>)
 8002f92:	2200      	movs	r2, #0
 8002f94:	701a      	strb	r2, [r3, #0]
			endStopAlarmInf=false;
 8002f96:	4b60      	ldr	r3, [pc, #384]	; (8003118 <statesMachineLoop+0x2b0>)
 8002f98:	2200      	movs	r2, #0
 8002f9a:	701a      	strb	r2, [r3, #0]

			state = READY;
 8002f9c:	4b52      	ldr	r3, [pc, #328]	; (80030e8 <statesMachineLoop+0x280>)
 8002f9e:	2201      	movs	r2, #1
 8002fa0:	701a      	strb	r2, [r3, #0]

        }


		break;
 8002fa2:	f000 bd06 	b.w	80039b2 <statesMachineLoop+0xb4a>

	case WORKING:

		receptionFlag = false;
 8002fa6:	4b55      	ldr	r3, [pc, #340]	; (80030fc <statesMachineLoop+0x294>)
 8002fa8:	2200      	movs	r2, #0
 8002faa:	701a      	strb	r2, [r3, #0]

		while (!(motor1.stepReached && motor2.stepReached  && motor3.stepReached)){
 8002fac:	e087      	b.n	80030be <statesMachineLoop+0x256>

			if (state==FAULT)break;
 8002fae:	4b4e      	ldr	r3, [pc, #312]	; (80030e8 <statesMachineLoop+0x280>)
 8002fb0:	781b      	ldrb	r3, [r3, #0]
 8002fb2:	2b05      	cmp	r3, #5
 8002fb4:	f000 80ca 	beq.w	800314c <statesMachineLoop+0x2e4>
			//TODO revisar
			if (motor1.stepReached) {
 8002fb8:	4b53      	ldr	r3, [pc, #332]	; (8003108 <statesMachineLoop+0x2a0>)
 8002fba:	7e5b      	ldrb	r3, [r3, #25]
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d008      	beq.n	8002fd2 <statesMachineLoop+0x16a>
				Stop_PWM_MOTOR_1;
 8002fc0:	2100      	movs	r1, #0
 8002fc2:	4856      	ldr	r0, [pc, #344]	; (800311c <statesMachineLoop+0x2b4>)
 8002fc4:	f007 faf8 	bl	800a5b8 <HAL_TIM_PWM_Stop>
				HAL_TIM_IC_Stop(&htim2, TIM_CHANNEL_1);
 8002fc8:	2100      	movs	r1, #0
 8002fca:	4855      	ldr	r0, [pc, #340]	; (8003120 <statesMachineLoop+0x2b8>)
 8002fcc:	f007 fbeb 	bl	800a7a6 <HAL_TIM_IC_Stop>
 8002fd0:	e018      	b.n	8003004 <statesMachineLoop+0x19c>
			}else if (motor2.stepReached) {
 8002fd2:	4b4e      	ldr	r3, [pc, #312]	; (800310c <statesMachineLoop+0x2a4>)
 8002fd4:	7e5b      	ldrb	r3, [r3, #25]
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d008      	beq.n	8002fec <statesMachineLoop+0x184>
				Stop_PWM_MOTOR_2;
 8002fda:	2100      	movs	r1, #0
 8002fdc:	4851      	ldr	r0, [pc, #324]	; (8003124 <statesMachineLoop+0x2bc>)
 8002fde:	f007 faeb 	bl	800a5b8 <HAL_TIM_PWM_Stop>
				HAL_TIM_IC_Stop(&htim3, TIM_CHANNEL_1);
 8002fe2:	2100      	movs	r1, #0
 8002fe4:	4850      	ldr	r0, [pc, #320]	; (8003128 <statesMachineLoop+0x2c0>)
 8002fe6:	f007 fbde 	bl	800a7a6 <HAL_TIM_IC_Stop>
 8002fea:	e00b      	b.n	8003004 <statesMachineLoop+0x19c>
			}else if (motor3.stepReached){
 8002fec:	4b48      	ldr	r3, [pc, #288]	; (8003110 <statesMachineLoop+0x2a8>)
 8002fee:	7e5b      	ldrb	r3, [r3, #25]
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d007      	beq.n	8003004 <statesMachineLoop+0x19c>
				Stop_PWM_MOTOR_3;
 8002ff4:	2100      	movs	r1, #0
 8002ff6:	484d      	ldr	r0, [pc, #308]	; (800312c <statesMachineLoop+0x2c4>)
 8002ff8:	f007 fade 	bl	800a5b8 <HAL_TIM_PWM_Stop>
				HAL_TIM_IC_Stop(&htim4, TIM_CHANNEL_1);
 8002ffc:	2100      	movs	r1, #0
 8002ffe:	484c      	ldr	r0, [pc, #304]	; (8003130 <statesMachineLoop+0x2c8>)
 8003000:	f007 fbd1 	bl	800a7a6 <HAL_TIM_IC_Stop>
			}

			motor1.omega = get_Straj(time,motor1.currentAngle,motor1.theta,arrayParams1);
 8003004:	4b4b      	ldr	r3, [pc, #300]	; (8003134 <statesMachineLoop+0x2cc>)
 8003006:	ed93 7b00 	vldr	d7, [r3]
 800300a:	4b3f      	ldr	r3, [pc, #252]	; (8003108 <statesMachineLoop+0x2a0>)
 800300c:	ed93 6b08 	vldr	d6, [r3, #32]
 8003010:	4b3d      	ldr	r3, [pc, #244]	; (8003108 <statesMachineLoop+0x2a0>)
 8003012:	ed93 5b00 	vldr	d5, [r3]
 8003016:	4848      	ldr	r0, [pc, #288]	; (8003138 <statesMachineLoop+0x2d0>)
 8003018:	eeb0 2b45 	vmov.f64	d2, d5
 800301c:	eeb0 1b46 	vmov.f64	d1, d6
 8003020:	eeb0 0b47 	vmov.f64	d0, d7
 8003024:	f001 fb9a 	bl	800475c <get_Straj>
 8003028:	eeb0 7b40 	vmov.f64	d7, d0
 800302c:	4b36      	ldr	r3, [pc, #216]	; (8003108 <statesMachineLoop+0x2a0>)
 800302e:	ed83 7b02 	vstr	d7, [r3, #8]
			motor2.omega = get_Straj(time,motor2.currentAngle,motor2.theta,arrayParams2);
 8003032:	4b40      	ldr	r3, [pc, #256]	; (8003134 <statesMachineLoop+0x2cc>)
 8003034:	ed93 7b00 	vldr	d7, [r3]
 8003038:	4b34      	ldr	r3, [pc, #208]	; (800310c <statesMachineLoop+0x2a4>)
 800303a:	ed93 6b08 	vldr	d6, [r3, #32]
 800303e:	4b33      	ldr	r3, [pc, #204]	; (800310c <statesMachineLoop+0x2a4>)
 8003040:	ed93 5b00 	vldr	d5, [r3]
 8003044:	483d      	ldr	r0, [pc, #244]	; (800313c <statesMachineLoop+0x2d4>)
 8003046:	eeb0 2b45 	vmov.f64	d2, d5
 800304a:	eeb0 1b46 	vmov.f64	d1, d6
 800304e:	eeb0 0b47 	vmov.f64	d0, d7
 8003052:	f001 fb83 	bl	800475c <get_Straj>
 8003056:	eeb0 7b40 	vmov.f64	d7, d0
 800305a:	4b2c      	ldr	r3, [pc, #176]	; (800310c <statesMachineLoop+0x2a4>)
 800305c:	ed83 7b02 	vstr	d7, [r3, #8]
			motor3.omega = get_Straj(time,motor3.currentAngle,motor3.theta,arrayParams3);
 8003060:	4b34      	ldr	r3, [pc, #208]	; (8003134 <statesMachineLoop+0x2cc>)
 8003062:	ed93 7b00 	vldr	d7, [r3]
 8003066:	4b2a      	ldr	r3, [pc, #168]	; (8003110 <statesMachineLoop+0x2a8>)
 8003068:	ed93 6b08 	vldr	d6, [r3, #32]
 800306c:	4b28      	ldr	r3, [pc, #160]	; (8003110 <statesMachineLoop+0x2a8>)
 800306e:	ed93 5b00 	vldr	d5, [r3]
 8003072:	4833      	ldr	r0, [pc, #204]	; (8003140 <statesMachineLoop+0x2d8>)
 8003074:	eeb0 2b45 	vmov.f64	d2, d5
 8003078:	eeb0 1b46 	vmov.f64	d1, d6
 800307c:	eeb0 0b47 	vmov.f64	d0, d7
 8003080:	f001 fb6c 	bl	800475c <get_Straj>
 8003084:	eeb0 7b40 	vmov.f64	d7, d0
 8003088:	4b21      	ldr	r3, [pc, #132]	; (8003110 <statesMachineLoop+0x2a8>)
 800308a:	ed83 7b02 	vstr	d7, [r3, #8]

			setProfilTimer();
 800308e:	f002 ff07 	bl	8005ea0 <setProfilTimer>


			if(startMotors){
 8003092:	4b2c      	ldr	r3, [pc, #176]	; (8003144 <statesMachineLoop+0x2dc>)
 8003094:	781b      	ldrb	r3, [r3, #0]
 8003096:	2b00      	cmp	r3, #0
 8003098:	d00e      	beq.n	80030b8 <statesMachineLoop+0x250>
				startMotors = false;
 800309a:	4b2a      	ldr	r3, [pc, #168]	; (8003144 <statesMachineLoop+0x2dc>)
 800309c:	2200      	movs	r2, #0
 800309e:	701a      	strb	r2, [r3, #0]
				// Activar TIMERs generacion de pwm
				Start_PWM_MOTOR_1;
 80030a0:	2100      	movs	r1, #0
 80030a2:	481e      	ldr	r0, [pc, #120]	; (800311c <statesMachineLoop+0x2b4>)
 80030a4:	f007 f97a 	bl	800a39c <HAL_TIM_PWM_Start>
				Start_PWM_MOTOR_2;
 80030a8:	2100      	movs	r1, #0
 80030aa:	481e      	ldr	r0, [pc, #120]	; (8003124 <statesMachineLoop+0x2bc>)
 80030ac:	f007 f976 	bl	800a39c <HAL_TIM_PWM_Start>
				Start_PWM_MOTOR_3;
 80030b0:	2100      	movs	r1, #0
 80030b2:	481e      	ldr	r0, [pc, #120]	; (800312c <statesMachineLoop+0x2c4>)
 80030b4:	f007 f972 	bl	800a39c <HAL_TIM_PWM_Start>
			}

			stopMotors = true;
 80030b8:	4b23      	ldr	r3, [pc, #140]	; (8003148 <statesMachineLoop+0x2e0>)
 80030ba:	2201      	movs	r2, #1
 80030bc:	701a      	strb	r2, [r3, #0]
		while (!(motor1.stepReached && motor2.stepReached  && motor3.stepReached)){
 80030be:	4b12      	ldr	r3, [pc, #72]	; (8003108 <statesMachineLoop+0x2a0>)
 80030c0:	7e5b      	ldrb	r3, [r3, #25]
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	f43f af73 	beq.w	8002fae <statesMachineLoop+0x146>
 80030c8:	4b10      	ldr	r3, [pc, #64]	; (800310c <statesMachineLoop+0x2a4>)
 80030ca:	7e5b      	ldrb	r3, [r3, #25]
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	f43f af6e 	beq.w	8002fae <statesMachineLoop+0x146>
 80030d2:	4b0f      	ldr	r3, [pc, #60]	; (8003110 <statesMachineLoop+0x2a8>)
 80030d4:	7e5b      	ldrb	r3, [r3, #25]
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	f43f af69 	beq.w	8002fae <statesMachineLoop+0x146>
 80030dc:	e037      	b.n	800314e <statesMachineLoop+0x2e6>
 80030de:	bf00      	nop
 80030e0:	c2f837b5 	.word	0xc2f837b5
 80030e4:	bfe0aa64 	.word	0xbfe0aa64
 80030e8:	24000460 	.word	0x24000460
 80030ec:	24000030 	.word	0x24000030
 80030f0:	24000a08 	.word	0x24000a08
 80030f4:	240005a2 	.word	0x240005a2
 80030f8:	2400004c 	.word	0x2400004c
 80030fc:	240005a3 	.word	0x240005a3
 8003100:	24000461 	.word	0x24000461
 8003104:	240004a8 	.word	0x240004a8
 8003108:	24000378 	.word	0x24000378
 800310c:	240003c0 	.word	0x240003c0
 8003110:	24000408 	.word	0x24000408
 8003114:	24000464 	.word	0x24000464
 8003118:	24000465 	.word	0x24000465
 800311c:	24000700 	.word	0x24000700
 8003120:	240005d0 	.word	0x240005d0
 8003124:	2400074c 	.word	0x2400074c
 8003128:	2400061c 	.word	0x2400061c
 800312c:	24000798 	.word	0x24000798
 8003130:	24000668 	.word	0x24000668
 8003134:	24000450 	.word	0x24000450
 8003138:	240004d8 	.word	0x240004d8
 800313c:	24000510 	.word	0x24000510
 8003140:	24000548 	.word	0x24000548
 8003144:	24000462 	.word	0x24000462
 8003148:	24000463 	.word	0x24000463
			if (state==FAULT)break;
 800314c:	bf00      	nop
		}// End while




		if (stopMotors){   //If steps goals for each motor were reached, we stop motors
 800314e:	4b7a      	ldr	r3, [pc, #488]	; (8003338 <statesMachineLoop+0x4d0>)
 8003150:	781b      	ldrb	r3, [r3, #0]
 8003152:	2b00      	cmp	r3, #0
 8003154:	d026      	beq.n	80031a4 <statesMachineLoop+0x33c>

			startMotors = false;
 8003156:	4b79      	ldr	r3, [pc, #484]	; (800333c <statesMachineLoop+0x4d4>)
 8003158:	2200      	movs	r2, #0
 800315a:	701a      	strb	r2, [r3, #0]

			HAL_TIM_IC_Stop(&htim2, TIM_CHANNEL_1);
 800315c:	2100      	movs	r1, #0
 800315e:	4878      	ldr	r0, [pc, #480]	; (8003340 <statesMachineLoop+0x4d8>)
 8003160:	f007 fb21 	bl	800a7a6 <HAL_TIM_IC_Stop>
			HAL_TIM_IC_Stop(&htim3, TIM_CHANNEL_1);
 8003164:	2100      	movs	r1, #0
 8003166:	4877      	ldr	r0, [pc, #476]	; (8003344 <statesMachineLoop+0x4dc>)
 8003168:	f007 fb1d 	bl	800a7a6 <HAL_TIM_IC_Stop>
			HAL_TIM_IC_Stop(&htim4, TIM_CHANNEL_1);
 800316c:	2100      	movs	r1, #0
 800316e:	4876      	ldr	r0, [pc, #472]	; (8003348 <statesMachineLoop+0x4e0>)
 8003170:	f007 fb19 	bl	800a7a6 <HAL_TIM_IC_Stop>

			if (motor1.stepReached) Stop_PWM_MOTOR_1;
 8003174:	4b75      	ldr	r3, [pc, #468]	; (800334c <statesMachineLoop+0x4e4>)
 8003176:	7e5b      	ldrb	r3, [r3, #25]
 8003178:	2b00      	cmp	r3, #0
 800317a:	d003      	beq.n	8003184 <statesMachineLoop+0x31c>
 800317c:	2100      	movs	r1, #0
 800317e:	4874      	ldr	r0, [pc, #464]	; (8003350 <statesMachineLoop+0x4e8>)
 8003180:	f007 fa1a 	bl	800a5b8 <HAL_TIM_PWM_Stop>
			if (motor2.stepReached) Stop_PWM_MOTOR_2;
 8003184:	4b73      	ldr	r3, [pc, #460]	; (8003354 <statesMachineLoop+0x4ec>)
 8003186:	7e5b      	ldrb	r3, [r3, #25]
 8003188:	2b00      	cmp	r3, #0
 800318a:	d003      	beq.n	8003194 <statesMachineLoop+0x32c>
 800318c:	2100      	movs	r1, #0
 800318e:	4872      	ldr	r0, [pc, #456]	; (8003358 <statesMachineLoop+0x4f0>)
 8003190:	f007 fa12 	bl	800a5b8 <HAL_TIM_PWM_Stop>
			if (motor3.stepReached)	Stop_PWM_MOTOR_3;
 8003194:	4b71      	ldr	r3, [pc, #452]	; (800335c <statesMachineLoop+0x4f4>)
 8003196:	7e5b      	ldrb	r3, [r3, #25]
 8003198:	2b00      	cmp	r3, #0
 800319a:	d003      	beq.n	80031a4 <statesMachineLoop+0x33c>
 800319c:	2100      	movs	r1, #0
 800319e:	4870      	ldr	r0, [pc, #448]	; (8003360 <statesMachineLoop+0x4f8>)
 80031a0:	f007 fa0a 	bl	800a5b8 <HAL_TIM_PWM_Stop>
		}

		//Update coordinantes
		Pini.x = Pfin.x;
 80031a4:	4b6f      	ldr	r3, [pc, #444]	; (8003364 <statesMachineLoop+0x4fc>)
 80031a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031aa:	496f      	ldr	r1, [pc, #444]	; (8003368 <statesMachineLoop+0x500>)
 80031ac:	e9c1 2300 	strd	r2, r3, [r1]
		Pini.y = Pfin.y;
 80031b0:	4b6c      	ldr	r3, [pc, #432]	; (8003364 <statesMachineLoop+0x4fc>)
 80031b2:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80031b6:	496c      	ldr	r1, [pc, #432]	; (8003368 <statesMachineLoop+0x500>)
 80031b8:	e9c1 2302 	strd	r2, r3, [r1, #8]
		Pini.z = Pfin.z;
 80031bc:	4b69      	ldr	r3, [pc, #420]	; (8003364 <statesMachineLoop+0x4fc>)
 80031be:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80031c2:	4969      	ldr	r1, [pc, #420]	; (8003368 <statesMachineLoop+0x500>)
 80031c4:	e9c1 2304 	strd	r2, r3, [r1, #16]

		HAL_UART_Transmit(&huart3, message2, sizeof(message2), 100);
 80031c8:	2364      	movs	r3, #100	; 0x64
 80031ca:	2206      	movs	r2, #6
 80031cc:	4967      	ldr	r1, [pc, #412]	; (800336c <statesMachineLoop+0x504>)
 80031ce:	4868      	ldr	r0, [pc, #416]	; (8003370 <statesMachineLoop+0x508>)
 80031d0:	f008 feea 	bl	800bfa8 <HAL_UART_Transmit>

		//Stop Timers tiempo
		HAL_TIM_Base_Stop_IT(&htim15);
 80031d4:	4867      	ldr	r0, [pc, #412]	; (8003374 <statesMachineLoop+0x50c>)
 80031d6:	f007 f851 	bl	800a27c <HAL_TIM_Base_Stop_IT>
		HAL_TIM_Base_Stop(&htim5);
 80031da:	4867      	ldr	r0, [pc, #412]	; (8003378 <statesMachineLoop+0x510>)
 80031dc:	f006 ffae 	bl	800a13c <HAL_TIM_Base_Stop>

		if (startDemo){state=DEMO;}
 80031e0:	4b66      	ldr	r3, [pc, #408]	; (800337c <statesMachineLoop+0x514>)
 80031e2:	781b      	ldrb	r3, [r3, #0]
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d003      	beq.n	80031f0 <statesMachineLoop+0x388>
 80031e8:	4b65      	ldr	r3, [pc, #404]	; (8003380 <statesMachineLoop+0x518>)
 80031ea:	2204      	movs	r2, #4
 80031ec:	701a      	strb	r2, [r3, #0]
		else{state = READY;}


		break;
 80031ee:	e3e5      	b.n	80039bc <statesMachineLoop+0xb54>
		else{state = READY;}
 80031f0:	4b63      	ldr	r3, [pc, #396]	; (8003380 <statesMachineLoop+0x518>)
 80031f2:	2201      	movs	r2, #1
 80031f4:	701a      	strb	r2, [r3, #0]
		break;
 80031f6:	e3e1      	b.n	80039bc <statesMachineLoop+0xb54>

	case READY:

		if (receptionFlag){
 80031f8:	4b62      	ldr	r3, [pc, #392]	; (8003384 <statesMachineLoop+0x51c>)
 80031fa:	781b      	ldrb	r3, [r3, #0]
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	f000 83da 	beq.w	80039b6 <statesMachineLoop+0xb4e>

			receptionFlag = false;
 8003202:	4b60      	ldr	r3, [pc, #384]	; (8003384 <statesMachineLoop+0x51c>)
 8003204:	2200      	movs	r2, #0
 8003206:	701a      	strb	r2, [r3, #0]

			startMotors = true;
 8003208:	4b4c      	ldr	r3, [pc, #304]	; (800333c <statesMachineLoop+0x4d4>)
 800320a:	2201      	movs	r2, #1
 800320c:	701a      	strb	r2, [r3, #0]

			//Start InputCapture
			HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1);
 800320e:	2100      	movs	r1, #0
 8003210:	484b      	ldr	r0, [pc, #300]	; (8003340 <statesMachineLoop+0x4d8>)
 8003212:	f007 fb39 	bl	800a888 <HAL_TIM_IC_Start_IT>
			HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_1);
 8003216:	2100      	movs	r1, #0
 8003218:	484a      	ldr	r0, [pc, #296]	; (8003344 <statesMachineLoop+0x4dc>)
 800321a:	f007 fb35 	bl	800a888 <HAL_TIM_IC_Start_IT>
			HAL_TIM_IC_Start_IT(&htim4, TIM_CHANNEL_1);
 800321e:	2100      	movs	r1, #0
 8003220:	4849      	ldr	r0, [pc, #292]	; (8003348 <statesMachineLoop+0x4e0>)
 8003222:	f007 fb31 	bl	800a888 <HAL_TIM_IC_Start_IT>

			inverseKinematic(Pfin);
 8003226:	4b4f      	ldr	r3, [pc, #316]	; (8003364 <statesMachineLoop+0x4fc>)
 8003228:	ed93 5b00 	vldr	d5, [r3]
 800322c:	ed93 6b02 	vldr	d6, [r3, #8]
 8003230:	ed93 7b04 	vldr	d7, [r3, #16]
 8003234:	eeb0 0b45 	vmov.f64	d0, d5
 8003238:	eeb0 1b46 	vmov.f64	d1, d6
 800323c:	eeb0 2b47 	vmov.f64	d2, d7
 8003240:	f7fe fa52 	bl	80016e8 <inverseKinematic>

			update_ScurveTraj(motor1.currentAngle, motor1.theta, vi, vf, vmax, amax, jmax, arrayParams1);
 8003244:	4b41      	ldr	r3, [pc, #260]	; (800334c <statesMachineLoop+0x4e4>)
 8003246:	ed93 7b08 	vldr	d7, [r3, #32]
 800324a:	4b40      	ldr	r3, [pc, #256]	; (800334c <statesMachineLoop+0x4e4>)
 800324c:	ed93 1b00 	vldr	d1, [r3]
 8003250:	4b4d      	ldr	r3, [pc, #308]	; (8003388 <statesMachineLoop+0x520>)
 8003252:	ed93 2b00 	vldr	d2, [r3]
 8003256:	4b4d      	ldr	r3, [pc, #308]	; (800338c <statesMachineLoop+0x524>)
 8003258:	ed93 3b00 	vldr	d3, [r3]
 800325c:	4b4c      	ldr	r3, [pc, #304]	; (8003390 <statesMachineLoop+0x528>)
 800325e:	ed93 4b00 	vldr	d4, [r3]
 8003262:	4b4c      	ldr	r3, [pc, #304]	; (8003394 <statesMachineLoop+0x52c>)
 8003264:	ed93 5b00 	vldr	d5, [r3]
 8003268:	4b4b      	ldr	r3, [pc, #300]	; (8003398 <statesMachineLoop+0x530>)
 800326a:	ed93 6b00 	vldr	d6, [r3]
 800326e:	484b      	ldr	r0, [pc, #300]	; (800339c <statesMachineLoop+0x534>)
 8003270:	eeb0 0b47 	vmov.f64	d0, d7
 8003274:	f002 f92c 	bl	80054d0 <update_ScurveTraj>
			update_ScurveTraj(motor2.currentAngle, motor2.theta, vi, vf, vmax, amax, jmax, arrayParams2);
 8003278:	4b36      	ldr	r3, [pc, #216]	; (8003354 <statesMachineLoop+0x4ec>)
 800327a:	ed93 7b08 	vldr	d7, [r3, #32]
 800327e:	4b35      	ldr	r3, [pc, #212]	; (8003354 <statesMachineLoop+0x4ec>)
 8003280:	ed93 1b00 	vldr	d1, [r3]
 8003284:	4b40      	ldr	r3, [pc, #256]	; (8003388 <statesMachineLoop+0x520>)
 8003286:	ed93 2b00 	vldr	d2, [r3]
 800328a:	4b40      	ldr	r3, [pc, #256]	; (800338c <statesMachineLoop+0x524>)
 800328c:	ed93 3b00 	vldr	d3, [r3]
 8003290:	4b3f      	ldr	r3, [pc, #252]	; (8003390 <statesMachineLoop+0x528>)
 8003292:	ed93 4b00 	vldr	d4, [r3]
 8003296:	4b3f      	ldr	r3, [pc, #252]	; (8003394 <statesMachineLoop+0x52c>)
 8003298:	ed93 5b00 	vldr	d5, [r3]
 800329c:	4b3e      	ldr	r3, [pc, #248]	; (8003398 <statesMachineLoop+0x530>)
 800329e:	ed93 6b00 	vldr	d6, [r3]
 80032a2:	483f      	ldr	r0, [pc, #252]	; (80033a0 <statesMachineLoop+0x538>)
 80032a4:	eeb0 0b47 	vmov.f64	d0, d7
 80032a8:	f002 f912 	bl	80054d0 <update_ScurveTraj>
			update_ScurveTraj(motor3.currentAngle, motor3.theta, vi, vf, vmax, amax, jmax, arrayParams3);
 80032ac:	4b2b      	ldr	r3, [pc, #172]	; (800335c <statesMachineLoop+0x4f4>)
 80032ae:	ed93 7b08 	vldr	d7, [r3, #32]
 80032b2:	4b2a      	ldr	r3, [pc, #168]	; (800335c <statesMachineLoop+0x4f4>)
 80032b4:	ed93 1b00 	vldr	d1, [r3]
 80032b8:	4b33      	ldr	r3, [pc, #204]	; (8003388 <statesMachineLoop+0x520>)
 80032ba:	ed93 2b00 	vldr	d2, [r3]
 80032be:	4b33      	ldr	r3, [pc, #204]	; (800338c <statesMachineLoop+0x524>)
 80032c0:	ed93 3b00 	vldr	d3, [r3]
 80032c4:	4b32      	ldr	r3, [pc, #200]	; (8003390 <statesMachineLoop+0x528>)
 80032c6:	ed93 4b00 	vldr	d4, [r3]
 80032ca:	4b32      	ldr	r3, [pc, #200]	; (8003394 <statesMachineLoop+0x52c>)
 80032cc:	ed93 5b00 	vldr	d5, [r3]
 80032d0:	4b31      	ldr	r3, [pc, #196]	; (8003398 <statesMachineLoop+0x530>)
 80032d2:	ed93 6b00 	vldr	d6, [r3]
 80032d6:	4833      	ldr	r0, [pc, #204]	; (80033a4 <statesMachineLoop+0x53c>)
 80032d8:	eeb0 0b47 	vmov.f64	d0, d7
 80032dc:	f002 f8f8 	bl	80054d0 <update_ScurveTraj>

			configMotor(&motor1,1);
 80032e0:	2101      	movs	r1, #1
 80032e2:	481a      	ldr	r0, [pc, #104]	; (800334c <statesMachineLoop+0x4e4>)
 80032e4:	f7ff fcb8 	bl	8002c58 <configMotor>
			configMotor(&motor2,2);
 80032e8:	2102      	movs	r1, #2
 80032ea:	481a      	ldr	r0, [pc, #104]	; (8003354 <statesMachineLoop+0x4ec>)
 80032ec:	f7ff fcb4 	bl	8002c58 <configMotor>
			configMotor(&motor3,3);
 80032f0:	2103      	movs	r1, #3
 80032f2:	481a      	ldr	r0, [pc, #104]	; (800335c <statesMachineLoop+0x4f4>)
 80032f4:	f7ff fcb0 	bl	8002c58 <configMotor>

			timeFlag = false;
 80032f8:	4b2b      	ldr	r3, [pc, #172]	; (80033a8 <statesMachineLoop+0x540>)
 80032fa:	2200      	movs	r2, #0
 80032fc:	701a      	strb	r2, [r3, #0]

			motor1.pMotor = 0;
 80032fe:	4b13      	ldr	r3, [pc, #76]	; (800334c <statesMachineLoop+0x4e4>)
 8003300:	2200      	movs	r2, #0
 8003302:	641a      	str	r2, [r3, #64]	; 0x40
			motor2.pMotor = 0;
 8003304:	4b13      	ldr	r3, [pc, #76]	; (8003354 <statesMachineLoop+0x4ec>)
 8003306:	2200      	movs	r2, #0
 8003308:	641a      	str	r2, [r3, #64]	; 0x40
			motor3.pMotor = 0;
 800330a:	4b14      	ldr	r3, [pc, #80]	; (800335c <statesMachineLoop+0x4f4>)
 800330c:	2200      	movs	r2, #0
 800330e:	641a      	str	r2, [r3, #64]	; 0x40

			motor1.stepReached = false;
 8003310:	4b0e      	ldr	r3, [pc, #56]	; (800334c <statesMachineLoop+0x4e4>)
 8003312:	2200      	movs	r2, #0
 8003314:	765a      	strb	r2, [r3, #25]
			motor2.stepReached = false;
 8003316:	4b0f      	ldr	r3, [pc, #60]	; (8003354 <statesMachineLoop+0x4ec>)
 8003318:	2200      	movs	r2, #0
 800331a:	765a      	strb	r2, [r3, #25]
			motor3.stepReached = false;
 800331c:	4b0f      	ldr	r3, [pc, #60]	; (800335c <statesMachineLoop+0x4f4>)
 800331e:	2200      	movs	r2, #0
 8003320:	765a      	strb	r2, [r3, #25]

			//Start counting time
			HAL_TIM_Base_Start(&htim5);
 8003322:	4815      	ldr	r0, [pc, #84]	; (8003378 <statesMachineLoop+0x510>)
 8003324:	f006 fe9a 	bl	800a05c <HAL_TIM_Base_Start>
			HAL_TIM_Base_Start_IT(&htim15);
 8003328:	4812      	ldr	r0, [pc, #72]	; (8003374 <statesMachineLoop+0x50c>)
 800332a:	f006 ff2f 	bl	800a18c <HAL_TIM_Base_Start_IT>

			state = WORKING;
 800332e:	4b14      	ldr	r3, [pc, #80]	; (8003380 <statesMachineLoop+0x518>)
 8003330:	2202      	movs	r2, #2
 8003332:	701a      	strb	r2, [r3, #0]
		}
		break;
 8003334:	e33f      	b.n	80039b6 <statesMachineLoop+0xb4e>
 8003336:	bf00      	nop
 8003338:	24000463 	.word	0x24000463
 800333c:	24000462 	.word	0x24000462
 8003340:	240005d0 	.word	0x240005d0
 8003344:	2400061c 	.word	0x2400061c
 8003348:	24000668 	.word	0x24000668
 800334c:	24000378 	.word	0x24000378
 8003350:	24000700 	.word	0x24000700
 8003354:	240003c0 	.word	0x240003c0
 8003358:	2400074c 	.word	0x2400074c
 800335c:	24000408 	.word	0x24000408
 8003360:	24000798 	.word	0x24000798
 8003364:	240004c0 	.word	0x240004c0
 8003368:	240004a8 	.word	0x240004a8
 800336c:	24000074 	.word	0x24000074
 8003370:	24000a08 	.word	0x24000a08
 8003374:	240007e4 	.word	0x240007e4
 8003378:	240006b4 	.word	0x240006b4
 800337c:	240005a5 	.word	0x240005a5
 8003380:	24000460 	.word	0x24000460
 8003384:	240005a3 	.word	0x240005a3
 8003388:	24000018 	.word	0x24000018
 800338c:	24000498 	.word	0x24000498
 8003390:	24000010 	.word	0x24000010
 8003394:	24000020 	.word	0x24000020
 8003398:	24000008 	.word	0x24000008
 800339c:	240004d8 	.word	0x240004d8
 80033a0:	24000510 	.word	0x24000510
 80033a4:	24000548 	.word	0x24000548
 80033a8:	24000580 	.word	0x24000580

	case FAULT:

		//Establece velocidad baja (1rpm), movimiento en fault
		__HAL_TIM_SET_AUTORELOAD(&htim12,COUNTERPERIOD(rpm_fault));
 80033ac:	4b8e      	ldr	r3, [pc, #568]	; (80035e8 <statesMachineLoop+0x780>)
 80033ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033b0:	ee07 3a90 	vmov	s15, r3
 80033b4:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80033b8:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 80033bc:	ee37 7b06 	vadd.f64	d7, d7, d6
 80033c0:	ed9f 5b83 	vldr	d5, [pc, #524]	; 80035d0 <statesMachineLoop+0x768>
 80033c4:	ee85 6b07 	vdiv.f64	d6, d5, d7
 80033c8:	4b88      	ldr	r3, [pc, #544]	; (80035ec <statesMachineLoop+0x784>)
 80033ca:	ed93 7b00 	vldr	d7, [r3]
 80033ce:	ed9f 5b82 	vldr	d5, [pc, #520]	; 80035d8 <statesMachineLoop+0x770>
 80033d2:	ee27 5b05 	vmul.f64	d5, d7, d5
 80033d6:	ed9f 4b82 	vldr	d4, [pc, #520]	; 80035e0 <statesMachineLoop+0x778>
 80033da:	ee84 7b05 	vdiv.f64	d7, d4, d5
 80033de:	ee26 7b07 	vmul.f64	d7, d6, d7
 80033e2:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 80033e6:	ee37 7b46 	vsub.f64	d7, d7, d6
 80033ea:	4b81      	ldr	r3, [pc, #516]	; (80035f0 <statesMachineLoop+0x788>)
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80033f2:	ee17 2a90 	vmov	r2, s15
 80033f6:	62da      	str	r2, [r3, #44]	; 0x2c
 80033f8:	4b7b      	ldr	r3, [pc, #492]	; (80035e8 <statesMachineLoop+0x780>)
 80033fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033fc:	ee07 3a90 	vmov	s15, r3
 8003400:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8003404:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8003408:	ee37 7b06 	vadd.f64	d7, d7, d6
 800340c:	ed9f 5b70 	vldr	d5, [pc, #448]	; 80035d0 <statesMachineLoop+0x768>
 8003410:	ee85 6b07 	vdiv.f64	d6, d5, d7
 8003414:	4b75      	ldr	r3, [pc, #468]	; (80035ec <statesMachineLoop+0x784>)
 8003416:	ed93 7b00 	vldr	d7, [r3]
 800341a:	ed9f 5b6f 	vldr	d5, [pc, #444]	; 80035d8 <statesMachineLoop+0x770>
 800341e:	ee27 5b05 	vmul.f64	d5, d7, d5
 8003422:	ed9f 4b6f 	vldr	d4, [pc, #444]	; 80035e0 <statesMachineLoop+0x778>
 8003426:	ee84 7b05 	vdiv.f64	d7, d4, d5
 800342a:	ee26 7b07 	vmul.f64	d7, d6, d7
 800342e:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8003432:	ee37 7b46 	vsub.f64	d7, d7, d6
 8003436:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800343a:	ee17 2a90 	vmov	r2, s15
 800343e:	4b6c      	ldr	r3, [pc, #432]	; (80035f0 <statesMachineLoop+0x788>)
 8003440:	60da      	str	r2, [r3, #12]
		__HAL_TIM_SET_AUTORELOAD(&htim13,COUNTERPERIOD(rpm_fault));
 8003442:	4b69      	ldr	r3, [pc, #420]	; (80035e8 <statesMachineLoop+0x780>)
 8003444:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003446:	ee07 3a90 	vmov	s15, r3
 800344a:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800344e:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8003452:	ee37 7b06 	vadd.f64	d7, d7, d6
 8003456:	ed9f 5b5e 	vldr	d5, [pc, #376]	; 80035d0 <statesMachineLoop+0x768>
 800345a:	ee85 6b07 	vdiv.f64	d6, d5, d7
 800345e:	4b63      	ldr	r3, [pc, #396]	; (80035ec <statesMachineLoop+0x784>)
 8003460:	ed93 7b00 	vldr	d7, [r3]
 8003464:	ed9f 5b5c 	vldr	d5, [pc, #368]	; 80035d8 <statesMachineLoop+0x770>
 8003468:	ee27 5b05 	vmul.f64	d5, d7, d5
 800346c:	ed9f 4b5c 	vldr	d4, [pc, #368]	; 80035e0 <statesMachineLoop+0x778>
 8003470:	ee84 7b05 	vdiv.f64	d7, d4, d5
 8003474:	ee26 7b07 	vmul.f64	d7, d6, d7
 8003478:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800347c:	ee37 7b46 	vsub.f64	d7, d7, d6
 8003480:	4b5c      	ldr	r3, [pc, #368]	; (80035f4 <statesMachineLoop+0x78c>)
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8003488:	ee17 2a90 	vmov	r2, s15
 800348c:	62da      	str	r2, [r3, #44]	; 0x2c
 800348e:	4b56      	ldr	r3, [pc, #344]	; (80035e8 <statesMachineLoop+0x780>)
 8003490:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003492:	ee07 3a90 	vmov	s15, r3
 8003496:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800349a:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800349e:	ee37 7b06 	vadd.f64	d7, d7, d6
 80034a2:	ed9f 5b4b 	vldr	d5, [pc, #300]	; 80035d0 <statesMachineLoop+0x768>
 80034a6:	ee85 6b07 	vdiv.f64	d6, d5, d7
 80034aa:	4b50      	ldr	r3, [pc, #320]	; (80035ec <statesMachineLoop+0x784>)
 80034ac:	ed93 7b00 	vldr	d7, [r3]
 80034b0:	ed9f 5b49 	vldr	d5, [pc, #292]	; 80035d8 <statesMachineLoop+0x770>
 80034b4:	ee27 5b05 	vmul.f64	d5, d7, d5
 80034b8:	ed9f 4b49 	vldr	d4, [pc, #292]	; 80035e0 <statesMachineLoop+0x778>
 80034bc:	ee84 7b05 	vdiv.f64	d7, d4, d5
 80034c0:	ee26 7b07 	vmul.f64	d7, d6, d7
 80034c4:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 80034c8:	ee37 7b46 	vsub.f64	d7, d7, d6
 80034cc:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80034d0:	ee17 2a90 	vmov	r2, s15
 80034d4:	4b47      	ldr	r3, [pc, #284]	; (80035f4 <statesMachineLoop+0x78c>)
 80034d6:	60da      	str	r2, [r3, #12]
		__HAL_TIM_SET_AUTORELOAD(&htim14,COUNTERPERIOD(rpm_fault));
 80034d8:	4b43      	ldr	r3, [pc, #268]	; (80035e8 <statesMachineLoop+0x780>)
 80034da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034dc:	ee07 3a90 	vmov	s15, r3
 80034e0:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80034e4:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 80034e8:	ee37 7b06 	vadd.f64	d7, d7, d6
 80034ec:	ed9f 5b38 	vldr	d5, [pc, #224]	; 80035d0 <statesMachineLoop+0x768>
 80034f0:	ee85 6b07 	vdiv.f64	d6, d5, d7
 80034f4:	4b3d      	ldr	r3, [pc, #244]	; (80035ec <statesMachineLoop+0x784>)
 80034f6:	ed93 7b00 	vldr	d7, [r3]
 80034fa:	ed9f 5b37 	vldr	d5, [pc, #220]	; 80035d8 <statesMachineLoop+0x770>
 80034fe:	ee27 5b05 	vmul.f64	d5, d7, d5
 8003502:	ed9f 4b37 	vldr	d4, [pc, #220]	; 80035e0 <statesMachineLoop+0x778>
 8003506:	ee84 7b05 	vdiv.f64	d7, d4, d5
 800350a:	ee26 7b07 	vmul.f64	d7, d6, d7
 800350e:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8003512:	ee37 7b46 	vsub.f64	d7, d7, d6
 8003516:	4b38      	ldr	r3, [pc, #224]	; (80035f8 <statesMachineLoop+0x790>)
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800351e:	ee17 2a90 	vmov	r2, s15
 8003522:	62da      	str	r2, [r3, #44]	; 0x2c
 8003524:	4b30      	ldr	r3, [pc, #192]	; (80035e8 <statesMachineLoop+0x780>)
 8003526:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003528:	ee07 3a90 	vmov	s15, r3
 800352c:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8003530:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8003534:	ee37 7b06 	vadd.f64	d7, d7, d6
 8003538:	ed9f 5b25 	vldr	d5, [pc, #148]	; 80035d0 <statesMachineLoop+0x768>
 800353c:	ee85 6b07 	vdiv.f64	d6, d5, d7
 8003540:	4b2a      	ldr	r3, [pc, #168]	; (80035ec <statesMachineLoop+0x784>)
 8003542:	ed93 7b00 	vldr	d7, [r3]
 8003546:	ed9f 5b24 	vldr	d5, [pc, #144]	; 80035d8 <statesMachineLoop+0x770>
 800354a:	ee27 5b05 	vmul.f64	d5, d7, d5
 800354e:	ed9f 4b24 	vldr	d4, [pc, #144]	; 80035e0 <statesMachineLoop+0x778>
 8003552:	ee84 7b05 	vdiv.f64	d7, d4, d5
 8003556:	ee26 7b07 	vmul.f64	d7, d6, d7
 800355a:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800355e:	ee37 7b46 	vsub.f64	d7, d7, d6
 8003562:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8003566:	ee17 2a90 	vmov	r2, s15
 800356a:	4b23      	ldr	r3, [pc, #140]	; (80035f8 <statesMachineLoop+0x790>)
 800356c:	60da      	str	r2, [r3, #12]

		TIM12->CCR1 = (uint32_t)((double)(TIM12->ARR) / 2.0);
 800356e:	4b1e      	ldr	r3, [pc, #120]	; (80035e8 <statesMachineLoop+0x780>)
 8003570:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003572:	ee07 3a90 	vmov	s15, r3
 8003576:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 800357a:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800357e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8003582:	4b19      	ldr	r3, [pc, #100]	; (80035e8 <statesMachineLoop+0x780>)
 8003584:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8003588:	ee17 2a90 	vmov	r2, s15
 800358c:	635a      	str	r2, [r3, #52]	; 0x34
		TIM13->CCR1 = (uint32_t)((double)(TIM13->ARR) / 2.0);
 800358e:	4b1b      	ldr	r3, [pc, #108]	; (80035fc <statesMachineLoop+0x794>)
 8003590:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003592:	ee07 3a90 	vmov	s15, r3
 8003596:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 800359a:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800359e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80035a2:	4b16      	ldr	r3, [pc, #88]	; (80035fc <statesMachineLoop+0x794>)
 80035a4:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80035a8:	ee17 2a90 	vmov	r2, s15
 80035ac:	635a      	str	r2, [r3, #52]	; 0x34
		TIM14->CCR1 = (uint32_t)((double)(TIM14->ARR) / 2.0);
 80035ae:	4b14      	ldr	r3, [pc, #80]	; (8003600 <statesMachineLoop+0x798>)
 80035b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035b2:	ee07 3a90 	vmov	s15, r3
 80035b6:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 80035ba:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 80035be:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80035c2:	4b0f      	ldr	r3, [pc, #60]	; (8003600 <statesMachineLoop+0x798>)
 80035c4:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80035c8:	ee17 2a90 	vmov	r2, s15
 80035cc:	635a      	str	r2, [r3, #52]	; 0x34

		while((endStopAlarmSup || endStopAlarmInf) && continuar){
 80035ce:	e164      	b.n	800389a <statesMachineLoop+0xa32>
 80035d0:	00000000 	.word	0x00000000
 80035d4:	418e8480 	.word	0x418e8480
 80035d8:	00000000 	.word	0x00000000
 80035dc:	40bf4000 	.word	0x40bf4000
 80035e0:	00000000 	.word	0x00000000
 80035e4:	404e0000 	.word	0x404e0000
 80035e8:	40001800 	.word	0x40001800
 80035ec:	24000028 	.word	0x24000028
 80035f0:	24000700 	.word	0x24000700
 80035f4:	2400074c 	.word	0x2400074c
 80035f8:	24000798 	.word	0x24000798
 80035fc:	40001c00 	.word	0x40001c00
 8003600:	40002000 	.word	0x40002000

			 //HAL_UART_Transmit(&huart3,(uint8_t*)"EndStopAlarm\r\n", 16, 100);

			 if (ES1i_PRESSED){
 8003604:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003608:	48b7      	ldr	r0, [pc, #732]	; (80038e8 <statesMachineLoop+0xa80>)
 800360a:	f004 f927 	bl	800785c <HAL_GPIO_ReadPin>
 800360e:	4603      	mov	r3, r0
 8003610:	2b00      	cmp	r3, #0
 8003612:	d11e      	bne.n	8003652 <statesMachineLoop+0x7ea>
				 HAL_Delay(10);
 8003614:	200a      	movs	r0, #10
 8003616:	f003 f89b 	bl	8006750 <HAL_Delay>
				 if (ES1i_PRESSED){
 800361a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800361e:	48b2      	ldr	r0, [pc, #712]	; (80038e8 <statesMachineLoop+0xa80>)
 8003620:	f004 f91c 	bl	800785c <HAL_GPIO_ReadPin>
 8003624:	4603      	mov	r3, r0
 8003626:	2b00      	cmp	r3, #0
 8003628:	d113      	bne.n	8003652 <statesMachineLoop+0x7ea>
					 positive_Dir_MOTOR_1;
 800362a:	2200      	movs	r2, #0
 800362c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003630:	48ae      	ldr	r0, [pc, #696]	; (80038ec <statesMachineLoop+0xa84>)
 8003632:	f004 f92b 	bl	800788c <HAL_GPIO_WritePin>
					 HAL_Delay(0.5); 							//delay cambio de dir
 8003636:	2000      	movs	r0, #0
 8003638:	f003 f88a 	bl	8006750 <HAL_Delay>
					 Start_PWM_MOTOR_1;
 800363c:	2100      	movs	r1, #0
 800363e:	48ac      	ldr	r0, [pc, #688]	; (80038f0 <statesMachineLoop+0xa88>)
 8003640:	f006 feac 	bl	800a39c <HAL_TIM_PWM_Start>
					 HAL_Delay(200);
 8003644:	20c8      	movs	r0, #200	; 0xc8
 8003646:	f003 f883 	bl	8006750 <HAL_Delay>
					 Stop_PWM_MOTOR_1;
 800364a:	2100      	movs	r1, #0
 800364c:	48a8      	ldr	r0, [pc, #672]	; (80038f0 <statesMachineLoop+0xa88>)
 800364e:	f006 ffb3 	bl	800a5b8 <HAL_TIM_PWM_Stop>
				 }
			 }
			 if (ES1s_PRESSED){
 8003652:	2101      	movs	r1, #1
 8003654:	48a7      	ldr	r0, [pc, #668]	; (80038f4 <statesMachineLoop+0xa8c>)
 8003656:	f004 f901 	bl	800785c <HAL_GPIO_ReadPin>
 800365a:	4603      	mov	r3, r0
 800365c:	2b00      	cmp	r3, #0
 800365e:	d11d      	bne.n	800369c <statesMachineLoop+0x834>
				 HAL_Delay(10);
 8003660:	200a      	movs	r0, #10
 8003662:	f003 f875 	bl	8006750 <HAL_Delay>
				 if (ES1s_PRESSED){
 8003666:	2101      	movs	r1, #1
 8003668:	48a2      	ldr	r0, [pc, #648]	; (80038f4 <statesMachineLoop+0xa8c>)
 800366a:	f004 f8f7 	bl	800785c <HAL_GPIO_ReadPin>
 800366e:	4603      	mov	r3, r0
 8003670:	2b00      	cmp	r3, #0
 8003672:	d113      	bne.n	800369c <statesMachineLoop+0x834>
					 negative_Dir_MOTOR_1;
 8003674:	2201      	movs	r2, #1
 8003676:	f44f 7180 	mov.w	r1, #256	; 0x100
 800367a:	489c      	ldr	r0, [pc, #624]	; (80038ec <statesMachineLoop+0xa84>)
 800367c:	f004 f906 	bl	800788c <HAL_GPIO_WritePin>
					 HAL_Delay(0.5); 							//delay cambio de dir
 8003680:	2000      	movs	r0, #0
 8003682:	f003 f865 	bl	8006750 <HAL_Delay>
					 Start_PWM_MOTOR_1;
 8003686:	2100      	movs	r1, #0
 8003688:	4899      	ldr	r0, [pc, #612]	; (80038f0 <statesMachineLoop+0xa88>)
 800368a:	f006 fe87 	bl	800a39c <HAL_TIM_PWM_Start>
					 HAL_Delay(200);
 800368e:	20c8      	movs	r0, #200	; 0xc8
 8003690:	f003 f85e 	bl	8006750 <HAL_Delay>
					 Stop_PWM_MOTOR_1;
 8003694:	2100      	movs	r1, #0
 8003696:	4896      	ldr	r0, [pc, #600]	; (80038f0 <statesMachineLoop+0xa88>)
 8003698:	f006 ff8e 	bl	800a5b8 <HAL_TIM_PWM_Stop>
				 }
			 }
			 if (ES2i_PRESSED){
 800369c:	2108      	movs	r1, #8
 800369e:	4895      	ldr	r0, [pc, #596]	; (80038f4 <statesMachineLoop+0xa8c>)
 80036a0:	f004 f8dc 	bl	800785c <HAL_GPIO_ReadPin>
 80036a4:	4603      	mov	r3, r0
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d11d      	bne.n	80036e6 <statesMachineLoop+0x87e>
				 HAL_Delay(30);
 80036aa:	201e      	movs	r0, #30
 80036ac:	f003 f850 	bl	8006750 <HAL_Delay>
				 if (ES2i_PRESSED){
 80036b0:	2108      	movs	r1, #8
 80036b2:	4890      	ldr	r0, [pc, #576]	; (80038f4 <statesMachineLoop+0xa8c>)
 80036b4:	f004 f8d2 	bl	800785c <HAL_GPIO_ReadPin>
 80036b8:	4603      	mov	r3, r0
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d113      	bne.n	80036e6 <statesMachineLoop+0x87e>
					 positive_Dir_MOTOR_2;
 80036be:	2200      	movs	r2, #0
 80036c0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80036c4:	4889      	ldr	r0, [pc, #548]	; (80038ec <statesMachineLoop+0xa84>)
 80036c6:	f004 f8e1 	bl	800788c <HAL_GPIO_WritePin>
					 HAL_Delay(0.5); 							//delay cambio de dir
 80036ca:	2000      	movs	r0, #0
 80036cc:	f003 f840 	bl	8006750 <HAL_Delay>
					 Start_PWM_MOTOR_2;
 80036d0:	2100      	movs	r1, #0
 80036d2:	4889      	ldr	r0, [pc, #548]	; (80038f8 <statesMachineLoop+0xa90>)
 80036d4:	f006 fe62 	bl	800a39c <HAL_TIM_PWM_Start>
					 HAL_Delay(200);
 80036d8:	20c8      	movs	r0, #200	; 0xc8
 80036da:	f003 f839 	bl	8006750 <HAL_Delay>
					 Stop_PWM_MOTOR_2;
 80036de:	2100      	movs	r1, #0
 80036e0:	4885      	ldr	r0, [pc, #532]	; (80038f8 <statesMachineLoop+0xa90>)
 80036e2:	f006 ff69 	bl	800a5b8 <HAL_TIM_PWM_Stop>
				 }
			 }
			 if (ES2s_PRESSED){
 80036e6:	2104      	movs	r1, #4
 80036e8:	4882      	ldr	r0, [pc, #520]	; (80038f4 <statesMachineLoop+0xa8c>)
 80036ea:	f004 f8b7 	bl	800785c <HAL_GPIO_ReadPin>
 80036ee:	4603      	mov	r3, r0
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d11d      	bne.n	8003730 <statesMachineLoop+0x8c8>
				 HAL_Delay(10);
 80036f4:	200a      	movs	r0, #10
 80036f6:	f003 f82b 	bl	8006750 <HAL_Delay>
				 if (ES2s_PRESSED){
 80036fa:	2104      	movs	r1, #4
 80036fc:	487d      	ldr	r0, [pc, #500]	; (80038f4 <statesMachineLoop+0xa8c>)
 80036fe:	f004 f8ad 	bl	800785c <HAL_GPIO_ReadPin>
 8003702:	4603      	mov	r3, r0
 8003704:	2b00      	cmp	r3, #0
 8003706:	d113      	bne.n	8003730 <statesMachineLoop+0x8c8>
					 negative_Dir_MOTOR_2;
 8003708:	2201      	movs	r2, #1
 800370a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800370e:	4877      	ldr	r0, [pc, #476]	; (80038ec <statesMachineLoop+0xa84>)
 8003710:	f004 f8bc 	bl	800788c <HAL_GPIO_WritePin>
					 HAL_Delay(0.5); 							//delay cambio de dir
 8003714:	2000      	movs	r0, #0
 8003716:	f003 f81b 	bl	8006750 <HAL_Delay>
					 Start_PWM_MOTOR_2;
 800371a:	2100      	movs	r1, #0
 800371c:	4876      	ldr	r0, [pc, #472]	; (80038f8 <statesMachineLoop+0xa90>)
 800371e:	f006 fe3d 	bl	800a39c <HAL_TIM_PWM_Start>
					 HAL_Delay(200);
 8003722:	20c8      	movs	r0, #200	; 0xc8
 8003724:	f003 f814 	bl	8006750 <HAL_Delay>
					 Stop_PWM_MOTOR_2;
 8003728:	2100      	movs	r1, #0
 800372a:	4873      	ldr	r0, [pc, #460]	; (80038f8 <statesMachineLoop+0xa90>)
 800372c:	f006 ff44 	bl	800a5b8 <HAL_TIM_PWM_Stop>
				 }
			 }
			 if (ES3i_PRESSED){
 8003730:	2120      	movs	r1, #32
 8003732:	4872      	ldr	r0, [pc, #456]	; (80038fc <statesMachineLoop+0xa94>)
 8003734:	f004 f892 	bl	800785c <HAL_GPIO_ReadPin>
 8003738:	4603      	mov	r3, r0
 800373a:	2b00      	cmp	r3, #0
 800373c:	d11d      	bne.n	800377a <statesMachineLoop+0x912>
				 HAL_Delay(10);
 800373e:	200a      	movs	r0, #10
 8003740:	f003 f806 	bl	8006750 <HAL_Delay>
				 if (ES3i_PRESSED){
 8003744:	2120      	movs	r1, #32
 8003746:	486d      	ldr	r0, [pc, #436]	; (80038fc <statesMachineLoop+0xa94>)
 8003748:	f004 f888 	bl	800785c <HAL_GPIO_ReadPin>
 800374c:	4603      	mov	r3, r0
 800374e:	2b00      	cmp	r3, #0
 8003750:	d113      	bne.n	800377a <statesMachineLoop+0x912>
					 positive_Dir_MOTOR_3;
 8003752:	2200      	movs	r2, #0
 8003754:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003758:	4864      	ldr	r0, [pc, #400]	; (80038ec <statesMachineLoop+0xa84>)
 800375a:	f004 f897 	bl	800788c <HAL_GPIO_WritePin>
					 HAL_Delay(0.5); 							//delay cambio de dir
 800375e:	2000      	movs	r0, #0
 8003760:	f002 fff6 	bl	8006750 <HAL_Delay>
					 Start_PWM_MOTOR_3;
 8003764:	2100      	movs	r1, #0
 8003766:	4866      	ldr	r0, [pc, #408]	; (8003900 <statesMachineLoop+0xa98>)
 8003768:	f006 fe18 	bl	800a39c <HAL_TIM_PWM_Start>
					 HAL_Delay(200);
 800376c:	20c8      	movs	r0, #200	; 0xc8
 800376e:	f002 ffef 	bl	8006750 <HAL_Delay>
					 Stop_PWM_MOTOR_3;
 8003772:	2100      	movs	r1, #0
 8003774:	4862      	ldr	r0, [pc, #392]	; (8003900 <statesMachineLoop+0xa98>)
 8003776:	f006 ff1f 	bl	800a5b8 <HAL_TIM_PWM_Stop>
				 }
			 }
			 if (ES3s_PRESSED){
 800377a:	2110      	movs	r1, #16
 800377c:	485f      	ldr	r0, [pc, #380]	; (80038fc <statesMachineLoop+0xa94>)
 800377e:	f004 f86d 	bl	800785c <HAL_GPIO_ReadPin>
 8003782:	4603      	mov	r3, r0
 8003784:	2b00      	cmp	r3, #0
 8003786:	d11d      	bne.n	80037c4 <statesMachineLoop+0x95c>
				 HAL_Delay(10);
 8003788:	200a      	movs	r0, #10
 800378a:	f002 ffe1 	bl	8006750 <HAL_Delay>
				 if (ES3s_PRESSED){
 800378e:	2110      	movs	r1, #16
 8003790:	485a      	ldr	r0, [pc, #360]	; (80038fc <statesMachineLoop+0xa94>)
 8003792:	f004 f863 	bl	800785c <HAL_GPIO_ReadPin>
 8003796:	4603      	mov	r3, r0
 8003798:	2b00      	cmp	r3, #0
 800379a:	d113      	bne.n	80037c4 <statesMachineLoop+0x95c>
					 negative_Dir_MOTOR_3;
 800379c:	2201      	movs	r2, #1
 800379e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80037a2:	4852      	ldr	r0, [pc, #328]	; (80038ec <statesMachineLoop+0xa84>)
 80037a4:	f004 f872 	bl	800788c <HAL_GPIO_WritePin>
					 HAL_Delay(0.5); 							//delay cambio de dir
 80037a8:	2000      	movs	r0, #0
 80037aa:	f002 ffd1 	bl	8006750 <HAL_Delay>
					 Start_PWM_MOTOR_3;
 80037ae:	2100      	movs	r1, #0
 80037b0:	4853      	ldr	r0, [pc, #332]	; (8003900 <statesMachineLoop+0xa98>)
 80037b2:	f006 fdf3 	bl	800a39c <HAL_TIM_PWM_Start>
					 HAL_Delay(200);
 80037b6:	20c8      	movs	r0, #200	; 0xc8
 80037b8:	f002 ffca 	bl	8006750 <HAL_Delay>
					 Stop_PWM_MOTOR_3;
 80037bc:	2100      	movs	r1, #0
 80037be:	4850      	ldr	r0, [pc, #320]	; (8003900 <statesMachineLoop+0xa98>)
 80037c0:	f006 fefa 	bl	800a5b8 <HAL_TIM_PWM_Stop>
				 }
			 }

			 if(ES1s_UNPRESSED && ES2s_UNPRESSED && ES3s_UNPRESSED && ES1i_UNPRESSED && ES2i_UNPRESSED && ES3i_UNPRESSED){
 80037c4:	2101      	movs	r1, #1
 80037c6:	484b      	ldr	r0, [pc, #300]	; (80038f4 <statesMachineLoop+0xa8c>)
 80037c8:	f004 f848 	bl	800785c <HAL_GPIO_ReadPin>
 80037cc:	4603      	mov	r3, r0
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d063      	beq.n	800389a <statesMachineLoop+0xa32>
 80037d2:	2104      	movs	r1, #4
 80037d4:	4847      	ldr	r0, [pc, #284]	; (80038f4 <statesMachineLoop+0xa8c>)
 80037d6:	f004 f841 	bl	800785c <HAL_GPIO_ReadPin>
 80037da:	4603      	mov	r3, r0
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d05c      	beq.n	800389a <statesMachineLoop+0xa32>
 80037e0:	2110      	movs	r1, #16
 80037e2:	4846      	ldr	r0, [pc, #280]	; (80038fc <statesMachineLoop+0xa94>)
 80037e4:	f004 f83a 	bl	800785c <HAL_GPIO_ReadPin>
 80037e8:	4603      	mov	r3, r0
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d055      	beq.n	800389a <statesMachineLoop+0xa32>
 80037ee:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80037f2:	483d      	ldr	r0, [pc, #244]	; (80038e8 <statesMachineLoop+0xa80>)
 80037f4:	f004 f832 	bl	800785c <HAL_GPIO_ReadPin>
 80037f8:	4603      	mov	r3, r0
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d04d      	beq.n	800389a <statesMachineLoop+0xa32>
 80037fe:	2108      	movs	r1, #8
 8003800:	483c      	ldr	r0, [pc, #240]	; (80038f4 <statesMachineLoop+0xa8c>)
 8003802:	f004 f82b 	bl	800785c <HAL_GPIO_ReadPin>
 8003806:	4603      	mov	r3, r0
 8003808:	2b00      	cmp	r3, #0
 800380a:	d046      	beq.n	800389a <statesMachineLoop+0xa32>
 800380c:	2120      	movs	r1, #32
 800380e:	483b      	ldr	r0, [pc, #236]	; (80038fc <statesMachineLoop+0xa94>)
 8003810:	f004 f824 	bl	800785c <HAL_GPIO_ReadPin>
 8003814:	4603      	mov	r3, r0
 8003816:	2b00      	cmp	r3, #0
 8003818:	d03f      	beq.n	800389a <statesMachineLoop+0xa32>
				 HAL_Delay(10);
 800381a:	200a      	movs	r0, #10
 800381c:	f002 ff98 	bl	8006750 <HAL_Delay>
				 if(ES1s_UNPRESSED && ES2s_UNPRESSED && ES3s_UNPRESSED && ES1i_UNPRESSED && ES2i_UNPRESSED && ES3i_UNPRESSED){
 8003820:	2101      	movs	r1, #1
 8003822:	4834      	ldr	r0, [pc, #208]	; (80038f4 <statesMachineLoop+0xa8c>)
 8003824:	f004 f81a 	bl	800785c <HAL_GPIO_ReadPin>
 8003828:	4603      	mov	r3, r0
 800382a:	2b00      	cmp	r3, #0
 800382c:	d035      	beq.n	800389a <statesMachineLoop+0xa32>
 800382e:	2104      	movs	r1, #4
 8003830:	4830      	ldr	r0, [pc, #192]	; (80038f4 <statesMachineLoop+0xa8c>)
 8003832:	f004 f813 	bl	800785c <HAL_GPIO_ReadPin>
 8003836:	4603      	mov	r3, r0
 8003838:	2b00      	cmp	r3, #0
 800383a:	d02e      	beq.n	800389a <statesMachineLoop+0xa32>
 800383c:	2110      	movs	r1, #16
 800383e:	482f      	ldr	r0, [pc, #188]	; (80038fc <statesMachineLoop+0xa94>)
 8003840:	f004 f80c 	bl	800785c <HAL_GPIO_ReadPin>
 8003844:	4603      	mov	r3, r0
 8003846:	2b00      	cmp	r3, #0
 8003848:	d027      	beq.n	800389a <statesMachineLoop+0xa32>
 800384a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800384e:	4826      	ldr	r0, [pc, #152]	; (80038e8 <statesMachineLoop+0xa80>)
 8003850:	f004 f804 	bl	800785c <HAL_GPIO_ReadPin>
 8003854:	4603      	mov	r3, r0
 8003856:	2b00      	cmp	r3, #0
 8003858:	d01f      	beq.n	800389a <statesMachineLoop+0xa32>
 800385a:	2108      	movs	r1, #8
 800385c:	4825      	ldr	r0, [pc, #148]	; (80038f4 <statesMachineLoop+0xa8c>)
 800385e:	f003 fffd 	bl	800785c <HAL_GPIO_ReadPin>
 8003862:	4603      	mov	r3, r0
 8003864:	2b00      	cmp	r3, #0
 8003866:	d018      	beq.n	800389a <statesMachineLoop+0xa32>
 8003868:	2120      	movs	r1, #32
 800386a:	4824      	ldr	r0, [pc, #144]	; (80038fc <statesMachineLoop+0xa94>)
 800386c:	f003 fff6 	bl	800785c <HAL_GPIO_ReadPin>
 8003870:	4603      	mov	r3, r0
 8003872:	2b00      	cmp	r3, #0
 8003874:	d011      	beq.n	800389a <statesMachineLoop+0xa32>

					 endStopAlarmSup = false;
 8003876:	4b23      	ldr	r3, [pc, #140]	; (8003904 <statesMachineLoop+0xa9c>)
 8003878:	2200      	movs	r2, #0
 800387a:	701a      	strb	r2, [r3, #0]
					 endStopAlarmInf = false;
 800387c:	4b22      	ldr	r3, [pc, #136]	; (8003908 <statesMachineLoop+0xaa0>)
 800387e:	2200      	movs	r2, #0
 8003880:	701a      	strb	r2, [r3, #0]
					 continuar = false;
 8003882:	4b22      	ldr	r3, [pc, #136]	; (800390c <statesMachineLoop+0xaa4>)
 8003884:	2200      	movs	r2, #0
 8003886:	701a      	strb	r2, [r3, #0]
					 HAL_UART_Transmit(&huart3,(uint8_t*)"Fin_FAULT\r\n", 13, 100);
 8003888:	2364      	movs	r3, #100	; 0x64
 800388a:	220d      	movs	r2, #13
 800388c:	4920      	ldr	r1, [pc, #128]	; (8003910 <statesMachineLoop+0xaa8>)
 800388e:	4821      	ldr	r0, [pc, #132]	; (8003914 <statesMachineLoop+0xaac>)
 8003890:	f008 fb8a 	bl	800bfa8 <HAL_UART_Transmit>
					 state = READY;
 8003894:	4b20      	ldr	r3, [pc, #128]	; (8003918 <statesMachineLoop+0xab0>)
 8003896:	2201      	movs	r2, #1
 8003898:	701a      	strb	r2, [r3, #0]
		while((endStopAlarmSup || endStopAlarmInf) && continuar){
 800389a:	4b1a      	ldr	r3, [pc, #104]	; (8003904 <statesMachineLoop+0xa9c>)
 800389c:	781b      	ldrb	r3, [r3, #0]
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d103      	bne.n	80038aa <statesMachineLoop+0xa42>
 80038a2:	4b19      	ldr	r3, [pc, #100]	; (8003908 <statesMachineLoop+0xaa0>)
 80038a4:	781b      	ldrb	r3, [r3, #0]
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d014      	beq.n	80038d4 <statesMachineLoop+0xa6c>
 80038aa:	4b18      	ldr	r3, [pc, #96]	; (800390c <statesMachineLoop+0xaa4>)
 80038ac:	781b      	ldrb	r3, [r3, #0]
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	f47f aea8 	bne.w	8003604 <statesMachineLoop+0x79c>

			 }

		}//End while

		while(faultDrivers && continuar){
 80038b4:	e00e      	b.n	80038d4 <statesMachineLoop+0xa6c>

			//relayAbierto;
			//HAL_Delay(100);
			//relayCerrado;

			faultDrivers = false;
 80038b6:	4b19      	ldr	r3, [pc, #100]	; (800391c <statesMachineLoop+0xab4>)
 80038b8:	2200      	movs	r2, #0
 80038ba:	701a      	strb	r2, [r3, #0]
			continuar = false;
 80038bc:	4b13      	ldr	r3, [pc, #76]	; (800390c <statesMachineLoop+0xaa4>)
 80038be:	2200      	movs	r2, #0
 80038c0:	701a      	strb	r2, [r3, #0]

			HAL_UART_Transmit(&huart3,(uint8_t*)"Fin_FALL\r\n", 13, 100);
 80038c2:	2364      	movs	r3, #100	; 0x64
 80038c4:	220d      	movs	r2, #13
 80038c6:	4916      	ldr	r1, [pc, #88]	; (8003920 <statesMachineLoop+0xab8>)
 80038c8:	4812      	ldr	r0, [pc, #72]	; (8003914 <statesMachineLoop+0xaac>)
 80038ca:	f008 fb6d 	bl	800bfa8 <HAL_UART_Transmit>
			state = READY;
 80038ce:	4b12      	ldr	r3, [pc, #72]	; (8003918 <statesMachineLoop+0xab0>)
 80038d0:	2201      	movs	r2, #1
 80038d2:	701a      	strb	r2, [r3, #0]
		while(faultDrivers && continuar){
 80038d4:	4b11      	ldr	r3, [pc, #68]	; (800391c <statesMachineLoop+0xab4>)
 80038d6:	781b      	ldrb	r3, [r3, #0]
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d06e      	beq.n	80039ba <statesMachineLoop+0xb52>
 80038dc:	4b0b      	ldr	r3, [pc, #44]	; (800390c <statesMachineLoop+0xaa4>)
 80038de:	781b      	ldrb	r3, [r3, #0]
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d1e8      	bne.n	80038b6 <statesMachineLoop+0xa4e>

		}//End while
		break;
 80038e4:	e069      	b.n	80039ba <statesMachineLoop+0xb52>
 80038e6:	bf00      	nop
 80038e8:	58021800 	.word	0x58021800
 80038ec:	58020800 	.word	0x58020800
 80038f0:	24000700 	.word	0x24000700
 80038f4:	58021000 	.word	0x58021000
 80038f8:	2400074c 	.word	0x2400074c
 80038fc:	58020400 	.word	0x58020400
 8003900:	24000798 	.word	0x24000798
 8003904:	24000464 	.word	0x24000464
 8003908:	24000465 	.word	0x24000465
 800390c:	24000466 	.word	0x24000466
 8003910:	08012244 	.word	0x08012244
 8003914:	24000a08 	.word	0x24000a08
 8003918:	24000460 	.word	0x24000460
 800391c:	24000467 	.word	0x24000467
 8003920:	08012250 	.word	0x08012250

	case DEMO:

	    // Abre el archivo para lectura (una sola vez siempre y cuando readFile sea verdadero )
		if (readFile){
 8003924:	4b26      	ldr	r3, [pc, #152]	; (80039c0 <statesMachineLoop+0xb58>)
 8003926:	781b      	ldrb	r3, [r3, #0]
 8003928:	2b00      	cmp	r3, #0
 800392a:	d019      	beq.n	8003960 <statesMachineLoop+0xaf8>
			file = fopen(filename, "r");
 800392c:	4b25      	ldr	r3, [pc, #148]	; (80039c4 <statesMachineLoop+0xb5c>)
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	4925      	ldr	r1, [pc, #148]	; (80039c8 <statesMachineLoop+0xb60>)
 8003932:	4618      	mov	r0, r3
 8003934:	f00b f942 	bl	800ebbc <fopen>
 8003938:	4603      	mov	r3, r0
 800393a:	4a24      	ldr	r2, [pc, #144]	; (80039cc <statesMachineLoop+0xb64>)
 800393c:	6013      	str	r3, [r2, #0]

			// Verifica si el archivo se ha abierto correctamente
			if (file == NULL) {
 800393e:	4b23      	ldr	r3, [pc, #140]	; (80039cc <statesMachineLoop+0xb64>)
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	2b00      	cmp	r3, #0
 8003944:	d106      	bne.n	8003954 <statesMachineLoop+0xaec>
				HAL_UART_Transmit(&huart3,(uint8_t*)"No se pudo abrir el archivo.\n", 30, 100);
 8003946:	2364      	movs	r3, #100	; 0x64
 8003948:	221e      	movs	r2, #30
 800394a:	4921      	ldr	r1, [pc, #132]	; (80039d0 <statesMachineLoop+0xb68>)
 800394c:	4821      	ldr	r0, [pc, #132]	; (80039d4 <statesMachineLoop+0xb6c>)
 800394e:	f008 fb2b 	bl	800bfa8 <HAL_UART_Transmit>
				break;
 8003952:	e033      	b.n	80039bc <statesMachineLoop+0xb54>
			}
			readFile = false;
 8003954:	4b1a      	ldr	r3, [pc, #104]	; (80039c0 <statesMachineLoop+0xb58>)
 8003956:	2200      	movs	r2, #0
 8003958:	701a      	strb	r2, [r3, #0]
			startDemo = true;
 800395a:	4b1f      	ldr	r3, [pc, #124]	; (80039d8 <statesMachineLoop+0xb70>)
 800395c:	2201      	movs	r2, #1
 800395e:	701a      	strb	r2, [r3, #0]
		}

	    // Lee cada línea del archivo y la guarda en el buffer
	    if (fgets(buffer, BUFFER_SIZE, file) != NULL) {
 8003960:	4b1a      	ldr	r3, [pc, #104]	; (80039cc <statesMachineLoop+0xb64>)
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	461a      	mov	r2, r3
 8003966:	211e      	movs	r1, #30
 8003968:	481c      	ldr	r0, [pc, #112]	; (80039dc <statesMachineLoop+0xb74>)
 800396a:	f00a fff3 	bl	800e954 <fgets>
 800396e:	4603      	mov	r3, r0
 8003970:	2b00      	cmp	r3, #0
 8003972:	d00e      	beq.n	8003992 <statesMachineLoop+0xb2a>

	        // Copia la línea al buffer de tipo uint8_t
	        //uint8_t rx_buffer[strlen(buffer)];
	        memcpy(rx_buffer, buffer, strlen(buffer));
 8003974:	4819      	ldr	r0, [pc, #100]	; (80039dc <statesMachineLoop+0xb74>)
 8003976:	f7fc fd03 	bl	8000380 <strlen>
 800397a:	4603      	mov	r3, r0
 800397c:	461a      	mov	r2, r3
 800397e:	4917      	ldr	r1, [pc, #92]	; (80039dc <statesMachineLoop+0xb74>)
 8003980:	4817      	ldr	r0, [pc, #92]	; (80039e0 <statesMachineLoop+0xb78>)
 8003982:	f00b faa3 	bl	800eecc <memcpy>

	        interpretaComando();
 8003986:	f7fd fd11 	bl	80013ac <interpretaComando>

	        state = READY;
 800398a:	4b16      	ldr	r3, [pc, #88]	; (80039e4 <statesMachineLoop+0xb7c>)
 800398c:	2201      	movs	r2, #1
 800398e:	701a      	strb	r2, [r3, #0]
			startDemo = false;
			fclose(file);
			HAL_UART_Transmit(&huart3,(uint8_t*)"Fin demo\n", 10, 100);
	    }

	default:break;
 8003990:	e00d      	b.n	80039ae <statesMachineLoop+0xb46>
			startDemo = false;
 8003992:	4b11      	ldr	r3, [pc, #68]	; (80039d8 <statesMachineLoop+0xb70>)
 8003994:	2200      	movs	r2, #0
 8003996:	701a      	strb	r2, [r3, #0]
			fclose(file);
 8003998:	4b0c      	ldr	r3, [pc, #48]	; (80039cc <statesMachineLoop+0xb64>)
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	4618      	mov	r0, r3
 800399e:	f00a fe83 	bl	800e6a8 <fclose>
			HAL_UART_Transmit(&huart3,(uint8_t*)"Fin demo\n", 10, 100);
 80039a2:	2364      	movs	r3, #100	; 0x64
 80039a4:	220a      	movs	r2, #10
 80039a6:	4910      	ldr	r1, [pc, #64]	; (80039e8 <statesMachineLoop+0xb80>)
 80039a8:	480a      	ldr	r0, [pc, #40]	; (80039d4 <statesMachineLoop+0xb6c>)
 80039aa:	f008 fafd 	bl	800bfa8 <HAL_UART_Transmit>
	default:break;
 80039ae:	bf00      	nop
 80039b0:	e004      	b.n	80039bc <statesMachineLoop+0xb54>
		break;
 80039b2:	bf00      	nop
 80039b4:	e002      	b.n	80039bc <statesMachineLoop+0xb54>
		break;
 80039b6:	bf00      	nop
 80039b8:	e000      	b.n	80039bc <statesMachineLoop+0xb54>
		break;
 80039ba:	bf00      	nop
	}
}
 80039bc:	bf00      	nop
 80039be:	bd80      	pop	{r7, pc}
 80039c0:	240005a4 	.word	0x240005a4
 80039c4:	2400007c 	.word	0x2400007c
 80039c8:	0801225c 	.word	0x0801225c
 80039cc:	240005a8 	.word	0x240005a8
 80039d0:	08012260 	.word	0x08012260
 80039d4:	24000a08 	.word	0x24000a08
 80039d8:	240005a5 	.word	0x240005a5
 80039dc:	240005ac 	.word	0x240005ac
 80039e0:	24000584 	.word	0x24000584
 80039e4:	24000460 	.word	0x24000460
 80039e8:	08012280 	.word	0x08012280

080039ec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80039ec:	b580      	push	{r7, lr}
 80039ee:	b082      	sub	sp, #8
 80039f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80039f2:	4b0f      	ldr	r3, [pc, #60]	; (8003a30 <HAL_MspInit+0x44>)
 80039f4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80039f8:	4a0d      	ldr	r2, [pc, #52]	; (8003a30 <HAL_MspInit+0x44>)
 80039fa:	f043 0302 	orr.w	r3, r3, #2
 80039fe:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8003a02:	4b0b      	ldr	r3, [pc, #44]	; (8003a30 <HAL_MspInit+0x44>)
 8003a04:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003a08:	f003 0302 	and.w	r3, r3, #2
 8003a0c:	607b      	str	r3, [r7, #4]
 8003a0e:	687b      	ldr	r3, [r7, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_2);
 8003a10:	2005      	movs	r0, #5
 8003a12:	f002 ffc1 	bl	8006998 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* FPU_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(FPU_IRQn, 1, 0);
 8003a16:	2200      	movs	r2, #0
 8003a18:	2101      	movs	r1, #1
 8003a1a:	2051      	movs	r0, #81	; 0x51
 8003a1c:	f002 ffc7 	bl	80069ae <HAL_NVIC_SetPriority>
  /* FPU_IRQn interrupt configuration */
  HAL_NVIC_EnableIRQ(FPU_IRQn);
 8003a20:	2051      	movs	r0, #81	; 0x51
 8003a22:	f002 ffde 	bl	80069e2 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003a26:	bf00      	nop
 8003a28:	3708      	adds	r7, #8
 8003a2a:	46bd      	mov	sp, r7
 8003a2c:	bd80      	pop	{r7, pc}
 8003a2e:	bf00      	nop
 8003a30:	58024400 	.word	0x58024400

08003a34 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003a34:	b480      	push	{r7}
 8003a36:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8003a38:	bf00      	nop
 8003a3a:	46bd      	mov	sp, r7
 8003a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a40:	4770      	bx	lr

08003a42 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003a42:	b480      	push	{r7}
 8003a44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003a46:	e7fe      	b.n	8003a46 <HardFault_Handler+0x4>

08003a48 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003a48:	b480      	push	{r7}
 8003a4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003a4c:	e7fe      	b.n	8003a4c <MemManage_Handler+0x4>

08003a4e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003a4e:	b480      	push	{r7}
 8003a50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003a52:	e7fe      	b.n	8003a52 <BusFault_Handler+0x4>

08003a54 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003a54:	b480      	push	{r7}
 8003a56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003a58:	e7fe      	b.n	8003a58 <UsageFault_Handler+0x4>

08003a5a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003a5a:	b480      	push	{r7}
 8003a5c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003a5e:	bf00      	nop
 8003a60:	46bd      	mov	sp, r7
 8003a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a66:	4770      	bx	lr

08003a68 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003a68:	b480      	push	{r7}
 8003a6a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003a6c:	bf00      	nop
 8003a6e:	46bd      	mov	sp, r7
 8003a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a74:	4770      	bx	lr

08003a76 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003a76:	b480      	push	{r7}
 8003a78:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003a7a:	bf00      	nop
 8003a7c:	46bd      	mov	sp, r7
 8003a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a82:	4770      	bx	lr

08003a84 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003a84:	b580      	push	{r7, lr}
 8003a86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003a88:	f002 fe42 	bl	8006710 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003a8c:	bf00      	nop
 8003a8e:	bd80      	pop	{r7, pc}

08003a90 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8003a90:	b580      	push	{r7, lr}
 8003a92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(E_EndStop1_Sup_Pin);
 8003a94:	2001      	movs	r0, #1
 8003a96:	f003 ff12 	bl	80078be <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8003a9a:	bf00      	nop
 8003a9c:	bd80      	pop	{r7, pc}

08003a9e <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8003a9e:	b580      	push	{r7, lr}
 8003aa0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(E_EndStop2_Sup_Pin);
 8003aa2:	2004      	movs	r0, #4
 8003aa4:	f003 ff0b 	bl	80078be <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8003aa8:	bf00      	nop
 8003aaa:	bd80      	pop	{r7, pc}

08003aac <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8003aac:	b580      	push	{r7, lr}
 8003aae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(E_EndStop2_Inf_Pin);
 8003ab0:	2008      	movs	r0, #8
 8003ab2:	f003 ff04 	bl	80078be <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8003ab6:	bf00      	nop
 8003ab8:	bd80      	pop	{r7, pc}

08003aba <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8003aba:	b580      	push	{r7, lr}
 8003abc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(E_EndStop3_Sup_Pin);
 8003abe:	2010      	movs	r0, #16
 8003ac0:	f003 fefd 	bl	80078be <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8003ac4:	bf00      	nop
 8003ac6:	bd80      	pop	{r7, pc}

08003ac8 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8003ac8:	b580      	push	{r7, lr}
 8003aca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(E_EndStop3_Inf_Pin);
 8003acc:	2020      	movs	r0, #32
 8003ace:	f003 fef6 	bl	80078be <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(faultDriver1_Pin);
 8003ad2:	2080      	movs	r0, #128	; 0x80
 8003ad4:	f003 fef3 	bl	80078be <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8003ad8:	bf00      	nop
 8003ada:	bd80      	pop	{r7, pc}

08003adc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8003adc:	b580      	push	{r7, lr}
 8003ade:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8003ae0:	4802      	ldr	r0, [pc, #8]	; (8003aec <TIM2_IRQHandler+0x10>)
 8003ae2:	f007 f821 	bl	800ab28 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8003ae6:	bf00      	nop
 8003ae8:	bd80      	pop	{r7, pc}
 8003aea:	bf00      	nop
 8003aec:	240005d0 	.word	0x240005d0

08003af0 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8003af0:	b580      	push	{r7, lr}
 8003af2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8003af4:	4802      	ldr	r0, [pc, #8]	; (8003b00 <TIM3_IRQHandler+0x10>)
 8003af6:	f007 f817 	bl	800ab28 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8003afa:	bf00      	nop
 8003afc:	bd80      	pop	{r7, pc}
 8003afe:	bf00      	nop
 8003b00:	2400061c 	.word	0x2400061c

08003b04 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8003b04:	b580      	push	{r7, lr}
 8003b06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8003b08:	4802      	ldr	r0, [pc, #8]	; (8003b14 <TIM4_IRQHandler+0x10>)
 8003b0a:	f007 f80d 	bl	800ab28 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8003b0e:	bf00      	nop
 8003b10:	bd80      	pop	{r7, pc}
 8003b12:	bf00      	nop
 8003b14:	24000668 	.word	0x24000668

08003b18 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8003b18:	b580      	push	{r7, lr}
 8003b1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8003b1c:	4802      	ldr	r0, [pc, #8]	; (8003b28 <USART3_IRQHandler+0x10>)
 8003b1e:	f008 fb2f 	bl	800c180 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8003b22:	bf00      	nop
 8003b24:	bd80      	pop	{r7, pc}
 8003b26:	bf00      	nop
 8003b28:	24000a08 	.word	0x24000a08

08003b2c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8003b2c:	b580      	push	{r7, lr}
 8003b2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(E_EndStop1_Inf_Pin);
 8003b30:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8003b34:	f003 fec3 	bl	80078be <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BUTTON_Pin);
 8003b38:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8003b3c:	f003 febf 	bl	80078be <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(faultDriver2_Pin);
 8003b40:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8003b44:	f003 febb 	bl	80078be <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(faultDriver3_Pin);
 8003b48:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8003b4c:	f003 feb7 	bl	80078be <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8003b50:	bf00      	nop
 8003b52:	bd80      	pop	{r7, pc}

08003b54 <FPU_IRQHandler>:

/**
  * @brief This function handles FPU global interrupt.
  */
void FPU_IRQHandler(void)
{
 8003b54:	b480      	push	{r7}
 8003b56:	af00      	add	r7, sp, #0

  /* USER CODE END FPU_IRQn 0 */
  /* USER CODE BEGIN FPU_IRQn 1 */

  /* USER CODE END FPU_IRQn 1 */
}
 8003b58:	bf00      	nop
 8003b5a:	46bd      	mov	sp, r7
 8003b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b60:	4770      	bx	lr
	...

08003b64 <TIM15_IRQHandler>:

/**
  * @brief This function handles TIM15 global interrupt.
  */
void TIM15_IRQHandler(void)
{
 8003b64:	b580      	push	{r7, lr}
 8003b66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM15_IRQn 0 */

  /* USER CODE END TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim15);
 8003b68:	4802      	ldr	r0, [pc, #8]	; (8003b74 <TIM15_IRQHandler+0x10>)
 8003b6a:	f006 ffdd 	bl	800ab28 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM15_IRQn 1 */

  /* USER CODE END TIM15_IRQn 1 */
}
 8003b6e:	bf00      	nop
 8003b70:	bd80      	pop	{r7, pc}
 8003b72:	bf00      	nop
 8003b74:	240007e4 	.word	0x240007e4

08003b78 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003b78:	b480      	push	{r7}
 8003b7a:	af00      	add	r7, sp, #0
	return 1;
 8003b7c:	2301      	movs	r3, #1
}
 8003b7e:	4618      	mov	r0, r3
 8003b80:	46bd      	mov	sp, r7
 8003b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b86:	4770      	bx	lr

08003b88 <_kill>:

int _kill(int pid, int sig)
{
 8003b88:	b580      	push	{r7, lr}
 8003b8a:	b082      	sub	sp, #8
 8003b8c:	af00      	add	r7, sp, #0
 8003b8e:	6078      	str	r0, [r7, #4]
 8003b90:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8003b92:	f00a fd17 	bl	800e5c4 <__errno>
 8003b96:	4603      	mov	r3, r0
 8003b98:	2216      	movs	r2, #22
 8003b9a:	601a      	str	r2, [r3, #0]
	return -1;
 8003b9c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003ba0:	4618      	mov	r0, r3
 8003ba2:	3708      	adds	r7, #8
 8003ba4:	46bd      	mov	sp, r7
 8003ba6:	bd80      	pop	{r7, pc}

08003ba8 <_exit>:

void _exit (int status)
{
 8003ba8:	b580      	push	{r7, lr}
 8003baa:	b082      	sub	sp, #8
 8003bac:	af00      	add	r7, sp, #0
 8003bae:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8003bb0:	f04f 31ff 	mov.w	r1, #4294967295
 8003bb4:	6878      	ldr	r0, [r7, #4]
 8003bb6:	f7ff ffe7 	bl	8003b88 <_kill>
	while (1) {}		/* Make sure we hang here */
 8003bba:	e7fe      	b.n	8003bba <_exit+0x12>

08003bbc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003bbc:	b580      	push	{r7, lr}
 8003bbe:	b086      	sub	sp, #24
 8003bc0:	af00      	add	r7, sp, #0
 8003bc2:	60f8      	str	r0, [r7, #12]
 8003bc4:	60b9      	str	r1, [r7, #8]
 8003bc6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003bc8:	2300      	movs	r3, #0
 8003bca:	617b      	str	r3, [r7, #20]
 8003bcc:	e00a      	b.n	8003be4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8003bce:	f3af 8000 	nop.w
 8003bd2:	4601      	mov	r1, r0
 8003bd4:	68bb      	ldr	r3, [r7, #8]
 8003bd6:	1c5a      	adds	r2, r3, #1
 8003bd8:	60ba      	str	r2, [r7, #8]
 8003bda:	b2ca      	uxtb	r2, r1
 8003bdc:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003bde:	697b      	ldr	r3, [r7, #20]
 8003be0:	3301      	adds	r3, #1
 8003be2:	617b      	str	r3, [r7, #20]
 8003be4:	697a      	ldr	r2, [r7, #20]
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	429a      	cmp	r2, r3
 8003bea:	dbf0      	blt.n	8003bce <_read+0x12>
	}

return len;
 8003bec:	687b      	ldr	r3, [r7, #4]
}
 8003bee:	4618      	mov	r0, r3
 8003bf0:	3718      	adds	r7, #24
 8003bf2:	46bd      	mov	sp, r7
 8003bf4:	bd80      	pop	{r7, pc}

08003bf6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003bf6:	b580      	push	{r7, lr}
 8003bf8:	b086      	sub	sp, #24
 8003bfa:	af00      	add	r7, sp, #0
 8003bfc:	60f8      	str	r0, [r7, #12]
 8003bfe:	60b9      	str	r1, [r7, #8]
 8003c00:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003c02:	2300      	movs	r3, #0
 8003c04:	617b      	str	r3, [r7, #20]
 8003c06:	e009      	b.n	8003c1c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8003c08:	68bb      	ldr	r3, [r7, #8]
 8003c0a:	1c5a      	adds	r2, r3, #1
 8003c0c:	60ba      	str	r2, [r7, #8]
 8003c0e:	781b      	ldrb	r3, [r3, #0]
 8003c10:	4618      	mov	r0, r3
 8003c12:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003c16:	697b      	ldr	r3, [r7, #20]
 8003c18:	3301      	adds	r3, #1
 8003c1a:	617b      	str	r3, [r7, #20]
 8003c1c:	697a      	ldr	r2, [r7, #20]
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	429a      	cmp	r2, r3
 8003c22:	dbf1      	blt.n	8003c08 <_write+0x12>
	}
	return len;
 8003c24:	687b      	ldr	r3, [r7, #4]
}
 8003c26:	4618      	mov	r0, r3
 8003c28:	3718      	adds	r7, #24
 8003c2a:	46bd      	mov	sp, r7
 8003c2c:	bd80      	pop	{r7, pc}

08003c2e <_close>:

int _close(int file)
{
 8003c2e:	b480      	push	{r7}
 8003c30:	b083      	sub	sp, #12
 8003c32:	af00      	add	r7, sp, #0
 8003c34:	6078      	str	r0, [r7, #4]
	return -1;
 8003c36:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003c3a:	4618      	mov	r0, r3
 8003c3c:	370c      	adds	r7, #12
 8003c3e:	46bd      	mov	sp, r7
 8003c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c44:	4770      	bx	lr

08003c46 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003c46:	b480      	push	{r7}
 8003c48:	b083      	sub	sp, #12
 8003c4a:	af00      	add	r7, sp, #0
 8003c4c:	6078      	str	r0, [r7, #4]
 8003c4e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8003c50:	683b      	ldr	r3, [r7, #0]
 8003c52:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003c56:	605a      	str	r2, [r3, #4]
	return 0;
 8003c58:	2300      	movs	r3, #0
}
 8003c5a:	4618      	mov	r0, r3
 8003c5c:	370c      	adds	r7, #12
 8003c5e:	46bd      	mov	sp, r7
 8003c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c64:	4770      	bx	lr

08003c66 <_isatty>:

int _isatty(int file)
{
 8003c66:	b480      	push	{r7}
 8003c68:	b083      	sub	sp, #12
 8003c6a:	af00      	add	r7, sp, #0
 8003c6c:	6078      	str	r0, [r7, #4]
	return 1;
 8003c6e:	2301      	movs	r3, #1
}
 8003c70:	4618      	mov	r0, r3
 8003c72:	370c      	adds	r7, #12
 8003c74:	46bd      	mov	sp, r7
 8003c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c7a:	4770      	bx	lr

08003c7c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003c7c:	b480      	push	{r7}
 8003c7e:	b085      	sub	sp, #20
 8003c80:	af00      	add	r7, sp, #0
 8003c82:	60f8      	str	r0, [r7, #12]
 8003c84:	60b9      	str	r1, [r7, #8]
 8003c86:	607a      	str	r2, [r7, #4]
	return 0;
 8003c88:	2300      	movs	r3, #0
}
 8003c8a:	4618      	mov	r0, r3
 8003c8c:	3714      	adds	r7, #20
 8003c8e:	46bd      	mov	sp, r7
 8003c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c94:	4770      	bx	lr

08003c96 <_open>:

int _open(char *path, int flags, ...)
{
 8003c96:	b40e      	push	{r1, r2, r3}
 8003c98:	b480      	push	{r7}
 8003c9a:	b082      	sub	sp, #8
 8003c9c:	af00      	add	r7, sp, #0
 8003c9e:	6078      	str	r0, [r7, #4]
	/* Pretend like we always fail */
	return -1;
 8003ca0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003ca4:	4618      	mov	r0, r3
 8003ca6:	3708      	adds	r7, #8
 8003ca8:	46bd      	mov	sp, r7
 8003caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cae:	b003      	add	sp, #12
 8003cb0:	4770      	bx	lr
	...

08003cb4 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8003cb4:	b580      	push	{r7, lr}
 8003cb6:	b084      	sub	sp, #16
 8003cb8:	af00      	add	r7, sp, #0
 8003cba:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8003cbc:	4b11      	ldr	r3, [pc, #68]	; (8003d04 <_sbrk+0x50>)
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d102      	bne.n	8003cca <_sbrk+0x16>
		heap_end = &end;
 8003cc4:	4b0f      	ldr	r3, [pc, #60]	; (8003d04 <_sbrk+0x50>)
 8003cc6:	4a10      	ldr	r2, [pc, #64]	; (8003d08 <_sbrk+0x54>)
 8003cc8:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8003cca:	4b0e      	ldr	r3, [pc, #56]	; (8003d04 <_sbrk+0x50>)
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8003cd0:	4b0c      	ldr	r3, [pc, #48]	; (8003d04 <_sbrk+0x50>)
 8003cd2:	681a      	ldr	r2, [r3, #0]
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	4413      	add	r3, r2
 8003cd8:	466a      	mov	r2, sp
 8003cda:	4293      	cmp	r3, r2
 8003cdc:	d907      	bls.n	8003cee <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8003cde:	f00a fc71 	bl	800e5c4 <__errno>
 8003ce2:	4603      	mov	r3, r0
 8003ce4:	220c      	movs	r2, #12
 8003ce6:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 8003ce8:	f04f 33ff 	mov.w	r3, #4294967295
 8003cec:	e006      	b.n	8003cfc <_sbrk+0x48>
	}

	heap_end += incr;
 8003cee:	4b05      	ldr	r3, [pc, #20]	; (8003d04 <_sbrk+0x50>)
 8003cf0:	681a      	ldr	r2, [r3, #0]
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	4413      	add	r3, r2
 8003cf6:	4a03      	ldr	r2, [pc, #12]	; (8003d04 <_sbrk+0x50>)
 8003cf8:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8003cfa:	68fb      	ldr	r3, [r7, #12]
}
 8003cfc:	4618      	mov	r0, r3
 8003cfe:	3710      	adds	r7, #16
 8003d00:	46bd      	mov	sp, r7
 8003d02:	bd80      	pop	{r7, pc}
 8003d04:	240005cc 	.word	0x240005cc
 8003d08:	24000ab0 	.word	0x24000ab0

08003d0c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003d0c:	b480      	push	{r7}
 8003d0e:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8003d10:	4b29      	ldr	r3, [pc, #164]	; (8003db8 <SystemInit+0xac>)
 8003d12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d16:	4a28      	ldr	r2, [pc, #160]	; (8003db8 <SystemInit+0xac>)
 8003d18:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003d1c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8003d20:	4b26      	ldr	r3, [pc, #152]	; (8003dbc <SystemInit+0xb0>)
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	4a25      	ldr	r2, [pc, #148]	; (8003dbc <SystemInit+0xb0>)
 8003d26:	f043 0301 	orr.w	r3, r3, #1
 8003d2a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8003d2c:	4b23      	ldr	r3, [pc, #140]	; (8003dbc <SystemInit+0xb0>)
 8003d2e:	2200      	movs	r2, #0
 8003d30:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, CSSON , CSION,RC48ON, CSIKERON PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8003d32:	4b22      	ldr	r3, [pc, #136]	; (8003dbc <SystemInit+0xb0>)
 8003d34:	681a      	ldr	r2, [r3, #0]
 8003d36:	4921      	ldr	r1, [pc, #132]	; (8003dbc <SystemInit+0xb0>)
 8003d38:	4b21      	ldr	r3, [pc, #132]	; (8003dc0 <SystemInit+0xb4>)
 8003d3a:	4013      	ands	r3, r2
 8003d3c:	600b      	str	r3, [r1, #0]

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8003d3e:	4b1f      	ldr	r3, [pc, #124]	; (8003dbc <SystemInit+0xb0>)
 8003d40:	2200      	movs	r2, #0
 8003d42:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8003d44:	4b1d      	ldr	r3, [pc, #116]	; (8003dbc <SystemInit+0xb0>)
 8003d46:	2200      	movs	r2, #0
 8003d48:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8003d4a:	4b1c      	ldr	r3, [pc, #112]	; (8003dbc <SystemInit+0xb0>)
 8003d4c:	2200      	movs	r2, #0
 8003d4e:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x00000000;
 8003d50:	4b1a      	ldr	r3, [pc, #104]	; (8003dbc <SystemInit+0xb0>)
 8003d52:	2200      	movs	r2, #0
 8003d54:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00000000;
 8003d56:	4b19      	ldr	r3, [pc, #100]	; (8003dbc <SystemInit+0xb0>)
 8003d58:	2200      	movs	r2, #0
 8003d5a:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x00000000;
 8003d5c:	4b17      	ldr	r3, [pc, #92]	; (8003dbc <SystemInit+0xb0>)
 8003d5e:	2200      	movs	r2, #0
 8003d60:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8003d62:	4b16      	ldr	r3, [pc, #88]	; (8003dbc <SystemInit+0xb0>)
 8003d64:	2200      	movs	r2, #0
 8003d66:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x00000000;
 8003d68:	4b14      	ldr	r3, [pc, #80]	; (8003dbc <SystemInit+0xb0>)
 8003d6a:	2200      	movs	r2, #0
 8003d6c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8003d6e:	4b13      	ldr	r3, [pc, #76]	; (8003dbc <SystemInit+0xb0>)
 8003d70:	2200      	movs	r2, #0
 8003d72:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x00000000;
 8003d74:	4b11      	ldr	r3, [pc, #68]	; (8003dbc <SystemInit+0xb0>)
 8003d76:	2200      	movs	r2, #0
 8003d78:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8003d7a:	4b10      	ldr	r3, [pc, #64]	; (8003dbc <SystemInit+0xb0>)
 8003d7c:	2200      	movs	r2, #0
 8003d7e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8003d80:	4b0e      	ldr	r3, [pc, #56]	; (8003dbc <SystemInit+0xb0>)
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	4a0d      	ldr	r2, [pc, #52]	; (8003dbc <SystemInit+0xb0>)
 8003d86:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003d8a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8003d8c:	4b0b      	ldr	r3, [pc, #44]	; (8003dbc <SystemInit+0xb0>)
 8003d8e:	2200      	movs	r2, #0
 8003d90:	661a      	str	r2, [r3, #96]	; 0x60
  SCB->VTOR = FLASH_BANK2_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
#endif /* VECT_TAB_SRAM */

#else
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8003d92:	4b0c      	ldr	r3, [pc, #48]	; (8003dc4 <SystemInit+0xb8>)
 8003d94:	681a      	ldr	r2, [r3, #0]
 8003d96:	4b0c      	ldr	r3, [pc, #48]	; (8003dc8 <SystemInit+0xbc>)
 8003d98:	4013      	ands	r3, r2
 8003d9a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003d9e:	d202      	bcs.n	8003da6 <SystemInit+0x9a>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8003da0:	4b0a      	ldr	r3, [pc, #40]	; (8003dcc <SystemInit+0xc0>)
 8003da2:	2201      	movs	r2, #1
 8003da4:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003da6:	4b04      	ldr	r3, [pc, #16]	; (8003db8 <SystemInit+0xac>)
 8003da8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003dac:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 8003dae:	bf00      	nop
 8003db0:	46bd      	mov	sp, r7
 8003db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db6:	4770      	bx	lr
 8003db8:	e000ed00 	.word	0xe000ed00
 8003dbc:	58024400 	.word	0x58024400
 8003dc0:	eaf6ed7f 	.word	0xeaf6ed7f
 8003dc4:	5c001000 	.word	0x5c001000
 8003dc8:	ffff0000 	.word	0xffff0000
 8003dcc:	51008108 	.word	0x51008108

08003dd0 <MX_TIM2_Init>:
TIM_HandleTypeDef htim14;
TIM_HandleTypeDef htim15;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8003dd0:	b580      	push	{r7, lr}
 8003dd2:	b08c      	sub	sp, #48	; 0x30
 8003dd4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003dd6:	f107 0320 	add.w	r3, r7, #32
 8003dda:	2200      	movs	r2, #0
 8003ddc:	601a      	str	r2, [r3, #0]
 8003dde:	605a      	str	r2, [r3, #4]
 8003de0:	609a      	str	r2, [r3, #8]
 8003de2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003de4:	f107 0314 	add.w	r3, r7, #20
 8003de8:	2200      	movs	r2, #0
 8003dea:	601a      	str	r2, [r3, #0]
 8003dec:	605a      	str	r2, [r3, #4]
 8003dee:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8003df0:	1d3b      	adds	r3, r7, #4
 8003df2:	2200      	movs	r2, #0
 8003df4:	601a      	str	r2, [r3, #0]
 8003df6:	605a      	str	r2, [r3, #4]
 8003df8:	609a      	str	r2, [r3, #8]
 8003dfa:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8003dfc:	4b2b      	ldr	r3, [pc, #172]	; (8003eac <MX_TIM2_Init+0xdc>)
 8003dfe:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003e02:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8003e04:	4b29      	ldr	r3, [pc, #164]	; (8003eac <MX_TIM2_Init+0xdc>)
 8003e06:	2200      	movs	r2, #0
 8003e08:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003e0a:	4b28      	ldr	r3, [pc, #160]	; (8003eac <MX_TIM2_Init+0xdc>)
 8003e0c:	2200      	movs	r2, #0
 8003e0e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8003e10:	4b26      	ldr	r3, [pc, #152]	; (8003eac <MX_TIM2_Init+0xdc>)
 8003e12:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003e16:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003e18:	4b24      	ldr	r3, [pc, #144]	; (8003eac <MX_TIM2_Init+0xdc>)
 8003e1a:	2200      	movs	r2, #0
 8003e1c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003e1e:	4b23      	ldr	r3, [pc, #140]	; (8003eac <MX_TIM2_Init+0xdc>)
 8003e20:	2200      	movs	r2, #0
 8003e22:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8003e24:	4821      	ldr	r0, [pc, #132]	; (8003eac <MX_TIM2_Init+0xdc>)
 8003e26:	f006 f8c1 	bl	8009fac <HAL_TIM_Base_Init>
 8003e2a:	4603      	mov	r3, r0
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d001      	beq.n	8003e34 <MX_TIM2_Init+0x64>
  {
    Error_Handler();
 8003e30:	f7fe ff0a 	bl	8002c48 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003e34:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003e38:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8003e3a:	f107 0320 	add.w	r3, r7, #32
 8003e3e:	4619      	mov	r1, r3
 8003e40:	481a      	ldr	r0, [pc, #104]	; (8003eac <MX_TIM2_Init+0xdc>)
 8003e42:	f007 f941 	bl	800b0c8 <HAL_TIM_ConfigClockSource>
 8003e46:	4603      	mov	r3, r0
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d001      	beq.n	8003e50 <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 8003e4c:	f7fe fefc 	bl	8002c48 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8003e50:	4816      	ldr	r0, [pc, #88]	; (8003eac <MX_TIM2_Init+0xdc>)
 8003e52:	f006 fc47 	bl	800a6e4 <HAL_TIM_IC_Init>
 8003e56:	4603      	mov	r3, r0
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d001      	beq.n	8003e60 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8003e5c:	f7fe fef4 	bl	8002c48 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003e60:	2300      	movs	r3, #0
 8003e62:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003e64:	2300      	movs	r3, #0
 8003e66:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003e68:	f107 0314 	add.w	r3, r7, #20
 8003e6c:	4619      	mov	r1, r3
 8003e6e:	480f      	ldr	r0, [pc, #60]	; (8003eac <MX_TIM2_Init+0xdc>)
 8003e70:	f007 ff9e 	bl	800bdb0 <HAL_TIMEx_MasterConfigSynchronization>
 8003e74:	4603      	mov	r3, r0
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d001      	beq.n	8003e7e <MX_TIM2_Init+0xae>
  {
    Error_Handler();
 8003e7a:	f7fe fee5 	bl	8002c48 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8003e7e:	2300      	movs	r3, #0
 8003e80:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8003e82:	2301      	movs	r3, #1
 8003e84:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8003e86:	2300      	movs	r3, #0
 8003e88:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8003e8a:	2300      	movs	r3, #0
 8003e8c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8003e8e:	1d3b      	adds	r3, r7, #4
 8003e90:	2200      	movs	r2, #0
 8003e92:	4619      	mov	r1, r3
 8003e94:	4805      	ldr	r0, [pc, #20]	; (8003eac <MX_TIM2_Init+0xdc>)
 8003e96:	f006 ff66 	bl	800ad66 <HAL_TIM_IC_ConfigChannel>
 8003e9a:	4603      	mov	r3, r0
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d001      	beq.n	8003ea4 <MX_TIM2_Init+0xd4>
  {
    Error_Handler();
 8003ea0:	f7fe fed2 	bl	8002c48 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8003ea4:	bf00      	nop
 8003ea6:	3730      	adds	r7, #48	; 0x30
 8003ea8:	46bd      	mov	sp, r7
 8003eaa:	bd80      	pop	{r7, pc}
 8003eac:	240005d0 	.word	0x240005d0

08003eb0 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8003eb0:	b580      	push	{r7, lr}
 8003eb2:	b08c      	sub	sp, #48	; 0x30
 8003eb4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003eb6:	f107 0320 	add.w	r3, r7, #32
 8003eba:	2200      	movs	r2, #0
 8003ebc:	601a      	str	r2, [r3, #0]
 8003ebe:	605a      	str	r2, [r3, #4]
 8003ec0:	609a      	str	r2, [r3, #8]
 8003ec2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003ec4:	f107 0314 	add.w	r3, r7, #20
 8003ec8:	2200      	movs	r2, #0
 8003eca:	601a      	str	r2, [r3, #0]
 8003ecc:	605a      	str	r2, [r3, #4]
 8003ece:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8003ed0:	1d3b      	adds	r3, r7, #4
 8003ed2:	2200      	movs	r2, #0
 8003ed4:	601a      	str	r2, [r3, #0]
 8003ed6:	605a      	str	r2, [r3, #4]
 8003ed8:	609a      	str	r2, [r3, #8]
 8003eda:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8003edc:	4b2b      	ldr	r3, [pc, #172]	; (8003f8c <MX_TIM3_Init+0xdc>)
 8003ede:	4a2c      	ldr	r2, [pc, #176]	; (8003f90 <MX_TIM3_Init+0xe0>)
 8003ee0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8003ee2:	4b2a      	ldr	r3, [pc, #168]	; (8003f8c <MX_TIM3_Init+0xdc>)
 8003ee4:	2200      	movs	r2, #0
 8003ee6:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003ee8:	4b28      	ldr	r3, [pc, #160]	; (8003f8c <MX_TIM3_Init+0xdc>)
 8003eea:	2200      	movs	r2, #0
 8003eec:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8003eee:	4b27      	ldr	r3, [pc, #156]	; (8003f8c <MX_TIM3_Init+0xdc>)
 8003ef0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003ef4:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003ef6:	4b25      	ldr	r3, [pc, #148]	; (8003f8c <MX_TIM3_Init+0xdc>)
 8003ef8:	2200      	movs	r2, #0
 8003efa:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003efc:	4b23      	ldr	r3, [pc, #140]	; (8003f8c <MX_TIM3_Init+0xdc>)
 8003efe:	2200      	movs	r2, #0
 8003f00:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8003f02:	4822      	ldr	r0, [pc, #136]	; (8003f8c <MX_TIM3_Init+0xdc>)
 8003f04:	f006 f852 	bl	8009fac <HAL_TIM_Base_Init>
 8003f08:	4603      	mov	r3, r0
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d001      	beq.n	8003f12 <MX_TIM3_Init+0x62>
  {
    Error_Handler();
 8003f0e:	f7fe fe9b 	bl	8002c48 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003f12:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003f16:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8003f18:	f107 0320 	add.w	r3, r7, #32
 8003f1c:	4619      	mov	r1, r3
 8003f1e:	481b      	ldr	r0, [pc, #108]	; (8003f8c <MX_TIM3_Init+0xdc>)
 8003f20:	f007 f8d2 	bl	800b0c8 <HAL_TIM_ConfigClockSource>
 8003f24:	4603      	mov	r3, r0
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d001      	beq.n	8003f2e <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 8003f2a:	f7fe fe8d 	bl	8002c48 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 8003f2e:	4817      	ldr	r0, [pc, #92]	; (8003f8c <MX_TIM3_Init+0xdc>)
 8003f30:	f006 fbd8 	bl	800a6e4 <HAL_TIM_IC_Init>
 8003f34:	4603      	mov	r3, r0
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d001      	beq.n	8003f3e <MX_TIM3_Init+0x8e>
  {
    Error_Handler();
 8003f3a:	f7fe fe85 	bl	8002c48 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003f3e:	2300      	movs	r3, #0
 8003f40:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003f42:	2300      	movs	r3, #0
 8003f44:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003f46:	f107 0314 	add.w	r3, r7, #20
 8003f4a:	4619      	mov	r1, r3
 8003f4c:	480f      	ldr	r0, [pc, #60]	; (8003f8c <MX_TIM3_Init+0xdc>)
 8003f4e:	f007 ff2f 	bl	800bdb0 <HAL_TIMEx_MasterConfigSynchronization>
 8003f52:	4603      	mov	r3, r0
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d001      	beq.n	8003f5c <MX_TIM3_Init+0xac>
  {
    Error_Handler();
 8003f58:	f7fe fe76 	bl	8002c48 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8003f5c:	2300      	movs	r3, #0
 8003f5e:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8003f60:	2301      	movs	r3, #1
 8003f62:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8003f64:	2300      	movs	r3, #0
 8003f66:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8003f68:	2300      	movs	r3, #0
 8003f6a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8003f6c:	1d3b      	adds	r3, r7, #4
 8003f6e:	2200      	movs	r2, #0
 8003f70:	4619      	mov	r1, r3
 8003f72:	4806      	ldr	r0, [pc, #24]	; (8003f8c <MX_TIM3_Init+0xdc>)
 8003f74:	f006 fef7 	bl	800ad66 <HAL_TIM_IC_ConfigChannel>
 8003f78:	4603      	mov	r3, r0
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d001      	beq.n	8003f82 <MX_TIM3_Init+0xd2>
  {
    Error_Handler();
 8003f7e:	f7fe fe63 	bl	8002c48 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8003f82:	bf00      	nop
 8003f84:	3730      	adds	r7, #48	; 0x30
 8003f86:	46bd      	mov	sp, r7
 8003f88:	bd80      	pop	{r7, pc}
 8003f8a:	bf00      	nop
 8003f8c:	2400061c 	.word	0x2400061c
 8003f90:	40000400 	.word	0x40000400

08003f94 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8003f94:	b580      	push	{r7, lr}
 8003f96:	b08c      	sub	sp, #48	; 0x30
 8003f98:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003f9a:	f107 0320 	add.w	r3, r7, #32
 8003f9e:	2200      	movs	r2, #0
 8003fa0:	601a      	str	r2, [r3, #0]
 8003fa2:	605a      	str	r2, [r3, #4]
 8003fa4:	609a      	str	r2, [r3, #8]
 8003fa6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003fa8:	f107 0314 	add.w	r3, r7, #20
 8003fac:	2200      	movs	r2, #0
 8003fae:	601a      	str	r2, [r3, #0]
 8003fb0:	605a      	str	r2, [r3, #4]
 8003fb2:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8003fb4:	1d3b      	adds	r3, r7, #4
 8003fb6:	2200      	movs	r2, #0
 8003fb8:	601a      	str	r2, [r3, #0]
 8003fba:	605a      	str	r2, [r3, #4]
 8003fbc:	609a      	str	r2, [r3, #8]
 8003fbe:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8003fc0:	4b2b      	ldr	r3, [pc, #172]	; (8004070 <MX_TIM4_Init+0xdc>)
 8003fc2:	4a2c      	ldr	r2, [pc, #176]	; (8004074 <MX_TIM4_Init+0xe0>)
 8003fc4:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8003fc6:	4b2a      	ldr	r3, [pc, #168]	; (8004070 <MX_TIM4_Init+0xdc>)
 8003fc8:	2200      	movs	r2, #0
 8003fca:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003fcc:	4b28      	ldr	r3, [pc, #160]	; (8004070 <MX_TIM4_Init+0xdc>)
 8003fce:	2200      	movs	r2, #0
 8003fd0:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8003fd2:	4b27      	ldr	r3, [pc, #156]	; (8004070 <MX_TIM4_Init+0xdc>)
 8003fd4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003fd8:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003fda:	4b25      	ldr	r3, [pc, #148]	; (8004070 <MX_TIM4_Init+0xdc>)
 8003fdc:	2200      	movs	r2, #0
 8003fde:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003fe0:	4b23      	ldr	r3, [pc, #140]	; (8004070 <MX_TIM4_Init+0xdc>)
 8003fe2:	2200      	movs	r2, #0
 8003fe4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8003fe6:	4822      	ldr	r0, [pc, #136]	; (8004070 <MX_TIM4_Init+0xdc>)
 8003fe8:	f005 ffe0 	bl	8009fac <HAL_TIM_Base_Init>
 8003fec:	4603      	mov	r3, r0
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d001      	beq.n	8003ff6 <MX_TIM4_Init+0x62>
  {
    Error_Handler();
 8003ff2:	f7fe fe29 	bl	8002c48 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003ff6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003ffa:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8003ffc:	f107 0320 	add.w	r3, r7, #32
 8004000:	4619      	mov	r1, r3
 8004002:	481b      	ldr	r0, [pc, #108]	; (8004070 <MX_TIM4_Init+0xdc>)
 8004004:	f007 f860 	bl	800b0c8 <HAL_TIM_ConfigClockSource>
 8004008:	4603      	mov	r3, r0
 800400a:	2b00      	cmp	r3, #0
 800400c:	d001      	beq.n	8004012 <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 800400e:	f7fe fe1b 	bl	8002c48 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim4) != HAL_OK)
 8004012:	4817      	ldr	r0, [pc, #92]	; (8004070 <MX_TIM4_Init+0xdc>)
 8004014:	f006 fb66 	bl	800a6e4 <HAL_TIM_IC_Init>
 8004018:	4603      	mov	r3, r0
 800401a:	2b00      	cmp	r3, #0
 800401c:	d001      	beq.n	8004022 <MX_TIM4_Init+0x8e>
  {
    Error_Handler();
 800401e:	f7fe fe13 	bl	8002c48 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004022:	2300      	movs	r3, #0
 8004024:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004026:	2300      	movs	r3, #0
 8004028:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800402a:	f107 0314 	add.w	r3, r7, #20
 800402e:	4619      	mov	r1, r3
 8004030:	480f      	ldr	r0, [pc, #60]	; (8004070 <MX_TIM4_Init+0xdc>)
 8004032:	f007 febd 	bl	800bdb0 <HAL_TIMEx_MasterConfigSynchronization>
 8004036:	4603      	mov	r3, r0
 8004038:	2b00      	cmp	r3, #0
 800403a:	d001      	beq.n	8004040 <MX_TIM4_Init+0xac>
  {
    Error_Handler();
 800403c:	f7fe fe04 	bl	8002c48 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8004040:	2300      	movs	r3, #0
 8004042:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8004044:	2301      	movs	r3, #1
 8004046:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8004048:	2300      	movs	r3, #0
 800404a:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 800404c:	2300      	movs	r3, #0
 800404e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8004050:	1d3b      	adds	r3, r7, #4
 8004052:	2200      	movs	r2, #0
 8004054:	4619      	mov	r1, r3
 8004056:	4806      	ldr	r0, [pc, #24]	; (8004070 <MX_TIM4_Init+0xdc>)
 8004058:	f006 fe85 	bl	800ad66 <HAL_TIM_IC_ConfigChannel>
 800405c:	4603      	mov	r3, r0
 800405e:	2b00      	cmp	r3, #0
 8004060:	d001      	beq.n	8004066 <MX_TIM4_Init+0xd2>
  {
    Error_Handler();
 8004062:	f7fe fdf1 	bl	8002c48 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8004066:	bf00      	nop
 8004068:	3730      	adds	r7, #48	; 0x30
 800406a:	46bd      	mov	sp, r7
 800406c:	bd80      	pop	{r7, pc}
 800406e:	bf00      	nop
 8004070:	24000668 	.word	0x24000668
 8004074:	40000800 	.word	0x40000800

08004078 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8004078:	b580      	push	{r7, lr}
 800407a:	b088      	sub	sp, #32
 800407c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800407e:	f107 0310 	add.w	r3, r7, #16
 8004082:	2200      	movs	r2, #0
 8004084:	601a      	str	r2, [r3, #0]
 8004086:	605a      	str	r2, [r3, #4]
 8004088:	609a      	str	r2, [r3, #8]
 800408a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800408c:	1d3b      	adds	r3, r7, #4
 800408e:	2200      	movs	r2, #0
 8004090:	601a      	str	r2, [r3, #0]
 8004092:	605a      	str	r2, [r3, #4]
 8004094:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8004096:	4b1d      	ldr	r3, [pc, #116]	; (800410c <MX_TIM5_Init+0x94>)
 8004098:	4a1d      	ldr	r2, [pc, #116]	; (8004110 <MX_TIM5_Init+0x98>)
 800409a:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 800409c:	4b1b      	ldr	r3, [pc, #108]	; (800410c <MX_TIM5_Init+0x94>)
 800409e:	2200      	movs	r2, #0
 80040a0:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80040a2:	4b1a      	ldr	r3, [pc, #104]	; (800410c <MX_TIM5_Init+0x94>)
 80040a4:	2200      	movs	r2, #0
 80040a6:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 80040a8:	4b18      	ldr	r3, [pc, #96]	; (800410c <MX_TIM5_Init+0x94>)
 80040aa:	f04f 32ff 	mov.w	r2, #4294967295
 80040ae:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80040b0:	4b16      	ldr	r3, [pc, #88]	; (800410c <MX_TIM5_Init+0x94>)
 80040b2:	2200      	movs	r2, #0
 80040b4:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80040b6:	4b15      	ldr	r3, [pc, #84]	; (800410c <MX_TIM5_Init+0x94>)
 80040b8:	2200      	movs	r2, #0
 80040ba:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80040bc:	4813      	ldr	r0, [pc, #76]	; (800410c <MX_TIM5_Init+0x94>)
 80040be:	f005 ff75 	bl	8009fac <HAL_TIM_Base_Init>
 80040c2:	4603      	mov	r3, r0
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d001      	beq.n	80040cc <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 80040c8:	f7fe fdbe 	bl	8002c48 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80040cc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80040d0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80040d2:	f107 0310 	add.w	r3, r7, #16
 80040d6:	4619      	mov	r1, r3
 80040d8:	480c      	ldr	r0, [pc, #48]	; (800410c <MX_TIM5_Init+0x94>)
 80040da:	f006 fff5 	bl	800b0c8 <HAL_TIM_ConfigClockSource>
 80040de:	4603      	mov	r3, r0
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d001      	beq.n	80040e8 <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 80040e4:	f7fe fdb0 	bl	8002c48 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80040e8:	2300      	movs	r3, #0
 80040ea:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80040ec:	2300      	movs	r3, #0
 80040ee:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80040f0:	1d3b      	adds	r3, r7, #4
 80040f2:	4619      	mov	r1, r3
 80040f4:	4805      	ldr	r0, [pc, #20]	; (800410c <MX_TIM5_Init+0x94>)
 80040f6:	f007 fe5b 	bl	800bdb0 <HAL_TIMEx_MasterConfigSynchronization>
 80040fa:	4603      	mov	r3, r0
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d001      	beq.n	8004104 <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 8004100:	f7fe fda2 	bl	8002c48 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8004104:	bf00      	nop
 8004106:	3720      	adds	r7, #32
 8004108:	46bd      	mov	sp, r7
 800410a:	bd80      	pop	{r7, pc}
 800410c:	240006b4 	.word	0x240006b4
 8004110:	40000c00 	.word	0x40000c00

08004114 <MX_TIM12_Init>:
/* TIM12 init function */
void MX_TIM12_Init(void)
{
 8004114:	b580      	push	{r7, lr}
 8004116:	b08c      	sub	sp, #48	; 0x30
 8004118:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800411a:	f107 0320 	add.w	r3, r7, #32
 800411e:	2200      	movs	r2, #0
 8004120:	601a      	str	r2, [r3, #0]
 8004122:	605a      	str	r2, [r3, #4]
 8004124:	609a      	str	r2, [r3, #8]
 8004126:	60da      	str	r2, [r3, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004128:	1d3b      	adds	r3, r7, #4
 800412a:	2200      	movs	r2, #0
 800412c:	601a      	str	r2, [r3, #0]
 800412e:	605a      	str	r2, [r3, #4]
 8004130:	609a      	str	r2, [r3, #8]
 8004132:	60da      	str	r2, [r3, #12]
 8004134:	611a      	str	r2, [r3, #16]
 8004136:	615a      	str	r2, [r3, #20]
 8004138:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 800413a:	4b25      	ldr	r3, [pc, #148]	; (80041d0 <MX_TIM12_Init+0xbc>)
 800413c:	4a25      	ldr	r2, [pc, #148]	; (80041d4 <MX_TIM12_Init+0xc0>)
 800413e:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 64-1;
 8004140:	4b23      	ldr	r3, [pc, #140]	; (80041d0 <MX_TIM12_Init+0xbc>)
 8004142:	223f      	movs	r2, #63	; 0x3f
 8004144:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004146:	4b22      	ldr	r3, [pc, #136]	; (80041d0 <MX_TIM12_Init+0xbc>)
 8004148:	2200      	movs	r2, #0
 800414a:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 0;
 800414c:	4b20      	ldr	r3, [pc, #128]	; (80041d0 <MX_TIM12_Init+0xbc>)
 800414e:	2200      	movs	r2, #0
 8004150:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004152:	4b1f      	ldr	r3, [pc, #124]	; (80041d0 <MX_TIM12_Init+0xbc>)
 8004154:	2200      	movs	r2, #0
 8004156:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004158:	4b1d      	ldr	r3, [pc, #116]	; (80041d0 <MX_TIM12_Init+0xbc>)
 800415a:	2200      	movs	r2, #0
 800415c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim12) != HAL_OK)
 800415e:	481c      	ldr	r0, [pc, #112]	; (80041d0 <MX_TIM12_Init+0xbc>)
 8004160:	f005 ff24 	bl	8009fac <HAL_TIM_Base_Init>
 8004164:	4603      	mov	r3, r0
 8004166:	2b00      	cmp	r3, #0
 8004168:	d001      	beq.n	800416e <MX_TIM12_Init+0x5a>
  {
    Error_Handler();
 800416a:	f7fe fd6d 	bl	8002c48 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800416e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004172:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim12, &sClockSourceConfig) != HAL_OK)
 8004174:	f107 0320 	add.w	r3, r7, #32
 8004178:	4619      	mov	r1, r3
 800417a:	4815      	ldr	r0, [pc, #84]	; (80041d0 <MX_TIM12_Init+0xbc>)
 800417c:	f006 ffa4 	bl	800b0c8 <HAL_TIM_ConfigClockSource>
 8004180:	4603      	mov	r3, r0
 8004182:	2b00      	cmp	r3, #0
 8004184:	d001      	beq.n	800418a <MX_TIM12_Init+0x76>
  {
    Error_Handler();
 8004186:	f7fe fd5f 	bl	8002c48 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 800418a:	4811      	ldr	r0, [pc, #68]	; (80041d0 <MX_TIM12_Init+0xbc>)
 800418c:	f006 f8a5 	bl	800a2da <HAL_TIM_PWM_Init>
 8004190:	4603      	mov	r3, r0
 8004192:	2b00      	cmp	r3, #0
 8004194:	d001      	beq.n	800419a <MX_TIM12_Init+0x86>
  {
    Error_Handler();
 8004196:	f7fe fd57 	bl	8002c48 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800419a:	2360      	movs	r3, #96	; 0x60
 800419c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800419e:	2300      	movs	r3, #0
 80041a0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80041a2:	2300      	movs	r3, #0
 80041a4:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80041a6:	2300      	movs	r3, #0
 80041a8:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80041aa:	1d3b      	adds	r3, r7, #4
 80041ac:	2200      	movs	r2, #0
 80041ae:	4619      	mov	r1, r3
 80041b0:	4807      	ldr	r0, [pc, #28]	; (80041d0 <MX_TIM12_Init+0xbc>)
 80041b2:	f006 fe75 	bl	800aea0 <HAL_TIM_PWM_ConfigChannel>
 80041b6:	4603      	mov	r3, r0
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d001      	beq.n	80041c0 <MX_TIM12_Init+0xac>
  {
    Error_Handler();
 80041bc:	f7fe fd44 	bl	8002c48 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 80041c0:	4803      	ldr	r0, [pc, #12]	; (80041d0 <MX_TIM12_Init+0xbc>)
 80041c2:	f000 fa3d 	bl	8004640 <HAL_TIM_MspPostInit>

}
 80041c6:	bf00      	nop
 80041c8:	3730      	adds	r7, #48	; 0x30
 80041ca:	46bd      	mov	sp, r7
 80041cc:	bd80      	pop	{r7, pc}
 80041ce:	bf00      	nop
 80041d0:	24000700 	.word	0x24000700
 80041d4:	40001800 	.word	0x40001800

080041d8 <MX_TIM13_Init>:
/* TIM13 init function */
void MX_TIM13_Init(void)
{
 80041d8:	b580      	push	{r7, lr}
 80041da:	b088      	sub	sp, #32
 80041dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM13_Init 0 */

  /* USER CODE END TIM13_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80041de:	1d3b      	adds	r3, r7, #4
 80041e0:	2200      	movs	r2, #0
 80041e2:	601a      	str	r2, [r3, #0]
 80041e4:	605a      	str	r2, [r3, #4]
 80041e6:	609a      	str	r2, [r3, #8]
 80041e8:	60da      	str	r2, [r3, #12]
 80041ea:	611a      	str	r2, [r3, #16]
 80041ec:	615a      	str	r2, [r3, #20]
 80041ee:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 80041f0:	4b1d      	ldr	r3, [pc, #116]	; (8004268 <MX_TIM13_Init+0x90>)
 80041f2:	4a1e      	ldr	r2, [pc, #120]	; (800426c <MX_TIM13_Init+0x94>)
 80041f4:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 64-1;
 80041f6:	4b1c      	ldr	r3, [pc, #112]	; (8004268 <MX_TIM13_Init+0x90>)
 80041f8:	223f      	movs	r2, #63	; 0x3f
 80041fa:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 80041fc:	4b1a      	ldr	r3, [pc, #104]	; (8004268 <MX_TIM13_Init+0x90>)
 80041fe:	2200      	movs	r2, #0
 8004200:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 0;
 8004202:	4b19      	ldr	r3, [pc, #100]	; (8004268 <MX_TIM13_Init+0x90>)
 8004204:	2200      	movs	r2, #0
 8004206:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004208:	4b17      	ldr	r3, [pc, #92]	; (8004268 <MX_TIM13_Init+0x90>)
 800420a:	2200      	movs	r2, #0
 800420c:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800420e:	4b16      	ldr	r3, [pc, #88]	; (8004268 <MX_TIM13_Init+0x90>)
 8004210:	2200      	movs	r2, #0
 8004212:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 8004214:	4814      	ldr	r0, [pc, #80]	; (8004268 <MX_TIM13_Init+0x90>)
 8004216:	f005 fec9 	bl	8009fac <HAL_TIM_Base_Init>
 800421a:	4603      	mov	r3, r0
 800421c:	2b00      	cmp	r3, #0
 800421e:	d001      	beq.n	8004224 <MX_TIM13_Init+0x4c>
  {
    Error_Handler();
 8004220:	f7fe fd12 	bl	8002c48 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim13) != HAL_OK)
 8004224:	4810      	ldr	r0, [pc, #64]	; (8004268 <MX_TIM13_Init+0x90>)
 8004226:	f006 f858 	bl	800a2da <HAL_TIM_PWM_Init>
 800422a:	4603      	mov	r3, r0
 800422c:	2b00      	cmp	r3, #0
 800422e:	d001      	beq.n	8004234 <MX_TIM13_Init+0x5c>
  {
    Error_Handler();
 8004230:	f7fe fd0a 	bl	8002c48 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004234:	2360      	movs	r3, #96	; 0x60
 8004236:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8004238:	2300      	movs	r3, #0
 800423a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800423c:	2300      	movs	r3, #0
 800423e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004240:	2300      	movs	r3, #0
 8004242:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim13, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004244:	1d3b      	adds	r3, r7, #4
 8004246:	2200      	movs	r2, #0
 8004248:	4619      	mov	r1, r3
 800424a:	4807      	ldr	r0, [pc, #28]	; (8004268 <MX_TIM13_Init+0x90>)
 800424c:	f006 fe28 	bl	800aea0 <HAL_TIM_PWM_ConfigChannel>
 8004250:	4603      	mov	r3, r0
 8004252:	2b00      	cmp	r3, #0
 8004254:	d001      	beq.n	800425a <MX_TIM13_Init+0x82>
  {
    Error_Handler();
 8004256:	f7fe fcf7 	bl	8002c48 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */
  HAL_TIM_MspPostInit(&htim13);
 800425a:	4803      	ldr	r0, [pc, #12]	; (8004268 <MX_TIM13_Init+0x90>)
 800425c:	f000 f9f0 	bl	8004640 <HAL_TIM_MspPostInit>

}
 8004260:	bf00      	nop
 8004262:	3720      	adds	r7, #32
 8004264:	46bd      	mov	sp, r7
 8004266:	bd80      	pop	{r7, pc}
 8004268:	2400074c 	.word	0x2400074c
 800426c:	40001c00 	.word	0x40001c00

08004270 <MX_TIM14_Init>:
/* TIM14 init function */
void MX_TIM14_Init(void)
{
 8004270:	b580      	push	{r7, lr}
 8004272:	b088      	sub	sp, #32
 8004274:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM14_Init 0 */

  /* USER CODE END TIM14_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8004276:	1d3b      	adds	r3, r7, #4
 8004278:	2200      	movs	r2, #0
 800427a:	601a      	str	r2, [r3, #0]
 800427c:	605a      	str	r2, [r3, #4]
 800427e:	609a      	str	r2, [r3, #8]
 8004280:	60da      	str	r2, [r3, #12]
 8004282:	611a      	str	r2, [r3, #16]
 8004284:	615a      	str	r2, [r3, #20]
 8004286:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8004288:	4b1d      	ldr	r3, [pc, #116]	; (8004300 <MX_TIM14_Init+0x90>)
 800428a:	4a1e      	ldr	r2, [pc, #120]	; (8004304 <MX_TIM14_Init+0x94>)
 800428c:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 64-1;
 800428e:	4b1c      	ldr	r3, [pc, #112]	; (8004300 <MX_TIM14_Init+0x90>)
 8004290:	223f      	movs	r2, #63	; 0x3f
 8004292:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004294:	4b1a      	ldr	r3, [pc, #104]	; (8004300 <MX_TIM14_Init+0x90>)
 8004296:	2200      	movs	r2, #0
 8004298:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 0;
 800429a:	4b19      	ldr	r3, [pc, #100]	; (8004300 <MX_TIM14_Init+0x90>)
 800429c:	2200      	movs	r2, #0
 800429e:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80042a0:	4b17      	ldr	r3, [pc, #92]	; (8004300 <MX_TIM14_Init+0x90>)
 80042a2:	2200      	movs	r2, #0
 80042a4:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80042a6:	4b16      	ldr	r3, [pc, #88]	; (8004300 <MX_TIM14_Init+0x90>)
 80042a8:	2200      	movs	r2, #0
 80042aa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 80042ac:	4814      	ldr	r0, [pc, #80]	; (8004300 <MX_TIM14_Init+0x90>)
 80042ae:	f005 fe7d 	bl	8009fac <HAL_TIM_Base_Init>
 80042b2:	4603      	mov	r3, r0
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d001      	beq.n	80042bc <MX_TIM14_Init+0x4c>
  {
    Error_Handler();
 80042b8:	f7fe fcc6 	bl	8002c48 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim14) != HAL_OK)
 80042bc:	4810      	ldr	r0, [pc, #64]	; (8004300 <MX_TIM14_Init+0x90>)
 80042be:	f006 f80c 	bl	800a2da <HAL_TIM_PWM_Init>
 80042c2:	4603      	mov	r3, r0
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d001      	beq.n	80042cc <MX_TIM14_Init+0x5c>
  {
    Error_Handler();
 80042c8:	f7fe fcbe 	bl	8002c48 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80042cc:	2360      	movs	r3, #96	; 0x60
 80042ce:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80042d0:	2300      	movs	r3, #0
 80042d2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80042d4:	2300      	movs	r3, #0
 80042d6:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80042d8:	2300      	movs	r3, #0
 80042da:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim14, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80042dc:	1d3b      	adds	r3, r7, #4
 80042de:	2200      	movs	r2, #0
 80042e0:	4619      	mov	r1, r3
 80042e2:	4807      	ldr	r0, [pc, #28]	; (8004300 <MX_TIM14_Init+0x90>)
 80042e4:	f006 fddc 	bl	800aea0 <HAL_TIM_PWM_ConfigChannel>
 80042e8:	4603      	mov	r3, r0
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d001      	beq.n	80042f2 <MX_TIM14_Init+0x82>
  {
    Error_Handler();
 80042ee:	f7fe fcab 	bl	8002c48 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */
  HAL_TIM_MspPostInit(&htim14);
 80042f2:	4803      	ldr	r0, [pc, #12]	; (8004300 <MX_TIM14_Init+0x90>)
 80042f4:	f000 f9a4 	bl	8004640 <HAL_TIM_MspPostInit>

}
 80042f8:	bf00      	nop
 80042fa:	3720      	adds	r7, #32
 80042fc:	46bd      	mov	sp, r7
 80042fe:	bd80      	pop	{r7, pc}
 8004300:	24000798 	.word	0x24000798
 8004304:	40002000 	.word	0x40002000

08004308 <MX_TIM15_Init>:
/* TIM15 init function */
void MX_TIM15_Init(void)
{
 8004308:	b580      	push	{r7, lr}
 800430a:	b088      	sub	sp, #32
 800430c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800430e:	f107 0310 	add.w	r3, r7, #16
 8004312:	2200      	movs	r2, #0
 8004314:	601a      	str	r2, [r3, #0]
 8004316:	605a      	str	r2, [r3, #4]
 8004318:	609a      	str	r2, [r3, #8]
 800431a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800431c:	1d3b      	adds	r3, r7, #4
 800431e:	2200      	movs	r2, #0
 8004320:	601a      	str	r2, [r3, #0]
 8004322:	605a      	str	r2, [r3, #4]
 8004324:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8004326:	4b1f      	ldr	r3, [pc, #124]	; (80043a4 <MX_TIM15_Init+0x9c>)
 8004328:	4a1f      	ldr	r2, [pc, #124]	; (80043a8 <MX_TIM15_Init+0xa0>)
 800432a:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 0;
 800432c:	4b1d      	ldr	r3, [pc, #116]	; (80043a4 <MX_TIM15_Init+0x9c>)
 800432e:	2200      	movs	r2, #0
 8004330:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004332:	4b1c      	ldr	r3, [pc, #112]	; (80043a4 <MX_TIM15_Init+0x9c>)
 8004334:	2200      	movs	r2, #0
 8004336:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 64000;
 8004338:	4b1a      	ldr	r3, [pc, #104]	; (80043a4 <MX_TIM15_Init+0x9c>)
 800433a:	f44f 427a 	mov.w	r2, #64000	; 0xfa00
 800433e:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004340:	4b18      	ldr	r3, [pc, #96]	; (80043a4 <MX_TIM15_Init+0x9c>)
 8004342:	2200      	movs	r2, #0
 8004344:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8004346:	4b17      	ldr	r3, [pc, #92]	; (80043a4 <MX_TIM15_Init+0x9c>)
 8004348:	2200      	movs	r2, #0
 800434a:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800434c:	4b15      	ldr	r3, [pc, #84]	; (80043a4 <MX_TIM15_Init+0x9c>)
 800434e:	2200      	movs	r2, #0
 8004350:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 8004352:	4814      	ldr	r0, [pc, #80]	; (80043a4 <MX_TIM15_Init+0x9c>)
 8004354:	f005 fe2a 	bl	8009fac <HAL_TIM_Base_Init>
 8004358:	4603      	mov	r3, r0
 800435a:	2b00      	cmp	r3, #0
 800435c:	d001      	beq.n	8004362 <MX_TIM15_Init+0x5a>
  {
    Error_Handler();
 800435e:	f7fe fc73 	bl	8002c48 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004362:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004366:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 8004368:	f107 0310 	add.w	r3, r7, #16
 800436c:	4619      	mov	r1, r3
 800436e:	480d      	ldr	r0, [pc, #52]	; (80043a4 <MX_TIM15_Init+0x9c>)
 8004370:	f006 feaa 	bl	800b0c8 <HAL_TIM_ConfigClockSource>
 8004374:	4603      	mov	r3, r0
 8004376:	2b00      	cmp	r3, #0
 8004378:	d001      	beq.n	800437e <MX_TIM15_Init+0x76>
  {
    Error_Handler();
 800437a:	f7fe fc65 	bl	8002c48 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800437e:	2300      	movs	r3, #0
 8004380:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004382:	2300      	movs	r3, #0
 8004384:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8004386:	1d3b      	adds	r3, r7, #4
 8004388:	4619      	mov	r1, r3
 800438a:	4806      	ldr	r0, [pc, #24]	; (80043a4 <MX_TIM15_Init+0x9c>)
 800438c:	f007 fd10 	bl	800bdb0 <HAL_TIMEx_MasterConfigSynchronization>
 8004390:	4603      	mov	r3, r0
 8004392:	2b00      	cmp	r3, #0
 8004394:	d001      	beq.n	800439a <MX_TIM15_Init+0x92>
  {
    Error_Handler();
 8004396:	f7fe fc57 	bl	8002c48 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */

}
 800439a:	bf00      	nop
 800439c:	3720      	adds	r7, #32
 800439e:	46bd      	mov	sp, r7
 80043a0:	bd80      	pop	{r7, pc}
 80043a2:	bf00      	nop
 80043a4:	240007e4 	.word	0x240007e4
 80043a8:	40014000 	.word	0x40014000

080043ac <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80043ac:	b580      	push	{r7, lr}
 80043ae:	b092      	sub	sp, #72	; 0x48
 80043b0:	af00      	add	r7, sp, #0
 80043b2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80043b4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80043b8:	2200      	movs	r2, #0
 80043ba:	601a      	str	r2, [r3, #0]
 80043bc:	605a      	str	r2, [r3, #4]
 80043be:	609a      	str	r2, [r3, #8]
 80043c0:	60da      	str	r2, [r3, #12]
 80043c2:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM2)
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80043cc:	d136      	bne.n	800443c <HAL_TIM_Base_MspInit+0x90>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80043ce:	4b92      	ldr	r3, [pc, #584]	; (8004618 <HAL_TIM_Base_MspInit+0x26c>)
 80043d0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80043d4:	4a90      	ldr	r2, [pc, #576]	; (8004618 <HAL_TIM_Base_MspInit+0x26c>)
 80043d6:	f043 0301 	orr.w	r3, r3, #1
 80043da:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80043de:	4b8e      	ldr	r3, [pc, #568]	; (8004618 <HAL_TIM_Base_MspInit+0x26c>)
 80043e0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80043e4:	f003 0301 	and.w	r3, r3, #1
 80043e8:	633b      	str	r3, [r7, #48]	; 0x30
 80043ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80043ec:	4b8a      	ldr	r3, [pc, #552]	; (8004618 <HAL_TIM_Base_MspInit+0x26c>)
 80043ee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80043f2:	4a89      	ldr	r2, [pc, #548]	; (8004618 <HAL_TIM_Base_MspInit+0x26c>)
 80043f4:	f043 0301 	orr.w	r3, r3, #1
 80043f8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80043fc:	4b86      	ldr	r3, [pc, #536]	; (8004618 <HAL_TIM_Base_MspInit+0x26c>)
 80043fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004402:	f003 0301 	and.w	r3, r3, #1
 8004406:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004408:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = stepFeedback1_Pin;
 800440a:	2301      	movs	r3, #1
 800440c:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800440e:	2302      	movs	r3, #2
 8004410:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004412:	2300      	movs	r3, #0
 8004414:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004416:	2300      	movs	r3, #0
 8004418:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800441a:	2301      	movs	r3, #1
 800441c:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(stepFeedback1_GPIO_Port, &GPIO_InitStruct);
 800441e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8004422:	4619      	mov	r1, r3
 8004424:	487d      	ldr	r0, [pc, #500]	; (800461c <HAL_TIM_Base_MspInit+0x270>)
 8004426:	f003 f869 	bl	80074fc <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 1, 0);
 800442a:	2200      	movs	r2, #0
 800442c:	2101      	movs	r1, #1
 800442e:	201c      	movs	r0, #28
 8004430:	f002 fabd 	bl	80069ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8004434:	201c      	movs	r0, #28
 8004436:	f002 fad4 	bl	80069e2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM15_IRQn);
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }
}
 800443a:	e0e8      	b.n	800460e <HAL_TIM_Base_MspInit+0x262>
  else if(tim_baseHandle->Instance==TIM3)
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	4a77      	ldr	r2, [pc, #476]	; (8004620 <HAL_TIM_Base_MspInit+0x274>)
 8004442:	4293      	cmp	r3, r2
 8004444:	d136      	bne.n	80044b4 <HAL_TIM_Base_MspInit+0x108>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8004446:	4b74      	ldr	r3, [pc, #464]	; (8004618 <HAL_TIM_Base_MspInit+0x26c>)
 8004448:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800444c:	4a72      	ldr	r2, [pc, #456]	; (8004618 <HAL_TIM_Base_MspInit+0x26c>)
 800444e:	f043 0302 	orr.w	r3, r3, #2
 8004452:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8004456:	4b70      	ldr	r3, [pc, #448]	; (8004618 <HAL_TIM_Base_MspInit+0x26c>)
 8004458:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800445c:	f003 0302 	and.w	r3, r3, #2
 8004460:	62bb      	str	r3, [r7, #40]	; 0x28
 8004462:	6abb      	ldr	r3, [r7, #40]	; 0x28
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004464:	4b6c      	ldr	r3, [pc, #432]	; (8004618 <HAL_TIM_Base_MspInit+0x26c>)
 8004466:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800446a:	4a6b      	ldr	r2, [pc, #428]	; (8004618 <HAL_TIM_Base_MspInit+0x26c>)
 800446c:	f043 0301 	orr.w	r3, r3, #1
 8004470:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004474:	4b68      	ldr	r3, [pc, #416]	; (8004618 <HAL_TIM_Base_MspInit+0x26c>)
 8004476:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800447a:	f003 0301 	and.w	r3, r3, #1
 800447e:	627b      	str	r3, [r7, #36]	; 0x24
 8004480:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pin = stepFeedback2_Pin;
 8004482:	2340      	movs	r3, #64	; 0x40
 8004484:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004486:	2302      	movs	r3, #2
 8004488:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800448a:	2300      	movs	r3, #0
 800448c:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800448e:	2300      	movs	r3, #0
 8004490:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8004492:	2302      	movs	r3, #2
 8004494:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(stepFeedback2_GPIO_Port, &GPIO_InitStruct);
 8004496:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800449a:	4619      	mov	r1, r3
 800449c:	485f      	ldr	r0, [pc, #380]	; (800461c <HAL_TIM_Base_MspInit+0x270>)
 800449e:	f003 f82d 	bl	80074fc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM3_IRQn, 1, 0);
 80044a2:	2200      	movs	r2, #0
 80044a4:	2101      	movs	r1, #1
 80044a6:	201d      	movs	r0, #29
 80044a8:	f002 fa81 	bl	80069ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80044ac:	201d      	movs	r0, #29
 80044ae:	f002 fa98 	bl	80069e2 <HAL_NVIC_EnableIRQ>
}
 80044b2:	e0ac      	b.n	800460e <HAL_TIM_Base_MspInit+0x262>
  else if(tim_baseHandle->Instance==TIM4)
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	4a5a      	ldr	r2, [pc, #360]	; (8004624 <HAL_TIM_Base_MspInit+0x278>)
 80044ba:	4293      	cmp	r3, r2
 80044bc:	d137      	bne.n	800452e <HAL_TIM_Base_MspInit+0x182>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80044be:	4b56      	ldr	r3, [pc, #344]	; (8004618 <HAL_TIM_Base_MspInit+0x26c>)
 80044c0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80044c4:	4a54      	ldr	r2, [pc, #336]	; (8004618 <HAL_TIM_Base_MspInit+0x26c>)
 80044c6:	f043 0304 	orr.w	r3, r3, #4
 80044ca:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80044ce:	4b52      	ldr	r3, [pc, #328]	; (8004618 <HAL_TIM_Base_MspInit+0x26c>)
 80044d0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80044d4:	f003 0304 	and.w	r3, r3, #4
 80044d8:	623b      	str	r3, [r7, #32]
 80044da:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80044dc:	4b4e      	ldr	r3, [pc, #312]	; (8004618 <HAL_TIM_Base_MspInit+0x26c>)
 80044de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80044e2:	4a4d      	ldr	r2, [pc, #308]	; (8004618 <HAL_TIM_Base_MspInit+0x26c>)
 80044e4:	f043 0308 	orr.w	r3, r3, #8
 80044e8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80044ec:	4b4a      	ldr	r3, [pc, #296]	; (8004618 <HAL_TIM_Base_MspInit+0x26c>)
 80044ee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80044f2:	f003 0308 	and.w	r3, r3, #8
 80044f6:	61fb      	str	r3, [r7, #28]
 80044f8:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = stepFeedback3_Pin;
 80044fa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80044fe:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004500:	2302      	movs	r3, #2
 8004502:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004504:	2300      	movs	r3, #0
 8004506:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004508:	2300      	movs	r3, #0
 800450a:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800450c:	2302      	movs	r3, #2
 800450e:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(stepFeedback3_GPIO_Port, &GPIO_InitStruct);
 8004510:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8004514:	4619      	mov	r1, r3
 8004516:	4844      	ldr	r0, [pc, #272]	; (8004628 <HAL_TIM_Base_MspInit+0x27c>)
 8004518:	f002 fff0 	bl	80074fc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 1, 0);
 800451c:	2200      	movs	r2, #0
 800451e:	2101      	movs	r1, #1
 8004520:	201e      	movs	r0, #30
 8004522:	f002 fa44 	bl	80069ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8004526:	201e      	movs	r0, #30
 8004528:	f002 fa5b 	bl	80069e2 <HAL_NVIC_EnableIRQ>
}
 800452c:	e06f      	b.n	800460e <HAL_TIM_Base_MspInit+0x262>
  else if(tim_baseHandle->Instance==TIM5)
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	4a3e      	ldr	r2, [pc, #248]	; (800462c <HAL_TIM_Base_MspInit+0x280>)
 8004534:	4293      	cmp	r3, r2
 8004536:	d10f      	bne.n	8004558 <HAL_TIM_Base_MspInit+0x1ac>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8004538:	4b37      	ldr	r3, [pc, #220]	; (8004618 <HAL_TIM_Base_MspInit+0x26c>)
 800453a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800453e:	4a36      	ldr	r2, [pc, #216]	; (8004618 <HAL_TIM_Base_MspInit+0x26c>)
 8004540:	f043 0308 	orr.w	r3, r3, #8
 8004544:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8004548:	4b33      	ldr	r3, [pc, #204]	; (8004618 <HAL_TIM_Base_MspInit+0x26c>)
 800454a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800454e:	f003 0308 	and.w	r3, r3, #8
 8004552:	61bb      	str	r3, [r7, #24]
 8004554:	69bb      	ldr	r3, [r7, #24]
}
 8004556:	e05a      	b.n	800460e <HAL_TIM_Base_MspInit+0x262>
  else if(tim_baseHandle->Instance==TIM12)
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	4a34      	ldr	r2, [pc, #208]	; (8004630 <HAL_TIM_Base_MspInit+0x284>)
 800455e:	4293      	cmp	r3, r2
 8004560:	d10f      	bne.n	8004582 <HAL_TIM_Base_MspInit+0x1d6>
    __HAL_RCC_TIM12_CLK_ENABLE();
 8004562:	4b2d      	ldr	r3, [pc, #180]	; (8004618 <HAL_TIM_Base_MspInit+0x26c>)
 8004564:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004568:	4a2b      	ldr	r2, [pc, #172]	; (8004618 <HAL_TIM_Base_MspInit+0x26c>)
 800456a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800456e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8004572:	4b29      	ldr	r3, [pc, #164]	; (8004618 <HAL_TIM_Base_MspInit+0x26c>)
 8004574:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004578:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800457c:	617b      	str	r3, [r7, #20]
 800457e:	697b      	ldr	r3, [r7, #20]
}
 8004580:	e045      	b.n	800460e <HAL_TIM_Base_MspInit+0x262>
  else if(tim_baseHandle->Instance==TIM13)
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	4a2b      	ldr	r2, [pc, #172]	; (8004634 <HAL_TIM_Base_MspInit+0x288>)
 8004588:	4293      	cmp	r3, r2
 800458a:	d10f      	bne.n	80045ac <HAL_TIM_Base_MspInit+0x200>
    __HAL_RCC_TIM13_CLK_ENABLE();
 800458c:	4b22      	ldr	r3, [pc, #136]	; (8004618 <HAL_TIM_Base_MspInit+0x26c>)
 800458e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004592:	4a21      	ldr	r2, [pc, #132]	; (8004618 <HAL_TIM_Base_MspInit+0x26c>)
 8004594:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004598:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800459c:	4b1e      	ldr	r3, [pc, #120]	; (8004618 <HAL_TIM_Base_MspInit+0x26c>)
 800459e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80045a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045a6:	613b      	str	r3, [r7, #16]
 80045a8:	693b      	ldr	r3, [r7, #16]
}
 80045aa:	e030      	b.n	800460e <HAL_TIM_Base_MspInit+0x262>
  else if(tim_baseHandle->Instance==TIM14)
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	4a21      	ldr	r2, [pc, #132]	; (8004638 <HAL_TIM_Base_MspInit+0x28c>)
 80045b2:	4293      	cmp	r3, r2
 80045b4:	d10f      	bne.n	80045d6 <HAL_TIM_Base_MspInit+0x22a>
    __HAL_RCC_TIM14_CLK_ENABLE();
 80045b6:	4b18      	ldr	r3, [pc, #96]	; (8004618 <HAL_TIM_Base_MspInit+0x26c>)
 80045b8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80045bc:	4a16      	ldr	r2, [pc, #88]	; (8004618 <HAL_TIM_Base_MspInit+0x26c>)
 80045be:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80045c2:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80045c6:	4b14      	ldr	r3, [pc, #80]	; (8004618 <HAL_TIM_Base_MspInit+0x26c>)
 80045c8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80045cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045d0:	60fb      	str	r3, [r7, #12]
 80045d2:	68fb      	ldr	r3, [r7, #12]
}
 80045d4:	e01b      	b.n	800460e <HAL_TIM_Base_MspInit+0x262>
  else if(tim_baseHandle->Instance==TIM15)
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	4a18      	ldr	r2, [pc, #96]	; (800463c <HAL_TIM_Base_MspInit+0x290>)
 80045dc:	4293      	cmp	r3, r2
 80045de:	d116      	bne.n	800460e <HAL_TIM_Base_MspInit+0x262>
    __HAL_RCC_TIM15_CLK_ENABLE();
 80045e0:	4b0d      	ldr	r3, [pc, #52]	; (8004618 <HAL_TIM_Base_MspInit+0x26c>)
 80045e2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80045e6:	4a0c      	ldr	r2, [pc, #48]	; (8004618 <HAL_TIM_Base_MspInit+0x26c>)
 80045e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80045ec:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80045f0:	4b09      	ldr	r3, [pc, #36]	; (8004618 <HAL_TIM_Base_MspInit+0x26c>)
 80045f2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80045f6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80045fa:	60bb      	str	r3, [r7, #8]
 80045fc:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM15_IRQn, 1, 0);
 80045fe:	2200      	movs	r2, #0
 8004600:	2101      	movs	r1, #1
 8004602:	2074      	movs	r0, #116	; 0x74
 8004604:	f002 f9d3 	bl	80069ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM15_IRQn);
 8004608:	2074      	movs	r0, #116	; 0x74
 800460a:	f002 f9ea 	bl	80069e2 <HAL_NVIC_EnableIRQ>
}
 800460e:	bf00      	nop
 8004610:	3748      	adds	r7, #72	; 0x48
 8004612:	46bd      	mov	sp, r7
 8004614:	bd80      	pop	{r7, pc}
 8004616:	bf00      	nop
 8004618:	58024400 	.word	0x58024400
 800461c:	58020000 	.word	0x58020000
 8004620:	40000400 	.word	0x40000400
 8004624:	40000800 	.word	0x40000800
 8004628:	58020c00 	.word	0x58020c00
 800462c:	40000c00 	.word	0x40000c00
 8004630:	40001800 	.word	0x40001800
 8004634:	40001c00 	.word	0x40001c00
 8004638:	40002000 	.word	0x40002000
 800463c:	40014000 	.word	0x40014000

08004640 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8004640:	b580      	push	{r7, lr}
 8004642:	b08a      	sub	sp, #40	; 0x28
 8004644:	af00      	add	r7, sp, #0
 8004646:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004648:	f107 0314 	add.w	r3, r7, #20
 800464c:	2200      	movs	r2, #0
 800464e:	601a      	str	r2, [r3, #0]
 8004650:	605a      	str	r2, [r3, #4]
 8004652:	609a      	str	r2, [r3, #8]
 8004654:	60da      	str	r2, [r3, #12]
 8004656:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM12)
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	4a39      	ldr	r2, [pc, #228]	; (8004744 <HAL_TIM_MspPostInit+0x104>)
 800465e:	4293      	cmp	r3, r2
 8004660:	d120      	bne.n	80046a4 <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM12_MspPostInit 0 */

  /* USER CODE END TIM12_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004662:	4b39      	ldr	r3, [pc, #228]	; (8004748 <HAL_TIM_MspPostInit+0x108>)
 8004664:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004668:	4a37      	ldr	r2, [pc, #220]	; (8004748 <HAL_TIM_MspPostInit+0x108>)
 800466a:	f043 0302 	orr.w	r3, r3, #2
 800466e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004672:	4b35      	ldr	r3, [pc, #212]	; (8004748 <HAL_TIM_MspPostInit+0x108>)
 8004674:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004678:	f003 0302 	and.w	r3, r3, #2
 800467c:	613b      	str	r3, [r7, #16]
 800467e:	693b      	ldr	r3, [r7, #16]
    /**TIM12 GPIO Configuration
    PB14     ------> TIM12_CH1
    */
    GPIO_InitStruct.Pin = S_PulsoPaP1_Pin;
 8004680:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004684:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004686:	2302      	movs	r3, #2
 8004688:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800468a:	2300      	movs	r3, #0
 800468c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800468e:	2300      	movs	r3, #0
 8004690:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM12;
 8004692:	2302      	movs	r3, #2
 8004694:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(S_PulsoPaP1_GPIO_Port, &GPIO_InitStruct);
 8004696:	f107 0314 	add.w	r3, r7, #20
 800469a:	4619      	mov	r1, r3
 800469c:	482b      	ldr	r0, [pc, #172]	; (800474c <HAL_TIM_MspPostInit+0x10c>)
 800469e:	f002 ff2d 	bl	80074fc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM14_MspPostInit 1 */

  /* USER CODE END TIM14_MspPostInit 1 */
  }

}
 80046a2:	e04a      	b.n	800473a <HAL_TIM_MspPostInit+0xfa>
  else if(timHandle->Instance==TIM13)
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	4a29      	ldr	r2, [pc, #164]	; (8004750 <HAL_TIM_MspPostInit+0x110>)
 80046aa:	4293      	cmp	r3, r2
 80046ac:	d120      	bne.n	80046f0 <HAL_TIM_MspPostInit+0xb0>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80046ae:	4b26      	ldr	r3, [pc, #152]	; (8004748 <HAL_TIM_MspPostInit+0x108>)
 80046b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80046b4:	4a24      	ldr	r2, [pc, #144]	; (8004748 <HAL_TIM_MspPostInit+0x108>)
 80046b6:	f043 0320 	orr.w	r3, r3, #32
 80046ba:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80046be:	4b22      	ldr	r3, [pc, #136]	; (8004748 <HAL_TIM_MspPostInit+0x108>)
 80046c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80046c4:	f003 0320 	and.w	r3, r3, #32
 80046c8:	60fb      	str	r3, [r7, #12]
 80046ca:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = S_PulsoPaP2_Pin;
 80046cc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80046d0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80046d2:	2302      	movs	r3, #2
 80046d4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80046d6:	2300      	movs	r3, #0
 80046d8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80046da:	2300      	movs	r3, #0
 80046dc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM13;
 80046de:	2309      	movs	r3, #9
 80046e0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(S_PulsoPaP2_GPIO_Port, &GPIO_InitStruct);
 80046e2:	f107 0314 	add.w	r3, r7, #20
 80046e6:	4619      	mov	r1, r3
 80046e8:	481a      	ldr	r0, [pc, #104]	; (8004754 <HAL_TIM_MspPostInit+0x114>)
 80046ea:	f002 ff07 	bl	80074fc <HAL_GPIO_Init>
}
 80046ee:	e024      	b.n	800473a <HAL_TIM_MspPostInit+0xfa>
  else if(timHandle->Instance==TIM14)
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	4a18      	ldr	r2, [pc, #96]	; (8004758 <HAL_TIM_MspPostInit+0x118>)
 80046f6:	4293      	cmp	r3, r2
 80046f8:	d11f      	bne.n	800473a <HAL_TIM_MspPostInit+0xfa>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80046fa:	4b13      	ldr	r3, [pc, #76]	; (8004748 <HAL_TIM_MspPostInit+0x108>)
 80046fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004700:	4a11      	ldr	r2, [pc, #68]	; (8004748 <HAL_TIM_MspPostInit+0x108>)
 8004702:	f043 0320 	orr.w	r3, r3, #32
 8004706:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800470a:	4b0f      	ldr	r3, [pc, #60]	; (8004748 <HAL_TIM_MspPostInit+0x108>)
 800470c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004710:	f003 0320 	and.w	r3, r3, #32
 8004714:	60bb      	str	r3, [r7, #8]
 8004716:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = S_PulsoPaP3_Pin;
 8004718:	f44f 7300 	mov.w	r3, #512	; 0x200
 800471c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800471e:	2302      	movs	r3, #2
 8004720:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004722:	2300      	movs	r3, #0
 8004724:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004726:	2300      	movs	r3, #0
 8004728:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM14;
 800472a:	2309      	movs	r3, #9
 800472c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(S_PulsoPaP3_GPIO_Port, &GPIO_InitStruct);
 800472e:	f107 0314 	add.w	r3, r7, #20
 8004732:	4619      	mov	r1, r3
 8004734:	4807      	ldr	r0, [pc, #28]	; (8004754 <HAL_TIM_MspPostInit+0x114>)
 8004736:	f002 fee1 	bl	80074fc <HAL_GPIO_Init>
}
 800473a:	bf00      	nop
 800473c:	3728      	adds	r7, #40	; 0x28
 800473e:	46bd      	mov	sp, r7
 8004740:	bd80      	pop	{r7, pc}
 8004742:	bf00      	nop
 8004744:	40001800 	.word	0x40001800
 8004748:	58024400 	.word	0x58024400
 800474c:	58020400 	.word	0x58020400
 8004750:	40001c00 	.word	0x40001c00
 8004754:	58021400 	.word	0x58021400
 8004758:	40002000 	.word	0x40002000

0800475c <get_Straj>:
double vlim;
double T,Ta,Td,Tv,Tj1,Tj2,Tj,delta;
double qi,qf;


double get_Straj(double t,double _qi, double _qf ,double *params){
 800475c:	b580      	push	{r7, lr}
 800475e:	ed2d 8b06 	vpush	{d8-d10}
 8004762:	b088      	sub	sp, #32
 8004764:	af00      	add	r7, sp, #0
 8004766:	ed87 0b06 	vstr	d0, [r7, #24]
 800476a:	ed87 1b04 	vstr	d1, [r7, #16]
 800476e:	ed87 2b02 	vstr	d2, [r7, #8]
 8004772:	6078      	str	r0, [r7, #4]

	Tj1 = params[0];
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	e9d3 2300 	ldrd	r2, r3, [r3]
 800477a:	495f      	ldr	r1, [pc, #380]	; (80048f8 <get_Straj+0x19c>)
 800477c:	e9c1 2300 	strd	r2, r3, [r1]
	Tj2 = params[1];
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8004786:	495d      	ldr	r1, [pc, #372]	; (80048fc <get_Straj+0x1a0>)
 8004788:	e9c1 2300 	strd	r2, r3, [r1]
	Tj = params[2];
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8004792:	495b      	ldr	r1, [pc, #364]	; (8004900 <get_Straj+0x1a4>)
 8004794:	e9c1 2300 	strd	r2, r3, [r1]
	Ta = params[3];
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 800479e:	4959      	ldr	r1, [pc, #356]	; (8004904 <get_Straj+0x1a8>)
 80047a0:	e9c1 2300 	strd	r2, r3, [r1]
	Td = params[4];
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80047aa:	4957      	ldr	r1, [pc, #348]	; (8004908 <get_Straj+0x1ac>)
 80047ac:	e9c1 2300 	strd	r2, r3, [r1]
	Tv = params[5];
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 80047b6:	4955      	ldr	r1, [pc, #340]	; (800490c <get_Straj+0x1b0>)
 80047b8:	e9c1 2300 	strd	r2, r3, [r1]
	T = params[6];
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 80047c2:	4953      	ldr	r1, [pc, #332]	; (8004910 <get_Straj+0x1b4>)
 80047c4:	e9c1 2300 	strd	r2, r3, [r1]

	qi=_qi;
 80047c8:	4952      	ldr	r1, [pc, #328]	; (8004914 <get_Straj+0x1b8>)
 80047ca:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80047ce:	e9c1 2300 	strd	r2, r3, [r1]
	qf=_qf;
 80047d2:	4951      	ldr	r1, [pc, #324]	; (8004918 <get_Straj+0x1bc>)
 80047d4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80047d8:	e9c1 2300 	strd	r2, r3, [r1]

    if (qf < qi){
 80047dc:	4b4e      	ldr	r3, [pc, #312]	; (8004918 <get_Straj+0x1bc>)
 80047de:	ed93 6b00 	vldr	d6, [r3]
 80047e2:	4b4c      	ldr	r3, [pc, #304]	; (8004914 <get_Straj+0x1b8>)
 80047e4:	ed93 7b00 	vldr	d7, [r3]
 80047e8:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80047ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80047f0:	f140 80ac 	bpl.w	800494c <get_Straj+0x1f0>

    flagInv = true;
 80047f4:	4b49      	ldr	r3, [pc, #292]	; (800491c <get_Straj+0x1c0>)
 80047f6:	2201      	movs	r2, #1
 80047f8:	701a      	strb	r2, [r3, #0]

    qi = -qi;
 80047fa:	4b46      	ldr	r3, [pc, #280]	; (8004914 <get_Straj+0x1b8>)
 80047fc:	ed93 7b00 	vldr	d7, [r3]
 8004800:	eeb1 7b47 	vneg.f64	d7, d7
 8004804:	4b43      	ldr	r3, [pc, #268]	; (8004914 <get_Straj+0x1b8>)
 8004806:	ed83 7b00 	vstr	d7, [r3]
    qf = -qf;
 800480a:	4b43      	ldr	r3, [pc, #268]	; (8004918 <get_Straj+0x1bc>)
 800480c:	ed93 7b00 	vldr	d7, [r3]
 8004810:	eeb1 7b47 	vneg.f64	d7, d7
 8004814:	4b40      	ldr	r3, [pc, #256]	; (8004918 <get_Straj+0x1bc>)
 8004816:	ed83 7b00 	vstr	d7, [r3]
    vi = -vi;
 800481a:	4b41      	ldr	r3, [pc, #260]	; (8004920 <get_Straj+0x1c4>)
 800481c:	ed93 7b00 	vldr	d7, [r3]
 8004820:	eeb1 7b47 	vneg.f64	d7, d7
 8004824:	4b3e      	ldr	r3, [pc, #248]	; (8004920 <get_Straj+0x1c4>)
 8004826:	ed83 7b00 	vstr	d7, [r3]
    vf = -vf;
 800482a:	4b3e      	ldr	r3, [pc, #248]	; (8004924 <get_Straj+0x1c8>)
 800482c:	ed93 7b00 	vldr	d7, [r3]
 8004830:	eeb1 7b47 	vneg.f64	d7, d7
 8004834:	4b3b      	ldr	r3, [pc, #236]	; (8004924 <get_Straj+0x1c8>)
 8004836:	ed83 7b00 	vstr	d7, [r3]

    vmax = -vmin;
 800483a:	4b3b      	ldr	r3, [pc, #236]	; (8004928 <get_Straj+0x1cc>)
 800483c:	ed93 7b00 	vldr	d7, [r3]
 8004840:	eeb1 7b47 	vneg.f64	d7, d7
 8004844:	4b39      	ldr	r3, [pc, #228]	; (800492c <get_Straj+0x1d0>)
 8004846:	ed83 7b00 	vstr	d7, [r3]
    vmin = -vmax;
 800484a:	4b38      	ldr	r3, [pc, #224]	; (800492c <get_Straj+0x1d0>)
 800484c:	ed93 7b00 	vldr	d7, [r3]
 8004850:	eeb1 7b47 	vneg.f64	d7, d7
 8004854:	4b34      	ldr	r3, [pc, #208]	; (8004928 <get_Straj+0x1cc>)
 8004856:	ed83 7b00 	vstr	d7, [r3]
    amax = -amin;
 800485a:	4b35      	ldr	r3, [pc, #212]	; (8004930 <get_Straj+0x1d4>)
 800485c:	ed93 7b00 	vldr	d7, [r3]
 8004860:	eeb1 7b47 	vneg.f64	d7, d7
 8004864:	4b33      	ldr	r3, [pc, #204]	; (8004934 <get_Straj+0x1d8>)
 8004866:	ed83 7b00 	vstr	d7, [r3]
    amin = -amax;
 800486a:	4b32      	ldr	r3, [pc, #200]	; (8004934 <get_Straj+0x1d8>)
 800486c:	ed93 7b00 	vldr	d7, [r3]
 8004870:	eeb1 7b47 	vneg.f64	d7, d7
 8004874:	4b2e      	ldr	r3, [pc, #184]	; (8004930 <get_Straj+0x1d4>)
 8004876:	ed83 7b00 	vstr	d7, [r3]
    jmax = -jmin;
 800487a:	4b2f      	ldr	r3, [pc, #188]	; (8004938 <get_Straj+0x1dc>)
 800487c:	ed93 7b00 	vldr	d7, [r3]
 8004880:	eeb1 7b47 	vneg.f64	d7, d7
 8004884:	4b2d      	ldr	r3, [pc, #180]	; (800493c <get_Straj+0x1e0>)
 8004886:	ed83 7b00 	vstr	d7, [r3]
    jmin = -jmax;
 800488a:	4b2c      	ldr	r3, [pc, #176]	; (800493c <get_Straj+0x1e0>)
 800488c:	ed93 7b00 	vldr	d7, [r3]
 8004890:	eeb1 7b47 	vneg.f64	d7, d7
 8004894:	4b28      	ldr	r3, [pc, #160]	; (8004938 <get_Straj+0x1dc>)
 8004896:	ed83 7b00 	vstr	d7, [r3]

    alima = jmax*Tj1;
 800489a:	4b28      	ldr	r3, [pc, #160]	; (800493c <get_Straj+0x1e0>)
 800489c:	ed93 6b00 	vldr	d6, [r3]
 80048a0:	4b15      	ldr	r3, [pc, #84]	; (80048f8 <get_Straj+0x19c>)
 80048a2:	ed93 7b00 	vldr	d7, [r3]
 80048a6:	ee26 7b07 	vmul.f64	d7, d6, d7
 80048aa:	4b25      	ldr	r3, [pc, #148]	; (8004940 <get_Straj+0x1e4>)
 80048ac:	ed83 7b00 	vstr	d7, [r3]
    alimd = -jmax*Tj2;
 80048b0:	4b22      	ldr	r3, [pc, #136]	; (800493c <get_Straj+0x1e0>)
 80048b2:	ed93 7b00 	vldr	d7, [r3]
 80048b6:	eeb1 6b47 	vneg.f64	d6, d7
 80048ba:	4b10      	ldr	r3, [pc, #64]	; (80048fc <get_Straj+0x1a0>)
 80048bc:	ed93 7b00 	vldr	d7, [r3]
 80048c0:	ee26 7b07 	vmul.f64	d7, d6, d7
 80048c4:	4b1f      	ldr	r3, [pc, #124]	; (8004944 <get_Straj+0x1e8>)
 80048c6:	ed83 7b00 	vstr	d7, [r3]
    vlim = vi+(Ta-Tj1)*alima;
 80048ca:	4b0e      	ldr	r3, [pc, #56]	; (8004904 <get_Straj+0x1a8>)
 80048cc:	ed93 6b00 	vldr	d6, [r3]
 80048d0:	4b09      	ldr	r3, [pc, #36]	; (80048f8 <get_Straj+0x19c>)
 80048d2:	ed93 7b00 	vldr	d7, [r3]
 80048d6:	ee36 6b47 	vsub.f64	d6, d6, d7
 80048da:	4b19      	ldr	r3, [pc, #100]	; (8004940 <get_Straj+0x1e4>)
 80048dc:	ed93 7b00 	vldr	d7, [r3]
 80048e0:	ee26 6b07 	vmul.f64	d6, d6, d7
 80048e4:	4b0e      	ldr	r3, [pc, #56]	; (8004920 <get_Straj+0x1c4>)
 80048e6:	ed93 7b00 	vldr	d7, [r3]
 80048ea:	ee36 7b07 	vadd.f64	d7, d6, d7
 80048ee:	4b16      	ldr	r3, [pc, #88]	; (8004948 <get_Straj+0x1ec>)
 80048f0:	ed83 7b00 	vstr	d7, [r3]
 80048f4:	e06f      	b.n	80049d6 <get_Straj+0x27a>
 80048f6:	bf00      	nop
 80048f8:	240008b8 	.word	0x240008b8
 80048fc:	240008c0 	.word	0x240008c0
 8004900:	240008c8 	.word	0x240008c8
 8004904:	240008a0 	.word	0x240008a0
 8004908:	240008a8 	.word	0x240008a8
 800490c:	240008b0 	.word	0x240008b0
 8004910:	24000898 	.word	0x24000898
 8004914:	240008d8 	.word	0x240008d8
 8004918:	240008e0 	.word	0x240008e0
 800491c:	24000878 	.word	0x24000878
 8004920:	24000018 	.word	0x24000018
 8004924:	24000498 	.word	0x24000498
 8004928:	24000490 	.word	0x24000490
 800492c:	24000010 	.word	0x24000010
 8004930:	240004a0 	.word	0x240004a0
 8004934:	24000020 	.word	0x24000020
 8004938:	24000488 	.word	0x24000488
 800493c:	24000008 	.word	0x24000008
 8004940:	24000880 	.word	0x24000880
 8004944:	24000888 	.word	0x24000888
 8004948:	24000890 	.word	0x24000890

    }else{
        jmin = -jmax;
 800494c:	4bbc      	ldr	r3, [pc, #752]	; (8004c40 <get_Straj+0x4e4>)
 800494e:	ed93 7b00 	vldr	d7, [r3]
 8004952:	eeb1 7b47 	vneg.f64	d7, d7
 8004956:	4bbb      	ldr	r3, [pc, #748]	; (8004c44 <get_Straj+0x4e8>)
 8004958:	ed83 7b00 	vstr	d7, [r3]
        amin = -amax;
 800495c:	4bba      	ldr	r3, [pc, #744]	; (8004c48 <get_Straj+0x4ec>)
 800495e:	ed93 7b00 	vldr	d7, [r3]
 8004962:	eeb1 7b47 	vneg.f64	d7, d7
 8004966:	4bb9      	ldr	r3, [pc, #740]	; (8004c4c <get_Straj+0x4f0>)
 8004968:	ed83 7b00 	vstr	d7, [r3]
        vmin = -vmax;
 800496c:	4bb8      	ldr	r3, [pc, #736]	; (8004c50 <get_Straj+0x4f4>)
 800496e:	ed93 7b00 	vldr	d7, [r3]
 8004972:	eeb1 7b47 	vneg.f64	d7, d7
 8004976:	4bb7      	ldr	r3, [pc, #732]	; (8004c54 <get_Straj+0x4f8>)
 8004978:	ed83 7b00 	vstr	d7, [r3]

        alima = jmax*Tj1;
 800497c:	4bb0      	ldr	r3, [pc, #704]	; (8004c40 <get_Straj+0x4e4>)
 800497e:	ed93 6b00 	vldr	d6, [r3]
 8004982:	4bb5      	ldr	r3, [pc, #724]	; (8004c58 <get_Straj+0x4fc>)
 8004984:	ed93 7b00 	vldr	d7, [r3]
 8004988:	ee26 7b07 	vmul.f64	d7, d6, d7
 800498c:	4bb3      	ldr	r3, [pc, #716]	; (8004c5c <get_Straj+0x500>)
 800498e:	ed83 7b00 	vstr	d7, [r3]
        alimd = -jmax*Tj2;
 8004992:	4bab      	ldr	r3, [pc, #684]	; (8004c40 <get_Straj+0x4e4>)
 8004994:	ed93 7b00 	vldr	d7, [r3]
 8004998:	eeb1 6b47 	vneg.f64	d6, d7
 800499c:	4bb0      	ldr	r3, [pc, #704]	; (8004c60 <get_Straj+0x504>)
 800499e:	ed93 7b00 	vldr	d7, [r3]
 80049a2:	ee26 7b07 	vmul.f64	d7, d6, d7
 80049a6:	4baf      	ldr	r3, [pc, #700]	; (8004c64 <get_Straj+0x508>)
 80049a8:	ed83 7b00 	vstr	d7, [r3]
        vlim = vi+(Ta-Tj1)*alima;
 80049ac:	4bae      	ldr	r3, [pc, #696]	; (8004c68 <get_Straj+0x50c>)
 80049ae:	ed93 6b00 	vldr	d6, [r3]
 80049b2:	4ba9      	ldr	r3, [pc, #676]	; (8004c58 <get_Straj+0x4fc>)
 80049b4:	ed93 7b00 	vldr	d7, [r3]
 80049b8:	ee36 6b47 	vsub.f64	d6, d6, d7
 80049bc:	4ba7      	ldr	r3, [pc, #668]	; (8004c5c <get_Straj+0x500>)
 80049be:	ed93 7b00 	vldr	d7, [r3]
 80049c2:	ee26 6b07 	vmul.f64	d6, d6, d7
 80049c6:	4ba9      	ldr	r3, [pc, #676]	; (8004c6c <get_Straj+0x510>)
 80049c8:	ed93 7b00 	vldr	d7, [r3]
 80049cc:	ee36 7b07 	vadd.f64	d7, d6, d7
 80049d0:	4ba7      	ldr	r3, [pc, #668]	; (8004c70 <get_Straj+0x514>)
 80049d2:	ed83 7b00 	vstr	d7, [r3]
    }


    //#Acceleration phase

    if (t>=0 && t<=Tj1){               //a) [0,Tj1]
 80049d6:	ed97 7b06 	vldr	d7, [r7, #24]
 80049da:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80049de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80049e2:	db7e      	blt.n	8004ae2 <get_Straj+0x386>
 80049e4:	4b9c      	ldr	r3, [pc, #624]	; (8004c58 <get_Straj+0x4fc>)
 80049e6:	ed93 7b00 	vldr	d7, [r3]
 80049ea:	ed97 6b06 	vldr	d6, [r7, #24]
 80049ee:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80049f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80049f6:	d874      	bhi.n	8004ae2 <get_Straj+0x386>
        //printf("tramo1\n");
        q = qi+vi*t+jmax*pow(t,3)/6;
 80049f8:	4b9c      	ldr	r3, [pc, #624]	; (8004c6c <get_Straj+0x510>)
 80049fa:	ed93 6b00 	vldr	d6, [r3]
 80049fe:	ed97 7b06 	vldr	d7, [r7, #24]
 8004a02:	ee26 6b07 	vmul.f64	d6, d6, d7
 8004a06:	4b9b      	ldr	r3, [pc, #620]	; (8004c74 <get_Straj+0x518>)
 8004a08:	ed93 7b00 	vldr	d7, [r3]
 8004a0c:	ee36 8b07 	vadd.f64	d8, d6, d7
 8004a10:	eeb0 1b08 	vmov.f64	d1, #8	; 0x40400000  3.0
 8004a14:	ed97 0b06 	vldr	d0, [r7, #24]
 8004a18:	f00c ffb6 	bl	8011988 <pow>
 8004a1c:	eeb0 6b40 	vmov.f64	d6, d0
 8004a20:	4b87      	ldr	r3, [pc, #540]	; (8004c40 <get_Straj+0x4e4>)
 8004a22:	ed93 7b00 	vldr	d7, [r3]
 8004a26:	ee26 6b07 	vmul.f64	d6, d6, d7
 8004a2a:	eeb1 5b08 	vmov.f64	d5, #24	; 0x40c00000  6.0
 8004a2e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8004a32:	ee38 7b07 	vadd.f64	d7, d8, d7
 8004a36:	4b90      	ldr	r3, [pc, #576]	; (8004c78 <get_Straj+0x51c>)
 8004a38:	ed83 7b00 	vstr	d7, [r3]
        qd = vi+jmax*pow(t,2)/2;
 8004a3c:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8004a40:	ed97 0b06 	vldr	d0, [r7, #24]
 8004a44:	f00c ffa0 	bl	8011988 <pow>
 8004a48:	eeb0 6b40 	vmov.f64	d6, d0
 8004a4c:	4b7c      	ldr	r3, [pc, #496]	; (8004c40 <get_Straj+0x4e4>)
 8004a4e:	ed93 7b00 	vldr	d7, [r3]
 8004a52:	ee26 7b07 	vmul.f64	d7, d6, d7
 8004a56:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8004a5a:	ee87 6b05 	vdiv.f64	d6, d7, d5
 8004a5e:	4b83      	ldr	r3, [pc, #524]	; (8004c6c <get_Straj+0x510>)
 8004a60:	ed93 7b00 	vldr	d7, [r3]
 8004a64:	ee36 7b07 	vadd.f64	d7, d6, d7
 8004a68:	4b84      	ldr	r3, [pc, #528]	; (8004c7c <get_Straj+0x520>)
 8004a6a:	ed83 7b00 	vstr	d7, [r3]
        qdd = jmax*t;
 8004a6e:	4b74      	ldr	r3, [pc, #464]	; (8004c40 <get_Straj+0x4e4>)
 8004a70:	ed93 6b00 	vldr	d6, [r3]
 8004a74:	ed97 7b06 	vldr	d7, [r7, #24]
 8004a78:	ee26 7b07 	vmul.f64	d7, d6, d7
 8004a7c:	4b80      	ldr	r3, [pc, #512]	; (8004c80 <get_Straj+0x524>)
 8004a7e:	ed83 7b00 	vstr	d7, [r3]
        qddd = jmax;
 8004a82:	4b6f      	ldr	r3, [pc, #444]	; (8004c40 <get_Straj+0x4e4>)
 8004a84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a88:	497e      	ldr	r1, [pc, #504]	; (8004c84 <get_Straj+0x528>)
 8004a8a:	e9c1 2300 	strd	r2, r3, [r1]
        if (flagInv){
 8004a8e:	4b7e      	ldr	r3, [pc, #504]	; (8004c88 <get_Straj+0x52c>)
 8004a90:	781b      	ldrb	r3, [r3, #0]
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	f000 84f9 	beq.w	800548a <get_Straj+0xd2e>
            q=-q; qd=-qd; qdd=-qdd; qddd=-qddd;
 8004a98:	4b77      	ldr	r3, [pc, #476]	; (8004c78 <get_Straj+0x51c>)
 8004a9a:	ed93 7b00 	vldr	d7, [r3]
 8004a9e:	eeb1 7b47 	vneg.f64	d7, d7
 8004aa2:	4b75      	ldr	r3, [pc, #468]	; (8004c78 <get_Straj+0x51c>)
 8004aa4:	ed83 7b00 	vstr	d7, [r3]
 8004aa8:	4b74      	ldr	r3, [pc, #464]	; (8004c7c <get_Straj+0x520>)
 8004aaa:	ed93 7b00 	vldr	d7, [r3]
 8004aae:	eeb1 7b47 	vneg.f64	d7, d7
 8004ab2:	4b72      	ldr	r3, [pc, #456]	; (8004c7c <get_Straj+0x520>)
 8004ab4:	ed83 7b00 	vstr	d7, [r3]
 8004ab8:	4b71      	ldr	r3, [pc, #452]	; (8004c80 <get_Straj+0x524>)
 8004aba:	ed93 7b00 	vldr	d7, [r3]
 8004abe:	eeb1 7b47 	vneg.f64	d7, d7
 8004ac2:	4b6f      	ldr	r3, [pc, #444]	; (8004c80 <get_Straj+0x524>)
 8004ac4:	ed83 7b00 	vstr	d7, [r3]
 8004ac8:	4b6e      	ldr	r3, [pc, #440]	; (8004c84 <get_Straj+0x528>)
 8004aca:	ed93 7b00 	vldr	d7, [r3]
 8004ace:	eeb1 7b47 	vneg.f64	d7, d7
 8004ad2:	4b6c      	ldr	r3, [pc, #432]	; (8004c84 <get_Straj+0x528>)
 8004ad4:	ed83 7b00 	vstr	d7, [r3]
            flagInv = false;
 8004ad8:	4b6b      	ldr	r3, [pc, #428]	; (8004c88 <get_Straj+0x52c>)
 8004ada:	2200      	movs	r2, #0
 8004adc:	701a      	strb	r2, [r3, #0]
        if (flagInv){
 8004ade:	f000 bcd4 	b.w	800548a <get_Straj+0xd2e>
        }

    } else if (t>Tj1 && t<=Ta-Tj1){   //b) [Tj1,Ta-Tj1]
 8004ae2:	4b5d      	ldr	r3, [pc, #372]	; (8004c58 <get_Straj+0x4fc>)
 8004ae4:	ed93 7b00 	vldr	d7, [r3]
 8004ae8:	ed97 6b06 	vldr	d6, [r7, #24]
 8004aec:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8004af0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004af4:	f340 80ca 	ble.w	8004c8c <get_Straj+0x530>
 8004af8:	4b5b      	ldr	r3, [pc, #364]	; (8004c68 <get_Straj+0x50c>)
 8004afa:	ed93 6b00 	vldr	d6, [r3]
 8004afe:	4b56      	ldr	r3, [pc, #344]	; (8004c58 <get_Straj+0x4fc>)
 8004b00:	ed93 7b00 	vldr	d7, [r3]
 8004b04:	ee36 7b47 	vsub.f64	d7, d6, d7
 8004b08:	ed97 6b06 	vldr	d6, [r7, #24]
 8004b0c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8004b10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b14:	f200 80ba 	bhi.w	8004c8c <get_Straj+0x530>
        //printf("tramo2\n");
        q = qi+vi*t+(alima/6)*(3*pow(t,2)-3*Tj1*t+pow(Tj1,2));
 8004b18:	4b54      	ldr	r3, [pc, #336]	; (8004c6c <get_Straj+0x510>)
 8004b1a:	ed93 6b00 	vldr	d6, [r3]
 8004b1e:	ed97 7b06 	vldr	d7, [r7, #24]
 8004b22:	ee26 6b07 	vmul.f64	d6, d6, d7
 8004b26:	4b53      	ldr	r3, [pc, #332]	; (8004c74 <get_Straj+0x518>)
 8004b28:	ed93 7b00 	vldr	d7, [r3]
 8004b2c:	ee36 8b07 	vadd.f64	d8, d6, d7
 8004b30:	4b4a      	ldr	r3, [pc, #296]	; (8004c5c <get_Straj+0x500>)
 8004b32:	ed93 7b00 	vldr	d7, [r3]
 8004b36:	eeb1 6b08 	vmov.f64	d6, #24	; 0x40c00000  6.0
 8004b3a:	ee87 9b06 	vdiv.f64	d9, d7, d6
 8004b3e:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8004b42:	ed97 0b06 	vldr	d0, [r7, #24]
 8004b46:	f00c ff1f 	bl	8011988 <pow>
 8004b4a:	eeb0 7b40 	vmov.f64	d7, d0
 8004b4e:	eeb0 6b08 	vmov.f64	d6, #8	; 0x40400000  3.0
 8004b52:	ee27 6b06 	vmul.f64	d6, d7, d6
 8004b56:	4b40      	ldr	r3, [pc, #256]	; (8004c58 <get_Straj+0x4fc>)
 8004b58:	ed93 7b00 	vldr	d7, [r3]
 8004b5c:	eeb0 5b08 	vmov.f64	d5, #8	; 0x40400000  3.0
 8004b60:	ee27 5b05 	vmul.f64	d5, d7, d5
 8004b64:	ed97 7b06 	vldr	d7, [r7, #24]
 8004b68:	ee25 7b07 	vmul.f64	d7, d5, d7
 8004b6c:	ee36 ab47 	vsub.f64	d10, d6, d7
 8004b70:	4b39      	ldr	r3, [pc, #228]	; (8004c58 <get_Straj+0x4fc>)
 8004b72:	ed93 7b00 	vldr	d7, [r3]
 8004b76:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8004b7a:	eeb0 0b47 	vmov.f64	d0, d7
 8004b7e:	f00c ff03 	bl	8011988 <pow>
 8004b82:	eeb0 7b40 	vmov.f64	d7, d0
 8004b86:	ee3a 7b07 	vadd.f64	d7, d10, d7
 8004b8a:	ee29 7b07 	vmul.f64	d7, d9, d7
 8004b8e:	ee38 7b07 	vadd.f64	d7, d8, d7
 8004b92:	4b39      	ldr	r3, [pc, #228]	; (8004c78 <get_Straj+0x51c>)
 8004b94:	ed83 7b00 	vstr	d7, [r3]
        qd = vi+alima*(t-Tj1/2);
 8004b98:	4b2f      	ldr	r3, [pc, #188]	; (8004c58 <get_Straj+0x4fc>)
 8004b9a:	ed93 6b00 	vldr	d6, [r3]
 8004b9e:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8004ba2:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8004ba6:	ed97 6b06 	vldr	d6, [r7, #24]
 8004baa:	ee36 6b47 	vsub.f64	d6, d6, d7
 8004bae:	4b2b      	ldr	r3, [pc, #172]	; (8004c5c <get_Straj+0x500>)
 8004bb0:	ed93 7b00 	vldr	d7, [r3]
 8004bb4:	ee26 6b07 	vmul.f64	d6, d6, d7
 8004bb8:	4b2c      	ldr	r3, [pc, #176]	; (8004c6c <get_Straj+0x510>)
 8004bba:	ed93 7b00 	vldr	d7, [r3]
 8004bbe:	ee36 7b07 	vadd.f64	d7, d6, d7
 8004bc2:	4b2e      	ldr	r3, [pc, #184]	; (8004c7c <get_Straj+0x520>)
 8004bc4:	ed83 7b00 	vstr	d7, [r3]
        qdd = jmax*Tj1;
 8004bc8:	4b1d      	ldr	r3, [pc, #116]	; (8004c40 <get_Straj+0x4e4>)
 8004bca:	ed93 6b00 	vldr	d6, [r3]
 8004bce:	4b22      	ldr	r3, [pc, #136]	; (8004c58 <get_Straj+0x4fc>)
 8004bd0:	ed93 7b00 	vldr	d7, [r3]
 8004bd4:	ee26 7b07 	vmul.f64	d7, d6, d7
 8004bd8:	4b29      	ldr	r3, [pc, #164]	; (8004c80 <get_Straj+0x524>)
 8004bda:	ed83 7b00 	vstr	d7, [r3]
        qddd = 0;
 8004bde:	4929      	ldr	r1, [pc, #164]	; (8004c84 <get_Straj+0x528>)
 8004be0:	f04f 0200 	mov.w	r2, #0
 8004be4:	f04f 0300 	mov.w	r3, #0
 8004be8:	e9c1 2300 	strd	r2, r3, [r1]

        if (flagInv){
 8004bec:	4b26      	ldr	r3, [pc, #152]	; (8004c88 <get_Straj+0x52c>)
 8004bee:	781b      	ldrb	r3, [r3, #0]
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	f000 844a 	beq.w	800548a <get_Straj+0xd2e>
            q=-q; qd=-qd; qdd=-qdd; qddd=-qddd;
 8004bf6:	4b20      	ldr	r3, [pc, #128]	; (8004c78 <get_Straj+0x51c>)
 8004bf8:	ed93 7b00 	vldr	d7, [r3]
 8004bfc:	eeb1 7b47 	vneg.f64	d7, d7
 8004c00:	4b1d      	ldr	r3, [pc, #116]	; (8004c78 <get_Straj+0x51c>)
 8004c02:	ed83 7b00 	vstr	d7, [r3]
 8004c06:	4b1d      	ldr	r3, [pc, #116]	; (8004c7c <get_Straj+0x520>)
 8004c08:	ed93 7b00 	vldr	d7, [r3]
 8004c0c:	eeb1 7b47 	vneg.f64	d7, d7
 8004c10:	4b1a      	ldr	r3, [pc, #104]	; (8004c7c <get_Straj+0x520>)
 8004c12:	ed83 7b00 	vstr	d7, [r3]
 8004c16:	4b1a      	ldr	r3, [pc, #104]	; (8004c80 <get_Straj+0x524>)
 8004c18:	ed93 7b00 	vldr	d7, [r3]
 8004c1c:	eeb1 7b47 	vneg.f64	d7, d7
 8004c20:	4b17      	ldr	r3, [pc, #92]	; (8004c80 <get_Straj+0x524>)
 8004c22:	ed83 7b00 	vstr	d7, [r3]
 8004c26:	4b17      	ldr	r3, [pc, #92]	; (8004c84 <get_Straj+0x528>)
 8004c28:	ed93 7b00 	vldr	d7, [r3]
 8004c2c:	eeb1 7b47 	vneg.f64	d7, d7
 8004c30:	4b14      	ldr	r3, [pc, #80]	; (8004c84 <get_Straj+0x528>)
 8004c32:	ed83 7b00 	vstr	d7, [r3]
            flagInv = false;
 8004c36:	4b14      	ldr	r3, [pc, #80]	; (8004c88 <get_Straj+0x52c>)
 8004c38:	2200      	movs	r2, #0
 8004c3a:	701a      	strb	r2, [r3, #0]
        if (flagInv){
 8004c3c:	f000 bc25 	b.w	800548a <get_Straj+0xd2e>
 8004c40:	24000008 	.word	0x24000008
 8004c44:	24000488 	.word	0x24000488
 8004c48:	24000020 	.word	0x24000020
 8004c4c:	240004a0 	.word	0x240004a0
 8004c50:	24000010 	.word	0x24000010
 8004c54:	24000490 	.word	0x24000490
 8004c58:	240008b8 	.word	0x240008b8
 8004c5c:	24000880 	.word	0x24000880
 8004c60:	240008c0 	.word	0x240008c0
 8004c64:	24000888 	.word	0x24000888
 8004c68:	240008a0 	.word	0x240008a0
 8004c6c:	24000018 	.word	0x24000018
 8004c70:	24000890 	.word	0x24000890
 8004c74:	240008d8 	.word	0x240008d8
 8004c78:	24000468 	.word	0x24000468
 8004c7c:	24000470 	.word	0x24000470
 8004c80:	24000478 	.word	0x24000478
 8004c84:	24000480 	.word	0x24000480
 8004c88:	24000878 	.word	0x24000878
        }

    } else if (t>Ta-Tj1 && t<=Ta){    //c) [Ta-Tj1,Ta]
 8004c8c:	4b9c      	ldr	r3, [pc, #624]	; (8004f00 <get_Straj+0x7a4>)
 8004c8e:	ed93 6b00 	vldr	d6, [r3]
 8004c92:	4b9c      	ldr	r3, [pc, #624]	; (8004f04 <get_Straj+0x7a8>)
 8004c94:	ed93 7b00 	vldr	d7, [r3]
 8004c98:	ee36 7b47 	vsub.f64	d7, d6, d7
 8004c9c:	ed97 6b06 	vldr	d6, [r7, #24]
 8004ca0:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8004ca4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004ca8:	f340 80ac 	ble.w	8004e04 <get_Straj+0x6a8>
 8004cac:	4b94      	ldr	r3, [pc, #592]	; (8004f00 <get_Straj+0x7a4>)
 8004cae:	ed93 7b00 	vldr	d7, [r3]
 8004cb2:	ed97 6b06 	vldr	d6, [r7, #24]
 8004cb6:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8004cba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004cbe:	f200 80a1 	bhi.w	8004e04 <get_Straj+0x6a8>
        //printf("tramo3\n");
        q = qi+(vlim+vi)*Ta/2-vlim*(Ta-t)-jmin*pow(Ta-t,3)/6;
 8004cc2:	4b91      	ldr	r3, [pc, #580]	; (8004f08 <get_Straj+0x7ac>)
 8004cc4:	ed93 6b00 	vldr	d6, [r3]
 8004cc8:	4b90      	ldr	r3, [pc, #576]	; (8004f0c <get_Straj+0x7b0>)
 8004cca:	ed93 7b00 	vldr	d7, [r3]
 8004cce:	ee36 6b07 	vadd.f64	d6, d6, d7
 8004cd2:	4b8b      	ldr	r3, [pc, #556]	; (8004f00 <get_Straj+0x7a4>)
 8004cd4:	ed93 7b00 	vldr	d7, [r3]
 8004cd8:	ee26 7b07 	vmul.f64	d7, d6, d7
 8004cdc:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8004ce0:	ee87 6b05 	vdiv.f64	d6, d7, d5
 8004ce4:	4b8a      	ldr	r3, [pc, #552]	; (8004f10 <get_Straj+0x7b4>)
 8004ce6:	ed93 7b00 	vldr	d7, [r3]
 8004cea:	ee36 6b07 	vadd.f64	d6, d6, d7
 8004cee:	4b84      	ldr	r3, [pc, #528]	; (8004f00 <get_Straj+0x7a4>)
 8004cf0:	ed93 5b00 	vldr	d5, [r3]
 8004cf4:	ed97 7b06 	vldr	d7, [r7, #24]
 8004cf8:	ee35 5b47 	vsub.f64	d5, d5, d7
 8004cfc:	4b82      	ldr	r3, [pc, #520]	; (8004f08 <get_Straj+0x7ac>)
 8004cfe:	ed93 7b00 	vldr	d7, [r3]
 8004d02:	ee25 7b07 	vmul.f64	d7, d5, d7
 8004d06:	ee36 8b47 	vsub.f64	d8, d6, d7
 8004d0a:	4b7d      	ldr	r3, [pc, #500]	; (8004f00 <get_Straj+0x7a4>)
 8004d0c:	ed93 6b00 	vldr	d6, [r3]
 8004d10:	ed97 7b06 	vldr	d7, [r7, #24]
 8004d14:	ee36 7b47 	vsub.f64	d7, d6, d7
 8004d18:	eeb0 1b08 	vmov.f64	d1, #8	; 0x40400000  3.0
 8004d1c:	eeb0 0b47 	vmov.f64	d0, d7
 8004d20:	f00c fe32 	bl	8011988 <pow>
 8004d24:	eeb0 6b40 	vmov.f64	d6, d0
 8004d28:	4b7a      	ldr	r3, [pc, #488]	; (8004f14 <get_Straj+0x7b8>)
 8004d2a:	ed93 7b00 	vldr	d7, [r3]
 8004d2e:	ee26 6b07 	vmul.f64	d6, d6, d7
 8004d32:	eeb1 5b08 	vmov.f64	d5, #24	; 0x40c00000  6.0
 8004d36:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8004d3a:	ee38 7b47 	vsub.f64	d7, d8, d7
 8004d3e:	4b76      	ldr	r3, [pc, #472]	; (8004f18 <get_Straj+0x7bc>)
 8004d40:	ed83 7b00 	vstr	d7, [r3]
        qd = vlim+jmin*pow(Ta-t,2)/2;
 8004d44:	4b6e      	ldr	r3, [pc, #440]	; (8004f00 <get_Straj+0x7a4>)
 8004d46:	ed93 6b00 	vldr	d6, [r3]
 8004d4a:	ed97 7b06 	vldr	d7, [r7, #24]
 8004d4e:	ee36 7b47 	vsub.f64	d7, d6, d7
 8004d52:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8004d56:	eeb0 0b47 	vmov.f64	d0, d7
 8004d5a:	f00c fe15 	bl	8011988 <pow>
 8004d5e:	eeb0 6b40 	vmov.f64	d6, d0
 8004d62:	4b6c      	ldr	r3, [pc, #432]	; (8004f14 <get_Straj+0x7b8>)
 8004d64:	ed93 7b00 	vldr	d7, [r3]
 8004d68:	ee26 7b07 	vmul.f64	d7, d6, d7
 8004d6c:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8004d70:	ee87 6b05 	vdiv.f64	d6, d7, d5
 8004d74:	4b64      	ldr	r3, [pc, #400]	; (8004f08 <get_Straj+0x7ac>)
 8004d76:	ed93 7b00 	vldr	d7, [r3]
 8004d7a:	ee36 7b07 	vadd.f64	d7, d6, d7
 8004d7e:	4b67      	ldr	r3, [pc, #412]	; (8004f1c <get_Straj+0x7c0>)
 8004d80:	ed83 7b00 	vstr	d7, [r3]
        qdd = -jmin*(Ta-t);
 8004d84:	4b63      	ldr	r3, [pc, #396]	; (8004f14 <get_Straj+0x7b8>)
 8004d86:	ed93 7b00 	vldr	d7, [r3]
 8004d8a:	eeb1 6b47 	vneg.f64	d6, d7
 8004d8e:	4b5c      	ldr	r3, [pc, #368]	; (8004f00 <get_Straj+0x7a4>)
 8004d90:	ed93 5b00 	vldr	d5, [r3]
 8004d94:	ed97 7b06 	vldr	d7, [r7, #24]
 8004d98:	ee35 7b47 	vsub.f64	d7, d5, d7
 8004d9c:	ee26 7b07 	vmul.f64	d7, d6, d7
 8004da0:	4b5f      	ldr	r3, [pc, #380]	; (8004f20 <get_Straj+0x7c4>)
 8004da2:	ed83 7b00 	vstr	d7, [r3]
        qddd = jmin;
 8004da6:	4b5b      	ldr	r3, [pc, #364]	; (8004f14 <get_Straj+0x7b8>)
 8004da8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004dac:	495d      	ldr	r1, [pc, #372]	; (8004f24 <get_Straj+0x7c8>)
 8004dae:	e9c1 2300 	strd	r2, r3, [r1]
        if (flagInv){
 8004db2:	4b5d      	ldr	r3, [pc, #372]	; (8004f28 <get_Straj+0x7cc>)
 8004db4:	781b      	ldrb	r3, [r3, #0]
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	f000 8367 	beq.w	800548a <get_Straj+0xd2e>
            q=-q; qd=-qd; qdd=-qdd; qddd=-qddd;
 8004dbc:	4b56      	ldr	r3, [pc, #344]	; (8004f18 <get_Straj+0x7bc>)
 8004dbe:	ed93 7b00 	vldr	d7, [r3]
 8004dc2:	eeb1 7b47 	vneg.f64	d7, d7
 8004dc6:	4b54      	ldr	r3, [pc, #336]	; (8004f18 <get_Straj+0x7bc>)
 8004dc8:	ed83 7b00 	vstr	d7, [r3]
 8004dcc:	4b53      	ldr	r3, [pc, #332]	; (8004f1c <get_Straj+0x7c0>)
 8004dce:	ed93 7b00 	vldr	d7, [r3]
 8004dd2:	eeb1 7b47 	vneg.f64	d7, d7
 8004dd6:	4b51      	ldr	r3, [pc, #324]	; (8004f1c <get_Straj+0x7c0>)
 8004dd8:	ed83 7b00 	vstr	d7, [r3]
 8004ddc:	4b50      	ldr	r3, [pc, #320]	; (8004f20 <get_Straj+0x7c4>)
 8004dde:	ed93 7b00 	vldr	d7, [r3]
 8004de2:	eeb1 7b47 	vneg.f64	d7, d7
 8004de6:	4b4e      	ldr	r3, [pc, #312]	; (8004f20 <get_Straj+0x7c4>)
 8004de8:	ed83 7b00 	vstr	d7, [r3]
 8004dec:	4b4d      	ldr	r3, [pc, #308]	; (8004f24 <get_Straj+0x7c8>)
 8004dee:	ed93 7b00 	vldr	d7, [r3]
 8004df2:	eeb1 7b47 	vneg.f64	d7, d7
 8004df6:	4b4b      	ldr	r3, [pc, #300]	; (8004f24 <get_Straj+0x7c8>)
 8004df8:	ed83 7b00 	vstr	d7, [r3]
            flagInv = false;
 8004dfc:	4b4a      	ldr	r3, [pc, #296]	; (8004f28 <get_Straj+0x7cc>)
 8004dfe:	2200      	movs	r2, #0
 8004e00:	701a      	strb	r2, [r3, #0]
        if (flagInv){
 8004e02:	e342      	b.n	800548a <get_Straj+0xd2e>
        }
    }

    /*-------------Constant phase ----------------*/
    else if (t>Ta && t<=Ta+Tv){
 8004e04:	4b3e      	ldr	r3, [pc, #248]	; (8004f00 <get_Straj+0x7a4>)
 8004e06:	ed93 7b00 	vldr	d7, [r3]
 8004e0a:	ed97 6b06 	vldr	d6, [r7, #24]
 8004e0e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8004e12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004e16:	f340 808b 	ble.w	8004f30 <get_Straj+0x7d4>
 8004e1a:	4b39      	ldr	r3, [pc, #228]	; (8004f00 <get_Straj+0x7a4>)
 8004e1c:	ed93 6b00 	vldr	d6, [r3]
 8004e20:	4b42      	ldr	r3, [pc, #264]	; (8004f2c <get_Straj+0x7d0>)
 8004e22:	ed93 7b00 	vldr	d7, [r3]
 8004e26:	ee36 7b07 	vadd.f64	d7, d6, d7
 8004e2a:	ed97 6b06 	vldr	d6, [r7, #24]
 8004e2e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8004e32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004e36:	d87b      	bhi.n	8004f30 <get_Straj+0x7d4>
        //printf("tramo4\n");
        q = qi+(vlim+vi)*Ta/2+vlim*(t-Ta);
 8004e38:	4b33      	ldr	r3, [pc, #204]	; (8004f08 <get_Straj+0x7ac>)
 8004e3a:	ed93 6b00 	vldr	d6, [r3]
 8004e3e:	4b33      	ldr	r3, [pc, #204]	; (8004f0c <get_Straj+0x7b0>)
 8004e40:	ed93 7b00 	vldr	d7, [r3]
 8004e44:	ee36 6b07 	vadd.f64	d6, d6, d7
 8004e48:	4b2d      	ldr	r3, [pc, #180]	; (8004f00 <get_Straj+0x7a4>)
 8004e4a:	ed93 7b00 	vldr	d7, [r3]
 8004e4e:	ee26 7b07 	vmul.f64	d7, d6, d7
 8004e52:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8004e56:	ee87 6b05 	vdiv.f64	d6, d7, d5
 8004e5a:	4b2d      	ldr	r3, [pc, #180]	; (8004f10 <get_Straj+0x7b4>)
 8004e5c:	ed93 7b00 	vldr	d7, [r3]
 8004e60:	ee36 6b07 	vadd.f64	d6, d6, d7
 8004e64:	4b26      	ldr	r3, [pc, #152]	; (8004f00 <get_Straj+0x7a4>)
 8004e66:	ed93 7b00 	vldr	d7, [r3]
 8004e6a:	ed97 5b06 	vldr	d5, [r7, #24]
 8004e6e:	ee35 5b47 	vsub.f64	d5, d5, d7
 8004e72:	4b25      	ldr	r3, [pc, #148]	; (8004f08 <get_Straj+0x7ac>)
 8004e74:	ed93 7b00 	vldr	d7, [r3]
 8004e78:	ee25 7b07 	vmul.f64	d7, d5, d7
 8004e7c:	ee36 7b07 	vadd.f64	d7, d6, d7
 8004e80:	4b25      	ldr	r3, [pc, #148]	; (8004f18 <get_Straj+0x7bc>)
 8004e82:	ed83 7b00 	vstr	d7, [r3]
        qd = vlim;
 8004e86:	4b20      	ldr	r3, [pc, #128]	; (8004f08 <get_Straj+0x7ac>)
 8004e88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e8c:	4923      	ldr	r1, [pc, #140]	; (8004f1c <get_Straj+0x7c0>)
 8004e8e:	e9c1 2300 	strd	r2, r3, [r1]
        qdd = 0;
 8004e92:	4923      	ldr	r1, [pc, #140]	; (8004f20 <get_Straj+0x7c4>)
 8004e94:	f04f 0200 	mov.w	r2, #0
 8004e98:	f04f 0300 	mov.w	r3, #0
 8004e9c:	e9c1 2300 	strd	r2, r3, [r1]
        qddd = 0;
 8004ea0:	4920      	ldr	r1, [pc, #128]	; (8004f24 <get_Straj+0x7c8>)
 8004ea2:	f04f 0200 	mov.w	r2, #0
 8004ea6:	f04f 0300 	mov.w	r3, #0
 8004eaa:	e9c1 2300 	strd	r2, r3, [r1]
        if (flagInv){
 8004eae:	4b1e      	ldr	r3, [pc, #120]	; (8004f28 <get_Straj+0x7cc>)
 8004eb0:	781b      	ldrb	r3, [r3, #0]
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	f000 82e9 	beq.w	800548a <get_Straj+0xd2e>
            q=-q; qd=-qd; qdd=-qdd; qddd=-qddd;
 8004eb8:	4b17      	ldr	r3, [pc, #92]	; (8004f18 <get_Straj+0x7bc>)
 8004eba:	ed93 7b00 	vldr	d7, [r3]
 8004ebe:	eeb1 7b47 	vneg.f64	d7, d7
 8004ec2:	4b15      	ldr	r3, [pc, #84]	; (8004f18 <get_Straj+0x7bc>)
 8004ec4:	ed83 7b00 	vstr	d7, [r3]
 8004ec8:	4b14      	ldr	r3, [pc, #80]	; (8004f1c <get_Straj+0x7c0>)
 8004eca:	ed93 7b00 	vldr	d7, [r3]
 8004ece:	eeb1 7b47 	vneg.f64	d7, d7
 8004ed2:	4b12      	ldr	r3, [pc, #72]	; (8004f1c <get_Straj+0x7c0>)
 8004ed4:	ed83 7b00 	vstr	d7, [r3]
 8004ed8:	4b11      	ldr	r3, [pc, #68]	; (8004f20 <get_Straj+0x7c4>)
 8004eda:	ed93 7b00 	vldr	d7, [r3]
 8004ede:	eeb1 7b47 	vneg.f64	d7, d7
 8004ee2:	4b0f      	ldr	r3, [pc, #60]	; (8004f20 <get_Straj+0x7c4>)
 8004ee4:	ed83 7b00 	vstr	d7, [r3]
 8004ee8:	4b0e      	ldr	r3, [pc, #56]	; (8004f24 <get_Straj+0x7c8>)
 8004eea:	ed93 7b00 	vldr	d7, [r3]
 8004eee:	eeb1 7b47 	vneg.f64	d7, d7
 8004ef2:	4b0c      	ldr	r3, [pc, #48]	; (8004f24 <get_Straj+0x7c8>)
 8004ef4:	ed83 7b00 	vstr	d7, [r3]
            flagInv = false;
 8004ef8:	4b0b      	ldr	r3, [pc, #44]	; (8004f28 <get_Straj+0x7cc>)
 8004efa:	2200      	movs	r2, #0
 8004efc:	701a      	strb	r2, [r3, #0]
        if (flagInv){
 8004efe:	e2c4      	b.n	800548a <get_Straj+0xd2e>
 8004f00:	240008a0 	.word	0x240008a0
 8004f04:	240008b8 	.word	0x240008b8
 8004f08:	24000890 	.word	0x24000890
 8004f0c:	24000018 	.word	0x24000018
 8004f10:	240008d8 	.word	0x240008d8
 8004f14:	24000488 	.word	0x24000488
 8004f18:	24000468 	.word	0x24000468
 8004f1c:	24000470 	.word	0x24000470
 8004f20:	24000478 	.word	0x24000478
 8004f24:	24000480 	.word	0x24000480
 8004f28:	24000878 	.word	0x24000878
 8004f2c:	240008b0 	.word	0x240008b0
        }
    }
    /*-------------Dese phase ----------------*/

    else if (t>=T-Td && t<=T-Td+Tj2){
 8004f30:	4b6c      	ldr	r3, [pc, #432]	; (80050e4 <get_Straj+0x988>)
 8004f32:	ed93 6b00 	vldr	d6, [r3]
 8004f36:	4b6c      	ldr	r3, [pc, #432]	; (80050e8 <get_Straj+0x98c>)
 8004f38:	ed93 7b00 	vldr	d7, [r3]
 8004f3c:	ee36 7b47 	vsub.f64	d7, d6, d7
 8004f40:	ed97 6b06 	vldr	d6, [r7, #24]
 8004f44:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8004f48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f4c:	f2c0 80e4 	blt.w	8005118 <get_Straj+0x9bc>
 8004f50:	4b64      	ldr	r3, [pc, #400]	; (80050e4 <get_Straj+0x988>)
 8004f52:	ed93 6b00 	vldr	d6, [r3]
 8004f56:	4b64      	ldr	r3, [pc, #400]	; (80050e8 <get_Straj+0x98c>)
 8004f58:	ed93 7b00 	vldr	d7, [r3]
 8004f5c:	ee36 6b47 	vsub.f64	d6, d6, d7
 8004f60:	4b62      	ldr	r3, [pc, #392]	; (80050ec <get_Straj+0x990>)
 8004f62:	ed93 7b00 	vldr	d7, [r3]
 8004f66:	ee36 7b07 	vadd.f64	d7, d6, d7
 8004f6a:	ed97 6b06 	vldr	d6, [r7, #24]
 8004f6e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8004f72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f76:	f200 80cf 	bhi.w	8005118 <get_Straj+0x9bc>
        //printf("tramo5\n");
        q=qf-(vlim+vf)*Td/2+vlim*(t-T+Td)-jmax*(pow(t-T+Td,3)/6);
 8004f7a:	4b5d      	ldr	r3, [pc, #372]	; (80050f0 <get_Straj+0x994>)
 8004f7c:	ed93 6b00 	vldr	d6, [r3]
 8004f80:	4b5c      	ldr	r3, [pc, #368]	; (80050f4 <get_Straj+0x998>)
 8004f82:	ed93 5b00 	vldr	d5, [r3]
 8004f86:	4b5c      	ldr	r3, [pc, #368]	; (80050f8 <get_Straj+0x99c>)
 8004f88:	ed93 7b00 	vldr	d7, [r3]
 8004f8c:	ee35 5b07 	vadd.f64	d5, d5, d7
 8004f90:	4b55      	ldr	r3, [pc, #340]	; (80050e8 <get_Straj+0x98c>)
 8004f92:	ed93 7b00 	vldr	d7, [r3]
 8004f96:	ee25 5b07 	vmul.f64	d5, d5, d7
 8004f9a:	eeb0 4b00 	vmov.f64	d4, #0	; 0x40000000  2.0
 8004f9e:	ee85 7b04 	vdiv.f64	d7, d5, d4
 8004fa2:	ee36 6b47 	vsub.f64	d6, d6, d7
 8004fa6:	4b4f      	ldr	r3, [pc, #316]	; (80050e4 <get_Straj+0x988>)
 8004fa8:	ed93 7b00 	vldr	d7, [r3]
 8004fac:	ed97 5b06 	vldr	d5, [r7, #24]
 8004fb0:	ee35 5b47 	vsub.f64	d5, d5, d7
 8004fb4:	4b4c      	ldr	r3, [pc, #304]	; (80050e8 <get_Straj+0x98c>)
 8004fb6:	ed93 7b00 	vldr	d7, [r3]
 8004fba:	ee35 5b07 	vadd.f64	d5, d5, d7
 8004fbe:	4b4d      	ldr	r3, [pc, #308]	; (80050f4 <get_Straj+0x998>)
 8004fc0:	ed93 7b00 	vldr	d7, [r3]
 8004fc4:	ee25 7b07 	vmul.f64	d7, d5, d7
 8004fc8:	ee36 8b07 	vadd.f64	d8, d6, d7
 8004fcc:	4b45      	ldr	r3, [pc, #276]	; (80050e4 <get_Straj+0x988>)
 8004fce:	ed93 7b00 	vldr	d7, [r3]
 8004fd2:	ed97 6b06 	vldr	d6, [r7, #24]
 8004fd6:	ee36 6b47 	vsub.f64	d6, d6, d7
 8004fda:	4b43      	ldr	r3, [pc, #268]	; (80050e8 <get_Straj+0x98c>)
 8004fdc:	ed93 7b00 	vldr	d7, [r3]
 8004fe0:	ee36 7b07 	vadd.f64	d7, d6, d7
 8004fe4:	eeb0 1b08 	vmov.f64	d1, #8	; 0x40400000  3.0
 8004fe8:	eeb0 0b47 	vmov.f64	d0, d7
 8004fec:	f00c fccc 	bl	8011988 <pow>
 8004ff0:	eeb0 7b40 	vmov.f64	d7, d0
 8004ff4:	eeb1 5b08 	vmov.f64	d5, #24	; 0x40c00000  6.0
 8004ff8:	ee87 6b05 	vdiv.f64	d6, d7, d5
 8004ffc:	4b3f      	ldr	r3, [pc, #252]	; (80050fc <get_Straj+0x9a0>)
 8004ffe:	ed93 7b00 	vldr	d7, [r3]
 8005002:	ee26 7b07 	vmul.f64	d7, d6, d7
 8005006:	ee38 7b47 	vsub.f64	d7, d8, d7
 800500a:	4b3d      	ldr	r3, [pc, #244]	; (8005100 <get_Straj+0x9a4>)
 800500c:	ed83 7b00 	vstr	d7, [r3]
        qd=vlim-jmax*(pow(t-T+Td,2)/2);
 8005010:	4b38      	ldr	r3, [pc, #224]	; (80050f4 <get_Straj+0x998>)
 8005012:	ed93 8b00 	vldr	d8, [r3]
 8005016:	4b33      	ldr	r3, [pc, #204]	; (80050e4 <get_Straj+0x988>)
 8005018:	ed93 7b00 	vldr	d7, [r3]
 800501c:	ed97 6b06 	vldr	d6, [r7, #24]
 8005020:	ee36 6b47 	vsub.f64	d6, d6, d7
 8005024:	4b30      	ldr	r3, [pc, #192]	; (80050e8 <get_Straj+0x98c>)
 8005026:	ed93 7b00 	vldr	d7, [r3]
 800502a:	ee36 7b07 	vadd.f64	d7, d6, d7
 800502e:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8005032:	eeb0 0b47 	vmov.f64	d0, d7
 8005036:	f00c fca7 	bl	8011988 <pow>
 800503a:	eeb0 7b40 	vmov.f64	d7, d0
 800503e:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8005042:	ee87 6b05 	vdiv.f64	d6, d7, d5
 8005046:	4b2d      	ldr	r3, [pc, #180]	; (80050fc <get_Straj+0x9a0>)
 8005048:	ed93 7b00 	vldr	d7, [r3]
 800504c:	ee26 7b07 	vmul.f64	d7, d6, d7
 8005050:	ee38 7b47 	vsub.f64	d7, d8, d7
 8005054:	4b2b      	ldr	r3, [pc, #172]	; (8005104 <get_Straj+0x9a8>)
 8005056:	ed83 7b00 	vstr	d7, [r3]
        qdd=-jmax*(t-T+Td);
 800505a:	4b28      	ldr	r3, [pc, #160]	; (80050fc <get_Straj+0x9a0>)
 800505c:	ed93 7b00 	vldr	d7, [r3]
 8005060:	eeb1 6b47 	vneg.f64	d6, d7
 8005064:	4b1f      	ldr	r3, [pc, #124]	; (80050e4 <get_Straj+0x988>)
 8005066:	ed93 7b00 	vldr	d7, [r3]
 800506a:	ed97 5b06 	vldr	d5, [r7, #24]
 800506e:	ee35 5b47 	vsub.f64	d5, d5, d7
 8005072:	4b1d      	ldr	r3, [pc, #116]	; (80050e8 <get_Straj+0x98c>)
 8005074:	ed93 7b00 	vldr	d7, [r3]
 8005078:	ee35 7b07 	vadd.f64	d7, d5, d7
 800507c:	ee26 7b07 	vmul.f64	d7, d6, d7
 8005080:	4b21      	ldr	r3, [pc, #132]	; (8005108 <get_Straj+0x9ac>)
 8005082:	ed83 7b00 	vstr	d7, [r3]
        qddd=jmin;
 8005086:	4b21      	ldr	r3, [pc, #132]	; (800510c <get_Straj+0x9b0>)
 8005088:	e9d3 2300 	ldrd	r2, r3, [r3]
 800508c:	4920      	ldr	r1, [pc, #128]	; (8005110 <get_Straj+0x9b4>)
 800508e:	e9c1 2300 	strd	r2, r3, [r1]
        if (flagInv){
 8005092:	4b20      	ldr	r3, [pc, #128]	; (8005114 <get_Straj+0x9b8>)
 8005094:	781b      	ldrb	r3, [r3, #0]
 8005096:	2b00      	cmp	r3, #0
 8005098:	f000 81f7 	beq.w	800548a <get_Straj+0xd2e>
            q=-q; qd=-qd; qdd=-qdd; qddd=-qddd;
 800509c:	4b18      	ldr	r3, [pc, #96]	; (8005100 <get_Straj+0x9a4>)
 800509e:	ed93 7b00 	vldr	d7, [r3]
 80050a2:	eeb1 7b47 	vneg.f64	d7, d7
 80050a6:	4b16      	ldr	r3, [pc, #88]	; (8005100 <get_Straj+0x9a4>)
 80050a8:	ed83 7b00 	vstr	d7, [r3]
 80050ac:	4b15      	ldr	r3, [pc, #84]	; (8005104 <get_Straj+0x9a8>)
 80050ae:	ed93 7b00 	vldr	d7, [r3]
 80050b2:	eeb1 7b47 	vneg.f64	d7, d7
 80050b6:	4b13      	ldr	r3, [pc, #76]	; (8005104 <get_Straj+0x9a8>)
 80050b8:	ed83 7b00 	vstr	d7, [r3]
 80050bc:	4b12      	ldr	r3, [pc, #72]	; (8005108 <get_Straj+0x9ac>)
 80050be:	ed93 7b00 	vldr	d7, [r3]
 80050c2:	eeb1 7b47 	vneg.f64	d7, d7
 80050c6:	4b10      	ldr	r3, [pc, #64]	; (8005108 <get_Straj+0x9ac>)
 80050c8:	ed83 7b00 	vstr	d7, [r3]
 80050cc:	4b10      	ldr	r3, [pc, #64]	; (8005110 <get_Straj+0x9b4>)
 80050ce:	ed93 7b00 	vldr	d7, [r3]
 80050d2:	eeb1 7b47 	vneg.f64	d7, d7
 80050d6:	4b0e      	ldr	r3, [pc, #56]	; (8005110 <get_Straj+0x9b4>)
 80050d8:	ed83 7b00 	vstr	d7, [r3]
            flagInv = false;
 80050dc:	4b0d      	ldr	r3, [pc, #52]	; (8005114 <get_Straj+0x9b8>)
 80050de:	2200      	movs	r2, #0
 80050e0:	701a      	strb	r2, [r3, #0]
        if (flagInv){
 80050e2:	e1d2      	b.n	800548a <get_Straj+0xd2e>
 80050e4:	24000898 	.word	0x24000898
 80050e8:	240008a8 	.word	0x240008a8
 80050ec:	240008c0 	.word	0x240008c0
 80050f0:	240008e0 	.word	0x240008e0
 80050f4:	24000890 	.word	0x24000890
 80050f8:	24000498 	.word	0x24000498
 80050fc:	24000008 	.word	0x24000008
 8005100:	24000468 	.word	0x24000468
 8005104:	24000470 	.word	0x24000470
 8005108:	24000478 	.word	0x24000478
 800510c:	24000488 	.word	0x24000488
 8005110:	24000480 	.word	0x24000480
 8005114:	24000878 	.word	0x24000878
        }
    } else if (t>T-Td+Tj2 && t<=T-Tj2){
 8005118:	4b7b      	ldr	r3, [pc, #492]	; (8005308 <get_Straj+0xbac>)
 800511a:	ed93 6b00 	vldr	d6, [r3]
 800511e:	4b7b      	ldr	r3, [pc, #492]	; (800530c <get_Straj+0xbb0>)
 8005120:	ed93 7b00 	vldr	d7, [r3]
 8005124:	ee36 6b47 	vsub.f64	d6, d6, d7
 8005128:	4b79      	ldr	r3, [pc, #484]	; (8005310 <get_Straj+0xbb4>)
 800512a:	ed93 7b00 	vldr	d7, [r3]
 800512e:	ee36 7b07 	vadd.f64	d7, d6, d7
 8005132:	ed97 6b06 	vldr	d6, [r7, #24]
 8005136:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800513a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800513e:	f340 80fd 	ble.w	800533c <get_Straj+0xbe0>
 8005142:	4b71      	ldr	r3, [pc, #452]	; (8005308 <get_Straj+0xbac>)
 8005144:	ed93 6b00 	vldr	d6, [r3]
 8005148:	4b71      	ldr	r3, [pc, #452]	; (8005310 <get_Straj+0xbb4>)
 800514a:	ed93 7b00 	vldr	d7, [r3]
 800514e:	ee36 7b47 	vsub.f64	d7, d6, d7
 8005152:	ed97 6b06 	vldr	d6, [r7, #24]
 8005156:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800515a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800515e:	f200 80ed 	bhi.w	800533c <get_Straj+0xbe0>
        //printf("tramo6\n");
        q=qf-(vlim+vf)*Td/2+vlim*(t-T+Td)+(alimd/6)*(3*pow(t-T+Td,2)-3*Tj2*(t-T+Td)+pow(Tj2,2));
 8005162:	4b6c      	ldr	r3, [pc, #432]	; (8005314 <get_Straj+0xbb8>)
 8005164:	ed93 6b00 	vldr	d6, [r3]
 8005168:	4b6b      	ldr	r3, [pc, #428]	; (8005318 <get_Straj+0xbbc>)
 800516a:	ed93 5b00 	vldr	d5, [r3]
 800516e:	4b6b      	ldr	r3, [pc, #428]	; (800531c <get_Straj+0xbc0>)
 8005170:	ed93 7b00 	vldr	d7, [r3]
 8005174:	ee35 5b07 	vadd.f64	d5, d5, d7
 8005178:	4b64      	ldr	r3, [pc, #400]	; (800530c <get_Straj+0xbb0>)
 800517a:	ed93 7b00 	vldr	d7, [r3]
 800517e:	ee25 5b07 	vmul.f64	d5, d5, d7
 8005182:	eeb0 4b00 	vmov.f64	d4, #0	; 0x40000000  2.0
 8005186:	ee85 7b04 	vdiv.f64	d7, d5, d4
 800518a:	ee36 6b47 	vsub.f64	d6, d6, d7
 800518e:	4b5e      	ldr	r3, [pc, #376]	; (8005308 <get_Straj+0xbac>)
 8005190:	ed93 7b00 	vldr	d7, [r3]
 8005194:	ed97 5b06 	vldr	d5, [r7, #24]
 8005198:	ee35 5b47 	vsub.f64	d5, d5, d7
 800519c:	4b5b      	ldr	r3, [pc, #364]	; (800530c <get_Straj+0xbb0>)
 800519e:	ed93 7b00 	vldr	d7, [r3]
 80051a2:	ee35 5b07 	vadd.f64	d5, d5, d7
 80051a6:	4b5c      	ldr	r3, [pc, #368]	; (8005318 <get_Straj+0xbbc>)
 80051a8:	ed93 7b00 	vldr	d7, [r3]
 80051ac:	ee25 7b07 	vmul.f64	d7, d5, d7
 80051b0:	ee36 8b07 	vadd.f64	d8, d6, d7
 80051b4:	4b5a      	ldr	r3, [pc, #360]	; (8005320 <get_Straj+0xbc4>)
 80051b6:	ed93 7b00 	vldr	d7, [r3]
 80051ba:	eeb1 6b08 	vmov.f64	d6, #24	; 0x40c00000  6.0
 80051be:	ee87 9b06 	vdiv.f64	d9, d7, d6
 80051c2:	4b51      	ldr	r3, [pc, #324]	; (8005308 <get_Straj+0xbac>)
 80051c4:	ed93 7b00 	vldr	d7, [r3]
 80051c8:	ed97 6b06 	vldr	d6, [r7, #24]
 80051cc:	ee36 6b47 	vsub.f64	d6, d6, d7
 80051d0:	4b4e      	ldr	r3, [pc, #312]	; (800530c <get_Straj+0xbb0>)
 80051d2:	ed93 7b00 	vldr	d7, [r3]
 80051d6:	ee36 7b07 	vadd.f64	d7, d6, d7
 80051da:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 80051de:	eeb0 0b47 	vmov.f64	d0, d7
 80051e2:	f00c fbd1 	bl	8011988 <pow>
 80051e6:	eeb0 7b40 	vmov.f64	d7, d0
 80051ea:	eeb0 6b08 	vmov.f64	d6, #8	; 0x40400000  3.0
 80051ee:	ee27 6b06 	vmul.f64	d6, d7, d6
 80051f2:	4b47      	ldr	r3, [pc, #284]	; (8005310 <get_Straj+0xbb4>)
 80051f4:	ed93 7b00 	vldr	d7, [r3]
 80051f8:	eeb0 5b08 	vmov.f64	d5, #8	; 0x40400000  3.0
 80051fc:	ee27 5b05 	vmul.f64	d5, d7, d5
 8005200:	4b41      	ldr	r3, [pc, #260]	; (8005308 <get_Straj+0xbac>)
 8005202:	ed93 7b00 	vldr	d7, [r3]
 8005206:	ed97 4b06 	vldr	d4, [r7, #24]
 800520a:	ee34 4b47 	vsub.f64	d4, d4, d7
 800520e:	4b3f      	ldr	r3, [pc, #252]	; (800530c <get_Straj+0xbb0>)
 8005210:	ed93 7b00 	vldr	d7, [r3]
 8005214:	ee34 7b07 	vadd.f64	d7, d4, d7
 8005218:	ee25 7b07 	vmul.f64	d7, d5, d7
 800521c:	ee36 ab47 	vsub.f64	d10, d6, d7
 8005220:	4b3b      	ldr	r3, [pc, #236]	; (8005310 <get_Straj+0xbb4>)
 8005222:	ed93 7b00 	vldr	d7, [r3]
 8005226:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 800522a:	eeb0 0b47 	vmov.f64	d0, d7
 800522e:	f00c fbab 	bl	8011988 <pow>
 8005232:	eeb0 7b40 	vmov.f64	d7, d0
 8005236:	ee3a 7b07 	vadd.f64	d7, d10, d7
 800523a:	ee29 7b07 	vmul.f64	d7, d9, d7
 800523e:	ee38 7b07 	vadd.f64	d7, d8, d7
 8005242:	4b38      	ldr	r3, [pc, #224]	; (8005324 <get_Straj+0xbc8>)
 8005244:	ed83 7b00 	vstr	d7, [r3]
        qd=vlim+alimd*(t-T+Td-Tj2/2);
 8005248:	4b2f      	ldr	r3, [pc, #188]	; (8005308 <get_Straj+0xbac>)
 800524a:	ed93 7b00 	vldr	d7, [r3]
 800524e:	ed97 6b06 	vldr	d6, [r7, #24]
 8005252:	ee36 6b47 	vsub.f64	d6, d6, d7
 8005256:	4b2d      	ldr	r3, [pc, #180]	; (800530c <get_Straj+0xbb0>)
 8005258:	ed93 7b00 	vldr	d7, [r3]
 800525c:	ee36 6b07 	vadd.f64	d6, d6, d7
 8005260:	4b2b      	ldr	r3, [pc, #172]	; (8005310 <get_Straj+0xbb4>)
 8005262:	ed93 5b00 	vldr	d5, [r3]
 8005266:	eeb0 4b00 	vmov.f64	d4, #0	; 0x40000000  2.0
 800526a:	ee85 7b04 	vdiv.f64	d7, d5, d4
 800526e:	ee36 6b47 	vsub.f64	d6, d6, d7
 8005272:	4b2b      	ldr	r3, [pc, #172]	; (8005320 <get_Straj+0xbc4>)
 8005274:	ed93 7b00 	vldr	d7, [r3]
 8005278:	ee26 6b07 	vmul.f64	d6, d6, d7
 800527c:	4b26      	ldr	r3, [pc, #152]	; (8005318 <get_Straj+0xbbc>)
 800527e:	ed93 7b00 	vldr	d7, [r3]
 8005282:	ee36 7b07 	vadd.f64	d7, d6, d7
 8005286:	4b28      	ldr	r3, [pc, #160]	; (8005328 <get_Straj+0xbcc>)
 8005288:	ed83 7b00 	vstr	d7, [r3]
        qdd = -jmax*Tj2;
 800528c:	4b27      	ldr	r3, [pc, #156]	; (800532c <get_Straj+0xbd0>)
 800528e:	ed93 7b00 	vldr	d7, [r3]
 8005292:	eeb1 6b47 	vneg.f64	d6, d7
 8005296:	4b1e      	ldr	r3, [pc, #120]	; (8005310 <get_Straj+0xbb4>)
 8005298:	ed93 7b00 	vldr	d7, [r3]
 800529c:	ee26 7b07 	vmul.f64	d7, d6, d7
 80052a0:	4b23      	ldr	r3, [pc, #140]	; (8005330 <get_Straj+0xbd4>)
 80052a2:	ed83 7b00 	vstr	d7, [r3]
        qddd = 0;
 80052a6:	4923      	ldr	r1, [pc, #140]	; (8005334 <get_Straj+0xbd8>)
 80052a8:	f04f 0200 	mov.w	r2, #0
 80052ac:	f04f 0300 	mov.w	r3, #0
 80052b0:	e9c1 2300 	strd	r2, r3, [r1]
        if (flagInv){
 80052b4:	4b20      	ldr	r3, [pc, #128]	; (8005338 <get_Straj+0xbdc>)
 80052b6:	781b      	ldrb	r3, [r3, #0]
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	f000 80e6 	beq.w	800548a <get_Straj+0xd2e>
            q=-q; qd=-qd; qdd=-qdd; qddd=-qddd;
 80052be:	4b19      	ldr	r3, [pc, #100]	; (8005324 <get_Straj+0xbc8>)
 80052c0:	ed93 7b00 	vldr	d7, [r3]
 80052c4:	eeb1 7b47 	vneg.f64	d7, d7
 80052c8:	4b16      	ldr	r3, [pc, #88]	; (8005324 <get_Straj+0xbc8>)
 80052ca:	ed83 7b00 	vstr	d7, [r3]
 80052ce:	4b16      	ldr	r3, [pc, #88]	; (8005328 <get_Straj+0xbcc>)
 80052d0:	ed93 7b00 	vldr	d7, [r3]
 80052d4:	eeb1 7b47 	vneg.f64	d7, d7
 80052d8:	4b13      	ldr	r3, [pc, #76]	; (8005328 <get_Straj+0xbcc>)
 80052da:	ed83 7b00 	vstr	d7, [r3]
 80052de:	4b14      	ldr	r3, [pc, #80]	; (8005330 <get_Straj+0xbd4>)
 80052e0:	ed93 7b00 	vldr	d7, [r3]
 80052e4:	eeb1 7b47 	vneg.f64	d7, d7
 80052e8:	4b11      	ldr	r3, [pc, #68]	; (8005330 <get_Straj+0xbd4>)
 80052ea:	ed83 7b00 	vstr	d7, [r3]
 80052ee:	4b11      	ldr	r3, [pc, #68]	; (8005334 <get_Straj+0xbd8>)
 80052f0:	ed93 7b00 	vldr	d7, [r3]
 80052f4:	eeb1 7b47 	vneg.f64	d7, d7
 80052f8:	4b0e      	ldr	r3, [pc, #56]	; (8005334 <get_Straj+0xbd8>)
 80052fa:	ed83 7b00 	vstr	d7, [r3]
            flagInv = false;
 80052fe:	4b0e      	ldr	r3, [pc, #56]	; (8005338 <get_Straj+0xbdc>)
 8005300:	2200      	movs	r2, #0
 8005302:	701a      	strb	r2, [r3, #0]
        if (flagInv){
 8005304:	e0c1      	b.n	800548a <get_Straj+0xd2e>
 8005306:	bf00      	nop
 8005308:	24000898 	.word	0x24000898
 800530c:	240008a8 	.word	0x240008a8
 8005310:	240008c0 	.word	0x240008c0
 8005314:	240008e0 	.word	0x240008e0
 8005318:	24000890 	.word	0x24000890
 800531c:	24000498 	.word	0x24000498
 8005320:	24000888 	.word	0x24000888
 8005324:	24000468 	.word	0x24000468
 8005328:	24000470 	.word	0x24000470
 800532c:	24000008 	.word	0x24000008
 8005330:	24000478 	.word	0x24000478
 8005334:	24000480 	.word	0x24000480
 8005338:	24000878 	.word	0x24000878
        }

    } else if (t>T-Tj2 && t<=T){
 800533c:	4b59      	ldr	r3, [pc, #356]	; (80054a4 <get_Straj+0xd48>)
 800533e:	ed93 6b00 	vldr	d6, [r3]
 8005342:	4b59      	ldr	r3, [pc, #356]	; (80054a8 <get_Straj+0xd4c>)
 8005344:	ed93 7b00 	vldr	d7, [r3]
 8005348:	ee36 7b47 	vsub.f64	d7, d6, d7
 800534c:	ed97 6b06 	vldr	d6, [r7, #24]
 8005350:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8005354:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005358:	f340 8097 	ble.w	800548a <get_Straj+0xd2e>
 800535c:	4b51      	ldr	r3, [pc, #324]	; (80054a4 <get_Straj+0xd48>)
 800535e:	ed93 7b00 	vldr	d7, [r3]
 8005362:	ed97 6b06 	vldr	d6, [r7, #24]
 8005366:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800536a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800536e:	f200 808c 	bhi.w	800548a <get_Straj+0xd2e>
        //printf("tramo7\n");
        q = qf-vf*(T-t)-jmax*(pow(T-t,3)/6);
 8005372:	4b4e      	ldr	r3, [pc, #312]	; (80054ac <get_Straj+0xd50>)
 8005374:	ed93 6b00 	vldr	d6, [r3]
 8005378:	4b4a      	ldr	r3, [pc, #296]	; (80054a4 <get_Straj+0xd48>)
 800537a:	ed93 5b00 	vldr	d5, [r3]
 800537e:	ed97 7b06 	vldr	d7, [r7, #24]
 8005382:	ee35 5b47 	vsub.f64	d5, d5, d7
 8005386:	4b4a      	ldr	r3, [pc, #296]	; (80054b0 <get_Straj+0xd54>)
 8005388:	ed93 7b00 	vldr	d7, [r3]
 800538c:	ee25 7b07 	vmul.f64	d7, d5, d7
 8005390:	ee36 8b47 	vsub.f64	d8, d6, d7
 8005394:	4b43      	ldr	r3, [pc, #268]	; (80054a4 <get_Straj+0xd48>)
 8005396:	ed93 6b00 	vldr	d6, [r3]
 800539a:	ed97 7b06 	vldr	d7, [r7, #24]
 800539e:	ee36 7b47 	vsub.f64	d7, d6, d7
 80053a2:	eeb0 1b08 	vmov.f64	d1, #8	; 0x40400000  3.0
 80053a6:	eeb0 0b47 	vmov.f64	d0, d7
 80053aa:	f00c faed 	bl	8011988 <pow>
 80053ae:	eeb0 7b40 	vmov.f64	d7, d0
 80053b2:	eeb1 5b08 	vmov.f64	d5, #24	; 0x40c00000  6.0
 80053b6:	ee87 6b05 	vdiv.f64	d6, d7, d5
 80053ba:	4b3e      	ldr	r3, [pc, #248]	; (80054b4 <get_Straj+0xd58>)
 80053bc:	ed93 7b00 	vldr	d7, [r3]
 80053c0:	ee26 7b07 	vmul.f64	d7, d6, d7
 80053c4:	ee38 7b47 	vsub.f64	d7, d8, d7
 80053c8:	4b3b      	ldr	r3, [pc, #236]	; (80054b8 <get_Straj+0xd5c>)
 80053ca:	ed83 7b00 	vstr	d7, [r3]
        qd = vf+jmax*(pow(T-t,2))/2;
 80053ce:	4b35      	ldr	r3, [pc, #212]	; (80054a4 <get_Straj+0xd48>)
 80053d0:	ed93 6b00 	vldr	d6, [r3]
 80053d4:	ed97 7b06 	vldr	d7, [r7, #24]
 80053d8:	ee36 7b47 	vsub.f64	d7, d6, d7
 80053dc:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 80053e0:	eeb0 0b47 	vmov.f64	d0, d7
 80053e4:	f00c fad0 	bl	8011988 <pow>
 80053e8:	eeb0 6b40 	vmov.f64	d6, d0
 80053ec:	4b31      	ldr	r3, [pc, #196]	; (80054b4 <get_Straj+0xd58>)
 80053ee:	ed93 7b00 	vldr	d7, [r3]
 80053f2:	ee26 7b07 	vmul.f64	d7, d6, d7
 80053f6:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 80053fa:	ee87 6b05 	vdiv.f64	d6, d7, d5
 80053fe:	4b2c      	ldr	r3, [pc, #176]	; (80054b0 <get_Straj+0xd54>)
 8005400:	ed93 7b00 	vldr	d7, [r3]
 8005404:	ee36 7b07 	vadd.f64	d7, d6, d7
 8005408:	4b2c      	ldr	r3, [pc, #176]	; (80054bc <get_Straj+0xd60>)
 800540a:	ed83 7b00 	vstr	d7, [r3]
        qdd = -jmax*(T-t);
 800540e:	4b29      	ldr	r3, [pc, #164]	; (80054b4 <get_Straj+0xd58>)
 8005410:	ed93 7b00 	vldr	d7, [r3]
 8005414:	eeb1 6b47 	vneg.f64	d6, d7
 8005418:	4b22      	ldr	r3, [pc, #136]	; (80054a4 <get_Straj+0xd48>)
 800541a:	ed93 5b00 	vldr	d5, [r3]
 800541e:	ed97 7b06 	vldr	d7, [r7, #24]
 8005422:	ee35 7b47 	vsub.f64	d7, d5, d7
 8005426:	ee26 7b07 	vmul.f64	d7, d6, d7
 800542a:	4b25      	ldr	r3, [pc, #148]	; (80054c0 <get_Straj+0xd64>)
 800542c:	ed83 7b00 	vstr	d7, [r3]
        qddd = jmax;
 8005430:	4b20      	ldr	r3, [pc, #128]	; (80054b4 <get_Straj+0xd58>)
 8005432:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005436:	4923      	ldr	r1, [pc, #140]	; (80054c4 <get_Straj+0xd68>)
 8005438:	e9c1 2300 	strd	r2, r3, [r1]
        if (flagInv){
 800543c:	4b22      	ldr	r3, [pc, #136]	; (80054c8 <get_Straj+0xd6c>)
 800543e:	781b      	ldrb	r3, [r3, #0]
 8005440:	2b00      	cmp	r3, #0
 8005442:	d022      	beq.n	800548a <get_Straj+0xd2e>
            //printf("inv tramo7\n");
            q=-q; qd=-qd; qdd=-qdd; qddd=-qddd;
 8005444:	4b1c      	ldr	r3, [pc, #112]	; (80054b8 <get_Straj+0xd5c>)
 8005446:	ed93 7b00 	vldr	d7, [r3]
 800544a:	eeb1 7b47 	vneg.f64	d7, d7
 800544e:	4b1a      	ldr	r3, [pc, #104]	; (80054b8 <get_Straj+0xd5c>)
 8005450:	ed83 7b00 	vstr	d7, [r3]
 8005454:	4b19      	ldr	r3, [pc, #100]	; (80054bc <get_Straj+0xd60>)
 8005456:	ed93 7b00 	vldr	d7, [r3]
 800545a:	eeb1 7b47 	vneg.f64	d7, d7
 800545e:	4b17      	ldr	r3, [pc, #92]	; (80054bc <get_Straj+0xd60>)
 8005460:	ed83 7b00 	vstr	d7, [r3]
 8005464:	4b16      	ldr	r3, [pc, #88]	; (80054c0 <get_Straj+0xd64>)
 8005466:	ed93 7b00 	vldr	d7, [r3]
 800546a:	eeb1 7b47 	vneg.f64	d7, d7
 800546e:	4b14      	ldr	r3, [pc, #80]	; (80054c0 <get_Straj+0xd64>)
 8005470:	ed83 7b00 	vstr	d7, [r3]
 8005474:	4b13      	ldr	r3, [pc, #76]	; (80054c4 <get_Straj+0xd68>)
 8005476:	ed93 7b00 	vldr	d7, [r3]
 800547a:	eeb1 7b47 	vneg.f64	d7, d7
 800547e:	4b11      	ldr	r3, [pc, #68]	; (80054c4 <get_Straj+0xd68>)
 8005480:	ed83 7b00 	vstr	d7, [r3]
            flagInv = false;
 8005484:	4b10      	ldr	r3, [pc, #64]	; (80054c8 <get_Straj+0xd6c>)
 8005486:	2200      	movs	r2, #0
 8005488:	701a      	strb	r2, [r3, #0]
        }
    }


    return qd;
 800548a:	4b0c      	ldr	r3, [pc, #48]	; (80054bc <get_Straj+0xd60>)
 800548c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005490:	ec43 2b17 	vmov	d7, r2, r3
}
 8005494:	eeb0 0b47 	vmov.f64	d0, d7
 8005498:	3720      	adds	r7, #32
 800549a:	46bd      	mov	sp, r7
 800549c:	ecbd 8b06 	vpop	{d8-d10}
 80054a0:	bd80      	pop	{r7, pc}
 80054a2:	bf00      	nop
 80054a4:	24000898 	.word	0x24000898
 80054a8:	240008c0 	.word	0x240008c0
 80054ac:	240008e0 	.word	0x240008e0
 80054b0:	24000498 	.word	0x24000498
 80054b4:	24000008 	.word	0x24000008
 80054b8:	24000468 	.word	0x24000468
 80054bc:	24000470 	.word	0x24000470
 80054c0:	24000478 	.word	0x24000478
 80054c4:	24000480 	.word	0x24000480
 80054c8:	24000878 	.word	0x24000878
 80054cc:	00000000 	.word	0x00000000

080054d0 <update_ScurveTraj>:


void update_ScurveTraj(double _qi ,double _qf, double vi,double vf ,double vmax,double amax,double jmax, double *params){
 80054d0:	b580      	push	{r7, lr}
 80054d2:	ed2d 8b04 	vpush	{d8-d9}
 80054d6:	b092      	sub	sp, #72	; 0x48
 80054d8:	af00      	add	r7, sp, #0
 80054da:	ed87 0b0e 	vstr	d0, [r7, #56]	; 0x38
 80054de:	ed87 1b0c 	vstr	d1, [r7, #48]	; 0x30
 80054e2:	ed87 2b0a 	vstr	d2, [r7, #40]	; 0x28
 80054e6:	ed87 3b08 	vstr	d3, [r7, #32]
 80054ea:	ed87 4b06 	vstr	d4, [r7, #24]
 80054ee:	ed87 5b04 	vstr	d5, [r7, #16]
 80054f2:	ed87 6b02 	vstr	d6, [r7, #8]
 80054f6:	6078      	str	r0, [r7, #4]

	jmin = -jmax;
 80054f8:	ed97 7b02 	vldr	d7, [r7, #8]
 80054fc:	eeb1 7b47 	vneg.f64	d7, d7
 8005500:	4b9e      	ldr	r3, [pc, #632]	; (800577c <update_ScurveTraj+0x2ac>)
 8005502:	ed83 7b00 	vstr	d7, [r3]
	amin = -amax;
 8005506:	ed97 7b04 	vldr	d7, [r7, #16]
 800550a:	eeb1 7b47 	vneg.f64	d7, d7
 800550e:	4b9c      	ldr	r3, [pc, #624]	; (8005780 <update_ScurveTraj+0x2b0>)
 8005510:	ed83 7b00 	vstr	d7, [r3]
	vmin = -vmax;
 8005514:	ed97 7b06 	vldr	d7, [r7, #24]
 8005518:	eeb1 7b47 	vneg.f64	d7, d7
 800551c:	4b99      	ldr	r3, [pc, #612]	; (8005784 <update_ScurveTraj+0x2b4>)
 800551e:	ed83 7b00 	vstr	d7, [r3]
	qi=_qi;
 8005522:	4999      	ldr	r1, [pc, #612]	; (8005788 <update_ScurveTraj+0x2b8>)
 8005524:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005528:	e9c1 2300 	strd	r2, r3, [r1]
	qf=_qf;
 800552c:	4997      	ldr	r1, [pc, #604]	; (800578c <update_ScurveTraj+0x2bc>)
 800552e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8005532:	e9c1 2300 	strd	r2, r3, [r1]

	if (qf < qi){
 8005536:	4b95      	ldr	r3, [pc, #596]	; (800578c <update_ScurveTraj+0x2bc>)
 8005538:	ed93 6b00 	vldr	d6, [r3]
 800553c:	4b92      	ldr	r3, [pc, #584]	; (8005788 <update_ScurveTraj+0x2b8>)
 800553e:	ed93 7b00 	vldr	d7, [r3]
 8005542:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8005546:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800554a:	d548      	bpl.n	80055de <update_ScurveTraj+0x10e>

		flagInv = true;
 800554c:	4b90      	ldr	r3, [pc, #576]	; (8005790 <update_ScurveTraj+0x2c0>)
 800554e:	2201      	movs	r2, #1
 8005550:	701a      	strb	r2, [r3, #0]

		qi = -qi;
 8005552:	4b8d      	ldr	r3, [pc, #564]	; (8005788 <update_ScurveTraj+0x2b8>)
 8005554:	ed93 7b00 	vldr	d7, [r3]
 8005558:	eeb1 7b47 	vneg.f64	d7, d7
 800555c:	4b8a      	ldr	r3, [pc, #552]	; (8005788 <update_ScurveTraj+0x2b8>)
 800555e:	ed83 7b00 	vstr	d7, [r3]
		qf = -qf;
 8005562:	4b8a      	ldr	r3, [pc, #552]	; (800578c <update_ScurveTraj+0x2bc>)
 8005564:	ed93 7b00 	vldr	d7, [r3]
 8005568:	eeb1 7b47 	vneg.f64	d7, d7
 800556c:	4b87      	ldr	r3, [pc, #540]	; (800578c <update_ScurveTraj+0x2bc>)
 800556e:	ed83 7b00 	vstr	d7, [r3]
		vi = -vi;
 8005572:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 8005576:	eeb1 7b47 	vneg.f64	d7, d7
 800557a:	ed87 7b0a 	vstr	d7, [r7, #40]	; 0x28
		vf = -vf;
 800557e:	ed97 7b08 	vldr	d7, [r7, #32]
 8005582:	eeb1 7b47 	vneg.f64	d7, d7
 8005586:	ed87 7b08 	vstr	d7, [r7, #32]

		vmax = -vmin;
 800558a:	4b7e      	ldr	r3, [pc, #504]	; (8005784 <update_ScurveTraj+0x2b4>)
 800558c:	ed93 7b00 	vldr	d7, [r3]
 8005590:	eeb1 7b47 	vneg.f64	d7, d7
 8005594:	ed87 7b06 	vstr	d7, [r7, #24]
		vmin = -vmax;
 8005598:	ed97 7b06 	vldr	d7, [r7, #24]
 800559c:	eeb1 7b47 	vneg.f64	d7, d7
 80055a0:	4b78      	ldr	r3, [pc, #480]	; (8005784 <update_ScurveTraj+0x2b4>)
 80055a2:	ed83 7b00 	vstr	d7, [r3]
		amax = -amin;
 80055a6:	4b76      	ldr	r3, [pc, #472]	; (8005780 <update_ScurveTraj+0x2b0>)
 80055a8:	ed93 7b00 	vldr	d7, [r3]
 80055ac:	eeb1 7b47 	vneg.f64	d7, d7
 80055b0:	ed87 7b04 	vstr	d7, [r7, #16]
		amin = -amax;
 80055b4:	ed97 7b04 	vldr	d7, [r7, #16]
 80055b8:	eeb1 7b47 	vneg.f64	d7, d7
 80055bc:	4b70      	ldr	r3, [pc, #448]	; (8005780 <update_ScurveTraj+0x2b0>)
 80055be:	ed83 7b00 	vstr	d7, [r3]
		jmax = -jmin;
 80055c2:	4b6e      	ldr	r3, [pc, #440]	; (800577c <update_ScurveTraj+0x2ac>)
 80055c4:	ed93 7b00 	vldr	d7, [r3]
 80055c8:	eeb1 7b47 	vneg.f64	d7, d7
 80055cc:	ed87 7b02 	vstr	d7, [r7, #8]
		jmin = -jmax;
 80055d0:	ed97 7b02 	vldr	d7, [r7, #8]
 80055d4:	eeb1 7b47 	vneg.f64	d7, d7
 80055d8:	4b68      	ldr	r3, [pc, #416]	; (800577c <update_ScurveTraj+0x2ac>)
 80055da:	ed83 7b00 	vstr	d7, [r3]

	}

	volatile float Tjaux = MIN(sqrt(fabs(vf-vi)/jmax),amax/jmax);
 80055de:	ed97 6b08 	vldr	d6, [r7, #32]
 80055e2:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 80055e6:	ee36 7b47 	vsub.f64	d7, d6, d7
 80055ea:	eeb0 6bc7 	vabs.f64	d6, d7
 80055ee:	ed97 7b02 	vldr	d7, [r7, #8]
 80055f2:	ee86 5b07 	vdiv.f64	d5, d6, d7
 80055f6:	eeb0 0b45 	vmov.f64	d0, d5
 80055fa:	f00c fc45 	bl	8011e88 <sqrt>
 80055fe:	eeb0 4b40 	vmov.f64	d4, d0
 8005602:	ed97 5b04 	vldr	d5, [r7, #16]
 8005606:	ed97 6b02 	vldr	d6, [r7, #8]
 800560a:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800560e:	eeb4 4bc7 	vcmpe.f64	d4, d7
 8005612:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005616:	d512      	bpl.n	800563e <update_ScurveTraj+0x16e>
 8005618:	ed97 6b08 	vldr	d6, [r7, #32]
 800561c:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 8005620:	ee36 7b47 	vsub.f64	d7, d6, d7
 8005624:	eeb0 6bc7 	vabs.f64	d6, d7
 8005628:	ed97 7b02 	vldr	d7, [r7, #8]
 800562c:	ee86 5b07 	vdiv.f64	d5, d6, d7
 8005630:	eeb0 0b45 	vmov.f64	d0, d5
 8005634:	f00c fc28 	bl	8011e88 <sqrt>
 8005638:	eeb0 7b40 	vmov.f64	d7, d0
 800563c:	e005      	b.n	800564a <update_ScurveTraj+0x17a>
 800563e:	ed97 5b04 	vldr	d5, [r7, #16]
 8005642:	ed97 6b02 	vldr	d6, [r7, #8]
 8005646:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800564a:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800564e:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44


	if (Tjaux<amax/jmax){
 8005652:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8005656:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 800565a:	ed97 4b04 	vldr	d4, [r7, #16]
 800565e:	ed97 5b02 	vldr	d5, [r7, #8]
 8005662:	ee84 7b05 	vdiv.f64	d7, d4, d5
 8005666:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800566a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800566e:	d400      	bmi.n	8005672 <update_ScurveTraj+0x1a2>
		//if (qf-qi > Tjaux*(vi+vf)) {printf("the trajectory is feasible \n");}
		//else {printf("the trajectory is NOT \n");}
	}
	else if (Tjaux == amax/jmax){
 8005670:	6c7b      	ldr	r3, [r7, #68]	; 0x44
		//if (qf-qi > 0.5*(vi+vf)*(Tjaux+fabs(vi+vf)/amax)) {printf("the trajectory is feasible\n");}
		//else {printf("the trajectory is NOT feasible\n");}
	}
	//Phase 1: acceleration
	if ((vmax-vi)*jmax < pow(amax,2)){
 8005672:	ed97 6b06 	vldr	d6, [r7, #24]
 8005676:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 800567a:	ee36 6b47 	vsub.f64	d6, d6, d7
 800567e:	ed97 7b02 	vldr	d7, [r7, #8]
 8005682:	ee26 8b07 	vmul.f64	d8, d6, d7
 8005686:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 800568a:	ed97 0b04 	vldr	d0, [r7, #16]
 800568e:	f00c f97b 	bl	8011988 <pow>
 8005692:	eeb0 7b40 	vmov.f64	d7, d0
 8005696:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800569a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800569e:	d51d      	bpl.n	80056dc <update_ScurveTraj+0x20c>
		//printf("amax is NOT reached\n");

		Tj1=sqrt(fabs(vmax-vi)/jmax);
 80056a0:	ed97 6b06 	vldr	d6, [r7, #24]
 80056a4:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 80056a8:	ee36 7b47 	vsub.f64	d7, d6, d7
 80056ac:	eeb0 6bc7 	vabs.f64	d6, d7
 80056b0:	ed97 7b02 	vldr	d7, [r7, #8]
 80056b4:	ee86 5b07 	vdiv.f64	d5, d6, d7
 80056b8:	eeb0 0b45 	vmov.f64	d0, d5
 80056bc:	f00c fbe4 	bl	8011e88 <sqrt>
 80056c0:	eeb0 7b40 	vmov.f64	d7, d0
 80056c4:	4b33      	ldr	r3, [pc, #204]	; (8005794 <update_ScurveTraj+0x2c4>)
 80056c6:	ed83 7b00 	vstr	d7, [r3]
		Ta=Tj1*2;
 80056ca:	4b32      	ldr	r3, [pc, #200]	; (8005794 <update_ScurveTraj+0x2c4>)
 80056cc:	ed93 7b00 	vldr	d7, [r3]
 80056d0:	ee37 7b07 	vadd.f64	d7, d7, d7
 80056d4:	4b30      	ldr	r3, [pc, #192]	; (8005798 <update_ScurveTraj+0x2c8>)
 80056d6:	ed83 7b00 	vstr	d7, [r3]
 80056da:	e01a      	b.n	8005712 <update_ScurveTraj+0x242>
	}
	else{
		//printf("amax is reached\n");
		Tj1=amax/jmax;
 80056dc:	ed97 5b04 	vldr	d5, [r7, #16]
 80056e0:	ed97 6b02 	vldr	d6, [r7, #8]
 80056e4:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80056e8:	4b2a      	ldr	r3, [pc, #168]	; (8005794 <update_ScurveTraj+0x2c4>)
 80056ea:	ed83 7b00 	vstr	d7, [r3]
		Ta=Tj1+(vmax-vi)/amax;
 80056ee:	ed97 6b06 	vldr	d6, [r7, #24]
 80056f2:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 80056f6:	ee36 5b47 	vsub.f64	d5, d6, d7
 80056fa:	ed97 7b04 	vldr	d7, [r7, #16]
 80056fe:	ee85 6b07 	vdiv.f64	d6, d5, d7
 8005702:	4b24      	ldr	r3, [pc, #144]	; (8005794 <update_ScurveTraj+0x2c4>)
 8005704:	ed93 7b00 	vldr	d7, [r3]
 8005708:	ee36 7b07 	vadd.f64	d7, d6, d7
 800570c:	4b22      	ldr	r3, [pc, #136]	; (8005798 <update_ScurveTraj+0x2c8>)
 800570e:	ed83 7b00 	vstr	d7, [r3]
	}

	//Phase 3: Desacceleration


	if ((vmax-vf)*jmax < pow(amax,2)){
 8005712:	ed97 6b06 	vldr	d6, [r7, #24]
 8005716:	ed97 7b08 	vldr	d7, [r7, #32]
 800571a:	ee36 6b47 	vsub.f64	d6, d6, d7
 800571e:	ed97 7b02 	vldr	d7, [r7, #8]
 8005722:	ee26 8b07 	vmul.f64	d8, d6, d7
 8005726:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 800572a:	ed97 0b04 	vldr	d0, [r7, #16]
 800572e:	f00c f92b 	bl	8011988 <pow>
 8005732:	eeb0 7b40 	vmov.f64	d7, d0
 8005736:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800573a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800573e:	d531      	bpl.n	80057a4 <update_ScurveTraj+0x2d4>
		//printf("amin is NOT reached\n");

		Tj2=sqrt(fabs(vmax-vf)/jmax);
 8005740:	ed97 6b06 	vldr	d6, [r7, #24]
 8005744:	ed97 7b08 	vldr	d7, [r7, #32]
 8005748:	ee36 7b47 	vsub.f64	d7, d6, d7
 800574c:	eeb0 6bc7 	vabs.f64	d6, d7
 8005750:	ed97 7b02 	vldr	d7, [r7, #8]
 8005754:	ee86 5b07 	vdiv.f64	d5, d6, d7
 8005758:	eeb0 0b45 	vmov.f64	d0, d5
 800575c:	f00c fb94 	bl	8011e88 <sqrt>
 8005760:	eeb0 7b40 	vmov.f64	d7, d0
 8005764:	4b0d      	ldr	r3, [pc, #52]	; (800579c <update_ScurveTraj+0x2cc>)
 8005766:	ed83 7b00 	vstr	d7, [r3]
		Td=Tj2*2;
 800576a:	4b0c      	ldr	r3, [pc, #48]	; (800579c <update_ScurveTraj+0x2cc>)
 800576c:	ed93 7b00 	vldr	d7, [r3]
 8005770:	ee37 7b07 	vadd.f64	d7, d7, d7
 8005774:	4b0a      	ldr	r3, [pc, #40]	; (80057a0 <update_ScurveTraj+0x2d0>)
 8005776:	ed83 7b00 	vstr	d7, [r3]
 800577a:	e02e      	b.n	80057da <update_ScurveTraj+0x30a>
 800577c:	24000488 	.word	0x24000488
 8005780:	240004a0 	.word	0x240004a0
 8005784:	24000490 	.word	0x24000490
 8005788:	240008d8 	.word	0x240008d8
 800578c:	240008e0 	.word	0x240008e0
 8005790:	24000878 	.word	0x24000878
 8005794:	240008b8 	.word	0x240008b8
 8005798:	240008a0 	.word	0x240008a0
 800579c:	240008c0 	.word	0x240008c0
 80057a0:	240008a8 	.word	0x240008a8
	}
	else{
		//printf("amin is reached\n");
		Tj2=amax/jmax;
 80057a4:	ed97 5b04 	vldr	d5, [r7, #16]
 80057a8:	ed97 6b02 	vldr	d6, [r7, #8]
 80057ac:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80057b0:	4b95      	ldr	r3, [pc, #596]	; (8005a08 <update_ScurveTraj+0x538>)
 80057b2:	ed83 7b00 	vstr	d7, [r3]
		Td=Tj2+(vmax-vf)/amax;
 80057b6:	ed97 6b06 	vldr	d6, [r7, #24]
 80057ba:	ed97 7b08 	vldr	d7, [r7, #32]
 80057be:	ee36 5b47 	vsub.f64	d5, d6, d7
 80057c2:	ed97 7b04 	vldr	d7, [r7, #16]
 80057c6:	ee85 6b07 	vdiv.f64	d6, d5, d7
 80057ca:	4b8f      	ldr	r3, [pc, #572]	; (8005a08 <update_ScurveTraj+0x538>)
 80057cc:	ed93 7b00 	vldr	d7, [r3]
 80057d0:	ee36 7b07 	vadd.f64	d7, d6, d7
 80057d4:	4b8d      	ldr	r3, [pc, #564]	; (8005a0c <update_ScurveTraj+0x53c>)
 80057d6:	ed83 7b00 	vstr	d7, [r3]
	}


	Tv = (qf-qi)/vmax - (Ta/2)*(1+(vi/vmax))-(Td/2)*(1+(vf/vmax));
 80057da:	4b8d      	ldr	r3, [pc, #564]	; (8005a10 <update_ScurveTraj+0x540>)
 80057dc:	ed93 6b00 	vldr	d6, [r3]
 80057e0:	4b8c      	ldr	r3, [pc, #560]	; (8005a14 <update_ScurveTraj+0x544>)
 80057e2:	ed93 7b00 	vldr	d7, [r3]
 80057e6:	ee36 5b47 	vsub.f64	d5, d6, d7
 80057ea:	ed97 7b06 	vldr	d7, [r7, #24]
 80057ee:	ee85 6b07 	vdiv.f64	d6, d5, d7
 80057f2:	4b89      	ldr	r3, [pc, #548]	; (8005a18 <update_ScurveTraj+0x548>)
 80057f4:	ed93 7b00 	vldr	d7, [r3]
 80057f8:	eeb0 4b00 	vmov.f64	d4, #0	; 0x40000000  2.0
 80057fc:	ee87 5b04 	vdiv.f64	d5, d7, d4
 8005800:	ed97 3b0a 	vldr	d3, [r7, #40]	; 0x28
 8005804:	ed97 4b06 	vldr	d4, [r7, #24]
 8005808:	ee83 7b04 	vdiv.f64	d7, d3, d4
 800580c:	eeb7 4b00 	vmov.f64	d4, #112	; 0x3f800000  1.0
 8005810:	ee37 7b04 	vadd.f64	d7, d7, d4
 8005814:	ee25 7b07 	vmul.f64	d7, d5, d7
 8005818:	ee36 6b47 	vsub.f64	d6, d6, d7
 800581c:	4b7b      	ldr	r3, [pc, #492]	; (8005a0c <update_ScurveTraj+0x53c>)
 800581e:	ed93 7b00 	vldr	d7, [r3]
 8005822:	eeb0 4b00 	vmov.f64	d4, #0	; 0x40000000  2.0
 8005826:	ee87 5b04 	vdiv.f64	d5, d7, d4
 800582a:	ed97 3b08 	vldr	d3, [r7, #32]
 800582e:	ed97 4b06 	vldr	d4, [r7, #24]
 8005832:	ee83 7b04 	vdiv.f64	d7, d3, d4
 8005836:	eeb7 4b00 	vmov.f64	d4, #112	; 0x3f800000  1.0
 800583a:	ee37 7b04 	vadd.f64	d7, d7, d4
 800583e:	ee25 7b07 	vmul.f64	d7, d5, d7
 8005842:	ee36 7b47 	vsub.f64	d7, d6, d7
 8005846:	4b75      	ldr	r3, [pc, #468]	; (8005a1c <update_ScurveTraj+0x54c>)
 8005848:	ed83 7b00 	vstr	d7, [r3]

	if (Tv>0){
 800584c:	4b73      	ldr	r3, [pc, #460]	; (8005a1c <update_ScurveTraj+0x54c>)
 800584e:	ed93 7b00 	vldr	d7, [r3]
 8005852:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8005856:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800585a:	f300 82d5 	bgt.w	8005e08 <update_ScurveTraj+0x938>
		//printf("the max velocity is reached\n");
	}
	else{
		//printf("CASE 2\n");
		//printf("In this case vmax is NOT reached, so Tv=0\n");
		Tj1=amax/jmax;
 800585e:	ed97 5b04 	vldr	d5, [r7, #16]
 8005862:	ed97 6b02 	vldr	d6, [r7, #8]
 8005866:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800586a:	4b6d      	ldr	r3, [pc, #436]	; (8005a20 <update_ScurveTraj+0x550>)
 800586c:	ed83 7b00 	vstr	d7, [r3]
		Tj2=Tj1;
 8005870:	4b6b      	ldr	r3, [pc, #428]	; (8005a20 <update_ScurveTraj+0x550>)
 8005872:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005876:	4964      	ldr	r1, [pc, #400]	; (8005a08 <update_ScurveTraj+0x538>)
 8005878:	e9c1 2300 	strd	r2, r3, [r1]
		Tj=Tj1;
 800587c:	4b68      	ldr	r3, [pc, #416]	; (8005a20 <update_ScurveTraj+0x550>)
 800587e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005882:	4968      	ldr	r1, [pc, #416]	; (8005a24 <update_ScurveTraj+0x554>)
 8005884:	e9c1 2300 	strd	r2, r3, [r1]
		delta = (pow(amax,4)/pow(jmax,2))+2*(pow(vi,2)+pow(vf,2))+amax*(4*(qf-qi)-2*(amax/jmax)*(vi+vf));
 8005888:	eeb1 1b00 	vmov.f64	d1, #16	; 0x40800000  4.0
 800588c:	ed97 0b04 	vldr	d0, [r7, #16]
 8005890:	f00c f87a 	bl	8011988 <pow>
 8005894:	eeb0 9b40 	vmov.f64	d9, d0
 8005898:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 800589c:	ed97 0b02 	vldr	d0, [r7, #8]
 80058a0:	f00c f872 	bl	8011988 <pow>
 80058a4:	eeb0 7b40 	vmov.f64	d7, d0
 80058a8:	ee89 8b07 	vdiv.f64	d8, d9, d7
 80058ac:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 80058b0:	ed97 0b0a 	vldr	d0, [r7, #40]	; 0x28
 80058b4:	f00c f868 	bl	8011988 <pow>
 80058b8:	eeb0 9b40 	vmov.f64	d9, d0
 80058bc:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 80058c0:	ed97 0b08 	vldr	d0, [r7, #32]
 80058c4:	f00c f860 	bl	8011988 <pow>
 80058c8:	eeb0 7b40 	vmov.f64	d7, d0
 80058cc:	ee39 7b07 	vadd.f64	d7, d9, d7
 80058d0:	ee37 7b07 	vadd.f64	d7, d7, d7
 80058d4:	ee38 6b07 	vadd.f64	d6, d8, d7
 80058d8:	4b4d      	ldr	r3, [pc, #308]	; (8005a10 <update_ScurveTraj+0x540>)
 80058da:	ed93 5b00 	vldr	d5, [r3]
 80058de:	4b4d      	ldr	r3, [pc, #308]	; (8005a14 <update_ScurveTraj+0x544>)
 80058e0:	ed93 7b00 	vldr	d7, [r3]
 80058e4:	ee35 7b47 	vsub.f64	d7, d5, d7
 80058e8:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 80058ec:	ee27 5b05 	vmul.f64	d5, d7, d5
 80058f0:	ed97 3b04 	vldr	d3, [r7, #16]
 80058f4:	ed97 4b02 	vldr	d4, [r7, #8]
 80058f8:	ee83 7b04 	vdiv.f64	d7, d3, d4
 80058fc:	ee37 4b07 	vadd.f64	d4, d7, d7
 8005900:	ed97 3b0a 	vldr	d3, [r7, #40]	; 0x28
 8005904:	ed97 7b08 	vldr	d7, [r7, #32]
 8005908:	ee33 7b07 	vadd.f64	d7, d3, d7
 800590c:	ee24 7b07 	vmul.f64	d7, d4, d7
 8005910:	ee35 5b47 	vsub.f64	d5, d5, d7
 8005914:	ed97 7b04 	vldr	d7, [r7, #16]
 8005918:	ee25 7b07 	vmul.f64	d7, d5, d7
 800591c:	ee36 7b07 	vadd.f64	d7, d6, d7
 8005920:	4b41      	ldr	r3, [pc, #260]	; (8005a28 <update_ScurveTraj+0x558>)
 8005922:	ed83 7b00 	vstr	d7, [r3]
		Ta=((pow(amax,2)/jmax)-2*vi+sqrt(delta))/(2*amax);
 8005926:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 800592a:	ed97 0b04 	vldr	d0, [r7, #16]
 800592e:	f00c f82b 	bl	8011988 <pow>
 8005932:	eeb0 5b40 	vmov.f64	d5, d0
 8005936:	ed97 7b02 	vldr	d7, [r7, #8]
 800593a:	ee85 6b07 	vdiv.f64	d6, d5, d7
 800593e:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 8005942:	ee37 7b07 	vadd.f64	d7, d7, d7
 8005946:	ee36 8b47 	vsub.f64	d8, d6, d7
 800594a:	4b37      	ldr	r3, [pc, #220]	; (8005a28 <update_ScurveTraj+0x558>)
 800594c:	ed93 7b00 	vldr	d7, [r3]
 8005950:	eeb0 0b47 	vmov.f64	d0, d7
 8005954:	f00c fa98 	bl	8011e88 <sqrt>
 8005958:	eeb0 7b40 	vmov.f64	d7, d0
 800595c:	ee38 5b07 	vadd.f64	d5, d8, d7
 8005960:	ed97 7b04 	vldr	d7, [r7, #16]
 8005964:	ee37 6b07 	vadd.f64	d6, d7, d7
 8005968:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800596c:	4b2a      	ldr	r3, [pc, #168]	; (8005a18 <update_ScurveTraj+0x548>)
 800596e:	ed83 7b00 	vstr	d7, [r3]
		Td=((pow(amax,2)/jmax)-2*vf+sqrt(delta))/(2*amax);
 8005972:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8005976:	ed97 0b04 	vldr	d0, [r7, #16]
 800597a:	f00c f805 	bl	8011988 <pow>
 800597e:	eeb0 5b40 	vmov.f64	d5, d0
 8005982:	ed97 7b02 	vldr	d7, [r7, #8]
 8005986:	ee85 6b07 	vdiv.f64	d6, d5, d7
 800598a:	ed97 7b08 	vldr	d7, [r7, #32]
 800598e:	ee37 7b07 	vadd.f64	d7, d7, d7
 8005992:	ee36 8b47 	vsub.f64	d8, d6, d7
 8005996:	4b24      	ldr	r3, [pc, #144]	; (8005a28 <update_ScurveTraj+0x558>)
 8005998:	ed93 7b00 	vldr	d7, [r3]
 800599c:	eeb0 0b47 	vmov.f64	d0, d7
 80059a0:	f00c fa72 	bl	8011e88 <sqrt>
 80059a4:	eeb0 7b40 	vmov.f64	d7, d0
 80059a8:	ee38 5b07 	vadd.f64	d5, d8, d7
 80059ac:	ed97 7b04 	vldr	d7, [r7, #16]
 80059b0:	ee37 6b07 	vadd.f64	d6, d7, d7
 80059b4:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80059b8:	4b14      	ldr	r3, [pc, #80]	; (8005a0c <update_ScurveTraj+0x53c>)
 80059ba:	ed83 7b00 	vstr	d7, [r3]
		Tv=0;
 80059be:	4917      	ldr	r1, [pc, #92]	; (8005a1c <update_ScurveTraj+0x54c>)
 80059c0:	f04f 0200 	mov.w	r2, #0
 80059c4:	f04f 0300 	mov.w	r3, #0
 80059c8:	e9c1 2300 	strd	r2, r3, [r1]


		if (Ta<2*Tj || Td<2*Tj){
 80059cc:	4b15      	ldr	r3, [pc, #84]	; (8005a24 <update_ScurveTraj+0x554>)
 80059ce:	ed93 7b00 	vldr	d7, [r3]
 80059d2:	ee37 6b07 	vadd.f64	d6, d7, d7
 80059d6:	4b10      	ldr	r3, [pc, #64]	; (8005a18 <update_ScurveTraj+0x548>)
 80059d8:	ed93 7b00 	vldr	d7, [r3]
 80059dc:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80059e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80059e4:	f300 81e4 	bgt.w	8005db0 <update_ScurveTraj+0x8e0>
 80059e8:	4b0e      	ldr	r3, [pc, #56]	; (8005a24 <update_ScurveTraj+0x554>)
 80059ea:	ed93 7b00 	vldr	d7, [r3]
 80059ee:	ee37 6b07 	vadd.f64	d6, d7, d7
 80059f2:	4b06      	ldr	r3, [pc, #24]	; (8005a0c <update_ScurveTraj+0x53c>)
 80059f4:	ed93 7b00 	vldr	d7, [r3]
 80059f8:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80059fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005a00:	f340 8202 	ble.w	8005e08 <update_ScurveTraj+0x938>
			//printf("entre\n");
			while (!(Ta>2*Tj && Td>2*Tj)){
 8005a04:	e1d4      	b.n	8005db0 <update_ScurveTraj+0x8e0>
 8005a06:	bf00      	nop
 8005a08:	240008c0 	.word	0x240008c0
 8005a0c:	240008a8 	.word	0x240008a8
 8005a10:	240008e0 	.word	0x240008e0
 8005a14:	240008d8 	.word	0x240008d8
 8005a18:	240008a0 	.word	0x240008a0
 8005a1c:	240008b0 	.word	0x240008b0
 8005a20:	240008b8 	.word	0x240008b8
 8005a24:	240008c8 	.word	0x240008c8
 8005a28:	240008d0 	.word	0x240008d0

				amax=amax*0.99;
 8005a2c:	ed97 7b04 	vldr	d7, [r7, #16]
 8005a30:	ed9f 6bd5 	vldr	d6, [pc, #852]	; 8005d88 <update_ScurveTraj+0x8b8>
 8005a34:	ee27 7b06 	vmul.f64	d7, d7, d6
 8005a38:	ed87 7b04 	vstr	d7, [r7, #16]
				Tj=amax/jmax;
 8005a3c:	ed97 5b04 	vldr	d5, [r7, #16]
 8005a40:	ed97 6b02 	vldr	d6, [r7, #8]
 8005a44:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8005a48:	4bd1      	ldr	r3, [pc, #836]	; (8005d90 <update_ScurveTraj+0x8c0>)
 8005a4a:	ed83 7b00 	vstr	d7, [r3]
				delta = (pow(amax,4)/pow(jmax,2))+2*(pow(vi,2)+pow(vf,2))+amax*(4*(qf-qi)-2*(amax/jmax)*(vi+vf));
 8005a4e:	eeb1 1b00 	vmov.f64	d1, #16	; 0x40800000  4.0
 8005a52:	ed97 0b04 	vldr	d0, [r7, #16]
 8005a56:	f00b ff97 	bl	8011988 <pow>
 8005a5a:	eeb0 9b40 	vmov.f64	d9, d0
 8005a5e:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8005a62:	ed97 0b02 	vldr	d0, [r7, #8]
 8005a66:	f00b ff8f 	bl	8011988 <pow>
 8005a6a:	eeb0 7b40 	vmov.f64	d7, d0
 8005a6e:	ee89 8b07 	vdiv.f64	d8, d9, d7
 8005a72:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8005a76:	ed97 0b0a 	vldr	d0, [r7, #40]	; 0x28
 8005a7a:	f00b ff85 	bl	8011988 <pow>
 8005a7e:	eeb0 9b40 	vmov.f64	d9, d0
 8005a82:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8005a86:	ed97 0b08 	vldr	d0, [r7, #32]
 8005a8a:	f00b ff7d 	bl	8011988 <pow>
 8005a8e:	eeb0 7b40 	vmov.f64	d7, d0
 8005a92:	ee39 7b07 	vadd.f64	d7, d9, d7
 8005a96:	ee37 7b07 	vadd.f64	d7, d7, d7
 8005a9a:	ee38 6b07 	vadd.f64	d6, d8, d7
 8005a9e:	4bbd      	ldr	r3, [pc, #756]	; (8005d94 <update_ScurveTraj+0x8c4>)
 8005aa0:	ed93 5b00 	vldr	d5, [r3]
 8005aa4:	4bbc      	ldr	r3, [pc, #752]	; (8005d98 <update_ScurveTraj+0x8c8>)
 8005aa6:	ed93 7b00 	vldr	d7, [r3]
 8005aaa:	ee35 7b47 	vsub.f64	d7, d5, d7
 8005aae:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 8005ab2:	ee27 5b05 	vmul.f64	d5, d7, d5
 8005ab6:	ed97 3b04 	vldr	d3, [r7, #16]
 8005aba:	ed97 4b02 	vldr	d4, [r7, #8]
 8005abe:	ee83 7b04 	vdiv.f64	d7, d3, d4
 8005ac2:	ee37 4b07 	vadd.f64	d4, d7, d7
 8005ac6:	ed97 3b0a 	vldr	d3, [r7, #40]	; 0x28
 8005aca:	ed97 7b08 	vldr	d7, [r7, #32]
 8005ace:	ee33 7b07 	vadd.f64	d7, d3, d7
 8005ad2:	ee24 7b07 	vmul.f64	d7, d4, d7
 8005ad6:	ee35 5b47 	vsub.f64	d5, d5, d7
 8005ada:	ed97 7b04 	vldr	d7, [r7, #16]
 8005ade:	ee25 7b07 	vmul.f64	d7, d5, d7
 8005ae2:	ee36 7b07 	vadd.f64	d7, d6, d7
 8005ae6:	4bad      	ldr	r3, [pc, #692]	; (8005d9c <update_ScurveTraj+0x8cc>)
 8005ae8:	ed83 7b00 	vstr	d7, [r3]
				Ta=((pow(amax,2)/jmax)-2*vi+sqrt(delta))/(2*amax);
 8005aec:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8005af0:	ed97 0b04 	vldr	d0, [r7, #16]
 8005af4:	f00b ff48 	bl	8011988 <pow>
 8005af8:	eeb0 5b40 	vmov.f64	d5, d0
 8005afc:	ed97 7b02 	vldr	d7, [r7, #8]
 8005b00:	ee85 6b07 	vdiv.f64	d6, d5, d7
 8005b04:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 8005b08:	ee37 7b07 	vadd.f64	d7, d7, d7
 8005b0c:	ee36 8b47 	vsub.f64	d8, d6, d7
 8005b10:	4ba2      	ldr	r3, [pc, #648]	; (8005d9c <update_ScurveTraj+0x8cc>)
 8005b12:	ed93 7b00 	vldr	d7, [r3]
 8005b16:	eeb0 0b47 	vmov.f64	d0, d7
 8005b1a:	f00c f9b5 	bl	8011e88 <sqrt>
 8005b1e:	eeb0 7b40 	vmov.f64	d7, d0
 8005b22:	ee38 5b07 	vadd.f64	d5, d8, d7
 8005b26:	ed97 7b04 	vldr	d7, [r7, #16]
 8005b2a:	ee37 6b07 	vadd.f64	d6, d7, d7
 8005b2e:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8005b32:	4b9b      	ldr	r3, [pc, #620]	; (8005da0 <update_ScurveTraj+0x8d0>)
 8005b34:	ed83 7b00 	vstr	d7, [r3]
				Td=((pow(amax,2)/jmax)-2*vf+sqrt(delta))/(2*amax);
 8005b38:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8005b3c:	ed97 0b04 	vldr	d0, [r7, #16]
 8005b40:	f00b ff22 	bl	8011988 <pow>
 8005b44:	eeb0 5b40 	vmov.f64	d5, d0
 8005b48:	ed97 7b02 	vldr	d7, [r7, #8]
 8005b4c:	ee85 6b07 	vdiv.f64	d6, d5, d7
 8005b50:	ed97 7b08 	vldr	d7, [r7, #32]
 8005b54:	ee37 7b07 	vadd.f64	d7, d7, d7
 8005b58:	ee36 8b47 	vsub.f64	d8, d6, d7
 8005b5c:	4b8f      	ldr	r3, [pc, #572]	; (8005d9c <update_ScurveTraj+0x8cc>)
 8005b5e:	ed93 7b00 	vldr	d7, [r3]
 8005b62:	eeb0 0b47 	vmov.f64	d0, d7
 8005b66:	f00c f98f 	bl	8011e88 <sqrt>
 8005b6a:	eeb0 7b40 	vmov.f64	d7, d0
 8005b6e:	ee38 5b07 	vadd.f64	d5, d8, d7
 8005b72:	ed97 7b04 	vldr	d7, [r7, #16]
 8005b76:	ee37 6b07 	vadd.f64	d6, d7, d7
 8005b7a:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8005b7e:	4b89      	ldr	r3, [pc, #548]	; (8005da4 <update_ScurveTraj+0x8d4>)
 8005b80:	ed83 7b00 	vstr	d7, [r3]

				//print(f'{i}',amax)


				if (Ta<0){
 8005b84:	4b86      	ldr	r3, [pc, #536]	; (8005da0 <update_ScurveTraj+0x8d0>)
 8005b86:	ed93 7b00 	vldr	d7, [r3]
 8005b8a:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8005b8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005b92:	d576      	bpl.n	8005c82 <update_ScurveTraj+0x7b2>
					Ta=0;
 8005b94:	4982      	ldr	r1, [pc, #520]	; (8005da0 <update_ScurveTraj+0x8d0>)
 8005b96:	f04f 0200 	mov.w	r2, #0
 8005b9a:	f04f 0300 	mov.w	r3, #0
 8005b9e:	e9c1 2300 	strd	r2, r3, [r1]
					Tj1=0;
 8005ba2:	4981      	ldr	r1, [pc, #516]	; (8005da8 <update_ScurveTraj+0x8d8>)
 8005ba4:	f04f 0200 	mov.w	r2, #0
 8005ba8:	f04f 0300 	mov.w	r3, #0
 8005bac:	e9c1 2300 	strd	r2, r3, [r1]
					Td=2*((qf-qi)/(vf+vi));
 8005bb0:	4b78      	ldr	r3, [pc, #480]	; (8005d94 <update_ScurveTraj+0x8c4>)
 8005bb2:	ed93 6b00 	vldr	d6, [r3]
 8005bb6:	4b78      	ldr	r3, [pc, #480]	; (8005d98 <update_ScurveTraj+0x8c8>)
 8005bb8:	ed93 7b00 	vldr	d7, [r3]
 8005bbc:	ee36 5b47 	vsub.f64	d5, d6, d7
 8005bc0:	ed97 6b08 	vldr	d6, [r7, #32]
 8005bc4:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 8005bc8:	ee36 6b07 	vadd.f64	d6, d6, d7
 8005bcc:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8005bd0:	ee37 7b07 	vadd.f64	d7, d7, d7
 8005bd4:	4b73      	ldr	r3, [pc, #460]	; (8005da4 <update_ScurveTraj+0x8d4>)
 8005bd6:	ed83 7b00 	vstr	d7, [r3]
					Tj2=(jmax*(qf-qi)-sqrt(jmax*(jmax*(pow(qf-qi,2))+pow(vf+vi,2)*(vf-vi))))/(jmax*(vf+vi));
 8005bda:	4b6e      	ldr	r3, [pc, #440]	; (8005d94 <update_ScurveTraj+0x8c4>)
 8005bdc:	ed93 6b00 	vldr	d6, [r3]
 8005be0:	4b6d      	ldr	r3, [pc, #436]	; (8005d98 <update_ScurveTraj+0x8c8>)
 8005be2:	ed93 7b00 	vldr	d7, [r3]
 8005be6:	ee36 6b47 	vsub.f64	d6, d6, d7
 8005bea:	ed97 7b02 	vldr	d7, [r7, #8]
 8005bee:	ee26 8b07 	vmul.f64	d8, d6, d7
 8005bf2:	4b68      	ldr	r3, [pc, #416]	; (8005d94 <update_ScurveTraj+0x8c4>)
 8005bf4:	ed93 6b00 	vldr	d6, [r3]
 8005bf8:	4b67      	ldr	r3, [pc, #412]	; (8005d98 <update_ScurveTraj+0x8c8>)
 8005bfa:	ed93 7b00 	vldr	d7, [r3]
 8005bfe:	ee36 7b47 	vsub.f64	d7, d6, d7
 8005c02:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8005c06:	eeb0 0b47 	vmov.f64	d0, d7
 8005c0a:	f00b febd 	bl	8011988 <pow>
 8005c0e:	eeb0 6b40 	vmov.f64	d6, d0
 8005c12:	ed97 7b02 	vldr	d7, [r7, #8]
 8005c16:	ee26 9b07 	vmul.f64	d9, d6, d7
 8005c1a:	ed97 6b08 	vldr	d6, [r7, #32]
 8005c1e:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 8005c22:	ee36 7b07 	vadd.f64	d7, d6, d7
 8005c26:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8005c2a:	eeb0 0b47 	vmov.f64	d0, d7
 8005c2e:	f00b feab 	bl	8011988 <pow>
 8005c32:	eeb0 5b40 	vmov.f64	d5, d0
 8005c36:	ed97 6b08 	vldr	d6, [r7, #32]
 8005c3a:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 8005c3e:	ee36 7b47 	vsub.f64	d7, d6, d7
 8005c42:	ee25 7b07 	vmul.f64	d7, d5, d7
 8005c46:	ee39 6b07 	vadd.f64	d6, d9, d7
 8005c4a:	ed97 7b02 	vldr	d7, [r7, #8]
 8005c4e:	ee26 7b07 	vmul.f64	d7, d6, d7
 8005c52:	eeb0 0b47 	vmov.f64	d0, d7
 8005c56:	f00c f917 	bl	8011e88 <sqrt>
 8005c5a:	eeb0 7b40 	vmov.f64	d7, d0
 8005c5e:	ee38 5b47 	vsub.f64	d5, d8, d7
 8005c62:	ed97 6b08 	vldr	d6, [r7, #32]
 8005c66:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 8005c6a:	ee36 6b07 	vadd.f64	d6, d6, d7
 8005c6e:	ed97 7b02 	vldr	d7, [r7, #8]
 8005c72:	ee26 6b07 	vmul.f64	d6, d6, d7
 8005c76:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8005c7a:	4b4c      	ldr	r3, [pc, #304]	; (8005dac <update_ScurveTraj+0x8dc>)
 8005c7c:	ed83 7b00 	vstr	d7, [r3]
					break;
 8005c80:	e0c2      	b.n	8005e08 <update_ScurveTraj+0x938>
				}
				if (Td<0){
 8005c82:	4b48      	ldr	r3, [pc, #288]	; (8005da4 <update_ScurveTraj+0x8d4>)
 8005c84:	ed93 7b00 	vldr	d7, [r3]
 8005c88:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8005c8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005c90:	d400      	bmi.n	8005c94 <update_ScurveTraj+0x7c4>
 8005c92:	e08d      	b.n	8005db0 <update_ScurveTraj+0x8e0>
					Td=0;
 8005c94:	4943      	ldr	r1, [pc, #268]	; (8005da4 <update_ScurveTraj+0x8d4>)
 8005c96:	f04f 0200 	mov.w	r2, #0
 8005c9a:	f04f 0300 	mov.w	r3, #0
 8005c9e:	e9c1 2300 	strd	r2, r3, [r1]
					Ta=2*((qf-qi)/(vf+vi));
 8005ca2:	4b3c      	ldr	r3, [pc, #240]	; (8005d94 <update_ScurveTraj+0x8c4>)
 8005ca4:	ed93 6b00 	vldr	d6, [r3]
 8005ca8:	4b3b      	ldr	r3, [pc, #236]	; (8005d98 <update_ScurveTraj+0x8c8>)
 8005caa:	ed93 7b00 	vldr	d7, [r3]
 8005cae:	ee36 5b47 	vsub.f64	d5, d6, d7
 8005cb2:	ed97 6b08 	vldr	d6, [r7, #32]
 8005cb6:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 8005cba:	ee36 6b07 	vadd.f64	d6, d6, d7
 8005cbe:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8005cc2:	ee37 7b07 	vadd.f64	d7, d7, d7
 8005cc6:	4b36      	ldr	r3, [pc, #216]	; (8005da0 <update_ScurveTraj+0x8d0>)
 8005cc8:	ed83 7b00 	vstr	d7, [r3]
					Tj1=(jmax*(qf-qi)-sqrt(jmax*(jmax*(pow(qf-qi,2))-pow(vf+vi,2)*(vf-vi))))/(jmax*(vf+vi));
 8005ccc:	4b31      	ldr	r3, [pc, #196]	; (8005d94 <update_ScurveTraj+0x8c4>)
 8005cce:	ed93 6b00 	vldr	d6, [r3]
 8005cd2:	4b31      	ldr	r3, [pc, #196]	; (8005d98 <update_ScurveTraj+0x8c8>)
 8005cd4:	ed93 7b00 	vldr	d7, [r3]
 8005cd8:	ee36 6b47 	vsub.f64	d6, d6, d7
 8005cdc:	ed97 7b02 	vldr	d7, [r7, #8]
 8005ce0:	ee26 8b07 	vmul.f64	d8, d6, d7
 8005ce4:	4b2b      	ldr	r3, [pc, #172]	; (8005d94 <update_ScurveTraj+0x8c4>)
 8005ce6:	ed93 6b00 	vldr	d6, [r3]
 8005cea:	4b2b      	ldr	r3, [pc, #172]	; (8005d98 <update_ScurveTraj+0x8c8>)
 8005cec:	ed93 7b00 	vldr	d7, [r3]
 8005cf0:	ee36 7b47 	vsub.f64	d7, d6, d7
 8005cf4:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8005cf8:	eeb0 0b47 	vmov.f64	d0, d7
 8005cfc:	f00b fe44 	bl	8011988 <pow>
 8005d00:	eeb0 6b40 	vmov.f64	d6, d0
 8005d04:	ed97 7b02 	vldr	d7, [r7, #8]
 8005d08:	ee26 9b07 	vmul.f64	d9, d6, d7
 8005d0c:	ed97 6b08 	vldr	d6, [r7, #32]
 8005d10:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 8005d14:	ee36 7b07 	vadd.f64	d7, d6, d7
 8005d18:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8005d1c:	eeb0 0b47 	vmov.f64	d0, d7
 8005d20:	f00b fe32 	bl	8011988 <pow>
 8005d24:	eeb0 5b40 	vmov.f64	d5, d0
 8005d28:	ed97 6b08 	vldr	d6, [r7, #32]
 8005d2c:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 8005d30:	ee36 7b47 	vsub.f64	d7, d6, d7
 8005d34:	ee25 7b07 	vmul.f64	d7, d5, d7
 8005d38:	ee39 6b47 	vsub.f64	d6, d9, d7
 8005d3c:	ed97 7b02 	vldr	d7, [r7, #8]
 8005d40:	ee26 7b07 	vmul.f64	d7, d6, d7
 8005d44:	eeb0 0b47 	vmov.f64	d0, d7
 8005d48:	f00c f89e 	bl	8011e88 <sqrt>
 8005d4c:	eeb0 7b40 	vmov.f64	d7, d0
 8005d50:	ee38 5b47 	vsub.f64	d5, d8, d7
 8005d54:	ed97 6b08 	vldr	d6, [r7, #32]
 8005d58:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 8005d5c:	ee36 6b07 	vadd.f64	d6, d6, d7
 8005d60:	ed97 7b02 	vldr	d7, [r7, #8]
 8005d64:	ee26 6b07 	vmul.f64	d6, d6, d7
 8005d68:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8005d6c:	4b0e      	ldr	r3, [pc, #56]	; (8005da8 <update_ScurveTraj+0x8d8>)
 8005d6e:	ed83 7b00 	vstr	d7, [r3]
					Tj2=0;
 8005d72:	490e      	ldr	r1, [pc, #56]	; (8005dac <update_ScurveTraj+0x8dc>)
 8005d74:	f04f 0200 	mov.w	r2, #0
 8005d78:	f04f 0300 	mov.w	r3, #0
 8005d7c:	e9c1 2300 	strd	r2, r3, [r1]
					break;
 8005d80:	e042      	b.n	8005e08 <update_ScurveTraj+0x938>
 8005d82:	bf00      	nop
 8005d84:	f3af 8000 	nop.w
 8005d88:	7ae147ae 	.word	0x7ae147ae
 8005d8c:	3fefae14 	.word	0x3fefae14
 8005d90:	240008c8 	.word	0x240008c8
 8005d94:	240008e0 	.word	0x240008e0
 8005d98:	240008d8 	.word	0x240008d8
 8005d9c:	240008d0 	.word	0x240008d0
 8005da0:	240008a0 	.word	0x240008a0
 8005da4:	240008a8 	.word	0x240008a8
 8005da8:	240008b8 	.word	0x240008b8
 8005dac:	240008c0 	.word	0x240008c0
			while (!(Ta>2*Tj && Td>2*Tj)){
 8005db0:	4b33      	ldr	r3, [pc, #204]	; (8005e80 <update_ScurveTraj+0x9b0>)
 8005db2:	ed93 7b00 	vldr	d7, [r3]
 8005db6:	ee37 6b07 	vadd.f64	d6, d7, d7
 8005dba:	4b32      	ldr	r3, [pc, #200]	; (8005e84 <update_ScurveTraj+0x9b4>)
 8005dbc:	ed93 7b00 	vldr	d7, [r3]
 8005dc0:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8005dc4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005dc8:	bf4c      	ite	mi
 8005dca:	2301      	movmi	r3, #1
 8005dcc:	2300      	movpl	r3, #0
 8005dce:	b2db      	uxtb	r3, r3
 8005dd0:	f083 0301 	eor.w	r3, r3, #1
 8005dd4:	b2db      	uxtb	r3, r3
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	f47f ae28 	bne.w	8005a2c <update_ScurveTraj+0x55c>
 8005ddc:	4b28      	ldr	r3, [pc, #160]	; (8005e80 <update_ScurveTraj+0x9b0>)
 8005dde:	ed93 7b00 	vldr	d7, [r3]
 8005de2:	ee37 6b07 	vadd.f64	d6, d7, d7
 8005de6:	4b28      	ldr	r3, [pc, #160]	; (8005e88 <update_ScurveTraj+0x9b8>)
 8005de8:	ed93 7b00 	vldr	d7, [r3]
 8005dec:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8005df0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005df4:	bf4c      	ite	mi
 8005df6:	2301      	movmi	r3, #1
 8005df8:	2300      	movpl	r3, #0
 8005dfa:	b2db      	uxtb	r3, r3
 8005dfc:	f083 0301 	eor.w	r3, r3, #1
 8005e00:	b2db      	uxtb	r3, r3
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	f47f ae12 	bne.w	8005a2c <update_ScurveTraj+0x55c>
				}
			}
		}
	}

	*(params)=Tj1;
 8005e08:	4b20      	ldr	r3, [pc, #128]	; (8005e8c <update_ScurveTraj+0x9bc>)
 8005e0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e0e:	6879      	ldr	r1, [r7, #4]
 8005e10:	e9c1 2300 	strd	r2, r3, [r1]
	*(params+1)=Tj2;
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	f103 0108 	add.w	r1, r3, #8
 8005e1a:	4b1d      	ldr	r3, [pc, #116]	; (8005e90 <update_ScurveTraj+0x9c0>)
 8005e1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e20:	e9c1 2300 	strd	r2, r3, [r1]
	*(params+2)=Tj;
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	f103 0110 	add.w	r1, r3, #16
 8005e2a:	4b15      	ldr	r3, [pc, #84]	; (8005e80 <update_ScurveTraj+0x9b0>)
 8005e2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e30:	e9c1 2300 	strd	r2, r3, [r1]
	*(params+3)=Ta;
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	f103 0118 	add.w	r1, r3, #24
 8005e3a:	4b12      	ldr	r3, [pc, #72]	; (8005e84 <update_ScurveTraj+0x9b4>)
 8005e3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e40:	e9c1 2300 	strd	r2, r3, [r1]
	*(params+4)=Td;
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	f103 0120 	add.w	r1, r3, #32
 8005e4a:	4b0f      	ldr	r3, [pc, #60]	; (8005e88 <update_ScurveTraj+0x9b8>)
 8005e4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e50:	e9c1 2300 	strd	r2, r3, [r1]
	*(params+5)=Tv;
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	f103 0128 	add.w	r1, r3, #40	; 0x28
 8005e5a:	4b0e      	ldr	r3, [pc, #56]	; (8005e94 <update_ScurveTraj+0x9c4>)
 8005e5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e60:	e9c1 2300 	strd	r2, r3, [r1]
	*(params+6)=T;
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8005e6a:	4b0b      	ldr	r3, [pc, #44]	; (8005e98 <update_ScurveTraj+0x9c8>)
 8005e6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e70:	e9c1 2300 	strd	r2, r3, [r1]

}
 8005e74:	bf00      	nop
 8005e76:	3748      	adds	r7, #72	; 0x48
 8005e78:	46bd      	mov	sp, r7
 8005e7a:	ecbd 8b04 	vpop	{d8-d9}
 8005e7e:	bd80      	pop	{r7, pc}
 8005e80:	240008c8 	.word	0x240008c8
 8005e84:	240008a0 	.word	0x240008a0
 8005e88:	240008a8 	.word	0x240008a8
 8005e8c:	240008b8 	.word	0x240008b8
 8005e90:	240008c0 	.word	0x240008c0
 8005e94:	240008b0 	.word	0x240008b0
 8005e98:	24000898 	.word	0x24000898
 8005e9c:	00000000 	.word	0x00000000

08005ea0 <setProfilTimer>:


void setProfilTimer(void){
 8005ea0:	b480      	push	{r7}
 8005ea2:	b083      	sub	sp, #12
 8005ea4:	af00      	add	r7, sp, #0

	motor1.rpm = motor1.omega * RADs_TO_RPM;
 8005ea6:	4bb8      	ldr	r3, [pc, #736]	; (8006188 <setProfilTimer+0x2e8>)
 8005ea8:	ed93 7b02 	vldr	d7, [r3, #8]
 8005eac:	ed9f 6bae 	vldr	d6, [pc, #696]	; 8006168 <setProfilTimer+0x2c8>
 8005eb0:	ee27 7b06 	vmul.f64	d7, d7, d6
 8005eb4:	4bb4      	ldr	r3, [pc, #720]	; (8006188 <setProfilTimer+0x2e8>)
 8005eb6:	ed83 7b04 	vstr	d7, [r3, #16]
	motor2.rpm = motor2.omega * RADs_TO_RPM;
 8005eba:	4bb4      	ldr	r3, [pc, #720]	; (800618c <setProfilTimer+0x2ec>)
 8005ebc:	ed93 7b02 	vldr	d7, [r3, #8]
 8005ec0:	ed9f 6ba9 	vldr	d6, [pc, #676]	; 8006168 <setProfilTimer+0x2c8>
 8005ec4:	ee27 7b06 	vmul.f64	d7, d7, d6
 8005ec8:	4bb0      	ldr	r3, [pc, #704]	; (800618c <setProfilTimer+0x2ec>)
 8005eca:	ed83 7b04 	vstr	d7, [r3, #16]
	motor3.rpm = motor3.omega * RADs_TO_RPM;
 8005ece:	4bb0      	ldr	r3, [pc, #704]	; (8006190 <setProfilTimer+0x2f0>)
 8005ed0:	ed93 7b02 	vldr	d7, [r3, #8]
 8005ed4:	ed9f 6ba4 	vldr	d6, [pc, #656]	; 8006168 <setProfilTimer+0x2c8>
 8005ed8:	ee27 7b06 	vmul.f64	d7, d7, d6
 8005edc:	4bac      	ldr	r3, [pc, #688]	; (8006190 <setProfilTimer+0x2f0>)
 8005ede:	ed83 7b04 	vstr	d7, [r3, #16]


    period[0] = COUNTERPERIOD(motor1.rpm);
 8005ee2:	4bac      	ldr	r3, [pc, #688]	; (8006194 <setProfilTimer+0x2f4>)
 8005ee4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ee6:	ee07 3a90 	vmov	s15, r3
 8005eea:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8005eee:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8005ef2:	ee37 7b06 	vadd.f64	d7, d7, d6
 8005ef6:	ed9f 5b9e 	vldr	d5, [pc, #632]	; 8006170 <setProfilTimer+0x2d0>
 8005efa:	ee85 6b07 	vdiv.f64	d6, d5, d7
 8005efe:	4ba2      	ldr	r3, [pc, #648]	; (8006188 <setProfilTimer+0x2e8>)
 8005f00:	ed93 7b04 	vldr	d7, [r3, #16]
 8005f04:	ed9f 5b9c 	vldr	d5, [pc, #624]	; 8006178 <setProfilTimer+0x2d8>
 8005f08:	ee27 5b05 	vmul.f64	d5, d7, d5
 8005f0c:	ed9f 4b9c 	vldr	d4, [pc, #624]	; 8006180 <setProfilTimer+0x2e0>
 8005f10:	ee84 7b05 	vdiv.f64	d7, d4, d5
 8005f14:	ee26 7b07 	vmul.f64	d7, d6, d7
 8005f18:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8005f1c:	ee37 7b46 	vsub.f64	d7, d7, d6
 8005f20:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8005f24:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8005f28:	4b9b      	ldr	r3, [pc, #620]	; (8006198 <setProfilTimer+0x2f8>)
 8005f2a:	ed83 7b00 	vstr	d7, [r3]
    period[1] = COUNTERPERIOD(motor2.rpm);
 8005f2e:	4b99      	ldr	r3, [pc, #612]	; (8006194 <setProfilTimer+0x2f4>)
 8005f30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f32:	ee07 3a90 	vmov	s15, r3
 8005f36:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8005f3a:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8005f3e:	ee37 7b06 	vadd.f64	d7, d7, d6
 8005f42:	ed9f 5b8b 	vldr	d5, [pc, #556]	; 8006170 <setProfilTimer+0x2d0>
 8005f46:	ee85 6b07 	vdiv.f64	d6, d5, d7
 8005f4a:	4b90      	ldr	r3, [pc, #576]	; (800618c <setProfilTimer+0x2ec>)
 8005f4c:	ed93 7b04 	vldr	d7, [r3, #16]
 8005f50:	ed9f 5b89 	vldr	d5, [pc, #548]	; 8006178 <setProfilTimer+0x2d8>
 8005f54:	ee27 5b05 	vmul.f64	d5, d7, d5
 8005f58:	ed9f 4b89 	vldr	d4, [pc, #548]	; 8006180 <setProfilTimer+0x2e0>
 8005f5c:	ee84 7b05 	vdiv.f64	d7, d4, d5
 8005f60:	ee26 7b07 	vmul.f64	d7, d6, d7
 8005f64:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8005f68:	ee37 7b46 	vsub.f64	d7, d7, d6
 8005f6c:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8005f70:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8005f74:	4b88      	ldr	r3, [pc, #544]	; (8006198 <setProfilTimer+0x2f8>)
 8005f76:	ed83 7b02 	vstr	d7, [r3, #8]
    period[3] = COUNTERPERIOD(motor3.rpm);
 8005f7a:	4b86      	ldr	r3, [pc, #536]	; (8006194 <setProfilTimer+0x2f4>)
 8005f7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f7e:	ee07 3a90 	vmov	s15, r3
 8005f82:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8005f86:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8005f8a:	ee37 7b06 	vadd.f64	d7, d7, d6
 8005f8e:	ed9f 5b78 	vldr	d5, [pc, #480]	; 8006170 <setProfilTimer+0x2d0>
 8005f92:	ee85 6b07 	vdiv.f64	d6, d5, d7
 8005f96:	4b7e      	ldr	r3, [pc, #504]	; (8006190 <setProfilTimer+0x2f0>)
 8005f98:	ed93 7b04 	vldr	d7, [r3, #16]
 8005f9c:	ed9f 5b76 	vldr	d5, [pc, #472]	; 8006178 <setProfilTimer+0x2d8>
 8005fa0:	ee27 5b05 	vmul.f64	d5, d7, d5
 8005fa4:	ed9f 4b76 	vldr	d4, [pc, #472]	; 8006180 <setProfilTimer+0x2e0>
 8005fa8:	ee84 7b05 	vdiv.f64	d7, d4, d5
 8005fac:	ee26 7b07 	vmul.f64	d7, d6, d7
 8005fb0:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8005fb4:	ee37 7b46 	vsub.f64	d7, d7, d6
 8005fb8:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8005fbc:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8005fc0:	4b75      	ldr	r3, [pc, #468]	; (8006198 <setProfilTimer+0x2f8>)
 8005fc2:	ed83 7b06 	vstr	d7, [r3, #24]

	// Calculo el error por casteo a int, y cuando supero la unidad, lo compenzo

	for (int i = 0; i < 3; i++) {
 8005fc6:	2300      	movs	r3, #0
 8005fc8:	607b      	str	r3, [r7, #4]
 8005fca:	e05b      	b.n	8006084 <setProfilTimer+0x1e4>
		periodError[i] = period[i] - (double)((int32_t) period[i]);
 8005fcc:	4a72      	ldr	r2, [pc, #456]	; (8006198 <setProfilTimer+0x2f8>)
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	00db      	lsls	r3, r3, #3
 8005fd2:	4413      	add	r3, r2
 8005fd4:	ed93 6b00 	vldr	d6, [r3]
 8005fd8:	4a6f      	ldr	r2, [pc, #444]	; (8006198 <setProfilTimer+0x2f8>)
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	00db      	lsls	r3, r3, #3
 8005fde:	4413      	add	r3, r2
 8005fe0:	ed93 7b00 	vldr	d7, [r3]
 8005fe4:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8005fe8:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8005fec:	ee36 7b47 	vsub.f64	d7, d6, d7
 8005ff0:	4a6a      	ldr	r2, [pc, #424]	; (800619c <setProfilTimer+0x2fc>)
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	00db      	lsls	r3, r3, #3
 8005ff6:	4413      	add	r3, r2
 8005ff8:	ed83 7b00 	vstr	d7, [r3]
		accumulatedError[i] += periodError[i];
 8005ffc:	4a68      	ldr	r2, [pc, #416]	; (80061a0 <setProfilTimer+0x300>)
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	00db      	lsls	r3, r3, #3
 8006002:	4413      	add	r3, r2
 8006004:	ed93 6b00 	vldr	d6, [r3]
 8006008:	4a64      	ldr	r2, [pc, #400]	; (800619c <setProfilTimer+0x2fc>)
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	00db      	lsls	r3, r3, #3
 800600e:	4413      	add	r3, r2
 8006010:	ed93 7b00 	vldr	d7, [r3]
 8006014:	ee36 7b07 	vadd.f64	d7, d6, d7
 8006018:	4a61      	ldr	r2, [pc, #388]	; (80061a0 <setProfilTimer+0x300>)
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	00db      	lsls	r3, r3, #3
 800601e:	4413      	add	r3, r2
 8006020:	ed83 7b00 	vstr	d7, [r3]
		if (accumulatedError[i] > 1) {
 8006024:	4a5e      	ldr	r2, [pc, #376]	; (80061a0 <setProfilTimer+0x300>)
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	00db      	lsls	r3, r3, #3
 800602a:	4413      	add	r3, r2
 800602c:	ed93 7b00 	vldr	d7, [r3]
 8006030:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8006034:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8006038:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800603c:	dd1f      	ble.n	800607e <setProfilTimer+0x1de>
			period[i] += 1;
 800603e:	4a56      	ldr	r2, [pc, #344]	; (8006198 <setProfilTimer+0x2f8>)
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	00db      	lsls	r3, r3, #3
 8006044:	4413      	add	r3, r2
 8006046:	ed93 7b00 	vldr	d7, [r3]
 800604a:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800604e:	ee37 7b06 	vadd.f64	d7, d7, d6
 8006052:	4a51      	ldr	r2, [pc, #324]	; (8006198 <setProfilTimer+0x2f8>)
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	00db      	lsls	r3, r3, #3
 8006058:	4413      	add	r3, r2
 800605a:	ed83 7b00 	vstr	d7, [r3]
			accumulatedError[i] -=  1;
 800605e:	4a50      	ldr	r2, [pc, #320]	; (80061a0 <setProfilTimer+0x300>)
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	00db      	lsls	r3, r3, #3
 8006064:	4413      	add	r3, r2
 8006066:	ed93 7b00 	vldr	d7, [r3]
 800606a:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800606e:	ee37 7b46 	vsub.f64	d7, d7, d6
 8006072:	4a4b      	ldr	r2, [pc, #300]	; (80061a0 <setProfilTimer+0x300>)
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	00db      	lsls	r3, r3, #3
 8006078:	4413      	add	r3, r2
 800607a:	ed83 7b00 	vstr	d7, [r3]
	for (int i = 0; i < 3; i++) {
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	3301      	adds	r3, #1
 8006082:	607b      	str	r3, [r7, #4]
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	2b02      	cmp	r3, #2
 8006088:	dda0      	ble.n	8005fcc <setProfilTimer+0x12c>
		}
	}

    //Escritura del registro ARR
    __HAL_TIM_SET_AUTORELOAD(&htim12,period[0]);
 800608a:	4b43      	ldr	r3, [pc, #268]	; (8006198 <setProfilTimer+0x2f8>)
 800608c:	ed93 7b00 	vldr	d7, [r3]
 8006090:	4b44      	ldr	r3, [pc, #272]	; (80061a4 <setProfilTimer+0x304>)
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8006098:	ee17 2a90 	vmov	r2, s15
 800609c:	62da      	str	r2, [r3, #44]	; 0x2c
 800609e:	4b3e      	ldr	r3, [pc, #248]	; (8006198 <setProfilTimer+0x2f8>)
 80060a0:	ed93 7b00 	vldr	d7, [r3]
 80060a4:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80060a8:	ee17 2a90 	vmov	r2, s15
 80060ac:	4b3d      	ldr	r3, [pc, #244]	; (80061a4 <setProfilTimer+0x304>)
 80060ae:	60da      	str	r2, [r3, #12]
	__HAL_TIM_SET_AUTORELOAD(&htim13,period[1]);
 80060b0:	4b39      	ldr	r3, [pc, #228]	; (8006198 <setProfilTimer+0x2f8>)
 80060b2:	ed93 7b02 	vldr	d7, [r3, #8]
 80060b6:	4b3c      	ldr	r3, [pc, #240]	; (80061a8 <setProfilTimer+0x308>)
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80060be:	ee17 2a90 	vmov	r2, s15
 80060c2:	62da      	str	r2, [r3, #44]	; 0x2c
 80060c4:	4b34      	ldr	r3, [pc, #208]	; (8006198 <setProfilTimer+0x2f8>)
 80060c6:	ed93 7b02 	vldr	d7, [r3, #8]
 80060ca:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80060ce:	ee17 2a90 	vmov	r2, s15
 80060d2:	4b35      	ldr	r3, [pc, #212]	; (80061a8 <setProfilTimer+0x308>)
 80060d4:	60da      	str	r2, [r3, #12]
	__HAL_TIM_SET_AUTORELOAD(&htim14,period[3]);
 80060d6:	4b30      	ldr	r3, [pc, #192]	; (8006198 <setProfilTimer+0x2f8>)
 80060d8:	ed93 7b06 	vldr	d7, [r3, #24]
 80060dc:	4b33      	ldr	r3, [pc, #204]	; (80061ac <setProfilTimer+0x30c>)
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80060e4:	ee17 2a90 	vmov	r2, s15
 80060e8:	62da      	str	r2, [r3, #44]	; 0x2c
 80060ea:	4b2b      	ldr	r3, [pc, #172]	; (8006198 <setProfilTimer+0x2f8>)
 80060ec:	ed93 7b06 	vldr	d7, [r3, #24]
 80060f0:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80060f4:	ee17 2a90 	vmov	r2, s15
 80060f8:	4b2c      	ldr	r3, [pc, #176]	; (80061ac <setProfilTimer+0x30c>)
 80060fa:	60da      	str	r2, [r3, #12]

	TIM12->CCR1 = (uint32_t)((double)(TIM12->ARR) / 2.0);
 80060fc:	4b25      	ldr	r3, [pc, #148]	; (8006194 <setProfilTimer+0x2f4>)
 80060fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006100:	ee07 3a90 	vmov	s15, r3
 8006104:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 8006108:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800610c:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8006110:	4b20      	ldr	r3, [pc, #128]	; (8006194 <setProfilTimer+0x2f4>)
 8006112:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8006116:	ee17 2a90 	vmov	r2, s15
 800611a:	635a      	str	r2, [r3, #52]	; 0x34
	TIM13->CCR1 = (uint32_t)((double)(TIM13->ARR) / 2.0);
 800611c:	4b24      	ldr	r3, [pc, #144]	; (80061b0 <setProfilTimer+0x310>)
 800611e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006120:	ee07 3a90 	vmov	s15, r3
 8006124:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 8006128:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800612c:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8006130:	4b1f      	ldr	r3, [pc, #124]	; (80061b0 <setProfilTimer+0x310>)
 8006132:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8006136:	ee17 2a90 	vmov	r2, s15
 800613a:	635a      	str	r2, [r3, #52]	; 0x34
	TIM14->CCR1 = (uint32_t)((double)(TIM14->ARR) / 2.0);
 800613c:	4b1d      	ldr	r3, [pc, #116]	; (80061b4 <setProfilTimer+0x314>)
 800613e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006140:	ee07 3a90 	vmov	s15, r3
 8006144:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 8006148:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800614c:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8006150:	4b18      	ldr	r3, [pc, #96]	; (80061b4 <setProfilTimer+0x314>)
 8006152:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8006156:	ee17 2a90 	vmov	r2, s15
 800615a:	635a      	str	r2, [r3, #52]	; 0x34


}
 800615c:	bf00      	nop
 800615e:	370c      	adds	r7, #12
 8006160:	46bd      	mov	sp, r7
 8006162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006166:	4770      	bx	lr
 8006168:	66ed2a99 	.word	0x66ed2a99
 800616c:	4023193d 	.word	0x4023193d
 8006170:	00000000 	.word	0x00000000
 8006174:	418e8480 	.word	0x418e8480
 8006178:	00000000 	.word	0x00000000
 800617c:	40bf4000 	.word	0x40bf4000
 8006180:	00000000 	.word	0x00000000
 8006184:	404e0000 	.word	0x404e0000
 8006188:	24000378 	.word	0x24000378
 800618c:	240003c0 	.word	0x240003c0
 8006190:	24000408 	.word	0x24000408
 8006194:	40001800 	.word	0x40001800
 8006198:	24000830 	.word	0x24000830
 800619c:	24000860 	.word	0x24000860
 80061a0:	24000848 	.word	0x24000848
 80061a4:	24000700 	.word	0x24000700
 80061a8:	2400074c 	.word	0x2400074c
 80061ac:	24000798 	.word	0x24000798
 80061b0:	40001c00 	.word	0x40001c00
 80061b4:	40002000 	.word	0x40002000

080061b8 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart3;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80061b8:	b580      	push	{r7, lr}
 80061ba:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80061bc:	4b22      	ldr	r3, [pc, #136]	; (8006248 <MX_USART1_UART_Init+0x90>)
 80061be:	4a23      	ldr	r2, [pc, #140]	; (800624c <MX_USART1_UART_Init+0x94>)
 80061c0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80061c2:	4b21      	ldr	r3, [pc, #132]	; (8006248 <MX_USART1_UART_Init+0x90>)
 80061c4:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80061c8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80061ca:	4b1f      	ldr	r3, [pc, #124]	; (8006248 <MX_USART1_UART_Init+0x90>)
 80061cc:	2200      	movs	r2, #0
 80061ce:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80061d0:	4b1d      	ldr	r3, [pc, #116]	; (8006248 <MX_USART1_UART_Init+0x90>)
 80061d2:	2200      	movs	r2, #0
 80061d4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80061d6:	4b1c      	ldr	r3, [pc, #112]	; (8006248 <MX_USART1_UART_Init+0x90>)
 80061d8:	2200      	movs	r2, #0
 80061da:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80061dc:	4b1a      	ldr	r3, [pc, #104]	; (8006248 <MX_USART1_UART_Init+0x90>)
 80061de:	220c      	movs	r2, #12
 80061e0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80061e2:	4b19      	ldr	r3, [pc, #100]	; (8006248 <MX_USART1_UART_Init+0x90>)
 80061e4:	2200      	movs	r2, #0
 80061e6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80061e8:	4b17      	ldr	r3, [pc, #92]	; (8006248 <MX_USART1_UART_Init+0x90>)
 80061ea:	2200      	movs	r2, #0
 80061ec:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80061ee:	4b16      	ldr	r3, [pc, #88]	; (8006248 <MX_USART1_UART_Init+0x90>)
 80061f0:	2200      	movs	r2, #0
 80061f2:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80061f4:	4b14      	ldr	r3, [pc, #80]	; (8006248 <MX_USART1_UART_Init+0x90>)
 80061f6:	2200      	movs	r2, #0
 80061f8:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80061fa:	4b13      	ldr	r3, [pc, #76]	; (8006248 <MX_USART1_UART_Init+0x90>)
 80061fc:	2200      	movs	r2, #0
 80061fe:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8006200:	4811      	ldr	r0, [pc, #68]	; (8006248 <MX_USART1_UART_Init+0x90>)
 8006202:	f005 fe81 	bl	800bf08 <HAL_UART_Init>
 8006206:	4603      	mov	r3, r0
 8006208:	2b00      	cmp	r3, #0
 800620a:	d001      	beq.n	8006210 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 800620c:	f7fc fd1c 	bl	8002c48 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8006210:	2100      	movs	r1, #0
 8006212:	480d      	ldr	r0, [pc, #52]	; (8006248 <MX_USART1_UART_Init+0x90>)
 8006214:	f008 f90b 	bl	800e42e <HAL_UARTEx_SetTxFifoThreshold>
 8006218:	4603      	mov	r3, r0
 800621a:	2b00      	cmp	r3, #0
 800621c:	d001      	beq.n	8006222 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 800621e:	f7fc fd13 	bl	8002c48 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8006222:	2100      	movs	r1, #0
 8006224:	4808      	ldr	r0, [pc, #32]	; (8006248 <MX_USART1_UART_Init+0x90>)
 8006226:	f008 f940 	bl	800e4aa <HAL_UARTEx_SetRxFifoThreshold>
 800622a:	4603      	mov	r3, r0
 800622c:	2b00      	cmp	r3, #0
 800622e:	d001      	beq.n	8006234 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8006230:	f7fc fd0a 	bl	8002c48 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8006234:	4804      	ldr	r0, [pc, #16]	; (8006248 <MX_USART1_UART_Init+0x90>)
 8006236:	f008 f8c1 	bl	800e3bc <HAL_UARTEx_DisableFifoMode>
 800623a:	4603      	mov	r3, r0
 800623c:	2b00      	cmp	r3, #0
 800623e:	d001      	beq.n	8006244 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8006240:	f7fc fd02 	bl	8002c48 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8006244:	bf00      	nop
 8006246:	bd80      	pop	{r7, pc}
 8006248:	240008e8 	.word	0x240008e8
 800624c:	40011000 	.word	0x40011000

08006250 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8006250:	b580      	push	{r7, lr}
 8006252:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8006254:	4b22      	ldr	r3, [pc, #136]	; (80062e0 <MX_USART2_UART_Init+0x90>)
 8006256:	4a23      	ldr	r2, [pc, #140]	; (80062e4 <MX_USART2_UART_Init+0x94>)
 8006258:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 800625a:	4b21      	ldr	r3, [pc, #132]	; (80062e0 <MX_USART2_UART_Init+0x90>)
 800625c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8006260:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8006262:	4b1f      	ldr	r3, [pc, #124]	; (80062e0 <MX_USART2_UART_Init+0x90>)
 8006264:	2200      	movs	r2, #0
 8006266:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8006268:	4b1d      	ldr	r3, [pc, #116]	; (80062e0 <MX_USART2_UART_Init+0x90>)
 800626a:	2200      	movs	r2, #0
 800626c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800626e:	4b1c      	ldr	r3, [pc, #112]	; (80062e0 <MX_USART2_UART_Init+0x90>)
 8006270:	2200      	movs	r2, #0
 8006272:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8006274:	4b1a      	ldr	r3, [pc, #104]	; (80062e0 <MX_USART2_UART_Init+0x90>)
 8006276:	220c      	movs	r2, #12
 8006278:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800627a:	4b19      	ldr	r3, [pc, #100]	; (80062e0 <MX_USART2_UART_Init+0x90>)
 800627c:	2200      	movs	r2, #0
 800627e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8006280:	4b17      	ldr	r3, [pc, #92]	; (80062e0 <MX_USART2_UART_Init+0x90>)
 8006282:	2200      	movs	r2, #0
 8006284:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8006286:	4b16      	ldr	r3, [pc, #88]	; (80062e0 <MX_USART2_UART_Init+0x90>)
 8006288:	2200      	movs	r2, #0
 800628a:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800628c:	4b14      	ldr	r3, [pc, #80]	; (80062e0 <MX_USART2_UART_Init+0x90>)
 800628e:	2200      	movs	r2, #0
 8006290:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8006292:	4b13      	ldr	r3, [pc, #76]	; (80062e0 <MX_USART2_UART_Init+0x90>)
 8006294:	2200      	movs	r2, #0
 8006296:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8006298:	4811      	ldr	r0, [pc, #68]	; (80062e0 <MX_USART2_UART_Init+0x90>)
 800629a:	f005 fe35 	bl	800bf08 <HAL_UART_Init>
 800629e:	4603      	mov	r3, r0
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d001      	beq.n	80062a8 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 80062a4:	f7fc fcd0 	bl	8002c48 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80062a8:	2100      	movs	r1, #0
 80062aa:	480d      	ldr	r0, [pc, #52]	; (80062e0 <MX_USART2_UART_Init+0x90>)
 80062ac:	f008 f8bf 	bl	800e42e <HAL_UARTEx_SetTxFifoThreshold>
 80062b0:	4603      	mov	r3, r0
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d001      	beq.n	80062ba <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 80062b6:	f7fc fcc7 	bl	8002c48 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80062ba:	2100      	movs	r1, #0
 80062bc:	4808      	ldr	r0, [pc, #32]	; (80062e0 <MX_USART2_UART_Init+0x90>)
 80062be:	f008 f8f4 	bl	800e4aa <HAL_UARTEx_SetRxFifoThreshold>
 80062c2:	4603      	mov	r3, r0
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d001      	beq.n	80062cc <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 80062c8:	f7fc fcbe 	bl	8002c48 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80062cc:	4804      	ldr	r0, [pc, #16]	; (80062e0 <MX_USART2_UART_Init+0x90>)
 80062ce:	f008 f875 	bl	800e3bc <HAL_UARTEx_DisableFifoMode>
 80062d2:	4603      	mov	r3, r0
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d001      	beq.n	80062dc <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 80062d8:	f7fc fcb6 	bl	8002c48 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80062dc:	bf00      	nop
 80062de:	bd80      	pop	{r7, pc}
 80062e0:	24000978 	.word	0x24000978
 80062e4:	40004400 	.word	0x40004400

080062e8 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80062e8:	b580      	push	{r7, lr}
 80062ea:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80062ec:	4b22      	ldr	r3, [pc, #136]	; (8006378 <MX_USART3_UART_Init+0x90>)
 80062ee:	4a23      	ldr	r2, [pc, #140]	; (800637c <MX_USART3_UART_Init+0x94>)
 80062f0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 80062f2:	4b21      	ldr	r3, [pc, #132]	; (8006378 <MX_USART3_UART_Init+0x90>)
 80062f4:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80062f8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80062fa:	4b1f      	ldr	r3, [pc, #124]	; (8006378 <MX_USART3_UART_Init+0x90>)
 80062fc:	2200      	movs	r2, #0
 80062fe:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8006300:	4b1d      	ldr	r3, [pc, #116]	; (8006378 <MX_USART3_UART_Init+0x90>)
 8006302:	2200      	movs	r2, #0
 8006304:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8006306:	4b1c      	ldr	r3, [pc, #112]	; (8006378 <MX_USART3_UART_Init+0x90>)
 8006308:	2200      	movs	r2, #0
 800630a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800630c:	4b1a      	ldr	r3, [pc, #104]	; (8006378 <MX_USART3_UART_Init+0x90>)
 800630e:	220c      	movs	r2, #12
 8006310:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8006312:	4b19      	ldr	r3, [pc, #100]	; (8006378 <MX_USART3_UART_Init+0x90>)
 8006314:	2200      	movs	r2, #0
 8006316:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8006318:	4b17      	ldr	r3, [pc, #92]	; (8006378 <MX_USART3_UART_Init+0x90>)
 800631a:	2200      	movs	r2, #0
 800631c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800631e:	4b16      	ldr	r3, [pc, #88]	; (8006378 <MX_USART3_UART_Init+0x90>)
 8006320:	2200      	movs	r2, #0
 8006322:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8006324:	4b14      	ldr	r3, [pc, #80]	; (8006378 <MX_USART3_UART_Init+0x90>)
 8006326:	2200      	movs	r2, #0
 8006328:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800632a:	4b13      	ldr	r3, [pc, #76]	; (8006378 <MX_USART3_UART_Init+0x90>)
 800632c:	2200      	movs	r2, #0
 800632e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8006330:	4811      	ldr	r0, [pc, #68]	; (8006378 <MX_USART3_UART_Init+0x90>)
 8006332:	f005 fde9 	bl	800bf08 <HAL_UART_Init>
 8006336:	4603      	mov	r3, r0
 8006338:	2b00      	cmp	r3, #0
 800633a:	d001      	beq.n	8006340 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 800633c:	f7fc fc84 	bl	8002c48 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8006340:	2100      	movs	r1, #0
 8006342:	480d      	ldr	r0, [pc, #52]	; (8006378 <MX_USART3_UART_Init+0x90>)
 8006344:	f008 f873 	bl	800e42e <HAL_UARTEx_SetTxFifoThreshold>
 8006348:	4603      	mov	r3, r0
 800634a:	2b00      	cmp	r3, #0
 800634c:	d001      	beq.n	8006352 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 800634e:	f7fc fc7b 	bl	8002c48 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8006352:	2100      	movs	r1, #0
 8006354:	4808      	ldr	r0, [pc, #32]	; (8006378 <MX_USART3_UART_Init+0x90>)
 8006356:	f008 f8a8 	bl	800e4aa <HAL_UARTEx_SetRxFifoThreshold>
 800635a:	4603      	mov	r3, r0
 800635c:	2b00      	cmp	r3, #0
 800635e:	d001      	beq.n	8006364 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8006360:	f7fc fc72 	bl	8002c48 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8006364:	4804      	ldr	r0, [pc, #16]	; (8006378 <MX_USART3_UART_Init+0x90>)
 8006366:	f008 f829 	bl	800e3bc <HAL_UARTEx_DisableFifoMode>
 800636a:	4603      	mov	r3, r0
 800636c:	2b00      	cmp	r3, #0
 800636e:	d001      	beq.n	8006374 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8006370:	f7fc fc6a 	bl	8002c48 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8006374:	bf00      	nop
 8006376:	bd80      	pop	{r7, pc}
 8006378:	24000a08 	.word	0x24000a08
 800637c:	40004800 	.word	0x40004800

08006380 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8006380:	b580      	push	{r7, lr}
 8006382:	b0be      	sub	sp, #248	; 0xf8
 8006384:	af00      	add	r7, sp, #0
 8006386:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006388:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800638c:	2200      	movs	r2, #0
 800638e:	601a      	str	r2, [r3, #0]
 8006390:	605a      	str	r2, [r3, #4]
 8006392:	609a      	str	r2, [r3, #8]
 8006394:	60da      	str	r2, [r3, #12]
 8006396:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8006398:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800639c:	22bc      	movs	r2, #188	; 0xbc
 800639e:	2100      	movs	r1, #0
 80063a0:	4618      	mov	r0, r3
 80063a2:	f008 fda1 	bl	800eee8 <memset>
  if(uartHandle->Instance==USART1)
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	4a84      	ldr	r2, [pc, #528]	; (80065bc <HAL_UART_MspInit+0x23c>)
 80063ac:	4293      	cmp	r3, r2
 80063ae:	d168      	bne.n	8006482 <HAL_UART_MspInit+0x102>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80063b0:	2301      	movs	r3, #1
 80063b2:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 80063b4:	2300      	movs	r3, #0
 80063b6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80063ba:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80063be:	4618      	mov	r0, r3
 80063c0:	f002 fa8c 	bl	80088dc <HAL_RCCEx_PeriphCLKConfig>
 80063c4:	4603      	mov	r3, r0
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d001      	beq.n	80063ce <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80063ca:	f7fc fc3d 	bl	8002c48 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80063ce:	4b7c      	ldr	r3, [pc, #496]	; (80065c0 <HAL_UART_MspInit+0x240>)
 80063d0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80063d4:	4a7a      	ldr	r2, [pc, #488]	; (80065c0 <HAL_UART_MspInit+0x240>)
 80063d6:	f043 0310 	orr.w	r3, r3, #16
 80063da:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80063de:	4b78      	ldr	r3, [pc, #480]	; (80065c0 <HAL_UART_MspInit+0x240>)
 80063e0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80063e4:	f003 0310 	and.w	r3, r3, #16
 80063e8:	627b      	str	r3, [r7, #36]	; 0x24
 80063ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80063ec:	4b74      	ldr	r3, [pc, #464]	; (80065c0 <HAL_UART_MspInit+0x240>)
 80063ee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80063f2:	4a73      	ldr	r2, [pc, #460]	; (80065c0 <HAL_UART_MspInit+0x240>)
 80063f4:	f043 0302 	orr.w	r3, r3, #2
 80063f8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80063fc:	4b70      	ldr	r3, [pc, #448]	; (80065c0 <HAL_UART_MspInit+0x240>)
 80063fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006402:	f003 0302 	and.w	r3, r3, #2
 8006406:	623b      	str	r3, [r7, #32]
 8006408:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800640a:	4b6d      	ldr	r3, [pc, #436]	; (80065c0 <HAL_UART_MspInit+0x240>)
 800640c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006410:	4a6b      	ldr	r2, [pc, #428]	; (80065c0 <HAL_UART_MspInit+0x240>)
 8006412:	f043 0301 	orr.w	r3, r3, #1
 8006416:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800641a:	4b69      	ldr	r3, [pc, #420]	; (80065c0 <HAL_UART_MspInit+0x240>)
 800641c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006420:	f003 0301 	and.w	r3, r3, #1
 8006424:	61fb      	str	r3, [r7, #28]
 8006426:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration
    PB15     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = Jetson_RX_Pin;
 8006428:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800642c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006430:	2302      	movs	r3, #2
 8006432:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006436:	2300      	movs	r3, #0
 8006438:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800643c:	2300      	movs	r3, #0
 800643e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8006442:	2304      	movs	r3, #4
 8006444:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(Jetson_RX_GPIO_Port, &GPIO_InitStruct);
 8006448:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800644c:	4619      	mov	r1, r3
 800644e:	485d      	ldr	r0, [pc, #372]	; (80065c4 <HAL_UART_MspInit+0x244>)
 8006450:	f001 f854 	bl	80074fc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = Jetson_TX_Pin;
 8006454:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006458:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800645c:	2302      	movs	r3, #2
 800645e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006462:	2300      	movs	r3, #0
 8006464:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006468:	2300      	movs	r3, #0
 800646a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800646e:	2307      	movs	r3, #7
 8006470:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(Jetson_TX_GPIO_Port, &GPIO_InitStruct);
 8006474:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8006478:	4619      	mov	r1, r3
 800647a:	4853      	ldr	r0, [pc, #332]	; (80065c8 <HAL_UART_MspInit+0x248>)
 800647c:	f001 f83e 	bl	80074fc <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8006480:	e097      	b.n	80065b2 <HAL_UART_MspInit+0x232>
  else if(uartHandle->Instance==USART2)
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	4a51      	ldr	r2, [pc, #324]	; (80065cc <HAL_UART_MspInit+0x24c>)
 8006488:	4293      	cmp	r3, r2
 800648a:	d142      	bne.n	8006512 <HAL_UART_MspInit+0x192>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800648c:	2302      	movs	r3, #2
 800648e:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8006490:	2300      	movs	r3, #0
 8006492:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8006496:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800649a:	4618      	mov	r0, r3
 800649c:	f002 fa1e 	bl	80088dc <HAL_RCCEx_PeriphCLKConfig>
 80064a0:	4603      	mov	r3, r0
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d001      	beq.n	80064aa <HAL_UART_MspInit+0x12a>
      Error_Handler();
 80064a6:	f7fc fbcf 	bl	8002c48 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 80064aa:	4b45      	ldr	r3, [pc, #276]	; (80065c0 <HAL_UART_MspInit+0x240>)
 80064ac:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80064b0:	4a43      	ldr	r2, [pc, #268]	; (80065c0 <HAL_UART_MspInit+0x240>)
 80064b2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80064b6:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80064ba:	4b41      	ldr	r3, [pc, #260]	; (80065c0 <HAL_UART_MspInit+0x240>)
 80064bc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80064c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80064c4:	61bb      	str	r3, [r7, #24]
 80064c6:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80064c8:	4b3d      	ldr	r3, [pc, #244]	; (80065c0 <HAL_UART_MspInit+0x240>)
 80064ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80064ce:	4a3c      	ldr	r2, [pc, #240]	; (80065c0 <HAL_UART_MspInit+0x240>)
 80064d0:	f043 0301 	orr.w	r3, r3, #1
 80064d4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80064d8:	4b39      	ldr	r3, [pc, #228]	; (80065c0 <HAL_UART_MspInit+0x240>)
 80064da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80064de:	f003 0301 	and.w	r3, r3, #1
 80064e2:	617b      	str	r3, [r7, #20]
 80064e4:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = NucleoF4_RX_Pin|NucleoF4_TX_Pin;
 80064e6:	230c      	movs	r3, #12
 80064e8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80064ec:	2302      	movs	r3, #2
 80064ee:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80064f2:	2300      	movs	r3, #0
 80064f4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80064f8:	2300      	movs	r3, #0
 80064fa:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80064fe:	2307      	movs	r3, #7
 8006500:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006504:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8006508:	4619      	mov	r1, r3
 800650a:	482f      	ldr	r0, [pc, #188]	; (80065c8 <HAL_UART_MspInit+0x248>)
 800650c:	f000 fff6 	bl	80074fc <HAL_GPIO_Init>
}
 8006510:	e04f      	b.n	80065b2 <HAL_UART_MspInit+0x232>
  else if(uartHandle->Instance==USART3)
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	4a2e      	ldr	r2, [pc, #184]	; (80065d0 <HAL_UART_MspInit+0x250>)
 8006518:	4293      	cmp	r3, r2
 800651a:	d14a      	bne.n	80065b2 <HAL_UART_MspInit+0x232>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800651c:	2302      	movs	r3, #2
 800651e:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8006520:	2300      	movs	r3, #0
 8006522:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8006526:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800652a:	4618      	mov	r0, r3
 800652c:	f002 f9d6 	bl	80088dc <HAL_RCCEx_PeriphCLKConfig>
 8006530:	4603      	mov	r3, r0
 8006532:	2b00      	cmp	r3, #0
 8006534:	d001      	beq.n	800653a <HAL_UART_MspInit+0x1ba>
      Error_Handler();
 8006536:	f7fc fb87 	bl	8002c48 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 800653a:	4b21      	ldr	r3, [pc, #132]	; (80065c0 <HAL_UART_MspInit+0x240>)
 800653c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006540:	4a1f      	ldr	r2, [pc, #124]	; (80065c0 <HAL_UART_MspInit+0x240>)
 8006542:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006546:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800654a:	4b1d      	ldr	r3, [pc, #116]	; (80065c0 <HAL_UART_MspInit+0x240>)
 800654c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006550:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006554:	613b      	str	r3, [r7, #16]
 8006556:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8006558:	4b19      	ldr	r3, [pc, #100]	; (80065c0 <HAL_UART_MspInit+0x240>)
 800655a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800655e:	4a18      	ldr	r2, [pc, #96]	; (80065c0 <HAL_UART_MspInit+0x240>)
 8006560:	f043 0308 	orr.w	r3, r3, #8
 8006564:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8006568:	4b15      	ldr	r3, [pc, #84]	; (80065c0 <HAL_UART_MspInit+0x240>)
 800656a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800656e:	f003 0308 	and.w	r3, r3, #8
 8006572:	60fb      	str	r3, [r7, #12]
 8006574:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = STLINK_TX_Pin|STLINK_RX_Pin;
 8006576:	f44f 7340 	mov.w	r3, #768	; 0x300
 800657a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800657e:	2302      	movs	r3, #2
 8006580:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006584:	2300      	movs	r3, #0
 8006586:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800658a:	2300      	movs	r3, #0
 800658c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8006590:	2307      	movs	r3, #7
 8006592:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006596:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800659a:	4619      	mov	r1, r3
 800659c:	480d      	ldr	r0, [pc, #52]	; (80065d4 <HAL_UART_MspInit+0x254>)
 800659e:	f000 ffad 	bl	80074fc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 1, 1);
 80065a2:	2201      	movs	r2, #1
 80065a4:	2101      	movs	r1, #1
 80065a6:	2027      	movs	r0, #39	; 0x27
 80065a8:	f000 fa01 	bl	80069ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80065ac:	2027      	movs	r0, #39	; 0x27
 80065ae:	f000 fa18 	bl	80069e2 <HAL_NVIC_EnableIRQ>
}
 80065b2:	bf00      	nop
 80065b4:	37f8      	adds	r7, #248	; 0xf8
 80065b6:	46bd      	mov	sp, r7
 80065b8:	bd80      	pop	{r7, pc}
 80065ba:	bf00      	nop
 80065bc:	40011000 	.word	0x40011000
 80065c0:	58024400 	.word	0x58024400
 80065c4:	58020400 	.word	0x58020400
 80065c8:	58020000 	.word	0x58020000
 80065cc:	40004400 	.word	0x40004400
 80065d0:	40004800 	.word	0x40004800
 80065d4:	58020c00 	.word	0x58020c00

080065d8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80065d8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8006610 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80065dc:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80065de:	e003      	b.n	80065e8 <LoopCopyDataInit>

080065e0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80065e0:	4b0c      	ldr	r3, [pc, #48]	; (8006614 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80065e2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80065e4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80065e6:	3104      	adds	r1, #4

080065e8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80065e8:	480b      	ldr	r0, [pc, #44]	; (8006618 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80065ea:	4b0c      	ldr	r3, [pc, #48]	; (800661c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80065ec:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80065ee:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80065f0:	d3f6      	bcc.n	80065e0 <CopyDataInit>
  ldr  r2, =_sbss
 80065f2:	4a0b      	ldr	r2, [pc, #44]	; (8006620 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80065f4:	e002      	b.n	80065fc <LoopFillZerobss>

080065f6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80065f6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80065f8:	f842 3b04 	str.w	r3, [r2], #4

080065fc <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80065fc:	4b09      	ldr	r3, [pc, #36]	; (8006624 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80065fe:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8006600:	d3f9      	bcc.n	80065f6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8006602:	f7fd fb83 	bl	8003d0c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8006606:	f008 fbd3 	bl	800edb0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800660a:	f7fb fff7 	bl	80025fc <main>
  bx  lr    
 800660e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8006610:	24080000 	.word	0x24080000
  ldr  r3, =_sidata
 8006614:	08013fc0 	.word	0x08013fc0
  ldr  r0, =_sdata
 8006618:	24000000 	.word	0x24000000
  ldr  r3, =_edata
 800661c:	24000264 	.word	0x24000264
  ldr  r2, =_sbss
 8006620:	24000268 	.word	0x24000268
  ldr  r3, = _ebss
 8006624:	24000aac 	.word	0x24000aac

08006628 <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8006628:	e7fe      	b.n	8006628 <ADC3_IRQHandler>
	...

0800662c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800662c:	b580      	push	{r7, lr}
 800662e:	b082      	sub	sp, #8
 8006630:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8006632:	2003      	movs	r0, #3
 8006634:	f000 f9b0 	bl	8006998 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8006638:	f001 ff7a 	bl	8008530 <HAL_RCC_GetSysClockFreq>
 800663c:	4602      	mov	r2, r0
 800663e:	4b15      	ldr	r3, [pc, #84]	; (8006694 <HAL_Init+0x68>)
 8006640:	699b      	ldr	r3, [r3, #24]
 8006642:	0a1b      	lsrs	r3, r3, #8
 8006644:	f003 030f 	and.w	r3, r3, #15
 8006648:	4913      	ldr	r1, [pc, #76]	; (8006698 <HAL_Init+0x6c>)
 800664a:	5ccb      	ldrb	r3, [r1, r3]
 800664c:	f003 031f 	and.w	r3, r3, #31
 8006650:	fa22 f303 	lsr.w	r3, r2, r3
 8006654:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006656:	4b0f      	ldr	r3, [pc, #60]	; (8006694 <HAL_Init+0x68>)
 8006658:	699b      	ldr	r3, [r3, #24]
 800665a:	f003 030f 	and.w	r3, r3, #15
 800665e:	4a0e      	ldr	r2, [pc, #56]	; (8006698 <HAL_Init+0x6c>)
 8006660:	5cd3      	ldrb	r3, [r2, r3]
 8006662:	f003 031f 	and.w	r3, r3, #31
 8006666:	687a      	ldr	r2, [r7, #4]
 8006668:	fa22 f303 	lsr.w	r3, r2, r3
 800666c:	4a0b      	ldr	r2, [pc, #44]	; (800669c <HAL_Init+0x70>)
 800666e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006670:	4a0b      	ldr	r2, [pc, #44]	; (80066a0 <HAL_Init+0x74>)
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8006676:	2000      	movs	r0, #0
 8006678:	f000 f814 	bl	80066a4 <HAL_InitTick>
 800667c:	4603      	mov	r3, r0
 800667e:	2b00      	cmp	r3, #0
 8006680:	d001      	beq.n	8006686 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8006682:	2301      	movs	r3, #1
 8006684:	e002      	b.n	800668c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8006686:	f7fd f9b1 	bl	80039ec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800668a:	2300      	movs	r3, #0
}
 800668c:	4618      	mov	r0, r3
 800668e:	3708      	adds	r7, #8
 8006690:	46bd      	mov	sp, r7
 8006692:	bd80      	pop	{r7, pc}
 8006694:	58024400 	.word	0x58024400
 8006698:	0801228c 	.word	0x0801228c
 800669c:	24000084 	.word	0x24000084
 80066a0:	24000080 	.word	0x24000080

080066a4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80066a4:	b580      	push	{r7, lr}
 80066a6:	b082      	sub	sp, #8
 80066a8:	af00      	add	r7, sp, #0
 80066aa:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80066ac:	4b15      	ldr	r3, [pc, #84]	; (8006704 <HAL_InitTick+0x60>)
 80066ae:	781b      	ldrb	r3, [r3, #0]
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d101      	bne.n	80066b8 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80066b4:	2301      	movs	r3, #1
 80066b6:	e021      	b.n	80066fc <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80066b8:	4b13      	ldr	r3, [pc, #76]	; (8006708 <HAL_InitTick+0x64>)
 80066ba:	681a      	ldr	r2, [r3, #0]
 80066bc:	4b11      	ldr	r3, [pc, #68]	; (8006704 <HAL_InitTick+0x60>)
 80066be:	781b      	ldrb	r3, [r3, #0]
 80066c0:	4619      	mov	r1, r3
 80066c2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80066c6:	fbb3 f3f1 	udiv	r3, r3, r1
 80066ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80066ce:	4618      	mov	r0, r3
 80066d0:	f000 f9a3 	bl	8006a1a <HAL_SYSTICK_Config>
 80066d4:	4603      	mov	r3, r0
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d001      	beq.n	80066de <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80066da:	2301      	movs	r3, #1
 80066dc:	e00e      	b.n	80066fc <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	2b0f      	cmp	r3, #15
 80066e2:	d80a      	bhi.n	80066fa <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80066e4:	2200      	movs	r2, #0
 80066e6:	6879      	ldr	r1, [r7, #4]
 80066e8:	f04f 30ff 	mov.w	r0, #4294967295
 80066ec:	f000 f95f 	bl	80069ae <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80066f0:	4a06      	ldr	r2, [pc, #24]	; (800670c <HAL_InitTick+0x68>)
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80066f6:	2300      	movs	r3, #0
 80066f8:	e000      	b.n	80066fc <HAL_InitTick+0x58>
    return HAL_ERROR;
 80066fa:	2301      	movs	r3, #1
}
 80066fc:	4618      	mov	r0, r3
 80066fe:	3708      	adds	r7, #8
 8006700:	46bd      	mov	sp, r7
 8006702:	bd80      	pop	{r7, pc}
 8006704:	2400008c 	.word	0x2400008c
 8006708:	24000080 	.word	0x24000080
 800670c:	24000088 	.word	0x24000088

08006710 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8006710:	b480      	push	{r7}
 8006712:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8006714:	4b06      	ldr	r3, [pc, #24]	; (8006730 <HAL_IncTick+0x20>)
 8006716:	781b      	ldrb	r3, [r3, #0]
 8006718:	461a      	mov	r2, r3
 800671a:	4b06      	ldr	r3, [pc, #24]	; (8006734 <HAL_IncTick+0x24>)
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	4413      	add	r3, r2
 8006720:	4a04      	ldr	r2, [pc, #16]	; (8006734 <HAL_IncTick+0x24>)
 8006722:	6013      	str	r3, [r2, #0]
}
 8006724:	bf00      	nop
 8006726:	46bd      	mov	sp, r7
 8006728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800672c:	4770      	bx	lr
 800672e:	bf00      	nop
 8006730:	2400008c 	.word	0x2400008c
 8006734:	24000a98 	.word	0x24000a98

08006738 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8006738:	b480      	push	{r7}
 800673a:	af00      	add	r7, sp, #0
  return uwTick;
 800673c:	4b03      	ldr	r3, [pc, #12]	; (800674c <HAL_GetTick+0x14>)
 800673e:	681b      	ldr	r3, [r3, #0]
}
 8006740:	4618      	mov	r0, r3
 8006742:	46bd      	mov	sp, r7
 8006744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006748:	4770      	bx	lr
 800674a:	bf00      	nop
 800674c:	24000a98 	.word	0x24000a98

08006750 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8006750:	b580      	push	{r7, lr}
 8006752:	b084      	sub	sp, #16
 8006754:	af00      	add	r7, sp, #0
 8006756:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8006758:	f7ff ffee 	bl	8006738 <HAL_GetTick>
 800675c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006768:	d005      	beq.n	8006776 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800676a:	4b0a      	ldr	r3, [pc, #40]	; (8006794 <HAL_Delay+0x44>)
 800676c:	781b      	ldrb	r3, [r3, #0]
 800676e:	461a      	mov	r2, r3
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	4413      	add	r3, r2
 8006774:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8006776:	bf00      	nop
 8006778:	f7ff ffde 	bl	8006738 <HAL_GetTick>
 800677c:	4602      	mov	r2, r0
 800677e:	68bb      	ldr	r3, [r7, #8]
 8006780:	1ad3      	subs	r3, r2, r3
 8006782:	68fa      	ldr	r2, [r7, #12]
 8006784:	429a      	cmp	r2, r3
 8006786:	d8f7      	bhi.n	8006778 <HAL_Delay+0x28>
  {
  }
}
 8006788:	bf00      	nop
 800678a:	bf00      	nop
 800678c:	3710      	adds	r7, #16
 800678e:	46bd      	mov	sp, r7
 8006790:	bd80      	pop	{r7, pc}
 8006792:	bf00      	nop
 8006794:	2400008c 	.word	0x2400008c

08006798 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8006798:	b480      	push	{r7}
 800679a:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 800679c:	4b03      	ldr	r3, [pc, #12]	; (80067ac <HAL_GetREVID+0x14>)
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	0c1b      	lsrs	r3, r3, #16
}
 80067a2:	4618      	mov	r0, r3
 80067a4:	46bd      	mov	sp, r7
 80067a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067aa:	4770      	bx	lr
 80067ac:	5c001000 	.word	0x5c001000

080067b0 <__NVIC_SetPriorityGrouping>:
{
 80067b0:	b480      	push	{r7}
 80067b2:	b085      	sub	sp, #20
 80067b4:	af00      	add	r7, sp, #0
 80067b6:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	f003 0307 	and.w	r3, r3, #7
 80067be:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80067c0:	4b0b      	ldr	r3, [pc, #44]	; (80067f0 <__NVIC_SetPriorityGrouping+0x40>)
 80067c2:	68db      	ldr	r3, [r3, #12]
 80067c4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80067c6:	68ba      	ldr	r2, [r7, #8]
 80067c8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80067cc:	4013      	ands	r3, r2
 80067ce:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80067d4:	68bb      	ldr	r3, [r7, #8]
 80067d6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80067d8:	4b06      	ldr	r3, [pc, #24]	; (80067f4 <__NVIC_SetPriorityGrouping+0x44>)
 80067da:	4313      	orrs	r3, r2
 80067dc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80067de:	4a04      	ldr	r2, [pc, #16]	; (80067f0 <__NVIC_SetPriorityGrouping+0x40>)
 80067e0:	68bb      	ldr	r3, [r7, #8]
 80067e2:	60d3      	str	r3, [r2, #12]
}
 80067e4:	bf00      	nop
 80067e6:	3714      	adds	r7, #20
 80067e8:	46bd      	mov	sp, r7
 80067ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ee:	4770      	bx	lr
 80067f0:	e000ed00 	.word	0xe000ed00
 80067f4:	05fa0000 	.word	0x05fa0000

080067f8 <__NVIC_GetPriorityGrouping>:
{
 80067f8:	b480      	push	{r7}
 80067fa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80067fc:	4b04      	ldr	r3, [pc, #16]	; (8006810 <__NVIC_GetPriorityGrouping+0x18>)
 80067fe:	68db      	ldr	r3, [r3, #12]
 8006800:	0a1b      	lsrs	r3, r3, #8
 8006802:	f003 0307 	and.w	r3, r3, #7
}
 8006806:	4618      	mov	r0, r3
 8006808:	46bd      	mov	sp, r7
 800680a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800680e:	4770      	bx	lr
 8006810:	e000ed00 	.word	0xe000ed00

08006814 <__NVIC_EnableIRQ>:
{
 8006814:	b480      	push	{r7}
 8006816:	b083      	sub	sp, #12
 8006818:	af00      	add	r7, sp, #0
 800681a:	4603      	mov	r3, r0
 800681c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800681e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006822:	2b00      	cmp	r3, #0
 8006824:	db0b      	blt.n	800683e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006826:	88fb      	ldrh	r3, [r7, #6]
 8006828:	f003 021f 	and.w	r2, r3, #31
 800682c:	4907      	ldr	r1, [pc, #28]	; (800684c <__NVIC_EnableIRQ+0x38>)
 800682e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006832:	095b      	lsrs	r3, r3, #5
 8006834:	2001      	movs	r0, #1
 8006836:	fa00 f202 	lsl.w	r2, r0, r2
 800683a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800683e:	bf00      	nop
 8006840:	370c      	adds	r7, #12
 8006842:	46bd      	mov	sp, r7
 8006844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006848:	4770      	bx	lr
 800684a:	bf00      	nop
 800684c:	e000e100 	.word	0xe000e100

08006850 <__NVIC_DisableIRQ>:
{
 8006850:	b480      	push	{r7}
 8006852:	b083      	sub	sp, #12
 8006854:	af00      	add	r7, sp, #0
 8006856:	4603      	mov	r3, r0
 8006858:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800685a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800685e:	2b00      	cmp	r3, #0
 8006860:	db12      	blt.n	8006888 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006862:	88fb      	ldrh	r3, [r7, #6]
 8006864:	f003 021f 	and.w	r2, r3, #31
 8006868:	490a      	ldr	r1, [pc, #40]	; (8006894 <__NVIC_DisableIRQ+0x44>)
 800686a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800686e:	095b      	lsrs	r3, r3, #5
 8006870:	2001      	movs	r0, #1
 8006872:	fa00 f202 	lsl.w	r2, r0, r2
 8006876:	3320      	adds	r3, #32
 8006878:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 800687c:	f3bf 8f4f 	dsb	sy
}
 8006880:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8006882:	f3bf 8f6f 	isb	sy
}
 8006886:	bf00      	nop
}
 8006888:	bf00      	nop
 800688a:	370c      	adds	r7, #12
 800688c:	46bd      	mov	sp, r7
 800688e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006892:	4770      	bx	lr
 8006894:	e000e100 	.word	0xe000e100

08006898 <__NVIC_SetPriority>:
{
 8006898:	b480      	push	{r7}
 800689a:	b083      	sub	sp, #12
 800689c:	af00      	add	r7, sp, #0
 800689e:	4603      	mov	r3, r0
 80068a0:	6039      	str	r1, [r7, #0]
 80068a2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80068a4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	db0a      	blt.n	80068c2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80068ac:	683b      	ldr	r3, [r7, #0]
 80068ae:	b2da      	uxtb	r2, r3
 80068b0:	490c      	ldr	r1, [pc, #48]	; (80068e4 <__NVIC_SetPriority+0x4c>)
 80068b2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80068b6:	0112      	lsls	r2, r2, #4
 80068b8:	b2d2      	uxtb	r2, r2
 80068ba:	440b      	add	r3, r1
 80068bc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80068c0:	e00a      	b.n	80068d8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80068c2:	683b      	ldr	r3, [r7, #0]
 80068c4:	b2da      	uxtb	r2, r3
 80068c6:	4908      	ldr	r1, [pc, #32]	; (80068e8 <__NVIC_SetPriority+0x50>)
 80068c8:	88fb      	ldrh	r3, [r7, #6]
 80068ca:	f003 030f 	and.w	r3, r3, #15
 80068ce:	3b04      	subs	r3, #4
 80068d0:	0112      	lsls	r2, r2, #4
 80068d2:	b2d2      	uxtb	r2, r2
 80068d4:	440b      	add	r3, r1
 80068d6:	761a      	strb	r2, [r3, #24]
}
 80068d8:	bf00      	nop
 80068da:	370c      	adds	r7, #12
 80068dc:	46bd      	mov	sp, r7
 80068de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068e2:	4770      	bx	lr
 80068e4:	e000e100 	.word	0xe000e100
 80068e8:	e000ed00 	.word	0xe000ed00

080068ec <NVIC_EncodePriority>:
{
 80068ec:	b480      	push	{r7}
 80068ee:	b089      	sub	sp, #36	; 0x24
 80068f0:	af00      	add	r7, sp, #0
 80068f2:	60f8      	str	r0, [r7, #12]
 80068f4:	60b9      	str	r1, [r7, #8]
 80068f6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	f003 0307 	and.w	r3, r3, #7
 80068fe:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006900:	69fb      	ldr	r3, [r7, #28]
 8006902:	f1c3 0307 	rsb	r3, r3, #7
 8006906:	2b04      	cmp	r3, #4
 8006908:	bf28      	it	cs
 800690a:	2304      	movcs	r3, #4
 800690c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800690e:	69fb      	ldr	r3, [r7, #28]
 8006910:	3304      	adds	r3, #4
 8006912:	2b06      	cmp	r3, #6
 8006914:	d902      	bls.n	800691c <NVIC_EncodePriority+0x30>
 8006916:	69fb      	ldr	r3, [r7, #28]
 8006918:	3b03      	subs	r3, #3
 800691a:	e000      	b.n	800691e <NVIC_EncodePriority+0x32>
 800691c:	2300      	movs	r3, #0
 800691e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006920:	f04f 32ff 	mov.w	r2, #4294967295
 8006924:	69bb      	ldr	r3, [r7, #24]
 8006926:	fa02 f303 	lsl.w	r3, r2, r3
 800692a:	43da      	mvns	r2, r3
 800692c:	68bb      	ldr	r3, [r7, #8]
 800692e:	401a      	ands	r2, r3
 8006930:	697b      	ldr	r3, [r7, #20]
 8006932:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006934:	f04f 31ff 	mov.w	r1, #4294967295
 8006938:	697b      	ldr	r3, [r7, #20]
 800693a:	fa01 f303 	lsl.w	r3, r1, r3
 800693e:	43d9      	mvns	r1, r3
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006944:	4313      	orrs	r3, r2
}
 8006946:	4618      	mov	r0, r3
 8006948:	3724      	adds	r7, #36	; 0x24
 800694a:	46bd      	mov	sp, r7
 800694c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006950:	4770      	bx	lr
	...

08006954 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8006954:	b580      	push	{r7, lr}
 8006956:	b082      	sub	sp, #8
 8006958:	af00      	add	r7, sp, #0
 800695a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	3b01      	subs	r3, #1
 8006960:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006964:	d301      	bcc.n	800696a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8006966:	2301      	movs	r3, #1
 8006968:	e00f      	b.n	800698a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800696a:	4a0a      	ldr	r2, [pc, #40]	; (8006994 <SysTick_Config+0x40>)
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	3b01      	subs	r3, #1
 8006970:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8006972:	210f      	movs	r1, #15
 8006974:	f04f 30ff 	mov.w	r0, #4294967295
 8006978:	f7ff ff8e 	bl	8006898 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800697c:	4b05      	ldr	r3, [pc, #20]	; (8006994 <SysTick_Config+0x40>)
 800697e:	2200      	movs	r2, #0
 8006980:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006982:	4b04      	ldr	r3, [pc, #16]	; (8006994 <SysTick_Config+0x40>)
 8006984:	2207      	movs	r2, #7
 8006986:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006988:	2300      	movs	r3, #0
}
 800698a:	4618      	mov	r0, r3
 800698c:	3708      	adds	r7, #8
 800698e:	46bd      	mov	sp, r7
 8006990:	bd80      	pop	{r7, pc}
 8006992:	bf00      	nop
 8006994:	e000e010 	.word	0xe000e010

08006998 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006998:	b580      	push	{r7, lr}
 800699a:	b082      	sub	sp, #8
 800699c:	af00      	add	r7, sp, #0
 800699e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80069a0:	6878      	ldr	r0, [r7, #4]
 80069a2:	f7ff ff05 	bl	80067b0 <__NVIC_SetPriorityGrouping>
}
 80069a6:	bf00      	nop
 80069a8:	3708      	adds	r7, #8
 80069aa:	46bd      	mov	sp, r7
 80069ac:	bd80      	pop	{r7, pc}

080069ae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80069ae:	b580      	push	{r7, lr}
 80069b0:	b086      	sub	sp, #24
 80069b2:	af00      	add	r7, sp, #0
 80069b4:	4603      	mov	r3, r0
 80069b6:	60b9      	str	r1, [r7, #8]
 80069b8:	607a      	str	r2, [r7, #4]
 80069ba:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80069bc:	f7ff ff1c 	bl	80067f8 <__NVIC_GetPriorityGrouping>
 80069c0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80069c2:	687a      	ldr	r2, [r7, #4]
 80069c4:	68b9      	ldr	r1, [r7, #8]
 80069c6:	6978      	ldr	r0, [r7, #20]
 80069c8:	f7ff ff90 	bl	80068ec <NVIC_EncodePriority>
 80069cc:	4602      	mov	r2, r0
 80069ce:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80069d2:	4611      	mov	r1, r2
 80069d4:	4618      	mov	r0, r3
 80069d6:	f7ff ff5f 	bl	8006898 <__NVIC_SetPriority>
}
 80069da:	bf00      	nop
 80069dc:	3718      	adds	r7, #24
 80069de:	46bd      	mov	sp, r7
 80069e0:	bd80      	pop	{r7, pc}

080069e2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80069e2:	b580      	push	{r7, lr}
 80069e4:	b082      	sub	sp, #8
 80069e6:	af00      	add	r7, sp, #0
 80069e8:	4603      	mov	r3, r0
 80069ea:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80069ec:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80069f0:	4618      	mov	r0, r3
 80069f2:	f7ff ff0f 	bl	8006814 <__NVIC_EnableIRQ>
}
 80069f6:	bf00      	nop
 80069f8:	3708      	adds	r7, #8
 80069fa:	46bd      	mov	sp, r7
 80069fc:	bd80      	pop	{r7, pc}

080069fe <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80069fe:	b580      	push	{r7, lr}
 8006a00:	b082      	sub	sp, #8
 8006a02:	af00      	add	r7, sp, #0
 8006a04:	4603      	mov	r3, r0
 8006a06:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8006a08:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006a0c:	4618      	mov	r0, r3
 8006a0e:	f7ff ff1f 	bl	8006850 <__NVIC_DisableIRQ>
}
 8006a12:	bf00      	nop
 8006a14:	3708      	adds	r7, #8
 8006a16:	46bd      	mov	sp, r7
 8006a18:	bd80      	pop	{r7, pc}

08006a1a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8006a1a:	b580      	push	{r7, lr}
 8006a1c:	b082      	sub	sp, #8
 8006a1e:	af00      	add	r7, sp, #0
 8006a20:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8006a22:	6878      	ldr	r0, [r7, #4]
 8006a24:	f7ff ff96 	bl	8006954 <SysTick_Config>
 8006a28:	4603      	mov	r3, r0
}
 8006a2a:	4618      	mov	r0, r3
 8006a2c:	3708      	adds	r7, #8
 8006a2e:	46bd      	mov	sp, r7
 8006a30:	bd80      	pop	{r7, pc}
	...

08006a34 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8006a34:	b580      	push	{r7, lr}
 8006a36:	b086      	sub	sp, #24
 8006a38:	af00      	add	r7, sp, #0
 8006a3a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8006a3c:	f7ff fe7c 	bl	8006738 <HAL_GetTick>
 8006a40:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d101      	bne.n	8006a4c <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8006a48:	2301      	movs	r3, #1
 8006a4a:	e2dc      	b.n	8007006 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006a52:	b2db      	uxtb	r3, r3
 8006a54:	2b02      	cmp	r3, #2
 8006a56:	d008      	beq.n	8006a6a <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	2280      	movs	r2, #128	; 0x80
 8006a5c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	2200      	movs	r2, #0
 8006a62:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 8006a66:	2301      	movs	r3, #1
 8006a68:	e2cd      	b.n	8007006 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	4a76      	ldr	r2, [pc, #472]	; (8006c48 <HAL_DMA_Abort+0x214>)
 8006a70:	4293      	cmp	r3, r2
 8006a72:	d04a      	beq.n	8006b0a <HAL_DMA_Abort+0xd6>
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	4a74      	ldr	r2, [pc, #464]	; (8006c4c <HAL_DMA_Abort+0x218>)
 8006a7a:	4293      	cmp	r3, r2
 8006a7c:	d045      	beq.n	8006b0a <HAL_DMA_Abort+0xd6>
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	4a73      	ldr	r2, [pc, #460]	; (8006c50 <HAL_DMA_Abort+0x21c>)
 8006a84:	4293      	cmp	r3, r2
 8006a86:	d040      	beq.n	8006b0a <HAL_DMA_Abort+0xd6>
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	4a71      	ldr	r2, [pc, #452]	; (8006c54 <HAL_DMA_Abort+0x220>)
 8006a8e:	4293      	cmp	r3, r2
 8006a90:	d03b      	beq.n	8006b0a <HAL_DMA_Abort+0xd6>
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	4a70      	ldr	r2, [pc, #448]	; (8006c58 <HAL_DMA_Abort+0x224>)
 8006a98:	4293      	cmp	r3, r2
 8006a9a:	d036      	beq.n	8006b0a <HAL_DMA_Abort+0xd6>
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	4a6e      	ldr	r2, [pc, #440]	; (8006c5c <HAL_DMA_Abort+0x228>)
 8006aa2:	4293      	cmp	r3, r2
 8006aa4:	d031      	beq.n	8006b0a <HAL_DMA_Abort+0xd6>
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	4a6d      	ldr	r2, [pc, #436]	; (8006c60 <HAL_DMA_Abort+0x22c>)
 8006aac:	4293      	cmp	r3, r2
 8006aae:	d02c      	beq.n	8006b0a <HAL_DMA_Abort+0xd6>
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	4a6b      	ldr	r2, [pc, #428]	; (8006c64 <HAL_DMA_Abort+0x230>)
 8006ab6:	4293      	cmp	r3, r2
 8006ab8:	d027      	beq.n	8006b0a <HAL_DMA_Abort+0xd6>
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	4a6a      	ldr	r2, [pc, #424]	; (8006c68 <HAL_DMA_Abort+0x234>)
 8006ac0:	4293      	cmp	r3, r2
 8006ac2:	d022      	beq.n	8006b0a <HAL_DMA_Abort+0xd6>
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	4a68      	ldr	r2, [pc, #416]	; (8006c6c <HAL_DMA_Abort+0x238>)
 8006aca:	4293      	cmp	r3, r2
 8006acc:	d01d      	beq.n	8006b0a <HAL_DMA_Abort+0xd6>
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	4a67      	ldr	r2, [pc, #412]	; (8006c70 <HAL_DMA_Abort+0x23c>)
 8006ad4:	4293      	cmp	r3, r2
 8006ad6:	d018      	beq.n	8006b0a <HAL_DMA_Abort+0xd6>
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	4a65      	ldr	r2, [pc, #404]	; (8006c74 <HAL_DMA_Abort+0x240>)
 8006ade:	4293      	cmp	r3, r2
 8006ae0:	d013      	beq.n	8006b0a <HAL_DMA_Abort+0xd6>
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	4a64      	ldr	r2, [pc, #400]	; (8006c78 <HAL_DMA_Abort+0x244>)
 8006ae8:	4293      	cmp	r3, r2
 8006aea:	d00e      	beq.n	8006b0a <HAL_DMA_Abort+0xd6>
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	4a62      	ldr	r2, [pc, #392]	; (8006c7c <HAL_DMA_Abort+0x248>)
 8006af2:	4293      	cmp	r3, r2
 8006af4:	d009      	beq.n	8006b0a <HAL_DMA_Abort+0xd6>
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	4a61      	ldr	r2, [pc, #388]	; (8006c80 <HAL_DMA_Abort+0x24c>)
 8006afc:	4293      	cmp	r3, r2
 8006afe:	d004      	beq.n	8006b0a <HAL_DMA_Abort+0xd6>
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	4a5f      	ldr	r2, [pc, #380]	; (8006c84 <HAL_DMA_Abort+0x250>)
 8006b06:	4293      	cmp	r3, r2
 8006b08:	d101      	bne.n	8006b0e <HAL_DMA_Abort+0xda>
 8006b0a:	2301      	movs	r3, #1
 8006b0c:	e000      	b.n	8006b10 <HAL_DMA_Abort+0xdc>
 8006b0e:	2300      	movs	r3, #0
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	d013      	beq.n	8006b3c <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	681a      	ldr	r2, [r3, #0]
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	f022 021e 	bic.w	r2, r2, #30
 8006b22:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	695a      	ldr	r2, [r3, #20]
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006b32:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	617b      	str	r3, [r7, #20]
 8006b3a:	e00a      	b.n	8006b52 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	681a      	ldr	r2, [r3, #0]
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	f022 020e 	bic.w	r2, r2, #14
 8006b4a:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	4a3c      	ldr	r2, [pc, #240]	; (8006c48 <HAL_DMA_Abort+0x214>)
 8006b58:	4293      	cmp	r3, r2
 8006b5a:	d072      	beq.n	8006c42 <HAL_DMA_Abort+0x20e>
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	4a3a      	ldr	r2, [pc, #232]	; (8006c4c <HAL_DMA_Abort+0x218>)
 8006b62:	4293      	cmp	r3, r2
 8006b64:	d06d      	beq.n	8006c42 <HAL_DMA_Abort+0x20e>
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	4a39      	ldr	r2, [pc, #228]	; (8006c50 <HAL_DMA_Abort+0x21c>)
 8006b6c:	4293      	cmp	r3, r2
 8006b6e:	d068      	beq.n	8006c42 <HAL_DMA_Abort+0x20e>
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	4a37      	ldr	r2, [pc, #220]	; (8006c54 <HAL_DMA_Abort+0x220>)
 8006b76:	4293      	cmp	r3, r2
 8006b78:	d063      	beq.n	8006c42 <HAL_DMA_Abort+0x20e>
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	4a36      	ldr	r2, [pc, #216]	; (8006c58 <HAL_DMA_Abort+0x224>)
 8006b80:	4293      	cmp	r3, r2
 8006b82:	d05e      	beq.n	8006c42 <HAL_DMA_Abort+0x20e>
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	4a34      	ldr	r2, [pc, #208]	; (8006c5c <HAL_DMA_Abort+0x228>)
 8006b8a:	4293      	cmp	r3, r2
 8006b8c:	d059      	beq.n	8006c42 <HAL_DMA_Abort+0x20e>
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	4a33      	ldr	r2, [pc, #204]	; (8006c60 <HAL_DMA_Abort+0x22c>)
 8006b94:	4293      	cmp	r3, r2
 8006b96:	d054      	beq.n	8006c42 <HAL_DMA_Abort+0x20e>
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	4a31      	ldr	r2, [pc, #196]	; (8006c64 <HAL_DMA_Abort+0x230>)
 8006b9e:	4293      	cmp	r3, r2
 8006ba0:	d04f      	beq.n	8006c42 <HAL_DMA_Abort+0x20e>
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	4a30      	ldr	r2, [pc, #192]	; (8006c68 <HAL_DMA_Abort+0x234>)
 8006ba8:	4293      	cmp	r3, r2
 8006baa:	d04a      	beq.n	8006c42 <HAL_DMA_Abort+0x20e>
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	4a2e      	ldr	r2, [pc, #184]	; (8006c6c <HAL_DMA_Abort+0x238>)
 8006bb2:	4293      	cmp	r3, r2
 8006bb4:	d045      	beq.n	8006c42 <HAL_DMA_Abort+0x20e>
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	4a2d      	ldr	r2, [pc, #180]	; (8006c70 <HAL_DMA_Abort+0x23c>)
 8006bbc:	4293      	cmp	r3, r2
 8006bbe:	d040      	beq.n	8006c42 <HAL_DMA_Abort+0x20e>
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	4a2b      	ldr	r2, [pc, #172]	; (8006c74 <HAL_DMA_Abort+0x240>)
 8006bc6:	4293      	cmp	r3, r2
 8006bc8:	d03b      	beq.n	8006c42 <HAL_DMA_Abort+0x20e>
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	4a2a      	ldr	r2, [pc, #168]	; (8006c78 <HAL_DMA_Abort+0x244>)
 8006bd0:	4293      	cmp	r3, r2
 8006bd2:	d036      	beq.n	8006c42 <HAL_DMA_Abort+0x20e>
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	4a28      	ldr	r2, [pc, #160]	; (8006c7c <HAL_DMA_Abort+0x248>)
 8006bda:	4293      	cmp	r3, r2
 8006bdc:	d031      	beq.n	8006c42 <HAL_DMA_Abort+0x20e>
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	4a27      	ldr	r2, [pc, #156]	; (8006c80 <HAL_DMA_Abort+0x24c>)
 8006be4:	4293      	cmp	r3, r2
 8006be6:	d02c      	beq.n	8006c42 <HAL_DMA_Abort+0x20e>
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	4a25      	ldr	r2, [pc, #148]	; (8006c84 <HAL_DMA_Abort+0x250>)
 8006bee:	4293      	cmp	r3, r2
 8006bf0:	d027      	beq.n	8006c42 <HAL_DMA_Abort+0x20e>
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	4a24      	ldr	r2, [pc, #144]	; (8006c88 <HAL_DMA_Abort+0x254>)
 8006bf8:	4293      	cmp	r3, r2
 8006bfa:	d022      	beq.n	8006c42 <HAL_DMA_Abort+0x20e>
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	4a22      	ldr	r2, [pc, #136]	; (8006c8c <HAL_DMA_Abort+0x258>)
 8006c02:	4293      	cmp	r3, r2
 8006c04:	d01d      	beq.n	8006c42 <HAL_DMA_Abort+0x20e>
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	4a21      	ldr	r2, [pc, #132]	; (8006c90 <HAL_DMA_Abort+0x25c>)
 8006c0c:	4293      	cmp	r3, r2
 8006c0e:	d018      	beq.n	8006c42 <HAL_DMA_Abort+0x20e>
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	4a1f      	ldr	r2, [pc, #124]	; (8006c94 <HAL_DMA_Abort+0x260>)
 8006c16:	4293      	cmp	r3, r2
 8006c18:	d013      	beq.n	8006c42 <HAL_DMA_Abort+0x20e>
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	4a1e      	ldr	r2, [pc, #120]	; (8006c98 <HAL_DMA_Abort+0x264>)
 8006c20:	4293      	cmp	r3, r2
 8006c22:	d00e      	beq.n	8006c42 <HAL_DMA_Abort+0x20e>
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	4a1c      	ldr	r2, [pc, #112]	; (8006c9c <HAL_DMA_Abort+0x268>)
 8006c2a:	4293      	cmp	r3, r2
 8006c2c:	d009      	beq.n	8006c42 <HAL_DMA_Abort+0x20e>
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	4a1b      	ldr	r2, [pc, #108]	; (8006ca0 <HAL_DMA_Abort+0x26c>)
 8006c34:	4293      	cmp	r3, r2
 8006c36:	d004      	beq.n	8006c42 <HAL_DMA_Abort+0x20e>
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	4a19      	ldr	r2, [pc, #100]	; (8006ca4 <HAL_DMA_Abort+0x270>)
 8006c3e:	4293      	cmp	r3, r2
 8006c40:	d132      	bne.n	8006ca8 <HAL_DMA_Abort+0x274>
 8006c42:	2301      	movs	r3, #1
 8006c44:	e031      	b.n	8006caa <HAL_DMA_Abort+0x276>
 8006c46:	bf00      	nop
 8006c48:	40020010 	.word	0x40020010
 8006c4c:	40020028 	.word	0x40020028
 8006c50:	40020040 	.word	0x40020040
 8006c54:	40020058 	.word	0x40020058
 8006c58:	40020070 	.word	0x40020070
 8006c5c:	40020088 	.word	0x40020088
 8006c60:	400200a0 	.word	0x400200a0
 8006c64:	400200b8 	.word	0x400200b8
 8006c68:	40020410 	.word	0x40020410
 8006c6c:	40020428 	.word	0x40020428
 8006c70:	40020440 	.word	0x40020440
 8006c74:	40020458 	.word	0x40020458
 8006c78:	40020470 	.word	0x40020470
 8006c7c:	40020488 	.word	0x40020488
 8006c80:	400204a0 	.word	0x400204a0
 8006c84:	400204b8 	.word	0x400204b8
 8006c88:	58025408 	.word	0x58025408
 8006c8c:	5802541c 	.word	0x5802541c
 8006c90:	58025430 	.word	0x58025430
 8006c94:	58025444 	.word	0x58025444
 8006c98:	58025458 	.word	0x58025458
 8006c9c:	5802546c 	.word	0x5802546c
 8006ca0:	58025480 	.word	0x58025480
 8006ca4:	58025494 	.word	0x58025494
 8006ca8:	2300      	movs	r3, #0
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d007      	beq.n	8006cbe <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006cb2:	681a      	ldr	r2, [r3, #0]
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006cb8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006cbc:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	4a6d      	ldr	r2, [pc, #436]	; (8006e78 <HAL_DMA_Abort+0x444>)
 8006cc4:	4293      	cmp	r3, r2
 8006cc6:	d04a      	beq.n	8006d5e <HAL_DMA_Abort+0x32a>
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	4a6b      	ldr	r2, [pc, #428]	; (8006e7c <HAL_DMA_Abort+0x448>)
 8006cce:	4293      	cmp	r3, r2
 8006cd0:	d045      	beq.n	8006d5e <HAL_DMA_Abort+0x32a>
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	4a6a      	ldr	r2, [pc, #424]	; (8006e80 <HAL_DMA_Abort+0x44c>)
 8006cd8:	4293      	cmp	r3, r2
 8006cda:	d040      	beq.n	8006d5e <HAL_DMA_Abort+0x32a>
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	4a68      	ldr	r2, [pc, #416]	; (8006e84 <HAL_DMA_Abort+0x450>)
 8006ce2:	4293      	cmp	r3, r2
 8006ce4:	d03b      	beq.n	8006d5e <HAL_DMA_Abort+0x32a>
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	4a67      	ldr	r2, [pc, #412]	; (8006e88 <HAL_DMA_Abort+0x454>)
 8006cec:	4293      	cmp	r3, r2
 8006cee:	d036      	beq.n	8006d5e <HAL_DMA_Abort+0x32a>
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	4a65      	ldr	r2, [pc, #404]	; (8006e8c <HAL_DMA_Abort+0x458>)
 8006cf6:	4293      	cmp	r3, r2
 8006cf8:	d031      	beq.n	8006d5e <HAL_DMA_Abort+0x32a>
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	4a64      	ldr	r2, [pc, #400]	; (8006e90 <HAL_DMA_Abort+0x45c>)
 8006d00:	4293      	cmp	r3, r2
 8006d02:	d02c      	beq.n	8006d5e <HAL_DMA_Abort+0x32a>
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	4a62      	ldr	r2, [pc, #392]	; (8006e94 <HAL_DMA_Abort+0x460>)
 8006d0a:	4293      	cmp	r3, r2
 8006d0c:	d027      	beq.n	8006d5e <HAL_DMA_Abort+0x32a>
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	4a61      	ldr	r2, [pc, #388]	; (8006e98 <HAL_DMA_Abort+0x464>)
 8006d14:	4293      	cmp	r3, r2
 8006d16:	d022      	beq.n	8006d5e <HAL_DMA_Abort+0x32a>
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	4a5f      	ldr	r2, [pc, #380]	; (8006e9c <HAL_DMA_Abort+0x468>)
 8006d1e:	4293      	cmp	r3, r2
 8006d20:	d01d      	beq.n	8006d5e <HAL_DMA_Abort+0x32a>
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	4a5e      	ldr	r2, [pc, #376]	; (8006ea0 <HAL_DMA_Abort+0x46c>)
 8006d28:	4293      	cmp	r3, r2
 8006d2a:	d018      	beq.n	8006d5e <HAL_DMA_Abort+0x32a>
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	4a5c      	ldr	r2, [pc, #368]	; (8006ea4 <HAL_DMA_Abort+0x470>)
 8006d32:	4293      	cmp	r3, r2
 8006d34:	d013      	beq.n	8006d5e <HAL_DMA_Abort+0x32a>
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	4a5b      	ldr	r2, [pc, #364]	; (8006ea8 <HAL_DMA_Abort+0x474>)
 8006d3c:	4293      	cmp	r3, r2
 8006d3e:	d00e      	beq.n	8006d5e <HAL_DMA_Abort+0x32a>
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	4a59      	ldr	r2, [pc, #356]	; (8006eac <HAL_DMA_Abort+0x478>)
 8006d46:	4293      	cmp	r3, r2
 8006d48:	d009      	beq.n	8006d5e <HAL_DMA_Abort+0x32a>
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	4a58      	ldr	r2, [pc, #352]	; (8006eb0 <HAL_DMA_Abort+0x47c>)
 8006d50:	4293      	cmp	r3, r2
 8006d52:	d004      	beq.n	8006d5e <HAL_DMA_Abort+0x32a>
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	4a56      	ldr	r2, [pc, #344]	; (8006eb4 <HAL_DMA_Abort+0x480>)
 8006d5a:	4293      	cmp	r3, r2
 8006d5c:	d108      	bne.n	8006d70 <HAL_DMA_Abort+0x33c>
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	681a      	ldr	r2, [r3, #0]
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	f022 0201 	bic.w	r2, r2, #1
 8006d6c:	601a      	str	r2, [r3, #0]
 8006d6e:	e007      	b.n	8006d80 <HAL_DMA_Abort+0x34c>
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	681a      	ldr	r2, [r3, #0]
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	f022 0201 	bic.w	r2, r2, #1
 8006d7e:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8006d80:	e013      	b.n	8006daa <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8006d82:	f7ff fcd9 	bl	8006738 <HAL_GetTick>
 8006d86:	4602      	mov	r2, r0
 8006d88:	693b      	ldr	r3, [r7, #16]
 8006d8a:	1ad3      	subs	r3, r2, r3
 8006d8c:	2b05      	cmp	r3, #5
 8006d8e:	d90c      	bls.n	8006daa <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	2220      	movs	r2, #32
 8006d94:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	2203      	movs	r2, #3
 8006d9a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	2200      	movs	r2, #0
 8006da2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 8006da6:	2301      	movs	r3, #1
 8006da8:	e12d      	b.n	8007006 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8006daa:	697b      	ldr	r3, [r7, #20]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	f003 0301 	and.w	r3, r3, #1
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d1e5      	bne.n	8006d82 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	4a2f      	ldr	r2, [pc, #188]	; (8006e78 <HAL_DMA_Abort+0x444>)
 8006dbc:	4293      	cmp	r3, r2
 8006dbe:	d04a      	beq.n	8006e56 <HAL_DMA_Abort+0x422>
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	4a2d      	ldr	r2, [pc, #180]	; (8006e7c <HAL_DMA_Abort+0x448>)
 8006dc6:	4293      	cmp	r3, r2
 8006dc8:	d045      	beq.n	8006e56 <HAL_DMA_Abort+0x422>
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	4a2c      	ldr	r2, [pc, #176]	; (8006e80 <HAL_DMA_Abort+0x44c>)
 8006dd0:	4293      	cmp	r3, r2
 8006dd2:	d040      	beq.n	8006e56 <HAL_DMA_Abort+0x422>
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	4a2a      	ldr	r2, [pc, #168]	; (8006e84 <HAL_DMA_Abort+0x450>)
 8006dda:	4293      	cmp	r3, r2
 8006ddc:	d03b      	beq.n	8006e56 <HAL_DMA_Abort+0x422>
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	4a29      	ldr	r2, [pc, #164]	; (8006e88 <HAL_DMA_Abort+0x454>)
 8006de4:	4293      	cmp	r3, r2
 8006de6:	d036      	beq.n	8006e56 <HAL_DMA_Abort+0x422>
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	4a27      	ldr	r2, [pc, #156]	; (8006e8c <HAL_DMA_Abort+0x458>)
 8006dee:	4293      	cmp	r3, r2
 8006df0:	d031      	beq.n	8006e56 <HAL_DMA_Abort+0x422>
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	4a26      	ldr	r2, [pc, #152]	; (8006e90 <HAL_DMA_Abort+0x45c>)
 8006df8:	4293      	cmp	r3, r2
 8006dfa:	d02c      	beq.n	8006e56 <HAL_DMA_Abort+0x422>
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	4a24      	ldr	r2, [pc, #144]	; (8006e94 <HAL_DMA_Abort+0x460>)
 8006e02:	4293      	cmp	r3, r2
 8006e04:	d027      	beq.n	8006e56 <HAL_DMA_Abort+0x422>
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	4a23      	ldr	r2, [pc, #140]	; (8006e98 <HAL_DMA_Abort+0x464>)
 8006e0c:	4293      	cmp	r3, r2
 8006e0e:	d022      	beq.n	8006e56 <HAL_DMA_Abort+0x422>
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	4a21      	ldr	r2, [pc, #132]	; (8006e9c <HAL_DMA_Abort+0x468>)
 8006e16:	4293      	cmp	r3, r2
 8006e18:	d01d      	beq.n	8006e56 <HAL_DMA_Abort+0x422>
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	4a20      	ldr	r2, [pc, #128]	; (8006ea0 <HAL_DMA_Abort+0x46c>)
 8006e20:	4293      	cmp	r3, r2
 8006e22:	d018      	beq.n	8006e56 <HAL_DMA_Abort+0x422>
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	4a1e      	ldr	r2, [pc, #120]	; (8006ea4 <HAL_DMA_Abort+0x470>)
 8006e2a:	4293      	cmp	r3, r2
 8006e2c:	d013      	beq.n	8006e56 <HAL_DMA_Abort+0x422>
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	4a1d      	ldr	r2, [pc, #116]	; (8006ea8 <HAL_DMA_Abort+0x474>)
 8006e34:	4293      	cmp	r3, r2
 8006e36:	d00e      	beq.n	8006e56 <HAL_DMA_Abort+0x422>
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	4a1b      	ldr	r2, [pc, #108]	; (8006eac <HAL_DMA_Abort+0x478>)
 8006e3e:	4293      	cmp	r3, r2
 8006e40:	d009      	beq.n	8006e56 <HAL_DMA_Abort+0x422>
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	4a1a      	ldr	r2, [pc, #104]	; (8006eb0 <HAL_DMA_Abort+0x47c>)
 8006e48:	4293      	cmp	r3, r2
 8006e4a:	d004      	beq.n	8006e56 <HAL_DMA_Abort+0x422>
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	4a18      	ldr	r2, [pc, #96]	; (8006eb4 <HAL_DMA_Abort+0x480>)
 8006e52:	4293      	cmp	r3, r2
 8006e54:	d101      	bne.n	8006e5a <HAL_DMA_Abort+0x426>
 8006e56:	2301      	movs	r3, #1
 8006e58:	e000      	b.n	8006e5c <HAL_DMA_Abort+0x428>
 8006e5a:	2300      	movs	r3, #0
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	d02b      	beq.n	8006eb8 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006e64:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006e6a:	f003 031f 	and.w	r3, r3, #31
 8006e6e:	223f      	movs	r2, #63	; 0x3f
 8006e70:	409a      	lsls	r2, r3
 8006e72:	68bb      	ldr	r3, [r7, #8]
 8006e74:	609a      	str	r2, [r3, #8]
 8006e76:	e02a      	b.n	8006ece <HAL_DMA_Abort+0x49a>
 8006e78:	40020010 	.word	0x40020010
 8006e7c:	40020028 	.word	0x40020028
 8006e80:	40020040 	.word	0x40020040
 8006e84:	40020058 	.word	0x40020058
 8006e88:	40020070 	.word	0x40020070
 8006e8c:	40020088 	.word	0x40020088
 8006e90:	400200a0 	.word	0x400200a0
 8006e94:	400200b8 	.word	0x400200b8
 8006e98:	40020410 	.word	0x40020410
 8006e9c:	40020428 	.word	0x40020428
 8006ea0:	40020440 	.word	0x40020440
 8006ea4:	40020458 	.word	0x40020458
 8006ea8:	40020470 	.word	0x40020470
 8006eac:	40020488 	.word	0x40020488
 8006eb0:	400204a0 	.word	0x400204a0
 8006eb4:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006ebc:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006ec2:	f003 031f 	and.w	r3, r3, #31
 8006ec6:	2201      	movs	r2, #1
 8006ec8:	409a      	lsls	r2, r3
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	4a4f      	ldr	r2, [pc, #316]	; (8007010 <HAL_DMA_Abort+0x5dc>)
 8006ed4:	4293      	cmp	r3, r2
 8006ed6:	d072      	beq.n	8006fbe <HAL_DMA_Abort+0x58a>
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	4a4d      	ldr	r2, [pc, #308]	; (8007014 <HAL_DMA_Abort+0x5e0>)
 8006ede:	4293      	cmp	r3, r2
 8006ee0:	d06d      	beq.n	8006fbe <HAL_DMA_Abort+0x58a>
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	4a4c      	ldr	r2, [pc, #304]	; (8007018 <HAL_DMA_Abort+0x5e4>)
 8006ee8:	4293      	cmp	r3, r2
 8006eea:	d068      	beq.n	8006fbe <HAL_DMA_Abort+0x58a>
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	4a4a      	ldr	r2, [pc, #296]	; (800701c <HAL_DMA_Abort+0x5e8>)
 8006ef2:	4293      	cmp	r3, r2
 8006ef4:	d063      	beq.n	8006fbe <HAL_DMA_Abort+0x58a>
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	4a49      	ldr	r2, [pc, #292]	; (8007020 <HAL_DMA_Abort+0x5ec>)
 8006efc:	4293      	cmp	r3, r2
 8006efe:	d05e      	beq.n	8006fbe <HAL_DMA_Abort+0x58a>
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	4a47      	ldr	r2, [pc, #284]	; (8007024 <HAL_DMA_Abort+0x5f0>)
 8006f06:	4293      	cmp	r3, r2
 8006f08:	d059      	beq.n	8006fbe <HAL_DMA_Abort+0x58a>
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	4a46      	ldr	r2, [pc, #280]	; (8007028 <HAL_DMA_Abort+0x5f4>)
 8006f10:	4293      	cmp	r3, r2
 8006f12:	d054      	beq.n	8006fbe <HAL_DMA_Abort+0x58a>
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	4a44      	ldr	r2, [pc, #272]	; (800702c <HAL_DMA_Abort+0x5f8>)
 8006f1a:	4293      	cmp	r3, r2
 8006f1c:	d04f      	beq.n	8006fbe <HAL_DMA_Abort+0x58a>
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	4a43      	ldr	r2, [pc, #268]	; (8007030 <HAL_DMA_Abort+0x5fc>)
 8006f24:	4293      	cmp	r3, r2
 8006f26:	d04a      	beq.n	8006fbe <HAL_DMA_Abort+0x58a>
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	4a41      	ldr	r2, [pc, #260]	; (8007034 <HAL_DMA_Abort+0x600>)
 8006f2e:	4293      	cmp	r3, r2
 8006f30:	d045      	beq.n	8006fbe <HAL_DMA_Abort+0x58a>
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	4a40      	ldr	r2, [pc, #256]	; (8007038 <HAL_DMA_Abort+0x604>)
 8006f38:	4293      	cmp	r3, r2
 8006f3a:	d040      	beq.n	8006fbe <HAL_DMA_Abort+0x58a>
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	4a3e      	ldr	r2, [pc, #248]	; (800703c <HAL_DMA_Abort+0x608>)
 8006f42:	4293      	cmp	r3, r2
 8006f44:	d03b      	beq.n	8006fbe <HAL_DMA_Abort+0x58a>
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	4a3d      	ldr	r2, [pc, #244]	; (8007040 <HAL_DMA_Abort+0x60c>)
 8006f4c:	4293      	cmp	r3, r2
 8006f4e:	d036      	beq.n	8006fbe <HAL_DMA_Abort+0x58a>
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	4a3b      	ldr	r2, [pc, #236]	; (8007044 <HAL_DMA_Abort+0x610>)
 8006f56:	4293      	cmp	r3, r2
 8006f58:	d031      	beq.n	8006fbe <HAL_DMA_Abort+0x58a>
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	4a3a      	ldr	r2, [pc, #232]	; (8007048 <HAL_DMA_Abort+0x614>)
 8006f60:	4293      	cmp	r3, r2
 8006f62:	d02c      	beq.n	8006fbe <HAL_DMA_Abort+0x58a>
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	4a38      	ldr	r2, [pc, #224]	; (800704c <HAL_DMA_Abort+0x618>)
 8006f6a:	4293      	cmp	r3, r2
 8006f6c:	d027      	beq.n	8006fbe <HAL_DMA_Abort+0x58a>
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	4a37      	ldr	r2, [pc, #220]	; (8007050 <HAL_DMA_Abort+0x61c>)
 8006f74:	4293      	cmp	r3, r2
 8006f76:	d022      	beq.n	8006fbe <HAL_DMA_Abort+0x58a>
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	4a35      	ldr	r2, [pc, #212]	; (8007054 <HAL_DMA_Abort+0x620>)
 8006f7e:	4293      	cmp	r3, r2
 8006f80:	d01d      	beq.n	8006fbe <HAL_DMA_Abort+0x58a>
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	4a34      	ldr	r2, [pc, #208]	; (8007058 <HAL_DMA_Abort+0x624>)
 8006f88:	4293      	cmp	r3, r2
 8006f8a:	d018      	beq.n	8006fbe <HAL_DMA_Abort+0x58a>
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	4a32      	ldr	r2, [pc, #200]	; (800705c <HAL_DMA_Abort+0x628>)
 8006f92:	4293      	cmp	r3, r2
 8006f94:	d013      	beq.n	8006fbe <HAL_DMA_Abort+0x58a>
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	4a31      	ldr	r2, [pc, #196]	; (8007060 <HAL_DMA_Abort+0x62c>)
 8006f9c:	4293      	cmp	r3, r2
 8006f9e:	d00e      	beq.n	8006fbe <HAL_DMA_Abort+0x58a>
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	4a2f      	ldr	r2, [pc, #188]	; (8007064 <HAL_DMA_Abort+0x630>)
 8006fa6:	4293      	cmp	r3, r2
 8006fa8:	d009      	beq.n	8006fbe <HAL_DMA_Abort+0x58a>
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	4a2e      	ldr	r2, [pc, #184]	; (8007068 <HAL_DMA_Abort+0x634>)
 8006fb0:	4293      	cmp	r3, r2
 8006fb2:	d004      	beq.n	8006fbe <HAL_DMA_Abort+0x58a>
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	4a2c      	ldr	r2, [pc, #176]	; (800706c <HAL_DMA_Abort+0x638>)
 8006fba:	4293      	cmp	r3, r2
 8006fbc:	d101      	bne.n	8006fc2 <HAL_DMA_Abort+0x58e>
 8006fbe:	2301      	movs	r3, #1
 8006fc0:	e000      	b.n	8006fc4 <HAL_DMA_Abort+0x590>
 8006fc2:	2300      	movs	r3, #0
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d015      	beq.n	8006ff4 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006fcc:	687a      	ldr	r2, [r7, #4]
 8006fce:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8006fd0:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d00c      	beq.n	8006ff4 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006fde:	681a      	ldr	r2, [r3, #0]
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006fe4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006fe8:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006fee:	687a      	ldr	r2, [r7, #4]
 8006ff0:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8006ff2:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	2201      	movs	r2, #1
 8006ff8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	2200      	movs	r2, #0
 8007000:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 8007004:	2300      	movs	r3, #0
}
 8007006:	4618      	mov	r0, r3
 8007008:	3718      	adds	r7, #24
 800700a:	46bd      	mov	sp, r7
 800700c:	bd80      	pop	{r7, pc}
 800700e:	bf00      	nop
 8007010:	40020010 	.word	0x40020010
 8007014:	40020028 	.word	0x40020028
 8007018:	40020040 	.word	0x40020040
 800701c:	40020058 	.word	0x40020058
 8007020:	40020070 	.word	0x40020070
 8007024:	40020088 	.word	0x40020088
 8007028:	400200a0 	.word	0x400200a0
 800702c:	400200b8 	.word	0x400200b8
 8007030:	40020410 	.word	0x40020410
 8007034:	40020428 	.word	0x40020428
 8007038:	40020440 	.word	0x40020440
 800703c:	40020458 	.word	0x40020458
 8007040:	40020470 	.word	0x40020470
 8007044:	40020488 	.word	0x40020488
 8007048:	400204a0 	.word	0x400204a0
 800704c:	400204b8 	.word	0x400204b8
 8007050:	58025408 	.word	0x58025408
 8007054:	5802541c 	.word	0x5802541c
 8007058:	58025430 	.word	0x58025430
 800705c:	58025444 	.word	0x58025444
 8007060:	58025458 	.word	0x58025458
 8007064:	5802546c 	.word	0x5802546c
 8007068:	58025480 	.word	0x58025480
 800706c:	58025494 	.word	0x58025494

08007070 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8007070:	b580      	push	{r7, lr}
 8007072:	b084      	sub	sp, #16
 8007074:	af00      	add	r7, sp, #0
 8007076:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	2b00      	cmp	r3, #0
 800707c:	d101      	bne.n	8007082 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 800707e:	2301      	movs	r3, #1
 8007080:	e237      	b.n	80074f2 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007088:	b2db      	uxtb	r3, r3
 800708a:	2b02      	cmp	r3, #2
 800708c:	d004      	beq.n	8007098 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	2280      	movs	r2, #128	; 0x80
 8007092:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8007094:	2301      	movs	r3, #1
 8007096:	e22c      	b.n	80074f2 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	4a5c      	ldr	r2, [pc, #368]	; (8007210 <HAL_DMA_Abort_IT+0x1a0>)
 800709e:	4293      	cmp	r3, r2
 80070a0:	d04a      	beq.n	8007138 <HAL_DMA_Abort_IT+0xc8>
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	4a5b      	ldr	r2, [pc, #364]	; (8007214 <HAL_DMA_Abort_IT+0x1a4>)
 80070a8:	4293      	cmp	r3, r2
 80070aa:	d045      	beq.n	8007138 <HAL_DMA_Abort_IT+0xc8>
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	4a59      	ldr	r2, [pc, #356]	; (8007218 <HAL_DMA_Abort_IT+0x1a8>)
 80070b2:	4293      	cmp	r3, r2
 80070b4:	d040      	beq.n	8007138 <HAL_DMA_Abort_IT+0xc8>
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	4a58      	ldr	r2, [pc, #352]	; (800721c <HAL_DMA_Abort_IT+0x1ac>)
 80070bc:	4293      	cmp	r3, r2
 80070be:	d03b      	beq.n	8007138 <HAL_DMA_Abort_IT+0xc8>
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	4a56      	ldr	r2, [pc, #344]	; (8007220 <HAL_DMA_Abort_IT+0x1b0>)
 80070c6:	4293      	cmp	r3, r2
 80070c8:	d036      	beq.n	8007138 <HAL_DMA_Abort_IT+0xc8>
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	4a55      	ldr	r2, [pc, #340]	; (8007224 <HAL_DMA_Abort_IT+0x1b4>)
 80070d0:	4293      	cmp	r3, r2
 80070d2:	d031      	beq.n	8007138 <HAL_DMA_Abort_IT+0xc8>
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	4a53      	ldr	r2, [pc, #332]	; (8007228 <HAL_DMA_Abort_IT+0x1b8>)
 80070da:	4293      	cmp	r3, r2
 80070dc:	d02c      	beq.n	8007138 <HAL_DMA_Abort_IT+0xc8>
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	4a52      	ldr	r2, [pc, #328]	; (800722c <HAL_DMA_Abort_IT+0x1bc>)
 80070e4:	4293      	cmp	r3, r2
 80070e6:	d027      	beq.n	8007138 <HAL_DMA_Abort_IT+0xc8>
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	4a50      	ldr	r2, [pc, #320]	; (8007230 <HAL_DMA_Abort_IT+0x1c0>)
 80070ee:	4293      	cmp	r3, r2
 80070f0:	d022      	beq.n	8007138 <HAL_DMA_Abort_IT+0xc8>
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	4a4f      	ldr	r2, [pc, #316]	; (8007234 <HAL_DMA_Abort_IT+0x1c4>)
 80070f8:	4293      	cmp	r3, r2
 80070fa:	d01d      	beq.n	8007138 <HAL_DMA_Abort_IT+0xc8>
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	4a4d      	ldr	r2, [pc, #308]	; (8007238 <HAL_DMA_Abort_IT+0x1c8>)
 8007102:	4293      	cmp	r3, r2
 8007104:	d018      	beq.n	8007138 <HAL_DMA_Abort_IT+0xc8>
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	4a4c      	ldr	r2, [pc, #304]	; (800723c <HAL_DMA_Abort_IT+0x1cc>)
 800710c:	4293      	cmp	r3, r2
 800710e:	d013      	beq.n	8007138 <HAL_DMA_Abort_IT+0xc8>
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	4a4a      	ldr	r2, [pc, #296]	; (8007240 <HAL_DMA_Abort_IT+0x1d0>)
 8007116:	4293      	cmp	r3, r2
 8007118:	d00e      	beq.n	8007138 <HAL_DMA_Abort_IT+0xc8>
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	4a49      	ldr	r2, [pc, #292]	; (8007244 <HAL_DMA_Abort_IT+0x1d4>)
 8007120:	4293      	cmp	r3, r2
 8007122:	d009      	beq.n	8007138 <HAL_DMA_Abort_IT+0xc8>
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	4a47      	ldr	r2, [pc, #284]	; (8007248 <HAL_DMA_Abort_IT+0x1d8>)
 800712a:	4293      	cmp	r3, r2
 800712c:	d004      	beq.n	8007138 <HAL_DMA_Abort_IT+0xc8>
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	4a46      	ldr	r2, [pc, #280]	; (800724c <HAL_DMA_Abort_IT+0x1dc>)
 8007134:	4293      	cmp	r3, r2
 8007136:	d101      	bne.n	800713c <HAL_DMA_Abort_IT+0xcc>
 8007138:	2301      	movs	r3, #1
 800713a:	e000      	b.n	800713e <HAL_DMA_Abort_IT+0xce>
 800713c:	2300      	movs	r3, #0
 800713e:	2b00      	cmp	r3, #0
 8007140:	f000 8086 	beq.w	8007250 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	2204      	movs	r2, #4
 8007148:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	4a2f      	ldr	r2, [pc, #188]	; (8007210 <HAL_DMA_Abort_IT+0x1a0>)
 8007152:	4293      	cmp	r3, r2
 8007154:	d04a      	beq.n	80071ec <HAL_DMA_Abort_IT+0x17c>
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	4a2e      	ldr	r2, [pc, #184]	; (8007214 <HAL_DMA_Abort_IT+0x1a4>)
 800715c:	4293      	cmp	r3, r2
 800715e:	d045      	beq.n	80071ec <HAL_DMA_Abort_IT+0x17c>
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	4a2c      	ldr	r2, [pc, #176]	; (8007218 <HAL_DMA_Abort_IT+0x1a8>)
 8007166:	4293      	cmp	r3, r2
 8007168:	d040      	beq.n	80071ec <HAL_DMA_Abort_IT+0x17c>
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	4a2b      	ldr	r2, [pc, #172]	; (800721c <HAL_DMA_Abort_IT+0x1ac>)
 8007170:	4293      	cmp	r3, r2
 8007172:	d03b      	beq.n	80071ec <HAL_DMA_Abort_IT+0x17c>
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	4a29      	ldr	r2, [pc, #164]	; (8007220 <HAL_DMA_Abort_IT+0x1b0>)
 800717a:	4293      	cmp	r3, r2
 800717c:	d036      	beq.n	80071ec <HAL_DMA_Abort_IT+0x17c>
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	4a28      	ldr	r2, [pc, #160]	; (8007224 <HAL_DMA_Abort_IT+0x1b4>)
 8007184:	4293      	cmp	r3, r2
 8007186:	d031      	beq.n	80071ec <HAL_DMA_Abort_IT+0x17c>
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	4a26      	ldr	r2, [pc, #152]	; (8007228 <HAL_DMA_Abort_IT+0x1b8>)
 800718e:	4293      	cmp	r3, r2
 8007190:	d02c      	beq.n	80071ec <HAL_DMA_Abort_IT+0x17c>
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	4a25      	ldr	r2, [pc, #148]	; (800722c <HAL_DMA_Abort_IT+0x1bc>)
 8007198:	4293      	cmp	r3, r2
 800719a:	d027      	beq.n	80071ec <HAL_DMA_Abort_IT+0x17c>
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	4a23      	ldr	r2, [pc, #140]	; (8007230 <HAL_DMA_Abort_IT+0x1c0>)
 80071a2:	4293      	cmp	r3, r2
 80071a4:	d022      	beq.n	80071ec <HAL_DMA_Abort_IT+0x17c>
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	4a22      	ldr	r2, [pc, #136]	; (8007234 <HAL_DMA_Abort_IT+0x1c4>)
 80071ac:	4293      	cmp	r3, r2
 80071ae:	d01d      	beq.n	80071ec <HAL_DMA_Abort_IT+0x17c>
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	4a20      	ldr	r2, [pc, #128]	; (8007238 <HAL_DMA_Abort_IT+0x1c8>)
 80071b6:	4293      	cmp	r3, r2
 80071b8:	d018      	beq.n	80071ec <HAL_DMA_Abort_IT+0x17c>
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	4a1f      	ldr	r2, [pc, #124]	; (800723c <HAL_DMA_Abort_IT+0x1cc>)
 80071c0:	4293      	cmp	r3, r2
 80071c2:	d013      	beq.n	80071ec <HAL_DMA_Abort_IT+0x17c>
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	4a1d      	ldr	r2, [pc, #116]	; (8007240 <HAL_DMA_Abort_IT+0x1d0>)
 80071ca:	4293      	cmp	r3, r2
 80071cc:	d00e      	beq.n	80071ec <HAL_DMA_Abort_IT+0x17c>
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	4a1c      	ldr	r2, [pc, #112]	; (8007244 <HAL_DMA_Abort_IT+0x1d4>)
 80071d4:	4293      	cmp	r3, r2
 80071d6:	d009      	beq.n	80071ec <HAL_DMA_Abort_IT+0x17c>
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	4a1a      	ldr	r2, [pc, #104]	; (8007248 <HAL_DMA_Abort_IT+0x1d8>)
 80071de:	4293      	cmp	r3, r2
 80071e0:	d004      	beq.n	80071ec <HAL_DMA_Abort_IT+0x17c>
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	4a19      	ldr	r2, [pc, #100]	; (800724c <HAL_DMA_Abort_IT+0x1dc>)
 80071e8:	4293      	cmp	r3, r2
 80071ea:	d108      	bne.n	80071fe <HAL_DMA_Abort_IT+0x18e>
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	681a      	ldr	r2, [r3, #0]
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	f022 0201 	bic.w	r2, r2, #1
 80071fa:	601a      	str	r2, [r3, #0]
 80071fc:	e178      	b.n	80074f0 <HAL_DMA_Abort_IT+0x480>
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	681a      	ldr	r2, [r3, #0]
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	f022 0201 	bic.w	r2, r2, #1
 800720c:	601a      	str	r2, [r3, #0]
 800720e:	e16f      	b.n	80074f0 <HAL_DMA_Abort_IT+0x480>
 8007210:	40020010 	.word	0x40020010
 8007214:	40020028 	.word	0x40020028
 8007218:	40020040 	.word	0x40020040
 800721c:	40020058 	.word	0x40020058
 8007220:	40020070 	.word	0x40020070
 8007224:	40020088 	.word	0x40020088
 8007228:	400200a0 	.word	0x400200a0
 800722c:	400200b8 	.word	0x400200b8
 8007230:	40020410 	.word	0x40020410
 8007234:	40020428 	.word	0x40020428
 8007238:	40020440 	.word	0x40020440
 800723c:	40020458 	.word	0x40020458
 8007240:	40020470 	.word	0x40020470
 8007244:	40020488 	.word	0x40020488
 8007248:	400204a0 	.word	0x400204a0
 800724c:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	681a      	ldr	r2, [r3, #0]
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	f022 020e 	bic.w	r2, r2, #14
 800725e:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	4a6c      	ldr	r2, [pc, #432]	; (8007418 <HAL_DMA_Abort_IT+0x3a8>)
 8007266:	4293      	cmp	r3, r2
 8007268:	d04a      	beq.n	8007300 <HAL_DMA_Abort_IT+0x290>
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	4a6b      	ldr	r2, [pc, #428]	; (800741c <HAL_DMA_Abort_IT+0x3ac>)
 8007270:	4293      	cmp	r3, r2
 8007272:	d045      	beq.n	8007300 <HAL_DMA_Abort_IT+0x290>
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	4a69      	ldr	r2, [pc, #420]	; (8007420 <HAL_DMA_Abort_IT+0x3b0>)
 800727a:	4293      	cmp	r3, r2
 800727c:	d040      	beq.n	8007300 <HAL_DMA_Abort_IT+0x290>
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	4a68      	ldr	r2, [pc, #416]	; (8007424 <HAL_DMA_Abort_IT+0x3b4>)
 8007284:	4293      	cmp	r3, r2
 8007286:	d03b      	beq.n	8007300 <HAL_DMA_Abort_IT+0x290>
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	4a66      	ldr	r2, [pc, #408]	; (8007428 <HAL_DMA_Abort_IT+0x3b8>)
 800728e:	4293      	cmp	r3, r2
 8007290:	d036      	beq.n	8007300 <HAL_DMA_Abort_IT+0x290>
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	4a65      	ldr	r2, [pc, #404]	; (800742c <HAL_DMA_Abort_IT+0x3bc>)
 8007298:	4293      	cmp	r3, r2
 800729a:	d031      	beq.n	8007300 <HAL_DMA_Abort_IT+0x290>
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	4a63      	ldr	r2, [pc, #396]	; (8007430 <HAL_DMA_Abort_IT+0x3c0>)
 80072a2:	4293      	cmp	r3, r2
 80072a4:	d02c      	beq.n	8007300 <HAL_DMA_Abort_IT+0x290>
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	4a62      	ldr	r2, [pc, #392]	; (8007434 <HAL_DMA_Abort_IT+0x3c4>)
 80072ac:	4293      	cmp	r3, r2
 80072ae:	d027      	beq.n	8007300 <HAL_DMA_Abort_IT+0x290>
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	4a60      	ldr	r2, [pc, #384]	; (8007438 <HAL_DMA_Abort_IT+0x3c8>)
 80072b6:	4293      	cmp	r3, r2
 80072b8:	d022      	beq.n	8007300 <HAL_DMA_Abort_IT+0x290>
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	4a5f      	ldr	r2, [pc, #380]	; (800743c <HAL_DMA_Abort_IT+0x3cc>)
 80072c0:	4293      	cmp	r3, r2
 80072c2:	d01d      	beq.n	8007300 <HAL_DMA_Abort_IT+0x290>
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	4a5d      	ldr	r2, [pc, #372]	; (8007440 <HAL_DMA_Abort_IT+0x3d0>)
 80072ca:	4293      	cmp	r3, r2
 80072cc:	d018      	beq.n	8007300 <HAL_DMA_Abort_IT+0x290>
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	4a5c      	ldr	r2, [pc, #368]	; (8007444 <HAL_DMA_Abort_IT+0x3d4>)
 80072d4:	4293      	cmp	r3, r2
 80072d6:	d013      	beq.n	8007300 <HAL_DMA_Abort_IT+0x290>
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	4a5a      	ldr	r2, [pc, #360]	; (8007448 <HAL_DMA_Abort_IT+0x3d8>)
 80072de:	4293      	cmp	r3, r2
 80072e0:	d00e      	beq.n	8007300 <HAL_DMA_Abort_IT+0x290>
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	4a59      	ldr	r2, [pc, #356]	; (800744c <HAL_DMA_Abort_IT+0x3dc>)
 80072e8:	4293      	cmp	r3, r2
 80072ea:	d009      	beq.n	8007300 <HAL_DMA_Abort_IT+0x290>
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	4a57      	ldr	r2, [pc, #348]	; (8007450 <HAL_DMA_Abort_IT+0x3e0>)
 80072f2:	4293      	cmp	r3, r2
 80072f4:	d004      	beq.n	8007300 <HAL_DMA_Abort_IT+0x290>
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	4a56      	ldr	r2, [pc, #344]	; (8007454 <HAL_DMA_Abort_IT+0x3e4>)
 80072fc:	4293      	cmp	r3, r2
 80072fe:	d108      	bne.n	8007312 <HAL_DMA_Abort_IT+0x2a2>
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	681a      	ldr	r2, [r3, #0]
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	f022 0201 	bic.w	r2, r2, #1
 800730e:	601a      	str	r2, [r3, #0]
 8007310:	e007      	b.n	8007322 <HAL_DMA_Abort_IT+0x2b2>
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	681a      	ldr	r2, [r3, #0]
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	f022 0201 	bic.w	r2, r2, #1
 8007320:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	4a3c      	ldr	r2, [pc, #240]	; (8007418 <HAL_DMA_Abort_IT+0x3a8>)
 8007328:	4293      	cmp	r3, r2
 800732a:	d072      	beq.n	8007412 <HAL_DMA_Abort_IT+0x3a2>
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	4a3a      	ldr	r2, [pc, #232]	; (800741c <HAL_DMA_Abort_IT+0x3ac>)
 8007332:	4293      	cmp	r3, r2
 8007334:	d06d      	beq.n	8007412 <HAL_DMA_Abort_IT+0x3a2>
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	4a39      	ldr	r2, [pc, #228]	; (8007420 <HAL_DMA_Abort_IT+0x3b0>)
 800733c:	4293      	cmp	r3, r2
 800733e:	d068      	beq.n	8007412 <HAL_DMA_Abort_IT+0x3a2>
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	4a37      	ldr	r2, [pc, #220]	; (8007424 <HAL_DMA_Abort_IT+0x3b4>)
 8007346:	4293      	cmp	r3, r2
 8007348:	d063      	beq.n	8007412 <HAL_DMA_Abort_IT+0x3a2>
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	4a36      	ldr	r2, [pc, #216]	; (8007428 <HAL_DMA_Abort_IT+0x3b8>)
 8007350:	4293      	cmp	r3, r2
 8007352:	d05e      	beq.n	8007412 <HAL_DMA_Abort_IT+0x3a2>
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	4a34      	ldr	r2, [pc, #208]	; (800742c <HAL_DMA_Abort_IT+0x3bc>)
 800735a:	4293      	cmp	r3, r2
 800735c:	d059      	beq.n	8007412 <HAL_DMA_Abort_IT+0x3a2>
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	4a33      	ldr	r2, [pc, #204]	; (8007430 <HAL_DMA_Abort_IT+0x3c0>)
 8007364:	4293      	cmp	r3, r2
 8007366:	d054      	beq.n	8007412 <HAL_DMA_Abort_IT+0x3a2>
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	4a31      	ldr	r2, [pc, #196]	; (8007434 <HAL_DMA_Abort_IT+0x3c4>)
 800736e:	4293      	cmp	r3, r2
 8007370:	d04f      	beq.n	8007412 <HAL_DMA_Abort_IT+0x3a2>
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	4a30      	ldr	r2, [pc, #192]	; (8007438 <HAL_DMA_Abort_IT+0x3c8>)
 8007378:	4293      	cmp	r3, r2
 800737a:	d04a      	beq.n	8007412 <HAL_DMA_Abort_IT+0x3a2>
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	4a2e      	ldr	r2, [pc, #184]	; (800743c <HAL_DMA_Abort_IT+0x3cc>)
 8007382:	4293      	cmp	r3, r2
 8007384:	d045      	beq.n	8007412 <HAL_DMA_Abort_IT+0x3a2>
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	4a2d      	ldr	r2, [pc, #180]	; (8007440 <HAL_DMA_Abort_IT+0x3d0>)
 800738c:	4293      	cmp	r3, r2
 800738e:	d040      	beq.n	8007412 <HAL_DMA_Abort_IT+0x3a2>
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	4a2b      	ldr	r2, [pc, #172]	; (8007444 <HAL_DMA_Abort_IT+0x3d4>)
 8007396:	4293      	cmp	r3, r2
 8007398:	d03b      	beq.n	8007412 <HAL_DMA_Abort_IT+0x3a2>
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	4a2a      	ldr	r2, [pc, #168]	; (8007448 <HAL_DMA_Abort_IT+0x3d8>)
 80073a0:	4293      	cmp	r3, r2
 80073a2:	d036      	beq.n	8007412 <HAL_DMA_Abort_IT+0x3a2>
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	4a28      	ldr	r2, [pc, #160]	; (800744c <HAL_DMA_Abort_IT+0x3dc>)
 80073aa:	4293      	cmp	r3, r2
 80073ac:	d031      	beq.n	8007412 <HAL_DMA_Abort_IT+0x3a2>
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	4a27      	ldr	r2, [pc, #156]	; (8007450 <HAL_DMA_Abort_IT+0x3e0>)
 80073b4:	4293      	cmp	r3, r2
 80073b6:	d02c      	beq.n	8007412 <HAL_DMA_Abort_IT+0x3a2>
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	4a25      	ldr	r2, [pc, #148]	; (8007454 <HAL_DMA_Abort_IT+0x3e4>)
 80073be:	4293      	cmp	r3, r2
 80073c0:	d027      	beq.n	8007412 <HAL_DMA_Abort_IT+0x3a2>
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	4a24      	ldr	r2, [pc, #144]	; (8007458 <HAL_DMA_Abort_IT+0x3e8>)
 80073c8:	4293      	cmp	r3, r2
 80073ca:	d022      	beq.n	8007412 <HAL_DMA_Abort_IT+0x3a2>
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	4a22      	ldr	r2, [pc, #136]	; (800745c <HAL_DMA_Abort_IT+0x3ec>)
 80073d2:	4293      	cmp	r3, r2
 80073d4:	d01d      	beq.n	8007412 <HAL_DMA_Abort_IT+0x3a2>
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	4a21      	ldr	r2, [pc, #132]	; (8007460 <HAL_DMA_Abort_IT+0x3f0>)
 80073dc:	4293      	cmp	r3, r2
 80073de:	d018      	beq.n	8007412 <HAL_DMA_Abort_IT+0x3a2>
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	4a1f      	ldr	r2, [pc, #124]	; (8007464 <HAL_DMA_Abort_IT+0x3f4>)
 80073e6:	4293      	cmp	r3, r2
 80073e8:	d013      	beq.n	8007412 <HAL_DMA_Abort_IT+0x3a2>
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	4a1e      	ldr	r2, [pc, #120]	; (8007468 <HAL_DMA_Abort_IT+0x3f8>)
 80073f0:	4293      	cmp	r3, r2
 80073f2:	d00e      	beq.n	8007412 <HAL_DMA_Abort_IT+0x3a2>
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	4a1c      	ldr	r2, [pc, #112]	; (800746c <HAL_DMA_Abort_IT+0x3fc>)
 80073fa:	4293      	cmp	r3, r2
 80073fc:	d009      	beq.n	8007412 <HAL_DMA_Abort_IT+0x3a2>
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	4a1b      	ldr	r2, [pc, #108]	; (8007470 <HAL_DMA_Abort_IT+0x400>)
 8007404:	4293      	cmp	r3, r2
 8007406:	d004      	beq.n	8007412 <HAL_DMA_Abort_IT+0x3a2>
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	4a19      	ldr	r2, [pc, #100]	; (8007474 <HAL_DMA_Abort_IT+0x404>)
 800740e:	4293      	cmp	r3, r2
 8007410:	d132      	bne.n	8007478 <HAL_DMA_Abort_IT+0x408>
 8007412:	2301      	movs	r3, #1
 8007414:	e031      	b.n	800747a <HAL_DMA_Abort_IT+0x40a>
 8007416:	bf00      	nop
 8007418:	40020010 	.word	0x40020010
 800741c:	40020028 	.word	0x40020028
 8007420:	40020040 	.word	0x40020040
 8007424:	40020058 	.word	0x40020058
 8007428:	40020070 	.word	0x40020070
 800742c:	40020088 	.word	0x40020088
 8007430:	400200a0 	.word	0x400200a0
 8007434:	400200b8 	.word	0x400200b8
 8007438:	40020410 	.word	0x40020410
 800743c:	40020428 	.word	0x40020428
 8007440:	40020440 	.word	0x40020440
 8007444:	40020458 	.word	0x40020458
 8007448:	40020470 	.word	0x40020470
 800744c:	40020488 	.word	0x40020488
 8007450:	400204a0 	.word	0x400204a0
 8007454:	400204b8 	.word	0x400204b8
 8007458:	58025408 	.word	0x58025408
 800745c:	5802541c 	.word	0x5802541c
 8007460:	58025430 	.word	0x58025430
 8007464:	58025444 	.word	0x58025444
 8007468:	58025458 	.word	0x58025458
 800746c:	5802546c 	.word	0x5802546c
 8007470:	58025480 	.word	0x58025480
 8007474:	58025494 	.word	0x58025494
 8007478:	2300      	movs	r3, #0
 800747a:	2b00      	cmp	r3, #0
 800747c:	d028      	beq.n	80074d0 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007482:	681a      	ldr	r2, [r3, #0]
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007488:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800748c:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007492:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007498:	f003 031f 	and.w	r3, r3, #31
 800749c:	2201      	movs	r2, #1
 800749e:	409a      	lsls	r2, r3
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80074a8:	687a      	ldr	r2, [r7, #4]
 80074aa:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80074ac:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	d00c      	beq.n	80074d0 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80074ba:	681a      	ldr	r2, [r3, #0]
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80074c0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80074c4:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80074ca:	687a      	ldr	r2, [r7, #4]
 80074cc:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80074ce:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	2201      	movs	r2, #1
 80074d4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	2200      	movs	r2, #0
 80074dc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	d003      	beq.n	80074f0 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80074ec:	6878      	ldr	r0, [r7, #4]
 80074ee:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 80074f0:	2300      	movs	r3, #0
}
 80074f2:	4618      	mov	r0, r3
 80074f4:	3710      	adds	r7, #16
 80074f6:	46bd      	mov	sp, r7
 80074f8:	bd80      	pop	{r7, pc}
 80074fa:	bf00      	nop

080074fc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80074fc:	b480      	push	{r7}
 80074fe:	b089      	sub	sp, #36	; 0x24
 8007500:	af00      	add	r7, sp, #0
 8007502:	6078      	str	r0, [r7, #4]
 8007504:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8007506:	2300      	movs	r3, #0
 8007508:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800750a:	4b89      	ldr	r3, [pc, #548]	; (8007730 <HAL_GPIO_Init+0x234>)
 800750c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800750e:	e194      	b.n	800783a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8007510:	683b      	ldr	r3, [r7, #0]
 8007512:	681a      	ldr	r2, [r3, #0]
 8007514:	2101      	movs	r1, #1
 8007516:	69fb      	ldr	r3, [r7, #28]
 8007518:	fa01 f303 	lsl.w	r3, r1, r3
 800751c:	4013      	ands	r3, r2
 800751e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8007520:	693b      	ldr	r3, [r7, #16]
 8007522:	2b00      	cmp	r3, #0
 8007524:	f000 8186 	beq.w	8007834 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8007528:	683b      	ldr	r3, [r7, #0]
 800752a:	685b      	ldr	r3, [r3, #4]
 800752c:	f003 0303 	and.w	r3, r3, #3
 8007530:	2b01      	cmp	r3, #1
 8007532:	d005      	beq.n	8007540 <HAL_GPIO_Init+0x44>
 8007534:	683b      	ldr	r3, [r7, #0]
 8007536:	685b      	ldr	r3, [r3, #4]
 8007538:	f003 0303 	and.w	r3, r3, #3
 800753c:	2b02      	cmp	r3, #2
 800753e:	d130      	bne.n	80075a2 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	689b      	ldr	r3, [r3, #8]
 8007544:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8007546:	69fb      	ldr	r3, [r7, #28]
 8007548:	005b      	lsls	r3, r3, #1
 800754a:	2203      	movs	r2, #3
 800754c:	fa02 f303 	lsl.w	r3, r2, r3
 8007550:	43db      	mvns	r3, r3
 8007552:	69ba      	ldr	r2, [r7, #24]
 8007554:	4013      	ands	r3, r2
 8007556:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8007558:	683b      	ldr	r3, [r7, #0]
 800755a:	68da      	ldr	r2, [r3, #12]
 800755c:	69fb      	ldr	r3, [r7, #28]
 800755e:	005b      	lsls	r3, r3, #1
 8007560:	fa02 f303 	lsl.w	r3, r2, r3
 8007564:	69ba      	ldr	r2, [r7, #24]
 8007566:	4313      	orrs	r3, r2
 8007568:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	69ba      	ldr	r2, [r7, #24]
 800756e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	685b      	ldr	r3, [r3, #4]
 8007574:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8007576:	2201      	movs	r2, #1
 8007578:	69fb      	ldr	r3, [r7, #28]
 800757a:	fa02 f303 	lsl.w	r3, r2, r3
 800757e:	43db      	mvns	r3, r3
 8007580:	69ba      	ldr	r2, [r7, #24]
 8007582:	4013      	ands	r3, r2
 8007584:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8007586:	683b      	ldr	r3, [r7, #0]
 8007588:	685b      	ldr	r3, [r3, #4]
 800758a:	091b      	lsrs	r3, r3, #4
 800758c:	f003 0201 	and.w	r2, r3, #1
 8007590:	69fb      	ldr	r3, [r7, #28]
 8007592:	fa02 f303 	lsl.w	r3, r2, r3
 8007596:	69ba      	ldr	r2, [r7, #24]
 8007598:	4313      	orrs	r3, r2
 800759a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	69ba      	ldr	r2, [r7, #24]
 80075a0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80075a2:	683b      	ldr	r3, [r7, #0]
 80075a4:	685b      	ldr	r3, [r3, #4]
 80075a6:	f003 0303 	and.w	r3, r3, #3
 80075aa:	2b03      	cmp	r3, #3
 80075ac:	d017      	beq.n	80075de <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	68db      	ldr	r3, [r3, #12]
 80075b2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80075b4:	69fb      	ldr	r3, [r7, #28]
 80075b6:	005b      	lsls	r3, r3, #1
 80075b8:	2203      	movs	r2, #3
 80075ba:	fa02 f303 	lsl.w	r3, r2, r3
 80075be:	43db      	mvns	r3, r3
 80075c0:	69ba      	ldr	r2, [r7, #24]
 80075c2:	4013      	ands	r3, r2
 80075c4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80075c6:	683b      	ldr	r3, [r7, #0]
 80075c8:	689a      	ldr	r2, [r3, #8]
 80075ca:	69fb      	ldr	r3, [r7, #28]
 80075cc:	005b      	lsls	r3, r3, #1
 80075ce:	fa02 f303 	lsl.w	r3, r2, r3
 80075d2:	69ba      	ldr	r2, [r7, #24]
 80075d4:	4313      	orrs	r3, r2
 80075d6:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	69ba      	ldr	r2, [r7, #24]
 80075dc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80075de:	683b      	ldr	r3, [r7, #0]
 80075e0:	685b      	ldr	r3, [r3, #4]
 80075e2:	f003 0303 	and.w	r3, r3, #3
 80075e6:	2b02      	cmp	r3, #2
 80075e8:	d123      	bne.n	8007632 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80075ea:	69fb      	ldr	r3, [r7, #28]
 80075ec:	08da      	lsrs	r2, r3, #3
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	3208      	adds	r2, #8
 80075f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80075f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80075f8:	69fb      	ldr	r3, [r7, #28]
 80075fa:	f003 0307 	and.w	r3, r3, #7
 80075fe:	009b      	lsls	r3, r3, #2
 8007600:	220f      	movs	r2, #15
 8007602:	fa02 f303 	lsl.w	r3, r2, r3
 8007606:	43db      	mvns	r3, r3
 8007608:	69ba      	ldr	r2, [r7, #24]
 800760a:	4013      	ands	r3, r2
 800760c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800760e:	683b      	ldr	r3, [r7, #0]
 8007610:	691a      	ldr	r2, [r3, #16]
 8007612:	69fb      	ldr	r3, [r7, #28]
 8007614:	f003 0307 	and.w	r3, r3, #7
 8007618:	009b      	lsls	r3, r3, #2
 800761a:	fa02 f303 	lsl.w	r3, r2, r3
 800761e:	69ba      	ldr	r2, [r7, #24]
 8007620:	4313      	orrs	r3, r2
 8007622:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8007624:	69fb      	ldr	r3, [r7, #28]
 8007626:	08da      	lsrs	r2, r3, #3
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	3208      	adds	r2, #8
 800762c:	69b9      	ldr	r1, [r7, #24]
 800762e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8007638:	69fb      	ldr	r3, [r7, #28]
 800763a:	005b      	lsls	r3, r3, #1
 800763c:	2203      	movs	r2, #3
 800763e:	fa02 f303 	lsl.w	r3, r2, r3
 8007642:	43db      	mvns	r3, r3
 8007644:	69ba      	ldr	r2, [r7, #24]
 8007646:	4013      	ands	r3, r2
 8007648:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800764a:	683b      	ldr	r3, [r7, #0]
 800764c:	685b      	ldr	r3, [r3, #4]
 800764e:	f003 0203 	and.w	r2, r3, #3
 8007652:	69fb      	ldr	r3, [r7, #28]
 8007654:	005b      	lsls	r3, r3, #1
 8007656:	fa02 f303 	lsl.w	r3, r2, r3
 800765a:	69ba      	ldr	r2, [r7, #24]
 800765c:	4313      	orrs	r3, r2
 800765e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	69ba      	ldr	r2, [r7, #24]
 8007664:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8007666:	683b      	ldr	r3, [r7, #0]
 8007668:	685b      	ldr	r3, [r3, #4]
 800766a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800766e:	2b00      	cmp	r3, #0
 8007670:	f000 80e0 	beq.w	8007834 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007674:	4b2f      	ldr	r3, [pc, #188]	; (8007734 <HAL_GPIO_Init+0x238>)
 8007676:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800767a:	4a2e      	ldr	r2, [pc, #184]	; (8007734 <HAL_GPIO_Init+0x238>)
 800767c:	f043 0302 	orr.w	r3, r3, #2
 8007680:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8007684:	4b2b      	ldr	r3, [pc, #172]	; (8007734 <HAL_GPIO_Init+0x238>)
 8007686:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800768a:	f003 0302 	and.w	r3, r3, #2
 800768e:	60fb      	str	r3, [r7, #12]
 8007690:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8007692:	4a29      	ldr	r2, [pc, #164]	; (8007738 <HAL_GPIO_Init+0x23c>)
 8007694:	69fb      	ldr	r3, [r7, #28]
 8007696:	089b      	lsrs	r3, r3, #2
 8007698:	3302      	adds	r3, #2
 800769a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800769e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80076a0:	69fb      	ldr	r3, [r7, #28]
 80076a2:	f003 0303 	and.w	r3, r3, #3
 80076a6:	009b      	lsls	r3, r3, #2
 80076a8:	220f      	movs	r2, #15
 80076aa:	fa02 f303 	lsl.w	r3, r2, r3
 80076ae:	43db      	mvns	r3, r3
 80076b0:	69ba      	ldr	r2, [r7, #24]
 80076b2:	4013      	ands	r3, r2
 80076b4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	4a20      	ldr	r2, [pc, #128]	; (800773c <HAL_GPIO_Init+0x240>)
 80076ba:	4293      	cmp	r3, r2
 80076bc:	d052      	beq.n	8007764 <HAL_GPIO_Init+0x268>
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	4a1f      	ldr	r2, [pc, #124]	; (8007740 <HAL_GPIO_Init+0x244>)
 80076c2:	4293      	cmp	r3, r2
 80076c4:	d031      	beq.n	800772a <HAL_GPIO_Init+0x22e>
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	4a1e      	ldr	r2, [pc, #120]	; (8007744 <HAL_GPIO_Init+0x248>)
 80076ca:	4293      	cmp	r3, r2
 80076cc:	d02b      	beq.n	8007726 <HAL_GPIO_Init+0x22a>
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	4a1d      	ldr	r2, [pc, #116]	; (8007748 <HAL_GPIO_Init+0x24c>)
 80076d2:	4293      	cmp	r3, r2
 80076d4:	d025      	beq.n	8007722 <HAL_GPIO_Init+0x226>
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	4a1c      	ldr	r2, [pc, #112]	; (800774c <HAL_GPIO_Init+0x250>)
 80076da:	4293      	cmp	r3, r2
 80076dc:	d01f      	beq.n	800771e <HAL_GPIO_Init+0x222>
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	4a1b      	ldr	r2, [pc, #108]	; (8007750 <HAL_GPIO_Init+0x254>)
 80076e2:	4293      	cmp	r3, r2
 80076e4:	d019      	beq.n	800771a <HAL_GPIO_Init+0x21e>
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	4a1a      	ldr	r2, [pc, #104]	; (8007754 <HAL_GPIO_Init+0x258>)
 80076ea:	4293      	cmp	r3, r2
 80076ec:	d013      	beq.n	8007716 <HAL_GPIO_Init+0x21a>
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	4a19      	ldr	r2, [pc, #100]	; (8007758 <HAL_GPIO_Init+0x25c>)
 80076f2:	4293      	cmp	r3, r2
 80076f4:	d00d      	beq.n	8007712 <HAL_GPIO_Init+0x216>
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	4a18      	ldr	r2, [pc, #96]	; (800775c <HAL_GPIO_Init+0x260>)
 80076fa:	4293      	cmp	r3, r2
 80076fc:	d007      	beq.n	800770e <HAL_GPIO_Init+0x212>
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	4a17      	ldr	r2, [pc, #92]	; (8007760 <HAL_GPIO_Init+0x264>)
 8007702:	4293      	cmp	r3, r2
 8007704:	d101      	bne.n	800770a <HAL_GPIO_Init+0x20e>
 8007706:	2309      	movs	r3, #9
 8007708:	e02d      	b.n	8007766 <HAL_GPIO_Init+0x26a>
 800770a:	230a      	movs	r3, #10
 800770c:	e02b      	b.n	8007766 <HAL_GPIO_Init+0x26a>
 800770e:	2308      	movs	r3, #8
 8007710:	e029      	b.n	8007766 <HAL_GPIO_Init+0x26a>
 8007712:	2307      	movs	r3, #7
 8007714:	e027      	b.n	8007766 <HAL_GPIO_Init+0x26a>
 8007716:	2306      	movs	r3, #6
 8007718:	e025      	b.n	8007766 <HAL_GPIO_Init+0x26a>
 800771a:	2305      	movs	r3, #5
 800771c:	e023      	b.n	8007766 <HAL_GPIO_Init+0x26a>
 800771e:	2304      	movs	r3, #4
 8007720:	e021      	b.n	8007766 <HAL_GPIO_Init+0x26a>
 8007722:	2303      	movs	r3, #3
 8007724:	e01f      	b.n	8007766 <HAL_GPIO_Init+0x26a>
 8007726:	2302      	movs	r3, #2
 8007728:	e01d      	b.n	8007766 <HAL_GPIO_Init+0x26a>
 800772a:	2301      	movs	r3, #1
 800772c:	e01b      	b.n	8007766 <HAL_GPIO_Init+0x26a>
 800772e:	bf00      	nop
 8007730:	58000080 	.word	0x58000080
 8007734:	58024400 	.word	0x58024400
 8007738:	58000400 	.word	0x58000400
 800773c:	58020000 	.word	0x58020000
 8007740:	58020400 	.word	0x58020400
 8007744:	58020800 	.word	0x58020800
 8007748:	58020c00 	.word	0x58020c00
 800774c:	58021000 	.word	0x58021000
 8007750:	58021400 	.word	0x58021400
 8007754:	58021800 	.word	0x58021800
 8007758:	58021c00 	.word	0x58021c00
 800775c:	58022000 	.word	0x58022000
 8007760:	58022400 	.word	0x58022400
 8007764:	2300      	movs	r3, #0
 8007766:	69fa      	ldr	r2, [r7, #28]
 8007768:	f002 0203 	and.w	r2, r2, #3
 800776c:	0092      	lsls	r2, r2, #2
 800776e:	4093      	lsls	r3, r2
 8007770:	69ba      	ldr	r2, [r7, #24]
 8007772:	4313      	orrs	r3, r2
 8007774:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8007776:	4938      	ldr	r1, [pc, #224]	; (8007858 <HAL_GPIO_Init+0x35c>)
 8007778:	69fb      	ldr	r3, [r7, #28]
 800777a:	089b      	lsrs	r3, r3, #2
 800777c:	3302      	adds	r3, #2
 800777e:	69ba      	ldr	r2, [r7, #24]
 8007780:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8007784:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800778c:	693b      	ldr	r3, [r7, #16]
 800778e:	43db      	mvns	r3, r3
 8007790:	69ba      	ldr	r2, [r7, #24]
 8007792:	4013      	ands	r3, r2
 8007794:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8007796:	683b      	ldr	r3, [r7, #0]
 8007798:	685b      	ldr	r3, [r3, #4]
 800779a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800779e:	2b00      	cmp	r3, #0
 80077a0:	d003      	beq.n	80077aa <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80077a2:	69ba      	ldr	r2, [r7, #24]
 80077a4:	693b      	ldr	r3, [r7, #16]
 80077a6:	4313      	orrs	r3, r2
 80077a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80077aa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80077ae:	69bb      	ldr	r3, [r7, #24]
 80077b0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80077b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80077b6:	685b      	ldr	r3, [r3, #4]
 80077b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80077ba:	693b      	ldr	r3, [r7, #16]
 80077bc:	43db      	mvns	r3, r3
 80077be:	69ba      	ldr	r2, [r7, #24]
 80077c0:	4013      	ands	r3, r2
 80077c2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80077c4:	683b      	ldr	r3, [r7, #0]
 80077c6:	685b      	ldr	r3, [r3, #4]
 80077c8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	d003      	beq.n	80077d8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80077d0:	69ba      	ldr	r2, [r7, #24]
 80077d2:	693b      	ldr	r3, [r7, #16]
 80077d4:	4313      	orrs	r3, r2
 80077d6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80077d8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80077dc:	69bb      	ldr	r3, [r7, #24]
 80077de:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80077e0:	697b      	ldr	r3, [r7, #20]
 80077e2:	685b      	ldr	r3, [r3, #4]
 80077e4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80077e6:	693b      	ldr	r3, [r7, #16]
 80077e8:	43db      	mvns	r3, r3
 80077ea:	69ba      	ldr	r2, [r7, #24]
 80077ec:	4013      	ands	r3, r2
 80077ee:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80077f0:	683b      	ldr	r3, [r7, #0]
 80077f2:	685b      	ldr	r3, [r3, #4]
 80077f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80077f8:	2b00      	cmp	r3, #0
 80077fa:	d003      	beq.n	8007804 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80077fc:	69ba      	ldr	r2, [r7, #24]
 80077fe:	693b      	ldr	r3, [r7, #16]
 8007800:	4313      	orrs	r3, r2
 8007802:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8007804:	697b      	ldr	r3, [r7, #20]
 8007806:	69ba      	ldr	r2, [r7, #24]
 8007808:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800780a:	697b      	ldr	r3, [r7, #20]
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007810:	693b      	ldr	r3, [r7, #16]
 8007812:	43db      	mvns	r3, r3
 8007814:	69ba      	ldr	r2, [r7, #24]
 8007816:	4013      	ands	r3, r2
 8007818:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800781a:	683b      	ldr	r3, [r7, #0]
 800781c:	685b      	ldr	r3, [r3, #4]
 800781e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007822:	2b00      	cmp	r3, #0
 8007824:	d003      	beq.n	800782e <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8007826:	69ba      	ldr	r2, [r7, #24]
 8007828:	693b      	ldr	r3, [r7, #16]
 800782a:	4313      	orrs	r3, r2
 800782c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800782e:	697b      	ldr	r3, [r7, #20]
 8007830:	69ba      	ldr	r2, [r7, #24]
 8007832:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8007834:	69fb      	ldr	r3, [r7, #28]
 8007836:	3301      	adds	r3, #1
 8007838:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800783a:	683b      	ldr	r3, [r7, #0]
 800783c:	681a      	ldr	r2, [r3, #0]
 800783e:	69fb      	ldr	r3, [r7, #28]
 8007840:	fa22 f303 	lsr.w	r3, r2, r3
 8007844:	2b00      	cmp	r3, #0
 8007846:	f47f ae63 	bne.w	8007510 <HAL_GPIO_Init+0x14>
  }
}
 800784a:	bf00      	nop
 800784c:	bf00      	nop
 800784e:	3724      	adds	r7, #36	; 0x24
 8007850:	46bd      	mov	sp, r7
 8007852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007856:	4770      	bx	lr
 8007858:	58000400 	.word	0x58000400

0800785c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800785c:	b480      	push	{r7}
 800785e:	b085      	sub	sp, #20
 8007860:	af00      	add	r7, sp, #0
 8007862:	6078      	str	r0, [r7, #4]
 8007864:	460b      	mov	r3, r1
 8007866:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	691a      	ldr	r2, [r3, #16]
 800786c:	887b      	ldrh	r3, [r7, #2]
 800786e:	4013      	ands	r3, r2
 8007870:	2b00      	cmp	r3, #0
 8007872:	d002      	beq.n	800787a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8007874:	2301      	movs	r3, #1
 8007876:	73fb      	strb	r3, [r7, #15]
 8007878:	e001      	b.n	800787e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800787a:	2300      	movs	r3, #0
 800787c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800787e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007880:	4618      	mov	r0, r3
 8007882:	3714      	adds	r7, #20
 8007884:	46bd      	mov	sp, r7
 8007886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800788a:	4770      	bx	lr

0800788c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800788c:	b480      	push	{r7}
 800788e:	b083      	sub	sp, #12
 8007890:	af00      	add	r7, sp, #0
 8007892:	6078      	str	r0, [r7, #4]
 8007894:	460b      	mov	r3, r1
 8007896:	807b      	strh	r3, [r7, #2]
 8007898:	4613      	mov	r3, r2
 800789a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800789c:	787b      	ldrb	r3, [r7, #1]
 800789e:	2b00      	cmp	r3, #0
 80078a0:	d003      	beq.n	80078aa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80078a2:	887a      	ldrh	r2, [r7, #2]
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80078a8:	e003      	b.n	80078b2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80078aa:	887b      	ldrh	r3, [r7, #2]
 80078ac:	041a      	lsls	r2, r3, #16
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	619a      	str	r2, [r3, #24]
}
 80078b2:	bf00      	nop
 80078b4:	370c      	adds	r7, #12
 80078b6:	46bd      	mov	sp, r7
 80078b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078bc:	4770      	bx	lr

080078be <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80078be:	b580      	push	{r7, lr}
 80078c0:	b082      	sub	sp, #8
 80078c2:	af00      	add	r7, sp, #0
 80078c4:	4603      	mov	r3, r0
 80078c6:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 80078c8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80078cc:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80078d0:	88fb      	ldrh	r3, [r7, #6]
 80078d2:	4013      	ands	r3, r2
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	d008      	beq.n	80078ea <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80078d8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80078dc:	88fb      	ldrh	r3, [r7, #6]
 80078de:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80078e2:	88fb      	ldrh	r3, [r7, #6]
 80078e4:	4618      	mov	r0, r3
 80078e6:	f7fa ff29 	bl	800273c <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 80078ea:	bf00      	nop
 80078ec:	3708      	adds	r7, #8
 80078ee:	46bd      	mov	sp, r7
 80078f0:	bd80      	pop	{r7, pc}
	...

080078f4 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80078f4:	b580      	push	{r7, lr}
 80078f6:	b084      	sub	sp, #16
 80078f8:	af00      	add	r7, sp, #0
 80078fa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80078fc:	4b19      	ldr	r3, [pc, #100]	; (8007964 <HAL_PWREx_ConfigSupply+0x70>)
 80078fe:	68db      	ldr	r3, [r3, #12]
 8007900:	f003 0304 	and.w	r3, r3, #4
 8007904:	2b04      	cmp	r3, #4
 8007906:	d00a      	beq.n	800791e <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8007908:	4b16      	ldr	r3, [pc, #88]	; (8007964 <HAL_PWREx_ConfigSupply+0x70>)
 800790a:	68db      	ldr	r3, [r3, #12]
 800790c:	f003 0307 	and.w	r3, r3, #7
 8007910:	687a      	ldr	r2, [r7, #4]
 8007912:	429a      	cmp	r2, r3
 8007914:	d001      	beq.n	800791a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8007916:	2301      	movs	r3, #1
 8007918:	e01f      	b.n	800795a <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800791a:	2300      	movs	r3, #0
 800791c:	e01d      	b.n	800795a <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800791e:	4b11      	ldr	r3, [pc, #68]	; (8007964 <HAL_PWREx_ConfigSupply+0x70>)
 8007920:	68db      	ldr	r3, [r3, #12]
 8007922:	f023 0207 	bic.w	r2, r3, #7
 8007926:	490f      	ldr	r1, [pc, #60]	; (8007964 <HAL_PWREx_ConfigSupply+0x70>)
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	4313      	orrs	r3, r2
 800792c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800792e:	f7fe ff03 	bl	8006738 <HAL_GetTick>
 8007932:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8007934:	e009      	b.n	800794a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8007936:	f7fe feff 	bl	8006738 <HAL_GetTick>
 800793a:	4602      	mov	r2, r0
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	1ad3      	subs	r3, r2, r3
 8007940:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007944:	d901      	bls.n	800794a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8007946:	2301      	movs	r3, #1
 8007948:	e007      	b.n	800795a <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800794a:	4b06      	ldr	r3, [pc, #24]	; (8007964 <HAL_PWREx_ConfigSupply+0x70>)
 800794c:	685b      	ldr	r3, [r3, #4]
 800794e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007952:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007956:	d1ee      	bne.n	8007936 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8007958:	2300      	movs	r3, #0
}
 800795a:	4618      	mov	r0, r3
 800795c:	3710      	adds	r7, #16
 800795e:	46bd      	mov	sp, r7
 8007960:	bd80      	pop	{r7, pc}
 8007962:	bf00      	nop
 8007964:	58024800 	.word	0x58024800

08007968 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007968:	b580      	push	{r7, lr}
 800796a:	b08c      	sub	sp, #48	; 0x30
 800796c:	af00      	add	r7, sp, #0
 800796e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	2b00      	cmp	r3, #0
 8007974:	d102      	bne.n	800797c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8007976:	2301      	movs	r3, #1
 8007978:	f000 bc1d 	b.w	80081b6 <HAL_RCC_OscConfig+0x84e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	f003 0301 	and.w	r3, r3, #1
 8007984:	2b00      	cmp	r3, #0
 8007986:	f000 8087 	beq.w	8007a98 <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800798a:	4b99      	ldr	r3, [pc, #612]	; (8007bf0 <HAL_RCC_OscConfig+0x288>)
 800798c:	691b      	ldr	r3, [r3, #16]
 800798e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007992:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007994:	4b96      	ldr	r3, [pc, #600]	; (8007bf0 <HAL_RCC_OscConfig+0x288>)
 8007996:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007998:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800799a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800799c:	2b10      	cmp	r3, #16
 800799e:	d007      	beq.n	80079b0 <HAL_RCC_OscConfig+0x48>
 80079a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079a2:	2b18      	cmp	r3, #24
 80079a4:	d110      	bne.n	80079c8 <HAL_RCC_OscConfig+0x60>
 80079a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079a8:	f003 0303 	and.w	r3, r3, #3
 80079ac:	2b02      	cmp	r3, #2
 80079ae:	d10b      	bne.n	80079c8 <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80079b0:	4b8f      	ldr	r3, [pc, #572]	; (8007bf0 <HAL_RCC_OscConfig+0x288>)
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	d06c      	beq.n	8007a96 <HAL_RCC_OscConfig+0x12e>
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	685b      	ldr	r3, [r3, #4]
 80079c0:	2b00      	cmp	r3, #0
 80079c2:	d168      	bne.n	8007a96 <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 80079c4:	2301      	movs	r3, #1
 80079c6:	e3f6      	b.n	80081b6 <HAL_RCC_OscConfig+0x84e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	685b      	ldr	r3, [r3, #4]
 80079cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80079d0:	d106      	bne.n	80079e0 <HAL_RCC_OscConfig+0x78>
 80079d2:	4b87      	ldr	r3, [pc, #540]	; (8007bf0 <HAL_RCC_OscConfig+0x288>)
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	4a86      	ldr	r2, [pc, #536]	; (8007bf0 <HAL_RCC_OscConfig+0x288>)
 80079d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80079dc:	6013      	str	r3, [r2, #0]
 80079de:	e02e      	b.n	8007a3e <HAL_RCC_OscConfig+0xd6>
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	685b      	ldr	r3, [r3, #4]
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	d10c      	bne.n	8007a02 <HAL_RCC_OscConfig+0x9a>
 80079e8:	4b81      	ldr	r3, [pc, #516]	; (8007bf0 <HAL_RCC_OscConfig+0x288>)
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	4a80      	ldr	r2, [pc, #512]	; (8007bf0 <HAL_RCC_OscConfig+0x288>)
 80079ee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80079f2:	6013      	str	r3, [r2, #0]
 80079f4:	4b7e      	ldr	r3, [pc, #504]	; (8007bf0 <HAL_RCC_OscConfig+0x288>)
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	4a7d      	ldr	r2, [pc, #500]	; (8007bf0 <HAL_RCC_OscConfig+0x288>)
 80079fa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80079fe:	6013      	str	r3, [r2, #0]
 8007a00:	e01d      	b.n	8007a3e <HAL_RCC_OscConfig+0xd6>
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	685b      	ldr	r3, [r3, #4]
 8007a06:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007a0a:	d10c      	bne.n	8007a26 <HAL_RCC_OscConfig+0xbe>
 8007a0c:	4b78      	ldr	r3, [pc, #480]	; (8007bf0 <HAL_RCC_OscConfig+0x288>)
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	4a77      	ldr	r2, [pc, #476]	; (8007bf0 <HAL_RCC_OscConfig+0x288>)
 8007a12:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007a16:	6013      	str	r3, [r2, #0]
 8007a18:	4b75      	ldr	r3, [pc, #468]	; (8007bf0 <HAL_RCC_OscConfig+0x288>)
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	4a74      	ldr	r2, [pc, #464]	; (8007bf0 <HAL_RCC_OscConfig+0x288>)
 8007a1e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007a22:	6013      	str	r3, [r2, #0]
 8007a24:	e00b      	b.n	8007a3e <HAL_RCC_OscConfig+0xd6>
 8007a26:	4b72      	ldr	r3, [pc, #456]	; (8007bf0 <HAL_RCC_OscConfig+0x288>)
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	4a71      	ldr	r2, [pc, #452]	; (8007bf0 <HAL_RCC_OscConfig+0x288>)
 8007a2c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007a30:	6013      	str	r3, [r2, #0]
 8007a32:	4b6f      	ldr	r3, [pc, #444]	; (8007bf0 <HAL_RCC_OscConfig+0x288>)
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	4a6e      	ldr	r2, [pc, #440]	; (8007bf0 <HAL_RCC_OscConfig+0x288>)
 8007a38:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007a3c:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	685b      	ldr	r3, [r3, #4]
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	d013      	beq.n	8007a6e <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007a46:	f7fe fe77 	bl	8006738 <HAL_GetTick>
 8007a4a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007a4c:	e008      	b.n	8007a60 <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007a4e:	f7fe fe73 	bl	8006738 <HAL_GetTick>
 8007a52:	4602      	mov	r2, r0
 8007a54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a56:	1ad3      	subs	r3, r2, r3
 8007a58:	2b64      	cmp	r3, #100	; 0x64
 8007a5a:	d901      	bls.n	8007a60 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8007a5c:	2303      	movs	r3, #3
 8007a5e:	e3aa      	b.n	80081b6 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007a60:	4b63      	ldr	r3, [pc, #396]	; (8007bf0 <HAL_RCC_OscConfig+0x288>)
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007a68:	2b00      	cmp	r3, #0
 8007a6a:	d0f0      	beq.n	8007a4e <HAL_RCC_OscConfig+0xe6>
 8007a6c:	e014      	b.n	8007a98 <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007a6e:	f7fe fe63 	bl	8006738 <HAL_GetTick>
 8007a72:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8007a74:	e008      	b.n	8007a88 <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007a76:	f7fe fe5f 	bl	8006738 <HAL_GetTick>
 8007a7a:	4602      	mov	r2, r0
 8007a7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a7e:	1ad3      	subs	r3, r2, r3
 8007a80:	2b64      	cmp	r3, #100	; 0x64
 8007a82:	d901      	bls.n	8007a88 <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 8007a84:	2303      	movs	r3, #3
 8007a86:	e396      	b.n	80081b6 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8007a88:	4b59      	ldr	r3, [pc, #356]	; (8007bf0 <HAL_RCC_OscConfig+0x288>)
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	d1f0      	bne.n	8007a76 <HAL_RCC_OscConfig+0x10e>
 8007a94:	e000      	b.n	8007a98 <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007a96:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	f003 0302 	and.w	r3, r3, #2
 8007aa0:	2b00      	cmp	r3, #0
 8007aa2:	f000 80cb 	beq.w	8007c3c <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007aa6:	4b52      	ldr	r3, [pc, #328]	; (8007bf0 <HAL_RCC_OscConfig+0x288>)
 8007aa8:	691b      	ldr	r3, [r3, #16]
 8007aaa:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007aae:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007ab0:	4b4f      	ldr	r3, [pc, #316]	; (8007bf0 <HAL_RCC_OscConfig+0x288>)
 8007ab2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ab4:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8007ab6:	6a3b      	ldr	r3, [r7, #32]
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	d007      	beq.n	8007acc <HAL_RCC_OscConfig+0x164>
 8007abc:	6a3b      	ldr	r3, [r7, #32]
 8007abe:	2b18      	cmp	r3, #24
 8007ac0:	d156      	bne.n	8007b70 <HAL_RCC_OscConfig+0x208>
 8007ac2:	69fb      	ldr	r3, [r7, #28]
 8007ac4:	f003 0303 	and.w	r3, r3, #3
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	d151      	bne.n	8007b70 <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007acc:	4b48      	ldr	r3, [pc, #288]	; (8007bf0 <HAL_RCC_OscConfig+0x288>)
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	f003 0304 	and.w	r3, r3, #4
 8007ad4:	2b00      	cmp	r3, #0
 8007ad6:	d005      	beq.n	8007ae4 <HAL_RCC_OscConfig+0x17c>
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	68db      	ldr	r3, [r3, #12]
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	d101      	bne.n	8007ae4 <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 8007ae0:	2301      	movs	r3, #1
 8007ae2:	e368      	b.n	80081b6 <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8007ae4:	4b42      	ldr	r3, [pc, #264]	; (8007bf0 <HAL_RCC_OscConfig+0x288>)
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	f023 0219 	bic.w	r2, r3, #25
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	68db      	ldr	r3, [r3, #12]
 8007af0:	493f      	ldr	r1, [pc, #252]	; (8007bf0 <HAL_RCC_OscConfig+0x288>)
 8007af2:	4313      	orrs	r3, r2
 8007af4:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8007af6:	f7fe fe1f 	bl	8006738 <HAL_GetTick>
 8007afa:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007afc:	e008      	b.n	8007b10 <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007afe:	f7fe fe1b 	bl	8006738 <HAL_GetTick>
 8007b02:	4602      	mov	r2, r0
 8007b04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b06:	1ad3      	subs	r3, r2, r3
 8007b08:	2b02      	cmp	r3, #2
 8007b0a:	d901      	bls.n	8007b10 <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 8007b0c:	2303      	movs	r3, #3
 8007b0e:	e352      	b.n	80081b6 <HAL_RCC_OscConfig+0x84e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007b10:	4b37      	ldr	r3, [pc, #220]	; (8007bf0 <HAL_RCC_OscConfig+0x288>)
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	f003 0304 	and.w	r3, r3, #4
 8007b18:	2b00      	cmp	r3, #0
 8007b1a:	d0f0      	beq.n	8007afe <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007b1c:	f7fe fe3c 	bl	8006798 <HAL_GetREVID>
 8007b20:	4603      	mov	r3, r0
 8007b22:	f241 0203 	movw	r2, #4099	; 0x1003
 8007b26:	4293      	cmp	r3, r2
 8007b28:	d817      	bhi.n	8007b5a <HAL_RCC_OscConfig+0x1f2>
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	691b      	ldr	r3, [r3, #16]
 8007b2e:	2b40      	cmp	r3, #64	; 0x40
 8007b30:	d108      	bne.n	8007b44 <HAL_RCC_OscConfig+0x1dc>
 8007b32:	4b2f      	ldr	r3, [pc, #188]	; (8007bf0 <HAL_RCC_OscConfig+0x288>)
 8007b34:	685b      	ldr	r3, [r3, #4]
 8007b36:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8007b3a:	4a2d      	ldr	r2, [pc, #180]	; (8007bf0 <HAL_RCC_OscConfig+0x288>)
 8007b3c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007b40:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007b42:	e07b      	b.n	8007c3c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007b44:	4b2a      	ldr	r3, [pc, #168]	; (8007bf0 <HAL_RCC_OscConfig+0x288>)
 8007b46:	685b      	ldr	r3, [r3, #4]
 8007b48:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	691b      	ldr	r3, [r3, #16]
 8007b50:	031b      	lsls	r3, r3, #12
 8007b52:	4927      	ldr	r1, [pc, #156]	; (8007bf0 <HAL_RCC_OscConfig+0x288>)
 8007b54:	4313      	orrs	r3, r2
 8007b56:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007b58:	e070      	b.n	8007c3c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007b5a:	4b25      	ldr	r3, [pc, #148]	; (8007bf0 <HAL_RCC_OscConfig+0x288>)
 8007b5c:	685b      	ldr	r3, [r3, #4]
 8007b5e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	691b      	ldr	r3, [r3, #16]
 8007b66:	061b      	lsls	r3, r3, #24
 8007b68:	4921      	ldr	r1, [pc, #132]	; (8007bf0 <HAL_RCC_OscConfig+0x288>)
 8007b6a:	4313      	orrs	r3, r2
 8007b6c:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007b6e:	e065      	b.n	8007c3c <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	68db      	ldr	r3, [r3, #12]
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	d048      	beq.n	8007c0a <HAL_RCC_OscConfig+0x2a2>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8007b78:	4b1d      	ldr	r3, [pc, #116]	; (8007bf0 <HAL_RCC_OscConfig+0x288>)
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	f023 0219 	bic.w	r2, r3, #25
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	68db      	ldr	r3, [r3, #12]
 8007b84:	491a      	ldr	r1, [pc, #104]	; (8007bf0 <HAL_RCC_OscConfig+0x288>)
 8007b86:	4313      	orrs	r3, r2
 8007b88:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007b8a:	f7fe fdd5 	bl	8006738 <HAL_GetTick>
 8007b8e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007b90:	e008      	b.n	8007ba4 <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007b92:	f7fe fdd1 	bl	8006738 <HAL_GetTick>
 8007b96:	4602      	mov	r2, r0
 8007b98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b9a:	1ad3      	subs	r3, r2, r3
 8007b9c:	2b02      	cmp	r3, #2
 8007b9e:	d901      	bls.n	8007ba4 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 8007ba0:	2303      	movs	r3, #3
 8007ba2:	e308      	b.n	80081b6 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007ba4:	4b12      	ldr	r3, [pc, #72]	; (8007bf0 <HAL_RCC_OscConfig+0x288>)
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	f003 0304 	and.w	r3, r3, #4
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	d0f0      	beq.n	8007b92 <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007bb0:	f7fe fdf2 	bl	8006798 <HAL_GetREVID>
 8007bb4:	4603      	mov	r3, r0
 8007bb6:	f241 0203 	movw	r2, #4099	; 0x1003
 8007bba:	4293      	cmp	r3, r2
 8007bbc:	d81a      	bhi.n	8007bf4 <HAL_RCC_OscConfig+0x28c>
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	691b      	ldr	r3, [r3, #16]
 8007bc2:	2b40      	cmp	r3, #64	; 0x40
 8007bc4:	d108      	bne.n	8007bd8 <HAL_RCC_OscConfig+0x270>
 8007bc6:	4b0a      	ldr	r3, [pc, #40]	; (8007bf0 <HAL_RCC_OscConfig+0x288>)
 8007bc8:	685b      	ldr	r3, [r3, #4]
 8007bca:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8007bce:	4a08      	ldr	r2, [pc, #32]	; (8007bf0 <HAL_RCC_OscConfig+0x288>)
 8007bd0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007bd4:	6053      	str	r3, [r2, #4]
 8007bd6:	e031      	b.n	8007c3c <HAL_RCC_OscConfig+0x2d4>
 8007bd8:	4b05      	ldr	r3, [pc, #20]	; (8007bf0 <HAL_RCC_OscConfig+0x288>)
 8007bda:	685b      	ldr	r3, [r3, #4]
 8007bdc:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	691b      	ldr	r3, [r3, #16]
 8007be4:	031b      	lsls	r3, r3, #12
 8007be6:	4902      	ldr	r1, [pc, #8]	; (8007bf0 <HAL_RCC_OscConfig+0x288>)
 8007be8:	4313      	orrs	r3, r2
 8007bea:	604b      	str	r3, [r1, #4]
 8007bec:	e026      	b.n	8007c3c <HAL_RCC_OscConfig+0x2d4>
 8007bee:	bf00      	nop
 8007bf0:	58024400 	.word	0x58024400
 8007bf4:	4b9a      	ldr	r3, [pc, #616]	; (8007e60 <HAL_RCC_OscConfig+0x4f8>)
 8007bf6:	685b      	ldr	r3, [r3, #4]
 8007bf8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	691b      	ldr	r3, [r3, #16]
 8007c00:	061b      	lsls	r3, r3, #24
 8007c02:	4997      	ldr	r1, [pc, #604]	; (8007e60 <HAL_RCC_OscConfig+0x4f8>)
 8007c04:	4313      	orrs	r3, r2
 8007c06:	604b      	str	r3, [r1, #4]
 8007c08:	e018      	b.n	8007c3c <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007c0a:	4b95      	ldr	r3, [pc, #596]	; (8007e60 <HAL_RCC_OscConfig+0x4f8>)
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	4a94      	ldr	r2, [pc, #592]	; (8007e60 <HAL_RCC_OscConfig+0x4f8>)
 8007c10:	f023 0301 	bic.w	r3, r3, #1
 8007c14:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007c16:	f7fe fd8f 	bl	8006738 <HAL_GetTick>
 8007c1a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8007c1c:	e008      	b.n	8007c30 <HAL_RCC_OscConfig+0x2c8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007c1e:	f7fe fd8b 	bl	8006738 <HAL_GetTick>
 8007c22:	4602      	mov	r2, r0
 8007c24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c26:	1ad3      	subs	r3, r2, r3
 8007c28:	2b02      	cmp	r3, #2
 8007c2a:	d901      	bls.n	8007c30 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8007c2c:	2303      	movs	r3, #3
 8007c2e:	e2c2      	b.n	80081b6 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8007c30:	4b8b      	ldr	r3, [pc, #556]	; (8007e60 <HAL_RCC_OscConfig+0x4f8>)
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	f003 0304 	and.w	r3, r3, #4
 8007c38:	2b00      	cmp	r3, #0
 8007c3a:	d1f0      	bne.n	8007c1e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	f003 0310 	and.w	r3, r3, #16
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	f000 80a9 	beq.w	8007d9c <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007c4a:	4b85      	ldr	r3, [pc, #532]	; (8007e60 <HAL_RCC_OscConfig+0x4f8>)
 8007c4c:	691b      	ldr	r3, [r3, #16]
 8007c4e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007c52:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007c54:	4b82      	ldr	r3, [pc, #520]	; (8007e60 <HAL_RCC_OscConfig+0x4f8>)
 8007c56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c58:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8007c5a:	69bb      	ldr	r3, [r7, #24]
 8007c5c:	2b08      	cmp	r3, #8
 8007c5e:	d007      	beq.n	8007c70 <HAL_RCC_OscConfig+0x308>
 8007c60:	69bb      	ldr	r3, [r7, #24]
 8007c62:	2b18      	cmp	r3, #24
 8007c64:	d13a      	bne.n	8007cdc <HAL_RCC_OscConfig+0x374>
 8007c66:	697b      	ldr	r3, [r7, #20]
 8007c68:	f003 0303 	and.w	r3, r3, #3
 8007c6c:	2b01      	cmp	r3, #1
 8007c6e:	d135      	bne.n	8007cdc <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007c70:	4b7b      	ldr	r3, [pc, #492]	; (8007e60 <HAL_RCC_OscConfig+0x4f8>)
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007c78:	2b00      	cmp	r3, #0
 8007c7a:	d005      	beq.n	8007c88 <HAL_RCC_OscConfig+0x320>
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	69db      	ldr	r3, [r3, #28]
 8007c80:	2b80      	cmp	r3, #128	; 0x80
 8007c82:	d001      	beq.n	8007c88 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8007c84:	2301      	movs	r3, #1
 8007c86:	e296      	b.n	80081b6 <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007c88:	f7fe fd86 	bl	8006798 <HAL_GetREVID>
 8007c8c:	4603      	mov	r3, r0
 8007c8e:	f241 0203 	movw	r2, #4099	; 0x1003
 8007c92:	4293      	cmp	r3, r2
 8007c94:	d817      	bhi.n	8007cc6 <HAL_RCC_OscConfig+0x35e>
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	6a1b      	ldr	r3, [r3, #32]
 8007c9a:	2b20      	cmp	r3, #32
 8007c9c:	d108      	bne.n	8007cb0 <HAL_RCC_OscConfig+0x348>
 8007c9e:	4b70      	ldr	r3, [pc, #448]	; (8007e60 <HAL_RCC_OscConfig+0x4f8>)
 8007ca0:	685b      	ldr	r3, [r3, #4]
 8007ca2:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8007ca6:	4a6e      	ldr	r2, [pc, #440]	; (8007e60 <HAL_RCC_OscConfig+0x4f8>)
 8007ca8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007cac:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007cae:	e075      	b.n	8007d9c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007cb0:	4b6b      	ldr	r3, [pc, #428]	; (8007e60 <HAL_RCC_OscConfig+0x4f8>)
 8007cb2:	685b      	ldr	r3, [r3, #4]
 8007cb4:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	6a1b      	ldr	r3, [r3, #32]
 8007cbc:	069b      	lsls	r3, r3, #26
 8007cbe:	4968      	ldr	r1, [pc, #416]	; (8007e60 <HAL_RCC_OscConfig+0x4f8>)
 8007cc0:	4313      	orrs	r3, r2
 8007cc2:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007cc4:	e06a      	b.n	8007d9c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007cc6:	4b66      	ldr	r3, [pc, #408]	; (8007e60 <HAL_RCC_OscConfig+0x4f8>)
 8007cc8:	68db      	ldr	r3, [r3, #12]
 8007cca:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	6a1b      	ldr	r3, [r3, #32]
 8007cd2:	061b      	lsls	r3, r3, #24
 8007cd4:	4962      	ldr	r1, [pc, #392]	; (8007e60 <HAL_RCC_OscConfig+0x4f8>)
 8007cd6:	4313      	orrs	r3, r2
 8007cd8:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007cda:	e05f      	b.n	8007d9c <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	69db      	ldr	r3, [r3, #28]
 8007ce0:	2b00      	cmp	r3, #0
 8007ce2:	d042      	beq.n	8007d6a <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8007ce4:	4b5e      	ldr	r3, [pc, #376]	; (8007e60 <HAL_RCC_OscConfig+0x4f8>)
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	4a5d      	ldr	r2, [pc, #372]	; (8007e60 <HAL_RCC_OscConfig+0x4f8>)
 8007cea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007cee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007cf0:	f7fe fd22 	bl	8006738 <HAL_GetTick>
 8007cf4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007cf6:	e008      	b.n	8007d0a <HAL_RCC_OscConfig+0x3a2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8007cf8:	f7fe fd1e 	bl	8006738 <HAL_GetTick>
 8007cfc:	4602      	mov	r2, r0
 8007cfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d00:	1ad3      	subs	r3, r2, r3
 8007d02:	2b02      	cmp	r3, #2
 8007d04:	d901      	bls.n	8007d0a <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8007d06:	2303      	movs	r3, #3
 8007d08:	e255      	b.n	80081b6 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007d0a:	4b55      	ldr	r3, [pc, #340]	; (8007e60 <HAL_RCC_OscConfig+0x4f8>)
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	d0f0      	beq.n	8007cf8 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007d16:	f7fe fd3f 	bl	8006798 <HAL_GetREVID>
 8007d1a:	4603      	mov	r3, r0
 8007d1c:	f241 0203 	movw	r2, #4099	; 0x1003
 8007d20:	4293      	cmp	r3, r2
 8007d22:	d817      	bhi.n	8007d54 <HAL_RCC_OscConfig+0x3ec>
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	6a1b      	ldr	r3, [r3, #32]
 8007d28:	2b20      	cmp	r3, #32
 8007d2a:	d108      	bne.n	8007d3e <HAL_RCC_OscConfig+0x3d6>
 8007d2c:	4b4c      	ldr	r3, [pc, #304]	; (8007e60 <HAL_RCC_OscConfig+0x4f8>)
 8007d2e:	685b      	ldr	r3, [r3, #4]
 8007d30:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8007d34:	4a4a      	ldr	r2, [pc, #296]	; (8007e60 <HAL_RCC_OscConfig+0x4f8>)
 8007d36:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007d3a:	6053      	str	r3, [r2, #4]
 8007d3c:	e02e      	b.n	8007d9c <HAL_RCC_OscConfig+0x434>
 8007d3e:	4b48      	ldr	r3, [pc, #288]	; (8007e60 <HAL_RCC_OscConfig+0x4f8>)
 8007d40:	685b      	ldr	r3, [r3, #4]
 8007d42:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	6a1b      	ldr	r3, [r3, #32]
 8007d4a:	069b      	lsls	r3, r3, #26
 8007d4c:	4944      	ldr	r1, [pc, #272]	; (8007e60 <HAL_RCC_OscConfig+0x4f8>)
 8007d4e:	4313      	orrs	r3, r2
 8007d50:	604b      	str	r3, [r1, #4]
 8007d52:	e023      	b.n	8007d9c <HAL_RCC_OscConfig+0x434>
 8007d54:	4b42      	ldr	r3, [pc, #264]	; (8007e60 <HAL_RCC_OscConfig+0x4f8>)
 8007d56:	68db      	ldr	r3, [r3, #12]
 8007d58:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	6a1b      	ldr	r3, [r3, #32]
 8007d60:	061b      	lsls	r3, r3, #24
 8007d62:	493f      	ldr	r1, [pc, #252]	; (8007e60 <HAL_RCC_OscConfig+0x4f8>)
 8007d64:	4313      	orrs	r3, r2
 8007d66:	60cb      	str	r3, [r1, #12]
 8007d68:	e018      	b.n	8007d9c <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8007d6a:	4b3d      	ldr	r3, [pc, #244]	; (8007e60 <HAL_RCC_OscConfig+0x4f8>)
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	4a3c      	ldr	r2, [pc, #240]	; (8007e60 <HAL_RCC_OscConfig+0x4f8>)
 8007d70:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007d74:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007d76:	f7fe fcdf 	bl	8006738 <HAL_GetTick>
 8007d7a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8007d7c:	e008      	b.n	8007d90 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8007d7e:	f7fe fcdb 	bl	8006738 <HAL_GetTick>
 8007d82:	4602      	mov	r2, r0
 8007d84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d86:	1ad3      	subs	r3, r2, r3
 8007d88:	2b02      	cmp	r3, #2
 8007d8a:	d901      	bls.n	8007d90 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8007d8c:	2303      	movs	r3, #3
 8007d8e:	e212      	b.n	80081b6 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8007d90:	4b33      	ldr	r3, [pc, #204]	; (8007e60 <HAL_RCC_OscConfig+0x4f8>)
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	d1f0      	bne.n	8007d7e <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	f003 0308 	and.w	r3, r3, #8
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	d036      	beq.n	8007e16 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	695b      	ldr	r3, [r3, #20]
 8007dac:	2b00      	cmp	r3, #0
 8007dae:	d019      	beq.n	8007de4 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007db0:	4b2b      	ldr	r3, [pc, #172]	; (8007e60 <HAL_RCC_OscConfig+0x4f8>)
 8007db2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007db4:	4a2a      	ldr	r2, [pc, #168]	; (8007e60 <HAL_RCC_OscConfig+0x4f8>)
 8007db6:	f043 0301 	orr.w	r3, r3, #1
 8007dba:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007dbc:	f7fe fcbc 	bl	8006738 <HAL_GetTick>
 8007dc0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8007dc2:	e008      	b.n	8007dd6 <HAL_RCC_OscConfig+0x46e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007dc4:	f7fe fcb8 	bl	8006738 <HAL_GetTick>
 8007dc8:	4602      	mov	r2, r0
 8007dca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dcc:	1ad3      	subs	r3, r2, r3
 8007dce:	2b02      	cmp	r3, #2
 8007dd0:	d901      	bls.n	8007dd6 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8007dd2:	2303      	movs	r3, #3
 8007dd4:	e1ef      	b.n	80081b6 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8007dd6:	4b22      	ldr	r3, [pc, #136]	; (8007e60 <HAL_RCC_OscConfig+0x4f8>)
 8007dd8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007dda:	f003 0302 	and.w	r3, r3, #2
 8007dde:	2b00      	cmp	r3, #0
 8007de0:	d0f0      	beq.n	8007dc4 <HAL_RCC_OscConfig+0x45c>
 8007de2:	e018      	b.n	8007e16 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007de4:	4b1e      	ldr	r3, [pc, #120]	; (8007e60 <HAL_RCC_OscConfig+0x4f8>)
 8007de6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007de8:	4a1d      	ldr	r2, [pc, #116]	; (8007e60 <HAL_RCC_OscConfig+0x4f8>)
 8007dea:	f023 0301 	bic.w	r3, r3, #1
 8007dee:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007df0:	f7fe fca2 	bl	8006738 <HAL_GetTick>
 8007df4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8007df6:	e008      	b.n	8007e0a <HAL_RCC_OscConfig+0x4a2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007df8:	f7fe fc9e 	bl	8006738 <HAL_GetTick>
 8007dfc:	4602      	mov	r2, r0
 8007dfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e00:	1ad3      	subs	r3, r2, r3
 8007e02:	2b02      	cmp	r3, #2
 8007e04:	d901      	bls.n	8007e0a <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8007e06:	2303      	movs	r3, #3
 8007e08:	e1d5      	b.n	80081b6 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8007e0a:	4b15      	ldr	r3, [pc, #84]	; (8007e60 <HAL_RCC_OscConfig+0x4f8>)
 8007e0c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007e0e:	f003 0302 	and.w	r3, r3, #2
 8007e12:	2b00      	cmp	r3, #0
 8007e14:	d1f0      	bne.n	8007df8 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	f003 0320 	and.w	r3, r3, #32
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	d039      	beq.n	8007e96 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	699b      	ldr	r3, [r3, #24]
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	d01c      	beq.n	8007e64 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8007e2a:	4b0d      	ldr	r3, [pc, #52]	; (8007e60 <HAL_RCC_OscConfig+0x4f8>)
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	4a0c      	ldr	r2, [pc, #48]	; (8007e60 <HAL_RCC_OscConfig+0x4f8>)
 8007e30:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8007e34:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8007e36:	f7fe fc7f 	bl	8006738 <HAL_GetTick>
 8007e3a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8007e3c:	e008      	b.n	8007e50 <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8007e3e:	f7fe fc7b 	bl	8006738 <HAL_GetTick>
 8007e42:	4602      	mov	r2, r0
 8007e44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e46:	1ad3      	subs	r3, r2, r3
 8007e48:	2b02      	cmp	r3, #2
 8007e4a:	d901      	bls.n	8007e50 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8007e4c:	2303      	movs	r3, #3
 8007e4e:	e1b2      	b.n	80081b6 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8007e50:	4b03      	ldr	r3, [pc, #12]	; (8007e60 <HAL_RCC_OscConfig+0x4f8>)
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007e58:	2b00      	cmp	r3, #0
 8007e5a:	d0f0      	beq.n	8007e3e <HAL_RCC_OscConfig+0x4d6>
 8007e5c:	e01b      	b.n	8007e96 <HAL_RCC_OscConfig+0x52e>
 8007e5e:	bf00      	nop
 8007e60:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8007e64:	4b9b      	ldr	r3, [pc, #620]	; (80080d4 <HAL_RCC_OscConfig+0x76c>)
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	4a9a      	ldr	r2, [pc, #616]	; (80080d4 <HAL_RCC_OscConfig+0x76c>)
 8007e6a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007e6e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8007e70:	f7fe fc62 	bl	8006738 <HAL_GetTick>
 8007e74:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8007e76:	e008      	b.n	8007e8a <HAL_RCC_OscConfig+0x522>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8007e78:	f7fe fc5e 	bl	8006738 <HAL_GetTick>
 8007e7c:	4602      	mov	r2, r0
 8007e7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e80:	1ad3      	subs	r3, r2, r3
 8007e82:	2b02      	cmp	r3, #2
 8007e84:	d901      	bls.n	8007e8a <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8007e86:	2303      	movs	r3, #3
 8007e88:	e195      	b.n	80081b6 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8007e8a:	4b92      	ldr	r3, [pc, #584]	; (80080d4 <HAL_RCC_OscConfig+0x76c>)
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	d1f0      	bne.n	8007e78 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	f003 0304 	and.w	r3, r3, #4
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	f000 8081 	beq.w	8007fa6 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8007ea4:	4b8c      	ldr	r3, [pc, #560]	; (80080d8 <HAL_RCC_OscConfig+0x770>)
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	4a8b      	ldr	r2, [pc, #556]	; (80080d8 <HAL_RCC_OscConfig+0x770>)
 8007eaa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007eae:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007eb0:	f7fe fc42 	bl	8006738 <HAL_GetTick>
 8007eb4:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007eb6:	e008      	b.n	8007eca <HAL_RCC_OscConfig+0x562>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8007eb8:	f7fe fc3e 	bl	8006738 <HAL_GetTick>
 8007ebc:	4602      	mov	r2, r0
 8007ebe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ec0:	1ad3      	subs	r3, r2, r3
 8007ec2:	2b64      	cmp	r3, #100	; 0x64
 8007ec4:	d901      	bls.n	8007eca <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8007ec6:	2303      	movs	r3, #3
 8007ec8:	e175      	b.n	80081b6 <HAL_RCC_OscConfig+0x84e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007eca:	4b83      	ldr	r3, [pc, #524]	; (80080d8 <HAL_RCC_OscConfig+0x770>)
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007ed2:	2b00      	cmp	r3, #0
 8007ed4:	d0f0      	beq.n	8007eb8 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	689b      	ldr	r3, [r3, #8]
 8007eda:	2b01      	cmp	r3, #1
 8007edc:	d106      	bne.n	8007eec <HAL_RCC_OscConfig+0x584>
 8007ede:	4b7d      	ldr	r3, [pc, #500]	; (80080d4 <HAL_RCC_OscConfig+0x76c>)
 8007ee0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007ee2:	4a7c      	ldr	r2, [pc, #496]	; (80080d4 <HAL_RCC_OscConfig+0x76c>)
 8007ee4:	f043 0301 	orr.w	r3, r3, #1
 8007ee8:	6713      	str	r3, [r2, #112]	; 0x70
 8007eea:	e02d      	b.n	8007f48 <HAL_RCC_OscConfig+0x5e0>
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	689b      	ldr	r3, [r3, #8]
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	d10c      	bne.n	8007f0e <HAL_RCC_OscConfig+0x5a6>
 8007ef4:	4b77      	ldr	r3, [pc, #476]	; (80080d4 <HAL_RCC_OscConfig+0x76c>)
 8007ef6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007ef8:	4a76      	ldr	r2, [pc, #472]	; (80080d4 <HAL_RCC_OscConfig+0x76c>)
 8007efa:	f023 0301 	bic.w	r3, r3, #1
 8007efe:	6713      	str	r3, [r2, #112]	; 0x70
 8007f00:	4b74      	ldr	r3, [pc, #464]	; (80080d4 <HAL_RCC_OscConfig+0x76c>)
 8007f02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007f04:	4a73      	ldr	r2, [pc, #460]	; (80080d4 <HAL_RCC_OscConfig+0x76c>)
 8007f06:	f023 0304 	bic.w	r3, r3, #4
 8007f0a:	6713      	str	r3, [r2, #112]	; 0x70
 8007f0c:	e01c      	b.n	8007f48 <HAL_RCC_OscConfig+0x5e0>
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	689b      	ldr	r3, [r3, #8]
 8007f12:	2b05      	cmp	r3, #5
 8007f14:	d10c      	bne.n	8007f30 <HAL_RCC_OscConfig+0x5c8>
 8007f16:	4b6f      	ldr	r3, [pc, #444]	; (80080d4 <HAL_RCC_OscConfig+0x76c>)
 8007f18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007f1a:	4a6e      	ldr	r2, [pc, #440]	; (80080d4 <HAL_RCC_OscConfig+0x76c>)
 8007f1c:	f043 0304 	orr.w	r3, r3, #4
 8007f20:	6713      	str	r3, [r2, #112]	; 0x70
 8007f22:	4b6c      	ldr	r3, [pc, #432]	; (80080d4 <HAL_RCC_OscConfig+0x76c>)
 8007f24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007f26:	4a6b      	ldr	r2, [pc, #428]	; (80080d4 <HAL_RCC_OscConfig+0x76c>)
 8007f28:	f043 0301 	orr.w	r3, r3, #1
 8007f2c:	6713      	str	r3, [r2, #112]	; 0x70
 8007f2e:	e00b      	b.n	8007f48 <HAL_RCC_OscConfig+0x5e0>
 8007f30:	4b68      	ldr	r3, [pc, #416]	; (80080d4 <HAL_RCC_OscConfig+0x76c>)
 8007f32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007f34:	4a67      	ldr	r2, [pc, #412]	; (80080d4 <HAL_RCC_OscConfig+0x76c>)
 8007f36:	f023 0301 	bic.w	r3, r3, #1
 8007f3a:	6713      	str	r3, [r2, #112]	; 0x70
 8007f3c:	4b65      	ldr	r3, [pc, #404]	; (80080d4 <HAL_RCC_OscConfig+0x76c>)
 8007f3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007f40:	4a64      	ldr	r2, [pc, #400]	; (80080d4 <HAL_RCC_OscConfig+0x76c>)
 8007f42:	f023 0304 	bic.w	r3, r3, #4
 8007f46:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	689b      	ldr	r3, [r3, #8]
 8007f4c:	2b00      	cmp	r3, #0
 8007f4e:	d015      	beq.n	8007f7c <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007f50:	f7fe fbf2 	bl	8006738 <HAL_GetTick>
 8007f54:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007f56:	e00a      	b.n	8007f6e <HAL_RCC_OscConfig+0x606>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007f58:	f7fe fbee 	bl	8006738 <HAL_GetTick>
 8007f5c:	4602      	mov	r2, r0
 8007f5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f60:	1ad3      	subs	r3, r2, r3
 8007f62:	f241 3288 	movw	r2, #5000	; 0x1388
 8007f66:	4293      	cmp	r3, r2
 8007f68:	d901      	bls.n	8007f6e <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8007f6a:	2303      	movs	r3, #3
 8007f6c:	e123      	b.n	80081b6 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007f6e:	4b59      	ldr	r3, [pc, #356]	; (80080d4 <HAL_RCC_OscConfig+0x76c>)
 8007f70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007f72:	f003 0302 	and.w	r3, r3, #2
 8007f76:	2b00      	cmp	r3, #0
 8007f78:	d0ee      	beq.n	8007f58 <HAL_RCC_OscConfig+0x5f0>
 8007f7a:	e014      	b.n	8007fa6 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007f7c:	f7fe fbdc 	bl	8006738 <HAL_GetTick>
 8007f80:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8007f82:	e00a      	b.n	8007f9a <HAL_RCC_OscConfig+0x632>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007f84:	f7fe fbd8 	bl	8006738 <HAL_GetTick>
 8007f88:	4602      	mov	r2, r0
 8007f8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f8c:	1ad3      	subs	r3, r2, r3
 8007f8e:	f241 3288 	movw	r2, #5000	; 0x1388
 8007f92:	4293      	cmp	r3, r2
 8007f94:	d901      	bls.n	8007f9a <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8007f96:	2303      	movs	r3, #3
 8007f98:	e10d      	b.n	80081b6 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8007f9a:	4b4e      	ldr	r3, [pc, #312]	; (80080d4 <HAL_RCC_OscConfig+0x76c>)
 8007f9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007f9e:	f003 0302 	and.w	r3, r3, #2
 8007fa2:	2b00      	cmp	r3, #0
 8007fa4:	d1ee      	bne.n	8007f84 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	f000 8102 	beq.w	80081b4 <HAL_RCC_OscConfig+0x84c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8007fb0:	4b48      	ldr	r3, [pc, #288]	; (80080d4 <HAL_RCC_OscConfig+0x76c>)
 8007fb2:	691b      	ldr	r3, [r3, #16]
 8007fb4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007fb8:	2b18      	cmp	r3, #24
 8007fba:	f000 80bd 	beq.w	8008138 <HAL_RCC_OscConfig+0x7d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fc2:	2b02      	cmp	r3, #2
 8007fc4:	f040 809e 	bne.w	8008104 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007fc8:	4b42      	ldr	r3, [pc, #264]	; (80080d4 <HAL_RCC_OscConfig+0x76c>)
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	4a41      	ldr	r2, [pc, #260]	; (80080d4 <HAL_RCC_OscConfig+0x76c>)
 8007fce:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007fd2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007fd4:	f7fe fbb0 	bl	8006738 <HAL_GetTick>
 8007fd8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007fda:	e008      	b.n	8007fee <HAL_RCC_OscConfig+0x686>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007fdc:	f7fe fbac 	bl	8006738 <HAL_GetTick>
 8007fe0:	4602      	mov	r2, r0
 8007fe2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fe4:	1ad3      	subs	r3, r2, r3
 8007fe6:	2b02      	cmp	r3, #2
 8007fe8:	d901      	bls.n	8007fee <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8007fea:	2303      	movs	r3, #3
 8007fec:	e0e3      	b.n	80081b6 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007fee:	4b39      	ldr	r3, [pc, #228]	; (80080d4 <HAL_RCC_OscConfig+0x76c>)
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007ff6:	2b00      	cmp	r3, #0
 8007ff8:	d1f0      	bne.n	8007fdc <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007ffa:	4b36      	ldr	r3, [pc, #216]	; (80080d4 <HAL_RCC_OscConfig+0x76c>)
 8007ffc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007ffe:	4b37      	ldr	r3, [pc, #220]	; (80080dc <HAL_RCC_OscConfig+0x774>)
 8008000:	4013      	ands	r3, r2
 8008002:	687a      	ldr	r2, [r7, #4]
 8008004:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8008006:	687a      	ldr	r2, [r7, #4]
 8008008:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800800a:	0112      	lsls	r2, r2, #4
 800800c:	430a      	orrs	r2, r1
 800800e:	4931      	ldr	r1, [pc, #196]	; (80080d4 <HAL_RCC_OscConfig+0x76c>)
 8008010:	4313      	orrs	r3, r2
 8008012:	628b      	str	r3, [r1, #40]	; 0x28
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008018:	3b01      	subs	r3, #1
 800801a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008022:	3b01      	subs	r3, #1
 8008024:	025b      	lsls	r3, r3, #9
 8008026:	b29b      	uxth	r3, r3
 8008028:	431a      	orrs	r2, r3
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800802e:	3b01      	subs	r3, #1
 8008030:	041b      	lsls	r3, r3, #16
 8008032:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8008036:	431a      	orrs	r2, r3
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800803c:	3b01      	subs	r3, #1
 800803e:	061b      	lsls	r3, r3, #24
 8008040:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8008044:	4923      	ldr	r1, [pc, #140]	; (80080d4 <HAL_RCC_OscConfig+0x76c>)
 8008046:	4313      	orrs	r3, r2
 8008048:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 800804a:	4b22      	ldr	r3, [pc, #136]	; (80080d4 <HAL_RCC_OscConfig+0x76c>)
 800804c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800804e:	4a21      	ldr	r2, [pc, #132]	; (80080d4 <HAL_RCC_OscConfig+0x76c>)
 8008050:	f023 0301 	bic.w	r3, r3, #1
 8008054:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8008056:	4b1f      	ldr	r3, [pc, #124]	; (80080d4 <HAL_RCC_OscConfig+0x76c>)
 8008058:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800805a:	4b21      	ldr	r3, [pc, #132]	; (80080e0 <HAL_RCC_OscConfig+0x778>)
 800805c:	4013      	ands	r3, r2
 800805e:	687a      	ldr	r2, [r7, #4]
 8008060:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8008062:	00d2      	lsls	r2, r2, #3
 8008064:	491b      	ldr	r1, [pc, #108]	; (80080d4 <HAL_RCC_OscConfig+0x76c>)
 8008066:	4313      	orrs	r3, r2
 8008068:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800806a:	4b1a      	ldr	r3, [pc, #104]	; (80080d4 <HAL_RCC_OscConfig+0x76c>)
 800806c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800806e:	f023 020c 	bic.w	r2, r3, #12
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008076:	4917      	ldr	r1, [pc, #92]	; (80080d4 <HAL_RCC_OscConfig+0x76c>)
 8008078:	4313      	orrs	r3, r2
 800807a:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800807c:	4b15      	ldr	r3, [pc, #84]	; (80080d4 <HAL_RCC_OscConfig+0x76c>)
 800807e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008080:	f023 0202 	bic.w	r2, r3, #2
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008088:	4912      	ldr	r1, [pc, #72]	; (80080d4 <HAL_RCC_OscConfig+0x76c>)
 800808a:	4313      	orrs	r3, r2
 800808c:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800808e:	4b11      	ldr	r3, [pc, #68]	; (80080d4 <HAL_RCC_OscConfig+0x76c>)
 8008090:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008092:	4a10      	ldr	r2, [pc, #64]	; (80080d4 <HAL_RCC_OscConfig+0x76c>)
 8008094:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008098:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800809a:	4b0e      	ldr	r3, [pc, #56]	; (80080d4 <HAL_RCC_OscConfig+0x76c>)
 800809c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800809e:	4a0d      	ldr	r2, [pc, #52]	; (80080d4 <HAL_RCC_OscConfig+0x76c>)
 80080a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80080a4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80080a6:	4b0b      	ldr	r3, [pc, #44]	; (80080d4 <HAL_RCC_OscConfig+0x76c>)
 80080a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080aa:	4a0a      	ldr	r2, [pc, #40]	; (80080d4 <HAL_RCC_OscConfig+0x76c>)
 80080ac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80080b0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 80080b2:	4b08      	ldr	r3, [pc, #32]	; (80080d4 <HAL_RCC_OscConfig+0x76c>)
 80080b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080b6:	4a07      	ldr	r2, [pc, #28]	; (80080d4 <HAL_RCC_OscConfig+0x76c>)
 80080b8:	f043 0301 	orr.w	r3, r3, #1
 80080bc:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80080be:	4b05      	ldr	r3, [pc, #20]	; (80080d4 <HAL_RCC_OscConfig+0x76c>)
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	4a04      	ldr	r2, [pc, #16]	; (80080d4 <HAL_RCC_OscConfig+0x76c>)
 80080c4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80080c8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80080ca:	f7fe fb35 	bl	8006738 <HAL_GetTick>
 80080ce:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80080d0:	e011      	b.n	80080f6 <HAL_RCC_OscConfig+0x78e>
 80080d2:	bf00      	nop
 80080d4:	58024400 	.word	0x58024400
 80080d8:	58024800 	.word	0x58024800
 80080dc:	fffffc0c 	.word	0xfffffc0c
 80080e0:	ffff0007 	.word	0xffff0007
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80080e4:	f7fe fb28 	bl	8006738 <HAL_GetTick>
 80080e8:	4602      	mov	r2, r0
 80080ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080ec:	1ad3      	subs	r3, r2, r3
 80080ee:	2b02      	cmp	r3, #2
 80080f0:	d901      	bls.n	80080f6 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 80080f2:	2303      	movs	r3, #3
 80080f4:	e05f      	b.n	80081b6 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80080f6:	4b32      	ldr	r3, [pc, #200]	; (80081c0 <HAL_RCC_OscConfig+0x858>)
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80080fe:	2b00      	cmp	r3, #0
 8008100:	d0f0      	beq.n	80080e4 <HAL_RCC_OscConfig+0x77c>
 8008102:	e057      	b.n	80081b4 <HAL_RCC_OscConfig+0x84c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008104:	4b2e      	ldr	r3, [pc, #184]	; (80081c0 <HAL_RCC_OscConfig+0x858>)
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	4a2d      	ldr	r2, [pc, #180]	; (80081c0 <HAL_RCC_OscConfig+0x858>)
 800810a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800810e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008110:	f7fe fb12 	bl	8006738 <HAL_GetTick>
 8008114:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008116:	e008      	b.n	800812a <HAL_RCC_OscConfig+0x7c2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008118:	f7fe fb0e 	bl	8006738 <HAL_GetTick>
 800811c:	4602      	mov	r2, r0
 800811e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008120:	1ad3      	subs	r3, r2, r3
 8008122:	2b02      	cmp	r3, #2
 8008124:	d901      	bls.n	800812a <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8008126:	2303      	movs	r3, #3
 8008128:	e045      	b.n	80081b6 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800812a:	4b25      	ldr	r3, [pc, #148]	; (80081c0 <HAL_RCC_OscConfig+0x858>)
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008132:	2b00      	cmp	r3, #0
 8008134:	d1f0      	bne.n	8008118 <HAL_RCC_OscConfig+0x7b0>
 8008136:	e03d      	b.n	80081b4 <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8008138:	4b21      	ldr	r3, [pc, #132]	; (80081c0 <HAL_RCC_OscConfig+0x858>)
 800813a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800813c:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800813e:	4b20      	ldr	r3, [pc, #128]	; (80081c0 <HAL_RCC_OscConfig+0x858>)
 8008140:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008142:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008148:	2b01      	cmp	r3, #1
 800814a:	d031      	beq.n	80081b0 <HAL_RCC_OscConfig+0x848>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800814c:	693b      	ldr	r3, [r7, #16]
 800814e:	f003 0203 	and.w	r2, r3, #3
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008156:	429a      	cmp	r2, r3
 8008158:	d12a      	bne.n	80081b0 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800815a:	693b      	ldr	r3, [r7, #16]
 800815c:	091b      	lsrs	r3, r3, #4
 800815e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008166:	429a      	cmp	r2, r3
 8008168:	d122      	bne.n	80081b0 <HAL_RCC_OscConfig+0x848>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800816a:	68fb      	ldr	r3, [r7, #12]
 800816c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008174:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8008176:	429a      	cmp	r2, r3
 8008178:	d11a      	bne.n	80081b0 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800817a:	68fb      	ldr	r3, [r7, #12]
 800817c:	0a5b      	lsrs	r3, r3, #9
 800817e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008186:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8008188:	429a      	cmp	r2, r3
 800818a:	d111      	bne.n	80081b0 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800818c:	68fb      	ldr	r3, [r7, #12]
 800818e:	0c1b      	lsrs	r3, r3, #16
 8008190:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008198:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800819a:	429a      	cmp	r2, r3
 800819c:	d108      	bne.n	80081b0 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800819e:	68fb      	ldr	r3, [r7, #12]
 80081a0:	0e1b      	lsrs	r3, r3, #24
 80081a2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80081aa:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80081ac:	429a      	cmp	r2, r3
 80081ae:	d001      	beq.n	80081b4 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 80081b0:	2301      	movs	r3, #1
 80081b2:	e000      	b.n	80081b6 <HAL_RCC_OscConfig+0x84e>
      }
    }
  }
  return HAL_OK;
 80081b4:	2300      	movs	r3, #0
}
 80081b6:	4618      	mov	r0, r3
 80081b8:	3730      	adds	r7, #48	; 0x30
 80081ba:	46bd      	mov	sp, r7
 80081bc:	bd80      	pop	{r7, pc}
 80081be:	bf00      	nop
 80081c0:	58024400 	.word	0x58024400

080081c4 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80081c4:	b580      	push	{r7, lr}
 80081c6:	b086      	sub	sp, #24
 80081c8:	af00      	add	r7, sp, #0
 80081ca:	6078      	str	r0, [r7, #4]
 80081cc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	2b00      	cmp	r3, #0
 80081d2:	d101      	bne.n	80081d8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80081d4:	2301      	movs	r3, #1
 80081d6:	e19c      	b.n	8008512 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80081d8:	4b8a      	ldr	r3, [pc, #552]	; (8008404 <HAL_RCC_ClockConfig+0x240>)
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	f003 030f 	and.w	r3, r3, #15
 80081e0:	683a      	ldr	r2, [r7, #0]
 80081e2:	429a      	cmp	r2, r3
 80081e4:	d910      	bls.n	8008208 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80081e6:	4b87      	ldr	r3, [pc, #540]	; (8008404 <HAL_RCC_ClockConfig+0x240>)
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	f023 020f 	bic.w	r2, r3, #15
 80081ee:	4985      	ldr	r1, [pc, #532]	; (8008404 <HAL_RCC_ClockConfig+0x240>)
 80081f0:	683b      	ldr	r3, [r7, #0]
 80081f2:	4313      	orrs	r3, r2
 80081f4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80081f6:	4b83      	ldr	r3, [pc, #524]	; (8008404 <HAL_RCC_ClockConfig+0x240>)
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	f003 030f 	and.w	r3, r3, #15
 80081fe:	683a      	ldr	r2, [r7, #0]
 8008200:	429a      	cmp	r2, r3
 8008202:	d001      	beq.n	8008208 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8008204:	2301      	movs	r3, #1
 8008206:	e184      	b.n	8008512 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	f003 0304 	and.w	r3, r3, #4
 8008210:	2b00      	cmp	r3, #0
 8008212:	d010      	beq.n	8008236 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	691a      	ldr	r2, [r3, #16]
 8008218:	4b7b      	ldr	r3, [pc, #492]	; (8008408 <HAL_RCC_ClockConfig+0x244>)
 800821a:	699b      	ldr	r3, [r3, #24]
 800821c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008220:	429a      	cmp	r2, r3
 8008222:	d908      	bls.n	8008236 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8008224:	4b78      	ldr	r3, [pc, #480]	; (8008408 <HAL_RCC_ClockConfig+0x244>)
 8008226:	699b      	ldr	r3, [r3, #24]
 8008228:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	691b      	ldr	r3, [r3, #16]
 8008230:	4975      	ldr	r1, [pc, #468]	; (8008408 <HAL_RCC_ClockConfig+0x244>)
 8008232:	4313      	orrs	r3, r2
 8008234:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	f003 0308 	and.w	r3, r3, #8
 800823e:	2b00      	cmp	r3, #0
 8008240:	d010      	beq.n	8008264 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	695a      	ldr	r2, [r3, #20]
 8008246:	4b70      	ldr	r3, [pc, #448]	; (8008408 <HAL_RCC_ClockConfig+0x244>)
 8008248:	69db      	ldr	r3, [r3, #28]
 800824a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800824e:	429a      	cmp	r2, r3
 8008250:	d908      	bls.n	8008264 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8008252:	4b6d      	ldr	r3, [pc, #436]	; (8008408 <HAL_RCC_ClockConfig+0x244>)
 8008254:	69db      	ldr	r3, [r3, #28]
 8008256:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	695b      	ldr	r3, [r3, #20]
 800825e:	496a      	ldr	r1, [pc, #424]	; (8008408 <HAL_RCC_ClockConfig+0x244>)
 8008260:	4313      	orrs	r3, r2
 8008262:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	f003 0310 	and.w	r3, r3, #16
 800826c:	2b00      	cmp	r3, #0
 800826e:	d010      	beq.n	8008292 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	699a      	ldr	r2, [r3, #24]
 8008274:	4b64      	ldr	r3, [pc, #400]	; (8008408 <HAL_RCC_ClockConfig+0x244>)
 8008276:	69db      	ldr	r3, [r3, #28]
 8008278:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800827c:	429a      	cmp	r2, r3
 800827e:	d908      	bls.n	8008292 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8008280:	4b61      	ldr	r3, [pc, #388]	; (8008408 <HAL_RCC_ClockConfig+0x244>)
 8008282:	69db      	ldr	r3, [r3, #28]
 8008284:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	699b      	ldr	r3, [r3, #24]
 800828c:	495e      	ldr	r1, [pc, #376]	; (8008408 <HAL_RCC_ClockConfig+0x244>)
 800828e:	4313      	orrs	r3, r2
 8008290:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	f003 0320 	and.w	r3, r3, #32
 800829a:	2b00      	cmp	r3, #0
 800829c:	d010      	beq.n	80082c0 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	69da      	ldr	r2, [r3, #28]
 80082a2:	4b59      	ldr	r3, [pc, #356]	; (8008408 <HAL_RCC_ClockConfig+0x244>)
 80082a4:	6a1b      	ldr	r3, [r3, #32]
 80082a6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80082aa:	429a      	cmp	r2, r3
 80082ac:	d908      	bls.n	80082c0 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80082ae:	4b56      	ldr	r3, [pc, #344]	; (8008408 <HAL_RCC_ClockConfig+0x244>)
 80082b0:	6a1b      	ldr	r3, [r3, #32]
 80082b2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	69db      	ldr	r3, [r3, #28]
 80082ba:	4953      	ldr	r1, [pc, #332]	; (8008408 <HAL_RCC_ClockConfig+0x244>)
 80082bc:	4313      	orrs	r3, r2
 80082be:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	f003 0302 	and.w	r3, r3, #2
 80082c8:	2b00      	cmp	r3, #0
 80082ca:	d010      	beq.n	80082ee <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	68da      	ldr	r2, [r3, #12]
 80082d0:	4b4d      	ldr	r3, [pc, #308]	; (8008408 <HAL_RCC_ClockConfig+0x244>)
 80082d2:	699b      	ldr	r3, [r3, #24]
 80082d4:	f003 030f 	and.w	r3, r3, #15
 80082d8:	429a      	cmp	r2, r3
 80082da:	d908      	bls.n	80082ee <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80082dc:	4b4a      	ldr	r3, [pc, #296]	; (8008408 <HAL_RCC_ClockConfig+0x244>)
 80082de:	699b      	ldr	r3, [r3, #24]
 80082e0:	f023 020f 	bic.w	r2, r3, #15
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	68db      	ldr	r3, [r3, #12]
 80082e8:	4947      	ldr	r1, [pc, #284]	; (8008408 <HAL_RCC_ClockConfig+0x244>)
 80082ea:	4313      	orrs	r3, r2
 80082ec:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	f003 0301 	and.w	r3, r3, #1
 80082f6:	2b00      	cmp	r3, #0
 80082f8:	d055      	beq.n	80083a6 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80082fa:	4b43      	ldr	r3, [pc, #268]	; (8008408 <HAL_RCC_ClockConfig+0x244>)
 80082fc:	699b      	ldr	r3, [r3, #24]
 80082fe:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	689b      	ldr	r3, [r3, #8]
 8008306:	4940      	ldr	r1, [pc, #256]	; (8008408 <HAL_RCC_ClockConfig+0x244>)
 8008308:	4313      	orrs	r3, r2
 800830a:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	685b      	ldr	r3, [r3, #4]
 8008310:	2b02      	cmp	r3, #2
 8008312:	d107      	bne.n	8008324 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008314:	4b3c      	ldr	r3, [pc, #240]	; (8008408 <HAL_RCC_ClockConfig+0x244>)
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800831c:	2b00      	cmp	r3, #0
 800831e:	d121      	bne.n	8008364 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8008320:	2301      	movs	r3, #1
 8008322:	e0f6      	b.n	8008512 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	685b      	ldr	r3, [r3, #4]
 8008328:	2b03      	cmp	r3, #3
 800832a:	d107      	bne.n	800833c <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800832c:	4b36      	ldr	r3, [pc, #216]	; (8008408 <HAL_RCC_ClockConfig+0x244>)
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008334:	2b00      	cmp	r3, #0
 8008336:	d115      	bne.n	8008364 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8008338:	2301      	movs	r3, #1
 800833a:	e0ea      	b.n	8008512 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	685b      	ldr	r3, [r3, #4]
 8008340:	2b01      	cmp	r3, #1
 8008342:	d107      	bne.n	8008354 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008344:	4b30      	ldr	r3, [pc, #192]	; (8008408 <HAL_RCC_ClockConfig+0x244>)
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800834c:	2b00      	cmp	r3, #0
 800834e:	d109      	bne.n	8008364 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8008350:	2301      	movs	r3, #1
 8008352:	e0de      	b.n	8008512 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008354:	4b2c      	ldr	r3, [pc, #176]	; (8008408 <HAL_RCC_ClockConfig+0x244>)
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	f003 0304 	and.w	r3, r3, #4
 800835c:	2b00      	cmp	r3, #0
 800835e:	d101      	bne.n	8008364 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8008360:	2301      	movs	r3, #1
 8008362:	e0d6      	b.n	8008512 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8008364:	4b28      	ldr	r3, [pc, #160]	; (8008408 <HAL_RCC_ClockConfig+0x244>)
 8008366:	691b      	ldr	r3, [r3, #16]
 8008368:	f023 0207 	bic.w	r2, r3, #7
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	685b      	ldr	r3, [r3, #4]
 8008370:	4925      	ldr	r1, [pc, #148]	; (8008408 <HAL_RCC_ClockConfig+0x244>)
 8008372:	4313      	orrs	r3, r2
 8008374:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008376:	f7fe f9df 	bl	8006738 <HAL_GetTick>
 800837a:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800837c:	e00a      	b.n	8008394 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800837e:	f7fe f9db 	bl	8006738 <HAL_GetTick>
 8008382:	4602      	mov	r2, r0
 8008384:	697b      	ldr	r3, [r7, #20]
 8008386:	1ad3      	subs	r3, r2, r3
 8008388:	f241 3288 	movw	r2, #5000	; 0x1388
 800838c:	4293      	cmp	r3, r2
 800838e:	d901      	bls.n	8008394 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8008390:	2303      	movs	r3, #3
 8008392:	e0be      	b.n	8008512 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008394:	4b1c      	ldr	r3, [pc, #112]	; (8008408 <HAL_RCC_ClockConfig+0x244>)
 8008396:	691b      	ldr	r3, [r3, #16]
 8008398:	f003 0238 	and.w	r2, r3, #56	; 0x38
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	685b      	ldr	r3, [r3, #4]
 80083a0:	00db      	lsls	r3, r3, #3
 80083a2:	429a      	cmp	r2, r3
 80083a4:	d1eb      	bne.n	800837e <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	f003 0302 	and.w	r3, r3, #2
 80083ae:	2b00      	cmp	r3, #0
 80083b0:	d010      	beq.n	80083d4 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	68da      	ldr	r2, [r3, #12]
 80083b6:	4b14      	ldr	r3, [pc, #80]	; (8008408 <HAL_RCC_ClockConfig+0x244>)
 80083b8:	699b      	ldr	r3, [r3, #24]
 80083ba:	f003 030f 	and.w	r3, r3, #15
 80083be:	429a      	cmp	r2, r3
 80083c0:	d208      	bcs.n	80083d4 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80083c2:	4b11      	ldr	r3, [pc, #68]	; (8008408 <HAL_RCC_ClockConfig+0x244>)
 80083c4:	699b      	ldr	r3, [r3, #24]
 80083c6:	f023 020f 	bic.w	r2, r3, #15
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	68db      	ldr	r3, [r3, #12]
 80083ce:	490e      	ldr	r1, [pc, #56]	; (8008408 <HAL_RCC_ClockConfig+0x244>)
 80083d0:	4313      	orrs	r3, r2
 80083d2:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80083d4:	4b0b      	ldr	r3, [pc, #44]	; (8008404 <HAL_RCC_ClockConfig+0x240>)
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	f003 030f 	and.w	r3, r3, #15
 80083dc:	683a      	ldr	r2, [r7, #0]
 80083de:	429a      	cmp	r2, r3
 80083e0:	d214      	bcs.n	800840c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80083e2:	4b08      	ldr	r3, [pc, #32]	; (8008404 <HAL_RCC_ClockConfig+0x240>)
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	f023 020f 	bic.w	r2, r3, #15
 80083ea:	4906      	ldr	r1, [pc, #24]	; (8008404 <HAL_RCC_ClockConfig+0x240>)
 80083ec:	683b      	ldr	r3, [r7, #0]
 80083ee:	4313      	orrs	r3, r2
 80083f0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80083f2:	4b04      	ldr	r3, [pc, #16]	; (8008404 <HAL_RCC_ClockConfig+0x240>)
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	f003 030f 	and.w	r3, r3, #15
 80083fa:	683a      	ldr	r2, [r7, #0]
 80083fc:	429a      	cmp	r2, r3
 80083fe:	d005      	beq.n	800840c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8008400:	2301      	movs	r3, #1
 8008402:	e086      	b.n	8008512 <HAL_RCC_ClockConfig+0x34e>
 8008404:	52002000 	.word	0x52002000
 8008408:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	f003 0304 	and.w	r3, r3, #4
 8008414:	2b00      	cmp	r3, #0
 8008416:	d010      	beq.n	800843a <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	691a      	ldr	r2, [r3, #16]
 800841c:	4b3f      	ldr	r3, [pc, #252]	; (800851c <HAL_RCC_ClockConfig+0x358>)
 800841e:	699b      	ldr	r3, [r3, #24]
 8008420:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008424:	429a      	cmp	r2, r3
 8008426:	d208      	bcs.n	800843a <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8008428:	4b3c      	ldr	r3, [pc, #240]	; (800851c <HAL_RCC_ClockConfig+0x358>)
 800842a:	699b      	ldr	r3, [r3, #24]
 800842c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	691b      	ldr	r3, [r3, #16]
 8008434:	4939      	ldr	r1, [pc, #228]	; (800851c <HAL_RCC_ClockConfig+0x358>)
 8008436:	4313      	orrs	r3, r2
 8008438:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	f003 0308 	and.w	r3, r3, #8
 8008442:	2b00      	cmp	r3, #0
 8008444:	d010      	beq.n	8008468 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	695a      	ldr	r2, [r3, #20]
 800844a:	4b34      	ldr	r3, [pc, #208]	; (800851c <HAL_RCC_ClockConfig+0x358>)
 800844c:	69db      	ldr	r3, [r3, #28]
 800844e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008452:	429a      	cmp	r2, r3
 8008454:	d208      	bcs.n	8008468 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8008456:	4b31      	ldr	r3, [pc, #196]	; (800851c <HAL_RCC_ClockConfig+0x358>)
 8008458:	69db      	ldr	r3, [r3, #28]
 800845a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	695b      	ldr	r3, [r3, #20]
 8008462:	492e      	ldr	r1, [pc, #184]	; (800851c <HAL_RCC_ClockConfig+0x358>)
 8008464:	4313      	orrs	r3, r2
 8008466:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	f003 0310 	and.w	r3, r3, #16
 8008470:	2b00      	cmp	r3, #0
 8008472:	d010      	beq.n	8008496 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	699a      	ldr	r2, [r3, #24]
 8008478:	4b28      	ldr	r3, [pc, #160]	; (800851c <HAL_RCC_ClockConfig+0x358>)
 800847a:	69db      	ldr	r3, [r3, #28]
 800847c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008480:	429a      	cmp	r2, r3
 8008482:	d208      	bcs.n	8008496 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8008484:	4b25      	ldr	r3, [pc, #148]	; (800851c <HAL_RCC_ClockConfig+0x358>)
 8008486:	69db      	ldr	r3, [r3, #28]
 8008488:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	699b      	ldr	r3, [r3, #24]
 8008490:	4922      	ldr	r1, [pc, #136]	; (800851c <HAL_RCC_ClockConfig+0x358>)
 8008492:	4313      	orrs	r3, r2
 8008494:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	f003 0320 	and.w	r3, r3, #32
 800849e:	2b00      	cmp	r3, #0
 80084a0:	d010      	beq.n	80084c4 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	69da      	ldr	r2, [r3, #28]
 80084a6:	4b1d      	ldr	r3, [pc, #116]	; (800851c <HAL_RCC_ClockConfig+0x358>)
 80084a8:	6a1b      	ldr	r3, [r3, #32]
 80084aa:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80084ae:	429a      	cmp	r2, r3
 80084b0:	d208      	bcs.n	80084c4 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80084b2:	4b1a      	ldr	r3, [pc, #104]	; (800851c <HAL_RCC_ClockConfig+0x358>)
 80084b4:	6a1b      	ldr	r3, [r3, #32]
 80084b6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	69db      	ldr	r3, [r3, #28]
 80084be:	4917      	ldr	r1, [pc, #92]	; (800851c <HAL_RCC_ClockConfig+0x358>)
 80084c0:	4313      	orrs	r3, r2
 80084c2:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80084c4:	f000 f834 	bl	8008530 <HAL_RCC_GetSysClockFreq>
 80084c8:	4602      	mov	r2, r0
 80084ca:	4b14      	ldr	r3, [pc, #80]	; (800851c <HAL_RCC_ClockConfig+0x358>)
 80084cc:	699b      	ldr	r3, [r3, #24]
 80084ce:	0a1b      	lsrs	r3, r3, #8
 80084d0:	f003 030f 	and.w	r3, r3, #15
 80084d4:	4912      	ldr	r1, [pc, #72]	; (8008520 <HAL_RCC_ClockConfig+0x35c>)
 80084d6:	5ccb      	ldrb	r3, [r1, r3]
 80084d8:	f003 031f 	and.w	r3, r3, #31
 80084dc:	fa22 f303 	lsr.w	r3, r2, r3
 80084e0:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80084e2:	4b0e      	ldr	r3, [pc, #56]	; (800851c <HAL_RCC_ClockConfig+0x358>)
 80084e4:	699b      	ldr	r3, [r3, #24]
 80084e6:	f003 030f 	and.w	r3, r3, #15
 80084ea:	4a0d      	ldr	r2, [pc, #52]	; (8008520 <HAL_RCC_ClockConfig+0x35c>)
 80084ec:	5cd3      	ldrb	r3, [r2, r3]
 80084ee:	f003 031f 	and.w	r3, r3, #31
 80084f2:	693a      	ldr	r2, [r7, #16]
 80084f4:	fa22 f303 	lsr.w	r3, r2, r3
 80084f8:	4a0a      	ldr	r2, [pc, #40]	; (8008524 <HAL_RCC_ClockConfig+0x360>)
 80084fa:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80084fc:	4a0a      	ldr	r2, [pc, #40]	; (8008528 <HAL_RCC_ClockConfig+0x364>)
 80084fe:	693b      	ldr	r3, [r7, #16]
 8008500:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8008502:	4b0a      	ldr	r3, [pc, #40]	; (800852c <HAL_RCC_ClockConfig+0x368>)
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	4618      	mov	r0, r3
 8008508:	f7fe f8cc 	bl	80066a4 <HAL_InitTick>
 800850c:	4603      	mov	r3, r0
 800850e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8008510:	7bfb      	ldrb	r3, [r7, #15]
}
 8008512:	4618      	mov	r0, r3
 8008514:	3718      	adds	r7, #24
 8008516:	46bd      	mov	sp, r7
 8008518:	bd80      	pop	{r7, pc}
 800851a:	bf00      	nop
 800851c:	58024400 	.word	0x58024400
 8008520:	0801228c 	.word	0x0801228c
 8008524:	24000084 	.word	0x24000084
 8008528:	24000080 	.word	0x24000080
 800852c:	24000088 	.word	0x24000088

08008530 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008530:	b480      	push	{r7}
 8008532:	b089      	sub	sp, #36	; 0x24
 8008534:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008536:	4bb3      	ldr	r3, [pc, #716]	; (8008804 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008538:	691b      	ldr	r3, [r3, #16]
 800853a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800853e:	2b18      	cmp	r3, #24
 8008540:	f200 8155 	bhi.w	80087ee <HAL_RCC_GetSysClockFreq+0x2be>
 8008544:	a201      	add	r2, pc, #4	; (adr r2, 800854c <HAL_RCC_GetSysClockFreq+0x1c>)
 8008546:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800854a:	bf00      	nop
 800854c:	080085b1 	.word	0x080085b1
 8008550:	080087ef 	.word	0x080087ef
 8008554:	080087ef 	.word	0x080087ef
 8008558:	080087ef 	.word	0x080087ef
 800855c:	080087ef 	.word	0x080087ef
 8008560:	080087ef 	.word	0x080087ef
 8008564:	080087ef 	.word	0x080087ef
 8008568:	080087ef 	.word	0x080087ef
 800856c:	080085d7 	.word	0x080085d7
 8008570:	080087ef 	.word	0x080087ef
 8008574:	080087ef 	.word	0x080087ef
 8008578:	080087ef 	.word	0x080087ef
 800857c:	080087ef 	.word	0x080087ef
 8008580:	080087ef 	.word	0x080087ef
 8008584:	080087ef 	.word	0x080087ef
 8008588:	080087ef 	.word	0x080087ef
 800858c:	080085dd 	.word	0x080085dd
 8008590:	080087ef 	.word	0x080087ef
 8008594:	080087ef 	.word	0x080087ef
 8008598:	080087ef 	.word	0x080087ef
 800859c:	080087ef 	.word	0x080087ef
 80085a0:	080087ef 	.word	0x080087ef
 80085a4:	080087ef 	.word	0x080087ef
 80085a8:	080087ef 	.word	0x080087ef
 80085ac:	080085e3 	.word	0x080085e3
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80085b0:	4b94      	ldr	r3, [pc, #592]	; (8008804 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	f003 0320 	and.w	r3, r3, #32
 80085b8:	2b00      	cmp	r3, #0
 80085ba:	d009      	beq.n	80085d0 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80085bc:	4b91      	ldr	r3, [pc, #580]	; (8008804 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	08db      	lsrs	r3, r3, #3
 80085c2:	f003 0303 	and.w	r3, r3, #3
 80085c6:	4a90      	ldr	r2, [pc, #576]	; (8008808 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80085c8:	fa22 f303 	lsr.w	r3, r2, r3
 80085cc:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 80085ce:	e111      	b.n	80087f4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80085d0:	4b8d      	ldr	r3, [pc, #564]	; (8008808 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80085d2:	61bb      	str	r3, [r7, #24]
    break;
 80085d4:	e10e      	b.n	80087f4 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 80085d6:	4b8d      	ldr	r3, [pc, #564]	; (800880c <HAL_RCC_GetSysClockFreq+0x2dc>)
 80085d8:	61bb      	str	r3, [r7, #24]
    break;
 80085da:	e10b      	b.n	80087f4 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 80085dc:	4b8c      	ldr	r3, [pc, #560]	; (8008810 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80085de:	61bb      	str	r3, [r7, #24]
    break;
 80085e0:	e108      	b.n	80087f4 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80085e2:	4b88      	ldr	r3, [pc, #544]	; (8008804 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80085e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80085e6:	f003 0303 	and.w	r3, r3, #3
 80085ea:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 80085ec:	4b85      	ldr	r3, [pc, #532]	; (8008804 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80085ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80085f0:	091b      	lsrs	r3, r3, #4
 80085f2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80085f6:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 80085f8:	4b82      	ldr	r3, [pc, #520]	; (8008804 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80085fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085fc:	f003 0301 	and.w	r3, r3, #1
 8008600:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8008602:	4b80      	ldr	r3, [pc, #512]	; (8008804 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008604:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008606:	08db      	lsrs	r3, r3, #3
 8008608:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800860c:	68fa      	ldr	r2, [r7, #12]
 800860e:	fb02 f303 	mul.w	r3, r2, r3
 8008612:	ee07 3a90 	vmov	s15, r3
 8008616:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800861a:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 800861e:	693b      	ldr	r3, [r7, #16]
 8008620:	2b00      	cmp	r3, #0
 8008622:	f000 80e1 	beq.w	80087e8 <HAL_RCC_GetSysClockFreq+0x2b8>
 8008626:	697b      	ldr	r3, [r7, #20]
 8008628:	2b02      	cmp	r3, #2
 800862a:	f000 8083 	beq.w	8008734 <HAL_RCC_GetSysClockFreq+0x204>
 800862e:	697b      	ldr	r3, [r7, #20]
 8008630:	2b02      	cmp	r3, #2
 8008632:	f200 80a1 	bhi.w	8008778 <HAL_RCC_GetSysClockFreq+0x248>
 8008636:	697b      	ldr	r3, [r7, #20]
 8008638:	2b00      	cmp	r3, #0
 800863a:	d003      	beq.n	8008644 <HAL_RCC_GetSysClockFreq+0x114>
 800863c:	697b      	ldr	r3, [r7, #20]
 800863e:	2b01      	cmp	r3, #1
 8008640:	d056      	beq.n	80086f0 <HAL_RCC_GetSysClockFreq+0x1c0>
 8008642:	e099      	b.n	8008778 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008644:	4b6f      	ldr	r3, [pc, #444]	; (8008804 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	f003 0320 	and.w	r3, r3, #32
 800864c:	2b00      	cmp	r3, #0
 800864e:	d02d      	beq.n	80086ac <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008650:	4b6c      	ldr	r3, [pc, #432]	; (8008804 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	08db      	lsrs	r3, r3, #3
 8008656:	f003 0303 	and.w	r3, r3, #3
 800865a:	4a6b      	ldr	r2, [pc, #428]	; (8008808 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800865c:	fa22 f303 	lsr.w	r3, r2, r3
 8008660:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	ee07 3a90 	vmov	s15, r3
 8008668:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800866c:	693b      	ldr	r3, [r7, #16]
 800866e:	ee07 3a90 	vmov	s15, r3
 8008672:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008676:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800867a:	4b62      	ldr	r3, [pc, #392]	; (8008804 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800867c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800867e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008682:	ee07 3a90 	vmov	s15, r3
 8008686:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800868a:	ed97 6a02 	vldr	s12, [r7, #8]
 800868e:	eddf 5a61 	vldr	s11, [pc, #388]	; 8008814 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008692:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008696:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800869a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800869e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80086a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80086a6:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 80086aa:	e087      	b.n	80087bc <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80086ac:	693b      	ldr	r3, [r7, #16]
 80086ae:	ee07 3a90 	vmov	s15, r3
 80086b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80086b6:	eddf 6a58 	vldr	s13, [pc, #352]	; 8008818 <HAL_RCC_GetSysClockFreq+0x2e8>
 80086ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80086be:	4b51      	ldr	r3, [pc, #324]	; (8008804 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80086c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80086c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80086c6:	ee07 3a90 	vmov	s15, r3
 80086ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80086ce:	ed97 6a02 	vldr	s12, [r7, #8]
 80086d2:	eddf 5a50 	vldr	s11, [pc, #320]	; 8008814 <HAL_RCC_GetSysClockFreq+0x2e4>
 80086d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80086da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80086de:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80086e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80086e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80086ea:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80086ee:	e065      	b.n	80087bc <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80086f0:	693b      	ldr	r3, [r7, #16]
 80086f2:	ee07 3a90 	vmov	s15, r3
 80086f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80086fa:	eddf 6a48 	vldr	s13, [pc, #288]	; 800881c <HAL_RCC_GetSysClockFreq+0x2ec>
 80086fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008702:	4b40      	ldr	r3, [pc, #256]	; (8008804 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008704:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008706:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800870a:	ee07 3a90 	vmov	s15, r3
 800870e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008712:	ed97 6a02 	vldr	s12, [r7, #8]
 8008716:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8008814 <HAL_RCC_GetSysClockFreq+0x2e4>
 800871a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800871e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008722:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008726:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800872a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800872e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008732:	e043      	b.n	80087bc <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008734:	693b      	ldr	r3, [r7, #16]
 8008736:	ee07 3a90 	vmov	s15, r3
 800873a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800873e:	eddf 6a38 	vldr	s13, [pc, #224]	; 8008820 <HAL_RCC_GetSysClockFreq+0x2f0>
 8008742:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008746:	4b2f      	ldr	r3, [pc, #188]	; (8008804 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800874a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800874e:	ee07 3a90 	vmov	s15, r3
 8008752:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008756:	ed97 6a02 	vldr	s12, [r7, #8]
 800875a:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8008814 <HAL_RCC_GetSysClockFreq+0x2e4>
 800875e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008762:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008766:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800876a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800876e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008772:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008776:	e021      	b.n	80087bc <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008778:	693b      	ldr	r3, [r7, #16]
 800877a:	ee07 3a90 	vmov	s15, r3
 800877e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008782:	eddf 6a26 	vldr	s13, [pc, #152]	; 800881c <HAL_RCC_GetSysClockFreq+0x2ec>
 8008786:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800878a:	4b1e      	ldr	r3, [pc, #120]	; (8008804 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800878c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800878e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008792:	ee07 3a90 	vmov	s15, r3
 8008796:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800879a:	ed97 6a02 	vldr	s12, [r7, #8]
 800879e:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8008814 <HAL_RCC_GetSysClockFreq+0x2e4>
 80087a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80087a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80087aa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80087ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80087b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80087b6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80087ba:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 80087bc:	4b11      	ldr	r3, [pc, #68]	; (8008804 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80087be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80087c0:	0a5b      	lsrs	r3, r3, #9
 80087c2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80087c6:	3301      	adds	r3, #1
 80087c8:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 80087ca:	683b      	ldr	r3, [r7, #0]
 80087cc:	ee07 3a90 	vmov	s15, r3
 80087d0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80087d4:	edd7 6a07 	vldr	s13, [r7, #28]
 80087d8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80087dc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80087e0:	ee17 3a90 	vmov	r3, s15
 80087e4:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 80087e6:	e005      	b.n	80087f4 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 80087e8:	2300      	movs	r3, #0
 80087ea:	61bb      	str	r3, [r7, #24]
    break;
 80087ec:	e002      	b.n	80087f4 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 80087ee:	4b07      	ldr	r3, [pc, #28]	; (800880c <HAL_RCC_GetSysClockFreq+0x2dc>)
 80087f0:	61bb      	str	r3, [r7, #24]
    break;
 80087f2:	bf00      	nop
  }

  return sysclockfreq;
 80087f4:	69bb      	ldr	r3, [r7, #24]
}
 80087f6:	4618      	mov	r0, r3
 80087f8:	3724      	adds	r7, #36	; 0x24
 80087fa:	46bd      	mov	sp, r7
 80087fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008800:	4770      	bx	lr
 8008802:	bf00      	nop
 8008804:	58024400 	.word	0x58024400
 8008808:	03d09000 	.word	0x03d09000
 800880c:	003d0900 	.word	0x003d0900
 8008810:	017d7840 	.word	0x017d7840
 8008814:	46000000 	.word	0x46000000
 8008818:	4c742400 	.word	0x4c742400
 800881c:	4a742400 	.word	0x4a742400
 8008820:	4bbebc20 	.word	0x4bbebc20

08008824 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008824:	b580      	push	{r7, lr}
 8008826:	b082      	sub	sp, #8
 8008828:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800882a:	f7ff fe81 	bl	8008530 <HAL_RCC_GetSysClockFreq>
 800882e:	4602      	mov	r2, r0
 8008830:	4b10      	ldr	r3, [pc, #64]	; (8008874 <HAL_RCC_GetHCLKFreq+0x50>)
 8008832:	699b      	ldr	r3, [r3, #24]
 8008834:	0a1b      	lsrs	r3, r3, #8
 8008836:	f003 030f 	and.w	r3, r3, #15
 800883a:	490f      	ldr	r1, [pc, #60]	; (8008878 <HAL_RCC_GetHCLKFreq+0x54>)
 800883c:	5ccb      	ldrb	r3, [r1, r3]
 800883e:	f003 031f 	and.w	r3, r3, #31
 8008842:	fa22 f303 	lsr.w	r3, r2, r3
 8008846:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8008848:	4b0a      	ldr	r3, [pc, #40]	; (8008874 <HAL_RCC_GetHCLKFreq+0x50>)
 800884a:	699b      	ldr	r3, [r3, #24]
 800884c:	f003 030f 	and.w	r3, r3, #15
 8008850:	4a09      	ldr	r2, [pc, #36]	; (8008878 <HAL_RCC_GetHCLKFreq+0x54>)
 8008852:	5cd3      	ldrb	r3, [r2, r3]
 8008854:	f003 031f 	and.w	r3, r3, #31
 8008858:	687a      	ldr	r2, [r7, #4]
 800885a:	fa22 f303 	lsr.w	r3, r2, r3
 800885e:	4a07      	ldr	r2, [pc, #28]	; (800887c <HAL_RCC_GetHCLKFreq+0x58>)
 8008860:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8008862:	4a07      	ldr	r2, [pc, #28]	; (8008880 <HAL_RCC_GetHCLKFreq+0x5c>)
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8008868:	4b04      	ldr	r3, [pc, #16]	; (800887c <HAL_RCC_GetHCLKFreq+0x58>)
 800886a:	681b      	ldr	r3, [r3, #0]
}
 800886c:	4618      	mov	r0, r3
 800886e:	3708      	adds	r7, #8
 8008870:	46bd      	mov	sp, r7
 8008872:	bd80      	pop	{r7, pc}
 8008874:	58024400 	.word	0x58024400
 8008878:	0801228c 	.word	0x0801228c
 800887c:	24000084 	.word	0x24000084
 8008880:	24000080 	.word	0x24000080

08008884 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008884:	b580      	push	{r7, lr}
 8008886:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8008888:	f7ff ffcc 	bl	8008824 <HAL_RCC_GetHCLKFreq>
 800888c:	4602      	mov	r2, r0
 800888e:	4b06      	ldr	r3, [pc, #24]	; (80088a8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008890:	69db      	ldr	r3, [r3, #28]
 8008892:	091b      	lsrs	r3, r3, #4
 8008894:	f003 0307 	and.w	r3, r3, #7
 8008898:	4904      	ldr	r1, [pc, #16]	; (80088ac <HAL_RCC_GetPCLK1Freq+0x28>)
 800889a:	5ccb      	ldrb	r3, [r1, r3]
 800889c:	f003 031f 	and.w	r3, r3, #31
 80088a0:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80088a4:	4618      	mov	r0, r3
 80088a6:	bd80      	pop	{r7, pc}
 80088a8:	58024400 	.word	0x58024400
 80088ac:	0801228c 	.word	0x0801228c

080088b0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80088b0:	b580      	push	{r7, lr}
 80088b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80088b4:	f7ff ffb6 	bl	8008824 <HAL_RCC_GetHCLKFreq>
 80088b8:	4602      	mov	r2, r0
 80088ba:	4b06      	ldr	r3, [pc, #24]	; (80088d4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80088bc:	69db      	ldr	r3, [r3, #28]
 80088be:	0a1b      	lsrs	r3, r3, #8
 80088c0:	f003 0307 	and.w	r3, r3, #7
 80088c4:	4904      	ldr	r1, [pc, #16]	; (80088d8 <HAL_RCC_GetPCLK2Freq+0x28>)
 80088c6:	5ccb      	ldrb	r3, [r1, r3]
 80088c8:	f003 031f 	and.w	r3, r3, #31
 80088cc:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80088d0:	4618      	mov	r0, r3
 80088d2:	bd80      	pop	{r7, pc}
 80088d4:	58024400 	.word	0x58024400
 80088d8:	0801228c 	.word	0x0801228c

080088dc <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80088dc:	b580      	push	{r7, lr}
 80088de:	b086      	sub	sp, #24
 80088e0:	af00      	add	r7, sp, #0
 80088e2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80088e4:	2300      	movs	r3, #0
 80088e6:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80088e8:	2300      	movs	r3, #0
 80088ea:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80088f4:	2b00      	cmp	r3, #0
 80088f6:	d03f      	beq.n	8008978 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80088fc:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008900:	d02a      	beq.n	8008958 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8008902:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008906:	d824      	bhi.n	8008952 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8008908:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800890c:	d018      	beq.n	8008940 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800890e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008912:	d81e      	bhi.n	8008952 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8008914:	2b00      	cmp	r3, #0
 8008916:	d003      	beq.n	8008920 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8008918:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800891c:	d007      	beq.n	800892e <HAL_RCCEx_PeriphCLKConfig+0x52>
 800891e:	e018      	b.n	8008952 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008920:	4ba3      	ldr	r3, [pc, #652]	; (8008bb0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8008922:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008924:	4aa2      	ldr	r2, [pc, #648]	; (8008bb0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8008926:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800892a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800892c:	e015      	b.n	800895a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	3304      	adds	r3, #4
 8008932:	2102      	movs	r1, #2
 8008934:	4618      	mov	r0, r3
 8008936:	f001 f9d5 	bl	8009ce4 <RCCEx_PLL2_Config>
 800893a:	4603      	mov	r3, r0
 800893c:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800893e:	e00c      	b.n	800895a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	3324      	adds	r3, #36	; 0x24
 8008944:	2102      	movs	r1, #2
 8008946:	4618      	mov	r0, r3
 8008948:	f001 fa7e 	bl	8009e48 <RCCEx_PLL3_Config>
 800894c:	4603      	mov	r3, r0
 800894e:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8008950:	e003      	b.n	800895a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008952:	2301      	movs	r3, #1
 8008954:	75fb      	strb	r3, [r7, #23]
      break;
 8008956:	e000      	b.n	800895a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8008958:	bf00      	nop
    }

    if(ret == HAL_OK)
 800895a:	7dfb      	ldrb	r3, [r7, #23]
 800895c:	2b00      	cmp	r3, #0
 800895e:	d109      	bne.n	8008974 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8008960:	4b93      	ldr	r3, [pc, #588]	; (8008bb0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8008962:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008964:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800896c:	4990      	ldr	r1, [pc, #576]	; (8008bb0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800896e:	4313      	orrs	r3, r2
 8008970:	650b      	str	r3, [r1, #80]	; 0x50
 8008972:	e001      	b.n	8008978 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008974:	7dfb      	ldrb	r3, [r7, #23]
 8008976:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	681b      	ldr	r3, [r3, #0]
 800897c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008980:	2b00      	cmp	r3, #0
 8008982:	d03d      	beq.n	8008a00 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008988:	2b04      	cmp	r3, #4
 800898a:	d826      	bhi.n	80089da <HAL_RCCEx_PeriphCLKConfig+0xfe>
 800898c:	a201      	add	r2, pc, #4	; (adr r2, 8008994 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 800898e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008992:	bf00      	nop
 8008994:	080089a9 	.word	0x080089a9
 8008998:	080089b7 	.word	0x080089b7
 800899c:	080089c9 	.word	0x080089c9
 80089a0:	080089e1 	.word	0x080089e1
 80089a4:	080089e1 	.word	0x080089e1
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80089a8:	4b81      	ldr	r3, [pc, #516]	; (8008bb0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80089aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089ac:	4a80      	ldr	r2, [pc, #512]	; (8008bb0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80089ae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80089b2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80089b4:	e015      	b.n	80089e2 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	3304      	adds	r3, #4
 80089ba:	2100      	movs	r1, #0
 80089bc:	4618      	mov	r0, r3
 80089be:	f001 f991 	bl	8009ce4 <RCCEx_PLL2_Config>
 80089c2:	4603      	mov	r3, r0
 80089c4:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80089c6:	e00c      	b.n	80089e2 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	3324      	adds	r3, #36	; 0x24
 80089cc:	2100      	movs	r1, #0
 80089ce:	4618      	mov	r0, r3
 80089d0:	f001 fa3a 	bl	8009e48 <RCCEx_PLL3_Config>
 80089d4:	4603      	mov	r3, r0
 80089d6:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80089d8:	e003      	b.n	80089e2 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80089da:	2301      	movs	r3, #1
 80089dc:	75fb      	strb	r3, [r7, #23]
      break;
 80089de:	e000      	b.n	80089e2 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 80089e0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80089e2:	7dfb      	ldrb	r3, [r7, #23]
 80089e4:	2b00      	cmp	r3, #0
 80089e6:	d109      	bne.n	80089fc <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80089e8:	4b71      	ldr	r3, [pc, #452]	; (8008bb0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80089ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80089ec:	f023 0207 	bic.w	r2, r3, #7
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80089f4:	496e      	ldr	r1, [pc, #440]	; (8008bb0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80089f6:	4313      	orrs	r3, r2
 80089f8:	650b      	str	r3, [r1, #80]	; 0x50
 80089fa:	e001      	b.n	8008a00 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80089fc:	7dfb      	ldrb	r3, [r7, #23]
 80089fe:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008a08:	2b00      	cmp	r3, #0
 8008a0a:	d042      	beq.n	8008a92 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008a10:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008a14:	d02b      	beq.n	8008a6e <HAL_RCCEx_PeriphCLKConfig+0x192>
 8008a16:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008a1a:	d825      	bhi.n	8008a68 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8008a1c:	2bc0      	cmp	r3, #192	; 0xc0
 8008a1e:	d028      	beq.n	8008a72 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8008a20:	2bc0      	cmp	r3, #192	; 0xc0
 8008a22:	d821      	bhi.n	8008a68 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8008a24:	2b80      	cmp	r3, #128	; 0x80
 8008a26:	d016      	beq.n	8008a56 <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8008a28:	2b80      	cmp	r3, #128	; 0x80
 8008a2a:	d81d      	bhi.n	8008a68 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8008a2c:	2b00      	cmp	r3, #0
 8008a2e:	d002      	beq.n	8008a36 <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8008a30:	2b40      	cmp	r3, #64	; 0x40
 8008a32:	d007      	beq.n	8008a44 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8008a34:	e018      	b.n	8008a68 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008a36:	4b5e      	ldr	r3, [pc, #376]	; (8008bb0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8008a38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a3a:	4a5d      	ldr	r2, [pc, #372]	; (8008bb0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8008a3c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008a40:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8008a42:	e017      	b.n	8008a74 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	3304      	adds	r3, #4
 8008a48:	2100      	movs	r1, #0
 8008a4a:	4618      	mov	r0, r3
 8008a4c:	f001 f94a 	bl	8009ce4 <RCCEx_PLL2_Config>
 8008a50:	4603      	mov	r3, r0
 8008a52:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8008a54:	e00e      	b.n	8008a74 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	3324      	adds	r3, #36	; 0x24
 8008a5a:	2100      	movs	r1, #0
 8008a5c:	4618      	mov	r0, r3
 8008a5e:	f001 f9f3 	bl	8009e48 <RCCEx_PLL3_Config>
 8008a62:	4603      	mov	r3, r0
 8008a64:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8008a66:	e005      	b.n	8008a74 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008a68:	2301      	movs	r3, #1
 8008a6a:	75fb      	strb	r3, [r7, #23]
      break;
 8008a6c:	e002      	b.n	8008a74 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8008a6e:	bf00      	nop
 8008a70:	e000      	b.n	8008a74 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8008a72:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008a74:	7dfb      	ldrb	r3, [r7, #23]
 8008a76:	2b00      	cmp	r3, #0
 8008a78:	d109      	bne.n	8008a8e <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8008a7a:	4b4d      	ldr	r3, [pc, #308]	; (8008bb0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8008a7c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008a7e:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008a86:	494a      	ldr	r1, [pc, #296]	; (8008bb0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8008a88:	4313      	orrs	r3, r2
 8008a8a:	650b      	str	r3, [r1, #80]	; 0x50
 8008a8c:	e001      	b.n	8008a92 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008a8e:	7dfb      	ldrb	r3, [r7, #23]
 8008a90:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	681b      	ldr	r3, [r3, #0]
 8008a96:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008a9a:	2b00      	cmp	r3, #0
 8008a9c:	d049      	beq.n	8008b32 <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8008aa4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008aa8:	d030      	beq.n	8008b0c <HAL_RCCEx_PeriphCLKConfig+0x230>
 8008aaa:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008aae:	d82a      	bhi.n	8008b06 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8008ab0:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8008ab4:	d02c      	beq.n	8008b10 <HAL_RCCEx_PeriphCLKConfig+0x234>
 8008ab6:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8008aba:	d824      	bhi.n	8008b06 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8008abc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008ac0:	d018      	beq.n	8008af4 <HAL_RCCEx_PeriphCLKConfig+0x218>
 8008ac2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008ac6:	d81e      	bhi.n	8008b06 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8008ac8:	2b00      	cmp	r3, #0
 8008aca:	d003      	beq.n	8008ad4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8008acc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008ad0:	d007      	beq.n	8008ae2 <HAL_RCCEx_PeriphCLKConfig+0x206>
 8008ad2:	e018      	b.n	8008b06 <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008ad4:	4b36      	ldr	r3, [pc, #216]	; (8008bb0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8008ad6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ad8:	4a35      	ldr	r2, [pc, #212]	; (8008bb0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8008ada:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008ade:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8008ae0:	e017      	b.n	8008b12 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	3304      	adds	r3, #4
 8008ae6:	2100      	movs	r1, #0
 8008ae8:	4618      	mov	r0, r3
 8008aea:	f001 f8fb 	bl	8009ce4 <RCCEx_PLL2_Config>
 8008aee:	4603      	mov	r3, r0
 8008af0:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8008af2:	e00e      	b.n	8008b12 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	3324      	adds	r3, #36	; 0x24
 8008af8:	2100      	movs	r1, #0
 8008afa:	4618      	mov	r0, r3
 8008afc:	f001 f9a4 	bl	8009e48 <RCCEx_PLL3_Config>
 8008b00:	4603      	mov	r3, r0
 8008b02:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8008b04:	e005      	b.n	8008b12 <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8008b06:	2301      	movs	r3, #1
 8008b08:	75fb      	strb	r3, [r7, #23]
      break;
 8008b0a:	e002      	b.n	8008b12 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8008b0c:	bf00      	nop
 8008b0e:	e000      	b.n	8008b12 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8008b10:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008b12:	7dfb      	ldrb	r3, [r7, #23]
 8008b14:	2b00      	cmp	r3, #0
 8008b16:	d10a      	bne.n	8008b2e <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8008b18:	4b25      	ldr	r3, [pc, #148]	; (8008bb0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8008b1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008b1c:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8008b26:	4922      	ldr	r1, [pc, #136]	; (8008bb0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8008b28:	4313      	orrs	r3, r2
 8008b2a:	658b      	str	r3, [r1, #88]	; 0x58
 8008b2c:	e001      	b.n	8008b32 <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008b2e:	7dfb      	ldrb	r3, [r7, #23]
 8008b30:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	681b      	ldr	r3, [r3, #0]
 8008b36:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008b3a:	2b00      	cmp	r3, #0
 8008b3c:	d04b      	beq.n	8008bd6 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8008b44:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008b48:	d030      	beq.n	8008bac <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8008b4a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008b4e:	d82a      	bhi.n	8008ba6 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8008b50:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8008b54:	d02e      	beq.n	8008bb4 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 8008b56:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8008b5a:	d824      	bhi.n	8008ba6 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8008b5c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008b60:	d018      	beq.n	8008b94 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8008b62:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008b66:	d81e      	bhi.n	8008ba6 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8008b68:	2b00      	cmp	r3, #0
 8008b6a:	d003      	beq.n	8008b74 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8008b6c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008b70:	d007      	beq.n	8008b82 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8008b72:	e018      	b.n	8008ba6 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008b74:	4b0e      	ldr	r3, [pc, #56]	; (8008bb0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8008b76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b78:	4a0d      	ldr	r2, [pc, #52]	; (8008bb0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8008b7a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008b7e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8008b80:	e019      	b.n	8008bb6 <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	3304      	adds	r3, #4
 8008b86:	2100      	movs	r1, #0
 8008b88:	4618      	mov	r0, r3
 8008b8a:	f001 f8ab 	bl	8009ce4 <RCCEx_PLL2_Config>
 8008b8e:	4603      	mov	r3, r0
 8008b90:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8008b92:	e010      	b.n	8008bb6 <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	3324      	adds	r3, #36	; 0x24
 8008b98:	2100      	movs	r1, #0
 8008b9a:	4618      	mov	r0, r3
 8008b9c:	f001 f954 	bl	8009e48 <RCCEx_PLL3_Config>
 8008ba0:	4603      	mov	r3, r0
 8008ba2:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8008ba4:	e007      	b.n	8008bb6 <HAL_RCCEx_PeriphCLKConfig+0x2da>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8008ba6:	2301      	movs	r3, #1
 8008ba8:	75fb      	strb	r3, [r7, #23]
      break;
 8008baa:	e004      	b.n	8008bb6 <HAL_RCCEx_PeriphCLKConfig+0x2da>
      break;
 8008bac:	bf00      	nop
 8008bae:	e002      	b.n	8008bb6 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8008bb0:	58024400 	.word	0x58024400
      break;
 8008bb4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008bb6:	7dfb      	ldrb	r3, [r7, #23]
 8008bb8:	2b00      	cmp	r3, #0
 8008bba:	d10a      	bne.n	8008bd2 <HAL_RCCEx_PeriphCLKConfig+0x2f6>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8008bbc:	4b99      	ldr	r3, [pc, #612]	; (8008e24 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8008bbe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008bc0:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8008bca:	4996      	ldr	r1, [pc, #600]	; (8008e24 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8008bcc:	4313      	orrs	r3, r2
 8008bce:	658b      	str	r3, [r1, #88]	; 0x58
 8008bd0:	e001      	b.n	8008bd6 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008bd2:	7dfb      	ldrb	r3, [r7, #23]
 8008bd4:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	681b      	ldr	r3, [r3, #0]
 8008bda:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008bde:	2b00      	cmp	r3, #0
 8008be0:	d032      	beq.n	8008c48 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008be6:	2b30      	cmp	r3, #48	; 0x30
 8008be8:	d01c      	beq.n	8008c24 <HAL_RCCEx_PeriphCLKConfig+0x348>
 8008bea:	2b30      	cmp	r3, #48	; 0x30
 8008bec:	d817      	bhi.n	8008c1e <HAL_RCCEx_PeriphCLKConfig+0x342>
 8008bee:	2b20      	cmp	r3, #32
 8008bf0:	d00c      	beq.n	8008c0c <HAL_RCCEx_PeriphCLKConfig+0x330>
 8008bf2:	2b20      	cmp	r3, #32
 8008bf4:	d813      	bhi.n	8008c1e <HAL_RCCEx_PeriphCLKConfig+0x342>
 8008bf6:	2b00      	cmp	r3, #0
 8008bf8:	d016      	beq.n	8008c28 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 8008bfa:	2b10      	cmp	r3, #16
 8008bfc:	d10f      	bne.n	8008c1e <HAL_RCCEx_PeriphCLKConfig+0x342>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008bfe:	4b89      	ldr	r3, [pc, #548]	; (8008e24 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8008c00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c02:	4a88      	ldr	r2, [pc, #544]	; (8008e24 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8008c04:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008c08:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8008c0a:	e00e      	b.n	8008c2a <HAL_RCCEx_PeriphCLKConfig+0x34e>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	3304      	adds	r3, #4
 8008c10:	2102      	movs	r1, #2
 8008c12:	4618      	mov	r0, r3
 8008c14:	f001 f866 	bl	8009ce4 <RCCEx_PLL2_Config>
 8008c18:	4603      	mov	r3, r0
 8008c1a:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8008c1c:	e005      	b.n	8008c2a <HAL_RCCEx_PeriphCLKConfig+0x34e>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8008c1e:	2301      	movs	r3, #1
 8008c20:	75fb      	strb	r3, [r7, #23]
      break;
 8008c22:	e002      	b.n	8008c2a <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8008c24:	bf00      	nop
 8008c26:	e000      	b.n	8008c2a <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8008c28:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008c2a:	7dfb      	ldrb	r3, [r7, #23]
 8008c2c:	2b00      	cmp	r3, #0
 8008c2e:	d109      	bne.n	8008c44 <HAL_RCCEx_PeriphCLKConfig+0x368>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8008c30:	4b7c      	ldr	r3, [pc, #496]	; (8008e24 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8008c32:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008c34:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008c3c:	4979      	ldr	r1, [pc, #484]	; (8008e24 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8008c3e:	4313      	orrs	r3, r2
 8008c40:	64cb      	str	r3, [r1, #76]	; 0x4c
 8008c42:	e001      	b.n	8008c48 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008c44:	7dfb      	ldrb	r3, [r7, #23]
 8008c46:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	681b      	ldr	r3, [r3, #0]
 8008c4c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008c50:	2b00      	cmp	r3, #0
 8008c52:	d047      	beq.n	8008ce4 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008c58:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008c5c:	d030      	beq.n	8008cc0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8008c5e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008c62:	d82a      	bhi.n	8008cba <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8008c64:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008c68:	d02c      	beq.n	8008cc4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8008c6a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008c6e:	d824      	bhi.n	8008cba <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8008c70:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008c74:	d018      	beq.n	8008ca8 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 8008c76:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008c7a:	d81e      	bhi.n	8008cba <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8008c7c:	2b00      	cmp	r3, #0
 8008c7e:	d003      	beq.n	8008c88 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 8008c80:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008c84:	d007      	beq.n	8008c96 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 8008c86:	e018      	b.n	8008cba <HAL_RCCEx_PeriphCLKConfig+0x3de>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008c88:	4b66      	ldr	r3, [pc, #408]	; (8008e24 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8008c8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c8c:	4a65      	ldr	r2, [pc, #404]	; (8008e24 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8008c8e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008c92:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8008c94:	e017      	b.n	8008cc6 <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	3304      	adds	r3, #4
 8008c9a:	2100      	movs	r1, #0
 8008c9c:	4618      	mov	r0, r3
 8008c9e:	f001 f821 	bl	8009ce4 <RCCEx_PLL2_Config>
 8008ca2:	4603      	mov	r3, r0
 8008ca4:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8008ca6:	e00e      	b.n	8008cc6 <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	3324      	adds	r3, #36	; 0x24
 8008cac:	2100      	movs	r1, #0
 8008cae:	4618      	mov	r0, r3
 8008cb0:	f001 f8ca 	bl	8009e48 <RCCEx_PLL3_Config>
 8008cb4:	4603      	mov	r3, r0
 8008cb6:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8008cb8:	e005      	b.n	8008cc6 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008cba:	2301      	movs	r3, #1
 8008cbc:	75fb      	strb	r3, [r7, #23]
      break;
 8008cbe:	e002      	b.n	8008cc6 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8008cc0:	bf00      	nop
 8008cc2:	e000      	b.n	8008cc6 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8008cc4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008cc6:	7dfb      	ldrb	r3, [r7, #23]
 8008cc8:	2b00      	cmp	r3, #0
 8008cca:	d109      	bne.n	8008ce0 <HAL_RCCEx_PeriphCLKConfig+0x404>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8008ccc:	4b55      	ldr	r3, [pc, #340]	; (8008e24 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8008cce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008cd0:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008cd8:	4952      	ldr	r1, [pc, #328]	; (8008e24 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8008cda:	4313      	orrs	r3, r2
 8008cdc:	650b      	str	r3, [r1, #80]	; 0x50
 8008cde:	e001      	b.n	8008ce4 <HAL_RCCEx_PeriphCLKConfig+0x408>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008ce0:	7dfb      	ldrb	r3, [r7, #23]
 8008ce2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	681b      	ldr	r3, [r3, #0]
 8008ce8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008cec:	2b00      	cmp	r3, #0
 8008cee:	d049      	beq.n	8008d84 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008cf4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008cf8:	d02e      	beq.n	8008d58 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8008cfa:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008cfe:	d828      	bhi.n	8008d52 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8008d00:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008d04:	d02a      	beq.n	8008d5c <HAL_RCCEx_PeriphCLKConfig+0x480>
 8008d06:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008d0a:	d822      	bhi.n	8008d52 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8008d0c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8008d10:	d026      	beq.n	8008d60 <HAL_RCCEx_PeriphCLKConfig+0x484>
 8008d12:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8008d16:	d81c      	bhi.n	8008d52 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8008d18:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008d1c:	d010      	beq.n	8008d40 <HAL_RCCEx_PeriphCLKConfig+0x464>
 8008d1e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008d22:	d816      	bhi.n	8008d52 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8008d24:	2b00      	cmp	r3, #0
 8008d26:	d01d      	beq.n	8008d64 <HAL_RCCEx_PeriphCLKConfig+0x488>
 8008d28:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008d2c:	d111      	bne.n	8008d52 <HAL_RCCEx_PeriphCLKConfig+0x476>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	3304      	adds	r3, #4
 8008d32:	2101      	movs	r1, #1
 8008d34:	4618      	mov	r0, r3
 8008d36:	f000 ffd5 	bl	8009ce4 <RCCEx_PLL2_Config>
 8008d3a:	4603      	mov	r3, r0
 8008d3c:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8008d3e:	e012      	b.n	8008d66 <HAL_RCCEx_PeriphCLKConfig+0x48a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	3324      	adds	r3, #36	; 0x24
 8008d44:	2101      	movs	r1, #1
 8008d46:	4618      	mov	r0, r3
 8008d48:	f001 f87e 	bl	8009e48 <RCCEx_PLL3_Config>
 8008d4c:	4603      	mov	r3, r0
 8008d4e:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8008d50:	e009      	b.n	8008d66 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008d52:	2301      	movs	r3, #1
 8008d54:	75fb      	strb	r3, [r7, #23]
      break;
 8008d56:	e006      	b.n	8008d66 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8008d58:	bf00      	nop
 8008d5a:	e004      	b.n	8008d66 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8008d5c:	bf00      	nop
 8008d5e:	e002      	b.n	8008d66 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8008d60:	bf00      	nop
 8008d62:	e000      	b.n	8008d66 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8008d64:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008d66:	7dfb      	ldrb	r3, [r7, #23]
 8008d68:	2b00      	cmp	r3, #0
 8008d6a:	d109      	bne.n	8008d80 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8008d6c:	4b2d      	ldr	r3, [pc, #180]	; (8008e24 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8008d6e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008d70:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008d78:	492a      	ldr	r1, [pc, #168]	; (8008e24 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8008d7a:	4313      	orrs	r3, r2
 8008d7c:	650b      	str	r3, [r1, #80]	; 0x50
 8008d7e:	e001      	b.n	8008d84 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008d80:	7dfb      	ldrb	r3, [r7, #23]
 8008d82:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	681b      	ldr	r3, [r3, #0]
 8008d88:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008d8c:	2b00      	cmp	r3, #0
 8008d8e:	d04d      	beq.n	8008e2c <HAL_RCCEx_PeriphCLKConfig+0x550>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8008d96:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008d9a:	d02e      	beq.n	8008dfa <HAL_RCCEx_PeriphCLKConfig+0x51e>
 8008d9c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008da0:	d828      	bhi.n	8008df4 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8008da2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008da6:	d02a      	beq.n	8008dfe <HAL_RCCEx_PeriphCLKConfig+0x522>
 8008da8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008dac:	d822      	bhi.n	8008df4 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8008dae:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008db2:	d026      	beq.n	8008e02 <HAL_RCCEx_PeriphCLKConfig+0x526>
 8008db4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008db8:	d81c      	bhi.n	8008df4 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8008dba:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008dbe:	d010      	beq.n	8008de2 <HAL_RCCEx_PeriphCLKConfig+0x506>
 8008dc0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008dc4:	d816      	bhi.n	8008df4 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8008dc6:	2b00      	cmp	r3, #0
 8008dc8:	d01d      	beq.n	8008e06 <HAL_RCCEx_PeriphCLKConfig+0x52a>
 8008dca:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008dce:	d111      	bne.n	8008df4 <HAL_RCCEx_PeriphCLKConfig+0x518>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	3304      	adds	r3, #4
 8008dd4:	2101      	movs	r1, #1
 8008dd6:	4618      	mov	r0, r3
 8008dd8:	f000 ff84 	bl	8009ce4 <RCCEx_PLL2_Config>
 8008ddc:	4603      	mov	r3, r0
 8008dde:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8008de0:	e012      	b.n	8008e08 <HAL_RCCEx_PeriphCLKConfig+0x52c>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	3324      	adds	r3, #36	; 0x24
 8008de6:	2101      	movs	r1, #1
 8008de8:	4618      	mov	r0, r3
 8008dea:	f001 f82d 	bl	8009e48 <RCCEx_PLL3_Config>
 8008dee:	4603      	mov	r3, r0
 8008df0:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8008df2:	e009      	b.n	8008e08 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8008df4:	2301      	movs	r3, #1
 8008df6:	75fb      	strb	r3, [r7, #23]
      break;
 8008df8:	e006      	b.n	8008e08 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8008dfa:	bf00      	nop
 8008dfc:	e004      	b.n	8008e08 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8008dfe:	bf00      	nop
 8008e00:	e002      	b.n	8008e08 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8008e02:	bf00      	nop
 8008e04:	e000      	b.n	8008e08 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8008e06:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008e08:	7dfb      	ldrb	r3, [r7, #23]
 8008e0a:	2b00      	cmp	r3, #0
 8008e0c:	d10c      	bne.n	8008e28 <HAL_RCCEx_PeriphCLKConfig+0x54c>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8008e0e:	4b05      	ldr	r3, [pc, #20]	; (8008e24 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8008e10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008e12:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8008e1c:	4901      	ldr	r1, [pc, #4]	; (8008e24 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8008e1e:	4313      	orrs	r3, r2
 8008e20:	658b      	str	r3, [r1, #88]	; 0x58
 8008e22:	e003      	b.n	8008e2c <HAL_RCCEx_PeriphCLKConfig+0x550>
 8008e24:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008e28:	7dfb      	ldrb	r3, [r7, #23]
 8008e2a:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	681b      	ldr	r3, [r3, #0]
 8008e30:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008e34:	2b00      	cmp	r3, #0
 8008e36:	d02f      	beq.n	8008e98 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008e3c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008e40:	d00e      	beq.n	8008e60 <HAL_RCCEx_PeriphCLKConfig+0x584>
 8008e42:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008e46:	d814      	bhi.n	8008e72 <HAL_RCCEx_PeriphCLKConfig+0x596>
 8008e48:	2b00      	cmp	r3, #0
 8008e4a:	d015      	beq.n	8008e78 <HAL_RCCEx_PeriphCLKConfig+0x59c>
 8008e4c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008e50:	d10f      	bne.n	8008e72 <HAL_RCCEx_PeriphCLKConfig+0x596>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008e52:	4baf      	ldr	r3, [pc, #700]	; (8009110 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8008e54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e56:	4aae      	ldr	r2, [pc, #696]	; (8009110 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8008e58:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008e5c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8008e5e:	e00c      	b.n	8008e7a <HAL_RCCEx_PeriphCLKConfig+0x59e>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	3304      	adds	r3, #4
 8008e64:	2101      	movs	r1, #1
 8008e66:	4618      	mov	r0, r3
 8008e68:	f000 ff3c 	bl	8009ce4 <RCCEx_PLL2_Config>
 8008e6c:	4603      	mov	r3, r0
 8008e6e:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8008e70:	e003      	b.n	8008e7a <HAL_RCCEx_PeriphCLKConfig+0x59e>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008e72:	2301      	movs	r3, #1
 8008e74:	75fb      	strb	r3, [r7, #23]
      break;
 8008e76:	e000      	b.n	8008e7a <HAL_RCCEx_PeriphCLKConfig+0x59e>
      break;
 8008e78:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008e7a:	7dfb      	ldrb	r3, [r7, #23]
 8008e7c:	2b00      	cmp	r3, #0
 8008e7e:	d109      	bne.n	8008e94 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8008e80:	4ba3      	ldr	r3, [pc, #652]	; (8009110 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8008e82:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008e84:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008e8c:	49a0      	ldr	r1, [pc, #640]	; (8009110 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8008e8e:	4313      	orrs	r3, r2
 8008e90:	650b      	str	r3, [r1, #80]	; 0x50
 8008e92:	e001      	b.n	8008e98 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008e94:	7dfb      	ldrb	r3, [r7, #23]
 8008e96:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	681b      	ldr	r3, [r3, #0]
 8008e9c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008ea0:	2b00      	cmp	r3, #0
 8008ea2:	d032      	beq.n	8008f0a <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008ea8:	2b03      	cmp	r3, #3
 8008eaa:	d81b      	bhi.n	8008ee4 <HAL_RCCEx_PeriphCLKConfig+0x608>
 8008eac:	a201      	add	r2, pc, #4	; (adr r2, 8008eb4 <HAL_RCCEx_PeriphCLKConfig+0x5d8>)
 8008eae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008eb2:	bf00      	nop
 8008eb4:	08008eeb 	.word	0x08008eeb
 8008eb8:	08008ec5 	.word	0x08008ec5
 8008ebc:	08008ed3 	.word	0x08008ed3
 8008ec0:	08008eeb 	.word	0x08008eeb
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008ec4:	4b92      	ldr	r3, [pc, #584]	; (8009110 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8008ec6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ec8:	4a91      	ldr	r2, [pc, #580]	; (8009110 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8008eca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008ece:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8008ed0:	e00c      	b.n	8008eec <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	3304      	adds	r3, #4
 8008ed6:	2102      	movs	r1, #2
 8008ed8:	4618      	mov	r0, r3
 8008eda:	f000 ff03 	bl	8009ce4 <RCCEx_PLL2_Config>
 8008ede:	4603      	mov	r3, r0
 8008ee0:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8008ee2:	e003      	b.n	8008eec <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8008ee4:	2301      	movs	r3, #1
 8008ee6:	75fb      	strb	r3, [r7, #23]
      break;
 8008ee8:	e000      	b.n	8008eec <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 8008eea:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008eec:	7dfb      	ldrb	r3, [r7, #23]
 8008eee:	2b00      	cmp	r3, #0
 8008ef0:	d109      	bne.n	8008f06 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8008ef2:	4b87      	ldr	r3, [pc, #540]	; (8009110 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8008ef4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008ef6:	f023 0203 	bic.w	r2, r3, #3
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008efe:	4984      	ldr	r1, [pc, #528]	; (8009110 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8008f00:	4313      	orrs	r3, r2
 8008f02:	64cb      	str	r3, [r1, #76]	; 0x4c
 8008f04:	e001      	b.n	8008f0a <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008f06:	7dfb      	ldrb	r3, [r7, #23]
 8008f08:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	681b      	ldr	r3, [r3, #0]
 8008f0e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008f12:	2b00      	cmp	r3, #0
 8008f14:	f000 8086 	beq.w	8009024 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008f18:	4b7e      	ldr	r3, [pc, #504]	; (8009114 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8008f1a:	681b      	ldr	r3, [r3, #0]
 8008f1c:	4a7d      	ldr	r2, [pc, #500]	; (8009114 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8008f1e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008f22:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8008f24:	f7fd fc08 	bl	8006738 <HAL_GetTick>
 8008f28:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008f2a:	e009      	b.n	8008f40 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008f2c:	f7fd fc04 	bl	8006738 <HAL_GetTick>
 8008f30:	4602      	mov	r2, r0
 8008f32:	693b      	ldr	r3, [r7, #16]
 8008f34:	1ad3      	subs	r3, r2, r3
 8008f36:	2b64      	cmp	r3, #100	; 0x64
 8008f38:	d902      	bls.n	8008f40 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 8008f3a:	2303      	movs	r3, #3
 8008f3c:	75fb      	strb	r3, [r7, #23]
        break;
 8008f3e:	e005      	b.n	8008f4c <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008f40:	4b74      	ldr	r3, [pc, #464]	; (8009114 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8008f42:	681b      	ldr	r3, [r3, #0]
 8008f44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008f48:	2b00      	cmp	r3, #0
 8008f4a:	d0ef      	beq.n	8008f2c <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8008f4c:	7dfb      	ldrb	r3, [r7, #23]
 8008f4e:	2b00      	cmp	r3, #0
 8008f50:	d166      	bne.n	8009020 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8008f52:	4b6f      	ldr	r3, [pc, #444]	; (8009110 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8008f54:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008f5c:	4053      	eors	r3, r2
 8008f5e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008f62:	2b00      	cmp	r3, #0
 8008f64:	d013      	beq.n	8008f8e <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8008f66:	4b6a      	ldr	r3, [pc, #424]	; (8009110 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8008f68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008f6a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008f6e:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8008f70:	4b67      	ldr	r3, [pc, #412]	; (8009110 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8008f72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008f74:	4a66      	ldr	r2, [pc, #408]	; (8009110 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8008f76:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008f7a:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8008f7c:	4b64      	ldr	r3, [pc, #400]	; (8009110 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8008f7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008f80:	4a63      	ldr	r2, [pc, #396]	; (8009110 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8008f82:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008f86:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8008f88:	4a61      	ldr	r2, [pc, #388]	; (8009110 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8008f8a:	68fb      	ldr	r3, [r7, #12]
 8008f8c:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008f94:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008f98:	d115      	bne.n	8008fc6 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008f9a:	f7fd fbcd 	bl	8006738 <HAL_GetTick>
 8008f9e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008fa0:	e00b      	b.n	8008fba <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008fa2:	f7fd fbc9 	bl	8006738 <HAL_GetTick>
 8008fa6:	4602      	mov	r2, r0
 8008fa8:	693b      	ldr	r3, [r7, #16]
 8008faa:	1ad3      	subs	r3, r2, r3
 8008fac:	f241 3288 	movw	r2, #5000	; 0x1388
 8008fb0:	4293      	cmp	r3, r2
 8008fb2:	d902      	bls.n	8008fba <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8008fb4:	2303      	movs	r3, #3
 8008fb6:	75fb      	strb	r3, [r7, #23]
            break;
 8008fb8:	e005      	b.n	8008fc6 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008fba:	4b55      	ldr	r3, [pc, #340]	; (8009110 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8008fbc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008fbe:	f003 0302 	and.w	r3, r3, #2
 8008fc2:	2b00      	cmp	r3, #0
 8008fc4:	d0ed      	beq.n	8008fa2 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 8008fc6:	7dfb      	ldrb	r3, [r7, #23]
 8008fc8:	2b00      	cmp	r3, #0
 8008fca:	d126      	bne.n	800901a <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008fd2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008fd6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008fda:	d10d      	bne.n	8008ff8 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 8008fdc:	4b4c      	ldr	r3, [pc, #304]	; (8009110 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8008fde:	691b      	ldr	r3, [r3, #16]
 8008fe0:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008fea:	0919      	lsrs	r1, r3, #4
 8008fec:	4b4a      	ldr	r3, [pc, #296]	; (8009118 <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 8008fee:	400b      	ands	r3, r1
 8008ff0:	4947      	ldr	r1, [pc, #284]	; (8009110 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8008ff2:	4313      	orrs	r3, r2
 8008ff4:	610b      	str	r3, [r1, #16]
 8008ff6:	e005      	b.n	8009004 <HAL_RCCEx_PeriphCLKConfig+0x728>
 8008ff8:	4b45      	ldr	r3, [pc, #276]	; (8009110 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8008ffa:	691b      	ldr	r3, [r3, #16]
 8008ffc:	4a44      	ldr	r2, [pc, #272]	; (8009110 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8008ffe:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8009002:	6113      	str	r3, [r2, #16]
 8009004:	4b42      	ldr	r3, [pc, #264]	; (8009110 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8009006:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800900e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009012:	493f      	ldr	r1, [pc, #252]	; (8009110 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8009014:	4313      	orrs	r3, r2
 8009016:	670b      	str	r3, [r1, #112]	; 0x70
 8009018:	e004      	b.n	8009024 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800901a:	7dfb      	ldrb	r3, [r7, #23]
 800901c:	75bb      	strb	r3, [r7, #22]
 800901e:	e001      	b.n	8009024 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009020:	7dfb      	ldrb	r3, [r7, #23]
 8009022:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	681b      	ldr	r3, [r3, #0]
 8009028:	f003 0301 	and.w	r3, r3, #1
 800902c:	2b00      	cmp	r3, #0
 800902e:	f000 8085 	beq.w	800913c <HAL_RCCEx_PeriphCLKConfig+0x860>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009036:	2b28      	cmp	r3, #40	; 0x28
 8009038:	d866      	bhi.n	8009108 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 800903a:	a201      	add	r2, pc, #4	; (adr r2, 8009040 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 800903c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009040:	0800911d 	.word	0x0800911d
 8009044:	08009109 	.word	0x08009109
 8009048:	08009109 	.word	0x08009109
 800904c:	08009109 	.word	0x08009109
 8009050:	08009109 	.word	0x08009109
 8009054:	08009109 	.word	0x08009109
 8009058:	08009109 	.word	0x08009109
 800905c:	08009109 	.word	0x08009109
 8009060:	080090e5 	.word	0x080090e5
 8009064:	08009109 	.word	0x08009109
 8009068:	08009109 	.word	0x08009109
 800906c:	08009109 	.word	0x08009109
 8009070:	08009109 	.word	0x08009109
 8009074:	08009109 	.word	0x08009109
 8009078:	08009109 	.word	0x08009109
 800907c:	08009109 	.word	0x08009109
 8009080:	080090f7 	.word	0x080090f7
 8009084:	08009109 	.word	0x08009109
 8009088:	08009109 	.word	0x08009109
 800908c:	08009109 	.word	0x08009109
 8009090:	08009109 	.word	0x08009109
 8009094:	08009109 	.word	0x08009109
 8009098:	08009109 	.word	0x08009109
 800909c:	08009109 	.word	0x08009109
 80090a0:	0800911d 	.word	0x0800911d
 80090a4:	08009109 	.word	0x08009109
 80090a8:	08009109 	.word	0x08009109
 80090ac:	08009109 	.word	0x08009109
 80090b0:	08009109 	.word	0x08009109
 80090b4:	08009109 	.word	0x08009109
 80090b8:	08009109 	.word	0x08009109
 80090bc:	08009109 	.word	0x08009109
 80090c0:	0800911d 	.word	0x0800911d
 80090c4:	08009109 	.word	0x08009109
 80090c8:	08009109 	.word	0x08009109
 80090cc:	08009109 	.word	0x08009109
 80090d0:	08009109 	.word	0x08009109
 80090d4:	08009109 	.word	0x08009109
 80090d8:	08009109 	.word	0x08009109
 80090dc:	08009109 	.word	0x08009109
 80090e0:	0800911d 	.word	0x0800911d
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	3304      	adds	r3, #4
 80090e8:	2101      	movs	r1, #1
 80090ea:	4618      	mov	r0, r3
 80090ec:	f000 fdfa 	bl	8009ce4 <RCCEx_PLL2_Config>
 80090f0:	4603      	mov	r3, r0
 80090f2:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80090f4:	e013      	b.n	800911e <HAL_RCCEx_PeriphCLKConfig+0x842>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	3324      	adds	r3, #36	; 0x24
 80090fa:	2101      	movs	r1, #1
 80090fc:	4618      	mov	r0, r3
 80090fe:	f000 fea3 	bl	8009e48 <RCCEx_PLL3_Config>
 8009102:	4603      	mov	r3, r0
 8009104:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8009106:	e00a      	b.n	800911e <HAL_RCCEx_PeriphCLKConfig+0x842>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009108:	2301      	movs	r3, #1
 800910a:	75fb      	strb	r3, [r7, #23]
      break;
 800910c:	e007      	b.n	800911e <HAL_RCCEx_PeriphCLKConfig+0x842>
 800910e:	bf00      	nop
 8009110:	58024400 	.word	0x58024400
 8009114:	58024800 	.word	0x58024800
 8009118:	00ffffcf 	.word	0x00ffffcf
      break;
 800911c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800911e:	7dfb      	ldrb	r3, [r7, #23]
 8009120:	2b00      	cmp	r3, #0
 8009122:	d109      	bne.n	8009138 <HAL_RCCEx_PeriphCLKConfig+0x85c>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8009124:	4b96      	ldr	r3, [pc, #600]	; (8009380 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8009126:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009128:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009130:	4993      	ldr	r1, [pc, #588]	; (8009380 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8009132:	4313      	orrs	r3, r2
 8009134:	654b      	str	r3, [r1, #84]	; 0x54
 8009136:	e001      	b.n	800913c <HAL_RCCEx_PeriphCLKConfig+0x860>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009138:	7dfb      	ldrb	r3, [r7, #23]
 800913a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	681b      	ldr	r3, [r3, #0]
 8009140:	f003 0302 	and.w	r3, r3, #2
 8009144:	2b00      	cmp	r3, #0
 8009146:	d038      	beq.n	80091ba <HAL_RCCEx_PeriphCLKConfig+0x8de>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800914c:	2b05      	cmp	r3, #5
 800914e:	d821      	bhi.n	8009194 <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 8009150:	a201      	add	r2, pc, #4	; (adr r2, 8009158 <HAL_RCCEx_PeriphCLKConfig+0x87c>)
 8009152:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009156:	bf00      	nop
 8009158:	0800919b 	.word	0x0800919b
 800915c:	08009171 	.word	0x08009171
 8009160:	08009183 	.word	0x08009183
 8009164:	0800919b 	.word	0x0800919b
 8009168:	0800919b 	.word	0x0800919b
 800916c:	0800919b 	.word	0x0800919b
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	3304      	adds	r3, #4
 8009174:	2101      	movs	r1, #1
 8009176:	4618      	mov	r0, r3
 8009178:	f000 fdb4 	bl	8009ce4 <RCCEx_PLL2_Config>
 800917c:	4603      	mov	r3, r0
 800917e:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8009180:	e00c      	b.n	800919c <HAL_RCCEx_PeriphCLKConfig+0x8c0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	3324      	adds	r3, #36	; 0x24
 8009186:	2101      	movs	r1, #1
 8009188:	4618      	mov	r0, r3
 800918a:	f000 fe5d 	bl	8009e48 <RCCEx_PLL3_Config>
 800918e:	4603      	mov	r3, r0
 8009190:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8009192:	e003      	b.n	800919c <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009194:	2301      	movs	r3, #1
 8009196:	75fb      	strb	r3, [r7, #23]
      break;
 8009198:	e000      	b.n	800919c <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      break;
 800919a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800919c:	7dfb      	ldrb	r3, [r7, #23]
 800919e:	2b00      	cmp	r3, #0
 80091a0:	d109      	bne.n	80091b6 <HAL_RCCEx_PeriphCLKConfig+0x8da>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80091a2:	4b77      	ldr	r3, [pc, #476]	; (8009380 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80091a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80091a6:	f023 0207 	bic.w	r2, r3, #7
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80091ae:	4974      	ldr	r1, [pc, #464]	; (8009380 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80091b0:	4313      	orrs	r3, r2
 80091b2:	654b      	str	r3, [r1, #84]	; 0x54
 80091b4:	e001      	b.n	80091ba <HAL_RCCEx_PeriphCLKConfig+0x8de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80091b6:	7dfb      	ldrb	r3, [r7, #23]
 80091b8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	681b      	ldr	r3, [r3, #0]
 80091be:	f003 0304 	and.w	r3, r3, #4
 80091c2:	2b00      	cmp	r3, #0
 80091c4:	d03a      	beq.n	800923c <HAL_RCCEx_PeriphCLKConfig+0x960>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80091cc:	2b05      	cmp	r3, #5
 80091ce:	d821      	bhi.n	8009214 <HAL_RCCEx_PeriphCLKConfig+0x938>
 80091d0:	a201      	add	r2, pc, #4	; (adr r2, 80091d8 <HAL_RCCEx_PeriphCLKConfig+0x8fc>)
 80091d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80091d6:	bf00      	nop
 80091d8:	0800921b 	.word	0x0800921b
 80091dc:	080091f1 	.word	0x080091f1
 80091e0:	08009203 	.word	0x08009203
 80091e4:	0800921b 	.word	0x0800921b
 80091e8:	0800921b 	.word	0x0800921b
 80091ec:	0800921b 	.word	0x0800921b
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	3304      	adds	r3, #4
 80091f4:	2101      	movs	r1, #1
 80091f6:	4618      	mov	r0, r3
 80091f8:	f000 fd74 	bl	8009ce4 <RCCEx_PLL2_Config>
 80091fc:	4603      	mov	r3, r0
 80091fe:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8009200:	e00c      	b.n	800921c <HAL_RCCEx_PeriphCLKConfig+0x940>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	3324      	adds	r3, #36	; 0x24
 8009206:	2101      	movs	r1, #1
 8009208:	4618      	mov	r0, r3
 800920a:	f000 fe1d 	bl	8009e48 <RCCEx_PLL3_Config>
 800920e:	4603      	mov	r3, r0
 8009210:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8009212:	e003      	b.n	800921c <HAL_RCCEx_PeriphCLKConfig+0x940>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009214:	2301      	movs	r3, #1
 8009216:	75fb      	strb	r3, [r7, #23]
      break;
 8009218:	e000      	b.n	800921c <HAL_RCCEx_PeriphCLKConfig+0x940>
      break;
 800921a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800921c:	7dfb      	ldrb	r3, [r7, #23]
 800921e:	2b00      	cmp	r3, #0
 8009220:	d10a      	bne.n	8009238 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8009222:	4b57      	ldr	r3, [pc, #348]	; (8009380 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8009224:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009226:	f023 0207 	bic.w	r2, r3, #7
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009230:	4953      	ldr	r1, [pc, #332]	; (8009380 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8009232:	4313      	orrs	r3, r2
 8009234:	658b      	str	r3, [r1, #88]	; 0x58
 8009236:	e001      	b.n	800923c <HAL_RCCEx_PeriphCLKConfig+0x960>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009238:	7dfb      	ldrb	r3, [r7, #23]
 800923a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	681b      	ldr	r3, [r3, #0]
 8009240:	f003 0320 	and.w	r3, r3, #32
 8009244:	2b00      	cmp	r3, #0
 8009246:	d04b      	beq.n	80092e0 <HAL_RCCEx_PeriphCLKConfig+0xa04>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800924e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009252:	d02e      	beq.n	80092b2 <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8009254:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009258:	d828      	bhi.n	80092ac <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 800925a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800925e:	d02a      	beq.n	80092b6 <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8009260:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009264:	d822      	bhi.n	80092ac <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8009266:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800926a:	d026      	beq.n	80092ba <HAL_RCCEx_PeriphCLKConfig+0x9de>
 800926c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009270:	d81c      	bhi.n	80092ac <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8009272:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009276:	d010      	beq.n	800929a <HAL_RCCEx_PeriphCLKConfig+0x9be>
 8009278:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800927c:	d816      	bhi.n	80092ac <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 800927e:	2b00      	cmp	r3, #0
 8009280:	d01d      	beq.n	80092be <HAL_RCCEx_PeriphCLKConfig+0x9e2>
 8009282:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009286:	d111      	bne.n	80092ac <HAL_RCCEx_PeriphCLKConfig+0x9d0>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	3304      	adds	r3, #4
 800928c:	2100      	movs	r1, #0
 800928e:	4618      	mov	r0, r3
 8009290:	f000 fd28 	bl	8009ce4 <RCCEx_PLL2_Config>
 8009294:	4603      	mov	r3, r0
 8009296:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8009298:	e012      	b.n	80092c0 <HAL_RCCEx_PeriphCLKConfig+0x9e4>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	3324      	adds	r3, #36	; 0x24
 800929e:	2102      	movs	r1, #2
 80092a0:	4618      	mov	r0, r3
 80092a2:	f000 fdd1 	bl	8009e48 <RCCEx_PLL3_Config>
 80092a6:	4603      	mov	r3, r0
 80092a8:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80092aa:	e009      	b.n	80092c0 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80092ac:	2301      	movs	r3, #1
 80092ae:	75fb      	strb	r3, [r7, #23]
      break;
 80092b0:	e006      	b.n	80092c0 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 80092b2:	bf00      	nop
 80092b4:	e004      	b.n	80092c0 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 80092b6:	bf00      	nop
 80092b8:	e002      	b.n	80092c0 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 80092ba:	bf00      	nop
 80092bc:	e000      	b.n	80092c0 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 80092be:	bf00      	nop
    }

    if(ret == HAL_OK)
 80092c0:	7dfb      	ldrb	r3, [r7, #23]
 80092c2:	2b00      	cmp	r3, #0
 80092c4:	d10a      	bne.n	80092dc <HAL_RCCEx_PeriphCLKConfig+0xa00>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80092c6:	4b2e      	ldr	r3, [pc, #184]	; (8009380 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80092c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80092ca:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80092d4:	492a      	ldr	r1, [pc, #168]	; (8009380 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80092d6:	4313      	orrs	r3, r2
 80092d8:	654b      	str	r3, [r1, #84]	; 0x54
 80092da:	e001      	b.n	80092e0 <HAL_RCCEx_PeriphCLKConfig+0xa04>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80092dc:	7dfb      	ldrb	r3, [r7, #23]
 80092de:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	681b      	ldr	r3, [r3, #0]
 80092e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80092e8:	2b00      	cmp	r3, #0
 80092ea:	d04d      	beq.n	8009388 <HAL_RCCEx_PeriphCLKConfig+0xaac>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80092f2:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80092f6:	d02e      	beq.n	8009356 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 80092f8:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80092fc:	d828      	bhi.n	8009350 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 80092fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009302:	d02a      	beq.n	800935a <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8009304:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009308:	d822      	bhi.n	8009350 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 800930a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800930e:	d026      	beq.n	800935e <HAL_RCCEx_PeriphCLKConfig+0xa82>
 8009310:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009314:	d81c      	bhi.n	8009350 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8009316:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800931a:	d010      	beq.n	800933e <HAL_RCCEx_PeriphCLKConfig+0xa62>
 800931c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009320:	d816      	bhi.n	8009350 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8009322:	2b00      	cmp	r3, #0
 8009324:	d01d      	beq.n	8009362 <HAL_RCCEx_PeriphCLKConfig+0xa86>
 8009326:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800932a:	d111      	bne.n	8009350 <HAL_RCCEx_PeriphCLKConfig+0xa74>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	3304      	adds	r3, #4
 8009330:	2100      	movs	r1, #0
 8009332:	4618      	mov	r0, r3
 8009334:	f000 fcd6 	bl	8009ce4 <RCCEx_PLL2_Config>
 8009338:	4603      	mov	r3, r0
 800933a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800933c:	e012      	b.n	8009364 <HAL_RCCEx_PeriphCLKConfig+0xa88>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	3324      	adds	r3, #36	; 0x24
 8009342:	2102      	movs	r1, #2
 8009344:	4618      	mov	r0, r3
 8009346:	f000 fd7f 	bl	8009e48 <RCCEx_PLL3_Config>
 800934a:	4603      	mov	r3, r0
 800934c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800934e:	e009      	b.n	8009364 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009350:	2301      	movs	r3, #1
 8009352:	75fb      	strb	r3, [r7, #23]
      break;
 8009354:	e006      	b.n	8009364 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8009356:	bf00      	nop
 8009358:	e004      	b.n	8009364 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 800935a:	bf00      	nop
 800935c:	e002      	b.n	8009364 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 800935e:	bf00      	nop
 8009360:	e000      	b.n	8009364 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8009362:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009364:	7dfb      	ldrb	r3, [r7, #23]
 8009366:	2b00      	cmp	r3, #0
 8009368:	d10c      	bne.n	8009384 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800936a:	4b05      	ldr	r3, [pc, #20]	; (8009380 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800936c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800936e:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8009378:	4901      	ldr	r1, [pc, #4]	; (8009380 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800937a:	4313      	orrs	r3, r2
 800937c:	658b      	str	r3, [r1, #88]	; 0x58
 800937e:	e003      	b.n	8009388 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 8009380:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009384:	7dfb      	ldrb	r3, [r7, #23]
 8009386:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	681b      	ldr	r3, [r3, #0]
 800938c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009390:	2b00      	cmp	r3, #0
 8009392:	d04b      	beq.n	800942c <HAL_RCCEx_PeriphCLKConfig+0xb50>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800939a:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800939e:	d02e      	beq.n	80093fe <HAL_RCCEx_PeriphCLKConfig+0xb22>
 80093a0:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80093a4:	d828      	bhi.n	80093f8 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 80093a6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80093aa:	d02a      	beq.n	8009402 <HAL_RCCEx_PeriphCLKConfig+0xb26>
 80093ac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80093b0:	d822      	bhi.n	80093f8 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 80093b2:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80093b6:	d026      	beq.n	8009406 <HAL_RCCEx_PeriphCLKConfig+0xb2a>
 80093b8:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80093bc:	d81c      	bhi.n	80093f8 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 80093be:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80093c2:	d010      	beq.n	80093e6 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 80093c4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80093c8:	d816      	bhi.n	80093f8 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 80093ca:	2b00      	cmp	r3, #0
 80093cc:	d01d      	beq.n	800940a <HAL_RCCEx_PeriphCLKConfig+0xb2e>
 80093ce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80093d2:	d111      	bne.n	80093f8 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	3304      	adds	r3, #4
 80093d8:	2100      	movs	r1, #0
 80093da:	4618      	mov	r0, r3
 80093dc:	f000 fc82 	bl	8009ce4 <RCCEx_PLL2_Config>
 80093e0:	4603      	mov	r3, r0
 80093e2:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80093e4:	e012      	b.n	800940c <HAL_RCCEx_PeriphCLKConfig+0xb30>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	3324      	adds	r3, #36	; 0x24
 80093ea:	2102      	movs	r1, #2
 80093ec:	4618      	mov	r0, r3
 80093ee:	f000 fd2b 	bl	8009e48 <RCCEx_PLL3_Config>
 80093f2:	4603      	mov	r3, r0
 80093f4:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80093f6:	e009      	b.n	800940c <HAL_RCCEx_PeriphCLKConfig+0xb30>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80093f8:	2301      	movs	r3, #1
 80093fa:	75fb      	strb	r3, [r7, #23]
      break;
 80093fc:	e006      	b.n	800940c <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 80093fe:	bf00      	nop
 8009400:	e004      	b.n	800940c <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8009402:	bf00      	nop
 8009404:	e002      	b.n	800940c <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8009406:	bf00      	nop
 8009408:	e000      	b.n	800940c <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 800940a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800940c:	7dfb      	ldrb	r3, [r7, #23]
 800940e:	2b00      	cmp	r3, #0
 8009410:	d10a      	bne.n	8009428 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8009412:	4b9d      	ldr	r3, [pc, #628]	; (8009688 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009414:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009416:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009420:	4999      	ldr	r1, [pc, #612]	; (8009688 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009422:	4313      	orrs	r3, r2
 8009424:	658b      	str	r3, [r1, #88]	; 0x58
 8009426:	e001      	b.n	800942c <HAL_RCCEx_PeriphCLKConfig+0xb50>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009428:	7dfb      	ldrb	r3, [r7, #23]
 800942a:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	681b      	ldr	r3, [r3, #0]
 8009430:	f003 0308 	and.w	r3, r3, #8
 8009434:	2b00      	cmp	r3, #0
 8009436:	d01a      	beq.n	800946e <HAL_RCCEx_PeriphCLKConfig+0xb92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800943e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009442:	d10a      	bne.n	800945a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	3324      	adds	r3, #36	; 0x24
 8009448:	2102      	movs	r1, #2
 800944a:	4618      	mov	r0, r3
 800944c:	f000 fcfc 	bl	8009e48 <RCCEx_PLL3_Config>
 8009450:	4603      	mov	r3, r0
 8009452:	2b00      	cmp	r3, #0
 8009454:	d001      	beq.n	800945a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        {
          status = HAL_ERROR;
 8009456:	2301      	movs	r3, #1
 8009458:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800945a:	4b8b      	ldr	r3, [pc, #556]	; (8009688 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800945c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800945e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009468:	4987      	ldr	r1, [pc, #540]	; (8009688 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800946a:	4313      	orrs	r3, r2
 800946c:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	681b      	ldr	r3, [r3, #0]
 8009472:	f003 0310 	and.w	r3, r3, #16
 8009476:	2b00      	cmp	r3, #0
 8009478:	d01a      	beq.n	80094b0 <HAL_RCCEx_PeriphCLKConfig+0xbd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009480:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009484:	d10a      	bne.n	800949c <HAL_RCCEx_PeriphCLKConfig+0xbc0>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	3324      	adds	r3, #36	; 0x24
 800948a:	2102      	movs	r1, #2
 800948c:	4618      	mov	r0, r3
 800948e:	f000 fcdb 	bl	8009e48 <RCCEx_PLL3_Config>
 8009492:	4603      	mov	r3, r0
 8009494:	2b00      	cmp	r3, #0
 8009496:	d001      	beq.n	800949c <HAL_RCCEx_PeriphCLKConfig+0xbc0>
      {
        status = HAL_ERROR;
 8009498:	2301      	movs	r3, #1
 800949a:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800949c:	4b7a      	ldr	r3, [pc, #488]	; (8009688 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800949e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80094a0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80094aa:	4977      	ldr	r1, [pc, #476]	; (8009688 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80094ac:	4313      	orrs	r3, r2
 80094ae:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	681b      	ldr	r3, [r3, #0]
 80094b4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80094b8:	2b00      	cmp	r3, #0
 80094ba:	d034      	beq.n	8009526 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {
    switch(PeriphClkInit->AdcClockSelection)
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80094c2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80094c6:	d01d      	beq.n	8009504 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 80094c8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80094cc:	d817      	bhi.n	80094fe <HAL_RCCEx_PeriphCLKConfig+0xc22>
 80094ce:	2b00      	cmp	r3, #0
 80094d0:	d003      	beq.n	80094da <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 80094d2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80094d6:	d009      	beq.n	80094ec <HAL_RCCEx_PeriphCLKConfig+0xc10>
 80094d8:	e011      	b.n	80094fe <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	3304      	adds	r3, #4
 80094de:	2100      	movs	r1, #0
 80094e0:	4618      	mov	r0, r3
 80094e2:	f000 fbff 	bl	8009ce4 <RCCEx_PLL2_Config>
 80094e6:	4603      	mov	r3, r0
 80094e8:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80094ea:	e00c      	b.n	8009506 <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	3324      	adds	r3, #36	; 0x24
 80094f0:	2102      	movs	r1, #2
 80094f2:	4618      	mov	r0, r3
 80094f4:	f000 fca8 	bl	8009e48 <RCCEx_PLL3_Config>
 80094f8:	4603      	mov	r3, r0
 80094fa:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80094fc:	e003      	b.n	8009506 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80094fe:	2301      	movs	r3, #1
 8009500:	75fb      	strb	r3, [r7, #23]
      break;
 8009502:	e000      	b.n	8009506 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 8009504:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009506:	7dfb      	ldrb	r3, [r7, #23]
 8009508:	2b00      	cmp	r3, #0
 800950a:	d10a      	bne.n	8009522 <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800950c:	4b5e      	ldr	r3, [pc, #376]	; (8009688 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800950e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009510:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800951a:	495b      	ldr	r1, [pc, #364]	; (8009688 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800951c:	4313      	orrs	r3, r2
 800951e:	658b      	str	r3, [r1, #88]	; 0x58
 8009520:	e001      	b.n	8009526 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009522:	7dfb      	ldrb	r3, [r7, #23]
 8009524:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	681b      	ldr	r3, [r3, #0]
 800952a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800952e:	2b00      	cmp	r3, #0
 8009530:	d033      	beq.n	800959a <HAL_RCCEx_PeriphCLKConfig+0xcbe>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009538:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800953c:	d01c      	beq.n	8009578 <HAL_RCCEx_PeriphCLKConfig+0xc9c>
 800953e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009542:	d816      	bhi.n	8009572 <HAL_RCCEx_PeriphCLKConfig+0xc96>
 8009544:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009548:	d003      	beq.n	8009552 <HAL_RCCEx_PeriphCLKConfig+0xc76>
 800954a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800954e:	d007      	beq.n	8009560 <HAL_RCCEx_PeriphCLKConfig+0xc84>
 8009550:	e00f      	b.n	8009572 <HAL_RCCEx_PeriphCLKConfig+0xc96>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009552:	4b4d      	ldr	r3, [pc, #308]	; (8009688 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009554:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009556:	4a4c      	ldr	r2, [pc, #304]	; (8009688 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009558:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800955c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 800955e:	e00c      	b.n	800957a <HAL_RCCEx_PeriphCLKConfig+0xc9e>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	3324      	adds	r3, #36	; 0x24
 8009564:	2101      	movs	r1, #1
 8009566:	4618      	mov	r0, r3
 8009568:	f000 fc6e 	bl	8009e48 <RCCEx_PLL3_Config>
 800956c:	4603      	mov	r3, r0
 800956e:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8009570:	e003      	b.n	800957a <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009572:	2301      	movs	r3, #1
 8009574:	75fb      	strb	r3, [r7, #23]
      break;
 8009576:	e000      	b.n	800957a <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      break;
 8009578:	bf00      	nop
    }

    if(ret == HAL_OK)
 800957a:	7dfb      	ldrb	r3, [r7, #23]
 800957c:	2b00      	cmp	r3, #0
 800957e:	d10a      	bne.n	8009596 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8009580:	4b41      	ldr	r3, [pc, #260]	; (8009688 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009582:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009584:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800958e:	493e      	ldr	r1, [pc, #248]	; (8009688 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009590:	4313      	orrs	r3, r2
 8009592:	654b      	str	r3, [r1, #84]	; 0x54
 8009594:	e001      	b.n	800959a <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009596:	7dfb      	ldrb	r3, [r7, #23]
 8009598:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	681b      	ldr	r3, [r3, #0]
 800959e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80095a2:	2b00      	cmp	r3, #0
 80095a4:	d029      	beq.n	80095fa <HAL_RCCEx_PeriphCLKConfig+0xd1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80095aa:	2b00      	cmp	r3, #0
 80095ac:	d003      	beq.n	80095b6 <HAL_RCCEx_PeriphCLKConfig+0xcda>
 80095ae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80095b2:	d007      	beq.n	80095c4 <HAL_RCCEx_PeriphCLKConfig+0xce8>
 80095b4:	e00f      	b.n	80095d6 <HAL_RCCEx_PeriphCLKConfig+0xcfa>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80095b6:	4b34      	ldr	r3, [pc, #208]	; (8009688 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80095b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80095ba:	4a33      	ldr	r2, [pc, #204]	; (8009688 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80095bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80095c0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80095c2:	e00b      	b.n	80095dc <HAL_RCCEx_PeriphCLKConfig+0xd00>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	3304      	adds	r3, #4
 80095c8:	2102      	movs	r1, #2
 80095ca:	4618      	mov	r0, r3
 80095cc:	f000 fb8a 	bl	8009ce4 <RCCEx_PLL2_Config>
 80095d0:	4603      	mov	r3, r0
 80095d2:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80095d4:	e002      	b.n	80095dc <HAL_RCCEx_PeriphCLKConfig+0xd00>

    default:
      ret = HAL_ERROR;
 80095d6:	2301      	movs	r3, #1
 80095d8:	75fb      	strb	r3, [r7, #23]
      break;
 80095da:	bf00      	nop
    }

    if(ret == HAL_OK)
 80095dc:	7dfb      	ldrb	r3, [r7, #23]
 80095de:	2b00      	cmp	r3, #0
 80095e0:	d109      	bne.n	80095f6 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80095e2:	4b29      	ldr	r3, [pc, #164]	; (8009688 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80095e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80095e6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80095ee:	4926      	ldr	r1, [pc, #152]	; (8009688 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80095f0:	4313      	orrs	r3, r2
 80095f2:	64cb      	str	r3, [r1, #76]	; 0x4c
 80095f4:	e001      	b.n	80095fa <HAL_RCCEx_PeriphCLKConfig+0xd1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80095f6:	7dfb      	ldrb	r3, [r7, #23]
 80095f8:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	681b      	ldr	r3, [r3, #0]
 80095fe:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009602:	2b00      	cmp	r3, #0
 8009604:	d00a      	beq.n	800961c <HAL_RCCEx_PeriphCLKConfig+0xd40>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	3324      	adds	r3, #36	; 0x24
 800960a:	2102      	movs	r1, #2
 800960c:	4618      	mov	r0, r3
 800960e:	f000 fc1b 	bl	8009e48 <RCCEx_PLL3_Config>
 8009612:	4603      	mov	r3, r0
 8009614:	2b00      	cmp	r3, #0
 8009616:	d001      	beq.n	800961c <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      status=HAL_ERROR;
 8009618:	2301      	movs	r3, #1
 800961a:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	681b      	ldr	r3, [r3, #0]
 8009620:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009624:	2b00      	cmp	r3, #0
 8009626:	d033      	beq.n	8009690 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
  {

    switch(PeriphClkInit->RngClockSelection)
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800962c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009630:	d017      	beq.n	8009662 <HAL_RCCEx_PeriphCLKConfig+0xd86>
 8009632:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009636:	d811      	bhi.n	800965c <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8009638:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800963c:	d013      	beq.n	8009666 <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 800963e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009642:	d80b      	bhi.n	800965c <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8009644:	2b00      	cmp	r3, #0
 8009646:	d010      	beq.n	800966a <HAL_RCCEx_PeriphCLKConfig+0xd8e>
 8009648:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800964c:	d106      	bne.n	800965c <HAL_RCCEx_PeriphCLKConfig+0xd80>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800964e:	4b0e      	ldr	r3, [pc, #56]	; (8009688 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009650:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009652:	4a0d      	ldr	r2, [pc, #52]	; (8009688 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009654:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009658:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 800965a:	e007      	b.n	800966c <HAL_RCCEx_PeriphCLKConfig+0xd90>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800965c:	2301      	movs	r3, #1
 800965e:	75fb      	strb	r3, [r7, #23]
      break;
 8009660:	e004      	b.n	800966c <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8009662:	bf00      	nop
 8009664:	e002      	b.n	800966c <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8009666:	bf00      	nop
 8009668:	e000      	b.n	800966c <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 800966a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800966c:	7dfb      	ldrb	r3, [r7, #23]
 800966e:	2b00      	cmp	r3, #0
 8009670:	d10c      	bne.n	800968c <HAL_RCCEx_PeriphCLKConfig+0xdb0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8009672:	4b05      	ldr	r3, [pc, #20]	; (8009688 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009674:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009676:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800967e:	4902      	ldr	r1, [pc, #8]	; (8009688 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009680:	4313      	orrs	r3, r2
 8009682:	654b      	str	r3, [r1, #84]	; 0x54
 8009684:	e004      	b.n	8009690 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
 8009686:	bf00      	nop
 8009688:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800968c:	7dfb      	ldrb	r3, [r7, #23]
 800968e:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	681b      	ldr	r3, [r3, #0]
 8009694:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009698:	2b00      	cmp	r3, #0
 800969a:	d008      	beq.n	80096ae <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800969c:	4b31      	ldr	r3, [pc, #196]	; (8009764 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800969e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80096a0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80096a8:	492e      	ldr	r1, [pc, #184]	; (8009764 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80096aa:	4313      	orrs	r3, r2
 80096ac:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	681b      	ldr	r3, [r3, #0]
 80096b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80096b6:	2b00      	cmp	r3, #0
 80096b8:	d009      	beq.n	80096ce <HAL_RCCEx_PeriphCLKConfig+0xdf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80096ba:	4b2a      	ldr	r3, [pc, #168]	; (8009764 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80096bc:	691b      	ldr	r3, [r3, #16]
 80096be:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80096c8:	4926      	ldr	r1, [pc, #152]	; (8009764 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80096ca:	4313      	orrs	r3, r2
 80096cc:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	681b      	ldr	r3, [r3, #0]
 80096d2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80096d6:	2b00      	cmp	r3, #0
 80096d8:	d008      	beq.n	80096ec <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80096da:	4b22      	ldr	r3, [pc, #136]	; (8009764 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80096dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80096de:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80096e6:	491f      	ldr	r1, [pc, #124]	; (8009764 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80096e8:	4313      	orrs	r3, r2
 80096ea:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	681b      	ldr	r3, [r3, #0]
 80096f0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80096f4:	2b00      	cmp	r3, #0
 80096f6:	d00d      	beq.n	8009714 <HAL_RCCEx_PeriphCLKConfig+0xe38>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80096f8:	4b1a      	ldr	r3, [pc, #104]	; (8009764 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80096fa:	691b      	ldr	r3, [r3, #16]
 80096fc:	4a19      	ldr	r2, [pc, #100]	; (8009764 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80096fe:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8009702:	6113      	str	r3, [r2, #16]
 8009704:	4b17      	ldr	r3, [pc, #92]	; (8009764 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8009706:	691a      	ldr	r2, [r3, #16]
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800970e:	4915      	ldr	r1, [pc, #84]	; (8009764 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8009710:	4313      	orrs	r3, r2
 8009712:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	681b      	ldr	r3, [r3, #0]
 8009718:	2b00      	cmp	r3, #0
 800971a:	da08      	bge.n	800972e <HAL_RCCEx_PeriphCLKConfig+0xe52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800971c:	4b11      	ldr	r3, [pc, #68]	; (8009764 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800971e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009720:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009728:	490e      	ldr	r1, [pc, #56]	; (8009764 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800972a:	4313      	orrs	r3, r2
 800972c:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	681b      	ldr	r3, [r3, #0]
 8009732:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009736:	2b00      	cmp	r3, #0
 8009738:	d009      	beq.n	800974e <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800973a:	4b0a      	ldr	r3, [pc, #40]	; (8009764 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800973c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800973e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009748:	4906      	ldr	r1, [pc, #24]	; (8009764 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800974a:	4313      	orrs	r3, r2
 800974c:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 800974e:	7dbb      	ldrb	r3, [r7, #22]
 8009750:	2b00      	cmp	r3, #0
 8009752:	d101      	bne.n	8009758 <HAL_RCCEx_PeriphCLKConfig+0xe7c>
  {
    return HAL_OK;
 8009754:	2300      	movs	r3, #0
 8009756:	e000      	b.n	800975a <HAL_RCCEx_PeriphCLKConfig+0xe7e>
  }
  return HAL_ERROR;
 8009758:	2301      	movs	r3, #1
}
 800975a:	4618      	mov	r0, r3
 800975c:	3718      	adds	r7, #24
 800975e:	46bd      	mov	sp, r7
 8009760:	bd80      	pop	{r7, pc}
 8009762:	bf00      	nop
 8009764:	58024400 	.word	0x58024400

08009768 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8009768:	b580      	push	{r7, lr}
 800976a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800976c:	f7ff f85a 	bl	8008824 <HAL_RCC_GetHCLKFreq>
 8009770:	4602      	mov	r2, r0
 8009772:	4b06      	ldr	r3, [pc, #24]	; (800978c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8009774:	6a1b      	ldr	r3, [r3, #32]
 8009776:	091b      	lsrs	r3, r3, #4
 8009778:	f003 0307 	and.w	r3, r3, #7
 800977c:	4904      	ldr	r1, [pc, #16]	; (8009790 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800977e:	5ccb      	ldrb	r3, [r1, r3]
 8009780:	f003 031f 	and.w	r3, r3, #31
 8009784:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8009788:	4618      	mov	r0, r3
 800978a:	bd80      	pop	{r7, pc}
 800978c:	58024400 	.word	0x58024400
 8009790:	0801228c 	.word	0x0801228c

08009794 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8009794:	b480      	push	{r7}
 8009796:	b089      	sub	sp, #36	; 0x24
 8009798:	af00      	add	r7, sp, #0
 800979a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800979c:	4ba1      	ldr	r3, [pc, #644]	; (8009a24 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800979e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80097a0:	f003 0303 	and.w	r3, r3, #3
 80097a4:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 80097a6:	4b9f      	ldr	r3, [pc, #636]	; (8009a24 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80097a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80097aa:	0b1b      	lsrs	r3, r3, #12
 80097ac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80097b0:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80097b2:	4b9c      	ldr	r3, [pc, #624]	; (8009a24 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80097b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80097b6:	091b      	lsrs	r3, r3, #4
 80097b8:	f003 0301 	and.w	r3, r3, #1
 80097bc:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 80097be:	4b99      	ldr	r3, [pc, #612]	; (8009a24 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80097c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80097c2:	08db      	lsrs	r3, r3, #3
 80097c4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80097c8:	693a      	ldr	r2, [r7, #16]
 80097ca:	fb02 f303 	mul.w	r3, r2, r3
 80097ce:	ee07 3a90 	vmov	s15, r3
 80097d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80097d6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80097da:	697b      	ldr	r3, [r7, #20]
 80097dc:	2b00      	cmp	r3, #0
 80097de:	f000 8111 	beq.w	8009a04 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80097e2:	69bb      	ldr	r3, [r7, #24]
 80097e4:	2b02      	cmp	r3, #2
 80097e6:	f000 8083 	beq.w	80098f0 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80097ea:	69bb      	ldr	r3, [r7, #24]
 80097ec:	2b02      	cmp	r3, #2
 80097ee:	f200 80a1 	bhi.w	8009934 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80097f2:	69bb      	ldr	r3, [r7, #24]
 80097f4:	2b00      	cmp	r3, #0
 80097f6:	d003      	beq.n	8009800 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80097f8:	69bb      	ldr	r3, [r7, #24]
 80097fa:	2b01      	cmp	r3, #1
 80097fc:	d056      	beq.n	80098ac <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80097fe:	e099      	b.n	8009934 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009800:	4b88      	ldr	r3, [pc, #544]	; (8009a24 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009802:	681b      	ldr	r3, [r3, #0]
 8009804:	f003 0320 	and.w	r3, r3, #32
 8009808:	2b00      	cmp	r3, #0
 800980a:	d02d      	beq.n	8009868 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800980c:	4b85      	ldr	r3, [pc, #532]	; (8009a24 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800980e:	681b      	ldr	r3, [r3, #0]
 8009810:	08db      	lsrs	r3, r3, #3
 8009812:	f003 0303 	and.w	r3, r3, #3
 8009816:	4a84      	ldr	r2, [pc, #528]	; (8009a28 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8009818:	fa22 f303 	lsr.w	r3, r2, r3
 800981c:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800981e:	68bb      	ldr	r3, [r7, #8]
 8009820:	ee07 3a90 	vmov	s15, r3
 8009824:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009828:	697b      	ldr	r3, [r7, #20]
 800982a:	ee07 3a90 	vmov	s15, r3
 800982e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009832:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009836:	4b7b      	ldr	r3, [pc, #492]	; (8009a24 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009838:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800983a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800983e:	ee07 3a90 	vmov	s15, r3
 8009842:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009846:	ed97 6a03 	vldr	s12, [r7, #12]
 800984a:	eddf 5a78 	vldr	s11, [pc, #480]	; 8009a2c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800984e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009852:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009856:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800985a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800985e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009862:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8009866:	e087      	b.n	8009978 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8009868:	697b      	ldr	r3, [r7, #20]
 800986a:	ee07 3a90 	vmov	s15, r3
 800986e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009872:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8009a30 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8009876:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800987a:	4b6a      	ldr	r3, [pc, #424]	; (8009a24 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800987c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800987e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009882:	ee07 3a90 	vmov	s15, r3
 8009886:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800988a:	ed97 6a03 	vldr	s12, [r7, #12]
 800988e:	eddf 5a67 	vldr	s11, [pc, #412]	; 8009a2c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009892:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009896:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800989a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800989e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80098a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80098a6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80098aa:	e065      	b.n	8009978 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80098ac:	697b      	ldr	r3, [r7, #20]
 80098ae:	ee07 3a90 	vmov	s15, r3
 80098b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80098b6:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8009a34 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80098ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80098be:	4b59      	ldr	r3, [pc, #356]	; (8009a24 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80098c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80098c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80098c6:	ee07 3a90 	vmov	s15, r3
 80098ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80098ce:	ed97 6a03 	vldr	s12, [r7, #12]
 80098d2:	eddf 5a56 	vldr	s11, [pc, #344]	; 8009a2c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80098d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80098da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80098de:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80098e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80098e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80098ea:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80098ee:	e043      	b.n	8009978 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80098f0:	697b      	ldr	r3, [r7, #20]
 80098f2:	ee07 3a90 	vmov	s15, r3
 80098f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80098fa:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8009a38 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80098fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009902:	4b48      	ldr	r3, [pc, #288]	; (8009a24 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009904:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009906:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800990a:	ee07 3a90 	vmov	s15, r3
 800990e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009912:	ed97 6a03 	vldr	s12, [r7, #12]
 8009916:	eddf 5a45 	vldr	s11, [pc, #276]	; 8009a2c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800991a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800991e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009922:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009926:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800992a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800992e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009932:	e021      	b.n	8009978 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8009934:	697b      	ldr	r3, [r7, #20]
 8009936:	ee07 3a90 	vmov	s15, r3
 800993a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800993e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8009a34 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8009942:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009946:	4b37      	ldr	r3, [pc, #220]	; (8009a24 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009948:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800994a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800994e:	ee07 3a90 	vmov	s15, r3
 8009952:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009956:	ed97 6a03 	vldr	s12, [r7, #12]
 800995a:	eddf 5a34 	vldr	s11, [pc, #208]	; 8009a2c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800995e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009962:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009966:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800996a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800996e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009972:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009976:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8009978:	4b2a      	ldr	r3, [pc, #168]	; (8009a24 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800997a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800997c:	0a5b      	lsrs	r3, r3, #9
 800997e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009982:	ee07 3a90 	vmov	s15, r3
 8009986:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800998a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800998e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009992:	edd7 6a07 	vldr	s13, [r7, #28]
 8009996:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800999a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800999e:	ee17 2a90 	vmov	r2, s15
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 80099a6:	4b1f      	ldr	r3, [pc, #124]	; (8009a24 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80099a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80099aa:	0c1b      	lsrs	r3, r3, #16
 80099ac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80099b0:	ee07 3a90 	vmov	s15, r3
 80099b4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80099b8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80099bc:	ee37 7a87 	vadd.f32	s14, s15, s14
 80099c0:	edd7 6a07 	vldr	s13, [r7, #28]
 80099c4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80099c8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80099cc:	ee17 2a90 	vmov	r2, s15
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 80099d4:	4b13      	ldr	r3, [pc, #76]	; (8009a24 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80099d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80099d8:	0e1b      	lsrs	r3, r3, #24
 80099da:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80099de:	ee07 3a90 	vmov	s15, r3
 80099e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80099e6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80099ea:	ee37 7a87 	vadd.f32	s14, s15, s14
 80099ee:	edd7 6a07 	vldr	s13, [r7, #28]
 80099f2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80099f6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80099fa:	ee17 2a90 	vmov	r2, s15
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8009a02:	e008      	b.n	8009a16 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	2200      	movs	r2, #0
 8009a08:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	2200      	movs	r2, #0
 8009a0e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	2200      	movs	r2, #0
 8009a14:	609a      	str	r2, [r3, #8]
}
 8009a16:	bf00      	nop
 8009a18:	3724      	adds	r7, #36	; 0x24
 8009a1a:	46bd      	mov	sp, r7
 8009a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a20:	4770      	bx	lr
 8009a22:	bf00      	nop
 8009a24:	58024400 	.word	0x58024400
 8009a28:	03d09000 	.word	0x03d09000
 8009a2c:	46000000 	.word	0x46000000
 8009a30:	4c742400 	.word	0x4c742400
 8009a34:	4a742400 	.word	0x4a742400
 8009a38:	4bbebc20 	.word	0x4bbebc20

08009a3c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8009a3c:	b480      	push	{r7}
 8009a3e:	b089      	sub	sp, #36	; 0x24
 8009a40:	af00      	add	r7, sp, #0
 8009a42:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009a44:	4ba1      	ldr	r3, [pc, #644]	; (8009ccc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009a46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009a48:	f003 0303 	and.w	r3, r3, #3
 8009a4c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8009a4e:	4b9f      	ldr	r3, [pc, #636]	; (8009ccc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009a50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009a52:	0d1b      	lsrs	r3, r3, #20
 8009a54:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009a58:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8009a5a:	4b9c      	ldr	r3, [pc, #624]	; (8009ccc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009a5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a5e:	0a1b      	lsrs	r3, r3, #8
 8009a60:	f003 0301 	and.w	r3, r3, #1
 8009a64:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8009a66:	4b99      	ldr	r3, [pc, #612]	; (8009ccc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009a68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009a6a:	08db      	lsrs	r3, r3, #3
 8009a6c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009a70:	693a      	ldr	r2, [r7, #16]
 8009a72:	fb02 f303 	mul.w	r3, r2, r3
 8009a76:	ee07 3a90 	vmov	s15, r3
 8009a7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009a7e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8009a82:	697b      	ldr	r3, [r7, #20]
 8009a84:	2b00      	cmp	r3, #0
 8009a86:	f000 8111 	beq.w	8009cac <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8009a8a:	69bb      	ldr	r3, [r7, #24]
 8009a8c:	2b02      	cmp	r3, #2
 8009a8e:	f000 8083 	beq.w	8009b98 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8009a92:	69bb      	ldr	r3, [r7, #24]
 8009a94:	2b02      	cmp	r3, #2
 8009a96:	f200 80a1 	bhi.w	8009bdc <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8009a9a:	69bb      	ldr	r3, [r7, #24]
 8009a9c:	2b00      	cmp	r3, #0
 8009a9e:	d003      	beq.n	8009aa8 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8009aa0:	69bb      	ldr	r3, [r7, #24]
 8009aa2:	2b01      	cmp	r3, #1
 8009aa4:	d056      	beq.n	8009b54 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8009aa6:	e099      	b.n	8009bdc <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009aa8:	4b88      	ldr	r3, [pc, #544]	; (8009ccc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009aaa:	681b      	ldr	r3, [r3, #0]
 8009aac:	f003 0320 	and.w	r3, r3, #32
 8009ab0:	2b00      	cmp	r3, #0
 8009ab2:	d02d      	beq.n	8009b10 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009ab4:	4b85      	ldr	r3, [pc, #532]	; (8009ccc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009ab6:	681b      	ldr	r3, [r3, #0]
 8009ab8:	08db      	lsrs	r3, r3, #3
 8009aba:	f003 0303 	and.w	r3, r3, #3
 8009abe:	4a84      	ldr	r2, [pc, #528]	; (8009cd0 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8009ac0:	fa22 f303 	lsr.w	r3, r2, r3
 8009ac4:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009ac6:	68bb      	ldr	r3, [r7, #8]
 8009ac8:	ee07 3a90 	vmov	s15, r3
 8009acc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009ad0:	697b      	ldr	r3, [r7, #20]
 8009ad2:	ee07 3a90 	vmov	s15, r3
 8009ad6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009ada:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009ade:	4b7b      	ldr	r3, [pc, #492]	; (8009ccc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009ae0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ae2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009ae6:	ee07 3a90 	vmov	s15, r3
 8009aea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009aee:	ed97 6a03 	vldr	s12, [r7, #12]
 8009af2:	eddf 5a78 	vldr	s11, [pc, #480]	; 8009cd4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009af6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009afa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009afe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009b02:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009b06:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009b0a:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8009b0e:	e087      	b.n	8009c20 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009b10:	697b      	ldr	r3, [r7, #20]
 8009b12:	ee07 3a90 	vmov	s15, r3
 8009b16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009b1a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8009cd8 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8009b1e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009b22:	4b6a      	ldr	r3, [pc, #424]	; (8009ccc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009b24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b26:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009b2a:	ee07 3a90 	vmov	s15, r3
 8009b2e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009b32:	ed97 6a03 	vldr	s12, [r7, #12]
 8009b36:	eddf 5a67 	vldr	s11, [pc, #412]	; 8009cd4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009b3a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009b3e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009b42:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009b46:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009b4a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009b4e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009b52:	e065      	b.n	8009c20 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009b54:	697b      	ldr	r3, [r7, #20]
 8009b56:	ee07 3a90 	vmov	s15, r3
 8009b5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009b5e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8009cdc <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8009b62:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009b66:	4b59      	ldr	r3, [pc, #356]	; (8009ccc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009b68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b6a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009b6e:	ee07 3a90 	vmov	s15, r3
 8009b72:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009b76:	ed97 6a03 	vldr	s12, [r7, #12]
 8009b7a:	eddf 5a56 	vldr	s11, [pc, #344]	; 8009cd4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009b7e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009b82:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009b86:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009b8a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009b8e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009b92:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009b96:	e043      	b.n	8009c20 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009b98:	697b      	ldr	r3, [r7, #20]
 8009b9a:	ee07 3a90 	vmov	s15, r3
 8009b9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009ba2:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8009ce0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8009ba6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009baa:	4b48      	ldr	r3, [pc, #288]	; (8009ccc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009bac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009bae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009bb2:	ee07 3a90 	vmov	s15, r3
 8009bb6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009bba:	ed97 6a03 	vldr	s12, [r7, #12]
 8009bbe:	eddf 5a45 	vldr	s11, [pc, #276]	; 8009cd4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009bc2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009bc6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009bca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009bce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009bd2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009bd6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009bda:	e021      	b.n	8009c20 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009bdc:	697b      	ldr	r3, [r7, #20]
 8009bde:	ee07 3a90 	vmov	s15, r3
 8009be2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009be6:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8009cdc <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8009bea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009bee:	4b37      	ldr	r3, [pc, #220]	; (8009ccc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009bf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009bf2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009bf6:	ee07 3a90 	vmov	s15, r3
 8009bfa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009bfe:	ed97 6a03 	vldr	s12, [r7, #12]
 8009c02:	eddf 5a34 	vldr	s11, [pc, #208]	; 8009cd4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009c06:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009c0a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009c0e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009c12:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009c16:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009c1a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009c1e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8009c20:	4b2a      	ldr	r3, [pc, #168]	; (8009ccc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009c22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c24:	0a5b      	lsrs	r3, r3, #9
 8009c26:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009c2a:	ee07 3a90 	vmov	s15, r3
 8009c2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009c32:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009c36:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009c3a:	edd7 6a07 	vldr	s13, [r7, #28]
 8009c3e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009c42:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009c46:	ee17 2a90 	vmov	r2, s15
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8009c4e:	4b1f      	ldr	r3, [pc, #124]	; (8009ccc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009c50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c52:	0c1b      	lsrs	r3, r3, #16
 8009c54:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009c58:	ee07 3a90 	vmov	s15, r3
 8009c5c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009c60:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009c64:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009c68:	edd7 6a07 	vldr	s13, [r7, #28]
 8009c6c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009c70:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009c74:	ee17 2a90 	vmov	r2, s15
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8009c7c:	4b13      	ldr	r3, [pc, #76]	; (8009ccc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009c7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c80:	0e1b      	lsrs	r3, r3, #24
 8009c82:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009c86:	ee07 3a90 	vmov	s15, r3
 8009c8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009c8e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009c92:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009c96:	edd7 6a07 	vldr	s13, [r7, #28]
 8009c9a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009c9e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009ca2:	ee17 2a90 	vmov	r2, s15
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8009caa:	e008      	b.n	8009cbe <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	2200      	movs	r2, #0
 8009cb0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	2200      	movs	r2, #0
 8009cb6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	2200      	movs	r2, #0
 8009cbc:	609a      	str	r2, [r3, #8]
}
 8009cbe:	bf00      	nop
 8009cc0:	3724      	adds	r7, #36	; 0x24
 8009cc2:	46bd      	mov	sp, r7
 8009cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cc8:	4770      	bx	lr
 8009cca:	bf00      	nop
 8009ccc:	58024400 	.word	0x58024400
 8009cd0:	03d09000 	.word	0x03d09000
 8009cd4:	46000000 	.word	0x46000000
 8009cd8:	4c742400 	.word	0x4c742400
 8009cdc:	4a742400 	.word	0x4a742400
 8009ce0:	4bbebc20 	.word	0x4bbebc20

08009ce4 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8009ce4:	b580      	push	{r7, lr}
 8009ce6:	b084      	sub	sp, #16
 8009ce8:	af00      	add	r7, sp, #0
 8009cea:	6078      	str	r0, [r7, #4]
 8009cec:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009cee:	2300      	movs	r3, #0
 8009cf0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8009cf2:	4b53      	ldr	r3, [pc, #332]	; (8009e40 <RCCEx_PLL2_Config+0x15c>)
 8009cf4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009cf6:	f003 0303 	and.w	r3, r3, #3
 8009cfa:	2b03      	cmp	r3, #3
 8009cfc:	d101      	bne.n	8009d02 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8009cfe:	2301      	movs	r3, #1
 8009d00:	e099      	b.n	8009e36 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8009d02:	4b4f      	ldr	r3, [pc, #316]	; (8009e40 <RCCEx_PLL2_Config+0x15c>)
 8009d04:	681b      	ldr	r3, [r3, #0]
 8009d06:	4a4e      	ldr	r2, [pc, #312]	; (8009e40 <RCCEx_PLL2_Config+0x15c>)
 8009d08:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8009d0c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009d0e:	f7fc fd13 	bl	8006738 <HAL_GetTick>
 8009d12:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8009d14:	e008      	b.n	8009d28 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8009d16:	f7fc fd0f 	bl	8006738 <HAL_GetTick>
 8009d1a:	4602      	mov	r2, r0
 8009d1c:	68bb      	ldr	r3, [r7, #8]
 8009d1e:	1ad3      	subs	r3, r2, r3
 8009d20:	2b02      	cmp	r3, #2
 8009d22:	d901      	bls.n	8009d28 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8009d24:	2303      	movs	r3, #3
 8009d26:	e086      	b.n	8009e36 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8009d28:	4b45      	ldr	r3, [pc, #276]	; (8009e40 <RCCEx_PLL2_Config+0x15c>)
 8009d2a:	681b      	ldr	r3, [r3, #0]
 8009d2c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009d30:	2b00      	cmp	r3, #0
 8009d32:	d1f0      	bne.n	8009d16 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8009d34:	4b42      	ldr	r3, [pc, #264]	; (8009e40 <RCCEx_PLL2_Config+0x15c>)
 8009d36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009d38:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	681b      	ldr	r3, [r3, #0]
 8009d40:	031b      	lsls	r3, r3, #12
 8009d42:	493f      	ldr	r1, [pc, #252]	; (8009e40 <RCCEx_PLL2_Config+0x15c>)
 8009d44:	4313      	orrs	r3, r2
 8009d46:	628b      	str	r3, [r1, #40]	; 0x28
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	685b      	ldr	r3, [r3, #4]
 8009d4c:	3b01      	subs	r3, #1
 8009d4e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	689b      	ldr	r3, [r3, #8]
 8009d56:	3b01      	subs	r3, #1
 8009d58:	025b      	lsls	r3, r3, #9
 8009d5a:	b29b      	uxth	r3, r3
 8009d5c:	431a      	orrs	r2, r3
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	68db      	ldr	r3, [r3, #12]
 8009d62:	3b01      	subs	r3, #1
 8009d64:	041b      	lsls	r3, r3, #16
 8009d66:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8009d6a:	431a      	orrs	r2, r3
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	691b      	ldr	r3, [r3, #16]
 8009d70:	3b01      	subs	r3, #1
 8009d72:	061b      	lsls	r3, r3, #24
 8009d74:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8009d78:	4931      	ldr	r1, [pc, #196]	; (8009e40 <RCCEx_PLL2_Config+0x15c>)
 8009d7a:	4313      	orrs	r3, r2
 8009d7c:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8009d7e:	4b30      	ldr	r3, [pc, #192]	; (8009e40 <RCCEx_PLL2_Config+0x15c>)
 8009d80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d82:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	695b      	ldr	r3, [r3, #20]
 8009d8a:	492d      	ldr	r1, [pc, #180]	; (8009e40 <RCCEx_PLL2_Config+0x15c>)
 8009d8c:	4313      	orrs	r3, r2
 8009d8e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8009d90:	4b2b      	ldr	r3, [pc, #172]	; (8009e40 <RCCEx_PLL2_Config+0x15c>)
 8009d92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d94:	f023 0220 	bic.w	r2, r3, #32
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	699b      	ldr	r3, [r3, #24]
 8009d9c:	4928      	ldr	r1, [pc, #160]	; (8009e40 <RCCEx_PLL2_Config+0x15c>)
 8009d9e:	4313      	orrs	r3, r2
 8009da0:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8009da2:	4b27      	ldr	r3, [pc, #156]	; (8009e40 <RCCEx_PLL2_Config+0x15c>)
 8009da4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009da6:	4a26      	ldr	r2, [pc, #152]	; (8009e40 <RCCEx_PLL2_Config+0x15c>)
 8009da8:	f023 0310 	bic.w	r3, r3, #16
 8009dac:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8009dae:	4b24      	ldr	r3, [pc, #144]	; (8009e40 <RCCEx_PLL2_Config+0x15c>)
 8009db0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009db2:	4b24      	ldr	r3, [pc, #144]	; (8009e44 <RCCEx_PLL2_Config+0x160>)
 8009db4:	4013      	ands	r3, r2
 8009db6:	687a      	ldr	r2, [r7, #4]
 8009db8:	69d2      	ldr	r2, [r2, #28]
 8009dba:	00d2      	lsls	r2, r2, #3
 8009dbc:	4920      	ldr	r1, [pc, #128]	; (8009e40 <RCCEx_PLL2_Config+0x15c>)
 8009dbe:	4313      	orrs	r3, r2
 8009dc0:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8009dc2:	4b1f      	ldr	r3, [pc, #124]	; (8009e40 <RCCEx_PLL2_Config+0x15c>)
 8009dc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009dc6:	4a1e      	ldr	r2, [pc, #120]	; (8009e40 <RCCEx_PLL2_Config+0x15c>)
 8009dc8:	f043 0310 	orr.w	r3, r3, #16
 8009dcc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8009dce:	683b      	ldr	r3, [r7, #0]
 8009dd0:	2b00      	cmp	r3, #0
 8009dd2:	d106      	bne.n	8009de2 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8009dd4:	4b1a      	ldr	r3, [pc, #104]	; (8009e40 <RCCEx_PLL2_Config+0x15c>)
 8009dd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009dd8:	4a19      	ldr	r2, [pc, #100]	; (8009e40 <RCCEx_PLL2_Config+0x15c>)
 8009dda:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009dde:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009de0:	e00f      	b.n	8009e02 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8009de2:	683b      	ldr	r3, [r7, #0]
 8009de4:	2b01      	cmp	r3, #1
 8009de6:	d106      	bne.n	8009df6 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8009de8:	4b15      	ldr	r3, [pc, #84]	; (8009e40 <RCCEx_PLL2_Config+0x15c>)
 8009dea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009dec:	4a14      	ldr	r2, [pc, #80]	; (8009e40 <RCCEx_PLL2_Config+0x15c>)
 8009dee:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009df2:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009df4:	e005      	b.n	8009e02 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8009df6:	4b12      	ldr	r3, [pc, #72]	; (8009e40 <RCCEx_PLL2_Config+0x15c>)
 8009df8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009dfa:	4a11      	ldr	r2, [pc, #68]	; (8009e40 <RCCEx_PLL2_Config+0x15c>)
 8009dfc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8009e00:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8009e02:	4b0f      	ldr	r3, [pc, #60]	; (8009e40 <RCCEx_PLL2_Config+0x15c>)
 8009e04:	681b      	ldr	r3, [r3, #0]
 8009e06:	4a0e      	ldr	r2, [pc, #56]	; (8009e40 <RCCEx_PLL2_Config+0x15c>)
 8009e08:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8009e0c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009e0e:	f7fc fc93 	bl	8006738 <HAL_GetTick>
 8009e12:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8009e14:	e008      	b.n	8009e28 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8009e16:	f7fc fc8f 	bl	8006738 <HAL_GetTick>
 8009e1a:	4602      	mov	r2, r0
 8009e1c:	68bb      	ldr	r3, [r7, #8]
 8009e1e:	1ad3      	subs	r3, r2, r3
 8009e20:	2b02      	cmp	r3, #2
 8009e22:	d901      	bls.n	8009e28 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8009e24:	2303      	movs	r3, #3
 8009e26:	e006      	b.n	8009e36 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8009e28:	4b05      	ldr	r3, [pc, #20]	; (8009e40 <RCCEx_PLL2_Config+0x15c>)
 8009e2a:	681b      	ldr	r3, [r3, #0]
 8009e2c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009e30:	2b00      	cmp	r3, #0
 8009e32:	d0f0      	beq.n	8009e16 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8009e34:	7bfb      	ldrb	r3, [r7, #15]
}
 8009e36:	4618      	mov	r0, r3
 8009e38:	3710      	adds	r7, #16
 8009e3a:	46bd      	mov	sp, r7
 8009e3c:	bd80      	pop	{r7, pc}
 8009e3e:	bf00      	nop
 8009e40:	58024400 	.word	0x58024400
 8009e44:	ffff0007 	.word	0xffff0007

08009e48 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8009e48:	b580      	push	{r7, lr}
 8009e4a:	b084      	sub	sp, #16
 8009e4c:	af00      	add	r7, sp, #0
 8009e4e:	6078      	str	r0, [r7, #4]
 8009e50:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009e52:	2300      	movs	r3, #0
 8009e54:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8009e56:	4b53      	ldr	r3, [pc, #332]	; (8009fa4 <RCCEx_PLL3_Config+0x15c>)
 8009e58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009e5a:	f003 0303 	and.w	r3, r3, #3
 8009e5e:	2b03      	cmp	r3, #3
 8009e60:	d101      	bne.n	8009e66 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8009e62:	2301      	movs	r3, #1
 8009e64:	e099      	b.n	8009f9a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8009e66:	4b4f      	ldr	r3, [pc, #316]	; (8009fa4 <RCCEx_PLL3_Config+0x15c>)
 8009e68:	681b      	ldr	r3, [r3, #0]
 8009e6a:	4a4e      	ldr	r2, [pc, #312]	; (8009fa4 <RCCEx_PLL3_Config+0x15c>)
 8009e6c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009e70:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009e72:	f7fc fc61 	bl	8006738 <HAL_GetTick>
 8009e76:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009e78:	e008      	b.n	8009e8c <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8009e7a:	f7fc fc5d 	bl	8006738 <HAL_GetTick>
 8009e7e:	4602      	mov	r2, r0
 8009e80:	68bb      	ldr	r3, [r7, #8]
 8009e82:	1ad3      	subs	r3, r2, r3
 8009e84:	2b02      	cmp	r3, #2
 8009e86:	d901      	bls.n	8009e8c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8009e88:	2303      	movs	r3, #3
 8009e8a:	e086      	b.n	8009f9a <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009e8c:	4b45      	ldr	r3, [pc, #276]	; (8009fa4 <RCCEx_PLL3_Config+0x15c>)
 8009e8e:	681b      	ldr	r3, [r3, #0]
 8009e90:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009e94:	2b00      	cmp	r3, #0
 8009e96:	d1f0      	bne.n	8009e7a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8009e98:	4b42      	ldr	r3, [pc, #264]	; (8009fa4 <RCCEx_PLL3_Config+0x15c>)
 8009e9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009e9c:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	681b      	ldr	r3, [r3, #0]
 8009ea4:	051b      	lsls	r3, r3, #20
 8009ea6:	493f      	ldr	r1, [pc, #252]	; (8009fa4 <RCCEx_PLL3_Config+0x15c>)
 8009ea8:	4313      	orrs	r3, r2
 8009eaa:	628b      	str	r3, [r1, #40]	; 0x28
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	685b      	ldr	r3, [r3, #4]
 8009eb0:	3b01      	subs	r3, #1
 8009eb2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	689b      	ldr	r3, [r3, #8]
 8009eba:	3b01      	subs	r3, #1
 8009ebc:	025b      	lsls	r3, r3, #9
 8009ebe:	b29b      	uxth	r3, r3
 8009ec0:	431a      	orrs	r2, r3
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	68db      	ldr	r3, [r3, #12]
 8009ec6:	3b01      	subs	r3, #1
 8009ec8:	041b      	lsls	r3, r3, #16
 8009eca:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8009ece:	431a      	orrs	r2, r3
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	691b      	ldr	r3, [r3, #16]
 8009ed4:	3b01      	subs	r3, #1
 8009ed6:	061b      	lsls	r3, r3, #24
 8009ed8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8009edc:	4931      	ldr	r1, [pc, #196]	; (8009fa4 <RCCEx_PLL3_Config+0x15c>)
 8009ede:	4313      	orrs	r3, r2
 8009ee0:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8009ee2:	4b30      	ldr	r3, [pc, #192]	; (8009fa4 <RCCEx_PLL3_Config+0x15c>)
 8009ee4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ee6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	695b      	ldr	r3, [r3, #20]
 8009eee:	492d      	ldr	r1, [pc, #180]	; (8009fa4 <RCCEx_PLL3_Config+0x15c>)
 8009ef0:	4313      	orrs	r3, r2
 8009ef2:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8009ef4:	4b2b      	ldr	r3, [pc, #172]	; (8009fa4 <RCCEx_PLL3_Config+0x15c>)
 8009ef6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ef8:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	699b      	ldr	r3, [r3, #24]
 8009f00:	4928      	ldr	r1, [pc, #160]	; (8009fa4 <RCCEx_PLL3_Config+0x15c>)
 8009f02:	4313      	orrs	r3, r2
 8009f04:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8009f06:	4b27      	ldr	r3, [pc, #156]	; (8009fa4 <RCCEx_PLL3_Config+0x15c>)
 8009f08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f0a:	4a26      	ldr	r2, [pc, #152]	; (8009fa4 <RCCEx_PLL3_Config+0x15c>)
 8009f0c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009f10:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8009f12:	4b24      	ldr	r3, [pc, #144]	; (8009fa4 <RCCEx_PLL3_Config+0x15c>)
 8009f14:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009f16:	4b24      	ldr	r3, [pc, #144]	; (8009fa8 <RCCEx_PLL3_Config+0x160>)
 8009f18:	4013      	ands	r3, r2
 8009f1a:	687a      	ldr	r2, [r7, #4]
 8009f1c:	69d2      	ldr	r2, [r2, #28]
 8009f1e:	00d2      	lsls	r2, r2, #3
 8009f20:	4920      	ldr	r1, [pc, #128]	; (8009fa4 <RCCEx_PLL3_Config+0x15c>)
 8009f22:	4313      	orrs	r3, r2
 8009f24:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8009f26:	4b1f      	ldr	r3, [pc, #124]	; (8009fa4 <RCCEx_PLL3_Config+0x15c>)
 8009f28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f2a:	4a1e      	ldr	r2, [pc, #120]	; (8009fa4 <RCCEx_PLL3_Config+0x15c>)
 8009f2c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009f30:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8009f32:	683b      	ldr	r3, [r7, #0]
 8009f34:	2b00      	cmp	r3, #0
 8009f36:	d106      	bne.n	8009f46 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8009f38:	4b1a      	ldr	r3, [pc, #104]	; (8009fa4 <RCCEx_PLL3_Config+0x15c>)
 8009f3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f3c:	4a19      	ldr	r2, [pc, #100]	; (8009fa4 <RCCEx_PLL3_Config+0x15c>)
 8009f3e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8009f42:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009f44:	e00f      	b.n	8009f66 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8009f46:	683b      	ldr	r3, [r7, #0]
 8009f48:	2b01      	cmp	r3, #1
 8009f4a:	d106      	bne.n	8009f5a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8009f4c:	4b15      	ldr	r3, [pc, #84]	; (8009fa4 <RCCEx_PLL3_Config+0x15c>)
 8009f4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f50:	4a14      	ldr	r2, [pc, #80]	; (8009fa4 <RCCEx_PLL3_Config+0x15c>)
 8009f52:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8009f56:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009f58:	e005      	b.n	8009f66 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8009f5a:	4b12      	ldr	r3, [pc, #72]	; (8009fa4 <RCCEx_PLL3_Config+0x15c>)
 8009f5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f5e:	4a11      	ldr	r2, [pc, #68]	; (8009fa4 <RCCEx_PLL3_Config+0x15c>)
 8009f60:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009f64:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8009f66:	4b0f      	ldr	r3, [pc, #60]	; (8009fa4 <RCCEx_PLL3_Config+0x15c>)
 8009f68:	681b      	ldr	r3, [r3, #0]
 8009f6a:	4a0e      	ldr	r2, [pc, #56]	; (8009fa4 <RCCEx_PLL3_Config+0x15c>)
 8009f6c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009f70:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009f72:	f7fc fbe1 	bl	8006738 <HAL_GetTick>
 8009f76:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009f78:	e008      	b.n	8009f8c <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8009f7a:	f7fc fbdd 	bl	8006738 <HAL_GetTick>
 8009f7e:	4602      	mov	r2, r0
 8009f80:	68bb      	ldr	r3, [r7, #8]
 8009f82:	1ad3      	subs	r3, r2, r3
 8009f84:	2b02      	cmp	r3, #2
 8009f86:	d901      	bls.n	8009f8c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8009f88:	2303      	movs	r3, #3
 8009f8a:	e006      	b.n	8009f9a <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009f8c:	4b05      	ldr	r3, [pc, #20]	; (8009fa4 <RCCEx_PLL3_Config+0x15c>)
 8009f8e:	681b      	ldr	r3, [r3, #0]
 8009f90:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009f94:	2b00      	cmp	r3, #0
 8009f96:	d0f0      	beq.n	8009f7a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8009f98:	7bfb      	ldrb	r3, [r7, #15]
}
 8009f9a:	4618      	mov	r0, r3
 8009f9c:	3710      	adds	r7, #16
 8009f9e:	46bd      	mov	sp, r7
 8009fa0:	bd80      	pop	{r7, pc}
 8009fa2:	bf00      	nop
 8009fa4:	58024400 	.word	0x58024400
 8009fa8:	ffff0007 	.word	0xffff0007

08009fac <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009fac:	b580      	push	{r7, lr}
 8009fae:	b082      	sub	sp, #8
 8009fb0:	af00      	add	r7, sp, #0
 8009fb2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	2b00      	cmp	r3, #0
 8009fb8:	d101      	bne.n	8009fbe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009fba:	2301      	movs	r3, #1
 8009fbc:	e049      	b.n	800a052 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009fc4:	b2db      	uxtb	r3, r3
 8009fc6:	2b00      	cmp	r3, #0
 8009fc8:	d106      	bne.n	8009fd8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	2200      	movs	r2, #0
 8009fce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009fd2:	6878      	ldr	r0, [r7, #4]
 8009fd4:	f7fa f9ea 	bl	80043ac <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	2202      	movs	r2, #2
 8009fdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	681a      	ldr	r2, [r3, #0]
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	3304      	adds	r3, #4
 8009fe8:	4619      	mov	r1, r3
 8009fea:	4610      	mov	r0, r2
 8009fec:	f001 f982 	bl	800b2f4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	2201      	movs	r2, #1
 8009ff4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	2201      	movs	r2, #1
 8009ffc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	2201      	movs	r2, #1
 800a004:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	2201      	movs	r2, #1
 800a00c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	2201      	movs	r2, #1
 800a014:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	2201      	movs	r2, #1
 800a01c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	2201      	movs	r2, #1
 800a024:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	2201      	movs	r2, #1
 800a02c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	2201      	movs	r2, #1
 800a034:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	2201      	movs	r2, #1
 800a03c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	2201      	movs	r2, #1
 800a044:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	2201      	movs	r2, #1
 800a04c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a050:	2300      	movs	r3, #0
}
 800a052:	4618      	mov	r0, r3
 800a054:	3708      	adds	r7, #8
 800a056:	46bd      	mov	sp, r7
 800a058:	bd80      	pop	{r7, pc}
	...

0800a05c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800a05c:	b480      	push	{r7}
 800a05e:	b085      	sub	sp, #20
 800a060:	af00      	add	r7, sp, #0
 800a062:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a06a:	b2db      	uxtb	r3, r3
 800a06c:	2b01      	cmp	r3, #1
 800a06e:	d001      	beq.n	800a074 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800a070:	2301      	movs	r3, #1
 800a072:	e04c      	b.n	800a10e <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	2202      	movs	r2, #2
 800a078:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	681b      	ldr	r3, [r3, #0]
 800a080:	4a26      	ldr	r2, [pc, #152]	; (800a11c <HAL_TIM_Base_Start+0xc0>)
 800a082:	4293      	cmp	r3, r2
 800a084:	d022      	beq.n	800a0cc <HAL_TIM_Base_Start+0x70>
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	681b      	ldr	r3, [r3, #0]
 800a08a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a08e:	d01d      	beq.n	800a0cc <HAL_TIM_Base_Start+0x70>
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	681b      	ldr	r3, [r3, #0]
 800a094:	4a22      	ldr	r2, [pc, #136]	; (800a120 <HAL_TIM_Base_Start+0xc4>)
 800a096:	4293      	cmp	r3, r2
 800a098:	d018      	beq.n	800a0cc <HAL_TIM_Base_Start+0x70>
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	681b      	ldr	r3, [r3, #0]
 800a09e:	4a21      	ldr	r2, [pc, #132]	; (800a124 <HAL_TIM_Base_Start+0xc8>)
 800a0a0:	4293      	cmp	r3, r2
 800a0a2:	d013      	beq.n	800a0cc <HAL_TIM_Base_Start+0x70>
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	681b      	ldr	r3, [r3, #0]
 800a0a8:	4a1f      	ldr	r2, [pc, #124]	; (800a128 <HAL_TIM_Base_Start+0xcc>)
 800a0aa:	4293      	cmp	r3, r2
 800a0ac:	d00e      	beq.n	800a0cc <HAL_TIM_Base_Start+0x70>
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	681b      	ldr	r3, [r3, #0]
 800a0b2:	4a1e      	ldr	r2, [pc, #120]	; (800a12c <HAL_TIM_Base_Start+0xd0>)
 800a0b4:	4293      	cmp	r3, r2
 800a0b6:	d009      	beq.n	800a0cc <HAL_TIM_Base_Start+0x70>
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	681b      	ldr	r3, [r3, #0]
 800a0bc:	4a1c      	ldr	r2, [pc, #112]	; (800a130 <HAL_TIM_Base_Start+0xd4>)
 800a0be:	4293      	cmp	r3, r2
 800a0c0:	d004      	beq.n	800a0cc <HAL_TIM_Base_Start+0x70>
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	681b      	ldr	r3, [r3, #0]
 800a0c6:	4a1b      	ldr	r2, [pc, #108]	; (800a134 <HAL_TIM_Base_Start+0xd8>)
 800a0c8:	4293      	cmp	r3, r2
 800a0ca:	d115      	bne.n	800a0f8 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	681b      	ldr	r3, [r3, #0]
 800a0d0:	689a      	ldr	r2, [r3, #8]
 800a0d2:	4b19      	ldr	r3, [pc, #100]	; (800a138 <HAL_TIM_Base_Start+0xdc>)
 800a0d4:	4013      	ands	r3, r2
 800a0d6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a0d8:	68fb      	ldr	r3, [r7, #12]
 800a0da:	2b06      	cmp	r3, #6
 800a0dc:	d015      	beq.n	800a10a <HAL_TIM_Base_Start+0xae>
 800a0de:	68fb      	ldr	r3, [r7, #12]
 800a0e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a0e4:	d011      	beq.n	800a10a <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	681b      	ldr	r3, [r3, #0]
 800a0ea:	681a      	ldr	r2, [r3, #0]
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	681b      	ldr	r3, [r3, #0]
 800a0f0:	f042 0201 	orr.w	r2, r2, #1
 800a0f4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a0f6:	e008      	b.n	800a10a <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	681b      	ldr	r3, [r3, #0]
 800a0fc:	681a      	ldr	r2, [r3, #0]
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	681b      	ldr	r3, [r3, #0]
 800a102:	f042 0201 	orr.w	r2, r2, #1
 800a106:	601a      	str	r2, [r3, #0]
 800a108:	e000      	b.n	800a10c <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a10a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800a10c:	2300      	movs	r3, #0
}
 800a10e:	4618      	mov	r0, r3
 800a110:	3714      	adds	r7, #20
 800a112:	46bd      	mov	sp, r7
 800a114:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a118:	4770      	bx	lr
 800a11a:	bf00      	nop
 800a11c:	40010000 	.word	0x40010000
 800a120:	40000400 	.word	0x40000400
 800a124:	40000800 	.word	0x40000800
 800a128:	40000c00 	.word	0x40000c00
 800a12c:	40010400 	.word	0x40010400
 800a130:	40001800 	.word	0x40001800
 800a134:	40014000 	.word	0x40014000
 800a138:	00010007 	.word	0x00010007

0800a13c <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 800a13c:	b480      	push	{r7}
 800a13e:	b083      	sub	sp, #12
 800a140:	af00      	add	r7, sp, #0
 800a142:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	681b      	ldr	r3, [r3, #0]
 800a148:	6a1a      	ldr	r2, [r3, #32]
 800a14a:	f241 1311 	movw	r3, #4369	; 0x1111
 800a14e:	4013      	ands	r3, r2
 800a150:	2b00      	cmp	r3, #0
 800a152:	d10f      	bne.n	800a174 <HAL_TIM_Base_Stop+0x38>
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	681b      	ldr	r3, [r3, #0]
 800a158:	6a1a      	ldr	r2, [r3, #32]
 800a15a:	f240 4344 	movw	r3, #1092	; 0x444
 800a15e:	4013      	ands	r3, r2
 800a160:	2b00      	cmp	r3, #0
 800a162:	d107      	bne.n	800a174 <HAL_TIM_Base_Stop+0x38>
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	681b      	ldr	r3, [r3, #0]
 800a168:	681a      	ldr	r2, [r3, #0]
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	681b      	ldr	r3, [r3, #0]
 800a16e:	f022 0201 	bic.w	r2, r2, #1
 800a172:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	2201      	movs	r2, #1
 800a178:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800a17c:	2300      	movs	r3, #0
}
 800a17e:	4618      	mov	r0, r3
 800a180:	370c      	adds	r7, #12
 800a182:	46bd      	mov	sp, r7
 800a184:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a188:	4770      	bx	lr
	...

0800a18c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800a18c:	b480      	push	{r7}
 800a18e:	b085      	sub	sp, #20
 800a190:	af00      	add	r7, sp, #0
 800a192:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a19a:	b2db      	uxtb	r3, r3
 800a19c:	2b01      	cmp	r3, #1
 800a19e:	d001      	beq.n	800a1a4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800a1a0:	2301      	movs	r3, #1
 800a1a2:	e054      	b.n	800a24e <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	2202      	movs	r2, #2
 800a1a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	681b      	ldr	r3, [r3, #0]
 800a1b0:	68da      	ldr	r2, [r3, #12]
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	681b      	ldr	r3, [r3, #0]
 800a1b6:	f042 0201 	orr.w	r2, r2, #1
 800a1ba:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	681b      	ldr	r3, [r3, #0]
 800a1c0:	4a26      	ldr	r2, [pc, #152]	; (800a25c <HAL_TIM_Base_Start_IT+0xd0>)
 800a1c2:	4293      	cmp	r3, r2
 800a1c4:	d022      	beq.n	800a20c <HAL_TIM_Base_Start_IT+0x80>
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	681b      	ldr	r3, [r3, #0]
 800a1ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a1ce:	d01d      	beq.n	800a20c <HAL_TIM_Base_Start_IT+0x80>
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	681b      	ldr	r3, [r3, #0]
 800a1d4:	4a22      	ldr	r2, [pc, #136]	; (800a260 <HAL_TIM_Base_Start_IT+0xd4>)
 800a1d6:	4293      	cmp	r3, r2
 800a1d8:	d018      	beq.n	800a20c <HAL_TIM_Base_Start_IT+0x80>
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	681b      	ldr	r3, [r3, #0]
 800a1de:	4a21      	ldr	r2, [pc, #132]	; (800a264 <HAL_TIM_Base_Start_IT+0xd8>)
 800a1e0:	4293      	cmp	r3, r2
 800a1e2:	d013      	beq.n	800a20c <HAL_TIM_Base_Start_IT+0x80>
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	681b      	ldr	r3, [r3, #0]
 800a1e8:	4a1f      	ldr	r2, [pc, #124]	; (800a268 <HAL_TIM_Base_Start_IT+0xdc>)
 800a1ea:	4293      	cmp	r3, r2
 800a1ec:	d00e      	beq.n	800a20c <HAL_TIM_Base_Start_IT+0x80>
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	681b      	ldr	r3, [r3, #0]
 800a1f2:	4a1e      	ldr	r2, [pc, #120]	; (800a26c <HAL_TIM_Base_Start_IT+0xe0>)
 800a1f4:	4293      	cmp	r3, r2
 800a1f6:	d009      	beq.n	800a20c <HAL_TIM_Base_Start_IT+0x80>
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	681b      	ldr	r3, [r3, #0]
 800a1fc:	4a1c      	ldr	r2, [pc, #112]	; (800a270 <HAL_TIM_Base_Start_IT+0xe4>)
 800a1fe:	4293      	cmp	r3, r2
 800a200:	d004      	beq.n	800a20c <HAL_TIM_Base_Start_IT+0x80>
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	681b      	ldr	r3, [r3, #0]
 800a206:	4a1b      	ldr	r2, [pc, #108]	; (800a274 <HAL_TIM_Base_Start_IT+0xe8>)
 800a208:	4293      	cmp	r3, r2
 800a20a:	d115      	bne.n	800a238 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	681b      	ldr	r3, [r3, #0]
 800a210:	689a      	ldr	r2, [r3, #8]
 800a212:	4b19      	ldr	r3, [pc, #100]	; (800a278 <HAL_TIM_Base_Start_IT+0xec>)
 800a214:	4013      	ands	r3, r2
 800a216:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a218:	68fb      	ldr	r3, [r7, #12]
 800a21a:	2b06      	cmp	r3, #6
 800a21c:	d015      	beq.n	800a24a <HAL_TIM_Base_Start_IT+0xbe>
 800a21e:	68fb      	ldr	r3, [r7, #12]
 800a220:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a224:	d011      	beq.n	800a24a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	681b      	ldr	r3, [r3, #0]
 800a22a:	681a      	ldr	r2, [r3, #0]
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	681b      	ldr	r3, [r3, #0]
 800a230:	f042 0201 	orr.w	r2, r2, #1
 800a234:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a236:	e008      	b.n	800a24a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	681b      	ldr	r3, [r3, #0]
 800a23c:	681a      	ldr	r2, [r3, #0]
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	681b      	ldr	r3, [r3, #0]
 800a242:	f042 0201 	orr.w	r2, r2, #1
 800a246:	601a      	str	r2, [r3, #0]
 800a248:	e000      	b.n	800a24c <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a24a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800a24c:	2300      	movs	r3, #0
}
 800a24e:	4618      	mov	r0, r3
 800a250:	3714      	adds	r7, #20
 800a252:	46bd      	mov	sp, r7
 800a254:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a258:	4770      	bx	lr
 800a25a:	bf00      	nop
 800a25c:	40010000 	.word	0x40010000
 800a260:	40000400 	.word	0x40000400
 800a264:	40000800 	.word	0x40000800
 800a268:	40000c00 	.word	0x40000c00
 800a26c:	40010400 	.word	0x40010400
 800a270:	40001800 	.word	0x40001800
 800a274:	40014000 	.word	0x40014000
 800a278:	00010007 	.word	0x00010007

0800a27c <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800a27c:	b480      	push	{r7}
 800a27e:	b083      	sub	sp, #12
 800a280:	af00      	add	r7, sp, #0
 800a282:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	681b      	ldr	r3, [r3, #0]
 800a288:	68da      	ldr	r2, [r3, #12]
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	681b      	ldr	r3, [r3, #0]
 800a28e:	f022 0201 	bic.w	r2, r2, #1
 800a292:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	681b      	ldr	r3, [r3, #0]
 800a298:	6a1a      	ldr	r2, [r3, #32]
 800a29a:	f241 1311 	movw	r3, #4369	; 0x1111
 800a29e:	4013      	ands	r3, r2
 800a2a0:	2b00      	cmp	r3, #0
 800a2a2:	d10f      	bne.n	800a2c4 <HAL_TIM_Base_Stop_IT+0x48>
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	681b      	ldr	r3, [r3, #0]
 800a2a8:	6a1a      	ldr	r2, [r3, #32]
 800a2aa:	f240 4344 	movw	r3, #1092	; 0x444
 800a2ae:	4013      	ands	r3, r2
 800a2b0:	2b00      	cmp	r3, #0
 800a2b2:	d107      	bne.n	800a2c4 <HAL_TIM_Base_Stop_IT+0x48>
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	681b      	ldr	r3, [r3, #0]
 800a2b8:	681a      	ldr	r2, [r3, #0]
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	681b      	ldr	r3, [r3, #0]
 800a2be:	f022 0201 	bic.w	r2, r2, #1
 800a2c2:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	2201      	movs	r2, #1
 800a2c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800a2cc:	2300      	movs	r3, #0
}
 800a2ce:	4618      	mov	r0, r3
 800a2d0:	370c      	adds	r7, #12
 800a2d2:	46bd      	mov	sp, r7
 800a2d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2d8:	4770      	bx	lr

0800a2da <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800a2da:	b580      	push	{r7, lr}
 800a2dc:	b082      	sub	sp, #8
 800a2de:	af00      	add	r7, sp, #0
 800a2e0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	2b00      	cmp	r3, #0
 800a2e6:	d101      	bne.n	800a2ec <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800a2e8:	2301      	movs	r3, #1
 800a2ea:	e049      	b.n	800a380 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a2f2:	b2db      	uxtb	r3, r3
 800a2f4:	2b00      	cmp	r3, #0
 800a2f6:	d106      	bne.n	800a306 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	2200      	movs	r2, #0
 800a2fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800a300:	6878      	ldr	r0, [r7, #4]
 800a302:	f000 f841 	bl	800a388 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	2202      	movs	r2, #2
 800a30a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	681a      	ldr	r2, [r3, #0]
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	3304      	adds	r3, #4
 800a316:	4619      	mov	r1, r3
 800a318:	4610      	mov	r0, r2
 800a31a:	f000 ffeb 	bl	800b2f4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	2201      	movs	r2, #1
 800a322:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	2201      	movs	r2, #1
 800a32a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	2201      	movs	r2, #1
 800a332:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	2201      	movs	r2, #1
 800a33a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	2201      	movs	r2, #1
 800a342:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	2201      	movs	r2, #1
 800a34a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	2201      	movs	r2, #1
 800a352:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	2201      	movs	r2, #1
 800a35a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	2201      	movs	r2, #1
 800a362:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	2201      	movs	r2, #1
 800a36a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	2201      	movs	r2, #1
 800a372:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	2201      	movs	r2, #1
 800a37a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a37e:	2300      	movs	r3, #0
}
 800a380:	4618      	mov	r0, r3
 800a382:	3708      	adds	r7, #8
 800a384:	46bd      	mov	sp, r7
 800a386:	bd80      	pop	{r7, pc}

0800a388 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800a388:	b480      	push	{r7}
 800a38a:	b083      	sub	sp, #12
 800a38c:	af00      	add	r7, sp, #0
 800a38e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800a390:	bf00      	nop
 800a392:	370c      	adds	r7, #12
 800a394:	46bd      	mov	sp, r7
 800a396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a39a:	4770      	bx	lr

0800a39c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800a39c:	b580      	push	{r7, lr}
 800a39e:	b084      	sub	sp, #16
 800a3a0:	af00      	add	r7, sp, #0
 800a3a2:	6078      	str	r0, [r7, #4]
 800a3a4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800a3a6:	683b      	ldr	r3, [r7, #0]
 800a3a8:	2b00      	cmp	r3, #0
 800a3aa:	d109      	bne.n	800a3c0 <HAL_TIM_PWM_Start+0x24>
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a3b2:	b2db      	uxtb	r3, r3
 800a3b4:	2b01      	cmp	r3, #1
 800a3b6:	bf14      	ite	ne
 800a3b8:	2301      	movne	r3, #1
 800a3ba:	2300      	moveq	r3, #0
 800a3bc:	b2db      	uxtb	r3, r3
 800a3be:	e03c      	b.n	800a43a <HAL_TIM_PWM_Start+0x9e>
 800a3c0:	683b      	ldr	r3, [r7, #0]
 800a3c2:	2b04      	cmp	r3, #4
 800a3c4:	d109      	bne.n	800a3da <HAL_TIM_PWM_Start+0x3e>
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800a3cc:	b2db      	uxtb	r3, r3
 800a3ce:	2b01      	cmp	r3, #1
 800a3d0:	bf14      	ite	ne
 800a3d2:	2301      	movne	r3, #1
 800a3d4:	2300      	moveq	r3, #0
 800a3d6:	b2db      	uxtb	r3, r3
 800a3d8:	e02f      	b.n	800a43a <HAL_TIM_PWM_Start+0x9e>
 800a3da:	683b      	ldr	r3, [r7, #0]
 800a3dc:	2b08      	cmp	r3, #8
 800a3de:	d109      	bne.n	800a3f4 <HAL_TIM_PWM_Start+0x58>
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800a3e6:	b2db      	uxtb	r3, r3
 800a3e8:	2b01      	cmp	r3, #1
 800a3ea:	bf14      	ite	ne
 800a3ec:	2301      	movne	r3, #1
 800a3ee:	2300      	moveq	r3, #0
 800a3f0:	b2db      	uxtb	r3, r3
 800a3f2:	e022      	b.n	800a43a <HAL_TIM_PWM_Start+0x9e>
 800a3f4:	683b      	ldr	r3, [r7, #0]
 800a3f6:	2b0c      	cmp	r3, #12
 800a3f8:	d109      	bne.n	800a40e <HAL_TIM_PWM_Start+0x72>
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a400:	b2db      	uxtb	r3, r3
 800a402:	2b01      	cmp	r3, #1
 800a404:	bf14      	ite	ne
 800a406:	2301      	movne	r3, #1
 800a408:	2300      	moveq	r3, #0
 800a40a:	b2db      	uxtb	r3, r3
 800a40c:	e015      	b.n	800a43a <HAL_TIM_PWM_Start+0x9e>
 800a40e:	683b      	ldr	r3, [r7, #0]
 800a410:	2b10      	cmp	r3, #16
 800a412:	d109      	bne.n	800a428 <HAL_TIM_PWM_Start+0x8c>
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800a41a:	b2db      	uxtb	r3, r3
 800a41c:	2b01      	cmp	r3, #1
 800a41e:	bf14      	ite	ne
 800a420:	2301      	movne	r3, #1
 800a422:	2300      	moveq	r3, #0
 800a424:	b2db      	uxtb	r3, r3
 800a426:	e008      	b.n	800a43a <HAL_TIM_PWM_Start+0x9e>
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800a42e:	b2db      	uxtb	r3, r3
 800a430:	2b01      	cmp	r3, #1
 800a432:	bf14      	ite	ne
 800a434:	2301      	movne	r3, #1
 800a436:	2300      	moveq	r3, #0
 800a438:	b2db      	uxtb	r3, r3
 800a43a:	2b00      	cmp	r3, #0
 800a43c:	d001      	beq.n	800a442 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800a43e:	2301      	movs	r3, #1
 800a440:	e0a1      	b.n	800a586 <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800a442:	683b      	ldr	r3, [r7, #0]
 800a444:	2b00      	cmp	r3, #0
 800a446:	d104      	bne.n	800a452 <HAL_TIM_PWM_Start+0xb6>
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	2202      	movs	r2, #2
 800a44c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a450:	e023      	b.n	800a49a <HAL_TIM_PWM_Start+0xfe>
 800a452:	683b      	ldr	r3, [r7, #0]
 800a454:	2b04      	cmp	r3, #4
 800a456:	d104      	bne.n	800a462 <HAL_TIM_PWM_Start+0xc6>
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	2202      	movs	r2, #2
 800a45c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a460:	e01b      	b.n	800a49a <HAL_TIM_PWM_Start+0xfe>
 800a462:	683b      	ldr	r3, [r7, #0]
 800a464:	2b08      	cmp	r3, #8
 800a466:	d104      	bne.n	800a472 <HAL_TIM_PWM_Start+0xd6>
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	2202      	movs	r2, #2
 800a46c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a470:	e013      	b.n	800a49a <HAL_TIM_PWM_Start+0xfe>
 800a472:	683b      	ldr	r3, [r7, #0]
 800a474:	2b0c      	cmp	r3, #12
 800a476:	d104      	bne.n	800a482 <HAL_TIM_PWM_Start+0xe6>
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	2202      	movs	r2, #2
 800a47c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a480:	e00b      	b.n	800a49a <HAL_TIM_PWM_Start+0xfe>
 800a482:	683b      	ldr	r3, [r7, #0]
 800a484:	2b10      	cmp	r3, #16
 800a486:	d104      	bne.n	800a492 <HAL_TIM_PWM_Start+0xf6>
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	2202      	movs	r2, #2
 800a48c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a490:	e003      	b.n	800a49a <HAL_TIM_PWM_Start+0xfe>
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	2202      	movs	r2, #2
 800a496:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	681b      	ldr	r3, [r3, #0]
 800a49e:	2201      	movs	r2, #1
 800a4a0:	6839      	ldr	r1, [r7, #0]
 800a4a2:	4618      	mov	r0, r3
 800a4a4:	f001 fc5e 	bl	800bd64 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	681b      	ldr	r3, [r3, #0]
 800a4ac:	4a38      	ldr	r2, [pc, #224]	; (800a590 <HAL_TIM_PWM_Start+0x1f4>)
 800a4ae:	4293      	cmp	r3, r2
 800a4b0:	d013      	beq.n	800a4da <HAL_TIM_PWM_Start+0x13e>
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	681b      	ldr	r3, [r3, #0]
 800a4b6:	4a37      	ldr	r2, [pc, #220]	; (800a594 <HAL_TIM_PWM_Start+0x1f8>)
 800a4b8:	4293      	cmp	r3, r2
 800a4ba:	d00e      	beq.n	800a4da <HAL_TIM_PWM_Start+0x13e>
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	681b      	ldr	r3, [r3, #0]
 800a4c0:	4a35      	ldr	r2, [pc, #212]	; (800a598 <HAL_TIM_PWM_Start+0x1fc>)
 800a4c2:	4293      	cmp	r3, r2
 800a4c4:	d009      	beq.n	800a4da <HAL_TIM_PWM_Start+0x13e>
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	681b      	ldr	r3, [r3, #0]
 800a4ca:	4a34      	ldr	r2, [pc, #208]	; (800a59c <HAL_TIM_PWM_Start+0x200>)
 800a4cc:	4293      	cmp	r3, r2
 800a4ce:	d004      	beq.n	800a4da <HAL_TIM_PWM_Start+0x13e>
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	681b      	ldr	r3, [r3, #0]
 800a4d4:	4a32      	ldr	r2, [pc, #200]	; (800a5a0 <HAL_TIM_PWM_Start+0x204>)
 800a4d6:	4293      	cmp	r3, r2
 800a4d8:	d101      	bne.n	800a4de <HAL_TIM_PWM_Start+0x142>
 800a4da:	2301      	movs	r3, #1
 800a4dc:	e000      	b.n	800a4e0 <HAL_TIM_PWM_Start+0x144>
 800a4de:	2300      	movs	r3, #0
 800a4e0:	2b00      	cmp	r3, #0
 800a4e2:	d007      	beq.n	800a4f4 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	681b      	ldr	r3, [r3, #0]
 800a4e8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	681b      	ldr	r3, [r3, #0]
 800a4ee:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800a4f2:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	681b      	ldr	r3, [r3, #0]
 800a4f8:	4a25      	ldr	r2, [pc, #148]	; (800a590 <HAL_TIM_PWM_Start+0x1f4>)
 800a4fa:	4293      	cmp	r3, r2
 800a4fc:	d022      	beq.n	800a544 <HAL_TIM_PWM_Start+0x1a8>
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	681b      	ldr	r3, [r3, #0]
 800a502:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a506:	d01d      	beq.n	800a544 <HAL_TIM_PWM_Start+0x1a8>
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	681b      	ldr	r3, [r3, #0]
 800a50c:	4a25      	ldr	r2, [pc, #148]	; (800a5a4 <HAL_TIM_PWM_Start+0x208>)
 800a50e:	4293      	cmp	r3, r2
 800a510:	d018      	beq.n	800a544 <HAL_TIM_PWM_Start+0x1a8>
 800a512:	687b      	ldr	r3, [r7, #4]
 800a514:	681b      	ldr	r3, [r3, #0]
 800a516:	4a24      	ldr	r2, [pc, #144]	; (800a5a8 <HAL_TIM_PWM_Start+0x20c>)
 800a518:	4293      	cmp	r3, r2
 800a51a:	d013      	beq.n	800a544 <HAL_TIM_PWM_Start+0x1a8>
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	681b      	ldr	r3, [r3, #0]
 800a520:	4a22      	ldr	r2, [pc, #136]	; (800a5ac <HAL_TIM_PWM_Start+0x210>)
 800a522:	4293      	cmp	r3, r2
 800a524:	d00e      	beq.n	800a544 <HAL_TIM_PWM_Start+0x1a8>
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	681b      	ldr	r3, [r3, #0]
 800a52a:	4a1a      	ldr	r2, [pc, #104]	; (800a594 <HAL_TIM_PWM_Start+0x1f8>)
 800a52c:	4293      	cmp	r3, r2
 800a52e:	d009      	beq.n	800a544 <HAL_TIM_PWM_Start+0x1a8>
 800a530:	687b      	ldr	r3, [r7, #4]
 800a532:	681b      	ldr	r3, [r3, #0]
 800a534:	4a1e      	ldr	r2, [pc, #120]	; (800a5b0 <HAL_TIM_PWM_Start+0x214>)
 800a536:	4293      	cmp	r3, r2
 800a538:	d004      	beq.n	800a544 <HAL_TIM_PWM_Start+0x1a8>
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	681b      	ldr	r3, [r3, #0]
 800a53e:	4a16      	ldr	r2, [pc, #88]	; (800a598 <HAL_TIM_PWM_Start+0x1fc>)
 800a540:	4293      	cmp	r3, r2
 800a542:	d115      	bne.n	800a570 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	681b      	ldr	r3, [r3, #0]
 800a548:	689a      	ldr	r2, [r3, #8]
 800a54a:	4b1a      	ldr	r3, [pc, #104]	; (800a5b4 <HAL_TIM_PWM_Start+0x218>)
 800a54c:	4013      	ands	r3, r2
 800a54e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a550:	68fb      	ldr	r3, [r7, #12]
 800a552:	2b06      	cmp	r3, #6
 800a554:	d015      	beq.n	800a582 <HAL_TIM_PWM_Start+0x1e6>
 800a556:	68fb      	ldr	r3, [r7, #12]
 800a558:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a55c:	d011      	beq.n	800a582 <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	681b      	ldr	r3, [r3, #0]
 800a562:	681a      	ldr	r2, [r3, #0]
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	681b      	ldr	r3, [r3, #0]
 800a568:	f042 0201 	orr.w	r2, r2, #1
 800a56c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a56e:	e008      	b.n	800a582 <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	681b      	ldr	r3, [r3, #0]
 800a574:	681a      	ldr	r2, [r3, #0]
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	681b      	ldr	r3, [r3, #0]
 800a57a:	f042 0201 	orr.w	r2, r2, #1
 800a57e:	601a      	str	r2, [r3, #0]
 800a580:	e000      	b.n	800a584 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a582:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800a584:	2300      	movs	r3, #0
}
 800a586:	4618      	mov	r0, r3
 800a588:	3710      	adds	r7, #16
 800a58a:	46bd      	mov	sp, r7
 800a58c:	bd80      	pop	{r7, pc}
 800a58e:	bf00      	nop
 800a590:	40010000 	.word	0x40010000
 800a594:	40010400 	.word	0x40010400
 800a598:	40014000 	.word	0x40014000
 800a59c:	40014400 	.word	0x40014400
 800a5a0:	40014800 	.word	0x40014800
 800a5a4:	40000400 	.word	0x40000400
 800a5a8:	40000800 	.word	0x40000800
 800a5ac:	40000c00 	.word	0x40000c00
 800a5b0:	40001800 	.word	0x40001800
 800a5b4:	00010007 	.word	0x00010007

0800a5b8 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800a5b8:	b580      	push	{r7, lr}
 800a5ba:	b082      	sub	sp, #8
 800a5bc:	af00      	add	r7, sp, #0
 800a5be:	6078      	str	r0, [r7, #4]
 800a5c0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	681b      	ldr	r3, [r3, #0]
 800a5c6:	2200      	movs	r2, #0
 800a5c8:	6839      	ldr	r1, [r7, #0]
 800a5ca:	4618      	mov	r0, r3
 800a5cc:	f001 fbca 	bl	800bd64 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	681b      	ldr	r3, [r3, #0]
 800a5d4:	4a3e      	ldr	r2, [pc, #248]	; (800a6d0 <HAL_TIM_PWM_Stop+0x118>)
 800a5d6:	4293      	cmp	r3, r2
 800a5d8:	d013      	beq.n	800a602 <HAL_TIM_PWM_Stop+0x4a>
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	681b      	ldr	r3, [r3, #0]
 800a5de:	4a3d      	ldr	r2, [pc, #244]	; (800a6d4 <HAL_TIM_PWM_Stop+0x11c>)
 800a5e0:	4293      	cmp	r3, r2
 800a5e2:	d00e      	beq.n	800a602 <HAL_TIM_PWM_Stop+0x4a>
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	681b      	ldr	r3, [r3, #0]
 800a5e8:	4a3b      	ldr	r2, [pc, #236]	; (800a6d8 <HAL_TIM_PWM_Stop+0x120>)
 800a5ea:	4293      	cmp	r3, r2
 800a5ec:	d009      	beq.n	800a602 <HAL_TIM_PWM_Stop+0x4a>
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	681b      	ldr	r3, [r3, #0]
 800a5f2:	4a3a      	ldr	r2, [pc, #232]	; (800a6dc <HAL_TIM_PWM_Stop+0x124>)
 800a5f4:	4293      	cmp	r3, r2
 800a5f6:	d004      	beq.n	800a602 <HAL_TIM_PWM_Stop+0x4a>
 800a5f8:	687b      	ldr	r3, [r7, #4]
 800a5fa:	681b      	ldr	r3, [r3, #0]
 800a5fc:	4a38      	ldr	r2, [pc, #224]	; (800a6e0 <HAL_TIM_PWM_Stop+0x128>)
 800a5fe:	4293      	cmp	r3, r2
 800a600:	d101      	bne.n	800a606 <HAL_TIM_PWM_Stop+0x4e>
 800a602:	2301      	movs	r3, #1
 800a604:	e000      	b.n	800a608 <HAL_TIM_PWM_Stop+0x50>
 800a606:	2300      	movs	r3, #0
 800a608:	2b00      	cmp	r3, #0
 800a60a:	d017      	beq.n	800a63c <HAL_TIM_PWM_Stop+0x84>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	681b      	ldr	r3, [r3, #0]
 800a610:	6a1a      	ldr	r2, [r3, #32]
 800a612:	f241 1311 	movw	r3, #4369	; 0x1111
 800a616:	4013      	ands	r3, r2
 800a618:	2b00      	cmp	r3, #0
 800a61a:	d10f      	bne.n	800a63c <HAL_TIM_PWM_Stop+0x84>
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	681b      	ldr	r3, [r3, #0]
 800a620:	6a1a      	ldr	r2, [r3, #32]
 800a622:	f240 4344 	movw	r3, #1092	; 0x444
 800a626:	4013      	ands	r3, r2
 800a628:	2b00      	cmp	r3, #0
 800a62a:	d107      	bne.n	800a63c <HAL_TIM_PWM_Stop+0x84>
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	681b      	ldr	r3, [r3, #0]
 800a630:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	681b      	ldr	r3, [r3, #0]
 800a636:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800a63a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	681b      	ldr	r3, [r3, #0]
 800a640:	6a1a      	ldr	r2, [r3, #32]
 800a642:	f241 1311 	movw	r3, #4369	; 0x1111
 800a646:	4013      	ands	r3, r2
 800a648:	2b00      	cmp	r3, #0
 800a64a:	d10f      	bne.n	800a66c <HAL_TIM_PWM_Stop+0xb4>
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	681b      	ldr	r3, [r3, #0]
 800a650:	6a1a      	ldr	r2, [r3, #32]
 800a652:	f240 4344 	movw	r3, #1092	; 0x444
 800a656:	4013      	ands	r3, r2
 800a658:	2b00      	cmp	r3, #0
 800a65a:	d107      	bne.n	800a66c <HAL_TIM_PWM_Stop+0xb4>
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	681b      	ldr	r3, [r3, #0]
 800a660:	681a      	ldr	r2, [r3, #0]
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	681b      	ldr	r3, [r3, #0]
 800a666:	f022 0201 	bic.w	r2, r2, #1
 800a66a:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800a66c:	683b      	ldr	r3, [r7, #0]
 800a66e:	2b00      	cmp	r3, #0
 800a670:	d104      	bne.n	800a67c <HAL_TIM_PWM_Stop+0xc4>
 800a672:	687b      	ldr	r3, [r7, #4]
 800a674:	2201      	movs	r2, #1
 800a676:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a67a:	e023      	b.n	800a6c4 <HAL_TIM_PWM_Stop+0x10c>
 800a67c:	683b      	ldr	r3, [r7, #0]
 800a67e:	2b04      	cmp	r3, #4
 800a680:	d104      	bne.n	800a68c <HAL_TIM_PWM_Stop+0xd4>
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	2201      	movs	r2, #1
 800a686:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a68a:	e01b      	b.n	800a6c4 <HAL_TIM_PWM_Stop+0x10c>
 800a68c:	683b      	ldr	r3, [r7, #0]
 800a68e:	2b08      	cmp	r3, #8
 800a690:	d104      	bne.n	800a69c <HAL_TIM_PWM_Stop+0xe4>
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	2201      	movs	r2, #1
 800a696:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a69a:	e013      	b.n	800a6c4 <HAL_TIM_PWM_Stop+0x10c>
 800a69c:	683b      	ldr	r3, [r7, #0]
 800a69e:	2b0c      	cmp	r3, #12
 800a6a0:	d104      	bne.n	800a6ac <HAL_TIM_PWM_Stop+0xf4>
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	2201      	movs	r2, #1
 800a6a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a6aa:	e00b      	b.n	800a6c4 <HAL_TIM_PWM_Stop+0x10c>
 800a6ac:	683b      	ldr	r3, [r7, #0]
 800a6ae:	2b10      	cmp	r3, #16
 800a6b0:	d104      	bne.n	800a6bc <HAL_TIM_PWM_Stop+0x104>
 800a6b2:	687b      	ldr	r3, [r7, #4]
 800a6b4:	2201      	movs	r2, #1
 800a6b6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a6ba:	e003      	b.n	800a6c4 <HAL_TIM_PWM_Stop+0x10c>
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	2201      	movs	r2, #1
 800a6c0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Return function status */
  return HAL_OK;
 800a6c4:	2300      	movs	r3, #0
}
 800a6c6:	4618      	mov	r0, r3
 800a6c8:	3708      	adds	r7, #8
 800a6ca:	46bd      	mov	sp, r7
 800a6cc:	bd80      	pop	{r7, pc}
 800a6ce:	bf00      	nop
 800a6d0:	40010000 	.word	0x40010000
 800a6d4:	40010400 	.word	0x40010400
 800a6d8:	40014000 	.word	0x40014000
 800a6dc:	40014400 	.word	0x40014400
 800a6e0:	40014800 	.word	0x40014800

0800a6e4 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 800a6e4:	b580      	push	{r7, lr}
 800a6e6:	b082      	sub	sp, #8
 800a6e8:	af00      	add	r7, sp, #0
 800a6ea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	2b00      	cmp	r3, #0
 800a6f0:	d101      	bne.n	800a6f6 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800a6f2:	2301      	movs	r3, #1
 800a6f4:	e049      	b.n	800a78a <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a6fc:	b2db      	uxtb	r3, r3
 800a6fe:	2b00      	cmp	r3, #0
 800a700:	d106      	bne.n	800a710 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	2200      	movs	r2, #0
 800a706:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800a70a:	6878      	ldr	r0, [r7, #4]
 800a70c:	f000 f841 	bl	800a792 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	2202      	movs	r2, #2
 800a714:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	681a      	ldr	r2, [r3, #0]
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	3304      	adds	r3, #4
 800a720:	4619      	mov	r1, r3
 800a722:	4610      	mov	r0, r2
 800a724:	f000 fde6 	bl	800b2f4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	2201      	movs	r2, #1
 800a72c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	2201      	movs	r2, #1
 800a734:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	2201      	movs	r2, #1
 800a73c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	2201      	movs	r2, #1
 800a744:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	2201      	movs	r2, #1
 800a74c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	2201      	movs	r2, #1
 800a754:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	2201      	movs	r2, #1
 800a75c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	2201      	movs	r2, #1
 800a764:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	2201      	movs	r2, #1
 800a76c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	2201      	movs	r2, #1
 800a774:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	2201      	movs	r2, #1
 800a77c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	2201      	movs	r2, #1
 800a784:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a788:	2300      	movs	r3, #0
}
 800a78a:	4618      	mov	r0, r3
 800a78c:	3708      	adds	r7, #8
 800a78e:	46bd      	mov	sp, r7
 800a790:	bd80      	pop	{r7, pc}

0800a792 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 800a792:	b480      	push	{r7}
 800a794:	b083      	sub	sp, #12
 800a796:	af00      	add	r7, sp, #0
 800a798:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 800a79a:	bf00      	nop
 800a79c:	370c      	adds	r7, #12
 800a79e:	46bd      	mov	sp, r7
 800a7a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7a4:	4770      	bx	lr

0800a7a6 <HAL_TIM_IC_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800a7a6:	b580      	push	{r7, lr}
 800a7a8:	b082      	sub	sp, #8
 800a7aa:	af00      	add	r7, sp, #0
 800a7ac:	6078      	str	r0, [r7, #4]
 800a7ae:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	681b      	ldr	r3, [r3, #0]
 800a7b4:	2200      	movs	r2, #0
 800a7b6:	6839      	ldr	r1, [r7, #0]
 800a7b8:	4618      	mov	r0, r3
 800a7ba:	f001 fad3 	bl	800bd64 <TIM_CCxChannelCmd>

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800a7be:	687b      	ldr	r3, [r7, #4]
 800a7c0:	681b      	ldr	r3, [r3, #0]
 800a7c2:	6a1a      	ldr	r2, [r3, #32]
 800a7c4:	f241 1311 	movw	r3, #4369	; 0x1111
 800a7c8:	4013      	ands	r3, r2
 800a7ca:	2b00      	cmp	r3, #0
 800a7cc:	d10f      	bne.n	800a7ee <HAL_TIM_IC_Stop+0x48>
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	681b      	ldr	r3, [r3, #0]
 800a7d2:	6a1a      	ldr	r2, [r3, #32]
 800a7d4:	f240 4344 	movw	r3, #1092	; 0x444
 800a7d8:	4013      	ands	r3, r2
 800a7da:	2b00      	cmp	r3, #0
 800a7dc:	d107      	bne.n	800a7ee <HAL_TIM_IC_Stop+0x48>
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	681b      	ldr	r3, [r3, #0]
 800a7e2:	681a      	ldr	r2, [r3, #0]
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	681b      	ldr	r3, [r3, #0]
 800a7e8:	f022 0201 	bic.w	r2, r2, #1
 800a7ec:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800a7ee:	683b      	ldr	r3, [r7, #0]
 800a7f0:	2b00      	cmp	r3, #0
 800a7f2:	d104      	bne.n	800a7fe <HAL_TIM_IC_Stop+0x58>
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	2201      	movs	r2, #1
 800a7f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a7fc:	e023      	b.n	800a846 <HAL_TIM_IC_Stop+0xa0>
 800a7fe:	683b      	ldr	r3, [r7, #0]
 800a800:	2b04      	cmp	r3, #4
 800a802:	d104      	bne.n	800a80e <HAL_TIM_IC_Stop+0x68>
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	2201      	movs	r2, #1
 800a808:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a80c:	e01b      	b.n	800a846 <HAL_TIM_IC_Stop+0xa0>
 800a80e:	683b      	ldr	r3, [r7, #0]
 800a810:	2b08      	cmp	r3, #8
 800a812:	d104      	bne.n	800a81e <HAL_TIM_IC_Stop+0x78>
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	2201      	movs	r2, #1
 800a818:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a81c:	e013      	b.n	800a846 <HAL_TIM_IC_Stop+0xa0>
 800a81e:	683b      	ldr	r3, [r7, #0]
 800a820:	2b0c      	cmp	r3, #12
 800a822:	d104      	bne.n	800a82e <HAL_TIM_IC_Stop+0x88>
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	2201      	movs	r2, #1
 800a828:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a82c:	e00b      	b.n	800a846 <HAL_TIM_IC_Stop+0xa0>
 800a82e:	683b      	ldr	r3, [r7, #0]
 800a830:	2b10      	cmp	r3, #16
 800a832:	d104      	bne.n	800a83e <HAL_TIM_IC_Stop+0x98>
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	2201      	movs	r2, #1
 800a838:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a83c:	e003      	b.n	800a846 <HAL_TIM_IC_Stop+0xa0>
 800a83e:	687b      	ldr	r3, [r7, #4]
 800a840:	2201      	movs	r2, #1
 800a842:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800a846:	683b      	ldr	r3, [r7, #0]
 800a848:	2b00      	cmp	r3, #0
 800a84a:	d104      	bne.n	800a856 <HAL_TIM_IC_Stop+0xb0>
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	2201      	movs	r2, #1
 800a850:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a854:	e013      	b.n	800a87e <HAL_TIM_IC_Stop+0xd8>
 800a856:	683b      	ldr	r3, [r7, #0]
 800a858:	2b04      	cmp	r3, #4
 800a85a:	d104      	bne.n	800a866 <HAL_TIM_IC_Stop+0xc0>
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	2201      	movs	r2, #1
 800a860:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a864:	e00b      	b.n	800a87e <HAL_TIM_IC_Stop+0xd8>
 800a866:	683b      	ldr	r3, [r7, #0]
 800a868:	2b08      	cmp	r3, #8
 800a86a:	d104      	bne.n	800a876 <HAL_TIM_IC_Stop+0xd0>
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	2201      	movs	r2, #1
 800a870:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800a874:	e003      	b.n	800a87e <HAL_TIM_IC_Stop+0xd8>
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	2201      	movs	r2, #1
 800a87a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Return function status */
  return HAL_OK;
 800a87e:	2300      	movs	r3, #0
}
 800a880:	4618      	mov	r0, r3
 800a882:	3708      	adds	r7, #8
 800a884:	46bd      	mov	sp, r7
 800a886:	bd80      	pop	{r7, pc}

0800a888 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800a888:	b580      	push	{r7, lr}
 800a88a:	b084      	sub	sp, #16
 800a88c:	af00      	add	r7, sp, #0
 800a88e:	6078      	str	r0, [r7, #4]
 800a890:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a892:	2300      	movs	r3, #0
 800a894:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800a896:	683b      	ldr	r3, [r7, #0]
 800a898:	2b00      	cmp	r3, #0
 800a89a:	d104      	bne.n	800a8a6 <HAL_TIM_IC_Start_IT+0x1e>
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a8a2:	b2db      	uxtb	r3, r3
 800a8a4:	e023      	b.n	800a8ee <HAL_TIM_IC_Start_IT+0x66>
 800a8a6:	683b      	ldr	r3, [r7, #0]
 800a8a8:	2b04      	cmp	r3, #4
 800a8aa:	d104      	bne.n	800a8b6 <HAL_TIM_IC_Start_IT+0x2e>
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800a8b2:	b2db      	uxtb	r3, r3
 800a8b4:	e01b      	b.n	800a8ee <HAL_TIM_IC_Start_IT+0x66>
 800a8b6:	683b      	ldr	r3, [r7, #0]
 800a8b8:	2b08      	cmp	r3, #8
 800a8ba:	d104      	bne.n	800a8c6 <HAL_TIM_IC_Start_IT+0x3e>
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800a8c2:	b2db      	uxtb	r3, r3
 800a8c4:	e013      	b.n	800a8ee <HAL_TIM_IC_Start_IT+0x66>
 800a8c6:	683b      	ldr	r3, [r7, #0]
 800a8c8:	2b0c      	cmp	r3, #12
 800a8ca:	d104      	bne.n	800a8d6 <HAL_TIM_IC_Start_IT+0x4e>
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a8d2:	b2db      	uxtb	r3, r3
 800a8d4:	e00b      	b.n	800a8ee <HAL_TIM_IC_Start_IT+0x66>
 800a8d6:	683b      	ldr	r3, [r7, #0]
 800a8d8:	2b10      	cmp	r3, #16
 800a8da:	d104      	bne.n	800a8e6 <HAL_TIM_IC_Start_IT+0x5e>
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800a8e2:	b2db      	uxtb	r3, r3
 800a8e4:	e003      	b.n	800a8ee <HAL_TIM_IC_Start_IT+0x66>
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800a8ec:	b2db      	uxtb	r3, r3
 800a8ee:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 800a8f0:	683b      	ldr	r3, [r7, #0]
 800a8f2:	2b00      	cmp	r3, #0
 800a8f4:	d104      	bne.n	800a900 <HAL_TIM_IC_Start_IT+0x78>
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a8fc:	b2db      	uxtb	r3, r3
 800a8fe:	e013      	b.n	800a928 <HAL_TIM_IC_Start_IT+0xa0>
 800a900:	683b      	ldr	r3, [r7, #0]
 800a902:	2b04      	cmp	r3, #4
 800a904:	d104      	bne.n	800a910 <HAL_TIM_IC_Start_IT+0x88>
 800a906:	687b      	ldr	r3, [r7, #4]
 800a908:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a90c:	b2db      	uxtb	r3, r3
 800a90e:	e00b      	b.n	800a928 <HAL_TIM_IC_Start_IT+0xa0>
 800a910:	683b      	ldr	r3, [r7, #0]
 800a912:	2b08      	cmp	r3, #8
 800a914:	d104      	bne.n	800a920 <HAL_TIM_IC_Start_IT+0x98>
 800a916:	687b      	ldr	r3, [r7, #4]
 800a918:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800a91c:	b2db      	uxtb	r3, r3
 800a91e:	e003      	b.n	800a928 <HAL_TIM_IC_Start_IT+0xa0>
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 800a926:	b2db      	uxtb	r3, r3
 800a928:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 800a92a:	7bbb      	ldrb	r3, [r7, #14]
 800a92c:	2b01      	cmp	r3, #1
 800a92e:	d102      	bne.n	800a936 <HAL_TIM_IC_Start_IT+0xae>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 800a930:	7b7b      	ldrb	r3, [r7, #13]
 800a932:	2b01      	cmp	r3, #1
 800a934:	d001      	beq.n	800a93a <HAL_TIM_IC_Start_IT+0xb2>
  {
    return HAL_ERROR;
 800a936:	2301      	movs	r3, #1
 800a938:	e0e2      	b.n	800ab00 <HAL_TIM_IC_Start_IT+0x278>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800a93a:	683b      	ldr	r3, [r7, #0]
 800a93c:	2b00      	cmp	r3, #0
 800a93e:	d104      	bne.n	800a94a <HAL_TIM_IC_Start_IT+0xc2>
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	2202      	movs	r2, #2
 800a944:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a948:	e023      	b.n	800a992 <HAL_TIM_IC_Start_IT+0x10a>
 800a94a:	683b      	ldr	r3, [r7, #0]
 800a94c:	2b04      	cmp	r3, #4
 800a94e:	d104      	bne.n	800a95a <HAL_TIM_IC_Start_IT+0xd2>
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	2202      	movs	r2, #2
 800a954:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a958:	e01b      	b.n	800a992 <HAL_TIM_IC_Start_IT+0x10a>
 800a95a:	683b      	ldr	r3, [r7, #0]
 800a95c:	2b08      	cmp	r3, #8
 800a95e:	d104      	bne.n	800a96a <HAL_TIM_IC_Start_IT+0xe2>
 800a960:	687b      	ldr	r3, [r7, #4]
 800a962:	2202      	movs	r2, #2
 800a964:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a968:	e013      	b.n	800a992 <HAL_TIM_IC_Start_IT+0x10a>
 800a96a:	683b      	ldr	r3, [r7, #0]
 800a96c:	2b0c      	cmp	r3, #12
 800a96e:	d104      	bne.n	800a97a <HAL_TIM_IC_Start_IT+0xf2>
 800a970:	687b      	ldr	r3, [r7, #4]
 800a972:	2202      	movs	r2, #2
 800a974:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a978:	e00b      	b.n	800a992 <HAL_TIM_IC_Start_IT+0x10a>
 800a97a:	683b      	ldr	r3, [r7, #0]
 800a97c:	2b10      	cmp	r3, #16
 800a97e:	d104      	bne.n	800a98a <HAL_TIM_IC_Start_IT+0x102>
 800a980:	687b      	ldr	r3, [r7, #4]
 800a982:	2202      	movs	r2, #2
 800a984:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a988:	e003      	b.n	800a992 <HAL_TIM_IC_Start_IT+0x10a>
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	2202      	movs	r2, #2
 800a98e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800a992:	683b      	ldr	r3, [r7, #0]
 800a994:	2b00      	cmp	r3, #0
 800a996:	d104      	bne.n	800a9a2 <HAL_TIM_IC_Start_IT+0x11a>
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	2202      	movs	r2, #2
 800a99c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a9a0:	e013      	b.n	800a9ca <HAL_TIM_IC_Start_IT+0x142>
 800a9a2:	683b      	ldr	r3, [r7, #0]
 800a9a4:	2b04      	cmp	r3, #4
 800a9a6:	d104      	bne.n	800a9b2 <HAL_TIM_IC_Start_IT+0x12a>
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	2202      	movs	r2, #2
 800a9ac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a9b0:	e00b      	b.n	800a9ca <HAL_TIM_IC_Start_IT+0x142>
 800a9b2:	683b      	ldr	r3, [r7, #0]
 800a9b4:	2b08      	cmp	r3, #8
 800a9b6:	d104      	bne.n	800a9c2 <HAL_TIM_IC_Start_IT+0x13a>
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	2202      	movs	r2, #2
 800a9bc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800a9c0:	e003      	b.n	800a9ca <HAL_TIM_IC_Start_IT+0x142>
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	2202      	movs	r2, #2
 800a9c6:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  switch (Channel)
 800a9ca:	683b      	ldr	r3, [r7, #0]
 800a9cc:	2b0c      	cmp	r3, #12
 800a9ce:	d841      	bhi.n	800aa54 <HAL_TIM_IC_Start_IT+0x1cc>
 800a9d0:	a201      	add	r2, pc, #4	; (adr r2, 800a9d8 <HAL_TIM_IC_Start_IT+0x150>)
 800a9d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a9d6:	bf00      	nop
 800a9d8:	0800aa0d 	.word	0x0800aa0d
 800a9dc:	0800aa55 	.word	0x0800aa55
 800a9e0:	0800aa55 	.word	0x0800aa55
 800a9e4:	0800aa55 	.word	0x0800aa55
 800a9e8:	0800aa1f 	.word	0x0800aa1f
 800a9ec:	0800aa55 	.word	0x0800aa55
 800a9f0:	0800aa55 	.word	0x0800aa55
 800a9f4:	0800aa55 	.word	0x0800aa55
 800a9f8:	0800aa31 	.word	0x0800aa31
 800a9fc:	0800aa55 	.word	0x0800aa55
 800aa00:	0800aa55 	.word	0x0800aa55
 800aa04:	0800aa55 	.word	0x0800aa55
 800aa08:	0800aa43 	.word	0x0800aa43
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	681b      	ldr	r3, [r3, #0]
 800aa10:	68da      	ldr	r2, [r3, #12]
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	681b      	ldr	r3, [r3, #0]
 800aa16:	f042 0202 	orr.w	r2, r2, #2
 800aa1a:	60da      	str	r2, [r3, #12]
      break;
 800aa1c:	e01d      	b.n	800aa5a <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	681b      	ldr	r3, [r3, #0]
 800aa22:	68da      	ldr	r2, [r3, #12]
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	681b      	ldr	r3, [r3, #0]
 800aa28:	f042 0204 	orr.w	r2, r2, #4
 800aa2c:	60da      	str	r2, [r3, #12]
      break;
 800aa2e:	e014      	b.n	800aa5a <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	681b      	ldr	r3, [r3, #0]
 800aa34:	68da      	ldr	r2, [r3, #12]
 800aa36:	687b      	ldr	r3, [r7, #4]
 800aa38:	681b      	ldr	r3, [r3, #0]
 800aa3a:	f042 0208 	orr.w	r2, r2, #8
 800aa3e:	60da      	str	r2, [r3, #12]
      break;
 800aa40:	e00b      	b.n	800aa5a <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800aa42:	687b      	ldr	r3, [r7, #4]
 800aa44:	681b      	ldr	r3, [r3, #0]
 800aa46:	68da      	ldr	r2, [r3, #12]
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	681b      	ldr	r3, [r3, #0]
 800aa4c:	f042 0210 	orr.w	r2, r2, #16
 800aa50:	60da      	str	r2, [r3, #12]
      break;
 800aa52:	e002      	b.n	800aa5a <HAL_TIM_IC_Start_IT+0x1d2>
    }

    default:
      status = HAL_ERROR;
 800aa54:	2301      	movs	r3, #1
 800aa56:	73fb      	strb	r3, [r7, #15]
      break;
 800aa58:	bf00      	nop
  }

  if (status == HAL_OK)
 800aa5a:	7bfb      	ldrb	r3, [r7, #15]
 800aa5c:	2b00      	cmp	r3, #0
 800aa5e:	d14e      	bne.n	800aafe <HAL_TIM_IC_Start_IT+0x276>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	681b      	ldr	r3, [r3, #0]
 800aa64:	2201      	movs	r2, #1
 800aa66:	6839      	ldr	r1, [r7, #0]
 800aa68:	4618      	mov	r0, r3
 800aa6a:	f001 f97b 	bl	800bd64 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800aa6e:	687b      	ldr	r3, [r7, #4]
 800aa70:	681b      	ldr	r3, [r3, #0]
 800aa72:	4a25      	ldr	r2, [pc, #148]	; (800ab08 <HAL_TIM_IC_Start_IT+0x280>)
 800aa74:	4293      	cmp	r3, r2
 800aa76:	d022      	beq.n	800aabe <HAL_TIM_IC_Start_IT+0x236>
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	681b      	ldr	r3, [r3, #0]
 800aa7c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800aa80:	d01d      	beq.n	800aabe <HAL_TIM_IC_Start_IT+0x236>
 800aa82:	687b      	ldr	r3, [r7, #4]
 800aa84:	681b      	ldr	r3, [r3, #0]
 800aa86:	4a21      	ldr	r2, [pc, #132]	; (800ab0c <HAL_TIM_IC_Start_IT+0x284>)
 800aa88:	4293      	cmp	r3, r2
 800aa8a:	d018      	beq.n	800aabe <HAL_TIM_IC_Start_IT+0x236>
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	681b      	ldr	r3, [r3, #0]
 800aa90:	4a1f      	ldr	r2, [pc, #124]	; (800ab10 <HAL_TIM_IC_Start_IT+0x288>)
 800aa92:	4293      	cmp	r3, r2
 800aa94:	d013      	beq.n	800aabe <HAL_TIM_IC_Start_IT+0x236>
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	681b      	ldr	r3, [r3, #0]
 800aa9a:	4a1e      	ldr	r2, [pc, #120]	; (800ab14 <HAL_TIM_IC_Start_IT+0x28c>)
 800aa9c:	4293      	cmp	r3, r2
 800aa9e:	d00e      	beq.n	800aabe <HAL_TIM_IC_Start_IT+0x236>
 800aaa0:	687b      	ldr	r3, [r7, #4]
 800aaa2:	681b      	ldr	r3, [r3, #0]
 800aaa4:	4a1c      	ldr	r2, [pc, #112]	; (800ab18 <HAL_TIM_IC_Start_IT+0x290>)
 800aaa6:	4293      	cmp	r3, r2
 800aaa8:	d009      	beq.n	800aabe <HAL_TIM_IC_Start_IT+0x236>
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	681b      	ldr	r3, [r3, #0]
 800aaae:	4a1b      	ldr	r2, [pc, #108]	; (800ab1c <HAL_TIM_IC_Start_IT+0x294>)
 800aab0:	4293      	cmp	r3, r2
 800aab2:	d004      	beq.n	800aabe <HAL_TIM_IC_Start_IT+0x236>
 800aab4:	687b      	ldr	r3, [r7, #4]
 800aab6:	681b      	ldr	r3, [r3, #0]
 800aab8:	4a19      	ldr	r2, [pc, #100]	; (800ab20 <HAL_TIM_IC_Start_IT+0x298>)
 800aaba:	4293      	cmp	r3, r2
 800aabc:	d115      	bne.n	800aaea <HAL_TIM_IC_Start_IT+0x262>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800aabe:	687b      	ldr	r3, [r7, #4]
 800aac0:	681b      	ldr	r3, [r3, #0]
 800aac2:	689a      	ldr	r2, [r3, #8]
 800aac4:	4b17      	ldr	r3, [pc, #92]	; (800ab24 <HAL_TIM_IC_Start_IT+0x29c>)
 800aac6:	4013      	ands	r3, r2
 800aac8:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800aaca:	68bb      	ldr	r3, [r7, #8]
 800aacc:	2b06      	cmp	r3, #6
 800aace:	d015      	beq.n	800aafc <HAL_TIM_IC_Start_IT+0x274>
 800aad0:	68bb      	ldr	r3, [r7, #8]
 800aad2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800aad6:	d011      	beq.n	800aafc <HAL_TIM_IC_Start_IT+0x274>
      {
        __HAL_TIM_ENABLE(htim);
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	681b      	ldr	r3, [r3, #0]
 800aadc:	681a      	ldr	r2, [r3, #0]
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	681b      	ldr	r3, [r3, #0]
 800aae2:	f042 0201 	orr.w	r2, r2, #1
 800aae6:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800aae8:	e008      	b.n	800aafc <HAL_TIM_IC_Start_IT+0x274>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	681b      	ldr	r3, [r3, #0]
 800aaee:	681a      	ldr	r2, [r3, #0]
 800aaf0:	687b      	ldr	r3, [r7, #4]
 800aaf2:	681b      	ldr	r3, [r3, #0]
 800aaf4:	f042 0201 	orr.w	r2, r2, #1
 800aaf8:	601a      	str	r2, [r3, #0]
 800aafa:	e000      	b.n	800aafe <HAL_TIM_IC_Start_IT+0x276>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800aafc:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 800aafe:	7bfb      	ldrb	r3, [r7, #15]
}
 800ab00:	4618      	mov	r0, r3
 800ab02:	3710      	adds	r7, #16
 800ab04:	46bd      	mov	sp, r7
 800ab06:	bd80      	pop	{r7, pc}
 800ab08:	40010000 	.word	0x40010000
 800ab0c:	40000400 	.word	0x40000400
 800ab10:	40000800 	.word	0x40000800
 800ab14:	40000c00 	.word	0x40000c00
 800ab18:	40010400 	.word	0x40010400
 800ab1c:	40001800 	.word	0x40001800
 800ab20:	40014000 	.word	0x40014000
 800ab24:	00010007 	.word	0x00010007

0800ab28 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800ab28:	b580      	push	{r7, lr}
 800ab2a:	b082      	sub	sp, #8
 800ab2c:	af00      	add	r7, sp, #0
 800ab2e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800ab30:	687b      	ldr	r3, [r7, #4]
 800ab32:	681b      	ldr	r3, [r3, #0]
 800ab34:	691b      	ldr	r3, [r3, #16]
 800ab36:	f003 0302 	and.w	r3, r3, #2
 800ab3a:	2b02      	cmp	r3, #2
 800ab3c:	d122      	bne.n	800ab84 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800ab3e:	687b      	ldr	r3, [r7, #4]
 800ab40:	681b      	ldr	r3, [r3, #0]
 800ab42:	68db      	ldr	r3, [r3, #12]
 800ab44:	f003 0302 	and.w	r3, r3, #2
 800ab48:	2b02      	cmp	r3, #2
 800ab4a:	d11b      	bne.n	800ab84 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	681b      	ldr	r3, [r3, #0]
 800ab50:	f06f 0202 	mvn.w	r2, #2
 800ab54:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800ab56:	687b      	ldr	r3, [r7, #4]
 800ab58:	2201      	movs	r2, #1
 800ab5a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800ab5c:	687b      	ldr	r3, [r7, #4]
 800ab5e:	681b      	ldr	r3, [r3, #0]
 800ab60:	699b      	ldr	r3, [r3, #24]
 800ab62:	f003 0303 	and.w	r3, r3, #3
 800ab66:	2b00      	cmp	r3, #0
 800ab68:	d003      	beq.n	800ab72 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800ab6a:	6878      	ldr	r0, [r7, #4]
 800ab6c:	f7f7 ffde 	bl	8002b2c <HAL_TIM_IC_CaptureCallback>
 800ab70:	e005      	b.n	800ab7e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800ab72:	6878      	ldr	r0, [r7, #4]
 800ab74:	f000 fba0 	bl	800b2b8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ab78:	6878      	ldr	r0, [r7, #4]
 800ab7a:	f000 fba7 	bl	800b2cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ab7e:	687b      	ldr	r3, [r7, #4]
 800ab80:	2200      	movs	r2, #0
 800ab82:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800ab84:	687b      	ldr	r3, [r7, #4]
 800ab86:	681b      	ldr	r3, [r3, #0]
 800ab88:	691b      	ldr	r3, [r3, #16]
 800ab8a:	f003 0304 	and.w	r3, r3, #4
 800ab8e:	2b04      	cmp	r3, #4
 800ab90:	d122      	bne.n	800abd8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800ab92:	687b      	ldr	r3, [r7, #4]
 800ab94:	681b      	ldr	r3, [r3, #0]
 800ab96:	68db      	ldr	r3, [r3, #12]
 800ab98:	f003 0304 	and.w	r3, r3, #4
 800ab9c:	2b04      	cmp	r3, #4
 800ab9e:	d11b      	bne.n	800abd8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800aba0:	687b      	ldr	r3, [r7, #4]
 800aba2:	681b      	ldr	r3, [r3, #0]
 800aba4:	f06f 0204 	mvn.w	r2, #4
 800aba8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800abaa:	687b      	ldr	r3, [r7, #4]
 800abac:	2202      	movs	r2, #2
 800abae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800abb0:	687b      	ldr	r3, [r7, #4]
 800abb2:	681b      	ldr	r3, [r3, #0]
 800abb4:	699b      	ldr	r3, [r3, #24]
 800abb6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800abba:	2b00      	cmp	r3, #0
 800abbc:	d003      	beq.n	800abc6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800abbe:	6878      	ldr	r0, [r7, #4]
 800abc0:	f7f7 ffb4 	bl	8002b2c <HAL_TIM_IC_CaptureCallback>
 800abc4:	e005      	b.n	800abd2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800abc6:	6878      	ldr	r0, [r7, #4]
 800abc8:	f000 fb76 	bl	800b2b8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800abcc:	6878      	ldr	r0, [r7, #4]
 800abce:	f000 fb7d 	bl	800b2cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800abd2:	687b      	ldr	r3, [r7, #4]
 800abd4:	2200      	movs	r2, #0
 800abd6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800abd8:	687b      	ldr	r3, [r7, #4]
 800abda:	681b      	ldr	r3, [r3, #0]
 800abdc:	691b      	ldr	r3, [r3, #16]
 800abde:	f003 0308 	and.w	r3, r3, #8
 800abe2:	2b08      	cmp	r3, #8
 800abe4:	d122      	bne.n	800ac2c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800abe6:	687b      	ldr	r3, [r7, #4]
 800abe8:	681b      	ldr	r3, [r3, #0]
 800abea:	68db      	ldr	r3, [r3, #12]
 800abec:	f003 0308 	and.w	r3, r3, #8
 800abf0:	2b08      	cmp	r3, #8
 800abf2:	d11b      	bne.n	800ac2c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800abf4:	687b      	ldr	r3, [r7, #4]
 800abf6:	681b      	ldr	r3, [r3, #0]
 800abf8:	f06f 0208 	mvn.w	r2, #8
 800abfc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	2204      	movs	r2, #4
 800ac02:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800ac04:	687b      	ldr	r3, [r7, #4]
 800ac06:	681b      	ldr	r3, [r3, #0]
 800ac08:	69db      	ldr	r3, [r3, #28]
 800ac0a:	f003 0303 	and.w	r3, r3, #3
 800ac0e:	2b00      	cmp	r3, #0
 800ac10:	d003      	beq.n	800ac1a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ac12:	6878      	ldr	r0, [r7, #4]
 800ac14:	f7f7 ff8a 	bl	8002b2c <HAL_TIM_IC_CaptureCallback>
 800ac18:	e005      	b.n	800ac26 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ac1a:	6878      	ldr	r0, [r7, #4]
 800ac1c:	f000 fb4c 	bl	800b2b8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ac20:	6878      	ldr	r0, [r7, #4]
 800ac22:	f000 fb53 	bl	800b2cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ac26:	687b      	ldr	r3, [r7, #4]
 800ac28:	2200      	movs	r2, #0
 800ac2a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	681b      	ldr	r3, [r3, #0]
 800ac30:	691b      	ldr	r3, [r3, #16]
 800ac32:	f003 0310 	and.w	r3, r3, #16
 800ac36:	2b10      	cmp	r3, #16
 800ac38:	d122      	bne.n	800ac80 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800ac3a:	687b      	ldr	r3, [r7, #4]
 800ac3c:	681b      	ldr	r3, [r3, #0]
 800ac3e:	68db      	ldr	r3, [r3, #12]
 800ac40:	f003 0310 	and.w	r3, r3, #16
 800ac44:	2b10      	cmp	r3, #16
 800ac46:	d11b      	bne.n	800ac80 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800ac48:	687b      	ldr	r3, [r7, #4]
 800ac4a:	681b      	ldr	r3, [r3, #0]
 800ac4c:	f06f 0210 	mvn.w	r2, #16
 800ac50:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800ac52:	687b      	ldr	r3, [r7, #4]
 800ac54:	2208      	movs	r2, #8
 800ac56:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800ac58:	687b      	ldr	r3, [r7, #4]
 800ac5a:	681b      	ldr	r3, [r3, #0]
 800ac5c:	69db      	ldr	r3, [r3, #28]
 800ac5e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ac62:	2b00      	cmp	r3, #0
 800ac64:	d003      	beq.n	800ac6e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ac66:	6878      	ldr	r0, [r7, #4]
 800ac68:	f7f7 ff60 	bl	8002b2c <HAL_TIM_IC_CaptureCallback>
 800ac6c:	e005      	b.n	800ac7a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ac6e:	6878      	ldr	r0, [r7, #4]
 800ac70:	f000 fb22 	bl	800b2b8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ac74:	6878      	ldr	r0, [r7, #4]
 800ac76:	f000 fb29 	bl	800b2cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ac7a:	687b      	ldr	r3, [r7, #4]
 800ac7c:	2200      	movs	r2, #0
 800ac7e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800ac80:	687b      	ldr	r3, [r7, #4]
 800ac82:	681b      	ldr	r3, [r3, #0]
 800ac84:	691b      	ldr	r3, [r3, #16]
 800ac86:	f003 0301 	and.w	r3, r3, #1
 800ac8a:	2b01      	cmp	r3, #1
 800ac8c:	d10e      	bne.n	800acac <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800ac8e:	687b      	ldr	r3, [r7, #4]
 800ac90:	681b      	ldr	r3, [r3, #0]
 800ac92:	68db      	ldr	r3, [r3, #12]
 800ac94:	f003 0301 	and.w	r3, r3, #1
 800ac98:	2b01      	cmp	r3, #1
 800ac9a:	d107      	bne.n	800acac <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	681b      	ldr	r3, [r3, #0]
 800aca0:	f06f 0201 	mvn.w	r2, #1
 800aca4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800aca6:	6878      	ldr	r0, [r7, #4]
 800aca8:	f7f7 ff92 	bl	8002bd0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800acac:	687b      	ldr	r3, [r7, #4]
 800acae:	681b      	ldr	r3, [r3, #0]
 800acb0:	691b      	ldr	r3, [r3, #16]
 800acb2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800acb6:	2b80      	cmp	r3, #128	; 0x80
 800acb8:	d10e      	bne.n	800acd8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	681b      	ldr	r3, [r3, #0]
 800acbe:	68db      	ldr	r3, [r3, #12]
 800acc0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800acc4:	2b80      	cmp	r3, #128	; 0x80
 800acc6:	d107      	bne.n	800acd8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800acc8:	687b      	ldr	r3, [r7, #4]
 800acca:	681b      	ldr	r3, [r3, #0]
 800accc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800acd0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800acd2:	6878      	ldr	r0, [r7, #4]
 800acd4:	f001 f904 	bl	800bee0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	681b      	ldr	r3, [r3, #0]
 800acdc:	691b      	ldr	r3, [r3, #16]
 800acde:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ace2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ace6:	d10e      	bne.n	800ad06 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800ace8:	687b      	ldr	r3, [r7, #4]
 800acea:	681b      	ldr	r3, [r3, #0]
 800acec:	68db      	ldr	r3, [r3, #12]
 800acee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800acf2:	2b80      	cmp	r3, #128	; 0x80
 800acf4:	d107      	bne.n	800ad06 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800acf6:	687b      	ldr	r3, [r7, #4]
 800acf8:	681b      	ldr	r3, [r3, #0]
 800acfa:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800acfe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800ad00:	6878      	ldr	r0, [r7, #4]
 800ad02:	f001 f8f7 	bl	800bef4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800ad06:	687b      	ldr	r3, [r7, #4]
 800ad08:	681b      	ldr	r3, [r3, #0]
 800ad0a:	691b      	ldr	r3, [r3, #16]
 800ad0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ad10:	2b40      	cmp	r3, #64	; 0x40
 800ad12:	d10e      	bne.n	800ad32 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	681b      	ldr	r3, [r3, #0]
 800ad18:	68db      	ldr	r3, [r3, #12]
 800ad1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ad1e:	2b40      	cmp	r3, #64	; 0x40
 800ad20:	d107      	bne.n	800ad32 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800ad22:	687b      	ldr	r3, [r7, #4]
 800ad24:	681b      	ldr	r3, [r3, #0]
 800ad26:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800ad2a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800ad2c:	6878      	ldr	r0, [r7, #4]
 800ad2e:	f000 fad7 	bl	800b2e0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800ad32:	687b      	ldr	r3, [r7, #4]
 800ad34:	681b      	ldr	r3, [r3, #0]
 800ad36:	691b      	ldr	r3, [r3, #16]
 800ad38:	f003 0320 	and.w	r3, r3, #32
 800ad3c:	2b20      	cmp	r3, #32
 800ad3e:	d10e      	bne.n	800ad5e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800ad40:	687b      	ldr	r3, [r7, #4]
 800ad42:	681b      	ldr	r3, [r3, #0]
 800ad44:	68db      	ldr	r3, [r3, #12]
 800ad46:	f003 0320 	and.w	r3, r3, #32
 800ad4a:	2b20      	cmp	r3, #32
 800ad4c:	d107      	bne.n	800ad5e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800ad4e:	687b      	ldr	r3, [r7, #4]
 800ad50:	681b      	ldr	r3, [r3, #0]
 800ad52:	f06f 0220 	mvn.w	r2, #32
 800ad56:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800ad58:	6878      	ldr	r0, [r7, #4]
 800ad5a:	f001 f8b7 	bl	800becc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800ad5e:	bf00      	nop
 800ad60:	3708      	adds	r7, #8
 800ad62:	46bd      	mov	sp, r7
 800ad64:	bd80      	pop	{r7, pc}

0800ad66 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 800ad66:	b580      	push	{r7, lr}
 800ad68:	b086      	sub	sp, #24
 800ad6a:	af00      	add	r7, sp, #0
 800ad6c:	60f8      	str	r0, [r7, #12]
 800ad6e:	60b9      	str	r1, [r7, #8]
 800ad70:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800ad72:	2300      	movs	r3, #0
 800ad74:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 800ad76:	68fb      	ldr	r3, [r7, #12]
 800ad78:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ad7c:	2b01      	cmp	r3, #1
 800ad7e:	d101      	bne.n	800ad84 <HAL_TIM_IC_ConfigChannel+0x1e>
 800ad80:	2302      	movs	r3, #2
 800ad82:	e088      	b.n	800ae96 <HAL_TIM_IC_ConfigChannel+0x130>
 800ad84:	68fb      	ldr	r3, [r7, #12]
 800ad86:	2201      	movs	r2, #1
 800ad88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 800ad8c:	687b      	ldr	r3, [r7, #4]
 800ad8e:	2b00      	cmp	r3, #0
 800ad90:	d11b      	bne.n	800adca <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 800ad92:	68fb      	ldr	r3, [r7, #12]
 800ad94:	6818      	ldr	r0, [r3, #0]
 800ad96:	68bb      	ldr	r3, [r7, #8]
 800ad98:	6819      	ldr	r1, [r3, #0]
 800ad9a:	68bb      	ldr	r3, [r7, #8]
 800ad9c:	685a      	ldr	r2, [r3, #4]
 800ad9e:	68bb      	ldr	r3, [r7, #8]
 800ada0:	68db      	ldr	r3, [r3, #12]
 800ada2:	f000 fe17 	bl	800b9d4 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800ada6:	68fb      	ldr	r3, [r7, #12]
 800ada8:	681b      	ldr	r3, [r3, #0]
 800adaa:	699a      	ldr	r2, [r3, #24]
 800adac:	68fb      	ldr	r3, [r7, #12]
 800adae:	681b      	ldr	r3, [r3, #0]
 800adb0:	f022 020c 	bic.w	r2, r2, #12
 800adb4:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800adb6:	68fb      	ldr	r3, [r7, #12]
 800adb8:	681b      	ldr	r3, [r3, #0]
 800adba:	6999      	ldr	r1, [r3, #24]
 800adbc:	68bb      	ldr	r3, [r7, #8]
 800adbe:	689a      	ldr	r2, [r3, #8]
 800adc0:	68fb      	ldr	r3, [r7, #12]
 800adc2:	681b      	ldr	r3, [r3, #0]
 800adc4:	430a      	orrs	r2, r1
 800adc6:	619a      	str	r2, [r3, #24]
 800adc8:	e060      	b.n	800ae8c <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 800adca:	687b      	ldr	r3, [r7, #4]
 800adcc:	2b04      	cmp	r3, #4
 800adce:	d11c      	bne.n	800ae0a <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800add0:	68fb      	ldr	r3, [r7, #12]
 800add2:	6818      	ldr	r0, [r3, #0]
 800add4:	68bb      	ldr	r3, [r7, #8]
 800add6:	6819      	ldr	r1, [r3, #0]
 800add8:	68bb      	ldr	r3, [r7, #8]
 800adda:	685a      	ldr	r2, [r3, #4]
 800addc:	68bb      	ldr	r3, [r7, #8]
 800adde:	68db      	ldr	r3, [r3, #12]
 800ade0:	f000 fe9b 	bl	800bb1a <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800ade4:	68fb      	ldr	r3, [r7, #12]
 800ade6:	681b      	ldr	r3, [r3, #0]
 800ade8:	699a      	ldr	r2, [r3, #24]
 800adea:	68fb      	ldr	r3, [r7, #12]
 800adec:	681b      	ldr	r3, [r3, #0]
 800adee:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800adf2:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800adf4:	68fb      	ldr	r3, [r7, #12]
 800adf6:	681b      	ldr	r3, [r3, #0]
 800adf8:	6999      	ldr	r1, [r3, #24]
 800adfa:	68bb      	ldr	r3, [r7, #8]
 800adfc:	689b      	ldr	r3, [r3, #8]
 800adfe:	021a      	lsls	r2, r3, #8
 800ae00:	68fb      	ldr	r3, [r7, #12]
 800ae02:	681b      	ldr	r3, [r3, #0]
 800ae04:	430a      	orrs	r2, r1
 800ae06:	619a      	str	r2, [r3, #24]
 800ae08:	e040      	b.n	800ae8c <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 800ae0a:	687b      	ldr	r3, [r7, #4]
 800ae0c:	2b08      	cmp	r3, #8
 800ae0e:	d11b      	bne.n	800ae48 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800ae10:	68fb      	ldr	r3, [r7, #12]
 800ae12:	6818      	ldr	r0, [r3, #0]
 800ae14:	68bb      	ldr	r3, [r7, #8]
 800ae16:	6819      	ldr	r1, [r3, #0]
 800ae18:	68bb      	ldr	r3, [r7, #8]
 800ae1a:	685a      	ldr	r2, [r3, #4]
 800ae1c:	68bb      	ldr	r3, [r7, #8]
 800ae1e:	68db      	ldr	r3, [r3, #12]
 800ae20:	f000 fee8 	bl	800bbf4 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800ae24:	68fb      	ldr	r3, [r7, #12]
 800ae26:	681b      	ldr	r3, [r3, #0]
 800ae28:	69da      	ldr	r2, [r3, #28]
 800ae2a:	68fb      	ldr	r3, [r7, #12]
 800ae2c:	681b      	ldr	r3, [r3, #0]
 800ae2e:	f022 020c 	bic.w	r2, r2, #12
 800ae32:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800ae34:	68fb      	ldr	r3, [r7, #12]
 800ae36:	681b      	ldr	r3, [r3, #0]
 800ae38:	69d9      	ldr	r1, [r3, #28]
 800ae3a:	68bb      	ldr	r3, [r7, #8]
 800ae3c:	689a      	ldr	r2, [r3, #8]
 800ae3e:	68fb      	ldr	r3, [r7, #12]
 800ae40:	681b      	ldr	r3, [r3, #0]
 800ae42:	430a      	orrs	r2, r1
 800ae44:	61da      	str	r2, [r3, #28]
 800ae46:	e021      	b.n	800ae8c <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 800ae48:	687b      	ldr	r3, [r7, #4]
 800ae4a:	2b0c      	cmp	r3, #12
 800ae4c:	d11c      	bne.n	800ae88 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 800ae4e:	68fb      	ldr	r3, [r7, #12]
 800ae50:	6818      	ldr	r0, [r3, #0]
 800ae52:	68bb      	ldr	r3, [r7, #8]
 800ae54:	6819      	ldr	r1, [r3, #0]
 800ae56:	68bb      	ldr	r3, [r7, #8]
 800ae58:	685a      	ldr	r2, [r3, #4]
 800ae5a:	68bb      	ldr	r3, [r7, #8]
 800ae5c:	68db      	ldr	r3, [r3, #12]
 800ae5e:	f000 ff05 	bl	800bc6c <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800ae62:	68fb      	ldr	r3, [r7, #12]
 800ae64:	681b      	ldr	r3, [r3, #0]
 800ae66:	69da      	ldr	r2, [r3, #28]
 800ae68:	68fb      	ldr	r3, [r7, #12]
 800ae6a:	681b      	ldr	r3, [r3, #0]
 800ae6c:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800ae70:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800ae72:	68fb      	ldr	r3, [r7, #12]
 800ae74:	681b      	ldr	r3, [r3, #0]
 800ae76:	69d9      	ldr	r1, [r3, #28]
 800ae78:	68bb      	ldr	r3, [r7, #8]
 800ae7a:	689b      	ldr	r3, [r3, #8]
 800ae7c:	021a      	lsls	r2, r3, #8
 800ae7e:	68fb      	ldr	r3, [r7, #12]
 800ae80:	681b      	ldr	r3, [r3, #0]
 800ae82:	430a      	orrs	r2, r1
 800ae84:	61da      	str	r2, [r3, #28]
 800ae86:	e001      	b.n	800ae8c <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 800ae88:	2301      	movs	r3, #1
 800ae8a:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 800ae8c:	68fb      	ldr	r3, [r7, #12]
 800ae8e:	2200      	movs	r2, #0
 800ae90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800ae94:	7dfb      	ldrb	r3, [r7, #23]
}
 800ae96:	4618      	mov	r0, r3
 800ae98:	3718      	adds	r7, #24
 800ae9a:	46bd      	mov	sp, r7
 800ae9c:	bd80      	pop	{r7, pc}
	...

0800aea0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800aea0:	b580      	push	{r7, lr}
 800aea2:	b086      	sub	sp, #24
 800aea4:	af00      	add	r7, sp, #0
 800aea6:	60f8      	str	r0, [r7, #12]
 800aea8:	60b9      	str	r1, [r7, #8]
 800aeaa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800aeac:	2300      	movs	r3, #0
 800aeae:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800aeb0:	68fb      	ldr	r3, [r7, #12]
 800aeb2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800aeb6:	2b01      	cmp	r3, #1
 800aeb8:	d101      	bne.n	800aebe <HAL_TIM_PWM_ConfigChannel+0x1e>
 800aeba:	2302      	movs	r3, #2
 800aebc:	e0ff      	b.n	800b0be <HAL_TIM_PWM_ConfigChannel+0x21e>
 800aebe:	68fb      	ldr	r3, [r7, #12]
 800aec0:	2201      	movs	r2, #1
 800aec2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800aec6:	687b      	ldr	r3, [r7, #4]
 800aec8:	2b14      	cmp	r3, #20
 800aeca:	f200 80f0 	bhi.w	800b0ae <HAL_TIM_PWM_ConfigChannel+0x20e>
 800aece:	a201      	add	r2, pc, #4	; (adr r2, 800aed4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800aed0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aed4:	0800af29 	.word	0x0800af29
 800aed8:	0800b0af 	.word	0x0800b0af
 800aedc:	0800b0af 	.word	0x0800b0af
 800aee0:	0800b0af 	.word	0x0800b0af
 800aee4:	0800af69 	.word	0x0800af69
 800aee8:	0800b0af 	.word	0x0800b0af
 800aeec:	0800b0af 	.word	0x0800b0af
 800aef0:	0800b0af 	.word	0x0800b0af
 800aef4:	0800afab 	.word	0x0800afab
 800aef8:	0800b0af 	.word	0x0800b0af
 800aefc:	0800b0af 	.word	0x0800b0af
 800af00:	0800b0af 	.word	0x0800b0af
 800af04:	0800afeb 	.word	0x0800afeb
 800af08:	0800b0af 	.word	0x0800b0af
 800af0c:	0800b0af 	.word	0x0800b0af
 800af10:	0800b0af 	.word	0x0800b0af
 800af14:	0800b02d 	.word	0x0800b02d
 800af18:	0800b0af 	.word	0x0800b0af
 800af1c:	0800b0af 	.word	0x0800b0af
 800af20:	0800b0af 	.word	0x0800b0af
 800af24:	0800b06d 	.word	0x0800b06d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800af28:	68fb      	ldr	r3, [r7, #12]
 800af2a:	681b      	ldr	r3, [r3, #0]
 800af2c:	68b9      	ldr	r1, [r7, #8]
 800af2e:	4618      	mov	r0, r3
 800af30:	f000 fa7a 	bl	800b428 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800af34:	68fb      	ldr	r3, [r7, #12]
 800af36:	681b      	ldr	r3, [r3, #0]
 800af38:	699a      	ldr	r2, [r3, #24]
 800af3a:	68fb      	ldr	r3, [r7, #12]
 800af3c:	681b      	ldr	r3, [r3, #0]
 800af3e:	f042 0208 	orr.w	r2, r2, #8
 800af42:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800af44:	68fb      	ldr	r3, [r7, #12]
 800af46:	681b      	ldr	r3, [r3, #0]
 800af48:	699a      	ldr	r2, [r3, #24]
 800af4a:	68fb      	ldr	r3, [r7, #12]
 800af4c:	681b      	ldr	r3, [r3, #0]
 800af4e:	f022 0204 	bic.w	r2, r2, #4
 800af52:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800af54:	68fb      	ldr	r3, [r7, #12]
 800af56:	681b      	ldr	r3, [r3, #0]
 800af58:	6999      	ldr	r1, [r3, #24]
 800af5a:	68bb      	ldr	r3, [r7, #8]
 800af5c:	691a      	ldr	r2, [r3, #16]
 800af5e:	68fb      	ldr	r3, [r7, #12]
 800af60:	681b      	ldr	r3, [r3, #0]
 800af62:	430a      	orrs	r2, r1
 800af64:	619a      	str	r2, [r3, #24]
      break;
 800af66:	e0a5      	b.n	800b0b4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800af68:	68fb      	ldr	r3, [r7, #12]
 800af6a:	681b      	ldr	r3, [r3, #0]
 800af6c:	68b9      	ldr	r1, [r7, #8]
 800af6e:	4618      	mov	r0, r3
 800af70:	f000 faea 	bl	800b548 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800af74:	68fb      	ldr	r3, [r7, #12]
 800af76:	681b      	ldr	r3, [r3, #0]
 800af78:	699a      	ldr	r2, [r3, #24]
 800af7a:	68fb      	ldr	r3, [r7, #12]
 800af7c:	681b      	ldr	r3, [r3, #0]
 800af7e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800af82:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800af84:	68fb      	ldr	r3, [r7, #12]
 800af86:	681b      	ldr	r3, [r3, #0]
 800af88:	699a      	ldr	r2, [r3, #24]
 800af8a:	68fb      	ldr	r3, [r7, #12]
 800af8c:	681b      	ldr	r3, [r3, #0]
 800af8e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800af92:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800af94:	68fb      	ldr	r3, [r7, #12]
 800af96:	681b      	ldr	r3, [r3, #0]
 800af98:	6999      	ldr	r1, [r3, #24]
 800af9a:	68bb      	ldr	r3, [r7, #8]
 800af9c:	691b      	ldr	r3, [r3, #16]
 800af9e:	021a      	lsls	r2, r3, #8
 800afa0:	68fb      	ldr	r3, [r7, #12]
 800afa2:	681b      	ldr	r3, [r3, #0]
 800afa4:	430a      	orrs	r2, r1
 800afa6:	619a      	str	r2, [r3, #24]
      break;
 800afa8:	e084      	b.n	800b0b4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800afaa:	68fb      	ldr	r3, [r7, #12]
 800afac:	681b      	ldr	r3, [r3, #0]
 800afae:	68b9      	ldr	r1, [r7, #8]
 800afb0:	4618      	mov	r0, r3
 800afb2:	f000 fb53 	bl	800b65c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800afb6:	68fb      	ldr	r3, [r7, #12]
 800afb8:	681b      	ldr	r3, [r3, #0]
 800afba:	69da      	ldr	r2, [r3, #28]
 800afbc:	68fb      	ldr	r3, [r7, #12]
 800afbe:	681b      	ldr	r3, [r3, #0]
 800afc0:	f042 0208 	orr.w	r2, r2, #8
 800afc4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800afc6:	68fb      	ldr	r3, [r7, #12]
 800afc8:	681b      	ldr	r3, [r3, #0]
 800afca:	69da      	ldr	r2, [r3, #28]
 800afcc:	68fb      	ldr	r3, [r7, #12]
 800afce:	681b      	ldr	r3, [r3, #0]
 800afd0:	f022 0204 	bic.w	r2, r2, #4
 800afd4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800afd6:	68fb      	ldr	r3, [r7, #12]
 800afd8:	681b      	ldr	r3, [r3, #0]
 800afda:	69d9      	ldr	r1, [r3, #28]
 800afdc:	68bb      	ldr	r3, [r7, #8]
 800afde:	691a      	ldr	r2, [r3, #16]
 800afe0:	68fb      	ldr	r3, [r7, #12]
 800afe2:	681b      	ldr	r3, [r3, #0]
 800afe4:	430a      	orrs	r2, r1
 800afe6:	61da      	str	r2, [r3, #28]
      break;
 800afe8:	e064      	b.n	800b0b4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800afea:	68fb      	ldr	r3, [r7, #12]
 800afec:	681b      	ldr	r3, [r3, #0]
 800afee:	68b9      	ldr	r1, [r7, #8]
 800aff0:	4618      	mov	r0, r3
 800aff2:	f000 fbbb 	bl	800b76c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800aff6:	68fb      	ldr	r3, [r7, #12]
 800aff8:	681b      	ldr	r3, [r3, #0]
 800affa:	69da      	ldr	r2, [r3, #28]
 800affc:	68fb      	ldr	r3, [r7, #12]
 800affe:	681b      	ldr	r3, [r3, #0]
 800b000:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b004:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800b006:	68fb      	ldr	r3, [r7, #12]
 800b008:	681b      	ldr	r3, [r3, #0]
 800b00a:	69da      	ldr	r2, [r3, #28]
 800b00c:	68fb      	ldr	r3, [r7, #12]
 800b00e:	681b      	ldr	r3, [r3, #0]
 800b010:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b014:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800b016:	68fb      	ldr	r3, [r7, #12]
 800b018:	681b      	ldr	r3, [r3, #0]
 800b01a:	69d9      	ldr	r1, [r3, #28]
 800b01c:	68bb      	ldr	r3, [r7, #8]
 800b01e:	691b      	ldr	r3, [r3, #16]
 800b020:	021a      	lsls	r2, r3, #8
 800b022:	68fb      	ldr	r3, [r7, #12]
 800b024:	681b      	ldr	r3, [r3, #0]
 800b026:	430a      	orrs	r2, r1
 800b028:	61da      	str	r2, [r3, #28]
      break;
 800b02a:	e043      	b.n	800b0b4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800b02c:	68fb      	ldr	r3, [r7, #12]
 800b02e:	681b      	ldr	r3, [r3, #0]
 800b030:	68b9      	ldr	r1, [r7, #8]
 800b032:	4618      	mov	r0, r3
 800b034:	f000 fc04 	bl	800b840 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800b038:	68fb      	ldr	r3, [r7, #12]
 800b03a:	681b      	ldr	r3, [r3, #0]
 800b03c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b03e:	68fb      	ldr	r3, [r7, #12]
 800b040:	681b      	ldr	r3, [r3, #0]
 800b042:	f042 0208 	orr.w	r2, r2, #8
 800b046:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800b048:	68fb      	ldr	r3, [r7, #12]
 800b04a:	681b      	ldr	r3, [r3, #0]
 800b04c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b04e:	68fb      	ldr	r3, [r7, #12]
 800b050:	681b      	ldr	r3, [r3, #0]
 800b052:	f022 0204 	bic.w	r2, r2, #4
 800b056:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800b058:	68fb      	ldr	r3, [r7, #12]
 800b05a:	681b      	ldr	r3, [r3, #0]
 800b05c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800b05e:	68bb      	ldr	r3, [r7, #8]
 800b060:	691a      	ldr	r2, [r3, #16]
 800b062:	68fb      	ldr	r3, [r7, #12]
 800b064:	681b      	ldr	r3, [r3, #0]
 800b066:	430a      	orrs	r2, r1
 800b068:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800b06a:	e023      	b.n	800b0b4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800b06c:	68fb      	ldr	r3, [r7, #12]
 800b06e:	681b      	ldr	r3, [r3, #0]
 800b070:	68b9      	ldr	r1, [r7, #8]
 800b072:	4618      	mov	r0, r3
 800b074:	f000 fc48 	bl	800b908 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800b078:	68fb      	ldr	r3, [r7, #12]
 800b07a:	681b      	ldr	r3, [r3, #0]
 800b07c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b07e:	68fb      	ldr	r3, [r7, #12]
 800b080:	681b      	ldr	r3, [r3, #0]
 800b082:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b086:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800b088:	68fb      	ldr	r3, [r7, #12]
 800b08a:	681b      	ldr	r3, [r3, #0]
 800b08c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b08e:	68fb      	ldr	r3, [r7, #12]
 800b090:	681b      	ldr	r3, [r3, #0]
 800b092:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b096:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800b098:	68fb      	ldr	r3, [r7, #12]
 800b09a:	681b      	ldr	r3, [r3, #0]
 800b09c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800b09e:	68bb      	ldr	r3, [r7, #8]
 800b0a0:	691b      	ldr	r3, [r3, #16]
 800b0a2:	021a      	lsls	r2, r3, #8
 800b0a4:	68fb      	ldr	r3, [r7, #12]
 800b0a6:	681b      	ldr	r3, [r3, #0]
 800b0a8:	430a      	orrs	r2, r1
 800b0aa:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800b0ac:	e002      	b.n	800b0b4 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800b0ae:	2301      	movs	r3, #1
 800b0b0:	75fb      	strb	r3, [r7, #23]
      break;
 800b0b2:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800b0b4:	68fb      	ldr	r3, [r7, #12]
 800b0b6:	2200      	movs	r2, #0
 800b0b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800b0bc:	7dfb      	ldrb	r3, [r7, #23]
}
 800b0be:	4618      	mov	r0, r3
 800b0c0:	3718      	adds	r7, #24
 800b0c2:	46bd      	mov	sp, r7
 800b0c4:	bd80      	pop	{r7, pc}
 800b0c6:	bf00      	nop

0800b0c8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800b0c8:	b580      	push	{r7, lr}
 800b0ca:	b084      	sub	sp, #16
 800b0cc:	af00      	add	r7, sp, #0
 800b0ce:	6078      	str	r0, [r7, #4]
 800b0d0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800b0d2:	2300      	movs	r3, #0
 800b0d4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800b0d6:	687b      	ldr	r3, [r7, #4]
 800b0d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b0dc:	2b01      	cmp	r3, #1
 800b0de:	d101      	bne.n	800b0e4 <HAL_TIM_ConfigClockSource+0x1c>
 800b0e0:	2302      	movs	r3, #2
 800b0e2:	e0dc      	b.n	800b29e <HAL_TIM_ConfigClockSource+0x1d6>
 800b0e4:	687b      	ldr	r3, [r7, #4]
 800b0e6:	2201      	movs	r2, #1
 800b0e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800b0ec:	687b      	ldr	r3, [r7, #4]
 800b0ee:	2202      	movs	r2, #2
 800b0f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800b0f4:	687b      	ldr	r3, [r7, #4]
 800b0f6:	681b      	ldr	r3, [r3, #0]
 800b0f8:	689b      	ldr	r3, [r3, #8]
 800b0fa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800b0fc:	68ba      	ldr	r2, [r7, #8]
 800b0fe:	4b6a      	ldr	r3, [pc, #424]	; (800b2a8 <HAL_TIM_ConfigClockSource+0x1e0>)
 800b100:	4013      	ands	r3, r2
 800b102:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b104:	68bb      	ldr	r3, [r7, #8]
 800b106:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800b10a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800b10c:	687b      	ldr	r3, [r7, #4]
 800b10e:	681b      	ldr	r3, [r3, #0]
 800b110:	68ba      	ldr	r2, [r7, #8]
 800b112:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800b114:	683b      	ldr	r3, [r7, #0]
 800b116:	681b      	ldr	r3, [r3, #0]
 800b118:	4a64      	ldr	r2, [pc, #400]	; (800b2ac <HAL_TIM_ConfigClockSource+0x1e4>)
 800b11a:	4293      	cmp	r3, r2
 800b11c:	f000 80a9 	beq.w	800b272 <HAL_TIM_ConfigClockSource+0x1aa>
 800b120:	4a62      	ldr	r2, [pc, #392]	; (800b2ac <HAL_TIM_ConfigClockSource+0x1e4>)
 800b122:	4293      	cmp	r3, r2
 800b124:	f200 80ae 	bhi.w	800b284 <HAL_TIM_ConfigClockSource+0x1bc>
 800b128:	4a61      	ldr	r2, [pc, #388]	; (800b2b0 <HAL_TIM_ConfigClockSource+0x1e8>)
 800b12a:	4293      	cmp	r3, r2
 800b12c:	f000 80a1 	beq.w	800b272 <HAL_TIM_ConfigClockSource+0x1aa>
 800b130:	4a5f      	ldr	r2, [pc, #380]	; (800b2b0 <HAL_TIM_ConfigClockSource+0x1e8>)
 800b132:	4293      	cmp	r3, r2
 800b134:	f200 80a6 	bhi.w	800b284 <HAL_TIM_ConfigClockSource+0x1bc>
 800b138:	4a5e      	ldr	r2, [pc, #376]	; (800b2b4 <HAL_TIM_ConfigClockSource+0x1ec>)
 800b13a:	4293      	cmp	r3, r2
 800b13c:	f000 8099 	beq.w	800b272 <HAL_TIM_ConfigClockSource+0x1aa>
 800b140:	4a5c      	ldr	r2, [pc, #368]	; (800b2b4 <HAL_TIM_ConfigClockSource+0x1ec>)
 800b142:	4293      	cmp	r3, r2
 800b144:	f200 809e 	bhi.w	800b284 <HAL_TIM_ConfigClockSource+0x1bc>
 800b148:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800b14c:	f000 8091 	beq.w	800b272 <HAL_TIM_ConfigClockSource+0x1aa>
 800b150:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800b154:	f200 8096 	bhi.w	800b284 <HAL_TIM_ConfigClockSource+0x1bc>
 800b158:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b15c:	f000 8089 	beq.w	800b272 <HAL_TIM_ConfigClockSource+0x1aa>
 800b160:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b164:	f200 808e 	bhi.w	800b284 <HAL_TIM_ConfigClockSource+0x1bc>
 800b168:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b16c:	d03e      	beq.n	800b1ec <HAL_TIM_ConfigClockSource+0x124>
 800b16e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b172:	f200 8087 	bhi.w	800b284 <HAL_TIM_ConfigClockSource+0x1bc>
 800b176:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b17a:	f000 8086 	beq.w	800b28a <HAL_TIM_ConfigClockSource+0x1c2>
 800b17e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b182:	d87f      	bhi.n	800b284 <HAL_TIM_ConfigClockSource+0x1bc>
 800b184:	2b70      	cmp	r3, #112	; 0x70
 800b186:	d01a      	beq.n	800b1be <HAL_TIM_ConfigClockSource+0xf6>
 800b188:	2b70      	cmp	r3, #112	; 0x70
 800b18a:	d87b      	bhi.n	800b284 <HAL_TIM_ConfigClockSource+0x1bc>
 800b18c:	2b60      	cmp	r3, #96	; 0x60
 800b18e:	d050      	beq.n	800b232 <HAL_TIM_ConfigClockSource+0x16a>
 800b190:	2b60      	cmp	r3, #96	; 0x60
 800b192:	d877      	bhi.n	800b284 <HAL_TIM_ConfigClockSource+0x1bc>
 800b194:	2b50      	cmp	r3, #80	; 0x50
 800b196:	d03c      	beq.n	800b212 <HAL_TIM_ConfigClockSource+0x14a>
 800b198:	2b50      	cmp	r3, #80	; 0x50
 800b19a:	d873      	bhi.n	800b284 <HAL_TIM_ConfigClockSource+0x1bc>
 800b19c:	2b40      	cmp	r3, #64	; 0x40
 800b19e:	d058      	beq.n	800b252 <HAL_TIM_ConfigClockSource+0x18a>
 800b1a0:	2b40      	cmp	r3, #64	; 0x40
 800b1a2:	d86f      	bhi.n	800b284 <HAL_TIM_ConfigClockSource+0x1bc>
 800b1a4:	2b30      	cmp	r3, #48	; 0x30
 800b1a6:	d064      	beq.n	800b272 <HAL_TIM_ConfigClockSource+0x1aa>
 800b1a8:	2b30      	cmp	r3, #48	; 0x30
 800b1aa:	d86b      	bhi.n	800b284 <HAL_TIM_ConfigClockSource+0x1bc>
 800b1ac:	2b20      	cmp	r3, #32
 800b1ae:	d060      	beq.n	800b272 <HAL_TIM_ConfigClockSource+0x1aa>
 800b1b0:	2b20      	cmp	r3, #32
 800b1b2:	d867      	bhi.n	800b284 <HAL_TIM_ConfigClockSource+0x1bc>
 800b1b4:	2b00      	cmp	r3, #0
 800b1b6:	d05c      	beq.n	800b272 <HAL_TIM_ConfigClockSource+0x1aa>
 800b1b8:	2b10      	cmp	r3, #16
 800b1ba:	d05a      	beq.n	800b272 <HAL_TIM_ConfigClockSource+0x1aa>
 800b1bc:	e062      	b.n	800b284 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b1be:	687b      	ldr	r3, [r7, #4]
 800b1c0:	6818      	ldr	r0, [r3, #0]
 800b1c2:	683b      	ldr	r3, [r7, #0]
 800b1c4:	6899      	ldr	r1, [r3, #8]
 800b1c6:	683b      	ldr	r3, [r7, #0]
 800b1c8:	685a      	ldr	r2, [r3, #4]
 800b1ca:	683b      	ldr	r3, [r7, #0]
 800b1cc:	68db      	ldr	r3, [r3, #12]
 800b1ce:	f000 fda9 	bl	800bd24 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800b1d2:	687b      	ldr	r3, [r7, #4]
 800b1d4:	681b      	ldr	r3, [r3, #0]
 800b1d6:	689b      	ldr	r3, [r3, #8]
 800b1d8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800b1da:	68bb      	ldr	r3, [r7, #8]
 800b1dc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800b1e0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800b1e2:	687b      	ldr	r3, [r7, #4]
 800b1e4:	681b      	ldr	r3, [r3, #0]
 800b1e6:	68ba      	ldr	r2, [r7, #8]
 800b1e8:	609a      	str	r2, [r3, #8]
      break;
 800b1ea:	e04f      	b.n	800b28c <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b1ec:	687b      	ldr	r3, [r7, #4]
 800b1ee:	6818      	ldr	r0, [r3, #0]
 800b1f0:	683b      	ldr	r3, [r7, #0]
 800b1f2:	6899      	ldr	r1, [r3, #8]
 800b1f4:	683b      	ldr	r3, [r7, #0]
 800b1f6:	685a      	ldr	r2, [r3, #4]
 800b1f8:	683b      	ldr	r3, [r7, #0]
 800b1fa:	68db      	ldr	r3, [r3, #12]
 800b1fc:	f000 fd92 	bl	800bd24 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800b200:	687b      	ldr	r3, [r7, #4]
 800b202:	681b      	ldr	r3, [r3, #0]
 800b204:	689a      	ldr	r2, [r3, #8]
 800b206:	687b      	ldr	r3, [r7, #4]
 800b208:	681b      	ldr	r3, [r3, #0]
 800b20a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800b20e:	609a      	str	r2, [r3, #8]
      break;
 800b210:	e03c      	b.n	800b28c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b212:	687b      	ldr	r3, [r7, #4]
 800b214:	6818      	ldr	r0, [r3, #0]
 800b216:	683b      	ldr	r3, [r7, #0]
 800b218:	6859      	ldr	r1, [r3, #4]
 800b21a:	683b      	ldr	r3, [r7, #0]
 800b21c:	68db      	ldr	r3, [r3, #12]
 800b21e:	461a      	mov	r2, r3
 800b220:	f000 fc4c 	bl	800babc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800b224:	687b      	ldr	r3, [r7, #4]
 800b226:	681b      	ldr	r3, [r3, #0]
 800b228:	2150      	movs	r1, #80	; 0x50
 800b22a:	4618      	mov	r0, r3
 800b22c:	f000 fd5c 	bl	800bce8 <TIM_ITRx_SetConfig>
      break;
 800b230:	e02c      	b.n	800b28c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800b232:	687b      	ldr	r3, [r7, #4]
 800b234:	6818      	ldr	r0, [r3, #0]
 800b236:	683b      	ldr	r3, [r7, #0]
 800b238:	6859      	ldr	r1, [r3, #4]
 800b23a:	683b      	ldr	r3, [r7, #0]
 800b23c:	68db      	ldr	r3, [r3, #12]
 800b23e:	461a      	mov	r2, r3
 800b240:	f000 fca8 	bl	800bb94 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800b244:	687b      	ldr	r3, [r7, #4]
 800b246:	681b      	ldr	r3, [r3, #0]
 800b248:	2160      	movs	r1, #96	; 0x60
 800b24a:	4618      	mov	r0, r3
 800b24c:	f000 fd4c 	bl	800bce8 <TIM_ITRx_SetConfig>
      break;
 800b250:	e01c      	b.n	800b28c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b252:	687b      	ldr	r3, [r7, #4]
 800b254:	6818      	ldr	r0, [r3, #0]
 800b256:	683b      	ldr	r3, [r7, #0]
 800b258:	6859      	ldr	r1, [r3, #4]
 800b25a:	683b      	ldr	r3, [r7, #0]
 800b25c:	68db      	ldr	r3, [r3, #12]
 800b25e:	461a      	mov	r2, r3
 800b260:	f000 fc2c 	bl	800babc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800b264:	687b      	ldr	r3, [r7, #4]
 800b266:	681b      	ldr	r3, [r3, #0]
 800b268:	2140      	movs	r1, #64	; 0x40
 800b26a:	4618      	mov	r0, r3
 800b26c:	f000 fd3c 	bl	800bce8 <TIM_ITRx_SetConfig>
      break;
 800b270:	e00c      	b.n	800b28c <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800b272:	687b      	ldr	r3, [r7, #4]
 800b274:	681a      	ldr	r2, [r3, #0]
 800b276:	683b      	ldr	r3, [r7, #0]
 800b278:	681b      	ldr	r3, [r3, #0]
 800b27a:	4619      	mov	r1, r3
 800b27c:	4610      	mov	r0, r2
 800b27e:	f000 fd33 	bl	800bce8 <TIM_ITRx_SetConfig>
      break;
 800b282:	e003      	b.n	800b28c <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800b284:	2301      	movs	r3, #1
 800b286:	73fb      	strb	r3, [r7, #15]
      break;
 800b288:	e000      	b.n	800b28c <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800b28a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800b28c:	687b      	ldr	r3, [r7, #4]
 800b28e:	2201      	movs	r2, #1
 800b290:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b294:	687b      	ldr	r3, [r7, #4]
 800b296:	2200      	movs	r2, #0
 800b298:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800b29c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b29e:	4618      	mov	r0, r3
 800b2a0:	3710      	adds	r7, #16
 800b2a2:	46bd      	mov	sp, r7
 800b2a4:	bd80      	pop	{r7, pc}
 800b2a6:	bf00      	nop
 800b2a8:	ffceff88 	.word	0xffceff88
 800b2ac:	00100040 	.word	0x00100040
 800b2b0:	00100030 	.word	0x00100030
 800b2b4:	00100020 	.word	0x00100020

0800b2b8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800b2b8:	b480      	push	{r7}
 800b2ba:	b083      	sub	sp, #12
 800b2bc:	af00      	add	r7, sp, #0
 800b2be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800b2c0:	bf00      	nop
 800b2c2:	370c      	adds	r7, #12
 800b2c4:	46bd      	mov	sp, r7
 800b2c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2ca:	4770      	bx	lr

0800b2cc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800b2cc:	b480      	push	{r7}
 800b2ce:	b083      	sub	sp, #12
 800b2d0:	af00      	add	r7, sp, #0
 800b2d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800b2d4:	bf00      	nop
 800b2d6:	370c      	adds	r7, #12
 800b2d8:	46bd      	mov	sp, r7
 800b2da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2de:	4770      	bx	lr

0800b2e0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800b2e0:	b480      	push	{r7}
 800b2e2:	b083      	sub	sp, #12
 800b2e4:	af00      	add	r7, sp, #0
 800b2e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800b2e8:	bf00      	nop
 800b2ea:	370c      	adds	r7, #12
 800b2ec:	46bd      	mov	sp, r7
 800b2ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2f2:	4770      	bx	lr

0800b2f4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800b2f4:	b480      	push	{r7}
 800b2f6:	b085      	sub	sp, #20
 800b2f8:	af00      	add	r7, sp, #0
 800b2fa:	6078      	str	r0, [r7, #4]
 800b2fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800b2fe:	687b      	ldr	r3, [r7, #4]
 800b300:	681b      	ldr	r3, [r3, #0]
 800b302:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b304:	687b      	ldr	r3, [r7, #4]
 800b306:	4a40      	ldr	r2, [pc, #256]	; (800b408 <TIM_Base_SetConfig+0x114>)
 800b308:	4293      	cmp	r3, r2
 800b30a:	d013      	beq.n	800b334 <TIM_Base_SetConfig+0x40>
 800b30c:	687b      	ldr	r3, [r7, #4]
 800b30e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b312:	d00f      	beq.n	800b334 <TIM_Base_SetConfig+0x40>
 800b314:	687b      	ldr	r3, [r7, #4]
 800b316:	4a3d      	ldr	r2, [pc, #244]	; (800b40c <TIM_Base_SetConfig+0x118>)
 800b318:	4293      	cmp	r3, r2
 800b31a:	d00b      	beq.n	800b334 <TIM_Base_SetConfig+0x40>
 800b31c:	687b      	ldr	r3, [r7, #4]
 800b31e:	4a3c      	ldr	r2, [pc, #240]	; (800b410 <TIM_Base_SetConfig+0x11c>)
 800b320:	4293      	cmp	r3, r2
 800b322:	d007      	beq.n	800b334 <TIM_Base_SetConfig+0x40>
 800b324:	687b      	ldr	r3, [r7, #4]
 800b326:	4a3b      	ldr	r2, [pc, #236]	; (800b414 <TIM_Base_SetConfig+0x120>)
 800b328:	4293      	cmp	r3, r2
 800b32a:	d003      	beq.n	800b334 <TIM_Base_SetConfig+0x40>
 800b32c:	687b      	ldr	r3, [r7, #4]
 800b32e:	4a3a      	ldr	r2, [pc, #232]	; (800b418 <TIM_Base_SetConfig+0x124>)
 800b330:	4293      	cmp	r3, r2
 800b332:	d108      	bne.n	800b346 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800b334:	68fb      	ldr	r3, [r7, #12]
 800b336:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b33a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800b33c:	683b      	ldr	r3, [r7, #0]
 800b33e:	685b      	ldr	r3, [r3, #4]
 800b340:	68fa      	ldr	r2, [r7, #12]
 800b342:	4313      	orrs	r3, r2
 800b344:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800b346:	687b      	ldr	r3, [r7, #4]
 800b348:	4a2f      	ldr	r2, [pc, #188]	; (800b408 <TIM_Base_SetConfig+0x114>)
 800b34a:	4293      	cmp	r3, r2
 800b34c:	d01f      	beq.n	800b38e <TIM_Base_SetConfig+0x9a>
 800b34e:	687b      	ldr	r3, [r7, #4]
 800b350:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b354:	d01b      	beq.n	800b38e <TIM_Base_SetConfig+0x9a>
 800b356:	687b      	ldr	r3, [r7, #4]
 800b358:	4a2c      	ldr	r2, [pc, #176]	; (800b40c <TIM_Base_SetConfig+0x118>)
 800b35a:	4293      	cmp	r3, r2
 800b35c:	d017      	beq.n	800b38e <TIM_Base_SetConfig+0x9a>
 800b35e:	687b      	ldr	r3, [r7, #4]
 800b360:	4a2b      	ldr	r2, [pc, #172]	; (800b410 <TIM_Base_SetConfig+0x11c>)
 800b362:	4293      	cmp	r3, r2
 800b364:	d013      	beq.n	800b38e <TIM_Base_SetConfig+0x9a>
 800b366:	687b      	ldr	r3, [r7, #4]
 800b368:	4a2a      	ldr	r2, [pc, #168]	; (800b414 <TIM_Base_SetConfig+0x120>)
 800b36a:	4293      	cmp	r3, r2
 800b36c:	d00f      	beq.n	800b38e <TIM_Base_SetConfig+0x9a>
 800b36e:	687b      	ldr	r3, [r7, #4]
 800b370:	4a29      	ldr	r2, [pc, #164]	; (800b418 <TIM_Base_SetConfig+0x124>)
 800b372:	4293      	cmp	r3, r2
 800b374:	d00b      	beq.n	800b38e <TIM_Base_SetConfig+0x9a>
 800b376:	687b      	ldr	r3, [r7, #4]
 800b378:	4a28      	ldr	r2, [pc, #160]	; (800b41c <TIM_Base_SetConfig+0x128>)
 800b37a:	4293      	cmp	r3, r2
 800b37c:	d007      	beq.n	800b38e <TIM_Base_SetConfig+0x9a>
 800b37e:	687b      	ldr	r3, [r7, #4]
 800b380:	4a27      	ldr	r2, [pc, #156]	; (800b420 <TIM_Base_SetConfig+0x12c>)
 800b382:	4293      	cmp	r3, r2
 800b384:	d003      	beq.n	800b38e <TIM_Base_SetConfig+0x9a>
 800b386:	687b      	ldr	r3, [r7, #4]
 800b388:	4a26      	ldr	r2, [pc, #152]	; (800b424 <TIM_Base_SetConfig+0x130>)
 800b38a:	4293      	cmp	r3, r2
 800b38c:	d108      	bne.n	800b3a0 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800b38e:	68fb      	ldr	r3, [r7, #12]
 800b390:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b394:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800b396:	683b      	ldr	r3, [r7, #0]
 800b398:	68db      	ldr	r3, [r3, #12]
 800b39a:	68fa      	ldr	r2, [r7, #12]
 800b39c:	4313      	orrs	r3, r2
 800b39e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800b3a0:	68fb      	ldr	r3, [r7, #12]
 800b3a2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800b3a6:	683b      	ldr	r3, [r7, #0]
 800b3a8:	695b      	ldr	r3, [r3, #20]
 800b3aa:	4313      	orrs	r3, r2
 800b3ac:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800b3ae:	687b      	ldr	r3, [r7, #4]
 800b3b0:	68fa      	ldr	r2, [r7, #12]
 800b3b2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800b3b4:	683b      	ldr	r3, [r7, #0]
 800b3b6:	689a      	ldr	r2, [r3, #8]
 800b3b8:	687b      	ldr	r3, [r7, #4]
 800b3ba:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800b3bc:	683b      	ldr	r3, [r7, #0]
 800b3be:	681a      	ldr	r2, [r3, #0]
 800b3c0:	687b      	ldr	r3, [r7, #4]
 800b3c2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800b3c4:	687b      	ldr	r3, [r7, #4]
 800b3c6:	4a10      	ldr	r2, [pc, #64]	; (800b408 <TIM_Base_SetConfig+0x114>)
 800b3c8:	4293      	cmp	r3, r2
 800b3ca:	d00f      	beq.n	800b3ec <TIM_Base_SetConfig+0xf8>
 800b3cc:	687b      	ldr	r3, [r7, #4]
 800b3ce:	4a12      	ldr	r2, [pc, #72]	; (800b418 <TIM_Base_SetConfig+0x124>)
 800b3d0:	4293      	cmp	r3, r2
 800b3d2:	d00b      	beq.n	800b3ec <TIM_Base_SetConfig+0xf8>
 800b3d4:	687b      	ldr	r3, [r7, #4]
 800b3d6:	4a11      	ldr	r2, [pc, #68]	; (800b41c <TIM_Base_SetConfig+0x128>)
 800b3d8:	4293      	cmp	r3, r2
 800b3da:	d007      	beq.n	800b3ec <TIM_Base_SetConfig+0xf8>
 800b3dc:	687b      	ldr	r3, [r7, #4]
 800b3de:	4a10      	ldr	r2, [pc, #64]	; (800b420 <TIM_Base_SetConfig+0x12c>)
 800b3e0:	4293      	cmp	r3, r2
 800b3e2:	d003      	beq.n	800b3ec <TIM_Base_SetConfig+0xf8>
 800b3e4:	687b      	ldr	r3, [r7, #4]
 800b3e6:	4a0f      	ldr	r2, [pc, #60]	; (800b424 <TIM_Base_SetConfig+0x130>)
 800b3e8:	4293      	cmp	r3, r2
 800b3ea:	d103      	bne.n	800b3f4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800b3ec:	683b      	ldr	r3, [r7, #0]
 800b3ee:	691a      	ldr	r2, [r3, #16]
 800b3f0:	687b      	ldr	r3, [r7, #4]
 800b3f2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800b3f4:	687b      	ldr	r3, [r7, #4]
 800b3f6:	2201      	movs	r2, #1
 800b3f8:	615a      	str	r2, [r3, #20]
}
 800b3fa:	bf00      	nop
 800b3fc:	3714      	adds	r7, #20
 800b3fe:	46bd      	mov	sp, r7
 800b400:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b404:	4770      	bx	lr
 800b406:	bf00      	nop
 800b408:	40010000 	.word	0x40010000
 800b40c:	40000400 	.word	0x40000400
 800b410:	40000800 	.word	0x40000800
 800b414:	40000c00 	.word	0x40000c00
 800b418:	40010400 	.word	0x40010400
 800b41c:	40014000 	.word	0x40014000
 800b420:	40014400 	.word	0x40014400
 800b424:	40014800 	.word	0x40014800

0800b428 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b428:	b480      	push	{r7}
 800b42a:	b087      	sub	sp, #28
 800b42c:	af00      	add	r7, sp, #0
 800b42e:	6078      	str	r0, [r7, #4]
 800b430:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b432:	687b      	ldr	r3, [r7, #4]
 800b434:	6a1b      	ldr	r3, [r3, #32]
 800b436:	f023 0201 	bic.w	r2, r3, #1
 800b43a:	687b      	ldr	r3, [r7, #4]
 800b43c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b43e:	687b      	ldr	r3, [r7, #4]
 800b440:	6a1b      	ldr	r3, [r3, #32]
 800b442:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b444:	687b      	ldr	r3, [r7, #4]
 800b446:	685b      	ldr	r3, [r3, #4]
 800b448:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b44a:	687b      	ldr	r3, [r7, #4]
 800b44c:	699b      	ldr	r3, [r3, #24]
 800b44e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800b450:	68fa      	ldr	r2, [r7, #12]
 800b452:	4b37      	ldr	r3, [pc, #220]	; (800b530 <TIM_OC1_SetConfig+0x108>)
 800b454:	4013      	ands	r3, r2
 800b456:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800b458:	68fb      	ldr	r3, [r7, #12]
 800b45a:	f023 0303 	bic.w	r3, r3, #3
 800b45e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b460:	683b      	ldr	r3, [r7, #0]
 800b462:	681b      	ldr	r3, [r3, #0]
 800b464:	68fa      	ldr	r2, [r7, #12]
 800b466:	4313      	orrs	r3, r2
 800b468:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800b46a:	697b      	ldr	r3, [r7, #20]
 800b46c:	f023 0302 	bic.w	r3, r3, #2
 800b470:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800b472:	683b      	ldr	r3, [r7, #0]
 800b474:	689b      	ldr	r3, [r3, #8]
 800b476:	697a      	ldr	r2, [r7, #20]
 800b478:	4313      	orrs	r3, r2
 800b47a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800b47c:	687b      	ldr	r3, [r7, #4]
 800b47e:	4a2d      	ldr	r2, [pc, #180]	; (800b534 <TIM_OC1_SetConfig+0x10c>)
 800b480:	4293      	cmp	r3, r2
 800b482:	d00f      	beq.n	800b4a4 <TIM_OC1_SetConfig+0x7c>
 800b484:	687b      	ldr	r3, [r7, #4]
 800b486:	4a2c      	ldr	r2, [pc, #176]	; (800b538 <TIM_OC1_SetConfig+0x110>)
 800b488:	4293      	cmp	r3, r2
 800b48a:	d00b      	beq.n	800b4a4 <TIM_OC1_SetConfig+0x7c>
 800b48c:	687b      	ldr	r3, [r7, #4]
 800b48e:	4a2b      	ldr	r2, [pc, #172]	; (800b53c <TIM_OC1_SetConfig+0x114>)
 800b490:	4293      	cmp	r3, r2
 800b492:	d007      	beq.n	800b4a4 <TIM_OC1_SetConfig+0x7c>
 800b494:	687b      	ldr	r3, [r7, #4]
 800b496:	4a2a      	ldr	r2, [pc, #168]	; (800b540 <TIM_OC1_SetConfig+0x118>)
 800b498:	4293      	cmp	r3, r2
 800b49a:	d003      	beq.n	800b4a4 <TIM_OC1_SetConfig+0x7c>
 800b49c:	687b      	ldr	r3, [r7, #4]
 800b49e:	4a29      	ldr	r2, [pc, #164]	; (800b544 <TIM_OC1_SetConfig+0x11c>)
 800b4a0:	4293      	cmp	r3, r2
 800b4a2:	d10c      	bne.n	800b4be <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800b4a4:	697b      	ldr	r3, [r7, #20]
 800b4a6:	f023 0308 	bic.w	r3, r3, #8
 800b4aa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800b4ac:	683b      	ldr	r3, [r7, #0]
 800b4ae:	68db      	ldr	r3, [r3, #12]
 800b4b0:	697a      	ldr	r2, [r7, #20]
 800b4b2:	4313      	orrs	r3, r2
 800b4b4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800b4b6:	697b      	ldr	r3, [r7, #20]
 800b4b8:	f023 0304 	bic.w	r3, r3, #4
 800b4bc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b4be:	687b      	ldr	r3, [r7, #4]
 800b4c0:	4a1c      	ldr	r2, [pc, #112]	; (800b534 <TIM_OC1_SetConfig+0x10c>)
 800b4c2:	4293      	cmp	r3, r2
 800b4c4:	d00f      	beq.n	800b4e6 <TIM_OC1_SetConfig+0xbe>
 800b4c6:	687b      	ldr	r3, [r7, #4]
 800b4c8:	4a1b      	ldr	r2, [pc, #108]	; (800b538 <TIM_OC1_SetConfig+0x110>)
 800b4ca:	4293      	cmp	r3, r2
 800b4cc:	d00b      	beq.n	800b4e6 <TIM_OC1_SetConfig+0xbe>
 800b4ce:	687b      	ldr	r3, [r7, #4]
 800b4d0:	4a1a      	ldr	r2, [pc, #104]	; (800b53c <TIM_OC1_SetConfig+0x114>)
 800b4d2:	4293      	cmp	r3, r2
 800b4d4:	d007      	beq.n	800b4e6 <TIM_OC1_SetConfig+0xbe>
 800b4d6:	687b      	ldr	r3, [r7, #4]
 800b4d8:	4a19      	ldr	r2, [pc, #100]	; (800b540 <TIM_OC1_SetConfig+0x118>)
 800b4da:	4293      	cmp	r3, r2
 800b4dc:	d003      	beq.n	800b4e6 <TIM_OC1_SetConfig+0xbe>
 800b4de:	687b      	ldr	r3, [r7, #4]
 800b4e0:	4a18      	ldr	r2, [pc, #96]	; (800b544 <TIM_OC1_SetConfig+0x11c>)
 800b4e2:	4293      	cmp	r3, r2
 800b4e4:	d111      	bne.n	800b50a <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800b4e6:	693b      	ldr	r3, [r7, #16]
 800b4e8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b4ec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800b4ee:	693b      	ldr	r3, [r7, #16]
 800b4f0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800b4f4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800b4f6:	683b      	ldr	r3, [r7, #0]
 800b4f8:	695b      	ldr	r3, [r3, #20]
 800b4fa:	693a      	ldr	r2, [r7, #16]
 800b4fc:	4313      	orrs	r3, r2
 800b4fe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800b500:	683b      	ldr	r3, [r7, #0]
 800b502:	699b      	ldr	r3, [r3, #24]
 800b504:	693a      	ldr	r2, [r7, #16]
 800b506:	4313      	orrs	r3, r2
 800b508:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b50a:	687b      	ldr	r3, [r7, #4]
 800b50c:	693a      	ldr	r2, [r7, #16]
 800b50e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b510:	687b      	ldr	r3, [r7, #4]
 800b512:	68fa      	ldr	r2, [r7, #12]
 800b514:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800b516:	683b      	ldr	r3, [r7, #0]
 800b518:	685a      	ldr	r2, [r3, #4]
 800b51a:	687b      	ldr	r3, [r7, #4]
 800b51c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b51e:	687b      	ldr	r3, [r7, #4]
 800b520:	697a      	ldr	r2, [r7, #20]
 800b522:	621a      	str	r2, [r3, #32]
}
 800b524:	bf00      	nop
 800b526:	371c      	adds	r7, #28
 800b528:	46bd      	mov	sp, r7
 800b52a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b52e:	4770      	bx	lr
 800b530:	fffeff8f 	.word	0xfffeff8f
 800b534:	40010000 	.word	0x40010000
 800b538:	40010400 	.word	0x40010400
 800b53c:	40014000 	.word	0x40014000
 800b540:	40014400 	.word	0x40014400
 800b544:	40014800 	.word	0x40014800

0800b548 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b548:	b480      	push	{r7}
 800b54a:	b087      	sub	sp, #28
 800b54c:	af00      	add	r7, sp, #0
 800b54e:	6078      	str	r0, [r7, #4]
 800b550:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b552:	687b      	ldr	r3, [r7, #4]
 800b554:	6a1b      	ldr	r3, [r3, #32]
 800b556:	f023 0210 	bic.w	r2, r3, #16
 800b55a:	687b      	ldr	r3, [r7, #4]
 800b55c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b55e:	687b      	ldr	r3, [r7, #4]
 800b560:	6a1b      	ldr	r3, [r3, #32]
 800b562:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b564:	687b      	ldr	r3, [r7, #4]
 800b566:	685b      	ldr	r3, [r3, #4]
 800b568:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b56a:	687b      	ldr	r3, [r7, #4]
 800b56c:	699b      	ldr	r3, [r3, #24]
 800b56e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800b570:	68fa      	ldr	r2, [r7, #12]
 800b572:	4b34      	ldr	r3, [pc, #208]	; (800b644 <TIM_OC2_SetConfig+0xfc>)
 800b574:	4013      	ands	r3, r2
 800b576:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800b578:	68fb      	ldr	r3, [r7, #12]
 800b57a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b57e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b580:	683b      	ldr	r3, [r7, #0]
 800b582:	681b      	ldr	r3, [r3, #0]
 800b584:	021b      	lsls	r3, r3, #8
 800b586:	68fa      	ldr	r2, [r7, #12]
 800b588:	4313      	orrs	r3, r2
 800b58a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800b58c:	697b      	ldr	r3, [r7, #20]
 800b58e:	f023 0320 	bic.w	r3, r3, #32
 800b592:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800b594:	683b      	ldr	r3, [r7, #0]
 800b596:	689b      	ldr	r3, [r3, #8]
 800b598:	011b      	lsls	r3, r3, #4
 800b59a:	697a      	ldr	r2, [r7, #20]
 800b59c:	4313      	orrs	r3, r2
 800b59e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800b5a0:	687b      	ldr	r3, [r7, #4]
 800b5a2:	4a29      	ldr	r2, [pc, #164]	; (800b648 <TIM_OC2_SetConfig+0x100>)
 800b5a4:	4293      	cmp	r3, r2
 800b5a6:	d003      	beq.n	800b5b0 <TIM_OC2_SetConfig+0x68>
 800b5a8:	687b      	ldr	r3, [r7, #4]
 800b5aa:	4a28      	ldr	r2, [pc, #160]	; (800b64c <TIM_OC2_SetConfig+0x104>)
 800b5ac:	4293      	cmp	r3, r2
 800b5ae:	d10d      	bne.n	800b5cc <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800b5b0:	697b      	ldr	r3, [r7, #20]
 800b5b2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b5b6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800b5b8:	683b      	ldr	r3, [r7, #0]
 800b5ba:	68db      	ldr	r3, [r3, #12]
 800b5bc:	011b      	lsls	r3, r3, #4
 800b5be:	697a      	ldr	r2, [r7, #20]
 800b5c0:	4313      	orrs	r3, r2
 800b5c2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800b5c4:	697b      	ldr	r3, [r7, #20]
 800b5c6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b5ca:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b5cc:	687b      	ldr	r3, [r7, #4]
 800b5ce:	4a1e      	ldr	r2, [pc, #120]	; (800b648 <TIM_OC2_SetConfig+0x100>)
 800b5d0:	4293      	cmp	r3, r2
 800b5d2:	d00f      	beq.n	800b5f4 <TIM_OC2_SetConfig+0xac>
 800b5d4:	687b      	ldr	r3, [r7, #4]
 800b5d6:	4a1d      	ldr	r2, [pc, #116]	; (800b64c <TIM_OC2_SetConfig+0x104>)
 800b5d8:	4293      	cmp	r3, r2
 800b5da:	d00b      	beq.n	800b5f4 <TIM_OC2_SetConfig+0xac>
 800b5dc:	687b      	ldr	r3, [r7, #4]
 800b5de:	4a1c      	ldr	r2, [pc, #112]	; (800b650 <TIM_OC2_SetConfig+0x108>)
 800b5e0:	4293      	cmp	r3, r2
 800b5e2:	d007      	beq.n	800b5f4 <TIM_OC2_SetConfig+0xac>
 800b5e4:	687b      	ldr	r3, [r7, #4]
 800b5e6:	4a1b      	ldr	r2, [pc, #108]	; (800b654 <TIM_OC2_SetConfig+0x10c>)
 800b5e8:	4293      	cmp	r3, r2
 800b5ea:	d003      	beq.n	800b5f4 <TIM_OC2_SetConfig+0xac>
 800b5ec:	687b      	ldr	r3, [r7, #4]
 800b5ee:	4a1a      	ldr	r2, [pc, #104]	; (800b658 <TIM_OC2_SetConfig+0x110>)
 800b5f0:	4293      	cmp	r3, r2
 800b5f2:	d113      	bne.n	800b61c <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800b5f4:	693b      	ldr	r3, [r7, #16]
 800b5f6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800b5fa:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800b5fc:	693b      	ldr	r3, [r7, #16]
 800b5fe:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800b602:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800b604:	683b      	ldr	r3, [r7, #0]
 800b606:	695b      	ldr	r3, [r3, #20]
 800b608:	009b      	lsls	r3, r3, #2
 800b60a:	693a      	ldr	r2, [r7, #16]
 800b60c:	4313      	orrs	r3, r2
 800b60e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800b610:	683b      	ldr	r3, [r7, #0]
 800b612:	699b      	ldr	r3, [r3, #24]
 800b614:	009b      	lsls	r3, r3, #2
 800b616:	693a      	ldr	r2, [r7, #16]
 800b618:	4313      	orrs	r3, r2
 800b61a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b61c:	687b      	ldr	r3, [r7, #4]
 800b61e:	693a      	ldr	r2, [r7, #16]
 800b620:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b622:	687b      	ldr	r3, [r7, #4]
 800b624:	68fa      	ldr	r2, [r7, #12]
 800b626:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800b628:	683b      	ldr	r3, [r7, #0]
 800b62a:	685a      	ldr	r2, [r3, #4]
 800b62c:	687b      	ldr	r3, [r7, #4]
 800b62e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b630:	687b      	ldr	r3, [r7, #4]
 800b632:	697a      	ldr	r2, [r7, #20]
 800b634:	621a      	str	r2, [r3, #32]
}
 800b636:	bf00      	nop
 800b638:	371c      	adds	r7, #28
 800b63a:	46bd      	mov	sp, r7
 800b63c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b640:	4770      	bx	lr
 800b642:	bf00      	nop
 800b644:	feff8fff 	.word	0xfeff8fff
 800b648:	40010000 	.word	0x40010000
 800b64c:	40010400 	.word	0x40010400
 800b650:	40014000 	.word	0x40014000
 800b654:	40014400 	.word	0x40014400
 800b658:	40014800 	.word	0x40014800

0800b65c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b65c:	b480      	push	{r7}
 800b65e:	b087      	sub	sp, #28
 800b660:	af00      	add	r7, sp, #0
 800b662:	6078      	str	r0, [r7, #4]
 800b664:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800b666:	687b      	ldr	r3, [r7, #4]
 800b668:	6a1b      	ldr	r3, [r3, #32]
 800b66a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800b66e:	687b      	ldr	r3, [r7, #4]
 800b670:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b672:	687b      	ldr	r3, [r7, #4]
 800b674:	6a1b      	ldr	r3, [r3, #32]
 800b676:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b678:	687b      	ldr	r3, [r7, #4]
 800b67a:	685b      	ldr	r3, [r3, #4]
 800b67c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b67e:	687b      	ldr	r3, [r7, #4]
 800b680:	69db      	ldr	r3, [r3, #28]
 800b682:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800b684:	68fa      	ldr	r2, [r7, #12]
 800b686:	4b33      	ldr	r3, [pc, #204]	; (800b754 <TIM_OC3_SetConfig+0xf8>)
 800b688:	4013      	ands	r3, r2
 800b68a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800b68c:	68fb      	ldr	r3, [r7, #12]
 800b68e:	f023 0303 	bic.w	r3, r3, #3
 800b692:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b694:	683b      	ldr	r3, [r7, #0]
 800b696:	681b      	ldr	r3, [r3, #0]
 800b698:	68fa      	ldr	r2, [r7, #12]
 800b69a:	4313      	orrs	r3, r2
 800b69c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800b69e:	697b      	ldr	r3, [r7, #20]
 800b6a0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800b6a4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800b6a6:	683b      	ldr	r3, [r7, #0]
 800b6a8:	689b      	ldr	r3, [r3, #8]
 800b6aa:	021b      	lsls	r3, r3, #8
 800b6ac:	697a      	ldr	r2, [r7, #20]
 800b6ae:	4313      	orrs	r3, r2
 800b6b0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800b6b2:	687b      	ldr	r3, [r7, #4]
 800b6b4:	4a28      	ldr	r2, [pc, #160]	; (800b758 <TIM_OC3_SetConfig+0xfc>)
 800b6b6:	4293      	cmp	r3, r2
 800b6b8:	d003      	beq.n	800b6c2 <TIM_OC3_SetConfig+0x66>
 800b6ba:	687b      	ldr	r3, [r7, #4]
 800b6bc:	4a27      	ldr	r2, [pc, #156]	; (800b75c <TIM_OC3_SetConfig+0x100>)
 800b6be:	4293      	cmp	r3, r2
 800b6c0:	d10d      	bne.n	800b6de <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800b6c2:	697b      	ldr	r3, [r7, #20]
 800b6c4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800b6c8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800b6ca:	683b      	ldr	r3, [r7, #0]
 800b6cc:	68db      	ldr	r3, [r3, #12]
 800b6ce:	021b      	lsls	r3, r3, #8
 800b6d0:	697a      	ldr	r2, [r7, #20]
 800b6d2:	4313      	orrs	r3, r2
 800b6d4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800b6d6:	697b      	ldr	r3, [r7, #20]
 800b6d8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800b6dc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b6de:	687b      	ldr	r3, [r7, #4]
 800b6e0:	4a1d      	ldr	r2, [pc, #116]	; (800b758 <TIM_OC3_SetConfig+0xfc>)
 800b6e2:	4293      	cmp	r3, r2
 800b6e4:	d00f      	beq.n	800b706 <TIM_OC3_SetConfig+0xaa>
 800b6e6:	687b      	ldr	r3, [r7, #4]
 800b6e8:	4a1c      	ldr	r2, [pc, #112]	; (800b75c <TIM_OC3_SetConfig+0x100>)
 800b6ea:	4293      	cmp	r3, r2
 800b6ec:	d00b      	beq.n	800b706 <TIM_OC3_SetConfig+0xaa>
 800b6ee:	687b      	ldr	r3, [r7, #4]
 800b6f0:	4a1b      	ldr	r2, [pc, #108]	; (800b760 <TIM_OC3_SetConfig+0x104>)
 800b6f2:	4293      	cmp	r3, r2
 800b6f4:	d007      	beq.n	800b706 <TIM_OC3_SetConfig+0xaa>
 800b6f6:	687b      	ldr	r3, [r7, #4]
 800b6f8:	4a1a      	ldr	r2, [pc, #104]	; (800b764 <TIM_OC3_SetConfig+0x108>)
 800b6fa:	4293      	cmp	r3, r2
 800b6fc:	d003      	beq.n	800b706 <TIM_OC3_SetConfig+0xaa>
 800b6fe:	687b      	ldr	r3, [r7, #4]
 800b700:	4a19      	ldr	r2, [pc, #100]	; (800b768 <TIM_OC3_SetConfig+0x10c>)
 800b702:	4293      	cmp	r3, r2
 800b704:	d113      	bne.n	800b72e <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800b706:	693b      	ldr	r3, [r7, #16]
 800b708:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b70c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800b70e:	693b      	ldr	r3, [r7, #16]
 800b710:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800b714:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800b716:	683b      	ldr	r3, [r7, #0]
 800b718:	695b      	ldr	r3, [r3, #20]
 800b71a:	011b      	lsls	r3, r3, #4
 800b71c:	693a      	ldr	r2, [r7, #16]
 800b71e:	4313      	orrs	r3, r2
 800b720:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800b722:	683b      	ldr	r3, [r7, #0]
 800b724:	699b      	ldr	r3, [r3, #24]
 800b726:	011b      	lsls	r3, r3, #4
 800b728:	693a      	ldr	r2, [r7, #16]
 800b72a:	4313      	orrs	r3, r2
 800b72c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b72e:	687b      	ldr	r3, [r7, #4]
 800b730:	693a      	ldr	r2, [r7, #16]
 800b732:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b734:	687b      	ldr	r3, [r7, #4]
 800b736:	68fa      	ldr	r2, [r7, #12]
 800b738:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800b73a:	683b      	ldr	r3, [r7, #0]
 800b73c:	685a      	ldr	r2, [r3, #4]
 800b73e:	687b      	ldr	r3, [r7, #4]
 800b740:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b742:	687b      	ldr	r3, [r7, #4]
 800b744:	697a      	ldr	r2, [r7, #20]
 800b746:	621a      	str	r2, [r3, #32]
}
 800b748:	bf00      	nop
 800b74a:	371c      	adds	r7, #28
 800b74c:	46bd      	mov	sp, r7
 800b74e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b752:	4770      	bx	lr
 800b754:	fffeff8f 	.word	0xfffeff8f
 800b758:	40010000 	.word	0x40010000
 800b75c:	40010400 	.word	0x40010400
 800b760:	40014000 	.word	0x40014000
 800b764:	40014400 	.word	0x40014400
 800b768:	40014800 	.word	0x40014800

0800b76c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b76c:	b480      	push	{r7}
 800b76e:	b087      	sub	sp, #28
 800b770:	af00      	add	r7, sp, #0
 800b772:	6078      	str	r0, [r7, #4]
 800b774:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800b776:	687b      	ldr	r3, [r7, #4]
 800b778:	6a1b      	ldr	r3, [r3, #32]
 800b77a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800b77e:	687b      	ldr	r3, [r7, #4]
 800b780:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b782:	687b      	ldr	r3, [r7, #4]
 800b784:	6a1b      	ldr	r3, [r3, #32]
 800b786:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b788:	687b      	ldr	r3, [r7, #4]
 800b78a:	685b      	ldr	r3, [r3, #4]
 800b78c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b78e:	687b      	ldr	r3, [r7, #4]
 800b790:	69db      	ldr	r3, [r3, #28]
 800b792:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800b794:	68fa      	ldr	r2, [r7, #12]
 800b796:	4b24      	ldr	r3, [pc, #144]	; (800b828 <TIM_OC4_SetConfig+0xbc>)
 800b798:	4013      	ands	r3, r2
 800b79a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800b79c:	68fb      	ldr	r3, [r7, #12]
 800b79e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b7a2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b7a4:	683b      	ldr	r3, [r7, #0]
 800b7a6:	681b      	ldr	r3, [r3, #0]
 800b7a8:	021b      	lsls	r3, r3, #8
 800b7aa:	68fa      	ldr	r2, [r7, #12]
 800b7ac:	4313      	orrs	r3, r2
 800b7ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800b7b0:	693b      	ldr	r3, [r7, #16]
 800b7b2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800b7b6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800b7b8:	683b      	ldr	r3, [r7, #0]
 800b7ba:	689b      	ldr	r3, [r3, #8]
 800b7bc:	031b      	lsls	r3, r3, #12
 800b7be:	693a      	ldr	r2, [r7, #16]
 800b7c0:	4313      	orrs	r3, r2
 800b7c2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b7c4:	687b      	ldr	r3, [r7, #4]
 800b7c6:	4a19      	ldr	r2, [pc, #100]	; (800b82c <TIM_OC4_SetConfig+0xc0>)
 800b7c8:	4293      	cmp	r3, r2
 800b7ca:	d00f      	beq.n	800b7ec <TIM_OC4_SetConfig+0x80>
 800b7cc:	687b      	ldr	r3, [r7, #4]
 800b7ce:	4a18      	ldr	r2, [pc, #96]	; (800b830 <TIM_OC4_SetConfig+0xc4>)
 800b7d0:	4293      	cmp	r3, r2
 800b7d2:	d00b      	beq.n	800b7ec <TIM_OC4_SetConfig+0x80>
 800b7d4:	687b      	ldr	r3, [r7, #4]
 800b7d6:	4a17      	ldr	r2, [pc, #92]	; (800b834 <TIM_OC4_SetConfig+0xc8>)
 800b7d8:	4293      	cmp	r3, r2
 800b7da:	d007      	beq.n	800b7ec <TIM_OC4_SetConfig+0x80>
 800b7dc:	687b      	ldr	r3, [r7, #4]
 800b7de:	4a16      	ldr	r2, [pc, #88]	; (800b838 <TIM_OC4_SetConfig+0xcc>)
 800b7e0:	4293      	cmp	r3, r2
 800b7e2:	d003      	beq.n	800b7ec <TIM_OC4_SetConfig+0x80>
 800b7e4:	687b      	ldr	r3, [r7, #4]
 800b7e6:	4a15      	ldr	r2, [pc, #84]	; (800b83c <TIM_OC4_SetConfig+0xd0>)
 800b7e8:	4293      	cmp	r3, r2
 800b7ea:	d109      	bne.n	800b800 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800b7ec:	697b      	ldr	r3, [r7, #20]
 800b7ee:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b7f2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800b7f4:	683b      	ldr	r3, [r7, #0]
 800b7f6:	695b      	ldr	r3, [r3, #20]
 800b7f8:	019b      	lsls	r3, r3, #6
 800b7fa:	697a      	ldr	r2, [r7, #20]
 800b7fc:	4313      	orrs	r3, r2
 800b7fe:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b800:	687b      	ldr	r3, [r7, #4]
 800b802:	697a      	ldr	r2, [r7, #20]
 800b804:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b806:	687b      	ldr	r3, [r7, #4]
 800b808:	68fa      	ldr	r2, [r7, #12]
 800b80a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800b80c:	683b      	ldr	r3, [r7, #0]
 800b80e:	685a      	ldr	r2, [r3, #4]
 800b810:	687b      	ldr	r3, [r7, #4]
 800b812:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b814:	687b      	ldr	r3, [r7, #4]
 800b816:	693a      	ldr	r2, [r7, #16]
 800b818:	621a      	str	r2, [r3, #32]
}
 800b81a:	bf00      	nop
 800b81c:	371c      	adds	r7, #28
 800b81e:	46bd      	mov	sp, r7
 800b820:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b824:	4770      	bx	lr
 800b826:	bf00      	nop
 800b828:	feff8fff 	.word	0xfeff8fff
 800b82c:	40010000 	.word	0x40010000
 800b830:	40010400 	.word	0x40010400
 800b834:	40014000 	.word	0x40014000
 800b838:	40014400 	.word	0x40014400
 800b83c:	40014800 	.word	0x40014800

0800b840 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800b840:	b480      	push	{r7}
 800b842:	b087      	sub	sp, #28
 800b844:	af00      	add	r7, sp, #0
 800b846:	6078      	str	r0, [r7, #4]
 800b848:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800b84a:	687b      	ldr	r3, [r7, #4]
 800b84c:	6a1b      	ldr	r3, [r3, #32]
 800b84e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800b852:	687b      	ldr	r3, [r7, #4]
 800b854:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b856:	687b      	ldr	r3, [r7, #4]
 800b858:	6a1b      	ldr	r3, [r3, #32]
 800b85a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b85c:	687b      	ldr	r3, [r7, #4]
 800b85e:	685b      	ldr	r3, [r3, #4]
 800b860:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800b862:	687b      	ldr	r3, [r7, #4]
 800b864:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b866:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800b868:	68fa      	ldr	r2, [r7, #12]
 800b86a:	4b21      	ldr	r3, [pc, #132]	; (800b8f0 <TIM_OC5_SetConfig+0xb0>)
 800b86c:	4013      	ands	r3, r2
 800b86e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b870:	683b      	ldr	r3, [r7, #0]
 800b872:	681b      	ldr	r3, [r3, #0]
 800b874:	68fa      	ldr	r2, [r7, #12]
 800b876:	4313      	orrs	r3, r2
 800b878:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800b87a:	693b      	ldr	r3, [r7, #16]
 800b87c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800b880:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800b882:	683b      	ldr	r3, [r7, #0]
 800b884:	689b      	ldr	r3, [r3, #8]
 800b886:	041b      	lsls	r3, r3, #16
 800b888:	693a      	ldr	r2, [r7, #16]
 800b88a:	4313      	orrs	r3, r2
 800b88c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b88e:	687b      	ldr	r3, [r7, #4]
 800b890:	4a18      	ldr	r2, [pc, #96]	; (800b8f4 <TIM_OC5_SetConfig+0xb4>)
 800b892:	4293      	cmp	r3, r2
 800b894:	d00f      	beq.n	800b8b6 <TIM_OC5_SetConfig+0x76>
 800b896:	687b      	ldr	r3, [r7, #4]
 800b898:	4a17      	ldr	r2, [pc, #92]	; (800b8f8 <TIM_OC5_SetConfig+0xb8>)
 800b89a:	4293      	cmp	r3, r2
 800b89c:	d00b      	beq.n	800b8b6 <TIM_OC5_SetConfig+0x76>
 800b89e:	687b      	ldr	r3, [r7, #4]
 800b8a0:	4a16      	ldr	r2, [pc, #88]	; (800b8fc <TIM_OC5_SetConfig+0xbc>)
 800b8a2:	4293      	cmp	r3, r2
 800b8a4:	d007      	beq.n	800b8b6 <TIM_OC5_SetConfig+0x76>
 800b8a6:	687b      	ldr	r3, [r7, #4]
 800b8a8:	4a15      	ldr	r2, [pc, #84]	; (800b900 <TIM_OC5_SetConfig+0xc0>)
 800b8aa:	4293      	cmp	r3, r2
 800b8ac:	d003      	beq.n	800b8b6 <TIM_OC5_SetConfig+0x76>
 800b8ae:	687b      	ldr	r3, [r7, #4]
 800b8b0:	4a14      	ldr	r2, [pc, #80]	; (800b904 <TIM_OC5_SetConfig+0xc4>)
 800b8b2:	4293      	cmp	r3, r2
 800b8b4:	d109      	bne.n	800b8ca <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800b8b6:	697b      	ldr	r3, [r7, #20]
 800b8b8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b8bc:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800b8be:	683b      	ldr	r3, [r7, #0]
 800b8c0:	695b      	ldr	r3, [r3, #20]
 800b8c2:	021b      	lsls	r3, r3, #8
 800b8c4:	697a      	ldr	r2, [r7, #20]
 800b8c6:	4313      	orrs	r3, r2
 800b8c8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b8ca:	687b      	ldr	r3, [r7, #4]
 800b8cc:	697a      	ldr	r2, [r7, #20]
 800b8ce:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800b8d0:	687b      	ldr	r3, [r7, #4]
 800b8d2:	68fa      	ldr	r2, [r7, #12]
 800b8d4:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800b8d6:	683b      	ldr	r3, [r7, #0]
 800b8d8:	685a      	ldr	r2, [r3, #4]
 800b8da:	687b      	ldr	r3, [r7, #4]
 800b8dc:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b8de:	687b      	ldr	r3, [r7, #4]
 800b8e0:	693a      	ldr	r2, [r7, #16]
 800b8e2:	621a      	str	r2, [r3, #32]
}
 800b8e4:	bf00      	nop
 800b8e6:	371c      	adds	r7, #28
 800b8e8:	46bd      	mov	sp, r7
 800b8ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8ee:	4770      	bx	lr
 800b8f0:	fffeff8f 	.word	0xfffeff8f
 800b8f4:	40010000 	.word	0x40010000
 800b8f8:	40010400 	.word	0x40010400
 800b8fc:	40014000 	.word	0x40014000
 800b900:	40014400 	.word	0x40014400
 800b904:	40014800 	.word	0x40014800

0800b908 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800b908:	b480      	push	{r7}
 800b90a:	b087      	sub	sp, #28
 800b90c:	af00      	add	r7, sp, #0
 800b90e:	6078      	str	r0, [r7, #4]
 800b910:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800b912:	687b      	ldr	r3, [r7, #4]
 800b914:	6a1b      	ldr	r3, [r3, #32]
 800b916:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800b91a:	687b      	ldr	r3, [r7, #4]
 800b91c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b91e:	687b      	ldr	r3, [r7, #4]
 800b920:	6a1b      	ldr	r3, [r3, #32]
 800b922:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b924:	687b      	ldr	r3, [r7, #4]
 800b926:	685b      	ldr	r3, [r3, #4]
 800b928:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800b92a:	687b      	ldr	r3, [r7, #4]
 800b92c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b92e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800b930:	68fa      	ldr	r2, [r7, #12]
 800b932:	4b22      	ldr	r3, [pc, #136]	; (800b9bc <TIM_OC6_SetConfig+0xb4>)
 800b934:	4013      	ands	r3, r2
 800b936:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b938:	683b      	ldr	r3, [r7, #0]
 800b93a:	681b      	ldr	r3, [r3, #0]
 800b93c:	021b      	lsls	r3, r3, #8
 800b93e:	68fa      	ldr	r2, [r7, #12]
 800b940:	4313      	orrs	r3, r2
 800b942:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800b944:	693b      	ldr	r3, [r7, #16]
 800b946:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800b94a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800b94c:	683b      	ldr	r3, [r7, #0]
 800b94e:	689b      	ldr	r3, [r3, #8]
 800b950:	051b      	lsls	r3, r3, #20
 800b952:	693a      	ldr	r2, [r7, #16]
 800b954:	4313      	orrs	r3, r2
 800b956:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b958:	687b      	ldr	r3, [r7, #4]
 800b95a:	4a19      	ldr	r2, [pc, #100]	; (800b9c0 <TIM_OC6_SetConfig+0xb8>)
 800b95c:	4293      	cmp	r3, r2
 800b95e:	d00f      	beq.n	800b980 <TIM_OC6_SetConfig+0x78>
 800b960:	687b      	ldr	r3, [r7, #4]
 800b962:	4a18      	ldr	r2, [pc, #96]	; (800b9c4 <TIM_OC6_SetConfig+0xbc>)
 800b964:	4293      	cmp	r3, r2
 800b966:	d00b      	beq.n	800b980 <TIM_OC6_SetConfig+0x78>
 800b968:	687b      	ldr	r3, [r7, #4]
 800b96a:	4a17      	ldr	r2, [pc, #92]	; (800b9c8 <TIM_OC6_SetConfig+0xc0>)
 800b96c:	4293      	cmp	r3, r2
 800b96e:	d007      	beq.n	800b980 <TIM_OC6_SetConfig+0x78>
 800b970:	687b      	ldr	r3, [r7, #4]
 800b972:	4a16      	ldr	r2, [pc, #88]	; (800b9cc <TIM_OC6_SetConfig+0xc4>)
 800b974:	4293      	cmp	r3, r2
 800b976:	d003      	beq.n	800b980 <TIM_OC6_SetConfig+0x78>
 800b978:	687b      	ldr	r3, [r7, #4]
 800b97a:	4a15      	ldr	r2, [pc, #84]	; (800b9d0 <TIM_OC6_SetConfig+0xc8>)
 800b97c:	4293      	cmp	r3, r2
 800b97e:	d109      	bne.n	800b994 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800b980:	697b      	ldr	r3, [r7, #20]
 800b982:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800b986:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800b988:	683b      	ldr	r3, [r7, #0]
 800b98a:	695b      	ldr	r3, [r3, #20]
 800b98c:	029b      	lsls	r3, r3, #10
 800b98e:	697a      	ldr	r2, [r7, #20]
 800b990:	4313      	orrs	r3, r2
 800b992:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b994:	687b      	ldr	r3, [r7, #4]
 800b996:	697a      	ldr	r2, [r7, #20]
 800b998:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800b99a:	687b      	ldr	r3, [r7, #4]
 800b99c:	68fa      	ldr	r2, [r7, #12]
 800b99e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800b9a0:	683b      	ldr	r3, [r7, #0]
 800b9a2:	685a      	ldr	r2, [r3, #4]
 800b9a4:	687b      	ldr	r3, [r7, #4]
 800b9a6:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b9a8:	687b      	ldr	r3, [r7, #4]
 800b9aa:	693a      	ldr	r2, [r7, #16]
 800b9ac:	621a      	str	r2, [r3, #32]
}
 800b9ae:	bf00      	nop
 800b9b0:	371c      	adds	r7, #28
 800b9b2:	46bd      	mov	sp, r7
 800b9b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9b8:	4770      	bx	lr
 800b9ba:	bf00      	nop
 800b9bc:	feff8fff 	.word	0xfeff8fff
 800b9c0:	40010000 	.word	0x40010000
 800b9c4:	40010400 	.word	0x40010400
 800b9c8:	40014000 	.word	0x40014000
 800b9cc:	40014400 	.word	0x40014400
 800b9d0:	40014800 	.word	0x40014800

0800b9d4 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800b9d4:	b480      	push	{r7}
 800b9d6:	b087      	sub	sp, #28
 800b9d8:	af00      	add	r7, sp, #0
 800b9da:	60f8      	str	r0, [r7, #12]
 800b9dc:	60b9      	str	r1, [r7, #8]
 800b9de:	607a      	str	r2, [r7, #4]
 800b9e0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b9e2:	68fb      	ldr	r3, [r7, #12]
 800b9e4:	6a1b      	ldr	r3, [r3, #32]
 800b9e6:	f023 0201 	bic.w	r2, r3, #1
 800b9ea:	68fb      	ldr	r3, [r7, #12]
 800b9ec:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b9ee:	68fb      	ldr	r3, [r7, #12]
 800b9f0:	699b      	ldr	r3, [r3, #24]
 800b9f2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800b9f4:	68fb      	ldr	r3, [r7, #12]
 800b9f6:	6a1b      	ldr	r3, [r3, #32]
 800b9f8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800b9fa:	68fb      	ldr	r3, [r7, #12]
 800b9fc:	4a28      	ldr	r2, [pc, #160]	; (800baa0 <TIM_TI1_SetConfig+0xcc>)
 800b9fe:	4293      	cmp	r3, r2
 800ba00:	d01b      	beq.n	800ba3a <TIM_TI1_SetConfig+0x66>
 800ba02:	68fb      	ldr	r3, [r7, #12]
 800ba04:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ba08:	d017      	beq.n	800ba3a <TIM_TI1_SetConfig+0x66>
 800ba0a:	68fb      	ldr	r3, [r7, #12]
 800ba0c:	4a25      	ldr	r2, [pc, #148]	; (800baa4 <TIM_TI1_SetConfig+0xd0>)
 800ba0e:	4293      	cmp	r3, r2
 800ba10:	d013      	beq.n	800ba3a <TIM_TI1_SetConfig+0x66>
 800ba12:	68fb      	ldr	r3, [r7, #12]
 800ba14:	4a24      	ldr	r2, [pc, #144]	; (800baa8 <TIM_TI1_SetConfig+0xd4>)
 800ba16:	4293      	cmp	r3, r2
 800ba18:	d00f      	beq.n	800ba3a <TIM_TI1_SetConfig+0x66>
 800ba1a:	68fb      	ldr	r3, [r7, #12]
 800ba1c:	4a23      	ldr	r2, [pc, #140]	; (800baac <TIM_TI1_SetConfig+0xd8>)
 800ba1e:	4293      	cmp	r3, r2
 800ba20:	d00b      	beq.n	800ba3a <TIM_TI1_SetConfig+0x66>
 800ba22:	68fb      	ldr	r3, [r7, #12]
 800ba24:	4a22      	ldr	r2, [pc, #136]	; (800bab0 <TIM_TI1_SetConfig+0xdc>)
 800ba26:	4293      	cmp	r3, r2
 800ba28:	d007      	beq.n	800ba3a <TIM_TI1_SetConfig+0x66>
 800ba2a:	68fb      	ldr	r3, [r7, #12]
 800ba2c:	4a21      	ldr	r2, [pc, #132]	; (800bab4 <TIM_TI1_SetConfig+0xe0>)
 800ba2e:	4293      	cmp	r3, r2
 800ba30:	d003      	beq.n	800ba3a <TIM_TI1_SetConfig+0x66>
 800ba32:	68fb      	ldr	r3, [r7, #12]
 800ba34:	4a20      	ldr	r2, [pc, #128]	; (800bab8 <TIM_TI1_SetConfig+0xe4>)
 800ba36:	4293      	cmp	r3, r2
 800ba38:	d101      	bne.n	800ba3e <TIM_TI1_SetConfig+0x6a>
 800ba3a:	2301      	movs	r3, #1
 800ba3c:	e000      	b.n	800ba40 <TIM_TI1_SetConfig+0x6c>
 800ba3e:	2300      	movs	r3, #0
 800ba40:	2b00      	cmp	r3, #0
 800ba42:	d008      	beq.n	800ba56 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800ba44:	697b      	ldr	r3, [r7, #20]
 800ba46:	f023 0303 	bic.w	r3, r3, #3
 800ba4a:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800ba4c:	697a      	ldr	r2, [r7, #20]
 800ba4e:	687b      	ldr	r3, [r7, #4]
 800ba50:	4313      	orrs	r3, r2
 800ba52:	617b      	str	r3, [r7, #20]
 800ba54:	e003      	b.n	800ba5e <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800ba56:	697b      	ldr	r3, [r7, #20]
 800ba58:	f043 0301 	orr.w	r3, r3, #1
 800ba5c:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800ba5e:	697b      	ldr	r3, [r7, #20]
 800ba60:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800ba64:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800ba66:	683b      	ldr	r3, [r7, #0]
 800ba68:	011b      	lsls	r3, r3, #4
 800ba6a:	b2db      	uxtb	r3, r3
 800ba6c:	697a      	ldr	r2, [r7, #20]
 800ba6e:	4313      	orrs	r3, r2
 800ba70:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800ba72:	693b      	ldr	r3, [r7, #16]
 800ba74:	f023 030a 	bic.w	r3, r3, #10
 800ba78:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800ba7a:	68bb      	ldr	r3, [r7, #8]
 800ba7c:	f003 030a 	and.w	r3, r3, #10
 800ba80:	693a      	ldr	r2, [r7, #16]
 800ba82:	4313      	orrs	r3, r2
 800ba84:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800ba86:	68fb      	ldr	r3, [r7, #12]
 800ba88:	697a      	ldr	r2, [r7, #20]
 800ba8a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800ba8c:	68fb      	ldr	r3, [r7, #12]
 800ba8e:	693a      	ldr	r2, [r7, #16]
 800ba90:	621a      	str	r2, [r3, #32]
}
 800ba92:	bf00      	nop
 800ba94:	371c      	adds	r7, #28
 800ba96:	46bd      	mov	sp, r7
 800ba98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba9c:	4770      	bx	lr
 800ba9e:	bf00      	nop
 800baa0:	40010000 	.word	0x40010000
 800baa4:	40000400 	.word	0x40000400
 800baa8:	40000800 	.word	0x40000800
 800baac:	40000c00 	.word	0x40000c00
 800bab0:	40010400 	.word	0x40010400
 800bab4:	40001800 	.word	0x40001800
 800bab8:	40014000 	.word	0x40014000

0800babc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800babc:	b480      	push	{r7}
 800babe:	b087      	sub	sp, #28
 800bac0:	af00      	add	r7, sp, #0
 800bac2:	60f8      	str	r0, [r7, #12]
 800bac4:	60b9      	str	r1, [r7, #8]
 800bac6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800bac8:	68fb      	ldr	r3, [r7, #12]
 800baca:	6a1b      	ldr	r3, [r3, #32]
 800bacc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800bace:	68fb      	ldr	r3, [r7, #12]
 800bad0:	6a1b      	ldr	r3, [r3, #32]
 800bad2:	f023 0201 	bic.w	r2, r3, #1
 800bad6:	68fb      	ldr	r3, [r7, #12]
 800bad8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800bada:	68fb      	ldr	r3, [r7, #12]
 800badc:	699b      	ldr	r3, [r3, #24]
 800bade:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800bae0:	693b      	ldr	r3, [r7, #16]
 800bae2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800bae6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800bae8:	687b      	ldr	r3, [r7, #4]
 800baea:	011b      	lsls	r3, r3, #4
 800baec:	693a      	ldr	r2, [r7, #16]
 800baee:	4313      	orrs	r3, r2
 800baf0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800baf2:	697b      	ldr	r3, [r7, #20]
 800baf4:	f023 030a 	bic.w	r3, r3, #10
 800baf8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800bafa:	697a      	ldr	r2, [r7, #20]
 800bafc:	68bb      	ldr	r3, [r7, #8]
 800bafe:	4313      	orrs	r3, r2
 800bb00:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800bb02:	68fb      	ldr	r3, [r7, #12]
 800bb04:	693a      	ldr	r2, [r7, #16]
 800bb06:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800bb08:	68fb      	ldr	r3, [r7, #12]
 800bb0a:	697a      	ldr	r2, [r7, #20]
 800bb0c:	621a      	str	r2, [r3, #32]
}
 800bb0e:	bf00      	nop
 800bb10:	371c      	adds	r7, #28
 800bb12:	46bd      	mov	sp, r7
 800bb14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb18:	4770      	bx	lr

0800bb1a <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800bb1a:	b480      	push	{r7}
 800bb1c:	b087      	sub	sp, #28
 800bb1e:	af00      	add	r7, sp, #0
 800bb20:	60f8      	str	r0, [r7, #12]
 800bb22:	60b9      	str	r1, [r7, #8]
 800bb24:	607a      	str	r2, [r7, #4]
 800bb26:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800bb28:	68fb      	ldr	r3, [r7, #12]
 800bb2a:	6a1b      	ldr	r3, [r3, #32]
 800bb2c:	f023 0210 	bic.w	r2, r3, #16
 800bb30:	68fb      	ldr	r3, [r7, #12]
 800bb32:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800bb34:	68fb      	ldr	r3, [r7, #12]
 800bb36:	699b      	ldr	r3, [r3, #24]
 800bb38:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800bb3a:	68fb      	ldr	r3, [r7, #12]
 800bb3c:	6a1b      	ldr	r3, [r3, #32]
 800bb3e:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800bb40:	697b      	ldr	r3, [r7, #20]
 800bb42:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800bb46:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800bb48:	687b      	ldr	r3, [r7, #4]
 800bb4a:	021b      	lsls	r3, r3, #8
 800bb4c:	697a      	ldr	r2, [r7, #20]
 800bb4e:	4313      	orrs	r3, r2
 800bb50:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800bb52:	697b      	ldr	r3, [r7, #20]
 800bb54:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800bb58:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800bb5a:	683b      	ldr	r3, [r7, #0]
 800bb5c:	031b      	lsls	r3, r3, #12
 800bb5e:	b29b      	uxth	r3, r3
 800bb60:	697a      	ldr	r2, [r7, #20]
 800bb62:	4313      	orrs	r3, r2
 800bb64:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800bb66:	693b      	ldr	r3, [r7, #16]
 800bb68:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800bb6c:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800bb6e:	68bb      	ldr	r3, [r7, #8]
 800bb70:	011b      	lsls	r3, r3, #4
 800bb72:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800bb76:	693a      	ldr	r2, [r7, #16]
 800bb78:	4313      	orrs	r3, r2
 800bb7a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800bb7c:	68fb      	ldr	r3, [r7, #12]
 800bb7e:	697a      	ldr	r2, [r7, #20]
 800bb80:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800bb82:	68fb      	ldr	r3, [r7, #12]
 800bb84:	693a      	ldr	r2, [r7, #16]
 800bb86:	621a      	str	r2, [r3, #32]
}
 800bb88:	bf00      	nop
 800bb8a:	371c      	adds	r7, #28
 800bb8c:	46bd      	mov	sp, r7
 800bb8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb92:	4770      	bx	lr

0800bb94 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800bb94:	b480      	push	{r7}
 800bb96:	b087      	sub	sp, #28
 800bb98:	af00      	add	r7, sp, #0
 800bb9a:	60f8      	str	r0, [r7, #12]
 800bb9c:	60b9      	str	r1, [r7, #8]
 800bb9e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800bba0:	68fb      	ldr	r3, [r7, #12]
 800bba2:	6a1b      	ldr	r3, [r3, #32]
 800bba4:	f023 0210 	bic.w	r2, r3, #16
 800bba8:	68fb      	ldr	r3, [r7, #12]
 800bbaa:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800bbac:	68fb      	ldr	r3, [r7, #12]
 800bbae:	699b      	ldr	r3, [r3, #24]
 800bbb0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800bbb2:	68fb      	ldr	r3, [r7, #12]
 800bbb4:	6a1b      	ldr	r3, [r3, #32]
 800bbb6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800bbb8:	697b      	ldr	r3, [r7, #20]
 800bbba:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800bbbe:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800bbc0:	687b      	ldr	r3, [r7, #4]
 800bbc2:	031b      	lsls	r3, r3, #12
 800bbc4:	697a      	ldr	r2, [r7, #20]
 800bbc6:	4313      	orrs	r3, r2
 800bbc8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800bbca:	693b      	ldr	r3, [r7, #16]
 800bbcc:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800bbd0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800bbd2:	68bb      	ldr	r3, [r7, #8]
 800bbd4:	011b      	lsls	r3, r3, #4
 800bbd6:	693a      	ldr	r2, [r7, #16]
 800bbd8:	4313      	orrs	r3, r2
 800bbda:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800bbdc:	68fb      	ldr	r3, [r7, #12]
 800bbde:	697a      	ldr	r2, [r7, #20]
 800bbe0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800bbe2:	68fb      	ldr	r3, [r7, #12]
 800bbe4:	693a      	ldr	r2, [r7, #16]
 800bbe6:	621a      	str	r2, [r3, #32]
}
 800bbe8:	bf00      	nop
 800bbea:	371c      	adds	r7, #28
 800bbec:	46bd      	mov	sp, r7
 800bbee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbf2:	4770      	bx	lr

0800bbf4 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800bbf4:	b480      	push	{r7}
 800bbf6:	b087      	sub	sp, #28
 800bbf8:	af00      	add	r7, sp, #0
 800bbfa:	60f8      	str	r0, [r7, #12]
 800bbfc:	60b9      	str	r1, [r7, #8]
 800bbfe:	607a      	str	r2, [r7, #4]
 800bc00:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800bc02:	68fb      	ldr	r3, [r7, #12]
 800bc04:	6a1b      	ldr	r3, [r3, #32]
 800bc06:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800bc0a:	68fb      	ldr	r3, [r7, #12]
 800bc0c:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800bc0e:	68fb      	ldr	r3, [r7, #12]
 800bc10:	69db      	ldr	r3, [r3, #28]
 800bc12:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800bc14:	68fb      	ldr	r3, [r7, #12]
 800bc16:	6a1b      	ldr	r3, [r3, #32]
 800bc18:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800bc1a:	697b      	ldr	r3, [r7, #20]
 800bc1c:	f023 0303 	bic.w	r3, r3, #3
 800bc20:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 800bc22:	697a      	ldr	r2, [r7, #20]
 800bc24:	687b      	ldr	r3, [r7, #4]
 800bc26:	4313      	orrs	r3, r2
 800bc28:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800bc2a:	697b      	ldr	r3, [r7, #20]
 800bc2c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800bc30:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800bc32:	683b      	ldr	r3, [r7, #0]
 800bc34:	011b      	lsls	r3, r3, #4
 800bc36:	b2db      	uxtb	r3, r3
 800bc38:	697a      	ldr	r2, [r7, #20]
 800bc3a:	4313      	orrs	r3, r2
 800bc3c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800bc3e:	693b      	ldr	r3, [r7, #16]
 800bc40:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 800bc44:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800bc46:	68bb      	ldr	r3, [r7, #8]
 800bc48:	021b      	lsls	r3, r3, #8
 800bc4a:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 800bc4e:	693a      	ldr	r2, [r7, #16]
 800bc50:	4313      	orrs	r3, r2
 800bc52:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800bc54:	68fb      	ldr	r3, [r7, #12]
 800bc56:	697a      	ldr	r2, [r7, #20]
 800bc58:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800bc5a:	68fb      	ldr	r3, [r7, #12]
 800bc5c:	693a      	ldr	r2, [r7, #16]
 800bc5e:	621a      	str	r2, [r3, #32]
}
 800bc60:	bf00      	nop
 800bc62:	371c      	adds	r7, #28
 800bc64:	46bd      	mov	sp, r7
 800bc66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc6a:	4770      	bx	lr

0800bc6c <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800bc6c:	b480      	push	{r7}
 800bc6e:	b087      	sub	sp, #28
 800bc70:	af00      	add	r7, sp, #0
 800bc72:	60f8      	str	r0, [r7, #12]
 800bc74:	60b9      	str	r1, [r7, #8]
 800bc76:	607a      	str	r2, [r7, #4]
 800bc78:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800bc7a:	68fb      	ldr	r3, [r7, #12]
 800bc7c:	6a1b      	ldr	r3, [r3, #32]
 800bc7e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800bc82:	68fb      	ldr	r3, [r7, #12]
 800bc84:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800bc86:	68fb      	ldr	r3, [r7, #12]
 800bc88:	69db      	ldr	r3, [r3, #28]
 800bc8a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800bc8c:	68fb      	ldr	r3, [r7, #12]
 800bc8e:	6a1b      	ldr	r3, [r3, #32]
 800bc90:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800bc92:	697b      	ldr	r3, [r7, #20]
 800bc94:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800bc98:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800bc9a:	687b      	ldr	r3, [r7, #4]
 800bc9c:	021b      	lsls	r3, r3, #8
 800bc9e:	697a      	ldr	r2, [r7, #20]
 800bca0:	4313      	orrs	r3, r2
 800bca2:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800bca4:	697b      	ldr	r3, [r7, #20]
 800bca6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800bcaa:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800bcac:	683b      	ldr	r3, [r7, #0]
 800bcae:	031b      	lsls	r3, r3, #12
 800bcb0:	b29b      	uxth	r3, r3
 800bcb2:	697a      	ldr	r2, [r7, #20]
 800bcb4:	4313      	orrs	r3, r2
 800bcb6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800bcb8:	693b      	ldr	r3, [r7, #16]
 800bcba:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 800bcbe:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800bcc0:	68bb      	ldr	r3, [r7, #8]
 800bcc2:	031b      	lsls	r3, r3, #12
 800bcc4:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 800bcc8:	693a      	ldr	r2, [r7, #16]
 800bcca:	4313      	orrs	r3, r2
 800bccc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800bcce:	68fb      	ldr	r3, [r7, #12]
 800bcd0:	697a      	ldr	r2, [r7, #20]
 800bcd2:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800bcd4:	68fb      	ldr	r3, [r7, #12]
 800bcd6:	693a      	ldr	r2, [r7, #16]
 800bcd8:	621a      	str	r2, [r3, #32]
}
 800bcda:	bf00      	nop
 800bcdc:	371c      	adds	r7, #28
 800bcde:	46bd      	mov	sp, r7
 800bce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bce4:	4770      	bx	lr
	...

0800bce8 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800bce8:	b480      	push	{r7}
 800bcea:	b085      	sub	sp, #20
 800bcec:	af00      	add	r7, sp, #0
 800bcee:	6078      	str	r0, [r7, #4]
 800bcf0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800bcf2:	687b      	ldr	r3, [r7, #4]
 800bcf4:	689b      	ldr	r3, [r3, #8]
 800bcf6:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800bcf8:	68fa      	ldr	r2, [r7, #12]
 800bcfa:	4b09      	ldr	r3, [pc, #36]	; (800bd20 <TIM_ITRx_SetConfig+0x38>)
 800bcfc:	4013      	ands	r3, r2
 800bcfe:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800bd00:	683a      	ldr	r2, [r7, #0]
 800bd02:	68fb      	ldr	r3, [r7, #12]
 800bd04:	4313      	orrs	r3, r2
 800bd06:	f043 0307 	orr.w	r3, r3, #7
 800bd0a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800bd0c:	687b      	ldr	r3, [r7, #4]
 800bd0e:	68fa      	ldr	r2, [r7, #12]
 800bd10:	609a      	str	r2, [r3, #8]
}
 800bd12:	bf00      	nop
 800bd14:	3714      	adds	r7, #20
 800bd16:	46bd      	mov	sp, r7
 800bd18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd1c:	4770      	bx	lr
 800bd1e:	bf00      	nop
 800bd20:	ffcfff8f 	.word	0xffcfff8f

0800bd24 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800bd24:	b480      	push	{r7}
 800bd26:	b087      	sub	sp, #28
 800bd28:	af00      	add	r7, sp, #0
 800bd2a:	60f8      	str	r0, [r7, #12]
 800bd2c:	60b9      	str	r1, [r7, #8]
 800bd2e:	607a      	str	r2, [r7, #4]
 800bd30:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800bd32:	68fb      	ldr	r3, [r7, #12]
 800bd34:	689b      	ldr	r3, [r3, #8]
 800bd36:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800bd38:	697b      	ldr	r3, [r7, #20]
 800bd3a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800bd3e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800bd40:	683b      	ldr	r3, [r7, #0]
 800bd42:	021a      	lsls	r2, r3, #8
 800bd44:	687b      	ldr	r3, [r7, #4]
 800bd46:	431a      	orrs	r2, r3
 800bd48:	68bb      	ldr	r3, [r7, #8]
 800bd4a:	4313      	orrs	r3, r2
 800bd4c:	697a      	ldr	r2, [r7, #20]
 800bd4e:	4313      	orrs	r3, r2
 800bd50:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800bd52:	68fb      	ldr	r3, [r7, #12]
 800bd54:	697a      	ldr	r2, [r7, #20]
 800bd56:	609a      	str	r2, [r3, #8]
}
 800bd58:	bf00      	nop
 800bd5a:	371c      	adds	r7, #28
 800bd5c:	46bd      	mov	sp, r7
 800bd5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd62:	4770      	bx	lr

0800bd64 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800bd64:	b480      	push	{r7}
 800bd66:	b087      	sub	sp, #28
 800bd68:	af00      	add	r7, sp, #0
 800bd6a:	60f8      	str	r0, [r7, #12]
 800bd6c:	60b9      	str	r1, [r7, #8]
 800bd6e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800bd70:	68bb      	ldr	r3, [r7, #8]
 800bd72:	f003 031f 	and.w	r3, r3, #31
 800bd76:	2201      	movs	r2, #1
 800bd78:	fa02 f303 	lsl.w	r3, r2, r3
 800bd7c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800bd7e:	68fb      	ldr	r3, [r7, #12]
 800bd80:	6a1a      	ldr	r2, [r3, #32]
 800bd82:	697b      	ldr	r3, [r7, #20]
 800bd84:	43db      	mvns	r3, r3
 800bd86:	401a      	ands	r2, r3
 800bd88:	68fb      	ldr	r3, [r7, #12]
 800bd8a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800bd8c:	68fb      	ldr	r3, [r7, #12]
 800bd8e:	6a1a      	ldr	r2, [r3, #32]
 800bd90:	68bb      	ldr	r3, [r7, #8]
 800bd92:	f003 031f 	and.w	r3, r3, #31
 800bd96:	6879      	ldr	r1, [r7, #4]
 800bd98:	fa01 f303 	lsl.w	r3, r1, r3
 800bd9c:	431a      	orrs	r2, r3
 800bd9e:	68fb      	ldr	r3, [r7, #12]
 800bda0:	621a      	str	r2, [r3, #32]
}
 800bda2:	bf00      	nop
 800bda4:	371c      	adds	r7, #28
 800bda6:	46bd      	mov	sp, r7
 800bda8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdac:	4770      	bx	lr
	...

0800bdb0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800bdb0:	b480      	push	{r7}
 800bdb2:	b085      	sub	sp, #20
 800bdb4:	af00      	add	r7, sp, #0
 800bdb6:	6078      	str	r0, [r7, #4]
 800bdb8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800bdba:	687b      	ldr	r3, [r7, #4]
 800bdbc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800bdc0:	2b01      	cmp	r3, #1
 800bdc2:	d101      	bne.n	800bdc8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800bdc4:	2302      	movs	r3, #2
 800bdc6:	e06d      	b.n	800bea4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800bdc8:	687b      	ldr	r3, [r7, #4]
 800bdca:	2201      	movs	r2, #1
 800bdcc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bdd0:	687b      	ldr	r3, [r7, #4]
 800bdd2:	2202      	movs	r2, #2
 800bdd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800bdd8:	687b      	ldr	r3, [r7, #4]
 800bdda:	681b      	ldr	r3, [r3, #0]
 800bddc:	685b      	ldr	r3, [r3, #4]
 800bdde:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800bde0:	687b      	ldr	r3, [r7, #4]
 800bde2:	681b      	ldr	r3, [r3, #0]
 800bde4:	689b      	ldr	r3, [r3, #8]
 800bde6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800bde8:	687b      	ldr	r3, [r7, #4]
 800bdea:	681b      	ldr	r3, [r3, #0]
 800bdec:	4a30      	ldr	r2, [pc, #192]	; (800beb0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800bdee:	4293      	cmp	r3, r2
 800bdf0:	d004      	beq.n	800bdfc <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800bdf2:	687b      	ldr	r3, [r7, #4]
 800bdf4:	681b      	ldr	r3, [r3, #0]
 800bdf6:	4a2f      	ldr	r2, [pc, #188]	; (800beb4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800bdf8:	4293      	cmp	r3, r2
 800bdfa:	d108      	bne.n	800be0e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800bdfc:	68fb      	ldr	r3, [r7, #12]
 800bdfe:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800be02:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800be04:	683b      	ldr	r3, [r7, #0]
 800be06:	685b      	ldr	r3, [r3, #4]
 800be08:	68fa      	ldr	r2, [r7, #12]
 800be0a:	4313      	orrs	r3, r2
 800be0c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800be0e:	68fb      	ldr	r3, [r7, #12]
 800be10:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800be14:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800be16:	683b      	ldr	r3, [r7, #0]
 800be18:	681b      	ldr	r3, [r3, #0]
 800be1a:	68fa      	ldr	r2, [r7, #12]
 800be1c:	4313      	orrs	r3, r2
 800be1e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800be20:	687b      	ldr	r3, [r7, #4]
 800be22:	681b      	ldr	r3, [r3, #0]
 800be24:	68fa      	ldr	r2, [r7, #12]
 800be26:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800be28:	687b      	ldr	r3, [r7, #4]
 800be2a:	681b      	ldr	r3, [r3, #0]
 800be2c:	4a20      	ldr	r2, [pc, #128]	; (800beb0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800be2e:	4293      	cmp	r3, r2
 800be30:	d022      	beq.n	800be78 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800be32:	687b      	ldr	r3, [r7, #4]
 800be34:	681b      	ldr	r3, [r3, #0]
 800be36:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800be3a:	d01d      	beq.n	800be78 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800be3c:	687b      	ldr	r3, [r7, #4]
 800be3e:	681b      	ldr	r3, [r3, #0]
 800be40:	4a1d      	ldr	r2, [pc, #116]	; (800beb8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800be42:	4293      	cmp	r3, r2
 800be44:	d018      	beq.n	800be78 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800be46:	687b      	ldr	r3, [r7, #4]
 800be48:	681b      	ldr	r3, [r3, #0]
 800be4a:	4a1c      	ldr	r2, [pc, #112]	; (800bebc <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800be4c:	4293      	cmp	r3, r2
 800be4e:	d013      	beq.n	800be78 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800be50:	687b      	ldr	r3, [r7, #4]
 800be52:	681b      	ldr	r3, [r3, #0]
 800be54:	4a1a      	ldr	r2, [pc, #104]	; (800bec0 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800be56:	4293      	cmp	r3, r2
 800be58:	d00e      	beq.n	800be78 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800be5a:	687b      	ldr	r3, [r7, #4]
 800be5c:	681b      	ldr	r3, [r3, #0]
 800be5e:	4a15      	ldr	r2, [pc, #84]	; (800beb4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800be60:	4293      	cmp	r3, r2
 800be62:	d009      	beq.n	800be78 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800be64:	687b      	ldr	r3, [r7, #4]
 800be66:	681b      	ldr	r3, [r3, #0]
 800be68:	4a16      	ldr	r2, [pc, #88]	; (800bec4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800be6a:	4293      	cmp	r3, r2
 800be6c:	d004      	beq.n	800be78 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800be6e:	687b      	ldr	r3, [r7, #4]
 800be70:	681b      	ldr	r3, [r3, #0]
 800be72:	4a15      	ldr	r2, [pc, #84]	; (800bec8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800be74:	4293      	cmp	r3, r2
 800be76:	d10c      	bne.n	800be92 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800be78:	68bb      	ldr	r3, [r7, #8]
 800be7a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800be7e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800be80:	683b      	ldr	r3, [r7, #0]
 800be82:	689b      	ldr	r3, [r3, #8]
 800be84:	68ba      	ldr	r2, [r7, #8]
 800be86:	4313      	orrs	r3, r2
 800be88:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800be8a:	687b      	ldr	r3, [r7, #4]
 800be8c:	681b      	ldr	r3, [r3, #0]
 800be8e:	68ba      	ldr	r2, [r7, #8]
 800be90:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800be92:	687b      	ldr	r3, [r7, #4]
 800be94:	2201      	movs	r2, #1
 800be96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800be9a:	687b      	ldr	r3, [r7, #4]
 800be9c:	2200      	movs	r2, #0
 800be9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800bea2:	2300      	movs	r3, #0
}
 800bea4:	4618      	mov	r0, r3
 800bea6:	3714      	adds	r7, #20
 800bea8:	46bd      	mov	sp, r7
 800beaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800beae:	4770      	bx	lr
 800beb0:	40010000 	.word	0x40010000
 800beb4:	40010400 	.word	0x40010400
 800beb8:	40000400 	.word	0x40000400
 800bebc:	40000800 	.word	0x40000800
 800bec0:	40000c00 	.word	0x40000c00
 800bec4:	40001800 	.word	0x40001800
 800bec8:	40014000 	.word	0x40014000

0800becc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800becc:	b480      	push	{r7}
 800bece:	b083      	sub	sp, #12
 800bed0:	af00      	add	r7, sp, #0
 800bed2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800bed4:	bf00      	nop
 800bed6:	370c      	adds	r7, #12
 800bed8:	46bd      	mov	sp, r7
 800beda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bede:	4770      	bx	lr

0800bee0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800bee0:	b480      	push	{r7}
 800bee2:	b083      	sub	sp, #12
 800bee4:	af00      	add	r7, sp, #0
 800bee6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800bee8:	bf00      	nop
 800beea:	370c      	adds	r7, #12
 800beec:	46bd      	mov	sp, r7
 800beee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bef2:	4770      	bx	lr

0800bef4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800bef4:	b480      	push	{r7}
 800bef6:	b083      	sub	sp, #12
 800bef8:	af00      	add	r7, sp, #0
 800befa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800befc:	bf00      	nop
 800befe:	370c      	adds	r7, #12
 800bf00:	46bd      	mov	sp, r7
 800bf02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf06:	4770      	bx	lr

0800bf08 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800bf08:	b580      	push	{r7, lr}
 800bf0a:	b082      	sub	sp, #8
 800bf0c:	af00      	add	r7, sp, #0
 800bf0e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800bf10:	687b      	ldr	r3, [r7, #4]
 800bf12:	2b00      	cmp	r3, #0
 800bf14:	d101      	bne.n	800bf1a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800bf16:	2301      	movs	r3, #1
 800bf18:	e042      	b.n	800bfa0 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800bf1a:	687b      	ldr	r3, [r7, #4]
 800bf1c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bf20:	2b00      	cmp	r3, #0
 800bf22:	d106      	bne.n	800bf32 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800bf24:	687b      	ldr	r3, [r7, #4]
 800bf26:	2200      	movs	r2, #0
 800bf28:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800bf2c:	6878      	ldr	r0, [r7, #4]
 800bf2e:	f7fa fa27 	bl	8006380 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800bf32:	687b      	ldr	r3, [r7, #4]
 800bf34:	2224      	movs	r2, #36	; 0x24
 800bf36:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800bf3a:	687b      	ldr	r3, [r7, #4]
 800bf3c:	681b      	ldr	r3, [r3, #0]
 800bf3e:	681a      	ldr	r2, [r3, #0]
 800bf40:	687b      	ldr	r3, [r7, #4]
 800bf42:	681b      	ldr	r3, [r3, #0]
 800bf44:	f022 0201 	bic.w	r2, r2, #1
 800bf48:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800bf4a:	6878      	ldr	r0, [r7, #4]
 800bf4c:	f000 fccc 	bl	800c8e8 <UART_SetConfig>
 800bf50:	4603      	mov	r3, r0
 800bf52:	2b01      	cmp	r3, #1
 800bf54:	d101      	bne.n	800bf5a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800bf56:	2301      	movs	r3, #1
 800bf58:	e022      	b.n	800bfa0 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800bf5a:	687b      	ldr	r3, [r7, #4]
 800bf5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bf5e:	2b00      	cmp	r3, #0
 800bf60:	d002      	beq.n	800bf68 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800bf62:	6878      	ldr	r0, [r7, #4]
 800bf64:	f001 fa28 	bl	800d3b8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800bf68:	687b      	ldr	r3, [r7, #4]
 800bf6a:	681b      	ldr	r3, [r3, #0]
 800bf6c:	685a      	ldr	r2, [r3, #4]
 800bf6e:	687b      	ldr	r3, [r7, #4]
 800bf70:	681b      	ldr	r3, [r3, #0]
 800bf72:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800bf76:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800bf78:	687b      	ldr	r3, [r7, #4]
 800bf7a:	681b      	ldr	r3, [r3, #0]
 800bf7c:	689a      	ldr	r2, [r3, #8]
 800bf7e:	687b      	ldr	r3, [r7, #4]
 800bf80:	681b      	ldr	r3, [r3, #0]
 800bf82:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800bf86:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800bf88:	687b      	ldr	r3, [r7, #4]
 800bf8a:	681b      	ldr	r3, [r3, #0]
 800bf8c:	681a      	ldr	r2, [r3, #0]
 800bf8e:	687b      	ldr	r3, [r7, #4]
 800bf90:	681b      	ldr	r3, [r3, #0]
 800bf92:	f042 0201 	orr.w	r2, r2, #1
 800bf96:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800bf98:	6878      	ldr	r0, [r7, #4]
 800bf9a:	f001 faaf 	bl	800d4fc <UART_CheckIdleState>
 800bf9e:	4603      	mov	r3, r0
}
 800bfa0:	4618      	mov	r0, r3
 800bfa2:	3708      	adds	r7, #8
 800bfa4:	46bd      	mov	sp, r7
 800bfa6:	bd80      	pop	{r7, pc}

0800bfa8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800bfa8:	b580      	push	{r7, lr}
 800bfaa:	b08a      	sub	sp, #40	; 0x28
 800bfac:	af02      	add	r7, sp, #8
 800bfae:	60f8      	str	r0, [r7, #12]
 800bfb0:	60b9      	str	r1, [r7, #8]
 800bfb2:	603b      	str	r3, [r7, #0]
 800bfb4:	4613      	mov	r3, r2
 800bfb6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800bfb8:	68fb      	ldr	r3, [r7, #12]
 800bfba:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bfbe:	2b20      	cmp	r3, #32
 800bfc0:	f040 8083 	bne.w	800c0ca <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 800bfc4:	68bb      	ldr	r3, [r7, #8]
 800bfc6:	2b00      	cmp	r3, #0
 800bfc8:	d002      	beq.n	800bfd0 <HAL_UART_Transmit+0x28>
 800bfca:	88fb      	ldrh	r3, [r7, #6]
 800bfcc:	2b00      	cmp	r3, #0
 800bfce:	d101      	bne.n	800bfd4 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800bfd0:	2301      	movs	r3, #1
 800bfd2:	e07b      	b.n	800c0cc <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 800bfd4:	68fb      	ldr	r3, [r7, #12]
 800bfd6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800bfda:	2b01      	cmp	r3, #1
 800bfdc:	d101      	bne.n	800bfe2 <HAL_UART_Transmit+0x3a>
 800bfde:	2302      	movs	r3, #2
 800bfe0:	e074      	b.n	800c0cc <HAL_UART_Transmit+0x124>
 800bfe2:	68fb      	ldr	r3, [r7, #12]
 800bfe4:	2201      	movs	r2, #1
 800bfe6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bfea:	68fb      	ldr	r3, [r7, #12]
 800bfec:	2200      	movs	r2, #0
 800bfee:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800bff2:	68fb      	ldr	r3, [r7, #12]
 800bff4:	2221      	movs	r2, #33	; 0x21
 800bff6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800bffa:	f7fa fb9d 	bl	8006738 <HAL_GetTick>
 800bffe:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800c000:	68fb      	ldr	r3, [r7, #12]
 800c002:	88fa      	ldrh	r2, [r7, #6]
 800c004:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800c008:	68fb      	ldr	r3, [r7, #12]
 800c00a:	88fa      	ldrh	r2, [r7, #6]
 800c00c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c010:	68fb      	ldr	r3, [r7, #12]
 800c012:	689b      	ldr	r3, [r3, #8]
 800c014:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c018:	d108      	bne.n	800c02c <HAL_UART_Transmit+0x84>
 800c01a:	68fb      	ldr	r3, [r7, #12]
 800c01c:	691b      	ldr	r3, [r3, #16]
 800c01e:	2b00      	cmp	r3, #0
 800c020:	d104      	bne.n	800c02c <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 800c022:	2300      	movs	r3, #0
 800c024:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800c026:	68bb      	ldr	r3, [r7, #8]
 800c028:	61bb      	str	r3, [r7, #24]
 800c02a:	e003      	b.n	800c034 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 800c02c:	68bb      	ldr	r3, [r7, #8]
 800c02e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800c030:	2300      	movs	r3, #0
 800c032:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800c034:	68fb      	ldr	r3, [r7, #12]
 800c036:	2200      	movs	r2, #0
 800c038:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 800c03c:	e02c      	b.n	800c098 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800c03e:	683b      	ldr	r3, [r7, #0]
 800c040:	9300      	str	r3, [sp, #0]
 800c042:	697b      	ldr	r3, [r7, #20]
 800c044:	2200      	movs	r2, #0
 800c046:	2180      	movs	r1, #128	; 0x80
 800c048:	68f8      	ldr	r0, [r7, #12]
 800c04a:	f001 faa2 	bl	800d592 <UART_WaitOnFlagUntilTimeout>
 800c04e:	4603      	mov	r3, r0
 800c050:	2b00      	cmp	r3, #0
 800c052:	d001      	beq.n	800c058 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 800c054:	2303      	movs	r3, #3
 800c056:	e039      	b.n	800c0cc <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 800c058:	69fb      	ldr	r3, [r7, #28]
 800c05a:	2b00      	cmp	r3, #0
 800c05c:	d10b      	bne.n	800c076 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800c05e:	69bb      	ldr	r3, [r7, #24]
 800c060:	881b      	ldrh	r3, [r3, #0]
 800c062:	461a      	mov	r2, r3
 800c064:	68fb      	ldr	r3, [r7, #12]
 800c066:	681b      	ldr	r3, [r3, #0]
 800c068:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800c06c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800c06e:	69bb      	ldr	r3, [r7, #24]
 800c070:	3302      	adds	r3, #2
 800c072:	61bb      	str	r3, [r7, #24]
 800c074:	e007      	b.n	800c086 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800c076:	69fb      	ldr	r3, [r7, #28]
 800c078:	781a      	ldrb	r2, [r3, #0]
 800c07a:	68fb      	ldr	r3, [r7, #12]
 800c07c:	681b      	ldr	r3, [r3, #0]
 800c07e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800c080:	69fb      	ldr	r3, [r7, #28]
 800c082:	3301      	adds	r3, #1
 800c084:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800c086:	68fb      	ldr	r3, [r7, #12]
 800c088:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800c08c:	b29b      	uxth	r3, r3
 800c08e:	3b01      	subs	r3, #1
 800c090:	b29a      	uxth	r2, r3
 800c092:	68fb      	ldr	r3, [r7, #12]
 800c094:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800c098:	68fb      	ldr	r3, [r7, #12]
 800c09a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800c09e:	b29b      	uxth	r3, r3
 800c0a0:	2b00      	cmp	r3, #0
 800c0a2:	d1cc      	bne.n	800c03e <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800c0a4:	683b      	ldr	r3, [r7, #0]
 800c0a6:	9300      	str	r3, [sp, #0]
 800c0a8:	697b      	ldr	r3, [r7, #20]
 800c0aa:	2200      	movs	r2, #0
 800c0ac:	2140      	movs	r1, #64	; 0x40
 800c0ae:	68f8      	ldr	r0, [r7, #12]
 800c0b0:	f001 fa6f 	bl	800d592 <UART_WaitOnFlagUntilTimeout>
 800c0b4:	4603      	mov	r3, r0
 800c0b6:	2b00      	cmp	r3, #0
 800c0b8:	d001      	beq.n	800c0be <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 800c0ba:	2303      	movs	r3, #3
 800c0bc:	e006      	b.n	800c0cc <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800c0be:	68fb      	ldr	r3, [r7, #12]
 800c0c0:	2220      	movs	r2, #32
 800c0c2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 800c0c6:	2300      	movs	r3, #0
 800c0c8:	e000      	b.n	800c0cc <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 800c0ca:	2302      	movs	r3, #2
  }
}
 800c0cc:	4618      	mov	r0, r3
 800c0ce:	3720      	adds	r7, #32
 800c0d0:	46bd      	mov	sp, r7
 800c0d2:	bd80      	pop	{r7, pc}

0800c0d4 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800c0d4:	b580      	push	{r7, lr}
 800c0d6:	b08a      	sub	sp, #40	; 0x28
 800c0d8:	af00      	add	r7, sp, #0
 800c0da:	60f8      	str	r0, [r7, #12]
 800c0dc:	60b9      	str	r1, [r7, #8]
 800c0de:	4613      	mov	r3, r2
 800c0e0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800c0e2:	68fb      	ldr	r3, [r7, #12]
 800c0e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c0e8:	2b20      	cmp	r3, #32
 800c0ea:	d142      	bne.n	800c172 <HAL_UART_Receive_IT+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 800c0ec:	68bb      	ldr	r3, [r7, #8]
 800c0ee:	2b00      	cmp	r3, #0
 800c0f0:	d002      	beq.n	800c0f8 <HAL_UART_Receive_IT+0x24>
 800c0f2:	88fb      	ldrh	r3, [r7, #6]
 800c0f4:	2b00      	cmp	r3, #0
 800c0f6:	d101      	bne.n	800c0fc <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800c0f8:	2301      	movs	r3, #1
 800c0fa:	e03b      	b.n	800c174 <HAL_UART_Receive_IT+0xa0>
    }

    __HAL_LOCK(huart);
 800c0fc:	68fb      	ldr	r3, [r7, #12]
 800c0fe:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800c102:	2b01      	cmp	r3, #1
 800c104:	d101      	bne.n	800c10a <HAL_UART_Receive_IT+0x36>
 800c106:	2302      	movs	r3, #2
 800c108:	e034      	b.n	800c174 <HAL_UART_Receive_IT+0xa0>
 800c10a:	68fb      	ldr	r3, [r7, #12]
 800c10c:	2201      	movs	r2, #1
 800c10e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c112:	68fb      	ldr	r3, [r7, #12]
 800c114:	2200      	movs	r2, #0
 800c116:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800c118:	68fb      	ldr	r3, [r7, #12]
 800c11a:	681b      	ldr	r3, [r3, #0]
 800c11c:	4a17      	ldr	r2, [pc, #92]	; (800c17c <HAL_UART_Receive_IT+0xa8>)
 800c11e:	4293      	cmp	r3, r2
 800c120:	d01f      	beq.n	800c162 <HAL_UART_Receive_IT+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800c122:	68fb      	ldr	r3, [r7, #12]
 800c124:	681b      	ldr	r3, [r3, #0]
 800c126:	685b      	ldr	r3, [r3, #4]
 800c128:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c12c:	2b00      	cmp	r3, #0
 800c12e:	d018      	beq.n	800c162 <HAL_UART_Receive_IT+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800c130:	68fb      	ldr	r3, [r7, #12]
 800c132:	681b      	ldr	r3, [r3, #0]
 800c134:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c136:	697b      	ldr	r3, [r7, #20]
 800c138:	e853 3f00 	ldrex	r3, [r3]
 800c13c:	613b      	str	r3, [r7, #16]
   return(result);
 800c13e:	693b      	ldr	r3, [r7, #16]
 800c140:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800c144:	627b      	str	r3, [r7, #36]	; 0x24
 800c146:	68fb      	ldr	r3, [r7, #12]
 800c148:	681b      	ldr	r3, [r3, #0]
 800c14a:	461a      	mov	r2, r3
 800c14c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c14e:	623b      	str	r3, [r7, #32]
 800c150:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c152:	69f9      	ldr	r1, [r7, #28]
 800c154:	6a3a      	ldr	r2, [r7, #32]
 800c156:	e841 2300 	strex	r3, r2, [r1]
 800c15a:	61bb      	str	r3, [r7, #24]
   return(result);
 800c15c:	69bb      	ldr	r3, [r7, #24]
 800c15e:	2b00      	cmp	r3, #0
 800c160:	d1e6      	bne.n	800c130 <HAL_UART_Receive_IT+0x5c>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800c162:	88fb      	ldrh	r3, [r7, #6]
 800c164:	461a      	mov	r2, r3
 800c166:	68b9      	ldr	r1, [r7, #8]
 800c168:	68f8      	ldr	r0, [r7, #12]
 800c16a:	f001 fadb 	bl	800d724 <UART_Start_Receive_IT>
 800c16e:	4603      	mov	r3, r0
 800c170:	e000      	b.n	800c174 <HAL_UART_Receive_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800c172:	2302      	movs	r3, #2
  }
}
 800c174:	4618      	mov	r0, r3
 800c176:	3728      	adds	r7, #40	; 0x28
 800c178:	46bd      	mov	sp, r7
 800c17a:	bd80      	pop	{r7, pc}
 800c17c:	58000c00 	.word	0x58000c00

0800c180 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800c180:	b580      	push	{r7, lr}
 800c182:	b0ba      	sub	sp, #232	; 0xe8
 800c184:	af00      	add	r7, sp, #0
 800c186:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800c188:	687b      	ldr	r3, [r7, #4]
 800c18a:	681b      	ldr	r3, [r3, #0]
 800c18c:	69db      	ldr	r3, [r3, #28]
 800c18e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800c192:	687b      	ldr	r3, [r7, #4]
 800c194:	681b      	ldr	r3, [r3, #0]
 800c196:	681b      	ldr	r3, [r3, #0]
 800c198:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800c19c:	687b      	ldr	r3, [r7, #4]
 800c19e:	681b      	ldr	r3, [r3, #0]
 800c1a0:	689b      	ldr	r3, [r3, #8]
 800c1a2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800c1a6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800c1aa:	f640 030f 	movw	r3, #2063	; 0x80f
 800c1ae:	4013      	ands	r3, r2
 800c1b0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800c1b4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800c1b8:	2b00      	cmp	r3, #0
 800c1ba:	d11b      	bne.n	800c1f4 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800c1bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c1c0:	f003 0320 	and.w	r3, r3, #32
 800c1c4:	2b00      	cmp	r3, #0
 800c1c6:	d015      	beq.n	800c1f4 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800c1c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c1cc:	f003 0320 	and.w	r3, r3, #32
 800c1d0:	2b00      	cmp	r3, #0
 800c1d2:	d105      	bne.n	800c1e0 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800c1d4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c1d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c1dc:	2b00      	cmp	r3, #0
 800c1de:	d009      	beq.n	800c1f4 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800c1e0:	687b      	ldr	r3, [r7, #4]
 800c1e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c1e4:	2b00      	cmp	r3, #0
 800c1e6:	f000 835a 	beq.w	800c89e <HAL_UART_IRQHandler+0x71e>
      {
        huart->RxISR(huart);
 800c1ea:	687b      	ldr	r3, [r7, #4]
 800c1ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c1ee:	6878      	ldr	r0, [r7, #4]
 800c1f0:	4798      	blx	r3
      }
      return;
 800c1f2:	e354      	b.n	800c89e <HAL_UART_IRQHandler+0x71e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800c1f4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800c1f8:	2b00      	cmp	r3, #0
 800c1fa:	f000 811f 	beq.w	800c43c <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800c1fe:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800c202:	4b8b      	ldr	r3, [pc, #556]	; (800c430 <HAL_UART_IRQHandler+0x2b0>)
 800c204:	4013      	ands	r3, r2
 800c206:	2b00      	cmp	r3, #0
 800c208:	d106      	bne.n	800c218 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800c20a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800c20e:	4b89      	ldr	r3, [pc, #548]	; (800c434 <HAL_UART_IRQHandler+0x2b4>)
 800c210:	4013      	ands	r3, r2
 800c212:	2b00      	cmp	r3, #0
 800c214:	f000 8112 	beq.w	800c43c <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800c218:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c21c:	f003 0301 	and.w	r3, r3, #1
 800c220:	2b00      	cmp	r3, #0
 800c222:	d011      	beq.n	800c248 <HAL_UART_IRQHandler+0xc8>
 800c224:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c228:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c22c:	2b00      	cmp	r3, #0
 800c22e:	d00b      	beq.n	800c248 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800c230:	687b      	ldr	r3, [r7, #4]
 800c232:	681b      	ldr	r3, [r3, #0]
 800c234:	2201      	movs	r2, #1
 800c236:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800c238:	687b      	ldr	r3, [r7, #4]
 800c23a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c23e:	f043 0201 	orr.w	r2, r3, #1
 800c242:	687b      	ldr	r3, [r7, #4]
 800c244:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c248:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c24c:	f003 0302 	and.w	r3, r3, #2
 800c250:	2b00      	cmp	r3, #0
 800c252:	d011      	beq.n	800c278 <HAL_UART_IRQHandler+0xf8>
 800c254:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c258:	f003 0301 	and.w	r3, r3, #1
 800c25c:	2b00      	cmp	r3, #0
 800c25e:	d00b      	beq.n	800c278 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800c260:	687b      	ldr	r3, [r7, #4]
 800c262:	681b      	ldr	r3, [r3, #0]
 800c264:	2202      	movs	r2, #2
 800c266:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800c268:	687b      	ldr	r3, [r7, #4]
 800c26a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c26e:	f043 0204 	orr.w	r2, r3, #4
 800c272:	687b      	ldr	r3, [r7, #4]
 800c274:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c278:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c27c:	f003 0304 	and.w	r3, r3, #4
 800c280:	2b00      	cmp	r3, #0
 800c282:	d011      	beq.n	800c2a8 <HAL_UART_IRQHandler+0x128>
 800c284:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c288:	f003 0301 	and.w	r3, r3, #1
 800c28c:	2b00      	cmp	r3, #0
 800c28e:	d00b      	beq.n	800c2a8 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800c290:	687b      	ldr	r3, [r7, #4]
 800c292:	681b      	ldr	r3, [r3, #0]
 800c294:	2204      	movs	r2, #4
 800c296:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800c298:	687b      	ldr	r3, [r7, #4]
 800c29a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c29e:	f043 0202 	orr.w	r2, r3, #2
 800c2a2:	687b      	ldr	r3, [r7, #4]
 800c2a4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800c2a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c2ac:	f003 0308 	and.w	r3, r3, #8
 800c2b0:	2b00      	cmp	r3, #0
 800c2b2:	d017      	beq.n	800c2e4 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800c2b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c2b8:	f003 0320 	and.w	r3, r3, #32
 800c2bc:	2b00      	cmp	r3, #0
 800c2be:	d105      	bne.n	800c2cc <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800c2c0:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800c2c4:	4b5a      	ldr	r3, [pc, #360]	; (800c430 <HAL_UART_IRQHandler+0x2b0>)
 800c2c6:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800c2c8:	2b00      	cmp	r3, #0
 800c2ca:	d00b      	beq.n	800c2e4 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800c2cc:	687b      	ldr	r3, [r7, #4]
 800c2ce:	681b      	ldr	r3, [r3, #0]
 800c2d0:	2208      	movs	r2, #8
 800c2d2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800c2d4:	687b      	ldr	r3, [r7, #4]
 800c2d6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c2da:	f043 0208 	orr.w	r2, r3, #8
 800c2de:	687b      	ldr	r3, [r7, #4]
 800c2e0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800c2e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c2e8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800c2ec:	2b00      	cmp	r3, #0
 800c2ee:	d012      	beq.n	800c316 <HAL_UART_IRQHandler+0x196>
 800c2f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c2f4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800c2f8:	2b00      	cmp	r3, #0
 800c2fa:	d00c      	beq.n	800c316 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800c2fc:	687b      	ldr	r3, [r7, #4]
 800c2fe:	681b      	ldr	r3, [r3, #0]
 800c300:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800c304:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800c306:	687b      	ldr	r3, [r7, #4]
 800c308:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c30c:	f043 0220 	orr.w	r2, r3, #32
 800c310:	687b      	ldr	r3, [r7, #4]
 800c312:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800c316:	687b      	ldr	r3, [r7, #4]
 800c318:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c31c:	2b00      	cmp	r3, #0
 800c31e:	f000 82c0 	beq.w	800c8a2 <HAL_UART_IRQHandler+0x722>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800c322:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c326:	f003 0320 	and.w	r3, r3, #32
 800c32a:	2b00      	cmp	r3, #0
 800c32c:	d013      	beq.n	800c356 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800c32e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c332:	f003 0320 	and.w	r3, r3, #32
 800c336:	2b00      	cmp	r3, #0
 800c338:	d105      	bne.n	800c346 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800c33a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c33e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c342:	2b00      	cmp	r3, #0
 800c344:	d007      	beq.n	800c356 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800c346:	687b      	ldr	r3, [r7, #4]
 800c348:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c34a:	2b00      	cmp	r3, #0
 800c34c:	d003      	beq.n	800c356 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800c34e:	687b      	ldr	r3, [r7, #4]
 800c350:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c352:	6878      	ldr	r0, [r7, #4]
 800c354:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800c356:	687b      	ldr	r3, [r7, #4]
 800c358:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c35c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800c360:	687b      	ldr	r3, [r7, #4]
 800c362:	681b      	ldr	r3, [r3, #0]
 800c364:	689b      	ldr	r3, [r3, #8]
 800c366:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c36a:	2b40      	cmp	r3, #64	; 0x40
 800c36c:	d005      	beq.n	800c37a <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800c36e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800c372:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800c376:	2b00      	cmp	r3, #0
 800c378:	d04f      	beq.n	800c41a <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800c37a:	6878      	ldr	r0, [r7, #4]
 800c37c:	f001 fafc 	bl	800d978 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c380:	687b      	ldr	r3, [r7, #4]
 800c382:	681b      	ldr	r3, [r3, #0]
 800c384:	689b      	ldr	r3, [r3, #8]
 800c386:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c38a:	2b40      	cmp	r3, #64	; 0x40
 800c38c:	d141      	bne.n	800c412 <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c38e:	687b      	ldr	r3, [r7, #4]
 800c390:	681b      	ldr	r3, [r3, #0]
 800c392:	3308      	adds	r3, #8
 800c394:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c398:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800c39c:	e853 3f00 	ldrex	r3, [r3]
 800c3a0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800c3a4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800c3a8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c3ac:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800c3b0:	687b      	ldr	r3, [r7, #4]
 800c3b2:	681b      	ldr	r3, [r3, #0]
 800c3b4:	3308      	adds	r3, #8
 800c3b6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800c3ba:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800c3be:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c3c2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800c3c6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800c3ca:	e841 2300 	strex	r3, r2, [r1]
 800c3ce:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800c3d2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800c3d6:	2b00      	cmp	r3, #0
 800c3d8:	d1d9      	bne.n	800c38e <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800c3da:	687b      	ldr	r3, [r7, #4]
 800c3dc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c3de:	2b00      	cmp	r3, #0
 800c3e0:	d013      	beq.n	800c40a <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800c3e2:	687b      	ldr	r3, [r7, #4]
 800c3e4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c3e6:	4a14      	ldr	r2, [pc, #80]	; (800c438 <HAL_UART_IRQHandler+0x2b8>)
 800c3e8:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800c3ea:	687b      	ldr	r3, [r7, #4]
 800c3ec:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c3ee:	4618      	mov	r0, r3
 800c3f0:	f7fa fe3e 	bl	8007070 <HAL_DMA_Abort_IT>
 800c3f4:	4603      	mov	r3, r0
 800c3f6:	2b00      	cmp	r3, #0
 800c3f8:	d017      	beq.n	800c42a <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800c3fa:	687b      	ldr	r3, [r7, #4]
 800c3fc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c3fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c400:	687a      	ldr	r2, [r7, #4]
 800c402:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 800c404:	4610      	mov	r0, r2
 800c406:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c408:	e00f      	b.n	800c42a <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800c40a:	6878      	ldr	r0, [r7, #4]
 800c40c:	f000 fa56 	bl	800c8bc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c410:	e00b      	b.n	800c42a <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800c412:	6878      	ldr	r0, [r7, #4]
 800c414:	f000 fa52 	bl	800c8bc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c418:	e007      	b.n	800c42a <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800c41a:	6878      	ldr	r0, [r7, #4]
 800c41c:	f000 fa4e 	bl	800c8bc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c420:	687b      	ldr	r3, [r7, #4]
 800c422:	2200      	movs	r2, #0
 800c424:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 800c428:	e23b      	b.n	800c8a2 <HAL_UART_IRQHandler+0x722>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c42a:	bf00      	nop
    return;
 800c42c:	e239      	b.n	800c8a2 <HAL_UART_IRQHandler+0x722>
 800c42e:	bf00      	nop
 800c430:	10000001 	.word	0x10000001
 800c434:	04000120 	.word	0x04000120
 800c438:	0800da45 	.word	0x0800da45

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c43c:	687b      	ldr	r3, [r7, #4]
 800c43e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c440:	2b01      	cmp	r3, #1
 800c442:	f040 81ce 	bne.w	800c7e2 <HAL_UART_IRQHandler+0x662>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800c446:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c44a:	f003 0310 	and.w	r3, r3, #16
 800c44e:	2b00      	cmp	r3, #0
 800c450:	f000 81c7 	beq.w	800c7e2 <HAL_UART_IRQHandler+0x662>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800c454:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c458:	f003 0310 	and.w	r3, r3, #16
 800c45c:	2b00      	cmp	r3, #0
 800c45e:	f000 81c0 	beq.w	800c7e2 <HAL_UART_IRQHandler+0x662>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800c462:	687b      	ldr	r3, [r7, #4]
 800c464:	681b      	ldr	r3, [r3, #0]
 800c466:	2210      	movs	r2, #16
 800c468:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c46a:	687b      	ldr	r3, [r7, #4]
 800c46c:	681b      	ldr	r3, [r3, #0]
 800c46e:	689b      	ldr	r3, [r3, #8]
 800c470:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c474:	2b40      	cmp	r3, #64	; 0x40
 800c476:	f040 813b 	bne.w	800c6f0 <HAL_UART_IRQHandler+0x570>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800c47a:	687b      	ldr	r3, [r7, #4]
 800c47c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c47e:	681b      	ldr	r3, [r3, #0]
 800c480:	4a8b      	ldr	r2, [pc, #556]	; (800c6b0 <HAL_UART_IRQHandler+0x530>)
 800c482:	4293      	cmp	r3, r2
 800c484:	d059      	beq.n	800c53a <HAL_UART_IRQHandler+0x3ba>
 800c486:	687b      	ldr	r3, [r7, #4]
 800c488:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c48a:	681b      	ldr	r3, [r3, #0]
 800c48c:	4a89      	ldr	r2, [pc, #548]	; (800c6b4 <HAL_UART_IRQHandler+0x534>)
 800c48e:	4293      	cmp	r3, r2
 800c490:	d053      	beq.n	800c53a <HAL_UART_IRQHandler+0x3ba>
 800c492:	687b      	ldr	r3, [r7, #4]
 800c494:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c496:	681b      	ldr	r3, [r3, #0]
 800c498:	4a87      	ldr	r2, [pc, #540]	; (800c6b8 <HAL_UART_IRQHandler+0x538>)
 800c49a:	4293      	cmp	r3, r2
 800c49c:	d04d      	beq.n	800c53a <HAL_UART_IRQHandler+0x3ba>
 800c49e:	687b      	ldr	r3, [r7, #4]
 800c4a0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c4a2:	681b      	ldr	r3, [r3, #0]
 800c4a4:	4a85      	ldr	r2, [pc, #532]	; (800c6bc <HAL_UART_IRQHandler+0x53c>)
 800c4a6:	4293      	cmp	r3, r2
 800c4a8:	d047      	beq.n	800c53a <HAL_UART_IRQHandler+0x3ba>
 800c4aa:	687b      	ldr	r3, [r7, #4]
 800c4ac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c4ae:	681b      	ldr	r3, [r3, #0]
 800c4b0:	4a83      	ldr	r2, [pc, #524]	; (800c6c0 <HAL_UART_IRQHandler+0x540>)
 800c4b2:	4293      	cmp	r3, r2
 800c4b4:	d041      	beq.n	800c53a <HAL_UART_IRQHandler+0x3ba>
 800c4b6:	687b      	ldr	r3, [r7, #4]
 800c4b8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c4ba:	681b      	ldr	r3, [r3, #0]
 800c4bc:	4a81      	ldr	r2, [pc, #516]	; (800c6c4 <HAL_UART_IRQHandler+0x544>)
 800c4be:	4293      	cmp	r3, r2
 800c4c0:	d03b      	beq.n	800c53a <HAL_UART_IRQHandler+0x3ba>
 800c4c2:	687b      	ldr	r3, [r7, #4]
 800c4c4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c4c6:	681b      	ldr	r3, [r3, #0]
 800c4c8:	4a7f      	ldr	r2, [pc, #508]	; (800c6c8 <HAL_UART_IRQHandler+0x548>)
 800c4ca:	4293      	cmp	r3, r2
 800c4cc:	d035      	beq.n	800c53a <HAL_UART_IRQHandler+0x3ba>
 800c4ce:	687b      	ldr	r3, [r7, #4]
 800c4d0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c4d2:	681b      	ldr	r3, [r3, #0]
 800c4d4:	4a7d      	ldr	r2, [pc, #500]	; (800c6cc <HAL_UART_IRQHandler+0x54c>)
 800c4d6:	4293      	cmp	r3, r2
 800c4d8:	d02f      	beq.n	800c53a <HAL_UART_IRQHandler+0x3ba>
 800c4da:	687b      	ldr	r3, [r7, #4]
 800c4dc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c4de:	681b      	ldr	r3, [r3, #0]
 800c4e0:	4a7b      	ldr	r2, [pc, #492]	; (800c6d0 <HAL_UART_IRQHandler+0x550>)
 800c4e2:	4293      	cmp	r3, r2
 800c4e4:	d029      	beq.n	800c53a <HAL_UART_IRQHandler+0x3ba>
 800c4e6:	687b      	ldr	r3, [r7, #4]
 800c4e8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c4ea:	681b      	ldr	r3, [r3, #0]
 800c4ec:	4a79      	ldr	r2, [pc, #484]	; (800c6d4 <HAL_UART_IRQHandler+0x554>)
 800c4ee:	4293      	cmp	r3, r2
 800c4f0:	d023      	beq.n	800c53a <HAL_UART_IRQHandler+0x3ba>
 800c4f2:	687b      	ldr	r3, [r7, #4]
 800c4f4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c4f6:	681b      	ldr	r3, [r3, #0]
 800c4f8:	4a77      	ldr	r2, [pc, #476]	; (800c6d8 <HAL_UART_IRQHandler+0x558>)
 800c4fa:	4293      	cmp	r3, r2
 800c4fc:	d01d      	beq.n	800c53a <HAL_UART_IRQHandler+0x3ba>
 800c4fe:	687b      	ldr	r3, [r7, #4]
 800c500:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c502:	681b      	ldr	r3, [r3, #0]
 800c504:	4a75      	ldr	r2, [pc, #468]	; (800c6dc <HAL_UART_IRQHandler+0x55c>)
 800c506:	4293      	cmp	r3, r2
 800c508:	d017      	beq.n	800c53a <HAL_UART_IRQHandler+0x3ba>
 800c50a:	687b      	ldr	r3, [r7, #4]
 800c50c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c50e:	681b      	ldr	r3, [r3, #0]
 800c510:	4a73      	ldr	r2, [pc, #460]	; (800c6e0 <HAL_UART_IRQHandler+0x560>)
 800c512:	4293      	cmp	r3, r2
 800c514:	d011      	beq.n	800c53a <HAL_UART_IRQHandler+0x3ba>
 800c516:	687b      	ldr	r3, [r7, #4]
 800c518:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c51a:	681b      	ldr	r3, [r3, #0]
 800c51c:	4a71      	ldr	r2, [pc, #452]	; (800c6e4 <HAL_UART_IRQHandler+0x564>)
 800c51e:	4293      	cmp	r3, r2
 800c520:	d00b      	beq.n	800c53a <HAL_UART_IRQHandler+0x3ba>
 800c522:	687b      	ldr	r3, [r7, #4]
 800c524:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c526:	681b      	ldr	r3, [r3, #0]
 800c528:	4a6f      	ldr	r2, [pc, #444]	; (800c6e8 <HAL_UART_IRQHandler+0x568>)
 800c52a:	4293      	cmp	r3, r2
 800c52c:	d005      	beq.n	800c53a <HAL_UART_IRQHandler+0x3ba>
 800c52e:	687b      	ldr	r3, [r7, #4]
 800c530:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c532:	681b      	ldr	r3, [r3, #0]
 800c534:	4a6d      	ldr	r2, [pc, #436]	; (800c6ec <HAL_UART_IRQHandler+0x56c>)
 800c536:	4293      	cmp	r3, r2
 800c538:	d105      	bne.n	800c546 <HAL_UART_IRQHandler+0x3c6>
 800c53a:	687b      	ldr	r3, [r7, #4]
 800c53c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c53e:	681b      	ldr	r3, [r3, #0]
 800c540:	685b      	ldr	r3, [r3, #4]
 800c542:	b29b      	uxth	r3, r3
 800c544:	e004      	b.n	800c550 <HAL_UART_IRQHandler+0x3d0>
 800c546:	687b      	ldr	r3, [r7, #4]
 800c548:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c54a:	681b      	ldr	r3, [r3, #0]
 800c54c:	685b      	ldr	r3, [r3, #4]
 800c54e:	b29b      	uxth	r3, r3
 800c550:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800c554:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800c558:	2b00      	cmp	r3, #0
 800c55a:	f000 81a4 	beq.w	800c8a6 <HAL_UART_IRQHandler+0x726>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800c55e:	687b      	ldr	r3, [r7, #4]
 800c560:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800c564:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800c568:	429a      	cmp	r2, r3
 800c56a:	f080 819c 	bcs.w	800c8a6 <HAL_UART_IRQHandler+0x726>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800c56e:	687b      	ldr	r3, [r7, #4]
 800c570:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800c574:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800c578:	687b      	ldr	r3, [r7, #4]
 800c57a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c57c:	69db      	ldr	r3, [r3, #28]
 800c57e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c582:	f000 8086 	beq.w	800c692 <HAL_UART_IRQHandler+0x512>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c586:	687b      	ldr	r3, [r7, #4]
 800c588:	681b      	ldr	r3, [r3, #0]
 800c58a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c58e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800c592:	e853 3f00 	ldrex	r3, [r3]
 800c596:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800c59a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800c59e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c5a2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800c5a6:	687b      	ldr	r3, [r7, #4]
 800c5a8:	681b      	ldr	r3, [r3, #0]
 800c5aa:	461a      	mov	r2, r3
 800c5ac:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800c5b0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800c5b4:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c5b8:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800c5bc:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800c5c0:	e841 2300 	strex	r3, r2, [r1]
 800c5c4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800c5c8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800c5cc:	2b00      	cmp	r3, #0
 800c5ce:	d1da      	bne.n	800c586 <HAL_UART_IRQHandler+0x406>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c5d0:	687b      	ldr	r3, [r7, #4]
 800c5d2:	681b      	ldr	r3, [r3, #0]
 800c5d4:	3308      	adds	r3, #8
 800c5d6:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c5d8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c5da:	e853 3f00 	ldrex	r3, [r3]
 800c5de:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800c5e0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800c5e2:	f023 0301 	bic.w	r3, r3, #1
 800c5e6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800c5ea:	687b      	ldr	r3, [r7, #4]
 800c5ec:	681b      	ldr	r3, [r3, #0]
 800c5ee:	3308      	adds	r3, #8
 800c5f0:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800c5f4:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800c5f8:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c5fa:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800c5fc:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800c600:	e841 2300 	strex	r3, r2, [r1]
 800c604:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800c606:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c608:	2b00      	cmp	r3, #0
 800c60a:	d1e1      	bne.n	800c5d0 <HAL_UART_IRQHandler+0x450>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c60c:	687b      	ldr	r3, [r7, #4]
 800c60e:	681b      	ldr	r3, [r3, #0]
 800c610:	3308      	adds	r3, #8
 800c612:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c614:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c616:	e853 3f00 	ldrex	r3, [r3]
 800c61a:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800c61c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c61e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c622:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800c626:	687b      	ldr	r3, [r7, #4]
 800c628:	681b      	ldr	r3, [r3, #0]
 800c62a:	3308      	adds	r3, #8
 800c62c:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800c630:	66fa      	str	r2, [r7, #108]	; 0x6c
 800c632:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c634:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800c636:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800c638:	e841 2300 	strex	r3, r2, [r1]
 800c63c:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800c63e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c640:	2b00      	cmp	r3, #0
 800c642:	d1e3      	bne.n	800c60c <HAL_UART_IRQHandler+0x48c>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800c644:	687b      	ldr	r3, [r7, #4]
 800c646:	2220      	movs	r2, #32
 800c648:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c64c:	687b      	ldr	r3, [r7, #4]
 800c64e:	2200      	movs	r2, #0
 800c650:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c652:	687b      	ldr	r3, [r7, #4]
 800c654:	681b      	ldr	r3, [r3, #0]
 800c656:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c658:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c65a:	e853 3f00 	ldrex	r3, [r3]
 800c65e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800c660:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c662:	f023 0310 	bic.w	r3, r3, #16
 800c666:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800c66a:	687b      	ldr	r3, [r7, #4]
 800c66c:	681b      	ldr	r3, [r3, #0]
 800c66e:	461a      	mov	r2, r3
 800c670:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800c674:	65bb      	str	r3, [r7, #88]	; 0x58
 800c676:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c678:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800c67a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800c67c:	e841 2300 	strex	r3, r2, [r1]
 800c680:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800c682:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c684:	2b00      	cmp	r3, #0
 800c686:	d1e4      	bne.n	800c652 <HAL_UART_IRQHandler+0x4d2>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800c688:	687b      	ldr	r3, [r7, #4]
 800c68a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c68c:	4618      	mov	r0, r3
 800c68e:	f7fa f9d1 	bl	8006a34 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800c692:	687b      	ldr	r3, [r7, #4]
 800c694:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800c698:	687b      	ldr	r3, [r7, #4]
 800c69a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c69e:	b29b      	uxth	r3, r3
 800c6a0:	1ad3      	subs	r3, r2, r3
 800c6a2:	b29b      	uxth	r3, r3
 800c6a4:	4619      	mov	r1, r3
 800c6a6:	6878      	ldr	r0, [r7, #4]
 800c6a8:	f000 f912 	bl	800c8d0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800c6ac:	e0fb      	b.n	800c8a6 <HAL_UART_IRQHandler+0x726>
 800c6ae:	bf00      	nop
 800c6b0:	40020010 	.word	0x40020010
 800c6b4:	40020028 	.word	0x40020028
 800c6b8:	40020040 	.word	0x40020040
 800c6bc:	40020058 	.word	0x40020058
 800c6c0:	40020070 	.word	0x40020070
 800c6c4:	40020088 	.word	0x40020088
 800c6c8:	400200a0 	.word	0x400200a0
 800c6cc:	400200b8 	.word	0x400200b8
 800c6d0:	40020410 	.word	0x40020410
 800c6d4:	40020428 	.word	0x40020428
 800c6d8:	40020440 	.word	0x40020440
 800c6dc:	40020458 	.word	0x40020458
 800c6e0:	40020470 	.word	0x40020470
 800c6e4:	40020488 	.word	0x40020488
 800c6e8:	400204a0 	.word	0x400204a0
 800c6ec:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800c6f0:	687b      	ldr	r3, [r7, #4]
 800c6f2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800c6f6:	687b      	ldr	r3, [r7, #4]
 800c6f8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c6fc:	b29b      	uxth	r3, r3
 800c6fe:	1ad3      	subs	r3, r2, r3
 800c700:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800c704:	687b      	ldr	r3, [r7, #4]
 800c706:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c70a:	b29b      	uxth	r3, r3
 800c70c:	2b00      	cmp	r3, #0
 800c70e:	f000 80cc 	beq.w	800c8aa <HAL_UART_IRQHandler+0x72a>
          && (nb_rx_data > 0U))
 800c712:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800c716:	2b00      	cmp	r3, #0
 800c718:	f000 80c7 	beq.w	800c8aa <HAL_UART_IRQHandler+0x72a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c71c:	687b      	ldr	r3, [r7, #4]
 800c71e:	681b      	ldr	r3, [r3, #0]
 800c720:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c722:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c724:	e853 3f00 	ldrex	r3, [r3]
 800c728:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800c72a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c72c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800c730:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800c734:	687b      	ldr	r3, [r7, #4]
 800c736:	681b      	ldr	r3, [r3, #0]
 800c738:	461a      	mov	r2, r3
 800c73a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800c73e:	647b      	str	r3, [r7, #68]	; 0x44
 800c740:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c742:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800c744:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c746:	e841 2300 	strex	r3, r2, [r1]
 800c74a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800c74c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c74e:	2b00      	cmp	r3, #0
 800c750:	d1e4      	bne.n	800c71c <HAL_UART_IRQHandler+0x59c>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800c752:	687b      	ldr	r3, [r7, #4]
 800c754:	681b      	ldr	r3, [r3, #0]
 800c756:	3308      	adds	r3, #8
 800c758:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c75a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c75c:	e853 3f00 	ldrex	r3, [r3]
 800c760:	623b      	str	r3, [r7, #32]
   return(result);
 800c762:	6a3a      	ldr	r2, [r7, #32]
 800c764:	4b54      	ldr	r3, [pc, #336]	; (800c8b8 <HAL_UART_IRQHandler+0x738>)
 800c766:	4013      	ands	r3, r2
 800c768:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800c76c:	687b      	ldr	r3, [r7, #4]
 800c76e:	681b      	ldr	r3, [r3, #0]
 800c770:	3308      	adds	r3, #8
 800c772:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800c776:	633a      	str	r2, [r7, #48]	; 0x30
 800c778:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c77a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c77c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c77e:	e841 2300 	strex	r3, r2, [r1]
 800c782:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800c784:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c786:	2b00      	cmp	r3, #0
 800c788:	d1e3      	bne.n	800c752 <HAL_UART_IRQHandler+0x5d2>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800c78a:	687b      	ldr	r3, [r7, #4]
 800c78c:	2220      	movs	r2, #32
 800c78e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c792:	687b      	ldr	r3, [r7, #4]
 800c794:	2200      	movs	r2, #0
 800c796:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800c798:	687b      	ldr	r3, [r7, #4]
 800c79a:	2200      	movs	r2, #0
 800c79c:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c79e:	687b      	ldr	r3, [r7, #4]
 800c7a0:	681b      	ldr	r3, [r3, #0]
 800c7a2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c7a4:	693b      	ldr	r3, [r7, #16]
 800c7a6:	e853 3f00 	ldrex	r3, [r3]
 800c7aa:	60fb      	str	r3, [r7, #12]
   return(result);
 800c7ac:	68fb      	ldr	r3, [r7, #12]
 800c7ae:	f023 0310 	bic.w	r3, r3, #16
 800c7b2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800c7b6:	687b      	ldr	r3, [r7, #4]
 800c7b8:	681b      	ldr	r3, [r3, #0]
 800c7ba:	461a      	mov	r2, r3
 800c7bc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800c7c0:	61fb      	str	r3, [r7, #28]
 800c7c2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c7c4:	69b9      	ldr	r1, [r7, #24]
 800c7c6:	69fa      	ldr	r2, [r7, #28]
 800c7c8:	e841 2300 	strex	r3, r2, [r1]
 800c7cc:	617b      	str	r3, [r7, #20]
   return(result);
 800c7ce:	697b      	ldr	r3, [r7, #20]
 800c7d0:	2b00      	cmp	r3, #0
 800c7d2:	d1e4      	bne.n	800c79e <HAL_UART_IRQHandler+0x61e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800c7d4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800c7d8:	4619      	mov	r1, r3
 800c7da:	6878      	ldr	r0, [r7, #4]
 800c7dc:	f000 f878 	bl	800c8d0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800c7e0:	e063      	b.n	800c8aa <HAL_UART_IRQHandler+0x72a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800c7e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c7e6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800c7ea:	2b00      	cmp	r3, #0
 800c7ec:	d00e      	beq.n	800c80c <HAL_UART_IRQHandler+0x68c>
 800c7ee:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c7f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c7f6:	2b00      	cmp	r3, #0
 800c7f8:	d008      	beq.n	800c80c <HAL_UART_IRQHandler+0x68c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800c7fa:	687b      	ldr	r3, [r7, #4]
 800c7fc:	681b      	ldr	r3, [r3, #0]
 800c7fe:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800c802:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800c804:	6878      	ldr	r0, [r7, #4]
 800c806:	f001 fdbb 	bl	800e380 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800c80a:	e051      	b.n	800c8b0 <HAL_UART_IRQHandler+0x730>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800c80c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c810:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c814:	2b00      	cmp	r3, #0
 800c816:	d014      	beq.n	800c842 <HAL_UART_IRQHandler+0x6c2>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800c818:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c81c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c820:	2b00      	cmp	r3, #0
 800c822:	d105      	bne.n	800c830 <HAL_UART_IRQHandler+0x6b0>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800c824:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c828:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c82c:	2b00      	cmp	r3, #0
 800c82e:	d008      	beq.n	800c842 <HAL_UART_IRQHandler+0x6c2>
  {
    if (huart->TxISR != NULL)
 800c830:	687b      	ldr	r3, [r7, #4]
 800c832:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c834:	2b00      	cmp	r3, #0
 800c836:	d03a      	beq.n	800c8ae <HAL_UART_IRQHandler+0x72e>
    {
      huart->TxISR(huart);
 800c838:	687b      	ldr	r3, [r7, #4]
 800c83a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c83c:	6878      	ldr	r0, [r7, #4]
 800c83e:	4798      	blx	r3
    }
    return;
 800c840:	e035      	b.n	800c8ae <HAL_UART_IRQHandler+0x72e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800c842:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c846:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c84a:	2b00      	cmp	r3, #0
 800c84c:	d009      	beq.n	800c862 <HAL_UART_IRQHandler+0x6e2>
 800c84e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c852:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c856:	2b00      	cmp	r3, #0
 800c858:	d003      	beq.n	800c862 <HAL_UART_IRQHandler+0x6e2>
  {
    UART_EndTransmit_IT(huart);
 800c85a:	6878      	ldr	r0, [r7, #4]
 800c85c:	f001 f908 	bl	800da70 <UART_EndTransmit_IT>
    return;
 800c860:	e026      	b.n	800c8b0 <HAL_UART_IRQHandler+0x730>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800c862:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c866:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c86a:	2b00      	cmp	r3, #0
 800c86c:	d009      	beq.n	800c882 <HAL_UART_IRQHandler+0x702>
 800c86e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c872:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800c876:	2b00      	cmp	r3, #0
 800c878:	d003      	beq.n	800c882 <HAL_UART_IRQHandler+0x702>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800c87a:	6878      	ldr	r0, [r7, #4]
 800c87c:	f001 fd94 	bl	800e3a8 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800c880:	e016      	b.n	800c8b0 <HAL_UART_IRQHandler+0x730>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800c882:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c886:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800c88a:	2b00      	cmp	r3, #0
 800c88c:	d010      	beq.n	800c8b0 <HAL_UART_IRQHandler+0x730>
 800c88e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c892:	2b00      	cmp	r3, #0
 800c894:	da0c      	bge.n	800c8b0 <HAL_UART_IRQHandler+0x730>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800c896:	6878      	ldr	r0, [r7, #4]
 800c898:	f001 fd7c 	bl	800e394 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800c89c:	e008      	b.n	800c8b0 <HAL_UART_IRQHandler+0x730>
      return;
 800c89e:	bf00      	nop
 800c8a0:	e006      	b.n	800c8b0 <HAL_UART_IRQHandler+0x730>
    return;
 800c8a2:	bf00      	nop
 800c8a4:	e004      	b.n	800c8b0 <HAL_UART_IRQHandler+0x730>
      return;
 800c8a6:	bf00      	nop
 800c8a8:	e002      	b.n	800c8b0 <HAL_UART_IRQHandler+0x730>
      return;
 800c8aa:	bf00      	nop
 800c8ac:	e000      	b.n	800c8b0 <HAL_UART_IRQHandler+0x730>
    return;
 800c8ae:	bf00      	nop
  }
}
 800c8b0:	37e8      	adds	r7, #232	; 0xe8
 800c8b2:	46bd      	mov	sp, r7
 800c8b4:	bd80      	pop	{r7, pc}
 800c8b6:	bf00      	nop
 800c8b8:	effffffe 	.word	0xeffffffe

0800c8bc <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800c8bc:	b480      	push	{r7}
 800c8be:	b083      	sub	sp, #12
 800c8c0:	af00      	add	r7, sp, #0
 800c8c2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800c8c4:	bf00      	nop
 800c8c6:	370c      	adds	r7, #12
 800c8c8:	46bd      	mov	sp, r7
 800c8ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8ce:	4770      	bx	lr

0800c8d0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800c8d0:	b480      	push	{r7}
 800c8d2:	b083      	sub	sp, #12
 800c8d4:	af00      	add	r7, sp, #0
 800c8d6:	6078      	str	r0, [r7, #4]
 800c8d8:	460b      	mov	r3, r1
 800c8da:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800c8dc:	bf00      	nop
 800c8de:	370c      	adds	r7, #12
 800c8e0:	46bd      	mov	sp, r7
 800c8e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8e6:	4770      	bx	lr

0800c8e8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800c8e8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800c8ec:	b092      	sub	sp, #72	; 0x48
 800c8ee:	af00      	add	r7, sp, #0
 800c8f0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800c8f2:	2300      	movs	r3, #0
 800c8f4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800c8f8:	697b      	ldr	r3, [r7, #20]
 800c8fa:	689a      	ldr	r2, [r3, #8]
 800c8fc:	697b      	ldr	r3, [r7, #20]
 800c8fe:	691b      	ldr	r3, [r3, #16]
 800c900:	431a      	orrs	r2, r3
 800c902:	697b      	ldr	r3, [r7, #20]
 800c904:	695b      	ldr	r3, [r3, #20]
 800c906:	431a      	orrs	r2, r3
 800c908:	697b      	ldr	r3, [r7, #20]
 800c90a:	69db      	ldr	r3, [r3, #28]
 800c90c:	4313      	orrs	r3, r2
 800c90e:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800c910:	697b      	ldr	r3, [r7, #20]
 800c912:	681b      	ldr	r3, [r3, #0]
 800c914:	681a      	ldr	r2, [r3, #0]
 800c916:	4bbe      	ldr	r3, [pc, #760]	; (800cc10 <UART_SetConfig+0x328>)
 800c918:	4013      	ands	r3, r2
 800c91a:	697a      	ldr	r2, [r7, #20]
 800c91c:	6812      	ldr	r2, [r2, #0]
 800c91e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800c920:	430b      	orrs	r3, r1
 800c922:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800c924:	697b      	ldr	r3, [r7, #20]
 800c926:	681b      	ldr	r3, [r3, #0]
 800c928:	685b      	ldr	r3, [r3, #4]
 800c92a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800c92e:	697b      	ldr	r3, [r7, #20]
 800c930:	68da      	ldr	r2, [r3, #12]
 800c932:	697b      	ldr	r3, [r7, #20]
 800c934:	681b      	ldr	r3, [r3, #0]
 800c936:	430a      	orrs	r2, r1
 800c938:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800c93a:	697b      	ldr	r3, [r7, #20]
 800c93c:	699b      	ldr	r3, [r3, #24]
 800c93e:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800c940:	697b      	ldr	r3, [r7, #20]
 800c942:	681b      	ldr	r3, [r3, #0]
 800c944:	4ab3      	ldr	r2, [pc, #716]	; (800cc14 <UART_SetConfig+0x32c>)
 800c946:	4293      	cmp	r3, r2
 800c948:	d004      	beq.n	800c954 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800c94a:	697b      	ldr	r3, [r7, #20]
 800c94c:	6a1b      	ldr	r3, [r3, #32]
 800c94e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c950:	4313      	orrs	r3, r2
 800c952:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800c954:	697b      	ldr	r3, [r7, #20]
 800c956:	681b      	ldr	r3, [r3, #0]
 800c958:	689a      	ldr	r2, [r3, #8]
 800c95a:	4baf      	ldr	r3, [pc, #700]	; (800cc18 <UART_SetConfig+0x330>)
 800c95c:	4013      	ands	r3, r2
 800c95e:	697a      	ldr	r2, [r7, #20]
 800c960:	6812      	ldr	r2, [r2, #0]
 800c962:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800c964:	430b      	orrs	r3, r1
 800c966:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800c968:	697b      	ldr	r3, [r7, #20]
 800c96a:	681b      	ldr	r3, [r3, #0]
 800c96c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c96e:	f023 010f 	bic.w	r1, r3, #15
 800c972:	697b      	ldr	r3, [r7, #20]
 800c974:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c976:	697b      	ldr	r3, [r7, #20]
 800c978:	681b      	ldr	r3, [r3, #0]
 800c97a:	430a      	orrs	r2, r1
 800c97c:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800c97e:	697b      	ldr	r3, [r7, #20]
 800c980:	681b      	ldr	r3, [r3, #0]
 800c982:	4aa6      	ldr	r2, [pc, #664]	; (800cc1c <UART_SetConfig+0x334>)
 800c984:	4293      	cmp	r3, r2
 800c986:	d177      	bne.n	800ca78 <UART_SetConfig+0x190>
 800c988:	4ba5      	ldr	r3, [pc, #660]	; (800cc20 <UART_SetConfig+0x338>)
 800c98a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c98c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800c990:	2b28      	cmp	r3, #40	; 0x28
 800c992:	d86d      	bhi.n	800ca70 <UART_SetConfig+0x188>
 800c994:	a201      	add	r2, pc, #4	; (adr r2, 800c99c <UART_SetConfig+0xb4>)
 800c996:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c99a:	bf00      	nop
 800c99c:	0800ca41 	.word	0x0800ca41
 800c9a0:	0800ca71 	.word	0x0800ca71
 800c9a4:	0800ca71 	.word	0x0800ca71
 800c9a8:	0800ca71 	.word	0x0800ca71
 800c9ac:	0800ca71 	.word	0x0800ca71
 800c9b0:	0800ca71 	.word	0x0800ca71
 800c9b4:	0800ca71 	.word	0x0800ca71
 800c9b8:	0800ca71 	.word	0x0800ca71
 800c9bc:	0800ca49 	.word	0x0800ca49
 800c9c0:	0800ca71 	.word	0x0800ca71
 800c9c4:	0800ca71 	.word	0x0800ca71
 800c9c8:	0800ca71 	.word	0x0800ca71
 800c9cc:	0800ca71 	.word	0x0800ca71
 800c9d0:	0800ca71 	.word	0x0800ca71
 800c9d4:	0800ca71 	.word	0x0800ca71
 800c9d8:	0800ca71 	.word	0x0800ca71
 800c9dc:	0800ca51 	.word	0x0800ca51
 800c9e0:	0800ca71 	.word	0x0800ca71
 800c9e4:	0800ca71 	.word	0x0800ca71
 800c9e8:	0800ca71 	.word	0x0800ca71
 800c9ec:	0800ca71 	.word	0x0800ca71
 800c9f0:	0800ca71 	.word	0x0800ca71
 800c9f4:	0800ca71 	.word	0x0800ca71
 800c9f8:	0800ca71 	.word	0x0800ca71
 800c9fc:	0800ca59 	.word	0x0800ca59
 800ca00:	0800ca71 	.word	0x0800ca71
 800ca04:	0800ca71 	.word	0x0800ca71
 800ca08:	0800ca71 	.word	0x0800ca71
 800ca0c:	0800ca71 	.word	0x0800ca71
 800ca10:	0800ca71 	.word	0x0800ca71
 800ca14:	0800ca71 	.word	0x0800ca71
 800ca18:	0800ca71 	.word	0x0800ca71
 800ca1c:	0800ca61 	.word	0x0800ca61
 800ca20:	0800ca71 	.word	0x0800ca71
 800ca24:	0800ca71 	.word	0x0800ca71
 800ca28:	0800ca71 	.word	0x0800ca71
 800ca2c:	0800ca71 	.word	0x0800ca71
 800ca30:	0800ca71 	.word	0x0800ca71
 800ca34:	0800ca71 	.word	0x0800ca71
 800ca38:	0800ca71 	.word	0x0800ca71
 800ca3c:	0800ca69 	.word	0x0800ca69
 800ca40:	2301      	movs	r3, #1
 800ca42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ca46:	e222      	b.n	800ce8e <UART_SetConfig+0x5a6>
 800ca48:	2304      	movs	r3, #4
 800ca4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ca4e:	e21e      	b.n	800ce8e <UART_SetConfig+0x5a6>
 800ca50:	2308      	movs	r3, #8
 800ca52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ca56:	e21a      	b.n	800ce8e <UART_SetConfig+0x5a6>
 800ca58:	2310      	movs	r3, #16
 800ca5a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ca5e:	e216      	b.n	800ce8e <UART_SetConfig+0x5a6>
 800ca60:	2320      	movs	r3, #32
 800ca62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ca66:	e212      	b.n	800ce8e <UART_SetConfig+0x5a6>
 800ca68:	2340      	movs	r3, #64	; 0x40
 800ca6a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ca6e:	e20e      	b.n	800ce8e <UART_SetConfig+0x5a6>
 800ca70:	2380      	movs	r3, #128	; 0x80
 800ca72:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ca76:	e20a      	b.n	800ce8e <UART_SetConfig+0x5a6>
 800ca78:	697b      	ldr	r3, [r7, #20]
 800ca7a:	681b      	ldr	r3, [r3, #0]
 800ca7c:	4a69      	ldr	r2, [pc, #420]	; (800cc24 <UART_SetConfig+0x33c>)
 800ca7e:	4293      	cmp	r3, r2
 800ca80:	d130      	bne.n	800cae4 <UART_SetConfig+0x1fc>
 800ca82:	4b67      	ldr	r3, [pc, #412]	; (800cc20 <UART_SetConfig+0x338>)
 800ca84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ca86:	f003 0307 	and.w	r3, r3, #7
 800ca8a:	2b05      	cmp	r3, #5
 800ca8c:	d826      	bhi.n	800cadc <UART_SetConfig+0x1f4>
 800ca8e:	a201      	add	r2, pc, #4	; (adr r2, 800ca94 <UART_SetConfig+0x1ac>)
 800ca90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ca94:	0800caad 	.word	0x0800caad
 800ca98:	0800cab5 	.word	0x0800cab5
 800ca9c:	0800cabd 	.word	0x0800cabd
 800caa0:	0800cac5 	.word	0x0800cac5
 800caa4:	0800cacd 	.word	0x0800cacd
 800caa8:	0800cad5 	.word	0x0800cad5
 800caac:	2300      	movs	r3, #0
 800caae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cab2:	e1ec      	b.n	800ce8e <UART_SetConfig+0x5a6>
 800cab4:	2304      	movs	r3, #4
 800cab6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800caba:	e1e8      	b.n	800ce8e <UART_SetConfig+0x5a6>
 800cabc:	2308      	movs	r3, #8
 800cabe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cac2:	e1e4      	b.n	800ce8e <UART_SetConfig+0x5a6>
 800cac4:	2310      	movs	r3, #16
 800cac6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800caca:	e1e0      	b.n	800ce8e <UART_SetConfig+0x5a6>
 800cacc:	2320      	movs	r3, #32
 800cace:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cad2:	e1dc      	b.n	800ce8e <UART_SetConfig+0x5a6>
 800cad4:	2340      	movs	r3, #64	; 0x40
 800cad6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cada:	e1d8      	b.n	800ce8e <UART_SetConfig+0x5a6>
 800cadc:	2380      	movs	r3, #128	; 0x80
 800cade:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cae2:	e1d4      	b.n	800ce8e <UART_SetConfig+0x5a6>
 800cae4:	697b      	ldr	r3, [r7, #20]
 800cae6:	681b      	ldr	r3, [r3, #0]
 800cae8:	4a4f      	ldr	r2, [pc, #316]	; (800cc28 <UART_SetConfig+0x340>)
 800caea:	4293      	cmp	r3, r2
 800caec:	d130      	bne.n	800cb50 <UART_SetConfig+0x268>
 800caee:	4b4c      	ldr	r3, [pc, #304]	; (800cc20 <UART_SetConfig+0x338>)
 800caf0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800caf2:	f003 0307 	and.w	r3, r3, #7
 800caf6:	2b05      	cmp	r3, #5
 800caf8:	d826      	bhi.n	800cb48 <UART_SetConfig+0x260>
 800cafa:	a201      	add	r2, pc, #4	; (adr r2, 800cb00 <UART_SetConfig+0x218>)
 800cafc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cb00:	0800cb19 	.word	0x0800cb19
 800cb04:	0800cb21 	.word	0x0800cb21
 800cb08:	0800cb29 	.word	0x0800cb29
 800cb0c:	0800cb31 	.word	0x0800cb31
 800cb10:	0800cb39 	.word	0x0800cb39
 800cb14:	0800cb41 	.word	0x0800cb41
 800cb18:	2300      	movs	r3, #0
 800cb1a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cb1e:	e1b6      	b.n	800ce8e <UART_SetConfig+0x5a6>
 800cb20:	2304      	movs	r3, #4
 800cb22:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cb26:	e1b2      	b.n	800ce8e <UART_SetConfig+0x5a6>
 800cb28:	2308      	movs	r3, #8
 800cb2a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cb2e:	e1ae      	b.n	800ce8e <UART_SetConfig+0x5a6>
 800cb30:	2310      	movs	r3, #16
 800cb32:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cb36:	e1aa      	b.n	800ce8e <UART_SetConfig+0x5a6>
 800cb38:	2320      	movs	r3, #32
 800cb3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cb3e:	e1a6      	b.n	800ce8e <UART_SetConfig+0x5a6>
 800cb40:	2340      	movs	r3, #64	; 0x40
 800cb42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cb46:	e1a2      	b.n	800ce8e <UART_SetConfig+0x5a6>
 800cb48:	2380      	movs	r3, #128	; 0x80
 800cb4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cb4e:	e19e      	b.n	800ce8e <UART_SetConfig+0x5a6>
 800cb50:	697b      	ldr	r3, [r7, #20]
 800cb52:	681b      	ldr	r3, [r3, #0]
 800cb54:	4a35      	ldr	r2, [pc, #212]	; (800cc2c <UART_SetConfig+0x344>)
 800cb56:	4293      	cmp	r3, r2
 800cb58:	d130      	bne.n	800cbbc <UART_SetConfig+0x2d4>
 800cb5a:	4b31      	ldr	r3, [pc, #196]	; (800cc20 <UART_SetConfig+0x338>)
 800cb5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cb5e:	f003 0307 	and.w	r3, r3, #7
 800cb62:	2b05      	cmp	r3, #5
 800cb64:	d826      	bhi.n	800cbb4 <UART_SetConfig+0x2cc>
 800cb66:	a201      	add	r2, pc, #4	; (adr r2, 800cb6c <UART_SetConfig+0x284>)
 800cb68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cb6c:	0800cb85 	.word	0x0800cb85
 800cb70:	0800cb8d 	.word	0x0800cb8d
 800cb74:	0800cb95 	.word	0x0800cb95
 800cb78:	0800cb9d 	.word	0x0800cb9d
 800cb7c:	0800cba5 	.word	0x0800cba5
 800cb80:	0800cbad 	.word	0x0800cbad
 800cb84:	2300      	movs	r3, #0
 800cb86:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cb8a:	e180      	b.n	800ce8e <UART_SetConfig+0x5a6>
 800cb8c:	2304      	movs	r3, #4
 800cb8e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cb92:	e17c      	b.n	800ce8e <UART_SetConfig+0x5a6>
 800cb94:	2308      	movs	r3, #8
 800cb96:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cb9a:	e178      	b.n	800ce8e <UART_SetConfig+0x5a6>
 800cb9c:	2310      	movs	r3, #16
 800cb9e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cba2:	e174      	b.n	800ce8e <UART_SetConfig+0x5a6>
 800cba4:	2320      	movs	r3, #32
 800cba6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cbaa:	e170      	b.n	800ce8e <UART_SetConfig+0x5a6>
 800cbac:	2340      	movs	r3, #64	; 0x40
 800cbae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cbb2:	e16c      	b.n	800ce8e <UART_SetConfig+0x5a6>
 800cbb4:	2380      	movs	r3, #128	; 0x80
 800cbb6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cbba:	e168      	b.n	800ce8e <UART_SetConfig+0x5a6>
 800cbbc:	697b      	ldr	r3, [r7, #20]
 800cbbe:	681b      	ldr	r3, [r3, #0]
 800cbc0:	4a1b      	ldr	r2, [pc, #108]	; (800cc30 <UART_SetConfig+0x348>)
 800cbc2:	4293      	cmp	r3, r2
 800cbc4:	d142      	bne.n	800cc4c <UART_SetConfig+0x364>
 800cbc6:	4b16      	ldr	r3, [pc, #88]	; (800cc20 <UART_SetConfig+0x338>)
 800cbc8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cbca:	f003 0307 	and.w	r3, r3, #7
 800cbce:	2b05      	cmp	r3, #5
 800cbd0:	d838      	bhi.n	800cc44 <UART_SetConfig+0x35c>
 800cbd2:	a201      	add	r2, pc, #4	; (adr r2, 800cbd8 <UART_SetConfig+0x2f0>)
 800cbd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cbd8:	0800cbf1 	.word	0x0800cbf1
 800cbdc:	0800cbf9 	.word	0x0800cbf9
 800cbe0:	0800cc01 	.word	0x0800cc01
 800cbe4:	0800cc09 	.word	0x0800cc09
 800cbe8:	0800cc35 	.word	0x0800cc35
 800cbec:	0800cc3d 	.word	0x0800cc3d
 800cbf0:	2300      	movs	r3, #0
 800cbf2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cbf6:	e14a      	b.n	800ce8e <UART_SetConfig+0x5a6>
 800cbf8:	2304      	movs	r3, #4
 800cbfa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cbfe:	e146      	b.n	800ce8e <UART_SetConfig+0x5a6>
 800cc00:	2308      	movs	r3, #8
 800cc02:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cc06:	e142      	b.n	800ce8e <UART_SetConfig+0x5a6>
 800cc08:	2310      	movs	r3, #16
 800cc0a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cc0e:	e13e      	b.n	800ce8e <UART_SetConfig+0x5a6>
 800cc10:	cfff69f3 	.word	0xcfff69f3
 800cc14:	58000c00 	.word	0x58000c00
 800cc18:	11fff4ff 	.word	0x11fff4ff
 800cc1c:	40011000 	.word	0x40011000
 800cc20:	58024400 	.word	0x58024400
 800cc24:	40004400 	.word	0x40004400
 800cc28:	40004800 	.word	0x40004800
 800cc2c:	40004c00 	.word	0x40004c00
 800cc30:	40005000 	.word	0x40005000
 800cc34:	2320      	movs	r3, #32
 800cc36:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cc3a:	e128      	b.n	800ce8e <UART_SetConfig+0x5a6>
 800cc3c:	2340      	movs	r3, #64	; 0x40
 800cc3e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cc42:	e124      	b.n	800ce8e <UART_SetConfig+0x5a6>
 800cc44:	2380      	movs	r3, #128	; 0x80
 800cc46:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cc4a:	e120      	b.n	800ce8e <UART_SetConfig+0x5a6>
 800cc4c:	697b      	ldr	r3, [r7, #20]
 800cc4e:	681b      	ldr	r3, [r3, #0]
 800cc50:	4acb      	ldr	r2, [pc, #812]	; (800cf80 <UART_SetConfig+0x698>)
 800cc52:	4293      	cmp	r3, r2
 800cc54:	d176      	bne.n	800cd44 <UART_SetConfig+0x45c>
 800cc56:	4bcb      	ldr	r3, [pc, #812]	; (800cf84 <UART_SetConfig+0x69c>)
 800cc58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cc5a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800cc5e:	2b28      	cmp	r3, #40	; 0x28
 800cc60:	d86c      	bhi.n	800cd3c <UART_SetConfig+0x454>
 800cc62:	a201      	add	r2, pc, #4	; (adr r2, 800cc68 <UART_SetConfig+0x380>)
 800cc64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cc68:	0800cd0d 	.word	0x0800cd0d
 800cc6c:	0800cd3d 	.word	0x0800cd3d
 800cc70:	0800cd3d 	.word	0x0800cd3d
 800cc74:	0800cd3d 	.word	0x0800cd3d
 800cc78:	0800cd3d 	.word	0x0800cd3d
 800cc7c:	0800cd3d 	.word	0x0800cd3d
 800cc80:	0800cd3d 	.word	0x0800cd3d
 800cc84:	0800cd3d 	.word	0x0800cd3d
 800cc88:	0800cd15 	.word	0x0800cd15
 800cc8c:	0800cd3d 	.word	0x0800cd3d
 800cc90:	0800cd3d 	.word	0x0800cd3d
 800cc94:	0800cd3d 	.word	0x0800cd3d
 800cc98:	0800cd3d 	.word	0x0800cd3d
 800cc9c:	0800cd3d 	.word	0x0800cd3d
 800cca0:	0800cd3d 	.word	0x0800cd3d
 800cca4:	0800cd3d 	.word	0x0800cd3d
 800cca8:	0800cd1d 	.word	0x0800cd1d
 800ccac:	0800cd3d 	.word	0x0800cd3d
 800ccb0:	0800cd3d 	.word	0x0800cd3d
 800ccb4:	0800cd3d 	.word	0x0800cd3d
 800ccb8:	0800cd3d 	.word	0x0800cd3d
 800ccbc:	0800cd3d 	.word	0x0800cd3d
 800ccc0:	0800cd3d 	.word	0x0800cd3d
 800ccc4:	0800cd3d 	.word	0x0800cd3d
 800ccc8:	0800cd25 	.word	0x0800cd25
 800cccc:	0800cd3d 	.word	0x0800cd3d
 800ccd0:	0800cd3d 	.word	0x0800cd3d
 800ccd4:	0800cd3d 	.word	0x0800cd3d
 800ccd8:	0800cd3d 	.word	0x0800cd3d
 800ccdc:	0800cd3d 	.word	0x0800cd3d
 800cce0:	0800cd3d 	.word	0x0800cd3d
 800cce4:	0800cd3d 	.word	0x0800cd3d
 800cce8:	0800cd2d 	.word	0x0800cd2d
 800ccec:	0800cd3d 	.word	0x0800cd3d
 800ccf0:	0800cd3d 	.word	0x0800cd3d
 800ccf4:	0800cd3d 	.word	0x0800cd3d
 800ccf8:	0800cd3d 	.word	0x0800cd3d
 800ccfc:	0800cd3d 	.word	0x0800cd3d
 800cd00:	0800cd3d 	.word	0x0800cd3d
 800cd04:	0800cd3d 	.word	0x0800cd3d
 800cd08:	0800cd35 	.word	0x0800cd35
 800cd0c:	2301      	movs	r3, #1
 800cd0e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cd12:	e0bc      	b.n	800ce8e <UART_SetConfig+0x5a6>
 800cd14:	2304      	movs	r3, #4
 800cd16:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cd1a:	e0b8      	b.n	800ce8e <UART_SetConfig+0x5a6>
 800cd1c:	2308      	movs	r3, #8
 800cd1e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cd22:	e0b4      	b.n	800ce8e <UART_SetConfig+0x5a6>
 800cd24:	2310      	movs	r3, #16
 800cd26:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cd2a:	e0b0      	b.n	800ce8e <UART_SetConfig+0x5a6>
 800cd2c:	2320      	movs	r3, #32
 800cd2e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cd32:	e0ac      	b.n	800ce8e <UART_SetConfig+0x5a6>
 800cd34:	2340      	movs	r3, #64	; 0x40
 800cd36:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cd3a:	e0a8      	b.n	800ce8e <UART_SetConfig+0x5a6>
 800cd3c:	2380      	movs	r3, #128	; 0x80
 800cd3e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cd42:	e0a4      	b.n	800ce8e <UART_SetConfig+0x5a6>
 800cd44:	697b      	ldr	r3, [r7, #20]
 800cd46:	681b      	ldr	r3, [r3, #0]
 800cd48:	4a8f      	ldr	r2, [pc, #572]	; (800cf88 <UART_SetConfig+0x6a0>)
 800cd4a:	4293      	cmp	r3, r2
 800cd4c:	d130      	bne.n	800cdb0 <UART_SetConfig+0x4c8>
 800cd4e:	4b8d      	ldr	r3, [pc, #564]	; (800cf84 <UART_SetConfig+0x69c>)
 800cd50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cd52:	f003 0307 	and.w	r3, r3, #7
 800cd56:	2b05      	cmp	r3, #5
 800cd58:	d826      	bhi.n	800cda8 <UART_SetConfig+0x4c0>
 800cd5a:	a201      	add	r2, pc, #4	; (adr r2, 800cd60 <UART_SetConfig+0x478>)
 800cd5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cd60:	0800cd79 	.word	0x0800cd79
 800cd64:	0800cd81 	.word	0x0800cd81
 800cd68:	0800cd89 	.word	0x0800cd89
 800cd6c:	0800cd91 	.word	0x0800cd91
 800cd70:	0800cd99 	.word	0x0800cd99
 800cd74:	0800cda1 	.word	0x0800cda1
 800cd78:	2300      	movs	r3, #0
 800cd7a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cd7e:	e086      	b.n	800ce8e <UART_SetConfig+0x5a6>
 800cd80:	2304      	movs	r3, #4
 800cd82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cd86:	e082      	b.n	800ce8e <UART_SetConfig+0x5a6>
 800cd88:	2308      	movs	r3, #8
 800cd8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cd8e:	e07e      	b.n	800ce8e <UART_SetConfig+0x5a6>
 800cd90:	2310      	movs	r3, #16
 800cd92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cd96:	e07a      	b.n	800ce8e <UART_SetConfig+0x5a6>
 800cd98:	2320      	movs	r3, #32
 800cd9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cd9e:	e076      	b.n	800ce8e <UART_SetConfig+0x5a6>
 800cda0:	2340      	movs	r3, #64	; 0x40
 800cda2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cda6:	e072      	b.n	800ce8e <UART_SetConfig+0x5a6>
 800cda8:	2380      	movs	r3, #128	; 0x80
 800cdaa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cdae:	e06e      	b.n	800ce8e <UART_SetConfig+0x5a6>
 800cdb0:	697b      	ldr	r3, [r7, #20]
 800cdb2:	681b      	ldr	r3, [r3, #0]
 800cdb4:	4a75      	ldr	r2, [pc, #468]	; (800cf8c <UART_SetConfig+0x6a4>)
 800cdb6:	4293      	cmp	r3, r2
 800cdb8:	d130      	bne.n	800ce1c <UART_SetConfig+0x534>
 800cdba:	4b72      	ldr	r3, [pc, #456]	; (800cf84 <UART_SetConfig+0x69c>)
 800cdbc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cdbe:	f003 0307 	and.w	r3, r3, #7
 800cdc2:	2b05      	cmp	r3, #5
 800cdc4:	d826      	bhi.n	800ce14 <UART_SetConfig+0x52c>
 800cdc6:	a201      	add	r2, pc, #4	; (adr r2, 800cdcc <UART_SetConfig+0x4e4>)
 800cdc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cdcc:	0800cde5 	.word	0x0800cde5
 800cdd0:	0800cded 	.word	0x0800cded
 800cdd4:	0800cdf5 	.word	0x0800cdf5
 800cdd8:	0800cdfd 	.word	0x0800cdfd
 800cddc:	0800ce05 	.word	0x0800ce05
 800cde0:	0800ce0d 	.word	0x0800ce0d
 800cde4:	2300      	movs	r3, #0
 800cde6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cdea:	e050      	b.n	800ce8e <UART_SetConfig+0x5a6>
 800cdec:	2304      	movs	r3, #4
 800cdee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cdf2:	e04c      	b.n	800ce8e <UART_SetConfig+0x5a6>
 800cdf4:	2308      	movs	r3, #8
 800cdf6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cdfa:	e048      	b.n	800ce8e <UART_SetConfig+0x5a6>
 800cdfc:	2310      	movs	r3, #16
 800cdfe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ce02:	e044      	b.n	800ce8e <UART_SetConfig+0x5a6>
 800ce04:	2320      	movs	r3, #32
 800ce06:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ce0a:	e040      	b.n	800ce8e <UART_SetConfig+0x5a6>
 800ce0c:	2340      	movs	r3, #64	; 0x40
 800ce0e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ce12:	e03c      	b.n	800ce8e <UART_SetConfig+0x5a6>
 800ce14:	2380      	movs	r3, #128	; 0x80
 800ce16:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ce1a:	e038      	b.n	800ce8e <UART_SetConfig+0x5a6>
 800ce1c:	697b      	ldr	r3, [r7, #20]
 800ce1e:	681b      	ldr	r3, [r3, #0]
 800ce20:	4a5b      	ldr	r2, [pc, #364]	; (800cf90 <UART_SetConfig+0x6a8>)
 800ce22:	4293      	cmp	r3, r2
 800ce24:	d130      	bne.n	800ce88 <UART_SetConfig+0x5a0>
 800ce26:	4b57      	ldr	r3, [pc, #348]	; (800cf84 <UART_SetConfig+0x69c>)
 800ce28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ce2a:	f003 0307 	and.w	r3, r3, #7
 800ce2e:	2b05      	cmp	r3, #5
 800ce30:	d826      	bhi.n	800ce80 <UART_SetConfig+0x598>
 800ce32:	a201      	add	r2, pc, #4	; (adr r2, 800ce38 <UART_SetConfig+0x550>)
 800ce34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ce38:	0800ce51 	.word	0x0800ce51
 800ce3c:	0800ce59 	.word	0x0800ce59
 800ce40:	0800ce61 	.word	0x0800ce61
 800ce44:	0800ce69 	.word	0x0800ce69
 800ce48:	0800ce71 	.word	0x0800ce71
 800ce4c:	0800ce79 	.word	0x0800ce79
 800ce50:	2302      	movs	r3, #2
 800ce52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ce56:	e01a      	b.n	800ce8e <UART_SetConfig+0x5a6>
 800ce58:	2304      	movs	r3, #4
 800ce5a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ce5e:	e016      	b.n	800ce8e <UART_SetConfig+0x5a6>
 800ce60:	2308      	movs	r3, #8
 800ce62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ce66:	e012      	b.n	800ce8e <UART_SetConfig+0x5a6>
 800ce68:	2310      	movs	r3, #16
 800ce6a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ce6e:	e00e      	b.n	800ce8e <UART_SetConfig+0x5a6>
 800ce70:	2320      	movs	r3, #32
 800ce72:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ce76:	e00a      	b.n	800ce8e <UART_SetConfig+0x5a6>
 800ce78:	2340      	movs	r3, #64	; 0x40
 800ce7a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ce7e:	e006      	b.n	800ce8e <UART_SetConfig+0x5a6>
 800ce80:	2380      	movs	r3, #128	; 0x80
 800ce82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ce86:	e002      	b.n	800ce8e <UART_SetConfig+0x5a6>
 800ce88:	2380      	movs	r3, #128	; 0x80
 800ce8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800ce8e:	697b      	ldr	r3, [r7, #20]
 800ce90:	681b      	ldr	r3, [r3, #0]
 800ce92:	4a3f      	ldr	r2, [pc, #252]	; (800cf90 <UART_SetConfig+0x6a8>)
 800ce94:	4293      	cmp	r3, r2
 800ce96:	f040 80f8 	bne.w	800d08a <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800ce9a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800ce9e:	2b20      	cmp	r3, #32
 800cea0:	dc46      	bgt.n	800cf30 <UART_SetConfig+0x648>
 800cea2:	2b02      	cmp	r3, #2
 800cea4:	f2c0 8082 	blt.w	800cfac <UART_SetConfig+0x6c4>
 800cea8:	3b02      	subs	r3, #2
 800ceaa:	2b1e      	cmp	r3, #30
 800ceac:	d87e      	bhi.n	800cfac <UART_SetConfig+0x6c4>
 800ceae:	a201      	add	r2, pc, #4	; (adr r2, 800ceb4 <UART_SetConfig+0x5cc>)
 800ceb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ceb4:	0800cf37 	.word	0x0800cf37
 800ceb8:	0800cfad 	.word	0x0800cfad
 800cebc:	0800cf3f 	.word	0x0800cf3f
 800cec0:	0800cfad 	.word	0x0800cfad
 800cec4:	0800cfad 	.word	0x0800cfad
 800cec8:	0800cfad 	.word	0x0800cfad
 800cecc:	0800cf4f 	.word	0x0800cf4f
 800ced0:	0800cfad 	.word	0x0800cfad
 800ced4:	0800cfad 	.word	0x0800cfad
 800ced8:	0800cfad 	.word	0x0800cfad
 800cedc:	0800cfad 	.word	0x0800cfad
 800cee0:	0800cfad 	.word	0x0800cfad
 800cee4:	0800cfad 	.word	0x0800cfad
 800cee8:	0800cfad 	.word	0x0800cfad
 800ceec:	0800cf5f 	.word	0x0800cf5f
 800cef0:	0800cfad 	.word	0x0800cfad
 800cef4:	0800cfad 	.word	0x0800cfad
 800cef8:	0800cfad 	.word	0x0800cfad
 800cefc:	0800cfad 	.word	0x0800cfad
 800cf00:	0800cfad 	.word	0x0800cfad
 800cf04:	0800cfad 	.word	0x0800cfad
 800cf08:	0800cfad 	.word	0x0800cfad
 800cf0c:	0800cfad 	.word	0x0800cfad
 800cf10:	0800cfad 	.word	0x0800cfad
 800cf14:	0800cfad 	.word	0x0800cfad
 800cf18:	0800cfad 	.word	0x0800cfad
 800cf1c:	0800cfad 	.word	0x0800cfad
 800cf20:	0800cfad 	.word	0x0800cfad
 800cf24:	0800cfad 	.word	0x0800cfad
 800cf28:	0800cfad 	.word	0x0800cfad
 800cf2c:	0800cf9f 	.word	0x0800cf9f
 800cf30:	2b40      	cmp	r3, #64	; 0x40
 800cf32:	d037      	beq.n	800cfa4 <UART_SetConfig+0x6bc>
 800cf34:	e03a      	b.n	800cfac <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800cf36:	f7fc fc17 	bl	8009768 <HAL_RCCEx_GetD3PCLK1Freq>
 800cf3a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800cf3c:	e03c      	b.n	800cfb8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800cf3e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800cf42:	4618      	mov	r0, r3
 800cf44:	f7fc fc26 	bl	8009794 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800cf48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf4a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cf4c:	e034      	b.n	800cfb8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800cf4e:	f107 0318 	add.w	r3, r7, #24
 800cf52:	4618      	mov	r0, r3
 800cf54:	f7fc fd72 	bl	8009a3c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800cf58:	69fb      	ldr	r3, [r7, #28]
 800cf5a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cf5c:	e02c      	b.n	800cfb8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800cf5e:	4b09      	ldr	r3, [pc, #36]	; (800cf84 <UART_SetConfig+0x69c>)
 800cf60:	681b      	ldr	r3, [r3, #0]
 800cf62:	f003 0320 	and.w	r3, r3, #32
 800cf66:	2b00      	cmp	r3, #0
 800cf68:	d016      	beq.n	800cf98 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800cf6a:	4b06      	ldr	r3, [pc, #24]	; (800cf84 <UART_SetConfig+0x69c>)
 800cf6c:	681b      	ldr	r3, [r3, #0]
 800cf6e:	08db      	lsrs	r3, r3, #3
 800cf70:	f003 0303 	and.w	r3, r3, #3
 800cf74:	4a07      	ldr	r2, [pc, #28]	; (800cf94 <UART_SetConfig+0x6ac>)
 800cf76:	fa22 f303 	lsr.w	r3, r2, r3
 800cf7a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800cf7c:	e01c      	b.n	800cfb8 <UART_SetConfig+0x6d0>
 800cf7e:	bf00      	nop
 800cf80:	40011400 	.word	0x40011400
 800cf84:	58024400 	.word	0x58024400
 800cf88:	40007800 	.word	0x40007800
 800cf8c:	40007c00 	.word	0x40007c00
 800cf90:	58000c00 	.word	0x58000c00
 800cf94:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800cf98:	4b9d      	ldr	r3, [pc, #628]	; (800d210 <UART_SetConfig+0x928>)
 800cf9a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cf9c:	e00c      	b.n	800cfb8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800cf9e:	4b9d      	ldr	r3, [pc, #628]	; (800d214 <UART_SetConfig+0x92c>)
 800cfa0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cfa2:	e009      	b.n	800cfb8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800cfa4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800cfa8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cfaa:	e005      	b.n	800cfb8 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800cfac:	2300      	movs	r3, #0
 800cfae:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800cfb0:	2301      	movs	r3, #1
 800cfb2:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800cfb6:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800cfb8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cfba:	2b00      	cmp	r3, #0
 800cfbc:	f000 81de 	beq.w	800d37c <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800cfc0:	697b      	ldr	r3, [r7, #20]
 800cfc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cfc4:	4a94      	ldr	r2, [pc, #592]	; (800d218 <UART_SetConfig+0x930>)
 800cfc6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800cfca:	461a      	mov	r2, r3
 800cfcc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cfce:	fbb3 f3f2 	udiv	r3, r3, r2
 800cfd2:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800cfd4:	697b      	ldr	r3, [r7, #20]
 800cfd6:	685a      	ldr	r2, [r3, #4]
 800cfd8:	4613      	mov	r3, r2
 800cfda:	005b      	lsls	r3, r3, #1
 800cfdc:	4413      	add	r3, r2
 800cfde:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cfe0:	429a      	cmp	r2, r3
 800cfe2:	d305      	bcc.n	800cff0 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800cfe4:	697b      	ldr	r3, [r7, #20]
 800cfe6:	685b      	ldr	r3, [r3, #4]
 800cfe8:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800cfea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cfec:	429a      	cmp	r2, r3
 800cfee:	d903      	bls.n	800cff8 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800cff0:	2301      	movs	r3, #1
 800cff2:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800cff6:	e1c1      	b.n	800d37c <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800cff8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cffa:	2200      	movs	r2, #0
 800cffc:	60bb      	str	r3, [r7, #8]
 800cffe:	60fa      	str	r2, [r7, #12]
 800d000:	697b      	ldr	r3, [r7, #20]
 800d002:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d004:	4a84      	ldr	r2, [pc, #528]	; (800d218 <UART_SetConfig+0x930>)
 800d006:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d00a:	b29b      	uxth	r3, r3
 800d00c:	2200      	movs	r2, #0
 800d00e:	603b      	str	r3, [r7, #0]
 800d010:	607a      	str	r2, [r7, #4]
 800d012:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d016:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800d01a:	f7f3 fb75 	bl	8000708 <__aeabi_uldivmod>
 800d01e:	4602      	mov	r2, r0
 800d020:	460b      	mov	r3, r1
 800d022:	4610      	mov	r0, r2
 800d024:	4619      	mov	r1, r3
 800d026:	f04f 0200 	mov.w	r2, #0
 800d02a:	f04f 0300 	mov.w	r3, #0
 800d02e:	020b      	lsls	r3, r1, #8
 800d030:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800d034:	0202      	lsls	r2, r0, #8
 800d036:	6979      	ldr	r1, [r7, #20]
 800d038:	6849      	ldr	r1, [r1, #4]
 800d03a:	0849      	lsrs	r1, r1, #1
 800d03c:	2000      	movs	r0, #0
 800d03e:	460c      	mov	r4, r1
 800d040:	4605      	mov	r5, r0
 800d042:	eb12 0804 	adds.w	r8, r2, r4
 800d046:	eb43 0905 	adc.w	r9, r3, r5
 800d04a:	697b      	ldr	r3, [r7, #20]
 800d04c:	685b      	ldr	r3, [r3, #4]
 800d04e:	2200      	movs	r2, #0
 800d050:	469a      	mov	sl, r3
 800d052:	4693      	mov	fp, r2
 800d054:	4652      	mov	r2, sl
 800d056:	465b      	mov	r3, fp
 800d058:	4640      	mov	r0, r8
 800d05a:	4649      	mov	r1, r9
 800d05c:	f7f3 fb54 	bl	8000708 <__aeabi_uldivmod>
 800d060:	4602      	mov	r2, r0
 800d062:	460b      	mov	r3, r1
 800d064:	4613      	mov	r3, r2
 800d066:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800d068:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d06a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800d06e:	d308      	bcc.n	800d082 <UART_SetConfig+0x79a>
 800d070:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d072:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d076:	d204      	bcs.n	800d082 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800d078:	697b      	ldr	r3, [r7, #20]
 800d07a:	681b      	ldr	r3, [r3, #0]
 800d07c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d07e:	60da      	str	r2, [r3, #12]
 800d080:	e17c      	b.n	800d37c <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800d082:	2301      	movs	r3, #1
 800d084:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800d088:	e178      	b.n	800d37c <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800d08a:	697b      	ldr	r3, [r7, #20]
 800d08c:	69db      	ldr	r3, [r3, #28]
 800d08e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d092:	f040 80c5 	bne.w	800d220 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800d096:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800d09a:	2b20      	cmp	r3, #32
 800d09c:	dc48      	bgt.n	800d130 <UART_SetConfig+0x848>
 800d09e:	2b00      	cmp	r3, #0
 800d0a0:	db7b      	blt.n	800d19a <UART_SetConfig+0x8b2>
 800d0a2:	2b20      	cmp	r3, #32
 800d0a4:	d879      	bhi.n	800d19a <UART_SetConfig+0x8b2>
 800d0a6:	a201      	add	r2, pc, #4	; (adr r2, 800d0ac <UART_SetConfig+0x7c4>)
 800d0a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d0ac:	0800d137 	.word	0x0800d137
 800d0b0:	0800d13f 	.word	0x0800d13f
 800d0b4:	0800d19b 	.word	0x0800d19b
 800d0b8:	0800d19b 	.word	0x0800d19b
 800d0bc:	0800d147 	.word	0x0800d147
 800d0c0:	0800d19b 	.word	0x0800d19b
 800d0c4:	0800d19b 	.word	0x0800d19b
 800d0c8:	0800d19b 	.word	0x0800d19b
 800d0cc:	0800d157 	.word	0x0800d157
 800d0d0:	0800d19b 	.word	0x0800d19b
 800d0d4:	0800d19b 	.word	0x0800d19b
 800d0d8:	0800d19b 	.word	0x0800d19b
 800d0dc:	0800d19b 	.word	0x0800d19b
 800d0e0:	0800d19b 	.word	0x0800d19b
 800d0e4:	0800d19b 	.word	0x0800d19b
 800d0e8:	0800d19b 	.word	0x0800d19b
 800d0ec:	0800d167 	.word	0x0800d167
 800d0f0:	0800d19b 	.word	0x0800d19b
 800d0f4:	0800d19b 	.word	0x0800d19b
 800d0f8:	0800d19b 	.word	0x0800d19b
 800d0fc:	0800d19b 	.word	0x0800d19b
 800d100:	0800d19b 	.word	0x0800d19b
 800d104:	0800d19b 	.word	0x0800d19b
 800d108:	0800d19b 	.word	0x0800d19b
 800d10c:	0800d19b 	.word	0x0800d19b
 800d110:	0800d19b 	.word	0x0800d19b
 800d114:	0800d19b 	.word	0x0800d19b
 800d118:	0800d19b 	.word	0x0800d19b
 800d11c:	0800d19b 	.word	0x0800d19b
 800d120:	0800d19b 	.word	0x0800d19b
 800d124:	0800d19b 	.word	0x0800d19b
 800d128:	0800d19b 	.word	0x0800d19b
 800d12c:	0800d18d 	.word	0x0800d18d
 800d130:	2b40      	cmp	r3, #64	; 0x40
 800d132:	d02e      	beq.n	800d192 <UART_SetConfig+0x8aa>
 800d134:	e031      	b.n	800d19a <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800d136:	f7fb fba5 	bl	8008884 <HAL_RCC_GetPCLK1Freq>
 800d13a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800d13c:	e033      	b.n	800d1a6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800d13e:	f7fb fbb7 	bl	80088b0 <HAL_RCC_GetPCLK2Freq>
 800d142:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800d144:	e02f      	b.n	800d1a6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d146:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800d14a:	4618      	mov	r0, r3
 800d14c:	f7fc fb22 	bl	8009794 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800d150:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d152:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d154:	e027      	b.n	800d1a6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d156:	f107 0318 	add.w	r3, r7, #24
 800d15a:	4618      	mov	r0, r3
 800d15c:	f7fc fc6e 	bl	8009a3c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800d160:	69fb      	ldr	r3, [r7, #28]
 800d162:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d164:	e01f      	b.n	800d1a6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d166:	4b2d      	ldr	r3, [pc, #180]	; (800d21c <UART_SetConfig+0x934>)
 800d168:	681b      	ldr	r3, [r3, #0]
 800d16a:	f003 0320 	and.w	r3, r3, #32
 800d16e:	2b00      	cmp	r3, #0
 800d170:	d009      	beq.n	800d186 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800d172:	4b2a      	ldr	r3, [pc, #168]	; (800d21c <UART_SetConfig+0x934>)
 800d174:	681b      	ldr	r3, [r3, #0]
 800d176:	08db      	lsrs	r3, r3, #3
 800d178:	f003 0303 	and.w	r3, r3, #3
 800d17c:	4a24      	ldr	r2, [pc, #144]	; (800d210 <UART_SetConfig+0x928>)
 800d17e:	fa22 f303 	lsr.w	r3, r2, r3
 800d182:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800d184:	e00f      	b.n	800d1a6 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800d186:	4b22      	ldr	r3, [pc, #136]	; (800d210 <UART_SetConfig+0x928>)
 800d188:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d18a:	e00c      	b.n	800d1a6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800d18c:	4b21      	ldr	r3, [pc, #132]	; (800d214 <UART_SetConfig+0x92c>)
 800d18e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d190:	e009      	b.n	800d1a6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d192:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800d196:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d198:	e005      	b.n	800d1a6 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800d19a:	2300      	movs	r3, #0
 800d19c:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800d19e:	2301      	movs	r3, #1
 800d1a0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800d1a4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800d1a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d1a8:	2b00      	cmp	r3, #0
 800d1aa:	f000 80e7 	beq.w	800d37c <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d1ae:	697b      	ldr	r3, [r7, #20]
 800d1b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d1b2:	4a19      	ldr	r2, [pc, #100]	; (800d218 <UART_SetConfig+0x930>)
 800d1b4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d1b8:	461a      	mov	r2, r3
 800d1ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d1bc:	fbb3 f3f2 	udiv	r3, r3, r2
 800d1c0:	005a      	lsls	r2, r3, #1
 800d1c2:	697b      	ldr	r3, [r7, #20]
 800d1c4:	685b      	ldr	r3, [r3, #4]
 800d1c6:	085b      	lsrs	r3, r3, #1
 800d1c8:	441a      	add	r2, r3
 800d1ca:	697b      	ldr	r3, [r7, #20]
 800d1cc:	685b      	ldr	r3, [r3, #4]
 800d1ce:	fbb2 f3f3 	udiv	r3, r2, r3
 800d1d2:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800d1d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d1d6:	2b0f      	cmp	r3, #15
 800d1d8:	d916      	bls.n	800d208 <UART_SetConfig+0x920>
 800d1da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d1dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d1e0:	d212      	bcs.n	800d208 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800d1e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d1e4:	b29b      	uxth	r3, r3
 800d1e6:	f023 030f 	bic.w	r3, r3, #15
 800d1ea:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800d1ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d1ee:	085b      	lsrs	r3, r3, #1
 800d1f0:	b29b      	uxth	r3, r3
 800d1f2:	f003 0307 	and.w	r3, r3, #7
 800d1f6:	b29a      	uxth	r2, r3
 800d1f8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800d1fa:	4313      	orrs	r3, r2
 800d1fc:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800d1fe:	697b      	ldr	r3, [r7, #20]
 800d200:	681b      	ldr	r3, [r3, #0]
 800d202:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800d204:	60da      	str	r2, [r3, #12]
 800d206:	e0b9      	b.n	800d37c <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800d208:	2301      	movs	r3, #1
 800d20a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800d20e:	e0b5      	b.n	800d37c <UART_SetConfig+0xa94>
 800d210:	03d09000 	.word	0x03d09000
 800d214:	003d0900 	.word	0x003d0900
 800d218:	0801229c 	.word	0x0801229c
 800d21c:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800d220:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800d224:	2b20      	cmp	r3, #32
 800d226:	dc49      	bgt.n	800d2bc <UART_SetConfig+0x9d4>
 800d228:	2b00      	cmp	r3, #0
 800d22a:	db7c      	blt.n	800d326 <UART_SetConfig+0xa3e>
 800d22c:	2b20      	cmp	r3, #32
 800d22e:	d87a      	bhi.n	800d326 <UART_SetConfig+0xa3e>
 800d230:	a201      	add	r2, pc, #4	; (adr r2, 800d238 <UART_SetConfig+0x950>)
 800d232:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d236:	bf00      	nop
 800d238:	0800d2c3 	.word	0x0800d2c3
 800d23c:	0800d2cb 	.word	0x0800d2cb
 800d240:	0800d327 	.word	0x0800d327
 800d244:	0800d327 	.word	0x0800d327
 800d248:	0800d2d3 	.word	0x0800d2d3
 800d24c:	0800d327 	.word	0x0800d327
 800d250:	0800d327 	.word	0x0800d327
 800d254:	0800d327 	.word	0x0800d327
 800d258:	0800d2e3 	.word	0x0800d2e3
 800d25c:	0800d327 	.word	0x0800d327
 800d260:	0800d327 	.word	0x0800d327
 800d264:	0800d327 	.word	0x0800d327
 800d268:	0800d327 	.word	0x0800d327
 800d26c:	0800d327 	.word	0x0800d327
 800d270:	0800d327 	.word	0x0800d327
 800d274:	0800d327 	.word	0x0800d327
 800d278:	0800d2f3 	.word	0x0800d2f3
 800d27c:	0800d327 	.word	0x0800d327
 800d280:	0800d327 	.word	0x0800d327
 800d284:	0800d327 	.word	0x0800d327
 800d288:	0800d327 	.word	0x0800d327
 800d28c:	0800d327 	.word	0x0800d327
 800d290:	0800d327 	.word	0x0800d327
 800d294:	0800d327 	.word	0x0800d327
 800d298:	0800d327 	.word	0x0800d327
 800d29c:	0800d327 	.word	0x0800d327
 800d2a0:	0800d327 	.word	0x0800d327
 800d2a4:	0800d327 	.word	0x0800d327
 800d2a8:	0800d327 	.word	0x0800d327
 800d2ac:	0800d327 	.word	0x0800d327
 800d2b0:	0800d327 	.word	0x0800d327
 800d2b4:	0800d327 	.word	0x0800d327
 800d2b8:	0800d319 	.word	0x0800d319
 800d2bc:	2b40      	cmp	r3, #64	; 0x40
 800d2be:	d02e      	beq.n	800d31e <UART_SetConfig+0xa36>
 800d2c0:	e031      	b.n	800d326 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800d2c2:	f7fb fadf 	bl	8008884 <HAL_RCC_GetPCLK1Freq>
 800d2c6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800d2c8:	e033      	b.n	800d332 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800d2ca:	f7fb faf1 	bl	80088b0 <HAL_RCC_GetPCLK2Freq>
 800d2ce:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800d2d0:	e02f      	b.n	800d332 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d2d2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800d2d6:	4618      	mov	r0, r3
 800d2d8:	f7fc fa5c 	bl	8009794 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800d2dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d2de:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d2e0:	e027      	b.n	800d332 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d2e2:	f107 0318 	add.w	r3, r7, #24
 800d2e6:	4618      	mov	r0, r3
 800d2e8:	f7fc fba8 	bl	8009a3c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800d2ec:	69fb      	ldr	r3, [r7, #28]
 800d2ee:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d2f0:	e01f      	b.n	800d332 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d2f2:	4b2d      	ldr	r3, [pc, #180]	; (800d3a8 <UART_SetConfig+0xac0>)
 800d2f4:	681b      	ldr	r3, [r3, #0]
 800d2f6:	f003 0320 	and.w	r3, r3, #32
 800d2fa:	2b00      	cmp	r3, #0
 800d2fc:	d009      	beq.n	800d312 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800d2fe:	4b2a      	ldr	r3, [pc, #168]	; (800d3a8 <UART_SetConfig+0xac0>)
 800d300:	681b      	ldr	r3, [r3, #0]
 800d302:	08db      	lsrs	r3, r3, #3
 800d304:	f003 0303 	and.w	r3, r3, #3
 800d308:	4a28      	ldr	r2, [pc, #160]	; (800d3ac <UART_SetConfig+0xac4>)
 800d30a:	fa22 f303 	lsr.w	r3, r2, r3
 800d30e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800d310:	e00f      	b.n	800d332 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800d312:	4b26      	ldr	r3, [pc, #152]	; (800d3ac <UART_SetConfig+0xac4>)
 800d314:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d316:	e00c      	b.n	800d332 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800d318:	4b25      	ldr	r3, [pc, #148]	; (800d3b0 <UART_SetConfig+0xac8>)
 800d31a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d31c:	e009      	b.n	800d332 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d31e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800d322:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d324:	e005      	b.n	800d332 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800d326:	2300      	movs	r3, #0
 800d328:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800d32a:	2301      	movs	r3, #1
 800d32c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800d330:	bf00      	nop
    }

    if (pclk != 0U)
 800d332:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d334:	2b00      	cmp	r3, #0
 800d336:	d021      	beq.n	800d37c <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d338:	697b      	ldr	r3, [r7, #20]
 800d33a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d33c:	4a1d      	ldr	r2, [pc, #116]	; (800d3b4 <UART_SetConfig+0xacc>)
 800d33e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d342:	461a      	mov	r2, r3
 800d344:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d346:	fbb3 f2f2 	udiv	r2, r3, r2
 800d34a:	697b      	ldr	r3, [r7, #20]
 800d34c:	685b      	ldr	r3, [r3, #4]
 800d34e:	085b      	lsrs	r3, r3, #1
 800d350:	441a      	add	r2, r3
 800d352:	697b      	ldr	r3, [r7, #20]
 800d354:	685b      	ldr	r3, [r3, #4]
 800d356:	fbb2 f3f3 	udiv	r3, r2, r3
 800d35a:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800d35c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d35e:	2b0f      	cmp	r3, #15
 800d360:	d909      	bls.n	800d376 <UART_SetConfig+0xa8e>
 800d362:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d364:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d368:	d205      	bcs.n	800d376 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800d36a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d36c:	b29a      	uxth	r2, r3
 800d36e:	697b      	ldr	r3, [r7, #20]
 800d370:	681b      	ldr	r3, [r3, #0]
 800d372:	60da      	str	r2, [r3, #12]
 800d374:	e002      	b.n	800d37c <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800d376:	2301      	movs	r3, #1
 800d378:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800d37c:	697b      	ldr	r3, [r7, #20]
 800d37e:	2201      	movs	r2, #1
 800d380:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800d384:	697b      	ldr	r3, [r7, #20]
 800d386:	2201      	movs	r2, #1
 800d388:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800d38c:	697b      	ldr	r3, [r7, #20]
 800d38e:	2200      	movs	r2, #0
 800d390:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800d392:	697b      	ldr	r3, [r7, #20]
 800d394:	2200      	movs	r2, #0
 800d396:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800d398:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800d39c:	4618      	mov	r0, r3
 800d39e:	3748      	adds	r7, #72	; 0x48
 800d3a0:	46bd      	mov	sp, r7
 800d3a2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800d3a6:	bf00      	nop
 800d3a8:	58024400 	.word	0x58024400
 800d3ac:	03d09000 	.word	0x03d09000
 800d3b0:	003d0900 	.word	0x003d0900
 800d3b4:	0801229c 	.word	0x0801229c

0800d3b8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800d3b8:	b480      	push	{r7}
 800d3ba:	b083      	sub	sp, #12
 800d3bc:	af00      	add	r7, sp, #0
 800d3be:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800d3c0:	687b      	ldr	r3, [r7, #4]
 800d3c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d3c4:	f003 0301 	and.w	r3, r3, #1
 800d3c8:	2b00      	cmp	r3, #0
 800d3ca:	d00a      	beq.n	800d3e2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800d3cc:	687b      	ldr	r3, [r7, #4]
 800d3ce:	681b      	ldr	r3, [r3, #0]
 800d3d0:	685b      	ldr	r3, [r3, #4]
 800d3d2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800d3d6:	687b      	ldr	r3, [r7, #4]
 800d3d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d3da:	687b      	ldr	r3, [r7, #4]
 800d3dc:	681b      	ldr	r3, [r3, #0]
 800d3de:	430a      	orrs	r2, r1
 800d3e0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800d3e2:	687b      	ldr	r3, [r7, #4]
 800d3e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d3e6:	f003 0302 	and.w	r3, r3, #2
 800d3ea:	2b00      	cmp	r3, #0
 800d3ec:	d00a      	beq.n	800d404 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800d3ee:	687b      	ldr	r3, [r7, #4]
 800d3f0:	681b      	ldr	r3, [r3, #0]
 800d3f2:	685b      	ldr	r3, [r3, #4]
 800d3f4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800d3f8:	687b      	ldr	r3, [r7, #4]
 800d3fa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d3fc:	687b      	ldr	r3, [r7, #4]
 800d3fe:	681b      	ldr	r3, [r3, #0]
 800d400:	430a      	orrs	r2, r1
 800d402:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800d404:	687b      	ldr	r3, [r7, #4]
 800d406:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d408:	f003 0304 	and.w	r3, r3, #4
 800d40c:	2b00      	cmp	r3, #0
 800d40e:	d00a      	beq.n	800d426 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800d410:	687b      	ldr	r3, [r7, #4]
 800d412:	681b      	ldr	r3, [r3, #0]
 800d414:	685b      	ldr	r3, [r3, #4]
 800d416:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800d41a:	687b      	ldr	r3, [r7, #4]
 800d41c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d41e:	687b      	ldr	r3, [r7, #4]
 800d420:	681b      	ldr	r3, [r3, #0]
 800d422:	430a      	orrs	r2, r1
 800d424:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800d426:	687b      	ldr	r3, [r7, #4]
 800d428:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d42a:	f003 0308 	and.w	r3, r3, #8
 800d42e:	2b00      	cmp	r3, #0
 800d430:	d00a      	beq.n	800d448 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800d432:	687b      	ldr	r3, [r7, #4]
 800d434:	681b      	ldr	r3, [r3, #0]
 800d436:	685b      	ldr	r3, [r3, #4]
 800d438:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800d43c:	687b      	ldr	r3, [r7, #4]
 800d43e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d440:	687b      	ldr	r3, [r7, #4]
 800d442:	681b      	ldr	r3, [r3, #0]
 800d444:	430a      	orrs	r2, r1
 800d446:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800d448:	687b      	ldr	r3, [r7, #4]
 800d44a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d44c:	f003 0310 	and.w	r3, r3, #16
 800d450:	2b00      	cmp	r3, #0
 800d452:	d00a      	beq.n	800d46a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800d454:	687b      	ldr	r3, [r7, #4]
 800d456:	681b      	ldr	r3, [r3, #0]
 800d458:	689b      	ldr	r3, [r3, #8]
 800d45a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800d45e:	687b      	ldr	r3, [r7, #4]
 800d460:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d462:	687b      	ldr	r3, [r7, #4]
 800d464:	681b      	ldr	r3, [r3, #0]
 800d466:	430a      	orrs	r2, r1
 800d468:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800d46a:	687b      	ldr	r3, [r7, #4]
 800d46c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d46e:	f003 0320 	and.w	r3, r3, #32
 800d472:	2b00      	cmp	r3, #0
 800d474:	d00a      	beq.n	800d48c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800d476:	687b      	ldr	r3, [r7, #4]
 800d478:	681b      	ldr	r3, [r3, #0]
 800d47a:	689b      	ldr	r3, [r3, #8]
 800d47c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800d480:	687b      	ldr	r3, [r7, #4]
 800d482:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800d484:	687b      	ldr	r3, [r7, #4]
 800d486:	681b      	ldr	r3, [r3, #0]
 800d488:	430a      	orrs	r2, r1
 800d48a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800d48c:	687b      	ldr	r3, [r7, #4]
 800d48e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d490:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d494:	2b00      	cmp	r3, #0
 800d496:	d01a      	beq.n	800d4ce <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800d498:	687b      	ldr	r3, [r7, #4]
 800d49a:	681b      	ldr	r3, [r3, #0]
 800d49c:	685b      	ldr	r3, [r3, #4]
 800d49e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800d4a2:	687b      	ldr	r3, [r7, #4]
 800d4a4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d4a6:	687b      	ldr	r3, [r7, #4]
 800d4a8:	681b      	ldr	r3, [r3, #0]
 800d4aa:	430a      	orrs	r2, r1
 800d4ac:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800d4ae:	687b      	ldr	r3, [r7, #4]
 800d4b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d4b2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d4b6:	d10a      	bne.n	800d4ce <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800d4b8:	687b      	ldr	r3, [r7, #4]
 800d4ba:	681b      	ldr	r3, [r3, #0]
 800d4bc:	685b      	ldr	r3, [r3, #4]
 800d4be:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800d4c2:	687b      	ldr	r3, [r7, #4]
 800d4c4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800d4c6:	687b      	ldr	r3, [r7, #4]
 800d4c8:	681b      	ldr	r3, [r3, #0]
 800d4ca:	430a      	orrs	r2, r1
 800d4cc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800d4ce:	687b      	ldr	r3, [r7, #4]
 800d4d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d4d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d4d6:	2b00      	cmp	r3, #0
 800d4d8:	d00a      	beq.n	800d4f0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800d4da:	687b      	ldr	r3, [r7, #4]
 800d4dc:	681b      	ldr	r3, [r3, #0]
 800d4de:	685b      	ldr	r3, [r3, #4]
 800d4e0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800d4e4:	687b      	ldr	r3, [r7, #4]
 800d4e6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800d4e8:	687b      	ldr	r3, [r7, #4]
 800d4ea:	681b      	ldr	r3, [r3, #0]
 800d4ec:	430a      	orrs	r2, r1
 800d4ee:	605a      	str	r2, [r3, #4]
  }
}
 800d4f0:	bf00      	nop
 800d4f2:	370c      	adds	r7, #12
 800d4f4:	46bd      	mov	sp, r7
 800d4f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4fa:	4770      	bx	lr

0800d4fc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800d4fc:	b580      	push	{r7, lr}
 800d4fe:	b086      	sub	sp, #24
 800d500:	af02      	add	r7, sp, #8
 800d502:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d504:	687b      	ldr	r3, [r7, #4]
 800d506:	2200      	movs	r2, #0
 800d508:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800d50c:	f7f9 f914 	bl	8006738 <HAL_GetTick>
 800d510:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800d512:	687b      	ldr	r3, [r7, #4]
 800d514:	681b      	ldr	r3, [r3, #0]
 800d516:	681b      	ldr	r3, [r3, #0]
 800d518:	f003 0308 	and.w	r3, r3, #8
 800d51c:	2b08      	cmp	r3, #8
 800d51e:	d10e      	bne.n	800d53e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800d520:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800d524:	9300      	str	r3, [sp, #0]
 800d526:	68fb      	ldr	r3, [r7, #12]
 800d528:	2200      	movs	r2, #0
 800d52a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800d52e:	6878      	ldr	r0, [r7, #4]
 800d530:	f000 f82f 	bl	800d592 <UART_WaitOnFlagUntilTimeout>
 800d534:	4603      	mov	r3, r0
 800d536:	2b00      	cmp	r3, #0
 800d538:	d001      	beq.n	800d53e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800d53a:	2303      	movs	r3, #3
 800d53c:	e025      	b.n	800d58a <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800d53e:	687b      	ldr	r3, [r7, #4]
 800d540:	681b      	ldr	r3, [r3, #0]
 800d542:	681b      	ldr	r3, [r3, #0]
 800d544:	f003 0304 	and.w	r3, r3, #4
 800d548:	2b04      	cmp	r3, #4
 800d54a:	d10e      	bne.n	800d56a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800d54c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800d550:	9300      	str	r3, [sp, #0]
 800d552:	68fb      	ldr	r3, [r7, #12]
 800d554:	2200      	movs	r2, #0
 800d556:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800d55a:	6878      	ldr	r0, [r7, #4]
 800d55c:	f000 f819 	bl	800d592 <UART_WaitOnFlagUntilTimeout>
 800d560:	4603      	mov	r3, r0
 800d562:	2b00      	cmp	r3, #0
 800d564:	d001      	beq.n	800d56a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800d566:	2303      	movs	r3, #3
 800d568:	e00f      	b.n	800d58a <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800d56a:	687b      	ldr	r3, [r7, #4]
 800d56c:	2220      	movs	r2, #32
 800d56e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800d572:	687b      	ldr	r3, [r7, #4]
 800d574:	2220      	movs	r2, #32
 800d576:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d57a:	687b      	ldr	r3, [r7, #4]
 800d57c:	2200      	movs	r2, #0
 800d57e:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800d580:	687b      	ldr	r3, [r7, #4]
 800d582:	2200      	movs	r2, #0
 800d584:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800d588:	2300      	movs	r3, #0
}
 800d58a:	4618      	mov	r0, r3
 800d58c:	3710      	adds	r7, #16
 800d58e:	46bd      	mov	sp, r7
 800d590:	bd80      	pop	{r7, pc}

0800d592 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800d592:	b580      	push	{r7, lr}
 800d594:	b09c      	sub	sp, #112	; 0x70
 800d596:	af00      	add	r7, sp, #0
 800d598:	60f8      	str	r0, [r7, #12]
 800d59a:	60b9      	str	r1, [r7, #8]
 800d59c:	603b      	str	r3, [r7, #0]
 800d59e:	4613      	mov	r3, r2
 800d5a0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d5a2:	e0a9      	b.n	800d6f8 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800d5a4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d5a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d5aa:	f000 80a5 	beq.w	800d6f8 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d5ae:	f7f9 f8c3 	bl	8006738 <HAL_GetTick>
 800d5b2:	4602      	mov	r2, r0
 800d5b4:	683b      	ldr	r3, [r7, #0]
 800d5b6:	1ad3      	subs	r3, r2, r3
 800d5b8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800d5ba:	429a      	cmp	r2, r3
 800d5bc:	d302      	bcc.n	800d5c4 <UART_WaitOnFlagUntilTimeout+0x32>
 800d5be:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d5c0:	2b00      	cmp	r3, #0
 800d5c2:	d140      	bne.n	800d646 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800d5c4:	68fb      	ldr	r3, [r7, #12]
 800d5c6:	681b      	ldr	r3, [r3, #0]
 800d5c8:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d5ca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d5cc:	e853 3f00 	ldrex	r3, [r3]
 800d5d0:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800d5d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d5d4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800d5d8:	667b      	str	r3, [r7, #100]	; 0x64
 800d5da:	68fb      	ldr	r3, [r7, #12]
 800d5dc:	681b      	ldr	r3, [r3, #0]
 800d5de:	461a      	mov	r2, r3
 800d5e0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d5e2:	65fb      	str	r3, [r7, #92]	; 0x5c
 800d5e4:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d5e6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800d5e8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800d5ea:	e841 2300 	strex	r3, r2, [r1]
 800d5ee:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800d5f0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d5f2:	2b00      	cmp	r3, #0
 800d5f4:	d1e6      	bne.n	800d5c4 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d5f6:	68fb      	ldr	r3, [r7, #12]
 800d5f8:	681b      	ldr	r3, [r3, #0]
 800d5fa:	3308      	adds	r3, #8
 800d5fc:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d5fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d600:	e853 3f00 	ldrex	r3, [r3]
 800d604:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800d606:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d608:	f023 0301 	bic.w	r3, r3, #1
 800d60c:	663b      	str	r3, [r7, #96]	; 0x60
 800d60e:	68fb      	ldr	r3, [r7, #12]
 800d610:	681b      	ldr	r3, [r3, #0]
 800d612:	3308      	adds	r3, #8
 800d614:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800d616:	64ba      	str	r2, [r7, #72]	; 0x48
 800d618:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d61a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800d61c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d61e:	e841 2300 	strex	r3, r2, [r1]
 800d622:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800d624:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d626:	2b00      	cmp	r3, #0
 800d628:	d1e5      	bne.n	800d5f6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800d62a:	68fb      	ldr	r3, [r7, #12]
 800d62c:	2220      	movs	r2, #32
 800d62e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800d632:	68fb      	ldr	r3, [r7, #12]
 800d634:	2220      	movs	r2, #32
 800d636:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800d63a:	68fb      	ldr	r3, [r7, #12]
 800d63c:	2200      	movs	r2, #0
 800d63e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800d642:	2303      	movs	r3, #3
 800d644:	e069      	b.n	800d71a <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800d646:	68fb      	ldr	r3, [r7, #12]
 800d648:	681b      	ldr	r3, [r3, #0]
 800d64a:	681b      	ldr	r3, [r3, #0]
 800d64c:	f003 0304 	and.w	r3, r3, #4
 800d650:	2b00      	cmp	r3, #0
 800d652:	d051      	beq.n	800d6f8 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800d654:	68fb      	ldr	r3, [r7, #12]
 800d656:	681b      	ldr	r3, [r3, #0]
 800d658:	69db      	ldr	r3, [r3, #28]
 800d65a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800d65e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800d662:	d149      	bne.n	800d6f8 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800d664:	68fb      	ldr	r3, [r7, #12]
 800d666:	681b      	ldr	r3, [r3, #0]
 800d668:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800d66c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800d66e:	68fb      	ldr	r3, [r7, #12]
 800d670:	681b      	ldr	r3, [r3, #0]
 800d672:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d674:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d676:	e853 3f00 	ldrex	r3, [r3]
 800d67a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800d67c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d67e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800d682:	66fb      	str	r3, [r7, #108]	; 0x6c
 800d684:	68fb      	ldr	r3, [r7, #12]
 800d686:	681b      	ldr	r3, [r3, #0]
 800d688:	461a      	mov	r2, r3
 800d68a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d68c:	637b      	str	r3, [r7, #52]	; 0x34
 800d68e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d690:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800d692:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d694:	e841 2300 	strex	r3, r2, [r1]
 800d698:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800d69a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d69c:	2b00      	cmp	r3, #0
 800d69e:	d1e6      	bne.n	800d66e <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d6a0:	68fb      	ldr	r3, [r7, #12]
 800d6a2:	681b      	ldr	r3, [r3, #0]
 800d6a4:	3308      	adds	r3, #8
 800d6a6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d6a8:	697b      	ldr	r3, [r7, #20]
 800d6aa:	e853 3f00 	ldrex	r3, [r3]
 800d6ae:	613b      	str	r3, [r7, #16]
   return(result);
 800d6b0:	693b      	ldr	r3, [r7, #16]
 800d6b2:	f023 0301 	bic.w	r3, r3, #1
 800d6b6:	66bb      	str	r3, [r7, #104]	; 0x68
 800d6b8:	68fb      	ldr	r3, [r7, #12]
 800d6ba:	681b      	ldr	r3, [r3, #0]
 800d6bc:	3308      	adds	r3, #8
 800d6be:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800d6c0:	623a      	str	r2, [r7, #32]
 800d6c2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d6c4:	69f9      	ldr	r1, [r7, #28]
 800d6c6:	6a3a      	ldr	r2, [r7, #32]
 800d6c8:	e841 2300 	strex	r3, r2, [r1]
 800d6cc:	61bb      	str	r3, [r7, #24]
   return(result);
 800d6ce:	69bb      	ldr	r3, [r7, #24]
 800d6d0:	2b00      	cmp	r3, #0
 800d6d2:	d1e5      	bne.n	800d6a0 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800d6d4:	68fb      	ldr	r3, [r7, #12]
 800d6d6:	2220      	movs	r2, #32
 800d6d8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800d6dc:	68fb      	ldr	r3, [r7, #12]
 800d6de:	2220      	movs	r2, #32
 800d6e0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800d6e4:	68fb      	ldr	r3, [r7, #12]
 800d6e6:	2220      	movs	r2, #32
 800d6e8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800d6ec:	68fb      	ldr	r3, [r7, #12]
 800d6ee:	2200      	movs	r2, #0
 800d6f0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800d6f4:	2303      	movs	r3, #3
 800d6f6:	e010      	b.n	800d71a <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d6f8:	68fb      	ldr	r3, [r7, #12]
 800d6fa:	681b      	ldr	r3, [r3, #0]
 800d6fc:	69da      	ldr	r2, [r3, #28]
 800d6fe:	68bb      	ldr	r3, [r7, #8]
 800d700:	4013      	ands	r3, r2
 800d702:	68ba      	ldr	r2, [r7, #8]
 800d704:	429a      	cmp	r2, r3
 800d706:	bf0c      	ite	eq
 800d708:	2301      	moveq	r3, #1
 800d70a:	2300      	movne	r3, #0
 800d70c:	b2db      	uxtb	r3, r3
 800d70e:	461a      	mov	r2, r3
 800d710:	79fb      	ldrb	r3, [r7, #7]
 800d712:	429a      	cmp	r2, r3
 800d714:	f43f af46 	beq.w	800d5a4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800d718:	2300      	movs	r3, #0
}
 800d71a:	4618      	mov	r0, r3
 800d71c:	3770      	adds	r7, #112	; 0x70
 800d71e:	46bd      	mov	sp, r7
 800d720:	bd80      	pop	{r7, pc}
	...

0800d724 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800d724:	b480      	push	{r7}
 800d726:	b0a3      	sub	sp, #140	; 0x8c
 800d728:	af00      	add	r7, sp, #0
 800d72a:	60f8      	str	r0, [r7, #12]
 800d72c:	60b9      	str	r1, [r7, #8]
 800d72e:	4613      	mov	r3, r2
 800d730:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800d732:	68fb      	ldr	r3, [r7, #12]
 800d734:	68ba      	ldr	r2, [r7, #8]
 800d736:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 800d738:	68fb      	ldr	r3, [r7, #12]
 800d73a:	88fa      	ldrh	r2, [r7, #6]
 800d73c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 800d740:	68fb      	ldr	r3, [r7, #12]
 800d742:	88fa      	ldrh	r2, [r7, #6]
 800d744:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 800d748:	68fb      	ldr	r3, [r7, #12]
 800d74a:	2200      	movs	r2, #0
 800d74c:	671a      	str	r2, [r3, #112]	; 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800d74e:	68fb      	ldr	r3, [r7, #12]
 800d750:	689b      	ldr	r3, [r3, #8]
 800d752:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d756:	d10e      	bne.n	800d776 <UART_Start_Receive_IT+0x52>
 800d758:	68fb      	ldr	r3, [r7, #12]
 800d75a:	691b      	ldr	r3, [r3, #16]
 800d75c:	2b00      	cmp	r3, #0
 800d75e:	d105      	bne.n	800d76c <UART_Start_Receive_IT+0x48>
 800d760:	68fb      	ldr	r3, [r7, #12]
 800d762:	f240 12ff 	movw	r2, #511	; 0x1ff
 800d766:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800d76a:	e02d      	b.n	800d7c8 <UART_Start_Receive_IT+0xa4>
 800d76c:	68fb      	ldr	r3, [r7, #12]
 800d76e:	22ff      	movs	r2, #255	; 0xff
 800d770:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800d774:	e028      	b.n	800d7c8 <UART_Start_Receive_IT+0xa4>
 800d776:	68fb      	ldr	r3, [r7, #12]
 800d778:	689b      	ldr	r3, [r3, #8]
 800d77a:	2b00      	cmp	r3, #0
 800d77c:	d10d      	bne.n	800d79a <UART_Start_Receive_IT+0x76>
 800d77e:	68fb      	ldr	r3, [r7, #12]
 800d780:	691b      	ldr	r3, [r3, #16]
 800d782:	2b00      	cmp	r3, #0
 800d784:	d104      	bne.n	800d790 <UART_Start_Receive_IT+0x6c>
 800d786:	68fb      	ldr	r3, [r7, #12]
 800d788:	22ff      	movs	r2, #255	; 0xff
 800d78a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800d78e:	e01b      	b.n	800d7c8 <UART_Start_Receive_IT+0xa4>
 800d790:	68fb      	ldr	r3, [r7, #12]
 800d792:	227f      	movs	r2, #127	; 0x7f
 800d794:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800d798:	e016      	b.n	800d7c8 <UART_Start_Receive_IT+0xa4>
 800d79a:	68fb      	ldr	r3, [r7, #12]
 800d79c:	689b      	ldr	r3, [r3, #8]
 800d79e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800d7a2:	d10d      	bne.n	800d7c0 <UART_Start_Receive_IT+0x9c>
 800d7a4:	68fb      	ldr	r3, [r7, #12]
 800d7a6:	691b      	ldr	r3, [r3, #16]
 800d7a8:	2b00      	cmp	r3, #0
 800d7aa:	d104      	bne.n	800d7b6 <UART_Start_Receive_IT+0x92>
 800d7ac:	68fb      	ldr	r3, [r7, #12]
 800d7ae:	227f      	movs	r2, #127	; 0x7f
 800d7b0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800d7b4:	e008      	b.n	800d7c8 <UART_Start_Receive_IT+0xa4>
 800d7b6:	68fb      	ldr	r3, [r7, #12]
 800d7b8:	223f      	movs	r2, #63	; 0x3f
 800d7ba:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800d7be:	e003      	b.n	800d7c8 <UART_Start_Receive_IT+0xa4>
 800d7c0:	68fb      	ldr	r3, [r7, #12]
 800d7c2:	2200      	movs	r2, #0
 800d7c4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d7c8:	68fb      	ldr	r3, [r7, #12]
 800d7ca:	2200      	movs	r2, #0
 800d7cc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800d7d0:	68fb      	ldr	r3, [r7, #12]
 800d7d2:	2222      	movs	r2, #34	; 0x22
 800d7d4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d7d8:	68fb      	ldr	r3, [r7, #12]
 800d7da:	681b      	ldr	r3, [r3, #0]
 800d7dc:	3308      	adds	r3, #8
 800d7de:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d7e0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d7e2:	e853 3f00 	ldrex	r3, [r3]
 800d7e6:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 800d7e8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d7ea:	f043 0301 	orr.w	r3, r3, #1
 800d7ee:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800d7f2:	68fb      	ldr	r3, [r7, #12]
 800d7f4:	681b      	ldr	r3, [r3, #0]
 800d7f6:	3308      	adds	r3, #8
 800d7f8:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800d7fc:	673a      	str	r2, [r7, #112]	; 0x70
 800d7fe:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d800:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800d802:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800d804:	e841 2300 	strex	r3, r2, [r1]
 800d808:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 800d80a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800d80c:	2b00      	cmp	r3, #0
 800d80e:	d1e3      	bne.n	800d7d8 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800d810:	68fb      	ldr	r3, [r7, #12]
 800d812:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d814:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800d818:	d153      	bne.n	800d8c2 <UART_Start_Receive_IT+0x19e>
 800d81a:	68fb      	ldr	r3, [r7, #12]
 800d81c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800d820:	88fa      	ldrh	r2, [r7, #6]
 800d822:	429a      	cmp	r2, r3
 800d824:	d34d      	bcc.n	800d8c2 <UART_Start_Receive_IT+0x19e>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800d826:	68fb      	ldr	r3, [r7, #12]
 800d828:	689b      	ldr	r3, [r3, #8]
 800d82a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d82e:	d107      	bne.n	800d840 <UART_Start_Receive_IT+0x11c>
 800d830:	68fb      	ldr	r3, [r7, #12]
 800d832:	691b      	ldr	r3, [r3, #16]
 800d834:	2b00      	cmp	r3, #0
 800d836:	d103      	bne.n	800d840 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800d838:	68fb      	ldr	r3, [r7, #12]
 800d83a:	4a4b      	ldr	r2, [pc, #300]	; (800d968 <UART_Start_Receive_IT+0x244>)
 800d83c:	671a      	str	r2, [r3, #112]	; 0x70
 800d83e:	e002      	b.n	800d846 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800d840:	68fb      	ldr	r3, [r7, #12]
 800d842:	4a4a      	ldr	r2, [pc, #296]	; (800d96c <UART_Start_Receive_IT+0x248>)
 800d844:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 800d846:	68fb      	ldr	r3, [r7, #12]
 800d848:	2200      	movs	r2, #0
 800d84a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800d84e:	68fb      	ldr	r3, [r7, #12]
 800d850:	691b      	ldr	r3, [r3, #16]
 800d852:	2b00      	cmp	r3, #0
 800d854:	d01a      	beq.n	800d88c <UART_Start_Receive_IT+0x168>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800d856:	68fb      	ldr	r3, [r7, #12]
 800d858:	681b      	ldr	r3, [r3, #0]
 800d85a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d85c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d85e:	e853 3f00 	ldrex	r3, [r3]
 800d862:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800d864:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d866:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d86a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800d86e:	68fb      	ldr	r3, [r7, #12]
 800d870:	681b      	ldr	r3, [r3, #0]
 800d872:	461a      	mov	r2, r3
 800d874:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800d878:	65fb      	str	r3, [r7, #92]	; 0x5c
 800d87a:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d87c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800d87e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800d880:	e841 2300 	strex	r3, r2, [r1]
 800d884:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800d886:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d888:	2b00      	cmp	r3, #0
 800d88a:	d1e4      	bne.n	800d856 <UART_Start_Receive_IT+0x132>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800d88c:	68fb      	ldr	r3, [r7, #12]
 800d88e:	681b      	ldr	r3, [r3, #0]
 800d890:	3308      	adds	r3, #8
 800d892:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d894:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d896:	e853 3f00 	ldrex	r3, [r3]
 800d89a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800d89c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d89e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d8a2:	67fb      	str	r3, [r7, #124]	; 0x7c
 800d8a4:	68fb      	ldr	r3, [r7, #12]
 800d8a6:	681b      	ldr	r3, [r3, #0]
 800d8a8:	3308      	adds	r3, #8
 800d8aa:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800d8ac:	64ba      	str	r2, [r7, #72]	; 0x48
 800d8ae:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d8b0:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800d8b2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d8b4:	e841 2300 	strex	r3, r2, [r1]
 800d8b8:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800d8ba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d8bc:	2b00      	cmp	r3, #0
 800d8be:	d1e5      	bne.n	800d88c <UART_Start_Receive_IT+0x168>
 800d8c0:	e04a      	b.n	800d958 <UART_Start_Receive_IT+0x234>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800d8c2:	68fb      	ldr	r3, [r7, #12]
 800d8c4:	689b      	ldr	r3, [r3, #8]
 800d8c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d8ca:	d107      	bne.n	800d8dc <UART_Start_Receive_IT+0x1b8>
 800d8cc:	68fb      	ldr	r3, [r7, #12]
 800d8ce:	691b      	ldr	r3, [r3, #16]
 800d8d0:	2b00      	cmp	r3, #0
 800d8d2:	d103      	bne.n	800d8dc <UART_Start_Receive_IT+0x1b8>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800d8d4:	68fb      	ldr	r3, [r7, #12]
 800d8d6:	4a26      	ldr	r2, [pc, #152]	; (800d970 <UART_Start_Receive_IT+0x24c>)
 800d8d8:	671a      	str	r2, [r3, #112]	; 0x70
 800d8da:	e002      	b.n	800d8e2 <UART_Start_Receive_IT+0x1be>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800d8dc:	68fb      	ldr	r3, [r7, #12]
 800d8de:	4a25      	ldr	r2, [pc, #148]	; (800d974 <UART_Start_Receive_IT+0x250>)
 800d8e0:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 800d8e2:	68fb      	ldr	r3, [r7, #12]
 800d8e4:	2200      	movs	r2, #0
 800d8e6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800d8ea:	68fb      	ldr	r3, [r7, #12]
 800d8ec:	691b      	ldr	r3, [r3, #16]
 800d8ee:	2b00      	cmp	r3, #0
 800d8f0:	d019      	beq.n	800d926 <UART_Start_Receive_IT+0x202>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800d8f2:	68fb      	ldr	r3, [r7, #12]
 800d8f4:	681b      	ldr	r3, [r3, #0]
 800d8f6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d8f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d8fa:	e853 3f00 	ldrex	r3, [r3]
 800d8fe:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800d900:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d902:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800d906:	677b      	str	r3, [r7, #116]	; 0x74
 800d908:	68fb      	ldr	r3, [r7, #12]
 800d90a:	681b      	ldr	r3, [r3, #0]
 800d90c:	461a      	mov	r2, r3
 800d90e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d910:	637b      	str	r3, [r7, #52]	; 0x34
 800d912:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d914:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800d916:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d918:	e841 2300 	strex	r3, r2, [r1]
 800d91c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800d91e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d920:	2b00      	cmp	r3, #0
 800d922:	d1e6      	bne.n	800d8f2 <UART_Start_Receive_IT+0x1ce>
 800d924:	e018      	b.n	800d958 <UART_Start_Receive_IT+0x234>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800d926:	68fb      	ldr	r3, [r7, #12]
 800d928:	681b      	ldr	r3, [r3, #0]
 800d92a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d92c:	697b      	ldr	r3, [r7, #20]
 800d92e:	e853 3f00 	ldrex	r3, [r3]
 800d932:	613b      	str	r3, [r7, #16]
   return(result);
 800d934:	693b      	ldr	r3, [r7, #16]
 800d936:	f043 0320 	orr.w	r3, r3, #32
 800d93a:	67bb      	str	r3, [r7, #120]	; 0x78
 800d93c:	68fb      	ldr	r3, [r7, #12]
 800d93e:	681b      	ldr	r3, [r3, #0]
 800d940:	461a      	mov	r2, r3
 800d942:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d944:	623b      	str	r3, [r7, #32]
 800d946:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d948:	69f9      	ldr	r1, [r7, #28]
 800d94a:	6a3a      	ldr	r2, [r7, #32]
 800d94c:	e841 2300 	strex	r3, r2, [r1]
 800d950:	61bb      	str	r3, [r7, #24]
   return(result);
 800d952:	69bb      	ldr	r3, [r7, #24]
 800d954:	2b00      	cmp	r3, #0
 800d956:	d1e6      	bne.n	800d926 <UART_Start_Receive_IT+0x202>
    }
  }
  return HAL_OK;
 800d958:	2300      	movs	r3, #0
}
 800d95a:	4618      	mov	r0, r3
 800d95c:	378c      	adds	r7, #140	; 0x8c
 800d95e:	46bd      	mov	sp, r7
 800d960:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d964:	4770      	bx	lr
 800d966:	bf00      	nop
 800d968:	0800e081 	.word	0x0800e081
 800d96c:	0800dd89 	.word	0x0800dd89
 800d970:	0800dc27 	.word	0x0800dc27
 800d974:	0800dac7 	.word	0x0800dac7

0800d978 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800d978:	b480      	push	{r7}
 800d97a:	b095      	sub	sp, #84	; 0x54
 800d97c:	af00      	add	r7, sp, #0
 800d97e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800d980:	687b      	ldr	r3, [r7, #4]
 800d982:	681b      	ldr	r3, [r3, #0]
 800d984:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d986:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d988:	e853 3f00 	ldrex	r3, [r3]
 800d98c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800d98e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d990:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800d994:	64fb      	str	r3, [r7, #76]	; 0x4c
 800d996:	687b      	ldr	r3, [r7, #4]
 800d998:	681b      	ldr	r3, [r3, #0]
 800d99a:	461a      	mov	r2, r3
 800d99c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d99e:	643b      	str	r3, [r7, #64]	; 0x40
 800d9a0:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d9a2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800d9a4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800d9a6:	e841 2300 	strex	r3, r2, [r1]
 800d9aa:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800d9ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d9ae:	2b00      	cmp	r3, #0
 800d9b0:	d1e6      	bne.n	800d980 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800d9b2:	687b      	ldr	r3, [r7, #4]
 800d9b4:	681b      	ldr	r3, [r3, #0]
 800d9b6:	3308      	adds	r3, #8
 800d9b8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d9ba:	6a3b      	ldr	r3, [r7, #32]
 800d9bc:	e853 3f00 	ldrex	r3, [r3]
 800d9c0:	61fb      	str	r3, [r7, #28]
   return(result);
 800d9c2:	69fa      	ldr	r2, [r7, #28]
 800d9c4:	4b1e      	ldr	r3, [pc, #120]	; (800da40 <UART_EndRxTransfer+0xc8>)
 800d9c6:	4013      	ands	r3, r2
 800d9c8:	64bb      	str	r3, [r7, #72]	; 0x48
 800d9ca:	687b      	ldr	r3, [r7, #4]
 800d9cc:	681b      	ldr	r3, [r3, #0]
 800d9ce:	3308      	adds	r3, #8
 800d9d0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d9d2:	62fa      	str	r2, [r7, #44]	; 0x2c
 800d9d4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d9d6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d9d8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d9da:	e841 2300 	strex	r3, r2, [r1]
 800d9de:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800d9e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d9e2:	2b00      	cmp	r3, #0
 800d9e4:	d1e5      	bne.n	800d9b2 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d9e6:	687b      	ldr	r3, [r7, #4]
 800d9e8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d9ea:	2b01      	cmp	r3, #1
 800d9ec:	d118      	bne.n	800da20 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d9ee:	687b      	ldr	r3, [r7, #4]
 800d9f0:	681b      	ldr	r3, [r3, #0]
 800d9f2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d9f4:	68fb      	ldr	r3, [r7, #12]
 800d9f6:	e853 3f00 	ldrex	r3, [r3]
 800d9fa:	60bb      	str	r3, [r7, #8]
   return(result);
 800d9fc:	68bb      	ldr	r3, [r7, #8]
 800d9fe:	f023 0310 	bic.w	r3, r3, #16
 800da02:	647b      	str	r3, [r7, #68]	; 0x44
 800da04:	687b      	ldr	r3, [r7, #4]
 800da06:	681b      	ldr	r3, [r3, #0]
 800da08:	461a      	mov	r2, r3
 800da0a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800da0c:	61bb      	str	r3, [r7, #24]
 800da0e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800da10:	6979      	ldr	r1, [r7, #20]
 800da12:	69ba      	ldr	r2, [r7, #24]
 800da14:	e841 2300 	strex	r3, r2, [r1]
 800da18:	613b      	str	r3, [r7, #16]
   return(result);
 800da1a:	693b      	ldr	r3, [r7, #16]
 800da1c:	2b00      	cmp	r3, #0
 800da1e:	d1e6      	bne.n	800d9ee <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800da20:	687b      	ldr	r3, [r7, #4]
 800da22:	2220      	movs	r2, #32
 800da24:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800da28:	687b      	ldr	r3, [r7, #4]
 800da2a:	2200      	movs	r2, #0
 800da2c:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800da2e:	687b      	ldr	r3, [r7, #4]
 800da30:	2200      	movs	r2, #0
 800da32:	671a      	str	r2, [r3, #112]	; 0x70
}
 800da34:	bf00      	nop
 800da36:	3754      	adds	r7, #84	; 0x54
 800da38:	46bd      	mov	sp, r7
 800da3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da3e:	4770      	bx	lr
 800da40:	effffffe 	.word	0xeffffffe

0800da44 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800da44:	b580      	push	{r7, lr}
 800da46:	b084      	sub	sp, #16
 800da48:	af00      	add	r7, sp, #0
 800da4a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800da4c:	687b      	ldr	r3, [r7, #4]
 800da4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800da50:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800da52:	68fb      	ldr	r3, [r7, #12]
 800da54:	2200      	movs	r2, #0
 800da56:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800da5a:	68fb      	ldr	r3, [r7, #12]
 800da5c:	2200      	movs	r2, #0
 800da5e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800da62:	68f8      	ldr	r0, [r7, #12]
 800da64:	f7fe ff2a 	bl	800c8bc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800da68:	bf00      	nop
 800da6a:	3710      	adds	r7, #16
 800da6c:	46bd      	mov	sp, r7
 800da6e:	bd80      	pop	{r7, pc}

0800da70 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800da70:	b580      	push	{r7, lr}
 800da72:	b088      	sub	sp, #32
 800da74:	af00      	add	r7, sp, #0
 800da76:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800da78:	687b      	ldr	r3, [r7, #4]
 800da7a:	681b      	ldr	r3, [r3, #0]
 800da7c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800da7e:	68fb      	ldr	r3, [r7, #12]
 800da80:	e853 3f00 	ldrex	r3, [r3]
 800da84:	60bb      	str	r3, [r7, #8]
   return(result);
 800da86:	68bb      	ldr	r3, [r7, #8]
 800da88:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800da8c:	61fb      	str	r3, [r7, #28]
 800da8e:	687b      	ldr	r3, [r7, #4]
 800da90:	681b      	ldr	r3, [r3, #0]
 800da92:	461a      	mov	r2, r3
 800da94:	69fb      	ldr	r3, [r7, #28]
 800da96:	61bb      	str	r3, [r7, #24]
 800da98:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800da9a:	6979      	ldr	r1, [r7, #20]
 800da9c:	69ba      	ldr	r2, [r7, #24]
 800da9e:	e841 2300 	strex	r3, r2, [r1]
 800daa2:	613b      	str	r3, [r7, #16]
   return(result);
 800daa4:	693b      	ldr	r3, [r7, #16]
 800daa6:	2b00      	cmp	r3, #0
 800daa8:	d1e6      	bne.n	800da78 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800daaa:	687b      	ldr	r3, [r7, #4]
 800daac:	2220      	movs	r2, #32
 800daae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800dab2:	687b      	ldr	r3, [r7, #4]
 800dab4:	2200      	movs	r2, #0
 800dab6:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800dab8:	6878      	ldr	r0, [r7, #4]
 800daba:	f7f5 f82b 	bl	8002b14 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800dabe:	bf00      	nop
 800dac0:	3720      	adds	r7, #32
 800dac2:	46bd      	mov	sp, r7
 800dac4:	bd80      	pop	{r7, pc}

0800dac6 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800dac6:	b580      	push	{r7, lr}
 800dac8:	b096      	sub	sp, #88	; 0x58
 800daca:	af00      	add	r7, sp, #0
 800dacc:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800dace:	687b      	ldr	r3, [r7, #4]
 800dad0:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800dad4:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800dad8:	687b      	ldr	r3, [r7, #4]
 800dada:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800dade:	2b22      	cmp	r3, #34	; 0x22
 800dae0:	f040 8095 	bne.w	800dc0e <UART_RxISR_8BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800dae4:	687b      	ldr	r3, [r7, #4]
 800dae6:	681b      	ldr	r3, [r3, #0]
 800dae8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800daea:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800daee:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 800daf2:	b2d9      	uxtb	r1, r3
 800daf4:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800daf8:	b2da      	uxtb	r2, r3
 800dafa:	687b      	ldr	r3, [r7, #4]
 800dafc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800dafe:	400a      	ands	r2, r1
 800db00:	b2d2      	uxtb	r2, r2
 800db02:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800db04:	687b      	ldr	r3, [r7, #4]
 800db06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800db08:	1c5a      	adds	r2, r3, #1
 800db0a:	687b      	ldr	r3, [r7, #4]
 800db0c:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800db0e:	687b      	ldr	r3, [r7, #4]
 800db10:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800db14:	b29b      	uxth	r3, r3
 800db16:	3b01      	subs	r3, #1
 800db18:	b29a      	uxth	r2, r3
 800db1a:	687b      	ldr	r3, [r7, #4]
 800db1c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800db20:	687b      	ldr	r3, [r7, #4]
 800db22:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800db26:	b29b      	uxth	r3, r3
 800db28:	2b00      	cmp	r3, #0
 800db2a:	d178      	bne.n	800dc1e <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800db2c:	687b      	ldr	r3, [r7, #4]
 800db2e:	681b      	ldr	r3, [r3, #0]
 800db30:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800db32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800db34:	e853 3f00 	ldrex	r3, [r3]
 800db38:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800db3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800db3c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800db40:	653b      	str	r3, [r7, #80]	; 0x50
 800db42:	687b      	ldr	r3, [r7, #4]
 800db44:	681b      	ldr	r3, [r3, #0]
 800db46:	461a      	mov	r2, r3
 800db48:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800db4a:	647b      	str	r3, [r7, #68]	; 0x44
 800db4c:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800db4e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800db50:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800db52:	e841 2300 	strex	r3, r2, [r1]
 800db56:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800db58:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800db5a:	2b00      	cmp	r3, #0
 800db5c:	d1e6      	bne.n	800db2c <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800db5e:	687b      	ldr	r3, [r7, #4]
 800db60:	681b      	ldr	r3, [r3, #0]
 800db62:	3308      	adds	r3, #8
 800db64:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800db66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db68:	e853 3f00 	ldrex	r3, [r3]
 800db6c:	623b      	str	r3, [r7, #32]
   return(result);
 800db6e:	6a3b      	ldr	r3, [r7, #32]
 800db70:	f023 0301 	bic.w	r3, r3, #1
 800db74:	64fb      	str	r3, [r7, #76]	; 0x4c
 800db76:	687b      	ldr	r3, [r7, #4]
 800db78:	681b      	ldr	r3, [r3, #0]
 800db7a:	3308      	adds	r3, #8
 800db7c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800db7e:	633a      	str	r2, [r7, #48]	; 0x30
 800db80:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800db82:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800db84:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800db86:	e841 2300 	strex	r3, r2, [r1]
 800db8a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800db8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800db8e:	2b00      	cmp	r3, #0
 800db90:	d1e5      	bne.n	800db5e <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800db92:	687b      	ldr	r3, [r7, #4]
 800db94:	2220      	movs	r2, #32
 800db96:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800db9a:	687b      	ldr	r3, [r7, #4]
 800db9c:	2200      	movs	r2, #0
 800db9e:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800dba0:	687b      	ldr	r3, [r7, #4]
 800dba2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dba4:	2b01      	cmp	r3, #1
 800dba6:	d12e      	bne.n	800dc06 <UART_RxISR_8BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800dba8:	687b      	ldr	r3, [r7, #4]
 800dbaa:	2200      	movs	r2, #0
 800dbac:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800dbae:	687b      	ldr	r3, [r7, #4]
 800dbb0:	681b      	ldr	r3, [r3, #0]
 800dbb2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dbb4:	693b      	ldr	r3, [r7, #16]
 800dbb6:	e853 3f00 	ldrex	r3, [r3]
 800dbba:	60fb      	str	r3, [r7, #12]
   return(result);
 800dbbc:	68fb      	ldr	r3, [r7, #12]
 800dbbe:	f023 0310 	bic.w	r3, r3, #16
 800dbc2:	64bb      	str	r3, [r7, #72]	; 0x48
 800dbc4:	687b      	ldr	r3, [r7, #4]
 800dbc6:	681b      	ldr	r3, [r3, #0]
 800dbc8:	461a      	mov	r2, r3
 800dbca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800dbcc:	61fb      	str	r3, [r7, #28]
 800dbce:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dbd0:	69b9      	ldr	r1, [r7, #24]
 800dbd2:	69fa      	ldr	r2, [r7, #28]
 800dbd4:	e841 2300 	strex	r3, r2, [r1]
 800dbd8:	617b      	str	r3, [r7, #20]
   return(result);
 800dbda:	697b      	ldr	r3, [r7, #20]
 800dbdc:	2b00      	cmp	r3, #0
 800dbde:	d1e6      	bne.n	800dbae <UART_RxISR_8BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800dbe0:	687b      	ldr	r3, [r7, #4]
 800dbe2:	681b      	ldr	r3, [r3, #0]
 800dbe4:	69db      	ldr	r3, [r3, #28]
 800dbe6:	f003 0310 	and.w	r3, r3, #16
 800dbea:	2b10      	cmp	r3, #16
 800dbec:	d103      	bne.n	800dbf6 <UART_RxISR_8BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800dbee:	687b      	ldr	r3, [r7, #4]
 800dbf0:	681b      	ldr	r3, [r3, #0]
 800dbf2:	2210      	movs	r2, #16
 800dbf4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800dbf6:	687b      	ldr	r3, [r7, #4]
 800dbf8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800dbfc:	4619      	mov	r1, r3
 800dbfe:	6878      	ldr	r0, [r7, #4]
 800dc00:	f7fe fe66 	bl	800c8d0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800dc04:	e00b      	b.n	800dc1e <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 800dc06:	6878      	ldr	r0, [r7, #4]
 800dc08:	f7f4 ff10 	bl	8002a2c <HAL_UART_RxCpltCallback>
}
 800dc0c:	e007      	b.n	800dc1e <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800dc0e:	687b      	ldr	r3, [r7, #4]
 800dc10:	681b      	ldr	r3, [r3, #0]
 800dc12:	699a      	ldr	r2, [r3, #24]
 800dc14:	687b      	ldr	r3, [r7, #4]
 800dc16:	681b      	ldr	r3, [r3, #0]
 800dc18:	f042 0208 	orr.w	r2, r2, #8
 800dc1c:	619a      	str	r2, [r3, #24]
}
 800dc1e:	bf00      	nop
 800dc20:	3758      	adds	r7, #88	; 0x58
 800dc22:	46bd      	mov	sp, r7
 800dc24:	bd80      	pop	{r7, pc}

0800dc26 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800dc26:	b580      	push	{r7, lr}
 800dc28:	b096      	sub	sp, #88	; 0x58
 800dc2a:	af00      	add	r7, sp, #0
 800dc2c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800dc2e:	687b      	ldr	r3, [r7, #4]
 800dc30:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800dc34:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800dc38:	687b      	ldr	r3, [r7, #4]
 800dc3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800dc3e:	2b22      	cmp	r3, #34	; 0x22
 800dc40:	f040 8095 	bne.w	800dd6e <UART_RxISR_16BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800dc44:	687b      	ldr	r3, [r7, #4]
 800dc46:	681b      	ldr	r3, [r3, #0]
 800dc48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dc4a:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800dc4e:	687b      	ldr	r3, [r7, #4]
 800dc50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800dc52:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 800dc54:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 800dc58:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800dc5c:	4013      	ands	r3, r2
 800dc5e:	b29a      	uxth	r2, r3
 800dc60:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800dc62:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800dc64:	687b      	ldr	r3, [r7, #4]
 800dc66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800dc68:	1c9a      	adds	r2, r3, #2
 800dc6a:	687b      	ldr	r3, [r7, #4]
 800dc6c:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800dc6e:	687b      	ldr	r3, [r7, #4]
 800dc70:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800dc74:	b29b      	uxth	r3, r3
 800dc76:	3b01      	subs	r3, #1
 800dc78:	b29a      	uxth	r2, r3
 800dc7a:	687b      	ldr	r3, [r7, #4]
 800dc7c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800dc80:	687b      	ldr	r3, [r7, #4]
 800dc82:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800dc86:	b29b      	uxth	r3, r3
 800dc88:	2b00      	cmp	r3, #0
 800dc8a:	d178      	bne.n	800dd7e <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800dc8c:	687b      	ldr	r3, [r7, #4]
 800dc8e:	681b      	ldr	r3, [r3, #0]
 800dc90:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dc92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dc94:	e853 3f00 	ldrex	r3, [r3]
 800dc98:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800dc9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc9c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800dca0:	64fb      	str	r3, [r7, #76]	; 0x4c
 800dca2:	687b      	ldr	r3, [r7, #4]
 800dca4:	681b      	ldr	r3, [r3, #0]
 800dca6:	461a      	mov	r2, r3
 800dca8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dcaa:	643b      	str	r3, [r7, #64]	; 0x40
 800dcac:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dcae:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800dcb0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800dcb2:	e841 2300 	strex	r3, r2, [r1]
 800dcb6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800dcb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dcba:	2b00      	cmp	r3, #0
 800dcbc:	d1e6      	bne.n	800dc8c <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800dcbe:	687b      	ldr	r3, [r7, #4]
 800dcc0:	681b      	ldr	r3, [r3, #0]
 800dcc2:	3308      	adds	r3, #8
 800dcc4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dcc6:	6a3b      	ldr	r3, [r7, #32]
 800dcc8:	e853 3f00 	ldrex	r3, [r3]
 800dccc:	61fb      	str	r3, [r7, #28]
   return(result);
 800dcce:	69fb      	ldr	r3, [r7, #28]
 800dcd0:	f023 0301 	bic.w	r3, r3, #1
 800dcd4:	64bb      	str	r3, [r7, #72]	; 0x48
 800dcd6:	687b      	ldr	r3, [r7, #4]
 800dcd8:	681b      	ldr	r3, [r3, #0]
 800dcda:	3308      	adds	r3, #8
 800dcdc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800dcde:	62fa      	str	r2, [r7, #44]	; 0x2c
 800dce0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dce2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800dce4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800dce6:	e841 2300 	strex	r3, r2, [r1]
 800dcea:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800dcec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dcee:	2b00      	cmp	r3, #0
 800dcf0:	d1e5      	bne.n	800dcbe <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800dcf2:	687b      	ldr	r3, [r7, #4]
 800dcf4:	2220      	movs	r2, #32
 800dcf6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800dcfa:	687b      	ldr	r3, [r7, #4]
 800dcfc:	2200      	movs	r2, #0
 800dcfe:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800dd00:	687b      	ldr	r3, [r7, #4]
 800dd02:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dd04:	2b01      	cmp	r3, #1
 800dd06:	d12e      	bne.n	800dd66 <UART_RxISR_16BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800dd08:	687b      	ldr	r3, [r7, #4]
 800dd0a:	2200      	movs	r2, #0
 800dd0c:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800dd0e:	687b      	ldr	r3, [r7, #4]
 800dd10:	681b      	ldr	r3, [r3, #0]
 800dd12:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dd14:	68fb      	ldr	r3, [r7, #12]
 800dd16:	e853 3f00 	ldrex	r3, [r3]
 800dd1a:	60bb      	str	r3, [r7, #8]
   return(result);
 800dd1c:	68bb      	ldr	r3, [r7, #8]
 800dd1e:	f023 0310 	bic.w	r3, r3, #16
 800dd22:	647b      	str	r3, [r7, #68]	; 0x44
 800dd24:	687b      	ldr	r3, [r7, #4]
 800dd26:	681b      	ldr	r3, [r3, #0]
 800dd28:	461a      	mov	r2, r3
 800dd2a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800dd2c:	61bb      	str	r3, [r7, #24]
 800dd2e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dd30:	6979      	ldr	r1, [r7, #20]
 800dd32:	69ba      	ldr	r2, [r7, #24]
 800dd34:	e841 2300 	strex	r3, r2, [r1]
 800dd38:	613b      	str	r3, [r7, #16]
   return(result);
 800dd3a:	693b      	ldr	r3, [r7, #16]
 800dd3c:	2b00      	cmp	r3, #0
 800dd3e:	d1e6      	bne.n	800dd0e <UART_RxISR_16BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800dd40:	687b      	ldr	r3, [r7, #4]
 800dd42:	681b      	ldr	r3, [r3, #0]
 800dd44:	69db      	ldr	r3, [r3, #28]
 800dd46:	f003 0310 	and.w	r3, r3, #16
 800dd4a:	2b10      	cmp	r3, #16
 800dd4c:	d103      	bne.n	800dd56 <UART_RxISR_16BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800dd4e:	687b      	ldr	r3, [r7, #4]
 800dd50:	681b      	ldr	r3, [r3, #0]
 800dd52:	2210      	movs	r2, #16
 800dd54:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800dd56:	687b      	ldr	r3, [r7, #4]
 800dd58:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800dd5c:	4619      	mov	r1, r3
 800dd5e:	6878      	ldr	r0, [r7, #4]
 800dd60:	f7fe fdb6 	bl	800c8d0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800dd64:	e00b      	b.n	800dd7e <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 800dd66:	6878      	ldr	r0, [r7, #4]
 800dd68:	f7f4 fe60 	bl	8002a2c <HAL_UART_RxCpltCallback>
}
 800dd6c:	e007      	b.n	800dd7e <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800dd6e:	687b      	ldr	r3, [r7, #4]
 800dd70:	681b      	ldr	r3, [r3, #0]
 800dd72:	699a      	ldr	r2, [r3, #24]
 800dd74:	687b      	ldr	r3, [r7, #4]
 800dd76:	681b      	ldr	r3, [r3, #0]
 800dd78:	f042 0208 	orr.w	r2, r2, #8
 800dd7c:	619a      	str	r2, [r3, #24]
}
 800dd7e:	bf00      	nop
 800dd80:	3758      	adds	r7, #88	; 0x58
 800dd82:	46bd      	mov	sp, r7
 800dd84:	bd80      	pop	{r7, pc}
	...

0800dd88 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800dd88:	b580      	push	{r7, lr}
 800dd8a:	b0a6      	sub	sp, #152	; 0x98
 800dd8c:	af00      	add	r7, sp, #0
 800dd8e:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800dd90:	687b      	ldr	r3, [r7, #4]
 800dd92:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800dd96:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800dd9a:	687b      	ldr	r3, [r7, #4]
 800dd9c:	681b      	ldr	r3, [r3, #0]
 800dd9e:	69db      	ldr	r3, [r3, #28]
 800dda0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800dda4:	687b      	ldr	r3, [r7, #4]
 800dda6:	681b      	ldr	r3, [r3, #0]
 800dda8:	681b      	ldr	r3, [r3, #0]
 800ddaa:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800ddae:	687b      	ldr	r3, [r7, #4]
 800ddb0:	681b      	ldr	r3, [r3, #0]
 800ddb2:	689b      	ldr	r3, [r3, #8]
 800ddb4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800ddb8:	687b      	ldr	r3, [r7, #4]
 800ddba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ddbe:	2b22      	cmp	r3, #34	; 0x22
 800ddc0:	f040 814d 	bne.w	800e05e <UART_RxISR_8BIT_FIFOEN+0x2d6>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800ddc4:	687b      	ldr	r3, [r7, #4]
 800ddc6:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800ddca:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800ddce:	e0f4      	b.n	800dfba <UART_RxISR_8BIT_FIFOEN+0x232>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800ddd0:	687b      	ldr	r3, [r7, #4]
 800ddd2:	681b      	ldr	r3, [r3, #0]
 800ddd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ddd6:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800ddda:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 800ddde:	b2d9      	uxtb	r1, r3
 800dde0:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 800dde4:	b2da      	uxtb	r2, r3
 800dde6:	687b      	ldr	r3, [r7, #4]
 800dde8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ddea:	400a      	ands	r2, r1
 800ddec:	b2d2      	uxtb	r2, r2
 800ddee:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800ddf0:	687b      	ldr	r3, [r7, #4]
 800ddf2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ddf4:	1c5a      	adds	r2, r3, #1
 800ddf6:	687b      	ldr	r3, [r7, #4]
 800ddf8:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800ddfa:	687b      	ldr	r3, [r7, #4]
 800ddfc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800de00:	b29b      	uxth	r3, r3
 800de02:	3b01      	subs	r3, #1
 800de04:	b29a      	uxth	r2, r3
 800de06:	687b      	ldr	r3, [r7, #4]
 800de08:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800de0c:	687b      	ldr	r3, [r7, #4]
 800de0e:	681b      	ldr	r3, [r3, #0]
 800de10:	69db      	ldr	r3, [r3, #28]
 800de12:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800de16:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800de1a:	f003 0307 	and.w	r3, r3, #7
 800de1e:	2b00      	cmp	r3, #0
 800de20:	d053      	beq.n	800deca <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800de22:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800de26:	f003 0301 	and.w	r3, r3, #1
 800de2a:	2b00      	cmp	r3, #0
 800de2c:	d011      	beq.n	800de52 <UART_RxISR_8BIT_FIFOEN+0xca>
 800de2e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800de32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800de36:	2b00      	cmp	r3, #0
 800de38:	d00b      	beq.n	800de52 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800de3a:	687b      	ldr	r3, [r7, #4]
 800de3c:	681b      	ldr	r3, [r3, #0]
 800de3e:	2201      	movs	r2, #1
 800de40:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800de42:	687b      	ldr	r3, [r7, #4]
 800de44:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800de48:	f043 0201 	orr.w	r2, r3, #1
 800de4c:	687b      	ldr	r3, [r7, #4]
 800de4e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800de52:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800de56:	f003 0302 	and.w	r3, r3, #2
 800de5a:	2b00      	cmp	r3, #0
 800de5c:	d011      	beq.n	800de82 <UART_RxISR_8BIT_FIFOEN+0xfa>
 800de5e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800de62:	f003 0301 	and.w	r3, r3, #1
 800de66:	2b00      	cmp	r3, #0
 800de68:	d00b      	beq.n	800de82 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800de6a:	687b      	ldr	r3, [r7, #4]
 800de6c:	681b      	ldr	r3, [r3, #0]
 800de6e:	2202      	movs	r2, #2
 800de70:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800de72:	687b      	ldr	r3, [r7, #4]
 800de74:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800de78:	f043 0204 	orr.w	r2, r3, #4
 800de7c:	687b      	ldr	r3, [r7, #4]
 800de7e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800de82:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800de86:	f003 0304 	and.w	r3, r3, #4
 800de8a:	2b00      	cmp	r3, #0
 800de8c:	d011      	beq.n	800deb2 <UART_RxISR_8BIT_FIFOEN+0x12a>
 800de8e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800de92:	f003 0301 	and.w	r3, r3, #1
 800de96:	2b00      	cmp	r3, #0
 800de98:	d00b      	beq.n	800deb2 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800de9a:	687b      	ldr	r3, [r7, #4]
 800de9c:	681b      	ldr	r3, [r3, #0]
 800de9e:	2204      	movs	r2, #4
 800dea0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800dea2:	687b      	ldr	r3, [r7, #4]
 800dea4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800dea8:	f043 0202 	orr.w	r2, r3, #2
 800deac:	687b      	ldr	r3, [r7, #4]
 800deae:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800deb2:	687b      	ldr	r3, [r7, #4]
 800deb4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800deb8:	2b00      	cmp	r3, #0
 800deba:	d006      	beq.n	800deca <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800debc:	6878      	ldr	r0, [r7, #4]
 800debe:	f7fe fcfd 	bl	800c8bc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800dec2:	687b      	ldr	r3, [r7, #4]
 800dec4:	2200      	movs	r2, #0
 800dec6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 800deca:	687b      	ldr	r3, [r7, #4]
 800decc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800ded0:	b29b      	uxth	r3, r3
 800ded2:	2b00      	cmp	r3, #0
 800ded4:	d171      	bne.n	800dfba <UART_RxISR_8BIT_FIFOEN+0x232>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800ded6:	687b      	ldr	r3, [r7, #4]
 800ded8:	681b      	ldr	r3, [r3, #0]
 800deda:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dedc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800dede:	e853 3f00 	ldrex	r3, [r3]
 800dee2:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 800dee4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800dee6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800deea:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800deee:	687b      	ldr	r3, [r7, #4]
 800def0:	681b      	ldr	r3, [r3, #0]
 800def2:	461a      	mov	r2, r3
 800def4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800def8:	66bb      	str	r3, [r7, #104]	; 0x68
 800defa:	667a      	str	r2, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800defc:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800defe:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800df00:	e841 2300 	strex	r3, r2, [r1]
 800df04:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 800df06:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800df08:	2b00      	cmp	r3, #0
 800df0a:	d1e4      	bne.n	800ded6 <UART_RxISR_8BIT_FIFOEN+0x14e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800df0c:	687b      	ldr	r3, [r7, #4]
 800df0e:	681b      	ldr	r3, [r3, #0]
 800df10:	3308      	adds	r3, #8
 800df12:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800df14:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800df16:	e853 3f00 	ldrex	r3, [r3]
 800df1a:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800df1c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800df1e:	4b56      	ldr	r3, [pc, #344]	; (800e078 <UART_RxISR_8BIT_FIFOEN+0x2f0>)
 800df20:	4013      	ands	r3, r2
 800df22:	67fb      	str	r3, [r7, #124]	; 0x7c
 800df24:	687b      	ldr	r3, [r7, #4]
 800df26:	681b      	ldr	r3, [r3, #0]
 800df28:	3308      	adds	r3, #8
 800df2a:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800df2c:	657a      	str	r2, [r7, #84]	; 0x54
 800df2e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800df30:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800df32:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800df34:	e841 2300 	strex	r3, r2, [r1]
 800df38:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800df3a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800df3c:	2b00      	cmp	r3, #0
 800df3e:	d1e5      	bne.n	800df0c <UART_RxISR_8BIT_FIFOEN+0x184>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800df40:	687b      	ldr	r3, [r7, #4]
 800df42:	2220      	movs	r2, #32
 800df44:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800df48:	687b      	ldr	r3, [r7, #4]
 800df4a:	2200      	movs	r2, #0
 800df4c:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800df4e:	687b      	ldr	r3, [r7, #4]
 800df50:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800df52:	2b01      	cmp	r3, #1
 800df54:	d12e      	bne.n	800dfb4 <UART_RxISR_8BIT_FIFOEN+0x22c>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800df56:	687b      	ldr	r3, [r7, #4]
 800df58:	2200      	movs	r2, #0
 800df5a:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800df5c:	687b      	ldr	r3, [r7, #4]
 800df5e:	681b      	ldr	r3, [r3, #0]
 800df60:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800df62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800df64:	e853 3f00 	ldrex	r3, [r3]
 800df68:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800df6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800df6c:	f023 0310 	bic.w	r3, r3, #16
 800df70:	67bb      	str	r3, [r7, #120]	; 0x78
 800df72:	687b      	ldr	r3, [r7, #4]
 800df74:	681b      	ldr	r3, [r3, #0]
 800df76:	461a      	mov	r2, r3
 800df78:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800df7a:	643b      	str	r3, [r7, #64]	; 0x40
 800df7c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800df7e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800df80:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800df82:	e841 2300 	strex	r3, r2, [r1]
 800df86:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800df88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800df8a:	2b00      	cmp	r3, #0
 800df8c:	d1e6      	bne.n	800df5c <UART_RxISR_8BIT_FIFOEN+0x1d4>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800df8e:	687b      	ldr	r3, [r7, #4]
 800df90:	681b      	ldr	r3, [r3, #0]
 800df92:	69db      	ldr	r3, [r3, #28]
 800df94:	f003 0310 	and.w	r3, r3, #16
 800df98:	2b10      	cmp	r3, #16
 800df9a:	d103      	bne.n	800dfa4 <UART_RxISR_8BIT_FIFOEN+0x21c>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800df9c:	687b      	ldr	r3, [r7, #4]
 800df9e:	681b      	ldr	r3, [r3, #0]
 800dfa0:	2210      	movs	r2, #16
 800dfa2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800dfa4:	687b      	ldr	r3, [r7, #4]
 800dfa6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800dfaa:	4619      	mov	r1, r3
 800dfac:	6878      	ldr	r0, [r7, #4]
 800dfae:	f7fe fc8f 	bl	800c8d0 <HAL_UARTEx_RxEventCallback>
 800dfb2:	e002      	b.n	800dfba <UART_RxISR_8BIT_FIFOEN+0x232>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800dfb4:	6878      	ldr	r0, [r7, #4]
 800dfb6:	f7f4 fd39 	bl	8002a2c <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800dfba:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800dfbe:	2b00      	cmp	r3, #0
 800dfc0:	d006      	beq.n	800dfd0 <UART_RxISR_8BIT_FIFOEN+0x248>
 800dfc2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800dfc6:	f003 0320 	and.w	r3, r3, #32
 800dfca:	2b00      	cmp	r3, #0
 800dfcc:	f47f af00 	bne.w	800ddd0 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800dfd0:	687b      	ldr	r3, [r7, #4]
 800dfd2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800dfd6:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800dfda:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 800dfde:	2b00      	cmp	r3, #0
 800dfe0:	d045      	beq.n	800e06e <UART_RxISR_8BIT_FIFOEN+0x2e6>
 800dfe2:	687b      	ldr	r3, [r7, #4]
 800dfe4:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800dfe8:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800dfec:	429a      	cmp	r2, r3
 800dfee:	d23e      	bcs.n	800e06e <UART_RxISR_8BIT_FIFOEN+0x2e6>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800dff0:	687b      	ldr	r3, [r7, #4]
 800dff2:	681b      	ldr	r3, [r3, #0]
 800dff4:	3308      	adds	r3, #8
 800dff6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dff8:	6a3b      	ldr	r3, [r7, #32]
 800dffa:	e853 3f00 	ldrex	r3, [r3]
 800dffe:	61fb      	str	r3, [r7, #28]
   return(result);
 800e000:	69fb      	ldr	r3, [r7, #28]
 800e002:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800e006:	673b      	str	r3, [r7, #112]	; 0x70
 800e008:	687b      	ldr	r3, [r7, #4]
 800e00a:	681b      	ldr	r3, [r3, #0]
 800e00c:	3308      	adds	r3, #8
 800e00e:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800e010:	62fa      	str	r2, [r7, #44]	; 0x2c
 800e012:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e014:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800e016:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e018:	e841 2300 	strex	r3, r2, [r1]
 800e01c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800e01e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e020:	2b00      	cmp	r3, #0
 800e022:	d1e5      	bne.n	800dff0 <UART_RxISR_8BIT_FIFOEN+0x268>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800e024:	687b      	ldr	r3, [r7, #4]
 800e026:	4a15      	ldr	r2, [pc, #84]	; (800e07c <UART_RxISR_8BIT_FIFOEN+0x2f4>)
 800e028:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800e02a:	687b      	ldr	r3, [r7, #4]
 800e02c:	681b      	ldr	r3, [r3, #0]
 800e02e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e030:	68fb      	ldr	r3, [r7, #12]
 800e032:	e853 3f00 	ldrex	r3, [r3]
 800e036:	60bb      	str	r3, [r7, #8]
   return(result);
 800e038:	68bb      	ldr	r3, [r7, #8]
 800e03a:	f043 0320 	orr.w	r3, r3, #32
 800e03e:	66fb      	str	r3, [r7, #108]	; 0x6c
 800e040:	687b      	ldr	r3, [r7, #4]
 800e042:	681b      	ldr	r3, [r3, #0]
 800e044:	461a      	mov	r2, r3
 800e046:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e048:	61bb      	str	r3, [r7, #24]
 800e04a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e04c:	6979      	ldr	r1, [r7, #20]
 800e04e:	69ba      	ldr	r2, [r7, #24]
 800e050:	e841 2300 	strex	r3, r2, [r1]
 800e054:	613b      	str	r3, [r7, #16]
   return(result);
 800e056:	693b      	ldr	r3, [r7, #16]
 800e058:	2b00      	cmp	r3, #0
 800e05a:	d1e6      	bne.n	800e02a <UART_RxISR_8BIT_FIFOEN+0x2a2>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800e05c:	e007      	b.n	800e06e <UART_RxISR_8BIT_FIFOEN+0x2e6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800e05e:	687b      	ldr	r3, [r7, #4]
 800e060:	681b      	ldr	r3, [r3, #0]
 800e062:	699a      	ldr	r2, [r3, #24]
 800e064:	687b      	ldr	r3, [r7, #4]
 800e066:	681b      	ldr	r3, [r3, #0]
 800e068:	f042 0208 	orr.w	r2, r2, #8
 800e06c:	619a      	str	r2, [r3, #24]
}
 800e06e:	bf00      	nop
 800e070:	3798      	adds	r7, #152	; 0x98
 800e072:	46bd      	mov	sp, r7
 800e074:	bd80      	pop	{r7, pc}
 800e076:	bf00      	nop
 800e078:	effffffe 	.word	0xeffffffe
 800e07c:	0800dac7 	.word	0x0800dac7

0800e080 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800e080:	b580      	push	{r7, lr}
 800e082:	b0a8      	sub	sp, #160	; 0xa0
 800e084:	af00      	add	r7, sp, #0
 800e086:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800e088:	687b      	ldr	r3, [r7, #4]
 800e08a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800e08e:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800e092:	687b      	ldr	r3, [r7, #4]
 800e094:	681b      	ldr	r3, [r3, #0]
 800e096:	69db      	ldr	r3, [r3, #28]
 800e098:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800e09c:	687b      	ldr	r3, [r7, #4]
 800e09e:	681b      	ldr	r3, [r3, #0]
 800e0a0:	681b      	ldr	r3, [r3, #0]
 800e0a2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800e0a6:	687b      	ldr	r3, [r7, #4]
 800e0a8:	681b      	ldr	r3, [r3, #0]
 800e0aa:	689b      	ldr	r3, [r3, #8]
 800e0ac:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800e0b0:	687b      	ldr	r3, [r7, #4]
 800e0b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e0b6:	2b22      	cmp	r3, #34	; 0x22
 800e0b8:	f040 8151 	bne.w	800e35e <UART_RxISR_16BIT_FIFOEN+0x2de>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800e0bc:	687b      	ldr	r3, [r7, #4]
 800e0be:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800e0c2:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800e0c6:	e0f8      	b.n	800e2ba <UART_RxISR_16BIT_FIFOEN+0x23a>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800e0c8:	687b      	ldr	r3, [r7, #4]
 800e0ca:	681b      	ldr	r3, [r3, #0]
 800e0cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e0ce:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800e0d2:	687b      	ldr	r3, [r7, #4]
 800e0d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e0d6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      *tmp = (uint16_t)(uhdata & uhMask);
 800e0da:	f8b7 208c 	ldrh.w	r2, [r7, #140]	; 0x8c
 800e0de:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 800e0e2:	4013      	ands	r3, r2
 800e0e4:	b29a      	uxth	r2, r3
 800e0e6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800e0ea:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800e0ec:	687b      	ldr	r3, [r7, #4]
 800e0ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e0f0:	1c9a      	adds	r2, r3, #2
 800e0f2:	687b      	ldr	r3, [r7, #4]
 800e0f4:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800e0f6:	687b      	ldr	r3, [r7, #4]
 800e0f8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800e0fc:	b29b      	uxth	r3, r3
 800e0fe:	3b01      	subs	r3, #1
 800e100:	b29a      	uxth	r2, r3
 800e102:	687b      	ldr	r3, [r7, #4]
 800e104:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800e108:	687b      	ldr	r3, [r7, #4]
 800e10a:	681b      	ldr	r3, [r3, #0]
 800e10c:	69db      	ldr	r3, [r3, #28]
 800e10e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800e112:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800e116:	f003 0307 	and.w	r3, r3, #7
 800e11a:	2b00      	cmp	r3, #0
 800e11c:	d053      	beq.n	800e1c6 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800e11e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800e122:	f003 0301 	and.w	r3, r3, #1
 800e126:	2b00      	cmp	r3, #0
 800e128:	d011      	beq.n	800e14e <UART_RxISR_16BIT_FIFOEN+0xce>
 800e12a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800e12e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e132:	2b00      	cmp	r3, #0
 800e134:	d00b      	beq.n	800e14e <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800e136:	687b      	ldr	r3, [r7, #4]
 800e138:	681b      	ldr	r3, [r3, #0]
 800e13a:	2201      	movs	r2, #1
 800e13c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800e13e:	687b      	ldr	r3, [r7, #4]
 800e140:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e144:	f043 0201 	orr.w	r2, r3, #1
 800e148:	687b      	ldr	r3, [r7, #4]
 800e14a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800e14e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800e152:	f003 0302 	and.w	r3, r3, #2
 800e156:	2b00      	cmp	r3, #0
 800e158:	d011      	beq.n	800e17e <UART_RxISR_16BIT_FIFOEN+0xfe>
 800e15a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800e15e:	f003 0301 	and.w	r3, r3, #1
 800e162:	2b00      	cmp	r3, #0
 800e164:	d00b      	beq.n	800e17e <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800e166:	687b      	ldr	r3, [r7, #4]
 800e168:	681b      	ldr	r3, [r3, #0]
 800e16a:	2202      	movs	r2, #2
 800e16c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800e16e:	687b      	ldr	r3, [r7, #4]
 800e170:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e174:	f043 0204 	orr.w	r2, r3, #4
 800e178:	687b      	ldr	r3, [r7, #4]
 800e17a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800e17e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800e182:	f003 0304 	and.w	r3, r3, #4
 800e186:	2b00      	cmp	r3, #0
 800e188:	d011      	beq.n	800e1ae <UART_RxISR_16BIT_FIFOEN+0x12e>
 800e18a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800e18e:	f003 0301 	and.w	r3, r3, #1
 800e192:	2b00      	cmp	r3, #0
 800e194:	d00b      	beq.n	800e1ae <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800e196:	687b      	ldr	r3, [r7, #4]
 800e198:	681b      	ldr	r3, [r3, #0]
 800e19a:	2204      	movs	r2, #4
 800e19c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800e19e:	687b      	ldr	r3, [r7, #4]
 800e1a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e1a4:	f043 0202 	orr.w	r2, r3, #2
 800e1a8:	687b      	ldr	r3, [r7, #4]
 800e1aa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800e1ae:	687b      	ldr	r3, [r7, #4]
 800e1b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e1b4:	2b00      	cmp	r3, #0
 800e1b6:	d006      	beq.n	800e1c6 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800e1b8:	6878      	ldr	r0, [r7, #4]
 800e1ba:	f7fe fb7f 	bl	800c8bc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e1be:	687b      	ldr	r3, [r7, #4]
 800e1c0:	2200      	movs	r2, #0
 800e1c2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 800e1c6:	687b      	ldr	r3, [r7, #4]
 800e1c8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800e1cc:	b29b      	uxth	r3, r3
 800e1ce:	2b00      	cmp	r3, #0
 800e1d0:	d173      	bne.n	800e2ba <UART_RxISR_16BIT_FIFOEN+0x23a>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800e1d2:	687b      	ldr	r3, [r7, #4]
 800e1d4:	681b      	ldr	r3, [r3, #0]
 800e1d6:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e1d8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e1da:	e853 3f00 	ldrex	r3, [r3]
 800e1de:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800e1e0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e1e2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800e1e6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800e1ea:	687b      	ldr	r3, [r7, #4]
 800e1ec:	681b      	ldr	r3, [r3, #0]
 800e1ee:	461a      	mov	r2, r3
 800e1f0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800e1f4:	66fb      	str	r3, [r7, #108]	; 0x6c
 800e1f6:	66ba      	str	r2, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e1f8:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800e1fa:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800e1fc:	e841 2300 	strex	r3, r2, [r1]
 800e200:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800e202:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e204:	2b00      	cmp	r3, #0
 800e206:	d1e4      	bne.n	800e1d2 <UART_RxISR_16BIT_FIFOEN+0x152>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800e208:	687b      	ldr	r3, [r7, #4]
 800e20a:	681b      	ldr	r3, [r3, #0]
 800e20c:	3308      	adds	r3, #8
 800e20e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e210:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e212:	e853 3f00 	ldrex	r3, [r3]
 800e216:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800e218:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e21a:	4b57      	ldr	r3, [pc, #348]	; (800e378 <UART_RxISR_16BIT_FIFOEN+0x2f8>)
 800e21c:	4013      	ands	r3, r2
 800e21e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800e222:	687b      	ldr	r3, [r7, #4]
 800e224:	681b      	ldr	r3, [r3, #0]
 800e226:	3308      	adds	r3, #8
 800e228:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800e22c:	65ba      	str	r2, [r7, #88]	; 0x58
 800e22e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e230:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800e232:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800e234:	e841 2300 	strex	r3, r2, [r1]
 800e238:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800e23a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e23c:	2b00      	cmp	r3, #0
 800e23e:	d1e3      	bne.n	800e208 <UART_RxISR_16BIT_FIFOEN+0x188>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800e240:	687b      	ldr	r3, [r7, #4]
 800e242:	2220      	movs	r2, #32
 800e244:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800e248:	687b      	ldr	r3, [r7, #4]
 800e24a:	2200      	movs	r2, #0
 800e24c:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e24e:	687b      	ldr	r3, [r7, #4]
 800e250:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e252:	2b01      	cmp	r3, #1
 800e254:	d12e      	bne.n	800e2b4 <UART_RxISR_16BIT_FIFOEN+0x234>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e256:	687b      	ldr	r3, [r7, #4]
 800e258:	2200      	movs	r2, #0
 800e25a:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e25c:	687b      	ldr	r3, [r7, #4]
 800e25e:	681b      	ldr	r3, [r3, #0]
 800e260:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e262:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e264:	e853 3f00 	ldrex	r3, [r3]
 800e268:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800e26a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e26c:	f023 0310 	bic.w	r3, r3, #16
 800e270:	67fb      	str	r3, [r7, #124]	; 0x7c
 800e272:	687b      	ldr	r3, [r7, #4]
 800e274:	681b      	ldr	r3, [r3, #0]
 800e276:	461a      	mov	r2, r3
 800e278:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800e27a:	647b      	str	r3, [r7, #68]	; 0x44
 800e27c:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e27e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800e280:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e282:	e841 2300 	strex	r3, r2, [r1]
 800e286:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800e288:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e28a:	2b00      	cmp	r3, #0
 800e28c:	d1e6      	bne.n	800e25c <UART_RxISR_16BIT_FIFOEN+0x1dc>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800e28e:	687b      	ldr	r3, [r7, #4]
 800e290:	681b      	ldr	r3, [r3, #0]
 800e292:	69db      	ldr	r3, [r3, #28]
 800e294:	f003 0310 	and.w	r3, r3, #16
 800e298:	2b10      	cmp	r3, #16
 800e29a:	d103      	bne.n	800e2a4 <UART_RxISR_16BIT_FIFOEN+0x224>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800e29c:	687b      	ldr	r3, [r7, #4]
 800e29e:	681b      	ldr	r3, [r3, #0]
 800e2a0:	2210      	movs	r2, #16
 800e2a2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800e2a4:	687b      	ldr	r3, [r7, #4]
 800e2a6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800e2aa:	4619      	mov	r1, r3
 800e2ac:	6878      	ldr	r0, [r7, #4]
 800e2ae:	f7fe fb0f 	bl	800c8d0 <HAL_UARTEx_RxEventCallback>
 800e2b2:	e002      	b.n	800e2ba <UART_RxISR_16BIT_FIFOEN+0x23a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800e2b4:	6878      	ldr	r0, [r7, #4]
 800e2b6:	f7f4 fbb9 	bl	8002a2c <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800e2ba:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 800e2be:	2b00      	cmp	r3, #0
 800e2c0:	d006      	beq.n	800e2d0 <UART_RxISR_16BIT_FIFOEN+0x250>
 800e2c2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800e2c6:	f003 0320 	and.w	r3, r3, #32
 800e2ca:	2b00      	cmp	r3, #0
 800e2cc:	f47f aefc 	bne.w	800e0c8 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800e2d0:	687b      	ldr	r3, [r7, #4]
 800e2d2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800e2d6:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800e2da:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 800e2de:	2b00      	cmp	r3, #0
 800e2e0:	d045      	beq.n	800e36e <UART_RxISR_16BIT_FIFOEN+0x2ee>
 800e2e2:	687b      	ldr	r3, [r7, #4]
 800e2e4:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800e2e8:	f8b7 207a 	ldrh.w	r2, [r7, #122]	; 0x7a
 800e2ec:	429a      	cmp	r2, r3
 800e2ee:	d23e      	bcs.n	800e36e <UART_RxISR_16BIT_FIFOEN+0x2ee>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800e2f0:	687b      	ldr	r3, [r7, #4]
 800e2f2:	681b      	ldr	r3, [r3, #0]
 800e2f4:	3308      	adds	r3, #8
 800e2f6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e2f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e2fa:	e853 3f00 	ldrex	r3, [r3]
 800e2fe:	623b      	str	r3, [r7, #32]
   return(result);
 800e300:	6a3b      	ldr	r3, [r7, #32]
 800e302:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800e306:	677b      	str	r3, [r7, #116]	; 0x74
 800e308:	687b      	ldr	r3, [r7, #4]
 800e30a:	681b      	ldr	r3, [r3, #0]
 800e30c:	3308      	adds	r3, #8
 800e30e:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800e310:	633a      	str	r2, [r7, #48]	; 0x30
 800e312:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e314:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800e316:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e318:	e841 2300 	strex	r3, r2, [r1]
 800e31c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800e31e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e320:	2b00      	cmp	r3, #0
 800e322:	d1e5      	bne.n	800e2f0 <UART_RxISR_16BIT_FIFOEN+0x270>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800e324:	687b      	ldr	r3, [r7, #4]
 800e326:	4a15      	ldr	r2, [pc, #84]	; (800e37c <UART_RxISR_16BIT_FIFOEN+0x2fc>)
 800e328:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800e32a:	687b      	ldr	r3, [r7, #4]
 800e32c:	681b      	ldr	r3, [r3, #0]
 800e32e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e330:	693b      	ldr	r3, [r7, #16]
 800e332:	e853 3f00 	ldrex	r3, [r3]
 800e336:	60fb      	str	r3, [r7, #12]
   return(result);
 800e338:	68fb      	ldr	r3, [r7, #12]
 800e33a:	f043 0320 	orr.w	r3, r3, #32
 800e33e:	673b      	str	r3, [r7, #112]	; 0x70
 800e340:	687b      	ldr	r3, [r7, #4]
 800e342:	681b      	ldr	r3, [r3, #0]
 800e344:	461a      	mov	r2, r3
 800e346:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800e348:	61fb      	str	r3, [r7, #28]
 800e34a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e34c:	69b9      	ldr	r1, [r7, #24]
 800e34e:	69fa      	ldr	r2, [r7, #28]
 800e350:	e841 2300 	strex	r3, r2, [r1]
 800e354:	617b      	str	r3, [r7, #20]
   return(result);
 800e356:	697b      	ldr	r3, [r7, #20]
 800e358:	2b00      	cmp	r3, #0
 800e35a:	d1e6      	bne.n	800e32a <UART_RxISR_16BIT_FIFOEN+0x2aa>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800e35c:	e007      	b.n	800e36e <UART_RxISR_16BIT_FIFOEN+0x2ee>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800e35e:	687b      	ldr	r3, [r7, #4]
 800e360:	681b      	ldr	r3, [r3, #0]
 800e362:	699a      	ldr	r2, [r3, #24]
 800e364:	687b      	ldr	r3, [r7, #4]
 800e366:	681b      	ldr	r3, [r3, #0]
 800e368:	f042 0208 	orr.w	r2, r2, #8
 800e36c:	619a      	str	r2, [r3, #24]
}
 800e36e:	bf00      	nop
 800e370:	37a0      	adds	r7, #160	; 0xa0
 800e372:	46bd      	mov	sp, r7
 800e374:	bd80      	pop	{r7, pc}
 800e376:	bf00      	nop
 800e378:	effffffe 	.word	0xeffffffe
 800e37c:	0800dc27 	.word	0x0800dc27

0800e380 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800e380:	b480      	push	{r7}
 800e382:	b083      	sub	sp, #12
 800e384:	af00      	add	r7, sp, #0
 800e386:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800e388:	bf00      	nop
 800e38a:	370c      	adds	r7, #12
 800e38c:	46bd      	mov	sp, r7
 800e38e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e392:	4770      	bx	lr

0800e394 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800e394:	b480      	push	{r7}
 800e396:	b083      	sub	sp, #12
 800e398:	af00      	add	r7, sp, #0
 800e39a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800e39c:	bf00      	nop
 800e39e:	370c      	adds	r7, #12
 800e3a0:	46bd      	mov	sp, r7
 800e3a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3a6:	4770      	bx	lr

0800e3a8 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800e3a8:	b480      	push	{r7}
 800e3aa:	b083      	sub	sp, #12
 800e3ac:	af00      	add	r7, sp, #0
 800e3ae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800e3b0:	bf00      	nop
 800e3b2:	370c      	adds	r7, #12
 800e3b4:	46bd      	mov	sp, r7
 800e3b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3ba:	4770      	bx	lr

0800e3bc <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800e3bc:	b480      	push	{r7}
 800e3be:	b085      	sub	sp, #20
 800e3c0:	af00      	add	r7, sp, #0
 800e3c2:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800e3c4:	687b      	ldr	r3, [r7, #4]
 800e3c6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800e3ca:	2b01      	cmp	r3, #1
 800e3cc:	d101      	bne.n	800e3d2 <HAL_UARTEx_DisableFifoMode+0x16>
 800e3ce:	2302      	movs	r3, #2
 800e3d0:	e027      	b.n	800e422 <HAL_UARTEx_DisableFifoMode+0x66>
 800e3d2:	687b      	ldr	r3, [r7, #4]
 800e3d4:	2201      	movs	r2, #1
 800e3d6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800e3da:	687b      	ldr	r3, [r7, #4]
 800e3dc:	2224      	movs	r2, #36	; 0x24
 800e3de:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800e3e2:	687b      	ldr	r3, [r7, #4]
 800e3e4:	681b      	ldr	r3, [r3, #0]
 800e3e6:	681b      	ldr	r3, [r3, #0]
 800e3e8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800e3ea:	687b      	ldr	r3, [r7, #4]
 800e3ec:	681b      	ldr	r3, [r3, #0]
 800e3ee:	681a      	ldr	r2, [r3, #0]
 800e3f0:	687b      	ldr	r3, [r7, #4]
 800e3f2:	681b      	ldr	r3, [r3, #0]
 800e3f4:	f022 0201 	bic.w	r2, r2, #1
 800e3f8:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800e3fa:	68fb      	ldr	r3, [r7, #12]
 800e3fc:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800e400:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800e402:	687b      	ldr	r3, [r7, #4]
 800e404:	2200      	movs	r2, #0
 800e406:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800e408:	687b      	ldr	r3, [r7, #4]
 800e40a:	681b      	ldr	r3, [r3, #0]
 800e40c:	68fa      	ldr	r2, [r7, #12]
 800e40e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800e410:	687b      	ldr	r3, [r7, #4]
 800e412:	2220      	movs	r2, #32
 800e414:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800e418:	687b      	ldr	r3, [r7, #4]
 800e41a:	2200      	movs	r2, #0
 800e41c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800e420:	2300      	movs	r3, #0
}
 800e422:	4618      	mov	r0, r3
 800e424:	3714      	adds	r7, #20
 800e426:	46bd      	mov	sp, r7
 800e428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e42c:	4770      	bx	lr

0800e42e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800e42e:	b580      	push	{r7, lr}
 800e430:	b084      	sub	sp, #16
 800e432:	af00      	add	r7, sp, #0
 800e434:	6078      	str	r0, [r7, #4]
 800e436:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800e438:	687b      	ldr	r3, [r7, #4]
 800e43a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800e43e:	2b01      	cmp	r3, #1
 800e440:	d101      	bne.n	800e446 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800e442:	2302      	movs	r3, #2
 800e444:	e02d      	b.n	800e4a2 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800e446:	687b      	ldr	r3, [r7, #4]
 800e448:	2201      	movs	r2, #1
 800e44a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800e44e:	687b      	ldr	r3, [r7, #4]
 800e450:	2224      	movs	r2, #36	; 0x24
 800e452:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800e456:	687b      	ldr	r3, [r7, #4]
 800e458:	681b      	ldr	r3, [r3, #0]
 800e45a:	681b      	ldr	r3, [r3, #0]
 800e45c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800e45e:	687b      	ldr	r3, [r7, #4]
 800e460:	681b      	ldr	r3, [r3, #0]
 800e462:	681a      	ldr	r2, [r3, #0]
 800e464:	687b      	ldr	r3, [r7, #4]
 800e466:	681b      	ldr	r3, [r3, #0]
 800e468:	f022 0201 	bic.w	r2, r2, #1
 800e46c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800e46e:	687b      	ldr	r3, [r7, #4]
 800e470:	681b      	ldr	r3, [r3, #0]
 800e472:	689b      	ldr	r3, [r3, #8]
 800e474:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800e478:	687b      	ldr	r3, [r7, #4]
 800e47a:	681b      	ldr	r3, [r3, #0]
 800e47c:	683a      	ldr	r2, [r7, #0]
 800e47e:	430a      	orrs	r2, r1
 800e480:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800e482:	6878      	ldr	r0, [r7, #4]
 800e484:	f000 f850 	bl	800e528 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800e488:	687b      	ldr	r3, [r7, #4]
 800e48a:	681b      	ldr	r3, [r3, #0]
 800e48c:	68fa      	ldr	r2, [r7, #12]
 800e48e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800e490:	687b      	ldr	r3, [r7, #4]
 800e492:	2220      	movs	r2, #32
 800e494:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800e498:	687b      	ldr	r3, [r7, #4]
 800e49a:	2200      	movs	r2, #0
 800e49c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800e4a0:	2300      	movs	r3, #0
}
 800e4a2:	4618      	mov	r0, r3
 800e4a4:	3710      	adds	r7, #16
 800e4a6:	46bd      	mov	sp, r7
 800e4a8:	bd80      	pop	{r7, pc}

0800e4aa <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800e4aa:	b580      	push	{r7, lr}
 800e4ac:	b084      	sub	sp, #16
 800e4ae:	af00      	add	r7, sp, #0
 800e4b0:	6078      	str	r0, [r7, #4]
 800e4b2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800e4b4:	687b      	ldr	r3, [r7, #4]
 800e4b6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800e4ba:	2b01      	cmp	r3, #1
 800e4bc:	d101      	bne.n	800e4c2 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800e4be:	2302      	movs	r3, #2
 800e4c0:	e02d      	b.n	800e51e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800e4c2:	687b      	ldr	r3, [r7, #4]
 800e4c4:	2201      	movs	r2, #1
 800e4c6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800e4ca:	687b      	ldr	r3, [r7, #4]
 800e4cc:	2224      	movs	r2, #36	; 0x24
 800e4ce:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800e4d2:	687b      	ldr	r3, [r7, #4]
 800e4d4:	681b      	ldr	r3, [r3, #0]
 800e4d6:	681b      	ldr	r3, [r3, #0]
 800e4d8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800e4da:	687b      	ldr	r3, [r7, #4]
 800e4dc:	681b      	ldr	r3, [r3, #0]
 800e4de:	681a      	ldr	r2, [r3, #0]
 800e4e0:	687b      	ldr	r3, [r7, #4]
 800e4e2:	681b      	ldr	r3, [r3, #0]
 800e4e4:	f022 0201 	bic.w	r2, r2, #1
 800e4e8:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800e4ea:	687b      	ldr	r3, [r7, #4]
 800e4ec:	681b      	ldr	r3, [r3, #0]
 800e4ee:	689b      	ldr	r3, [r3, #8]
 800e4f0:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800e4f4:	687b      	ldr	r3, [r7, #4]
 800e4f6:	681b      	ldr	r3, [r3, #0]
 800e4f8:	683a      	ldr	r2, [r7, #0]
 800e4fa:	430a      	orrs	r2, r1
 800e4fc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800e4fe:	6878      	ldr	r0, [r7, #4]
 800e500:	f000 f812 	bl	800e528 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800e504:	687b      	ldr	r3, [r7, #4]
 800e506:	681b      	ldr	r3, [r3, #0]
 800e508:	68fa      	ldr	r2, [r7, #12]
 800e50a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800e50c:	687b      	ldr	r3, [r7, #4]
 800e50e:	2220      	movs	r2, #32
 800e510:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800e514:	687b      	ldr	r3, [r7, #4]
 800e516:	2200      	movs	r2, #0
 800e518:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800e51c:	2300      	movs	r3, #0
}
 800e51e:	4618      	mov	r0, r3
 800e520:	3710      	adds	r7, #16
 800e522:	46bd      	mov	sp, r7
 800e524:	bd80      	pop	{r7, pc}
	...

0800e528 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800e528:	b480      	push	{r7}
 800e52a:	b085      	sub	sp, #20
 800e52c:	af00      	add	r7, sp, #0
 800e52e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800e530:	687b      	ldr	r3, [r7, #4]
 800e532:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e534:	2b00      	cmp	r3, #0
 800e536:	d108      	bne.n	800e54a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800e538:	687b      	ldr	r3, [r7, #4]
 800e53a:	2201      	movs	r2, #1
 800e53c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800e540:	687b      	ldr	r3, [r7, #4]
 800e542:	2201      	movs	r2, #1
 800e544:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800e548:	e031      	b.n	800e5ae <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800e54a:	2310      	movs	r3, #16
 800e54c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800e54e:	2310      	movs	r3, #16
 800e550:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800e552:	687b      	ldr	r3, [r7, #4]
 800e554:	681b      	ldr	r3, [r3, #0]
 800e556:	689b      	ldr	r3, [r3, #8]
 800e558:	0e5b      	lsrs	r3, r3, #25
 800e55a:	b2db      	uxtb	r3, r3
 800e55c:	f003 0307 	and.w	r3, r3, #7
 800e560:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800e562:	687b      	ldr	r3, [r7, #4]
 800e564:	681b      	ldr	r3, [r3, #0]
 800e566:	689b      	ldr	r3, [r3, #8]
 800e568:	0f5b      	lsrs	r3, r3, #29
 800e56a:	b2db      	uxtb	r3, r3
 800e56c:	f003 0307 	and.w	r3, r3, #7
 800e570:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800e572:	7bbb      	ldrb	r3, [r7, #14]
 800e574:	7b3a      	ldrb	r2, [r7, #12]
 800e576:	4911      	ldr	r1, [pc, #68]	; (800e5bc <UARTEx_SetNbDataToProcess+0x94>)
 800e578:	5c8a      	ldrb	r2, [r1, r2]
 800e57a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800e57e:	7b3a      	ldrb	r2, [r7, #12]
 800e580:	490f      	ldr	r1, [pc, #60]	; (800e5c0 <UARTEx_SetNbDataToProcess+0x98>)
 800e582:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800e584:	fb93 f3f2 	sdiv	r3, r3, r2
 800e588:	b29a      	uxth	r2, r3
 800e58a:	687b      	ldr	r3, [r7, #4]
 800e58c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800e590:	7bfb      	ldrb	r3, [r7, #15]
 800e592:	7b7a      	ldrb	r2, [r7, #13]
 800e594:	4909      	ldr	r1, [pc, #36]	; (800e5bc <UARTEx_SetNbDataToProcess+0x94>)
 800e596:	5c8a      	ldrb	r2, [r1, r2]
 800e598:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800e59c:	7b7a      	ldrb	r2, [r7, #13]
 800e59e:	4908      	ldr	r1, [pc, #32]	; (800e5c0 <UARTEx_SetNbDataToProcess+0x98>)
 800e5a0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800e5a2:	fb93 f3f2 	sdiv	r3, r3, r2
 800e5a6:	b29a      	uxth	r2, r3
 800e5a8:	687b      	ldr	r3, [r7, #4]
 800e5aa:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800e5ae:	bf00      	nop
 800e5b0:	3714      	adds	r7, #20
 800e5b2:	46bd      	mov	sp, r7
 800e5b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5b8:	4770      	bx	lr
 800e5ba:	bf00      	nop
 800e5bc:	080122b4 	.word	0x080122b4
 800e5c0:	080122bc 	.word	0x080122bc

0800e5c4 <__errno>:
 800e5c4:	4b01      	ldr	r3, [pc, #4]	; (800e5cc <__errno+0x8>)
 800e5c6:	6818      	ldr	r0, [r3, #0]
 800e5c8:	4770      	bx	lr
 800e5ca:	bf00      	nop
 800e5cc:	24000090 	.word	0x24000090

0800e5d0 <_fclose_r>:
 800e5d0:	b570      	push	{r4, r5, r6, lr}
 800e5d2:	4605      	mov	r5, r0
 800e5d4:	460c      	mov	r4, r1
 800e5d6:	b911      	cbnz	r1, 800e5de <_fclose_r+0xe>
 800e5d8:	2600      	movs	r6, #0
 800e5da:	4630      	mov	r0, r6
 800e5dc:	bd70      	pop	{r4, r5, r6, pc}
 800e5de:	b118      	cbz	r0, 800e5e8 <_fclose_r+0x18>
 800e5e0:	6983      	ldr	r3, [r0, #24]
 800e5e2:	b90b      	cbnz	r3, 800e5e8 <_fclose_r+0x18>
 800e5e4:	f000 fa18 	bl	800ea18 <__sinit>
 800e5e8:	4b2c      	ldr	r3, [pc, #176]	; (800e69c <_fclose_r+0xcc>)
 800e5ea:	429c      	cmp	r4, r3
 800e5ec:	d114      	bne.n	800e618 <_fclose_r+0x48>
 800e5ee:	686c      	ldr	r4, [r5, #4]
 800e5f0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e5f2:	07d8      	lsls	r0, r3, #31
 800e5f4:	d405      	bmi.n	800e602 <_fclose_r+0x32>
 800e5f6:	89a3      	ldrh	r3, [r4, #12]
 800e5f8:	0599      	lsls	r1, r3, #22
 800e5fa:	d402      	bmi.n	800e602 <_fclose_r+0x32>
 800e5fc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e5fe:	f000 fbfd 	bl	800edfc <__retarget_lock_acquire_recursive>
 800e602:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e606:	b98b      	cbnz	r3, 800e62c <_fclose_r+0x5c>
 800e608:	6e66      	ldr	r6, [r4, #100]	; 0x64
 800e60a:	f016 0601 	ands.w	r6, r6, #1
 800e60e:	d1e3      	bne.n	800e5d8 <_fclose_r+0x8>
 800e610:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e612:	f000 fbf4 	bl	800edfe <__retarget_lock_release_recursive>
 800e616:	e7e0      	b.n	800e5da <_fclose_r+0xa>
 800e618:	4b21      	ldr	r3, [pc, #132]	; (800e6a0 <_fclose_r+0xd0>)
 800e61a:	429c      	cmp	r4, r3
 800e61c:	d101      	bne.n	800e622 <_fclose_r+0x52>
 800e61e:	68ac      	ldr	r4, [r5, #8]
 800e620:	e7e6      	b.n	800e5f0 <_fclose_r+0x20>
 800e622:	4b20      	ldr	r3, [pc, #128]	; (800e6a4 <_fclose_r+0xd4>)
 800e624:	429c      	cmp	r4, r3
 800e626:	bf08      	it	eq
 800e628:	68ec      	ldreq	r4, [r5, #12]
 800e62a:	e7e1      	b.n	800e5f0 <_fclose_r+0x20>
 800e62c:	4621      	mov	r1, r4
 800e62e:	4628      	mov	r0, r5
 800e630:	f000 f842 	bl	800e6b8 <__sflush_r>
 800e634:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800e636:	4606      	mov	r6, r0
 800e638:	b133      	cbz	r3, 800e648 <_fclose_r+0x78>
 800e63a:	6a21      	ldr	r1, [r4, #32]
 800e63c:	4628      	mov	r0, r5
 800e63e:	4798      	blx	r3
 800e640:	2800      	cmp	r0, #0
 800e642:	bfb8      	it	lt
 800e644:	f04f 36ff 	movlt.w	r6, #4294967295
 800e648:	89a3      	ldrh	r3, [r4, #12]
 800e64a:	061a      	lsls	r2, r3, #24
 800e64c:	d503      	bpl.n	800e656 <_fclose_r+0x86>
 800e64e:	6921      	ldr	r1, [r4, #16]
 800e650:	4628      	mov	r0, r5
 800e652:	f000 fc51 	bl	800eef8 <_free_r>
 800e656:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e658:	b141      	cbz	r1, 800e66c <_fclose_r+0x9c>
 800e65a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e65e:	4299      	cmp	r1, r3
 800e660:	d002      	beq.n	800e668 <_fclose_r+0x98>
 800e662:	4628      	mov	r0, r5
 800e664:	f000 fc48 	bl	800eef8 <_free_r>
 800e668:	2300      	movs	r3, #0
 800e66a:	6363      	str	r3, [r4, #52]	; 0x34
 800e66c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800e66e:	b121      	cbz	r1, 800e67a <_fclose_r+0xaa>
 800e670:	4628      	mov	r0, r5
 800e672:	f000 fc41 	bl	800eef8 <_free_r>
 800e676:	2300      	movs	r3, #0
 800e678:	64a3      	str	r3, [r4, #72]	; 0x48
 800e67a:	f000 f9b5 	bl	800e9e8 <__sfp_lock_acquire>
 800e67e:	2300      	movs	r3, #0
 800e680:	81a3      	strh	r3, [r4, #12]
 800e682:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e684:	07db      	lsls	r3, r3, #31
 800e686:	d402      	bmi.n	800e68e <_fclose_r+0xbe>
 800e688:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e68a:	f000 fbb8 	bl	800edfe <__retarget_lock_release_recursive>
 800e68e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e690:	f000 fbb3 	bl	800edfa <__retarget_lock_close_recursive>
 800e694:	f000 f9ae 	bl	800e9f4 <__sfp_lock_release>
 800e698:	e79f      	b.n	800e5da <_fclose_r+0xa>
 800e69a:	bf00      	nop
 800e69c:	080122e4 	.word	0x080122e4
 800e6a0:	08012304 	.word	0x08012304
 800e6a4:	080122c4 	.word	0x080122c4

0800e6a8 <fclose>:
 800e6a8:	4b02      	ldr	r3, [pc, #8]	; (800e6b4 <fclose+0xc>)
 800e6aa:	4601      	mov	r1, r0
 800e6ac:	6818      	ldr	r0, [r3, #0]
 800e6ae:	f7ff bf8f 	b.w	800e5d0 <_fclose_r>
 800e6b2:	bf00      	nop
 800e6b4:	24000090 	.word	0x24000090

0800e6b8 <__sflush_r>:
 800e6b8:	898a      	ldrh	r2, [r1, #12]
 800e6ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e6be:	4605      	mov	r5, r0
 800e6c0:	0710      	lsls	r0, r2, #28
 800e6c2:	460c      	mov	r4, r1
 800e6c4:	d458      	bmi.n	800e778 <__sflush_r+0xc0>
 800e6c6:	684b      	ldr	r3, [r1, #4]
 800e6c8:	2b00      	cmp	r3, #0
 800e6ca:	dc05      	bgt.n	800e6d8 <__sflush_r+0x20>
 800e6cc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800e6ce:	2b00      	cmp	r3, #0
 800e6d0:	dc02      	bgt.n	800e6d8 <__sflush_r+0x20>
 800e6d2:	2000      	movs	r0, #0
 800e6d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e6d8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e6da:	2e00      	cmp	r6, #0
 800e6dc:	d0f9      	beq.n	800e6d2 <__sflush_r+0x1a>
 800e6de:	2300      	movs	r3, #0
 800e6e0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800e6e4:	682f      	ldr	r7, [r5, #0]
 800e6e6:	602b      	str	r3, [r5, #0]
 800e6e8:	d032      	beq.n	800e750 <__sflush_r+0x98>
 800e6ea:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800e6ec:	89a3      	ldrh	r3, [r4, #12]
 800e6ee:	075a      	lsls	r2, r3, #29
 800e6f0:	d505      	bpl.n	800e6fe <__sflush_r+0x46>
 800e6f2:	6863      	ldr	r3, [r4, #4]
 800e6f4:	1ac0      	subs	r0, r0, r3
 800e6f6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800e6f8:	b10b      	cbz	r3, 800e6fe <__sflush_r+0x46>
 800e6fa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800e6fc:	1ac0      	subs	r0, r0, r3
 800e6fe:	2300      	movs	r3, #0
 800e700:	4602      	mov	r2, r0
 800e702:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e704:	6a21      	ldr	r1, [r4, #32]
 800e706:	4628      	mov	r0, r5
 800e708:	47b0      	blx	r6
 800e70a:	1c43      	adds	r3, r0, #1
 800e70c:	89a3      	ldrh	r3, [r4, #12]
 800e70e:	d106      	bne.n	800e71e <__sflush_r+0x66>
 800e710:	6829      	ldr	r1, [r5, #0]
 800e712:	291d      	cmp	r1, #29
 800e714:	d82c      	bhi.n	800e770 <__sflush_r+0xb8>
 800e716:	4a2a      	ldr	r2, [pc, #168]	; (800e7c0 <__sflush_r+0x108>)
 800e718:	40ca      	lsrs	r2, r1
 800e71a:	07d6      	lsls	r6, r2, #31
 800e71c:	d528      	bpl.n	800e770 <__sflush_r+0xb8>
 800e71e:	2200      	movs	r2, #0
 800e720:	6062      	str	r2, [r4, #4]
 800e722:	04d9      	lsls	r1, r3, #19
 800e724:	6922      	ldr	r2, [r4, #16]
 800e726:	6022      	str	r2, [r4, #0]
 800e728:	d504      	bpl.n	800e734 <__sflush_r+0x7c>
 800e72a:	1c42      	adds	r2, r0, #1
 800e72c:	d101      	bne.n	800e732 <__sflush_r+0x7a>
 800e72e:	682b      	ldr	r3, [r5, #0]
 800e730:	b903      	cbnz	r3, 800e734 <__sflush_r+0x7c>
 800e732:	6560      	str	r0, [r4, #84]	; 0x54
 800e734:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e736:	602f      	str	r7, [r5, #0]
 800e738:	2900      	cmp	r1, #0
 800e73a:	d0ca      	beq.n	800e6d2 <__sflush_r+0x1a>
 800e73c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e740:	4299      	cmp	r1, r3
 800e742:	d002      	beq.n	800e74a <__sflush_r+0x92>
 800e744:	4628      	mov	r0, r5
 800e746:	f000 fbd7 	bl	800eef8 <_free_r>
 800e74a:	2000      	movs	r0, #0
 800e74c:	6360      	str	r0, [r4, #52]	; 0x34
 800e74e:	e7c1      	b.n	800e6d4 <__sflush_r+0x1c>
 800e750:	6a21      	ldr	r1, [r4, #32]
 800e752:	2301      	movs	r3, #1
 800e754:	4628      	mov	r0, r5
 800e756:	47b0      	blx	r6
 800e758:	1c41      	adds	r1, r0, #1
 800e75a:	d1c7      	bne.n	800e6ec <__sflush_r+0x34>
 800e75c:	682b      	ldr	r3, [r5, #0]
 800e75e:	2b00      	cmp	r3, #0
 800e760:	d0c4      	beq.n	800e6ec <__sflush_r+0x34>
 800e762:	2b1d      	cmp	r3, #29
 800e764:	d001      	beq.n	800e76a <__sflush_r+0xb2>
 800e766:	2b16      	cmp	r3, #22
 800e768:	d101      	bne.n	800e76e <__sflush_r+0xb6>
 800e76a:	602f      	str	r7, [r5, #0]
 800e76c:	e7b1      	b.n	800e6d2 <__sflush_r+0x1a>
 800e76e:	89a3      	ldrh	r3, [r4, #12]
 800e770:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e774:	81a3      	strh	r3, [r4, #12]
 800e776:	e7ad      	b.n	800e6d4 <__sflush_r+0x1c>
 800e778:	690f      	ldr	r7, [r1, #16]
 800e77a:	2f00      	cmp	r7, #0
 800e77c:	d0a9      	beq.n	800e6d2 <__sflush_r+0x1a>
 800e77e:	0793      	lsls	r3, r2, #30
 800e780:	680e      	ldr	r6, [r1, #0]
 800e782:	bf08      	it	eq
 800e784:	694b      	ldreq	r3, [r1, #20]
 800e786:	600f      	str	r7, [r1, #0]
 800e788:	bf18      	it	ne
 800e78a:	2300      	movne	r3, #0
 800e78c:	eba6 0807 	sub.w	r8, r6, r7
 800e790:	608b      	str	r3, [r1, #8]
 800e792:	f1b8 0f00 	cmp.w	r8, #0
 800e796:	dd9c      	ble.n	800e6d2 <__sflush_r+0x1a>
 800e798:	6a21      	ldr	r1, [r4, #32]
 800e79a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800e79c:	4643      	mov	r3, r8
 800e79e:	463a      	mov	r2, r7
 800e7a0:	4628      	mov	r0, r5
 800e7a2:	47b0      	blx	r6
 800e7a4:	2800      	cmp	r0, #0
 800e7a6:	dc06      	bgt.n	800e7b6 <__sflush_r+0xfe>
 800e7a8:	89a3      	ldrh	r3, [r4, #12]
 800e7aa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e7ae:	81a3      	strh	r3, [r4, #12]
 800e7b0:	f04f 30ff 	mov.w	r0, #4294967295
 800e7b4:	e78e      	b.n	800e6d4 <__sflush_r+0x1c>
 800e7b6:	4407      	add	r7, r0
 800e7b8:	eba8 0800 	sub.w	r8, r8, r0
 800e7bc:	e7e9      	b.n	800e792 <__sflush_r+0xda>
 800e7be:	bf00      	nop
 800e7c0:	20400001 	.word	0x20400001

0800e7c4 <_fflush_r>:
 800e7c4:	b538      	push	{r3, r4, r5, lr}
 800e7c6:	690b      	ldr	r3, [r1, #16]
 800e7c8:	4605      	mov	r5, r0
 800e7ca:	460c      	mov	r4, r1
 800e7cc:	b913      	cbnz	r3, 800e7d4 <_fflush_r+0x10>
 800e7ce:	2500      	movs	r5, #0
 800e7d0:	4628      	mov	r0, r5
 800e7d2:	bd38      	pop	{r3, r4, r5, pc}
 800e7d4:	b118      	cbz	r0, 800e7de <_fflush_r+0x1a>
 800e7d6:	6983      	ldr	r3, [r0, #24]
 800e7d8:	b90b      	cbnz	r3, 800e7de <_fflush_r+0x1a>
 800e7da:	f000 f91d 	bl	800ea18 <__sinit>
 800e7de:	4b14      	ldr	r3, [pc, #80]	; (800e830 <_fflush_r+0x6c>)
 800e7e0:	429c      	cmp	r4, r3
 800e7e2:	d11b      	bne.n	800e81c <_fflush_r+0x58>
 800e7e4:	686c      	ldr	r4, [r5, #4]
 800e7e6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e7ea:	2b00      	cmp	r3, #0
 800e7ec:	d0ef      	beq.n	800e7ce <_fflush_r+0xa>
 800e7ee:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800e7f0:	07d0      	lsls	r0, r2, #31
 800e7f2:	d404      	bmi.n	800e7fe <_fflush_r+0x3a>
 800e7f4:	0599      	lsls	r1, r3, #22
 800e7f6:	d402      	bmi.n	800e7fe <_fflush_r+0x3a>
 800e7f8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e7fa:	f000 faff 	bl	800edfc <__retarget_lock_acquire_recursive>
 800e7fe:	4628      	mov	r0, r5
 800e800:	4621      	mov	r1, r4
 800e802:	f7ff ff59 	bl	800e6b8 <__sflush_r>
 800e806:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e808:	07da      	lsls	r2, r3, #31
 800e80a:	4605      	mov	r5, r0
 800e80c:	d4e0      	bmi.n	800e7d0 <_fflush_r+0xc>
 800e80e:	89a3      	ldrh	r3, [r4, #12]
 800e810:	059b      	lsls	r3, r3, #22
 800e812:	d4dd      	bmi.n	800e7d0 <_fflush_r+0xc>
 800e814:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e816:	f000 faf2 	bl	800edfe <__retarget_lock_release_recursive>
 800e81a:	e7d9      	b.n	800e7d0 <_fflush_r+0xc>
 800e81c:	4b05      	ldr	r3, [pc, #20]	; (800e834 <_fflush_r+0x70>)
 800e81e:	429c      	cmp	r4, r3
 800e820:	d101      	bne.n	800e826 <_fflush_r+0x62>
 800e822:	68ac      	ldr	r4, [r5, #8]
 800e824:	e7df      	b.n	800e7e6 <_fflush_r+0x22>
 800e826:	4b04      	ldr	r3, [pc, #16]	; (800e838 <_fflush_r+0x74>)
 800e828:	429c      	cmp	r4, r3
 800e82a:	bf08      	it	eq
 800e82c:	68ec      	ldreq	r4, [r5, #12]
 800e82e:	e7da      	b.n	800e7e6 <_fflush_r+0x22>
 800e830:	080122e4 	.word	0x080122e4
 800e834:	08012304 	.word	0x08012304
 800e838:	080122c4 	.word	0x080122c4

0800e83c <fflush>:
 800e83c:	4601      	mov	r1, r0
 800e83e:	b920      	cbnz	r0, 800e84a <fflush+0xe>
 800e840:	4b04      	ldr	r3, [pc, #16]	; (800e854 <fflush+0x18>)
 800e842:	4905      	ldr	r1, [pc, #20]	; (800e858 <fflush+0x1c>)
 800e844:	6818      	ldr	r0, [r3, #0]
 800e846:	f000 ba94 	b.w	800ed72 <_fwalk_reent>
 800e84a:	4b04      	ldr	r3, [pc, #16]	; (800e85c <fflush+0x20>)
 800e84c:	6818      	ldr	r0, [r3, #0]
 800e84e:	f7ff bfb9 	b.w	800e7c4 <_fflush_r>
 800e852:	bf00      	nop
 800e854:	08012324 	.word	0x08012324
 800e858:	0800e7c5 	.word	0x0800e7c5
 800e85c:	24000090 	.word	0x24000090

0800e860 <_fgets_r>:
 800e860:	2a01      	cmp	r2, #1
 800e862:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e866:	4680      	mov	r8, r0
 800e868:	460d      	mov	r5, r1
 800e86a:	4617      	mov	r7, r2
 800e86c:	461c      	mov	r4, r3
 800e86e:	dc03      	bgt.n	800e878 <_fgets_r+0x18>
 800e870:	2500      	movs	r5, #0
 800e872:	4628      	mov	r0, r5
 800e874:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e878:	b118      	cbz	r0, 800e882 <_fgets_r+0x22>
 800e87a:	6983      	ldr	r3, [r0, #24]
 800e87c:	b90b      	cbnz	r3, 800e882 <_fgets_r+0x22>
 800e87e:	f000 f8cb 	bl	800ea18 <__sinit>
 800e882:	4b31      	ldr	r3, [pc, #196]	; (800e948 <_fgets_r+0xe8>)
 800e884:	429c      	cmp	r4, r3
 800e886:	d120      	bne.n	800e8ca <_fgets_r+0x6a>
 800e888:	f8d8 4004 	ldr.w	r4, [r8, #4]
 800e88c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e88e:	07de      	lsls	r6, r3, #31
 800e890:	d405      	bmi.n	800e89e <_fgets_r+0x3e>
 800e892:	89a3      	ldrh	r3, [r4, #12]
 800e894:	0598      	lsls	r0, r3, #22
 800e896:	d402      	bmi.n	800e89e <_fgets_r+0x3e>
 800e898:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e89a:	f000 faaf 	bl	800edfc <__retarget_lock_acquire_recursive>
 800e89e:	3f01      	subs	r7, #1
 800e8a0:	46a9      	mov	r9, r5
 800e8a2:	6866      	ldr	r6, [r4, #4]
 800e8a4:	b9f6      	cbnz	r6, 800e8e4 <_fgets_r+0x84>
 800e8a6:	4621      	mov	r1, r4
 800e8a8:	4640      	mov	r0, r8
 800e8aa:	f000 fc21 	bl	800f0f0 <__srefill_r>
 800e8ae:	b1c0      	cbz	r0, 800e8e2 <_fgets_r+0x82>
 800e8b0:	45a9      	cmp	r9, r5
 800e8b2:	d145      	bne.n	800e940 <_fgets_r+0xe0>
 800e8b4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e8b6:	07d9      	lsls	r1, r3, #31
 800e8b8:	d4da      	bmi.n	800e870 <_fgets_r+0x10>
 800e8ba:	89a5      	ldrh	r5, [r4, #12]
 800e8bc:	f415 7500 	ands.w	r5, r5, #512	; 0x200
 800e8c0:	d1d6      	bne.n	800e870 <_fgets_r+0x10>
 800e8c2:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e8c4:	f000 fa9b 	bl	800edfe <__retarget_lock_release_recursive>
 800e8c8:	e7d3      	b.n	800e872 <_fgets_r+0x12>
 800e8ca:	4b20      	ldr	r3, [pc, #128]	; (800e94c <_fgets_r+0xec>)
 800e8cc:	429c      	cmp	r4, r3
 800e8ce:	d102      	bne.n	800e8d6 <_fgets_r+0x76>
 800e8d0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800e8d4:	e7da      	b.n	800e88c <_fgets_r+0x2c>
 800e8d6:	4b1e      	ldr	r3, [pc, #120]	; (800e950 <_fgets_r+0xf0>)
 800e8d8:	429c      	cmp	r4, r3
 800e8da:	bf08      	it	eq
 800e8dc:	f8d8 400c 	ldreq.w	r4, [r8, #12]
 800e8e0:	e7d4      	b.n	800e88c <_fgets_r+0x2c>
 800e8e2:	6866      	ldr	r6, [r4, #4]
 800e8e4:	f8d4 a000 	ldr.w	sl, [r4]
 800e8e8:	42be      	cmp	r6, r7
 800e8ea:	bf28      	it	cs
 800e8ec:	463e      	movcs	r6, r7
 800e8ee:	4632      	mov	r2, r6
 800e8f0:	210a      	movs	r1, #10
 800e8f2:	4650      	mov	r0, sl
 800e8f4:	f7f1 fcf4 	bl	80002e0 <memchr>
 800e8f8:	6863      	ldr	r3, [r4, #4]
 800e8fa:	b1a0      	cbz	r0, 800e926 <_fgets_r+0xc6>
 800e8fc:	3001      	adds	r0, #1
 800e8fe:	eba0 060a 	sub.w	r6, r0, sl
 800e902:	1b9b      	subs	r3, r3, r6
 800e904:	e9c4 0300 	strd	r0, r3, [r4]
 800e908:	4632      	mov	r2, r6
 800e90a:	4651      	mov	r1, sl
 800e90c:	4648      	mov	r0, r9
 800e90e:	f000 fadd 	bl	800eecc <memcpy>
 800e912:	2300      	movs	r3, #0
 800e914:	f809 3006 	strb.w	r3, [r9, r6]
 800e918:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e91a:	07da      	lsls	r2, r3, #31
 800e91c:	d4a9      	bmi.n	800e872 <_fgets_r+0x12>
 800e91e:	89a3      	ldrh	r3, [r4, #12]
 800e920:	059b      	lsls	r3, r3, #22
 800e922:	d4a6      	bmi.n	800e872 <_fgets_r+0x12>
 800e924:	e7cd      	b.n	800e8c2 <_fgets_r+0x62>
 800e926:	1b9b      	subs	r3, r3, r6
 800e928:	6063      	str	r3, [r4, #4]
 800e92a:	6823      	ldr	r3, [r4, #0]
 800e92c:	4433      	add	r3, r6
 800e92e:	4648      	mov	r0, r9
 800e930:	6023      	str	r3, [r4, #0]
 800e932:	4632      	mov	r2, r6
 800e934:	4651      	mov	r1, sl
 800e936:	f000 fac9 	bl	800eecc <memcpy>
 800e93a:	1bbf      	subs	r7, r7, r6
 800e93c:	44b1      	add	r9, r6
 800e93e:	d1b0      	bne.n	800e8a2 <_fgets_r+0x42>
 800e940:	2300      	movs	r3, #0
 800e942:	f889 3000 	strb.w	r3, [r9]
 800e946:	e7e7      	b.n	800e918 <_fgets_r+0xb8>
 800e948:	080122e4 	.word	0x080122e4
 800e94c:	08012304 	.word	0x08012304
 800e950:	080122c4 	.word	0x080122c4

0800e954 <fgets>:
 800e954:	4613      	mov	r3, r2
 800e956:	460a      	mov	r2, r1
 800e958:	4601      	mov	r1, r0
 800e95a:	4802      	ldr	r0, [pc, #8]	; (800e964 <fgets+0x10>)
 800e95c:	6800      	ldr	r0, [r0, #0]
 800e95e:	f7ff bf7f 	b.w	800e860 <_fgets_r>
 800e962:	bf00      	nop
 800e964:	24000090 	.word	0x24000090

0800e968 <std>:
 800e968:	2300      	movs	r3, #0
 800e96a:	b510      	push	{r4, lr}
 800e96c:	4604      	mov	r4, r0
 800e96e:	e9c0 3300 	strd	r3, r3, [r0]
 800e972:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800e976:	6083      	str	r3, [r0, #8]
 800e978:	8181      	strh	r1, [r0, #12]
 800e97a:	6643      	str	r3, [r0, #100]	; 0x64
 800e97c:	81c2      	strh	r2, [r0, #14]
 800e97e:	6183      	str	r3, [r0, #24]
 800e980:	4619      	mov	r1, r3
 800e982:	2208      	movs	r2, #8
 800e984:	305c      	adds	r0, #92	; 0x5c
 800e986:	f000 faaf 	bl	800eee8 <memset>
 800e98a:	4b05      	ldr	r3, [pc, #20]	; (800e9a0 <std+0x38>)
 800e98c:	6263      	str	r3, [r4, #36]	; 0x24
 800e98e:	4b05      	ldr	r3, [pc, #20]	; (800e9a4 <std+0x3c>)
 800e990:	62a3      	str	r3, [r4, #40]	; 0x28
 800e992:	4b05      	ldr	r3, [pc, #20]	; (800e9a8 <std+0x40>)
 800e994:	62e3      	str	r3, [r4, #44]	; 0x2c
 800e996:	4b05      	ldr	r3, [pc, #20]	; (800e9ac <std+0x44>)
 800e998:	6224      	str	r4, [r4, #32]
 800e99a:	6323      	str	r3, [r4, #48]	; 0x30
 800e99c:	bd10      	pop	{r4, pc}
 800e99e:	bf00      	nop
 800e9a0:	0800f225 	.word	0x0800f225
 800e9a4:	0800f247 	.word	0x0800f247
 800e9a8:	0800f27f 	.word	0x0800f27f
 800e9ac:	0800f2a3 	.word	0x0800f2a3

0800e9b0 <_cleanup_r>:
 800e9b0:	4901      	ldr	r1, [pc, #4]	; (800e9b8 <_cleanup_r+0x8>)
 800e9b2:	f000 b9de 	b.w	800ed72 <_fwalk_reent>
 800e9b6:	bf00      	nop
 800e9b8:	0800e7c5 	.word	0x0800e7c5

0800e9bc <__sfmoreglue>:
 800e9bc:	b570      	push	{r4, r5, r6, lr}
 800e9be:	2268      	movs	r2, #104	; 0x68
 800e9c0:	1e4d      	subs	r5, r1, #1
 800e9c2:	4355      	muls	r5, r2
 800e9c4:	460e      	mov	r6, r1
 800e9c6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800e9ca:	f000 fb01 	bl	800efd0 <_malloc_r>
 800e9ce:	4604      	mov	r4, r0
 800e9d0:	b140      	cbz	r0, 800e9e4 <__sfmoreglue+0x28>
 800e9d2:	2100      	movs	r1, #0
 800e9d4:	e9c0 1600 	strd	r1, r6, [r0]
 800e9d8:	300c      	adds	r0, #12
 800e9da:	60a0      	str	r0, [r4, #8]
 800e9dc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800e9e0:	f000 fa82 	bl	800eee8 <memset>
 800e9e4:	4620      	mov	r0, r4
 800e9e6:	bd70      	pop	{r4, r5, r6, pc}

0800e9e8 <__sfp_lock_acquire>:
 800e9e8:	4801      	ldr	r0, [pc, #4]	; (800e9f0 <__sfp_lock_acquire+0x8>)
 800e9ea:	f000 ba07 	b.w	800edfc <__retarget_lock_acquire_recursive>
 800e9ee:	bf00      	nop
 800e9f0:	24000a9d 	.word	0x24000a9d

0800e9f4 <__sfp_lock_release>:
 800e9f4:	4801      	ldr	r0, [pc, #4]	; (800e9fc <__sfp_lock_release+0x8>)
 800e9f6:	f000 ba02 	b.w	800edfe <__retarget_lock_release_recursive>
 800e9fa:	bf00      	nop
 800e9fc:	24000a9d 	.word	0x24000a9d

0800ea00 <__sinit_lock_acquire>:
 800ea00:	4801      	ldr	r0, [pc, #4]	; (800ea08 <__sinit_lock_acquire+0x8>)
 800ea02:	f000 b9fb 	b.w	800edfc <__retarget_lock_acquire_recursive>
 800ea06:	bf00      	nop
 800ea08:	24000a9e 	.word	0x24000a9e

0800ea0c <__sinit_lock_release>:
 800ea0c:	4801      	ldr	r0, [pc, #4]	; (800ea14 <__sinit_lock_release+0x8>)
 800ea0e:	f000 b9f6 	b.w	800edfe <__retarget_lock_release_recursive>
 800ea12:	bf00      	nop
 800ea14:	24000a9e 	.word	0x24000a9e

0800ea18 <__sinit>:
 800ea18:	b510      	push	{r4, lr}
 800ea1a:	4604      	mov	r4, r0
 800ea1c:	f7ff fff0 	bl	800ea00 <__sinit_lock_acquire>
 800ea20:	69a3      	ldr	r3, [r4, #24]
 800ea22:	b11b      	cbz	r3, 800ea2c <__sinit+0x14>
 800ea24:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ea28:	f7ff bff0 	b.w	800ea0c <__sinit_lock_release>
 800ea2c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800ea30:	6523      	str	r3, [r4, #80]	; 0x50
 800ea32:	4b13      	ldr	r3, [pc, #76]	; (800ea80 <__sinit+0x68>)
 800ea34:	4a13      	ldr	r2, [pc, #76]	; (800ea84 <__sinit+0x6c>)
 800ea36:	681b      	ldr	r3, [r3, #0]
 800ea38:	62a2      	str	r2, [r4, #40]	; 0x28
 800ea3a:	42a3      	cmp	r3, r4
 800ea3c:	bf04      	itt	eq
 800ea3e:	2301      	moveq	r3, #1
 800ea40:	61a3      	streq	r3, [r4, #24]
 800ea42:	4620      	mov	r0, r4
 800ea44:	f000 f820 	bl	800ea88 <__sfp>
 800ea48:	6060      	str	r0, [r4, #4]
 800ea4a:	4620      	mov	r0, r4
 800ea4c:	f000 f81c 	bl	800ea88 <__sfp>
 800ea50:	60a0      	str	r0, [r4, #8]
 800ea52:	4620      	mov	r0, r4
 800ea54:	f000 f818 	bl	800ea88 <__sfp>
 800ea58:	2200      	movs	r2, #0
 800ea5a:	60e0      	str	r0, [r4, #12]
 800ea5c:	2104      	movs	r1, #4
 800ea5e:	6860      	ldr	r0, [r4, #4]
 800ea60:	f7ff ff82 	bl	800e968 <std>
 800ea64:	68a0      	ldr	r0, [r4, #8]
 800ea66:	2201      	movs	r2, #1
 800ea68:	2109      	movs	r1, #9
 800ea6a:	f7ff ff7d 	bl	800e968 <std>
 800ea6e:	68e0      	ldr	r0, [r4, #12]
 800ea70:	2202      	movs	r2, #2
 800ea72:	2112      	movs	r1, #18
 800ea74:	f7ff ff78 	bl	800e968 <std>
 800ea78:	2301      	movs	r3, #1
 800ea7a:	61a3      	str	r3, [r4, #24]
 800ea7c:	e7d2      	b.n	800ea24 <__sinit+0xc>
 800ea7e:	bf00      	nop
 800ea80:	08012324 	.word	0x08012324
 800ea84:	0800e9b1 	.word	0x0800e9b1

0800ea88 <__sfp>:
 800ea88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ea8a:	4607      	mov	r7, r0
 800ea8c:	f7ff ffac 	bl	800e9e8 <__sfp_lock_acquire>
 800ea90:	4b1e      	ldr	r3, [pc, #120]	; (800eb0c <__sfp+0x84>)
 800ea92:	681e      	ldr	r6, [r3, #0]
 800ea94:	69b3      	ldr	r3, [r6, #24]
 800ea96:	b913      	cbnz	r3, 800ea9e <__sfp+0x16>
 800ea98:	4630      	mov	r0, r6
 800ea9a:	f7ff ffbd 	bl	800ea18 <__sinit>
 800ea9e:	3648      	adds	r6, #72	; 0x48
 800eaa0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800eaa4:	3b01      	subs	r3, #1
 800eaa6:	d503      	bpl.n	800eab0 <__sfp+0x28>
 800eaa8:	6833      	ldr	r3, [r6, #0]
 800eaaa:	b30b      	cbz	r3, 800eaf0 <__sfp+0x68>
 800eaac:	6836      	ldr	r6, [r6, #0]
 800eaae:	e7f7      	b.n	800eaa0 <__sfp+0x18>
 800eab0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800eab4:	b9d5      	cbnz	r5, 800eaec <__sfp+0x64>
 800eab6:	4b16      	ldr	r3, [pc, #88]	; (800eb10 <__sfp+0x88>)
 800eab8:	60e3      	str	r3, [r4, #12]
 800eaba:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800eabe:	6665      	str	r5, [r4, #100]	; 0x64
 800eac0:	f000 f99a 	bl	800edf8 <__retarget_lock_init_recursive>
 800eac4:	f7ff ff96 	bl	800e9f4 <__sfp_lock_release>
 800eac8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800eacc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800ead0:	6025      	str	r5, [r4, #0]
 800ead2:	61a5      	str	r5, [r4, #24]
 800ead4:	2208      	movs	r2, #8
 800ead6:	4629      	mov	r1, r5
 800ead8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800eadc:	f000 fa04 	bl	800eee8 <memset>
 800eae0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800eae4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800eae8:	4620      	mov	r0, r4
 800eaea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800eaec:	3468      	adds	r4, #104	; 0x68
 800eaee:	e7d9      	b.n	800eaa4 <__sfp+0x1c>
 800eaf0:	2104      	movs	r1, #4
 800eaf2:	4638      	mov	r0, r7
 800eaf4:	f7ff ff62 	bl	800e9bc <__sfmoreglue>
 800eaf8:	4604      	mov	r4, r0
 800eafa:	6030      	str	r0, [r6, #0]
 800eafc:	2800      	cmp	r0, #0
 800eafe:	d1d5      	bne.n	800eaac <__sfp+0x24>
 800eb00:	f7ff ff78 	bl	800e9f4 <__sfp_lock_release>
 800eb04:	230c      	movs	r3, #12
 800eb06:	603b      	str	r3, [r7, #0]
 800eb08:	e7ee      	b.n	800eae8 <__sfp+0x60>
 800eb0a:	bf00      	nop
 800eb0c:	08012324 	.word	0x08012324
 800eb10:	ffff0001 	.word	0xffff0001

0800eb14 <_fopen_r>:
 800eb14:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800eb16:	460f      	mov	r7, r1
 800eb18:	4611      	mov	r1, r2
 800eb1a:	aa01      	add	r2, sp, #4
 800eb1c:	4605      	mov	r5, r0
 800eb1e:	f001 f9c3 	bl	800fea8 <__sflags>
 800eb22:	4606      	mov	r6, r0
 800eb24:	b918      	cbnz	r0, 800eb2e <_fopen_r+0x1a>
 800eb26:	2400      	movs	r4, #0
 800eb28:	4620      	mov	r0, r4
 800eb2a:	b003      	add	sp, #12
 800eb2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800eb2e:	4628      	mov	r0, r5
 800eb30:	f7ff ffaa 	bl	800ea88 <__sfp>
 800eb34:	4604      	mov	r4, r0
 800eb36:	2800      	cmp	r0, #0
 800eb38:	d0f5      	beq.n	800eb26 <_fopen_r+0x12>
 800eb3a:	4639      	mov	r1, r7
 800eb3c:	9a01      	ldr	r2, [sp, #4]
 800eb3e:	f44f 73db 	mov.w	r3, #438	; 0x1b6
 800eb42:	4628      	mov	r0, r5
 800eb44:	f000 fab8 	bl	800f0b8 <_open_r>
 800eb48:	1e07      	subs	r7, r0, #0
 800eb4a:	da09      	bge.n	800eb60 <_fopen_r+0x4c>
 800eb4c:	2500      	movs	r5, #0
 800eb4e:	f7ff ff4b 	bl	800e9e8 <__sfp_lock_acquire>
 800eb52:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800eb54:	81a5      	strh	r5, [r4, #12]
 800eb56:	f000 f950 	bl	800edfa <__retarget_lock_close_recursive>
 800eb5a:	f7ff ff4b 	bl	800e9f4 <__sfp_lock_release>
 800eb5e:	e7e2      	b.n	800eb26 <_fopen_r+0x12>
 800eb60:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800eb62:	07db      	lsls	r3, r3, #31
 800eb64:	d405      	bmi.n	800eb72 <_fopen_r+0x5e>
 800eb66:	89a3      	ldrh	r3, [r4, #12]
 800eb68:	0598      	lsls	r0, r3, #22
 800eb6a:	d402      	bmi.n	800eb72 <_fopen_r+0x5e>
 800eb6c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800eb6e:	f000 f945 	bl	800edfc <__retarget_lock_acquire_recursive>
 800eb72:	4b0e      	ldr	r3, [pc, #56]	; (800ebac <_fopen_r+0x98>)
 800eb74:	6263      	str	r3, [r4, #36]	; 0x24
 800eb76:	4b0e      	ldr	r3, [pc, #56]	; (800ebb0 <_fopen_r+0x9c>)
 800eb78:	62a3      	str	r3, [r4, #40]	; 0x28
 800eb7a:	4b0e      	ldr	r3, [pc, #56]	; (800ebb4 <_fopen_r+0xa0>)
 800eb7c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800eb7e:	05f1      	lsls	r1, r6, #23
 800eb80:	4b0d      	ldr	r3, [pc, #52]	; (800ebb8 <_fopen_r+0xa4>)
 800eb82:	81e7      	strh	r7, [r4, #14]
 800eb84:	81a6      	strh	r6, [r4, #12]
 800eb86:	6224      	str	r4, [r4, #32]
 800eb88:	6323      	str	r3, [r4, #48]	; 0x30
 800eb8a:	d505      	bpl.n	800eb98 <_fopen_r+0x84>
 800eb8c:	2302      	movs	r3, #2
 800eb8e:	2200      	movs	r2, #0
 800eb90:	4621      	mov	r1, r4
 800eb92:	4628      	mov	r0, r5
 800eb94:	f000 f81a 	bl	800ebcc <_fseek_r>
 800eb98:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800eb9a:	07da      	lsls	r2, r3, #31
 800eb9c:	d4c4      	bmi.n	800eb28 <_fopen_r+0x14>
 800eb9e:	89a3      	ldrh	r3, [r4, #12]
 800eba0:	059b      	lsls	r3, r3, #22
 800eba2:	d4c1      	bmi.n	800eb28 <_fopen_r+0x14>
 800eba4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800eba6:	f000 f92a 	bl	800edfe <__retarget_lock_release_recursive>
 800ebaa:	e7bd      	b.n	800eb28 <_fopen_r+0x14>
 800ebac:	0800f225 	.word	0x0800f225
 800ebb0:	0800f247 	.word	0x0800f247
 800ebb4:	0800f27f 	.word	0x0800f27f
 800ebb8:	0800f2a3 	.word	0x0800f2a3

0800ebbc <fopen>:
 800ebbc:	4b02      	ldr	r3, [pc, #8]	; (800ebc8 <fopen+0xc>)
 800ebbe:	460a      	mov	r2, r1
 800ebc0:	4601      	mov	r1, r0
 800ebc2:	6818      	ldr	r0, [r3, #0]
 800ebc4:	f7ff bfa6 	b.w	800eb14 <_fopen_r>
 800ebc8:	24000090 	.word	0x24000090

0800ebcc <_fseek_r>:
 800ebcc:	f000 b800 	b.w	800ebd0 <_fseeko_r>

0800ebd0 <_fseeko_r>:
 800ebd0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ebd4:	460c      	mov	r4, r1
 800ebd6:	4617      	mov	r7, r2
 800ebd8:	461d      	mov	r5, r3
 800ebda:	4606      	mov	r6, r0
 800ebdc:	b118      	cbz	r0, 800ebe6 <_fseeko_r+0x16>
 800ebde:	6983      	ldr	r3, [r0, #24]
 800ebe0:	b90b      	cbnz	r3, 800ebe6 <_fseeko_r+0x16>
 800ebe2:	f7ff ff19 	bl	800ea18 <__sinit>
 800ebe6:	4b51      	ldr	r3, [pc, #324]	; (800ed2c <_fseeko_r+0x15c>)
 800ebe8:	429c      	cmp	r4, r3
 800ebea:	d122      	bne.n	800ec32 <_fseeko_r+0x62>
 800ebec:	6874      	ldr	r4, [r6, #4]
 800ebee:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ebf0:	07d9      	lsls	r1, r3, #31
 800ebf2:	d405      	bmi.n	800ec00 <_fseeko_r+0x30>
 800ebf4:	89a3      	ldrh	r3, [r4, #12]
 800ebf6:	059a      	lsls	r2, r3, #22
 800ebf8:	d402      	bmi.n	800ec00 <_fseeko_r+0x30>
 800ebfa:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ebfc:	f000 f8fe 	bl	800edfc <__retarget_lock_acquire_recursive>
 800ec00:	89a3      	ldrh	r3, [r4, #12]
 800ec02:	f403 7384 	and.w	r3, r3, #264	; 0x108
 800ec06:	f5b3 7f84 	cmp.w	r3, #264	; 0x108
 800ec0a:	d103      	bne.n	800ec14 <_fseeko_r+0x44>
 800ec0c:	4621      	mov	r1, r4
 800ec0e:	4630      	mov	r0, r6
 800ec10:	f7ff fdd8 	bl	800e7c4 <_fflush_r>
 800ec14:	f8d4 802c 	ldr.w	r8, [r4, #44]	; 0x2c
 800ec18:	f1b8 0f00 	cmp.w	r8, #0
 800ec1c:	d113      	bne.n	800ec46 <_fseeko_r+0x76>
 800ec1e:	231d      	movs	r3, #29
 800ec20:	6033      	str	r3, [r6, #0]
 800ec22:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ec24:	07d9      	lsls	r1, r3, #31
 800ec26:	d578      	bpl.n	800ed1a <_fseeko_r+0x14a>
 800ec28:	f04f 35ff 	mov.w	r5, #4294967295
 800ec2c:	4628      	mov	r0, r5
 800ec2e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ec32:	4b3f      	ldr	r3, [pc, #252]	; (800ed30 <_fseeko_r+0x160>)
 800ec34:	429c      	cmp	r4, r3
 800ec36:	d101      	bne.n	800ec3c <_fseeko_r+0x6c>
 800ec38:	68b4      	ldr	r4, [r6, #8]
 800ec3a:	e7d8      	b.n	800ebee <_fseeko_r+0x1e>
 800ec3c:	4b3d      	ldr	r3, [pc, #244]	; (800ed34 <_fseeko_r+0x164>)
 800ec3e:	429c      	cmp	r4, r3
 800ec40:	bf08      	it	eq
 800ec42:	68f4      	ldreq	r4, [r6, #12]
 800ec44:	e7d3      	b.n	800ebee <_fseeko_r+0x1e>
 800ec46:	2d01      	cmp	r5, #1
 800ec48:	d036      	beq.n	800ecb8 <_fseeko_r+0xe8>
 800ec4a:	f035 0302 	bics.w	r3, r5, #2
 800ec4e:	d162      	bne.n	800ed16 <_fseeko_r+0x146>
 800ec50:	6923      	ldr	r3, [r4, #16]
 800ec52:	b91b      	cbnz	r3, 800ec5c <_fseeko_r+0x8c>
 800ec54:	4621      	mov	r1, r4
 800ec56:	4630      	mov	r0, r6
 800ec58:	f000 f8f8 	bl	800ee4c <__smakebuf_r>
 800ec5c:	4621      	mov	r1, r4
 800ec5e:	4630      	mov	r0, r6
 800ec60:	f7ff fdb0 	bl	800e7c4 <_fflush_r>
 800ec64:	2800      	cmp	r0, #0
 800ec66:	d1dc      	bne.n	800ec22 <_fseeko_r+0x52>
 800ec68:	6a21      	ldr	r1, [r4, #32]
 800ec6a:	462b      	mov	r3, r5
 800ec6c:	463a      	mov	r2, r7
 800ec6e:	4630      	mov	r0, r6
 800ec70:	47c0      	blx	r8
 800ec72:	3001      	adds	r0, #1
 800ec74:	d0d5      	beq.n	800ec22 <_fseeko_r+0x52>
 800ec76:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ec78:	b141      	cbz	r1, 800ec8c <_fseeko_r+0xbc>
 800ec7a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ec7e:	4299      	cmp	r1, r3
 800ec80:	d002      	beq.n	800ec88 <_fseeko_r+0xb8>
 800ec82:	4630      	mov	r0, r6
 800ec84:	f000 f938 	bl	800eef8 <_free_r>
 800ec88:	2300      	movs	r3, #0
 800ec8a:	6363      	str	r3, [r4, #52]	; 0x34
 800ec8c:	6923      	ldr	r3, [r4, #16]
 800ec8e:	6023      	str	r3, [r4, #0]
 800ec90:	89a3      	ldrh	r3, [r4, #12]
 800ec92:	2600      	movs	r6, #0
 800ec94:	f423 6302 	bic.w	r3, r3, #2080	; 0x820
 800ec98:	6066      	str	r6, [r4, #4]
 800ec9a:	81a3      	strh	r3, [r4, #12]
 800ec9c:	2208      	movs	r2, #8
 800ec9e:	4631      	mov	r1, r6
 800eca0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800eca4:	f000 f920 	bl	800eee8 <memset>
 800eca8:	6e65      	ldr	r5, [r4, #100]	; 0x64
 800ecaa:	f015 0501 	ands.w	r5, r5, #1
 800ecae:	d13b      	bne.n	800ed28 <_fseeko_r+0x158>
 800ecb0:	89a3      	ldrh	r3, [r4, #12]
 800ecb2:	059b      	lsls	r3, r3, #22
 800ecb4:	d4ba      	bmi.n	800ec2c <_fseeko_r+0x5c>
 800ecb6:	e021      	b.n	800ecfc <_fseeko_r+0x12c>
 800ecb8:	4621      	mov	r1, r4
 800ecba:	4630      	mov	r0, r6
 800ecbc:	f7ff fd82 	bl	800e7c4 <_fflush_r>
 800ecc0:	89a2      	ldrh	r2, [r4, #12]
 800ecc2:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800ecc6:	d00c      	beq.n	800ece2 <_fseeko_r+0x112>
 800ecc8:	6d65      	ldr	r5, [r4, #84]	; 0x54
 800ecca:	89a3      	ldrh	r3, [r4, #12]
 800eccc:	075a      	lsls	r2, r3, #29
 800ecce:	d519      	bpl.n	800ed04 <_fseeko_r+0x134>
 800ecd0:	6863      	ldr	r3, [r4, #4]
 800ecd2:	1aed      	subs	r5, r5, r3
 800ecd4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ecd6:	b10b      	cbz	r3, 800ecdc <_fseeko_r+0x10c>
 800ecd8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800ecda:	1aed      	subs	r5, r5, r3
 800ecdc:	442f      	add	r7, r5
 800ecde:	2500      	movs	r5, #0
 800ece0:	e7b6      	b.n	800ec50 <_fseeko_r+0x80>
 800ece2:	462b      	mov	r3, r5
 800ece4:	6a21      	ldr	r1, [r4, #32]
 800ece6:	4630      	mov	r0, r6
 800ece8:	47c0      	blx	r8
 800ecea:	1c43      	adds	r3, r0, #1
 800ecec:	4605      	mov	r5, r0
 800ecee:	d1ec      	bne.n	800ecca <_fseeko_r+0xfa>
 800ecf0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ecf2:	07d8      	lsls	r0, r3, #31
 800ecf4:	d498      	bmi.n	800ec28 <_fseeko_r+0x58>
 800ecf6:	89a3      	ldrh	r3, [r4, #12]
 800ecf8:	0599      	lsls	r1, r3, #22
 800ecfa:	d495      	bmi.n	800ec28 <_fseeko_r+0x58>
 800ecfc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ecfe:	f000 f87e 	bl	800edfe <__retarget_lock_release_recursive>
 800ed02:	e793      	b.n	800ec2c <_fseeko_r+0x5c>
 800ed04:	0718      	lsls	r0, r3, #28
 800ed06:	d5e9      	bpl.n	800ecdc <_fseeko_r+0x10c>
 800ed08:	6823      	ldr	r3, [r4, #0]
 800ed0a:	6922      	ldr	r2, [r4, #16]
 800ed0c:	2b00      	cmp	r3, #0
 800ed0e:	d0e5      	beq.n	800ecdc <_fseeko_r+0x10c>
 800ed10:	1a9b      	subs	r3, r3, r2
 800ed12:	441d      	add	r5, r3
 800ed14:	e7e2      	b.n	800ecdc <_fseeko_r+0x10c>
 800ed16:	2316      	movs	r3, #22
 800ed18:	e782      	b.n	800ec20 <_fseeko_r+0x50>
 800ed1a:	89a3      	ldrh	r3, [r4, #12]
 800ed1c:	059a      	lsls	r2, r3, #22
 800ed1e:	d483      	bmi.n	800ec28 <_fseeko_r+0x58>
 800ed20:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ed22:	f000 f86c 	bl	800edfe <__retarget_lock_release_recursive>
 800ed26:	e77f      	b.n	800ec28 <_fseeko_r+0x58>
 800ed28:	4635      	mov	r5, r6
 800ed2a:	e77f      	b.n	800ec2c <_fseeko_r+0x5c>
 800ed2c:	080122e4 	.word	0x080122e4
 800ed30:	08012304 	.word	0x08012304
 800ed34:	080122c4 	.word	0x080122c4

0800ed38 <_fwalk>:
 800ed38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ed3c:	460f      	mov	r7, r1
 800ed3e:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800ed42:	2600      	movs	r6, #0
 800ed44:	e9d4 8501 	ldrd	r8, r5, [r4, #4]
 800ed48:	f1b8 0801 	subs.w	r8, r8, #1
 800ed4c:	d505      	bpl.n	800ed5a <_fwalk+0x22>
 800ed4e:	6824      	ldr	r4, [r4, #0]
 800ed50:	2c00      	cmp	r4, #0
 800ed52:	d1f7      	bne.n	800ed44 <_fwalk+0xc>
 800ed54:	4630      	mov	r0, r6
 800ed56:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ed5a:	89ab      	ldrh	r3, [r5, #12]
 800ed5c:	2b01      	cmp	r3, #1
 800ed5e:	d906      	bls.n	800ed6e <_fwalk+0x36>
 800ed60:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ed64:	3301      	adds	r3, #1
 800ed66:	d002      	beq.n	800ed6e <_fwalk+0x36>
 800ed68:	4628      	mov	r0, r5
 800ed6a:	47b8      	blx	r7
 800ed6c:	4306      	orrs	r6, r0
 800ed6e:	3568      	adds	r5, #104	; 0x68
 800ed70:	e7ea      	b.n	800ed48 <_fwalk+0x10>

0800ed72 <_fwalk_reent>:
 800ed72:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ed76:	4606      	mov	r6, r0
 800ed78:	4688      	mov	r8, r1
 800ed7a:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800ed7e:	2700      	movs	r7, #0
 800ed80:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ed84:	f1b9 0901 	subs.w	r9, r9, #1
 800ed88:	d505      	bpl.n	800ed96 <_fwalk_reent+0x24>
 800ed8a:	6824      	ldr	r4, [r4, #0]
 800ed8c:	2c00      	cmp	r4, #0
 800ed8e:	d1f7      	bne.n	800ed80 <_fwalk_reent+0xe>
 800ed90:	4638      	mov	r0, r7
 800ed92:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ed96:	89ab      	ldrh	r3, [r5, #12]
 800ed98:	2b01      	cmp	r3, #1
 800ed9a:	d907      	bls.n	800edac <_fwalk_reent+0x3a>
 800ed9c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800eda0:	3301      	adds	r3, #1
 800eda2:	d003      	beq.n	800edac <_fwalk_reent+0x3a>
 800eda4:	4629      	mov	r1, r5
 800eda6:	4630      	mov	r0, r6
 800eda8:	47c0      	blx	r8
 800edaa:	4307      	orrs	r7, r0
 800edac:	3568      	adds	r5, #104	; 0x68
 800edae:	e7e9      	b.n	800ed84 <_fwalk_reent+0x12>

0800edb0 <__libc_init_array>:
 800edb0:	b570      	push	{r4, r5, r6, lr}
 800edb2:	4d0d      	ldr	r5, [pc, #52]	; (800ede8 <__libc_init_array+0x38>)
 800edb4:	4c0d      	ldr	r4, [pc, #52]	; (800edec <__libc_init_array+0x3c>)
 800edb6:	1b64      	subs	r4, r4, r5
 800edb8:	10a4      	asrs	r4, r4, #2
 800edba:	2600      	movs	r6, #0
 800edbc:	42a6      	cmp	r6, r4
 800edbe:	d109      	bne.n	800edd4 <__libc_init_array+0x24>
 800edc0:	4d0b      	ldr	r5, [pc, #44]	; (800edf0 <__libc_init_array+0x40>)
 800edc2:	4c0c      	ldr	r4, [pc, #48]	; (800edf4 <__libc_init_array+0x44>)
 800edc4:	f003 fa0e 	bl	80121e4 <_init>
 800edc8:	1b64      	subs	r4, r4, r5
 800edca:	10a4      	asrs	r4, r4, #2
 800edcc:	2600      	movs	r6, #0
 800edce:	42a6      	cmp	r6, r4
 800edd0:	d105      	bne.n	800edde <__libc_init_array+0x2e>
 800edd2:	bd70      	pop	{r4, r5, r6, pc}
 800edd4:	f855 3b04 	ldr.w	r3, [r5], #4
 800edd8:	4798      	blx	r3
 800edda:	3601      	adds	r6, #1
 800eddc:	e7ee      	b.n	800edbc <__libc_init_array+0xc>
 800edde:	f855 3b04 	ldr.w	r3, [r5], #4
 800ede2:	4798      	blx	r3
 800ede4:	3601      	adds	r6, #1
 800ede6:	e7f2      	b.n	800edce <__libc_init_array+0x1e>
 800ede8:	08013fb8 	.word	0x08013fb8
 800edec:	08013fb8 	.word	0x08013fb8
 800edf0:	08013fb8 	.word	0x08013fb8
 800edf4:	08013fbc 	.word	0x08013fbc

0800edf8 <__retarget_lock_init_recursive>:
 800edf8:	4770      	bx	lr

0800edfa <__retarget_lock_close_recursive>:
 800edfa:	4770      	bx	lr

0800edfc <__retarget_lock_acquire_recursive>:
 800edfc:	4770      	bx	lr

0800edfe <__retarget_lock_release_recursive>:
 800edfe:	4770      	bx	lr

0800ee00 <__swhatbuf_r>:
 800ee00:	b570      	push	{r4, r5, r6, lr}
 800ee02:	460e      	mov	r6, r1
 800ee04:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ee08:	2900      	cmp	r1, #0
 800ee0a:	b096      	sub	sp, #88	; 0x58
 800ee0c:	4614      	mov	r4, r2
 800ee0e:	461d      	mov	r5, r3
 800ee10:	da08      	bge.n	800ee24 <__swhatbuf_r+0x24>
 800ee12:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800ee16:	2200      	movs	r2, #0
 800ee18:	602a      	str	r2, [r5, #0]
 800ee1a:	061a      	lsls	r2, r3, #24
 800ee1c:	d410      	bmi.n	800ee40 <__swhatbuf_r+0x40>
 800ee1e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ee22:	e00e      	b.n	800ee42 <__swhatbuf_r+0x42>
 800ee24:	466a      	mov	r2, sp
 800ee26:	f001 f875 	bl	800ff14 <_fstat_r>
 800ee2a:	2800      	cmp	r0, #0
 800ee2c:	dbf1      	blt.n	800ee12 <__swhatbuf_r+0x12>
 800ee2e:	9a01      	ldr	r2, [sp, #4]
 800ee30:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800ee34:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800ee38:	425a      	negs	r2, r3
 800ee3a:	415a      	adcs	r2, r3
 800ee3c:	602a      	str	r2, [r5, #0]
 800ee3e:	e7ee      	b.n	800ee1e <__swhatbuf_r+0x1e>
 800ee40:	2340      	movs	r3, #64	; 0x40
 800ee42:	2000      	movs	r0, #0
 800ee44:	6023      	str	r3, [r4, #0]
 800ee46:	b016      	add	sp, #88	; 0x58
 800ee48:	bd70      	pop	{r4, r5, r6, pc}
	...

0800ee4c <__smakebuf_r>:
 800ee4c:	898b      	ldrh	r3, [r1, #12]
 800ee4e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800ee50:	079d      	lsls	r5, r3, #30
 800ee52:	4606      	mov	r6, r0
 800ee54:	460c      	mov	r4, r1
 800ee56:	d507      	bpl.n	800ee68 <__smakebuf_r+0x1c>
 800ee58:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800ee5c:	6023      	str	r3, [r4, #0]
 800ee5e:	6123      	str	r3, [r4, #16]
 800ee60:	2301      	movs	r3, #1
 800ee62:	6163      	str	r3, [r4, #20]
 800ee64:	b002      	add	sp, #8
 800ee66:	bd70      	pop	{r4, r5, r6, pc}
 800ee68:	ab01      	add	r3, sp, #4
 800ee6a:	466a      	mov	r2, sp
 800ee6c:	f7ff ffc8 	bl	800ee00 <__swhatbuf_r>
 800ee70:	9900      	ldr	r1, [sp, #0]
 800ee72:	4605      	mov	r5, r0
 800ee74:	4630      	mov	r0, r6
 800ee76:	f000 f8ab 	bl	800efd0 <_malloc_r>
 800ee7a:	b948      	cbnz	r0, 800ee90 <__smakebuf_r+0x44>
 800ee7c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ee80:	059a      	lsls	r2, r3, #22
 800ee82:	d4ef      	bmi.n	800ee64 <__smakebuf_r+0x18>
 800ee84:	f023 0303 	bic.w	r3, r3, #3
 800ee88:	f043 0302 	orr.w	r3, r3, #2
 800ee8c:	81a3      	strh	r3, [r4, #12]
 800ee8e:	e7e3      	b.n	800ee58 <__smakebuf_r+0xc>
 800ee90:	4b0d      	ldr	r3, [pc, #52]	; (800eec8 <__smakebuf_r+0x7c>)
 800ee92:	62b3      	str	r3, [r6, #40]	; 0x28
 800ee94:	89a3      	ldrh	r3, [r4, #12]
 800ee96:	6020      	str	r0, [r4, #0]
 800ee98:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ee9c:	81a3      	strh	r3, [r4, #12]
 800ee9e:	9b00      	ldr	r3, [sp, #0]
 800eea0:	6163      	str	r3, [r4, #20]
 800eea2:	9b01      	ldr	r3, [sp, #4]
 800eea4:	6120      	str	r0, [r4, #16]
 800eea6:	b15b      	cbz	r3, 800eec0 <__smakebuf_r+0x74>
 800eea8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800eeac:	4630      	mov	r0, r6
 800eeae:	f001 fbb3 	bl	8010618 <_isatty_r>
 800eeb2:	b128      	cbz	r0, 800eec0 <__smakebuf_r+0x74>
 800eeb4:	89a3      	ldrh	r3, [r4, #12]
 800eeb6:	f023 0303 	bic.w	r3, r3, #3
 800eeba:	f043 0301 	orr.w	r3, r3, #1
 800eebe:	81a3      	strh	r3, [r4, #12]
 800eec0:	89a0      	ldrh	r0, [r4, #12]
 800eec2:	4305      	orrs	r5, r0
 800eec4:	81a5      	strh	r5, [r4, #12]
 800eec6:	e7cd      	b.n	800ee64 <__smakebuf_r+0x18>
 800eec8:	0800e9b1 	.word	0x0800e9b1

0800eecc <memcpy>:
 800eecc:	440a      	add	r2, r1
 800eece:	4291      	cmp	r1, r2
 800eed0:	f100 33ff 	add.w	r3, r0, #4294967295
 800eed4:	d100      	bne.n	800eed8 <memcpy+0xc>
 800eed6:	4770      	bx	lr
 800eed8:	b510      	push	{r4, lr}
 800eeda:	f811 4b01 	ldrb.w	r4, [r1], #1
 800eede:	f803 4f01 	strb.w	r4, [r3, #1]!
 800eee2:	4291      	cmp	r1, r2
 800eee4:	d1f9      	bne.n	800eeda <memcpy+0xe>
 800eee6:	bd10      	pop	{r4, pc}

0800eee8 <memset>:
 800eee8:	4402      	add	r2, r0
 800eeea:	4603      	mov	r3, r0
 800eeec:	4293      	cmp	r3, r2
 800eeee:	d100      	bne.n	800eef2 <memset+0xa>
 800eef0:	4770      	bx	lr
 800eef2:	f803 1b01 	strb.w	r1, [r3], #1
 800eef6:	e7f9      	b.n	800eeec <memset+0x4>

0800eef8 <_free_r>:
 800eef8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800eefa:	2900      	cmp	r1, #0
 800eefc:	d044      	beq.n	800ef88 <_free_r+0x90>
 800eefe:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ef02:	9001      	str	r0, [sp, #4]
 800ef04:	2b00      	cmp	r3, #0
 800ef06:	f1a1 0404 	sub.w	r4, r1, #4
 800ef0a:	bfb8      	it	lt
 800ef0c:	18e4      	addlt	r4, r4, r3
 800ef0e:	f001 fbb7 	bl	8010680 <__malloc_lock>
 800ef12:	4a1e      	ldr	r2, [pc, #120]	; (800ef8c <_free_r+0x94>)
 800ef14:	9801      	ldr	r0, [sp, #4]
 800ef16:	6813      	ldr	r3, [r2, #0]
 800ef18:	b933      	cbnz	r3, 800ef28 <_free_r+0x30>
 800ef1a:	6063      	str	r3, [r4, #4]
 800ef1c:	6014      	str	r4, [r2, #0]
 800ef1e:	b003      	add	sp, #12
 800ef20:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ef24:	f001 bbb2 	b.w	801068c <__malloc_unlock>
 800ef28:	42a3      	cmp	r3, r4
 800ef2a:	d908      	bls.n	800ef3e <_free_r+0x46>
 800ef2c:	6825      	ldr	r5, [r4, #0]
 800ef2e:	1961      	adds	r1, r4, r5
 800ef30:	428b      	cmp	r3, r1
 800ef32:	bf01      	itttt	eq
 800ef34:	6819      	ldreq	r1, [r3, #0]
 800ef36:	685b      	ldreq	r3, [r3, #4]
 800ef38:	1949      	addeq	r1, r1, r5
 800ef3a:	6021      	streq	r1, [r4, #0]
 800ef3c:	e7ed      	b.n	800ef1a <_free_r+0x22>
 800ef3e:	461a      	mov	r2, r3
 800ef40:	685b      	ldr	r3, [r3, #4]
 800ef42:	b10b      	cbz	r3, 800ef48 <_free_r+0x50>
 800ef44:	42a3      	cmp	r3, r4
 800ef46:	d9fa      	bls.n	800ef3e <_free_r+0x46>
 800ef48:	6811      	ldr	r1, [r2, #0]
 800ef4a:	1855      	adds	r5, r2, r1
 800ef4c:	42a5      	cmp	r5, r4
 800ef4e:	d10b      	bne.n	800ef68 <_free_r+0x70>
 800ef50:	6824      	ldr	r4, [r4, #0]
 800ef52:	4421      	add	r1, r4
 800ef54:	1854      	adds	r4, r2, r1
 800ef56:	42a3      	cmp	r3, r4
 800ef58:	6011      	str	r1, [r2, #0]
 800ef5a:	d1e0      	bne.n	800ef1e <_free_r+0x26>
 800ef5c:	681c      	ldr	r4, [r3, #0]
 800ef5e:	685b      	ldr	r3, [r3, #4]
 800ef60:	6053      	str	r3, [r2, #4]
 800ef62:	4421      	add	r1, r4
 800ef64:	6011      	str	r1, [r2, #0]
 800ef66:	e7da      	b.n	800ef1e <_free_r+0x26>
 800ef68:	d902      	bls.n	800ef70 <_free_r+0x78>
 800ef6a:	230c      	movs	r3, #12
 800ef6c:	6003      	str	r3, [r0, #0]
 800ef6e:	e7d6      	b.n	800ef1e <_free_r+0x26>
 800ef70:	6825      	ldr	r5, [r4, #0]
 800ef72:	1961      	adds	r1, r4, r5
 800ef74:	428b      	cmp	r3, r1
 800ef76:	bf04      	itt	eq
 800ef78:	6819      	ldreq	r1, [r3, #0]
 800ef7a:	685b      	ldreq	r3, [r3, #4]
 800ef7c:	6063      	str	r3, [r4, #4]
 800ef7e:	bf04      	itt	eq
 800ef80:	1949      	addeq	r1, r1, r5
 800ef82:	6021      	streq	r1, [r4, #0]
 800ef84:	6054      	str	r4, [r2, #4]
 800ef86:	e7ca      	b.n	800ef1e <_free_r+0x26>
 800ef88:	b003      	add	sp, #12
 800ef8a:	bd30      	pop	{r4, r5, pc}
 800ef8c:	24000aa0 	.word	0x24000aa0

0800ef90 <sbrk_aligned>:
 800ef90:	b570      	push	{r4, r5, r6, lr}
 800ef92:	4e0e      	ldr	r6, [pc, #56]	; (800efcc <sbrk_aligned+0x3c>)
 800ef94:	460c      	mov	r4, r1
 800ef96:	6831      	ldr	r1, [r6, #0]
 800ef98:	4605      	mov	r5, r0
 800ef9a:	b911      	cbnz	r1, 800efa2 <sbrk_aligned+0x12>
 800ef9c:	f000 f932 	bl	800f204 <_sbrk_r>
 800efa0:	6030      	str	r0, [r6, #0]
 800efa2:	4621      	mov	r1, r4
 800efa4:	4628      	mov	r0, r5
 800efa6:	f000 f92d 	bl	800f204 <_sbrk_r>
 800efaa:	1c43      	adds	r3, r0, #1
 800efac:	d00a      	beq.n	800efc4 <sbrk_aligned+0x34>
 800efae:	1cc4      	adds	r4, r0, #3
 800efb0:	f024 0403 	bic.w	r4, r4, #3
 800efb4:	42a0      	cmp	r0, r4
 800efb6:	d007      	beq.n	800efc8 <sbrk_aligned+0x38>
 800efb8:	1a21      	subs	r1, r4, r0
 800efba:	4628      	mov	r0, r5
 800efbc:	f000 f922 	bl	800f204 <_sbrk_r>
 800efc0:	3001      	adds	r0, #1
 800efc2:	d101      	bne.n	800efc8 <sbrk_aligned+0x38>
 800efc4:	f04f 34ff 	mov.w	r4, #4294967295
 800efc8:	4620      	mov	r0, r4
 800efca:	bd70      	pop	{r4, r5, r6, pc}
 800efcc:	24000aa4 	.word	0x24000aa4

0800efd0 <_malloc_r>:
 800efd0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800efd4:	1ccd      	adds	r5, r1, #3
 800efd6:	f025 0503 	bic.w	r5, r5, #3
 800efda:	3508      	adds	r5, #8
 800efdc:	2d0c      	cmp	r5, #12
 800efde:	bf38      	it	cc
 800efe0:	250c      	movcc	r5, #12
 800efe2:	2d00      	cmp	r5, #0
 800efe4:	4607      	mov	r7, r0
 800efe6:	db01      	blt.n	800efec <_malloc_r+0x1c>
 800efe8:	42a9      	cmp	r1, r5
 800efea:	d905      	bls.n	800eff8 <_malloc_r+0x28>
 800efec:	230c      	movs	r3, #12
 800efee:	603b      	str	r3, [r7, #0]
 800eff0:	2600      	movs	r6, #0
 800eff2:	4630      	mov	r0, r6
 800eff4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800eff8:	4e2e      	ldr	r6, [pc, #184]	; (800f0b4 <_malloc_r+0xe4>)
 800effa:	f001 fb41 	bl	8010680 <__malloc_lock>
 800effe:	6833      	ldr	r3, [r6, #0]
 800f000:	461c      	mov	r4, r3
 800f002:	bb34      	cbnz	r4, 800f052 <_malloc_r+0x82>
 800f004:	4629      	mov	r1, r5
 800f006:	4638      	mov	r0, r7
 800f008:	f7ff ffc2 	bl	800ef90 <sbrk_aligned>
 800f00c:	1c43      	adds	r3, r0, #1
 800f00e:	4604      	mov	r4, r0
 800f010:	d14d      	bne.n	800f0ae <_malloc_r+0xde>
 800f012:	6834      	ldr	r4, [r6, #0]
 800f014:	4626      	mov	r6, r4
 800f016:	2e00      	cmp	r6, #0
 800f018:	d140      	bne.n	800f09c <_malloc_r+0xcc>
 800f01a:	6823      	ldr	r3, [r4, #0]
 800f01c:	4631      	mov	r1, r6
 800f01e:	4638      	mov	r0, r7
 800f020:	eb04 0803 	add.w	r8, r4, r3
 800f024:	f000 f8ee 	bl	800f204 <_sbrk_r>
 800f028:	4580      	cmp	r8, r0
 800f02a:	d13a      	bne.n	800f0a2 <_malloc_r+0xd2>
 800f02c:	6821      	ldr	r1, [r4, #0]
 800f02e:	3503      	adds	r5, #3
 800f030:	1a6d      	subs	r5, r5, r1
 800f032:	f025 0503 	bic.w	r5, r5, #3
 800f036:	3508      	adds	r5, #8
 800f038:	2d0c      	cmp	r5, #12
 800f03a:	bf38      	it	cc
 800f03c:	250c      	movcc	r5, #12
 800f03e:	4629      	mov	r1, r5
 800f040:	4638      	mov	r0, r7
 800f042:	f7ff ffa5 	bl	800ef90 <sbrk_aligned>
 800f046:	3001      	adds	r0, #1
 800f048:	d02b      	beq.n	800f0a2 <_malloc_r+0xd2>
 800f04a:	6823      	ldr	r3, [r4, #0]
 800f04c:	442b      	add	r3, r5
 800f04e:	6023      	str	r3, [r4, #0]
 800f050:	e00e      	b.n	800f070 <_malloc_r+0xa0>
 800f052:	6822      	ldr	r2, [r4, #0]
 800f054:	1b52      	subs	r2, r2, r5
 800f056:	d41e      	bmi.n	800f096 <_malloc_r+0xc6>
 800f058:	2a0b      	cmp	r2, #11
 800f05a:	d916      	bls.n	800f08a <_malloc_r+0xba>
 800f05c:	1961      	adds	r1, r4, r5
 800f05e:	42a3      	cmp	r3, r4
 800f060:	6025      	str	r5, [r4, #0]
 800f062:	bf18      	it	ne
 800f064:	6059      	strne	r1, [r3, #4]
 800f066:	6863      	ldr	r3, [r4, #4]
 800f068:	bf08      	it	eq
 800f06a:	6031      	streq	r1, [r6, #0]
 800f06c:	5162      	str	r2, [r4, r5]
 800f06e:	604b      	str	r3, [r1, #4]
 800f070:	4638      	mov	r0, r7
 800f072:	f104 060b 	add.w	r6, r4, #11
 800f076:	f001 fb09 	bl	801068c <__malloc_unlock>
 800f07a:	f026 0607 	bic.w	r6, r6, #7
 800f07e:	1d23      	adds	r3, r4, #4
 800f080:	1af2      	subs	r2, r6, r3
 800f082:	d0b6      	beq.n	800eff2 <_malloc_r+0x22>
 800f084:	1b9b      	subs	r3, r3, r6
 800f086:	50a3      	str	r3, [r4, r2]
 800f088:	e7b3      	b.n	800eff2 <_malloc_r+0x22>
 800f08a:	6862      	ldr	r2, [r4, #4]
 800f08c:	42a3      	cmp	r3, r4
 800f08e:	bf0c      	ite	eq
 800f090:	6032      	streq	r2, [r6, #0]
 800f092:	605a      	strne	r2, [r3, #4]
 800f094:	e7ec      	b.n	800f070 <_malloc_r+0xa0>
 800f096:	4623      	mov	r3, r4
 800f098:	6864      	ldr	r4, [r4, #4]
 800f09a:	e7b2      	b.n	800f002 <_malloc_r+0x32>
 800f09c:	4634      	mov	r4, r6
 800f09e:	6876      	ldr	r6, [r6, #4]
 800f0a0:	e7b9      	b.n	800f016 <_malloc_r+0x46>
 800f0a2:	230c      	movs	r3, #12
 800f0a4:	603b      	str	r3, [r7, #0]
 800f0a6:	4638      	mov	r0, r7
 800f0a8:	f001 faf0 	bl	801068c <__malloc_unlock>
 800f0ac:	e7a1      	b.n	800eff2 <_malloc_r+0x22>
 800f0ae:	6025      	str	r5, [r4, #0]
 800f0b0:	e7de      	b.n	800f070 <_malloc_r+0xa0>
 800f0b2:	bf00      	nop
 800f0b4:	24000aa0 	.word	0x24000aa0

0800f0b8 <_open_r>:
 800f0b8:	b538      	push	{r3, r4, r5, lr}
 800f0ba:	4d07      	ldr	r5, [pc, #28]	; (800f0d8 <_open_r+0x20>)
 800f0bc:	4604      	mov	r4, r0
 800f0be:	4608      	mov	r0, r1
 800f0c0:	4611      	mov	r1, r2
 800f0c2:	2200      	movs	r2, #0
 800f0c4:	602a      	str	r2, [r5, #0]
 800f0c6:	461a      	mov	r2, r3
 800f0c8:	f7f4 fde5 	bl	8003c96 <_open>
 800f0cc:	1c43      	adds	r3, r0, #1
 800f0ce:	d102      	bne.n	800f0d6 <_open_r+0x1e>
 800f0d0:	682b      	ldr	r3, [r5, #0]
 800f0d2:	b103      	cbz	r3, 800f0d6 <_open_r+0x1e>
 800f0d4:	6023      	str	r3, [r4, #0]
 800f0d6:	bd38      	pop	{r3, r4, r5, pc}
 800f0d8:	24000aa8 	.word	0x24000aa8

0800f0dc <lflush>:
 800f0dc:	8983      	ldrh	r3, [r0, #12]
 800f0de:	f003 0309 	and.w	r3, r3, #9
 800f0e2:	2b09      	cmp	r3, #9
 800f0e4:	d101      	bne.n	800f0ea <lflush+0xe>
 800f0e6:	f7ff bba9 	b.w	800e83c <fflush>
 800f0ea:	2000      	movs	r0, #0
 800f0ec:	4770      	bx	lr
	...

0800f0f0 <__srefill_r>:
 800f0f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f0f2:	460c      	mov	r4, r1
 800f0f4:	4605      	mov	r5, r0
 800f0f6:	b118      	cbz	r0, 800f100 <__srefill_r+0x10>
 800f0f8:	6983      	ldr	r3, [r0, #24]
 800f0fa:	b90b      	cbnz	r3, 800f100 <__srefill_r+0x10>
 800f0fc:	f7ff fc8c 	bl	800ea18 <__sinit>
 800f100:	4b3b      	ldr	r3, [pc, #236]	; (800f1f0 <__srefill_r+0x100>)
 800f102:	429c      	cmp	r4, r3
 800f104:	d10a      	bne.n	800f11c <__srefill_r+0x2c>
 800f106:	686c      	ldr	r4, [r5, #4]
 800f108:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800f10c:	2300      	movs	r3, #0
 800f10e:	6063      	str	r3, [r4, #4]
 800f110:	89a3      	ldrh	r3, [r4, #12]
 800f112:	069e      	lsls	r6, r3, #26
 800f114:	d50c      	bpl.n	800f130 <__srefill_r+0x40>
 800f116:	f04f 30ff 	mov.w	r0, #4294967295
 800f11a:	e066      	b.n	800f1ea <__srefill_r+0xfa>
 800f11c:	4b35      	ldr	r3, [pc, #212]	; (800f1f4 <__srefill_r+0x104>)
 800f11e:	429c      	cmp	r4, r3
 800f120:	d101      	bne.n	800f126 <__srefill_r+0x36>
 800f122:	68ac      	ldr	r4, [r5, #8]
 800f124:	e7f0      	b.n	800f108 <__srefill_r+0x18>
 800f126:	4b34      	ldr	r3, [pc, #208]	; (800f1f8 <__srefill_r+0x108>)
 800f128:	429c      	cmp	r4, r3
 800f12a:	bf08      	it	eq
 800f12c:	68ec      	ldreq	r4, [r5, #12]
 800f12e:	e7eb      	b.n	800f108 <__srefill_r+0x18>
 800f130:	0758      	lsls	r0, r3, #29
 800f132:	d448      	bmi.n	800f1c6 <__srefill_r+0xd6>
 800f134:	06d9      	lsls	r1, r3, #27
 800f136:	d405      	bmi.n	800f144 <__srefill_r+0x54>
 800f138:	2309      	movs	r3, #9
 800f13a:	602b      	str	r3, [r5, #0]
 800f13c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800f140:	81a3      	strh	r3, [r4, #12]
 800f142:	e7e8      	b.n	800f116 <__srefill_r+0x26>
 800f144:	071a      	lsls	r2, r3, #28
 800f146:	d50b      	bpl.n	800f160 <__srefill_r+0x70>
 800f148:	4621      	mov	r1, r4
 800f14a:	4628      	mov	r0, r5
 800f14c:	f7ff fb3a 	bl	800e7c4 <_fflush_r>
 800f150:	2800      	cmp	r0, #0
 800f152:	d1e0      	bne.n	800f116 <__srefill_r+0x26>
 800f154:	89a3      	ldrh	r3, [r4, #12]
 800f156:	60a0      	str	r0, [r4, #8]
 800f158:	f023 0308 	bic.w	r3, r3, #8
 800f15c:	81a3      	strh	r3, [r4, #12]
 800f15e:	61a0      	str	r0, [r4, #24]
 800f160:	89a3      	ldrh	r3, [r4, #12]
 800f162:	f043 0304 	orr.w	r3, r3, #4
 800f166:	81a3      	strh	r3, [r4, #12]
 800f168:	6923      	ldr	r3, [r4, #16]
 800f16a:	b91b      	cbnz	r3, 800f174 <__srefill_r+0x84>
 800f16c:	4621      	mov	r1, r4
 800f16e:	4628      	mov	r0, r5
 800f170:	f7ff fe6c 	bl	800ee4c <__smakebuf_r>
 800f174:	89a6      	ldrh	r6, [r4, #12]
 800f176:	f9b4 700c 	ldrsh.w	r7, [r4, #12]
 800f17a:	07b3      	lsls	r3, r6, #30
 800f17c:	d00f      	beq.n	800f19e <__srefill_r+0xae>
 800f17e:	2301      	movs	r3, #1
 800f180:	81a3      	strh	r3, [r4, #12]
 800f182:	4b1e      	ldr	r3, [pc, #120]	; (800f1fc <__srefill_r+0x10c>)
 800f184:	491e      	ldr	r1, [pc, #120]	; (800f200 <__srefill_r+0x110>)
 800f186:	6818      	ldr	r0, [r3, #0]
 800f188:	f006 0609 	and.w	r6, r6, #9
 800f18c:	f7ff fdd4 	bl	800ed38 <_fwalk>
 800f190:	2e09      	cmp	r6, #9
 800f192:	81a7      	strh	r7, [r4, #12]
 800f194:	d103      	bne.n	800f19e <__srefill_r+0xae>
 800f196:	4621      	mov	r1, r4
 800f198:	4628      	mov	r0, r5
 800f19a:	f7ff fa8d 	bl	800e6b8 <__sflush_r>
 800f19e:	6922      	ldr	r2, [r4, #16]
 800f1a0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800f1a2:	6963      	ldr	r3, [r4, #20]
 800f1a4:	6a21      	ldr	r1, [r4, #32]
 800f1a6:	6022      	str	r2, [r4, #0]
 800f1a8:	4628      	mov	r0, r5
 800f1aa:	47b0      	blx	r6
 800f1ac:	2800      	cmp	r0, #0
 800f1ae:	6060      	str	r0, [r4, #4]
 800f1b0:	dc1c      	bgt.n	800f1ec <__srefill_r+0xfc>
 800f1b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f1b6:	bf17      	itett	ne
 800f1b8:	2200      	movne	r2, #0
 800f1ba:	f043 0320 	orreq.w	r3, r3, #32
 800f1be:	6062      	strne	r2, [r4, #4]
 800f1c0:	f043 0340 	orrne.w	r3, r3, #64	; 0x40
 800f1c4:	e7bc      	b.n	800f140 <__srefill_r+0x50>
 800f1c6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f1c8:	2900      	cmp	r1, #0
 800f1ca:	d0cd      	beq.n	800f168 <__srefill_r+0x78>
 800f1cc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f1d0:	4299      	cmp	r1, r3
 800f1d2:	d002      	beq.n	800f1da <__srefill_r+0xea>
 800f1d4:	4628      	mov	r0, r5
 800f1d6:	f7ff fe8f 	bl	800eef8 <_free_r>
 800f1da:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800f1dc:	6063      	str	r3, [r4, #4]
 800f1de:	2000      	movs	r0, #0
 800f1e0:	6360      	str	r0, [r4, #52]	; 0x34
 800f1e2:	2b00      	cmp	r3, #0
 800f1e4:	d0c0      	beq.n	800f168 <__srefill_r+0x78>
 800f1e6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800f1e8:	6023      	str	r3, [r4, #0]
 800f1ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f1ec:	2000      	movs	r0, #0
 800f1ee:	e7fc      	b.n	800f1ea <__srefill_r+0xfa>
 800f1f0:	080122e4 	.word	0x080122e4
 800f1f4:	08012304 	.word	0x08012304
 800f1f8:	080122c4 	.word	0x080122c4
 800f1fc:	08012324 	.word	0x08012324
 800f200:	0800f0dd 	.word	0x0800f0dd

0800f204 <_sbrk_r>:
 800f204:	b538      	push	{r3, r4, r5, lr}
 800f206:	4d06      	ldr	r5, [pc, #24]	; (800f220 <_sbrk_r+0x1c>)
 800f208:	2300      	movs	r3, #0
 800f20a:	4604      	mov	r4, r0
 800f20c:	4608      	mov	r0, r1
 800f20e:	602b      	str	r3, [r5, #0]
 800f210:	f7f4 fd50 	bl	8003cb4 <_sbrk>
 800f214:	1c43      	adds	r3, r0, #1
 800f216:	d102      	bne.n	800f21e <_sbrk_r+0x1a>
 800f218:	682b      	ldr	r3, [r5, #0]
 800f21a:	b103      	cbz	r3, 800f21e <_sbrk_r+0x1a>
 800f21c:	6023      	str	r3, [r4, #0]
 800f21e:	bd38      	pop	{r3, r4, r5, pc}
 800f220:	24000aa8 	.word	0x24000aa8

0800f224 <__sread>:
 800f224:	b510      	push	{r4, lr}
 800f226:	460c      	mov	r4, r1
 800f228:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f22c:	f001 ff08 	bl	8011040 <_read_r>
 800f230:	2800      	cmp	r0, #0
 800f232:	bfab      	itete	ge
 800f234:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800f236:	89a3      	ldrhlt	r3, [r4, #12]
 800f238:	181b      	addge	r3, r3, r0
 800f23a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800f23e:	bfac      	ite	ge
 800f240:	6563      	strge	r3, [r4, #84]	; 0x54
 800f242:	81a3      	strhlt	r3, [r4, #12]
 800f244:	bd10      	pop	{r4, pc}

0800f246 <__swrite>:
 800f246:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f24a:	461f      	mov	r7, r3
 800f24c:	898b      	ldrh	r3, [r1, #12]
 800f24e:	05db      	lsls	r3, r3, #23
 800f250:	4605      	mov	r5, r0
 800f252:	460c      	mov	r4, r1
 800f254:	4616      	mov	r6, r2
 800f256:	d505      	bpl.n	800f264 <__swrite+0x1e>
 800f258:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f25c:	2302      	movs	r3, #2
 800f25e:	2200      	movs	r2, #0
 800f260:	f001 f9ea 	bl	8010638 <_lseek_r>
 800f264:	89a3      	ldrh	r3, [r4, #12]
 800f266:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f26a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800f26e:	81a3      	strh	r3, [r4, #12]
 800f270:	4632      	mov	r2, r6
 800f272:	463b      	mov	r3, r7
 800f274:	4628      	mov	r0, r5
 800f276:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f27a:	f000 bdf3 	b.w	800fe64 <_write_r>

0800f27e <__sseek>:
 800f27e:	b510      	push	{r4, lr}
 800f280:	460c      	mov	r4, r1
 800f282:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f286:	f001 f9d7 	bl	8010638 <_lseek_r>
 800f28a:	1c43      	adds	r3, r0, #1
 800f28c:	89a3      	ldrh	r3, [r4, #12]
 800f28e:	bf15      	itete	ne
 800f290:	6560      	strne	r0, [r4, #84]	; 0x54
 800f292:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800f296:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800f29a:	81a3      	strheq	r3, [r4, #12]
 800f29c:	bf18      	it	ne
 800f29e:	81a3      	strhne	r3, [r4, #12]
 800f2a0:	bd10      	pop	{r4, pc}

0800f2a2 <__sclose>:
 800f2a2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f2a6:	f000 bdef 	b.w	800fe88 <_close_r>

0800f2aa <sulp>:
 800f2aa:	b570      	push	{r4, r5, r6, lr}
 800f2ac:	4604      	mov	r4, r0
 800f2ae:	460d      	mov	r5, r1
 800f2b0:	4616      	mov	r6, r2
 800f2b2:	ec45 4b10 	vmov	d0, r4, r5
 800f2b6:	f001 fd61 	bl	8010d7c <__ulp>
 800f2ba:	b17e      	cbz	r6, 800f2dc <sulp+0x32>
 800f2bc:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800f2c0:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800f2c4:	2b00      	cmp	r3, #0
 800f2c6:	dd09      	ble.n	800f2dc <sulp+0x32>
 800f2c8:	051b      	lsls	r3, r3, #20
 800f2ca:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
 800f2ce:	2000      	movs	r0, #0
 800f2d0:	f501 1140 	add.w	r1, r1, #3145728	; 0x300000
 800f2d4:	ec41 0b17 	vmov	d7, r0, r1
 800f2d8:	ee20 0b07 	vmul.f64	d0, d0, d7
 800f2dc:	bd70      	pop	{r4, r5, r6, pc}
	...

0800f2e0 <_strtod_l>:
 800f2e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f2e4:	ed2d 8b0e 	vpush	{d8-d14}
 800f2e8:	b097      	sub	sp, #92	; 0x5c
 800f2ea:	461f      	mov	r7, r3
 800f2ec:	2300      	movs	r3, #0
 800f2ee:	9312      	str	r3, [sp, #72]	; 0x48
 800f2f0:	4ba1      	ldr	r3, [pc, #644]	; (800f578 <_strtod_l+0x298>)
 800f2f2:	920d      	str	r2, [sp, #52]	; 0x34
 800f2f4:	681b      	ldr	r3, [r3, #0]
 800f2f6:	9307      	str	r3, [sp, #28]
 800f2f8:	4604      	mov	r4, r0
 800f2fa:	4618      	mov	r0, r3
 800f2fc:	468b      	mov	fp, r1
 800f2fe:	f7f1 f83f 	bl	8000380 <strlen>
 800f302:	f04f 0800 	mov.w	r8, #0
 800f306:	4605      	mov	r5, r0
 800f308:	f04f 0900 	mov.w	r9, #0
 800f30c:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
 800f310:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800f312:	7813      	ldrb	r3, [r2, #0]
 800f314:	2b2b      	cmp	r3, #43	; 0x2b
 800f316:	d04d      	beq.n	800f3b4 <_strtod_l+0xd4>
 800f318:	d83a      	bhi.n	800f390 <_strtod_l+0xb0>
 800f31a:	2b0d      	cmp	r3, #13
 800f31c:	d833      	bhi.n	800f386 <_strtod_l+0xa6>
 800f31e:	2b08      	cmp	r3, #8
 800f320:	d833      	bhi.n	800f38a <_strtod_l+0xaa>
 800f322:	2b00      	cmp	r3, #0
 800f324:	d03d      	beq.n	800f3a2 <_strtod_l+0xc2>
 800f326:	2300      	movs	r3, #0
 800f328:	9308      	str	r3, [sp, #32]
 800f32a:	9e11      	ldr	r6, [sp, #68]	; 0x44
 800f32c:	7833      	ldrb	r3, [r6, #0]
 800f32e:	2b30      	cmp	r3, #48	; 0x30
 800f330:	f040 80b0 	bne.w	800f494 <_strtod_l+0x1b4>
 800f334:	7873      	ldrb	r3, [r6, #1]
 800f336:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800f33a:	2b58      	cmp	r3, #88	; 0x58
 800f33c:	d167      	bne.n	800f40e <_strtod_l+0x12e>
 800f33e:	9b08      	ldr	r3, [sp, #32]
 800f340:	9301      	str	r3, [sp, #4]
 800f342:	ab12      	add	r3, sp, #72	; 0x48
 800f344:	9702      	str	r7, [sp, #8]
 800f346:	9300      	str	r3, [sp, #0]
 800f348:	4a8c      	ldr	r2, [pc, #560]	; (800f57c <_strtod_l+0x29c>)
 800f34a:	ab13      	add	r3, sp, #76	; 0x4c
 800f34c:	a911      	add	r1, sp, #68	; 0x44
 800f34e:	4620      	mov	r0, r4
 800f350:	f000 fe5a 	bl	8010008 <__gethex>
 800f354:	f010 0507 	ands.w	r5, r0, #7
 800f358:	4607      	mov	r7, r0
 800f35a:	d005      	beq.n	800f368 <_strtod_l+0x88>
 800f35c:	2d06      	cmp	r5, #6
 800f35e:	d12b      	bne.n	800f3b8 <_strtod_l+0xd8>
 800f360:	3601      	adds	r6, #1
 800f362:	2300      	movs	r3, #0
 800f364:	9611      	str	r6, [sp, #68]	; 0x44
 800f366:	9308      	str	r3, [sp, #32]
 800f368:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f36a:	2b00      	cmp	r3, #0
 800f36c:	f040 854e 	bne.w	800fe0c <_strtod_l+0xb2c>
 800f370:	9b08      	ldr	r3, [sp, #32]
 800f372:	b1e3      	cbz	r3, 800f3ae <_strtod_l+0xce>
 800f374:	ec49 8b17 	vmov	d7, r8, r9
 800f378:	eeb1 0b47 	vneg.f64	d0, d7
 800f37c:	b017      	add	sp, #92	; 0x5c
 800f37e:	ecbd 8b0e 	vpop	{d8-d14}
 800f382:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f386:	2b20      	cmp	r3, #32
 800f388:	d1cd      	bne.n	800f326 <_strtod_l+0x46>
 800f38a:	3201      	adds	r2, #1
 800f38c:	9211      	str	r2, [sp, #68]	; 0x44
 800f38e:	e7bf      	b.n	800f310 <_strtod_l+0x30>
 800f390:	2b2d      	cmp	r3, #45	; 0x2d
 800f392:	d1c8      	bne.n	800f326 <_strtod_l+0x46>
 800f394:	2301      	movs	r3, #1
 800f396:	9308      	str	r3, [sp, #32]
 800f398:	1c53      	adds	r3, r2, #1
 800f39a:	9311      	str	r3, [sp, #68]	; 0x44
 800f39c:	7853      	ldrb	r3, [r2, #1]
 800f39e:	2b00      	cmp	r3, #0
 800f3a0:	d1c3      	bne.n	800f32a <_strtod_l+0x4a>
 800f3a2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f3a4:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
 800f3a8:	2b00      	cmp	r3, #0
 800f3aa:	f040 852d 	bne.w	800fe08 <_strtod_l+0xb28>
 800f3ae:	ec49 8b10 	vmov	d0, r8, r9
 800f3b2:	e7e3      	b.n	800f37c <_strtod_l+0x9c>
 800f3b4:	2300      	movs	r3, #0
 800f3b6:	e7ee      	b.n	800f396 <_strtod_l+0xb6>
 800f3b8:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800f3ba:	b13a      	cbz	r2, 800f3cc <_strtod_l+0xec>
 800f3bc:	2135      	movs	r1, #53	; 0x35
 800f3be:	a814      	add	r0, sp, #80	; 0x50
 800f3c0:	f001 fde4 	bl	8010f8c <__copybits>
 800f3c4:	9912      	ldr	r1, [sp, #72]	; 0x48
 800f3c6:	4620      	mov	r0, r4
 800f3c8:	f001 f9a6 	bl	8010718 <_Bfree>
 800f3cc:	3d01      	subs	r5, #1
 800f3ce:	2d04      	cmp	r5, #4
 800f3d0:	d806      	bhi.n	800f3e0 <_strtod_l+0x100>
 800f3d2:	e8df f005 	tbb	[pc, r5]
 800f3d6:	030a      	.short	0x030a
 800f3d8:	1714      	.short	0x1714
 800f3da:	0a          	.byte	0x0a
 800f3db:	00          	.byte	0x00
 800f3dc:	e9dd 8914 	ldrd	r8, r9, [sp, #80]	; 0x50
 800f3e0:	073f      	lsls	r7, r7, #28
 800f3e2:	d5c1      	bpl.n	800f368 <_strtod_l+0x88>
 800f3e4:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 800f3e8:	e7be      	b.n	800f368 <_strtod_l+0x88>
 800f3ea:	e9dd 8314 	ldrd	r8, r3, [sp, #80]	; 0x50
 800f3ee:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800f3f0:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800f3f4:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800f3f8:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 800f3fc:	e7f0      	b.n	800f3e0 <_strtod_l+0x100>
 800f3fe:	f8df 9180 	ldr.w	r9, [pc, #384]	; 800f580 <_strtod_l+0x2a0>
 800f402:	e7ed      	b.n	800f3e0 <_strtod_l+0x100>
 800f404:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 800f408:	f04f 38ff 	mov.w	r8, #4294967295
 800f40c:	e7e8      	b.n	800f3e0 <_strtod_l+0x100>
 800f40e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800f410:	1c5a      	adds	r2, r3, #1
 800f412:	9211      	str	r2, [sp, #68]	; 0x44
 800f414:	785b      	ldrb	r3, [r3, #1]
 800f416:	2b30      	cmp	r3, #48	; 0x30
 800f418:	d0f9      	beq.n	800f40e <_strtod_l+0x12e>
 800f41a:	2b00      	cmp	r3, #0
 800f41c:	d0a4      	beq.n	800f368 <_strtod_l+0x88>
 800f41e:	2301      	movs	r3, #1
 800f420:	f04f 0a00 	mov.w	sl, #0
 800f424:	9304      	str	r3, [sp, #16]
 800f426:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800f428:	930a      	str	r3, [sp, #40]	; 0x28
 800f42a:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 800f42e:	f8cd a018 	str.w	sl, [sp, #24]
 800f432:	220a      	movs	r2, #10
 800f434:	9811      	ldr	r0, [sp, #68]	; 0x44
 800f436:	7807      	ldrb	r7, [r0, #0]
 800f438:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 800f43c:	b2d9      	uxtb	r1, r3
 800f43e:	2909      	cmp	r1, #9
 800f440:	d92a      	bls.n	800f498 <_strtod_l+0x1b8>
 800f442:	9907      	ldr	r1, [sp, #28]
 800f444:	462a      	mov	r2, r5
 800f446:	f001 fe17 	bl	8011078 <strncmp>
 800f44a:	2800      	cmp	r0, #0
 800f44c:	d033      	beq.n	800f4b6 <_strtod_l+0x1d6>
 800f44e:	2000      	movs	r0, #0
 800f450:	9b06      	ldr	r3, [sp, #24]
 800f452:	463a      	mov	r2, r7
 800f454:	4601      	mov	r1, r0
 800f456:	4607      	mov	r7, r0
 800f458:	2a65      	cmp	r2, #101	; 0x65
 800f45a:	d001      	beq.n	800f460 <_strtod_l+0x180>
 800f45c:	2a45      	cmp	r2, #69	; 0x45
 800f45e:	d117      	bne.n	800f490 <_strtod_l+0x1b0>
 800f460:	b91b      	cbnz	r3, 800f46a <_strtod_l+0x18a>
 800f462:	9b04      	ldr	r3, [sp, #16]
 800f464:	4303      	orrs	r3, r0
 800f466:	d09c      	beq.n	800f3a2 <_strtod_l+0xc2>
 800f468:	2300      	movs	r3, #0
 800f46a:	f8dd b044 	ldr.w	fp, [sp, #68]	; 0x44
 800f46e:	f10b 0201 	add.w	r2, fp, #1
 800f472:	9211      	str	r2, [sp, #68]	; 0x44
 800f474:	f89b 2001 	ldrb.w	r2, [fp, #1]
 800f478:	2a2b      	cmp	r2, #43	; 0x2b
 800f47a:	d071      	beq.n	800f560 <_strtod_l+0x280>
 800f47c:	2a2d      	cmp	r2, #45	; 0x2d
 800f47e:	d077      	beq.n	800f570 <_strtod_l+0x290>
 800f480:	f04f 0e00 	mov.w	lr, #0
 800f484:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 800f488:	2d09      	cmp	r5, #9
 800f48a:	d97f      	bls.n	800f58c <_strtod_l+0x2ac>
 800f48c:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
 800f490:	2500      	movs	r5, #0
 800f492:	e09b      	b.n	800f5cc <_strtod_l+0x2ec>
 800f494:	2300      	movs	r3, #0
 800f496:	e7c3      	b.n	800f420 <_strtod_l+0x140>
 800f498:	9906      	ldr	r1, [sp, #24]
 800f49a:	2908      	cmp	r1, #8
 800f49c:	bfdd      	ittte	le
 800f49e:	9909      	ldrle	r1, [sp, #36]	; 0x24
 800f4a0:	fb02 3301 	mlale	r3, r2, r1, r3
 800f4a4:	9309      	strle	r3, [sp, #36]	; 0x24
 800f4a6:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 800f4aa:	9b06      	ldr	r3, [sp, #24]
 800f4ac:	3001      	adds	r0, #1
 800f4ae:	3301      	adds	r3, #1
 800f4b0:	9306      	str	r3, [sp, #24]
 800f4b2:	9011      	str	r0, [sp, #68]	; 0x44
 800f4b4:	e7be      	b.n	800f434 <_strtod_l+0x154>
 800f4b6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800f4b8:	195a      	adds	r2, r3, r5
 800f4ba:	9211      	str	r2, [sp, #68]	; 0x44
 800f4bc:	5d5a      	ldrb	r2, [r3, r5]
 800f4be:	9b06      	ldr	r3, [sp, #24]
 800f4c0:	b3a3      	cbz	r3, 800f52c <_strtod_l+0x24c>
 800f4c2:	4607      	mov	r7, r0
 800f4c4:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800f4c8:	2909      	cmp	r1, #9
 800f4ca:	d912      	bls.n	800f4f2 <_strtod_l+0x212>
 800f4cc:	2101      	movs	r1, #1
 800f4ce:	e7c3      	b.n	800f458 <_strtod_l+0x178>
 800f4d0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800f4d2:	1c5a      	adds	r2, r3, #1
 800f4d4:	9211      	str	r2, [sp, #68]	; 0x44
 800f4d6:	785a      	ldrb	r2, [r3, #1]
 800f4d8:	3001      	adds	r0, #1
 800f4da:	2a30      	cmp	r2, #48	; 0x30
 800f4dc:	d0f8      	beq.n	800f4d0 <_strtod_l+0x1f0>
 800f4de:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800f4e2:	2b08      	cmp	r3, #8
 800f4e4:	f200 8497 	bhi.w	800fe16 <_strtod_l+0xb36>
 800f4e8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800f4ea:	930a      	str	r3, [sp, #40]	; 0x28
 800f4ec:	4607      	mov	r7, r0
 800f4ee:	2000      	movs	r0, #0
 800f4f0:	4603      	mov	r3, r0
 800f4f2:	3a30      	subs	r2, #48	; 0x30
 800f4f4:	f100 0101 	add.w	r1, r0, #1
 800f4f8:	d012      	beq.n	800f520 <_strtod_l+0x240>
 800f4fa:	440f      	add	r7, r1
 800f4fc:	eb00 0c03 	add.w	ip, r0, r3
 800f500:	4619      	mov	r1, r3
 800f502:	250a      	movs	r5, #10
 800f504:	4561      	cmp	r1, ip
 800f506:	d113      	bne.n	800f530 <_strtod_l+0x250>
 800f508:	1819      	adds	r1, r3, r0
 800f50a:	2908      	cmp	r1, #8
 800f50c:	f103 0301 	add.w	r3, r3, #1
 800f510:	4403      	add	r3, r0
 800f512:	dc1c      	bgt.n	800f54e <_strtod_l+0x26e>
 800f514:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f516:	210a      	movs	r1, #10
 800f518:	fb01 2200 	mla	r2, r1, r0, r2
 800f51c:	9209      	str	r2, [sp, #36]	; 0x24
 800f51e:	2100      	movs	r1, #0
 800f520:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800f522:	1c50      	adds	r0, r2, #1
 800f524:	9011      	str	r0, [sp, #68]	; 0x44
 800f526:	7852      	ldrb	r2, [r2, #1]
 800f528:	4608      	mov	r0, r1
 800f52a:	e7cb      	b.n	800f4c4 <_strtod_l+0x1e4>
 800f52c:	9806      	ldr	r0, [sp, #24]
 800f52e:	e7d4      	b.n	800f4da <_strtod_l+0x1fa>
 800f530:	2908      	cmp	r1, #8
 800f532:	dc04      	bgt.n	800f53e <_strtod_l+0x25e>
 800f534:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800f536:	436e      	muls	r6, r5
 800f538:	9609      	str	r6, [sp, #36]	; 0x24
 800f53a:	3101      	adds	r1, #1
 800f53c:	e7e2      	b.n	800f504 <_strtod_l+0x224>
 800f53e:	f101 0e01 	add.w	lr, r1, #1
 800f542:	f1be 0f10 	cmp.w	lr, #16
 800f546:	bfd8      	it	le
 800f548:	fb05 fa0a 	mulle.w	sl, r5, sl
 800f54c:	e7f5      	b.n	800f53a <_strtod_l+0x25a>
 800f54e:	2b10      	cmp	r3, #16
 800f550:	bfdc      	itt	le
 800f552:	210a      	movle	r1, #10
 800f554:	fb01 2a0a 	mlale	sl, r1, sl, r2
 800f558:	e7e1      	b.n	800f51e <_strtod_l+0x23e>
 800f55a:	2700      	movs	r7, #0
 800f55c:	2101      	movs	r1, #1
 800f55e:	e780      	b.n	800f462 <_strtod_l+0x182>
 800f560:	f04f 0e00 	mov.w	lr, #0
 800f564:	f10b 0202 	add.w	r2, fp, #2
 800f568:	9211      	str	r2, [sp, #68]	; 0x44
 800f56a:	f89b 2002 	ldrb.w	r2, [fp, #2]
 800f56e:	e789      	b.n	800f484 <_strtod_l+0x1a4>
 800f570:	f04f 0e01 	mov.w	lr, #1
 800f574:	e7f6      	b.n	800f564 <_strtod_l+0x284>
 800f576:	bf00      	nop
 800f578:	08012400 	.word	0x08012400
 800f57c:	08012334 	.word	0x08012334
 800f580:	7ff00000 	.word	0x7ff00000
 800f584:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800f586:	1c55      	adds	r5, r2, #1
 800f588:	9511      	str	r5, [sp, #68]	; 0x44
 800f58a:	7852      	ldrb	r2, [r2, #1]
 800f58c:	2a30      	cmp	r2, #48	; 0x30
 800f58e:	d0f9      	beq.n	800f584 <_strtod_l+0x2a4>
 800f590:	f1a2 0531 	sub.w	r5, r2, #49	; 0x31
 800f594:	2d08      	cmp	r5, #8
 800f596:	f63f af7b 	bhi.w	800f490 <_strtod_l+0x1b0>
 800f59a:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 800f59e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800f5a0:	9207      	str	r2, [sp, #28]
 800f5a2:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800f5a4:	1c55      	adds	r5, r2, #1
 800f5a6:	9511      	str	r5, [sp, #68]	; 0x44
 800f5a8:	7852      	ldrb	r2, [r2, #1]
 800f5aa:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 800f5ae:	2e09      	cmp	r6, #9
 800f5b0:	d937      	bls.n	800f622 <_strtod_l+0x342>
 800f5b2:	9e07      	ldr	r6, [sp, #28]
 800f5b4:	1bad      	subs	r5, r5, r6
 800f5b6:	2d08      	cmp	r5, #8
 800f5b8:	f644 651f 	movw	r5, #19999	; 0x4e1f
 800f5bc:	dc02      	bgt.n	800f5c4 <_strtod_l+0x2e4>
 800f5be:	4565      	cmp	r5, ip
 800f5c0:	bfa8      	it	ge
 800f5c2:	4665      	movge	r5, ip
 800f5c4:	f1be 0f00 	cmp.w	lr, #0
 800f5c8:	d000      	beq.n	800f5cc <_strtod_l+0x2ec>
 800f5ca:	426d      	negs	r5, r5
 800f5cc:	2b00      	cmp	r3, #0
 800f5ce:	d14d      	bne.n	800f66c <_strtod_l+0x38c>
 800f5d0:	9b04      	ldr	r3, [sp, #16]
 800f5d2:	4303      	orrs	r3, r0
 800f5d4:	f47f aec8 	bne.w	800f368 <_strtod_l+0x88>
 800f5d8:	2900      	cmp	r1, #0
 800f5da:	f47f aee2 	bne.w	800f3a2 <_strtod_l+0xc2>
 800f5de:	2a69      	cmp	r2, #105	; 0x69
 800f5e0:	d027      	beq.n	800f632 <_strtod_l+0x352>
 800f5e2:	dc24      	bgt.n	800f62e <_strtod_l+0x34e>
 800f5e4:	2a49      	cmp	r2, #73	; 0x49
 800f5e6:	d024      	beq.n	800f632 <_strtod_l+0x352>
 800f5e8:	2a4e      	cmp	r2, #78	; 0x4e
 800f5ea:	f47f aeda 	bne.w	800f3a2 <_strtod_l+0xc2>
 800f5ee:	4996      	ldr	r1, [pc, #600]	; (800f848 <_strtod_l+0x568>)
 800f5f0:	a811      	add	r0, sp, #68	; 0x44
 800f5f2:	f000 ff61 	bl	80104b8 <__match>
 800f5f6:	2800      	cmp	r0, #0
 800f5f8:	f43f aed3 	beq.w	800f3a2 <_strtod_l+0xc2>
 800f5fc:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800f5fe:	781b      	ldrb	r3, [r3, #0]
 800f600:	2b28      	cmp	r3, #40	; 0x28
 800f602:	d12d      	bne.n	800f660 <_strtod_l+0x380>
 800f604:	4991      	ldr	r1, [pc, #580]	; (800f84c <_strtod_l+0x56c>)
 800f606:	aa14      	add	r2, sp, #80	; 0x50
 800f608:	a811      	add	r0, sp, #68	; 0x44
 800f60a:	f000 ff69 	bl	80104e0 <__hexnan>
 800f60e:	2805      	cmp	r0, #5
 800f610:	d126      	bne.n	800f660 <_strtod_l+0x380>
 800f612:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800f614:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 800f618:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 800f61c:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 800f620:	e6a2      	b.n	800f368 <_strtod_l+0x88>
 800f622:	250a      	movs	r5, #10
 800f624:	fb05 250c 	mla	r5, r5, ip, r2
 800f628:	f1a5 0c30 	sub.w	ip, r5, #48	; 0x30
 800f62c:	e7b9      	b.n	800f5a2 <_strtod_l+0x2c2>
 800f62e:	2a6e      	cmp	r2, #110	; 0x6e
 800f630:	e7db      	b.n	800f5ea <_strtod_l+0x30a>
 800f632:	4987      	ldr	r1, [pc, #540]	; (800f850 <_strtod_l+0x570>)
 800f634:	a811      	add	r0, sp, #68	; 0x44
 800f636:	f000 ff3f 	bl	80104b8 <__match>
 800f63a:	2800      	cmp	r0, #0
 800f63c:	f43f aeb1 	beq.w	800f3a2 <_strtod_l+0xc2>
 800f640:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800f642:	4984      	ldr	r1, [pc, #528]	; (800f854 <_strtod_l+0x574>)
 800f644:	3b01      	subs	r3, #1
 800f646:	a811      	add	r0, sp, #68	; 0x44
 800f648:	9311      	str	r3, [sp, #68]	; 0x44
 800f64a:	f000 ff35 	bl	80104b8 <__match>
 800f64e:	b910      	cbnz	r0, 800f656 <_strtod_l+0x376>
 800f650:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800f652:	3301      	adds	r3, #1
 800f654:	9311      	str	r3, [sp, #68]	; 0x44
 800f656:	f8df 9210 	ldr.w	r9, [pc, #528]	; 800f868 <_strtod_l+0x588>
 800f65a:	f04f 0800 	mov.w	r8, #0
 800f65e:	e683      	b.n	800f368 <_strtod_l+0x88>
 800f660:	487d      	ldr	r0, [pc, #500]	; (800f858 <_strtod_l+0x578>)
 800f662:	f001 fd01 	bl	8011068 <nan>
 800f666:	ec59 8b10 	vmov	r8, r9, d0
 800f66a:	e67d      	b.n	800f368 <_strtod_l+0x88>
 800f66c:	1bea      	subs	r2, r5, r7
 800f66e:	eddd 7a09 	vldr	s15, [sp, #36]	; 0x24
 800f672:	9207      	str	r2, [sp, #28]
 800f674:	9a06      	ldr	r2, [sp, #24]
 800f676:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800f67a:	2a00      	cmp	r2, #0
 800f67c:	bf08      	it	eq
 800f67e:	461a      	moveq	r2, r3
 800f680:	2b10      	cmp	r3, #16
 800f682:	9206      	str	r2, [sp, #24]
 800f684:	461a      	mov	r2, r3
 800f686:	bfa8      	it	ge
 800f688:	2210      	movge	r2, #16
 800f68a:	2b09      	cmp	r3, #9
 800f68c:	ec59 8b17 	vmov	r8, r9, d7
 800f690:	dd0c      	ble.n	800f6ac <_strtod_l+0x3cc>
 800f692:	4972      	ldr	r1, [pc, #456]	; (800f85c <_strtod_l+0x57c>)
 800f694:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 800f698:	ed11 5b12 	vldr	d5, [r1, #-72]	; 0xffffffb8
 800f69c:	ee06 aa90 	vmov	s13, sl
 800f6a0:	eeb8 6b66 	vcvt.f64.u32	d6, s13
 800f6a4:	eea7 6b05 	vfma.f64	d6, d7, d5
 800f6a8:	ec59 8b16 	vmov	r8, r9, d6
 800f6ac:	2b0f      	cmp	r3, #15
 800f6ae:	dc36      	bgt.n	800f71e <_strtod_l+0x43e>
 800f6b0:	9907      	ldr	r1, [sp, #28]
 800f6b2:	2900      	cmp	r1, #0
 800f6b4:	f43f ae58 	beq.w	800f368 <_strtod_l+0x88>
 800f6b8:	dd23      	ble.n	800f702 <_strtod_l+0x422>
 800f6ba:	2916      	cmp	r1, #22
 800f6bc:	dc0b      	bgt.n	800f6d6 <_strtod_l+0x3f6>
 800f6be:	4b67      	ldr	r3, [pc, #412]	; (800f85c <_strtod_l+0x57c>)
 800f6c0:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 800f6c4:	ed93 7b00 	vldr	d7, [r3]
 800f6c8:	ec49 8b16 	vmov	d6, r8, r9
 800f6cc:	ee27 7b06 	vmul.f64	d7, d7, d6
 800f6d0:	ec59 8b17 	vmov	r8, r9, d7
 800f6d4:	e648      	b.n	800f368 <_strtod_l+0x88>
 800f6d6:	9807      	ldr	r0, [sp, #28]
 800f6d8:	f1c3 0125 	rsb	r1, r3, #37	; 0x25
 800f6dc:	4281      	cmp	r1, r0
 800f6de:	db1e      	blt.n	800f71e <_strtod_l+0x43e>
 800f6e0:	4a5e      	ldr	r2, [pc, #376]	; (800f85c <_strtod_l+0x57c>)
 800f6e2:	f1c3 030f 	rsb	r3, r3, #15
 800f6e6:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 800f6ea:	ed91 7b00 	vldr	d7, [r1]
 800f6ee:	ec49 8b16 	vmov	d6, r8, r9
 800f6f2:	1ac3      	subs	r3, r0, r3
 800f6f4:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 800f6f8:	ee27 7b06 	vmul.f64	d7, d7, d6
 800f6fc:	ed92 6b00 	vldr	d6, [r2]
 800f700:	e7e4      	b.n	800f6cc <_strtod_l+0x3ec>
 800f702:	9907      	ldr	r1, [sp, #28]
 800f704:	3116      	adds	r1, #22
 800f706:	db0a      	blt.n	800f71e <_strtod_l+0x43e>
 800f708:	4b54      	ldr	r3, [pc, #336]	; (800f85c <_strtod_l+0x57c>)
 800f70a:	1b7d      	subs	r5, r7, r5
 800f70c:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800f710:	ed95 7b00 	vldr	d7, [r5]
 800f714:	ec49 8b16 	vmov	d6, r8, r9
 800f718:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800f71c:	e7d8      	b.n	800f6d0 <_strtod_l+0x3f0>
 800f71e:	9907      	ldr	r1, [sp, #28]
 800f720:	1a9a      	subs	r2, r3, r2
 800f722:	440a      	add	r2, r1
 800f724:	2a00      	cmp	r2, #0
 800f726:	dd6f      	ble.n	800f808 <_strtod_l+0x528>
 800f728:	f012 000f 	ands.w	r0, r2, #15
 800f72c:	d00a      	beq.n	800f744 <_strtod_l+0x464>
 800f72e:	494b      	ldr	r1, [pc, #300]	; (800f85c <_strtod_l+0x57c>)
 800f730:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 800f734:	ed91 7b00 	vldr	d7, [r1]
 800f738:	ec49 8b16 	vmov	d6, r8, r9
 800f73c:	ee27 7b06 	vmul.f64	d7, d7, d6
 800f740:	ec59 8b17 	vmov	r8, r9, d7
 800f744:	f032 020f 	bics.w	r2, r2, #15
 800f748:	d04f      	beq.n	800f7ea <_strtod_l+0x50a>
 800f74a:	f5b2 7f9a 	cmp.w	r2, #308	; 0x134
 800f74e:	dd22      	ble.n	800f796 <_strtod_l+0x4b6>
 800f750:	2500      	movs	r5, #0
 800f752:	462e      	mov	r6, r5
 800f754:	9506      	str	r5, [sp, #24]
 800f756:	462f      	mov	r7, r5
 800f758:	2322      	movs	r3, #34	; 0x22
 800f75a:	f8df 910c 	ldr.w	r9, [pc, #268]	; 800f868 <_strtod_l+0x588>
 800f75e:	6023      	str	r3, [r4, #0]
 800f760:	f04f 0800 	mov.w	r8, #0
 800f764:	9b06      	ldr	r3, [sp, #24]
 800f766:	2b00      	cmp	r3, #0
 800f768:	f43f adfe 	beq.w	800f368 <_strtod_l+0x88>
 800f76c:	9912      	ldr	r1, [sp, #72]	; 0x48
 800f76e:	4620      	mov	r0, r4
 800f770:	f000 ffd2 	bl	8010718 <_Bfree>
 800f774:	4639      	mov	r1, r7
 800f776:	4620      	mov	r0, r4
 800f778:	f000 ffce 	bl	8010718 <_Bfree>
 800f77c:	4631      	mov	r1, r6
 800f77e:	4620      	mov	r0, r4
 800f780:	f000 ffca 	bl	8010718 <_Bfree>
 800f784:	9906      	ldr	r1, [sp, #24]
 800f786:	4620      	mov	r0, r4
 800f788:	f000 ffc6 	bl	8010718 <_Bfree>
 800f78c:	4629      	mov	r1, r5
 800f78e:	4620      	mov	r0, r4
 800f790:	f000 ffc2 	bl	8010718 <_Bfree>
 800f794:	e5e8      	b.n	800f368 <_strtod_l+0x88>
 800f796:	2000      	movs	r0, #0
 800f798:	ec49 8b17 	vmov	d7, r8, r9
 800f79c:	f8df c0c0 	ldr.w	ip, [pc, #192]	; 800f860 <_strtod_l+0x580>
 800f7a0:	1112      	asrs	r2, r2, #4
 800f7a2:	4601      	mov	r1, r0
 800f7a4:	2a01      	cmp	r2, #1
 800f7a6:	dc23      	bgt.n	800f7f0 <_strtod_l+0x510>
 800f7a8:	b108      	cbz	r0, 800f7ae <_strtod_l+0x4ce>
 800f7aa:	ec59 8b17 	vmov	r8, r9, d7
 800f7ae:	4a2c      	ldr	r2, [pc, #176]	; (800f860 <_strtod_l+0x580>)
 800f7b0:	482c      	ldr	r0, [pc, #176]	; (800f864 <_strtod_l+0x584>)
 800f7b2:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800f7b6:	ed92 7b00 	vldr	d7, [r2]
 800f7ba:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 800f7be:	ec49 8b16 	vmov	d6, r8, r9
 800f7c2:	4a29      	ldr	r2, [pc, #164]	; (800f868 <_strtod_l+0x588>)
 800f7c4:	ee27 7b06 	vmul.f64	d7, d7, d6
 800f7c8:	ee17 1a90 	vmov	r1, s15
 800f7cc:	400a      	ands	r2, r1
 800f7ce:	4282      	cmp	r2, r0
 800f7d0:	ec59 8b17 	vmov	r8, r9, d7
 800f7d4:	d8bc      	bhi.n	800f750 <_strtod_l+0x470>
 800f7d6:	f5a0 1080 	sub.w	r0, r0, #1048576	; 0x100000
 800f7da:	4282      	cmp	r2, r0
 800f7dc:	bf86      	itte	hi
 800f7de:	f8df 908c 	ldrhi.w	r9, [pc, #140]	; 800f86c <_strtod_l+0x58c>
 800f7e2:	f04f 38ff 	movhi.w	r8, #4294967295
 800f7e6:	f101 7954 	addls.w	r9, r1, #55574528	; 0x3500000
 800f7ea:	2200      	movs	r2, #0
 800f7ec:	9204      	str	r2, [sp, #16]
 800f7ee:	e078      	b.n	800f8e2 <_strtod_l+0x602>
 800f7f0:	07d6      	lsls	r6, r2, #31
 800f7f2:	d504      	bpl.n	800f7fe <_strtod_l+0x51e>
 800f7f4:	ed9c 6b00 	vldr	d6, [ip]
 800f7f8:	2001      	movs	r0, #1
 800f7fa:	ee27 7b06 	vmul.f64	d7, d7, d6
 800f7fe:	3101      	adds	r1, #1
 800f800:	1052      	asrs	r2, r2, #1
 800f802:	f10c 0c08 	add.w	ip, ip, #8
 800f806:	e7cd      	b.n	800f7a4 <_strtod_l+0x4c4>
 800f808:	d0ef      	beq.n	800f7ea <_strtod_l+0x50a>
 800f80a:	4252      	negs	r2, r2
 800f80c:	f012 000f 	ands.w	r0, r2, #15
 800f810:	d00a      	beq.n	800f828 <_strtod_l+0x548>
 800f812:	4912      	ldr	r1, [pc, #72]	; (800f85c <_strtod_l+0x57c>)
 800f814:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 800f818:	ed91 7b00 	vldr	d7, [r1]
 800f81c:	ec49 8b16 	vmov	d6, r8, r9
 800f820:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800f824:	ec59 8b17 	vmov	r8, r9, d7
 800f828:	1112      	asrs	r2, r2, #4
 800f82a:	d0de      	beq.n	800f7ea <_strtod_l+0x50a>
 800f82c:	2a1f      	cmp	r2, #31
 800f82e:	dd1f      	ble.n	800f870 <_strtod_l+0x590>
 800f830:	2500      	movs	r5, #0
 800f832:	462e      	mov	r6, r5
 800f834:	9506      	str	r5, [sp, #24]
 800f836:	462f      	mov	r7, r5
 800f838:	2322      	movs	r3, #34	; 0x22
 800f83a:	f04f 0800 	mov.w	r8, #0
 800f83e:	f04f 0900 	mov.w	r9, #0
 800f842:	6023      	str	r3, [r4, #0]
 800f844:	e78e      	b.n	800f764 <_strtod_l+0x484>
 800f846:	bf00      	nop
 800f848:	08012331 	.word	0x08012331
 800f84c:	08012348 	.word	0x08012348
 800f850:	08012328 	.word	0x08012328
 800f854:	0801232b 	.word	0x0801232b
 800f858:	080125bf 	.word	0x080125bf
 800f85c:	080124b0 	.word	0x080124b0
 800f860:	08012488 	.word	0x08012488
 800f864:	7ca00000 	.word	0x7ca00000
 800f868:	7ff00000 	.word	0x7ff00000
 800f86c:	7fefffff 	.word	0x7fefffff
 800f870:	f012 0110 	ands.w	r1, r2, #16
 800f874:	bf18      	it	ne
 800f876:	216a      	movne	r1, #106	; 0x6a
 800f878:	9104      	str	r1, [sp, #16]
 800f87a:	ec49 8b17 	vmov	d7, r8, r9
 800f87e:	49be      	ldr	r1, [pc, #760]	; (800fb78 <_strtod_l+0x898>)
 800f880:	2000      	movs	r0, #0
 800f882:	07d6      	lsls	r6, r2, #31
 800f884:	d504      	bpl.n	800f890 <_strtod_l+0x5b0>
 800f886:	ed91 6b00 	vldr	d6, [r1]
 800f88a:	2001      	movs	r0, #1
 800f88c:	ee27 7b06 	vmul.f64	d7, d7, d6
 800f890:	1052      	asrs	r2, r2, #1
 800f892:	f101 0108 	add.w	r1, r1, #8
 800f896:	d1f4      	bne.n	800f882 <_strtod_l+0x5a2>
 800f898:	b108      	cbz	r0, 800f89e <_strtod_l+0x5be>
 800f89a:	ec59 8b17 	vmov	r8, r9, d7
 800f89e:	9a04      	ldr	r2, [sp, #16]
 800f8a0:	b1c2      	cbz	r2, 800f8d4 <_strtod_l+0x5f4>
 800f8a2:	f3c9 510a 	ubfx	r1, r9, #20, #11
 800f8a6:	f1c1 026b 	rsb	r2, r1, #107	; 0x6b
 800f8aa:	2a00      	cmp	r2, #0
 800f8ac:	4648      	mov	r0, r9
 800f8ae:	dd11      	ble.n	800f8d4 <_strtod_l+0x5f4>
 800f8b0:	2a1f      	cmp	r2, #31
 800f8b2:	f340 812e 	ble.w	800fb12 <_strtod_l+0x832>
 800f8b6:	2a34      	cmp	r2, #52	; 0x34
 800f8b8:	bfde      	ittt	le
 800f8ba:	f1c1 014b 	rsble	r1, r1, #75	; 0x4b
 800f8be:	f04f 32ff 	movle.w	r2, #4294967295
 800f8c2:	fa02 f101 	lslle.w	r1, r2, r1
 800f8c6:	f04f 0800 	mov.w	r8, #0
 800f8ca:	bfcc      	ite	gt
 800f8cc:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 800f8d0:	ea01 0900 	andle.w	r9, r1, r0
 800f8d4:	ec49 8b17 	vmov	d7, r8, r9
 800f8d8:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800f8dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f8e0:	d0a6      	beq.n	800f830 <_strtod_l+0x550>
 800f8e2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f8e4:	9200      	str	r2, [sp, #0]
 800f8e6:	990a      	ldr	r1, [sp, #40]	; 0x28
 800f8e8:	9a06      	ldr	r2, [sp, #24]
 800f8ea:	4620      	mov	r0, r4
 800f8ec:	f000 ff7c 	bl	80107e8 <__s2b>
 800f8f0:	9006      	str	r0, [sp, #24]
 800f8f2:	2800      	cmp	r0, #0
 800f8f4:	f43f af2c 	beq.w	800f750 <_strtod_l+0x470>
 800f8f8:	9b07      	ldr	r3, [sp, #28]
 800f8fa:	1b7d      	subs	r5, r7, r5
 800f8fc:	2b00      	cmp	r3, #0
 800f8fe:	bfb4      	ite	lt
 800f900:	462b      	movlt	r3, r5
 800f902:	2300      	movge	r3, #0
 800f904:	9309      	str	r3, [sp, #36]	; 0x24
 800f906:	9b07      	ldr	r3, [sp, #28]
 800f908:	ed9f 9b93 	vldr	d9, [pc, #588]	; 800fb58 <_strtod_l+0x878>
 800f90c:	ed9f ab94 	vldr	d10, [pc, #592]	; 800fb60 <_strtod_l+0x880>
 800f910:	ed9f bb95 	vldr	d11, [pc, #596]	; 800fb68 <_strtod_l+0x888>
 800f914:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800f918:	2500      	movs	r5, #0
 800f91a:	930c      	str	r3, [sp, #48]	; 0x30
 800f91c:	462e      	mov	r6, r5
 800f91e:	9b06      	ldr	r3, [sp, #24]
 800f920:	4620      	mov	r0, r4
 800f922:	6859      	ldr	r1, [r3, #4]
 800f924:	f000 feb8 	bl	8010698 <_Balloc>
 800f928:	4607      	mov	r7, r0
 800f92a:	2800      	cmp	r0, #0
 800f92c:	f43f af14 	beq.w	800f758 <_strtod_l+0x478>
 800f930:	9b06      	ldr	r3, [sp, #24]
 800f932:	691a      	ldr	r2, [r3, #16]
 800f934:	3202      	adds	r2, #2
 800f936:	f103 010c 	add.w	r1, r3, #12
 800f93a:	0092      	lsls	r2, r2, #2
 800f93c:	300c      	adds	r0, #12
 800f93e:	f7ff fac5 	bl	800eecc <memcpy>
 800f942:	ec49 8b10 	vmov	d0, r8, r9
 800f946:	aa14      	add	r2, sp, #80	; 0x50
 800f948:	a913      	add	r1, sp, #76	; 0x4c
 800f94a:	4620      	mov	r0, r4
 800f94c:	f001 fa92 	bl	8010e74 <__d2b>
 800f950:	ec49 8b18 	vmov	d8, r8, r9
 800f954:	9012      	str	r0, [sp, #72]	; 0x48
 800f956:	2800      	cmp	r0, #0
 800f958:	f43f aefe 	beq.w	800f758 <_strtod_l+0x478>
 800f95c:	2101      	movs	r1, #1
 800f95e:	4620      	mov	r0, r4
 800f960:	f000 ffdc 	bl	801091c <__i2b>
 800f964:	4606      	mov	r6, r0
 800f966:	2800      	cmp	r0, #0
 800f968:	f43f aef6 	beq.w	800f758 <_strtod_l+0x478>
 800f96c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800f96e:	9914      	ldr	r1, [sp, #80]	; 0x50
 800f970:	2b00      	cmp	r3, #0
 800f972:	bfab      	itete	ge
 800f974:	9a09      	ldrge	r2, [sp, #36]	; 0x24
 800f976:	9a0c      	ldrlt	r2, [sp, #48]	; 0x30
 800f978:	f8dd a030 	ldrge.w	sl, [sp, #48]	; 0x30
 800f97c:	f8dd b024 	ldrlt.w	fp, [sp, #36]	; 0x24
 800f980:	bfac      	ite	ge
 800f982:	eb03 0b02 	addge.w	fp, r3, r2
 800f986:	eba2 0a03 	sublt.w	sl, r2, r3
 800f98a:	9a04      	ldr	r2, [sp, #16]
 800f98c:	1a9b      	subs	r3, r3, r2
 800f98e:	440b      	add	r3, r1
 800f990:	4a7a      	ldr	r2, [pc, #488]	; (800fb7c <_strtod_l+0x89c>)
 800f992:	3b01      	subs	r3, #1
 800f994:	4293      	cmp	r3, r2
 800f996:	f1c1 0136 	rsb	r1, r1, #54	; 0x36
 800f99a:	f280 80cd 	bge.w	800fb38 <_strtod_l+0x858>
 800f99e:	1ad2      	subs	r2, r2, r3
 800f9a0:	2a1f      	cmp	r2, #31
 800f9a2:	eba1 0102 	sub.w	r1, r1, r2
 800f9a6:	f04f 0001 	mov.w	r0, #1
 800f9aa:	f300 80b9 	bgt.w	800fb20 <_strtod_l+0x840>
 800f9ae:	fa00 f302 	lsl.w	r3, r0, r2
 800f9b2:	930b      	str	r3, [sp, #44]	; 0x2c
 800f9b4:	2300      	movs	r3, #0
 800f9b6:	930a      	str	r3, [sp, #40]	; 0x28
 800f9b8:	eb0b 0301 	add.w	r3, fp, r1
 800f9bc:	9a04      	ldr	r2, [sp, #16]
 800f9be:	459b      	cmp	fp, r3
 800f9c0:	448a      	add	sl, r1
 800f9c2:	4492      	add	sl, r2
 800f9c4:	465a      	mov	r2, fp
 800f9c6:	bfa8      	it	ge
 800f9c8:	461a      	movge	r2, r3
 800f9ca:	4552      	cmp	r2, sl
 800f9cc:	bfa8      	it	ge
 800f9ce:	4652      	movge	r2, sl
 800f9d0:	2a00      	cmp	r2, #0
 800f9d2:	bfc2      	ittt	gt
 800f9d4:	1a9b      	subgt	r3, r3, r2
 800f9d6:	ebaa 0a02 	subgt.w	sl, sl, r2
 800f9da:	ebab 0b02 	subgt.w	fp, fp, r2
 800f9de:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f9e0:	2a00      	cmp	r2, #0
 800f9e2:	dd18      	ble.n	800fa16 <_strtod_l+0x736>
 800f9e4:	4631      	mov	r1, r6
 800f9e6:	4620      	mov	r0, r4
 800f9e8:	930f      	str	r3, [sp, #60]	; 0x3c
 800f9ea:	f001 f857 	bl	8010a9c <__pow5mult>
 800f9ee:	4606      	mov	r6, r0
 800f9f0:	2800      	cmp	r0, #0
 800f9f2:	f43f aeb1 	beq.w	800f758 <_strtod_l+0x478>
 800f9f6:	4601      	mov	r1, r0
 800f9f8:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800f9fa:	4620      	mov	r0, r4
 800f9fc:	f000 ffa4 	bl	8010948 <__multiply>
 800fa00:	900e      	str	r0, [sp, #56]	; 0x38
 800fa02:	2800      	cmp	r0, #0
 800fa04:	f43f aea8 	beq.w	800f758 <_strtod_l+0x478>
 800fa08:	9912      	ldr	r1, [sp, #72]	; 0x48
 800fa0a:	4620      	mov	r0, r4
 800fa0c:	f000 fe84 	bl	8010718 <_Bfree>
 800fa10:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800fa12:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800fa14:	9212      	str	r2, [sp, #72]	; 0x48
 800fa16:	2b00      	cmp	r3, #0
 800fa18:	f300 8093 	bgt.w	800fb42 <_strtod_l+0x862>
 800fa1c:	9b07      	ldr	r3, [sp, #28]
 800fa1e:	2b00      	cmp	r3, #0
 800fa20:	dd08      	ble.n	800fa34 <_strtod_l+0x754>
 800fa22:	4639      	mov	r1, r7
 800fa24:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800fa26:	4620      	mov	r0, r4
 800fa28:	f001 f838 	bl	8010a9c <__pow5mult>
 800fa2c:	4607      	mov	r7, r0
 800fa2e:	2800      	cmp	r0, #0
 800fa30:	f43f ae92 	beq.w	800f758 <_strtod_l+0x478>
 800fa34:	f1ba 0f00 	cmp.w	sl, #0
 800fa38:	dd08      	ble.n	800fa4c <_strtod_l+0x76c>
 800fa3a:	4639      	mov	r1, r7
 800fa3c:	4652      	mov	r2, sl
 800fa3e:	4620      	mov	r0, r4
 800fa40:	f001 f886 	bl	8010b50 <__lshift>
 800fa44:	4607      	mov	r7, r0
 800fa46:	2800      	cmp	r0, #0
 800fa48:	f43f ae86 	beq.w	800f758 <_strtod_l+0x478>
 800fa4c:	f1bb 0f00 	cmp.w	fp, #0
 800fa50:	dd08      	ble.n	800fa64 <_strtod_l+0x784>
 800fa52:	4631      	mov	r1, r6
 800fa54:	465a      	mov	r2, fp
 800fa56:	4620      	mov	r0, r4
 800fa58:	f001 f87a 	bl	8010b50 <__lshift>
 800fa5c:	4606      	mov	r6, r0
 800fa5e:	2800      	cmp	r0, #0
 800fa60:	f43f ae7a 	beq.w	800f758 <_strtod_l+0x478>
 800fa64:	9912      	ldr	r1, [sp, #72]	; 0x48
 800fa66:	463a      	mov	r2, r7
 800fa68:	4620      	mov	r0, r4
 800fa6a:	f001 f8fd 	bl	8010c68 <__mdiff>
 800fa6e:	4605      	mov	r5, r0
 800fa70:	2800      	cmp	r0, #0
 800fa72:	f43f ae71 	beq.w	800f758 <_strtod_l+0x478>
 800fa76:	2300      	movs	r3, #0
 800fa78:	f8d0 a00c 	ldr.w	sl, [r0, #12]
 800fa7c:	60c3      	str	r3, [r0, #12]
 800fa7e:	4631      	mov	r1, r6
 800fa80:	f001 f8d6 	bl	8010c30 <__mcmp>
 800fa84:	2800      	cmp	r0, #0
 800fa86:	da7d      	bge.n	800fb84 <_strtod_l+0x8a4>
 800fa88:	ea5a 0308 	orrs.w	r3, sl, r8
 800fa8c:	f040 80a3 	bne.w	800fbd6 <_strtod_l+0x8f6>
 800fa90:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800fa94:	2b00      	cmp	r3, #0
 800fa96:	f040 809e 	bne.w	800fbd6 <_strtod_l+0x8f6>
 800fa9a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800fa9e:	0d1b      	lsrs	r3, r3, #20
 800faa0:	051b      	lsls	r3, r3, #20
 800faa2:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800faa6:	f240 8096 	bls.w	800fbd6 <_strtod_l+0x8f6>
 800faaa:	696b      	ldr	r3, [r5, #20]
 800faac:	b91b      	cbnz	r3, 800fab6 <_strtod_l+0x7d6>
 800faae:	692b      	ldr	r3, [r5, #16]
 800fab0:	2b01      	cmp	r3, #1
 800fab2:	f340 8090 	ble.w	800fbd6 <_strtod_l+0x8f6>
 800fab6:	4629      	mov	r1, r5
 800fab8:	2201      	movs	r2, #1
 800faba:	4620      	mov	r0, r4
 800fabc:	f001 f848 	bl	8010b50 <__lshift>
 800fac0:	4631      	mov	r1, r6
 800fac2:	4605      	mov	r5, r0
 800fac4:	f001 f8b4 	bl	8010c30 <__mcmp>
 800fac8:	2800      	cmp	r0, #0
 800faca:	f340 8084 	ble.w	800fbd6 <_strtod_l+0x8f6>
 800face:	9904      	ldr	r1, [sp, #16]
 800fad0:	4a2b      	ldr	r2, [pc, #172]	; (800fb80 <_strtod_l+0x8a0>)
 800fad2:	464b      	mov	r3, r9
 800fad4:	2900      	cmp	r1, #0
 800fad6:	f000 809d 	beq.w	800fc14 <_strtod_l+0x934>
 800fada:	ea02 0109 	and.w	r1, r2, r9
 800fade:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800fae2:	f300 8097 	bgt.w	800fc14 <_strtod_l+0x934>
 800fae6:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800faea:	f77f aea5 	ble.w	800f838 <_strtod_l+0x558>
 800faee:	ed9f 7b20 	vldr	d7, [pc, #128]	; 800fb70 <_strtod_l+0x890>
 800faf2:	ec49 8b16 	vmov	d6, r8, r9
 800faf6:	ee26 7b07 	vmul.f64	d7, d6, d7
 800fafa:	ed8d 7b04 	vstr	d7, [sp, #16]
 800fafe:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
 800fb02:	4313      	orrs	r3, r2
 800fb04:	bf08      	it	eq
 800fb06:	2322      	moveq	r3, #34	; 0x22
 800fb08:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800fb0c:	bf08      	it	eq
 800fb0e:	6023      	streq	r3, [r4, #0]
 800fb10:	e62c      	b.n	800f76c <_strtod_l+0x48c>
 800fb12:	f04f 31ff 	mov.w	r1, #4294967295
 800fb16:	fa01 f202 	lsl.w	r2, r1, r2
 800fb1a:	ea02 0808 	and.w	r8, r2, r8
 800fb1e:	e6d9      	b.n	800f8d4 <_strtod_l+0x5f4>
 800fb20:	f1c3 437f 	rsb	r3, r3, #4278190080	; 0xff000000
 800fb24:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
 800fb28:	f503 437b 	add.w	r3, r3, #64256	; 0xfb00
 800fb2c:	33e2      	adds	r3, #226	; 0xe2
 800fb2e:	fa00 f303 	lsl.w	r3, r0, r3
 800fb32:	e9cd 300a 	strd	r3, r0, [sp, #40]	; 0x28
 800fb36:	e73f      	b.n	800f9b8 <_strtod_l+0x6d8>
 800fb38:	2200      	movs	r2, #0
 800fb3a:	2301      	movs	r3, #1
 800fb3c:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800fb40:	e73a      	b.n	800f9b8 <_strtod_l+0x6d8>
 800fb42:	9912      	ldr	r1, [sp, #72]	; 0x48
 800fb44:	461a      	mov	r2, r3
 800fb46:	4620      	mov	r0, r4
 800fb48:	f001 f802 	bl	8010b50 <__lshift>
 800fb4c:	9012      	str	r0, [sp, #72]	; 0x48
 800fb4e:	2800      	cmp	r0, #0
 800fb50:	f47f af64 	bne.w	800fa1c <_strtod_l+0x73c>
 800fb54:	e600      	b.n	800f758 <_strtod_l+0x478>
 800fb56:	bf00      	nop
 800fb58:	94a03595 	.word	0x94a03595
 800fb5c:	3fcfffff 	.word	0x3fcfffff
 800fb60:	94a03595 	.word	0x94a03595
 800fb64:	3fdfffff 	.word	0x3fdfffff
 800fb68:	35afe535 	.word	0x35afe535
 800fb6c:	3fe00000 	.word	0x3fe00000
 800fb70:	00000000 	.word	0x00000000
 800fb74:	39500000 	.word	0x39500000
 800fb78:	08012360 	.word	0x08012360
 800fb7c:	fffffc02 	.word	0xfffffc02
 800fb80:	7ff00000 	.word	0x7ff00000
 800fb84:	46cb      	mov	fp, r9
 800fb86:	d15f      	bne.n	800fc48 <_strtod_l+0x968>
 800fb88:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800fb8c:	f1ba 0f00 	cmp.w	sl, #0
 800fb90:	d02a      	beq.n	800fbe8 <_strtod_l+0x908>
 800fb92:	4aa7      	ldr	r2, [pc, #668]	; (800fe30 <_strtod_l+0xb50>)
 800fb94:	4293      	cmp	r3, r2
 800fb96:	d12b      	bne.n	800fbf0 <_strtod_l+0x910>
 800fb98:	9b04      	ldr	r3, [sp, #16]
 800fb9a:	4642      	mov	r2, r8
 800fb9c:	b1fb      	cbz	r3, 800fbde <_strtod_l+0x8fe>
 800fb9e:	4ba5      	ldr	r3, [pc, #660]	; (800fe34 <_strtod_l+0xb54>)
 800fba0:	ea09 0303 	and.w	r3, r9, r3
 800fba4:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800fba8:	f04f 31ff 	mov.w	r1, #4294967295
 800fbac:	d81a      	bhi.n	800fbe4 <_strtod_l+0x904>
 800fbae:	0d1b      	lsrs	r3, r3, #20
 800fbb0:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800fbb4:	fa01 f303 	lsl.w	r3, r1, r3
 800fbb8:	429a      	cmp	r2, r3
 800fbba:	d119      	bne.n	800fbf0 <_strtod_l+0x910>
 800fbbc:	4b9e      	ldr	r3, [pc, #632]	; (800fe38 <_strtod_l+0xb58>)
 800fbbe:	459b      	cmp	fp, r3
 800fbc0:	d102      	bne.n	800fbc8 <_strtod_l+0x8e8>
 800fbc2:	3201      	adds	r2, #1
 800fbc4:	f43f adc8 	beq.w	800f758 <_strtod_l+0x478>
 800fbc8:	4b9a      	ldr	r3, [pc, #616]	; (800fe34 <_strtod_l+0xb54>)
 800fbca:	ea0b 0303 	and.w	r3, fp, r3
 800fbce:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 800fbd2:	f04f 0800 	mov.w	r8, #0
 800fbd6:	9b04      	ldr	r3, [sp, #16]
 800fbd8:	2b00      	cmp	r3, #0
 800fbda:	d188      	bne.n	800faee <_strtod_l+0x80e>
 800fbdc:	e5c6      	b.n	800f76c <_strtod_l+0x48c>
 800fbde:	f04f 33ff 	mov.w	r3, #4294967295
 800fbe2:	e7e9      	b.n	800fbb8 <_strtod_l+0x8d8>
 800fbe4:	460b      	mov	r3, r1
 800fbe6:	e7e7      	b.n	800fbb8 <_strtod_l+0x8d8>
 800fbe8:	ea53 0308 	orrs.w	r3, r3, r8
 800fbec:	f43f af6f 	beq.w	800face <_strtod_l+0x7ee>
 800fbf0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800fbf2:	b1cb      	cbz	r3, 800fc28 <_strtod_l+0x948>
 800fbf4:	ea13 0f0b 	tst.w	r3, fp
 800fbf8:	d0ed      	beq.n	800fbd6 <_strtod_l+0x8f6>
 800fbfa:	9a04      	ldr	r2, [sp, #16]
 800fbfc:	4640      	mov	r0, r8
 800fbfe:	4649      	mov	r1, r9
 800fc00:	f1ba 0f00 	cmp.w	sl, #0
 800fc04:	d014      	beq.n	800fc30 <_strtod_l+0x950>
 800fc06:	f7ff fb50 	bl	800f2aa <sulp>
 800fc0a:	ee38 7b00 	vadd.f64	d7, d8, d0
 800fc0e:	ec59 8b17 	vmov	r8, r9, d7
 800fc12:	e7e0      	b.n	800fbd6 <_strtod_l+0x8f6>
 800fc14:	4013      	ands	r3, r2
 800fc16:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800fc1a:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 800fc1e:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 800fc22:	f04f 38ff 	mov.w	r8, #4294967295
 800fc26:	e7d6      	b.n	800fbd6 <_strtod_l+0x8f6>
 800fc28:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800fc2a:	ea13 0f08 	tst.w	r3, r8
 800fc2e:	e7e3      	b.n	800fbf8 <_strtod_l+0x918>
 800fc30:	f7ff fb3b 	bl	800f2aa <sulp>
 800fc34:	ee38 0b40 	vsub.f64	d0, d8, d0
 800fc38:	eeb5 0b40 	vcmp.f64	d0, #0.0
 800fc3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fc40:	ec59 8b10 	vmov	r8, r9, d0
 800fc44:	d1c7      	bne.n	800fbd6 <_strtod_l+0x8f6>
 800fc46:	e5f7      	b.n	800f838 <_strtod_l+0x558>
 800fc48:	4631      	mov	r1, r6
 800fc4a:	4628      	mov	r0, r5
 800fc4c:	f001 f96e 	bl	8010f2c <__ratio>
 800fc50:	eeb0 7b00 	vmov.f64	d7, #0	; 0x40000000  2.0
 800fc54:	eeb4 0bc7 	vcmpe.f64	d0, d7
 800fc58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fc5c:	d865      	bhi.n	800fd2a <_strtod_l+0xa4a>
 800fc5e:	f1ba 0f00 	cmp.w	sl, #0
 800fc62:	d042      	beq.n	800fcea <_strtod_l+0xa0a>
 800fc64:	4b75      	ldr	r3, [pc, #468]	; (800fe3c <_strtod_l+0xb5c>)
 800fc66:	2200      	movs	r2, #0
 800fc68:	eeb7 db00 	vmov.f64	d13, #112	; 0x3f800000  1.0
 800fc6c:	4871      	ldr	r0, [pc, #452]	; (800fe34 <_strtod_l+0xb54>)
 800fc6e:	f8df c1d8 	ldr.w	ip, [pc, #472]	; 800fe48 <_strtod_l+0xb68>
 800fc72:	ea0b 0100 	and.w	r1, fp, r0
 800fc76:	4561      	cmp	r1, ip
 800fc78:	f040 808e 	bne.w	800fd98 <_strtod_l+0xab8>
 800fc7c:	f1ab 7954 	sub.w	r9, fp, #55574528	; 0x3500000
 800fc80:	ec49 8b10 	vmov	d0, r8, r9
 800fc84:	ec43 2b1c 	vmov	d12, r2, r3
 800fc88:	910a      	str	r1, [sp, #40]	; 0x28
 800fc8a:	f001 f877 	bl	8010d7c <__ulp>
 800fc8e:	ec49 8b1e 	vmov	d14, r8, r9
 800fc92:	4868      	ldr	r0, [pc, #416]	; (800fe34 <_strtod_l+0xb54>)
 800fc94:	eeac eb00 	vfma.f64	d14, d12, d0
 800fc98:	ee1e 3a90 	vmov	r3, s29
 800fc9c:	4a68      	ldr	r2, [pc, #416]	; (800fe40 <_strtod_l+0xb60>)
 800fc9e:	990a      	ldr	r1, [sp, #40]	; 0x28
 800fca0:	4018      	ands	r0, r3
 800fca2:	4290      	cmp	r0, r2
 800fca4:	ec59 8b1e 	vmov	r8, r9, d14
 800fca8:	d94e      	bls.n	800fd48 <_strtod_l+0xa68>
 800fcaa:	ee18 3a90 	vmov	r3, s17
 800fcae:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800fcb2:	4293      	cmp	r3, r2
 800fcb4:	d104      	bne.n	800fcc0 <_strtod_l+0x9e0>
 800fcb6:	ee18 3a10 	vmov	r3, s16
 800fcba:	3301      	adds	r3, #1
 800fcbc:	f43f ad4c 	beq.w	800f758 <_strtod_l+0x478>
 800fcc0:	f8df 9174 	ldr.w	r9, [pc, #372]	; 800fe38 <_strtod_l+0xb58>
 800fcc4:	f04f 38ff 	mov.w	r8, #4294967295
 800fcc8:	9912      	ldr	r1, [sp, #72]	; 0x48
 800fcca:	4620      	mov	r0, r4
 800fccc:	f000 fd24 	bl	8010718 <_Bfree>
 800fcd0:	4639      	mov	r1, r7
 800fcd2:	4620      	mov	r0, r4
 800fcd4:	f000 fd20 	bl	8010718 <_Bfree>
 800fcd8:	4631      	mov	r1, r6
 800fcda:	4620      	mov	r0, r4
 800fcdc:	f000 fd1c 	bl	8010718 <_Bfree>
 800fce0:	4629      	mov	r1, r5
 800fce2:	4620      	mov	r0, r4
 800fce4:	f000 fd18 	bl	8010718 <_Bfree>
 800fce8:	e619      	b.n	800f91e <_strtod_l+0x63e>
 800fcea:	f1b8 0f00 	cmp.w	r8, #0
 800fcee:	d112      	bne.n	800fd16 <_strtod_l+0xa36>
 800fcf0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800fcf4:	b9b3      	cbnz	r3, 800fd24 <_strtod_l+0xa44>
 800fcf6:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 800fcfa:	eeb4 0bc7 	vcmpe.f64	d0, d7
 800fcfe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fd02:	eeb6 db00 	vmov.f64	d13, #96	; 0x3f000000  0.5
 800fd06:	bf58      	it	pl
 800fd08:	ee20 db0d 	vmulpl.f64	d13, d0, d13
 800fd0c:	eeb1 7b4d 	vneg.f64	d7, d13
 800fd10:	ec53 2b17 	vmov	r2, r3, d7
 800fd14:	e7aa      	b.n	800fc6c <_strtod_l+0x98c>
 800fd16:	f1b8 0f01 	cmp.w	r8, #1
 800fd1a:	d103      	bne.n	800fd24 <_strtod_l+0xa44>
 800fd1c:	f1b9 0f00 	cmp.w	r9, #0
 800fd20:	f43f ad8a 	beq.w	800f838 <_strtod_l+0x558>
 800fd24:	4b47      	ldr	r3, [pc, #284]	; (800fe44 <_strtod_l+0xb64>)
 800fd26:	2200      	movs	r2, #0
 800fd28:	e79e      	b.n	800fc68 <_strtod_l+0x988>
 800fd2a:	eeb6 db00 	vmov.f64	d13, #96	; 0x3f000000  0.5
 800fd2e:	ee20 db0d 	vmul.f64	d13, d0, d13
 800fd32:	f1ba 0f00 	cmp.w	sl, #0
 800fd36:	d104      	bne.n	800fd42 <_strtod_l+0xa62>
 800fd38:	eeb1 7b4d 	vneg.f64	d7, d13
 800fd3c:	ec53 2b17 	vmov	r2, r3, d7
 800fd40:	e794      	b.n	800fc6c <_strtod_l+0x98c>
 800fd42:	eeb0 7b4d 	vmov.f64	d7, d13
 800fd46:	e7f9      	b.n	800fd3c <_strtod_l+0xa5c>
 800fd48:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 800fd4c:	9b04      	ldr	r3, [sp, #16]
 800fd4e:	2b00      	cmp	r3, #0
 800fd50:	d1ba      	bne.n	800fcc8 <_strtod_l+0x9e8>
 800fd52:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800fd56:	0d1b      	lsrs	r3, r3, #20
 800fd58:	051b      	lsls	r3, r3, #20
 800fd5a:	4299      	cmp	r1, r3
 800fd5c:	d1b4      	bne.n	800fcc8 <_strtod_l+0x9e8>
 800fd5e:	ec51 0b1d 	vmov	r0, r1, d13
 800fd62:	f7f0 fce9 	bl	8000738 <__aeabi_d2lz>
 800fd66:	f7f0 fca1 	bl	80006ac <__aeabi_l2d>
 800fd6a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800fd6e:	ec41 0b17 	vmov	d7, r0, r1
 800fd72:	ea43 0308 	orr.w	r3, r3, r8
 800fd76:	ea53 030a 	orrs.w	r3, r3, sl
 800fd7a:	ee3d db47 	vsub.f64	d13, d13, d7
 800fd7e:	d03c      	beq.n	800fdfa <_strtod_l+0xb1a>
 800fd80:	eeb4 dbca 	vcmpe.f64	d13, d10
 800fd84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fd88:	f53f acf0 	bmi.w	800f76c <_strtod_l+0x48c>
 800fd8c:	eeb4 dbcb 	vcmpe.f64	d13, d11
 800fd90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fd94:	dd98      	ble.n	800fcc8 <_strtod_l+0x9e8>
 800fd96:	e4e9      	b.n	800f76c <_strtod_l+0x48c>
 800fd98:	9804      	ldr	r0, [sp, #16]
 800fd9a:	b1f0      	cbz	r0, 800fdda <_strtod_l+0xafa>
 800fd9c:	f1b1 6fd4 	cmp.w	r1, #111149056	; 0x6a00000
 800fda0:	d81b      	bhi.n	800fdda <_strtod_l+0xafa>
 800fda2:	ed9f 7b21 	vldr	d7, [pc, #132]	; 800fe28 <_strtod_l+0xb48>
 800fda6:	eeb4 dbc7 	vcmpe.f64	d13, d7
 800fdaa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fdae:	d811      	bhi.n	800fdd4 <_strtod_l+0xaf4>
 800fdb0:	eebc dbcd 	vcvt.u32.f64	s26, d13
 800fdb4:	ee1d 3a10 	vmov	r3, s26
 800fdb8:	2b01      	cmp	r3, #1
 800fdba:	bf38      	it	cc
 800fdbc:	2301      	movcc	r3, #1
 800fdbe:	ee0d 3a10 	vmov	s26, r3
 800fdc2:	eeb8 db4d 	vcvt.f64.u32	d13, s26
 800fdc6:	f1ba 0f00 	cmp.w	sl, #0
 800fdca:	d113      	bne.n	800fdf4 <_strtod_l+0xb14>
 800fdcc:	eeb1 7b4d 	vneg.f64	d7, d13
 800fdd0:	ec53 2b17 	vmov	r2, r3, d7
 800fdd4:	f103 60d6 	add.w	r0, r3, #112197632	; 0x6b00000
 800fdd8:	1a43      	subs	r3, r0, r1
 800fdda:	eeb0 0b48 	vmov.f64	d0, d8
 800fdde:	ec43 2b1c 	vmov	d12, r2, r3
 800fde2:	910a      	str	r1, [sp, #40]	; 0x28
 800fde4:	f000 ffca 	bl	8010d7c <__ulp>
 800fde8:	990a      	ldr	r1, [sp, #40]	; 0x28
 800fdea:	eeac 8b00 	vfma.f64	d8, d12, d0
 800fdee:	ec59 8b18 	vmov	r8, r9, d8
 800fdf2:	e7ab      	b.n	800fd4c <_strtod_l+0xa6c>
 800fdf4:	eeb0 7b4d 	vmov.f64	d7, d13
 800fdf8:	e7ea      	b.n	800fdd0 <_strtod_l+0xaf0>
 800fdfa:	eeb4 dbc9 	vcmpe.f64	d13, d9
 800fdfe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fe02:	f57f af61 	bpl.w	800fcc8 <_strtod_l+0x9e8>
 800fe06:	e4b1      	b.n	800f76c <_strtod_l+0x48c>
 800fe08:	2300      	movs	r3, #0
 800fe0a:	9308      	str	r3, [sp, #32]
 800fe0c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800fe0e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800fe10:	6013      	str	r3, [r2, #0]
 800fe12:	f7ff baad 	b.w	800f370 <_strtod_l+0x90>
 800fe16:	2a65      	cmp	r2, #101	; 0x65
 800fe18:	f43f ab9f 	beq.w	800f55a <_strtod_l+0x27a>
 800fe1c:	2a45      	cmp	r2, #69	; 0x45
 800fe1e:	f43f ab9c 	beq.w	800f55a <_strtod_l+0x27a>
 800fe22:	2101      	movs	r1, #1
 800fe24:	f7ff bbd4 	b.w	800f5d0 <_strtod_l+0x2f0>
 800fe28:	ffc00000 	.word	0xffc00000
 800fe2c:	41dfffff 	.word	0x41dfffff
 800fe30:	000fffff 	.word	0x000fffff
 800fe34:	7ff00000 	.word	0x7ff00000
 800fe38:	7fefffff 	.word	0x7fefffff
 800fe3c:	3ff00000 	.word	0x3ff00000
 800fe40:	7c9fffff 	.word	0x7c9fffff
 800fe44:	bff00000 	.word	0xbff00000
 800fe48:	7fe00000 	.word	0x7fe00000

0800fe4c <strtod>:
 800fe4c:	460a      	mov	r2, r1
 800fe4e:	4601      	mov	r1, r0
 800fe50:	4802      	ldr	r0, [pc, #8]	; (800fe5c <strtod+0x10>)
 800fe52:	4b03      	ldr	r3, [pc, #12]	; (800fe60 <strtod+0x14>)
 800fe54:	6800      	ldr	r0, [r0, #0]
 800fe56:	f7ff ba43 	b.w	800f2e0 <_strtod_l>
 800fe5a:	bf00      	nop
 800fe5c:	24000090 	.word	0x24000090
 800fe60:	240000f8 	.word	0x240000f8

0800fe64 <_write_r>:
 800fe64:	b538      	push	{r3, r4, r5, lr}
 800fe66:	4d07      	ldr	r5, [pc, #28]	; (800fe84 <_write_r+0x20>)
 800fe68:	4604      	mov	r4, r0
 800fe6a:	4608      	mov	r0, r1
 800fe6c:	4611      	mov	r1, r2
 800fe6e:	2200      	movs	r2, #0
 800fe70:	602a      	str	r2, [r5, #0]
 800fe72:	461a      	mov	r2, r3
 800fe74:	f7f3 febf 	bl	8003bf6 <_write>
 800fe78:	1c43      	adds	r3, r0, #1
 800fe7a:	d102      	bne.n	800fe82 <_write_r+0x1e>
 800fe7c:	682b      	ldr	r3, [r5, #0]
 800fe7e:	b103      	cbz	r3, 800fe82 <_write_r+0x1e>
 800fe80:	6023      	str	r3, [r4, #0]
 800fe82:	bd38      	pop	{r3, r4, r5, pc}
 800fe84:	24000aa8 	.word	0x24000aa8

0800fe88 <_close_r>:
 800fe88:	b538      	push	{r3, r4, r5, lr}
 800fe8a:	4d06      	ldr	r5, [pc, #24]	; (800fea4 <_close_r+0x1c>)
 800fe8c:	2300      	movs	r3, #0
 800fe8e:	4604      	mov	r4, r0
 800fe90:	4608      	mov	r0, r1
 800fe92:	602b      	str	r3, [r5, #0]
 800fe94:	f7f3 fecb 	bl	8003c2e <_close>
 800fe98:	1c43      	adds	r3, r0, #1
 800fe9a:	d102      	bne.n	800fea2 <_close_r+0x1a>
 800fe9c:	682b      	ldr	r3, [r5, #0]
 800fe9e:	b103      	cbz	r3, 800fea2 <_close_r+0x1a>
 800fea0:	6023      	str	r3, [r4, #0]
 800fea2:	bd38      	pop	{r3, r4, r5, pc}
 800fea4:	24000aa8 	.word	0x24000aa8

0800fea8 <__sflags>:
 800fea8:	780b      	ldrb	r3, [r1, #0]
 800feaa:	2b72      	cmp	r3, #114	; 0x72
 800feac:	b530      	push	{r4, r5, lr}
 800feae:	d022      	beq.n	800fef6 <__sflags+0x4e>
 800feb0:	2b77      	cmp	r3, #119	; 0x77
 800feb2:	d024      	beq.n	800fefe <__sflags+0x56>
 800feb4:	2b61      	cmp	r3, #97	; 0x61
 800feb6:	d027      	beq.n	800ff08 <__sflags+0x60>
 800feb8:	2316      	movs	r3, #22
 800feba:	6003      	str	r3, [r0, #0]
 800febc:	2000      	movs	r0, #0
 800febe:	bd30      	pop	{r4, r5, pc}
 800fec0:	2d62      	cmp	r5, #98	; 0x62
 800fec2:	d012      	beq.n	800feea <__sflags+0x42>
 800fec4:	2d78      	cmp	r5, #120	; 0x78
 800fec6:	d013      	beq.n	800fef0 <__sflags+0x48>
 800fec8:	2d2b      	cmp	r5, #43	; 0x2b
 800feca:	d107      	bne.n	800fedc <__sflags+0x34>
 800fecc:	f020 001c 	bic.w	r0, r0, #28
 800fed0:	f023 0303 	bic.w	r3, r3, #3
 800fed4:	f040 0010 	orr.w	r0, r0, #16
 800fed8:	f043 0302 	orr.w	r3, r3, #2
 800fedc:	f811 5f01 	ldrb.w	r5, [r1, #1]!
 800fee0:	2d00      	cmp	r5, #0
 800fee2:	d1ed      	bne.n	800fec0 <__sflags+0x18>
 800fee4:	4323      	orrs	r3, r4
 800fee6:	6013      	str	r3, [r2, #0]
 800fee8:	e7e9      	b.n	800febe <__sflags+0x16>
 800feea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800feee:	e7f5      	b.n	800fedc <__sflags+0x34>
 800fef0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800fef4:	e7f2      	b.n	800fedc <__sflags+0x34>
 800fef6:	2400      	movs	r4, #0
 800fef8:	4623      	mov	r3, r4
 800fefa:	2004      	movs	r0, #4
 800fefc:	e7ee      	b.n	800fedc <__sflags+0x34>
 800fefe:	f44f 64c0 	mov.w	r4, #1536	; 0x600
 800ff02:	2301      	movs	r3, #1
 800ff04:	2008      	movs	r0, #8
 800ff06:	e7e9      	b.n	800fedc <__sflags+0x34>
 800ff08:	f44f 7402 	mov.w	r4, #520	; 0x208
 800ff0c:	2301      	movs	r3, #1
 800ff0e:	f44f 7084 	mov.w	r0, #264	; 0x108
 800ff12:	e7e3      	b.n	800fedc <__sflags+0x34>

0800ff14 <_fstat_r>:
 800ff14:	b538      	push	{r3, r4, r5, lr}
 800ff16:	4d07      	ldr	r5, [pc, #28]	; (800ff34 <_fstat_r+0x20>)
 800ff18:	2300      	movs	r3, #0
 800ff1a:	4604      	mov	r4, r0
 800ff1c:	4608      	mov	r0, r1
 800ff1e:	4611      	mov	r1, r2
 800ff20:	602b      	str	r3, [r5, #0]
 800ff22:	f7f3 fe90 	bl	8003c46 <_fstat>
 800ff26:	1c43      	adds	r3, r0, #1
 800ff28:	d102      	bne.n	800ff30 <_fstat_r+0x1c>
 800ff2a:	682b      	ldr	r3, [r5, #0]
 800ff2c:	b103      	cbz	r3, 800ff30 <_fstat_r+0x1c>
 800ff2e:	6023      	str	r3, [r4, #0]
 800ff30:	bd38      	pop	{r3, r4, r5, pc}
 800ff32:	bf00      	nop
 800ff34:	24000aa8 	.word	0x24000aa8

0800ff38 <rshift>:
 800ff38:	6903      	ldr	r3, [r0, #16]
 800ff3a:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800ff3e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ff42:	ea4f 1261 	mov.w	r2, r1, asr #5
 800ff46:	f100 0414 	add.w	r4, r0, #20
 800ff4a:	dd45      	ble.n	800ffd8 <rshift+0xa0>
 800ff4c:	f011 011f 	ands.w	r1, r1, #31
 800ff50:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800ff54:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800ff58:	d10c      	bne.n	800ff74 <rshift+0x3c>
 800ff5a:	f100 0710 	add.w	r7, r0, #16
 800ff5e:	4629      	mov	r1, r5
 800ff60:	42b1      	cmp	r1, r6
 800ff62:	d334      	bcc.n	800ffce <rshift+0x96>
 800ff64:	1a9b      	subs	r3, r3, r2
 800ff66:	009b      	lsls	r3, r3, #2
 800ff68:	1eea      	subs	r2, r5, #3
 800ff6a:	4296      	cmp	r6, r2
 800ff6c:	bf38      	it	cc
 800ff6e:	2300      	movcc	r3, #0
 800ff70:	4423      	add	r3, r4
 800ff72:	e015      	b.n	800ffa0 <rshift+0x68>
 800ff74:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800ff78:	f1c1 0820 	rsb	r8, r1, #32
 800ff7c:	40cf      	lsrs	r7, r1
 800ff7e:	f105 0e04 	add.w	lr, r5, #4
 800ff82:	46a1      	mov	r9, r4
 800ff84:	4576      	cmp	r6, lr
 800ff86:	46f4      	mov	ip, lr
 800ff88:	d815      	bhi.n	800ffb6 <rshift+0x7e>
 800ff8a:	1a9a      	subs	r2, r3, r2
 800ff8c:	0092      	lsls	r2, r2, #2
 800ff8e:	3a04      	subs	r2, #4
 800ff90:	3501      	adds	r5, #1
 800ff92:	42ae      	cmp	r6, r5
 800ff94:	bf38      	it	cc
 800ff96:	2200      	movcc	r2, #0
 800ff98:	18a3      	adds	r3, r4, r2
 800ff9a:	50a7      	str	r7, [r4, r2]
 800ff9c:	b107      	cbz	r7, 800ffa0 <rshift+0x68>
 800ff9e:	3304      	adds	r3, #4
 800ffa0:	1b1a      	subs	r2, r3, r4
 800ffa2:	42a3      	cmp	r3, r4
 800ffa4:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800ffa8:	bf08      	it	eq
 800ffaa:	2300      	moveq	r3, #0
 800ffac:	6102      	str	r2, [r0, #16]
 800ffae:	bf08      	it	eq
 800ffb0:	6143      	streq	r3, [r0, #20]
 800ffb2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ffb6:	f8dc c000 	ldr.w	ip, [ip]
 800ffba:	fa0c fc08 	lsl.w	ip, ip, r8
 800ffbe:	ea4c 0707 	orr.w	r7, ip, r7
 800ffc2:	f849 7b04 	str.w	r7, [r9], #4
 800ffc6:	f85e 7b04 	ldr.w	r7, [lr], #4
 800ffca:	40cf      	lsrs	r7, r1
 800ffcc:	e7da      	b.n	800ff84 <rshift+0x4c>
 800ffce:	f851 cb04 	ldr.w	ip, [r1], #4
 800ffd2:	f847 cf04 	str.w	ip, [r7, #4]!
 800ffd6:	e7c3      	b.n	800ff60 <rshift+0x28>
 800ffd8:	4623      	mov	r3, r4
 800ffda:	e7e1      	b.n	800ffa0 <rshift+0x68>

0800ffdc <__hexdig_fun>:
 800ffdc:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800ffe0:	2b09      	cmp	r3, #9
 800ffe2:	d802      	bhi.n	800ffea <__hexdig_fun+0xe>
 800ffe4:	3820      	subs	r0, #32
 800ffe6:	b2c0      	uxtb	r0, r0
 800ffe8:	4770      	bx	lr
 800ffea:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800ffee:	2b05      	cmp	r3, #5
 800fff0:	d801      	bhi.n	800fff6 <__hexdig_fun+0x1a>
 800fff2:	3847      	subs	r0, #71	; 0x47
 800fff4:	e7f7      	b.n	800ffe6 <__hexdig_fun+0xa>
 800fff6:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800fffa:	2b05      	cmp	r3, #5
 800fffc:	d801      	bhi.n	8010002 <__hexdig_fun+0x26>
 800fffe:	3827      	subs	r0, #39	; 0x27
 8010000:	e7f1      	b.n	800ffe6 <__hexdig_fun+0xa>
 8010002:	2000      	movs	r0, #0
 8010004:	4770      	bx	lr
	...

08010008 <__gethex>:
 8010008:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801000c:	ed2d 8b02 	vpush	{d8}
 8010010:	b089      	sub	sp, #36	; 0x24
 8010012:	ee08 0a10 	vmov	s16, r0
 8010016:	9304      	str	r3, [sp, #16]
 8010018:	4bb4      	ldr	r3, [pc, #720]	; (80102ec <__gethex+0x2e4>)
 801001a:	681b      	ldr	r3, [r3, #0]
 801001c:	9301      	str	r3, [sp, #4]
 801001e:	4618      	mov	r0, r3
 8010020:	468b      	mov	fp, r1
 8010022:	4690      	mov	r8, r2
 8010024:	f7f0 f9ac 	bl	8000380 <strlen>
 8010028:	9b01      	ldr	r3, [sp, #4]
 801002a:	f8db 2000 	ldr.w	r2, [fp]
 801002e:	4403      	add	r3, r0
 8010030:	4682      	mov	sl, r0
 8010032:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8010036:	9305      	str	r3, [sp, #20]
 8010038:	1c93      	adds	r3, r2, #2
 801003a:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 801003e:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8010042:	32fe      	adds	r2, #254	; 0xfe
 8010044:	18d1      	adds	r1, r2, r3
 8010046:	461f      	mov	r7, r3
 8010048:	f813 0b01 	ldrb.w	r0, [r3], #1
 801004c:	9100      	str	r1, [sp, #0]
 801004e:	2830      	cmp	r0, #48	; 0x30
 8010050:	d0f8      	beq.n	8010044 <__gethex+0x3c>
 8010052:	f7ff ffc3 	bl	800ffdc <__hexdig_fun>
 8010056:	4604      	mov	r4, r0
 8010058:	2800      	cmp	r0, #0
 801005a:	d13a      	bne.n	80100d2 <__gethex+0xca>
 801005c:	9901      	ldr	r1, [sp, #4]
 801005e:	4652      	mov	r2, sl
 8010060:	4638      	mov	r0, r7
 8010062:	f001 f809 	bl	8011078 <strncmp>
 8010066:	4605      	mov	r5, r0
 8010068:	2800      	cmp	r0, #0
 801006a:	d168      	bne.n	801013e <__gethex+0x136>
 801006c:	f817 000a 	ldrb.w	r0, [r7, sl]
 8010070:	eb07 060a 	add.w	r6, r7, sl
 8010074:	f7ff ffb2 	bl	800ffdc <__hexdig_fun>
 8010078:	2800      	cmp	r0, #0
 801007a:	d062      	beq.n	8010142 <__gethex+0x13a>
 801007c:	4633      	mov	r3, r6
 801007e:	7818      	ldrb	r0, [r3, #0]
 8010080:	2830      	cmp	r0, #48	; 0x30
 8010082:	461f      	mov	r7, r3
 8010084:	f103 0301 	add.w	r3, r3, #1
 8010088:	d0f9      	beq.n	801007e <__gethex+0x76>
 801008a:	f7ff ffa7 	bl	800ffdc <__hexdig_fun>
 801008e:	2301      	movs	r3, #1
 8010090:	fab0 f480 	clz	r4, r0
 8010094:	0964      	lsrs	r4, r4, #5
 8010096:	4635      	mov	r5, r6
 8010098:	9300      	str	r3, [sp, #0]
 801009a:	463a      	mov	r2, r7
 801009c:	4616      	mov	r6, r2
 801009e:	3201      	adds	r2, #1
 80100a0:	7830      	ldrb	r0, [r6, #0]
 80100a2:	f7ff ff9b 	bl	800ffdc <__hexdig_fun>
 80100a6:	2800      	cmp	r0, #0
 80100a8:	d1f8      	bne.n	801009c <__gethex+0x94>
 80100aa:	9901      	ldr	r1, [sp, #4]
 80100ac:	4652      	mov	r2, sl
 80100ae:	4630      	mov	r0, r6
 80100b0:	f000 ffe2 	bl	8011078 <strncmp>
 80100b4:	b980      	cbnz	r0, 80100d8 <__gethex+0xd0>
 80100b6:	b94d      	cbnz	r5, 80100cc <__gethex+0xc4>
 80100b8:	eb06 050a 	add.w	r5, r6, sl
 80100bc:	462a      	mov	r2, r5
 80100be:	4616      	mov	r6, r2
 80100c0:	3201      	adds	r2, #1
 80100c2:	7830      	ldrb	r0, [r6, #0]
 80100c4:	f7ff ff8a 	bl	800ffdc <__hexdig_fun>
 80100c8:	2800      	cmp	r0, #0
 80100ca:	d1f8      	bne.n	80100be <__gethex+0xb6>
 80100cc:	1bad      	subs	r5, r5, r6
 80100ce:	00ad      	lsls	r5, r5, #2
 80100d0:	e004      	b.n	80100dc <__gethex+0xd4>
 80100d2:	2400      	movs	r4, #0
 80100d4:	4625      	mov	r5, r4
 80100d6:	e7e0      	b.n	801009a <__gethex+0x92>
 80100d8:	2d00      	cmp	r5, #0
 80100da:	d1f7      	bne.n	80100cc <__gethex+0xc4>
 80100dc:	7833      	ldrb	r3, [r6, #0]
 80100de:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80100e2:	2b50      	cmp	r3, #80	; 0x50
 80100e4:	d13b      	bne.n	801015e <__gethex+0x156>
 80100e6:	7873      	ldrb	r3, [r6, #1]
 80100e8:	2b2b      	cmp	r3, #43	; 0x2b
 80100ea:	d02c      	beq.n	8010146 <__gethex+0x13e>
 80100ec:	2b2d      	cmp	r3, #45	; 0x2d
 80100ee:	d02e      	beq.n	801014e <__gethex+0x146>
 80100f0:	1c71      	adds	r1, r6, #1
 80100f2:	f04f 0900 	mov.w	r9, #0
 80100f6:	7808      	ldrb	r0, [r1, #0]
 80100f8:	f7ff ff70 	bl	800ffdc <__hexdig_fun>
 80100fc:	1e43      	subs	r3, r0, #1
 80100fe:	b2db      	uxtb	r3, r3
 8010100:	2b18      	cmp	r3, #24
 8010102:	d82c      	bhi.n	801015e <__gethex+0x156>
 8010104:	f1a0 0210 	sub.w	r2, r0, #16
 8010108:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 801010c:	f7ff ff66 	bl	800ffdc <__hexdig_fun>
 8010110:	1e43      	subs	r3, r0, #1
 8010112:	b2db      	uxtb	r3, r3
 8010114:	2b18      	cmp	r3, #24
 8010116:	d91d      	bls.n	8010154 <__gethex+0x14c>
 8010118:	f1b9 0f00 	cmp.w	r9, #0
 801011c:	d000      	beq.n	8010120 <__gethex+0x118>
 801011e:	4252      	negs	r2, r2
 8010120:	4415      	add	r5, r2
 8010122:	f8cb 1000 	str.w	r1, [fp]
 8010126:	b1e4      	cbz	r4, 8010162 <__gethex+0x15a>
 8010128:	9b00      	ldr	r3, [sp, #0]
 801012a:	2b00      	cmp	r3, #0
 801012c:	bf14      	ite	ne
 801012e:	2700      	movne	r7, #0
 8010130:	2706      	moveq	r7, #6
 8010132:	4638      	mov	r0, r7
 8010134:	b009      	add	sp, #36	; 0x24
 8010136:	ecbd 8b02 	vpop	{d8}
 801013a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801013e:	463e      	mov	r6, r7
 8010140:	4625      	mov	r5, r4
 8010142:	2401      	movs	r4, #1
 8010144:	e7ca      	b.n	80100dc <__gethex+0xd4>
 8010146:	f04f 0900 	mov.w	r9, #0
 801014a:	1cb1      	adds	r1, r6, #2
 801014c:	e7d3      	b.n	80100f6 <__gethex+0xee>
 801014e:	f04f 0901 	mov.w	r9, #1
 8010152:	e7fa      	b.n	801014a <__gethex+0x142>
 8010154:	230a      	movs	r3, #10
 8010156:	fb03 0202 	mla	r2, r3, r2, r0
 801015a:	3a10      	subs	r2, #16
 801015c:	e7d4      	b.n	8010108 <__gethex+0x100>
 801015e:	4631      	mov	r1, r6
 8010160:	e7df      	b.n	8010122 <__gethex+0x11a>
 8010162:	1bf3      	subs	r3, r6, r7
 8010164:	3b01      	subs	r3, #1
 8010166:	4621      	mov	r1, r4
 8010168:	2b07      	cmp	r3, #7
 801016a:	dc0b      	bgt.n	8010184 <__gethex+0x17c>
 801016c:	ee18 0a10 	vmov	r0, s16
 8010170:	f000 fa92 	bl	8010698 <_Balloc>
 8010174:	4604      	mov	r4, r0
 8010176:	b940      	cbnz	r0, 801018a <__gethex+0x182>
 8010178:	4b5d      	ldr	r3, [pc, #372]	; (80102f0 <__gethex+0x2e8>)
 801017a:	4602      	mov	r2, r0
 801017c:	21de      	movs	r1, #222	; 0xde
 801017e:	485d      	ldr	r0, [pc, #372]	; (80102f4 <__gethex+0x2ec>)
 8010180:	f000 ff9c 	bl	80110bc <__assert_func>
 8010184:	3101      	adds	r1, #1
 8010186:	105b      	asrs	r3, r3, #1
 8010188:	e7ee      	b.n	8010168 <__gethex+0x160>
 801018a:	f100 0914 	add.w	r9, r0, #20
 801018e:	f04f 0b00 	mov.w	fp, #0
 8010192:	f1ca 0301 	rsb	r3, sl, #1
 8010196:	f8cd 9008 	str.w	r9, [sp, #8]
 801019a:	f8cd b000 	str.w	fp, [sp]
 801019e:	9306      	str	r3, [sp, #24]
 80101a0:	42b7      	cmp	r7, r6
 80101a2:	d340      	bcc.n	8010226 <__gethex+0x21e>
 80101a4:	9802      	ldr	r0, [sp, #8]
 80101a6:	9b00      	ldr	r3, [sp, #0]
 80101a8:	f840 3b04 	str.w	r3, [r0], #4
 80101ac:	eba0 0009 	sub.w	r0, r0, r9
 80101b0:	1080      	asrs	r0, r0, #2
 80101b2:	0146      	lsls	r6, r0, #5
 80101b4:	6120      	str	r0, [r4, #16]
 80101b6:	4618      	mov	r0, r3
 80101b8:	f000 fb60 	bl	801087c <__hi0bits>
 80101bc:	1a30      	subs	r0, r6, r0
 80101be:	f8d8 6000 	ldr.w	r6, [r8]
 80101c2:	42b0      	cmp	r0, r6
 80101c4:	dd63      	ble.n	801028e <__gethex+0x286>
 80101c6:	1b87      	subs	r7, r0, r6
 80101c8:	4639      	mov	r1, r7
 80101ca:	4620      	mov	r0, r4
 80101cc:	f000 ff01 	bl	8010fd2 <__any_on>
 80101d0:	4682      	mov	sl, r0
 80101d2:	b1a8      	cbz	r0, 8010200 <__gethex+0x1f8>
 80101d4:	1e7b      	subs	r3, r7, #1
 80101d6:	1159      	asrs	r1, r3, #5
 80101d8:	f003 021f 	and.w	r2, r3, #31
 80101dc:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 80101e0:	f04f 0a01 	mov.w	sl, #1
 80101e4:	fa0a f202 	lsl.w	r2, sl, r2
 80101e8:	420a      	tst	r2, r1
 80101ea:	d009      	beq.n	8010200 <__gethex+0x1f8>
 80101ec:	4553      	cmp	r3, sl
 80101ee:	dd05      	ble.n	80101fc <__gethex+0x1f4>
 80101f0:	1eb9      	subs	r1, r7, #2
 80101f2:	4620      	mov	r0, r4
 80101f4:	f000 feed 	bl	8010fd2 <__any_on>
 80101f8:	2800      	cmp	r0, #0
 80101fa:	d145      	bne.n	8010288 <__gethex+0x280>
 80101fc:	f04f 0a02 	mov.w	sl, #2
 8010200:	4639      	mov	r1, r7
 8010202:	4620      	mov	r0, r4
 8010204:	f7ff fe98 	bl	800ff38 <rshift>
 8010208:	443d      	add	r5, r7
 801020a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801020e:	42ab      	cmp	r3, r5
 8010210:	da4c      	bge.n	80102ac <__gethex+0x2a4>
 8010212:	ee18 0a10 	vmov	r0, s16
 8010216:	4621      	mov	r1, r4
 8010218:	f000 fa7e 	bl	8010718 <_Bfree>
 801021c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801021e:	2300      	movs	r3, #0
 8010220:	6013      	str	r3, [r2, #0]
 8010222:	27a3      	movs	r7, #163	; 0xa3
 8010224:	e785      	b.n	8010132 <__gethex+0x12a>
 8010226:	1e73      	subs	r3, r6, #1
 8010228:	9a05      	ldr	r2, [sp, #20]
 801022a:	9303      	str	r3, [sp, #12]
 801022c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8010230:	4293      	cmp	r3, r2
 8010232:	d019      	beq.n	8010268 <__gethex+0x260>
 8010234:	f1bb 0f20 	cmp.w	fp, #32
 8010238:	d107      	bne.n	801024a <__gethex+0x242>
 801023a:	9b02      	ldr	r3, [sp, #8]
 801023c:	9a00      	ldr	r2, [sp, #0]
 801023e:	f843 2b04 	str.w	r2, [r3], #4
 8010242:	9302      	str	r3, [sp, #8]
 8010244:	2300      	movs	r3, #0
 8010246:	9300      	str	r3, [sp, #0]
 8010248:	469b      	mov	fp, r3
 801024a:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 801024e:	f7ff fec5 	bl	800ffdc <__hexdig_fun>
 8010252:	9b00      	ldr	r3, [sp, #0]
 8010254:	f000 000f 	and.w	r0, r0, #15
 8010258:	fa00 f00b 	lsl.w	r0, r0, fp
 801025c:	4303      	orrs	r3, r0
 801025e:	9300      	str	r3, [sp, #0]
 8010260:	f10b 0b04 	add.w	fp, fp, #4
 8010264:	9b03      	ldr	r3, [sp, #12]
 8010266:	e00d      	b.n	8010284 <__gethex+0x27c>
 8010268:	9b03      	ldr	r3, [sp, #12]
 801026a:	9a06      	ldr	r2, [sp, #24]
 801026c:	4413      	add	r3, r2
 801026e:	42bb      	cmp	r3, r7
 8010270:	d3e0      	bcc.n	8010234 <__gethex+0x22c>
 8010272:	4618      	mov	r0, r3
 8010274:	9901      	ldr	r1, [sp, #4]
 8010276:	9307      	str	r3, [sp, #28]
 8010278:	4652      	mov	r2, sl
 801027a:	f000 fefd 	bl	8011078 <strncmp>
 801027e:	9b07      	ldr	r3, [sp, #28]
 8010280:	2800      	cmp	r0, #0
 8010282:	d1d7      	bne.n	8010234 <__gethex+0x22c>
 8010284:	461e      	mov	r6, r3
 8010286:	e78b      	b.n	80101a0 <__gethex+0x198>
 8010288:	f04f 0a03 	mov.w	sl, #3
 801028c:	e7b8      	b.n	8010200 <__gethex+0x1f8>
 801028e:	da0a      	bge.n	80102a6 <__gethex+0x29e>
 8010290:	1a37      	subs	r7, r6, r0
 8010292:	4621      	mov	r1, r4
 8010294:	ee18 0a10 	vmov	r0, s16
 8010298:	463a      	mov	r2, r7
 801029a:	f000 fc59 	bl	8010b50 <__lshift>
 801029e:	1bed      	subs	r5, r5, r7
 80102a0:	4604      	mov	r4, r0
 80102a2:	f100 0914 	add.w	r9, r0, #20
 80102a6:	f04f 0a00 	mov.w	sl, #0
 80102aa:	e7ae      	b.n	801020a <__gethex+0x202>
 80102ac:	f8d8 0004 	ldr.w	r0, [r8, #4]
 80102b0:	42a8      	cmp	r0, r5
 80102b2:	dd72      	ble.n	801039a <__gethex+0x392>
 80102b4:	1b45      	subs	r5, r0, r5
 80102b6:	42ae      	cmp	r6, r5
 80102b8:	dc36      	bgt.n	8010328 <__gethex+0x320>
 80102ba:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80102be:	2b02      	cmp	r3, #2
 80102c0:	d02a      	beq.n	8010318 <__gethex+0x310>
 80102c2:	2b03      	cmp	r3, #3
 80102c4:	d02c      	beq.n	8010320 <__gethex+0x318>
 80102c6:	2b01      	cmp	r3, #1
 80102c8:	d11c      	bne.n	8010304 <__gethex+0x2fc>
 80102ca:	42ae      	cmp	r6, r5
 80102cc:	d11a      	bne.n	8010304 <__gethex+0x2fc>
 80102ce:	2e01      	cmp	r6, #1
 80102d0:	d112      	bne.n	80102f8 <__gethex+0x2f0>
 80102d2:	9a04      	ldr	r2, [sp, #16]
 80102d4:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80102d8:	6013      	str	r3, [r2, #0]
 80102da:	2301      	movs	r3, #1
 80102dc:	6123      	str	r3, [r4, #16]
 80102de:	f8c9 3000 	str.w	r3, [r9]
 80102e2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80102e4:	2762      	movs	r7, #98	; 0x62
 80102e6:	601c      	str	r4, [r3, #0]
 80102e8:	e723      	b.n	8010132 <__gethex+0x12a>
 80102ea:	bf00      	nop
 80102ec:	08012400 	.word	0x08012400
 80102f0:	08012388 	.word	0x08012388
 80102f4:	08012399 	.word	0x08012399
 80102f8:	1e71      	subs	r1, r6, #1
 80102fa:	4620      	mov	r0, r4
 80102fc:	f000 fe69 	bl	8010fd2 <__any_on>
 8010300:	2800      	cmp	r0, #0
 8010302:	d1e6      	bne.n	80102d2 <__gethex+0x2ca>
 8010304:	ee18 0a10 	vmov	r0, s16
 8010308:	4621      	mov	r1, r4
 801030a:	f000 fa05 	bl	8010718 <_Bfree>
 801030e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8010310:	2300      	movs	r3, #0
 8010312:	6013      	str	r3, [r2, #0]
 8010314:	2750      	movs	r7, #80	; 0x50
 8010316:	e70c      	b.n	8010132 <__gethex+0x12a>
 8010318:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801031a:	2b00      	cmp	r3, #0
 801031c:	d1f2      	bne.n	8010304 <__gethex+0x2fc>
 801031e:	e7d8      	b.n	80102d2 <__gethex+0x2ca>
 8010320:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8010322:	2b00      	cmp	r3, #0
 8010324:	d1d5      	bne.n	80102d2 <__gethex+0x2ca>
 8010326:	e7ed      	b.n	8010304 <__gethex+0x2fc>
 8010328:	1e6f      	subs	r7, r5, #1
 801032a:	f1ba 0f00 	cmp.w	sl, #0
 801032e:	d131      	bne.n	8010394 <__gethex+0x38c>
 8010330:	b127      	cbz	r7, 801033c <__gethex+0x334>
 8010332:	4639      	mov	r1, r7
 8010334:	4620      	mov	r0, r4
 8010336:	f000 fe4c 	bl	8010fd2 <__any_on>
 801033a:	4682      	mov	sl, r0
 801033c:	117b      	asrs	r3, r7, #5
 801033e:	2101      	movs	r1, #1
 8010340:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8010344:	f007 071f 	and.w	r7, r7, #31
 8010348:	fa01 f707 	lsl.w	r7, r1, r7
 801034c:	421f      	tst	r7, r3
 801034e:	4629      	mov	r1, r5
 8010350:	4620      	mov	r0, r4
 8010352:	bf18      	it	ne
 8010354:	f04a 0a02 	orrne.w	sl, sl, #2
 8010358:	1b76      	subs	r6, r6, r5
 801035a:	f7ff fded 	bl	800ff38 <rshift>
 801035e:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8010362:	2702      	movs	r7, #2
 8010364:	f1ba 0f00 	cmp.w	sl, #0
 8010368:	d048      	beq.n	80103fc <__gethex+0x3f4>
 801036a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801036e:	2b02      	cmp	r3, #2
 8010370:	d015      	beq.n	801039e <__gethex+0x396>
 8010372:	2b03      	cmp	r3, #3
 8010374:	d017      	beq.n	80103a6 <__gethex+0x39e>
 8010376:	2b01      	cmp	r3, #1
 8010378:	d109      	bne.n	801038e <__gethex+0x386>
 801037a:	f01a 0f02 	tst.w	sl, #2
 801037e:	d006      	beq.n	801038e <__gethex+0x386>
 8010380:	f8d9 0000 	ldr.w	r0, [r9]
 8010384:	ea4a 0a00 	orr.w	sl, sl, r0
 8010388:	f01a 0f01 	tst.w	sl, #1
 801038c:	d10e      	bne.n	80103ac <__gethex+0x3a4>
 801038e:	f047 0710 	orr.w	r7, r7, #16
 8010392:	e033      	b.n	80103fc <__gethex+0x3f4>
 8010394:	f04f 0a01 	mov.w	sl, #1
 8010398:	e7d0      	b.n	801033c <__gethex+0x334>
 801039a:	2701      	movs	r7, #1
 801039c:	e7e2      	b.n	8010364 <__gethex+0x35c>
 801039e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80103a0:	f1c3 0301 	rsb	r3, r3, #1
 80103a4:	9315      	str	r3, [sp, #84]	; 0x54
 80103a6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80103a8:	2b00      	cmp	r3, #0
 80103aa:	d0f0      	beq.n	801038e <__gethex+0x386>
 80103ac:	f8d4 b010 	ldr.w	fp, [r4, #16]
 80103b0:	f104 0314 	add.w	r3, r4, #20
 80103b4:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 80103b8:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 80103bc:	f04f 0c00 	mov.w	ip, #0
 80103c0:	4618      	mov	r0, r3
 80103c2:	f853 2b04 	ldr.w	r2, [r3], #4
 80103c6:	f1b2 3fff 	cmp.w	r2, #4294967295
 80103ca:	d01c      	beq.n	8010406 <__gethex+0x3fe>
 80103cc:	3201      	adds	r2, #1
 80103ce:	6002      	str	r2, [r0, #0]
 80103d0:	2f02      	cmp	r7, #2
 80103d2:	f104 0314 	add.w	r3, r4, #20
 80103d6:	d13f      	bne.n	8010458 <__gethex+0x450>
 80103d8:	f8d8 2000 	ldr.w	r2, [r8]
 80103dc:	3a01      	subs	r2, #1
 80103de:	42b2      	cmp	r2, r6
 80103e0:	d10a      	bne.n	80103f8 <__gethex+0x3f0>
 80103e2:	1171      	asrs	r1, r6, #5
 80103e4:	2201      	movs	r2, #1
 80103e6:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80103ea:	f006 061f 	and.w	r6, r6, #31
 80103ee:	fa02 f606 	lsl.w	r6, r2, r6
 80103f2:	421e      	tst	r6, r3
 80103f4:	bf18      	it	ne
 80103f6:	4617      	movne	r7, r2
 80103f8:	f047 0720 	orr.w	r7, r7, #32
 80103fc:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80103fe:	601c      	str	r4, [r3, #0]
 8010400:	9b04      	ldr	r3, [sp, #16]
 8010402:	601d      	str	r5, [r3, #0]
 8010404:	e695      	b.n	8010132 <__gethex+0x12a>
 8010406:	4299      	cmp	r1, r3
 8010408:	f843 cc04 	str.w	ip, [r3, #-4]
 801040c:	d8d8      	bhi.n	80103c0 <__gethex+0x3b8>
 801040e:	68a3      	ldr	r3, [r4, #8]
 8010410:	459b      	cmp	fp, r3
 8010412:	db19      	blt.n	8010448 <__gethex+0x440>
 8010414:	6861      	ldr	r1, [r4, #4]
 8010416:	ee18 0a10 	vmov	r0, s16
 801041a:	3101      	adds	r1, #1
 801041c:	f000 f93c 	bl	8010698 <_Balloc>
 8010420:	4681      	mov	r9, r0
 8010422:	b918      	cbnz	r0, 801042c <__gethex+0x424>
 8010424:	4b1a      	ldr	r3, [pc, #104]	; (8010490 <__gethex+0x488>)
 8010426:	4602      	mov	r2, r0
 8010428:	2184      	movs	r1, #132	; 0x84
 801042a:	e6a8      	b.n	801017e <__gethex+0x176>
 801042c:	6922      	ldr	r2, [r4, #16]
 801042e:	3202      	adds	r2, #2
 8010430:	f104 010c 	add.w	r1, r4, #12
 8010434:	0092      	lsls	r2, r2, #2
 8010436:	300c      	adds	r0, #12
 8010438:	f7fe fd48 	bl	800eecc <memcpy>
 801043c:	4621      	mov	r1, r4
 801043e:	ee18 0a10 	vmov	r0, s16
 8010442:	f000 f969 	bl	8010718 <_Bfree>
 8010446:	464c      	mov	r4, r9
 8010448:	6923      	ldr	r3, [r4, #16]
 801044a:	1c5a      	adds	r2, r3, #1
 801044c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8010450:	6122      	str	r2, [r4, #16]
 8010452:	2201      	movs	r2, #1
 8010454:	615a      	str	r2, [r3, #20]
 8010456:	e7bb      	b.n	80103d0 <__gethex+0x3c8>
 8010458:	6922      	ldr	r2, [r4, #16]
 801045a:	455a      	cmp	r2, fp
 801045c:	dd0b      	ble.n	8010476 <__gethex+0x46e>
 801045e:	2101      	movs	r1, #1
 8010460:	4620      	mov	r0, r4
 8010462:	f7ff fd69 	bl	800ff38 <rshift>
 8010466:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801046a:	3501      	adds	r5, #1
 801046c:	42ab      	cmp	r3, r5
 801046e:	f6ff aed0 	blt.w	8010212 <__gethex+0x20a>
 8010472:	2701      	movs	r7, #1
 8010474:	e7c0      	b.n	80103f8 <__gethex+0x3f0>
 8010476:	f016 061f 	ands.w	r6, r6, #31
 801047a:	d0fa      	beq.n	8010472 <__gethex+0x46a>
 801047c:	4453      	add	r3, sl
 801047e:	f1c6 0620 	rsb	r6, r6, #32
 8010482:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8010486:	f000 f9f9 	bl	801087c <__hi0bits>
 801048a:	42b0      	cmp	r0, r6
 801048c:	dbe7      	blt.n	801045e <__gethex+0x456>
 801048e:	e7f0      	b.n	8010472 <__gethex+0x46a>
 8010490:	08012388 	.word	0x08012388

08010494 <L_shift>:
 8010494:	f1c2 0208 	rsb	r2, r2, #8
 8010498:	0092      	lsls	r2, r2, #2
 801049a:	b570      	push	{r4, r5, r6, lr}
 801049c:	f1c2 0620 	rsb	r6, r2, #32
 80104a0:	6843      	ldr	r3, [r0, #4]
 80104a2:	6804      	ldr	r4, [r0, #0]
 80104a4:	fa03 f506 	lsl.w	r5, r3, r6
 80104a8:	432c      	orrs	r4, r5
 80104aa:	40d3      	lsrs	r3, r2
 80104ac:	6004      	str	r4, [r0, #0]
 80104ae:	f840 3f04 	str.w	r3, [r0, #4]!
 80104b2:	4288      	cmp	r0, r1
 80104b4:	d3f4      	bcc.n	80104a0 <L_shift+0xc>
 80104b6:	bd70      	pop	{r4, r5, r6, pc}

080104b8 <__match>:
 80104b8:	b530      	push	{r4, r5, lr}
 80104ba:	6803      	ldr	r3, [r0, #0]
 80104bc:	3301      	adds	r3, #1
 80104be:	f811 4b01 	ldrb.w	r4, [r1], #1
 80104c2:	b914      	cbnz	r4, 80104ca <__match+0x12>
 80104c4:	6003      	str	r3, [r0, #0]
 80104c6:	2001      	movs	r0, #1
 80104c8:	bd30      	pop	{r4, r5, pc}
 80104ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80104ce:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 80104d2:	2d19      	cmp	r5, #25
 80104d4:	bf98      	it	ls
 80104d6:	3220      	addls	r2, #32
 80104d8:	42a2      	cmp	r2, r4
 80104da:	d0f0      	beq.n	80104be <__match+0x6>
 80104dc:	2000      	movs	r0, #0
 80104de:	e7f3      	b.n	80104c8 <__match+0x10>

080104e0 <__hexnan>:
 80104e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80104e4:	680b      	ldr	r3, [r1, #0]
 80104e6:	115e      	asrs	r6, r3, #5
 80104e8:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80104ec:	f013 031f 	ands.w	r3, r3, #31
 80104f0:	b087      	sub	sp, #28
 80104f2:	bf18      	it	ne
 80104f4:	3604      	addne	r6, #4
 80104f6:	2500      	movs	r5, #0
 80104f8:	1f37      	subs	r7, r6, #4
 80104fa:	4690      	mov	r8, r2
 80104fc:	6802      	ldr	r2, [r0, #0]
 80104fe:	9301      	str	r3, [sp, #4]
 8010500:	4682      	mov	sl, r0
 8010502:	f846 5c04 	str.w	r5, [r6, #-4]
 8010506:	46b9      	mov	r9, r7
 8010508:	463c      	mov	r4, r7
 801050a:	9502      	str	r5, [sp, #8]
 801050c:	46ab      	mov	fp, r5
 801050e:	7851      	ldrb	r1, [r2, #1]
 8010510:	1c53      	adds	r3, r2, #1
 8010512:	9303      	str	r3, [sp, #12]
 8010514:	b341      	cbz	r1, 8010568 <__hexnan+0x88>
 8010516:	4608      	mov	r0, r1
 8010518:	9205      	str	r2, [sp, #20]
 801051a:	9104      	str	r1, [sp, #16]
 801051c:	f7ff fd5e 	bl	800ffdc <__hexdig_fun>
 8010520:	2800      	cmp	r0, #0
 8010522:	d14f      	bne.n	80105c4 <__hexnan+0xe4>
 8010524:	9904      	ldr	r1, [sp, #16]
 8010526:	9a05      	ldr	r2, [sp, #20]
 8010528:	2920      	cmp	r1, #32
 801052a:	d818      	bhi.n	801055e <__hexnan+0x7e>
 801052c:	9b02      	ldr	r3, [sp, #8]
 801052e:	459b      	cmp	fp, r3
 8010530:	dd13      	ble.n	801055a <__hexnan+0x7a>
 8010532:	454c      	cmp	r4, r9
 8010534:	d206      	bcs.n	8010544 <__hexnan+0x64>
 8010536:	2d07      	cmp	r5, #7
 8010538:	dc04      	bgt.n	8010544 <__hexnan+0x64>
 801053a:	462a      	mov	r2, r5
 801053c:	4649      	mov	r1, r9
 801053e:	4620      	mov	r0, r4
 8010540:	f7ff ffa8 	bl	8010494 <L_shift>
 8010544:	4544      	cmp	r4, r8
 8010546:	d950      	bls.n	80105ea <__hexnan+0x10a>
 8010548:	2300      	movs	r3, #0
 801054a:	f1a4 0904 	sub.w	r9, r4, #4
 801054e:	f844 3c04 	str.w	r3, [r4, #-4]
 8010552:	f8cd b008 	str.w	fp, [sp, #8]
 8010556:	464c      	mov	r4, r9
 8010558:	461d      	mov	r5, r3
 801055a:	9a03      	ldr	r2, [sp, #12]
 801055c:	e7d7      	b.n	801050e <__hexnan+0x2e>
 801055e:	2929      	cmp	r1, #41	; 0x29
 8010560:	d156      	bne.n	8010610 <__hexnan+0x130>
 8010562:	3202      	adds	r2, #2
 8010564:	f8ca 2000 	str.w	r2, [sl]
 8010568:	f1bb 0f00 	cmp.w	fp, #0
 801056c:	d050      	beq.n	8010610 <__hexnan+0x130>
 801056e:	454c      	cmp	r4, r9
 8010570:	d206      	bcs.n	8010580 <__hexnan+0xa0>
 8010572:	2d07      	cmp	r5, #7
 8010574:	dc04      	bgt.n	8010580 <__hexnan+0xa0>
 8010576:	462a      	mov	r2, r5
 8010578:	4649      	mov	r1, r9
 801057a:	4620      	mov	r0, r4
 801057c:	f7ff ff8a 	bl	8010494 <L_shift>
 8010580:	4544      	cmp	r4, r8
 8010582:	d934      	bls.n	80105ee <__hexnan+0x10e>
 8010584:	f1a8 0204 	sub.w	r2, r8, #4
 8010588:	4623      	mov	r3, r4
 801058a:	f853 1b04 	ldr.w	r1, [r3], #4
 801058e:	f842 1f04 	str.w	r1, [r2, #4]!
 8010592:	429f      	cmp	r7, r3
 8010594:	d2f9      	bcs.n	801058a <__hexnan+0xaa>
 8010596:	1b3b      	subs	r3, r7, r4
 8010598:	f023 0303 	bic.w	r3, r3, #3
 801059c:	3304      	adds	r3, #4
 801059e:	3401      	adds	r4, #1
 80105a0:	3e03      	subs	r6, #3
 80105a2:	42b4      	cmp	r4, r6
 80105a4:	bf88      	it	hi
 80105a6:	2304      	movhi	r3, #4
 80105a8:	4443      	add	r3, r8
 80105aa:	2200      	movs	r2, #0
 80105ac:	f843 2b04 	str.w	r2, [r3], #4
 80105b0:	429f      	cmp	r7, r3
 80105b2:	d2fb      	bcs.n	80105ac <__hexnan+0xcc>
 80105b4:	683b      	ldr	r3, [r7, #0]
 80105b6:	b91b      	cbnz	r3, 80105c0 <__hexnan+0xe0>
 80105b8:	4547      	cmp	r7, r8
 80105ba:	d127      	bne.n	801060c <__hexnan+0x12c>
 80105bc:	2301      	movs	r3, #1
 80105be:	603b      	str	r3, [r7, #0]
 80105c0:	2005      	movs	r0, #5
 80105c2:	e026      	b.n	8010612 <__hexnan+0x132>
 80105c4:	3501      	adds	r5, #1
 80105c6:	2d08      	cmp	r5, #8
 80105c8:	f10b 0b01 	add.w	fp, fp, #1
 80105cc:	dd06      	ble.n	80105dc <__hexnan+0xfc>
 80105ce:	4544      	cmp	r4, r8
 80105d0:	d9c3      	bls.n	801055a <__hexnan+0x7a>
 80105d2:	2300      	movs	r3, #0
 80105d4:	f844 3c04 	str.w	r3, [r4, #-4]
 80105d8:	2501      	movs	r5, #1
 80105da:	3c04      	subs	r4, #4
 80105dc:	6822      	ldr	r2, [r4, #0]
 80105de:	f000 000f 	and.w	r0, r0, #15
 80105e2:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 80105e6:	6022      	str	r2, [r4, #0]
 80105e8:	e7b7      	b.n	801055a <__hexnan+0x7a>
 80105ea:	2508      	movs	r5, #8
 80105ec:	e7b5      	b.n	801055a <__hexnan+0x7a>
 80105ee:	9b01      	ldr	r3, [sp, #4]
 80105f0:	2b00      	cmp	r3, #0
 80105f2:	d0df      	beq.n	80105b4 <__hexnan+0xd4>
 80105f4:	f04f 32ff 	mov.w	r2, #4294967295
 80105f8:	f1c3 0320 	rsb	r3, r3, #32
 80105fc:	fa22 f303 	lsr.w	r3, r2, r3
 8010600:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8010604:	401a      	ands	r2, r3
 8010606:	f846 2c04 	str.w	r2, [r6, #-4]
 801060a:	e7d3      	b.n	80105b4 <__hexnan+0xd4>
 801060c:	3f04      	subs	r7, #4
 801060e:	e7d1      	b.n	80105b4 <__hexnan+0xd4>
 8010610:	2004      	movs	r0, #4
 8010612:	b007      	add	sp, #28
 8010614:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08010618 <_isatty_r>:
 8010618:	b538      	push	{r3, r4, r5, lr}
 801061a:	4d06      	ldr	r5, [pc, #24]	; (8010634 <_isatty_r+0x1c>)
 801061c:	2300      	movs	r3, #0
 801061e:	4604      	mov	r4, r0
 8010620:	4608      	mov	r0, r1
 8010622:	602b      	str	r3, [r5, #0]
 8010624:	f7f3 fb1f 	bl	8003c66 <_isatty>
 8010628:	1c43      	adds	r3, r0, #1
 801062a:	d102      	bne.n	8010632 <_isatty_r+0x1a>
 801062c:	682b      	ldr	r3, [r5, #0]
 801062e:	b103      	cbz	r3, 8010632 <_isatty_r+0x1a>
 8010630:	6023      	str	r3, [r4, #0]
 8010632:	bd38      	pop	{r3, r4, r5, pc}
 8010634:	24000aa8 	.word	0x24000aa8

08010638 <_lseek_r>:
 8010638:	b538      	push	{r3, r4, r5, lr}
 801063a:	4d07      	ldr	r5, [pc, #28]	; (8010658 <_lseek_r+0x20>)
 801063c:	4604      	mov	r4, r0
 801063e:	4608      	mov	r0, r1
 8010640:	4611      	mov	r1, r2
 8010642:	2200      	movs	r2, #0
 8010644:	602a      	str	r2, [r5, #0]
 8010646:	461a      	mov	r2, r3
 8010648:	f7f3 fb18 	bl	8003c7c <_lseek>
 801064c:	1c43      	adds	r3, r0, #1
 801064e:	d102      	bne.n	8010656 <_lseek_r+0x1e>
 8010650:	682b      	ldr	r3, [r5, #0]
 8010652:	b103      	cbz	r3, 8010656 <_lseek_r+0x1e>
 8010654:	6023      	str	r3, [r4, #0]
 8010656:	bd38      	pop	{r3, r4, r5, pc}
 8010658:	24000aa8 	.word	0x24000aa8

0801065c <__ascii_mbtowc>:
 801065c:	b082      	sub	sp, #8
 801065e:	b901      	cbnz	r1, 8010662 <__ascii_mbtowc+0x6>
 8010660:	a901      	add	r1, sp, #4
 8010662:	b142      	cbz	r2, 8010676 <__ascii_mbtowc+0x1a>
 8010664:	b14b      	cbz	r3, 801067a <__ascii_mbtowc+0x1e>
 8010666:	7813      	ldrb	r3, [r2, #0]
 8010668:	600b      	str	r3, [r1, #0]
 801066a:	7812      	ldrb	r2, [r2, #0]
 801066c:	1e10      	subs	r0, r2, #0
 801066e:	bf18      	it	ne
 8010670:	2001      	movne	r0, #1
 8010672:	b002      	add	sp, #8
 8010674:	4770      	bx	lr
 8010676:	4610      	mov	r0, r2
 8010678:	e7fb      	b.n	8010672 <__ascii_mbtowc+0x16>
 801067a:	f06f 0001 	mvn.w	r0, #1
 801067e:	e7f8      	b.n	8010672 <__ascii_mbtowc+0x16>

08010680 <__malloc_lock>:
 8010680:	4801      	ldr	r0, [pc, #4]	; (8010688 <__malloc_lock+0x8>)
 8010682:	f7fe bbbb 	b.w	800edfc <__retarget_lock_acquire_recursive>
 8010686:	bf00      	nop
 8010688:	24000a9c 	.word	0x24000a9c

0801068c <__malloc_unlock>:
 801068c:	4801      	ldr	r0, [pc, #4]	; (8010694 <__malloc_unlock+0x8>)
 801068e:	f7fe bbb6 	b.w	800edfe <__retarget_lock_release_recursive>
 8010692:	bf00      	nop
 8010694:	24000a9c 	.word	0x24000a9c

08010698 <_Balloc>:
 8010698:	b570      	push	{r4, r5, r6, lr}
 801069a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 801069c:	4604      	mov	r4, r0
 801069e:	460d      	mov	r5, r1
 80106a0:	b976      	cbnz	r6, 80106c0 <_Balloc+0x28>
 80106a2:	2010      	movs	r0, #16
 80106a4:	f000 fd3a 	bl	801111c <malloc>
 80106a8:	4602      	mov	r2, r0
 80106aa:	6260      	str	r0, [r4, #36]	; 0x24
 80106ac:	b920      	cbnz	r0, 80106b8 <_Balloc+0x20>
 80106ae:	4b18      	ldr	r3, [pc, #96]	; (8010710 <_Balloc+0x78>)
 80106b0:	4818      	ldr	r0, [pc, #96]	; (8010714 <_Balloc+0x7c>)
 80106b2:	2166      	movs	r1, #102	; 0x66
 80106b4:	f000 fd02 	bl	80110bc <__assert_func>
 80106b8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80106bc:	6006      	str	r6, [r0, #0]
 80106be:	60c6      	str	r6, [r0, #12]
 80106c0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80106c2:	68f3      	ldr	r3, [r6, #12]
 80106c4:	b183      	cbz	r3, 80106e8 <_Balloc+0x50>
 80106c6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80106c8:	68db      	ldr	r3, [r3, #12]
 80106ca:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80106ce:	b9b8      	cbnz	r0, 8010700 <_Balloc+0x68>
 80106d0:	2101      	movs	r1, #1
 80106d2:	fa01 f605 	lsl.w	r6, r1, r5
 80106d6:	1d72      	adds	r2, r6, #5
 80106d8:	0092      	lsls	r2, r2, #2
 80106da:	4620      	mov	r0, r4
 80106dc:	f000 fc9a 	bl	8011014 <_calloc_r>
 80106e0:	b160      	cbz	r0, 80106fc <_Balloc+0x64>
 80106e2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80106e6:	e00e      	b.n	8010706 <_Balloc+0x6e>
 80106e8:	2221      	movs	r2, #33	; 0x21
 80106ea:	2104      	movs	r1, #4
 80106ec:	4620      	mov	r0, r4
 80106ee:	f000 fc91 	bl	8011014 <_calloc_r>
 80106f2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80106f4:	60f0      	str	r0, [r6, #12]
 80106f6:	68db      	ldr	r3, [r3, #12]
 80106f8:	2b00      	cmp	r3, #0
 80106fa:	d1e4      	bne.n	80106c6 <_Balloc+0x2e>
 80106fc:	2000      	movs	r0, #0
 80106fe:	bd70      	pop	{r4, r5, r6, pc}
 8010700:	6802      	ldr	r2, [r0, #0]
 8010702:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8010706:	2300      	movs	r3, #0
 8010708:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801070c:	e7f7      	b.n	80106fe <_Balloc+0x66>
 801070e:	bf00      	nop
 8010710:	08012414 	.word	0x08012414
 8010714:	0801242b 	.word	0x0801242b

08010718 <_Bfree>:
 8010718:	b570      	push	{r4, r5, r6, lr}
 801071a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 801071c:	4605      	mov	r5, r0
 801071e:	460c      	mov	r4, r1
 8010720:	b976      	cbnz	r6, 8010740 <_Bfree+0x28>
 8010722:	2010      	movs	r0, #16
 8010724:	f000 fcfa 	bl	801111c <malloc>
 8010728:	4602      	mov	r2, r0
 801072a:	6268      	str	r0, [r5, #36]	; 0x24
 801072c:	b920      	cbnz	r0, 8010738 <_Bfree+0x20>
 801072e:	4b09      	ldr	r3, [pc, #36]	; (8010754 <_Bfree+0x3c>)
 8010730:	4809      	ldr	r0, [pc, #36]	; (8010758 <_Bfree+0x40>)
 8010732:	218a      	movs	r1, #138	; 0x8a
 8010734:	f000 fcc2 	bl	80110bc <__assert_func>
 8010738:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801073c:	6006      	str	r6, [r0, #0]
 801073e:	60c6      	str	r6, [r0, #12]
 8010740:	b13c      	cbz	r4, 8010752 <_Bfree+0x3a>
 8010742:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8010744:	6862      	ldr	r2, [r4, #4]
 8010746:	68db      	ldr	r3, [r3, #12]
 8010748:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801074c:	6021      	str	r1, [r4, #0]
 801074e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8010752:	bd70      	pop	{r4, r5, r6, pc}
 8010754:	08012414 	.word	0x08012414
 8010758:	0801242b 	.word	0x0801242b

0801075c <__multadd>:
 801075c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010760:	690d      	ldr	r5, [r1, #16]
 8010762:	4607      	mov	r7, r0
 8010764:	460c      	mov	r4, r1
 8010766:	461e      	mov	r6, r3
 8010768:	f101 0c14 	add.w	ip, r1, #20
 801076c:	2000      	movs	r0, #0
 801076e:	f8dc 3000 	ldr.w	r3, [ip]
 8010772:	b299      	uxth	r1, r3
 8010774:	fb02 6101 	mla	r1, r2, r1, r6
 8010778:	0c1e      	lsrs	r6, r3, #16
 801077a:	0c0b      	lsrs	r3, r1, #16
 801077c:	fb02 3306 	mla	r3, r2, r6, r3
 8010780:	b289      	uxth	r1, r1
 8010782:	3001      	adds	r0, #1
 8010784:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8010788:	4285      	cmp	r5, r0
 801078a:	f84c 1b04 	str.w	r1, [ip], #4
 801078e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8010792:	dcec      	bgt.n	801076e <__multadd+0x12>
 8010794:	b30e      	cbz	r6, 80107da <__multadd+0x7e>
 8010796:	68a3      	ldr	r3, [r4, #8]
 8010798:	42ab      	cmp	r3, r5
 801079a:	dc19      	bgt.n	80107d0 <__multadd+0x74>
 801079c:	6861      	ldr	r1, [r4, #4]
 801079e:	4638      	mov	r0, r7
 80107a0:	3101      	adds	r1, #1
 80107a2:	f7ff ff79 	bl	8010698 <_Balloc>
 80107a6:	4680      	mov	r8, r0
 80107a8:	b928      	cbnz	r0, 80107b6 <__multadd+0x5a>
 80107aa:	4602      	mov	r2, r0
 80107ac:	4b0c      	ldr	r3, [pc, #48]	; (80107e0 <__multadd+0x84>)
 80107ae:	480d      	ldr	r0, [pc, #52]	; (80107e4 <__multadd+0x88>)
 80107b0:	21b5      	movs	r1, #181	; 0xb5
 80107b2:	f000 fc83 	bl	80110bc <__assert_func>
 80107b6:	6922      	ldr	r2, [r4, #16]
 80107b8:	3202      	adds	r2, #2
 80107ba:	f104 010c 	add.w	r1, r4, #12
 80107be:	0092      	lsls	r2, r2, #2
 80107c0:	300c      	adds	r0, #12
 80107c2:	f7fe fb83 	bl	800eecc <memcpy>
 80107c6:	4621      	mov	r1, r4
 80107c8:	4638      	mov	r0, r7
 80107ca:	f7ff ffa5 	bl	8010718 <_Bfree>
 80107ce:	4644      	mov	r4, r8
 80107d0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80107d4:	3501      	adds	r5, #1
 80107d6:	615e      	str	r6, [r3, #20]
 80107d8:	6125      	str	r5, [r4, #16]
 80107da:	4620      	mov	r0, r4
 80107dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80107e0:	08012388 	.word	0x08012388
 80107e4:	0801242b 	.word	0x0801242b

080107e8 <__s2b>:
 80107e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80107ec:	460c      	mov	r4, r1
 80107ee:	4615      	mov	r5, r2
 80107f0:	461f      	mov	r7, r3
 80107f2:	2209      	movs	r2, #9
 80107f4:	3308      	adds	r3, #8
 80107f6:	4606      	mov	r6, r0
 80107f8:	fb93 f3f2 	sdiv	r3, r3, r2
 80107fc:	2100      	movs	r1, #0
 80107fe:	2201      	movs	r2, #1
 8010800:	429a      	cmp	r2, r3
 8010802:	db09      	blt.n	8010818 <__s2b+0x30>
 8010804:	4630      	mov	r0, r6
 8010806:	f7ff ff47 	bl	8010698 <_Balloc>
 801080a:	b940      	cbnz	r0, 801081e <__s2b+0x36>
 801080c:	4602      	mov	r2, r0
 801080e:	4b19      	ldr	r3, [pc, #100]	; (8010874 <__s2b+0x8c>)
 8010810:	4819      	ldr	r0, [pc, #100]	; (8010878 <__s2b+0x90>)
 8010812:	21ce      	movs	r1, #206	; 0xce
 8010814:	f000 fc52 	bl	80110bc <__assert_func>
 8010818:	0052      	lsls	r2, r2, #1
 801081a:	3101      	adds	r1, #1
 801081c:	e7f0      	b.n	8010800 <__s2b+0x18>
 801081e:	9b08      	ldr	r3, [sp, #32]
 8010820:	6143      	str	r3, [r0, #20]
 8010822:	2d09      	cmp	r5, #9
 8010824:	f04f 0301 	mov.w	r3, #1
 8010828:	6103      	str	r3, [r0, #16]
 801082a:	dd16      	ble.n	801085a <__s2b+0x72>
 801082c:	f104 0909 	add.w	r9, r4, #9
 8010830:	46c8      	mov	r8, r9
 8010832:	442c      	add	r4, r5
 8010834:	f818 3b01 	ldrb.w	r3, [r8], #1
 8010838:	4601      	mov	r1, r0
 801083a:	3b30      	subs	r3, #48	; 0x30
 801083c:	220a      	movs	r2, #10
 801083e:	4630      	mov	r0, r6
 8010840:	f7ff ff8c 	bl	801075c <__multadd>
 8010844:	45a0      	cmp	r8, r4
 8010846:	d1f5      	bne.n	8010834 <__s2b+0x4c>
 8010848:	f1a5 0408 	sub.w	r4, r5, #8
 801084c:	444c      	add	r4, r9
 801084e:	1b2d      	subs	r5, r5, r4
 8010850:	1963      	adds	r3, r4, r5
 8010852:	42bb      	cmp	r3, r7
 8010854:	db04      	blt.n	8010860 <__s2b+0x78>
 8010856:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801085a:	340a      	adds	r4, #10
 801085c:	2509      	movs	r5, #9
 801085e:	e7f6      	b.n	801084e <__s2b+0x66>
 8010860:	f814 3b01 	ldrb.w	r3, [r4], #1
 8010864:	4601      	mov	r1, r0
 8010866:	3b30      	subs	r3, #48	; 0x30
 8010868:	220a      	movs	r2, #10
 801086a:	4630      	mov	r0, r6
 801086c:	f7ff ff76 	bl	801075c <__multadd>
 8010870:	e7ee      	b.n	8010850 <__s2b+0x68>
 8010872:	bf00      	nop
 8010874:	08012388 	.word	0x08012388
 8010878:	0801242b 	.word	0x0801242b

0801087c <__hi0bits>:
 801087c:	0c03      	lsrs	r3, r0, #16
 801087e:	041b      	lsls	r3, r3, #16
 8010880:	b9d3      	cbnz	r3, 80108b8 <__hi0bits+0x3c>
 8010882:	0400      	lsls	r0, r0, #16
 8010884:	2310      	movs	r3, #16
 8010886:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 801088a:	bf04      	itt	eq
 801088c:	0200      	lsleq	r0, r0, #8
 801088e:	3308      	addeq	r3, #8
 8010890:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8010894:	bf04      	itt	eq
 8010896:	0100      	lsleq	r0, r0, #4
 8010898:	3304      	addeq	r3, #4
 801089a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 801089e:	bf04      	itt	eq
 80108a0:	0080      	lsleq	r0, r0, #2
 80108a2:	3302      	addeq	r3, #2
 80108a4:	2800      	cmp	r0, #0
 80108a6:	db05      	blt.n	80108b4 <__hi0bits+0x38>
 80108a8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80108ac:	f103 0301 	add.w	r3, r3, #1
 80108b0:	bf08      	it	eq
 80108b2:	2320      	moveq	r3, #32
 80108b4:	4618      	mov	r0, r3
 80108b6:	4770      	bx	lr
 80108b8:	2300      	movs	r3, #0
 80108ba:	e7e4      	b.n	8010886 <__hi0bits+0xa>

080108bc <__lo0bits>:
 80108bc:	6803      	ldr	r3, [r0, #0]
 80108be:	f013 0207 	ands.w	r2, r3, #7
 80108c2:	4601      	mov	r1, r0
 80108c4:	d00b      	beq.n	80108de <__lo0bits+0x22>
 80108c6:	07da      	lsls	r2, r3, #31
 80108c8:	d423      	bmi.n	8010912 <__lo0bits+0x56>
 80108ca:	0798      	lsls	r0, r3, #30
 80108cc:	bf49      	itett	mi
 80108ce:	085b      	lsrmi	r3, r3, #1
 80108d0:	089b      	lsrpl	r3, r3, #2
 80108d2:	2001      	movmi	r0, #1
 80108d4:	600b      	strmi	r3, [r1, #0]
 80108d6:	bf5c      	itt	pl
 80108d8:	600b      	strpl	r3, [r1, #0]
 80108da:	2002      	movpl	r0, #2
 80108dc:	4770      	bx	lr
 80108de:	b298      	uxth	r0, r3
 80108e0:	b9a8      	cbnz	r0, 801090e <__lo0bits+0x52>
 80108e2:	0c1b      	lsrs	r3, r3, #16
 80108e4:	2010      	movs	r0, #16
 80108e6:	b2da      	uxtb	r2, r3
 80108e8:	b90a      	cbnz	r2, 80108ee <__lo0bits+0x32>
 80108ea:	3008      	adds	r0, #8
 80108ec:	0a1b      	lsrs	r3, r3, #8
 80108ee:	071a      	lsls	r2, r3, #28
 80108f0:	bf04      	itt	eq
 80108f2:	091b      	lsreq	r3, r3, #4
 80108f4:	3004      	addeq	r0, #4
 80108f6:	079a      	lsls	r2, r3, #30
 80108f8:	bf04      	itt	eq
 80108fa:	089b      	lsreq	r3, r3, #2
 80108fc:	3002      	addeq	r0, #2
 80108fe:	07da      	lsls	r2, r3, #31
 8010900:	d403      	bmi.n	801090a <__lo0bits+0x4e>
 8010902:	085b      	lsrs	r3, r3, #1
 8010904:	f100 0001 	add.w	r0, r0, #1
 8010908:	d005      	beq.n	8010916 <__lo0bits+0x5a>
 801090a:	600b      	str	r3, [r1, #0]
 801090c:	4770      	bx	lr
 801090e:	4610      	mov	r0, r2
 8010910:	e7e9      	b.n	80108e6 <__lo0bits+0x2a>
 8010912:	2000      	movs	r0, #0
 8010914:	4770      	bx	lr
 8010916:	2020      	movs	r0, #32
 8010918:	4770      	bx	lr
	...

0801091c <__i2b>:
 801091c:	b510      	push	{r4, lr}
 801091e:	460c      	mov	r4, r1
 8010920:	2101      	movs	r1, #1
 8010922:	f7ff feb9 	bl	8010698 <_Balloc>
 8010926:	4602      	mov	r2, r0
 8010928:	b928      	cbnz	r0, 8010936 <__i2b+0x1a>
 801092a:	4b05      	ldr	r3, [pc, #20]	; (8010940 <__i2b+0x24>)
 801092c:	4805      	ldr	r0, [pc, #20]	; (8010944 <__i2b+0x28>)
 801092e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8010932:	f000 fbc3 	bl	80110bc <__assert_func>
 8010936:	2301      	movs	r3, #1
 8010938:	6144      	str	r4, [r0, #20]
 801093a:	6103      	str	r3, [r0, #16]
 801093c:	bd10      	pop	{r4, pc}
 801093e:	bf00      	nop
 8010940:	08012388 	.word	0x08012388
 8010944:	0801242b 	.word	0x0801242b

08010948 <__multiply>:
 8010948:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801094c:	4691      	mov	r9, r2
 801094e:	690a      	ldr	r2, [r1, #16]
 8010950:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8010954:	429a      	cmp	r2, r3
 8010956:	bfb8      	it	lt
 8010958:	460b      	movlt	r3, r1
 801095a:	460c      	mov	r4, r1
 801095c:	bfbc      	itt	lt
 801095e:	464c      	movlt	r4, r9
 8010960:	4699      	movlt	r9, r3
 8010962:	6927      	ldr	r7, [r4, #16]
 8010964:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8010968:	68a3      	ldr	r3, [r4, #8]
 801096a:	6861      	ldr	r1, [r4, #4]
 801096c:	eb07 060a 	add.w	r6, r7, sl
 8010970:	42b3      	cmp	r3, r6
 8010972:	b085      	sub	sp, #20
 8010974:	bfb8      	it	lt
 8010976:	3101      	addlt	r1, #1
 8010978:	f7ff fe8e 	bl	8010698 <_Balloc>
 801097c:	b930      	cbnz	r0, 801098c <__multiply+0x44>
 801097e:	4602      	mov	r2, r0
 8010980:	4b44      	ldr	r3, [pc, #272]	; (8010a94 <__multiply+0x14c>)
 8010982:	4845      	ldr	r0, [pc, #276]	; (8010a98 <__multiply+0x150>)
 8010984:	f240 115d 	movw	r1, #349	; 0x15d
 8010988:	f000 fb98 	bl	80110bc <__assert_func>
 801098c:	f100 0514 	add.w	r5, r0, #20
 8010990:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8010994:	462b      	mov	r3, r5
 8010996:	2200      	movs	r2, #0
 8010998:	4543      	cmp	r3, r8
 801099a:	d321      	bcc.n	80109e0 <__multiply+0x98>
 801099c:	f104 0314 	add.w	r3, r4, #20
 80109a0:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80109a4:	f109 0314 	add.w	r3, r9, #20
 80109a8:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80109ac:	9202      	str	r2, [sp, #8]
 80109ae:	1b3a      	subs	r2, r7, r4
 80109b0:	3a15      	subs	r2, #21
 80109b2:	f022 0203 	bic.w	r2, r2, #3
 80109b6:	3204      	adds	r2, #4
 80109b8:	f104 0115 	add.w	r1, r4, #21
 80109bc:	428f      	cmp	r7, r1
 80109be:	bf38      	it	cc
 80109c0:	2204      	movcc	r2, #4
 80109c2:	9201      	str	r2, [sp, #4]
 80109c4:	9a02      	ldr	r2, [sp, #8]
 80109c6:	9303      	str	r3, [sp, #12]
 80109c8:	429a      	cmp	r2, r3
 80109ca:	d80c      	bhi.n	80109e6 <__multiply+0x9e>
 80109cc:	2e00      	cmp	r6, #0
 80109ce:	dd03      	ble.n	80109d8 <__multiply+0x90>
 80109d0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80109d4:	2b00      	cmp	r3, #0
 80109d6:	d05a      	beq.n	8010a8e <__multiply+0x146>
 80109d8:	6106      	str	r6, [r0, #16]
 80109da:	b005      	add	sp, #20
 80109dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80109e0:	f843 2b04 	str.w	r2, [r3], #4
 80109e4:	e7d8      	b.n	8010998 <__multiply+0x50>
 80109e6:	f8b3 a000 	ldrh.w	sl, [r3]
 80109ea:	f1ba 0f00 	cmp.w	sl, #0
 80109ee:	d024      	beq.n	8010a3a <__multiply+0xf2>
 80109f0:	f104 0e14 	add.w	lr, r4, #20
 80109f4:	46a9      	mov	r9, r5
 80109f6:	f04f 0c00 	mov.w	ip, #0
 80109fa:	f85e 2b04 	ldr.w	r2, [lr], #4
 80109fe:	f8d9 1000 	ldr.w	r1, [r9]
 8010a02:	fa1f fb82 	uxth.w	fp, r2
 8010a06:	b289      	uxth	r1, r1
 8010a08:	fb0a 110b 	mla	r1, sl, fp, r1
 8010a0c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8010a10:	f8d9 2000 	ldr.w	r2, [r9]
 8010a14:	4461      	add	r1, ip
 8010a16:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8010a1a:	fb0a c20b 	mla	r2, sl, fp, ip
 8010a1e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8010a22:	b289      	uxth	r1, r1
 8010a24:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8010a28:	4577      	cmp	r7, lr
 8010a2a:	f849 1b04 	str.w	r1, [r9], #4
 8010a2e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8010a32:	d8e2      	bhi.n	80109fa <__multiply+0xb2>
 8010a34:	9a01      	ldr	r2, [sp, #4]
 8010a36:	f845 c002 	str.w	ip, [r5, r2]
 8010a3a:	9a03      	ldr	r2, [sp, #12]
 8010a3c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8010a40:	3304      	adds	r3, #4
 8010a42:	f1b9 0f00 	cmp.w	r9, #0
 8010a46:	d020      	beq.n	8010a8a <__multiply+0x142>
 8010a48:	6829      	ldr	r1, [r5, #0]
 8010a4a:	f104 0c14 	add.w	ip, r4, #20
 8010a4e:	46ae      	mov	lr, r5
 8010a50:	f04f 0a00 	mov.w	sl, #0
 8010a54:	f8bc b000 	ldrh.w	fp, [ip]
 8010a58:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8010a5c:	fb09 220b 	mla	r2, r9, fp, r2
 8010a60:	4492      	add	sl, r2
 8010a62:	b289      	uxth	r1, r1
 8010a64:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8010a68:	f84e 1b04 	str.w	r1, [lr], #4
 8010a6c:	f85c 2b04 	ldr.w	r2, [ip], #4
 8010a70:	f8be 1000 	ldrh.w	r1, [lr]
 8010a74:	0c12      	lsrs	r2, r2, #16
 8010a76:	fb09 1102 	mla	r1, r9, r2, r1
 8010a7a:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8010a7e:	4567      	cmp	r7, ip
 8010a80:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8010a84:	d8e6      	bhi.n	8010a54 <__multiply+0x10c>
 8010a86:	9a01      	ldr	r2, [sp, #4]
 8010a88:	50a9      	str	r1, [r5, r2]
 8010a8a:	3504      	adds	r5, #4
 8010a8c:	e79a      	b.n	80109c4 <__multiply+0x7c>
 8010a8e:	3e01      	subs	r6, #1
 8010a90:	e79c      	b.n	80109cc <__multiply+0x84>
 8010a92:	bf00      	nop
 8010a94:	08012388 	.word	0x08012388
 8010a98:	0801242b 	.word	0x0801242b

08010a9c <__pow5mult>:
 8010a9c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010aa0:	4615      	mov	r5, r2
 8010aa2:	f012 0203 	ands.w	r2, r2, #3
 8010aa6:	4606      	mov	r6, r0
 8010aa8:	460f      	mov	r7, r1
 8010aaa:	d007      	beq.n	8010abc <__pow5mult+0x20>
 8010aac:	4c25      	ldr	r4, [pc, #148]	; (8010b44 <__pow5mult+0xa8>)
 8010aae:	3a01      	subs	r2, #1
 8010ab0:	2300      	movs	r3, #0
 8010ab2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8010ab6:	f7ff fe51 	bl	801075c <__multadd>
 8010aba:	4607      	mov	r7, r0
 8010abc:	10ad      	asrs	r5, r5, #2
 8010abe:	d03d      	beq.n	8010b3c <__pow5mult+0xa0>
 8010ac0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8010ac2:	b97c      	cbnz	r4, 8010ae4 <__pow5mult+0x48>
 8010ac4:	2010      	movs	r0, #16
 8010ac6:	f000 fb29 	bl	801111c <malloc>
 8010aca:	4602      	mov	r2, r0
 8010acc:	6270      	str	r0, [r6, #36]	; 0x24
 8010ace:	b928      	cbnz	r0, 8010adc <__pow5mult+0x40>
 8010ad0:	4b1d      	ldr	r3, [pc, #116]	; (8010b48 <__pow5mult+0xac>)
 8010ad2:	481e      	ldr	r0, [pc, #120]	; (8010b4c <__pow5mult+0xb0>)
 8010ad4:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8010ad8:	f000 faf0 	bl	80110bc <__assert_func>
 8010adc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8010ae0:	6004      	str	r4, [r0, #0]
 8010ae2:	60c4      	str	r4, [r0, #12]
 8010ae4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8010ae8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8010aec:	b94c      	cbnz	r4, 8010b02 <__pow5mult+0x66>
 8010aee:	f240 2171 	movw	r1, #625	; 0x271
 8010af2:	4630      	mov	r0, r6
 8010af4:	f7ff ff12 	bl	801091c <__i2b>
 8010af8:	2300      	movs	r3, #0
 8010afa:	f8c8 0008 	str.w	r0, [r8, #8]
 8010afe:	4604      	mov	r4, r0
 8010b00:	6003      	str	r3, [r0, #0]
 8010b02:	f04f 0900 	mov.w	r9, #0
 8010b06:	07eb      	lsls	r3, r5, #31
 8010b08:	d50a      	bpl.n	8010b20 <__pow5mult+0x84>
 8010b0a:	4639      	mov	r1, r7
 8010b0c:	4622      	mov	r2, r4
 8010b0e:	4630      	mov	r0, r6
 8010b10:	f7ff ff1a 	bl	8010948 <__multiply>
 8010b14:	4639      	mov	r1, r7
 8010b16:	4680      	mov	r8, r0
 8010b18:	4630      	mov	r0, r6
 8010b1a:	f7ff fdfd 	bl	8010718 <_Bfree>
 8010b1e:	4647      	mov	r7, r8
 8010b20:	106d      	asrs	r5, r5, #1
 8010b22:	d00b      	beq.n	8010b3c <__pow5mult+0xa0>
 8010b24:	6820      	ldr	r0, [r4, #0]
 8010b26:	b938      	cbnz	r0, 8010b38 <__pow5mult+0x9c>
 8010b28:	4622      	mov	r2, r4
 8010b2a:	4621      	mov	r1, r4
 8010b2c:	4630      	mov	r0, r6
 8010b2e:	f7ff ff0b 	bl	8010948 <__multiply>
 8010b32:	6020      	str	r0, [r4, #0]
 8010b34:	f8c0 9000 	str.w	r9, [r0]
 8010b38:	4604      	mov	r4, r0
 8010b3a:	e7e4      	b.n	8010b06 <__pow5mult+0x6a>
 8010b3c:	4638      	mov	r0, r7
 8010b3e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010b42:	bf00      	nop
 8010b44:	08012578 	.word	0x08012578
 8010b48:	08012414 	.word	0x08012414
 8010b4c:	0801242b 	.word	0x0801242b

08010b50 <__lshift>:
 8010b50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010b54:	460c      	mov	r4, r1
 8010b56:	6849      	ldr	r1, [r1, #4]
 8010b58:	6923      	ldr	r3, [r4, #16]
 8010b5a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8010b5e:	68a3      	ldr	r3, [r4, #8]
 8010b60:	4607      	mov	r7, r0
 8010b62:	4691      	mov	r9, r2
 8010b64:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8010b68:	f108 0601 	add.w	r6, r8, #1
 8010b6c:	42b3      	cmp	r3, r6
 8010b6e:	db0b      	blt.n	8010b88 <__lshift+0x38>
 8010b70:	4638      	mov	r0, r7
 8010b72:	f7ff fd91 	bl	8010698 <_Balloc>
 8010b76:	4605      	mov	r5, r0
 8010b78:	b948      	cbnz	r0, 8010b8e <__lshift+0x3e>
 8010b7a:	4602      	mov	r2, r0
 8010b7c:	4b2a      	ldr	r3, [pc, #168]	; (8010c28 <__lshift+0xd8>)
 8010b7e:	482b      	ldr	r0, [pc, #172]	; (8010c2c <__lshift+0xdc>)
 8010b80:	f240 11d9 	movw	r1, #473	; 0x1d9
 8010b84:	f000 fa9a 	bl	80110bc <__assert_func>
 8010b88:	3101      	adds	r1, #1
 8010b8a:	005b      	lsls	r3, r3, #1
 8010b8c:	e7ee      	b.n	8010b6c <__lshift+0x1c>
 8010b8e:	2300      	movs	r3, #0
 8010b90:	f100 0114 	add.w	r1, r0, #20
 8010b94:	f100 0210 	add.w	r2, r0, #16
 8010b98:	4618      	mov	r0, r3
 8010b9a:	4553      	cmp	r3, sl
 8010b9c:	db37      	blt.n	8010c0e <__lshift+0xbe>
 8010b9e:	6920      	ldr	r0, [r4, #16]
 8010ba0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8010ba4:	f104 0314 	add.w	r3, r4, #20
 8010ba8:	f019 091f 	ands.w	r9, r9, #31
 8010bac:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8010bb0:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8010bb4:	d02f      	beq.n	8010c16 <__lshift+0xc6>
 8010bb6:	f1c9 0e20 	rsb	lr, r9, #32
 8010bba:	468a      	mov	sl, r1
 8010bbc:	f04f 0c00 	mov.w	ip, #0
 8010bc0:	681a      	ldr	r2, [r3, #0]
 8010bc2:	fa02 f209 	lsl.w	r2, r2, r9
 8010bc6:	ea42 020c 	orr.w	r2, r2, ip
 8010bca:	f84a 2b04 	str.w	r2, [sl], #4
 8010bce:	f853 2b04 	ldr.w	r2, [r3], #4
 8010bd2:	4298      	cmp	r0, r3
 8010bd4:	fa22 fc0e 	lsr.w	ip, r2, lr
 8010bd8:	d8f2      	bhi.n	8010bc0 <__lshift+0x70>
 8010bda:	1b03      	subs	r3, r0, r4
 8010bdc:	3b15      	subs	r3, #21
 8010bde:	f023 0303 	bic.w	r3, r3, #3
 8010be2:	3304      	adds	r3, #4
 8010be4:	f104 0215 	add.w	r2, r4, #21
 8010be8:	4290      	cmp	r0, r2
 8010bea:	bf38      	it	cc
 8010bec:	2304      	movcc	r3, #4
 8010bee:	f841 c003 	str.w	ip, [r1, r3]
 8010bf2:	f1bc 0f00 	cmp.w	ip, #0
 8010bf6:	d001      	beq.n	8010bfc <__lshift+0xac>
 8010bf8:	f108 0602 	add.w	r6, r8, #2
 8010bfc:	3e01      	subs	r6, #1
 8010bfe:	4638      	mov	r0, r7
 8010c00:	612e      	str	r6, [r5, #16]
 8010c02:	4621      	mov	r1, r4
 8010c04:	f7ff fd88 	bl	8010718 <_Bfree>
 8010c08:	4628      	mov	r0, r5
 8010c0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010c0e:	f842 0f04 	str.w	r0, [r2, #4]!
 8010c12:	3301      	adds	r3, #1
 8010c14:	e7c1      	b.n	8010b9a <__lshift+0x4a>
 8010c16:	3904      	subs	r1, #4
 8010c18:	f853 2b04 	ldr.w	r2, [r3], #4
 8010c1c:	f841 2f04 	str.w	r2, [r1, #4]!
 8010c20:	4298      	cmp	r0, r3
 8010c22:	d8f9      	bhi.n	8010c18 <__lshift+0xc8>
 8010c24:	e7ea      	b.n	8010bfc <__lshift+0xac>
 8010c26:	bf00      	nop
 8010c28:	08012388 	.word	0x08012388
 8010c2c:	0801242b 	.word	0x0801242b

08010c30 <__mcmp>:
 8010c30:	b530      	push	{r4, r5, lr}
 8010c32:	6902      	ldr	r2, [r0, #16]
 8010c34:	690c      	ldr	r4, [r1, #16]
 8010c36:	1b12      	subs	r2, r2, r4
 8010c38:	d10e      	bne.n	8010c58 <__mcmp+0x28>
 8010c3a:	f100 0314 	add.w	r3, r0, #20
 8010c3e:	3114      	adds	r1, #20
 8010c40:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8010c44:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8010c48:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8010c4c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8010c50:	42a5      	cmp	r5, r4
 8010c52:	d003      	beq.n	8010c5c <__mcmp+0x2c>
 8010c54:	d305      	bcc.n	8010c62 <__mcmp+0x32>
 8010c56:	2201      	movs	r2, #1
 8010c58:	4610      	mov	r0, r2
 8010c5a:	bd30      	pop	{r4, r5, pc}
 8010c5c:	4283      	cmp	r3, r0
 8010c5e:	d3f3      	bcc.n	8010c48 <__mcmp+0x18>
 8010c60:	e7fa      	b.n	8010c58 <__mcmp+0x28>
 8010c62:	f04f 32ff 	mov.w	r2, #4294967295
 8010c66:	e7f7      	b.n	8010c58 <__mcmp+0x28>

08010c68 <__mdiff>:
 8010c68:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010c6c:	460c      	mov	r4, r1
 8010c6e:	4606      	mov	r6, r0
 8010c70:	4611      	mov	r1, r2
 8010c72:	4620      	mov	r0, r4
 8010c74:	4690      	mov	r8, r2
 8010c76:	f7ff ffdb 	bl	8010c30 <__mcmp>
 8010c7a:	1e05      	subs	r5, r0, #0
 8010c7c:	d110      	bne.n	8010ca0 <__mdiff+0x38>
 8010c7e:	4629      	mov	r1, r5
 8010c80:	4630      	mov	r0, r6
 8010c82:	f7ff fd09 	bl	8010698 <_Balloc>
 8010c86:	b930      	cbnz	r0, 8010c96 <__mdiff+0x2e>
 8010c88:	4b3a      	ldr	r3, [pc, #232]	; (8010d74 <__mdiff+0x10c>)
 8010c8a:	4602      	mov	r2, r0
 8010c8c:	f240 2132 	movw	r1, #562	; 0x232
 8010c90:	4839      	ldr	r0, [pc, #228]	; (8010d78 <__mdiff+0x110>)
 8010c92:	f000 fa13 	bl	80110bc <__assert_func>
 8010c96:	2301      	movs	r3, #1
 8010c98:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8010c9c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010ca0:	bfa4      	itt	ge
 8010ca2:	4643      	movge	r3, r8
 8010ca4:	46a0      	movge	r8, r4
 8010ca6:	4630      	mov	r0, r6
 8010ca8:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8010cac:	bfa6      	itte	ge
 8010cae:	461c      	movge	r4, r3
 8010cb0:	2500      	movge	r5, #0
 8010cb2:	2501      	movlt	r5, #1
 8010cb4:	f7ff fcf0 	bl	8010698 <_Balloc>
 8010cb8:	b920      	cbnz	r0, 8010cc4 <__mdiff+0x5c>
 8010cba:	4b2e      	ldr	r3, [pc, #184]	; (8010d74 <__mdiff+0x10c>)
 8010cbc:	4602      	mov	r2, r0
 8010cbe:	f44f 7110 	mov.w	r1, #576	; 0x240
 8010cc2:	e7e5      	b.n	8010c90 <__mdiff+0x28>
 8010cc4:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8010cc8:	6926      	ldr	r6, [r4, #16]
 8010cca:	60c5      	str	r5, [r0, #12]
 8010ccc:	f104 0914 	add.w	r9, r4, #20
 8010cd0:	f108 0514 	add.w	r5, r8, #20
 8010cd4:	f100 0e14 	add.w	lr, r0, #20
 8010cd8:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8010cdc:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8010ce0:	f108 0210 	add.w	r2, r8, #16
 8010ce4:	46f2      	mov	sl, lr
 8010ce6:	2100      	movs	r1, #0
 8010ce8:	f859 3b04 	ldr.w	r3, [r9], #4
 8010cec:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8010cf0:	fa1f f883 	uxth.w	r8, r3
 8010cf4:	fa11 f18b 	uxtah	r1, r1, fp
 8010cf8:	0c1b      	lsrs	r3, r3, #16
 8010cfa:	eba1 0808 	sub.w	r8, r1, r8
 8010cfe:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8010d02:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8010d06:	fa1f f888 	uxth.w	r8, r8
 8010d0a:	1419      	asrs	r1, r3, #16
 8010d0c:	454e      	cmp	r6, r9
 8010d0e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8010d12:	f84a 3b04 	str.w	r3, [sl], #4
 8010d16:	d8e7      	bhi.n	8010ce8 <__mdiff+0x80>
 8010d18:	1b33      	subs	r3, r6, r4
 8010d1a:	3b15      	subs	r3, #21
 8010d1c:	f023 0303 	bic.w	r3, r3, #3
 8010d20:	3304      	adds	r3, #4
 8010d22:	3415      	adds	r4, #21
 8010d24:	42a6      	cmp	r6, r4
 8010d26:	bf38      	it	cc
 8010d28:	2304      	movcc	r3, #4
 8010d2a:	441d      	add	r5, r3
 8010d2c:	4473      	add	r3, lr
 8010d2e:	469e      	mov	lr, r3
 8010d30:	462e      	mov	r6, r5
 8010d32:	4566      	cmp	r6, ip
 8010d34:	d30e      	bcc.n	8010d54 <__mdiff+0xec>
 8010d36:	f10c 0203 	add.w	r2, ip, #3
 8010d3a:	1b52      	subs	r2, r2, r5
 8010d3c:	f022 0203 	bic.w	r2, r2, #3
 8010d40:	3d03      	subs	r5, #3
 8010d42:	45ac      	cmp	ip, r5
 8010d44:	bf38      	it	cc
 8010d46:	2200      	movcc	r2, #0
 8010d48:	441a      	add	r2, r3
 8010d4a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8010d4e:	b17b      	cbz	r3, 8010d70 <__mdiff+0x108>
 8010d50:	6107      	str	r7, [r0, #16]
 8010d52:	e7a3      	b.n	8010c9c <__mdiff+0x34>
 8010d54:	f856 8b04 	ldr.w	r8, [r6], #4
 8010d58:	fa11 f288 	uxtah	r2, r1, r8
 8010d5c:	1414      	asrs	r4, r2, #16
 8010d5e:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8010d62:	b292      	uxth	r2, r2
 8010d64:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8010d68:	f84e 2b04 	str.w	r2, [lr], #4
 8010d6c:	1421      	asrs	r1, r4, #16
 8010d6e:	e7e0      	b.n	8010d32 <__mdiff+0xca>
 8010d70:	3f01      	subs	r7, #1
 8010d72:	e7ea      	b.n	8010d4a <__mdiff+0xe2>
 8010d74:	08012388 	.word	0x08012388
 8010d78:	0801242b 	.word	0x0801242b

08010d7c <__ulp>:
 8010d7c:	b082      	sub	sp, #8
 8010d7e:	ed8d 0b00 	vstr	d0, [sp]
 8010d82:	9b01      	ldr	r3, [sp, #4]
 8010d84:	4912      	ldr	r1, [pc, #72]	; (8010dd0 <__ulp+0x54>)
 8010d86:	4019      	ands	r1, r3
 8010d88:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 8010d8c:	2900      	cmp	r1, #0
 8010d8e:	dd05      	ble.n	8010d9c <__ulp+0x20>
 8010d90:	2200      	movs	r2, #0
 8010d92:	460b      	mov	r3, r1
 8010d94:	ec43 2b10 	vmov	d0, r2, r3
 8010d98:	b002      	add	sp, #8
 8010d9a:	4770      	bx	lr
 8010d9c:	4249      	negs	r1, r1
 8010d9e:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 8010da2:	ea4f 5021 	mov.w	r0, r1, asr #20
 8010da6:	f04f 0200 	mov.w	r2, #0
 8010daa:	f04f 0300 	mov.w	r3, #0
 8010dae:	da04      	bge.n	8010dba <__ulp+0x3e>
 8010db0:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8010db4:	fa41 f300 	asr.w	r3, r1, r0
 8010db8:	e7ec      	b.n	8010d94 <__ulp+0x18>
 8010dba:	f1a0 0114 	sub.w	r1, r0, #20
 8010dbe:	291e      	cmp	r1, #30
 8010dc0:	bfda      	itte	le
 8010dc2:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 8010dc6:	fa20 f101 	lsrle.w	r1, r0, r1
 8010dca:	2101      	movgt	r1, #1
 8010dcc:	460a      	mov	r2, r1
 8010dce:	e7e1      	b.n	8010d94 <__ulp+0x18>
 8010dd0:	7ff00000 	.word	0x7ff00000

08010dd4 <__b2d>:
 8010dd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010dd6:	6905      	ldr	r5, [r0, #16]
 8010dd8:	f100 0714 	add.w	r7, r0, #20
 8010ddc:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8010de0:	1f2e      	subs	r6, r5, #4
 8010de2:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8010de6:	4620      	mov	r0, r4
 8010de8:	f7ff fd48 	bl	801087c <__hi0bits>
 8010dec:	f1c0 0320 	rsb	r3, r0, #32
 8010df0:	280a      	cmp	r0, #10
 8010df2:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8010e70 <__b2d+0x9c>
 8010df6:	600b      	str	r3, [r1, #0]
 8010df8:	dc14      	bgt.n	8010e24 <__b2d+0x50>
 8010dfa:	f1c0 0e0b 	rsb	lr, r0, #11
 8010dfe:	fa24 f10e 	lsr.w	r1, r4, lr
 8010e02:	42b7      	cmp	r7, r6
 8010e04:	ea41 030c 	orr.w	r3, r1, ip
 8010e08:	bf34      	ite	cc
 8010e0a:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8010e0e:	2100      	movcs	r1, #0
 8010e10:	3015      	adds	r0, #21
 8010e12:	fa04 f000 	lsl.w	r0, r4, r0
 8010e16:	fa21 f10e 	lsr.w	r1, r1, lr
 8010e1a:	ea40 0201 	orr.w	r2, r0, r1
 8010e1e:	ec43 2b10 	vmov	d0, r2, r3
 8010e22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010e24:	42b7      	cmp	r7, r6
 8010e26:	bf3a      	itte	cc
 8010e28:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8010e2c:	f1a5 0608 	subcc.w	r6, r5, #8
 8010e30:	2100      	movcs	r1, #0
 8010e32:	380b      	subs	r0, #11
 8010e34:	d017      	beq.n	8010e66 <__b2d+0x92>
 8010e36:	f1c0 0c20 	rsb	ip, r0, #32
 8010e3a:	fa04 f500 	lsl.w	r5, r4, r0
 8010e3e:	42be      	cmp	r6, r7
 8010e40:	fa21 f40c 	lsr.w	r4, r1, ip
 8010e44:	ea45 0504 	orr.w	r5, r5, r4
 8010e48:	bf8c      	ite	hi
 8010e4a:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8010e4e:	2400      	movls	r4, #0
 8010e50:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 8010e54:	fa01 f000 	lsl.w	r0, r1, r0
 8010e58:	fa24 f40c 	lsr.w	r4, r4, ip
 8010e5c:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8010e60:	ea40 0204 	orr.w	r2, r0, r4
 8010e64:	e7db      	b.n	8010e1e <__b2d+0x4a>
 8010e66:	ea44 030c 	orr.w	r3, r4, ip
 8010e6a:	460a      	mov	r2, r1
 8010e6c:	e7d7      	b.n	8010e1e <__b2d+0x4a>
 8010e6e:	bf00      	nop
 8010e70:	3ff00000 	.word	0x3ff00000

08010e74 <__d2b>:
 8010e74:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8010e78:	4689      	mov	r9, r1
 8010e7a:	2101      	movs	r1, #1
 8010e7c:	ec57 6b10 	vmov	r6, r7, d0
 8010e80:	4690      	mov	r8, r2
 8010e82:	f7ff fc09 	bl	8010698 <_Balloc>
 8010e86:	4604      	mov	r4, r0
 8010e88:	b930      	cbnz	r0, 8010e98 <__d2b+0x24>
 8010e8a:	4602      	mov	r2, r0
 8010e8c:	4b25      	ldr	r3, [pc, #148]	; (8010f24 <__d2b+0xb0>)
 8010e8e:	4826      	ldr	r0, [pc, #152]	; (8010f28 <__d2b+0xb4>)
 8010e90:	f240 310a 	movw	r1, #778	; 0x30a
 8010e94:	f000 f912 	bl	80110bc <__assert_func>
 8010e98:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8010e9c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8010ea0:	bb35      	cbnz	r5, 8010ef0 <__d2b+0x7c>
 8010ea2:	2e00      	cmp	r6, #0
 8010ea4:	9301      	str	r3, [sp, #4]
 8010ea6:	d028      	beq.n	8010efa <__d2b+0x86>
 8010ea8:	4668      	mov	r0, sp
 8010eaa:	9600      	str	r6, [sp, #0]
 8010eac:	f7ff fd06 	bl	80108bc <__lo0bits>
 8010eb0:	9900      	ldr	r1, [sp, #0]
 8010eb2:	b300      	cbz	r0, 8010ef6 <__d2b+0x82>
 8010eb4:	9a01      	ldr	r2, [sp, #4]
 8010eb6:	f1c0 0320 	rsb	r3, r0, #32
 8010eba:	fa02 f303 	lsl.w	r3, r2, r3
 8010ebe:	430b      	orrs	r3, r1
 8010ec0:	40c2      	lsrs	r2, r0
 8010ec2:	6163      	str	r3, [r4, #20]
 8010ec4:	9201      	str	r2, [sp, #4]
 8010ec6:	9b01      	ldr	r3, [sp, #4]
 8010ec8:	61a3      	str	r3, [r4, #24]
 8010eca:	2b00      	cmp	r3, #0
 8010ecc:	bf14      	ite	ne
 8010ece:	2202      	movne	r2, #2
 8010ed0:	2201      	moveq	r2, #1
 8010ed2:	6122      	str	r2, [r4, #16]
 8010ed4:	b1d5      	cbz	r5, 8010f0c <__d2b+0x98>
 8010ed6:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8010eda:	4405      	add	r5, r0
 8010edc:	f8c9 5000 	str.w	r5, [r9]
 8010ee0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8010ee4:	f8c8 0000 	str.w	r0, [r8]
 8010ee8:	4620      	mov	r0, r4
 8010eea:	b003      	add	sp, #12
 8010eec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010ef0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8010ef4:	e7d5      	b.n	8010ea2 <__d2b+0x2e>
 8010ef6:	6161      	str	r1, [r4, #20]
 8010ef8:	e7e5      	b.n	8010ec6 <__d2b+0x52>
 8010efa:	a801      	add	r0, sp, #4
 8010efc:	f7ff fcde 	bl	80108bc <__lo0bits>
 8010f00:	9b01      	ldr	r3, [sp, #4]
 8010f02:	6163      	str	r3, [r4, #20]
 8010f04:	2201      	movs	r2, #1
 8010f06:	6122      	str	r2, [r4, #16]
 8010f08:	3020      	adds	r0, #32
 8010f0a:	e7e3      	b.n	8010ed4 <__d2b+0x60>
 8010f0c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8010f10:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8010f14:	f8c9 0000 	str.w	r0, [r9]
 8010f18:	6918      	ldr	r0, [r3, #16]
 8010f1a:	f7ff fcaf 	bl	801087c <__hi0bits>
 8010f1e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8010f22:	e7df      	b.n	8010ee4 <__d2b+0x70>
 8010f24:	08012388 	.word	0x08012388
 8010f28:	0801242b 	.word	0x0801242b

08010f2c <__ratio>:
 8010f2c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010f30:	4688      	mov	r8, r1
 8010f32:	4669      	mov	r1, sp
 8010f34:	4681      	mov	r9, r0
 8010f36:	f7ff ff4d 	bl	8010dd4 <__b2d>
 8010f3a:	a901      	add	r1, sp, #4
 8010f3c:	4640      	mov	r0, r8
 8010f3e:	ec55 4b10 	vmov	r4, r5, d0
 8010f42:	ee10 aa10 	vmov	sl, s0
 8010f46:	f7ff ff45 	bl	8010dd4 <__b2d>
 8010f4a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8010f4e:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8010f52:	1a59      	subs	r1, r3, r1
 8010f54:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010f58:	1ad3      	subs	r3, r2, r3
 8010f5a:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8010f5e:	ec57 6b10 	vmov	r6, r7, d0
 8010f62:	2b00      	cmp	r3, #0
 8010f64:	bfd6      	itet	le
 8010f66:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8010f6a:	462a      	movgt	r2, r5
 8010f6c:	463a      	movle	r2, r7
 8010f6e:	46ab      	mov	fp, r5
 8010f70:	bfd6      	itet	le
 8010f72:	eb02 5303 	addle.w	r3, r2, r3, lsl #20
 8010f76:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 8010f7a:	ee00 3a90 	vmovle	s1, r3
 8010f7e:	ec4b ab17 	vmov	d7, sl, fp
 8010f82:	ee87 0b00 	vdiv.f64	d0, d7, d0
 8010f86:	b003      	add	sp, #12
 8010f88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08010f8c <__copybits>:
 8010f8c:	3901      	subs	r1, #1
 8010f8e:	b570      	push	{r4, r5, r6, lr}
 8010f90:	1149      	asrs	r1, r1, #5
 8010f92:	6914      	ldr	r4, [r2, #16]
 8010f94:	3101      	adds	r1, #1
 8010f96:	f102 0314 	add.w	r3, r2, #20
 8010f9a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8010f9e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8010fa2:	1f05      	subs	r5, r0, #4
 8010fa4:	42a3      	cmp	r3, r4
 8010fa6:	d30c      	bcc.n	8010fc2 <__copybits+0x36>
 8010fa8:	1aa3      	subs	r3, r4, r2
 8010faa:	3b11      	subs	r3, #17
 8010fac:	f023 0303 	bic.w	r3, r3, #3
 8010fb0:	3211      	adds	r2, #17
 8010fb2:	42a2      	cmp	r2, r4
 8010fb4:	bf88      	it	hi
 8010fb6:	2300      	movhi	r3, #0
 8010fb8:	4418      	add	r0, r3
 8010fba:	2300      	movs	r3, #0
 8010fbc:	4288      	cmp	r0, r1
 8010fbe:	d305      	bcc.n	8010fcc <__copybits+0x40>
 8010fc0:	bd70      	pop	{r4, r5, r6, pc}
 8010fc2:	f853 6b04 	ldr.w	r6, [r3], #4
 8010fc6:	f845 6f04 	str.w	r6, [r5, #4]!
 8010fca:	e7eb      	b.n	8010fa4 <__copybits+0x18>
 8010fcc:	f840 3b04 	str.w	r3, [r0], #4
 8010fd0:	e7f4      	b.n	8010fbc <__copybits+0x30>

08010fd2 <__any_on>:
 8010fd2:	f100 0214 	add.w	r2, r0, #20
 8010fd6:	6900      	ldr	r0, [r0, #16]
 8010fd8:	114b      	asrs	r3, r1, #5
 8010fda:	4298      	cmp	r0, r3
 8010fdc:	b510      	push	{r4, lr}
 8010fde:	db11      	blt.n	8011004 <__any_on+0x32>
 8010fe0:	dd0a      	ble.n	8010ff8 <__any_on+0x26>
 8010fe2:	f011 011f 	ands.w	r1, r1, #31
 8010fe6:	d007      	beq.n	8010ff8 <__any_on+0x26>
 8010fe8:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8010fec:	fa24 f001 	lsr.w	r0, r4, r1
 8010ff0:	fa00 f101 	lsl.w	r1, r0, r1
 8010ff4:	428c      	cmp	r4, r1
 8010ff6:	d10b      	bne.n	8011010 <__any_on+0x3e>
 8010ff8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8010ffc:	4293      	cmp	r3, r2
 8010ffe:	d803      	bhi.n	8011008 <__any_on+0x36>
 8011000:	2000      	movs	r0, #0
 8011002:	bd10      	pop	{r4, pc}
 8011004:	4603      	mov	r3, r0
 8011006:	e7f7      	b.n	8010ff8 <__any_on+0x26>
 8011008:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801100c:	2900      	cmp	r1, #0
 801100e:	d0f5      	beq.n	8010ffc <__any_on+0x2a>
 8011010:	2001      	movs	r0, #1
 8011012:	e7f6      	b.n	8011002 <__any_on+0x30>

08011014 <_calloc_r>:
 8011014:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8011016:	fba1 2402 	umull	r2, r4, r1, r2
 801101a:	b94c      	cbnz	r4, 8011030 <_calloc_r+0x1c>
 801101c:	4611      	mov	r1, r2
 801101e:	9201      	str	r2, [sp, #4]
 8011020:	f7fd ffd6 	bl	800efd0 <_malloc_r>
 8011024:	9a01      	ldr	r2, [sp, #4]
 8011026:	4605      	mov	r5, r0
 8011028:	b930      	cbnz	r0, 8011038 <_calloc_r+0x24>
 801102a:	4628      	mov	r0, r5
 801102c:	b003      	add	sp, #12
 801102e:	bd30      	pop	{r4, r5, pc}
 8011030:	220c      	movs	r2, #12
 8011032:	6002      	str	r2, [r0, #0]
 8011034:	2500      	movs	r5, #0
 8011036:	e7f8      	b.n	801102a <_calloc_r+0x16>
 8011038:	4621      	mov	r1, r4
 801103a:	f7fd ff55 	bl	800eee8 <memset>
 801103e:	e7f4      	b.n	801102a <_calloc_r+0x16>

08011040 <_read_r>:
 8011040:	b538      	push	{r3, r4, r5, lr}
 8011042:	4d07      	ldr	r5, [pc, #28]	; (8011060 <_read_r+0x20>)
 8011044:	4604      	mov	r4, r0
 8011046:	4608      	mov	r0, r1
 8011048:	4611      	mov	r1, r2
 801104a:	2200      	movs	r2, #0
 801104c:	602a      	str	r2, [r5, #0]
 801104e:	461a      	mov	r2, r3
 8011050:	f7f2 fdb4 	bl	8003bbc <_read>
 8011054:	1c43      	adds	r3, r0, #1
 8011056:	d102      	bne.n	801105e <_read_r+0x1e>
 8011058:	682b      	ldr	r3, [r5, #0]
 801105a:	b103      	cbz	r3, 801105e <_read_r+0x1e>
 801105c:	6023      	str	r3, [r4, #0]
 801105e:	bd38      	pop	{r3, r4, r5, pc}
 8011060:	24000aa8 	.word	0x24000aa8
 8011064:	00000000 	.word	0x00000000

08011068 <nan>:
 8011068:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8011070 <nan+0x8>
 801106c:	4770      	bx	lr
 801106e:	bf00      	nop
 8011070:	00000000 	.word	0x00000000
 8011074:	7ff80000 	.word	0x7ff80000

08011078 <strncmp>:
 8011078:	b510      	push	{r4, lr}
 801107a:	b17a      	cbz	r2, 801109c <strncmp+0x24>
 801107c:	4603      	mov	r3, r0
 801107e:	3901      	subs	r1, #1
 8011080:	1884      	adds	r4, r0, r2
 8011082:	f813 0b01 	ldrb.w	r0, [r3], #1
 8011086:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 801108a:	4290      	cmp	r0, r2
 801108c:	d101      	bne.n	8011092 <strncmp+0x1a>
 801108e:	42a3      	cmp	r3, r4
 8011090:	d101      	bne.n	8011096 <strncmp+0x1e>
 8011092:	1a80      	subs	r0, r0, r2
 8011094:	bd10      	pop	{r4, pc}
 8011096:	2800      	cmp	r0, #0
 8011098:	d1f3      	bne.n	8011082 <strncmp+0xa>
 801109a:	e7fa      	b.n	8011092 <strncmp+0x1a>
 801109c:	4610      	mov	r0, r2
 801109e:	e7f9      	b.n	8011094 <strncmp+0x1c>

080110a0 <__ascii_wctomb>:
 80110a0:	b149      	cbz	r1, 80110b6 <__ascii_wctomb+0x16>
 80110a2:	2aff      	cmp	r2, #255	; 0xff
 80110a4:	bf85      	ittet	hi
 80110a6:	238a      	movhi	r3, #138	; 0x8a
 80110a8:	6003      	strhi	r3, [r0, #0]
 80110aa:	700a      	strbls	r2, [r1, #0]
 80110ac:	f04f 30ff 	movhi.w	r0, #4294967295
 80110b0:	bf98      	it	ls
 80110b2:	2001      	movls	r0, #1
 80110b4:	4770      	bx	lr
 80110b6:	4608      	mov	r0, r1
 80110b8:	4770      	bx	lr
	...

080110bc <__assert_func>:
 80110bc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80110be:	4614      	mov	r4, r2
 80110c0:	461a      	mov	r2, r3
 80110c2:	4b09      	ldr	r3, [pc, #36]	; (80110e8 <__assert_func+0x2c>)
 80110c4:	681b      	ldr	r3, [r3, #0]
 80110c6:	4605      	mov	r5, r0
 80110c8:	68d8      	ldr	r0, [r3, #12]
 80110ca:	b14c      	cbz	r4, 80110e0 <__assert_func+0x24>
 80110cc:	4b07      	ldr	r3, [pc, #28]	; (80110ec <__assert_func+0x30>)
 80110ce:	9100      	str	r1, [sp, #0]
 80110d0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80110d4:	4906      	ldr	r1, [pc, #24]	; (80110f0 <__assert_func+0x34>)
 80110d6:	462b      	mov	r3, r5
 80110d8:	f000 f80e 	bl	80110f8 <fiprintf>
 80110dc:	f000 fbd4 	bl	8011888 <abort>
 80110e0:	4b04      	ldr	r3, [pc, #16]	; (80110f4 <__assert_func+0x38>)
 80110e2:	461c      	mov	r4, r3
 80110e4:	e7f3      	b.n	80110ce <__assert_func+0x12>
 80110e6:	bf00      	nop
 80110e8:	24000090 	.word	0x24000090
 80110ec:	08012584 	.word	0x08012584
 80110f0:	08012591 	.word	0x08012591
 80110f4:	080125bf 	.word	0x080125bf

080110f8 <fiprintf>:
 80110f8:	b40e      	push	{r1, r2, r3}
 80110fa:	b503      	push	{r0, r1, lr}
 80110fc:	4601      	mov	r1, r0
 80110fe:	ab03      	add	r3, sp, #12
 8011100:	4805      	ldr	r0, [pc, #20]	; (8011118 <fiprintf+0x20>)
 8011102:	f853 2b04 	ldr.w	r2, [r3], #4
 8011106:	6800      	ldr	r0, [r0, #0]
 8011108:	9301      	str	r3, [sp, #4]
 801110a:	f000 f839 	bl	8011180 <_vfiprintf_r>
 801110e:	b002      	add	sp, #8
 8011110:	f85d eb04 	ldr.w	lr, [sp], #4
 8011114:	b003      	add	sp, #12
 8011116:	4770      	bx	lr
 8011118:	24000090 	.word	0x24000090

0801111c <malloc>:
 801111c:	4b02      	ldr	r3, [pc, #8]	; (8011128 <malloc+0xc>)
 801111e:	4601      	mov	r1, r0
 8011120:	6818      	ldr	r0, [r3, #0]
 8011122:	f7fd bf55 	b.w	800efd0 <_malloc_r>
 8011126:	bf00      	nop
 8011128:	24000090 	.word	0x24000090

0801112c <__sfputc_r>:
 801112c:	6893      	ldr	r3, [r2, #8]
 801112e:	3b01      	subs	r3, #1
 8011130:	2b00      	cmp	r3, #0
 8011132:	b410      	push	{r4}
 8011134:	6093      	str	r3, [r2, #8]
 8011136:	da08      	bge.n	801114a <__sfputc_r+0x1e>
 8011138:	6994      	ldr	r4, [r2, #24]
 801113a:	42a3      	cmp	r3, r4
 801113c:	db01      	blt.n	8011142 <__sfputc_r+0x16>
 801113e:	290a      	cmp	r1, #10
 8011140:	d103      	bne.n	801114a <__sfputc_r+0x1e>
 8011142:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011146:	f000 badf 	b.w	8011708 <__swbuf_r>
 801114a:	6813      	ldr	r3, [r2, #0]
 801114c:	1c58      	adds	r0, r3, #1
 801114e:	6010      	str	r0, [r2, #0]
 8011150:	7019      	strb	r1, [r3, #0]
 8011152:	4608      	mov	r0, r1
 8011154:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011158:	4770      	bx	lr

0801115a <__sfputs_r>:
 801115a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801115c:	4606      	mov	r6, r0
 801115e:	460f      	mov	r7, r1
 8011160:	4614      	mov	r4, r2
 8011162:	18d5      	adds	r5, r2, r3
 8011164:	42ac      	cmp	r4, r5
 8011166:	d101      	bne.n	801116c <__sfputs_r+0x12>
 8011168:	2000      	movs	r0, #0
 801116a:	e007      	b.n	801117c <__sfputs_r+0x22>
 801116c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011170:	463a      	mov	r2, r7
 8011172:	4630      	mov	r0, r6
 8011174:	f7ff ffda 	bl	801112c <__sfputc_r>
 8011178:	1c43      	adds	r3, r0, #1
 801117a:	d1f3      	bne.n	8011164 <__sfputs_r+0xa>
 801117c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08011180 <_vfiprintf_r>:
 8011180:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011184:	460d      	mov	r5, r1
 8011186:	b09d      	sub	sp, #116	; 0x74
 8011188:	4614      	mov	r4, r2
 801118a:	4698      	mov	r8, r3
 801118c:	4606      	mov	r6, r0
 801118e:	b118      	cbz	r0, 8011198 <_vfiprintf_r+0x18>
 8011190:	6983      	ldr	r3, [r0, #24]
 8011192:	b90b      	cbnz	r3, 8011198 <_vfiprintf_r+0x18>
 8011194:	f7fd fc40 	bl	800ea18 <__sinit>
 8011198:	4b89      	ldr	r3, [pc, #548]	; (80113c0 <_vfiprintf_r+0x240>)
 801119a:	429d      	cmp	r5, r3
 801119c:	d11b      	bne.n	80111d6 <_vfiprintf_r+0x56>
 801119e:	6875      	ldr	r5, [r6, #4]
 80111a0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80111a2:	07d9      	lsls	r1, r3, #31
 80111a4:	d405      	bmi.n	80111b2 <_vfiprintf_r+0x32>
 80111a6:	89ab      	ldrh	r3, [r5, #12]
 80111a8:	059a      	lsls	r2, r3, #22
 80111aa:	d402      	bmi.n	80111b2 <_vfiprintf_r+0x32>
 80111ac:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80111ae:	f7fd fe25 	bl	800edfc <__retarget_lock_acquire_recursive>
 80111b2:	89ab      	ldrh	r3, [r5, #12]
 80111b4:	071b      	lsls	r3, r3, #28
 80111b6:	d501      	bpl.n	80111bc <_vfiprintf_r+0x3c>
 80111b8:	692b      	ldr	r3, [r5, #16]
 80111ba:	b9eb      	cbnz	r3, 80111f8 <_vfiprintf_r+0x78>
 80111bc:	4629      	mov	r1, r5
 80111be:	4630      	mov	r0, r6
 80111c0:	f000 faf4 	bl	80117ac <__swsetup_r>
 80111c4:	b1c0      	cbz	r0, 80111f8 <_vfiprintf_r+0x78>
 80111c6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80111c8:	07dc      	lsls	r4, r3, #31
 80111ca:	d50e      	bpl.n	80111ea <_vfiprintf_r+0x6a>
 80111cc:	f04f 30ff 	mov.w	r0, #4294967295
 80111d0:	b01d      	add	sp, #116	; 0x74
 80111d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80111d6:	4b7b      	ldr	r3, [pc, #492]	; (80113c4 <_vfiprintf_r+0x244>)
 80111d8:	429d      	cmp	r5, r3
 80111da:	d101      	bne.n	80111e0 <_vfiprintf_r+0x60>
 80111dc:	68b5      	ldr	r5, [r6, #8]
 80111de:	e7df      	b.n	80111a0 <_vfiprintf_r+0x20>
 80111e0:	4b79      	ldr	r3, [pc, #484]	; (80113c8 <_vfiprintf_r+0x248>)
 80111e2:	429d      	cmp	r5, r3
 80111e4:	bf08      	it	eq
 80111e6:	68f5      	ldreq	r5, [r6, #12]
 80111e8:	e7da      	b.n	80111a0 <_vfiprintf_r+0x20>
 80111ea:	89ab      	ldrh	r3, [r5, #12]
 80111ec:	0598      	lsls	r0, r3, #22
 80111ee:	d4ed      	bmi.n	80111cc <_vfiprintf_r+0x4c>
 80111f0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80111f2:	f7fd fe04 	bl	800edfe <__retarget_lock_release_recursive>
 80111f6:	e7e9      	b.n	80111cc <_vfiprintf_r+0x4c>
 80111f8:	2300      	movs	r3, #0
 80111fa:	9309      	str	r3, [sp, #36]	; 0x24
 80111fc:	2320      	movs	r3, #32
 80111fe:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8011202:	f8cd 800c 	str.w	r8, [sp, #12]
 8011206:	2330      	movs	r3, #48	; 0x30
 8011208:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80113cc <_vfiprintf_r+0x24c>
 801120c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8011210:	f04f 0901 	mov.w	r9, #1
 8011214:	4623      	mov	r3, r4
 8011216:	469a      	mov	sl, r3
 8011218:	f813 2b01 	ldrb.w	r2, [r3], #1
 801121c:	b10a      	cbz	r2, 8011222 <_vfiprintf_r+0xa2>
 801121e:	2a25      	cmp	r2, #37	; 0x25
 8011220:	d1f9      	bne.n	8011216 <_vfiprintf_r+0x96>
 8011222:	ebba 0b04 	subs.w	fp, sl, r4
 8011226:	d00b      	beq.n	8011240 <_vfiprintf_r+0xc0>
 8011228:	465b      	mov	r3, fp
 801122a:	4622      	mov	r2, r4
 801122c:	4629      	mov	r1, r5
 801122e:	4630      	mov	r0, r6
 8011230:	f7ff ff93 	bl	801115a <__sfputs_r>
 8011234:	3001      	adds	r0, #1
 8011236:	f000 80aa 	beq.w	801138e <_vfiprintf_r+0x20e>
 801123a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801123c:	445a      	add	r2, fp
 801123e:	9209      	str	r2, [sp, #36]	; 0x24
 8011240:	f89a 3000 	ldrb.w	r3, [sl]
 8011244:	2b00      	cmp	r3, #0
 8011246:	f000 80a2 	beq.w	801138e <_vfiprintf_r+0x20e>
 801124a:	2300      	movs	r3, #0
 801124c:	f04f 32ff 	mov.w	r2, #4294967295
 8011250:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011254:	f10a 0a01 	add.w	sl, sl, #1
 8011258:	9304      	str	r3, [sp, #16]
 801125a:	9307      	str	r3, [sp, #28]
 801125c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8011260:	931a      	str	r3, [sp, #104]	; 0x68
 8011262:	4654      	mov	r4, sl
 8011264:	2205      	movs	r2, #5
 8011266:	f814 1b01 	ldrb.w	r1, [r4], #1
 801126a:	4858      	ldr	r0, [pc, #352]	; (80113cc <_vfiprintf_r+0x24c>)
 801126c:	f7ef f838 	bl	80002e0 <memchr>
 8011270:	9a04      	ldr	r2, [sp, #16]
 8011272:	b9d8      	cbnz	r0, 80112ac <_vfiprintf_r+0x12c>
 8011274:	06d1      	lsls	r1, r2, #27
 8011276:	bf44      	itt	mi
 8011278:	2320      	movmi	r3, #32
 801127a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801127e:	0713      	lsls	r3, r2, #28
 8011280:	bf44      	itt	mi
 8011282:	232b      	movmi	r3, #43	; 0x2b
 8011284:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011288:	f89a 3000 	ldrb.w	r3, [sl]
 801128c:	2b2a      	cmp	r3, #42	; 0x2a
 801128e:	d015      	beq.n	80112bc <_vfiprintf_r+0x13c>
 8011290:	9a07      	ldr	r2, [sp, #28]
 8011292:	4654      	mov	r4, sl
 8011294:	2000      	movs	r0, #0
 8011296:	f04f 0c0a 	mov.w	ip, #10
 801129a:	4621      	mov	r1, r4
 801129c:	f811 3b01 	ldrb.w	r3, [r1], #1
 80112a0:	3b30      	subs	r3, #48	; 0x30
 80112a2:	2b09      	cmp	r3, #9
 80112a4:	d94e      	bls.n	8011344 <_vfiprintf_r+0x1c4>
 80112a6:	b1b0      	cbz	r0, 80112d6 <_vfiprintf_r+0x156>
 80112a8:	9207      	str	r2, [sp, #28]
 80112aa:	e014      	b.n	80112d6 <_vfiprintf_r+0x156>
 80112ac:	eba0 0308 	sub.w	r3, r0, r8
 80112b0:	fa09 f303 	lsl.w	r3, r9, r3
 80112b4:	4313      	orrs	r3, r2
 80112b6:	9304      	str	r3, [sp, #16]
 80112b8:	46a2      	mov	sl, r4
 80112ba:	e7d2      	b.n	8011262 <_vfiprintf_r+0xe2>
 80112bc:	9b03      	ldr	r3, [sp, #12]
 80112be:	1d19      	adds	r1, r3, #4
 80112c0:	681b      	ldr	r3, [r3, #0]
 80112c2:	9103      	str	r1, [sp, #12]
 80112c4:	2b00      	cmp	r3, #0
 80112c6:	bfbb      	ittet	lt
 80112c8:	425b      	neglt	r3, r3
 80112ca:	f042 0202 	orrlt.w	r2, r2, #2
 80112ce:	9307      	strge	r3, [sp, #28]
 80112d0:	9307      	strlt	r3, [sp, #28]
 80112d2:	bfb8      	it	lt
 80112d4:	9204      	strlt	r2, [sp, #16]
 80112d6:	7823      	ldrb	r3, [r4, #0]
 80112d8:	2b2e      	cmp	r3, #46	; 0x2e
 80112da:	d10c      	bne.n	80112f6 <_vfiprintf_r+0x176>
 80112dc:	7863      	ldrb	r3, [r4, #1]
 80112de:	2b2a      	cmp	r3, #42	; 0x2a
 80112e0:	d135      	bne.n	801134e <_vfiprintf_r+0x1ce>
 80112e2:	9b03      	ldr	r3, [sp, #12]
 80112e4:	1d1a      	adds	r2, r3, #4
 80112e6:	681b      	ldr	r3, [r3, #0]
 80112e8:	9203      	str	r2, [sp, #12]
 80112ea:	2b00      	cmp	r3, #0
 80112ec:	bfb8      	it	lt
 80112ee:	f04f 33ff 	movlt.w	r3, #4294967295
 80112f2:	3402      	adds	r4, #2
 80112f4:	9305      	str	r3, [sp, #20]
 80112f6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80113dc <_vfiprintf_r+0x25c>
 80112fa:	7821      	ldrb	r1, [r4, #0]
 80112fc:	2203      	movs	r2, #3
 80112fe:	4650      	mov	r0, sl
 8011300:	f7ee ffee 	bl	80002e0 <memchr>
 8011304:	b140      	cbz	r0, 8011318 <_vfiprintf_r+0x198>
 8011306:	2340      	movs	r3, #64	; 0x40
 8011308:	eba0 000a 	sub.w	r0, r0, sl
 801130c:	fa03 f000 	lsl.w	r0, r3, r0
 8011310:	9b04      	ldr	r3, [sp, #16]
 8011312:	4303      	orrs	r3, r0
 8011314:	3401      	adds	r4, #1
 8011316:	9304      	str	r3, [sp, #16]
 8011318:	f814 1b01 	ldrb.w	r1, [r4], #1
 801131c:	482c      	ldr	r0, [pc, #176]	; (80113d0 <_vfiprintf_r+0x250>)
 801131e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8011322:	2206      	movs	r2, #6
 8011324:	f7ee ffdc 	bl	80002e0 <memchr>
 8011328:	2800      	cmp	r0, #0
 801132a:	d03f      	beq.n	80113ac <_vfiprintf_r+0x22c>
 801132c:	4b29      	ldr	r3, [pc, #164]	; (80113d4 <_vfiprintf_r+0x254>)
 801132e:	bb1b      	cbnz	r3, 8011378 <_vfiprintf_r+0x1f8>
 8011330:	9b03      	ldr	r3, [sp, #12]
 8011332:	3307      	adds	r3, #7
 8011334:	f023 0307 	bic.w	r3, r3, #7
 8011338:	3308      	adds	r3, #8
 801133a:	9303      	str	r3, [sp, #12]
 801133c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801133e:	443b      	add	r3, r7
 8011340:	9309      	str	r3, [sp, #36]	; 0x24
 8011342:	e767      	b.n	8011214 <_vfiprintf_r+0x94>
 8011344:	fb0c 3202 	mla	r2, ip, r2, r3
 8011348:	460c      	mov	r4, r1
 801134a:	2001      	movs	r0, #1
 801134c:	e7a5      	b.n	801129a <_vfiprintf_r+0x11a>
 801134e:	2300      	movs	r3, #0
 8011350:	3401      	adds	r4, #1
 8011352:	9305      	str	r3, [sp, #20]
 8011354:	4619      	mov	r1, r3
 8011356:	f04f 0c0a 	mov.w	ip, #10
 801135a:	4620      	mov	r0, r4
 801135c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011360:	3a30      	subs	r2, #48	; 0x30
 8011362:	2a09      	cmp	r2, #9
 8011364:	d903      	bls.n	801136e <_vfiprintf_r+0x1ee>
 8011366:	2b00      	cmp	r3, #0
 8011368:	d0c5      	beq.n	80112f6 <_vfiprintf_r+0x176>
 801136a:	9105      	str	r1, [sp, #20]
 801136c:	e7c3      	b.n	80112f6 <_vfiprintf_r+0x176>
 801136e:	fb0c 2101 	mla	r1, ip, r1, r2
 8011372:	4604      	mov	r4, r0
 8011374:	2301      	movs	r3, #1
 8011376:	e7f0      	b.n	801135a <_vfiprintf_r+0x1da>
 8011378:	ab03      	add	r3, sp, #12
 801137a:	9300      	str	r3, [sp, #0]
 801137c:	462a      	mov	r2, r5
 801137e:	4b16      	ldr	r3, [pc, #88]	; (80113d8 <_vfiprintf_r+0x258>)
 8011380:	a904      	add	r1, sp, #16
 8011382:	4630      	mov	r0, r6
 8011384:	f3af 8000 	nop.w
 8011388:	4607      	mov	r7, r0
 801138a:	1c78      	adds	r0, r7, #1
 801138c:	d1d6      	bne.n	801133c <_vfiprintf_r+0x1bc>
 801138e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8011390:	07d9      	lsls	r1, r3, #31
 8011392:	d405      	bmi.n	80113a0 <_vfiprintf_r+0x220>
 8011394:	89ab      	ldrh	r3, [r5, #12]
 8011396:	059a      	lsls	r2, r3, #22
 8011398:	d402      	bmi.n	80113a0 <_vfiprintf_r+0x220>
 801139a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801139c:	f7fd fd2f 	bl	800edfe <__retarget_lock_release_recursive>
 80113a0:	89ab      	ldrh	r3, [r5, #12]
 80113a2:	065b      	lsls	r3, r3, #25
 80113a4:	f53f af12 	bmi.w	80111cc <_vfiprintf_r+0x4c>
 80113a8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80113aa:	e711      	b.n	80111d0 <_vfiprintf_r+0x50>
 80113ac:	ab03      	add	r3, sp, #12
 80113ae:	9300      	str	r3, [sp, #0]
 80113b0:	462a      	mov	r2, r5
 80113b2:	4b09      	ldr	r3, [pc, #36]	; (80113d8 <_vfiprintf_r+0x258>)
 80113b4:	a904      	add	r1, sp, #16
 80113b6:	4630      	mov	r0, r6
 80113b8:	f000 f880 	bl	80114bc <_printf_i>
 80113bc:	e7e4      	b.n	8011388 <_vfiprintf_r+0x208>
 80113be:	bf00      	nop
 80113c0:	080122e4 	.word	0x080122e4
 80113c4:	08012304 	.word	0x08012304
 80113c8:	080122c4 	.word	0x080122c4
 80113cc:	080126c1 	.word	0x080126c1
 80113d0:	080126cb 	.word	0x080126cb
 80113d4:	00000000 	.word	0x00000000
 80113d8:	0801115b 	.word	0x0801115b
 80113dc:	080126c7 	.word	0x080126c7

080113e0 <_printf_common>:
 80113e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80113e4:	4616      	mov	r6, r2
 80113e6:	4699      	mov	r9, r3
 80113e8:	688a      	ldr	r2, [r1, #8]
 80113ea:	690b      	ldr	r3, [r1, #16]
 80113ec:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80113f0:	4293      	cmp	r3, r2
 80113f2:	bfb8      	it	lt
 80113f4:	4613      	movlt	r3, r2
 80113f6:	6033      	str	r3, [r6, #0]
 80113f8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80113fc:	4607      	mov	r7, r0
 80113fe:	460c      	mov	r4, r1
 8011400:	b10a      	cbz	r2, 8011406 <_printf_common+0x26>
 8011402:	3301      	adds	r3, #1
 8011404:	6033      	str	r3, [r6, #0]
 8011406:	6823      	ldr	r3, [r4, #0]
 8011408:	0699      	lsls	r1, r3, #26
 801140a:	bf42      	ittt	mi
 801140c:	6833      	ldrmi	r3, [r6, #0]
 801140e:	3302      	addmi	r3, #2
 8011410:	6033      	strmi	r3, [r6, #0]
 8011412:	6825      	ldr	r5, [r4, #0]
 8011414:	f015 0506 	ands.w	r5, r5, #6
 8011418:	d106      	bne.n	8011428 <_printf_common+0x48>
 801141a:	f104 0a19 	add.w	sl, r4, #25
 801141e:	68e3      	ldr	r3, [r4, #12]
 8011420:	6832      	ldr	r2, [r6, #0]
 8011422:	1a9b      	subs	r3, r3, r2
 8011424:	42ab      	cmp	r3, r5
 8011426:	dc26      	bgt.n	8011476 <_printf_common+0x96>
 8011428:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801142c:	1e13      	subs	r3, r2, #0
 801142e:	6822      	ldr	r2, [r4, #0]
 8011430:	bf18      	it	ne
 8011432:	2301      	movne	r3, #1
 8011434:	0692      	lsls	r2, r2, #26
 8011436:	d42b      	bmi.n	8011490 <_printf_common+0xb0>
 8011438:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801143c:	4649      	mov	r1, r9
 801143e:	4638      	mov	r0, r7
 8011440:	47c0      	blx	r8
 8011442:	3001      	adds	r0, #1
 8011444:	d01e      	beq.n	8011484 <_printf_common+0xa4>
 8011446:	6823      	ldr	r3, [r4, #0]
 8011448:	68e5      	ldr	r5, [r4, #12]
 801144a:	6832      	ldr	r2, [r6, #0]
 801144c:	f003 0306 	and.w	r3, r3, #6
 8011450:	2b04      	cmp	r3, #4
 8011452:	bf08      	it	eq
 8011454:	1aad      	subeq	r5, r5, r2
 8011456:	68a3      	ldr	r3, [r4, #8]
 8011458:	6922      	ldr	r2, [r4, #16]
 801145a:	bf0c      	ite	eq
 801145c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8011460:	2500      	movne	r5, #0
 8011462:	4293      	cmp	r3, r2
 8011464:	bfc4      	itt	gt
 8011466:	1a9b      	subgt	r3, r3, r2
 8011468:	18ed      	addgt	r5, r5, r3
 801146a:	2600      	movs	r6, #0
 801146c:	341a      	adds	r4, #26
 801146e:	42b5      	cmp	r5, r6
 8011470:	d11a      	bne.n	80114a8 <_printf_common+0xc8>
 8011472:	2000      	movs	r0, #0
 8011474:	e008      	b.n	8011488 <_printf_common+0xa8>
 8011476:	2301      	movs	r3, #1
 8011478:	4652      	mov	r2, sl
 801147a:	4649      	mov	r1, r9
 801147c:	4638      	mov	r0, r7
 801147e:	47c0      	blx	r8
 8011480:	3001      	adds	r0, #1
 8011482:	d103      	bne.n	801148c <_printf_common+0xac>
 8011484:	f04f 30ff 	mov.w	r0, #4294967295
 8011488:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801148c:	3501      	adds	r5, #1
 801148e:	e7c6      	b.n	801141e <_printf_common+0x3e>
 8011490:	18e1      	adds	r1, r4, r3
 8011492:	1c5a      	adds	r2, r3, #1
 8011494:	2030      	movs	r0, #48	; 0x30
 8011496:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801149a:	4422      	add	r2, r4
 801149c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80114a0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80114a4:	3302      	adds	r3, #2
 80114a6:	e7c7      	b.n	8011438 <_printf_common+0x58>
 80114a8:	2301      	movs	r3, #1
 80114aa:	4622      	mov	r2, r4
 80114ac:	4649      	mov	r1, r9
 80114ae:	4638      	mov	r0, r7
 80114b0:	47c0      	blx	r8
 80114b2:	3001      	adds	r0, #1
 80114b4:	d0e6      	beq.n	8011484 <_printf_common+0xa4>
 80114b6:	3601      	adds	r6, #1
 80114b8:	e7d9      	b.n	801146e <_printf_common+0x8e>
	...

080114bc <_printf_i>:
 80114bc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80114c0:	7e0f      	ldrb	r7, [r1, #24]
 80114c2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80114c4:	2f78      	cmp	r7, #120	; 0x78
 80114c6:	4691      	mov	r9, r2
 80114c8:	4680      	mov	r8, r0
 80114ca:	460c      	mov	r4, r1
 80114cc:	469a      	mov	sl, r3
 80114ce:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80114d2:	d807      	bhi.n	80114e4 <_printf_i+0x28>
 80114d4:	2f62      	cmp	r7, #98	; 0x62
 80114d6:	d80a      	bhi.n	80114ee <_printf_i+0x32>
 80114d8:	2f00      	cmp	r7, #0
 80114da:	f000 80d8 	beq.w	801168e <_printf_i+0x1d2>
 80114de:	2f58      	cmp	r7, #88	; 0x58
 80114e0:	f000 80a3 	beq.w	801162a <_printf_i+0x16e>
 80114e4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80114e8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80114ec:	e03a      	b.n	8011564 <_printf_i+0xa8>
 80114ee:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80114f2:	2b15      	cmp	r3, #21
 80114f4:	d8f6      	bhi.n	80114e4 <_printf_i+0x28>
 80114f6:	a101      	add	r1, pc, #4	; (adr r1, 80114fc <_printf_i+0x40>)
 80114f8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80114fc:	08011555 	.word	0x08011555
 8011500:	08011569 	.word	0x08011569
 8011504:	080114e5 	.word	0x080114e5
 8011508:	080114e5 	.word	0x080114e5
 801150c:	080114e5 	.word	0x080114e5
 8011510:	080114e5 	.word	0x080114e5
 8011514:	08011569 	.word	0x08011569
 8011518:	080114e5 	.word	0x080114e5
 801151c:	080114e5 	.word	0x080114e5
 8011520:	080114e5 	.word	0x080114e5
 8011524:	080114e5 	.word	0x080114e5
 8011528:	08011675 	.word	0x08011675
 801152c:	08011599 	.word	0x08011599
 8011530:	08011657 	.word	0x08011657
 8011534:	080114e5 	.word	0x080114e5
 8011538:	080114e5 	.word	0x080114e5
 801153c:	08011697 	.word	0x08011697
 8011540:	080114e5 	.word	0x080114e5
 8011544:	08011599 	.word	0x08011599
 8011548:	080114e5 	.word	0x080114e5
 801154c:	080114e5 	.word	0x080114e5
 8011550:	0801165f 	.word	0x0801165f
 8011554:	682b      	ldr	r3, [r5, #0]
 8011556:	1d1a      	adds	r2, r3, #4
 8011558:	681b      	ldr	r3, [r3, #0]
 801155a:	602a      	str	r2, [r5, #0]
 801155c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8011560:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8011564:	2301      	movs	r3, #1
 8011566:	e0a3      	b.n	80116b0 <_printf_i+0x1f4>
 8011568:	6820      	ldr	r0, [r4, #0]
 801156a:	6829      	ldr	r1, [r5, #0]
 801156c:	0606      	lsls	r6, r0, #24
 801156e:	f101 0304 	add.w	r3, r1, #4
 8011572:	d50a      	bpl.n	801158a <_printf_i+0xce>
 8011574:	680e      	ldr	r6, [r1, #0]
 8011576:	602b      	str	r3, [r5, #0]
 8011578:	2e00      	cmp	r6, #0
 801157a:	da03      	bge.n	8011584 <_printf_i+0xc8>
 801157c:	232d      	movs	r3, #45	; 0x2d
 801157e:	4276      	negs	r6, r6
 8011580:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8011584:	485e      	ldr	r0, [pc, #376]	; (8011700 <_printf_i+0x244>)
 8011586:	230a      	movs	r3, #10
 8011588:	e019      	b.n	80115be <_printf_i+0x102>
 801158a:	680e      	ldr	r6, [r1, #0]
 801158c:	602b      	str	r3, [r5, #0]
 801158e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8011592:	bf18      	it	ne
 8011594:	b236      	sxthne	r6, r6
 8011596:	e7ef      	b.n	8011578 <_printf_i+0xbc>
 8011598:	682b      	ldr	r3, [r5, #0]
 801159a:	6820      	ldr	r0, [r4, #0]
 801159c:	1d19      	adds	r1, r3, #4
 801159e:	6029      	str	r1, [r5, #0]
 80115a0:	0601      	lsls	r1, r0, #24
 80115a2:	d501      	bpl.n	80115a8 <_printf_i+0xec>
 80115a4:	681e      	ldr	r6, [r3, #0]
 80115a6:	e002      	b.n	80115ae <_printf_i+0xf2>
 80115a8:	0646      	lsls	r6, r0, #25
 80115aa:	d5fb      	bpl.n	80115a4 <_printf_i+0xe8>
 80115ac:	881e      	ldrh	r6, [r3, #0]
 80115ae:	4854      	ldr	r0, [pc, #336]	; (8011700 <_printf_i+0x244>)
 80115b0:	2f6f      	cmp	r7, #111	; 0x6f
 80115b2:	bf0c      	ite	eq
 80115b4:	2308      	moveq	r3, #8
 80115b6:	230a      	movne	r3, #10
 80115b8:	2100      	movs	r1, #0
 80115ba:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80115be:	6865      	ldr	r5, [r4, #4]
 80115c0:	60a5      	str	r5, [r4, #8]
 80115c2:	2d00      	cmp	r5, #0
 80115c4:	bfa2      	ittt	ge
 80115c6:	6821      	ldrge	r1, [r4, #0]
 80115c8:	f021 0104 	bicge.w	r1, r1, #4
 80115cc:	6021      	strge	r1, [r4, #0]
 80115ce:	b90e      	cbnz	r6, 80115d4 <_printf_i+0x118>
 80115d0:	2d00      	cmp	r5, #0
 80115d2:	d04d      	beq.n	8011670 <_printf_i+0x1b4>
 80115d4:	4615      	mov	r5, r2
 80115d6:	fbb6 f1f3 	udiv	r1, r6, r3
 80115da:	fb03 6711 	mls	r7, r3, r1, r6
 80115de:	5dc7      	ldrb	r7, [r0, r7]
 80115e0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80115e4:	4637      	mov	r7, r6
 80115e6:	42bb      	cmp	r3, r7
 80115e8:	460e      	mov	r6, r1
 80115ea:	d9f4      	bls.n	80115d6 <_printf_i+0x11a>
 80115ec:	2b08      	cmp	r3, #8
 80115ee:	d10b      	bne.n	8011608 <_printf_i+0x14c>
 80115f0:	6823      	ldr	r3, [r4, #0]
 80115f2:	07de      	lsls	r6, r3, #31
 80115f4:	d508      	bpl.n	8011608 <_printf_i+0x14c>
 80115f6:	6923      	ldr	r3, [r4, #16]
 80115f8:	6861      	ldr	r1, [r4, #4]
 80115fa:	4299      	cmp	r1, r3
 80115fc:	bfde      	ittt	le
 80115fe:	2330      	movle	r3, #48	; 0x30
 8011600:	f805 3c01 	strble.w	r3, [r5, #-1]
 8011604:	f105 35ff 	addle.w	r5, r5, #4294967295
 8011608:	1b52      	subs	r2, r2, r5
 801160a:	6122      	str	r2, [r4, #16]
 801160c:	f8cd a000 	str.w	sl, [sp]
 8011610:	464b      	mov	r3, r9
 8011612:	aa03      	add	r2, sp, #12
 8011614:	4621      	mov	r1, r4
 8011616:	4640      	mov	r0, r8
 8011618:	f7ff fee2 	bl	80113e0 <_printf_common>
 801161c:	3001      	adds	r0, #1
 801161e:	d14c      	bne.n	80116ba <_printf_i+0x1fe>
 8011620:	f04f 30ff 	mov.w	r0, #4294967295
 8011624:	b004      	add	sp, #16
 8011626:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801162a:	4835      	ldr	r0, [pc, #212]	; (8011700 <_printf_i+0x244>)
 801162c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8011630:	6829      	ldr	r1, [r5, #0]
 8011632:	6823      	ldr	r3, [r4, #0]
 8011634:	f851 6b04 	ldr.w	r6, [r1], #4
 8011638:	6029      	str	r1, [r5, #0]
 801163a:	061d      	lsls	r5, r3, #24
 801163c:	d514      	bpl.n	8011668 <_printf_i+0x1ac>
 801163e:	07df      	lsls	r7, r3, #31
 8011640:	bf44      	itt	mi
 8011642:	f043 0320 	orrmi.w	r3, r3, #32
 8011646:	6023      	strmi	r3, [r4, #0]
 8011648:	b91e      	cbnz	r6, 8011652 <_printf_i+0x196>
 801164a:	6823      	ldr	r3, [r4, #0]
 801164c:	f023 0320 	bic.w	r3, r3, #32
 8011650:	6023      	str	r3, [r4, #0]
 8011652:	2310      	movs	r3, #16
 8011654:	e7b0      	b.n	80115b8 <_printf_i+0xfc>
 8011656:	6823      	ldr	r3, [r4, #0]
 8011658:	f043 0320 	orr.w	r3, r3, #32
 801165c:	6023      	str	r3, [r4, #0]
 801165e:	2378      	movs	r3, #120	; 0x78
 8011660:	4828      	ldr	r0, [pc, #160]	; (8011704 <_printf_i+0x248>)
 8011662:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8011666:	e7e3      	b.n	8011630 <_printf_i+0x174>
 8011668:	0659      	lsls	r1, r3, #25
 801166a:	bf48      	it	mi
 801166c:	b2b6      	uxthmi	r6, r6
 801166e:	e7e6      	b.n	801163e <_printf_i+0x182>
 8011670:	4615      	mov	r5, r2
 8011672:	e7bb      	b.n	80115ec <_printf_i+0x130>
 8011674:	682b      	ldr	r3, [r5, #0]
 8011676:	6826      	ldr	r6, [r4, #0]
 8011678:	6961      	ldr	r1, [r4, #20]
 801167a:	1d18      	adds	r0, r3, #4
 801167c:	6028      	str	r0, [r5, #0]
 801167e:	0635      	lsls	r5, r6, #24
 8011680:	681b      	ldr	r3, [r3, #0]
 8011682:	d501      	bpl.n	8011688 <_printf_i+0x1cc>
 8011684:	6019      	str	r1, [r3, #0]
 8011686:	e002      	b.n	801168e <_printf_i+0x1d2>
 8011688:	0670      	lsls	r0, r6, #25
 801168a:	d5fb      	bpl.n	8011684 <_printf_i+0x1c8>
 801168c:	8019      	strh	r1, [r3, #0]
 801168e:	2300      	movs	r3, #0
 8011690:	6123      	str	r3, [r4, #16]
 8011692:	4615      	mov	r5, r2
 8011694:	e7ba      	b.n	801160c <_printf_i+0x150>
 8011696:	682b      	ldr	r3, [r5, #0]
 8011698:	1d1a      	adds	r2, r3, #4
 801169a:	602a      	str	r2, [r5, #0]
 801169c:	681d      	ldr	r5, [r3, #0]
 801169e:	6862      	ldr	r2, [r4, #4]
 80116a0:	2100      	movs	r1, #0
 80116a2:	4628      	mov	r0, r5
 80116a4:	f7ee fe1c 	bl	80002e0 <memchr>
 80116a8:	b108      	cbz	r0, 80116ae <_printf_i+0x1f2>
 80116aa:	1b40      	subs	r0, r0, r5
 80116ac:	6060      	str	r0, [r4, #4]
 80116ae:	6863      	ldr	r3, [r4, #4]
 80116b0:	6123      	str	r3, [r4, #16]
 80116b2:	2300      	movs	r3, #0
 80116b4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80116b8:	e7a8      	b.n	801160c <_printf_i+0x150>
 80116ba:	6923      	ldr	r3, [r4, #16]
 80116bc:	462a      	mov	r2, r5
 80116be:	4649      	mov	r1, r9
 80116c0:	4640      	mov	r0, r8
 80116c2:	47d0      	blx	sl
 80116c4:	3001      	adds	r0, #1
 80116c6:	d0ab      	beq.n	8011620 <_printf_i+0x164>
 80116c8:	6823      	ldr	r3, [r4, #0]
 80116ca:	079b      	lsls	r3, r3, #30
 80116cc:	d413      	bmi.n	80116f6 <_printf_i+0x23a>
 80116ce:	68e0      	ldr	r0, [r4, #12]
 80116d0:	9b03      	ldr	r3, [sp, #12]
 80116d2:	4298      	cmp	r0, r3
 80116d4:	bfb8      	it	lt
 80116d6:	4618      	movlt	r0, r3
 80116d8:	e7a4      	b.n	8011624 <_printf_i+0x168>
 80116da:	2301      	movs	r3, #1
 80116dc:	4632      	mov	r2, r6
 80116de:	4649      	mov	r1, r9
 80116e0:	4640      	mov	r0, r8
 80116e2:	47d0      	blx	sl
 80116e4:	3001      	adds	r0, #1
 80116e6:	d09b      	beq.n	8011620 <_printf_i+0x164>
 80116e8:	3501      	adds	r5, #1
 80116ea:	68e3      	ldr	r3, [r4, #12]
 80116ec:	9903      	ldr	r1, [sp, #12]
 80116ee:	1a5b      	subs	r3, r3, r1
 80116f0:	42ab      	cmp	r3, r5
 80116f2:	dcf2      	bgt.n	80116da <_printf_i+0x21e>
 80116f4:	e7eb      	b.n	80116ce <_printf_i+0x212>
 80116f6:	2500      	movs	r5, #0
 80116f8:	f104 0619 	add.w	r6, r4, #25
 80116fc:	e7f5      	b.n	80116ea <_printf_i+0x22e>
 80116fe:	bf00      	nop
 8011700:	080126d2 	.word	0x080126d2
 8011704:	080126e3 	.word	0x080126e3

08011708 <__swbuf_r>:
 8011708:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801170a:	460e      	mov	r6, r1
 801170c:	4614      	mov	r4, r2
 801170e:	4605      	mov	r5, r0
 8011710:	b118      	cbz	r0, 801171a <__swbuf_r+0x12>
 8011712:	6983      	ldr	r3, [r0, #24]
 8011714:	b90b      	cbnz	r3, 801171a <__swbuf_r+0x12>
 8011716:	f7fd f97f 	bl	800ea18 <__sinit>
 801171a:	4b21      	ldr	r3, [pc, #132]	; (80117a0 <__swbuf_r+0x98>)
 801171c:	429c      	cmp	r4, r3
 801171e:	d12b      	bne.n	8011778 <__swbuf_r+0x70>
 8011720:	686c      	ldr	r4, [r5, #4]
 8011722:	69a3      	ldr	r3, [r4, #24]
 8011724:	60a3      	str	r3, [r4, #8]
 8011726:	89a3      	ldrh	r3, [r4, #12]
 8011728:	071a      	lsls	r2, r3, #28
 801172a:	d52f      	bpl.n	801178c <__swbuf_r+0x84>
 801172c:	6923      	ldr	r3, [r4, #16]
 801172e:	b36b      	cbz	r3, 801178c <__swbuf_r+0x84>
 8011730:	6923      	ldr	r3, [r4, #16]
 8011732:	6820      	ldr	r0, [r4, #0]
 8011734:	1ac0      	subs	r0, r0, r3
 8011736:	6963      	ldr	r3, [r4, #20]
 8011738:	b2f6      	uxtb	r6, r6
 801173a:	4283      	cmp	r3, r0
 801173c:	4637      	mov	r7, r6
 801173e:	dc04      	bgt.n	801174a <__swbuf_r+0x42>
 8011740:	4621      	mov	r1, r4
 8011742:	4628      	mov	r0, r5
 8011744:	f7fd f83e 	bl	800e7c4 <_fflush_r>
 8011748:	bb30      	cbnz	r0, 8011798 <__swbuf_r+0x90>
 801174a:	68a3      	ldr	r3, [r4, #8]
 801174c:	3b01      	subs	r3, #1
 801174e:	60a3      	str	r3, [r4, #8]
 8011750:	6823      	ldr	r3, [r4, #0]
 8011752:	1c5a      	adds	r2, r3, #1
 8011754:	6022      	str	r2, [r4, #0]
 8011756:	701e      	strb	r6, [r3, #0]
 8011758:	6963      	ldr	r3, [r4, #20]
 801175a:	3001      	adds	r0, #1
 801175c:	4283      	cmp	r3, r0
 801175e:	d004      	beq.n	801176a <__swbuf_r+0x62>
 8011760:	89a3      	ldrh	r3, [r4, #12]
 8011762:	07db      	lsls	r3, r3, #31
 8011764:	d506      	bpl.n	8011774 <__swbuf_r+0x6c>
 8011766:	2e0a      	cmp	r6, #10
 8011768:	d104      	bne.n	8011774 <__swbuf_r+0x6c>
 801176a:	4621      	mov	r1, r4
 801176c:	4628      	mov	r0, r5
 801176e:	f7fd f829 	bl	800e7c4 <_fflush_r>
 8011772:	b988      	cbnz	r0, 8011798 <__swbuf_r+0x90>
 8011774:	4638      	mov	r0, r7
 8011776:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011778:	4b0a      	ldr	r3, [pc, #40]	; (80117a4 <__swbuf_r+0x9c>)
 801177a:	429c      	cmp	r4, r3
 801177c:	d101      	bne.n	8011782 <__swbuf_r+0x7a>
 801177e:	68ac      	ldr	r4, [r5, #8]
 8011780:	e7cf      	b.n	8011722 <__swbuf_r+0x1a>
 8011782:	4b09      	ldr	r3, [pc, #36]	; (80117a8 <__swbuf_r+0xa0>)
 8011784:	429c      	cmp	r4, r3
 8011786:	bf08      	it	eq
 8011788:	68ec      	ldreq	r4, [r5, #12]
 801178a:	e7ca      	b.n	8011722 <__swbuf_r+0x1a>
 801178c:	4621      	mov	r1, r4
 801178e:	4628      	mov	r0, r5
 8011790:	f000 f80c 	bl	80117ac <__swsetup_r>
 8011794:	2800      	cmp	r0, #0
 8011796:	d0cb      	beq.n	8011730 <__swbuf_r+0x28>
 8011798:	f04f 37ff 	mov.w	r7, #4294967295
 801179c:	e7ea      	b.n	8011774 <__swbuf_r+0x6c>
 801179e:	bf00      	nop
 80117a0:	080122e4 	.word	0x080122e4
 80117a4:	08012304 	.word	0x08012304
 80117a8:	080122c4 	.word	0x080122c4

080117ac <__swsetup_r>:
 80117ac:	4b32      	ldr	r3, [pc, #200]	; (8011878 <__swsetup_r+0xcc>)
 80117ae:	b570      	push	{r4, r5, r6, lr}
 80117b0:	681d      	ldr	r5, [r3, #0]
 80117b2:	4606      	mov	r6, r0
 80117b4:	460c      	mov	r4, r1
 80117b6:	b125      	cbz	r5, 80117c2 <__swsetup_r+0x16>
 80117b8:	69ab      	ldr	r3, [r5, #24]
 80117ba:	b913      	cbnz	r3, 80117c2 <__swsetup_r+0x16>
 80117bc:	4628      	mov	r0, r5
 80117be:	f7fd f92b 	bl	800ea18 <__sinit>
 80117c2:	4b2e      	ldr	r3, [pc, #184]	; (801187c <__swsetup_r+0xd0>)
 80117c4:	429c      	cmp	r4, r3
 80117c6:	d10f      	bne.n	80117e8 <__swsetup_r+0x3c>
 80117c8:	686c      	ldr	r4, [r5, #4]
 80117ca:	89a3      	ldrh	r3, [r4, #12]
 80117cc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80117d0:	0719      	lsls	r1, r3, #28
 80117d2:	d42c      	bmi.n	801182e <__swsetup_r+0x82>
 80117d4:	06dd      	lsls	r5, r3, #27
 80117d6:	d411      	bmi.n	80117fc <__swsetup_r+0x50>
 80117d8:	2309      	movs	r3, #9
 80117da:	6033      	str	r3, [r6, #0]
 80117dc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80117e0:	81a3      	strh	r3, [r4, #12]
 80117e2:	f04f 30ff 	mov.w	r0, #4294967295
 80117e6:	e03e      	b.n	8011866 <__swsetup_r+0xba>
 80117e8:	4b25      	ldr	r3, [pc, #148]	; (8011880 <__swsetup_r+0xd4>)
 80117ea:	429c      	cmp	r4, r3
 80117ec:	d101      	bne.n	80117f2 <__swsetup_r+0x46>
 80117ee:	68ac      	ldr	r4, [r5, #8]
 80117f0:	e7eb      	b.n	80117ca <__swsetup_r+0x1e>
 80117f2:	4b24      	ldr	r3, [pc, #144]	; (8011884 <__swsetup_r+0xd8>)
 80117f4:	429c      	cmp	r4, r3
 80117f6:	bf08      	it	eq
 80117f8:	68ec      	ldreq	r4, [r5, #12]
 80117fa:	e7e6      	b.n	80117ca <__swsetup_r+0x1e>
 80117fc:	0758      	lsls	r0, r3, #29
 80117fe:	d512      	bpl.n	8011826 <__swsetup_r+0x7a>
 8011800:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8011802:	b141      	cbz	r1, 8011816 <__swsetup_r+0x6a>
 8011804:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8011808:	4299      	cmp	r1, r3
 801180a:	d002      	beq.n	8011812 <__swsetup_r+0x66>
 801180c:	4630      	mov	r0, r6
 801180e:	f7fd fb73 	bl	800eef8 <_free_r>
 8011812:	2300      	movs	r3, #0
 8011814:	6363      	str	r3, [r4, #52]	; 0x34
 8011816:	89a3      	ldrh	r3, [r4, #12]
 8011818:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801181c:	81a3      	strh	r3, [r4, #12]
 801181e:	2300      	movs	r3, #0
 8011820:	6063      	str	r3, [r4, #4]
 8011822:	6923      	ldr	r3, [r4, #16]
 8011824:	6023      	str	r3, [r4, #0]
 8011826:	89a3      	ldrh	r3, [r4, #12]
 8011828:	f043 0308 	orr.w	r3, r3, #8
 801182c:	81a3      	strh	r3, [r4, #12]
 801182e:	6923      	ldr	r3, [r4, #16]
 8011830:	b94b      	cbnz	r3, 8011846 <__swsetup_r+0x9a>
 8011832:	89a3      	ldrh	r3, [r4, #12]
 8011834:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8011838:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801183c:	d003      	beq.n	8011846 <__swsetup_r+0x9a>
 801183e:	4621      	mov	r1, r4
 8011840:	4630      	mov	r0, r6
 8011842:	f7fd fb03 	bl	800ee4c <__smakebuf_r>
 8011846:	89a0      	ldrh	r0, [r4, #12]
 8011848:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801184c:	f010 0301 	ands.w	r3, r0, #1
 8011850:	d00a      	beq.n	8011868 <__swsetup_r+0xbc>
 8011852:	2300      	movs	r3, #0
 8011854:	60a3      	str	r3, [r4, #8]
 8011856:	6963      	ldr	r3, [r4, #20]
 8011858:	425b      	negs	r3, r3
 801185a:	61a3      	str	r3, [r4, #24]
 801185c:	6923      	ldr	r3, [r4, #16]
 801185e:	b943      	cbnz	r3, 8011872 <__swsetup_r+0xc6>
 8011860:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8011864:	d1ba      	bne.n	80117dc <__swsetup_r+0x30>
 8011866:	bd70      	pop	{r4, r5, r6, pc}
 8011868:	0781      	lsls	r1, r0, #30
 801186a:	bf58      	it	pl
 801186c:	6963      	ldrpl	r3, [r4, #20]
 801186e:	60a3      	str	r3, [r4, #8]
 8011870:	e7f4      	b.n	801185c <__swsetup_r+0xb0>
 8011872:	2000      	movs	r0, #0
 8011874:	e7f7      	b.n	8011866 <__swsetup_r+0xba>
 8011876:	bf00      	nop
 8011878:	24000090 	.word	0x24000090
 801187c:	080122e4 	.word	0x080122e4
 8011880:	08012304 	.word	0x08012304
 8011884:	080122c4 	.word	0x080122c4

08011888 <abort>:
 8011888:	b508      	push	{r3, lr}
 801188a:	2006      	movs	r0, #6
 801188c:	f000 f82c 	bl	80118e8 <raise>
 8011890:	2001      	movs	r0, #1
 8011892:	f7f2 f989 	bl	8003ba8 <_exit>

08011896 <_raise_r>:
 8011896:	291f      	cmp	r1, #31
 8011898:	b538      	push	{r3, r4, r5, lr}
 801189a:	4604      	mov	r4, r0
 801189c:	460d      	mov	r5, r1
 801189e:	d904      	bls.n	80118aa <_raise_r+0x14>
 80118a0:	2316      	movs	r3, #22
 80118a2:	6003      	str	r3, [r0, #0]
 80118a4:	f04f 30ff 	mov.w	r0, #4294967295
 80118a8:	bd38      	pop	{r3, r4, r5, pc}
 80118aa:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80118ac:	b112      	cbz	r2, 80118b4 <_raise_r+0x1e>
 80118ae:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80118b2:	b94b      	cbnz	r3, 80118c8 <_raise_r+0x32>
 80118b4:	4620      	mov	r0, r4
 80118b6:	f000 f831 	bl	801191c <_getpid_r>
 80118ba:	462a      	mov	r2, r5
 80118bc:	4601      	mov	r1, r0
 80118be:	4620      	mov	r0, r4
 80118c0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80118c4:	f000 b818 	b.w	80118f8 <_kill_r>
 80118c8:	2b01      	cmp	r3, #1
 80118ca:	d00a      	beq.n	80118e2 <_raise_r+0x4c>
 80118cc:	1c59      	adds	r1, r3, #1
 80118ce:	d103      	bne.n	80118d8 <_raise_r+0x42>
 80118d0:	2316      	movs	r3, #22
 80118d2:	6003      	str	r3, [r0, #0]
 80118d4:	2001      	movs	r0, #1
 80118d6:	e7e7      	b.n	80118a8 <_raise_r+0x12>
 80118d8:	2400      	movs	r4, #0
 80118da:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80118de:	4628      	mov	r0, r5
 80118e0:	4798      	blx	r3
 80118e2:	2000      	movs	r0, #0
 80118e4:	e7e0      	b.n	80118a8 <_raise_r+0x12>
	...

080118e8 <raise>:
 80118e8:	4b02      	ldr	r3, [pc, #8]	; (80118f4 <raise+0xc>)
 80118ea:	4601      	mov	r1, r0
 80118ec:	6818      	ldr	r0, [r3, #0]
 80118ee:	f7ff bfd2 	b.w	8011896 <_raise_r>
 80118f2:	bf00      	nop
 80118f4:	24000090 	.word	0x24000090

080118f8 <_kill_r>:
 80118f8:	b538      	push	{r3, r4, r5, lr}
 80118fa:	4d07      	ldr	r5, [pc, #28]	; (8011918 <_kill_r+0x20>)
 80118fc:	2300      	movs	r3, #0
 80118fe:	4604      	mov	r4, r0
 8011900:	4608      	mov	r0, r1
 8011902:	4611      	mov	r1, r2
 8011904:	602b      	str	r3, [r5, #0]
 8011906:	f7f2 f93f 	bl	8003b88 <_kill>
 801190a:	1c43      	adds	r3, r0, #1
 801190c:	d102      	bne.n	8011914 <_kill_r+0x1c>
 801190e:	682b      	ldr	r3, [r5, #0]
 8011910:	b103      	cbz	r3, 8011914 <_kill_r+0x1c>
 8011912:	6023      	str	r3, [r4, #0]
 8011914:	bd38      	pop	{r3, r4, r5, pc}
 8011916:	bf00      	nop
 8011918:	24000aa8 	.word	0x24000aa8

0801191c <_getpid_r>:
 801191c:	f7f2 b92c 	b.w	8003b78 <_getpid>

08011920 <checkint>:
 8011920:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8011924:	f240 33fe 	movw	r3, #1022	; 0x3fe
 8011928:	429a      	cmp	r2, r3
 801192a:	b570      	push	{r4, r5, r6, lr}
 801192c:	dd2a      	ble.n	8011984 <checkint+0x64>
 801192e:	f240 4333 	movw	r3, #1075	; 0x433
 8011932:	429a      	cmp	r2, r3
 8011934:	dc24      	bgt.n	8011980 <checkint+0x60>
 8011936:	1a9b      	subs	r3, r3, r2
 8011938:	f1a3 0620 	sub.w	r6, r3, #32
 801193c:	f04f 32ff 	mov.w	r2, #4294967295
 8011940:	fa02 f403 	lsl.w	r4, r2, r3
 8011944:	fa02 f606 	lsl.w	r6, r2, r6
 8011948:	f1c3 0520 	rsb	r5, r3, #32
 801194c:	fa22 f505 	lsr.w	r5, r2, r5
 8011950:	4334      	orrs	r4, r6
 8011952:	432c      	orrs	r4, r5
 8011954:	409a      	lsls	r2, r3
 8011956:	ea20 0202 	bic.w	r2, r0, r2
 801195a:	ea21 0404 	bic.w	r4, r1, r4
 801195e:	4322      	orrs	r2, r4
 8011960:	f1a3 0420 	sub.w	r4, r3, #32
 8011964:	f1c3 0220 	rsb	r2, r3, #32
 8011968:	d10c      	bne.n	8011984 <checkint+0x64>
 801196a:	40d8      	lsrs	r0, r3
 801196c:	fa01 f302 	lsl.w	r3, r1, r2
 8011970:	4318      	orrs	r0, r3
 8011972:	40e1      	lsrs	r1, r4
 8011974:	4308      	orrs	r0, r1
 8011976:	f000 0001 	and.w	r0, r0, #1
 801197a:	f1d0 0002 	rsbs	r0, r0, #2
 801197e:	bd70      	pop	{r4, r5, r6, pc}
 8011980:	2002      	movs	r0, #2
 8011982:	e7fc      	b.n	801197e <checkint+0x5e>
 8011984:	2000      	movs	r0, #0
 8011986:	e7fa      	b.n	801197e <checkint+0x5e>

08011988 <pow>:
 8011988:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801198c:	ee10 4a90 	vmov	r4, s1
 8011990:	ed2d 8b0a 	vpush	{d8-d12}
 8011994:	ea4f 5a14 	mov.w	sl, r4, lsr #20
 8011998:	ee11 7a90 	vmov	r7, s3
 801199c:	f10a 32ff 	add.w	r2, sl, #4294967295
 80119a0:	f240 73fd 	movw	r3, #2045	; 0x7fd
 80119a4:	429a      	cmp	r2, r3
 80119a6:	ee10 6a10 	vmov	r6, s0
 80119aa:	ee11 0a10 	vmov	r0, s2
 80119ae:	b086      	sub	sp, #24
 80119b0:	46d4      	mov	ip, sl
 80119b2:	ea4f 5517 	mov.w	r5, r7, lsr #20
 80119b6:	d806      	bhi.n	80119c6 <pow+0x3e>
 80119b8:	f3c5 030a 	ubfx	r3, r5, #0, #11
 80119bc:	f2a3 33be 	subw	r3, r3, #958	; 0x3be
 80119c0:	2b7f      	cmp	r3, #127	; 0x7f
 80119c2:	f240 8156 	bls.w	8011c72 <pow+0x2ea>
 80119c6:	1802      	adds	r2, r0, r0
 80119c8:	eb47 0107 	adc.w	r1, r7, r7
 80119cc:	f06f 0e01 	mvn.w	lr, #1
 80119d0:	f112 39ff 	adds.w	r9, r2, #4294967295
 80119d4:	f141 38ff 	adc.w	r8, r1, #4294967295
 80119d8:	f46f 1300 	mvn.w	r3, #2097152	; 0x200000
 80119dc:	45ce      	cmp	lr, r9
 80119de:	eb73 0808 	sbcs.w	r8, r3, r8
 80119e2:	d23f      	bcs.n	8011a64 <pow+0xdc>
 80119e4:	ea52 0301 	orrs.w	r3, r2, r1
 80119e8:	f04f 0300 	mov.w	r3, #0
 80119ec:	d10c      	bne.n	8011a08 <pow+0x80>
 80119ee:	19b6      	adds	r6, r6, r6
 80119f0:	f484 2400 	eor.w	r4, r4, #524288	; 0x80000
 80119f4:	4164      	adcs	r4, r4
 80119f6:	42b3      	cmp	r3, r6
 80119f8:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80119fc:	41a3      	sbcs	r3, r4
 80119fe:	f0c0 808c 	bcc.w	8011b1a <pow+0x192>
 8011a02:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 8011a06:	e028      	b.n	8011a5a <pow+0xd2>
 8011a08:	4da3      	ldr	r5, [pc, #652]	; (8011c98 <pow+0x310>)
 8011a0a:	42ac      	cmp	r4, r5
 8011a0c:	bf08      	it	eq
 8011a0e:	429e      	cmpeq	r6, r3
 8011a10:	d107      	bne.n	8011a22 <pow+0x9a>
 8011a12:	1800      	adds	r0, r0, r0
 8011a14:	f487 2700 	eor.w	r7, r7, #524288	; 0x80000
 8011a18:	417f      	adcs	r7, r7
 8011a1a:	4283      	cmp	r3, r0
 8011a1c:	4b9f      	ldr	r3, [pc, #636]	; (8011c9c <pow+0x314>)
 8011a1e:	41bb      	sbcs	r3, r7
 8011a20:	e7ed      	b.n	80119fe <pow+0x76>
 8011a22:	19b6      	adds	r6, r6, r6
 8011a24:	489e      	ldr	r0, [pc, #632]	; (8011ca0 <pow+0x318>)
 8011a26:	4164      	adcs	r4, r4
 8011a28:	42b3      	cmp	r3, r6
 8011a2a:	eb70 0504 	sbcs.w	r5, r0, r4
 8011a2e:	d374      	bcc.n	8011b1a <pow+0x192>
 8011a30:	4281      	cmp	r1, r0
 8011a32:	bf08      	it	eq
 8011a34:	429a      	cmpeq	r2, r3
 8011a36:	d170      	bne.n	8011b1a <pow+0x192>
 8011a38:	4a9a      	ldr	r2, [pc, #616]	; (8011ca4 <pow+0x31c>)
 8011a3a:	4294      	cmp	r4, r2
 8011a3c:	bf08      	it	eq
 8011a3e:	429e      	cmpeq	r6, r3
 8011a40:	d0df      	beq.n	8011a02 <pow+0x7a>
 8011a42:	4294      	cmp	r4, r2
 8011a44:	ea6f 0707 	mvn.w	r7, r7
 8011a48:	bf34      	ite	cc
 8011a4a:	2400      	movcc	r4, #0
 8011a4c:	2401      	movcs	r4, #1
 8011a4e:	0fff      	lsrs	r7, r7, #31
 8011a50:	42bc      	cmp	r4, r7
 8011a52:	f040 81d9 	bne.w	8011e08 <pow+0x480>
 8011a56:	ee21 0b01 	vmul.f64	d0, d1, d1
 8011a5a:	b006      	add	sp, #24
 8011a5c:	ecbd 8b0a 	vpop	{d8-d12}
 8011a60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011a64:	eb16 0806 	adds.w	r8, r6, r6
 8011a68:	eb44 0904 	adc.w	r9, r4, r4
 8011a6c:	f118 31ff 	adds.w	r1, r8, #4294967295
 8011a70:	f169 0200 	sbc.w	r2, r9, #0
 8011a74:	458e      	cmp	lr, r1
 8011a76:	4193      	sbcs	r3, r2
 8011a78:	d223      	bcs.n	8011ac2 <pow+0x13a>
 8011a7a:	ee20 0b00 	vmul.f64	d0, d0, d0
 8011a7e:	2c00      	cmp	r4, #0
 8011a80:	da12      	bge.n	8011aa8 <pow+0x120>
 8011a82:	4639      	mov	r1, r7
 8011a84:	f7ff ff4c 	bl	8011920 <checkint>
 8011a88:	2801      	cmp	r0, #1
 8011a8a:	d10d      	bne.n	8011aa8 <pow+0x120>
 8011a8c:	eeb1 0b40 	vneg.f64	d0, d0
 8011a90:	ea58 0309 	orrs.w	r3, r8, r9
 8011a94:	d10a      	bne.n	8011aac <pow+0x124>
 8011a96:	2f00      	cmp	r7, #0
 8011a98:	dadf      	bge.n	8011a5a <pow+0xd2>
 8011a9a:	b006      	add	sp, #24
 8011a9c:	ecbd 8b0a 	vpop	{d8-d12}
 8011aa0:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011aa4:	f000 bb50 	b.w	8012148 <__math_divzero>
 8011aa8:	2000      	movs	r0, #0
 8011aaa:	e7f1      	b.n	8011a90 <pow+0x108>
 8011aac:	2f00      	cmp	r7, #0
 8011aae:	dad4      	bge.n	8011a5a <pow+0xd2>
 8011ab0:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8011ab4:	ee86 7b00 	vdiv.f64	d7, d6, d0
 8011ab8:	ed8d 7b00 	vstr	d7, [sp]
 8011abc:	ed9d 0b00 	vldr	d0, [sp]
 8011ac0:	e7cb      	b.n	8011a5a <pow+0xd2>
 8011ac2:	2c00      	cmp	r4, #0
 8011ac4:	da2c      	bge.n	8011b20 <pow+0x198>
 8011ac6:	4639      	mov	r1, r7
 8011ac8:	f7ff ff2a 	bl	8011920 <checkint>
 8011acc:	b930      	cbnz	r0, 8011adc <pow+0x154>
 8011ace:	b006      	add	sp, #24
 8011ad0:	ecbd 8b0a 	vpop	{d8-d12}
 8011ad4:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011ad8:	f000 bb4e 	b.w	8012178 <__math_invalid>
 8011adc:	2801      	cmp	r0, #1
 8011ade:	bf14      	ite	ne
 8011ae0:	2000      	movne	r0, #0
 8011ae2:	f44f 2080 	moveq.w	r0, #262144	; 0x40000
 8011ae6:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 8011aea:	f3ca 0c0a 	ubfx	ip, sl, #0, #11
 8011aee:	f3c5 020a 	ubfx	r2, r5, #0, #11
 8011af2:	f2a2 33be 	subw	r3, r2, #958	; 0x3be
 8011af6:	2b7f      	cmp	r3, #127	; 0x7f
 8011af8:	d92d      	bls.n	8011b56 <pow+0x1ce>
 8011afa:	4b67      	ldr	r3, [pc, #412]	; (8011c98 <pow+0x310>)
 8011afc:	2000      	movs	r0, #0
 8011afe:	429c      	cmp	r4, r3
 8011b00:	bf08      	it	eq
 8011b02:	4286      	cmpeq	r6, r0
 8011b04:	f43f af7d 	beq.w	8011a02 <pow+0x7a>
 8011b08:	f240 31bd 	movw	r1, #957	; 0x3bd
 8011b0c:	428a      	cmp	r2, r1
 8011b0e:	d80c      	bhi.n	8011b2a <pow+0x1a2>
 8011b10:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 8011b14:	42b0      	cmp	r0, r6
 8011b16:	41a3      	sbcs	r3, r4
 8011b18:	d204      	bcs.n	8011b24 <pow+0x19c>
 8011b1a:	ee31 0b00 	vadd.f64	d0, d1, d0
 8011b1e:	e79c      	b.n	8011a5a <pow+0xd2>
 8011b20:	2000      	movs	r0, #0
 8011b22:	e7e4      	b.n	8011aee <pow+0x166>
 8011b24:	ee30 0b41 	vsub.f64	d0, d0, d1
 8011b28:	e797      	b.n	8011a5a <pow+0xd2>
 8011b2a:	2e01      	cmp	r6, #1
 8011b2c:	eb74 0303 	sbcs.w	r3, r4, r3
 8011b30:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8011b34:	bf34      	ite	cc
 8011b36:	2301      	movcc	r3, #1
 8011b38:	2300      	movcs	r3, #0
 8011b3a:	4295      	cmp	r5, r2
 8011b3c:	bf8c      	ite	hi
 8011b3e:	2500      	movhi	r5, #0
 8011b40:	2501      	movls	r5, #1
 8011b42:	42ab      	cmp	r3, r5
 8011b44:	f000 809d 	beq.w	8011c82 <pow+0x2fa>
 8011b48:	b006      	add	sp, #24
 8011b4a:	ecbd 8b0a 	vpop	{d8-d12}
 8011b4e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011b52:	f000 baf1 	b.w	8012138 <__math_oflow>
 8011b56:	f1bc 0f00 	cmp.w	ip, #0
 8011b5a:	d10b      	bne.n	8011b74 <pow+0x1ec>
 8011b5c:	ed9f 7b4c 	vldr	d7, [pc, #304]	; 8011c90 <pow+0x308>
 8011b60:	ee20 7b07 	vmul.f64	d7, d0, d7
 8011b64:	ec53 2b17 	vmov	r2, r3, d7
 8011b68:	ee17 6a10 	vmov	r6, s14
 8011b6c:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 8011b70:	f1a4 7450 	sub.w	r4, r4, #54525952	; 0x3400000
 8011b74:	4b4c      	ldr	r3, [pc, #304]	; (8011ca8 <pow+0x320>)
 8011b76:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 8011b7a:	4423      	add	r3, r4
 8011b7c:	f3c3 3246 	ubfx	r2, r3, #13, #7
 8011b80:	1519      	asrs	r1, r3, #20
 8011b82:	0d1b      	lsrs	r3, r3, #20
 8011b84:	051b      	lsls	r3, r3, #20
 8011b86:	eba4 0903 	sub.w	r9, r4, r3
 8011b8a:	4b48      	ldr	r3, [pc, #288]	; (8011cac <pow+0x324>)
 8011b8c:	ee04 1a10 	vmov	s8, r1
 8011b90:	eb03 1142 	add.w	r1, r3, r2, lsl #5
 8011b94:	f1b6 0800 	subs.w	r8, r6, #0
 8011b98:	ed91 7b12 	vldr	d7, [r1, #72]	; 0x48
 8011b9c:	ec49 8b15 	vmov	d5, r8, r9
 8011ba0:	ed91 2b16 	vldr	d2, [r1, #88]	; 0x58
 8011ba4:	eea5 6b07 	vfma.f64	d6, d5, d7
 8011ba8:	ed93 7b00 	vldr	d7, [r3]
 8011bac:	ed93 5b02 	vldr	d5, [r3, #8]
 8011bb0:	eeb8 4bc4 	vcvt.f64.s32	d4, s8
 8011bb4:	eea4 2b07 	vfma.f64	d2, d4, d7
 8011bb8:	ed91 7b18 	vldr	d7, [r1, #96]	; 0x60
 8011bbc:	ee36 ab02 	vadd.f64	d10, d6, d2
 8011bc0:	ee32 2b4a 	vsub.f64	d2, d2, d10
 8011bc4:	eea4 7b05 	vfma.f64	d7, d4, d5
 8011bc8:	ed93 5b04 	vldr	d5, [r3, #16]
 8011bcc:	ee32 2b06 	vadd.f64	d2, d2, d6
 8011bd0:	ee37 7b02 	vadd.f64	d7, d7, d2
 8011bd4:	ee26 5b05 	vmul.f64	d5, d6, d5
 8011bd8:	ed93 4b08 	vldr	d4, [r3, #32]
 8011bdc:	ee26 0b05 	vmul.f64	d0, d6, d5
 8011be0:	eeb0 9b40 	vmov.f64	d9, d0
 8011be4:	ee95 9b06 	vfnms.f64	d9, d5, d6
 8011be8:	ed93 5b06 	vldr	d5, [r3, #24]
 8011bec:	ee3a 8b00 	vadd.f64	d8, d10, d0
 8011bf0:	ee26 bb00 	vmul.f64	d11, d6, d0
 8011bf4:	ed93 3b0c 	vldr	d3, [r3, #48]	; 0x30
 8011bf8:	eea6 5b04 	vfma.f64	d5, d6, d4
 8011bfc:	ee3a ab48 	vsub.f64	d10, d10, d8
 8011c00:	ed93 4b0a 	vldr	d4, [r3, #40]	; 0x28
 8011c04:	ee37 9b09 	vadd.f64	d9, d7, d9
 8011c08:	ee3a ab00 	vadd.f64	d10, d10, d0
 8011c0c:	eea6 4b03 	vfma.f64	d4, d6, d3
 8011c10:	ed93 cb10 	vldr	d12, [r3, #64]	; 0x40
 8011c14:	ee39 ab0a 	vadd.f64	d10, d9, d10
 8011c18:	ed93 3b0e 	vldr	d3, [r3, #56]	; 0x38
 8011c1c:	eea6 3b0c 	vfma.f64	d3, d6, d12
 8011c20:	eea0 4b03 	vfma.f64	d4, d0, d3
 8011c24:	eea0 5b04 	vfma.f64	d5, d0, d4
 8011c28:	eeab ab05 	vfma.f64	d10, d11, d5
 8011c2c:	ee38 6b0a 	vadd.f64	d6, d8, d10
 8011c30:	ee21 7b06 	vmul.f64	d7, d1, d6
 8011c34:	ee17 3a90 	vmov	r3, s15
 8011c38:	eeb0 5b47 	vmov.f64	d5, d7
 8011c3c:	f3c3 560a 	ubfx	r6, r3, #20, #11
 8011c40:	f46f 7272 	mvn.w	r2, #968	; 0x3c8
 8011c44:	18b2      	adds	r2, r6, r2
 8011c46:	2a3e      	cmp	r2, #62	; 0x3e
 8011c48:	ee91 5b06 	vfnms.f64	d5, d1, d6
 8011c4c:	ee38 8b46 	vsub.f64	d8, d8, d6
 8011c50:	ee38 ab0a 	vadd.f64	d10, d8, d10
 8011c54:	eea1 5b0a 	vfma.f64	d5, d1, d10
 8011c58:	d92b      	bls.n	8011cb2 <pow+0x32a>
 8011c5a:	2a00      	cmp	r2, #0
 8011c5c:	da0b      	bge.n	8011c76 <pow+0x2ee>
 8011c5e:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 8011c62:	ee37 0b00 	vadd.f64	d0, d7, d0
 8011c66:	2800      	cmp	r0, #0
 8011c68:	f43f aef7 	beq.w	8011a5a <pow+0xd2>
 8011c6c:	eeb1 0b40 	vneg.f64	d0, d0
 8011c70:	e6f3      	b.n	8011a5a <pow+0xd2>
 8011c72:	2000      	movs	r0, #0
 8011c74:	e77e      	b.n	8011b74 <pow+0x1ec>
 8011c76:	f5b6 6f81 	cmp.w	r6, #1032	; 0x408
 8011c7a:	d919      	bls.n	8011cb0 <pow+0x328>
 8011c7c:	2b00      	cmp	r3, #0
 8011c7e:	f6bf af63 	bge.w	8011b48 <pow+0x1c0>
 8011c82:	b006      	add	sp, #24
 8011c84:	ecbd 8b0a 	vpop	{d8-d12}
 8011c88:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011c8c:	f000 ba4c 	b.w	8012128 <__math_uflow>
 8011c90:	00000000 	.word	0x00000000
 8011c94:	43300000 	.word	0x43300000
 8011c98:	3ff00000 	.word	0x3ff00000
 8011c9c:	fff00000 	.word	0xfff00000
 8011ca0:	ffe00000 	.word	0xffe00000
 8011ca4:	7fe00000 	.word	0x7fe00000
 8011ca8:	c0196aab 	.word	0xc0196aab
 8011cac:	080126f8 	.word	0x080126f8
 8011cb0:	2600      	movs	r6, #0
 8011cb2:	495d      	ldr	r1, [pc, #372]	; (8011e28 <pow+0x4a0>)
 8011cb4:	ed91 4b02 	vldr	d4, [r1, #8]
 8011cb8:	ed91 3b00 	vldr	d3, [r1]
 8011cbc:	eeb0 6b44 	vmov.f64	d6, d4
 8011cc0:	eea7 6b03 	vfma.f64	d6, d7, d3
 8011cc4:	ee16 5a10 	vmov	r5, s12
 8011cc8:	ee36 6b44 	vsub.f64	d6, d6, d4
 8011ccc:	ed91 4b04 	vldr	d4, [r1, #16]
 8011cd0:	f005 037f 	and.w	r3, r5, #127	; 0x7f
 8011cd4:	eea6 7b04 	vfma.f64	d7, d6, d4
 8011cd8:	eeb0 0b47 	vmov.f64	d0, d7
 8011cdc:	ed91 7b06 	vldr	d7, [r1, #24]
 8011ce0:	18dc      	adds	r4, r3, r3
 8011ce2:	f104 030f 	add.w	r3, r4, #15
 8011ce6:	eb01 04c4 	add.w	r4, r1, r4, lsl #3
 8011cea:	eea6 0b07 	vfma.f64	d0, d6, d7
 8011cee:	ed91 4b0a 	vldr	d4, [r1, #40]	; 0x28
 8011cf2:	ee35 0b00 	vadd.f64	d0, d5, d0
 8011cf6:	ee20 6b00 	vmul.f64	d6, d0, d0
 8011cfa:	ed94 7b1c 	vldr	d7, [r4, #112]	; 0x70
 8011cfe:	ed91 5b08 	vldr	d5, [r1, #32]
 8011d02:	ee30 7b07 	vadd.f64	d7, d0, d7
 8011d06:	eb01 02c3 	add.w	r2, r1, r3, lsl #3
 8011d0a:	eea0 5b04 	vfma.f64	d5, d0, d4
 8011d0e:	ed91 4b0e 	vldr	d4, [r1, #56]	; 0x38
 8011d12:	eea6 7b05 	vfma.f64	d7, d6, d5
 8011d16:	ee26 6b06 	vmul.f64	d6, d6, d6
 8011d1a:	ed91 5b0c 	vldr	d5, [r1, #48]	; 0x30
 8011d1e:	f851 c033 	ldr.w	ip, [r1, r3, lsl #3]
 8011d22:	f8d2 e004 	ldr.w	lr, [r2, #4]
 8011d26:	eea0 5b04 	vfma.f64	d5, d0, d4
 8011d2a:	1940      	adds	r0, r0, r5
 8011d2c:	2700      	movs	r7, #0
 8011d2e:	eb17 020c 	adds.w	r2, r7, ip
 8011d32:	eb0e 3340 	add.w	r3, lr, r0, lsl #13
 8011d36:	eea6 7b05 	vfma.f64	d7, d6, d5
 8011d3a:	2e00      	cmp	r6, #0
 8011d3c:	d15f      	bne.n	8011dfe <pow+0x476>
 8011d3e:	42bd      	cmp	r5, r7
 8011d40:	db13      	blt.n	8011d6a <pow+0x3e2>
 8011d42:	f103 4140 	add.w	r1, r3, #3221225472	; 0xc0000000
 8011d46:	f501 0170 	add.w	r1, r1, #15728640	; 0xf00000
 8011d4a:	4610      	mov	r0, r2
 8011d4c:	ec41 0b10 	vmov	d0, r0, r1
 8011d50:	eea7 0b00 	vfma.f64	d0, d7, d0
 8011d54:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 8011e10 <pow+0x488>
 8011d58:	ee20 0b07 	vmul.f64	d0, d0, d7
 8011d5c:	b006      	add	sp, #24
 8011d5e:	ecbd 8b0a 	vpop	{d8-d12}
 8011d62:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011d66:	f000 ba1f 	b.w	80121a8 <__math_check_oflow>
 8011d6a:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
 8011d6e:	f501 1100 	add.w	r1, r1, #2097152	; 0x200000
 8011d72:	4610      	mov	r0, r2
 8011d74:	ec41 0b15 	vmov	d5, r0, r1
 8011d78:	eeb7 4b00 	vmov.f64	d4, #112	; 0x3f800000  1.0
 8011d7c:	ee27 6b05 	vmul.f64	d6, d7, d5
 8011d80:	ee35 7b06 	vadd.f64	d7, d5, d6
 8011d84:	eeb0 3bc7 	vabs.f64	d3, d7
 8011d88:	eeb4 3bc4 	vcmpe.f64	d3, d4
 8011d8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011d90:	ed9f 0b21 	vldr	d0, [pc, #132]	; 8011e18 <pow+0x490>
 8011d94:	d52a      	bpl.n	8011dec <pow+0x464>
 8011d96:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8011d9a:	ee35 5b47 	vsub.f64	d5, d5, d7
 8011d9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011da2:	eebf 3b00 	vmov.f64	d3, #240	; 0xbf800000 -1.0
 8011da6:	ee35 6b06 	vadd.f64	d6, d5, d6
 8011daa:	bf48      	it	mi
 8011dac:	eeb0 4b43 	vmovmi.f64	d4, d3
 8011db0:	ee37 3b04 	vadd.f64	d3, d7, d4
 8011db4:	ee34 5b43 	vsub.f64	d5, d4, d3
 8011db8:	ee35 7b07 	vadd.f64	d7, d5, d7
 8011dbc:	ee37 7b06 	vadd.f64	d7, d7, d6
 8011dc0:	ee37 7b03 	vadd.f64	d7, d7, d3
 8011dc4:	ee37 7b44 	vsub.f64	d7, d7, d4
 8011dc8:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8011dcc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011dd0:	d104      	bne.n	8011ddc <pow+0x454>
 8011dd2:	4632      	mov	r2, r6
 8011dd4:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 8011dd8:	ec43 2b17 	vmov	d7, r2, r3
 8011ddc:	ed8d 0b02 	vstr	d0, [sp, #8]
 8011de0:	ed9d 6b02 	vldr	d6, [sp, #8]
 8011de4:	ee26 6b00 	vmul.f64	d6, d6, d0
 8011de8:	ed8d 6b04 	vstr	d6, [sp, #16]
 8011dec:	ee27 0b00 	vmul.f64	d0, d7, d0
 8011df0:	b006      	add	sp, #24
 8011df2:	ecbd 8b0a 	vpop	{d8-d12}
 8011df6:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011dfa:	f000 b9cc 	b.w	8012196 <__math_check_uflow>
 8011dfe:	ec43 2b10 	vmov	d0, r2, r3
 8011e02:	eea7 0b00 	vfma.f64	d0, d7, d0
 8011e06:	e628      	b.n	8011a5a <pow+0xd2>
 8011e08:	ed9f 0b05 	vldr	d0, [pc, #20]	; 8011e20 <pow+0x498>
 8011e0c:	e625      	b.n	8011a5a <pow+0xd2>
 8011e0e:	bf00      	nop
 8011e10:	00000000 	.word	0x00000000
 8011e14:	7f000000 	.word	0x7f000000
 8011e18:	00000000 	.word	0x00000000
 8011e1c:	00100000 	.word	0x00100000
	...
 8011e28:	08013740 	.word	0x08013740

08011e2c <asin>:
 8011e2c:	b508      	push	{r3, lr}
 8011e2e:	ed2d 8b04 	vpush	{d8-d9}
 8011e32:	eeb0 8b40 	vmov.f64	d8, d0
 8011e36:	f000 f847 	bl	8011ec8 <__ieee754_asin>
 8011e3a:	eeb4 8b48 	vcmp.f64	d8, d8
 8011e3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011e42:	eeb0 9b40 	vmov.f64	d9, d0
 8011e46:	d615      	bvs.n	8011e74 <asin+0x48>
 8011e48:	eeb0 0b48 	vmov.f64	d0, d8
 8011e4c:	f000 f9c0 	bl	80121d0 <fabs>
 8011e50:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 8011e54:	eeb4 0bc7 	vcmpe.f64	d0, d7
 8011e58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011e5c:	dd0a      	ble.n	8011e74 <asin+0x48>
 8011e5e:	f7fc fbb1 	bl	800e5c4 <__errno>
 8011e62:	ecbd 8b04 	vpop	{d8-d9}
 8011e66:	2321      	movs	r3, #33	; 0x21
 8011e68:	6003      	str	r3, [r0, #0]
 8011e6a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8011e6e:	4804      	ldr	r0, [pc, #16]	; (8011e80 <asin+0x54>)
 8011e70:	f7ff b8fa 	b.w	8011068 <nan>
 8011e74:	eeb0 0b49 	vmov.f64	d0, d9
 8011e78:	ecbd 8b04 	vpop	{d8-d9}
 8011e7c:	bd08      	pop	{r3, pc}
 8011e7e:	bf00      	nop
 8011e80:	080125bf 	.word	0x080125bf
 8011e84:	00000000 	.word	0x00000000

08011e88 <sqrt>:
 8011e88:	b508      	push	{r3, lr}
 8011e8a:	ed2d 8b04 	vpush	{d8-d9}
 8011e8e:	eeb0 8b40 	vmov.f64	d8, d0
 8011e92:	f000 f927 	bl	80120e4 <__ieee754_sqrt>
 8011e96:	eeb4 8b48 	vcmp.f64	d8, d8
 8011e9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011e9e:	d60c      	bvs.n	8011eba <sqrt+0x32>
 8011ea0:	ed9f 9b07 	vldr	d9, [pc, #28]	; 8011ec0 <sqrt+0x38>
 8011ea4:	eeb4 8bc9 	vcmpe.f64	d8, d9
 8011ea8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011eac:	d505      	bpl.n	8011eba <sqrt+0x32>
 8011eae:	f7fc fb89 	bl	800e5c4 <__errno>
 8011eb2:	ee89 0b09 	vdiv.f64	d0, d9, d9
 8011eb6:	2321      	movs	r3, #33	; 0x21
 8011eb8:	6003      	str	r3, [r0, #0]
 8011eba:	ecbd 8b04 	vpop	{d8-d9}
 8011ebe:	bd08      	pop	{r3, pc}
	...

08011ec8 <__ieee754_asin>:
 8011ec8:	b538      	push	{r3, r4, r5, lr}
 8011eca:	ee10 5a90 	vmov	r5, s1
 8011ece:	4b82      	ldr	r3, [pc, #520]	; (80120d8 <__ieee754_asin+0x210>)
 8011ed0:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 8011ed4:	429c      	cmp	r4, r3
 8011ed6:	ed2d 8b06 	vpush	{d8-d10}
 8011eda:	dd19      	ble.n	8011f10 <__ieee754_asin+0x48>
 8011edc:	ee10 3a10 	vmov	r3, s0
 8011ee0:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8011ee4:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8011ee8:	4323      	orrs	r3, r4
 8011eea:	d10c      	bne.n	8011f06 <__ieee754_asin+0x3e>
 8011eec:	ed9f 7b5c 	vldr	d7, [pc, #368]	; 8012060 <__ieee754_asin+0x198>
 8011ef0:	ed9f 6b5d 	vldr	d6, [pc, #372]	; 8012068 <__ieee754_asin+0x1a0>
 8011ef4:	ee20 7b07 	vmul.f64	d7, d0, d7
 8011ef8:	eea0 7b06 	vfma.f64	d7, d0, d6
 8011efc:	eeb0 0b47 	vmov.f64	d0, d7
 8011f00:	ecbd 8b06 	vpop	{d8-d10}
 8011f04:	bd38      	pop	{r3, r4, r5, pc}
 8011f06:	ee30 7b40 	vsub.f64	d7, d0, d0
 8011f0a:	ee87 0b07 	vdiv.f64	d0, d7, d7
 8011f0e:	e7f7      	b.n	8011f00 <__ieee754_asin+0x38>
 8011f10:	4b72      	ldr	r3, [pc, #456]	; (80120dc <__ieee754_asin+0x214>)
 8011f12:	eeb7 9b00 	vmov.f64	d9, #112	; 0x3f800000  1.0
 8011f16:	429c      	cmp	r4, r3
 8011f18:	dc0b      	bgt.n	8011f32 <__ieee754_asin+0x6a>
 8011f1a:	f1b4 5f79 	cmp.w	r4, #1044381696	; 0x3e400000
 8011f1e:	da52      	bge.n	8011fc6 <__ieee754_asin+0xfe>
 8011f20:	ed9f 7b53 	vldr	d7, [pc, #332]	; 8012070 <__ieee754_asin+0x1a8>
 8011f24:	ee30 7b07 	vadd.f64	d7, d0, d7
 8011f28:	eeb4 7bc9 	vcmpe.f64	d7, d9
 8011f2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011f30:	dce6      	bgt.n	8011f00 <__ieee754_asin+0x38>
 8011f32:	eeb6 8b00 	vmov.f64	d8, #96	; 0x3f000000  0.5
 8011f36:	f000 f94b 	bl	80121d0 <fabs>
 8011f3a:	ed9f 7b4f 	vldr	d7, [pc, #316]	; 8012078 <__ieee754_asin+0x1b0>
 8011f3e:	ee39 0b40 	vsub.f64	d0, d9, d0
 8011f42:	ee20 8b08 	vmul.f64	d8, d0, d8
 8011f46:	ed9f 6b4e 	vldr	d6, [pc, #312]	; 8012080 <__ieee754_asin+0x1b8>
 8011f4a:	eeb0 0b48 	vmov.f64	d0, d8
 8011f4e:	eea8 6b07 	vfma.f64	d6, d8, d7
 8011f52:	ed9f 7b4d 	vldr	d7, [pc, #308]	; 8012088 <__ieee754_asin+0x1c0>
 8011f56:	eea6 7b08 	vfma.f64	d7, d6, d8
 8011f5a:	ed9f 6b4d 	vldr	d6, [pc, #308]	; 8012090 <__ieee754_asin+0x1c8>
 8011f5e:	ed9f ab4e 	vldr	d10, [pc, #312]	; 8012098 <__ieee754_asin+0x1d0>
 8011f62:	eea7 6b08 	vfma.f64	d6, d7, d8
 8011f66:	ed9f 7b4e 	vldr	d7, [pc, #312]	; 80120a0 <__ieee754_asin+0x1d8>
 8011f6a:	eea6 7b08 	vfma.f64	d7, d6, d8
 8011f6e:	ed9f 6b4e 	vldr	d6, [pc, #312]	; 80120a8 <__ieee754_asin+0x1e0>
 8011f72:	eea7 ab08 	vfma.f64	d10, d7, d8
 8011f76:	ee2a ab08 	vmul.f64	d10, d10, d8
 8011f7a:	ed9f 7b4d 	vldr	d7, [pc, #308]	; 80120b0 <__ieee754_asin+0x1e8>
 8011f7e:	eea8 7b06 	vfma.f64	d7, d8, d6
 8011f82:	ed9f 6b4d 	vldr	d6, [pc, #308]	; 80120b8 <__ieee754_asin+0x1f0>
 8011f86:	eea7 6b08 	vfma.f64	d6, d7, d8
 8011f8a:	ed9f 7b4d 	vldr	d7, [pc, #308]	; 80120c0 <__ieee754_asin+0x1f8>
 8011f8e:	eea6 7b08 	vfma.f64	d7, d6, d8
 8011f92:	eea7 9b08 	vfma.f64	d9, d7, d8
 8011f96:	f000 f8a5 	bl	80120e4 <__ieee754_sqrt>
 8011f9a:	ee8a 5b09 	vdiv.f64	d5, d10, d9
 8011f9e:	eeb0 4b00 	vmov.f64	d4, #0	; 0x40000000  2.0
 8011fa2:	4b4f      	ldr	r3, [pc, #316]	; (80120e0 <__ieee754_asin+0x218>)
 8011fa4:	429c      	cmp	r4, r3
 8011fa6:	dd3d      	ble.n	8012024 <__ieee754_asin+0x15c>
 8011fa8:	eea0 0b05 	vfma.f64	d0, d0, d5
 8011fac:	ed9f 7b46 	vldr	d7, [pc, #280]	; 80120c8 <__ieee754_asin+0x200>
 8011fb0:	eea0 7b04 	vfma.f64	d7, d0, d4
 8011fb4:	ed9f 0b2c 	vldr	d0, [pc, #176]	; 8012068 <__ieee754_asin+0x1a0>
 8011fb8:	ee30 0b47 	vsub.f64	d0, d0, d7
 8011fbc:	2d00      	cmp	r5, #0
 8011fbe:	bfd8      	it	le
 8011fc0:	eeb1 0b40 	vnegle.f64	d0, d0
 8011fc4:	e79c      	b.n	8011f00 <__ieee754_asin+0x38>
 8011fc6:	ed9f 5b2c 	vldr	d5, [pc, #176]	; 8012078 <__ieee754_asin+0x1b0>
 8011fca:	ee20 7b00 	vmul.f64	d7, d0, d0
 8011fce:	ed9f 6b2c 	vldr	d6, [pc, #176]	; 8012080 <__ieee754_asin+0x1b8>
 8011fd2:	eea7 6b05 	vfma.f64	d6, d7, d5
 8011fd6:	ed9f 5b2c 	vldr	d5, [pc, #176]	; 8012088 <__ieee754_asin+0x1c0>
 8011fda:	eea6 5b07 	vfma.f64	d5, d6, d7
 8011fde:	ed9f 6b2c 	vldr	d6, [pc, #176]	; 8012090 <__ieee754_asin+0x1c8>
 8011fe2:	eea5 6b07 	vfma.f64	d6, d5, d7
 8011fe6:	ed9f 5b2e 	vldr	d5, [pc, #184]	; 80120a0 <__ieee754_asin+0x1d8>
 8011fea:	eea6 5b07 	vfma.f64	d5, d6, d7
 8011fee:	ed9f 6b2a 	vldr	d6, [pc, #168]	; 8012098 <__ieee754_asin+0x1d0>
 8011ff2:	ed9f 4b2d 	vldr	d4, [pc, #180]	; 80120a8 <__ieee754_asin+0x1e0>
 8011ff6:	eea5 6b07 	vfma.f64	d6, d5, d7
 8011ffa:	ee26 6b07 	vmul.f64	d6, d6, d7
 8011ffe:	ed9f 5b2c 	vldr	d5, [pc, #176]	; 80120b0 <__ieee754_asin+0x1e8>
 8012002:	eea7 5b04 	vfma.f64	d5, d7, d4
 8012006:	ed9f 4b2c 	vldr	d4, [pc, #176]	; 80120b8 <__ieee754_asin+0x1f0>
 801200a:	eea5 4b07 	vfma.f64	d4, d5, d7
 801200e:	ed9f 5b2c 	vldr	d5, [pc, #176]	; 80120c0 <__ieee754_asin+0x1f8>
 8012012:	eea4 5b07 	vfma.f64	d5, d4, d7
 8012016:	eea5 9b07 	vfma.f64	d9, d5, d7
 801201a:	ee86 7b09 	vdiv.f64	d7, d6, d9
 801201e:	eea0 0b07 	vfma.f64	d0, d0, d7
 8012022:	e76d      	b.n	8011f00 <__ieee754_asin+0x38>
 8012024:	ec53 2b10 	vmov	r2, r3, d0
 8012028:	2200      	movs	r2, #0
 801202a:	ec43 2b16 	vmov	d6, r2, r3
 801202e:	ee30 7b06 	vadd.f64	d7, d0, d6
 8012032:	eea6 8b46 	vfms.f64	d8, d6, d6
 8012036:	ee88 3b07 	vdiv.f64	d3, d8, d7
 801203a:	ed9f 7b09 	vldr	d7, [pc, #36]	; 8012060 <__ieee754_asin+0x198>
 801203e:	ee30 0b00 	vadd.f64	d0, d0, d0
 8012042:	eea3 7b44 	vfms.f64	d7, d3, d4
 8012046:	ee90 7b05 	vfnms.f64	d7, d0, d5
 801204a:	ed9f 5b21 	vldr	d5, [pc, #132]	; 80120d0 <__ieee754_asin+0x208>
 801204e:	eeb0 0b45 	vmov.f64	d0, d5
 8012052:	eea6 0b44 	vfms.f64	d0, d6, d4
 8012056:	ee37 0b40 	vsub.f64	d0, d7, d0
 801205a:	ee35 0b40 	vsub.f64	d0, d5, d0
 801205e:	e7ad      	b.n	8011fbc <__ieee754_asin+0xf4>
 8012060:	33145c07 	.word	0x33145c07
 8012064:	3c91a626 	.word	0x3c91a626
 8012068:	54442d18 	.word	0x54442d18
 801206c:	3ff921fb 	.word	0x3ff921fb
 8012070:	8800759c 	.word	0x8800759c
 8012074:	7e37e43c 	.word	0x7e37e43c
 8012078:	0dfdf709 	.word	0x0dfdf709
 801207c:	3f023de1 	.word	0x3f023de1
 8012080:	7501b288 	.word	0x7501b288
 8012084:	3f49efe0 	.word	0x3f49efe0
 8012088:	b5688f3b 	.word	0xb5688f3b
 801208c:	bfa48228 	.word	0xbfa48228
 8012090:	0e884455 	.word	0x0e884455
 8012094:	3fc9c155 	.word	0x3fc9c155
 8012098:	55555555 	.word	0x55555555
 801209c:	3fc55555 	.word	0x3fc55555
 80120a0:	03eb6f7d 	.word	0x03eb6f7d
 80120a4:	bfd4d612 	.word	0xbfd4d612
 80120a8:	b12e9282 	.word	0xb12e9282
 80120ac:	3fb3b8c5 	.word	0x3fb3b8c5
 80120b0:	1b8d0159 	.word	0x1b8d0159
 80120b4:	bfe6066c 	.word	0xbfe6066c
 80120b8:	9c598ac8 	.word	0x9c598ac8
 80120bc:	40002ae5 	.word	0x40002ae5
 80120c0:	1c8a2d4b 	.word	0x1c8a2d4b
 80120c4:	c0033a27 	.word	0xc0033a27
 80120c8:	33145c07 	.word	0x33145c07
 80120cc:	bc91a626 	.word	0xbc91a626
 80120d0:	54442d18 	.word	0x54442d18
 80120d4:	3fe921fb 	.word	0x3fe921fb
 80120d8:	3fefffff 	.word	0x3fefffff
 80120dc:	3fdfffff 	.word	0x3fdfffff
 80120e0:	3fef3332 	.word	0x3fef3332

080120e4 <__ieee754_sqrt>:
 80120e4:	eeb1 0bc0 	vsqrt.f64	d0, d0
 80120e8:	4770      	bx	lr

080120ea <with_errno>:
 80120ea:	b513      	push	{r0, r1, r4, lr}
 80120ec:	4604      	mov	r4, r0
 80120ee:	ed8d 0b00 	vstr	d0, [sp]
 80120f2:	f7fc fa67 	bl	800e5c4 <__errno>
 80120f6:	ed9d 0b00 	vldr	d0, [sp]
 80120fa:	6004      	str	r4, [r0, #0]
 80120fc:	b002      	add	sp, #8
 80120fe:	bd10      	pop	{r4, pc}

08012100 <xflow>:
 8012100:	b082      	sub	sp, #8
 8012102:	b158      	cbz	r0, 801211c <xflow+0x1c>
 8012104:	eeb1 7b40 	vneg.f64	d7, d0
 8012108:	ed8d 7b00 	vstr	d7, [sp]
 801210c:	ed9d 7b00 	vldr	d7, [sp]
 8012110:	2022      	movs	r0, #34	; 0x22
 8012112:	ee20 0b07 	vmul.f64	d0, d0, d7
 8012116:	b002      	add	sp, #8
 8012118:	f7ff bfe7 	b.w	80120ea <with_errno>
 801211c:	eeb0 7b40 	vmov.f64	d7, d0
 8012120:	e7f2      	b.n	8012108 <xflow+0x8>
 8012122:	0000      	movs	r0, r0
 8012124:	0000      	movs	r0, r0
	...

08012128 <__math_uflow>:
 8012128:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8012130 <__math_uflow+0x8>
 801212c:	f7ff bfe8 	b.w	8012100 <xflow>
 8012130:	00000000 	.word	0x00000000
 8012134:	10000000 	.word	0x10000000

08012138 <__math_oflow>:
 8012138:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8012140 <__math_oflow+0x8>
 801213c:	f7ff bfe0 	b.w	8012100 <xflow>
 8012140:	00000000 	.word	0x00000000
 8012144:	70000000 	.word	0x70000000

08012148 <__math_divzero>:
 8012148:	b082      	sub	sp, #8
 801214a:	2800      	cmp	r0, #0
 801214c:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8012150:	eebf 7b00 	vmov.f64	d7, #240	; 0xbf800000 -1.0
 8012154:	fe06 7b07 	vseleq.f64	d7, d6, d7
 8012158:	ed8d 7b00 	vstr	d7, [sp]
 801215c:	ed9d 0b00 	vldr	d0, [sp]
 8012160:	ed9f 7b03 	vldr	d7, [pc, #12]	; 8012170 <__math_divzero+0x28>
 8012164:	2022      	movs	r0, #34	; 0x22
 8012166:	ee80 0b07 	vdiv.f64	d0, d0, d7
 801216a:	b002      	add	sp, #8
 801216c:	f7ff bfbd 	b.w	80120ea <with_errno>
	...

08012178 <__math_invalid>:
 8012178:	eeb0 7b40 	vmov.f64	d7, d0
 801217c:	eeb4 7b47 	vcmp.f64	d7, d7
 8012180:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012184:	ee30 6b40 	vsub.f64	d6, d0, d0
 8012188:	ee86 0b06 	vdiv.f64	d0, d6, d6
 801218c:	d602      	bvs.n	8012194 <__math_invalid+0x1c>
 801218e:	2021      	movs	r0, #33	; 0x21
 8012190:	f7ff bfab 	b.w	80120ea <with_errno>
 8012194:	4770      	bx	lr

08012196 <__math_check_uflow>:
 8012196:	eeb5 0b40 	vcmp.f64	d0, #0.0
 801219a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801219e:	d102      	bne.n	80121a6 <__math_check_uflow+0x10>
 80121a0:	2022      	movs	r0, #34	; 0x22
 80121a2:	f7ff bfa2 	b.w	80120ea <with_errno>
 80121a6:	4770      	bx	lr

080121a8 <__math_check_oflow>:
 80121a8:	ed9f 6b07 	vldr	d6, [pc, #28]	; 80121c8 <__math_check_oflow+0x20>
 80121ac:	eeb0 7bc0 	vabs.f64	d7, d0
 80121b0:	eeb4 7b46 	vcmp.f64	d7, d6
 80121b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80121b8:	dd02      	ble.n	80121c0 <__math_check_oflow+0x18>
 80121ba:	2022      	movs	r0, #34	; 0x22
 80121bc:	f7ff bf95 	b.w	80120ea <with_errno>
 80121c0:	4770      	bx	lr
 80121c2:	bf00      	nop
 80121c4:	f3af 8000 	nop.w
 80121c8:	ffffffff 	.word	0xffffffff
 80121cc:	7fefffff 	.word	0x7fefffff

080121d0 <fabs>:
 80121d0:	ec51 0b10 	vmov	r0, r1, d0
 80121d4:	ee10 2a10 	vmov	r2, s0
 80121d8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80121dc:	ec43 2b10 	vmov	d0, r2, r3
 80121e0:	4770      	bx	lr
	...

080121e4 <_init>:
 80121e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80121e6:	bf00      	nop
 80121e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80121ea:	bc08      	pop	{r3}
 80121ec:	469e      	mov	lr, r3
 80121ee:	4770      	bx	lr

080121f0 <_fini>:
 80121f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80121f2:	bf00      	nop
 80121f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80121f6:	bc08      	pop	{r3}
 80121f8:	469e      	mov	lr, r3
 80121fa:	4770      	bx	lr
