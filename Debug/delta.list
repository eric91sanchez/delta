
delta.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00011774  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001d70  08011a18  08011a18  00021a18  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08013788  08013788  00030258  2**0
                  CONTENTS
  4 .ARM          00000008  08013788  08013788  00023788  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08013790  08013790  00030258  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08013790  08013790  00023790  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08013794  08013794  00023794  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000258  24000000  08013798  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000081c  24000258  080139f0  00030258  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  24000a74  080139f0  00030a74  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00030258  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001d5ad  00000000  00000000  00030286  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003677  00000000  00000000  0004d833  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000012d8  00000000  00000000  00050eb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001160  00000000  00000000  00052188  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00005762  00000000  00000000  000532e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001d4be  00000000  00000000  00058a4a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00165b26  00000000  00000000  00075f08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001dba2e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000060dc  00000000  00000000  001dba80  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000258 	.word	0x24000258
 80002bc:	00000000 	.word	0x00000000
 80002c0:	080119fc 	.word	0x080119fc

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	2400025c 	.word	0x2400025c
 80002dc:	080119fc 	.word	0x080119fc

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_drsub>:
 8000390:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000394:	e002      	b.n	800039c <__adddf3>
 8000396:	bf00      	nop

08000398 <__aeabi_dsub>:
 8000398:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800039c <__adddf3>:
 800039c:	b530      	push	{r4, r5, lr}
 800039e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003a6:	ea94 0f05 	teq	r4, r5
 80003aa:	bf08      	it	eq
 80003ac:	ea90 0f02 	teqeq	r0, r2
 80003b0:	bf1f      	itttt	ne
 80003b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003c2:	f000 80e2 	beq.w	800058a <__adddf3+0x1ee>
 80003c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003ce:	bfb8      	it	lt
 80003d0:	426d      	neglt	r5, r5
 80003d2:	dd0c      	ble.n	80003ee <__adddf3+0x52>
 80003d4:	442c      	add	r4, r5
 80003d6:	ea80 0202 	eor.w	r2, r0, r2
 80003da:	ea81 0303 	eor.w	r3, r1, r3
 80003de:	ea82 0000 	eor.w	r0, r2, r0
 80003e2:	ea83 0101 	eor.w	r1, r3, r1
 80003e6:	ea80 0202 	eor.w	r2, r0, r2
 80003ea:	ea81 0303 	eor.w	r3, r1, r3
 80003ee:	2d36      	cmp	r5, #54	; 0x36
 80003f0:	bf88      	it	hi
 80003f2:	bd30      	pophi	{r4, r5, pc}
 80003f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80003f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80003fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000400:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000404:	d002      	beq.n	800040c <__adddf3+0x70>
 8000406:	4240      	negs	r0, r0
 8000408:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800040c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000410:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000414:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000418:	d002      	beq.n	8000420 <__adddf3+0x84>
 800041a:	4252      	negs	r2, r2
 800041c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000420:	ea94 0f05 	teq	r4, r5
 8000424:	f000 80a7 	beq.w	8000576 <__adddf3+0x1da>
 8000428:	f1a4 0401 	sub.w	r4, r4, #1
 800042c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000430:	db0d      	blt.n	800044e <__adddf3+0xb2>
 8000432:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000436:	fa22 f205 	lsr.w	r2, r2, r5
 800043a:	1880      	adds	r0, r0, r2
 800043c:	f141 0100 	adc.w	r1, r1, #0
 8000440:	fa03 f20e 	lsl.w	r2, r3, lr
 8000444:	1880      	adds	r0, r0, r2
 8000446:	fa43 f305 	asr.w	r3, r3, r5
 800044a:	4159      	adcs	r1, r3
 800044c:	e00e      	b.n	800046c <__adddf3+0xd0>
 800044e:	f1a5 0520 	sub.w	r5, r5, #32
 8000452:	f10e 0e20 	add.w	lr, lr, #32
 8000456:	2a01      	cmp	r2, #1
 8000458:	fa03 fc0e 	lsl.w	ip, r3, lr
 800045c:	bf28      	it	cs
 800045e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000462:	fa43 f305 	asr.w	r3, r3, r5
 8000466:	18c0      	adds	r0, r0, r3
 8000468:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800046c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000470:	d507      	bpl.n	8000482 <__adddf3+0xe6>
 8000472:	f04f 0e00 	mov.w	lr, #0
 8000476:	f1dc 0c00 	rsbs	ip, ip, #0
 800047a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800047e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000482:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000486:	d31b      	bcc.n	80004c0 <__adddf3+0x124>
 8000488:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800048c:	d30c      	bcc.n	80004a8 <__adddf3+0x10c>
 800048e:	0849      	lsrs	r1, r1, #1
 8000490:	ea5f 0030 	movs.w	r0, r0, rrx
 8000494:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000498:	f104 0401 	add.w	r4, r4, #1
 800049c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80004a4:	f080 809a 	bcs.w	80005dc <__adddf3+0x240>
 80004a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80004ac:	bf08      	it	eq
 80004ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004b2:	f150 0000 	adcs.w	r0, r0, #0
 80004b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004ba:	ea41 0105 	orr.w	r1, r1, r5
 80004be:	bd30      	pop	{r4, r5, pc}
 80004c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004c4:	4140      	adcs	r0, r0
 80004c6:	eb41 0101 	adc.w	r1, r1, r1
 80004ca:	3c01      	subs	r4, #1
 80004cc:	bf28      	it	cs
 80004ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80004d2:	d2e9      	bcs.n	80004a8 <__adddf3+0x10c>
 80004d4:	f091 0f00 	teq	r1, #0
 80004d8:	bf04      	itt	eq
 80004da:	4601      	moveq	r1, r0
 80004dc:	2000      	moveq	r0, #0
 80004de:	fab1 f381 	clz	r3, r1
 80004e2:	bf08      	it	eq
 80004e4:	3320      	addeq	r3, #32
 80004e6:	f1a3 030b 	sub.w	r3, r3, #11
 80004ea:	f1b3 0220 	subs.w	r2, r3, #32
 80004ee:	da0c      	bge.n	800050a <__adddf3+0x16e>
 80004f0:	320c      	adds	r2, #12
 80004f2:	dd08      	ble.n	8000506 <__adddf3+0x16a>
 80004f4:	f102 0c14 	add.w	ip, r2, #20
 80004f8:	f1c2 020c 	rsb	r2, r2, #12
 80004fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000500:	fa21 f102 	lsr.w	r1, r1, r2
 8000504:	e00c      	b.n	8000520 <__adddf3+0x184>
 8000506:	f102 0214 	add.w	r2, r2, #20
 800050a:	bfd8      	it	le
 800050c:	f1c2 0c20 	rsble	ip, r2, #32
 8000510:	fa01 f102 	lsl.w	r1, r1, r2
 8000514:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000518:	bfdc      	itt	le
 800051a:	ea41 010c 	orrle.w	r1, r1, ip
 800051e:	4090      	lslle	r0, r2
 8000520:	1ae4      	subs	r4, r4, r3
 8000522:	bfa2      	ittt	ge
 8000524:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000528:	4329      	orrge	r1, r5
 800052a:	bd30      	popge	{r4, r5, pc}
 800052c:	ea6f 0404 	mvn.w	r4, r4
 8000530:	3c1f      	subs	r4, #31
 8000532:	da1c      	bge.n	800056e <__adddf3+0x1d2>
 8000534:	340c      	adds	r4, #12
 8000536:	dc0e      	bgt.n	8000556 <__adddf3+0x1ba>
 8000538:	f104 0414 	add.w	r4, r4, #20
 800053c:	f1c4 0220 	rsb	r2, r4, #32
 8000540:	fa20 f004 	lsr.w	r0, r0, r4
 8000544:	fa01 f302 	lsl.w	r3, r1, r2
 8000548:	ea40 0003 	orr.w	r0, r0, r3
 800054c:	fa21 f304 	lsr.w	r3, r1, r4
 8000550:	ea45 0103 	orr.w	r1, r5, r3
 8000554:	bd30      	pop	{r4, r5, pc}
 8000556:	f1c4 040c 	rsb	r4, r4, #12
 800055a:	f1c4 0220 	rsb	r2, r4, #32
 800055e:	fa20 f002 	lsr.w	r0, r0, r2
 8000562:	fa01 f304 	lsl.w	r3, r1, r4
 8000566:	ea40 0003 	orr.w	r0, r0, r3
 800056a:	4629      	mov	r1, r5
 800056c:	bd30      	pop	{r4, r5, pc}
 800056e:	fa21 f004 	lsr.w	r0, r1, r4
 8000572:	4629      	mov	r1, r5
 8000574:	bd30      	pop	{r4, r5, pc}
 8000576:	f094 0f00 	teq	r4, #0
 800057a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800057e:	bf06      	itte	eq
 8000580:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000584:	3401      	addeq	r4, #1
 8000586:	3d01      	subne	r5, #1
 8000588:	e74e      	b.n	8000428 <__adddf3+0x8c>
 800058a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800058e:	bf18      	it	ne
 8000590:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000594:	d029      	beq.n	80005ea <__adddf3+0x24e>
 8000596:	ea94 0f05 	teq	r4, r5
 800059a:	bf08      	it	eq
 800059c:	ea90 0f02 	teqeq	r0, r2
 80005a0:	d005      	beq.n	80005ae <__adddf3+0x212>
 80005a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80005a6:	bf04      	itt	eq
 80005a8:	4619      	moveq	r1, r3
 80005aa:	4610      	moveq	r0, r2
 80005ac:	bd30      	pop	{r4, r5, pc}
 80005ae:	ea91 0f03 	teq	r1, r3
 80005b2:	bf1e      	ittt	ne
 80005b4:	2100      	movne	r1, #0
 80005b6:	2000      	movne	r0, #0
 80005b8:	bd30      	popne	{r4, r5, pc}
 80005ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005be:	d105      	bne.n	80005cc <__adddf3+0x230>
 80005c0:	0040      	lsls	r0, r0, #1
 80005c2:	4149      	adcs	r1, r1
 80005c4:	bf28      	it	cs
 80005c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80005ca:	bd30      	pop	{r4, r5, pc}
 80005cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80005d0:	bf3c      	itt	cc
 80005d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80005d6:	bd30      	popcc	{r4, r5, pc}
 80005d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80005e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80005e4:	f04f 0000 	mov.w	r0, #0
 80005e8:	bd30      	pop	{r4, r5, pc}
 80005ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005ee:	bf1a      	itte	ne
 80005f0:	4619      	movne	r1, r3
 80005f2:	4610      	movne	r0, r2
 80005f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80005f8:	bf1c      	itt	ne
 80005fa:	460b      	movne	r3, r1
 80005fc:	4602      	movne	r2, r0
 80005fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000602:	bf06      	itte	eq
 8000604:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000608:	ea91 0f03 	teqeq	r1, r3
 800060c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000610:	bd30      	pop	{r4, r5, pc}
 8000612:	bf00      	nop

08000614 <__aeabi_ui2d>:
 8000614:	f090 0f00 	teq	r0, #0
 8000618:	bf04      	itt	eq
 800061a:	2100      	moveq	r1, #0
 800061c:	4770      	bxeq	lr
 800061e:	b530      	push	{r4, r5, lr}
 8000620:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000624:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000628:	f04f 0500 	mov.w	r5, #0
 800062c:	f04f 0100 	mov.w	r1, #0
 8000630:	e750      	b.n	80004d4 <__adddf3+0x138>
 8000632:	bf00      	nop

08000634 <__aeabi_i2d>:
 8000634:	f090 0f00 	teq	r0, #0
 8000638:	bf04      	itt	eq
 800063a:	2100      	moveq	r1, #0
 800063c:	4770      	bxeq	lr
 800063e:	b530      	push	{r4, r5, lr}
 8000640:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000644:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000648:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800064c:	bf48      	it	mi
 800064e:	4240      	negmi	r0, r0
 8000650:	f04f 0100 	mov.w	r1, #0
 8000654:	e73e      	b.n	80004d4 <__adddf3+0x138>
 8000656:	bf00      	nop

08000658 <__aeabi_f2d>:
 8000658:	0042      	lsls	r2, r0, #1
 800065a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800065e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000662:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000666:	bf1f      	itttt	ne
 8000668:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800066c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000670:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000674:	4770      	bxne	lr
 8000676:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800067a:	bf08      	it	eq
 800067c:	4770      	bxeq	lr
 800067e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000682:	bf04      	itt	eq
 8000684:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000688:	4770      	bxeq	lr
 800068a:	b530      	push	{r4, r5, lr}
 800068c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000690:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000694:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000698:	e71c      	b.n	80004d4 <__adddf3+0x138>
 800069a:	bf00      	nop

0800069c <__aeabi_ul2d>:
 800069c:	ea50 0201 	orrs.w	r2, r0, r1
 80006a0:	bf08      	it	eq
 80006a2:	4770      	bxeq	lr
 80006a4:	b530      	push	{r4, r5, lr}
 80006a6:	f04f 0500 	mov.w	r5, #0
 80006aa:	e00a      	b.n	80006c2 <__aeabi_l2d+0x16>

080006ac <__aeabi_l2d>:
 80006ac:	ea50 0201 	orrs.w	r2, r0, r1
 80006b0:	bf08      	it	eq
 80006b2:	4770      	bxeq	lr
 80006b4:	b530      	push	{r4, r5, lr}
 80006b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80006ba:	d502      	bpl.n	80006c2 <__aeabi_l2d+0x16>
 80006bc:	4240      	negs	r0, r0
 80006be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006ce:	f43f aed8 	beq.w	8000482 <__adddf3+0xe6>
 80006d2:	f04f 0203 	mov.w	r2, #3
 80006d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006da:	bf18      	it	ne
 80006dc:	3203      	addne	r2, #3
 80006de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006e2:	bf18      	it	ne
 80006e4:	3203      	addne	r2, #3
 80006e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80006ea:	f1c2 0320 	rsb	r3, r2, #32
 80006ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80006f2:	fa20 f002 	lsr.w	r0, r0, r2
 80006f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80006fa:	ea40 000e 	orr.w	r0, r0, lr
 80006fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000702:	4414      	add	r4, r2
 8000704:	e6bd      	b.n	8000482 <__adddf3+0xe6>
 8000706:	bf00      	nop

08000708 <__aeabi_uldivmod>:
 8000708:	b953      	cbnz	r3, 8000720 <__aeabi_uldivmod+0x18>
 800070a:	b94a      	cbnz	r2, 8000720 <__aeabi_uldivmod+0x18>
 800070c:	2900      	cmp	r1, #0
 800070e:	bf08      	it	eq
 8000710:	2800      	cmpeq	r0, #0
 8000712:	bf1c      	itt	ne
 8000714:	f04f 31ff 	movne.w	r1, #4294967295
 8000718:	f04f 30ff 	movne.w	r0, #4294967295
 800071c:	f000 b9ac 	b.w	8000a78 <__aeabi_idiv0>
 8000720:	f1ad 0c08 	sub.w	ip, sp, #8
 8000724:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000728:	f000 f83e 	bl	80007a8 <__udivmoddi4>
 800072c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000730:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000734:	b004      	add	sp, #16
 8000736:	4770      	bx	lr

08000738 <__aeabi_d2lz>:
 8000738:	b508      	push	{r3, lr}
 800073a:	4602      	mov	r2, r0
 800073c:	460b      	mov	r3, r1
 800073e:	ec43 2b17 	vmov	d7, r2, r3
 8000742:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8000746:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800074a:	d403      	bmi.n	8000754 <__aeabi_d2lz+0x1c>
 800074c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8000750:	f000 b80a 	b.w	8000768 <__aeabi_d2ulz>
 8000754:	eeb1 7b47 	vneg.f64	d7, d7
 8000758:	ec51 0b17 	vmov	r0, r1, d7
 800075c:	f000 f804 	bl	8000768 <__aeabi_d2ulz>
 8000760:	4240      	negs	r0, r0
 8000762:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000766:	bd08      	pop	{r3, pc}

08000768 <__aeabi_d2ulz>:
 8000768:	ed9f 6b0b 	vldr	d6, [pc, #44]	; 8000798 <__aeabi_d2ulz+0x30>
 800076c:	ec41 0b17 	vmov	d7, r0, r1
 8000770:	ed9f 5b0b 	vldr	d5, [pc, #44]	; 80007a0 <__aeabi_d2ulz+0x38>
 8000774:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000778:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 800077c:	eeb8 4b46 	vcvt.f64.u32	d4, s12
 8000780:	eea4 7b45 	vfms.f64	d7, d4, d5
 8000784:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000788:	ee16 1a10 	vmov	r1, s12
 800078c:	ee17 0a90 	vmov	r0, s15
 8000790:	4770      	bx	lr
 8000792:	bf00      	nop
 8000794:	f3af 8000 	nop.w
 8000798:	00000000 	.word	0x00000000
 800079c:	3df00000 	.word	0x3df00000
 80007a0:	00000000 	.word	0x00000000
 80007a4:	41f00000 	.word	0x41f00000

080007a8 <__udivmoddi4>:
 80007a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80007ac:	9d08      	ldr	r5, [sp, #32]
 80007ae:	4604      	mov	r4, r0
 80007b0:	468e      	mov	lr, r1
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	d14d      	bne.n	8000852 <__udivmoddi4+0xaa>
 80007b6:	428a      	cmp	r2, r1
 80007b8:	4694      	mov	ip, r2
 80007ba:	d969      	bls.n	8000890 <__udivmoddi4+0xe8>
 80007bc:	fab2 f282 	clz	r2, r2
 80007c0:	b152      	cbz	r2, 80007d8 <__udivmoddi4+0x30>
 80007c2:	fa01 f302 	lsl.w	r3, r1, r2
 80007c6:	f1c2 0120 	rsb	r1, r2, #32
 80007ca:	fa20 f101 	lsr.w	r1, r0, r1
 80007ce:	fa0c fc02 	lsl.w	ip, ip, r2
 80007d2:	ea41 0e03 	orr.w	lr, r1, r3
 80007d6:	4094      	lsls	r4, r2
 80007d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80007dc:	0c21      	lsrs	r1, r4, #16
 80007de:	fbbe f6f8 	udiv	r6, lr, r8
 80007e2:	fa1f f78c 	uxth.w	r7, ip
 80007e6:	fb08 e316 	mls	r3, r8, r6, lr
 80007ea:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80007ee:	fb06 f107 	mul.w	r1, r6, r7
 80007f2:	4299      	cmp	r1, r3
 80007f4:	d90a      	bls.n	800080c <__udivmoddi4+0x64>
 80007f6:	eb1c 0303 	adds.w	r3, ip, r3
 80007fa:	f106 30ff 	add.w	r0, r6, #4294967295
 80007fe:	f080 811f 	bcs.w	8000a40 <__udivmoddi4+0x298>
 8000802:	4299      	cmp	r1, r3
 8000804:	f240 811c 	bls.w	8000a40 <__udivmoddi4+0x298>
 8000808:	3e02      	subs	r6, #2
 800080a:	4463      	add	r3, ip
 800080c:	1a5b      	subs	r3, r3, r1
 800080e:	b2a4      	uxth	r4, r4
 8000810:	fbb3 f0f8 	udiv	r0, r3, r8
 8000814:	fb08 3310 	mls	r3, r8, r0, r3
 8000818:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800081c:	fb00 f707 	mul.w	r7, r0, r7
 8000820:	42a7      	cmp	r7, r4
 8000822:	d90a      	bls.n	800083a <__udivmoddi4+0x92>
 8000824:	eb1c 0404 	adds.w	r4, ip, r4
 8000828:	f100 33ff 	add.w	r3, r0, #4294967295
 800082c:	f080 810a 	bcs.w	8000a44 <__udivmoddi4+0x29c>
 8000830:	42a7      	cmp	r7, r4
 8000832:	f240 8107 	bls.w	8000a44 <__udivmoddi4+0x29c>
 8000836:	4464      	add	r4, ip
 8000838:	3802      	subs	r0, #2
 800083a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800083e:	1be4      	subs	r4, r4, r7
 8000840:	2600      	movs	r6, #0
 8000842:	b11d      	cbz	r5, 800084c <__udivmoddi4+0xa4>
 8000844:	40d4      	lsrs	r4, r2
 8000846:	2300      	movs	r3, #0
 8000848:	e9c5 4300 	strd	r4, r3, [r5]
 800084c:	4631      	mov	r1, r6
 800084e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000852:	428b      	cmp	r3, r1
 8000854:	d909      	bls.n	800086a <__udivmoddi4+0xc2>
 8000856:	2d00      	cmp	r5, #0
 8000858:	f000 80ef 	beq.w	8000a3a <__udivmoddi4+0x292>
 800085c:	2600      	movs	r6, #0
 800085e:	e9c5 0100 	strd	r0, r1, [r5]
 8000862:	4630      	mov	r0, r6
 8000864:	4631      	mov	r1, r6
 8000866:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800086a:	fab3 f683 	clz	r6, r3
 800086e:	2e00      	cmp	r6, #0
 8000870:	d14a      	bne.n	8000908 <__udivmoddi4+0x160>
 8000872:	428b      	cmp	r3, r1
 8000874:	d302      	bcc.n	800087c <__udivmoddi4+0xd4>
 8000876:	4282      	cmp	r2, r0
 8000878:	f200 80f9 	bhi.w	8000a6e <__udivmoddi4+0x2c6>
 800087c:	1a84      	subs	r4, r0, r2
 800087e:	eb61 0303 	sbc.w	r3, r1, r3
 8000882:	2001      	movs	r0, #1
 8000884:	469e      	mov	lr, r3
 8000886:	2d00      	cmp	r5, #0
 8000888:	d0e0      	beq.n	800084c <__udivmoddi4+0xa4>
 800088a:	e9c5 4e00 	strd	r4, lr, [r5]
 800088e:	e7dd      	b.n	800084c <__udivmoddi4+0xa4>
 8000890:	b902      	cbnz	r2, 8000894 <__udivmoddi4+0xec>
 8000892:	deff      	udf	#255	; 0xff
 8000894:	fab2 f282 	clz	r2, r2
 8000898:	2a00      	cmp	r2, #0
 800089a:	f040 8092 	bne.w	80009c2 <__udivmoddi4+0x21a>
 800089e:	eba1 010c 	sub.w	r1, r1, ip
 80008a2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80008a6:	fa1f fe8c 	uxth.w	lr, ip
 80008aa:	2601      	movs	r6, #1
 80008ac:	0c20      	lsrs	r0, r4, #16
 80008ae:	fbb1 f3f7 	udiv	r3, r1, r7
 80008b2:	fb07 1113 	mls	r1, r7, r3, r1
 80008b6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80008ba:	fb0e f003 	mul.w	r0, lr, r3
 80008be:	4288      	cmp	r0, r1
 80008c0:	d908      	bls.n	80008d4 <__udivmoddi4+0x12c>
 80008c2:	eb1c 0101 	adds.w	r1, ip, r1
 80008c6:	f103 38ff 	add.w	r8, r3, #4294967295
 80008ca:	d202      	bcs.n	80008d2 <__udivmoddi4+0x12a>
 80008cc:	4288      	cmp	r0, r1
 80008ce:	f200 80cb 	bhi.w	8000a68 <__udivmoddi4+0x2c0>
 80008d2:	4643      	mov	r3, r8
 80008d4:	1a09      	subs	r1, r1, r0
 80008d6:	b2a4      	uxth	r4, r4
 80008d8:	fbb1 f0f7 	udiv	r0, r1, r7
 80008dc:	fb07 1110 	mls	r1, r7, r0, r1
 80008e0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80008e4:	fb0e fe00 	mul.w	lr, lr, r0
 80008e8:	45a6      	cmp	lr, r4
 80008ea:	d908      	bls.n	80008fe <__udivmoddi4+0x156>
 80008ec:	eb1c 0404 	adds.w	r4, ip, r4
 80008f0:	f100 31ff 	add.w	r1, r0, #4294967295
 80008f4:	d202      	bcs.n	80008fc <__udivmoddi4+0x154>
 80008f6:	45a6      	cmp	lr, r4
 80008f8:	f200 80bb 	bhi.w	8000a72 <__udivmoddi4+0x2ca>
 80008fc:	4608      	mov	r0, r1
 80008fe:	eba4 040e 	sub.w	r4, r4, lr
 8000902:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000906:	e79c      	b.n	8000842 <__udivmoddi4+0x9a>
 8000908:	f1c6 0720 	rsb	r7, r6, #32
 800090c:	40b3      	lsls	r3, r6
 800090e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000912:	ea4c 0c03 	orr.w	ip, ip, r3
 8000916:	fa20 f407 	lsr.w	r4, r0, r7
 800091a:	fa01 f306 	lsl.w	r3, r1, r6
 800091e:	431c      	orrs	r4, r3
 8000920:	40f9      	lsrs	r1, r7
 8000922:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000926:	fa00 f306 	lsl.w	r3, r0, r6
 800092a:	fbb1 f8f9 	udiv	r8, r1, r9
 800092e:	0c20      	lsrs	r0, r4, #16
 8000930:	fa1f fe8c 	uxth.w	lr, ip
 8000934:	fb09 1118 	mls	r1, r9, r8, r1
 8000938:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800093c:	fb08 f00e 	mul.w	r0, r8, lr
 8000940:	4288      	cmp	r0, r1
 8000942:	fa02 f206 	lsl.w	r2, r2, r6
 8000946:	d90b      	bls.n	8000960 <__udivmoddi4+0x1b8>
 8000948:	eb1c 0101 	adds.w	r1, ip, r1
 800094c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000950:	f080 8088 	bcs.w	8000a64 <__udivmoddi4+0x2bc>
 8000954:	4288      	cmp	r0, r1
 8000956:	f240 8085 	bls.w	8000a64 <__udivmoddi4+0x2bc>
 800095a:	f1a8 0802 	sub.w	r8, r8, #2
 800095e:	4461      	add	r1, ip
 8000960:	1a09      	subs	r1, r1, r0
 8000962:	b2a4      	uxth	r4, r4
 8000964:	fbb1 f0f9 	udiv	r0, r1, r9
 8000968:	fb09 1110 	mls	r1, r9, r0, r1
 800096c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000970:	fb00 fe0e 	mul.w	lr, r0, lr
 8000974:	458e      	cmp	lr, r1
 8000976:	d908      	bls.n	800098a <__udivmoddi4+0x1e2>
 8000978:	eb1c 0101 	adds.w	r1, ip, r1
 800097c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000980:	d26c      	bcs.n	8000a5c <__udivmoddi4+0x2b4>
 8000982:	458e      	cmp	lr, r1
 8000984:	d96a      	bls.n	8000a5c <__udivmoddi4+0x2b4>
 8000986:	3802      	subs	r0, #2
 8000988:	4461      	add	r1, ip
 800098a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800098e:	fba0 9402 	umull	r9, r4, r0, r2
 8000992:	eba1 010e 	sub.w	r1, r1, lr
 8000996:	42a1      	cmp	r1, r4
 8000998:	46c8      	mov	r8, r9
 800099a:	46a6      	mov	lr, r4
 800099c:	d356      	bcc.n	8000a4c <__udivmoddi4+0x2a4>
 800099e:	d053      	beq.n	8000a48 <__udivmoddi4+0x2a0>
 80009a0:	b15d      	cbz	r5, 80009ba <__udivmoddi4+0x212>
 80009a2:	ebb3 0208 	subs.w	r2, r3, r8
 80009a6:	eb61 010e 	sbc.w	r1, r1, lr
 80009aa:	fa01 f707 	lsl.w	r7, r1, r7
 80009ae:	fa22 f306 	lsr.w	r3, r2, r6
 80009b2:	40f1      	lsrs	r1, r6
 80009b4:	431f      	orrs	r7, r3
 80009b6:	e9c5 7100 	strd	r7, r1, [r5]
 80009ba:	2600      	movs	r6, #0
 80009bc:	4631      	mov	r1, r6
 80009be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80009c2:	f1c2 0320 	rsb	r3, r2, #32
 80009c6:	40d8      	lsrs	r0, r3
 80009c8:	fa0c fc02 	lsl.w	ip, ip, r2
 80009cc:	fa21 f303 	lsr.w	r3, r1, r3
 80009d0:	4091      	lsls	r1, r2
 80009d2:	4301      	orrs	r1, r0
 80009d4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80009d8:	fa1f fe8c 	uxth.w	lr, ip
 80009dc:	fbb3 f0f7 	udiv	r0, r3, r7
 80009e0:	fb07 3610 	mls	r6, r7, r0, r3
 80009e4:	0c0b      	lsrs	r3, r1, #16
 80009e6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80009ea:	fb00 f60e 	mul.w	r6, r0, lr
 80009ee:	429e      	cmp	r6, r3
 80009f0:	fa04 f402 	lsl.w	r4, r4, r2
 80009f4:	d908      	bls.n	8000a08 <__udivmoddi4+0x260>
 80009f6:	eb1c 0303 	adds.w	r3, ip, r3
 80009fa:	f100 38ff 	add.w	r8, r0, #4294967295
 80009fe:	d22f      	bcs.n	8000a60 <__udivmoddi4+0x2b8>
 8000a00:	429e      	cmp	r6, r3
 8000a02:	d92d      	bls.n	8000a60 <__udivmoddi4+0x2b8>
 8000a04:	3802      	subs	r0, #2
 8000a06:	4463      	add	r3, ip
 8000a08:	1b9b      	subs	r3, r3, r6
 8000a0a:	b289      	uxth	r1, r1
 8000a0c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000a10:	fb07 3316 	mls	r3, r7, r6, r3
 8000a14:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000a18:	fb06 f30e 	mul.w	r3, r6, lr
 8000a1c:	428b      	cmp	r3, r1
 8000a1e:	d908      	bls.n	8000a32 <__udivmoddi4+0x28a>
 8000a20:	eb1c 0101 	adds.w	r1, ip, r1
 8000a24:	f106 38ff 	add.w	r8, r6, #4294967295
 8000a28:	d216      	bcs.n	8000a58 <__udivmoddi4+0x2b0>
 8000a2a:	428b      	cmp	r3, r1
 8000a2c:	d914      	bls.n	8000a58 <__udivmoddi4+0x2b0>
 8000a2e:	3e02      	subs	r6, #2
 8000a30:	4461      	add	r1, ip
 8000a32:	1ac9      	subs	r1, r1, r3
 8000a34:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000a38:	e738      	b.n	80008ac <__udivmoddi4+0x104>
 8000a3a:	462e      	mov	r6, r5
 8000a3c:	4628      	mov	r0, r5
 8000a3e:	e705      	b.n	800084c <__udivmoddi4+0xa4>
 8000a40:	4606      	mov	r6, r0
 8000a42:	e6e3      	b.n	800080c <__udivmoddi4+0x64>
 8000a44:	4618      	mov	r0, r3
 8000a46:	e6f8      	b.n	800083a <__udivmoddi4+0x92>
 8000a48:	454b      	cmp	r3, r9
 8000a4a:	d2a9      	bcs.n	80009a0 <__udivmoddi4+0x1f8>
 8000a4c:	ebb9 0802 	subs.w	r8, r9, r2
 8000a50:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000a54:	3801      	subs	r0, #1
 8000a56:	e7a3      	b.n	80009a0 <__udivmoddi4+0x1f8>
 8000a58:	4646      	mov	r6, r8
 8000a5a:	e7ea      	b.n	8000a32 <__udivmoddi4+0x28a>
 8000a5c:	4620      	mov	r0, r4
 8000a5e:	e794      	b.n	800098a <__udivmoddi4+0x1e2>
 8000a60:	4640      	mov	r0, r8
 8000a62:	e7d1      	b.n	8000a08 <__udivmoddi4+0x260>
 8000a64:	46d0      	mov	r8, sl
 8000a66:	e77b      	b.n	8000960 <__udivmoddi4+0x1b8>
 8000a68:	3b02      	subs	r3, #2
 8000a6a:	4461      	add	r1, ip
 8000a6c:	e732      	b.n	80008d4 <__udivmoddi4+0x12c>
 8000a6e:	4630      	mov	r0, r6
 8000a70:	e709      	b.n	8000886 <__udivmoddi4+0xde>
 8000a72:	4464      	add	r4, ip
 8000a74:	3802      	subs	r0, #2
 8000a76:	e742      	b.n	80008fe <__udivmoddi4+0x156>

08000a78 <__aeabi_idiv0>:
 8000a78:	4770      	bx	lr
 8000a7a:	bf00      	nop

08000a7c <MX_GPIO_Init>:
     PH1-OSC_OUT (PH1)   ------> RCC_OSC_OUT
     PA13 (JTMS/SWDIO)   ------> DEBUG_JTMS-SWDIO
     PA14 (JTCK/SWCLK)   ------> DEBUG_JTCK-SWCLK
*/
void MX_GPIO_Init(void)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	b08e      	sub	sp, #56	; 0x38
 8000a80:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a82:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a86:	2200      	movs	r2, #0
 8000a88:	601a      	str	r2, [r3, #0]
 8000a8a:	605a      	str	r2, [r3, #4]
 8000a8c:	609a      	str	r2, [r3, #8]
 8000a8e:	60da      	str	r2, [r3, #12]
 8000a90:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000a92:	4b96      	ldr	r3, [pc, #600]	; (8000cec <MX_GPIO_Init+0x270>)
 8000a94:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a98:	4a94      	ldr	r2, [pc, #592]	; (8000cec <MX_GPIO_Init+0x270>)
 8000a9a:	f043 0310 	orr.w	r3, r3, #16
 8000a9e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000aa2:	4b92      	ldr	r3, [pc, #584]	; (8000cec <MX_GPIO_Init+0x270>)
 8000aa4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000aa8:	f003 0310 	and.w	r3, r3, #16
 8000aac:	623b      	str	r3, [r7, #32]
 8000aae:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ab0:	4b8e      	ldr	r3, [pc, #568]	; (8000cec <MX_GPIO_Init+0x270>)
 8000ab2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ab6:	4a8d      	ldr	r2, [pc, #564]	; (8000cec <MX_GPIO_Init+0x270>)
 8000ab8:	f043 0304 	orr.w	r3, r3, #4
 8000abc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ac0:	4b8a      	ldr	r3, [pc, #552]	; (8000cec <MX_GPIO_Init+0x270>)
 8000ac2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ac6:	f003 0304 	and.w	r3, r3, #4
 8000aca:	61fb      	str	r3, [r7, #28]
 8000acc:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000ace:	4b87      	ldr	r3, [pc, #540]	; (8000cec <MX_GPIO_Init+0x270>)
 8000ad0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ad4:	4a85      	ldr	r2, [pc, #532]	; (8000cec <MX_GPIO_Init+0x270>)
 8000ad6:	f043 0320 	orr.w	r3, r3, #32
 8000ada:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ade:	4b83      	ldr	r3, [pc, #524]	; (8000cec <MX_GPIO_Init+0x270>)
 8000ae0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ae4:	f003 0320 	and.w	r3, r3, #32
 8000ae8:	61bb      	str	r3, [r7, #24]
 8000aea:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000aec:	4b7f      	ldr	r3, [pc, #508]	; (8000cec <MX_GPIO_Init+0x270>)
 8000aee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000af2:	4a7e      	ldr	r2, [pc, #504]	; (8000cec <MX_GPIO_Init+0x270>)
 8000af4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000af8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000afc:	4b7b      	ldr	r3, [pc, #492]	; (8000cec <MX_GPIO_Init+0x270>)
 8000afe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b06:	617b      	str	r3, [r7, #20]
 8000b08:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b0a:	4b78      	ldr	r3, [pc, #480]	; (8000cec <MX_GPIO_Init+0x270>)
 8000b0c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b10:	4a76      	ldr	r2, [pc, #472]	; (8000cec <MX_GPIO_Init+0x270>)
 8000b12:	f043 0301 	orr.w	r3, r3, #1
 8000b16:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b1a:	4b74      	ldr	r3, [pc, #464]	; (8000cec <MX_GPIO_Init+0x270>)
 8000b1c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b20:	f003 0301 	and.w	r3, r3, #1
 8000b24:	613b      	str	r3, [r7, #16]
 8000b26:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b28:	4b70      	ldr	r3, [pc, #448]	; (8000cec <MX_GPIO_Init+0x270>)
 8000b2a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b2e:	4a6f      	ldr	r2, [pc, #444]	; (8000cec <MX_GPIO_Init+0x270>)
 8000b30:	f043 0302 	orr.w	r3, r3, #2
 8000b34:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b38:	4b6c      	ldr	r3, [pc, #432]	; (8000cec <MX_GPIO_Init+0x270>)
 8000b3a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b3e:	f003 0302 	and.w	r3, r3, #2
 8000b42:	60fb      	str	r3, [r7, #12]
 8000b44:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b46:	4b69      	ldr	r3, [pc, #420]	; (8000cec <MX_GPIO_Init+0x270>)
 8000b48:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b4c:	4a67      	ldr	r2, [pc, #412]	; (8000cec <MX_GPIO_Init+0x270>)
 8000b4e:	f043 0308 	orr.w	r3, r3, #8
 8000b52:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b56:	4b65      	ldr	r3, [pc, #404]	; (8000cec <MX_GPIO_Init+0x270>)
 8000b58:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b5c:	f003 0308 	and.w	r3, r3, #8
 8000b60:	60bb      	str	r3, [r7, #8]
 8000b62:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000b64:	4b61      	ldr	r3, [pc, #388]	; (8000cec <MX_GPIO_Init+0x270>)
 8000b66:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b6a:	4a60      	ldr	r2, [pc, #384]	; (8000cec <MX_GPIO_Init+0x270>)
 8000b6c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000b70:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b74:	4b5d      	ldr	r3, [pc, #372]	; (8000cec <MX_GPIO_Init+0x270>)
 8000b76:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000b7e:	607b      	str	r3, [r7, #4]
 8000b80:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(relayDrivers_GPIO_Port, relayDrivers_Pin, GPIO_PIN_RESET);
 8000b82:	2200      	movs	r2, #0
 8000b84:	2108      	movs	r1, #8
 8000b86:	485a      	ldr	r0, [pc, #360]	; (8000cf0 <MX_GPIO_Init+0x274>)
 8000b88:	f006 fda0 	bl	80076cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, S_DirPaP1_Pin|S_DirPaP2_Pin|S_DirPaP3_Pin, GPIO_PIN_RESET);
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8000b92:	4858      	ldr	r0, [pc, #352]	; (8000cf4 <MX_GPIO_Init+0x278>)
 8000b94:	f006 fd9a 	bl	80076cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, S_Enable_1_Pin|S_Enable_2_Pin|S_Enable_3_Pin, GPIO_PIN_RESET);
 8000b98:	2200      	movs	r2, #0
 8000b9a:	2170      	movs	r1, #112	; 0x70
 8000b9c:	4856      	ldr	r0, [pc, #344]	; (8000cf8 <MX_GPIO_Init+0x27c>)
 8000b9e:	f006 fd95 	bl	80076cc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin
                           PEPin PEPin */
  GPIO_InitStruct.Pin = E_EndStop2_Sup_Pin|E_EndStop2_Inf_Pin|E_EndStop3_Sup_Pin|E_EndStop3_Inf_Pin
 8000ba2:	23bd      	movs	r3, #189	; 0xbd
 8000ba4:	627b      	str	r3, [r7, #36]	; 0x24
                          |faultDriver1_Pin|E_EndStop1_Sup_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000ba6:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000baa:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bac:	2300      	movs	r3, #0
 8000bae:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000bb0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bb4:	4619      	mov	r1, r3
 8000bb6:	4851      	ldr	r0, [pc, #324]	; (8000cfc <MX_GPIO_Init+0x280>)
 8000bb8:	f006 fbc0 	bl	800733c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BUTTON_Pin;
 8000bbc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000bc0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000bc2:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000bc6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000bc8:	2302      	movs	r3, #2
 8000bca:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(BUTTON_GPIO_Port, &GPIO_InitStruct);
 8000bcc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bd0:	4619      	mov	r1, r3
 8000bd2:	4848      	ldr	r0, [pc, #288]	; (8000cf4 <MX_GPIO_Init+0x278>)
 8000bd4:	f006 fbb2 	bl	800733c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = relayDrivers_Pin;
 8000bd8:	2308      	movs	r3, #8
 8000bda:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bdc:	2301      	movs	r3, #1
 8000bde:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be0:	2300      	movs	r3, #0
 8000be2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000be4:	2300      	movs	r3, #0
 8000be6:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(relayDrivers_GPIO_Port, &GPIO_InitStruct);
 8000be8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bec:	4619      	mov	r1, r3
 8000bee:	4840      	ldr	r0, [pc, #256]	; (8000cf0 <MX_GPIO_Init+0x274>)
 8000bf0:	f006 fba4 	bl	800733c <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = faultDriver2_Pin|faultDriver3_Pin;
 8000bf4:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8000bf8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000bfa:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000bfe:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c00:	2300      	movs	r3, #0
 8000c02:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c04:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c08:	4619      	mov	r1, r3
 8000c0a:	483b      	ldr	r0, [pc, #236]	; (8000cf8 <MX_GPIO_Init+0x27c>)
 8000c0c:	f006 fb96 	bl	800733c <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = S_DirPaP1_Pin|S_DirPaP2_Pin|S_DirPaP3_Pin;
 8000c10:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8000c14:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c16:	2301      	movs	r3, #1
 8000c18:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c1e:	2300      	movs	r3, #0
 8000c20:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c22:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c26:	4619      	mov	r1, r3
 8000c28:	4832      	ldr	r0, [pc, #200]	; (8000cf4 <MX_GPIO_Init+0x278>)
 8000c2a:	f006 fb87 	bl	800733c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = S_Enable_1_Pin;
 8000c2e:	2310      	movs	r3, #16
 8000c30:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c32:	2301      	movs	r3, #1
 8000c34:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c36:	2300      	movs	r3, #0
 8000c38:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(S_Enable_1_GPIO_Port, &GPIO_InitStruct);
 8000c3e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c42:	4619      	mov	r1, r3
 8000c44:	482c      	ldr	r0, [pc, #176]	; (8000cf8 <MX_GPIO_Init+0x27c>)
 8000c46:	f006 fb79 	bl	800733c <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = S_Enable_2_Pin|S_Enable_3_Pin;
 8000c4a:	2360      	movs	r3, #96	; 0x60
 8000c4c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000c4e:	2311      	movs	r3, #17
 8000c50:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c52:	2300      	movs	r3, #0
 8000c54:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c56:	2300      	movs	r3, #0
 8000c58:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c5a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c5e:	4619      	mov	r1, r3
 8000c60:	4825      	ldr	r0, [pc, #148]	; (8000cf8 <MX_GPIO_Init+0x27c>)
 8000c62:	f006 fb6b 	bl	800733c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = E_EndStop1_Inf_Pin;
 8000c66:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c6a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000c6c:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000c70:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c72:	2300      	movs	r3, #0
 8000c74:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(E_EndStop1_Inf_GPIO_Port, &GPIO_InitStruct);
 8000c76:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c7a:	4619      	mov	r1, r3
 8000c7c:	4820      	ldr	r0, [pc, #128]	; (8000d00 <MX_GPIO_Init+0x284>)
 8000c7e:	f006 fb5d 	bl	800733c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 1, 0);
 8000c82:	2200      	movs	r2, #0
 8000c84:	2101      	movs	r1, #1
 8000c86:	2006      	movs	r0, #6
 8000c88:	f005 fdb1 	bl	80067ee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000c8c:	2006      	movs	r0, #6
 8000c8e:	f005 fdc8 	bl	8006822 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 1, 0);
 8000c92:	2200      	movs	r2, #0
 8000c94:	2101      	movs	r1, #1
 8000c96:	2008      	movs	r0, #8
 8000c98:	f005 fda9 	bl	80067ee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8000c9c:	2008      	movs	r0, #8
 8000c9e:	f005 fdc0 	bl	8006822 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 1, 0);
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	2101      	movs	r1, #1
 8000ca6:	2009      	movs	r0, #9
 8000ca8:	f005 fda1 	bl	80067ee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8000cac:	2009      	movs	r0, #9
 8000cae:	f005 fdb8 	bl	8006822 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 1, 0);
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	2101      	movs	r1, #1
 8000cb6:	200a      	movs	r0, #10
 8000cb8:	f005 fd99 	bl	80067ee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8000cbc:	200a      	movs	r0, #10
 8000cbe:	f005 fdb0 	bl	8006822 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 1, 0);
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	2101      	movs	r1, #1
 8000cc6:	2017      	movs	r0, #23
 8000cc8:	f005 fd91 	bl	80067ee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000ccc:	2017      	movs	r0, #23
 8000cce:	f005 fda8 	bl	8006822 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 1, 0);
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	2101      	movs	r1, #1
 8000cd6:	2028      	movs	r0, #40	; 0x28
 8000cd8:	f005 fd89 	bl	80067ee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000cdc:	2028      	movs	r0, #40	; 0x28
 8000cde:	f005 fda0 	bl	8006822 <HAL_NVIC_EnableIRQ>

}
 8000ce2:	bf00      	nop
 8000ce4:	3738      	adds	r7, #56	; 0x38
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	bd80      	pop	{r7, pc}
 8000cea:	bf00      	nop
 8000cec:	58024400 	.word	0x58024400
 8000cf0:	58021400 	.word	0x58021400
 8000cf4:	58020800 	.word	0x58020800
 8000cf8:	58020c00 	.word	0x58020c00
 8000cfc:	58021000 	.word	0x58021000
 8000d00:	58021800 	.word	0x58021800
 8000d04:	00000000 	.word	0x00000000

08000d08 <homing>:

double rpm = 1.0;  //Valor experimental. Se encontro que es una buena velocidad para la tarea de homing
bool homAprox, homStart;


void homing(void) {
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	af00      	add	r7, sp, #0

	homAprox = true;
 8000d0c:	4bb0      	ldr	r3, [pc, #704]	; (8000fd0 <homing+0x2c8>)
 8000d0e:	2201      	movs	r2, #1
 8000d10:	701a      	strb	r2, [r3, #0]
	homStart = true;
 8000d12:	4bb0      	ldr	r3, [pc, #704]	; (8000fd4 <homing+0x2cc>)
 8000d14:	2201      	movs	r2, #1
 8000d16:	701a      	strb	r2, [r3, #0]

    motor1.hom = false;
 8000d18:	4baf      	ldr	r3, [pc, #700]	; (8000fd8 <homing+0x2d0>)
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	761a      	strb	r2, [r3, #24]
    motor2.hom = false;
 8000d1e:	4baf      	ldr	r3, [pc, #700]	; (8000fdc <homing+0x2d4>)
 8000d20:	2200      	movs	r2, #0
 8000d22:	761a      	strb	r2, [r3, #24]
    motor3.hom = false;
 8000d24:	4bae      	ldr	r3, [pc, #696]	; (8000fe0 <homing+0x2d8>)
 8000d26:	2200      	movs	r2, #0
 8000d28:	761a      	strb	r2, [r3, #24]

    //Establecemos la direccion en sentido horario (VISTA FRONTAL DEL MOTOR)
    positive_Dir_MOTOR_1;
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000d30:	48ac      	ldr	r0, [pc, #688]	; (8000fe4 <homing+0x2dc>)
 8000d32:	f006 fccb 	bl	80076cc <HAL_GPIO_WritePin>
	positive_Dir_MOTOR_2;
 8000d36:	2200      	movs	r2, #0
 8000d38:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000d3c:	48a9      	ldr	r0, [pc, #676]	; (8000fe4 <homing+0x2dc>)
 8000d3e:	f006 fcc5 	bl	80076cc <HAL_GPIO_WritePin>
	positive_Dir_MOTOR_3;
 8000d42:	2200      	movs	r2, #0
 8000d44:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000d48:	48a6      	ldr	r0, [pc, #664]	; (8000fe4 <homing+0x2dc>)
 8000d4a:	f006 fcbf 	bl	80076cc <HAL_GPIO_WritePin>

	HAL_NVIC_DisableIRQ(EXTI0_IRQn);	//Apago interrupcion EndStop 1 Superior
 8000d4e:	2006      	movs	r0, #6
 8000d50:	f005 fd75 	bl	800683e <HAL_NVIC_DisableIRQ>
	HAL_NVIC_DisableIRQ(EXTI1_IRQn);	//Apago interrupcion EndStop 1 Inferior
 8000d54:	2007      	movs	r0, #7
 8000d56:	f005 fd72 	bl	800683e <HAL_NVIC_DisableIRQ>
	HAL_NVIC_DisableIRQ(EXTI2_IRQn);	//Apago interrupcion EndStop 2 Superior
 8000d5a:	2008      	movs	r0, #8
 8000d5c:	f005 fd6f 	bl	800683e <HAL_NVIC_DisableIRQ>
	HAL_NVIC_DisableIRQ(EXTI3_IRQn);	//Apago interrupcion EndStop 2 Inferior
 8000d60:	2009      	movs	r0, #9
 8000d62:	f005 fd6c 	bl	800683e <HAL_NVIC_DisableIRQ>
	HAL_NVIC_DisableIRQ(EXTI4_IRQn);	//Apago interrupcion EndStop 3 Superior
 8000d66:	200a      	movs	r0, #10
 8000d68:	f005 fd69 	bl	800683e <HAL_NVIC_DisableIRQ>
	HAL_NVIC_DisableIRQ(EXTI9_5_IRQn);	//Apago interrupcion EndStop 3 Inferior
 8000d6c:	2017      	movs	r0, #23
 8000d6e:	f005 fd66 	bl	800683e <HAL_NVIC_DisableIRQ>
	HAL_NVIC_DisableIRQ(EXTI15_10_IRQn); //Apago interrupcion faultDriver
 8000d72:	2028      	movs	r0, #40	; 0x28
 8000d74:	f005 fd63 	bl	800683e <HAL_NVIC_DisableIRQ>


    //Me aseguro que los motores esten detenidos

	Stop_PWM_MOTOR_1;
 8000d78:	2100      	movs	r1, #0
 8000d7a:	489b      	ldr	r0, [pc, #620]	; (8000fe8 <homing+0x2e0>)
 8000d7c:	f009 fb3c 	bl	800a3f8 <HAL_TIM_PWM_Stop>
	Stop_PWM_MOTOR_2;
 8000d80:	2100      	movs	r1, #0
 8000d82:	489a      	ldr	r0, [pc, #616]	; (8000fec <homing+0x2e4>)
 8000d84:	f009 fb38 	bl	800a3f8 <HAL_TIM_PWM_Stop>
	Stop_PWM_MOTOR_3;
 8000d88:	2100      	movs	r1, #0
 8000d8a:	4899      	ldr	r0, [pc, #612]	; (8000ff0 <homing+0x2e8>)
 8000d8c:	f009 fb34 	bl	800a3f8 <HAL_TIM_PWM_Stop>

	//Escritura del registro ARR
	__HAL_TIM_SET_AUTORELOAD(&htim12,COUNTERPERIOD(rpm));
 8000d90:	4b98      	ldr	r3, [pc, #608]	; (8000ff4 <homing+0x2ec>)
 8000d92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d94:	ee07 3a90 	vmov	s15, r3
 8000d98:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8000d9c:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8000da0:	ee37 7b06 	vadd.f64	d7, d7, d6
 8000da4:	ed9f 5b84 	vldr	d5, [pc, #528]	; 8000fb8 <homing+0x2b0>
 8000da8:	ee85 6b07 	vdiv.f64	d6, d5, d7
 8000dac:	4b92      	ldr	r3, [pc, #584]	; (8000ff8 <homing+0x2f0>)
 8000dae:	ed93 7b00 	vldr	d7, [r3]
 8000db2:	ed9f 5b83 	vldr	d5, [pc, #524]	; 8000fc0 <homing+0x2b8>
 8000db6:	ee27 5b05 	vmul.f64	d5, d7, d5
 8000dba:	ed9f 4b83 	vldr	d4, [pc, #524]	; 8000fc8 <homing+0x2c0>
 8000dbe:	ee84 7b05 	vdiv.f64	d7, d4, d5
 8000dc2:	ee26 7b07 	vmul.f64	d7, d6, d7
 8000dc6:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8000dca:	ee37 7b46 	vsub.f64	d7, d7, d6
 8000dce:	4b86      	ldr	r3, [pc, #536]	; (8000fe8 <homing+0x2e0>)
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000dd6:	ee17 2a90 	vmov	r2, s15
 8000dda:	62da      	str	r2, [r3, #44]	; 0x2c
 8000ddc:	4b85      	ldr	r3, [pc, #532]	; (8000ff4 <homing+0x2ec>)
 8000dde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000de0:	ee07 3a90 	vmov	s15, r3
 8000de4:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8000de8:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8000dec:	ee37 7b06 	vadd.f64	d7, d7, d6
 8000df0:	ed9f 5b71 	vldr	d5, [pc, #452]	; 8000fb8 <homing+0x2b0>
 8000df4:	ee85 6b07 	vdiv.f64	d6, d5, d7
 8000df8:	4b7f      	ldr	r3, [pc, #508]	; (8000ff8 <homing+0x2f0>)
 8000dfa:	ed93 7b00 	vldr	d7, [r3]
 8000dfe:	ed9f 5b70 	vldr	d5, [pc, #448]	; 8000fc0 <homing+0x2b8>
 8000e02:	ee27 5b05 	vmul.f64	d5, d7, d5
 8000e06:	ed9f 4b70 	vldr	d4, [pc, #448]	; 8000fc8 <homing+0x2c0>
 8000e0a:	ee84 7b05 	vdiv.f64	d7, d4, d5
 8000e0e:	ee26 7b07 	vmul.f64	d7, d6, d7
 8000e12:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8000e16:	ee37 7b46 	vsub.f64	d7, d7, d6
 8000e1a:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000e1e:	ee17 2a90 	vmov	r2, s15
 8000e22:	4b71      	ldr	r3, [pc, #452]	; (8000fe8 <homing+0x2e0>)
 8000e24:	60da      	str	r2, [r3, #12]
	__HAL_TIM_SET_AUTORELOAD(&htim13,COUNTERPERIOD(rpm));
 8000e26:	4b73      	ldr	r3, [pc, #460]	; (8000ff4 <homing+0x2ec>)
 8000e28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e2a:	ee07 3a90 	vmov	s15, r3
 8000e2e:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8000e32:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8000e36:	ee37 7b06 	vadd.f64	d7, d7, d6
 8000e3a:	ed9f 5b5f 	vldr	d5, [pc, #380]	; 8000fb8 <homing+0x2b0>
 8000e3e:	ee85 6b07 	vdiv.f64	d6, d5, d7
 8000e42:	4b6d      	ldr	r3, [pc, #436]	; (8000ff8 <homing+0x2f0>)
 8000e44:	ed93 7b00 	vldr	d7, [r3]
 8000e48:	ed9f 5b5d 	vldr	d5, [pc, #372]	; 8000fc0 <homing+0x2b8>
 8000e4c:	ee27 5b05 	vmul.f64	d5, d7, d5
 8000e50:	ed9f 4b5d 	vldr	d4, [pc, #372]	; 8000fc8 <homing+0x2c0>
 8000e54:	ee84 7b05 	vdiv.f64	d7, d4, d5
 8000e58:	ee26 7b07 	vmul.f64	d7, d6, d7
 8000e5c:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8000e60:	ee37 7b46 	vsub.f64	d7, d7, d6
 8000e64:	4b61      	ldr	r3, [pc, #388]	; (8000fec <homing+0x2e4>)
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000e6c:	ee17 2a90 	vmov	r2, s15
 8000e70:	62da      	str	r2, [r3, #44]	; 0x2c
 8000e72:	4b60      	ldr	r3, [pc, #384]	; (8000ff4 <homing+0x2ec>)
 8000e74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e76:	ee07 3a90 	vmov	s15, r3
 8000e7a:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8000e7e:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8000e82:	ee37 7b06 	vadd.f64	d7, d7, d6
 8000e86:	ed9f 5b4c 	vldr	d5, [pc, #304]	; 8000fb8 <homing+0x2b0>
 8000e8a:	ee85 6b07 	vdiv.f64	d6, d5, d7
 8000e8e:	4b5a      	ldr	r3, [pc, #360]	; (8000ff8 <homing+0x2f0>)
 8000e90:	ed93 7b00 	vldr	d7, [r3]
 8000e94:	ed9f 5b4a 	vldr	d5, [pc, #296]	; 8000fc0 <homing+0x2b8>
 8000e98:	ee27 5b05 	vmul.f64	d5, d7, d5
 8000e9c:	ed9f 4b4a 	vldr	d4, [pc, #296]	; 8000fc8 <homing+0x2c0>
 8000ea0:	ee84 7b05 	vdiv.f64	d7, d4, d5
 8000ea4:	ee26 7b07 	vmul.f64	d7, d6, d7
 8000ea8:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8000eac:	ee37 7b46 	vsub.f64	d7, d7, d6
 8000eb0:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000eb4:	ee17 2a90 	vmov	r2, s15
 8000eb8:	4b4c      	ldr	r3, [pc, #304]	; (8000fec <homing+0x2e4>)
 8000eba:	60da      	str	r2, [r3, #12]
	__HAL_TIM_SET_AUTORELOAD(&htim14,COUNTERPERIOD(rpm));
 8000ebc:	4b4d      	ldr	r3, [pc, #308]	; (8000ff4 <homing+0x2ec>)
 8000ebe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ec0:	ee07 3a90 	vmov	s15, r3
 8000ec4:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8000ec8:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8000ecc:	ee37 7b06 	vadd.f64	d7, d7, d6
 8000ed0:	ed9f 5b39 	vldr	d5, [pc, #228]	; 8000fb8 <homing+0x2b0>
 8000ed4:	ee85 6b07 	vdiv.f64	d6, d5, d7
 8000ed8:	4b47      	ldr	r3, [pc, #284]	; (8000ff8 <homing+0x2f0>)
 8000eda:	ed93 7b00 	vldr	d7, [r3]
 8000ede:	ed9f 5b38 	vldr	d5, [pc, #224]	; 8000fc0 <homing+0x2b8>
 8000ee2:	ee27 5b05 	vmul.f64	d5, d7, d5
 8000ee6:	ed9f 4b38 	vldr	d4, [pc, #224]	; 8000fc8 <homing+0x2c0>
 8000eea:	ee84 7b05 	vdiv.f64	d7, d4, d5
 8000eee:	ee26 7b07 	vmul.f64	d7, d6, d7
 8000ef2:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8000ef6:	ee37 7b46 	vsub.f64	d7, d7, d6
 8000efa:	4b3d      	ldr	r3, [pc, #244]	; (8000ff0 <homing+0x2e8>)
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000f02:	ee17 2a90 	vmov	r2, s15
 8000f06:	62da      	str	r2, [r3, #44]	; 0x2c
 8000f08:	4b3a      	ldr	r3, [pc, #232]	; (8000ff4 <homing+0x2ec>)
 8000f0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f0c:	ee07 3a90 	vmov	s15, r3
 8000f10:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8000f14:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8000f18:	ee37 7b06 	vadd.f64	d7, d7, d6
 8000f1c:	ed9f 5b26 	vldr	d5, [pc, #152]	; 8000fb8 <homing+0x2b0>
 8000f20:	ee85 6b07 	vdiv.f64	d6, d5, d7
 8000f24:	4b34      	ldr	r3, [pc, #208]	; (8000ff8 <homing+0x2f0>)
 8000f26:	ed93 7b00 	vldr	d7, [r3]
 8000f2a:	ed9f 5b25 	vldr	d5, [pc, #148]	; 8000fc0 <homing+0x2b8>
 8000f2e:	ee27 5b05 	vmul.f64	d5, d7, d5
 8000f32:	ed9f 4b25 	vldr	d4, [pc, #148]	; 8000fc8 <homing+0x2c0>
 8000f36:	ee84 7b05 	vdiv.f64	d7, d4, d5
 8000f3a:	ee26 7b07 	vmul.f64	d7, d6, d7
 8000f3e:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8000f42:	ee37 7b46 	vsub.f64	d7, d7, d6
 8000f46:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000f4a:	ee17 2a90 	vmov	r2, s15
 8000f4e:	4b28      	ldr	r3, [pc, #160]	; (8000ff0 <homing+0x2e8>)
 8000f50:	60da      	str	r2, [r3, #12]

	TIM12->CCR1 = (uint32_t)((double)(TIM12->ARR) / 2.0);
 8000f52:	4b28      	ldr	r3, [pc, #160]	; (8000ff4 <homing+0x2ec>)
 8000f54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f56:	ee07 3a90 	vmov	s15, r3
 8000f5a:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 8000f5e:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8000f62:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000f66:	4b23      	ldr	r3, [pc, #140]	; (8000ff4 <homing+0x2ec>)
 8000f68:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000f6c:	ee17 2a90 	vmov	r2, s15
 8000f70:	635a      	str	r2, [r3, #52]	; 0x34
	TIM13->CCR1 = (uint32_t)((double)(TIM13->ARR) / 2.0);
 8000f72:	4b22      	ldr	r3, [pc, #136]	; (8000ffc <homing+0x2f4>)
 8000f74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f76:	ee07 3a90 	vmov	s15, r3
 8000f7a:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 8000f7e:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8000f82:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000f86:	4b1d      	ldr	r3, [pc, #116]	; (8000ffc <homing+0x2f4>)
 8000f88:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000f8c:	ee17 2a90 	vmov	r2, s15
 8000f90:	635a      	str	r2, [r3, #52]	; 0x34
	TIM14->CCR1 = (uint32_t)((double)(TIM14->ARR) / 2.0);
 8000f92:	4b1b      	ldr	r3, [pc, #108]	; (8001000 <homing+0x2f8>)
 8000f94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f96:	ee07 3a90 	vmov	s15, r3
 8000f9a:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 8000f9e:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8000fa2:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000fa6:	4b16      	ldr	r3, [pc, #88]	; (8001000 <homing+0x2f8>)
 8000fa8:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000fac:	ee17 2a90 	vmov	r2, s15
 8000fb0:	635a      	str	r2, [r3, #52]	; 0x34


    while(homAprox){
 8000fb2:	e06f      	b.n	8001094 <homing+0x38c>
 8000fb4:	f3af 8000 	nop.w
 8000fb8:	00000000 	.word	0x00000000
 8000fbc:	418e8480 	.word	0x418e8480
 8000fc0:	00000000 	.word	0x00000000
 8000fc4:	40bf4000 	.word	0x40bf4000
 8000fc8:	00000000 	.word	0x00000000
 8000fcc:	404e0000 	.word	0x404e0000
 8000fd0:	24000274 	.word	0x24000274
 8000fd4:	24000275 	.word	0x24000275
 8000fd8:	24000360 	.word	0x24000360
 8000fdc:	240003a8 	.word	0x240003a8
 8000fe0:	240003f0 	.word	0x240003f0
 8000fe4:	58020800 	.word	0x58020800
 8000fe8:	240006c8 	.word	0x240006c8
 8000fec:	24000714 	.word	0x24000714
 8000ff0:	24000760 	.word	0x24000760
 8000ff4:	40001800 	.word	0x40001800
 8000ff8:	24000000 	.word	0x24000000
 8000ffc:	40001c00 	.word	0x40001c00
 8001000:	40002000 	.word	0x40002000

        Start_PWM_MOTOR_1;
 8001004:	2100      	movs	r1, #0
 8001006:	488c      	ldr	r0, [pc, #560]	; (8001238 <homing+0x530>)
 8001008:	f009 f8e8 	bl	800a1dc <HAL_TIM_PWM_Start>
        Start_PWM_MOTOR_2;
 800100c:	2100      	movs	r1, #0
 800100e:	488b      	ldr	r0, [pc, #556]	; (800123c <homing+0x534>)
 8001010:	f009 f8e4 	bl	800a1dc <HAL_TIM_PWM_Start>
        Start_PWM_MOTOR_3;
 8001014:	2100      	movs	r1, #0
 8001016:	488a      	ldr	r0, [pc, #552]	; (8001240 <homing+0x538>)
 8001018:	f009 f8e0 	bl	800a1dc <HAL_TIM_PWM_Start>

        if (ES1s_PRESSED || ES2s_PRESSED || ES3s_PRESSED){
 800101c:	2101      	movs	r1, #1
 800101e:	4889      	ldr	r0, [pc, #548]	; (8001244 <homing+0x53c>)
 8001020:	f006 fb3c 	bl	800769c <HAL_GPIO_ReadPin>
 8001024:	4603      	mov	r3, r0
 8001026:	2b00      	cmp	r3, #0
 8001028:	d00d      	beq.n	8001046 <homing+0x33e>
 800102a:	2104      	movs	r1, #4
 800102c:	4885      	ldr	r0, [pc, #532]	; (8001244 <homing+0x53c>)
 800102e:	f006 fb35 	bl	800769c <HAL_GPIO_ReadPin>
 8001032:	4603      	mov	r3, r0
 8001034:	2b00      	cmp	r3, #0
 8001036:	d006      	beq.n	8001046 <homing+0x33e>
 8001038:	2110      	movs	r1, #16
 800103a:	4882      	ldr	r0, [pc, #520]	; (8001244 <homing+0x53c>)
 800103c:	f006 fb2e 	bl	800769c <HAL_GPIO_ReadPin>
 8001040:	4603      	mov	r3, r0
 8001042:	2b00      	cmp	r3, #0
 8001044:	d126      	bne.n	8001094 <homing+0x38c>
            HAL_Delay(30);
 8001046:	201e      	movs	r0, #30
 8001048:	f005 faa2 	bl	8006590 <HAL_Delay>
            if (ES1s_PRESSED || ES2s_PRESSED || ES3s_PRESSED){
 800104c:	2101      	movs	r1, #1
 800104e:	487d      	ldr	r0, [pc, #500]	; (8001244 <homing+0x53c>)
 8001050:	f006 fb24 	bl	800769c <HAL_GPIO_ReadPin>
 8001054:	4603      	mov	r3, r0
 8001056:	2b00      	cmp	r3, #0
 8001058:	d00d      	beq.n	8001076 <homing+0x36e>
 800105a:	2104      	movs	r1, #4
 800105c:	4879      	ldr	r0, [pc, #484]	; (8001244 <homing+0x53c>)
 800105e:	f006 fb1d 	bl	800769c <HAL_GPIO_ReadPin>
 8001062:	4603      	mov	r3, r0
 8001064:	2b00      	cmp	r3, #0
 8001066:	d006      	beq.n	8001076 <homing+0x36e>
 8001068:	2110      	movs	r1, #16
 800106a:	4876      	ldr	r0, [pc, #472]	; (8001244 <homing+0x53c>)
 800106c:	f006 fb16 	bl	800769c <HAL_GPIO_ReadPin>
 8001070:	4603      	mov	r3, r0
 8001072:	2b00      	cmp	r3, #0
 8001074:	d10e      	bne.n	8001094 <homing+0x38c>

                Stop_PWM_MOTOR_1;
 8001076:	2100      	movs	r1, #0
 8001078:	486f      	ldr	r0, [pc, #444]	; (8001238 <homing+0x530>)
 800107a:	f009 f9bd 	bl	800a3f8 <HAL_TIM_PWM_Stop>
                Stop_PWM_MOTOR_2;
 800107e:	2100      	movs	r1, #0
 8001080:	486e      	ldr	r0, [pc, #440]	; (800123c <homing+0x534>)
 8001082:	f009 f9b9 	bl	800a3f8 <HAL_TIM_PWM_Stop>
                Stop_PWM_MOTOR_3;
 8001086:	2100      	movs	r1, #0
 8001088:	486d      	ldr	r0, [pc, #436]	; (8001240 <homing+0x538>)
 800108a:	f009 f9b5 	bl	800a3f8 <HAL_TIM_PWM_Stop>

                homAprox = false;
 800108e:	4b6e      	ldr	r3, [pc, #440]	; (8001248 <homing+0x540>)
 8001090:	2200      	movs	r2, #0
 8001092:	701a      	strb	r2, [r3, #0]
    while(homAprox){
 8001094:	4b6c      	ldr	r3, [pc, #432]	; (8001248 <homing+0x540>)
 8001096:	781b      	ldrb	r3, [r3, #0]
 8001098:	2b00      	cmp	r3, #0
 800109a:	d1b3      	bne.n	8001004 <homing+0x2fc>
        }
    }

    //-----------------------------------------------------------------------------

    while (!homFin){
 800109c:	e13f      	b.n	800131e <homing+0x616>

        if (ES1s_PRESSED && !motor1.hom) {
 800109e:	2101      	movs	r1, #1
 80010a0:	4868      	ldr	r0, [pc, #416]	; (8001244 <homing+0x53c>)
 80010a2:	f006 fafb 	bl	800769c <HAL_GPIO_ReadPin>
 80010a6:	4603      	mov	r3, r0
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d155      	bne.n	8001158 <homing+0x450>
 80010ac:	4b67      	ldr	r3, [pc, #412]	; (800124c <homing+0x544>)
 80010ae:	7e1b      	ldrb	r3, [r3, #24]
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d151      	bne.n	8001158 <homing+0x450>

            Stop_PWM_MOTOR_2;
 80010b4:	2100      	movs	r1, #0
 80010b6:	4861      	ldr	r0, [pc, #388]	; (800123c <homing+0x534>)
 80010b8:	f009 f99e 	bl	800a3f8 <HAL_TIM_PWM_Stop>
            Stop_PWM_MOTOR_3;
 80010bc:	2100      	movs	r1, #0
 80010be:	4860      	ldr	r0, [pc, #384]	; (8001240 <homing+0x538>)
 80010c0:	f009 f99a 	bl	800a3f8 <HAL_TIM_PWM_Stop>

            HAL_Delay(30);//Delay necesario para consultar el estado del pin vinculado al ES1s
 80010c4:	201e      	movs	r0, #30
 80010c6:	f005 fa63 	bl	8006590 <HAL_Delay>

            while(ES1s_PRESSED){
 80010ca:	e010      	b.n	80010ee <homing+0x3e6>

                negative_Dir_MOTOR_1;
 80010cc:	2201      	movs	r2, #1
 80010ce:	f44f 7180 	mov.w	r1, #256	; 0x100
 80010d2:	485f      	ldr	r0, [pc, #380]	; (8001250 <homing+0x548>)
 80010d4:	f006 fafa 	bl	80076cc <HAL_GPIO_WritePin>
                HAL_Delay(0.5); 							//delay cambio de dir
 80010d8:	2000      	movs	r0, #0
 80010da:	f005 fa59 	bl	8006590 <HAL_Delay>
                Start_PWM_MOTOR_1;
 80010de:	2100      	movs	r1, #0
 80010e0:	4855      	ldr	r0, [pc, #340]	; (8001238 <homing+0x530>)
 80010e2:	f009 f87b 	bl	800a1dc <HAL_TIM_PWM_Start>
                HAL_Delay(500); //Lo dejamos que se mueva medio segundo en la direccion descreciente
 80010e6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80010ea:	f005 fa51 	bl	8006590 <HAL_Delay>
            while(ES1s_PRESSED){
 80010ee:	2101      	movs	r1, #1
 80010f0:	4854      	ldr	r0, [pc, #336]	; (8001244 <homing+0x53c>)
 80010f2:	f006 fad3 	bl	800769c <HAL_GPIO_ReadPin>
 80010f6:	4603      	mov	r3, r0
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d0e7      	beq.n	80010cc <homing+0x3c4>

            }

            Stop_PWM_MOTOR_1;
 80010fc:	2100      	movs	r1, #0
 80010fe:	484e      	ldr	r0, [pc, #312]	; (8001238 <homing+0x530>)
 8001100:	f009 f97a 	bl	800a3f8 <HAL_TIM_PWM_Stop>
            motor1.hom=true;
 8001104:	4b51      	ldr	r3, [pc, #324]	; (800124c <homing+0x544>)
 8001106:	2201      	movs	r2, #1
 8001108:	761a      	strb	r2, [r3, #24]
            HAL_UART_Transmit(&huart3,(uint8_t *)"F1\n", 4, 100);
 800110a:	2364      	movs	r3, #100	; 0x64
 800110c:	2204      	movs	r2, #4
 800110e:	4951      	ldr	r1, [pc, #324]	; (8001254 <homing+0x54c>)
 8001110:	4851      	ldr	r0, [pc, #324]	; (8001258 <homing+0x550>)
 8001112:	f00a fe69 	bl	800bde8 <HAL_UART_Transmit>
            HAL_Delay(30);
 8001116:	201e      	movs	r0, #30
 8001118:	f005 fa3a 	bl	8006590 <HAL_Delay>

            if (ES2s_UNPRESSED && !motor2.hom)Start_PWM_MOTOR_2;
 800111c:	2104      	movs	r1, #4
 800111e:	4849      	ldr	r0, [pc, #292]	; (8001244 <homing+0x53c>)
 8001120:	f006 fabc 	bl	800769c <HAL_GPIO_ReadPin>
 8001124:	4603      	mov	r3, r0
 8001126:	2b00      	cmp	r3, #0
 8001128:	d007      	beq.n	800113a <homing+0x432>
 800112a:	4b4c      	ldr	r3, [pc, #304]	; (800125c <homing+0x554>)
 800112c:	7e1b      	ldrb	r3, [r3, #24]
 800112e:	2b00      	cmp	r3, #0
 8001130:	d103      	bne.n	800113a <homing+0x432>
 8001132:	2100      	movs	r1, #0
 8001134:	4841      	ldr	r0, [pc, #260]	; (800123c <homing+0x534>)
 8001136:	f009 f851 	bl	800a1dc <HAL_TIM_PWM_Start>
            if (ES3s_UNPRESSED && !motor3.hom)Start_PWM_MOTOR_3;
 800113a:	2110      	movs	r1, #16
 800113c:	4841      	ldr	r0, [pc, #260]	; (8001244 <homing+0x53c>)
 800113e:	f006 faad 	bl	800769c <HAL_GPIO_ReadPin>
 8001142:	4603      	mov	r3, r0
 8001144:	2b00      	cmp	r3, #0
 8001146:	d007      	beq.n	8001158 <homing+0x450>
 8001148:	4b45      	ldr	r3, [pc, #276]	; (8001260 <homing+0x558>)
 800114a:	7e1b      	ldrb	r3, [r3, #24]
 800114c:	2b00      	cmp	r3, #0
 800114e:	d103      	bne.n	8001158 <homing+0x450>
 8001150:	2100      	movs	r1, #0
 8001152:	483b      	ldr	r0, [pc, #236]	; (8001240 <homing+0x538>)
 8001154:	f009 f842 	bl	800a1dc <HAL_TIM_PWM_Start>


        } // ES1s_UNPRESSED : Se dejó de presionar el FC1 sup

        if (ES2s_PRESSED && !motor2.hom){
 8001158:	2104      	movs	r1, #4
 800115a:	483a      	ldr	r0, [pc, #232]	; (8001244 <homing+0x53c>)
 800115c:	f006 fa9e 	bl	800769c <HAL_GPIO_ReadPin>
 8001160:	4603      	mov	r3, r0
 8001162:	2b00      	cmp	r3, #0
 8001164:	d155      	bne.n	8001212 <homing+0x50a>
 8001166:	4b3d      	ldr	r3, [pc, #244]	; (800125c <homing+0x554>)
 8001168:	7e1b      	ldrb	r3, [r3, #24]
 800116a:	2b00      	cmp	r3, #0
 800116c:	d151      	bne.n	8001212 <homing+0x50a>

            Stop_PWM_MOTOR_1;
 800116e:	2100      	movs	r1, #0
 8001170:	4831      	ldr	r0, [pc, #196]	; (8001238 <homing+0x530>)
 8001172:	f009 f941 	bl	800a3f8 <HAL_TIM_PWM_Stop>
            Stop_PWM_MOTOR_3;
 8001176:	2100      	movs	r1, #0
 8001178:	4831      	ldr	r0, [pc, #196]	; (8001240 <homing+0x538>)
 800117a:	f009 f93d 	bl	800a3f8 <HAL_TIM_PWM_Stop>

            HAL_Delay(30);//Delay necesario para consultar el estado del pin vinculado al ES2s
 800117e:	201e      	movs	r0, #30
 8001180:	f005 fa06 	bl	8006590 <HAL_Delay>

            while(ES2s_PRESSED){
 8001184:	e010      	b.n	80011a8 <homing+0x4a0>

                negative_Dir_MOTOR_2;
 8001186:	2201      	movs	r2, #1
 8001188:	f44f 7100 	mov.w	r1, #512	; 0x200
 800118c:	4830      	ldr	r0, [pc, #192]	; (8001250 <homing+0x548>)
 800118e:	f006 fa9d 	bl	80076cc <HAL_GPIO_WritePin>
                HAL_Delay(0.5);
 8001192:	2000      	movs	r0, #0
 8001194:	f005 f9fc 	bl	8006590 <HAL_Delay>
                Start_PWM_MOTOR_2;
 8001198:	2100      	movs	r1, #0
 800119a:	4828      	ldr	r0, [pc, #160]	; (800123c <homing+0x534>)
 800119c:	f009 f81e 	bl	800a1dc <HAL_TIM_PWM_Start>
                HAL_Delay(500);
 80011a0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80011a4:	f005 f9f4 	bl	8006590 <HAL_Delay>
            while(ES2s_PRESSED){
 80011a8:	2104      	movs	r1, #4
 80011aa:	4826      	ldr	r0, [pc, #152]	; (8001244 <homing+0x53c>)
 80011ac:	f006 fa76 	bl	800769c <HAL_GPIO_ReadPin>
 80011b0:	4603      	mov	r3, r0
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d0e7      	beq.n	8001186 <homing+0x47e>

            }

            Stop_PWM_MOTOR_2;
 80011b6:	2100      	movs	r1, #0
 80011b8:	4820      	ldr	r0, [pc, #128]	; (800123c <homing+0x534>)
 80011ba:	f009 f91d 	bl	800a3f8 <HAL_TIM_PWM_Stop>
            motor2.hom=true;
 80011be:	4b27      	ldr	r3, [pc, #156]	; (800125c <homing+0x554>)
 80011c0:	2201      	movs	r2, #1
 80011c2:	761a      	strb	r2, [r3, #24]
            HAL_UART_Transmit(&huart3,(uint8_t *)"F2\n", 4, 100);
 80011c4:	2364      	movs	r3, #100	; 0x64
 80011c6:	2204      	movs	r2, #4
 80011c8:	4926      	ldr	r1, [pc, #152]	; (8001264 <homing+0x55c>)
 80011ca:	4823      	ldr	r0, [pc, #140]	; (8001258 <homing+0x550>)
 80011cc:	f00a fe0c 	bl	800bde8 <HAL_UART_Transmit>
            HAL_Delay(30);
 80011d0:	201e      	movs	r0, #30
 80011d2:	f005 f9dd 	bl	8006590 <HAL_Delay>

            if (ES1s_UNPRESSED && !motor1.hom)Start_PWM_MOTOR_1;
 80011d6:	2101      	movs	r1, #1
 80011d8:	481a      	ldr	r0, [pc, #104]	; (8001244 <homing+0x53c>)
 80011da:	f006 fa5f 	bl	800769c <HAL_GPIO_ReadPin>
 80011de:	4603      	mov	r3, r0
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d007      	beq.n	80011f4 <homing+0x4ec>
 80011e4:	4b19      	ldr	r3, [pc, #100]	; (800124c <homing+0x544>)
 80011e6:	7e1b      	ldrb	r3, [r3, #24]
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d103      	bne.n	80011f4 <homing+0x4ec>
 80011ec:	2100      	movs	r1, #0
 80011ee:	4812      	ldr	r0, [pc, #72]	; (8001238 <homing+0x530>)
 80011f0:	f008 fff4 	bl	800a1dc <HAL_TIM_PWM_Start>
            if (ES3s_UNPRESSED && !motor3.hom)Start_PWM_MOTOR_3;
 80011f4:	2110      	movs	r1, #16
 80011f6:	4813      	ldr	r0, [pc, #76]	; (8001244 <homing+0x53c>)
 80011f8:	f006 fa50 	bl	800769c <HAL_GPIO_ReadPin>
 80011fc:	4603      	mov	r3, r0
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d007      	beq.n	8001212 <homing+0x50a>
 8001202:	4b17      	ldr	r3, [pc, #92]	; (8001260 <homing+0x558>)
 8001204:	7e1b      	ldrb	r3, [r3, #24]
 8001206:	2b00      	cmp	r3, #0
 8001208:	d103      	bne.n	8001212 <homing+0x50a>
 800120a:	2100      	movs	r1, #0
 800120c:	480c      	ldr	r0, [pc, #48]	; (8001240 <homing+0x538>)
 800120e:	f008 ffe5 	bl	800a1dc <HAL_TIM_PWM_Start>

        }// ES2s_UNPRESSED : Se dejó de presionar el FC2 sup


        if (ES3s_PRESSED){
 8001212:	2110      	movs	r1, #16
 8001214:	480b      	ldr	r0, [pc, #44]	; (8001244 <homing+0x53c>)
 8001216:	f006 fa41 	bl	800769c <HAL_GPIO_ReadPin>
 800121a:	4603      	mov	r3, r0
 800121c:	2b00      	cmp	r3, #0
 800121e:	d169      	bne.n	80012f4 <homing+0x5ec>

            Stop_PWM_MOTOR_1;
 8001220:	2100      	movs	r1, #0
 8001222:	4805      	ldr	r0, [pc, #20]	; (8001238 <homing+0x530>)
 8001224:	f009 f8e8 	bl	800a3f8 <HAL_TIM_PWM_Stop>
            Stop_PWM_MOTOR_2;
 8001228:	2100      	movs	r1, #0
 800122a:	4804      	ldr	r0, [pc, #16]	; (800123c <homing+0x534>)
 800122c:	f009 f8e4 	bl	800a3f8 <HAL_TIM_PWM_Stop>

            HAL_Delay(30);//Delay necesario para consultar el estado del pin vinculado al ES3s
 8001230:	201e      	movs	r0, #30
 8001232:	f005 f9ad 	bl	8006590 <HAL_Delay>

            while(ES3s_PRESSED){
 8001236:	e028      	b.n	800128a <homing+0x582>
 8001238:	240006c8 	.word	0x240006c8
 800123c:	24000714 	.word	0x24000714
 8001240:	24000760 	.word	0x24000760
 8001244:	58021000 	.word	0x58021000
 8001248:	24000274 	.word	0x24000274
 800124c:	24000360 	.word	0x24000360
 8001250:	58020800 	.word	0x58020800
 8001254:	08011a18 	.word	0x08011a18
 8001258:	240009d0 	.word	0x240009d0
 800125c:	240003a8 	.word	0x240003a8
 8001260:	240003f0 	.word	0x240003f0
 8001264:	08011a1c 	.word	0x08011a1c

                negative_Dir_MOTOR_3;
 8001268:	2201      	movs	r2, #1
 800126a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800126e:	4830      	ldr	r0, [pc, #192]	; (8001330 <homing+0x628>)
 8001270:	f006 fa2c 	bl	80076cc <HAL_GPIO_WritePin>
                HAL_Delay(0.5);
 8001274:	2000      	movs	r0, #0
 8001276:	f005 f98b 	bl	8006590 <HAL_Delay>
                Start_PWM_MOTOR_3;
 800127a:	2100      	movs	r1, #0
 800127c:	482d      	ldr	r0, [pc, #180]	; (8001334 <homing+0x62c>)
 800127e:	f008 ffad 	bl	800a1dc <HAL_TIM_PWM_Start>
                HAL_Delay(500);
 8001282:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001286:	f005 f983 	bl	8006590 <HAL_Delay>
            while(ES3s_PRESSED){
 800128a:	2110      	movs	r1, #16
 800128c:	482a      	ldr	r0, [pc, #168]	; (8001338 <homing+0x630>)
 800128e:	f006 fa05 	bl	800769c <HAL_GPIO_ReadPin>
 8001292:	4603      	mov	r3, r0
 8001294:	2b00      	cmp	r3, #0
 8001296:	d0e7      	beq.n	8001268 <homing+0x560>
            }

            Stop_PWM_MOTOR_3;
 8001298:	2100      	movs	r1, #0
 800129a:	4826      	ldr	r0, [pc, #152]	; (8001334 <homing+0x62c>)
 800129c:	f009 f8ac 	bl	800a3f8 <HAL_TIM_PWM_Stop>
            motor3.hom = true;
 80012a0:	4b26      	ldr	r3, [pc, #152]	; (800133c <homing+0x634>)
 80012a2:	2201      	movs	r2, #1
 80012a4:	761a      	strb	r2, [r3, #24]
            HAL_UART_Transmit(&huart3,(uint8_t *)"F3\n", 4, 100);
 80012a6:	2364      	movs	r3, #100	; 0x64
 80012a8:	2204      	movs	r2, #4
 80012aa:	4925      	ldr	r1, [pc, #148]	; (8001340 <homing+0x638>)
 80012ac:	4825      	ldr	r0, [pc, #148]	; (8001344 <homing+0x63c>)
 80012ae:	f00a fd9b 	bl	800bde8 <HAL_UART_Transmit>
			HAL_Delay(30);
 80012b2:	201e      	movs	r0, #30
 80012b4:	f005 f96c 	bl	8006590 <HAL_Delay>
            if (ES1s_UNPRESSED && !motor1.hom)Start_PWM_MOTOR_1;
 80012b8:	2101      	movs	r1, #1
 80012ba:	481f      	ldr	r0, [pc, #124]	; (8001338 <homing+0x630>)
 80012bc:	f006 f9ee 	bl	800769c <HAL_GPIO_ReadPin>
 80012c0:	4603      	mov	r3, r0
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d007      	beq.n	80012d6 <homing+0x5ce>
 80012c6:	4b20      	ldr	r3, [pc, #128]	; (8001348 <homing+0x640>)
 80012c8:	7e1b      	ldrb	r3, [r3, #24]
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d103      	bne.n	80012d6 <homing+0x5ce>
 80012ce:	2100      	movs	r1, #0
 80012d0:	481e      	ldr	r0, [pc, #120]	; (800134c <homing+0x644>)
 80012d2:	f008 ff83 	bl	800a1dc <HAL_TIM_PWM_Start>
            if (ES2s_UNPRESSED && !motor2.hom)Start_PWM_MOTOR_2;
 80012d6:	2104      	movs	r1, #4
 80012d8:	4817      	ldr	r0, [pc, #92]	; (8001338 <homing+0x630>)
 80012da:	f006 f9df 	bl	800769c <HAL_GPIO_ReadPin>
 80012de:	4603      	mov	r3, r0
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d007      	beq.n	80012f4 <homing+0x5ec>
 80012e4:	4b1a      	ldr	r3, [pc, #104]	; (8001350 <homing+0x648>)
 80012e6:	7e1b      	ldrb	r3, [r3, #24]
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d103      	bne.n	80012f4 <homing+0x5ec>
 80012ec:	2100      	movs	r1, #0
 80012ee:	4819      	ldr	r0, [pc, #100]	; (8001354 <homing+0x64c>)
 80012f0:	f008 ff74 	bl	800a1dc <HAL_TIM_PWM_Start>
        }// ES3s_UNPRESSED : Se dejó de presionar el FC3 sup



        if (motor1.hom && motor2.hom && motor3.hom){
 80012f4:	4b14      	ldr	r3, [pc, #80]	; (8001348 <homing+0x640>)
 80012f6:	7e1b      	ldrb	r3, [r3, #24]
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d010      	beq.n	800131e <homing+0x616>
 80012fc:	4b14      	ldr	r3, [pc, #80]	; (8001350 <homing+0x648>)
 80012fe:	7e1b      	ldrb	r3, [r3, #24]
 8001300:	2b00      	cmp	r3, #0
 8001302:	d00c      	beq.n	800131e <homing+0x616>
 8001304:	4b0d      	ldr	r3, [pc, #52]	; (800133c <homing+0x634>)
 8001306:	7e1b      	ldrb	r3, [r3, #24]
 8001308:	2b00      	cmp	r3, #0
 800130a:	d008      	beq.n	800131e <homing+0x616>
        	homFin=true;
 800130c:	4b12      	ldr	r3, [pc, #72]	; (8001358 <homing+0x650>)
 800130e:	2201      	movs	r2, #1
 8001310:	701a      	strb	r2, [r3, #0]
        	HAL_UART_Transmit(&huart3,(uint8_t *)"FH\n", 4, 100);
 8001312:	2364      	movs	r3, #100	; 0x64
 8001314:	2204      	movs	r2, #4
 8001316:	4911      	ldr	r1, [pc, #68]	; (800135c <homing+0x654>)
 8001318:	480a      	ldr	r0, [pc, #40]	; (8001344 <homing+0x63c>)
 800131a:	f00a fd65 	bl	800bde8 <HAL_UART_Transmit>
    while (!homFin){
 800131e:	4b0e      	ldr	r3, [pc, #56]	; (8001358 <homing+0x650>)
 8001320:	781b      	ldrb	r3, [r3, #0]
 8001322:	2b00      	cmp	r3, #0
 8001324:	f43f aebb 	beq.w	800109e <homing+0x396>
        }
       }


    }
 8001328:	bf00      	nop
 800132a:	bf00      	nop
 800132c:	bd80      	pop	{r7, pc}
 800132e:	bf00      	nop
 8001330:	58020800 	.word	0x58020800
 8001334:	24000760 	.word	0x24000760
 8001338:	58021000 	.word	0x58021000
 800133c:	240003f0 	.word	0x240003f0
 8001340:	08011a20 	.word	0x08011a20
 8001344:	240009d0 	.word	0x240009d0
 8001348:	24000360 	.word	0x24000360
 800134c:	240006c8 	.word	0x240006c8
 8001350:	240003a8 	.word	0x240003a8
 8001354:	24000714 	.word	0x24000714
 8001358:	24000451 	.word	0x24000451
 800135c:	08011a24 	.word	0x08011a24

08001360 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8001360:	b480      	push	{r7}
 8001362:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001364:	f3bf 8f4f 	dsb	sy
}
 8001368:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800136a:	4b06      	ldr	r3, [pc, #24]	; (8001384 <__NVIC_SystemReset+0x24>)
 800136c:	68db      	ldr	r3, [r3, #12]
 800136e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8001372:	4904      	ldr	r1, [pc, #16]	; (8001384 <__NVIC_SystemReset+0x24>)
 8001374:	4b04      	ldr	r3, [pc, #16]	; (8001388 <__NVIC_SystemReset+0x28>)
 8001376:	4313      	orrs	r3, r2
 8001378:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800137a:	f3bf 8f4f 	dsb	sy
}
 800137e:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8001380:	bf00      	nop
 8001382:	e7fd      	b.n	8001380 <__NVIC_SystemReset+0x20>
 8001384:	e000ed00 	.word	0xe000ed00
 8001388:	05fa0004 	.word	0x05fa0004

0800138c <interpretaComando>:

bool newline_detected = false;
volatile double aux;
uint8_t auxString[10];

void interpretaComando(void){
 800138c:	b580      	push	{r7, lr}
 800138e:	b084      	sub	sp, #16
 8001390:	af00      	add	r7, sp, #0

	switch(rx_buffer[0]){
 8001392:	4ba3      	ldr	r3, [pc, #652]	; (8001620 <interpretaComando+0x294>)
 8001394:	781b      	ldrb	r3, [r3, #0]
 8001396:	3b48      	subs	r3, #72	; 0x48
 8001398:	2b2a      	cmp	r3, #42	; 0x2a
 800139a:	f200 813b 	bhi.w	8001614 <interpretaComando+0x288>
 800139e:	a201      	add	r2, pc, #4	; (adr r2, 80013a4 <interpretaComando+0x18>)
 80013a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013a4:	08001451 	.word	0x08001451
 80013a8:	08001615 	.word	0x08001615
 80013ac:	08001615 	.word	0x08001615
 80013b0:	08001615 	.word	0x08001615
 80013b4:	08001615 	.word	0x08001615
 80013b8:	08001615 	.word	0x08001615
 80013bc:	08001615 	.word	0x08001615
 80013c0:	08001615 	.word	0x08001615
 80013c4:	08001459 	.word	0x08001459
 80013c8:	08001615 	.word	0x08001615
 80013cc:	08001605 	.word	0x08001605
 80013d0:	08001615 	.word	0x08001615
 80013d4:	08001615 	.word	0x08001615
 80013d8:	08001615 	.word	0x08001615
 80013dc:	08001615 	.word	0x08001615
 80013e0:	08001615 	.word	0x08001615
 80013e4:	08001615 	.word	0x08001615
 80013e8:	08001615 	.word	0x08001615
 80013ec:	08001615 	.word	0x08001615
 80013f0:	08001615 	.word	0x08001615
 80013f4:	08001615 	.word	0x08001615
 80013f8:	08001615 	.word	0x08001615
 80013fc:	08001615 	.word	0x08001615
 8001400:	08001615 	.word	0x08001615
 8001404:	08001615 	.word	0x08001615
 8001408:	08001615 	.word	0x08001615
 800140c:	08001615 	.word	0x08001615
 8001410:	08001615 	.word	0x08001615
 8001414:	08001615 	.word	0x08001615
 8001418:	08001615 	.word	0x08001615
 800141c:	08001615 	.word	0x08001615
 8001420:	08001615 	.word	0x08001615
 8001424:	08001451 	.word	0x08001451
 8001428:	08001615 	.word	0x08001615
 800142c:	08001615 	.word	0x08001615
 8001430:	08001615 	.word	0x08001615
 8001434:	08001615 	.word	0x08001615
 8001438:	08001615 	.word	0x08001615
 800143c:	08001615 	.word	0x08001615
 8001440:	08001615 	.word	0x08001615
 8001444:	08001459 	.word	0x08001459
 8001448:	08001615 	.word	0x08001615
 800144c:	08001605 	.word	0x08001605


	case 'H':
	case 'h':
		state = HOME;
 8001450:	4b74      	ldr	r3, [pc, #464]	; (8001624 <interpretaComando+0x298>)
 8001452:	2203      	movs	r2, #3
 8001454:	701a      	strb	r2, [r3, #0]
	break;
 8001456:	e0de      	b.n	8001616 <interpretaComando+0x28a>

	case 'P':												//:Px0.1 y0.1 z-0.5 \0 (Eje, valor, espacio, Eje, valor, espacio, Eje, valor)
	case 'p':

		flagErrorEndStop = 0;
 8001458:	4973      	ldr	r1, [pc, #460]	; (8001628 <interpretaComando+0x29c>)
 800145a:	f04f 0200 	mov.w	r2, #0
 800145e:	f04f 0300 	mov.w	r3, #0
 8001462:	e9c1 2300 	strd	r2, r3, [r1]
		uint8_t i = 1;
 8001466:	2301      	movs	r3, #1
 8001468:	73fb      	strb	r3, [r7, #15]
		uint8_t j = 0;
 800146a:	2300      	movs	r3, #0
 800146c:	73bb      	strb	r3, [r7, #14]
		while(rx_buffer[i] != 0 && !newline_detected){
 800146e:	e0bb      	b.n	80015e8 <interpretaComando+0x25c>
			if(rx_buffer[i] == 'x'){
 8001470:	7bfb      	ldrb	r3, [r7, #15]
 8001472:	4a6b      	ldr	r2, [pc, #428]	; (8001620 <interpretaComando+0x294>)
 8001474:	5cd3      	ldrb	r3, [r2, r3]
 8001476:	2b78      	cmp	r3, #120	; 0x78
 8001478:	d133      	bne.n	80014e2 <interpretaComando+0x156>
				while(rx_buffer[i+1] != ' '){			//Almacenar dato en buffer hasta que se encuentre un espacio
 800147a:	e00c      	b.n	8001496 <interpretaComando+0x10a>
					auxString[j] = rx_buffer[i+1];
 800147c:	7bfb      	ldrb	r3, [r7, #15]
 800147e:	1c5a      	adds	r2, r3, #1
 8001480:	7bbb      	ldrb	r3, [r7, #14]
 8001482:	4967      	ldr	r1, [pc, #412]	; (8001620 <interpretaComando+0x294>)
 8001484:	5c89      	ldrb	r1, [r1, r2]
 8001486:	4a69      	ldr	r2, [pc, #420]	; (800162c <interpretaComando+0x2a0>)
 8001488:	54d1      	strb	r1, [r2, r3]
					j++;
 800148a:	7bbb      	ldrb	r3, [r7, #14]
 800148c:	3301      	adds	r3, #1
 800148e:	73bb      	strb	r3, [r7, #14]
					i++;
 8001490:	7bfb      	ldrb	r3, [r7, #15]
 8001492:	3301      	adds	r3, #1
 8001494:	73fb      	strb	r3, [r7, #15]
				while(rx_buffer[i+1] != ' '){			//Almacenar dato en buffer hasta que se encuentre un espacio
 8001496:	7bfb      	ldrb	r3, [r7, #15]
 8001498:	3301      	adds	r3, #1
 800149a:	4a61      	ldr	r2, [pc, #388]	; (8001620 <interpretaComando+0x294>)
 800149c:	5cd3      	ldrb	r3, [r2, r3]
 800149e:	2b20      	cmp	r3, #32
 80014a0:	d1ec      	bne.n	800147c <interpretaComando+0xf0>
				}
				Pfin.x = strtod(&auxString[0], NULL);
 80014a2:	2100      	movs	r1, #0
 80014a4:	4861      	ldr	r0, [pc, #388]	; (800162c <interpretaComando+0x2a0>)
 80014a6:	f00d fdb1 	bl	800f00c <strtod>
 80014aa:	eeb0 7b40 	vmov.f64	d7, d0
 80014ae:	4b60      	ldr	r3, [pc, #384]	; (8001630 <interpretaComando+0x2a4>)
 80014b0:	ed83 7b00 	vstr	d7, [r3]
				for (int k = 0; k <= 10; k++) {
 80014b4:	2300      	movs	r3, #0
 80014b6:	60bb      	str	r3, [r7, #8]
 80014b8:	e007      	b.n	80014ca <interpretaComando+0x13e>
					auxString[k] = 0;
 80014ba:	4a5c      	ldr	r2, [pc, #368]	; (800162c <interpretaComando+0x2a0>)
 80014bc:	68bb      	ldr	r3, [r7, #8]
 80014be:	4413      	add	r3, r2
 80014c0:	2200      	movs	r2, #0
 80014c2:	701a      	strb	r2, [r3, #0]
				for (int k = 0; k <= 10; k++) {
 80014c4:	68bb      	ldr	r3, [r7, #8]
 80014c6:	3301      	adds	r3, #1
 80014c8:	60bb      	str	r3, [r7, #8]
 80014ca:	68bb      	ldr	r3, [r7, #8]
 80014cc:	2b0a      	cmp	r3, #10
 80014ce:	ddf4      	ble.n	80014ba <interpretaComando+0x12e>
				}
				j=0;
 80014d0:	2300      	movs	r3, #0
 80014d2:	73bb      	strb	r3, [r7, #14]
				HAL_UART_Transmit(&huart3, (uint8_t *)"Px_ok\n", 7, 100);
 80014d4:	2364      	movs	r3, #100	; 0x64
 80014d6:	2207      	movs	r2, #7
 80014d8:	4956      	ldr	r1, [pc, #344]	; (8001634 <interpretaComando+0x2a8>)
 80014da:	4857      	ldr	r0, [pc, #348]	; (8001638 <interpretaComando+0x2ac>)
 80014dc:	f00a fc84 	bl	800bde8 <HAL_UART_Transmit>
 80014e0:	e07f      	b.n	80015e2 <interpretaComando+0x256>
			}
			else if(rx_buffer[i] == 'y'){
 80014e2:	7bfb      	ldrb	r3, [r7, #15]
 80014e4:	4a4e      	ldr	r2, [pc, #312]	; (8001620 <interpretaComando+0x294>)
 80014e6:	5cd3      	ldrb	r3, [r2, r3]
 80014e8:	2b79      	cmp	r3, #121	; 0x79
 80014ea:	d133      	bne.n	8001554 <interpretaComando+0x1c8>
				while(rx_buffer[i+1] != ' '){			//Almacenar dato en buffer hasta que se encuentre un espacio
 80014ec:	e00c      	b.n	8001508 <interpretaComando+0x17c>
					auxString[j] = rx_buffer[i+1];
 80014ee:	7bfb      	ldrb	r3, [r7, #15]
 80014f0:	1c5a      	adds	r2, r3, #1
 80014f2:	7bbb      	ldrb	r3, [r7, #14]
 80014f4:	494a      	ldr	r1, [pc, #296]	; (8001620 <interpretaComando+0x294>)
 80014f6:	5c89      	ldrb	r1, [r1, r2]
 80014f8:	4a4c      	ldr	r2, [pc, #304]	; (800162c <interpretaComando+0x2a0>)
 80014fa:	54d1      	strb	r1, [r2, r3]
					j++;
 80014fc:	7bbb      	ldrb	r3, [r7, #14]
 80014fe:	3301      	adds	r3, #1
 8001500:	73bb      	strb	r3, [r7, #14]
					i++;
 8001502:	7bfb      	ldrb	r3, [r7, #15]
 8001504:	3301      	adds	r3, #1
 8001506:	73fb      	strb	r3, [r7, #15]
				while(rx_buffer[i+1] != ' '){			//Almacenar dato en buffer hasta que se encuentre un espacio
 8001508:	7bfb      	ldrb	r3, [r7, #15]
 800150a:	3301      	adds	r3, #1
 800150c:	4a44      	ldr	r2, [pc, #272]	; (8001620 <interpretaComando+0x294>)
 800150e:	5cd3      	ldrb	r3, [r2, r3]
 8001510:	2b20      	cmp	r3, #32
 8001512:	d1ec      	bne.n	80014ee <interpretaComando+0x162>
				}
				Pfin.y = strtod(&auxString[0], NULL);
 8001514:	2100      	movs	r1, #0
 8001516:	4845      	ldr	r0, [pc, #276]	; (800162c <interpretaComando+0x2a0>)
 8001518:	f00d fd78 	bl	800f00c <strtod>
 800151c:	eeb0 7b40 	vmov.f64	d7, d0
 8001520:	4b43      	ldr	r3, [pc, #268]	; (8001630 <interpretaComando+0x2a4>)
 8001522:	ed83 7b02 	vstr	d7, [r3, #8]
				for (int k = 0; k <= 10; k++) {
 8001526:	2300      	movs	r3, #0
 8001528:	607b      	str	r3, [r7, #4]
 800152a:	e007      	b.n	800153c <interpretaComando+0x1b0>
					auxString[k] = 0;
 800152c:	4a3f      	ldr	r2, [pc, #252]	; (800162c <interpretaComando+0x2a0>)
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	4413      	add	r3, r2
 8001532:	2200      	movs	r2, #0
 8001534:	701a      	strb	r2, [r3, #0]
				for (int k = 0; k <= 10; k++) {
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	3301      	adds	r3, #1
 800153a:	607b      	str	r3, [r7, #4]
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	2b0a      	cmp	r3, #10
 8001540:	ddf4      	ble.n	800152c <interpretaComando+0x1a0>
				}
				j=0;
 8001542:	2300      	movs	r3, #0
 8001544:	73bb      	strb	r3, [r7, #14]
				HAL_UART_Transmit(&huart3,(uint8_t *)"Py_ok\n", 7, 100);
 8001546:	2364      	movs	r3, #100	; 0x64
 8001548:	2207      	movs	r2, #7
 800154a:	493c      	ldr	r1, [pc, #240]	; (800163c <interpretaComando+0x2b0>)
 800154c:	483a      	ldr	r0, [pc, #232]	; (8001638 <interpretaComando+0x2ac>)
 800154e:	f00a fc4b 	bl	800bde8 <HAL_UART_Transmit>
 8001552:	e046      	b.n	80015e2 <interpretaComando+0x256>
			}
			else if(rx_buffer[i] == 'z'){
 8001554:	7bfb      	ldrb	r3, [r7, #15]
 8001556:	4a32      	ldr	r2, [pc, #200]	; (8001620 <interpretaComando+0x294>)
 8001558:	5cd3      	ldrb	r3, [r2, r3]
 800155a:	2b7a      	cmp	r3, #122	; 0x7a
 800155c:	d141      	bne.n	80015e2 <interpretaComando+0x256>
				while(rx_buffer[i+1] != '\n' && rx_buffer[i+1] != 0){			//Almacenar dato en buffer hasta que se encuentre un espacio
 800155e:	e00c      	b.n	800157a <interpretaComando+0x1ee>
					auxString[j] = rx_buffer[i+1];
 8001560:	7bfb      	ldrb	r3, [r7, #15]
 8001562:	1c5a      	adds	r2, r3, #1
 8001564:	7bbb      	ldrb	r3, [r7, #14]
 8001566:	492e      	ldr	r1, [pc, #184]	; (8001620 <interpretaComando+0x294>)
 8001568:	5c89      	ldrb	r1, [r1, r2]
 800156a:	4a30      	ldr	r2, [pc, #192]	; (800162c <interpretaComando+0x2a0>)
 800156c:	54d1      	strb	r1, [r2, r3]
					j++;
 800156e:	7bbb      	ldrb	r3, [r7, #14]
 8001570:	3301      	adds	r3, #1
 8001572:	73bb      	strb	r3, [r7, #14]
					i++;
 8001574:	7bfb      	ldrb	r3, [r7, #15]
 8001576:	3301      	adds	r3, #1
 8001578:	73fb      	strb	r3, [r7, #15]
				while(rx_buffer[i+1] != '\n' && rx_buffer[i+1] != 0){			//Almacenar dato en buffer hasta que se encuentre un espacio
 800157a:	7bfb      	ldrb	r3, [r7, #15]
 800157c:	3301      	adds	r3, #1
 800157e:	4a28      	ldr	r2, [pc, #160]	; (8001620 <interpretaComando+0x294>)
 8001580:	5cd3      	ldrb	r3, [r2, r3]
 8001582:	2b0a      	cmp	r3, #10
 8001584:	d005      	beq.n	8001592 <interpretaComando+0x206>
 8001586:	7bfb      	ldrb	r3, [r7, #15]
 8001588:	3301      	adds	r3, #1
 800158a:	4a25      	ldr	r2, [pc, #148]	; (8001620 <interpretaComando+0x294>)
 800158c:	5cd3      	ldrb	r3, [r2, r3]
 800158e:	2b00      	cmp	r3, #0
 8001590:	d1e6      	bne.n	8001560 <interpretaComando+0x1d4>
				}
				Pfin.z = strtod(&auxString[0], NULL);
 8001592:	2100      	movs	r1, #0
 8001594:	4825      	ldr	r0, [pc, #148]	; (800162c <interpretaComando+0x2a0>)
 8001596:	f00d fd39 	bl	800f00c <strtod>
 800159a:	eeb0 7b40 	vmov.f64	d7, d0
 800159e:	4b24      	ldr	r3, [pc, #144]	; (8001630 <interpretaComando+0x2a4>)
 80015a0:	ed83 7b04 	vstr	d7, [r3, #16]
				for (int k = 0; k <= 10; k++) {
 80015a4:	2300      	movs	r3, #0
 80015a6:	603b      	str	r3, [r7, #0]
 80015a8:	e007      	b.n	80015ba <interpretaComando+0x22e>
					auxString[k] = 0;
 80015aa:	4a20      	ldr	r2, [pc, #128]	; (800162c <interpretaComando+0x2a0>)
 80015ac:	683b      	ldr	r3, [r7, #0]
 80015ae:	4413      	add	r3, r2
 80015b0:	2200      	movs	r2, #0
 80015b2:	701a      	strb	r2, [r3, #0]
				for (int k = 0; k <= 10; k++) {
 80015b4:	683b      	ldr	r3, [r7, #0]
 80015b6:	3301      	adds	r3, #1
 80015b8:	603b      	str	r3, [r7, #0]
 80015ba:	683b      	ldr	r3, [r7, #0]
 80015bc:	2b0a      	cmp	r3, #10
 80015be:	ddf4      	ble.n	80015aa <interpretaComando+0x21e>
				}
				j=0;
 80015c0:	2300      	movs	r3, #0
 80015c2:	73bb      	strb	r3, [r7, #14]
				HAL_UART_Transmit(&huart3,(uint8_t *)"Pz_ok\n", 7, 100);
 80015c4:	2364      	movs	r3, #100	; 0x64
 80015c6:	2207      	movs	r2, #7
 80015c8:	491d      	ldr	r1, [pc, #116]	; (8001640 <interpretaComando+0x2b4>)
 80015ca:	481b      	ldr	r0, [pc, #108]	; (8001638 <interpretaComando+0x2ac>)
 80015cc:	f00a fc0c 	bl	800bde8 <HAL_UART_Transmit>
				if(rx_buffer[i+1] == '\n'){	//Detectar salto de línea
 80015d0:	7bfb      	ldrb	r3, [r7, #15]
 80015d2:	3301      	adds	r3, #1
 80015d4:	4a12      	ldr	r2, [pc, #72]	; (8001620 <interpretaComando+0x294>)
 80015d6:	5cd3      	ldrb	r3, [r2, r3]
 80015d8:	2b0a      	cmp	r3, #10
 80015da:	d102      	bne.n	80015e2 <interpretaComando+0x256>
				    newline_detected = true;
 80015dc:	4b19      	ldr	r3, [pc, #100]	; (8001644 <interpretaComando+0x2b8>)
 80015de:	2201      	movs	r2, #1
 80015e0:	701a      	strb	r2, [r3, #0]
				}
			}
			i++;
 80015e2:	7bfb      	ldrb	r3, [r7, #15]
 80015e4:	3301      	adds	r3, #1
 80015e6:	73fb      	strb	r3, [r7, #15]
		while(rx_buffer[i] != 0 && !newline_detected){
 80015e8:	7bfb      	ldrb	r3, [r7, #15]
 80015ea:	4a0d      	ldr	r2, [pc, #52]	; (8001620 <interpretaComando+0x294>)
 80015ec:	5cd3      	ldrb	r3, [r2, r3]
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d004      	beq.n	80015fc <interpretaComando+0x270>
 80015f2:	4b14      	ldr	r3, [pc, #80]	; (8001644 <interpretaComando+0x2b8>)
 80015f4:	781b      	ldrb	r3, [r3, #0]
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	f43f af3a 	beq.w	8001470 <interpretaComando+0xe4>
		}
		receptionFlag = true;
 80015fc:	4b12      	ldr	r3, [pc, #72]	; (8001648 <interpretaComando+0x2bc>)
 80015fe:	2201      	movs	r2, #1
 8001600:	701a      	strb	r2, [r3, #0]


		break;
 8001602:	e008      	b.n	8001616 <interpretaComando+0x28a>


	case 'r':
	case 'R':
		HAL_UART_Transmit(&huart3, (uint8_t *)"Resetting...\n", 14, 100);
 8001604:	2364      	movs	r3, #100	; 0x64
 8001606:	220e      	movs	r2, #14
 8001608:	4910      	ldr	r1, [pc, #64]	; (800164c <interpretaComando+0x2c0>)
 800160a:	480b      	ldr	r0, [pc, #44]	; (8001638 <interpretaComando+0x2ac>)
 800160c:	f00a fbec 	bl	800bde8 <HAL_UART_Transmit>
		NVIC_SystemReset();
 8001610:	f7ff fea6 	bl	8001360 <__NVIC_SystemReset>

		break;

	default:break;
 8001614:	bf00      	nop


	}

}
 8001616:	bf00      	nop
 8001618:	3710      	adds	r7, #16
 800161a:	46bd      	mov	sp, r7
 800161c:	bd80      	pop	{r7, pc}
 800161e:	bf00      	nop
 8001620:	24000574 	.word	0x24000574
 8001624:	24000450 	.word	0x24000450
 8001628:	24000440 	.word	0x24000440
 800162c:	24000278 	.word	0x24000278
 8001630:	240004b0 	.word	0x240004b0
 8001634:	08011a28 	.word	0x08011a28
 8001638:	240009d0 	.word	0x240009d0
 800163c:	08011a30 	.word	0x08011a30
 8001640:	08011a38 	.word	0x08011a38
 8001644:	24000276 	.word	0x24000276
 8001648:	24000593 	.word	0x24000593
 800164c:	08011a40 	.word	0x08011a40

08001650 <inverseKinematic>:
double A1, B1, C1, XJ1_1, XJ1_2, YJ1_1, YJ1_2, ZJ1_1, ZJ1_2, A11, A12, A13, A14, A15;
double A2, B2, C2, XJ2_1, XJ2_2, YJ2_1, YJ2_2, ZJ2_1, ZJ2_2;
double A3, B3, C3, XJ3_1, XJ3_2, YJ3_1, YJ3_2, ZJ3_1, ZJ3_2;


void inverseKinematic(Vec3D _Pfin) {
 8001650:	b580      	push	{r7, lr}
 8001652:	ed2d 8b04 	vpush	{d8-d9}
 8001656:	b086      	sub	sp, #24
 8001658:	af00      	add	r7, sp, #0
 800165a:	eeb0 5b40 	vmov.f64	d5, d0
 800165e:	eeb0 6b41 	vmov.f64	d6, d1
 8001662:	eeb0 7b42 	vmov.f64	d7, d2
 8001666:	ed87 5b00 	vstr	d5, [r7]
 800166a:	ed87 6b02 	vstr	d6, [r7, #8]
 800166e:	ed87 7b04 	vstr	d7, [r7, #16]

	A1 = 1.0 + pow(((-2.0  * (R + (_Pfin.y - r))) / (2 * _Pfin.z)), 2);
 8001672:	ed97 7b02 	vldr	d7, [r7, #8]
 8001676:	ed9f 6bee 	vldr	d6, [pc, #952]	; 8001a30 <inverseKinematic+0x3e0>
 800167a:	ee37 7b46 	vsub.f64	d7, d7, d6
 800167e:	ed9f 6bee 	vldr	d6, [pc, #952]	; 8001a38 <inverseKinematic+0x3e8>
 8001682:	ee37 7b06 	vadd.f64	d7, d7, d6
 8001686:	eeb8 6b00 	vmov.f64	d6, #128	; 0xc0000000 -2.0
 800168a:	ee27 6b06 	vmul.f64	d6, d7, d6
 800168e:	ed97 7b04 	vldr	d7, [r7, #16]
 8001692:	ee37 7b07 	vadd.f64	d7, d7, d7
 8001696:	ee86 5b07 	vdiv.f64	d5, d6, d7
 800169a:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 800169e:	eeb0 0b45 	vmov.f64	d0, d5
 80016a2:	f00f fd7d 	bl	80111a0 <pow>
 80016a6:	eeb0 7b40 	vmov.f64	d7, d0
 80016aa:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 80016ae:	ee37 7b06 	vadd.f64	d7, d7, d6
 80016b2:	4bf9      	ldr	r3, [pc, #996]	; (8001a98 <inverseKinematic+0x448>)
 80016b4:	ed83 7b00 	vstr	d7, [r3]
	A2 = 4.0 + pow(((2.0 * sqrt(3.0) * R * C30 + 2.0 * R * S30 - 2.0 * sqrt(3) * (_Pfin.x + r * C30) - 2.0 * (_Pfin.y + r * S30)) / (2.0 * _Pfin.z)), 2.0);
 80016b8:	ed97 7b00 	vldr	d7, [r7]
 80016bc:	ed9f 6be0 	vldr	d6, [pc, #896]	; 8001a40 <inverseKinematic+0x3f0>
 80016c0:	ee37 7b06 	vadd.f64	d7, d7, d6
 80016c4:	ed9f 6be0 	vldr	d6, [pc, #896]	; 8001a48 <inverseKinematic+0x3f8>
 80016c8:	ee27 7b06 	vmul.f64	d7, d7, d6
 80016cc:	ed9f 6be0 	vldr	d6, [pc, #896]	; 8001a50 <inverseKinematic+0x400>
 80016d0:	ee36 6b47 	vsub.f64	d6, d6, d7
 80016d4:	ed97 7b02 	vldr	d7, [r7, #8]
 80016d8:	ed9f 5bdf 	vldr	d5, [pc, #892]	; 8001a58 <inverseKinematic+0x408>
 80016dc:	ee37 7b05 	vadd.f64	d7, d7, d5
 80016e0:	ee37 7b07 	vadd.f64	d7, d7, d7
 80016e4:	ee36 6b47 	vsub.f64	d6, d6, d7
 80016e8:	ed97 7b04 	vldr	d7, [r7, #16]
 80016ec:	ee37 7b07 	vadd.f64	d7, d7, d7
 80016f0:	ee86 5b07 	vdiv.f64	d5, d6, d7
 80016f4:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 80016f8:	eeb0 0b45 	vmov.f64	d0, d5
 80016fc:	f00f fd50 	bl	80111a0 <pow>
 8001700:	eeb0 7b40 	vmov.f64	d7, d0
 8001704:	eeb1 6b00 	vmov.f64	d6, #16	; 0x40800000  4.0
 8001708:	ee37 7b06 	vadd.f64	d7, d7, d6
 800170c:	4be3      	ldr	r3, [pc, #908]	; (8001a9c <inverseKinematic+0x44c>)
 800170e:	ed83 7b00 	vstr	d7, [r3]
	A3 = 4.0 + pow(((2.0 * sqrt(3.0) * (_Pfin.x + r * C150) - 2.0 * (_Pfin.y + r * S150) - 2.0 * sqrt(3) * R * C150 + 2.0 * R * S150) / (2.0 * _Pfin.z)), 2.0);
 8001712:	ed97 7b00 	vldr	d7, [r7]
 8001716:	ed9f 6bca 	vldr	d6, [pc, #808]	; 8001a40 <inverseKinematic+0x3f0>
 800171a:	ee37 7b46 	vsub.f64	d7, d7, d6
 800171e:	ed9f 6bca 	vldr	d6, [pc, #808]	; 8001a48 <inverseKinematic+0x3f8>
 8001722:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001726:	ed97 7b02 	vldr	d7, [r7, #8]
 800172a:	ed9f 5bcb 	vldr	d5, [pc, #812]	; 8001a58 <inverseKinematic+0x408>
 800172e:	ee37 7b05 	vadd.f64	d7, d7, d5
 8001732:	ee37 7b07 	vadd.f64	d7, d7, d7
 8001736:	ee36 7b47 	vsub.f64	d7, d6, d7
 800173a:	ed9f 6bc9 	vldr	d6, [pc, #804]	; 8001a60 <inverseKinematic+0x410>
 800173e:	ee37 7b06 	vadd.f64	d7, d7, d6
 8001742:	ed9f 6bbd 	vldr	d6, [pc, #756]	; 8001a38 <inverseKinematic+0x3e8>
 8001746:	ee37 6b06 	vadd.f64	d6, d7, d6
 800174a:	ed97 7b04 	vldr	d7, [r7, #16]
 800174e:	ee37 7b07 	vadd.f64	d7, d7, d7
 8001752:	ee86 5b07 	vdiv.f64	d5, d6, d7
 8001756:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 800175a:	eeb0 0b45 	vmov.f64	d0, d5
 800175e:	f00f fd1f 	bl	80111a0 <pow>
 8001762:	eeb0 7b40 	vmov.f64	d7, d0
 8001766:	eeb1 6b00 	vmov.f64	d6, #16	; 0x40800000  4.0
 800176a:	ee37 7b06 	vadd.f64	d7, d7, d6
 800176e:	4bcc      	ldr	r3, [pc, #816]	; (8001aa0 <inverseKinematic+0x450>)
 8001770:	ed83 7b00 	vstr	d7, [r3]

	B1 = (2.0 * R) + (2.0 * ((-2.0  * (R + (_Pfin.y - r))) / (2.0 * _Pfin.z)) * ((-pow(R, 2.0) + pow(L1, 2.0) + pow((_Pfin.y - r), 2.0) + pow(_Pfin.z, 2.0) - pow(L2, 2.0) + pow(_Pfin.x, 2)) / (2 * _Pfin.z)));
 8001774:	ed97 7b02 	vldr	d7, [r7, #8]
 8001778:	ed9f 6bad 	vldr	d6, [pc, #692]	; 8001a30 <inverseKinematic+0x3e0>
 800177c:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001780:	ed9f 6bad 	vldr	d6, [pc, #692]	; 8001a38 <inverseKinematic+0x3e8>
 8001784:	ee37 7b06 	vadd.f64	d7, d7, d6
 8001788:	eeb8 6b00 	vmov.f64	d6, #128	; 0xc0000000 -2.0
 800178c:	ee27 5b06 	vmul.f64	d5, d7, d6
 8001790:	ed97 7b04 	vldr	d7, [r7, #16]
 8001794:	ee37 6b07 	vadd.f64	d6, d7, d7
 8001798:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800179c:	ee37 8b07 	vadd.f64	d8, d7, d7
 80017a0:	ed97 7b02 	vldr	d7, [r7, #8]
 80017a4:	ed9f 6ba2 	vldr	d6, [pc, #648]	; 8001a30 <inverseKinematic+0x3e0>
 80017a8:	ee37 7b46 	vsub.f64	d7, d7, d6
 80017ac:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 80017b0:	eeb0 0b47 	vmov.f64	d0, d7
 80017b4:	f00f fcf4 	bl	80111a0 <pow>
 80017b8:	eeb0 7b40 	vmov.f64	d7, d0
 80017bc:	ed9f 6baa 	vldr	d6, [pc, #680]	; 8001a68 <inverseKinematic+0x418>
 80017c0:	ee37 9b06 	vadd.f64	d9, d7, d6
 80017c4:	ed97 7b04 	vldr	d7, [r7, #16]
 80017c8:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 80017cc:	eeb0 0b47 	vmov.f64	d0, d7
 80017d0:	f00f fce6 	bl	80111a0 <pow>
 80017d4:	eeb0 7b40 	vmov.f64	d7, d0
 80017d8:	ee39 7b07 	vadd.f64	d7, d9, d7
 80017dc:	ed9f 6ba4 	vldr	d6, [pc, #656]	; 8001a70 <inverseKinematic+0x420>
 80017e0:	ee37 9b46 	vsub.f64	d9, d7, d6
 80017e4:	ed97 7b00 	vldr	d7, [r7]
 80017e8:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 80017ec:	eeb0 0b47 	vmov.f64	d0, d7
 80017f0:	f00f fcd6 	bl	80111a0 <pow>
 80017f4:	eeb0 7b40 	vmov.f64	d7, d0
 80017f8:	ee39 5b07 	vadd.f64	d5, d9, d7
 80017fc:	ed97 7b04 	vldr	d7, [r7, #16]
 8001800:	ee37 6b07 	vadd.f64	d6, d7, d7
 8001804:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8001808:	ee28 7b07 	vmul.f64	d7, d8, d7
 800180c:	ed9f 6b9a 	vldr	d6, [pc, #616]	; 8001a78 <inverseKinematic+0x428>
 8001810:	ee37 7b06 	vadd.f64	d7, d7, d6
 8001814:	4ba3      	ldr	r3, [pc, #652]	; (8001aa4 <inverseKinematic+0x454>)
 8001816:	ed83 7b00 	vstr	d7, [r3]
	B2 = -2.0 * sqrt(3) * R * C30 - 2.0 * R * S30 + 2.0 * (((2.0 * sqrt(3) * R * C30 + 2.0 * R * S30)	+ (-2 * sqrt(3) * (_Pfin.x + r * C30)	- 2.0 * (_Pfin.y + r * S30))) / (2 * _Pfin.z)) * ((-pow(R, 2) + pow(L1, 2) + pow((_Pfin.x + r * C30), 2) + pow((_Pfin.y + r * S30), 2) + pow(_Pfin.z, 2) - pow(L2, 2)) / (2 * _Pfin.z));
 800181a:	ed97 7b00 	vldr	d7, [r7]
 800181e:	ed9f 6b88 	vldr	d6, [pc, #544]	; 8001a40 <inverseKinematic+0x3f0>
 8001822:	ee37 7b06 	vadd.f64	d7, d7, d6
 8001826:	ed9f 6b96 	vldr	d6, [pc, #600]	; 8001a80 <inverseKinematic+0x430>
 800182a:	ee27 6b06 	vmul.f64	d6, d7, d6
 800182e:	ed97 7b02 	vldr	d7, [r7, #8]
 8001832:	ed9f 5b89 	vldr	d5, [pc, #548]	; 8001a58 <inverseKinematic+0x408>
 8001836:	ee37 7b05 	vadd.f64	d7, d7, d5
 800183a:	ee37 7b07 	vadd.f64	d7, d7, d7
 800183e:	ee36 7b47 	vsub.f64	d7, d6, d7
 8001842:	ed9f 6b83 	vldr	d6, [pc, #524]	; 8001a50 <inverseKinematic+0x400>
 8001846:	ee37 5b06 	vadd.f64	d5, d7, d6
 800184a:	ed97 7b04 	vldr	d7, [r7, #16]
 800184e:	ee37 6b07 	vadd.f64	d6, d7, d7
 8001852:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8001856:	ee37 8b07 	vadd.f64	d8, d7, d7
 800185a:	ed97 7b00 	vldr	d7, [r7]
 800185e:	ed9f 6b78 	vldr	d6, [pc, #480]	; 8001a40 <inverseKinematic+0x3f0>
 8001862:	ee37 7b06 	vadd.f64	d7, d7, d6
 8001866:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 800186a:	eeb0 0b47 	vmov.f64	d0, d7
 800186e:	f00f fc97 	bl	80111a0 <pow>
 8001872:	eeb0 7b40 	vmov.f64	d7, d0
 8001876:	ed9f 6b7c 	vldr	d6, [pc, #496]	; 8001a68 <inverseKinematic+0x418>
 800187a:	ee37 9b06 	vadd.f64	d9, d7, d6
 800187e:	ed97 7b02 	vldr	d7, [r7, #8]
 8001882:	ed9f 6b75 	vldr	d6, [pc, #468]	; 8001a58 <inverseKinematic+0x408>
 8001886:	ee37 7b06 	vadd.f64	d7, d7, d6
 800188a:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 800188e:	eeb0 0b47 	vmov.f64	d0, d7
 8001892:	f00f fc85 	bl	80111a0 <pow>
 8001896:	eeb0 7b40 	vmov.f64	d7, d0
 800189a:	ee39 9b07 	vadd.f64	d9, d9, d7
 800189e:	ed97 7b04 	vldr	d7, [r7, #16]
 80018a2:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 80018a6:	eeb0 0b47 	vmov.f64	d0, d7
 80018aa:	f00f fc79 	bl	80111a0 <pow>
 80018ae:	eeb0 7b40 	vmov.f64	d7, d0
 80018b2:	ee39 7b07 	vadd.f64	d7, d9, d7
 80018b6:	ed9f 6b6e 	vldr	d6, [pc, #440]	; 8001a70 <inverseKinematic+0x420>
 80018ba:	ee37 5b46 	vsub.f64	d5, d7, d6
 80018be:	ed97 7b04 	vldr	d7, [r7, #16]
 80018c2:	ee37 6b07 	vadd.f64	d6, d7, d7
 80018c6:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80018ca:	ee28 7b07 	vmul.f64	d7, d8, d7
 80018ce:	ed9f 6b60 	vldr	d6, [pc, #384]	; 8001a50 <inverseKinematic+0x400>
 80018d2:	ee37 7b46 	vsub.f64	d7, d7, d6
 80018d6:	4b74      	ldr	r3, [pc, #464]	; (8001aa8 <inverseKinematic+0x458>)
 80018d8:	ed83 7b00 	vstr	d7, [r3]
	B3 = 2.0 * sqrt(3) * R * C150 - 2.0 * R * S150 + 2.0 * ((2.0 * sqrt(3) * (_Pfin.x + r * C150) - 2.0 * (_Pfin.y + r * S150) - 2.0 * sqrt(3) * R * C150 + 2.0 * R * S150) / (2 * _Pfin.z)) * ((pow((_Pfin.x + r * C150), 2) + pow((_Pfin.y + r * S150), 2) + pow(_Pfin.z, 2) - pow(L2, 2) - pow(R, 2) + pow(L1, 2)) / (2 * _Pfin.z));
 80018dc:	ed97 7b00 	vldr	d7, [r7]
 80018e0:	ed9f 6b57 	vldr	d6, [pc, #348]	; 8001a40 <inverseKinematic+0x3f0>
 80018e4:	ee37 7b46 	vsub.f64	d7, d7, d6
 80018e8:	ed9f 6b57 	vldr	d6, [pc, #348]	; 8001a48 <inverseKinematic+0x3f8>
 80018ec:	ee27 6b06 	vmul.f64	d6, d7, d6
 80018f0:	ed97 7b02 	vldr	d7, [r7, #8]
 80018f4:	ed9f 5b58 	vldr	d5, [pc, #352]	; 8001a58 <inverseKinematic+0x408>
 80018f8:	ee37 7b05 	vadd.f64	d7, d7, d5
 80018fc:	ee37 7b07 	vadd.f64	d7, d7, d7
 8001900:	ee36 7b47 	vsub.f64	d7, d6, d7
 8001904:	ed9f 6b56 	vldr	d6, [pc, #344]	; 8001a60 <inverseKinematic+0x410>
 8001908:	ee37 7b06 	vadd.f64	d7, d7, d6
 800190c:	ed9f 6b4a 	vldr	d6, [pc, #296]	; 8001a38 <inverseKinematic+0x3e8>
 8001910:	ee37 5b06 	vadd.f64	d5, d7, d6
 8001914:	ed97 7b04 	vldr	d7, [r7, #16]
 8001918:	ee37 6b07 	vadd.f64	d6, d7, d7
 800191c:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8001920:	ee37 8b07 	vadd.f64	d8, d7, d7
 8001924:	ed97 7b00 	vldr	d7, [r7]
 8001928:	ed9f 6b45 	vldr	d6, [pc, #276]	; 8001a40 <inverseKinematic+0x3f0>
 800192c:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001930:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8001934:	eeb0 0b47 	vmov.f64	d0, d7
 8001938:	f00f fc32 	bl	80111a0 <pow>
 800193c:	eeb0 9b40 	vmov.f64	d9, d0
 8001940:	ed97 7b02 	vldr	d7, [r7, #8]
 8001944:	ed9f 6b44 	vldr	d6, [pc, #272]	; 8001a58 <inverseKinematic+0x408>
 8001948:	ee37 7b06 	vadd.f64	d7, d7, d6
 800194c:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8001950:	eeb0 0b47 	vmov.f64	d0, d7
 8001954:	f00f fc24 	bl	80111a0 <pow>
 8001958:	eeb0 7b40 	vmov.f64	d7, d0
 800195c:	ee39 9b07 	vadd.f64	d9, d9, d7
 8001960:	ed97 7b04 	vldr	d7, [r7, #16]
 8001964:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8001968:	eeb0 0b47 	vmov.f64	d0, d7
 800196c:	f00f fc18 	bl	80111a0 <pow>
 8001970:	eeb0 7b40 	vmov.f64	d7, d0
 8001974:	ee39 7b07 	vadd.f64	d7, d9, d7
 8001978:	ed9f 6b3d 	vldr	d6, [pc, #244]	; 8001a70 <inverseKinematic+0x420>
 800197c:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001980:	ed9f 6b41 	vldr	d6, [pc, #260]	; 8001a88 <inverseKinematic+0x438>
 8001984:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001988:	ed9f 6b41 	vldr	d6, [pc, #260]	; 8001a90 <inverseKinematic+0x440>
 800198c:	ee37 5b06 	vadd.f64	d5, d7, d6
 8001990:	ed97 7b04 	vldr	d7, [r7, #16]
 8001994:	ee37 6b07 	vadd.f64	d6, d7, d7
 8001998:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800199c:	ee28 7b07 	vmul.f64	d7, d8, d7
 80019a0:	ed9f 6b2b 	vldr	d6, [pc, #172]	; 8001a50 <inverseKinematic+0x400>
 80019a4:	ee37 7b46 	vsub.f64	d7, d7, d6
 80019a8:	4b40      	ldr	r3, [pc, #256]	; (8001aac <inverseKinematic+0x45c>)
 80019aa:	ed83 7b00 	vstr	d7, [r3]

	C1 = (pow(((pow((_Pfin.y - r), 2) + pow(_Pfin.z, 2) - pow(L2, 2) + pow(_Pfin.x, 2) - pow(R, 2) + pow(L1, 2)) / (2 * _Pfin.z)), 2) - pow(L1, 2) + pow(R, 2));
 80019ae:	ed97 7b02 	vldr	d7, [r7, #8]
 80019b2:	ed9f 6b1f 	vldr	d6, [pc, #124]	; 8001a30 <inverseKinematic+0x3e0>
 80019b6:	ee37 7b46 	vsub.f64	d7, d7, d6
 80019ba:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 80019be:	eeb0 0b47 	vmov.f64	d0, d7
 80019c2:	f00f fbed 	bl	80111a0 <pow>
 80019c6:	eeb0 8b40 	vmov.f64	d8, d0
 80019ca:	ed97 7b04 	vldr	d7, [r7, #16]
 80019ce:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 80019d2:	eeb0 0b47 	vmov.f64	d0, d7
 80019d6:	f00f fbe3 	bl	80111a0 <pow>
 80019da:	eeb0 7b40 	vmov.f64	d7, d0
 80019de:	ee38 7b07 	vadd.f64	d7, d8, d7
 80019e2:	ed9f 6b23 	vldr	d6, [pc, #140]	; 8001a70 <inverseKinematic+0x420>
 80019e6:	ee37 8b46 	vsub.f64	d8, d7, d6
 80019ea:	ed97 7b00 	vldr	d7, [r7]
 80019ee:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 80019f2:	eeb0 0b47 	vmov.f64	d0, d7
 80019f6:	f00f fbd3 	bl	80111a0 <pow>
 80019fa:	eeb0 7b40 	vmov.f64	d7, d0
 80019fe:	ee38 7b07 	vadd.f64	d7, d8, d7
 8001a02:	ed9f 6b21 	vldr	d6, [pc, #132]	; 8001a88 <inverseKinematic+0x438>
 8001a06:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001a0a:	ed9f 6b21 	vldr	d6, [pc, #132]	; 8001a90 <inverseKinematic+0x440>
 8001a0e:	ee37 6b06 	vadd.f64	d6, d7, d6
 8001a12:	ed97 7b04 	vldr	d7, [r7, #16]
 8001a16:	ee37 7b07 	vadd.f64	d7, d7, d7
 8001a1a:	ee86 5b07 	vdiv.f64	d5, d6, d7
 8001a1e:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8001a22:	eeb0 0b45 	vmov.f64	d0, d5
 8001a26:	f00f fbbb 	bl	80111a0 <pow>
 8001a2a:	eeb0 7b40 	vmov.f64	d7, d0
 8001a2e:	e03f      	b.n	8001ab0 <inverseKinematic+0x460>
 8001a30:	1eb851ec 	.word	0x1eb851ec
 8001a34:	3fb1eb85 	.word	0x3fb1eb85
 8001a38:	24dd2f1b 	.word	0x24dd2f1b
 8001a3c:	3fc58106 	.word	0x3fc58106
 8001a40:	5625749b 	.word	0x5625749b
 8001a44:	3faf09d1 	.word	0x3faf09d1
 8001a48:	e8584caa 	.word	0xe8584caa
 8001a4c:	400bb67a 	.word	0x400bb67a
 8001a50:	24dd2f1d 	.word	0x24dd2f1d
 8001a54:	3fe58106 	.word	0x3fe58106
 8001a58:	1eb851ec 	.word	0x1eb851ec
 8001a5c:	3fa1eb85 	.word	0x3fa1eb85
 8001a60:	9ba5e356 	.word	0x9ba5e356
 8001a64:	3fe020c4 	.word	0x3fe020c4
 8001a68:	f705857e 	.word	0xf705857e
 8001a6c:	3f881e03 	.word	0x3f881e03
 8001a70:	70a3d70a 	.word	0x70a3d70a
 8001a74:	3fd70a3d 	.word	0x3fd70a3d
 8001a78:	24dd2f1b 	.word	0x24dd2f1b
 8001a7c:	3fd58106 	.word	0x3fd58106
 8001a80:	e8584caa 	.word	0xe8584caa
 8001a84:	c00bb67a 	.word	0xc00bb67a
 8001a88:	93d96639 	.word	0x93d96639
 8001a8c:	3f9ce6c0 	.word	0x3f9ce6c0
 8001a90:	47ae147c 	.word	0x47ae147c
 8001a94:	3fa47ae1 	.word	0x3fa47ae1
 8001a98:	24000288 	.word	0x24000288
 8001a9c:	240002d0 	.word	0x240002d0
 8001aa0:	24000318 	.word	0x24000318
 8001aa4:	24000290 	.word	0x24000290
 8001aa8:	240002d8 	.word	0x240002d8
 8001aac:	24000320 	.word	0x24000320
 8001ab0:	ed9f 6bdf 	vldr	d6, [pc, #892]	; 8001e30 <inverseKinematic+0x7e0>
 8001ab4:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001ab8:	ed9f 6bdf 	vldr	d6, [pc, #892]	; 8001e38 <inverseKinematic+0x7e8>
 8001abc:	ee37 7b06 	vadd.f64	d7, d7, d6
 8001ac0:	4be7      	ldr	r3, [pc, #924]	; (8001e60 <inverseKinematic+0x810>)
 8001ac2:	ed83 7b00 	vstr	d7, [r3]
	C2 = pow(R, 2) - pow(L1, 2) + pow(((-pow(R, 2) + pow(L1, 2) + pow((_Pfin.x + r * C30), 2) + pow((_Pfin.y + r * S30), 2) + pow(_Pfin.z, 2) - pow(L2, 2)) / (2.0 * _Pfin.z)), 2.0);
 8001ac6:	ed97 7b00 	vldr	d7, [r7]
 8001aca:	ed9f 6bdd 	vldr	d6, [pc, #884]	; 8001e40 <inverseKinematic+0x7f0>
 8001ace:	ee37 7b06 	vadd.f64	d7, d7, d6
 8001ad2:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8001ad6:	eeb0 0b47 	vmov.f64	d0, d7
 8001ada:	f00f fb61 	bl	80111a0 <pow>
 8001ade:	eeb0 7b40 	vmov.f64	d7, d0
 8001ae2:	ed9f 6bd9 	vldr	d6, [pc, #868]	; 8001e48 <inverseKinematic+0x7f8>
 8001ae6:	ee37 8b06 	vadd.f64	d8, d7, d6
 8001aea:	ed97 7b02 	vldr	d7, [r7, #8]
 8001aee:	ed9f 6bd8 	vldr	d6, [pc, #864]	; 8001e50 <inverseKinematic+0x800>
 8001af2:	ee37 7b06 	vadd.f64	d7, d7, d6
 8001af6:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8001afa:	eeb0 0b47 	vmov.f64	d0, d7
 8001afe:	f00f fb4f 	bl	80111a0 <pow>
 8001b02:	eeb0 7b40 	vmov.f64	d7, d0
 8001b06:	ee38 8b07 	vadd.f64	d8, d8, d7
 8001b0a:	ed97 7b04 	vldr	d7, [r7, #16]
 8001b0e:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8001b12:	eeb0 0b47 	vmov.f64	d0, d7
 8001b16:	f00f fb43 	bl	80111a0 <pow>
 8001b1a:	eeb0 7b40 	vmov.f64	d7, d0
 8001b1e:	ee38 7b07 	vadd.f64	d7, d8, d7
 8001b22:	ed9f 6bcd 	vldr	d6, [pc, #820]	; 8001e58 <inverseKinematic+0x808>
 8001b26:	ee37 6b46 	vsub.f64	d6, d7, d6
 8001b2a:	ed97 7b04 	vldr	d7, [r7, #16]
 8001b2e:	ee37 7b07 	vadd.f64	d7, d7, d7
 8001b32:	ee86 5b07 	vdiv.f64	d5, d6, d7
 8001b36:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8001b3a:	eeb0 0b45 	vmov.f64	d0, d5
 8001b3e:	f00f fb2f 	bl	80111a0 <pow>
 8001b42:	eeb0 7b40 	vmov.f64	d7, d0
 8001b46:	ed9f 6bc0 	vldr	d6, [pc, #768]	; 8001e48 <inverseKinematic+0x7f8>
 8001b4a:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001b4e:	4bc5      	ldr	r3, [pc, #788]	; (8001e64 <inverseKinematic+0x814>)
 8001b50:	ed83 7b00 	vstr	d7, [r3]
	C3 = pow(R, 2) - pow(L1, 2) + pow(((pow((_Pfin.x + r * C150), 2) + pow((_Pfin.y + r * S150), 2) + pow(_Pfin.z, 2) - pow(L2, 2) - pow(R, 2) + pow(L1, 2)) / (2.0 * _Pfin.z)), 2.0);
 8001b54:	ed97 7b00 	vldr	d7, [r7]
 8001b58:	ed9f 6bb9 	vldr	d6, [pc, #740]	; 8001e40 <inverseKinematic+0x7f0>
 8001b5c:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001b60:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8001b64:	eeb0 0b47 	vmov.f64	d0, d7
 8001b68:	f00f fb1a 	bl	80111a0 <pow>
 8001b6c:	eeb0 8b40 	vmov.f64	d8, d0
 8001b70:	ed97 7b02 	vldr	d7, [r7, #8]
 8001b74:	ed9f 6bb6 	vldr	d6, [pc, #728]	; 8001e50 <inverseKinematic+0x800>
 8001b78:	ee37 7b06 	vadd.f64	d7, d7, d6
 8001b7c:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8001b80:	eeb0 0b47 	vmov.f64	d0, d7
 8001b84:	f00f fb0c 	bl	80111a0 <pow>
 8001b88:	eeb0 7b40 	vmov.f64	d7, d0
 8001b8c:	ee38 8b07 	vadd.f64	d8, d8, d7
 8001b90:	ed97 7b04 	vldr	d7, [r7, #16]
 8001b94:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8001b98:	eeb0 0b47 	vmov.f64	d0, d7
 8001b9c:	f00f fb00 	bl	80111a0 <pow>
 8001ba0:	eeb0 7b40 	vmov.f64	d7, d0
 8001ba4:	ee38 7b07 	vadd.f64	d7, d8, d7
 8001ba8:	ed9f 6bab 	vldr	d6, [pc, #684]	; 8001e58 <inverseKinematic+0x808>
 8001bac:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001bb0:	ed9f 6ba1 	vldr	d6, [pc, #644]	; 8001e38 <inverseKinematic+0x7e8>
 8001bb4:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001bb8:	ed9f 6b9d 	vldr	d6, [pc, #628]	; 8001e30 <inverseKinematic+0x7e0>
 8001bbc:	ee37 6b06 	vadd.f64	d6, d7, d6
 8001bc0:	ed97 7b04 	vldr	d7, [r7, #16]
 8001bc4:	ee37 7b07 	vadd.f64	d7, d7, d7
 8001bc8:	ee86 5b07 	vdiv.f64	d5, d6, d7
 8001bcc:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8001bd0:	eeb0 0b45 	vmov.f64	d0, d5
 8001bd4:	f00f fae4 	bl	80111a0 <pow>
 8001bd8:	eeb0 7b40 	vmov.f64	d7, d0
 8001bdc:	ed9f 6b9a 	vldr	d6, [pc, #616]	; 8001e48 <inverseKinematic+0x7f8>
 8001be0:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001be4:	4ba0      	ldr	r3, [pc, #640]	; (8001e68 <inverseKinematic+0x818>)
 8001be6:	ed83 7b00 	vstr	d7, [r3]

	YJ1_1 = (-B1 - sqrt(pow(B1, 2) - 4 * A1 * C1)) / (2 * A1);
 8001bea:	4ba0      	ldr	r3, [pc, #640]	; (8001e6c <inverseKinematic+0x81c>)
 8001bec:	ed93 7b00 	vldr	d7, [r3]
 8001bf0:	eeb1 8b47 	vneg.f64	d8, d7
 8001bf4:	4b9d      	ldr	r3, [pc, #628]	; (8001e6c <inverseKinematic+0x81c>)
 8001bf6:	ed93 7b00 	vldr	d7, [r3]
 8001bfa:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8001bfe:	eeb0 0b47 	vmov.f64	d0, d7
 8001c02:	f00f facd 	bl	80111a0 <pow>
 8001c06:	eeb0 5b40 	vmov.f64	d5, d0
 8001c0a:	4b99      	ldr	r3, [pc, #612]	; (8001e70 <inverseKinematic+0x820>)
 8001c0c:	ed93 7b00 	vldr	d7, [r3]
 8001c10:	eeb1 6b00 	vmov.f64	d6, #16	; 0x40800000  4.0
 8001c14:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001c18:	4b91      	ldr	r3, [pc, #580]	; (8001e60 <inverseKinematic+0x810>)
 8001c1a:	ed93 7b00 	vldr	d7, [r3]
 8001c1e:	ee26 7b07 	vmul.f64	d7, d6, d7
 8001c22:	ee35 7b47 	vsub.f64	d7, d5, d7
 8001c26:	eeb0 0b47 	vmov.f64	d0, d7
 8001c2a:	f00f fd39 	bl	80116a0 <sqrt>
 8001c2e:	eeb0 7b40 	vmov.f64	d7, d0
 8001c32:	ee38 5b47 	vsub.f64	d5, d8, d7
 8001c36:	4b8e      	ldr	r3, [pc, #568]	; (8001e70 <inverseKinematic+0x820>)
 8001c38:	ed93 7b00 	vldr	d7, [r3]
 8001c3c:	ee37 6b07 	vadd.f64	d6, d7, d7
 8001c40:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8001c44:	4b8b      	ldr	r3, [pc, #556]	; (8001e74 <inverseKinematic+0x824>)
 8001c46:	ed83 7b00 	vstr	d7, [r3]
	YJ1_2 = (-B1 + sqrt(pow(B1, 2) - 4 * A1 * C1)) / (2 * A1);
 8001c4a:	4b88      	ldr	r3, [pc, #544]	; (8001e6c <inverseKinematic+0x81c>)
 8001c4c:	ed93 7b00 	vldr	d7, [r3]
 8001c50:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8001c54:	eeb0 0b47 	vmov.f64	d0, d7
 8001c58:	f00f faa2 	bl	80111a0 <pow>
 8001c5c:	eeb0 5b40 	vmov.f64	d5, d0
 8001c60:	4b83      	ldr	r3, [pc, #524]	; (8001e70 <inverseKinematic+0x820>)
 8001c62:	ed93 7b00 	vldr	d7, [r3]
 8001c66:	eeb1 6b00 	vmov.f64	d6, #16	; 0x40800000  4.0
 8001c6a:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001c6e:	4b7c      	ldr	r3, [pc, #496]	; (8001e60 <inverseKinematic+0x810>)
 8001c70:	ed93 7b00 	vldr	d7, [r3]
 8001c74:	ee26 7b07 	vmul.f64	d7, d6, d7
 8001c78:	ee35 7b47 	vsub.f64	d7, d5, d7
 8001c7c:	eeb0 0b47 	vmov.f64	d0, d7
 8001c80:	f00f fd0e 	bl	80116a0 <sqrt>
 8001c84:	eeb0 6b40 	vmov.f64	d6, d0
 8001c88:	4b78      	ldr	r3, [pc, #480]	; (8001e6c <inverseKinematic+0x81c>)
 8001c8a:	ed93 7b00 	vldr	d7, [r3]
 8001c8e:	ee36 5b47 	vsub.f64	d5, d6, d7
 8001c92:	4b77      	ldr	r3, [pc, #476]	; (8001e70 <inverseKinematic+0x820>)
 8001c94:	ed93 7b00 	vldr	d7, [r3]
 8001c98:	ee37 6b07 	vadd.f64	d6, d7, d7
 8001c9c:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8001ca0:	4b75      	ldr	r3, [pc, #468]	; (8001e78 <inverseKinematic+0x828>)
 8001ca2:	ed83 7b00 	vstr	d7, [r3]
	YJ2_1 = (-B2 + sqrt(pow(B2, 2) - 4 * A2 * C2)) / (2 * A2);
 8001ca6:	4b75      	ldr	r3, [pc, #468]	; (8001e7c <inverseKinematic+0x82c>)
 8001ca8:	ed93 7b00 	vldr	d7, [r3]
 8001cac:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8001cb0:	eeb0 0b47 	vmov.f64	d0, d7
 8001cb4:	f00f fa74 	bl	80111a0 <pow>
 8001cb8:	eeb0 5b40 	vmov.f64	d5, d0
 8001cbc:	4b70      	ldr	r3, [pc, #448]	; (8001e80 <inverseKinematic+0x830>)
 8001cbe:	ed93 7b00 	vldr	d7, [r3]
 8001cc2:	eeb1 6b00 	vmov.f64	d6, #16	; 0x40800000  4.0
 8001cc6:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001cca:	4b66      	ldr	r3, [pc, #408]	; (8001e64 <inverseKinematic+0x814>)
 8001ccc:	ed93 7b00 	vldr	d7, [r3]
 8001cd0:	ee26 7b07 	vmul.f64	d7, d6, d7
 8001cd4:	ee35 7b47 	vsub.f64	d7, d5, d7
 8001cd8:	eeb0 0b47 	vmov.f64	d0, d7
 8001cdc:	f00f fce0 	bl	80116a0 <sqrt>
 8001ce0:	eeb0 6b40 	vmov.f64	d6, d0
 8001ce4:	4b65      	ldr	r3, [pc, #404]	; (8001e7c <inverseKinematic+0x82c>)
 8001ce6:	ed93 7b00 	vldr	d7, [r3]
 8001cea:	ee36 5b47 	vsub.f64	d5, d6, d7
 8001cee:	4b64      	ldr	r3, [pc, #400]	; (8001e80 <inverseKinematic+0x830>)
 8001cf0:	ed93 7b00 	vldr	d7, [r3]
 8001cf4:	ee37 6b07 	vadd.f64	d6, d7, d7
 8001cf8:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8001cfc:	4b61      	ldr	r3, [pc, #388]	; (8001e84 <inverseKinematic+0x834>)
 8001cfe:	ed83 7b00 	vstr	d7, [r3]
	YJ2_2 = (-B2 - sqrt(pow(B2, 2) - 4 * A2 * C2)) / (2 * A2);
 8001d02:	4b5e      	ldr	r3, [pc, #376]	; (8001e7c <inverseKinematic+0x82c>)
 8001d04:	ed93 7b00 	vldr	d7, [r3]
 8001d08:	eeb1 8b47 	vneg.f64	d8, d7
 8001d0c:	4b5b      	ldr	r3, [pc, #364]	; (8001e7c <inverseKinematic+0x82c>)
 8001d0e:	ed93 7b00 	vldr	d7, [r3]
 8001d12:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8001d16:	eeb0 0b47 	vmov.f64	d0, d7
 8001d1a:	f00f fa41 	bl	80111a0 <pow>
 8001d1e:	eeb0 5b40 	vmov.f64	d5, d0
 8001d22:	4b57      	ldr	r3, [pc, #348]	; (8001e80 <inverseKinematic+0x830>)
 8001d24:	ed93 7b00 	vldr	d7, [r3]
 8001d28:	eeb1 6b00 	vmov.f64	d6, #16	; 0x40800000  4.0
 8001d2c:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001d30:	4b4c      	ldr	r3, [pc, #304]	; (8001e64 <inverseKinematic+0x814>)
 8001d32:	ed93 7b00 	vldr	d7, [r3]
 8001d36:	ee26 7b07 	vmul.f64	d7, d6, d7
 8001d3a:	ee35 7b47 	vsub.f64	d7, d5, d7
 8001d3e:	eeb0 0b47 	vmov.f64	d0, d7
 8001d42:	f00f fcad 	bl	80116a0 <sqrt>
 8001d46:	eeb0 7b40 	vmov.f64	d7, d0
 8001d4a:	ee38 5b47 	vsub.f64	d5, d8, d7
 8001d4e:	4b4c      	ldr	r3, [pc, #304]	; (8001e80 <inverseKinematic+0x830>)
 8001d50:	ed93 7b00 	vldr	d7, [r3]
 8001d54:	ee37 6b07 	vadd.f64	d6, d7, d7
 8001d58:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8001d5c:	4b4a      	ldr	r3, [pc, #296]	; (8001e88 <inverseKinematic+0x838>)
 8001d5e:	ed83 7b00 	vstr	d7, [r3]
	YJ3_1 = (-B3 + sqrt(pow(B3, 2) - 4 * A3 * C3)) / (2 * A3);
 8001d62:	4b4a      	ldr	r3, [pc, #296]	; (8001e8c <inverseKinematic+0x83c>)
 8001d64:	ed93 7b00 	vldr	d7, [r3]
 8001d68:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8001d6c:	eeb0 0b47 	vmov.f64	d0, d7
 8001d70:	f00f fa16 	bl	80111a0 <pow>
 8001d74:	eeb0 5b40 	vmov.f64	d5, d0
 8001d78:	4b45      	ldr	r3, [pc, #276]	; (8001e90 <inverseKinematic+0x840>)
 8001d7a:	ed93 7b00 	vldr	d7, [r3]
 8001d7e:	eeb1 6b00 	vmov.f64	d6, #16	; 0x40800000  4.0
 8001d82:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001d86:	4b38      	ldr	r3, [pc, #224]	; (8001e68 <inverseKinematic+0x818>)
 8001d88:	ed93 7b00 	vldr	d7, [r3]
 8001d8c:	ee26 7b07 	vmul.f64	d7, d6, d7
 8001d90:	ee35 7b47 	vsub.f64	d7, d5, d7
 8001d94:	eeb0 0b47 	vmov.f64	d0, d7
 8001d98:	f00f fc82 	bl	80116a0 <sqrt>
 8001d9c:	eeb0 6b40 	vmov.f64	d6, d0
 8001da0:	4b3a      	ldr	r3, [pc, #232]	; (8001e8c <inverseKinematic+0x83c>)
 8001da2:	ed93 7b00 	vldr	d7, [r3]
 8001da6:	ee36 5b47 	vsub.f64	d5, d6, d7
 8001daa:	4b39      	ldr	r3, [pc, #228]	; (8001e90 <inverseKinematic+0x840>)
 8001dac:	ed93 7b00 	vldr	d7, [r3]
 8001db0:	ee37 6b07 	vadd.f64	d6, d7, d7
 8001db4:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8001db8:	4b36      	ldr	r3, [pc, #216]	; (8001e94 <inverseKinematic+0x844>)
 8001dba:	ed83 7b00 	vstr	d7, [r3]
	YJ3_2 = (-B3 - sqrt(pow(B3, 2) - 4 * A3 * C3)) / (2 * A3);
 8001dbe:	4b33      	ldr	r3, [pc, #204]	; (8001e8c <inverseKinematic+0x83c>)
 8001dc0:	ed93 7b00 	vldr	d7, [r3]
 8001dc4:	eeb1 8b47 	vneg.f64	d8, d7
 8001dc8:	4b30      	ldr	r3, [pc, #192]	; (8001e8c <inverseKinematic+0x83c>)
 8001dca:	ed93 7b00 	vldr	d7, [r3]
 8001dce:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8001dd2:	eeb0 0b47 	vmov.f64	d0, d7
 8001dd6:	f00f f9e3 	bl	80111a0 <pow>
 8001dda:	eeb0 5b40 	vmov.f64	d5, d0
 8001dde:	4b2c      	ldr	r3, [pc, #176]	; (8001e90 <inverseKinematic+0x840>)
 8001de0:	ed93 7b00 	vldr	d7, [r3]
 8001de4:	eeb1 6b00 	vmov.f64	d6, #16	; 0x40800000  4.0
 8001de8:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001dec:	4b1e      	ldr	r3, [pc, #120]	; (8001e68 <inverseKinematic+0x818>)
 8001dee:	ed93 7b00 	vldr	d7, [r3]
 8001df2:	ee26 7b07 	vmul.f64	d7, d6, d7
 8001df6:	ee35 7b47 	vsub.f64	d7, d5, d7
 8001dfa:	eeb0 0b47 	vmov.f64	d0, d7
 8001dfe:	f00f fc4f 	bl	80116a0 <sqrt>
 8001e02:	eeb0 7b40 	vmov.f64	d7, d0
 8001e06:	ee38 5b47 	vsub.f64	d5, d8, d7
 8001e0a:	4b21      	ldr	r3, [pc, #132]	; (8001e90 <inverseKinematic+0x840>)
 8001e0c:	ed93 7b00 	vldr	d7, [r3]
 8001e10:	ee37 6b07 	vadd.f64	d6, d7, d7
 8001e14:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8001e18:	4b1f      	ldr	r3, [pc, #124]	; (8001e98 <inverseKinematic+0x848>)
 8001e1a:	ed83 7b00 	vstr	d7, [r3]

	XJ1_1 = 0;
 8001e1e:	491f      	ldr	r1, [pc, #124]	; (8001e9c <inverseKinematic+0x84c>)
 8001e20:	f04f 0200 	mov.w	r2, #0
 8001e24:	f04f 0300 	mov.w	r3, #0
 8001e28:	e9c1 2300 	strd	r2, r3, [r1]
 8001e2c:	e038      	b.n	8001ea0 <inverseKinematic+0x850>
 8001e2e:	bf00      	nop
 8001e30:	47ae147c 	.word	0x47ae147c
 8001e34:	3fa47ae1 	.word	0x3fa47ae1
 8001e38:	93d96639 	.word	0x93d96639
 8001e3c:	3f9ce6c0 	.word	0x3f9ce6c0
 8001e40:	5625749b 	.word	0x5625749b
 8001e44:	3faf09d1 	.word	0x3faf09d1
 8001e48:	f705857e 	.word	0xf705857e
 8001e4c:	3f881e03 	.word	0x3f881e03
 8001e50:	1eb851ec 	.word	0x1eb851ec
 8001e54:	3fa1eb85 	.word	0x3fa1eb85
 8001e58:	70a3d70a 	.word	0x70a3d70a
 8001e5c:	3fd70a3d 	.word	0x3fd70a3d
 8001e60:	24000298 	.word	0x24000298
 8001e64:	240002e0 	.word	0x240002e0
 8001e68:	24000328 	.word	0x24000328
 8001e6c:	24000290 	.word	0x24000290
 8001e70:	24000288 	.word	0x24000288
 8001e74:	240002b0 	.word	0x240002b0
 8001e78:	240002b8 	.word	0x240002b8
 8001e7c:	240002d8 	.word	0x240002d8
 8001e80:	240002d0 	.word	0x240002d0
 8001e84:	240002f8 	.word	0x240002f8
 8001e88:	24000300 	.word	0x24000300
 8001e8c:	24000320 	.word	0x24000320
 8001e90:	24000318 	.word	0x24000318
 8001e94:	24000340 	.word	0x24000340
 8001e98:	24000348 	.word	0x24000348
 8001e9c:	240002a0 	.word	0x240002a0
	XJ1_2 = 0;
 8001ea0:	49f1      	ldr	r1, [pc, #964]	; (8002268 <inverseKinematic+0xc18>)
 8001ea2:	f04f 0200 	mov.w	r2, #0
 8001ea6:	f04f 0300 	mov.w	r3, #0
 8001eaa:	e9c1 2300 	strd	r2, r3, [r1]
	XJ2_1 = sqrt(3) * YJ2_1;
 8001eae:	4bef      	ldr	r3, [pc, #956]	; (800226c <inverseKinematic+0xc1c>)
 8001eb0:	ed93 7b00 	vldr	d7, [r3]
 8001eb4:	ed9f 6bd2 	vldr	d6, [pc, #840]	; 8002200 <inverseKinematic+0xbb0>
 8001eb8:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001ebc:	4bec      	ldr	r3, [pc, #944]	; (8002270 <inverseKinematic+0xc20>)
 8001ebe:	ed83 7b00 	vstr	d7, [r3]
	XJ2_2 = sqrt(3) * YJ2_2;
 8001ec2:	4bec      	ldr	r3, [pc, #944]	; (8002274 <inverseKinematic+0xc24>)
 8001ec4:	ed93 7b00 	vldr	d7, [r3]
 8001ec8:	ed9f 6bcd 	vldr	d6, [pc, #820]	; 8002200 <inverseKinematic+0xbb0>
 8001ecc:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001ed0:	4be9      	ldr	r3, [pc, #932]	; (8002278 <inverseKinematic+0xc28>)
 8001ed2:	ed83 7b00 	vstr	d7, [r3]
	XJ3_1 = -sqrt(3) * YJ3_1;
 8001ed6:	4be9      	ldr	r3, [pc, #932]	; (800227c <inverseKinematic+0xc2c>)
 8001ed8:	ed93 7b00 	vldr	d7, [r3]
 8001edc:	ed9f 6bca 	vldr	d6, [pc, #808]	; 8002208 <inverseKinematic+0xbb8>
 8001ee0:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001ee4:	4be6      	ldr	r3, [pc, #920]	; (8002280 <inverseKinematic+0xc30>)
 8001ee6:	ed83 7b00 	vstr	d7, [r3]
	XJ3_2 = -sqrt(3) * YJ3_2;
 8001eea:	4be6      	ldr	r3, [pc, #920]	; (8002284 <inverseKinematic+0xc34>)
 8001eec:	ed93 7b00 	vldr	d7, [r3]
 8001ef0:	ed9f 6bc5 	vldr	d6, [pc, #788]	; 8002208 <inverseKinematic+0xbb8>
 8001ef4:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001ef8:	4be3      	ldr	r3, [pc, #908]	; (8002288 <inverseKinematic+0xc38>)
 8001efa:	ed83 7b00 	vstr	d7, [r3]

	ZJ1_1 = ((YJ1_1 * ((-2 * (R + (_Pfin.y - r))) / (2 * _Pfin.z))) + ((pow((_Pfin.y - r), 2) + pow(_Pfin.z, 2) - pow(L2, 2) + pow(_Pfin.x, 2) - pow(R, 2) + pow(L1, 2)) / (2 * _Pfin.z)));
 8001efe:	ed97 7b02 	vldr	d7, [r7, #8]
 8001f02:	ed9f 6bc3 	vldr	d6, [pc, #780]	; 8002210 <inverseKinematic+0xbc0>
 8001f06:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001f0a:	ed9f 6bc3 	vldr	d6, [pc, #780]	; 8002218 <inverseKinematic+0xbc8>
 8001f0e:	ee37 7b06 	vadd.f64	d7, d7, d6
 8001f12:	eeb8 6b00 	vmov.f64	d6, #128	; 0xc0000000 -2.0
 8001f16:	ee27 5b06 	vmul.f64	d5, d7, d6
 8001f1a:	ed97 7b04 	vldr	d7, [r7, #16]
 8001f1e:	ee37 7b07 	vadd.f64	d7, d7, d7
 8001f22:	ee85 6b07 	vdiv.f64	d6, d5, d7
 8001f26:	4bd9      	ldr	r3, [pc, #868]	; (800228c <inverseKinematic+0xc3c>)
 8001f28:	ed93 7b00 	vldr	d7, [r3]
 8001f2c:	ee26 8b07 	vmul.f64	d8, d6, d7
 8001f30:	ed97 7b02 	vldr	d7, [r7, #8]
 8001f34:	ed9f 6bb6 	vldr	d6, [pc, #728]	; 8002210 <inverseKinematic+0xbc0>
 8001f38:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001f3c:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8001f40:	eeb0 0b47 	vmov.f64	d0, d7
 8001f44:	f00f f92c 	bl	80111a0 <pow>
 8001f48:	eeb0 9b40 	vmov.f64	d9, d0
 8001f4c:	ed97 7b04 	vldr	d7, [r7, #16]
 8001f50:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8001f54:	eeb0 0b47 	vmov.f64	d0, d7
 8001f58:	f00f f922 	bl	80111a0 <pow>
 8001f5c:	eeb0 7b40 	vmov.f64	d7, d0
 8001f60:	ee39 7b07 	vadd.f64	d7, d9, d7
 8001f64:	ed9f 6bae 	vldr	d6, [pc, #696]	; 8002220 <inverseKinematic+0xbd0>
 8001f68:	ee37 9b46 	vsub.f64	d9, d7, d6
 8001f6c:	ed97 7b00 	vldr	d7, [r7]
 8001f70:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8001f74:	eeb0 0b47 	vmov.f64	d0, d7
 8001f78:	f00f f912 	bl	80111a0 <pow>
 8001f7c:	eeb0 7b40 	vmov.f64	d7, d0
 8001f80:	ee39 7b07 	vadd.f64	d7, d9, d7
 8001f84:	ed9f 6ba8 	vldr	d6, [pc, #672]	; 8002228 <inverseKinematic+0xbd8>
 8001f88:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001f8c:	ed9f 6ba8 	vldr	d6, [pc, #672]	; 8002230 <inverseKinematic+0xbe0>
 8001f90:	ee37 5b06 	vadd.f64	d5, d7, d6
 8001f94:	ed97 7b04 	vldr	d7, [r7, #16]
 8001f98:	ee37 6b07 	vadd.f64	d6, d7, d7
 8001f9c:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8001fa0:	ee38 7b07 	vadd.f64	d7, d8, d7
 8001fa4:	4bba      	ldr	r3, [pc, #744]	; (8002290 <inverseKinematic+0xc40>)
 8001fa6:	ed83 7b00 	vstr	d7, [r3]
	ZJ1_2 = ((YJ1_2 * ((-2 * (R + (_Pfin.y - r))) / (2 * _Pfin.z))) + ((pow((_Pfin.y - r), 2) + pow(_Pfin.z, 2) - pow(L2, 2) + pow(_Pfin.x, 2) - pow(R, 2) + pow(L1, 2)) / (2 * _Pfin.z)));
 8001faa:	ed97 7b02 	vldr	d7, [r7, #8]
 8001fae:	ed9f 6b98 	vldr	d6, [pc, #608]	; 8002210 <inverseKinematic+0xbc0>
 8001fb2:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001fb6:	ed9f 6b98 	vldr	d6, [pc, #608]	; 8002218 <inverseKinematic+0xbc8>
 8001fba:	ee37 7b06 	vadd.f64	d7, d7, d6
 8001fbe:	eeb8 6b00 	vmov.f64	d6, #128	; 0xc0000000 -2.0
 8001fc2:	ee27 5b06 	vmul.f64	d5, d7, d6
 8001fc6:	ed97 7b04 	vldr	d7, [r7, #16]
 8001fca:	ee37 7b07 	vadd.f64	d7, d7, d7
 8001fce:	ee85 6b07 	vdiv.f64	d6, d5, d7
 8001fd2:	4bb0      	ldr	r3, [pc, #704]	; (8002294 <inverseKinematic+0xc44>)
 8001fd4:	ed93 7b00 	vldr	d7, [r3]
 8001fd8:	ee26 8b07 	vmul.f64	d8, d6, d7
 8001fdc:	ed97 7b02 	vldr	d7, [r7, #8]
 8001fe0:	ed9f 6b8b 	vldr	d6, [pc, #556]	; 8002210 <inverseKinematic+0xbc0>
 8001fe4:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001fe8:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8001fec:	eeb0 0b47 	vmov.f64	d0, d7
 8001ff0:	f00f f8d6 	bl	80111a0 <pow>
 8001ff4:	eeb0 9b40 	vmov.f64	d9, d0
 8001ff8:	ed97 7b04 	vldr	d7, [r7, #16]
 8001ffc:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8002000:	eeb0 0b47 	vmov.f64	d0, d7
 8002004:	f00f f8cc 	bl	80111a0 <pow>
 8002008:	eeb0 7b40 	vmov.f64	d7, d0
 800200c:	ee39 7b07 	vadd.f64	d7, d9, d7
 8002010:	ed9f 6b83 	vldr	d6, [pc, #524]	; 8002220 <inverseKinematic+0xbd0>
 8002014:	ee37 9b46 	vsub.f64	d9, d7, d6
 8002018:	ed97 7b00 	vldr	d7, [r7]
 800201c:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8002020:	eeb0 0b47 	vmov.f64	d0, d7
 8002024:	f00f f8bc 	bl	80111a0 <pow>
 8002028:	eeb0 7b40 	vmov.f64	d7, d0
 800202c:	ee39 7b07 	vadd.f64	d7, d9, d7
 8002030:	ed9f 6b7d 	vldr	d6, [pc, #500]	; 8002228 <inverseKinematic+0xbd8>
 8002034:	ee37 7b46 	vsub.f64	d7, d7, d6
 8002038:	ed9f 6b7d 	vldr	d6, [pc, #500]	; 8002230 <inverseKinematic+0xbe0>
 800203c:	ee37 5b06 	vadd.f64	d5, d7, d6
 8002040:	ed97 7b04 	vldr	d7, [r7, #16]
 8002044:	ee37 6b07 	vadd.f64	d6, d7, d7
 8002048:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800204c:	ee38 7b07 	vadd.f64	d7, d8, d7
 8002050:	4b91      	ldr	r3, [pc, #580]	; (8002298 <inverseKinematic+0xc48>)
 8002052:	ed83 7b00 	vstr	d7, [r3]
	ZJ2_1 = YJ2_1 * (((2 * sqrt(3.0) * R * C30 + 2.0 * R * S30) + (-2 * sqrt(3) * (_Pfin.x + r * C30) - 2.0 * (_Pfin.y + r * S30))) / (2 * _Pfin.z)) + ((-pow(R, 2) + pow(L1, 2) + pow((_Pfin.x + r * C30), 2) + pow((_Pfin.y + r * S30), 2) + pow(_Pfin.z, 2) - pow(L2, 2)) / (2 * _Pfin.z));
 8002056:	ed97 7b00 	vldr	d7, [r7]
 800205a:	ed9f 6b77 	vldr	d6, [pc, #476]	; 8002238 <inverseKinematic+0xbe8>
 800205e:	ee37 7b06 	vadd.f64	d7, d7, d6
 8002062:	ed9f 6b77 	vldr	d6, [pc, #476]	; 8002240 <inverseKinematic+0xbf0>
 8002066:	ee27 6b06 	vmul.f64	d6, d7, d6
 800206a:	ed97 7b02 	vldr	d7, [r7, #8]
 800206e:	ed9f 5b76 	vldr	d5, [pc, #472]	; 8002248 <inverseKinematic+0xbf8>
 8002072:	ee37 7b05 	vadd.f64	d7, d7, d5
 8002076:	ee37 7b07 	vadd.f64	d7, d7, d7
 800207a:	ee36 7b47 	vsub.f64	d7, d6, d7
 800207e:	ed9f 6b74 	vldr	d6, [pc, #464]	; 8002250 <inverseKinematic+0xc00>
 8002082:	ee37 5b06 	vadd.f64	d5, d7, d6
 8002086:	ed97 7b04 	vldr	d7, [r7, #16]
 800208a:	ee37 7b07 	vadd.f64	d7, d7, d7
 800208e:	ee85 6b07 	vdiv.f64	d6, d5, d7
 8002092:	4b76      	ldr	r3, [pc, #472]	; (800226c <inverseKinematic+0xc1c>)
 8002094:	ed93 7b00 	vldr	d7, [r3]
 8002098:	ee26 8b07 	vmul.f64	d8, d6, d7
 800209c:	ed97 7b00 	vldr	d7, [r7]
 80020a0:	ed9f 6b65 	vldr	d6, [pc, #404]	; 8002238 <inverseKinematic+0xbe8>
 80020a4:	ee37 7b06 	vadd.f64	d7, d7, d6
 80020a8:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 80020ac:	eeb0 0b47 	vmov.f64	d0, d7
 80020b0:	f00f f876 	bl	80111a0 <pow>
 80020b4:	eeb0 7b40 	vmov.f64	d7, d0
 80020b8:	ed9f 6b67 	vldr	d6, [pc, #412]	; 8002258 <inverseKinematic+0xc08>
 80020bc:	ee37 9b06 	vadd.f64	d9, d7, d6
 80020c0:	ed97 7b02 	vldr	d7, [r7, #8]
 80020c4:	ed9f 6b60 	vldr	d6, [pc, #384]	; 8002248 <inverseKinematic+0xbf8>
 80020c8:	ee37 7b06 	vadd.f64	d7, d7, d6
 80020cc:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 80020d0:	eeb0 0b47 	vmov.f64	d0, d7
 80020d4:	f00f f864 	bl	80111a0 <pow>
 80020d8:	eeb0 7b40 	vmov.f64	d7, d0
 80020dc:	ee39 9b07 	vadd.f64	d9, d9, d7
 80020e0:	ed97 7b04 	vldr	d7, [r7, #16]
 80020e4:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 80020e8:	eeb0 0b47 	vmov.f64	d0, d7
 80020ec:	f00f f858 	bl	80111a0 <pow>
 80020f0:	eeb0 7b40 	vmov.f64	d7, d0
 80020f4:	ee39 7b07 	vadd.f64	d7, d9, d7
 80020f8:	ed9f 6b49 	vldr	d6, [pc, #292]	; 8002220 <inverseKinematic+0xbd0>
 80020fc:	ee37 5b46 	vsub.f64	d5, d7, d6
 8002100:	ed97 7b04 	vldr	d7, [r7, #16]
 8002104:	ee37 6b07 	vadd.f64	d6, d7, d7
 8002108:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800210c:	ee38 7b07 	vadd.f64	d7, d8, d7
 8002110:	4b62      	ldr	r3, [pc, #392]	; (800229c <inverseKinematic+0xc4c>)
 8002112:	ed83 7b00 	vstr	d7, [r3]
	ZJ2_2 = YJ2_2 * (((2 * sqrt(3.0) * R * C30 + 2.0 * R * S30) + (-2 * sqrt(3) * (_Pfin.x + r * C30) - 2.0 * (_Pfin.y + r * S30))) / (2 * _Pfin.z)) + ((-pow(R, 2) + pow(L1, 2) + pow((_Pfin.x + r * C30), 2) + pow((_Pfin.y + r * S30), 2) + pow(_Pfin.z, 2) - pow(L2, 2)) / (2 * _Pfin.z));
 8002116:	ed97 7b00 	vldr	d7, [r7]
 800211a:	ed9f 6b47 	vldr	d6, [pc, #284]	; 8002238 <inverseKinematic+0xbe8>
 800211e:	ee37 7b06 	vadd.f64	d7, d7, d6
 8002122:	ed9f 6b47 	vldr	d6, [pc, #284]	; 8002240 <inverseKinematic+0xbf0>
 8002126:	ee27 6b06 	vmul.f64	d6, d7, d6
 800212a:	ed97 7b02 	vldr	d7, [r7, #8]
 800212e:	ed9f 5b46 	vldr	d5, [pc, #280]	; 8002248 <inverseKinematic+0xbf8>
 8002132:	ee37 7b05 	vadd.f64	d7, d7, d5
 8002136:	ee37 7b07 	vadd.f64	d7, d7, d7
 800213a:	ee36 7b47 	vsub.f64	d7, d6, d7
 800213e:	ed9f 6b44 	vldr	d6, [pc, #272]	; 8002250 <inverseKinematic+0xc00>
 8002142:	ee37 5b06 	vadd.f64	d5, d7, d6
 8002146:	ed97 7b04 	vldr	d7, [r7, #16]
 800214a:	ee37 7b07 	vadd.f64	d7, d7, d7
 800214e:	ee85 6b07 	vdiv.f64	d6, d5, d7
 8002152:	4b48      	ldr	r3, [pc, #288]	; (8002274 <inverseKinematic+0xc24>)
 8002154:	ed93 7b00 	vldr	d7, [r3]
 8002158:	ee26 8b07 	vmul.f64	d8, d6, d7
 800215c:	ed97 7b00 	vldr	d7, [r7]
 8002160:	ed9f 6b35 	vldr	d6, [pc, #212]	; 8002238 <inverseKinematic+0xbe8>
 8002164:	ee37 7b06 	vadd.f64	d7, d7, d6
 8002168:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 800216c:	eeb0 0b47 	vmov.f64	d0, d7
 8002170:	f00f f816 	bl	80111a0 <pow>
 8002174:	eeb0 7b40 	vmov.f64	d7, d0
 8002178:	ed9f 6b37 	vldr	d6, [pc, #220]	; 8002258 <inverseKinematic+0xc08>
 800217c:	ee37 9b06 	vadd.f64	d9, d7, d6
 8002180:	ed97 7b02 	vldr	d7, [r7, #8]
 8002184:	ed9f 6b30 	vldr	d6, [pc, #192]	; 8002248 <inverseKinematic+0xbf8>
 8002188:	ee37 7b06 	vadd.f64	d7, d7, d6
 800218c:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8002190:	eeb0 0b47 	vmov.f64	d0, d7
 8002194:	f00f f804 	bl	80111a0 <pow>
 8002198:	eeb0 7b40 	vmov.f64	d7, d0
 800219c:	ee39 9b07 	vadd.f64	d9, d9, d7
 80021a0:	ed97 7b04 	vldr	d7, [r7, #16]
 80021a4:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 80021a8:	eeb0 0b47 	vmov.f64	d0, d7
 80021ac:	f00e fff8 	bl	80111a0 <pow>
 80021b0:	eeb0 7b40 	vmov.f64	d7, d0
 80021b4:	ee39 7b07 	vadd.f64	d7, d9, d7
 80021b8:	ed9f 6b19 	vldr	d6, [pc, #100]	; 8002220 <inverseKinematic+0xbd0>
 80021bc:	ee37 5b46 	vsub.f64	d5, d7, d6
 80021c0:	ed97 7b04 	vldr	d7, [r7, #16]
 80021c4:	ee37 6b07 	vadd.f64	d6, d7, d7
 80021c8:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80021cc:	ee38 7b07 	vadd.f64	d7, d8, d7
 80021d0:	4b33      	ldr	r3, [pc, #204]	; (80022a0 <inverseKinematic+0xc50>)
 80021d2:	ed83 7b00 	vstr	d7, [r3]
	ZJ3_1 = YJ3_1 * ((2 * sqrt(3.0) * (_Pfin.x + r * C150) - 2.0 * (_Pfin.y + r * S150) - 2.0 * sqrt(3) * R * C150 + 2.0 * R * S150) / (2.0 * _Pfin.z)) + ((pow((_Pfin.x + r * C150), 2.0) + pow((_Pfin.y + r * S150), 2) + pow(_Pfin.z, 2.0) - pow(L2, 2) - pow(R, 2) + pow(L1, 2)) / (2 * _Pfin.z));
 80021d6:	ed97 7b00 	vldr	d7, [r7]
 80021da:	ed9f 6b17 	vldr	d6, [pc, #92]	; 8002238 <inverseKinematic+0xbe8>
 80021de:	ee37 7b46 	vsub.f64	d7, d7, d6
 80021e2:	ed9f 6b1f 	vldr	d6, [pc, #124]	; 8002260 <inverseKinematic+0xc10>
 80021e6:	ee27 6b06 	vmul.f64	d6, d7, d6
 80021ea:	ed97 7b02 	vldr	d7, [r7, #8]
 80021ee:	ed9f 5b16 	vldr	d5, [pc, #88]	; 8002248 <inverseKinematic+0xbf8>
 80021f2:	ee37 7b05 	vadd.f64	d7, d7, d5
 80021f6:	ee37 7b07 	vadd.f64	d7, d7, d7
 80021fa:	ee36 7b47 	vsub.f64	d7, d6, d7
 80021fe:	e051      	b.n	80022a4 <inverseKinematic+0xc54>
 8002200:	e8584caa 	.word	0xe8584caa
 8002204:	3ffbb67a 	.word	0x3ffbb67a
 8002208:	e8584caa 	.word	0xe8584caa
 800220c:	bffbb67a 	.word	0xbffbb67a
 8002210:	1eb851ec 	.word	0x1eb851ec
 8002214:	3fb1eb85 	.word	0x3fb1eb85
 8002218:	24dd2f1b 	.word	0x24dd2f1b
 800221c:	3fc58106 	.word	0x3fc58106
 8002220:	70a3d70a 	.word	0x70a3d70a
 8002224:	3fd70a3d 	.word	0x3fd70a3d
 8002228:	93d96639 	.word	0x93d96639
 800222c:	3f9ce6c0 	.word	0x3f9ce6c0
 8002230:	47ae147c 	.word	0x47ae147c
 8002234:	3fa47ae1 	.word	0x3fa47ae1
 8002238:	5625749b 	.word	0x5625749b
 800223c:	3faf09d1 	.word	0x3faf09d1
 8002240:	e8584caa 	.word	0xe8584caa
 8002244:	c00bb67a 	.word	0xc00bb67a
 8002248:	1eb851ec 	.word	0x1eb851ec
 800224c:	3fa1eb85 	.word	0x3fa1eb85
 8002250:	24dd2f1d 	.word	0x24dd2f1d
 8002254:	3fe58106 	.word	0x3fe58106
 8002258:	f705857e 	.word	0xf705857e
 800225c:	3f881e03 	.word	0x3f881e03
 8002260:	e8584caa 	.word	0xe8584caa
 8002264:	400bb67a 	.word	0x400bb67a
 8002268:	240002a8 	.word	0x240002a8
 800226c:	240002f8 	.word	0x240002f8
 8002270:	240002e8 	.word	0x240002e8
 8002274:	24000300 	.word	0x24000300
 8002278:	240002f0 	.word	0x240002f0
 800227c:	24000340 	.word	0x24000340
 8002280:	24000330 	.word	0x24000330
 8002284:	24000348 	.word	0x24000348
 8002288:	24000338 	.word	0x24000338
 800228c:	240002b0 	.word	0x240002b0
 8002290:	240002c0 	.word	0x240002c0
 8002294:	240002b8 	.word	0x240002b8
 8002298:	240002c8 	.word	0x240002c8
 800229c:	24000308 	.word	0x24000308
 80022a0:	24000310 	.word	0x24000310
 80022a4:	ed9f 6b90 	vldr	d6, [pc, #576]	; 80024e8 <inverseKinematic+0xe98>
 80022a8:	ee37 7b06 	vadd.f64	d7, d7, d6
 80022ac:	ed9f 6b90 	vldr	d6, [pc, #576]	; 80024f0 <inverseKinematic+0xea0>
 80022b0:	ee37 5b06 	vadd.f64	d5, d7, d6
 80022b4:	ed97 7b04 	vldr	d7, [r7, #16]
 80022b8:	ee37 7b07 	vadd.f64	d7, d7, d7
 80022bc:	ee85 6b07 	vdiv.f64	d6, d5, d7
 80022c0:	4b9f      	ldr	r3, [pc, #636]	; (8002540 <inverseKinematic+0xef0>)
 80022c2:	ed93 7b00 	vldr	d7, [r3]
 80022c6:	ee26 8b07 	vmul.f64	d8, d6, d7
 80022ca:	ed97 7b00 	vldr	d7, [r7]
 80022ce:	ed9f 6b8a 	vldr	d6, [pc, #552]	; 80024f8 <inverseKinematic+0xea8>
 80022d2:	ee37 7b46 	vsub.f64	d7, d7, d6
 80022d6:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 80022da:	eeb0 0b47 	vmov.f64	d0, d7
 80022de:	f00e ff5f 	bl	80111a0 <pow>
 80022e2:	eeb0 9b40 	vmov.f64	d9, d0
 80022e6:	ed97 7b02 	vldr	d7, [r7, #8]
 80022ea:	ed9f 6b85 	vldr	d6, [pc, #532]	; 8002500 <inverseKinematic+0xeb0>
 80022ee:	ee37 7b06 	vadd.f64	d7, d7, d6
 80022f2:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 80022f6:	eeb0 0b47 	vmov.f64	d0, d7
 80022fa:	f00e ff51 	bl	80111a0 <pow>
 80022fe:	eeb0 7b40 	vmov.f64	d7, d0
 8002302:	ee39 9b07 	vadd.f64	d9, d9, d7
 8002306:	ed97 7b04 	vldr	d7, [r7, #16]
 800230a:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 800230e:	eeb0 0b47 	vmov.f64	d0, d7
 8002312:	f00e ff45 	bl	80111a0 <pow>
 8002316:	eeb0 7b40 	vmov.f64	d7, d0
 800231a:	ee39 7b07 	vadd.f64	d7, d9, d7
 800231e:	ed9f 6b7a 	vldr	d6, [pc, #488]	; 8002508 <inverseKinematic+0xeb8>
 8002322:	ee37 7b46 	vsub.f64	d7, d7, d6
 8002326:	ed9f 6b7a 	vldr	d6, [pc, #488]	; 8002510 <inverseKinematic+0xec0>
 800232a:	ee37 7b46 	vsub.f64	d7, d7, d6
 800232e:	ed9f 6b7a 	vldr	d6, [pc, #488]	; 8002518 <inverseKinematic+0xec8>
 8002332:	ee37 5b06 	vadd.f64	d5, d7, d6
 8002336:	ed97 7b04 	vldr	d7, [r7, #16]
 800233a:	ee37 6b07 	vadd.f64	d6, d7, d7
 800233e:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8002342:	ee38 7b07 	vadd.f64	d7, d8, d7
 8002346:	4b7f      	ldr	r3, [pc, #508]	; (8002544 <inverseKinematic+0xef4>)
 8002348:	ed83 7b00 	vstr	d7, [r3]
	ZJ3_2 = YJ3_2 * ((2 * sqrt(3.0) * (_Pfin.x + r * C150) - 2.0 * (_Pfin.y + r * S150) - 2.0 * sqrt(3) * R * C150 + 2.0 * R * S150) / (2.0 * _Pfin.z)) + ((pow((_Pfin.x + r * C150), 2.0) + pow((_Pfin.y + r * S150), 2) + pow(_Pfin.z, 2) - pow(L2, 2) - pow(R, 2) + pow(L1, 2)) / (2 * _Pfin.z));
 800234c:	ed97 7b00 	vldr	d7, [r7]
 8002350:	ed9f 6b69 	vldr	d6, [pc, #420]	; 80024f8 <inverseKinematic+0xea8>
 8002354:	ee37 7b46 	vsub.f64	d7, d7, d6
 8002358:	ed9f 6b71 	vldr	d6, [pc, #452]	; 8002520 <inverseKinematic+0xed0>
 800235c:	ee27 6b06 	vmul.f64	d6, d7, d6
 8002360:	ed97 7b02 	vldr	d7, [r7, #8]
 8002364:	ed9f 5b66 	vldr	d5, [pc, #408]	; 8002500 <inverseKinematic+0xeb0>
 8002368:	ee37 7b05 	vadd.f64	d7, d7, d5
 800236c:	ee37 7b07 	vadd.f64	d7, d7, d7
 8002370:	ee36 7b47 	vsub.f64	d7, d6, d7
 8002374:	ed9f 6b5c 	vldr	d6, [pc, #368]	; 80024e8 <inverseKinematic+0xe98>
 8002378:	ee37 7b06 	vadd.f64	d7, d7, d6
 800237c:	ed9f 6b5c 	vldr	d6, [pc, #368]	; 80024f0 <inverseKinematic+0xea0>
 8002380:	ee37 5b06 	vadd.f64	d5, d7, d6
 8002384:	ed97 7b04 	vldr	d7, [r7, #16]
 8002388:	ee37 7b07 	vadd.f64	d7, d7, d7
 800238c:	ee85 6b07 	vdiv.f64	d6, d5, d7
 8002390:	4b6d      	ldr	r3, [pc, #436]	; (8002548 <inverseKinematic+0xef8>)
 8002392:	ed93 7b00 	vldr	d7, [r3]
 8002396:	ee26 8b07 	vmul.f64	d8, d6, d7
 800239a:	ed97 7b00 	vldr	d7, [r7]
 800239e:	ed9f 6b56 	vldr	d6, [pc, #344]	; 80024f8 <inverseKinematic+0xea8>
 80023a2:	ee37 7b46 	vsub.f64	d7, d7, d6
 80023a6:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 80023aa:	eeb0 0b47 	vmov.f64	d0, d7
 80023ae:	f00e fef7 	bl	80111a0 <pow>
 80023b2:	eeb0 9b40 	vmov.f64	d9, d0
 80023b6:	ed97 7b02 	vldr	d7, [r7, #8]
 80023ba:	ed9f 6b51 	vldr	d6, [pc, #324]	; 8002500 <inverseKinematic+0xeb0>
 80023be:	ee37 7b06 	vadd.f64	d7, d7, d6
 80023c2:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 80023c6:	eeb0 0b47 	vmov.f64	d0, d7
 80023ca:	f00e fee9 	bl	80111a0 <pow>
 80023ce:	eeb0 7b40 	vmov.f64	d7, d0
 80023d2:	ee39 9b07 	vadd.f64	d9, d9, d7
 80023d6:	ed97 7b04 	vldr	d7, [r7, #16]
 80023da:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 80023de:	eeb0 0b47 	vmov.f64	d0, d7
 80023e2:	f00e fedd 	bl	80111a0 <pow>
 80023e6:	eeb0 7b40 	vmov.f64	d7, d0
 80023ea:	ee39 7b07 	vadd.f64	d7, d9, d7
 80023ee:	ed9f 6b46 	vldr	d6, [pc, #280]	; 8002508 <inverseKinematic+0xeb8>
 80023f2:	ee37 7b46 	vsub.f64	d7, d7, d6
 80023f6:	ed9f 6b46 	vldr	d6, [pc, #280]	; 8002510 <inverseKinematic+0xec0>
 80023fa:	ee37 7b46 	vsub.f64	d7, d7, d6
 80023fe:	ed9f 6b46 	vldr	d6, [pc, #280]	; 8002518 <inverseKinematic+0xec8>
 8002402:	ee37 5b06 	vadd.f64	d5, d7, d6
 8002406:	ed97 7b04 	vldr	d7, [r7, #16]
 800240a:	ee37 6b07 	vadd.f64	d6, d7, d7
 800240e:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8002412:	ee38 7b07 	vadd.f64	d7, d8, d7
 8002416:	4b4d      	ldr	r3, [pc, #308]	; (800254c <inverseKinematic+0xefc>)
 8002418:	ed83 7b00 	vstr	d7, [r3]

	motor1.theta = -1.0 * asin(ZJ1_1 / L1);
 800241c:	4b4c      	ldr	r3, [pc, #304]	; (8002550 <inverseKinematic+0xf00>)
 800241e:	ed93 7b00 	vldr	d7, [r3]
 8002422:	ed9f 5b41 	vldr	d5, [pc, #260]	; 8002528 <inverseKinematic+0xed8>
 8002426:	ee87 6b05 	vdiv.f64	d6, d7, d5
 800242a:	eeb0 0b46 	vmov.f64	d0, d6
 800242e:	f00f f909 	bl	8011644 <asin>
 8002432:	eeb0 7b40 	vmov.f64	d7, d0
 8002436:	eeb1 7b47 	vneg.f64	d7, d7
 800243a:	4b46      	ldr	r3, [pc, #280]	; (8002554 <inverseKinematic+0xf04>)
 800243c:	ed83 7b00 	vstr	d7, [r3]
	motor1.theta = motor1.theta * RAD_TO_DEG;
 8002440:	4b44      	ldr	r3, [pc, #272]	; (8002554 <inverseKinematic+0xf04>)
 8002442:	ed93 7b00 	vldr	d7, [r3]
 8002446:	ed9f 6b3a 	vldr	d6, [pc, #232]	; 8002530 <inverseKinematic+0xee0>
 800244a:	ee27 6b06 	vmul.f64	d6, d7, d6
 800244e:	ed9f 5b3a 	vldr	d5, [pc, #232]	; 8002538 <inverseKinematic+0xee8>
 8002452:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8002456:	4b3f      	ldr	r3, [pc, #252]	; (8002554 <inverseKinematic+0xf04>)
 8002458:	ed83 7b00 	vstr	d7, [r3]
	motor2.theta = -1.0 * asin(ZJ2_1 / L1);
 800245c:	4b3e      	ldr	r3, [pc, #248]	; (8002558 <inverseKinematic+0xf08>)
 800245e:	ed93 7b00 	vldr	d7, [r3]
 8002462:	ed9f 5b31 	vldr	d5, [pc, #196]	; 8002528 <inverseKinematic+0xed8>
 8002466:	ee87 6b05 	vdiv.f64	d6, d7, d5
 800246a:	eeb0 0b46 	vmov.f64	d0, d6
 800246e:	f00f f8e9 	bl	8011644 <asin>
 8002472:	eeb0 7b40 	vmov.f64	d7, d0
 8002476:	eeb1 7b47 	vneg.f64	d7, d7
 800247a:	4b38      	ldr	r3, [pc, #224]	; (800255c <inverseKinematic+0xf0c>)
 800247c:	ed83 7b00 	vstr	d7, [r3]
	motor2.theta = motor2.theta * RAD_TO_DEG;
 8002480:	4b36      	ldr	r3, [pc, #216]	; (800255c <inverseKinematic+0xf0c>)
 8002482:	ed93 7b00 	vldr	d7, [r3]
 8002486:	ed9f 6b2a 	vldr	d6, [pc, #168]	; 8002530 <inverseKinematic+0xee0>
 800248a:	ee27 6b06 	vmul.f64	d6, d7, d6
 800248e:	ed9f 5b2a 	vldr	d5, [pc, #168]	; 8002538 <inverseKinematic+0xee8>
 8002492:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8002496:	4b31      	ldr	r3, [pc, #196]	; (800255c <inverseKinematic+0xf0c>)
 8002498:	ed83 7b00 	vstr	d7, [r3]
	motor3.theta = -1.0 * asin(ZJ3_1 / L1);
 800249c:	4b29      	ldr	r3, [pc, #164]	; (8002544 <inverseKinematic+0xef4>)
 800249e:	ed93 7b00 	vldr	d7, [r3]
 80024a2:	ed9f 5b21 	vldr	d5, [pc, #132]	; 8002528 <inverseKinematic+0xed8>
 80024a6:	ee87 6b05 	vdiv.f64	d6, d7, d5
 80024aa:	eeb0 0b46 	vmov.f64	d0, d6
 80024ae:	f00f f8c9 	bl	8011644 <asin>
 80024b2:	eeb0 7b40 	vmov.f64	d7, d0
 80024b6:	eeb1 7b47 	vneg.f64	d7, d7
 80024ba:	4b29      	ldr	r3, [pc, #164]	; (8002560 <inverseKinematic+0xf10>)
 80024bc:	ed83 7b00 	vstr	d7, [r3]
	motor3.theta = motor3.theta * RAD_TO_DEG;
 80024c0:	4b27      	ldr	r3, [pc, #156]	; (8002560 <inverseKinematic+0xf10>)
 80024c2:	ed93 7b00 	vldr	d7, [r3]
 80024c6:	ed9f 6b1a 	vldr	d6, [pc, #104]	; 8002530 <inverseKinematic+0xee0>
 80024ca:	ee27 6b06 	vmul.f64	d6, d7, d6
 80024ce:	ed9f 5b1a 	vldr	d5, [pc, #104]	; 8002538 <inverseKinematic+0xee8>
 80024d2:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80024d6:	4b22      	ldr	r3, [pc, #136]	; (8002560 <inverseKinematic+0xf10>)
 80024d8:	ed83 7b00 	vstr	d7, [r3]
}
 80024dc:	bf00      	nop
 80024de:	3718      	adds	r7, #24
 80024e0:	46bd      	mov	sp, r7
 80024e2:	ecbd 8b04 	vpop	{d8-d9}
 80024e6:	bd80      	pop	{r7, pc}
 80024e8:	9ba5e356 	.word	0x9ba5e356
 80024ec:	3fe020c4 	.word	0x3fe020c4
 80024f0:	24dd2f1b 	.word	0x24dd2f1b
 80024f4:	3fc58106 	.word	0x3fc58106
 80024f8:	5625749b 	.word	0x5625749b
 80024fc:	3faf09d1 	.word	0x3faf09d1
 8002500:	1eb851ec 	.word	0x1eb851ec
 8002504:	3fa1eb85 	.word	0x3fa1eb85
 8002508:	70a3d70a 	.word	0x70a3d70a
 800250c:	3fd70a3d 	.word	0x3fd70a3d
 8002510:	93d96639 	.word	0x93d96639
 8002514:	3f9ce6c0 	.word	0x3f9ce6c0
 8002518:	47ae147c 	.word	0x47ae147c
 800251c:	3fa47ae1 	.word	0x3fa47ae1
 8002520:	e8584caa 	.word	0xe8584caa
 8002524:	400bb67a 	.word	0x400bb67a
 8002528:	9999999a 	.word	0x9999999a
 800252c:	3fc99999 	.word	0x3fc99999
 8002530:	00000000 	.word	0x00000000
 8002534:	40668000 	.word	0x40668000
 8002538:	54442eea 	.word	0x54442eea
 800253c:	400921fb 	.word	0x400921fb
 8002540:	24000340 	.word	0x24000340
 8002544:	24000350 	.word	0x24000350
 8002548:	24000348 	.word	0x24000348
 800254c:	24000358 	.word	0x24000358
 8002550:	240002c0 	.word	0x240002c0
 8002554:	24000360 	.word	0x24000360
 8002558:	24000308 	.word	0x24000308
 800255c:	240003a8 	.word	0x240003a8
 8002560:	240003f0 	.word	0x240003f0

08002564 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002564:	b580      	push	{r7, lr}
 8002566:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002568:	f003 ff80 	bl	800646c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800256c:	f000 f81c 	bl	80025a8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002570:	f7fe fa84 	bl	8000a7c <MX_GPIO_Init>
  MX_TIM2_Init();
 8002574:	f001 fb4c 	bl	8003c10 <MX_TIM2_Init>
  MX_USART3_UART_Init();
 8002578:	f003 fdd6 	bl	8006128 <MX_USART3_UART_Init>
  MX_TIM12_Init();
 800257c:	f001 fcea 	bl	8003f54 <MX_TIM12_Init>
  MX_TIM13_Init();
 8002580:	f001 fd4a 	bl	8004018 <MX_TIM13_Init>
  MX_TIM14_Init();
 8002584:	f001 fd94 	bl	80040b0 <MX_TIM14_Init>
  MX_TIM5_Init();
 8002588:	f001 fc96 	bl	8003eb8 <MX_TIM5_Init>
  MX_TIM15_Init();
 800258c:	f001 fddc 	bl	8004148 <MX_TIM15_Init>
  MX_USART2_UART_Init();
 8002590:	f003 fd7e 	bl	8006090 <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 8002594:	f003 fd30 	bl	8005ff8 <MX_USART1_UART_Init>
  MX_TIM3_Init();
 8002598:	f001 fbaa 	bl	8003cf0 <MX_TIM3_Init>
  MX_TIM4_Init();
 800259c:	f001 fc1a 	bl	8003dd4 <MX_TIM4_Init>

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

		statesMachineLoop();
 80025a0:	f000 fc16 	bl	8002dd0 <statesMachineLoop>
 80025a4:	e7fc      	b.n	80025a0 <main+0x3c>
	...

080025a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80025a8:	b580      	push	{r7, lr}
 80025aa:	b09c      	sub	sp, #112	; 0x70
 80025ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80025ae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80025b2:	224c      	movs	r2, #76	; 0x4c
 80025b4:	2100      	movs	r1, #0
 80025b6:	4618      	mov	r0, r3
 80025b8:	f00b ff4e 	bl	800e458 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80025bc:	1d3b      	adds	r3, r7, #4
 80025be:	2220      	movs	r2, #32
 80025c0:	2100      	movs	r1, #0
 80025c2:	4618      	mov	r0, r3
 80025c4:	f00b ff48 	bl	800e458 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80025c8:	2002      	movs	r0, #2
 80025ca:	f005 f8b3 	bl	8007734 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80025ce:	2300      	movs	r3, #0
 80025d0:	603b      	str	r3, [r7, #0]
 80025d2:	4b32      	ldr	r3, [pc, #200]	; (800269c <SystemClock_Config+0xf4>)
 80025d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025d6:	4a31      	ldr	r2, [pc, #196]	; (800269c <SystemClock_Config+0xf4>)
 80025d8:	f023 0301 	bic.w	r3, r3, #1
 80025dc:	62d3      	str	r3, [r2, #44]	; 0x2c
 80025de:	4b2f      	ldr	r3, [pc, #188]	; (800269c <SystemClock_Config+0xf4>)
 80025e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025e2:	f003 0301 	and.w	r3, r3, #1
 80025e6:	603b      	str	r3, [r7, #0]
 80025e8:	4b2d      	ldr	r3, [pc, #180]	; (80026a0 <SystemClock_Config+0xf8>)
 80025ea:	699b      	ldr	r3, [r3, #24]
 80025ec:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80025f0:	4a2b      	ldr	r2, [pc, #172]	; (80026a0 <SystemClock_Config+0xf8>)
 80025f2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80025f6:	6193      	str	r3, [r2, #24]
 80025f8:	4b29      	ldr	r3, [pc, #164]	; (80026a0 <SystemClock_Config+0xf8>)
 80025fa:	699b      	ldr	r3, [r3, #24]
 80025fc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002600:	603b      	str	r3, [r7, #0]
 8002602:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8002604:	bf00      	nop
 8002606:	4b26      	ldr	r3, [pc, #152]	; (80026a0 <SystemClock_Config+0xf8>)
 8002608:	699b      	ldr	r3, [r3, #24]
 800260a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800260e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002612:	d1f8      	bne.n	8002606 <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002614:	2302      	movs	r3, #2
 8002616:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8002618:	2301      	movs	r3, #1
 800261a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800261c:	2340      	movs	r3, #64	; 0x40
 800261e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002620:	2302      	movs	r3, #2
 8002622:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002624:	2300      	movs	r3, #0
 8002626:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8002628:	2304      	movs	r3, #4
 800262a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 16;
 800262c:	2310      	movs	r3, #16
 800262e:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8002630:	2302      	movs	r3, #2
 8002632:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8002634:	2302      	movs	r3, #2
 8002636:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8002638:	2302      	movs	r3, #2
 800263a:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 800263c:	230c      	movs	r3, #12
 800263e:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8002640:	2300      	movs	r3, #0
 8002642:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8002644:	2300      	movs	r3, #0
 8002646:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002648:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800264c:	4618      	mov	r0, r3
 800264e:	f005 f8ab 	bl	80077a8 <HAL_RCC_OscConfig>
 8002652:	4603      	mov	r3, r0
 8002654:	2b00      	cmp	r3, #0
 8002656:	d001      	beq.n	800265c <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8002658:	f000 faaa 	bl	8002bb0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800265c:	233f      	movs	r3, #63	; 0x3f
 800265e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002660:	2303      	movs	r3, #3
 8002662:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8002664:	2300      	movs	r3, #0
 8002666:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8002668:	2308      	movs	r3, #8
 800266a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 800266c:	2300      	movs	r3, #0
 800266e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8002670:	2340      	movs	r3, #64	; 0x40
 8002672:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8002674:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002678:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 800267a:	2300      	movs	r3, #0
 800267c:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800267e:	1d3b      	adds	r3, r7, #4
 8002680:	2101      	movs	r1, #1
 8002682:	4618      	mov	r0, r3
 8002684:	f005 fcbe 	bl	8008004 <HAL_RCC_ClockConfig>
 8002688:	4603      	mov	r3, r0
 800268a:	2b00      	cmp	r3, #0
 800268c:	d001      	beq.n	8002692 <SystemClock_Config+0xea>
  {
    Error_Handler();
 800268e:	f000 fa8f 	bl	8002bb0 <Error_Handler>
  }
}
 8002692:	bf00      	nop
 8002694:	3770      	adds	r7, #112	; 0x70
 8002696:	46bd      	mov	sp, r7
 8002698:	bd80      	pop	{r7, pc}
 800269a:	bf00      	nop
 800269c:	58000400 	.word	0x58000400
 80026a0:	58024800 	.word	0x58024800

080026a4 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 80026a4:	b580      	push	{r7, lr}
 80026a6:	b082      	sub	sp, #8
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	4603      	mov	r3, r0
 80026ac:	80fb      	strh	r3, [r7, #6]

	test++;
 80026ae:	4bab      	ldr	r3, [pc, #684]	; (800295c <HAL_GPIO_EXTI_Callback+0x2b8>)
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	3301      	adds	r3, #1
 80026b4:	4aa9      	ldr	r2, [pc, #676]	; (800295c <HAL_GPIO_EXTI_Callback+0x2b8>)
 80026b6:	6013      	str	r3, [r2, #0]
	switch( GPIO_Pin){
 80026b8:	88fb      	ldrh	r3, [r7, #6]
 80026ba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80026be:	f000 8133 	beq.w	8002928 <HAL_GPIO_EXTI_Callback+0x284>
 80026c2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80026c6:	f300 8143 	bgt.w	8002950 <HAL_GPIO_EXTI_Callback+0x2ac>
 80026ca:	2b20      	cmp	r3, #32
 80026cc:	dc4a      	bgt.n	8002764 <HAL_GPIO_EXTI_Callback+0xc0>
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	f340 813e 	ble.w	8002950 <HAL_GPIO_EXTI_Callback+0x2ac>
 80026d4:	3b01      	subs	r3, #1
 80026d6:	2b1f      	cmp	r3, #31
 80026d8:	f200 813a 	bhi.w	8002950 <HAL_GPIO_EXTI_Callback+0x2ac>
 80026dc:	a201      	add	r2, pc, #4	; (adr r2, 80026e4 <HAL_GPIO_EXTI_Callback+0x40>)
 80026de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026e2:	bf00      	nop
 80026e4:	080027b7 	.word	0x080027b7
 80026e8:	08002951 	.word	0x08002951
 80026ec:	08002951 	.word	0x08002951
 80026f0:	0800284b 	.word	0x0800284b
 80026f4:	08002951 	.word	0x08002951
 80026f8:	08002951 	.word	0x08002951
 80026fc:	08002951 	.word	0x08002951
 8002700:	08002801 	.word	0x08002801
 8002704:	08002951 	.word	0x08002951
 8002708:	08002951 	.word	0x08002951
 800270c:	08002951 	.word	0x08002951
 8002710:	08002951 	.word	0x08002951
 8002714:	08002951 	.word	0x08002951
 8002718:	08002951 	.word	0x08002951
 800271c:	08002951 	.word	0x08002951
 8002720:	080028df 	.word	0x080028df
 8002724:	08002951 	.word	0x08002951
 8002728:	08002951 	.word	0x08002951
 800272c:	08002951 	.word	0x08002951
 8002730:	08002951 	.word	0x08002951
 8002734:	08002951 	.word	0x08002951
 8002738:	08002951 	.word	0x08002951
 800273c:	08002951 	.word	0x08002951
 8002740:	08002951 	.word	0x08002951
 8002744:	08002951 	.word	0x08002951
 8002748:	08002951 	.word	0x08002951
 800274c:	08002951 	.word	0x08002951
 8002750:	08002951 	.word	0x08002951
 8002754:	08002951 	.word	0x08002951
 8002758:	08002951 	.word	0x08002951
 800275c:	08002951 	.word	0x08002951
 8002760:	08002895 	.word	0x08002895
 8002764:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002768:	f040 80f2 	bne.w	8002950 <HAL_GPIO_EXTI_Callback+0x2ac>

		 case E_EndStop1_Inf_Pin:

			 Stop_PWM_MOTOR_1;
 800276c:	2100      	movs	r1, #0
 800276e:	487c      	ldr	r0, [pc, #496]	; (8002960 <HAL_GPIO_EXTI_Callback+0x2bc>)
 8002770:	f007 fe42 	bl	800a3f8 <HAL_TIM_PWM_Stop>
			 Stop_PWM_MOTOR_2;
 8002774:	2100      	movs	r1, #0
 8002776:	487b      	ldr	r0, [pc, #492]	; (8002964 <HAL_GPIO_EXTI_Callback+0x2c0>)
 8002778:	f007 fe3e 	bl	800a3f8 <HAL_TIM_PWM_Stop>
			 Stop_PWM_MOTOR_3;
 800277c:	2100      	movs	r1, #0
 800277e:	487a      	ldr	r0, [pc, #488]	; (8002968 <HAL_GPIO_EXTI_Callback+0x2c4>)
 8002780:	f007 fe3a 	bl	800a3f8 <HAL_TIM_PWM_Stop>

			 HAL_TIM_Base_Stop_IT(&htim15);
 8002784:	4879      	ldr	r0, [pc, #484]	; (800296c <HAL_GPIO_EXTI_Callback+0x2c8>)
 8002786:	f007 fc99 	bl	800a0bc <HAL_TIM_Base_Stop_IT>
			 HAL_TIM_Base_Stop(&htim5);
 800278a:	4879      	ldr	r0, [pc, #484]	; (8002970 <HAL_GPIO_EXTI_Callback+0x2cc>)
 800278c:	f007 fbf6 	bl	8009f7c <HAL_TIM_Base_Stop>

			 HAL_TIM_IC_Stop(&htim2, TIM_CHANNEL_1);
 8002790:	2100      	movs	r1, #0
 8002792:	4878      	ldr	r0, [pc, #480]	; (8002974 <HAL_GPIO_EXTI_Callback+0x2d0>)
 8002794:	f007 ff27 	bl	800a5e6 <HAL_TIM_IC_Stop>
			 HAL_TIM_IC_Stop(&htim3, TIM_CHANNEL_1);
 8002798:	2100      	movs	r1, #0
 800279a:	4877      	ldr	r0, [pc, #476]	; (8002978 <HAL_GPIO_EXTI_Callback+0x2d4>)
 800279c:	f007 ff23 	bl	800a5e6 <HAL_TIM_IC_Stop>
			 HAL_TIM_IC_Stop(&htim4, TIM_CHANNEL_1);
 80027a0:	2100      	movs	r1, #0
 80027a2:	4876      	ldr	r0, [pc, #472]	; (800297c <HAL_GPIO_EXTI_Callback+0x2d8>)
 80027a4:	f007 ff1f 	bl	800a5e6 <HAL_TIM_IC_Stop>

			 endStopAlarmInf = true;
 80027a8:	4b75      	ldr	r3, [pc, #468]	; (8002980 <HAL_GPIO_EXTI_Callback+0x2dc>)
 80027aa:	2201      	movs	r2, #1
 80027ac:	701a      	strb	r2, [r3, #0]
			 state = FAULT;
 80027ae:	4b75      	ldr	r3, [pc, #468]	; (8002984 <HAL_GPIO_EXTI_Callback+0x2e0>)
 80027b0:	2204      	movs	r2, #4
 80027b2:	701a      	strb	r2, [r3, #0]
			 break;
 80027b4:	e0cd      	b.n	8002952 <HAL_GPIO_EXTI_Callback+0x2ae>

		 case E_EndStop1_Sup_Pin:
			 Stop_PWM_MOTOR_1;
 80027b6:	2100      	movs	r1, #0
 80027b8:	4869      	ldr	r0, [pc, #420]	; (8002960 <HAL_GPIO_EXTI_Callback+0x2bc>)
 80027ba:	f007 fe1d 	bl	800a3f8 <HAL_TIM_PWM_Stop>
			 Stop_PWM_MOTOR_2;
 80027be:	2100      	movs	r1, #0
 80027c0:	4868      	ldr	r0, [pc, #416]	; (8002964 <HAL_GPIO_EXTI_Callback+0x2c0>)
 80027c2:	f007 fe19 	bl	800a3f8 <HAL_TIM_PWM_Stop>
			 Stop_PWM_MOTOR_3;
 80027c6:	2100      	movs	r1, #0
 80027c8:	4867      	ldr	r0, [pc, #412]	; (8002968 <HAL_GPIO_EXTI_Callback+0x2c4>)
 80027ca:	f007 fe15 	bl	800a3f8 <HAL_TIM_PWM_Stop>

			 HAL_TIM_Base_Stop_IT(&htim15);
 80027ce:	4867      	ldr	r0, [pc, #412]	; (800296c <HAL_GPIO_EXTI_Callback+0x2c8>)
 80027d0:	f007 fc74 	bl	800a0bc <HAL_TIM_Base_Stop_IT>
			 HAL_TIM_Base_Stop(&htim5);
 80027d4:	4866      	ldr	r0, [pc, #408]	; (8002970 <HAL_GPIO_EXTI_Callback+0x2cc>)
 80027d6:	f007 fbd1 	bl	8009f7c <HAL_TIM_Base_Stop>

			 HAL_TIM_IC_Stop(&htim2, TIM_CHANNEL_1);
 80027da:	2100      	movs	r1, #0
 80027dc:	4865      	ldr	r0, [pc, #404]	; (8002974 <HAL_GPIO_EXTI_Callback+0x2d0>)
 80027de:	f007 ff02 	bl	800a5e6 <HAL_TIM_IC_Stop>
			 HAL_TIM_IC_Stop(&htim3, TIM_CHANNEL_1);
 80027e2:	2100      	movs	r1, #0
 80027e4:	4864      	ldr	r0, [pc, #400]	; (8002978 <HAL_GPIO_EXTI_Callback+0x2d4>)
 80027e6:	f007 fefe 	bl	800a5e6 <HAL_TIM_IC_Stop>
			 HAL_TIM_IC_Stop(&htim4, TIM_CHANNEL_1);
 80027ea:	2100      	movs	r1, #0
 80027ec:	4863      	ldr	r0, [pc, #396]	; (800297c <HAL_GPIO_EXTI_Callback+0x2d8>)
 80027ee:	f007 fefa 	bl	800a5e6 <HAL_TIM_IC_Stop>

			 endStopAlarmSup = true;
 80027f2:	4b65      	ldr	r3, [pc, #404]	; (8002988 <HAL_GPIO_EXTI_Callback+0x2e4>)
 80027f4:	2201      	movs	r2, #1
 80027f6:	701a      	strb	r2, [r3, #0]
			 state = FAULT;
 80027f8:	4b62      	ldr	r3, [pc, #392]	; (8002984 <HAL_GPIO_EXTI_Callback+0x2e0>)
 80027fa:	2204      	movs	r2, #4
 80027fc:	701a      	strb	r2, [r3, #0]
			 break;
 80027fe:	e0a8      	b.n	8002952 <HAL_GPIO_EXTI_Callback+0x2ae>

		 case E_EndStop2_Inf_Pin:
			 Stop_PWM_MOTOR_1;
 8002800:	2100      	movs	r1, #0
 8002802:	4857      	ldr	r0, [pc, #348]	; (8002960 <HAL_GPIO_EXTI_Callback+0x2bc>)
 8002804:	f007 fdf8 	bl	800a3f8 <HAL_TIM_PWM_Stop>
			 Stop_PWM_MOTOR_2;
 8002808:	2100      	movs	r1, #0
 800280a:	4856      	ldr	r0, [pc, #344]	; (8002964 <HAL_GPIO_EXTI_Callback+0x2c0>)
 800280c:	f007 fdf4 	bl	800a3f8 <HAL_TIM_PWM_Stop>
			 Stop_PWM_MOTOR_3;
 8002810:	2100      	movs	r1, #0
 8002812:	4855      	ldr	r0, [pc, #340]	; (8002968 <HAL_GPIO_EXTI_Callback+0x2c4>)
 8002814:	f007 fdf0 	bl	800a3f8 <HAL_TIM_PWM_Stop>

			 HAL_TIM_Base_Stop_IT(&htim15);
 8002818:	4854      	ldr	r0, [pc, #336]	; (800296c <HAL_GPIO_EXTI_Callback+0x2c8>)
 800281a:	f007 fc4f 	bl	800a0bc <HAL_TIM_Base_Stop_IT>
			 HAL_TIM_Base_Stop(&htim5);
 800281e:	4854      	ldr	r0, [pc, #336]	; (8002970 <HAL_GPIO_EXTI_Callback+0x2cc>)
 8002820:	f007 fbac 	bl	8009f7c <HAL_TIM_Base_Stop>

			 HAL_TIM_IC_Stop(&htim2, TIM_CHANNEL_1);
 8002824:	2100      	movs	r1, #0
 8002826:	4853      	ldr	r0, [pc, #332]	; (8002974 <HAL_GPIO_EXTI_Callback+0x2d0>)
 8002828:	f007 fedd 	bl	800a5e6 <HAL_TIM_IC_Stop>
			 HAL_TIM_IC_Stop(&htim3, TIM_CHANNEL_1);
 800282c:	2100      	movs	r1, #0
 800282e:	4852      	ldr	r0, [pc, #328]	; (8002978 <HAL_GPIO_EXTI_Callback+0x2d4>)
 8002830:	f007 fed9 	bl	800a5e6 <HAL_TIM_IC_Stop>
			 HAL_TIM_IC_Stop(&htim4, TIM_CHANNEL_1);
 8002834:	2100      	movs	r1, #0
 8002836:	4851      	ldr	r0, [pc, #324]	; (800297c <HAL_GPIO_EXTI_Callback+0x2d8>)
 8002838:	f007 fed5 	bl	800a5e6 <HAL_TIM_IC_Stop>

			 endStopAlarmInf = true;
 800283c:	4b50      	ldr	r3, [pc, #320]	; (8002980 <HAL_GPIO_EXTI_Callback+0x2dc>)
 800283e:	2201      	movs	r2, #1
 8002840:	701a      	strb	r2, [r3, #0]
			 state = FAULT;
 8002842:	4b50      	ldr	r3, [pc, #320]	; (8002984 <HAL_GPIO_EXTI_Callback+0x2e0>)
 8002844:	2204      	movs	r2, #4
 8002846:	701a      	strb	r2, [r3, #0]
			 break;
 8002848:	e083      	b.n	8002952 <HAL_GPIO_EXTI_Callback+0x2ae>


		 case E_EndStop2_Sup_Pin:
			 Stop_PWM_MOTOR_1;
 800284a:	2100      	movs	r1, #0
 800284c:	4844      	ldr	r0, [pc, #272]	; (8002960 <HAL_GPIO_EXTI_Callback+0x2bc>)
 800284e:	f007 fdd3 	bl	800a3f8 <HAL_TIM_PWM_Stop>
			 Stop_PWM_MOTOR_2;
 8002852:	2100      	movs	r1, #0
 8002854:	4843      	ldr	r0, [pc, #268]	; (8002964 <HAL_GPIO_EXTI_Callback+0x2c0>)
 8002856:	f007 fdcf 	bl	800a3f8 <HAL_TIM_PWM_Stop>
			 Stop_PWM_MOTOR_3;
 800285a:	2100      	movs	r1, #0
 800285c:	4842      	ldr	r0, [pc, #264]	; (8002968 <HAL_GPIO_EXTI_Callback+0x2c4>)
 800285e:	f007 fdcb 	bl	800a3f8 <HAL_TIM_PWM_Stop>

			 HAL_TIM_Base_Stop_IT(&htim15);
 8002862:	4842      	ldr	r0, [pc, #264]	; (800296c <HAL_GPIO_EXTI_Callback+0x2c8>)
 8002864:	f007 fc2a 	bl	800a0bc <HAL_TIM_Base_Stop_IT>
			 HAL_TIM_Base_Stop(&htim5);
 8002868:	4841      	ldr	r0, [pc, #260]	; (8002970 <HAL_GPIO_EXTI_Callback+0x2cc>)
 800286a:	f007 fb87 	bl	8009f7c <HAL_TIM_Base_Stop>

			 HAL_TIM_IC_Stop(&htim2, TIM_CHANNEL_1);
 800286e:	2100      	movs	r1, #0
 8002870:	4840      	ldr	r0, [pc, #256]	; (8002974 <HAL_GPIO_EXTI_Callback+0x2d0>)
 8002872:	f007 feb8 	bl	800a5e6 <HAL_TIM_IC_Stop>
			 HAL_TIM_IC_Stop(&htim3, TIM_CHANNEL_1);
 8002876:	2100      	movs	r1, #0
 8002878:	483f      	ldr	r0, [pc, #252]	; (8002978 <HAL_GPIO_EXTI_Callback+0x2d4>)
 800287a:	f007 feb4 	bl	800a5e6 <HAL_TIM_IC_Stop>
			 HAL_TIM_IC_Stop(&htim4, TIM_CHANNEL_1);
 800287e:	2100      	movs	r1, #0
 8002880:	483e      	ldr	r0, [pc, #248]	; (800297c <HAL_GPIO_EXTI_Callback+0x2d8>)
 8002882:	f007 feb0 	bl	800a5e6 <HAL_TIM_IC_Stop>

			 endStopAlarmSup = true;
 8002886:	4b40      	ldr	r3, [pc, #256]	; (8002988 <HAL_GPIO_EXTI_Callback+0x2e4>)
 8002888:	2201      	movs	r2, #1
 800288a:	701a      	strb	r2, [r3, #0]
			 state = FAULT;
 800288c:	4b3d      	ldr	r3, [pc, #244]	; (8002984 <HAL_GPIO_EXTI_Callback+0x2e0>)
 800288e:	2204      	movs	r2, #4
 8002890:	701a      	strb	r2, [r3, #0]
			 break;
 8002892:	e05e      	b.n	8002952 <HAL_GPIO_EXTI_Callback+0x2ae>

		 case E_EndStop3_Inf_Pin:
			 Stop_PWM_MOTOR_1;
 8002894:	2100      	movs	r1, #0
 8002896:	4832      	ldr	r0, [pc, #200]	; (8002960 <HAL_GPIO_EXTI_Callback+0x2bc>)
 8002898:	f007 fdae 	bl	800a3f8 <HAL_TIM_PWM_Stop>
			 Stop_PWM_MOTOR_2;
 800289c:	2100      	movs	r1, #0
 800289e:	4831      	ldr	r0, [pc, #196]	; (8002964 <HAL_GPIO_EXTI_Callback+0x2c0>)
 80028a0:	f007 fdaa 	bl	800a3f8 <HAL_TIM_PWM_Stop>
			 Stop_PWM_MOTOR_3;
 80028a4:	2100      	movs	r1, #0
 80028a6:	4830      	ldr	r0, [pc, #192]	; (8002968 <HAL_GPIO_EXTI_Callback+0x2c4>)
 80028a8:	f007 fda6 	bl	800a3f8 <HAL_TIM_PWM_Stop>

			 HAL_TIM_Base_Stop_IT(&htim15);
 80028ac:	482f      	ldr	r0, [pc, #188]	; (800296c <HAL_GPIO_EXTI_Callback+0x2c8>)
 80028ae:	f007 fc05 	bl	800a0bc <HAL_TIM_Base_Stop_IT>
			 HAL_TIM_Base_Stop(&htim5);
 80028b2:	482f      	ldr	r0, [pc, #188]	; (8002970 <HAL_GPIO_EXTI_Callback+0x2cc>)
 80028b4:	f007 fb62 	bl	8009f7c <HAL_TIM_Base_Stop>

			 HAL_TIM_IC_Stop(&htim2, TIM_CHANNEL_1);
 80028b8:	2100      	movs	r1, #0
 80028ba:	482e      	ldr	r0, [pc, #184]	; (8002974 <HAL_GPIO_EXTI_Callback+0x2d0>)
 80028bc:	f007 fe93 	bl	800a5e6 <HAL_TIM_IC_Stop>
			 HAL_TIM_IC_Stop(&htim3, TIM_CHANNEL_1);
 80028c0:	2100      	movs	r1, #0
 80028c2:	482d      	ldr	r0, [pc, #180]	; (8002978 <HAL_GPIO_EXTI_Callback+0x2d4>)
 80028c4:	f007 fe8f 	bl	800a5e6 <HAL_TIM_IC_Stop>
			 HAL_TIM_IC_Stop(&htim4, TIM_CHANNEL_1);
 80028c8:	2100      	movs	r1, #0
 80028ca:	482c      	ldr	r0, [pc, #176]	; (800297c <HAL_GPIO_EXTI_Callback+0x2d8>)
 80028cc:	f007 fe8b 	bl	800a5e6 <HAL_TIM_IC_Stop>

			 endStopAlarmInf = true;
 80028d0:	4b2b      	ldr	r3, [pc, #172]	; (8002980 <HAL_GPIO_EXTI_Callback+0x2dc>)
 80028d2:	2201      	movs	r2, #1
 80028d4:	701a      	strb	r2, [r3, #0]
			 state = FAULT;
 80028d6:	4b2b      	ldr	r3, [pc, #172]	; (8002984 <HAL_GPIO_EXTI_Callback+0x2e0>)
 80028d8:	2204      	movs	r2, #4
 80028da:	701a      	strb	r2, [r3, #0]

			 break;
 80028dc:	e039      	b.n	8002952 <HAL_GPIO_EXTI_Callback+0x2ae>

		 case E_EndStop3_Sup_Pin:
			 Stop_PWM_MOTOR_1;
 80028de:	2100      	movs	r1, #0
 80028e0:	481f      	ldr	r0, [pc, #124]	; (8002960 <HAL_GPIO_EXTI_Callback+0x2bc>)
 80028e2:	f007 fd89 	bl	800a3f8 <HAL_TIM_PWM_Stop>
			 Stop_PWM_MOTOR_2;
 80028e6:	2100      	movs	r1, #0
 80028e8:	481e      	ldr	r0, [pc, #120]	; (8002964 <HAL_GPIO_EXTI_Callback+0x2c0>)
 80028ea:	f007 fd85 	bl	800a3f8 <HAL_TIM_PWM_Stop>
			 Stop_PWM_MOTOR_3;
 80028ee:	2100      	movs	r1, #0
 80028f0:	481d      	ldr	r0, [pc, #116]	; (8002968 <HAL_GPIO_EXTI_Callback+0x2c4>)
 80028f2:	f007 fd81 	bl	800a3f8 <HAL_TIM_PWM_Stop>

			 HAL_TIM_Base_Stop_IT(&htim15);
 80028f6:	481d      	ldr	r0, [pc, #116]	; (800296c <HAL_GPIO_EXTI_Callback+0x2c8>)
 80028f8:	f007 fbe0 	bl	800a0bc <HAL_TIM_Base_Stop_IT>
			 HAL_TIM_Base_Stop(&htim5);
 80028fc:	481c      	ldr	r0, [pc, #112]	; (8002970 <HAL_GPIO_EXTI_Callback+0x2cc>)
 80028fe:	f007 fb3d 	bl	8009f7c <HAL_TIM_Base_Stop>

			 HAL_TIM_IC_Stop(&htim2, TIM_CHANNEL_1);
 8002902:	2100      	movs	r1, #0
 8002904:	481b      	ldr	r0, [pc, #108]	; (8002974 <HAL_GPIO_EXTI_Callback+0x2d0>)
 8002906:	f007 fe6e 	bl	800a5e6 <HAL_TIM_IC_Stop>
			 HAL_TIM_IC_Stop(&htim3, TIM_CHANNEL_1);
 800290a:	2100      	movs	r1, #0
 800290c:	481a      	ldr	r0, [pc, #104]	; (8002978 <HAL_GPIO_EXTI_Callback+0x2d4>)
 800290e:	f007 fe6a 	bl	800a5e6 <HAL_TIM_IC_Stop>
			 HAL_TIM_IC_Stop(&htim4, TIM_CHANNEL_1);
 8002912:	2100      	movs	r1, #0
 8002914:	4819      	ldr	r0, [pc, #100]	; (800297c <HAL_GPIO_EXTI_Callback+0x2d8>)
 8002916:	f007 fe66 	bl	800a5e6 <HAL_TIM_IC_Stop>

			 endStopAlarmSup = true;
 800291a:	4b1b      	ldr	r3, [pc, #108]	; (8002988 <HAL_GPIO_EXTI_Callback+0x2e4>)
 800291c:	2201      	movs	r2, #1
 800291e:	701a      	strb	r2, [r3, #0]
			 state = FAULT;
 8002920:	4b18      	ldr	r3, [pc, #96]	; (8002984 <HAL_GPIO_EXTI_Callback+0x2e0>)
 8002922:	2204      	movs	r2, #4
 8002924:	701a      	strb	r2, [r3, #0]
			 break;
 8002926:	e014      	b.n	8002952 <HAL_GPIO_EXTI_Callback+0x2ae>

		 case BUTTON_Pin:

			 if (!endStopAlarmSup && !endStopAlarmInf && !faultDrivers){
 8002928:	4b17      	ldr	r3, [pc, #92]	; (8002988 <HAL_GPIO_EXTI_Callback+0x2e4>)
 800292a:	781b      	ldrb	r3, [r3, #0]
 800292c:	2b00      	cmp	r3, #0
 800292e:	d10b      	bne.n	8002948 <HAL_GPIO_EXTI_Callback+0x2a4>
 8002930:	4b13      	ldr	r3, [pc, #76]	; (8002980 <HAL_GPIO_EXTI_Callback+0x2dc>)
 8002932:	781b      	ldrb	r3, [r3, #0]
 8002934:	2b00      	cmp	r3, #0
 8002936:	d107      	bne.n	8002948 <HAL_GPIO_EXTI_Callback+0x2a4>
 8002938:	4b14      	ldr	r3, [pc, #80]	; (800298c <HAL_GPIO_EXTI_Callback+0x2e8>)
 800293a:	781b      	ldrb	r3, [r3, #0]
 800293c:	2b00      	cmp	r3, #0
 800293e:	d103      	bne.n	8002948 <HAL_GPIO_EXTI_Callback+0x2a4>
				 continuar = false;
 8002940:	4b13      	ldr	r3, [pc, #76]	; (8002990 <HAL_GPIO_EXTI_Callback+0x2ec>)
 8002942:	2200      	movs	r2, #0
 8002944:	701a      	strb	r2, [r3, #0]
			 }else{continuar = true;}

			 break;
 8002946:	e004      	b.n	8002952 <HAL_GPIO_EXTI_Callback+0x2ae>
			 }else{continuar = true;}
 8002948:	4b11      	ldr	r3, [pc, #68]	; (8002990 <HAL_GPIO_EXTI_Callback+0x2ec>)
 800294a:	2201      	movs	r2, #1
 800294c:	701a      	strb	r2, [r3, #0]
			 break;
 800294e:	e000      	b.n	8002952 <HAL_GPIO_EXTI_Callback+0x2ae>
//			 //continuar = false;
//			 faultDrivers = true;
//			 state = FAULT;
//			 break;

		 default: break;
 8002950:	bf00      	nop


	}


}
 8002952:	bf00      	nop
 8002954:	3708      	adds	r7, #8
 8002956:	46bd      	mov	sp, r7
 8002958:	bd80      	pop	{r7, pc}
 800295a:	bf00      	nop
 800295c:	2400044c 	.word	0x2400044c
 8002960:	240006c8 	.word	0x240006c8
 8002964:	24000714 	.word	0x24000714
 8002968:	24000760 	.word	0x24000760
 800296c:	240007ac 	.word	0x240007ac
 8002970:	2400067c 	.word	0x2400067c
 8002974:	24000598 	.word	0x24000598
 8002978:	240005e4 	.word	0x240005e4
 800297c:	24000630 	.word	0x24000630
 8002980:	24000455 	.word	0x24000455
 8002984:	24000450 	.word	0x24000450
 8002988:	24000454 	.word	0x24000454
 800298c:	24000457 	.word	0x24000457
 8002990:	24000456 	.word	0x24000456

08002994 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8002994:	b580      	push	{r7, lr}
 8002996:	b084      	sub	sp, #16
 8002998:	af00      	add	r7, sp, #0
 800299a:	6078      	str	r0, [r7, #4]

	if (huart->Instance == USART3) {
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	4a30      	ldr	r2, [pc, #192]	; (8002a64 <HAL_UART_RxCpltCallback+0xd0>)
 80029a2:	4293      	cmp	r3, r2
 80029a4:	d14d      	bne.n	8002a42 <HAL_UART_RxCpltCallback+0xae>
		char dato;
		dato = rx_data;
 80029a6:	4b30      	ldr	r3, [pc, #192]	; (8002a68 <HAL_UART_RxCpltCallback+0xd4>)
 80029a8:	781b      	ldrb	r3, [r3, #0]
 80029aa:	73fb      	strb	r3, [r7, #15]
		switch (dato) {
 80029ac:	7bfb      	ldrb	r3, [r7, #15]
 80029ae:	2b3a      	cmp	r3, #58	; 0x3a
 80029b0:	d006      	beq.n	80029c0 <HAL_UART_RxCpltCallback+0x2c>
 80029b2:	2b3a      	cmp	r3, #58	; 0x3a
 80029b4:	dc36      	bgt.n	8002a24 <HAL_UART_RxCpltCallback+0x90>
 80029b6:	2b08      	cmp	r3, #8
 80029b8:	d009      	beq.n	80029ce <HAL_UART_RxCpltCallback+0x3a>
 80029ba:	2b0d      	cmp	r3, #13
 80029bc:	d01e      	beq.n	80029fc <HAL_UART_RxCpltCallback+0x68>
 80029be:	e031      	b.n	8002a24 <HAL_UART_RxCpltCallback+0x90>
		case ':':
			rx_index = 0;
 80029c0:	4b2a      	ldr	r3, [pc, #168]	; (8002a6c <HAL_UART_RxCpltCallback+0xd8>)
 80029c2:	2200      	movs	r2, #0
 80029c4:	701a      	strb	r2, [r3, #0]
			cm0 = 1;
 80029c6:	4b2a      	ldr	r3, [pc, #168]	; (8002a70 <HAL_UART_RxCpltCallback+0xdc>)
 80029c8:	2201      	movs	r2, #1
 80029ca:	701a      	strb	r2, [r3, #0]
			break;
 80029cc:	e040      	b.n	8002a50 <HAL_UART_RxCpltCallback+0xbc>
		case 8:
			if (rx_index > 0) {
 80029ce:	4b27      	ldr	r3, [pc, #156]	; (8002a6c <HAL_UART_RxCpltCallback+0xd8>)
 80029d0:	781b      	ldrb	r3, [r3, #0]
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d037      	beq.n	8002a46 <HAL_UART_RxCpltCallback+0xb2>
				rx_index--;
 80029d6:	4b25      	ldr	r3, [pc, #148]	; (8002a6c <HAL_UART_RxCpltCallback+0xd8>)
 80029d8:	781b      	ldrb	r3, [r3, #0]
 80029da:	3b01      	subs	r3, #1
 80029dc:	b2da      	uxtb	r2, r3
 80029de:	4b23      	ldr	r3, [pc, #140]	; (8002a6c <HAL_UART_RxCpltCallback+0xd8>)
 80029e0:	701a      	strb	r2, [r3, #0]
			}
			break;
 80029e2:	e030      	b.n	8002a46 <HAL_UART_RxCpltCallback+0xb2>
		case '\r':

			while (!(rx_index==30)){
				rx_buffer[rx_index]= (uint8_t) 0;
 80029e4:	4b21      	ldr	r3, [pc, #132]	; (8002a6c <HAL_UART_RxCpltCallback+0xd8>)
 80029e6:	781b      	ldrb	r3, [r3, #0]
 80029e8:	461a      	mov	r2, r3
 80029ea:	4b22      	ldr	r3, [pc, #136]	; (8002a74 <HAL_UART_RxCpltCallback+0xe0>)
 80029ec:	2100      	movs	r1, #0
 80029ee:	5499      	strb	r1, [r3, r2]
				rx_index++;
 80029f0:	4b1e      	ldr	r3, [pc, #120]	; (8002a6c <HAL_UART_RxCpltCallback+0xd8>)
 80029f2:	781b      	ldrb	r3, [r3, #0]
 80029f4:	3301      	adds	r3, #1
 80029f6:	b2da      	uxtb	r2, r3
 80029f8:	4b1c      	ldr	r3, [pc, #112]	; (8002a6c <HAL_UART_RxCpltCallback+0xd8>)
 80029fa:	701a      	strb	r2, [r3, #0]
			while (!(rx_index==30)){
 80029fc:	4b1b      	ldr	r3, [pc, #108]	; (8002a6c <HAL_UART_RxCpltCallback+0xd8>)
 80029fe:	781b      	ldrb	r3, [r3, #0]
 8002a00:	2b1e      	cmp	r3, #30
 8002a02:	d1ef      	bne.n	80029e4 <HAL_UART_RxCpltCallback+0x50>
			}

			if (cm0 == 1) {
 8002a04:	4b1a      	ldr	r3, [pc, #104]	; (8002a70 <HAL_UART_RxCpltCallback+0xdc>)
 8002a06:	781b      	ldrb	r3, [r3, #0]
 8002a08:	2b01      	cmp	r3, #1
 8002a0a:	d11e      	bne.n	8002a4a <HAL_UART_RxCpltCallback+0xb6>
				rx_buffer[rx_index] = 0;
 8002a0c:	4b17      	ldr	r3, [pc, #92]	; (8002a6c <HAL_UART_RxCpltCallback+0xd8>)
 8002a0e:	781b      	ldrb	r3, [r3, #0]
 8002a10:	461a      	mov	r2, r3
 8002a12:	4b18      	ldr	r3, [pc, #96]	; (8002a74 <HAL_UART_RxCpltCallback+0xe0>)
 8002a14:	2100      	movs	r1, #0
 8002a16:	5499      	strb	r1, [r3, r2]
				interpretaComando();
 8002a18:	f7fe fcb8 	bl	800138c <interpretaComando>
				cm0 = 0;
 8002a1c:	4b14      	ldr	r3, [pc, #80]	; (8002a70 <HAL_UART_RxCpltCallback+0xdc>)
 8002a1e:	2200      	movs	r2, #0
 8002a20:	701a      	strb	r2, [r3, #0]

			}
			break;
 8002a22:	e012      	b.n	8002a4a <HAL_UART_RxCpltCallback+0xb6>
		default:
			if (rx_index < 30) {
 8002a24:	4b11      	ldr	r3, [pc, #68]	; (8002a6c <HAL_UART_RxCpltCallback+0xd8>)
 8002a26:	781b      	ldrb	r3, [r3, #0]
 8002a28:	2b1d      	cmp	r3, #29
 8002a2a:	d810      	bhi.n	8002a4e <HAL_UART_RxCpltCallback+0xba>
				rx_buffer[rx_index++] = dato;
 8002a2c:	4b0f      	ldr	r3, [pc, #60]	; (8002a6c <HAL_UART_RxCpltCallback+0xd8>)
 8002a2e:	781b      	ldrb	r3, [r3, #0]
 8002a30:	1c5a      	adds	r2, r3, #1
 8002a32:	b2d1      	uxtb	r1, r2
 8002a34:	4a0d      	ldr	r2, [pc, #52]	; (8002a6c <HAL_UART_RxCpltCallback+0xd8>)
 8002a36:	7011      	strb	r1, [r2, #0]
 8002a38:	4619      	mov	r1, r3
 8002a3a:	4a0e      	ldr	r2, [pc, #56]	; (8002a74 <HAL_UART_RxCpltCallback+0xe0>)
 8002a3c:	7bfb      	ldrb	r3, [r7, #15]
 8002a3e:	5453      	strb	r3, [r2, r1]
			}
			break;
 8002a40:	e005      	b.n	8002a4e <HAL_UART_RxCpltCallback+0xba>
		}
	}
 8002a42:	bf00      	nop
 8002a44:	e004      	b.n	8002a50 <HAL_UART_RxCpltCallback+0xbc>
			break;
 8002a46:	bf00      	nop
 8002a48:	e002      	b.n	8002a50 <HAL_UART_RxCpltCallback+0xbc>
			break;
 8002a4a:	bf00      	nop
 8002a4c:	e000      	b.n	8002a50 <HAL_UART_RxCpltCallback+0xbc>
			break;
 8002a4e:	bf00      	nop
	HAL_UART_Receive_IT(&huart3, &rx_data, 1); //Receive data (one character only)
 8002a50:	2201      	movs	r2, #1
 8002a52:	4905      	ldr	r1, [pc, #20]	; (8002a68 <HAL_UART_RxCpltCallback+0xd4>)
 8002a54:	4808      	ldr	r0, [pc, #32]	; (8002a78 <HAL_UART_RxCpltCallback+0xe4>)
 8002a56:	f009 fa5d 	bl	800bf14 <HAL_UART_Receive_IT>
}
 8002a5a:	bf00      	nop
 8002a5c:	3710      	adds	r7, #16
 8002a5e:	46bd      	mov	sp, r7
 8002a60:	bd80      	pop	{r7, pc}
 8002a62:	bf00      	nop
 8002a64:	40004800 	.word	0x40004800
 8002a68:	24000592 	.word	0x24000592
 8002a6c:	24000571 	.word	0x24000571
 8002a70:	24000448 	.word	0x24000448
 8002a74:	24000574 	.word	0x24000574
 8002a78:	240009d0 	.word	0x240009d0

08002a7c <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 8002a7c:	b480      	push	{r7}
 8002a7e:	b083      	sub	sp, #12
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	6078      	str	r0, [r7, #4]
	__NOP();
 8002a84:	bf00      	nop
}
 8002a86:	bf00      	nop
 8002a88:	370c      	adds	r7, #12
 8002a8a:	46bd      	mov	sp, r7
 8002a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a90:	4770      	bx	lr
	...

08002a94 <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) {
 8002a94:	b480      	push	{r7}
 8002a96:	b083      	sub	sp, #12
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	6078      	str	r0, [r7, #4]

	if (htim->Instance == TIM2) {
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002aa4:	d10f      	bne.n	8002ac6 <HAL_TIM_IC_CaptureCallback+0x32>
		if (motor1.pMotor == motor1.numStep) {
 8002aa6:	4b1f      	ldr	r3, [pc, #124]	; (8002b24 <HAL_TIM_IC_CaptureCallback+0x90>)
 8002aa8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002aaa:	4b1e      	ldr	r3, [pc, #120]	; (8002b24 <HAL_TIM_IC_CaptureCallback+0x90>)
 8002aac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aae:	429a      	cmp	r2, r3
 8002ab0:	d103      	bne.n	8002aba <HAL_TIM_IC_CaptureCallback+0x26>
			motor1.stepReached = true;
 8002ab2:	4b1c      	ldr	r3, [pc, #112]	; (8002b24 <HAL_TIM_IC_CaptureCallback+0x90>)
 8002ab4:	2201      	movs	r2, #1
 8002ab6:	765a      	strb	r2, [r3, #25]
			motor3.pMotor++;
		}

	}

}
 8002ab8:	e02e      	b.n	8002b18 <HAL_TIM_IC_CaptureCallback+0x84>
			motor1.pMotor++;
 8002aba:	4b1a      	ldr	r3, [pc, #104]	; (8002b24 <HAL_TIM_IC_CaptureCallback+0x90>)
 8002abc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002abe:	3301      	adds	r3, #1
 8002ac0:	4a18      	ldr	r2, [pc, #96]	; (8002b24 <HAL_TIM_IC_CaptureCallback+0x90>)
 8002ac2:	6413      	str	r3, [r2, #64]	; 0x40
}
 8002ac4:	e028      	b.n	8002b18 <HAL_TIM_IC_CaptureCallback+0x84>
	}else if (htim->Instance == TIM3){
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	4a17      	ldr	r2, [pc, #92]	; (8002b28 <HAL_TIM_IC_CaptureCallback+0x94>)
 8002acc:	4293      	cmp	r3, r2
 8002ace:	d10f      	bne.n	8002af0 <HAL_TIM_IC_CaptureCallback+0x5c>
		if (motor2.pMotor == motor2.numStep) {
 8002ad0:	4b16      	ldr	r3, [pc, #88]	; (8002b2c <HAL_TIM_IC_CaptureCallback+0x98>)
 8002ad2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002ad4:	4b15      	ldr	r3, [pc, #84]	; (8002b2c <HAL_TIM_IC_CaptureCallback+0x98>)
 8002ad6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ad8:	429a      	cmp	r2, r3
 8002ada:	d103      	bne.n	8002ae4 <HAL_TIM_IC_CaptureCallback+0x50>
			motor2.stepReached = true;
 8002adc:	4b13      	ldr	r3, [pc, #76]	; (8002b2c <HAL_TIM_IC_CaptureCallback+0x98>)
 8002ade:	2201      	movs	r2, #1
 8002ae0:	765a      	strb	r2, [r3, #25]
}
 8002ae2:	e019      	b.n	8002b18 <HAL_TIM_IC_CaptureCallback+0x84>
			motor2.pMotor++;
 8002ae4:	4b11      	ldr	r3, [pc, #68]	; (8002b2c <HAL_TIM_IC_CaptureCallback+0x98>)
 8002ae6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ae8:	3301      	adds	r3, #1
 8002aea:	4a10      	ldr	r2, [pc, #64]	; (8002b2c <HAL_TIM_IC_CaptureCallback+0x98>)
 8002aec:	6413      	str	r3, [r2, #64]	; 0x40
}
 8002aee:	e013      	b.n	8002b18 <HAL_TIM_IC_CaptureCallback+0x84>
	}else if (htim->Instance == TIM4){
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	4a0e      	ldr	r2, [pc, #56]	; (8002b30 <HAL_TIM_IC_CaptureCallback+0x9c>)
 8002af6:	4293      	cmp	r3, r2
 8002af8:	d10e      	bne.n	8002b18 <HAL_TIM_IC_CaptureCallback+0x84>
		if (motor3.pMotor == motor3.numStep) {
 8002afa:	4b0e      	ldr	r3, [pc, #56]	; (8002b34 <HAL_TIM_IC_CaptureCallback+0xa0>)
 8002afc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002afe:	4b0d      	ldr	r3, [pc, #52]	; (8002b34 <HAL_TIM_IC_CaptureCallback+0xa0>)
 8002b00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b02:	429a      	cmp	r2, r3
 8002b04:	d103      	bne.n	8002b0e <HAL_TIM_IC_CaptureCallback+0x7a>
			motor3.stepReached = true;
 8002b06:	4b0b      	ldr	r3, [pc, #44]	; (8002b34 <HAL_TIM_IC_CaptureCallback+0xa0>)
 8002b08:	2201      	movs	r2, #1
 8002b0a:	765a      	strb	r2, [r3, #25]
}
 8002b0c:	e004      	b.n	8002b18 <HAL_TIM_IC_CaptureCallback+0x84>
			motor3.pMotor++;
 8002b0e:	4b09      	ldr	r3, [pc, #36]	; (8002b34 <HAL_TIM_IC_CaptureCallback+0xa0>)
 8002b10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b12:	3301      	adds	r3, #1
 8002b14:	4a07      	ldr	r2, [pc, #28]	; (8002b34 <HAL_TIM_IC_CaptureCallback+0xa0>)
 8002b16:	6413      	str	r3, [r2, #64]	; 0x40
}
 8002b18:	bf00      	nop
 8002b1a:	370c      	adds	r7, #12
 8002b1c:	46bd      	mov	sp, r7
 8002b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b22:	4770      	bx	lr
 8002b24:	24000360 	.word	0x24000360
 8002b28:	40000400 	.word	0x40000400
 8002b2c:	240003a8 	.word	0x240003a8
 8002b30:	40000800 	.word	0x40000800
 8002b34:	240003f0 	.word	0x240003f0

08002b38 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8002b38:	b480      	push	{r7}
 8002b3a:	b083      	sub	sp, #12
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	6078      	str	r0, [r7, #4]

	if (htim == &htim15) {  //Timer that update velocity'curve
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	4a17      	ldr	r2, [pc, #92]	; (8002ba0 <HAL_TIM_PeriodElapsedCallback+0x68>)
 8002b44:	4293      	cmp	r3, r2
 8002b46:	d11f      	bne.n	8002b88 <HAL_TIM_PeriodElapsedCallback+0x50>

		if (!timeFlag) {
 8002b48:	4b16      	ldr	r3, [pc, #88]	; (8002ba4 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8002b4a:	781b      	ldrb	r3, [r3, #0]
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d105      	bne.n	8002b5c <HAL_TIM_PeriodElapsedCallback+0x24>
			timeFlag = true;
 8002b50:	4b14      	ldr	r3, [pc, #80]	; (8002ba4 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8002b52:	2201      	movs	r2, #1
 8002b54:	701a      	strb	r2, [r3, #0]
			TIM5->CNT = 0;	//We start counting from here
 8002b56:	4b14      	ldr	r3, [pc, #80]	; (8002ba8 <HAL_TIM_PeriodElapsedCallback+0x70>)
 8002b58:	2200      	movs	r2, #0
 8002b5a:	625a      	str	r2, [r3, #36]	; 0x24
		}

		time = (((double) (TIM5->CNT)) * ((double)(TIM5->PSC + 1) / FCL));
 8002b5c:	4b12      	ldr	r3, [pc, #72]	; (8002ba8 <HAL_TIM_PeriodElapsedCallback+0x70>)
 8002b5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b60:	ee07 3a90 	vmov	s15, r3
 8002b64:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 8002b68:	4b0f      	ldr	r3, [pc, #60]	; (8002ba8 <HAL_TIM_PeriodElapsedCallback+0x70>)
 8002b6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b6c:	3301      	adds	r3, #1
 8002b6e:	ee07 3a90 	vmov	s15, r3
 8002b72:	eeb8 5b67 	vcvt.f64.u32	d5, s15
 8002b76:	ed9f 4b08 	vldr	d4, [pc, #32]	; 8002b98 <HAL_TIM_PeriodElapsedCallback+0x60>
 8002b7a:	ee85 7b04 	vdiv.f64	d7, d5, d4
 8002b7e:	ee26 7b07 	vmul.f64	d7, d6, d7
 8002b82:	4b0a      	ldr	r3, [pc, #40]	; (8002bac <HAL_TIM_PeriodElapsedCallback+0x74>)
 8002b84:	ed83 7b00 	vstr	d7, [r3]
	}
}
 8002b88:	bf00      	nop
 8002b8a:	370c      	adds	r7, #12
 8002b8c:	46bd      	mov	sp, r7
 8002b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b92:	4770      	bx	lr
 8002b94:	f3af 8000 	nop.w
 8002b98:	00000000 	.word	0x00000000
 8002b9c:	418e8480 	.word	0x418e8480
 8002ba0:	240007ac 	.word	0x240007ac
 8002ba4:	24000570 	.word	0x24000570
 8002ba8:	40000c00 	.word	0x40000c00
 8002bac:	24000438 	.word	0x24000438

08002bb0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002bb0:	b480      	push	{r7}
 8002bb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8002bb4:	bf00      	nop
 8002bb6:	46bd      	mov	sp, r7
 8002bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bbc:	4770      	bx	lr
	...

08002bc0 <configMotor>:
 *      Author: Santiago River
 *      Updated by: Elias Correa y Eliseo Elorga
 */
#include "motor.h"

void configMotor (Motor *motor, int i){
 8002bc0:	b580      	push	{r7, lr}
 8002bc2:	b084      	sub	sp, #16
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	6078      	str	r0, [r7, #4]
 8002bc8:	6039      	str	r1, [r7, #0]

    i = i-1; // Esto es ya que el usario ingresara 1,2 o 3
 8002bca:	683b      	ldr	r3, [r7, #0]
 8002bcc:	3b01      	subs	r3, #1
 8002bce:	603b      	str	r3, [r7, #0]

	volatile double diffAngles;

	if (motor->theta >= motor->currentAngle) {
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	ed93 6b00 	vldr	d6, [r3]
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	ed93 7b08 	vldr	d7, [r3, #32]
 8002bdc:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8002be0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002be4:	db2b      	blt.n	8002c3e <configMotor+0x7e>

		diffAngles = motor->theta - motor->currentAngle;	//Calculo cuantos grados se tiene que mover.
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	ed93 6b00 	vldr	d6, [r3]
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	ed93 7b08 	vldr	d7, [r3, #32]
 8002bf2:	ee36 7b47 	vsub.f64	d7, d6, d7
 8002bf6:	ed87 7b02 	vstr	d7, [r7, #8]
		motor->currentAngle = motor->theta;
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c00:	6879      	ldr	r1, [r7, #4]
 8002c02:	e9c1 2308 	strd	r2, r3, [r1, #32]
		if (i==0) negative_Dir_MOTOR_1; //Antihorario visto de frente
 8002c06:	683b      	ldr	r3, [r7, #0]
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d105      	bne.n	8002c18 <configMotor+0x58>
 8002c0c:	2201      	movs	r2, #1
 8002c0e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002c12:	4849      	ldr	r0, [pc, #292]	; (8002d38 <configMotor+0x178>)
 8002c14:	f004 fd5a 	bl	80076cc <HAL_GPIO_WritePin>
		if (i==1) negative_Dir_MOTOR_2;
 8002c18:	683b      	ldr	r3, [r7, #0]
 8002c1a:	2b01      	cmp	r3, #1
 8002c1c:	d105      	bne.n	8002c2a <configMotor+0x6a>
 8002c1e:	2201      	movs	r2, #1
 8002c20:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002c24:	4844      	ldr	r0, [pc, #272]	; (8002d38 <configMotor+0x178>)
 8002c26:	f004 fd51 	bl	80076cc <HAL_GPIO_WritePin>
		if (i==2) negative_Dir_MOTOR_3;
 8002c2a:	683b      	ldr	r3, [r7, #0]
 8002c2c:	2b02      	cmp	r3, #2
 8002c2e:	d131      	bne.n	8002c94 <configMotor+0xd4>
 8002c30:	2201      	movs	r2, #1
 8002c32:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002c36:	4840      	ldr	r0, [pc, #256]	; (8002d38 <configMotor+0x178>)
 8002c38:	f004 fd48 	bl	80076cc <HAL_GPIO_WritePin>
 8002c3c:	e02a      	b.n	8002c94 <configMotor+0xd4>

	} else {

		diffAngles = motor->currentAngle - motor->theta;	//Calculo cuantos grados se tiene que mover.
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	ed93 6b08 	vldr	d6, [r3, #32]
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	ed93 7b00 	vldr	d7, [r3]
 8002c4a:	ee36 7b47 	vsub.f64	d7, d6, d7
 8002c4e:	ed87 7b02 	vstr	d7, [r7, #8]
		motor->currentAngle = motor->theta;
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c58:	6879      	ldr	r1, [r7, #4]
 8002c5a:	e9c1 2308 	strd	r2, r3, [r1, #32]

		if (i==0) positive_Dir_MOTOR_1; // Horario visto de frente
 8002c5e:	683b      	ldr	r3, [r7, #0]
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d105      	bne.n	8002c70 <configMotor+0xb0>
 8002c64:	2200      	movs	r2, #0
 8002c66:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002c6a:	4833      	ldr	r0, [pc, #204]	; (8002d38 <configMotor+0x178>)
 8002c6c:	f004 fd2e 	bl	80076cc <HAL_GPIO_WritePin>
		if (i==1) positive_Dir_MOTOR_2;
 8002c70:	683b      	ldr	r3, [r7, #0]
 8002c72:	2b01      	cmp	r3, #1
 8002c74:	d105      	bne.n	8002c82 <configMotor+0xc2>
 8002c76:	2200      	movs	r2, #0
 8002c78:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002c7c:	482e      	ldr	r0, [pc, #184]	; (8002d38 <configMotor+0x178>)
 8002c7e:	f004 fd25 	bl	80076cc <HAL_GPIO_WritePin>
		if (i==2) positive_Dir_MOTOR_3;
 8002c82:	683b      	ldr	r3, [r7, #0]
 8002c84:	2b02      	cmp	r3, #2
 8002c86:	d105      	bne.n	8002c94 <configMotor+0xd4>
 8002c88:	2200      	movs	r2, #0
 8002c8a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002c8e:	482a      	ldr	r0, [pc, #168]	; (8002d38 <configMotor+0x178>)
 8002c90:	f004 fd1c 	bl	80076cc <HAL_GPIO_WritePin>

	/*Calculamos el error de posicion por caseteo a "int" y cuando supera la unidad la compenzamos, para ello
	 * almacenamos el remanente de cada operacion. Cuando este remanente supera la unidad, le sumamos 1 a el numero
	 * de pasos que debe efectuar el motor */

	motor->calcStep = (diffAngles * STEPREV) / 360;
 8002c94:	ed97 7b02 	vldr	d7, [r7, #8]
 8002c98:	ed9f 6b23 	vldr	d6, [pc, #140]	; 8002d28 <configMotor+0x168>
 8002c9c:	ee27 6b06 	vmul.f64	d6, d7, d6
 8002ca0:	ed9f 5b23 	vldr	d5, [pc, #140]	; 8002d30 <configMotor+0x170>
 8002ca4:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	ed83 7b0a 	vstr	d7, [r3, #40]	; 0x28
	motor->numStep = (uint32_t) motor->calcStep;
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	ed93 7b0a 	vldr	d7, [r3, #40]	; 0x28
 8002cb4:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8002cb8:	ee17 2a90 	vmov	r2, s15
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	631a      	str	r2, [r3, #48]	; 0x30
	motor->remainder += (motor->calcStep - motor->numStep);
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	ed93 6b0e 	vldr	d6, [r3, #56]	; 0x38
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	ed93 5b0a 	vldr	d5, [r3, #40]	; 0x28
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cd0:	ee07 3a90 	vmov	s15, r3
 8002cd4:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8002cd8:	ee35 7b47 	vsub.f64	d7, d5, d7
 8002cdc:	ee36 7b07 	vadd.f64	d7, d6, d7
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	ed83 7b0e 	vstr	d7, [r3, #56]	; 0x38
	if (motor->remainder >= 1) {
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	ed93 7b0e 	vldr	d7, [r3, #56]	; 0x38
 8002cec:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8002cf0:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8002cf4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002cf8:	da00      	bge.n	8002cfc <configMotor+0x13c>
		motor->remainder -= 1;
		motor->numStep += 1;
	}

}
 8002cfa:	e00e      	b.n	8002d1a <configMotor+0x15a>
		motor->remainder -= 1;
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	ed93 7b0e 	vldr	d7, [r3, #56]	; 0x38
 8002d02:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8002d06:	ee37 7b46 	vsub.f64	d7, d7, d6
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	ed83 7b0e 	vstr	d7, [r3, #56]	; 0x38
		motor->numStep += 1;
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d14:	1c5a      	adds	r2, r3, #1
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	631a      	str	r2, [r3, #48]	; 0x30
}
 8002d1a:	bf00      	nop
 8002d1c:	3710      	adds	r7, #16
 8002d1e:	46bd      	mov	sp, r7
 8002d20:	bd80      	pop	{r7, pc}
 8002d22:	bf00      	nop
 8002d24:	f3af 8000 	nop.w
 8002d28:	00000000 	.word	0x00000000
 8002d2c:	40bf4000 	.word	0x40bf4000
 8002d30:	00000000 	.word	0x00000000
 8002d34:	40768000 	.word	0x40768000
 8002d38:	58020800 	.word	0x58020800

08002d3c <robotInitialization>:
uint8_t message1[] = "El robot ya se encuentra operacional.\n";

bool receptionFlag=false;


void robotInitialization(void){
 8002d3c:	b580      	push	{r7, lr}
 8002d3e:	af00      	add	r7, sp, #0
	* habilatamos los drivers al momento de lanzar el programa para que los motores se bloqueen. Se procedera
	* a darles una consigna pequeña de posicion en direccion horario para que los eslabones no entren en la
	* singularidad de los 90º */


	HAL_TIM_Base_Start(&htim12);
 8002d40:	481b      	ldr	r0, [pc, #108]	; (8002db0 <robotInitialization+0x74>)
 8002d42:	f007 f8ab 	bl	8009e9c <HAL_TIM_Base_Start>
	HAL_TIM_Base_Start(&htim13);
 8002d46:	481b      	ldr	r0, [pc, #108]	; (8002db4 <robotInitialization+0x78>)
 8002d48:	f007 f8a8 	bl	8009e9c <HAL_TIM_Base_Start>
	HAL_TIM_Base_Start(&htim14);
 8002d4c:	481a      	ldr	r0, [pc, #104]	; (8002db8 <robotInitialization+0x7c>)
 8002d4e:	f007 f8a5 	bl	8009e9c <HAL_TIM_Base_Start>

	HAL_GPIO_WritePin(S_Enable_1_GPIO_Port, S_Enable_1_Pin, GPIO_PIN_RESET);
 8002d52:	2200      	movs	r2, #0
 8002d54:	2110      	movs	r1, #16
 8002d56:	4819      	ldr	r0, [pc, #100]	; (8002dbc <robotInitialization+0x80>)
 8002d58:	f004 fcb8 	bl	80076cc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S_Enable_2_GPIO_Port, S_Enable_2_Pin, GPIO_PIN_RESET);
 8002d5c:	2200      	movs	r2, #0
 8002d5e:	2120      	movs	r1, #32
 8002d60:	4816      	ldr	r0, [pc, #88]	; (8002dbc <robotInitialization+0x80>)
 8002d62:	f004 fcb3 	bl	80076cc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S_Enable_3_GPIO_Port, S_Enable_3_Pin, GPIO_PIN_RESET);
 8002d66:	2200      	movs	r2, #0
 8002d68:	2140      	movs	r1, #64	; 0x40
 8002d6a:	4814      	ldr	r0, [pc, #80]	; (8002dbc <robotInitialization+0x80>)
 8002d6c:	f004 fcae 	bl	80076cc <HAL_GPIO_WritePin>

	HAL_Delay(50); //50 ms es el tiempo que la señal ENABLE en cambiar de estado
 8002d70:	2032      	movs	r0, #50	; 0x32
 8002d72:	f003 fc0d 	bl	8006590 <HAL_Delay>

	// Se estable la direccion horario por defecto
	positive_Dir_MOTOR_1;
 8002d76:	2200      	movs	r2, #0
 8002d78:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002d7c:	4810      	ldr	r0, [pc, #64]	; (8002dc0 <robotInitialization+0x84>)
 8002d7e:	f004 fca5 	bl	80076cc <HAL_GPIO_WritePin>
	positive_Dir_MOTOR_2;
 8002d82:	2200      	movs	r2, #0
 8002d84:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002d88:	480d      	ldr	r0, [pc, #52]	; (8002dc0 <robotInitialization+0x84>)
 8002d8a:	f004 fc9f 	bl	80076cc <HAL_GPIO_WritePin>
	positive_Dir_MOTOR_3;
 8002d8e:	2200      	movs	r2, #0
 8002d90:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002d94:	480a      	ldr	r0, [pc, #40]	; (8002dc0 <robotInitialization+0x84>)
 8002d96:	f004 fc99 	bl	80076cc <HAL_GPIO_WritePin>

	motor1.stepReached = false;
 8002d9a:	4b0a      	ldr	r3, [pc, #40]	; (8002dc4 <robotInitialization+0x88>)
 8002d9c:	2200      	movs	r2, #0
 8002d9e:	765a      	strb	r2, [r3, #25]
	motor2.stepReached = false;
 8002da0:	4b09      	ldr	r3, [pc, #36]	; (8002dc8 <robotInitialization+0x8c>)
 8002da2:	2200      	movs	r2, #0
 8002da4:	765a      	strb	r2, [r3, #25]
	motor3.stepReached = false;
 8002da6:	4b09      	ldr	r3, [pc, #36]	; (8002dcc <robotInitialization+0x90>)
 8002da8:	2200      	movs	r2, #0
 8002daa:	765a      	strb	r2, [r3, #25]


}
 8002dac:	bf00      	nop
 8002dae:	bd80      	pop	{r7, pc}
 8002db0:	240006c8 	.word	0x240006c8
 8002db4:	24000714 	.word	0x24000714
 8002db8:	24000760 	.word	0x24000760
 8002dbc:	58020c00 	.word	0x58020c00
 8002dc0:	58020800 	.word	0x58020800
 8002dc4:	24000360 	.word	0x24000360
 8002dc8:	240003a8 	.word	0x240003a8
 8002dcc:	240003f0 	.word	0x240003f0

08002dd0 <statesMachineLoop>:


void statesMachineLoop(void){
 8002dd0:	b580      	push	{r7, lr}
 8002dd2:	af00      	add	r7, sp, #0



	switch (state){
 8002dd4:	4b98      	ldr	r3, [pc, #608]	; (8003038 <statesMachineLoop+0x268>)
 8002dd6:	781b      	ldrb	r3, [r3, #0]
 8002dd8:	2b04      	cmp	r3, #4
 8002dda:	f200 8510 	bhi.w	80037fe <statesMachineLoop+0xa2e>
 8002dde:	a201      	add	r2, pc, #4	; (adr r2, 8002de4 <statesMachineLoop+0x14>)
 8002de0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002de4:	08002df9 	.word	0x08002df9
 8002de8:	0800311d 	.word	0x0800311d
 8002dec:	08002ef9 	.word	0x08002ef9
 8002df0:	08002e29 	.word	0x08002e29
 8002df4:	080032c5 	.word	0x080032c5

	case INIT:

		  HAL_UART_Transmit(&huart3, message, sizeof(message), 100); //Mensaje de inicializacion en curso.
 8002df8:	2364      	movs	r3, #100	; 0x64
 8002dfa:	221c      	movs	r2, #28
 8002dfc:	498f      	ldr	r1, [pc, #572]	; (800303c <statesMachineLoop+0x26c>)
 8002dfe:	4890      	ldr	r0, [pc, #576]	; (8003040 <statesMachineLoop+0x270>)
 8002e00:	f008 fff2 	bl	800bde8 <HAL_UART_Transmit>
		  HAL_UART_Receive_IT(&huart3, &rx_data, 1);
 8002e04:	2201      	movs	r2, #1
 8002e06:	498f      	ldr	r1, [pc, #572]	; (8003044 <statesMachineLoop+0x274>)
 8002e08:	488d      	ldr	r0, [pc, #564]	; (8003040 <statesMachineLoop+0x270>)
 8002e0a:	f009 f883 	bl	800bf14 <HAL_UART_Receive_IT>
		  robotInitialization();
 8002e0e:	f7ff ff95 	bl	8002d3c <robotInitialization>
		  HAL_UART_Transmit(&huart3, message1, sizeof(message1), 100); //Mensaje inidicando que el Robot esta listo para su uso
 8002e12:	2364      	movs	r3, #100	; 0x64
 8002e14:	2227      	movs	r2, #39	; 0x27
 8002e16:	498c      	ldr	r1, [pc, #560]	; (8003048 <statesMachineLoop+0x278>)
 8002e18:	4889      	ldr	r0, [pc, #548]	; (8003040 <statesMachineLoop+0x270>)
 8002e1a:	f008 ffe5 	bl	800bde8 <HAL_UART_Transmit>


		  state = READY;
 8002e1e:	4b86      	ldr	r3, [pc, #536]	; (8003038 <statesMachineLoop+0x268>)
 8002e20:	2201      	movs	r2, #1
 8002e22:	701a      	strb	r2, [r3, #0]

		break;
 8002e24:	f000 bcf2 	b.w	800380c <statesMachineLoop+0xa3c>

	case HOME:

		receptionFlag = false; //Solo para asegurarse de no saltar al estado ready con esta bandera en true
 8002e28:	4b88      	ldr	r3, [pc, #544]	; (800304c <statesMachineLoop+0x27c>)
 8002e2a:	2200      	movs	r2, #0
 8002e2c:	701a      	strb	r2, [r3, #0]

		homing();
 8002e2e:	f7fd ff6b 	bl	8000d08 <homing>

        if(homFin){
 8002e32:	4b87      	ldr	r3, [pc, #540]	; (8003050 <statesMachineLoop+0x280>)
 8002e34:	781b      	ldrb	r3, [r3, #0]
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	f000 84e3 	beq.w	8003802 <statesMachineLoop+0xa32>

        	homFin = false;
 8002e3c:	4b84      	ldr	r3, [pc, #528]	; (8003050 <statesMachineLoop+0x280>)
 8002e3e:	2200      	movs	r2, #0
 8002e40:	701a      	strb	r2, [r3, #0]
        	HAL_Delay(1);
 8002e42:	2001      	movs	r0, #1
 8002e44:	f003 fba4 	bl	8006590 <HAL_Delay>

        	HAL_NVIC_EnableIRQ(EXTI0_IRQn);		//Enciendo interrupcion EndStop 1 Superior
 8002e48:	2006      	movs	r0, #6
 8002e4a:	f003 fcea 	bl	8006822 <HAL_NVIC_EnableIRQ>
        	HAL_NVIC_EnableIRQ(EXTI1_IRQn);		//Enciendo interrupcion EndStop 1 Inferior
 8002e4e:	2007      	movs	r0, #7
 8002e50:	f003 fce7 	bl	8006822 <HAL_NVIC_EnableIRQ>
        	HAL_NVIC_EnableIRQ(EXTI2_IRQn);		//Enciendo interrupcion EndStop 2 Superior
 8002e54:	2008      	movs	r0, #8
 8002e56:	f003 fce4 	bl	8006822 <HAL_NVIC_EnableIRQ>
        	HAL_NVIC_EnableIRQ(EXTI3_IRQn);		//Enciendo interrupcion EndStop 2 Inferior
 8002e5a:	2009      	movs	r0, #9
 8002e5c:	f003 fce1 	bl	8006822 <HAL_NVIC_EnableIRQ>
        	HAL_NVIC_EnableIRQ(EXTI4_IRQn);		//Enciendo interrupcion EndStop 3 Superior
 8002e60:	200a      	movs	r0, #10
 8002e62:	f003 fcde 	bl	8006822 <HAL_NVIC_EnableIRQ>
        	HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);	//Enciendo interrupcion EndStop 3 Inferior
 8002e66:	2017      	movs	r0, #23
 8002e68:	f003 fcdb 	bl	8006822 <HAL_NVIC_EnableIRQ>
        	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn); //Enciendo interrupcion faultDriver
 8002e6c:	2028      	movs	r0, #40	; 0x28
 8002e6e:	f003 fcd8 	bl	8006822 <HAL_NVIC_EnableIRQ>

			Pini.x=0;
 8002e72:	4978      	ldr	r1, [pc, #480]	; (8003054 <statesMachineLoop+0x284>)
 8002e74:	f04f 0200 	mov.w	r2, #0
 8002e78:	f04f 0300 	mov.w	r3, #0
 8002e7c:	e9c1 2300 	strd	r2, r3, [r1]
			Pini.y=0;
 8002e80:	4974      	ldr	r1, [pc, #464]	; (8003054 <statesMachineLoop+0x284>)
 8002e82:	f04f 0200 	mov.w	r2, #0
 8002e86:	f04f 0300 	mov.w	r3, #0
 8002e8a:	e9c1 2302 	strd	r2, r3, [r1, #8]
			Pini.z =-0.5208; //antes era -0.33
 8002e8e:	4971      	ldr	r1, [pc, #452]	; (8003054 <statesMachineLoop+0x284>)
 8002e90:	a367      	add	r3, pc, #412	; (adr r3, 8003030 <statesMachineLoop+0x260>)
 8002e92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e96:	e9c1 2304 	strd	r2, r3, [r1, #16]

			motor1.theta = 0.0;
 8002e9a:	496f      	ldr	r1, [pc, #444]	; (8003058 <statesMachineLoop+0x288>)
 8002e9c:	f04f 0200 	mov.w	r2, #0
 8002ea0:	f04f 0300 	mov.w	r3, #0
 8002ea4:	e9c1 2300 	strd	r2, r3, [r1]
			motor2.theta = 0.0;
 8002ea8:	496c      	ldr	r1, [pc, #432]	; (800305c <statesMachineLoop+0x28c>)
 8002eaa:	f04f 0200 	mov.w	r2, #0
 8002eae:	f04f 0300 	mov.w	r3, #0
 8002eb2:	e9c1 2300 	strd	r2, r3, [r1]
			motor3.theta = 0.0;
 8002eb6:	496a      	ldr	r1, [pc, #424]	; (8003060 <statesMachineLoop+0x290>)
 8002eb8:	f04f 0200 	mov.w	r2, #0
 8002ebc:	f04f 0300 	mov.w	r3, #0
 8002ec0:	e9c1 2300 	strd	r2, r3, [r1]

			motor1.currentAngle = 0.0;
 8002ec4:	4964      	ldr	r1, [pc, #400]	; (8003058 <statesMachineLoop+0x288>)
 8002ec6:	f04f 0200 	mov.w	r2, #0
 8002eca:	f04f 0300 	mov.w	r3, #0
 8002ece:	e9c1 2308 	strd	r2, r3, [r1, #32]
			motor2.currentAngle = 0.0;
 8002ed2:	4962      	ldr	r1, [pc, #392]	; (800305c <statesMachineLoop+0x28c>)
 8002ed4:	f04f 0200 	mov.w	r2, #0
 8002ed8:	f04f 0300 	mov.w	r3, #0
 8002edc:	e9c1 2308 	strd	r2, r3, [r1, #32]
			motor3.currentAngle = 0.0;
 8002ee0:	495f      	ldr	r1, [pc, #380]	; (8003060 <statesMachineLoop+0x290>)
 8002ee2:	f04f 0200 	mov.w	r2, #0
 8002ee6:	f04f 0300 	mov.w	r3, #0
 8002eea:	e9c1 2308 	strd	r2, r3, [r1, #32]

			state = READY;
 8002eee:	4b52      	ldr	r3, [pc, #328]	; (8003038 <statesMachineLoop+0x268>)
 8002ef0:	2201      	movs	r2, #1
 8002ef2:	701a      	strb	r2, [r3, #0]

        }


		break;
 8002ef4:	f000 bc85 	b.w	8003802 <statesMachineLoop+0xa32>

	case WORKING:

		receptionFlag = false;
 8002ef8:	4b54      	ldr	r3, [pc, #336]	; (800304c <statesMachineLoop+0x27c>)
 8002efa:	2200      	movs	r2, #0
 8002efc:	701a      	strb	r2, [r3, #0]

		while (!(motor1.stepReached && motor2.stepReached  && motor3.stepReached)){
 8002efe:	e087      	b.n	8003010 <statesMachineLoop+0x240>

			if (state==FAULT)break;
 8002f00:	4b4d      	ldr	r3, [pc, #308]	; (8003038 <statesMachineLoop+0x268>)
 8002f02:	781b      	ldrb	r3, [r3, #0]
 8002f04:	2b04      	cmp	r3, #4
 8002f06:	f000 80c1 	beq.w	800308c <statesMachineLoop+0x2bc>

			if (motor1.stepReached) {
 8002f0a:	4b53      	ldr	r3, [pc, #332]	; (8003058 <statesMachineLoop+0x288>)
 8002f0c:	7e5b      	ldrb	r3, [r3, #25]
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d008      	beq.n	8002f24 <statesMachineLoop+0x154>
				Stop_PWM_MOTOR_1;
 8002f12:	2100      	movs	r1, #0
 8002f14:	4853      	ldr	r0, [pc, #332]	; (8003064 <statesMachineLoop+0x294>)
 8002f16:	f007 fa6f 	bl	800a3f8 <HAL_TIM_PWM_Stop>
				HAL_TIM_IC_Stop(&htim2, TIM_CHANNEL_1);
 8002f1a:	2100      	movs	r1, #0
 8002f1c:	4852      	ldr	r0, [pc, #328]	; (8003068 <statesMachineLoop+0x298>)
 8002f1e:	f007 fb62 	bl	800a5e6 <HAL_TIM_IC_Stop>
 8002f22:	e018      	b.n	8002f56 <statesMachineLoop+0x186>
			}else if (motor2.stepReached) {
 8002f24:	4b4d      	ldr	r3, [pc, #308]	; (800305c <statesMachineLoop+0x28c>)
 8002f26:	7e5b      	ldrb	r3, [r3, #25]
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d008      	beq.n	8002f3e <statesMachineLoop+0x16e>
				Stop_PWM_MOTOR_2;
 8002f2c:	2100      	movs	r1, #0
 8002f2e:	484f      	ldr	r0, [pc, #316]	; (800306c <statesMachineLoop+0x29c>)
 8002f30:	f007 fa62 	bl	800a3f8 <HAL_TIM_PWM_Stop>
				HAL_TIM_IC_Stop(&htim2, TIM_CHANNEL_2);
 8002f34:	2104      	movs	r1, #4
 8002f36:	484c      	ldr	r0, [pc, #304]	; (8003068 <statesMachineLoop+0x298>)
 8002f38:	f007 fb55 	bl	800a5e6 <HAL_TIM_IC_Stop>
 8002f3c:	e00b      	b.n	8002f56 <statesMachineLoop+0x186>
			}else if (motor3.stepReached){
 8002f3e:	4b48      	ldr	r3, [pc, #288]	; (8003060 <statesMachineLoop+0x290>)
 8002f40:	7e5b      	ldrb	r3, [r3, #25]
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d007      	beq.n	8002f56 <statesMachineLoop+0x186>
				Stop_PWM_MOTOR_3;
 8002f46:	2100      	movs	r1, #0
 8002f48:	4849      	ldr	r0, [pc, #292]	; (8003070 <statesMachineLoop+0x2a0>)
 8002f4a:	f007 fa55 	bl	800a3f8 <HAL_TIM_PWM_Stop>
				HAL_TIM_IC_Stop(&htim2, TIM_CHANNEL_3);
 8002f4e:	2108      	movs	r1, #8
 8002f50:	4845      	ldr	r0, [pc, #276]	; (8003068 <statesMachineLoop+0x298>)
 8002f52:	f007 fb48 	bl	800a5e6 <HAL_TIM_IC_Stop>
			}

			motor1.omega = get_Straj(time,motor1.currentAngle,motor1.theta,arrayParams1);
 8002f56:	4b47      	ldr	r3, [pc, #284]	; (8003074 <statesMachineLoop+0x2a4>)
 8002f58:	ed93 7b00 	vldr	d7, [r3]
 8002f5c:	4b3e      	ldr	r3, [pc, #248]	; (8003058 <statesMachineLoop+0x288>)
 8002f5e:	ed93 6b08 	vldr	d6, [r3, #32]
 8002f62:	4b3d      	ldr	r3, [pc, #244]	; (8003058 <statesMachineLoop+0x288>)
 8002f64:	ed93 5b00 	vldr	d5, [r3]
 8002f68:	4843      	ldr	r0, [pc, #268]	; (8003078 <statesMachineLoop+0x2a8>)
 8002f6a:	eeb0 2b45 	vmov.f64	d2, d5
 8002f6e:	eeb0 1b46 	vmov.f64	d1, d6
 8002f72:	eeb0 0b47 	vmov.f64	d0, d7
 8002f76:	f001 fb11 	bl	800459c <get_Straj>
 8002f7a:	eeb0 7b40 	vmov.f64	d7, d0
 8002f7e:	4b36      	ldr	r3, [pc, #216]	; (8003058 <statesMachineLoop+0x288>)
 8002f80:	ed83 7b02 	vstr	d7, [r3, #8]
			motor2.omega = get_Straj(time,motor2.currentAngle,motor2.theta,arrayParams2);
 8002f84:	4b3b      	ldr	r3, [pc, #236]	; (8003074 <statesMachineLoop+0x2a4>)
 8002f86:	ed93 7b00 	vldr	d7, [r3]
 8002f8a:	4b34      	ldr	r3, [pc, #208]	; (800305c <statesMachineLoop+0x28c>)
 8002f8c:	ed93 6b08 	vldr	d6, [r3, #32]
 8002f90:	4b32      	ldr	r3, [pc, #200]	; (800305c <statesMachineLoop+0x28c>)
 8002f92:	ed93 5b00 	vldr	d5, [r3]
 8002f96:	4839      	ldr	r0, [pc, #228]	; (800307c <statesMachineLoop+0x2ac>)
 8002f98:	eeb0 2b45 	vmov.f64	d2, d5
 8002f9c:	eeb0 1b46 	vmov.f64	d1, d6
 8002fa0:	eeb0 0b47 	vmov.f64	d0, d7
 8002fa4:	f001 fafa 	bl	800459c <get_Straj>
 8002fa8:	eeb0 7b40 	vmov.f64	d7, d0
 8002fac:	4b2b      	ldr	r3, [pc, #172]	; (800305c <statesMachineLoop+0x28c>)
 8002fae:	ed83 7b02 	vstr	d7, [r3, #8]
			motor3.omega = get_Straj(time,motor3.currentAngle,motor3.theta,arrayParams3);
 8002fb2:	4b30      	ldr	r3, [pc, #192]	; (8003074 <statesMachineLoop+0x2a4>)
 8002fb4:	ed93 7b00 	vldr	d7, [r3]
 8002fb8:	4b29      	ldr	r3, [pc, #164]	; (8003060 <statesMachineLoop+0x290>)
 8002fba:	ed93 6b08 	vldr	d6, [r3, #32]
 8002fbe:	4b28      	ldr	r3, [pc, #160]	; (8003060 <statesMachineLoop+0x290>)
 8002fc0:	ed93 5b00 	vldr	d5, [r3]
 8002fc4:	482e      	ldr	r0, [pc, #184]	; (8003080 <statesMachineLoop+0x2b0>)
 8002fc6:	eeb0 2b45 	vmov.f64	d2, d5
 8002fca:	eeb0 1b46 	vmov.f64	d1, d6
 8002fce:	eeb0 0b47 	vmov.f64	d0, d7
 8002fd2:	f001 fae3 	bl	800459c <get_Straj>
 8002fd6:	eeb0 7b40 	vmov.f64	d7, d0
 8002fda:	4b21      	ldr	r3, [pc, #132]	; (8003060 <statesMachineLoop+0x290>)
 8002fdc:	ed83 7b02 	vstr	d7, [r3, #8]

			setProfilTimer();
 8002fe0:	f002 fe7e 	bl	8005ce0 <setProfilTimer>


			if(startMotors){
 8002fe4:	4b27      	ldr	r3, [pc, #156]	; (8003084 <statesMachineLoop+0x2b4>)
 8002fe6:	781b      	ldrb	r3, [r3, #0]
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d00e      	beq.n	800300a <statesMachineLoop+0x23a>
				startMotors = false;
 8002fec:	4b25      	ldr	r3, [pc, #148]	; (8003084 <statesMachineLoop+0x2b4>)
 8002fee:	2200      	movs	r2, #0
 8002ff0:	701a      	strb	r2, [r3, #0]
				Start_PWM_MOTOR_1;	// Activar generacion de pwm
 8002ff2:	2100      	movs	r1, #0
 8002ff4:	481b      	ldr	r0, [pc, #108]	; (8003064 <statesMachineLoop+0x294>)
 8002ff6:	f007 f8f1 	bl	800a1dc <HAL_TIM_PWM_Start>
				Start_PWM_MOTOR_2;	// Activar generacion de pwm
 8002ffa:	2100      	movs	r1, #0
 8002ffc:	481b      	ldr	r0, [pc, #108]	; (800306c <statesMachineLoop+0x29c>)
 8002ffe:	f007 f8ed 	bl	800a1dc <HAL_TIM_PWM_Start>
				Start_PWM_MOTOR_3;	// Activar generacion de pwm
 8003002:	2100      	movs	r1, #0
 8003004:	481a      	ldr	r0, [pc, #104]	; (8003070 <statesMachineLoop+0x2a0>)
 8003006:	f007 f8e9 	bl	800a1dc <HAL_TIM_PWM_Start>
			}

			stopMotors = true;
 800300a:	4b1f      	ldr	r3, [pc, #124]	; (8003088 <statesMachineLoop+0x2b8>)
 800300c:	2201      	movs	r2, #1
 800300e:	701a      	strb	r2, [r3, #0]
		while (!(motor1.stepReached && motor2.stepReached  && motor3.stepReached)){
 8003010:	4b11      	ldr	r3, [pc, #68]	; (8003058 <statesMachineLoop+0x288>)
 8003012:	7e5b      	ldrb	r3, [r3, #25]
 8003014:	2b00      	cmp	r3, #0
 8003016:	f43f af73 	beq.w	8002f00 <statesMachineLoop+0x130>
 800301a:	4b10      	ldr	r3, [pc, #64]	; (800305c <statesMachineLoop+0x28c>)
 800301c:	7e5b      	ldrb	r3, [r3, #25]
 800301e:	2b00      	cmp	r3, #0
 8003020:	f43f af6e 	beq.w	8002f00 <statesMachineLoop+0x130>
 8003024:	4b0e      	ldr	r3, [pc, #56]	; (8003060 <statesMachineLoop+0x290>)
 8003026:	7e5b      	ldrb	r3, [r3, #25]
 8003028:	2b00      	cmp	r3, #0
 800302a:	f43f af69 	beq.w	8002f00 <statesMachineLoop+0x130>
 800302e:	e02e      	b.n	800308e <statesMachineLoop+0x2be>
 8003030:	c2f837b5 	.word	0xc2f837b5
 8003034:	bfe0aa64 	.word	0xbfe0aa64
 8003038:	24000450 	.word	0x24000450
 800303c:	24000030 	.word	0x24000030
 8003040:	240009d0 	.word	0x240009d0
 8003044:	24000592 	.word	0x24000592
 8003048:	2400004c 	.word	0x2400004c
 800304c:	24000593 	.word	0x24000593
 8003050:	24000451 	.word	0x24000451
 8003054:	24000498 	.word	0x24000498
 8003058:	24000360 	.word	0x24000360
 800305c:	240003a8 	.word	0x240003a8
 8003060:	240003f0 	.word	0x240003f0
 8003064:	240006c8 	.word	0x240006c8
 8003068:	24000598 	.word	0x24000598
 800306c:	24000714 	.word	0x24000714
 8003070:	24000760 	.word	0x24000760
 8003074:	24000438 	.word	0x24000438
 8003078:	240004c8 	.word	0x240004c8
 800307c:	24000500 	.word	0x24000500
 8003080:	24000538 	.word	0x24000538
 8003084:	24000452 	.word	0x24000452
 8003088:	24000453 	.word	0x24000453
			if (state==FAULT)break;
 800308c:	bf00      	nop
		}// End while




		if (stopMotors){   //If steps goals for each motor were reached, we stop motors
 800308e:	4b73      	ldr	r3, [pc, #460]	; (800325c <statesMachineLoop+0x48c>)
 8003090:	781b      	ldrb	r3, [r3, #0]
 8003092:	2b00      	cmp	r3, #0
 8003094:	d026      	beq.n	80030e4 <statesMachineLoop+0x314>

			startMotors = false;
 8003096:	4b72      	ldr	r3, [pc, #456]	; (8003260 <statesMachineLoop+0x490>)
 8003098:	2200      	movs	r2, #0
 800309a:	701a      	strb	r2, [r3, #0]

			HAL_TIM_IC_Stop(&htim2, TIM_CHANNEL_1);
 800309c:	2100      	movs	r1, #0
 800309e:	4871      	ldr	r0, [pc, #452]	; (8003264 <statesMachineLoop+0x494>)
 80030a0:	f007 faa1 	bl	800a5e6 <HAL_TIM_IC_Stop>
			HAL_TIM_IC_Stop(&htim3, TIM_CHANNEL_1);
 80030a4:	2100      	movs	r1, #0
 80030a6:	4870      	ldr	r0, [pc, #448]	; (8003268 <statesMachineLoop+0x498>)
 80030a8:	f007 fa9d 	bl	800a5e6 <HAL_TIM_IC_Stop>
			HAL_TIM_IC_Stop(&htim4, TIM_CHANNEL_1);
 80030ac:	2100      	movs	r1, #0
 80030ae:	486f      	ldr	r0, [pc, #444]	; (800326c <statesMachineLoop+0x49c>)
 80030b0:	f007 fa99 	bl	800a5e6 <HAL_TIM_IC_Stop>

			if (motor1.stepReached) Stop_PWM_MOTOR_1;
 80030b4:	4b6e      	ldr	r3, [pc, #440]	; (8003270 <statesMachineLoop+0x4a0>)
 80030b6:	7e5b      	ldrb	r3, [r3, #25]
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d003      	beq.n	80030c4 <statesMachineLoop+0x2f4>
 80030bc:	2100      	movs	r1, #0
 80030be:	486d      	ldr	r0, [pc, #436]	; (8003274 <statesMachineLoop+0x4a4>)
 80030c0:	f007 f99a 	bl	800a3f8 <HAL_TIM_PWM_Stop>
			if (motor2.stepReached) Stop_PWM_MOTOR_2;
 80030c4:	4b6c      	ldr	r3, [pc, #432]	; (8003278 <statesMachineLoop+0x4a8>)
 80030c6:	7e5b      	ldrb	r3, [r3, #25]
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d003      	beq.n	80030d4 <statesMachineLoop+0x304>
 80030cc:	2100      	movs	r1, #0
 80030ce:	486b      	ldr	r0, [pc, #428]	; (800327c <statesMachineLoop+0x4ac>)
 80030d0:	f007 f992 	bl	800a3f8 <HAL_TIM_PWM_Stop>
			if (motor3.stepReached)	Stop_PWM_MOTOR_3;
 80030d4:	4b6a      	ldr	r3, [pc, #424]	; (8003280 <statesMachineLoop+0x4b0>)
 80030d6:	7e5b      	ldrb	r3, [r3, #25]
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d003      	beq.n	80030e4 <statesMachineLoop+0x314>
 80030dc:	2100      	movs	r1, #0
 80030de:	4869      	ldr	r0, [pc, #420]	; (8003284 <statesMachineLoop+0x4b4>)
 80030e0:	f007 f98a 	bl	800a3f8 <HAL_TIM_PWM_Stop>
		}

		//Update coordinantes
		Pini.x = Pfin.x;
 80030e4:	4b68      	ldr	r3, [pc, #416]	; (8003288 <statesMachineLoop+0x4b8>)
 80030e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030ea:	4968      	ldr	r1, [pc, #416]	; (800328c <statesMachineLoop+0x4bc>)
 80030ec:	e9c1 2300 	strd	r2, r3, [r1]
		Pini.y = Pfin.y;
 80030f0:	4b65      	ldr	r3, [pc, #404]	; (8003288 <statesMachineLoop+0x4b8>)
 80030f2:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80030f6:	4965      	ldr	r1, [pc, #404]	; (800328c <statesMachineLoop+0x4bc>)
 80030f8:	e9c1 2302 	strd	r2, r3, [r1, #8]
		Pini.z = Pfin.z;
 80030fc:	4b62      	ldr	r3, [pc, #392]	; (8003288 <statesMachineLoop+0x4b8>)
 80030fe:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8003102:	4962      	ldr	r1, [pc, #392]	; (800328c <statesMachineLoop+0x4bc>)
 8003104:	e9c1 2304 	strd	r2, r3, [r1, #16]

		HAL_TIM_Base_Stop_IT(&htim15);
 8003108:	4861      	ldr	r0, [pc, #388]	; (8003290 <statesMachineLoop+0x4c0>)
 800310a:	f006 ffd7 	bl	800a0bc <HAL_TIM_Base_Stop_IT>
		HAL_TIM_Base_Stop(&htim5);
 800310e:	4861      	ldr	r0, [pc, #388]	; (8003294 <statesMachineLoop+0x4c4>)
 8003110:	f006 ff34 	bl	8009f7c <HAL_TIM_Base_Stop>


		state = READY;
 8003114:	4b60      	ldr	r3, [pc, #384]	; (8003298 <statesMachineLoop+0x4c8>)
 8003116:	2201      	movs	r2, #1
 8003118:	701a      	strb	r2, [r3, #0]

		break;
 800311a:	e377      	b.n	800380c <statesMachineLoop+0xa3c>

	case READY:

		if (receptionFlag){
 800311c:	4b5f      	ldr	r3, [pc, #380]	; (800329c <statesMachineLoop+0x4cc>)
 800311e:	781b      	ldrb	r3, [r3, #0]
 8003120:	2b00      	cmp	r3, #0
 8003122:	f000 8370 	beq.w	8003806 <statesMachineLoop+0xa36>

			receptionFlag = false;
 8003126:	4b5d      	ldr	r3, [pc, #372]	; (800329c <statesMachineLoop+0x4cc>)
 8003128:	2200      	movs	r2, #0
 800312a:	701a      	strb	r2, [r3, #0]

			startMotors = true;
 800312c:	4b4c      	ldr	r3, [pc, #304]	; (8003260 <statesMachineLoop+0x490>)
 800312e:	2201      	movs	r2, #1
 8003130:	701a      	strb	r2, [r3, #0]

			HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1);
 8003132:	2100      	movs	r1, #0
 8003134:	484b      	ldr	r0, [pc, #300]	; (8003264 <statesMachineLoop+0x494>)
 8003136:	f007 fac7 	bl	800a6c8 <HAL_TIM_IC_Start_IT>
			HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_1);
 800313a:	2100      	movs	r1, #0
 800313c:	484a      	ldr	r0, [pc, #296]	; (8003268 <statesMachineLoop+0x498>)
 800313e:	f007 fac3 	bl	800a6c8 <HAL_TIM_IC_Start_IT>
			HAL_TIM_IC_Start_IT(&htim4, TIM_CHANNEL_1);
 8003142:	2100      	movs	r1, #0
 8003144:	4849      	ldr	r0, [pc, #292]	; (800326c <statesMachineLoop+0x49c>)
 8003146:	f007 fabf 	bl	800a6c8 <HAL_TIM_IC_Start_IT>

			inverseKinematic(Pfin);
 800314a:	4b4f      	ldr	r3, [pc, #316]	; (8003288 <statesMachineLoop+0x4b8>)
 800314c:	ed93 5b00 	vldr	d5, [r3]
 8003150:	ed93 6b02 	vldr	d6, [r3, #8]
 8003154:	ed93 7b04 	vldr	d7, [r3, #16]
 8003158:	eeb0 0b45 	vmov.f64	d0, d5
 800315c:	eeb0 1b46 	vmov.f64	d1, d6
 8003160:	eeb0 2b47 	vmov.f64	d2, d7
 8003164:	f7fe fa74 	bl	8001650 <inverseKinematic>

			update_ScurveTraj(motor1.currentAngle, motor1.theta, vi, vf, vmax, amax, jmax, arrayParams1);
 8003168:	4b41      	ldr	r3, [pc, #260]	; (8003270 <statesMachineLoop+0x4a0>)
 800316a:	ed93 7b08 	vldr	d7, [r3, #32]
 800316e:	4b40      	ldr	r3, [pc, #256]	; (8003270 <statesMachineLoop+0x4a0>)
 8003170:	ed93 1b00 	vldr	d1, [r3]
 8003174:	4b4a      	ldr	r3, [pc, #296]	; (80032a0 <statesMachineLoop+0x4d0>)
 8003176:	ed93 2b00 	vldr	d2, [r3]
 800317a:	4b4a      	ldr	r3, [pc, #296]	; (80032a4 <statesMachineLoop+0x4d4>)
 800317c:	ed93 3b00 	vldr	d3, [r3]
 8003180:	4b49      	ldr	r3, [pc, #292]	; (80032a8 <statesMachineLoop+0x4d8>)
 8003182:	ed93 4b00 	vldr	d4, [r3]
 8003186:	4b49      	ldr	r3, [pc, #292]	; (80032ac <statesMachineLoop+0x4dc>)
 8003188:	ed93 5b00 	vldr	d5, [r3]
 800318c:	4b48      	ldr	r3, [pc, #288]	; (80032b0 <statesMachineLoop+0x4e0>)
 800318e:	ed93 6b00 	vldr	d6, [r3]
 8003192:	4848      	ldr	r0, [pc, #288]	; (80032b4 <statesMachineLoop+0x4e4>)
 8003194:	eeb0 0b47 	vmov.f64	d0, d7
 8003198:	f002 f8ba 	bl	8005310 <update_ScurveTraj>
			update_ScurveTraj(motor2.currentAngle, motor2.theta, vi, vf, vmax, amax, jmax, arrayParams2);
 800319c:	4b36      	ldr	r3, [pc, #216]	; (8003278 <statesMachineLoop+0x4a8>)
 800319e:	ed93 7b08 	vldr	d7, [r3, #32]
 80031a2:	4b35      	ldr	r3, [pc, #212]	; (8003278 <statesMachineLoop+0x4a8>)
 80031a4:	ed93 1b00 	vldr	d1, [r3]
 80031a8:	4b3d      	ldr	r3, [pc, #244]	; (80032a0 <statesMachineLoop+0x4d0>)
 80031aa:	ed93 2b00 	vldr	d2, [r3]
 80031ae:	4b3d      	ldr	r3, [pc, #244]	; (80032a4 <statesMachineLoop+0x4d4>)
 80031b0:	ed93 3b00 	vldr	d3, [r3]
 80031b4:	4b3c      	ldr	r3, [pc, #240]	; (80032a8 <statesMachineLoop+0x4d8>)
 80031b6:	ed93 4b00 	vldr	d4, [r3]
 80031ba:	4b3c      	ldr	r3, [pc, #240]	; (80032ac <statesMachineLoop+0x4dc>)
 80031bc:	ed93 5b00 	vldr	d5, [r3]
 80031c0:	4b3b      	ldr	r3, [pc, #236]	; (80032b0 <statesMachineLoop+0x4e0>)
 80031c2:	ed93 6b00 	vldr	d6, [r3]
 80031c6:	483c      	ldr	r0, [pc, #240]	; (80032b8 <statesMachineLoop+0x4e8>)
 80031c8:	eeb0 0b47 	vmov.f64	d0, d7
 80031cc:	f002 f8a0 	bl	8005310 <update_ScurveTraj>
			update_ScurveTraj(motor3.currentAngle, motor3.theta, vi, vf, vmax, amax, jmax, arrayParams3);
 80031d0:	4b2b      	ldr	r3, [pc, #172]	; (8003280 <statesMachineLoop+0x4b0>)
 80031d2:	ed93 7b08 	vldr	d7, [r3, #32]
 80031d6:	4b2a      	ldr	r3, [pc, #168]	; (8003280 <statesMachineLoop+0x4b0>)
 80031d8:	ed93 1b00 	vldr	d1, [r3]
 80031dc:	4b30      	ldr	r3, [pc, #192]	; (80032a0 <statesMachineLoop+0x4d0>)
 80031de:	ed93 2b00 	vldr	d2, [r3]
 80031e2:	4b30      	ldr	r3, [pc, #192]	; (80032a4 <statesMachineLoop+0x4d4>)
 80031e4:	ed93 3b00 	vldr	d3, [r3]
 80031e8:	4b2f      	ldr	r3, [pc, #188]	; (80032a8 <statesMachineLoop+0x4d8>)
 80031ea:	ed93 4b00 	vldr	d4, [r3]
 80031ee:	4b2f      	ldr	r3, [pc, #188]	; (80032ac <statesMachineLoop+0x4dc>)
 80031f0:	ed93 5b00 	vldr	d5, [r3]
 80031f4:	4b2e      	ldr	r3, [pc, #184]	; (80032b0 <statesMachineLoop+0x4e0>)
 80031f6:	ed93 6b00 	vldr	d6, [r3]
 80031fa:	4830      	ldr	r0, [pc, #192]	; (80032bc <statesMachineLoop+0x4ec>)
 80031fc:	eeb0 0b47 	vmov.f64	d0, d7
 8003200:	f002 f886 	bl	8005310 <update_ScurveTraj>

			configMotor(&motor1,1);
 8003204:	2101      	movs	r1, #1
 8003206:	481a      	ldr	r0, [pc, #104]	; (8003270 <statesMachineLoop+0x4a0>)
 8003208:	f7ff fcda 	bl	8002bc0 <configMotor>
			configMotor(&motor2,2);
 800320c:	2102      	movs	r1, #2
 800320e:	481a      	ldr	r0, [pc, #104]	; (8003278 <statesMachineLoop+0x4a8>)
 8003210:	f7ff fcd6 	bl	8002bc0 <configMotor>
			configMotor(&motor3,3);
 8003214:	2103      	movs	r1, #3
 8003216:	481a      	ldr	r0, [pc, #104]	; (8003280 <statesMachineLoop+0x4b0>)
 8003218:	f7ff fcd2 	bl	8002bc0 <configMotor>

			timeFlag = false;
 800321c:	4b28      	ldr	r3, [pc, #160]	; (80032c0 <statesMachineLoop+0x4f0>)
 800321e:	2200      	movs	r2, #0
 8003220:	701a      	strb	r2, [r3, #0]

			motor1.pMotor = 0;
 8003222:	4b13      	ldr	r3, [pc, #76]	; (8003270 <statesMachineLoop+0x4a0>)
 8003224:	2200      	movs	r2, #0
 8003226:	641a      	str	r2, [r3, #64]	; 0x40
			motor2.pMotor = 0;
 8003228:	4b13      	ldr	r3, [pc, #76]	; (8003278 <statesMachineLoop+0x4a8>)
 800322a:	2200      	movs	r2, #0
 800322c:	641a      	str	r2, [r3, #64]	; 0x40
			motor3.pMotor = 0;
 800322e:	4b14      	ldr	r3, [pc, #80]	; (8003280 <statesMachineLoop+0x4b0>)
 8003230:	2200      	movs	r2, #0
 8003232:	641a      	str	r2, [r3, #64]	; 0x40

			motor1.stepReached = false;
 8003234:	4b0e      	ldr	r3, [pc, #56]	; (8003270 <statesMachineLoop+0x4a0>)
 8003236:	2200      	movs	r2, #0
 8003238:	765a      	strb	r2, [r3, #25]
			motor2.stepReached = false;
 800323a:	4b0f      	ldr	r3, [pc, #60]	; (8003278 <statesMachineLoop+0x4a8>)
 800323c:	2200      	movs	r2, #0
 800323e:	765a      	strb	r2, [r3, #25]
			motor3.stepReached = false;
 8003240:	4b0f      	ldr	r3, [pc, #60]	; (8003280 <statesMachineLoop+0x4b0>)
 8003242:	2200      	movs	r2, #0
 8003244:	765a      	strb	r2, [r3, #25]

			HAL_TIM_Base_Start(&htim5);
 8003246:	4813      	ldr	r0, [pc, #76]	; (8003294 <statesMachineLoop+0x4c4>)
 8003248:	f006 fe28 	bl	8009e9c <HAL_TIM_Base_Start>
			HAL_TIM_Base_Start_IT(&htim15);
 800324c:	4810      	ldr	r0, [pc, #64]	; (8003290 <statesMachineLoop+0x4c0>)
 800324e:	f006 febd 	bl	8009fcc <HAL_TIM_Base_Start_IT>




			state = WORKING;
 8003252:	4b11      	ldr	r3, [pc, #68]	; (8003298 <statesMachineLoop+0x4c8>)
 8003254:	2202      	movs	r2, #2
 8003256:	701a      	strb	r2, [r3, #0]
		}
		break;
 8003258:	e2d5      	b.n	8003806 <statesMachineLoop+0xa36>
 800325a:	bf00      	nop
 800325c:	24000453 	.word	0x24000453
 8003260:	24000452 	.word	0x24000452
 8003264:	24000598 	.word	0x24000598
 8003268:	240005e4 	.word	0x240005e4
 800326c:	24000630 	.word	0x24000630
 8003270:	24000360 	.word	0x24000360
 8003274:	240006c8 	.word	0x240006c8
 8003278:	240003a8 	.word	0x240003a8
 800327c:	24000714 	.word	0x24000714
 8003280:	240003f0 	.word	0x240003f0
 8003284:	24000760 	.word	0x24000760
 8003288:	240004b0 	.word	0x240004b0
 800328c:	24000498 	.word	0x24000498
 8003290:	240007ac 	.word	0x240007ac
 8003294:	2400067c 	.word	0x2400067c
 8003298:	24000450 	.word	0x24000450
 800329c:	24000593 	.word	0x24000593
 80032a0:	24000018 	.word	0x24000018
 80032a4:	24000488 	.word	0x24000488
 80032a8:	24000010 	.word	0x24000010
 80032ac:	24000020 	.word	0x24000020
 80032b0:	24000008 	.word	0x24000008
 80032b4:	240004c8 	.word	0x240004c8
 80032b8:	24000500 	.word	0x24000500
 80032bc:	24000538 	.word	0x24000538
 80032c0:	24000570 	.word	0x24000570

	case FAULT:

		__HAL_TIM_SET_AUTORELOAD(&htim12,COUNTERPERIOD(rpm_fault)); //Escritura del registro ARR
 80032c4:	4b8e      	ldr	r3, [pc, #568]	; (8003500 <statesMachineLoop+0x730>)
 80032c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032c8:	ee07 3a90 	vmov	s15, r3
 80032cc:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80032d0:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 80032d4:	ee37 7b06 	vadd.f64	d7, d7, d6
 80032d8:	ed9f 5b83 	vldr	d5, [pc, #524]	; 80034e8 <statesMachineLoop+0x718>
 80032dc:	ee85 6b07 	vdiv.f64	d6, d5, d7
 80032e0:	4b88      	ldr	r3, [pc, #544]	; (8003504 <statesMachineLoop+0x734>)
 80032e2:	ed93 7b00 	vldr	d7, [r3]
 80032e6:	ed9f 5b82 	vldr	d5, [pc, #520]	; 80034f0 <statesMachineLoop+0x720>
 80032ea:	ee27 5b05 	vmul.f64	d5, d7, d5
 80032ee:	ed9f 4b82 	vldr	d4, [pc, #520]	; 80034f8 <statesMachineLoop+0x728>
 80032f2:	ee84 7b05 	vdiv.f64	d7, d4, d5
 80032f6:	ee26 7b07 	vmul.f64	d7, d6, d7
 80032fa:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 80032fe:	ee37 7b46 	vsub.f64	d7, d7, d6
 8003302:	4b81      	ldr	r3, [pc, #516]	; (8003508 <statesMachineLoop+0x738>)
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800330a:	ee17 2a90 	vmov	r2, s15
 800330e:	62da      	str	r2, [r3, #44]	; 0x2c
 8003310:	4b7b      	ldr	r3, [pc, #492]	; (8003500 <statesMachineLoop+0x730>)
 8003312:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003314:	ee07 3a90 	vmov	s15, r3
 8003318:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800331c:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8003320:	ee37 7b06 	vadd.f64	d7, d7, d6
 8003324:	ed9f 5b70 	vldr	d5, [pc, #448]	; 80034e8 <statesMachineLoop+0x718>
 8003328:	ee85 6b07 	vdiv.f64	d6, d5, d7
 800332c:	4b75      	ldr	r3, [pc, #468]	; (8003504 <statesMachineLoop+0x734>)
 800332e:	ed93 7b00 	vldr	d7, [r3]
 8003332:	ed9f 5b6f 	vldr	d5, [pc, #444]	; 80034f0 <statesMachineLoop+0x720>
 8003336:	ee27 5b05 	vmul.f64	d5, d7, d5
 800333a:	ed9f 4b6f 	vldr	d4, [pc, #444]	; 80034f8 <statesMachineLoop+0x728>
 800333e:	ee84 7b05 	vdiv.f64	d7, d4, d5
 8003342:	ee26 7b07 	vmul.f64	d7, d6, d7
 8003346:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800334a:	ee37 7b46 	vsub.f64	d7, d7, d6
 800334e:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8003352:	ee17 2a90 	vmov	r2, s15
 8003356:	4b6c      	ldr	r3, [pc, #432]	; (8003508 <statesMachineLoop+0x738>)
 8003358:	60da      	str	r2, [r3, #12]
		__HAL_TIM_SET_AUTORELOAD(&htim13,COUNTERPERIOD(rpm_fault));
 800335a:	4b69      	ldr	r3, [pc, #420]	; (8003500 <statesMachineLoop+0x730>)
 800335c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800335e:	ee07 3a90 	vmov	s15, r3
 8003362:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8003366:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800336a:	ee37 7b06 	vadd.f64	d7, d7, d6
 800336e:	ed9f 5b5e 	vldr	d5, [pc, #376]	; 80034e8 <statesMachineLoop+0x718>
 8003372:	ee85 6b07 	vdiv.f64	d6, d5, d7
 8003376:	4b63      	ldr	r3, [pc, #396]	; (8003504 <statesMachineLoop+0x734>)
 8003378:	ed93 7b00 	vldr	d7, [r3]
 800337c:	ed9f 5b5c 	vldr	d5, [pc, #368]	; 80034f0 <statesMachineLoop+0x720>
 8003380:	ee27 5b05 	vmul.f64	d5, d7, d5
 8003384:	ed9f 4b5c 	vldr	d4, [pc, #368]	; 80034f8 <statesMachineLoop+0x728>
 8003388:	ee84 7b05 	vdiv.f64	d7, d4, d5
 800338c:	ee26 7b07 	vmul.f64	d7, d6, d7
 8003390:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8003394:	ee37 7b46 	vsub.f64	d7, d7, d6
 8003398:	4b5c      	ldr	r3, [pc, #368]	; (800350c <statesMachineLoop+0x73c>)
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80033a0:	ee17 2a90 	vmov	r2, s15
 80033a4:	62da      	str	r2, [r3, #44]	; 0x2c
 80033a6:	4b56      	ldr	r3, [pc, #344]	; (8003500 <statesMachineLoop+0x730>)
 80033a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033aa:	ee07 3a90 	vmov	s15, r3
 80033ae:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80033b2:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 80033b6:	ee37 7b06 	vadd.f64	d7, d7, d6
 80033ba:	ed9f 5b4b 	vldr	d5, [pc, #300]	; 80034e8 <statesMachineLoop+0x718>
 80033be:	ee85 6b07 	vdiv.f64	d6, d5, d7
 80033c2:	4b50      	ldr	r3, [pc, #320]	; (8003504 <statesMachineLoop+0x734>)
 80033c4:	ed93 7b00 	vldr	d7, [r3]
 80033c8:	ed9f 5b49 	vldr	d5, [pc, #292]	; 80034f0 <statesMachineLoop+0x720>
 80033cc:	ee27 5b05 	vmul.f64	d5, d7, d5
 80033d0:	ed9f 4b49 	vldr	d4, [pc, #292]	; 80034f8 <statesMachineLoop+0x728>
 80033d4:	ee84 7b05 	vdiv.f64	d7, d4, d5
 80033d8:	ee26 7b07 	vmul.f64	d7, d6, d7
 80033dc:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 80033e0:	ee37 7b46 	vsub.f64	d7, d7, d6
 80033e4:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80033e8:	ee17 2a90 	vmov	r2, s15
 80033ec:	4b47      	ldr	r3, [pc, #284]	; (800350c <statesMachineLoop+0x73c>)
 80033ee:	60da      	str	r2, [r3, #12]
		__HAL_TIM_SET_AUTORELOAD(&htim14,COUNTERPERIOD(rpm_fault));
 80033f0:	4b43      	ldr	r3, [pc, #268]	; (8003500 <statesMachineLoop+0x730>)
 80033f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033f4:	ee07 3a90 	vmov	s15, r3
 80033f8:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80033fc:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8003400:	ee37 7b06 	vadd.f64	d7, d7, d6
 8003404:	ed9f 5b38 	vldr	d5, [pc, #224]	; 80034e8 <statesMachineLoop+0x718>
 8003408:	ee85 6b07 	vdiv.f64	d6, d5, d7
 800340c:	4b3d      	ldr	r3, [pc, #244]	; (8003504 <statesMachineLoop+0x734>)
 800340e:	ed93 7b00 	vldr	d7, [r3]
 8003412:	ed9f 5b37 	vldr	d5, [pc, #220]	; 80034f0 <statesMachineLoop+0x720>
 8003416:	ee27 5b05 	vmul.f64	d5, d7, d5
 800341a:	ed9f 4b37 	vldr	d4, [pc, #220]	; 80034f8 <statesMachineLoop+0x728>
 800341e:	ee84 7b05 	vdiv.f64	d7, d4, d5
 8003422:	ee26 7b07 	vmul.f64	d7, d6, d7
 8003426:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800342a:	ee37 7b46 	vsub.f64	d7, d7, d6
 800342e:	4b38      	ldr	r3, [pc, #224]	; (8003510 <statesMachineLoop+0x740>)
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8003436:	ee17 2a90 	vmov	r2, s15
 800343a:	62da      	str	r2, [r3, #44]	; 0x2c
 800343c:	4b30      	ldr	r3, [pc, #192]	; (8003500 <statesMachineLoop+0x730>)
 800343e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003440:	ee07 3a90 	vmov	s15, r3
 8003444:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8003448:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800344c:	ee37 7b06 	vadd.f64	d7, d7, d6
 8003450:	ed9f 5b25 	vldr	d5, [pc, #148]	; 80034e8 <statesMachineLoop+0x718>
 8003454:	ee85 6b07 	vdiv.f64	d6, d5, d7
 8003458:	4b2a      	ldr	r3, [pc, #168]	; (8003504 <statesMachineLoop+0x734>)
 800345a:	ed93 7b00 	vldr	d7, [r3]
 800345e:	ed9f 5b24 	vldr	d5, [pc, #144]	; 80034f0 <statesMachineLoop+0x720>
 8003462:	ee27 5b05 	vmul.f64	d5, d7, d5
 8003466:	ed9f 4b24 	vldr	d4, [pc, #144]	; 80034f8 <statesMachineLoop+0x728>
 800346a:	ee84 7b05 	vdiv.f64	d7, d4, d5
 800346e:	ee26 7b07 	vmul.f64	d7, d6, d7
 8003472:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8003476:	ee37 7b46 	vsub.f64	d7, d7, d6
 800347a:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800347e:	ee17 2a90 	vmov	r2, s15
 8003482:	4b23      	ldr	r3, [pc, #140]	; (8003510 <statesMachineLoop+0x740>)
 8003484:	60da      	str	r2, [r3, #12]



		TIM12->CCR1 = (uint32_t)((double)(TIM12->ARR) / 2.0);
 8003486:	4b1e      	ldr	r3, [pc, #120]	; (8003500 <statesMachineLoop+0x730>)
 8003488:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800348a:	ee07 3a90 	vmov	s15, r3
 800348e:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 8003492:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8003496:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800349a:	4b19      	ldr	r3, [pc, #100]	; (8003500 <statesMachineLoop+0x730>)
 800349c:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80034a0:	ee17 2a90 	vmov	r2, s15
 80034a4:	635a      	str	r2, [r3, #52]	; 0x34
		TIM13->CCR1 = (uint32_t)((double)(TIM13->ARR) / 2.0);
 80034a6:	4b1b      	ldr	r3, [pc, #108]	; (8003514 <statesMachineLoop+0x744>)
 80034a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034aa:	ee07 3a90 	vmov	s15, r3
 80034ae:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 80034b2:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 80034b6:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80034ba:	4b16      	ldr	r3, [pc, #88]	; (8003514 <statesMachineLoop+0x744>)
 80034bc:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80034c0:	ee17 2a90 	vmov	r2, s15
 80034c4:	635a      	str	r2, [r3, #52]	; 0x34
		TIM14->CCR1 = (uint32_t)((double)(TIM14->ARR) / 2.0);
 80034c6:	4b14      	ldr	r3, [pc, #80]	; (8003518 <statesMachineLoop+0x748>)
 80034c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034ca:	ee07 3a90 	vmov	s15, r3
 80034ce:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 80034d2:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 80034d6:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80034da:	4b0f      	ldr	r3, [pc, #60]	; (8003518 <statesMachineLoop+0x748>)
 80034dc:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80034e0:	ee17 2a90 	vmov	r2, s15
 80034e4:	635a      	str	r2, [r3, #52]	; 0x34


		//test++;

		while((endStopAlarmSup || endStopAlarmInf) && continuar){
 80034e6:	e164      	b.n	80037b2 <statesMachineLoop+0x9e2>
 80034e8:	00000000 	.word	0x00000000
 80034ec:	418e8480 	.word	0x418e8480
 80034f0:	00000000 	.word	0x00000000
 80034f4:	40bf4000 	.word	0x40bf4000
 80034f8:	00000000 	.word	0x00000000
 80034fc:	404e0000 	.word	0x404e0000
 8003500:	40001800 	.word	0x40001800
 8003504:	24000028 	.word	0x24000028
 8003508:	240006c8 	.word	0x240006c8
 800350c:	24000714 	.word	0x24000714
 8003510:	24000760 	.word	0x24000760
 8003514:	40001c00 	.word	0x40001c00
 8003518:	40002000 	.word	0x40002000

			 //HAL_UART_Transmit(&huart3,(uint8_t*)"EndStopAlarm\r\n", 16, 100);
			//test1++;


			 if (ES1i_PRESSED){
 800351c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003520:	48bb      	ldr	r0, [pc, #748]	; (8003810 <statesMachineLoop+0xa40>)
 8003522:	f004 f8bb 	bl	800769c <HAL_GPIO_ReadPin>
 8003526:	4603      	mov	r3, r0
 8003528:	2b00      	cmp	r3, #0
 800352a:	d11e      	bne.n	800356a <statesMachineLoop+0x79a>
				 HAL_Delay(10);
 800352c:	200a      	movs	r0, #10
 800352e:	f003 f82f 	bl	8006590 <HAL_Delay>
				 if (ES1i_PRESSED){
 8003532:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003536:	48b6      	ldr	r0, [pc, #728]	; (8003810 <statesMachineLoop+0xa40>)
 8003538:	f004 f8b0 	bl	800769c <HAL_GPIO_ReadPin>
 800353c:	4603      	mov	r3, r0
 800353e:	2b00      	cmp	r3, #0
 8003540:	d113      	bne.n	800356a <statesMachineLoop+0x79a>
					 positive_Dir_MOTOR_1;
 8003542:	2200      	movs	r2, #0
 8003544:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003548:	48b2      	ldr	r0, [pc, #712]	; (8003814 <statesMachineLoop+0xa44>)
 800354a:	f004 f8bf 	bl	80076cc <HAL_GPIO_WritePin>
					 HAL_Delay(0.5); 							//delay cambio de dir
 800354e:	2000      	movs	r0, #0
 8003550:	f003 f81e 	bl	8006590 <HAL_Delay>
					 Start_PWM_MOTOR_1;
 8003554:	2100      	movs	r1, #0
 8003556:	48b0      	ldr	r0, [pc, #704]	; (8003818 <statesMachineLoop+0xa48>)
 8003558:	f006 fe40 	bl	800a1dc <HAL_TIM_PWM_Start>
					 HAL_Delay(200);
 800355c:	20c8      	movs	r0, #200	; 0xc8
 800355e:	f003 f817 	bl	8006590 <HAL_Delay>
					 Stop_PWM_MOTOR_1;
 8003562:	2100      	movs	r1, #0
 8003564:	48ac      	ldr	r0, [pc, #688]	; (8003818 <statesMachineLoop+0xa48>)
 8003566:	f006 ff47 	bl	800a3f8 <HAL_TIM_PWM_Stop>
				 }
			 }
			 if (ES1s_PRESSED){
 800356a:	2101      	movs	r1, #1
 800356c:	48ab      	ldr	r0, [pc, #684]	; (800381c <statesMachineLoop+0xa4c>)
 800356e:	f004 f895 	bl	800769c <HAL_GPIO_ReadPin>
 8003572:	4603      	mov	r3, r0
 8003574:	2b00      	cmp	r3, #0
 8003576:	d11d      	bne.n	80035b4 <statesMachineLoop+0x7e4>
				 HAL_Delay(10);
 8003578:	200a      	movs	r0, #10
 800357a:	f003 f809 	bl	8006590 <HAL_Delay>
				 if (ES1s_PRESSED){
 800357e:	2101      	movs	r1, #1
 8003580:	48a6      	ldr	r0, [pc, #664]	; (800381c <statesMachineLoop+0xa4c>)
 8003582:	f004 f88b 	bl	800769c <HAL_GPIO_ReadPin>
 8003586:	4603      	mov	r3, r0
 8003588:	2b00      	cmp	r3, #0
 800358a:	d113      	bne.n	80035b4 <statesMachineLoop+0x7e4>
					 negative_Dir_MOTOR_1;
 800358c:	2201      	movs	r2, #1
 800358e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003592:	48a0      	ldr	r0, [pc, #640]	; (8003814 <statesMachineLoop+0xa44>)
 8003594:	f004 f89a 	bl	80076cc <HAL_GPIO_WritePin>
					 HAL_Delay(0.5); 							//delay cambio de dir
 8003598:	2000      	movs	r0, #0
 800359a:	f002 fff9 	bl	8006590 <HAL_Delay>
					 Start_PWM_MOTOR_1;
 800359e:	2100      	movs	r1, #0
 80035a0:	489d      	ldr	r0, [pc, #628]	; (8003818 <statesMachineLoop+0xa48>)
 80035a2:	f006 fe1b 	bl	800a1dc <HAL_TIM_PWM_Start>
					 HAL_Delay(200);
 80035a6:	20c8      	movs	r0, #200	; 0xc8
 80035a8:	f002 fff2 	bl	8006590 <HAL_Delay>
					 Stop_PWM_MOTOR_1;
 80035ac:	2100      	movs	r1, #0
 80035ae:	489a      	ldr	r0, [pc, #616]	; (8003818 <statesMachineLoop+0xa48>)
 80035b0:	f006 ff22 	bl	800a3f8 <HAL_TIM_PWM_Stop>
				 }
			 }


			 if (ES2i_PRESSED){
 80035b4:	2108      	movs	r1, #8
 80035b6:	4899      	ldr	r0, [pc, #612]	; (800381c <statesMachineLoop+0xa4c>)
 80035b8:	f004 f870 	bl	800769c <HAL_GPIO_ReadPin>
 80035bc:	4603      	mov	r3, r0
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d11d      	bne.n	80035fe <statesMachineLoop+0x82e>
				 HAL_Delay(30);
 80035c2:	201e      	movs	r0, #30
 80035c4:	f002 ffe4 	bl	8006590 <HAL_Delay>
				 if (ES2i_PRESSED){
 80035c8:	2108      	movs	r1, #8
 80035ca:	4894      	ldr	r0, [pc, #592]	; (800381c <statesMachineLoop+0xa4c>)
 80035cc:	f004 f866 	bl	800769c <HAL_GPIO_ReadPin>
 80035d0:	4603      	mov	r3, r0
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d113      	bne.n	80035fe <statesMachineLoop+0x82e>
					 positive_Dir_MOTOR_2;
 80035d6:	2200      	movs	r2, #0
 80035d8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80035dc:	488d      	ldr	r0, [pc, #564]	; (8003814 <statesMachineLoop+0xa44>)
 80035de:	f004 f875 	bl	80076cc <HAL_GPIO_WritePin>
					 HAL_Delay(0.5); 							//delay cambio de dir
 80035e2:	2000      	movs	r0, #0
 80035e4:	f002 ffd4 	bl	8006590 <HAL_Delay>
					 Start_PWM_MOTOR_2;
 80035e8:	2100      	movs	r1, #0
 80035ea:	488d      	ldr	r0, [pc, #564]	; (8003820 <statesMachineLoop+0xa50>)
 80035ec:	f006 fdf6 	bl	800a1dc <HAL_TIM_PWM_Start>
					 HAL_Delay(200);
 80035f0:	20c8      	movs	r0, #200	; 0xc8
 80035f2:	f002 ffcd 	bl	8006590 <HAL_Delay>
					 Stop_PWM_MOTOR_2;
 80035f6:	2100      	movs	r1, #0
 80035f8:	4889      	ldr	r0, [pc, #548]	; (8003820 <statesMachineLoop+0xa50>)
 80035fa:	f006 fefd 	bl	800a3f8 <HAL_TIM_PWM_Stop>
				 }
			 }
			 if (ES2s_PRESSED){
 80035fe:	2104      	movs	r1, #4
 8003600:	4886      	ldr	r0, [pc, #536]	; (800381c <statesMachineLoop+0xa4c>)
 8003602:	f004 f84b 	bl	800769c <HAL_GPIO_ReadPin>
 8003606:	4603      	mov	r3, r0
 8003608:	2b00      	cmp	r3, #0
 800360a:	d11d      	bne.n	8003648 <statesMachineLoop+0x878>
				 HAL_Delay(10);
 800360c:	200a      	movs	r0, #10
 800360e:	f002 ffbf 	bl	8006590 <HAL_Delay>
				 if (ES2s_PRESSED){
 8003612:	2104      	movs	r1, #4
 8003614:	4881      	ldr	r0, [pc, #516]	; (800381c <statesMachineLoop+0xa4c>)
 8003616:	f004 f841 	bl	800769c <HAL_GPIO_ReadPin>
 800361a:	4603      	mov	r3, r0
 800361c:	2b00      	cmp	r3, #0
 800361e:	d113      	bne.n	8003648 <statesMachineLoop+0x878>
					 negative_Dir_MOTOR_2;
 8003620:	2201      	movs	r2, #1
 8003622:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003626:	487b      	ldr	r0, [pc, #492]	; (8003814 <statesMachineLoop+0xa44>)
 8003628:	f004 f850 	bl	80076cc <HAL_GPIO_WritePin>
					 HAL_Delay(0.5); 							//delay cambio de dir
 800362c:	2000      	movs	r0, #0
 800362e:	f002 ffaf 	bl	8006590 <HAL_Delay>
					 Start_PWM_MOTOR_2;
 8003632:	2100      	movs	r1, #0
 8003634:	487a      	ldr	r0, [pc, #488]	; (8003820 <statesMachineLoop+0xa50>)
 8003636:	f006 fdd1 	bl	800a1dc <HAL_TIM_PWM_Start>
					 HAL_Delay(200);
 800363a:	20c8      	movs	r0, #200	; 0xc8
 800363c:	f002 ffa8 	bl	8006590 <HAL_Delay>
					 Stop_PWM_MOTOR_2;
 8003640:	2100      	movs	r1, #0
 8003642:	4877      	ldr	r0, [pc, #476]	; (8003820 <statesMachineLoop+0xa50>)
 8003644:	f006 fed8 	bl	800a3f8 <HAL_TIM_PWM_Stop>
				 }
			 }
			 if (ES3i_PRESSED){
 8003648:	2120      	movs	r1, #32
 800364a:	4874      	ldr	r0, [pc, #464]	; (800381c <statesMachineLoop+0xa4c>)
 800364c:	f004 f826 	bl	800769c <HAL_GPIO_ReadPin>
 8003650:	4603      	mov	r3, r0
 8003652:	2b00      	cmp	r3, #0
 8003654:	d11d      	bne.n	8003692 <statesMachineLoop+0x8c2>
				 HAL_Delay(10);
 8003656:	200a      	movs	r0, #10
 8003658:	f002 ff9a 	bl	8006590 <HAL_Delay>
				 if (ES3i_PRESSED){
 800365c:	2120      	movs	r1, #32
 800365e:	486f      	ldr	r0, [pc, #444]	; (800381c <statesMachineLoop+0xa4c>)
 8003660:	f004 f81c 	bl	800769c <HAL_GPIO_ReadPin>
 8003664:	4603      	mov	r3, r0
 8003666:	2b00      	cmp	r3, #0
 8003668:	d113      	bne.n	8003692 <statesMachineLoop+0x8c2>
					 positive_Dir_MOTOR_3;
 800366a:	2200      	movs	r2, #0
 800366c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003670:	4868      	ldr	r0, [pc, #416]	; (8003814 <statesMachineLoop+0xa44>)
 8003672:	f004 f82b 	bl	80076cc <HAL_GPIO_WritePin>
					 HAL_Delay(0.5); 							//delay cambio de dir
 8003676:	2000      	movs	r0, #0
 8003678:	f002 ff8a 	bl	8006590 <HAL_Delay>
					 Start_PWM_MOTOR_3;
 800367c:	2100      	movs	r1, #0
 800367e:	4869      	ldr	r0, [pc, #420]	; (8003824 <statesMachineLoop+0xa54>)
 8003680:	f006 fdac 	bl	800a1dc <HAL_TIM_PWM_Start>
					 HAL_Delay(200);
 8003684:	20c8      	movs	r0, #200	; 0xc8
 8003686:	f002 ff83 	bl	8006590 <HAL_Delay>
					 Stop_PWM_MOTOR_3;
 800368a:	2100      	movs	r1, #0
 800368c:	4865      	ldr	r0, [pc, #404]	; (8003824 <statesMachineLoop+0xa54>)
 800368e:	f006 feb3 	bl	800a3f8 <HAL_TIM_PWM_Stop>
				 }
			 }
			 if (ES3s_PRESSED){
 8003692:	2110      	movs	r1, #16
 8003694:	4861      	ldr	r0, [pc, #388]	; (800381c <statesMachineLoop+0xa4c>)
 8003696:	f004 f801 	bl	800769c <HAL_GPIO_ReadPin>
 800369a:	4603      	mov	r3, r0
 800369c:	2b00      	cmp	r3, #0
 800369e:	d11d      	bne.n	80036dc <statesMachineLoop+0x90c>
				 HAL_Delay(10);
 80036a0:	200a      	movs	r0, #10
 80036a2:	f002 ff75 	bl	8006590 <HAL_Delay>
				 if (ES3s_PRESSED){
 80036a6:	2110      	movs	r1, #16
 80036a8:	485c      	ldr	r0, [pc, #368]	; (800381c <statesMachineLoop+0xa4c>)
 80036aa:	f003 fff7 	bl	800769c <HAL_GPIO_ReadPin>
 80036ae:	4603      	mov	r3, r0
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d113      	bne.n	80036dc <statesMachineLoop+0x90c>
					 negative_Dir_MOTOR_3;
 80036b4:	2201      	movs	r2, #1
 80036b6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80036ba:	4856      	ldr	r0, [pc, #344]	; (8003814 <statesMachineLoop+0xa44>)
 80036bc:	f004 f806 	bl	80076cc <HAL_GPIO_WritePin>
					 HAL_Delay(0.5); 							//delay cambio de dir
 80036c0:	2000      	movs	r0, #0
 80036c2:	f002 ff65 	bl	8006590 <HAL_Delay>
					 Start_PWM_MOTOR_3;
 80036c6:	2100      	movs	r1, #0
 80036c8:	4856      	ldr	r0, [pc, #344]	; (8003824 <statesMachineLoop+0xa54>)
 80036ca:	f006 fd87 	bl	800a1dc <HAL_TIM_PWM_Start>
					 HAL_Delay(200);
 80036ce:	20c8      	movs	r0, #200	; 0xc8
 80036d0:	f002 ff5e 	bl	8006590 <HAL_Delay>
					 Stop_PWM_MOTOR_3;
 80036d4:	2100      	movs	r1, #0
 80036d6:	4853      	ldr	r0, [pc, #332]	; (8003824 <statesMachineLoop+0xa54>)
 80036d8:	f006 fe8e 	bl	800a3f8 <HAL_TIM_PWM_Stop>
				 }
			 }


			 if(ES1s_UNPRESSED && ES2s_UNPRESSED && ES3s_UNPRESSED && ES1i_UNPRESSED && ES2i_UNPRESSED && ES3i_UNPRESSED){
 80036dc:	2101      	movs	r1, #1
 80036de:	484f      	ldr	r0, [pc, #316]	; (800381c <statesMachineLoop+0xa4c>)
 80036e0:	f003 ffdc 	bl	800769c <HAL_GPIO_ReadPin>
 80036e4:	4603      	mov	r3, r0
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d063      	beq.n	80037b2 <statesMachineLoop+0x9e2>
 80036ea:	2104      	movs	r1, #4
 80036ec:	484b      	ldr	r0, [pc, #300]	; (800381c <statesMachineLoop+0xa4c>)
 80036ee:	f003 ffd5 	bl	800769c <HAL_GPIO_ReadPin>
 80036f2:	4603      	mov	r3, r0
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d05c      	beq.n	80037b2 <statesMachineLoop+0x9e2>
 80036f8:	2110      	movs	r1, #16
 80036fa:	4848      	ldr	r0, [pc, #288]	; (800381c <statesMachineLoop+0xa4c>)
 80036fc:	f003 ffce 	bl	800769c <HAL_GPIO_ReadPin>
 8003700:	4603      	mov	r3, r0
 8003702:	2b00      	cmp	r3, #0
 8003704:	d055      	beq.n	80037b2 <statesMachineLoop+0x9e2>
 8003706:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800370a:	4841      	ldr	r0, [pc, #260]	; (8003810 <statesMachineLoop+0xa40>)
 800370c:	f003 ffc6 	bl	800769c <HAL_GPIO_ReadPin>
 8003710:	4603      	mov	r3, r0
 8003712:	2b00      	cmp	r3, #0
 8003714:	d04d      	beq.n	80037b2 <statesMachineLoop+0x9e2>
 8003716:	2108      	movs	r1, #8
 8003718:	4840      	ldr	r0, [pc, #256]	; (800381c <statesMachineLoop+0xa4c>)
 800371a:	f003 ffbf 	bl	800769c <HAL_GPIO_ReadPin>
 800371e:	4603      	mov	r3, r0
 8003720:	2b00      	cmp	r3, #0
 8003722:	d046      	beq.n	80037b2 <statesMachineLoop+0x9e2>
 8003724:	2120      	movs	r1, #32
 8003726:	483d      	ldr	r0, [pc, #244]	; (800381c <statesMachineLoop+0xa4c>)
 8003728:	f003 ffb8 	bl	800769c <HAL_GPIO_ReadPin>
 800372c:	4603      	mov	r3, r0
 800372e:	2b00      	cmp	r3, #0
 8003730:	d03f      	beq.n	80037b2 <statesMachineLoop+0x9e2>
				 HAL_Delay(10);
 8003732:	200a      	movs	r0, #10
 8003734:	f002 ff2c 	bl	8006590 <HAL_Delay>
				 if(ES1s_UNPRESSED && ES2s_UNPRESSED && ES3s_UNPRESSED && ES1i_UNPRESSED && ES2i_UNPRESSED && ES3i_UNPRESSED){
 8003738:	2101      	movs	r1, #1
 800373a:	4838      	ldr	r0, [pc, #224]	; (800381c <statesMachineLoop+0xa4c>)
 800373c:	f003 ffae 	bl	800769c <HAL_GPIO_ReadPin>
 8003740:	4603      	mov	r3, r0
 8003742:	2b00      	cmp	r3, #0
 8003744:	d035      	beq.n	80037b2 <statesMachineLoop+0x9e2>
 8003746:	2104      	movs	r1, #4
 8003748:	4834      	ldr	r0, [pc, #208]	; (800381c <statesMachineLoop+0xa4c>)
 800374a:	f003 ffa7 	bl	800769c <HAL_GPIO_ReadPin>
 800374e:	4603      	mov	r3, r0
 8003750:	2b00      	cmp	r3, #0
 8003752:	d02e      	beq.n	80037b2 <statesMachineLoop+0x9e2>
 8003754:	2110      	movs	r1, #16
 8003756:	4831      	ldr	r0, [pc, #196]	; (800381c <statesMachineLoop+0xa4c>)
 8003758:	f003 ffa0 	bl	800769c <HAL_GPIO_ReadPin>
 800375c:	4603      	mov	r3, r0
 800375e:	2b00      	cmp	r3, #0
 8003760:	d027      	beq.n	80037b2 <statesMachineLoop+0x9e2>
 8003762:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003766:	482a      	ldr	r0, [pc, #168]	; (8003810 <statesMachineLoop+0xa40>)
 8003768:	f003 ff98 	bl	800769c <HAL_GPIO_ReadPin>
 800376c:	4603      	mov	r3, r0
 800376e:	2b00      	cmp	r3, #0
 8003770:	d01f      	beq.n	80037b2 <statesMachineLoop+0x9e2>
 8003772:	2108      	movs	r1, #8
 8003774:	4829      	ldr	r0, [pc, #164]	; (800381c <statesMachineLoop+0xa4c>)
 8003776:	f003 ff91 	bl	800769c <HAL_GPIO_ReadPin>
 800377a:	4603      	mov	r3, r0
 800377c:	2b00      	cmp	r3, #0
 800377e:	d018      	beq.n	80037b2 <statesMachineLoop+0x9e2>
 8003780:	2120      	movs	r1, #32
 8003782:	4826      	ldr	r0, [pc, #152]	; (800381c <statesMachineLoop+0xa4c>)
 8003784:	f003 ff8a 	bl	800769c <HAL_GPIO_ReadPin>
 8003788:	4603      	mov	r3, r0
 800378a:	2b00      	cmp	r3, #0
 800378c:	d011      	beq.n	80037b2 <statesMachineLoop+0x9e2>

					 endStopAlarmSup = false;
 800378e:	4b26      	ldr	r3, [pc, #152]	; (8003828 <statesMachineLoop+0xa58>)
 8003790:	2200      	movs	r2, #0
 8003792:	701a      	strb	r2, [r3, #0]
					 endStopAlarmInf = false;
 8003794:	4b25      	ldr	r3, [pc, #148]	; (800382c <statesMachineLoop+0xa5c>)
 8003796:	2200      	movs	r2, #0
 8003798:	701a      	strb	r2, [r3, #0]
					 continuar = false;
 800379a:	4b25      	ldr	r3, [pc, #148]	; (8003830 <statesMachineLoop+0xa60>)
 800379c:	2200      	movs	r2, #0
 800379e:	701a      	strb	r2, [r3, #0]
					 HAL_UART_Transmit(&huart3,(uint8_t*)"Fin_FAULT\r\n", 13, 100);
 80037a0:	2364      	movs	r3, #100	; 0x64
 80037a2:	220d      	movs	r2, #13
 80037a4:	4923      	ldr	r1, [pc, #140]	; (8003834 <statesMachineLoop+0xa64>)
 80037a6:	4824      	ldr	r0, [pc, #144]	; (8003838 <statesMachineLoop+0xa68>)
 80037a8:	f008 fb1e 	bl	800bde8 <HAL_UART_Transmit>
					 state = READY;
 80037ac:	4b23      	ldr	r3, [pc, #140]	; (800383c <statesMachineLoop+0xa6c>)
 80037ae:	2201      	movs	r2, #1
 80037b0:	701a      	strb	r2, [r3, #0]
		while((endStopAlarmSup || endStopAlarmInf) && continuar){
 80037b2:	4b1d      	ldr	r3, [pc, #116]	; (8003828 <statesMachineLoop+0xa58>)
 80037b4:	781b      	ldrb	r3, [r3, #0]
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d103      	bne.n	80037c2 <statesMachineLoop+0x9f2>
 80037ba:	4b1c      	ldr	r3, [pc, #112]	; (800382c <statesMachineLoop+0xa5c>)
 80037bc:	781b      	ldrb	r3, [r3, #0]
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d014      	beq.n	80037ec <statesMachineLoop+0xa1c>
 80037c2:	4b1b      	ldr	r3, [pc, #108]	; (8003830 <statesMachineLoop+0xa60>)
 80037c4:	781b      	ldrb	r3, [r3, #0]
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	f47f aea8 	bne.w	800351c <statesMachineLoop+0x74c>
			 }


		}//End while

		while(faultDrivers && continuar){
 80037cc:	e00e      	b.n	80037ec <statesMachineLoop+0xa1c>

//				relayAbierto;
//				HAL_Delay(100);
//				relayCerrado;

			faultDrivers = false;
 80037ce:	4b1c      	ldr	r3, [pc, #112]	; (8003840 <statesMachineLoop+0xa70>)
 80037d0:	2200      	movs	r2, #0
 80037d2:	701a      	strb	r2, [r3, #0]
			continuar = false;
 80037d4:	4b16      	ldr	r3, [pc, #88]	; (8003830 <statesMachineLoop+0xa60>)
 80037d6:	2200      	movs	r2, #0
 80037d8:	701a      	strb	r2, [r3, #0]

			HAL_UART_Transmit(&huart3,(uint8_t*)"Fin_FALL\r\n", 13, 100);
 80037da:	2364      	movs	r3, #100	; 0x64
 80037dc:	220d      	movs	r2, #13
 80037de:	4919      	ldr	r1, [pc, #100]	; (8003844 <statesMachineLoop+0xa74>)
 80037e0:	4815      	ldr	r0, [pc, #84]	; (8003838 <statesMachineLoop+0xa68>)
 80037e2:	f008 fb01 	bl	800bde8 <HAL_UART_Transmit>
			state = READY;
 80037e6:	4b15      	ldr	r3, [pc, #84]	; (800383c <statesMachineLoop+0xa6c>)
 80037e8:	2201      	movs	r2, #1
 80037ea:	701a      	strb	r2, [r3, #0]
		while(faultDrivers && continuar){
 80037ec:	4b14      	ldr	r3, [pc, #80]	; (8003840 <statesMachineLoop+0xa70>)
 80037ee:	781b      	ldrb	r3, [r3, #0]
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d00a      	beq.n	800380a <statesMachineLoop+0xa3a>
 80037f4:	4b0e      	ldr	r3, [pc, #56]	; (8003830 <statesMachineLoop+0xa60>)
 80037f6:	781b      	ldrb	r3, [r3, #0]
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d1e8      	bne.n	80037ce <statesMachineLoop+0x9fe>

		}//End while


		break;
 80037fc:	e005      	b.n	800380a <statesMachineLoop+0xa3a>

	default:break;
 80037fe:	bf00      	nop
 8003800:	e004      	b.n	800380c <statesMachineLoop+0xa3c>
		break;
 8003802:	bf00      	nop
 8003804:	e002      	b.n	800380c <statesMachineLoop+0xa3c>
		break;
 8003806:	bf00      	nop
 8003808:	e000      	b.n	800380c <statesMachineLoop+0xa3c>
		break;
 800380a:	bf00      	nop
	}
}
 800380c:	bf00      	nop
 800380e:	bd80      	pop	{r7, pc}
 8003810:	58021800 	.word	0x58021800
 8003814:	58020800 	.word	0x58020800
 8003818:	240006c8 	.word	0x240006c8
 800381c:	58021000 	.word	0x58021000
 8003820:	24000714 	.word	0x24000714
 8003824:	24000760 	.word	0x24000760
 8003828:	24000454 	.word	0x24000454
 800382c:	24000455 	.word	0x24000455
 8003830:	24000456 	.word	0x24000456
 8003834:	08011a50 	.word	0x08011a50
 8003838:	240009d0 	.word	0x240009d0
 800383c:	24000450 	.word	0x24000450
 8003840:	24000457 	.word	0x24000457
 8003844:	08011a5c 	.word	0x08011a5c

08003848 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003848:	b580      	push	{r7, lr}
 800384a:	b082      	sub	sp, #8
 800384c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800384e:	4b0f      	ldr	r3, [pc, #60]	; (800388c <HAL_MspInit+0x44>)
 8003850:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003854:	4a0d      	ldr	r2, [pc, #52]	; (800388c <HAL_MspInit+0x44>)
 8003856:	f043 0302 	orr.w	r3, r3, #2
 800385a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800385e:	4b0b      	ldr	r3, [pc, #44]	; (800388c <HAL_MspInit+0x44>)
 8003860:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003864:	f003 0302 	and.w	r3, r3, #2
 8003868:	607b      	str	r3, [r7, #4]
 800386a:	687b      	ldr	r3, [r7, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_2);
 800386c:	2005      	movs	r0, #5
 800386e:	f002 ffb3 	bl	80067d8 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* FPU_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(FPU_IRQn, 1, 0);
 8003872:	2200      	movs	r2, #0
 8003874:	2101      	movs	r1, #1
 8003876:	2051      	movs	r0, #81	; 0x51
 8003878:	f002 ffb9 	bl	80067ee <HAL_NVIC_SetPriority>
  /* FPU_IRQn interrupt configuration */
  HAL_NVIC_EnableIRQ(FPU_IRQn);
 800387c:	2051      	movs	r0, #81	; 0x51
 800387e:	f002 ffd0 	bl	8006822 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003882:	bf00      	nop
 8003884:	3708      	adds	r7, #8
 8003886:	46bd      	mov	sp, r7
 8003888:	bd80      	pop	{r7, pc}
 800388a:	bf00      	nop
 800388c:	58024400 	.word	0x58024400

08003890 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003890:	b480      	push	{r7}
 8003892:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8003894:	bf00      	nop
 8003896:	46bd      	mov	sp, r7
 8003898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800389c:	4770      	bx	lr

0800389e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800389e:	b480      	push	{r7}
 80038a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80038a2:	e7fe      	b.n	80038a2 <HardFault_Handler+0x4>

080038a4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80038a4:	b480      	push	{r7}
 80038a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80038a8:	e7fe      	b.n	80038a8 <MemManage_Handler+0x4>

080038aa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80038aa:	b480      	push	{r7}
 80038ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80038ae:	e7fe      	b.n	80038ae <BusFault_Handler+0x4>

080038b0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80038b0:	b480      	push	{r7}
 80038b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80038b4:	e7fe      	b.n	80038b4 <UsageFault_Handler+0x4>

080038b6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80038b6:	b480      	push	{r7}
 80038b8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80038ba:	bf00      	nop
 80038bc:	46bd      	mov	sp, r7
 80038be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c2:	4770      	bx	lr

080038c4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80038c4:	b480      	push	{r7}
 80038c6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80038c8:	bf00      	nop
 80038ca:	46bd      	mov	sp, r7
 80038cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d0:	4770      	bx	lr

080038d2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80038d2:	b480      	push	{r7}
 80038d4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80038d6:	bf00      	nop
 80038d8:	46bd      	mov	sp, r7
 80038da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038de:	4770      	bx	lr

080038e0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80038e0:	b580      	push	{r7, lr}
 80038e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80038e4:	f002 fe34 	bl	8006550 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80038e8:	bf00      	nop
 80038ea:	bd80      	pop	{r7, pc}

080038ec <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80038ec:	b580      	push	{r7, lr}
 80038ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(E_EndStop1_Sup_Pin);
 80038f0:	2001      	movs	r0, #1
 80038f2:	f003 ff04 	bl	80076fe <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80038f6:	bf00      	nop
 80038f8:	bd80      	pop	{r7, pc}

080038fa <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 80038fa:	b580      	push	{r7, lr}
 80038fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(E_EndStop2_Sup_Pin);
 80038fe:	2004      	movs	r0, #4
 8003900:	f003 fefd 	bl	80076fe <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8003904:	bf00      	nop
 8003906:	bd80      	pop	{r7, pc}

08003908 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8003908:	b580      	push	{r7, lr}
 800390a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(E_EndStop2_Inf_Pin);
 800390c:	2008      	movs	r0, #8
 800390e:	f003 fef6 	bl	80076fe <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8003912:	bf00      	nop
 8003914:	bd80      	pop	{r7, pc}

08003916 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8003916:	b580      	push	{r7, lr}
 8003918:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(E_EndStop3_Sup_Pin);
 800391a:	2010      	movs	r0, #16
 800391c:	f003 feef 	bl	80076fe <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8003920:	bf00      	nop
 8003922:	bd80      	pop	{r7, pc}

08003924 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8003924:	b580      	push	{r7, lr}
 8003926:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(E_EndStop3_Inf_Pin);
 8003928:	2020      	movs	r0, #32
 800392a:	f003 fee8 	bl	80076fe <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(faultDriver1_Pin);
 800392e:	2080      	movs	r0, #128	; 0x80
 8003930:	f003 fee5 	bl	80076fe <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8003934:	bf00      	nop
 8003936:	bd80      	pop	{r7, pc}

08003938 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8003938:	b580      	push	{r7, lr}
 800393a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800393c:	4802      	ldr	r0, [pc, #8]	; (8003948 <TIM2_IRQHandler+0x10>)
 800393e:	f007 f813 	bl	800a968 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8003942:	bf00      	nop
 8003944:	bd80      	pop	{r7, pc}
 8003946:	bf00      	nop
 8003948:	24000598 	.word	0x24000598

0800394c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800394c:	b580      	push	{r7, lr}
 800394e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8003950:	4802      	ldr	r0, [pc, #8]	; (800395c <TIM3_IRQHandler+0x10>)
 8003952:	f007 f809 	bl	800a968 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8003956:	bf00      	nop
 8003958:	bd80      	pop	{r7, pc}
 800395a:	bf00      	nop
 800395c:	240005e4 	.word	0x240005e4

08003960 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8003960:	b580      	push	{r7, lr}
 8003962:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8003964:	4802      	ldr	r0, [pc, #8]	; (8003970 <TIM4_IRQHandler+0x10>)
 8003966:	f006 ffff 	bl	800a968 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800396a:	bf00      	nop
 800396c:	bd80      	pop	{r7, pc}
 800396e:	bf00      	nop
 8003970:	24000630 	.word	0x24000630

08003974 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8003974:	b580      	push	{r7, lr}
 8003976:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8003978:	4802      	ldr	r0, [pc, #8]	; (8003984 <USART3_IRQHandler+0x10>)
 800397a:	f008 fb21 	bl	800bfc0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800397e:	bf00      	nop
 8003980:	bd80      	pop	{r7, pc}
 8003982:	bf00      	nop
 8003984:	240009d0 	.word	0x240009d0

08003988 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8003988:	b580      	push	{r7, lr}
 800398a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(E_EndStop1_Inf_Pin);
 800398c:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8003990:	f003 feb5 	bl	80076fe <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BUTTON_Pin);
 8003994:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8003998:	f003 feb1 	bl	80076fe <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(faultDriver2_Pin);
 800399c:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80039a0:	f003 fead 	bl	80076fe <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(faultDriver3_Pin);
 80039a4:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80039a8:	f003 fea9 	bl	80076fe <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80039ac:	bf00      	nop
 80039ae:	bd80      	pop	{r7, pc}

080039b0 <FPU_IRQHandler>:

/**
  * @brief This function handles FPU global interrupt.
  */
void FPU_IRQHandler(void)
{
 80039b0:	b480      	push	{r7}
 80039b2:	af00      	add	r7, sp, #0

  /* USER CODE END FPU_IRQn 0 */
  /* USER CODE BEGIN FPU_IRQn 1 */

  /* USER CODE END FPU_IRQn 1 */
}
 80039b4:	bf00      	nop
 80039b6:	46bd      	mov	sp, r7
 80039b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039bc:	4770      	bx	lr
	...

080039c0 <TIM15_IRQHandler>:

/**
  * @brief This function handles TIM15 global interrupt.
  */
void TIM15_IRQHandler(void)
{
 80039c0:	b580      	push	{r7, lr}
 80039c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM15_IRQn 0 */

  /* USER CODE END TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim15);
 80039c4:	4802      	ldr	r0, [pc, #8]	; (80039d0 <TIM15_IRQHandler+0x10>)
 80039c6:	f006 ffcf 	bl	800a968 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM15_IRQn 1 */

  /* USER CODE END TIM15_IRQn 1 */
}
 80039ca:	bf00      	nop
 80039cc:	bd80      	pop	{r7, pc}
 80039ce:	bf00      	nop
 80039d0:	240007ac 	.word	0x240007ac

080039d4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80039d4:	b480      	push	{r7}
 80039d6:	af00      	add	r7, sp, #0
	return 1;
 80039d8:	2301      	movs	r3, #1
}
 80039da:	4618      	mov	r0, r3
 80039dc:	46bd      	mov	sp, r7
 80039de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e2:	4770      	bx	lr

080039e4 <_kill>:

int _kill(int pid, int sig)
{
 80039e4:	b580      	push	{r7, lr}
 80039e6:	b082      	sub	sp, #8
 80039e8:	af00      	add	r7, sp, #0
 80039ea:	6078      	str	r0, [r7, #4]
 80039ec:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80039ee:	f00a fd09 	bl	800e404 <__errno>
 80039f2:	4603      	mov	r3, r0
 80039f4:	2216      	movs	r2, #22
 80039f6:	601a      	str	r2, [r3, #0]
	return -1;
 80039f8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80039fc:	4618      	mov	r0, r3
 80039fe:	3708      	adds	r7, #8
 8003a00:	46bd      	mov	sp, r7
 8003a02:	bd80      	pop	{r7, pc}

08003a04 <_exit>:

void _exit (int status)
{
 8003a04:	b580      	push	{r7, lr}
 8003a06:	b082      	sub	sp, #8
 8003a08:	af00      	add	r7, sp, #0
 8003a0a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8003a0c:	f04f 31ff 	mov.w	r1, #4294967295
 8003a10:	6878      	ldr	r0, [r7, #4]
 8003a12:	f7ff ffe7 	bl	80039e4 <_kill>
	while (1) {}		/* Make sure we hang here */
 8003a16:	e7fe      	b.n	8003a16 <_exit+0x12>

08003a18 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003a18:	b580      	push	{r7, lr}
 8003a1a:	b086      	sub	sp, #24
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	60f8      	str	r0, [r7, #12]
 8003a20:	60b9      	str	r1, [r7, #8]
 8003a22:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003a24:	2300      	movs	r3, #0
 8003a26:	617b      	str	r3, [r7, #20]
 8003a28:	e00a      	b.n	8003a40 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8003a2a:	f3af 8000 	nop.w
 8003a2e:	4601      	mov	r1, r0
 8003a30:	68bb      	ldr	r3, [r7, #8]
 8003a32:	1c5a      	adds	r2, r3, #1
 8003a34:	60ba      	str	r2, [r7, #8]
 8003a36:	b2ca      	uxtb	r2, r1
 8003a38:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003a3a:	697b      	ldr	r3, [r7, #20]
 8003a3c:	3301      	adds	r3, #1
 8003a3e:	617b      	str	r3, [r7, #20]
 8003a40:	697a      	ldr	r2, [r7, #20]
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	429a      	cmp	r2, r3
 8003a46:	dbf0      	blt.n	8003a2a <_read+0x12>
	}

return len;
 8003a48:	687b      	ldr	r3, [r7, #4]
}
 8003a4a:	4618      	mov	r0, r3
 8003a4c:	3718      	adds	r7, #24
 8003a4e:	46bd      	mov	sp, r7
 8003a50:	bd80      	pop	{r7, pc}

08003a52 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003a52:	b580      	push	{r7, lr}
 8003a54:	b086      	sub	sp, #24
 8003a56:	af00      	add	r7, sp, #0
 8003a58:	60f8      	str	r0, [r7, #12]
 8003a5a:	60b9      	str	r1, [r7, #8]
 8003a5c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003a5e:	2300      	movs	r3, #0
 8003a60:	617b      	str	r3, [r7, #20]
 8003a62:	e009      	b.n	8003a78 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8003a64:	68bb      	ldr	r3, [r7, #8]
 8003a66:	1c5a      	adds	r2, r3, #1
 8003a68:	60ba      	str	r2, [r7, #8]
 8003a6a:	781b      	ldrb	r3, [r3, #0]
 8003a6c:	4618      	mov	r0, r3
 8003a6e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003a72:	697b      	ldr	r3, [r7, #20]
 8003a74:	3301      	adds	r3, #1
 8003a76:	617b      	str	r3, [r7, #20]
 8003a78:	697a      	ldr	r2, [r7, #20]
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	429a      	cmp	r2, r3
 8003a7e:	dbf1      	blt.n	8003a64 <_write+0x12>
	}
	return len;
 8003a80:	687b      	ldr	r3, [r7, #4]
}
 8003a82:	4618      	mov	r0, r3
 8003a84:	3718      	adds	r7, #24
 8003a86:	46bd      	mov	sp, r7
 8003a88:	bd80      	pop	{r7, pc}

08003a8a <_close>:

int _close(int file)
{
 8003a8a:	b480      	push	{r7}
 8003a8c:	b083      	sub	sp, #12
 8003a8e:	af00      	add	r7, sp, #0
 8003a90:	6078      	str	r0, [r7, #4]
	return -1;
 8003a92:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003a96:	4618      	mov	r0, r3
 8003a98:	370c      	adds	r7, #12
 8003a9a:	46bd      	mov	sp, r7
 8003a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa0:	4770      	bx	lr

08003aa2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003aa2:	b480      	push	{r7}
 8003aa4:	b083      	sub	sp, #12
 8003aa6:	af00      	add	r7, sp, #0
 8003aa8:	6078      	str	r0, [r7, #4]
 8003aaa:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8003aac:	683b      	ldr	r3, [r7, #0]
 8003aae:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003ab2:	605a      	str	r2, [r3, #4]
	return 0;
 8003ab4:	2300      	movs	r3, #0
}
 8003ab6:	4618      	mov	r0, r3
 8003ab8:	370c      	adds	r7, #12
 8003aba:	46bd      	mov	sp, r7
 8003abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac0:	4770      	bx	lr

08003ac2 <_isatty>:

int _isatty(int file)
{
 8003ac2:	b480      	push	{r7}
 8003ac4:	b083      	sub	sp, #12
 8003ac6:	af00      	add	r7, sp, #0
 8003ac8:	6078      	str	r0, [r7, #4]
	return 1;
 8003aca:	2301      	movs	r3, #1
}
 8003acc:	4618      	mov	r0, r3
 8003ace:	370c      	adds	r7, #12
 8003ad0:	46bd      	mov	sp, r7
 8003ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad6:	4770      	bx	lr

08003ad8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003ad8:	b480      	push	{r7}
 8003ada:	b085      	sub	sp, #20
 8003adc:	af00      	add	r7, sp, #0
 8003ade:	60f8      	str	r0, [r7, #12]
 8003ae0:	60b9      	str	r1, [r7, #8]
 8003ae2:	607a      	str	r2, [r7, #4]
	return 0;
 8003ae4:	2300      	movs	r3, #0
}
 8003ae6:	4618      	mov	r0, r3
 8003ae8:	3714      	adds	r7, #20
 8003aea:	46bd      	mov	sp, r7
 8003aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af0:	4770      	bx	lr
	...

08003af4 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8003af4:	b580      	push	{r7, lr}
 8003af6:	b084      	sub	sp, #16
 8003af8:	af00      	add	r7, sp, #0
 8003afa:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8003afc:	4b11      	ldr	r3, [pc, #68]	; (8003b44 <_sbrk+0x50>)
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d102      	bne.n	8003b0a <_sbrk+0x16>
		heap_end = &end;
 8003b04:	4b0f      	ldr	r3, [pc, #60]	; (8003b44 <_sbrk+0x50>)
 8003b06:	4a10      	ldr	r2, [pc, #64]	; (8003b48 <_sbrk+0x54>)
 8003b08:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8003b0a:	4b0e      	ldr	r3, [pc, #56]	; (8003b44 <_sbrk+0x50>)
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8003b10:	4b0c      	ldr	r3, [pc, #48]	; (8003b44 <_sbrk+0x50>)
 8003b12:	681a      	ldr	r2, [r3, #0]
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	4413      	add	r3, r2
 8003b18:	466a      	mov	r2, sp
 8003b1a:	4293      	cmp	r3, r2
 8003b1c:	d907      	bls.n	8003b2e <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8003b1e:	f00a fc71 	bl	800e404 <__errno>
 8003b22:	4603      	mov	r3, r0
 8003b24:	220c      	movs	r2, #12
 8003b26:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 8003b28:	f04f 33ff 	mov.w	r3, #4294967295
 8003b2c:	e006      	b.n	8003b3c <_sbrk+0x48>
	}

	heap_end += incr;
 8003b2e:	4b05      	ldr	r3, [pc, #20]	; (8003b44 <_sbrk+0x50>)
 8003b30:	681a      	ldr	r2, [r3, #0]
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	4413      	add	r3, r2
 8003b36:	4a03      	ldr	r2, [pc, #12]	; (8003b44 <_sbrk+0x50>)
 8003b38:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8003b3a:	68fb      	ldr	r3, [r7, #12]
}
 8003b3c:	4618      	mov	r0, r3
 8003b3e:	3710      	adds	r7, #16
 8003b40:	46bd      	mov	sp, r7
 8003b42:	bd80      	pop	{r7, pc}
 8003b44:	24000594 	.word	0x24000594
 8003b48:	24000a78 	.word	0x24000a78

08003b4c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003b4c:	b480      	push	{r7}
 8003b4e:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8003b50:	4b29      	ldr	r3, [pc, #164]	; (8003bf8 <SystemInit+0xac>)
 8003b52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b56:	4a28      	ldr	r2, [pc, #160]	; (8003bf8 <SystemInit+0xac>)
 8003b58:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003b5c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8003b60:	4b26      	ldr	r3, [pc, #152]	; (8003bfc <SystemInit+0xb0>)
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	4a25      	ldr	r2, [pc, #148]	; (8003bfc <SystemInit+0xb0>)
 8003b66:	f043 0301 	orr.w	r3, r3, #1
 8003b6a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8003b6c:	4b23      	ldr	r3, [pc, #140]	; (8003bfc <SystemInit+0xb0>)
 8003b6e:	2200      	movs	r2, #0
 8003b70:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, CSSON , CSION,RC48ON, CSIKERON PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8003b72:	4b22      	ldr	r3, [pc, #136]	; (8003bfc <SystemInit+0xb0>)
 8003b74:	681a      	ldr	r2, [r3, #0]
 8003b76:	4921      	ldr	r1, [pc, #132]	; (8003bfc <SystemInit+0xb0>)
 8003b78:	4b21      	ldr	r3, [pc, #132]	; (8003c00 <SystemInit+0xb4>)
 8003b7a:	4013      	ands	r3, r2
 8003b7c:	600b      	str	r3, [r1, #0]

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8003b7e:	4b1f      	ldr	r3, [pc, #124]	; (8003bfc <SystemInit+0xb0>)
 8003b80:	2200      	movs	r2, #0
 8003b82:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8003b84:	4b1d      	ldr	r3, [pc, #116]	; (8003bfc <SystemInit+0xb0>)
 8003b86:	2200      	movs	r2, #0
 8003b88:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8003b8a:	4b1c      	ldr	r3, [pc, #112]	; (8003bfc <SystemInit+0xb0>)
 8003b8c:	2200      	movs	r2, #0
 8003b8e:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x00000000;
 8003b90:	4b1a      	ldr	r3, [pc, #104]	; (8003bfc <SystemInit+0xb0>)
 8003b92:	2200      	movs	r2, #0
 8003b94:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00000000;
 8003b96:	4b19      	ldr	r3, [pc, #100]	; (8003bfc <SystemInit+0xb0>)
 8003b98:	2200      	movs	r2, #0
 8003b9a:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x00000000;
 8003b9c:	4b17      	ldr	r3, [pc, #92]	; (8003bfc <SystemInit+0xb0>)
 8003b9e:	2200      	movs	r2, #0
 8003ba0:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8003ba2:	4b16      	ldr	r3, [pc, #88]	; (8003bfc <SystemInit+0xb0>)
 8003ba4:	2200      	movs	r2, #0
 8003ba6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x00000000;
 8003ba8:	4b14      	ldr	r3, [pc, #80]	; (8003bfc <SystemInit+0xb0>)
 8003baa:	2200      	movs	r2, #0
 8003bac:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8003bae:	4b13      	ldr	r3, [pc, #76]	; (8003bfc <SystemInit+0xb0>)
 8003bb0:	2200      	movs	r2, #0
 8003bb2:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x00000000;
 8003bb4:	4b11      	ldr	r3, [pc, #68]	; (8003bfc <SystemInit+0xb0>)
 8003bb6:	2200      	movs	r2, #0
 8003bb8:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8003bba:	4b10      	ldr	r3, [pc, #64]	; (8003bfc <SystemInit+0xb0>)
 8003bbc:	2200      	movs	r2, #0
 8003bbe:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8003bc0:	4b0e      	ldr	r3, [pc, #56]	; (8003bfc <SystemInit+0xb0>)
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	4a0d      	ldr	r2, [pc, #52]	; (8003bfc <SystemInit+0xb0>)
 8003bc6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003bca:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8003bcc:	4b0b      	ldr	r3, [pc, #44]	; (8003bfc <SystemInit+0xb0>)
 8003bce:	2200      	movs	r2, #0
 8003bd0:	661a      	str	r2, [r3, #96]	; 0x60
  SCB->VTOR = FLASH_BANK2_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
#endif /* VECT_TAB_SRAM */

#else
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8003bd2:	4b0c      	ldr	r3, [pc, #48]	; (8003c04 <SystemInit+0xb8>)
 8003bd4:	681a      	ldr	r2, [r3, #0]
 8003bd6:	4b0c      	ldr	r3, [pc, #48]	; (8003c08 <SystemInit+0xbc>)
 8003bd8:	4013      	ands	r3, r2
 8003bda:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003bde:	d202      	bcs.n	8003be6 <SystemInit+0x9a>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8003be0:	4b0a      	ldr	r3, [pc, #40]	; (8003c0c <SystemInit+0xc0>)
 8003be2:	2201      	movs	r2, #1
 8003be4:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003be6:	4b04      	ldr	r3, [pc, #16]	; (8003bf8 <SystemInit+0xac>)
 8003be8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003bec:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 8003bee:	bf00      	nop
 8003bf0:	46bd      	mov	sp, r7
 8003bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf6:	4770      	bx	lr
 8003bf8:	e000ed00 	.word	0xe000ed00
 8003bfc:	58024400 	.word	0x58024400
 8003c00:	eaf6ed7f 	.word	0xeaf6ed7f
 8003c04:	5c001000 	.word	0x5c001000
 8003c08:	ffff0000 	.word	0xffff0000
 8003c0c:	51008108 	.word	0x51008108

08003c10 <MX_TIM2_Init>:
TIM_HandleTypeDef htim14;
TIM_HandleTypeDef htim15;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8003c10:	b580      	push	{r7, lr}
 8003c12:	b08c      	sub	sp, #48	; 0x30
 8003c14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003c16:	f107 0320 	add.w	r3, r7, #32
 8003c1a:	2200      	movs	r2, #0
 8003c1c:	601a      	str	r2, [r3, #0]
 8003c1e:	605a      	str	r2, [r3, #4]
 8003c20:	609a      	str	r2, [r3, #8]
 8003c22:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003c24:	f107 0314 	add.w	r3, r7, #20
 8003c28:	2200      	movs	r2, #0
 8003c2a:	601a      	str	r2, [r3, #0]
 8003c2c:	605a      	str	r2, [r3, #4]
 8003c2e:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8003c30:	1d3b      	adds	r3, r7, #4
 8003c32:	2200      	movs	r2, #0
 8003c34:	601a      	str	r2, [r3, #0]
 8003c36:	605a      	str	r2, [r3, #4]
 8003c38:	609a      	str	r2, [r3, #8]
 8003c3a:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8003c3c:	4b2b      	ldr	r3, [pc, #172]	; (8003cec <MX_TIM2_Init+0xdc>)
 8003c3e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003c42:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8003c44:	4b29      	ldr	r3, [pc, #164]	; (8003cec <MX_TIM2_Init+0xdc>)
 8003c46:	2200      	movs	r2, #0
 8003c48:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003c4a:	4b28      	ldr	r3, [pc, #160]	; (8003cec <MX_TIM2_Init+0xdc>)
 8003c4c:	2200      	movs	r2, #0
 8003c4e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8003c50:	4b26      	ldr	r3, [pc, #152]	; (8003cec <MX_TIM2_Init+0xdc>)
 8003c52:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003c56:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003c58:	4b24      	ldr	r3, [pc, #144]	; (8003cec <MX_TIM2_Init+0xdc>)
 8003c5a:	2200      	movs	r2, #0
 8003c5c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003c5e:	4b23      	ldr	r3, [pc, #140]	; (8003cec <MX_TIM2_Init+0xdc>)
 8003c60:	2200      	movs	r2, #0
 8003c62:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8003c64:	4821      	ldr	r0, [pc, #132]	; (8003cec <MX_TIM2_Init+0xdc>)
 8003c66:	f006 f8c1 	bl	8009dec <HAL_TIM_Base_Init>
 8003c6a:	4603      	mov	r3, r0
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d001      	beq.n	8003c74 <MX_TIM2_Init+0x64>
  {
    Error_Handler();
 8003c70:	f7fe ff9e 	bl	8002bb0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003c74:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003c78:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8003c7a:	f107 0320 	add.w	r3, r7, #32
 8003c7e:	4619      	mov	r1, r3
 8003c80:	481a      	ldr	r0, [pc, #104]	; (8003cec <MX_TIM2_Init+0xdc>)
 8003c82:	f007 f941 	bl	800af08 <HAL_TIM_ConfigClockSource>
 8003c86:	4603      	mov	r3, r0
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d001      	beq.n	8003c90 <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 8003c8c:	f7fe ff90 	bl	8002bb0 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8003c90:	4816      	ldr	r0, [pc, #88]	; (8003cec <MX_TIM2_Init+0xdc>)
 8003c92:	f006 fc47 	bl	800a524 <HAL_TIM_IC_Init>
 8003c96:	4603      	mov	r3, r0
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d001      	beq.n	8003ca0 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8003c9c:	f7fe ff88 	bl	8002bb0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003ca0:	2300      	movs	r3, #0
 8003ca2:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003ca4:	2300      	movs	r3, #0
 8003ca6:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003ca8:	f107 0314 	add.w	r3, r7, #20
 8003cac:	4619      	mov	r1, r3
 8003cae:	480f      	ldr	r0, [pc, #60]	; (8003cec <MX_TIM2_Init+0xdc>)
 8003cb0:	f007 ff9e 	bl	800bbf0 <HAL_TIMEx_MasterConfigSynchronization>
 8003cb4:	4603      	mov	r3, r0
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d001      	beq.n	8003cbe <MX_TIM2_Init+0xae>
  {
    Error_Handler();
 8003cba:	f7fe ff79 	bl	8002bb0 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8003cbe:	2300      	movs	r3, #0
 8003cc0:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8003cc2:	2301      	movs	r3, #1
 8003cc4:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8003cc6:	2300      	movs	r3, #0
 8003cc8:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8003cca:	2300      	movs	r3, #0
 8003ccc:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8003cce:	1d3b      	adds	r3, r7, #4
 8003cd0:	2200      	movs	r2, #0
 8003cd2:	4619      	mov	r1, r3
 8003cd4:	4805      	ldr	r0, [pc, #20]	; (8003cec <MX_TIM2_Init+0xdc>)
 8003cd6:	f006 ff66 	bl	800aba6 <HAL_TIM_IC_ConfigChannel>
 8003cda:	4603      	mov	r3, r0
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d001      	beq.n	8003ce4 <MX_TIM2_Init+0xd4>
  {
    Error_Handler();
 8003ce0:	f7fe ff66 	bl	8002bb0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8003ce4:	bf00      	nop
 8003ce6:	3730      	adds	r7, #48	; 0x30
 8003ce8:	46bd      	mov	sp, r7
 8003cea:	bd80      	pop	{r7, pc}
 8003cec:	24000598 	.word	0x24000598

08003cf0 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8003cf0:	b580      	push	{r7, lr}
 8003cf2:	b08c      	sub	sp, #48	; 0x30
 8003cf4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003cf6:	f107 0320 	add.w	r3, r7, #32
 8003cfa:	2200      	movs	r2, #0
 8003cfc:	601a      	str	r2, [r3, #0]
 8003cfe:	605a      	str	r2, [r3, #4]
 8003d00:	609a      	str	r2, [r3, #8]
 8003d02:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003d04:	f107 0314 	add.w	r3, r7, #20
 8003d08:	2200      	movs	r2, #0
 8003d0a:	601a      	str	r2, [r3, #0]
 8003d0c:	605a      	str	r2, [r3, #4]
 8003d0e:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8003d10:	1d3b      	adds	r3, r7, #4
 8003d12:	2200      	movs	r2, #0
 8003d14:	601a      	str	r2, [r3, #0]
 8003d16:	605a      	str	r2, [r3, #4]
 8003d18:	609a      	str	r2, [r3, #8]
 8003d1a:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8003d1c:	4b2b      	ldr	r3, [pc, #172]	; (8003dcc <MX_TIM3_Init+0xdc>)
 8003d1e:	4a2c      	ldr	r2, [pc, #176]	; (8003dd0 <MX_TIM3_Init+0xe0>)
 8003d20:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8003d22:	4b2a      	ldr	r3, [pc, #168]	; (8003dcc <MX_TIM3_Init+0xdc>)
 8003d24:	2200      	movs	r2, #0
 8003d26:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003d28:	4b28      	ldr	r3, [pc, #160]	; (8003dcc <MX_TIM3_Init+0xdc>)
 8003d2a:	2200      	movs	r2, #0
 8003d2c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8003d2e:	4b27      	ldr	r3, [pc, #156]	; (8003dcc <MX_TIM3_Init+0xdc>)
 8003d30:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003d34:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003d36:	4b25      	ldr	r3, [pc, #148]	; (8003dcc <MX_TIM3_Init+0xdc>)
 8003d38:	2200      	movs	r2, #0
 8003d3a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003d3c:	4b23      	ldr	r3, [pc, #140]	; (8003dcc <MX_TIM3_Init+0xdc>)
 8003d3e:	2200      	movs	r2, #0
 8003d40:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8003d42:	4822      	ldr	r0, [pc, #136]	; (8003dcc <MX_TIM3_Init+0xdc>)
 8003d44:	f006 f852 	bl	8009dec <HAL_TIM_Base_Init>
 8003d48:	4603      	mov	r3, r0
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d001      	beq.n	8003d52 <MX_TIM3_Init+0x62>
  {
    Error_Handler();
 8003d4e:	f7fe ff2f 	bl	8002bb0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003d52:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003d56:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8003d58:	f107 0320 	add.w	r3, r7, #32
 8003d5c:	4619      	mov	r1, r3
 8003d5e:	481b      	ldr	r0, [pc, #108]	; (8003dcc <MX_TIM3_Init+0xdc>)
 8003d60:	f007 f8d2 	bl	800af08 <HAL_TIM_ConfigClockSource>
 8003d64:	4603      	mov	r3, r0
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d001      	beq.n	8003d6e <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 8003d6a:	f7fe ff21 	bl	8002bb0 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 8003d6e:	4817      	ldr	r0, [pc, #92]	; (8003dcc <MX_TIM3_Init+0xdc>)
 8003d70:	f006 fbd8 	bl	800a524 <HAL_TIM_IC_Init>
 8003d74:	4603      	mov	r3, r0
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d001      	beq.n	8003d7e <MX_TIM3_Init+0x8e>
  {
    Error_Handler();
 8003d7a:	f7fe ff19 	bl	8002bb0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003d7e:	2300      	movs	r3, #0
 8003d80:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003d82:	2300      	movs	r3, #0
 8003d84:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003d86:	f107 0314 	add.w	r3, r7, #20
 8003d8a:	4619      	mov	r1, r3
 8003d8c:	480f      	ldr	r0, [pc, #60]	; (8003dcc <MX_TIM3_Init+0xdc>)
 8003d8e:	f007 ff2f 	bl	800bbf0 <HAL_TIMEx_MasterConfigSynchronization>
 8003d92:	4603      	mov	r3, r0
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d001      	beq.n	8003d9c <MX_TIM3_Init+0xac>
  {
    Error_Handler();
 8003d98:	f7fe ff0a 	bl	8002bb0 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8003d9c:	2300      	movs	r3, #0
 8003d9e:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8003da0:	2301      	movs	r3, #1
 8003da2:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8003da4:	2300      	movs	r3, #0
 8003da6:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8003da8:	2300      	movs	r3, #0
 8003daa:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8003dac:	1d3b      	adds	r3, r7, #4
 8003dae:	2200      	movs	r2, #0
 8003db0:	4619      	mov	r1, r3
 8003db2:	4806      	ldr	r0, [pc, #24]	; (8003dcc <MX_TIM3_Init+0xdc>)
 8003db4:	f006 fef7 	bl	800aba6 <HAL_TIM_IC_ConfigChannel>
 8003db8:	4603      	mov	r3, r0
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d001      	beq.n	8003dc2 <MX_TIM3_Init+0xd2>
  {
    Error_Handler();
 8003dbe:	f7fe fef7 	bl	8002bb0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8003dc2:	bf00      	nop
 8003dc4:	3730      	adds	r7, #48	; 0x30
 8003dc6:	46bd      	mov	sp, r7
 8003dc8:	bd80      	pop	{r7, pc}
 8003dca:	bf00      	nop
 8003dcc:	240005e4 	.word	0x240005e4
 8003dd0:	40000400 	.word	0x40000400

08003dd4 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8003dd4:	b580      	push	{r7, lr}
 8003dd6:	b08c      	sub	sp, #48	; 0x30
 8003dd8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003dda:	f107 0320 	add.w	r3, r7, #32
 8003dde:	2200      	movs	r2, #0
 8003de0:	601a      	str	r2, [r3, #0]
 8003de2:	605a      	str	r2, [r3, #4]
 8003de4:	609a      	str	r2, [r3, #8]
 8003de6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003de8:	f107 0314 	add.w	r3, r7, #20
 8003dec:	2200      	movs	r2, #0
 8003dee:	601a      	str	r2, [r3, #0]
 8003df0:	605a      	str	r2, [r3, #4]
 8003df2:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8003df4:	1d3b      	adds	r3, r7, #4
 8003df6:	2200      	movs	r2, #0
 8003df8:	601a      	str	r2, [r3, #0]
 8003dfa:	605a      	str	r2, [r3, #4]
 8003dfc:	609a      	str	r2, [r3, #8]
 8003dfe:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8003e00:	4b2b      	ldr	r3, [pc, #172]	; (8003eb0 <MX_TIM4_Init+0xdc>)
 8003e02:	4a2c      	ldr	r2, [pc, #176]	; (8003eb4 <MX_TIM4_Init+0xe0>)
 8003e04:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8003e06:	4b2a      	ldr	r3, [pc, #168]	; (8003eb0 <MX_TIM4_Init+0xdc>)
 8003e08:	2200      	movs	r2, #0
 8003e0a:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003e0c:	4b28      	ldr	r3, [pc, #160]	; (8003eb0 <MX_TIM4_Init+0xdc>)
 8003e0e:	2200      	movs	r2, #0
 8003e10:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8003e12:	4b27      	ldr	r3, [pc, #156]	; (8003eb0 <MX_TIM4_Init+0xdc>)
 8003e14:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003e18:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003e1a:	4b25      	ldr	r3, [pc, #148]	; (8003eb0 <MX_TIM4_Init+0xdc>)
 8003e1c:	2200      	movs	r2, #0
 8003e1e:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003e20:	4b23      	ldr	r3, [pc, #140]	; (8003eb0 <MX_TIM4_Init+0xdc>)
 8003e22:	2200      	movs	r2, #0
 8003e24:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8003e26:	4822      	ldr	r0, [pc, #136]	; (8003eb0 <MX_TIM4_Init+0xdc>)
 8003e28:	f005 ffe0 	bl	8009dec <HAL_TIM_Base_Init>
 8003e2c:	4603      	mov	r3, r0
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d001      	beq.n	8003e36 <MX_TIM4_Init+0x62>
  {
    Error_Handler();
 8003e32:	f7fe febd 	bl	8002bb0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003e36:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003e3a:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8003e3c:	f107 0320 	add.w	r3, r7, #32
 8003e40:	4619      	mov	r1, r3
 8003e42:	481b      	ldr	r0, [pc, #108]	; (8003eb0 <MX_TIM4_Init+0xdc>)
 8003e44:	f007 f860 	bl	800af08 <HAL_TIM_ConfigClockSource>
 8003e48:	4603      	mov	r3, r0
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d001      	beq.n	8003e52 <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 8003e4e:	f7fe feaf 	bl	8002bb0 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim4) != HAL_OK)
 8003e52:	4817      	ldr	r0, [pc, #92]	; (8003eb0 <MX_TIM4_Init+0xdc>)
 8003e54:	f006 fb66 	bl	800a524 <HAL_TIM_IC_Init>
 8003e58:	4603      	mov	r3, r0
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d001      	beq.n	8003e62 <MX_TIM4_Init+0x8e>
  {
    Error_Handler();
 8003e5e:	f7fe fea7 	bl	8002bb0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003e62:	2300      	movs	r3, #0
 8003e64:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003e66:	2300      	movs	r3, #0
 8003e68:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8003e6a:	f107 0314 	add.w	r3, r7, #20
 8003e6e:	4619      	mov	r1, r3
 8003e70:	480f      	ldr	r0, [pc, #60]	; (8003eb0 <MX_TIM4_Init+0xdc>)
 8003e72:	f007 febd 	bl	800bbf0 <HAL_TIMEx_MasterConfigSynchronization>
 8003e76:	4603      	mov	r3, r0
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d001      	beq.n	8003e80 <MX_TIM4_Init+0xac>
  {
    Error_Handler();
 8003e7c:	f7fe fe98 	bl	8002bb0 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8003e80:	2300      	movs	r3, #0
 8003e82:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8003e84:	2301      	movs	r3, #1
 8003e86:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8003e88:	2300      	movs	r3, #0
 8003e8a:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8003e8c:	2300      	movs	r3, #0
 8003e8e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8003e90:	1d3b      	adds	r3, r7, #4
 8003e92:	2200      	movs	r2, #0
 8003e94:	4619      	mov	r1, r3
 8003e96:	4806      	ldr	r0, [pc, #24]	; (8003eb0 <MX_TIM4_Init+0xdc>)
 8003e98:	f006 fe85 	bl	800aba6 <HAL_TIM_IC_ConfigChannel>
 8003e9c:	4603      	mov	r3, r0
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d001      	beq.n	8003ea6 <MX_TIM4_Init+0xd2>
  {
    Error_Handler();
 8003ea2:	f7fe fe85 	bl	8002bb0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8003ea6:	bf00      	nop
 8003ea8:	3730      	adds	r7, #48	; 0x30
 8003eaa:	46bd      	mov	sp, r7
 8003eac:	bd80      	pop	{r7, pc}
 8003eae:	bf00      	nop
 8003eb0:	24000630 	.word	0x24000630
 8003eb4:	40000800 	.word	0x40000800

08003eb8 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8003eb8:	b580      	push	{r7, lr}
 8003eba:	b088      	sub	sp, #32
 8003ebc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003ebe:	f107 0310 	add.w	r3, r7, #16
 8003ec2:	2200      	movs	r2, #0
 8003ec4:	601a      	str	r2, [r3, #0]
 8003ec6:	605a      	str	r2, [r3, #4]
 8003ec8:	609a      	str	r2, [r3, #8]
 8003eca:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003ecc:	1d3b      	adds	r3, r7, #4
 8003ece:	2200      	movs	r2, #0
 8003ed0:	601a      	str	r2, [r3, #0]
 8003ed2:	605a      	str	r2, [r3, #4]
 8003ed4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8003ed6:	4b1d      	ldr	r3, [pc, #116]	; (8003f4c <MX_TIM5_Init+0x94>)
 8003ed8:	4a1d      	ldr	r2, [pc, #116]	; (8003f50 <MX_TIM5_Init+0x98>)
 8003eda:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8003edc:	4b1b      	ldr	r3, [pc, #108]	; (8003f4c <MX_TIM5_Init+0x94>)
 8003ede:	2200      	movs	r2, #0
 8003ee0:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003ee2:	4b1a      	ldr	r3, [pc, #104]	; (8003f4c <MX_TIM5_Init+0x94>)
 8003ee4:	2200      	movs	r2, #0
 8003ee6:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8003ee8:	4b18      	ldr	r3, [pc, #96]	; (8003f4c <MX_TIM5_Init+0x94>)
 8003eea:	f04f 32ff 	mov.w	r2, #4294967295
 8003eee:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003ef0:	4b16      	ldr	r3, [pc, #88]	; (8003f4c <MX_TIM5_Init+0x94>)
 8003ef2:	2200      	movs	r2, #0
 8003ef4:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003ef6:	4b15      	ldr	r3, [pc, #84]	; (8003f4c <MX_TIM5_Init+0x94>)
 8003ef8:	2200      	movs	r2, #0
 8003efa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8003efc:	4813      	ldr	r0, [pc, #76]	; (8003f4c <MX_TIM5_Init+0x94>)
 8003efe:	f005 ff75 	bl	8009dec <HAL_TIM_Base_Init>
 8003f02:	4603      	mov	r3, r0
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d001      	beq.n	8003f0c <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 8003f08:	f7fe fe52 	bl	8002bb0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003f0c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003f10:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8003f12:	f107 0310 	add.w	r3, r7, #16
 8003f16:	4619      	mov	r1, r3
 8003f18:	480c      	ldr	r0, [pc, #48]	; (8003f4c <MX_TIM5_Init+0x94>)
 8003f1a:	f006 fff5 	bl	800af08 <HAL_TIM_ConfigClockSource>
 8003f1e:	4603      	mov	r3, r0
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d001      	beq.n	8003f28 <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 8003f24:	f7fe fe44 	bl	8002bb0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003f28:	2300      	movs	r3, #0
 8003f2a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003f2c:	2300      	movs	r3, #0
 8003f2e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8003f30:	1d3b      	adds	r3, r7, #4
 8003f32:	4619      	mov	r1, r3
 8003f34:	4805      	ldr	r0, [pc, #20]	; (8003f4c <MX_TIM5_Init+0x94>)
 8003f36:	f007 fe5b 	bl	800bbf0 <HAL_TIMEx_MasterConfigSynchronization>
 8003f3a:	4603      	mov	r3, r0
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d001      	beq.n	8003f44 <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 8003f40:	f7fe fe36 	bl	8002bb0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8003f44:	bf00      	nop
 8003f46:	3720      	adds	r7, #32
 8003f48:	46bd      	mov	sp, r7
 8003f4a:	bd80      	pop	{r7, pc}
 8003f4c:	2400067c 	.word	0x2400067c
 8003f50:	40000c00 	.word	0x40000c00

08003f54 <MX_TIM12_Init>:
/* TIM12 init function */
void MX_TIM12_Init(void)
{
 8003f54:	b580      	push	{r7, lr}
 8003f56:	b08c      	sub	sp, #48	; 0x30
 8003f58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003f5a:	f107 0320 	add.w	r3, r7, #32
 8003f5e:	2200      	movs	r2, #0
 8003f60:	601a      	str	r2, [r3, #0]
 8003f62:	605a      	str	r2, [r3, #4]
 8003f64:	609a      	str	r2, [r3, #8]
 8003f66:	60da      	str	r2, [r3, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003f68:	1d3b      	adds	r3, r7, #4
 8003f6a:	2200      	movs	r2, #0
 8003f6c:	601a      	str	r2, [r3, #0]
 8003f6e:	605a      	str	r2, [r3, #4]
 8003f70:	609a      	str	r2, [r3, #8]
 8003f72:	60da      	str	r2, [r3, #12]
 8003f74:	611a      	str	r2, [r3, #16]
 8003f76:	615a      	str	r2, [r3, #20]
 8003f78:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 8003f7a:	4b25      	ldr	r3, [pc, #148]	; (8004010 <MX_TIM12_Init+0xbc>)
 8003f7c:	4a25      	ldr	r2, [pc, #148]	; (8004014 <MX_TIM12_Init+0xc0>)
 8003f7e:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 64-1;
 8003f80:	4b23      	ldr	r3, [pc, #140]	; (8004010 <MX_TIM12_Init+0xbc>)
 8003f82:	223f      	movs	r2, #63	; 0x3f
 8003f84:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003f86:	4b22      	ldr	r3, [pc, #136]	; (8004010 <MX_TIM12_Init+0xbc>)
 8003f88:	2200      	movs	r2, #0
 8003f8a:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 0;
 8003f8c:	4b20      	ldr	r3, [pc, #128]	; (8004010 <MX_TIM12_Init+0xbc>)
 8003f8e:	2200      	movs	r2, #0
 8003f90:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003f92:	4b1f      	ldr	r3, [pc, #124]	; (8004010 <MX_TIM12_Init+0xbc>)
 8003f94:	2200      	movs	r2, #0
 8003f96:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003f98:	4b1d      	ldr	r3, [pc, #116]	; (8004010 <MX_TIM12_Init+0xbc>)
 8003f9a:	2200      	movs	r2, #0
 8003f9c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim12) != HAL_OK)
 8003f9e:	481c      	ldr	r0, [pc, #112]	; (8004010 <MX_TIM12_Init+0xbc>)
 8003fa0:	f005 ff24 	bl	8009dec <HAL_TIM_Base_Init>
 8003fa4:	4603      	mov	r3, r0
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d001      	beq.n	8003fae <MX_TIM12_Init+0x5a>
  {
    Error_Handler();
 8003faa:	f7fe fe01 	bl	8002bb0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003fae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003fb2:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim12, &sClockSourceConfig) != HAL_OK)
 8003fb4:	f107 0320 	add.w	r3, r7, #32
 8003fb8:	4619      	mov	r1, r3
 8003fba:	4815      	ldr	r0, [pc, #84]	; (8004010 <MX_TIM12_Init+0xbc>)
 8003fbc:	f006 ffa4 	bl	800af08 <HAL_TIM_ConfigClockSource>
 8003fc0:	4603      	mov	r3, r0
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d001      	beq.n	8003fca <MX_TIM12_Init+0x76>
  {
    Error_Handler();
 8003fc6:	f7fe fdf3 	bl	8002bb0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 8003fca:	4811      	ldr	r0, [pc, #68]	; (8004010 <MX_TIM12_Init+0xbc>)
 8003fcc:	f006 f8a5 	bl	800a11a <HAL_TIM_PWM_Init>
 8003fd0:	4603      	mov	r3, r0
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d001      	beq.n	8003fda <MX_TIM12_Init+0x86>
  {
    Error_Handler();
 8003fd6:	f7fe fdeb 	bl	8002bb0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003fda:	2360      	movs	r3, #96	; 0x60
 8003fdc:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8003fde:	2300      	movs	r3, #0
 8003fe0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003fe2:	2300      	movs	r3, #0
 8003fe4:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003fe6:	2300      	movs	r3, #0
 8003fe8:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003fea:	1d3b      	adds	r3, r7, #4
 8003fec:	2200      	movs	r2, #0
 8003fee:	4619      	mov	r1, r3
 8003ff0:	4807      	ldr	r0, [pc, #28]	; (8004010 <MX_TIM12_Init+0xbc>)
 8003ff2:	f006 fe75 	bl	800ace0 <HAL_TIM_PWM_ConfigChannel>
 8003ff6:	4603      	mov	r3, r0
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d001      	beq.n	8004000 <MX_TIM12_Init+0xac>
  {
    Error_Handler();
 8003ffc:	f7fe fdd8 	bl	8002bb0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 8004000:	4803      	ldr	r0, [pc, #12]	; (8004010 <MX_TIM12_Init+0xbc>)
 8004002:	f000 fa3d 	bl	8004480 <HAL_TIM_MspPostInit>

}
 8004006:	bf00      	nop
 8004008:	3730      	adds	r7, #48	; 0x30
 800400a:	46bd      	mov	sp, r7
 800400c:	bd80      	pop	{r7, pc}
 800400e:	bf00      	nop
 8004010:	240006c8 	.word	0x240006c8
 8004014:	40001800 	.word	0x40001800

08004018 <MX_TIM13_Init>:
/* TIM13 init function */
void MX_TIM13_Init(void)
{
 8004018:	b580      	push	{r7, lr}
 800401a:	b088      	sub	sp, #32
 800401c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM13_Init 0 */

  /* USER CODE END TIM13_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800401e:	1d3b      	adds	r3, r7, #4
 8004020:	2200      	movs	r2, #0
 8004022:	601a      	str	r2, [r3, #0]
 8004024:	605a      	str	r2, [r3, #4]
 8004026:	609a      	str	r2, [r3, #8]
 8004028:	60da      	str	r2, [r3, #12]
 800402a:	611a      	str	r2, [r3, #16]
 800402c:	615a      	str	r2, [r3, #20]
 800402e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 8004030:	4b1d      	ldr	r3, [pc, #116]	; (80040a8 <MX_TIM13_Init+0x90>)
 8004032:	4a1e      	ldr	r2, [pc, #120]	; (80040ac <MX_TIM13_Init+0x94>)
 8004034:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 64-1;
 8004036:	4b1c      	ldr	r3, [pc, #112]	; (80040a8 <MX_TIM13_Init+0x90>)
 8004038:	223f      	movs	r2, #63	; 0x3f
 800403a:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 800403c:	4b1a      	ldr	r3, [pc, #104]	; (80040a8 <MX_TIM13_Init+0x90>)
 800403e:	2200      	movs	r2, #0
 8004040:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 0;
 8004042:	4b19      	ldr	r3, [pc, #100]	; (80040a8 <MX_TIM13_Init+0x90>)
 8004044:	2200      	movs	r2, #0
 8004046:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004048:	4b17      	ldr	r3, [pc, #92]	; (80040a8 <MX_TIM13_Init+0x90>)
 800404a:	2200      	movs	r2, #0
 800404c:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800404e:	4b16      	ldr	r3, [pc, #88]	; (80040a8 <MX_TIM13_Init+0x90>)
 8004050:	2200      	movs	r2, #0
 8004052:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 8004054:	4814      	ldr	r0, [pc, #80]	; (80040a8 <MX_TIM13_Init+0x90>)
 8004056:	f005 fec9 	bl	8009dec <HAL_TIM_Base_Init>
 800405a:	4603      	mov	r3, r0
 800405c:	2b00      	cmp	r3, #0
 800405e:	d001      	beq.n	8004064 <MX_TIM13_Init+0x4c>
  {
    Error_Handler();
 8004060:	f7fe fda6 	bl	8002bb0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim13) != HAL_OK)
 8004064:	4810      	ldr	r0, [pc, #64]	; (80040a8 <MX_TIM13_Init+0x90>)
 8004066:	f006 f858 	bl	800a11a <HAL_TIM_PWM_Init>
 800406a:	4603      	mov	r3, r0
 800406c:	2b00      	cmp	r3, #0
 800406e:	d001      	beq.n	8004074 <MX_TIM13_Init+0x5c>
  {
    Error_Handler();
 8004070:	f7fe fd9e 	bl	8002bb0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004074:	2360      	movs	r3, #96	; 0x60
 8004076:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8004078:	2300      	movs	r3, #0
 800407a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800407c:	2300      	movs	r3, #0
 800407e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004080:	2300      	movs	r3, #0
 8004082:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim13, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004084:	1d3b      	adds	r3, r7, #4
 8004086:	2200      	movs	r2, #0
 8004088:	4619      	mov	r1, r3
 800408a:	4807      	ldr	r0, [pc, #28]	; (80040a8 <MX_TIM13_Init+0x90>)
 800408c:	f006 fe28 	bl	800ace0 <HAL_TIM_PWM_ConfigChannel>
 8004090:	4603      	mov	r3, r0
 8004092:	2b00      	cmp	r3, #0
 8004094:	d001      	beq.n	800409a <MX_TIM13_Init+0x82>
  {
    Error_Handler();
 8004096:	f7fe fd8b 	bl	8002bb0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */
  HAL_TIM_MspPostInit(&htim13);
 800409a:	4803      	ldr	r0, [pc, #12]	; (80040a8 <MX_TIM13_Init+0x90>)
 800409c:	f000 f9f0 	bl	8004480 <HAL_TIM_MspPostInit>

}
 80040a0:	bf00      	nop
 80040a2:	3720      	adds	r7, #32
 80040a4:	46bd      	mov	sp, r7
 80040a6:	bd80      	pop	{r7, pc}
 80040a8:	24000714 	.word	0x24000714
 80040ac:	40001c00 	.word	0x40001c00

080040b0 <MX_TIM14_Init>:
/* TIM14 init function */
void MX_TIM14_Init(void)
{
 80040b0:	b580      	push	{r7, lr}
 80040b2:	b088      	sub	sp, #32
 80040b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM14_Init 0 */

  /* USER CODE END TIM14_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80040b6:	1d3b      	adds	r3, r7, #4
 80040b8:	2200      	movs	r2, #0
 80040ba:	601a      	str	r2, [r3, #0]
 80040bc:	605a      	str	r2, [r3, #4]
 80040be:	609a      	str	r2, [r3, #8]
 80040c0:	60da      	str	r2, [r3, #12]
 80040c2:	611a      	str	r2, [r3, #16]
 80040c4:	615a      	str	r2, [r3, #20]
 80040c6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 80040c8:	4b1d      	ldr	r3, [pc, #116]	; (8004140 <MX_TIM14_Init+0x90>)
 80040ca:	4a1e      	ldr	r2, [pc, #120]	; (8004144 <MX_TIM14_Init+0x94>)
 80040cc:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 64-1;
 80040ce:	4b1c      	ldr	r3, [pc, #112]	; (8004140 <MX_TIM14_Init+0x90>)
 80040d0:	223f      	movs	r2, #63	; 0x3f
 80040d2:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 80040d4:	4b1a      	ldr	r3, [pc, #104]	; (8004140 <MX_TIM14_Init+0x90>)
 80040d6:	2200      	movs	r2, #0
 80040d8:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 0;
 80040da:	4b19      	ldr	r3, [pc, #100]	; (8004140 <MX_TIM14_Init+0x90>)
 80040dc:	2200      	movs	r2, #0
 80040de:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80040e0:	4b17      	ldr	r3, [pc, #92]	; (8004140 <MX_TIM14_Init+0x90>)
 80040e2:	2200      	movs	r2, #0
 80040e4:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80040e6:	4b16      	ldr	r3, [pc, #88]	; (8004140 <MX_TIM14_Init+0x90>)
 80040e8:	2200      	movs	r2, #0
 80040ea:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 80040ec:	4814      	ldr	r0, [pc, #80]	; (8004140 <MX_TIM14_Init+0x90>)
 80040ee:	f005 fe7d 	bl	8009dec <HAL_TIM_Base_Init>
 80040f2:	4603      	mov	r3, r0
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d001      	beq.n	80040fc <MX_TIM14_Init+0x4c>
  {
    Error_Handler();
 80040f8:	f7fe fd5a 	bl	8002bb0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim14) != HAL_OK)
 80040fc:	4810      	ldr	r0, [pc, #64]	; (8004140 <MX_TIM14_Init+0x90>)
 80040fe:	f006 f80c 	bl	800a11a <HAL_TIM_PWM_Init>
 8004102:	4603      	mov	r3, r0
 8004104:	2b00      	cmp	r3, #0
 8004106:	d001      	beq.n	800410c <MX_TIM14_Init+0x5c>
  {
    Error_Handler();
 8004108:	f7fe fd52 	bl	8002bb0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800410c:	2360      	movs	r3, #96	; 0x60
 800410e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8004110:	2300      	movs	r3, #0
 8004112:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004114:	2300      	movs	r3, #0
 8004116:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004118:	2300      	movs	r3, #0
 800411a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim14, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800411c:	1d3b      	adds	r3, r7, #4
 800411e:	2200      	movs	r2, #0
 8004120:	4619      	mov	r1, r3
 8004122:	4807      	ldr	r0, [pc, #28]	; (8004140 <MX_TIM14_Init+0x90>)
 8004124:	f006 fddc 	bl	800ace0 <HAL_TIM_PWM_ConfigChannel>
 8004128:	4603      	mov	r3, r0
 800412a:	2b00      	cmp	r3, #0
 800412c:	d001      	beq.n	8004132 <MX_TIM14_Init+0x82>
  {
    Error_Handler();
 800412e:	f7fe fd3f 	bl	8002bb0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */
  HAL_TIM_MspPostInit(&htim14);
 8004132:	4803      	ldr	r0, [pc, #12]	; (8004140 <MX_TIM14_Init+0x90>)
 8004134:	f000 f9a4 	bl	8004480 <HAL_TIM_MspPostInit>

}
 8004138:	bf00      	nop
 800413a:	3720      	adds	r7, #32
 800413c:	46bd      	mov	sp, r7
 800413e:	bd80      	pop	{r7, pc}
 8004140:	24000760 	.word	0x24000760
 8004144:	40002000 	.word	0x40002000

08004148 <MX_TIM15_Init>:
/* TIM15 init function */
void MX_TIM15_Init(void)
{
 8004148:	b580      	push	{r7, lr}
 800414a:	b088      	sub	sp, #32
 800414c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800414e:	f107 0310 	add.w	r3, r7, #16
 8004152:	2200      	movs	r2, #0
 8004154:	601a      	str	r2, [r3, #0]
 8004156:	605a      	str	r2, [r3, #4]
 8004158:	609a      	str	r2, [r3, #8]
 800415a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800415c:	1d3b      	adds	r3, r7, #4
 800415e:	2200      	movs	r2, #0
 8004160:	601a      	str	r2, [r3, #0]
 8004162:	605a      	str	r2, [r3, #4]
 8004164:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8004166:	4b1f      	ldr	r3, [pc, #124]	; (80041e4 <MX_TIM15_Init+0x9c>)
 8004168:	4a1f      	ldr	r2, [pc, #124]	; (80041e8 <MX_TIM15_Init+0xa0>)
 800416a:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 0;
 800416c:	4b1d      	ldr	r3, [pc, #116]	; (80041e4 <MX_TIM15_Init+0x9c>)
 800416e:	2200      	movs	r2, #0
 8004170:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004172:	4b1c      	ldr	r3, [pc, #112]	; (80041e4 <MX_TIM15_Init+0x9c>)
 8004174:	2200      	movs	r2, #0
 8004176:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 64000;
 8004178:	4b1a      	ldr	r3, [pc, #104]	; (80041e4 <MX_TIM15_Init+0x9c>)
 800417a:	f44f 427a 	mov.w	r2, #64000	; 0xfa00
 800417e:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004180:	4b18      	ldr	r3, [pc, #96]	; (80041e4 <MX_TIM15_Init+0x9c>)
 8004182:	2200      	movs	r2, #0
 8004184:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8004186:	4b17      	ldr	r3, [pc, #92]	; (80041e4 <MX_TIM15_Init+0x9c>)
 8004188:	2200      	movs	r2, #0
 800418a:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800418c:	4b15      	ldr	r3, [pc, #84]	; (80041e4 <MX_TIM15_Init+0x9c>)
 800418e:	2200      	movs	r2, #0
 8004190:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 8004192:	4814      	ldr	r0, [pc, #80]	; (80041e4 <MX_TIM15_Init+0x9c>)
 8004194:	f005 fe2a 	bl	8009dec <HAL_TIM_Base_Init>
 8004198:	4603      	mov	r3, r0
 800419a:	2b00      	cmp	r3, #0
 800419c:	d001      	beq.n	80041a2 <MX_TIM15_Init+0x5a>
  {
    Error_Handler();
 800419e:	f7fe fd07 	bl	8002bb0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80041a2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80041a6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 80041a8:	f107 0310 	add.w	r3, r7, #16
 80041ac:	4619      	mov	r1, r3
 80041ae:	480d      	ldr	r0, [pc, #52]	; (80041e4 <MX_TIM15_Init+0x9c>)
 80041b0:	f006 feaa 	bl	800af08 <HAL_TIM_ConfigClockSource>
 80041b4:	4603      	mov	r3, r0
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d001      	beq.n	80041be <MX_TIM15_Init+0x76>
  {
    Error_Handler();
 80041ba:	f7fe fcf9 	bl	8002bb0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80041be:	2300      	movs	r3, #0
 80041c0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80041c2:	2300      	movs	r3, #0
 80041c4:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 80041c6:	1d3b      	adds	r3, r7, #4
 80041c8:	4619      	mov	r1, r3
 80041ca:	4806      	ldr	r0, [pc, #24]	; (80041e4 <MX_TIM15_Init+0x9c>)
 80041cc:	f007 fd10 	bl	800bbf0 <HAL_TIMEx_MasterConfigSynchronization>
 80041d0:	4603      	mov	r3, r0
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d001      	beq.n	80041da <MX_TIM15_Init+0x92>
  {
    Error_Handler();
 80041d6:	f7fe fceb 	bl	8002bb0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */

}
 80041da:	bf00      	nop
 80041dc:	3720      	adds	r7, #32
 80041de:	46bd      	mov	sp, r7
 80041e0:	bd80      	pop	{r7, pc}
 80041e2:	bf00      	nop
 80041e4:	240007ac 	.word	0x240007ac
 80041e8:	40014000 	.word	0x40014000

080041ec <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80041ec:	b580      	push	{r7, lr}
 80041ee:	b092      	sub	sp, #72	; 0x48
 80041f0:	af00      	add	r7, sp, #0
 80041f2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80041f4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80041f8:	2200      	movs	r2, #0
 80041fa:	601a      	str	r2, [r3, #0]
 80041fc:	605a      	str	r2, [r3, #4]
 80041fe:	609a      	str	r2, [r3, #8]
 8004200:	60da      	str	r2, [r3, #12]
 8004202:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM2)
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800420c:	d136      	bne.n	800427c <HAL_TIM_Base_MspInit+0x90>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800420e:	4b92      	ldr	r3, [pc, #584]	; (8004458 <HAL_TIM_Base_MspInit+0x26c>)
 8004210:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004214:	4a90      	ldr	r2, [pc, #576]	; (8004458 <HAL_TIM_Base_MspInit+0x26c>)
 8004216:	f043 0301 	orr.w	r3, r3, #1
 800421a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800421e:	4b8e      	ldr	r3, [pc, #568]	; (8004458 <HAL_TIM_Base_MspInit+0x26c>)
 8004220:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004224:	f003 0301 	and.w	r3, r3, #1
 8004228:	633b      	str	r3, [r7, #48]	; 0x30
 800422a:	6b3b      	ldr	r3, [r7, #48]	; 0x30

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800422c:	4b8a      	ldr	r3, [pc, #552]	; (8004458 <HAL_TIM_Base_MspInit+0x26c>)
 800422e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004232:	4a89      	ldr	r2, [pc, #548]	; (8004458 <HAL_TIM_Base_MspInit+0x26c>)
 8004234:	f043 0301 	orr.w	r3, r3, #1
 8004238:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800423c:	4b86      	ldr	r3, [pc, #536]	; (8004458 <HAL_TIM_Base_MspInit+0x26c>)
 800423e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004242:	f003 0301 	and.w	r3, r3, #1
 8004246:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004248:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = stepFeedback1_Pin;
 800424a:	2301      	movs	r3, #1
 800424c:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800424e:	2302      	movs	r3, #2
 8004250:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004252:	2300      	movs	r3, #0
 8004254:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004256:	2300      	movs	r3, #0
 8004258:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800425a:	2301      	movs	r3, #1
 800425c:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(stepFeedback1_GPIO_Port, &GPIO_InitStruct);
 800425e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8004262:	4619      	mov	r1, r3
 8004264:	487d      	ldr	r0, [pc, #500]	; (800445c <HAL_TIM_Base_MspInit+0x270>)
 8004266:	f003 f869 	bl	800733c <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 1, 0);
 800426a:	2200      	movs	r2, #0
 800426c:	2101      	movs	r1, #1
 800426e:	201c      	movs	r0, #28
 8004270:	f002 fabd 	bl	80067ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8004274:	201c      	movs	r0, #28
 8004276:	f002 fad4 	bl	8006822 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM15_IRQn);
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }
}
 800427a:	e0e8      	b.n	800444e <HAL_TIM_Base_MspInit+0x262>
  else if(tim_baseHandle->Instance==TIM3)
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	4a77      	ldr	r2, [pc, #476]	; (8004460 <HAL_TIM_Base_MspInit+0x274>)
 8004282:	4293      	cmp	r3, r2
 8004284:	d136      	bne.n	80042f4 <HAL_TIM_Base_MspInit+0x108>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8004286:	4b74      	ldr	r3, [pc, #464]	; (8004458 <HAL_TIM_Base_MspInit+0x26c>)
 8004288:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800428c:	4a72      	ldr	r2, [pc, #456]	; (8004458 <HAL_TIM_Base_MspInit+0x26c>)
 800428e:	f043 0302 	orr.w	r3, r3, #2
 8004292:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8004296:	4b70      	ldr	r3, [pc, #448]	; (8004458 <HAL_TIM_Base_MspInit+0x26c>)
 8004298:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800429c:	f003 0302 	and.w	r3, r3, #2
 80042a0:	62bb      	str	r3, [r7, #40]	; 0x28
 80042a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80042a4:	4b6c      	ldr	r3, [pc, #432]	; (8004458 <HAL_TIM_Base_MspInit+0x26c>)
 80042a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80042aa:	4a6b      	ldr	r2, [pc, #428]	; (8004458 <HAL_TIM_Base_MspInit+0x26c>)
 80042ac:	f043 0301 	orr.w	r3, r3, #1
 80042b0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80042b4:	4b68      	ldr	r3, [pc, #416]	; (8004458 <HAL_TIM_Base_MspInit+0x26c>)
 80042b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80042ba:	f003 0301 	and.w	r3, r3, #1
 80042be:	627b      	str	r3, [r7, #36]	; 0x24
 80042c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pin = stepFeedback2_Pin;
 80042c2:	2340      	movs	r3, #64	; 0x40
 80042c4:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80042c6:	2302      	movs	r3, #2
 80042c8:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80042ca:	2300      	movs	r3, #0
 80042cc:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80042ce:	2300      	movs	r3, #0
 80042d0:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80042d2:	2302      	movs	r3, #2
 80042d4:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(stepFeedback2_GPIO_Port, &GPIO_InitStruct);
 80042d6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80042da:	4619      	mov	r1, r3
 80042dc:	485f      	ldr	r0, [pc, #380]	; (800445c <HAL_TIM_Base_MspInit+0x270>)
 80042de:	f003 f82d 	bl	800733c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM3_IRQn, 1, 0);
 80042e2:	2200      	movs	r2, #0
 80042e4:	2101      	movs	r1, #1
 80042e6:	201d      	movs	r0, #29
 80042e8:	f002 fa81 	bl	80067ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80042ec:	201d      	movs	r0, #29
 80042ee:	f002 fa98 	bl	8006822 <HAL_NVIC_EnableIRQ>
}
 80042f2:	e0ac      	b.n	800444e <HAL_TIM_Base_MspInit+0x262>
  else if(tim_baseHandle->Instance==TIM4)
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	4a5a      	ldr	r2, [pc, #360]	; (8004464 <HAL_TIM_Base_MspInit+0x278>)
 80042fa:	4293      	cmp	r3, r2
 80042fc:	d137      	bne.n	800436e <HAL_TIM_Base_MspInit+0x182>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80042fe:	4b56      	ldr	r3, [pc, #344]	; (8004458 <HAL_TIM_Base_MspInit+0x26c>)
 8004300:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004304:	4a54      	ldr	r2, [pc, #336]	; (8004458 <HAL_TIM_Base_MspInit+0x26c>)
 8004306:	f043 0304 	orr.w	r3, r3, #4
 800430a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800430e:	4b52      	ldr	r3, [pc, #328]	; (8004458 <HAL_TIM_Base_MspInit+0x26c>)
 8004310:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004314:	f003 0304 	and.w	r3, r3, #4
 8004318:	623b      	str	r3, [r7, #32]
 800431a:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800431c:	4b4e      	ldr	r3, [pc, #312]	; (8004458 <HAL_TIM_Base_MspInit+0x26c>)
 800431e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004322:	4a4d      	ldr	r2, [pc, #308]	; (8004458 <HAL_TIM_Base_MspInit+0x26c>)
 8004324:	f043 0308 	orr.w	r3, r3, #8
 8004328:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800432c:	4b4a      	ldr	r3, [pc, #296]	; (8004458 <HAL_TIM_Base_MspInit+0x26c>)
 800432e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004332:	f003 0308 	and.w	r3, r3, #8
 8004336:	61fb      	str	r3, [r7, #28]
 8004338:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = stepFeedback3_Pin;
 800433a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800433e:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004340:	2302      	movs	r3, #2
 8004342:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004344:	2300      	movs	r3, #0
 8004346:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004348:	2300      	movs	r3, #0
 800434a:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800434c:	2302      	movs	r3, #2
 800434e:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(stepFeedback3_GPIO_Port, &GPIO_InitStruct);
 8004350:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8004354:	4619      	mov	r1, r3
 8004356:	4844      	ldr	r0, [pc, #272]	; (8004468 <HAL_TIM_Base_MspInit+0x27c>)
 8004358:	f002 fff0 	bl	800733c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 1, 0);
 800435c:	2200      	movs	r2, #0
 800435e:	2101      	movs	r1, #1
 8004360:	201e      	movs	r0, #30
 8004362:	f002 fa44 	bl	80067ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8004366:	201e      	movs	r0, #30
 8004368:	f002 fa5b 	bl	8006822 <HAL_NVIC_EnableIRQ>
}
 800436c:	e06f      	b.n	800444e <HAL_TIM_Base_MspInit+0x262>
  else if(tim_baseHandle->Instance==TIM5)
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	4a3e      	ldr	r2, [pc, #248]	; (800446c <HAL_TIM_Base_MspInit+0x280>)
 8004374:	4293      	cmp	r3, r2
 8004376:	d10f      	bne.n	8004398 <HAL_TIM_Base_MspInit+0x1ac>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8004378:	4b37      	ldr	r3, [pc, #220]	; (8004458 <HAL_TIM_Base_MspInit+0x26c>)
 800437a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800437e:	4a36      	ldr	r2, [pc, #216]	; (8004458 <HAL_TIM_Base_MspInit+0x26c>)
 8004380:	f043 0308 	orr.w	r3, r3, #8
 8004384:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8004388:	4b33      	ldr	r3, [pc, #204]	; (8004458 <HAL_TIM_Base_MspInit+0x26c>)
 800438a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800438e:	f003 0308 	and.w	r3, r3, #8
 8004392:	61bb      	str	r3, [r7, #24]
 8004394:	69bb      	ldr	r3, [r7, #24]
}
 8004396:	e05a      	b.n	800444e <HAL_TIM_Base_MspInit+0x262>
  else if(tim_baseHandle->Instance==TIM12)
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	4a34      	ldr	r2, [pc, #208]	; (8004470 <HAL_TIM_Base_MspInit+0x284>)
 800439e:	4293      	cmp	r3, r2
 80043a0:	d10f      	bne.n	80043c2 <HAL_TIM_Base_MspInit+0x1d6>
    __HAL_RCC_TIM12_CLK_ENABLE();
 80043a2:	4b2d      	ldr	r3, [pc, #180]	; (8004458 <HAL_TIM_Base_MspInit+0x26c>)
 80043a4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80043a8:	4a2b      	ldr	r2, [pc, #172]	; (8004458 <HAL_TIM_Base_MspInit+0x26c>)
 80043aa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80043ae:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80043b2:	4b29      	ldr	r3, [pc, #164]	; (8004458 <HAL_TIM_Base_MspInit+0x26c>)
 80043b4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80043b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043bc:	617b      	str	r3, [r7, #20]
 80043be:	697b      	ldr	r3, [r7, #20]
}
 80043c0:	e045      	b.n	800444e <HAL_TIM_Base_MspInit+0x262>
  else if(tim_baseHandle->Instance==TIM13)
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	4a2b      	ldr	r2, [pc, #172]	; (8004474 <HAL_TIM_Base_MspInit+0x288>)
 80043c8:	4293      	cmp	r3, r2
 80043ca:	d10f      	bne.n	80043ec <HAL_TIM_Base_MspInit+0x200>
    __HAL_RCC_TIM13_CLK_ENABLE();
 80043cc:	4b22      	ldr	r3, [pc, #136]	; (8004458 <HAL_TIM_Base_MspInit+0x26c>)
 80043ce:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80043d2:	4a21      	ldr	r2, [pc, #132]	; (8004458 <HAL_TIM_Base_MspInit+0x26c>)
 80043d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80043d8:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80043dc:	4b1e      	ldr	r3, [pc, #120]	; (8004458 <HAL_TIM_Base_MspInit+0x26c>)
 80043de:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80043e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043e6:	613b      	str	r3, [r7, #16]
 80043e8:	693b      	ldr	r3, [r7, #16]
}
 80043ea:	e030      	b.n	800444e <HAL_TIM_Base_MspInit+0x262>
  else if(tim_baseHandle->Instance==TIM14)
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	4a21      	ldr	r2, [pc, #132]	; (8004478 <HAL_TIM_Base_MspInit+0x28c>)
 80043f2:	4293      	cmp	r3, r2
 80043f4:	d10f      	bne.n	8004416 <HAL_TIM_Base_MspInit+0x22a>
    __HAL_RCC_TIM14_CLK_ENABLE();
 80043f6:	4b18      	ldr	r3, [pc, #96]	; (8004458 <HAL_TIM_Base_MspInit+0x26c>)
 80043f8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80043fc:	4a16      	ldr	r2, [pc, #88]	; (8004458 <HAL_TIM_Base_MspInit+0x26c>)
 80043fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004402:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8004406:	4b14      	ldr	r3, [pc, #80]	; (8004458 <HAL_TIM_Base_MspInit+0x26c>)
 8004408:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800440c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004410:	60fb      	str	r3, [r7, #12]
 8004412:	68fb      	ldr	r3, [r7, #12]
}
 8004414:	e01b      	b.n	800444e <HAL_TIM_Base_MspInit+0x262>
  else if(tim_baseHandle->Instance==TIM15)
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	4a18      	ldr	r2, [pc, #96]	; (800447c <HAL_TIM_Base_MspInit+0x290>)
 800441c:	4293      	cmp	r3, r2
 800441e:	d116      	bne.n	800444e <HAL_TIM_Base_MspInit+0x262>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8004420:	4b0d      	ldr	r3, [pc, #52]	; (8004458 <HAL_TIM_Base_MspInit+0x26c>)
 8004422:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004426:	4a0c      	ldr	r2, [pc, #48]	; (8004458 <HAL_TIM_Base_MspInit+0x26c>)
 8004428:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800442c:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8004430:	4b09      	ldr	r3, [pc, #36]	; (8004458 <HAL_TIM_Base_MspInit+0x26c>)
 8004432:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004436:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800443a:	60bb      	str	r3, [r7, #8]
 800443c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM15_IRQn, 1, 0);
 800443e:	2200      	movs	r2, #0
 8004440:	2101      	movs	r1, #1
 8004442:	2074      	movs	r0, #116	; 0x74
 8004444:	f002 f9d3 	bl	80067ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM15_IRQn);
 8004448:	2074      	movs	r0, #116	; 0x74
 800444a:	f002 f9ea 	bl	8006822 <HAL_NVIC_EnableIRQ>
}
 800444e:	bf00      	nop
 8004450:	3748      	adds	r7, #72	; 0x48
 8004452:	46bd      	mov	sp, r7
 8004454:	bd80      	pop	{r7, pc}
 8004456:	bf00      	nop
 8004458:	58024400 	.word	0x58024400
 800445c:	58020000 	.word	0x58020000
 8004460:	40000400 	.word	0x40000400
 8004464:	40000800 	.word	0x40000800
 8004468:	58020c00 	.word	0x58020c00
 800446c:	40000c00 	.word	0x40000c00
 8004470:	40001800 	.word	0x40001800
 8004474:	40001c00 	.word	0x40001c00
 8004478:	40002000 	.word	0x40002000
 800447c:	40014000 	.word	0x40014000

08004480 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8004480:	b580      	push	{r7, lr}
 8004482:	b08a      	sub	sp, #40	; 0x28
 8004484:	af00      	add	r7, sp, #0
 8004486:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004488:	f107 0314 	add.w	r3, r7, #20
 800448c:	2200      	movs	r2, #0
 800448e:	601a      	str	r2, [r3, #0]
 8004490:	605a      	str	r2, [r3, #4]
 8004492:	609a      	str	r2, [r3, #8]
 8004494:	60da      	str	r2, [r3, #12]
 8004496:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM12)
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	4a39      	ldr	r2, [pc, #228]	; (8004584 <HAL_TIM_MspPostInit+0x104>)
 800449e:	4293      	cmp	r3, r2
 80044a0:	d120      	bne.n	80044e4 <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM12_MspPostInit 0 */

  /* USER CODE END TIM12_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80044a2:	4b39      	ldr	r3, [pc, #228]	; (8004588 <HAL_TIM_MspPostInit+0x108>)
 80044a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80044a8:	4a37      	ldr	r2, [pc, #220]	; (8004588 <HAL_TIM_MspPostInit+0x108>)
 80044aa:	f043 0302 	orr.w	r3, r3, #2
 80044ae:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80044b2:	4b35      	ldr	r3, [pc, #212]	; (8004588 <HAL_TIM_MspPostInit+0x108>)
 80044b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80044b8:	f003 0302 	and.w	r3, r3, #2
 80044bc:	613b      	str	r3, [r7, #16]
 80044be:	693b      	ldr	r3, [r7, #16]
    /**TIM12 GPIO Configuration
    PB14     ------> TIM12_CH1
    */
    GPIO_InitStruct.Pin = S_PulsoPaP1_Pin;
 80044c0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80044c4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80044c6:	2302      	movs	r3, #2
 80044c8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80044ca:	2300      	movs	r3, #0
 80044cc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80044ce:	2300      	movs	r3, #0
 80044d0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM12;
 80044d2:	2302      	movs	r3, #2
 80044d4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(S_PulsoPaP1_GPIO_Port, &GPIO_InitStruct);
 80044d6:	f107 0314 	add.w	r3, r7, #20
 80044da:	4619      	mov	r1, r3
 80044dc:	482b      	ldr	r0, [pc, #172]	; (800458c <HAL_TIM_MspPostInit+0x10c>)
 80044de:	f002 ff2d 	bl	800733c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM14_MspPostInit 1 */

  /* USER CODE END TIM14_MspPostInit 1 */
  }

}
 80044e2:	e04a      	b.n	800457a <HAL_TIM_MspPostInit+0xfa>
  else if(timHandle->Instance==TIM13)
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	4a29      	ldr	r2, [pc, #164]	; (8004590 <HAL_TIM_MspPostInit+0x110>)
 80044ea:	4293      	cmp	r3, r2
 80044ec:	d120      	bne.n	8004530 <HAL_TIM_MspPostInit+0xb0>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80044ee:	4b26      	ldr	r3, [pc, #152]	; (8004588 <HAL_TIM_MspPostInit+0x108>)
 80044f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80044f4:	4a24      	ldr	r2, [pc, #144]	; (8004588 <HAL_TIM_MspPostInit+0x108>)
 80044f6:	f043 0320 	orr.w	r3, r3, #32
 80044fa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80044fe:	4b22      	ldr	r3, [pc, #136]	; (8004588 <HAL_TIM_MspPostInit+0x108>)
 8004500:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004504:	f003 0320 	and.w	r3, r3, #32
 8004508:	60fb      	str	r3, [r7, #12]
 800450a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = S_PulsoPaP2_Pin;
 800450c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004510:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004512:	2302      	movs	r3, #2
 8004514:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004516:	2300      	movs	r3, #0
 8004518:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800451a:	2300      	movs	r3, #0
 800451c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM13;
 800451e:	2309      	movs	r3, #9
 8004520:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(S_PulsoPaP2_GPIO_Port, &GPIO_InitStruct);
 8004522:	f107 0314 	add.w	r3, r7, #20
 8004526:	4619      	mov	r1, r3
 8004528:	481a      	ldr	r0, [pc, #104]	; (8004594 <HAL_TIM_MspPostInit+0x114>)
 800452a:	f002 ff07 	bl	800733c <HAL_GPIO_Init>
}
 800452e:	e024      	b.n	800457a <HAL_TIM_MspPostInit+0xfa>
  else if(timHandle->Instance==TIM14)
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	4a18      	ldr	r2, [pc, #96]	; (8004598 <HAL_TIM_MspPostInit+0x118>)
 8004536:	4293      	cmp	r3, r2
 8004538:	d11f      	bne.n	800457a <HAL_TIM_MspPostInit+0xfa>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800453a:	4b13      	ldr	r3, [pc, #76]	; (8004588 <HAL_TIM_MspPostInit+0x108>)
 800453c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004540:	4a11      	ldr	r2, [pc, #68]	; (8004588 <HAL_TIM_MspPostInit+0x108>)
 8004542:	f043 0320 	orr.w	r3, r3, #32
 8004546:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800454a:	4b0f      	ldr	r3, [pc, #60]	; (8004588 <HAL_TIM_MspPostInit+0x108>)
 800454c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004550:	f003 0320 	and.w	r3, r3, #32
 8004554:	60bb      	str	r3, [r7, #8]
 8004556:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = S_PulsoPaP3_Pin;
 8004558:	f44f 7300 	mov.w	r3, #512	; 0x200
 800455c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800455e:	2302      	movs	r3, #2
 8004560:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004562:	2300      	movs	r3, #0
 8004564:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004566:	2300      	movs	r3, #0
 8004568:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM14;
 800456a:	2309      	movs	r3, #9
 800456c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(S_PulsoPaP3_GPIO_Port, &GPIO_InitStruct);
 800456e:	f107 0314 	add.w	r3, r7, #20
 8004572:	4619      	mov	r1, r3
 8004574:	4807      	ldr	r0, [pc, #28]	; (8004594 <HAL_TIM_MspPostInit+0x114>)
 8004576:	f002 fee1 	bl	800733c <HAL_GPIO_Init>
}
 800457a:	bf00      	nop
 800457c:	3728      	adds	r7, #40	; 0x28
 800457e:	46bd      	mov	sp, r7
 8004580:	bd80      	pop	{r7, pc}
 8004582:	bf00      	nop
 8004584:	40001800 	.word	0x40001800
 8004588:	58024400 	.word	0x58024400
 800458c:	58020400 	.word	0x58020400
 8004590:	40001c00 	.word	0x40001c00
 8004594:	58021400 	.word	0x58021400
 8004598:	40002000 	.word	0x40002000

0800459c <get_Straj>:
double vlim;
double T,Ta,Td,Tv,Tj1,Tj2,Tj,delta;
double qi,qf;


double get_Straj(double t,double _qi, double _qf ,double *params){
 800459c:	b580      	push	{r7, lr}
 800459e:	ed2d 8b06 	vpush	{d8-d10}
 80045a2:	b088      	sub	sp, #32
 80045a4:	af00      	add	r7, sp, #0
 80045a6:	ed87 0b06 	vstr	d0, [r7, #24]
 80045aa:	ed87 1b04 	vstr	d1, [r7, #16]
 80045ae:	ed87 2b02 	vstr	d2, [r7, #8]
 80045b2:	6078      	str	r0, [r7, #4]

	Tj1 = params[0];
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045ba:	495f      	ldr	r1, [pc, #380]	; (8004738 <get_Straj+0x19c>)
 80045bc:	e9c1 2300 	strd	r2, r3, [r1]
	Tj2 = params[1];
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80045c6:	495d      	ldr	r1, [pc, #372]	; (800473c <get_Straj+0x1a0>)
 80045c8:	e9c1 2300 	strd	r2, r3, [r1]
	Tj = params[2];
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80045d2:	495b      	ldr	r1, [pc, #364]	; (8004740 <get_Straj+0x1a4>)
 80045d4:	e9c1 2300 	strd	r2, r3, [r1]
	Ta = params[3];
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80045de:	4959      	ldr	r1, [pc, #356]	; (8004744 <get_Straj+0x1a8>)
 80045e0:	e9c1 2300 	strd	r2, r3, [r1]
	Td = params[4];
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80045ea:	4957      	ldr	r1, [pc, #348]	; (8004748 <get_Straj+0x1ac>)
 80045ec:	e9c1 2300 	strd	r2, r3, [r1]
	Tv = params[5];
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 80045f6:	4955      	ldr	r1, [pc, #340]	; (800474c <get_Straj+0x1b0>)
 80045f8:	e9c1 2300 	strd	r2, r3, [r1]
	T = params[6];
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8004602:	4953      	ldr	r1, [pc, #332]	; (8004750 <get_Straj+0x1b4>)
 8004604:	e9c1 2300 	strd	r2, r3, [r1]

	qi=_qi;
 8004608:	4952      	ldr	r1, [pc, #328]	; (8004754 <get_Straj+0x1b8>)
 800460a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800460e:	e9c1 2300 	strd	r2, r3, [r1]
	qf=_qf;
 8004612:	4951      	ldr	r1, [pc, #324]	; (8004758 <get_Straj+0x1bc>)
 8004614:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004618:	e9c1 2300 	strd	r2, r3, [r1]

    if (qf < qi){
 800461c:	4b4e      	ldr	r3, [pc, #312]	; (8004758 <get_Straj+0x1bc>)
 800461e:	ed93 6b00 	vldr	d6, [r3]
 8004622:	4b4c      	ldr	r3, [pc, #304]	; (8004754 <get_Straj+0x1b8>)
 8004624:	ed93 7b00 	vldr	d7, [r3]
 8004628:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800462c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004630:	f140 80ac 	bpl.w	800478c <get_Straj+0x1f0>

    flagInv = true;
 8004634:	4b49      	ldr	r3, [pc, #292]	; (800475c <get_Straj+0x1c0>)
 8004636:	2201      	movs	r2, #1
 8004638:	701a      	strb	r2, [r3, #0]

    qi = -qi;
 800463a:	4b46      	ldr	r3, [pc, #280]	; (8004754 <get_Straj+0x1b8>)
 800463c:	ed93 7b00 	vldr	d7, [r3]
 8004640:	eeb1 7b47 	vneg.f64	d7, d7
 8004644:	4b43      	ldr	r3, [pc, #268]	; (8004754 <get_Straj+0x1b8>)
 8004646:	ed83 7b00 	vstr	d7, [r3]
    qf = -qf;
 800464a:	4b43      	ldr	r3, [pc, #268]	; (8004758 <get_Straj+0x1bc>)
 800464c:	ed93 7b00 	vldr	d7, [r3]
 8004650:	eeb1 7b47 	vneg.f64	d7, d7
 8004654:	4b40      	ldr	r3, [pc, #256]	; (8004758 <get_Straj+0x1bc>)
 8004656:	ed83 7b00 	vstr	d7, [r3]
    vi = -vi;
 800465a:	4b41      	ldr	r3, [pc, #260]	; (8004760 <get_Straj+0x1c4>)
 800465c:	ed93 7b00 	vldr	d7, [r3]
 8004660:	eeb1 7b47 	vneg.f64	d7, d7
 8004664:	4b3e      	ldr	r3, [pc, #248]	; (8004760 <get_Straj+0x1c4>)
 8004666:	ed83 7b00 	vstr	d7, [r3]
    vf = -vf;
 800466a:	4b3e      	ldr	r3, [pc, #248]	; (8004764 <get_Straj+0x1c8>)
 800466c:	ed93 7b00 	vldr	d7, [r3]
 8004670:	eeb1 7b47 	vneg.f64	d7, d7
 8004674:	4b3b      	ldr	r3, [pc, #236]	; (8004764 <get_Straj+0x1c8>)
 8004676:	ed83 7b00 	vstr	d7, [r3]

    vmax = -vmin;
 800467a:	4b3b      	ldr	r3, [pc, #236]	; (8004768 <get_Straj+0x1cc>)
 800467c:	ed93 7b00 	vldr	d7, [r3]
 8004680:	eeb1 7b47 	vneg.f64	d7, d7
 8004684:	4b39      	ldr	r3, [pc, #228]	; (800476c <get_Straj+0x1d0>)
 8004686:	ed83 7b00 	vstr	d7, [r3]
    vmin = -vmax;
 800468a:	4b38      	ldr	r3, [pc, #224]	; (800476c <get_Straj+0x1d0>)
 800468c:	ed93 7b00 	vldr	d7, [r3]
 8004690:	eeb1 7b47 	vneg.f64	d7, d7
 8004694:	4b34      	ldr	r3, [pc, #208]	; (8004768 <get_Straj+0x1cc>)
 8004696:	ed83 7b00 	vstr	d7, [r3]
    amax = -amin;
 800469a:	4b35      	ldr	r3, [pc, #212]	; (8004770 <get_Straj+0x1d4>)
 800469c:	ed93 7b00 	vldr	d7, [r3]
 80046a0:	eeb1 7b47 	vneg.f64	d7, d7
 80046a4:	4b33      	ldr	r3, [pc, #204]	; (8004774 <get_Straj+0x1d8>)
 80046a6:	ed83 7b00 	vstr	d7, [r3]
    amin = -amax;
 80046aa:	4b32      	ldr	r3, [pc, #200]	; (8004774 <get_Straj+0x1d8>)
 80046ac:	ed93 7b00 	vldr	d7, [r3]
 80046b0:	eeb1 7b47 	vneg.f64	d7, d7
 80046b4:	4b2e      	ldr	r3, [pc, #184]	; (8004770 <get_Straj+0x1d4>)
 80046b6:	ed83 7b00 	vstr	d7, [r3]
    jmax = -jmin;
 80046ba:	4b2f      	ldr	r3, [pc, #188]	; (8004778 <get_Straj+0x1dc>)
 80046bc:	ed93 7b00 	vldr	d7, [r3]
 80046c0:	eeb1 7b47 	vneg.f64	d7, d7
 80046c4:	4b2d      	ldr	r3, [pc, #180]	; (800477c <get_Straj+0x1e0>)
 80046c6:	ed83 7b00 	vstr	d7, [r3]
    jmin = -jmax;
 80046ca:	4b2c      	ldr	r3, [pc, #176]	; (800477c <get_Straj+0x1e0>)
 80046cc:	ed93 7b00 	vldr	d7, [r3]
 80046d0:	eeb1 7b47 	vneg.f64	d7, d7
 80046d4:	4b28      	ldr	r3, [pc, #160]	; (8004778 <get_Straj+0x1dc>)
 80046d6:	ed83 7b00 	vstr	d7, [r3]

    alima = jmax*Tj1;
 80046da:	4b28      	ldr	r3, [pc, #160]	; (800477c <get_Straj+0x1e0>)
 80046dc:	ed93 6b00 	vldr	d6, [r3]
 80046e0:	4b15      	ldr	r3, [pc, #84]	; (8004738 <get_Straj+0x19c>)
 80046e2:	ed93 7b00 	vldr	d7, [r3]
 80046e6:	ee26 7b07 	vmul.f64	d7, d6, d7
 80046ea:	4b25      	ldr	r3, [pc, #148]	; (8004780 <get_Straj+0x1e4>)
 80046ec:	ed83 7b00 	vstr	d7, [r3]
    alimd = -jmax*Tj2;
 80046f0:	4b22      	ldr	r3, [pc, #136]	; (800477c <get_Straj+0x1e0>)
 80046f2:	ed93 7b00 	vldr	d7, [r3]
 80046f6:	eeb1 6b47 	vneg.f64	d6, d7
 80046fa:	4b10      	ldr	r3, [pc, #64]	; (800473c <get_Straj+0x1a0>)
 80046fc:	ed93 7b00 	vldr	d7, [r3]
 8004700:	ee26 7b07 	vmul.f64	d7, d6, d7
 8004704:	4b1f      	ldr	r3, [pc, #124]	; (8004784 <get_Straj+0x1e8>)
 8004706:	ed83 7b00 	vstr	d7, [r3]
    vlim = vi+(Ta-Tj1)*alima;
 800470a:	4b0e      	ldr	r3, [pc, #56]	; (8004744 <get_Straj+0x1a8>)
 800470c:	ed93 6b00 	vldr	d6, [r3]
 8004710:	4b09      	ldr	r3, [pc, #36]	; (8004738 <get_Straj+0x19c>)
 8004712:	ed93 7b00 	vldr	d7, [r3]
 8004716:	ee36 6b47 	vsub.f64	d6, d6, d7
 800471a:	4b19      	ldr	r3, [pc, #100]	; (8004780 <get_Straj+0x1e4>)
 800471c:	ed93 7b00 	vldr	d7, [r3]
 8004720:	ee26 6b07 	vmul.f64	d6, d6, d7
 8004724:	4b0e      	ldr	r3, [pc, #56]	; (8004760 <get_Straj+0x1c4>)
 8004726:	ed93 7b00 	vldr	d7, [r3]
 800472a:	ee36 7b07 	vadd.f64	d7, d6, d7
 800472e:	4b16      	ldr	r3, [pc, #88]	; (8004788 <get_Straj+0x1ec>)
 8004730:	ed83 7b00 	vstr	d7, [r3]
 8004734:	e06f      	b.n	8004816 <get_Straj+0x27a>
 8004736:	bf00      	nop
 8004738:	24000880 	.word	0x24000880
 800473c:	24000888 	.word	0x24000888
 8004740:	24000890 	.word	0x24000890
 8004744:	24000868 	.word	0x24000868
 8004748:	24000870 	.word	0x24000870
 800474c:	24000878 	.word	0x24000878
 8004750:	24000860 	.word	0x24000860
 8004754:	240008a0 	.word	0x240008a0
 8004758:	240008a8 	.word	0x240008a8
 800475c:	24000840 	.word	0x24000840
 8004760:	24000018 	.word	0x24000018
 8004764:	24000488 	.word	0x24000488
 8004768:	24000480 	.word	0x24000480
 800476c:	24000010 	.word	0x24000010
 8004770:	24000490 	.word	0x24000490
 8004774:	24000020 	.word	0x24000020
 8004778:	24000478 	.word	0x24000478
 800477c:	24000008 	.word	0x24000008
 8004780:	24000848 	.word	0x24000848
 8004784:	24000850 	.word	0x24000850
 8004788:	24000858 	.word	0x24000858

    }else{
        jmin = -jmax;
 800478c:	4bbc      	ldr	r3, [pc, #752]	; (8004a80 <get_Straj+0x4e4>)
 800478e:	ed93 7b00 	vldr	d7, [r3]
 8004792:	eeb1 7b47 	vneg.f64	d7, d7
 8004796:	4bbb      	ldr	r3, [pc, #748]	; (8004a84 <get_Straj+0x4e8>)
 8004798:	ed83 7b00 	vstr	d7, [r3]
        amin = -amax;
 800479c:	4bba      	ldr	r3, [pc, #744]	; (8004a88 <get_Straj+0x4ec>)
 800479e:	ed93 7b00 	vldr	d7, [r3]
 80047a2:	eeb1 7b47 	vneg.f64	d7, d7
 80047a6:	4bb9      	ldr	r3, [pc, #740]	; (8004a8c <get_Straj+0x4f0>)
 80047a8:	ed83 7b00 	vstr	d7, [r3]
        vmin = -vmax;
 80047ac:	4bb8      	ldr	r3, [pc, #736]	; (8004a90 <get_Straj+0x4f4>)
 80047ae:	ed93 7b00 	vldr	d7, [r3]
 80047b2:	eeb1 7b47 	vneg.f64	d7, d7
 80047b6:	4bb7      	ldr	r3, [pc, #732]	; (8004a94 <get_Straj+0x4f8>)
 80047b8:	ed83 7b00 	vstr	d7, [r3]

        alima = jmax*Tj1;
 80047bc:	4bb0      	ldr	r3, [pc, #704]	; (8004a80 <get_Straj+0x4e4>)
 80047be:	ed93 6b00 	vldr	d6, [r3]
 80047c2:	4bb5      	ldr	r3, [pc, #724]	; (8004a98 <get_Straj+0x4fc>)
 80047c4:	ed93 7b00 	vldr	d7, [r3]
 80047c8:	ee26 7b07 	vmul.f64	d7, d6, d7
 80047cc:	4bb3      	ldr	r3, [pc, #716]	; (8004a9c <get_Straj+0x500>)
 80047ce:	ed83 7b00 	vstr	d7, [r3]
        alimd = -jmax*Tj2;
 80047d2:	4bab      	ldr	r3, [pc, #684]	; (8004a80 <get_Straj+0x4e4>)
 80047d4:	ed93 7b00 	vldr	d7, [r3]
 80047d8:	eeb1 6b47 	vneg.f64	d6, d7
 80047dc:	4bb0      	ldr	r3, [pc, #704]	; (8004aa0 <get_Straj+0x504>)
 80047de:	ed93 7b00 	vldr	d7, [r3]
 80047e2:	ee26 7b07 	vmul.f64	d7, d6, d7
 80047e6:	4baf      	ldr	r3, [pc, #700]	; (8004aa4 <get_Straj+0x508>)
 80047e8:	ed83 7b00 	vstr	d7, [r3]
        vlim = vi+(Ta-Tj1)*alima;
 80047ec:	4bae      	ldr	r3, [pc, #696]	; (8004aa8 <get_Straj+0x50c>)
 80047ee:	ed93 6b00 	vldr	d6, [r3]
 80047f2:	4ba9      	ldr	r3, [pc, #676]	; (8004a98 <get_Straj+0x4fc>)
 80047f4:	ed93 7b00 	vldr	d7, [r3]
 80047f8:	ee36 6b47 	vsub.f64	d6, d6, d7
 80047fc:	4ba7      	ldr	r3, [pc, #668]	; (8004a9c <get_Straj+0x500>)
 80047fe:	ed93 7b00 	vldr	d7, [r3]
 8004802:	ee26 6b07 	vmul.f64	d6, d6, d7
 8004806:	4ba9      	ldr	r3, [pc, #676]	; (8004aac <get_Straj+0x510>)
 8004808:	ed93 7b00 	vldr	d7, [r3]
 800480c:	ee36 7b07 	vadd.f64	d7, d6, d7
 8004810:	4ba7      	ldr	r3, [pc, #668]	; (8004ab0 <get_Straj+0x514>)
 8004812:	ed83 7b00 	vstr	d7, [r3]
    }


    //#Acceleration phase

    if (t>=0 && t<=Tj1){               //a) [0,Tj1]
 8004816:	ed97 7b06 	vldr	d7, [r7, #24]
 800481a:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800481e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004822:	db7e      	blt.n	8004922 <get_Straj+0x386>
 8004824:	4b9c      	ldr	r3, [pc, #624]	; (8004a98 <get_Straj+0x4fc>)
 8004826:	ed93 7b00 	vldr	d7, [r3]
 800482a:	ed97 6b06 	vldr	d6, [r7, #24]
 800482e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8004832:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004836:	d874      	bhi.n	8004922 <get_Straj+0x386>
        //printf("tramo1\n");
        q = qi+vi*t+jmax*pow(t,3)/6;
 8004838:	4b9c      	ldr	r3, [pc, #624]	; (8004aac <get_Straj+0x510>)
 800483a:	ed93 6b00 	vldr	d6, [r3]
 800483e:	ed97 7b06 	vldr	d7, [r7, #24]
 8004842:	ee26 6b07 	vmul.f64	d6, d6, d7
 8004846:	4b9b      	ldr	r3, [pc, #620]	; (8004ab4 <get_Straj+0x518>)
 8004848:	ed93 7b00 	vldr	d7, [r3]
 800484c:	ee36 8b07 	vadd.f64	d8, d6, d7
 8004850:	eeb0 1b08 	vmov.f64	d1, #8	; 0x40400000  3.0
 8004854:	ed97 0b06 	vldr	d0, [r7, #24]
 8004858:	f00c fca2 	bl	80111a0 <pow>
 800485c:	eeb0 6b40 	vmov.f64	d6, d0
 8004860:	4b87      	ldr	r3, [pc, #540]	; (8004a80 <get_Straj+0x4e4>)
 8004862:	ed93 7b00 	vldr	d7, [r3]
 8004866:	ee26 6b07 	vmul.f64	d6, d6, d7
 800486a:	eeb1 5b08 	vmov.f64	d5, #24	; 0x40c00000  6.0
 800486e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8004872:	ee38 7b07 	vadd.f64	d7, d8, d7
 8004876:	4b90      	ldr	r3, [pc, #576]	; (8004ab8 <get_Straj+0x51c>)
 8004878:	ed83 7b00 	vstr	d7, [r3]
        qd = vi+jmax*pow(t,2)/2;
 800487c:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8004880:	ed97 0b06 	vldr	d0, [r7, #24]
 8004884:	f00c fc8c 	bl	80111a0 <pow>
 8004888:	eeb0 6b40 	vmov.f64	d6, d0
 800488c:	4b7c      	ldr	r3, [pc, #496]	; (8004a80 <get_Straj+0x4e4>)
 800488e:	ed93 7b00 	vldr	d7, [r3]
 8004892:	ee26 7b07 	vmul.f64	d7, d6, d7
 8004896:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800489a:	ee87 6b05 	vdiv.f64	d6, d7, d5
 800489e:	4b83      	ldr	r3, [pc, #524]	; (8004aac <get_Straj+0x510>)
 80048a0:	ed93 7b00 	vldr	d7, [r3]
 80048a4:	ee36 7b07 	vadd.f64	d7, d6, d7
 80048a8:	4b84      	ldr	r3, [pc, #528]	; (8004abc <get_Straj+0x520>)
 80048aa:	ed83 7b00 	vstr	d7, [r3]
        qdd = jmax*t;
 80048ae:	4b74      	ldr	r3, [pc, #464]	; (8004a80 <get_Straj+0x4e4>)
 80048b0:	ed93 6b00 	vldr	d6, [r3]
 80048b4:	ed97 7b06 	vldr	d7, [r7, #24]
 80048b8:	ee26 7b07 	vmul.f64	d7, d6, d7
 80048bc:	4b80      	ldr	r3, [pc, #512]	; (8004ac0 <get_Straj+0x524>)
 80048be:	ed83 7b00 	vstr	d7, [r3]
        qddd = jmax;
 80048c2:	4b6f      	ldr	r3, [pc, #444]	; (8004a80 <get_Straj+0x4e4>)
 80048c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048c8:	497e      	ldr	r1, [pc, #504]	; (8004ac4 <get_Straj+0x528>)
 80048ca:	e9c1 2300 	strd	r2, r3, [r1]
        if (flagInv){
 80048ce:	4b7e      	ldr	r3, [pc, #504]	; (8004ac8 <get_Straj+0x52c>)
 80048d0:	781b      	ldrb	r3, [r3, #0]
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	f000 84fb 	beq.w	80052ce <get_Straj+0xd32>
            q=-q; qd=-qd; qdd=-qdd; qddd=-qddd;
 80048d8:	4b77      	ldr	r3, [pc, #476]	; (8004ab8 <get_Straj+0x51c>)
 80048da:	ed93 7b00 	vldr	d7, [r3]
 80048de:	eeb1 7b47 	vneg.f64	d7, d7
 80048e2:	4b75      	ldr	r3, [pc, #468]	; (8004ab8 <get_Straj+0x51c>)
 80048e4:	ed83 7b00 	vstr	d7, [r3]
 80048e8:	4b74      	ldr	r3, [pc, #464]	; (8004abc <get_Straj+0x520>)
 80048ea:	ed93 7b00 	vldr	d7, [r3]
 80048ee:	eeb1 7b47 	vneg.f64	d7, d7
 80048f2:	4b72      	ldr	r3, [pc, #456]	; (8004abc <get_Straj+0x520>)
 80048f4:	ed83 7b00 	vstr	d7, [r3]
 80048f8:	4b71      	ldr	r3, [pc, #452]	; (8004ac0 <get_Straj+0x524>)
 80048fa:	ed93 7b00 	vldr	d7, [r3]
 80048fe:	eeb1 7b47 	vneg.f64	d7, d7
 8004902:	4b6f      	ldr	r3, [pc, #444]	; (8004ac0 <get_Straj+0x524>)
 8004904:	ed83 7b00 	vstr	d7, [r3]
 8004908:	4b6e      	ldr	r3, [pc, #440]	; (8004ac4 <get_Straj+0x528>)
 800490a:	ed93 7b00 	vldr	d7, [r3]
 800490e:	eeb1 7b47 	vneg.f64	d7, d7
 8004912:	4b6c      	ldr	r3, [pc, #432]	; (8004ac4 <get_Straj+0x528>)
 8004914:	ed83 7b00 	vstr	d7, [r3]
            flagInv = false;
 8004918:	4b6b      	ldr	r3, [pc, #428]	; (8004ac8 <get_Straj+0x52c>)
 800491a:	2200      	movs	r2, #0
 800491c:	701a      	strb	r2, [r3, #0]
        if (flagInv){
 800491e:	f000 bcd6 	b.w	80052ce <get_Straj+0xd32>
        }

    } else if (t>Tj1 && t<=Ta-Tj1){   //b) [Tj1,Ta-Tj1]
 8004922:	4b5d      	ldr	r3, [pc, #372]	; (8004a98 <get_Straj+0x4fc>)
 8004924:	ed93 7b00 	vldr	d7, [r3]
 8004928:	ed97 6b06 	vldr	d6, [r7, #24]
 800492c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8004930:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004934:	f340 80ca 	ble.w	8004acc <get_Straj+0x530>
 8004938:	4b5b      	ldr	r3, [pc, #364]	; (8004aa8 <get_Straj+0x50c>)
 800493a:	ed93 6b00 	vldr	d6, [r3]
 800493e:	4b56      	ldr	r3, [pc, #344]	; (8004a98 <get_Straj+0x4fc>)
 8004940:	ed93 7b00 	vldr	d7, [r3]
 8004944:	ee36 7b47 	vsub.f64	d7, d6, d7
 8004948:	ed97 6b06 	vldr	d6, [r7, #24]
 800494c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8004950:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004954:	f200 80ba 	bhi.w	8004acc <get_Straj+0x530>
        //printf("tramo2\n");
        q = qi+vi*t+(alima/6)*(3*pow(t,2)-3*Tj1*t+pow(Tj1,2));
 8004958:	4b54      	ldr	r3, [pc, #336]	; (8004aac <get_Straj+0x510>)
 800495a:	ed93 6b00 	vldr	d6, [r3]
 800495e:	ed97 7b06 	vldr	d7, [r7, #24]
 8004962:	ee26 6b07 	vmul.f64	d6, d6, d7
 8004966:	4b53      	ldr	r3, [pc, #332]	; (8004ab4 <get_Straj+0x518>)
 8004968:	ed93 7b00 	vldr	d7, [r3]
 800496c:	ee36 8b07 	vadd.f64	d8, d6, d7
 8004970:	4b4a      	ldr	r3, [pc, #296]	; (8004a9c <get_Straj+0x500>)
 8004972:	ed93 7b00 	vldr	d7, [r3]
 8004976:	eeb1 6b08 	vmov.f64	d6, #24	; 0x40c00000  6.0
 800497a:	ee87 9b06 	vdiv.f64	d9, d7, d6
 800497e:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8004982:	ed97 0b06 	vldr	d0, [r7, #24]
 8004986:	f00c fc0b 	bl	80111a0 <pow>
 800498a:	eeb0 7b40 	vmov.f64	d7, d0
 800498e:	eeb0 6b08 	vmov.f64	d6, #8	; 0x40400000  3.0
 8004992:	ee27 6b06 	vmul.f64	d6, d7, d6
 8004996:	4b40      	ldr	r3, [pc, #256]	; (8004a98 <get_Straj+0x4fc>)
 8004998:	ed93 7b00 	vldr	d7, [r3]
 800499c:	eeb0 5b08 	vmov.f64	d5, #8	; 0x40400000  3.0
 80049a0:	ee27 5b05 	vmul.f64	d5, d7, d5
 80049a4:	ed97 7b06 	vldr	d7, [r7, #24]
 80049a8:	ee25 7b07 	vmul.f64	d7, d5, d7
 80049ac:	ee36 ab47 	vsub.f64	d10, d6, d7
 80049b0:	4b39      	ldr	r3, [pc, #228]	; (8004a98 <get_Straj+0x4fc>)
 80049b2:	ed93 7b00 	vldr	d7, [r3]
 80049b6:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 80049ba:	eeb0 0b47 	vmov.f64	d0, d7
 80049be:	f00c fbef 	bl	80111a0 <pow>
 80049c2:	eeb0 7b40 	vmov.f64	d7, d0
 80049c6:	ee3a 7b07 	vadd.f64	d7, d10, d7
 80049ca:	ee29 7b07 	vmul.f64	d7, d9, d7
 80049ce:	ee38 7b07 	vadd.f64	d7, d8, d7
 80049d2:	4b39      	ldr	r3, [pc, #228]	; (8004ab8 <get_Straj+0x51c>)
 80049d4:	ed83 7b00 	vstr	d7, [r3]
        qd = vi+amax*(t-Tj1/2);
 80049d8:	4b2f      	ldr	r3, [pc, #188]	; (8004a98 <get_Straj+0x4fc>)
 80049da:	ed93 6b00 	vldr	d6, [r3]
 80049de:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 80049e2:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80049e6:	ed97 6b06 	vldr	d6, [r7, #24]
 80049ea:	ee36 6b47 	vsub.f64	d6, d6, d7
 80049ee:	4b26      	ldr	r3, [pc, #152]	; (8004a88 <get_Straj+0x4ec>)
 80049f0:	ed93 7b00 	vldr	d7, [r3]
 80049f4:	ee26 6b07 	vmul.f64	d6, d6, d7
 80049f8:	4b2c      	ldr	r3, [pc, #176]	; (8004aac <get_Straj+0x510>)
 80049fa:	ed93 7b00 	vldr	d7, [r3]
 80049fe:	ee36 7b07 	vadd.f64	d7, d6, d7
 8004a02:	4b2e      	ldr	r3, [pc, #184]	; (8004abc <get_Straj+0x520>)
 8004a04:	ed83 7b00 	vstr	d7, [r3]
        qdd = jmax*Tj1;
 8004a08:	4b1d      	ldr	r3, [pc, #116]	; (8004a80 <get_Straj+0x4e4>)
 8004a0a:	ed93 6b00 	vldr	d6, [r3]
 8004a0e:	4b22      	ldr	r3, [pc, #136]	; (8004a98 <get_Straj+0x4fc>)
 8004a10:	ed93 7b00 	vldr	d7, [r3]
 8004a14:	ee26 7b07 	vmul.f64	d7, d6, d7
 8004a18:	4b29      	ldr	r3, [pc, #164]	; (8004ac0 <get_Straj+0x524>)
 8004a1a:	ed83 7b00 	vstr	d7, [r3]
        qddd = 0;
 8004a1e:	4929      	ldr	r1, [pc, #164]	; (8004ac4 <get_Straj+0x528>)
 8004a20:	f04f 0200 	mov.w	r2, #0
 8004a24:	f04f 0300 	mov.w	r3, #0
 8004a28:	e9c1 2300 	strd	r2, r3, [r1]

        if (flagInv){
 8004a2c:	4b26      	ldr	r3, [pc, #152]	; (8004ac8 <get_Straj+0x52c>)
 8004a2e:	781b      	ldrb	r3, [r3, #0]
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	f000 844c 	beq.w	80052ce <get_Straj+0xd32>
            q=-q; qd=-qd; qdd=-qdd; qddd=-qddd;
 8004a36:	4b20      	ldr	r3, [pc, #128]	; (8004ab8 <get_Straj+0x51c>)
 8004a38:	ed93 7b00 	vldr	d7, [r3]
 8004a3c:	eeb1 7b47 	vneg.f64	d7, d7
 8004a40:	4b1d      	ldr	r3, [pc, #116]	; (8004ab8 <get_Straj+0x51c>)
 8004a42:	ed83 7b00 	vstr	d7, [r3]
 8004a46:	4b1d      	ldr	r3, [pc, #116]	; (8004abc <get_Straj+0x520>)
 8004a48:	ed93 7b00 	vldr	d7, [r3]
 8004a4c:	eeb1 7b47 	vneg.f64	d7, d7
 8004a50:	4b1a      	ldr	r3, [pc, #104]	; (8004abc <get_Straj+0x520>)
 8004a52:	ed83 7b00 	vstr	d7, [r3]
 8004a56:	4b1a      	ldr	r3, [pc, #104]	; (8004ac0 <get_Straj+0x524>)
 8004a58:	ed93 7b00 	vldr	d7, [r3]
 8004a5c:	eeb1 7b47 	vneg.f64	d7, d7
 8004a60:	4b17      	ldr	r3, [pc, #92]	; (8004ac0 <get_Straj+0x524>)
 8004a62:	ed83 7b00 	vstr	d7, [r3]
 8004a66:	4b17      	ldr	r3, [pc, #92]	; (8004ac4 <get_Straj+0x528>)
 8004a68:	ed93 7b00 	vldr	d7, [r3]
 8004a6c:	eeb1 7b47 	vneg.f64	d7, d7
 8004a70:	4b14      	ldr	r3, [pc, #80]	; (8004ac4 <get_Straj+0x528>)
 8004a72:	ed83 7b00 	vstr	d7, [r3]
            flagInv = false;
 8004a76:	4b14      	ldr	r3, [pc, #80]	; (8004ac8 <get_Straj+0x52c>)
 8004a78:	2200      	movs	r2, #0
 8004a7a:	701a      	strb	r2, [r3, #0]
        if (flagInv){
 8004a7c:	f000 bc27 	b.w	80052ce <get_Straj+0xd32>
 8004a80:	24000008 	.word	0x24000008
 8004a84:	24000478 	.word	0x24000478
 8004a88:	24000020 	.word	0x24000020
 8004a8c:	24000490 	.word	0x24000490
 8004a90:	24000010 	.word	0x24000010
 8004a94:	24000480 	.word	0x24000480
 8004a98:	24000880 	.word	0x24000880
 8004a9c:	24000848 	.word	0x24000848
 8004aa0:	24000888 	.word	0x24000888
 8004aa4:	24000850 	.word	0x24000850
 8004aa8:	24000868 	.word	0x24000868
 8004aac:	24000018 	.word	0x24000018
 8004ab0:	24000858 	.word	0x24000858
 8004ab4:	240008a0 	.word	0x240008a0
 8004ab8:	24000458 	.word	0x24000458
 8004abc:	24000460 	.word	0x24000460
 8004ac0:	24000468 	.word	0x24000468
 8004ac4:	24000470 	.word	0x24000470
 8004ac8:	24000840 	.word	0x24000840
        }

    } else if (t>Ta-Tj1 && t<=Ta){    //c) [Ta-Tj1,Ta]
 8004acc:	4b9c      	ldr	r3, [pc, #624]	; (8004d40 <get_Straj+0x7a4>)
 8004ace:	ed93 6b00 	vldr	d6, [r3]
 8004ad2:	4b9c      	ldr	r3, [pc, #624]	; (8004d44 <get_Straj+0x7a8>)
 8004ad4:	ed93 7b00 	vldr	d7, [r3]
 8004ad8:	ee36 7b47 	vsub.f64	d7, d6, d7
 8004adc:	ed97 6b06 	vldr	d6, [r7, #24]
 8004ae0:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8004ae4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004ae8:	f340 80ac 	ble.w	8004c44 <get_Straj+0x6a8>
 8004aec:	4b94      	ldr	r3, [pc, #592]	; (8004d40 <get_Straj+0x7a4>)
 8004aee:	ed93 7b00 	vldr	d7, [r3]
 8004af2:	ed97 6b06 	vldr	d6, [r7, #24]
 8004af6:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8004afa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004afe:	f200 80a1 	bhi.w	8004c44 <get_Straj+0x6a8>
        //printf("tramo3\n");
        q = qi+(vlim+vi)*Ta/2-vlim*(Ta-t)-jmin*pow(Ta-t,3)/6;
 8004b02:	4b91      	ldr	r3, [pc, #580]	; (8004d48 <get_Straj+0x7ac>)
 8004b04:	ed93 6b00 	vldr	d6, [r3]
 8004b08:	4b90      	ldr	r3, [pc, #576]	; (8004d4c <get_Straj+0x7b0>)
 8004b0a:	ed93 7b00 	vldr	d7, [r3]
 8004b0e:	ee36 6b07 	vadd.f64	d6, d6, d7
 8004b12:	4b8b      	ldr	r3, [pc, #556]	; (8004d40 <get_Straj+0x7a4>)
 8004b14:	ed93 7b00 	vldr	d7, [r3]
 8004b18:	ee26 7b07 	vmul.f64	d7, d6, d7
 8004b1c:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8004b20:	ee87 6b05 	vdiv.f64	d6, d7, d5
 8004b24:	4b8a      	ldr	r3, [pc, #552]	; (8004d50 <get_Straj+0x7b4>)
 8004b26:	ed93 7b00 	vldr	d7, [r3]
 8004b2a:	ee36 6b07 	vadd.f64	d6, d6, d7
 8004b2e:	4b84      	ldr	r3, [pc, #528]	; (8004d40 <get_Straj+0x7a4>)
 8004b30:	ed93 5b00 	vldr	d5, [r3]
 8004b34:	ed97 7b06 	vldr	d7, [r7, #24]
 8004b38:	ee35 5b47 	vsub.f64	d5, d5, d7
 8004b3c:	4b82      	ldr	r3, [pc, #520]	; (8004d48 <get_Straj+0x7ac>)
 8004b3e:	ed93 7b00 	vldr	d7, [r3]
 8004b42:	ee25 7b07 	vmul.f64	d7, d5, d7
 8004b46:	ee36 8b47 	vsub.f64	d8, d6, d7
 8004b4a:	4b7d      	ldr	r3, [pc, #500]	; (8004d40 <get_Straj+0x7a4>)
 8004b4c:	ed93 6b00 	vldr	d6, [r3]
 8004b50:	ed97 7b06 	vldr	d7, [r7, #24]
 8004b54:	ee36 7b47 	vsub.f64	d7, d6, d7
 8004b58:	eeb0 1b08 	vmov.f64	d1, #8	; 0x40400000  3.0
 8004b5c:	eeb0 0b47 	vmov.f64	d0, d7
 8004b60:	f00c fb1e 	bl	80111a0 <pow>
 8004b64:	eeb0 6b40 	vmov.f64	d6, d0
 8004b68:	4b7a      	ldr	r3, [pc, #488]	; (8004d54 <get_Straj+0x7b8>)
 8004b6a:	ed93 7b00 	vldr	d7, [r3]
 8004b6e:	ee26 6b07 	vmul.f64	d6, d6, d7
 8004b72:	eeb1 5b08 	vmov.f64	d5, #24	; 0x40c00000  6.0
 8004b76:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8004b7a:	ee38 7b47 	vsub.f64	d7, d8, d7
 8004b7e:	4b76      	ldr	r3, [pc, #472]	; (8004d58 <get_Straj+0x7bc>)
 8004b80:	ed83 7b00 	vstr	d7, [r3]
        qd = vmax+jmin*pow(Ta-t,2)/2;
 8004b84:	4b6e      	ldr	r3, [pc, #440]	; (8004d40 <get_Straj+0x7a4>)
 8004b86:	ed93 6b00 	vldr	d6, [r3]
 8004b8a:	ed97 7b06 	vldr	d7, [r7, #24]
 8004b8e:	ee36 7b47 	vsub.f64	d7, d6, d7
 8004b92:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8004b96:	eeb0 0b47 	vmov.f64	d0, d7
 8004b9a:	f00c fb01 	bl	80111a0 <pow>
 8004b9e:	eeb0 6b40 	vmov.f64	d6, d0
 8004ba2:	4b6c      	ldr	r3, [pc, #432]	; (8004d54 <get_Straj+0x7b8>)
 8004ba4:	ed93 7b00 	vldr	d7, [r3]
 8004ba8:	ee26 7b07 	vmul.f64	d7, d6, d7
 8004bac:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8004bb0:	ee87 6b05 	vdiv.f64	d6, d7, d5
 8004bb4:	4b69      	ldr	r3, [pc, #420]	; (8004d5c <get_Straj+0x7c0>)
 8004bb6:	ed93 7b00 	vldr	d7, [r3]
 8004bba:	ee36 7b07 	vadd.f64	d7, d6, d7
 8004bbe:	4b68      	ldr	r3, [pc, #416]	; (8004d60 <get_Straj+0x7c4>)
 8004bc0:	ed83 7b00 	vstr	d7, [r3]
        qdd = -jmin*(Ta-t);
 8004bc4:	4b63      	ldr	r3, [pc, #396]	; (8004d54 <get_Straj+0x7b8>)
 8004bc6:	ed93 7b00 	vldr	d7, [r3]
 8004bca:	eeb1 6b47 	vneg.f64	d6, d7
 8004bce:	4b5c      	ldr	r3, [pc, #368]	; (8004d40 <get_Straj+0x7a4>)
 8004bd0:	ed93 5b00 	vldr	d5, [r3]
 8004bd4:	ed97 7b06 	vldr	d7, [r7, #24]
 8004bd8:	ee35 7b47 	vsub.f64	d7, d5, d7
 8004bdc:	ee26 7b07 	vmul.f64	d7, d6, d7
 8004be0:	4b60      	ldr	r3, [pc, #384]	; (8004d64 <get_Straj+0x7c8>)
 8004be2:	ed83 7b00 	vstr	d7, [r3]
        qddd = jmin;
 8004be6:	4b5b      	ldr	r3, [pc, #364]	; (8004d54 <get_Straj+0x7b8>)
 8004be8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bec:	495e      	ldr	r1, [pc, #376]	; (8004d68 <get_Straj+0x7cc>)
 8004bee:	e9c1 2300 	strd	r2, r3, [r1]
        if (flagInv){
 8004bf2:	4b5e      	ldr	r3, [pc, #376]	; (8004d6c <get_Straj+0x7d0>)
 8004bf4:	781b      	ldrb	r3, [r3, #0]
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	f000 8369 	beq.w	80052ce <get_Straj+0xd32>
            q=-q; qd=-qd; qdd=-qdd; qddd=-qddd;
 8004bfc:	4b56      	ldr	r3, [pc, #344]	; (8004d58 <get_Straj+0x7bc>)
 8004bfe:	ed93 7b00 	vldr	d7, [r3]
 8004c02:	eeb1 7b47 	vneg.f64	d7, d7
 8004c06:	4b54      	ldr	r3, [pc, #336]	; (8004d58 <get_Straj+0x7bc>)
 8004c08:	ed83 7b00 	vstr	d7, [r3]
 8004c0c:	4b54      	ldr	r3, [pc, #336]	; (8004d60 <get_Straj+0x7c4>)
 8004c0e:	ed93 7b00 	vldr	d7, [r3]
 8004c12:	eeb1 7b47 	vneg.f64	d7, d7
 8004c16:	4b52      	ldr	r3, [pc, #328]	; (8004d60 <get_Straj+0x7c4>)
 8004c18:	ed83 7b00 	vstr	d7, [r3]
 8004c1c:	4b51      	ldr	r3, [pc, #324]	; (8004d64 <get_Straj+0x7c8>)
 8004c1e:	ed93 7b00 	vldr	d7, [r3]
 8004c22:	eeb1 7b47 	vneg.f64	d7, d7
 8004c26:	4b4f      	ldr	r3, [pc, #316]	; (8004d64 <get_Straj+0x7c8>)
 8004c28:	ed83 7b00 	vstr	d7, [r3]
 8004c2c:	4b4e      	ldr	r3, [pc, #312]	; (8004d68 <get_Straj+0x7cc>)
 8004c2e:	ed93 7b00 	vldr	d7, [r3]
 8004c32:	eeb1 7b47 	vneg.f64	d7, d7
 8004c36:	4b4c      	ldr	r3, [pc, #304]	; (8004d68 <get_Straj+0x7cc>)
 8004c38:	ed83 7b00 	vstr	d7, [r3]
            flagInv = false;
 8004c3c:	4b4b      	ldr	r3, [pc, #300]	; (8004d6c <get_Straj+0x7d0>)
 8004c3e:	2200      	movs	r2, #0
 8004c40:	701a      	strb	r2, [r3, #0]
        if (flagInv){
 8004c42:	e344      	b.n	80052ce <get_Straj+0xd32>
        }
    }

    /*-------------Constant phase ----------------*/
    else if (t>Ta && t<=Ta+Tv){
 8004c44:	4b3e      	ldr	r3, [pc, #248]	; (8004d40 <get_Straj+0x7a4>)
 8004c46:	ed93 7b00 	vldr	d7, [r3]
 8004c4a:	ed97 6b06 	vldr	d6, [r7, #24]
 8004c4e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8004c52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c56:	f340 808d 	ble.w	8004d74 <get_Straj+0x7d8>
 8004c5a:	4b39      	ldr	r3, [pc, #228]	; (8004d40 <get_Straj+0x7a4>)
 8004c5c:	ed93 6b00 	vldr	d6, [r3]
 8004c60:	4b43      	ldr	r3, [pc, #268]	; (8004d70 <get_Straj+0x7d4>)
 8004c62:	ed93 7b00 	vldr	d7, [r3]
 8004c66:	ee36 7b07 	vadd.f64	d7, d6, d7
 8004c6a:	ed97 6b06 	vldr	d6, [r7, #24]
 8004c6e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8004c72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c76:	d87d      	bhi.n	8004d74 <get_Straj+0x7d8>
        //printf("tramo4\n");
        q = qi+(vlim+vi)*Ta/2+vlim*(t-Ta);
 8004c78:	4b33      	ldr	r3, [pc, #204]	; (8004d48 <get_Straj+0x7ac>)
 8004c7a:	ed93 6b00 	vldr	d6, [r3]
 8004c7e:	4b33      	ldr	r3, [pc, #204]	; (8004d4c <get_Straj+0x7b0>)
 8004c80:	ed93 7b00 	vldr	d7, [r3]
 8004c84:	ee36 6b07 	vadd.f64	d6, d6, d7
 8004c88:	4b2d      	ldr	r3, [pc, #180]	; (8004d40 <get_Straj+0x7a4>)
 8004c8a:	ed93 7b00 	vldr	d7, [r3]
 8004c8e:	ee26 7b07 	vmul.f64	d7, d6, d7
 8004c92:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8004c96:	ee87 6b05 	vdiv.f64	d6, d7, d5
 8004c9a:	4b2d      	ldr	r3, [pc, #180]	; (8004d50 <get_Straj+0x7b4>)
 8004c9c:	ed93 7b00 	vldr	d7, [r3]
 8004ca0:	ee36 6b07 	vadd.f64	d6, d6, d7
 8004ca4:	4b26      	ldr	r3, [pc, #152]	; (8004d40 <get_Straj+0x7a4>)
 8004ca6:	ed93 7b00 	vldr	d7, [r3]
 8004caa:	ed97 5b06 	vldr	d5, [r7, #24]
 8004cae:	ee35 5b47 	vsub.f64	d5, d5, d7
 8004cb2:	4b25      	ldr	r3, [pc, #148]	; (8004d48 <get_Straj+0x7ac>)
 8004cb4:	ed93 7b00 	vldr	d7, [r3]
 8004cb8:	ee25 7b07 	vmul.f64	d7, d5, d7
 8004cbc:	ee36 7b07 	vadd.f64	d7, d6, d7
 8004cc0:	4b25      	ldr	r3, [pc, #148]	; (8004d58 <get_Straj+0x7bc>)
 8004cc2:	ed83 7b00 	vstr	d7, [r3]
        qd = vmax;
 8004cc6:	4b25      	ldr	r3, [pc, #148]	; (8004d5c <get_Straj+0x7c0>)
 8004cc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ccc:	4924      	ldr	r1, [pc, #144]	; (8004d60 <get_Straj+0x7c4>)
 8004cce:	e9c1 2300 	strd	r2, r3, [r1]
        qdd = 0;
 8004cd2:	4924      	ldr	r1, [pc, #144]	; (8004d64 <get_Straj+0x7c8>)
 8004cd4:	f04f 0200 	mov.w	r2, #0
 8004cd8:	f04f 0300 	mov.w	r3, #0
 8004cdc:	e9c1 2300 	strd	r2, r3, [r1]
        qddd = 0;
 8004ce0:	4921      	ldr	r1, [pc, #132]	; (8004d68 <get_Straj+0x7cc>)
 8004ce2:	f04f 0200 	mov.w	r2, #0
 8004ce6:	f04f 0300 	mov.w	r3, #0
 8004cea:	e9c1 2300 	strd	r2, r3, [r1]
        if (flagInv){
 8004cee:	4b1f      	ldr	r3, [pc, #124]	; (8004d6c <get_Straj+0x7d0>)
 8004cf0:	781b      	ldrb	r3, [r3, #0]
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	f000 82eb 	beq.w	80052ce <get_Straj+0xd32>
            q=-q; qd=-qd; qdd=-qdd; qddd=-qddd;
 8004cf8:	4b17      	ldr	r3, [pc, #92]	; (8004d58 <get_Straj+0x7bc>)
 8004cfa:	ed93 7b00 	vldr	d7, [r3]
 8004cfe:	eeb1 7b47 	vneg.f64	d7, d7
 8004d02:	4b15      	ldr	r3, [pc, #84]	; (8004d58 <get_Straj+0x7bc>)
 8004d04:	ed83 7b00 	vstr	d7, [r3]
 8004d08:	4b15      	ldr	r3, [pc, #84]	; (8004d60 <get_Straj+0x7c4>)
 8004d0a:	ed93 7b00 	vldr	d7, [r3]
 8004d0e:	eeb1 7b47 	vneg.f64	d7, d7
 8004d12:	4b13      	ldr	r3, [pc, #76]	; (8004d60 <get_Straj+0x7c4>)
 8004d14:	ed83 7b00 	vstr	d7, [r3]
 8004d18:	4b12      	ldr	r3, [pc, #72]	; (8004d64 <get_Straj+0x7c8>)
 8004d1a:	ed93 7b00 	vldr	d7, [r3]
 8004d1e:	eeb1 7b47 	vneg.f64	d7, d7
 8004d22:	4b10      	ldr	r3, [pc, #64]	; (8004d64 <get_Straj+0x7c8>)
 8004d24:	ed83 7b00 	vstr	d7, [r3]
 8004d28:	4b0f      	ldr	r3, [pc, #60]	; (8004d68 <get_Straj+0x7cc>)
 8004d2a:	ed93 7b00 	vldr	d7, [r3]
 8004d2e:	eeb1 7b47 	vneg.f64	d7, d7
 8004d32:	4b0d      	ldr	r3, [pc, #52]	; (8004d68 <get_Straj+0x7cc>)
 8004d34:	ed83 7b00 	vstr	d7, [r3]
            flagInv = false;
 8004d38:	4b0c      	ldr	r3, [pc, #48]	; (8004d6c <get_Straj+0x7d0>)
 8004d3a:	2200      	movs	r2, #0
 8004d3c:	701a      	strb	r2, [r3, #0]
        if (flagInv){
 8004d3e:	e2c6      	b.n	80052ce <get_Straj+0xd32>
 8004d40:	24000868 	.word	0x24000868
 8004d44:	24000880 	.word	0x24000880
 8004d48:	24000858 	.word	0x24000858
 8004d4c:	24000018 	.word	0x24000018
 8004d50:	240008a0 	.word	0x240008a0
 8004d54:	24000478 	.word	0x24000478
 8004d58:	24000458 	.word	0x24000458
 8004d5c:	24000010 	.word	0x24000010
 8004d60:	24000460 	.word	0x24000460
 8004d64:	24000468 	.word	0x24000468
 8004d68:	24000470 	.word	0x24000470
 8004d6c:	24000840 	.word	0x24000840
 8004d70:	24000878 	.word	0x24000878
        }
    }
    /*-------------Dese phase ----------------*/

    else if (t>=T-Td && t<=T-Td+Tj2){
 8004d74:	4b6c      	ldr	r3, [pc, #432]	; (8004f28 <get_Straj+0x98c>)
 8004d76:	ed93 6b00 	vldr	d6, [r3]
 8004d7a:	4b6c      	ldr	r3, [pc, #432]	; (8004f2c <get_Straj+0x990>)
 8004d7c:	ed93 7b00 	vldr	d7, [r3]
 8004d80:	ee36 7b47 	vsub.f64	d7, d6, d7
 8004d84:	ed97 6b06 	vldr	d6, [r7, #24]
 8004d88:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8004d8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004d90:	f2c0 80e4 	blt.w	8004f5c <get_Straj+0x9c0>
 8004d94:	4b64      	ldr	r3, [pc, #400]	; (8004f28 <get_Straj+0x98c>)
 8004d96:	ed93 6b00 	vldr	d6, [r3]
 8004d9a:	4b64      	ldr	r3, [pc, #400]	; (8004f2c <get_Straj+0x990>)
 8004d9c:	ed93 7b00 	vldr	d7, [r3]
 8004da0:	ee36 6b47 	vsub.f64	d6, d6, d7
 8004da4:	4b62      	ldr	r3, [pc, #392]	; (8004f30 <get_Straj+0x994>)
 8004da6:	ed93 7b00 	vldr	d7, [r3]
 8004daa:	ee36 7b07 	vadd.f64	d7, d6, d7
 8004dae:	ed97 6b06 	vldr	d6, [r7, #24]
 8004db2:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8004db6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004dba:	f200 80cf 	bhi.w	8004f5c <get_Straj+0x9c0>
        //printf("tramo5\n");
        q=qf-(vlim+vf)*Td/2+vlim*(t-T+Td)-jmax*(pow(t-T+Td,3)/6);
 8004dbe:	4b5d      	ldr	r3, [pc, #372]	; (8004f34 <get_Straj+0x998>)
 8004dc0:	ed93 6b00 	vldr	d6, [r3]
 8004dc4:	4b5c      	ldr	r3, [pc, #368]	; (8004f38 <get_Straj+0x99c>)
 8004dc6:	ed93 5b00 	vldr	d5, [r3]
 8004dca:	4b5c      	ldr	r3, [pc, #368]	; (8004f3c <get_Straj+0x9a0>)
 8004dcc:	ed93 7b00 	vldr	d7, [r3]
 8004dd0:	ee35 5b07 	vadd.f64	d5, d5, d7
 8004dd4:	4b55      	ldr	r3, [pc, #340]	; (8004f2c <get_Straj+0x990>)
 8004dd6:	ed93 7b00 	vldr	d7, [r3]
 8004dda:	ee25 5b07 	vmul.f64	d5, d5, d7
 8004dde:	eeb0 4b00 	vmov.f64	d4, #0	; 0x40000000  2.0
 8004de2:	ee85 7b04 	vdiv.f64	d7, d5, d4
 8004de6:	ee36 6b47 	vsub.f64	d6, d6, d7
 8004dea:	4b4f      	ldr	r3, [pc, #316]	; (8004f28 <get_Straj+0x98c>)
 8004dec:	ed93 7b00 	vldr	d7, [r3]
 8004df0:	ed97 5b06 	vldr	d5, [r7, #24]
 8004df4:	ee35 5b47 	vsub.f64	d5, d5, d7
 8004df8:	4b4c      	ldr	r3, [pc, #304]	; (8004f2c <get_Straj+0x990>)
 8004dfa:	ed93 7b00 	vldr	d7, [r3]
 8004dfe:	ee35 5b07 	vadd.f64	d5, d5, d7
 8004e02:	4b4d      	ldr	r3, [pc, #308]	; (8004f38 <get_Straj+0x99c>)
 8004e04:	ed93 7b00 	vldr	d7, [r3]
 8004e08:	ee25 7b07 	vmul.f64	d7, d5, d7
 8004e0c:	ee36 8b07 	vadd.f64	d8, d6, d7
 8004e10:	4b45      	ldr	r3, [pc, #276]	; (8004f28 <get_Straj+0x98c>)
 8004e12:	ed93 7b00 	vldr	d7, [r3]
 8004e16:	ed97 6b06 	vldr	d6, [r7, #24]
 8004e1a:	ee36 6b47 	vsub.f64	d6, d6, d7
 8004e1e:	4b43      	ldr	r3, [pc, #268]	; (8004f2c <get_Straj+0x990>)
 8004e20:	ed93 7b00 	vldr	d7, [r3]
 8004e24:	ee36 7b07 	vadd.f64	d7, d6, d7
 8004e28:	eeb0 1b08 	vmov.f64	d1, #8	; 0x40400000  3.0
 8004e2c:	eeb0 0b47 	vmov.f64	d0, d7
 8004e30:	f00c f9b6 	bl	80111a0 <pow>
 8004e34:	eeb0 7b40 	vmov.f64	d7, d0
 8004e38:	eeb1 5b08 	vmov.f64	d5, #24	; 0x40c00000  6.0
 8004e3c:	ee87 6b05 	vdiv.f64	d6, d7, d5
 8004e40:	4b3f      	ldr	r3, [pc, #252]	; (8004f40 <get_Straj+0x9a4>)
 8004e42:	ed93 7b00 	vldr	d7, [r3]
 8004e46:	ee26 7b07 	vmul.f64	d7, d6, d7
 8004e4a:	ee38 7b47 	vsub.f64	d7, d8, d7
 8004e4e:	4b3d      	ldr	r3, [pc, #244]	; (8004f44 <get_Straj+0x9a8>)
 8004e50:	ed83 7b00 	vstr	d7, [r3]
        qd=vlim-jmax*(pow(t-T+Td,2)/2);
 8004e54:	4b38      	ldr	r3, [pc, #224]	; (8004f38 <get_Straj+0x99c>)
 8004e56:	ed93 8b00 	vldr	d8, [r3]
 8004e5a:	4b33      	ldr	r3, [pc, #204]	; (8004f28 <get_Straj+0x98c>)
 8004e5c:	ed93 7b00 	vldr	d7, [r3]
 8004e60:	ed97 6b06 	vldr	d6, [r7, #24]
 8004e64:	ee36 6b47 	vsub.f64	d6, d6, d7
 8004e68:	4b30      	ldr	r3, [pc, #192]	; (8004f2c <get_Straj+0x990>)
 8004e6a:	ed93 7b00 	vldr	d7, [r3]
 8004e6e:	ee36 7b07 	vadd.f64	d7, d6, d7
 8004e72:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8004e76:	eeb0 0b47 	vmov.f64	d0, d7
 8004e7a:	f00c f991 	bl	80111a0 <pow>
 8004e7e:	eeb0 7b40 	vmov.f64	d7, d0
 8004e82:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8004e86:	ee87 6b05 	vdiv.f64	d6, d7, d5
 8004e8a:	4b2d      	ldr	r3, [pc, #180]	; (8004f40 <get_Straj+0x9a4>)
 8004e8c:	ed93 7b00 	vldr	d7, [r3]
 8004e90:	ee26 7b07 	vmul.f64	d7, d6, d7
 8004e94:	ee38 7b47 	vsub.f64	d7, d8, d7
 8004e98:	4b2b      	ldr	r3, [pc, #172]	; (8004f48 <get_Straj+0x9ac>)
 8004e9a:	ed83 7b00 	vstr	d7, [r3]
        qdd=-jmax*(t-T+Td);
 8004e9e:	4b28      	ldr	r3, [pc, #160]	; (8004f40 <get_Straj+0x9a4>)
 8004ea0:	ed93 7b00 	vldr	d7, [r3]
 8004ea4:	eeb1 6b47 	vneg.f64	d6, d7
 8004ea8:	4b1f      	ldr	r3, [pc, #124]	; (8004f28 <get_Straj+0x98c>)
 8004eaa:	ed93 7b00 	vldr	d7, [r3]
 8004eae:	ed97 5b06 	vldr	d5, [r7, #24]
 8004eb2:	ee35 5b47 	vsub.f64	d5, d5, d7
 8004eb6:	4b1d      	ldr	r3, [pc, #116]	; (8004f2c <get_Straj+0x990>)
 8004eb8:	ed93 7b00 	vldr	d7, [r3]
 8004ebc:	ee35 7b07 	vadd.f64	d7, d5, d7
 8004ec0:	ee26 7b07 	vmul.f64	d7, d6, d7
 8004ec4:	4b21      	ldr	r3, [pc, #132]	; (8004f4c <get_Straj+0x9b0>)
 8004ec6:	ed83 7b00 	vstr	d7, [r3]
        qddd=jmin;
 8004eca:	4b21      	ldr	r3, [pc, #132]	; (8004f50 <get_Straj+0x9b4>)
 8004ecc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ed0:	4920      	ldr	r1, [pc, #128]	; (8004f54 <get_Straj+0x9b8>)
 8004ed2:	e9c1 2300 	strd	r2, r3, [r1]
        if (flagInv){
 8004ed6:	4b20      	ldr	r3, [pc, #128]	; (8004f58 <get_Straj+0x9bc>)
 8004ed8:	781b      	ldrb	r3, [r3, #0]
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	f000 81f7 	beq.w	80052ce <get_Straj+0xd32>
            q=-q; qd=-qd; qdd=-qdd; qddd=-qddd;
 8004ee0:	4b18      	ldr	r3, [pc, #96]	; (8004f44 <get_Straj+0x9a8>)
 8004ee2:	ed93 7b00 	vldr	d7, [r3]
 8004ee6:	eeb1 7b47 	vneg.f64	d7, d7
 8004eea:	4b16      	ldr	r3, [pc, #88]	; (8004f44 <get_Straj+0x9a8>)
 8004eec:	ed83 7b00 	vstr	d7, [r3]
 8004ef0:	4b15      	ldr	r3, [pc, #84]	; (8004f48 <get_Straj+0x9ac>)
 8004ef2:	ed93 7b00 	vldr	d7, [r3]
 8004ef6:	eeb1 7b47 	vneg.f64	d7, d7
 8004efa:	4b13      	ldr	r3, [pc, #76]	; (8004f48 <get_Straj+0x9ac>)
 8004efc:	ed83 7b00 	vstr	d7, [r3]
 8004f00:	4b12      	ldr	r3, [pc, #72]	; (8004f4c <get_Straj+0x9b0>)
 8004f02:	ed93 7b00 	vldr	d7, [r3]
 8004f06:	eeb1 7b47 	vneg.f64	d7, d7
 8004f0a:	4b10      	ldr	r3, [pc, #64]	; (8004f4c <get_Straj+0x9b0>)
 8004f0c:	ed83 7b00 	vstr	d7, [r3]
 8004f10:	4b10      	ldr	r3, [pc, #64]	; (8004f54 <get_Straj+0x9b8>)
 8004f12:	ed93 7b00 	vldr	d7, [r3]
 8004f16:	eeb1 7b47 	vneg.f64	d7, d7
 8004f1a:	4b0e      	ldr	r3, [pc, #56]	; (8004f54 <get_Straj+0x9b8>)
 8004f1c:	ed83 7b00 	vstr	d7, [r3]
            flagInv = false;
 8004f20:	4b0d      	ldr	r3, [pc, #52]	; (8004f58 <get_Straj+0x9bc>)
 8004f22:	2200      	movs	r2, #0
 8004f24:	701a      	strb	r2, [r3, #0]
        if (flagInv){
 8004f26:	e1d2      	b.n	80052ce <get_Straj+0xd32>
 8004f28:	24000860 	.word	0x24000860
 8004f2c:	24000870 	.word	0x24000870
 8004f30:	24000888 	.word	0x24000888
 8004f34:	240008a8 	.word	0x240008a8
 8004f38:	24000858 	.word	0x24000858
 8004f3c:	24000488 	.word	0x24000488
 8004f40:	24000008 	.word	0x24000008
 8004f44:	24000458 	.word	0x24000458
 8004f48:	24000460 	.word	0x24000460
 8004f4c:	24000468 	.word	0x24000468
 8004f50:	24000478 	.word	0x24000478
 8004f54:	24000470 	.word	0x24000470
 8004f58:	24000840 	.word	0x24000840
        }
    } else if (t>T-Td+Tj2 && t<=T-Tj2){
 8004f5c:	4b7b      	ldr	r3, [pc, #492]	; (800514c <get_Straj+0xbb0>)
 8004f5e:	ed93 6b00 	vldr	d6, [r3]
 8004f62:	4b7b      	ldr	r3, [pc, #492]	; (8005150 <get_Straj+0xbb4>)
 8004f64:	ed93 7b00 	vldr	d7, [r3]
 8004f68:	ee36 6b47 	vsub.f64	d6, d6, d7
 8004f6c:	4b79      	ldr	r3, [pc, #484]	; (8005154 <get_Straj+0xbb8>)
 8004f6e:	ed93 7b00 	vldr	d7, [r3]
 8004f72:	ee36 7b07 	vadd.f64	d7, d6, d7
 8004f76:	ed97 6b06 	vldr	d6, [r7, #24]
 8004f7a:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8004f7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f82:	f340 80fd 	ble.w	8005180 <get_Straj+0xbe4>
 8004f86:	4b71      	ldr	r3, [pc, #452]	; (800514c <get_Straj+0xbb0>)
 8004f88:	ed93 6b00 	vldr	d6, [r3]
 8004f8c:	4b71      	ldr	r3, [pc, #452]	; (8005154 <get_Straj+0xbb8>)
 8004f8e:	ed93 7b00 	vldr	d7, [r3]
 8004f92:	ee36 7b47 	vsub.f64	d7, d6, d7
 8004f96:	ed97 6b06 	vldr	d6, [r7, #24]
 8004f9a:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8004f9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004fa2:	f200 80ed 	bhi.w	8005180 <get_Straj+0xbe4>
        //printf("tramo6\n");
        q=qf-(vlim+vf)*Td/2+vlim*(t-T+Td)+(alimd/6)*(3*pow(t-T+Td,2)-3*Tj2*(t-T+Td)+pow(Tj2,2));
 8004fa6:	4b6c      	ldr	r3, [pc, #432]	; (8005158 <get_Straj+0xbbc>)
 8004fa8:	ed93 6b00 	vldr	d6, [r3]
 8004fac:	4b6b      	ldr	r3, [pc, #428]	; (800515c <get_Straj+0xbc0>)
 8004fae:	ed93 5b00 	vldr	d5, [r3]
 8004fb2:	4b6b      	ldr	r3, [pc, #428]	; (8005160 <get_Straj+0xbc4>)
 8004fb4:	ed93 7b00 	vldr	d7, [r3]
 8004fb8:	ee35 5b07 	vadd.f64	d5, d5, d7
 8004fbc:	4b64      	ldr	r3, [pc, #400]	; (8005150 <get_Straj+0xbb4>)
 8004fbe:	ed93 7b00 	vldr	d7, [r3]
 8004fc2:	ee25 5b07 	vmul.f64	d5, d5, d7
 8004fc6:	eeb0 4b00 	vmov.f64	d4, #0	; 0x40000000  2.0
 8004fca:	ee85 7b04 	vdiv.f64	d7, d5, d4
 8004fce:	ee36 6b47 	vsub.f64	d6, d6, d7
 8004fd2:	4b5e      	ldr	r3, [pc, #376]	; (800514c <get_Straj+0xbb0>)
 8004fd4:	ed93 7b00 	vldr	d7, [r3]
 8004fd8:	ed97 5b06 	vldr	d5, [r7, #24]
 8004fdc:	ee35 5b47 	vsub.f64	d5, d5, d7
 8004fe0:	4b5b      	ldr	r3, [pc, #364]	; (8005150 <get_Straj+0xbb4>)
 8004fe2:	ed93 7b00 	vldr	d7, [r3]
 8004fe6:	ee35 5b07 	vadd.f64	d5, d5, d7
 8004fea:	4b5c      	ldr	r3, [pc, #368]	; (800515c <get_Straj+0xbc0>)
 8004fec:	ed93 7b00 	vldr	d7, [r3]
 8004ff0:	ee25 7b07 	vmul.f64	d7, d5, d7
 8004ff4:	ee36 8b07 	vadd.f64	d8, d6, d7
 8004ff8:	4b5a      	ldr	r3, [pc, #360]	; (8005164 <get_Straj+0xbc8>)
 8004ffa:	ed93 7b00 	vldr	d7, [r3]
 8004ffe:	eeb1 6b08 	vmov.f64	d6, #24	; 0x40c00000  6.0
 8005002:	ee87 9b06 	vdiv.f64	d9, d7, d6
 8005006:	4b51      	ldr	r3, [pc, #324]	; (800514c <get_Straj+0xbb0>)
 8005008:	ed93 7b00 	vldr	d7, [r3]
 800500c:	ed97 6b06 	vldr	d6, [r7, #24]
 8005010:	ee36 6b47 	vsub.f64	d6, d6, d7
 8005014:	4b4e      	ldr	r3, [pc, #312]	; (8005150 <get_Straj+0xbb4>)
 8005016:	ed93 7b00 	vldr	d7, [r3]
 800501a:	ee36 7b07 	vadd.f64	d7, d6, d7
 800501e:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8005022:	eeb0 0b47 	vmov.f64	d0, d7
 8005026:	f00c f8bb 	bl	80111a0 <pow>
 800502a:	eeb0 7b40 	vmov.f64	d7, d0
 800502e:	eeb0 6b08 	vmov.f64	d6, #8	; 0x40400000  3.0
 8005032:	ee27 6b06 	vmul.f64	d6, d7, d6
 8005036:	4b47      	ldr	r3, [pc, #284]	; (8005154 <get_Straj+0xbb8>)
 8005038:	ed93 7b00 	vldr	d7, [r3]
 800503c:	eeb0 5b08 	vmov.f64	d5, #8	; 0x40400000  3.0
 8005040:	ee27 5b05 	vmul.f64	d5, d7, d5
 8005044:	4b41      	ldr	r3, [pc, #260]	; (800514c <get_Straj+0xbb0>)
 8005046:	ed93 7b00 	vldr	d7, [r3]
 800504a:	ed97 4b06 	vldr	d4, [r7, #24]
 800504e:	ee34 4b47 	vsub.f64	d4, d4, d7
 8005052:	4b3f      	ldr	r3, [pc, #252]	; (8005150 <get_Straj+0xbb4>)
 8005054:	ed93 7b00 	vldr	d7, [r3]
 8005058:	ee34 7b07 	vadd.f64	d7, d4, d7
 800505c:	ee25 7b07 	vmul.f64	d7, d5, d7
 8005060:	ee36 ab47 	vsub.f64	d10, d6, d7
 8005064:	4b3b      	ldr	r3, [pc, #236]	; (8005154 <get_Straj+0xbb8>)
 8005066:	ed93 7b00 	vldr	d7, [r3]
 800506a:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 800506e:	eeb0 0b47 	vmov.f64	d0, d7
 8005072:	f00c f895 	bl	80111a0 <pow>
 8005076:	eeb0 7b40 	vmov.f64	d7, d0
 800507a:	ee3a 7b07 	vadd.f64	d7, d10, d7
 800507e:	ee29 7b07 	vmul.f64	d7, d9, d7
 8005082:	ee38 7b07 	vadd.f64	d7, d8, d7
 8005086:	4b38      	ldr	r3, [pc, #224]	; (8005168 <get_Straj+0xbcc>)
 8005088:	ed83 7b00 	vstr	d7, [r3]
        qd=vlim+alimd*(t-T+Td-Tj2/2);
 800508c:	4b2f      	ldr	r3, [pc, #188]	; (800514c <get_Straj+0xbb0>)
 800508e:	ed93 7b00 	vldr	d7, [r3]
 8005092:	ed97 6b06 	vldr	d6, [r7, #24]
 8005096:	ee36 6b47 	vsub.f64	d6, d6, d7
 800509a:	4b2d      	ldr	r3, [pc, #180]	; (8005150 <get_Straj+0xbb4>)
 800509c:	ed93 7b00 	vldr	d7, [r3]
 80050a0:	ee36 6b07 	vadd.f64	d6, d6, d7
 80050a4:	4b2b      	ldr	r3, [pc, #172]	; (8005154 <get_Straj+0xbb8>)
 80050a6:	ed93 5b00 	vldr	d5, [r3]
 80050aa:	eeb0 4b00 	vmov.f64	d4, #0	; 0x40000000  2.0
 80050ae:	ee85 7b04 	vdiv.f64	d7, d5, d4
 80050b2:	ee36 6b47 	vsub.f64	d6, d6, d7
 80050b6:	4b2b      	ldr	r3, [pc, #172]	; (8005164 <get_Straj+0xbc8>)
 80050b8:	ed93 7b00 	vldr	d7, [r3]
 80050bc:	ee26 6b07 	vmul.f64	d6, d6, d7
 80050c0:	4b26      	ldr	r3, [pc, #152]	; (800515c <get_Straj+0xbc0>)
 80050c2:	ed93 7b00 	vldr	d7, [r3]
 80050c6:	ee36 7b07 	vadd.f64	d7, d6, d7
 80050ca:	4b28      	ldr	r3, [pc, #160]	; (800516c <get_Straj+0xbd0>)
 80050cc:	ed83 7b00 	vstr	d7, [r3]
        qdd = -jmax*Tj2;
 80050d0:	4b27      	ldr	r3, [pc, #156]	; (8005170 <get_Straj+0xbd4>)
 80050d2:	ed93 7b00 	vldr	d7, [r3]
 80050d6:	eeb1 6b47 	vneg.f64	d6, d7
 80050da:	4b1e      	ldr	r3, [pc, #120]	; (8005154 <get_Straj+0xbb8>)
 80050dc:	ed93 7b00 	vldr	d7, [r3]
 80050e0:	ee26 7b07 	vmul.f64	d7, d6, d7
 80050e4:	4b23      	ldr	r3, [pc, #140]	; (8005174 <get_Straj+0xbd8>)
 80050e6:	ed83 7b00 	vstr	d7, [r3]
        qddd = 0;
 80050ea:	4923      	ldr	r1, [pc, #140]	; (8005178 <get_Straj+0xbdc>)
 80050ec:	f04f 0200 	mov.w	r2, #0
 80050f0:	f04f 0300 	mov.w	r3, #0
 80050f4:	e9c1 2300 	strd	r2, r3, [r1]
        if (flagInv){
 80050f8:	4b20      	ldr	r3, [pc, #128]	; (800517c <get_Straj+0xbe0>)
 80050fa:	781b      	ldrb	r3, [r3, #0]
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	f000 80e6 	beq.w	80052ce <get_Straj+0xd32>
            q=-q; qd=-qd; qdd=-qdd; qddd=-qddd;
 8005102:	4b19      	ldr	r3, [pc, #100]	; (8005168 <get_Straj+0xbcc>)
 8005104:	ed93 7b00 	vldr	d7, [r3]
 8005108:	eeb1 7b47 	vneg.f64	d7, d7
 800510c:	4b16      	ldr	r3, [pc, #88]	; (8005168 <get_Straj+0xbcc>)
 800510e:	ed83 7b00 	vstr	d7, [r3]
 8005112:	4b16      	ldr	r3, [pc, #88]	; (800516c <get_Straj+0xbd0>)
 8005114:	ed93 7b00 	vldr	d7, [r3]
 8005118:	eeb1 7b47 	vneg.f64	d7, d7
 800511c:	4b13      	ldr	r3, [pc, #76]	; (800516c <get_Straj+0xbd0>)
 800511e:	ed83 7b00 	vstr	d7, [r3]
 8005122:	4b14      	ldr	r3, [pc, #80]	; (8005174 <get_Straj+0xbd8>)
 8005124:	ed93 7b00 	vldr	d7, [r3]
 8005128:	eeb1 7b47 	vneg.f64	d7, d7
 800512c:	4b11      	ldr	r3, [pc, #68]	; (8005174 <get_Straj+0xbd8>)
 800512e:	ed83 7b00 	vstr	d7, [r3]
 8005132:	4b11      	ldr	r3, [pc, #68]	; (8005178 <get_Straj+0xbdc>)
 8005134:	ed93 7b00 	vldr	d7, [r3]
 8005138:	eeb1 7b47 	vneg.f64	d7, d7
 800513c:	4b0e      	ldr	r3, [pc, #56]	; (8005178 <get_Straj+0xbdc>)
 800513e:	ed83 7b00 	vstr	d7, [r3]
            flagInv = false;
 8005142:	4b0e      	ldr	r3, [pc, #56]	; (800517c <get_Straj+0xbe0>)
 8005144:	2200      	movs	r2, #0
 8005146:	701a      	strb	r2, [r3, #0]
        if (flagInv){
 8005148:	e0c1      	b.n	80052ce <get_Straj+0xd32>
 800514a:	bf00      	nop
 800514c:	24000860 	.word	0x24000860
 8005150:	24000870 	.word	0x24000870
 8005154:	24000888 	.word	0x24000888
 8005158:	240008a8 	.word	0x240008a8
 800515c:	24000858 	.word	0x24000858
 8005160:	24000488 	.word	0x24000488
 8005164:	24000850 	.word	0x24000850
 8005168:	24000458 	.word	0x24000458
 800516c:	24000460 	.word	0x24000460
 8005170:	24000008 	.word	0x24000008
 8005174:	24000468 	.word	0x24000468
 8005178:	24000470 	.word	0x24000470
 800517c:	24000840 	.word	0x24000840
        }

    } else if (t>T-Tj2 && t<=T){
 8005180:	4b59      	ldr	r3, [pc, #356]	; (80052e8 <get_Straj+0xd4c>)
 8005182:	ed93 6b00 	vldr	d6, [r3]
 8005186:	4b59      	ldr	r3, [pc, #356]	; (80052ec <get_Straj+0xd50>)
 8005188:	ed93 7b00 	vldr	d7, [r3]
 800518c:	ee36 7b47 	vsub.f64	d7, d6, d7
 8005190:	ed97 6b06 	vldr	d6, [r7, #24]
 8005194:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8005198:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800519c:	f340 8097 	ble.w	80052ce <get_Straj+0xd32>
 80051a0:	4b51      	ldr	r3, [pc, #324]	; (80052e8 <get_Straj+0xd4c>)
 80051a2:	ed93 7b00 	vldr	d7, [r3]
 80051a6:	ed97 6b06 	vldr	d6, [r7, #24]
 80051aa:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80051ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80051b2:	f200 808c 	bhi.w	80052ce <get_Straj+0xd32>
        //printf("tramo7\n");
        q = qf-vf*(T-t)-jmax*(pow(T-t,3)/6);
 80051b6:	4b4e      	ldr	r3, [pc, #312]	; (80052f0 <get_Straj+0xd54>)
 80051b8:	ed93 6b00 	vldr	d6, [r3]
 80051bc:	4b4a      	ldr	r3, [pc, #296]	; (80052e8 <get_Straj+0xd4c>)
 80051be:	ed93 5b00 	vldr	d5, [r3]
 80051c2:	ed97 7b06 	vldr	d7, [r7, #24]
 80051c6:	ee35 5b47 	vsub.f64	d5, d5, d7
 80051ca:	4b4a      	ldr	r3, [pc, #296]	; (80052f4 <get_Straj+0xd58>)
 80051cc:	ed93 7b00 	vldr	d7, [r3]
 80051d0:	ee25 7b07 	vmul.f64	d7, d5, d7
 80051d4:	ee36 8b47 	vsub.f64	d8, d6, d7
 80051d8:	4b43      	ldr	r3, [pc, #268]	; (80052e8 <get_Straj+0xd4c>)
 80051da:	ed93 6b00 	vldr	d6, [r3]
 80051de:	ed97 7b06 	vldr	d7, [r7, #24]
 80051e2:	ee36 7b47 	vsub.f64	d7, d6, d7
 80051e6:	eeb0 1b08 	vmov.f64	d1, #8	; 0x40400000  3.0
 80051ea:	eeb0 0b47 	vmov.f64	d0, d7
 80051ee:	f00b ffd7 	bl	80111a0 <pow>
 80051f2:	eeb0 7b40 	vmov.f64	d7, d0
 80051f6:	eeb1 5b08 	vmov.f64	d5, #24	; 0x40c00000  6.0
 80051fa:	ee87 6b05 	vdiv.f64	d6, d7, d5
 80051fe:	4b3e      	ldr	r3, [pc, #248]	; (80052f8 <get_Straj+0xd5c>)
 8005200:	ed93 7b00 	vldr	d7, [r3]
 8005204:	ee26 7b07 	vmul.f64	d7, d6, d7
 8005208:	ee38 7b47 	vsub.f64	d7, d8, d7
 800520c:	4b3b      	ldr	r3, [pc, #236]	; (80052fc <get_Straj+0xd60>)
 800520e:	ed83 7b00 	vstr	d7, [r3]
        qd = vf+jmax*(pow(T-t,2))/2;
 8005212:	4b35      	ldr	r3, [pc, #212]	; (80052e8 <get_Straj+0xd4c>)
 8005214:	ed93 6b00 	vldr	d6, [r3]
 8005218:	ed97 7b06 	vldr	d7, [r7, #24]
 800521c:	ee36 7b47 	vsub.f64	d7, d6, d7
 8005220:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8005224:	eeb0 0b47 	vmov.f64	d0, d7
 8005228:	f00b ffba 	bl	80111a0 <pow>
 800522c:	eeb0 6b40 	vmov.f64	d6, d0
 8005230:	4b31      	ldr	r3, [pc, #196]	; (80052f8 <get_Straj+0xd5c>)
 8005232:	ed93 7b00 	vldr	d7, [r3]
 8005236:	ee26 7b07 	vmul.f64	d7, d6, d7
 800523a:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800523e:	ee87 6b05 	vdiv.f64	d6, d7, d5
 8005242:	4b2c      	ldr	r3, [pc, #176]	; (80052f4 <get_Straj+0xd58>)
 8005244:	ed93 7b00 	vldr	d7, [r3]
 8005248:	ee36 7b07 	vadd.f64	d7, d6, d7
 800524c:	4b2c      	ldr	r3, [pc, #176]	; (8005300 <get_Straj+0xd64>)
 800524e:	ed83 7b00 	vstr	d7, [r3]
        qdd = -jmax*(T-t);
 8005252:	4b29      	ldr	r3, [pc, #164]	; (80052f8 <get_Straj+0xd5c>)
 8005254:	ed93 7b00 	vldr	d7, [r3]
 8005258:	eeb1 6b47 	vneg.f64	d6, d7
 800525c:	4b22      	ldr	r3, [pc, #136]	; (80052e8 <get_Straj+0xd4c>)
 800525e:	ed93 5b00 	vldr	d5, [r3]
 8005262:	ed97 7b06 	vldr	d7, [r7, #24]
 8005266:	ee35 7b47 	vsub.f64	d7, d5, d7
 800526a:	ee26 7b07 	vmul.f64	d7, d6, d7
 800526e:	4b25      	ldr	r3, [pc, #148]	; (8005304 <get_Straj+0xd68>)
 8005270:	ed83 7b00 	vstr	d7, [r3]
        qddd = jmax;
 8005274:	4b20      	ldr	r3, [pc, #128]	; (80052f8 <get_Straj+0xd5c>)
 8005276:	e9d3 2300 	ldrd	r2, r3, [r3]
 800527a:	4923      	ldr	r1, [pc, #140]	; (8005308 <get_Straj+0xd6c>)
 800527c:	e9c1 2300 	strd	r2, r3, [r1]
        if (flagInv){
 8005280:	4b22      	ldr	r3, [pc, #136]	; (800530c <get_Straj+0xd70>)
 8005282:	781b      	ldrb	r3, [r3, #0]
 8005284:	2b00      	cmp	r3, #0
 8005286:	d022      	beq.n	80052ce <get_Straj+0xd32>
            //printf("inv tramo7\n");
            q=-q; qd=-qd; qdd=-qdd; qddd=-qddd;
 8005288:	4b1c      	ldr	r3, [pc, #112]	; (80052fc <get_Straj+0xd60>)
 800528a:	ed93 7b00 	vldr	d7, [r3]
 800528e:	eeb1 7b47 	vneg.f64	d7, d7
 8005292:	4b1a      	ldr	r3, [pc, #104]	; (80052fc <get_Straj+0xd60>)
 8005294:	ed83 7b00 	vstr	d7, [r3]
 8005298:	4b19      	ldr	r3, [pc, #100]	; (8005300 <get_Straj+0xd64>)
 800529a:	ed93 7b00 	vldr	d7, [r3]
 800529e:	eeb1 7b47 	vneg.f64	d7, d7
 80052a2:	4b17      	ldr	r3, [pc, #92]	; (8005300 <get_Straj+0xd64>)
 80052a4:	ed83 7b00 	vstr	d7, [r3]
 80052a8:	4b16      	ldr	r3, [pc, #88]	; (8005304 <get_Straj+0xd68>)
 80052aa:	ed93 7b00 	vldr	d7, [r3]
 80052ae:	eeb1 7b47 	vneg.f64	d7, d7
 80052b2:	4b14      	ldr	r3, [pc, #80]	; (8005304 <get_Straj+0xd68>)
 80052b4:	ed83 7b00 	vstr	d7, [r3]
 80052b8:	4b13      	ldr	r3, [pc, #76]	; (8005308 <get_Straj+0xd6c>)
 80052ba:	ed93 7b00 	vldr	d7, [r3]
 80052be:	eeb1 7b47 	vneg.f64	d7, d7
 80052c2:	4b11      	ldr	r3, [pc, #68]	; (8005308 <get_Straj+0xd6c>)
 80052c4:	ed83 7b00 	vstr	d7, [r3]
            flagInv = false;
 80052c8:	4b10      	ldr	r3, [pc, #64]	; (800530c <get_Straj+0xd70>)
 80052ca:	2200      	movs	r2, #0
 80052cc:	701a      	strb	r2, [r3, #0]
        }
    }


    return qd;
 80052ce:	4b0c      	ldr	r3, [pc, #48]	; (8005300 <get_Straj+0xd64>)
 80052d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052d4:	ec43 2b17 	vmov	d7, r2, r3
}
 80052d8:	eeb0 0b47 	vmov.f64	d0, d7
 80052dc:	3720      	adds	r7, #32
 80052de:	46bd      	mov	sp, r7
 80052e0:	ecbd 8b06 	vpop	{d8-d10}
 80052e4:	bd80      	pop	{r7, pc}
 80052e6:	bf00      	nop
 80052e8:	24000860 	.word	0x24000860
 80052ec:	24000888 	.word	0x24000888
 80052f0:	240008a8 	.word	0x240008a8
 80052f4:	24000488 	.word	0x24000488
 80052f8:	24000008 	.word	0x24000008
 80052fc:	24000458 	.word	0x24000458
 8005300:	24000460 	.word	0x24000460
 8005304:	24000468 	.word	0x24000468
 8005308:	24000470 	.word	0x24000470
 800530c:	24000840 	.word	0x24000840

08005310 <update_ScurveTraj>:


void update_ScurveTraj(double _qi ,double _qf, double vi,double vf ,double vmax,double amax,double jmax, double *params){
 8005310:	b580      	push	{r7, lr}
 8005312:	ed2d 8b04 	vpush	{d8-d9}
 8005316:	b092      	sub	sp, #72	; 0x48
 8005318:	af00      	add	r7, sp, #0
 800531a:	ed87 0b0e 	vstr	d0, [r7, #56]	; 0x38
 800531e:	ed87 1b0c 	vstr	d1, [r7, #48]	; 0x30
 8005322:	ed87 2b0a 	vstr	d2, [r7, #40]	; 0x28
 8005326:	ed87 3b08 	vstr	d3, [r7, #32]
 800532a:	ed87 4b06 	vstr	d4, [r7, #24]
 800532e:	ed87 5b04 	vstr	d5, [r7, #16]
 8005332:	ed87 6b02 	vstr	d6, [r7, #8]
 8005336:	6078      	str	r0, [r7, #4]

	jmin = -jmax;
 8005338:	ed97 7b02 	vldr	d7, [r7, #8]
 800533c:	eeb1 7b47 	vneg.f64	d7, d7
 8005340:	4b9e      	ldr	r3, [pc, #632]	; (80055bc <update_ScurveTraj+0x2ac>)
 8005342:	ed83 7b00 	vstr	d7, [r3]
	amin = -amax;
 8005346:	ed97 7b04 	vldr	d7, [r7, #16]
 800534a:	eeb1 7b47 	vneg.f64	d7, d7
 800534e:	4b9c      	ldr	r3, [pc, #624]	; (80055c0 <update_ScurveTraj+0x2b0>)
 8005350:	ed83 7b00 	vstr	d7, [r3]
	vmin = -vmax;
 8005354:	ed97 7b06 	vldr	d7, [r7, #24]
 8005358:	eeb1 7b47 	vneg.f64	d7, d7
 800535c:	4b99      	ldr	r3, [pc, #612]	; (80055c4 <update_ScurveTraj+0x2b4>)
 800535e:	ed83 7b00 	vstr	d7, [r3]
	qi=_qi;
 8005362:	4999      	ldr	r1, [pc, #612]	; (80055c8 <update_ScurveTraj+0x2b8>)
 8005364:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005368:	e9c1 2300 	strd	r2, r3, [r1]
	qf=_qf;
 800536c:	4997      	ldr	r1, [pc, #604]	; (80055cc <update_ScurveTraj+0x2bc>)
 800536e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8005372:	e9c1 2300 	strd	r2, r3, [r1]

	if (qf < qi){
 8005376:	4b95      	ldr	r3, [pc, #596]	; (80055cc <update_ScurveTraj+0x2bc>)
 8005378:	ed93 6b00 	vldr	d6, [r3]
 800537c:	4b92      	ldr	r3, [pc, #584]	; (80055c8 <update_ScurveTraj+0x2b8>)
 800537e:	ed93 7b00 	vldr	d7, [r3]
 8005382:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8005386:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800538a:	d548      	bpl.n	800541e <update_ScurveTraj+0x10e>

		flagInv = true;
 800538c:	4b90      	ldr	r3, [pc, #576]	; (80055d0 <update_ScurveTraj+0x2c0>)
 800538e:	2201      	movs	r2, #1
 8005390:	701a      	strb	r2, [r3, #0]

		qi = -qi;
 8005392:	4b8d      	ldr	r3, [pc, #564]	; (80055c8 <update_ScurveTraj+0x2b8>)
 8005394:	ed93 7b00 	vldr	d7, [r3]
 8005398:	eeb1 7b47 	vneg.f64	d7, d7
 800539c:	4b8a      	ldr	r3, [pc, #552]	; (80055c8 <update_ScurveTraj+0x2b8>)
 800539e:	ed83 7b00 	vstr	d7, [r3]
		qf = -qf;
 80053a2:	4b8a      	ldr	r3, [pc, #552]	; (80055cc <update_ScurveTraj+0x2bc>)
 80053a4:	ed93 7b00 	vldr	d7, [r3]
 80053a8:	eeb1 7b47 	vneg.f64	d7, d7
 80053ac:	4b87      	ldr	r3, [pc, #540]	; (80055cc <update_ScurveTraj+0x2bc>)
 80053ae:	ed83 7b00 	vstr	d7, [r3]
		vi = -vi;
 80053b2:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 80053b6:	eeb1 7b47 	vneg.f64	d7, d7
 80053ba:	ed87 7b0a 	vstr	d7, [r7, #40]	; 0x28
		vf = -vf;
 80053be:	ed97 7b08 	vldr	d7, [r7, #32]
 80053c2:	eeb1 7b47 	vneg.f64	d7, d7
 80053c6:	ed87 7b08 	vstr	d7, [r7, #32]

		vmax = -vmin;
 80053ca:	4b7e      	ldr	r3, [pc, #504]	; (80055c4 <update_ScurveTraj+0x2b4>)
 80053cc:	ed93 7b00 	vldr	d7, [r3]
 80053d0:	eeb1 7b47 	vneg.f64	d7, d7
 80053d4:	ed87 7b06 	vstr	d7, [r7, #24]
		vmin = -vmax;
 80053d8:	ed97 7b06 	vldr	d7, [r7, #24]
 80053dc:	eeb1 7b47 	vneg.f64	d7, d7
 80053e0:	4b78      	ldr	r3, [pc, #480]	; (80055c4 <update_ScurveTraj+0x2b4>)
 80053e2:	ed83 7b00 	vstr	d7, [r3]
		amax = -amin;
 80053e6:	4b76      	ldr	r3, [pc, #472]	; (80055c0 <update_ScurveTraj+0x2b0>)
 80053e8:	ed93 7b00 	vldr	d7, [r3]
 80053ec:	eeb1 7b47 	vneg.f64	d7, d7
 80053f0:	ed87 7b04 	vstr	d7, [r7, #16]
		amin = -amax;
 80053f4:	ed97 7b04 	vldr	d7, [r7, #16]
 80053f8:	eeb1 7b47 	vneg.f64	d7, d7
 80053fc:	4b70      	ldr	r3, [pc, #448]	; (80055c0 <update_ScurveTraj+0x2b0>)
 80053fe:	ed83 7b00 	vstr	d7, [r3]
		jmax = -jmin;
 8005402:	4b6e      	ldr	r3, [pc, #440]	; (80055bc <update_ScurveTraj+0x2ac>)
 8005404:	ed93 7b00 	vldr	d7, [r3]
 8005408:	eeb1 7b47 	vneg.f64	d7, d7
 800540c:	ed87 7b02 	vstr	d7, [r7, #8]
		jmin = -jmax;
 8005410:	ed97 7b02 	vldr	d7, [r7, #8]
 8005414:	eeb1 7b47 	vneg.f64	d7, d7
 8005418:	4b68      	ldr	r3, [pc, #416]	; (80055bc <update_ScurveTraj+0x2ac>)
 800541a:	ed83 7b00 	vstr	d7, [r3]

	}

	volatile float Tjaux = MIN(sqrt(fabs(vf-vi)/jmax),amax/jmax);
 800541e:	ed97 6b08 	vldr	d6, [r7, #32]
 8005422:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 8005426:	ee36 7b47 	vsub.f64	d7, d6, d7
 800542a:	eeb0 6bc7 	vabs.f64	d6, d7
 800542e:	ed97 7b02 	vldr	d7, [r7, #8]
 8005432:	ee86 5b07 	vdiv.f64	d5, d6, d7
 8005436:	eeb0 0b45 	vmov.f64	d0, d5
 800543a:	f00c f931 	bl	80116a0 <sqrt>
 800543e:	eeb0 4b40 	vmov.f64	d4, d0
 8005442:	ed97 5b04 	vldr	d5, [r7, #16]
 8005446:	ed97 6b02 	vldr	d6, [r7, #8]
 800544a:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800544e:	eeb4 4bc7 	vcmpe.f64	d4, d7
 8005452:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005456:	d512      	bpl.n	800547e <update_ScurveTraj+0x16e>
 8005458:	ed97 6b08 	vldr	d6, [r7, #32]
 800545c:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 8005460:	ee36 7b47 	vsub.f64	d7, d6, d7
 8005464:	eeb0 6bc7 	vabs.f64	d6, d7
 8005468:	ed97 7b02 	vldr	d7, [r7, #8]
 800546c:	ee86 5b07 	vdiv.f64	d5, d6, d7
 8005470:	eeb0 0b45 	vmov.f64	d0, d5
 8005474:	f00c f914 	bl	80116a0 <sqrt>
 8005478:	eeb0 7b40 	vmov.f64	d7, d0
 800547c:	e005      	b.n	800548a <update_ScurveTraj+0x17a>
 800547e:	ed97 5b04 	vldr	d5, [r7, #16]
 8005482:	ed97 6b02 	vldr	d6, [r7, #8]
 8005486:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800548a:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800548e:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44


	if (Tjaux<amax/jmax){
 8005492:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8005496:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 800549a:	ed97 4b04 	vldr	d4, [r7, #16]
 800549e:	ed97 5b02 	vldr	d5, [r7, #8]
 80054a2:	ee84 7b05 	vdiv.f64	d7, d4, d5
 80054a6:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80054aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80054ae:	d400      	bmi.n	80054b2 <update_ScurveTraj+0x1a2>
		//if (qf-qi > Tjaux*(vi+vf)) {printf("the trajectory is feasible \n");}
		//else {printf("the trajectory is NOT \n");}
	}
	else if (Tjaux == amax/jmax){
 80054b0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
		//if (qf-qi > 0.5*(vi+vf)*(Tjaux+fabs(vi+vf)/amax)) {printf("the trajectory is feasible\n");}
		//else {printf("the trajectory is NOT feasible\n");}
	}
	//Phase 1: acceleration
	if ((vmax-vi)*jmax < pow(amax,2)){
 80054b2:	ed97 6b06 	vldr	d6, [r7, #24]
 80054b6:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 80054ba:	ee36 6b47 	vsub.f64	d6, d6, d7
 80054be:	ed97 7b02 	vldr	d7, [r7, #8]
 80054c2:	ee26 8b07 	vmul.f64	d8, d6, d7
 80054c6:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 80054ca:	ed97 0b04 	vldr	d0, [r7, #16]
 80054ce:	f00b fe67 	bl	80111a0 <pow>
 80054d2:	eeb0 7b40 	vmov.f64	d7, d0
 80054d6:	eeb4 8bc7 	vcmpe.f64	d8, d7
 80054da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80054de:	d51d      	bpl.n	800551c <update_ScurveTraj+0x20c>
		//printf("amax is NOT reached\n");

		Tj1=sqrt(fabs(vmax-vi)/jmax);
 80054e0:	ed97 6b06 	vldr	d6, [r7, #24]
 80054e4:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 80054e8:	ee36 7b47 	vsub.f64	d7, d6, d7
 80054ec:	eeb0 6bc7 	vabs.f64	d6, d7
 80054f0:	ed97 7b02 	vldr	d7, [r7, #8]
 80054f4:	ee86 5b07 	vdiv.f64	d5, d6, d7
 80054f8:	eeb0 0b45 	vmov.f64	d0, d5
 80054fc:	f00c f8d0 	bl	80116a0 <sqrt>
 8005500:	eeb0 7b40 	vmov.f64	d7, d0
 8005504:	4b33      	ldr	r3, [pc, #204]	; (80055d4 <update_ScurveTraj+0x2c4>)
 8005506:	ed83 7b00 	vstr	d7, [r3]
		Ta=Tj1*2;
 800550a:	4b32      	ldr	r3, [pc, #200]	; (80055d4 <update_ScurveTraj+0x2c4>)
 800550c:	ed93 7b00 	vldr	d7, [r3]
 8005510:	ee37 7b07 	vadd.f64	d7, d7, d7
 8005514:	4b30      	ldr	r3, [pc, #192]	; (80055d8 <update_ScurveTraj+0x2c8>)
 8005516:	ed83 7b00 	vstr	d7, [r3]
 800551a:	e01a      	b.n	8005552 <update_ScurveTraj+0x242>
	}
	else{
		//printf("amax is reached\n");
		Tj1=amax/jmax;
 800551c:	ed97 5b04 	vldr	d5, [r7, #16]
 8005520:	ed97 6b02 	vldr	d6, [r7, #8]
 8005524:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8005528:	4b2a      	ldr	r3, [pc, #168]	; (80055d4 <update_ScurveTraj+0x2c4>)
 800552a:	ed83 7b00 	vstr	d7, [r3]
		Ta=Tj1+(vmax-vi)/amax;
 800552e:	ed97 6b06 	vldr	d6, [r7, #24]
 8005532:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 8005536:	ee36 5b47 	vsub.f64	d5, d6, d7
 800553a:	ed97 7b04 	vldr	d7, [r7, #16]
 800553e:	ee85 6b07 	vdiv.f64	d6, d5, d7
 8005542:	4b24      	ldr	r3, [pc, #144]	; (80055d4 <update_ScurveTraj+0x2c4>)
 8005544:	ed93 7b00 	vldr	d7, [r3]
 8005548:	ee36 7b07 	vadd.f64	d7, d6, d7
 800554c:	4b22      	ldr	r3, [pc, #136]	; (80055d8 <update_ScurveTraj+0x2c8>)
 800554e:	ed83 7b00 	vstr	d7, [r3]
	}

	//Phase 3: Desacceleration


	if ((vmax-vf)*jmax < pow(amax,2)){
 8005552:	ed97 6b06 	vldr	d6, [r7, #24]
 8005556:	ed97 7b08 	vldr	d7, [r7, #32]
 800555a:	ee36 6b47 	vsub.f64	d6, d6, d7
 800555e:	ed97 7b02 	vldr	d7, [r7, #8]
 8005562:	ee26 8b07 	vmul.f64	d8, d6, d7
 8005566:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 800556a:	ed97 0b04 	vldr	d0, [r7, #16]
 800556e:	f00b fe17 	bl	80111a0 <pow>
 8005572:	eeb0 7b40 	vmov.f64	d7, d0
 8005576:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800557a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800557e:	d531      	bpl.n	80055e4 <update_ScurveTraj+0x2d4>
		//printf("amin is NOT reached\n");

		Tj2=sqrt(fabs(vmax-vf)/jmax);
 8005580:	ed97 6b06 	vldr	d6, [r7, #24]
 8005584:	ed97 7b08 	vldr	d7, [r7, #32]
 8005588:	ee36 7b47 	vsub.f64	d7, d6, d7
 800558c:	eeb0 6bc7 	vabs.f64	d6, d7
 8005590:	ed97 7b02 	vldr	d7, [r7, #8]
 8005594:	ee86 5b07 	vdiv.f64	d5, d6, d7
 8005598:	eeb0 0b45 	vmov.f64	d0, d5
 800559c:	f00c f880 	bl	80116a0 <sqrt>
 80055a0:	eeb0 7b40 	vmov.f64	d7, d0
 80055a4:	4b0d      	ldr	r3, [pc, #52]	; (80055dc <update_ScurveTraj+0x2cc>)
 80055a6:	ed83 7b00 	vstr	d7, [r3]
		Td=Tj2*2;
 80055aa:	4b0c      	ldr	r3, [pc, #48]	; (80055dc <update_ScurveTraj+0x2cc>)
 80055ac:	ed93 7b00 	vldr	d7, [r3]
 80055b0:	ee37 7b07 	vadd.f64	d7, d7, d7
 80055b4:	4b0a      	ldr	r3, [pc, #40]	; (80055e0 <update_ScurveTraj+0x2d0>)
 80055b6:	ed83 7b00 	vstr	d7, [r3]
 80055ba:	e02e      	b.n	800561a <update_ScurveTraj+0x30a>
 80055bc:	24000478 	.word	0x24000478
 80055c0:	24000490 	.word	0x24000490
 80055c4:	24000480 	.word	0x24000480
 80055c8:	240008a0 	.word	0x240008a0
 80055cc:	240008a8 	.word	0x240008a8
 80055d0:	24000840 	.word	0x24000840
 80055d4:	24000880 	.word	0x24000880
 80055d8:	24000868 	.word	0x24000868
 80055dc:	24000888 	.word	0x24000888
 80055e0:	24000870 	.word	0x24000870
	}
	else{
		//printf("amin is reached\n");
		Tj2=amax/jmax;
 80055e4:	ed97 5b04 	vldr	d5, [r7, #16]
 80055e8:	ed97 6b02 	vldr	d6, [r7, #8]
 80055ec:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80055f0:	4b95      	ldr	r3, [pc, #596]	; (8005848 <update_ScurveTraj+0x538>)
 80055f2:	ed83 7b00 	vstr	d7, [r3]
		Td=Tj2+(vmax-vf)/amax;
 80055f6:	ed97 6b06 	vldr	d6, [r7, #24]
 80055fa:	ed97 7b08 	vldr	d7, [r7, #32]
 80055fe:	ee36 5b47 	vsub.f64	d5, d6, d7
 8005602:	ed97 7b04 	vldr	d7, [r7, #16]
 8005606:	ee85 6b07 	vdiv.f64	d6, d5, d7
 800560a:	4b8f      	ldr	r3, [pc, #572]	; (8005848 <update_ScurveTraj+0x538>)
 800560c:	ed93 7b00 	vldr	d7, [r3]
 8005610:	ee36 7b07 	vadd.f64	d7, d6, d7
 8005614:	4b8d      	ldr	r3, [pc, #564]	; (800584c <update_ScurveTraj+0x53c>)
 8005616:	ed83 7b00 	vstr	d7, [r3]
	}


	Tv = (qf-qi)/vmax - (Ta/2)*(1+(vi/vmax))-(Td/2)*(1+(vf/vmax));
 800561a:	4b8d      	ldr	r3, [pc, #564]	; (8005850 <update_ScurveTraj+0x540>)
 800561c:	ed93 6b00 	vldr	d6, [r3]
 8005620:	4b8c      	ldr	r3, [pc, #560]	; (8005854 <update_ScurveTraj+0x544>)
 8005622:	ed93 7b00 	vldr	d7, [r3]
 8005626:	ee36 5b47 	vsub.f64	d5, d6, d7
 800562a:	ed97 7b06 	vldr	d7, [r7, #24]
 800562e:	ee85 6b07 	vdiv.f64	d6, d5, d7
 8005632:	4b89      	ldr	r3, [pc, #548]	; (8005858 <update_ScurveTraj+0x548>)
 8005634:	ed93 7b00 	vldr	d7, [r3]
 8005638:	eeb0 4b00 	vmov.f64	d4, #0	; 0x40000000  2.0
 800563c:	ee87 5b04 	vdiv.f64	d5, d7, d4
 8005640:	ed97 3b0a 	vldr	d3, [r7, #40]	; 0x28
 8005644:	ed97 4b06 	vldr	d4, [r7, #24]
 8005648:	ee83 7b04 	vdiv.f64	d7, d3, d4
 800564c:	eeb7 4b00 	vmov.f64	d4, #112	; 0x3f800000  1.0
 8005650:	ee37 7b04 	vadd.f64	d7, d7, d4
 8005654:	ee25 7b07 	vmul.f64	d7, d5, d7
 8005658:	ee36 6b47 	vsub.f64	d6, d6, d7
 800565c:	4b7b      	ldr	r3, [pc, #492]	; (800584c <update_ScurveTraj+0x53c>)
 800565e:	ed93 7b00 	vldr	d7, [r3]
 8005662:	eeb0 4b00 	vmov.f64	d4, #0	; 0x40000000  2.0
 8005666:	ee87 5b04 	vdiv.f64	d5, d7, d4
 800566a:	ed97 3b08 	vldr	d3, [r7, #32]
 800566e:	ed97 4b06 	vldr	d4, [r7, #24]
 8005672:	ee83 7b04 	vdiv.f64	d7, d3, d4
 8005676:	eeb7 4b00 	vmov.f64	d4, #112	; 0x3f800000  1.0
 800567a:	ee37 7b04 	vadd.f64	d7, d7, d4
 800567e:	ee25 7b07 	vmul.f64	d7, d5, d7
 8005682:	ee36 7b47 	vsub.f64	d7, d6, d7
 8005686:	4b75      	ldr	r3, [pc, #468]	; (800585c <update_ScurveTraj+0x54c>)
 8005688:	ed83 7b00 	vstr	d7, [r3]

	if (Tv>0){
 800568c:	4b73      	ldr	r3, [pc, #460]	; (800585c <update_ScurveTraj+0x54c>)
 800568e:	ed93 7b00 	vldr	d7, [r3]
 8005692:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8005696:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800569a:	f300 82d5 	bgt.w	8005c48 <update_ScurveTraj+0x938>
		//printf("the max velocity is reached\n");
	}
	else{
		//printf("CASE 2\n");
		//printf("In this case vmax is NOT reached, so Tv=0\n");
		Tj1=amax/jmax;
 800569e:	ed97 5b04 	vldr	d5, [r7, #16]
 80056a2:	ed97 6b02 	vldr	d6, [r7, #8]
 80056a6:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80056aa:	4b6d      	ldr	r3, [pc, #436]	; (8005860 <update_ScurveTraj+0x550>)
 80056ac:	ed83 7b00 	vstr	d7, [r3]
		Tj2=Tj1;
 80056b0:	4b6b      	ldr	r3, [pc, #428]	; (8005860 <update_ScurveTraj+0x550>)
 80056b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056b6:	4964      	ldr	r1, [pc, #400]	; (8005848 <update_ScurveTraj+0x538>)
 80056b8:	e9c1 2300 	strd	r2, r3, [r1]
		Tj=Tj1;
 80056bc:	4b68      	ldr	r3, [pc, #416]	; (8005860 <update_ScurveTraj+0x550>)
 80056be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056c2:	4968      	ldr	r1, [pc, #416]	; (8005864 <update_ScurveTraj+0x554>)
 80056c4:	e9c1 2300 	strd	r2, r3, [r1]
		delta = (pow(amax,4)/pow(jmax,2))+2*(pow(vi,2)+pow(vf,2))+amax*(4*(qf-qi)-2*(amax/jmax)*(vi+vf));
 80056c8:	eeb1 1b00 	vmov.f64	d1, #16	; 0x40800000  4.0
 80056cc:	ed97 0b04 	vldr	d0, [r7, #16]
 80056d0:	f00b fd66 	bl	80111a0 <pow>
 80056d4:	eeb0 9b40 	vmov.f64	d9, d0
 80056d8:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 80056dc:	ed97 0b02 	vldr	d0, [r7, #8]
 80056e0:	f00b fd5e 	bl	80111a0 <pow>
 80056e4:	eeb0 7b40 	vmov.f64	d7, d0
 80056e8:	ee89 8b07 	vdiv.f64	d8, d9, d7
 80056ec:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 80056f0:	ed97 0b0a 	vldr	d0, [r7, #40]	; 0x28
 80056f4:	f00b fd54 	bl	80111a0 <pow>
 80056f8:	eeb0 9b40 	vmov.f64	d9, d0
 80056fc:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8005700:	ed97 0b08 	vldr	d0, [r7, #32]
 8005704:	f00b fd4c 	bl	80111a0 <pow>
 8005708:	eeb0 7b40 	vmov.f64	d7, d0
 800570c:	ee39 7b07 	vadd.f64	d7, d9, d7
 8005710:	ee37 7b07 	vadd.f64	d7, d7, d7
 8005714:	ee38 6b07 	vadd.f64	d6, d8, d7
 8005718:	4b4d      	ldr	r3, [pc, #308]	; (8005850 <update_ScurveTraj+0x540>)
 800571a:	ed93 5b00 	vldr	d5, [r3]
 800571e:	4b4d      	ldr	r3, [pc, #308]	; (8005854 <update_ScurveTraj+0x544>)
 8005720:	ed93 7b00 	vldr	d7, [r3]
 8005724:	ee35 7b47 	vsub.f64	d7, d5, d7
 8005728:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 800572c:	ee27 5b05 	vmul.f64	d5, d7, d5
 8005730:	ed97 3b04 	vldr	d3, [r7, #16]
 8005734:	ed97 4b02 	vldr	d4, [r7, #8]
 8005738:	ee83 7b04 	vdiv.f64	d7, d3, d4
 800573c:	ee37 4b07 	vadd.f64	d4, d7, d7
 8005740:	ed97 3b0a 	vldr	d3, [r7, #40]	; 0x28
 8005744:	ed97 7b08 	vldr	d7, [r7, #32]
 8005748:	ee33 7b07 	vadd.f64	d7, d3, d7
 800574c:	ee24 7b07 	vmul.f64	d7, d4, d7
 8005750:	ee35 5b47 	vsub.f64	d5, d5, d7
 8005754:	ed97 7b04 	vldr	d7, [r7, #16]
 8005758:	ee25 7b07 	vmul.f64	d7, d5, d7
 800575c:	ee36 7b07 	vadd.f64	d7, d6, d7
 8005760:	4b41      	ldr	r3, [pc, #260]	; (8005868 <update_ScurveTraj+0x558>)
 8005762:	ed83 7b00 	vstr	d7, [r3]
		Ta=((pow(amax,2)/jmax)-2*vi+sqrt(delta))/(2*amax);
 8005766:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 800576a:	ed97 0b04 	vldr	d0, [r7, #16]
 800576e:	f00b fd17 	bl	80111a0 <pow>
 8005772:	eeb0 5b40 	vmov.f64	d5, d0
 8005776:	ed97 7b02 	vldr	d7, [r7, #8]
 800577a:	ee85 6b07 	vdiv.f64	d6, d5, d7
 800577e:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 8005782:	ee37 7b07 	vadd.f64	d7, d7, d7
 8005786:	ee36 8b47 	vsub.f64	d8, d6, d7
 800578a:	4b37      	ldr	r3, [pc, #220]	; (8005868 <update_ScurveTraj+0x558>)
 800578c:	ed93 7b00 	vldr	d7, [r3]
 8005790:	eeb0 0b47 	vmov.f64	d0, d7
 8005794:	f00b ff84 	bl	80116a0 <sqrt>
 8005798:	eeb0 7b40 	vmov.f64	d7, d0
 800579c:	ee38 5b07 	vadd.f64	d5, d8, d7
 80057a0:	ed97 7b04 	vldr	d7, [r7, #16]
 80057a4:	ee37 6b07 	vadd.f64	d6, d7, d7
 80057a8:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80057ac:	4b2a      	ldr	r3, [pc, #168]	; (8005858 <update_ScurveTraj+0x548>)
 80057ae:	ed83 7b00 	vstr	d7, [r3]
		Td=((pow(amax,2)/jmax)-2*vf+sqrt(delta))/(2*amax);
 80057b2:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 80057b6:	ed97 0b04 	vldr	d0, [r7, #16]
 80057ba:	f00b fcf1 	bl	80111a0 <pow>
 80057be:	eeb0 5b40 	vmov.f64	d5, d0
 80057c2:	ed97 7b02 	vldr	d7, [r7, #8]
 80057c6:	ee85 6b07 	vdiv.f64	d6, d5, d7
 80057ca:	ed97 7b08 	vldr	d7, [r7, #32]
 80057ce:	ee37 7b07 	vadd.f64	d7, d7, d7
 80057d2:	ee36 8b47 	vsub.f64	d8, d6, d7
 80057d6:	4b24      	ldr	r3, [pc, #144]	; (8005868 <update_ScurveTraj+0x558>)
 80057d8:	ed93 7b00 	vldr	d7, [r3]
 80057dc:	eeb0 0b47 	vmov.f64	d0, d7
 80057e0:	f00b ff5e 	bl	80116a0 <sqrt>
 80057e4:	eeb0 7b40 	vmov.f64	d7, d0
 80057e8:	ee38 5b07 	vadd.f64	d5, d8, d7
 80057ec:	ed97 7b04 	vldr	d7, [r7, #16]
 80057f0:	ee37 6b07 	vadd.f64	d6, d7, d7
 80057f4:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80057f8:	4b14      	ldr	r3, [pc, #80]	; (800584c <update_ScurveTraj+0x53c>)
 80057fa:	ed83 7b00 	vstr	d7, [r3]
		Tv=0;
 80057fe:	4917      	ldr	r1, [pc, #92]	; (800585c <update_ScurveTraj+0x54c>)
 8005800:	f04f 0200 	mov.w	r2, #0
 8005804:	f04f 0300 	mov.w	r3, #0
 8005808:	e9c1 2300 	strd	r2, r3, [r1]


		if (Ta<2*Tj || Td<2*Tj){
 800580c:	4b15      	ldr	r3, [pc, #84]	; (8005864 <update_ScurveTraj+0x554>)
 800580e:	ed93 7b00 	vldr	d7, [r3]
 8005812:	ee37 6b07 	vadd.f64	d6, d7, d7
 8005816:	4b10      	ldr	r3, [pc, #64]	; (8005858 <update_ScurveTraj+0x548>)
 8005818:	ed93 7b00 	vldr	d7, [r3]
 800581c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8005820:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005824:	f300 81e4 	bgt.w	8005bf0 <update_ScurveTraj+0x8e0>
 8005828:	4b0e      	ldr	r3, [pc, #56]	; (8005864 <update_ScurveTraj+0x554>)
 800582a:	ed93 7b00 	vldr	d7, [r3]
 800582e:	ee37 6b07 	vadd.f64	d6, d7, d7
 8005832:	4b06      	ldr	r3, [pc, #24]	; (800584c <update_ScurveTraj+0x53c>)
 8005834:	ed93 7b00 	vldr	d7, [r3]
 8005838:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800583c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005840:	f340 8202 	ble.w	8005c48 <update_ScurveTraj+0x938>
			//printf("entre\n");
			while (!(Ta>2*Tj && Td>2*Tj)){
 8005844:	e1d4      	b.n	8005bf0 <update_ScurveTraj+0x8e0>
 8005846:	bf00      	nop
 8005848:	24000888 	.word	0x24000888
 800584c:	24000870 	.word	0x24000870
 8005850:	240008a8 	.word	0x240008a8
 8005854:	240008a0 	.word	0x240008a0
 8005858:	24000868 	.word	0x24000868
 800585c:	24000878 	.word	0x24000878
 8005860:	24000880 	.word	0x24000880
 8005864:	24000890 	.word	0x24000890
 8005868:	24000898 	.word	0x24000898

				amax=amax*0.99;
 800586c:	ed97 7b04 	vldr	d7, [r7, #16]
 8005870:	ed9f 6bd5 	vldr	d6, [pc, #852]	; 8005bc8 <update_ScurveTraj+0x8b8>
 8005874:	ee27 7b06 	vmul.f64	d7, d7, d6
 8005878:	ed87 7b04 	vstr	d7, [r7, #16]
				Tj=amax/jmax;
 800587c:	ed97 5b04 	vldr	d5, [r7, #16]
 8005880:	ed97 6b02 	vldr	d6, [r7, #8]
 8005884:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8005888:	4bd1      	ldr	r3, [pc, #836]	; (8005bd0 <update_ScurveTraj+0x8c0>)
 800588a:	ed83 7b00 	vstr	d7, [r3]
				delta = (pow(amax,4)/pow(jmax,2))+2*(pow(vi,2)+pow(vf,2))+amax*(4*(qf-qi)-2*(amax/jmax)*(vi+vf));
 800588e:	eeb1 1b00 	vmov.f64	d1, #16	; 0x40800000  4.0
 8005892:	ed97 0b04 	vldr	d0, [r7, #16]
 8005896:	f00b fc83 	bl	80111a0 <pow>
 800589a:	eeb0 9b40 	vmov.f64	d9, d0
 800589e:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 80058a2:	ed97 0b02 	vldr	d0, [r7, #8]
 80058a6:	f00b fc7b 	bl	80111a0 <pow>
 80058aa:	eeb0 7b40 	vmov.f64	d7, d0
 80058ae:	ee89 8b07 	vdiv.f64	d8, d9, d7
 80058b2:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 80058b6:	ed97 0b0a 	vldr	d0, [r7, #40]	; 0x28
 80058ba:	f00b fc71 	bl	80111a0 <pow>
 80058be:	eeb0 9b40 	vmov.f64	d9, d0
 80058c2:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 80058c6:	ed97 0b08 	vldr	d0, [r7, #32]
 80058ca:	f00b fc69 	bl	80111a0 <pow>
 80058ce:	eeb0 7b40 	vmov.f64	d7, d0
 80058d2:	ee39 7b07 	vadd.f64	d7, d9, d7
 80058d6:	ee37 7b07 	vadd.f64	d7, d7, d7
 80058da:	ee38 6b07 	vadd.f64	d6, d8, d7
 80058de:	4bbd      	ldr	r3, [pc, #756]	; (8005bd4 <update_ScurveTraj+0x8c4>)
 80058e0:	ed93 5b00 	vldr	d5, [r3]
 80058e4:	4bbc      	ldr	r3, [pc, #752]	; (8005bd8 <update_ScurveTraj+0x8c8>)
 80058e6:	ed93 7b00 	vldr	d7, [r3]
 80058ea:	ee35 7b47 	vsub.f64	d7, d5, d7
 80058ee:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 80058f2:	ee27 5b05 	vmul.f64	d5, d7, d5
 80058f6:	ed97 3b04 	vldr	d3, [r7, #16]
 80058fa:	ed97 4b02 	vldr	d4, [r7, #8]
 80058fe:	ee83 7b04 	vdiv.f64	d7, d3, d4
 8005902:	ee37 4b07 	vadd.f64	d4, d7, d7
 8005906:	ed97 3b0a 	vldr	d3, [r7, #40]	; 0x28
 800590a:	ed97 7b08 	vldr	d7, [r7, #32]
 800590e:	ee33 7b07 	vadd.f64	d7, d3, d7
 8005912:	ee24 7b07 	vmul.f64	d7, d4, d7
 8005916:	ee35 5b47 	vsub.f64	d5, d5, d7
 800591a:	ed97 7b04 	vldr	d7, [r7, #16]
 800591e:	ee25 7b07 	vmul.f64	d7, d5, d7
 8005922:	ee36 7b07 	vadd.f64	d7, d6, d7
 8005926:	4bad      	ldr	r3, [pc, #692]	; (8005bdc <update_ScurveTraj+0x8cc>)
 8005928:	ed83 7b00 	vstr	d7, [r3]
				Ta=((pow(amax,2)/jmax)-2*vi+sqrt(delta))/(2*amax);
 800592c:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8005930:	ed97 0b04 	vldr	d0, [r7, #16]
 8005934:	f00b fc34 	bl	80111a0 <pow>
 8005938:	eeb0 5b40 	vmov.f64	d5, d0
 800593c:	ed97 7b02 	vldr	d7, [r7, #8]
 8005940:	ee85 6b07 	vdiv.f64	d6, d5, d7
 8005944:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 8005948:	ee37 7b07 	vadd.f64	d7, d7, d7
 800594c:	ee36 8b47 	vsub.f64	d8, d6, d7
 8005950:	4ba2      	ldr	r3, [pc, #648]	; (8005bdc <update_ScurveTraj+0x8cc>)
 8005952:	ed93 7b00 	vldr	d7, [r3]
 8005956:	eeb0 0b47 	vmov.f64	d0, d7
 800595a:	f00b fea1 	bl	80116a0 <sqrt>
 800595e:	eeb0 7b40 	vmov.f64	d7, d0
 8005962:	ee38 5b07 	vadd.f64	d5, d8, d7
 8005966:	ed97 7b04 	vldr	d7, [r7, #16]
 800596a:	ee37 6b07 	vadd.f64	d6, d7, d7
 800596e:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8005972:	4b9b      	ldr	r3, [pc, #620]	; (8005be0 <update_ScurveTraj+0x8d0>)
 8005974:	ed83 7b00 	vstr	d7, [r3]
				Td=((pow(amax,2)/jmax)-2*vf+sqrt(delta))/(2*amax);
 8005978:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 800597c:	ed97 0b04 	vldr	d0, [r7, #16]
 8005980:	f00b fc0e 	bl	80111a0 <pow>
 8005984:	eeb0 5b40 	vmov.f64	d5, d0
 8005988:	ed97 7b02 	vldr	d7, [r7, #8]
 800598c:	ee85 6b07 	vdiv.f64	d6, d5, d7
 8005990:	ed97 7b08 	vldr	d7, [r7, #32]
 8005994:	ee37 7b07 	vadd.f64	d7, d7, d7
 8005998:	ee36 8b47 	vsub.f64	d8, d6, d7
 800599c:	4b8f      	ldr	r3, [pc, #572]	; (8005bdc <update_ScurveTraj+0x8cc>)
 800599e:	ed93 7b00 	vldr	d7, [r3]
 80059a2:	eeb0 0b47 	vmov.f64	d0, d7
 80059a6:	f00b fe7b 	bl	80116a0 <sqrt>
 80059aa:	eeb0 7b40 	vmov.f64	d7, d0
 80059ae:	ee38 5b07 	vadd.f64	d5, d8, d7
 80059b2:	ed97 7b04 	vldr	d7, [r7, #16]
 80059b6:	ee37 6b07 	vadd.f64	d6, d7, d7
 80059ba:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80059be:	4b89      	ldr	r3, [pc, #548]	; (8005be4 <update_ScurveTraj+0x8d4>)
 80059c0:	ed83 7b00 	vstr	d7, [r3]

				//print(f'{i}',amax)


				if (Ta<0){
 80059c4:	4b86      	ldr	r3, [pc, #536]	; (8005be0 <update_ScurveTraj+0x8d0>)
 80059c6:	ed93 7b00 	vldr	d7, [r3]
 80059ca:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80059ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80059d2:	d576      	bpl.n	8005ac2 <update_ScurveTraj+0x7b2>
					Ta=0;
 80059d4:	4982      	ldr	r1, [pc, #520]	; (8005be0 <update_ScurveTraj+0x8d0>)
 80059d6:	f04f 0200 	mov.w	r2, #0
 80059da:	f04f 0300 	mov.w	r3, #0
 80059de:	e9c1 2300 	strd	r2, r3, [r1]
					Tj1=0;
 80059e2:	4981      	ldr	r1, [pc, #516]	; (8005be8 <update_ScurveTraj+0x8d8>)
 80059e4:	f04f 0200 	mov.w	r2, #0
 80059e8:	f04f 0300 	mov.w	r3, #0
 80059ec:	e9c1 2300 	strd	r2, r3, [r1]
					Td=2*((qf-qi)/(vf+vi));
 80059f0:	4b78      	ldr	r3, [pc, #480]	; (8005bd4 <update_ScurveTraj+0x8c4>)
 80059f2:	ed93 6b00 	vldr	d6, [r3]
 80059f6:	4b78      	ldr	r3, [pc, #480]	; (8005bd8 <update_ScurveTraj+0x8c8>)
 80059f8:	ed93 7b00 	vldr	d7, [r3]
 80059fc:	ee36 5b47 	vsub.f64	d5, d6, d7
 8005a00:	ed97 6b08 	vldr	d6, [r7, #32]
 8005a04:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 8005a08:	ee36 6b07 	vadd.f64	d6, d6, d7
 8005a0c:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8005a10:	ee37 7b07 	vadd.f64	d7, d7, d7
 8005a14:	4b73      	ldr	r3, [pc, #460]	; (8005be4 <update_ScurveTraj+0x8d4>)
 8005a16:	ed83 7b00 	vstr	d7, [r3]
					Tj2=(jmax*(qf-qi)-sqrt(jmax*(jmax*(pow(qf-qi,2))+pow(vf+vi,2)*(vf-vi))))/(jmax*(vf+vi));
 8005a1a:	4b6e      	ldr	r3, [pc, #440]	; (8005bd4 <update_ScurveTraj+0x8c4>)
 8005a1c:	ed93 6b00 	vldr	d6, [r3]
 8005a20:	4b6d      	ldr	r3, [pc, #436]	; (8005bd8 <update_ScurveTraj+0x8c8>)
 8005a22:	ed93 7b00 	vldr	d7, [r3]
 8005a26:	ee36 6b47 	vsub.f64	d6, d6, d7
 8005a2a:	ed97 7b02 	vldr	d7, [r7, #8]
 8005a2e:	ee26 8b07 	vmul.f64	d8, d6, d7
 8005a32:	4b68      	ldr	r3, [pc, #416]	; (8005bd4 <update_ScurveTraj+0x8c4>)
 8005a34:	ed93 6b00 	vldr	d6, [r3]
 8005a38:	4b67      	ldr	r3, [pc, #412]	; (8005bd8 <update_ScurveTraj+0x8c8>)
 8005a3a:	ed93 7b00 	vldr	d7, [r3]
 8005a3e:	ee36 7b47 	vsub.f64	d7, d6, d7
 8005a42:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8005a46:	eeb0 0b47 	vmov.f64	d0, d7
 8005a4a:	f00b fba9 	bl	80111a0 <pow>
 8005a4e:	eeb0 6b40 	vmov.f64	d6, d0
 8005a52:	ed97 7b02 	vldr	d7, [r7, #8]
 8005a56:	ee26 9b07 	vmul.f64	d9, d6, d7
 8005a5a:	ed97 6b08 	vldr	d6, [r7, #32]
 8005a5e:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 8005a62:	ee36 7b07 	vadd.f64	d7, d6, d7
 8005a66:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8005a6a:	eeb0 0b47 	vmov.f64	d0, d7
 8005a6e:	f00b fb97 	bl	80111a0 <pow>
 8005a72:	eeb0 5b40 	vmov.f64	d5, d0
 8005a76:	ed97 6b08 	vldr	d6, [r7, #32]
 8005a7a:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 8005a7e:	ee36 7b47 	vsub.f64	d7, d6, d7
 8005a82:	ee25 7b07 	vmul.f64	d7, d5, d7
 8005a86:	ee39 6b07 	vadd.f64	d6, d9, d7
 8005a8a:	ed97 7b02 	vldr	d7, [r7, #8]
 8005a8e:	ee26 7b07 	vmul.f64	d7, d6, d7
 8005a92:	eeb0 0b47 	vmov.f64	d0, d7
 8005a96:	f00b fe03 	bl	80116a0 <sqrt>
 8005a9a:	eeb0 7b40 	vmov.f64	d7, d0
 8005a9e:	ee38 5b47 	vsub.f64	d5, d8, d7
 8005aa2:	ed97 6b08 	vldr	d6, [r7, #32]
 8005aa6:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 8005aaa:	ee36 6b07 	vadd.f64	d6, d6, d7
 8005aae:	ed97 7b02 	vldr	d7, [r7, #8]
 8005ab2:	ee26 6b07 	vmul.f64	d6, d6, d7
 8005ab6:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8005aba:	4b4c      	ldr	r3, [pc, #304]	; (8005bec <update_ScurveTraj+0x8dc>)
 8005abc:	ed83 7b00 	vstr	d7, [r3]
					break;
 8005ac0:	e0c2      	b.n	8005c48 <update_ScurveTraj+0x938>
				}
				if (Td<0){
 8005ac2:	4b48      	ldr	r3, [pc, #288]	; (8005be4 <update_ScurveTraj+0x8d4>)
 8005ac4:	ed93 7b00 	vldr	d7, [r3]
 8005ac8:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8005acc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005ad0:	d400      	bmi.n	8005ad4 <update_ScurveTraj+0x7c4>
 8005ad2:	e08d      	b.n	8005bf0 <update_ScurveTraj+0x8e0>
					Td=0;
 8005ad4:	4943      	ldr	r1, [pc, #268]	; (8005be4 <update_ScurveTraj+0x8d4>)
 8005ad6:	f04f 0200 	mov.w	r2, #0
 8005ada:	f04f 0300 	mov.w	r3, #0
 8005ade:	e9c1 2300 	strd	r2, r3, [r1]
					Ta=2*((qf-qi)/(vf+vi));
 8005ae2:	4b3c      	ldr	r3, [pc, #240]	; (8005bd4 <update_ScurveTraj+0x8c4>)
 8005ae4:	ed93 6b00 	vldr	d6, [r3]
 8005ae8:	4b3b      	ldr	r3, [pc, #236]	; (8005bd8 <update_ScurveTraj+0x8c8>)
 8005aea:	ed93 7b00 	vldr	d7, [r3]
 8005aee:	ee36 5b47 	vsub.f64	d5, d6, d7
 8005af2:	ed97 6b08 	vldr	d6, [r7, #32]
 8005af6:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 8005afa:	ee36 6b07 	vadd.f64	d6, d6, d7
 8005afe:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8005b02:	ee37 7b07 	vadd.f64	d7, d7, d7
 8005b06:	4b36      	ldr	r3, [pc, #216]	; (8005be0 <update_ScurveTraj+0x8d0>)
 8005b08:	ed83 7b00 	vstr	d7, [r3]
					Tj1=(jmax*(qf-qi)-sqrt(jmax*(jmax*(pow(qf-qi,2))-pow(vf+vi,2)*(vf-vi))))/(jmax*(vf+vi));
 8005b0c:	4b31      	ldr	r3, [pc, #196]	; (8005bd4 <update_ScurveTraj+0x8c4>)
 8005b0e:	ed93 6b00 	vldr	d6, [r3]
 8005b12:	4b31      	ldr	r3, [pc, #196]	; (8005bd8 <update_ScurveTraj+0x8c8>)
 8005b14:	ed93 7b00 	vldr	d7, [r3]
 8005b18:	ee36 6b47 	vsub.f64	d6, d6, d7
 8005b1c:	ed97 7b02 	vldr	d7, [r7, #8]
 8005b20:	ee26 8b07 	vmul.f64	d8, d6, d7
 8005b24:	4b2b      	ldr	r3, [pc, #172]	; (8005bd4 <update_ScurveTraj+0x8c4>)
 8005b26:	ed93 6b00 	vldr	d6, [r3]
 8005b2a:	4b2b      	ldr	r3, [pc, #172]	; (8005bd8 <update_ScurveTraj+0x8c8>)
 8005b2c:	ed93 7b00 	vldr	d7, [r3]
 8005b30:	ee36 7b47 	vsub.f64	d7, d6, d7
 8005b34:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8005b38:	eeb0 0b47 	vmov.f64	d0, d7
 8005b3c:	f00b fb30 	bl	80111a0 <pow>
 8005b40:	eeb0 6b40 	vmov.f64	d6, d0
 8005b44:	ed97 7b02 	vldr	d7, [r7, #8]
 8005b48:	ee26 9b07 	vmul.f64	d9, d6, d7
 8005b4c:	ed97 6b08 	vldr	d6, [r7, #32]
 8005b50:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 8005b54:	ee36 7b07 	vadd.f64	d7, d6, d7
 8005b58:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8005b5c:	eeb0 0b47 	vmov.f64	d0, d7
 8005b60:	f00b fb1e 	bl	80111a0 <pow>
 8005b64:	eeb0 5b40 	vmov.f64	d5, d0
 8005b68:	ed97 6b08 	vldr	d6, [r7, #32]
 8005b6c:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 8005b70:	ee36 7b47 	vsub.f64	d7, d6, d7
 8005b74:	ee25 7b07 	vmul.f64	d7, d5, d7
 8005b78:	ee39 6b47 	vsub.f64	d6, d9, d7
 8005b7c:	ed97 7b02 	vldr	d7, [r7, #8]
 8005b80:	ee26 7b07 	vmul.f64	d7, d6, d7
 8005b84:	eeb0 0b47 	vmov.f64	d0, d7
 8005b88:	f00b fd8a 	bl	80116a0 <sqrt>
 8005b8c:	eeb0 7b40 	vmov.f64	d7, d0
 8005b90:	ee38 5b47 	vsub.f64	d5, d8, d7
 8005b94:	ed97 6b08 	vldr	d6, [r7, #32]
 8005b98:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 8005b9c:	ee36 6b07 	vadd.f64	d6, d6, d7
 8005ba0:	ed97 7b02 	vldr	d7, [r7, #8]
 8005ba4:	ee26 6b07 	vmul.f64	d6, d6, d7
 8005ba8:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8005bac:	4b0e      	ldr	r3, [pc, #56]	; (8005be8 <update_ScurveTraj+0x8d8>)
 8005bae:	ed83 7b00 	vstr	d7, [r3]
					Tj2=0;
 8005bb2:	490e      	ldr	r1, [pc, #56]	; (8005bec <update_ScurveTraj+0x8dc>)
 8005bb4:	f04f 0200 	mov.w	r2, #0
 8005bb8:	f04f 0300 	mov.w	r3, #0
 8005bbc:	e9c1 2300 	strd	r2, r3, [r1]
					break;
 8005bc0:	e042      	b.n	8005c48 <update_ScurveTraj+0x938>
 8005bc2:	bf00      	nop
 8005bc4:	f3af 8000 	nop.w
 8005bc8:	7ae147ae 	.word	0x7ae147ae
 8005bcc:	3fefae14 	.word	0x3fefae14
 8005bd0:	24000890 	.word	0x24000890
 8005bd4:	240008a8 	.word	0x240008a8
 8005bd8:	240008a0 	.word	0x240008a0
 8005bdc:	24000898 	.word	0x24000898
 8005be0:	24000868 	.word	0x24000868
 8005be4:	24000870 	.word	0x24000870
 8005be8:	24000880 	.word	0x24000880
 8005bec:	24000888 	.word	0x24000888
			while (!(Ta>2*Tj && Td>2*Tj)){
 8005bf0:	4b33      	ldr	r3, [pc, #204]	; (8005cc0 <update_ScurveTraj+0x9b0>)
 8005bf2:	ed93 7b00 	vldr	d7, [r3]
 8005bf6:	ee37 6b07 	vadd.f64	d6, d7, d7
 8005bfa:	4b32      	ldr	r3, [pc, #200]	; (8005cc4 <update_ScurveTraj+0x9b4>)
 8005bfc:	ed93 7b00 	vldr	d7, [r3]
 8005c00:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8005c04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005c08:	bf4c      	ite	mi
 8005c0a:	2301      	movmi	r3, #1
 8005c0c:	2300      	movpl	r3, #0
 8005c0e:	b2db      	uxtb	r3, r3
 8005c10:	f083 0301 	eor.w	r3, r3, #1
 8005c14:	b2db      	uxtb	r3, r3
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	f47f ae28 	bne.w	800586c <update_ScurveTraj+0x55c>
 8005c1c:	4b28      	ldr	r3, [pc, #160]	; (8005cc0 <update_ScurveTraj+0x9b0>)
 8005c1e:	ed93 7b00 	vldr	d7, [r3]
 8005c22:	ee37 6b07 	vadd.f64	d6, d7, d7
 8005c26:	4b28      	ldr	r3, [pc, #160]	; (8005cc8 <update_ScurveTraj+0x9b8>)
 8005c28:	ed93 7b00 	vldr	d7, [r3]
 8005c2c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8005c30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005c34:	bf4c      	ite	mi
 8005c36:	2301      	movmi	r3, #1
 8005c38:	2300      	movpl	r3, #0
 8005c3a:	b2db      	uxtb	r3, r3
 8005c3c:	f083 0301 	eor.w	r3, r3, #1
 8005c40:	b2db      	uxtb	r3, r3
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	f47f ae12 	bne.w	800586c <update_ScurveTraj+0x55c>
				}
			}
		}
	}

	*(params)=Tj1;
 8005c48:	4b20      	ldr	r3, [pc, #128]	; (8005ccc <update_ScurveTraj+0x9bc>)
 8005c4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c4e:	6879      	ldr	r1, [r7, #4]
 8005c50:	e9c1 2300 	strd	r2, r3, [r1]
	*(params+1)=Tj2;
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	f103 0108 	add.w	r1, r3, #8
 8005c5a:	4b1d      	ldr	r3, [pc, #116]	; (8005cd0 <update_ScurveTraj+0x9c0>)
 8005c5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c60:	e9c1 2300 	strd	r2, r3, [r1]
	*(params+2)=Tj;
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	f103 0110 	add.w	r1, r3, #16
 8005c6a:	4b15      	ldr	r3, [pc, #84]	; (8005cc0 <update_ScurveTraj+0x9b0>)
 8005c6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c70:	e9c1 2300 	strd	r2, r3, [r1]
	*(params+3)=Ta;
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	f103 0118 	add.w	r1, r3, #24
 8005c7a:	4b12      	ldr	r3, [pc, #72]	; (8005cc4 <update_ScurveTraj+0x9b4>)
 8005c7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c80:	e9c1 2300 	strd	r2, r3, [r1]
	*(params+4)=Td;
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	f103 0120 	add.w	r1, r3, #32
 8005c8a:	4b0f      	ldr	r3, [pc, #60]	; (8005cc8 <update_ScurveTraj+0x9b8>)
 8005c8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c90:	e9c1 2300 	strd	r2, r3, [r1]
	*(params+5)=Tv;
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	f103 0128 	add.w	r1, r3, #40	; 0x28
 8005c9a:	4b0e      	ldr	r3, [pc, #56]	; (8005cd4 <update_ScurveTraj+0x9c4>)
 8005c9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ca0:	e9c1 2300 	strd	r2, r3, [r1]
	*(params+6)=T;
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8005caa:	4b0b      	ldr	r3, [pc, #44]	; (8005cd8 <update_ScurveTraj+0x9c8>)
 8005cac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cb0:	e9c1 2300 	strd	r2, r3, [r1]

}
 8005cb4:	bf00      	nop
 8005cb6:	3748      	adds	r7, #72	; 0x48
 8005cb8:	46bd      	mov	sp, r7
 8005cba:	ecbd 8b04 	vpop	{d8-d9}
 8005cbe:	bd80      	pop	{r7, pc}
 8005cc0:	24000890 	.word	0x24000890
 8005cc4:	24000868 	.word	0x24000868
 8005cc8:	24000870 	.word	0x24000870
 8005ccc:	24000880 	.word	0x24000880
 8005cd0:	24000888 	.word	0x24000888
 8005cd4:	24000878 	.word	0x24000878
 8005cd8:	24000860 	.word	0x24000860
 8005cdc:	00000000 	.word	0x00000000

08005ce0 <setProfilTimer>:


void setProfilTimer(void){
 8005ce0:	b480      	push	{r7}
 8005ce2:	b083      	sub	sp, #12
 8005ce4:	af00      	add	r7, sp, #0

	motor1.rpm = motor1.omega * RADs_TO_RPM;
 8005ce6:	4bb8      	ldr	r3, [pc, #736]	; (8005fc8 <setProfilTimer+0x2e8>)
 8005ce8:	ed93 7b02 	vldr	d7, [r3, #8]
 8005cec:	ed9f 6bae 	vldr	d6, [pc, #696]	; 8005fa8 <setProfilTimer+0x2c8>
 8005cf0:	ee27 7b06 	vmul.f64	d7, d7, d6
 8005cf4:	4bb4      	ldr	r3, [pc, #720]	; (8005fc8 <setProfilTimer+0x2e8>)
 8005cf6:	ed83 7b04 	vstr	d7, [r3, #16]
	motor2.rpm = motor2.omega * RADs_TO_RPM;
 8005cfa:	4bb4      	ldr	r3, [pc, #720]	; (8005fcc <setProfilTimer+0x2ec>)
 8005cfc:	ed93 7b02 	vldr	d7, [r3, #8]
 8005d00:	ed9f 6ba9 	vldr	d6, [pc, #676]	; 8005fa8 <setProfilTimer+0x2c8>
 8005d04:	ee27 7b06 	vmul.f64	d7, d7, d6
 8005d08:	4bb0      	ldr	r3, [pc, #704]	; (8005fcc <setProfilTimer+0x2ec>)
 8005d0a:	ed83 7b04 	vstr	d7, [r3, #16]
	motor3.rpm = motor3.omega * RADs_TO_RPM;
 8005d0e:	4bb0      	ldr	r3, [pc, #704]	; (8005fd0 <setProfilTimer+0x2f0>)
 8005d10:	ed93 7b02 	vldr	d7, [r3, #8]
 8005d14:	ed9f 6ba4 	vldr	d6, [pc, #656]	; 8005fa8 <setProfilTimer+0x2c8>
 8005d18:	ee27 7b06 	vmul.f64	d7, d7, d6
 8005d1c:	4bac      	ldr	r3, [pc, #688]	; (8005fd0 <setProfilTimer+0x2f0>)
 8005d1e:	ed83 7b04 	vstr	d7, [r3, #16]


    period[0] = COUNTERPERIOD(motor1.rpm);
 8005d22:	4bac      	ldr	r3, [pc, #688]	; (8005fd4 <setProfilTimer+0x2f4>)
 8005d24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d26:	ee07 3a90 	vmov	s15, r3
 8005d2a:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8005d2e:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8005d32:	ee37 7b06 	vadd.f64	d7, d7, d6
 8005d36:	ed9f 5b9e 	vldr	d5, [pc, #632]	; 8005fb0 <setProfilTimer+0x2d0>
 8005d3a:	ee85 6b07 	vdiv.f64	d6, d5, d7
 8005d3e:	4ba2      	ldr	r3, [pc, #648]	; (8005fc8 <setProfilTimer+0x2e8>)
 8005d40:	ed93 7b04 	vldr	d7, [r3, #16]
 8005d44:	ed9f 5b9c 	vldr	d5, [pc, #624]	; 8005fb8 <setProfilTimer+0x2d8>
 8005d48:	ee27 5b05 	vmul.f64	d5, d7, d5
 8005d4c:	ed9f 4b9c 	vldr	d4, [pc, #624]	; 8005fc0 <setProfilTimer+0x2e0>
 8005d50:	ee84 7b05 	vdiv.f64	d7, d4, d5
 8005d54:	ee26 7b07 	vmul.f64	d7, d6, d7
 8005d58:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8005d5c:	ee37 7b46 	vsub.f64	d7, d7, d6
 8005d60:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8005d64:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8005d68:	4b9b      	ldr	r3, [pc, #620]	; (8005fd8 <setProfilTimer+0x2f8>)
 8005d6a:	ed83 7b00 	vstr	d7, [r3]
    period[1] = COUNTERPERIOD(motor2.rpm);
 8005d6e:	4b99      	ldr	r3, [pc, #612]	; (8005fd4 <setProfilTimer+0x2f4>)
 8005d70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d72:	ee07 3a90 	vmov	s15, r3
 8005d76:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8005d7a:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8005d7e:	ee37 7b06 	vadd.f64	d7, d7, d6
 8005d82:	ed9f 5b8b 	vldr	d5, [pc, #556]	; 8005fb0 <setProfilTimer+0x2d0>
 8005d86:	ee85 6b07 	vdiv.f64	d6, d5, d7
 8005d8a:	4b90      	ldr	r3, [pc, #576]	; (8005fcc <setProfilTimer+0x2ec>)
 8005d8c:	ed93 7b04 	vldr	d7, [r3, #16]
 8005d90:	ed9f 5b89 	vldr	d5, [pc, #548]	; 8005fb8 <setProfilTimer+0x2d8>
 8005d94:	ee27 5b05 	vmul.f64	d5, d7, d5
 8005d98:	ed9f 4b89 	vldr	d4, [pc, #548]	; 8005fc0 <setProfilTimer+0x2e0>
 8005d9c:	ee84 7b05 	vdiv.f64	d7, d4, d5
 8005da0:	ee26 7b07 	vmul.f64	d7, d6, d7
 8005da4:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8005da8:	ee37 7b46 	vsub.f64	d7, d7, d6
 8005dac:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8005db0:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8005db4:	4b88      	ldr	r3, [pc, #544]	; (8005fd8 <setProfilTimer+0x2f8>)
 8005db6:	ed83 7b02 	vstr	d7, [r3, #8]
    period[3] = COUNTERPERIOD(motor3.rpm);
 8005dba:	4b86      	ldr	r3, [pc, #536]	; (8005fd4 <setProfilTimer+0x2f4>)
 8005dbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005dbe:	ee07 3a90 	vmov	s15, r3
 8005dc2:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8005dc6:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8005dca:	ee37 7b06 	vadd.f64	d7, d7, d6
 8005dce:	ed9f 5b78 	vldr	d5, [pc, #480]	; 8005fb0 <setProfilTimer+0x2d0>
 8005dd2:	ee85 6b07 	vdiv.f64	d6, d5, d7
 8005dd6:	4b7e      	ldr	r3, [pc, #504]	; (8005fd0 <setProfilTimer+0x2f0>)
 8005dd8:	ed93 7b04 	vldr	d7, [r3, #16]
 8005ddc:	ed9f 5b76 	vldr	d5, [pc, #472]	; 8005fb8 <setProfilTimer+0x2d8>
 8005de0:	ee27 5b05 	vmul.f64	d5, d7, d5
 8005de4:	ed9f 4b76 	vldr	d4, [pc, #472]	; 8005fc0 <setProfilTimer+0x2e0>
 8005de8:	ee84 7b05 	vdiv.f64	d7, d4, d5
 8005dec:	ee26 7b07 	vmul.f64	d7, d6, d7
 8005df0:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8005df4:	ee37 7b46 	vsub.f64	d7, d7, d6
 8005df8:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8005dfc:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8005e00:	4b75      	ldr	r3, [pc, #468]	; (8005fd8 <setProfilTimer+0x2f8>)
 8005e02:	ed83 7b06 	vstr	d7, [r3, #24]

	// Calculo el error por casteo a int, y cuando supero la unidad, lo compenzo

	for (int i = 0; i < 3; i++) {
 8005e06:	2300      	movs	r3, #0
 8005e08:	607b      	str	r3, [r7, #4]
 8005e0a:	e05b      	b.n	8005ec4 <setProfilTimer+0x1e4>
		periodError[i] = period[i] - (double)((int32_t) period[i]);
 8005e0c:	4a72      	ldr	r2, [pc, #456]	; (8005fd8 <setProfilTimer+0x2f8>)
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	00db      	lsls	r3, r3, #3
 8005e12:	4413      	add	r3, r2
 8005e14:	ed93 6b00 	vldr	d6, [r3]
 8005e18:	4a6f      	ldr	r2, [pc, #444]	; (8005fd8 <setProfilTimer+0x2f8>)
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	00db      	lsls	r3, r3, #3
 8005e1e:	4413      	add	r3, r2
 8005e20:	ed93 7b00 	vldr	d7, [r3]
 8005e24:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8005e28:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8005e2c:	ee36 7b47 	vsub.f64	d7, d6, d7
 8005e30:	4a6a      	ldr	r2, [pc, #424]	; (8005fdc <setProfilTimer+0x2fc>)
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	00db      	lsls	r3, r3, #3
 8005e36:	4413      	add	r3, r2
 8005e38:	ed83 7b00 	vstr	d7, [r3]
		accumulatedError[i] += periodError[i];
 8005e3c:	4a68      	ldr	r2, [pc, #416]	; (8005fe0 <setProfilTimer+0x300>)
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	00db      	lsls	r3, r3, #3
 8005e42:	4413      	add	r3, r2
 8005e44:	ed93 6b00 	vldr	d6, [r3]
 8005e48:	4a64      	ldr	r2, [pc, #400]	; (8005fdc <setProfilTimer+0x2fc>)
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	00db      	lsls	r3, r3, #3
 8005e4e:	4413      	add	r3, r2
 8005e50:	ed93 7b00 	vldr	d7, [r3]
 8005e54:	ee36 7b07 	vadd.f64	d7, d6, d7
 8005e58:	4a61      	ldr	r2, [pc, #388]	; (8005fe0 <setProfilTimer+0x300>)
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	00db      	lsls	r3, r3, #3
 8005e5e:	4413      	add	r3, r2
 8005e60:	ed83 7b00 	vstr	d7, [r3]
		if (accumulatedError[i] > 1) {
 8005e64:	4a5e      	ldr	r2, [pc, #376]	; (8005fe0 <setProfilTimer+0x300>)
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	00db      	lsls	r3, r3, #3
 8005e6a:	4413      	add	r3, r2
 8005e6c:	ed93 7b00 	vldr	d7, [r3]
 8005e70:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8005e74:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8005e78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005e7c:	dd1f      	ble.n	8005ebe <setProfilTimer+0x1de>
			period[i] += 1;
 8005e7e:	4a56      	ldr	r2, [pc, #344]	; (8005fd8 <setProfilTimer+0x2f8>)
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	00db      	lsls	r3, r3, #3
 8005e84:	4413      	add	r3, r2
 8005e86:	ed93 7b00 	vldr	d7, [r3]
 8005e8a:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8005e8e:	ee37 7b06 	vadd.f64	d7, d7, d6
 8005e92:	4a51      	ldr	r2, [pc, #324]	; (8005fd8 <setProfilTimer+0x2f8>)
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	00db      	lsls	r3, r3, #3
 8005e98:	4413      	add	r3, r2
 8005e9a:	ed83 7b00 	vstr	d7, [r3]
			accumulatedError[i] -=  1;
 8005e9e:	4a50      	ldr	r2, [pc, #320]	; (8005fe0 <setProfilTimer+0x300>)
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	00db      	lsls	r3, r3, #3
 8005ea4:	4413      	add	r3, r2
 8005ea6:	ed93 7b00 	vldr	d7, [r3]
 8005eaa:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8005eae:	ee37 7b46 	vsub.f64	d7, d7, d6
 8005eb2:	4a4b      	ldr	r2, [pc, #300]	; (8005fe0 <setProfilTimer+0x300>)
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	00db      	lsls	r3, r3, #3
 8005eb8:	4413      	add	r3, r2
 8005eba:	ed83 7b00 	vstr	d7, [r3]
	for (int i = 0; i < 3; i++) {
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	3301      	adds	r3, #1
 8005ec2:	607b      	str	r3, [r7, #4]
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	2b02      	cmp	r3, #2
 8005ec8:	dda0      	ble.n	8005e0c <setProfilTimer+0x12c>
		}
	}

    //Escritura del registro ARR
    __HAL_TIM_SET_AUTORELOAD(&htim12,period[0]);
 8005eca:	4b43      	ldr	r3, [pc, #268]	; (8005fd8 <setProfilTimer+0x2f8>)
 8005ecc:	ed93 7b00 	vldr	d7, [r3]
 8005ed0:	4b44      	ldr	r3, [pc, #272]	; (8005fe4 <setProfilTimer+0x304>)
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8005ed8:	ee17 2a90 	vmov	r2, s15
 8005edc:	62da      	str	r2, [r3, #44]	; 0x2c
 8005ede:	4b3e      	ldr	r3, [pc, #248]	; (8005fd8 <setProfilTimer+0x2f8>)
 8005ee0:	ed93 7b00 	vldr	d7, [r3]
 8005ee4:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8005ee8:	ee17 2a90 	vmov	r2, s15
 8005eec:	4b3d      	ldr	r3, [pc, #244]	; (8005fe4 <setProfilTimer+0x304>)
 8005eee:	60da      	str	r2, [r3, #12]
	__HAL_TIM_SET_AUTORELOAD(&htim13,period[1]);
 8005ef0:	4b39      	ldr	r3, [pc, #228]	; (8005fd8 <setProfilTimer+0x2f8>)
 8005ef2:	ed93 7b02 	vldr	d7, [r3, #8]
 8005ef6:	4b3c      	ldr	r3, [pc, #240]	; (8005fe8 <setProfilTimer+0x308>)
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8005efe:	ee17 2a90 	vmov	r2, s15
 8005f02:	62da      	str	r2, [r3, #44]	; 0x2c
 8005f04:	4b34      	ldr	r3, [pc, #208]	; (8005fd8 <setProfilTimer+0x2f8>)
 8005f06:	ed93 7b02 	vldr	d7, [r3, #8]
 8005f0a:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8005f0e:	ee17 2a90 	vmov	r2, s15
 8005f12:	4b35      	ldr	r3, [pc, #212]	; (8005fe8 <setProfilTimer+0x308>)
 8005f14:	60da      	str	r2, [r3, #12]
	__HAL_TIM_SET_AUTORELOAD(&htim14,period[3]);
 8005f16:	4b30      	ldr	r3, [pc, #192]	; (8005fd8 <setProfilTimer+0x2f8>)
 8005f18:	ed93 7b06 	vldr	d7, [r3, #24]
 8005f1c:	4b33      	ldr	r3, [pc, #204]	; (8005fec <setProfilTimer+0x30c>)
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8005f24:	ee17 2a90 	vmov	r2, s15
 8005f28:	62da      	str	r2, [r3, #44]	; 0x2c
 8005f2a:	4b2b      	ldr	r3, [pc, #172]	; (8005fd8 <setProfilTimer+0x2f8>)
 8005f2c:	ed93 7b06 	vldr	d7, [r3, #24]
 8005f30:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8005f34:	ee17 2a90 	vmov	r2, s15
 8005f38:	4b2c      	ldr	r3, [pc, #176]	; (8005fec <setProfilTimer+0x30c>)
 8005f3a:	60da      	str	r2, [r3, #12]

	TIM12->CCR1 = (uint32_t)((double)(TIM12->ARR) / 2.0);
 8005f3c:	4b25      	ldr	r3, [pc, #148]	; (8005fd4 <setProfilTimer+0x2f4>)
 8005f3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f40:	ee07 3a90 	vmov	s15, r3
 8005f44:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 8005f48:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8005f4c:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8005f50:	4b20      	ldr	r3, [pc, #128]	; (8005fd4 <setProfilTimer+0x2f4>)
 8005f52:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8005f56:	ee17 2a90 	vmov	r2, s15
 8005f5a:	635a      	str	r2, [r3, #52]	; 0x34
	TIM13->CCR1 = (uint32_t)((double)(TIM13->ARR) / 2.0);
 8005f5c:	4b24      	ldr	r3, [pc, #144]	; (8005ff0 <setProfilTimer+0x310>)
 8005f5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f60:	ee07 3a90 	vmov	s15, r3
 8005f64:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 8005f68:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8005f6c:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8005f70:	4b1f      	ldr	r3, [pc, #124]	; (8005ff0 <setProfilTimer+0x310>)
 8005f72:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8005f76:	ee17 2a90 	vmov	r2, s15
 8005f7a:	635a      	str	r2, [r3, #52]	; 0x34
	TIM14->CCR1 = (uint32_t)((double)(TIM14->ARR) / 2.0);
 8005f7c:	4b1d      	ldr	r3, [pc, #116]	; (8005ff4 <setProfilTimer+0x314>)
 8005f7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f80:	ee07 3a90 	vmov	s15, r3
 8005f84:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 8005f88:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8005f8c:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8005f90:	4b18      	ldr	r3, [pc, #96]	; (8005ff4 <setProfilTimer+0x314>)
 8005f92:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8005f96:	ee17 2a90 	vmov	r2, s15
 8005f9a:	635a      	str	r2, [r3, #52]	; 0x34


}
 8005f9c:	bf00      	nop
 8005f9e:	370c      	adds	r7, #12
 8005fa0:	46bd      	mov	sp, r7
 8005fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fa6:	4770      	bx	lr
 8005fa8:	66ed2a99 	.word	0x66ed2a99
 8005fac:	4023193d 	.word	0x4023193d
 8005fb0:	00000000 	.word	0x00000000
 8005fb4:	418e8480 	.word	0x418e8480
 8005fb8:	00000000 	.word	0x00000000
 8005fbc:	40bf4000 	.word	0x40bf4000
 8005fc0:	00000000 	.word	0x00000000
 8005fc4:	404e0000 	.word	0x404e0000
 8005fc8:	24000360 	.word	0x24000360
 8005fcc:	240003a8 	.word	0x240003a8
 8005fd0:	240003f0 	.word	0x240003f0
 8005fd4:	40001800 	.word	0x40001800
 8005fd8:	240007f8 	.word	0x240007f8
 8005fdc:	24000828 	.word	0x24000828
 8005fe0:	24000810 	.word	0x24000810
 8005fe4:	240006c8 	.word	0x240006c8
 8005fe8:	24000714 	.word	0x24000714
 8005fec:	24000760 	.word	0x24000760
 8005ff0:	40001c00 	.word	0x40001c00
 8005ff4:	40002000 	.word	0x40002000

08005ff8 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart3;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8005ff8:	b580      	push	{r7, lr}
 8005ffa:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8005ffc:	4b22      	ldr	r3, [pc, #136]	; (8006088 <MX_USART1_UART_Init+0x90>)
 8005ffe:	4a23      	ldr	r2, [pc, #140]	; (800608c <MX_USART1_UART_Init+0x94>)
 8006000:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8006002:	4b21      	ldr	r3, [pc, #132]	; (8006088 <MX_USART1_UART_Init+0x90>)
 8006004:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8006008:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800600a:	4b1f      	ldr	r3, [pc, #124]	; (8006088 <MX_USART1_UART_Init+0x90>)
 800600c:	2200      	movs	r2, #0
 800600e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8006010:	4b1d      	ldr	r3, [pc, #116]	; (8006088 <MX_USART1_UART_Init+0x90>)
 8006012:	2200      	movs	r2, #0
 8006014:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8006016:	4b1c      	ldr	r3, [pc, #112]	; (8006088 <MX_USART1_UART_Init+0x90>)
 8006018:	2200      	movs	r2, #0
 800601a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800601c:	4b1a      	ldr	r3, [pc, #104]	; (8006088 <MX_USART1_UART_Init+0x90>)
 800601e:	220c      	movs	r2, #12
 8006020:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8006022:	4b19      	ldr	r3, [pc, #100]	; (8006088 <MX_USART1_UART_Init+0x90>)
 8006024:	2200      	movs	r2, #0
 8006026:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8006028:	4b17      	ldr	r3, [pc, #92]	; (8006088 <MX_USART1_UART_Init+0x90>)
 800602a:	2200      	movs	r2, #0
 800602c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800602e:	4b16      	ldr	r3, [pc, #88]	; (8006088 <MX_USART1_UART_Init+0x90>)
 8006030:	2200      	movs	r2, #0
 8006032:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8006034:	4b14      	ldr	r3, [pc, #80]	; (8006088 <MX_USART1_UART_Init+0x90>)
 8006036:	2200      	movs	r2, #0
 8006038:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800603a:	4b13      	ldr	r3, [pc, #76]	; (8006088 <MX_USART1_UART_Init+0x90>)
 800603c:	2200      	movs	r2, #0
 800603e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8006040:	4811      	ldr	r0, [pc, #68]	; (8006088 <MX_USART1_UART_Init+0x90>)
 8006042:	f005 fe81 	bl	800bd48 <HAL_UART_Init>
 8006046:	4603      	mov	r3, r0
 8006048:	2b00      	cmp	r3, #0
 800604a:	d001      	beq.n	8006050 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 800604c:	f7fc fdb0 	bl	8002bb0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8006050:	2100      	movs	r1, #0
 8006052:	480d      	ldr	r0, [pc, #52]	; (8006088 <MX_USART1_UART_Init+0x90>)
 8006054:	f008 f90b 	bl	800e26e <HAL_UARTEx_SetTxFifoThreshold>
 8006058:	4603      	mov	r3, r0
 800605a:	2b00      	cmp	r3, #0
 800605c:	d001      	beq.n	8006062 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 800605e:	f7fc fda7 	bl	8002bb0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8006062:	2100      	movs	r1, #0
 8006064:	4808      	ldr	r0, [pc, #32]	; (8006088 <MX_USART1_UART_Init+0x90>)
 8006066:	f008 f940 	bl	800e2ea <HAL_UARTEx_SetRxFifoThreshold>
 800606a:	4603      	mov	r3, r0
 800606c:	2b00      	cmp	r3, #0
 800606e:	d001      	beq.n	8006074 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8006070:	f7fc fd9e 	bl	8002bb0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8006074:	4804      	ldr	r0, [pc, #16]	; (8006088 <MX_USART1_UART_Init+0x90>)
 8006076:	f008 f8c1 	bl	800e1fc <HAL_UARTEx_DisableFifoMode>
 800607a:	4603      	mov	r3, r0
 800607c:	2b00      	cmp	r3, #0
 800607e:	d001      	beq.n	8006084 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8006080:	f7fc fd96 	bl	8002bb0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8006084:	bf00      	nop
 8006086:	bd80      	pop	{r7, pc}
 8006088:	240008b0 	.word	0x240008b0
 800608c:	40011000 	.word	0x40011000

08006090 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8006090:	b580      	push	{r7, lr}
 8006092:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8006094:	4b22      	ldr	r3, [pc, #136]	; (8006120 <MX_USART2_UART_Init+0x90>)
 8006096:	4a23      	ldr	r2, [pc, #140]	; (8006124 <MX_USART2_UART_Init+0x94>)
 8006098:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 800609a:	4b21      	ldr	r3, [pc, #132]	; (8006120 <MX_USART2_UART_Init+0x90>)
 800609c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80060a0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80060a2:	4b1f      	ldr	r3, [pc, #124]	; (8006120 <MX_USART2_UART_Init+0x90>)
 80060a4:	2200      	movs	r2, #0
 80060a6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80060a8:	4b1d      	ldr	r3, [pc, #116]	; (8006120 <MX_USART2_UART_Init+0x90>)
 80060aa:	2200      	movs	r2, #0
 80060ac:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80060ae:	4b1c      	ldr	r3, [pc, #112]	; (8006120 <MX_USART2_UART_Init+0x90>)
 80060b0:	2200      	movs	r2, #0
 80060b2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80060b4:	4b1a      	ldr	r3, [pc, #104]	; (8006120 <MX_USART2_UART_Init+0x90>)
 80060b6:	220c      	movs	r2, #12
 80060b8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80060ba:	4b19      	ldr	r3, [pc, #100]	; (8006120 <MX_USART2_UART_Init+0x90>)
 80060bc:	2200      	movs	r2, #0
 80060be:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80060c0:	4b17      	ldr	r3, [pc, #92]	; (8006120 <MX_USART2_UART_Init+0x90>)
 80060c2:	2200      	movs	r2, #0
 80060c4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80060c6:	4b16      	ldr	r3, [pc, #88]	; (8006120 <MX_USART2_UART_Init+0x90>)
 80060c8:	2200      	movs	r2, #0
 80060ca:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80060cc:	4b14      	ldr	r3, [pc, #80]	; (8006120 <MX_USART2_UART_Init+0x90>)
 80060ce:	2200      	movs	r2, #0
 80060d0:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80060d2:	4b13      	ldr	r3, [pc, #76]	; (8006120 <MX_USART2_UART_Init+0x90>)
 80060d4:	2200      	movs	r2, #0
 80060d6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80060d8:	4811      	ldr	r0, [pc, #68]	; (8006120 <MX_USART2_UART_Init+0x90>)
 80060da:	f005 fe35 	bl	800bd48 <HAL_UART_Init>
 80060de:	4603      	mov	r3, r0
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d001      	beq.n	80060e8 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 80060e4:	f7fc fd64 	bl	8002bb0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80060e8:	2100      	movs	r1, #0
 80060ea:	480d      	ldr	r0, [pc, #52]	; (8006120 <MX_USART2_UART_Init+0x90>)
 80060ec:	f008 f8bf 	bl	800e26e <HAL_UARTEx_SetTxFifoThreshold>
 80060f0:	4603      	mov	r3, r0
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d001      	beq.n	80060fa <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 80060f6:	f7fc fd5b 	bl	8002bb0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80060fa:	2100      	movs	r1, #0
 80060fc:	4808      	ldr	r0, [pc, #32]	; (8006120 <MX_USART2_UART_Init+0x90>)
 80060fe:	f008 f8f4 	bl	800e2ea <HAL_UARTEx_SetRxFifoThreshold>
 8006102:	4603      	mov	r3, r0
 8006104:	2b00      	cmp	r3, #0
 8006106:	d001      	beq.n	800610c <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8006108:	f7fc fd52 	bl	8002bb0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 800610c:	4804      	ldr	r0, [pc, #16]	; (8006120 <MX_USART2_UART_Init+0x90>)
 800610e:	f008 f875 	bl	800e1fc <HAL_UARTEx_DisableFifoMode>
 8006112:	4603      	mov	r3, r0
 8006114:	2b00      	cmp	r3, #0
 8006116:	d001      	beq.n	800611c <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8006118:	f7fc fd4a 	bl	8002bb0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800611c:	bf00      	nop
 800611e:	bd80      	pop	{r7, pc}
 8006120:	24000940 	.word	0x24000940
 8006124:	40004400 	.word	0x40004400

08006128 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8006128:	b580      	push	{r7, lr}
 800612a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800612c:	4b22      	ldr	r3, [pc, #136]	; (80061b8 <MX_USART3_UART_Init+0x90>)
 800612e:	4a23      	ldr	r2, [pc, #140]	; (80061bc <MX_USART3_UART_Init+0x94>)
 8006130:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8006132:	4b21      	ldr	r3, [pc, #132]	; (80061b8 <MX_USART3_UART_Init+0x90>)
 8006134:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8006138:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800613a:	4b1f      	ldr	r3, [pc, #124]	; (80061b8 <MX_USART3_UART_Init+0x90>)
 800613c:	2200      	movs	r2, #0
 800613e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8006140:	4b1d      	ldr	r3, [pc, #116]	; (80061b8 <MX_USART3_UART_Init+0x90>)
 8006142:	2200      	movs	r2, #0
 8006144:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8006146:	4b1c      	ldr	r3, [pc, #112]	; (80061b8 <MX_USART3_UART_Init+0x90>)
 8006148:	2200      	movs	r2, #0
 800614a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800614c:	4b1a      	ldr	r3, [pc, #104]	; (80061b8 <MX_USART3_UART_Init+0x90>)
 800614e:	220c      	movs	r2, #12
 8006150:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8006152:	4b19      	ldr	r3, [pc, #100]	; (80061b8 <MX_USART3_UART_Init+0x90>)
 8006154:	2200      	movs	r2, #0
 8006156:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8006158:	4b17      	ldr	r3, [pc, #92]	; (80061b8 <MX_USART3_UART_Init+0x90>)
 800615a:	2200      	movs	r2, #0
 800615c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800615e:	4b16      	ldr	r3, [pc, #88]	; (80061b8 <MX_USART3_UART_Init+0x90>)
 8006160:	2200      	movs	r2, #0
 8006162:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8006164:	4b14      	ldr	r3, [pc, #80]	; (80061b8 <MX_USART3_UART_Init+0x90>)
 8006166:	2200      	movs	r2, #0
 8006168:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800616a:	4b13      	ldr	r3, [pc, #76]	; (80061b8 <MX_USART3_UART_Init+0x90>)
 800616c:	2200      	movs	r2, #0
 800616e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8006170:	4811      	ldr	r0, [pc, #68]	; (80061b8 <MX_USART3_UART_Init+0x90>)
 8006172:	f005 fde9 	bl	800bd48 <HAL_UART_Init>
 8006176:	4603      	mov	r3, r0
 8006178:	2b00      	cmp	r3, #0
 800617a:	d001      	beq.n	8006180 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 800617c:	f7fc fd18 	bl	8002bb0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8006180:	2100      	movs	r1, #0
 8006182:	480d      	ldr	r0, [pc, #52]	; (80061b8 <MX_USART3_UART_Init+0x90>)
 8006184:	f008 f873 	bl	800e26e <HAL_UARTEx_SetTxFifoThreshold>
 8006188:	4603      	mov	r3, r0
 800618a:	2b00      	cmp	r3, #0
 800618c:	d001      	beq.n	8006192 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 800618e:	f7fc fd0f 	bl	8002bb0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8006192:	2100      	movs	r1, #0
 8006194:	4808      	ldr	r0, [pc, #32]	; (80061b8 <MX_USART3_UART_Init+0x90>)
 8006196:	f008 f8a8 	bl	800e2ea <HAL_UARTEx_SetRxFifoThreshold>
 800619a:	4603      	mov	r3, r0
 800619c:	2b00      	cmp	r3, #0
 800619e:	d001      	beq.n	80061a4 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 80061a0:	f7fc fd06 	bl	8002bb0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80061a4:	4804      	ldr	r0, [pc, #16]	; (80061b8 <MX_USART3_UART_Init+0x90>)
 80061a6:	f008 f829 	bl	800e1fc <HAL_UARTEx_DisableFifoMode>
 80061aa:	4603      	mov	r3, r0
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d001      	beq.n	80061b4 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 80061b0:	f7fc fcfe 	bl	8002bb0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80061b4:	bf00      	nop
 80061b6:	bd80      	pop	{r7, pc}
 80061b8:	240009d0 	.word	0x240009d0
 80061bc:	40004800 	.word	0x40004800

080061c0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80061c0:	b580      	push	{r7, lr}
 80061c2:	b0be      	sub	sp, #248	; 0xf8
 80061c4:	af00      	add	r7, sp, #0
 80061c6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80061c8:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80061cc:	2200      	movs	r2, #0
 80061ce:	601a      	str	r2, [r3, #0]
 80061d0:	605a      	str	r2, [r3, #4]
 80061d2:	609a      	str	r2, [r3, #8]
 80061d4:	60da      	str	r2, [r3, #12]
 80061d6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80061d8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80061dc:	22bc      	movs	r2, #188	; 0xbc
 80061de:	2100      	movs	r1, #0
 80061e0:	4618      	mov	r0, r3
 80061e2:	f008 f939 	bl	800e458 <memset>
  if(uartHandle->Instance==USART1)
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	4a84      	ldr	r2, [pc, #528]	; (80063fc <HAL_UART_MspInit+0x23c>)
 80061ec:	4293      	cmp	r3, r2
 80061ee:	d168      	bne.n	80062c2 <HAL_UART_MspInit+0x102>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80061f0:	2301      	movs	r3, #1
 80061f2:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 80061f4:	2300      	movs	r3, #0
 80061f6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80061fa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80061fe:	4618      	mov	r0, r3
 8006200:	f002 fa8c 	bl	800871c <HAL_RCCEx_PeriphCLKConfig>
 8006204:	4603      	mov	r3, r0
 8006206:	2b00      	cmp	r3, #0
 8006208:	d001      	beq.n	800620e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800620a:	f7fc fcd1 	bl	8002bb0 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800620e:	4b7c      	ldr	r3, [pc, #496]	; (8006400 <HAL_UART_MspInit+0x240>)
 8006210:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006214:	4a7a      	ldr	r2, [pc, #488]	; (8006400 <HAL_UART_MspInit+0x240>)
 8006216:	f043 0310 	orr.w	r3, r3, #16
 800621a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800621e:	4b78      	ldr	r3, [pc, #480]	; (8006400 <HAL_UART_MspInit+0x240>)
 8006220:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006224:	f003 0310 	and.w	r3, r3, #16
 8006228:	627b      	str	r3, [r7, #36]	; 0x24
 800622a:	6a7b      	ldr	r3, [r7, #36]	; 0x24

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800622c:	4b74      	ldr	r3, [pc, #464]	; (8006400 <HAL_UART_MspInit+0x240>)
 800622e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006232:	4a73      	ldr	r2, [pc, #460]	; (8006400 <HAL_UART_MspInit+0x240>)
 8006234:	f043 0302 	orr.w	r3, r3, #2
 8006238:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800623c:	4b70      	ldr	r3, [pc, #448]	; (8006400 <HAL_UART_MspInit+0x240>)
 800623e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006242:	f003 0302 	and.w	r3, r3, #2
 8006246:	623b      	str	r3, [r7, #32]
 8006248:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800624a:	4b6d      	ldr	r3, [pc, #436]	; (8006400 <HAL_UART_MspInit+0x240>)
 800624c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006250:	4a6b      	ldr	r2, [pc, #428]	; (8006400 <HAL_UART_MspInit+0x240>)
 8006252:	f043 0301 	orr.w	r3, r3, #1
 8006256:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800625a:	4b69      	ldr	r3, [pc, #420]	; (8006400 <HAL_UART_MspInit+0x240>)
 800625c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006260:	f003 0301 	and.w	r3, r3, #1
 8006264:	61fb      	str	r3, [r7, #28]
 8006266:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration
    PB15     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = Jetson_RX_Pin;
 8006268:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800626c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006270:	2302      	movs	r3, #2
 8006272:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006276:	2300      	movs	r3, #0
 8006278:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800627c:	2300      	movs	r3, #0
 800627e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8006282:	2304      	movs	r3, #4
 8006284:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(Jetson_RX_GPIO_Port, &GPIO_InitStruct);
 8006288:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800628c:	4619      	mov	r1, r3
 800628e:	485d      	ldr	r0, [pc, #372]	; (8006404 <HAL_UART_MspInit+0x244>)
 8006290:	f001 f854 	bl	800733c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = Jetson_TX_Pin;
 8006294:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006298:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800629c:	2302      	movs	r3, #2
 800629e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80062a2:	2300      	movs	r3, #0
 80062a4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80062a8:	2300      	movs	r3, #0
 80062aa:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80062ae:	2307      	movs	r3, #7
 80062b0:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(Jetson_TX_GPIO_Port, &GPIO_InitStruct);
 80062b4:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80062b8:	4619      	mov	r1, r3
 80062ba:	4853      	ldr	r0, [pc, #332]	; (8006408 <HAL_UART_MspInit+0x248>)
 80062bc:	f001 f83e 	bl	800733c <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80062c0:	e097      	b.n	80063f2 <HAL_UART_MspInit+0x232>
  else if(uartHandle->Instance==USART2)
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	4a51      	ldr	r2, [pc, #324]	; (800640c <HAL_UART_MspInit+0x24c>)
 80062c8:	4293      	cmp	r3, r2
 80062ca:	d142      	bne.n	8006352 <HAL_UART_MspInit+0x192>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80062cc:	2302      	movs	r3, #2
 80062ce:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80062d0:	2300      	movs	r3, #0
 80062d2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80062d6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80062da:	4618      	mov	r0, r3
 80062dc:	f002 fa1e 	bl	800871c <HAL_RCCEx_PeriphCLKConfig>
 80062e0:	4603      	mov	r3, r0
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d001      	beq.n	80062ea <HAL_UART_MspInit+0x12a>
      Error_Handler();
 80062e6:	f7fc fc63 	bl	8002bb0 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 80062ea:	4b45      	ldr	r3, [pc, #276]	; (8006400 <HAL_UART_MspInit+0x240>)
 80062ec:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80062f0:	4a43      	ldr	r2, [pc, #268]	; (8006400 <HAL_UART_MspInit+0x240>)
 80062f2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80062f6:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80062fa:	4b41      	ldr	r3, [pc, #260]	; (8006400 <HAL_UART_MspInit+0x240>)
 80062fc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006300:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006304:	61bb      	str	r3, [r7, #24]
 8006306:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006308:	4b3d      	ldr	r3, [pc, #244]	; (8006400 <HAL_UART_MspInit+0x240>)
 800630a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800630e:	4a3c      	ldr	r2, [pc, #240]	; (8006400 <HAL_UART_MspInit+0x240>)
 8006310:	f043 0301 	orr.w	r3, r3, #1
 8006314:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8006318:	4b39      	ldr	r3, [pc, #228]	; (8006400 <HAL_UART_MspInit+0x240>)
 800631a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800631e:	f003 0301 	and.w	r3, r3, #1
 8006322:	617b      	str	r3, [r7, #20]
 8006324:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = NucleoF4_RX_Pin|NucleoF4_TX_Pin;
 8006326:	230c      	movs	r3, #12
 8006328:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800632c:	2302      	movs	r3, #2
 800632e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006332:	2300      	movs	r3, #0
 8006334:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006338:	2300      	movs	r3, #0
 800633a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800633e:	2307      	movs	r3, #7
 8006340:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006344:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8006348:	4619      	mov	r1, r3
 800634a:	482f      	ldr	r0, [pc, #188]	; (8006408 <HAL_UART_MspInit+0x248>)
 800634c:	f000 fff6 	bl	800733c <HAL_GPIO_Init>
}
 8006350:	e04f      	b.n	80063f2 <HAL_UART_MspInit+0x232>
  else if(uartHandle->Instance==USART3)
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	4a2e      	ldr	r2, [pc, #184]	; (8006410 <HAL_UART_MspInit+0x250>)
 8006358:	4293      	cmp	r3, r2
 800635a:	d14a      	bne.n	80063f2 <HAL_UART_MspInit+0x232>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800635c:	2302      	movs	r3, #2
 800635e:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8006360:	2300      	movs	r3, #0
 8006362:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8006366:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800636a:	4618      	mov	r0, r3
 800636c:	f002 f9d6 	bl	800871c <HAL_RCCEx_PeriphCLKConfig>
 8006370:	4603      	mov	r3, r0
 8006372:	2b00      	cmp	r3, #0
 8006374:	d001      	beq.n	800637a <HAL_UART_MspInit+0x1ba>
      Error_Handler();
 8006376:	f7fc fc1b 	bl	8002bb0 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 800637a:	4b21      	ldr	r3, [pc, #132]	; (8006400 <HAL_UART_MspInit+0x240>)
 800637c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006380:	4a1f      	ldr	r2, [pc, #124]	; (8006400 <HAL_UART_MspInit+0x240>)
 8006382:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006386:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800638a:	4b1d      	ldr	r3, [pc, #116]	; (8006400 <HAL_UART_MspInit+0x240>)
 800638c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006390:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006394:	613b      	str	r3, [r7, #16]
 8006396:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8006398:	4b19      	ldr	r3, [pc, #100]	; (8006400 <HAL_UART_MspInit+0x240>)
 800639a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800639e:	4a18      	ldr	r2, [pc, #96]	; (8006400 <HAL_UART_MspInit+0x240>)
 80063a0:	f043 0308 	orr.w	r3, r3, #8
 80063a4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80063a8:	4b15      	ldr	r3, [pc, #84]	; (8006400 <HAL_UART_MspInit+0x240>)
 80063aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80063ae:	f003 0308 	and.w	r3, r3, #8
 80063b2:	60fb      	str	r3, [r7, #12]
 80063b4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = STLINK_TX_Pin|STLINK_RX_Pin;
 80063b6:	f44f 7340 	mov.w	r3, #768	; 0x300
 80063ba:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80063be:	2302      	movs	r3, #2
 80063c0:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80063c4:	2300      	movs	r3, #0
 80063c6:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80063ca:	2300      	movs	r3, #0
 80063cc:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80063d0:	2307      	movs	r3, #7
 80063d2:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80063d6:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80063da:	4619      	mov	r1, r3
 80063dc:	480d      	ldr	r0, [pc, #52]	; (8006414 <HAL_UART_MspInit+0x254>)
 80063de:	f000 ffad 	bl	800733c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 1, 1);
 80063e2:	2201      	movs	r2, #1
 80063e4:	2101      	movs	r1, #1
 80063e6:	2027      	movs	r0, #39	; 0x27
 80063e8:	f000 fa01 	bl	80067ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80063ec:	2027      	movs	r0, #39	; 0x27
 80063ee:	f000 fa18 	bl	8006822 <HAL_NVIC_EnableIRQ>
}
 80063f2:	bf00      	nop
 80063f4:	37f8      	adds	r7, #248	; 0xf8
 80063f6:	46bd      	mov	sp, r7
 80063f8:	bd80      	pop	{r7, pc}
 80063fa:	bf00      	nop
 80063fc:	40011000 	.word	0x40011000
 8006400:	58024400 	.word	0x58024400
 8006404:	58020400 	.word	0x58020400
 8006408:	58020000 	.word	0x58020000
 800640c:	40004400 	.word	0x40004400
 8006410:	40004800 	.word	0x40004800
 8006414:	58020c00 	.word	0x58020c00

08006418 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8006418:	f8df d034 	ldr.w	sp, [pc, #52]	; 8006450 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800641c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800641e:	e003      	b.n	8006428 <LoopCopyDataInit>

08006420 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8006420:	4b0c      	ldr	r3, [pc, #48]	; (8006454 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8006422:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8006424:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8006426:	3104      	adds	r1, #4

08006428 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8006428:	480b      	ldr	r0, [pc, #44]	; (8006458 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800642a:	4b0c      	ldr	r3, [pc, #48]	; (800645c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800642c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800642e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8006430:	d3f6      	bcc.n	8006420 <CopyDataInit>
  ldr  r2, =_sbss
 8006432:	4a0b      	ldr	r2, [pc, #44]	; (8006460 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8006434:	e002      	b.n	800643c <LoopFillZerobss>

08006436 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8006436:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8006438:	f842 3b04 	str.w	r3, [r2], #4

0800643c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800643c:	4b09      	ldr	r3, [pc, #36]	; (8006464 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800643e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8006440:	d3f9      	bcc.n	8006436 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8006442:	f7fd fb83 	bl	8003b4c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8006446:	f007 ffe3 	bl	800e410 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800644a:	f7fc f88b 	bl	8002564 <main>
  bx  lr    
 800644e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8006450:	24080000 	.word	0x24080000
  ldr  r3, =_sidata
 8006454:	08013798 	.word	0x08013798
  ldr  r0, =_sdata
 8006458:	24000000 	.word	0x24000000
  ldr  r3, =_edata
 800645c:	24000258 	.word	0x24000258
  ldr  r2, =_sbss
 8006460:	24000258 	.word	0x24000258
  ldr  r3, = _ebss
 8006464:	24000a74 	.word	0x24000a74

08006468 <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8006468:	e7fe      	b.n	8006468 <ADC3_IRQHandler>
	...

0800646c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800646c:	b580      	push	{r7, lr}
 800646e:	b082      	sub	sp, #8
 8006470:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8006472:	2003      	movs	r0, #3
 8006474:	f000 f9b0 	bl	80067d8 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8006478:	f001 ff7a 	bl	8008370 <HAL_RCC_GetSysClockFreq>
 800647c:	4602      	mov	r2, r0
 800647e:	4b15      	ldr	r3, [pc, #84]	; (80064d4 <HAL_Init+0x68>)
 8006480:	699b      	ldr	r3, [r3, #24]
 8006482:	0a1b      	lsrs	r3, r3, #8
 8006484:	f003 030f 	and.w	r3, r3, #15
 8006488:	4913      	ldr	r1, [pc, #76]	; (80064d8 <HAL_Init+0x6c>)
 800648a:	5ccb      	ldrb	r3, [r1, r3]
 800648c:	f003 031f 	and.w	r3, r3, #31
 8006490:	fa22 f303 	lsr.w	r3, r2, r3
 8006494:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006496:	4b0f      	ldr	r3, [pc, #60]	; (80064d4 <HAL_Init+0x68>)
 8006498:	699b      	ldr	r3, [r3, #24]
 800649a:	f003 030f 	and.w	r3, r3, #15
 800649e:	4a0e      	ldr	r2, [pc, #56]	; (80064d8 <HAL_Init+0x6c>)
 80064a0:	5cd3      	ldrb	r3, [r2, r3]
 80064a2:	f003 031f 	and.w	r3, r3, #31
 80064a6:	687a      	ldr	r2, [r7, #4]
 80064a8:	fa22 f303 	lsr.w	r3, r2, r3
 80064ac:	4a0b      	ldr	r2, [pc, #44]	; (80064dc <HAL_Init+0x70>)
 80064ae:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80064b0:	4a0b      	ldr	r2, [pc, #44]	; (80064e0 <HAL_Init+0x74>)
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80064b6:	2000      	movs	r0, #0
 80064b8:	f000 f814 	bl	80064e4 <HAL_InitTick>
 80064bc:	4603      	mov	r3, r0
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d001      	beq.n	80064c6 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80064c2:	2301      	movs	r3, #1
 80064c4:	e002      	b.n	80064cc <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80064c6:	f7fd f9bf 	bl	8003848 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80064ca:	2300      	movs	r3, #0
}
 80064cc:	4618      	mov	r0, r3
 80064ce:	3708      	adds	r7, #8
 80064d0:	46bd      	mov	sp, r7
 80064d2:	bd80      	pop	{r7, pc}
 80064d4:	58024400 	.word	0x58024400
 80064d8:	08011a68 	.word	0x08011a68
 80064dc:	24000078 	.word	0x24000078
 80064e0:	24000074 	.word	0x24000074

080064e4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80064e4:	b580      	push	{r7, lr}
 80064e6:	b082      	sub	sp, #8
 80064e8:	af00      	add	r7, sp, #0
 80064ea:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80064ec:	4b15      	ldr	r3, [pc, #84]	; (8006544 <HAL_InitTick+0x60>)
 80064ee:	781b      	ldrb	r3, [r3, #0]
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d101      	bne.n	80064f8 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80064f4:	2301      	movs	r3, #1
 80064f6:	e021      	b.n	800653c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80064f8:	4b13      	ldr	r3, [pc, #76]	; (8006548 <HAL_InitTick+0x64>)
 80064fa:	681a      	ldr	r2, [r3, #0]
 80064fc:	4b11      	ldr	r3, [pc, #68]	; (8006544 <HAL_InitTick+0x60>)
 80064fe:	781b      	ldrb	r3, [r3, #0]
 8006500:	4619      	mov	r1, r3
 8006502:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006506:	fbb3 f3f1 	udiv	r3, r3, r1
 800650a:	fbb2 f3f3 	udiv	r3, r2, r3
 800650e:	4618      	mov	r0, r3
 8006510:	f000 f9a3 	bl	800685a <HAL_SYSTICK_Config>
 8006514:	4603      	mov	r3, r0
 8006516:	2b00      	cmp	r3, #0
 8006518:	d001      	beq.n	800651e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800651a:	2301      	movs	r3, #1
 800651c:	e00e      	b.n	800653c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	2b0f      	cmp	r3, #15
 8006522:	d80a      	bhi.n	800653a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8006524:	2200      	movs	r2, #0
 8006526:	6879      	ldr	r1, [r7, #4]
 8006528:	f04f 30ff 	mov.w	r0, #4294967295
 800652c:	f000 f95f 	bl	80067ee <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8006530:	4a06      	ldr	r2, [pc, #24]	; (800654c <HAL_InitTick+0x68>)
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8006536:	2300      	movs	r3, #0
 8006538:	e000      	b.n	800653c <HAL_InitTick+0x58>
    return HAL_ERROR;
 800653a:	2301      	movs	r3, #1
}
 800653c:	4618      	mov	r0, r3
 800653e:	3708      	adds	r7, #8
 8006540:	46bd      	mov	sp, r7
 8006542:	bd80      	pop	{r7, pc}
 8006544:	24000080 	.word	0x24000080
 8006548:	24000074 	.word	0x24000074
 800654c:	2400007c 	.word	0x2400007c

08006550 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8006550:	b480      	push	{r7}
 8006552:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8006554:	4b06      	ldr	r3, [pc, #24]	; (8006570 <HAL_IncTick+0x20>)
 8006556:	781b      	ldrb	r3, [r3, #0]
 8006558:	461a      	mov	r2, r3
 800655a:	4b06      	ldr	r3, [pc, #24]	; (8006574 <HAL_IncTick+0x24>)
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	4413      	add	r3, r2
 8006560:	4a04      	ldr	r2, [pc, #16]	; (8006574 <HAL_IncTick+0x24>)
 8006562:	6013      	str	r3, [r2, #0]
}
 8006564:	bf00      	nop
 8006566:	46bd      	mov	sp, r7
 8006568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800656c:	4770      	bx	lr
 800656e:	bf00      	nop
 8006570:	24000080 	.word	0x24000080
 8006574:	24000a60 	.word	0x24000a60

08006578 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8006578:	b480      	push	{r7}
 800657a:	af00      	add	r7, sp, #0
  return uwTick;
 800657c:	4b03      	ldr	r3, [pc, #12]	; (800658c <HAL_GetTick+0x14>)
 800657e:	681b      	ldr	r3, [r3, #0]
}
 8006580:	4618      	mov	r0, r3
 8006582:	46bd      	mov	sp, r7
 8006584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006588:	4770      	bx	lr
 800658a:	bf00      	nop
 800658c:	24000a60 	.word	0x24000a60

08006590 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8006590:	b580      	push	{r7, lr}
 8006592:	b084      	sub	sp, #16
 8006594:	af00      	add	r7, sp, #0
 8006596:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8006598:	f7ff ffee 	bl	8006578 <HAL_GetTick>
 800659c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065a8:	d005      	beq.n	80065b6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80065aa:	4b0a      	ldr	r3, [pc, #40]	; (80065d4 <HAL_Delay+0x44>)
 80065ac:	781b      	ldrb	r3, [r3, #0]
 80065ae:	461a      	mov	r2, r3
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	4413      	add	r3, r2
 80065b4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80065b6:	bf00      	nop
 80065b8:	f7ff ffde 	bl	8006578 <HAL_GetTick>
 80065bc:	4602      	mov	r2, r0
 80065be:	68bb      	ldr	r3, [r7, #8]
 80065c0:	1ad3      	subs	r3, r2, r3
 80065c2:	68fa      	ldr	r2, [r7, #12]
 80065c4:	429a      	cmp	r2, r3
 80065c6:	d8f7      	bhi.n	80065b8 <HAL_Delay+0x28>
  {
  }
}
 80065c8:	bf00      	nop
 80065ca:	bf00      	nop
 80065cc:	3710      	adds	r7, #16
 80065ce:	46bd      	mov	sp, r7
 80065d0:	bd80      	pop	{r7, pc}
 80065d2:	bf00      	nop
 80065d4:	24000080 	.word	0x24000080

080065d8 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80065d8:	b480      	push	{r7}
 80065da:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80065dc:	4b03      	ldr	r3, [pc, #12]	; (80065ec <HAL_GetREVID+0x14>)
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	0c1b      	lsrs	r3, r3, #16
}
 80065e2:	4618      	mov	r0, r3
 80065e4:	46bd      	mov	sp, r7
 80065e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ea:	4770      	bx	lr
 80065ec:	5c001000 	.word	0x5c001000

080065f0 <__NVIC_SetPriorityGrouping>:
{
 80065f0:	b480      	push	{r7}
 80065f2:	b085      	sub	sp, #20
 80065f4:	af00      	add	r7, sp, #0
 80065f6:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	f003 0307 	and.w	r3, r3, #7
 80065fe:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006600:	4b0b      	ldr	r3, [pc, #44]	; (8006630 <__NVIC_SetPriorityGrouping+0x40>)
 8006602:	68db      	ldr	r3, [r3, #12]
 8006604:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006606:	68ba      	ldr	r2, [r7, #8]
 8006608:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800660c:	4013      	ands	r3, r2
 800660e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006614:	68bb      	ldr	r3, [r7, #8]
 8006616:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8006618:	4b06      	ldr	r3, [pc, #24]	; (8006634 <__NVIC_SetPriorityGrouping+0x44>)
 800661a:	4313      	orrs	r3, r2
 800661c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800661e:	4a04      	ldr	r2, [pc, #16]	; (8006630 <__NVIC_SetPriorityGrouping+0x40>)
 8006620:	68bb      	ldr	r3, [r7, #8]
 8006622:	60d3      	str	r3, [r2, #12]
}
 8006624:	bf00      	nop
 8006626:	3714      	adds	r7, #20
 8006628:	46bd      	mov	sp, r7
 800662a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800662e:	4770      	bx	lr
 8006630:	e000ed00 	.word	0xe000ed00
 8006634:	05fa0000 	.word	0x05fa0000

08006638 <__NVIC_GetPriorityGrouping>:
{
 8006638:	b480      	push	{r7}
 800663a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800663c:	4b04      	ldr	r3, [pc, #16]	; (8006650 <__NVIC_GetPriorityGrouping+0x18>)
 800663e:	68db      	ldr	r3, [r3, #12]
 8006640:	0a1b      	lsrs	r3, r3, #8
 8006642:	f003 0307 	and.w	r3, r3, #7
}
 8006646:	4618      	mov	r0, r3
 8006648:	46bd      	mov	sp, r7
 800664a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800664e:	4770      	bx	lr
 8006650:	e000ed00 	.word	0xe000ed00

08006654 <__NVIC_EnableIRQ>:
{
 8006654:	b480      	push	{r7}
 8006656:	b083      	sub	sp, #12
 8006658:	af00      	add	r7, sp, #0
 800665a:	4603      	mov	r3, r0
 800665c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800665e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006662:	2b00      	cmp	r3, #0
 8006664:	db0b      	blt.n	800667e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006666:	88fb      	ldrh	r3, [r7, #6]
 8006668:	f003 021f 	and.w	r2, r3, #31
 800666c:	4907      	ldr	r1, [pc, #28]	; (800668c <__NVIC_EnableIRQ+0x38>)
 800666e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006672:	095b      	lsrs	r3, r3, #5
 8006674:	2001      	movs	r0, #1
 8006676:	fa00 f202 	lsl.w	r2, r0, r2
 800667a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800667e:	bf00      	nop
 8006680:	370c      	adds	r7, #12
 8006682:	46bd      	mov	sp, r7
 8006684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006688:	4770      	bx	lr
 800668a:	bf00      	nop
 800668c:	e000e100 	.word	0xe000e100

08006690 <__NVIC_DisableIRQ>:
{
 8006690:	b480      	push	{r7}
 8006692:	b083      	sub	sp, #12
 8006694:	af00      	add	r7, sp, #0
 8006696:	4603      	mov	r3, r0
 8006698:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800669a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800669e:	2b00      	cmp	r3, #0
 80066a0:	db12      	blt.n	80066c8 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80066a2:	88fb      	ldrh	r3, [r7, #6]
 80066a4:	f003 021f 	and.w	r2, r3, #31
 80066a8:	490a      	ldr	r1, [pc, #40]	; (80066d4 <__NVIC_DisableIRQ+0x44>)
 80066aa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80066ae:	095b      	lsrs	r3, r3, #5
 80066b0:	2001      	movs	r0, #1
 80066b2:	fa00 f202 	lsl.w	r2, r0, r2
 80066b6:	3320      	adds	r3, #32
 80066b8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 80066bc:	f3bf 8f4f 	dsb	sy
}
 80066c0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80066c2:	f3bf 8f6f 	isb	sy
}
 80066c6:	bf00      	nop
}
 80066c8:	bf00      	nop
 80066ca:	370c      	adds	r7, #12
 80066cc:	46bd      	mov	sp, r7
 80066ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066d2:	4770      	bx	lr
 80066d4:	e000e100 	.word	0xe000e100

080066d8 <__NVIC_SetPriority>:
{
 80066d8:	b480      	push	{r7}
 80066da:	b083      	sub	sp, #12
 80066dc:	af00      	add	r7, sp, #0
 80066de:	4603      	mov	r3, r0
 80066e0:	6039      	str	r1, [r7, #0]
 80066e2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80066e4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	db0a      	blt.n	8006702 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80066ec:	683b      	ldr	r3, [r7, #0]
 80066ee:	b2da      	uxtb	r2, r3
 80066f0:	490c      	ldr	r1, [pc, #48]	; (8006724 <__NVIC_SetPriority+0x4c>)
 80066f2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80066f6:	0112      	lsls	r2, r2, #4
 80066f8:	b2d2      	uxtb	r2, r2
 80066fa:	440b      	add	r3, r1
 80066fc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8006700:	e00a      	b.n	8006718 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006702:	683b      	ldr	r3, [r7, #0]
 8006704:	b2da      	uxtb	r2, r3
 8006706:	4908      	ldr	r1, [pc, #32]	; (8006728 <__NVIC_SetPriority+0x50>)
 8006708:	88fb      	ldrh	r3, [r7, #6]
 800670a:	f003 030f 	and.w	r3, r3, #15
 800670e:	3b04      	subs	r3, #4
 8006710:	0112      	lsls	r2, r2, #4
 8006712:	b2d2      	uxtb	r2, r2
 8006714:	440b      	add	r3, r1
 8006716:	761a      	strb	r2, [r3, #24]
}
 8006718:	bf00      	nop
 800671a:	370c      	adds	r7, #12
 800671c:	46bd      	mov	sp, r7
 800671e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006722:	4770      	bx	lr
 8006724:	e000e100 	.word	0xe000e100
 8006728:	e000ed00 	.word	0xe000ed00

0800672c <NVIC_EncodePriority>:
{
 800672c:	b480      	push	{r7}
 800672e:	b089      	sub	sp, #36	; 0x24
 8006730:	af00      	add	r7, sp, #0
 8006732:	60f8      	str	r0, [r7, #12]
 8006734:	60b9      	str	r1, [r7, #8]
 8006736:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	f003 0307 	and.w	r3, r3, #7
 800673e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006740:	69fb      	ldr	r3, [r7, #28]
 8006742:	f1c3 0307 	rsb	r3, r3, #7
 8006746:	2b04      	cmp	r3, #4
 8006748:	bf28      	it	cs
 800674a:	2304      	movcs	r3, #4
 800674c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800674e:	69fb      	ldr	r3, [r7, #28]
 8006750:	3304      	adds	r3, #4
 8006752:	2b06      	cmp	r3, #6
 8006754:	d902      	bls.n	800675c <NVIC_EncodePriority+0x30>
 8006756:	69fb      	ldr	r3, [r7, #28]
 8006758:	3b03      	subs	r3, #3
 800675a:	e000      	b.n	800675e <NVIC_EncodePriority+0x32>
 800675c:	2300      	movs	r3, #0
 800675e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006760:	f04f 32ff 	mov.w	r2, #4294967295
 8006764:	69bb      	ldr	r3, [r7, #24]
 8006766:	fa02 f303 	lsl.w	r3, r2, r3
 800676a:	43da      	mvns	r2, r3
 800676c:	68bb      	ldr	r3, [r7, #8]
 800676e:	401a      	ands	r2, r3
 8006770:	697b      	ldr	r3, [r7, #20]
 8006772:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006774:	f04f 31ff 	mov.w	r1, #4294967295
 8006778:	697b      	ldr	r3, [r7, #20]
 800677a:	fa01 f303 	lsl.w	r3, r1, r3
 800677e:	43d9      	mvns	r1, r3
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006784:	4313      	orrs	r3, r2
}
 8006786:	4618      	mov	r0, r3
 8006788:	3724      	adds	r7, #36	; 0x24
 800678a:	46bd      	mov	sp, r7
 800678c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006790:	4770      	bx	lr
	...

08006794 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8006794:	b580      	push	{r7, lr}
 8006796:	b082      	sub	sp, #8
 8006798:	af00      	add	r7, sp, #0
 800679a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	3b01      	subs	r3, #1
 80067a0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80067a4:	d301      	bcc.n	80067aa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80067a6:	2301      	movs	r3, #1
 80067a8:	e00f      	b.n	80067ca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80067aa:	4a0a      	ldr	r2, [pc, #40]	; (80067d4 <SysTick_Config+0x40>)
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	3b01      	subs	r3, #1
 80067b0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80067b2:	210f      	movs	r1, #15
 80067b4:	f04f 30ff 	mov.w	r0, #4294967295
 80067b8:	f7ff ff8e 	bl	80066d8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80067bc:	4b05      	ldr	r3, [pc, #20]	; (80067d4 <SysTick_Config+0x40>)
 80067be:	2200      	movs	r2, #0
 80067c0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80067c2:	4b04      	ldr	r3, [pc, #16]	; (80067d4 <SysTick_Config+0x40>)
 80067c4:	2207      	movs	r2, #7
 80067c6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80067c8:	2300      	movs	r3, #0
}
 80067ca:	4618      	mov	r0, r3
 80067cc:	3708      	adds	r7, #8
 80067ce:	46bd      	mov	sp, r7
 80067d0:	bd80      	pop	{r7, pc}
 80067d2:	bf00      	nop
 80067d4:	e000e010 	.word	0xe000e010

080067d8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80067d8:	b580      	push	{r7, lr}
 80067da:	b082      	sub	sp, #8
 80067dc:	af00      	add	r7, sp, #0
 80067de:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80067e0:	6878      	ldr	r0, [r7, #4]
 80067e2:	f7ff ff05 	bl	80065f0 <__NVIC_SetPriorityGrouping>
}
 80067e6:	bf00      	nop
 80067e8:	3708      	adds	r7, #8
 80067ea:	46bd      	mov	sp, r7
 80067ec:	bd80      	pop	{r7, pc}

080067ee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80067ee:	b580      	push	{r7, lr}
 80067f0:	b086      	sub	sp, #24
 80067f2:	af00      	add	r7, sp, #0
 80067f4:	4603      	mov	r3, r0
 80067f6:	60b9      	str	r1, [r7, #8]
 80067f8:	607a      	str	r2, [r7, #4]
 80067fa:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80067fc:	f7ff ff1c 	bl	8006638 <__NVIC_GetPriorityGrouping>
 8006800:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006802:	687a      	ldr	r2, [r7, #4]
 8006804:	68b9      	ldr	r1, [r7, #8]
 8006806:	6978      	ldr	r0, [r7, #20]
 8006808:	f7ff ff90 	bl	800672c <NVIC_EncodePriority>
 800680c:	4602      	mov	r2, r0
 800680e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8006812:	4611      	mov	r1, r2
 8006814:	4618      	mov	r0, r3
 8006816:	f7ff ff5f 	bl	80066d8 <__NVIC_SetPriority>
}
 800681a:	bf00      	nop
 800681c:	3718      	adds	r7, #24
 800681e:	46bd      	mov	sp, r7
 8006820:	bd80      	pop	{r7, pc}

08006822 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006822:	b580      	push	{r7, lr}
 8006824:	b082      	sub	sp, #8
 8006826:	af00      	add	r7, sp, #0
 8006828:	4603      	mov	r3, r0
 800682a:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800682c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006830:	4618      	mov	r0, r3
 8006832:	f7ff ff0f 	bl	8006654 <__NVIC_EnableIRQ>
}
 8006836:	bf00      	nop
 8006838:	3708      	adds	r7, #8
 800683a:	46bd      	mov	sp, r7
 800683c:	bd80      	pop	{r7, pc}

0800683e <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800683e:	b580      	push	{r7, lr}
 8006840:	b082      	sub	sp, #8
 8006842:	af00      	add	r7, sp, #0
 8006844:	4603      	mov	r3, r0
 8006846:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8006848:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800684c:	4618      	mov	r0, r3
 800684e:	f7ff ff1f 	bl	8006690 <__NVIC_DisableIRQ>
}
 8006852:	bf00      	nop
 8006854:	3708      	adds	r7, #8
 8006856:	46bd      	mov	sp, r7
 8006858:	bd80      	pop	{r7, pc}

0800685a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800685a:	b580      	push	{r7, lr}
 800685c:	b082      	sub	sp, #8
 800685e:	af00      	add	r7, sp, #0
 8006860:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8006862:	6878      	ldr	r0, [r7, #4]
 8006864:	f7ff ff96 	bl	8006794 <SysTick_Config>
 8006868:	4603      	mov	r3, r0
}
 800686a:	4618      	mov	r0, r3
 800686c:	3708      	adds	r7, #8
 800686e:	46bd      	mov	sp, r7
 8006870:	bd80      	pop	{r7, pc}
	...

08006874 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8006874:	b580      	push	{r7, lr}
 8006876:	b086      	sub	sp, #24
 8006878:	af00      	add	r7, sp, #0
 800687a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 800687c:	f7ff fe7c 	bl	8006578 <HAL_GetTick>
 8006880:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	2b00      	cmp	r3, #0
 8006886:	d101      	bne.n	800688c <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8006888:	2301      	movs	r3, #1
 800688a:	e2dc      	b.n	8006e46 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006892:	b2db      	uxtb	r3, r3
 8006894:	2b02      	cmp	r3, #2
 8006896:	d008      	beq.n	80068aa <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	2280      	movs	r2, #128	; 0x80
 800689c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	2200      	movs	r2, #0
 80068a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 80068a6:	2301      	movs	r3, #1
 80068a8:	e2cd      	b.n	8006e46 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	4a76      	ldr	r2, [pc, #472]	; (8006a88 <HAL_DMA_Abort+0x214>)
 80068b0:	4293      	cmp	r3, r2
 80068b2:	d04a      	beq.n	800694a <HAL_DMA_Abort+0xd6>
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	4a74      	ldr	r2, [pc, #464]	; (8006a8c <HAL_DMA_Abort+0x218>)
 80068ba:	4293      	cmp	r3, r2
 80068bc:	d045      	beq.n	800694a <HAL_DMA_Abort+0xd6>
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	4a73      	ldr	r2, [pc, #460]	; (8006a90 <HAL_DMA_Abort+0x21c>)
 80068c4:	4293      	cmp	r3, r2
 80068c6:	d040      	beq.n	800694a <HAL_DMA_Abort+0xd6>
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	4a71      	ldr	r2, [pc, #452]	; (8006a94 <HAL_DMA_Abort+0x220>)
 80068ce:	4293      	cmp	r3, r2
 80068d0:	d03b      	beq.n	800694a <HAL_DMA_Abort+0xd6>
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	4a70      	ldr	r2, [pc, #448]	; (8006a98 <HAL_DMA_Abort+0x224>)
 80068d8:	4293      	cmp	r3, r2
 80068da:	d036      	beq.n	800694a <HAL_DMA_Abort+0xd6>
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	4a6e      	ldr	r2, [pc, #440]	; (8006a9c <HAL_DMA_Abort+0x228>)
 80068e2:	4293      	cmp	r3, r2
 80068e4:	d031      	beq.n	800694a <HAL_DMA_Abort+0xd6>
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	4a6d      	ldr	r2, [pc, #436]	; (8006aa0 <HAL_DMA_Abort+0x22c>)
 80068ec:	4293      	cmp	r3, r2
 80068ee:	d02c      	beq.n	800694a <HAL_DMA_Abort+0xd6>
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	4a6b      	ldr	r2, [pc, #428]	; (8006aa4 <HAL_DMA_Abort+0x230>)
 80068f6:	4293      	cmp	r3, r2
 80068f8:	d027      	beq.n	800694a <HAL_DMA_Abort+0xd6>
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	4a6a      	ldr	r2, [pc, #424]	; (8006aa8 <HAL_DMA_Abort+0x234>)
 8006900:	4293      	cmp	r3, r2
 8006902:	d022      	beq.n	800694a <HAL_DMA_Abort+0xd6>
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	4a68      	ldr	r2, [pc, #416]	; (8006aac <HAL_DMA_Abort+0x238>)
 800690a:	4293      	cmp	r3, r2
 800690c:	d01d      	beq.n	800694a <HAL_DMA_Abort+0xd6>
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	4a67      	ldr	r2, [pc, #412]	; (8006ab0 <HAL_DMA_Abort+0x23c>)
 8006914:	4293      	cmp	r3, r2
 8006916:	d018      	beq.n	800694a <HAL_DMA_Abort+0xd6>
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	4a65      	ldr	r2, [pc, #404]	; (8006ab4 <HAL_DMA_Abort+0x240>)
 800691e:	4293      	cmp	r3, r2
 8006920:	d013      	beq.n	800694a <HAL_DMA_Abort+0xd6>
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	4a64      	ldr	r2, [pc, #400]	; (8006ab8 <HAL_DMA_Abort+0x244>)
 8006928:	4293      	cmp	r3, r2
 800692a:	d00e      	beq.n	800694a <HAL_DMA_Abort+0xd6>
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	4a62      	ldr	r2, [pc, #392]	; (8006abc <HAL_DMA_Abort+0x248>)
 8006932:	4293      	cmp	r3, r2
 8006934:	d009      	beq.n	800694a <HAL_DMA_Abort+0xd6>
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	4a61      	ldr	r2, [pc, #388]	; (8006ac0 <HAL_DMA_Abort+0x24c>)
 800693c:	4293      	cmp	r3, r2
 800693e:	d004      	beq.n	800694a <HAL_DMA_Abort+0xd6>
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	4a5f      	ldr	r2, [pc, #380]	; (8006ac4 <HAL_DMA_Abort+0x250>)
 8006946:	4293      	cmp	r3, r2
 8006948:	d101      	bne.n	800694e <HAL_DMA_Abort+0xda>
 800694a:	2301      	movs	r3, #1
 800694c:	e000      	b.n	8006950 <HAL_DMA_Abort+0xdc>
 800694e:	2300      	movs	r3, #0
 8006950:	2b00      	cmp	r3, #0
 8006952:	d013      	beq.n	800697c <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	681a      	ldr	r2, [r3, #0]
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	f022 021e 	bic.w	r2, r2, #30
 8006962:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	695a      	ldr	r2, [r3, #20]
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006972:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	617b      	str	r3, [r7, #20]
 800697a:	e00a      	b.n	8006992 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	681a      	ldr	r2, [r3, #0]
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	f022 020e 	bic.w	r2, r2, #14
 800698a:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	4a3c      	ldr	r2, [pc, #240]	; (8006a88 <HAL_DMA_Abort+0x214>)
 8006998:	4293      	cmp	r3, r2
 800699a:	d072      	beq.n	8006a82 <HAL_DMA_Abort+0x20e>
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	4a3a      	ldr	r2, [pc, #232]	; (8006a8c <HAL_DMA_Abort+0x218>)
 80069a2:	4293      	cmp	r3, r2
 80069a4:	d06d      	beq.n	8006a82 <HAL_DMA_Abort+0x20e>
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	4a39      	ldr	r2, [pc, #228]	; (8006a90 <HAL_DMA_Abort+0x21c>)
 80069ac:	4293      	cmp	r3, r2
 80069ae:	d068      	beq.n	8006a82 <HAL_DMA_Abort+0x20e>
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	4a37      	ldr	r2, [pc, #220]	; (8006a94 <HAL_DMA_Abort+0x220>)
 80069b6:	4293      	cmp	r3, r2
 80069b8:	d063      	beq.n	8006a82 <HAL_DMA_Abort+0x20e>
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	4a36      	ldr	r2, [pc, #216]	; (8006a98 <HAL_DMA_Abort+0x224>)
 80069c0:	4293      	cmp	r3, r2
 80069c2:	d05e      	beq.n	8006a82 <HAL_DMA_Abort+0x20e>
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	4a34      	ldr	r2, [pc, #208]	; (8006a9c <HAL_DMA_Abort+0x228>)
 80069ca:	4293      	cmp	r3, r2
 80069cc:	d059      	beq.n	8006a82 <HAL_DMA_Abort+0x20e>
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	4a33      	ldr	r2, [pc, #204]	; (8006aa0 <HAL_DMA_Abort+0x22c>)
 80069d4:	4293      	cmp	r3, r2
 80069d6:	d054      	beq.n	8006a82 <HAL_DMA_Abort+0x20e>
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	4a31      	ldr	r2, [pc, #196]	; (8006aa4 <HAL_DMA_Abort+0x230>)
 80069de:	4293      	cmp	r3, r2
 80069e0:	d04f      	beq.n	8006a82 <HAL_DMA_Abort+0x20e>
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	4a30      	ldr	r2, [pc, #192]	; (8006aa8 <HAL_DMA_Abort+0x234>)
 80069e8:	4293      	cmp	r3, r2
 80069ea:	d04a      	beq.n	8006a82 <HAL_DMA_Abort+0x20e>
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	4a2e      	ldr	r2, [pc, #184]	; (8006aac <HAL_DMA_Abort+0x238>)
 80069f2:	4293      	cmp	r3, r2
 80069f4:	d045      	beq.n	8006a82 <HAL_DMA_Abort+0x20e>
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	4a2d      	ldr	r2, [pc, #180]	; (8006ab0 <HAL_DMA_Abort+0x23c>)
 80069fc:	4293      	cmp	r3, r2
 80069fe:	d040      	beq.n	8006a82 <HAL_DMA_Abort+0x20e>
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	4a2b      	ldr	r2, [pc, #172]	; (8006ab4 <HAL_DMA_Abort+0x240>)
 8006a06:	4293      	cmp	r3, r2
 8006a08:	d03b      	beq.n	8006a82 <HAL_DMA_Abort+0x20e>
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	4a2a      	ldr	r2, [pc, #168]	; (8006ab8 <HAL_DMA_Abort+0x244>)
 8006a10:	4293      	cmp	r3, r2
 8006a12:	d036      	beq.n	8006a82 <HAL_DMA_Abort+0x20e>
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	4a28      	ldr	r2, [pc, #160]	; (8006abc <HAL_DMA_Abort+0x248>)
 8006a1a:	4293      	cmp	r3, r2
 8006a1c:	d031      	beq.n	8006a82 <HAL_DMA_Abort+0x20e>
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	4a27      	ldr	r2, [pc, #156]	; (8006ac0 <HAL_DMA_Abort+0x24c>)
 8006a24:	4293      	cmp	r3, r2
 8006a26:	d02c      	beq.n	8006a82 <HAL_DMA_Abort+0x20e>
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	4a25      	ldr	r2, [pc, #148]	; (8006ac4 <HAL_DMA_Abort+0x250>)
 8006a2e:	4293      	cmp	r3, r2
 8006a30:	d027      	beq.n	8006a82 <HAL_DMA_Abort+0x20e>
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	4a24      	ldr	r2, [pc, #144]	; (8006ac8 <HAL_DMA_Abort+0x254>)
 8006a38:	4293      	cmp	r3, r2
 8006a3a:	d022      	beq.n	8006a82 <HAL_DMA_Abort+0x20e>
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	4a22      	ldr	r2, [pc, #136]	; (8006acc <HAL_DMA_Abort+0x258>)
 8006a42:	4293      	cmp	r3, r2
 8006a44:	d01d      	beq.n	8006a82 <HAL_DMA_Abort+0x20e>
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	4a21      	ldr	r2, [pc, #132]	; (8006ad0 <HAL_DMA_Abort+0x25c>)
 8006a4c:	4293      	cmp	r3, r2
 8006a4e:	d018      	beq.n	8006a82 <HAL_DMA_Abort+0x20e>
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	4a1f      	ldr	r2, [pc, #124]	; (8006ad4 <HAL_DMA_Abort+0x260>)
 8006a56:	4293      	cmp	r3, r2
 8006a58:	d013      	beq.n	8006a82 <HAL_DMA_Abort+0x20e>
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	4a1e      	ldr	r2, [pc, #120]	; (8006ad8 <HAL_DMA_Abort+0x264>)
 8006a60:	4293      	cmp	r3, r2
 8006a62:	d00e      	beq.n	8006a82 <HAL_DMA_Abort+0x20e>
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	4a1c      	ldr	r2, [pc, #112]	; (8006adc <HAL_DMA_Abort+0x268>)
 8006a6a:	4293      	cmp	r3, r2
 8006a6c:	d009      	beq.n	8006a82 <HAL_DMA_Abort+0x20e>
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	4a1b      	ldr	r2, [pc, #108]	; (8006ae0 <HAL_DMA_Abort+0x26c>)
 8006a74:	4293      	cmp	r3, r2
 8006a76:	d004      	beq.n	8006a82 <HAL_DMA_Abort+0x20e>
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	4a19      	ldr	r2, [pc, #100]	; (8006ae4 <HAL_DMA_Abort+0x270>)
 8006a7e:	4293      	cmp	r3, r2
 8006a80:	d132      	bne.n	8006ae8 <HAL_DMA_Abort+0x274>
 8006a82:	2301      	movs	r3, #1
 8006a84:	e031      	b.n	8006aea <HAL_DMA_Abort+0x276>
 8006a86:	bf00      	nop
 8006a88:	40020010 	.word	0x40020010
 8006a8c:	40020028 	.word	0x40020028
 8006a90:	40020040 	.word	0x40020040
 8006a94:	40020058 	.word	0x40020058
 8006a98:	40020070 	.word	0x40020070
 8006a9c:	40020088 	.word	0x40020088
 8006aa0:	400200a0 	.word	0x400200a0
 8006aa4:	400200b8 	.word	0x400200b8
 8006aa8:	40020410 	.word	0x40020410
 8006aac:	40020428 	.word	0x40020428
 8006ab0:	40020440 	.word	0x40020440
 8006ab4:	40020458 	.word	0x40020458
 8006ab8:	40020470 	.word	0x40020470
 8006abc:	40020488 	.word	0x40020488
 8006ac0:	400204a0 	.word	0x400204a0
 8006ac4:	400204b8 	.word	0x400204b8
 8006ac8:	58025408 	.word	0x58025408
 8006acc:	5802541c 	.word	0x5802541c
 8006ad0:	58025430 	.word	0x58025430
 8006ad4:	58025444 	.word	0x58025444
 8006ad8:	58025458 	.word	0x58025458
 8006adc:	5802546c 	.word	0x5802546c
 8006ae0:	58025480 	.word	0x58025480
 8006ae4:	58025494 	.word	0x58025494
 8006ae8:	2300      	movs	r3, #0
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d007      	beq.n	8006afe <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006af2:	681a      	ldr	r2, [r3, #0]
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006af8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006afc:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	4a6d      	ldr	r2, [pc, #436]	; (8006cb8 <HAL_DMA_Abort+0x444>)
 8006b04:	4293      	cmp	r3, r2
 8006b06:	d04a      	beq.n	8006b9e <HAL_DMA_Abort+0x32a>
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	4a6b      	ldr	r2, [pc, #428]	; (8006cbc <HAL_DMA_Abort+0x448>)
 8006b0e:	4293      	cmp	r3, r2
 8006b10:	d045      	beq.n	8006b9e <HAL_DMA_Abort+0x32a>
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	4a6a      	ldr	r2, [pc, #424]	; (8006cc0 <HAL_DMA_Abort+0x44c>)
 8006b18:	4293      	cmp	r3, r2
 8006b1a:	d040      	beq.n	8006b9e <HAL_DMA_Abort+0x32a>
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	4a68      	ldr	r2, [pc, #416]	; (8006cc4 <HAL_DMA_Abort+0x450>)
 8006b22:	4293      	cmp	r3, r2
 8006b24:	d03b      	beq.n	8006b9e <HAL_DMA_Abort+0x32a>
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	4a67      	ldr	r2, [pc, #412]	; (8006cc8 <HAL_DMA_Abort+0x454>)
 8006b2c:	4293      	cmp	r3, r2
 8006b2e:	d036      	beq.n	8006b9e <HAL_DMA_Abort+0x32a>
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	4a65      	ldr	r2, [pc, #404]	; (8006ccc <HAL_DMA_Abort+0x458>)
 8006b36:	4293      	cmp	r3, r2
 8006b38:	d031      	beq.n	8006b9e <HAL_DMA_Abort+0x32a>
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	4a64      	ldr	r2, [pc, #400]	; (8006cd0 <HAL_DMA_Abort+0x45c>)
 8006b40:	4293      	cmp	r3, r2
 8006b42:	d02c      	beq.n	8006b9e <HAL_DMA_Abort+0x32a>
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	4a62      	ldr	r2, [pc, #392]	; (8006cd4 <HAL_DMA_Abort+0x460>)
 8006b4a:	4293      	cmp	r3, r2
 8006b4c:	d027      	beq.n	8006b9e <HAL_DMA_Abort+0x32a>
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	4a61      	ldr	r2, [pc, #388]	; (8006cd8 <HAL_DMA_Abort+0x464>)
 8006b54:	4293      	cmp	r3, r2
 8006b56:	d022      	beq.n	8006b9e <HAL_DMA_Abort+0x32a>
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	4a5f      	ldr	r2, [pc, #380]	; (8006cdc <HAL_DMA_Abort+0x468>)
 8006b5e:	4293      	cmp	r3, r2
 8006b60:	d01d      	beq.n	8006b9e <HAL_DMA_Abort+0x32a>
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	4a5e      	ldr	r2, [pc, #376]	; (8006ce0 <HAL_DMA_Abort+0x46c>)
 8006b68:	4293      	cmp	r3, r2
 8006b6a:	d018      	beq.n	8006b9e <HAL_DMA_Abort+0x32a>
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	4a5c      	ldr	r2, [pc, #368]	; (8006ce4 <HAL_DMA_Abort+0x470>)
 8006b72:	4293      	cmp	r3, r2
 8006b74:	d013      	beq.n	8006b9e <HAL_DMA_Abort+0x32a>
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	4a5b      	ldr	r2, [pc, #364]	; (8006ce8 <HAL_DMA_Abort+0x474>)
 8006b7c:	4293      	cmp	r3, r2
 8006b7e:	d00e      	beq.n	8006b9e <HAL_DMA_Abort+0x32a>
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	4a59      	ldr	r2, [pc, #356]	; (8006cec <HAL_DMA_Abort+0x478>)
 8006b86:	4293      	cmp	r3, r2
 8006b88:	d009      	beq.n	8006b9e <HAL_DMA_Abort+0x32a>
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	4a58      	ldr	r2, [pc, #352]	; (8006cf0 <HAL_DMA_Abort+0x47c>)
 8006b90:	4293      	cmp	r3, r2
 8006b92:	d004      	beq.n	8006b9e <HAL_DMA_Abort+0x32a>
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	4a56      	ldr	r2, [pc, #344]	; (8006cf4 <HAL_DMA_Abort+0x480>)
 8006b9a:	4293      	cmp	r3, r2
 8006b9c:	d108      	bne.n	8006bb0 <HAL_DMA_Abort+0x33c>
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	681a      	ldr	r2, [r3, #0]
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	f022 0201 	bic.w	r2, r2, #1
 8006bac:	601a      	str	r2, [r3, #0]
 8006bae:	e007      	b.n	8006bc0 <HAL_DMA_Abort+0x34c>
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	681a      	ldr	r2, [r3, #0]
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	f022 0201 	bic.w	r2, r2, #1
 8006bbe:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8006bc0:	e013      	b.n	8006bea <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8006bc2:	f7ff fcd9 	bl	8006578 <HAL_GetTick>
 8006bc6:	4602      	mov	r2, r0
 8006bc8:	693b      	ldr	r3, [r7, #16]
 8006bca:	1ad3      	subs	r3, r2, r3
 8006bcc:	2b05      	cmp	r3, #5
 8006bce:	d90c      	bls.n	8006bea <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	2220      	movs	r2, #32
 8006bd4:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	2203      	movs	r2, #3
 8006bda:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	2200      	movs	r2, #0
 8006be2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 8006be6:	2301      	movs	r3, #1
 8006be8:	e12d      	b.n	8006e46 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8006bea:	697b      	ldr	r3, [r7, #20]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	f003 0301 	and.w	r3, r3, #1
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d1e5      	bne.n	8006bc2 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	4a2f      	ldr	r2, [pc, #188]	; (8006cb8 <HAL_DMA_Abort+0x444>)
 8006bfc:	4293      	cmp	r3, r2
 8006bfe:	d04a      	beq.n	8006c96 <HAL_DMA_Abort+0x422>
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	4a2d      	ldr	r2, [pc, #180]	; (8006cbc <HAL_DMA_Abort+0x448>)
 8006c06:	4293      	cmp	r3, r2
 8006c08:	d045      	beq.n	8006c96 <HAL_DMA_Abort+0x422>
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	4a2c      	ldr	r2, [pc, #176]	; (8006cc0 <HAL_DMA_Abort+0x44c>)
 8006c10:	4293      	cmp	r3, r2
 8006c12:	d040      	beq.n	8006c96 <HAL_DMA_Abort+0x422>
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	4a2a      	ldr	r2, [pc, #168]	; (8006cc4 <HAL_DMA_Abort+0x450>)
 8006c1a:	4293      	cmp	r3, r2
 8006c1c:	d03b      	beq.n	8006c96 <HAL_DMA_Abort+0x422>
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	4a29      	ldr	r2, [pc, #164]	; (8006cc8 <HAL_DMA_Abort+0x454>)
 8006c24:	4293      	cmp	r3, r2
 8006c26:	d036      	beq.n	8006c96 <HAL_DMA_Abort+0x422>
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	4a27      	ldr	r2, [pc, #156]	; (8006ccc <HAL_DMA_Abort+0x458>)
 8006c2e:	4293      	cmp	r3, r2
 8006c30:	d031      	beq.n	8006c96 <HAL_DMA_Abort+0x422>
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	4a26      	ldr	r2, [pc, #152]	; (8006cd0 <HAL_DMA_Abort+0x45c>)
 8006c38:	4293      	cmp	r3, r2
 8006c3a:	d02c      	beq.n	8006c96 <HAL_DMA_Abort+0x422>
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	4a24      	ldr	r2, [pc, #144]	; (8006cd4 <HAL_DMA_Abort+0x460>)
 8006c42:	4293      	cmp	r3, r2
 8006c44:	d027      	beq.n	8006c96 <HAL_DMA_Abort+0x422>
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	4a23      	ldr	r2, [pc, #140]	; (8006cd8 <HAL_DMA_Abort+0x464>)
 8006c4c:	4293      	cmp	r3, r2
 8006c4e:	d022      	beq.n	8006c96 <HAL_DMA_Abort+0x422>
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	4a21      	ldr	r2, [pc, #132]	; (8006cdc <HAL_DMA_Abort+0x468>)
 8006c56:	4293      	cmp	r3, r2
 8006c58:	d01d      	beq.n	8006c96 <HAL_DMA_Abort+0x422>
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	4a20      	ldr	r2, [pc, #128]	; (8006ce0 <HAL_DMA_Abort+0x46c>)
 8006c60:	4293      	cmp	r3, r2
 8006c62:	d018      	beq.n	8006c96 <HAL_DMA_Abort+0x422>
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	4a1e      	ldr	r2, [pc, #120]	; (8006ce4 <HAL_DMA_Abort+0x470>)
 8006c6a:	4293      	cmp	r3, r2
 8006c6c:	d013      	beq.n	8006c96 <HAL_DMA_Abort+0x422>
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	4a1d      	ldr	r2, [pc, #116]	; (8006ce8 <HAL_DMA_Abort+0x474>)
 8006c74:	4293      	cmp	r3, r2
 8006c76:	d00e      	beq.n	8006c96 <HAL_DMA_Abort+0x422>
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	4a1b      	ldr	r2, [pc, #108]	; (8006cec <HAL_DMA_Abort+0x478>)
 8006c7e:	4293      	cmp	r3, r2
 8006c80:	d009      	beq.n	8006c96 <HAL_DMA_Abort+0x422>
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	4a1a      	ldr	r2, [pc, #104]	; (8006cf0 <HAL_DMA_Abort+0x47c>)
 8006c88:	4293      	cmp	r3, r2
 8006c8a:	d004      	beq.n	8006c96 <HAL_DMA_Abort+0x422>
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	4a18      	ldr	r2, [pc, #96]	; (8006cf4 <HAL_DMA_Abort+0x480>)
 8006c92:	4293      	cmp	r3, r2
 8006c94:	d101      	bne.n	8006c9a <HAL_DMA_Abort+0x426>
 8006c96:	2301      	movs	r3, #1
 8006c98:	e000      	b.n	8006c9c <HAL_DMA_Abort+0x428>
 8006c9a:	2300      	movs	r3, #0
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	d02b      	beq.n	8006cf8 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006ca4:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006caa:	f003 031f 	and.w	r3, r3, #31
 8006cae:	223f      	movs	r2, #63	; 0x3f
 8006cb0:	409a      	lsls	r2, r3
 8006cb2:	68bb      	ldr	r3, [r7, #8]
 8006cb4:	609a      	str	r2, [r3, #8]
 8006cb6:	e02a      	b.n	8006d0e <HAL_DMA_Abort+0x49a>
 8006cb8:	40020010 	.word	0x40020010
 8006cbc:	40020028 	.word	0x40020028
 8006cc0:	40020040 	.word	0x40020040
 8006cc4:	40020058 	.word	0x40020058
 8006cc8:	40020070 	.word	0x40020070
 8006ccc:	40020088 	.word	0x40020088
 8006cd0:	400200a0 	.word	0x400200a0
 8006cd4:	400200b8 	.word	0x400200b8
 8006cd8:	40020410 	.word	0x40020410
 8006cdc:	40020428 	.word	0x40020428
 8006ce0:	40020440 	.word	0x40020440
 8006ce4:	40020458 	.word	0x40020458
 8006ce8:	40020470 	.word	0x40020470
 8006cec:	40020488 	.word	0x40020488
 8006cf0:	400204a0 	.word	0x400204a0
 8006cf4:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006cfc:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006d02:	f003 031f 	and.w	r3, r3, #31
 8006d06:	2201      	movs	r2, #1
 8006d08:	409a      	lsls	r2, r3
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	4a4f      	ldr	r2, [pc, #316]	; (8006e50 <HAL_DMA_Abort+0x5dc>)
 8006d14:	4293      	cmp	r3, r2
 8006d16:	d072      	beq.n	8006dfe <HAL_DMA_Abort+0x58a>
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	4a4d      	ldr	r2, [pc, #308]	; (8006e54 <HAL_DMA_Abort+0x5e0>)
 8006d1e:	4293      	cmp	r3, r2
 8006d20:	d06d      	beq.n	8006dfe <HAL_DMA_Abort+0x58a>
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	4a4c      	ldr	r2, [pc, #304]	; (8006e58 <HAL_DMA_Abort+0x5e4>)
 8006d28:	4293      	cmp	r3, r2
 8006d2a:	d068      	beq.n	8006dfe <HAL_DMA_Abort+0x58a>
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	4a4a      	ldr	r2, [pc, #296]	; (8006e5c <HAL_DMA_Abort+0x5e8>)
 8006d32:	4293      	cmp	r3, r2
 8006d34:	d063      	beq.n	8006dfe <HAL_DMA_Abort+0x58a>
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	4a49      	ldr	r2, [pc, #292]	; (8006e60 <HAL_DMA_Abort+0x5ec>)
 8006d3c:	4293      	cmp	r3, r2
 8006d3e:	d05e      	beq.n	8006dfe <HAL_DMA_Abort+0x58a>
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	4a47      	ldr	r2, [pc, #284]	; (8006e64 <HAL_DMA_Abort+0x5f0>)
 8006d46:	4293      	cmp	r3, r2
 8006d48:	d059      	beq.n	8006dfe <HAL_DMA_Abort+0x58a>
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	4a46      	ldr	r2, [pc, #280]	; (8006e68 <HAL_DMA_Abort+0x5f4>)
 8006d50:	4293      	cmp	r3, r2
 8006d52:	d054      	beq.n	8006dfe <HAL_DMA_Abort+0x58a>
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	4a44      	ldr	r2, [pc, #272]	; (8006e6c <HAL_DMA_Abort+0x5f8>)
 8006d5a:	4293      	cmp	r3, r2
 8006d5c:	d04f      	beq.n	8006dfe <HAL_DMA_Abort+0x58a>
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	4a43      	ldr	r2, [pc, #268]	; (8006e70 <HAL_DMA_Abort+0x5fc>)
 8006d64:	4293      	cmp	r3, r2
 8006d66:	d04a      	beq.n	8006dfe <HAL_DMA_Abort+0x58a>
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	4a41      	ldr	r2, [pc, #260]	; (8006e74 <HAL_DMA_Abort+0x600>)
 8006d6e:	4293      	cmp	r3, r2
 8006d70:	d045      	beq.n	8006dfe <HAL_DMA_Abort+0x58a>
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	4a40      	ldr	r2, [pc, #256]	; (8006e78 <HAL_DMA_Abort+0x604>)
 8006d78:	4293      	cmp	r3, r2
 8006d7a:	d040      	beq.n	8006dfe <HAL_DMA_Abort+0x58a>
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	4a3e      	ldr	r2, [pc, #248]	; (8006e7c <HAL_DMA_Abort+0x608>)
 8006d82:	4293      	cmp	r3, r2
 8006d84:	d03b      	beq.n	8006dfe <HAL_DMA_Abort+0x58a>
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	4a3d      	ldr	r2, [pc, #244]	; (8006e80 <HAL_DMA_Abort+0x60c>)
 8006d8c:	4293      	cmp	r3, r2
 8006d8e:	d036      	beq.n	8006dfe <HAL_DMA_Abort+0x58a>
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	4a3b      	ldr	r2, [pc, #236]	; (8006e84 <HAL_DMA_Abort+0x610>)
 8006d96:	4293      	cmp	r3, r2
 8006d98:	d031      	beq.n	8006dfe <HAL_DMA_Abort+0x58a>
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	4a3a      	ldr	r2, [pc, #232]	; (8006e88 <HAL_DMA_Abort+0x614>)
 8006da0:	4293      	cmp	r3, r2
 8006da2:	d02c      	beq.n	8006dfe <HAL_DMA_Abort+0x58a>
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	4a38      	ldr	r2, [pc, #224]	; (8006e8c <HAL_DMA_Abort+0x618>)
 8006daa:	4293      	cmp	r3, r2
 8006dac:	d027      	beq.n	8006dfe <HAL_DMA_Abort+0x58a>
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	4a37      	ldr	r2, [pc, #220]	; (8006e90 <HAL_DMA_Abort+0x61c>)
 8006db4:	4293      	cmp	r3, r2
 8006db6:	d022      	beq.n	8006dfe <HAL_DMA_Abort+0x58a>
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	4a35      	ldr	r2, [pc, #212]	; (8006e94 <HAL_DMA_Abort+0x620>)
 8006dbe:	4293      	cmp	r3, r2
 8006dc0:	d01d      	beq.n	8006dfe <HAL_DMA_Abort+0x58a>
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	4a34      	ldr	r2, [pc, #208]	; (8006e98 <HAL_DMA_Abort+0x624>)
 8006dc8:	4293      	cmp	r3, r2
 8006dca:	d018      	beq.n	8006dfe <HAL_DMA_Abort+0x58a>
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	4a32      	ldr	r2, [pc, #200]	; (8006e9c <HAL_DMA_Abort+0x628>)
 8006dd2:	4293      	cmp	r3, r2
 8006dd4:	d013      	beq.n	8006dfe <HAL_DMA_Abort+0x58a>
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	4a31      	ldr	r2, [pc, #196]	; (8006ea0 <HAL_DMA_Abort+0x62c>)
 8006ddc:	4293      	cmp	r3, r2
 8006dde:	d00e      	beq.n	8006dfe <HAL_DMA_Abort+0x58a>
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	4a2f      	ldr	r2, [pc, #188]	; (8006ea4 <HAL_DMA_Abort+0x630>)
 8006de6:	4293      	cmp	r3, r2
 8006de8:	d009      	beq.n	8006dfe <HAL_DMA_Abort+0x58a>
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	4a2e      	ldr	r2, [pc, #184]	; (8006ea8 <HAL_DMA_Abort+0x634>)
 8006df0:	4293      	cmp	r3, r2
 8006df2:	d004      	beq.n	8006dfe <HAL_DMA_Abort+0x58a>
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	4a2c      	ldr	r2, [pc, #176]	; (8006eac <HAL_DMA_Abort+0x638>)
 8006dfa:	4293      	cmp	r3, r2
 8006dfc:	d101      	bne.n	8006e02 <HAL_DMA_Abort+0x58e>
 8006dfe:	2301      	movs	r3, #1
 8006e00:	e000      	b.n	8006e04 <HAL_DMA_Abort+0x590>
 8006e02:	2300      	movs	r3, #0
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	d015      	beq.n	8006e34 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006e0c:	687a      	ldr	r2, [r7, #4]
 8006e0e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8006e10:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d00c      	beq.n	8006e34 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006e1e:	681a      	ldr	r2, [r3, #0]
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006e24:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006e28:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e2e:	687a      	ldr	r2, [r7, #4]
 8006e30:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8006e32:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	2201      	movs	r2, #1
 8006e38:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	2200      	movs	r2, #0
 8006e40:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 8006e44:	2300      	movs	r3, #0
}
 8006e46:	4618      	mov	r0, r3
 8006e48:	3718      	adds	r7, #24
 8006e4a:	46bd      	mov	sp, r7
 8006e4c:	bd80      	pop	{r7, pc}
 8006e4e:	bf00      	nop
 8006e50:	40020010 	.word	0x40020010
 8006e54:	40020028 	.word	0x40020028
 8006e58:	40020040 	.word	0x40020040
 8006e5c:	40020058 	.word	0x40020058
 8006e60:	40020070 	.word	0x40020070
 8006e64:	40020088 	.word	0x40020088
 8006e68:	400200a0 	.word	0x400200a0
 8006e6c:	400200b8 	.word	0x400200b8
 8006e70:	40020410 	.word	0x40020410
 8006e74:	40020428 	.word	0x40020428
 8006e78:	40020440 	.word	0x40020440
 8006e7c:	40020458 	.word	0x40020458
 8006e80:	40020470 	.word	0x40020470
 8006e84:	40020488 	.word	0x40020488
 8006e88:	400204a0 	.word	0x400204a0
 8006e8c:	400204b8 	.word	0x400204b8
 8006e90:	58025408 	.word	0x58025408
 8006e94:	5802541c 	.word	0x5802541c
 8006e98:	58025430 	.word	0x58025430
 8006e9c:	58025444 	.word	0x58025444
 8006ea0:	58025458 	.word	0x58025458
 8006ea4:	5802546c 	.word	0x5802546c
 8006ea8:	58025480 	.word	0x58025480
 8006eac:	58025494 	.word	0x58025494

08006eb0 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8006eb0:	b580      	push	{r7, lr}
 8006eb2:	b084      	sub	sp, #16
 8006eb4:	af00      	add	r7, sp, #0
 8006eb6:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d101      	bne.n	8006ec2 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8006ebe:	2301      	movs	r3, #1
 8006ec0:	e237      	b.n	8007332 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006ec8:	b2db      	uxtb	r3, r3
 8006eca:	2b02      	cmp	r3, #2
 8006ecc:	d004      	beq.n	8006ed8 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	2280      	movs	r2, #128	; 0x80
 8006ed2:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8006ed4:	2301      	movs	r3, #1
 8006ed6:	e22c      	b.n	8007332 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	4a5c      	ldr	r2, [pc, #368]	; (8007050 <HAL_DMA_Abort_IT+0x1a0>)
 8006ede:	4293      	cmp	r3, r2
 8006ee0:	d04a      	beq.n	8006f78 <HAL_DMA_Abort_IT+0xc8>
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	4a5b      	ldr	r2, [pc, #364]	; (8007054 <HAL_DMA_Abort_IT+0x1a4>)
 8006ee8:	4293      	cmp	r3, r2
 8006eea:	d045      	beq.n	8006f78 <HAL_DMA_Abort_IT+0xc8>
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	4a59      	ldr	r2, [pc, #356]	; (8007058 <HAL_DMA_Abort_IT+0x1a8>)
 8006ef2:	4293      	cmp	r3, r2
 8006ef4:	d040      	beq.n	8006f78 <HAL_DMA_Abort_IT+0xc8>
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	4a58      	ldr	r2, [pc, #352]	; (800705c <HAL_DMA_Abort_IT+0x1ac>)
 8006efc:	4293      	cmp	r3, r2
 8006efe:	d03b      	beq.n	8006f78 <HAL_DMA_Abort_IT+0xc8>
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	4a56      	ldr	r2, [pc, #344]	; (8007060 <HAL_DMA_Abort_IT+0x1b0>)
 8006f06:	4293      	cmp	r3, r2
 8006f08:	d036      	beq.n	8006f78 <HAL_DMA_Abort_IT+0xc8>
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	4a55      	ldr	r2, [pc, #340]	; (8007064 <HAL_DMA_Abort_IT+0x1b4>)
 8006f10:	4293      	cmp	r3, r2
 8006f12:	d031      	beq.n	8006f78 <HAL_DMA_Abort_IT+0xc8>
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	4a53      	ldr	r2, [pc, #332]	; (8007068 <HAL_DMA_Abort_IT+0x1b8>)
 8006f1a:	4293      	cmp	r3, r2
 8006f1c:	d02c      	beq.n	8006f78 <HAL_DMA_Abort_IT+0xc8>
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	4a52      	ldr	r2, [pc, #328]	; (800706c <HAL_DMA_Abort_IT+0x1bc>)
 8006f24:	4293      	cmp	r3, r2
 8006f26:	d027      	beq.n	8006f78 <HAL_DMA_Abort_IT+0xc8>
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	4a50      	ldr	r2, [pc, #320]	; (8007070 <HAL_DMA_Abort_IT+0x1c0>)
 8006f2e:	4293      	cmp	r3, r2
 8006f30:	d022      	beq.n	8006f78 <HAL_DMA_Abort_IT+0xc8>
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	4a4f      	ldr	r2, [pc, #316]	; (8007074 <HAL_DMA_Abort_IT+0x1c4>)
 8006f38:	4293      	cmp	r3, r2
 8006f3a:	d01d      	beq.n	8006f78 <HAL_DMA_Abort_IT+0xc8>
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	4a4d      	ldr	r2, [pc, #308]	; (8007078 <HAL_DMA_Abort_IT+0x1c8>)
 8006f42:	4293      	cmp	r3, r2
 8006f44:	d018      	beq.n	8006f78 <HAL_DMA_Abort_IT+0xc8>
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	4a4c      	ldr	r2, [pc, #304]	; (800707c <HAL_DMA_Abort_IT+0x1cc>)
 8006f4c:	4293      	cmp	r3, r2
 8006f4e:	d013      	beq.n	8006f78 <HAL_DMA_Abort_IT+0xc8>
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	4a4a      	ldr	r2, [pc, #296]	; (8007080 <HAL_DMA_Abort_IT+0x1d0>)
 8006f56:	4293      	cmp	r3, r2
 8006f58:	d00e      	beq.n	8006f78 <HAL_DMA_Abort_IT+0xc8>
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	4a49      	ldr	r2, [pc, #292]	; (8007084 <HAL_DMA_Abort_IT+0x1d4>)
 8006f60:	4293      	cmp	r3, r2
 8006f62:	d009      	beq.n	8006f78 <HAL_DMA_Abort_IT+0xc8>
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	4a47      	ldr	r2, [pc, #284]	; (8007088 <HAL_DMA_Abort_IT+0x1d8>)
 8006f6a:	4293      	cmp	r3, r2
 8006f6c:	d004      	beq.n	8006f78 <HAL_DMA_Abort_IT+0xc8>
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	4a46      	ldr	r2, [pc, #280]	; (800708c <HAL_DMA_Abort_IT+0x1dc>)
 8006f74:	4293      	cmp	r3, r2
 8006f76:	d101      	bne.n	8006f7c <HAL_DMA_Abort_IT+0xcc>
 8006f78:	2301      	movs	r3, #1
 8006f7a:	e000      	b.n	8006f7e <HAL_DMA_Abort_IT+0xce>
 8006f7c:	2300      	movs	r3, #0
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	f000 8086 	beq.w	8007090 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	2204      	movs	r2, #4
 8006f88:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	4a2f      	ldr	r2, [pc, #188]	; (8007050 <HAL_DMA_Abort_IT+0x1a0>)
 8006f92:	4293      	cmp	r3, r2
 8006f94:	d04a      	beq.n	800702c <HAL_DMA_Abort_IT+0x17c>
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	4a2e      	ldr	r2, [pc, #184]	; (8007054 <HAL_DMA_Abort_IT+0x1a4>)
 8006f9c:	4293      	cmp	r3, r2
 8006f9e:	d045      	beq.n	800702c <HAL_DMA_Abort_IT+0x17c>
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	4a2c      	ldr	r2, [pc, #176]	; (8007058 <HAL_DMA_Abort_IT+0x1a8>)
 8006fa6:	4293      	cmp	r3, r2
 8006fa8:	d040      	beq.n	800702c <HAL_DMA_Abort_IT+0x17c>
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	4a2b      	ldr	r2, [pc, #172]	; (800705c <HAL_DMA_Abort_IT+0x1ac>)
 8006fb0:	4293      	cmp	r3, r2
 8006fb2:	d03b      	beq.n	800702c <HAL_DMA_Abort_IT+0x17c>
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	4a29      	ldr	r2, [pc, #164]	; (8007060 <HAL_DMA_Abort_IT+0x1b0>)
 8006fba:	4293      	cmp	r3, r2
 8006fbc:	d036      	beq.n	800702c <HAL_DMA_Abort_IT+0x17c>
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	4a28      	ldr	r2, [pc, #160]	; (8007064 <HAL_DMA_Abort_IT+0x1b4>)
 8006fc4:	4293      	cmp	r3, r2
 8006fc6:	d031      	beq.n	800702c <HAL_DMA_Abort_IT+0x17c>
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	4a26      	ldr	r2, [pc, #152]	; (8007068 <HAL_DMA_Abort_IT+0x1b8>)
 8006fce:	4293      	cmp	r3, r2
 8006fd0:	d02c      	beq.n	800702c <HAL_DMA_Abort_IT+0x17c>
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	4a25      	ldr	r2, [pc, #148]	; (800706c <HAL_DMA_Abort_IT+0x1bc>)
 8006fd8:	4293      	cmp	r3, r2
 8006fda:	d027      	beq.n	800702c <HAL_DMA_Abort_IT+0x17c>
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	4a23      	ldr	r2, [pc, #140]	; (8007070 <HAL_DMA_Abort_IT+0x1c0>)
 8006fe2:	4293      	cmp	r3, r2
 8006fe4:	d022      	beq.n	800702c <HAL_DMA_Abort_IT+0x17c>
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	4a22      	ldr	r2, [pc, #136]	; (8007074 <HAL_DMA_Abort_IT+0x1c4>)
 8006fec:	4293      	cmp	r3, r2
 8006fee:	d01d      	beq.n	800702c <HAL_DMA_Abort_IT+0x17c>
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	4a20      	ldr	r2, [pc, #128]	; (8007078 <HAL_DMA_Abort_IT+0x1c8>)
 8006ff6:	4293      	cmp	r3, r2
 8006ff8:	d018      	beq.n	800702c <HAL_DMA_Abort_IT+0x17c>
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	4a1f      	ldr	r2, [pc, #124]	; (800707c <HAL_DMA_Abort_IT+0x1cc>)
 8007000:	4293      	cmp	r3, r2
 8007002:	d013      	beq.n	800702c <HAL_DMA_Abort_IT+0x17c>
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	4a1d      	ldr	r2, [pc, #116]	; (8007080 <HAL_DMA_Abort_IT+0x1d0>)
 800700a:	4293      	cmp	r3, r2
 800700c:	d00e      	beq.n	800702c <HAL_DMA_Abort_IT+0x17c>
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	4a1c      	ldr	r2, [pc, #112]	; (8007084 <HAL_DMA_Abort_IT+0x1d4>)
 8007014:	4293      	cmp	r3, r2
 8007016:	d009      	beq.n	800702c <HAL_DMA_Abort_IT+0x17c>
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	4a1a      	ldr	r2, [pc, #104]	; (8007088 <HAL_DMA_Abort_IT+0x1d8>)
 800701e:	4293      	cmp	r3, r2
 8007020:	d004      	beq.n	800702c <HAL_DMA_Abort_IT+0x17c>
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	4a19      	ldr	r2, [pc, #100]	; (800708c <HAL_DMA_Abort_IT+0x1dc>)
 8007028:	4293      	cmp	r3, r2
 800702a:	d108      	bne.n	800703e <HAL_DMA_Abort_IT+0x18e>
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	681a      	ldr	r2, [r3, #0]
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	f022 0201 	bic.w	r2, r2, #1
 800703a:	601a      	str	r2, [r3, #0]
 800703c:	e178      	b.n	8007330 <HAL_DMA_Abort_IT+0x480>
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	681a      	ldr	r2, [r3, #0]
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	f022 0201 	bic.w	r2, r2, #1
 800704c:	601a      	str	r2, [r3, #0]
 800704e:	e16f      	b.n	8007330 <HAL_DMA_Abort_IT+0x480>
 8007050:	40020010 	.word	0x40020010
 8007054:	40020028 	.word	0x40020028
 8007058:	40020040 	.word	0x40020040
 800705c:	40020058 	.word	0x40020058
 8007060:	40020070 	.word	0x40020070
 8007064:	40020088 	.word	0x40020088
 8007068:	400200a0 	.word	0x400200a0
 800706c:	400200b8 	.word	0x400200b8
 8007070:	40020410 	.word	0x40020410
 8007074:	40020428 	.word	0x40020428
 8007078:	40020440 	.word	0x40020440
 800707c:	40020458 	.word	0x40020458
 8007080:	40020470 	.word	0x40020470
 8007084:	40020488 	.word	0x40020488
 8007088:	400204a0 	.word	0x400204a0
 800708c:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	681a      	ldr	r2, [r3, #0]
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	f022 020e 	bic.w	r2, r2, #14
 800709e:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	4a6c      	ldr	r2, [pc, #432]	; (8007258 <HAL_DMA_Abort_IT+0x3a8>)
 80070a6:	4293      	cmp	r3, r2
 80070a8:	d04a      	beq.n	8007140 <HAL_DMA_Abort_IT+0x290>
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	4a6b      	ldr	r2, [pc, #428]	; (800725c <HAL_DMA_Abort_IT+0x3ac>)
 80070b0:	4293      	cmp	r3, r2
 80070b2:	d045      	beq.n	8007140 <HAL_DMA_Abort_IT+0x290>
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	4a69      	ldr	r2, [pc, #420]	; (8007260 <HAL_DMA_Abort_IT+0x3b0>)
 80070ba:	4293      	cmp	r3, r2
 80070bc:	d040      	beq.n	8007140 <HAL_DMA_Abort_IT+0x290>
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	4a68      	ldr	r2, [pc, #416]	; (8007264 <HAL_DMA_Abort_IT+0x3b4>)
 80070c4:	4293      	cmp	r3, r2
 80070c6:	d03b      	beq.n	8007140 <HAL_DMA_Abort_IT+0x290>
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	4a66      	ldr	r2, [pc, #408]	; (8007268 <HAL_DMA_Abort_IT+0x3b8>)
 80070ce:	4293      	cmp	r3, r2
 80070d0:	d036      	beq.n	8007140 <HAL_DMA_Abort_IT+0x290>
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	4a65      	ldr	r2, [pc, #404]	; (800726c <HAL_DMA_Abort_IT+0x3bc>)
 80070d8:	4293      	cmp	r3, r2
 80070da:	d031      	beq.n	8007140 <HAL_DMA_Abort_IT+0x290>
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	4a63      	ldr	r2, [pc, #396]	; (8007270 <HAL_DMA_Abort_IT+0x3c0>)
 80070e2:	4293      	cmp	r3, r2
 80070e4:	d02c      	beq.n	8007140 <HAL_DMA_Abort_IT+0x290>
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	4a62      	ldr	r2, [pc, #392]	; (8007274 <HAL_DMA_Abort_IT+0x3c4>)
 80070ec:	4293      	cmp	r3, r2
 80070ee:	d027      	beq.n	8007140 <HAL_DMA_Abort_IT+0x290>
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	4a60      	ldr	r2, [pc, #384]	; (8007278 <HAL_DMA_Abort_IT+0x3c8>)
 80070f6:	4293      	cmp	r3, r2
 80070f8:	d022      	beq.n	8007140 <HAL_DMA_Abort_IT+0x290>
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	4a5f      	ldr	r2, [pc, #380]	; (800727c <HAL_DMA_Abort_IT+0x3cc>)
 8007100:	4293      	cmp	r3, r2
 8007102:	d01d      	beq.n	8007140 <HAL_DMA_Abort_IT+0x290>
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	4a5d      	ldr	r2, [pc, #372]	; (8007280 <HAL_DMA_Abort_IT+0x3d0>)
 800710a:	4293      	cmp	r3, r2
 800710c:	d018      	beq.n	8007140 <HAL_DMA_Abort_IT+0x290>
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	4a5c      	ldr	r2, [pc, #368]	; (8007284 <HAL_DMA_Abort_IT+0x3d4>)
 8007114:	4293      	cmp	r3, r2
 8007116:	d013      	beq.n	8007140 <HAL_DMA_Abort_IT+0x290>
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	4a5a      	ldr	r2, [pc, #360]	; (8007288 <HAL_DMA_Abort_IT+0x3d8>)
 800711e:	4293      	cmp	r3, r2
 8007120:	d00e      	beq.n	8007140 <HAL_DMA_Abort_IT+0x290>
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	4a59      	ldr	r2, [pc, #356]	; (800728c <HAL_DMA_Abort_IT+0x3dc>)
 8007128:	4293      	cmp	r3, r2
 800712a:	d009      	beq.n	8007140 <HAL_DMA_Abort_IT+0x290>
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	4a57      	ldr	r2, [pc, #348]	; (8007290 <HAL_DMA_Abort_IT+0x3e0>)
 8007132:	4293      	cmp	r3, r2
 8007134:	d004      	beq.n	8007140 <HAL_DMA_Abort_IT+0x290>
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	4a56      	ldr	r2, [pc, #344]	; (8007294 <HAL_DMA_Abort_IT+0x3e4>)
 800713c:	4293      	cmp	r3, r2
 800713e:	d108      	bne.n	8007152 <HAL_DMA_Abort_IT+0x2a2>
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	681a      	ldr	r2, [r3, #0]
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	f022 0201 	bic.w	r2, r2, #1
 800714e:	601a      	str	r2, [r3, #0]
 8007150:	e007      	b.n	8007162 <HAL_DMA_Abort_IT+0x2b2>
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	681a      	ldr	r2, [r3, #0]
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	f022 0201 	bic.w	r2, r2, #1
 8007160:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	4a3c      	ldr	r2, [pc, #240]	; (8007258 <HAL_DMA_Abort_IT+0x3a8>)
 8007168:	4293      	cmp	r3, r2
 800716a:	d072      	beq.n	8007252 <HAL_DMA_Abort_IT+0x3a2>
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	4a3a      	ldr	r2, [pc, #232]	; (800725c <HAL_DMA_Abort_IT+0x3ac>)
 8007172:	4293      	cmp	r3, r2
 8007174:	d06d      	beq.n	8007252 <HAL_DMA_Abort_IT+0x3a2>
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	4a39      	ldr	r2, [pc, #228]	; (8007260 <HAL_DMA_Abort_IT+0x3b0>)
 800717c:	4293      	cmp	r3, r2
 800717e:	d068      	beq.n	8007252 <HAL_DMA_Abort_IT+0x3a2>
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	4a37      	ldr	r2, [pc, #220]	; (8007264 <HAL_DMA_Abort_IT+0x3b4>)
 8007186:	4293      	cmp	r3, r2
 8007188:	d063      	beq.n	8007252 <HAL_DMA_Abort_IT+0x3a2>
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	4a36      	ldr	r2, [pc, #216]	; (8007268 <HAL_DMA_Abort_IT+0x3b8>)
 8007190:	4293      	cmp	r3, r2
 8007192:	d05e      	beq.n	8007252 <HAL_DMA_Abort_IT+0x3a2>
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	4a34      	ldr	r2, [pc, #208]	; (800726c <HAL_DMA_Abort_IT+0x3bc>)
 800719a:	4293      	cmp	r3, r2
 800719c:	d059      	beq.n	8007252 <HAL_DMA_Abort_IT+0x3a2>
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	4a33      	ldr	r2, [pc, #204]	; (8007270 <HAL_DMA_Abort_IT+0x3c0>)
 80071a4:	4293      	cmp	r3, r2
 80071a6:	d054      	beq.n	8007252 <HAL_DMA_Abort_IT+0x3a2>
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	4a31      	ldr	r2, [pc, #196]	; (8007274 <HAL_DMA_Abort_IT+0x3c4>)
 80071ae:	4293      	cmp	r3, r2
 80071b0:	d04f      	beq.n	8007252 <HAL_DMA_Abort_IT+0x3a2>
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	4a30      	ldr	r2, [pc, #192]	; (8007278 <HAL_DMA_Abort_IT+0x3c8>)
 80071b8:	4293      	cmp	r3, r2
 80071ba:	d04a      	beq.n	8007252 <HAL_DMA_Abort_IT+0x3a2>
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	4a2e      	ldr	r2, [pc, #184]	; (800727c <HAL_DMA_Abort_IT+0x3cc>)
 80071c2:	4293      	cmp	r3, r2
 80071c4:	d045      	beq.n	8007252 <HAL_DMA_Abort_IT+0x3a2>
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	4a2d      	ldr	r2, [pc, #180]	; (8007280 <HAL_DMA_Abort_IT+0x3d0>)
 80071cc:	4293      	cmp	r3, r2
 80071ce:	d040      	beq.n	8007252 <HAL_DMA_Abort_IT+0x3a2>
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	4a2b      	ldr	r2, [pc, #172]	; (8007284 <HAL_DMA_Abort_IT+0x3d4>)
 80071d6:	4293      	cmp	r3, r2
 80071d8:	d03b      	beq.n	8007252 <HAL_DMA_Abort_IT+0x3a2>
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	4a2a      	ldr	r2, [pc, #168]	; (8007288 <HAL_DMA_Abort_IT+0x3d8>)
 80071e0:	4293      	cmp	r3, r2
 80071e2:	d036      	beq.n	8007252 <HAL_DMA_Abort_IT+0x3a2>
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	4a28      	ldr	r2, [pc, #160]	; (800728c <HAL_DMA_Abort_IT+0x3dc>)
 80071ea:	4293      	cmp	r3, r2
 80071ec:	d031      	beq.n	8007252 <HAL_DMA_Abort_IT+0x3a2>
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	4a27      	ldr	r2, [pc, #156]	; (8007290 <HAL_DMA_Abort_IT+0x3e0>)
 80071f4:	4293      	cmp	r3, r2
 80071f6:	d02c      	beq.n	8007252 <HAL_DMA_Abort_IT+0x3a2>
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	4a25      	ldr	r2, [pc, #148]	; (8007294 <HAL_DMA_Abort_IT+0x3e4>)
 80071fe:	4293      	cmp	r3, r2
 8007200:	d027      	beq.n	8007252 <HAL_DMA_Abort_IT+0x3a2>
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	4a24      	ldr	r2, [pc, #144]	; (8007298 <HAL_DMA_Abort_IT+0x3e8>)
 8007208:	4293      	cmp	r3, r2
 800720a:	d022      	beq.n	8007252 <HAL_DMA_Abort_IT+0x3a2>
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	4a22      	ldr	r2, [pc, #136]	; (800729c <HAL_DMA_Abort_IT+0x3ec>)
 8007212:	4293      	cmp	r3, r2
 8007214:	d01d      	beq.n	8007252 <HAL_DMA_Abort_IT+0x3a2>
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	4a21      	ldr	r2, [pc, #132]	; (80072a0 <HAL_DMA_Abort_IT+0x3f0>)
 800721c:	4293      	cmp	r3, r2
 800721e:	d018      	beq.n	8007252 <HAL_DMA_Abort_IT+0x3a2>
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	4a1f      	ldr	r2, [pc, #124]	; (80072a4 <HAL_DMA_Abort_IT+0x3f4>)
 8007226:	4293      	cmp	r3, r2
 8007228:	d013      	beq.n	8007252 <HAL_DMA_Abort_IT+0x3a2>
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	4a1e      	ldr	r2, [pc, #120]	; (80072a8 <HAL_DMA_Abort_IT+0x3f8>)
 8007230:	4293      	cmp	r3, r2
 8007232:	d00e      	beq.n	8007252 <HAL_DMA_Abort_IT+0x3a2>
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	4a1c      	ldr	r2, [pc, #112]	; (80072ac <HAL_DMA_Abort_IT+0x3fc>)
 800723a:	4293      	cmp	r3, r2
 800723c:	d009      	beq.n	8007252 <HAL_DMA_Abort_IT+0x3a2>
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	4a1b      	ldr	r2, [pc, #108]	; (80072b0 <HAL_DMA_Abort_IT+0x400>)
 8007244:	4293      	cmp	r3, r2
 8007246:	d004      	beq.n	8007252 <HAL_DMA_Abort_IT+0x3a2>
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	4a19      	ldr	r2, [pc, #100]	; (80072b4 <HAL_DMA_Abort_IT+0x404>)
 800724e:	4293      	cmp	r3, r2
 8007250:	d132      	bne.n	80072b8 <HAL_DMA_Abort_IT+0x408>
 8007252:	2301      	movs	r3, #1
 8007254:	e031      	b.n	80072ba <HAL_DMA_Abort_IT+0x40a>
 8007256:	bf00      	nop
 8007258:	40020010 	.word	0x40020010
 800725c:	40020028 	.word	0x40020028
 8007260:	40020040 	.word	0x40020040
 8007264:	40020058 	.word	0x40020058
 8007268:	40020070 	.word	0x40020070
 800726c:	40020088 	.word	0x40020088
 8007270:	400200a0 	.word	0x400200a0
 8007274:	400200b8 	.word	0x400200b8
 8007278:	40020410 	.word	0x40020410
 800727c:	40020428 	.word	0x40020428
 8007280:	40020440 	.word	0x40020440
 8007284:	40020458 	.word	0x40020458
 8007288:	40020470 	.word	0x40020470
 800728c:	40020488 	.word	0x40020488
 8007290:	400204a0 	.word	0x400204a0
 8007294:	400204b8 	.word	0x400204b8
 8007298:	58025408 	.word	0x58025408
 800729c:	5802541c 	.word	0x5802541c
 80072a0:	58025430 	.word	0x58025430
 80072a4:	58025444 	.word	0x58025444
 80072a8:	58025458 	.word	0x58025458
 80072ac:	5802546c 	.word	0x5802546c
 80072b0:	58025480 	.word	0x58025480
 80072b4:	58025494 	.word	0x58025494
 80072b8:	2300      	movs	r3, #0
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d028      	beq.n	8007310 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80072c2:	681a      	ldr	r2, [r3, #0]
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80072c8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80072cc:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80072d2:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80072d8:	f003 031f 	and.w	r3, r3, #31
 80072dc:	2201      	movs	r2, #1
 80072de:	409a      	lsls	r2, r3
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80072e8:	687a      	ldr	r2, [r7, #4]
 80072ea:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80072ec:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	d00c      	beq.n	8007310 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80072fa:	681a      	ldr	r2, [r3, #0]
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007300:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007304:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800730a:	687a      	ldr	r2, [r7, #4]
 800730c:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800730e:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	2201      	movs	r2, #1
 8007314:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	2200      	movs	r2, #0
 800731c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007324:	2b00      	cmp	r3, #0
 8007326:	d003      	beq.n	8007330 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800732c:	6878      	ldr	r0, [r7, #4]
 800732e:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8007330:	2300      	movs	r3, #0
}
 8007332:	4618      	mov	r0, r3
 8007334:	3710      	adds	r7, #16
 8007336:	46bd      	mov	sp, r7
 8007338:	bd80      	pop	{r7, pc}
 800733a:	bf00      	nop

0800733c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800733c:	b480      	push	{r7}
 800733e:	b089      	sub	sp, #36	; 0x24
 8007340:	af00      	add	r7, sp, #0
 8007342:	6078      	str	r0, [r7, #4]
 8007344:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8007346:	2300      	movs	r3, #0
 8007348:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800734a:	4b89      	ldr	r3, [pc, #548]	; (8007570 <HAL_GPIO_Init+0x234>)
 800734c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800734e:	e194      	b.n	800767a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8007350:	683b      	ldr	r3, [r7, #0]
 8007352:	681a      	ldr	r2, [r3, #0]
 8007354:	2101      	movs	r1, #1
 8007356:	69fb      	ldr	r3, [r7, #28]
 8007358:	fa01 f303 	lsl.w	r3, r1, r3
 800735c:	4013      	ands	r3, r2
 800735e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8007360:	693b      	ldr	r3, [r7, #16]
 8007362:	2b00      	cmp	r3, #0
 8007364:	f000 8186 	beq.w	8007674 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8007368:	683b      	ldr	r3, [r7, #0]
 800736a:	685b      	ldr	r3, [r3, #4]
 800736c:	f003 0303 	and.w	r3, r3, #3
 8007370:	2b01      	cmp	r3, #1
 8007372:	d005      	beq.n	8007380 <HAL_GPIO_Init+0x44>
 8007374:	683b      	ldr	r3, [r7, #0]
 8007376:	685b      	ldr	r3, [r3, #4]
 8007378:	f003 0303 	and.w	r3, r3, #3
 800737c:	2b02      	cmp	r3, #2
 800737e:	d130      	bne.n	80073e2 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	689b      	ldr	r3, [r3, #8]
 8007384:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8007386:	69fb      	ldr	r3, [r7, #28]
 8007388:	005b      	lsls	r3, r3, #1
 800738a:	2203      	movs	r2, #3
 800738c:	fa02 f303 	lsl.w	r3, r2, r3
 8007390:	43db      	mvns	r3, r3
 8007392:	69ba      	ldr	r2, [r7, #24]
 8007394:	4013      	ands	r3, r2
 8007396:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8007398:	683b      	ldr	r3, [r7, #0]
 800739a:	68da      	ldr	r2, [r3, #12]
 800739c:	69fb      	ldr	r3, [r7, #28]
 800739e:	005b      	lsls	r3, r3, #1
 80073a0:	fa02 f303 	lsl.w	r3, r2, r3
 80073a4:	69ba      	ldr	r2, [r7, #24]
 80073a6:	4313      	orrs	r3, r2
 80073a8:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	69ba      	ldr	r2, [r7, #24]
 80073ae:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	685b      	ldr	r3, [r3, #4]
 80073b4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80073b6:	2201      	movs	r2, #1
 80073b8:	69fb      	ldr	r3, [r7, #28]
 80073ba:	fa02 f303 	lsl.w	r3, r2, r3
 80073be:	43db      	mvns	r3, r3
 80073c0:	69ba      	ldr	r2, [r7, #24]
 80073c2:	4013      	ands	r3, r2
 80073c4:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80073c6:	683b      	ldr	r3, [r7, #0]
 80073c8:	685b      	ldr	r3, [r3, #4]
 80073ca:	091b      	lsrs	r3, r3, #4
 80073cc:	f003 0201 	and.w	r2, r3, #1
 80073d0:	69fb      	ldr	r3, [r7, #28]
 80073d2:	fa02 f303 	lsl.w	r3, r2, r3
 80073d6:	69ba      	ldr	r2, [r7, #24]
 80073d8:	4313      	orrs	r3, r2
 80073da:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	69ba      	ldr	r2, [r7, #24]
 80073e0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80073e2:	683b      	ldr	r3, [r7, #0]
 80073e4:	685b      	ldr	r3, [r3, #4]
 80073e6:	f003 0303 	and.w	r3, r3, #3
 80073ea:	2b03      	cmp	r3, #3
 80073ec:	d017      	beq.n	800741e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	68db      	ldr	r3, [r3, #12]
 80073f2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80073f4:	69fb      	ldr	r3, [r7, #28]
 80073f6:	005b      	lsls	r3, r3, #1
 80073f8:	2203      	movs	r2, #3
 80073fa:	fa02 f303 	lsl.w	r3, r2, r3
 80073fe:	43db      	mvns	r3, r3
 8007400:	69ba      	ldr	r2, [r7, #24]
 8007402:	4013      	ands	r3, r2
 8007404:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007406:	683b      	ldr	r3, [r7, #0]
 8007408:	689a      	ldr	r2, [r3, #8]
 800740a:	69fb      	ldr	r3, [r7, #28]
 800740c:	005b      	lsls	r3, r3, #1
 800740e:	fa02 f303 	lsl.w	r3, r2, r3
 8007412:	69ba      	ldr	r2, [r7, #24]
 8007414:	4313      	orrs	r3, r2
 8007416:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	69ba      	ldr	r2, [r7, #24]
 800741c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800741e:	683b      	ldr	r3, [r7, #0]
 8007420:	685b      	ldr	r3, [r3, #4]
 8007422:	f003 0303 	and.w	r3, r3, #3
 8007426:	2b02      	cmp	r3, #2
 8007428:	d123      	bne.n	8007472 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800742a:	69fb      	ldr	r3, [r7, #28]
 800742c:	08da      	lsrs	r2, r3, #3
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	3208      	adds	r2, #8
 8007432:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007436:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8007438:	69fb      	ldr	r3, [r7, #28]
 800743a:	f003 0307 	and.w	r3, r3, #7
 800743e:	009b      	lsls	r3, r3, #2
 8007440:	220f      	movs	r2, #15
 8007442:	fa02 f303 	lsl.w	r3, r2, r3
 8007446:	43db      	mvns	r3, r3
 8007448:	69ba      	ldr	r2, [r7, #24]
 800744a:	4013      	ands	r3, r2
 800744c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800744e:	683b      	ldr	r3, [r7, #0]
 8007450:	691a      	ldr	r2, [r3, #16]
 8007452:	69fb      	ldr	r3, [r7, #28]
 8007454:	f003 0307 	and.w	r3, r3, #7
 8007458:	009b      	lsls	r3, r3, #2
 800745a:	fa02 f303 	lsl.w	r3, r2, r3
 800745e:	69ba      	ldr	r2, [r7, #24]
 8007460:	4313      	orrs	r3, r2
 8007462:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8007464:	69fb      	ldr	r3, [r7, #28]
 8007466:	08da      	lsrs	r2, r3, #3
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	3208      	adds	r2, #8
 800746c:	69b9      	ldr	r1, [r7, #24]
 800746e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8007478:	69fb      	ldr	r3, [r7, #28]
 800747a:	005b      	lsls	r3, r3, #1
 800747c:	2203      	movs	r2, #3
 800747e:	fa02 f303 	lsl.w	r3, r2, r3
 8007482:	43db      	mvns	r3, r3
 8007484:	69ba      	ldr	r2, [r7, #24]
 8007486:	4013      	ands	r3, r2
 8007488:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800748a:	683b      	ldr	r3, [r7, #0]
 800748c:	685b      	ldr	r3, [r3, #4]
 800748e:	f003 0203 	and.w	r2, r3, #3
 8007492:	69fb      	ldr	r3, [r7, #28]
 8007494:	005b      	lsls	r3, r3, #1
 8007496:	fa02 f303 	lsl.w	r3, r2, r3
 800749a:	69ba      	ldr	r2, [r7, #24]
 800749c:	4313      	orrs	r3, r2
 800749e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	69ba      	ldr	r2, [r7, #24]
 80074a4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80074a6:	683b      	ldr	r3, [r7, #0]
 80074a8:	685b      	ldr	r3, [r3, #4]
 80074aa:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	f000 80e0 	beq.w	8007674 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80074b4:	4b2f      	ldr	r3, [pc, #188]	; (8007574 <HAL_GPIO_Init+0x238>)
 80074b6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80074ba:	4a2e      	ldr	r2, [pc, #184]	; (8007574 <HAL_GPIO_Init+0x238>)
 80074bc:	f043 0302 	orr.w	r3, r3, #2
 80074c0:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80074c4:	4b2b      	ldr	r3, [pc, #172]	; (8007574 <HAL_GPIO_Init+0x238>)
 80074c6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80074ca:	f003 0302 	and.w	r3, r3, #2
 80074ce:	60fb      	str	r3, [r7, #12]
 80074d0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80074d2:	4a29      	ldr	r2, [pc, #164]	; (8007578 <HAL_GPIO_Init+0x23c>)
 80074d4:	69fb      	ldr	r3, [r7, #28]
 80074d6:	089b      	lsrs	r3, r3, #2
 80074d8:	3302      	adds	r3, #2
 80074da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80074de:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80074e0:	69fb      	ldr	r3, [r7, #28]
 80074e2:	f003 0303 	and.w	r3, r3, #3
 80074e6:	009b      	lsls	r3, r3, #2
 80074e8:	220f      	movs	r2, #15
 80074ea:	fa02 f303 	lsl.w	r3, r2, r3
 80074ee:	43db      	mvns	r3, r3
 80074f0:	69ba      	ldr	r2, [r7, #24]
 80074f2:	4013      	ands	r3, r2
 80074f4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	4a20      	ldr	r2, [pc, #128]	; (800757c <HAL_GPIO_Init+0x240>)
 80074fa:	4293      	cmp	r3, r2
 80074fc:	d052      	beq.n	80075a4 <HAL_GPIO_Init+0x268>
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	4a1f      	ldr	r2, [pc, #124]	; (8007580 <HAL_GPIO_Init+0x244>)
 8007502:	4293      	cmp	r3, r2
 8007504:	d031      	beq.n	800756a <HAL_GPIO_Init+0x22e>
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	4a1e      	ldr	r2, [pc, #120]	; (8007584 <HAL_GPIO_Init+0x248>)
 800750a:	4293      	cmp	r3, r2
 800750c:	d02b      	beq.n	8007566 <HAL_GPIO_Init+0x22a>
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	4a1d      	ldr	r2, [pc, #116]	; (8007588 <HAL_GPIO_Init+0x24c>)
 8007512:	4293      	cmp	r3, r2
 8007514:	d025      	beq.n	8007562 <HAL_GPIO_Init+0x226>
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	4a1c      	ldr	r2, [pc, #112]	; (800758c <HAL_GPIO_Init+0x250>)
 800751a:	4293      	cmp	r3, r2
 800751c:	d01f      	beq.n	800755e <HAL_GPIO_Init+0x222>
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	4a1b      	ldr	r2, [pc, #108]	; (8007590 <HAL_GPIO_Init+0x254>)
 8007522:	4293      	cmp	r3, r2
 8007524:	d019      	beq.n	800755a <HAL_GPIO_Init+0x21e>
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	4a1a      	ldr	r2, [pc, #104]	; (8007594 <HAL_GPIO_Init+0x258>)
 800752a:	4293      	cmp	r3, r2
 800752c:	d013      	beq.n	8007556 <HAL_GPIO_Init+0x21a>
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	4a19      	ldr	r2, [pc, #100]	; (8007598 <HAL_GPIO_Init+0x25c>)
 8007532:	4293      	cmp	r3, r2
 8007534:	d00d      	beq.n	8007552 <HAL_GPIO_Init+0x216>
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	4a18      	ldr	r2, [pc, #96]	; (800759c <HAL_GPIO_Init+0x260>)
 800753a:	4293      	cmp	r3, r2
 800753c:	d007      	beq.n	800754e <HAL_GPIO_Init+0x212>
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	4a17      	ldr	r2, [pc, #92]	; (80075a0 <HAL_GPIO_Init+0x264>)
 8007542:	4293      	cmp	r3, r2
 8007544:	d101      	bne.n	800754a <HAL_GPIO_Init+0x20e>
 8007546:	2309      	movs	r3, #9
 8007548:	e02d      	b.n	80075a6 <HAL_GPIO_Init+0x26a>
 800754a:	230a      	movs	r3, #10
 800754c:	e02b      	b.n	80075a6 <HAL_GPIO_Init+0x26a>
 800754e:	2308      	movs	r3, #8
 8007550:	e029      	b.n	80075a6 <HAL_GPIO_Init+0x26a>
 8007552:	2307      	movs	r3, #7
 8007554:	e027      	b.n	80075a6 <HAL_GPIO_Init+0x26a>
 8007556:	2306      	movs	r3, #6
 8007558:	e025      	b.n	80075a6 <HAL_GPIO_Init+0x26a>
 800755a:	2305      	movs	r3, #5
 800755c:	e023      	b.n	80075a6 <HAL_GPIO_Init+0x26a>
 800755e:	2304      	movs	r3, #4
 8007560:	e021      	b.n	80075a6 <HAL_GPIO_Init+0x26a>
 8007562:	2303      	movs	r3, #3
 8007564:	e01f      	b.n	80075a6 <HAL_GPIO_Init+0x26a>
 8007566:	2302      	movs	r3, #2
 8007568:	e01d      	b.n	80075a6 <HAL_GPIO_Init+0x26a>
 800756a:	2301      	movs	r3, #1
 800756c:	e01b      	b.n	80075a6 <HAL_GPIO_Init+0x26a>
 800756e:	bf00      	nop
 8007570:	58000080 	.word	0x58000080
 8007574:	58024400 	.word	0x58024400
 8007578:	58000400 	.word	0x58000400
 800757c:	58020000 	.word	0x58020000
 8007580:	58020400 	.word	0x58020400
 8007584:	58020800 	.word	0x58020800
 8007588:	58020c00 	.word	0x58020c00
 800758c:	58021000 	.word	0x58021000
 8007590:	58021400 	.word	0x58021400
 8007594:	58021800 	.word	0x58021800
 8007598:	58021c00 	.word	0x58021c00
 800759c:	58022000 	.word	0x58022000
 80075a0:	58022400 	.word	0x58022400
 80075a4:	2300      	movs	r3, #0
 80075a6:	69fa      	ldr	r2, [r7, #28]
 80075a8:	f002 0203 	and.w	r2, r2, #3
 80075ac:	0092      	lsls	r2, r2, #2
 80075ae:	4093      	lsls	r3, r2
 80075b0:	69ba      	ldr	r2, [r7, #24]
 80075b2:	4313      	orrs	r3, r2
 80075b4:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80075b6:	4938      	ldr	r1, [pc, #224]	; (8007698 <HAL_GPIO_Init+0x35c>)
 80075b8:	69fb      	ldr	r3, [r7, #28]
 80075ba:	089b      	lsrs	r3, r3, #2
 80075bc:	3302      	adds	r3, #2
 80075be:	69ba      	ldr	r2, [r7, #24]
 80075c0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80075c4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80075cc:	693b      	ldr	r3, [r7, #16]
 80075ce:	43db      	mvns	r3, r3
 80075d0:	69ba      	ldr	r2, [r7, #24]
 80075d2:	4013      	ands	r3, r2
 80075d4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80075d6:	683b      	ldr	r3, [r7, #0]
 80075d8:	685b      	ldr	r3, [r3, #4]
 80075da:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80075de:	2b00      	cmp	r3, #0
 80075e0:	d003      	beq.n	80075ea <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80075e2:	69ba      	ldr	r2, [r7, #24]
 80075e4:	693b      	ldr	r3, [r7, #16]
 80075e6:	4313      	orrs	r3, r2
 80075e8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80075ea:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80075ee:	69bb      	ldr	r3, [r7, #24]
 80075f0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80075f2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80075f6:	685b      	ldr	r3, [r3, #4]
 80075f8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80075fa:	693b      	ldr	r3, [r7, #16]
 80075fc:	43db      	mvns	r3, r3
 80075fe:	69ba      	ldr	r2, [r7, #24]
 8007600:	4013      	ands	r3, r2
 8007602:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8007604:	683b      	ldr	r3, [r7, #0]
 8007606:	685b      	ldr	r3, [r3, #4]
 8007608:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800760c:	2b00      	cmp	r3, #0
 800760e:	d003      	beq.n	8007618 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8007610:	69ba      	ldr	r2, [r7, #24]
 8007612:	693b      	ldr	r3, [r7, #16]
 8007614:	4313      	orrs	r3, r2
 8007616:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8007618:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800761c:	69bb      	ldr	r3, [r7, #24]
 800761e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8007620:	697b      	ldr	r3, [r7, #20]
 8007622:	685b      	ldr	r3, [r3, #4]
 8007624:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007626:	693b      	ldr	r3, [r7, #16]
 8007628:	43db      	mvns	r3, r3
 800762a:	69ba      	ldr	r2, [r7, #24]
 800762c:	4013      	ands	r3, r2
 800762e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8007630:	683b      	ldr	r3, [r7, #0]
 8007632:	685b      	ldr	r3, [r3, #4]
 8007634:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007638:	2b00      	cmp	r3, #0
 800763a:	d003      	beq.n	8007644 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 800763c:	69ba      	ldr	r2, [r7, #24]
 800763e:	693b      	ldr	r3, [r7, #16]
 8007640:	4313      	orrs	r3, r2
 8007642:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8007644:	697b      	ldr	r3, [r7, #20]
 8007646:	69ba      	ldr	r2, [r7, #24]
 8007648:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800764a:	697b      	ldr	r3, [r7, #20]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007650:	693b      	ldr	r3, [r7, #16]
 8007652:	43db      	mvns	r3, r3
 8007654:	69ba      	ldr	r2, [r7, #24]
 8007656:	4013      	ands	r3, r2
 8007658:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800765a:	683b      	ldr	r3, [r7, #0]
 800765c:	685b      	ldr	r3, [r3, #4]
 800765e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007662:	2b00      	cmp	r3, #0
 8007664:	d003      	beq.n	800766e <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8007666:	69ba      	ldr	r2, [r7, #24]
 8007668:	693b      	ldr	r3, [r7, #16]
 800766a:	4313      	orrs	r3, r2
 800766c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800766e:	697b      	ldr	r3, [r7, #20]
 8007670:	69ba      	ldr	r2, [r7, #24]
 8007672:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8007674:	69fb      	ldr	r3, [r7, #28]
 8007676:	3301      	adds	r3, #1
 8007678:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800767a:	683b      	ldr	r3, [r7, #0]
 800767c:	681a      	ldr	r2, [r3, #0]
 800767e:	69fb      	ldr	r3, [r7, #28]
 8007680:	fa22 f303 	lsr.w	r3, r2, r3
 8007684:	2b00      	cmp	r3, #0
 8007686:	f47f ae63 	bne.w	8007350 <HAL_GPIO_Init+0x14>
  }
}
 800768a:	bf00      	nop
 800768c:	bf00      	nop
 800768e:	3724      	adds	r7, #36	; 0x24
 8007690:	46bd      	mov	sp, r7
 8007692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007696:	4770      	bx	lr
 8007698:	58000400 	.word	0x58000400

0800769c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800769c:	b480      	push	{r7}
 800769e:	b085      	sub	sp, #20
 80076a0:	af00      	add	r7, sp, #0
 80076a2:	6078      	str	r0, [r7, #4]
 80076a4:	460b      	mov	r3, r1
 80076a6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	691a      	ldr	r2, [r3, #16]
 80076ac:	887b      	ldrh	r3, [r7, #2]
 80076ae:	4013      	ands	r3, r2
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	d002      	beq.n	80076ba <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80076b4:	2301      	movs	r3, #1
 80076b6:	73fb      	strb	r3, [r7, #15]
 80076b8:	e001      	b.n	80076be <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80076ba:	2300      	movs	r3, #0
 80076bc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80076be:	7bfb      	ldrb	r3, [r7, #15]
}
 80076c0:	4618      	mov	r0, r3
 80076c2:	3714      	adds	r7, #20
 80076c4:	46bd      	mov	sp, r7
 80076c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ca:	4770      	bx	lr

080076cc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80076cc:	b480      	push	{r7}
 80076ce:	b083      	sub	sp, #12
 80076d0:	af00      	add	r7, sp, #0
 80076d2:	6078      	str	r0, [r7, #4]
 80076d4:	460b      	mov	r3, r1
 80076d6:	807b      	strh	r3, [r7, #2]
 80076d8:	4613      	mov	r3, r2
 80076da:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80076dc:	787b      	ldrb	r3, [r7, #1]
 80076de:	2b00      	cmp	r3, #0
 80076e0:	d003      	beq.n	80076ea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80076e2:	887a      	ldrh	r2, [r7, #2]
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80076e8:	e003      	b.n	80076f2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80076ea:	887b      	ldrh	r3, [r7, #2]
 80076ec:	041a      	lsls	r2, r3, #16
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	619a      	str	r2, [r3, #24]
}
 80076f2:	bf00      	nop
 80076f4:	370c      	adds	r7, #12
 80076f6:	46bd      	mov	sp, r7
 80076f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076fc:	4770      	bx	lr

080076fe <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80076fe:	b580      	push	{r7, lr}
 8007700:	b082      	sub	sp, #8
 8007702:	af00      	add	r7, sp, #0
 8007704:	4603      	mov	r3, r0
 8007706:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 8007708:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800770c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8007710:	88fb      	ldrh	r3, [r7, #6]
 8007712:	4013      	ands	r3, r2
 8007714:	2b00      	cmp	r3, #0
 8007716:	d008      	beq.n	800772a <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8007718:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800771c:	88fb      	ldrh	r3, [r7, #6]
 800771e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8007722:	88fb      	ldrh	r3, [r7, #6]
 8007724:	4618      	mov	r0, r3
 8007726:	f7fa ffbd 	bl	80026a4 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 800772a:	bf00      	nop
 800772c:	3708      	adds	r7, #8
 800772e:	46bd      	mov	sp, r7
 8007730:	bd80      	pop	{r7, pc}
	...

08007734 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8007734:	b580      	push	{r7, lr}
 8007736:	b084      	sub	sp, #16
 8007738:	af00      	add	r7, sp, #0
 800773a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 800773c:	4b19      	ldr	r3, [pc, #100]	; (80077a4 <HAL_PWREx_ConfigSupply+0x70>)
 800773e:	68db      	ldr	r3, [r3, #12]
 8007740:	f003 0304 	and.w	r3, r3, #4
 8007744:	2b04      	cmp	r3, #4
 8007746:	d00a      	beq.n	800775e <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8007748:	4b16      	ldr	r3, [pc, #88]	; (80077a4 <HAL_PWREx_ConfigSupply+0x70>)
 800774a:	68db      	ldr	r3, [r3, #12]
 800774c:	f003 0307 	and.w	r3, r3, #7
 8007750:	687a      	ldr	r2, [r7, #4]
 8007752:	429a      	cmp	r2, r3
 8007754:	d001      	beq.n	800775a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8007756:	2301      	movs	r3, #1
 8007758:	e01f      	b.n	800779a <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800775a:	2300      	movs	r3, #0
 800775c:	e01d      	b.n	800779a <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800775e:	4b11      	ldr	r3, [pc, #68]	; (80077a4 <HAL_PWREx_ConfigSupply+0x70>)
 8007760:	68db      	ldr	r3, [r3, #12]
 8007762:	f023 0207 	bic.w	r2, r3, #7
 8007766:	490f      	ldr	r1, [pc, #60]	; (80077a4 <HAL_PWREx_ConfigSupply+0x70>)
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	4313      	orrs	r3, r2
 800776c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800776e:	f7fe ff03 	bl	8006578 <HAL_GetTick>
 8007772:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8007774:	e009      	b.n	800778a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8007776:	f7fe feff 	bl	8006578 <HAL_GetTick>
 800777a:	4602      	mov	r2, r0
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	1ad3      	subs	r3, r2, r3
 8007780:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007784:	d901      	bls.n	800778a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8007786:	2301      	movs	r3, #1
 8007788:	e007      	b.n	800779a <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800778a:	4b06      	ldr	r3, [pc, #24]	; (80077a4 <HAL_PWREx_ConfigSupply+0x70>)
 800778c:	685b      	ldr	r3, [r3, #4]
 800778e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007792:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007796:	d1ee      	bne.n	8007776 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8007798:	2300      	movs	r3, #0
}
 800779a:	4618      	mov	r0, r3
 800779c:	3710      	adds	r7, #16
 800779e:	46bd      	mov	sp, r7
 80077a0:	bd80      	pop	{r7, pc}
 80077a2:	bf00      	nop
 80077a4:	58024800 	.word	0x58024800

080077a8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80077a8:	b580      	push	{r7, lr}
 80077aa:	b08c      	sub	sp, #48	; 0x30
 80077ac:	af00      	add	r7, sp, #0
 80077ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	d102      	bne.n	80077bc <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80077b6:	2301      	movs	r3, #1
 80077b8:	f000 bc1d 	b.w	8007ff6 <HAL_RCC_OscConfig+0x84e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	f003 0301 	and.w	r3, r3, #1
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	f000 8087 	beq.w	80078d8 <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80077ca:	4b99      	ldr	r3, [pc, #612]	; (8007a30 <HAL_RCC_OscConfig+0x288>)
 80077cc:	691b      	ldr	r3, [r3, #16]
 80077ce:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80077d2:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80077d4:	4b96      	ldr	r3, [pc, #600]	; (8007a30 <HAL_RCC_OscConfig+0x288>)
 80077d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077d8:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80077da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077dc:	2b10      	cmp	r3, #16
 80077de:	d007      	beq.n	80077f0 <HAL_RCC_OscConfig+0x48>
 80077e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077e2:	2b18      	cmp	r3, #24
 80077e4:	d110      	bne.n	8007808 <HAL_RCC_OscConfig+0x60>
 80077e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077e8:	f003 0303 	and.w	r3, r3, #3
 80077ec:	2b02      	cmp	r3, #2
 80077ee:	d10b      	bne.n	8007808 <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80077f0:	4b8f      	ldr	r3, [pc, #572]	; (8007a30 <HAL_RCC_OscConfig+0x288>)
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80077f8:	2b00      	cmp	r3, #0
 80077fa:	d06c      	beq.n	80078d6 <HAL_RCC_OscConfig+0x12e>
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	685b      	ldr	r3, [r3, #4]
 8007800:	2b00      	cmp	r3, #0
 8007802:	d168      	bne.n	80078d6 <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 8007804:	2301      	movs	r3, #1
 8007806:	e3f6      	b.n	8007ff6 <HAL_RCC_OscConfig+0x84e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	685b      	ldr	r3, [r3, #4]
 800780c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007810:	d106      	bne.n	8007820 <HAL_RCC_OscConfig+0x78>
 8007812:	4b87      	ldr	r3, [pc, #540]	; (8007a30 <HAL_RCC_OscConfig+0x288>)
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	4a86      	ldr	r2, [pc, #536]	; (8007a30 <HAL_RCC_OscConfig+0x288>)
 8007818:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800781c:	6013      	str	r3, [r2, #0]
 800781e:	e02e      	b.n	800787e <HAL_RCC_OscConfig+0xd6>
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	685b      	ldr	r3, [r3, #4]
 8007824:	2b00      	cmp	r3, #0
 8007826:	d10c      	bne.n	8007842 <HAL_RCC_OscConfig+0x9a>
 8007828:	4b81      	ldr	r3, [pc, #516]	; (8007a30 <HAL_RCC_OscConfig+0x288>)
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	4a80      	ldr	r2, [pc, #512]	; (8007a30 <HAL_RCC_OscConfig+0x288>)
 800782e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007832:	6013      	str	r3, [r2, #0]
 8007834:	4b7e      	ldr	r3, [pc, #504]	; (8007a30 <HAL_RCC_OscConfig+0x288>)
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	4a7d      	ldr	r2, [pc, #500]	; (8007a30 <HAL_RCC_OscConfig+0x288>)
 800783a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800783e:	6013      	str	r3, [r2, #0]
 8007840:	e01d      	b.n	800787e <HAL_RCC_OscConfig+0xd6>
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	685b      	ldr	r3, [r3, #4]
 8007846:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800784a:	d10c      	bne.n	8007866 <HAL_RCC_OscConfig+0xbe>
 800784c:	4b78      	ldr	r3, [pc, #480]	; (8007a30 <HAL_RCC_OscConfig+0x288>)
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	4a77      	ldr	r2, [pc, #476]	; (8007a30 <HAL_RCC_OscConfig+0x288>)
 8007852:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007856:	6013      	str	r3, [r2, #0]
 8007858:	4b75      	ldr	r3, [pc, #468]	; (8007a30 <HAL_RCC_OscConfig+0x288>)
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	4a74      	ldr	r2, [pc, #464]	; (8007a30 <HAL_RCC_OscConfig+0x288>)
 800785e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007862:	6013      	str	r3, [r2, #0]
 8007864:	e00b      	b.n	800787e <HAL_RCC_OscConfig+0xd6>
 8007866:	4b72      	ldr	r3, [pc, #456]	; (8007a30 <HAL_RCC_OscConfig+0x288>)
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	4a71      	ldr	r2, [pc, #452]	; (8007a30 <HAL_RCC_OscConfig+0x288>)
 800786c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007870:	6013      	str	r3, [r2, #0]
 8007872:	4b6f      	ldr	r3, [pc, #444]	; (8007a30 <HAL_RCC_OscConfig+0x288>)
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	4a6e      	ldr	r2, [pc, #440]	; (8007a30 <HAL_RCC_OscConfig+0x288>)
 8007878:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800787c:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	685b      	ldr	r3, [r3, #4]
 8007882:	2b00      	cmp	r3, #0
 8007884:	d013      	beq.n	80078ae <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007886:	f7fe fe77 	bl	8006578 <HAL_GetTick>
 800788a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800788c:	e008      	b.n	80078a0 <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800788e:	f7fe fe73 	bl	8006578 <HAL_GetTick>
 8007892:	4602      	mov	r2, r0
 8007894:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007896:	1ad3      	subs	r3, r2, r3
 8007898:	2b64      	cmp	r3, #100	; 0x64
 800789a:	d901      	bls.n	80078a0 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 800789c:	2303      	movs	r3, #3
 800789e:	e3aa      	b.n	8007ff6 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80078a0:	4b63      	ldr	r3, [pc, #396]	; (8007a30 <HAL_RCC_OscConfig+0x288>)
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80078a8:	2b00      	cmp	r3, #0
 80078aa:	d0f0      	beq.n	800788e <HAL_RCC_OscConfig+0xe6>
 80078ac:	e014      	b.n	80078d8 <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80078ae:	f7fe fe63 	bl	8006578 <HAL_GetTick>
 80078b2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80078b4:	e008      	b.n	80078c8 <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80078b6:	f7fe fe5f 	bl	8006578 <HAL_GetTick>
 80078ba:	4602      	mov	r2, r0
 80078bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078be:	1ad3      	subs	r3, r2, r3
 80078c0:	2b64      	cmp	r3, #100	; 0x64
 80078c2:	d901      	bls.n	80078c8 <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 80078c4:	2303      	movs	r3, #3
 80078c6:	e396      	b.n	8007ff6 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80078c8:	4b59      	ldr	r3, [pc, #356]	; (8007a30 <HAL_RCC_OscConfig+0x288>)
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	d1f0      	bne.n	80078b6 <HAL_RCC_OscConfig+0x10e>
 80078d4:	e000      	b.n	80078d8 <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80078d6:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	f003 0302 	and.w	r3, r3, #2
 80078e0:	2b00      	cmp	r3, #0
 80078e2:	f000 80cb 	beq.w	8007a7c <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80078e6:	4b52      	ldr	r3, [pc, #328]	; (8007a30 <HAL_RCC_OscConfig+0x288>)
 80078e8:	691b      	ldr	r3, [r3, #16]
 80078ea:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80078ee:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80078f0:	4b4f      	ldr	r3, [pc, #316]	; (8007a30 <HAL_RCC_OscConfig+0x288>)
 80078f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80078f4:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80078f6:	6a3b      	ldr	r3, [r7, #32]
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	d007      	beq.n	800790c <HAL_RCC_OscConfig+0x164>
 80078fc:	6a3b      	ldr	r3, [r7, #32]
 80078fe:	2b18      	cmp	r3, #24
 8007900:	d156      	bne.n	80079b0 <HAL_RCC_OscConfig+0x208>
 8007902:	69fb      	ldr	r3, [r7, #28]
 8007904:	f003 0303 	and.w	r3, r3, #3
 8007908:	2b00      	cmp	r3, #0
 800790a:	d151      	bne.n	80079b0 <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800790c:	4b48      	ldr	r3, [pc, #288]	; (8007a30 <HAL_RCC_OscConfig+0x288>)
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	f003 0304 	and.w	r3, r3, #4
 8007914:	2b00      	cmp	r3, #0
 8007916:	d005      	beq.n	8007924 <HAL_RCC_OscConfig+0x17c>
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	68db      	ldr	r3, [r3, #12]
 800791c:	2b00      	cmp	r3, #0
 800791e:	d101      	bne.n	8007924 <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 8007920:	2301      	movs	r3, #1
 8007922:	e368      	b.n	8007ff6 <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8007924:	4b42      	ldr	r3, [pc, #264]	; (8007a30 <HAL_RCC_OscConfig+0x288>)
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	f023 0219 	bic.w	r2, r3, #25
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	68db      	ldr	r3, [r3, #12]
 8007930:	493f      	ldr	r1, [pc, #252]	; (8007a30 <HAL_RCC_OscConfig+0x288>)
 8007932:	4313      	orrs	r3, r2
 8007934:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8007936:	f7fe fe1f 	bl	8006578 <HAL_GetTick>
 800793a:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800793c:	e008      	b.n	8007950 <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800793e:	f7fe fe1b 	bl	8006578 <HAL_GetTick>
 8007942:	4602      	mov	r2, r0
 8007944:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007946:	1ad3      	subs	r3, r2, r3
 8007948:	2b02      	cmp	r3, #2
 800794a:	d901      	bls.n	8007950 <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 800794c:	2303      	movs	r3, #3
 800794e:	e352      	b.n	8007ff6 <HAL_RCC_OscConfig+0x84e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007950:	4b37      	ldr	r3, [pc, #220]	; (8007a30 <HAL_RCC_OscConfig+0x288>)
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	f003 0304 	and.w	r3, r3, #4
 8007958:	2b00      	cmp	r3, #0
 800795a:	d0f0      	beq.n	800793e <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800795c:	f7fe fe3c 	bl	80065d8 <HAL_GetREVID>
 8007960:	4603      	mov	r3, r0
 8007962:	f241 0203 	movw	r2, #4099	; 0x1003
 8007966:	4293      	cmp	r3, r2
 8007968:	d817      	bhi.n	800799a <HAL_RCC_OscConfig+0x1f2>
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	691b      	ldr	r3, [r3, #16]
 800796e:	2b40      	cmp	r3, #64	; 0x40
 8007970:	d108      	bne.n	8007984 <HAL_RCC_OscConfig+0x1dc>
 8007972:	4b2f      	ldr	r3, [pc, #188]	; (8007a30 <HAL_RCC_OscConfig+0x288>)
 8007974:	685b      	ldr	r3, [r3, #4]
 8007976:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800797a:	4a2d      	ldr	r2, [pc, #180]	; (8007a30 <HAL_RCC_OscConfig+0x288>)
 800797c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007980:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007982:	e07b      	b.n	8007a7c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007984:	4b2a      	ldr	r3, [pc, #168]	; (8007a30 <HAL_RCC_OscConfig+0x288>)
 8007986:	685b      	ldr	r3, [r3, #4]
 8007988:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	691b      	ldr	r3, [r3, #16]
 8007990:	031b      	lsls	r3, r3, #12
 8007992:	4927      	ldr	r1, [pc, #156]	; (8007a30 <HAL_RCC_OscConfig+0x288>)
 8007994:	4313      	orrs	r3, r2
 8007996:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007998:	e070      	b.n	8007a7c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800799a:	4b25      	ldr	r3, [pc, #148]	; (8007a30 <HAL_RCC_OscConfig+0x288>)
 800799c:	685b      	ldr	r3, [r3, #4]
 800799e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	691b      	ldr	r3, [r3, #16]
 80079a6:	061b      	lsls	r3, r3, #24
 80079a8:	4921      	ldr	r1, [pc, #132]	; (8007a30 <HAL_RCC_OscConfig+0x288>)
 80079aa:	4313      	orrs	r3, r2
 80079ac:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80079ae:	e065      	b.n	8007a7c <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	68db      	ldr	r3, [r3, #12]
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	d048      	beq.n	8007a4a <HAL_RCC_OscConfig+0x2a2>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80079b8:	4b1d      	ldr	r3, [pc, #116]	; (8007a30 <HAL_RCC_OscConfig+0x288>)
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	f023 0219 	bic.w	r2, r3, #25
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	68db      	ldr	r3, [r3, #12]
 80079c4:	491a      	ldr	r1, [pc, #104]	; (8007a30 <HAL_RCC_OscConfig+0x288>)
 80079c6:	4313      	orrs	r3, r2
 80079c8:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80079ca:	f7fe fdd5 	bl	8006578 <HAL_GetTick>
 80079ce:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80079d0:	e008      	b.n	80079e4 <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80079d2:	f7fe fdd1 	bl	8006578 <HAL_GetTick>
 80079d6:	4602      	mov	r2, r0
 80079d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079da:	1ad3      	subs	r3, r2, r3
 80079dc:	2b02      	cmp	r3, #2
 80079de:	d901      	bls.n	80079e4 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 80079e0:	2303      	movs	r3, #3
 80079e2:	e308      	b.n	8007ff6 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80079e4:	4b12      	ldr	r3, [pc, #72]	; (8007a30 <HAL_RCC_OscConfig+0x288>)
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	f003 0304 	and.w	r3, r3, #4
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	d0f0      	beq.n	80079d2 <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80079f0:	f7fe fdf2 	bl	80065d8 <HAL_GetREVID>
 80079f4:	4603      	mov	r3, r0
 80079f6:	f241 0203 	movw	r2, #4099	; 0x1003
 80079fa:	4293      	cmp	r3, r2
 80079fc:	d81a      	bhi.n	8007a34 <HAL_RCC_OscConfig+0x28c>
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	691b      	ldr	r3, [r3, #16]
 8007a02:	2b40      	cmp	r3, #64	; 0x40
 8007a04:	d108      	bne.n	8007a18 <HAL_RCC_OscConfig+0x270>
 8007a06:	4b0a      	ldr	r3, [pc, #40]	; (8007a30 <HAL_RCC_OscConfig+0x288>)
 8007a08:	685b      	ldr	r3, [r3, #4]
 8007a0a:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8007a0e:	4a08      	ldr	r2, [pc, #32]	; (8007a30 <HAL_RCC_OscConfig+0x288>)
 8007a10:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007a14:	6053      	str	r3, [r2, #4]
 8007a16:	e031      	b.n	8007a7c <HAL_RCC_OscConfig+0x2d4>
 8007a18:	4b05      	ldr	r3, [pc, #20]	; (8007a30 <HAL_RCC_OscConfig+0x288>)
 8007a1a:	685b      	ldr	r3, [r3, #4]
 8007a1c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	691b      	ldr	r3, [r3, #16]
 8007a24:	031b      	lsls	r3, r3, #12
 8007a26:	4902      	ldr	r1, [pc, #8]	; (8007a30 <HAL_RCC_OscConfig+0x288>)
 8007a28:	4313      	orrs	r3, r2
 8007a2a:	604b      	str	r3, [r1, #4]
 8007a2c:	e026      	b.n	8007a7c <HAL_RCC_OscConfig+0x2d4>
 8007a2e:	bf00      	nop
 8007a30:	58024400 	.word	0x58024400
 8007a34:	4b9a      	ldr	r3, [pc, #616]	; (8007ca0 <HAL_RCC_OscConfig+0x4f8>)
 8007a36:	685b      	ldr	r3, [r3, #4]
 8007a38:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	691b      	ldr	r3, [r3, #16]
 8007a40:	061b      	lsls	r3, r3, #24
 8007a42:	4997      	ldr	r1, [pc, #604]	; (8007ca0 <HAL_RCC_OscConfig+0x4f8>)
 8007a44:	4313      	orrs	r3, r2
 8007a46:	604b      	str	r3, [r1, #4]
 8007a48:	e018      	b.n	8007a7c <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007a4a:	4b95      	ldr	r3, [pc, #596]	; (8007ca0 <HAL_RCC_OscConfig+0x4f8>)
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	4a94      	ldr	r2, [pc, #592]	; (8007ca0 <HAL_RCC_OscConfig+0x4f8>)
 8007a50:	f023 0301 	bic.w	r3, r3, #1
 8007a54:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007a56:	f7fe fd8f 	bl	8006578 <HAL_GetTick>
 8007a5a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8007a5c:	e008      	b.n	8007a70 <HAL_RCC_OscConfig+0x2c8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007a5e:	f7fe fd8b 	bl	8006578 <HAL_GetTick>
 8007a62:	4602      	mov	r2, r0
 8007a64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a66:	1ad3      	subs	r3, r2, r3
 8007a68:	2b02      	cmp	r3, #2
 8007a6a:	d901      	bls.n	8007a70 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8007a6c:	2303      	movs	r3, #3
 8007a6e:	e2c2      	b.n	8007ff6 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8007a70:	4b8b      	ldr	r3, [pc, #556]	; (8007ca0 <HAL_RCC_OscConfig+0x4f8>)
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	f003 0304 	and.w	r3, r3, #4
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	d1f0      	bne.n	8007a5e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	f003 0310 	and.w	r3, r3, #16
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	f000 80a9 	beq.w	8007bdc <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007a8a:	4b85      	ldr	r3, [pc, #532]	; (8007ca0 <HAL_RCC_OscConfig+0x4f8>)
 8007a8c:	691b      	ldr	r3, [r3, #16]
 8007a8e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007a92:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007a94:	4b82      	ldr	r3, [pc, #520]	; (8007ca0 <HAL_RCC_OscConfig+0x4f8>)
 8007a96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a98:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8007a9a:	69bb      	ldr	r3, [r7, #24]
 8007a9c:	2b08      	cmp	r3, #8
 8007a9e:	d007      	beq.n	8007ab0 <HAL_RCC_OscConfig+0x308>
 8007aa0:	69bb      	ldr	r3, [r7, #24]
 8007aa2:	2b18      	cmp	r3, #24
 8007aa4:	d13a      	bne.n	8007b1c <HAL_RCC_OscConfig+0x374>
 8007aa6:	697b      	ldr	r3, [r7, #20]
 8007aa8:	f003 0303 	and.w	r3, r3, #3
 8007aac:	2b01      	cmp	r3, #1
 8007aae:	d135      	bne.n	8007b1c <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007ab0:	4b7b      	ldr	r3, [pc, #492]	; (8007ca0 <HAL_RCC_OscConfig+0x4f8>)
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	d005      	beq.n	8007ac8 <HAL_RCC_OscConfig+0x320>
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	69db      	ldr	r3, [r3, #28]
 8007ac0:	2b80      	cmp	r3, #128	; 0x80
 8007ac2:	d001      	beq.n	8007ac8 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8007ac4:	2301      	movs	r3, #1
 8007ac6:	e296      	b.n	8007ff6 <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007ac8:	f7fe fd86 	bl	80065d8 <HAL_GetREVID>
 8007acc:	4603      	mov	r3, r0
 8007ace:	f241 0203 	movw	r2, #4099	; 0x1003
 8007ad2:	4293      	cmp	r3, r2
 8007ad4:	d817      	bhi.n	8007b06 <HAL_RCC_OscConfig+0x35e>
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	6a1b      	ldr	r3, [r3, #32]
 8007ada:	2b20      	cmp	r3, #32
 8007adc:	d108      	bne.n	8007af0 <HAL_RCC_OscConfig+0x348>
 8007ade:	4b70      	ldr	r3, [pc, #448]	; (8007ca0 <HAL_RCC_OscConfig+0x4f8>)
 8007ae0:	685b      	ldr	r3, [r3, #4]
 8007ae2:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8007ae6:	4a6e      	ldr	r2, [pc, #440]	; (8007ca0 <HAL_RCC_OscConfig+0x4f8>)
 8007ae8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007aec:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007aee:	e075      	b.n	8007bdc <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007af0:	4b6b      	ldr	r3, [pc, #428]	; (8007ca0 <HAL_RCC_OscConfig+0x4f8>)
 8007af2:	685b      	ldr	r3, [r3, #4]
 8007af4:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	6a1b      	ldr	r3, [r3, #32]
 8007afc:	069b      	lsls	r3, r3, #26
 8007afe:	4968      	ldr	r1, [pc, #416]	; (8007ca0 <HAL_RCC_OscConfig+0x4f8>)
 8007b00:	4313      	orrs	r3, r2
 8007b02:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007b04:	e06a      	b.n	8007bdc <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007b06:	4b66      	ldr	r3, [pc, #408]	; (8007ca0 <HAL_RCC_OscConfig+0x4f8>)
 8007b08:	68db      	ldr	r3, [r3, #12]
 8007b0a:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	6a1b      	ldr	r3, [r3, #32]
 8007b12:	061b      	lsls	r3, r3, #24
 8007b14:	4962      	ldr	r1, [pc, #392]	; (8007ca0 <HAL_RCC_OscConfig+0x4f8>)
 8007b16:	4313      	orrs	r3, r2
 8007b18:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007b1a:	e05f      	b.n	8007bdc <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	69db      	ldr	r3, [r3, #28]
 8007b20:	2b00      	cmp	r3, #0
 8007b22:	d042      	beq.n	8007baa <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8007b24:	4b5e      	ldr	r3, [pc, #376]	; (8007ca0 <HAL_RCC_OscConfig+0x4f8>)
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	4a5d      	ldr	r2, [pc, #372]	; (8007ca0 <HAL_RCC_OscConfig+0x4f8>)
 8007b2a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007b2e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007b30:	f7fe fd22 	bl	8006578 <HAL_GetTick>
 8007b34:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007b36:	e008      	b.n	8007b4a <HAL_RCC_OscConfig+0x3a2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8007b38:	f7fe fd1e 	bl	8006578 <HAL_GetTick>
 8007b3c:	4602      	mov	r2, r0
 8007b3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b40:	1ad3      	subs	r3, r2, r3
 8007b42:	2b02      	cmp	r3, #2
 8007b44:	d901      	bls.n	8007b4a <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8007b46:	2303      	movs	r3, #3
 8007b48:	e255      	b.n	8007ff6 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007b4a:	4b55      	ldr	r3, [pc, #340]	; (8007ca0 <HAL_RCC_OscConfig+0x4f8>)
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	d0f0      	beq.n	8007b38 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007b56:	f7fe fd3f 	bl	80065d8 <HAL_GetREVID>
 8007b5a:	4603      	mov	r3, r0
 8007b5c:	f241 0203 	movw	r2, #4099	; 0x1003
 8007b60:	4293      	cmp	r3, r2
 8007b62:	d817      	bhi.n	8007b94 <HAL_RCC_OscConfig+0x3ec>
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	6a1b      	ldr	r3, [r3, #32]
 8007b68:	2b20      	cmp	r3, #32
 8007b6a:	d108      	bne.n	8007b7e <HAL_RCC_OscConfig+0x3d6>
 8007b6c:	4b4c      	ldr	r3, [pc, #304]	; (8007ca0 <HAL_RCC_OscConfig+0x4f8>)
 8007b6e:	685b      	ldr	r3, [r3, #4]
 8007b70:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8007b74:	4a4a      	ldr	r2, [pc, #296]	; (8007ca0 <HAL_RCC_OscConfig+0x4f8>)
 8007b76:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007b7a:	6053      	str	r3, [r2, #4]
 8007b7c:	e02e      	b.n	8007bdc <HAL_RCC_OscConfig+0x434>
 8007b7e:	4b48      	ldr	r3, [pc, #288]	; (8007ca0 <HAL_RCC_OscConfig+0x4f8>)
 8007b80:	685b      	ldr	r3, [r3, #4]
 8007b82:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	6a1b      	ldr	r3, [r3, #32]
 8007b8a:	069b      	lsls	r3, r3, #26
 8007b8c:	4944      	ldr	r1, [pc, #272]	; (8007ca0 <HAL_RCC_OscConfig+0x4f8>)
 8007b8e:	4313      	orrs	r3, r2
 8007b90:	604b      	str	r3, [r1, #4]
 8007b92:	e023      	b.n	8007bdc <HAL_RCC_OscConfig+0x434>
 8007b94:	4b42      	ldr	r3, [pc, #264]	; (8007ca0 <HAL_RCC_OscConfig+0x4f8>)
 8007b96:	68db      	ldr	r3, [r3, #12]
 8007b98:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	6a1b      	ldr	r3, [r3, #32]
 8007ba0:	061b      	lsls	r3, r3, #24
 8007ba2:	493f      	ldr	r1, [pc, #252]	; (8007ca0 <HAL_RCC_OscConfig+0x4f8>)
 8007ba4:	4313      	orrs	r3, r2
 8007ba6:	60cb      	str	r3, [r1, #12]
 8007ba8:	e018      	b.n	8007bdc <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8007baa:	4b3d      	ldr	r3, [pc, #244]	; (8007ca0 <HAL_RCC_OscConfig+0x4f8>)
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	4a3c      	ldr	r2, [pc, #240]	; (8007ca0 <HAL_RCC_OscConfig+0x4f8>)
 8007bb0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007bb4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007bb6:	f7fe fcdf 	bl	8006578 <HAL_GetTick>
 8007bba:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8007bbc:	e008      	b.n	8007bd0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8007bbe:	f7fe fcdb 	bl	8006578 <HAL_GetTick>
 8007bc2:	4602      	mov	r2, r0
 8007bc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bc6:	1ad3      	subs	r3, r2, r3
 8007bc8:	2b02      	cmp	r3, #2
 8007bca:	d901      	bls.n	8007bd0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8007bcc:	2303      	movs	r3, #3
 8007bce:	e212      	b.n	8007ff6 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8007bd0:	4b33      	ldr	r3, [pc, #204]	; (8007ca0 <HAL_RCC_OscConfig+0x4f8>)
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007bd8:	2b00      	cmp	r3, #0
 8007bda:	d1f0      	bne.n	8007bbe <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	f003 0308 	and.w	r3, r3, #8
 8007be4:	2b00      	cmp	r3, #0
 8007be6:	d036      	beq.n	8007c56 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	695b      	ldr	r3, [r3, #20]
 8007bec:	2b00      	cmp	r3, #0
 8007bee:	d019      	beq.n	8007c24 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007bf0:	4b2b      	ldr	r3, [pc, #172]	; (8007ca0 <HAL_RCC_OscConfig+0x4f8>)
 8007bf2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007bf4:	4a2a      	ldr	r2, [pc, #168]	; (8007ca0 <HAL_RCC_OscConfig+0x4f8>)
 8007bf6:	f043 0301 	orr.w	r3, r3, #1
 8007bfa:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007bfc:	f7fe fcbc 	bl	8006578 <HAL_GetTick>
 8007c00:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8007c02:	e008      	b.n	8007c16 <HAL_RCC_OscConfig+0x46e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007c04:	f7fe fcb8 	bl	8006578 <HAL_GetTick>
 8007c08:	4602      	mov	r2, r0
 8007c0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c0c:	1ad3      	subs	r3, r2, r3
 8007c0e:	2b02      	cmp	r3, #2
 8007c10:	d901      	bls.n	8007c16 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8007c12:	2303      	movs	r3, #3
 8007c14:	e1ef      	b.n	8007ff6 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8007c16:	4b22      	ldr	r3, [pc, #136]	; (8007ca0 <HAL_RCC_OscConfig+0x4f8>)
 8007c18:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007c1a:	f003 0302 	and.w	r3, r3, #2
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	d0f0      	beq.n	8007c04 <HAL_RCC_OscConfig+0x45c>
 8007c22:	e018      	b.n	8007c56 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007c24:	4b1e      	ldr	r3, [pc, #120]	; (8007ca0 <HAL_RCC_OscConfig+0x4f8>)
 8007c26:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007c28:	4a1d      	ldr	r2, [pc, #116]	; (8007ca0 <HAL_RCC_OscConfig+0x4f8>)
 8007c2a:	f023 0301 	bic.w	r3, r3, #1
 8007c2e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007c30:	f7fe fca2 	bl	8006578 <HAL_GetTick>
 8007c34:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8007c36:	e008      	b.n	8007c4a <HAL_RCC_OscConfig+0x4a2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007c38:	f7fe fc9e 	bl	8006578 <HAL_GetTick>
 8007c3c:	4602      	mov	r2, r0
 8007c3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c40:	1ad3      	subs	r3, r2, r3
 8007c42:	2b02      	cmp	r3, #2
 8007c44:	d901      	bls.n	8007c4a <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8007c46:	2303      	movs	r3, #3
 8007c48:	e1d5      	b.n	8007ff6 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8007c4a:	4b15      	ldr	r3, [pc, #84]	; (8007ca0 <HAL_RCC_OscConfig+0x4f8>)
 8007c4c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007c4e:	f003 0302 	and.w	r3, r3, #2
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	d1f0      	bne.n	8007c38 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	f003 0320 	and.w	r3, r3, #32
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	d039      	beq.n	8007cd6 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	699b      	ldr	r3, [r3, #24]
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	d01c      	beq.n	8007ca4 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8007c6a:	4b0d      	ldr	r3, [pc, #52]	; (8007ca0 <HAL_RCC_OscConfig+0x4f8>)
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	4a0c      	ldr	r2, [pc, #48]	; (8007ca0 <HAL_RCC_OscConfig+0x4f8>)
 8007c70:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8007c74:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8007c76:	f7fe fc7f 	bl	8006578 <HAL_GetTick>
 8007c7a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8007c7c:	e008      	b.n	8007c90 <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8007c7e:	f7fe fc7b 	bl	8006578 <HAL_GetTick>
 8007c82:	4602      	mov	r2, r0
 8007c84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c86:	1ad3      	subs	r3, r2, r3
 8007c88:	2b02      	cmp	r3, #2
 8007c8a:	d901      	bls.n	8007c90 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8007c8c:	2303      	movs	r3, #3
 8007c8e:	e1b2      	b.n	8007ff6 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8007c90:	4b03      	ldr	r3, [pc, #12]	; (8007ca0 <HAL_RCC_OscConfig+0x4f8>)
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007c98:	2b00      	cmp	r3, #0
 8007c9a:	d0f0      	beq.n	8007c7e <HAL_RCC_OscConfig+0x4d6>
 8007c9c:	e01b      	b.n	8007cd6 <HAL_RCC_OscConfig+0x52e>
 8007c9e:	bf00      	nop
 8007ca0:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8007ca4:	4b9b      	ldr	r3, [pc, #620]	; (8007f14 <HAL_RCC_OscConfig+0x76c>)
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	4a9a      	ldr	r2, [pc, #616]	; (8007f14 <HAL_RCC_OscConfig+0x76c>)
 8007caa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007cae:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8007cb0:	f7fe fc62 	bl	8006578 <HAL_GetTick>
 8007cb4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8007cb6:	e008      	b.n	8007cca <HAL_RCC_OscConfig+0x522>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8007cb8:	f7fe fc5e 	bl	8006578 <HAL_GetTick>
 8007cbc:	4602      	mov	r2, r0
 8007cbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cc0:	1ad3      	subs	r3, r2, r3
 8007cc2:	2b02      	cmp	r3, #2
 8007cc4:	d901      	bls.n	8007cca <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8007cc6:	2303      	movs	r3, #3
 8007cc8:	e195      	b.n	8007ff6 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8007cca:	4b92      	ldr	r3, [pc, #584]	; (8007f14 <HAL_RCC_OscConfig+0x76c>)
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	d1f0      	bne.n	8007cb8 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	f003 0304 	and.w	r3, r3, #4
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	f000 8081 	beq.w	8007de6 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8007ce4:	4b8c      	ldr	r3, [pc, #560]	; (8007f18 <HAL_RCC_OscConfig+0x770>)
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	4a8b      	ldr	r2, [pc, #556]	; (8007f18 <HAL_RCC_OscConfig+0x770>)
 8007cea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007cee:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007cf0:	f7fe fc42 	bl	8006578 <HAL_GetTick>
 8007cf4:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007cf6:	e008      	b.n	8007d0a <HAL_RCC_OscConfig+0x562>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8007cf8:	f7fe fc3e 	bl	8006578 <HAL_GetTick>
 8007cfc:	4602      	mov	r2, r0
 8007cfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d00:	1ad3      	subs	r3, r2, r3
 8007d02:	2b64      	cmp	r3, #100	; 0x64
 8007d04:	d901      	bls.n	8007d0a <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8007d06:	2303      	movs	r3, #3
 8007d08:	e175      	b.n	8007ff6 <HAL_RCC_OscConfig+0x84e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007d0a:	4b83      	ldr	r3, [pc, #524]	; (8007f18 <HAL_RCC_OscConfig+0x770>)
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	d0f0      	beq.n	8007cf8 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	689b      	ldr	r3, [r3, #8]
 8007d1a:	2b01      	cmp	r3, #1
 8007d1c:	d106      	bne.n	8007d2c <HAL_RCC_OscConfig+0x584>
 8007d1e:	4b7d      	ldr	r3, [pc, #500]	; (8007f14 <HAL_RCC_OscConfig+0x76c>)
 8007d20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007d22:	4a7c      	ldr	r2, [pc, #496]	; (8007f14 <HAL_RCC_OscConfig+0x76c>)
 8007d24:	f043 0301 	orr.w	r3, r3, #1
 8007d28:	6713      	str	r3, [r2, #112]	; 0x70
 8007d2a:	e02d      	b.n	8007d88 <HAL_RCC_OscConfig+0x5e0>
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	689b      	ldr	r3, [r3, #8]
 8007d30:	2b00      	cmp	r3, #0
 8007d32:	d10c      	bne.n	8007d4e <HAL_RCC_OscConfig+0x5a6>
 8007d34:	4b77      	ldr	r3, [pc, #476]	; (8007f14 <HAL_RCC_OscConfig+0x76c>)
 8007d36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007d38:	4a76      	ldr	r2, [pc, #472]	; (8007f14 <HAL_RCC_OscConfig+0x76c>)
 8007d3a:	f023 0301 	bic.w	r3, r3, #1
 8007d3e:	6713      	str	r3, [r2, #112]	; 0x70
 8007d40:	4b74      	ldr	r3, [pc, #464]	; (8007f14 <HAL_RCC_OscConfig+0x76c>)
 8007d42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007d44:	4a73      	ldr	r2, [pc, #460]	; (8007f14 <HAL_RCC_OscConfig+0x76c>)
 8007d46:	f023 0304 	bic.w	r3, r3, #4
 8007d4a:	6713      	str	r3, [r2, #112]	; 0x70
 8007d4c:	e01c      	b.n	8007d88 <HAL_RCC_OscConfig+0x5e0>
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	689b      	ldr	r3, [r3, #8]
 8007d52:	2b05      	cmp	r3, #5
 8007d54:	d10c      	bne.n	8007d70 <HAL_RCC_OscConfig+0x5c8>
 8007d56:	4b6f      	ldr	r3, [pc, #444]	; (8007f14 <HAL_RCC_OscConfig+0x76c>)
 8007d58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007d5a:	4a6e      	ldr	r2, [pc, #440]	; (8007f14 <HAL_RCC_OscConfig+0x76c>)
 8007d5c:	f043 0304 	orr.w	r3, r3, #4
 8007d60:	6713      	str	r3, [r2, #112]	; 0x70
 8007d62:	4b6c      	ldr	r3, [pc, #432]	; (8007f14 <HAL_RCC_OscConfig+0x76c>)
 8007d64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007d66:	4a6b      	ldr	r2, [pc, #428]	; (8007f14 <HAL_RCC_OscConfig+0x76c>)
 8007d68:	f043 0301 	orr.w	r3, r3, #1
 8007d6c:	6713      	str	r3, [r2, #112]	; 0x70
 8007d6e:	e00b      	b.n	8007d88 <HAL_RCC_OscConfig+0x5e0>
 8007d70:	4b68      	ldr	r3, [pc, #416]	; (8007f14 <HAL_RCC_OscConfig+0x76c>)
 8007d72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007d74:	4a67      	ldr	r2, [pc, #412]	; (8007f14 <HAL_RCC_OscConfig+0x76c>)
 8007d76:	f023 0301 	bic.w	r3, r3, #1
 8007d7a:	6713      	str	r3, [r2, #112]	; 0x70
 8007d7c:	4b65      	ldr	r3, [pc, #404]	; (8007f14 <HAL_RCC_OscConfig+0x76c>)
 8007d7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007d80:	4a64      	ldr	r2, [pc, #400]	; (8007f14 <HAL_RCC_OscConfig+0x76c>)
 8007d82:	f023 0304 	bic.w	r3, r3, #4
 8007d86:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	689b      	ldr	r3, [r3, #8]
 8007d8c:	2b00      	cmp	r3, #0
 8007d8e:	d015      	beq.n	8007dbc <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007d90:	f7fe fbf2 	bl	8006578 <HAL_GetTick>
 8007d94:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007d96:	e00a      	b.n	8007dae <HAL_RCC_OscConfig+0x606>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007d98:	f7fe fbee 	bl	8006578 <HAL_GetTick>
 8007d9c:	4602      	mov	r2, r0
 8007d9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007da0:	1ad3      	subs	r3, r2, r3
 8007da2:	f241 3288 	movw	r2, #5000	; 0x1388
 8007da6:	4293      	cmp	r3, r2
 8007da8:	d901      	bls.n	8007dae <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8007daa:	2303      	movs	r3, #3
 8007dac:	e123      	b.n	8007ff6 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007dae:	4b59      	ldr	r3, [pc, #356]	; (8007f14 <HAL_RCC_OscConfig+0x76c>)
 8007db0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007db2:	f003 0302 	and.w	r3, r3, #2
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	d0ee      	beq.n	8007d98 <HAL_RCC_OscConfig+0x5f0>
 8007dba:	e014      	b.n	8007de6 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007dbc:	f7fe fbdc 	bl	8006578 <HAL_GetTick>
 8007dc0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8007dc2:	e00a      	b.n	8007dda <HAL_RCC_OscConfig+0x632>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007dc4:	f7fe fbd8 	bl	8006578 <HAL_GetTick>
 8007dc8:	4602      	mov	r2, r0
 8007dca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dcc:	1ad3      	subs	r3, r2, r3
 8007dce:	f241 3288 	movw	r2, #5000	; 0x1388
 8007dd2:	4293      	cmp	r3, r2
 8007dd4:	d901      	bls.n	8007dda <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8007dd6:	2303      	movs	r3, #3
 8007dd8:	e10d      	b.n	8007ff6 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8007dda:	4b4e      	ldr	r3, [pc, #312]	; (8007f14 <HAL_RCC_OscConfig+0x76c>)
 8007ddc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007dde:	f003 0302 	and.w	r3, r3, #2
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	d1ee      	bne.n	8007dc4 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007dea:	2b00      	cmp	r3, #0
 8007dec:	f000 8102 	beq.w	8007ff4 <HAL_RCC_OscConfig+0x84c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8007df0:	4b48      	ldr	r3, [pc, #288]	; (8007f14 <HAL_RCC_OscConfig+0x76c>)
 8007df2:	691b      	ldr	r3, [r3, #16]
 8007df4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007df8:	2b18      	cmp	r3, #24
 8007dfa:	f000 80bd 	beq.w	8007f78 <HAL_RCC_OscConfig+0x7d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e02:	2b02      	cmp	r3, #2
 8007e04:	f040 809e 	bne.w	8007f44 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007e08:	4b42      	ldr	r3, [pc, #264]	; (8007f14 <HAL_RCC_OscConfig+0x76c>)
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	4a41      	ldr	r2, [pc, #260]	; (8007f14 <HAL_RCC_OscConfig+0x76c>)
 8007e0e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007e12:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007e14:	f7fe fbb0 	bl	8006578 <HAL_GetTick>
 8007e18:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007e1a:	e008      	b.n	8007e2e <HAL_RCC_OscConfig+0x686>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007e1c:	f7fe fbac 	bl	8006578 <HAL_GetTick>
 8007e20:	4602      	mov	r2, r0
 8007e22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e24:	1ad3      	subs	r3, r2, r3
 8007e26:	2b02      	cmp	r3, #2
 8007e28:	d901      	bls.n	8007e2e <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8007e2a:	2303      	movs	r3, #3
 8007e2c:	e0e3      	b.n	8007ff6 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007e2e:	4b39      	ldr	r3, [pc, #228]	; (8007f14 <HAL_RCC_OscConfig+0x76c>)
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007e36:	2b00      	cmp	r3, #0
 8007e38:	d1f0      	bne.n	8007e1c <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007e3a:	4b36      	ldr	r3, [pc, #216]	; (8007f14 <HAL_RCC_OscConfig+0x76c>)
 8007e3c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007e3e:	4b37      	ldr	r3, [pc, #220]	; (8007f1c <HAL_RCC_OscConfig+0x774>)
 8007e40:	4013      	ands	r3, r2
 8007e42:	687a      	ldr	r2, [r7, #4]
 8007e44:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8007e46:	687a      	ldr	r2, [r7, #4]
 8007e48:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8007e4a:	0112      	lsls	r2, r2, #4
 8007e4c:	430a      	orrs	r2, r1
 8007e4e:	4931      	ldr	r1, [pc, #196]	; (8007f14 <HAL_RCC_OscConfig+0x76c>)
 8007e50:	4313      	orrs	r3, r2
 8007e52:	628b      	str	r3, [r1, #40]	; 0x28
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e58:	3b01      	subs	r3, #1
 8007e5a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007e62:	3b01      	subs	r3, #1
 8007e64:	025b      	lsls	r3, r3, #9
 8007e66:	b29b      	uxth	r3, r3
 8007e68:	431a      	orrs	r2, r3
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e6e:	3b01      	subs	r3, #1
 8007e70:	041b      	lsls	r3, r3, #16
 8007e72:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8007e76:	431a      	orrs	r2, r3
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007e7c:	3b01      	subs	r3, #1
 8007e7e:	061b      	lsls	r3, r3, #24
 8007e80:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8007e84:	4923      	ldr	r1, [pc, #140]	; (8007f14 <HAL_RCC_OscConfig+0x76c>)
 8007e86:	4313      	orrs	r3, r2
 8007e88:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8007e8a:	4b22      	ldr	r3, [pc, #136]	; (8007f14 <HAL_RCC_OscConfig+0x76c>)
 8007e8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e8e:	4a21      	ldr	r2, [pc, #132]	; (8007f14 <HAL_RCC_OscConfig+0x76c>)
 8007e90:	f023 0301 	bic.w	r3, r3, #1
 8007e94:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8007e96:	4b1f      	ldr	r3, [pc, #124]	; (8007f14 <HAL_RCC_OscConfig+0x76c>)
 8007e98:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007e9a:	4b21      	ldr	r3, [pc, #132]	; (8007f20 <HAL_RCC_OscConfig+0x778>)
 8007e9c:	4013      	ands	r3, r2
 8007e9e:	687a      	ldr	r2, [r7, #4]
 8007ea0:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8007ea2:	00d2      	lsls	r2, r2, #3
 8007ea4:	491b      	ldr	r1, [pc, #108]	; (8007f14 <HAL_RCC_OscConfig+0x76c>)
 8007ea6:	4313      	orrs	r3, r2
 8007ea8:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8007eaa:	4b1a      	ldr	r3, [pc, #104]	; (8007f14 <HAL_RCC_OscConfig+0x76c>)
 8007eac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007eae:	f023 020c 	bic.w	r2, r3, #12
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007eb6:	4917      	ldr	r1, [pc, #92]	; (8007f14 <HAL_RCC_OscConfig+0x76c>)
 8007eb8:	4313      	orrs	r3, r2
 8007eba:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8007ebc:	4b15      	ldr	r3, [pc, #84]	; (8007f14 <HAL_RCC_OscConfig+0x76c>)
 8007ebe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ec0:	f023 0202 	bic.w	r2, r3, #2
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007ec8:	4912      	ldr	r1, [pc, #72]	; (8007f14 <HAL_RCC_OscConfig+0x76c>)
 8007eca:	4313      	orrs	r3, r2
 8007ecc:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8007ece:	4b11      	ldr	r3, [pc, #68]	; (8007f14 <HAL_RCC_OscConfig+0x76c>)
 8007ed0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ed2:	4a10      	ldr	r2, [pc, #64]	; (8007f14 <HAL_RCC_OscConfig+0x76c>)
 8007ed4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007ed8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007eda:	4b0e      	ldr	r3, [pc, #56]	; (8007f14 <HAL_RCC_OscConfig+0x76c>)
 8007edc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ede:	4a0d      	ldr	r2, [pc, #52]	; (8007f14 <HAL_RCC_OscConfig+0x76c>)
 8007ee0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007ee4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8007ee6:	4b0b      	ldr	r3, [pc, #44]	; (8007f14 <HAL_RCC_OscConfig+0x76c>)
 8007ee8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007eea:	4a0a      	ldr	r2, [pc, #40]	; (8007f14 <HAL_RCC_OscConfig+0x76c>)
 8007eec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007ef0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8007ef2:	4b08      	ldr	r3, [pc, #32]	; (8007f14 <HAL_RCC_OscConfig+0x76c>)
 8007ef4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ef6:	4a07      	ldr	r2, [pc, #28]	; (8007f14 <HAL_RCC_OscConfig+0x76c>)
 8007ef8:	f043 0301 	orr.w	r3, r3, #1
 8007efc:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007efe:	4b05      	ldr	r3, [pc, #20]	; (8007f14 <HAL_RCC_OscConfig+0x76c>)
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	4a04      	ldr	r2, [pc, #16]	; (8007f14 <HAL_RCC_OscConfig+0x76c>)
 8007f04:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007f08:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007f0a:	f7fe fb35 	bl	8006578 <HAL_GetTick>
 8007f0e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007f10:	e011      	b.n	8007f36 <HAL_RCC_OscConfig+0x78e>
 8007f12:	bf00      	nop
 8007f14:	58024400 	.word	0x58024400
 8007f18:	58024800 	.word	0x58024800
 8007f1c:	fffffc0c 	.word	0xfffffc0c
 8007f20:	ffff0007 	.word	0xffff0007
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007f24:	f7fe fb28 	bl	8006578 <HAL_GetTick>
 8007f28:	4602      	mov	r2, r0
 8007f2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f2c:	1ad3      	subs	r3, r2, r3
 8007f2e:	2b02      	cmp	r3, #2
 8007f30:	d901      	bls.n	8007f36 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8007f32:	2303      	movs	r3, #3
 8007f34:	e05f      	b.n	8007ff6 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007f36:	4b32      	ldr	r3, [pc, #200]	; (8008000 <HAL_RCC_OscConfig+0x858>)
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007f3e:	2b00      	cmp	r3, #0
 8007f40:	d0f0      	beq.n	8007f24 <HAL_RCC_OscConfig+0x77c>
 8007f42:	e057      	b.n	8007ff4 <HAL_RCC_OscConfig+0x84c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007f44:	4b2e      	ldr	r3, [pc, #184]	; (8008000 <HAL_RCC_OscConfig+0x858>)
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	4a2d      	ldr	r2, [pc, #180]	; (8008000 <HAL_RCC_OscConfig+0x858>)
 8007f4a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007f4e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007f50:	f7fe fb12 	bl	8006578 <HAL_GetTick>
 8007f54:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007f56:	e008      	b.n	8007f6a <HAL_RCC_OscConfig+0x7c2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007f58:	f7fe fb0e 	bl	8006578 <HAL_GetTick>
 8007f5c:	4602      	mov	r2, r0
 8007f5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f60:	1ad3      	subs	r3, r2, r3
 8007f62:	2b02      	cmp	r3, #2
 8007f64:	d901      	bls.n	8007f6a <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8007f66:	2303      	movs	r3, #3
 8007f68:	e045      	b.n	8007ff6 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007f6a:	4b25      	ldr	r3, [pc, #148]	; (8008000 <HAL_RCC_OscConfig+0x858>)
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	d1f0      	bne.n	8007f58 <HAL_RCC_OscConfig+0x7b0>
 8007f76:	e03d      	b.n	8007ff4 <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8007f78:	4b21      	ldr	r3, [pc, #132]	; (8008000 <HAL_RCC_OscConfig+0x858>)
 8007f7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f7c:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8007f7e:	4b20      	ldr	r3, [pc, #128]	; (8008000 <HAL_RCC_OscConfig+0x858>)
 8007f80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f82:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f88:	2b01      	cmp	r3, #1
 8007f8a:	d031      	beq.n	8007ff0 <HAL_RCC_OscConfig+0x848>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007f8c:	693b      	ldr	r3, [r7, #16]
 8007f8e:	f003 0203 	and.w	r2, r3, #3
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007f96:	429a      	cmp	r2, r3
 8007f98:	d12a      	bne.n	8007ff0 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8007f9a:	693b      	ldr	r3, [r7, #16]
 8007f9c:	091b      	lsrs	r3, r3, #4
 8007f9e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007fa6:	429a      	cmp	r2, r3
 8007fa8:	d122      	bne.n	8007ff0 <HAL_RCC_OscConfig+0x848>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8007faa:	68fb      	ldr	r3, [r7, #12]
 8007fac:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007fb4:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8007fb6:	429a      	cmp	r2, r3
 8007fb8:	d11a      	bne.n	8007ff0 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8007fba:	68fb      	ldr	r3, [r7, #12]
 8007fbc:	0a5b      	lsrs	r3, r3, #9
 8007fbe:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007fc6:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8007fc8:	429a      	cmp	r2, r3
 8007fca:	d111      	bne.n	8007ff0 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8007fcc:	68fb      	ldr	r3, [r7, #12]
 8007fce:	0c1b      	lsrs	r3, r3, #16
 8007fd0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007fd8:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8007fda:	429a      	cmp	r2, r3
 8007fdc:	d108      	bne.n	8007ff0 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8007fde:	68fb      	ldr	r3, [r7, #12]
 8007fe0:	0e1b      	lsrs	r3, r3, #24
 8007fe2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007fea:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8007fec:	429a      	cmp	r2, r3
 8007fee:	d001      	beq.n	8007ff4 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8007ff0:	2301      	movs	r3, #1
 8007ff2:	e000      	b.n	8007ff6 <HAL_RCC_OscConfig+0x84e>
      }
    }
  }
  return HAL_OK;
 8007ff4:	2300      	movs	r3, #0
}
 8007ff6:	4618      	mov	r0, r3
 8007ff8:	3730      	adds	r7, #48	; 0x30
 8007ffa:	46bd      	mov	sp, r7
 8007ffc:	bd80      	pop	{r7, pc}
 8007ffe:	bf00      	nop
 8008000:	58024400 	.word	0x58024400

08008004 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008004:	b580      	push	{r7, lr}
 8008006:	b086      	sub	sp, #24
 8008008:	af00      	add	r7, sp, #0
 800800a:	6078      	str	r0, [r7, #4]
 800800c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	2b00      	cmp	r3, #0
 8008012:	d101      	bne.n	8008018 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008014:	2301      	movs	r3, #1
 8008016:	e19c      	b.n	8008352 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8008018:	4b8a      	ldr	r3, [pc, #552]	; (8008244 <HAL_RCC_ClockConfig+0x240>)
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	f003 030f 	and.w	r3, r3, #15
 8008020:	683a      	ldr	r2, [r7, #0]
 8008022:	429a      	cmp	r2, r3
 8008024:	d910      	bls.n	8008048 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008026:	4b87      	ldr	r3, [pc, #540]	; (8008244 <HAL_RCC_ClockConfig+0x240>)
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	f023 020f 	bic.w	r2, r3, #15
 800802e:	4985      	ldr	r1, [pc, #532]	; (8008244 <HAL_RCC_ClockConfig+0x240>)
 8008030:	683b      	ldr	r3, [r7, #0]
 8008032:	4313      	orrs	r3, r2
 8008034:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008036:	4b83      	ldr	r3, [pc, #524]	; (8008244 <HAL_RCC_ClockConfig+0x240>)
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	f003 030f 	and.w	r3, r3, #15
 800803e:	683a      	ldr	r2, [r7, #0]
 8008040:	429a      	cmp	r2, r3
 8008042:	d001      	beq.n	8008048 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8008044:	2301      	movs	r3, #1
 8008046:	e184      	b.n	8008352 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	f003 0304 	and.w	r3, r3, #4
 8008050:	2b00      	cmp	r3, #0
 8008052:	d010      	beq.n	8008076 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	691a      	ldr	r2, [r3, #16]
 8008058:	4b7b      	ldr	r3, [pc, #492]	; (8008248 <HAL_RCC_ClockConfig+0x244>)
 800805a:	699b      	ldr	r3, [r3, #24]
 800805c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008060:	429a      	cmp	r2, r3
 8008062:	d908      	bls.n	8008076 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8008064:	4b78      	ldr	r3, [pc, #480]	; (8008248 <HAL_RCC_ClockConfig+0x244>)
 8008066:	699b      	ldr	r3, [r3, #24]
 8008068:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	691b      	ldr	r3, [r3, #16]
 8008070:	4975      	ldr	r1, [pc, #468]	; (8008248 <HAL_RCC_ClockConfig+0x244>)
 8008072:	4313      	orrs	r3, r2
 8008074:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	f003 0308 	and.w	r3, r3, #8
 800807e:	2b00      	cmp	r3, #0
 8008080:	d010      	beq.n	80080a4 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	695a      	ldr	r2, [r3, #20]
 8008086:	4b70      	ldr	r3, [pc, #448]	; (8008248 <HAL_RCC_ClockConfig+0x244>)
 8008088:	69db      	ldr	r3, [r3, #28]
 800808a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800808e:	429a      	cmp	r2, r3
 8008090:	d908      	bls.n	80080a4 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8008092:	4b6d      	ldr	r3, [pc, #436]	; (8008248 <HAL_RCC_ClockConfig+0x244>)
 8008094:	69db      	ldr	r3, [r3, #28]
 8008096:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	695b      	ldr	r3, [r3, #20]
 800809e:	496a      	ldr	r1, [pc, #424]	; (8008248 <HAL_RCC_ClockConfig+0x244>)
 80080a0:	4313      	orrs	r3, r2
 80080a2:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	f003 0310 	and.w	r3, r3, #16
 80080ac:	2b00      	cmp	r3, #0
 80080ae:	d010      	beq.n	80080d2 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	699a      	ldr	r2, [r3, #24]
 80080b4:	4b64      	ldr	r3, [pc, #400]	; (8008248 <HAL_RCC_ClockConfig+0x244>)
 80080b6:	69db      	ldr	r3, [r3, #28]
 80080b8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80080bc:	429a      	cmp	r2, r3
 80080be:	d908      	bls.n	80080d2 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80080c0:	4b61      	ldr	r3, [pc, #388]	; (8008248 <HAL_RCC_ClockConfig+0x244>)
 80080c2:	69db      	ldr	r3, [r3, #28]
 80080c4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	699b      	ldr	r3, [r3, #24]
 80080cc:	495e      	ldr	r1, [pc, #376]	; (8008248 <HAL_RCC_ClockConfig+0x244>)
 80080ce:	4313      	orrs	r3, r2
 80080d0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	f003 0320 	and.w	r3, r3, #32
 80080da:	2b00      	cmp	r3, #0
 80080dc:	d010      	beq.n	8008100 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	69da      	ldr	r2, [r3, #28]
 80080e2:	4b59      	ldr	r3, [pc, #356]	; (8008248 <HAL_RCC_ClockConfig+0x244>)
 80080e4:	6a1b      	ldr	r3, [r3, #32]
 80080e6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80080ea:	429a      	cmp	r2, r3
 80080ec:	d908      	bls.n	8008100 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80080ee:	4b56      	ldr	r3, [pc, #344]	; (8008248 <HAL_RCC_ClockConfig+0x244>)
 80080f0:	6a1b      	ldr	r3, [r3, #32]
 80080f2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	69db      	ldr	r3, [r3, #28]
 80080fa:	4953      	ldr	r1, [pc, #332]	; (8008248 <HAL_RCC_ClockConfig+0x244>)
 80080fc:	4313      	orrs	r3, r2
 80080fe:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	f003 0302 	and.w	r3, r3, #2
 8008108:	2b00      	cmp	r3, #0
 800810a:	d010      	beq.n	800812e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	68da      	ldr	r2, [r3, #12]
 8008110:	4b4d      	ldr	r3, [pc, #308]	; (8008248 <HAL_RCC_ClockConfig+0x244>)
 8008112:	699b      	ldr	r3, [r3, #24]
 8008114:	f003 030f 	and.w	r3, r3, #15
 8008118:	429a      	cmp	r2, r3
 800811a:	d908      	bls.n	800812e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800811c:	4b4a      	ldr	r3, [pc, #296]	; (8008248 <HAL_RCC_ClockConfig+0x244>)
 800811e:	699b      	ldr	r3, [r3, #24]
 8008120:	f023 020f 	bic.w	r2, r3, #15
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	68db      	ldr	r3, [r3, #12]
 8008128:	4947      	ldr	r1, [pc, #284]	; (8008248 <HAL_RCC_ClockConfig+0x244>)
 800812a:	4313      	orrs	r3, r2
 800812c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	f003 0301 	and.w	r3, r3, #1
 8008136:	2b00      	cmp	r3, #0
 8008138:	d055      	beq.n	80081e6 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800813a:	4b43      	ldr	r3, [pc, #268]	; (8008248 <HAL_RCC_ClockConfig+0x244>)
 800813c:	699b      	ldr	r3, [r3, #24]
 800813e:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	689b      	ldr	r3, [r3, #8]
 8008146:	4940      	ldr	r1, [pc, #256]	; (8008248 <HAL_RCC_ClockConfig+0x244>)
 8008148:	4313      	orrs	r3, r2
 800814a:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	685b      	ldr	r3, [r3, #4]
 8008150:	2b02      	cmp	r3, #2
 8008152:	d107      	bne.n	8008164 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008154:	4b3c      	ldr	r3, [pc, #240]	; (8008248 <HAL_RCC_ClockConfig+0x244>)
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800815c:	2b00      	cmp	r3, #0
 800815e:	d121      	bne.n	80081a4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8008160:	2301      	movs	r3, #1
 8008162:	e0f6      	b.n	8008352 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	685b      	ldr	r3, [r3, #4]
 8008168:	2b03      	cmp	r3, #3
 800816a:	d107      	bne.n	800817c <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800816c:	4b36      	ldr	r3, [pc, #216]	; (8008248 <HAL_RCC_ClockConfig+0x244>)
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008174:	2b00      	cmp	r3, #0
 8008176:	d115      	bne.n	80081a4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8008178:	2301      	movs	r3, #1
 800817a:	e0ea      	b.n	8008352 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	685b      	ldr	r3, [r3, #4]
 8008180:	2b01      	cmp	r3, #1
 8008182:	d107      	bne.n	8008194 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008184:	4b30      	ldr	r3, [pc, #192]	; (8008248 <HAL_RCC_ClockConfig+0x244>)
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800818c:	2b00      	cmp	r3, #0
 800818e:	d109      	bne.n	80081a4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8008190:	2301      	movs	r3, #1
 8008192:	e0de      	b.n	8008352 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008194:	4b2c      	ldr	r3, [pc, #176]	; (8008248 <HAL_RCC_ClockConfig+0x244>)
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	f003 0304 	and.w	r3, r3, #4
 800819c:	2b00      	cmp	r3, #0
 800819e:	d101      	bne.n	80081a4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80081a0:	2301      	movs	r3, #1
 80081a2:	e0d6      	b.n	8008352 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80081a4:	4b28      	ldr	r3, [pc, #160]	; (8008248 <HAL_RCC_ClockConfig+0x244>)
 80081a6:	691b      	ldr	r3, [r3, #16]
 80081a8:	f023 0207 	bic.w	r2, r3, #7
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	685b      	ldr	r3, [r3, #4]
 80081b0:	4925      	ldr	r1, [pc, #148]	; (8008248 <HAL_RCC_ClockConfig+0x244>)
 80081b2:	4313      	orrs	r3, r2
 80081b4:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80081b6:	f7fe f9df 	bl	8006578 <HAL_GetTick>
 80081ba:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80081bc:	e00a      	b.n	80081d4 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80081be:	f7fe f9db 	bl	8006578 <HAL_GetTick>
 80081c2:	4602      	mov	r2, r0
 80081c4:	697b      	ldr	r3, [r7, #20]
 80081c6:	1ad3      	subs	r3, r2, r3
 80081c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80081cc:	4293      	cmp	r3, r2
 80081ce:	d901      	bls.n	80081d4 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80081d0:	2303      	movs	r3, #3
 80081d2:	e0be      	b.n	8008352 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80081d4:	4b1c      	ldr	r3, [pc, #112]	; (8008248 <HAL_RCC_ClockConfig+0x244>)
 80081d6:	691b      	ldr	r3, [r3, #16]
 80081d8:	f003 0238 	and.w	r2, r3, #56	; 0x38
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	685b      	ldr	r3, [r3, #4]
 80081e0:	00db      	lsls	r3, r3, #3
 80081e2:	429a      	cmp	r2, r3
 80081e4:	d1eb      	bne.n	80081be <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	f003 0302 	and.w	r3, r3, #2
 80081ee:	2b00      	cmp	r3, #0
 80081f0:	d010      	beq.n	8008214 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	68da      	ldr	r2, [r3, #12]
 80081f6:	4b14      	ldr	r3, [pc, #80]	; (8008248 <HAL_RCC_ClockConfig+0x244>)
 80081f8:	699b      	ldr	r3, [r3, #24]
 80081fa:	f003 030f 	and.w	r3, r3, #15
 80081fe:	429a      	cmp	r2, r3
 8008200:	d208      	bcs.n	8008214 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008202:	4b11      	ldr	r3, [pc, #68]	; (8008248 <HAL_RCC_ClockConfig+0x244>)
 8008204:	699b      	ldr	r3, [r3, #24]
 8008206:	f023 020f 	bic.w	r2, r3, #15
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	68db      	ldr	r3, [r3, #12]
 800820e:	490e      	ldr	r1, [pc, #56]	; (8008248 <HAL_RCC_ClockConfig+0x244>)
 8008210:	4313      	orrs	r3, r2
 8008212:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8008214:	4b0b      	ldr	r3, [pc, #44]	; (8008244 <HAL_RCC_ClockConfig+0x240>)
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	f003 030f 	and.w	r3, r3, #15
 800821c:	683a      	ldr	r2, [r7, #0]
 800821e:	429a      	cmp	r2, r3
 8008220:	d214      	bcs.n	800824c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008222:	4b08      	ldr	r3, [pc, #32]	; (8008244 <HAL_RCC_ClockConfig+0x240>)
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	f023 020f 	bic.w	r2, r3, #15
 800822a:	4906      	ldr	r1, [pc, #24]	; (8008244 <HAL_RCC_ClockConfig+0x240>)
 800822c:	683b      	ldr	r3, [r7, #0]
 800822e:	4313      	orrs	r3, r2
 8008230:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008232:	4b04      	ldr	r3, [pc, #16]	; (8008244 <HAL_RCC_ClockConfig+0x240>)
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	f003 030f 	and.w	r3, r3, #15
 800823a:	683a      	ldr	r2, [r7, #0]
 800823c:	429a      	cmp	r2, r3
 800823e:	d005      	beq.n	800824c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8008240:	2301      	movs	r3, #1
 8008242:	e086      	b.n	8008352 <HAL_RCC_ClockConfig+0x34e>
 8008244:	52002000 	.word	0x52002000
 8008248:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	f003 0304 	and.w	r3, r3, #4
 8008254:	2b00      	cmp	r3, #0
 8008256:	d010      	beq.n	800827a <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	691a      	ldr	r2, [r3, #16]
 800825c:	4b3f      	ldr	r3, [pc, #252]	; (800835c <HAL_RCC_ClockConfig+0x358>)
 800825e:	699b      	ldr	r3, [r3, #24]
 8008260:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008264:	429a      	cmp	r2, r3
 8008266:	d208      	bcs.n	800827a <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8008268:	4b3c      	ldr	r3, [pc, #240]	; (800835c <HAL_RCC_ClockConfig+0x358>)
 800826a:	699b      	ldr	r3, [r3, #24]
 800826c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	691b      	ldr	r3, [r3, #16]
 8008274:	4939      	ldr	r1, [pc, #228]	; (800835c <HAL_RCC_ClockConfig+0x358>)
 8008276:	4313      	orrs	r3, r2
 8008278:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	f003 0308 	and.w	r3, r3, #8
 8008282:	2b00      	cmp	r3, #0
 8008284:	d010      	beq.n	80082a8 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	695a      	ldr	r2, [r3, #20]
 800828a:	4b34      	ldr	r3, [pc, #208]	; (800835c <HAL_RCC_ClockConfig+0x358>)
 800828c:	69db      	ldr	r3, [r3, #28]
 800828e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008292:	429a      	cmp	r2, r3
 8008294:	d208      	bcs.n	80082a8 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8008296:	4b31      	ldr	r3, [pc, #196]	; (800835c <HAL_RCC_ClockConfig+0x358>)
 8008298:	69db      	ldr	r3, [r3, #28]
 800829a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	695b      	ldr	r3, [r3, #20]
 80082a2:	492e      	ldr	r1, [pc, #184]	; (800835c <HAL_RCC_ClockConfig+0x358>)
 80082a4:	4313      	orrs	r3, r2
 80082a6:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	f003 0310 	and.w	r3, r3, #16
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	d010      	beq.n	80082d6 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	699a      	ldr	r2, [r3, #24]
 80082b8:	4b28      	ldr	r3, [pc, #160]	; (800835c <HAL_RCC_ClockConfig+0x358>)
 80082ba:	69db      	ldr	r3, [r3, #28]
 80082bc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80082c0:	429a      	cmp	r2, r3
 80082c2:	d208      	bcs.n	80082d6 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80082c4:	4b25      	ldr	r3, [pc, #148]	; (800835c <HAL_RCC_ClockConfig+0x358>)
 80082c6:	69db      	ldr	r3, [r3, #28]
 80082c8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	699b      	ldr	r3, [r3, #24]
 80082d0:	4922      	ldr	r1, [pc, #136]	; (800835c <HAL_RCC_ClockConfig+0x358>)
 80082d2:	4313      	orrs	r3, r2
 80082d4:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	f003 0320 	and.w	r3, r3, #32
 80082de:	2b00      	cmp	r3, #0
 80082e0:	d010      	beq.n	8008304 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	69da      	ldr	r2, [r3, #28]
 80082e6:	4b1d      	ldr	r3, [pc, #116]	; (800835c <HAL_RCC_ClockConfig+0x358>)
 80082e8:	6a1b      	ldr	r3, [r3, #32]
 80082ea:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80082ee:	429a      	cmp	r2, r3
 80082f0:	d208      	bcs.n	8008304 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80082f2:	4b1a      	ldr	r3, [pc, #104]	; (800835c <HAL_RCC_ClockConfig+0x358>)
 80082f4:	6a1b      	ldr	r3, [r3, #32]
 80082f6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	69db      	ldr	r3, [r3, #28]
 80082fe:	4917      	ldr	r1, [pc, #92]	; (800835c <HAL_RCC_ClockConfig+0x358>)
 8008300:	4313      	orrs	r3, r2
 8008302:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8008304:	f000 f834 	bl	8008370 <HAL_RCC_GetSysClockFreq>
 8008308:	4602      	mov	r2, r0
 800830a:	4b14      	ldr	r3, [pc, #80]	; (800835c <HAL_RCC_ClockConfig+0x358>)
 800830c:	699b      	ldr	r3, [r3, #24]
 800830e:	0a1b      	lsrs	r3, r3, #8
 8008310:	f003 030f 	and.w	r3, r3, #15
 8008314:	4912      	ldr	r1, [pc, #72]	; (8008360 <HAL_RCC_ClockConfig+0x35c>)
 8008316:	5ccb      	ldrb	r3, [r1, r3]
 8008318:	f003 031f 	and.w	r3, r3, #31
 800831c:	fa22 f303 	lsr.w	r3, r2, r3
 8008320:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8008322:	4b0e      	ldr	r3, [pc, #56]	; (800835c <HAL_RCC_ClockConfig+0x358>)
 8008324:	699b      	ldr	r3, [r3, #24]
 8008326:	f003 030f 	and.w	r3, r3, #15
 800832a:	4a0d      	ldr	r2, [pc, #52]	; (8008360 <HAL_RCC_ClockConfig+0x35c>)
 800832c:	5cd3      	ldrb	r3, [r2, r3]
 800832e:	f003 031f 	and.w	r3, r3, #31
 8008332:	693a      	ldr	r2, [r7, #16]
 8008334:	fa22 f303 	lsr.w	r3, r2, r3
 8008338:	4a0a      	ldr	r2, [pc, #40]	; (8008364 <HAL_RCC_ClockConfig+0x360>)
 800833a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800833c:	4a0a      	ldr	r2, [pc, #40]	; (8008368 <HAL_RCC_ClockConfig+0x364>)
 800833e:	693b      	ldr	r3, [r7, #16]
 8008340:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8008342:	4b0a      	ldr	r3, [pc, #40]	; (800836c <HAL_RCC_ClockConfig+0x368>)
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	4618      	mov	r0, r3
 8008348:	f7fe f8cc 	bl	80064e4 <HAL_InitTick>
 800834c:	4603      	mov	r3, r0
 800834e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8008350:	7bfb      	ldrb	r3, [r7, #15]
}
 8008352:	4618      	mov	r0, r3
 8008354:	3718      	adds	r7, #24
 8008356:	46bd      	mov	sp, r7
 8008358:	bd80      	pop	{r7, pc}
 800835a:	bf00      	nop
 800835c:	58024400 	.word	0x58024400
 8008360:	08011a68 	.word	0x08011a68
 8008364:	24000078 	.word	0x24000078
 8008368:	24000074 	.word	0x24000074
 800836c:	2400007c 	.word	0x2400007c

08008370 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008370:	b480      	push	{r7}
 8008372:	b089      	sub	sp, #36	; 0x24
 8008374:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008376:	4bb3      	ldr	r3, [pc, #716]	; (8008644 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008378:	691b      	ldr	r3, [r3, #16]
 800837a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800837e:	2b18      	cmp	r3, #24
 8008380:	f200 8155 	bhi.w	800862e <HAL_RCC_GetSysClockFreq+0x2be>
 8008384:	a201      	add	r2, pc, #4	; (adr r2, 800838c <HAL_RCC_GetSysClockFreq+0x1c>)
 8008386:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800838a:	bf00      	nop
 800838c:	080083f1 	.word	0x080083f1
 8008390:	0800862f 	.word	0x0800862f
 8008394:	0800862f 	.word	0x0800862f
 8008398:	0800862f 	.word	0x0800862f
 800839c:	0800862f 	.word	0x0800862f
 80083a0:	0800862f 	.word	0x0800862f
 80083a4:	0800862f 	.word	0x0800862f
 80083a8:	0800862f 	.word	0x0800862f
 80083ac:	08008417 	.word	0x08008417
 80083b0:	0800862f 	.word	0x0800862f
 80083b4:	0800862f 	.word	0x0800862f
 80083b8:	0800862f 	.word	0x0800862f
 80083bc:	0800862f 	.word	0x0800862f
 80083c0:	0800862f 	.word	0x0800862f
 80083c4:	0800862f 	.word	0x0800862f
 80083c8:	0800862f 	.word	0x0800862f
 80083cc:	0800841d 	.word	0x0800841d
 80083d0:	0800862f 	.word	0x0800862f
 80083d4:	0800862f 	.word	0x0800862f
 80083d8:	0800862f 	.word	0x0800862f
 80083dc:	0800862f 	.word	0x0800862f
 80083e0:	0800862f 	.word	0x0800862f
 80083e4:	0800862f 	.word	0x0800862f
 80083e8:	0800862f 	.word	0x0800862f
 80083ec:	08008423 	.word	0x08008423
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80083f0:	4b94      	ldr	r3, [pc, #592]	; (8008644 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	f003 0320 	and.w	r3, r3, #32
 80083f8:	2b00      	cmp	r3, #0
 80083fa:	d009      	beq.n	8008410 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80083fc:	4b91      	ldr	r3, [pc, #580]	; (8008644 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	08db      	lsrs	r3, r3, #3
 8008402:	f003 0303 	and.w	r3, r3, #3
 8008406:	4a90      	ldr	r2, [pc, #576]	; (8008648 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8008408:	fa22 f303 	lsr.w	r3, r2, r3
 800840c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 800840e:	e111      	b.n	8008634 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8008410:	4b8d      	ldr	r3, [pc, #564]	; (8008648 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8008412:	61bb      	str	r3, [r7, #24]
    break;
 8008414:	e10e      	b.n	8008634 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8008416:	4b8d      	ldr	r3, [pc, #564]	; (800864c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8008418:	61bb      	str	r3, [r7, #24]
    break;
 800841a:	e10b      	b.n	8008634 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 800841c:	4b8c      	ldr	r3, [pc, #560]	; (8008650 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800841e:	61bb      	str	r3, [r7, #24]
    break;
 8008420:	e108      	b.n	8008634 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008422:	4b88      	ldr	r3, [pc, #544]	; (8008644 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008424:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008426:	f003 0303 	and.w	r3, r3, #3
 800842a:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 800842c:	4b85      	ldr	r3, [pc, #532]	; (8008644 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800842e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008430:	091b      	lsrs	r3, r3, #4
 8008432:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008436:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8008438:	4b82      	ldr	r3, [pc, #520]	; (8008644 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800843a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800843c:	f003 0301 	and.w	r3, r3, #1
 8008440:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8008442:	4b80      	ldr	r3, [pc, #512]	; (8008644 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008444:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008446:	08db      	lsrs	r3, r3, #3
 8008448:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800844c:	68fa      	ldr	r2, [r7, #12]
 800844e:	fb02 f303 	mul.w	r3, r2, r3
 8008452:	ee07 3a90 	vmov	s15, r3
 8008456:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800845a:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 800845e:	693b      	ldr	r3, [r7, #16]
 8008460:	2b00      	cmp	r3, #0
 8008462:	f000 80e1 	beq.w	8008628 <HAL_RCC_GetSysClockFreq+0x2b8>
 8008466:	697b      	ldr	r3, [r7, #20]
 8008468:	2b02      	cmp	r3, #2
 800846a:	f000 8083 	beq.w	8008574 <HAL_RCC_GetSysClockFreq+0x204>
 800846e:	697b      	ldr	r3, [r7, #20]
 8008470:	2b02      	cmp	r3, #2
 8008472:	f200 80a1 	bhi.w	80085b8 <HAL_RCC_GetSysClockFreq+0x248>
 8008476:	697b      	ldr	r3, [r7, #20]
 8008478:	2b00      	cmp	r3, #0
 800847a:	d003      	beq.n	8008484 <HAL_RCC_GetSysClockFreq+0x114>
 800847c:	697b      	ldr	r3, [r7, #20]
 800847e:	2b01      	cmp	r3, #1
 8008480:	d056      	beq.n	8008530 <HAL_RCC_GetSysClockFreq+0x1c0>
 8008482:	e099      	b.n	80085b8 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008484:	4b6f      	ldr	r3, [pc, #444]	; (8008644 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	f003 0320 	and.w	r3, r3, #32
 800848c:	2b00      	cmp	r3, #0
 800848e:	d02d      	beq.n	80084ec <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008490:	4b6c      	ldr	r3, [pc, #432]	; (8008644 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	08db      	lsrs	r3, r3, #3
 8008496:	f003 0303 	and.w	r3, r3, #3
 800849a:	4a6b      	ldr	r2, [pc, #428]	; (8008648 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800849c:	fa22 f303 	lsr.w	r3, r2, r3
 80084a0:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	ee07 3a90 	vmov	s15, r3
 80084a8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80084ac:	693b      	ldr	r3, [r7, #16]
 80084ae:	ee07 3a90 	vmov	s15, r3
 80084b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80084b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80084ba:	4b62      	ldr	r3, [pc, #392]	; (8008644 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80084bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80084be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80084c2:	ee07 3a90 	vmov	s15, r3
 80084c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80084ca:	ed97 6a02 	vldr	s12, [r7, #8]
 80084ce:	eddf 5a61 	vldr	s11, [pc, #388]	; 8008654 <HAL_RCC_GetSysClockFreq+0x2e4>
 80084d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80084d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80084da:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80084de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80084e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80084e6:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 80084ea:	e087      	b.n	80085fc <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80084ec:	693b      	ldr	r3, [r7, #16]
 80084ee:	ee07 3a90 	vmov	s15, r3
 80084f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80084f6:	eddf 6a58 	vldr	s13, [pc, #352]	; 8008658 <HAL_RCC_GetSysClockFreq+0x2e8>
 80084fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80084fe:	4b51      	ldr	r3, [pc, #324]	; (8008644 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008500:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008502:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008506:	ee07 3a90 	vmov	s15, r3
 800850a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800850e:	ed97 6a02 	vldr	s12, [r7, #8]
 8008512:	eddf 5a50 	vldr	s11, [pc, #320]	; 8008654 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008516:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800851a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800851e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008522:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008526:	ee67 7a27 	vmul.f32	s15, s14, s15
 800852a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800852e:	e065      	b.n	80085fc <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008530:	693b      	ldr	r3, [r7, #16]
 8008532:	ee07 3a90 	vmov	s15, r3
 8008536:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800853a:	eddf 6a48 	vldr	s13, [pc, #288]	; 800865c <HAL_RCC_GetSysClockFreq+0x2ec>
 800853e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008542:	4b40      	ldr	r3, [pc, #256]	; (8008644 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008544:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008546:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800854a:	ee07 3a90 	vmov	s15, r3
 800854e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008552:	ed97 6a02 	vldr	s12, [r7, #8]
 8008556:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8008654 <HAL_RCC_GetSysClockFreq+0x2e4>
 800855a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800855e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008562:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008566:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800856a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800856e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008572:	e043      	b.n	80085fc <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008574:	693b      	ldr	r3, [r7, #16]
 8008576:	ee07 3a90 	vmov	s15, r3
 800857a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800857e:	eddf 6a38 	vldr	s13, [pc, #224]	; 8008660 <HAL_RCC_GetSysClockFreq+0x2f0>
 8008582:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008586:	4b2f      	ldr	r3, [pc, #188]	; (8008644 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008588:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800858a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800858e:	ee07 3a90 	vmov	s15, r3
 8008592:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008596:	ed97 6a02 	vldr	s12, [r7, #8]
 800859a:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8008654 <HAL_RCC_GetSysClockFreq+0x2e4>
 800859e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80085a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80085a6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80085aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80085ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80085b2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80085b6:	e021      	b.n	80085fc <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80085b8:	693b      	ldr	r3, [r7, #16]
 80085ba:	ee07 3a90 	vmov	s15, r3
 80085be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80085c2:	eddf 6a26 	vldr	s13, [pc, #152]	; 800865c <HAL_RCC_GetSysClockFreq+0x2ec>
 80085c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80085ca:	4b1e      	ldr	r3, [pc, #120]	; (8008644 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80085cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80085ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80085d2:	ee07 3a90 	vmov	s15, r3
 80085d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80085da:	ed97 6a02 	vldr	s12, [r7, #8]
 80085de:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8008654 <HAL_RCC_GetSysClockFreq+0x2e4>
 80085e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80085e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80085ea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80085ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80085f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80085f6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80085fa:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 80085fc:	4b11      	ldr	r3, [pc, #68]	; (8008644 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80085fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008600:	0a5b      	lsrs	r3, r3, #9
 8008602:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008606:	3301      	adds	r3, #1
 8008608:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 800860a:	683b      	ldr	r3, [r7, #0]
 800860c:	ee07 3a90 	vmov	s15, r3
 8008610:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8008614:	edd7 6a07 	vldr	s13, [r7, #28]
 8008618:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800861c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008620:	ee17 3a90 	vmov	r3, s15
 8008624:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8008626:	e005      	b.n	8008634 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8008628:	2300      	movs	r3, #0
 800862a:	61bb      	str	r3, [r7, #24]
    break;
 800862c:	e002      	b.n	8008634 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 800862e:	4b07      	ldr	r3, [pc, #28]	; (800864c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8008630:	61bb      	str	r3, [r7, #24]
    break;
 8008632:	bf00      	nop
  }

  return sysclockfreq;
 8008634:	69bb      	ldr	r3, [r7, #24]
}
 8008636:	4618      	mov	r0, r3
 8008638:	3724      	adds	r7, #36	; 0x24
 800863a:	46bd      	mov	sp, r7
 800863c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008640:	4770      	bx	lr
 8008642:	bf00      	nop
 8008644:	58024400 	.word	0x58024400
 8008648:	03d09000 	.word	0x03d09000
 800864c:	003d0900 	.word	0x003d0900
 8008650:	017d7840 	.word	0x017d7840
 8008654:	46000000 	.word	0x46000000
 8008658:	4c742400 	.word	0x4c742400
 800865c:	4a742400 	.word	0x4a742400
 8008660:	4bbebc20 	.word	0x4bbebc20

08008664 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008664:	b580      	push	{r7, lr}
 8008666:	b082      	sub	sp, #8
 8008668:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800866a:	f7ff fe81 	bl	8008370 <HAL_RCC_GetSysClockFreq>
 800866e:	4602      	mov	r2, r0
 8008670:	4b10      	ldr	r3, [pc, #64]	; (80086b4 <HAL_RCC_GetHCLKFreq+0x50>)
 8008672:	699b      	ldr	r3, [r3, #24]
 8008674:	0a1b      	lsrs	r3, r3, #8
 8008676:	f003 030f 	and.w	r3, r3, #15
 800867a:	490f      	ldr	r1, [pc, #60]	; (80086b8 <HAL_RCC_GetHCLKFreq+0x54>)
 800867c:	5ccb      	ldrb	r3, [r1, r3]
 800867e:	f003 031f 	and.w	r3, r3, #31
 8008682:	fa22 f303 	lsr.w	r3, r2, r3
 8008686:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8008688:	4b0a      	ldr	r3, [pc, #40]	; (80086b4 <HAL_RCC_GetHCLKFreq+0x50>)
 800868a:	699b      	ldr	r3, [r3, #24]
 800868c:	f003 030f 	and.w	r3, r3, #15
 8008690:	4a09      	ldr	r2, [pc, #36]	; (80086b8 <HAL_RCC_GetHCLKFreq+0x54>)
 8008692:	5cd3      	ldrb	r3, [r2, r3]
 8008694:	f003 031f 	and.w	r3, r3, #31
 8008698:	687a      	ldr	r2, [r7, #4]
 800869a:	fa22 f303 	lsr.w	r3, r2, r3
 800869e:	4a07      	ldr	r2, [pc, #28]	; (80086bc <HAL_RCC_GetHCLKFreq+0x58>)
 80086a0:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80086a2:	4a07      	ldr	r2, [pc, #28]	; (80086c0 <HAL_RCC_GetHCLKFreq+0x5c>)
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80086a8:	4b04      	ldr	r3, [pc, #16]	; (80086bc <HAL_RCC_GetHCLKFreq+0x58>)
 80086aa:	681b      	ldr	r3, [r3, #0]
}
 80086ac:	4618      	mov	r0, r3
 80086ae:	3708      	adds	r7, #8
 80086b0:	46bd      	mov	sp, r7
 80086b2:	bd80      	pop	{r7, pc}
 80086b4:	58024400 	.word	0x58024400
 80086b8:	08011a68 	.word	0x08011a68
 80086bc:	24000078 	.word	0x24000078
 80086c0:	24000074 	.word	0x24000074

080086c4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80086c4:	b580      	push	{r7, lr}
 80086c6:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80086c8:	f7ff ffcc 	bl	8008664 <HAL_RCC_GetHCLKFreq>
 80086cc:	4602      	mov	r2, r0
 80086ce:	4b06      	ldr	r3, [pc, #24]	; (80086e8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80086d0:	69db      	ldr	r3, [r3, #28]
 80086d2:	091b      	lsrs	r3, r3, #4
 80086d4:	f003 0307 	and.w	r3, r3, #7
 80086d8:	4904      	ldr	r1, [pc, #16]	; (80086ec <HAL_RCC_GetPCLK1Freq+0x28>)
 80086da:	5ccb      	ldrb	r3, [r1, r3]
 80086dc:	f003 031f 	and.w	r3, r3, #31
 80086e0:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80086e4:	4618      	mov	r0, r3
 80086e6:	bd80      	pop	{r7, pc}
 80086e8:	58024400 	.word	0x58024400
 80086ec:	08011a68 	.word	0x08011a68

080086f0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80086f0:	b580      	push	{r7, lr}
 80086f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80086f4:	f7ff ffb6 	bl	8008664 <HAL_RCC_GetHCLKFreq>
 80086f8:	4602      	mov	r2, r0
 80086fa:	4b06      	ldr	r3, [pc, #24]	; (8008714 <HAL_RCC_GetPCLK2Freq+0x24>)
 80086fc:	69db      	ldr	r3, [r3, #28]
 80086fe:	0a1b      	lsrs	r3, r3, #8
 8008700:	f003 0307 	and.w	r3, r3, #7
 8008704:	4904      	ldr	r1, [pc, #16]	; (8008718 <HAL_RCC_GetPCLK2Freq+0x28>)
 8008706:	5ccb      	ldrb	r3, [r1, r3]
 8008708:	f003 031f 	and.w	r3, r3, #31
 800870c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8008710:	4618      	mov	r0, r3
 8008712:	bd80      	pop	{r7, pc}
 8008714:	58024400 	.word	0x58024400
 8008718:	08011a68 	.word	0x08011a68

0800871c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800871c:	b580      	push	{r7, lr}
 800871e:	b086      	sub	sp, #24
 8008720:	af00      	add	r7, sp, #0
 8008722:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8008724:	2300      	movs	r3, #0
 8008726:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8008728:	2300      	movs	r3, #0
 800872a:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	681b      	ldr	r3, [r3, #0]
 8008730:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008734:	2b00      	cmp	r3, #0
 8008736:	d03f      	beq.n	80087b8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800873c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008740:	d02a      	beq.n	8008798 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8008742:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008746:	d824      	bhi.n	8008792 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8008748:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800874c:	d018      	beq.n	8008780 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800874e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008752:	d81e      	bhi.n	8008792 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8008754:	2b00      	cmp	r3, #0
 8008756:	d003      	beq.n	8008760 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8008758:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800875c:	d007      	beq.n	800876e <HAL_RCCEx_PeriphCLKConfig+0x52>
 800875e:	e018      	b.n	8008792 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008760:	4ba3      	ldr	r3, [pc, #652]	; (80089f0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8008762:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008764:	4aa2      	ldr	r2, [pc, #648]	; (80089f0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8008766:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800876a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800876c:	e015      	b.n	800879a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	3304      	adds	r3, #4
 8008772:	2102      	movs	r1, #2
 8008774:	4618      	mov	r0, r3
 8008776:	f001 f9d5 	bl	8009b24 <RCCEx_PLL2_Config>
 800877a:	4603      	mov	r3, r0
 800877c:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800877e:	e00c      	b.n	800879a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	3324      	adds	r3, #36	; 0x24
 8008784:	2102      	movs	r1, #2
 8008786:	4618      	mov	r0, r3
 8008788:	f001 fa7e 	bl	8009c88 <RCCEx_PLL3_Config>
 800878c:	4603      	mov	r3, r0
 800878e:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8008790:	e003      	b.n	800879a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008792:	2301      	movs	r3, #1
 8008794:	75fb      	strb	r3, [r7, #23]
      break;
 8008796:	e000      	b.n	800879a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8008798:	bf00      	nop
    }

    if(ret == HAL_OK)
 800879a:	7dfb      	ldrb	r3, [r7, #23]
 800879c:	2b00      	cmp	r3, #0
 800879e:	d109      	bne.n	80087b4 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80087a0:	4b93      	ldr	r3, [pc, #588]	; (80089f0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80087a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80087a4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80087ac:	4990      	ldr	r1, [pc, #576]	; (80089f0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80087ae:	4313      	orrs	r3, r2
 80087b0:	650b      	str	r3, [r1, #80]	; 0x50
 80087b2:	e001      	b.n	80087b8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80087b4:	7dfb      	ldrb	r3, [r7, #23]
 80087b6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80087c0:	2b00      	cmp	r3, #0
 80087c2:	d03d      	beq.n	8008840 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80087c8:	2b04      	cmp	r3, #4
 80087ca:	d826      	bhi.n	800881a <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80087cc:	a201      	add	r2, pc, #4	; (adr r2, 80087d4 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 80087ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80087d2:	bf00      	nop
 80087d4:	080087e9 	.word	0x080087e9
 80087d8:	080087f7 	.word	0x080087f7
 80087dc:	08008809 	.word	0x08008809
 80087e0:	08008821 	.word	0x08008821
 80087e4:	08008821 	.word	0x08008821
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80087e8:	4b81      	ldr	r3, [pc, #516]	; (80089f0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80087ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087ec:	4a80      	ldr	r2, [pc, #512]	; (80089f0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80087ee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80087f2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80087f4:	e015      	b.n	8008822 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	3304      	adds	r3, #4
 80087fa:	2100      	movs	r1, #0
 80087fc:	4618      	mov	r0, r3
 80087fe:	f001 f991 	bl	8009b24 <RCCEx_PLL2_Config>
 8008802:	4603      	mov	r3, r0
 8008804:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8008806:	e00c      	b.n	8008822 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	3324      	adds	r3, #36	; 0x24
 800880c:	2100      	movs	r1, #0
 800880e:	4618      	mov	r0, r3
 8008810:	f001 fa3a 	bl	8009c88 <RCCEx_PLL3_Config>
 8008814:	4603      	mov	r3, r0
 8008816:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8008818:	e003      	b.n	8008822 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800881a:	2301      	movs	r3, #1
 800881c:	75fb      	strb	r3, [r7, #23]
      break;
 800881e:	e000      	b.n	8008822 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8008820:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008822:	7dfb      	ldrb	r3, [r7, #23]
 8008824:	2b00      	cmp	r3, #0
 8008826:	d109      	bne.n	800883c <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8008828:	4b71      	ldr	r3, [pc, #452]	; (80089f0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800882a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800882c:	f023 0207 	bic.w	r2, r3, #7
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008834:	496e      	ldr	r1, [pc, #440]	; (80089f0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8008836:	4313      	orrs	r3, r2
 8008838:	650b      	str	r3, [r1, #80]	; 0x50
 800883a:	e001      	b.n	8008840 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800883c:	7dfb      	ldrb	r3, [r7, #23]
 800883e:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008848:	2b00      	cmp	r3, #0
 800884a:	d042      	beq.n	80088d2 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008850:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008854:	d02b      	beq.n	80088ae <HAL_RCCEx_PeriphCLKConfig+0x192>
 8008856:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800885a:	d825      	bhi.n	80088a8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 800885c:	2bc0      	cmp	r3, #192	; 0xc0
 800885e:	d028      	beq.n	80088b2 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8008860:	2bc0      	cmp	r3, #192	; 0xc0
 8008862:	d821      	bhi.n	80088a8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8008864:	2b80      	cmp	r3, #128	; 0x80
 8008866:	d016      	beq.n	8008896 <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8008868:	2b80      	cmp	r3, #128	; 0x80
 800886a:	d81d      	bhi.n	80088a8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 800886c:	2b00      	cmp	r3, #0
 800886e:	d002      	beq.n	8008876 <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8008870:	2b40      	cmp	r3, #64	; 0x40
 8008872:	d007      	beq.n	8008884 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8008874:	e018      	b.n	80088a8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008876:	4b5e      	ldr	r3, [pc, #376]	; (80089f0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8008878:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800887a:	4a5d      	ldr	r2, [pc, #372]	; (80089f0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800887c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008880:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8008882:	e017      	b.n	80088b4 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	3304      	adds	r3, #4
 8008888:	2100      	movs	r1, #0
 800888a:	4618      	mov	r0, r3
 800888c:	f001 f94a 	bl	8009b24 <RCCEx_PLL2_Config>
 8008890:	4603      	mov	r3, r0
 8008892:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8008894:	e00e      	b.n	80088b4 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	3324      	adds	r3, #36	; 0x24
 800889a:	2100      	movs	r1, #0
 800889c:	4618      	mov	r0, r3
 800889e:	f001 f9f3 	bl	8009c88 <RCCEx_PLL3_Config>
 80088a2:	4603      	mov	r3, r0
 80088a4:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80088a6:	e005      	b.n	80088b4 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80088a8:	2301      	movs	r3, #1
 80088aa:	75fb      	strb	r3, [r7, #23]
      break;
 80088ac:	e002      	b.n	80088b4 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 80088ae:	bf00      	nop
 80088b0:	e000      	b.n	80088b4 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 80088b2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80088b4:	7dfb      	ldrb	r3, [r7, #23]
 80088b6:	2b00      	cmp	r3, #0
 80088b8:	d109      	bne.n	80088ce <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80088ba:	4b4d      	ldr	r3, [pc, #308]	; (80089f0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80088bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80088be:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80088c6:	494a      	ldr	r1, [pc, #296]	; (80089f0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80088c8:	4313      	orrs	r3, r2
 80088ca:	650b      	str	r3, [r1, #80]	; 0x50
 80088cc:	e001      	b.n	80088d2 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80088ce:	7dfb      	ldrb	r3, [r7, #23]
 80088d0:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	681b      	ldr	r3, [r3, #0]
 80088d6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80088da:	2b00      	cmp	r3, #0
 80088dc:	d049      	beq.n	8008972 <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80088e4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80088e8:	d030      	beq.n	800894c <HAL_RCCEx_PeriphCLKConfig+0x230>
 80088ea:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80088ee:	d82a      	bhi.n	8008946 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80088f0:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80088f4:	d02c      	beq.n	8008950 <HAL_RCCEx_PeriphCLKConfig+0x234>
 80088f6:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80088fa:	d824      	bhi.n	8008946 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80088fc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008900:	d018      	beq.n	8008934 <HAL_RCCEx_PeriphCLKConfig+0x218>
 8008902:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008906:	d81e      	bhi.n	8008946 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8008908:	2b00      	cmp	r3, #0
 800890a:	d003      	beq.n	8008914 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 800890c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008910:	d007      	beq.n	8008922 <HAL_RCCEx_PeriphCLKConfig+0x206>
 8008912:	e018      	b.n	8008946 <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008914:	4b36      	ldr	r3, [pc, #216]	; (80089f0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8008916:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008918:	4a35      	ldr	r2, [pc, #212]	; (80089f0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800891a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800891e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8008920:	e017      	b.n	8008952 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	3304      	adds	r3, #4
 8008926:	2100      	movs	r1, #0
 8008928:	4618      	mov	r0, r3
 800892a:	f001 f8fb 	bl	8009b24 <RCCEx_PLL2_Config>
 800892e:	4603      	mov	r3, r0
 8008930:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8008932:	e00e      	b.n	8008952 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	3324      	adds	r3, #36	; 0x24
 8008938:	2100      	movs	r1, #0
 800893a:	4618      	mov	r0, r3
 800893c:	f001 f9a4 	bl	8009c88 <RCCEx_PLL3_Config>
 8008940:	4603      	mov	r3, r0
 8008942:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8008944:	e005      	b.n	8008952 <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8008946:	2301      	movs	r3, #1
 8008948:	75fb      	strb	r3, [r7, #23]
      break;
 800894a:	e002      	b.n	8008952 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 800894c:	bf00      	nop
 800894e:	e000      	b.n	8008952 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8008950:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008952:	7dfb      	ldrb	r3, [r7, #23]
 8008954:	2b00      	cmp	r3, #0
 8008956:	d10a      	bne.n	800896e <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8008958:	4b25      	ldr	r3, [pc, #148]	; (80089f0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800895a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800895c:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8008966:	4922      	ldr	r1, [pc, #136]	; (80089f0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8008968:	4313      	orrs	r3, r2
 800896a:	658b      	str	r3, [r1, #88]	; 0x58
 800896c:	e001      	b.n	8008972 <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800896e:	7dfb      	ldrb	r3, [r7, #23]
 8008970:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	681b      	ldr	r3, [r3, #0]
 8008976:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800897a:	2b00      	cmp	r3, #0
 800897c:	d04b      	beq.n	8008a16 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8008984:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008988:	d030      	beq.n	80089ec <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 800898a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800898e:	d82a      	bhi.n	80089e6 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8008990:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8008994:	d02e      	beq.n	80089f4 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 8008996:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800899a:	d824      	bhi.n	80089e6 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800899c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80089a0:	d018      	beq.n	80089d4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 80089a2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80089a6:	d81e      	bhi.n	80089e6 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80089a8:	2b00      	cmp	r3, #0
 80089aa:	d003      	beq.n	80089b4 <HAL_RCCEx_PeriphCLKConfig+0x298>
 80089ac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80089b0:	d007      	beq.n	80089c2 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 80089b2:	e018      	b.n	80089e6 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80089b4:	4b0e      	ldr	r3, [pc, #56]	; (80089f0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80089b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089b8:	4a0d      	ldr	r2, [pc, #52]	; (80089f0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80089ba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80089be:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80089c0:	e019      	b.n	80089f6 <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	3304      	adds	r3, #4
 80089c6:	2100      	movs	r1, #0
 80089c8:	4618      	mov	r0, r3
 80089ca:	f001 f8ab 	bl	8009b24 <RCCEx_PLL2_Config>
 80089ce:	4603      	mov	r3, r0
 80089d0:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80089d2:	e010      	b.n	80089f6 <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	3324      	adds	r3, #36	; 0x24
 80089d8:	2100      	movs	r1, #0
 80089da:	4618      	mov	r0, r3
 80089dc:	f001 f954 	bl	8009c88 <RCCEx_PLL3_Config>
 80089e0:	4603      	mov	r3, r0
 80089e2:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80089e4:	e007      	b.n	80089f6 <HAL_RCCEx_PeriphCLKConfig+0x2da>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80089e6:	2301      	movs	r3, #1
 80089e8:	75fb      	strb	r3, [r7, #23]
      break;
 80089ea:	e004      	b.n	80089f6 <HAL_RCCEx_PeriphCLKConfig+0x2da>
      break;
 80089ec:	bf00      	nop
 80089ee:	e002      	b.n	80089f6 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 80089f0:	58024400 	.word	0x58024400
      break;
 80089f4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80089f6:	7dfb      	ldrb	r3, [r7, #23]
 80089f8:	2b00      	cmp	r3, #0
 80089fa:	d10a      	bne.n	8008a12 <HAL_RCCEx_PeriphCLKConfig+0x2f6>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80089fc:	4b99      	ldr	r3, [pc, #612]	; (8008c64 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80089fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008a00:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8008a0a:	4996      	ldr	r1, [pc, #600]	; (8008c64 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8008a0c:	4313      	orrs	r3, r2
 8008a0e:	658b      	str	r3, [r1, #88]	; 0x58
 8008a10:	e001      	b.n	8008a16 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008a12:	7dfb      	ldrb	r3, [r7, #23]
 8008a14:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	681b      	ldr	r3, [r3, #0]
 8008a1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008a1e:	2b00      	cmp	r3, #0
 8008a20:	d032      	beq.n	8008a88 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008a26:	2b30      	cmp	r3, #48	; 0x30
 8008a28:	d01c      	beq.n	8008a64 <HAL_RCCEx_PeriphCLKConfig+0x348>
 8008a2a:	2b30      	cmp	r3, #48	; 0x30
 8008a2c:	d817      	bhi.n	8008a5e <HAL_RCCEx_PeriphCLKConfig+0x342>
 8008a2e:	2b20      	cmp	r3, #32
 8008a30:	d00c      	beq.n	8008a4c <HAL_RCCEx_PeriphCLKConfig+0x330>
 8008a32:	2b20      	cmp	r3, #32
 8008a34:	d813      	bhi.n	8008a5e <HAL_RCCEx_PeriphCLKConfig+0x342>
 8008a36:	2b00      	cmp	r3, #0
 8008a38:	d016      	beq.n	8008a68 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 8008a3a:	2b10      	cmp	r3, #16
 8008a3c:	d10f      	bne.n	8008a5e <HAL_RCCEx_PeriphCLKConfig+0x342>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008a3e:	4b89      	ldr	r3, [pc, #548]	; (8008c64 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8008a40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a42:	4a88      	ldr	r2, [pc, #544]	; (8008c64 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8008a44:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008a48:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8008a4a:	e00e      	b.n	8008a6a <HAL_RCCEx_PeriphCLKConfig+0x34e>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	3304      	adds	r3, #4
 8008a50:	2102      	movs	r1, #2
 8008a52:	4618      	mov	r0, r3
 8008a54:	f001 f866 	bl	8009b24 <RCCEx_PLL2_Config>
 8008a58:	4603      	mov	r3, r0
 8008a5a:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8008a5c:	e005      	b.n	8008a6a <HAL_RCCEx_PeriphCLKConfig+0x34e>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8008a5e:	2301      	movs	r3, #1
 8008a60:	75fb      	strb	r3, [r7, #23]
      break;
 8008a62:	e002      	b.n	8008a6a <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8008a64:	bf00      	nop
 8008a66:	e000      	b.n	8008a6a <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8008a68:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008a6a:	7dfb      	ldrb	r3, [r7, #23]
 8008a6c:	2b00      	cmp	r3, #0
 8008a6e:	d109      	bne.n	8008a84 <HAL_RCCEx_PeriphCLKConfig+0x368>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8008a70:	4b7c      	ldr	r3, [pc, #496]	; (8008c64 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8008a72:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008a74:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008a7c:	4979      	ldr	r1, [pc, #484]	; (8008c64 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8008a7e:	4313      	orrs	r3, r2
 8008a80:	64cb      	str	r3, [r1, #76]	; 0x4c
 8008a82:	e001      	b.n	8008a88 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008a84:	7dfb      	ldrb	r3, [r7, #23]
 8008a86:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	681b      	ldr	r3, [r3, #0]
 8008a8c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008a90:	2b00      	cmp	r3, #0
 8008a92:	d047      	beq.n	8008b24 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008a98:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008a9c:	d030      	beq.n	8008b00 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8008a9e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008aa2:	d82a      	bhi.n	8008afa <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8008aa4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008aa8:	d02c      	beq.n	8008b04 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8008aaa:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008aae:	d824      	bhi.n	8008afa <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8008ab0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008ab4:	d018      	beq.n	8008ae8 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 8008ab6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008aba:	d81e      	bhi.n	8008afa <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8008abc:	2b00      	cmp	r3, #0
 8008abe:	d003      	beq.n	8008ac8 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 8008ac0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008ac4:	d007      	beq.n	8008ad6 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 8008ac6:	e018      	b.n	8008afa <HAL_RCCEx_PeriphCLKConfig+0x3de>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008ac8:	4b66      	ldr	r3, [pc, #408]	; (8008c64 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8008aca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008acc:	4a65      	ldr	r2, [pc, #404]	; (8008c64 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8008ace:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008ad2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8008ad4:	e017      	b.n	8008b06 <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	3304      	adds	r3, #4
 8008ada:	2100      	movs	r1, #0
 8008adc:	4618      	mov	r0, r3
 8008ade:	f001 f821 	bl	8009b24 <RCCEx_PLL2_Config>
 8008ae2:	4603      	mov	r3, r0
 8008ae4:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8008ae6:	e00e      	b.n	8008b06 <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	3324      	adds	r3, #36	; 0x24
 8008aec:	2100      	movs	r1, #0
 8008aee:	4618      	mov	r0, r3
 8008af0:	f001 f8ca 	bl	8009c88 <RCCEx_PLL3_Config>
 8008af4:	4603      	mov	r3, r0
 8008af6:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8008af8:	e005      	b.n	8008b06 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008afa:	2301      	movs	r3, #1
 8008afc:	75fb      	strb	r3, [r7, #23]
      break;
 8008afe:	e002      	b.n	8008b06 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8008b00:	bf00      	nop
 8008b02:	e000      	b.n	8008b06 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8008b04:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008b06:	7dfb      	ldrb	r3, [r7, #23]
 8008b08:	2b00      	cmp	r3, #0
 8008b0a:	d109      	bne.n	8008b20 <HAL_RCCEx_PeriphCLKConfig+0x404>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8008b0c:	4b55      	ldr	r3, [pc, #340]	; (8008c64 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8008b0e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008b10:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008b18:	4952      	ldr	r1, [pc, #328]	; (8008c64 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8008b1a:	4313      	orrs	r3, r2
 8008b1c:	650b      	str	r3, [r1, #80]	; 0x50
 8008b1e:	e001      	b.n	8008b24 <HAL_RCCEx_PeriphCLKConfig+0x408>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008b20:	7dfb      	ldrb	r3, [r7, #23]
 8008b22:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	681b      	ldr	r3, [r3, #0]
 8008b28:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008b2c:	2b00      	cmp	r3, #0
 8008b2e:	d049      	beq.n	8008bc4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008b34:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008b38:	d02e      	beq.n	8008b98 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8008b3a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008b3e:	d828      	bhi.n	8008b92 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8008b40:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008b44:	d02a      	beq.n	8008b9c <HAL_RCCEx_PeriphCLKConfig+0x480>
 8008b46:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008b4a:	d822      	bhi.n	8008b92 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8008b4c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8008b50:	d026      	beq.n	8008ba0 <HAL_RCCEx_PeriphCLKConfig+0x484>
 8008b52:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8008b56:	d81c      	bhi.n	8008b92 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8008b58:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008b5c:	d010      	beq.n	8008b80 <HAL_RCCEx_PeriphCLKConfig+0x464>
 8008b5e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008b62:	d816      	bhi.n	8008b92 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8008b64:	2b00      	cmp	r3, #0
 8008b66:	d01d      	beq.n	8008ba4 <HAL_RCCEx_PeriphCLKConfig+0x488>
 8008b68:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008b6c:	d111      	bne.n	8008b92 <HAL_RCCEx_PeriphCLKConfig+0x476>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	3304      	adds	r3, #4
 8008b72:	2101      	movs	r1, #1
 8008b74:	4618      	mov	r0, r3
 8008b76:	f000 ffd5 	bl	8009b24 <RCCEx_PLL2_Config>
 8008b7a:	4603      	mov	r3, r0
 8008b7c:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8008b7e:	e012      	b.n	8008ba6 <HAL_RCCEx_PeriphCLKConfig+0x48a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	3324      	adds	r3, #36	; 0x24
 8008b84:	2101      	movs	r1, #1
 8008b86:	4618      	mov	r0, r3
 8008b88:	f001 f87e 	bl	8009c88 <RCCEx_PLL3_Config>
 8008b8c:	4603      	mov	r3, r0
 8008b8e:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8008b90:	e009      	b.n	8008ba6 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008b92:	2301      	movs	r3, #1
 8008b94:	75fb      	strb	r3, [r7, #23]
      break;
 8008b96:	e006      	b.n	8008ba6 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8008b98:	bf00      	nop
 8008b9a:	e004      	b.n	8008ba6 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8008b9c:	bf00      	nop
 8008b9e:	e002      	b.n	8008ba6 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8008ba0:	bf00      	nop
 8008ba2:	e000      	b.n	8008ba6 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8008ba4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008ba6:	7dfb      	ldrb	r3, [r7, #23]
 8008ba8:	2b00      	cmp	r3, #0
 8008baa:	d109      	bne.n	8008bc0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8008bac:	4b2d      	ldr	r3, [pc, #180]	; (8008c64 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8008bae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008bb0:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008bb8:	492a      	ldr	r1, [pc, #168]	; (8008c64 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8008bba:	4313      	orrs	r3, r2
 8008bbc:	650b      	str	r3, [r1, #80]	; 0x50
 8008bbe:	e001      	b.n	8008bc4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008bc0:	7dfb      	ldrb	r3, [r7, #23]
 8008bc2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	681b      	ldr	r3, [r3, #0]
 8008bc8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008bcc:	2b00      	cmp	r3, #0
 8008bce:	d04d      	beq.n	8008c6c <HAL_RCCEx_PeriphCLKConfig+0x550>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8008bd6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008bda:	d02e      	beq.n	8008c3a <HAL_RCCEx_PeriphCLKConfig+0x51e>
 8008bdc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008be0:	d828      	bhi.n	8008c34 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8008be2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008be6:	d02a      	beq.n	8008c3e <HAL_RCCEx_PeriphCLKConfig+0x522>
 8008be8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008bec:	d822      	bhi.n	8008c34 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8008bee:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008bf2:	d026      	beq.n	8008c42 <HAL_RCCEx_PeriphCLKConfig+0x526>
 8008bf4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008bf8:	d81c      	bhi.n	8008c34 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8008bfa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008bfe:	d010      	beq.n	8008c22 <HAL_RCCEx_PeriphCLKConfig+0x506>
 8008c00:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008c04:	d816      	bhi.n	8008c34 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8008c06:	2b00      	cmp	r3, #0
 8008c08:	d01d      	beq.n	8008c46 <HAL_RCCEx_PeriphCLKConfig+0x52a>
 8008c0a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008c0e:	d111      	bne.n	8008c34 <HAL_RCCEx_PeriphCLKConfig+0x518>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	3304      	adds	r3, #4
 8008c14:	2101      	movs	r1, #1
 8008c16:	4618      	mov	r0, r3
 8008c18:	f000 ff84 	bl	8009b24 <RCCEx_PLL2_Config>
 8008c1c:	4603      	mov	r3, r0
 8008c1e:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8008c20:	e012      	b.n	8008c48 <HAL_RCCEx_PeriphCLKConfig+0x52c>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	3324      	adds	r3, #36	; 0x24
 8008c26:	2101      	movs	r1, #1
 8008c28:	4618      	mov	r0, r3
 8008c2a:	f001 f82d 	bl	8009c88 <RCCEx_PLL3_Config>
 8008c2e:	4603      	mov	r3, r0
 8008c30:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8008c32:	e009      	b.n	8008c48 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8008c34:	2301      	movs	r3, #1
 8008c36:	75fb      	strb	r3, [r7, #23]
      break;
 8008c38:	e006      	b.n	8008c48 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8008c3a:	bf00      	nop
 8008c3c:	e004      	b.n	8008c48 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8008c3e:	bf00      	nop
 8008c40:	e002      	b.n	8008c48 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8008c42:	bf00      	nop
 8008c44:	e000      	b.n	8008c48 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8008c46:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008c48:	7dfb      	ldrb	r3, [r7, #23]
 8008c4a:	2b00      	cmp	r3, #0
 8008c4c:	d10c      	bne.n	8008c68 <HAL_RCCEx_PeriphCLKConfig+0x54c>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8008c4e:	4b05      	ldr	r3, [pc, #20]	; (8008c64 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8008c50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008c52:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8008c5c:	4901      	ldr	r1, [pc, #4]	; (8008c64 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8008c5e:	4313      	orrs	r3, r2
 8008c60:	658b      	str	r3, [r1, #88]	; 0x58
 8008c62:	e003      	b.n	8008c6c <HAL_RCCEx_PeriphCLKConfig+0x550>
 8008c64:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008c68:	7dfb      	ldrb	r3, [r7, #23]
 8008c6a:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	681b      	ldr	r3, [r3, #0]
 8008c70:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008c74:	2b00      	cmp	r3, #0
 8008c76:	d02f      	beq.n	8008cd8 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008c7c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008c80:	d00e      	beq.n	8008ca0 <HAL_RCCEx_PeriphCLKConfig+0x584>
 8008c82:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008c86:	d814      	bhi.n	8008cb2 <HAL_RCCEx_PeriphCLKConfig+0x596>
 8008c88:	2b00      	cmp	r3, #0
 8008c8a:	d015      	beq.n	8008cb8 <HAL_RCCEx_PeriphCLKConfig+0x59c>
 8008c8c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008c90:	d10f      	bne.n	8008cb2 <HAL_RCCEx_PeriphCLKConfig+0x596>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008c92:	4baf      	ldr	r3, [pc, #700]	; (8008f50 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8008c94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c96:	4aae      	ldr	r2, [pc, #696]	; (8008f50 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8008c98:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008c9c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8008c9e:	e00c      	b.n	8008cba <HAL_RCCEx_PeriphCLKConfig+0x59e>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	3304      	adds	r3, #4
 8008ca4:	2101      	movs	r1, #1
 8008ca6:	4618      	mov	r0, r3
 8008ca8:	f000 ff3c 	bl	8009b24 <RCCEx_PLL2_Config>
 8008cac:	4603      	mov	r3, r0
 8008cae:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8008cb0:	e003      	b.n	8008cba <HAL_RCCEx_PeriphCLKConfig+0x59e>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008cb2:	2301      	movs	r3, #1
 8008cb4:	75fb      	strb	r3, [r7, #23]
      break;
 8008cb6:	e000      	b.n	8008cba <HAL_RCCEx_PeriphCLKConfig+0x59e>
      break;
 8008cb8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008cba:	7dfb      	ldrb	r3, [r7, #23]
 8008cbc:	2b00      	cmp	r3, #0
 8008cbe:	d109      	bne.n	8008cd4 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8008cc0:	4ba3      	ldr	r3, [pc, #652]	; (8008f50 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8008cc2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008cc4:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008ccc:	49a0      	ldr	r1, [pc, #640]	; (8008f50 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8008cce:	4313      	orrs	r3, r2
 8008cd0:	650b      	str	r3, [r1, #80]	; 0x50
 8008cd2:	e001      	b.n	8008cd8 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008cd4:	7dfb      	ldrb	r3, [r7, #23]
 8008cd6:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	681b      	ldr	r3, [r3, #0]
 8008cdc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008ce0:	2b00      	cmp	r3, #0
 8008ce2:	d032      	beq.n	8008d4a <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008ce8:	2b03      	cmp	r3, #3
 8008cea:	d81b      	bhi.n	8008d24 <HAL_RCCEx_PeriphCLKConfig+0x608>
 8008cec:	a201      	add	r2, pc, #4	; (adr r2, 8008cf4 <HAL_RCCEx_PeriphCLKConfig+0x5d8>)
 8008cee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008cf2:	bf00      	nop
 8008cf4:	08008d2b 	.word	0x08008d2b
 8008cf8:	08008d05 	.word	0x08008d05
 8008cfc:	08008d13 	.word	0x08008d13
 8008d00:	08008d2b 	.word	0x08008d2b
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008d04:	4b92      	ldr	r3, [pc, #584]	; (8008f50 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8008d06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d08:	4a91      	ldr	r2, [pc, #580]	; (8008f50 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8008d0a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008d0e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8008d10:	e00c      	b.n	8008d2c <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	3304      	adds	r3, #4
 8008d16:	2102      	movs	r1, #2
 8008d18:	4618      	mov	r0, r3
 8008d1a:	f000 ff03 	bl	8009b24 <RCCEx_PLL2_Config>
 8008d1e:	4603      	mov	r3, r0
 8008d20:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8008d22:	e003      	b.n	8008d2c <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8008d24:	2301      	movs	r3, #1
 8008d26:	75fb      	strb	r3, [r7, #23]
      break;
 8008d28:	e000      	b.n	8008d2c <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 8008d2a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008d2c:	7dfb      	ldrb	r3, [r7, #23]
 8008d2e:	2b00      	cmp	r3, #0
 8008d30:	d109      	bne.n	8008d46 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8008d32:	4b87      	ldr	r3, [pc, #540]	; (8008f50 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8008d34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008d36:	f023 0203 	bic.w	r2, r3, #3
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008d3e:	4984      	ldr	r1, [pc, #528]	; (8008f50 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8008d40:	4313      	orrs	r3, r2
 8008d42:	64cb      	str	r3, [r1, #76]	; 0x4c
 8008d44:	e001      	b.n	8008d4a <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008d46:	7dfb      	ldrb	r3, [r7, #23]
 8008d48:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	681b      	ldr	r3, [r3, #0]
 8008d4e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008d52:	2b00      	cmp	r3, #0
 8008d54:	f000 8086 	beq.w	8008e64 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008d58:	4b7e      	ldr	r3, [pc, #504]	; (8008f54 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8008d5a:	681b      	ldr	r3, [r3, #0]
 8008d5c:	4a7d      	ldr	r2, [pc, #500]	; (8008f54 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8008d5e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008d62:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8008d64:	f7fd fc08 	bl	8006578 <HAL_GetTick>
 8008d68:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008d6a:	e009      	b.n	8008d80 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008d6c:	f7fd fc04 	bl	8006578 <HAL_GetTick>
 8008d70:	4602      	mov	r2, r0
 8008d72:	693b      	ldr	r3, [r7, #16]
 8008d74:	1ad3      	subs	r3, r2, r3
 8008d76:	2b64      	cmp	r3, #100	; 0x64
 8008d78:	d902      	bls.n	8008d80 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 8008d7a:	2303      	movs	r3, #3
 8008d7c:	75fb      	strb	r3, [r7, #23]
        break;
 8008d7e:	e005      	b.n	8008d8c <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008d80:	4b74      	ldr	r3, [pc, #464]	; (8008f54 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8008d82:	681b      	ldr	r3, [r3, #0]
 8008d84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008d88:	2b00      	cmp	r3, #0
 8008d8a:	d0ef      	beq.n	8008d6c <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8008d8c:	7dfb      	ldrb	r3, [r7, #23]
 8008d8e:	2b00      	cmp	r3, #0
 8008d90:	d166      	bne.n	8008e60 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8008d92:	4b6f      	ldr	r3, [pc, #444]	; (8008f50 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8008d94:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008d9c:	4053      	eors	r3, r2
 8008d9e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008da2:	2b00      	cmp	r3, #0
 8008da4:	d013      	beq.n	8008dce <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8008da6:	4b6a      	ldr	r3, [pc, #424]	; (8008f50 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8008da8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008daa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008dae:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8008db0:	4b67      	ldr	r3, [pc, #412]	; (8008f50 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8008db2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008db4:	4a66      	ldr	r2, [pc, #408]	; (8008f50 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8008db6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008dba:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8008dbc:	4b64      	ldr	r3, [pc, #400]	; (8008f50 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8008dbe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008dc0:	4a63      	ldr	r2, [pc, #396]	; (8008f50 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8008dc2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008dc6:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8008dc8:	4a61      	ldr	r2, [pc, #388]	; (8008f50 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8008dca:	68fb      	ldr	r3, [r7, #12]
 8008dcc:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008dd4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008dd8:	d115      	bne.n	8008e06 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008dda:	f7fd fbcd 	bl	8006578 <HAL_GetTick>
 8008dde:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008de0:	e00b      	b.n	8008dfa <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008de2:	f7fd fbc9 	bl	8006578 <HAL_GetTick>
 8008de6:	4602      	mov	r2, r0
 8008de8:	693b      	ldr	r3, [r7, #16]
 8008dea:	1ad3      	subs	r3, r2, r3
 8008dec:	f241 3288 	movw	r2, #5000	; 0x1388
 8008df0:	4293      	cmp	r3, r2
 8008df2:	d902      	bls.n	8008dfa <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8008df4:	2303      	movs	r3, #3
 8008df6:	75fb      	strb	r3, [r7, #23]
            break;
 8008df8:	e005      	b.n	8008e06 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008dfa:	4b55      	ldr	r3, [pc, #340]	; (8008f50 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8008dfc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008dfe:	f003 0302 	and.w	r3, r3, #2
 8008e02:	2b00      	cmp	r3, #0
 8008e04:	d0ed      	beq.n	8008de2 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 8008e06:	7dfb      	ldrb	r3, [r7, #23]
 8008e08:	2b00      	cmp	r3, #0
 8008e0a:	d126      	bne.n	8008e5a <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008e12:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008e16:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008e1a:	d10d      	bne.n	8008e38 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 8008e1c:	4b4c      	ldr	r3, [pc, #304]	; (8008f50 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8008e1e:	691b      	ldr	r3, [r3, #16]
 8008e20:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008e2a:	0919      	lsrs	r1, r3, #4
 8008e2c:	4b4a      	ldr	r3, [pc, #296]	; (8008f58 <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 8008e2e:	400b      	ands	r3, r1
 8008e30:	4947      	ldr	r1, [pc, #284]	; (8008f50 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8008e32:	4313      	orrs	r3, r2
 8008e34:	610b      	str	r3, [r1, #16]
 8008e36:	e005      	b.n	8008e44 <HAL_RCCEx_PeriphCLKConfig+0x728>
 8008e38:	4b45      	ldr	r3, [pc, #276]	; (8008f50 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8008e3a:	691b      	ldr	r3, [r3, #16]
 8008e3c:	4a44      	ldr	r2, [pc, #272]	; (8008f50 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8008e3e:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8008e42:	6113      	str	r3, [r2, #16]
 8008e44:	4b42      	ldr	r3, [pc, #264]	; (8008f50 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8008e46:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008e4e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008e52:	493f      	ldr	r1, [pc, #252]	; (8008f50 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8008e54:	4313      	orrs	r3, r2
 8008e56:	670b      	str	r3, [r1, #112]	; 0x70
 8008e58:	e004      	b.n	8008e64 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8008e5a:	7dfb      	ldrb	r3, [r7, #23]
 8008e5c:	75bb      	strb	r3, [r7, #22]
 8008e5e:	e001      	b.n	8008e64 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008e60:	7dfb      	ldrb	r3, [r7, #23]
 8008e62:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	681b      	ldr	r3, [r3, #0]
 8008e68:	f003 0301 	and.w	r3, r3, #1
 8008e6c:	2b00      	cmp	r3, #0
 8008e6e:	f000 8085 	beq.w	8008f7c <HAL_RCCEx_PeriphCLKConfig+0x860>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008e76:	2b28      	cmp	r3, #40	; 0x28
 8008e78:	d866      	bhi.n	8008f48 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 8008e7a:	a201      	add	r2, pc, #4	; (adr r2, 8008e80 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 8008e7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e80:	08008f5d 	.word	0x08008f5d
 8008e84:	08008f49 	.word	0x08008f49
 8008e88:	08008f49 	.word	0x08008f49
 8008e8c:	08008f49 	.word	0x08008f49
 8008e90:	08008f49 	.word	0x08008f49
 8008e94:	08008f49 	.word	0x08008f49
 8008e98:	08008f49 	.word	0x08008f49
 8008e9c:	08008f49 	.word	0x08008f49
 8008ea0:	08008f25 	.word	0x08008f25
 8008ea4:	08008f49 	.word	0x08008f49
 8008ea8:	08008f49 	.word	0x08008f49
 8008eac:	08008f49 	.word	0x08008f49
 8008eb0:	08008f49 	.word	0x08008f49
 8008eb4:	08008f49 	.word	0x08008f49
 8008eb8:	08008f49 	.word	0x08008f49
 8008ebc:	08008f49 	.word	0x08008f49
 8008ec0:	08008f37 	.word	0x08008f37
 8008ec4:	08008f49 	.word	0x08008f49
 8008ec8:	08008f49 	.word	0x08008f49
 8008ecc:	08008f49 	.word	0x08008f49
 8008ed0:	08008f49 	.word	0x08008f49
 8008ed4:	08008f49 	.word	0x08008f49
 8008ed8:	08008f49 	.word	0x08008f49
 8008edc:	08008f49 	.word	0x08008f49
 8008ee0:	08008f5d 	.word	0x08008f5d
 8008ee4:	08008f49 	.word	0x08008f49
 8008ee8:	08008f49 	.word	0x08008f49
 8008eec:	08008f49 	.word	0x08008f49
 8008ef0:	08008f49 	.word	0x08008f49
 8008ef4:	08008f49 	.word	0x08008f49
 8008ef8:	08008f49 	.word	0x08008f49
 8008efc:	08008f49 	.word	0x08008f49
 8008f00:	08008f5d 	.word	0x08008f5d
 8008f04:	08008f49 	.word	0x08008f49
 8008f08:	08008f49 	.word	0x08008f49
 8008f0c:	08008f49 	.word	0x08008f49
 8008f10:	08008f49 	.word	0x08008f49
 8008f14:	08008f49 	.word	0x08008f49
 8008f18:	08008f49 	.word	0x08008f49
 8008f1c:	08008f49 	.word	0x08008f49
 8008f20:	08008f5d 	.word	0x08008f5d
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	3304      	adds	r3, #4
 8008f28:	2101      	movs	r1, #1
 8008f2a:	4618      	mov	r0, r3
 8008f2c:	f000 fdfa 	bl	8009b24 <RCCEx_PLL2_Config>
 8008f30:	4603      	mov	r3, r0
 8008f32:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8008f34:	e013      	b.n	8008f5e <HAL_RCCEx_PeriphCLKConfig+0x842>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	3324      	adds	r3, #36	; 0x24
 8008f3a:	2101      	movs	r1, #1
 8008f3c:	4618      	mov	r0, r3
 8008f3e:	f000 fea3 	bl	8009c88 <RCCEx_PLL3_Config>
 8008f42:	4603      	mov	r3, r0
 8008f44:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8008f46:	e00a      	b.n	8008f5e <HAL_RCCEx_PeriphCLKConfig+0x842>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008f48:	2301      	movs	r3, #1
 8008f4a:	75fb      	strb	r3, [r7, #23]
      break;
 8008f4c:	e007      	b.n	8008f5e <HAL_RCCEx_PeriphCLKConfig+0x842>
 8008f4e:	bf00      	nop
 8008f50:	58024400 	.word	0x58024400
 8008f54:	58024800 	.word	0x58024800
 8008f58:	00ffffcf 	.word	0x00ffffcf
      break;
 8008f5c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008f5e:	7dfb      	ldrb	r3, [r7, #23]
 8008f60:	2b00      	cmp	r3, #0
 8008f62:	d109      	bne.n	8008f78 <HAL_RCCEx_PeriphCLKConfig+0x85c>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8008f64:	4b96      	ldr	r3, [pc, #600]	; (80091c0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8008f66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008f68:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008f70:	4993      	ldr	r1, [pc, #588]	; (80091c0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8008f72:	4313      	orrs	r3, r2
 8008f74:	654b      	str	r3, [r1, #84]	; 0x54
 8008f76:	e001      	b.n	8008f7c <HAL_RCCEx_PeriphCLKConfig+0x860>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008f78:	7dfb      	ldrb	r3, [r7, #23]
 8008f7a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	681b      	ldr	r3, [r3, #0]
 8008f80:	f003 0302 	and.w	r3, r3, #2
 8008f84:	2b00      	cmp	r3, #0
 8008f86:	d038      	beq.n	8008ffa <HAL_RCCEx_PeriphCLKConfig+0x8de>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008f8c:	2b05      	cmp	r3, #5
 8008f8e:	d821      	bhi.n	8008fd4 <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 8008f90:	a201      	add	r2, pc, #4	; (adr r2, 8008f98 <HAL_RCCEx_PeriphCLKConfig+0x87c>)
 8008f92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f96:	bf00      	nop
 8008f98:	08008fdb 	.word	0x08008fdb
 8008f9c:	08008fb1 	.word	0x08008fb1
 8008fa0:	08008fc3 	.word	0x08008fc3
 8008fa4:	08008fdb 	.word	0x08008fdb
 8008fa8:	08008fdb 	.word	0x08008fdb
 8008fac:	08008fdb 	.word	0x08008fdb
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	3304      	adds	r3, #4
 8008fb4:	2101      	movs	r1, #1
 8008fb6:	4618      	mov	r0, r3
 8008fb8:	f000 fdb4 	bl	8009b24 <RCCEx_PLL2_Config>
 8008fbc:	4603      	mov	r3, r0
 8008fbe:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8008fc0:	e00c      	b.n	8008fdc <HAL_RCCEx_PeriphCLKConfig+0x8c0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	3324      	adds	r3, #36	; 0x24
 8008fc6:	2101      	movs	r1, #1
 8008fc8:	4618      	mov	r0, r3
 8008fca:	f000 fe5d 	bl	8009c88 <RCCEx_PLL3_Config>
 8008fce:	4603      	mov	r3, r0
 8008fd0:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8008fd2:	e003      	b.n	8008fdc <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008fd4:	2301      	movs	r3, #1
 8008fd6:	75fb      	strb	r3, [r7, #23]
      break;
 8008fd8:	e000      	b.n	8008fdc <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      break;
 8008fda:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008fdc:	7dfb      	ldrb	r3, [r7, #23]
 8008fde:	2b00      	cmp	r3, #0
 8008fe0:	d109      	bne.n	8008ff6 <HAL_RCCEx_PeriphCLKConfig+0x8da>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8008fe2:	4b77      	ldr	r3, [pc, #476]	; (80091c0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8008fe4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008fe6:	f023 0207 	bic.w	r2, r3, #7
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008fee:	4974      	ldr	r1, [pc, #464]	; (80091c0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8008ff0:	4313      	orrs	r3, r2
 8008ff2:	654b      	str	r3, [r1, #84]	; 0x54
 8008ff4:	e001      	b.n	8008ffa <HAL_RCCEx_PeriphCLKConfig+0x8de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008ff6:	7dfb      	ldrb	r3, [r7, #23]
 8008ff8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	681b      	ldr	r3, [r3, #0]
 8008ffe:	f003 0304 	and.w	r3, r3, #4
 8009002:	2b00      	cmp	r3, #0
 8009004:	d03a      	beq.n	800907c <HAL_RCCEx_PeriphCLKConfig+0x960>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800900c:	2b05      	cmp	r3, #5
 800900e:	d821      	bhi.n	8009054 <HAL_RCCEx_PeriphCLKConfig+0x938>
 8009010:	a201      	add	r2, pc, #4	; (adr r2, 8009018 <HAL_RCCEx_PeriphCLKConfig+0x8fc>)
 8009012:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009016:	bf00      	nop
 8009018:	0800905b 	.word	0x0800905b
 800901c:	08009031 	.word	0x08009031
 8009020:	08009043 	.word	0x08009043
 8009024:	0800905b 	.word	0x0800905b
 8009028:	0800905b 	.word	0x0800905b
 800902c:	0800905b 	.word	0x0800905b
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	3304      	adds	r3, #4
 8009034:	2101      	movs	r1, #1
 8009036:	4618      	mov	r0, r3
 8009038:	f000 fd74 	bl	8009b24 <RCCEx_PLL2_Config>
 800903c:	4603      	mov	r3, r0
 800903e:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8009040:	e00c      	b.n	800905c <HAL_RCCEx_PeriphCLKConfig+0x940>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	3324      	adds	r3, #36	; 0x24
 8009046:	2101      	movs	r1, #1
 8009048:	4618      	mov	r0, r3
 800904a:	f000 fe1d 	bl	8009c88 <RCCEx_PLL3_Config>
 800904e:	4603      	mov	r3, r0
 8009050:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8009052:	e003      	b.n	800905c <HAL_RCCEx_PeriphCLKConfig+0x940>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009054:	2301      	movs	r3, #1
 8009056:	75fb      	strb	r3, [r7, #23]
      break;
 8009058:	e000      	b.n	800905c <HAL_RCCEx_PeriphCLKConfig+0x940>
      break;
 800905a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800905c:	7dfb      	ldrb	r3, [r7, #23]
 800905e:	2b00      	cmp	r3, #0
 8009060:	d10a      	bne.n	8009078 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8009062:	4b57      	ldr	r3, [pc, #348]	; (80091c0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8009064:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009066:	f023 0207 	bic.w	r2, r3, #7
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009070:	4953      	ldr	r1, [pc, #332]	; (80091c0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8009072:	4313      	orrs	r3, r2
 8009074:	658b      	str	r3, [r1, #88]	; 0x58
 8009076:	e001      	b.n	800907c <HAL_RCCEx_PeriphCLKConfig+0x960>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009078:	7dfb      	ldrb	r3, [r7, #23]
 800907a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	681b      	ldr	r3, [r3, #0]
 8009080:	f003 0320 	and.w	r3, r3, #32
 8009084:	2b00      	cmp	r3, #0
 8009086:	d04b      	beq.n	8009120 <HAL_RCCEx_PeriphCLKConfig+0xa04>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800908e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009092:	d02e      	beq.n	80090f2 <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8009094:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009098:	d828      	bhi.n	80090ec <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 800909a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800909e:	d02a      	beq.n	80090f6 <HAL_RCCEx_PeriphCLKConfig+0x9da>
 80090a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80090a4:	d822      	bhi.n	80090ec <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 80090a6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80090aa:	d026      	beq.n	80090fa <HAL_RCCEx_PeriphCLKConfig+0x9de>
 80090ac:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80090b0:	d81c      	bhi.n	80090ec <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 80090b2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80090b6:	d010      	beq.n	80090da <HAL_RCCEx_PeriphCLKConfig+0x9be>
 80090b8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80090bc:	d816      	bhi.n	80090ec <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 80090be:	2b00      	cmp	r3, #0
 80090c0:	d01d      	beq.n	80090fe <HAL_RCCEx_PeriphCLKConfig+0x9e2>
 80090c2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80090c6:	d111      	bne.n	80090ec <HAL_RCCEx_PeriphCLKConfig+0x9d0>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	3304      	adds	r3, #4
 80090cc:	2100      	movs	r1, #0
 80090ce:	4618      	mov	r0, r3
 80090d0:	f000 fd28 	bl	8009b24 <RCCEx_PLL2_Config>
 80090d4:	4603      	mov	r3, r0
 80090d6:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80090d8:	e012      	b.n	8009100 <HAL_RCCEx_PeriphCLKConfig+0x9e4>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	3324      	adds	r3, #36	; 0x24
 80090de:	2102      	movs	r1, #2
 80090e0:	4618      	mov	r0, r3
 80090e2:	f000 fdd1 	bl	8009c88 <RCCEx_PLL3_Config>
 80090e6:	4603      	mov	r3, r0
 80090e8:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80090ea:	e009      	b.n	8009100 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80090ec:	2301      	movs	r3, #1
 80090ee:	75fb      	strb	r3, [r7, #23]
      break;
 80090f0:	e006      	b.n	8009100 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 80090f2:	bf00      	nop
 80090f4:	e004      	b.n	8009100 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 80090f6:	bf00      	nop
 80090f8:	e002      	b.n	8009100 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 80090fa:	bf00      	nop
 80090fc:	e000      	b.n	8009100 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 80090fe:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009100:	7dfb      	ldrb	r3, [r7, #23]
 8009102:	2b00      	cmp	r3, #0
 8009104:	d10a      	bne.n	800911c <HAL_RCCEx_PeriphCLKConfig+0xa00>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8009106:	4b2e      	ldr	r3, [pc, #184]	; (80091c0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8009108:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800910a:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009114:	492a      	ldr	r1, [pc, #168]	; (80091c0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8009116:	4313      	orrs	r3, r2
 8009118:	654b      	str	r3, [r1, #84]	; 0x54
 800911a:	e001      	b.n	8009120 <HAL_RCCEx_PeriphCLKConfig+0xa04>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800911c:	7dfb      	ldrb	r3, [r7, #23]
 800911e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	681b      	ldr	r3, [r3, #0]
 8009124:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009128:	2b00      	cmp	r3, #0
 800912a:	d04d      	beq.n	80091c8 <HAL_RCCEx_PeriphCLKConfig+0xaac>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8009132:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8009136:	d02e      	beq.n	8009196 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8009138:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800913c:	d828      	bhi.n	8009190 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 800913e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009142:	d02a      	beq.n	800919a <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8009144:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009148:	d822      	bhi.n	8009190 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 800914a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800914e:	d026      	beq.n	800919e <HAL_RCCEx_PeriphCLKConfig+0xa82>
 8009150:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009154:	d81c      	bhi.n	8009190 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8009156:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800915a:	d010      	beq.n	800917e <HAL_RCCEx_PeriphCLKConfig+0xa62>
 800915c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009160:	d816      	bhi.n	8009190 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8009162:	2b00      	cmp	r3, #0
 8009164:	d01d      	beq.n	80091a2 <HAL_RCCEx_PeriphCLKConfig+0xa86>
 8009166:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800916a:	d111      	bne.n	8009190 <HAL_RCCEx_PeriphCLKConfig+0xa74>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	3304      	adds	r3, #4
 8009170:	2100      	movs	r1, #0
 8009172:	4618      	mov	r0, r3
 8009174:	f000 fcd6 	bl	8009b24 <RCCEx_PLL2_Config>
 8009178:	4603      	mov	r3, r0
 800917a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800917c:	e012      	b.n	80091a4 <HAL_RCCEx_PeriphCLKConfig+0xa88>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	3324      	adds	r3, #36	; 0x24
 8009182:	2102      	movs	r1, #2
 8009184:	4618      	mov	r0, r3
 8009186:	f000 fd7f 	bl	8009c88 <RCCEx_PLL3_Config>
 800918a:	4603      	mov	r3, r0
 800918c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800918e:	e009      	b.n	80091a4 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009190:	2301      	movs	r3, #1
 8009192:	75fb      	strb	r3, [r7, #23]
      break;
 8009194:	e006      	b.n	80091a4 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8009196:	bf00      	nop
 8009198:	e004      	b.n	80091a4 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 800919a:	bf00      	nop
 800919c:	e002      	b.n	80091a4 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 800919e:	bf00      	nop
 80091a0:	e000      	b.n	80091a4 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 80091a2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80091a4:	7dfb      	ldrb	r3, [r7, #23]
 80091a6:	2b00      	cmp	r3, #0
 80091a8:	d10c      	bne.n	80091c4 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80091aa:	4b05      	ldr	r3, [pc, #20]	; (80091c0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80091ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80091ae:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80091b8:	4901      	ldr	r1, [pc, #4]	; (80091c0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80091ba:	4313      	orrs	r3, r2
 80091bc:	658b      	str	r3, [r1, #88]	; 0x58
 80091be:	e003      	b.n	80091c8 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 80091c0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80091c4:	7dfb      	ldrb	r3, [r7, #23]
 80091c6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	681b      	ldr	r3, [r3, #0]
 80091cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80091d0:	2b00      	cmp	r3, #0
 80091d2:	d04b      	beq.n	800926c <HAL_RCCEx_PeriphCLKConfig+0xb50>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80091da:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80091de:	d02e      	beq.n	800923e <HAL_RCCEx_PeriphCLKConfig+0xb22>
 80091e0:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80091e4:	d828      	bhi.n	8009238 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 80091e6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80091ea:	d02a      	beq.n	8009242 <HAL_RCCEx_PeriphCLKConfig+0xb26>
 80091ec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80091f0:	d822      	bhi.n	8009238 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 80091f2:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80091f6:	d026      	beq.n	8009246 <HAL_RCCEx_PeriphCLKConfig+0xb2a>
 80091f8:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80091fc:	d81c      	bhi.n	8009238 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 80091fe:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009202:	d010      	beq.n	8009226 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 8009204:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009208:	d816      	bhi.n	8009238 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 800920a:	2b00      	cmp	r3, #0
 800920c:	d01d      	beq.n	800924a <HAL_RCCEx_PeriphCLKConfig+0xb2e>
 800920e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009212:	d111      	bne.n	8009238 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	3304      	adds	r3, #4
 8009218:	2100      	movs	r1, #0
 800921a:	4618      	mov	r0, r3
 800921c:	f000 fc82 	bl	8009b24 <RCCEx_PLL2_Config>
 8009220:	4603      	mov	r3, r0
 8009222:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8009224:	e012      	b.n	800924c <HAL_RCCEx_PeriphCLKConfig+0xb30>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	3324      	adds	r3, #36	; 0x24
 800922a:	2102      	movs	r1, #2
 800922c:	4618      	mov	r0, r3
 800922e:	f000 fd2b 	bl	8009c88 <RCCEx_PLL3_Config>
 8009232:	4603      	mov	r3, r0
 8009234:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8009236:	e009      	b.n	800924c <HAL_RCCEx_PeriphCLKConfig+0xb30>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009238:	2301      	movs	r3, #1
 800923a:	75fb      	strb	r3, [r7, #23]
      break;
 800923c:	e006      	b.n	800924c <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 800923e:	bf00      	nop
 8009240:	e004      	b.n	800924c <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8009242:	bf00      	nop
 8009244:	e002      	b.n	800924c <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8009246:	bf00      	nop
 8009248:	e000      	b.n	800924c <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 800924a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800924c:	7dfb      	ldrb	r3, [r7, #23]
 800924e:	2b00      	cmp	r3, #0
 8009250:	d10a      	bne.n	8009268 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8009252:	4b9d      	ldr	r3, [pc, #628]	; (80094c8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009254:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009256:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009260:	4999      	ldr	r1, [pc, #612]	; (80094c8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009262:	4313      	orrs	r3, r2
 8009264:	658b      	str	r3, [r1, #88]	; 0x58
 8009266:	e001      	b.n	800926c <HAL_RCCEx_PeriphCLKConfig+0xb50>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009268:	7dfb      	ldrb	r3, [r7, #23]
 800926a:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	681b      	ldr	r3, [r3, #0]
 8009270:	f003 0308 	and.w	r3, r3, #8
 8009274:	2b00      	cmp	r3, #0
 8009276:	d01a      	beq.n	80092ae <HAL_RCCEx_PeriphCLKConfig+0xb92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800927e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009282:	d10a      	bne.n	800929a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	3324      	adds	r3, #36	; 0x24
 8009288:	2102      	movs	r1, #2
 800928a:	4618      	mov	r0, r3
 800928c:	f000 fcfc 	bl	8009c88 <RCCEx_PLL3_Config>
 8009290:	4603      	mov	r3, r0
 8009292:	2b00      	cmp	r3, #0
 8009294:	d001      	beq.n	800929a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        {
          status = HAL_ERROR;
 8009296:	2301      	movs	r3, #1
 8009298:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800929a:	4b8b      	ldr	r3, [pc, #556]	; (80094c8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800929c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800929e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80092a8:	4987      	ldr	r1, [pc, #540]	; (80094c8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80092aa:	4313      	orrs	r3, r2
 80092ac:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	681b      	ldr	r3, [r3, #0]
 80092b2:	f003 0310 	and.w	r3, r3, #16
 80092b6:	2b00      	cmp	r3, #0
 80092b8:	d01a      	beq.n	80092f0 <HAL_RCCEx_PeriphCLKConfig+0xbd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80092c0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80092c4:	d10a      	bne.n	80092dc <HAL_RCCEx_PeriphCLKConfig+0xbc0>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	3324      	adds	r3, #36	; 0x24
 80092ca:	2102      	movs	r1, #2
 80092cc:	4618      	mov	r0, r3
 80092ce:	f000 fcdb 	bl	8009c88 <RCCEx_PLL3_Config>
 80092d2:	4603      	mov	r3, r0
 80092d4:	2b00      	cmp	r3, #0
 80092d6:	d001      	beq.n	80092dc <HAL_RCCEx_PeriphCLKConfig+0xbc0>
      {
        status = HAL_ERROR;
 80092d8:	2301      	movs	r3, #1
 80092da:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80092dc:	4b7a      	ldr	r3, [pc, #488]	; (80094c8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80092de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80092e0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80092ea:	4977      	ldr	r1, [pc, #476]	; (80094c8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80092ec:	4313      	orrs	r3, r2
 80092ee:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	681b      	ldr	r3, [r3, #0]
 80092f4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80092f8:	2b00      	cmp	r3, #0
 80092fa:	d034      	beq.n	8009366 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {
    switch(PeriphClkInit->AdcClockSelection)
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8009302:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009306:	d01d      	beq.n	8009344 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 8009308:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800930c:	d817      	bhi.n	800933e <HAL_RCCEx_PeriphCLKConfig+0xc22>
 800930e:	2b00      	cmp	r3, #0
 8009310:	d003      	beq.n	800931a <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 8009312:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009316:	d009      	beq.n	800932c <HAL_RCCEx_PeriphCLKConfig+0xc10>
 8009318:	e011      	b.n	800933e <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	3304      	adds	r3, #4
 800931e:	2100      	movs	r1, #0
 8009320:	4618      	mov	r0, r3
 8009322:	f000 fbff 	bl	8009b24 <RCCEx_PLL2_Config>
 8009326:	4603      	mov	r3, r0
 8009328:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800932a:	e00c      	b.n	8009346 <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	3324      	adds	r3, #36	; 0x24
 8009330:	2102      	movs	r1, #2
 8009332:	4618      	mov	r0, r3
 8009334:	f000 fca8 	bl	8009c88 <RCCEx_PLL3_Config>
 8009338:	4603      	mov	r3, r0
 800933a:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800933c:	e003      	b.n	8009346 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800933e:	2301      	movs	r3, #1
 8009340:	75fb      	strb	r3, [r7, #23]
      break;
 8009342:	e000      	b.n	8009346 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 8009344:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009346:	7dfb      	ldrb	r3, [r7, #23]
 8009348:	2b00      	cmp	r3, #0
 800934a:	d10a      	bne.n	8009362 <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800934c:	4b5e      	ldr	r3, [pc, #376]	; (80094c8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800934e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009350:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800935a:	495b      	ldr	r1, [pc, #364]	; (80094c8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800935c:	4313      	orrs	r3, r2
 800935e:	658b      	str	r3, [r1, #88]	; 0x58
 8009360:	e001      	b.n	8009366 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009362:	7dfb      	ldrb	r3, [r7, #23]
 8009364:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	681b      	ldr	r3, [r3, #0]
 800936a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800936e:	2b00      	cmp	r3, #0
 8009370:	d033      	beq.n	80093da <HAL_RCCEx_PeriphCLKConfig+0xcbe>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009378:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800937c:	d01c      	beq.n	80093b8 <HAL_RCCEx_PeriphCLKConfig+0xc9c>
 800937e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009382:	d816      	bhi.n	80093b2 <HAL_RCCEx_PeriphCLKConfig+0xc96>
 8009384:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009388:	d003      	beq.n	8009392 <HAL_RCCEx_PeriphCLKConfig+0xc76>
 800938a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800938e:	d007      	beq.n	80093a0 <HAL_RCCEx_PeriphCLKConfig+0xc84>
 8009390:	e00f      	b.n	80093b2 <HAL_RCCEx_PeriphCLKConfig+0xc96>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009392:	4b4d      	ldr	r3, [pc, #308]	; (80094c8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009394:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009396:	4a4c      	ldr	r2, [pc, #304]	; (80094c8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009398:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800939c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 800939e:	e00c      	b.n	80093ba <HAL_RCCEx_PeriphCLKConfig+0xc9e>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	3324      	adds	r3, #36	; 0x24
 80093a4:	2101      	movs	r1, #1
 80093a6:	4618      	mov	r0, r3
 80093a8:	f000 fc6e 	bl	8009c88 <RCCEx_PLL3_Config>
 80093ac:	4603      	mov	r3, r0
 80093ae:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 80093b0:	e003      	b.n	80093ba <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80093b2:	2301      	movs	r3, #1
 80093b4:	75fb      	strb	r3, [r7, #23]
      break;
 80093b6:	e000      	b.n	80093ba <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      break;
 80093b8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80093ba:	7dfb      	ldrb	r3, [r7, #23]
 80093bc:	2b00      	cmp	r3, #0
 80093be:	d10a      	bne.n	80093d6 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80093c0:	4b41      	ldr	r3, [pc, #260]	; (80094c8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80093c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80093c4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80093ce:	493e      	ldr	r1, [pc, #248]	; (80094c8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80093d0:	4313      	orrs	r3, r2
 80093d2:	654b      	str	r3, [r1, #84]	; 0x54
 80093d4:	e001      	b.n	80093da <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80093d6:	7dfb      	ldrb	r3, [r7, #23]
 80093d8:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	681b      	ldr	r3, [r3, #0]
 80093de:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80093e2:	2b00      	cmp	r3, #0
 80093e4:	d029      	beq.n	800943a <HAL_RCCEx_PeriphCLKConfig+0xd1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80093ea:	2b00      	cmp	r3, #0
 80093ec:	d003      	beq.n	80093f6 <HAL_RCCEx_PeriphCLKConfig+0xcda>
 80093ee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80093f2:	d007      	beq.n	8009404 <HAL_RCCEx_PeriphCLKConfig+0xce8>
 80093f4:	e00f      	b.n	8009416 <HAL_RCCEx_PeriphCLKConfig+0xcfa>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80093f6:	4b34      	ldr	r3, [pc, #208]	; (80094c8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80093f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80093fa:	4a33      	ldr	r2, [pc, #204]	; (80094c8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80093fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009400:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8009402:	e00b      	b.n	800941c <HAL_RCCEx_PeriphCLKConfig+0xd00>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	3304      	adds	r3, #4
 8009408:	2102      	movs	r1, #2
 800940a:	4618      	mov	r0, r3
 800940c:	f000 fb8a 	bl	8009b24 <RCCEx_PLL2_Config>
 8009410:	4603      	mov	r3, r0
 8009412:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8009414:	e002      	b.n	800941c <HAL_RCCEx_PeriphCLKConfig+0xd00>

    default:
      ret = HAL_ERROR;
 8009416:	2301      	movs	r3, #1
 8009418:	75fb      	strb	r3, [r7, #23]
      break;
 800941a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800941c:	7dfb      	ldrb	r3, [r7, #23]
 800941e:	2b00      	cmp	r3, #0
 8009420:	d109      	bne.n	8009436 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8009422:	4b29      	ldr	r3, [pc, #164]	; (80094c8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009424:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009426:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800942e:	4926      	ldr	r1, [pc, #152]	; (80094c8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009430:	4313      	orrs	r3, r2
 8009432:	64cb      	str	r3, [r1, #76]	; 0x4c
 8009434:	e001      	b.n	800943a <HAL_RCCEx_PeriphCLKConfig+0xd1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009436:	7dfb      	ldrb	r3, [r7, #23]
 8009438:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	681b      	ldr	r3, [r3, #0]
 800943e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009442:	2b00      	cmp	r3, #0
 8009444:	d00a      	beq.n	800945c <HAL_RCCEx_PeriphCLKConfig+0xd40>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	3324      	adds	r3, #36	; 0x24
 800944a:	2102      	movs	r1, #2
 800944c:	4618      	mov	r0, r3
 800944e:	f000 fc1b 	bl	8009c88 <RCCEx_PLL3_Config>
 8009452:	4603      	mov	r3, r0
 8009454:	2b00      	cmp	r3, #0
 8009456:	d001      	beq.n	800945c <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      status=HAL_ERROR;
 8009458:	2301      	movs	r3, #1
 800945a:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	681b      	ldr	r3, [r3, #0]
 8009460:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009464:	2b00      	cmp	r3, #0
 8009466:	d033      	beq.n	80094d0 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
  {

    switch(PeriphClkInit->RngClockSelection)
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800946c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009470:	d017      	beq.n	80094a2 <HAL_RCCEx_PeriphCLKConfig+0xd86>
 8009472:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009476:	d811      	bhi.n	800949c <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8009478:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800947c:	d013      	beq.n	80094a6 <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 800947e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009482:	d80b      	bhi.n	800949c <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8009484:	2b00      	cmp	r3, #0
 8009486:	d010      	beq.n	80094aa <HAL_RCCEx_PeriphCLKConfig+0xd8e>
 8009488:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800948c:	d106      	bne.n	800949c <HAL_RCCEx_PeriphCLKConfig+0xd80>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800948e:	4b0e      	ldr	r3, [pc, #56]	; (80094c8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009490:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009492:	4a0d      	ldr	r2, [pc, #52]	; (80094c8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009494:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009498:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 800949a:	e007      	b.n	80094ac <HAL_RCCEx_PeriphCLKConfig+0xd90>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800949c:	2301      	movs	r3, #1
 800949e:	75fb      	strb	r3, [r7, #23]
      break;
 80094a0:	e004      	b.n	80094ac <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 80094a2:	bf00      	nop
 80094a4:	e002      	b.n	80094ac <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 80094a6:	bf00      	nop
 80094a8:	e000      	b.n	80094ac <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 80094aa:	bf00      	nop
    }

    if(ret == HAL_OK)
 80094ac:	7dfb      	ldrb	r3, [r7, #23]
 80094ae:	2b00      	cmp	r3, #0
 80094b0:	d10c      	bne.n	80094cc <HAL_RCCEx_PeriphCLKConfig+0xdb0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80094b2:	4b05      	ldr	r3, [pc, #20]	; (80094c8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80094b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80094b6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80094be:	4902      	ldr	r1, [pc, #8]	; (80094c8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80094c0:	4313      	orrs	r3, r2
 80094c2:	654b      	str	r3, [r1, #84]	; 0x54
 80094c4:	e004      	b.n	80094d0 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
 80094c6:	bf00      	nop
 80094c8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80094cc:	7dfb      	ldrb	r3, [r7, #23]
 80094ce:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	681b      	ldr	r3, [r3, #0]
 80094d4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80094d8:	2b00      	cmp	r3, #0
 80094da:	d008      	beq.n	80094ee <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80094dc:	4b31      	ldr	r3, [pc, #196]	; (80095a4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80094de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80094e0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80094e8:	492e      	ldr	r1, [pc, #184]	; (80095a4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80094ea:	4313      	orrs	r3, r2
 80094ec:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	681b      	ldr	r3, [r3, #0]
 80094f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80094f6:	2b00      	cmp	r3, #0
 80094f8:	d009      	beq.n	800950e <HAL_RCCEx_PeriphCLKConfig+0xdf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80094fa:	4b2a      	ldr	r3, [pc, #168]	; (80095a4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80094fc:	691b      	ldr	r3, [r3, #16]
 80094fe:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8009508:	4926      	ldr	r1, [pc, #152]	; (80095a4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800950a:	4313      	orrs	r3, r2
 800950c:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	681b      	ldr	r3, [r3, #0]
 8009512:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009516:	2b00      	cmp	r3, #0
 8009518:	d008      	beq.n	800952c <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800951a:	4b22      	ldr	r3, [pc, #136]	; (80095a4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800951c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800951e:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009526:	491f      	ldr	r1, [pc, #124]	; (80095a4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8009528:	4313      	orrs	r3, r2
 800952a:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	681b      	ldr	r3, [r3, #0]
 8009530:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8009534:	2b00      	cmp	r3, #0
 8009536:	d00d      	beq.n	8009554 <HAL_RCCEx_PeriphCLKConfig+0xe38>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8009538:	4b1a      	ldr	r3, [pc, #104]	; (80095a4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800953a:	691b      	ldr	r3, [r3, #16]
 800953c:	4a19      	ldr	r2, [pc, #100]	; (80095a4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800953e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8009542:	6113      	str	r3, [r2, #16]
 8009544:	4b17      	ldr	r3, [pc, #92]	; (80095a4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8009546:	691a      	ldr	r2, [r3, #16]
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800954e:	4915      	ldr	r1, [pc, #84]	; (80095a4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8009550:	4313      	orrs	r3, r2
 8009552:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	681b      	ldr	r3, [r3, #0]
 8009558:	2b00      	cmp	r3, #0
 800955a:	da08      	bge.n	800956e <HAL_RCCEx_PeriphCLKConfig+0xe52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800955c:	4b11      	ldr	r3, [pc, #68]	; (80095a4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800955e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009560:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009568:	490e      	ldr	r1, [pc, #56]	; (80095a4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800956a:	4313      	orrs	r3, r2
 800956c:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	681b      	ldr	r3, [r3, #0]
 8009572:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009576:	2b00      	cmp	r3, #0
 8009578:	d009      	beq.n	800958e <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800957a:	4b0a      	ldr	r3, [pc, #40]	; (80095a4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800957c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800957e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009588:	4906      	ldr	r1, [pc, #24]	; (80095a4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800958a:	4313      	orrs	r3, r2
 800958c:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 800958e:	7dbb      	ldrb	r3, [r7, #22]
 8009590:	2b00      	cmp	r3, #0
 8009592:	d101      	bne.n	8009598 <HAL_RCCEx_PeriphCLKConfig+0xe7c>
  {
    return HAL_OK;
 8009594:	2300      	movs	r3, #0
 8009596:	e000      	b.n	800959a <HAL_RCCEx_PeriphCLKConfig+0xe7e>
  }
  return HAL_ERROR;
 8009598:	2301      	movs	r3, #1
}
 800959a:	4618      	mov	r0, r3
 800959c:	3718      	adds	r7, #24
 800959e:	46bd      	mov	sp, r7
 80095a0:	bd80      	pop	{r7, pc}
 80095a2:	bf00      	nop
 80095a4:	58024400 	.word	0x58024400

080095a8 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80095a8:	b580      	push	{r7, lr}
 80095aa:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80095ac:	f7ff f85a 	bl	8008664 <HAL_RCC_GetHCLKFreq>
 80095b0:	4602      	mov	r2, r0
 80095b2:	4b06      	ldr	r3, [pc, #24]	; (80095cc <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80095b4:	6a1b      	ldr	r3, [r3, #32]
 80095b6:	091b      	lsrs	r3, r3, #4
 80095b8:	f003 0307 	and.w	r3, r3, #7
 80095bc:	4904      	ldr	r1, [pc, #16]	; (80095d0 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80095be:	5ccb      	ldrb	r3, [r1, r3]
 80095c0:	f003 031f 	and.w	r3, r3, #31
 80095c4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80095c8:	4618      	mov	r0, r3
 80095ca:	bd80      	pop	{r7, pc}
 80095cc:	58024400 	.word	0x58024400
 80095d0:	08011a68 	.word	0x08011a68

080095d4 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 80095d4:	b480      	push	{r7}
 80095d6:	b089      	sub	sp, #36	; 0x24
 80095d8:	af00      	add	r7, sp, #0
 80095da:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80095dc:	4ba1      	ldr	r3, [pc, #644]	; (8009864 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80095de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80095e0:	f003 0303 	and.w	r3, r3, #3
 80095e4:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 80095e6:	4b9f      	ldr	r3, [pc, #636]	; (8009864 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80095e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80095ea:	0b1b      	lsrs	r3, r3, #12
 80095ec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80095f0:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80095f2:	4b9c      	ldr	r3, [pc, #624]	; (8009864 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80095f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80095f6:	091b      	lsrs	r3, r3, #4
 80095f8:	f003 0301 	and.w	r3, r3, #1
 80095fc:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 80095fe:	4b99      	ldr	r3, [pc, #612]	; (8009864 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009600:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009602:	08db      	lsrs	r3, r3, #3
 8009604:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009608:	693a      	ldr	r2, [r7, #16]
 800960a:	fb02 f303 	mul.w	r3, r2, r3
 800960e:	ee07 3a90 	vmov	s15, r3
 8009612:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009616:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800961a:	697b      	ldr	r3, [r7, #20]
 800961c:	2b00      	cmp	r3, #0
 800961e:	f000 8111 	beq.w	8009844 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8009622:	69bb      	ldr	r3, [r7, #24]
 8009624:	2b02      	cmp	r3, #2
 8009626:	f000 8083 	beq.w	8009730 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800962a:	69bb      	ldr	r3, [r7, #24]
 800962c:	2b02      	cmp	r3, #2
 800962e:	f200 80a1 	bhi.w	8009774 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8009632:	69bb      	ldr	r3, [r7, #24]
 8009634:	2b00      	cmp	r3, #0
 8009636:	d003      	beq.n	8009640 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8009638:	69bb      	ldr	r3, [r7, #24]
 800963a:	2b01      	cmp	r3, #1
 800963c:	d056      	beq.n	80096ec <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800963e:	e099      	b.n	8009774 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009640:	4b88      	ldr	r3, [pc, #544]	; (8009864 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009642:	681b      	ldr	r3, [r3, #0]
 8009644:	f003 0320 	and.w	r3, r3, #32
 8009648:	2b00      	cmp	r3, #0
 800964a:	d02d      	beq.n	80096a8 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800964c:	4b85      	ldr	r3, [pc, #532]	; (8009864 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800964e:	681b      	ldr	r3, [r3, #0]
 8009650:	08db      	lsrs	r3, r3, #3
 8009652:	f003 0303 	and.w	r3, r3, #3
 8009656:	4a84      	ldr	r2, [pc, #528]	; (8009868 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8009658:	fa22 f303 	lsr.w	r3, r2, r3
 800965c:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800965e:	68bb      	ldr	r3, [r7, #8]
 8009660:	ee07 3a90 	vmov	s15, r3
 8009664:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009668:	697b      	ldr	r3, [r7, #20]
 800966a:	ee07 3a90 	vmov	s15, r3
 800966e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009672:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009676:	4b7b      	ldr	r3, [pc, #492]	; (8009864 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009678:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800967a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800967e:	ee07 3a90 	vmov	s15, r3
 8009682:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009686:	ed97 6a03 	vldr	s12, [r7, #12]
 800968a:	eddf 5a78 	vldr	s11, [pc, #480]	; 800986c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800968e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009692:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009696:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800969a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800969e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80096a2:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80096a6:	e087      	b.n	80097b8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80096a8:	697b      	ldr	r3, [r7, #20]
 80096aa:	ee07 3a90 	vmov	s15, r3
 80096ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80096b2:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8009870 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80096b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80096ba:	4b6a      	ldr	r3, [pc, #424]	; (8009864 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80096bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80096be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80096c2:	ee07 3a90 	vmov	s15, r3
 80096c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80096ca:	ed97 6a03 	vldr	s12, [r7, #12]
 80096ce:	eddf 5a67 	vldr	s11, [pc, #412]	; 800986c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80096d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80096d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80096da:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80096de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80096e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80096e6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80096ea:	e065      	b.n	80097b8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80096ec:	697b      	ldr	r3, [r7, #20]
 80096ee:	ee07 3a90 	vmov	s15, r3
 80096f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80096f6:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8009874 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80096fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80096fe:	4b59      	ldr	r3, [pc, #356]	; (8009864 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009700:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009702:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009706:	ee07 3a90 	vmov	s15, r3
 800970a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800970e:	ed97 6a03 	vldr	s12, [r7, #12]
 8009712:	eddf 5a56 	vldr	s11, [pc, #344]	; 800986c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009716:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800971a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800971e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009722:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009726:	ee67 7a27 	vmul.f32	s15, s14, s15
 800972a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800972e:	e043      	b.n	80097b8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8009730:	697b      	ldr	r3, [r7, #20]
 8009732:	ee07 3a90 	vmov	s15, r3
 8009736:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800973a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8009878 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800973e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009742:	4b48      	ldr	r3, [pc, #288]	; (8009864 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009744:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009746:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800974a:	ee07 3a90 	vmov	s15, r3
 800974e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009752:	ed97 6a03 	vldr	s12, [r7, #12]
 8009756:	eddf 5a45 	vldr	s11, [pc, #276]	; 800986c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800975a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800975e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009762:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009766:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800976a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800976e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009772:	e021      	b.n	80097b8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8009774:	697b      	ldr	r3, [r7, #20]
 8009776:	ee07 3a90 	vmov	s15, r3
 800977a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800977e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8009874 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8009782:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009786:	4b37      	ldr	r3, [pc, #220]	; (8009864 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009788:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800978a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800978e:	ee07 3a90 	vmov	s15, r3
 8009792:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009796:	ed97 6a03 	vldr	s12, [r7, #12]
 800979a:	eddf 5a34 	vldr	s11, [pc, #208]	; 800986c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800979e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80097a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80097a6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80097aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80097ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80097b2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80097b6:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 80097b8:	4b2a      	ldr	r3, [pc, #168]	; (8009864 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80097ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80097bc:	0a5b      	lsrs	r3, r3, #9
 80097be:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80097c2:	ee07 3a90 	vmov	s15, r3
 80097c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80097ca:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80097ce:	ee37 7a87 	vadd.f32	s14, s15, s14
 80097d2:	edd7 6a07 	vldr	s13, [r7, #28]
 80097d6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80097da:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80097de:	ee17 2a90 	vmov	r2, s15
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 80097e6:	4b1f      	ldr	r3, [pc, #124]	; (8009864 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80097e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80097ea:	0c1b      	lsrs	r3, r3, #16
 80097ec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80097f0:	ee07 3a90 	vmov	s15, r3
 80097f4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80097f8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80097fc:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009800:	edd7 6a07 	vldr	s13, [r7, #28]
 8009804:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009808:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800980c:	ee17 2a90 	vmov	r2, s15
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8009814:	4b13      	ldr	r3, [pc, #76]	; (8009864 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009816:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009818:	0e1b      	lsrs	r3, r3, #24
 800981a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800981e:	ee07 3a90 	vmov	s15, r3
 8009822:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009826:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800982a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800982e:	edd7 6a07 	vldr	s13, [r7, #28]
 8009832:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009836:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800983a:	ee17 2a90 	vmov	r2, s15
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8009842:	e008      	b.n	8009856 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	2200      	movs	r2, #0
 8009848:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	2200      	movs	r2, #0
 800984e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	2200      	movs	r2, #0
 8009854:	609a      	str	r2, [r3, #8]
}
 8009856:	bf00      	nop
 8009858:	3724      	adds	r7, #36	; 0x24
 800985a:	46bd      	mov	sp, r7
 800985c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009860:	4770      	bx	lr
 8009862:	bf00      	nop
 8009864:	58024400 	.word	0x58024400
 8009868:	03d09000 	.word	0x03d09000
 800986c:	46000000 	.word	0x46000000
 8009870:	4c742400 	.word	0x4c742400
 8009874:	4a742400 	.word	0x4a742400
 8009878:	4bbebc20 	.word	0x4bbebc20

0800987c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 800987c:	b480      	push	{r7}
 800987e:	b089      	sub	sp, #36	; 0x24
 8009880:	af00      	add	r7, sp, #0
 8009882:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009884:	4ba1      	ldr	r3, [pc, #644]	; (8009b0c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009886:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009888:	f003 0303 	and.w	r3, r3, #3
 800988c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800988e:	4b9f      	ldr	r3, [pc, #636]	; (8009b0c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009890:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009892:	0d1b      	lsrs	r3, r3, #20
 8009894:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009898:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800989a:	4b9c      	ldr	r3, [pc, #624]	; (8009b0c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800989c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800989e:	0a1b      	lsrs	r3, r3, #8
 80098a0:	f003 0301 	and.w	r3, r3, #1
 80098a4:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 80098a6:	4b99      	ldr	r3, [pc, #612]	; (8009b0c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80098a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80098aa:	08db      	lsrs	r3, r3, #3
 80098ac:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80098b0:	693a      	ldr	r2, [r7, #16]
 80098b2:	fb02 f303 	mul.w	r3, r2, r3
 80098b6:	ee07 3a90 	vmov	s15, r3
 80098ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80098be:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80098c2:	697b      	ldr	r3, [r7, #20]
 80098c4:	2b00      	cmp	r3, #0
 80098c6:	f000 8111 	beq.w	8009aec <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80098ca:	69bb      	ldr	r3, [r7, #24]
 80098cc:	2b02      	cmp	r3, #2
 80098ce:	f000 8083 	beq.w	80099d8 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80098d2:	69bb      	ldr	r3, [r7, #24]
 80098d4:	2b02      	cmp	r3, #2
 80098d6:	f200 80a1 	bhi.w	8009a1c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80098da:	69bb      	ldr	r3, [r7, #24]
 80098dc:	2b00      	cmp	r3, #0
 80098de:	d003      	beq.n	80098e8 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80098e0:	69bb      	ldr	r3, [r7, #24]
 80098e2:	2b01      	cmp	r3, #1
 80098e4:	d056      	beq.n	8009994 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80098e6:	e099      	b.n	8009a1c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80098e8:	4b88      	ldr	r3, [pc, #544]	; (8009b0c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80098ea:	681b      	ldr	r3, [r3, #0]
 80098ec:	f003 0320 	and.w	r3, r3, #32
 80098f0:	2b00      	cmp	r3, #0
 80098f2:	d02d      	beq.n	8009950 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80098f4:	4b85      	ldr	r3, [pc, #532]	; (8009b0c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80098f6:	681b      	ldr	r3, [r3, #0]
 80098f8:	08db      	lsrs	r3, r3, #3
 80098fa:	f003 0303 	and.w	r3, r3, #3
 80098fe:	4a84      	ldr	r2, [pc, #528]	; (8009b10 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8009900:	fa22 f303 	lsr.w	r3, r2, r3
 8009904:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009906:	68bb      	ldr	r3, [r7, #8]
 8009908:	ee07 3a90 	vmov	s15, r3
 800990c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009910:	697b      	ldr	r3, [r7, #20]
 8009912:	ee07 3a90 	vmov	s15, r3
 8009916:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800991a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800991e:	4b7b      	ldr	r3, [pc, #492]	; (8009b0c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009920:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009922:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009926:	ee07 3a90 	vmov	s15, r3
 800992a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800992e:	ed97 6a03 	vldr	s12, [r7, #12]
 8009932:	eddf 5a78 	vldr	s11, [pc, #480]	; 8009b14 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009936:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800993a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800993e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009942:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009946:	ee67 7a27 	vmul.f32	s15, s14, s15
 800994a:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800994e:	e087      	b.n	8009a60 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009950:	697b      	ldr	r3, [r7, #20]
 8009952:	ee07 3a90 	vmov	s15, r3
 8009956:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800995a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8009b18 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800995e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009962:	4b6a      	ldr	r3, [pc, #424]	; (8009b0c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009964:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009966:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800996a:	ee07 3a90 	vmov	s15, r3
 800996e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009972:	ed97 6a03 	vldr	s12, [r7, #12]
 8009976:	eddf 5a67 	vldr	s11, [pc, #412]	; 8009b14 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800997a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800997e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009982:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009986:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800998a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800998e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009992:	e065      	b.n	8009a60 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009994:	697b      	ldr	r3, [r7, #20]
 8009996:	ee07 3a90 	vmov	s15, r3
 800999a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800999e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8009b1c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80099a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80099a6:	4b59      	ldr	r3, [pc, #356]	; (8009b0c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80099a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80099aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80099ae:	ee07 3a90 	vmov	s15, r3
 80099b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80099b6:	ed97 6a03 	vldr	s12, [r7, #12]
 80099ba:	eddf 5a56 	vldr	s11, [pc, #344]	; 8009b14 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80099be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80099c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80099c6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80099ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80099ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80099d2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80099d6:	e043      	b.n	8009a60 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80099d8:	697b      	ldr	r3, [r7, #20]
 80099da:	ee07 3a90 	vmov	s15, r3
 80099de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80099e2:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8009b20 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80099e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80099ea:	4b48      	ldr	r3, [pc, #288]	; (8009b0c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80099ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80099ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80099f2:	ee07 3a90 	vmov	s15, r3
 80099f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80099fa:	ed97 6a03 	vldr	s12, [r7, #12]
 80099fe:	eddf 5a45 	vldr	s11, [pc, #276]	; 8009b14 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009a02:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009a06:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009a0a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009a0e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009a12:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009a16:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009a1a:	e021      	b.n	8009a60 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009a1c:	697b      	ldr	r3, [r7, #20]
 8009a1e:	ee07 3a90 	vmov	s15, r3
 8009a22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009a26:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8009b1c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8009a2a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009a2e:	4b37      	ldr	r3, [pc, #220]	; (8009b0c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009a30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a32:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009a36:	ee07 3a90 	vmov	s15, r3
 8009a3a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009a3e:	ed97 6a03 	vldr	s12, [r7, #12]
 8009a42:	eddf 5a34 	vldr	s11, [pc, #208]	; 8009b14 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009a46:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009a4a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009a4e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009a52:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009a56:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009a5a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009a5e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8009a60:	4b2a      	ldr	r3, [pc, #168]	; (8009b0c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009a62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a64:	0a5b      	lsrs	r3, r3, #9
 8009a66:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009a6a:	ee07 3a90 	vmov	s15, r3
 8009a6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009a72:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009a76:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009a7a:	edd7 6a07 	vldr	s13, [r7, #28]
 8009a7e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009a82:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009a86:	ee17 2a90 	vmov	r2, s15
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8009a8e:	4b1f      	ldr	r3, [pc, #124]	; (8009b0c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009a90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a92:	0c1b      	lsrs	r3, r3, #16
 8009a94:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009a98:	ee07 3a90 	vmov	s15, r3
 8009a9c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009aa0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009aa4:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009aa8:	edd7 6a07 	vldr	s13, [r7, #28]
 8009aac:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009ab0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009ab4:	ee17 2a90 	vmov	r2, s15
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8009abc:	4b13      	ldr	r3, [pc, #76]	; (8009b0c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009abe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ac0:	0e1b      	lsrs	r3, r3, #24
 8009ac2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009ac6:	ee07 3a90 	vmov	s15, r3
 8009aca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009ace:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009ad2:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009ad6:	edd7 6a07 	vldr	s13, [r7, #28]
 8009ada:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009ade:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009ae2:	ee17 2a90 	vmov	r2, s15
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8009aea:	e008      	b.n	8009afe <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	2200      	movs	r2, #0
 8009af0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	2200      	movs	r2, #0
 8009af6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	2200      	movs	r2, #0
 8009afc:	609a      	str	r2, [r3, #8]
}
 8009afe:	bf00      	nop
 8009b00:	3724      	adds	r7, #36	; 0x24
 8009b02:	46bd      	mov	sp, r7
 8009b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b08:	4770      	bx	lr
 8009b0a:	bf00      	nop
 8009b0c:	58024400 	.word	0x58024400
 8009b10:	03d09000 	.word	0x03d09000
 8009b14:	46000000 	.word	0x46000000
 8009b18:	4c742400 	.word	0x4c742400
 8009b1c:	4a742400 	.word	0x4a742400
 8009b20:	4bbebc20 	.word	0x4bbebc20

08009b24 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8009b24:	b580      	push	{r7, lr}
 8009b26:	b084      	sub	sp, #16
 8009b28:	af00      	add	r7, sp, #0
 8009b2a:	6078      	str	r0, [r7, #4]
 8009b2c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009b2e:	2300      	movs	r3, #0
 8009b30:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8009b32:	4b53      	ldr	r3, [pc, #332]	; (8009c80 <RCCEx_PLL2_Config+0x15c>)
 8009b34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009b36:	f003 0303 	and.w	r3, r3, #3
 8009b3a:	2b03      	cmp	r3, #3
 8009b3c:	d101      	bne.n	8009b42 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8009b3e:	2301      	movs	r3, #1
 8009b40:	e099      	b.n	8009c76 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8009b42:	4b4f      	ldr	r3, [pc, #316]	; (8009c80 <RCCEx_PLL2_Config+0x15c>)
 8009b44:	681b      	ldr	r3, [r3, #0]
 8009b46:	4a4e      	ldr	r2, [pc, #312]	; (8009c80 <RCCEx_PLL2_Config+0x15c>)
 8009b48:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8009b4c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009b4e:	f7fc fd13 	bl	8006578 <HAL_GetTick>
 8009b52:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8009b54:	e008      	b.n	8009b68 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8009b56:	f7fc fd0f 	bl	8006578 <HAL_GetTick>
 8009b5a:	4602      	mov	r2, r0
 8009b5c:	68bb      	ldr	r3, [r7, #8]
 8009b5e:	1ad3      	subs	r3, r2, r3
 8009b60:	2b02      	cmp	r3, #2
 8009b62:	d901      	bls.n	8009b68 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8009b64:	2303      	movs	r3, #3
 8009b66:	e086      	b.n	8009c76 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8009b68:	4b45      	ldr	r3, [pc, #276]	; (8009c80 <RCCEx_PLL2_Config+0x15c>)
 8009b6a:	681b      	ldr	r3, [r3, #0]
 8009b6c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009b70:	2b00      	cmp	r3, #0
 8009b72:	d1f0      	bne.n	8009b56 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8009b74:	4b42      	ldr	r3, [pc, #264]	; (8009c80 <RCCEx_PLL2_Config+0x15c>)
 8009b76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009b78:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	681b      	ldr	r3, [r3, #0]
 8009b80:	031b      	lsls	r3, r3, #12
 8009b82:	493f      	ldr	r1, [pc, #252]	; (8009c80 <RCCEx_PLL2_Config+0x15c>)
 8009b84:	4313      	orrs	r3, r2
 8009b86:	628b      	str	r3, [r1, #40]	; 0x28
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	685b      	ldr	r3, [r3, #4]
 8009b8c:	3b01      	subs	r3, #1
 8009b8e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	689b      	ldr	r3, [r3, #8]
 8009b96:	3b01      	subs	r3, #1
 8009b98:	025b      	lsls	r3, r3, #9
 8009b9a:	b29b      	uxth	r3, r3
 8009b9c:	431a      	orrs	r2, r3
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	68db      	ldr	r3, [r3, #12]
 8009ba2:	3b01      	subs	r3, #1
 8009ba4:	041b      	lsls	r3, r3, #16
 8009ba6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8009baa:	431a      	orrs	r2, r3
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	691b      	ldr	r3, [r3, #16]
 8009bb0:	3b01      	subs	r3, #1
 8009bb2:	061b      	lsls	r3, r3, #24
 8009bb4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8009bb8:	4931      	ldr	r1, [pc, #196]	; (8009c80 <RCCEx_PLL2_Config+0x15c>)
 8009bba:	4313      	orrs	r3, r2
 8009bbc:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8009bbe:	4b30      	ldr	r3, [pc, #192]	; (8009c80 <RCCEx_PLL2_Config+0x15c>)
 8009bc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009bc2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	695b      	ldr	r3, [r3, #20]
 8009bca:	492d      	ldr	r1, [pc, #180]	; (8009c80 <RCCEx_PLL2_Config+0x15c>)
 8009bcc:	4313      	orrs	r3, r2
 8009bce:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8009bd0:	4b2b      	ldr	r3, [pc, #172]	; (8009c80 <RCCEx_PLL2_Config+0x15c>)
 8009bd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009bd4:	f023 0220 	bic.w	r2, r3, #32
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	699b      	ldr	r3, [r3, #24]
 8009bdc:	4928      	ldr	r1, [pc, #160]	; (8009c80 <RCCEx_PLL2_Config+0x15c>)
 8009bde:	4313      	orrs	r3, r2
 8009be0:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8009be2:	4b27      	ldr	r3, [pc, #156]	; (8009c80 <RCCEx_PLL2_Config+0x15c>)
 8009be4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009be6:	4a26      	ldr	r2, [pc, #152]	; (8009c80 <RCCEx_PLL2_Config+0x15c>)
 8009be8:	f023 0310 	bic.w	r3, r3, #16
 8009bec:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8009bee:	4b24      	ldr	r3, [pc, #144]	; (8009c80 <RCCEx_PLL2_Config+0x15c>)
 8009bf0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009bf2:	4b24      	ldr	r3, [pc, #144]	; (8009c84 <RCCEx_PLL2_Config+0x160>)
 8009bf4:	4013      	ands	r3, r2
 8009bf6:	687a      	ldr	r2, [r7, #4]
 8009bf8:	69d2      	ldr	r2, [r2, #28]
 8009bfa:	00d2      	lsls	r2, r2, #3
 8009bfc:	4920      	ldr	r1, [pc, #128]	; (8009c80 <RCCEx_PLL2_Config+0x15c>)
 8009bfe:	4313      	orrs	r3, r2
 8009c00:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8009c02:	4b1f      	ldr	r3, [pc, #124]	; (8009c80 <RCCEx_PLL2_Config+0x15c>)
 8009c04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c06:	4a1e      	ldr	r2, [pc, #120]	; (8009c80 <RCCEx_PLL2_Config+0x15c>)
 8009c08:	f043 0310 	orr.w	r3, r3, #16
 8009c0c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8009c0e:	683b      	ldr	r3, [r7, #0]
 8009c10:	2b00      	cmp	r3, #0
 8009c12:	d106      	bne.n	8009c22 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8009c14:	4b1a      	ldr	r3, [pc, #104]	; (8009c80 <RCCEx_PLL2_Config+0x15c>)
 8009c16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c18:	4a19      	ldr	r2, [pc, #100]	; (8009c80 <RCCEx_PLL2_Config+0x15c>)
 8009c1a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009c1e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009c20:	e00f      	b.n	8009c42 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8009c22:	683b      	ldr	r3, [r7, #0]
 8009c24:	2b01      	cmp	r3, #1
 8009c26:	d106      	bne.n	8009c36 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8009c28:	4b15      	ldr	r3, [pc, #84]	; (8009c80 <RCCEx_PLL2_Config+0x15c>)
 8009c2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c2c:	4a14      	ldr	r2, [pc, #80]	; (8009c80 <RCCEx_PLL2_Config+0x15c>)
 8009c2e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009c32:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009c34:	e005      	b.n	8009c42 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8009c36:	4b12      	ldr	r3, [pc, #72]	; (8009c80 <RCCEx_PLL2_Config+0x15c>)
 8009c38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c3a:	4a11      	ldr	r2, [pc, #68]	; (8009c80 <RCCEx_PLL2_Config+0x15c>)
 8009c3c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8009c40:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8009c42:	4b0f      	ldr	r3, [pc, #60]	; (8009c80 <RCCEx_PLL2_Config+0x15c>)
 8009c44:	681b      	ldr	r3, [r3, #0]
 8009c46:	4a0e      	ldr	r2, [pc, #56]	; (8009c80 <RCCEx_PLL2_Config+0x15c>)
 8009c48:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8009c4c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009c4e:	f7fc fc93 	bl	8006578 <HAL_GetTick>
 8009c52:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8009c54:	e008      	b.n	8009c68 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8009c56:	f7fc fc8f 	bl	8006578 <HAL_GetTick>
 8009c5a:	4602      	mov	r2, r0
 8009c5c:	68bb      	ldr	r3, [r7, #8]
 8009c5e:	1ad3      	subs	r3, r2, r3
 8009c60:	2b02      	cmp	r3, #2
 8009c62:	d901      	bls.n	8009c68 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8009c64:	2303      	movs	r3, #3
 8009c66:	e006      	b.n	8009c76 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8009c68:	4b05      	ldr	r3, [pc, #20]	; (8009c80 <RCCEx_PLL2_Config+0x15c>)
 8009c6a:	681b      	ldr	r3, [r3, #0]
 8009c6c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009c70:	2b00      	cmp	r3, #0
 8009c72:	d0f0      	beq.n	8009c56 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8009c74:	7bfb      	ldrb	r3, [r7, #15]
}
 8009c76:	4618      	mov	r0, r3
 8009c78:	3710      	adds	r7, #16
 8009c7a:	46bd      	mov	sp, r7
 8009c7c:	bd80      	pop	{r7, pc}
 8009c7e:	bf00      	nop
 8009c80:	58024400 	.word	0x58024400
 8009c84:	ffff0007 	.word	0xffff0007

08009c88 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8009c88:	b580      	push	{r7, lr}
 8009c8a:	b084      	sub	sp, #16
 8009c8c:	af00      	add	r7, sp, #0
 8009c8e:	6078      	str	r0, [r7, #4]
 8009c90:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009c92:	2300      	movs	r3, #0
 8009c94:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8009c96:	4b53      	ldr	r3, [pc, #332]	; (8009de4 <RCCEx_PLL3_Config+0x15c>)
 8009c98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009c9a:	f003 0303 	and.w	r3, r3, #3
 8009c9e:	2b03      	cmp	r3, #3
 8009ca0:	d101      	bne.n	8009ca6 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8009ca2:	2301      	movs	r3, #1
 8009ca4:	e099      	b.n	8009dda <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8009ca6:	4b4f      	ldr	r3, [pc, #316]	; (8009de4 <RCCEx_PLL3_Config+0x15c>)
 8009ca8:	681b      	ldr	r3, [r3, #0]
 8009caa:	4a4e      	ldr	r2, [pc, #312]	; (8009de4 <RCCEx_PLL3_Config+0x15c>)
 8009cac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009cb0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009cb2:	f7fc fc61 	bl	8006578 <HAL_GetTick>
 8009cb6:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009cb8:	e008      	b.n	8009ccc <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8009cba:	f7fc fc5d 	bl	8006578 <HAL_GetTick>
 8009cbe:	4602      	mov	r2, r0
 8009cc0:	68bb      	ldr	r3, [r7, #8]
 8009cc2:	1ad3      	subs	r3, r2, r3
 8009cc4:	2b02      	cmp	r3, #2
 8009cc6:	d901      	bls.n	8009ccc <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8009cc8:	2303      	movs	r3, #3
 8009cca:	e086      	b.n	8009dda <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009ccc:	4b45      	ldr	r3, [pc, #276]	; (8009de4 <RCCEx_PLL3_Config+0x15c>)
 8009cce:	681b      	ldr	r3, [r3, #0]
 8009cd0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009cd4:	2b00      	cmp	r3, #0
 8009cd6:	d1f0      	bne.n	8009cba <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8009cd8:	4b42      	ldr	r3, [pc, #264]	; (8009de4 <RCCEx_PLL3_Config+0x15c>)
 8009cda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009cdc:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	681b      	ldr	r3, [r3, #0]
 8009ce4:	051b      	lsls	r3, r3, #20
 8009ce6:	493f      	ldr	r1, [pc, #252]	; (8009de4 <RCCEx_PLL3_Config+0x15c>)
 8009ce8:	4313      	orrs	r3, r2
 8009cea:	628b      	str	r3, [r1, #40]	; 0x28
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	685b      	ldr	r3, [r3, #4]
 8009cf0:	3b01      	subs	r3, #1
 8009cf2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	689b      	ldr	r3, [r3, #8]
 8009cfa:	3b01      	subs	r3, #1
 8009cfc:	025b      	lsls	r3, r3, #9
 8009cfe:	b29b      	uxth	r3, r3
 8009d00:	431a      	orrs	r2, r3
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	68db      	ldr	r3, [r3, #12]
 8009d06:	3b01      	subs	r3, #1
 8009d08:	041b      	lsls	r3, r3, #16
 8009d0a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8009d0e:	431a      	orrs	r2, r3
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	691b      	ldr	r3, [r3, #16]
 8009d14:	3b01      	subs	r3, #1
 8009d16:	061b      	lsls	r3, r3, #24
 8009d18:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8009d1c:	4931      	ldr	r1, [pc, #196]	; (8009de4 <RCCEx_PLL3_Config+0x15c>)
 8009d1e:	4313      	orrs	r3, r2
 8009d20:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8009d22:	4b30      	ldr	r3, [pc, #192]	; (8009de4 <RCCEx_PLL3_Config+0x15c>)
 8009d24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d26:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	695b      	ldr	r3, [r3, #20]
 8009d2e:	492d      	ldr	r1, [pc, #180]	; (8009de4 <RCCEx_PLL3_Config+0x15c>)
 8009d30:	4313      	orrs	r3, r2
 8009d32:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8009d34:	4b2b      	ldr	r3, [pc, #172]	; (8009de4 <RCCEx_PLL3_Config+0x15c>)
 8009d36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d38:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	699b      	ldr	r3, [r3, #24]
 8009d40:	4928      	ldr	r1, [pc, #160]	; (8009de4 <RCCEx_PLL3_Config+0x15c>)
 8009d42:	4313      	orrs	r3, r2
 8009d44:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8009d46:	4b27      	ldr	r3, [pc, #156]	; (8009de4 <RCCEx_PLL3_Config+0x15c>)
 8009d48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d4a:	4a26      	ldr	r2, [pc, #152]	; (8009de4 <RCCEx_PLL3_Config+0x15c>)
 8009d4c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009d50:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8009d52:	4b24      	ldr	r3, [pc, #144]	; (8009de4 <RCCEx_PLL3_Config+0x15c>)
 8009d54:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009d56:	4b24      	ldr	r3, [pc, #144]	; (8009de8 <RCCEx_PLL3_Config+0x160>)
 8009d58:	4013      	ands	r3, r2
 8009d5a:	687a      	ldr	r2, [r7, #4]
 8009d5c:	69d2      	ldr	r2, [r2, #28]
 8009d5e:	00d2      	lsls	r2, r2, #3
 8009d60:	4920      	ldr	r1, [pc, #128]	; (8009de4 <RCCEx_PLL3_Config+0x15c>)
 8009d62:	4313      	orrs	r3, r2
 8009d64:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8009d66:	4b1f      	ldr	r3, [pc, #124]	; (8009de4 <RCCEx_PLL3_Config+0x15c>)
 8009d68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d6a:	4a1e      	ldr	r2, [pc, #120]	; (8009de4 <RCCEx_PLL3_Config+0x15c>)
 8009d6c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009d70:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8009d72:	683b      	ldr	r3, [r7, #0]
 8009d74:	2b00      	cmp	r3, #0
 8009d76:	d106      	bne.n	8009d86 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8009d78:	4b1a      	ldr	r3, [pc, #104]	; (8009de4 <RCCEx_PLL3_Config+0x15c>)
 8009d7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d7c:	4a19      	ldr	r2, [pc, #100]	; (8009de4 <RCCEx_PLL3_Config+0x15c>)
 8009d7e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8009d82:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009d84:	e00f      	b.n	8009da6 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8009d86:	683b      	ldr	r3, [r7, #0]
 8009d88:	2b01      	cmp	r3, #1
 8009d8a:	d106      	bne.n	8009d9a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8009d8c:	4b15      	ldr	r3, [pc, #84]	; (8009de4 <RCCEx_PLL3_Config+0x15c>)
 8009d8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d90:	4a14      	ldr	r2, [pc, #80]	; (8009de4 <RCCEx_PLL3_Config+0x15c>)
 8009d92:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8009d96:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009d98:	e005      	b.n	8009da6 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8009d9a:	4b12      	ldr	r3, [pc, #72]	; (8009de4 <RCCEx_PLL3_Config+0x15c>)
 8009d9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d9e:	4a11      	ldr	r2, [pc, #68]	; (8009de4 <RCCEx_PLL3_Config+0x15c>)
 8009da0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009da4:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8009da6:	4b0f      	ldr	r3, [pc, #60]	; (8009de4 <RCCEx_PLL3_Config+0x15c>)
 8009da8:	681b      	ldr	r3, [r3, #0]
 8009daa:	4a0e      	ldr	r2, [pc, #56]	; (8009de4 <RCCEx_PLL3_Config+0x15c>)
 8009dac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009db0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009db2:	f7fc fbe1 	bl	8006578 <HAL_GetTick>
 8009db6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009db8:	e008      	b.n	8009dcc <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8009dba:	f7fc fbdd 	bl	8006578 <HAL_GetTick>
 8009dbe:	4602      	mov	r2, r0
 8009dc0:	68bb      	ldr	r3, [r7, #8]
 8009dc2:	1ad3      	subs	r3, r2, r3
 8009dc4:	2b02      	cmp	r3, #2
 8009dc6:	d901      	bls.n	8009dcc <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8009dc8:	2303      	movs	r3, #3
 8009dca:	e006      	b.n	8009dda <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009dcc:	4b05      	ldr	r3, [pc, #20]	; (8009de4 <RCCEx_PLL3_Config+0x15c>)
 8009dce:	681b      	ldr	r3, [r3, #0]
 8009dd0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009dd4:	2b00      	cmp	r3, #0
 8009dd6:	d0f0      	beq.n	8009dba <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8009dd8:	7bfb      	ldrb	r3, [r7, #15]
}
 8009dda:	4618      	mov	r0, r3
 8009ddc:	3710      	adds	r7, #16
 8009dde:	46bd      	mov	sp, r7
 8009de0:	bd80      	pop	{r7, pc}
 8009de2:	bf00      	nop
 8009de4:	58024400 	.word	0x58024400
 8009de8:	ffff0007 	.word	0xffff0007

08009dec <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009dec:	b580      	push	{r7, lr}
 8009dee:	b082      	sub	sp, #8
 8009df0:	af00      	add	r7, sp, #0
 8009df2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	2b00      	cmp	r3, #0
 8009df8:	d101      	bne.n	8009dfe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009dfa:	2301      	movs	r3, #1
 8009dfc:	e049      	b.n	8009e92 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009e04:	b2db      	uxtb	r3, r3
 8009e06:	2b00      	cmp	r3, #0
 8009e08:	d106      	bne.n	8009e18 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	2200      	movs	r2, #0
 8009e0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009e12:	6878      	ldr	r0, [r7, #4]
 8009e14:	f7fa f9ea 	bl	80041ec <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	2202      	movs	r2, #2
 8009e1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	681a      	ldr	r2, [r3, #0]
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	3304      	adds	r3, #4
 8009e28:	4619      	mov	r1, r3
 8009e2a:	4610      	mov	r0, r2
 8009e2c:	f001 f982 	bl	800b134 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	2201      	movs	r2, #1
 8009e34:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	2201      	movs	r2, #1
 8009e3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	2201      	movs	r2, #1
 8009e44:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	2201      	movs	r2, #1
 8009e4c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	2201      	movs	r2, #1
 8009e54:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	2201      	movs	r2, #1
 8009e5c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	2201      	movs	r2, #1
 8009e64:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	2201      	movs	r2, #1
 8009e6c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	2201      	movs	r2, #1
 8009e74:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	2201      	movs	r2, #1
 8009e7c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	2201      	movs	r2, #1
 8009e84:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	2201      	movs	r2, #1
 8009e8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009e90:	2300      	movs	r3, #0
}
 8009e92:	4618      	mov	r0, r3
 8009e94:	3708      	adds	r7, #8
 8009e96:	46bd      	mov	sp, r7
 8009e98:	bd80      	pop	{r7, pc}
	...

08009e9c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8009e9c:	b480      	push	{r7}
 8009e9e:	b085      	sub	sp, #20
 8009ea0:	af00      	add	r7, sp, #0
 8009ea2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009eaa:	b2db      	uxtb	r3, r3
 8009eac:	2b01      	cmp	r3, #1
 8009eae:	d001      	beq.n	8009eb4 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8009eb0:	2301      	movs	r3, #1
 8009eb2:	e04c      	b.n	8009f4e <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	2202      	movs	r2, #2
 8009eb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	681b      	ldr	r3, [r3, #0]
 8009ec0:	4a26      	ldr	r2, [pc, #152]	; (8009f5c <HAL_TIM_Base_Start+0xc0>)
 8009ec2:	4293      	cmp	r3, r2
 8009ec4:	d022      	beq.n	8009f0c <HAL_TIM_Base_Start+0x70>
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	681b      	ldr	r3, [r3, #0]
 8009eca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009ece:	d01d      	beq.n	8009f0c <HAL_TIM_Base_Start+0x70>
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	681b      	ldr	r3, [r3, #0]
 8009ed4:	4a22      	ldr	r2, [pc, #136]	; (8009f60 <HAL_TIM_Base_Start+0xc4>)
 8009ed6:	4293      	cmp	r3, r2
 8009ed8:	d018      	beq.n	8009f0c <HAL_TIM_Base_Start+0x70>
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	681b      	ldr	r3, [r3, #0]
 8009ede:	4a21      	ldr	r2, [pc, #132]	; (8009f64 <HAL_TIM_Base_Start+0xc8>)
 8009ee0:	4293      	cmp	r3, r2
 8009ee2:	d013      	beq.n	8009f0c <HAL_TIM_Base_Start+0x70>
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	681b      	ldr	r3, [r3, #0]
 8009ee8:	4a1f      	ldr	r2, [pc, #124]	; (8009f68 <HAL_TIM_Base_Start+0xcc>)
 8009eea:	4293      	cmp	r3, r2
 8009eec:	d00e      	beq.n	8009f0c <HAL_TIM_Base_Start+0x70>
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	681b      	ldr	r3, [r3, #0]
 8009ef2:	4a1e      	ldr	r2, [pc, #120]	; (8009f6c <HAL_TIM_Base_Start+0xd0>)
 8009ef4:	4293      	cmp	r3, r2
 8009ef6:	d009      	beq.n	8009f0c <HAL_TIM_Base_Start+0x70>
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	681b      	ldr	r3, [r3, #0]
 8009efc:	4a1c      	ldr	r2, [pc, #112]	; (8009f70 <HAL_TIM_Base_Start+0xd4>)
 8009efe:	4293      	cmp	r3, r2
 8009f00:	d004      	beq.n	8009f0c <HAL_TIM_Base_Start+0x70>
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	681b      	ldr	r3, [r3, #0]
 8009f06:	4a1b      	ldr	r2, [pc, #108]	; (8009f74 <HAL_TIM_Base_Start+0xd8>)
 8009f08:	4293      	cmp	r3, r2
 8009f0a:	d115      	bne.n	8009f38 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	681b      	ldr	r3, [r3, #0]
 8009f10:	689a      	ldr	r2, [r3, #8]
 8009f12:	4b19      	ldr	r3, [pc, #100]	; (8009f78 <HAL_TIM_Base_Start+0xdc>)
 8009f14:	4013      	ands	r3, r2
 8009f16:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009f18:	68fb      	ldr	r3, [r7, #12]
 8009f1a:	2b06      	cmp	r3, #6
 8009f1c:	d015      	beq.n	8009f4a <HAL_TIM_Base_Start+0xae>
 8009f1e:	68fb      	ldr	r3, [r7, #12]
 8009f20:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009f24:	d011      	beq.n	8009f4a <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	681b      	ldr	r3, [r3, #0]
 8009f2a:	681a      	ldr	r2, [r3, #0]
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	681b      	ldr	r3, [r3, #0]
 8009f30:	f042 0201 	orr.w	r2, r2, #1
 8009f34:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009f36:	e008      	b.n	8009f4a <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	681b      	ldr	r3, [r3, #0]
 8009f3c:	681a      	ldr	r2, [r3, #0]
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	681b      	ldr	r3, [r3, #0]
 8009f42:	f042 0201 	orr.w	r2, r2, #1
 8009f46:	601a      	str	r2, [r3, #0]
 8009f48:	e000      	b.n	8009f4c <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009f4a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8009f4c:	2300      	movs	r3, #0
}
 8009f4e:	4618      	mov	r0, r3
 8009f50:	3714      	adds	r7, #20
 8009f52:	46bd      	mov	sp, r7
 8009f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f58:	4770      	bx	lr
 8009f5a:	bf00      	nop
 8009f5c:	40010000 	.word	0x40010000
 8009f60:	40000400 	.word	0x40000400
 8009f64:	40000800 	.word	0x40000800
 8009f68:	40000c00 	.word	0x40000c00
 8009f6c:	40010400 	.word	0x40010400
 8009f70:	40001800 	.word	0x40001800
 8009f74:	40014000 	.word	0x40014000
 8009f78:	00010007 	.word	0x00010007

08009f7c <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8009f7c:	b480      	push	{r7}
 8009f7e:	b083      	sub	sp, #12
 8009f80:	af00      	add	r7, sp, #0
 8009f82:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	681b      	ldr	r3, [r3, #0]
 8009f88:	6a1a      	ldr	r2, [r3, #32]
 8009f8a:	f241 1311 	movw	r3, #4369	; 0x1111
 8009f8e:	4013      	ands	r3, r2
 8009f90:	2b00      	cmp	r3, #0
 8009f92:	d10f      	bne.n	8009fb4 <HAL_TIM_Base_Stop+0x38>
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	681b      	ldr	r3, [r3, #0]
 8009f98:	6a1a      	ldr	r2, [r3, #32]
 8009f9a:	f240 4344 	movw	r3, #1092	; 0x444
 8009f9e:	4013      	ands	r3, r2
 8009fa0:	2b00      	cmp	r3, #0
 8009fa2:	d107      	bne.n	8009fb4 <HAL_TIM_Base_Stop+0x38>
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	681b      	ldr	r3, [r3, #0]
 8009fa8:	681a      	ldr	r2, [r3, #0]
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	681b      	ldr	r3, [r3, #0]
 8009fae:	f022 0201 	bic.w	r2, r2, #1
 8009fb2:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	2201      	movs	r2, #1
 8009fb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8009fbc:	2300      	movs	r3, #0
}
 8009fbe:	4618      	mov	r0, r3
 8009fc0:	370c      	adds	r7, #12
 8009fc2:	46bd      	mov	sp, r7
 8009fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fc8:	4770      	bx	lr
	...

08009fcc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8009fcc:	b480      	push	{r7}
 8009fce:	b085      	sub	sp, #20
 8009fd0:	af00      	add	r7, sp, #0
 8009fd2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009fda:	b2db      	uxtb	r3, r3
 8009fdc:	2b01      	cmp	r3, #1
 8009fde:	d001      	beq.n	8009fe4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8009fe0:	2301      	movs	r3, #1
 8009fe2:	e054      	b.n	800a08e <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	2202      	movs	r2, #2
 8009fe8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	681b      	ldr	r3, [r3, #0]
 8009ff0:	68da      	ldr	r2, [r3, #12]
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	681b      	ldr	r3, [r3, #0]
 8009ff6:	f042 0201 	orr.w	r2, r2, #1
 8009ffa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	681b      	ldr	r3, [r3, #0]
 800a000:	4a26      	ldr	r2, [pc, #152]	; (800a09c <HAL_TIM_Base_Start_IT+0xd0>)
 800a002:	4293      	cmp	r3, r2
 800a004:	d022      	beq.n	800a04c <HAL_TIM_Base_Start_IT+0x80>
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	681b      	ldr	r3, [r3, #0]
 800a00a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a00e:	d01d      	beq.n	800a04c <HAL_TIM_Base_Start_IT+0x80>
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	681b      	ldr	r3, [r3, #0]
 800a014:	4a22      	ldr	r2, [pc, #136]	; (800a0a0 <HAL_TIM_Base_Start_IT+0xd4>)
 800a016:	4293      	cmp	r3, r2
 800a018:	d018      	beq.n	800a04c <HAL_TIM_Base_Start_IT+0x80>
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	681b      	ldr	r3, [r3, #0]
 800a01e:	4a21      	ldr	r2, [pc, #132]	; (800a0a4 <HAL_TIM_Base_Start_IT+0xd8>)
 800a020:	4293      	cmp	r3, r2
 800a022:	d013      	beq.n	800a04c <HAL_TIM_Base_Start_IT+0x80>
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	681b      	ldr	r3, [r3, #0]
 800a028:	4a1f      	ldr	r2, [pc, #124]	; (800a0a8 <HAL_TIM_Base_Start_IT+0xdc>)
 800a02a:	4293      	cmp	r3, r2
 800a02c:	d00e      	beq.n	800a04c <HAL_TIM_Base_Start_IT+0x80>
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	681b      	ldr	r3, [r3, #0]
 800a032:	4a1e      	ldr	r2, [pc, #120]	; (800a0ac <HAL_TIM_Base_Start_IT+0xe0>)
 800a034:	4293      	cmp	r3, r2
 800a036:	d009      	beq.n	800a04c <HAL_TIM_Base_Start_IT+0x80>
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	681b      	ldr	r3, [r3, #0]
 800a03c:	4a1c      	ldr	r2, [pc, #112]	; (800a0b0 <HAL_TIM_Base_Start_IT+0xe4>)
 800a03e:	4293      	cmp	r3, r2
 800a040:	d004      	beq.n	800a04c <HAL_TIM_Base_Start_IT+0x80>
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	681b      	ldr	r3, [r3, #0]
 800a046:	4a1b      	ldr	r2, [pc, #108]	; (800a0b4 <HAL_TIM_Base_Start_IT+0xe8>)
 800a048:	4293      	cmp	r3, r2
 800a04a:	d115      	bne.n	800a078 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	681b      	ldr	r3, [r3, #0]
 800a050:	689a      	ldr	r2, [r3, #8]
 800a052:	4b19      	ldr	r3, [pc, #100]	; (800a0b8 <HAL_TIM_Base_Start_IT+0xec>)
 800a054:	4013      	ands	r3, r2
 800a056:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a058:	68fb      	ldr	r3, [r7, #12]
 800a05a:	2b06      	cmp	r3, #6
 800a05c:	d015      	beq.n	800a08a <HAL_TIM_Base_Start_IT+0xbe>
 800a05e:	68fb      	ldr	r3, [r7, #12]
 800a060:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a064:	d011      	beq.n	800a08a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	681b      	ldr	r3, [r3, #0]
 800a06a:	681a      	ldr	r2, [r3, #0]
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	681b      	ldr	r3, [r3, #0]
 800a070:	f042 0201 	orr.w	r2, r2, #1
 800a074:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a076:	e008      	b.n	800a08a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	681b      	ldr	r3, [r3, #0]
 800a07c:	681a      	ldr	r2, [r3, #0]
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	681b      	ldr	r3, [r3, #0]
 800a082:	f042 0201 	orr.w	r2, r2, #1
 800a086:	601a      	str	r2, [r3, #0]
 800a088:	e000      	b.n	800a08c <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a08a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800a08c:	2300      	movs	r3, #0
}
 800a08e:	4618      	mov	r0, r3
 800a090:	3714      	adds	r7, #20
 800a092:	46bd      	mov	sp, r7
 800a094:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a098:	4770      	bx	lr
 800a09a:	bf00      	nop
 800a09c:	40010000 	.word	0x40010000
 800a0a0:	40000400 	.word	0x40000400
 800a0a4:	40000800 	.word	0x40000800
 800a0a8:	40000c00 	.word	0x40000c00
 800a0ac:	40010400 	.word	0x40010400
 800a0b0:	40001800 	.word	0x40001800
 800a0b4:	40014000 	.word	0x40014000
 800a0b8:	00010007 	.word	0x00010007

0800a0bc <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800a0bc:	b480      	push	{r7}
 800a0be:	b083      	sub	sp, #12
 800a0c0:	af00      	add	r7, sp, #0
 800a0c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	681b      	ldr	r3, [r3, #0]
 800a0c8:	68da      	ldr	r2, [r3, #12]
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	681b      	ldr	r3, [r3, #0]
 800a0ce:	f022 0201 	bic.w	r2, r2, #1
 800a0d2:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	681b      	ldr	r3, [r3, #0]
 800a0d8:	6a1a      	ldr	r2, [r3, #32]
 800a0da:	f241 1311 	movw	r3, #4369	; 0x1111
 800a0de:	4013      	ands	r3, r2
 800a0e0:	2b00      	cmp	r3, #0
 800a0e2:	d10f      	bne.n	800a104 <HAL_TIM_Base_Stop_IT+0x48>
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	681b      	ldr	r3, [r3, #0]
 800a0e8:	6a1a      	ldr	r2, [r3, #32]
 800a0ea:	f240 4344 	movw	r3, #1092	; 0x444
 800a0ee:	4013      	ands	r3, r2
 800a0f0:	2b00      	cmp	r3, #0
 800a0f2:	d107      	bne.n	800a104 <HAL_TIM_Base_Stop_IT+0x48>
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	681b      	ldr	r3, [r3, #0]
 800a0f8:	681a      	ldr	r2, [r3, #0]
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	681b      	ldr	r3, [r3, #0]
 800a0fe:	f022 0201 	bic.w	r2, r2, #1
 800a102:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	2201      	movs	r2, #1
 800a108:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800a10c:	2300      	movs	r3, #0
}
 800a10e:	4618      	mov	r0, r3
 800a110:	370c      	adds	r7, #12
 800a112:	46bd      	mov	sp, r7
 800a114:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a118:	4770      	bx	lr

0800a11a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800a11a:	b580      	push	{r7, lr}
 800a11c:	b082      	sub	sp, #8
 800a11e:	af00      	add	r7, sp, #0
 800a120:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	2b00      	cmp	r3, #0
 800a126:	d101      	bne.n	800a12c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800a128:	2301      	movs	r3, #1
 800a12a:	e049      	b.n	800a1c0 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a132:	b2db      	uxtb	r3, r3
 800a134:	2b00      	cmp	r3, #0
 800a136:	d106      	bne.n	800a146 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	2200      	movs	r2, #0
 800a13c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800a140:	6878      	ldr	r0, [r7, #4]
 800a142:	f000 f841 	bl	800a1c8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	2202      	movs	r2, #2
 800a14a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	681a      	ldr	r2, [r3, #0]
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	3304      	adds	r3, #4
 800a156:	4619      	mov	r1, r3
 800a158:	4610      	mov	r0, r2
 800a15a:	f000 ffeb 	bl	800b134 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	2201      	movs	r2, #1
 800a162:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a166:	687b      	ldr	r3, [r7, #4]
 800a168:	2201      	movs	r2, #1
 800a16a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	2201      	movs	r2, #1
 800a172:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	2201      	movs	r2, #1
 800a17a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	2201      	movs	r2, #1
 800a182:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	2201      	movs	r2, #1
 800a18a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	2201      	movs	r2, #1
 800a192:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	2201      	movs	r2, #1
 800a19a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	2201      	movs	r2, #1
 800a1a2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	2201      	movs	r2, #1
 800a1aa:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	2201      	movs	r2, #1
 800a1b2:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	2201      	movs	r2, #1
 800a1ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a1be:	2300      	movs	r3, #0
}
 800a1c0:	4618      	mov	r0, r3
 800a1c2:	3708      	adds	r7, #8
 800a1c4:	46bd      	mov	sp, r7
 800a1c6:	bd80      	pop	{r7, pc}

0800a1c8 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800a1c8:	b480      	push	{r7}
 800a1ca:	b083      	sub	sp, #12
 800a1cc:	af00      	add	r7, sp, #0
 800a1ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800a1d0:	bf00      	nop
 800a1d2:	370c      	adds	r7, #12
 800a1d4:	46bd      	mov	sp, r7
 800a1d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1da:	4770      	bx	lr

0800a1dc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800a1dc:	b580      	push	{r7, lr}
 800a1de:	b084      	sub	sp, #16
 800a1e0:	af00      	add	r7, sp, #0
 800a1e2:	6078      	str	r0, [r7, #4]
 800a1e4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800a1e6:	683b      	ldr	r3, [r7, #0]
 800a1e8:	2b00      	cmp	r3, #0
 800a1ea:	d109      	bne.n	800a200 <HAL_TIM_PWM_Start+0x24>
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a1f2:	b2db      	uxtb	r3, r3
 800a1f4:	2b01      	cmp	r3, #1
 800a1f6:	bf14      	ite	ne
 800a1f8:	2301      	movne	r3, #1
 800a1fa:	2300      	moveq	r3, #0
 800a1fc:	b2db      	uxtb	r3, r3
 800a1fe:	e03c      	b.n	800a27a <HAL_TIM_PWM_Start+0x9e>
 800a200:	683b      	ldr	r3, [r7, #0]
 800a202:	2b04      	cmp	r3, #4
 800a204:	d109      	bne.n	800a21a <HAL_TIM_PWM_Start+0x3e>
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800a20c:	b2db      	uxtb	r3, r3
 800a20e:	2b01      	cmp	r3, #1
 800a210:	bf14      	ite	ne
 800a212:	2301      	movne	r3, #1
 800a214:	2300      	moveq	r3, #0
 800a216:	b2db      	uxtb	r3, r3
 800a218:	e02f      	b.n	800a27a <HAL_TIM_PWM_Start+0x9e>
 800a21a:	683b      	ldr	r3, [r7, #0]
 800a21c:	2b08      	cmp	r3, #8
 800a21e:	d109      	bne.n	800a234 <HAL_TIM_PWM_Start+0x58>
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800a226:	b2db      	uxtb	r3, r3
 800a228:	2b01      	cmp	r3, #1
 800a22a:	bf14      	ite	ne
 800a22c:	2301      	movne	r3, #1
 800a22e:	2300      	moveq	r3, #0
 800a230:	b2db      	uxtb	r3, r3
 800a232:	e022      	b.n	800a27a <HAL_TIM_PWM_Start+0x9e>
 800a234:	683b      	ldr	r3, [r7, #0]
 800a236:	2b0c      	cmp	r3, #12
 800a238:	d109      	bne.n	800a24e <HAL_TIM_PWM_Start+0x72>
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a240:	b2db      	uxtb	r3, r3
 800a242:	2b01      	cmp	r3, #1
 800a244:	bf14      	ite	ne
 800a246:	2301      	movne	r3, #1
 800a248:	2300      	moveq	r3, #0
 800a24a:	b2db      	uxtb	r3, r3
 800a24c:	e015      	b.n	800a27a <HAL_TIM_PWM_Start+0x9e>
 800a24e:	683b      	ldr	r3, [r7, #0]
 800a250:	2b10      	cmp	r3, #16
 800a252:	d109      	bne.n	800a268 <HAL_TIM_PWM_Start+0x8c>
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800a25a:	b2db      	uxtb	r3, r3
 800a25c:	2b01      	cmp	r3, #1
 800a25e:	bf14      	ite	ne
 800a260:	2301      	movne	r3, #1
 800a262:	2300      	moveq	r3, #0
 800a264:	b2db      	uxtb	r3, r3
 800a266:	e008      	b.n	800a27a <HAL_TIM_PWM_Start+0x9e>
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800a26e:	b2db      	uxtb	r3, r3
 800a270:	2b01      	cmp	r3, #1
 800a272:	bf14      	ite	ne
 800a274:	2301      	movne	r3, #1
 800a276:	2300      	moveq	r3, #0
 800a278:	b2db      	uxtb	r3, r3
 800a27a:	2b00      	cmp	r3, #0
 800a27c:	d001      	beq.n	800a282 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800a27e:	2301      	movs	r3, #1
 800a280:	e0a1      	b.n	800a3c6 <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800a282:	683b      	ldr	r3, [r7, #0]
 800a284:	2b00      	cmp	r3, #0
 800a286:	d104      	bne.n	800a292 <HAL_TIM_PWM_Start+0xb6>
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	2202      	movs	r2, #2
 800a28c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a290:	e023      	b.n	800a2da <HAL_TIM_PWM_Start+0xfe>
 800a292:	683b      	ldr	r3, [r7, #0]
 800a294:	2b04      	cmp	r3, #4
 800a296:	d104      	bne.n	800a2a2 <HAL_TIM_PWM_Start+0xc6>
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	2202      	movs	r2, #2
 800a29c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a2a0:	e01b      	b.n	800a2da <HAL_TIM_PWM_Start+0xfe>
 800a2a2:	683b      	ldr	r3, [r7, #0]
 800a2a4:	2b08      	cmp	r3, #8
 800a2a6:	d104      	bne.n	800a2b2 <HAL_TIM_PWM_Start+0xd6>
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	2202      	movs	r2, #2
 800a2ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a2b0:	e013      	b.n	800a2da <HAL_TIM_PWM_Start+0xfe>
 800a2b2:	683b      	ldr	r3, [r7, #0]
 800a2b4:	2b0c      	cmp	r3, #12
 800a2b6:	d104      	bne.n	800a2c2 <HAL_TIM_PWM_Start+0xe6>
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	2202      	movs	r2, #2
 800a2bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a2c0:	e00b      	b.n	800a2da <HAL_TIM_PWM_Start+0xfe>
 800a2c2:	683b      	ldr	r3, [r7, #0]
 800a2c4:	2b10      	cmp	r3, #16
 800a2c6:	d104      	bne.n	800a2d2 <HAL_TIM_PWM_Start+0xf6>
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	2202      	movs	r2, #2
 800a2cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a2d0:	e003      	b.n	800a2da <HAL_TIM_PWM_Start+0xfe>
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	2202      	movs	r2, #2
 800a2d6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	681b      	ldr	r3, [r3, #0]
 800a2de:	2201      	movs	r2, #1
 800a2e0:	6839      	ldr	r1, [r7, #0]
 800a2e2:	4618      	mov	r0, r3
 800a2e4:	f001 fc5e 	bl	800bba4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	681b      	ldr	r3, [r3, #0]
 800a2ec:	4a38      	ldr	r2, [pc, #224]	; (800a3d0 <HAL_TIM_PWM_Start+0x1f4>)
 800a2ee:	4293      	cmp	r3, r2
 800a2f0:	d013      	beq.n	800a31a <HAL_TIM_PWM_Start+0x13e>
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	681b      	ldr	r3, [r3, #0]
 800a2f6:	4a37      	ldr	r2, [pc, #220]	; (800a3d4 <HAL_TIM_PWM_Start+0x1f8>)
 800a2f8:	4293      	cmp	r3, r2
 800a2fa:	d00e      	beq.n	800a31a <HAL_TIM_PWM_Start+0x13e>
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	681b      	ldr	r3, [r3, #0]
 800a300:	4a35      	ldr	r2, [pc, #212]	; (800a3d8 <HAL_TIM_PWM_Start+0x1fc>)
 800a302:	4293      	cmp	r3, r2
 800a304:	d009      	beq.n	800a31a <HAL_TIM_PWM_Start+0x13e>
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	681b      	ldr	r3, [r3, #0]
 800a30a:	4a34      	ldr	r2, [pc, #208]	; (800a3dc <HAL_TIM_PWM_Start+0x200>)
 800a30c:	4293      	cmp	r3, r2
 800a30e:	d004      	beq.n	800a31a <HAL_TIM_PWM_Start+0x13e>
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	681b      	ldr	r3, [r3, #0]
 800a314:	4a32      	ldr	r2, [pc, #200]	; (800a3e0 <HAL_TIM_PWM_Start+0x204>)
 800a316:	4293      	cmp	r3, r2
 800a318:	d101      	bne.n	800a31e <HAL_TIM_PWM_Start+0x142>
 800a31a:	2301      	movs	r3, #1
 800a31c:	e000      	b.n	800a320 <HAL_TIM_PWM_Start+0x144>
 800a31e:	2300      	movs	r3, #0
 800a320:	2b00      	cmp	r3, #0
 800a322:	d007      	beq.n	800a334 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	681b      	ldr	r3, [r3, #0]
 800a328:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	681b      	ldr	r3, [r3, #0]
 800a32e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800a332:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	681b      	ldr	r3, [r3, #0]
 800a338:	4a25      	ldr	r2, [pc, #148]	; (800a3d0 <HAL_TIM_PWM_Start+0x1f4>)
 800a33a:	4293      	cmp	r3, r2
 800a33c:	d022      	beq.n	800a384 <HAL_TIM_PWM_Start+0x1a8>
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	681b      	ldr	r3, [r3, #0]
 800a342:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a346:	d01d      	beq.n	800a384 <HAL_TIM_PWM_Start+0x1a8>
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	681b      	ldr	r3, [r3, #0]
 800a34c:	4a25      	ldr	r2, [pc, #148]	; (800a3e4 <HAL_TIM_PWM_Start+0x208>)
 800a34e:	4293      	cmp	r3, r2
 800a350:	d018      	beq.n	800a384 <HAL_TIM_PWM_Start+0x1a8>
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	681b      	ldr	r3, [r3, #0]
 800a356:	4a24      	ldr	r2, [pc, #144]	; (800a3e8 <HAL_TIM_PWM_Start+0x20c>)
 800a358:	4293      	cmp	r3, r2
 800a35a:	d013      	beq.n	800a384 <HAL_TIM_PWM_Start+0x1a8>
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	681b      	ldr	r3, [r3, #0]
 800a360:	4a22      	ldr	r2, [pc, #136]	; (800a3ec <HAL_TIM_PWM_Start+0x210>)
 800a362:	4293      	cmp	r3, r2
 800a364:	d00e      	beq.n	800a384 <HAL_TIM_PWM_Start+0x1a8>
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	681b      	ldr	r3, [r3, #0]
 800a36a:	4a1a      	ldr	r2, [pc, #104]	; (800a3d4 <HAL_TIM_PWM_Start+0x1f8>)
 800a36c:	4293      	cmp	r3, r2
 800a36e:	d009      	beq.n	800a384 <HAL_TIM_PWM_Start+0x1a8>
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	681b      	ldr	r3, [r3, #0]
 800a374:	4a1e      	ldr	r2, [pc, #120]	; (800a3f0 <HAL_TIM_PWM_Start+0x214>)
 800a376:	4293      	cmp	r3, r2
 800a378:	d004      	beq.n	800a384 <HAL_TIM_PWM_Start+0x1a8>
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	681b      	ldr	r3, [r3, #0]
 800a37e:	4a16      	ldr	r2, [pc, #88]	; (800a3d8 <HAL_TIM_PWM_Start+0x1fc>)
 800a380:	4293      	cmp	r3, r2
 800a382:	d115      	bne.n	800a3b0 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	681b      	ldr	r3, [r3, #0]
 800a388:	689a      	ldr	r2, [r3, #8]
 800a38a:	4b1a      	ldr	r3, [pc, #104]	; (800a3f4 <HAL_TIM_PWM_Start+0x218>)
 800a38c:	4013      	ands	r3, r2
 800a38e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a390:	68fb      	ldr	r3, [r7, #12]
 800a392:	2b06      	cmp	r3, #6
 800a394:	d015      	beq.n	800a3c2 <HAL_TIM_PWM_Start+0x1e6>
 800a396:	68fb      	ldr	r3, [r7, #12]
 800a398:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a39c:	d011      	beq.n	800a3c2 <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	681b      	ldr	r3, [r3, #0]
 800a3a2:	681a      	ldr	r2, [r3, #0]
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	681b      	ldr	r3, [r3, #0]
 800a3a8:	f042 0201 	orr.w	r2, r2, #1
 800a3ac:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a3ae:	e008      	b.n	800a3c2 <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	681b      	ldr	r3, [r3, #0]
 800a3b4:	681a      	ldr	r2, [r3, #0]
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	681b      	ldr	r3, [r3, #0]
 800a3ba:	f042 0201 	orr.w	r2, r2, #1
 800a3be:	601a      	str	r2, [r3, #0]
 800a3c0:	e000      	b.n	800a3c4 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a3c2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800a3c4:	2300      	movs	r3, #0
}
 800a3c6:	4618      	mov	r0, r3
 800a3c8:	3710      	adds	r7, #16
 800a3ca:	46bd      	mov	sp, r7
 800a3cc:	bd80      	pop	{r7, pc}
 800a3ce:	bf00      	nop
 800a3d0:	40010000 	.word	0x40010000
 800a3d4:	40010400 	.word	0x40010400
 800a3d8:	40014000 	.word	0x40014000
 800a3dc:	40014400 	.word	0x40014400
 800a3e0:	40014800 	.word	0x40014800
 800a3e4:	40000400 	.word	0x40000400
 800a3e8:	40000800 	.word	0x40000800
 800a3ec:	40000c00 	.word	0x40000c00
 800a3f0:	40001800 	.word	0x40001800
 800a3f4:	00010007 	.word	0x00010007

0800a3f8 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800a3f8:	b580      	push	{r7, lr}
 800a3fa:	b082      	sub	sp, #8
 800a3fc:	af00      	add	r7, sp, #0
 800a3fe:	6078      	str	r0, [r7, #4]
 800a400:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	681b      	ldr	r3, [r3, #0]
 800a406:	2200      	movs	r2, #0
 800a408:	6839      	ldr	r1, [r7, #0]
 800a40a:	4618      	mov	r0, r3
 800a40c:	f001 fbca 	bl	800bba4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	681b      	ldr	r3, [r3, #0]
 800a414:	4a3e      	ldr	r2, [pc, #248]	; (800a510 <HAL_TIM_PWM_Stop+0x118>)
 800a416:	4293      	cmp	r3, r2
 800a418:	d013      	beq.n	800a442 <HAL_TIM_PWM_Stop+0x4a>
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	681b      	ldr	r3, [r3, #0]
 800a41e:	4a3d      	ldr	r2, [pc, #244]	; (800a514 <HAL_TIM_PWM_Stop+0x11c>)
 800a420:	4293      	cmp	r3, r2
 800a422:	d00e      	beq.n	800a442 <HAL_TIM_PWM_Stop+0x4a>
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	681b      	ldr	r3, [r3, #0]
 800a428:	4a3b      	ldr	r2, [pc, #236]	; (800a518 <HAL_TIM_PWM_Stop+0x120>)
 800a42a:	4293      	cmp	r3, r2
 800a42c:	d009      	beq.n	800a442 <HAL_TIM_PWM_Stop+0x4a>
 800a42e:	687b      	ldr	r3, [r7, #4]
 800a430:	681b      	ldr	r3, [r3, #0]
 800a432:	4a3a      	ldr	r2, [pc, #232]	; (800a51c <HAL_TIM_PWM_Stop+0x124>)
 800a434:	4293      	cmp	r3, r2
 800a436:	d004      	beq.n	800a442 <HAL_TIM_PWM_Stop+0x4a>
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	681b      	ldr	r3, [r3, #0]
 800a43c:	4a38      	ldr	r2, [pc, #224]	; (800a520 <HAL_TIM_PWM_Stop+0x128>)
 800a43e:	4293      	cmp	r3, r2
 800a440:	d101      	bne.n	800a446 <HAL_TIM_PWM_Stop+0x4e>
 800a442:	2301      	movs	r3, #1
 800a444:	e000      	b.n	800a448 <HAL_TIM_PWM_Stop+0x50>
 800a446:	2300      	movs	r3, #0
 800a448:	2b00      	cmp	r3, #0
 800a44a:	d017      	beq.n	800a47c <HAL_TIM_PWM_Stop+0x84>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	681b      	ldr	r3, [r3, #0]
 800a450:	6a1a      	ldr	r2, [r3, #32]
 800a452:	f241 1311 	movw	r3, #4369	; 0x1111
 800a456:	4013      	ands	r3, r2
 800a458:	2b00      	cmp	r3, #0
 800a45a:	d10f      	bne.n	800a47c <HAL_TIM_PWM_Stop+0x84>
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	681b      	ldr	r3, [r3, #0]
 800a460:	6a1a      	ldr	r2, [r3, #32]
 800a462:	f240 4344 	movw	r3, #1092	; 0x444
 800a466:	4013      	ands	r3, r2
 800a468:	2b00      	cmp	r3, #0
 800a46a:	d107      	bne.n	800a47c <HAL_TIM_PWM_Stop+0x84>
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	681b      	ldr	r3, [r3, #0]
 800a470:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	681b      	ldr	r3, [r3, #0]
 800a476:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800a47a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	681b      	ldr	r3, [r3, #0]
 800a480:	6a1a      	ldr	r2, [r3, #32]
 800a482:	f241 1311 	movw	r3, #4369	; 0x1111
 800a486:	4013      	ands	r3, r2
 800a488:	2b00      	cmp	r3, #0
 800a48a:	d10f      	bne.n	800a4ac <HAL_TIM_PWM_Stop+0xb4>
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	681b      	ldr	r3, [r3, #0]
 800a490:	6a1a      	ldr	r2, [r3, #32]
 800a492:	f240 4344 	movw	r3, #1092	; 0x444
 800a496:	4013      	ands	r3, r2
 800a498:	2b00      	cmp	r3, #0
 800a49a:	d107      	bne.n	800a4ac <HAL_TIM_PWM_Stop+0xb4>
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	681b      	ldr	r3, [r3, #0]
 800a4a0:	681a      	ldr	r2, [r3, #0]
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	681b      	ldr	r3, [r3, #0]
 800a4a6:	f022 0201 	bic.w	r2, r2, #1
 800a4aa:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800a4ac:	683b      	ldr	r3, [r7, #0]
 800a4ae:	2b00      	cmp	r3, #0
 800a4b0:	d104      	bne.n	800a4bc <HAL_TIM_PWM_Stop+0xc4>
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	2201      	movs	r2, #1
 800a4b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a4ba:	e023      	b.n	800a504 <HAL_TIM_PWM_Stop+0x10c>
 800a4bc:	683b      	ldr	r3, [r7, #0]
 800a4be:	2b04      	cmp	r3, #4
 800a4c0:	d104      	bne.n	800a4cc <HAL_TIM_PWM_Stop+0xd4>
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	2201      	movs	r2, #1
 800a4c6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a4ca:	e01b      	b.n	800a504 <HAL_TIM_PWM_Stop+0x10c>
 800a4cc:	683b      	ldr	r3, [r7, #0]
 800a4ce:	2b08      	cmp	r3, #8
 800a4d0:	d104      	bne.n	800a4dc <HAL_TIM_PWM_Stop+0xe4>
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	2201      	movs	r2, #1
 800a4d6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a4da:	e013      	b.n	800a504 <HAL_TIM_PWM_Stop+0x10c>
 800a4dc:	683b      	ldr	r3, [r7, #0]
 800a4de:	2b0c      	cmp	r3, #12
 800a4e0:	d104      	bne.n	800a4ec <HAL_TIM_PWM_Stop+0xf4>
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	2201      	movs	r2, #1
 800a4e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a4ea:	e00b      	b.n	800a504 <HAL_TIM_PWM_Stop+0x10c>
 800a4ec:	683b      	ldr	r3, [r7, #0]
 800a4ee:	2b10      	cmp	r3, #16
 800a4f0:	d104      	bne.n	800a4fc <HAL_TIM_PWM_Stop+0x104>
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	2201      	movs	r2, #1
 800a4f6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a4fa:	e003      	b.n	800a504 <HAL_TIM_PWM_Stop+0x10c>
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	2201      	movs	r2, #1
 800a500:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Return function status */
  return HAL_OK;
 800a504:	2300      	movs	r3, #0
}
 800a506:	4618      	mov	r0, r3
 800a508:	3708      	adds	r7, #8
 800a50a:	46bd      	mov	sp, r7
 800a50c:	bd80      	pop	{r7, pc}
 800a50e:	bf00      	nop
 800a510:	40010000 	.word	0x40010000
 800a514:	40010400 	.word	0x40010400
 800a518:	40014000 	.word	0x40014000
 800a51c:	40014400 	.word	0x40014400
 800a520:	40014800 	.word	0x40014800

0800a524 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 800a524:	b580      	push	{r7, lr}
 800a526:	b082      	sub	sp, #8
 800a528:	af00      	add	r7, sp, #0
 800a52a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	2b00      	cmp	r3, #0
 800a530:	d101      	bne.n	800a536 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800a532:	2301      	movs	r3, #1
 800a534:	e049      	b.n	800a5ca <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a53c:	b2db      	uxtb	r3, r3
 800a53e:	2b00      	cmp	r3, #0
 800a540:	d106      	bne.n	800a550 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a542:	687b      	ldr	r3, [r7, #4]
 800a544:	2200      	movs	r2, #0
 800a546:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800a54a:	6878      	ldr	r0, [r7, #4]
 800a54c:	f000 f841 	bl	800a5d2 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	2202      	movs	r2, #2
 800a554:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	681a      	ldr	r2, [r3, #0]
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	3304      	adds	r3, #4
 800a560:	4619      	mov	r1, r3
 800a562:	4610      	mov	r0, r2
 800a564:	f000 fde6 	bl	800b134 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	2201      	movs	r2, #1
 800a56c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	2201      	movs	r2, #1
 800a574:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	2201      	movs	r2, #1
 800a57c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	2201      	movs	r2, #1
 800a584:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	2201      	movs	r2, #1
 800a58c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	2201      	movs	r2, #1
 800a594:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	2201      	movs	r2, #1
 800a59c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	2201      	movs	r2, #1
 800a5a4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	2201      	movs	r2, #1
 800a5ac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	2201      	movs	r2, #1
 800a5b4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	2201      	movs	r2, #1
 800a5bc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	2201      	movs	r2, #1
 800a5c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a5c8:	2300      	movs	r3, #0
}
 800a5ca:	4618      	mov	r0, r3
 800a5cc:	3708      	adds	r7, #8
 800a5ce:	46bd      	mov	sp, r7
 800a5d0:	bd80      	pop	{r7, pc}

0800a5d2 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 800a5d2:	b480      	push	{r7}
 800a5d4:	b083      	sub	sp, #12
 800a5d6:	af00      	add	r7, sp, #0
 800a5d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 800a5da:	bf00      	nop
 800a5dc:	370c      	adds	r7, #12
 800a5de:	46bd      	mov	sp, r7
 800a5e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5e4:	4770      	bx	lr

0800a5e6 <HAL_TIM_IC_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800a5e6:	b580      	push	{r7, lr}
 800a5e8:	b082      	sub	sp, #8
 800a5ea:	af00      	add	r7, sp, #0
 800a5ec:	6078      	str	r0, [r7, #4]
 800a5ee:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	681b      	ldr	r3, [r3, #0]
 800a5f4:	2200      	movs	r2, #0
 800a5f6:	6839      	ldr	r1, [r7, #0]
 800a5f8:	4618      	mov	r0, r3
 800a5fa:	f001 fad3 	bl	800bba4 <TIM_CCxChannelCmd>

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	681b      	ldr	r3, [r3, #0]
 800a602:	6a1a      	ldr	r2, [r3, #32]
 800a604:	f241 1311 	movw	r3, #4369	; 0x1111
 800a608:	4013      	ands	r3, r2
 800a60a:	2b00      	cmp	r3, #0
 800a60c:	d10f      	bne.n	800a62e <HAL_TIM_IC_Stop+0x48>
 800a60e:	687b      	ldr	r3, [r7, #4]
 800a610:	681b      	ldr	r3, [r3, #0]
 800a612:	6a1a      	ldr	r2, [r3, #32]
 800a614:	f240 4344 	movw	r3, #1092	; 0x444
 800a618:	4013      	ands	r3, r2
 800a61a:	2b00      	cmp	r3, #0
 800a61c:	d107      	bne.n	800a62e <HAL_TIM_IC_Stop+0x48>
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	681b      	ldr	r3, [r3, #0]
 800a622:	681a      	ldr	r2, [r3, #0]
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	681b      	ldr	r3, [r3, #0]
 800a628:	f022 0201 	bic.w	r2, r2, #1
 800a62c:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800a62e:	683b      	ldr	r3, [r7, #0]
 800a630:	2b00      	cmp	r3, #0
 800a632:	d104      	bne.n	800a63e <HAL_TIM_IC_Stop+0x58>
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	2201      	movs	r2, #1
 800a638:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a63c:	e023      	b.n	800a686 <HAL_TIM_IC_Stop+0xa0>
 800a63e:	683b      	ldr	r3, [r7, #0]
 800a640:	2b04      	cmp	r3, #4
 800a642:	d104      	bne.n	800a64e <HAL_TIM_IC_Stop+0x68>
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	2201      	movs	r2, #1
 800a648:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a64c:	e01b      	b.n	800a686 <HAL_TIM_IC_Stop+0xa0>
 800a64e:	683b      	ldr	r3, [r7, #0]
 800a650:	2b08      	cmp	r3, #8
 800a652:	d104      	bne.n	800a65e <HAL_TIM_IC_Stop+0x78>
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	2201      	movs	r2, #1
 800a658:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a65c:	e013      	b.n	800a686 <HAL_TIM_IC_Stop+0xa0>
 800a65e:	683b      	ldr	r3, [r7, #0]
 800a660:	2b0c      	cmp	r3, #12
 800a662:	d104      	bne.n	800a66e <HAL_TIM_IC_Stop+0x88>
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	2201      	movs	r2, #1
 800a668:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a66c:	e00b      	b.n	800a686 <HAL_TIM_IC_Stop+0xa0>
 800a66e:	683b      	ldr	r3, [r7, #0]
 800a670:	2b10      	cmp	r3, #16
 800a672:	d104      	bne.n	800a67e <HAL_TIM_IC_Stop+0x98>
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	2201      	movs	r2, #1
 800a678:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a67c:	e003      	b.n	800a686 <HAL_TIM_IC_Stop+0xa0>
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	2201      	movs	r2, #1
 800a682:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800a686:	683b      	ldr	r3, [r7, #0]
 800a688:	2b00      	cmp	r3, #0
 800a68a:	d104      	bne.n	800a696 <HAL_TIM_IC_Stop+0xb0>
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	2201      	movs	r2, #1
 800a690:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a694:	e013      	b.n	800a6be <HAL_TIM_IC_Stop+0xd8>
 800a696:	683b      	ldr	r3, [r7, #0]
 800a698:	2b04      	cmp	r3, #4
 800a69a:	d104      	bne.n	800a6a6 <HAL_TIM_IC_Stop+0xc0>
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	2201      	movs	r2, #1
 800a6a0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a6a4:	e00b      	b.n	800a6be <HAL_TIM_IC_Stop+0xd8>
 800a6a6:	683b      	ldr	r3, [r7, #0]
 800a6a8:	2b08      	cmp	r3, #8
 800a6aa:	d104      	bne.n	800a6b6 <HAL_TIM_IC_Stop+0xd0>
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	2201      	movs	r2, #1
 800a6b0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800a6b4:	e003      	b.n	800a6be <HAL_TIM_IC_Stop+0xd8>
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	2201      	movs	r2, #1
 800a6ba:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Return function status */
  return HAL_OK;
 800a6be:	2300      	movs	r3, #0
}
 800a6c0:	4618      	mov	r0, r3
 800a6c2:	3708      	adds	r7, #8
 800a6c4:	46bd      	mov	sp, r7
 800a6c6:	bd80      	pop	{r7, pc}

0800a6c8 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800a6c8:	b580      	push	{r7, lr}
 800a6ca:	b084      	sub	sp, #16
 800a6cc:	af00      	add	r7, sp, #0
 800a6ce:	6078      	str	r0, [r7, #4]
 800a6d0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a6d2:	2300      	movs	r3, #0
 800a6d4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800a6d6:	683b      	ldr	r3, [r7, #0]
 800a6d8:	2b00      	cmp	r3, #0
 800a6da:	d104      	bne.n	800a6e6 <HAL_TIM_IC_Start_IT+0x1e>
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a6e2:	b2db      	uxtb	r3, r3
 800a6e4:	e023      	b.n	800a72e <HAL_TIM_IC_Start_IT+0x66>
 800a6e6:	683b      	ldr	r3, [r7, #0]
 800a6e8:	2b04      	cmp	r3, #4
 800a6ea:	d104      	bne.n	800a6f6 <HAL_TIM_IC_Start_IT+0x2e>
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800a6f2:	b2db      	uxtb	r3, r3
 800a6f4:	e01b      	b.n	800a72e <HAL_TIM_IC_Start_IT+0x66>
 800a6f6:	683b      	ldr	r3, [r7, #0]
 800a6f8:	2b08      	cmp	r3, #8
 800a6fa:	d104      	bne.n	800a706 <HAL_TIM_IC_Start_IT+0x3e>
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800a702:	b2db      	uxtb	r3, r3
 800a704:	e013      	b.n	800a72e <HAL_TIM_IC_Start_IT+0x66>
 800a706:	683b      	ldr	r3, [r7, #0]
 800a708:	2b0c      	cmp	r3, #12
 800a70a:	d104      	bne.n	800a716 <HAL_TIM_IC_Start_IT+0x4e>
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a712:	b2db      	uxtb	r3, r3
 800a714:	e00b      	b.n	800a72e <HAL_TIM_IC_Start_IT+0x66>
 800a716:	683b      	ldr	r3, [r7, #0]
 800a718:	2b10      	cmp	r3, #16
 800a71a:	d104      	bne.n	800a726 <HAL_TIM_IC_Start_IT+0x5e>
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800a722:	b2db      	uxtb	r3, r3
 800a724:	e003      	b.n	800a72e <HAL_TIM_IC_Start_IT+0x66>
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800a72c:	b2db      	uxtb	r3, r3
 800a72e:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 800a730:	683b      	ldr	r3, [r7, #0]
 800a732:	2b00      	cmp	r3, #0
 800a734:	d104      	bne.n	800a740 <HAL_TIM_IC_Start_IT+0x78>
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a73c:	b2db      	uxtb	r3, r3
 800a73e:	e013      	b.n	800a768 <HAL_TIM_IC_Start_IT+0xa0>
 800a740:	683b      	ldr	r3, [r7, #0]
 800a742:	2b04      	cmp	r3, #4
 800a744:	d104      	bne.n	800a750 <HAL_TIM_IC_Start_IT+0x88>
 800a746:	687b      	ldr	r3, [r7, #4]
 800a748:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a74c:	b2db      	uxtb	r3, r3
 800a74e:	e00b      	b.n	800a768 <HAL_TIM_IC_Start_IT+0xa0>
 800a750:	683b      	ldr	r3, [r7, #0]
 800a752:	2b08      	cmp	r3, #8
 800a754:	d104      	bne.n	800a760 <HAL_TIM_IC_Start_IT+0x98>
 800a756:	687b      	ldr	r3, [r7, #4]
 800a758:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800a75c:	b2db      	uxtb	r3, r3
 800a75e:	e003      	b.n	800a768 <HAL_TIM_IC_Start_IT+0xa0>
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 800a766:	b2db      	uxtb	r3, r3
 800a768:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 800a76a:	7bbb      	ldrb	r3, [r7, #14]
 800a76c:	2b01      	cmp	r3, #1
 800a76e:	d102      	bne.n	800a776 <HAL_TIM_IC_Start_IT+0xae>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 800a770:	7b7b      	ldrb	r3, [r7, #13]
 800a772:	2b01      	cmp	r3, #1
 800a774:	d001      	beq.n	800a77a <HAL_TIM_IC_Start_IT+0xb2>
  {
    return HAL_ERROR;
 800a776:	2301      	movs	r3, #1
 800a778:	e0e2      	b.n	800a940 <HAL_TIM_IC_Start_IT+0x278>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800a77a:	683b      	ldr	r3, [r7, #0]
 800a77c:	2b00      	cmp	r3, #0
 800a77e:	d104      	bne.n	800a78a <HAL_TIM_IC_Start_IT+0xc2>
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	2202      	movs	r2, #2
 800a784:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a788:	e023      	b.n	800a7d2 <HAL_TIM_IC_Start_IT+0x10a>
 800a78a:	683b      	ldr	r3, [r7, #0]
 800a78c:	2b04      	cmp	r3, #4
 800a78e:	d104      	bne.n	800a79a <HAL_TIM_IC_Start_IT+0xd2>
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	2202      	movs	r2, #2
 800a794:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a798:	e01b      	b.n	800a7d2 <HAL_TIM_IC_Start_IT+0x10a>
 800a79a:	683b      	ldr	r3, [r7, #0]
 800a79c:	2b08      	cmp	r3, #8
 800a79e:	d104      	bne.n	800a7aa <HAL_TIM_IC_Start_IT+0xe2>
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	2202      	movs	r2, #2
 800a7a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a7a8:	e013      	b.n	800a7d2 <HAL_TIM_IC_Start_IT+0x10a>
 800a7aa:	683b      	ldr	r3, [r7, #0]
 800a7ac:	2b0c      	cmp	r3, #12
 800a7ae:	d104      	bne.n	800a7ba <HAL_TIM_IC_Start_IT+0xf2>
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	2202      	movs	r2, #2
 800a7b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a7b8:	e00b      	b.n	800a7d2 <HAL_TIM_IC_Start_IT+0x10a>
 800a7ba:	683b      	ldr	r3, [r7, #0]
 800a7bc:	2b10      	cmp	r3, #16
 800a7be:	d104      	bne.n	800a7ca <HAL_TIM_IC_Start_IT+0x102>
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	2202      	movs	r2, #2
 800a7c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a7c8:	e003      	b.n	800a7d2 <HAL_TIM_IC_Start_IT+0x10a>
 800a7ca:	687b      	ldr	r3, [r7, #4]
 800a7cc:	2202      	movs	r2, #2
 800a7ce:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800a7d2:	683b      	ldr	r3, [r7, #0]
 800a7d4:	2b00      	cmp	r3, #0
 800a7d6:	d104      	bne.n	800a7e2 <HAL_TIM_IC_Start_IT+0x11a>
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	2202      	movs	r2, #2
 800a7dc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a7e0:	e013      	b.n	800a80a <HAL_TIM_IC_Start_IT+0x142>
 800a7e2:	683b      	ldr	r3, [r7, #0]
 800a7e4:	2b04      	cmp	r3, #4
 800a7e6:	d104      	bne.n	800a7f2 <HAL_TIM_IC_Start_IT+0x12a>
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	2202      	movs	r2, #2
 800a7ec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a7f0:	e00b      	b.n	800a80a <HAL_TIM_IC_Start_IT+0x142>
 800a7f2:	683b      	ldr	r3, [r7, #0]
 800a7f4:	2b08      	cmp	r3, #8
 800a7f6:	d104      	bne.n	800a802 <HAL_TIM_IC_Start_IT+0x13a>
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	2202      	movs	r2, #2
 800a7fc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800a800:	e003      	b.n	800a80a <HAL_TIM_IC_Start_IT+0x142>
 800a802:	687b      	ldr	r3, [r7, #4]
 800a804:	2202      	movs	r2, #2
 800a806:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  switch (Channel)
 800a80a:	683b      	ldr	r3, [r7, #0]
 800a80c:	2b0c      	cmp	r3, #12
 800a80e:	d841      	bhi.n	800a894 <HAL_TIM_IC_Start_IT+0x1cc>
 800a810:	a201      	add	r2, pc, #4	; (adr r2, 800a818 <HAL_TIM_IC_Start_IT+0x150>)
 800a812:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a816:	bf00      	nop
 800a818:	0800a84d 	.word	0x0800a84d
 800a81c:	0800a895 	.word	0x0800a895
 800a820:	0800a895 	.word	0x0800a895
 800a824:	0800a895 	.word	0x0800a895
 800a828:	0800a85f 	.word	0x0800a85f
 800a82c:	0800a895 	.word	0x0800a895
 800a830:	0800a895 	.word	0x0800a895
 800a834:	0800a895 	.word	0x0800a895
 800a838:	0800a871 	.word	0x0800a871
 800a83c:	0800a895 	.word	0x0800a895
 800a840:	0800a895 	.word	0x0800a895
 800a844:	0800a895 	.word	0x0800a895
 800a848:	0800a883 	.word	0x0800a883
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	681b      	ldr	r3, [r3, #0]
 800a850:	68da      	ldr	r2, [r3, #12]
 800a852:	687b      	ldr	r3, [r7, #4]
 800a854:	681b      	ldr	r3, [r3, #0]
 800a856:	f042 0202 	orr.w	r2, r2, #2
 800a85a:	60da      	str	r2, [r3, #12]
      break;
 800a85c:	e01d      	b.n	800a89a <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800a85e:	687b      	ldr	r3, [r7, #4]
 800a860:	681b      	ldr	r3, [r3, #0]
 800a862:	68da      	ldr	r2, [r3, #12]
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	681b      	ldr	r3, [r3, #0]
 800a868:	f042 0204 	orr.w	r2, r2, #4
 800a86c:	60da      	str	r2, [r3, #12]
      break;
 800a86e:	e014      	b.n	800a89a <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800a870:	687b      	ldr	r3, [r7, #4]
 800a872:	681b      	ldr	r3, [r3, #0]
 800a874:	68da      	ldr	r2, [r3, #12]
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	681b      	ldr	r3, [r3, #0]
 800a87a:	f042 0208 	orr.w	r2, r2, #8
 800a87e:	60da      	str	r2, [r3, #12]
      break;
 800a880:	e00b      	b.n	800a89a <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800a882:	687b      	ldr	r3, [r7, #4]
 800a884:	681b      	ldr	r3, [r3, #0]
 800a886:	68da      	ldr	r2, [r3, #12]
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	681b      	ldr	r3, [r3, #0]
 800a88c:	f042 0210 	orr.w	r2, r2, #16
 800a890:	60da      	str	r2, [r3, #12]
      break;
 800a892:	e002      	b.n	800a89a <HAL_TIM_IC_Start_IT+0x1d2>
    }

    default:
      status = HAL_ERROR;
 800a894:	2301      	movs	r3, #1
 800a896:	73fb      	strb	r3, [r7, #15]
      break;
 800a898:	bf00      	nop
  }

  if (status == HAL_OK)
 800a89a:	7bfb      	ldrb	r3, [r7, #15]
 800a89c:	2b00      	cmp	r3, #0
 800a89e:	d14e      	bne.n	800a93e <HAL_TIM_IC_Start_IT+0x276>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	681b      	ldr	r3, [r3, #0]
 800a8a4:	2201      	movs	r2, #1
 800a8a6:	6839      	ldr	r1, [r7, #0]
 800a8a8:	4618      	mov	r0, r3
 800a8aa:	f001 f97b 	bl	800bba4 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a8ae:	687b      	ldr	r3, [r7, #4]
 800a8b0:	681b      	ldr	r3, [r3, #0]
 800a8b2:	4a25      	ldr	r2, [pc, #148]	; (800a948 <HAL_TIM_IC_Start_IT+0x280>)
 800a8b4:	4293      	cmp	r3, r2
 800a8b6:	d022      	beq.n	800a8fe <HAL_TIM_IC_Start_IT+0x236>
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	681b      	ldr	r3, [r3, #0]
 800a8bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a8c0:	d01d      	beq.n	800a8fe <HAL_TIM_IC_Start_IT+0x236>
 800a8c2:	687b      	ldr	r3, [r7, #4]
 800a8c4:	681b      	ldr	r3, [r3, #0]
 800a8c6:	4a21      	ldr	r2, [pc, #132]	; (800a94c <HAL_TIM_IC_Start_IT+0x284>)
 800a8c8:	4293      	cmp	r3, r2
 800a8ca:	d018      	beq.n	800a8fe <HAL_TIM_IC_Start_IT+0x236>
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	681b      	ldr	r3, [r3, #0]
 800a8d0:	4a1f      	ldr	r2, [pc, #124]	; (800a950 <HAL_TIM_IC_Start_IT+0x288>)
 800a8d2:	4293      	cmp	r3, r2
 800a8d4:	d013      	beq.n	800a8fe <HAL_TIM_IC_Start_IT+0x236>
 800a8d6:	687b      	ldr	r3, [r7, #4]
 800a8d8:	681b      	ldr	r3, [r3, #0]
 800a8da:	4a1e      	ldr	r2, [pc, #120]	; (800a954 <HAL_TIM_IC_Start_IT+0x28c>)
 800a8dc:	4293      	cmp	r3, r2
 800a8de:	d00e      	beq.n	800a8fe <HAL_TIM_IC_Start_IT+0x236>
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	681b      	ldr	r3, [r3, #0]
 800a8e4:	4a1c      	ldr	r2, [pc, #112]	; (800a958 <HAL_TIM_IC_Start_IT+0x290>)
 800a8e6:	4293      	cmp	r3, r2
 800a8e8:	d009      	beq.n	800a8fe <HAL_TIM_IC_Start_IT+0x236>
 800a8ea:	687b      	ldr	r3, [r7, #4]
 800a8ec:	681b      	ldr	r3, [r3, #0]
 800a8ee:	4a1b      	ldr	r2, [pc, #108]	; (800a95c <HAL_TIM_IC_Start_IT+0x294>)
 800a8f0:	4293      	cmp	r3, r2
 800a8f2:	d004      	beq.n	800a8fe <HAL_TIM_IC_Start_IT+0x236>
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	681b      	ldr	r3, [r3, #0]
 800a8f8:	4a19      	ldr	r2, [pc, #100]	; (800a960 <HAL_TIM_IC_Start_IT+0x298>)
 800a8fa:	4293      	cmp	r3, r2
 800a8fc:	d115      	bne.n	800a92a <HAL_TIM_IC_Start_IT+0x262>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	681b      	ldr	r3, [r3, #0]
 800a902:	689a      	ldr	r2, [r3, #8]
 800a904:	4b17      	ldr	r3, [pc, #92]	; (800a964 <HAL_TIM_IC_Start_IT+0x29c>)
 800a906:	4013      	ands	r3, r2
 800a908:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a90a:	68bb      	ldr	r3, [r7, #8]
 800a90c:	2b06      	cmp	r3, #6
 800a90e:	d015      	beq.n	800a93c <HAL_TIM_IC_Start_IT+0x274>
 800a910:	68bb      	ldr	r3, [r7, #8]
 800a912:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a916:	d011      	beq.n	800a93c <HAL_TIM_IC_Start_IT+0x274>
      {
        __HAL_TIM_ENABLE(htim);
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	681b      	ldr	r3, [r3, #0]
 800a91c:	681a      	ldr	r2, [r3, #0]
 800a91e:	687b      	ldr	r3, [r7, #4]
 800a920:	681b      	ldr	r3, [r3, #0]
 800a922:	f042 0201 	orr.w	r2, r2, #1
 800a926:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a928:	e008      	b.n	800a93c <HAL_TIM_IC_Start_IT+0x274>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	681b      	ldr	r3, [r3, #0]
 800a92e:	681a      	ldr	r2, [r3, #0]
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	681b      	ldr	r3, [r3, #0]
 800a934:	f042 0201 	orr.w	r2, r2, #1
 800a938:	601a      	str	r2, [r3, #0]
 800a93a:	e000      	b.n	800a93e <HAL_TIM_IC_Start_IT+0x276>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a93c:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 800a93e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a940:	4618      	mov	r0, r3
 800a942:	3710      	adds	r7, #16
 800a944:	46bd      	mov	sp, r7
 800a946:	bd80      	pop	{r7, pc}
 800a948:	40010000 	.word	0x40010000
 800a94c:	40000400 	.word	0x40000400
 800a950:	40000800 	.word	0x40000800
 800a954:	40000c00 	.word	0x40000c00
 800a958:	40010400 	.word	0x40010400
 800a95c:	40001800 	.word	0x40001800
 800a960:	40014000 	.word	0x40014000
 800a964:	00010007 	.word	0x00010007

0800a968 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800a968:	b580      	push	{r7, lr}
 800a96a:	b082      	sub	sp, #8
 800a96c:	af00      	add	r7, sp, #0
 800a96e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800a970:	687b      	ldr	r3, [r7, #4]
 800a972:	681b      	ldr	r3, [r3, #0]
 800a974:	691b      	ldr	r3, [r3, #16]
 800a976:	f003 0302 	and.w	r3, r3, #2
 800a97a:	2b02      	cmp	r3, #2
 800a97c:	d122      	bne.n	800a9c4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	681b      	ldr	r3, [r3, #0]
 800a982:	68db      	ldr	r3, [r3, #12]
 800a984:	f003 0302 	and.w	r3, r3, #2
 800a988:	2b02      	cmp	r3, #2
 800a98a:	d11b      	bne.n	800a9c4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	681b      	ldr	r3, [r3, #0]
 800a990:	f06f 0202 	mvn.w	r2, #2
 800a994:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a996:	687b      	ldr	r3, [r7, #4]
 800a998:	2201      	movs	r2, #1
 800a99a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	681b      	ldr	r3, [r3, #0]
 800a9a0:	699b      	ldr	r3, [r3, #24]
 800a9a2:	f003 0303 	and.w	r3, r3, #3
 800a9a6:	2b00      	cmp	r3, #0
 800a9a8:	d003      	beq.n	800a9b2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800a9aa:	6878      	ldr	r0, [r7, #4]
 800a9ac:	f7f8 f872 	bl	8002a94 <HAL_TIM_IC_CaptureCallback>
 800a9b0:	e005      	b.n	800a9be <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800a9b2:	6878      	ldr	r0, [r7, #4]
 800a9b4:	f000 fba0 	bl	800b0f8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a9b8:	6878      	ldr	r0, [r7, #4]
 800a9ba:	f000 fba7 	bl	800b10c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a9be:	687b      	ldr	r3, [r7, #4]
 800a9c0:	2200      	movs	r2, #0
 800a9c2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	681b      	ldr	r3, [r3, #0]
 800a9c8:	691b      	ldr	r3, [r3, #16]
 800a9ca:	f003 0304 	and.w	r3, r3, #4
 800a9ce:	2b04      	cmp	r3, #4
 800a9d0:	d122      	bne.n	800aa18 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800a9d2:	687b      	ldr	r3, [r7, #4]
 800a9d4:	681b      	ldr	r3, [r3, #0]
 800a9d6:	68db      	ldr	r3, [r3, #12]
 800a9d8:	f003 0304 	and.w	r3, r3, #4
 800a9dc:	2b04      	cmp	r3, #4
 800a9de:	d11b      	bne.n	800aa18 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800a9e0:	687b      	ldr	r3, [r7, #4]
 800a9e2:	681b      	ldr	r3, [r3, #0]
 800a9e4:	f06f 0204 	mvn.w	r2, #4
 800a9e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a9ea:	687b      	ldr	r3, [r7, #4]
 800a9ec:	2202      	movs	r2, #2
 800a9ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	681b      	ldr	r3, [r3, #0]
 800a9f4:	699b      	ldr	r3, [r3, #24]
 800a9f6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a9fa:	2b00      	cmp	r3, #0
 800a9fc:	d003      	beq.n	800aa06 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a9fe:	6878      	ldr	r0, [r7, #4]
 800aa00:	f7f8 f848 	bl	8002a94 <HAL_TIM_IC_CaptureCallback>
 800aa04:	e005      	b.n	800aa12 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800aa06:	6878      	ldr	r0, [r7, #4]
 800aa08:	f000 fb76 	bl	800b0f8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800aa0c:	6878      	ldr	r0, [r7, #4]
 800aa0e:	f000 fb7d 	bl	800b10c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	2200      	movs	r2, #0
 800aa16:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	681b      	ldr	r3, [r3, #0]
 800aa1c:	691b      	ldr	r3, [r3, #16]
 800aa1e:	f003 0308 	and.w	r3, r3, #8
 800aa22:	2b08      	cmp	r3, #8
 800aa24:	d122      	bne.n	800aa6c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800aa26:	687b      	ldr	r3, [r7, #4]
 800aa28:	681b      	ldr	r3, [r3, #0]
 800aa2a:	68db      	ldr	r3, [r3, #12]
 800aa2c:	f003 0308 	and.w	r3, r3, #8
 800aa30:	2b08      	cmp	r3, #8
 800aa32:	d11b      	bne.n	800aa6c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800aa34:	687b      	ldr	r3, [r7, #4]
 800aa36:	681b      	ldr	r3, [r3, #0]
 800aa38:	f06f 0208 	mvn.w	r2, #8
 800aa3c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800aa3e:	687b      	ldr	r3, [r7, #4]
 800aa40:	2204      	movs	r2, #4
 800aa42:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	681b      	ldr	r3, [r3, #0]
 800aa48:	69db      	ldr	r3, [r3, #28]
 800aa4a:	f003 0303 	and.w	r3, r3, #3
 800aa4e:	2b00      	cmp	r3, #0
 800aa50:	d003      	beq.n	800aa5a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800aa52:	6878      	ldr	r0, [r7, #4]
 800aa54:	f7f8 f81e 	bl	8002a94 <HAL_TIM_IC_CaptureCallback>
 800aa58:	e005      	b.n	800aa66 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800aa5a:	6878      	ldr	r0, [r7, #4]
 800aa5c:	f000 fb4c 	bl	800b0f8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800aa60:	6878      	ldr	r0, [r7, #4]
 800aa62:	f000 fb53 	bl	800b10c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800aa66:	687b      	ldr	r3, [r7, #4]
 800aa68:	2200      	movs	r2, #0
 800aa6a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	681b      	ldr	r3, [r3, #0]
 800aa70:	691b      	ldr	r3, [r3, #16]
 800aa72:	f003 0310 	and.w	r3, r3, #16
 800aa76:	2b10      	cmp	r3, #16
 800aa78:	d122      	bne.n	800aac0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800aa7a:	687b      	ldr	r3, [r7, #4]
 800aa7c:	681b      	ldr	r3, [r3, #0]
 800aa7e:	68db      	ldr	r3, [r3, #12]
 800aa80:	f003 0310 	and.w	r3, r3, #16
 800aa84:	2b10      	cmp	r3, #16
 800aa86:	d11b      	bne.n	800aac0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	681b      	ldr	r3, [r3, #0]
 800aa8c:	f06f 0210 	mvn.w	r2, #16
 800aa90:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800aa92:	687b      	ldr	r3, [r7, #4]
 800aa94:	2208      	movs	r2, #8
 800aa96:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800aa98:	687b      	ldr	r3, [r7, #4]
 800aa9a:	681b      	ldr	r3, [r3, #0]
 800aa9c:	69db      	ldr	r3, [r3, #28]
 800aa9e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800aaa2:	2b00      	cmp	r3, #0
 800aaa4:	d003      	beq.n	800aaae <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800aaa6:	6878      	ldr	r0, [r7, #4]
 800aaa8:	f7f7 fff4 	bl	8002a94 <HAL_TIM_IC_CaptureCallback>
 800aaac:	e005      	b.n	800aaba <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800aaae:	6878      	ldr	r0, [r7, #4]
 800aab0:	f000 fb22 	bl	800b0f8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800aab4:	6878      	ldr	r0, [r7, #4]
 800aab6:	f000 fb29 	bl	800b10c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800aaba:	687b      	ldr	r3, [r7, #4]
 800aabc:	2200      	movs	r2, #0
 800aabe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	681b      	ldr	r3, [r3, #0]
 800aac4:	691b      	ldr	r3, [r3, #16]
 800aac6:	f003 0301 	and.w	r3, r3, #1
 800aaca:	2b01      	cmp	r3, #1
 800aacc:	d10e      	bne.n	800aaec <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800aace:	687b      	ldr	r3, [r7, #4]
 800aad0:	681b      	ldr	r3, [r3, #0]
 800aad2:	68db      	ldr	r3, [r3, #12]
 800aad4:	f003 0301 	and.w	r3, r3, #1
 800aad8:	2b01      	cmp	r3, #1
 800aada:	d107      	bne.n	800aaec <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	681b      	ldr	r3, [r3, #0]
 800aae0:	f06f 0201 	mvn.w	r2, #1
 800aae4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800aae6:	6878      	ldr	r0, [r7, #4]
 800aae8:	f7f8 f826 	bl	8002b38 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800aaec:	687b      	ldr	r3, [r7, #4]
 800aaee:	681b      	ldr	r3, [r3, #0]
 800aaf0:	691b      	ldr	r3, [r3, #16]
 800aaf2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800aaf6:	2b80      	cmp	r3, #128	; 0x80
 800aaf8:	d10e      	bne.n	800ab18 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	681b      	ldr	r3, [r3, #0]
 800aafe:	68db      	ldr	r3, [r3, #12]
 800ab00:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ab04:	2b80      	cmp	r3, #128	; 0x80
 800ab06:	d107      	bne.n	800ab18 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	681b      	ldr	r3, [r3, #0]
 800ab0c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800ab10:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800ab12:	6878      	ldr	r0, [r7, #4]
 800ab14:	f001 f904 	bl	800bd20 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800ab18:	687b      	ldr	r3, [r7, #4]
 800ab1a:	681b      	ldr	r3, [r3, #0]
 800ab1c:	691b      	ldr	r3, [r3, #16]
 800ab1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ab22:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ab26:	d10e      	bne.n	800ab46 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800ab28:	687b      	ldr	r3, [r7, #4]
 800ab2a:	681b      	ldr	r3, [r3, #0]
 800ab2c:	68db      	ldr	r3, [r3, #12]
 800ab2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ab32:	2b80      	cmp	r3, #128	; 0x80
 800ab34:	d107      	bne.n	800ab46 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800ab36:	687b      	ldr	r3, [r7, #4]
 800ab38:	681b      	ldr	r3, [r3, #0]
 800ab3a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800ab3e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800ab40:	6878      	ldr	r0, [r7, #4]
 800ab42:	f001 f8f7 	bl	800bd34 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800ab46:	687b      	ldr	r3, [r7, #4]
 800ab48:	681b      	ldr	r3, [r3, #0]
 800ab4a:	691b      	ldr	r3, [r3, #16]
 800ab4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ab50:	2b40      	cmp	r3, #64	; 0x40
 800ab52:	d10e      	bne.n	800ab72 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	681b      	ldr	r3, [r3, #0]
 800ab58:	68db      	ldr	r3, [r3, #12]
 800ab5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ab5e:	2b40      	cmp	r3, #64	; 0x40
 800ab60:	d107      	bne.n	800ab72 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800ab62:	687b      	ldr	r3, [r7, #4]
 800ab64:	681b      	ldr	r3, [r3, #0]
 800ab66:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800ab6a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800ab6c:	6878      	ldr	r0, [r7, #4]
 800ab6e:	f000 fad7 	bl	800b120 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800ab72:	687b      	ldr	r3, [r7, #4]
 800ab74:	681b      	ldr	r3, [r3, #0]
 800ab76:	691b      	ldr	r3, [r3, #16]
 800ab78:	f003 0320 	and.w	r3, r3, #32
 800ab7c:	2b20      	cmp	r3, #32
 800ab7e:	d10e      	bne.n	800ab9e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	681b      	ldr	r3, [r3, #0]
 800ab84:	68db      	ldr	r3, [r3, #12]
 800ab86:	f003 0320 	and.w	r3, r3, #32
 800ab8a:	2b20      	cmp	r3, #32
 800ab8c:	d107      	bne.n	800ab9e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800ab8e:	687b      	ldr	r3, [r7, #4]
 800ab90:	681b      	ldr	r3, [r3, #0]
 800ab92:	f06f 0220 	mvn.w	r2, #32
 800ab96:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800ab98:	6878      	ldr	r0, [r7, #4]
 800ab9a:	f001 f8b7 	bl	800bd0c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800ab9e:	bf00      	nop
 800aba0:	3708      	adds	r7, #8
 800aba2:	46bd      	mov	sp, r7
 800aba4:	bd80      	pop	{r7, pc}

0800aba6 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 800aba6:	b580      	push	{r7, lr}
 800aba8:	b086      	sub	sp, #24
 800abaa:	af00      	add	r7, sp, #0
 800abac:	60f8      	str	r0, [r7, #12]
 800abae:	60b9      	str	r1, [r7, #8]
 800abb0:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800abb2:	2300      	movs	r3, #0
 800abb4:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 800abb6:	68fb      	ldr	r3, [r7, #12]
 800abb8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800abbc:	2b01      	cmp	r3, #1
 800abbe:	d101      	bne.n	800abc4 <HAL_TIM_IC_ConfigChannel+0x1e>
 800abc0:	2302      	movs	r3, #2
 800abc2:	e088      	b.n	800acd6 <HAL_TIM_IC_ConfigChannel+0x130>
 800abc4:	68fb      	ldr	r3, [r7, #12]
 800abc6:	2201      	movs	r2, #1
 800abc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 800abcc:	687b      	ldr	r3, [r7, #4]
 800abce:	2b00      	cmp	r3, #0
 800abd0:	d11b      	bne.n	800ac0a <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 800abd2:	68fb      	ldr	r3, [r7, #12]
 800abd4:	6818      	ldr	r0, [r3, #0]
 800abd6:	68bb      	ldr	r3, [r7, #8]
 800abd8:	6819      	ldr	r1, [r3, #0]
 800abda:	68bb      	ldr	r3, [r7, #8]
 800abdc:	685a      	ldr	r2, [r3, #4]
 800abde:	68bb      	ldr	r3, [r7, #8]
 800abe0:	68db      	ldr	r3, [r3, #12]
 800abe2:	f000 fe17 	bl	800b814 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800abe6:	68fb      	ldr	r3, [r7, #12]
 800abe8:	681b      	ldr	r3, [r3, #0]
 800abea:	699a      	ldr	r2, [r3, #24]
 800abec:	68fb      	ldr	r3, [r7, #12]
 800abee:	681b      	ldr	r3, [r3, #0]
 800abf0:	f022 020c 	bic.w	r2, r2, #12
 800abf4:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800abf6:	68fb      	ldr	r3, [r7, #12]
 800abf8:	681b      	ldr	r3, [r3, #0]
 800abfa:	6999      	ldr	r1, [r3, #24]
 800abfc:	68bb      	ldr	r3, [r7, #8]
 800abfe:	689a      	ldr	r2, [r3, #8]
 800ac00:	68fb      	ldr	r3, [r7, #12]
 800ac02:	681b      	ldr	r3, [r3, #0]
 800ac04:	430a      	orrs	r2, r1
 800ac06:	619a      	str	r2, [r3, #24]
 800ac08:	e060      	b.n	800accc <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 800ac0a:	687b      	ldr	r3, [r7, #4]
 800ac0c:	2b04      	cmp	r3, #4
 800ac0e:	d11c      	bne.n	800ac4a <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800ac10:	68fb      	ldr	r3, [r7, #12]
 800ac12:	6818      	ldr	r0, [r3, #0]
 800ac14:	68bb      	ldr	r3, [r7, #8]
 800ac16:	6819      	ldr	r1, [r3, #0]
 800ac18:	68bb      	ldr	r3, [r7, #8]
 800ac1a:	685a      	ldr	r2, [r3, #4]
 800ac1c:	68bb      	ldr	r3, [r7, #8]
 800ac1e:	68db      	ldr	r3, [r3, #12]
 800ac20:	f000 fe9b 	bl	800b95a <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800ac24:	68fb      	ldr	r3, [r7, #12]
 800ac26:	681b      	ldr	r3, [r3, #0]
 800ac28:	699a      	ldr	r2, [r3, #24]
 800ac2a:	68fb      	ldr	r3, [r7, #12]
 800ac2c:	681b      	ldr	r3, [r3, #0]
 800ac2e:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800ac32:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800ac34:	68fb      	ldr	r3, [r7, #12]
 800ac36:	681b      	ldr	r3, [r3, #0]
 800ac38:	6999      	ldr	r1, [r3, #24]
 800ac3a:	68bb      	ldr	r3, [r7, #8]
 800ac3c:	689b      	ldr	r3, [r3, #8]
 800ac3e:	021a      	lsls	r2, r3, #8
 800ac40:	68fb      	ldr	r3, [r7, #12]
 800ac42:	681b      	ldr	r3, [r3, #0]
 800ac44:	430a      	orrs	r2, r1
 800ac46:	619a      	str	r2, [r3, #24]
 800ac48:	e040      	b.n	800accc <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 800ac4a:	687b      	ldr	r3, [r7, #4]
 800ac4c:	2b08      	cmp	r3, #8
 800ac4e:	d11b      	bne.n	800ac88 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800ac50:	68fb      	ldr	r3, [r7, #12]
 800ac52:	6818      	ldr	r0, [r3, #0]
 800ac54:	68bb      	ldr	r3, [r7, #8]
 800ac56:	6819      	ldr	r1, [r3, #0]
 800ac58:	68bb      	ldr	r3, [r7, #8]
 800ac5a:	685a      	ldr	r2, [r3, #4]
 800ac5c:	68bb      	ldr	r3, [r7, #8]
 800ac5e:	68db      	ldr	r3, [r3, #12]
 800ac60:	f000 fee8 	bl	800ba34 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800ac64:	68fb      	ldr	r3, [r7, #12]
 800ac66:	681b      	ldr	r3, [r3, #0]
 800ac68:	69da      	ldr	r2, [r3, #28]
 800ac6a:	68fb      	ldr	r3, [r7, #12]
 800ac6c:	681b      	ldr	r3, [r3, #0]
 800ac6e:	f022 020c 	bic.w	r2, r2, #12
 800ac72:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800ac74:	68fb      	ldr	r3, [r7, #12]
 800ac76:	681b      	ldr	r3, [r3, #0]
 800ac78:	69d9      	ldr	r1, [r3, #28]
 800ac7a:	68bb      	ldr	r3, [r7, #8]
 800ac7c:	689a      	ldr	r2, [r3, #8]
 800ac7e:	68fb      	ldr	r3, [r7, #12]
 800ac80:	681b      	ldr	r3, [r3, #0]
 800ac82:	430a      	orrs	r2, r1
 800ac84:	61da      	str	r2, [r3, #28]
 800ac86:	e021      	b.n	800accc <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 800ac88:	687b      	ldr	r3, [r7, #4]
 800ac8a:	2b0c      	cmp	r3, #12
 800ac8c:	d11c      	bne.n	800acc8 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 800ac8e:	68fb      	ldr	r3, [r7, #12]
 800ac90:	6818      	ldr	r0, [r3, #0]
 800ac92:	68bb      	ldr	r3, [r7, #8]
 800ac94:	6819      	ldr	r1, [r3, #0]
 800ac96:	68bb      	ldr	r3, [r7, #8]
 800ac98:	685a      	ldr	r2, [r3, #4]
 800ac9a:	68bb      	ldr	r3, [r7, #8]
 800ac9c:	68db      	ldr	r3, [r3, #12]
 800ac9e:	f000 ff05 	bl	800baac <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800aca2:	68fb      	ldr	r3, [r7, #12]
 800aca4:	681b      	ldr	r3, [r3, #0]
 800aca6:	69da      	ldr	r2, [r3, #28]
 800aca8:	68fb      	ldr	r3, [r7, #12]
 800acaa:	681b      	ldr	r3, [r3, #0]
 800acac:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800acb0:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800acb2:	68fb      	ldr	r3, [r7, #12]
 800acb4:	681b      	ldr	r3, [r3, #0]
 800acb6:	69d9      	ldr	r1, [r3, #28]
 800acb8:	68bb      	ldr	r3, [r7, #8]
 800acba:	689b      	ldr	r3, [r3, #8]
 800acbc:	021a      	lsls	r2, r3, #8
 800acbe:	68fb      	ldr	r3, [r7, #12]
 800acc0:	681b      	ldr	r3, [r3, #0]
 800acc2:	430a      	orrs	r2, r1
 800acc4:	61da      	str	r2, [r3, #28]
 800acc6:	e001      	b.n	800accc <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 800acc8:	2301      	movs	r3, #1
 800acca:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 800accc:	68fb      	ldr	r3, [r7, #12]
 800acce:	2200      	movs	r2, #0
 800acd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800acd4:	7dfb      	ldrb	r3, [r7, #23]
}
 800acd6:	4618      	mov	r0, r3
 800acd8:	3718      	adds	r7, #24
 800acda:	46bd      	mov	sp, r7
 800acdc:	bd80      	pop	{r7, pc}
	...

0800ace0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800ace0:	b580      	push	{r7, lr}
 800ace2:	b086      	sub	sp, #24
 800ace4:	af00      	add	r7, sp, #0
 800ace6:	60f8      	str	r0, [r7, #12]
 800ace8:	60b9      	str	r1, [r7, #8]
 800acea:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800acec:	2300      	movs	r3, #0
 800acee:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800acf0:	68fb      	ldr	r3, [r7, #12]
 800acf2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800acf6:	2b01      	cmp	r3, #1
 800acf8:	d101      	bne.n	800acfe <HAL_TIM_PWM_ConfigChannel+0x1e>
 800acfa:	2302      	movs	r3, #2
 800acfc:	e0ff      	b.n	800aefe <HAL_TIM_PWM_ConfigChannel+0x21e>
 800acfe:	68fb      	ldr	r3, [r7, #12]
 800ad00:	2201      	movs	r2, #1
 800ad02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800ad06:	687b      	ldr	r3, [r7, #4]
 800ad08:	2b14      	cmp	r3, #20
 800ad0a:	f200 80f0 	bhi.w	800aeee <HAL_TIM_PWM_ConfigChannel+0x20e>
 800ad0e:	a201      	add	r2, pc, #4	; (adr r2, 800ad14 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800ad10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ad14:	0800ad69 	.word	0x0800ad69
 800ad18:	0800aeef 	.word	0x0800aeef
 800ad1c:	0800aeef 	.word	0x0800aeef
 800ad20:	0800aeef 	.word	0x0800aeef
 800ad24:	0800ada9 	.word	0x0800ada9
 800ad28:	0800aeef 	.word	0x0800aeef
 800ad2c:	0800aeef 	.word	0x0800aeef
 800ad30:	0800aeef 	.word	0x0800aeef
 800ad34:	0800adeb 	.word	0x0800adeb
 800ad38:	0800aeef 	.word	0x0800aeef
 800ad3c:	0800aeef 	.word	0x0800aeef
 800ad40:	0800aeef 	.word	0x0800aeef
 800ad44:	0800ae2b 	.word	0x0800ae2b
 800ad48:	0800aeef 	.word	0x0800aeef
 800ad4c:	0800aeef 	.word	0x0800aeef
 800ad50:	0800aeef 	.word	0x0800aeef
 800ad54:	0800ae6d 	.word	0x0800ae6d
 800ad58:	0800aeef 	.word	0x0800aeef
 800ad5c:	0800aeef 	.word	0x0800aeef
 800ad60:	0800aeef 	.word	0x0800aeef
 800ad64:	0800aead 	.word	0x0800aead
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800ad68:	68fb      	ldr	r3, [r7, #12]
 800ad6a:	681b      	ldr	r3, [r3, #0]
 800ad6c:	68b9      	ldr	r1, [r7, #8]
 800ad6e:	4618      	mov	r0, r3
 800ad70:	f000 fa7a 	bl	800b268 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800ad74:	68fb      	ldr	r3, [r7, #12]
 800ad76:	681b      	ldr	r3, [r3, #0]
 800ad78:	699a      	ldr	r2, [r3, #24]
 800ad7a:	68fb      	ldr	r3, [r7, #12]
 800ad7c:	681b      	ldr	r3, [r3, #0]
 800ad7e:	f042 0208 	orr.w	r2, r2, #8
 800ad82:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800ad84:	68fb      	ldr	r3, [r7, #12]
 800ad86:	681b      	ldr	r3, [r3, #0]
 800ad88:	699a      	ldr	r2, [r3, #24]
 800ad8a:	68fb      	ldr	r3, [r7, #12]
 800ad8c:	681b      	ldr	r3, [r3, #0]
 800ad8e:	f022 0204 	bic.w	r2, r2, #4
 800ad92:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800ad94:	68fb      	ldr	r3, [r7, #12]
 800ad96:	681b      	ldr	r3, [r3, #0]
 800ad98:	6999      	ldr	r1, [r3, #24]
 800ad9a:	68bb      	ldr	r3, [r7, #8]
 800ad9c:	691a      	ldr	r2, [r3, #16]
 800ad9e:	68fb      	ldr	r3, [r7, #12]
 800ada0:	681b      	ldr	r3, [r3, #0]
 800ada2:	430a      	orrs	r2, r1
 800ada4:	619a      	str	r2, [r3, #24]
      break;
 800ada6:	e0a5      	b.n	800aef4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800ada8:	68fb      	ldr	r3, [r7, #12]
 800adaa:	681b      	ldr	r3, [r3, #0]
 800adac:	68b9      	ldr	r1, [r7, #8]
 800adae:	4618      	mov	r0, r3
 800adb0:	f000 faea 	bl	800b388 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800adb4:	68fb      	ldr	r3, [r7, #12]
 800adb6:	681b      	ldr	r3, [r3, #0]
 800adb8:	699a      	ldr	r2, [r3, #24]
 800adba:	68fb      	ldr	r3, [r7, #12]
 800adbc:	681b      	ldr	r3, [r3, #0]
 800adbe:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800adc2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800adc4:	68fb      	ldr	r3, [r7, #12]
 800adc6:	681b      	ldr	r3, [r3, #0]
 800adc8:	699a      	ldr	r2, [r3, #24]
 800adca:	68fb      	ldr	r3, [r7, #12]
 800adcc:	681b      	ldr	r3, [r3, #0]
 800adce:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800add2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800add4:	68fb      	ldr	r3, [r7, #12]
 800add6:	681b      	ldr	r3, [r3, #0]
 800add8:	6999      	ldr	r1, [r3, #24]
 800adda:	68bb      	ldr	r3, [r7, #8]
 800addc:	691b      	ldr	r3, [r3, #16]
 800adde:	021a      	lsls	r2, r3, #8
 800ade0:	68fb      	ldr	r3, [r7, #12]
 800ade2:	681b      	ldr	r3, [r3, #0]
 800ade4:	430a      	orrs	r2, r1
 800ade6:	619a      	str	r2, [r3, #24]
      break;
 800ade8:	e084      	b.n	800aef4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800adea:	68fb      	ldr	r3, [r7, #12]
 800adec:	681b      	ldr	r3, [r3, #0]
 800adee:	68b9      	ldr	r1, [r7, #8]
 800adf0:	4618      	mov	r0, r3
 800adf2:	f000 fb53 	bl	800b49c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800adf6:	68fb      	ldr	r3, [r7, #12]
 800adf8:	681b      	ldr	r3, [r3, #0]
 800adfa:	69da      	ldr	r2, [r3, #28]
 800adfc:	68fb      	ldr	r3, [r7, #12]
 800adfe:	681b      	ldr	r3, [r3, #0]
 800ae00:	f042 0208 	orr.w	r2, r2, #8
 800ae04:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800ae06:	68fb      	ldr	r3, [r7, #12]
 800ae08:	681b      	ldr	r3, [r3, #0]
 800ae0a:	69da      	ldr	r2, [r3, #28]
 800ae0c:	68fb      	ldr	r3, [r7, #12]
 800ae0e:	681b      	ldr	r3, [r3, #0]
 800ae10:	f022 0204 	bic.w	r2, r2, #4
 800ae14:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800ae16:	68fb      	ldr	r3, [r7, #12]
 800ae18:	681b      	ldr	r3, [r3, #0]
 800ae1a:	69d9      	ldr	r1, [r3, #28]
 800ae1c:	68bb      	ldr	r3, [r7, #8]
 800ae1e:	691a      	ldr	r2, [r3, #16]
 800ae20:	68fb      	ldr	r3, [r7, #12]
 800ae22:	681b      	ldr	r3, [r3, #0]
 800ae24:	430a      	orrs	r2, r1
 800ae26:	61da      	str	r2, [r3, #28]
      break;
 800ae28:	e064      	b.n	800aef4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800ae2a:	68fb      	ldr	r3, [r7, #12]
 800ae2c:	681b      	ldr	r3, [r3, #0]
 800ae2e:	68b9      	ldr	r1, [r7, #8]
 800ae30:	4618      	mov	r0, r3
 800ae32:	f000 fbbb 	bl	800b5ac <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800ae36:	68fb      	ldr	r3, [r7, #12]
 800ae38:	681b      	ldr	r3, [r3, #0]
 800ae3a:	69da      	ldr	r2, [r3, #28]
 800ae3c:	68fb      	ldr	r3, [r7, #12]
 800ae3e:	681b      	ldr	r3, [r3, #0]
 800ae40:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800ae44:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800ae46:	68fb      	ldr	r3, [r7, #12]
 800ae48:	681b      	ldr	r3, [r3, #0]
 800ae4a:	69da      	ldr	r2, [r3, #28]
 800ae4c:	68fb      	ldr	r3, [r7, #12]
 800ae4e:	681b      	ldr	r3, [r3, #0]
 800ae50:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ae54:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800ae56:	68fb      	ldr	r3, [r7, #12]
 800ae58:	681b      	ldr	r3, [r3, #0]
 800ae5a:	69d9      	ldr	r1, [r3, #28]
 800ae5c:	68bb      	ldr	r3, [r7, #8]
 800ae5e:	691b      	ldr	r3, [r3, #16]
 800ae60:	021a      	lsls	r2, r3, #8
 800ae62:	68fb      	ldr	r3, [r7, #12]
 800ae64:	681b      	ldr	r3, [r3, #0]
 800ae66:	430a      	orrs	r2, r1
 800ae68:	61da      	str	r2, [r3, #28]
      break;
 800ae6a:	e043      	b.n	800aef4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800ae6c:	68fb      	ldr	r3, [r7, #12]
 800ae6e:	681b      	ldr	r3, [r3, #0]
 800ae70:	68b9      	ldr	r1, [r7, #8]
 800ae72:	4618      	mov	r0, r3
 800ae74:	f000 fc04 	bl	800b680 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800ae78:	68fb      	ldr	r3, [r7, #12]
 800ae7a:	681b      	ldr	r3, [r3, #0]
 800ae7c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ae7e:	68fb      	ldr	r3, [r7, #12]
 800ae80:	681b      	ldr	r3, [r3, #0]
 800ae82:	f042 0208 	orr.w	r2, r2, #8
 800ae86:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800ae88:	68fb      	ldr	r3, [r7, #12]
 800ae8a:	681b      	ldr	r3, [r3, #0]
 800ae8c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ae8e:	68fb      	ldr	r3, [r7, #12]
 800ae90:	681b      	ldr	r3, [r3, #0]
 800ae92:	f022 0204 	bic.w	r2, r2, #4
 800ae96:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800ae98:	68fb      	ldr	r3, [r7, #12]
 800ae9a:	681b      	ldr	r3, [r3, #0]
 800ae9c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800ae9e:	68bb      	ldr	r3, [r7, #8]
 800aea0:	691a      	ldr	r2, [r3, #16]
 800aea2:	68fb      	ldr	r3, [r7, #12]
 800aea4:	681b      	ldr	r3, [r3, #0]
 800aea6:	430a      	orrs	r2, r1
 800aea8:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800aeaa:	e023      	b.n	800aef4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800aeac:	68fb      	ldr	r3, [r7, #12]
 800aeae:	681b      	ldr	r3, [r3, #0]
 800aeb0:	68b9      	ldr	r1, [r7, #8]
 800aeb2:	4618      	mov	r0, r3
 800aeb4:	f000 fc48 	bl	800b748 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800aeb8:	68fb      	ldr	r3, [r7, #12]
 800aeba:	681b      	ldr	r3, [r3, #0]
 800aebc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800aebe:	68fb      	ldr	r3, [r7, #12]
 800aec0:	681b      	ldr	r3, [r3, #0]
 800aec2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800aec6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800aec8:	68fb      	ldr	r3, [r7, #12]
 800aeca:	681b      	ldr	r3, [r3, #0]
 800aecc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800aece:	68fb      	ldr	r3, [r7, #12]
 800aed0:	681b      	ldr	r3, [r3, #0]
 800aed2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800aed6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800aed8:	68fb      	ldr	r3, [r7, #12]
 800aeda:	681b      	ldr	r3, [r3, #0]
 800aedc:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800aede:	68bb      	ldr	r3, [r7, #8]
 800aee0:	691b      	ldr	r3, [r3, #16]
 800aee2:	021a      	lsls	r2, r3, #8
 800aee4:	68fb      	ldr	r3, [r7, #12]
 800aee6:	681b      	ldr	r3, [r3, #0]
 800aee8:	430a      	orrs	r2, r1
 800aeea:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800aeec:	e002      	b.n	800aef4 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800aeee:	2301      	movs	r3, #1
 800aef0:	75fb      	strb	r3, [r7, #23]
      break;
 800aef2:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800aef4:	68fb      	ldr	r3, [r7, #12]
 800aef6:	2200      	movs	r2, #0
 800aef8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800aefc:	7dfb      	ldrb	r3, [r7, #23]
}
 800aefe:	4618      	mov	r0, r3
 800af00:	3718      	adds	r7, #24
 800af02:	46bd      	mov	sp, r7
 800af04:	bd80      	pop	{r7, pc}
 800af06:	bf00      	nop

0800af08 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800af08:	b580      	push	{r7, lr}
 800af0a:	b084      	sub	sp, #16
 800af0c:	af00      	add	r7, sp, #0
 800af0e:	6078      	str	r0, [r7, #4]
 800af10:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800af12:	2300      	movs	r3, #0
 800af14:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800af16:	687b      	ldr	r3, [r7, #4]
 800af18:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800af1c:	2b01      	cmp	r3, #1
 800af1e:	d101      	bne.n	800af24 <HAL_TIM_ConfigClockSource+0x1c>
 800af20:	2302      	movs	r3, #2
 800af22:	e0dc      	b.n	800b0de <HAL_TIM_ConfigClockSource+0x1d6>
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	2201      	movs	r2, #1
 800af28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800af2c:	687b      	ldr	r3, [r7, #4]
 800af2e:	2202      	movs	r2, #2
 800af30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800af34:	687b      	ldr	r3, [r7, #4]
 800af36:	681b      	ldr	r3, [r3, #0]
 800af38:	689b      	ldr	r3, [r3, #8]
 800af3a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800af3c:	68ba      	ldr	r2, [r7, #8]
 800af3e:	4b6a      	ldr	r3, [pc, #424]	; (800b0e8 <HAL_TIM_ConfigClockSource+0x1e0>)
 800af40:	4013      	ands	r3, r2
 800af42:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800af44:	68bb      	ldr	r3, [r7, #8]
 800af46:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800af4a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	681b      	ldr	r3, [r3, #0]
 800af50:	68ba      	ldr	r2, [r7, #8]
 800af52:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800af54:	683b      	ldr	r3, [r7, #0]
 800af56:	681b      	ldr	r3, [r3, #0]
 800af58:	4a64      	ldr	r2, [pc, #400]	; (800b0ec <HAL_TIM_ConfigClockSource+0x1e4>)
 800af5a:	4293      	cmp	r3, r2
 800af5c:	f000 80a9 	beq.w	800b0b2 <HAL_TIM_ConfigClockSource+0x1aa>
 800af60:	4a62      	ldr	r2, [pc, #392]	; (800b0ec <HAL_TIM_ConfigClockSource+0x1e4>)
 800af62:	4293      	cmp	r3, r2
 800af64:	f200 80ae 	bhi.w	800b0c4 <HAL_TIM_ConfigClockSource+0x1bc>
 800af68:	4a61      	ldr	r2, [pc, #388]	; (800b0f0 <HAL_TIM_ConfigClockSource+0x1e8>)
 800af6a:	4293      	cmp	r3, r2
 800af6c:	f000 80a1 	beq.w	800b0b2 <HAL_TIM_ConfigClockSource+0x1aa>
 800af70:	4a5f      	ldr	r2, [pc, #380]	; (800b0f0 <HAL_TIM_ConfigClockSource+0x1e8>)
 800af72:	4293      	cmp	r3, r2
 800af74:	f200 80a6 	bhi.w	800b0c4 <HAL_TIM_ConfigClockSource+0x1bc>
 800af78:	4a5e      	ldr	r2, [pc, #376]	; (800b0f4 <HAL_TIM_ConfigClockSource+0x1ec>)
 800af7a:	4293      	cmp	r3, r2
 800af7c:	f000 8099 	beq.w	800b0b2 <HAL_TIM_ConfigClockSource+0x1aa>
 800af80:	4a5c      	ldr	r2, [pc, #368]	; (800b0f4 <HAL_TIM_ConfigClockSource+0x1ec>)
 800af82:	4293      	cmp	r3, r2
 800af84:	f200 809e 	bhi.w	800b0c4 <HAL_TIM_ConfigClockSource+0x1bc>
 800af88:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800af8c:	f000 8091 	beq.w	800b0b2 <HAL_TIM_ConfigClockSource+0x1aa>
 800af90:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800af94:	f200 8096 	bhi.w	800b0c4 <HAL_TIM_ConfigClockSource+0x1bc>
 800af98:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800af9c:	f000 8089 	beq.w	800b0b2 <HAL_TIM_ConfigClockSource+0x1aa>
 800afa0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800afa4:	f200 808e 	bhi.w	800b0c4 <HAL_TIM_ConfigClockSource+0x1bc>
 800afa8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800afac:	d03e      	beq.n	800b02c <HAL_TIM_ConfigClockSource+0x124>
 800afae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800afb2:	f200 8087 	bhi.w	800b0c4 <HAL_TIM_ConfigClockSource+0x1bc>
 800afb6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800afba:	f000 8086 	beq.w	800b0ca <HAL_TIM_ConfigClockSource+0x1c2>
 800afbe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800afc2:	d87f      	bhi.n	800b0c4 <HAL_TIM_ConfigClockSource+0x1bc>
 800afc4:	2b70      	cmp	r3, #112	; 0x70
 800afc6:	d01a      	beq.n	800affe <HAL_TIM_ConfigClockSource+0xf6>
 800afc8:	2b70      	cmp	r3, #112	; 0x70
 800afca:	d87b      	bhi.n	800b0c4 <HAL_TIM_ConfigClockSource+0x1bc>
 800afcc:	2b60      	cmp	r3, #96	; 0x60
 800afce:	d050      	beq.n	800b072 <HAL_TIM_ConfigClockSource+0x16a>
 800afd0:	2b60      	cmp	r3, #96	; 0x60
 800afd2:	d877      	bhi.n	800b0c4 <HAL_TIM_ConfigClockSource+0x1bc>
 800afd4:	2b50      	cmp	r3, #80	; 0x50
 800afd6:	d03c      	beq.n	800b052 <HAL_TIM_ConfigClockSource+0x14a>
 800afd8:	2b50      	cmp	r3, #80	; 0x50
 800afda:	d873      	bhi.n	800b0c4 <HAL_TIM_ConfigClockSource+0x1bc>
 800afdc:	2b40      	cmp	r3, #64	; 0x40
 800afde:	d058      	beq.n	800b092 <HAL_TIM_ConfigClockSource+0x18a>
 800afe0:	2b40      	cmp	r3, #64	; 0x40
 800afe2:	d86f      	bhi.n	800b0c4 <HAL_TIM_ConfigClockSource+0x1bc>
 800afe4:	2b30      	cmp	r3, #48	; 0x30
 800afe6:	d064      	beq.n	800b0b2 <HAL_TIM_ConfigClockSource+0x1aa>
 800afe8:	2b30      	cmp	r3, #48	; 0x30
 800afea:	d86b      	bhi.n	800b0c4 <HAL_TIM_ConfigClockSource+0x1bc>
 800afec:	2b20      	cmp	r3, #32
 800afee:	d060      	beq.n	800b0b2 <HAL_TIM_ConfigClockSource+0x1aa>
 800aff0:	2b20      	cmp	r3, #32
 800aff2:	d867      	bhi.n	800b0c4 <HAL_TIM_ConfigClockSource+0x1bc>
 800aff4:	2b00      	cmp	r3, #0
 800aff6:	d05c      	beq.n	800b0b2 <HAL_TIM_ConfigClockSource+0x1aa>
 800aff8:	2b10      	cmp	r3, #16
 800affa:	d05a      	beq.n	800b0b2 <HAL_TIM_ConfigClockSource+0x1aa>
 800affc:	e062      	b.n	800b0c4 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800affe:	687b      	ldr	r3, [r7, #4]
 800b000:	6818      	ldr	r0, [r3, #0]
 800b002:	683b      	ldr	r3, [r7, #0]
 800b004:	6899      	ldr	r1, [r3, #8]
 800b006:	683b      	ldr	r3, [r7, #0]
 800b008:	685a      	ldr	r2, [r3, #4]
 800b00a:	683b      	ldr	r3, [r7, #0]
 800b00c:	68db      	ldr	r3, [r3, #12]
 800b00e:	f000 fda9 	bl	800bb64 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800b012:	687b      	ldr	r3, [r7, #4]
 800b014:	681b      	ldr	r3, [r3, #0]
 800b016:	689b      	ldr	r3, [r3, #8]
 800b018:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800b01a:	68bb      	ldr	r3, [r7, #8]
 800b01c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800b020:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800b022:	687b      	ldr	r3, [r7, #4]
 800b024:	681b      	ldr	r3, [r3, #0]
 800b026:	68ba      	ldr	r2, [r7, #8]
 800b028:	609a      	str	r2, [r3, #8]
      break;
 800b02a:	e04f      	b.n	800b0cc <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b02c:	687b      	ldr	r3, [r7, #4]
 800b02e:	6818      	ldr	r0, [r3, #0]
 800b030:	683b      	ldr	r3, [r7, #0]
 800b032:	6899      	ldr	r1, [r3, #8]
 800b034:	683b      	ldr	r3, [r7, #0]
 800b036:	685a      	ldr	r2, [r3, #4]
 800b038:	683b      	ldr	r3, [r7, #0]
 800b03a:	68db      	ldr	r3, [r3, #12]
 800b03c:	f000 fd92 	bl	800bb64 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800b040:	687b      	ldr	r3, [r7, #4]
 800b042:	681b      	ldr	r3, [r3, #0]
 800b044:	689a      	ldr	r2, [r3, #8]
 800b046:	687b      	ldr	r3, [r7, #4]
 800b048:	681b      	ldr	r3, [r3, #0]
 800b04a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800b04e:	609a      	str	r2, [r3, #8]
      break;
 800b050:	e03c      	b.n	800b0cc <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b052:	687b      	ldr	r3, [r7, #4]
 800b054:	6818      	ldr	r0, [r3, #0]
 800b056:	683b      	ldr	r3, [r7, #0]
 800b058:	6859      	ldr	r1, [r3, #4]
 800b05a:	683b      	ldr	r3, [r7, #0]
 800b05c:	68db      	ldr	r3, [r3, #12]
 800b05e:	461a      	mov	r2, r3
 800b060:	f000 fc4c 	bl	800b8fc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800b064:	687b      	ldr	r3, [r7, #4]
 800b066:	681b      	ldr	r3, [r3, #0]
 800b068:	2150      	movs	r1, #80	; 0x50
 800b06a:	4618      	mov	r0, r3
 800b06c:	f000 fd5c 	bl	800bb28 <TIM_ITRx_SetConfig>
      break;
 800b070:	e02c      	b.n	800b0cc <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800b072:	687b      	ldr	r3, [r7, #4]
 800b074:	6818      	ldr	r0, [r3, #0]
 800b076:	683b      	ldr	r3, [r7, #0]
 800b078:	6859      	ldr	r1, [r3, #4]
 800b07a:	683b      	ldr	r3, [r7, #0]
 800b07c:	68db      	ldr	r3, [r3, #12]
 800b07e:	461a      	mov	r2, r3
 800b080:	f000 fca8 	bl	800b9d4 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800b084:	687b      	ldr	r3, [r7, #4]
 800b086:	681b      	ldr	r3, [r3, #0]
 800b088:	2160      	movs	r1, #96	; 0x60
 800b08a:	4618      	mov	r0, r3
 800b08c:	f000 fd4c 	bl	800bb28 <TIM_ITRx_SetConfig>
      break;
 800b090:	e01c      	b.n	800b0cc <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b092:	687b      	ldr	r3, [r7, #4]
 800b094:	6818      	ldr	r0, [r3, #0]
 800b096:	683b      	ldr	r3, [r7, #0]
 800b098:	6859      	ldr	r1, [r3, #4]
 800b09a:	683b      	ldr	r3, [r7, #0]
 800b09c:	68db      	ldr	r3, [r3, #12]
 800b09e:	461a      	mov	r2, r3
 800b0a0:	f000 fc2c 	bl	800b8fc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800b0a4:	687b      	ldr	r3, [r7, #4]
 800b0a6:	681b      	ldr	r3, [r3, #0]
 800b0a8:	2140      	movs	r1, #64	; 0x40
 800b0aa:	4618      	mov	r0, r3
 800b0ac:	f000 fd3c 	bl	800bb28 <TIM_ITRx_SetConfig>
      break;
 800b0b0:	e00c      	b.n	800b0cc <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800b0b2:	687b      	ldr	r3, [r7, #4]
 800b0b4:	681a      	ldr	r2, [r3, #0]
 800b0b6:	683b      	ldr	r3, [r7, #0]
 800b0b8:	681b      	ldr	r3, [r3, #0]
 800b0ba:	4619      	mov	r1, r3
 800b0bc:	4610      	mov	r0, r2
 800b0be:	f000 fd33 	bl	800bb28 <TIM_ITRx_SetConfig>
      break;
 800b0c2:	e003      	b.n	800b0cc <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800b0c4:	2301      	movs	r3, #1
 800b0c6:	73fb      	strb	r3, [r7, #15]
      break;
 800b0c8:	e000      	b.n	800b0cc <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800b0ca:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800b0cc:	687b      	ldr	r3, [r7, #4]
 800b0ce:	2201      	movs	r2, #1
 800b0d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b0d4:	687b      	ldr	r3, [r7, #4]
 800b0d6:	2200      	movs	r2, #0
 800b0d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800b0dc:	7bfb      	ldrb	r3, [r7, #15]
}
 800b0de:	4618      	mov	r0, r3
 800b0e0:	3710      	adds	r7, #16
 800b0e2:	46bd      	mov	sp, r7
 800b0e4:	bd80      	pop	{r7, pc}
 800b0e6:	bf00      	nop
 800b0e8:	ffceff88 	.word	0xffceff88
 800b0ec:	00100040 	.word	0x00100040
 800b0f0:	00100030 	.word	0x00100030
 800b0f4:	00100020 	.word	0x00100020

0800b0f8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800b0f8:	b480      	push	{r7}
 800b0fa:	b083      	sub	sp, #12
 800b0fc:	af00      	add	r7, sp, #0
 800b0fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800b100:	bf00      	nop
 800b102:	370c      	adds	r7, #12
 800b104:	46bd      	mov	sp, r7
 800b106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b10a:	4770      	bx	lr

0800b10c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800b10c:	b480      	push	{r7}
 800b10e:	b083      	sub	sp, #12
 800b110:	af00      	add	r7, sp, #0
 800b112:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800b114:	bf00      	nop
 800b116:	370c      	adds	r7, #12
 800b118:	46bd      	mov	sp, r7
 800b11a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b11e:	4770      	bx	lr

0800b120 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800b120:	b480      	push	{r7}
 800b122:	b083      	sub	sp, #12
 800b124:	af00      	add	r7, sp, #0
 800b126:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800b128:	bf00      	nop
 800b12a:	370c      	adds	r7, #12
 800b12c:	46bd      	mov	sp, r7
 800b12e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b132:	4770      	bx	lr

0800b134 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800b134:	b480      	push	{r7}
 800b136:	b085      	sub	sp, #20
 800b138:	af00      	add	r7, sp, #0
 800b13a:	6078      	str	r0, [r7, #4]
 800b13c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800b13e:	687b      	ldr	r3, [r7, #4]
 800b140:	681b      	ldr	r3, [r3, #0]
 800b142:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b144:	687b      	ldr	r3, [r7, #4]
 800b146:	4a40      	ldr	r2, [pc, #256]	; (800b248 <TIM_Base_SetConfig+0x114>)
 800b148:	4293      	cmp	r3, r2
 800b14a:	d013      	beq.n	800b174 <TIM_Base_SetConfig+0x40>
 800b14c:	687b      	ldr	r3, [r7, #4]
 800b14e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b152:	d00f      	beq.n	800b174 <TIM_Base_SetConfig+0x40>
 800b154:	687b      	ldr	r3, [r7, #4]
 800b156:	4a3d      	ldr	r2, [pc, #244]	; (800b24c <TIM_Base_SetConfig+0x118>)
 800b158:	4293      	cmp	r3, r2
 800b15a:	d00b      	beq.n	800b174 <TIM_Base_SetConfig+0x40>
 800b15c:	687b      	ldr	r3, [r7, #4]
 800b15e:	4a3c      	ldr	r2, [pc, #240]	; (800b250 <TIM_Base_SetConfig+0x11c>)
 800b160:	4293      	cmp	r3, r2
 800b162:	d007      	beq.n	800b174 <TIM_Base_SetConfig+0x40>
 800b164:	687b      	ldr	r3, [r7, #4]
 800b166:	4a3b      	ldr	r2, [pc, #236]	; (800b254 <TIM_Base_SetConfig+0x120>)
 800b168:	4293      	cmp	r3, r2
 800b16a:	d003      	beq.n	800b174 <TIM_Base_SetConfig+0x40>
 800b16c:	687b      	ldr	r3, [r7, #4]
 800b16e:	4a3a      	ldr	r2, [pc, #232]	; (800b258 <TIM_Base_SetConfig+0x124>)
 800b170:	4293      	cmp	r3, r2
 800b172:	d108      	bne.n	800b186 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800b174:	68fb      	ldr	r3, [r7, #12]
 800b176:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b17a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800b17c:	683b      	ldr	r3, [r7, #0]
 800b17e:	685b      	ldr	r3, [r3, #4]
 800b180:	68fa      	ldr	r2, [r7, #12]
 800b182:	4313      	orrs	r3, r2
 800b184:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800b186:	687b      	ldr	r3, [r7, #4]
 800b188:	4a2f      	ldr	r2, [pc, #188]	; (800b248 <TIM_Base_SetConfig+0x114>)
 800b18a:	4293      	cmp	r3, r2
 800b18c:	d01f      	beq.n	800b1ce <TIM_Base_SetConfig+0x9a>
 800b18e:	687b      	ldr	r3, [r7, #4]
 800b190:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b194:	d01b      	beq.n	800b1ce <TIM_Base_SetConfig+0x9a>
 800b196:	687b      	ldr	r3, [r7, #4]
 800b198:	4a2c      	ldr	r2, [pc, #176]	; (800b24c <TIM_Base_SetConfig+0x118>)
 800b19a:	4293      	cmp	r3, r2
 800b19c:	d017      	beq.n	800b1ce <TIM_Base_SetConfig+0x9a>
 800b19e:	687b      	ldr	r3, [r7, #4]
 800b1a0:	4a2b      	ldr	r2, [pc, #172]	; (800b250 <TIM_Base_SetConfig+0x11c>)
 800b1a2:	4293      	cmp	r3, r2
 800b1a4:	d013      	beq.n	800b1ce <TIM_Base_SetConfig+0x9a>
 800b1a6:	687b      	ldr	r3, [r7, #4]
 800b1a8:	4a2a      	ldr	r2, [pc, #168]	; (800b254 <TIM_Base_SetConfig+0x120>)
 800b1aa:	4293      	cmp	r3, r2
 800b1ac:	d00f      	beq.n	800b1ce <TIM_Base_SetConfig+0x9a>
 800b1ae:	687b      	ldr	r3, [r7, #4]
 800b1b0:	4a29      	ldr	r2, [pc, #164]	; (800b258 <TIM_Base_SetConfig+0x124>)
 800b1b2:	4293      	cmp	r3, r2
 800b1b4:	d00b      	beq.n	800b1ce <TIM_Base_SetConfig+0x9a>
 800b1b6:	687b      	ldr	r3, [r7, #4]
 800b1b8:	4a28      	ldr	r2, [pc, #160]	; (800b25c <TIM_Base_SetConfig+0x128>)
 800b1ba:	4293      	cmp	r3, r2
 800b1bc:	d007      	beq.n	800b1ce <TIM_Base_SetConfig+0x9a>
 800b1be:	687b      	ldr	r3, [r7, #4]
 800b1c0:	4a27      	ldr	r2, [pc, #156]	; (800b260 <TIM_Base_SetConfig+0x12c>)
 800b1c2:	4293      	cmp	r3, r2
 800b1c4:	d003      	beq.n	800b1ce <TIM_Base_SetConfig+0x9a>
 800b1c6:	687b      	ldr	r3, [r7, #4]
 800b1c8:	4a26      	ldr	r2, [pc, #152]	; (800b264 <TIM_Base_SetConfig+0x130>)
 800b1ca:	4293      	cmp	r3, r2
 800b1cc:	d108      	bne.n	800b1e0 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800b1ce:	68fb      	ldr	r3, [r7, #12]
 800b1d0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b1d4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800b1d6:	683b      	ldr	r3, [r7, #0]
 800b1d8:	68db      	ldr	r3, [r3, #12]
 800b1da:	68fa      	ldr	r2, [r7, #12]
 800b1dc:	4313      	orrs	r3, r2
 800b1de:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800b1e0:	68fb      	ldr	r3, [r7, #12]
 800b1e2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800b1e6:	683b      	ldr	r3, [r7, #0]
 800b1e8:	695b      	ldr	r3, [r3, #20]
 800b1ea:	4313      	orrs	r3, r2
 800b1ec:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800b1ee:	687b      	ldr	r3, [r7, #4]
 800b1f0:	68fa      	ldr	r2, [r7, #12]
 800b1f2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800b1f4:	683b      	ldr	r3, [r7, #0]
 800b1f6:	689a      	ldr	r2, [r3, #8]
 800b1f8:	687b      	ldr	r3, [r7, #4]
 800b1fa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800b1fc:	683b      	ldr	r3, [r7, #0]
 800b1fe:	681a      	ldr	r2, [r3, #0]
 800b200:	687b      	ldr	r3, [r7, #4]
 800b202:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800b204:	687b      	ldr	r3, [r7, #4]
 800b206:	4a10      	ldr	r2, [pc, #64]	; (800b248 <TIM_Base_SetConfig+0x114>)
 800b208:	4293      	cmp	r3, r2
 800b20a:	d00f      	beq.n	800b22c <TIM_Base_SetConfig+0xf8>
 800b20c:	687b      	ldr	r3, [r7, #4]
 800b20e:	4a12      	ldr	r2, [pc, #72]	; (800b258 <TIM_Base_SetConfig+0x124>)
 800b210:	4293      	cmp	r3, r2
 800b212:	d00b      	beq.n	800b22c <TIM_Base_SetConfig+0xf8>
 800b214:	687b      	ldr	r3, [r7, #4]
 800b216:	4a11      	ldr	r2, [pc, #68]	; (800b25c <TIM_Base_SetConfig+0x128>)
 800b218:	4293      	cmp	r3, r2
 800b21a:	d007      	beq.n	800b22c <TIM_Base_SetConfig+0xf8>
 800b21c:	687b      	ldr	r3, [r7, #4]
 800b21e:	4a10      	ldr	r2, [pc, #64]	; (800b260 <TIM_Base_SetConfig+0x12c>)
 800b220:	4293      	cmp	r3, r2
 800b222:	d003      	beq.n	800b22c <TIM_Base_SetConfig+0xf8>
 800b224:	687b      	ldr	r3, [r7, #4]
 800b226:	4a0f      	ldr	r2, [pc, #60]	; (800b264 <TIM_Base_SetConfig+0x130>)
 800b228:	4293      	cmp	r3, r2
 800b22a:	d103      	bne.n	800b234 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800b22c:	683b      	ldr	r3, [r7, #0]
 800b22e:	691a      	ldr	r2, [r3, #16]
 800b230:	687b      	ldr	r3, [r7, #4]
 800b232:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800b234:	687b      	ldr	r3, [r7, #4]
 800b236:	2201      	movs	r2, #1
 800b238:	615a      	str	r2, [r3, #20]
}
 800b23a:	bf00      	nop
 800b23c:	3714      	adds	r7, #20
 800b23e:	46bd      	mov	sp, r7
 800b240:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b244:	4770      	bx	lr
 800b246:	bf00      	nop
 800b248:	40010000 	.word	0x40010000
 800b24c:	40000400 	.word	0x40000400
 800b250:	40000800 	.word	0x40000800
 800b254:	40000c00 	.word	0x40000c00
 800b258:	40010400 	.word	0x40010400
 800b25c:	40014000 	.word	0x40014000
 800b260:	40014400 	.word	0x40014400
 800b264:	40014800 	.word	0x40014800

0800b268 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b268:	b480      	push	{r7}
 800b26a:	b087      	sub	sp, #28
 800b26c:	af00      	add	r7, sp, #0
 800b26e:	6078      	str	r0, [r7, #4]
 800b270:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b272:	687b      	ldr	r3, [r7, #4]
 800b274:	6a1b      	ldr	r3, [r3, #32]
 800b276:	f023 0201 	bic.w	r2, r3, #1
 800b27a:	687b      	ldr	r3, [r7, #4]
 800b27c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b27e:	687b      	ldr	r3, [r7, #4]
 800b280:	6a1b      	ldr	r3, [r3, #32]
 800b282:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b284:	687b      	ldr	r3, [r7, #4]
 800b286:	685b      	ldr	r3, [r3, #4]
 800b288:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b28a:	687b      	ldr	r3, [r7, #4]
 800b28c:	699b      	ldr	r3, [r3, #24]
 800b28e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800b290:	68fa      	ldr	r2, [r7, #12]
 800b292:	4b37      	ldr	r3, [pc, #220]	; (800b370 <TIM_OC1_SetConfig+0x108>)
 800b294:	4013      	ands	r3, r2
 800b296:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800b298:	68fb      	ldr	r3, [r7, #12]
 800b29a:	f023 0303 	bic.w	r3, r3, #3
 800b29e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b2a0:	683b      	ldr	r3, [r7, #0]
 800b2a2:	681b      	ldr	r3, [r3, #0]
 800b2a4:	68fa      	ldr	r2, [r7, #12]
 800b2a6:	4313      	orrs	r3, r2
 800b2a8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800b2aa:	697b      	ldr	r3, [r7, #20]
 800b2ac:	f023 0302 	bic.w	r3, r3, #2
 800b2b0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800b2b2:	683b      	ldr	r3, [r7, #0]
 800b2b4:	689b      	ldr	r3, [r3, #8]
 800b2b6:	697a      	ldr	r2, [r7, #20]
 800b2b8:	4313      	orrs	r3, r2
 800b2ba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800b2bc:	687b      	ldr	r3, [r7, #4]
 800b2be:	4a2d      	ldr	r2, [pc, #180]	; (800b374 <TIM_OC1_SetConfig+0x10c>)
 800b2c0:	4293      	cmp	r3, r2
 800b2c2:	d00f      	beq.n	800b2e4 <TIM_OC1_SetConfig+0x7c>
 800b2c4:	687b      	ldr	r3, [r7, #4]
 800b2c6:	4a2c      	ldr	r2, [pc, #176]	; (800b378 <TIM_OC1_SetConfig+0x110>)
 800b2c8:	4293      	cmp	r3, r2
 800b2ca:	d00b      	beq.n	800b2e4 <TIM_OC1_SetConfig+0x7c>
 800b2cc:	687b      	ldr	r3, [r7, #4]
 800b2ce:	4a2b      	ldr	r2, [pc, #172]	; (800b37c <TIM_OC1_SetConfig+0x114>)
 800b2d0:	4293      	cmp	r3, r2
 800b2d2:	d007      	beq.n	800b2e4 <TIM_OC1_SetConfig+0x7c>
 800b2d4:	687b      	ldr	r3, [r7, #4]
 800b2d6:	4a2a      	ldr	r2, [pc, #168]	; (800b380 <TIM_OC1_SetConfig+0x118>)
 800b2d8:	4293      	cmp	r3, r2
 800b2da:	d003      	beq.n	800b2e4 <TIM_OC1_SetConfig+0x7c>
 800b2dc:	687b      	ldr	r3, [r7, #4]
 800b2de:	4a29      	ldr	r2, [pc, #164]	; (800b384 <TIM_OC1_SetConfig+0x11c>)
 800b2e0:	4293      	cmp	r3, r2
 800b2e2:	d10c      	bne.n	800b2fe <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800b2e4:	697b      	ldr	r3, [r7, #20]
 800b2e6:	f023 0308 	bic.w	r3, r3, #8
 800b2ea:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800b2ec:	683b      	ldr	r3, [r7, #0]
 800b2ee:	68db      	ldr	r3, [r3, #12]
 800b2f0:	697a      	ldr	r2, [r7, #20]
 800b2f2:	4313      	orrs	r3, r2
 800b2f4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800b2f6:	697b      	ldr	r3, [r7, #20]
 800b2f8:	f023 0304 	bic.w	r3, r3, #4
 800b2fc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b2fe:	687b      	ldr	r3, [r7, #4]
 800b300:	4a1c      	ldr	r2, [pc, #112]	; (800b374 <TIM_OC1_SetConfig+0x10c>)
 800b302:	4293      	cmp	r3, r2
 800b304:	d00f      	beq.n	800b326 <TIM_OC1_SetConfig+0xbe>
 800b306:	687b      	ldr	r3, [r7, #4]
 800b308:	4a1b      	ldr	r2, [pc, #108]	; (800b378 <TIM_OC1_SetConfig+0x110>)
 800b30a:	4293      	cmp	r3, r2
 800b30c:	d00b      	beq.n	800b326 <TIM_OC1_SetConfig+0xbe>
 800b30e:	687b      	ldr	r3, [r7, #4]
 800b310:	4a1a      	ldr	r2, [pc, #104]	; (800b37c <TIM_OC1_SetConfig+0x114>)
 800b312:	4293      	cmp	r3, r2
 800b314:	d007      	beq.n	800b326 <TIM_OC1_SetConfig+0xbe>
 800b316:	687b      	ldr	r3, [r7, #4]
 800b318:	4a19      	ldr	r2, [pc, #100]	; (800b380 <TIM_OC1_SetConfig+0x118>)
 800b31a:	4293      	cmp	r3, r2
 800b31c:	d003      	beq.n	800b326 <TIM_OC1_SetConfig+0xbe>
 800b31e:	687b      	ldr	r3, [r7, #4]
 800b320:	4a18      	ldr	r2, [pc, #96]	; (800b384 <TIM_OC1_SetConfig+0x11c>)
 800b322:	4293      	cmp	r3, r2
 800b324:	d111      	bne.n	800b34a <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800b326:	693b      	ldr	r3, [r7, #16]
 800b328:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b32c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800b32e:	693b      	ldr	r3, [r7, #16]
 800b330:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800b334:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800b336:	683b      	ldr	r3, [r7, #0]
 800b338:	695b      	ldr	r3, [r3, #20]
 800b33a:	693a      	ldr	r2, [r7, #16]
 800b33c:	4313      	orrs	r3, r2
 800b33e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800b340:	683b      	ldr	r3, [r7, #0]
 800b342:	699b      	ldr	r3, [r3, #24]
 800b344:	693a      	ldr	r2, [r7, #16]
 800b346:	4313      	orrs	r3, r2
 800b348:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b34a:	687b      	ldr	r3, [r7, #4]
 800b34c:	693a      	ldr	r2, [r7, #16]
 800b34e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b350:	687b      	ldr	r3, [r7, #4]
 800b352:	68fa      	ldr	r2, [r7, #12]
 800b354:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800b356:	683b      	ldr	r3, [r7, #0]
 800b358:	685a      	ldr	r2, [r3, #4]
 800b35a:	687b      	ldr	r3, [r7, #4]
 800b35c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b35e:	687b      	ldr	r3, [r7, #4]
 800b360:	697a      	ldr	r2, [r7, #20]
 800b362:	621a      	str	r2, [r3, #32]
}
 800b364:	bf00      	nop
 800b366:	371c      	adds	r7, #28
 800b368:	46bd      	mov	sp, r7
 800b36a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b36e:	4770      	bx	lr
 800b370:	fffeff8f 	.word	0xfffeff8f
 800b374:	40010000 	.word	0x40010000
 800b378:	40010400 	.word	0x40010400
 800b37c:	40014000 	.word	0x40014000
 800b380:	40014400 	.word	0x40014400
 800b384:	40014800 	.word	0x40014800

0800b388 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b388:	b480      	push	{r7}
 800b38a:	b087      	sub	sp, #28
 800b38c:	af00      	add	r7, sp, #0
 800b38e:	6078      	str	r0, [r7, #4]
 800b390:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b392:	687b      	ldr	r3, [r7, #4]
 800b394:	6a1b      	ldr	r3, [r3, #32]
 800b396:	f023 0210 	bic.w	r2, r3, #16
 800b39a:	687b      	ldr	r3, [r7, #4]
 800b39c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b39e:	687b      	ldr	r3, [r7, #4]
 800b3a0:	6a1b      	ldr	r3, [r3, #32]
 800b3a2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b3a4:	687b      	ldr	r3, [r7, #4]
 800b3a6:	685b      	ldr	r3, [r3, #4]
 800b3a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b3aa:	687b      	ldr	r3, [r7, #4]
 800b3ac:	699b      	ldr	r3, [r3, #24]
 800b3ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800b3b0:	68fa      	ldr	r2, [r7, #12]
 800b3b2:	4b34      	ldr	r3, [pc, #208]	; (800b484 <TIM_OC2_SetConfig+0xfc>)
 800b3b4:	4013      	ands	r3, r2
 800b3b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800b3b8:	68fb      	ldr	r3, [r7, #12]
 800b3ba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b3be:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b3c0:	683b      	ldr	r3, [r7, #0]
 800b3c2:	681b      	ldr	r3, [r3, #0]
 800b3c4:	021b      	lsls	r3, r3, #8
 800b3c6:	68fa      	ldr	r2, [r7, #12]
 800b3c8:	4313      	orrs	r3, r2
 800b3ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800b3cc:	697b      	ldr	r3, [r7, #20]
 800b3ce:	f023 0320 	bic.w	r3, r3, #32
 800b3d2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800b3d4:	683b      	ldr	r3, [r7, #0]
 800b3d6:	689b      	ldr	r3, [r3, #8]
 800b3d8:	011b      	lsls	r3, r3, #4
 800b3da:	697a      	ldr	r2, [r7, #20]
 800b3dc:	4313      	orrs	r3, r2
 800b3de:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800b3e0:	687b      	ldr	r3, [r7, #4]
 800b3e2:	4a29      	ldr	r2, [pc, #164]	; (800b488 <TIM_OC2_SetConfig+0x100>)
 800b3e4:	4293      	cmp	r3, r2
 800b3e6:	d003      	beq.n	800b3f0 <TIM_OC2_SetConfig+0x68>
 800b3e8:	687b      	ldr	r3, [r7, #4]
 800b3ea:	4a28      	ldr	r2, [pc, #160]	; (800b48c <TIM_OC2_SetConfig+0x104>)
 800b3ec:	4293      	cmp	r3, r2
 800b3ee:	d10d      	bne.n	800b40c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800b3f0:	697b      	ldr	r3, [r7, #20]
 800b3f2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b3f6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800b3f8:	683b      	ldr	r3, [r7, #0]
 800b3fa:	68db      	ldr	r3, [r3, #12]
 800b3fc:	011b      	lsls	r3, r3, #4
 800b3fe:	697a      	ldr	r2, [r7, #20]
 800b400:	4313      	orrs	r3, r2
 800b402:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800b404:	697b      	ldr	r3, [r7, #20]
 800b406:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b40a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b40c:	687b      	ldr	r3, [r7, #4]
 800b40e:	4a1e      	ldr	r2, [pc, #120]	; (800b488 <TIM_OC2_SetConfig+0x100>)
 800b410:	4293      	cmp	r3, r2
 800b412:	d00f      	beq.n	800b434 <TIM_OC2_SetConfig+0xac>
 800b414:	687b      	ldr	r3, [r7, #4]
 800b416:	4a1d      	ldr	r2, [pc, #116]	; (800b48c <TIM_OC2_SetConfig+0x104>)
 800b418:	4293      	cmp	r3, r2
 800b41a:	d00b      	beq.n	800b434 <TIM_OC2_SetConfig+0xac>
 800b41c:	687b      	ldr	r3, [r7, #4]
 800b41e:	4a1c      	ldr	r2, [pc, #112]	; (800b490 <TIM_OC2_SetConfig+0x108>)
 800b420:	4293      	cmp	r3, r2
 800b422:	d007      	beq.n	800b434 <TIM_OC2_SetConfig+0xac>
 800b424:	687b      	ldr	r3, [r7, #4]
 800b426:	4a1b      	ldr	r2, [pc, #108]	; (800b494 <TIM_OC2_SetConfig+0x10c>)
 800b428:	4293      	cmp	r3, r2
 800b42a:	d003      	beq.n	800b434 <TIM_OC2_SetConfig+0xac>
 800b42c:	687b      	ldr	r3, [r7, #4]
 800b42e:	4a1a      	ldr	r2, [pc, #104]	; (800b498 <TIM_OC2_SetConfig+0x110>)
 800b430:	4293      	cmp	r3, r2
 800b432:	d113      	bne.n	800b45c <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800b434:	693b      	ldr	r3, [r7, #16]
 800b436:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800b43a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800b43c:	693b      	ldr	r3, [r7, #16]
 800b43e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800b442:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800b444:	683b      	ldr	r3, [r7, #0]
 800b446:	695b      	ldr	r3, [r3, #20]
 800b448:	009b      	lsls	r3, r3, #2
 800b44a:	693a      	ldr	r2, [r7, #16]
 800b44c:	4313      	orrs	r3, r2
 800b44e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800b450:	683b      	ldr	r3, [r7, #0]
 800b452:	699b      	ldr	r3, [r3, #24]
 800b454:	009b      	lsls	r3, r3, #2
 800b456:	693a      	ldr	r2, [r7, #16]
 800b458:	4313      	orrs	r3, r2
 800b45a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b45c:	687b      	ldr	r3, [r7, #4]
 800b45e:	693a      	ldr	r2, [r7, #16]
 800b460:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b462:	687b      	ldr	r3, [r7, #4]
 800b464:	68fa      	ldr	r2, [r7, #12]
 800b466:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800b468:	683b      	ldr	r3, [r7, #0]
 800b46a:	685a      	ldr	r2, [r3, #4]
 800b46c:	687b      	ldr	r3, [r7, #4]
 800b46e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b470:	687b      	ldr	r3, [r7, #4]
 800b472:	697a      	ldr	r2, [r7, #20]
 800b474:	621a      	str	r2, [r3, #32]
}
 800b476:	bf00      	nop
 800b478:	371c      	adds	r7, #28
 800b47a:	46bd      	mov	sp, r7
 800b47c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b480:	4770      	bx	lr
 800b482:	bf00      	nop
 800b484:	feff8fff 	.word	0xfeff8fff
 800b488:	40010000 	.word	0x40010000
 800b48c:	40010400 	.word	0x40010400
 800b490:	40014000 	.word	0x40014000
 800b494:	40014400 	.word	0x40014400
 800b498:	40014800 	.word	0x40014800

0800b49c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b49c:	b480      	push	{r7}
 800b49e:	b087      	sub	sp, #28
 800b4a0:	af00      	add	r7, sp, #0
 800b4a2:	6078      	str	r0, [r7, #4]
 800b4a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800b4a6:	687b      	ldr	r3, [r7, #4]
 800b4a8:	6a1b      	ldr	r3, [r3, #32]
 800b4aa:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800b4ae:	687b      	ldr	r3, [r7, #4]
 800b4b0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b4b2:	687b      	ldr	r3, [r7, #4]
 800b4b4:	6a1b      	ldr	r3, [r3, #32]
 800b4b6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b4b8:	687b      	ldr	r3, [r7, #4]
 800b4ba:	685b      	ldr	r3, [r3, #4]
 800b4bc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b4be:	687b      	ldr	r3, [r7, #4]
 800b4c0:	69db      	ldr	r3, [r3, #28]
 800b4c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800b4c4:	68fa      	ldr	r2, [r7, #12]
 800b4c6:	4b33      	ldr	r3, [pc, #204]	; (800b594 <TIM_OC3_SetConfig+0xf8>)
 800b4c8:	4013      	ands	r3, r2
 800b4ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800b4cc:	68fb      	ldr	r3, [r7, #12]
 800b4ce:	f023 0303 	bic.w	r3, r3, #3
 800b4d2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b4d4:	683b      	ldr	r3, [r7, #0]
 800b4d6:	681b      	ldr	r3, [r3, #0]
 800b4d8:	68fa      	ldr	r2, [r7, #12]
 800b4da:	4313      	orrs	r3, r2
 800b4dc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800b4de:	697b      	ldr	r3, [r7, #20]
 800b4e0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800b4e4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800b4e6:	683b      	ldr	r3, [r7, #0]
 800b4e8:	689b      	ldr	r3, [r3, #8]
 800b4ea:	021b      	lsls	r3, r3, #8
 800b4ec:	697a      	ldr	r2, [r7, #20]
 800b4ee:	4313      	orrs	r3, r2
 800b4f0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800b4f2:	687b      	ldr	r3, [r7, #4]
 800b4f4:	4a28      	ldr	r2, [pc, #160]	; (800b598 <TIM_OC3_SetConfig+0xfc>)
 800b4f6:	4293      	cmp	r3, r2
 800b4f8:	d003      	beq.n	800b502 <TIM_OC3_SetConfig+0x66>
 800b4fa:	687b      	ldr	r3, [r7, #4]
 800b4fc:	4a27      	ldr	r2, [pc, #156]	; (800b59c <TIM_OC3_SetConfig+0x100>)
 800b4fe:	4293      	cmp	r3, r2
 800b500:	d10d      	bne.n	800b51e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800b502:	697b      	ldr	r3, [r7, #20]
 800b504:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800b508:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800b50a:	683b      	ldr	r3, [r7, #0]
 800b50c:	68db      	ldr	r3, [r3, #12]
 800b50e:	021b      	lsls	r3, r3, #8
 800b510:	697a      	ldr	r2, [r7, #20]
 800b512:	4313      	orrs	r3, r2
 800b514:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800b516:	697b      	ldr	r3, [r7, #20]
 800b518:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800b51c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b51e:	687b      	ldr	r3, [r7, #4]
 800b520:	4a1d      	ldr	r2, [pc, #116]	; (800b598 <TIM_OC3_SetConfig+0xfc>)
 800b522:	4293      	cmp	r3, r2
 800b524:	d00f      	beq.n	800b546 <TIM_OC3_SetConfig+0xaa>
 800b526:	687b      	ldr	r3, [r7, #4]
 800b528:	4a1c      	ldr	r2, [pc, #112]	; (800b59c <TIM_OC3_SetConfig+0x100>)
 800b52a:	4293      	cmp	r3, r2
 800b52c:	d00b      	beq.n	800b546 <TIM_OC3_SetConfig+0xaa>
 800b52e:	687b      	ldr	r3, [r7, #4]
 800b530:	4a1b      	ldr	r2, [pc, #108]	; (800b5a0 <TIM_OC3_SetConfig+0x104>)
 800b532:	4293      	cmp	r3, r2
 800b534:	d007      	beq.n	800b546 <TIM_OC3_SetConfig+0xaa>
 800b536:	687b      	ldr	r3, [r7, #4]
 800b538:	4a1a      	ldr	r2, [pc, #104]	; (800b5a4 <TIM_OC3_SetConfig+0x108>)
 800b53a:	4293      	cmp	r3, r2
 800b53c:	d003      	beq.n	800b546 <TIM_OC3_SetConfig+0xaa>
 800b53e:	687b      	ldr	r3, [r7, #4]
 800b540:	4a19      	ldr	r2, [pc, #100]	; (800b5a8 <TIM_OC3_SetConfig+0x10c>)
 800b542:	4293      	cmp	r3, r2
 800b544:	d113      	bne.n	800b56e <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800b546:	693b      	ldr	r3, [r7, #16]
 800b548:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b54c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800b54e:	693b      	ldr	r3, [r7, #16]
 800b550:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800b554:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800b556:	683b      	ldr	r3, [r7, #0]
 800b558:	695b      	ldr	r3, [r3, #20]
 800b55a:	011b      	lsls	r3, r3, #4
 800b55c:	693a      	ldr	r2, [r7, #16]
 800b55e:	4313      	orrs	r3, r2
 800b560:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800b562:	683b      	ldr	r3, [r7, #0]
 800b564:	699b      	ldr	r3, [r3, #24]
 800b566:	011b      	lsls	r3, r3, #4
 800b568:	693a      	ldr	r2, [r7, #16]
 800b56a:	4313      	orrs	r3, r2
 800b56c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b56e:	687b      	ldr	r3, [r7, #4]
 800b570:	693a      	ldr	r2, [r7, #16]
 800b572:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b574:	687b      	ldr	r3, [r7, #4]
 800b576:	68fa      	ldr	r2, [r7, #12]
 800b578:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800b57a:	683b      	ldr	r3, [r7, #0]
 800b57c:	685a      	ldr	r2, [r3, #4]
 800b57e:	687b      	ldr	r3, [r7, #4]
 800b580:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b582:	687b      	ldr	r3, [r7, #4]
 800b584:	697a      	ldr	r2, [r7, #20]
 800b586:	621a      	str	r2, [r3, #32]
}
 800b588:	bf00      	nop
 800b58a:	371c      	adds	r7, #28
 800b58c:	46bd      	mov	sp, r7
 800b58e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b592:	4770      	bx	lr
 800b594:	fffeff8f 	.word	0xfffeff8f
 800b598:	40010000 	.word	0x40010000
 800b59c:	40010400 	.word	0x40010400
 800b5a0:	40014000 	.word	0x40014000
 800b5a4:	40014400 	.word	0x40014400
 800b5a8:	40014800 	.word	0x40014800

0800b5ac <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b5ac:	b480      	push	{r7}
 800b5ae:	b087      	sub	sp, #28
 800b5b0:	af00      	add	r7, sp, #0
 800b5b2:	6078      	str	r0, [r7, #4]
 800b5b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800b5b6:	687b      	ldr	r3, [r7, #4]
 800b5b8:	6a1b      	ldr	r3, [r3, #32]
 800b5ba:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800b5be:	687b      	ldr	r3, [r7, #4]
 800b5c0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b5c2:	687b      	ldr	r3, [r7, #4]
 800b5c4:	6a1b      	ldr	r3, [r3, #32]
 800b5c6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b5c8:	687b      	ldr	r3, [r7, #4]
 800b5ca:	685b      	ldr	r3, [r3, #4]
 800b5cc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b5ce:	687b      	ldr	r3, [r7, #4]
 800b5d0:	69db      	ldr	r3, [r3, #28]
 800b5d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800b5d4:	68fa      	ldr	r2, [r7, #12]
 800b5d6:	4b24      	ldr	r3, [pc, #144]	; (800b668 <TIM_OC4_SetConfig+0xbc>)
 800b5d8:	4013      	ands	r3, r2
 800b5da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800b5dc:	68fb      	ldr	r3, [r7, #12]
 800b5de:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b5e2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b5e4:	683b      	ldr	r3, [r7, #0]
 800b5e6:	681b      	ldr	r3, [r3, #0]
 800b5e8:	021b      	lsls	r3, r3, #8
 800b5ea:	68fa      	ldr	r2, [r7, #12]
 800b5ec:	4313      	orrs	r3, r2
 800b5ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800b5f0:	693b      	ldr	r3, [r7, #16]
 800b5f2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800b5f6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800b5f8:	683b      	ldr	r3, [r7, #0]
 800b5fa:	689b      	ldr	r3, [r3, #8]
 800b5fc:	031b      	lsls	r3, r3, #12
 800b5fe:	693a      	ldr	r2, [r7, #16]
 800b600:	4313      	orrs	r3, r2
 800b602:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b604:	687b      	ldr	r3, [r7, #4]
 800b606:	4a19      	ldr	r2, [pc, #100]	; (800b66c <TIM_OC4_SetConfig+0xc0>)
 800b608:	4293      	cmp	r3, r2
 800b60a:	d00f      	beq.n	800b62c <TIM_OC4_SetConfig+0x80>
 800b60c:	687b      	ldr	r3, [r7, #4]
 800b60e:	4a18      	ldr	r2, [pc, #96]	; (800b670 <TIM_OC4_SetConfig+0xc4>)
 800b610:	4293      	cmp	r3, r2
 800b612:	d00b      	beq.n	800b62c <TIM_OC4_SetConfig+0x80>
 800b614:	687b      	ldr	r3, [r7, #4]
 800b616:	4a17      	ldr	r2, [pc, #92]	; (800b674 <TIM_OC4_SetConfig+0xc8>)
 800b618:	4293      	cmp	r3, r2
 800b61a:	d007      	beq.n	800b62c <TIM_OC4_SetConfig+0x80>
 800b61c:	687b      	ldr	r3, [r7, #4]
 800b61e:	4a16      	ldr	r2, [pc, #88]	; (800b678 <TIM_OC4_SetConfig+0xcc>)
 800b620:	4293      	cmp	r3, r2
 800b622:	d003      	beq.n	800b62c <TIM_OC4_SetConfig+0x80>
 800b624:	687b      	ldr	r3, [r7, #4]
 800b626:	4a15      	ldr	r2, [pc, #84]	; (800b67c <TIM_OC4_SetConfig+0xd0>)
 800b628:	4293      	cmp	r3, r2
 800b62a:	d109      	bne.n	800b640 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800b62c:	697b      	ldr	r3, [r7, #20]
 800b62e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b632:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800b634:	683b      	ldr	r3, [r7, #0]
 800b636:	695b      	ldr	r3, [r3, #20]
 800b638:	019b      	lsls	r3, r3, #6
 800b63a:	697a      	ldr	r2, [r7, #20]
 800b63c:	4313      	orrs	r3, r2
 800b63e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b640:	687b      	ldr	r3, [r7, #4]
 800b642:	697a      	ldr	r2, [r7, #20]
 800b644:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b646:	687b      	ldr	r3, [r7, #4]
 800b648:	68fa      	ldr	r2, [r7, #12]
 800b64a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800b64c:	683b      	ldr	r3, [r7, #0]
 800b64e:	685a      	ldr	r2, [r3, #4]
 800b650:	687b      	ldr	r3, [r7, #4]
 800b652:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b654:	687b      	ldr	r3, [r7, #4]
 800b656:	693a      	ldr	r2, [r7, #16]
 800b658:	621a      	str	r2, [r3, #32]
}
 800b65a:	bf00      	nop
 800b65c:	371c      	adds	r7, #28
 800b65e:	46bd      	mov	sp, r7
 800b660:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b664:	4770      	bx	lr
 800b666:	bf00      	nop
 800b668:	feff8fff 	.word	0xfeff8fff
 800b66c:	40010000 	.word	0x40010000
 800b670:	40010400 	.word	0x40010400
 800b674:	40014000 	.word	0x40014000
 800b678:	40014400 	.word	0x40014400
 800b67c:	40014800 	.word	0x40014800

0800b680 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800b680:	b480      	push	{r7}
 800b682:	b087      	sub	sp, #28
 800b684:	af00      	add	r7, sp, #0
 800b686:	6078      	str	r0, [r7, #4]
 800b688:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800b68a:	687b      	ldr	r3, [r7, #4]
 800b68c:	6a1b      	ldr	r3, [r3, #32]
 800b68e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800b692:	687b      	ldr	r3, [r7, #4]
 800b694:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b696:	687b      	ldr	r3, [r7, #4]
 800b698:	6a1b      	ldr	r3, [r3, #32]
 800b69a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b69c:	687b      	ldr	r3, [r7, #4]
 800b69e:	685b      	ldr	r3, [r3, #4]
 800b6a0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800b6a2:	687b      	ldr	r3, [r7, #4]
 800b6a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b6a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800b6a8:	68fa      	ldr	r2, [r7, #12]
 800b6aa:	4b21      	ldr	r3, [pc, #132]	; (800b730 <TIM_OC5_SetConfig+0xb0>)
 800b6ac:	4013      	ands	r3, r2
 800b6ae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b6b0:	683b      	ldr	r3, [r7, #0]
 800b6b2:	681b      	ldr	r3, [r3, #0]
 800b6b4:	68fa      	ldr	r2, [r7, #12]
 800b6b6:	4313      	orrs	r3, r2
 800b6b8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800b6ba:	693b      	ldr	r3, [r7, #16]
 800b6bc:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800b6c0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800b6c2:	683b      	ldr	r3, [r7, #0]
 800b6c4:	689b      	ldr	r3, [r3, #8]
 800b6c6:	041b      	lsls	r3, r3, #16
 800b6c8:	693a      	ldr	r2, [r7, #16]
 800b6ca:	4313      	orrs	r3, r2
 800b6cc:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b6ce:	687b      	ldr	r3, [r7, #4]
 800b6d0:	4a18      	ldr	r2, [pc, #96]	; (800b734 <TIM_OC5_SetConfig+0xb4>)
 800b6d2:	4293      	cmp	r3, r2
 800b6d4:	d00f      	beq.n	800b6f6 <TIM_OC5_SetConfig+0x76>
 800b6d6:	687b      	ldr	r3, [r7, #4]
 800b6d8:	4a17      	ldr	r2, [pc, #92]	; (800b738 <TIM_OC5_SetConfig+0xb8>)
 800b6da:	4293      	cmp	r3, r2
 800b6dc:	d00b      	beq.n	800b6f6 <TIM_OC5_SetConfig+0x76>
 800b6de:	687b      	ldr	r3, [r7, #4]
 800b6e0:	4a16      	ldr	r2, [pc, #88]	; (800b73c <TIM_OC5_SetConfig+0xbc>)
 800b6e2:	4293      	cmp	r3, r2
 800b6e4:	d007      	beq.n	800b6f6 <TIM_OC5_SetConfig+0x76>
 800b6e6:	687b      	ldr	r3, [r7, #4]
 800b6e8:	4a15      	ldr	r2, [pc, #84]	; (800b740 <TIM_OC5_SetConfig+0xc0>)
 800b6ea:	4293      	cmp	r3, r2
 800b6ec:	d003      	beq.n	800b6f6 <TIM_OC5_SetConfig+0x76>
 800b6ee:	687b      	ldr	r3, [r7, #4]
 800b6f0:	4a14      	ldr	r2, [pc, #80]	; (800b744 <TIM_OC5_SetConfig+0xc4>)
 800b6f2:	4293      	cmp	r3, r2
 800b6f4:	d109      	bne.n	800b70a <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800b6f6:	697b      	ldr	r3, [r7, #20]
 800b6f8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b6fc:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800b6fe:	683b      	ldr	r3, [r7, #0]
 800b700:	695b      	ldr	r3, [r3, #20]
 800b702:	021b      	lsls	r3, r3, #8
 800b704:	697a      	ldr	r2, [r7, #20]
 800b706:	4313      	orrs	r3, r2
 800b708:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b70a:	687b      	ldr	r3, [r7, #4]
 800b70c:	697a      	ldr	r2, [r7, #20]
 800b70e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800b710:	687b      	ldr	r3, [r7, #4]
 800b712:	68fa      	ldr	r2, [r7, #12]
 800b714:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800b716:	683b      	ldr	r3, [r7, #0]
 800b718:	685a      	ldr	r2, [r3, #4]
 800b71a:	687b      	ldr	r3, [r7, #4]
 800b71c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b71e:	687b      	ldr	r3, [r7, #4]
 800b720:	693a      	ldr	r2, [r7, #16]
 800b722:	621a      	str	r2, [r3, #32]
}
 800b724:	bf00      	nop
 800b726:	371c      	adds	r7, #28
 800b728:	46bd      	mov	sp, r7
 800b72a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b72e:	4770      	bx	lr
 800b730:	fffeff8f 	.word	0xfffeff8f
 800b734:	40010000 	.word	0x40010000
 800b738:	40010400 	.word	0x40010400
 800b73c:	40014000 	.word	0x40014000
 800b740:	40014400 	.word	0x40014400
 800b744:	40014800 	.word	0x40014800

0800b748 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800b748:	b480      	push	{r7}
 800b74a:	b087      	sub	sp, #28
 800b74c:	af00      	add	r7, sp, #0
 800b74e:	6078      	str	r0, [r7, #4]
 800b750:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800b752:	687b      	ldr	r3, [r7, #4]
 800b754:	6a1b      	ldr	r3, [r3, #32]
 800b756:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800b75a:	687b      	ldr	r3, [r7, #4]
 800b75c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b75e:	687b      	ldr	r3, [r7, #4]
 800b760:	6a1b      	ldr	r3, [r3, #32]
 800b762:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b764:	687b      	ldr	r3, [r7, #4]
 800b766:	685b      	ldr	r3, [r3, #4]
 800b768:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800b76a:	687b      	ldr	r3, [r7, #4]
 800b76c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b76e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800b770:	68fa      	ldr	r2, [r7, #12]
 800b772:	4b22      	ldr	r3, [pc, #136]	; (800b7fc <TIM_OC6_SetConfig+0xb4>)
 800b774:	4013      	ands	r3, r2
 800b776:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b778:	683b      	ldr	r3, [r7, #0]
 800b77a:	681b      	ldr	r3, [r3, #0]
 800b77c:	021b      	lsls	r3, r3, #8
 800b77e:	68fa      	ldr	r2, [r7, #12]
 800b780:	4313      	orrs	r3, r2
 800b782:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800b784:	693b      	ldr	r3, [r7, #16]
 800b786:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800b78a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800b78c:	683b      	ldr	r3, [r7, #0]
 800b78e:	689b      	ldr	r3, [r3, #8]
 800b790:	051b      	lsls	r3, r3, #20
 800b792:	693a      	ldr	r2, [r7, #16]
 800b794:	4313      	orrs	r3, r2
 800b796:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b798:	687b      	ldr	r3, [r7, #4]
 800b79a:	4a19      	ldr	r2, [pc, #100]	; (800b800 <TIM_OC6_SetConfig+0xb8>)
 800b79c:	4293      	cmp	r3, r2
 800b79e:	d00f      	beq.n	800b7c0 <TIM_OC6_SetConfig+0x78>
 800b7a0:	687b      	ldr	r3, [r7, #4]
 800b7a2:	4a18      	ldr	r2, [pc, #96]	; (800b804 <TIM_OC6_SetConfig+0xbc>)
 800b7a4:	4293      	cmp	r3, r2
 800b7a6:	d00b      	beq.n	800b7c0 <TIM_OC6_SetConfig+0x78>
 800b7a8:	687b      	ldr	r3, [r7, #4]
 800b7aa:	4a17      	ldr	r2, [pc, #92]	; (800b808 <TIM_OC6_SetConfig+0xc0>)
 800b7ac:	4293      	cmp	r3, r2
 800b7ae:	d007      	beq.n	800b7c0 <TIM_OC6_SetConfig+0x78>
 800b7b0:	687b      	ldr	r3, [r7, #4]
 800b7b2:	4a16      	ldr	r2, [pc, #88]	; (800b80c <TIM_OC6_SetConfig+0xc4>)
 800b7b4:	4293      	cmp	r3, r2
 800b7b6:	d003      	beq.n	800b7c0 <TIM_OC6_SetConfig+0x78>
 800b7b8:	687b      	ldr	r3, [r7, #4]
 800b7ba:	4a15      	ldr	r2, [pc, #84]	; (800b810 <TIM_OC6_SetConfig+0xc8>)
 800b7bc:	4293      	cmp	r3, r2
 800b7be:	d109      	bne.n	800b7d4 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800b7c0:	697b      	ldr	r3, [r7, #20]
 800b7c2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800b7c6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800b7c8:	683b      	ldr	r3, [r7, #0]
 800b7ca:	695b      	ldr	r3, [r3, #20]
 800b7cc:	029b      	lsls	r3, r3, #10
 800b7ce:	697a      	ldr	r2, [r7, #20]
 800b7d0:	4313      	orrs	r3, r2
 800b7d2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b7d4:	687b      	ldr	r3, [r7, #4]
 800b7d6:	697a      	ldr	r2, [r7, #20]
 800b7d8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800b7da:	687b      	ldr	r3, [r7, #4]
 800b7dc:	68fa      	ldr	r2, [r7, #12]
 800b7de:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800b7e0:	683b      	ldr	r3, [r7, #0]
 800b7e2:	685a      	ldr	r2, [r3, #4]
 800b7e4:	687b      	ldr	r3, [r7, #4]
 800b7e6:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b7e8:	687b      	ldr	r3, [r7, #4]
 800b7ea:	693a      	ldr	r2, [r7, #16]
 800b7ec:	621a      	str	r2, [r3, #32]
}
 800b7ee:	bf00      	nop
 800b7f0:	371c      	adds	r7, #28
 800b7f2:	46bd      	mov	sp, r7
 800b7f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7f8:	4770      	bx	lr
 800b7fa:	bf00      	nop
 800b7fc:	feff8fff 	.word	0xfeff8fff
 800b800:	40010000 	.word	0x40010000
 800b804:	40010400 	.word	0x40010400
 800b808:	40014000 	.word	0x40014000
 800b80c:	40014400 	.word	0x40014400
 800b810:	40014800 	.word	0x40014800

0800b814 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800b814:	b480      	push	{r7}
 800b816:	b087      	sub	sp, #28
 800b818:	af00      	add	r7, sp, #0
 800b81a:	60f8      	str	r0, [r7, #12]
 800b81c:	60b9      	str	r1, [r7, #8]
 800b81e:	607a      	str	r2, [r7, #4]
 800b820:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b822:	68fb      	ldr	r3, [r7, #12]
 800b824:	6a1b      	ldr	r3, [r3, #32]
 800b826:	f023 0201 	bic.w	r2, r3, #1
 800b82a:	68fb      	ldr	r3, [r7, #12]
 800b82c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b82e:	68fb      	ldr	r3, [r7, #12]
 800b830:	699b      	ldr	r3, [r3, #24]
 800b832:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800b834:	68fb      	ldr	r3, [r7, #12]
 800b836:	6a1b      	ldr	r3, [r3, #32]
 800b838:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800b83a:	68fb      	ldr	r3, [r7, #12]
 800b83c:	4a28      	ldr	r2, [pc, #160]	; (800b8e0 <TIM_TI1_SetConfig+0xcc>)
 800b83e:	4293      	cmp	r3, r2
 800b840:	d01b      	beq.n	800b87a <TIM_TI1_SetConfig+0x66>
 800b842:	68fb      	ldr	r3, [r7, #12]
 800b844:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b848:	d017      	beq.n	800b87a <TIM_TI1_SetConfig+0x66>
 800b84a:	68fb      	ldr	r3, [r7, #12]
 800b84c:	4a25      	ldr	r2, [pc, #148]	; (800b8e4 <TIM_TI1_SetConfig+0xd0>)
 800b84e:	4293      	cmp	r3, r2
 800b850:	d013      	beq.n	800b87a <TIM_TI1_SetConfig+0x66>
 800b852:	68fb      	ldr	r3, [r7, #12]
 800b854:	4a24      	ldr	r2, [pc, #144]	; (800b8e8 <TIM_TI1_SetConfig+0xd4>)
 800b856:	4293      	cmp	r3, r2
 800b858:	d00f      	beq.n	800b87a <TIM_TI1_SetConfig+0x66>
 800b85a:	68fb      	ldr	r3, [r7, #12]
 800b85c:	4a23      	ldr	r2, [pc, #140]	; (800b8ec <TIM_TI1_SetConfig+0xd8>)
 800b85e:	4293      	cmp	r3, r2
 800b860:	d00b      	beq.n	800b87a <TIM_TI1_SetConfig+0x66>
 800b862:	68fb      	ldr	r3, [r7, #12]
 800b864:	4a22      	ldr	r2, [pc, #136]	; (800b8f0 <TIM_TI1_SetConfig+0xdc>)
 800b866:	4293      	cmp	r3, r2
 800b868:	d007      	beq.n	800b87a <TIM_TI1_SetConfig+0x66>
 800b86a:	68fb      	ldr	r3, [r7, #12]
 800b86c:	4a21      	ldr	r2, [pc, #132]	; (800b8f4 <TIM_TI1_SetConfig+0xe0>)
 800b86e:	4293      	cmp	r3, r2
 800b870:	d003      	beq.n	800b87a <TIM_TI1_SetConfig+0x66>
 800b872:	68fb      	ldr	r3, [r7, #12]
 800b874:	4a20      	ldr	r2, [pc, #128]	; (800b8f8 <TIM_TI1_SetConfig+0xe4>)
 800b876:	4293      	cmp	r3, r2
 800b878:	d101      	bne.n	800b87e <TIM_TI1_SetConfig+0x6a>
 800b87a:	2301      	movs	r3, #1
 800b87c:	e000      	b.n	800b880 <TIM_TI1_SetConfig+0x6c>
 800b87e:	2300      	movs	r3, #0
 800b880:	2b00      	cmp	r3, #0
 800b882:	d008      	beq.n	800b896 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800b884:	697b      	ldr	r3, [r7, #20]
 800b886:	f023 0303 	bic.w	r3, r3, #3
 800b88a:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800b88c:	697a      	ldr	r2, [r7, #20]
 800b88e:	687b      	ldr	r3, [r7, #4]
 800b890:	4313      	orrs	r3, r2
 800b892:	617b      	str	r3, [r7, #20]
 800b894:	e003      	b.n	800b89e <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800b896:	697b      	ldr	r3, [r7, #20]
 800b898:	f043 0301 	orr.w	r3, r3, #1
 800b89c:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800b89e:	697b      	ldr	r3, [r7, #20]
 800b8a0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800b8a4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800b8a6:	683b      	ldr	r3, [r7, #0]
 800b8a8:	011b      	lsls	r3, r3, #4
 800b8aa:	b2db      	uxtb	r3, r3
 800b8ac:	697a      	ldr	r2, [r7, #20]
 800b8ae:	4313      	orrs	r3, r2
 800b8b0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800b8b2:	693b      	ldr	r3, [r7, #16]
 800b8b4:	f023 030a 	bic.w	r3, r3, #10
 800b8b8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800b8ba:	68bb      	ldr	r3, [r7, #8]
 800b8bc:	f003 030a 	and.w	r3, r3, #10
 800b8c0:	693a      	ldr	r2, [r7, #16]
 800b8c2:	4313      	orrs	r3, r2
 800b8c4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800b8c6:	68fb      	ldr	r3, [r7, #12]
 800b8c8:	697a      	ldr	r2, [r7, #20]
 800b8ca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b8cc:	68fb      	ldr	r3, [r7, #12]
 800b8ce:	693a      	ldr	r2, [r7, #16]
 800b8d0:	621a      	str	r2, [r3, #32]
}
 800b8d2:	bf00      	nop
 800b8d4:	371c      	adds	r7, #28
 800b8d6:	46bd      	mov	sp, r7
 800b8d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8dc:	4770      	bx	lr
 800b8de:	bf00      	nop
 800b8e0:	40010000 	.word	0x40010000
 800b8e4:	40000400 	.word	0x40000400
 800b8e8:	40000800 	.word	0x40000800
 800b8ec:	40000c00 	.word	0x40000c00
 800b8f0:	40010400 	.word	0x40010400
 800b8f4:	40001800 	.word	0x40001800
 800b8f8:	40014000 	.word	0x40014000

0800b8fc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b8fc:	b480      	push	{r7}
 800b8fe:	b087      	sub	sp, #28
 800b900:	af00      	add	r7, sp, #0
 800b902:	60f8      	str	r0, [r7, #12]
 800b904:	60b9      	str	r1, [r7, #8]
 800b906:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800b908:	68fb      	ldr	r3, [r7, #12]
 800b90a:	6a1b      	ldr	r3, [r3, #32]
 800b90c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b90e:	68fb      	ldr	r3, [r7, #12]
 800b910:	6a1b      	ldr	r3, [r3, #32]
 800b912:	f023 0201 	bic.w	r2, r3, #1
 800b916:	68fb      	ldr	r3, [r7, #12]
 800b918:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b91a:	68fb      	ldr	r3, [r7, #12]
 800b91c:	699b      	ldr	r3, [r3, #24]
 800b91e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800b920:	693b      	ldr	r3, [r7, #16]
 800b922:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800b926:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800b928:	687b      	ldr	r3, [r7, #4]
 800b92a:	011b      	lsls	r3, r3, #4
 800b92c:	693a      	ldr	r2, [r7, #16]
 800b92e:	4313      	orrs	r3, r2
 800b930:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800b932:	697b      	ldr	r3, [r7, #20]
 800b934:	f023 030a 	bic.w	r3, r3, #10
 800b938:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800b93a:	697a      	ldr	r2, [r7, #20]
 800b93c:	68bb      	ldr	r3, [r7, #8]
 800b93e:	4313      	orrs	r3, r2
 800b940:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800b942:	68fb      	ldr	r3, [r7, #12]
 800b944:	693a      	ldr	r2, [r7, #16]
 800b946:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b948:	68fb      	ldr	r3, [r7, #12]
 800b94a:	697a      	ldr	r2, [r7, #20]
 800b94c:	621a      	str	r2, [r3, #32]
}
 800b94e:	bf00      	nop
 800b950:	371c      	adds	r7, #28
 800b952:	46bd      	mov	sp, r7
 800b954:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b958:	4770      	bx	lr

0800b95a <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800b95a:	b480      	push	{r7}
 800b95c:	b087      	sub	sp, #28
 800b95e:	af00      	add	r7, sp, #0
 800b960:	60f8      	str	r0, [r7, #12]
 800b962:	60b9      	str	r1, [r7, #8]
 800b964:	607a      	str	r2, [r7, #4]
 800b966:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b968:	68fb      	ldr	r3, [r7, #12]
 800b96a:	6a1b      	ldr	r3, [r3, #32]
 800b96c:	f023 0210 	bic.w	r2, r3, #16
 800b970:	68fb      	ldr	r3, [r7, #12]
 800b972:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b974:	68fb      	ldr	r3, [r7, #12]
 800b976:	699b      	ldr	r3, [r3, #24]
 800b978:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800b97a:	68fb      	ldr	r3, [r7, #12]
 800b97c:	6a1b      	ldr	r3, [r3, #32]
 800b97e:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800b980:	697b      	ldr	r3, [r7, #20]
 800b982:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b986:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800b988:	687b      	ldr	r3, [r7, #4]
 800b98a:	021b      	lsls	r3, r3, #8
 800b98c:	697a      	ldr	r2, [r7, #20]
 800b98e:	4313      	orrs	r3, r2
 800b990:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800b992:	697b      	ldr	r3, [r7, #20]
 800b994:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800b998:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800b99a:	683b      	ldr	r3, [r7, #0]
 800b99c:	031b      	lsls	r3, r3, #12
 800b99e:	b29b      	uxth	r3, r3
 800b9a0:	697a      	ldr	r2, [r7, #20]
 800b9a2:	4313      	orrs	r3, r2
 800b9a4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800b9a6:	693b      	ldr	r3, [r7, #16]
 800b9a8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800b9ac:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800b9ae:	68bb      	ldr	r3, [r7, #8]
 800b9b0:	011b      	lsls	r3, r3, #4
 800b9b2:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800b9b6:	693a      	ldr	r2, [r7, #16]
 800b9b8:	4313      	orrs	r3, r2
 800b9ba:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800b9bc:	68fb      	ldr	r3, [r7, #12]
 800b9be:	697a      	ldr	r2, [r7, #20]
 800b9c0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b9c2:	68fb      	ldr	r3, [r7, #12]
 800b9c4:	693a      	ldr	r2, [r7, #16]
 800b9c6:	621a      	str	r2, [r3, #32]
}
 800b9c8:	bf00      	nop
 800b9ca:	371c      	adds	r7, #28
 800b9cc:	46bd      	mov	sp, r7
 800b9ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9d2:	4770      	bx	lr

0800b9d4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b9d4:	b480      	push	{r7}
 800b9d6:	b087      	sub	sp, #28
 800b9d8:	af00      	add	r7, sp, #0
 800b9da:	60f8      	str	r0, [r7, #12]
 800b9dc:	60b9      	str	r1, [r7, #8]
 800b9de:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b9e0:	68fb      	ldr	r3, [r7, #12]
 800b9e2:	6a1b      	ldr	r3, [r3, #32]
 800b9e4:	f023 0210 	bic.w	r2, r3, #16
 800b9e8:	68fb      	ldr	r3, [r7, #12]
 800b9ea:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b9ec:	68fb      	ldr	r3, [r7, #12]
 800b9ee:	699b      	ldr	r3, [r3, #24]
 800b9f0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800b9f2:	68fb      	ldr	r3, [r7, #12]
 800b9f4:	6a1b      	ldr	r3, [r3, #32]
 800b9f6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800b9f8:	697b      	ldr	r3, [r7, #20]
 800b9fa:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800b9fe:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800ba00:	687b      	ldr	r3, [r7, #4]
 800ba02:	031b      	lsls	r3, r3, #12
 800ba04:	697a      	ldr	r2, [r7, #20]
 800ba06:	4313      	orrs	r3, r2
 800ba08:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800ba0a:	693b      	ldr	r3, [r7, #16]
 800ba0c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800ba10:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800ba12:	68bb      	ldr	r3, [r7, #8]
 800ba14:	011b      	lsls	r3, r3, #4
 800ba16:	693a      	ldr	r2, [r7, #16]
 800ba18:	4313      	orrs	r3, r2
 800ba1a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800ba1c:	68fb      	ldr	r3, [r7, #12]
 800ba1e:	697a      	ldr	r2, [r7, #20]
 800ba20:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800ba22:	68fb      	ldr	r3, [r7, #12]
 800ba24:	693a      	ldr	r2, [r7, #16]
 800ba26:	621a      	str	r2, [r3, #32]
}
 800ba28:	bf00      	nop
 800ba2a:	371c      	adds	r7, #28
 800ba2c:	46bd      	mov	sp, r7
 800ba2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba32:	4770      	bx	lr

0800ba34 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800ba34:	b480      	push	{r7}
 800ba36:	b087      	sub	sp, #28
 800ba38:	af00      	add	r7, sp, #0
 800ba3a:	60f8      	str	r0, [r7, #12]
 800ba3c:	60b9      	str	r1, [r7, #8]
 800ba3e:	607a      	str	r2, [r7, #4]
 800ba40:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800ba42:	68fb      	ldr	r3, [r7, #12]
 800ba44:	6a1b      	ldr	r3, [r3, #32]
 800ba46:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800ba4a:	68fb      	ldr	r3, [r7, #12]
 800ba4c:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800ba4e:	68fb      	ldr	r3, [r7, #12]
 800ba50:	69db      	ldr	r3, [r3, #28]
 800ba52:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800ba54:	68fb      	ldr	r3, [r7, #12]
 800ba56:	6a1b      	ldr	r3, [r3, #32]
 800ba58:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800ba5a:	697b      	ldr	r3, [r7, #20]
 800ba5c:	f023 0303 	bic.w	r3, r3, #3
 800ba60:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 800ba62:	697a      	ldr	r2, [r7, #20]
 800ba64:	687b      	ldr	r3, [r7, #4]
 800ba66:	4313      	orrs	r3, r2
 800ba68:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800ba6a:	697b      	ldr	r3, [r7, #20]
 800ba6c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800ba70:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800ba72:	683b      	ldr	r3, [r7, #0]
 800ba74:	011b      	lsls	r3, r3, #4
 800ba76:	b2db      	uxtb	r3, r3
 800ba78:	697a      	ldr	r2, [r7, #20]
 800ba7a:	4313      	orrs	r3, r2
 800ba7c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800ba7e:	693b      	ldr	r3, [r7, #16]
 800ba80:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 800ba84:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800ba86:	68bb      	ldr	r3, [r7, #8]
 800ba88:	021b      	lsls	r3, r3, #8
 800ba8a:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 800ba8e:	693a      	ldr	r2, [r7, #16]
 800ba90:	4313      	orrs	r3, r2
 800ba92:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800ba94:	68fb      	ldr	r3, [r7, #12]
 800ba96:	697a      	ldr	r2, [r7, #20]
 800ba98:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800ba9a:	68fb      	ldr	r3, [r7, #12]
 800ba9c:	693a      	ldr	r2, [r7, #16]
 800ba9e:	621a      	str	r2, [r3, #32]
}
 800baa0:	bf00      	nop
 800baa2:	371c      	adds	r7, #28
 800baa4:	46bd      	mov	sp, r7
 800baa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baaa:	4770      	bx	lr

0800baac <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800baac:	b480      	push	{r7}
 800baae:	b087      	sub	sp, #28
 800bab0:	af00      	add	r7, sp, #0
 800bab2:	60f8      	str	r0, [r7, #12]
 800bab4:	60b9      	str	r1, [r7, #8]
 800bab6:	607a      	str	r2, [r7, #4]
 800bab8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800baba:	68fb      	ldr	r3, [r7, #12]
 800babc:	6a1b      	ldr	r3, [r3, #32]
 800babe:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800bac2:	68fb      	ldr	r3, [r7, #12]
 800bac4:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800bac6:	68fb      	ldr	r3, [r7, #12]
 800bac8:	69db      	ldr	r3, [r3, #28]
 800baca:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800bacc:	68fb      	ldr	r3, [r7, #12]
 800bace:	6a1b      	ldr	r3, [r3, #32]
 800bad0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800bad2:	697b      	ldr	r3, [r7, #20]
 800bad4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800bad8:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800bada:	687b      	ldr	r3, [r7, #4]
 800badc:	021b      	lsls	r3, r3, #8
 800bade:	697a      	ldr	r2, [r7, #20]
 800bae0:	4313      	orrs	r3, r2
 800bae2:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800bae4:	697b      	ldr	r3, [r7, #20]
 800bae6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800baea:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800baec:	683b      	ldr	r3, [r7, #0]
 800baee:	031b      	lsls	r3, r3, #12
 800baf0:	b29b      	uxth	r3, r3
 800baf2:	697a      	ldr	r2, [r7, #20]
 800baf4:	4313      	orrs	r3, r2
 800baf6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800baf8:	693b      	ldr	r3, [r7, #16]
 800bafa:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 800bafe:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800bb00:	68bb      	ldr	r3, [r7, #8]
 800bb02:	031b      	lsls	r3, r3, #12
 800bb04:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 800bb08:	693a      	ldr	r2, [r7, #16]
 800bb0a:	4313      	orrs	r3, r2
 800bb0c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800bb0e:	68fb      	ldr	r3, [r7, #12]
 800bb10:	697a      	ldr	r2, [r7, #20]
 800bb12:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800bb14:	68fb      	ldr	r3, [r7, #12]
 800bb16:	693a      	ldr	r2, [r7, #16]
 800bb18:	621a      	str	r2, [r3, #32]
}
 800bb1a:	bf00      	nop
 800bb1c:	371c      	adds	r7, #28
 800bb1e:	46bd      	mov	sp, r7
 800bb20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb24:	4770      	bx	lr
	...

0800bb28 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800bb28:	b480      	push	{r7}
 800bb2a:	b085      	sub	sp, #20
 800bb2c:	af00      	add	r7, sp, #0
 800bb2e:	6078      	str	r0, [r7, #4]
 800bb30:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800bb32:	687b      	ldr	r3, [r7, #4]
 800bb34:	689b      	ldr	r3, [r3, #8]
 800bb36:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800bb38:	68fa      	ldr	r2, [r7, #12]
 800bb3a:	4b09      	ldr	r3, [pc, #36]	; (800bb60 <TIM_ITRx_SetConfig+0x38>)
 800bb3c:	4013      	ands	r3, r2
 800bb3e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800bb40:	683a      	ldr	r2, [r7, #0]
 800bb42:	68fb      	ldr	r3, [r7, #12]
 800bb44:	4313      	orrs	r3, r2
 800bb46:	f043 0307 	orr.w	r3, r3, #7
 800bb4a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800bb4c:	687b      	ldr	r3, [r7, #4]
 800bb4e:	68fa      	ldr	r2, [r7, #12]
 800bb50:	609a      	str	r2, [r3, #8]
}
 800bb52:	bf00      	nop
 800bb54:	3714      	adds	r7, #20
 800bb56:	46bd      	mov	sp, r7
 800bb58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb5c:	4770      	bx	lr
 800bb5e:	bf00      	nop
 800bb60:	ffcfff8f 	.word	0xffcfff8f

0800bb64 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800bb64:	b480      	push	{r7}
 800bb66:	b087      	sub	sp, #28
 800bb68:	af00      	add	r7, sp, #0
 800bb6a:	60f8      	str	r0, [r7, #12]
 800bb6c:	60b9      	str	r1, [r7, #8]
 800bb6e:	607a      	str	r2, [r7, #4]
 800bb70:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800bb72:	68fb      	ldr	r3, [r7, #12]
 800bb74:	689b      	ldr	r3, [r3, #8]
 800bb76:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800bb78:	697b      	ldr	r3, [r7, #20]
 800bb7a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800bb7e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800bb80:	683b      	ldr	r3, [r7, #0]
 800bb82:	021a      	lsls	r2, r3, #8
 800bb84:	687b      	ldr	r3, [r7, #4]
 800bb86:	431a      	orrs	r2, r3
 800bb88:	68bb      	ldr	r3, [r7, #8]
 800bb8a:	4313      	orrs	r3, r2
 800bb8c:	697a      	ldr	r2, [r7, #20]
 800bb8e:	4313      	orrs	r3, r2
 800bb90:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800bb92:	68fb      	ldr	r3, [r7, #12]
 800bb94:	697a      	ldr	r2, [r7, #20]
 800bb96:	609a      	str	r2, [r3, #8]
}
 800bb98:	bf00      	nop
 800bb9a:	371c      	adds	r7, #28
 800bb9c:	46bd      	mov	sp, r7
 800bb9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bba2:	4770      	bx	lr

0800bba4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800bba4:	b480      	push	{r7}
 800bba6:	b087      	sub	sp, #28
 800bba8:	af00      	add	r7, sp, #0
 800bbaa:	60f8      	str	r0, [r7, #12]
 800bbac:	60b9      	str	r1, [r7, #8]
 800bbae:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800bbb0:	68bb      	ldr	r3, [r7, #8]
 800bbb2:	f003 031f 	and.w	r3, r3, #31
 800bbb6:	2201      	movs	r2, #1
 800bbb8:	fa02 f303 	lsl.w	r3, r2, r3
 800bbbc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800bbbe:	68fb      	ldr	r3, [r7, #12]
 800bbc0:	6a1a      	ldr	r2, [r3, #32]
 800bbc2:	697b      	ldr	r3, [r7, #20]
 800bbc4:	43db      	mvns	r3, r3
 800bbc6:	401a      	ands	r2, r3
 800bbc8:	68fb      	ldr	r3, [r7, #12]
 800bbca:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800bbcc:	68fb      	ldr	r3, [r7, #12]
 800bbce:	6a1a      	ldr	r2, [r3, #32]
 800bbd0:	68bb      	ldr	r3, [r7, #8]
 800bbd2:	f003 031f 	and.w	r3, r3, #31
 800bbd6:	6879      	ldr	r1, [r7, #4]
 800bbd8:	fa01 f303 	lsl.w	r3, r1, r3
 800bbdc:	431a      	orrs	r2, r3
 800bbde:	68fb      	ldr	r3, [r7, #12]
 800bbe0:	621a      	str	r2, [r3, #32]
}
 800bbe2:	bf00      	nop
 800bbe4:	371c      	adds	r7, #28
 800bbe6:	46bd      	mov	sp, r7
 800bbe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbec:	4770      	bx	lr
	...

0800bbf0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800bbf0:	b480      	push	{r7}
 800bbf2:	b085      	sub	sp, #20
 800bbf4:	af00      	add	r7, sp, #0
 800bbf6:	6078      	str	r0, [r7, #4]
 800bbf8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800bbfa:	687b      	ldr	r3, [r7, #4]
 800bbfc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800bc00:	2b01      	cmp	r3, #1
 800bc02:	d101      	bne.n	800bc08 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800bc04:	2302      	movs	r3, #2
 800bc06:	e06d      	b.n	800bce4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800bc08:	687b      	ldr	r3, [r7, #4]
 800bc0a:	2201      	movs	r2, #1
 800bc0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bc10:	687b      	ldr	r3, [r7, #4]
 800bc12:	2202      	movs	r2, #2
 800bc14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800bc18:	687b      	ldr	r3, [r7, #4]
 800bc1a:	681b      	ldr	r3, [r3, #0]
 800bc1c:	685b      	ldr	r3, [r3, #4]
 800bc1e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800bc20:	687b      	ldr	r3, [r7, #4]
 800bc22:	681b      	ldr	r3, [r3, #0]
 800bc24:	689b      	ldr	r3, [r3, #8]
 800bc26:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800bc28:	687b      	ldr	r3, [r7, #4]
 800bc2a:	681b      	ldr	r3, [r3, #0]
 800bc2c:	4a30      	ldr	r2, [pc, #192]	; (800bcf0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800bc2e:	4293      	cmp	r3, r2
 800bc30:	d004      	beq.n	800bc3c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800bc32:	687b      	ldr	r3, [r7, #4]
 800bc34:	681b      	ldr	r3, [r3, #0]
 800bc36:	4a2f      	ldr	r2, [pc, #188]	; (800bcf4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800bc38:	4293      	cmp	r3, r2
 800bc3a:	d108      	bne.n	800bc4e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800bc3c:	68fb      	ldr	r3, [r7, #12]
 800bc3e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800bc42:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800bc44:	683b      	ldr	r3, [r7, #0]
 800bc46:	685b      	ldr	r3, [r3, #4]
 800bc48:	68fa      	ldr	r2, [r7, #12]
 800bc4a:	4313      	orrs	r3, r2
 800bc4c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800bc4e:	68fb      	ldr	r3, [r7, #12]
 800bc50:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bc54:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800bc56:	683b      	ldr	r3, [r7, #0]
 800bc58:	681b      	ldr	r3, [r3, #0]
 800bc5a:	68fa      	ldr	r2, [r7, #12]
 800bc5c:	4313      	orrs	r3, r2
 800bc5e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800bc60:	687b      	ldr	r3, [r7, #4]
 800bc62:	681b      	ldr	r3, [r3, #0]
 800bc64:	68fa      	ldr	r2, [r7, #12]
 800bc66:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800bc68:	687b      	ldr	r3, [r7, #4]
 800bc6a:	681b      	ldr	r3, [r3, #0]
 800bc6c:	4a20      	ldr	r2, [pc, #128]	; (800bcf0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800bc6e:	4293      	cmp	r3, r2
 800bc70:	d022      	beq.n	800bcb8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800bc72:	687b      	ldr	r3, [r7, #4]
 800bc74:	681b      	ldr	r3, [r3, #0]
 800bc76:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bc7a:	d01d      	beq.n	800bcb8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800bc7c:	687b      	ldr	r3, [r7, #4]
 800bc7e:	681b      	ldr	r3, [r3, #0]
 800bc80:	4a1d      	ldr	r2, [pc, #116]	; (800bcf8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800bc82:	4293      	cmp	r3, r2
 800bc84:	d018      	beq.n	800bcb8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800bc86:	687b      	ldr	r3, [r7, #4]
 800bc88:	681b      	ldr	r3, [r3, #0]
 800bc8a:	4a1c      	ldr	r2, [pc, #112]	; (800bcfc <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800bc8c:	4293      	cmp	r3, r2
 800bc8e:	d013      	beq.n	800bcb8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800bc90:	687b      	ldr	r3, [r7, #4]
 800bc92:	681b      	ldr	r3, [r3, #0]
 800bc94:	4a1a      	ldr	r2, [pc, #104]	; (800bd00 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800bc96:	4293      	cmp	r3, r2
 800bc98:	d00e      	beq.n	800bcb8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800bc9a:	687b      	ldr	r3, [r7, #4]
 800bc9c:	681b      	ldr	r3, [r3, #0]
 800bc9e:	4a15      	ldr	r2, [pc, #84]	; (800bcf4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800bca0:	4293      	cmp	r3, r2
 800bca2:	d009      	beq.n	800bcb8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800bca4:	687b      	ldr	r3, [r7, #4]
 800bca6:	681b      	ldr	r3, [r3, #0]
 800bca8:	4a16      	ldr	r2, [pc, #88]	; (800bd04 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800bcaa:	4293      	cmp	r3, r2
 800bcac:	d004      	beq.n	800bcb8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800bcae:	687b      	ldr	r3, [r7, #4]
 800bcb0:	681b      	ldr	r3, [r3, #0]
 800bcb2:	4a15      	ldr	r2, [pc, #84]	; (800bd08 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800bcb4:	4293      	cmp	r3, r2
 800bcb6:	d10c      	bne.n	800bcd2 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800bcb8:	68bb      	ldr	r3, [r7, #8]
 800bcba:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800bcbe:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800bcc0:	683b      	ldr	r3, [r7, #0]
 800bcc2:	689b      	ldr	r3, [r3, #8]
 800bcc4:	68ba      	ldr	r2, [r7, #8]
 800bcc6:	4313      	orrs	r3, r2
 800bcc8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800bcca:	687b      	ldr	r3, [r7, #4]
 800bccc:	681b      	ldr	r3, [r3, #0]
 800bcce:	68ba      	ldr	r2, [r7, #8]
 800bcd0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800bcd2:	687b      	ldr	r3, [r7, #4]
 800bcd4:	2201      	movs	r2, #1
 800bcd6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800bcda:	687b      	ldr	r3, [r7, #4]
 800bcdc:	2200      	movs	r2, #0
 800bcde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800bce2:	2300      	movs	r3, #0
}
 800bce4:	4618      	mov	r0, r3
 800bce6:	3714      	adds	r7, #20
 800bce8:	46bd      	mov	sp, r7
 800bcea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcee:	4770      	bx	lr
 800bcf0:	40010000 	.word	0x40010000
 800bcf4:	40010400 	.word	0x40010400
 800bcf8:	40000400 	.word	0x40000400
 800bcfc:	40000800 	.word	0x40000800
 800bd00:	40000c00 	.word	0x40000c00
 800bd04:	40001800 	.word	0x40001800
 800bd08:	40014000 	.word	0x40014000

0800bd0c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800bd0c:	b480      	push	{r7}
 800bd0e:	b083      	sub	sp, #12
 800bd10:	af00      	add	r7, sp, #0
 800bd12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800bd14:	bf00      	nop
 800bd16:	370c      	adds	r7, #12
 800bd18:	46bd      	mov	sp, r7
 800bd1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd1e:	4770      	bx	lr

0800bd20 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800bd20:	b480      	push	{r7}
 800bd22:	b083      	sub	sp, #12
 800bd24:	af00      	add	r7, sp, #0
 800bd26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800bd28:	bf00      	nop
 800bd2a:	370c      	adds	r7, #12
 800bd2c:	46bd      	mov	sp, r7
 800bd2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd32:	4770      	bx	lr

0800bd34 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800bd34:	b480      	push	{r7}
 800bd36:	b083      	sub	sp, #12
 800bd38:	af00      	add	r7, sp, #0
 800bd3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800bd3c:	bf00      	nop
 800bd3e:	370c      	adds	r7, #12
 800bd40:	46bd      	mov	sp, r7
 800bd42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd46:	4770      	bx	lr

0800bd48 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800bd48:	b580      	push	{r7, lr}
 800bd4a:	b082      	sub	sp, #8
 800bd4c:	af00      	add	r7, sp, #0
 800bd4e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800bd50:	687b      	ldr	r3, [r7, #4]
 800bd52:	2b00      	cmp	r3, #0
 800bd54:	d101      	bne.n	800bd5a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800bd56:	2301      	movs	r3, #1
 800bd58:	e042      	b.n	800bde0 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800bd5a:	687b      	ldr	r3, [r7, #4]
 800bd5c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bd60:	2b00      	cmp	r3, #0
 800bd62:	d106      	bne.n	800bd72 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800bd64:	687b      	ldr	r3, [r7, #4]
 800bd66:	2200      	movs	r2, #0
 800bd68:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800bd6c:	6878      	ldr	r0, [r7, #4]
 800bd6e:	f7fa fa27 	bl	80061c0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800bd72:	687b      	ldr	r3, [r7, #4]
 800bd74:	2224      	movs	r2, #36	; 0x24
 800bd76:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800bd7a:	687b      	ldr	r3, [r7, #4]
 800bd7c:	681b      	ldr	r3, [r3, #0]
 800bd7e:	681a      	ldr	r2, [r3, #0]
 800bd80:	687b      	ldr	r3, [r7, #4]
 800bd82:	681b      	ldr	r3, [r3, #0]
 800bd84:	f022 0201 	bic.w	r2, r2, #1
 800bd88:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800bd8a:	6878      	ldr	r0, [r7, #4]
 800bd8c:	f000 fccc 	bl	800c728 <UART_SetConfig>
 800bd90:	4603      	mov	r3, r0
 800bd92:	2b01      	cmp	r3, #1
 800bd94:	d101      	bne.n	800bd9a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800bd96:	2301      	movs	r3, #1
 800bd98:	e022      	b.n	800bde0 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800bd9a:	687b      	ldr	r3, [r7, #4]
 800bd9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bd9e:	2b00      	cmp	r3, #0
 800bda0:	d002      	beq.n	800bda8 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800bda2:	6878      	ldr	r0, [r7, #4]
 800bda4:	f001 fa28 	bl	800d1f8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800bda8:	687b      	ldr	r3, [r7, #4]
 800bdaa:	681b      	ldr	r3, [r3, #0]
 800bdac:	685a      	ldr	r2, [r3, #4]
 800bdae:	687b      	ldr	r3, [r7, #4]
 800bdb0:	681b      	ldr	r3, [r3, #0]
 800bdb2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800bdb6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800bdb8:	687b      	ldr	r3, [r7, #4]
 800bdba:	681b      	ldr	r3, [r3, #0]
 800bdbc:	689a      	ldr	r2, [r3, #8]
 800bdbe:	687b      	ldr	r3, [r7, #4]
 800bdc0:	681b      	ldr	r3, [r3, #0]
 800bdc2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800bdc6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800bdc8:	687b      	ldr	r3, [r7, #4]
 800bdca:	681b      	ldr	r3, [r3, #0]
 800bdcc:	681a      	ldr	r2, [r3, #0]
 800bdce:	687b      	ldr	r3, [r7, #4]
 800bdd0:	681b      	ldr	r3, [r3, #0]
 800bdd2:	f042 0201 	orr.w	r2, r2, #1
 800bdd6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800bdd8:	6878      	ldr	r0, [r7, #4]
 800bdda:	f001 faaf 	bl	800d33c <UART_CheckIdleState>
 800bdde:	4603      	mov	r3, r0
}
 800bde0:	4618      	mov	r0, r3
 800bde2:	3708      	adds	r7, #8
 800bde4:	46bd      	mov	sp, r7
 800bde6:	bd80      	pop	{r7, pc}

0800bde8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800bde8:	b580      	push	{r7, lr}
 800bdea:	b08a      	sub	sp, #40	; 0x28
 800bdec:	af02      	add	r7, sp, #8
 800bdee:	60f8      	str	r0, [r7, #12]
 800bdf0:	60b9      	str	r1, [r7, #8]
 800bdf2:	603b      	str	r3, [r7, #0]
 800bdf4:	4613      	mov	r3, r2
 800bdf6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800bdf8:	68fb      	ldr	r3, [r7, #12]
 800bdfa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bdfe:	2b20      	cmp	r3, #32
 800be00:	f040 8083 	bne.w	800bf0a <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 800be04:	68bb      	ldr	r3, [r7, #8]
 800be06:	2b00      	cmp	r3, #0
 800be08:	d002      	beq.n	800be10 <HAL_UART_Transmit+0x28>
 800be0a:	88fb      	ldrh	r3, [r7, #6]
 800be0c:	2b00      	cmp	r3, #0
 800be0e:	d101      	bne.n	800be14 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800be10:	2301      	movs	r3, #1
 800be12:	e07b      	b.n	800bf0c <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 800be14:	68fb      	ldr	r3, [r7, #12]
 800be16:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800be1a:	2b01      	cmp	r3, #1
 800be1c:	d101      	bne.n	800be22 <HAL_UART_Transmit+0x3a>
 800be1e:	2302      	movs	r3, #2
 800be20:	e074      	b.n	800bf0c <HAL_UART_Transmit+0x124>
 800be22:	68fb      	ldr	r3, [r7, #12]
 800be24:	2201      	movs	r2, #1
 800be26:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800be2a:	68fb      	ldr	r3, [r7, #12]
 800be2c:	2200      	movs	r2, #0
 800be2e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800be32:	68fb      	ldr	r3, [r7, #12]
 800be34:	2221      	movs	r2, #33	; 0x21
 800be36:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800be3a:	f7fa fb9d 	bl	8006578 <HAL_GetTick>
 800be3e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800be40:	68fb      	ldr	r3, [r7, #12]
 800be42:	88fa      	ldrh	r2, [r7, #6]
 800be44:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800be48:	68fb      	ldr	r3, [r7, #12]
 800be4a:	88fa      	ldrh	r2, [r7, #6]
 800be4c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800be50:	68fb      	ldr	r3, [r7, #12]
 800be52:	689b      	ldr	r3, [r3, #8]
 800be54:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800be58:	d108      	bne.n	800be6c <HAL_UART_Transmit+0x84>
 800be5a:	68fb      	ldr	r3, [r7, #12]
 800be5c:	691b      	ldr	r3, [r3, #16]
 800be5e:	2b00      	cmp	r3, #0
 800be60:	d104      	bne.n	800be6c <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 800be62:	2300      	movs	r3, #0
 800be64:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800be66:	68bb      	ldr	r3, [r7, #8]
 800be68:	61bb      	str	r3, [r7, #24]
 800be6a:	e003      	b.n	800be74 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 800be6c:	68bb      	ldr	r3, [r7, #8]
 800be6e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800be70:	2300      	movs	r3, #0
 800be72:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800be74:	68fb      	ldr	r3, [r7, #12]
 800be76:	2200      	movs	r2, #0
 800be78:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 800be7c:	e02c      	b.n	800bed8 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800be7e:	683b      	ldr	r3, [r7, #0]
 800be80:	9300      	str	r3, [sp, #0]
 800be82:	697b      	ldr	r3, [r7, #20]
 800be84:	2200      	movs	r2, #0
 800be86:	2180      	movs	r1, #128	; 0x80
 800be88:	68f8      	ldr	r0, [r7, #12]
 800be8a:	f001 faa2 	bl	800d3d2 <UART_WaitOnFlagUntilTimeout>
 800be8e:	4603      	mov	r3, r0
 800be90:	2b00      	cmp	r3, #0
 800be92:	d001      	beq.n	800be98 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 800be94:	2303      	movs	r3, #3
 800be96:	e039      	b.n	800bf0c <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 800be98:	69fb      	ldr	r3, [r7, #28]
 800be9a:	2b00      	cmp	r3, #0
 800be9c:	d10b      	bne.n	800beb6 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800be9e:	69bb      	ldr	r3, [r7, #24]
 800bea0:	881b      	ldrh	r3, [r3, #0]
 800bea2:	461a      	mov	r2, r3
 800bea4:	68fb      	ldr	r3, [r7, #12]
 800bea6:	681b      	ldr	r3, [r3, #0]
 800bea8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800beac:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800beae:	69bb      	ldr	r3, [r7, #24]
 800beb0:	3302      	adds	r3, #2
 800beb2:	61bb      	str	r3, [r7, #24]
 800beb4:	e007      	b.n	800bec6 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800beb6:	69fb      	ldr	r3, [r7, #28]
 800beb8:	781a      	ldrb	r2, [r3, #0]
 800beba:	68fb      	ldr	r3, [r7, #12]
 800bebc:	681b      	ldr	r3, [r3, #0]
 800bebe:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800bec0:	69fb      	ldr	r3, [r7, #28]
 800bec2:	3301      	adds	r3, #1
 800bec4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800bec6:	68fb      	ldr	r3, [r7, #12]
 800bec8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800becc:	b29b      	uxth	r3, r3
 800bece:	3b01      	subs	r3, #1
 800bed0:	b29a      	uxth	r2, r3
 800bed2:	68fb      	ldr	r3, [r7, #12]
 800bed4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800bed8:	68fb      	ldr	r3, [r7, #12]
 800beda:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800bede:	b29b      	uxth	r3, r3
 800bee0:	2b00      	cmp	r3, #0
 800bee2:	d1cc      	bne.n	800be7e <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800bee4:	683b      	ldr	r3, [r7, #0]
 800bee6:	9300      	str	r3, [sp, #0]
 800bee8:	697b      	ldr	r3, [r7, #20]
 800beea:	2200      	movs	r2, #0
 800beec:	2140      	movs	r1, #64	; 0x40
 800beee:	68f8      	ldr	r0, [r7, #12]
 800bef0:	f001 fa6f 	bl	800d3d2 <UART_WaitOnFlagUntilTimeout>
 800bef4:	4603      	mov	r3, r0
 800bef6:	2b00      	cmp	r3, #0
 800bef8:	d001      	beq.n	800befe <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 800befa:	2303      	movs	r3, #3
 800befc:	e006      	b.n	800bf0c <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800befe:	68fb      	ldr	r3, [r7, #12]
 800bf00:	2220      	movs	r2, #32
 800bf02:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 800bf06:	2300      	movs	r3, #0
 800bf08:	e000      	b.n	800bf0c <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 800bf0a:	2302      	movs	r3, #2
  }
}
 800bf0c:	4618      	mov	r0, r3
 800bf0e:	3720      	adds	r7, #32
 800bf10:	46bd      	mov	sp, r7
 800bf12:	bd80      	pop	{r7, pc}

0800bf14 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800bf14:	b580      	push	{r7, lr}
 800bf16:	b08a      	sub	sp, #40	; 0x28
 800bf18:	af00      	add	r7, sp, #0
 800bf1a:	60f8      	str	r0, [r7, #12]
 800bf1c:	60b9      	str	r1, [r7, #8]
 800bf1e:	4613      	mov	r3, r2
 800bf20:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800bf22:	68fb      	ldr	r3, [r7, #12]
 800bf24:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bf28:	2b20      	cmp	r3, #32
 800bf2a:	d142      	bne.n	800bfb2 <HAL_UART_Receive_IT+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 800bf2c:	68bb      	ldr	r3, [r7, #8]
 800bf2e:	2b00      	cmp	r3, #0
 800bf30:	d002      	beq.n	800bf38 <HAL_UART_Receive_IT+0x24>
 800bf32:	88fb      	ldrh	r3, [r7, #6]
 800bf34:	2b00      	cmp	r3, #0
 800bf36:	d101      	bne.n	800bf3c <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800bf38:	2301      	movs	r3, #1
 800bf3a:	e03b      	b.n	800bfb4 <HAL_UART_Receive_IT+0xa0>
    }

    __HAL_LOCK(huart);
 800bf3c:	68fb      	ldr	r3, [r7, #12]
 800bf3e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800bf42:	2b01      	cmp	r3, #1
 800bf44:	d101      	bne.n	800bf4a <HAL_UART_Receive_IT+0x36>
 800bf46:	2302      	movs	r3, #2
 800bf48:	e034      	b.n	800bfb4 <HAL_UART_Receive_IT+0xa0>
 800bf4a:	68fb      	ldr	r3, [r7, #12]
 800bf4c:	2201      	movs	r2, #1
 800bf4e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bf52:	68fb      	ldr	r3, [r7, #12]
 800bf54:	2200      	movs	r2, #0
 800bf56:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800bf58:	68fb      	ldr	r3, [r7, #12]
 800bf5a:	681b      	ldr	r3, [r3, #0]
 800bf5c:	4a17      	ldr	r2, [pc, #92]	; (800bfbc <HAL_UART_Receive_IT+0xa8>)
 800bf5e:	4293      	cmp	r3, r2
 800bf60:	d01f      	beq.n	800bfa2 <HAL_UART_Receive_IT+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800bf62:	68fb      	ldr	r3, [r7, #12]
 800bf64:	681b      	ldr	r3, [r3, #0]
 800bf66:	685b      	ldr	r3, [r3, #4]
 800bf68:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800bf6c:	2b00      	cmp	r3, #0
 800bf6e:	d018      	beq.n	800bfa2 <HAL_UART_Receive_IT+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800bf70:	68fb      	ldr	r3, [r7, #12]
 800bf72:	681b      	ldr	r3, [r3, #0]
 800bf74:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bf76:	697b      	ldr	r3, [r7, #20]
 800bf78:	e853 3f00 	ldrex	r3, [r3]
 800bf7c:	613b      	str	r3, [r7, #16]
   return(result);
 800bf7e:	693b      	ldr	r3, [r7, #16]
 800bf80:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800bf84:	627b      	str	r3, [r7, #36]	; 0x24
 800bf86:	68fb      	ldr	r3, [r7, #12]
 800bf88:	681b      	ldr	r3, [r3, #0]
 800bf8a:	461a      	mov	r2, r3
 800bf8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf8e:	623b      	str	r3, [r7, #32]
 800bf90:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bf92:	69f9      	ldr	r1, [r7, #28]
 800bf94:	6a3a      	ldr	r2, [r7, #32]
 800bf96:	e841 2300 	strex	r3, r2, [r1]
 800bf9a:	61bb      	str	r3, [r7, #24]
   return(result);
 800bf9c:	69bb      	ldr	r3, [r7, #24]
 800bf9e:	2b00      	cmp	r3, #0
 800bfa0:	d1e6      	bne.n	800bf70 <HAL_UART_Receive_IT+0x5c>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800bfa2:	88fb      	ldrh	r3, [r7, #6]
 800bfa4:	461a      	mov	r2, r3
 800bfa6:	68b9      	ldr	r1, [r7, #8]
 800bfa8:	68f8      	ldr	r0, [r7, #12]
 800bfaa:	f001 fadb 	bl	800d564 <UART_Start_Receive_IT>
 800bfae:	4603      	mov	r3, r0
 800bfb0:	e000      	b.n	800bfb4 <HAL_UART_Receive_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800bfb2:	2302      	movs	r3, #2
  }
}
 800bfb4:	4618      	mov	r0, r3
 800bfb6:	3728      	adds	r7, #40	; 0x28
 800bfb8:	46bd      	mov	sp, r7
 800bfba:	bd80      	pop	{r7, pc}
 800bfbc:	58000c00 	.word	0x58000c00

0800bfc0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800bfc0:	b580      	push	{r7, lr}
 800bfc2:	b0ba      	sub	sp, #232	; 0xe8
 800bfc4:	af00      	add	r7, sp, #0
 800bfc6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800bfc8:	687b      	ldr	r3, [r7, #4]
 800bfca:	681b      	ldr	r3, [r3, #0]
 800bfcc:	69db      	ldr	r3, [r3, #28]
 800bfce:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800bfd2:	687b      	ldr	r3, [r7, #4]
 800bfd4:	681b      	ldr	r3, [r3, #0]
 800bfd6:	681b      	ldr	r3, [r3, #0]
 800bfd8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800bfdc:	687b      	ldr	r3, [r7, #4]
 800bfde:	681b      	ldr	r3, [r3, #0]
 800bfe0:	689b      	ldr	r3, [r3, #8]
 800bfe2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800bfe6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800bfea:	f640 030f 	movw	r3, #2063	; 0x80f
 800bfee:	4013      	ands	r3, r2
 800bff0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800bff4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800bff8:	2b00      	cmp	r3, #0
 800bffa:	d11b      	bne.n	800c034 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800bffc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c000:	f003 0320 	and.w	r3, r3, #32
 800c004:	2b00      	cmp	r3, #0
 800c006:	d015      	beq.n	800c034 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800c008:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c00c:	f003 0320 	and.w	r3, r3, #32
 800c010:	2b00      	cmp	r3, #0
 800c012:	d105      	bne.n	800c020 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800c014:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c018:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c01c:	2b00      	cmp	r3, #0
 800c01e:	d009      	beq.n	800c034 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800c020:	687b      	ldr	r3, [r7, #4]
 800c022:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c024:	2b00      	cmp	r3, #0
 800c026:	f000 835a 	beq.w	800c6de <HAL_UART_IRQHandler+0x71e>
      {
        huart->RxISR(huart);
 800c02a:	687b      	ldr	r3, [r7, #4]
 800c02c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c02e:	6878      	ldr	r0, [r7, #4]
 800c030:	4798      	blx	r3
      }
      return;
 800c032:	e354      	b.n	800c6de <HAL_UART_IRQHandler+0x71e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800c034:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800c038:	2b00      	cmp	r3, #0
 800c03a:	f000 811f 	beq.w	800c27c <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800c03e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800c042:	4b8b      	ldr	r3, [pc, #556]	; (800c270 <HAL_UART_IRQHandler+0x2b0>)
 800c044:	4013      	ands	r3, r2
 800c046:	2b00      	cmp	r3, #0
 800c048:	d106      	bne.n	800c058 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800c04a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800c04e:	4b89      	ldr	r3, [pc, #548]	; (800c274 <HAL_UART_IRQHandler+0x2b4>)
 800c050:	4013      	ands	r3, r2
 800c052:	2b00      	cmp	r3, #0
 800c054:	f000 8112 	beq.w	800c27c <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800c058:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c05c:	f003 0301 	and.w	r3, r3, #1
 800c060:	2b00      	cmp	r3, #0
 800c062:	d011      	beq.n	800c088 <HAL_UART_IRQHandler+0xc8>
 800c064:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c068:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c06c:	2b00      	cmp	r3, #0
 800c06e:	d00b      	beq.n	800c088 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800c070:	687b      	ldr	r3, [r7, #4]
 800c072:	681b      	ldr	r3, [r3, #0]
 800c074:	2201      	movs	r2, #1
 800c076:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800c078:	687b      	ldr	r3, [r7, #4]
 800c07a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c07e:	f043 0201 	orr.w	r2, r3, #1
 800c082:	687b      	ldr	r3, [r7, #4]
 800c084:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c088:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c08c:	f003 0302 	and.w	r3, r3, #2
 800c090:	2b00      	cmp	r3, #0
 800c092:	d011      	beq.n	800c0b8 <HAL_UART_IRQHandler+0xf8>
 800c094:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c098:	f003 0301 	and.w	r3, r3, #1
 800c09c:	2b00      	cmp	r3, #0
 800c09e:	d00b      	beq.n	800c0b8 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800c0a0:	687b      	ldr	r3, [r7, #4]
 800c0a2:	681b      	ldr	r3, [r3, #0]
 800c0a4:	2202      	movs	r2, #2
 800c0a6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800c0a8:	687b      	ldr	r3, [r7, #4]
 800c0aa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c0ae:	f043 0204 	orr.w	r2, r3, #4
 800c0b2:	687b      	ldr	r3, [r7, #4]
 800c0b4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c0b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c0bc:	f003 0304 	and.w	r3, r3, #4
 800c0c0:	2b00      	cmp	r3, #0
 800c0c2:	d011      	beq.n	800c0e8 <HAL_UART_IRQHandler+0x128>
 800c0c4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c0c8:	f003 0301 	and.w	r3, r3, #1
 800c0cc:	2b00      	cmp	r3, #0
 800c0ce:	d00b      	beq.n	800c0e8 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800c0d0:	687b      	ldr	r3, [r7, #4]
 800c0d2:	681b      	ldr	r3, [r3, #0]
 800c0d4:	2204      	movs	r2, #4
 800c0d6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800c0d8:	687b      	ldr	r3, [r7, #4]
 800c0da:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c0de:	f043 0202 	orr.w	r2, r3, #2
 800c0e2:	687b      	ldr	r3, [r7, #4]
 800c0e4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800c0e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c0ec:	f003 0308 	and.w	r3, r3, #8
 800c0f0:	2b00      	cmp	r3, #0
 800c0f2:	d017      	beq.n	800c124 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800c0f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c0f8:	f003 0320 	and.w	r3, r3, #32
 800c0fc:	2b00      	cmp	r3, #0
 800c0fe:	d105      	bne.n	800c10c <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800c100:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800c104:	4b5a      	ldr	r3, [pc, #360]	; (800c270 <HAL_UART_IRQHandler+0x2b0>)
 800c106:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800c108:	2b00      	cmp	r3, #0
 800c10a:	d00b      	beq.n	800c124 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800c10c:	687b      	ldr	r3, [r7, #4]
 800c10e:	681b      	ldr	r3, [r3, #0]
 800c110:	2208      	movs	r2, #8
 800c112:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800c114:	687b      	ldr	r3, [r7, #4]
 800c116:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c11a:	f043 0208 	orr.w	r2, r3, #8
 800c11e:	687b      	ldr	r3, [r7, #4]
 800c120:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800c124:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c128:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800c12c:	2b00      	cmp	r3, #0
 800c12e:	d012      	beq.n	800c156 <HAL_UART_IRQHandler+0x196>
 800c130:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c134:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800c138:	2b00      	cmp	r3, #0
 800c13a:	d00c      	beq.n	800c156 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800c13c:	687b      	ldr	r3, [r7, #4]
 800c13e:	681b      	ldr	r3, [r3, #0]
 800c140:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800c144:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800c146:	687b      	ldr	r3, [r7, #4]
 800c148:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c14c:	f043 0220 	orr.w	r2, r3, #32
 800c150:	687b      	ldr	r3, [r7, #4]
 800c152:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800c156:	687b      	ldr	r3, [r7, #4]
 800c158:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c15c:	2b00      	cmp	r3, #0
 800c15e:	f000 82c0 	beq.w	800c6e2 <HAL_UART_IRQHandler+0x722>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800c162:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c166:	f003 0320 	and.w	r3, r3, #32
 800c16a:	2b00      	cmp	r3, #0
 800c16c:	d013      	beq.n	800c196 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800c16e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c172:	f003 0320 	and.w	r3, r3, #32
 800c176:	2b00      	cmp	r3, #0
 800c178:	d105      	bne.n	800c186 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800c17a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c17e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c182:	2b00      	cmp	r3, #0
 800c184:	d007      	beq.n	800c196 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800c186:	687b      	ldr	r3, [r7, #4]
 800c188:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c18a:	2b00      	cmp	r3, #0
 800c18c:	d003      	beq.n	800c196 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800c18e:	687b      	ldr	r3, [r7, #4]
 800c190:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c192:	6878      	ldr	r0, [r7, #4]
 800c194:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800c196:	687b      	ldr	r3, [r7, #4]
 800c198:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c19c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800c1a0:	687b      	ldr	r3, [r7, #4]
 800c1a2:	681b      	ldr	r3, [r3, #0]
 800c1a4:	689b      	ldr	r3, [r3, #8]
 800c1a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c1aa:	2b40      	cmp	r3, #64	; 0x40
 800c1ac:	d005      	beq.n	800c1ba <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800c1ae:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800c1b2:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800c1b6:	2b00      	cmp	r3, #0
 800c1b8:	d04f      	beq.n	800c25a <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800c1ba:	6878      	ldr	r0, [r7, #4]
 800c1bc:	f001 fafc 	bl	800d7b8 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c1c0:	687b      	ldr	r3, [r7, #4]
 800c1c2:	681b      	ldr	r3, [r3, #0]
 800c1c4:	689b      	ldr	r3, [r3, #8]
 800c1c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c1ca:	2b40      	cmp	r3, #64	; 0x40
 800c1cc:	d141      	bne.n	800c252 <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c1ce:	687b      	ldr	r3, [r7, #4]
 800c1d0:	681b      	ldr	r3, [r3, #0]
 800c1d2:	3308      	adds	r3, #8
 800c1d4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c1d8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800c1dc:	e853 3f00 	ldrex	r3, [r3]
 800c1e0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800c1e4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800c1e8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c1ec:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800c1f0:	687b      	ldr	r3, [r7, #4]
 800c1f2:	681b      	ldr	r3, [r3, #0]
 800c1f4:	3308      	adds	r3, #8
 800c1f6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800c1fa:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800c1fe:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c202:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800c206:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800c20a:	e841 2300 	strex	r3, r2, [r1]
 800c20e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800c212:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800c216:	2b00      	cmp	r3, #0
 800c218:	d1d9      	bne.n	800c1ce <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800c21a:	687b      	ldr	r3, [r7, #4]
 800c21c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c21e:	2b00      	cmp	r3, #0
 800c220:	d013      	beq.n	800c24a <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800c222:	687b      	ldr	r3, [r7, #4]
 800c224:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c226:	4a14      	ldr	r2, [pc, #80]	; (800c278 <HAL_UART_IRQHandler+0x2b8>)
 800c228:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800c22a:	687b      	ldr	r3, [r7, #4]
 800c22c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c22e:	4618      	mov	r0, r3
 800c230:	f7fa fe3e 	bl	8006eb0 <HAL_DMA_Abort_IT>
 800c234:	4603      	mov	r3, r0
 800c236:	2b00      	cmp	r3, #0
 800c238:	d017      	beq.n	800c26a <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800c23a:	687b      	ldr	r3, [r7, #4]
 800c23c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c23e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c240:	687a      	ldr	r2, [r7, #4]
 800c242:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 800c244:	4610      	mov	r0, r2
 800c246:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c248:	e00f      	b.n	800c26a <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800c24a:	6878      	ldr	r0, [r7, #4]
 800c24c:	f000 fa56 	bl	800c6fc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c250:	e00b      	b.n	800c26a <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800c252:	6878      	ldr	r0, [r7, #4]
 800c254:	f000 fa52 	bl	800c6fc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c258:	e007      	b.n	800c26a <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800c25a:	6878      	ldr	r0, [r7, #4]
 800c25c:	f000 fa4e 	bl	800c6fc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c260:	687b      	ldr	r3, [r7, #4]
 800c262:	2200      	movs	r2, #0
 800c264:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 800c268:	e23b      	b.n	800c6e2 <HAL_UART_IRQHandler+0x722>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c26a:	bf00      	nop
    return;
 800c26c:	e239      	b.n	800c6e2 <HAL_UART_IRQHandler+0x722>
 800c26e:	bf00      	nop
 800c270:	10000001 	.word	0x10000001
 800c274:	04000120 	.word	0x04000120
 800c278:	0800d885 	.word	0x0800d885

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c27c:	687b      	ldr	r3, [r7, #4]
 800c27e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c280:	2b01      	cmp	r3, #1
 800c282:	f040 81ce 	bne.w	800c622 <HAL_UART_IRQHandler+0x662>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800c286:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c28a:	f003 0310 	and.w	r3, r3, #16
 800c28e:	2b00      	cmp	r3, #0
 800c290:	f000 81c7 	beq.w	800c622 <HAL_UART_IRQHandler+0x662>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800c294:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c298:	f003 0310 	and.w	r3, r3, #16
 800c29c:	2b00      	cmp	r3, #0
 800c29e:	f000 81c0 	beq.w	800c622 <HAL_UART_IRQHandler+0x662>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800c2a2:	687b      	ldr	r3, [r7, #4]
 800c2a4:	681b      	ldr	r3, [r3, #0]
 800c2a6:	2210      	movs	r2, #16
 800c2a8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c2aa:	687b      	ldr	r3, [r7, #4]
 800c2ac:	681b      	ldr	r3, [r3, #0]
 800c2ae:	689b      	ldr	r3, [r3, #8]
 800c2b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c2b4:	2b40      	cmp	r3, #64	; 0x40
 800c2b6:	f040 813b 	bne.w	800c530 <HAL_UART_IRQHandler+0x570>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800c2ba:	687b      	ldr	r3, [r7, #4]
 800c2bc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c2be:	681b      	ldr	r3, [r3, #0]
 800c2c0:	4a8b      	ldr	r2, [pc, #556]	; (800c4f0 <HAL_UART_IRQHandler+0x530>)
 800c2c2:	4293      	cmp	r3, r2
 800c2c4:	d059      	beq.n	800c37a <HAL_UART_IRQHandler+0x3ba>
 800c2c6:	687b      	ldr	r3, [r7, #4]
 800c2c8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c2ca:	681b      	ldr	r3, [r3, #0]
 800c2cc:	4a89      	ldr	r2, [pc, #548]	; (800c4f4 <HAL_UART_IRQHandler+0x534>)
 800c2ce:	4293      	cmp	r3, r2
 800c2d0:	d053      	beq.n	800c37a <HAL_UART_IRQHandler+0x3ba>
 800c2d2:	687b      	ldr	r3, [r7, #4]
 800c2d4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c2d6:	681b      	ldr	r3, [r3, #0]
 800c2d8:	4a87      	ldr	r2, [pc, #540]	; (800c4f8 <HAL_UART_IRQHandler+0x538>)
 800c2da:	4293      	cmp	r3, r2
 800c2dc:	d04d      	beq.n	800c37a <HAL_UART_IRQHandler+0x3ba>
 800c2de:	687b      	ldr	r3, [r7, #4]
 800c2e0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c2e2:	681b      	ldr	r3, [r3, #0]
 800c2e4:	4a85      	ldr	r2, [pc, #532]	; (800c4fc <HAL_UART_IRQHandler+0x53c>)
 800c2e6:	4293      	cmp	r3, r2
 800c2e8:	d047      	beq.n	800c37a <HAL_UART_IRQHandler+0x3ba>
 800c2ea:	687b      	ldr	r3, [r7, #4]
 800c2ec:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c2ee:	681b      	ldr	r3, [r3, #0]
 800c2f0:	4a83      	ldr	r2, [pc, #524]	; (800c500 <HAL_UART_IRQHandler+0x540>)
 800c2f2:	4293      	cmp	r3, r2
 800c2f4:	d041      	beq.n	800c37a <HAL_UART_IRQHandler+0x3ba>
 800c2f6:	687b      	ldr	r3, [r7, #4]
 800c2f8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c2fa:	681b      	ldr	r3, [r3, #0]
 800c2fc:	4a81      	ldr	r2, [pc, #516]	; (800c504 <HAL_UART_IRQHandler+0x544>)
 800c2fe:	4293      	cmp	r3, r2
 800c300:	d03b      	beq.n	800c37a <HAL_UART_IRQHandler+0x3ba>
 800c302:	687b      	ldr	r3, [r7, #4]
 800c304:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c306:	681b      	ldr	r3, [r3, #0]
 800c308:	4a7f      	ldr	r2, [pc, #508]	; (800c508 <HAL_UART_IRQHandler+0x548>)
 800c30a:	4293      	cmp	r3, r2
 800c30c:	d035      	beq.n	800c37a <HAL_UART_IRQHandler+0x3ba>
 800c30e:	687b      	ldr	r3, [r7, #4]
 800c310:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c312:	681b      	ldr	r3, [r3, #0]
 800c314:	4a7d      	ldr	r2, [pc, #500]	; (800c50c <HAL_UART_IRQHandler+0x54c>)
 800c316:	4293      	cmp	r3, r2
 800c318:	d02f      	beq.n	800c37a <HAL_UART_IRQHandler+0x3ba>
 800c31a:	687b      	ldr	r3, [r7, #4]
 800c31c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c31e:	681b      	ldr	r3, [r3, #0]
 800c320:	4a7b      	ldr	r2, [pc, #492]	; (800c510 <HAL_UART_IRQHandler+0x550>)
 800c322:	4293      	cmp	r3, r2
 800c324:	d029      	beq.n	800c37a <HAL_UART_IRQHandler+0x3ba>
 800c326:	687b      	ldr	r3, [r7, #4]
 800c328:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c32a:	681b      	ldr	r3, [r3, #0]
 800c32c:	4a79      	ldr	r2, [pc, #484]	; (800c514 <HAL_UART_IRQHandler+0x554>)
 800c32e:	4293      	cmp	r3, r2
 800c330:	d023      	beq.n	800c37a <HAL_UART_IRQHandler+0x3ba>
 800c332:	687b      	ldr	r3, [r7, #4]
 800c334:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c336:	681b      	ldr	r3, [r3, #0]
 800c338:	4a77      	ldr	r2, [pc, #476]	; (800c518 <HAL_UART_IRQHandler+0x558>)
 800c33a:	4293      	cmp	r3, r2
 800c33c:	d01d      	beq.n	800c37a <HAL_UART_IRQHandler+0x3ba>
 800c33e:	687b      	ldr	r3, [r7, #4]
 800c340:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c342:	681b      	ldr	r3, [r3, #0]
 800c344:	4a75      	ldr	r2, [pc, #468]	; (800c51c <HAL_UART_IRQHandler+0x55c>)
 800c346:	4293      	cmp	r3, r2
 800c348:	d017      	beq.n	800c37a <HAL_UART_IRQHandler+0x3ba>
 800c34a:	687b      	ldr	r3, [r7, #4]
 800c34c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c34e:	681b      	ldr	r3, [r3, #0]
 800c350:	4a73      	ldr	r2, [pc, #460]	; (800c520 <HAL_UART_IRQHandler+0x560>)
 800c352:	4293      	cmp	r3, r2
 800c354:	d011      	beq.n	800c37a <HAL_UART_IRQHandler+0x3ba>
 800c356:	687b      	ldr	r3, [r7, #4]
 800c358:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c35a:	681b      	ldr	r3, [r3, #0]
 800c35c:	4a71      	ldr	r2, [pc, #452]	; (800c524 <HAL_UART_IRQHandler+0x564>)
 800c35e:	4293      	cmp	r3, r2
 800c360:	d00b      	beq.n	800c37a <HAL_UART_IRQHandler+0x3ba>
 800c362:	687b      	ldr	r3, [r7, #4]
 800c364:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c366:	681b      	ldr	r3, [r3, #0]
 800c368:	4a6f      	ldr	r2, [pc, #444]	; (800c528 <HAL_UART_IRQHandler+0x568>)
 800c36a:	4293      	cmp	r3, r2
 800c36c:	d005      	beq.n	800c37a <HAL_UART_IRQHandler+0x3ba>
 800c36e:	687b      	ldr	r3, [r7, #4]
 800c370:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c372:	681b      	ldr	r3, [r3, #0]
 800c374:	4a6d      	ldr	r2, [pc, #436]	; (800c52c <HAL_UART_IRQHandler+0x56c>)
 800c376:	4293      	cmp	r3, r2
 800c378:	d105      	bne.n	800c386 <HAL_UART_IRQHandler+0x3c6>
 800c37a:	687b      	ldr	r3, [r7, #4]
 800c37c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c37e:	681b      	ldr	r3, [r3, #0]
 800c380:	685b      	ldr	r3, [r3, #4]
 800c382:	b29b      	uxth	r3, r3
 800c384:	e004      	b.n	800c390 <HAL_UART_IRQHandler+0x3d0>
 800c386:	687b      	ldr	r3, [r7, #4]
 800c388:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c38a:	681b      	ldr	r3, [r3, #0]
 800c38c:	685b      	ldr	r3, [r3, #4]
 800c38e:	b29b      	uxth	r3, r3
 800c390:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800c394:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800c398:	2b00      	cmp	r3, #0
 800c39a:	f000 81a4 	beq.w	800c6e6 <HAL_UART_IRQHandler+0x726>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800c39e:	687b      	ldr	r3, [r7, #4]
 800c3a0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800c3a4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800c3a8:	429a      	cmp	r2, r3
 800c3aa:	f080 819c 	bcs.w	800c6e6 <HAL_UART_IRQHandler+0x726>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800c3ae:	687b      	ldr	r3, [r7, #4]
 800c3b0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800c3b4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800c3b8:	687b      	ldr	r3, [r7, #4]
 800c3ba:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c3bc:	69db      	ldr	r3, [r3, #28]
 800c3be:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c3c2:	f000 8086 	beq.w	800c4d2 <HAL_UART_IRQHandler+0x512>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c3c6:	687b      	ldr	r3, [r7, #4]
 800c3c8:	681b      	ldr	r3, [r3, #0]
 800c3ca:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c3ce:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800c3d2:	e853 3f00 	ldrex	r3, [r3]
 800c3d6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800c3da:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800c3de:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c3e2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800c3e6:	687b      	ldr	r3, [r7, #4]
 800c3e8:	681b      	ldr	r3, [r3, #0]
 800c3ea:	461a      	mov	r2, r3
 800c3ec:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800c3f0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800c3f4:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c3f8:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800c3fc:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800c400:	e841 2300 	strex	r3, r2, [r1]
 800c404:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800c408:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800c40c:	2b00      	cmp	r3, #0
 800c40e:	d1da      	bne.n	800c3c6 <HAL_UART_IRQHandler+0x406>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c410:	687b      	ldr	r3, [r7, #4]
 800c412:	681b      	ldr	r3, [r3, #0]
 800c414:	3308      	adds	r3, #8
 800c416:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c418:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c41a:	e853 3f00 	ldrex	r3, [r3]
 800c41e:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800c420:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800c422:	f023 0301 	bic.w	r3, r3, #1
 800c426:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800c42a:	687b      	ldr	r3, [r7, #4]
 800c42c:	681b      	ldr	r3, [r3, #0]
 800c42e:	3308      	adds	r3, #8
 800c430:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800c434:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800c438:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c43a:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800c43c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800c440:	e841 2300 	strex	r3, r2, [r1]
 800c444:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800c446:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c448:	2b00      	cmp	r3, #0
 800c44a:	d1e1      	bne.n	800c410 <HAL_UART_IRQHandler+0x450>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c44c:	687b      	ldr	r3, [r7, #4]
 800c44e:	681b      	ldr	r3, [r3, #0]
 800c450:	3308      	adds	r3, #8
 800c452:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c454:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c456:	e853 3f00 	ldrex	r3, [r3]
 800c45a:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800c45c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c45e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c462:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800c466:	687b      	ldr	r3, [r7, #4]
 800c468:	681b      	ldr	r3, [r3, #0]
 800c46a:	3308      	adds	r3, #8
 800c46c:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800c470:	66fa      	str	r2, [r7, #108]	; 0x6c
 800c472:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c474:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800c476:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800c478:	e841 2300 	strex	r3, r2, [r1]
 800c47c:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800c47e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c480:	2b00      	cmp	r3, #0
 800c482:	d1e3      	bne.n	800c44c <HAL_UART_IRQHandler+0x48c>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800c484:	687b      	ldr	r3, [r7, #4]
 800c486:	2220      	movs	r2, #32
 800c488:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c48c:	687b      	ldr	r3, [r7, #4]
 800c48e:	2200      	movs	r2, #0
 800c490:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c492:	687b      	ldr	r3, [r7, #4]
 800c494:	681b      	ldr	r3, [r3, #0]
 800c496:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c498:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c49a:	e853 3f00 	ldrex	r3, [r3]
 800c49e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800c4a0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c4a2:	f023 0310 	bic.w	r3, r3, #16
 800c4a6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800c4aa:	687b      	ldr	r3, [r7, #4]
 800c4ac:	681b      	ldr	r3, [r3, #0]
 800c4ae:	461a      	mov	r2, r3
 800c4b0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800c4b4:	65bb      	str	r3, [r7, #88]	; 0x58
 800c4b6:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c4b8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800c4ba:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800c4bc:	e841 2300 	strex	r3, r2, [r1]
 800c4c0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800c4c2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c4c4:	2b00      	cmp	r3, #0
 800c4c6:	d1e4      	bne.n	800c492 <HAL_UART_IRQHandler+0x4d2>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800c4c8:	687b      	ldr	r3, [r7, #4]
 800c4ca:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c4cc:	4618      	mov	r0, r3
 800c4ce:	f7fa f9d1 	bl	8006874 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800c4d2:	687b      	ldr	r3, [r7, #4]
 800c4d4:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800c4d8:	687b      	ldr	r3, [r7, #4]
 800c4da:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c4de:	b29b      	uxth	r3, r3
 800c4e0:	1ad3      	subs	r3, r2, r3
 800c4e2:	b29b      	uxth	r3, r3
 800c4e4:	4619      	mov	r1, r3
 800c4e6:	6878      	ldr	r0, [r7, #4]
 800c4e8:	f000 f912 	bl	800c710 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800c4ec:	e0fb      	b.n	800c6e6 <HAL_UART_IRQHandler+0x726>
 800c4ee:	bf00      	nop
 800c4f0:	40020010 	.word	0x40020010
 800c4f4:	40020028 	.word	0x40020028
 800c4f8:	40020040 	.word	0x40020040
 800c4fc:	40020058 	.word	0x40020058
 800c500:	40020070 	.word	0x40020070
 800c504:	40020088 	.word	0x40020088
 800c508:	400200a0 	.word	0x400200a0
 800c50c:	400200b8 	.word	0x400200b8
 800c510:	40020410 	.word	0x40020410
 800c514:	40020428 	.word	0x40020428
 800c518:	40020440 	.word	0x40020440
 800c51c:	40020458 	.word	0x40020458
 800c520:	40020470 	.word	0x40020470
 800c524:	40020488 	.word	0x40020488
 800c528:	400204a0 	.word	0x400204a0
 800c52c:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800c530:	687b      	ldr	r3, [r7, #4]
 800c532:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800c536:	687b      	ldr	r3, [r7, #4]
 800c538:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c53c:	b29b      	uxth	r3, r3
 800c53e:	1ad3      	subs	r3, r2, r3
 800c540:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800c544:	687b      	ldr	r3, [r7, #4]
 800c546:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c54a:	b29b      	uxth	r3, r3
 800c54c:	2b00      	cmp	r3, #0
 800c54e:	f000 80cc 	beq.w	800c6ea <HAL_UART_IRQHandler+0x72a>
          && (nb_rx_data > 0U))
 800c552:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800c556:	2b00      	cmp	r3, #0
 800c558:	f000 80c7 	beq.w	800c6ea <HAL_UART_IRQHandler+0x72a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c55c:	687b      	ldr	r3, [r7, #4]
 800c55e:	681b      	ldr	r3, [r3, #0]
 800c560:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c562:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c564:	e853 3f00 	ldrex	r3, [r3]
 800c568:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800c56a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c56c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800c570:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800c574:	687b      	ldr	r3, [r7, #4]
 800c576:	681b      	ldr	r3, [r3, #0]
 800c578:	461a      	mov	r2, r3
 800c57a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800c57e:	647b      	str	r3, [r7, #68]	; 0x44
 800c580:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c582:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800c584:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c586:	e841 2300 	strex	r3, r2, [r1]
 800c58a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800c58c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c58e:	2b00      	cmp	r3, #0
 800c590:	d1e4      	bne.n	800c55c <HAL_UART_IRQHandler+0x59c>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800c592:	687b      	ldr	r3, [r7, #4]
 800c594:	681b      	ldr	r3, [r3, #0]
 800c596:	3308      	adds	r3, #8
 800c598:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c59a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c59c:	e853 3f00 	ldrex	r3, [r3]
 800c5a0:	623b      	str	r3, [r7, #32]
   return(result);
 800c5a2:	6a3a      	ldr	r2, [r7, #32]
 800c5a4:	4b54      	ldr	r3, [pc, #336]	; (800c6f8 <HAL_UART_IRQHandler+0x738>)
 800c5a6:	4013      	ands	r3, r2
 800c5a8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800c5ac:	687b      	ldr	r3, [r7, #4]
 800c5ae:	681b      	ldr	r3, [r3, #0]
 800c5b0:	3308      	adds	r3, #8
 800c5b2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800c5b6:	633a      	str	r2, [r7, #48]	; 0x30
 800c5b8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c5ba:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c5bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c5be:	e841 2300 	strex	r3, r2, [r1]
 800c5c2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800c5c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c5c6:	2b00      	cmp	r3, #0
 800c5c8:	d1e3      	bne.n	800c592 <HAL_UART_IRQHandler+0x5d2>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800c5ca:	687b      	ldr	r3, [r7, #4]
 800c5cc:	2220      	movs	r2, #32
 800c5ce:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c5d2:	687b      	ldr	r3, [r7, #4]
 800c5d4:	2200      	movs	r2, #0
 800c5d6:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800c5d8:	687b      	ldr	r3, [r7, #4]
 800c5da:	2200      	movs	r2, #0
 800c5dc:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c5de:	687b      	ldr	r3, [r7, #4]
 800c5e0:	681b      	ldr	r3, [r3, #0]
 800c5e2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c5e4:	693b      	ldr	r3, [r7, #16]
 800c5e6:	e853 3f00 	ldrex	r3, [r3]
 800c5ea:	60fb      	str	r3, [r7, #12]
   return(result);
 800c5ec:	68fb      	ldr	r3, [r7, #12]
 800c5ee:	f023 0310 	bic.w	r3, r3, #16
 800c5f2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800c5f6:	687b      	ldr	r3, [r7, #4]
 800c5f8:	681b      	ldr	r3, [r3, #0]
 800c5fa:	461a      	mov	r2, r3
 800c5fc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800c600:	61fb      	str	r3, [r7, #28]
 800c602:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c604:	69b9      	ldr	r1, [r7, #24]
 800c606:	69fa      	ldr	r2, [r7, #28]
 800c608:	e841 2300 	strex	r3, r2, [r1]
 800c60c:	617b      	str	r3, [r7, #20]
   return(result);
 800c60e:	697b      	ldr	r3, [r7, #20]
 800c610:	2b00      	cmp	r3, #0
 800c612:	d1e4      	bne.n	800c5de <HAL_UART_IRQHandler+0x61e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800c614:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800c618:	4619      	mov	r1, r3
 800c61a:	6878      	ldr	r0, [r7, #4]
 800c61c:	f000 f878 	bl	800c710 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800c620:	e063      	b.n	800c6ea <HAL_UART_IRQHandler+0x72a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800c622:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c626:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800c62a:	2b00      	cmp	r3, #0
 800c62c:	d00e      	beq.n	800c64c <HAL_UART_IRQHandler+0x68c>
 800c62e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c632:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c636:	2b00      	cmp	r3, #0
 800c638:	d008      	beq.n	800c64c <HAL_UART_IRQHandler+0x68c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800c63a:	687b      	ldr	r3, [r7, #4]
 800c63c:	681b      	ldr	r3, [r3, #0]
 800c63e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800c642:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800c644:	6878      	ldr	r0, [r7, #4]
 800c646:	f001 fdbb 	bl	800e1c0 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800c64a:	e051      	b.n	800c6f0 <HAL_UART_IRQHandler+0x730>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800c64c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c650:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c654:	2b00      	cmp	r3, #0
 800c656:	d014      	beq.n	800c682 <HAL_UART_IRQHandler+0x6c2>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800c658:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c65c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c660:	2b00      	cmp	r3, #0
 800c662:	d105      	bne.n	800c670 <HAL_UART_IRQHandler+0x6b0>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800c664:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c668:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c66c:	2b00      	cmp	r3, #0
 800c66e:	d008      	beq.n	800c682 <HAL_UART_IRQHandler+0x6c2>
  {
    if (huart->TxISR != NULL)
 800c670:	687b      	ldr	r3, [r7, #4]
 800c672:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c674:	2b00      	cmp	r3, #0
 800c676:	d03a      	beq.n	800c6ee <HAL_UART_IRQHandler+0x72e>
    {
      huart->TxISR(huart);
 800c678:	687b      	ldr	r3, [r7, #4]
 800c67a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c67c:	6878      	ldr	r0, [r7, #4]
 800c67e:	4798      	blx	r3
    }
    return;
 800c680:	e035      	b.n	800c6ee <HAL_UART_IRQHandler+0x72e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800c682:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c686:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c68a:	2b00      	cmp	r3, #0
 800c68c:	d009      	beq.n	800c6a2 <HAL_UART_IRQHandler+0x6e2>
 800c68e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c692:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c696:	2b00      	cmp	r3, #0
 800c698:	d003      	beq.n	800c6a2 <HAL_UART_IRQHandler+0x6e2>
  {
    UART_EndTransmit_IT(huart);
 800c69a:	6878      	ldr	r0, [r7, #4]
 800c69c:	f001 f908 	bl	800d8b0 <UART_EndTransmit_IT>
    return;
 800c6a0:	e026      	b.n	800c6f0 <HAL_UART_IRQHandler+0x730>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800c6a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c6a6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c6aa:	2b00      	cmp	r3, #0
 800c6ac:	d009      	beq.n	800c6c2 <HAL_UART_IRQHandler+0x702>
 800c6ae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c6b2:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800c6b6:	2b00      	cmp	r3, #0
 800c6b8:	d003      	beq.n	800c6c2 <HAL_UART_IRQHandler+0x702>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800c6ba:	6878      	ldr	r0, [r7, #4]
 800c6bc:	f001 fd94 	bl	800e1e8 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800c6c0:	e016      	b.n	800c6f0 <HAL_UART_IRQHandler+0x730>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800c6c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c6c6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800c6ca:	2b00      	cmp	r3, #0
 800c6cc:	d010      	beq.n	800c6f0 <HAL_UART_IRQHandler+0x730>
 800c6ce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c6d2:	2b00      	cmp	r3, #0
 800c6d4:	da0c      	bge.n	800c6f0 <HAL_UART_IRQHandler+0x730>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800c6d6:	6878      	ldr	r0, [r7, #4]
 800c6d8:	f001 fd7c 	bl	800e1d4 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800c6dc:	e008      	b.n	800c6f0 <HAL_UART_IRQHandler+0x730>
      return;
 800c6de:	bf00      	nop
 800c6e0:	e006      	b.n	800c6f0 <HAL_UART_IRQHandler+0x730>
    return;
 800c6e2:	bf00      	nop
 800c6e4:	e004      	b.n	800c6f0 <HAL_UART_IRQHandler+0x730>
      return;
 800c6e6:	bf00      	nop
 800c6e8:	e002      	b.n	800c6f0 <HAL_UART_IRQHandler+0x730>
      return;
 800c6ea:	bf00      	nop
 800c6ec:	e000      	b.n	800c6f0 <HAL_UART_IRQHandler+0x730>
    return;
 800c6ee:	bf00      	nop
  }
}
 800c6f0:	37e8      	adds	r7, #232	; 0xe8
 800c6f2:	46bd      	mov	sp, r7
 800c6f4:	bd80      	pop	{r7, pc}
 800c6f6:	bf00      	nop
 800c6f8:	effffffe 	.word	0xeffffffe

0800c6fc <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800c6fc:	b480      	push	{r7}
 800c6fe:	b083      	sub	sp, #12
 800c700:	af00      	add	r7, sp, #0
 800c702:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800c704:	bf00      	nop
 800c706:	370c      	adds	r7, #12
 800c708:	46bd      	mov	sp, r7
 800c70a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c70e:	4770      	bx	lr

0800c710 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800c710:	b480      	push	{r7}
 800c712:	b083      	sub	sp, #12
 800c714:	af00      	add	r7, sp, #0
 800c716:	6078      	str	r0, [r7, #4]
 800c718:	460b      	mov	r3, r1
 800c71a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800c71c:	bf00      	nop
 800c71e:	370c      	adds	r7, #12
 800c720:	46bd      	mov	sp, r7
 800c722:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c726:	4770      	bx	lr

0800c728 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800c728:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800c72c:	b092      	sub	sp, #72	; 0x48
 800c72e:	af00      	add	r7, sp, #0
 800c730:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800c732:	2300      	movs	r3, #0
 800c734:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800c738:	697b      	ldr	r3, [r7, #20]
 800c73a:	689a      	ldr	r2, [r3, #8]
 800c73c:	697b      	ldr	r3, [r7, #20]
 800c73e:	691b      	ldr	r3, [r3, #16]
 800c740:	431a      	orrs	r2, r3
 800c742:	697b      	ldr	r3, [r7, #20]
 800c744:	695b      	ldr	r3, [r3, #20]
 800c746:	431a      	orrs	r2, r3
 800c748:	697b      	ldr	r3, [r7, #20]
 800c74a:	69db      	ldr	r3, [r3, #28]
 800c74c:	4313      	orrs	r3, r2
 800c74e:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800c750:	697b      	ldr	r3, [r7, #20]
 800c752:	681b      	ldr	r3, [r3, #0]
 800c754:	681a      	ldr	r2, [r3, #0]
 800c756:	4bbe      	ldr	r3, [pc, #760]	; (800ca50 <UART_SetConfig+0x328>)
 800c758:	4013      	ands	r3, r2
 800c75a:	697a      	ldr	r2, [r7, #20]
 800c75c:	6812      	ldr	r2, [r2, #0]
 800c75e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800c760:	430b      	orrs	r3, r1
 800c762:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800c764:	697b      	ldr	r3, [r7, #20]
 800c766:	681b      	ldr	r3, [r3, #0]
 800c768:	685b      	ldr	r3, [r3, #4]
 800c76a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800c76e:	697b      	ldr	r3, [r7, #20]
 800c770:	68da      	ldr	r2, [r3, #12]
 800c772:	697b      	ldr	r3, [r7, #20]
 800c774:	681b      	ldr	r3, [r3, #0]
 800c776:	430a      	orrs	r2, r1
 800c778:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800c77a:	697b      	ldr	r3, [r7, #20]
 800c77c:	699b      	ldr	r3, [r3, #24]
 800c77e:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800c780:	697b      	ldr	r3, [r7, #20]
 800c782:	681b      	ldr	r3, [r3, #0]
 800c784:	4ab3      	ldr	r2, [pc, #716]	; (800ca54 <UART_SetConfig+0x32c>)
 800c786:	4293      	cmp	r3, r2
 800c788:	d004      	beq.n	800c794 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800c78a:	697b      	ldr	r3, [r7, #20]
 800c78c:	6a1b      	ldr	r3, [r3, #32]
 800c78e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c790:	4313      	orrs	r3, r2
 800c792:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800c794:	697b      	ldr	r3, [r7, #20]
 800c796:	681b      	ldr	r3, [r3, #0]
 800c798:	689a      	ldr	r2, [r3, #8]
 800c79a:	4baf      	ldr	r3, [pc, #700]	; (800ca58 <UART_SetConfig+0x330>)
 800c79c:	4013      	ands	r3, r2
 800c79e:	697a      	ldr	r2, [r7, #20]
 800c7a0:	6812      	ldr	r2, [r2, #0]
 800c7a2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800c7a4:	430b      	orrs	r3, r1
 800c7a6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800c7a8:	697b      	ldr	r3, [r7, #20]
 800c7aa:	681b      	ldr	r3, [r3, #0]
 800c7ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c7ae:	f023 010f 	bic.w	r1, r3, #15
 800c7b2:	697b      	ldr	r3, [r7, #20]
 800c7b4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c7b6:	697b      	ldr	r3, [r7, #20]
 800c7b8:	681b      	ldr	r3, [r3, #0]
 800c7ba:	430a      	orrs	r2, r1
 800c7bc:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800c7be:	697b      	ldr	r3, [r7, #20]
 800c7c0:	681b      	ldr	r3, [r3, #0]
 800c7c2:	4aa6      	ldr	r2, [pc, #664]	; (800ca5c <UART_SetConfig+0x334>)
 800c7c4:	4293      	cmp	r3, r2
 800c7c6:	d177      	bne.n	800c8b8 <UART_SetConfig+0x190>
 800c7c8:	4ba5      	ldr	r3, [pc, #660]	; (800ca60 <UART_SetConfig+0x338>)
 800c7ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c7cc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800c7d0:	2b28      	cmp	r3, #40	; 0x28
 800c7d2:	d86d      	bhi.n	800c8b0 <UART_SetConfig+0x188>
 800c7d4:	a201      	add	r2, pc, #4	; (adr r2, 800c7dc <UART_SetConfig+0xb4>)
 800c7d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c7da:	bf00      	nop
 800c7dc:	0800c881 	.word	0x0800c881
 800c7e0:	0800c8b1 	.word	0x0800c8b1
 800c7e4:	0800c8b1 	.word	0x0800c8b1
 800c7e8:	0800c8b1 	.word	0x0800c8b1
 800c7ec:	0800c8b1 	.word	0x0800c8b1
 800c7f0:	0800c8b1 	.word	0x0800c8b1
 800c7f4:	0800c8b1 	.word	0x0800c8b1
 800c7f8:	0800c8b1 	.word	0x0800c8b1
 800c7fc:	0800c889 	.word	0x0800c889
 800c800:	0800c8b1 	.word	0x0800c8b1
 800c804:	0800c8b1 	.word	0x0800c8b1
 800c808:	0800c8b1 	.word	0x0800c8b1
 800c80c:	0800c8b1 	.word	0x0800c8b1
 800c810:	0800c8b1 	.word	0x0800c8b1
 800c814:	0800c8b1 	.word	0x0800c8b1
 800c818:	0800c8b1 	.word	0x0800c8b1
 800c81c:	0800c891 	.word	0x0800c891
 800c820:	0800c8b1 	.word	0x0800c8b1
 800c824:	0800c8b1 	.word	0x0800c8b1
 800c828:	0800c8b1 	.word	0x0800c8b1
 800c82c:	0800c8b1 	.word	0x0800c8b1
 800c830:	0800c8b1 	.word	0x0800c8b1
 800c834:	0800c8b1 	.word	0x0800c8b1
 800c838:	0800c8b1 	.word	0x0800c8b1
 800c83c:	0800c899 	.word	0x0800c899
 800c840:	0800c8b1 	.word	0x0800c8b1
 800c844:	0800c8b1 	.word	0x0800c8b1
 800c848:	0800c8b1 	.word	0x0800c8b1
 800c84c:	0800c8b1 	.word	0x0800c8b1
 800c850:	0800c8b1 	.word	0x0800c8b1
 800c854:	0800c8b1 	.word	0x0800c8b1
 800c858:	0800c8b1 	.word	0x0800c8b1
 800c85c:	0800c8a1 	.word	0x0800c8a1
 800c860:	0800c8b1 	.word	0x0800c8b1
 800c864:	0800c8b1 	.word	0x0800c8b1
 800c868:	0800c8b1 	.word	0x0800c8b1
 800c86c:	0800c8b1 	.word	0x0800c8b1
 800c870:	0800c8b1 	.word	0x0800c8b1
 800c874:	0800c8b1 	.word	0x0800c8b1
 800c878:	0800c8b1 	.word	0x0800c8b1
 800c87c:	0800c8a9 	.word	0x0800c8a9
 800c880:	2301      	movs	r3, #1
 800c882:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c886:	e222      	b.n	800ccce <UART_SetConfig+0x5a6>
 800c888:	2304      	movs	r3, #4
 800c88a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c88e:	e21e      	b.n	800ccce <UART_SetConfig+0x5a6>
 800c890:	2308      	movs	r3, #8
 800c892:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c896:	e21a      	b.n	800ccce <UART_SetConfig+0x5a6>
 800c898:	2310      	movs	r3, #16
 800c89a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c89e:	e216      	b.n	800ccce <UART_SetConfig+0x5a6>
 800c8a0:	2320      	movs	r3, #32
 800c8a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c8a6:	e212      	b.n	800ccce <UART_SetConfig+0x5a6>
 800c8a8:	2340      	movs	r3, #64	; 0x40
 800c8aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c8ae:	e20e      	b.n	800ccce <UART_SetConfig+0x5a6>
 800c8b0:	2380      	movs	r3, #128	; 0x80
 800c8b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c8b6:	e20a      	b.n	800ccce <UART_SetConfig+0x5a6>
 800c8b8:	697b      	ldr	r3, [r7, #20]
 800c8ba:	681b      	ldr	r3, [r3, #0]
 800c8bc:	4a69      	ldr	r2, [pc, #420]	; (800ca64 <UART_SetConfig+0x33c>)
 800c8be:	4293      	cmp	r3, r2
 800c8c0:	d130      	bne.n	800c924 <UART_SetConfig+0x1fc>
 800c8c2:	4b67      	ldr	r3, [pc, #412]	; (800ca60 <UART_SetConfig+0x338>)
 800c8c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c8c6:	f003 0307 	and.w	r3, r3, #7
 800c8ca:	2b05      	cmp	r3, #5
 800c8cc:	d826      	bhi.n	800c91c <UART_SetConfig+0x1f4>
 800c8ce:	a201      	add	r2, pc, #4	; (adr r2, 800c8d4 <UART_SetConfig+0x1ac>)
 800c8d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c8d4:	0800c8ed 	.word	0x0800c8ed
 800c8d8:	0800c8f5 	.word	0x0800c8f5
 800c8dc:	0800c8fd 	.word	0x0800c8fd
 800c8e0:	0800c905 	.word	0x0800c905
 800c8e4:	0800c90d 	.word	0x0800c90d
 800c8e8:	0800c915 	.word	0x0800c915
 800c8ec:	2300      	movs	r3, #0
 800c8ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c8f2:	e1ec      	b.n	800ccce <UART_SetConfig+0x5a6>
 800c8f4:	2304      	movs	r3, #4
 800c8f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c8fa:	e1e8      	b.n	800ccce <UART_SetConfig+0x5a6>
 800c8fc:	2308      	movs	r3, #8
 800c8fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c902:	e1e4      	b.n	800ccce <UART_SetConfig+0x5a6>
 800c904:	2310      	movs	r3, #16
 800c906:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c90a:	e1e0      	b.n	800ccce <UART_SetConfig+0x5a6>
 800c90c:	2320      	movs	r3, #32
 800c90e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c912:	e1dc      	b.n	800ccce <UART_SetConfig+0x5a6>
 800c914:	2340      	movs	r3, #64	; 0x40
 800c916:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c91a:	e1d8      	b.n	800ccce <UART_SetConfig+0x5a6>
 800c91c:	2380      	movs	r3, #128	; 0x80
 800c91e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c922:	e1d4      	b.n	800ccce <UART_SetConfig+0x5a6>
 800c924:	697b      	ldr	r3, [r7, #20]
 800c926:	681b      	ldr	r3, [r3, #0]
 800c928:	4a4f      	ldr	r2, [pc, #316]	; (800ca68 <UART_SetConfig+0x340>)
 800c92a:	4293      	cmp	r3, r2
 800c92c:	d130      	bne.n	800c990 <UART_SetConfig+0x268>
 800c92e:	4b4c      	ldr	r3, [pc, #304]	; (800ca60 <UART_SetConfig+0x338>)
 800c930:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c932:	f003 0307 	and.w	r3, r3, #7
 800c936:	2b05      	cmp	r3, #5
 800c938:	d826      	bhi.n	800c988 <UART_SetConfig+0x260>
 800c93a:	a201      	add	r2, pc, #4	; (adr r2, 800c940 <UART_SetConfig+0x218>)
 800c93c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c940:	0800c959 	.word	0x0800c959
 800c944:	0800c961 	.word	0x0800c961
 800c948:	0800c969 	.word	0x0800c969
 800c94c:	0800c971 	.word	0x0800c971
 800c950:	0800c979 	.word	0x0800c979
 800c954:	0800c981 	.word	0x0800c981
 800c958:	2300      	movs	r3, #0
 800c95a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c95e:	e1b6      	b.n	800ccce <UART_SetConfig+0x5a6>
 800c960:	2304      	movs	r3, #4
 800c962:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c966:	e1b2      	b.n	800ccce <UART_SetConfig+0x5a6>
 800c968:	2308      	movs	r3, #8
 800c96a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c96e:	e1ae      	b.n	800ccce <UART_SetConfig+0x5a6>
 800c970:	2310      	movs	r3, #16
 800c972:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c976:	e1aa      	b.n	800ccce <UART_SetConfig+0x5a6>
 800c978:	2320      	movs	r3, #32
 800c97a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c97e:	e1a6      	b.n	800ccce <UART_SetConfig+0x5a6>
 800c980:	2340      	movs	r3, #64	; 0x40
 800c982:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c986:	e1a2      	b.n	800ccce <UART_SetConfig+0x5a6>
 800c988:	2380      	movs	r3, #128	; 0x80
 800c98a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c98e:	e19e      	b.n	800ccce <UART_SetConfig+0x5a6>
 800c990:	697b      	ldr	r3, [r7, #20]
 800c992:	681b      	ldr	r3, [r3, #0]
 800c994:	4a35      	ldr	r2, [pc, #212]	; (800ca6c <UART_SetConfig+0x344>)
 800c996:	4293      	cmp	r3, r2
 800c998:	d130      	bne.n	800c9fc <UART_SetConfig+0x2d4>
 800c99a:	4b31      	ldr	r3, [pc, #196]	; (800ca60 <UART_SetConfig+0x338>)
 800c99c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c99e:	f003 0307 	and.w	r3, r3, #7
 800c9a2:	2b05      	cmp	r3, #5
 800c9a4:	d826      	bhi.n	800c9f4 <UART_SetConfig+0x2cc>
 800c9a6:	a201      	add	r2, pc, #4	; (adr r2, 800c9ac <UART_SetConfig+0x284>)
 800c9a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c9ac:	0800c9c5 	.word	0x0800c9c5
 800c9b0:	0800c9cd 	.word	0x0800c9cd
 800c9b4:	0800c9d5 	.word	0x0800c9d5
 800c9b8:	0800c9dd 	.word	0x0800c9dd
 800c9bc:	0800c9e5 	.word	0x0800c9e5
 800c9c0:	0800c9ed 	.word	0x0800c9ed
 800c9c4:	2300      	movs	r3, #0
 800c9c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c9ca:	e180      	b.n	800ccce <UART_SetConfig+0x5a6>
 800c9cc:	2304      	movs	r3, #4
 800c9ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c9d2:	e17c      	b.n	800ccce <UART_SetConfig+0x5a6>
 800c9d4:	2308      	movs	r3, #8
 800c9d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c9da:	e178      	b.n	800ccce <UART_SetConfig+0x5a6>
 800c9dc:	2310      	movs	r3, #16
 800c9de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c9e2:	e174      	b.n	800ccce <UART_SetConfig+0x5a6>
 800c9e4:	2320      	movs	r3, #32
 800c9e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c9ea:	e170      	b.n	800ccce <UART_SetConfig+0x5a6>
 800c9ec:	2340      	movs	r3, #64	; 0x40
 800c9ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c9f2:	e16c      	b.n	800ccce <UART_SetConfig+0x5a6>
 800c9f4:	2380      	movs	r3, #128	; 0x80
 800c9f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c9fa:	e168      	b.n	800ccce <UART_SetConfig+0x5a6>
 800c9fc:	697b      	ldr	r3, [r7, #20]
 800c9fe:	681b      	ldr	r3, [r3, #0]
 800ca00:	4a1b      	ldr	r2, [pc, #108]	; (800ca70 <UART_SetConfig+0x348>)
 800ca02:	4293      	cmp	r3, r2
 800ca04:	d142      	bne.n	800ca8c <UART_SetConfig+0x364>
 800ca06:	4b16      	ldr	r3, [pc, #88]	; (800ca60 <UART_SetConfig+0x338>)
 800ca08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ca0a:	f003 0307 	and.w	r3, r3, #7
 800ca0e:	2b05      	cmp	r3, #5
 800ca10:	d838      	bhi.n	800ca84 <UART_SetConfig+0x35c>
 800ca12:	a201      	add	r2, pc, #4	; (adr r2, 800ca18 <UART_SetConfig+0x2f0>)
 800ca14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ca18:	0800ca31 	.word	0x0800ca31
 800ca1c:	0800ca39 	.word	0x0800ca39
 800ca20:	0800ca41 	.word	0x0800ca41
 800ca24:	0800ca49 	.word	0x0800ca49
 800ca28:	0800ca75 	.word	0x0800ca75
 800ca2c:	0800ca7d 	.word	0x0800ca7d
 800ca30:	2300      	movs	r3, #0
 800ca32:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ca36:	e14a      	b.n	800ccce <UART_SetConfig+0x5a6>
 800ca38:	2304      	movs	r3, #4
 800ca3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ca3e:	e146      	b.n	800ccce <UART_SetConfig+0x5a6>
 800ca40:	2308      	movs	r3, #8
 800ca42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ca46:	e142      	b.n	800ccce <UART_SetConfig+0x5a6>
 800ca48:	2310      	movs	r3, #16
 800ca4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ca4e:	e13e      	b.n	800ccce <UART_SetConfig+0x5a6>
 800ca50:	cfff69f3 	.word	0xcfff69f3
 800ca54:	58000c00 	.word	0x58000c00
 800ca58:	11fff4ff 	.word	0x11fff4ff
 800ca5c:	40011000 	.word	0x40011000
 800ca60:	58024400 	.word	0x58024400
 800ca64:	40004400 	.word	0x40004400
 800ca68:	40004800 	.word	0x40004800
 800ca6c:	40004c00 	.word	0x40004c00
 800ca70:	40005000 	.word	0x40005000
 800ca74:	2320      	movs	r3, #32
 800ca76:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ca7a:	e128      	b.n	800ccce <UART_SetConfig+0x5a6>
 800ca7c:	2340      	movs	r3, #64	; 0x40
 800ca7e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ca82:	e124      	b.n	800ccce <UART_SetConfig+0x5a6>
 800ca84:	2380      	movs	r3, #128	; 0x80
 800ca86:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ca8a:	e120      	b.n	800ccce <UART_SetConfig+0x5a6>
 800ca8c:	697b      	ldr	r3, [r7, #20]
 800ca8e:	681b      	ldr	r3, [r3, #0]
 800ca90:	4acb      	ldr	r2, [pc, #812]	; (800cdc0 <UART_SetConfig+0x698>)
 800ca92:	4293      	cmp	r3, r2
 800ca94:	d176      	bne.n	800cb84 <UART_SetConfig+0x45c>
 800ca96:	4bcb      	ldr	r3, [pc, #812]	; (800cdc4 <UART_SetConfig+0x69c>)
 800ca98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ca9a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800ca9e:	2b28      	cmp	r3, #40	; 0x28
 800caa0:	d86c      	bhi.n	800cb7c <UART_SetConfig+0x454>
 800caa2:	a201      	add	r2, pc, #4	; (adr r2, 800caa8 <UART_SetConfig+0x380>)
 800caa4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800caa8:	0800cb4d 	.word	0x0800cb4d
 800caac:	0800cb7d 	.word	0x0800cb7d
 800cab0:	0800cb7d 	.word	0x0800cb7d
 800cab4:	0800cb7d 	.word	0x0800cb7d
 800cab8:	0800cb7d 	.word	0x0800cb7d
 800cabc:	0800cb7d 	.word	0x0800cb7d
 800cac0:	0800cb7d 	.word	0x0800cb7d
 800cac4:	0800cb7d 	.word	0x0800cb7d
 800cac8:	0800cb55 	.word	0x0800cb55
 800cacc:	0800cb7d 	.word	0x0800cb7d
 800cad0:	0800cb7d 	.word	0x0800cb7d
 800cad4:	0800cb7d 	.word	0x0800cb7d
 800cad8:	0800cb7d 	.word	0x0800cb7d
 800cadc:	0800cb7d 	.word	0x0800cb7d
 800cae0:	0800cb7d 	.word	0x0800cb7d
 800cae4:	0800cb7d 	.word	0x0800cb7d
 800cae8:	0800cb5d 	.word	0x0800cb5d
 800caec:	0800cb7d 	.word	0x0800cb7d
 800caf0:	0800cb7d 	.word	0x0800cb7d
 800caf4:	0800cb7d 	.word	0x0800cb7d
 800caf8:	0800cb7d 	.word	0x0800cb7d
 800cafc:	0800cb7d 	.word	0x0800cb7d
 800cb00:	0800cb7d 	.word	0x0800cb7d
 800cb04:	0800cb7d 	.word	0x0800cb7d
 800cb08:	0800cb65 	.word	0x0800cb65
 800cb0c:	0800cb7d 	.word	0x0800cb7d
 800cb10:	0800cb7d 	.word	0x0800cb7d
 800cb14:	0800cb7d 	.word	0x0800cb7d
 800cb18:	0800cb7d 	.word	0x0800cb7d
 800cb1c:	0800cb7d 	.word	0x0800cb7d
 800cb20:	0800cb7d 	.word	0x0800cb7d
 800cb24:	0800cb7d 	.word	0x0800cb7d
 800cb28:	0800cb6d 	.word	0x0800cb6d
 800cb2c:	0800cb7d 	.word	0x0800cb7d
 800cb30:	0800cb7d 	.word	0x0800cb7d
 800cb34:	0800cb7d 	.word	0x0800cb7d
 800cb38:	0800cb7d 	.word	0x0800cb7d
 800cb3c:	0800cb7d 	.word	0x0800cb7d
 800cb40:	0800cb7d 	.word	0x0800cb7d
 800cb44:	0800cb7d 	.word	0x0800cb7d
 800cb48:	0800cb75 	.word	0x0800cb75
 800cb4c:	2301      	movs	r3, #1
 800cb4e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cb52:	e0bc      	b.n	800ccce <UART_SetConfig+0x5a6>
 800cb54:	2304      	movs	r3, #4
 800cb56:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cb5a:	e0b8      	b.n	800ccce <UART_SetConfig+0x5a6>
 800cb5c:	2308      	movs	r3, #8
 800cb5e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cb62:	e0b4      	b.n	800ccce <UART_SetConfig+0x5a6>
 800cb64:	2310      	movs	r3, #16
 800cb66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cb6a:	e0b0      	b.n	800ccce <UART_SetConfig+0x5a6>
 800cb6c:	2320      	movs	r3, #32
 800cb6e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cb72:	e0ac      	b.n	800ccce <UART_SetConfig+0x5a6>
 800cb74:	2340      	movs	r3, #64	; 0x40
 800cb76:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cb7a:	e0a8      	b.n	800ccce <UART_SetConfig+0x5a6>
 800cb7c:	2380      	movs	r3, #128	; 0x80
 800cb7e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cb82:	e0a4      	b.n	800ccce <UART_SetConfig+0x5a6>
 800cb84:	697b      	ldr	r3, [r7, #20]
 800cb86:	681b      	ldr	r3, [r3, #0]
 800cb88:	4a8f      	ldr	r2, [pc, #572]	; (800cdc8 <UART_SetConfig+0x6a0>)
 800cb8a:	4293      	cmp	r3, r2
 800cb8c:	d130      	bne.n	800cbf0 <UART_SetConfig+0x4c8>
 800cb8e:	4b8d      	ldr	r3, [pc, #564]	; (800cdc4 <UART_SetConfig+0x69c>)
 800cb90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cb92:	f003 0307 	and.w	r3, r3, #7
 800cb96:	2b05      	cmp	r3, #5
 800cb98:	d826      	bhi.n	800cbe8 <UART_SetConfig+0x4c0>
 800cb9a:	a201      	add	r2, pc, #4	; (adr r2, 800cba0 <UART_SetConfig+0x478>)
 800cb9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cba0:	0800cbb9 	.word	0x0800cbb9
 800cba4:	0800cbc1 	.word	0x0800cbc1
 800cba8:	0800cbc9 	.word	0x0800cbc9
 800cbac:	0800cbd1 	.word	0x0800cbd1
 800cbb0:	0800cbd9 	.word	0x0800cbd9
 800cbb4:	0800cbe1 	.word	0x0800cbe1
 800cbb8:	2300      	movs	r3, #0
 800cbba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cbbe:	e086      	b.n	800ccce <UART_SetConfig+0x5a6>
 800cbc0:	2304      	movs	r3, #4
 800cbc2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cbc6:	e082      	b.n	800ccce <UART_SetConfig+0x5a6>
 800cbc8:	2308      	movs	r3, #8
 800cbca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cbce:	e07e      	b.n	800ccce <UART_SetConfig+0x5a6>
 800cbd0:	2310      	movs	r3, #16
 800cbd2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cbd6:	e07a      	b.n	800ccce <UART_SetConfig+0x5a6>
 800cbd8:	2320      	movs	r3, #32
 800cbda:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cbde:	e076      	b.n	800ccce <UART_SetConfig+0x5a6>
 800cbe0:	2340      	movs	r3, #64	; 0x40
 800cbe2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cbe6:	e072      	b.n	800ccce <UART_SetConfig+0x5a6>
 800cbe8:	2380      	movs	r3, #128	; 0x80
 800cbea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cbee:	e06e      	b.n	800ccce <UART_SetConfig+0x5a6>
 800cbf0:	697b      	ldr	r3, [r7, #20]
 800cbf2:	681b      	ldr	r3, [r3, #0]
 800cbf4:	4a75      	ldr	r2, [pc, #468]	; (800cdcc <UART_SetConfig+0x6a4>)
 800cbf6:	4293      	cmp	r3, r2
 800cbf8:	d130      	bne.n	800cc5c <UART_SetConfig+0x534>
 800cbfa:	4b72      	ldr	r3, [pc, #456]	; (800cdc4 <UART_SetConfig+0x69c>)
 800cbfc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cbfe:	f003 0307 	and.w	r3, r3, #7
 800cc02:	2b05      	cmp	r3, #5
 800cc04:	d826      	bhi.n	800cc54 <UART_SetConfig+0x52c>
 800cc06:	a201      	add	r2, pc, #4	; (adr r2, 800cc0c <UART_SetConfig+0x4e4>)
 800cc08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cc0c:	0800cc25 	.word	0x0800cc25
 800cc10:	0800cc2d 	.word	0x0800cc2d
 800cc14:	0800cc35 	.word	0x0800cc35
 800cc18:	0800cc3d 	.word	0x0800cc3d
 800cc1c:	0800cc45 	.word	0x0800cc45
 800cc20:	0800cc4d 	.word	0x0800cc4d
 800cc24:	2300      	movs	r3, #0
 800cc26:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cc2a:	e050      	b.n	800ccce <UART_SetConfig+0x5a6>
 800cc2c:	2304      	movs	r3, #4
 800cc2e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cc32:	e04c      	b.n	800ccce <UART_SetConfig+0x5a6>
 800cc34:	2308      	movs	r3, #8
 800cc36:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cc3a:	e048      	b.n	800ccce <UART_SetConfig+0x5a6>
 800cc3c:	2310      	movs	r3, #16
 800cc3e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cc42:	e044      	b.n	800ccce <UART_SetConfig+0x5a6>
 800cc44:	2320      	movs	r3, #32
 800cc46:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cc4a:	e040      	b.n	800ccce <UART_SetConfig+0x5a6>
 800cc4c:	2340      	movs	r3, #64	; 0x40
 800cc4e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cc52:	e03c      	b.n	800ccce <UART_SetConfig+0x5a6>
 800cc54:	2380      	movs	r3, #128	; 0x80
 800cc56:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cc5a:	e038      	b.n	800ccce <UART_SetConfig+0x5a6>
 800cc5c:	697b      	ldr	r3, [r7, #20]
 800cc5e:	681b      	ldr	r3, [r3, #0]
 800cc60:	4a5b      	ldr	r2, [pc, #364]	; (800cdd0 <UART_SetConfig+0x6a8>)
 800cc62:	4293      	cmp	r3, r2
 800cc64:	d130      	bne.n	800ccc8 <UART_SetConfig+0x5a0>
 800cc66:	4b57      	ldr	r3, [pc, #348]	; (800cdc4 <UART_SetConfig+0x69c>)
 800cc68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cc6a:	f003 0307 	and.w	r3, r3, #7
 800cc6e:	2b05      	cmp	r3, #5
 800cc70:	d826      	bhi.n	800ccc0 <UART_SetConfig+0x598>
 800cc72:	a201      	add	r2, pc, #4	; (adr r2, 800cc78 <UART_SetConfig+0x550>)
 800cc74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cc78:	0800cc91 	.word	0x0800cc91
 800cc7c:	0800cc99 	.word	0x0800cc99
 800cc80:	0800cca1 	.word	0x0800cca1
 800cc84:	0800cca9 	.word	0x0800cca9
 800cc88:	0800ccb1 	.word	0x0800ccb1
 800cc8c:	0800ccb9 	.word	0x0800ccb9
 800cc90:	2302      	movs	r3, #2
 800cc92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cc96:	e01a      	b.n	800ccce <UART_SetConfig+0x5a6>
 800cc98:	2304      	movs	r3, #4
 800cc9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cc9e:	e016      	b.n	800ccce <UART_SetConfig+0x5a6>
 800cca0:	2308      	movs	r3, #8
 800cca2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cca6:	e012      	b.n	800ccce <UART_SetConfig+0x5a6>
 800cca8:	2310      	movs	r3, #16
 800ccaa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ccae:	e00e      	b.n	800ccce <UART_SetConfig+0x5a6>
 800ccb0:	2320      	movs	r3, #32
 800ccb2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ccb6:	e00a      	b.n	800ccce <UART_SetConfig+0x5a6>
 800ccb8:	2340      	movs	r3, #64	; 0x40
 800ccba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ccbe:	e006      	b.n	800ccce <UART_SetConfig+0x5a6>
 800ccc0:	2380      	movs	r3, #128	; 0x80
 800ccc2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ccc6:	e002      	b.n	800ccce <UART_SetConfig+0x5a6>
 800ccc8:	2380      	movs	r3, #128	; 0x80
 800ccca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800ccce:	697b      	ldr	r3, [r7, #20]
 800ccd0:	681b      	ldr	r3, [r3, #0]
 800ccd2:	4a3f      	ldr	r2, [pc, #252]	; (800cdd0 <UART_SetConfig+0x6a8>)
 800ccd4:	4293      	cmp	r3, r2
 800ccd6:	f040 80f8 	bne.w	800ceca <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800ccda:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800ccde:	2b20      	cmp	r3, #32
 800cce0:	dc46      	bgt.n	800cd70 <UART_SetConfig+0x648>
 800cce2:	2b02      	cmp	r3, #2
 800cce4:	f2c0 8082 	blt.w	800cdec <UART_SetConfig+0x6c4>
 800cce8:	3b02      	subs	r3, #2
 800ccea:	2b1e      	cmp	r3, #30
 800ccec:	d87e      	bhi.n	800cdec <UART_SetConfig+0x6c4>
 800ccee:	a201      	add	r2, pc, #4	; (adr r2, 800ccf4 <UART_SetConfig+0x5cc>)
 800ccf0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ccf4:	0800cd77 	.word	0x0800cd77
 800ccf8:	0800cded 	.word	0x0800cded
 800ccfc:	0800cd7f 	.word	0x0800cd7f
 800cd00:	0800cded 	.word	0x0800cded
 800cd04:	0800cded 	.word	0x0800cded
 800cd08:	0800cded 	.word	0x0800cded
 800cd0c:	0800cd8f 	.word	0x0800cd8f
 800cd10:	0800cded 	.word	0x0800cded
 800cd14:	0800cded 	.word	0x0800cded
 800cd18:	0800cded 	.word	0x0800cded
 800cd1c:	0800cded 	.word	0x0800cded
 800cd20:	0800cded 	.word	0x0800cded
 800cd24:	0800cded 	.word	0x0800cded
 800cd28:	0800cded 	.word	0x0800cded
 800cd2c:	0800cd9f 	.word	0x0800cd9f
 800cd30:	0800cded 	.word	0x0800cded
 800cd34:	0800cded 	.word	0x0800cded
 800cd38:	0800cded 	.word	0x0800cded
 800cd3c:	0800cded 	.word	0x0800cded
 800cd40:	0800cded 	.word	0x0800cded
 800cd44:	0800cded 	.word	0x0800cded
 800cd48:	0800cded 	.word	0x0800cded
 800cd4c:	0800cded 	.word	0x0800cded
 800cd50:	0800cded 	.word	0x0800cded
 800cd54:	0800cded 	.word	0x0800cded
 800cd58:	0800cded 	.word	0x0800cded
 800cd5c:	0800cded 	.word	0x0800cded
 800cd60:	0800cded 	.word	0x0800cded
 800cd64:	0800cded 	.word	0x0800cded
 800cd68:	0800cded 	.word	0x0800cded
 800cd6c:	0800cddf 	.word	0x0800cddf
 800cd70:	2b40      	cmp	r3, #64	; 0x40
 800cd72:	d037      	beq.n	800cde4 <UART_SetConfig+0x6bc>
 800cd74:	e03a      	b.n	800cdec <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800cd76:	f7fc fc17 	bl	80095a8 <HAL_RCCEx_GetD3PCLK1Freq>
 800cd7a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800cd7c:	e03c      	b.n	800cdf8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800cd7e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800cd82:	4618      	mov	r0, r3
 800cd84:	f7fc fc26 	bl	80095d4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800cd88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd8a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cd8c:	e034      	b.n	800cdf8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800cd8e:	f107 0318 	add.w	r3, r7, #24
 800cd92:	4618      	mov	r0, r3
 800cd94:	f7fc fd72 	bl	800987c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800cd98:	69fb      	ldr	r3, [r7, #28]
 800cd9a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cd9c:	e02c      	b.n	800cdf8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800cd9e:	4b09      	ldr	r3, [pc, #36]	; (800cdc4 <UART_SetConfig+0x69c>)
 800cda0:	681b      	ldr	r3, [r3, #0]
 800cda2:	f003 0320 	and.w	r3, r3, #32
 800cda6:	2b00      	cmp	r3, #0
 800cda8:	d016      	beq.n	800cdd8 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800cdaa:	4b06      	ldr	r3, [pc, #24]	; (800cdc4 <UART_SetConfig+0x69c>)
 800cdac:	681b      	ldr	r3, [r3, #0]
 800cdae:	08db      	lsrs	r3, r3, #3
 800cdb0:	f003 0303 	and.w	r3, r3, #3
 800cdb4:	4a07      	ldr	r2, [pc, #28]	; (800cdd4 <UART_SetConfig+0x6ac>)
 800cdb6:	fa22 f303 	lsr.w	r3, r2, r3
 800cdba:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800cdbc:	e01c      	b.n	800cdf8 <UART_SetConfig+0x6d0>
 800cdbe:	bf00      	nop
 800cdc0:	40011400 	.word	0x40011400
 800cdc4:	58024400 	.word	0x58024400
 800cdc8:	40007800 	.word	0x40007800
 800cdcc:	40007c00 	.word	0x40007c00
 800cdd0:	58000c00 	.word	0x58000c00
 800cdd4:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800cdd8:	4b9d      	ldr	r3, [pc, #628]	; (800d050 <UART_SetConfig+0x928>)
 800cdda:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cddc:	e00c      	b.n	800cdf8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800cdde:	4b9d      	ldr	r3, [pc, #628]	; (800d054 <UART_SetConfig+0x92c>)
 800cde0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cde2:	e009      	b.n	800cdf8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800cde4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800cde8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cdea:	e005      	b.n	800cdf8 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800cdec:	2300      	movs	r3, #0
 800cdee:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800cdf0:	2301      	movs	r3, #1
 800cdf2:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800cdf6:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800cdf8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cdfa:	2b00      	cmp	r3, #0
 800cdfc:	f000 81de 	beq.w	800d1bc <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800ce00:	697b      	ldr	r3, [r7, #20]
 800ce02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ce04:	4a94      	ldr	r2, [pc, #592]	; (800d058 <UART_SetConfig+0x930>)
 800ce06:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ce0a:	461a      	mov	r2, r3
 800ce0c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ce0e:	fbb3 f3f2 	udiv	r3, r3, r2
 800ce12:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800ce14:	697b      	ldr	r3, [r7, #20]
 800ce16:	685a      	ldr	r2, [r3, #4]
 800ce18:	4613      	mov	r3, r2
 800ce1a:	005b      	lsls	r3, r3, #1
 800ce1c:	4413      	add	r3, r2
 800ce1e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ce20:	429a      	cmp	r2, r3
 800ce22:	d305      	bcc.n	800ce30 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800ce24:	697b      	ldr	r3, [r7, #20]
 800ce26:	685b      	ldr	r3, [r3, #4]
 800ce28:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800ce2a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ce2c:	429a      	cmp	r2, r3
 800ce2e:	d903      	bls.n	800ce38 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800ce30:	2301      	movs	r3, #1
 800ce32:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800ce36:	e1c1      	b.n	800d1bc <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ce38:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ce3a:	2200      	movs	r2, #0
 800ce3c:	60bb      	str	r3, [r7, #8]
 800ce3e:	60fa      	str	r2, [r7, #12]
 800ce40:	697b      	ldr	r3, [r7, #20]
 800ce42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ce44:	4a84      	ldr	r2, [pc, #528]	; (800d058 <UART_SetConfig+0x930>)
 800ce46:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ce4a:	b29b      	uxth	r3, r3
 800ce4c:	2200      	movs	r2, #0
 800ce4e:	603b      	str	r3, [r7, #0]
 800ce50:	607a      	str	r2, [r7, #4]
 800ce52:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ce56:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800ce5a:	f7f3 fc55 	bl	8000708 <__aeabi_uldivmod>
 800ce5e:	4602      	mov	r2, r0
 800ce60:	460b      	mov	r3, r1
 800ce62:	4610      	mov	r0, r2
 800ce64:	4619      	mov	r1, r3
 800ce66:	f04f 0200 	mov.w	r2, #0
 800ce6a:	f04f 0300 	mov.w	r3, #0
 800ce6e:	020b      	lsls	r3, r1, #8
 800ce70:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800ce74:	0202      	lsls	r2, r0, #8
 800ce76:	6979      	ldr	r1, [r7, #20]
 800ce78:	6849      	ldr	r1, [r1, #4]
 800ce7a:	0849      	lsrs	r1, r1, #1
 800ce7c:	2000      	movs	r0, #0
 800ce7e:	460c      	mov	r4, r1
 800ce80:	4605      	mov	r5, r0
 800ce82:	eb12 0804 	adds.w	r8, r2, r4
 800ce86:	eb43 0905 	adc.w	r9, r3, r5
 800ce8a:	697b      	ldr	r3, [r7, #20]
 800ce8c:	685b      	ldr	r3, [r3, #4]
 800ce8e:	2200      	movs	r2, #0
 800ce90:	469a      	mov	sl, r3
 800ce92:	4693      	mov	fp, r2
 800ce94:	4652      	mov	r2, sl
 800ce96:	465b      	mov	r3, fp
 800ce98:	4640      	mov	r0, r8
 800ce9a:	4649      	mov	r1, r9
 800ce9c:	f7f3 fc34 	bl	8000708 <__aeabi_uldivmod>
 800cea0:	4602      	mov	r2, r0
 800cea2:	460b      	mov	r3, r1
 800cea4:	4613      	mov	r3, r2
 800cea6:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800cea8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ceaa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800ceae:	d308      	bcc.n	800cec2 <UART_SetConfig+0x79a>
 800ceb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ceb2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ceb6:	d204      	bcs.n	800cec2 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800ceb8:	697b      	ldr	r3, [r7, #20]
 800ceba:	681b      	ldr	r3, [r3, #0]
 800cebc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800cebe:	60da      	str	r2, [r3, #12]
 800cec0:	e17c      	b.n	800d1bc <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800cec2:	2301      	movs	r3, #1
 800cec4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800cec8:	e178      	b.n	800d1bc <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800ceca:	697b      	ldr	r3, [r7, #20]
 800cecc:	69db      	ldr	r3, [r3, #28]
 800cece:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ced2:	f040 80c5 	bne.w	800d060 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800ced6:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800ceda:	2b20      	cmp	r3, #32
 800cedc:	dc48      	bgt.n	800cf70 <UART_SetConfig+0x848>
 800cede:	2b00      	cmp	r3, #0
 800cee0:	db7b      	blt.n	800cfda <UART_SetConfig+0x8b2>
 800cee2:	2b20      	cmp	r3, #32
 800cee4:	d879      	bhi.n	800cfda <UART_SetConfig+0x8b2>
 800cee6:	a201      	add	r2, pc, #4	; (adr r2, 800ceec <UART_SetConfig+0x7c4>)
 800cee8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ceec:	0800cf77 	.word	0x0800cf77
 800cef0:	0800cf7f 	.word	0x0800cf7f
 800cef4:	0800cfdb 	.word	0x0800cfdb
 800cef8:	0800cfdb 	.word	0x0800cfdb
 800cefc:	0800cf87 	.word	0x0800cf87
 800cf00:	0800cfdb 	.word	0x0800cfdb
 800cf04:	0800cfdb 	.word	0x0800cfdb
 800cf08:	0800cfdb 	.word	0x0800cfdb
 800cf0c:	0800cf97 	.word	0x0800cf97
 800cf10:	0800cfdb 	.word	0x0800cfdb
 800cf14:	0800cfdb 	.word	0x0800cfdb
 800cf18:	0800cfdb 	.word	0x0800cfdb
 800cf1c:	0800cfdb 	.word	0x0800cfdb
 800cf20:	0800cfdb 	.word	0x0800cfdb
 800cf24:	0800cfdb 	.word	0x0800cfdb
 800cf28:	0800cfdb 	.word	0x0800cfdb
 800cf2c:	0800cfa7 	.word	0x0800cfa7
 800cf30:	0800cfdb 	.word	0x0800cfdb
 800cf34:	0800cfdb 	.word	0x0800cfdb
 800cf38:	0800cfdb 	.word	0x0800cfdb
 800cf3c:	0800cfdb 	.word	0x0800cfdb
 800cf40:	0800cfdb 	.word	0x0800cfdb
 800cf44:	0800cfdb 	.word	0x0800cfdb
 800cf48:	0800cfdb 	.word	0x0800cfdb
 800cf4c:	0800cfdb 	.word	0x0800cfdb
 800cf50:	0800cfdb 	.word	0x0800cfdb
 800cf54:	0800cfdb 	.word	0x0800cfdb
 800cf58:	0800cfdb 	.word	0x0800cfdb
 800cf5c:	0800cfdb 	.word	0x0800cfdb
 800cf60:	0800cfdb 	.word	0x0800cfdb
 800cf64:	0800cfdb 	.word	0x0800cfdb
 800cf68:	0800cfdb 	.word	0x0800cfdb
 800cf6c:	0800cfcd 	.word	0x0800cfcd
 800cf70:	2b40      	cmp	r3, #64	; 0x40
 800cf72:	d02e      	beq.n	800cfd2 <UART_SetConfig+0x8aa>
 800cf74:	e031      	b.n	800cfda <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800cf76:	f7fb fba5 	bl	80086c4 <HAL_RCC_GetPCLK1Freq>
 800cf7a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800cf7c:	e033      	b.n	800cfe6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800cf7e:	f7fb fbb7 	bl	80086f0 <HAL_RCC_GetPCLK2Freq>
 800cf82:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800cf84:	e02f      	b.n	800cfe6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800cf86:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800cf8a:	4618      	mov	r0, r3
 800cf8c:	f7fc fb22 	bl	80095d4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800cf90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf92:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cf94:	e027      	b.n	800cfe6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800cf96:	f107 0318 	add.w	r3, r7, #24
 800cf9a:	4618      	mov	r0, r3
 800cf9c:	f7fc fc6e 	bl	800987c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800cfa0:	69fb      	ldr	r3, [r7, #28]
 800cfa2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cfa4:	e01f      	b.n	800cfe6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800cfa6:	4b2d      	ldr	r3, [pc, #180]	; (800d05c <UART_SetConfig+0x934>)
 800cfa8:	681b      	ldr	r3, [r3, #0]
 800cfaa:	f003 0320 	and.w	r3, r3, #32
 800cfae:	2b00      	cmp	r3, #0
 800cfb0:	d009      	beq.n	800cfc6 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800cfb2:	4b2a      	ldr	r3, [pc, #168]	; (800d05c <UART_SetConfig+0x934>)
 800cfb4:	681b      	ldr	r3, [r3, #0]
 800cfb6:	08db      	lsrs	r3, r3, #3
 800cfb8:	f003 0303 	and.w	r3, r3, #3
 800cfbc:	4a24      	ldr	r2, [pc, #144]	; (800d050 <UART_SetConfig+0x928>)
 800cfbe:	fa22 f303 	lsr.w	r3, r2, r3
 800cfc2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800cfc4:	e00f      	b.n	800cfe6 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800cfc6:	4b22      	ldr	r3, [pc, #136]	; (800d050 <UART_SetConfig+0x928>)
 800cfc8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cfca:	e00c      	b.n	800cfe6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800cfcc:	4b21      	ldr	r3, [pc, #132]	; (800d054 <UART_SetConfig+0x92c>)
 800cfce:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cfd0:	e009      	b.n	800cfe6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800cfd2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800cfd6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cfd8:	e005      	b.n	800cfe6 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800cfda:	2300      	movs	r3, #0
 800cfdc:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800cfde:	2301      	movs	r3, #1
 800cfe0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800cfe4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800cfe6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cfe8:	2b00      	cmp	r3, #0
 800cfea:	f000 80e7 	beq.w	800d1bc <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800cfee:	697b      	ldr	r3, [r7, #20]
 800cff0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cff2:	4a19      	ldr	r2, [pc, #100]	; (800d058 <UART_SetConfig+0x930>)
 800cff4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800cff8:	461a      	mov	r2, r3
 800cffa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cffc:	fbb3 f3f2 	udiv	r3, r3, r2
 800d000:	005a      	lsls	r2, r3, #1
 800d002:	697b      	ldr	r3, [r7, #20]
 800d004:	685b      	ldr	r3, [r3, #4]
 800d006:	085b      	lsrs	r3, r3, #1
 800d008:	441a      	add	r2, r3
 800d00a:	697b      	ldr	r3, [r7, #20]
 800d00c:	685b      	ldr	r3, [r3, #4]
 800d00e:	fbb2 f3f3 	udiv	r3, r2, r3
 800d012:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800d014:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d016:	2b0f      	cmp	r3, #15
 800d018:	d916      	bls.n	800d048 <UART_SetConfig+0x920>
 800d01a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d01c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d020:	d212      	bcs.n	800d048 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800d022:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d024:	b29b      	uxth	r3, r3
 800d026:	f023 030f 	bic.w	r3, r3, #15
 800d02a:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800d02c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d02e:	085b      	lsrs	r3, r3, #1
 800d030:	b29b      	uxth	r3, r3
 800d032:	f003 0307 	and.w	r3, r3, #7
 800d036:	b29a      	uxth	r2, r3
 800d038:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800d03a:	4313      	orrs	r3, r2
 800d03c:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800d03e:	697b      	ldr	r3, [r7, #20]
 800d040:	681b      	ldr	r3, [r3, #0]
 800d042:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800d044:	60da      	str	r2, [r3, #12]
 800d046:	e0b9      	b.n	800d1bc <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800d048:	2301      	movs	r3, #1
 800d04a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800d04e:	e0b5      	b.n	800d1bc <UART_SetConfig+0xa94>
 800d050:	03d09000 	.word	0x03d09000
 800d054:	003d0900 	.word	0x003d0900
 800d058:	08011a78 	.word	0x08011a78
 800d05c:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800d060:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800d064:	2b20      	cmp	r3, #32
 800d066:	dc49      	bgt.n	800d0fc <UART_SetConfig+0x9d4>
 800d068:	2b00      	cmp	r3, #0
 800d06a:	db7c      	blt.n	800d166 <UART_SetConfig+0xa3e>
 800d06c:	2b20      	cmp	r3, #32
 800d06e:	d87a      	bhi.n	800d166 <UART_SetConfig+0xa3e>
 800d070:	a201      	add	r2, pc, #4	; (adr r2, 800d078 <UART_SetConfig+0x950>)
 800d072:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d076:	bf00      	nop
 800d078:	0800d103 	.word	0x0800d103
 800d07c:	0800d10b 	.word	0x0800d10b
 800d080:	0800d167 	.word	0x0800d167
 800d084:	0800d167 	.word	0x0800d167
 800d088:	0800d113 	.word	0x0800d113
 800d08c:	0800d167 	.word	0x0800d167
 800d090:	0800d167 	.word	0x0800d167
 800d094:	0800d167 	.word	0x0800d167
 800d098:	0800d123 	.word	0x0800d123
 800d09c:	0800d167 	.word	0x0800d167
 800d0a0:	0800d167 	.word	0x0800d167
 800d0a4:	0800d167 	.word	0x0800d167
 800d0a8:	0800d167 	.word	0x0800d167
 800d0ac:	0800d167 	.word	0x0800d167
 800d0b0:	0800d167 	.word	0x0800d167
 800d0b4:	0800d167 	.word	0x0800d167
 800d0b8:	0800d133 	.word	0x0800d133
 800d0bc:	0800d167 	.word	0x0800d167
 800d0c0:	0800d167 	.word	0x0800d167
 800d0c4:	0800d167 	.word	0x0800d167
 800d0c8:	0800d167 	.word	0x0800d167
 800d0cc:	0800d167 	.word	0x0800d167
 800d0d0:	0800d167 	.word	0x0800d167
 800d0d4:	0800d167 	.word	0x0800d167
 800d0d8:	0800d167 	.word	0x0800d167
 800d0dc:	0800d167 	.word	0x0800d167
 800d0e0:	0800d167 	.word	0x0800d167
 800d0e4:	0800d167 	.word	0x0800d167
 800d0e8:	0800d167 	.word	0x0800d167
 800d0ec:	0800d167 	.word	0x0800d167
 800d0f0:	0800d167 	.word	0x0800d167
 800d0f4:	0800d167 	.word	0x0800d167
 800d0f8:	0800d159 	.word	0x0800d159
 800d0fc:	2b40      	cmp	r3, #64	; 0x40
 800d0fe:	d02e      	beq.n	800d15e <UART_SetConfig+0xa36>
 800d100:	e031      	b.n	800d166 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800d102:	f7fb fadf 	bl	80086c4 <HAL_RCC_GetPCLK1Freq>
 800d106:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800d108:	e033      	b.n	800d172 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800d10a:	f7fb faf1 	bl	80086f0 <HAL_RCC_GetPCLK2Freq>
 800d10e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800d110:	e02f      	b.n	800d172 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d112:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800d116:	4618      	mov	r0, r3
 800d118:	f7fc fa5c 	bl	80095d4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800d11c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d11e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d120:	e027      	b.n	800d172 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d122:	f107 0318 	add.w	r3, r7, #24
 800d126:	4618      	mov	r0, r3
 800d128:	f7fc fba8 	bl	800987c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800d12c:	69fb      	ldr	r3, [r7, #28]
 800d12e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d130:	e01f      	b.n	800d172 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d132:	4b2d      	ldr	r3, [pc, #180]	; (800d1e8 <UART_SetConfig+0xac0>)
 800d134:	681b      	ldr	r3, [r3, #0]
 800d136:	f003 0320 	and.w	r3, r3, #32
 800d13a:	2b00      	cmp	r3, #0
 800d13c:	d009      	beq.n	800d152 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800d13e:	4b2a      	ldr	r3, [pc, #168]	; (800d1e8 <UART_SetConfig+0xac0>)
 800d140:	681b      	ldr	r3, [r3, #0]
 800d142:	08db      	lsrs	r3, r3, #3
 800d144:	f003 0303 	and.w	r3, r3, #3
 800d148:	4a28      	ldr	r2, [pc, #160]	; (800d1ec <UART_SetConfig+0xac4>)
 800d14a:	fa22 f303 	lsr.w	r3, r2, r3
 800d14e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800d150:	e00f      	b.n	800d172 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800d152:	4b26      	ldr	r3, [pc, #152]	; (800d1ec <UART_SetConfig+0xac4>)
 800d154:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d156:	e00c      	b.n	800d172 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800d158:	4b25      	ldr	r3, [pc, #148]	; (800d1f0 <UART_SetConfig+0xac8>)
 800d15a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d15c:	e009      	b.n	800d172 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d15e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800d162:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d164:	e005      	b.n	800d172 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800d166:	2300      	movs	r3, #0
 800d168:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800d16a:	2301      	movs	r3, #1
 800d16c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800d170:	bf00      	nop
    }

    if (pclk != 0U)
 800d172:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d174:	2b00      	cmp	r3, #0
 800d176:	d021      	beq.n	800d1bc <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d178:	697b      	ldr	r3, [r7, #20]
 800d17a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d17c:	4a1d      	ldr	r2, [pc, #116]	; (800d1f4 <UART_SetConfig+0xacc>)
 800d17e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d182:	461a      	mov	r2, r3
 800d184:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d186:	fbb3 f2f2 	udiv	r2, r3, r2
 800d18a:	697b      	ldr	r3, [r7, #20]
 800d18c:	685b      	ldr	r3, [r3, #4]
 800d18e:	085b      	lsrs	r3, r3, #1
 800d190:	441a      	add	r2, r3
 800d192:	697b      	ldr	r3, [r7, #20]
 800d194:	685b      	ldr	r3, [r3, #4]
 800d196:	fbb2 f3f3 	udiv	r3, r2, r3
 800d19a:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800d19c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d19e:	2b0f      	cmp	r3, #15
 800d1a0:	d909      	bls.n	800d1b6 <UART_SetConfig+0xa8e>
 800d1a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d1a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d1a8:	d205      	bcs.n	800d1b6 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800d1aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d1ac:	b29a      	uxth	r2, r3
 800d1ae:	697b      	ldr	r3, [r7, #20]
 800d1b0:	681b      	ldr	r3, [r3, #0]
 800d1b2:	60da      	str	r2, [r3, #12]
 800d1b4:	e002      	b.n	800d1bc <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800d1b6:	2301      	movs	r3, #1
 800d1b8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800d1bc:	697b      	ldr	r3, [r7, #20]
 800d1be:	2201      	movs	r2, #1
 800d1c0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800d1c4:	697b      	ldr	r3, [r7, #20]
 800d1c6:	2201      	movs	r2, #1
 800d1c8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800d1cc:	697b      	ldr	r3, [r7, #20]
 800d1ce:	2200      	movs	r2, #0
 800d1d0:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800d1d2:	697b      	ldr	r3, [r7, #20]
 800d1d4:	2200      	movs	r2, #0
 800d1d6:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800d1d8:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800d1dc:	4618      	mov	r0, r3
 800d1de:	3748      	adds	r7, #72	; 0x48
 800d1e0:	46bd      	mov	sp, r7
 800d1e2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800d1e6:	bf00      	nop
 800d1e8:	58024400 	.word	0x58024400
 800d1ec:	03d09000 	.word	0x03d09000
 800d1f0:	003d0900 	.word	0x003d0900
 800d1f4:	08011a78 	.word	0x08011a78

0800d1f8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800d1f8:	b480      	push	{r7}
 800d1fa:	b083      	sub	sp, #12
 800d1fc:	af00      	add	r7, sp, #0
 800d1fe:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800d200:	687b      	ldr	r3, [r7, #4]
 800d202:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d204:	f003 0301 	and.w	r3, r3, #1
 800d208:	2b00      	cmp	r3, #0
 800d20a:	d00a      	beq.n	800d222 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800d20c:	687b      	ldr	r3, [r7, #4]
 800d20e:	681b      	ldr	r3, [r3, #0]
 800d210:	685b      	ldr	r3, [r3, #4]
 800d212:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800d216:	687b      	ldr	r3, [r7, #4]
 800d218:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d21a:	687b      	ldr	r3, [r7, #4]
 800d21c:	681b      	ldr	r3, [r3, #0]
 800d21e:	430a      	orrs	r2, r1
 800d220:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800d222:	687b      	ldr	r3, [r7, #4]
 800d224:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d226:	f003 0302 	and.w	r3, r3, #2
 800d22a:	2b00      	cmp	r3, #0
 800d22c:	d00a      	beq.n	800d244 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800d22e:	687b      	ldr	r3, [r7, #4]
 800d230:	681b      	ldr	r3, [r3, #0]
 800d232:	685b      	ldr	r3, [r3, #4]
 800d234:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800d238:	687b      	ldr	r3, [r7, #4]
 800d23a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d23c:	687b      	ldr	r3, [r7, #4]
 800d23e:	681b      	ldr	r3, [r3, #0]
 800d240:	430a      	orrs	r2, r1
 800d242:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800d244:	687b      	ldr	r3, [r7, #4]
 800d246:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d248:	f003 0304 	and.w	r3, r3, #4
 800d24c:	2b00      	cmp	r3, #0
 800d24e:	d00a      	beq.n	800d266 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800d250:	687b      	ldr	r3, [r7, #4]
 800d252:	681b      	ldr	r3, [r3, #0]
 800d254:	685b      	ldr	r3, [r3, #4]
 800d256:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800d25a:	687b      	ldr	r3, [r7, #4]
 800d25c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d25e:	687b      	ldr	r3, [r7, #4]
 800d260:	681b      	ldr	r3, [r3, #0]
 800d262:	430a      	orrs	r2, r1
 800d264:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800d266:	687b      	ldr	r3, [r7, #4]
 800d268:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d26a:	f003 0308 	and.w	r3, r3, #8
 800d26e:	2b00      	cmp	r3, #0
 800d270:	d00a      	beq.n	800d288 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800d272:	687b      	ldr	r3, [r7, #4]
 800d274:	681b      	ldr	r3, [r3, #0]
 800d276:	685b      	ldr	r3, [r3, #4]
 800d278:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800d27c:	687b      	ldr	r3, [r7, #4]
 800d27e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d280:	687b      	ldr	r3, [r7, #4]
 800d282:	681b      	ldr	r3, [r3, #0]
 800d284:	430a      	orrs	r2, r1
 800d286:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800d288:	687b      	ldr	r3, [r7, #4]
 800d28a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d28c:	f003 0310 	and.w	r3, r3, #16
 800d290:	2b00      	cmp	r3, #0
 800d292:	d00a      	beq.n	800d2aa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800d294:	687b      	ldr	r3, [r7, #4]
 800d296:	681b      	ldr	r3, [r3, #0]
 800d298:	689b      	ldr	r3, [r3, #8]
 800d29a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800d29e:	687b      	ldr	r3, [r7, #4]
 800d2a0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d2a2:	687b      	ldr	r3, [r7, #4]
 800d2a4:	681b      	ldr	r3, [r3, #0]
 800d2a6:	430a      	orrs	r2, r1
 800d2a8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800d2aa:	687b      	ldr	r3, [r7, #4]
 800d2ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d2ae:	f003 0320 	and.w	r3, r3, #32
 800d2b2:	2b00      	cmp	r3, #0
 800d2b4:	d00a      	beq.n	800d2cc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800d2b6:	687b      	ldr	r3, [r7, #4]
 800d2b8:	681b      	ldr	r3, [r3, #0]
 800d2ba:	689b      	ldr	r3, [r3, #8]
 800d2bc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800d2c0:	687b      	ldr	r3, [r7, #4]
 800d2c2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800d2c4:	687b      	ldr	r3, [r7, #4]
 800d2c6:	681b      	ldr	r3, [r3, #0]
 800d2c8:	430a      	orrs	r2, r1
 800d2ca:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800d2cc:	687b      	ldr	r3, [r7, #4]
 800d2ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d2d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d2d4:	2b00      	cmp	r3, #0
 800d2d6:	d01a      	beq.n	800d30e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800d2d8:	687b      	ldr	r3, [r7, #4]
 800d2da:	681b      	ldr	r3, [r3, #0]
 800d2dc:	685b      	ldr	r3, [r3, #4]
 800d2de:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800d2e2:	687b      	ldr	r3, [r7, #4]
 800d2e4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d2e6:	687b      	ldr	r3, [r7, #4]
 800d2e8:	681b      	ldr	r3, [r3, #0]
 800d2ea:	430a      	orrs	r2, r1
 800d2ec:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800d2ee:	687b      	ldr	r3, [r7, #4]
 800d2f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d2f2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d2f6:	d10a      	bne.n	800d30e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800d2f8:	687b      	ldr	r3, [r7, #4]
 800d2fa:	681b      	ldr	r3, [r3, #0]
 800d2fc:	685b      	ldr	r3, [r3, #4]
 800d2fe:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800d302:	687b      	ldr	r3, [r7, #4]
 800d304:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800d306:	687b      	ldr	r3, [r7, #4]
 800d308:	681b      	ldr	r3, [r3, #0]
 800d30a:	430a      	orrs	r2, r1
 800d30c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800d30e:	687b      	ldr	r3, [r7, #4]
 800d310:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d312:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d316:	2b00      	cmp	r3, #0
 800d318:	d00a      	beq.n	800d330 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800d31a:	687b      	ldr	r3, [r7, #4]
 800d31c:	681b      	ldr	r3, [r3, #0]
 800d31e:	685b      	ldr	r3, [r3, #4]
 800d320:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800d324:	687b      	ldr	r3, [r7, #4]
 800d326:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800d328:	687b      	ldr	r3, [r7, #4]
 800d32a:	681b      	ldr	r3, [r3, #0]
 800d32c:	430a      	orrs	r2, r1
 800d32e:	605a      	str	r2, [r3, #4]
  }
}
 800d330:	bf00      	nop
 800d332:	370c      	adds	r7, #12
 800d334:	46bd      	mov	sp, r7
 800d336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d33a:	4770      	bx	lr

0800d33c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800d33c:	b580      	push	{r7, lr}
 800d33e:	b086      	sub	sp, #24
 800d340:	af02      	add	r7, sp, #8
 800d342:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d344:	687b      	ldr	r3, [r7, #4]
 800d346:	2200      	movs	r2, #0
 800d348:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800d34c:	f7f9 f914 	bl	8006578 <HAL_GetTick>
 800d350:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800d352:	687b      	ldr	r3, [r7, #4]
 800d354:	681b      	ldr	r3, [r3, #0]
 800d356:	681b      	ldr	r3, [r3, #0]
 800d358:	f003 0308 	and.w	r3, r3, #8
 800d35c:	2b08      	cmp	r3, #8
 800d35e:	d10e      	bne.n	800d37e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800d360:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800d364:	9300      	str	r3, [sp, #0]
 800d366:	68fb      	ldr	r3, [r7, #12]
 800d368:	2200      	movs	r2, #0
 800d36a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800d36e:	6878      	ldr	r0, [r7, #4]
 800d370:	f000 f82f 	bl	800d3d2 <UART_WaitOnFlagUntilTimeout>
 800d374:	4603      	mov	r3, r0
 800d376:	2b00      	cmp	r3, #0
 800d378:	d001      	beq.n	800d37e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800d37a:	2303      	movs	r3, #3
 800d37c:	e025      	b.n	800d3ca <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800d37e:	687b      	ldr	r3, [r7, #4]
 800d380:	681b      	ldr	r3, [r3, #0]
 800d382:	681b      	ldr	r3, [r3, #0]
 800d384:	f003 0304 	and.w	r3, r3, #4
 800d388:	2b04      	cmp	r3, #4
 800d38a:	d10e      	bne.n	800d3aa <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800d38c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800d390:	9300      	str	r3, [sp, #0]
 800d392:	68fb      	ldr	r3, [r7, #12]
 800d394:	2200      	movs	r2, #0
 800d396:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800d39a:	6878      	ldr	r0, [r7, #4]
 800d39c:	f000 f819 	bl	800d3d2 <UART_WaitOnFlagUntilTimeout>
 800d3a0:	4603      	mov	r3, r0
 800d3a2:	2b00      	cmp	r3, #0
 800d3a4:	d001      	beq.n	800d3aa <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800d3a6:	2303      	movs	r3, #3
 800d3a8:	e00f      	b.n	800d3ca <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800d3aa:	687b      	ldr	r3, [r7, #4]
 800d3ac:	2220      	movs	r2, #32
 800d3ae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800d3b2:	687b      	ldr	r3, [r7, #4]
 800d3b4:	2220      	movs	r2, #32
 800d3b6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d3ba:	687b      	ldr	r3, [r7, #4]
 800d3bc:	2200      	movs	r2, #0
 800d3be:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800d3c0:	687b      	ldr	r3, [r7, #4]
 800d3c2:	2200      	movs	r2, #0
 800d3c4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800d3c8:	2300      	movs	r3, #0
}
 800d3ca:	4618      	mov	r0, r3
 800d3cc:	3710      	adds	r7, #16
 800d3ce:	46bd      	mov	sp, r7
 800d3d0:	bd80      	pop	{r7, pc}

0800d3d2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800d3d2:	b580      	push	{r7, lr}
 800d3d4:	b09c      	sub	sp, #112	; 0x70
 800d3d6:	af00      	add	r7, sp, #0
 800d3d8:	60f8      	str	r0, [r7, #12]
 800d3da:	60b9      	str	r1, [r7, #8]
 800d3dc:	603b      	str	r3, [r7, #0]
 800d3de:	4613      	mov	r3, r2
 800d3e0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d3e2:	e0a9      	b.n	800d538 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800d3e4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d3e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d3ea:	f000 80a5 	beq.w	800d538 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d3ee:	f7f9 f8c3 	bl	8006578 <HAL_GetTick>
 800d3f2:	4602      	mov	r2, r0
 800d3f4:	683b      	ldr	r3, [r7, #0]
 800d3f6:	1ad3      	subs	r3, r2, r3
 800d3f8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800d3fa:	429a      	cmp	r2, r3
 800d3fc:	d302      	bcc.n	800d404 <UART_WaitOnFlagUntilTimeout+0x32>
 800d3fe:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d400:	2b00      	cmp	r3, #0
 800d402:	d140      	bne.n	800d486 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800d404:	68fb      	ldr	r3, [r7, #12]
 800d406:	681b      	ldr	r3, [r3, #0]
 800d408:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d40a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d40c:	e853 3f00 	ldrex	r3, [r3]
 800d410:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800d412:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d414:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800d418:	667b      	str	r3, [r7, #100]	; 0x64
 800d41a:	68fb      	ldr	r3, [r7, #12]
 800d41c:	681b      	ldr	r3, [r3, #0]
 800d41e:	461a      	mov	r2, r3
 800d420:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d422:	65fb      	str	r3, [r7, #92]	; 0x5c
 800d424:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d426:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800d428:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800d42a:	e841 2300 	strex	r3, r2, [r1]
 800d42e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800d430:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d432:	2b00      	cmp	r3, #0
 800d434:	d1e6      	bne.n	800d404 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d436:	68fb      	ldr	r3, [r7, #12]
 800d438:	681b      	ldr	r3, [r3, #0]
 800d43a:	3308      	adds	r3, #8
 800d43c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d43e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d440:	e853 3f00 	ldrex	r3, [r3]
 800d444:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800d446:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d448:	f023 0301 	bic.w	r3, r3, #1
 800d44c:	663b      	str	r3, [r7, #96]	; 0x60
 800d44e:	68fb      	ldr	r3, [r7, #12]
 800d450:	681b      	ldr	r3, [r3, #0]
 800d452:	3308      	adds	r3, #8
 800d454:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800d456:	64ba      	str	r2, [r7, #72]	; 0x48
 800d458:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d45a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800d45c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d45e:	e841 2300 	strex	r3, r2, [r1]
 800d462:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800d464:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d466:	2b00      	cmp	r3, #0
 800d468:	d1e5      	bne.n	800d436 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800d46a:	68fb      	ldr	r3, [r7, #12]
 800d46c:	2220      	movs	r2, #32
 800d46e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800d472:	68fb      	ldr	r3, [r7, #12]
 800d474:	2220      	movs	r2, #32
 800d476:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800d47a:	68fb      	ldr	r3, [r7, #12]
 800d47c:	2200      	movs	r2, #0
 800d47e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800d482:	2303      	movs	r3, #3
 800d484:	e069      	b.n	800d55a <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800d486:	68fb      	ldr	r3, [r7, #12]
 800d488:	681b      	ldr	r3, [r3, #0]
 800d48a:	681b      	ldr	r3, [r3, #0]
 800d48c:	f003 0304 	and.w	r3, r3, #4
 800d490:	2b00      	cmp	r3, #0
 800d492:	d051      	beq.n	800d538 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800d494:	68fb      	ldr	r3, [r7, #12]
 800d496:	681b      	ldr	r3, [r3, #0]
 800d498:	69db      	ldr	r3, [r3, #28]
 800d49a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800d49e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800d4a2:	d149      	bne.n	800d538 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800d4a4:	68fb      	ldr	r3, [r7, #12]
 800d4a6:	681b      	ldr	r3, [r3, #0]
 800d4a8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800d4ac:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800d4ae:	68fb      	ldr	r3, [r7, #12]
 800d4b0:	681b      	ldr	r3, [r3, #0]
 800d4b2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d4b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d4b6:	e853 3f00 	ldrex	r3, [r3]
 800d4ba:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800d4bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d4be:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800d4c2:	66fb      	str	r3, [r7, #108]	; 0x6c
 800d4c4:	68fb      	ldr	r3, [r7, #12]
 800d4c6:	681b      	ldr	r3, [r3, #0]
 800d4c8:	461a      	mov	r2, r3
 800d4ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d4cc:	637b      	str	r3, [r7, #52]	; 0x34
 800d4ce:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d4d0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800d4d2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d4d4:	e841 2300 	strex	r3, r2, [r1]
 800d4d8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800d4da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d4dc:	2b00      	cmp	r3, #0
 800d4de:	d1e6      	bne.n	800d4ae <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d4e0:	68fb      	ldr	r3, [r7, #12]
 800d4e2:	681b      	ldr	r3, [r3, #0]
 800d4e4:	3308      	adds	r3, #8
 800d4e6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d4e8:	697b      	ldr	r3, [r7, #20]
 800d4ea:	e853 3f00 	ldrex	r3, [r3]
 800d4ee:	613b      	str	r3, [r7, #16]
   return(result);
 800d4f0:	693b      	ldr	r3, [r7, #16]
 800d4f2:	f023 0301 	bic.w	r3, r3, #1
 800d4f6:	66bb      	str	r3, [r7, #104]	; 0x68
 800d4f8:	68fb      	ldr	r3, [r7, #12]
 800d4fa:	681b      	ldr	r3, [r3, #0]
 800d4fc:	3308      	adds	r3, #8
 800d4fe:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800d500:	623a      	str	r2, [r7, #32]
 800d502:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d504:	69f9      	ldr	r1, [r7, #28]
 800d506:	6a3a      	ldr	r2, [r7, #32]
 800d508:	e841 2300 	strex	r3, r2, [r1]
 800d50c:	61bb      	str	r3, [r7, #24]
   return(result);
 800d50e:	69bb      	ldr	r3, [r7, #24]
 800d510:	2b00      	cmp	r3, #0
 800d512:	d1e5      	bne.n	800d4e0 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800d514:	68fb      	ldr	r3, [r7, #12]
 800d516:	2220      	movs	r2, #32
 800d518:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800d51c:	68fb      	ldr	r3, [r7, #12]
 800d51e:	2220      	movs	r2, #32
 800d520:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800d524:	68fb      	ldr	r3, [r7, #12]
 800d526:	2220      	movs	r2, #32
 800d528:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800d52c:	68fb      	ldr	r3, [r7, #12]
 800d52e:	2200      	movs	r2, #0
 800d530:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800d534:	2303      	movs	r3, #3
 800d536:	e010      	b.n	800d55a <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d538:	68fb      	ldr	r3, [r7, #12]
 800d53a:	681b      	ldr	r3, [r3, #0]
 800d53c:	69da      	ldr	r2, [r3, #28]
 800d53e:	68bb      	ldr	r3, [r7, #8]
 800d540:	4013      	ands	r3, r2
 800d542:	68ba      	ldr	r2, [r7, #8]
 800d544:	429a      	cmp	r2, r3
 800d546:	bf0c      	ite	eq
 800d548:	2301      	moveq	r3, #1
 800d54a:	2300      	movne	r3, #0
 800d54c:	b2db      	uxtb	r3, r3
 800d54e:	461a      	mov	r2, r3
 800d550:	79fb      	ldrb	r3, [r7, #7]
 800d552:	429a      	cmp	r2, r3
 800d554:	f43f af46 	beq.w	800d3e4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800d558:	2300      	movs	r3, #0
}
 800d55a:	4618      	mov	r0, r3
 800d55c:	3770      	adds	r7, #112	; 0x70
 800d55e:	46bd      	mov	sp, r7
 800d560:	bd80      	pop	{r7, pc}
	...

0800d564 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800d564:	b480      	push	{r7}
 800d566:	b0a3      	sub	sp, #140	; 0x8c
 800d568:	af00      	add	r7, sp, #0
 800d56a:	60f8      	str	r0, [r7, #12]
 800d56c:	60b9      	str	r1, [r7, #8]
 800d56e:	4613      	mov	r3, r2
 800d570:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800d572:	68fb      	ldr	r3, [r7, #12]
 800d574:	68ba      	ldr	r2, [r7, #8]
 800d576:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 800d578:	68fb      	ldr	r3, [r7, #12]
 800d57a:	88fa      	ldrh	r2, [r7, #6]
 800d57c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 800d580:	68fb      	ldr	r3, [r7, #12]
 800d582:	88fa      	ldrh	r2, [r7, #6]
 800d584:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 800d588:	68fb      	ldr	r3, [r7, #12]
 800d58a:	2200      	movs	r2, #0
 800d58c:	671a      	str	r2, [r3, #112]	; 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800d58e:	68fb      	ldr	r3, [r7, #12]
 800d590:	689b      	ldr	r3, [r3, #8]
 800d592:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d596:	d10e      	bne.n	800d5b6 <UART_Start_Receive_IT+0x52>
 800d598:	68fb      	ldr	r3, [r7, #12]
 800d59a:	691b      	ldr	r3, [r3, #16]
 800d59c:	2b00      	cmp	r3, #0
 800d59e:	d105      	bne.n	800d5ac <UART_Start_Receive_IT+0x48>
 800d5a0:	68fb      	ldr	r3, [r7, #12]
 800d5a2:	f240 12ff 	movw	r2, #511	; 0x1ff
 800d5a6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800d5aa:	e02d      	b.n	800d608 <UART_Start_Receive_IT+0xa4>
 800d5ac:	68fb      	ldr	r3, [r7, #12]
 800d5ae:	22ff      	movs	r2, #255	; 0xff
 800d5b0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800d5b4:	e028      	b.n	800d608 <UART_Start_Receive_IT+0xa4>
 800d5b6:	68fb      	ldr	r3, [r7, #12]
 800d5b8:	689b      	ldr	r3, [r3, #8]
 800d5ba:	2b00      	cmp	r3, #0
 800d5bc:	d10d      	bne.n	800d5da <UART_Start_Receive_IT+0x76>
 800d5be:	68fb      	ldr	r3, [r7, #12]
 800d5c0:	691b      	ldr	r3, [r3, #16]
 800d5c2:	2b00      	cmp	r3, #0
 800d5c4:	d104      	bne.n	800d5d0 <UART_Start_Receive_IT+0x6c>
 800d5c6:	68fb      	ldr	r3, [r7, #12]
 800d5c8:	22ff      	movs	r2, #255	; 0xff
 800d5ca:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800d5ce:	e01b      	b.n	800d608 <UART_Start_Receive_IT+0xa4>
 800d5d0:	68fb      	ldr	r3, [r7, #12]
 800d5d2:	227f      	movs	r2, #127	; 0x7f
 800d5d4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800d5d8:	e016      	b.n	800d608 <UART_Start_Receive_IT+0xa4>
 800d5da:	68fb      	ldr	r3, [r7, #12]
 800d5dc:	689b      	ldr	r3, [r3, #8]
 800d5de:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800d5e2:	d10d      	bne.n	800d600 <UART_Start_Receive_IT+0x9c>
 800d5e4:	68fb      	ldr	r3, [r7, #12]
 800d5e6:	691b      	ldr	r3, [r3, #16]
 800d5e8:	2b00      	cmp	r3, #0
 800d5ea:	d104      	bne.n	800d5f6 <UART_Start_Receive_IT+0x92>
 800d5ec:	68fb      	ldr	r3, [r7, #12]
 800d5ee:	227f      	movs	r2, #127	; 0x7f
 800d5f0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800d5f4:	e008      	b.n	800d608 <UART_Start_Receive_IT+0xa4>
 800d5f6:	68fb      	ldr	r3, [r7, #12]
 800d5f8:	223f      	movs	r2, #63	; 0x3f
 800d5fa:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800d5fe:	e003      	b.n	800d608 <UART_Start_Receive_IT+0xa4>
 800d600:	68fb      	ldr	r3, [r7, #12]
 800d602:	2200      	movs	r2, #0
 800d604:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d608:	68fb      	ldr	r3, [r7, #12]
 800d60a:	2200      	movs	r2, #0
 800d60c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800d610:	68fb      	ldr	r3, [r7, #12]
 800d612:	2222      	movs	r2, #34	; 0x22
 800d614:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d618:	68fb      	ldr	r3, [r7, #12]
 800d61a:	681b      	ldr	r3, [r3, #0]
 800d61c:	3308      	adds	r3, #8
 800d61e:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d620:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d622:	e853 3f00 	ldrex	r3, [r3]
 800d626:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 800d628:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d62a:	f043 0301 	orr.w	r3, r3, #1
 800d62e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800d632:	68fb      	ldr	r3, [r7, #12]
 800d634:	681b      	ldr	r3, [r3, #0]
 800d636:	3308      	adds	r3, #8
 800d638:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800d63c:	673a      	str	r2, [r7, #112]	; 0x70
 800d63e:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d640:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800d642:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800d644:	e841 2300 	strex	r3, r2, [r1]
 800d648:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 800d64a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800d64c:	2b00      	cmp	r3, #0
 800d64e:	d1e3      	bne.n	800d618 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800d650:	68fb      	ldr	r3, [r7, #12]
 800d652:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d654:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800d658:	d153      	bne.n	800d702 <UART_Start_Receive_IT+0x19e>
 800d65a:	68fb      	ldr	r3, [r7, #12]
 800d65c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800d660:	88fa      	ldrh	r2, [r7, #6]
 800d662:	429a      	cmp	r2, r3
 800d664:	d34d      	bcc.n	800d702 <UART_Start_Receive_IT+0x19e>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800d666:	68fb      	ldr	r3, [r7, #12]
 800d668:	689b      	ldr	r3, [r3, #8]
 800d66a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d66e:	d107      	bne.n	800d680 <UART_Start_Receive_IT+0x11c>
 800d670:	68fb      	ldr	r3, [r7, #12]
 800d672:	691b      	ldr	r3, [r3, #16]
 800d674:	2b00      	cmp	r3, #0
 800d676:	d103      	bne.n	800d680 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800d678:	68fb      	ldr	r3, [r7, #12]
 800d67a:	4a4b      	ldr	r2, [pc, #300]	; (800d7a8 <UART_Start_Receive_IT+0x244>)
 800d67c:	671a      	str	r2, [r3, #112]	; 0x70
 800d67e:	e002      	b.n	800d686 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800d680:	68fb      	ldr	r3, [r7, #12]
 800d682:	4a4a      	ldr	r2, [pc, #296]	; (800d7ac <UART_Start_Receive_IT+0x248>)
 800d684:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 800d686:	68fb      	ldr	r3, [r7, #12]
 800d688:	2200      	movs	r2, #0
 800d68a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800d68e:	68fb      	ldr	r3, [r7, #12]
 800d690:	691b      	ldr	r3, [r3, #16]
 800d692:	2b00      	cmp	r3, #0
 800d694:	d01a      	beq.n	800d6cc <UART_Start_Receive_IT+0x168>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800d696:	68fb      	ldr	r3, [r7, #12]
 800d698:	681b      	ldr	r3, [r3, #0]
 800d69a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d69c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d69e:	e853 3f00 	ldrex	r3, [r3]
 800d6a2:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800d6a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d6a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d6aa:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800d6ae:	68fb      	ldr	r3, [r7, #12]
 800d6b0:	681b      	ldr	r3, [r3, #0]
 800d6b2:	461a      	mov	r2, r3
 800d6b4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800d6b8:	65fb      	str	r3, [r7, #92]	; 0x5c
 800d6ba:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d6bc:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800d6be:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800d6c0:	e841 2300 	strex	r3, r2, [r1]
 800d6c4:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800d6c6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d6c8:	2b00      	cmp	r3, #0
 800d6ca:	d1e4      	bne.n	800d696 <UART_Start_Receive_IT+0x132>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800d6cc:	68fb      	ldr	r3, [r7, #12]
 800d6ce:	681b      	ldr	r3, [r3, #0]
 800d6d0:	3308      	adds	r3, #8
 800d6d2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d6d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d6d6:	e853 3f00 	ldrex	r3, [r3]
 800d6da:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800d6dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d6de:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d6e2:	67fb      	str	r3, [r7, #124]	; 0x7c
 800d6e4:	68fb      	ldr	r3, [r7, #12]
 800d6e6:	681b      	ldr	r3, [r3, #0]
 800d6e8:	3308      	adds	r3, #8
 800d6ea:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800d6ec:	64ba      	str	r2, [r7, #72]	; 0x48
 800d6ee:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d6f0:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800d6f2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d6f4:	e841 2300 	strex	r3, r2, [r1]
 800d6f8:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800d6fa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d6fc:	2b00      	cmp	r3, #0
 800d6fe:	d1e5      	bne.n	800d6cc <UART_Start_Receive_IT+0x168>
 800d700:	e04a      	b.n	800d798 <UART_Start_Receive_IT+0x234>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800d702:	68fb      	ldr	r3, [r7, #12]
 800d704:	689b      	ldr	r3, [r3, #8]
 800d706:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d70a:	d107      	bne.n	800d71c <UART_Start_Receive_IT+0x1b8>
 800d70c:	68fb      	ldr	r3, [r7, #12]
 800d70e:	691b      	ldr	r3, [r3, #16]
 800d710:	2b00      	cmp	r3, #0
 800d712:	d103      	bne.n	800d71c <UART_Start_Receive_IT+0x1b8>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800d714:	68fb      	ldr	r3, [r7, #12]
 800d716:	4a26      	ldr	r2, [pc, #152]	; (800d7b0 <UART_Start_Receive_IT+0x24c>)
 800d718:	671a      	str	r2, [r3, #112]	; 0x70
 800d71a:	e002      	b.n	800d722 <UART_Start_Receive_IT+0x1be>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800d71c:	68fb      	ldr	r3, [r7, #12]
 800d71e:	4a25      	ldr	r2, [pc, #148]	; (800d7b4 <UART_Start_Receive_IT+0x250>)
 800d720:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 800d722:	68fb      	ldr	r3, [r7, #12]
 800d724:	2200      	movs	r2, #0
 800d726:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800d72a:	68fb      	ldr	r3, [r7, #12]
 800d72c:	691b      	ldr	r3, [r3, #16]
 800d72e:	2b00      	cmp	r3, #0
 800d730:	d019      	beq.n	800d766 <UART_Start_Receive_IT+0x202>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800d732:	68fb      	ldr	r3, [r7, #12]
 800d734:	681b      	ldr	r3, [r3, #0]
 800d736:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d738:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d73a:	e853 3f00 	ldrex	r3, [r3]
 800d73e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800d740:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d742:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800d746:	677b      	str	r3, [r7, #116]	; 0x74
 800d748:	68fb      	ldr	r3, [r7, #12]
 800d74a:	681b      	ldr	r3, [r3, #0]
 800d74c:	461a      	mov	r2, r3
 800d74e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d750:	637b      	str	r3, [r7, #52]	; 0x34
 800d752:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d754:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800d756:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d758:	e841 2300 	strex	r3, r2, [r1]
 800d75c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800d75e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d760:	2b00      	cmp	r3, #0
 800d762:	d1e6      	bne.n	800d732 <UART_Start_Receive_IT+0x1ce>
 800d764:	e018      	b.n	800d798 <UART_Start_Receive_IT+0x234>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800d766:	68fb      	ldr	r3, [r7, #12]
 800d768:	681b      	ldr	r3, [r3, #0]
 800d76a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d76c:	697b      	ldr	r3, [r7, #20]
 800d76e:	e853 3f00 	ldrex	r3, [r3]
 800d772:	613b      	str	r3, [r7, #16]
   return(result);
 800d774:	693b      	ldr	r3, [r7, #16]
 800d776:	f043 0320 	orr.w	r3, r3, #32
 800d77a:	67bb      	str	r3, [r7, #120]	; 0x78
 800d77c:	68fb      	ldr	r3, [r7, #12]
 800d77e:	681b      	ldr	r3, [r3, #0]
 800d780:	461a      	mov	r2, r3
 800d782:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d784:	623b      	str	r3, [r7, #32]
 800d786:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d788:	69f9      	ldr	r1, [r7, #28]
 800d78a:	6a3a      	ldr	r2, [r7, #32]
 800d78c:	e841 2300 	strex	r3, r2, [r1]
 800d790:	61bb      	str	r3, [r7, #24]
   return(result);
 800d792:	69bb      	ldr	r3, [r7, #24]
 800d794:	2b00      	cmp	r3, #0
 800d796:	d1e6      	bne.n	800d766 <UART_Start_Receive_IT+0x202>
    }
  }
  return HAL_OK;
 800d798:	2300      	movs	r3, #0
}
 800d79a:	4618      	mov	r0, r3
 800d79c:	378c      	adds	r7, #140	; 0x8c
 800d79e:	46bd      	mov	sp, r7
 800d7a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7a4:	4770      	bx	lr
 800d7a6:	bf00      	nop
 800d7a8:	0800dec1 	.word	0x0800dec1
 800d7ac:	0800dbc9 	.word	0x0800dbc9
 800d7b0:	0800da67 	.word	0x0800da67
 800d7b4:	0800d907 	.word	0x0800d907

0800d7b8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800d7b8:	b480      	push	{r7}
 800d7ba:	b095      	sub	sp, #84	; 0x54
 800d7bc:	af00      	add	r7, sp, #0
 800d7be:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800d7c0:	687b      	ldr	r3, [r7, #4]
 800d7c2:	681b      	ldr	r3, [r3, #0]
 800d7c4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d7c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d7c8:	e853 3f00 	ldrex	r3, [r3]
 800d7cc:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800d7ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d7d0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800d7d4:	64fb      	str	r3, [r7, #76]	; 0x4c
 800d7d6:	687b      	ldr	r3, [r7, #4]
 800d7d8:	681b      	ldr	r3, [r3, #0]
 800d7da:	461a      	mov	r2, r3
 800d7dc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d7de:	643b      	str	r3, [r7, #64]	; 0x40
 800d7e0:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d7e2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800d7e4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800d7e6:	e841 2300 	strex	r3, r2, [r1]
 800d7ea:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800d7ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d7ee:	2b00      	cmp	r3, #0
 800d7f0:	d1e6      	bne.n	800d7c0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800d7f2:	687b      	ldr	r3, [r7, #4]
 800d7f4:	681b      	ldr	r3, [r3, #0]
 800d7f6:	3308      	adds	r3, #8
 800d7f8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d7fa:	6a3b      	ldr	r3, [r7, #32]
 800d7fc:	e853 3f00 	ldrex	r3, [r3]
 800d800:	61fb      	str	r3, [r7, #28]
   return(result);
 800d802:	69fa      	ldr	r2, [r7, #28]
 800d804:	4b1e      	ldr	r3, [pc, #120]	; (800d880 <UART_EndRxTransfer+0xc8>)
 800d806:	4013      	ands	r3, r2
 800d808:	64bb      	str	r3, [r7, #72]	; 0x48
 800d80a:	687b      	ldr	r3, [r7, #4]
 800d80c:	681b      	ldr	r3, [r3, #0]
 800d80e:	3308      	adds	r3, #8
 800d810:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d812:	62fa      	str	r2, [r7, #44]	; 0x2c
 800d814:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d816:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d818:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d81a:	e841 2300 	strex	r3, r2, [r1]
 800d81e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800d820:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d822:	2b00      	cmp	r3, #0
 800d824:	d1e5      	bne.n	800d7f2 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d826:	687b      	ldr	r3, [r7, #4]
 800d828:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d82a:	2b01      	cmp	r3, #1
 800d82c:	d118      	bne.n	800d860 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d82e:	687b      	ldr	r3, [r7, #4]
 800d830:	681b      	ldr	r3, [r3, #0]
 800d832:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d834:	68fb      	ldr	r3, [r7, #12]
 800d836:	e853 3f00 	ldrex	r3, [r3]
 800d83a:	60bb      	str	r3, [r7, #8]
   return(result);
 800d83c:	68bb      	ldr	r3, [r7, #8]
 800d83e:	f023 0310 	bic.w	r3, r3, #16
 800d842:	647b      	str	r3, [r7, #68]	; 0x44
 800d844:	687b      	ldr	r3, [r7, #4]
 800d846:	681b      	ldr	r3, [r3, #0]
 800d848:	461a      	mov	r2, r3
 800d84a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d84c:	61bb      	str	r3, [r7, #24]
 800d84e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d850:	6979      	ldr	r1, [r7, #20]
 800d852:	69ba      	ldr	r2, [r7, #24]
 800d854:	e841 2300 	strex	r3, r2, [r1]
 800d858:	613b      	str	r3, [r7, #16]
   return(result);
 800d85a:	693b      	ldr	r3, [r7, #16]
 800d85c:	2b00      	cmp	r3, #0
 800d85e:	d1e6      	bne.n	800d82e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800d860:	687b      	ldr	r3, [r7, #4]
 800d862:	2220      	movs	r2, #32
 800d864:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d868:	687b      	ldr	r3, [r7, #4]
 800d86a:	2200      	movs	r2, #0
 800d86c:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800d86e:	687b      	ldr	r3, [r7, #4]
 800d870:	2200      	movs	r2, #0
 800d872:	671a      	str	r2, [r3, #112]	; 0x70
}
 800d874:	bf00      	nop
 800d876:	3754      	adds	r7, #84	; 0x54
 800d878:	46bd      	mov	sp, r7
 800d87a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d87e:	4770      	bx	lr
 800d880:	effffffe 	.word	0xeffffffe

0800d884 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800d884:	b580      	push	{r7, lr}
 800d886:	b084      	sub	sp, #16
 800d888:	af00      	add	r7, sp, #0
 800d88a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800d88c:	687b      	ldr	r3, [r7, #4]
 800d88e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d890:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800d892:	68fb      	ldr	r3, [r7, #12]
 800d894:	2200      	movs	r2, #0
 800d896:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800d89a:	68fb      	ldr	r3, [r7, #12]
 800d89c:	2200      	movs	r2, #0
 800d89e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800d8a2:	68f8      	ldr	r0, [r7, #12]
 800d8a4:	f7fe ff2a 	bl	800c6fc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d8a8:	bf00      	nop
 800d8aa:	3710      	adds	r7, #16
 800d8ac:	46bd      	mov	sp, r7
 800d8ae:	bd80      	pop	{r7, pc}

0800d8b0 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800d8b0:	b580      	push	{r7, lr}
 800d8b2:	b088      	sub	sp, #32
 800d8b4:	af00      	add	r7, sp, #0
 800d8b6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800d8b8:	687b      	ldr	r3, [r7, #4]
 800d8ba:	681b      	ldr	r3, [r3, #0]
 800d8bc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d8be:	68fb      	ldr	r3, [r7, #12]
 800d8c0:	e853 3f00 	ldrex	r3, [r3]
 800d8c4:	60bb      	str	r3, [r7, #8]
   return(result);
 800d8c6:	68bb      	ldr	r3, [r7, #8]
 800d8c8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d8cc:	61fb      	str	r3, [r7, #28]
 800d8ce:	687b      	ldr	r3, [r7, #4]
 800d8d0:	681b      	ldr	r3, [r3, #0]
 800d8d2:	461a      	mov	r2, r3
 800d8d4:	69fb      	ldr	r3, [r7, #28]
 800d8d6:	61bb      	str	r3, [r7, #24]
 800d8d8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d8da:	6979      	ldr	r1, [r7, #20]
 800d8dc:	69ba      	ldr	r2, [r7, #24]
 800d8de:	e841 2300 	strex	r3, r2, [r1]
 800d8e2:	613b      	str	r3, [r7, #16]
   return(result);
 800d8e4:	693b      	ldr	r3, [r7, #16]
 800d8e6:	2b00      	cmp	r3, #0
 800d8e8:	d1e6      	bne.n	800d8b8 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800d8ea:	687b      	ldr	r3, [r7, #4]
 800d8ec:	2220      	movs	r2, #32
 800d8ee:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800d8f2:	687b      	ldr	r3, [r7, #4]
 800d8f4:	2200      	movs	r2, #0
 800d8f6:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800d8f8:	6878      	ldr	r0, [r7, #4]
 800d8fa:	f7f5 f8bf 	bl	8002a7c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d8fe:	bf00      	nop
 800d900:	3720      	adds	r7, #32
 800d902:	46bd      	mov	sp, r7
 800d904:	bd80      	pop	{r7, pc}

0800d906 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800d906:	b580      	push	{r7, lr}
 800d908:	b096      	sub	sp, #88	; 0x58
 800d90a:	af00      	add	r7, sp, #0
 800d90c:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800d90e:	687b      	ldr	r3, [r7, #4]
 800d910:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800d914:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800d918:	687b      	ldr	r3, [r7, #4]
 800d91a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d91e:	2b22      	cmp	r3, #34	; 0x22
 800d920:	f040 8095 	bne.w	800da4e <UART_RxISR_8BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800d924:	687b      	ldr	r3, [r7, #4]
 800d926:	681b      	ldr	r3, [r3, #0]
 800d928:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d92a:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800d92e:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 800d932:	b2d9      	uxtb	r1, r3
 800d934:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800d938:	b2da      	uxtb	r2, r3
 800d93a:	687b      	ldr	r3, [r7, #4]
 800d93c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d93e:	400a      	ands	r2, r1
 800d940:	b2d2      	uxtb	r2, r2
 800d942:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800d944:	687b      	ldr	r3, [r7, #4]
 800d946:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d948:	1c5a      	adds	r2, r3, #1
 800d94a:	687b      	ldr	r3, [r7, #4]
 800d94c:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800d94e:	687b      	ldr	r3, [r7, #4]
 800d950:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800d954:	b29b      	uxth	r3, r3
 800d956:	3b01      	subs	r3, #1
 800d958:	b29a      	uxth	r2, r3
 800d95a:	687b      	ldr	r3, [r7, #4]
 800d95c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800d960:	687b      	ldr	r3, [r7, #4]
 800d962:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800d966:	b29b      	uxth	r3, r3
 800d968:	2b00      	cmp	r3, #0
 800d96a:	d178      	bne.n	800da5e <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800d96c:	687b      	ldr	r3, [r7, #4]
 800d96e:	681b      	ldr	r3, [r3, #0]
 800d970:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d972:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d974:	e853 3f00 	ldrex	r3, [r3]
 800d978:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800d97a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d97c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800d980:	653b      	str	r3, [r7, #80]	; 0x50
 800d982:	687b      	ldr	r3, [r7, #4]
 800d984:	681b      	ldr	r3, [r3, #0]
 800d986:	461a      	mov	r2, r3
 800d988:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d98a:	647b      	str	r3, [r7, #68]	; 0x44
 800d98c:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d98e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800d990:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d992:	e841 2300 	strex	r3, r2, [r1]
 800d996:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800d998:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d99a:	2b00      	cmp	r3, #0
 800d99c:	d1e6      	bne.n	800d96c <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d99e:	687b      	ldr	r3, [r7, #4]
 800d9a0:	681b      	ldr	r3, [r3, #0]
 800d9a2:	3308      	adds	r3, #8
 800d9a4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d9a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d9a8:	e853 3f00 	ldrex	r3, [r3]
 800d9ac:	623b      	str	r3, [r7, #32]
   return(result);
 800d9ae:	6a3b      	ldr	r3, [r7, #32]
 800d9b0:	f023 0301 	bic.w	r3, r3, #1
 800d9b4:	64fb      	str	r3, [r7, #76]	; 0x4c
 800d9b6:	687b      	ldr	r3, [r7, #4]
 800d9b8:	681b      	ldr	r3, [r3, #0]
 800d9ba:	3308      	adds	r3, #8
 800d9bc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800d9be:	633a      	str	r2, [r7, #48]	; 0x30
 800d9c0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d9c2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d9c4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d9c6:	e841 2300 	strex	r3, r2, [r1]
 800d9ca:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800d9cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d9ce:	2b00      	cmp	r3, #0
 800d9d0:	d1e5      	bne.n	800d99e <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800d9d2:	687b      	ldr	r3, [r7, #4]
 800d9d4:	2220      	movs	r2, #32
 800d9d6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800d9da:	687b      	ldr	r3, [r7, #4]
 800d9dc:	2200      	movs	r2, #0
 800d9de:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d9e0:	687b      	ldr	r3, [r7, #4]
 800d9e2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d9e4:	2b01      	cmp	r3, #1
 800d9e6:	d12e      	bne.n	800da46 <UART_RxISR_8BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d9e8:	687b      	ldr	r3, [r7, #4]
 800d9ea:	2200      	movs	r2, #0
 800d9ec:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d9ee:	687b      	ldr	r3, [r7, #4]
 800d9f0:	681b      	ldr	r3, [r3, #0]
 800d9f2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d9f4:	693b      	ldr	r3, [r7, #16]
 800d9f6:	e853 3f00 	ldrex	r3, [r3]
 800d9fa:	60fb      	str	r3, [r7, #12]
   return(result);
 800d9fc:	68fb      	ldr	r3, [r7, #12]
 800d9fe:	f023 0310 	bic.w	r3, r3, #16
 800da02:	64bb      	str	r3, [r7, #72]	; 0x48
 800da04:	687b      	ldr	r3, [r7, #4]
 800da06:	681b      	ldr	r3, [r3, #0]
 800da08:	461a      	mov	r2, r3
 800da0a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800da0c:	61fb      	str	r3, [r7, #28]
 800da0e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800da10:	69b9      	ldr	r1, [r7, #24]
 800da12:	69fa      	ldr	r2, [r7, #28]
 800da14:	e841 2300 	strex	r3, r2, [r1]
 800da18:	617b      	str	r3, [r7, #20]
   return(result);
 800da1a:	697b      	ldr	r3, [r7, #20]
 800da1c:	2b00      	cmp	r3, #0
 800da1e:	d1e6      	bne.n	800d9ee <UART_RxISR_8BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800da20:	687b      	ldr	r3, [r7, #4]
 800da22:	681b      	ldr	r3, [r3, #0]
 800da24:	69db      	ldr	r3, [r3, #28]
 800da26:	f003 0310 	and.w	r3, r3, #16
 800da2a:	2b10      	cmp	r3, #16
 800da2c:	d103      	bne.n	800da36 <UART_RxISR_8BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800da2e:	687b      	ldr	r3, [r7, #4]
 800da30:	681b      	ldr	r3, [r3, #0]
 800da32:	2210      	movs	r2, #16
 800da34:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800da36:	687b      	ldr	r3, [r7, #4]
 800da38:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800da3c:	4619      	mov	r1, r3
 800da3e:	6878      	ldr	r0, [r7, #4]
 800da40:	f7fe fe66 	bl	800c710 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800da44:	e00b      	b.n	800da5e <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 800da46:	6878      	ldr	r0, [r7, #4]
 800da48:	f7f4 ffa4 	bl	8002994 <HAL_UART_RxCpltCallback>
}
 800da4c:	e007      	b.n	800da5e <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800da4e:	687b      	ldr	r3, [r7, #4]
 800da50:	681b      	ldr	r3, [r3, #0]
 800da52:	699a      	ldr	r2, [r3, #24]
 800da54:	687b      	ldr	r3, [r7, #4]
 800da56:	681b      	ldr	r3, [r3, #0]
 800da58:	f042 0208 	orr.w	r2, r2, #8
 800da5c:	619a      	str	r2, [r3, #24]
}
 800da5e:	bf00      	nop
 800da60:	3758      	adds	r7, #88	; 0x58
 800da62:	46bd      	mov	sp, r7
 800da64:	bd80      	pop	{r7, pc}

0800da66 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800da66:	b580      	push	{r7, lr}
 800da68:	b096      	sub	sp, #88	; 0x58
 800da6a:	af00      	add	r7, sp, #0
 800da6c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800da6e:	687b      	ldr	r3, [r7, #4]
 800da70:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800da74:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800da78:	687b      	ldr	r3, [r7, #4]
 800da7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800da7e:	2b22      	cmp	r3, #34	; 0x22
 800da80:	f040 8095 	bne.w	800dbae <UART_RxISR_16BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800da84:	687b      	ldr	r3, [r7, #4]
 800da86:	681b      	ldr	r3, [r3, #0]
 800da88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800da8a:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800da8e:	687b      	ldr	r3, [r7, #4]
 800da90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800da92:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 800da94:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 800da98:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800da9c:	4013      	ands	r3, r2
 800da9e:	b29a      	uxth	r2, r3
 800daa0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800daa2:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800daa4:	687b      	ldr	r3, [r7, #4]
 800daa6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800daa8:	1c9a      	adds	r2, r3, #2
 800daaa:	687b      	ldr	r3, [r7, #4]
 800daac:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800daae:	687b      	ldr	r3, [r7, #4]
 800dab0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800dab4:	b29b      	uxth	r3, r3
 800dab6:	3b01      	subs	r3, #1
 800dab8:	b29a      	uxth	r2, r3
 800daba:	687b      	ldr	r3, [r7, #4]
 800dabc:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800dac0:	687b      	ldr	r3, [r7, #4]
 800dac2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800dac6:	b29b      	uxth	r3, r3
 800dac8:	2b00      	cmp	r3, #0
 800daca:	d178      	bne.n	800dbbe <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800dacc:	687b      	ldr	r3, [r7, #4]
 800dace:	681b      	ldr	r3, [r3, #0]
 800dad0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dad2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dad4:	e853 3f00 	ldrex	r3, [r3]
 800dad8:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800dada:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dadc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800dae0:	64fb      	str	r3, [r7, #76]	; 0x4c
 800dae2:	687b      	ldr	r3, [r7, #4]
 800dae4:	681b      	ldr	r3, [r3, #0]
 800dae6:	461a      	mov	r2, r3
 800dae8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800daea:	643b      	str	r3, [r7, #64]	; 0x40
 800daec:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800daee:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800daf0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800daf2:	e841 2300 	strex	r3, r2, [r1]
 800daf6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800daf8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dafa:	2b00      	cmp	r3, #0
 800dafc:	d1e6      	bne.n	800dacc <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800dafe:	687b      	ldr	r3, [r7, #4]
 800db00:	681b      	ldr	r3, [r3, #0]
 800db02:	3308      	adds	r3, #8
 800db04:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800db06:	6a3b      	ldr	r3, [r7, #32]
 800db08:	e853 3f00 	ldrex	r3, [r3]
 800db0c:	61fb      	str	r3, [r7, #28]
   return(result);
 800db0e:	69fb      	ldr	r3, [r7, #28]
 800db10:	f023 0301 	bic.w	r3, r3, #1
 800db14:	64bb      	str	r3, [r7, #72]	; 0x48
 800db16:	687b      	ldr	r3, [r7, #4]
 800db18:	681b      	ldr	r3, [r3, #0]
 800db1a:	3308      	adds	r3, #8
 800db1c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800db1e:	62fa      	str	r2, [r7, #44]	; 0x2c
 800db20:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800db22:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800db24:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800db26:	e841 2300 	strex	r3, r2, [r1]
 800db2a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800db2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db2e:	2b00      	cmp	r3, #0
 800db30:	d1e5      	bne.n	800dafe <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800db32:	687b      	ldr	r3, [r7, #4]
 800db34:	2220      	movs	r2, #32
 800db36:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800db3a:	687b      	ldr	r3, [r7, #4]
 800db3c:	2200      	movs	r2, #0
 800db3e:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800db40:	687b      	ldr	r3, [r7, #4]
 800db42:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800db44:	2b01      	cmp	r3, #1
 800db46:	d12e      	bne.n	800dba6 <UART_RxISR_16BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800db48:	687b      	ldr	r3, [r7, #4]
 800db4a:	2200      	movs	r2, #0
 800db4c:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800db4e:	687b      	ldr	r3, [r7, #4]
 800db50:	681b      	ldr	r3, [r3, #0]
 800db52:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800db54:	68fb      	ldr	r3, [r7, #12]
 800db56:	e853 3f00 	ldrex	r3, [r3]
 800db5a:	60bb      	str	r3, [r7, #8]
   return(result);
 800db5c:	68bb      	ldr	r3, [r7, #8]
 800db5e:	f023 0310 	bic.w	r3, r3, #16
 800db62:	647b      	str	r3, [r7, #68]	; 0x44
 800db64:	687b      	ldr	r3, [r7, #4]
 800db66:	681b      	ldr	r3, [r3, #0]
 800db68:	461a      	mov	r2, r3
 800db6a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800db6c:	61bb      	str	r3, [r7, #24]
 800db6e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800db70:	6979      	ldr	r1, [r7, #20]
 800db72:	69ba      	ldr	r2, [r7, #24]
 800db74:	e841 2300 	strex	r3, r2, [r1]
 800db78:	613b      	str	r3, [r7, #16]
   return(result);
 800db7a:	693b      	ldr	r3, [r7, #16]
 800db7c:	2b00      	cmp	r3, #0
 800db7e:	d1e6      	bne.n	800db4e <UART_RxISR_16BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800db80:	687b      	ldr	r3, [r7, #4]
 800db82:	681b      	ldr	r3, [r3, #0]
 800db84:	69db      	ldr	r3, [r3, #28]
 800db86:	f003 0310 	and.w	r3, r3, #16
 800db8a:	2b10      	cmp	r3, #16
 800db8c:	d103      	bne.n	800db96 <UART_RxISR_16BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800db8e:	687b      	ldr	r3, [r7, #4]
 800db90:	681b      	ldr	r3, [r3, #0]
 800db92:	2210      	movs	r2, #16
 800db94:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800db96:	687b      	ldr	r3, [r7, #4]
 800db98:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800db9c:	4619      	mov	r1, r3
 800db9e:	6878      	ldr	r0, [r7, #4]
 800dba0:	f7fe fdb6 	bl	800c710 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800dba4:	e00b      	b.n	800dbbe <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 800dba6:	6878      	ldr	r0, [r7, #4]
 800dba8:	f7f4 fef4 	bl	8002994 <HAL_UART_RxCpltCallback>
}
 800dbac:	e007      	b.n	800dbbe <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800dbae:	687b      	ldr	r3, [r7, #4]
 800dbb0:	681b      	ldr	r3, [r3, #0]
 800dbb2:	699a      	ldr	r2, [r3, #24]
 800dbb4:	687b      	ldr	r3, [r7, #4]
 800dbb6:	681b      	ldr	r3, [r3, #0]
 800dbb8:	f042 0208 	orr.w	r2, r2, #8
 800dbbc:	619a      	str	r2, [r3, #24]
}
 800dbbe:	bf00      	nop
 800dbc0:	3758      	adds	r7, #88	; 0x58
 800dbc2:	46bd      	mov	sp, r7
 800dbc4:	bd80      	pop	{r7, pc}
	...

0800dbc8 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800dbc8:	b580      	push	{r7, lr}
 800dbca:	b0a6      	sub	sp, #152	; 0x98
 800dbcc:	af00      	add	r7, sp, #0
 800dbce:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800dbd0:	687b      	ldr	r3, [r7, #4]
 800dbd2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800dbd6:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800dbda:	687b      	ldr	r3, [r7, #4]
 800dbdc:	681b      	ldr	r3, [r3, #0]
 800dbde:	69db      	ldr	r3, [r3, #28]
 800dbe0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800dbe4:	687b      	ldr	r3, [r7, #4]
 800dbe6:	681b      	ldr	r3, [r3, #0]
 800dbe8:	681b      	ldr	r3, [r3, #0]
 800dbea:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800dbee:	687b      	ldr	r3, [r7, #4]
 800dbf0:	681b      	ldr	r3, [r3, #0]
 800dbf2:	689b      	ldr	r3, [r3, #8]
 800dbf4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800dbf8:	687b      	ldr	r3, [r7, #4]
 800dbfa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800dbfe:	2b22      	cmp	r3, #34	; 0x22
 800dc00:	f040 814d 	bne.w	800de9e <UART_RxISR_8BIT_FIFOEN+0x2d6>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800dc04:	687b      	ldr	r3, [r7, #4]
 800dc06:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800dc0a:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800dc0e:	e0f4      	b.n	800ddfa <UART_RxISR_8BIT_FIFOEN+0x232>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800dc10:	687b      	ldr	r3, [r7, #4]
 800dc12:	681b      	ldr	r3, [r3, #0]
 800dc14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dc16:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800dc1a:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 800dc1e:	b2d9      	uxtb	r1, r3
 800dc20:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 800dc24:	b2da      	uxtb	r2, r3
 800dc26:	687b      	ldr	r3, [r7, #4]
 800dc28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800dc2a:	400a      	ands	r2, r1
 800dc2c:	b2d2      	uxtb	r2, r2
 800dc2e:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800dc30:	687b      	ldr	r3, [r7, #4]
 800dc32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800dc34:	1c5a      	adds	r2, r3, #1
 800dc36:	687b      	ldr	r3, [r7, #4]
 800dc38:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800dc3a:	687b      	ldr	r3, [r7, #4]
 800dc3c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800dc40:	b29b      	uxth	r3, r3
 800dc42:	3b01      	subs	r3, #1
 800dc44:	b29a      	uxth	r2, r3
 800dc46:	687b      	ldr	r3, [r7, #4]
 800dc48:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800dc4c:	687b      	ldr	r3, [r7, #4]
 800dc4e:	681b      	ldr	r3, [r3, #0]
 800dc50:	69db      	ldr	r3, [r3, #28]
 800dc52:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800dc56:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800dc5a:	f003 0307 	and.w	r3, r3, #7
 800dc5e:	2b00      	cmp	r3, #0
 800dc60:	d053      	beq.n	800dd0a <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800dc62:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800dc66:	f003 0301 	and.w	r3, r3, #1
 800dc6a:	2b00      	cmp	r3, #0
 800dc6c:	d011      	beq.n	800dc92 <UART_RxISR_8BIT_FIFOEN+0xca>
 800dc6e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800dc72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800dc76:	2b00      	cmp	r3, #0
 800dc78:	d00b      	beq.n	800dc92 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800dc7a:	687b      	ldr	r3, [r7, #4]
 800dc7c:	681b      	ldr	r3, [r3, #0]
 800dc7e:	2201      	movs	r2, #1
 800dc80:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800dc82:	687b      	ldr	r3, [r7, #4]
 800dc84:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800dc88:	f043 0201 	orr.w	r2, r3, #1
 800dc8c:	687b      	ldr	r3, [r7, #4]
 800dc8e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800dc92:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800dc96:	f003 0302 	and.w	r3, r3, #2
 800dc9a:	2b00      	cmp	r3, #0
 800dc9c:	d011      	beq.n	800dcc2 <UART_RxISR_8BIT_FIFOEN+0xfa>
 800dc9e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800dca2:	f003 0301 	and.w	r3, r3, #1
 800dca6:	2b00      	cmp	r3, #0
 800dca8:	d00b      	beq.n	800dcc2 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800dcaa:	687b      	ldr	r3, [r7, #4]
 800dcac:	681b      	ldr	r3, [r3, #0]
 800dcae:	2202      	movs	r2, #2
 800dcb0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800dcb2:	687b      	ldr	r3, [r7, #4]
 800dcb4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800dcb8:	f043 0204 	orr.w	r2, r3, #4
 800dcbc:	687b      	ldr	r3, [r7, #4]
 800dcbe:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800dcc2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800dcc6:	f003 0304 	and.w	r3, r3, #4
 800dcca:	2b00      	cmp	r3, #0
 800dccc:	d011      	beq.n	800dcf2 <UART_RxISR_8BIT_FIFOEN+0x12a>
 800dcce:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800dcd2:	f003 0301 	and.w	r3, r3, #1
 800dcd6:	2b00      	cmp	r3, #0
 800dcd8:	d00b      	beq.n	800dcf2 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800dcda:	687b      	ldr	r3, [r7, #4]
 800dcdc:	681b      	ldr	r3, [r3, #0]
 800dcde:	2204      	movs	r2, #4
 800dce0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800dce2:	687b      	ldr	r3, [r7, #4]
 800dce4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800dce8:	f043 0202 	orr.w	r2, r3, #2
 800dcec:	687b      	ldr	r3, [r7, #4]
 800dcee:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800dcf2:	687b      	ldr	r3, [r7, #4]
 800dcf4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800dcf8:	2b00      	cmp	r3, #0
 800dcfa:	d006      	beq.n	800dd0a <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800dcfc:	6878      	ldr	r0, [r7, #4]
 800dcfe:	f7fe fcfd 	bl	800c6fc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800dd02:	687b      	ldr	r3, [r7, #4]
 800dd04:	2200      	movs	r2, #0
 800dd06:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 800dd0a:	687b      	ldr	r3, [r7, #4]
 800dd0c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800dd10:	b29b      	uxth	r3, r3
 800dd12:	2b00      	cmp	r3, #0
 800dd14:	d171      	bne.n	800ddfa <UART_RxISR_8BIT_FIFOEN+0x232>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800dd16:	687b      	ldr	r3, [r7, #4]
 800dd18:	681b      	ldr	r3, [r3, #0]
 800dd1a:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dd1c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800dd1e:	e853 3f00 	ldrex	r3, [r3]
 800dd22:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 800dd24:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800dd26:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800dd2a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800dd2e:	687b      	ldr	r3, [r7, #4]
 800dd30:	681b      	ldr	r3, [r3, #0]
 800dd32:	461a      	mov	r2, r3
 800dd34:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800dd38:	66bb      	str	r3, [r7, #104]	; 0x68
 800dd3a:	667a      	str	r2, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dd3c:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800dd3e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800dd40:	e841 2300 	strex	r3, r2, [r1]
 800dd44:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 800dd46:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800dd48:	2b00      	cmp	r3, #0
 800dd4a:	d1e4      	bne.n	800dd16 <UART_RxISR_8BIT_FIFOEN+0x14e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800dd4c:	687b      	ldr	r3, [r7, #4]
 800dd4e:	681b      	ldr	r3, [r3, #0]
 800dd50:	3308      	adds	r3, #8
 800dd52:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dd54:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800dd56:	e853 3f00 	ldrex	r3, [r3]
 800dd5a:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800dd5c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800dd5e:	4b56      	ldr	r3, [pc, #344]	; (800deb8 <UART_RxISR_8BIT_FIFOEN+0x2f0>)
 800dd60:	4013      	ands	r3, r2
 800dd62:	67fb      	str	r3, [r7, #124]	; 0x7c
 800dd64:	687b      	ldr	r3, [r7, #4]
 800dd66:	681b      	ldr	r3, [r3, #0]
 800dd68:	3308      	adds	r3, #8
 800dd6a:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800dd6c:	657a      	str	r2, [r7, #84]	; 0x54
 800dd6e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dd70:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800dd72:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800dd74:	e841 2300 	strex	r3, r2, [r1]
 800dd78:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800dd7a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dd7c:	2b00      	cmp	r3, #0
 800dd7e:	d1e5      	bne.n	800dd4c <UART_RxISR_8BIT_FIFOEN+0x184>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800dd80:	687b      	ldr	r3, [r7, #4]
 800dd82:	2220      	movs	r2, #32
 800dd84:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800dd88:	687b      	ldr	r3, [r7, #4]
 800dd8a:	2200      	movs	r2, #0
 800dd8c:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800dd8e:	687b      	ldr	r3, [r7, #4]
 800dd90:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dd92:	2b01      	cmp	r3, #1
 800dd94:	d12e      	bne.n	800ddf4 <UART_RxISR_8BIT_FIFOEN+0x22c>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800dd96:	687b      	ldr	r3, [r7, #4]
 800dd98:	2200      	movs	r2, #0
 800dd9a:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800dd9c:	687b      	ldr	r3, [r7, #4]
 800dd9e:	681b      	ldr	r3, [r3, #0]
 800dda0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dda2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dda4:	e853 3f00 	ldrex	r3, [r3]
 800dda8:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800ddaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ddac:	f023 0310 	bic.w	r3, r3, #16
 800ddb0:	67bb      	str	r3, [r7, #120]	; 0x78
 800ddb2:	687b      	ldr	r3, [r7, #4]
 800ddb4:	681b      	ldr	r3, [r3, #0]
 800ddb6:	461a      	mov	r2, r3
 800ddb8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ddba:	643b      	str	r3, [r7, #64]	; 0x40
 800ddbc:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ddbe:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800ddc0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800ddc2:	e841 2300 	strex	r3, r2, [r1]
 800ddc6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800ddc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ddca:	2b00      	cmp	r3, #0
 800ddcc:	d1e6      	bne.n	800dd9c <UART_RxISR_8BIT_FIFOEN+0x1d4>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800ddce:	687b      	ldr	r3, [r7, #4]
 800ddd0:	681b      	ldr	r3, [r3, #0]
 800ddd2:	69db      	ldr	r3, [r3, #28]
 800ddd4:	f003 0310 	and.w	r3, r3, #16
 800ddd8:	2b10      	cmp	r3, #16
 800ddda:	d103      	bne.n	800dde4 <UART_RxISR_8BIT_FIFOEN+0x21c>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800dddc:	687b      	ldr	r3, [r7, #4]
 800ddde:	681b      	ldr	r3, [r3, #0]
 800dde0:	2210      	movs	r2, #16
 800dde2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800dde4:	687b      	ldr	r3, [r7, #4]
 800dde6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800ddea:	4619      	mov	r1, r3
 800ddec:	6878      	ldr	r0, [r7, #4]
 800ddee:	f7fe fc8f 	bl	800c710 <HAL_UARTEx_RxEventCallback>
 800ddf2:	e002      	b.n	800ddfa <UART_RxISR_8BIT_FIFOEN+0x232>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800ddf4:	6878      	ldr	r0, [r7, #4]
 800ddf6:	f7f4 fdcd 	bl	8002994 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800ddfa:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800ddfe:	2b00      	cmp	r3, #0
 800de00:	d006      	beq.n	800de10 <UART_RxISR_8BIT_FIFOEN+0x248>
 800de02:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800de06:	f003 0320 	and.w	r3, r3, #32
 800de0a:	2b00      	cmp	r3, #0
 800de0c:	f47f af00 	bne.w	800dc10 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800de10:	687b      	ldr	r3, [r7, #4]
 800de12:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800de16:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800de1a:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 800de1e:	2b00      	cmp	r3, #0
 800de20:	d045      	beq.n	800deae <UART_RxISR_8BIT_FIFOEN+0x2e6>
 800de22:	687b      	ldr	r3, [r7, #4]
 800de24:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800de28:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800de2c:	429a      	cmp	r2, r3
 800de2e:	d23e      	bcs.n	800deae <UART_RxISR_8BIT_FIFOEN+0x2e6>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800de30:	687b      	ldr	r3, [r7, #4]
 800de32:	681b      	ldr	r3, [r3, #0]
 800de34:	3308      	adds	r3, #8
 800de36:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800de38:	6a3b      	ldr	r3, [r7, #32]
 800de3a:	e853 3f00 	ldrex	r3, [r3]
 800de3e:	61fb      	str	r3, [r7, #28]
   return(result);
 800de40:	69fb      	ldr	r3, [r7, #28]
 800de42:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800de46:	673b      	str	r3, [r7, #112]	; 0x70
 800de48:	687b      	ldr	r3, [r7, #4]
 800de4a:	681b      	ldr	r3, [r3, #0]
 800de4c:	3308      	adds	r3, #8
 800de4e:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800de50:	62fa      	str	r2, [r7, #44]	; 0x2c
 800de52:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800de54:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800de56:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800de58:	e841 2300 	strex	r3, r2, [r1]
 800de5c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800de5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de60:	2b00      	cmp	r3, #0
 800de62:	d1e5      	bne.n	800de30 <UART_RxISR_8BIT_FIFOEN+0x268>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800de64:	687b      	ldr	r3, [r7, #4]
 800de66:	4a15      	ldr	r2, [pc, #84]	; (800debc <UART_RxISR_8BIT_FIFOEN+0x2f4>)
 800de68:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800de6a:	687b      	ldr	r3, [r7, #4]
 800de6c:	681b      	ldr	r3, [r3, #0]
 800de6e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800de70:	68fb      	ldr	r3, [r7, #12]
 800de72:	e853 3f00 	ldrex	r3, [r3]
 800de76:	60bb      	str	r3, [r7, #8]
   return(result);
 800de78:	68bb      	ldr	r3, [r7, #8]
 800de7a:	f043 0320 	orr.w	r3, r3, #32
 800de7e:	66fb      	str	r3, [r7, #108]	; 0x6c
 800de80:	687b      	ldr	r3, [r7, #4]
 800de82:	681b      	ldr	r3, [r3, #0]
 800de84:	461a      	mov	r2, r3
 800de86:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800de88:	61bb      	str	r3, [r7, #24]
 800de8a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800de8c:	6979      	ldr	r1, [r7, #20]
 800de8e:	69ba      	ldr	r2, [r7, #24]
 800de90:	e841 2300 	strex	r3, r2, [r1]
 800de94:	613b      	str	r3, [r7, #16]
   return(result);
 800de96:	693b      	ldr	r3, [r7, #16]
 800de98:	2b00      	cmp	r3, #0
 800de9a:	d1e6      	bne.n	800de6a <UART_RxISR_8BIT_FIFOEN+0x2a2>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800de9c:	e007      	b.n	800deae <UART_RxISR_8BIT_FIFOEN+0x2e6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800de9e:	687b      	ldr	r3, [r7, #4]
 800dea0:	681b      	ldr	r3, [r3, #0]
 800dea2:	699a      	ldr	r2, [r3, #24]
 800dea4:	687b      	ldr	r3, [r7, #4]
 800dea6:	681b      	ldr	r3, [r3, #0]
 800dea8:	f042 0208 	orr.w	r2, r2, #8
 800deac:	619a      	str	r2, [r3, #24]
}
 800deae:	bf00      	nop
 800deb0:	3798      	adds	r7, #152	; 0x98
 800deb2:	46bd      	mov	sp, r7
 800deb4:	bd80      	pop	{r7, pc}
 800deb6:	bf00      	nop
 800deb8:	effffffe 	.word	0xeffffffe
 800debc:	0800d907 	.word	0x0800d907

0800dec0 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800dec0:	b580      	push	{r7, lr}
 800dec2:	b0a8      	sub	sp, #160	; 0xa0
 800dec4:	af00      	add	r7, sp, #0
 800dec6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800dec8:	687b      	ldr	r3, [r7, #4]
 800deca:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800dece:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800ded2:	687b      	ldr	r3, [r7, #4]
 800ded4:	681b      	ldr	r3, [r3, #0]
 800ded6:	69db      	ldr	r3, [r3, #28]
 800ded8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800dedc:	687b      	ldr	r3, [r7, #4]
 800dede:	681b      	ldr	r3, [r3, #0]
 800dee0:	681b      	ldr	r3, [r3, #0]
 800dee2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800dee6:	687b      	ldr	r3, [r7, #4]
 800dee8:	681b      	ldr	r3, [r3, #0]
 800deea:	689b      	ldr	r3, [r3, #8]
 800deec:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800def0:	687b      	ldr	r3, [r7, #4]
 800def2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800def6:	2b22      	cmp	r3, #34	; 0x22
 800def8:	f040 8151 	bne.w	800e19e <UART_RxISR_16BIT_FIFOEN+0x2de>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800defc:	687b      	ldr	r3, [r7, #4]
 800defe:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800df02:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800df06:	e0f8      	b.n	800e0fa <UART_RxISR_16BIT_FIFOEN+0x23a>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800df08:	687b      	ldr	r3, [r7, #4]
 800df0a:	681b      	ldr	r3, [r3, #0]
 800df0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800df0e:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800df12:	687b      	ldr	r3, [r7, #4]
 800df14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800df16:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      *tmp = (uint16_t)(uhdata & uhMask);
 800df1a:	f8b7 208c 	ldrh.w	r2, [r7, #140]	; 0x8c
 800df1e:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 800df22:	4013      	ands	r3, r2
 800df24:	b29a      	uxth	r2, r3
 800df26:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800df2a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800df2c:	687b      	ldr	r3, [r7, #4]
 800df2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800df30:	1c9a      	adds	r2, r3, #2
 800df32:	687b      	ldr	r3, [r7, #4]
 800df34:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800df36:	687b      	ldr	r3, [r7, #4]
 800df38:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800df3c:	b29b      	uxth	r3, r3
 800df3e:	3b01      	subs	r3, #1
 800df40:	b29a      	uxth	r2, r3
 800df42:	687b      	ldr	r3, [r7, #4]
 800df44:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800df48:	687b      	ldr	r3, [r7, #4]
 800df4a:	681b      	ldr	r3, [r3, #0]
 800df4c:	69db      	ldr	r3, [r3, #28]
 800df4e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800df52:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800df56:	f003 0307 	and.w	r3, r3, #7
 800df5a:	2b00      	cmp	r3, #0
 800df5c:	d053      	beq.n	800e006 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800df5e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800df62:	f003 0301 	and.w	r3, r3, #1
 800df66:	2b00      	cmp	r3, #0
 800df68:	d011      	beq.n	800df8e <UART_RxISR_16BIT_FIFOEN+0xce>
 800df6a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800df6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800df72:	2b00      	cmp	r3, #0
 800df74:	d00b      	beq.n	800df8e <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800df76:	687b      	ldr	r3, [r7, #4]
 800df78:	681b      	ldr	r3, [r3, #0]
 800df7a:	2201      	movs	r2, #1
 800df7c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800df7e:	687b      	ldr	r3, [r7, #4]
 800df80:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800df84:	f043 0201 	orr.w	r2, r3, #1
 800df88:	687b      	ldr	r3, [r7, #4]
 800df8a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800df8e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800df92:	f003 0302 	and.w	r3, r3, #2
 800df96:	2b00      	cmp	r3, #0
 800df98:	d011      	beq.n	800dfbe <UART_RxISR_16BIT_FIFOEN+0xfe>
 800df9a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800df9e:	f003 0301 	and.w	r3, r3, #1
 800dfa2:	2b00      	cmp	r3, #0
 800dfa4:	d00b      	beq.n	800dfbe <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800dfa6:	687b      	ldr	r3, [r7, #4]
 800dfa8:	681b      	ldr	r3, [r3, #0]
 800dfaa:	2202      	movs	r2, #2
 800dfac:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800dfae:	687b      	ldr	r3, [r7, #4]
 800dfb0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800dfb4:	f043 0204 	orr.w	r2, r3, #4
 800dfb8:	687b      	ldr	r3, [r7, #4]
 800dfba:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800dfbe:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800dfc2:	f003 0304 	and.w	r3, r3, #4
 800dfc6:	2b00      	cmp	r3, #0
 800dfc8:	d011      	beq.n	800dfee <UART_RxISR_16BIT_FIFOEN+0x12e>
 800dfca:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800dfce:	f003 0301 	and.w	r3, r3, #1
 800dfd2:	2b00      	cmp	r3, #0
 800dfd4:	d00b      	beq.n	800dfee <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800dfd6:	687b      	ldr	r3, [r7, #4]
 800dfd8:	681b      	ldr	r3, [r3, #0]
 800dfda:	2204      	movs	r2, #4
 800dfdc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800dfde:	687b      	ldr	r3, [r7, #4]
 800dfe0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800dfe4:	f043 0202 	orr.w	r2, r3, #2
 800dfe8:	687b      	ldr	r3, [r7, #4]
 800dfea:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800dfee:	687b      	ldr	r3, [r7, #4]
 800dff0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800dff4:	2b00      	cmp	r3, #0
 800dff6:	d006      	beq.n	800e006 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800dff8:	6878      	ldr	r0, [r7, #4]
 800dffa:	f7fe fb7f 	bl	800c6fc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800dffe:	687b      	ldr	r3, [r7, #4]
 800e000:	2200      	movs	r2, #0
 800e002:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 800e006:	687b      	ldr	r3, [r7, #4]
 800e008:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800e00c:	b29b      	uxth	r3, r3
 800e00e:	2b00      	cmp	r3, #0
 800e010:	d173      	bne.n	800e0fa <UART_RxISR_16BIT_FIFOEN+0x23a>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800e012:	687b      	ldr	r3, [r7, #4]
 800e014:	681b      	ldr	r3, [r3, #0]
 800e016:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e018:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e01a:	e853 3f00 	ldrex	r3, [r3]
 800e01e:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800e020:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e022:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800e026:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800e02a:	687b      	ldr	r3, [r7, #4]
 800e02c:	681b      	ldr	r3, [r3, #0]
 800e02e:	461a      	mov	r2, r3
 800e030:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800e034:	66fb      	str	r3, [r7, #108]	; 0x6c
 800e036:	66ba      	str	r2, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e038:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800e03a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800e03c:	e841 2300 	strex	r3, r2, [r1]
 800e040:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800e042:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e044:	2b00      	cmp	r3, #0
 800e046:	d1e4      	bne.n	800e012 <UART_RxISR_16BIT_FIFOEN+0x152>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800e048:	687b      	ldr	r3, [r7, #4]
 800e04a:	681b      	ldr	r3, [r3, #0]
 800e04c:	3308      	adds	r3, #8
 800e04e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e050:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e052:	e853 3f00 	ldrex	r3, [r3]
 800e056:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800e058:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e05a:	4b57      	ldr	r3, [pc, #348]	; (800e1b8 <UART_RxISR_16BIT_FIFOEN+0x2f8>)
 800e05c:	4013      	ands	r3, r2
 800e05e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800e062:	687b      	ldr	r3, [r7, #4]
 800e064:	681b      	ldr	r3, [r3, #0]
 800e066:	3308      	adds	r3, #8
 800e068:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800e06c:	65ba      	str	r2, [r7, #88]	; 0x58
 800e06e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e070:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800e072:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800e074:	e841 2300 	strex	r3, r2, [r1]
 800e078:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800e07a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e07c:	2b00      	cmp	r3, #0
 800e07e:	d1e3      	bne.n	800e048 <UART_RxISR_16BIT_FIFOEN+0x188>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800e080:	687b      	ldr	r3, [r7, #4]
 800e082:	2220      	movs	r2, #32
 800e084:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800e088:	687b      	ldr	r3, [r7, #4]
 800e08a:	2200      	movs	r2, #0
 800e08c:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e08e:	687b      	ldr	r3, [r7, #4]
 800e090:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e092:	2b01      	cmp	r3, #1
 800e094:	d12e      	bne.n	800e0f4 <UART_RxISR_16BIT_FIFOEN+0x234>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e096:	687b      	ldr	r3, [r7, #4]
 800e098:	2200      	movs	r2, #0
 800e09a:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e09c:	687b      	ldr	r3, [r7, #4]
 800e09e:	681b      	ldr	r3, [r3, #0]
 800e0a0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e0a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e0a4:	e853 3f00 	ldrex	r3, [r3]
 800e0a8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800e0aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e0ac:	f023 0310 	bic.w	r3, r3, #16
 800e0b0:	67fb      	str	r3, [r7, #124]	; 0x7c
 800e0b2:	687b      	ldr	r3, [r7, #4]
 800e0b4:	681b      	ldr	r3, [r3, #0]
 800e0b6:	461a      	mov	r2, r3
 800e0b8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800e0ba:	647b      	str	r3, [r7, #68]	; 0x44
 800e0bc:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e0be:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800e0c0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e0c2:	e841 2300 	strex	r3, r2, [r1]
 800e0c6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800e0c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e0ca:	2b00      	cmp	r3, #0
 800e0cc:	d1e6      	bne.n	800e09c <UART_RxISR_16BIT_FIFOEN+0x1dc>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800e0ce:	687b      	ldr	r3, [r7, #4]
 800e0d0:	681b      	ldr	r3, [r3, #0]
 800e0d2:	69db      	ldr	r3, [r3, #28]
 800e0d4:	f003 0310 	and.w	r3, r3, #16
 800e0d8:	2b10      	cmp	r3, #16
 800e0da:	d103      	bne.n	800e0e4 <UART_RxISR_16BIT_FIFOEN+0x224>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800e0dc:	687b      	ldr	r3, [r7, #4]
 800e0de:	681b      	ldr	r3, [r3, #0]
 800e0e0:	2210      	movs	r2, #16
 800e0e2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800e0e4:	687b      	ldr	r3, [r7, #4]
 800e0e6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800e0ea:	4619      	mov	r1, r3
 800e0ec:	6878      	ldr	r0, [r7, #4]
 800e0ee:	f7fe fb0f 	bl	800c710 <HAL_UARTEx_RxEventCallback>
 800e0f2:	e002      	b.n	800e0fa <UART_RxISR_16BIT_FIFOEN+0x23a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800e0f4:	6878      	ldr	r0, [r7, #4]
 800e0f6:	f7f4 fc4d 	bl	8002994 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800e0fa:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 800e0fe:	2b00      	cmp	r3, #0
 800e100:	d006      	beq.n	800e110 <UART_RxISR_16BIT_FIFOEN+0x250>
 800e102:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800e106:	f003 0320 	and.w	r3, r3, #32
 800e10a:	2b00      	cmp	r3, #0
 800e10c:	f47f aefc 	bne.w	800df08 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800e110:	687b      	ldr	r3, [r7, #4]
 800e112:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800e116:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800e11a:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 800e11e:	2b00      	cmp	r3, #0
 800e120:	d045      	beq.n	800e1ae <UART_RxISR_16BIT_FIFOEN+0x2ee>
 800e122:	687b      	ldr	r3, [r7, #4]
 800e124:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800e128:	f8b7 207a 	ldrh.w	r2, [r7, #122]	; 0x7a
 800e12c:	429a      	cmp	r2, r3
 800e12e:	d23e      	bcs.n	800e1ae <UART_RxISR_16BIT_FIFOEN+0x2ee>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800e130:	687b      	ldr	r3, [r7, #4]
 800e132:	681b      	ldr	r3, [r3, #0]
 800e134:	3308      	adds	r3, #8
 800e136:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e138:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e13a:	e853 3f00 	ldrex	r3, [r3]
 800e13e:	623b      	str	r3, [r7, #32]
   return(result);
 800e140:	6a3b      	ldr	r3, [r7, #32]
 800e142:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800e146:	677b      	str	r3, [r7, #116]	; 0x74
 800e148:	687b      	ldr	r3, [r7, #4]
 800e14a:	681b      	ldr	r3, [r3, #0]
 800e14c:	3308      	adds	r3, #8
 800e14e:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800e150:	633a      	str	r2, [r7, #48]	; 0x30
 800e152:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e154:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800e156:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e158:	e841 2300 	strex	r3, r2, [r1]
 800e15c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800e15e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e160:	2b00      	cmp	r3, #0
 800e162:	d1e5      	bne.n	800e130 <UART_RxISR_16BIT_FIFOEN+0x270>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800e164:	687b      	ldr	r3, [r7, #4]
 800e166:	4a15      	ldr	r2, [pc, #84]	; (800e1bc <UART_RxISR_16BIT_FIFOEN+0x2fc>)
 800e168:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800e16a:	687b      	ldr	r3, [r7, #4]
 800e16c:	681b      	ldr	r3, [r3, #0]
 800e16e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e170:	693b      	ldr	r3, [r7, #16]
 800e172:	e853 3f00 	ldrex	r3, [r3]
 800e176:	60fb      	str	r3, [r7, #12]
   return(result);
 800e178:	68fb      	ldr	r3, [r7, #12]
 800e17a:	f043 0320 	orr.w	r3, r3, #32
 800e17e:	673b      	str	r3, [r7, #112]	; 0x70
 800e180:	687b      	ldr	r3, [r7, #4]
 800e182:	681b      	ldr	r3, [r3, #0]
 800e184:	461a      	mov	r2, r3
 800e186:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800e188:	61fb      	str	r3, [r7, #28]
 800e18a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e18c:	69b9      	ldr	r1, [r7, #24]
 800e18e:	69fa      	ldr	r2, [r7, #28]
 800e190:	e841 2300 	strex	r3, r2, [r1]
 800e194:	617b      	str	r3, [r7, #20]
   return(result);
 800e196:	697b      	ldr	r3, [r7, #20]
 800e198:	2b00      	cmp	r3, #0
 800e19a:	d1e6      	bne.n	800e16a <UART_RxISR_16BIT_FIFOEN+0x2aa>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800e19c:	e007      	b.n	800e1ae <UART_RxISR_16BIT_FIFOEN+0x2ee>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800e19e:	687b      	ldr	r3, [r7, #4]
 800e1a0:	681b      	ldr	r3, [r3, #0]
 800e1a2:	699a      	ldr	r2, [r3, #24]
 800e1a4:	687b      	ldr	r3, [r7, #4]
 800e1a6:	681b      	ldr	r3, [r3, #0]
 800e1a8:	f042 0208 	orr.w	r2, r2, #8
 800e1ac:	619a      	str	r2, [r3, #24]
}
 800e1ae:	bf00      	nop
 800e1b0:	37a0      	adds	r7, #160	; 0xa0
 800e1b2:	46bd      	mov	sp, r7
 800e1b4:	bd80      	pop	{r7, pc}
 800e1b6:	bf00      	nop
 800e1b8:	effffffe 	.word	0xeffffffe
 800e1bc:	0800da67 	.word	0x0800da67

0800e1c0 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800e1c0:	b480      	push	{r7}
 800e1c2:	b083      	sub	sp, #12
 800e1c4:	af00      	add	r7, sp, #0
 800e1c6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800e1c8:	bf00      	nop
 800e1ca:	370c      	adds	r7, #12
 800e1cc:	46bd      	mov	sp, r7
 800e1ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1d2:	4770      	bx	lr

0800e1d4 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800e1d4:	b480      	push	{r7}
 800e1d6:	b083      	sub	sp, #12
 800e1d8:	af00      	add	r7, sp, #0
 800e1da:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800e1dc:	bf00      	nop
 800e1de:	370c      	adds	r7, #12
 800e1e0:	46bd      	mov	sp, r7
 800e1e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1e6:	4770      	bx	lr

0800e1e8 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800e1e8:	b480      	push	{r7}
 800e1ea:	b083      	sub	sp, #12
 800e1ec:	af00      	add	r7, sp, #0
 800e1ee:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800e1f0:	bf00      	nop
 800e1f2:	370c      	adds	r7, #12
 800e1f4:	46bd      	mov	sp, r7
 800e1f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1fa:	4770      	bx	lr

0800e1fc <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800e1fc:	b480      	push	{r7}
 800e1fe:	b085      	sub	sp, #20
 800e200:	af00      	add	r7, sp, #0
 800e202:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800e204:	687b      	ldr	r3, [r7, #4]
 800e206:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800e20a:	2b01      	cmp	r3, #1
 800e20c:	d101      	bne.n	800e212 <HAL_UARTEx_DisableFifoMode+0x16>
 800e20e:	2302      	movs	r3, #2
 800e210:	e027      	b.n	800e262 <HAL_UARTEx_DisableFifoMode+0x66>
 800e212:	687b      	ldr	r3, [r7, #4]
 800e214:	2201      	movs	r2, #1
 800e216:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800e21a:	687b      	ldr	r3, [r7, #4]
 800e21c:	2224      	movs	r2, #36	; 0x24
 800e21e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800e222:	687b      	ldr	r3, [r7, #4]
 800e224:	681b      	ldr	r3, [r3, #0]
 800e226:	681b      	ldr	r3, [r3, #0]
 800e228:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800e22a:	687b      	ldr	r3, [r7, #4]
 800e22c:	681b      	ldr	r3, [r3, #0]
 800e22e:	681a      	ldr	r2, [r3, #0]
 800e230:	687b      	ldr	r3, [r7, #4]
 800e232:	681b      	ldr	r3, [r3, #0]
 800e234:	f022 0201 	bic.w	r2, r2, #1
 800e238:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800e23a:	68fb      	ldr	r3, [r7, #12]
 800e23c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800e240:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800e242:	687b      	ldr	r3, [r7, #4]
 800e244:	2200      	movs	r2, #0
 800e246:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800e248:	687b      	ldr	r3, [r7, #4]
 800e24a:	681b      	ldr	r3, [r3, #0]
 800e24c:	68fa      	ldr	r2, [r7, #12]
 800e24e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800e250:	687b      	ldr	r3, [r7, #4]
 800e252:	2220      	movs	r2, #32
 800e254:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800e258:	687b      	ldr	r3, [r7, #4]
 800e25a:	2200      	movs	r2, #0
 800e25c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800e260:	2300      	movs	r3, #0
}
 800e262:	4618      	mov	r0, r3
 800e264:	3714      	adds	r7, #20
 800e266:	46bd      	mov	sp, r7
 800e268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e26c:	4770      	bx	lr

0800e26e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800e26e:	b580      	push	{r7, lr}
 800e270:	b084      	sub	sp, #16
 800e272:	af00      	add	r7, sp, #0
 800e274:	6078      	str	r0, [r7, #4]
 800e276:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800e278:	687b      	ldr	r3, [r7, #4]
 800e27a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800e27e:	2b01      	cmp	r3, #1
 800e280:	d101      	bne.n	800e286 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800e282:	2302      	movs	r3, #2
 800e284:	e02d      	b.n	800e2e2 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800e286:	687b      	ldr	r3, [r7, #4]
 800e288:	2201      	movs	r2, #1
 800e28a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800e28e:	687b      	ldr	r3, [r7, #4]
 800e290:	2224      	movs	r2, #36	; 0x24
 800e292:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800e296:	687b      	ldr	r3, [r7, #4]
 800e298:	681b      	ldr	r3, [r3, #0]
 800e29a:	681b      	ldr	r3, [r3, #0]
 800e29c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800e29e:	687b      	ldr	r3, [r7, #4]
 800e2a0:	681b      	ldr	r3, [r3, #0]
 800e2a2:	681a      	ldr	r2, [r3, #0]
 800e2a4:	687b      	ldr	r3, [r7, #4]
 800e2a6:	681b      	ldr	r3, [r3, #0]
 800e2a8:	f022 0201 	bic.w	r2, r2, #1
 800e2ac:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800e2ae:	687b      	ldr	r3, [r7, #4]
 800e2b0:	681b      	ldr	r3, [r3, #0]
 800e2b2:	689b      	ldr	r3, [r3, #8]
 800e2b4:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800e2b8:	687b      	ldr	r3, [r7, #4]
 800e2ba:	681b      	ldr	r3, [r3, #0]
 800e2bc:	683a      	ldr	r2, [r7, #0]
 800e2be:	430a      	orrs	r2, r1
 800e2c0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800e2c2:	6878      	ldr	r0, [r7, #4]
 800e2c4:	f000 f850 	bl	800e368 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800e2c8:	687b      	ldr	r3, [r7, #4]
 800e2ca:	681b      	ldr	r3, [r3, #0]
 800e2cc:	68fa      	ldr	r2, [r7, #12]
 800e2ce:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800e2d0:	687b      	ldr	r3, [r7, #4]
 800e2d2:	2220      	movs	r2, #32
 800e2d4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800e2d8:	687b      	ldr	r3, [r7, #4]
 800e2da:	2200      	movs	r2, #0
 800e2dc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800e2e0:	2300      	movs	r3, #0
}
 800e2e2:	4618      	mov	r0, r3
 800e2e4:	3710      	adds	r7, #16
 800e2e6:	46bd      	mov	sp, r7
 800e2e8:	bd80      	pop	{r7, pc}

0800e2ea <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800e2ea:	b580      	push	{r7, lr}
 800e2ec:	b084      	sub	sp, #16
 800e2ee:	af00      	add	r7, sp, #0
 800e2f0:	6078      	str	r0, [r7, #4]
 800e2f2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800e2f4:	687b      	ldr	r3, [r7, #4]
 800e2f6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800e2fa:	2b01      	cmp	r3, #1
 800e2fc:	d101      	bne.n	800e302 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800e2fe:	2302      	movs	r3, #2
 800e300:	e02d      	b.n	800e35e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800e302:	687b      	ldr	r3, [r7, #4]
 800e304:	2201      	movs	r2, #1
 800e306:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800e30a:	687b      	ldr	r3, [r7, #4]
 800e30c:	2224      	movs	r2, #36	; 0x24
 800e30e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800e312:	687b      	ldr	r3, [r7, #4]
 800e314:	681b      	ldr	r3, [r3, #0]
 800e316:	681b      	ldr	r3, [r3, #0]
 800e318:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800e31a:	687b      	ldr	r3, [r7, #4]
 800e31c:	681b      	ldr	r3, [r3, #0]
 800e31e:	681a      	ldr	r2, [r3, #0]
 800e320:	687b      	ldr	r3, [r7, #4]
 800e322:	681b      	ldr	r3, [r3, #0]
 800e324:	f022 0201 	bic.w	r2, r2, #1
 800e328:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800e32a:	687b      	ldr	r3, [r7, #4]
 800e32c:	681b      	ldr	r3, [r3, #0]
 800e32e:	689b      	ldr	r3, [r3, #8]
 800e330:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800e334:	687b      	ldr	r3, [r7, #4]
 800e336:	681b      	ldr	r3, [r3, #0]
 800e338:	683a      	ldr	r2, [r7, #0]
 800e33a:	430a      	orrs	r2, r1
 800e33c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800e33e:	6878      	ldr	r0, [r7, #4]
 800e340:	f000 f812 	bl	800e368 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800e344:	687b      	ldr	r3, [r7, #4]
 800e346:	681b      	ldr	r3, [r3, #0]
 800e348:	68fa      	ldr	r2, [r7, #12]
 800e34a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800e34c:	687b      	ldr	r3, [r7, #4]
 800e34e:	2220      	movs	r2, #32
 800e350:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800e354:	687b      	ldr	r3, [r7, #4]
 800e356:	2200      	movs	r2, #0
 800e358:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800e35c:	2300      	movs	r3, #0
}
 800e35e:	4618      	mov	r0, r3
 800e360:	3710      	adds	r7, #16
 800e362:	46bd      	mov	sp, r7
 800e364:	bd80      	pop	{r7, pc}
	...

0800e368 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800e368:	b480      	push	{r7}
 800e36a:	b085      	sub	sp, #20
 800e36c:	af00      	add	r7, sp, #0
 800e36e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800e370:	687b      	ldr	r3, [r7, #4]
 800e372:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e374:	2b00      	cmp	r3, #0
 800e376:	d108      	bne.n	800e38a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800e378:	687b      	ldr	r3, [r7, #4]
 800e37a:	2201      	movs	r2, #1
 800e37c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800e380:	687b      	ldr	r3, [r7, #4]
 800e382:	2201      	movs	r2, #1
 800e384:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800e388:	e031      	b.n	800e3ee <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800e38a:	2310      	movs	r3, #16
 800e38c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800e38e:	2310      	movs	r3, #16
 800e390:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800e392:	687b      	ldr	r3, [r7, #4]
 800e394:	681b      	ldr	r3, [r3, #0]
 800e396:	689b      	ldr	r3, [r3, #8]
 800e398:	0e5b      	lsrs	r3, r3, #25
 800e39a:	b2db      	uxtb	r3, r3
 800e39c:	f003 0307 	and.w	r3, r3, #7
 800e3a0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800e3a2:	687b      	ldr	r3, [r7, #4]
 800e3a4:	681b      	ldr	r3, [r3, #0]
 800e3a6:	689b      	ldr	r3, [r3, #8]
 800e3a8:	0f5b      	lsrs	r3, r3, #29
 800e3aa:	b2db      	uxtb	r3, r3
 800e3ac:	f003 0307 	and.w	r3, r3, #7
 800e3b0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800e3b2:	7bbb      	ldrb	r3, [r7, #14]
 800e3b4:	7b3a      	ldrb	r2, [r7, #12]
 800e3b6:	4911      	ldr	r1, [pc, #68]	; (800e3fc <UARTEx_SetNbDataToProcess+0x94>)
 800e3b8:	5c8a      	ldrb	r2, [r1, r2]
 800e3ba:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800e3be:	7b3a      	ldrb	r2, [r7, #12]
 800e3c0:	490f      	ldr	r1, [pc, #60]	; (800e400 <UARTEx_SetNbDataToProcess+0x98>)
 800e3c2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800e3c4:	fb93 f3f2 	sdiv	r3, r3, r2
 800e3c8:	b29a      	uxth	r2, r3
 800e3ca:	687b      	ldr	r3, [r7, #4]
 800e3cc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800e3d0:	7bfb      	ldrb	r3, [r7, #15]
 800e3d2:	7b7a      	ldrb	r2, [r7, #13]
 800e3d4:	4909      	ldr	r1, [pc, #36]	; (800e3fc <UARTEx_SetNbDataToProcess+0x94>)
 800e3d6:	5c8a      	ldrb	r2, [r1, r2]
 800e3d8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800e3dc:	7b7a      	ldrb	r2, [r7, #13]
 800e3de:	4908      	ldr	r1, [pc, #32]	; (800e400 <UARTEx_SetNbDataToProcess+0x98>)
 800e3e0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800e3e2:	fb93 f3f2 	sdiv	r3, r3, r2
 800e3e6:	b29a      	uxth	r2, r3
 800e3e8:	687b      	ldr	r3, [r7, #4]
 800e3ea:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800e3ee:	bf00      	nop
 800e3f0:	3714      	adds	r7, #20
 800e3f2:	46bd      	mov	sp, r7
 800e3f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3f8:	4770      	bx	lr
 800e3fa:	bf00      	nop
 800e3fc:	08011a90 	.word	0x08011a90
 800e400:	08011a98 	.word	0x08011a98

0800e404 <__errno>:
 800e404:	4b01      	ldr	r3, [pc, #4]	; (800e40c <__errno+0x8>)
 800e406:	6818      	ldr	r0, [r3, #0]
 800e408:	4770      	bx	lr
 800e40a:	bf00      	nop
 800e40c:	24000084 	.word	0x24000084

0800e410 <__libc_init_array>:
 800e410:	b570      	push	{r4, r5, r6, lr}
 800e412:	4d0d      	ldr	r5, [pc, #52]	; (800e448 <__libc_init_array+0x38>)
 800e414:	4c0d      	ldr	r4, [pc, #52]	; (800e44c <__libc_init_array+0x3c>)
 800e416:	1b64      	subs	r4, r4, r5
 800e418:	10a4      	asrs	r4, r4, #2
 800e41a:	2600      	movs	r6, #0
 800e41c:	42a6      	cmp	r6, r4
 800e41e:	d109      	bne.n	800e434 <__libc_init_array+0x24>
 800e420:	4d0b      	ldr	r5, [pc, #44]	; (800e450 <__libc_init_array+0x40>)
 800e422:	4c0c      	ldr	r4, [pc, #48]	; (800e454 <__libc_init_array+0x44>)
 800e424:	f003 faea 	bl	80119fc <_init>
 800e428:	1b64      	subs	r4, r4, r5
 800e42a:	10a4      	asrs	r4, r4, #2
 800e42c:	2600      	movs	r6, #0
 800e42e:	42a6      	cmp	r6, r4
 800e430:	d105      	bne.n	800e43e <__libc_init_array+0x2e>
 800e432:	bd70      	pop	{r4, r5, r6, pc}
 800e434:	f855 3b04 	ldr.w	r3, [r5], #4
 800e438:	4798      	blx	r3
 800e43a:	3601      	adds	r6, #1
 800e43c:	e7ee      	b.n	800e41c <__libc_init_array+0xc>
 800e43e:	f855 3b04 	ldr.w	r3, [r5], #4
 800e442:	4798      	blx	r3
 800e444:	3601      	adds	r6, #1
 800e446:	e7f2      	b.n	800e42e <__libc_init_array+0x1e>
 800e448:	08013790 	.word	0x08013790
 800e44c:	08013790 	.word	0x08013790
 800e450:	08013790 	.word	0x08013790
 800e454:	08013794 	.word	0x08013794

0800e458 <memset>:
 800e458:	4402      	add	r2, r0
 800e45a:	4603      	mov	r3, r0
 800e45c:	4293      	cmp	r3, r2
 800e45e:	d100      	bne.n	800e462 <memset+0xa>
 800e460:	4770      	bx	lr
 800e462:	f803 1b01 	strb.w	r1, [r3], #1
 800e466:	e7f9      	b.n	800e45c <memset+0x4>

0800e468 <sulp>:
 800e468:	b570      	push	{r4, r5, r6, lr}
 800e46a:	4604      	mov	r4, r0
 800e46c:	460d      	mov	r5, r1
 800e46e:	4616      	mov	r6, r2
 800e470:	ec45 4b10 	vmov	d0, r4, r5
 800e474:	f001 fcd8 	bl	800fe28 <__ulp>
 800e478:	b17e      	cbz	r6, 800e49a <sulp+0x32>
 800e47a:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800e47e:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800e482:	2b00      	cmp	r3, #0
 800e484:	dd09      	ble.n	800e49a <sulp+0x32>
 800e486:	051b      	lsls	r3, r3, #20
 800e488:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
 800e48c:	2000      	movs	r0, #0
 800e48e:	f501 1140 	add.w	r1, r1, #3145728	; 0x300000
 800e492:	ec41 0b17 	vmov	d7, r0, r1
 800e496:	ee20 0b07 	vmul.f64	d0, d0, d7
 800e49a:	bd70      	pop	{r4, r5, r6, pc}
 800e49c:	0000      	movs	r0, r0
	...

0800e4a0 <_strtod_l>:
 800e4a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e4a4:	ed2d 8b0e 	vpush	{d8-d14}
 800e4a8:	b097      	sub	sp, #92	; 0x5c
 800e4aa:	461f      	mov	r7, r3
 800e4ac:	2300      	movs	r3, #0
 800e4ae:	9312      	str	r3, [sp, #72]	; 0x48
 800e4b0:	4ba1      	ldr	r3, [pc, #644]	; (800e738 <_strtod_l+0x298>)
 800e4b2:	920d      	str	r2, [sp, #52]	; 0x34
 800e4b4:	681b      	ldr	r3, [r3, #0]
 800e4b6:	9307      	str	r3, [sp, #28]
 800e4b8:	4604      	mov	r4, r0
 800e4ba:	4618      	mov	r0, r3
 800e4bc:	468b      	mov	fp, r1
 800e4be:	f7f1 ff0f 	bl	80002e0 <strlen>
 800e4c2:	f04f 0800 	mov.w	r8, #0
 800e4c6:	4605      	mov	r5, r0
 800e4c8:	f04f 0900 	mov.w	r9, #0
 800e4cc:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
 800e4d0:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800e4d2:	7813      	ldrb	r3, [r2, #0]
 800e4d4:	2b2b      	cmp	r3, #43	; 0x2b
 800e4d6:	d04d      	beq.n	800e574 <_strtod_l+0xd4>
 800e4d8:	d83a      	bhi.n	800e550 <_strtod_l+0xb0>
 800e4da:	2b0d      	cmp	r3, #13
 800e4dc:	d833      	bhi.n	800e546 <_strtod_l+0xa6>
 800e4de:	2b08      	cmp	r3, #8
 800e4e0:	d833      	bhi.n	800e54a <_strtod_l+0xaa>
 800e4e2:	2b00      	cmp	r3, #0
 800e4e4:	d03d      	beq.n	800e562 <_strtod_l+0xc2>
 800e4e6:	2300      	movs	r3, #0
 800e4e8:	9308      	str	r3, [sp, #32]
 800e4ea:	9e11      	ldr	r6, [sp, #68]	; 0x44
 800e4ec:	7833      	ldrb	r3, [r6, #0]
 800e4ee:	2b30      	cmp	r3, #48	; 0x30
 800e4f0:	f040 80b0 	bne.w	800e654 <_strtod_l+0x1b4>
 800e4f4:	7873      	ldrb	r3, [r6, #1]
 800e4f6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800e4fa:	2b58      	cmp	r3, #88	; 0x58
 800e4fc:	d167      	bne.n	800e5ce <_strtod_l+0x12e>
 800e4fe:	9b08      	ldr	r3, [sp, #32]
 800e500:	9301      	str	r3, [sp, #4]
 800e502:	ab12      	add	r3, sp, #72	; 0x48
 800e504:	9702      	str	r7, [sp, #8]
 800e506:	9300      	str	r3, [sp, #0]
 800e508:	4a8c      	ldr	r2, [pc, #560]	; (800e73c <_strtod_l+0x29c>)
 800e50a:	ab13      	add	r3, sp, #76	; 0x4c
 800e50c:	a911      	add	r1, sp, #68	; 0x44
 800e50e:	4620      	mov	r0, r4
 800e510:	f000 fdf0 	bl	800f0f4 <__gethex>
 800e514:	f010 0507 	ands.w	r5, r0, #7
 800e518:	4607      	mov	r7, r0
 800e51a:	d005      	beq.n	800e528 <_strtod_l+0x88>
 800e51c:	2d06      	cmp	r5, #6
 800e51e:	d12b      	bne.n	800e578 <_strtod_l+0xd8>
 800e520:	3601      	adds	r6, #1
 800e522:	2300      	movs	r3, #0
 800e524:	9611      	str	r6, [sp, #68]	; 0x44
 800e526:	9308      	str	r3, [sp, #32]
 800e528:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e52a:	2b00      	cmp	r3, #0
 800e52c:	f040 854e 	bne.w	800efcc <_strtod_l+0xb2c>
 800e530:	9b08      	ldr	r3, [sp, #32]
 800e532:	b1e3      	cbz	r3, 800e56e <_strtod_l+0xce>
 800e534:	ec49 8b17 	vmov	d7, r8, r9
 800e538:	eeb1 0b47 	vneg.f64	d0, d7
 800e53c:	b017      	add	sp, #92	; 0x5c
 800e53e:	ecbd 8b0e 	vpop	{d8-d14}
 800e542:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e546:	2b20      	cmp	r3, #32
 800e548:	d1cd      	bne.n	800e4e6 <_strtod_l+0x46>
 800e54a:	3201      	adds	r2, #1
 800e54c:	9211      	str	r2, [sp, #68]	; 0x44
 800e54e:	e7bf      	b.n	800e4d0 <_strtod_l+0x30>
 800e550:	2b2d      	cmp	r3, #45	; 0x2d
 800e552:	d1c8      	bne.n	800e4e6 <_strtod_l+0x46>
 800e554:	2301      	movs	r3, #1
 800e556:	9308      	str	r3, [sp, #32]
 800e558:	1c53      	adds	r3, r2, #1
 800e55a:	9311      	str	r3, [sp, #68]	; 0x44
 800e55c:	7853      	ldrb	r3, [r2, #1]
 800e55e:	2b00      	cmp	r3, #0
 800e560:	d1c3      	bne.n	800e4ea <_strtod_l+0x4a>
 800e562:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e564:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
 800e568:	2b00      	cmp	r3, #0
 800e56a:	f040 852d 	bne.w	800efc8 <_strtod_l+0xb28>
 800e56e:	ec49 8b10 	vmov	d0, r8, r9
 800e572:	e7e3      	b.n	800e53c <_strtod_l+0x9c>
 800e574:	2300      	movs	r3, #0
 800e576:	e7ee      	b.n	800e556 <_strtod_l+0xb6>
 800e578:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800e57a:	b13a      	cbz	r2, 800e58c <_strtod_l+0xec>
 800e57c:	2135      	movs	r1, #53	; 0x35
 800e57e:	a814      	add	r0, sp, #80	; 0x50
 800e580:	f001 fd5a 	bl	8010038 <__copybits>
 800e584:	9912      	ldr	r1, [sp, #72]	; 0x48
 800e586:	4620      	mov	r0, r4
 800e588:	f001 f91c 	bl	800f7c4 <_Bfree>
 800e58c:	3d01      	subs	r5, #1
 800e58e:	2d04      	cmp	r5, #4
 800e590:	d806      	bhi.n	800e5a0 <_strtod_l+0x100>
 800e592:	e8df f005 	tbb	[pc, r5]
 800e596:	030a      	.short	0x030a
 800e598:	1714      	.short	0x1714
 800e59a:	0a          	.byte	0x0a
 800e59b:	00          	.byte	0x00
 800e59c:	e9dd 8914 	ldrd	r8, r9, [sp, #80]	; 0x50
 800e5a0:	073f      	lsls	r7, r7, #28
 800e5a2:	d5c1      	bpl.n	800e528 <_strtod_l+0x88>
 800e5a4:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 800e5a8:	e7be      	b.n	800e528 <_strtod_l+0x88>
 800e5aa:	e9dd 8314 	ldrd	r8, r3, [sp, #80]	; 0x50
 800e5ae:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800e5b0:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800e5b4:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800e5b8:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 800e5bc:	e7f0      	b.n	800e5a0 <_strtod_l+0x100>
 800e5be:	f8df 9180 	ldr.w	r9, [pc, #384]	; 800e740 <_strtod_l+0x2a0>
 800e5c2:	e7ed      	b.n	800e5a0 <_strtod_l+0x100>
 800e5c4:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 800e5c8:	f04f 38ff 	mov.w	r8, #4294967295
 800e5cc:	e7e8      	b.n	800e5a0 <_strtod_l+0x100>
 800e5ce:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800e5d0:	1c5a      	adds	r2, r3, #1
 800e5d2:	9211      	str	r2, [sp, #68]	; 0x44
 800e5d4:	785b      	ldrb	r3, [r3, #1]
 800e5d6:	2b30      	cmp	r3, #48	; 0x30
 800e5d8:	d0f9      	beq.n	800e5ce <_strtod_l+0x12e>
 800e5da:	2b00      	cmp	r3, #0
 800e5dc:	d0a4      	beq.n	800e528 <_strtod_l+0x88>
 800e5de:	2301      	movs	r3, #1
 800e5e0:	f04f 0a00 	mov.w	sl, #0
 800e5e4:	9304      	str	r3, [sp, #16]
 800e5e6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800e5e8:	930a      	str	r3, [sp, #40]	; 0x28
 800e5ea:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 800e5ee:	f8cd a018 	str.w	sl, [sp, #24]
 800e5f2:	220a      	movs	r2, #10
 800e5f4:	9811      	ldr	r0, [sp, #68]	; 0x44
 800e5f6:	7807      	ldrb	r7, [r0, #0]
 800e5f8:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 800e5fc:	b2d9      	uxtb	r1, r3
 800e5fe:	2909      	cmp	r1, #9
 800e600:	d92a      	bls.n	800e658 <_strtod_l+0x1b8>
 800e602:	9907      	ldr	r1, [sp, #28]
 800e604:	462a      	mov	r2, r5
 800e606:	f001 fe1f 	bl	8010248 <strncmp>
 800e60a:	2800      	cmp	r0, #0
 800e60c:	d033      	beq.n	800e676 <_strtod_l+0x1d6>
 800e60e:	2000      	movs	r0, #0
 800e610:	9b06      	ldr	r3, [sp, #24]
 800e612:	463a      	mov	r2, r7
 800e614:	4601      	mov	r1, r0
 800e616:	4607      	mov	r7, r0
 800e618:	2a65      	cmp	r2, #101	; 0x65
 800e61a:	d001      	beq.n	800e620 <_strtod_l+0x180>
 800e61c:	2a45      	cmp	r2, #69	; 0x45
 800e61e:	d117      	bne.n	800e650 <_strtod_l+0x1b0>
 800e620:	b91b      	cbnz	r3, 800e62a <_strtod_l+0x18a>
 800e622:	9b04      	ldr	r3, [sp, #16]
 800e624:	4303      	orrs	r3, r0
 800e626:	d09c      	beq.n	800e562 <_strtod_l+0xc2>
 800e628:	2300      	movs	r3, #0
 800e62a:	f8dd b044 	ldr.w	fp, [sp, #68]	; 0x44
 800e62e:	f10b 0201 	add.w	r2, fp, #1
 800e632:	9211      	str	r2, [sp, #68]	; 0x44
 800e634:	f89b 2001 	ldrb.w	r2, [fp, #1]
 800e638:	2a2b      	cmp	r2, #43	; 0x2b
 800e63a:	d071      	beq.n	800e720 <_strtod_l+0x280>
 800e63c:	2a2d      	cmp	r2, #45	; 0x2d
 800e63e:	d077      	beq.n	800e730 <_strtod_l+0x290>
 800e640:	f04f 0e00 	mov.w	lr, #0
 800e644:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 800e648:	2d09      	cmp	r5, #9
 800e64a:	d97f      	bls.n	800e74c <_strtod_l+0x2ac>
 800e64c:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
 800e650:	2500      	movs	r5, #0
 800e652:	e09b      	b.n	800e78c <_strtod_l+0x2ec>
 800e654:	2300      	movs	r3, #0
 800e656:	e7c3      	b.n	800e5e0 <_strtod_l+0x140>
 800e658:	9906      	ldr	r1, [sp, #24]
 800e65a:	2908      	cmp	r1, #8
 800e65c:	bfdd      	ittte	le
 800e65e:	9909      	ldrle	r1, [sp, #36]	; 0x24
 800e660:	fb02 3301 	mlale	r3, r2, r1, r3
 800e664:	9309      	strle	r3, [sp, #36]	; 0x24
 800e666:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 800e66a:	9b06      	ldr	r3, [sp, #24]
 800e66c:	3001      	adds	r0, #1
 800e66e:	3301      	adds	r3, #1
 800e670:	9306      	str	r3, [sp, #24]
 800e672:	9011      	str	r0, [sp, #68]	; 0x44
 800e674:	e7be      	b.n	800e5f4 <_strtod_l+0x154>
 800e676:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800e678:	195a      	adds	r2, r3, r5
 800e67a:	9211      	str	r2, [sp, #68]	; 0x44
 800e67c:	5d5a      	ldrb	r2, [r3, r5]
 800e67e:	9b06      	ldr	r3, [sp, #24]
 800e680:	b3a3      	cbz	r3, 800e6ec <_strtod_l+0x24c>
 800e682:	4607      	mov	r7, r0
 800e684:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800e688:	2909      	cmp	r1, #9
 800e68a:	d912      	bls.n	800e6b2 <_strtod_l+0x212>
 800e68c:	2101      	movs	r1, #1
 800e68e:	e7c3      	b.n	800e618 <_strtod_l+0x178>
 800e690:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800e692:	1c5a      	adds	r2, r3, #1
 800e694:	9211      	str	r2, [sp, #68]	; 0x44
 800e696:	785a      	ldrb	r2, [r3, #1]
 800e698:	3001      	adds	r0, #1
 800e69a:	2a30      	cmp	r2, #48	; 0x30
 800e69c:	d0f8      	beq.n	800e690 <_strtod_l+0x1f0>
 800e69e:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800e6a2:	2b08      	cmp	r3, #8
 800e6a4:	f200 8497 	bhi.w	800efd6 <_strtod_l+0xb36>
 800e6a8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800e6aa:	930a      	str	r3, [sp, #40]	; 0x28
 800e6ac:	4607      	mov	r7, r0
 800e6ae:	2000      	movs	r0, #0
 800e6b0:	4603      	mov	r3, r0
 800e6b2:	3a30      	subs	r2, #48	; 0x30
 800e6b4:	f100 0101 	add.w	r1, r0, #1
 800e6b8:	d012      	beq.n	800e6e0 <_strtod_l+0x240>
 800e6ba:	440f      	add	r7, r1
 800e6bc:	eb00 0c03 	add.w	ip, r0, r3
 800e6c0:	4619      	mov	r1, r3
 800e6c2:	250a      	movs	r5, #10
 800e6c4:	4561      	cmp	r1, ip
 800e6c6:	d113      	bne.n	800e6f0 <_strtod_l+0x250>
 800e6c8:	1819      	adds	r1, r3, r0
 800e6ca:	2908      	cmp	r1, #8
 800e6cc:	f103 0301 	add.w	r3, r3, #1
 800e6d0:	4403      	add	r3, r0
 800e6d2:	dc1c      	bgt.n	800e70e <_strtod_l+0x26e>
 800e6d4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e6d6:	210a      	movs	r1, #10
 800e6d8:	fb01 2200 	mla	r2, r1, r0, r2
 800e6dc:	9209      	str	r2, [sp, #36]	; 0x24
 800e6de:	2100      	movs	r1, #0
 800e6e0:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800e6e2:	1c50      	adds	r0, r2, #1
 800e6e4:	9011      	str	r0, [sp, #68]	; 0x44
 800e6e6:	7852      	ldrb	r2, [r2, #1]
 800e6e8:	4608      	mov	r0, r1
 800e6ea:	e7cb      	b.n	800e684 <_strtod_l+0x1e4>
 800e6ec:	9806      	ldr	r0, [sp, #24]
 800e6ee:	e7d4      	b.n	800e69a <_strtod_l+0x1fa>
 800e6f0:	2908      	cmp	r1, #8
 800e6f2:	dc04      	bgt.n	800e6fe <_strtod_l+0x25e>
 800e6f4:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800e6f6:	436e      	muls	r6, r5
 800e6f8:	9609      	str	r6, [sp, #36]	; 0x24
 800e6fa:	3101      	adds	r1, #1
 800e6fc:	e7e2      	b.n	800e6c4 <_strtod_l+0x224>
 800e6fe:	f101 0e01 	add.w	lr, r1, #1
 800e702:	f1be 0f10 	cmp.w	lr, #16
 800e706:	bfd8      	it	le
 800e708:	fb05 fa0a 	mulle.w	sl, r5, sl
 800e70c:	e7f5      	b.n	800e6fa <_strtod_l+0x25a>
 800e70e:	2b10      	cmp	r3, #16
 800e710:	bfdc      	itt	le
 800e712:	210a      	movle	r1, #10
 800e714:	fb01 2a0a 	mlale	sl, r1, sl, r2
 800e718:	e7e1      	b.n	800e6de <_strtod_l+0x23e>
 800e71a:	2700      	movs	r7, #0
 800e71c:	2101      	movs	r1, #1
 800e71e:	e780      	b.n	800e622 <_strtod_l+0x182>
 800e720:	f04f 0e00 	mov.w	lr, #0
 800e724:	f10b 0202 	add.w	r2, fp, #2
 800e728:	9211      	str	r2, [sp, #68]	; 0x44
 800e72a:	f89b 2002 	ldrb.w	r2, [fp, #2]
 800e72e:	e789      	b.n	800e644 <_strtod_l+0x1a4>
 800e730:	f04f 0e01 	mov.w	lr, #1
 800e734:	e7f6      	b.n	800e724 <_strtod_l+0x284>
 800e736:	bf00      	nop
 800e738:	08011b78 	.word	0x08011b78
 800e73c:	08011ab0 	.word	0x08011ab0
 800e740:	7ff00000 	.word	0x7ff00000
 800e744:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800e746:	1c55      	adds	r5, r2, #1
 800e748:	9511      	str	r5, [sp, #68]	; 0x44
 800e74a:	7852      	ldrb	r2, [r2, #1]
 800e74c:	2a30      	cmp	r2, #48	; 0x30
 800e74e:	d0f9      	beq.n	800e744 <_strtod_l+0x2a4>
 800e750:	f1a2 0531 	sub.w	r5, r2, #49	; 0x31
 800e754:	2d08      	cmp	r5, #8
 800e756:	f63f af7b 	bhi.w	800e650 <_strtod_l+0x1b0>
 800e75a:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 800e75e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800e760:	9207      	str	r2, [sp, #28]
 800e762:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800e764:	1c55      	adds	r5, r2, #1
 800e766:	9511      	str	r5, [sp, #68]	; 0x44
 800e768:	7852      	ldrb	r2, [r2, #1]
 800e76a:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 800e76e:	2e09      	cmp	r6, #9
 800e770:	d937      	bls.n	800e7e2 <_strtod_l+0x342>
 800e772:	9e07      	ldr	r6, [sp, #28]
 800e774:	1bad      	subs	r5, r5, r6
 800e776:	2d08      	cmp	r5, #8
 800e778:	f644 651f 	movw	r5, #19999	; 0x4e1f
 800e77c:	dc02      	bgt.n	800e784 <_strtod_l+0x2e4>
 800e77e:	4565      	cmp	r5, ip
 800e780:	bfa8      	it	ge
 800e782:	4665      	movge	r5, ip
 800e784:	f1be 0f00 	cmp.w	lr, #0
 800e788:	d000      	beq.n	800e78c <_strtod_l+0x2ec>
 800e78a:	426d      	negs	r5, r5
 800e78c:	2b00      	cmp	r3, #0
 800e78e:	d14d      	bne.n	800e82c <_strtod_l+0x38c>
 800e790:	9b04      	ldr	r3, [sp, #16]
 800e792:	4303      	orrs	r3, r0
 800e794:	f47f aec8 	bne.w	800e528 <_strtod_l+0x88>
 800e798:	2900      	cmp	r1, #0
 800e79a:	f47f aee2 	bne.w	800e562 <_strtod_l+0xc2>
 800e79e:	2a69      	cmp	r2, #105	; 0x69
 800e7a0:	d027      	beq.n	800e7f2 <_strtod_l+0x352>
 800e7a2:	dc24      	bgt.n	800e7ee <_strtod_l+0x34e>
 800e7a4:	2a49      	cmp	r2, #73	; 0x49
 800e7a6:	d024      	beq.n	800e7f2 <_strtod_l+0x352>
 800e7a8:	2a4e      	cmp	r2, #78	; 0x4e
 800e7aa:	f47f aeda 	bne.w	800e562 <_strtod_l+0xc2>
 800e7ae:	4996      	ldr	r1, [pc, #600]	; (800ea08 <_strtod_l+0x568>)
 800e7b0:	a811      	add	r0, sp, #68	; 0x44
 800e7b2:	f000 fef7 	bl	800f5a4 <__match>
 800e7b6:	2800      	cmp	r0, #0
 800e7b8:	f43f aed3 	beq.w	800e562 <_strtod_l+0xc2>
 800e7bc:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800e7be:	781b      	ldrb	r3, [r3, #0]
 800e7c0:	2b28      	cmp	r3, #40	; 0x28
 800e7c2:	d12d      	bne.n	800e820 <_strtod_l+0x380>
 800e7c4:	4991      	ldr	r1, [pc, #580]	; (800ea0c <_strtod_l+0x56c>)
 800e7c6:	aa14      	add	r2, sp, #80	; 0x50
 800e7c8:	a811      	add	r0, sp, #68	; 0x44
 800e7ca:	f000 feff 	bl	800f5cc <__hexnan>
 800e7ce:	2805      	cmp	r0, #5
 800e7d0:	d126      	bne.n	800e820 <_strtod_l+0x380>
 800e7d2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800e7d4:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 800e7d8:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 800e7dc:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 800e7e0:	e6a2      	b.n	800e528 <_strtod_l+0x88>
 800e7e2:	250a      	movs	r5, #10
 800e7e4:	fb05 250c 	mla	r5, r5, ip, r2
 800e7e8:	f1a5 0c30 	sub.w	ip, r5, #48	; 0x30
 800e7ec:	e7b9      	b.n	800e762 <_strtod_l+0x2c2>
 800e7ee:	2a6e      	cmp	r2, #110	; 0x6e
 800e7f0:	e7db      	b.n	800e7aa <_strtod_l+0x30a>
 800e7f2:	4987      	ldr	r1, [pc, #540]	; (800ea10 <_strtod_l+0x570>)
 800e7f4:	a811      	add	r0, sp, #68	; 0x44
 800e7f6:	f000 fed5 	bl	800f5a4 <__match>
 800e7fa:	2800      	cmp	r0, #0
 800e7fc:	f43f aeb1 	beq.w	800e562 <_strtod_l+0xc2>
 800e800:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800e802:	4984      	ldr	r1, [pc, #528]	; (800ea14 <_strtod_l+0x574>)
 800e804:	3b01      	subs	r3, #1
 800e806:	a811      	add	r0, sp, #68	; 0x44
 800e808:	9311      	str	r3, [sp, #68]	; 0x44
 800e80a:	f000 fecb 	bl	800f5a4 <__match>
 800e80e:	b910      	cbnz	r0, 800e816 <_strtod_l+0x376>
 800e810:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800e812:	3301      	adds	r3, #1
 800e814:	9311      	str	r3, [sp, #68]	; 0x44
 800e816:	f8df 9210 	ldr.w	r9, [pc, #528]	; 800ea28 <_strtod_l+0x588>
 800e81a:	f04f 0800 	mov.w	r8, #0
 800e81e:	e683      	b.n	800e528 <_strtod_l+0x88>
 800e820:	487d      	ldr	r0, [pc, #500]	; (800ea18 <_strtod_l+0x578>)
 800e822:	f001 fcf9 	bl	8010218 <nan>
 800e826:	ec59 8b10 	vmov	r8, r9, d0
 800e82a:	e67d      	b.n	800e528 <_strtod_l+0x88>
 800e82c:	1bea      	subs	r2, r5, r7
 800e82e:	eddd 7a09 	vldr	s15, [sp, #36]	; 0x24
 800e832:	9207      	str	r2, [sp, #28]
 800e834:	9a06      	ldr	r2, [sp, #24]
 800e836:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800e83a:	2a00      	cmp	r2, #0
 800e83c:	bf08      	it	eq
 800e83e:	461a      	moveq	r2, r3
 800e840:	2b10      	cmp	r3, #16
 800e842:	9206      	str	r2, [sp, #24]
 800e844:	461a      	mov	r2, r3
 800e846:	bfa8      	it	ge
 800e848:	2210      	movge	r2, #16
 800e84a:	2b09      	cmp	r3, #9
 800e84c:	ec59 8b17 	vmov	r8, r9, d7
 800e850:	dd0c      	ble.n	800e86c <_strtod_l+0x3cc>
 800e852:	4972      	ldr	r1, [pc, #456]	; (800ea1c <_strtod_l+0x57c>)
 800e854:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 800e858:	ed11 5b12 	vldr	d5, [r1, #-72]	; 0xffffffb8
 800e85c:	ee06 aa90 	vmov	s13, sl
 800e860:	eeb8 6b66 	vcvt.f64.u32	d6, s13
 800e864:	eea7 6b05 	vfma.f64	d6, d7, d5
 800e868:	ec59 8b16 	vmov	r8, r9, d6
 800e86c:	2b0f      	cmp	r3, #15
 800e86e:	dc36      	bgt.n	800e8de <_strtod_l+0x43e>
 800e870:	9907      	ldr	r1, [sp, #28]
 800e872:	2900      	cmp	r1, #0
 800e874:	f43f ae58 	beq.w	800e528 <_strtod_l+0x88>
 800e878:	dd23      	ble.n	800e8c2 <_strtod_l+0x422>
 800e87a:	2916      	cmp	r1, #22
 800e87c:	dc0b      	bgt.n	800e896 <_strtod_l+0x3f6>
 800e87e:	4b67      	ldr	r3, [pc, #412]	; (800ea1c <_strtod_l+0x57c>)
 800e880:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 800e884:	ed93 7b00 	vldr	d7, [r3]
 800e888:	ec49 8b16 	vmov	d6, r8, r9
 800e88c:	ee27 7b06 	vmul.f64	d7, d7, d6
 800e890:	ec59 8b17 	vmov	r8, r9, d7
 800e894:	e648      	b.n	800e528 <_strtod_l+0x88>
 800e896:	9807      	ldr	r0, [sp, #28]
 800e898:	f1c3 0125 	rsb	r1, r3, #37	; 0x25
 800e89c:	4281      	cmp	r1, r0
 800e89e:	db1e      	blt.n	800e8de <_strtod_l+0x43e>
 800e8a0:	4a5e      	ldr	r2, [pc, #376]	; (800ea1c <_strtod_l+0x57c>)
 800e8a2:	f1c3 030f 	rsb	r3, r3, #15
 800e8a6:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 800e8aa:	ed91 7b00 	vldr	d7, [r1]
 800e8ae:	ec49 8b16 	vmov	d6, r8, r9
 800e8b2:	1ac3      	subs	r3, r0, r3
 800e8b4:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 800e8b8:	ee27 7b06 	vmul.f64	d7, d7, d6
 800e8bc:	ed92 6b00 	vldr	d6, [r2]
 800e8c0:	e7e4      	b.n	800e88c <_strtod_l+0x3ec>
 800e8c2:	9907      	ldr	r1, [sp, #28]
 800e8c4:	3116      	adds	r1, #22
 800e8c6:	db0a      	blt.n	800e8de <_strtod_l+0x43e>
 800e8c8:	4b54      	ldr	r3, [pc, #336]	; (800ea1c <_strtod_l+0x57c>)
 800e8ca:	1b7d      	subs	r5, r7, r5
 800e8cc:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800e8d0:	ed95 7b00 	vldr	d7, [r5]
 800e8d4:	ec49 8b16 	vmov	d6, r8, r9
 800e8d8:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800e8dc:	e7d8      	b.n	800e890 <_strtod_l+0x3f0>
 800e8de:	9907      	ldr	r1, [sp, #28]
 800e8e0:	1a9a      	subs	r2, r3, r2
 800e8e2:	440a      	add	r2, r1
 800e8e4:	2a00      	cmp	r2, #0
 800e8e6:	dd6f      	ble.n	800e9c8 <_strtod_l+0x528>
 800e8e8:	f012 000f 	ands.w	r0, r2, #15
 800e8ec:	d00a      	beq.n	800e904 <_strtod_l+0x464>
 800e8ee:	494b      	ldr	r1, [pc, #300]	; (800ea1c <_strtod_l+0x57c>)
 800e8f0:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 800e8f4:	ed91 7b00 	vldr	d7, [r1]
 800e8f8:	ec49 8b16 	vmov	d6, r8, r9
 800e8fc:	ee27 7b06 	vmul.f64	d7, d7, d6
 800e900:	ec59 8b17 	vmov	r8, r9, d7
 800e904:	f032 020f 	bics.w	r2, r2, #15
 800e908:	d04f      	beq.n	800e9aa <_strtod_l+0x50a>
 800e90a:	f5b2 7f9a 	cmp.w	r2, #308	; 0x134
 800e90e:	dd22      	ble.n	800e956 <_strtod_l+0x4b6>
 800e910:	2500      	movs	r5, #0
 800e912:	462e      	mov	r6, r5
 800e914:	9506      	str	r5, [sp, #24]
 800e916:	462f      	mov	r7, r5
 800e918:	2322      	movs	r3, #34	; 0x22
 800e91a:	f8df 910c 	ldr.w	r9, [pc, #268]	; 800ea28 <_strtod_l+0x588>
 800e91e:	6023      	str	r3, [r4, #0]
 800e920:	f04f 0800 	mov.w	r8, #0
 800e924:	9b06      	ldr	r3, [sp, #24]
 800e926:	2b00      	cmp	r3, #0
 800e928:	f43f adfe 	beq.w	800e528 <_strtod_l+0x88>
 800e92c:	9912      	ldr	r1, [sp, #72]	; 0x48
 800e92e:	4620      	mov	r0, r4
 800e930:	f000 ff48 	bl	800f7c4 <_Bfree>
 800e934:	4639      	mov	r1, r7
 800e936:	4620      	mov	r0, r4
 800e938:	f000 ff44 	bl	800f7c4 <_Bfree>
 800e93c:	4631      	mov	r1, r6
 800e93e:	4620      	mov	r0, r4
 800e940:	f000 ff40 	bl	800f7c4 <_Bfree>
 800e944:	9906      	ldr	r1, [sp, #24]
 800e946:	4620      	mov	r0, r4
 800e948:	f000 ff3c 	bl	800f7c4 <_Bfree>
 800e94c:	4629      	mov	r1, r5
 800e94e:	4620      	mov	r0, r4
 800e950:	f000 ff38 	bl	800f7c4 <_Bfree>
 800e954:	e5e8      	b.n	800e528 <_strtod_l+0x88>
 800e956:	2000      	movs	r0, #0
 800e958:	ec49 8b17 	vmov	d7, r8, r9
 800e95c:	f8df c0c0 	ldr.w	ip, [pc, #192]	; 800ea20 <_strtod_l+0x580>
 800e960:	1112      	asrs	r2, r2, #4
 800e962:	4601      	mov	r1, r0
 800e964:	2a01      	cmp	r2, #1
 800e966:	dc23      	bgt.n	800e9b0 <_strtod_l+0x510>
 800e968:	b108      	cbz	r0, 800e96e <_strtod_l+0x4ce>
 800e96a:	ec59 8b17 	vmov	r8, r9, d7
 800e96e:	4a2c      	ldr	r2, [pc, #176]	; (800ea20 <_strtod_l+0x580>)
 800e970:	482c      	ldr	r0, [pc, #176]	; (800ea24 <_strtod_l+0x584>)
 800e972:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800e976:	ed92 7b00 	vldr	d7, [r2]
 800e97a:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 800e97e:	ec49 8b16 	vmov	d6, r8, r9
 800e982:	4a29      	ldr	r2, [pc, #164]	; (800ea28 <_strtod_l+0x588>)
 800e984:	ee27 7b06 	vmul.f64	d7, d7, d6
 800e988:	ee17 1a90 	vmov	r1, s15
 800e98c:	400a      	ands	r2, r1
 800e98e:	4282      	cmp	r2, r0
 800e990:	ec59 8b17 	vmov	r8, r9, d7
 800e994:	d8bc      	bhi.n	800e910 <_strtod_l+0x470>
 800e996:	f5a0 1080 	sub.w	r0, r0, #1048576	; 0x100000
 800e99a:	4282      	cmp	r2, r0
 800e99c:	bf86      	itte	hi
 800e99e:	f8df 908c 	ldrhi.w	r9, [pc, #140]	; 800ea2c <_strtod_l+0x58c>
 800e9a2:	f04f 38ff 	movhi.w	r8, #4294967295
 800e9a6:	f101 7954 	addls.w	r9, r1, #55574528	; 0x3500000
 800e9aa:	2200      	movs	r2, #0
 800e9ac:	9204      	str	r2, [sp, #16]
 800e9ae:	e078      	b.n	800eaa2 <_strtod_l+0x602>
 800e9b0:	07d6      	lsls	r6, r2, #31
 800e9b2:	d504      	bpl.n	800e9be <_strtod_l+0x51e>
 800e9b4:	ed9c 6b00 	vldr	d6, [ip]
 800e9b8:	2001      	movs	r0, #1
 800e9ba:	ee27 7b06 	vmul.f64	d7, d7, d6
 800e9be:	3101      	adds	r1, #1
 800e9c0:	1052      	asrs	r2, r2, #1
 800e9c2:	f10c 0c08 	add.w	ip, ip, #8
 800e9c6:	e7cd      	b.n	800e964 <_strtod_l+0x4c4>
 800e9c8:	d0ef      	beq.n	800e9aa <_strtod_l+0x50a>
 800e9ca:	4252      	negs	r2, r2
 800e9cc:	f012 000f 	ands.w	r0, r2, #15
 800e9d0:	d00a      	beq.n	800e9e8 <_strtod_l+0x548>
 800e9d2:	4912      	ldr	r1, [pc, #72]	; (800ea1c <_strtod_l+0x57c>)
 800e9d4:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 800e9d8:	ed91 7b00 	vldr	d7, [r1]
 800e9dc:	ec49 8b16 	vmov	d6, r8, r9
 800e9e0:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800e9e4:	ec59 8b17 	vmov	r8, r9, d7
 800e9e8:	1112      	asrs	r2, r2, #4
 800e9ea:	d0de      	beq.n	800e9aa <_strtod_l+0x50a>
 800e9ec:	2a1f      	cmp	r2, #31
 800e9ee:	dd1f      	ble.n	800ea30 <_strtod_l+0x590>
 800e9f0:	2500      	movs	r5, #0
 800e9f2:	462e      	mov	r6, r5
 800e9f4:	9506      	str	r5, [sp, #24]
 800e9f6:	462f      	mov	r7, r5
 800e9f8:	2322      	movs	r3, #34	; 0x22
 800e9fa:	f04f 0800 	mov.w	r8, #0
 800e9fe:	f04f 0900 	mov.w	r9, #0
 800ea02:	6023      	str	r3, [r4, #0]
 800ea04:	e78e      	b.n	800e924 <_strtod_l+0x484>
 800ea06:	bf00      	nop
 800ea08:	08011aad 	.word	0x08011aad
 800ea0c:	08011ac4 	.word	0x08011ac4
 800ea10:	08011aa4 	.word	0x08011aa4
 800ea14:	08011aa7 	.word	0x08011aa7
 800ea18:	08011d37 	.word	0x08011d37
 800ea1c:	08011c28 	.word	0x08011c28
 800ea20:	08011c00 	.word	0x08011c00
 800ea24:	7ca00000 	.word	0x7ca00000
 800ea28:	7ff00000 	.word	0x7ff00000
 800ea2c:	7fefffff 	.word	0x7fefffff
 800ea30:	f012 0110 	ands.w	r1, r2, #16
 800ea34:	bf18      	it	ne
 800ea36:	216a      	movne	r1, #106	; 0x6a
 800ea38:	9104      	str	r1, [sp, #16]
 800ea3a:	ec49 8b17 	vmov	d7, r8, r9
 800ea3e:	49be      	ldr	r1, [pc, #760]	; (800ed38 <_strtod_l+0x898>)
 800ea40:	2000      	movs	r0, #0
 800ea42:	07d6      	lsls	r6, r2, #31
 800ea44:	d504      	bpl.n	800ea50 <_strtod_l+0x5b0>
 800ea46:	ed91 6b00 	vldr	d6, [r1]
 800ea4a:	2001      	movs	r0, #1
 800ea4c:	ee27 7b06 	vmul.f64	d7, d7, d6
 800ea50:	1052      	asrs	r2, r2, #1
 800ea52:	f101 0108 	add.w	r1, r1, #8
 800ea56:	d1f4      	bne.n	800ea42 <_strtod_l+0x5a2>
 800ea58:	b108      	cbz	r0, 800ea5e <_strtod_l+0x5be>
 800ea5a:	ec59 8b17 	vmov	r8, r9, d7
 800ea5e:	9a04      	ldr	r2, [sp, #16]
 800ea60:	b1c2      	cbz	r2, 800ea94 <_strtod_l+0x5f4>
 800ea62:	f3c9 510a 	ubfx	r1, r9, #20, #11
 800ea66:	f1c1 026b 	rsb	r2, r1, #107	; 0x6b
 800ea6a:	2a00      	cmp	r2, #0
 800ea6c:	4648      	mov	r0, r9
 800ea6e:	dd11      	ble.n	800ea94 <_strtod_l+0x5f4>
 800ea70:	2a1f      	cmp	r2, #31
 800ea72:	f340 812e 	ble.w	800ecd2 <_strtod_l+0x832>
 800ea76:	2a34      	cmp	r2, #52	; 0x34
 800ea78:	bfde      	ittt	le
 800ea7a:	f1c1 014b 	rsble	r1, r1, #75	; 0x4b
 800ea7e:	f04f 32ff 	movle.w	r2, #4294967295
 800ea82:	fa02 f101 	lslle.w	r1, r2, r1
 800ea86:	f04f 0800 	mov.w	r8, #0
 800ea8a:	bfcc      	ite	gt
 800ea8c:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 800ea90:	ea01 0900 	andle.w	r9, r1, r0
 800ea94:	ec49 8b17 	vmov	d7, r8, r9
 800ea98:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800ea9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eaa0:	d0a6      	beq.n	800e9f0 <_strtod_l+0x550>
 800eaa2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800eaa4:	9200      	str	r2, [sp, #0]
 800eaa6:	990a      	ldr	r1, [sp, #40]	; 0x28
 800eaa8:	9a06      	ldr	r2, [sp, #24]
 800eaaa:	4620      	mov	r0, r4
 800eaac:	f000 fef2 	bl	800f894 <__s2b>
 800eab0:	9006      	str	r0, [sp, #24]
 800eab2:	2800      	cmp	r0, #0
 800eab4:	f43f af2c 	beq.w	800e910 <_strtod_l+0x470>
 800eab8:	9b07      	ldr	r3, [sp, #28]
 800eaba:	1b7d      	subs	r5, r7, r5
 800eabc:	2b00      	cmp	r3, #0
 800eabe:	bfb4      	ite	lt
 800eac0:	462b      	movlt	r3, r5
 800eac2:	2300      	movge	r3, #0
 800eac4:	9309      	str	r3, [sp, #36]	; 0x24
 800eac6:	9b07      	ldr	r3, [sp, #28]
 800eac8:	ed9f 9b93 	vldr	d9, [pc, #588]	; 800ed18 <_strtod_l+0x878>
 800eacc:	ed9f ab94 	vldr	d10, [pc, #592]	; 800ed20 <_strtod_l+0x880>
 800ead0:	ed9f bb95 	vldr	d11, [pc, #596]	; 800ed28 <_strtod_l+0x888>
 800ead4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800ead8:	2500      	movs	r5, #0
 800eada:	930c      	str	r3, [sp, #48]	; 0x30
 800eadc:	462e      	mov	r6, r5
 800eade:	9b06      	ldr	r3, [sp, #24]
 800eae0:	4620      	mov	r0, r4
 800eae2:	6859      	ldr	r1, [r3, #4]
 800eae4:	f000 fe2e 	bl	800f744 <_Balloc>
 800eae8:	4607      	mov	r7, r0
 800eaea:	2800      	cmp	r0, #0
 800eaec:	f43f af14 	beq.w	800e918 <_strtod_l+0x478>
 800eaf0:	9b06      	ldr	r3, [sp, #24]
 800eaf2:	691a      	ldr	r2, [r3, #16]
 800eaf4:	3202      	adds	r2, #2
 800eaf6:	f103 010c 	add.w	r1, r3, #12
 800eafa:	0092      	lsls	r2, r2, #2
 800eafc:	300c      	adds	r0, #12
 800eafe:	f000 fe13 	bl	800f728 <memcpy>
 800eb02:	ec49 8b10 	vmov	d0, r8, r9
 800eb06:	aa14      	add	r2, sp, #80	; 0x50
 800eb08:	a913      	add	r1, sp, #76	; 0x4c
 800eb0a:	4620      	mov	r0, r4
 800eb0c:	f001 fa08 	bl	800ff20 <__d2b>
 800eb10:	ec49 8b18 	vmov	d8, r8, r9
 800eb14:	9012      	str	r0, [sp, #72]	; 0x48
 800eb16:	2800      	cmp	r0, #0
 800eb18:	f43f aefe 	beq.w	800e918 <_strtod_l+0x478>
 800eb1c:	2101      	movs	r1, #1
 800eb1e:	4620      	mov	r0, r4
 800eb20:	f000 ff52 	bl	800f9c8 <__i2b>
 800eb24:	4606      	mov	r6, r0
 800eb26:	2800      	cmp	r0, #0
 800eb28:	f43f aef6 	beq.w	800e918 <_strtod_l+0x478>
 800eb2c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800eb2e:	9914      	ldr	r1, [sp, #80]	; 0x50
 800eb30:	2b00      	cmp	r3, #0
 800eb32:	bfab      	itete	ge
 800eb34:	9a09      	ldrge	r2, [sp, #36]	; 0x24
 800eb36:	9a0c      	ldrlt	r2, [sp, #48]	; 0x30
 800eb38:	f8dd a030 	ldrge.w	sl, [sp, #48]	; 0x30
 800eb3c:	f8dd b024 	ldrlt.w	fp, [sp, #36]	; 0x24
 800eb40:	bfac      	ite	ge
 800eb42:	eb03 0b02 	addge.w	fp, r3, r2
 800eb46:	eba2 0a03 	sublt.w	sl, r2, r3
 800eb4a:	9a04      	ldr	r2, [sp, #16]
 800eb4c:	1a9b      	subs	r3, r3, r2
 800eb4e:	440b      	add	r3, r1
 800eb50:	4a7a      	ldr	r2, [pc, #488]	; (800ed3c <_strtod_l+0x89c>)
 800eb52:	3b01      	subs	r3, #1
 800eb54:	4293      	cmp	r3, r2
 800eb56:	f1c1 0136 	rsb	r1, r1, #54	; 0x36
 800eb5a:	f280 80cd 	bge.w	800ecf8 <_strtod_l+0x858>
 800eb5e:	1ad2      	subs	r2, r2, r3
 800eb60:	2a1f      	cmp	r2, #31
 800eb62:	eba1 0102 	sub.w	r1, r1, r2
 800eb66:	f04f 0001 	mov.w	r0, #1
 800eb6a:	f300 80b9 	bgt.w	800ece0 <_strtod_l+0x840>
 800eb6e:	fa00 f302 	lsl.w	r3, r0, r2
 800eb72:	930b      	str	r3, [sp, #44]	; 0x2c
 800eb74:	2300      	movs	r3, #0
 800eb76:	930a      	str	r3, [sp, #40]	; 0x28
 800eb78:	eb0b 0301 	add.w	r3, fp, r1
 800eb7c:	9a04      	ldr	r2, [sp, #16]
 800eb7e:	459b      	cmp	fp, r3
 800eb80:	448a      	add	sl, r1
 800eb82:	4492      	add	sl, r2
 800eb84:	465a      	mov	r2, fp
 800eb86:	bfa8      	it	ge
 800eb88:	461a      	movge	r2, r3
 800eb8a:	4552      	cmp	r2, sl
 800eb8c:	bfa8      	it	ge
 800eb8e:	4652      	movge	r2, sl
 800eb90:	2a00      	cmp	r2, #0
 800eb92:	bfc2      	ittt	gt
 800eb94:	1a9b      	subgt	r3, r3, r2
 800eb96:	ebaa 0a02 	subgt.w	sl, sl, r2
 800eb9a:	ebab 0b02 	subgt.w	fp, fp, r2
 800eb9e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800eba0:	2a00      	cmp	r2, #0
 800eba2:	dd18      	ble.n	800ebd6 <_strtod_l+0x736>
 800eba4:	4631      	mov	r1, r6
 800eba6:	4620      	mov	r0, r4
 800eba8:	930f      	str	r3, [sp, #60]	; 0x3c
 800ebaa:	f000 ffcd 	bl	800fb48 <__pow5mult>
 800ebae:	4606      	mov	r6, r0
 800ebb0:	2800      	cmp	r0, #0
 800ebb2:	f43f aeb1 	beq.w	800e918 <_strtod_l+0x478>
 800ebb6:	4601      	mov	r1, r0
 800ebb8:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800ebba:	4620      	mov	r0, r4
 800ebbc:	f000 ff1a 	bl	800f9f4 <__multiply>
 800ebc0:	900e      	str	r0, [sp, #56]	; 0x38
 800ebc2:	2800      	cmp	r0, #0
 800ebc4:	f43f aea8 	beq.w	800e918 <_strtod_l+0x478>
 800ebc8:	9912      	ldr	r1, [sp, #72]	; 0x48
 800ebca:	4620      	mov	r0, r4
 800ebcc:	f000 fdfa 	bl	800f7c4 <_Bfree>
 800ebd0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ebd2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ebd4:	9212      	str	r2, [sp, #72]	; 0x48
 800ebd6:	2b00      	cmp	r3, #0
 800ebd8:	f300 8093 	bgt.w	800ed02 <_strtod_l+0x862>
 800ebdc:	9b07      	ldr	r3, [sp, #28]
 800ebde:	2b00      	cmp	r3, #0
 800ebe0:	dd08      	ble.n	800ebf4 <_strtod_l+0x754>
 800ebe2:	4639      	mov	r1, r7
 800ebe4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800ebe6:	4620      	mov	r0, r4
 800ebe8:	f000 ffae 	bl	800fb48 <__pow5mult>
 800ebec:	4607      	mov	r7, r0
 800ebee:	2800      	cmp	r0, #0
 800ebf0:	f43f ae92 	beq.w	800e918 <_strtod_l+0x478>
 800ebf4:	f1ba 0f00 	cmp.w	sl, #0
 800ebf8:	dd08      	ble.n	800ec0c <_strtod_l+0x76c>
 800ebfa:	4639      	mov	r1, r7
 800ebfc:	4652      	mov	r2, sl
 800ebfe:	4620      	mov	r0, r4
 800ec00:	f000 fffc 	bl	800fbfc <__lshift>
 800ec04:	4607      	mov	r7, r0
 800ec06:	2800      	cmp	r0, #0
 800ec08:	f43f ae86 	beq.w	800e918 <_strtod_l+0x478>
 800ec0c:	f1bb 0f00 	cmp.w	fp, #0
 800ec10:	dd08      	ble.n	800ec24 <_strtod_l+0x784>
 800ec12:	4631      	mov	r1, r6
 800ec14:	465a      	mov	r2, fp
 800ec16:	4620      	mov	r0, r4
 800ec18:	f000 fff0 	bl	800fbfc <__lshift>
 800ec1c:	4606      	mov	r6, r0
 800ec1e:	2800      	cmp	r0, #0
 800ec20:	f43f ae7a 	beq.w	800e918 <_strtod_l+0x478>
 800ec24:	9912      	ldr	r1, [sp, #72]	; 0x48
 800ec26:	463a      	mov	r2, r7
 800ec28:	4620      	mov	r0, r4
 800ec2a:	f001 f873 	bl	800fd14 <__mdiff>
 800ec2e:	4605      	mov	r5, r0
 800ec30:	2800      	cmp	r0, #0
 800ec32:	f43f ae71 	beq.w	800e918 <_strtod_l+0x478>
 800ec36:	2300      	movs	r3, #0
 800ec38:	f8d0 a00c 	ldr.w	sl, [r0, #12]
 800ec3c:	60c3      	str	r3, [r0, #12]
 800ec3e:	4631      	mov	r1, r6
 800ec40:	f001 f84c 	bl	800fcdc <__mcmp>
 800ec44:	2800      	cmp	r0, #0
 800ec46:	da7d      	bge.n	800ed44 <_strtod_l+0x8a4>
 800ec48:	ea5a 0308 	orrs.w	r3, sl, r8
 800ec4c:	f040 80a3 	bne.w	800ed96 <_strtod_l+0x8f6>
 800ec50:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800ec54:	2b00      	cmp	r3, #0
 800ec56:	f040 809e 	bne.w	800ed96 <_strtod_l+0x8f6>
 800ec5a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800ec5e:	0d1b      	lsrs	r3, r3, #20
 800ec60:	051b      	lsls	r3, r3, #20
 800ec62:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800ec66:	f240 8096 	bls.w	800ed96 <_strtod_l+0x8f6>
 800ec6a:	696b      	ldr	r3, [r5, #20]
 800ec6c:	b91b      	cbnz	r3, 800ec76 <_strtod_l+0x7d6>
 800ec6e:	692b      	ldr	r3, [r5, #16]
 800ec70:	2b01      	cmp	r3, #1
 800ec72:	f340 8090 	ble.w	800ed96 <_strtod_l+0x8f6>
 800ec76:	4629      	mov	r1, r5
 800ec78:	2201      	movs	r2, #1
 800ec7a:	4620      	mov	r0, r4
 800ec7c:	f000 ffbe 	bl	800fbfc <__lshift>
 800ec80:	4631      	mov	r1, r6
 800ec82:	4605      	mov	r5, r0
 800ec84:	f001 f82a 	bl	800fcdc <__mcmp>
 800ec88:	2800      	cmp	r0, #0
 800ec8a:	f340 8084 	ble.w	800ed96 <_strtod_l+0x8f6>
 800ec8e:	9904      	ldr	r1, [sp, #16]
 800ec90:	4a2b      	ldr	r2, [pc, #172]	; (800ed40 <_strtod_l+0x8a0>)
 800ec92:	464b      	mov	r3, r9
 800ec94:	2900      	cmp	r1, #0
 800ec96:	f000 809d 	beq.w	800edd4 <_strtod_l+0x934>
 800ec9a:	ea02 0109 	and.w	r1, r2, r9
 800ec9e:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800eca2:	f300 8097 	bgt.w	800edd4 <_strtod_l+0x934>
 800eca6:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800ecaa:	f77f aea5 	ble.w	800e9f8 <_strtod_l+0x558>
 800ecae:	ed9f 7b20 	vldr	d7, [pc, #128]	; 800ed30 <_strtod_l+0x890>
 800ecb2:	ec49 8b16 	vmov	d6, r8, r9
 800ecb6:	ee26 7b07 	vmul.f64	d7, d6, d7
 800ecba:	ed8d 7b04 	vstr	d7, [sp, #16]
 800ecbe:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
 800ecc2:	4313      	orrs	r3, r2
 800ecc4:	bf08      	it	eq
 800ecc6:	2322      	moveq	r3, #34	; 0x22
 800ecc8:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800eccc:	bf08      	it	eq
 800ecce:	6023      	streq	r3, [r4, #0]
 800ecd0:	e62c      	b.n	800e92c <_strtod_l+0x48c>
 800ecd2:	f04f 31ff 	mov.w	r1, #4294967295
 800ecd6:	fa01 f202 	lsl.w	r2, r1, r2
 800ecda:	ea02 0808 	and.w	r8, r2, r8
 800ecde:	e6d9      	b.n	800ea94 <_strtod_l+0x5f4>
 800ece0:	f1c3 437f 	rsb	r3, r3, #4278190080	; 0xff000000
 800ece4:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
 800ece8:	f503 437b 	add.w	r3, r3, #64256	; 0xfb00
 800ecec:	33e2      	adds	r3, #226	; 0xe2
 800ecee:	fa00 f303 	lsl.w	r3, r0, r3
 800ecf2:	e9cd 300a 	strd	r3, r0, [sp, #40]	; 0x28
 800ecf6:	e73f      	b.n	800eb78 <_strtod_l+0x6d8>
 800ecf8:	2200      	movs	r2, #0
 800ecfa:	2301      	movs	r3, #1
 800ecfc:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800ed00:	e73a      	b.n	800eb78 <_strtod_l+0x6d8>
 800ed02:	9912      	ldr	r1, [sp, #72]	; 0x48
 800ed04:	461a      	mov	r2, r3
 800ed06:	4620      	mov	r0, r4
 800ed08:	f000 ff78 	bl	800fbfc <__lshift>
 800ed0c:	9012      	str	r0, [sp, #72]	; 0x48
 800ed0e:	2800      	cmp	r0, #0
 800ed10:	f47f af64 	bne.w	800ebdc <_strtod_l+0x73c>
 800ed14:	e600      	b.n	800e918 <_strtod_l+0x478>
 800ed16:	bf00      	nop
 800ed18:	94a03595 	.word	0x94a03595
 800ed1c:	3fcfffff 	.word	0x3fcfffff
 800ed20:	94a03595 	.word	0x94a03595
 800ed24:	3fdfffff 	.word	0x3fdfffff
 800ed28:	35afe535 	.word	0x35afe535
 800ed2c:	3fe00000 	.word	0x3fe00000
 800ed30:	00000000 	.word	0x00000000
 800ed34:	39500000 	.word	0x39500000
 800ed38:	08011ad8 	.word	0x08011ad8
 800ed3c:	fffffc02 	.word	0xfffffc02
 800ed40:	7ff00000 	.word	0x7ff00000
 800ed44:	46cb      	mov	fp, r9
 800ed46:	d15f      	bne.n	800ee08 <_strtod_l+0x968>
 800ed48:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800ed4c:	f1ba 0f00 	cmp.w	sl, #0
 800ed50:	d02a      	beq.n	800eda8 <_strtod_l+0x908>
 800ed52:	4aa7      	ldr	r2, [pc, #668]	; (800eff0 <_strtod_l+0xb50>)
 800ed54:	4293      	cmp	r3, r2
 800ed56:	d12b      	bne.n	800edb0 <_strtod_l+0x910>
 800ed58:	9b04      	ldr	r3, [sp, #16]
 800ed5a:	4642      	mov	r2, r8
 800ed5c:	b1fb      	cbz	r3, 800ed9e <_strtod_l+0x8fe>
 800ed5e:	4ba5      	ldr	r3, [pc, #660]	; (800eff4 <_strtod_l+0xb54>)
 800ed60:	ea09 0303 	and.w	r3, r9, r3
 800ed64:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800ed68:	f04f 31ff 	mov.w	r1, #4294967295
 800ed6c:	d81a      	bhi.n	800eda4 <_strtod_l+0x904>
 800ed6e:	0d1b      	lsrs	r3, r3, #20
 800ed70:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800ed74:	fa01 f303 	lsl.w	r3, r1, r3
 800ed78:	429a      	cmp	r2, r3
 800ed7a:	d119      	bne.n	800edb0 <_strtod_l+0x910>
 800ed7c:	4b9e      	ldr	r3, [pc, #632]	; (800eff8 <_strtod_l+0xb58>)
 800ed7e:	459b      	cmp	fp, r3
 800ed80:	d102      	bne.n	800ed88 <_strtod_l+0x8e8>
 800ed82:	3201      	adds	r2, #1
 800ed84:	f43f adc8 	beq.w	800e918 <_strtod_l+0x478>
 800ed88:	4b9a      	ldr	r3, [pc, #616]	; (800eff4 <_strtod_l+0xb54>)
 800ed8a:	ea0b 0303 	and.w	r3, fp, r3
 800ed8e:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 800ed92:	f04f 0800 	mov.w	r8, #0
 800ed96:	9b04      	ldr	r3, [sp, #16]
 800ed98:	2b00      	cmp	r3, #0
 800ed9a:	d188      	bne.n	800ecae <_strtod_l+0x80e>
 800ed9c:	e5c6      	b.n	800e92c <_strtod_l+0x48c>
 800ed9e:	f04f 33ff 	mov.w	r3, #4294967295
 800eda2:	e7e9      	b.n	800ed78 <_strtod_l+0x8d8>
 800eda4:	460b      	mov	r3, r1
 800eda6:	e7e7      	b.n	800ed78 <_strtod_l+0x8d8>
 800eda8:	ea53 0308 	orrs.w	r3, r3, r8
 800edac:	f43f af6f 	beq.w	800ec8e <_strtod_l+0x7ee>
 800edb0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800edb2:	b1cb      	cbz	r3, 800ede8 <_strtod_l+0x948>
 800edb4:	ea13 0f0b 	tst.w	r3, fp
 800edb8:	d0ed      	beq.n	800ed96 <_strtod_l+0x8f6>
 800edba:	9a04      	ldr	r2, [sp, #16]
 800edbc:	4640      	mov	r0, r8
 800edbe:	4649      	mov	r1, r9
 800edc0:	f1ba 0f00 	cmp.w	sl, #0
 800edc4:	d014      	beq.n	800edf0 <_strtod_l+0x950>
 800edc6:	f7ff fb4f 	bl	800e468 <sulp>
 800edca:	ee38 7b00 	vadd.f64	d7, d8, d0
 800edce:	ec59 8b17 	vmov	r8, r9, d7
 800edd2:	e7e0      	b.n	800ed96 <_strtod_l+0x8f6>
 800edd4:	4013      	ands	r3, r2
 800edd6:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800edda:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 800edde:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 800ede2:	f04f 38ff 	mov.w	r8, #4294967295
 800ede6:	e7d6      	b.n	800ed96 <_strtod_l+0x8f6>
 800ede8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800edea:	ea13 0f08 	tst.w	r3, r8
 800edee:	e7e3      	b.n	800edb8 <_strtod_l+0x918>
 800edf0:	f7ff fb3a 	bl	800e468 <sulp>
 800edf4:	ee38 0b40 	vsub.f64	d0, d8, d0
 800edf8:	eeb5 0b40 	vcmp.f64	d0, #0.0
 800edfc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ee00:	ec59 8b10 	vmov	r8, r9, d0
 800ee04:	d1c7      	bne.n	800ed96 <_strtod_l+0x8f6>
 800ee06:	e5f7      	b.n	800e9f8 <_strtod_l+0x558>
 800ee08:	4631      	mov	r1, r6
 800ee0a:	4628      	mov	r0, r5
 800ee0c:	f001 f8e4 	bl	800ffd8 <__ratio>
 800ee10:	eeb0 7b00 	vmov.f64	d7, #0	; 0x40000000  2.0
 800ee14:	eeb4 0bc7 	vcmpe.f64	d0, d7
 800ee18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ee1c:	d865      	bhi.n	800eeea <_strtod_l+0xa4a>
 800ee1e:	f1ba 0f00 	cmp.w	sl, #0
 800ee22:	d042      	beq.n	800eeaa <_strtod_l+0xa0a>
 800ee24:	4b75      	ldr	r3, [pc, #468]	; (800effc <_strtod_l+0xb5c>)
 800ee26:	2200      	movs	r2, #0
 800ee28:	eeb7 db00 	vmov.f64	d13, #112	; 0x3f800000  1.0
 800ee2c:	4871      	ldr	r0, [pc, #452]	; (800eff4 <_strtod_l+0xb54>)
 800ee2e:	f8df c1d8 	ldr.w	ip, [pc, #472]	; 800f008 <_strtod_l+0xb68>
 800ee32:	ea0b 0100 	and.w	r1, fp, r0
 800ee36:	4561      	cmp	r1, ip
 800ee38:	f040 808e 	bne.w	800ef58 <_strtod_l+0xab8>
 800ee3c:	f1ab 7954 	sub.w	r9, fp, #55574528	; 0x3500000
 800ee40:	ec49 8b10 	vmov	d0, r8, r9
 800ee44:	ec43 2b1c 	vmov	d12, r2, r3
 800ee48:	910a      	str	r1, [sp, #40]	; 0x28
 800ee4a:	f000 ffed 	bl	800fe28 <__ulp>
 800ee4e:	ec49 8b1e 	vmov	d14, r8, r9
 800ee52:	4868      	ldr	r0, [pc, #416]	; (800eff4 <_strtod_l+0xb54>)
 800ee54:	eeac eb00 	vfma.f64	d14, d12, d0
 800ee58:	ee1e 3a90 	vmov	r3, s29
 800ee5c:	4a68      	ldr	r2, [pc, #416]	; (800f000 <_strtod_l+0xb60>)
 800ee5e:	990a      	ldr	r1, [sp, #40]	; 0x28
 800ee60:	4018      	ands	r0, r3
 800ee62:	4290      	cmp	r0, r2
 800ee64:	ec59 8b1e 	vmov	r8, r9, d14
 800ee68:	d94e      	bls.n	800ef08 <_strtod_l+0xa68>
 800ee6a:	ee18 3a90 	vmov	r3, s17
 800ee6e:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800ee72:	4293      	cmp	r3, r2
 800ee74:	d104      	bne.n	800ee80 <_strtod_l+0x9e0>
 800ee76:	ee18 3a10 	vmov	r3, s16
 800ee7a:	3301      	adds	r3, #1
 800ee7c:	f43f ad4c 	beq.w	800e918 <_strtod_l+0x478>
 800ee80:	f8df 9174 	ldr.w	r9, [pc, #372]	; 800eff8 <_strtod_l+0xb58>
 800ee84:	f04f 38ff 	mov.w	r8, #4294967295
 800ee88:	9912      	ldr	r1, [sp, #72]	; 0x48
 800ee8a:	4620      	mov	r0, r4
 800ee8c:	f000 fc9a 	bl	800f7c4 <_Bfree>
 800ee90:	4639      	mov	r1, r7
 800ee92:	4620      	mov	r0, r4
 800ee94:	f000 fc96 	bl	800f7c4 <_Bfree>
 800ee98:	4631      	mov	r1, r6
 800ee9a:	4620      	mov	r0, r4
 800ee9c:	f000 fc92 	bl	800f7c4 <_Bfree>
 800eea0:	4629      	mov	r1, r5
 800eea2:	4620      	mov	r0, r4
 800eea4:	f000 fc8e 	bl	800f7c4 <_Bfree>
 800eea8:	e619      	b.n	800eade <_strtod_l+0x63e>
 800eeaa:	f1b8 0f00 	cmp.w	r8, #0
 800eeae:	d112      	bne.n	800eed6 <_strtod_l+0xa36>
 800eeb0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800eeb4:	b9b3      	cbnz	r3, 800eee4 <_strtod_l+0xa44>
 800eeb6:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 800eeba:	eeb4 0bc7 	vcmpe.f64	d0, d7
 800eebe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eec2:	eeb6 db00 	vmov.f64	d13, #96	; 0x3f000000  0.5
 800eec6:	bf58      	it	pl
 800eec8:	ee20 db0d 	vmulpl.f64	d13, d0, d13
 800eecc:	eeb1 7b4d 	vneg.f64	d7, d13
 800eed0:	ec53 2b17 	vmov	r2, r3, d7
 800eed4:	e7aa      	b.n	800ee2c <_strtod_l+0x98c>
 800eed6:	f1b8 0f01 	cmp.w	r8, #1
 800eeda:	d103      	bne.n	800eee4 <_strtod_l+0xa44>
 800eedc:	f1b9 0f00 	cmp.w	r9, #0
 800eee0:	f43f ad8a 	beq.w	800e9f8 <_strtod_l+0x558>
 800eee4:	4b47      	ldr	r3, [pc, #284]	; (800f004 <_strtod_l+0xb64>)
 800eee6:	2200      	movs	r2, #0
 800eee8:	e79e      	b.n	800ee28 <_strtod_l+0x988>
 800eeea:	eeb6 db00 	vmov.f64	d13, #96	; 0x3f000000  0.5
 800eeee:	ee20 db0d 	vmul.f64	d13, d0, d13
 800eef2:	f1ba 0f00 	cmp.w	sl, #0
 800eef6:	d104      	bne.n	800ef02 <_strtod_l+0xa62>
 800eef8:	eeb1 7b4d 	vneg.f64	d7, d13
 800eefc:	ec53 2b17 	vmov	r2, r3, d7
 800ef00:	e794      	b.n	800ee2c <_strtod_l+0x98c>
 800ef02:	eeb0 7b4d 	vmov.f64	d7, d13
 800ef06:	e7f9      	b.n	800eefc <_strtod_l+0xa5c>
 800ef08:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 800ef0c:	9b04      	ldr	r3, [sp, #16]
 800ef0e:	2b00      	cmp	r3, #0
 800ef10:	d1ba      	bne.n	800ee88 <_strtod_l+0x9e8>
 800ef12:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800ef16:	0d1b      	lsrs	r3, r3, #20
 800ef18:	051b      	lsls	r3, r3, #20
 800ef1a:	4299      	cmp	r1, r3
 800ef1c:	d1b4      	bne.n	800ee88 <_strtod_l+0x9e8>
 800ef1e:	ec51 0b1d 	vmov	r0, r1, d13
 800ef22:	f7f1 fc09 	bl	8000738 <__aeabi_d2lz>
 800ef26:	f7f1 fbc1 	bl	80006ac <__aeabi_l2d>
 800ef2a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800ef2e:	ec41 0b17 	vmov	d7, r0, r1
 800ef32:	ea43 0308 	orr.w	r3, r3, r8
 800ef36:	ea53 030a 	orrs.w	r3, r3, sl
 800ef3a:	ee3d db47 	vsub.f64	d13, d13, d7
 800ef3e:	d03c      	beq.n	800efba <_strtod_l+0xb1a>
 800ef40:	eeb4 dbca 	vcmpe.f64	d13, d10
 800ef44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ef48:	f53f acf0 	bmi.w	800e92c <_strtod_l+0x48c>
 800ef4c:	eeb4 dbcb 	vcmpe.f64	d13, d11
 800ef50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ef54:	dd98      	ble.n	800ee88 <_strtod_l+0x9e8>
 800ef56:	e4e9      	b.n	800e92c <_strtod_l+0x48c>
 800ef58:	9804      	ldr	r0, [sp, #16]
 800ef5a:	b1f0      	cbz	r0, 800ef9a <_strtod_l+0xafa>
 800ef5c:	f1b1 6fd4 	cmp.w	r1, #111149056	; 0x6a00000
 800ef60:	d81b      	bhi.n	800ef9a <_strtod_l+0xafa>
 800ef62:	ed9f 7b21 	vldr	d7, [pc, #132]	; 800efe8 <_strtod_l+0xb48>
 800ef66:	eeb4 dbc7 	vcmpe.f64	d13, d7
 800ef6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ef6e:	d811      	bhi.n	800ef94 <_strtod_l+0xaf4>
 800ef70:	eebc dbcd 	vcvt.u32.f64	s26, d13
 800ef74:	ee1d 3a10 	vmov	r3, s26
 800ef78:	2b01      	cmp	r3, #1
 800ef7a:	bf38      	it	cc
 800ef7c:	2301      	movcc	r3, #1
 800ef7e:	ee0d 3a10 	vmov	s26, r3
 800ef82:	eeb8 db4d 	vcvt.f64.u32	d13, s26
 800ef86:	f1ba 0f00 	cmp.w	sl, #0
 800ef8a:	d113      	bne.n	800efb4 <_strtod_l+0xb14>
 800ef8c:	eeb1 7b4d 	vneg.f64	d7, d13
 800ef90:	ec53 2b17 	vmov	r2, r3, d7
 800ef94:	f103 60d6 	add.w	r0, r3, #112197632	; 0x6b00000
 800ef98:	1a43      	subs	r3, r0, r1
 800ef9a:	eeb0 0b48 	vmov.f64	d0, d8
 800ef9e:	ec43 2b1c 	vmov	d12, r2, r3
 800efa2:	910a      	str	r1, [sp, #40]	; 0x28
 800efa4:	f000 ff40 	bl	800fe28 <__ulp>
 800efa8:	990a      	ldr	r1, [sp, #40]	; 0x28
 800efaa:	eeac 8b00 	vfma.f64	d8, d12, d0
 800efae:	ec59 8b18 	vmov	r8, r9, d8
 800efb2:	e7ab      	b.n	800ef0c <_strtod_l+0xa6c>
 800efb4:	eeb0 7b4d 	vmov.f64	d7, d13
 800efb8:	e7ea      	b.n	800ef90 <_strtod_l+0xaf0>
 800efba:	eeb4 dbc9 	vcmpe.f64	d13, d9
 800efbe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800efc2:	f57f af61 	bpl.w	800ee88 <_strtod_l+0x9e8>
 800efc6:	e4b1      	b.n	800e92c <_strtod_l+0x48c>
 800efc8:	2300      	movs	r3, #0
 800efca:	9308      	str	r3, [sp, #32]
 800efcc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800efce:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800efd0:	6013      	str	r3, [r2, #0]
 800efd2:	f7ff baad 	b.w	800e530 <_strtod_l+0x90>
 800efd6:	2a65      	cmp	r2, #101	; 0x65
 800efd8:	f43f ab9f 	beq.w	800e71a <_strtod_l+0x27a>
 800efdc:	2a45      	cmp	r2, #69	; 0x45
 800efde:	f43f ab9c 	beq.w	800e71a <_strtod_l+0x27a>
 800efe2:	2101      	movs	r1, #1
 800efe4:	f7ff bbd4 	b.w	800e790 <_strtod_l+0x2f0>
 800efe8:	ffc00000 	.word	0xffc00000
 800efec:	41dfffff 	.word	0x41dfffff
 800eff0:	000fffff 	.word	0x000fffff
 800eff4:	7ff00000 	.word	0x7ff00000
 800eff8:	7fefffff 	.word	0x7fefffff
 800effc:	3ff00000 	.word	0x3ff00000
 800f000:	7c9fffff 	.word	0x7c9fffff
 800f004:	bff00000 	.word	0xbff00000
 800f008:	7fe00000 	.word	0x7fe00000

0800f00c <strtod>:
 800f00c:	460a      	mov	r2, r1
 800f00e:	4601      	mov	r1, r0
 800f010:	4802      	ldr	r0, [pc, #8]	; (800f01c <strtod+0x10>)
 800f012:	4b03      	ldr	r3, [pc, #12]	; (800f020 <strtod+0x14>)
 800f014:	6800      	ldr	r0, [r0, #0]
 800f016:	f7ff ba43 	b.w	800e4a0 <_strtod_l>
 800f01a:	bf00      	nop
 800f01c:	24000084 	.word	0x24000084
 800f020:	240000ec 	.word	0x240000ec

0800f024 <rshift>:
 800f024:	6903      	ldr	r3, [r0, #16]
 800f026:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800f02a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800f02e:	ea4f 1261 	mov.w	r2, r1, asr #5
 800f032:	f100 0414 	add.w	r4, r0, #20
 800f036:	dd45      	ble.n	800f0c4 <rshift+0xa0>
 800f038:	f011 011f 	ands.w	r1, r1, #31
 800f03c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800f040:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800f044:	d10c      	bne.n	800f060 <rshift+0x3c>
 800f046:	f100 0710 	add.w	r7, r0, #16
 800f04a:	4629      	mov	r1, r5
 800f04c:	42b1      	cmp	r1, r6
 800f04e:	d334      	bcc.n	800f0ba <rshift+0x96>
 800f050:	1a9b      	subs	r3, r3, r2
 800f052:	009b      	lsls	r3, r3, #2
 800f054:	1eea      	subs	r2, r5, #3
 800f056:	4296      	cmp	r6, r2
 800f058:	bf38      	it	cc
 800f05a:	2300      	movcc	r3, #0
 800f05c:	4423      	add	r3, r4
 800f05e:	e015      	b.n	800f08c <rshift+0x68>
 800f060:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800f064:	f1c1 0820 	rsb	r8, r1, #32
 800f068:	40cf      	lsrs	r7, r1
 800f06a:	f105 0e04 	add.w	lr, r5, #4
 800f06e:	46a1      	mov	r9, r4
 800f070:	4576      	cmp	r6, lr
 800f072:	46f4      	mov	ip, lr
 800f074:	d815      	bhi.n	800f0a2 <rshift+0x7e>
 800f076:	1a9a      	subs	r2, r3, r2
 800f078:	0092      	lsls	r2, r2, #2
 800f07a:	3a04      	subs	r2, #4
 800f07c:	3501      	adds	r5, #1
 800f07e:	42ae      	cmp	r6, r5
 800f080:	bf38      	it	cc
 800f082:	2200      	movcc	r2, #0
 800f084:	18a3      	adds	r3, r4, r2
 800f086:	50a7      	str	r7, [r4, r2]
 800f088:	b107      	cbz	r7, 800f08c <rshift+0x68>
 800f08a:	3304      	adds	r3, #4
 800f08c:	1b1a      	subs	r2, r3, r4
 800f08e:	42a3      	cmp	r3, r4
 800f090:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800f094:	bf08      	it	eq
 800f096:	2300      	moveq	r3, #0
 800f098:	6102      	str	r2, [r0, #16]
 800f09a:	bf08      	it	eq
 800f09c:	6143      	streq	r3, [r0, #20]
 800f09e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f0a2:	f8dc c000 	ldr.w	ip, [ip]
 800f0a6:	fa0c fc08 	lsl.w	ip, ip, r8
 800f0aa:	ea4c 0707 	orr.w	r7, ip, r7
 800f0ae:	f849 7b04 	str.w	r7, [r9], #4
 800f0b2:	f85e 7b04 	ldr.w	r7, [lr], #4
 800f0b6:	40cf      	lsrs	r7, r1
 800f0b8:	e7da      	b.n	800f070 <rshift+0x4c>
 800f0ba:	f851 cb04 	ldr.w	ip, [r1], #4
 800f0be:	f847 cf04 	str.w	ip, [r7, #4]!
 800f0c2:	e7c3      	b.n	800f04c <rshift+0x28>
 800f0c4:	4623      	mov	r3, r4
 800f0c6:	e7e1      	b.n	800f08c <rshift+0x68>

0800f0c8 <__hexdig_fun>:
 800f0c8:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800f0cc:	2b09      	cmp	r3, #9
 800f0ce:	d802      	bhi.n	800f0d6 <__hexdig_fun+0xe>
 800f0d0:	3820      	subs	r0, #32
 800f0d2:	b2c0      	uxtb	r0, r0
 800f0d4:	4770      	bx	lr
 800f0d6:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800f0da:	2b05      	cmp	r3, #5
 800f0dc:	d801      	bhi.n	800f0e2 <__hexdig_fun+0x1a>
 800f0de:	3847      	subs	r0, #71	; 0x47
 800f0e0:	e7f7      	b.n	800f0d2 <__hexdig_fun+0xa>
 800f0e2:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800f0e6:	2b05      	cmp	r3, #5
 800f0e8:	d801      	bhi.n	800f0ee <__hexdig_fun+0x26>
 800f0ea:	3827      	subs	r0, #39	; 0x27
 800f0ec:	e7f1      	b.n	800f0d2 <__hexdig_fun+0xa>
 800f0ee:	2000      	movs	r0, #0
 800f0f0:	4770      	bx	lr
	...

0800f0f4 <__gethex>:
 800f0f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f0f8:	ed2d 8b02 	vpush	{d8}
 800f0fc:	b089      	sub	sp, #36	; 0x24
 800f0fe:	ee08 0a10 	vmov	s16, r0
 800f102:	9304      	str	r3, [sp, #16]
 800f104:	4bb4      	ldr	r3, [pc, #720]	; (800f3d8 <__gethex+0x2e4>)
 800f106:	681b      	ldr	r3, [r3, #0]
 800f108:	9301      	str	r3, [sp, #4]
 800f10a:	4618      	mov	r0, r3
 800f10c:	468b      	mov	fp, r1
 800f10e:	4690      	mov	r8, r2
 800f110:	f7f1 f8e6 	bl	80002e0 <strlen>
 800f114:	9b01      	ldr	r3, [sp, #4]
 800f116:	f8db 2000 	ldr.w	r2, [fp]
 800f11a:	4403      	add	r3, r0
 800f11c:	4682      	mov	sl, r0
 800f11e:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800f122:	9305      	str	r3, [sp, #20]
 800f124:	1c93      	adds	r3, r2, #2
 800f126:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800f12a:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800f12e:	32fe      	adds	r2, #254	; 0xfe
 800f130:	18d1      	adds	r1, r2, r3
 800f132:	461f      	mov	r7, r3
 800f134:	f813 0b01 	ldrb.w	r0, [r3], #1
 800f138:	9100      	str	r1, [sp, #0]
 800f13a:	2830      	cmp	r0, #48	; 0x30
 800f13c:	d0f8      	beq.n	800f130 <__gethex+0x3c>
 800f13e:	f7ff ffc3 	bl	800f0c8 <__hexdig_fun>
 800f142:	4604      	mov	r4, r0
 800f144:	2800      	cmp	r0, #0
 800f146:	d13a      	bne.n	800f1be <__gethex+0xca>
 800f148:	9901      	ldr	r1, [sp, #4]
 800f14a:	4652      	mov	r2, sl
 800f14c:	4638      	mov	r0, r7
 800f14e:	f001 f87b 	bl	8010248 <strncmp>
 800f152:	4605      	mov	r5, r0
 800f154:	2800      	cmp	r0, #0
 800f156:	d168      	bne.n	800f22a <__gethex+0x136>
 800f158:	f817 000a 	ldrb.w	r0, [r7, sl]
 800f15c:	eb07 060a 	add.w	r6, r7, sl
 800f160:	f7ff ffb2 	bl	800f0c8 <__hexdig_fun>
 800f164:	2800      	cmp	r0, #0
 800f166:	d062      	beq.n	800f22e <__gethex+0x13a>
 800f168:	4633      	mov	r3, r6
 800f16a:	7818      	ldrb	r0, [r3, #0]
 800f16c:	2830      	cmp	r0, #48	; 0x30
 800f16e:	461f      	mov	r7, r3
 800f170:	f103 0301 	add.w	r3, r3, #1
 800f174:	d0f9      	beq.n	800f16a <__gethex+0x76>
 800f176:	f7ff ffa7 	bl	800f0c8 <__hexdig_fun>
 800f17a:	2301      	movs	r3, #1
 800f17c:	fab0 f480 	clz	r4, r0
 800f180:	0964      	lsrs	r4, r4, #5
 800f182:	4635      	mov	r5, r6
 800f184:	9300      	str	r3, [sp, #0]
 800f186:	463a      	mov	r2, r7
 800f188:	4616      	mov	r6, r2
 800f18a:	3201      	adds	r2, #1
 800f18c:	7830      	ldrb	r0, [r6, #0]
 800f18e:	f7ff ff9b 	bl	800f0c8 <__hexdig_fun>
 800f192:	2800      	cmp	r0, #0
 800f194:	d1f8      	bne.n	800f188 <__gethex+0x94>
 800f196:	9901      	ldr	r1, [sp, #4]
 800f198:	4652      	mov	r2, sl
 800f19a:	4630      	mov	r0, r6
 800f19c:	f001 f854 	bl	8010248 <strncmp>
 800f1a0:	b980      	cbnz	r0, 800f1c4 <__gethex+0xd0>
 800f1a2:	b94d      	cbnz	r5, 800f1b8 <__gethex+0xc4>
 800f1a4:	eb06 050a 	add.w	r5, r6, sl
 800f1a8:	462a      	mov	r2, r5
 800f1aa:	4616      	mov	r6, r2
 800f1ac:	3201      	adds	r2, #1
 800f1ae:	7830      	ldrb	r0, [r6, #0]
 800f1b0:	f7ff ff8a 	bl	800f0c8 <__hexdig_fun>
 800f1b4:	2800      	cmp	r0, #0
 800f1b6:	d1f8      	bne.n	800f1aa <__gethex+0xb6>
 800f1b8:	1bad      	subs	r5, r5, r6
 800f1ba:	00ad      	lsls	r5, r5, #2
 800f1bc:	e004      	b.n	800f1c8 <__gethex+0xd4>
 800f1be:	2400      	movs	r4, #0
 800f1c0:	4625      	mov	r5, r4
 800f1c2:	e7e0      	b.n	800f186 <__gethex+0x92>
 800f1c4:	2d00      	cmp	r5, #0
 800f1c6:	d1f7      	bne.n	800f1b8 <__gethex+0xc4>
 800f1c8:	7833      	ldrb	r3, [r6, #0]
 800f1ca:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800f1ce:	2b50      	cmp	r3, #80	; 0x50
 800f1d0:	d13b      	bne.n	800f24a <__gethex+0x156>
 800f1d2:	7873      	ldrb	r3, [r6, #1]
 800f1d4:	2b2b      	cmp	r3, #43	; 0x2b
 800f1d6:	d02c      	beq.n	800f232 <__gethex+0x13e>
 800f1d8:	2b2d      	cmp	r3, #45	; 0x2d
 800f1da:	d02e      	beq.n	800f23a <__gethex+0x146>
 800f1dc:	1c71      	adds	r1, r6, #1
 800f1de:	f04f 0900 	mov.w	r9, #0
 800f1e2:	7808      	ldrb	r0, [r1, #0]
 800f1e4:	f7ff ff70 	bl	800f0c8 <__hexdig_fun>
 800f1e8:	1e43      	subs	r3, r0, #1
 800f1ea:	b2db      	uxtb	r3, r3
 800f1ec:	2b18      	cmp	r3, #24
 800f1ee:	d82c      	bhi.n	800f24a <__gethex+0x156>
 800f1f0:	f1a0 0210 	sub.w	r2, r0, #16
 800f1f4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800f1f8:	f7ff ff66 	bl	800f0c8 <__hexdig_fun>
 800f1fc:	1e43      	subs	r3, r0, #1
 800f1fe:	b2db      	uxtb	r3, r3
 800f200:	2b18      	cmp	r3, #24
 800f202:	d91d      	bls.n	800f240 <__gethex+0x14c>
 800f204:	f1b9 0f00 	cmp.w	r9, #0
 800f208:	d000      	beq.n	800f20c <__gethex+0x118>
 800f20a:	4252      	negs	r2, r2
 800f20c:	4415      	add	r5, r2
 800f20e:	f8cb 1000 	str.w	r1, [fp]
 800f212:	b1e4      	cbz	r4, 800f24e <__gethex+0x15a>
 800f214:	9b00      	ldr	r3, [sp, #0]
 800f216:	2b00      	cmp	r3, #0
 800f218:	bf14      	ite	ne
 800f21a:	2700      	movne	r7, #0
 800f21c:	2706      	moveq	r7, #6
 800f21e:	4638      	mov	r0, r7
 800f220:	b009      	add	sp, #36	; 0x24
 800f222:	ecbd 8b02 	vpop	{d8}
 800f226:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f22a:	463e      	mov	r6, r7
 800f22c:	4625      	mov	r5, r4
 800f22e:	2401      	movs	r4, #1
 800f230:	e7ca      	b.n	800f1c8 <__gethex+0xd4>
 800f232:	f04f 0900 	mov.w	r9, #0
 800f236:	1cb1      	adds	r1, r6, #2
 800f238:	e7d3      	b.n	800f1e2 <__gethex+0xee>
 800f23a:	f04f 0901 	mov.w	r9, #1
 800f23e:	e7fa      	b.n	800f236 <__gethex+0x142>
 800f240:	230a      	movs	r3, #10
 800f242:	fb03 0202 	mla	r2, r3, r2, r0
 800f246:	3a10      	subs	r2, #16
 800f248:	e7d4      	b.n	800f1f4 <__gethex+0x100>
 800f24a:	4631      	mov	r1, r6
 800f24c:	e7df      	b.n	800f20e <__gethex+0x11a>
 800f24e:	1bf3      	subs	r3, r6, r7
 800f250:	3b01      	subs	r3, #1
 800f252:	4621      	mov	r1, r4
 800f254:	2b07      	cmp	r3, #7
 800f256:	dc0b      	bgt.n	800f270 <__gethex+0x17c>
 800f258:	ee18 0a10 	vmov	r0, s16
 800f25c:	f000 fa72 	bl	800f744 <_Balloc>
 800f260:	4604      	mov	r4, r0
 800f262:	b940      	cbnz	r0, 800f276 <__gethex+0x182>
 800f264:	4b5d      	ldr	r3, [pc, #372]	; (800f3dc <__gethex+0x2e8>)
 800f266:	4602      	mov	r2, r0
 800f268:	21de      	movs	r1, #222	; 0xde
 800f26a:	485d      	ldr	r0, [pc, #372]	; (800f3e0 <__gethex+0x2ec>)
 800f26c:	f001 f80e 	bl	801028c <__assert_func>
 800f270:	3101      	adds	r1, #1
 800f272:	105b      	asrs	r3, r3, #1
 800f274:	e7ee      	b.n	800f254 <__gethex+0x160>
 800f276:	f100 0914 	add.w	r9, r0, #20
 800f27a:	f04f 0b00 	mov.w	fp, #0
 800f27e:	f1ca 0301 	rsb	r3, sl, #1
 800f282:	f8cd 9008 	str.w	r9, [sp, #8]
 800f286:	f8cd b000 	str.w	fp, [sp]
 800f28a:	9306      	str	r3, [sp, #24]
 800f28c:	42b7      	cmp	r7, r6
 800f28e:	d340      	bcc.n	800f312 <__gethex+0x21e>
 800f290:	9802      	ldr	r0, [sp, #8]
 800f292:	9b00      	ldr	r3, [sp, #0]
 800f294:	f840 3b04 	str.w	r3, [r0], #4
 800f298:	eba0 0009 	sub.w	r0, r0, r9
 800f29c:	1080      	asrs	r0, r0, #2
 800f29e:	0146      	lsls	r6, r0, #5
 800f2a0:	6120      	str	r0, [r4, #16]
 800f2a2:	4618      	mov	r0, r3
 800f2a4:	f000 fb40 	bl	800f928 <__hi0bits>
 800f2a8:	1a30      	subs	r0, r6, r0
 800f2aa:	f8d8 6000 	ldr.w	r6, [r8]
 800f2ae:	42b0      	cmp	r0, r6
 800f2b0:	dd63      	ble.n	800f37a <__gethex+0x286>
 800f2b2:	1b87      	subs	r7, r0, r6
 800f2b4:	4639      	mov	r1, r7
 800f2b6:	4620      	mov	r0, r4
 800f2b8:	f000 fee1 	bl	801007e <__any_on>
 800f2bc:	4682      	mov	sl, r0
 800f2be:	b1a8      	cbz	r0, 800f2ec <__gethex+0x1f8>
 800f2c0:	1e7b      	subs	r3, r7, #1
 800f2c2:	1159      	asrs	r1, r3, #5
 800f2c4:	f003 021f 	and.w	r2, r3, #31
 800f2c8:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800f2cc:	f04f 0a01 	mov.w	sl, #1
 800f2d0:	fa0a f202 	lsl.w	r2, sl, r2
 800f2d4:	420a      	tst	r2, r1
 800f2d6:	d009      	beq.n	800f2ec <__gethex+0x1f8>
 800f2d8:	4553      	cmp	r3, sl
 800f2da:	dd05      	ble.n	800f2e8 <__gethex+0x1f4>
 800f2dc:	1eb9      	subs	r1, r7, #2
 800f2de:	4620      	mov	r0, r4
 800f2e0:	f000 fecd 	bl	801007e <__any_on>
 800f2e4:	2800      	cmp	r0, #0
 800f2e6:	d145      	bne.n	800f374 <__gethex+0x280>
 800f2e8:	f04f 0a02 	mov.w	sl, #2
 800f2ec:	4639      	mov	r1, r7
 800f2ee:	4620      	mov	r0, r4
 800f2f0:	f7ff fe98 	bl	800f024 <rshift>
 800f2f4:	443d      	add	r5, r7
 800f2f6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800f2fa:	42ab      	cmp	r3, r5
 800f2fc:	da4c      	bge.n	800f398 <__gethex+0x2a4>
 800f2fe:	ee18 0a10 	vmov	r0, s16
 800f302:	4621      	mov	r1, r4
 800f304:	f000 fa5e 	bl	800f7c4 <_Bfree>
 800f308:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800f30a:	2300      	movs	r3, #0
 800f30c:	6013      	str	r3, [r2, #0]
 800f30e:	27a3      	movs	r7, #163	; 0xa3
 800f310:	e785      	b.n	800f21e <__gethex+0x12a>
 800f312:	1e73      	subs	r3, r6, #1
 800f314:	9a05      	ldr	r2, [sp, #20]
 800f316:	9303      	str	r3, [sp, #12]
 800f318:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800f31c:	4293      	cmp	r3, r2
 800f31e:	d019      	beq.n	800f354 <__gethex+0x260>
 800f320:	f1bb 0f20 	cmp.w	fp, #32
 800f324:	d107      	bne.n	800f336 <__gethex+0x242>
 800f326:	9b02      	ldr	r3, [sp, #8]
 800f328:	9a00      	ldr	r2, [sp, #0]
 800f32a:	f843 2b04 	str.w	r2, [r3], #4
 800f32e:	9302      	str	r3, [sp, #8]
 800f330:	2300      	movs	r3, #0
 800f332:	9300      	str	r3, [sp, #0]
 800f334:	469b      	mov	fp, r3
 800f336:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800f33a:	f7ff fec5 	bl	800f0c8 <__hexdig_fun>
 800f33e:	9b00      	ldr	r3, [sp, #0]
 800f340:	f000 000f 	and.w	r0, r0, #15
 800f344:	fa00 f00b 	lsl.w	r0, r0, fp
 800f348:	4303      	orrs	r3, r0
 800f34a:	9300      	str	r3, [sp, #0]
 800f34c:	f10b 0b04 	add.w	fp, fp, #4
 800f350:	9b03      	ldr	r3, [sp, #12]
 800f352:	e00d      	b.n	800f370 <__gethex+0x27c>
 800f354:	9b03      	ldr	r3, [sp, #12]
 800f356:	9a06      	ldr	r2, [sp, #24]
 800f358:	4413      	add	r3, r2
 800f35a:	42bb      	cmp	r3, r7
 800f35c:	d3e0      	bcc.n	800f320 <__gethex+0x22c>
 800f35e:	4618      	mov	r0, r3
 800f360:	9901      	ldr	r1, [sp, #4]
 800f362:	9307      	str	r3, [sp, #28]
 800f364:	4652      	mov	r2, sl
 800f366:	f000 ff6f 	bl	8010248 <strncmp>
 800f36a:	9b07      	ldr	r3, [sp, #28]
 800f36c:	2800      	cmp	r0, #0
 800f36e:	d1d7      	bne.n	800f320 <__gethex+0x22c>
 800f370:	461e      	mov	r6, r3
 800f372:	e78b      	b.n	800f28c <__gethex+0x198>
 800f374:	f04f 0a03 	mov.w	sl, #3
 800f378:	e7b8      	b.n	800f2ec <__gethex+0x1f8>
 800f37a:	da0a      	bge.n	800f392 <__gethex+0x29e>
 800f37c:	1a37      	subs	r7, r6, r0
 800f37e:	4621      	mov	r1, r4
 800f380:	ee18 0a10 	vmov	r0, s16
 800f384:	463a      	mov	r2, r7
 800f386:	f000 fc39 	bl	800fbfc <__lshift>
 800f38a:	1bed      	subs	r5, r5, r7
 800f38c:	4604      	mov	r4, r0
 800f38e:	f100 0914 	add.w	r9, r0, #20
 800f392:	f04f 0a00 	mov.w	sl, #0
 800f396:	e7ae      	b.n	800f2f6 <__gethex+0x202>
 800f398:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800f39c:	42a8      	cmp	r0, r5
 800f39e:	dd72      	ble.n	800f486 <__gethex+0x392>
 800f3a0:	1b45      	subs	r5, r0, r5
 800f3a2:	42ae      	cmp	r6, r5
 800f3a4:	dc36      	bgt.n	800f414 <__gethex+0x320>
 800f3a6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800f3aa:	2b02      	cmp	r3, #2
 800f3ac:	d02a      	beq.n	800f404 <__gethex+0x310>
 800f3ae:	2b03      	cmp	r3, #3
 800f3b0:	d02c      	beq.n	800f40c <__gethex+0x318>
 800f3b2:	2b01      	cmp	r3, #1
 800f3b4:	d11c      	bne.n	800f3f0 <__gethex+0x2fc>
 800f3b6:	42ae      	cmp	r6, r5
 800f3b8:	d11a      	bne.n	800f3f0 <__gethex+0x2fc>
 800f3ba:	2e01      	cmp	r6, #1
 800f3bc:	d112      	bne.n	800f3e4 <__gethex+0x2f0>
 800f3be:	9a04      	ldr	r2, [sp, #16]
 800f3c0:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800f3c4:	6013      	str	r3, [r2, #0]
 800f3c6:	2301      	movs	r3, #1
 800f3c8:	6123      	str	r3, [r4, #16]
 800f3ca:	f8c9 3000 	str.w	r3, [r9]
 800f3ce:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800f3d0:	2762      	movs	r7, #98	; 0x62
 800f3d2:	601c      	str	r4, [r3, #0]
 800f3d4:	e723      	b.n	800f21e <__gethex+0x12a>
 800f3d6:	bf00      	nop
 800f3d8:	08011b78 	.word	0x08011b78
 800f3dc:	08011b00 	.word	0x08011b00
 800f3e0:	08011b11 	.word	0x08011b11
 800f3e4:	1e71      	subs	r1, r6, #1
 800f3e6:	4620      	mov	r0, r4
 800f3e8:	f000 fe49 	bl	801007e <__any_on>
 800f3ec:	2800      	cmp	r0, #0
 800f3ee:	d1e6      	bne.n	800f3be <__gethex+0x2ca>
 800f3f0:	ee18 0a10 	vmov	r0, s16
 800f3f4:	4621      	mov	r1, r4
 800f3f6:	f000 f9e5 	bl	800f7c4 <_Bfree>
 800f3fa:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800f3fc:	2300      	movs	r3, #0
 800f3fe:	6013      	str	r3, [r2, #0]
 800f400:	2750      	movs	r7, #80	; 0x50
 800f402:	e70c      	b.n	800f21e <__gethex+0x12a>
 800f404:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800f406:	2b00      	cmp	r3, #0
 800f408:	d1f2      	bne.n	800f3f0 <__gethex+0x2fc>
 800f40a:	e7d8      	b.n	800f3be <__gethex+0x2ca>
 800f40c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800f40e:	2b00      	cmp	r3, #0
 800f410:	d1d5      	bne.n	800f3be <__gethex+0x2ca>
 800f412:	e7ed      	b.n	800f3f0 <__gethex+0x2fc>
 800f414:	1e6f      	subs	r7, r5, #1
 800f416:	f1ba 0f00 	cmp.w	sl, #0
 800f41a:	d131      	bne.n	800f480 <__gethex+0x38c>
 800f41c:	b127      	cbz	r7, 800f428 <__gethex+0x334>
 800f41e:	4639      	mov	r1, r7
 800f420:	4620      	mov	r0, r4
 800f422:	f000 fe2c 	bl	801007e <__any_on>
 800f426:	4682      	mov	sl, r0
 800f428:	117b      	asrs	r3, r7, #5
 800f42a:	2101      	movs	r1, #1
 800f42c:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800f430:	f007 071f 	and.w	r7, r7, #31
 800f434:	fa01 f707 	lsl.w	r7, r1, r7
 800f438:	421f      	tst	r7, r3
 800f43a:	4629      	mov	r1, r5
 800f43c:	4620      	mov	r0, r4
 800f43e:	bf18      	it	ne
 800f440:	f04a 0a02 	orrne.w	sl, sl, #2
 800f444:	1b76      	subs	r6, r6, r5
 800f446:	f7ff fded 	bl	800f024 <rshift>
 800f44a:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800f44e:	2702      	movs	r7, #2
 800f450:	f1ba 0f00 	cmp.w	sl, #0
 800f454:	d048      	beq.n	800f4e8 <__gethex+0x3f4>
 800f456:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800f45a:	2b02      	cmp	r3, #2
 800f45c:	d015      	beq.n	800f48a <__gethex+0x396>
 800f45e:	2b03      	cmp	r3, #3
 800f460:	d017      	beq.n	800f492 <__gethex+0x39e>
 800f462:	2b01      	cmp	r3, #1
 800f464:	d109      	bne.n	800f47a <__gethex+0x386>
 800f466:	f01a 0f02 	tst.w	sl, #2
 800f46a:	d006      	beq.n	800f47a <__gethex+0x386>
 800f46c:	f8d9 0000 	ldr.w	r0, [r9]
 800f470:	ea4a 0a00 	orr.w	sl, sl, r0
 800f474:	f01a 0f01 	tst.w	sl, #1
 800f478:	d10e      	bne.n	800f498 <__gethex+0x3a4>
 800f47a:	f047 0710 	orr.w	r7, r7, #16
 800f47e:	e033      	b.n	800f4e8 <__gethex+0x3f4>
 800f480:	f04f 0a01 	mov.w	sl, #1
 800f484:	e7d0      	b.n	800f428 <__gethex+0x334>
 800f486:	2701      	movs	r7, #1
 800f488:	e7e2      	b.n	800f450 <__gethex+0x35c>
 800f48a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800f48c:	f1c3 0301 	rsb	r3, r3, #1
 800f490:	9315      	str	r3, [sp, #84]	; 0x54
 800f492:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800f494:	2b00      	cmp	r3, #0
 800f496:	d0f0      	beq.n	800f47a <__gethex+0x386>
 800f498:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800f49c:	f104 0314 	add.w	r3, r4, #20
 800f4a0:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800f4a4:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800f4a8:	f04f 0c00 	mov.w	ip, #0
 800f4ac:	4618      	mov	r0, r3
 800f4ae:	f853 2b04 	ldr.w	r2, [r3], #4
 800f4b2:	f1b2 3fff 	cmp.w	r2, #4294967295
 800f4b6:	d01c      	beq.n	800f4f2 <__gethex+0x3fe>
 800f4b8:	3201      	adds	r2, #1
 800f4ba:	6002      	str	r2, [r0, #0]
 800f4bc:	2f02      	cmp	r7, #2
 800f4be:	f104 0314 	add.w	r3, r4, #20
 800f4c2:	d13f      	bne.n	800f544 <__gethex+0x450>
 800f4c4:	f8d8 2000 	ldr.w	r2, [r8]
 800f4c8:	3a01      	subs	r2, #1
 800f4ca:	42b2      	cmp	r2, r6
 800f4cc:	d10a      	bne.n	800f4e4 <__gethex+0x3f0>
 800f4ce:	1171      	asrs	r1, r6, #5
 800f4d0:	2201      	movs	r2, #1
 800f4d2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800f4d6:	f006 061f 	and.w	r6, r6, #31
 800f4da:	fa02 f606 	lsl.w	r6, r2, r6
 800f4de:	421e      	tst	r6, r3
 800f4e0:	bf18      	it	ne
 800f4e2:	4617      	movne	r7, r2
 800f4e4:	f047 0720 	orr.w	r7, r7, #32
 800f4e8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800f4ea:	601c      	str	r4, [r3, #0]
 800f4ec:	9b04      	ldr	r3, [sp, #16]
 800f4ee:	601d      	str	r5, [r3, #0]
 800f4f0:	e695      	b.n	800f21e <__gethex+0x12a>
 800f4f2:	4299      	cmp	r1, r3
 800f4f4:	f843 cc04 	str.w	ip, [r3, #-4]
 800f4f8:	d8d8      	bhi.n	800f4ac <__gethex+0x3b8>
 800f4fa:	68a3      	ldr	r3, [r4, #8]
 800f4fc:	459b      	cmp	fp, r3
 800f4fe:	db19      	blt.n	800f534 <__gethex+0x440>
 800f500:	6861      	ldr	r1, [r4, #4]
 800f502:	ee18 0a10 	vmov	r0, s16
 800f506:	3101      	adds	r1, #1
 800f508:	f000 f91c 	bl	800f744 <_Balloc>
 800f50c:	4681      	mov	r9, r0
 800f50e:	b918      	cbnz	r0, 800f518 <__gethex+0x424>
 800f510:	4b1a      	ldr	r3, [pc, #104]	; (800f57c <__gethex+0x488>)
 800f512:	4602      	mov	r2, r0
 800f514:	2184      	movs	r1, #132	; 0x84
 800f516:	e6a8      	b.n	800f26a <__gethex+0x176>
 800f518:	6922      	ldr	r2, [r4, #16]
 800f51a:	3202      	adds	r2, #2
 800f51c:	f104 010c 	add.w	r1, r4, #12
 800f520:	0092      	lsls	r2, r2, #2
 800f522:	300c      	adds	r0, #12
 800f524:	f000 f900 	bl	800f728 <memcpy>
 800f528:	4621      	mov	r1, r4
 800f52a:	ee18 0a10 	vmov	r0, s16
 800f52e:	f000 f949 	bl	800f7c4 <_Bfree>
 800f532:	464c      	mov	r4, r9
 800f534:	6923      	ldr	r3, [r4, #16]
 800f536:	1c5a      	adds	r2, r3, #1
 800f538:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800f53c:	6122      	str	r2, [r4, #16]
 800f53e:	2201      	movs	r2, #1
 800f540:	615a      	str	r2, [r3, #20]
 800f542:	e7bb      	b.n	800f4bc <__gethex+0x3c8>
 800f544:	6922      	ldr	r2, [r4, #16]
 800f546:	455a      	cmp	r2, fp
 800f548:	dd0b      	ble.n	800f562 <__gethex+0x46e>
 800f54a:	2101      	movs	r1, #1
 800f54c:	4620      	mov	r0, r4
 800f54e:	f7ff fd69 	bl	800f024 <rshift>
 800f552:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800f556:	3501      	adds	r5, #1
 800f558:	42ab      	cmp	r3, r5
 800f55a:	f6ff aed0 	blt.w	800f2fe <__gethex+0x20a>
 800f55e:	2701      	movs	r7, #1
 800f560:	e7c0      	b.n	800f4e4 <__gethex+0x3f0>
 800f562:	f016 061f 	ands.w	r6, r6, #31
 800f566:	d0fa      	beq.n	800f55e <__gethex+0x46a>
 800f568:	4453      	add	r3, sl
 800f56a:	f1c6 0620 	rsb	r6, r6, #32
 800f56e:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800f572:	f000 f9d9 	bl	800f928 <__hi0bits>
 800f576:	42b0      	cmp	r0, r6
 800f578:	dbe7      	blt.n	800f54a <__gethex+0x456>
 800f57a:	e7f0      	b.n	800f55e <__gethex+0x46a>
 800f57c:	08011b00 	.word	0x08011b00

0800f580 <L_shift>:
 800f580:	f1c2 0208 	rsb	r2, r2, #8
 800f584:	0092      	lsls	r2, r2, #2
 800f586:	b570      	push	{r4, r5, r6, lr}
 800f588:	f1c2 0620 	rsb	r6, r2, #32
 800f58c:	6843      	ldr	r3, [r0, #4]
 800f58e:	6804      	ldr	r4, [r0, #0]
 800f590:	fa03 f506 	lsl.w	r5, r3, r6
 800f594:	432c      	orrs	r4, r5
 800f596:	40d3      	lsrs	r3, r2
 800f598:	6004      	str	r4, [r0, #0]
 800f59a:	f840 3f04 	str.w	r3, [r0, #4]!
 800f59e:	4288      	cmp	r0, r1
 800f5a0:	d3f4      	bcc.n	800f58c <L_shift+0xc>
 800f5a2:	bd70      	pop	{r4, r5, r6, pc}

0800f5a4 <__match>:
 800f5a4:	b530      	push	{r4, r5, lr}
 800f5a6:	6803      	ldr	r3, [r0, #0]
 800f5a8:	3301      	adds	r3, #1
 800f5aa:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f5ae:	b914      	cbnz	r4, 800f5b6 <__match+0x12>
 800f5b0:	6003      	str	r3, [r0, #0]
 800f5b2:	2001      	movs	r0, #1
 800f5b4:	bd30      	pop	{r4, r5, pc}
 800f5b6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f5ba:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800f5be:	2d19      	cmp	r5, #25
 800f5c0:	bf98      	it	ls
 800f5c2:	3220      	addls	r2, #32
 800f5c4:	42a2      	cmp	r2, r4
 800f5c6:	d0f0      	beq.n	800f5aa <__match+0x6>
 800f5c8:	2000      	movs	r0, #0
 800f5ca:	e7f3      	b.n	800f5b4 <__match+0x10>

0800f5cc <__hexnan>:
 800f5cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f5d0:	680b      	ldr	r3, [r1, #0]
 800f5d2:	115e      	asrs	r6, r3, #5
 800f5d4:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800f5d8:	f013 031f 	ands.w	r3, r3, #31
 800f5dc:	b087      	sub	sp, #28
 800f5de:	bf18      	it	ne
 800f5e0:	3604      	addne	r6, #4
 800f5e2:	2500      	movs	r5, #0
 800f5e4:	1f37      	subs	r7, r6, #4
 800f5e6:	4690      	mov	r8, r2
 800f5e8:	6802      	ldr	r2, [r0, #0]
 800f5ea:	9301      	str	r3, [sp, #4]
 800f5ec:	4682      	mov	sl, r0
 800f5ee:	f846 5c04 	str.w	r5, [r6, #-4]
 800f5f2:	46b9      	mov	r9, r7
 800f5f4:	463c      	mov	r4, r7
 800f5f6:	9502      	str	r5, [sp, #8]
 800f5f8:	46ab      	mov	fp, r5
 800f5fa:	7851      	ldrb	r1, [r2, #1]
 800f5fc:	1c53      	adds	r3, r2, #1
 800f5fe:	9303      	str	r3, [sp, #12]
 800f600:	b341      	cbz	r1, 800f654 <__hexnan+0x88>
 800f602:	4608      	mov	r0, r1
 800f604:	9205      	str	r2, [sp, #20]
 800f606:	9104      	str	r1, [sp, #16]
 800f608:	f7ff fd5e 	bl	800f0c8 <__hexdig_fun>
 800f60c:	2800      	cmp	r0, #0
 800f60e:	d14f      	bne.n	800f6b0 <__hexnan+0xe4>
 800f610:	9904      	ldr	r1, [sp, #16]
 800f612:	9a05      	ldr	r2, [sp, #20]
 800f614:	2920      	cmp	r1, #32
 800f616:	d818      	bhi.n	800f64a <__hexnan+0x7e>
 800f618:	9b02      	ldr	r3, [sp, #8]
 800f61a:	459b      	cmp	fp, r3
 800f61c:	dd13      	ble.n	800f646 <__hexnan+0x7a>
 800f61e:	454c      	cmp	r4, r9
 800f620:	d206      	bcs.n	800f630 <__hexnan+0x64>
 800f622:	2d07      	cmp	r5, #7
 800f624:	dc04      	bgt.n	800f630 <__hexnan+0x64>
 800f626:	462a      	mov	r2, r5
 800f628:	4649      	mov	r1, r9
 800f62a:	4620      	mov	r0, r4
 800f62c:	f7ff ffa8 	bl	800f580 <L_shift>
 800f630:	4544      	cmp	r4, r8
 800f632:	d950      	bls.n	800f6d6 <__hexnan+0x10a>
 800f634:	2300      	movs	r3, #0
 800f636:	f1a4 0904 	sub.w	r9, r4, #4
 800f63a:	f844 3c04 	str.w	r3, [r4, #-4]
 800f63e:	f8cd b008 	str.w	fp, [sp, #8]
 800f642:	464c      	mov	r4, r9
 800f644:	461d      	mov	r5, r3
 800f646:	9a03      	ldr	r2, [sp, #12]
 800f648:	e7d7      	b.n	800f5fa <__hexnan+0x2e>
 800f64a:	2929      	cmp	r1, #41	; 0x29
 800f64c:	d156      	bne.n	800f6fc <__hexnan+0x130>
 800f64e:	3202      	adds	r2, #2
 800f650:	f8ca 2000 	str.w	r2, [sl]
 800f654:	f1bb 0f00 	cmp.w	fp, #0
 800f658:	d050      	beq.n	800f6fc <__hexnan+0x130>
 800f65a:	454c      	cmp	r4, r9
 800f65c:	d206      	bcs.n	800f66c <__hexnan+0xa0>
 800f65e:	2d07      	cmp	r5, #7
 800f660:	dc04      	bgt.n	800f66c <__hexnan+0xa0>
 800f662:	462a      	mov	r2, r5
 800f664:	4649      	mov	r1, r9
 800f666:	4620      	mov	r0, r4
 800f668:	f7ff ff8a 	bl	800f580 <L_shift>
 800f66c:	4544      	cmp	r4, r8
 800f66e:	d934      	bls.n	800f6da <__hexnan+0x10e>
 800f670:	f1a8 0204 	sub.w	r2, r8, #4
 800f674:	4623      	mov	r3, r4
 800f676:	f853 1b04 	ldr.w	r1, [r3], #4
 800f67a:	f842 1f04 	str.w	r1, [r2, #4]!
 800f67e:	429f      	cmp	r7, r3
 800f680:	d2f9      	bcs.n	800f676 <__hexnan+0xaa>
 800f682:	1b3b      	subs	r3, r7, r4
 800f684:	f023 0303 	bic.w	r3, r3, #3
 800f688:	3304      	adds	r3, #4
 800f68a:	3401      	adds	r4, #1
 800f68c:	3e03      	subs	r6, #3
 800f68e:	42b4      	cmp	r4, r6
 800f690:	bf88      	it	hi
 800f692:	2304      	movhi	r3, #4
 800f694:	4443      	add	r3, r8
 800f696:	2200      	movs	r2, #0
 800f698:	f843 2b04 	str.w	r2, [r3], #4
 800f69c:	429f      	cmp	r7, r3
 800f69e:	d2fb      	bcs.n	800f698 <__hexnan+0xcc>
 800f6a0:	683b      	ldr	r3, [r7, #0]
 800f6a2:	b91b      	cbnz	r3, 800f6ac <__hexnan+0xe0>
 800f6a4:	4547      	cmp	r7, r8
 800f6a6:	d127      	bne.n	800f6f8 <__hexnan+0x12c>
 800f6a8:	2301      	movs	r3, #1
 800f6aa:	603b      	str	r3, [r7, #0]
 800f6ac:	2005      	movs	r0, #5
 800f6ae:	e026      	b.n	800f6fe <__hexnan+0x132>
 800f6b0:	3501      	adds	r5, #1
 800f6b2:	2d08      	cmp	r5, #8
 800f6b4:	f10b 0b01 	add.w	fp, fp, #1
 800f6b8:	dd06      	ble.n	800f6c8 <__hexnan+0xfc>
 800f6ba:	4544      	cmp	r4, r8
 800f6bc:	d9c3      	bls.n	800f646 <__hexnan+0x7a>
 800f6be:	2300      	movs	r3, #0
 800f6c0:	f844 3c04 	str.w	r3, [r4, #-4]
 800f6c4:	2501      	movs	r5, #1
 800f6c6:	3c04      	subs	r4, #4
 800f6c8:	6822      	ldr	r2, [r4, #0]
 800f6ca:	f000 000f 	and.w	r0, r0, #15
 800f6ce:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800f6d2:	6022      	str	r2, [r4, #0]
 800f6d4:	e7b7      	b.n	800f646 <__hexnan+0x7a>
 800f6d6:	2508      	movs	r5, #8
 800f6d8:	e7b5      	b.n	800f646 <__hexnan+0x7a>
 800f6da:	9b01      	ldr	r3, [sp, #4]
 800f6dc:	2b00      	cmp	r3, #0
 800f6de:	d0df      	beq.n	800f6a0 <__hexnan+0xd4>
 800f6e0:	f04f 32ff 	mov.w	r2, #4294967295
 800f6e4:	f1c3 0320 	rsb	r3, r3, #32
 800f6e8:	fa22 f303 	lsr.w	r3, r2, r3
 800f6ec:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800f6f0:	401a      	ands	r2, r3
 800f6f2:	f846 2c04 	str.w	r2, [r6, #-4]
 800f6f6:	e7d3      	b.n	800f6a0 <__hexnan+0xd4>
 800f6f8:	3f04      	subs	r7, #4
 800f6fa:	e7d1      	b.n	800f6a0 <__hexnan+0xd4>
 800f6fc:	2004      	movs	r0, #4
 800f6fe:	b007      	add	sp, #28
 800f700:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800f704 <__ascii_mbtowc>:
 800f704:	b082      	sub	sp, #8
 800f706:	b901      	cbnz	r1, 800f70a <__ascii_mbtowc+0x6>
 800f708:	a901      	add	r1, sp, #4
 800f70a:	b142      	cbz	r2, 800f71e <__ascii_mbtowc+0x1a>
 800f70c:	b14b      	cbz	r3, 800f722 <__ascii_mbtowc+0x1e>
 800f70e:	7813      	ldrb	r3, [r2, #0]
 800f710:	600b      	str	r3, [r1, #0]
 800f712:	7812      	ldrb	r2, [r2, #0]
 800f714:	1e10      	subs	r0, r2, #0
 800f716:	bf18      	it	ne
 800f718:	2001      	movne	r0, #1
 800f71a:	b002      	add	sp, #8
 800f71c:	4770      	bx	lr
 800f71e:	4610      	mov	r0, r2
 800f720:	e7fb      	b.n	800f71a <__ascii_mbtowc+0x16>
 800f722:	f06f 0001 	mvn.w	r0, #1
 800f726:	e7f8      	b.n	800f71a <__ascii_mbtowc+0x16>

0800f728 <memcpy>:
 800f728:	440a      	add	r2, r1
 800f72a:	4291      	cmp	r1, r2
 800f72c:	f100 33ff 	add.w	r3, r0, #4294967295
 800f730:	d100      	bne.n	800f734 <memcpy+0xc>
 800f732:	4770      	bx	lr
 800f734:	b510      	push	{r4, lr}
 800f736:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f73a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f73e:	4291      	cmp	r1, r2
 800f740:	d1f9      	bne.n	800f736 <memcpy+0xe>
 800f742:	bd10      	pop	{r4, pc}

0800f744 <_Balloc>:
 800f744:	b570      	push	{r4, r5, r6, lr}
 800f746:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800f748:	4604      	mov	r4, r0
 800f74a:	460d      	mov	r5, r1
 800f74c:	b976      	cbnz	r6, 800f76c <_Balloc+0x28>
 800f74e:	2010      	movs	r0, #16
 800f750:	f000 fdcc 	bl	80102ec <malloc>
 800f754:	4602      	mov	r2, r0
 800f756:	6260      	str	r0, [r4, #36]	; 0x24
 800f758:	b920      	cbnz	r0, 800f764 <_Balloc+0x20>
 800f75a:	4b18      	ldr	r3, [pc, #96]	; (800f7bc <_Balloc+0x78>)
 800f75c:	4818      	ldr	r0, [pc, #96]	; (800f7c0 <_Balloc+0x7c>)
 800f75e:	2166      	movs	r1, #102	; 0x66
 800f760:	f000 fd94 	bl	801028c <__assert_func>
 800f764:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800f768:	6006      	str	r6, [r0, #0]
 800f76a:	60c6      	str	r6, [r0, #12]
 800f76c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800f76e:	68f3      	ldr	r3, [r6, #12]
 800f770:	b183      	cbz	r3, 800f794 <_Balloc+0x50>
 800f772:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f774:	68db      	ldr	r3, [r3, #12]
 800f776:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800f77a:	b9b8      	cbnz	r0, 800f7ac <_Balloc+0x68>
 800f77c:	2101      	movs	r1, #1
 800f77e:	fa01 f605 	lsl.w	r6, r1, r5
 800f782:	1d72      	adds	r2, r6, #5
 800f784:	0092      	lsls	r2, r2, #2
 800f786:	4620      	mov	r0, r4
 800f788:	f000 fc9a 	bl	80100c0 <_calloc_r>
 800f78c:	b160      	cbz	r0, 800f7a8 <_Balloc+0x64>
 800f78e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800f792:	e00e      	b.n	800f7b2 <_Balloc+0x6e>
 800f794:	2221      	movs	r2, #33	; 0x21
 800f796:	2104      	movs	r1, #4
 800f798:	4620      	mov	r0, r4
 800f79a:	f000 fc91 	bl	80100c0 <_calloc_r>
 800f79e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f7a0:	60f0      	str	r0, [r6, #12]
 800f7a2:	68db      	ldr	r3, [r3, #12]
 800f7a4:	2b00      	cmp	r3, #0
 800f7a6:	d1e4      	bne.n	800f772 <_Balloc+0x2e>
 800f7a8:	2000      	movs	r0, #0
 800f7aa:	bd70      	pop	{r4, r5, r6, pc}
 800f7ac:	6802      	ldr	r2, [r0, #0]
 800f7ae:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800f7b2:	2300      	movs	r3, #0
 800f7b4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800f7b8:	e7f7      	b.n	800f7aa <_Balloc+0x66>
 800f7ba:	bf00      	nop
 800f7bc:	08011b8c 	.word	0x08011b8c
 800f7c0:	08011ba3 	.word	0x08011ba3

0800f7c4 <_Bfree>:
 800f7c4:	b570      	push	{r4, r5, r6, lr}
 800f7c6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800f7c8:	4605      	mov	r5, r0
 800f7ca:	460c      	mov	r4, r1
 800f7cc:	b976      	cbnz	r6, 800f7ec <_Bfree+0x28>
 800f7ce:	2010      	movs	r0, #16
 800f7d0:	f000 fd8c 	bl	80102ec <malloc>
 800f7d4:	4602      	mov	r2, r0
 800f7d6:	6268      	str	r0, [r5, #36]	; 0x24
 800f7d8:	b920      	cbnz	r0, 800f7e4 <_Bfree+0x20>
 800f7da:	4b09      	ldr	r3, [pc, #36]	; (800f800 <_Bfree+0x3c>)
 800f7dc:	4809      	ldr	r0, [pc, #36]	; (800f804 <_Bfree+0x40>)
 800f7de:	218a      	movs	r1, #138	; 0x8a
 800f7e0:	f000 fd54 	bl	801028c <__assert_func>
 800f7e4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800f7e8:	6006      	str	r6, [r0, #0]
 800f7ea:	60c6      	str	r6, [r0, #12]
 800f7ec:	b13c      	cbz	r4, 800f7fe <_Bfree+0x3a>
 800f7ee:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800f7f0:	6862      	ldr	r2, [r4, #4]
 800f7f2:	68db      	ldr	r3, [r3, #12]
 800f7f4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800f7f8:	6021      	str	r1, [r4, #0]
 800f7fa:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800f7fe:	bd70      	pop	{r4, r5, r6, pc}
 800f800:	08011b8c 	.word	0x08011b8c
 800f804:	08011ba3 	.word	0x08011ba3

0800f808 <__multadd>:
 800f808:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f80c:	690d      	ldr	r5, [r1, #16]
 800f80e:	4607      	mov	r7, r0
 800f810:	460c      	mov	r4, r1
 800f812:	461e      	mov	r6, r3
 800f814:	f101 0c14 	add.w	ip, r1, #20
 800f818:	2000      	movs	r0, #0
 800f81a:	f8dc 3000 	ldr.w	r3, [ip]
 800f81e:	b299      	uxth	r1, r3
 800f820:	fb02 6101 	mla	r1, r2, r1, r6
 800f824:	0c1e      	lsrs	r6, r3, #16
 800f826:	0c0b      	lsrs	r3, r1, #16
 800f828:	fb02 3306 	mla	r3, r2, r6, r3
 800f82c:	b289      	uxth	r1, r1
 800f82e:	3001      	adds	r0, #1
 800f830:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800f834:	4285      	cmp	r5, r0
 800f836:	f84c 1b04 	str.w	r1, [ip], #4
 800f83a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800f83e:	dcec      	bgt.n	800f81a <__multadd+0x12>
 800f840:	b30e      	cbz	r6, 800f886 <__multadd+0x7e>
 800f842:	68a3      	ldr	r3, [r4, #8]
 800f844:	42ab      	cmp	r3, r5
 800f846:	dc19      	bgt.n	800f87c <__multadd+0x74>
 800f848:	6861      	ldr	r1, [r4, #4]
 800f84a:	4638      	mov	r0, r7
 800f84c:	3101      	adds	r1, #1
 800f84e:	f7ff ff79 	bl	800f744 <_Balloc>
 800f852:	4680      	mov	r8, r0
 800f854:	b928      	cbnz	r0, 800f862 <__multadd+0x5a>
 800f856:	4602      	mov	r2, r0
 800f858:	4b0c      	ldr	r3, [pc, #48]	; (800f88c <__multadd+0x84>)
 800f85a:	480d      	ldr	r0, [pc, #52]	; (800f890 <__multadd+0x88>)
 800f85c:	21b5      	movs	r1, #181	; 0xb5
 800f85e:	f000 fd15 	bl	801028c <__assert_func>
 800f862:	6922      	ldr	r2, [r4, #16]
 800f864:	3202      	adds	r2, #2
 800f866:	f104 010c 	add.w	r1, r4, #12
 800f86a:	0092      	lsls	r2, r2, #2
 800f86c:	300c      	adds	r0, #12
 800f86e:	f7ff ff5b 	bl	800f728 <memcpy>
 800f872:	4621      	mov	r1, r4
 800f874:	4638      	mov	r0, r7
 800f876:	f7ff ffa5 	bl	800f7c4 <_Bfree>
 800f87a:	4644      	mov	r4, r8
 800f87c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800f880:	3501      	adds	r5, #1
 800f882:	615e      	str	r6, [r3, #20]
 800f884:	6125      	str	r5, [r4, #16]
 800f886:	4620      	mov	r0, r4
 800f888:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f88c:	08011b00 	.word	0x08011b00
 800f890:	08011ba3 	.word	0x08011ba3

0800f894 <__s2b>:
 800f894:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f898:	460c      	mov	r4, r1
 800f89a:	4615      	mov	r5, r2
 800f89c:	461f      	mov	r7, r3
 800f89e:	2209      	movs	r2, #9
 800f8a0:	3308      	adds	r3, #8
 800f8a2:	4606      	mov	r6, r0
 800f8a4:	fb93 f3f2 	sdiv	r3, r3, r2
 800f8a8:	2100      	movs	r1, #0
 800f8aa:	2201      	movs	r2, #1
 800f8ac:	429a      	cmp	r2, r3
 800f8ae:	db09      	blt.n	800f8c4 <__s2b+0x30>
 800f8b0:	4630      	mov	r0, r6
 800f8b2:	f7ff ff47 	bl	800f744 <_Balloc>
 800f8b6:	b940      	cbnz	r0, 800f8ca <__s2b+0x36>
 800f8b8:	4602      	mov	r2, r0
 800f8ba:	4b19      	ldr	r3, [pc, #100]	; (800f920 <__s2b+0x8c>)
 800f8bc:	4819      	ldr	r0, [pc, #100]	; (800f924 <__s2b+0x90>)
 800f8be:	21ce      	movs	r1, #206	; 0xce
 800f8c0:	f000 fce4 	bl	801028c <__assert_func>
 800f8c4:	0052      	lsls	r2, r2, #1
 800f8c6:	3101      	adds	r1, #1
 800f8c8:	e7f0      	b.n	800f8ac <__s2b+0x18>
 800f8ca:	9b08      	ldr	r3, [sp, #32]
 800f8cc:	6143      	str	r3, [r0, #20]
 800f8ce:	2d09      	cmp	r5, #9
 800f8d0:	f04f 0301 	mov.w	r3, #1
 800f8d4:	6103      	str	r3, [r0, #16]
 800f8d6:	dd16      	ble.n	800f906 <__s2b+0x72>
 800f8d8:	f104 0909 	add.w	r9, r4, #9
 800f8dc:	46c8      	mov	r8, r9
 800f8de:	442c      	add	r4, r5
 800f8e0:	f818 3b01 	ldrb.w	r3, [r8], #1
 800f8e4:	4601      	mov	r1, r0
 800f8e6:	3b30      	subs	r3, #48	; 0x30
 800f8e8:	220a      	movs	r2, #10
 800f8ea:	4630      	mov	r0, r6
 800f8ec:	f7ff ff8c 	bl	800f808 <__multadd>
 800f8f0:	45a0      	cmp	r8, r4
 800f8f2:	d1f5      	bne.n	800f8e0 <__s2b+0x4c>
 800f8f4:	f1a5 0408 	sub.w	r4, r5, #8
 800f8f8:	444c      	add	r4, r9
 800f8fa:	1b2d      	subs	r5, r5, r4
 800f8fc:	1963      	adds	r3, r4, r5
 800f8fe:	42bb      	cmp	r3, r7
 800f900:	db04      	blt.n	800f90c <__s2b+0x78>
 800f902:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f906:	340a      	adds	r4, #10
 800f908:	2509      	movs	r5, #9
 800f90a:	e7f6      	b.n	800f8fa <__s2b+0x66>
 800f90c:	f814 3b01 	ldrb.w	r3, [r4], #1
 800f910:	4601      	mov	r1, r0
 800f912:	3b30      	subs	r3, #48	; 0x30
 800f914:	220a      	movs	r2, #10
 800f916:	4630      	mov	r0, r6
 800f918:	f7ff ff76 	bl	800f808 <__multadd>
 800f91c:	e7ee      	b.n	800f8fc <__s2b+0x68>
 800f91e:	bf00      	nop
 800f920:	08011b00 	.word	0x08011b00
 800f924:	08011ba3 	.word	0x08011ba3

0800f928 <__hi0bits>:
 800f928:	0c03      	lsrs	r3, r0, #16
 800f92a:	041b      	lsls	r3, r3, #16
 800f92c:	b9d3      	cbnz	r3, 800f964 <__hi0bits+0x3c>
 800f92e:	0400      	lsls	r0, r0, #16
 800f930:	2310      	movs	r3, #16
 800f932:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800f936:	bf04      	itt	eq
 800f938:	0200      	lsleq	r0, r0, #8
 800f93a:	3308      	addeq	r3, #8
 800f93c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800f940:	bf04      	itt	eq
 800f942:	0100      	lsleq	r0, r0, #4
 800f944:	3304      	addeq	r3, #4
 800f946:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800f94a:	bf04      	itt	eq
 800f94c:	0080      	lsleq	r0, r0, #2
 800f94e:	3302      	addeq	r3, #2
 800f950:	2800      	cmp	r0, #0
 800f952:	db05      	blt.n	800f960 <__hi0bits+0x38>
 800f954:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800f958:	f103 0301 	add.w	r3, r3, #1
 800f95c:	bf08      	it	eq
 800f95e:	2320      	moveq	r3, #32
 800f960:	4618      	mov	r0, r3
 800f962:	4770      	bx	lr
 800f964:	2300      	movs	r3, #0
 800f966:	e7e4      	b.n	800f932 <__hi0bits+0xa>

0800f968 <__lo0bits>:
 800f968:	6803      	ldr	r3, [r0, #0]
 800f96a:	f013 0207 	ands.w	r2, r3, #7
 800f96e:	4601      	mov	r1, r0
 800f970:	d00b      	beq.n	800f98a <__lo0bits+0x22>
 800f972:	07da      	lsls	r2, r3, #31
 800f974:	d423      	bmi.n	800f9be <__lo0bits+0x56>
 800f976:	0798      	lsls	r0, r3, #30
 800f978:	bf49      	itett	mi
 800f97a:	085b      	lsrmi	r3, r3, #1
 800f97c:	089b      	lsrpl	r3, r3, #2
 800f97e:	2001      	movmi	r0, #1
 800f980:	600b      	strmi	r3, [r1, #0]
 800f982:	bf5c      	itt	pl
 800f984:	600b      	strpl	r3, [r1, #0]
 800f986:	2002      	movpl	r0, #2
 800f988:	4770      	bx	lr
 800f98a:	b298      	uxth	r0, r3
 800f98c:	b9a8      	cbnz	r0, 800f9ba <__lo0bits+0x52>
 800f98e:	0c1b      	lsrs	r3, r3, #16
 800f990:	2010      	movs	r0, #16
 800f992:	b2da      	uxtb	r2, r3
 800f994:	b90a      	cbnz	r2, 800f99a <__lo0bits+0x32>
 800f996:	3008      	adds	r0, #8
 800f998:	0a1b      	lsrs	r3, r3, #8
 800f99a:	071a      	lsls	r2, r3, #28
 800f99c:	bf04      	itt	eq
 800f99e:	091b      	lsreq	r3, r3, #4
 800f9a0:	3004      	addeq	r0, #4
 800f9a2:	079a      	lsls	r2, r3, #30
 800f9a4:	bf04      	itt	eq
 800f9a6:	089b      	lsreq	r3, r3, #2
 800f9a8:	3002      	addeq	r0, #2
 800f9aa:	07da      	lsls	r2, r3, #31
 800f9ac:	d403      	bmi.n	800f9b6 <__lo0bits+0x4e>
 800f9ae:	085b      	lsrs	r3, r3, #1
 800f9b0:	f100 0001 	add.w	r0, r0, #1
 800f9b4:	d005      	beq.n	800f9c2 <__lo0bits+0x5a>
 800f9b6:	600b      	str	r3, [r1, #0]
 800f9b8:	4770      	bx	lr
 800f9ba:	4610      	mov	r0, r2
 800f9bc:	e7e9      	b.n	800f992 <__lo0bits+0x2a>
 800f9be:	2000      	movs	r0, #0
 800f9c0:	4770      	bx	lr
 800f9c2:	2020      	movs	r0, #32
 800f9c4:	4770      	bx	lr
	...

0800f9c8 <__i2b>:
 800f9c8:	b510      	push	{r4, lr}
 800f9ca:	460c      	mov	r4, r1
 800f9cc:	2101      	movs	r1, #1
 800f9ce:	f7ff feb9 	bl	800f744 <_Balloc>
 800f9d2:	4602      	mov	r2, r0
 800f9d4:	b928      	cbnz	r0, 800f9e2 <__i2b+0x1a>
 800f9d6:	4b05      	ldr	r3, [pc, #20]	; (800f9ec <__i2b+0x24>)
 800f9d8:	4805      	ldr	r0, [pc, #20]	; (800f9f0 <__i2b+0x28>)
 800f9da:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800f9de:	f000 fc55 	bl	801028c <__assert_func>
 800f9e2:	2301      	movs	r3, #1
 800f9e4:	6144      	str	r4, [r0, #20]
 800f9e6:	6103      	str	r3, [r0, #16]
 800f9e8:	bd10      	pop	{r4, pc}
 800f9ea:	bf00      	nop
 800f9ec:	08011b00 	.word	0x08011b00
 800f9f0:	08011ba3 	.word	0x08011ba3

0800f9f4 <__multiply>:
 800f9f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f9f8:	4691      	mov	r9, r2
 800f9fa:	690a      	ldr	r2, [r1, #16]
 800f9fc:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800fa00:	429a      	cmp	r2, r3
 800fa02:	bfb8      	it	lt
 800fa04:	460b      	movlt	r3, r1
 800fa06:	460c      	mov	r4, r1
 800fa08:	bfbc      	itt	lt
 800fa0a:	464c      	movlt	r4, r9
 800fa0c:	4699      	movlt	r9, r3
 800fa0e:	6927      	ldr	r7, [r4, #16]
 800fa10:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800fa14:	68a3      	ldr	r3, [r4, #8]
 800fa16:	6861      	ldr	r1, [r4, #4]
 800fa18:	eb07 060a 	add.w	r6, r7, sl
 800fa1c:	42b3      	cmp	r3, r6
 800fa1e:	b085      	sub	sp, #20
 800fa20:	bfb8      	it	lt
 800fa22:	3101      	addlt	r1, #1
 800fa24:	f7ff fe8e 	bl	800f744 <_Balloc>
 800fa28:	b930      	cbnz	r0, 800fa38 <__multiply+0x44>
 800fa2a:	4602      	mov	r2, r0
 800fa2c:	4b44      	ldr	r3, [pc, #272]	; (800fb40 <__multiply+0x14c>)
 800fa2e:	4845      	ldr	r0, [pc, #276]	; (800fb44 <__multiply+0x150>)
 800fa30:	f240 115d 	movw	r1, #349	; 0x15d
 800fa34:	f000 fc2a 	bl	801028c <__assert_func>
 800fa38:	f100 0514 	add.w	r5, r0, #20
 800fa3c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800fa40:	462b      	mov	r3, r5
 800fa42:	2200      	movs	r2, #0
 800fa44:	4543      	cmp	r3, r8
 800fa46:	d321      	bcc.n	800fa8c <__multiply+0x98>
 800fa48:	f104 0314 	add.w	r3, r4, #20
 800fa4c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800fa50:	f109 0314 	add.w	r3, r9, #20
 800fa54:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800fa58:	9202      	str	r2, [sp, #8]
 800fa5a:	1b3a      	subs	r2, r7, r4
 800fa5c:	3a15      	subs	r2, #21
 800fa5e:	f022 0203 	bic.w	r2, r2, #3
 800fa62:	3204      	adds	r2, #4
 800fa64:	f104 0115 	add.w	r1, r4, #21
 800fa68:	428f      	cmp	r7, r1
 800fa6a:	bf38      	it	cc
 800fa6c:	2204      	movcc	r2, #4
 800fa6e:	9201      	str	r2, [sp, #4]
 800fa70:	9a02      	ldr	r2, [sp, #8]
 800fa72:	9303      	str	r3, [sp, #12]
 800fa74:	429a      	cmp	r2, r3
 800fa76:	d80c      	bhi.n	800fa92 <__multiply+0x9e>
 800fa78:	2e00      	cmp	r6, #0
 800fa7a:	dd03      	ble.n	800fa84 <__multiply+0x90>
 800fa7c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800fa80:	2b00      	cmp	r3, #0
 800fa82:	d05a      	beq.n	800fb3a <__multiply+0x146>
 800fa84:	6106      	str	r6, [r0, #16]
 800fa86:	b005      	add	sp, #20
 800fa88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fa8c:	f843 2b04 	str.w	r2, [r3], #4
 800fa90:	e7d8      	b.n	800fa44 <__multiply+0x50>
 800fa92:	f8b3 a000 	ldrh.w	sl, [r3]
 800fa96:	f1ba 0f00 	cmp.w	sl, #0
 800fa9a:	d024      	beq.n	800fae6 <__multiply+0xf2>
 800fa9c:	f104 0e14 	add.w	lr, r4, #20
 800faa0:	46a9      	mov	r9, r5
 800faa2:	f04f 0c00 	mov.w	ip, #0
 800faa6:	f85e 2b04 	ldr.w	r2, [lr], #4
 800faaa:	f8d9 1000 	ldr.w	r1, [r9]
 800faae:	fa1f fb82 	uxth.w	fp, r2
 800fab2:	b289      	uxth	r1, r1
 800fab4:	fb0a 110b 	mla	r1, sl, fp, r1
 800fab8:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800fabc:	f8d9 2000 	ldr.w	r2, [r9]
 800fac0:	4461      	add	r1, ip
 800fac2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800fac6:	fb0a c20b 	mla	r2, sl, fp, ip
 800faca:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800face:	b289      	uxth	r1, r1
 800fad0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800fad4:	4577      	cmp	r7, lr
 800fad6:	f849 1b04 	str.w	r1, [r9], #4
 800fada:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800fade:	d8e2      	bhi.n	800faa6 <__multiply+0xb2>
 800fae0:	9a01      	ldr	r2, [sp, #4]
 800fae2:	f845 c002 	str.w	ip, [r5, r2]
 800fae6:	9a03      	ldr	r2, [sp, #12]
 800fae8:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800faec:	3304      	adds	r3, #4
 800faee:	f1b9 0f00 	cmp.w	r9, #0
 800faf2:	d020      	beq.n	800fb36 <__multiply+0x142>
 800faf4:	6829      	ldr	r1, [r5, #0]
 800faf6:	f104 0c14 	add.w	ip, r4, #20
 800fafa:	46ae      	mov	lr, r5
 800fafc:	f04f 0a00 	mov.w	sl, #0
 800fb00:	f8bc b000 	ldrh.w	fp, [ip]
 800fb04:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800fb08:	fb09 220b 	mla	r2, r9, fp, r2
 800fb0c:	4492      	add	sl, r2
 800fb0e:	b289      	uxth	r1, r1
 800fb10:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800fb14:	f84e 1b04 	str.w	r1, [lr], #4
 800fb18:	f85c 2b04 	ldr.w	r2, [ip], #4
 800fb1c:	f8be 1000 	ldrh.w	r1, [lr]
 800fb20:	0c12      	lsrs	r2, r2, #16
 800fb22:	fb09 1102 	mla	r1, r9, r2, r1
 800fb26:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800fb2a:	4567      	cmp	r7, ip
 800fb2c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800fb30:	d8e6      	bhi.n	800fb00 <__multiply+0x10c>
 800fb32:	9a01      	ldr	r2, [sp, #4]
 800fb34:	50a9      	str	r1, [r5, r2]
 800fb36:	3504      	adds	r5, #4
 800fb38:	e79a      	b.n	800fa70 <__multiply+0x7c>
 800fb3a:	3e01      	subs	r6, #1
 800fb3c:	e79c      	b.n	800fa78 <__multiply+0x84>
 800fb3e:	bf00      	nop
 800fb40:	08011b00 	.word	0x08011b00
 800fb44:	08011ba3 	.word	0x08011ba3

0800fb48 <__pow5mult>:
 800fb48:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fb4c:	4615      	mov	r5, r2
 800fb4e:	f012 0203 	ands.w	r2, r2, #3
 800fb52:	4606      	mov	r6, r0
 800fb54:	460f      	mov	r7, r1
 800fb56:	d007      	beq.n	800fb68 <__pow5mult+0x20>
 800fb58:	4c25      	ldr	r4, [pc, #148]	; (800fbf0 <__pow5mult+0xa8>)
 800fb5a:	3a01      	subs	r2, #1
 800fb5c:	2300      	movs	r3, #0
 800fb5e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800fb62:	f7ff fe51 	bl	800f808 <__multadd>
 800fb66:	4607      	mov	r7, r0
 800fb68:	10ad      	asrs	r5, r5, #2
 800fb6a:	d03d      	beq.n	800fbe8 <__pow5mult+0xa0>
 800fb6c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800fb6e:	b97c      	cbnz	r4, 800fb90 <__pow5mult+0x48>
 800fb70:	2010      	movs	r0, #16
 800fb72:	f000 fbbb 	bl	80102ec <malloc>
 800fb76:	4602      	mov	r2, r0
 800fb78:	6270      	str	r0, [r6, #36]	; 0x24
 800fb7a:	b928      	cbnz	r0, 800fb88 <__pow5mult+0x40>
 800fb7c:	4b1d      	ldr	r3, [pc, #116]	; (800fbf4 <__pow5mult+0xac>)
 800fb7e:	481e      	ldr	r0, [pc, #120]	; (800fbf8 <__pow5mult+0xb0>)
 800fb80:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800fb84:	f000 fb82 	bl	801028c <__assert_func>
 800fb88:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800fb8c:	6004      	str	r4, [r0, #0]
 800fb8e:	60c4      	str	r4, [r0, #12]
 800fb90:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800fb94:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800fb98:	b94c      	cbnz	r4, 800fbae <__pow5mult+0x66>
 800fb9a:	f240 2171 	movw	r1, #625	; 0x271
 800fb9e:	4630      	mov	r0, r6
 800fba0:	f7ff ff12 	bl	800f9c8 <__i2b>
 800fba4:	2300      	movs	r3, #0
 800fba6:	f8c8 0008 	str.w	r0, [r8, #8]
 800fbaa:	4604      	mov	r4, r0
 800fbac:	6003      	str	r3, [r0, #0]
 800fbae:	f04f 0900 	mov.w	r9, #0
 800fbb2:	07eb      	lsls	r3, r5, #31
 800fbb4:	d50a      	bpl.n	800fbcc <__pow5mult+0x84>
 800fbb6:	4639      	mov	r1, r7
 800fbb8:	4622      	mov	r2, r4
 800fbba:	4630      	mov	r0, r6
 800fbbc:	f7ff ff1a 	bl	800f9f4 <__multiply>
 800fbc0:	4639      	mov	r1, r7
 800fbc2:	4680      	mov	r8, r0
 800fbc4:	4630      	mov	r0, r6
 800fbc6:	f7ff fdfd 	bl	800f7c4 <_Bfree>
 800fbca:	4647      	mov	r7, r8
 800fbcc:	106d      	asrs	r5, r5, #1
 800fbce:	d00b      	beq.n	800fbe8 <__pow5mult+0xa0>
 800fbd0:	6820      	ldr	r0, [r4, #0]
 800fbd2:	b938      	cbnz	r0, 800fbe4 <__pow5mult+0x9c>
 800fbd4:	4622      	mov	r2, r4
 800fbd6:	4621      	mov	r1, r4
 800fbd8:	4630      	mov	r0, r6
 800fbda:	f7ff ff0b 	bl	800f9f4 <__multiply>
 800fbde:	6020      	str	r0, [r4, #0]
 800fbe0:	f8c0 9000 	str.w	r9, [r0]
 800fbe4:	4604      	mov	r4, r0
 800fbe6:	e7e4      	b.n	800fbb2 <__pow5mult+0x6a>
 800fbe8:	4638      	mov	r0, r7
 800fbea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fbee:	bf00      	nop
 800fbf0:	08011cf0 	.word	0x08011cf0
 800fbf4:	08011b8c 	.word	0x08011b8c
 800fbf8:	08011ba3 	.word	0x08011ba3

0800fbfc <__lshift>:
 800fbfc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fc00:	460c      	mov	r4, r1
 800fc02:	6849      	ldr	r1, [r1, #4]
 800fc04:	6923      	ldr	r3, [r4, #16]
 800fc06:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800fc0a:	68a3      	ldr	r3, [r4, #8]
 800fc0c:	4607      	mov	r7, r0
 800fc0e:	4691      	mov	r9, r2
 800fc10:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800fc14:	f108 0601 	add.w	r6, r8, #1
 800fc18:	42b3      	cmp	r3, r6
 800fc1a:	db0b      	blt.n	800fc34 <__lshift+0x38>
 800fc1c:	4638      	mov	r0, r7
 800fc1e:	f7ff fd91 	bl	800f744 <_Balloc>
 800fc22:	4605      	mov	r5, r0
 800fc24:	b948      	cbnz	r0, 800fc3a <__lshift+0x3e>
 800fc26:	4602      	mov	r2, r0
 800fc28:	4b2a      	ldr	r3, [pc, #168]	; (800fcd4 <__lshift+0xd8>)
 800fc2a:	482b      	ldr	r0, [pc, #172]	; (800fcd8 <__lshift+0xdc>)
 800fc2c:	f240 11d9 	movw	r1, #473	; 0x1d9
 800fc30:	f000 fb2c 	bl	801028c <__assert_func>
 800fc34:	3101      	adds	r1, #1
 800fc36:	005b      	lsls	r3, r3, #1
 800fc38:	e7ee      	b.n	800fc18 <__lshift+0x1c>
 800fc3a:	2300      	movs	r3, #0
 800fc3c:	f100 0114 	add.w	r1, r0, #20
 800fc40:	f100 0210 	add.w	r2, r0, #16
 800fc44:	4618      	mov	r0, r3
 800fc46:	4553      	cmp	r3, sl
 800fc48:	db37      	blt.n	800fcba <__lshift+0xbe>
 800fc4a:	6920      	ldr	r0, [r4, #16]
 800fc4c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800fc50:	f104 0314 	add.w	r3, r4, #20
 800fc54:	f019 091f 	ands.w	r9, r9, #31
 800fc58:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800fc5c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800fc60:	d02f      	beq.n	800fcc2 <__lshift+0xc6>
 800fc62:	f1c9 0e20 	rsb	lr, r9, #32
 800fc66:	468a      	mov	sl, r1
 800fc68:	f04f 0c00 	mov.w	ip, #0
 800fc6c:	681a      	ldr	r2, [r3, #0]
 800fc6e:	fa02 f209 	lsl.w	r2, r2, r9
 800fc72:	ea42 020c 	orr.w	r2, r2, ip
 800fc76:	f84a 2b04 	str.w	r2, [sl], #4
 800fc7a:	f853 2b04 	ldr.w	r2, [r3], #4
 800fc7e:	4298      	cmp	r0, r3
 800fc80:	fa22 fc0e 	lsr.w	ip, r2, lr
 800fc84:	d8f2      	bhi.n	800fc6c <__lshift+0x70>
 800fc86:	1b03      	subs	r3, r0, r4
 800fc88:	3b15      	subs	r3, #21
 800fc8a:	f023 0303 	bic.w	r3, r3, #3
 800fc8e:	3304      	adds	r3, #4
 800fc90:	f104 0215 	add.w	r2, r4, #21
 800fc94:	4290      	cmp	r0, r2
 800fc96:	bf38      	it	cc
 800fc98:	2304      	movcc	r3, #4
 800fc9a:	f841 c003 	str.w	ip, [r1, r3]
 800fc9e:	f1bc 0f00 	cmp.w	ip, #0
 800fca2:	d001      	beq.n	800fca8 <__lshift+0xac>
 800fca4:	f108 0602 	add.w	r6, r8, #2
 800fca8:	3e01      	subs	r6, #1
 800fcaa:	4638      	mov	r0, r7
 800fcac:	612e      	str	r6, [r5, #16]
 800fcae:	4621      	mov	r1, r4
 800fcb0:	f7ff fd88 	bl	800f7c4 <_Bfree>
 800fcb4:	4628      	mov	r0, r5
 800fcb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fcba:	f842 0f04 	str.w	r0, [r2, #4]!
 800fcbe:	3301      	adds	r3, #1
 800fcc0:	e7c1      	b.n	800fc46 <__lshift+0x4a>
 800fcc2:	3904      	subs	r1, #4
 800fcc4:	f853 2b04 	ldr.w	r2, [r3], #4
 800fcc8:	f841 2f04 	str.w	r2, [r1, #4]!
 800fccc:	4298      	cmp	r0, r3
 800fcce:	d8f9      	bhi.n	800fcc4 <__lshift+0xc8>
 800fcd0:	e7ea      	b.n	800fca8 <__lshift+0xac>
 800fcd2:	bf00      	nop
 800fcd4:	08011b00 	.word	0x08011b00
 800fcd8:	08011ba3 	.word	0x08011ba3

0800fcdc <__mcmp>:
 800fcdc:	b530      	push	{r4, r5, lr}
 800fcde:	6902      	ldr	r2, [r0, #16]
 800fce0:	690c      	ldr	r4, [r1, #16]
 800fce2:	1b12      	subs	r2, r2, r4
 800fce4:	d10e      	bne.n	800fd04 <__mcmp+0x28>
 800fce6:	f100 0314 	add.w	r3, r0, #20
 800fcea:	3114      	adds	r1, #20
 800fcec:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800fcf0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800fcf4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800fcf8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800fcfc:	42a5      	cmp	r5, r4
 800fcfe:	d003      	beq.n	800fd08 <__mcmp+0x2c>
 800fd00:	d305      	bcc.n	800fd0e <__mcmp+0x32>
 800fd02:	2201      	movs	r2, #1
 800fd04:	4610      	mov	r0, r2
 800fd06:	bd30      	pop	{r4, r5, pc}
 800fd08:	4283      	cmp	r3, r0
 800fd0a:	d3f3      	bcc.n	800fcf4 <__mcmp+0x18>
 800fd0c:	e7fa      	b.n	800fd04 <__mcmp+0x28>
 800fd0e:	f04f 32ff 	mov.w	r2, #4294967295
 800fd12:	e7f7      	b.n	800fd04 <__mcmp+0x28>

0800fd14 <__mdiff>:
 800fd14:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fd18:	460c      	mov	r4, r1
 800fd1a:	4606      	mov	r6, r0
 800fd1c:	4611      	mov	r1, r2
 800fd1e:	4620      	mov	r0, r4
 800fd20:	4690      	mov	r8, r2
 800fd22:	f7ff ffdb 	bl	800fcdc <__mcmp>
 800fd26:	1e05      	subs	r5, r0, #0
 800fd28:	d110      	bne.n	800fd4c <__mdiff+0x38>
 800fd2a:	4629      	mov	r1, r5
 800fd2c:	4630      	mov	r0, r6
 800fd2e:	f7ff fd09 	bl	800f744 <_Balloc>
 800fd32:	b930      	cbnz	r0, 800fd42 <__mdiff+0x2e>
 800fd34:	4b3a      	ldr	r3, [pc, #232]	; (800fe20 <__mdiff+0x10c>)
 800fd36:	4602      	mov	r2, r0
 800fd38:	f240 2132 	movw	r1, #562	; 0x232
 800fd3c:	4839      	ldr	r0, [pc, #228]	; (800fe24 <__mdiff+0x110>)
 800fd3e:	f000 faa5 	bl	801028c <__assert_func>
 800fd42:	2301      	movs	r3, #1
 800fd44:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800fd48:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fd4c:	bfa4      	itt	ge
 800fd4e:	4643      	movge	r3, r8
 800fd50:	46a0      	movge	r8, r4
 800fd52:	4630      	mov	r0, r6
 800fd54:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800fd58:	bfa6      	itte	ge
 800fd5a:	461c      	movge	r4, r3
 800fd5c:	2500      	movge	r5, #0
 800fd5e:	2501      	movlt	r5, #1
 800fd60:	f7ff fcf0 	bl	800f744 <_Balloc>
 800fd64:	b920      	cbnz	r0, 800fd70 <__mdiff+0x5c>
 800fd66:	4b2e      	ldr	r3, [pc, #184]	; (800fe20 <__mdiff+0x10c>)
 800fd68:	4602      	mov	r2, r0
 800fd6a:	f44f 7110 	mov.w	r1, #576	; 0x240
 800fd6e:	e7e5      	b.n	800fd3c <__mdiff+0x28>
 800fd70:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800fd74:	6926      	ldr	r6, [r4, #16]
 800fd76:	60c5      	str	r5, [r0, #12]
 800fd78:	f104 0914 	add.w	r9, r4, #20
 800fd7c:	f108 0514 	add.w	r5, r8, #20
 800fd80:	f100 0e14 	add.w	lr, r0, #20
 800fd84:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800fd88:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800fd8c:	f108 0210 	add.w	r2, r8, #16
 800fd90:	46f2      	mov	sl, lr
 800fd92:	2100      	movs	r1, #0
 800fd94:	f859 3b04 	ldr.w	r3, [r9], #4
 800fd98:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800fd9c:	fa1f f883 	uxth.w	r8, r3
 800fda0:	fa11 f18b 	uxtah	r1, r1, fp
 800fda4:	0c1b      	lsrs	r3, r3, #16
 800fda6:	eba1 0808 	sub.w	r8, r1, r8
 800fdaa:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800fdae:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800fdb2:	fa1f f888 	uxth.w	r8, r8
 800fdb6:	1419      	asrs	r1, r3, #16
 800fdb8:	454e      	cmp	r6, r9
 800fdba:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800fdbe:	f84a 3b04 	str.w	r3, [sl], #4
 800fdc2:	d8e7      	bhi.n	800fd94 <__mdiff+0x80>
 800fdc4:	1b33      	subs	r3, r6, r4
 800fdc6:	3b15      	subs	r3, #21
 800fdc8:	f023 0303 	bic.w	r3, r3, #3
 800fdcc:	3304      	adds	r3, #4
 800fdce:	3415      	adds	r4, #21
 800fdd0:	42a6      	cmp	r6, r4
 800fdd2:	bf38      	it	cc
 800fdd4:	2304      	movcc	r3, #4
 800fdd6:	441d      	add	r5, r3
 800fdd8:	4473      	add	r3, lr
 800fdda:	469e      	mov	lr, r3
 800fddc:	462e      	mov	r6, r5
 800fdde:	4566      	cmp	r6, ip
 800fde0:	d30e      	bcc.n	800fe00 <__mdiff+0xec>
 800fde2:	f10c 0203 	add.w	r2, ip, #3
 800fde6:	1b52      	subs	r2, r2, r5
 800fde8:	f022 0203 	bic.w	r2, r2, #3
 800fdec:	3d03      	subs	r5, #3
 800fdee:	45ac      	cmp	ip, r5
 800fdf0:	bf38      	it	cc
 800fdf2:	2200      	movcc	r2, #0
 800fdf4:	441a      	add	r2, r3
 800fdf6:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800fdfa:	b17b      	cbz	r3, 800fe1c <__mdiff+0x108>
 800fdfc:	6107      	str	r7, [r0, #16]
 800fdfe:	e7a3      	b.n	800fd48 <__mdiff+0x34>
 800fe00:	f856 8b04 	ldr.w	r8, [r6], #4
 800fe04:	fa11 f288 	uxtah	r2, r1, r8
 800fe08:	1414      	asrs	r4, r2, #16
 800fe0a:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800fe0e:	b292      	uxth	r2, r2
 800fe10:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800fe14:	f84e 2b04 	str.w	r2, [lr], #4
 800fe18:	1421      	asrs	r1, r4, #16
 800fe1a:	e7e0      	b.n	800fdde <__mdiff+0xca>
 800fe1c:	3f01      	subs	r7, #1
 800fe1e:	e7ea      	b.n	800fdf6 <__mdiff+0xe2>
 800fe20:	08011b00 	.word	0x08011b00
 800fe24:	08011ba3 	.word	0x08011ba3

0800fe28 <__ulp>:
 800fe28:	b082      	sub	sp, #8
 800fe2a:	ed8d 0b00 	vstr	d0, [sp]
 800fe2e:	9b01      	ldr	r3, [sp, #4]
 800fe30:	4912      	ldr	r1, [pc, #72]	; (800fe7c <__ulp+0x54>)
 800fe32:	4019      	ands	r1, r3
 800fe34:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800fe38:	2900      	cmp	r1, #0
 800fe3a:	dd05      	ble.n	800fe48 <__ulp+0x20>
 800fe3c:	2200      	movs	r2, #0
 800fe3e:	460b      	mov	r3, r1
 800fe40:	ec43 2b10 	vmov	d0, r2, r3
 800fe44:	b002      	add	sp, #8
 800fe46:	4770      	bx	lr
 800fe48:	4249      	negs	r1, r1
 800fe4a:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800fe4e:	ea4f 5021 	mov.w	r0, r1, asr #20
 800fe52:	f04f 0200 	mov.w	r2, #0
 800fe56:	f04f 0300 	mov.w	r3, #0
 800fe5a:	da04      	bge.n	800fe66 <__ulp+0x3e>
 800fe5c:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800fe60:	fa41 f300 	asr.w	r3, r1, r0
 800fe64:	e7ec      	b.n	800fe40 <__ulp+0x18>
 800fe66:	f1a0 0114 	sub.w	r1, r0, #20
 800fe6a:	291e      	cmp	r1, #30
 800fe6c:	bfda      	itte	le
 800fe6e:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800fe72:	fa20 f101 	lsrle.w	r1, r0, r1
 800fe76:	2101      	movgt	r1, #1
 800fe78:	460a      	mov	r2, r1
 800fe7a:	e7e1      	b.n	800fe40 <__ulp+0x18>
 800fe7c:	7ff00000 	.word	0x7ff00000

0800fe80 <__b2d>:
 800fe80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fe82:	6905      	ldr	r5, [r0, #16]
 800fe84:	f100 0714 	add.w	r7, r0, #20
 800fe88:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800fe8c:	1f2e      	subs	r6, r5, #4
 800fe8e:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800fe92:	4620      	mov	r0, r4
 800fe94:	f7ff fd48 	bl	800f928 <__hi0bits>
 800fe98:	f1c0 0320 	rsb	r3, r0, #32
 800fe9c:	280a      	cmp	r0, #10
 800fe9e:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800ff1c <__b2d+0x9c>
 800fea2:	600b      	str	r3, [r1, #0]
 800fea4:	dc14      	bgt.n	800fed0 <__b2d+0x50>
 800fea6:	f1c0 0e0b 	rsb	lr, r0, #11
 800feaa:	fa24 f10e 	lsr.w	r1, r4, lr
 800feae:	42b7      	cmp	r7, r6
 800feb0:	ea41 030c 	orr.w	r3, r1, ip
 800feb4:	bf34      	ite	cc
 800feb6:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800feba:	2100      	movcs	r1, #0
 800febc:	3015      	adds	r0, #21
 800febe:	fa04 f000 	lsl.w	r0, r4, r0
 800fec2:	fa21 f10e 	lsr.w	r1, r1, lr
 800fec6:	ea40 0201 	orr.w	r2, r0, r1
 800feca:	ec43 2b10 	vmov	d0, r2, r3
 800fece:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fed0:	42b7      	cmp	r7, r6
 800fed2:	bf3a      	itte	cc
 800fed4:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800fed8:	f1a5 0608 	subcc.w	r6, r5, #8
 800fedc:	2100      	movcs	r1, #0
 800fede:	380b      	subs	r0, #11
 800fee0:	d017      	beq.n	800ff12 <__b2d+0x92>
 800fee2:	f1c0 0c20 	rsb	ip, r0, #32
 800fee6:	fa04 f500 	lsl.w	r5, r4, r0
 800feea:	42be      	cmp	r6, r7
 800feec:	fa21 f40c 	lsr.w	r4, r1, ip
 800fef0:	ea45 0504 	orr.w	r5, r5, r4
 800fef4:	bf8c      	ite	hi
 800fef6:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800fefa:	2400      	movls	r4, #0
 800fefc:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800ff00:	fa01 f000 	lsl.w	r0, r1, r0
 800ff04:	fa24 f40c 	lsr.w	r4, r4, ip
 800ff08:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800ff0c:	ea40 0204 	orr.w	r2, r0, r4
 800ff10:	e7db      	b.n	800feca <__b2d+0x4a>
 800ff12:	ea44 030c 	orr.w	r3, r4, ip
 800ff16:	460a      	mov	r2, r1
 800ff18:	e7d7      	b.n	800feca <__b2d+0x4a>
 800ff1a:	bf00      	nop
 800ff1c:	3ff00000 	.word	0x3ff00000

0800ff20 <__d2b>:
 800ff20:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800ff24:	4689      	mov	r9, r1
 800ff26:	2101      	movs	r1, #1
 800ff28:	ec57 6b10 	vmov	r6, r7, d0
 800ff2c:	4690      	mov	r8, r2
 800ff2e:	f7ff fc09 	bl	800f744 <_Balloc>
 800ff32:	4604      	mov	r4, r0
 800ff34:	b930      	cbnz	r0, 800ff44 <__d2b+0x24>
 800ff36:	4602      	mov	r2, r0
 800ff38:	4b25      	ldr	r3, [pc, #148]	; (800ffd0 <__d2b+0xb0>)
 800ff3a:	4826      	ldr	r0, [pc, #152]	; (800ffd4 <__d2b+0xb4>)
 800ff3c:	f240 310a 	movw	r1, #778	; 0x30a
 800ff40:	f000 f9a4 	bl	801028c <__assert_func>
 800ff44:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800ff48:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800ff4c:	bb35      	cbnz	r5, 800ff9c <__d2b+0x7c>
 800ff4e:	2e00      	cmp	r6, #0
 800ff50:	9301      	str	r3, [sp, #4]
 800ff52:	d028      	beq.n	800ffa6 <__d2b+0x86>
 800ff54:	4668      	mov	r0, sp
 800ff56:	9600      	str	r6, [sp, #0]
 800ff58:	f7ff fd06 	bl	800f968 <__lo0bits>
 800ff5c:	9900      	ldr	r1, [sp, #0]
 800ff5e:	b300      	cbz	r0, 800ffa2 <__d2b+0x82>
 800ff60:	9a01      	ldr	r2, [sp, #4]
 800ff62:	f1c0 0320 	rsb	r3, r0, #32
 800ff66:	fa02 f303 	lsl.w	r3, r2, r3
 800ff6a:	430b      	orrs	r3, r1
 800ff6c:	40c2      	lsrs	r2, r0
 800ff6e:	6163      	str	r3, [r4, #20]
 800ff70:	9201      	str	r2, [sp, #4]
 800ff72:	9b01      	ldr	r3, [sp, #4]
 800ff74:	61a3      	str	r3, [r4, #24]
 800ff76:	2b00      	cmp	r3, #0
 800ff78:	bf14      	ite	ne
 800ff7a:	2202      	movne	r2, #2
 800ff7c:	2201      	moveq	r2, #1
 800ff7e:	6122      	str	r2, [r4, #16]
 800ff80:	b1d5      	cbz	r5, 800ffb8 <__d2b+0x98>
 800ff82:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800ff86:	4405      	add	r5, r0
 800ff88:	f8c9 5000 	str.w	r5, [r9]
 800ff8c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800ff90:	f8c8 0000 	str.w	r0, [r8]
 800ff94:	4620      	mov	r0, r4
 800ff96:	b003      	add	sp, #12
 800ff98:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ff9c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800ffa0:	e7d5      	b.n	800ff4e <__d2b+0x2e>
 800ffa2:	6161      	str	r1, [r4, #20]
 800ffa4:	e7e5      	b.n	800ff72 <__d2b+0x52>
 800ffa6:	a801      	add	r0, sp, #4
 800ffa8:	f7ff fcde 	bl	800f968 <__lo0bits>
 800ffac:	9b01      	ldr	r3, [sp, #4]
 800ffae:	6163      	str	r3, [r4, #20]
 800ffb0:	2201      	movs	r2, #1
 800ffb2:	6122      	str	r2, [r4, #16]
 800ffb4:	3020      	adds	r0, #32
 800ffb6:	e7e3      	b.n	800ff80 <__d2b+0x60>
 800ffb8:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800ffbc:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800ffc0:	f8c9 0000 	str.w	r0, [r9]
 800ffc4:	6918      	ldr	r0, [r3, #16]
 800ffc6:	f7ff fcaf 	bl	800f928 <__hi0bits>
 800ffca:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800ffce:	e7df      	b.n	800ff90 <__d2b+0x70>
 800ffd0:	08011b00 	.word	0x08011b00
 800ffd4:	08011ba3 	.word	0x08011ba3

0800ffd8 <__ratio>:
 800ffd8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ffdc:	4688      	mov	r8, r1
 800ffde:	4669      	mov	r1, sp
 800ffe0:	4681      	mov	r9, r0
 800ffe2:	f7ff ff4d 	bl	800fe80 <__b2d>
 800ffe6:	a901      	add	r1, sp, #4
 800ffe8:	4640      	mov	r0, r8
 800ffea:	ec55 4b10 	vmov	r4, r5, d0
 800ffee:	ee10 aa10 	vmov	sl, s0
 800fff2:	f7ff ff45 	bl	800fe80 <__b2d>
 800fff6:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800fffa:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800fffe:	1a59      	subs	r1, r3, r1
 8010000:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010004:	1ad3      	subs	r3, r2, r3
 8010006:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 801000a:	ec57 6b10 	vmov	r6, r7, d0
 801000e:	2b00      	cmp	r3, #0
 8010010:	bfd6      	itet	le
 8010012:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8010016:	462a      	movgt	r2, r5
 8010018:	463a      	movle	r2, r7
 801001a:	46ab      	mov	fp, r5
 801001c:	bfd6      	itet	le
 801001e:	eb02 5303 	addle.w	r3, r2, r3, lsl #20
 8010022:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 8010026:	ee00 3a90 	vmovle	s1, r3
 801002a:	ec4b ab17 	vmov	d7, sl, fp
 801002e:	ee87 0b00 	vdiv.f64	d0, d7, d0
 8010032:	b003      	add	sp, #12
 8010034:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08010038 <__copybits>:
 8010038:	3901      	subs	r1, #1
 801003a:	b570      	push	{r4, r5, r6, lr}
 801003c:	1149      	asrs	r1, r1, #5
 801003e:	6914      	ldr	r4, [r2, #16]
 8010040:	3101      	adds	r1, #1
 8010042:	f102 0314 	add.w	r3, r2, #20
 8010046:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 801004a:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 801004e:	1f05      	subs	r5, r0, #4
 8010050:	42a3      	cmp	r3, r4
 8010052:	d30c      	bcc.n	801006e <__copybits+0x36>
 8010054:	1aa3      	subs	r3, r4, r2
 8010056:	3b11      	subs	r3, #17
 8010058:	f023 0303 	bic.w	r3, r3, #3
 801005c:	3211      	adds	r2, #17
 801005e:	42a2      	cmp	r2, r4
 8010060:	bf88      	it	hi
 8010062:	2300      	movhi	r3, #0
 8010064:	4418      	add	r0, r3
 8010066:	2300      	movs	r3, #0
 8010068:	4288      	cmp	r0, r1
 801006a:	d305      	bcc.n	8010078 <__copybits+0x40>
 801006c:	bd70      	pop	{r4, r5, r6, pc}
 801006e:	f853 6b04 	ldr.w	r6, [r3], #4
 8010072:	f845 6f04 	str.w	r6, [r5, #4]!
 8010076:	e7eb      	b.n	8010050 <__copybits+0x18>
 8010078:	f840 3b04 	str.w	r3, [r0], #4
 801007c:	e7f4      	b.n	8010068 <__copybits+0x30>

0801007e <__any_on>:
 801007e:	f100 0214 	add.w	r2, r0, #20
 8010082:	6900      	ldr	r0, [r0, #16]
 8010084:	114b      	asrs	r3, r1, #5
 8010086:	4298      	cmp	r0, r3
 8010088:	b510      	push	{r4, lr}
 801008a:	db11      	blt.n	80100b0 <__any_on+0x32>
 801008c:	dd0a      	ble.n	80100a4 <__any_on+0x26>
 801008e:	f011 011f 	ands.w	r1, r1, #31
 8010092:	d007      	beq.n	80100a4 <__any_on+0x26>
 8010094:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8010098:	fa24 f001 	lsr.w	r0, r4, r1
 801009c:	fa00 f101 	lsl.w	r1, r0, r1
 80100a0:	428c      	cmp	r4, r1
 80100a2:	d10b      	bne.n	80100bc <__any_on+0x3e>
 80100a4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80100a8:	4293      	cmp	r3, r2
 80100aa:	d803      	bhi.n	80100b4 <__any_on+0x36>
 80100ac:	2000      	movs	r0, #0
 80100ae:	bd10      	pop	{r4, pc}
 80100b0:	4603      	mov	r3, r0
 80100b2:	e7f7      	b.n	80100a4 <__any_on+0x26>
 80100b4:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80100b8:	2900      	cmp	r1, #0
 80100ba:	d0f5      	beq.n	80100a8 <__any_on+0x2a>
 80100bc:	2001      	movs	r0, #1
 80100be:	e7f6      	b.n	80100ae <__any_on+0x30>

080100c0 <_calloc_r>:
 80100c0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80100c2:	fba1 2402 	umull	r2, r4, r1, r2
 80100c6:	b94c      	cbnz	r4, 80100dc <_calloc_r+0x1c>
 80100c8:	4611      	mov	r1, r2
 80100ca:	9201      	str	r2, [sp, #4]
 80100cc:	f000 f82e 	bl	801012c <_malloc_r>
 80100d0:	9a01      	ldr	r2, [sp, #4]
 80100d2:	4605      	mov	r5, r0
 80100d4:	b930      	cbnz	r0, 80100e4 <_calloc_r+0x24>
 80100d6:	4628      	mov	r0, r5
 80100d8:	b003      	add	sp, #12
 80100da:	bd30      	pop	{r4, r5, pc}
 80100dc:	220c      	movs	r2, #12
 80100de:	6002      	str	r2, [r0, #0]
 80100e0:	2500      	movs	r5, #0
 80100e2:	e7f8      	b.n	80100d6 <_calloc_r+0x16>
 80100e4:	4621      	mov	r1, r4
 80100e6:	f7fe f9b7 	bl	800e458 <memset>
 80100ea:	e7f4      	b.n	80100d6 <_calloc_r+0x16>

080100ec <sbrk_aligned>:
 80100ec:	b570      	push	{r4, r5, r6, lr}
 80100ee:	4e0e      	ldr	r6, [pc, #56]	; (8010128 <sbrk_aligned+0x3c>)
 80100f0:	460c      	mov	r4, r1
 80100f2:	6831      	ldr	r1, [r6, #0]
 80100f4:	4605      	mov	r5, r0
 80100f6:	b911      	cbnz	r1, 80100fe <sbrk_aligned+0x12>
 80100f8:	f000 f896 	bl	8010228 <_sbrk_r>
 80100fc:	6030      	str	r0, [r6, #0]
 80100fe:	4621      	mov	r1, r4
 8010100:	4628      	mov	r0, r5
 8010102:	f000 f891 	bl	8010228 <_sbrk_r>
 8010106:	1c43      	adds	r3, r0, #1
 8010108:	d00a      	beq.n	8010120 <sbrk_aligned+0x34>
 801010a:	1cc4      	adds	r4, r0, #3
 801010c:	f024 0403 	bic.w	r4, r4, #3
 8010110:	42a0      	cmp	r0, r4
 8010112:	d007      	beq.n	8010124 <sbrk_aligned+0x38>
 8010114:	1a21      	subs	r1, r4, r0
 8010116:	4628      	mov	r0, r5
 8010118:	f000 f886 	bl	8010228 <_sbrk_r>
 801011c:	3001      	adds	r0, #1
 801011e:	d101      	bne.n	8010124 <sbrk_aligned+0x38>
 8010120:	f04f 34ff 	mov.w	r4, #4294967295
 8010124:	4620      	mov	r0, r4
 8010126:	bd70      	pop	{r4, r5, r6, pc}
 8010128:	24000a68 	.word	0x24000a68

0801012c <_malloc_r>:
 801012c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010130:	1ccd      	adds	r5, r1, #3
 8010132:	f025 0503 	bic.w	r5, r5, #3
 8010136:	3508      	adds	r5, #8
 8010138:	2d0c      	cmp	r5, #12
 801013a:	bf38      	it	cc
 801013c:	250c      	movcc	r5, #12
 801013e:	2d00      	cmp	r5, #0
 8010140:	4607      	mov	r7, r0
 8010142:	db01      	blt.n	8010148 <_malloc_r+0x1c>
 8010144:	42a9      	cmp	r1, r5
 8010146:	d905      	bls.n	8010154 <_malloc_r+0x28>
 8010148:	230c      	movs	r3, #12
 801014a:	603b      	str	r3, [r7, #0]
 801014c:	2600      	movs	r6, #0
 801014e:	4630      	mov	r0, r6
 8010150:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010154:	4e2e      	ldr	r6, [pc, #184]	; (8010210 <_malloc_r+0xe4>)
 8010156:	f000 f8d1 	bl	80102fc <__malloc_lock>
 801015a:	6833      	ldr	r3, [r6, #0]
 801015c:	461c      	mov	r4, r3
 801015e:	bb34      	cbnz	r4, 80101ae <_malloc_r+0x82>
 8010160:	4629      	mov	r1, r5
 8010162:	4638      	mov	r0, r7
 8010164:	f7ff ffc2 	bl	80100ec <sbrk_aligned>
 8010168:	1c43      	adds	r3, r0, #1
 801016a:	4604      	mov	r4, r0
 801016c:	d14d      	bne.n	801020a <_malloc_r+0xde>
 801016e:	6834      	ldr	r4, [r6, #0]
 8010170:	4626      	mov	r6, r4
 8010172:	2e00      	cmp	r6, #0
 8010174:	d140      	bne.n	80101f8 <_malloc_r+0xcc>
 8010176:	6823      	ldr	r3, [r4, #0]
 8010178:	4631      	mov	r1, r6
 801017a:	4638      	mov	r0, r7
 801017c:	eb04 0803 	add.w	r8, r4, r3
 8010180:	f000 f852 	bl	8010228 <_sbrk_r>
 8010184:	4580      	cmp	r8, r0
 8010186:	d13a      	bne.n	80101fe <_malloc_r+0xd2>
 8010188:	6821      	ldr	r1, [r4, #0]
 801018a:	3503      	adds	r5, #3
 801018c:	1a6d      	subs	r5, r5, r1
 801018e:	f025 0503 	bic.w	r5, r5, #3
 8010192:	3508      	adds	r5, #8
 8010194:	2d0c      	cmp	r5, #12
 8010196:	bf38      	it	cc
 8010198:	250c      	movcc	r5, #12
 801019a:	4629      	mov	r1, r5
 801019c:	4638      	mov	r0, r7
 801019e:	f7ff ffa5 	bl	80100ec <sbrk_aligned>
 80101a2:	3001      	adds	r0, #1
 80101a4:	d02b      	beq.n	80101fe <_malloc_r+0xd2>
 80101a6:	6823      	ldr	r3, [r4, #0]
 80101a8:	442b      	add	r3, r5
 80101aa:	6023      	str	r3, [r4, #0]
 80101ac:	e00e      	b.n	80101cc <_malloc_r+0xa0>
 80101ae:	6822      	ldr	r2, [r4, #0]
 80101b0:	1b52      	subs	r2, r2, r5
 80101b2:	d41e      	bmi.n	80101f2 <_malloc_r+0xc6>
 80101b4:	2a0b      	cmp	r2, #11
 80101b6:	d916      	bls.n	80101e6 <_malloc_r+0xba>
 80101b8:	1961      	adds	r1, r4, r5
 80101ba:	42a3      	cmp	r3, r4
 80101bc:	6025      	str	r5, [r4, #0]
 80101be:	bf18      	it	ne
 80101c0:	6059      	strne	r1, [r3, #4]
 80101c2:	6863      	ldr	r3, [r4, #4]
 80101c4:	bf08      	it	eq
 80101c6:	6031      	streq	r1, [r6, #0]
 80101c8:	5162      	str	r2, [r4, r5]
 80101ca:	604b      	str	r3, [r1, #4]
 80101cc:	4638      	mov	r0, r7
 80101ce:	f104 060b 	add.w	r6, r4, #11
 80101d2:	f000 f899 	bl	8010308 <__malloc_unlock>
 80101d6:	f026 0607 	bic.w	r6, r6, #7
 80101da:	1d23      	adds	r3, r4, #4
 80101dc:	1af2      	subs	r2, r6, r3
 80101de:	d0b6      	beq.n	801014e <_malloc_r+0x22>
 80101e0:	1b9b      	subs	r3, r3, r6
 80101e2:	50a3      	str	r3, [r4, r2]
 80101e4:	e7b3      	b.n	801014e <_malloc_r+0x22>
 80101e6:	6862      	ldr	r2, [r4, #4]
 80101e8:	42a3      	cmp	r3, r4
 80101ea:	bf0c      	ite	eq
 80101ec:	6032      	streq	r2, [r6, #0]
 80101ee:	605a      	strne	r2, [r3, #4]
 80101f0:	e7ec      	b.n	80101cc <_malloc_r+0xa0>
 80101f2:	4623      	mov	r3, r4
 80101f4:	6864      	ldr	r4, [r4, #4]
 80101f6:	e7b2      	b.n	801015e <_malloc_r+0x32>
 80101f8:	4634      	mov	r4, r6
 80101fa:	6876      	ldr	r6, [r6, #4]
 80101fc:	e7b9      	b.n	8010172 <_malloc_r+0x46>
 80101fe:	230c      	movs	r3, #12
 8010200:	603b      	str	r3, [r7, #0]
 8010202:	4638      	mov	r0, r7
 8010204:	f000 f880 	bl	8010308 <__malloc_unlock>
 8010208:	e7a1      	b.n	801014e <_malloc_r+0x22>
 801020a:	6025      	str	r5, [r4, #0]
 801020c:	e7de      	b.n	80101cc <_malloc_r+0xa0>
 801020e:	bf00      	nop
 8010210:	24000a64 	.word	0x24000a64
 8010214:	00000000 	.word	0x00000000

08010218 <nan>:
 8010218:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8010220 <nan+0x8>
 801021c:	4770      	bx	lr
 801021e:	bf00      	nop
 8010220:	00000000 	.word	0x00000000
 8010224:	7ff80000 	.word	0x7ff80000

08010228 <_sbrk_r>:
 8010228:	b538      	push	{r3, r4, r5, lr}
 801022a:	4d06      	ldr	r5, [pc, #24]	; (8010244 <_sbrk_r+0x1c>)
 801022c:	2300      	movs	r3, #0
 801022e:	4604      	mov	r4, r0
 8010230:	4608      	mov	r0, r1
 8010232:	602b      	str	r3, [r5, #0]
 8010234:	f7f3 fc5e 	bl	8003af4 <_sbrk>
 8010238:	1c43      	adds	r3, r0, #1
 801023a:	d102      	bne.n	8010242 <_sbrk_r+0x1a>
 801023c:	682b      	ldr	r3, [r5, #0]
 801023e:	b103      	cbz	r3, 8010242 <_sbrk_r+0x1a>
 8010240:	6023      	str	r3, [r4, #0]
 8010242:	bd38      	pop	{r3, r4, r5, pc}
 8010244:	24000a6c 	.word	0x24000a6c

08010248 <strncmp>:
 8010248:	b510      	push	{r4, lr}
 801024a:	b17a      	cbz	r2, 801026c <strncmp+0x24>
 801024c:	4603      	mov	r3, r0
 801024e:	3901      	subs	r1, #1
 8010250:	1884      	adds	r4, r0, r2
 8010252:	f813 0b01 	ldrb.w	r0, [r3], #1
 8010256:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 801025a:	4290      	cmp	r0, r2
 801025c:	d101      	bne.n	8010262 <strncmp+0x1a>
 801025e:	42a3      	cmp	r3, r4
 8010260:	d101      	bne.n	8010266 <strncmp+0x1e>
 8010262:	1a80      	subs	r0, r0, r2
 8010264:	bd10      	pop	{r4, pc}
 8010266:	2800      	cmp	r0, #0
 8010268:	d1f3      	bne.n	8010252 <strncmp+0xa>
 801026a:	e7fa      	b.n	8010262 <strncmp+0x1a>
 801026c:	4610      	mov	r0, r2
 801026e:	e7f9      	b.n	8010264 <strncmp+0x1c>

08010270 <__ascii_wctomb>:
 8010270:	b149      	cbz	r1, 8010286 <__ascii_wctomb+0x16>
 8010272:	2aff      	cmp	r2, #255	; 0xff
 8010274:	bf85      	ittet	hi
 8010276:	238a      	movhi	r3, #138	; 0x8a
 8010278:	6003      	strhi	r3, [r0, #0]
 801027a:	700a      	strbls	r2, [r1, #0]
 801027c:	f04f 30ff 	movhi.w	r0, #4294967295
 8010280:	bf98      	it	ls
 8010282:	2001      	movls	r0, #1
 8010284:	4770      	bx	lr
 8010286:	4608      	mov	r0, r1
 8010288:	4770      	bx	lr
	...

0801028c <__assert_func>:
 801028c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801028e:	4614      	mov	r4, r2
 8010290:	461a      	mov	r2, r3
 8010292:	4b09      	ldr	r3, [pc, #36]	; (80102b8 <__assert_func+0x2c>)
 8010294:	681b      	ldr	r3, [r3, #0]
 8010296:	4605      	mov	r5, r0
 8010298:	68d8      	ldr	r0, [r3, #12]
 801029a:	b14c      	cbz	r4, 80102b0 <__assert_func+0x24>
 801029c:	4b07      	ldr	r3, [pc, #28]	; (80102bc <__assert_func+0x30>)
 801029e:	9100      	str	r1, [sp, #0]
 80102a0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80102a4:	4906      	ldr	r1, [pc, #24]	; (80102c0 <__assert_func+0x34>)
 80102a6:	462b      	mov	r3, r5
 80102a8:	f000 f80e 	bl	80102c8 <fiprintf>
 80102ac:	f000 fc2c 	bl	8010b08 <abort>
 80102b0:	4b04      	ldr	r3, [pc, #16]	; (80102c4 <__assert_func+0x38>)
 80102b2:	461c      	mov	r4, r3
 80102b4:	e7f3      	b.n	801029e <__assert_func+0x12>
 80102b6:	bf00      	nop
 80102b8:	24000084 	.word	0x24000084
 80102bc:	08011cfc 	.word	0x08011cfc
 80102c0:	08011d09 	.word	0x08011d09
 80102c4:	08011d37 	.word	0x08011d37

080102c8 <fiprintf>:
 80102c8:	b40e      	push	{r1, r2, r3}
 80102ca:	b503      	push	{r0, r1, lr}
 80102cc:	4601      	mov	r1, r0
 80102ce:	ab03      	add	r3, sp, #12
 80102d0:	4805      	ldr	r0, [pc, #20]	; (80102e8 <fiprintf+0x20>)
 80102d2:	f853 2b04 	ldr.w	r2, [r3], #4
 80102d6:	6800      	ldr	r0, [r0, #0]
 80102d8:	9301      	str	r3, [sp, #4]
 80102da:	f000 f891 	bl	8010400 <_vfiprintf_r>
 80102de:	b002      	add	sp, #8
 80102e0:	f85d eb04 	ldr.w	lr, [sp], #4
 80102e4:	b003      	add	sp, #12
 80102e6:	4770      	bx	lr
 80102e8:	24000084 	.word	0x24000084

080102ec <malloc>:
 80102ec:	4b02      	ldr	r3, [pc, #8]	; (80102f8 <malloc+0xc>)
 80102ee:	4601      	mov	r1, r0
 80102f0:	6818      	ldr	r0, [r3, #0]
 80102f2:	f7ff bf1b 	b.w	801012c <_malloc_r>
 80102f6:	bf00      	nop
 80102f8:	24000084 	.word	0x24000084

080102fc <__malloc_lock>:
 80102fc:	4801      	ldr	r0, [pc, #4]	; (8010304 <__malloc_lock+0x8>)
 80102fe:	f000 bdc3 	b.w	8010e88 <__retarget_lock_acquire_recursive>
 8010302:	bf00      	nop
 8010304:	24000a70 	.word	0x24000a70

08010308 <__malloc_unlock>:
 8010308:	4801      	ldr	r0, [pc, #4]	; (8010310 <__malloc_unlock+0x8>)
 801030a:	f000 bdbe 	b.w	8010e8a <__retarget_lock_release_recursive>
 801030e:	bf00      	nop
 8010310:	24000a70 	.word	0x24000a70

08010314 <_free_r>:
 8010314:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8010316:	2900      	cmp	r1, #0
 8010318:	d044      	beq.n	80103a4 <_free_r+0x90>
 801031a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801031e:	9001      	str	r0, [sp, #4]
 8010320:	2b00      	cmp	r3, #0
 8010322:	f1a1 0404 	sub.w	r4, r1, #4
 8010326:	bfb8      	it	lt
 8010328:	18e4      	addlt	r4, r4, r3
 801032a:	f7ff ffe7 	bl	80102fc <__malloc_lock>
 801032e:	4a1e      	ldr	r2, [pc, #120]	; (80103a8 <_free_r+0x94>)
 8010330:	9801      	ldr	r0, [sp, #4]
 8010332:	6813      	ldr	r3, [r2, #0]
 8010334:	b933      	cbnz	r3, 8010344 <_free_r+0x30>
 8010336:	6063      	str	r3, [r4, #4]
 8010338:	6014      	str	r4, [r2, #0]
 801033a:	b003      	add	sp, #12
 801033c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8010340:	f7ff bfe2 	b.w	8010308 <__malloc_unlock>
 8010344:	42a3      	cmp	r3, r4
 8010346:	d908      	bls.n	801035a <_free_r+0x46>
 8010348:	6825      	ldr	r5, [r4, #0]
 801034a:	1961      	adds	r1, r4, r5
 801034c:	428b      	cmp	r3, r1
 801034e:	bf01      	itttt	eq
 8010350:	6819      	ldreq	r1, [r3, #0]
 8010352:	685b      	ldreq	r3, [r3, #4]
 8010354:	1949      	addeq	r1, r1, r5
 8010356:	6021      	streq	r1, [r4, #0]
 8010358:	e7ed      	b.n	8010336 <_free_r+0x22>
 801035a:	461a      	mov	r2, r3
 801035c:	685b      	ldr	r3, [r3, #4]
 801035e:	b10b      	cbz	r3, 8010364 <_free_r+0x50>
 8010360:	42a3      	cmp	r3, r4
 8010362:	d9fa      	bls.n	801035a <_free_r+0x46>
 8010364:	6811      	ldr	r1, [r2, #0]
 8010366:	1855      	adds	r5, r2, r1
 8010368:	42a5      	cmp	r5, r4
 801036a:	d10b      	bne.n	8010384 <_free_r+0x70>
 801036c:	6824      	ldr	r4, [r4, #0]
 801036e:	4421      	add	r1, r4
 8010370:	1854      	adds	r4, r2, r1
 8010372:	42a3      	cmp	r3, r4
 8010374:	6011      	str	r1, [r2, #0]
 8010376:	d1e0      	bne.n	801033a <_free_r+0x26>
 8010378:	681c      	ldr	r4, [r3, #0]
 801037a:	685b      	ldr	r3, [r3, #4]
 801037c:	6053      	str	r3, [r2, #4]
 801037e:	4421      	add	r1, r4
 8010380:	6011      	str	r1, [r2, #0]
 8010382:	e7da      	b.n	801033a <_free_r+0x26>
 8010384:	d902      	bls.n	801038c <_free_r+0x78>
 8010386:	230c      	movs	r3, #12
 8010388:	6003      	str	r3, [r0, #0]
 801038a:	e7d6      	b.n	801033a <_free_r+0x26>
 801038c:	6825      	ldr	r5, [r4, #0]
 801038e:	1961      	adds	r1, r4, r5
 8010390:	428b      	cmp	r3, r1
 8010392:	bf04      	itt	eq
 8010394:	6819      	ldreq	r1, [r3, #0]
 8010396:	685b      	ldreq	r3, [r3, #4]
 8010398:	6063      	str	r3, [r4, #4]
 801039a:	bf04      	itt	eq
 801039c:	1949      	addeq	r1, r1, r5
 801039e:	6021      	streq	r1, [r4, #0]
 80103a0:	6054      	str	r4, [r2, #4]
 80103a2:	e7ca      	b.n	801033a <_free_r+0x26>
 80103a4:	b003      	add	sp, #12
 80103a6:	bd30      	pop	{r4, r5, pc}
 80103a8:	24000a64 	.word	0x24000a64

080103ac <__sfputc_r>:
 80103ac:	6893      	ldr	r3, [r2, #8]
 80103ae:	3b01      	subs	r3, #1
 80103b0:	2b00      	cmp	r3, #0
 80103b2:	b410      	push	{r4}
 80103b4:	6093      	str	r3, [r2, #8]
 80103b6:	da08      	bge.n	80103ca <__sfputc_r+0x1e>
 80103b8:	6994      	ldr	r4, [r2, #24]
 80103ba:	42a3      	cmp	r3, r4
 80103bc:	db01      	blt.n	80103c2 <__sfputc_r+0x16>
 80103be:	290a      	cmp	r1, #10
 80103c0:	d103      	bne.n	80103ca <__sfputc_r+0x1e>
 80103c2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80103c6:	f000 badf 	b.w	8010988 <__swbuf_r>
 80103ca:	6813      	ldr	r3, [r2, #0]
 80103cc:	1c58      	adds	r0, r3, #1
 80103ce:	6010      	str	r0, [r2, #0]
 80103d0:	7019      	strb	r1, [r3, #0]
 80103d2:	4608      	mov	r0, r1
 80103d4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80103d8:	4770      	bx	lr

080103da <__sfputs_r>:
 80103da:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80103dc:	4606      	mov	r6, r0
 80103de:	460f      	mov	r7, r1
 80103e0:	4614      	mov	r4, r2
 80103e2:	18d5      	adds	r5, r2, r3
 80103e4:	42ac      	cmp	r4, r5
 80103e6:	d101      	bne.n	80103ec <__sfputs_r+0x12>
 80103e8:	2000      	movs	r0, #0
 80103ea:	e007      	b.n	80103fc <__sfputs_r+0x22>
 80103ec:	f814 1b01 	ldrb.w	r1, [r4], #1
 80103f0:	463a      	mov	r2, r7
 80103f2:	4630      	mov	r0, r6
 80103f4:	f7ff ffda 	bl	80103ac <__sfputc_r>
 80103f8:	1c43      	adds	r3, r0, #1
 80103fa:	d1f3      	bne.n	80103e4 <__sfputs_r+0xa>
 80103fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08010400 <_vfiprintf_r>:
 8010400:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010404:	460d      	mov	r5, r1
 8010406:	b09d      	sub	sp, #116	; 0x74
 8010408:	4614      	mov	r4, r2
 801040a:	4698      	mov	r8, r3
 801040c:	4606      	mov	r6, r0
 801040e:	b118      	cbz	r0, 8010418 <_vfiprintf_r+0x18>
 8010410:	6983      	ldr	r3, [r0, #24]
 8010412:	b90b      	cbnz	r3, 8010418 <_vfiprintf_r+0x18>
 8010414:	f000 fc9a 	bl	8010d4c <__sinit>
 8010418:	4b89      	ldr	r3, [pc, #548]	; (8010640 <_vfiprintf_r+0x240>)
 801041a:	429d      	cmp	r5, r3
 801041c:	d11b      	bne.n	8010456 <_vfiprintf_r+0x56>
 801041e:	6875      	ldr	r5, [r6, #4]
 8010420:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8010422:	07d9      	lsls	r1, r3, #31
 8010424:	d405      	bmi.n	8010432 <_vfiprintf_r+0x32>
 8010426:	89ab      	ldrh	r3, [r5, #12]
 8010428:	059a      	lsls	r2, r3, #22
 801042a:	d402      	bmi.n	8010432 <_vfiprintf_r+0x32>
 801042c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801042e:	f000 fd2b 	bl	8010e88 <__retarget_lock_acquire_recursive>
 8010432:	89ab      	ldrh	r3, [r5, #12]
 8010434:	071b      	lsls	r3, r3, #28
 8010436:	d501      	bpl.n	801043c <_vfiprintf_r+0x3c>
 8010438:	692b      	ldr	r3, [r5, #16]
 801043a:	b9eb      	cbnz	r3, 8010478 <_vfiprintf_r+0x78>
 801043c:	4629      	mov	r1, r5
 801043e:	4630      	mov	r0, r6
 8010440:	f000 faf4 	bl	8010a2c <__swsetup_r>
 8010444:	b1c0      	cbz	r0, 8010478 <_vfiprintf_r+0x78>
 8010446:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8010448:	07dc      	lsls	r4, r3, #31
 801044a:	d50e      	bpl.n	801046a <_vfiprintf_r+0x6a>
 801044c:	f04f 30ff 	mov.w	r0, #4294967295
 8010450:	b01d      	add	sp, #116	; 0x74
 8010452:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010456:	4b7b      	ldr	r3, [pc, #492]	; (8010644 <_vfiprintf_r+0x244>)
 8010458:	429d      	cmp	r5, r3
 801045a:	d101      	bne.n	8010460 <_vfiprintf_r+0x60>
 801045c:	68b5      	ldr	r5, [r6, #8]
 801045e:	e7df      	b.n	8010420 <_vfiprintf_r+0x20>
 8010460:	4b79      	ldr	r3, [pc, #484]	; (8010648 <_vfiprintf_r+0x248>)
 8010462:	429d      	cmp	r5, r3
 8010464:	bf08      	it	eq
 8010466:	68f5      	ldreq	r5, [r6, #12]
 8010468:	e7da      	b.n	8010420 <_vfiprintf_r+0x20>
 801046a:	89ab      	ldrh	r3, [r5, #12]
 801046c:	0598      	lsls	r0, r3, #22
 801046e:	d4ed      	bmi.n	801044c <_vfiprintf_r+0x4c>
 8010470:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8010472:	f000 fd0a 	bl	8010e8a <__retarget_lock_release_recursive>
 8010476:	e7e9      	b.n	801044c <_vfiprintf_r+0x4c>
 8010478:	2300      	movs	r3, #0
 801047a:	9309      	str	r3, [sp, #36]	; 0x24
 801047c:	2320      	movs	r3, #32
 801047e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8010482:	f8cd 800c 	str.w	r8, [sp, #12]
 8010486:	2330      	movs	r3, #48	; 0x30
 8010488:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 801064c <_vfiprintf_r+0x24c>
 801048c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8010490:	f04f 0901 	mov.w	r9, #1
 8010494:	4623      	mov	r3, r4
 8010496:	469a      	mov	sl, r3
 8010498:	f813 2b01 	ldrb.w	r2, [r3], #1
 801049c:	b10a      	cbz	r2, 80104a2 <_vfiprintf_r+0xa2>
 801049e:	2a25      	cmp	r2, #37	; 0x25
 80104a0:	d1f9      	bne.n	8010496 <_vfiprintf_r+0x96>
 80104a2:	ebba 0b04 	subs.w	fp, sl, r4
 80104a6:	d00b      	beq.n	80104c0 <_vfiprintf_r+0xc0>
 80104a8:	465b      	mov	r3, fp
 80104aa:	4622      	mov	r2, r4
 80104ac:	4629      	mov	r1, r5
 80104ae:	4630      	mov	r0, r6
 80104b0:	f7ff ff93 	bl	80103da <__sfputs_r>
 80104b4:	3001      	adds	r0, #1
 80104b6:	f000 80aa 	beq.w	801060e <_vfiprintf_r+0x20e>
 80104ba:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80104bc:	445a      	add	r2, fp
 80104be:	9209      	str	r2, [sp, #36]	; 0x24
 80104c0:	f89a 3000 	ldrb.w	r3, [sl]
 80104c4:	2b00      	cmp	r3, #0
 80104c6:	f000 80a2 	beq.w	801060e <_vfiprintf_r+0x20e>
 80104ca:	2300      	movs	r3, #0
 80104cc:	f04f 32ff 	mov.w	r2, #4294967295
 80104d0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80104d4:	f10a 0a01 	add.w	sl, sl, #1
 80104d8:	9304      	str	r3, [sp, #16]
 80104da:	9307      	str	r3, [sp, #28]
 80104dc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80104e0:	931a      	str	r3, [sp, #104]	; 0x68
 80104e2:	4654      	mov	r4, sl
 80104e4:	2205      	movs	r2, #5
 80104e6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80104ea:	4858      	ldr	r0, [pc, #352]	; (801064c <_vfiprintf_r+0x24c>)
 80104ec:	f7ef ff00 	bl	80002f0 <memchr>
 80104f0:	9a04      	ldr	r2, [sp, #16]
 80104f2:	b9d8      	cbnz	r0, 801052c <_vfiprintf_r+0x12c>
 80104f4:	06d1      	lsls	r1, r2, #27
 80104f6:	bf44      	itt	mi
 80104f8:	2320      	movmi	r3, #32
 80104fa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80104fe:	0713      	lsls	r3, r2, #28
 8010500:	bf44      	itt	mi
 8010502:	232b      	movmi	r3, #43	; 0x2b
 8010504:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010508:	f89a 3000 	ldrb.w	r3, [sl]
 801050c:	2b2a      	cmp	r3, #42	; 0x2a
 801050e:	d015      	beq.n	801053c <_vfiprintf_r+0x13c>
 8010510:	9a07      	ldr	r2, [sp, #28]
 8010512:	4654      	mov	r4, sl
 8010514:	2000      	movs	r0, #0
 8010516:	f04f 0c0a 	mov.w	ip, #10
 801051a:	4621      	mov	r1, r4
 801051c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010520:	3b30      	subs	r3, #48	; 0x30
 8010522:	2b09      	cmp	r3, #9
 8010524:	d94e      	bls.n	80105c4 <_vfiprintf_r+0x1c4>
 8010526:	b1b0      	cbz	r0, 8010556 <_vfiprintf_r+0x156>
 8010528:	9207      	str	r2, [sp, #28]
 801052a:	e014      	b.n	8010556 <_vfiprintf_r+0x156>
 801052c:	eba0 0308 	sub.w	r3, r0, r8
 8010530:	fa09 f303 	lsl.w	r3, r9, r3
 8010534:	4313      	orrs	r3, r2
 8010536:	9304      	str	r3, [sp, #16]
 8010538:	46a2      	mov	sl, r4
 801053a:	e7d2      	b.n	80104e2 <_vfiprintf_r+0xe2>
 801053c:	9b03      	ldr	r3, [sp, #12]
 801053e:	1d19      	adds	r1, r3, #4
 8010540:	681b      	ldr	r3, [r3, #0]
 8010542:	9103      	str	r1, [sp, #12]
 8010544:	2b00      	cmp	r3, #0
 8010546:	bfbb      	ittet	lt
 8010548:	425b      	neglt	r3, r3
 801054a:	f042 0202 	orrlt.w	r2, r2, #2
 801054e:	9307      	strge	r3, [sp, #28]
 8010550:	9307      	strlt	r3, [sp, #28]
 8010552:	bfb8      	it	lt
 8010554:	9204      	strlt	r2, [sp, #16]
 8010556:	7823      	ldrb	r3, [r4, #0]
 8010558:	2b2e      	cmp	r3, #46	; 0x2e
 801055a:	d10c      	bne.n	8010576 <_vfiprintf_r+0x176>
 801055c:	7863      	ldrb	r3, [r4, #1]
 801055e:	2b2a      	cmp	r3, #42	; 0x2a
 8010560:	d135      	bne.n	80105ce <_vfiprintf_r+0x1ce>
 8010562:	9b03      	ldr	r3, [sp, #12]
 8010564:	1d1a      	adds	r2, r3, #4
 8010566:	681b      	ldr	r3, [r3, #0]
 8010568:	9203      	str	r2, [sp, #12]
 801056a:	2b00      	cmp	r3, #0
 801056c:	bfb8      	it	lt
 801056e:	f04f 33ff 	movlt.w	r3, #4294967295
 8010572:	3402      	adds	r4, #2
 8010574:	9305      	str	r3, [sp, #20]
 8010576:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 801065c <_vfiprintf_r+0x25c>
 801057a:	7821      	ldrb	r1, [r4, #0]
 801057c:	2203      	movs	r2, #3
 801057e:	4650      	mov	r0, sl
 8010580:	f7ef feb6 	bl	80002f0 <memchr>
 8010584:	b140      	cbz	r0, 8010598 <_vfiprintf_r+0x198>
 8010586:	2340      	movs	r3, #64	; 0x40
 8010588:	eba0 000a 	sub.w	r0, r0, sl
 801058c:	fa03 f000 	lsl.w	r0, r3, r0
 8010590:	9b04      	ldr	r3, [sp, #16]
 8010592:	4303      	orrs	r3, r0
 8010594:	3401      	adds	r4, #1
 8010596:	9304      	str	r3, [sp, #16]
 8010598:	f814 1b01 	ldrb.w	r1, [r4], #1
 801059c:	482c      	ldr	r0, [pc, #176]	; (8010650 <_vfiprintf_r+0x250>)
 801059e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80105a2:	2206      	movs	r2, #6
 80105a4:	f7ef fea4 	bl	80002f0 <memchr>
 80105a8:	2800      	cmp	r0, #0
 80105aa:	d03f      	beq.n	801062c <_vfiprintf_r+0x22c>
 80105ac:	4b29      	ldr	r3, [pc, #164]	; (8010654 <_vfiprintf_r+0x254>)
 80105ae:	bb1b      	cbnz	r3, 80105f8 <_vfiprintf_r+0x1f8>
 80105b0:	9b03      	ldr	r3, [sp, #12]
 80105b2:	3307      	adds	r3, #7
 80105b4:	f023 0307 	bic.w	r3, r3, #7
 80105b8:	3308      	adds	r3, #8
 80105ba:	9303      	str	r3, [sp, #12]
 80105bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80105be:	443b      	add	r3, r7
 80105c0:	9309      	str	r3, [sp, #36]	; 0x24
 80105c2:	e767      	b.n	8010494 <_vfiprintf_r+0x94>
 80105c4:	fb0c 3202 	mla	r2, ip, r2, r3
 80105c8:	460c      	mov	r4, r1
 80105ca:	2001      	movs	r0, #1
 80105cc:	e7a5      	b.n	801051a <_vfiprintf_r+0x11a>
 80105ce:	2300      	movs	r3, #0
 80105d0:	3401      	adds	r4, #1
 80105d2:	9305      	str	r3, [sp, #20]
 80105d4:	4619      	mov	r1, r3
 80105d6:	f04f 0c0a 	mov.w	ip, #10
 80105da:	4620      	mov	r0, r4
 80105dc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80105e0:	3a30      	subs	r2, #48	; 0x30
 80105e2:	2a09      	cmp	r2, #9
 80105e4:	d903      	bls.n	80105ee <_vfiprintf_r+0x1ee>
 80105e6:	2b00      	cmp	r3, #0
 80105e8:	d0c5      	beq.n	8010576 <_vfiprintf_r+0x176>
 80105ea:	9105      	str	r1, [sp, #20]
 80105ec:	e7c3      	b.n	8010576 <_vfiprintf_r+0x176>
 80105ee:	fb0c 2101 	mla	r1, ip, r1, r2
 80105f2:	4604      	mov	r4, r0
 80105f4:	2301      	movs	r3, #1
 80105f6:	e7f0      	b.n	80105da <_vfiprintf_r+0x1da>
 80105f8:	ab03      	add	r3, sp, #12
 80105fa:	9300      	str	r3, [sp, #0]
 80105fc:	462a      	mov	r2, r5
 80105fe:	4b16      	ldr	r3, [pc, #88]	; (8010658 <_vfiprintf_r+0x258>)
 8010600:	a904      	add	r1, sp, #16
 8010602:	4630      	mov	r0, r6
 8010604:	f3af 8000 	nop.w
 8010608:	4607      	mov	r7, r0
 801060a:	1c78      	adds	r0, r7, #1
 801060c:	d1d6      	bne.n	80105bc <_vfiprintf_r+0x1bc>
 801060e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8010610:	07d9      	lsls	r1, r3, #31
 8010612:	d405      	bmi.n	8010620 <_vfiprintf_r+0x220>
 8010614:	89ab      	ldrh	r3, [r5, #12]
 8010616:	059a      	lsls	r2, r3, #22
 8010618:	d402      	bmi.n	8010620 <_vfiprintf_r+0x220>
 801061a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801061c:	f000 fc35 	bl	8010e8a <__retarget_lock_release_recursive>
 8010620:	89ab      	ldrh	r3, [r5, #12]
 8010622:	065b      	lsls	r3, r3, #25
 8010624:	f53f af12 	bmi.w	801044c <_vfiprintf_r+0x4c>
 8010628:	9809      	ldr	r0, [sp, #36]	; 0x24
 801062a:	e711      	b.n	8010450 <_vfiprintf_r+0x50>
 801062c:	ab03      	add	r3, sp, #12
 801062e:	9300      	str	r3, [sp, #0]
 8010630:	462a      	mov	r2, r5
 8010632:	4b09      	ldr	r3, [pc, #36]	; (8010658 <_vfiprintf_r+0x258>)
 8010634:	a904      	add	r1, sp, #16
 8010636:	4630      	mov	r0, r6
 8010638:	f000 f880 	bl	801073c <_printf_i>
 801063c:	e7e4      	b.n	8010608 <_vfiprintf_r+0x208>
 801063e:	bf00      	nop
 8010640:	08011e8c 	.word	0x08011e8c
 8010644:	08011eac 	.word	0x08011eac
 8010648:	08011e6c 	.word	0x08011e6c
 801064c:	08011e39 	.word	0x08011e39
 8010650:	08011e43 	.word	0x08011e43
 8010654:	00000000 	.word	0x00000000
 8010658:	080103db 	.word	0x080103db
 801065c:	08011e3f 	.word	0x08011e3f

08010660 <_printf_common>:
 8010660:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010664:	4616      	mov	r6, r2
 8010666:	4699      	mov	r9, r3
 8010668:	688a      	ldr	r2, [r1, #8]
 801066a:	690b      	ldr	r3, [r1, #16]
 801066c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8010670:	4293      	cmp	r3, r2
 8010672:	bfb8      	it	lt
 8010674:	4613      	movlt	r3, r2
 8010676:	6033      	str	r3, [r6, #0]
 8010678:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801067c:	4607      	mov	r7, r0
 801067e:	460c      	mov	r4, r1
 8010680:	b10a      	cbz	r2, 8010686 <_printf_common+0x26>
 8010682:	3301      	adds	r3, #1
 8010684:	6033      	str	r3, [r6, #0]
 8010686:	6823      	ldr	r3, [r4, #0]
 8010688:	0699      	lsls	r1, r3, #26
 801068a:	bf42      	ittt	mi
 801068c:	6833      	ldrmi	r3, [r6, #0]
 801068e:	3302      	addmi	r3, #2
 8010690:	6033      	strmi	r3, [r6, #0]
 8010692:	6825      	ldr	r5, [r4, #0]
 8010694:	f015 0506 	ands.w	r5, r5, #6
 8010698:	d106      	bne.n	80106a8 <_printf_common+0x48>
 801069a:	f104 0a19 	add.w	sl, r4, #25
 801069e:	68e3      	ldr	r3, [r4, #12]
 80106a0:	6832      	ldr	r2, [r6, #0]
 80106a2:	1a9b      	subs	r3, r3, r2
 80106a4:	42ab      	cmp	r3, r5
 80106a6:	dc26      	bgt.n	80106f6 <_printf_common+0x96>
 80106a8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80106ac:	1e13      	subs	r3, r2, #0
 80106ae:	6822      	ldr	r2, [r4, #0]
 80106b0:	bf18      	it	ne
 80106b2:	2301      	movne	r3, #1
 80106b4:	0692      	lsls	r2, r2, #26
 80106b6:	d42b      	bmi.n	8010710 <_printf_common+0xb0>
 80106b8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80106bc:	4649      	mov	r1, r9
 80106be:	4638      	mov	r0, r7
 80106c0:	47c0      	blx	r8
 80106c2:	3001      	adds	r0, #1
 80106c4:	d01e      	beq.n	8010704 <_printf_common+0xa4>
 80106c6:	6823      	ldr	r3, [r4, #0]
 80106c8:	68e5      	ldr	r5, [r4, #12]
 80106ca:	6832      	ldr	r2, [r6, #0]
 80106cc:	f003 0306 	and.w	r3, r3, #6
 80106d0:	2b04      	cmp	r3, #4
 80106d2:	bf08      	it	eq
 80106d4:	1aad      	subeq	r5, r5, r2
 80106d6:	68a3      	ldr	r3, [r4, #8]
 80106d8:	6922      	ldr	r2, [r4, #16]
 80106da:	bf0c      	ite	eq
 80106dc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80106e0:	2500      	movne	r5, #0
 80106e2:	4293      	cmp	r3, r2
 80106e4:	bfc4      	itt	gt
 80106e6:	1a9b      	subgt	r3, r3, r2
 80106e8:	18ed      	addgt	r5, r5, r3
 80106ea:	2600      	movs	r6, #0
 80106ec:	341a      	adds	r4, #26
 80106ee:	42b5      	cmp	r5, r6
 80106f0:	d11a      	bne.n	8010728 <_printf_common+0xc8>
 80106f2:	2000      	movs	r0, #0
 80106f4:	e008      	b.n	8010708 <_printf_common+0xa8>
 80106f6:	2301      	movs	r3, #1
 80106f8:	4652      	mov	r2, sl
 80106fa:	4649      	mov	r1, r9
 80106fc:	4638      	mov	r0, r7
 80106fe:	47c0      	blx	r8
 8010700:	3001      	adds	r0, #1
 8010702:	d103      	bne.n	801070c <_printf_common+0xac>
 8010704:	f04f 30ff 	mov.w	r0, #4294967295
 8010708:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801070c:	3501      	adds	r5, #1
 801070e:	e7c6      	b.n	801069e <_printf_common+0x3e>
 8010710:	18e1      	adds	r1, r4, r3
 8010712:	1c5a      	adds	r2, r3, #1
 8010714:	2030      	movs	r0, #48	; 0x30
 8010716:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801071a:	4422      	add	r2, r4
 801071c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8010720:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8010724:	3302      	adds	r3, #2
 8010726:	e7c7      	b.n	80106b8 <_printf_common+0x58>
 8010728:	2301      	movs	r3, #1
 801072a:	4622      	mov	r2, r4
 801072c:	4649      	mov	r1, r9
 801072e:	4638      	mov	r0, r7
 8010730:	47c0      	blx	r8
 8010732:	3001      	adds	r0, #1
 8010734:	d0e6      	beq.n	8010704 <_printf_common+0xa4>
 8010736:	3601      	adds	r6, #1
 8010738:	e7d9      	b.n	80106ee <_printf_common+0x8e>
	...

0801073c <_printf_i>:
 801073c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8010740:	7e0f      	ldrb	r7, [r1, #24]
 8010742:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8010744:	2f78      	cmp	r7, #120	; 0x78
 8010746:	4691      	mov	r9, r2
 8010748:	4680      	mov	r8, r0
 801074a:	460c      	mov	r4, r1
 801074c:	469a      	mov	sl, r3
 801074e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8010752:	d807      	bhi.n	8010764 <_printf_i+0x28>
 8010754:	2f62      	cmp	r7, #98	; 0x62
 8010756:	d80a      	bhi.n	801076e <_printf_i+0x32>
 8010758:	2f00      	cmp	r7, #0
 801075a:	f000 80d8 	beq.w	801090e <_printf_i+0x1d2>
 801075e:	2f58      	cmp	r7, #88	; 0x58
 8010760:	f000 80a3 	beq.w	80108aa <_printf_i+0x16e>
 8010764:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8010768:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801076c:	e03a      	b.n	80107e4 <_printf_i+0xa8>
 801076e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8010772:	2b15      	cmp	r3, #21
 8010774:	d8f6      	bhi.n	8010764 <_printf_i+0x28>
 8010776:	a101      	add	r1, pc, #4	; (adr r1, 801077c <_printf_i+0x40>)
 8010778:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801077c:	080107d5 	.word	0x080107d5
 8010780:	080107e9 	.word	0x080107e9
 8010784:	08010765 	.word	0x08010765
 8010788:	08010765 	.word	0x08010765
 801078c:	08010765 	.word	0x08010765
 8010790:	08010765 	.word	0x08010765
 8010794:	080107e9 	.word	0x080107e9
 8010798:	08010765 	.word	0x08010765
 801079c:	08010765 	.word	0x08010765
 80107a0:	08010765 	.word	0x08010765
 80107a4:	08010765 	.word	0x08010765
 80107a8:	080108f5 	.word	0x080108f5
 80107ac:	08010819 	.word	0x08010819
 80107b0:	080108d7 	.word	0x080108d7
 80107b4:	08010765 	.word	0x08010765
 80107b8:	08010765 	.word	0x08010765
 80107bc:	08010917 	.word	0x08010917
 80107c0:	08010765 	.word	0x08010765
 80107c4:	08010819 	.word	0x08010819
 80107c8:	08010765 	.word	0x08010765
 80107cc:	08010765 	.word	0x08010765
 80107d0:	080108df 	.word	0x080108df
 80107d4:	682b      	ldr	r3, [r5, #0]
 80107d6:	1d1a      	adds	r2, r3, #4
 80107d8:	681b      	ldr	r3, [r3, #0]
 80107da:	602a      	str	r2, [r5, #0]
 80107dc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80107e0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80107e4:	2301      	movs	r3, #1
 80107e6:	e0a3      	b.n	8010930 <_printf_i+0x1f4>
 80107e8:	6820      	ldr	r0, [r4, #0]
 80107ea:	6829      	ldr	r1, [r5, #0]
 80107ec:	0606      	lsls	r6, r0, #24
 80107ee:	f101 0304 	add.w	r3, r1, #4
 80107f2:	d50a      	bpl.n	801080a <_printf_i+0xce>
 80107f4:	680e      	ldr	r6, [r1, #0]
 80107f6:	602b      	str	r3, [r5, #0]
 80107f8:	2e00      	cmp	r6, #0
 80107fa:	da03      	bge.n	8010804 <_printf_i+0xc8>
 80107fc:	232d      	movs	r3, #45	; 0x2d
 80107fe:	4276      	negs	r6, r6
 8010800:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010804:	485e      	ldr	r0, [pc, #376]	; (8010980 <_printf_i+0x244>)
 8010806:	230a      	movs	r3, #10
 8010808:	e019      	b.n	801083e <_printf_i+0x102>
 801080a:	680e      	ldr	r6, [r1, #0]
 801080c:	602b      	str	r3, [r5, #0]
 801080e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8010812:	bf18      	it	ne
 8010814:	b236      	sxthne	r6, r6
 8010816:	e7ef      	b.n	80107f8 <_printf_i+0xbc>
 8010818:	682b      	ldr	r3, [r5, #0]
 801081a:	6820      	ldr	r0, [r4, #0]
 801081c:	1d19      	adds	r1, r3, #4
 801081e:	6029      	str	r1, [r5, #0]
 8010820:	0601      	lsls	r1, r0, #24
 8010822:	d501      	bpl.n	8010828 <_printf_i+0xec>
 8010824:	681e      	ldr	r6, [r3, #0]
 8010826:	e002      	b.n	801082e <_printf_i+0xf2>
 8010828:	0646      	lsls	r6, r0, #25
 801082a:	d5fb      	bpl.n	8010824 <_printf_i+0xe8>
 801082c:	881e      	ldrh	r6, [r3, #0]
 801082e:	4854      	ldr	r0, [pc, #336]	; (8010980 <_printf_i+0x244>)
 8010830:	2f6f      	cmp	r7, #111	; 0x6f
 8010832:	bf0c      	ite	eq
 8010834:	2308      	moveq	r3, #8
 8010836:	230a      	movne	r3, #10
 8010838:	2100      	movs	r1, #0
 801083a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801083e:	6865      	ldr	r5, [r4, #4]
 8010840:	60a5      	str	r5, [r4, #8]
 8010842:	2d00      	cmp	r5, #0
 8010844:	bfa2      	ittt	ge
 8010846:	6821      	ldrge	r1, [r4, #0]
 8010848:	f021 0104 	bicge.w	r1, r1, #4
 801084c:	6021      	strge	r1, [r4, #0]
 801084e:	b90e      	cbnz	r6, 8010854 <_printf_i+0x118>
 8010850:	2d00      	cmp	r5, #0
 8010852:	d04d      	beq.n	80108f0 <_printf_i+0x1b4>
 8010854:	4615      	mov	r5, r2
 8010856:	fbb6 f1f3 	udiv	r1, r6, r3
 801085a:	fb03 6711 	mls	r7, r3, r1, r6
 801085e:	5dc7      	ldrb	r7, [r0, r7]
 8010860:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8010864:	4637      	mov	r7, r6
 8010866:	42bb      	cmp	r3, r7
 8010868:	460e      	mov	r6, r1
 801086a:	d9f4      	bls.n	8010856 <_printf_i+0x11a>
 801086c:	2b08      	cmp	r3, #8
 801086e:	d10b      	bne.n	8010888 <_printf_i+0x14c>
 8010870:	6823      	ldr	r3, [r4, #0]
 8010872:	07de      	lsls	r6, r3, #31
 8010874:	d508      	bpl.n	8010888 <_printf_i+0x14c>
 8010876:	6923      	ldr	r3, [r4, #16]
 8010878:	6861      	ldr	r1, [r4, #4]
 801087a:	4299      	cmp	r1, r3
 801087c:	bfde      	ittt	le
 801087e:	2330      	movle	r3, #48	; 0x30
 8010880:	f805 3c01 	strble.w	r3, [r5, #-1]
 8010884:	f105 35ff 	addle.w	r5, r5, #4294967295
 8010888:	1b52      	subs	r2, r2, r5
 801088a:	6122      	str	r2, [r4, #16]
 801088c:	f8cd a000 	str.w	sl, [sp]
 8010890:	464b      	mov	r3, r9
 8010892:	aa03      	add	r2, sp, #12
 8010894:	4621      	mov	r1, r4
 8010896:	4640      	mov	r0, r8
 8010898:	f7ff fee2 	bl	8010660 <_printf_common>
 801089c:	3001      	adds	r0, #1
 801089e:	d14c      	bne.n	801093a <_printf_i+0x1fe>
 80108a0:	f04f 30ff 	mov.w	r0, #4294967295
 80108a4:	b004      	add	sp, #16
 80108a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80108aa:	4835      	ldr	r0, [pc, #212]	; (8010980 <_printf_i+0x244>)
 80108ac:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80108b0:	6829      	ldr	r1, [r5, #0]
 80108b2:	6823      	ldr	r3, [r4, #0]
 80108b4:	f851 6b04 	ldr.w	r6, [r1], #4
 80108b8:	6029      	str	r1, [r5, #0]
 80108ba:	061d      	lsls	r5, r3, #24
 80108bc:	d514      	bpl.n	80108e8 <_printf_i+0x1ac>
 80108be:	07df      	lsls	r7, r3, #31
 80108c0:	bf44      	itt	mi
 80108c2:	f043 0320 	orrmi.w	r3, r3, #32
 80108c6:	6023      	strmi	r3, [r4, #0]
 80108c8:	b91e      	cbnz	r6, 80108d2 <_printf_i+0x196>
 80108ca:	6823      	ldr	r3, [r4, #0]
 80108cc:	f023 0320 	bic.w	r3, r3, #32
 80108d0:	6023      	str	r3, [r4, #0]
 80108d2:	2310      	movs	r3, #16
 80108d4:	e7b0      	b.n	8010838 <_printf_i+0xfc>
 80108d6:	6823      	ldr	r3, [r4, #0]
 80108d8:	f043 0320 	orr.w	r3, r3, #32
 80108dc:	6023      	str	r3, [r4, #0]
 80108de:	2378      	movs	r3, #120	; 0x78
 80108e0:	4828      	ldr	r0, [pc, #160]	; (8010984 <_printf_i+0x248>)
 80108e2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80108e6:	e7e3      	b.n	80108b0 <_printf_i+0x174>
 80108e8:	0659      	lsls	r1, r3, #25
 80108ea:	bf48      	it	mi
 80108ec:	b2b6      	uxthmi	r6, r6
 80108ee:	e7e6      	b.n	80108be <_printf_i+0x182>
 80108f0:	4615      	mov	r5, r2
 80108f2:	e7bb      	b.n	801086c <_printf_i+0x130>
 80108f4:	682b      	ldr	r3, [r5, #0]
 80108f6:	6826      	ldr	r6, [r4, #0]
 80108f8:	6961      	ldr	r1, [r4, #20]
 80108fa:	1d18      	adds	r0, r3, #4
 80108fc:	6028      	str	r0, [r5, #0]
 80108fe:	0635      	lsls	r5, r6, #24
 8010900:	681b      	ldr	r3, [r3, #0]
 8010902:	d501      	bpl.n	8010908 <_printf_i+0x1cc>
 8010904:	6019      	str	r1, [r3, #0]
 8010906:	e002      	b.n	801090e <_printf_i+0x1d2>
 8010908:	0670      	lsls	r0, r6, #25
 801090a:	d5fb      	bpl.n	8010904 <_printf_i+0x1c8>
 801090c:	8019      	strh	r1, [r3, #0]
 801090e:	2300      	movs	r3, #0
 8010910:	6123      	str	r3, [r4, #16]
 8010912:	4615      	mov	r5, r2
 8010914:	e7ba      	b.n	801088c <_printf_i+0x150>
 8010916:	682b      	ldr	r3, [r5, #0]
 8010918:	1d1a      	adds	r2, r3, #4
 801091a:	602a      	str	r2, [r5, #0]
 801091c:	681d      	ldr	r5, [r3, #0]
 801091e:	6862      	ldr	r2, [r4, #4]
 8010920:	2100      	movs	r1, #0
 8010922:	4628      	mov	r0, r5
 8010924:	f7ef fce4 	bl	80002f0 <memchr>
 8010928:	b108      	cbz	r0, 801092e <_printf_i+0x1f2>
 801092a:	1b40      	subs	r0, r0, r5
 801092c:	6060      	str	r0, [r4, #4]
 801092e:	6863      	ldr	r3, [r4, #4]
 8010930:	6123      	str	r3, [r4, #16]
 8010932:	2300      	movs	r3, #0
 8010934:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010938:	e7a8      	b.n	801088c <_printf_i+0x150>
 801093a:	6923      	ldr	r3, [r4, #16]
 801093c:	462a      	mov	r2, r5
 801093e:	4649      	mov	r1, r9
 8010940:	4640      	mov	r0, r8
 8010942:	47d0      	blx	sl
 8010944:	3001      	adds	r0, #1
 8010946:	d0ab      	beq.n	80108a0 <_printf_i+0x164>
 8010948:	6823      	ldr	r3, [r4, #0]
 801094a:	079b      	lsls	r3, r3, #30
 801094c:	d413      	bmi.n	8010976 <_printf_i+0x23a>
 801094e:	68e0      	ldr	r0, [r4, #12]
 8010950:	9b03      	ldr	r3, [sp, #12]
 8010952:	4298      	cmp	r0, r3
 8010954:	bfb8      	it	lt
 8010956:	4618      	movlt	r0, r3
 8010958:	e7a4      	b.n	80108a4 <_printf_i+0x168>
 801095a:	2301      	movs	r3, #1
 801095c:	4632      	mov	r2, r6
 801095e:	4649      	mov	r1, r9
 8010960:	4640      	mov	r0, r8
 8010962:	47d0      	blx	sl
 8010964:	3001      	adds	r0, #1
 8010966:	d09b      	beq.n	80108a0 <_printf_i+0x164>
 8010968:	3501      	adds	r5, #1
 801096a:	68e3      	ldr	r3, [r4, #12]
 801096c:	9903      	ldr	r1, [sp, #12]
 801096e:	1a5b      	subs	r3, r3, r1
 8010970:	42ab      	cmp	r3, r5
 8010972:	dcf2      	bgt.n	801095a <_printf_i+0x21e>
 8010974:	e7eb      	b.n	801094e <_printf_i+0x212>
 8010976:	2500      	movs	r5, #0
 8010978:	f104 0619 	add.w	r6, r4, #25
 801097c:	e7f5      	b.n	801096a <_printf_i+0x22e>
 801097e:	bf00      	nop
 8010980:	08011e4a 	.word	0x08011e4a
 8010984:	08011e5b 	.word	0x08011e5b

08010988 <__swbuf_r>:
 8010988:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801098a:	460e      	mov	r6, r1
 801098c:	4614      	mov	r4, r2
 801098e:	4605      	mov	r5, r0
 8010990:	b118      	cbz	r0, 801099a <__swbuf_r+0x12>
 8010992:	6983      	ldr	r3, [r0, #24]
 8010994:	b90b      	cbnz	r3, 801099a <__swbuf_r+0x12>
 8010996:	f000 f9d9 	bl	8010d4c <__sinit>
 801099a:	4b21      	ldr	r3, [pc, #132]	; (8010a20 <__swbuf_r+0x98>)
 801099c:	429c      	cmp	r4, r3
 801099e:	d12b      	bne.n	80109f8 <__swbuf_r+0x70>
 80109a0:	686c      	ldr	r4, [r5, #4]
 80109a2:	69a3      	ldr	r3, [r4, #24]
 80109a4:	60a3      	str	r3, [r4, #8]
 80109a6:	89a3      	ldrh	r3, [r4, #12]
 80109a8:	071a      	lsls	r2, r3, #28
 80109aa:	d52f      	bpl.n	8010a0c <__swbuf_r+0x84>
 80109ac:	6923      	ldr	r3, [r4, #16]
 80109ae:	b36b      	cbz	r3, 8010a0c <__swbuf_r+0x84>
 80109b0:	6923      	ldr	r3, [r4, #16]
 80109b2:	6820      	ldr	r0, [r4, #0]
 80109b4:	1ac0      	subs	r0, r0, r3
 80109b6:	6963      	ldr	r3, [r4, #20]
 80109b8:	b2f6      	uxtb	r6, r6
 80109ba:	4283      	cmp	r3, r0
 80109bc:	4637      	mov	r7, r6
 80109be:	dc04      	bgt.n	80109ca <__swbuf_r+0x42>
 80109c0:	4621      	mov	r1, r4
 80109c2:	4628      	mov	r0, r5
 80109c4:	f000 f92e 	bl	8010c24 <_fflush_r>
 80109c8:	bb30      	cbnz	r0, 8010a18 <__swbuf_r+0x90>
 80109ca:	68a3      	ldr	r3, [r4, #8]
 80109cc:	3b01      	subs	r3, #1
 80109ce:	60a3      	str	r3, [r4, #8]
 80109d0:	6823      	ldr	r3, [r4, #0]
 80109d2:	1c5a      	adds	r2, r3, #1
 80109d4:	6022      	str	r2, [r4, #0]
 80109d6:	701e      	strb	r6, [r3, #0]
 80109d8:	6963      	ldr	r3, [r4, #20]
 80109da:	3001      	adds	r0, #1
 80109dc:	4283      	cmp	r3, r0
 80109de:	d004      	beq.n	80109ea <__swbuf_r+0x62>
 80109e0:	89a3      	ldrh	r3, [r4, #12]
 80109e2:	07db      	lsls	r3, r3, #31
 80109e4:	d506      	bpl.n	80109f4 <__swbuf_r+0x6c>
 80109e6:	2e0a      	cmp	r6, #10
 80109e8:	d104      	bne.n	80109f4 <__swbuf_r+0x6c>
 80109ea:	4621      	mov	r1, r4
 80109ec:	4628      	mov	r0, r5
 80109ee:	f000 f919 	bl	8010c24 <_fflush_r>
 80109f2:	b988      	cbnz	r0, 8010a18 <__swbuf_r+0x90>
 80109f4:	4638      	mov	r0, r7
 80109f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80109f8:	4b0a      	ldr	r3, [pc, #40]	; (8010a24 <__swbuf_r+0x9c>)
 80109fa:	429c      	cmp	r4, r3
 80109fc:	d101      	bne.n	8010a02 <__swbuf_r+0x7a>
 80109fe:	68ac      	ldr	r4, [r5, #8]
 8010a00:	e7cf      	b.n	80109a2 <__swbuf_r+0x1a>
 8010a02:	4b09      	ldr	r3, [pc, #36]	; (8010a28 <__swbuf_r+0xa0>)
 8010a04:	429c      	cmp	r4, r3
 8010a06:	bf08      	it	eq
 8010a08:	68ec      	ldreq	r4, [r5, #12]
 8010a0a:	e7ca      	b.n	80109a2 <__swbuf_r+0x1a>
 8010a0c:	4621      	mov	r1, r4
 8010a0e:	4628      	mov	r0, r5
 8010a10:	f000 f80c 	bl	8010a2c <__swsetup_r>
 8010a14:	2800      	cmp	r0, #0
 8010a16:	d0cb      	beq.n	80109b0 <__swbuf_r+0x28>
 8010a18:	f04f 37ff 	mov.w	r7, #4294967295
 8010a1c:	e7ea      	b.n	80109f4 <__swbuf_r+0x6c>
 8010a1e:	bf00      	nop
 8010a20:	08011e8c 	.word	0x08011e8c
 8010a24:	08011eac 	.word	0x08011eac
 8010a28:	08011e6c 	.word	0x08011e6c

08010a2c <__swsetup_r>:
 8010a2c:	4b32      	ldr	r3, [pc, #200]	; (8010af8 <__swsetup_r+0xcc>)
 8010a2e:	b570      	push	{r4, r5, r6, lr}
 8010a30:	681d      	ldr	r5, [r3, #0]
 8010a32:	4606      	mov	r6, r0
 8010a34:	460c      	mov	r4, r1
 8010a36:	b125      	cbz	r5, 8010a42 <__swsetup_r+0x16>
 8010a38:	69ab      	ldr	r3, [r5, #24]
 8010a3a:	b913      	cbnz	r3, 8010a42 <__swsetup_r+0x16>
 8010a3c:	4628      	mov	r0, r5
 8010a3e:	f000 f985 	bl	8010d4c <__sinit>
 8010a42:	4b2e      	ldr	r3, [pc, #184]	; (8010afc <__swsetup_r+0xd0>)
 8010a44:	429c      	cmp	r4, r3
 8010a46:	d10f      	bne.n	8010a68 <__swsetup_r+0x3c>
 8010a48:	686c      	ldr	r4, [r5, #4]
 8010a4a:	89a3      	ldrh	r3, [r4, #12]
 8010a4c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8010a50:	0719      	lsls	r1, r3, #28
 8010a52:	d42c      	bmi.n	8010aae <__swsetup_r+0x82>
 8010a54:	06dd      	lsls	r5, r3, #27
 8010a56:	d411      	bmi.n	8010a7c <__swsetup_r+0x50>
 8010a58:	2309      	movs	r3, #9
 8010a5a:	6033      	str	r3, [r6, #0]
 8010a5c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8010a60:	81a3      	strh	r3, [r4, #12]
 8010a62:	f04f 30ff 	mov.w	r0, #4294967295
 8010a66:	e03e      	b.n	8010ae6 <__swsetup_r+0xba>
 8010a68:	4b25      	ldr	r3, [pc, #148]	; (8010b00 <__swsetup_r+0xd4>)
 8010a6a:	429c      	cmp	r4, r3
 8010a6c:	d101      	bne.n	8010a72 <__swsetup_r+0x46>
 8010a6e:	68ac      	ldr	r4, [r5, #8]
 8010a70:	e7eb      	b.n	8010a4a <__swsetup_r+0x1e>
 8010a72:	4b24      	ldr	r3, [pc, #144]	; (8010b04 <__swsetup_r+0xd8>)
 8010a74:	429c      	cmp	r4, r3
 8010a76:	bf08      	it	eq
 8010a78:	68ec      	ldreq	r4, [r5, #12]
 8010a7a:	e7e6      	b.n	8010a4a <__swsetup_r+0x1e>
 8010a7c:	0758      	lsls	r0, r3, #29
 8010a7e:	d512      	bpl.n	8010aa6 <__swsetup_r+0x7a>
 8010a80:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8010a82:	b141      	cbz	r1, 8010a96 <__swsetup_r+0x6a>
 8010a84:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8010a88:	4299      	cmp	r1, r3
 8010a8a:	d002      	beq.n	8010a92 <__swsetup_r+0x66>
 8010a8c:	4630      	mov	r0, r6
 8010a8e:	f7ff fc41 	bl	8010314 <_free_r>
 8010a92:	2300      	movs	r3, #0
 8010a94:	6363      	str	r3, [r4, #52]	; 0x34
 8010a96:	89a3      	ldrh	r3, [r4, #12]
 8010a98:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8010a9c:	81a3      	strh	r3, [r4, #12]
 8010a9e:	2300      	movs	r3, #0
 8010aa0:	6063      	str	r3, [r4, #4]
 8010aa2:	6923      	ldr	r3, [r4, #16]
 8010aa4:	6023      	str	r3, [r4, #0]
 8010aa6:	89a3      	ldrh	r3, [r4, #12]
 8010aa8:	f043 0308 	orr.w	r3, r3, #8
 8010aac:	81a3      	strh	r3, [r4, #12]
 8010aae:	6923      	ldr	r3, [r4, #16]
 8010ab0:	b94b      	cbnz	r3, 8010ac6 <__swsetup_r+0x9a>
 8010ab2:	89a3      	ldrh	r3, [r4, #12]
 8010ab4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8010ab8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8010abc:	d003      	beq.n	8010ac6 <__swsetup_r+0x9a>
 8010abe:	4621      	mov	r1, r4
 8010ac0:	4630      	mov	r0, r6
 8010ac2:	f000 fa09 	bl	8010ed8 <__smakebuf_r>
 8010ac6:	89a0      	ldrh	r0, [r4, #12]
 8010ac8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8010acc:	f010 0301 	ands.w	r3, r0, #1
 8010ad0:	d00a      	beq.n	8010ae8 <__swsetup_r+0xbc>
 8010ad2:	2300      	movs	r3, #0
 8010ad4:	60a3      	str	r3, [r4, #8]
 8010ad6:	6963      	ldr	r3, [r4, #20]
 8010ad8:	425b      	negs	r3, r3
 8010ada:	61a3      	str	r3, [r4, #24]
 8010adc:	6923      	ldr	r3, [r4, #16]
 8010ade:	b943      	cbnz	r3, 8010af2 <__swsetup_r+0xc6>
 8010ae0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8010ae4:	d1ba      	bne.n	8010a5c <__swsetup_r+0x30>
 8010ae6:	bd70      	pop	{r4, r5, r6, pc}
 8010ae8:	0781      	lsls	r1, r0, #30
 8010aea:	bf58      	it	pl
 8010aec:	6963      	ldrpl	r3, [r4, #20]
 8010aee:	60a3      	str	r3, [r4, #8]
 8010af0:	e7f4      	b.n	8010adc <__swsetup_r+0xb0>
 8010af2:	2000      	movs	r0, #0
 8010af4:	e7f7      	b.n	8010ae6 <__swsetup_r+0xba>
 8010af6:	bf00      	nop
 8010af8:	24000084 	.word	0x24000084
 8010afc:	08011e8c 	.word	0x08011e8c
 8010b00:	08011eac 	.word	0x08011eac
 8010b04:	08011e6c 	.word	0x08011e6c

08010b08 <abort>:
 8010b08:	b508      	push	{r3, lr}
 8010b0a:	2006      	movs	r0, #6
 8010b0c:	f000 fa4c 	bl	8010fa8 <raise>
 8010b10:	2001      	movs	r0, #1
 8010b12:	f7f2 ff77 	bl	8003a04 <_exit>
	...

08010b18 <__sflush_r>:
 8010b18:	898a      	ldrh	r2, [r1, #12]
 8010b1a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010b1e:	4605      	mov	r5, r0
 8010b20:	0710      	lsls	r0, r2, #28
 8010b22:	460c      	mov	r4, r1
 8010b24:	d458      	bmi.n	8010bd8 <__sflush_r+0xc0>
 8010b26:	684b      	ldr	r3, [r1, #4]
 8010b28:	2b00      	cmp	r3, #0
 8010b2a:	dc05      	bgt.n	8010b38 <__sflush_r+0x20>
 8010b2c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8010b2e:	2b00      	cmp	r3, #0
 8010b30:	dc02      	bgt.n	8010b38 <__sflush_r+0x20>
 8010b32:	2000      	movs	r0, #0
 8010b34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010b38:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8010b3a:	2e00      	cmp	r6, #0
 8010b3c:	d0f9      	beq.n	8010b32 <__sflush_r+0x1a>
 8010b3e:	2300      	movs	r3, #0
 8010b40:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8010b44:	682f      	ldr	r7, [r5, #0]
 8010b46:	602b      	str	r3, [r5, #0]
 8010b48:	d032      	beq.n	8010bb0 <__sflush_r+0x98>
 8010b4a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8010b4c:	89a3      	ldrh	r3, [r4, #12]
 8010b4e:	075a      	lsls	r2, r3, #29
 8010b50:	d505      	bpl.n	8010b5e <__sflush_r+0x46>
 8010b52:	6863      	ldr	r3, [r4, #4]
 8010b54:	1ac0      	subs	r0, r0, r3
 8010b56:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8010b58:	b10b      	cbz	r3, 8010b5e <__sflush_r+0x46>
 8010b5a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8010b5c:	1ac0      	subs	r0, r0, r3
 8010b5e:	2300      	movs	r3, #0
 8010b60:	4602      	mov	r2, r0
 8010b62:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8010b64:	6a21      	ldr	r1, [r4, #32]
 8010b66:	4628      	mov	r0, r5
 8010b68:	47b0      	blx	r6
 8010b6a:	1c43      	adds	r3, r0, #1
 8010b6c:	89a3      	ldrh	r3, [r4, #12]
 8010b6e:	d106      	bne.n	8010b7e <__sflush_r+0x66>
 8010b70:	6829      	ldr	r1, [r5, #0]
 8010b72:	291d      	cmp	r1, #29
 8010b74:	d82c      	bhi.n	8010bd0 <__sflush_r+0xb8>
 8010b76:	4a2a      	ldr	r2, [pc, #168]	; (8010c20 <__sflush_r+0x108>)
 8010b78:	40ca      	lsrs	r2, r1
 8010b7a:	07d6      	lsls	r6, r2, #31
 8010b7c:	d528      	bpl.n	8010bd0 <__sflush_r+0xb8>
 8010b7e:	2200      	movs	r2, #0
 8010b80:	6062      	str	r2, [r4, #4]
 8010b82:	04d9      	lsls	r1, r3, #19
 8010b84:	6922      	ldr	r2, [r4, #16]
 8010b86:	6022      	str	r2, [r4, #0]
 8010b88:	d504      	bpl.n	8010b94 <__sflush_r+0x7c>
 8010b8a:	1c42      	adds	r2, r0, #1
 8010b8c:	d101      	bne.n	8010b92 <__sflush_r+0x7a>
 8010b8e:	682b      	ldr	r3, [r5, #0]
 8010b90:	b903      	cbnz	r3, 8010b94 <__sflush_r+0x7c>
 8010b92:	6560      	str	r0, [r4, #84]	; 0x54
 8010b94:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8010b96:	602f      	str	r7, [r5, #0]
 8010b98:	2900      	cmp	r1, #0
 8010b9a:	d0ca      	beq.n	8010b32 <__sflush_r+0x1a>
 8010b9c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8010ba0:	4299      	cmp	r1, r3
 8010ba2:	d002      	beq.n	8010baa <__sflush_r+0x92>
 8010ba4:	4628      	mov	r0, r5
 8010ba6:	f7ff fbb5 	bl	8010314 <_free_r>
 8010baa:	2000      	movs	r0, #0
 8010bac:	6360      	str	r0, [r4, #52]	; 0x34
 8010bae:	e7c1      	b.n	8010b34 <__sflush_r+0x1c>
 8010bb0:	6a21      	ldr	r1, [r4, #32]
 8010bb2:	2301      	movs	r3, #1
 8010bb4:	4628      	mov	r0, r5
 8010bb6:	47b0      	blx	r6
 8010bb8:	1c41      	adds	r1, r0, #1
 8010bba:	d1c7      	bne.n	8010b4c <__sflush_r+0x34>
 8010bbc:	682b      	ldr	r3, [r5, #0]
 8010bbe:	2b00      	cmp	r3, #0
 8010bc0:	d0c4      	beq.n	8010b4c <__sflush_r+0x34>
 8010bc2:	2b1d      	cmp	r3, #29
 8010bc4:	d001      	beq.n	8010bca <__sflush_r+0xb2>
 8010bc6:	2b16      	cmp	r3, #22
 8010bc8:	d101      	bne.n	8010bce <__sflush_r+0xb6>
 8010bca:	602f      	str	r7, [r5, #0]
 8010bcc:	e7b1      	b.n	8010b32 <__sflush_r+0x1a>
 8010bce:	89a3      	ldrh	r3, [r4, #12]
 8010bd0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010bd4:	81a3      	strh	r3, [r4, #12]
 8010bd6:	e7ad      	b.n	8010b34 <__sflush_r+0x1c>
 8010bd8:	690f      	ldr	r7, [r1, #16]
 8010bda:	2f00      	cmp	r7, #0
 8010bdc:	d0a9      	beq.n	8010b32 <__sflush_r+0x1a>
 8010bde:	0793      	lsls	r3, r2, #30
 8010be0:	680e      	ldr	r6, [r1, #0]
 8010be2:	bf08      	it	eq
 8010be4:	694b      	ldreq	r3, [r1, #20]
 8010be6:	600f      	str	r7, [r1, #0]
 8010be8:	bf18      	it	ne
 8010bea:	2300      	movne	r3, #0
 8010bec:	eba6 0807 	sub.w	r8, r6, r7
 8010bf0:	608b      	str	r3, [r1, #8]
 8010bf2:	f1b8 0f00 	cmp.w	r8, #0
 8010bf6:	dd9c      	ble.n	8010b32 <__sflush_r+0x1a>
 8010bf8:	6a21      	ldr	r1, [r4, #32]
 8010bfa:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8010bfc:	4643      	mov	r3, r8
 8010bfe:	463a      	mov	r2, r7
 8010c00:	4628      	mov	r0, r5
 8010c02:	47b0      	blx	r6
 8010c04:	2800      	cmp	r0, #0
 8010c06:	dc06      	bgt.n	8010c16 <__sflush_r+0xfe>
 8010c08:	89a3      	ldrh	r3, [r4, #12]
 8010c0a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010c0e:	81a3      	strh	r3, [r4, #12]
 8010c10:	f04f 30ff 	mov.w	r0, #4294967295
 8010c14:	e78e      	b.n	8010b34 <__sflush_r+0x1c>
 8010c16:	4407      	add	r7, r0
 8010c18:	eba8 0800 	sub.w	r8, r8, r0
 8010c1c:	e7e9      	b.n	8010bf2 <__sflush_r+0xda>
 8010c1e:	bf00      	nop
 8010c20:	20400001 	.word	0x20400001

08010c24 <_fflush_r>:
 8010c24:	b538      	push	{r3, r4, r5, lr}
 8010c26:	690b      	ldr	r3, [r1, #16]
 8010c28:	4605      	mov	r5, r0
 8010c2a:	460c      	mov	r4, r1
 8010c2c:	b913      	cbnz	r3, 8010c34 <_fflush_r+0x10>
 8010c2e:	2500      	movs	r5, #0
 8010c30:	4628      	mov	r0, r5
 8010c32:	bd38      	pop	{r3, r4, r5, pc}
 8010c34:	b118      	cbz	r0, 8010c3e <_fflush_r+0x1a>
 8010c36:	6983      	ldr	r3, [r0, #24]
 8010c38:	b90b      	cbnz	r3, 8010c3e <_fflush_r+0x1a>
 8010c3a:	f000 f887 	bl	8010d4c <__sinit>
 8010c3e:	4b14      	ldr	r3, [pc, #80]	; (8010c90 <_fflush_r+0x6c>)
 8010c40:	429c      	cmp	r4, r3
 8010c42:	d11b      	bne.n	8010c7c <_fflush_r+0x58>
 8010c44:	686c      	ldr	r4, [r5, #4]
 8010c46:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010c4a:	2b00      	cmp	r3, #0
 8010c4c:	d0ef      	beq.n	8010c2e <_fflush_r+0xa>
 8010c4e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8010c50:	07d0      	lsls	r0, r2, #31
 8010c52:	d404      	bmi.n	8010c5e <_fflush_r+0x3a>
 8010c54:	0599      	lsls	r1, r3, #22
 8010c56:	d402      	bmi.n	8010c5e <_fflush_r+0x3a>
 8010c58:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010c5a:	f000 f915 	bl	8010e88 <__retarget_lock_acquire_recursive>
 8010c5e:	4628      	mov	r0, r5
 8010c60:	4621      	mov	r1, r4
 8010c62:	f7ff ff59 	bl	8010b18 <__sflush_r>
 8010c66:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8010c68:	07da      	lsls	r2, r3, #31
 8010c6a:	4605      	mov	r5, r0
 8010c6c:	d4e0      	bmi.n	8010c30 <_fflush_r+0xc>
 8010c6e:	89a3      	ldrh	r3, [r4, #12]
 8010c70:	059b      	lsls	r3, r3, #22
 8010c72:	d4dd      	bmi.n	8010c30 <_fflush_r+0xc>
 8010c74:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010c76:	f000 f908 	bl	8010e8a <__retarget_lock_release_recursive>
 8010c7a:	e7d9      	b.n	8010c30 <_fflush_r+0xc>
 8010c7c:	4b05      	ldr	r3, [pc, #20]	; (8010c94 <_fflush_r+0x70>)
 8010c7e:	429c      	cmp	r4, r3
 8010c80:	d101      	bne.n	8010c86 <_fflush_r+0x62>
 8010c82:	68ac      	ldr	r4, [r5, #8]
 8010c84:	e7df      	b.n	8010c46 <_fflush_r+0x22>
 8010c86:	4b04      	ldr	r3, [pc, #16]	; (8010c98 <_fflush_r+0x74>)
 8010c88:	429c      	cmp	r4, r3
 8010c8a:	bf08      	it	eq
 8010c8c:	68ec      	ldreq	r4, [r5, #12]
 8010c8e:	e7da      	b.n	8010c46 <_fflush_r+0x22>
 8010c90:	08011e8c 	.word	0x08011e8c
 8010c94:	08011eac 	.word	0x08011eac
 8010c98:	08011e6c 	.word	0x08011e6c

08010c9c <std>:
 8010c9c:	2300      	movs	r3, #0
 8010c9e:	b510      	push	{r4, lr}
 8010ca0:	4604      	mov	r4, r0
 8010ca2:	e9c0 3300 	strd	r3, r3, [r0]
 8010ca6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8010caa:	6083      	str	r3, [r0, #8]
 8010cac:	8181      	strh	r1, [r0, #12]
 8010cae:	6643      	str	r3, [r0, #100]	; 0x64
 8010cb0:	81c2      	strh	r2, [r0, #14]
 8010cb2:	6183      	str	r3, [r0, #24]
 8010cb4:	4619      	mov	r1, r3
 8010cb6:	2208      	movs	r2, #8
 8010cb8:	305c      	adds	r0, #92	; 0x5c
 8010cba:	f7fd fbcd 	bl	800e458 <memset>
 8010cbe:	4b05      	ldr	r3, [pc, #20]	; (8010cd4 <std+0x38>)
 8010cc0:	6263      	str	r3, [r4, #36]	; 0x24
 8010cc2:	4b05      	ldr	r3, [pc, #20]	; (8010cd8 <std+0x3c>)
 8010cc4:	62a3      	str	r3, [r4, #40]	; 0x28
 8010cc6:	4b05      	ldr	r3, [pc, #20]	; (8010cdc <std+0x40>)
 8010cc8:	62e3      	str	r3, [r4, #44]	; 0x2c
 8010cca:	4b05      	ldr	r3, [pc, #20]	; (8010ce0 <std+0x44>)
 8010ccc:	6224      	str	r4, [r4, #32]
 8010cce:	6323      	str	r3, [r4, #48]	; 0x30
 8010cd0:	bd10      	pop	{r4, pc}
 8010cd2:	bf00      	nop
 8010cd4:	08010fe1 	.word	0x08010fe1
 8010cd8:	08011003 	.word	0x08011003
 8010cdc:	0801103b 	.word	0x0801103b
 8010ce0:	0801105f 	.word	0x0801105f

08010ce4 <_cleanup_r>:
 8010ce4:	4901      	ldr	r1, [pc, #4]	; (8010cec <_cleanup_r+0x8>)
 8010ce6:	f000 b8af 	b.w	8010e48 <_fwalk_reent>
 8010cea:	bf00      	nop
 8010cec:	08010c25 	.word	0x08010c25

08010cf0 <__sfmoreglue>:
 8010cf0:	b570      	push	{r4, r5, r6, lr}
 8010cf2:	2268      	movs	r2, #104	; 0x68
 8010cf4:	1e4d      	subs	r5, r1, #1
 8010cf6:	4355      	muls	r5, r2
 8010cf8:	460e      	mov	r6, r1
 8010cfa:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8010cfe:	f7ff fa15 	bl	801012c <_malloc_r>
 8010d02:	4604      	mov	r4, r0
 8010d04:	b140      	cbz	r0, 8010d18 <__sfmoreglue+0x28>
 8010d06:	2100      	movs	r1, #0
 8010d08:	e9c0 1600 	strd	r1, r6, [r0]
 8010d0c:	300c      	adds	r0, #12
 8010d0e:	60a0      	str	r0, [r4, #8]
 8010d10:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8010d14:	f7fd fba0 	bl	800e458 <memset>
 8010d18:	4620      	mov	r0, r4
 8010d1a:	bd70      	pop	{r4, r5, r6, pc}

08010d1c <__sfp_lock_acquire>:
 8010d1c:	4801      	ldr	r0, [pc, #4]	; (8010d24 <__sfp_lock_acquire+0x8>)
 8010d1e:	f000 b8b3 	b.w	8010e88 <__retarget_lock_acquire_recursive>
 8010d22:	bf00      	nop
 8010d24:	24000a71 	.word	0x24000a71

08010d28 <__sfp_lock_release>:
 8010d28:	4801      	ldr	r0, [pc, #4]	; (8010d30 <__sfp_lock_release+0x8>)
 8010d2a:	f000 b8ae 	b.w	8010e8a <__retarget_lock_release_recursive>
 8010d2e:	bf00      	nop
 8010d30:	24000a71 	.word	0x24000a71

08010d34 <__sinit_lock_acquire>:
 8010d34:	4801      	ldr	r0, [pc, #4]	; (8010d3c <__sinit_lock_acquire+0x8>)
 8010d36:	f000 b8a7 	b.w	8010e88 <__retarget_lock_acquire_recursive>
 8010d3a:	bf00      	nop
 8010d3c:	24000a72 	.word	0x24000a72

08010d40 <__sinit_lock_release>:
 8010d40:	4801      	ldr	r0, [pc, #4]	; (8010d48 <__sinit_lock_release+0x8>)
 8010d42:	f000 b8a2 	b.w	8010e8a <__retarget_lock_release_recursive>
 8010d46:	bf00      	nop
 8010d48:	24000a72 	.word	0x24000a72

08010d4c <__sinit>:
 8010d4c:	b510      	push	{r4, lr}
 8010d4e:	4604      	mov	r4, r0
 8010d50:	f7ff fff0 	bl	8010d34 <__sinit_lock_acquire>
 8010d54:	69a3      	ldr	r3, [r4, #24]
 8010d56:	b11b      	cbz	r3, 8010d60 <__sinit+0x14>
 8010d58:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010d5c:	f7ff bff0 	b.w	8010d40 <__sinit_lock_release>
 8010d60:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8010d64:	6523      	str	r3, [r4, #80]	; 0x50
 8010d66:	4b13      	ldr	r3, [pc, #76]	; (8010db4 <__sinit+0x68>)
 8010d68:	4a13      	ldr	r2, [pc, #76]	; (8010db8 <__sinit+0x6c>)
 8010d6a:	681b      	ldr	r3, [r3, #0]
 8010d6c:	62a2      	str	r2, [r4, #40]	; 0x28
 8010d6e:	42a3      	cmp	r3, r4
 8010d70:	bf04      	itt	eq
 8010d72:	2301      	moveq	r3, #1
 8010d74:	61a3      	streq	r3, [r4, #24]
 8010d76:	4620      	mov	r0, r4
 8010d78:	f000 f820 	bl	8010dbc <__sfp>
 8010d7c:	6060      	str	r0, [r4, #4]
 8010d7e:	4620      	mov	r0, r4
 8010d80:	f000 f81c 	bl	8010dbc <__sfp>
 8010d84:	60a0      	str	r0, [r4, #8]
 8010d86:	4620      	mov	r0, r4
 8010d88:	f000 f818 	bl	8010dbc <__sfp>
 8010d8c:	2200      	movs	r2, #0
 8010d8e:	60e0      	str	r0, [r4, #12]
 8010d90:	2104      	movs	r1, #4
 8010d92:	6860      	ldr	r0, [r4, #4]
 8010d94:	f7ff ff82 	bl	8010c9c <std>
 8010d98:	68a0      	ldr	r0, [r4, #8]
 8010d9a:	2201      	movs	r2, #1
 8010d9c:	2109      	movs	r1, #9
 8010d9e:	f7ff ff7d 	bl	8010c9c <std>
 8010da2:	68e0      	ldr	r0, [r4, #12]
 8010da4:	2202      	movs	r2, #2
 8010da6:	2112      	movs	r1, #18
 8010da8:	f7ff ff78 	bl	8010c9c <std>
 8010dac:	2301      	movs	r3, #1
 8010dae:	61a3      	str	r3, [r4, #24]
 8010db0:	e7d2      	b.n	8010d58 <__sinit+0xc>
 8010db2:	bf00      	nop
 8010db4:	08011aa0 	.word	0x08011aa0
 8010db8:	08010ce5 	.word	0x08010ce5

08010dbc <__sfp>:
 8010dbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010dbe:	4607      	mov	r7, r0
 8010dc0:	f7ff ffac 	bl	8010d1c <__sfp_lock_acquire>
 8010dc4:	4b1e      	ldr	r3, [pc, #120]	; (8010e40 <__sfp+0x84>)
 8010dc6:	681e      	ldr	r6, [r3, #0]
 8010dc8:	69b3      	ldr	r3, [r6, #24]
 8010dca:	b913      	cbnz	r3, 8010dd2 <__sfp+0x16>
 8010dcc:	4630      	mov	r0, r6
 8010dce:	f7ff ffbd 	bl	8010d4c <__sinit>
 8010dd2:	3648      	adds	r6, #72	; 0x48
 8010dd4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8010dd8:	3b01      	subs	r3, #1
 8010dda:	d503      	bpl.n	8010de4 <__sfp+0x28>
 8010ddc:	6833      	ldr	r3, [r6, #0]
 8010dde:	b30b      	cbz	r3, 8010e24 <__sfp+0x68>
 8010de0:	6836      	ldr	r6, [r6, #0]
 8010de2:	e7f7      	b.n	8010dd4 <__sfp+0x18>
 8010de4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8010de8:	b9d5      	cbnz	r5, 8010e20 <__sfp+0x64>
 8010dea:	4b16      	ldr	r3, [pc, #88]	; (8010e44 <__sfp+0x88>)
 8010dec:	60e3      	str	r3, [r4, #12]
 8010dee:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8010df2:	6665      	str	r5, [r4, #100]	; 0x64
 8010df4:	f000 f847 	bl	8010e86 <__retarget_lock_init_recursive>
 8010df8:	f7ff ff96 	bl	8010d28 <__sfp_lock_release>
 8010dfc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8010e00:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8010e04:	6025      	str	r5, [r4, #0]
 8010e06:	61a5      	str	r5, [r4, #24]
 8010e08:	2208      	movs	r2, #8
 8010e0a:	4629      	mov	r1, r5
 8010e0c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8010e10:	f7fd fb22 	bl	800e458 <memset>
 8010e14:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8010e18:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8010e1c:	4620      	mov	r0, r4
 8010e1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010e20:	3468      	adds	r4, #104	; 0x68
 8010e22:	e7d9      	b.n	8010dd8 <__sfp+0x1c>
 8010e24:	2104      	movs	r1, #4
 8010e26:	4638      	mov	r0, r7
 8010e28:	f7ff ff62 	bl	8010cf0 <__sfmoreglue>
 8010e2c:	4604      	mov	r4, r0
 8010e2e:	6030      	str	r0, [r6, #0]
 8010e30:	2800      	cmp	r0, #0
 8010e32:	d1d5      	bne.n	8010de0 <__sfp+0x24>
 8010e34:	f7ff ff78 	bl	8010d28 <__sfp_lock_release>
 8010e38:	230c      	movs	r3, #12
 8010e3a:	603b      	str	r3, [r7, #0]
 8010e3c:	e7ee      	b.n	8010e1c <__sfp+0x60>
 8010e3e:	bf00      	nop
 8010e40:	08011aa0 	.word	0x08011aa0
 8010e44:	ffff0001 	.word	0xffff0001

08010e48 <_fwalk_reent>:
 8010e48:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010e4c:	4606      	mov	r6, r0
 8010e4e:	4688      	mov	r8, r1
 8010e50:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8010e54:	2700      	movs	r7, #0
 8010e56:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8010e5a:	f1b9 0901 	subs.w	r9, r9, #1
 8010e5e:	d505      	bpl.n	8010e6c <_fwalk_reent+0x24>
 8010e60:	6824      	ldr	r4, [r4, #0]
 8010e62:	2c00      	cmp	r4, #0
 8010e64:	d1f7      	bne.n	8010e56 <_fwalk_reent+0xe>
 8010e66:	4638      	mov	r0, r7
 8010e68:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010e6c:	89ab      	ldrh	r3, [r5, #12]
 8010e6e:	2b01      	cmp	r3, #1
 8010e70:	d907      	bls.n	8010e82 <_fwalk_reent+0x3a>
 8010e72:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8010e76:	3301      	adds	r3, #1
 8010e78:	d003      	beq.n	8010e82 <_fwalk_reent+0x3a>
 8010e7a:	4629      	mov	r1, r5
 8010e7c:	4630      	mov	r0, r6
 8010e7e:	47c0      	blx	r8
 8010e80:	4307      	orrs	r7, r0
 8010e82:	3568      	adds	r5, #104	; 0x68
 8010e84:	e7e9      	b.n	8010e5a <_fwalk_reent+0x12>

08010e86 <__retarget_lock_init_recursive>:
 8010e86:	4770      	bx	lr

08010e88 <__retarget_lock_acquire_recursive>:
 8010e88:	4770      	bx	lr

08010e8a <__retarget_lock_release_recursive>:
 8010e8a:	4770      	bx	lr

08010e8c <__swhatbuf_r>:
 8010e8c:	b570      	push	{r4, r5, r6, lr}
 8010e8e:	460e      	mov	r6, r1
 8010e90:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010e94:	2900      	cmp	r1, #0
 8010e96:	b096      	sub	sp, #88	; 0x58
 8010e98:	4614      	mov	r4, r2
 8010e9a:	461d      	mov	r5, r3
 8010e9c:	da08      	bge.n	8010eb0 <__swhatbuf_r+0x24>
 8010e9e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8010ea2:	2200      	movs	r2, #0
 8010ea4:	602a      	str	r2, [r5, #0]
 8010ea6:	061a      	lsls	r2, r3, #24
 8010ea8:	d410      	bmi.n	8010ecc <__swhatbuf_r+0x40>
 8010eaa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010eae:	e00e      	b.n	8010ece <__swhatbuf_r+0x42>
 8010eb0:	466a      	mov	r2, sp
 8010eb2:	f000 f8fb 	bl	80110ac <_fstat_r>
 8010eb6:	2800      	cmp	r0, #0
 8010eb8:	dbf1      	blt.n	8010e9e <__swhatbuf_r+0x12>
 8010eba:	9a01      	ldr	r2, [sp, #4]
 8010ebc:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8010ec0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8010ec4:	425a      	negs	r2, r3
 8010ec6:	415a      	adcs	r2, r3
 8010ec8:	602a      	str	r2, [r5, #0]
 8010eca:	e7ee      	b.n	8010eaa <__swhatbuf_r+0x1e>
 8010ecc:	2340      	movs	r3, #64	; 0x40
 8010ece:	2000      	movs	r0, #0
 8010ed0:	6023      	str	r3, [r4, #0]
 8010ed2:	b016      	add	sp, #88	; 0x58
 8010ed4:	bd70      	pop	{r4, r5, r6, pc}
	...

08010ed8 <__smakebuf_r>:
 8010ed8:	898b      	ldrh	r3, [r1, #12]
 8010eda:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8010edc:	079d      	lsls	r5, r3, #30
 8010ede:	4606      	mov	r6, r0
 8010ee0:	460c      	mov	r4, r1
 8010ee2:	d507      	bpl.n	8010ef4 <__smakebuf_r+0x1c>
 8010ee4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8010ee8:	6023      	str	r3, [r4, #0]
 8010eea:	6123      	str	r3, [r4, #16]
 8010eec:	2301      	movs	r3, #1
 8010eee:	6163      	str	r3, [r4, #20]
 8010ef0:	b002      	add	sp, #8
 8010ef2:	bd70      	pop	{r4, r5, r6, pc}
 8010ef4:	ab01      	add	r3, sp, #4
 8010ef6:	466a      	mov	r2, sp
 8010ef8:	f7ff ffc8 	bl	8010e8c <__swhatbuf_r>
 8010efc:	9900      	ldr	r1, [sp, #0]
 8010efe:	4605      	mov	r5, r0
 8010f00:	4630      	mov	r0, r6
 8010f02:	f7ff f913 	bl	801012c <_malloc_r>
 8010f06:	b948      	cbnz	r0, 8010f1c <__smakebuf_r+0x44>
 8010f08:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010f0c:	059a      	lsls	r2, r3, #22
 8010f0e:	d4ef      	bmi.n	8010ef0 <__smakebuf_r+0x18>
 8010f10:	f023 0303 	bic.w	r3, r3, #3
 8010f14:	f043 0302 	orr.w	r3, r3, #2
 8010f18:	81a3      	strh	r3, [r4, #12]
 8010f1a:	e7e3      	b.n	8010ee4 <__smakebuf_r+0xc>
 8010f1c:	4b0d      	ldr	r3, [pc, #52]	; (8010f54 <__smakebuf_r+0x7c>)
 8010f1e:	62b3      	str	r3, [r6, #40]	; 0x28
 8010f20:	89a3      	ldrh	r3, [r4, #12]
 8010f22:	6020      	str	r0, [r4, #0]
 8010f24:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010f28:	81a3      	strh	r3, [r4, #12]
 8010f2a:	9b00      	ldr	r3, [sp, #0]
 8010f2c:	6163      	str	r3, [r4, #20]
 8010f2e:	9b01      	ldr	r3, [sp, #4]
 8010f30:	6120      	str	r0, [r4, #16]
 8010f32:	b15b      	cbz	r3, 8010f4c <__smakebuf_r+0x74>
 8010f34:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010f38:	4630      	mov	r0, r6
 8010f3a:	f000 f8c9 	bl	80110d0 <_isatty_r>
 8010f3e:	b128      	cbz	r0, 8010f4c <__smakebuf_r+0x74>
 8010f40:	89a3      	ldrh	r3, [r4, #12]
 8010f42:	f023 0303 	bic.w	r3, r3, #3
 8010f46:	f043 0301 	orr.w	r3, r3, #1
 8010f4a:	81a3      	strh	r3, [r4, #12]
 8010f4c:	89a0      	ldrh	r0, [r4, #12]
 8010f4e:	4305      	orrs	r5, r0
 8010f50:	81a5      	strh	r5, [r4, #12]
 8010f52:	e7cd      	b.n	8010ef0 <__smakebuf_r+0x18>
 8010f54:	08010ce5 	.word	0x08010ce5

08010f58 <_raise_r>:
 8010f58:	291f      	cmp	r1, #31
 8010f5a:	b538      	push	{r3, r4, r5, lr}
 8010f5c:	4604      	mov	r4, r0
 8010f5e:	460d      	mov	r5, r1
 8010f60:	d904      	bls.n	8010f6c <_raise_r+0x14>
 8010f62:	2316      	movs	r3, #22
 8010f64:	6003      	str	r3, [r0, #0]
 8010f66:	f04f 30ff 	mov.w	r0, #4294967295
 8010f6a:	bd38      	pop	{r3, r4, r5, pc}
 8010f6c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8010f6e:	b112      	cbz	r2, 8010f76 <_raise_r+0x1e>
 8010f70:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8010f74:	b94b      	cbnz	r3, 8010f8a <_raise_r+0x32>
 8010f76:	4620      	mov	r0, r4
 8010f78:	f000 f830 	bl	8010fdc <_getpid_r>
 8010f7c:	462a      	mov	r2, r5
 8010f7e:	4601      	mov	r1, r0
 8010f80:	4620      	mov	r0, r4
 8010f82:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010f86:	f000 b817 	b.w	8010fb8 <_kill_r>
 8010f8a:	2b01      	cmp	r3, #1
 8010f8c:	d00a      	beq.n	8010fa4 <_raise_r+0x4c>
 8010f8e:	1c59      	adds	r1, r3, #1
 8010f90:	d103      	bne.n	8010f9a <_raise_r+0x42>
 8010f92:	2316      	movs	r3, #22
 8010f94:	6003      	str	r3, [r0, #0]
 8010f96:	2001      	movs	r0, #1
 8010f98:	e7e7      	b.n	8010f6a <_raise_r+0x12>
 8010f9a:	2400      	movs	r4, #0
 8010f9c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8010fa0:	4628      	mov	r0, r5
 8010fa2:	4798      	blx	r3
 8010fa4:	2000      	movs	r0, #0
 8010fa6:	e7e0      	b.n	8010f6a <_raise_r+0x12>

08010fa8 <raise>:
 8010fa8:	4b02      	ldr	r3, [pc, #8]	; (8010fb4 <raise+0xc>)
 8010faa:	4601      	mov	r1, r0
 8010fac:	6818      	ldr	r0, [r3, #0]
 8010fae:	f7ff bfd3 	b.w	8010f58 <_raise_r>
 8010fb2:	bf00      	nop
 8010fb4:	24000084 	.word	0x24000084

08010fb8 <_kill_r>:
 8010fb8:	b538      	push	{r3, r4, r5, lr}
 8010fba:	4d07      	ldr	r5, [pc, #28]	; (8010fd8 <_kill_r+0x20>)
 8010fbc:	2300      	movs	r3, #0
 8010fbe:	4604      	mov	r4, r0
 8010fc0:	4608      	mov	r0, r1
 8010fc2:	4611      	mov	r1, r2
 8010fc4:	602b      	str	r3, [r5, #0]
 8010fc6:	f7f2 fd0d 	bl	80039e4 <_kill>
 8010fca:	1c43      	adds	r3, r0, #1
 8010fcc:	d102      	bne.n	8010fd4 <_kill_r+0x1c>
 8010fce:	682b      	ldr	r3, [r5, #0]
 8010fd0:	b103      	cbz	r3, 8010fd4 <_kill_r+0x1c>
 8010fd2:	6023      	str	r3, [r4, #0]
 8010fd4:	bd38      	pop	{r3, r4, r5, pc}
 8010fd6:	bf00      	nop
 8010fd8:	24000a6c 	.word	0x24000a6c

08010fdc <_getpid_r>:
 8010fdc:	f7f2 bcfa 	b.w	80039d4 <_getpid>

08010fe0 <__sread>:
 8010fe0:	b510      	push	{r4, lr}
 8010fe2:	460c      	mov	r4, r1
 8010fe4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010fe8:	f000 f894 	bl	8011114 <_read_r>
 8010fec:	2800      	cmp	r0, #0
 8010fee:	bfab      	itete	ge
 8010ff0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8010ff2:	89a3      	ldrhlt	r3, [r4, #12]
 8010ff4:	181b      	addge	r3, r3, r0
 8010ff6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8010ffa:	bfac      	ite	ge
 8010ffc:	6563      	strge	r3, [r4, #84]	; 0x54
 8010ffe:	81a3      	strhlt	r3, [r4, #12]
 8011000:	bd10      	pop	{r4, pc}

08011002 <__swrite>:
 8011002:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011006:	461f      	mov	r7, r3
 8011008:	898b      	ldrh	r3, [r1, #12]
 801100a:	05db      	lsls	r3, r3, #23
 801100c:	4605      	mov	r5, r0
 801100e:	460c      	mov	r4, r1
 8011010:	4616      	mov	r6, r2
 8011012:	d505      	bpl.n	8011020 <__swrite+0x1e>
 8011014:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011018:	2302      	movs	r3, #2
 801101a:	2200      	movs	r2, #0
 801101c:	f000 f868 	bl	80110f0 <_lseek_r>
 8011020:	89a3      	ldrh	r3, [r4, #12]
 8011022:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011026:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801102a:	81a3      	strh	r3, [r4, #12]
 801102c:	4632      	mov	r2, r6
 801102e:	463b      	mov	r3, r7
 8011030:	4628      	mov	r0, r5
 8011032:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011036:	f000 b817 	b.w	8011068 <_write_r>

0801103a <__sseek>:
 801103a:	b510      	push	{r4, lr}
 801103c:	460c      	mov	r4, r1
 801103e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011042:	f000 f855 	bl	80110f0 <_lseek_r>
 8011046:	1c43      	adds	r3, r0, #1
 8011048:	89a3      	ldrh	r3, [r4, #12]
 801104a:	bf15      	itete	ne
 801104c:	6560      	strne	r0, [r4, #84]	; 0x54
 801104e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8011052:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8011056:	81a3      	strheq	r3, [r4, #12]
 8011058:	bf18      	it	ne
 801105a:	81a3      	strhne	r3, [r4, #12]
 801105c:	bd10      	pop	{r4, pc}

0801105e <__sclose>:
 801105e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011062:	f000 b813 	b.w	801108c <_close_r>
	...

08011068 <_write_r>:
 8011068:	b538      	push	{r3, r4, r5, lr}
 801106a:	4d07      	ldr	r5, [pc, #28]	; (8011088 <_write_r+0x20>)
 801106c:	4604      	mov	r4, r0
 801106e:	4608      	mov	r0, r1
 8011070:	4611      	mov	r1, r2
 8011072:	2200      	movs	r2, #0
 8011074:	602a      	str	r2, [r5, #0]
 8011076:	461a      	mov	r2, r3
 8011078:	f7f2 fceb 	bl	8003a52 <_write>
 801107c:	1c43      	adds	r3, r0, #1
 801107e:	d102      	bne.n	8011086 <_write_r+0x1e>
 8011080:	682b      	ldr	r3, [r5, #0]
 8011082:	b103      	cbz	r3, 8011086 <_write_r+0x1e>
 8011084:	6023      	str	r3, [r4, #0]
 8011086:	bd38      	pop	{r3, r4, r5, pc}
 8011088:	24000a6c 	.word	0x24000a6c

0801108c <_close_r>:
 801108c:	b538      	push	{r3, r4, r5, lr}
 801108e:	4d06      	ldr	r5, [pc, #24]	; (80110a8 <_close_r+0x1c>)
 8011090:	2300      	movs	r3, #0
 8011092:	4604      	mov	r4, r0
 8011094:	4608      	mov	r0, r1
 8011096:	602b      	str	r3, [r5, #0]
 8011098:	f7f2 fcf7 	bl	8003a8a <_close>
 801109c:	1c43      	adds	r3, r0, #1
 801109e:	d102      	bne.n	80110a6 <_close_r+0x1a>
 80110a0:	682b      	ldr	r3, [r5, #0]
 80110a2:	b103      	cbz	r3, 80110a6 <_close_r+0x1a>
 80110a4:	6023      	str	r3, [r4, #0]
 80110a6:	bd38      	pop	{r3, r4, r5, pc}
 80110a8:	24000a6c 	.word	0x24000a6c

080110ac <_fstat_r>:
 80110ac:	b538      	push	{r3, r4, r5, lr}
 80110ae:	4d07      	ldr	r5, [pc, #28]	; (80110cc <_fstat_r+0x20>)
 80110b0:	2300      	movs	r3, #0
 80110b2:	4604      	mov	r4, r0
 80110b4:	4608      	mov	r0, r1
 80110b6:	4611      	mov	r1, r2
 80110b8:	602b      	str	r3, [r5, #0]
 80110ba:	f7f2 fcf2 	bl	8003aa2 <_fstat>
 80110be:	1c43      	adds	r3, r0, #1
 80110c0:	d102      	bne.n	80110c8 <_fstat_r+0x1c>
 80110c2:	682b      	ldr	r3, [r5, #0]
 80110c4:	b103      	cbz	r3, 80110c8 <_fstat_r+0x1c>
 80110c6:	6023      	str	r3, [r4, #0]
 80110c8:	bd38      	pop	{r3, r4, r5, pc}
 80110ca:	bf00      	nop
 80110cc:	24000a6c 	.word	0x24000a6c

080110d0 <_isatty_r>:
 80110d0:	b538      	push	{r3, r4, r5, lr}
 80110d2:	4d06      	ldr	r5, [pc, #24]	; (80110ec <_isatty_r+0x1c>)
 80110d4:	2300      	movs	r3, #0
 80110d6:	4604      	mov	r4, r0
 80110d8:	4608      	mov	r0, r1
 80110da:	602b      	str	r3, [r5, #0]
 80110dc:	f7f2 fcf1 	bl	8003ac2 <_isatty>
 80110e0:	1c43      	adds	r3, r0, #1
 80110e2:	d102      	bne.n	80110ea <_isatty_r+0x1a>
 80110e4:	682b      	ldr	r3, [r5, #0]
 80110e6:	b103      	cbz	r3, 80110ea <_isatty_r+0x1a>
 80110e8:	6023      	str	r3, [r4, #0]
 80110ea:	bd38      	pop	{r3, r4, r5, pc}
 80110ec:	24000a6c 	.word	0x24000a6c

080110f0 <_lseek_r>:
 80110f0:	b538      	push	{r3, r4, r5, lr}
 80110f2:	4d07      	ldr	r5, [pc, #28]	; (8011110 <_lseek_r+0x20>)
 80110f4:	4604      	mov	r4, r0
 80110f6:	4608      	mov	r0, r1
 80110f8:	4611      	mov	r1, r2
 80110fa:	2200      	movs	r2, #0
 80110fc:	602a      	str	r2, [r5, #0]
 80110fe:	461a      	mov	r2, r3
 8011100:	f7f2 fcea 	bl	8003ad8 <_lseek>
 8011104:	1c43      	adds	r3, r0, #1
 8011106:	d102      	bne.n	801110e <_lseek_r+0x1e>
 8011108:	682b      	ldr	r3, [r5, #0]
 801110a:	b103      	cbz	r3, 801110e <_lseek_r+0x1e>
 801110c:	6023      	str	r3, [r4, #0]
 801110e:	bd38      	pop	{r3, r4, r5, pc}
 8011110:	24000a6c 	.word	0x24000a6c

08011114 <_read_r>:
 8011114:	b538      	push	{r3, r4, r5, lr}
 8011116:	4d07      	ldr	r5, [pc, #28]	; (8011134 <_read_r+0x20>)
 8011118:	4604      	mov	r4, r0
 801111a:	4608      	mov	r0, r1
 801111c:	4611      	mov	r1, r2
 801111e:	2200      	movs	r2, #0
 8011120:	602a      	str	r2, [r5, #0]
 8011122:	461a      	mov	r2, r3
 8011124:	f7f2 fc78 	bl	8003a18 <_read>
 8011128:	1c43      	adds	r3, r0, #1
 801112a:	d102      	bne.n	8011132 <_read_r+0x1e>
 801112c:	682b      	ldr	r3, [r5, #0]
 801112e:	b103      	cbz	r3, 8011132 <_read_r+0x1e>
 8011130:	6023      	str	r3, [r4, #0]
 8011132:	bd38      	pop	{r3, r4, r5, pc}
 8011134:	24000a6c 	.word	0x24000a6c

08011138 <checkint>:
 8011138:	f3c1 520a 	ubfx	r2, r1, #20, #11
 801113c:	f240 33fe 	movw	r3, #1022	; 0x3fe
 8011140:	429a      	cmp	r2, r3
 8011142:	b570      	push	{r4, r5, r6, lr}
 8011144:	dd2a      	ble.n	801119c <checkint+0x64>
 8011146:	f240 4333 	movw	r3, #1075	; 0x433
 801114a:	429a      	cmp	r2, r3
 801114c:	dc24      	bgt.n	8011198 <checkint+0x60>
 801114e:	1a9b      	subs	r3, r3, r2
 8011150:	f1a3 0620 	sub.w	r6, r3, #32
 8011154:	f04f 32ff 	mov.w	r2, #4294967295
 8011158:	fa02 f403 	lsl.w	r4, r2, r3
 801115c:	fa02 f606 	lsl.w	r6, r2, r6
 8011160:	f1c3 0520 	rsb	r5, r3, #32
 8011164:	fa22 f505 	lsr.w	r5, r2, r5
 8011168:	4334      	orrs	r4, r6
 801116a:	432c      	orrs	r4, r5
 801116c:	409a      	lsls	r2, r3
 801116e:	ea20 0202 	bic.w	r2, r0, r2
 8011172:	ea21 0404 	bic.w	r4, r1, r4
 8011176:	4322      	orrs	r2, r4
 8011178:	f1a3 0420 	sub.w	r4, r3, #32
 801117c:	f1c3 0220 	rsb	r2, r3, #32
 8011180:	d10c      	bne.n	801119c <checkint+0x64>
 8011182:	40d8      	lsrs	r0, r3
 8011184:	fa01 f302 	lsl.w	r3, r1, r2
 8011188:	4318      	orrs	r0, r3
 801118a:	40e1      	lsrs	r1, r4
 801118c:	4308      	orrs	r0, r1
 801118e:	f000 0001 	and.w	r0, r0, #1
 8011192:	f1d0 0002 	rsbs	r0, r0, #2
 8011196:	bd70      	pop	{r4, r5, r6, pc}
 8011198:	2002      	movs	r0, #2
 801119a:	e7fc      	b.n	8011196 <checkint+0x5e>
 801119c:	2000      	movs	r0, #0
 801119e:	e7fa      	b.n	8011196 <checkint+0x5e>

080111a0 <pow>:
 80111a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80111a4:	ee10 4a90 	vmov	r4, s1
 80111a8:	ed2d 8b0a 	vpush	{d8-d12}
 80111ac:	ea4f 5a14 	mov.w	sl, r4, lsr #20
 80111b0:	ee11 7a90 	vmov	r7, s3
 80111b4:	f10a 32ff 	add.w	r2, sl, #4294967295
 80111b8:	f240 73fd 	movw	r3, #2045	; 0x7fd
 80111bc:	429a      	cmp	r2, r3
 80111be:	ee10 6a10 	vmov	r6, s0
 80111c2:	ee11 0a10 	vmov	r0, s2
 80111c6:	b086      	sub	sp, #24
 80111c8:	46d4      	mov	ip, sl
 80111ca:	ea4f 5517 	mov.w	r5, r7, lsr #20
 80111ce:	d806      	bhi.n	80111de <pow+0x3e>
 80111d0:	f3c5 030a 	ubfx	r3, r5, #0, #11
 80111d4:	f2a3 33be 	subw	r3, r3, #958	; 0x3be
 80111d8:	2b7f      	cmp	r3, #127	; 0x7f
 80111da:	f240 8156 	bls.w	801148a <pow+0x2ea>
 80111de:	1802      	adds	r2, r0, r0
 80111e0:	eb47 0107 	adc.w	r1, r7, r7
 80111e4:	f06f 0e01 	mvn.w	lr, #1
 80111e8:	f112 39ff 	adds.w	r9, r2, #4294967295
 80111ec:	f141 38ff 	adc.w	r8, r1, #4294967295
 80111f0:	f46f 1300 	mvn.w	r3, #2097152	; 0x200000
 80111f4:	45ce      	cmp	lr, r9
 80111f6:	eb73 0808 	sbcs.w	r8, r3, r8
 80111fa:	d23f      	bcs.n	801127c <pow+0xdc>
 80111fc:	ea52 0301 	orrs.w	r3, r2, r1
 8011200:	f04f 0300 	mov.w	r3, #0
 8011204:	d10c      	bne.n	8011220 <pow+0x80>
 8011206:	19b6      	adds	r6, r6, r6
 8011208:	f484 2400 	eor.w	r4, r4, #524288	; 0x80000
 801120c:	4164      	adcs	r4, r4
 801120e:	42b3      	cmp	r3, r6
 8011210:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8011214:	41a3      	sbcs	r3, r4
 8011216:	f0c0 808c 	bcc.w	8011332 <pow+0x192>
 801121a:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 801121e:	e028      	b.n	8011272 <pow+0xd2>
 8011220:	4da3      	ldr	r5, [pc, #652]	; (80114b0 <pow+0x310>)
 8011222:	42ac      	cmp	r4, r5
 8011224:	bf08      	it	eq
 8011226:	429e      	cmpeq	r6, r3
 8011228:	d107      	bne.n	801123a <pow+0x9a>
 801122a:	1800      	adds	r0, r0, r0
 801122c:	f487 2700 	eor.w	r7, r7, #524288	; 0x80000
 8011230:	417f      	adcs	r7, r7
 8011232:	4283      	cmp	r3, r0
 8011234:	4b9f      	ldr	r3, [pc, #636]	; (80114b4 <pow+0x314>)
 8011236:	41bb      	sbcs	r3, r7
 8011238:	e7ed      	b.n	8011216 <pow+0x76>
 801123a:	19b6      	adds	r6, r6, r6
 801123c:	489e      	ldr	r0, [pc, #632]	; (80114b8 <pow+0x318>)
 801123e:	4164      	adcs	r4, r4
 8011240:	42b3      	cmp	r3, r6
 8011242:	eb70 0504 	sbcs.w	r5, r0, r4
 8011246:	d374      	bcc.n	8011332 <pow+0x192>
 8011248:	4281      	cmp	r1, r0
 801124a:	bf08      	it	eq
 801124c:	429a      	cmpeq	r2, r3
 801124e:	d170      	bne.n	8011332 <pow+0x192>
 8011250:	4a9a      	ldr	r2, [pc, #616]	; (80114bc <pow+0x31c>)
 8011252:	4294      	cmp	r4, r2
 8011254:	bf08      	it	eq
 8011256:	429e      	cmpeq	r6, r3
 8011258:	d0df      	beq.n	801121a <pow+0x7a>
 801125a:	4294      	cmp	r4, r2
 801125c:	ea6f 0707 	mvn.w	r7, r7
 8011260:	bf34      	ite	cc
 8011262:	2400      	movcc	r4, #0
 8011264:	2401      	movcs	r4, #1
 8011266:	0fff      	lsrs	r7, r7, #31
 8011268:	42bc      	cmp	r4, r7
 801126a:	f040 81d9 	bne.w	8011620 <pow+0x480>
 801126e:	ee21 0b01 	vmul.f64	d0, d1, d1
 8011272:	b006      	add	sp, #24
 8011274:	ecbd 8b0a 	vpop	{d8-d12}
 8011278:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801127c:	eb16 0806 	adds.w	r8, r6, r6
 8011280:	eb44 0904 	adc.w	r9, r4, r4
 8011284:	f118 31ff 	adds.w	r1, r8, #4294967295
 8011288:	f169 0200 	sbc.w	r2, r9, #0
 801128c:	458e      	cmp	lr, r1
 801128e:	4193      	sbcs	r3, r2
 8011290:	d223      	bcs.n	80112da <pow+0x13a>
 8011292:	ee20 0b00 	vmul.f64	d0, d0, d0
 8011296:	2c00      	cmp	r4, #0
 8011298:	da12      	bge.n	80112c0 <pow+0x120>
 801129a:	4639      	mov	r1, r7
 801129c:	f7ff ff4c 	bl	8011138 <checkint>
 80112a0:	2801      	cmp	r0, #1
 80112a2:	d10d      	bne.n	80112c0 <pow+0x120>
 80112a4:	eeb1 0b40 	vneg.f64	d0, d0
 80112a8:	ea58 0309 	orrs.w	r3, r8, r9
 80112ac:	d10a      	bne.n	80112c4 <pow+0x124>
 80112ae:	2f00      	cmp	r7, #0
 80112b0:	dadf      	bge.n	8011272 <pow+0xd2>
 80112b2:	b006      	add	sp, #24
 80112b4:	ecbd 8b0a 	vpop	{d8-d12}
 80112b8:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80112bc:	f000 bb50 	b.w	8011960 <__math_divzero>
 80112c0:	2000      	movs	r0, #0
 80112c2:	e7f1      	b.n	80112a8 <pow+0x108>
 80112c4:	2f00      	cmp	r7, #0
 80112c6:	dad4      	bge.n	8011272 <pow+0xd2>
 80112c8:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 80112cc:	ee86 7b00 	vdiv.f64	d7, d6, d0
 80112d0:	ed8d 7b00 	vstr	d7, [sp]
 80112d4:	ed9d 0b00 	vldr	d0, [sp]
 80112d8:	e7cb      	b.n	8011272 <pow+0xd2>
 80112da:	2c00      	cmp	r4, #0
 80112dc:	da2c      	bge.n	8011338 <pow+0x198>
 80112de:	4639      	mov	r1, r7
 80112e0:	f7ff ff2a 	bl	8011138 <checkint>
 80112e4:	b930      	cbnz	r0, 80112f4 <pow+0x154>
 80112e6:	b006      	add	sp, #24
 80112e8:	ecbd 8b0a 	vpop	{d8-d12}
 80112ec:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80112f0:	f000 bb4e 	b.w	8011990 <__math_invalid>
 80112f4:	2801      	cmp	r0, #1
 80112f6:	bf14      	ite	ne
 80112f8:	2000      	movne	r0, #0
 80112fa:	f44f 2080 	moveq.w	r0, #262144	; 0x40000
 80112fe:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 8011302:	f3ca 0c0a 	ubfx	ip, sl, #0, #11
 8011306:	f3c5 020a 	ubfx	r2, r5, #0, #11
 801130a:	f2a2 33be 	subw	r3, r2, #958	; 0x3be
 801130e:	2b7f      	cmp	r3, #127	; 0x7f
 8011310:	d92d      	bls.n	801136e <pow+0x1ce>
 8011312:	4b67      	ldr	r3, [pc, #412]	; (80114b0 <pow+0x310>)
 8011314:	2000      	movs	r0, #0
 8011316:	429c      	cmp	r4, r3
 8011318:	bf08      	it	eq
 801131a:	4286      	cmpeq	r6, r0
 801131c:	f43f af7d 	beq.w	801121a <pow+0x7a>
 8011320:	f240 31bd 	movw	r1, #957	; 0x3bd
 8011324:	428a      	cmp	r2, r1
 8011326:	d80c      	bhi.n	8011342 <pow+0x1a2>
 8011328:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 801132c:	42b0      	cmp	r0, r6
 801132e:	41a3      	sbcs	r3, r4
 8011330:	d204      	bcs.n	801133c <pow+0x19c>
 8011332:	ee31 0b00 	vadd.f64	d0, d1, d0
 8011336:	e79c      	b.n	8011272 <pow+0xd2>
 8011338:	2000      	movs	r0, #0
 801133a:	e7e4      	b.n	8011306 <pow+0x166>
 801133c:	ee30 0b41 	vsub.f64	d0, d0, d1
 8011340:	e797      	b.n	8011272 <pow+0xd2>
 8011342:	2e01      	cmp	r6, #1
 8011344:	eb74 0303 	sbcs.w	r3, r4, r3
 8011348:	f240 72ff 	movw	r2, #2047	; 0x7ff
 801134c:	bf34      	ite	cc
 801134e:	2301      	movcc	r3, #1
 8011350:	2300      	movcs	r3, #0
 8011352:	4295      	cmp	r5, r2
 8011354:	bf8c      	ite	hi
 8011356:	2500      	movhi	r5, #0
 8011358:	2501      	movls	r5, #1
 801135a:	42ab      	cmp	r3, r5
 801135c:	f000 809d 	beq.w	801149a <pow+0x2fa>
 8011360:	b006      	add	sp, #24
 8011362:	ecbd 8b0a 	vpop	{d8-d12}
 8011366:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801136a:	f000 baf1 	b.w	8011950 <__math_oflow>
 801136e:	f1bc 0f00 	cmp.w	ip, #0
 8011372:	d10b      	bne.n	801138c <pow+0x1ec>
 8011374:	ed9f 7b4c 	vldr	d7, [pc, #304]	; 80114a8 <pow+0x308>
 8011378:	ee20 7b07 	vmul.f64	d7, d0, d7
 801137c:	ec53 2b17 	vmov	r2, r3, d7
 8011380:	ee17 6a10 	vmov	r6, s14
 8011384:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 8011388:	f1a4 7450 	sub.w	r4, r4, #54525952	; 0x3400000
 801138c:	4b4c      	ldr	r3, [pc, #304]	; (80114c0 <pow+0x320>)
 801138e:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 8011392:	4423      	add	r3, r4
 8011394:	f3c3 3246 	ubfx	r2, r3, #13, #7
 8011398:	1519      	asrs	r1, r3, #20
 801139a:	0d1b      	lsrs	r3, r3, #20
 801139c:	051b      	lsls	r3, r3, #20
 801139e:	eba4 0903 	sub.w	r9, r4, r3
 80113a2:	4b48      	ldr	r3, [pc, #288]	; (80114c4 <pow+0x324>)
 80113a4:	ee04 1a10 	vmov	s8, r1
 80113a8:	eb03 1142 	add.w	r1, r3, r2, lsl #5
 80113ac:	f1b6 0800 	subs.w	r8, r6, #0
 80113b0:	ed91 7b12 	vldr	d7, [r1, #72]	; 0x48
 80113b4:	ec49 8b15 	vmov	d5, r8, r9
 80113b8:	ed91 2b16 	vldr	d2, [r1, #88]	; 0x58
 80113bc:	eea5 6b07 	vfma.f64	d6, d5, d7
 80113c0:	ed93 7b00 	vldr	d7, [r3]
 80113c4:	ed93 5b02 	vldr	d5, [r3, #8]
 80113c8:	eeb8 4bc4 	vcvt.f64.s32	d4, s8
 80113cc:	eea4 2b07 	vfma.f64	d2, d4, d7
 80113d0:	ed91 7b18 	vldr	d7, [r1, #96]	; 0x60
 80113d4:	ee36 ab02 	vadd.f64	d10, d6, d2
 80113d8:	ee32 2b4a 	vsub.f64	d2, d2, d10
 80113dc:	eea4 7b05 	vfma.f64	d7, d4, d5
 80113e0:	ed93 5b04 	vldr	d5, [r3, #16]
 80113e4:	ee32 2b06 	vadd.f64	d2, d2, d6
 80113e8:	ee37 7b02 	vadd.f64	d7, d7, d2
 80113ec:	ee26 5b05 	vmul.f64	d5, d6, d5
 80113f0:	ed93 4b08 	vldr	d4, [r3, #32]
 80113f4:	ee26 0b05 	vmul.f64	d0, d6, d5
 80113f8:	eeb0 9b40 	vmov.f64	d9, d0
 80113fc:	ee95 9b06 	vfnms.f64	d9, d5, d6
 8011400:	ed93 5b06 	vldr	d5, [r3, #24]
 8011404:	ee3a 8b00 	vadd.f64	d8, d10, d0
 8011408:	ee26 bb00 	vmul.f64	d11, d6, d0
 801140c:	ed93 3b0c 	vldr	d3, [r3, #48]	; 0x30
 8011410:	eea6 5b04 	vfma.f64	d5, d6, d4
 8011414:	ee3a ab48 	vsub.f64	d10, d10, d8
 8011418:	ed93 4b0a 	vldr	d4, [r3, #40]	; 0x28
 801141c:	ee37 9b09 	vadd.f64	d9, d7, d9
 8011420:	ee3a ab00 	vadd.f64	d10, d10, d0
 8011424:	eea6 4b03 	vfma.f64	d4, d6, d3
 8011428:	ed93 cb10 	vldr	d12, [r3, #64]	; 0x40
 801142c:	ee39 ab0a 	vadd.f64	d10, d9, d10
 8011430:	ed93 3b0e 	vldr	d3, [r3, #56]	; 0x38
 8011434:	eea6 3b0c 	vfma.f64	d3, d6, d12
 8011438:	eea0 4b03 	vfma.f64	d4, d0, d3
 801143c:	eea0 5b04 	vfma.f64	d5, d0, d4
 8011440:	eeab ab05 	vfma.f64	d10, d11, d5
 8011444:	ee38 6b0a 	vadd.f64	d6, d8, d10
 8011448:	ee21 7b06 	vmul.f64	d7, d1, d6
 801144c:	ee17 3a90 	vmov	r3, s15
 8011450:	eeb0 5b47 	vmov.f64	d5, d7
 8011454:	f3c3 560a 	ubfx	r6, r3, #20, #11
 8011458:	f46f 7272 	mvn.w	r2, #968	; 0x3c8
 801145c:	18b2      	adds	r2, r6, r2
 801145e:	2a3e      	cmp	r2, #62	; 0x3e
 8011460:	ee91 5b06 	vfnms.f64	d5, d1, d6
 8011464:	ee38 8b46 	vsub.f64	d8, d8, d6
 8011468:	ee38 ab0a 	vadd.f64	d10, d8, d10
 801146c:	eea1 5b0a 	vfma.f64	d5, d1, d10
 8011470:	d92b      	bls.n	80114ca <pow+0x32a>
 8011472:	2a00      	cmp	r2, #0
 8011474:	da0b      	bge.n	801148e <pow+0x2ee>
 8011476:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 801147a:	ee37 0b00 	vadd.f64	d0, d7, d0
 801147e:	2800      	cmp	r0, #0
 8011480:	f43f aef7 	beq.w	8011272 <pow+0xd2>
 8011484:	eeb1 0b40 	vneg.f64	d0, d0
 8011488:	e6f3      	b.n	8011272 <pow+0xd2>
 801148a:	2000      	movs	r0, #0
 801148c:	e77e      	b.n	801138c <pow+0x1ec>
 801148e:	f5b6 6f81 	cmp.w	r6, #1032	; 0x408
 8011492:	d919      	bls.n	80114c8 <pow+0x328>
 8011494:	2b00      	cmp	r3, #0
 8011496:	f6bf af63 	bge.w	8011360 <pow+0x1c0>
 801149a:	b006      	add	sp, #24
 801149c:	ecbd 8b0a 	vpop	{d8-d12}
 80114a0:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80114a4:	f000 ba4c 	b.w	8011940 <__math_uflow>
 80114a8:	00000000 	.word	0x00000000
 80114ac:	43300000 	.word	0x43300000
 80114b0:	3ff00000 	.word	0x3ff00000
 80114b4:	fff00000 	.word	0xfff00000
 80114b8:	ffe00000 	.word	0xffe00000
 80114bc:	7fe00000 	.word	0x7fe00000
 80114c0:	c0196aab 	.word	0xc0196aab
 80114c4:	08011ed0 	.word	0x08011ed0
 80114c8:	2600      	movs	r6, #0
 80114ca:	495d      	ldr	r1, [pc, #372]	; (8011640 <pow+0x4a0>)
 80114cc:	ed91 4b02 	vldr	d4, [r1, #8]
 80114d0:	ed91 3b00 	vldr	d3, [r1]
 80114d4:	eeb0 6b44 	vmov.f64	d6, d4
 80114d8:	eea7 6b03 	vfma.f64	d6, d7, d3
 80114dc:	ee16 5a10 	vmov	r5, s12
 80114e0:	ee36 6b44 	vsub.f64	d6, d6, d4
 80114e4:	ed91 4b04 	vldr	d4, [r1, #16]
 80114e8:	f005 037f 	and.w	r3, r5, #127	; 0x7f
 80114ec:	eea6 7b04 	vfma.f64	d7, d6, d4
 80114f0:	eeb0 0b47 	vmov.f64	d0, d7
 80114f4:	ed91 7b06 	vldr	d7, [r1, #24]
 80114f8:	18dc      	adds	r4, r3, r3
 80114fa:	f104 030f 	add.w	r3, r4, #15
 80114fe:	eb01 04c4 	add.w	r4, r1, r4, lsl #3
 8011502:	eea6 0b07 	vfma.f64	d0, d6, d7
 8011506:	ed91 4b0a 	vldr	d4, [r1, #40]	; 0x28
 801150a:	ee35 0b00 	vadd.f64	d0, d5, d0
 801150e:	ee20 6b00 	vmul.f64	d6, d0, d0
 8011512:	ed94 7b1c 	vldr	d7, [r4, #112]	; 0x70
 8011516:	ed91 5b08 	vldr	d5, [r1, #32]
 801151a:	ee30 7b07 	vadd.f64	d7, d0, d7
 801151e:	eb01 02c3 	add.w	r2, r1, r3, lsl #3
 8011522:	eea0 5b04 	vfma.f64	d5, d0, d4
 8011526:	ed91 4b0e 	vldr	d4, [r1, #56]	; 0x38
 801152a:	eea6 7b05 	vfma.f64	d7, d6, d5
 801152e:	ee26 6b06 	vmul.f64	d6, d6, d6
 8011532:	ed91 5b0c 	vldr	d5, [r1, #48]	; 0x30
 8011536:	f851 c033 	ldr.w	ip, [r1, r3, lsl #3]
 801153a:	f8d2 e004 	ldr.w	lr, [r2, #4]
 801153e:	eea0 5b04 	vfma.f64	d5, d0, d4
 8011542:	1940      	adds	r0, r0, r5
 8011544:	2700      	movs	r7, #0
 8011546:	eb17 020c 	adds.w	r2, r7, ip
 801154a:	eb0e 3340 	add.w	r3, lr, r0, lsl #13
 801154e:	eea6 7b05 	vfma.f64	d7, d6, d5
 8011552:	2e00      	cmp	r6, #0
 8011554:	d15f      	bne.n	8011616 <pow+0x476>
 8011556:	42bd      	cmp	r5, r7
 8011558:	db13      	blt.n	8011582 <pow+0x3e2>
 801155a:	f103 4140 	add.w	r1, r3, #3221225472	; 0xc0000000
 801155e:	f501 0170 	add.w	r1, r1, #15728640	; 0xf00000
 8011562:	4610      	mov	r0, r2
 8011564:	ec41 0b10 	vmov	d0, r0, r1
 8011568:	eea7 0b00 	vfma.f64	d0, d7, d0
 801156c:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 8011628 <pow+0x488>
 8011570:	ee20 0b07 	vmul.f64	d0, d0, d7
 8011574:	b006      	add	sp, #24
 8011576:	ecbd 8b0a 	vpop	{d8-d12}
 801157a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801157e:	f000 ba1f 	b.w	80119c0 <__math_check_oflow>
 8011582:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
 8011586:	f501 1100 	add.w	r1, r1, #2097152	; 0x200000
 801158a:	4610      	mov	r0, r2
 801158c:	ec41 0b15 	vmov	d5, r0, r1
 8011590:	eeb7 4b00 	vmov.f64	d4, #112	; 0x3f800000  1.0
 8011594:	ee27 6b05 	vmul.f64	d6, d7, d5
 8011598:	ee35 7b06 	vadd.f64	d7, d5, d6
 801159c:	eeb0 3bc7 	vabs.f64	d3, d7
 80115a0:	eeb4 3bc4 	vcmpe.f64	d3, d4
 80115a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80115a8:	ed9f 0b21 	vldr	d0, [pc, #132]	; 8011630 <pow+0x490>
 80115ac:	d52a      	bpl.n	8011604 <pow+0x464>
 80115ae:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80115b2:	ee35 5b47 	vsub.f64	d5, d5, d7
 80115b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80115ba:	eebf 3b00 	vmov.f64	d3, #240	; 0xbf800000 -1.0
 80115be:	ee35 6b06 	vadd.f64	d6, d5, d6
 80115c2:	bf48      	it	mi
 80115c4:	eeb0 4b43 	vmovmi.f64	d4, d3
 80115c8:	ee37 3b04 	vadd.f64	d3, d7, d4
 80115cc:	ee34 5b43 	vsub.f64	d5, d4, d3
 80115d0:	ee35 7b07 	vadd.f64	d7, d5, d7
 80115d4:	ee37 7b06 	vadd.f64	d7, d7, d6
 80115d8:	ee37 7b03 	vadd.f64	d7, d7, d3
 80115dc:	ee37 7b44 	vsub.f64	d7, d7, d4
 80115e0:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80115e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80115e8:	d104      	bne.n	80115f4 <pow+0x454>
 80115ea:	4632      	mov	r2, r6
 80115ec:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 80115f0:	ec43 2b17 	vmov	d7, r2, r3
 80115f4:	ed8d 0b02 	vstr	d0, [sp, #8]
 80115f8:	ed9d 6b02 	vldr	d6, [sp, #8]
 80115fc:	ee26 6b00 	vmul.f64	d6, d6, d0
 8011600:	ed8d 6b04 	vstr	d6, [sp, #16]
 8011604:	ee27 0b00 	vmul.f64	d0, d7, d0
 8011608:	b006      	add	sp, #24
 801160a:	ecbd 8b0a 	vpop	{d8-d12}
 801160e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011612:	f000 b9cc 	b.w	80119ae <__math_check_uflow>
 8011616:	ec43 2b10 	vmov	d0, r2, r3
 801161a:	eea7 0b00 	vfma.f64	d0, d7, d0
 801161e:	e628      	b.n	8011272 <pow+0xd2>
 8011620:	ed9f 0b05 	vldr	d0, [pc, #20]	; 8011638 <pow+0x498>
 8011624:	e625      	b.n	8011272 <pow+0xd2>
 8011626:	bf00      	nop
 8011628:	00000000 	.word	0x00000000
 801162c:	7f000000 	.word	0x7f000000
 8011630:	00000000 	.word	0x00000000
 8011634:	00100000 	.word	0x00100000
	...
 8011640:	08012f18 	.word	0x08012f18

08011644 <asin>:
 8011644:	b508      	push	{r3, lr}
 8011646:	ed2d 8b04 	vpush	{d8-d9}
 801164a:	eeb0 8b40 	vmov.f64	d8, d0
 801164e:	f000 f847 	bl	80116e0 <__ieee754_asin>
 8011652:	eeb4 8b48 	vcmp.f64	d8, d8
 8011656:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801165a:	eeb0 9b40 	vmov.f64	d9, d0
 801165e:	d615      	bvs.n	801168c <asin+0x48>
 8011660:	eeb0 0b48 	vmov.f64	d0, d8
 8011664:	f000 f9c0 	bl	80119e8 <fabs>
 8011668:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 801166c:	eeb4 0bc7 	vcmpe.f64	d0, d7
 8011670:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011674:	dd0a      	ble.n	801168c <asin+0x48>
 8011676:	f7fc fec5 	bl	800e404 <__errno>
 801167a:	ecbd 8b04 	vpop	{d8-d9}
 801167e:	2321      	movs	r3, #33	; 0x21
 8011680:	6003      	str	r3, [r0, #0]
 8011682:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8011686:	4804      	ldr	r0, [pc, #16]	; (8011698 <asin+0x54>)
 8011688:	f7fe bdc6 	b.w	8010218 <nan>
 801168c:	eeb0 0b49 	vmov.f64	d0, d9
 8011690:	ecbd 8b04 	vpop	{d8-d9}
 8011694:	bd08      	pop	{r3, pc}
 8011696:	bf00      	nop
 8011698:	08011d37 	.word	0x08011d37
 801169c:	00000000 	.word	0x00000000

080116a0 <sqrt>:
 80116a0:	b508      	push	{r3, lr}
 80116a2:	ed2d 8b04 	vpush	{d8-d9}
 80116a6:	eeb0 8b40 	vmov.f64	d8, d0
 80116aa:	f000 f927 	bl	80118fc <__ieee754_sqrt>
 80116ae:	eeb4 8b48 	vcmp.f64	d8, d8
 80116b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80116b6:	d60c      	bvs.n	80116d2 <sqrt+0x32>
 80116b8:	ed9f 9b07 	vldr	d9, [pc, #28]	; 80116d8 <sqrt+0x38>
 80116bc:	eeb4 8bc9 	vcmpe.f64	d8, d9
 80116c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80116c4:	d505      	bpl.n	80116d2 <sqrt+0x32>
 80116c6:	f7fc fe9d 	bl	800e404 <__errno>
 80116ca:	ee89 0b09 	vdiv.f64	d0, d9, d9
 80116ce:	2321      	movs	r3, #33	; 0x21
 80116d0:	6003      	str	r3, [r0, #0]
 80116d2:	ecbd 8b04 	vpop	{d8-d9}
 80116d6:	bd08      	pop	{r3, pc}
	...

080116e0 <__ieee754_asin>:
 80116e0:	b538      	push	{r3, r4, r5, lr}
 80116e2:	ee10 5a90 	vmov	r5, s1
 80116e6:	4b82      	ldr	r3, [pc, #520]	; (80118f0 <__ieee754_asin+0x210>)
 80116e8:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 80116ec:	429c      	cmp	r4, r3
 80116ee:	ed2d 8b06 	vpush	{d8-d10}
 80116f2:	dd19      	ble.n	8011728 <__ieee754_asin+0x48>
 80116f4:	ee10 3a10 	vmov	r3, s0
 80116f8:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 80116fc:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8011700:	4323      	orrs	r3, r4
 8011702:	d10c      	bne.n	801171e <__ieee754_asin+0x3e>
 8011704:	ed9f 7b5c 	vldr	d7, [pc, #368]	; 8011878 <__ieee754_asin+0x198>
 8011708:	ed9f 6b5d 	vldr	d6, [pc, #372]	; 8011880 <__ieee754_asin+0x1a0>
 801170c:	ee20 7b07 	vmul.f64	d7, d0, d7
 8011710:	eea0 7b06 	vfma.f64	d7, d0, d6
 8011714:	eeb0 0b47 	vmov.f64	d0, d7
 8011718:	ecbd 8b06 	vpop	{d8-d10}
 801171c:	bd38      	pop	{r3, r4, r5, pc}
 801171e:	ee30 7b40 	vsub.f64	d7, d0, d0
 8011722:	ee87 0b07 	vdiv.f64	d0, d7, d7
 8011726:	e7f7      	b.n	8011718 <__ieee754_asin+0x38>
 8011728:	4b72      	ldr	r3, [pc, #456]	; (80118f4 <__ieee754_asin+0x214>)
 801172a:	eeb7 9b00 	vmov.f64	d9, #112	; 0x3f800000  1.0
 801172e:	429c      	cmp	r4, r3
 8011730:	dc0b      	bgt.n	801174a <__ieee754_asin+0x6a>
 8011732:	f1b4 5f79 	cmp.w	r4, #1044381696	; 0x3e400000
 8011736:	da52      	bge.n	80117de <__ieee754_asin+0xfe>
 8011738:	ed9f 7b53 	vldr	d7, [pc, #332]	; 8011888 <__ieee754_asin+0x1a8>
 801173c:	ee30 7b07 	vadd.f64	d7, d0, d7
 8011740:	eeb4 7bc9 	vcmpe.f64	d7, d9
 8011744:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011748:	dce6      	bgt.n	8011718 <__ieee754_asin+0x38>
 801174a:	eeb6 8b00 	vmov.f64	d8, #96	; 0x3f000000  0.5
 801174e:	f000 f94b 	bl	80119e8 <fabs>
 8011752:	ed9f 7b4f 	vldr	d7, [pc, #316]	; 8011890 <__ieee754_asin+0x1b0>
 8011756:	ee39 0b40 	vsub.f64	d0, d9, d0
 801175a:	ee20 8b08 	vmul.f64	d8, d0, d8
 801175e:	ed9f 6b4e 	vldr	d6, [pc, #312]	; 8011898 <__ieee754_asin+0x1b8>
 8011762:	eeb0 0b48 	vmov.f64	d0, d8
 8011766:	eea8 6b07 	vfma.f64	d6, d8, d7
 801176a:	ed9f 7b4d 	vldr	d7, [pc, #308]	; 80118a0 <__ieee754_asin+0x1c0>
 801176e:	eea6 7b08 	vfma.f64	d7, d6, d8
 8011772:	ed9f 6b4d 	vldr	d6, [pc, #308]	; 80118a8 <__ieee754_asin+0x1c8>
 8011776:	ed9f ab4e 	vldr	d10, [pc, #312]	; 80118b0 <__ieee754_asin+0x1d0>
 801177a:	eea7 6b08 	vfma.f64	d6, d7, d8
 801177e:	ed9f 7b4e 	vldr	d7, [pc, #312]	; 80118b8 <__ieee754_asin+0x1d8>
 8011782:	eea6 7b08 	vfma.f64	d7, d6, d8
 8011786:	ed9f 6b4e 	vldr	d6, [pc, #312]	; 80118c0 <__ieee754_asin+0x1e0>
 801178a:	eea7 ab08 	vfma.f64	d10, d7, d8
 801178e:	ee2a ab08 	vmul.f64	d10, d10, d8
 8011792:	ed9f 7b4d 	vldr	d7, [pc, #308]	; 80118c8 <__ieee754_asin+0x1e8>
 8011796:	eea8 7b06 	vfma.f64	d7, d8, d6
 801179a:	ed9f 6b4d 	vldr	d6, [pc, #308]	; 80118d0 <__ieee754_asin+0x1f0>
 801179e:	eea7 6b08 	vfma.f64	d6, d7, d8
 80117a2:	ed9f 7b4d 	vldr	d7, [pc, #308]	; 80118d8 <__ieee754_asin+0x1f8>
 80117a6:	eea6 7b08 	vfma.f64	d7, d6, d8
 80117aa:	eea7 9b08 	vfma.f64	d9, d7, d8
 80117ae:	f000 f8a5 	bl	80118fc <__ieee754_sqrt>
 80117b2:	ee8a 5b09 	vdiv.f64	d5, d10, d9
 80117b6:	eeb0 4b00 	vmov.f64	d4, #0	; 0x40000000  2.0
 80117ba:	4b4f      	ldr	r3, [pc, #316]	; (80118f8 <__ieee754_asin+0x218>)
 80117bc:	429c      	cmp	r4, r3
 80117be:	dd3d      	ble.n	801183c <__ieee754_asin+0x15c>
 80117c0:	eea0 0b05 	vfma.f64	d0, d0, d5
 80117c4:	ed9f 7b46 	vldr	d7, [pc, #280]	; 80118e0 <__ieee754_asin+0x200>
 80117c8:	eea0 7b04 	vfma.f64	d7, d0, d4
 80117cc:	ed9f 0b2c 	vldr	d0, [pc, #176]	; 8011880 <__ieee754_asin+0x1a0>
 80117d0:	ee30 0b47 	vsub.f64	d0, d0, d7
 80117d4:	2d00      	cmp	r5, #0
 80117d6:	bfd8      	it	le
 80117d8:	eeb1 0b40 	vnegle.f64	d0, d0
 80117dc:	e79c      	b.n	8011718 <__ieee754_asin+0x38>
 80117de:	ed9f 5b2c 	vldr	d5, [pc, #176]	; 8011890 <__ieee754_asin+0x1b0>
 80117e2:	ee20 7b00 	vmul.f64	d7, d0, d0
 80117e6:	ed9f 6b2c 	vldr	d6, [pc, #176]	; 8011898 <__ieee754_asin+0x1b8>
 80117ea:	eea7 6b05 	vfma.f64	d6, d7, d5
 80117ee:	ed9f 5b2c 	vldr	d5, [pc, #176]	; 80118a0 <__ieee754_asin+0x1c0>
 80117f2:	eea6 5b07 	vfma.f64	d5, d6, d7
 80117f6:	ed9f 6b2c 	vldr	d6, [pc, #176]	; 80118a8 <__ieee754_asin+0x1c8>
 80117fa:	eea5 6b07 	vfma.f64	d6, d5, d7
 80117fe:	ed9f 5b2e 	vldr	d5, [pc, #184]	; 80118b8 <__ieee754_asin+0x1d8>
 8011802:	eea6 5b07 	vfma.f64	d5, d6, d7
 8011806:	ed9f 6b2a 	vldr	d6, [pc, #168]	; 80118b0 <__ieee754_asin+0x1d0>
 801180a:	ed9f 4b2d 	vldr	d4, [pc, #180]	; 80118c0 <__ieee754_asin+0x1e0>
 801180e:	eea5 6b07 	vfma.f64	d6, d5, d7
 8011812:	ee26 6b07 	vmul.f64	d6, d6, d7
 8011816:	ed9f 5b2c 	vldr	d5, [pc, #176]	; 80118c8 <__ieee754_asin+0x1e8>
 801181a:	eea7 5b04 	vfma.f64	d5, d7, d4
 801181e:	ed9f 4b2c 	vldr	d4, [pc, #176]	; 80118d0 <__ieee754_asin+0x1f0>
 8011822:	eea5 4b07 	vfma.f64	d4, d5, d7
 8011826:	ed9f 5b2c 	vldr	d5, [pc, #176]	; 80118d8 <__ieee754_asin+0x1f8>
 801182a:	eea4 5b07 	vfma.f64	d5, d4, d7
 801182e:	eea5 9b07 	vfma.f64	d9, d5, d7
 8011832:	ee86 7b09 	vdiv.f64	d7, d6, d9
 8011836:	eea0 0b07 	vfma.f64	d0, d0, d7
 801183a:	e76d      	b.n	8011718 <__ieee754_asin+0x38>
 801183c:	ec53 2b10 	vmov	r2, r3, d0
 8011840:	2200      	movs	r2, #0
 8011842:	ec43 2b16 	vmov	d6, r2, r3
 8011846:	ee30 7b06 	vadd.f64	d7, d0, d6
 801184a:	eea6 8b46 	vfms.f64	d8, d6, d6
 801184e:	ee88 3b07 	vdiv.f64	d3, d8, d7
 8011852:	ed9f 7b09 	vldr	d7, [pc, #36]	; 8011878 <__ieee754_asin+0x198>
 8011856:	ee30 0b00 	vadd.f64	d0, d0, d0
 801185a:	eea3 7b44 	vfms.f64	d7, d3, d4
 801185e:	ee90 7b05 	vfnms.f64	d7, d0, d5
 8011862:	ed9f 5b21 	vldr	d5, [pc, #132]	; 80118e8 <__ieee754_asin+0x208>
 8011866:	eeb0 0b45 	vmov.f64	d0, d5
 801186a:	eea6 0b44 	vfms.f64	d0, d6, d4
 801186e:	ee37 0b40 	vsub.f64	d0, d7, d0
 8011872:	ee35 0b40 	vsub.f64	d0, d5, d0
 8011876:	e7ad      	b.n	80117d4 <__ieee754_asin+0xf4>
 8011878:	33145c07 	.word	0x33145c07
 801187c:	3c91a626 	.word	0x3c91a626
 8011880:	54442d18 	.word	0x54442d18
 8011884:	3ff921fb 	.word	0x3ff921fb
 8011888:	8800759c 	.word	0x8800759c
 801188c:	7e37e43c 	.word	0x7e37e43c
 8011890:	0dfdf709 	.word	0x0dfdf709
 8011894:	3f023de1 	.word	0x3f023de1
 8011898:	7501b288 	.word	0x7501b288
 801189c:	3f49efe0 	.word	0x3f49efe0
 80118a0:	b5688f3b 	.word	0xb5688f3b
 80118a4:	bfa48228 	.word	0xbfa48228
 80118a8:	0e884455 	.word	0x0e884455
 80118ac:	3fc9c155 	.word	0x3fc9c155
 80118b0:	55555555 	.word	0x55555555
 80118b4:	3fc55555 	.word	0x3fc55555
 80118b8:	03eb6f7d 	.word	0x03eb6f7d
 80118bc:	bfd4d612 	.word	0xbfd4d612
 80118c0:	b12e9282 	.word	0xb12e9282
 80118c4:	3fb3b8c5 	.word	0x3fb3b8c5
 80118c8:	1b8d0159 	.word	0x1b8d0159
 80118cc:	bfe6066c 	.word	0xbfe6066c
 80118d0:	9c598ac8 	.word	0x9c598ac8
 80118d4:	40002ae5 	.word	0x40002ae5
 80118d8:	1c8a2d4b 	.word	0x1c8a2d4b
 80118dc:	c0033a27 	.word	0xc0033a27
 80118e0:	33145c07 	.word	0x33145c07
 80118e4:	bc91a626 	.word	0xbc91a626
 80118e8:	54442d18 	.word	0x54442d18
 80118ec:	3fe921fb 	.word	0x3fe921fb
 80118f0:	3fefffff 	.word	0x3fefffff
 80118f4:	3fdfffff 	.word	0x3fdfffff
 80118f8:	3fef3332 	.word	0x3fef3332

080118fc <__ieee754_sqrt>:
 80118fc:	eeb1 0bc0 	vsqrt.f64	d0, d0
 8011900:	4770      	bx	lr

08011902 <with_errno>:
 8011902:	b513      	push	{r0, r1, r4, lr}
 8011904:	4604      	mov	r4, r0
 8011906:	ed8d 0b00 	vstr	d0, [sp]
 801190a:	f7fc fd7b 	bl	800e404 <__errno>
 801190e:	ed9d 0b00 	vldr	d0, [sp]
 8011912:	6004      	str	r4, [r0, #0]
 8011914:	b002      	add	sp, #8
 8011916:	bd10      	pop	{r4, pc}

08011918 <xflow>:
 8011918:	b082      	sub	sp, #8
 801191a:	b158      	cbz	r0, 8011934 <xflow+0x1c>
 801191c:	eeb1 7b40 	vneg.f64	d7, d0
 8011920:	ed8d 7b00 	vstr	d7, [sp]
 8011924:	ed9d 7b00 	vldr	d7, [sp]
 8011928:	2022      	movs	r0, #34	; 0x22
 801192a:	ee20 0b07 	vmul.f64	d0, d0, d7
 801192e:	b002      	add	sp, #8
 8011930:	f7ff bfe7 	b.w	8011902 <with_errno>
 8011934:	eeb0 7b40 	vmov.f64	d7, d0
 8011938:	e7f2      	b.n	8011920 <xflow+0x8>
 801193a:	0000      	movs	r0, r0
 801193c:	0000      	movs	r0, r0
	...

08011940 <__math_uflow>:
 8011940:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8011948 <__math_uflow+0x8>
 8011944:	f7ff bfe8 	b.w	8011918 <xflow>
 8011948:	00000000 	.word	0x00000000
 801194c:	10000000 	.word	0x10000000

08011950 <__math_oflow>:
 8011950:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8011958 <__math_oflow+0x8>
 8011954:	f7ff bfe0 	b.w	8011918 <xflow>
 8011958:	00000000 	.word	0x00000000
 801195c:	70000000 	.word	0x70000000

08011960 <__math_divzero>:
 8011960:	b082      	sub	sp, #8
 8011962:	2800      	cmp	r0, #0
 8011964:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8011968:	eebf 7b00 	vmov.f64	d7, #240	; 0xbf800000 -1.0
 801196c:	fe06 7b07 	vseleq.f64	d7, d6, d7
 8011970:	ed8d 7b00 	vstr	d7, [sp]
 8011974:	ed9d 0b00 	vldr	d0, [sp]
 8011978:	ed9f 7b03 	vldr	d7, [pc, #12]	; 8011988 <__math_divzero+0x28>
 801197c:	2022      	movs	r0, #34	; 0x22
 801197e:	ee80 0b07 	vdiv.f64	d0, d0, d7
 8011982:	b002      	add	sp, #8
 8011984:	f7ff bfbd 	b.w	8011902 <with_errno>
	...

08011990 <__math_invalid>:
 8011990:	eeb0 7b40 	vmov.f64	d7, d0
 8011994:	eeb4 7b47 	vcmp.f64	d7, d7
 8011998:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801199c:	ee30 6b40 	vsub.f64	d6, d0, d0
 80119a0:	ee86 0b06 	vdiv.f64	d0, d6, d6
 80119a4:	d602      	bvs.n	80119ac <__math_invalid+0x1c>
 80119a6:	2021      	movs	r0, #33	; 0x21
 80119a8:	f7ff bfab 	b.w	8011902 <with_errno>
 80119ac:	4770      	bx	lr

080119ae <__math_check_uflow>:
 80119ae:	eeb5 0b40 	vcmp.f64	d0, #0.0
 80119b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80119b6:	d102      	bne.n	80119be <__math_check_uflow+0x10>
 80119b8:	2022      	movs	r0, #34	; 0x22
 80119ba:	f7ff bfa2 	b.w	8011902 <with_errno>
 80119be:	4770      	bx	lr

080119c0 <__math_check_oflow>:
 80119c0:	ed9f 6b07 	vldr	d6, [pc, #28]	; 80119e0 <__math_check_oflow+0x20>
 80119c4:	eeb0 7bc0 	vabs.f64	d7, d0
 80119c8:	eeb4 7b46 	vcmp.f64	d7, d6
 80119cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80119d0:	dd02      	ble.n	80119d8 <__math_check_oflow+0x18>
 80119d2:	2022      	movs	r0, #34	; 0x22
 80119d4:	f7ff bf95 	b.w	8011902 <with_errno>
 80119d8:	4770      	bx	lr
 80119da:	bf00      	nop
 80119dc:	f3af 8000 	nop.w
 80119e0:	ffffffff 	.word	0xffffffff
 80119e4:	7fefffff 	.word	0x7fefffff

080119e8 <fabs>:
 80119e8:	ec51 0b10 	vmov	r0, r1, d0
 80119ec:	ee10 2a10 	vmov	r2, s0
 80119f0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80119f4:	ec43 2b10 	vmov	d0, r2, r3
 80119f8:	4770      	bx	lr
	...

080119fc <_init>:
 80119fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80119fe:	bf00      	nop
 8011a00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011a02:	bc08      	pop	{r3}
 8011a04:	469e      	mov	lr, r3
 8011a06:	4770      	bx	lr

08011a08 <_fini>:
 8011a08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011a0a:	bf00      	nop
 8011a0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011a0e:	bc08      	pop	{r3}
 8011a10:	469e      	mov	lr, r3
 8011a12:	4770      	bx	lr
